Type: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension

Method: System.Void .ctor()

Disassembly:
	0x03654AEC B.NE 0x3655388
	0x03654AF0 ADRP X8, 0xACC000
	0x03654AF4 LDR X8, [X8 + 0xBD8]
	0x03654AF8 LDR X0, [X8]
	0x03654AFC LDR W8, [X0 + 0xE0]
	0x03654B00 CBNZ W8, 0x3654B08
	0x03654B04 BL 0x1C16DFC
	0x03654B08 MOV X0, X19
	0x03654B0C MOV X1, X31
	0x03654B10 BL 0x3264FF4
	0x03654B14 STR W31, [X31 + 0x4]
	0x03654B18 STR X19, [X31 + 0x10]
	0x03654B1C B 0x3654B80
	0x03654B20 LDR X8, [X19]
	0x03654B24 LDR X9, [X1 + 0x40]
	0x03654B28 LDR X8, [X8 + 0x40]
	0x03654B2C CMP X8, X9
	0x03654B30 B.NE 0x3655390
	0x03654B34 MOV X0, X19
	0x03654B38 BL 0x1C16E08
	0x03654B3C LDR X8, [X0]
	0x03654B40 STR W31, [X31 + 0x4]
	0x03654B44 STP X23, X8, [X31 + 0x10]
	0x03654B48 B 0x3654B80
	0x03654B4C ADRP X8, 0xAE8000
	0x03654B50 LDR X8, [X8 + 0xAF8]
	0x03654B54 LDR X9, [X19]
	0x03654B58 LDR X1, [X8]
	0x03654B5C LDR X8, [X9 + 0x40]
	0x03654B60 LDR X9, [X1 + 0x40]
	0x03654B64 CMP X8, X9
	0x03654B68 B.NE 0x3655430
	0x03654B6C MOV X0, X19
	0x03654B70 BL 0x1C16E08
	0x03654B74 LDR W8, [X0]
	0x03654B78 STR X23, [X31 + 0x10]
	0x03654B7C STR W8, [X31 + 0x4]
	0x03654B80 ADRP X8, 0xAA1000
	0x03654B84 LDR X8, [X8 + 0xC48]
	0x03654B88 ADRP X19, 0xAE8000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD8D000
	008 Move X22, 0xAE9000
	009 Move X20, 0xAD0000
	010 Move X21, 0xAE6000
	011 Move W8, [X23+1694]
	012 Move X22, [X22+2016]
	013 Move X20, [X20+1616]
	014 Move X21, [X21+2320]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xAE9000
	021 Move X0, [X0+2016]
	022 Call 0x1C17CF4
	023 Move X0, 0xAD0000
	024 Move X0, [X0+1616]
	025 Call 0x1C17CF4
	026 Move X0, 0xAE6000
	027 Move X0, [X0+2320]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+1694], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Call Object..ctor, X0
	034 Move X0, [X22]
	035 Call 0x1C17F10
	036 Move X22, [X20]
	037 Move X21, [X21]
	038 Move X1, X31
	039 Move X20, X0
	040 Call Object..ctor, X0
	041 Move [X20+16], X22
	042 Move [X20+24], X21
	043 Move [X19+16], X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return 

Method: System.Void .ctor(System.Security.Cryptography.AsnEncodedData encodedSubjectKeyIdentifier, System.Boolean critical)

Disassembly:
	0x03650920 RET
	0x03650924 ADRP X0, 0xAAB000
	0x03650928 LDR X0, [X0 + 0x578]
	0x0365092C BL 0x1C16D08
	0x03650930 BL 0x1C16F10
	0x03650934 MOV X19, X0
	0x03650938 ADRP X0, 0xADB000
	0x0365093C LDR X0, [X0 + 0xF68]
	0x03650940 BL 0x1C16D08
	0x03650944 MOV X1, X0
	0x03650948 MOV X0, X19
	0x0365094C MOV X2, X31
	0x03650950 BL 0x3314A68
	0x03650954 ADRP X0, 0xAEC000
	0x03650958 LDR X0, [X0 + 0x970]
	0x0365095C BL 0x1C16D08
	0x03650960 MOV X1, X0
	0x03650964 MOV X0, X19
	0x03650968 BL 0x1C16DEC
	0x0365096C BL 0x1C16F20
	0x03650970 STR X30, [X31 - 0x20]!
	0x03650974 STP X20, X19, [X31 + 0x10]
	0x03650978 ADRP X20, 0xD90000
	0x0365097C LDRB W8, [X20 + 0x618]
	0x03650980 MOV W19, W0
	0x03650984 TBNZ X8, 0x0, 0x36509A8
	0x03650988 ADRP X0, 0xAA3000
	0x0365098C LDR X0, [X0 + 0x838]
	0x03650990 BL 0x1C16CF4
	0x03650994 ADRP X0, 0xACB000
	0x03650998 LDR X0, [X0 + 0x8B0]
	0x0365099C BL 0x1C16CF4
	0x036509A0 MOVZ W8, 0x1
	0x036509A4 STRB W8, [X20 + 0x618]
	0x036509A8 TBNZ X19, 0x4, 0x36509C0
	0x036509AC TBNZ X19, 0x7, 0x36509B4
	0x036509B0 TBNZ X19, 0x8, 0x36509D8
	0x036509B4 ADRP X8, 0xAA3000
	0x036509B8 LDR X8, [X8 + 0x838]
	0x036509BC B 0x36509C8
	0x036509C0 ADRP X8, 0xACB000
	0x036509C4 LDR X8, [X8 + 0x8B0]
	0x036509C8 LDR X0, [X8]
	0x036509CC LDP X20, X19, [X31 + 0x10]
	0x036509D0 LDR X30, [X31], #0x20
	0x036509D4 RET
	0x036509D8 LDP X20, X19, [X31 + 0x10]
	0x036509DC MOV X0, X31
	0x036509E0 LDR X30, [X31], #0x20
	0x036509E4 B 0x33C1548
	0x036509E8 STP X30, X19, [X31 - 0x10]!
	0x036509EC TBZ X1, 0x0, 0x3650A28
	0x036509F0 MOVZ W1, 0x100

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xD91000
	010 Move X24, 0xAED000
	011 Move X22, 0xAD4000
	012 Move X23, 0xAEA000
	013 Move W8, [X25+1695]
	014 Move X24, [X24+2016]
	015 Move X22, [X22+1616]
	016 Move X23, [X23+2320]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xAED000
	025 Move X0, [X0+2016]
	026 Call 0x1C17CF4
	027 Move X0, 0xAD4000
	028 Move X0, [X0+1616]
	029 Call 0x1C17CF4
	030 Move X0, 0xAEA000
	031 Move X0, [X0+2320]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+1695], W8
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object..ctor, X0
	038 Move X0, [X24]
	039 Call 0x1C17F10
	040 Move X24, [X22]
	041 Move X23, [X23]
	042 Move X1, X31
	043 Move X22, X0
	044 Call Object..ctor, X0
	045 Move [X22+16], X24
	046 Move [X22+24], X23
	047 Move [X19+16], X22
	048 Compare X21, 0
	049 JumpIfEqual {66}
	050 Move X1, [X21+24]
	051 And W8, W20, 1
	052 Move X0, X19
	053 Move [X19+32], W8
	054 Move [X19+24], X1
	055 Call X509SubjectKeyIdentifierExtension.Decode, X0, X1
	056 Move [X19+56], W0
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X24, [X31+16]
	062 Move X23, [X31+24]
	063 Move X30, [X31+64]
	064 Move X25, [X31+72]
	065 Return 
	066 Call 0x1C17F20

Method: System.Void .ctor(System.Byte[] subjectKeyIdentifier, System.Boolean critical)

Disassembly:
	0x0365FAF4 MOV X1, X31
	0x0365FAF8 BL 0x33A51F0
	0x0365FAFC LDR X8, [X20]
	0x0365FB00 LDR X8, [X8 + 0xB8]
	0x0365FB04 LDR X8, [X8]
	0x0365FB08 STR X8, [X19 + 0x10]
	0x0365FB0C LDP X20, X19, [X31 + 0x10]
	0x0365FB10 LDP X30, X21, [X31], #0x20
	0x0365FB14 RET
	0x0365FB18 STR X30, [X31 - 0x20]!
	0x0365FB1C STP X20, X19, [X31 + 0x10]
	0x0365FB20 MOV X19, X1
	0x0365FB24 MOV X1, X31
	0x0365FB28 MOV X20, X0
	0x0365FB2C BL 0x33A51F0
	0x0365FB30 STR X19, [X20 + 0x10]
	0x0365FB34 LDP X20, X19, [X31 + 0x10]
	0x0365FB38 LDR X30, [X31], #0x20
	0x0365FB3C RET
	0x0365FB40 LDR X0, [X0 + 0x10]
	0x0365FB44 RET
	0x0365FB48 STP X30, X21, [X31 - 0x20]!
	0x0365FB4C STP X20, X19, [X31 + 0x10]
	0x0365FB50 ADRP X21, 0xD81000
	0x0365FB54 LDRB W8, [X21 + 0x6B2]
	0x0365FB58 MOV X20, X1
	0x0365FB5C MOV X19, X0
	0x0365FB60 TBNZ X8, 0x0, 0x365FB78
	0x0365FB64 ADRP X0, 0xADD000
	0x0365FB68 LDR X0, [X0 + 0xDE0]
	0x0365FB6C BL 0x1C16CF4
	0x0365FB70 MOVZ W8, 0x1
	0x0365FB74 STRB W8, [X21 + 0x6B2]
	0x0365FB78 CMP X19, X20
	0x0365FB7C B.EQ 0x365FBA8
	0x0365FB80 CBZ X20, 0x365FBA0
	0x0365FB84 ADRP X8, 0xADD000
	0x0365FB88 LDR X8, [X8 + 0xDE0]
	0x0365FB8C LDR X9, [X20]
	0x0365FB90 LDR X8, [X8]
	0x0365FB94 CMP X9, X8
	0x0365FB98 CSEL X8, X20, X31, EQ
	0x0365FB9C B.EQ 0x365FBB8
	0x0365FBA0 MOV W0, W31
	0x0365FBA4 B 0x365FBAC
	0x0365FBA8 MOVZ W0, 0x1
	0x0365FBAC LDP X20, X19, [X31 + 0x10]
	0x0365FBB0 LDP X30, X21, [X31], #0x20
	0x0365FBB4 RET
	0x0365FBB8 CBZ X8, 0x365FBD4
	0x0365FBBC LDR X0, [X8 + 0x10]
	0x0365FBC0 LDR X1, [X19 + 0x10]
	0x0365FBC4 LDP X20, X19, [X31 + 0x10]
	0x0365FBC8 MOV X2, X31
	0x0365FBCC LDP X30, X21, [X31], #0x20
	0x0365FBD0 B 0x321BA08
	0x0365FBD4 BL 0x1C16F20
	0x0365FBD8 STR X30, [X31 - 0x10]!
	0x0365FBDC LDR X0, [X0 + 0x10]
	0x0365FBE0 CBZ X0, 0x365FBF4
	0x0365FBE4 LDR X8, [X0]
	0x0365FBE8 LDP X2, X1, [X8 + 0x158]
	0x0365FBEC LDR X30, [X31], #0x10
	0x0365FBF0 BR X2
	0x0365FBF4 BL 0x1C16F20
	0x0365FBF8 STP X30, X23, [X31 - 0x30]!
	0x0365FBFC STP X22, X21, [X31 + 0x10]
	0x0365FC00 STP X20, X19, [X31 + 0x20]
	0x0365FC04 ADRP X23, 0xD81000
	0x0365FC08 ADRP X20, 0xADD000
	0x0365FC0C ADRP X19, 0xADD000
	0x0365FC10 ADRP X22, 0xADD000
	0x0365FC14 ADRP X21, 0xADD000
	0x0365FC18 LDRB W8, [X23 + 0x6B3]
	0x0365FC1C LDR X20, [X20 + 0xDE0]
	0x0365FC20 LDR X19, [X19 + 0xDE8]
	0x0365FC24 LDR X22, [X22 + 0xDF0]
	0x0365FC28 LDR X21, [X21 + 0xDF8]
	0x0365FC2C TBNZ X8, 0x0, 0x365FC68
	0x0365FC30 ADRP X0, 0xADD000
	0x0365FC34 LDR X0, [X0 + 0xDE0]
	0x0365FC38 BL 0x1C16CF4
	0x0365FC3C ADRP X0, 0xADD000
	0x0365FC40 LDR X0, [X0 + 0xDF0]
	0x0365FC44 BL 0x1C16CF4
	0x0365FC48 ADRP X0, 0xADD000
	0x0365FC4C LDR X0, [X0 + 0xDF8]
	0x0365FC50 BL 0x1C16CF4
	0x0365FC54 ADRP X0, 0xADD000
	0x0365FC58 LDR X0, [X0 + 0xDE8]
	0x0365FC5C BL 0x1C16CF4
	0x0365FC60 MOVZ W8, 0x1
	0x0365FC64 STRB W8, [X23 + 0x6B3]
	0x0365FC68 LDR X0, [X20]
	0x0365FC6C BL 0x1C16F10
	0x0365FC70 LDR X23, [X19]
	0x0365FC74 MOV X1, X31
	0x0365FC78 MOV X19, X0
	0x0365FC7C BL 0x33A51F0
	0x0365FC80 STR X23, [X19 + 0x10]
	0x0365FC84 LDR X8, [X20]
	0x0365FC88 LDR X8, [X8 + 0xB8]
	0x0365FC8C STR X19, [X8]
	0x0365FC90 LDR X0, [X20]
	0x0365FC94 BL 0x1C16F10
	0x0365FC98 MOV X19, X0
	0x0365FC9C BL 0x365FABC
	0x0365FCA0 LDR X0, [X20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xD82000
	009 Move W8, [X22+1696]
	010 Move W21, W2
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xA95000
	018 Move X0, [X0+1560]
	019 Call 0x1C17CF4
	020 Move X0, 0xADE000
	021 Move X0, [X0+2016]
	022 Call 0x1C17CF4
	023 Move X0, 0xAC5000
	024 Move X0, [X0+1616]
	025 Call 0x1C17CF4
	026 Move X0, 0xADB000
	027 Move X0, [X0+2320]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1696], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Call Object..ctor, X0
	034 Compare X20, 0
	035 JumpIfEqual {94}
	036 Move X8, [X20+24]
	037 Compare X8, 0
	038 JumpIfEqual {106}
	039 Move X8, 0xADE000
	040 Move X8, [X8+2016]
	041 Move X22, 0xAC5000
	042 Move X23, 0xADB000
	043 Move X0, [X8]
	044 Move X22, [X22+1616]
	045 Move X23, [X23+2320]
	046 Call 0x1C17F10
	047 Move X24, [X22]
	048 Move X23, [X23]
	049 Move X1, X31
	050 Move X22, X0
	051 Call Object..ctor, X0
	052 And W8, W21, 1
	053 Move X0, X20
	054 Move X1, X31
	055 Move [X22+16], X24
	056 Move [X22+24], X23
	057 Move [X19+16], X22
	058 Move [X19+32], W8
	059 Call Array.Clone, X0
	060 Compare X0, 0
	061 JumpIfEqual {80}
	062 Move X22, 0xA95000
	063 Move X22, [X22+1560]
	064 Move X20, X0
	065 Move X21, [X22]
	066 Move X1, X21
	067 Call 0x1C17E00
	068 Compare X0, 0
	069 JumpIfEqual {77}
	070 Move [X19+40], X0
	071 Move X21, [X22]
	072 Move X0, X20
	073 Move X1, X21
	074 Call 0x1C17E00
	075 Compare X0, 0
	076 JumpIfNotEqual {81}
	077 Move X0, X20
	078 Move X1, X21
	079 Call 0x1C181E0
	080 Move [X19+40], X31
	081 Move X0, X19
	082 Call X509SubjectKeyIdentifierExtension.Encode, X0
	083 Move X1, X0
	084 Move X0, X19
	085 Move X20, [X31+48]
	086 Move X19, [X31+56]
	087 Move X22, [X31+32]
	088 Move X21, [X31+40]
	089 Move X24, [X31+16]
	090 Move X23, [X31+24]
	091 Move X30, [X31+64]
	092 Call AsnEncodedData.set_RawData, X0, X1
	093 Return 
	094 Move X0, 0xA9A000
	095 Move X0, [X0+1320]
	096 Call 0x1C17D08
	097 Call 0x1C17F10
	098 Move X19, X0
	099 Move X0, 0xADE000
	100 Move X0, [X0+3496]
	101 Call 0x1C17D08
	102 Move X1, X0
	103 Move X0, X19
	104 Move X2, X31
	105 Call ArgumentNullException..ctor, X0, X1
	106 Move X0, 0xA9D000
	107 Move X0, [X0+1400]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xADE000
	112 Move X0, [X0+3496]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Move X2, X31
	117 Call ArgumentException..ctor, X0, X1
	118 Move X0, 0xADE000
	119 Move X0, [X0+3504]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Call 0x1C17DEC

Method: System.Void .ctor(System.String subjectKeyIdentifier, System.Boolean critical)

Disassembly:
	0x0365FD18 BL 0x33A51F0
	0x0365FD1C STR W19, [X20 + 0x10]
	0x0365FD20 LDP X20, X19, [X31 + 0x10]
	0x0365FD24 LDR X30, [X31], #0x20
	0x0365FD28 RET
	0x0365FD2C LDR W0, [X0 + 0x10]
	0x0365FD30 RET
	0x0365FD34 SUB X31, X31, 0x30
	0x0365FD38 STP X30, X21, [X31 + 0x10]
	0x0365FD3C STP X20, X19, [X31 + 0x20]
	0x0365FD40 ADRP X21, 0xD81000
	0x0365FD44 LDRB W8, [X21 + 0x6B4]
	0x0365FD48 MOV X20, X1
	0x0365FD4C MOV X19, X0
	0x0365FD50 TBNZ X8, 0x0, 0x365FD8C
	0x0365FD54 ADRP X0, 0xADD000
	0x0365FD58 LDR X0, [X0 + 0xE00]
	0x0365FD5C BL 0x1C16CF4
	0x0365FD60 ADRP X0, 0xADD000
	0x0365FD64 LDR X0, [X0 + 0xE08]
	0x0365FD68 BL 0x1C16CF4
	0x0365FD6C ADRP X0, 0xADD000
	0x0365FD70 LDR X0, [X0 + 0xE10]
	0x0365FD74 BL 0x1C16CF4
	0x0365FD78 ADRP X0, 0xADD000
	0x0365FD7C LDR X0, [X0 + 0xE18]
	0x0365FD80 BL 0x1C16CF4
	0x0365FD84 MOVZ W8, 0x1
	0x0365FD88 STRB W8, [X21 + 0x6B4]
	0x0365FD8C CMP X19, X20
	0x0365FD90 B.EQ 0x365FDB8
	0x0365FD94 CBZ X20, 0x365FDB0
	0x0365FD98 ADRP X8, 0xADD000
	0x0365FD9C LDR X8, [X8 + 0xE00]
	0x0365FDA0 LDR X9, [X20]
	0x0365FDA4 LDR X8, [X8]
	0x0365FDA8 CMP X9, X8
	0x0365FDAC B.EQ 0x365FDC0
	0x0365FDB0 MOV X8, X31
	0x0365FDB4 B 0x365FDE0
	0x0365FDB8 MOVZ W0, 0x1
	0x0365FDBC B 0x365FDFC
	0x0365FDC0 ADRP X8, 0xADD000
	0x0365FDC4 LDR W1, [X20 + 0x10]
	0x0365FDC8 LDR X8, [X8 + 0xE10]
	0x0365FDCC ADD X0, X31, 0x8
	0x0365FDD0 STR X31, [X31 + 0x8]
	0x0365FDD4 LDR X2, [X8]
	0x0365FDD8 BL 0x24345B8
	0x0365FDDC LDR X8, [X31 + 0x8]
	0x0365FDE0 LDR W9, [X19 + 0x10]
	0x0365FDE4 UBFM X10, X8, 0x20, 0x3F
	0x0365FDE8 ANDS W31, W8, 0xFF
	0x0365FDEC CSET W8, NE
	0x0365FDF0 CMP W9, W10
	0x0365FDF4 CSET W9, EQ
	0x0365FDF8 AND W0, W8, W9, 0x0
	0x0365FDFC LDP X20, X19, [X31 + 0x20]
	0x0365FE00 LDP X30, X21, [X31 + 0x10]
	0x0365FE04 ADD X31, X31, 0x30
	0x0365FE08 RET
	0x0365FE0C MOV X1, X31
	0x0365FE10 B 0x33A861C
	0x0365FE14 STR X30, [X31 - 0x20]!
	0x0365FE18 STP X20, X19, [X31 + 0x10]
	0x0365FE1C ADRP X19, 0xD81000
	0x0365FE20 ADRP X20, 0xADD000
	0x0365FE24 LDRB W8, [X19 + 0x6B5]
	0x0365FE28 LDR X20, [X20 + 0xE00]
	0x0365FE2C TBNZ X8, 0x0, 0x365FE44
	0x0365FE30 ADRP X0, 0xADD000
	0x0365FE34 LDR X0, [X0 + 0xE00]
	0x0365FE38 BL 0x1C16CF4
	0x0365FE3C MOVZ W8, 0x1
	0x0365FE40 STRB W8, [X19 + 0x6B5]
	0x0365FE44 LDR X0, [X20]
	0x0365FE48 BL 0x1C16F10
	0x0365FE4C MOV X1, X31
	0x0365FE50 MOV X19, X0
	0x0365FE54 BL 0x33A51F0
	0x0365FE58 MOVZ W8, 0x2
	0x0365FE5C STR W8, [X19 + 0x10]
	0x0365FE60 LDR X8, [X20]
	0x0365FE64 LDR X8, [X8 + 0xB8]
	0x0365FE68 STR X19, [X8]
	0x0365FE6C LDR X0, [X20]
	0x0365FE70 BL 0x1C16F10
	0x0365FE74 MOV X1, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xD82000
	009 Move W8, [X22+1697]
	010 Move W21, W2
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xADE000
	018 Move X0, [X0+2016]
	019 Call 0x1C17CF4
	020 Move X0, 0xAC5000
	021 Move X0, [X0+1616]
	022 Call 0x1C17CF4
	023 Move X0, 0xADB000
	024 Move X0, [X0+2320]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1697], W8
	028 Move X0, X19
	029 Move X1, X31
	030 Call Object..ctor, X0
	031 Compare X20, 0
	032 JumpIfEqual {69}
	033 Move W8, [X20+16]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, 0xADE000
	036 Move X8, [X8+2016]
	037 Move X22, 0xAC5000
	038 Move X23, 0xADB000
	039 Move X0, [X8]
	040 Move X22, [X22+1616]
	041 Move X23, [X23+2320]
	042 Call 0x1C17F10
	043 Move X24, [X22]
	044 Move X23, [X23]
	045 Move X1, X31
	046 Move X22, X0
	047 Call Object..ctor, X0
	048 And W8, W21, 1
	049 Move X0, X20
	050 Move [X22+16], X24
	051 Move [X22+24], X23
	052 Move [X19+16], X22
	053 Move [X19+32], W8
	054 Call X509SubjectKeyIdentifierExtension.FromHex, X0
	055 Move [X19+40], X0
	056 Move X0, X19
	057 Call X509SubjectKeyIdentifierExtension.Encode, X0
	058 Move X1, X0
	059 Move X0, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Call AsnEncodedData.set_RawData, X0, X1
	068 Return 
	069 Move X0, 0xA9A000
	070 Move X0, [X0+1320]
	071 Call 0x1C17D08
	072 Call 0x1C17F10
	073 Move X19, X0
	074 Move X0, 0xADE000
	075 Move X0, [X0+3496]
	076 Call 0x1C17D08
	077 Move X1, X0
	078 Move X0, X19
	079 Move X2, X31
	080 Call ArgumentNullException..ctor, X0, X1
	081 Move X0, 0xA9D000
	082 Move X0, [X0+1400]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X19, X0
	086 Move X0, 0xADE000
	087 Move X0, [X0+3496]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Move X2, X31
	092 Call ArgumentException..ctor, X0, X1
	093 Move X0, 0xADE000
	094 Move X0, [X0+3512]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X19
	098 Call 0x1C17DEC

Method: System.Void .ctor(System.Security.Cryptography.X509Certificates.PublicKey key, System.Boolean critical)

Disassembly:
	0x0365FF6C MOV X20, X1
	0x0365FF70 MOV X19, X0
	0x0365FF74 TBNZ X8, 0x0, 0x365FF8C

ISIL:
	001 And W3, W2, 1
	002 Move W2, W31
	003 Call X509SubjectKeyIdentifierExtension..ctor, X0, X1, X2, X3
	004 Return 

Method: System.Void .ctor(System.Security.Cryptography.X509Certificates.PublicKey key, System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm algorithm, System.Boolean critical)

Disassembly:
	0x0365555C MOV X1, X19
	0x03655560 BL 0x19980B4
	0x03655564 MOV X0, X20
	0x03655568 MOV X1, X31
	0x0365556C MOV X2, X19
	0x03655570 BL 0x1993444
	0x03655574 ADRP X0, 0xAE7000
	0x03655578 LDR X0, [X0 + 0xB20]
	0x0365557C BL 0x1C16D08
	0x03655580 MOV X1, X20
	0x03655584 MOV X2, X31
	0x03655588 BL 0x320A164
	0x0365558C MOV X19, X0
	0x03655590 ADRP X0, 0xAA6000
	0x03655594 LDR X0, [X0 + 0x578]
	0x03655598 BL 0x1C16D08
	0x0365559C BL 0x1C16F10
	0x036555A0 MOV X20, X0
	0x036555A4 ADRP X0, 0xAE7000
	0x036555A8 LDR X0, [X0 + 0xB00]
	0x036555AC BL 0x1C16D08
	0x036555B0 MOV X1, X0
	0x036555B4 MOV X0, X20
	0x036555B8 MOV X2, X19
	0x036555BC MOV X3, X31
	0x036555C0 BL 0x330E16C
	0x036555C4 ADRP X0, 0xAE7000
	0x036555C8 LDR X0, [X0 + 0xB08]
	0x036555CC BL 0x1C16D08
	0x036555D0 MOV X1, X0
	0x036555D4 MOV X0, X20
	0x036555D8 BL 0x1C16DEC
	0x036555DC MOVZ W0, 0x8
	0x036555E0 BL 0x3EB1AF0
	0x036555E4 LDR X8, [X20]
	0x036555E8 STR X8, [X0]
	0x036555EC ADRP X1, 0x85F000
	0x036555F0 ADD X1, X1, 0xE58
	0x036555F4 MOV X2, X31
	0x036555F8 BL 0x3EB1B00
	0x036555FC B 0x3655900
	0x03655600 MOV X28, X0
	0x03655604 BL 0x3EB1AE0
	0x03655608 B 0x3655908
	0x0365560C CMP W1, 0x1
	0x03655610 MOV X28, X0
	0x03655614 B.NE 0x3655908
	0x03655618 MOV X0, X28
	0x0365561C BL 0x3EB1AD0
	0x03655620 MOV X20, X0
	0x03655624 ADRP X0, 0xA9E000
	0x03655628 LDR X0, [X0 + 0x7D0]
	0x0365562C BL 0x1C16D08
	0x03655630 LDR X8, [X20]
	0x03655634 LDR X1, [X8]
	0x03655638 BL 0x1C17270
	0x0365563C TBZ X0, 0x0, 0x36556B0
	0x03655640 LDR X20, [X20]
	0x03655644 BL 0x3EB1AE0
	0x03655648 ADRP X0, 0xA9E000
	0x0365564C LDR X0, [X0 + 0x9D0]
	0x03655650 BL 0x1C16D08
	0x03655654 MOVZ W1, 0x2
	0x03655658 BL 0x1C16D6C
	0x0365565C MOV X21, X0
	0x03655660 MOV X0, X19
	0x03655664 BL 0x19903C0
	0x03655668 MOV X0, X19
	0x0365566C MOV X1, X31
	0x03655670 BL 0x33BE520
	0x03655674 MOV X19, X0
	0x03655678 MOV X0, X21
	0x0365567C BL 0x19903C0
	0x03655680 MOV X0, X21
	0x03655684 MOV X1, X19
	0x03655688 BL 0x19980B4
	0x0365568C MOV X0, X21
	0x03655690 MOV X1, X31
	0x03655694 MOV X2, X19
	0x03655698 BL 0x1993444
	0x0365569C MOV X0, X21
	0x036556A0 BL 0x19903C0
	0x036556A4 ADRP X19, 0xAE7000
	0x036556A8 LDR X19, [X19 + 0xB28]
	0x036556AC B 0x365585C
	0x036556B0 MOVZ W0, 0x8
	0x036556B4 BL 0x3EB1AF0
	0x036556B8 LDR X8, [X20]
	0x036556BC STR X8, [X0]
	0x036556C0 ADRP X1, 0x85F000
	0x036556C4 ADD X1, X1, 0xE58
	0x036556C8 MOV X2, X31
	0x036556CC BL 0x3EB1B00
	0x036556D0 B 0x3655900
	0x036556D4 MOV X28, X0
	0x036556D8 BL 0x3EB1AE0
	0x036556DC B 0x3655908
	0x036556E0 CMP W1, 0x1
	0x036556E4 MOV X28, X0
	0x036556E8 B.NE 0x3655908
	0x036556EC MOV X0, X28
	0x036556F0 BL 0x3EB1AD0
	0x036556F4 MOV X20, X0
	0x036556F8 ADRP X0, 0xA9E000
	0x036556FC LDR X0, [X0 + 0x7D0]
	0x03655700 BL 0x1C16D08
	0x03655704 LDR X8, [X20]
	0x03655708 LDR X1, [X8]
	0x0365570C BL 0x1C17270
	0x03655710 TBZ X0, 0x0, 0x3655784
	0x03655714 LDR X20, [X20]
	0x03655718 BL 0x3EB1AE0
	0x0365571C ADRP X0, 0xA9E000
	0x03655720 LDR X0, [X0 + 0x9D0]
	0x03655724 BL 0x1C16D08
	0x03655728 MOVZ W1, 0x2
	0x0365572C BL 0x1C16D6C
	0x03655730 MOV X21, X0
	0x03655734 MOV X0, X19
	0x03655738 BL 0x19903C0
	0x0365573C MOV X0, X19
	0x03655740 MOV X1, X31
	0x03655744 BL 0x33BE520
	0x03655748 MOV X19, X0
	0x0365574C MOV X0, X21
	0x03655750 BL 0x19903C0
	0x03655754 MOV X0, X21
	0x03655758 MOV X1, X19
	0x0365575C BL 0x19980B4
	0x03655760 MOV X0, X21
	0x03655764 MOV X1, X31
	0x03655768 MOV X2, X19
	0x0365576C BL 0x1993444
	0x03655770 MOV X0, X21
	0x03655774 BL 0x19903C0
	0x03655778 ADRP X19, 0xAE7000
	0x0365577C LDR X19, [X19 + 0xB30]
	0x03655780 B 0x365585C
	0x03655784 MOVZ W0, 0x8
	0x03655788 BL 0x3EB1AF0
	0x0365578C LDR X8, [X20]
	0x03655790 STR X8, [X0]
	0x03655794 ADRP X1, 0x85F000
	0x03655798 ADD X1, X1, 0xE58
	0x0365579C MOV X2, X31
	0x036557A0 BL 0x3EB1B00
	0x036557A4 B 0x3655900
	0x036557A8 MOV X28, X0
	0x036557AC BL 0x3EB1AE0
	0x036557B0 B 0x3655908
	0x036557B4 B 0x3655A10
	0x036557B8 B 0x3655A10
	0x036557BC CMP W1, 0x1
	0x036557C0 MOV X28, X0
	0x036557C4 B.NE 0x3655908
	0x036557C8 MOV X0, X28
	0x036557CC BL 0x3EB1AD0
	0x036557D0 MOV X20, X0
	0x036557D4 ADRP X0, 0xA9E000
	0x036557D8 LDR X0, [X0 + 0x7D0]
	0x036557DC BL 0x1C16D08
	0x036557E0 LDR X8, [X20]
	0x036557E4 LDR X1, [X8]
	0x036557E8 BL 0x1C17270
	0x036557EC TBZ X0, 0x0, 0x36558E0
	0x036557F0 LDR X20, [X20]
	0x036557F4 BL 0x3EB1AE0
	0x036557F8 ADRP X0, 0xA9E000
	0x036557FC LDR X0, [X0 + 0x9D0]
	0x03655800 BL 0x1C16D08
	0x03655804 MOVZ W1, 0x2
	0x03655808 BL 0x1C16D6C
	0x0365580C MOV X21, X0
	0x03655810 MOV X0, X19
	0x03655814 BL 0x19903C0
	0x03655818 MOV X0, X19
	0x0365581C MOV X1, X31
	0x03655820 BL 0x33BE520
	0x03655824 MOV X19, X0
	0x03655828 MOV X0, X21
	0x0365582C BL 0x19903C0
	0x03655830 MOV X0, X21
	0x03655834 MOV X1, X19
	0x03655838 BL 0x19980B4
	0x0365583C MOV X0, X21
	0x03655840 MOV X1, X31
	0x03655844 MOV X2, X19
	0x03655848 BL 0x1993444
	0x0365584C MOV X0, X21
	0x03655850 BL 0x19903C0
	0x03655854 ADRP X19, 0xAC8000
	0x03655858 LDR X19, [X19 + 0xAB8]
	0x0365585C MOV X0, X19
	0x03655860 BL 0x1C16D08
	0x03655864 MOV X1, X0
	0x03655868 MOV X0, X21
	0x0365586C BL 0x19980B4
	0x03655870 MOV X0, X19
	0x03655874 BL 0x1C16D08
	0x03655878 MOV X2, X0
	0x0365587C MOVZ W1, 0x1
	0x03655880 MOV X0, X21
	0x03655884 BL 0x1993444
	0x03655888 ADRP X0, 0xAE7000
	0x0365588C LDR X0, [X0 + 0xB38]
	0x03655890 BL 0x1C16D08
	0x03655894 MOV X1, X21
	0x03655898 MOV X2, X31
	0x0365589C BL 0x320A164
	0x036558A0 MOV X19, X0
	0x036558A4 ADRP X0, 0xACB000
	0x036558A8 LDR X0, [X0 + 0xCE0]
	0x036558AC BL 0x1C16D08
	0x036558B0 BL 0x1C16F10
	0x036558B4 MOV X1, X19
	0x036558B8 MOV X2, X20
	0x036558BC MOV X3, X31
	0x036558C0 MOV X21, X0
	0x036558C4 BL 0x325240C
	0x036558C8 ADRP X0, 0xAE7000
	0x036558CC LDR X0, [X0 + 0xB08]
	0x036558D0 BL 0x1C16D08
	0x036558D4 MOV X1, X0
	0x036558D8 MOV X0, X21
	0x036558DC BL 0x1C16DEC
	0x036558E0 MOVZ W0, 0x8
	0x036558E4 BL 0x3EB1AF0
	0x036558E8 LDR X8, [X20]
	0x036558EC STR X8, [X0]
	0x036558F0 ADRP X1, 0x85F000
	0x036558F4 ADD X1, X1, 0xE58
	0x036558F8 MOV X2, X31
	0x036558FC BL 0x3EB1B00
	0x03655900 MOV X28, X0
	0x03655904 BL 0x3EB1AE0
	0x03655908 MOV X0, X28

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xD8C000
	012 Move W8, [X21+1698]
	013 Move W20, W3
	014 Move W22, W2
	015 Move X23, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0xACC000
	022 Move X0, [X0+2968]
	023 Call 0x1C17CF4
	024 Move X0, 0xA9F000
	025 Move X0, [X0+1560]
	026 Call 0x1C17CF4
	027 Move X0, 0xACC000
	028 Move X0, [X0+3032]
	029 Call 0x1C17CF4
	030 Move X0, 0xAE8000
	031 Move X0, [X0+2016]
	032 Call 0x1C17CF4
	033 Move X0, 0xACF000
	034 Move X0, [X0+1616]
	035 Call 0x1C17CF4
	036 Move X0, 0xAE5000
	037 Move X0, [X0+2320]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+1698], W8
	041 Move X0, X19
	042 Move X1, X31
	043 Call Object..ctor, X0
	044 Compare X23, 0
	045 JumpIfEqual {231}
	046 Move X8, [X23+16]
	047 Compare X8, 0
	048 JumpIfEqual {230}
	049 Move X21, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Compare W22, 0
	053 JumpIfNotEqual {243}
	054 Move X0, X31
	055 Call SHA1.Create
	056 Compare X0, 0
	057 JumpIfEqual {230}
	058 Move X1, X21
	059 Move X0, X31
	060 Call SHA1.Create
	061 Compare X0, 0
	062 JumpIfEqual {230}
	063 Move X1, X21
	064 Move X2, X31
	065 Call HashAlgorithm.ComputeHash, X0, X1
	066 Move X8, 0xA9F000
	067 Move X8, [X8+1560]
	068 Move X21, X0
	069 Move W1, 8
	070 Move X8, [X8]
	071 Move X0, X8
	072 Call 0x1C17D6C
	073 Move X2, X0
	074 Move [X19+40], X0
	075 Move W1, 12
	076 Move W4, 8
	077 Move X0, X21
	078 Move W3, W31
	079 Move X5, X31
	080 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	081 Move X8, [X19+40]
	082 Compare X8, 0
	083 JumpIfEqual {230}
	084 Move W9, [X8+24]
	085 Compare W9, 0
	086 JumpIfEqual {261}
	087 Move W9, [X8+32]
	088 Move W10, 64
	089 NotImplemented "Instruction BFM not yet implemented."
	090 Move [X8+32], W10
	091 Move X27, 0xACC000
	092 Move X27, [X27+2968]
	093 Move X0, [X27]
	094 Call 0x1C17F10
	095 Move W1, 48
	096 Move X2, X31
	097 Move X22, X0
	098 Call ASN1..ctor, X0, X1
	099 Move X0, [X27]
	100 Call 0x1C17F10
	101 Move W1, 48
	102 Move X2, X31
	103 Move X24, X0
	104 Call ASN1..ctor, X0, X1
	105 Compare X22, 0
	106 JumpIfEqual {230}
	107 Move X0, X22
	108 Move X1, X24
	109 Move X2, X31
	110 Call ASN1.Add, X0, X1
	111 Move X8, [X23+32]
	112 Compare X8, 0
	113 JumpIfEqual {230}
	114 Move X9, 0xACC000
	115 Move X9, [X9+3032]
	116 Move X24, X0
	117 Move X25, [X8+16]
	118 Move X0, [X9]
	119 Move W9, [X0+224]
	120 Compare W9, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Move X0, X25
	124 Move X1, X31
	125 Call CryptoConfig.EncodeOID, X0
	126 Move X8, [X27]
	127 Move X26, X0
	128 Move X0, X8
	129 Call 0x1C17F10
	130 Move X1, X26
	131 Move X2, X31
	132 Move X25, X0
	133 Call ASN1..ctor, X0, X1
	134 Compare X24, 0
	135 JumpIfEqual {230}
	136 Move X0, X24
	137 Move X1, X25
	138 Move X2, X31
	139 Call ASN1.Add, X0, X1
	140 Move X8, [X23+24]
	141 Compare X8, 0
	142 JumpIfEqual {230}
	143 Move X0, [X27]
	144 Move X23, [X8+24]
	145 Call 0x1C17F10
	146 Move X1, X23
	147 Move X2, X31
	148 Move X25, X0
	149 Call ASN1..ctor, X0, X1
	150 Move X0, X24
	151 Move X1, X25
	152 Move X2, X31
	153 Call ASN1.Add, X0, X1
	154 Compare X21, 0
	155 JumpIfEqual {230}
	156 Move X8, 0xA9F000
	157 Move X8, [X8+1560]
	158 Move W9, [X21+24]
	159 Move X0, [X8]
	160 Add W1, W9, 1
	161 Call 0x1C17D6C
	162 Move W4, [X21+24]
	163 Move X23, X0
	164 Move W3, 1
	165 Move X0, X21
	166 Move W1, W31
	167 Move X2, X23
	168 Move X5, X31
	169 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	170 Move X0, [X27]
	171 Call 0x1C17F10
	172 Move W1, 3
	173 Move X2, X23
	174 Move X3, X31
	175 Move X21, X0
	176 Call ASN1..ctor, X0, X1, X2
	177 Move X0, X22
	178 Move X1, X21
	179 Move X2, X31
	180 Call ASN1.Add, X0, X1
	181 Move X0, X31
	182 Call SHA1.Create
	183 Move X8, [X22]
	184 Move X21, X0
	185 Move X0, X22
	186 Move X9, [X8+376]
	187 Move X1, [X8+384]
	188 NotImplemented "Instruction BLR not yet implemented."
	189 Compare X21, 0
	190 JumpIfEqual {230}
	191 Move X1, X0
	192 Move X0, X21
	193 Move X2, X31
	194 Call HashAlgorithm.ComputeHash, X0, X1
	195 Move [X19+40], X0
	196 Move X8, 0xAE8000
	197 Move X8, [X8+2016]
	198 Move X21, 0xACF000
	199 Move X22, 0xAE5000
	200 Move X0, [X8]
	201 Move X21, [X21+1616]
	202 Move X22, [X22+2320]
	203 Call 0x1C17F10
	204 Move X23, [X21]
	205 Move X22, [X22]
	206 Move X1, X31
	207 Move X21, X0
	208 Call Object..ctor, X0
	209 And W8, W20, 1
	210 Move X0, X19
	211 Move [X21+16], X23
	212 Move [X21+24], X22
	213 Move [X19+16], X21
	214 Move [X19+32], W8
	215 Call X509SubjectKeyIdentifierExtension.Encode, X0
	216 Move X1, X0
	217 Move X0, X19
	218 Move X20, [X31+64]
	219 Move X19, [X31+72]
	220 Move X22, [X31+48]
	221 Move X21, [X31+56]
	222 Move X24, [X31+32]
	223 Move X23, [X31+40]
	224 Move X26, [X31+16]
	225 Move X25, [X31+24]
	226 Move X30, [X31+80]
	227 Move X27, [X31+88]
	228 Call AsnEncodedData.set_RawData, X0, X1
	229 Return 
	230 Call 0x1C17F20
	231 Move X0, 0xAA4000
	232 Move X0, [X0+1320]
	233 Call 0x1C17D08
	234 Call 0x1C17F10
	235 Move X19, X0
	236 Move X0, 0xAC9000
	237 Move X0, [X0+112]
	238 Call 0x1C17D08
	239 Move X1, X0
	240 Move X0, X19
	241 Move X2, X31
	242 Call ArgumentNullException..ctor, X0, X1
	243 Move X0, 0xAA7000
	244 Move X0, [X0+1400]
	245 Call 0x1C17D08
	246 Call 0x1C17F10
	247 Move X19, X0
	248 Move X0, 0xAE8000
	249 Move X0, [X0+2776]
	250 Call 0x1C17D08
	251 Move X1, X0
	252 Move X0, X19
	253 Move X2, X31
	254 Call ArgumentException..ctor, X0, X1
	255 Move X0, 0xAE8000
	256 Move X0, [X0+2784]
	257 Call 0x1C17D08
	258 Move X1, X0
	259 Move X0, X19
	260 Call 0x1C17DEC
	261 Call 0x1C17F28

Method: System.String get_SubjectKeyIdentifier()

Disassembly:
	0x0365590C BL 0x1D2C690
	0x03655910 B 0x3655A10
	0x03655914 B 0x3655A10
	0x03655918 B 0x3655A10
	0x0365591C B 0x3655A04
	0x03655920 B 0x3655A10
	0x03655924 B 0x3655A10
	0x03655928 B 0x3655A10
	0x0365592C B 0x3655A10
	0x03655930 B 0x3655A10
	0x03655934 B 0x3655A10
	0x03655938 B 0x3655A04
	0x0365593C B 0x3655A10
	0x03655940 B 0x3655A04
	0x03655944 B 0x3655A04
	0x03655948 B 0x3655A10
	0x0365594C B 0x3655A10
	0x03655950 B 0x3655A10
	0x03655954 B 0x3655A10
	0x03655958 B 0x3655A10
	0x0365595C B 0x3655A04
	0x03655960 B 0x3655A10
	0x03655964 B 0x3655A10
	0x03655968 B 0x3655A04
	0x0365596C B 0x3655A10
	0x03655970 B 0x3655A04
	0x03655974 B 0x3655A04
	0x03655978 B 0x3655A10
	0x0365597C B 0x3655A04
	0x03655980 B 0x3655A04
	0x03655984 B 0x3655A04
	0x03655988 B 0x3655A10
	0x0365598C B 0x3655A04

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+56]
	004 Or W8, W8, 4
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X19, X0
	007 Move X0, [X0+40]
	008 Compare X0, 0
	009 JumpIfEqual {13}
	010 Move X1, X31
	011 Call CryptoConvert.ToHex, X0
	012 Move [X19+48], X0
	013 Move X0, [X19+48]
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return X0
	017 Move X0, 0xACC000
	018 Move X0, [X0+3296]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xAE8000
	023 Move X0, [X0+2440]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Move X2, X31
	028 Call CryptographicException..ctor, X0, X1
	029 Move X0, 0xAE8000
	030 Move X0, [X0+2792]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.Void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData)

Disassembly:
	0x0365FF78 ADRP X0, 0xADD000
	0x0365FF7C LDR X0, [X0 + 0xE20]
	0x0365FF80 BL 0x1C16CF4
	0x0365FF84 MOVZ W8, 0x1
	0x0365FF88 STRB W8, [X21 + 0x6B7]
	0x0365FF8C CMP X19, X20
	0x0365FF90 B.EQ 0x365FFD8
	0x0365FF94 CBZ X20, 0x365FFD0
	0x0365FF98 ADRP X8, 0xADD000
	0x0365FF9C LDR X8, [X8 + 0xE20]
	0x0365FFA0 LDR X9, [X20]
	0x0365FFA4 LDR X8, [X8]
	0x0365FFA8 LDRB W11, [X9 + 0x130]
	0x0365FFAC LDRB W10, [X8 + 0x130]
	0x0365FFB0 CMP W11, W10
	0x0365FFB4 B.CC 0x365FFD0
	0x0365FFB8 LDR X9, [X9 + 0xC8]
	0x0365FFBC ADD X9, X9, X10, 0x3, LSL
	0x0365FFC0 LDUR X9, [X9 - 0x8]
	0x0365FFC4 CMP X9, X8
	0x0365FFC8 CSEL X0, X20, X31, EQ
	0x0365FFCC B.EQ 0x365FFE8
	0x0365FFD0 MOV W0, W31
	0x0365FFD4 B 0x365FFDC
	0x0365FFD8 MOVZ W0, 0x1
	0x0365FFDC LDP X20, X19, [X31 + 0x10]
	0x0365FFE0 LDP X30, X21, [X31], #0x20
	0x0365FFE4 RET
	0x0365FFE8 CBZ X0, 0x3660024
	0x0365FFEC LDR X8, [X0]
	0x0365FFF0 LDP X9, X1, [X8 + 0x178]
	0x0365FFF4 BLR X9
	0x0365FFF8 LDR X8, [X19]
	0x0365FFFC MOV X20, X0
	0x03660000 MOV X0, X19
	0x03660004 LDP X9, X1, [X8 + 0x178]
	0x03660008 BLR X9
	0x0366000C MOV X1, X0
	0x03660010 MOV X0, X20
	0x03660014 LDP X20, X19, [X31 + 0x10]
	0x03660018 MOV X2, X31
	0x0366001C LDP X30, X21, [X31], #0x20
	0x03660020 B 0x321BA08
	0x03660024 BL 0x1C16F20
	0x03660028 STR X30, [X31 - 0x10]!
	0x0366002C LDR X8, [X0]
	0x03660030 LDP X9, X1, [X8 + 0x178]
	0x03660034 BLR X9
	0x03660038 CBZ X0, 0x366004C
	0x0366003C LDR X8, [X0]
	0x03660040 LDP X2, X1, [X8 + 0x158]
	0x03660044 LDR X30, [X31], #0x10
	0x03660048 BR X2
	0x0366004C BL 0x1C16F20
	0x03660050 STR X30, [X31 - 0x20]!
	0x03660054 STP X20, X19, [X31 + 0x10]
	0x03660058 ADRP X19, 0xD80000
	0x0366005C ADRP X20, 0xADC000
	0x03660060 LDRB W8, [X19 + 0x6B8]
	0x03660064 LDR X20, [X20 + 0xE20]
	0x03660068 TBNZ X8, 0x0, 0x3660080
	0x0366006C ADRP X0, 0xADC000
	0x03660070 LDR X0, [X0 + 0xE20]
	0x03660074 BL 0x1C16CF4
	0x03660078 MOVZ W8, 0x1
	0x0366007C STRB W8, [X19 + 0x6B8]
	0x03660080 LDR X0, [X20]
	0x03660084 BL 0x1C16F10
	0x03660088 MOV X19, X0
	0x0366008C BL 0x365FEC0
	0x03660090 LDR X8, [X20]
	0x03660094 LDR X8, [X8 + 0xB8]
	0x03660098 STR X19, [X8]
	0x0366009C LDP X20, X19, [X31 + 0x10]
	0x036600A0 LDR X30, [X31], #0x20
	0x036600A4 RET
	0x036600A8 STR X30, [X31 - 0x20]!
	0x036600AC STP X20, X19, [X31 + 0x10]
	0x036600B0 MOV X20, X0
	0x036600B4 LDR X0, [X0 + 0x18]
	0x036600B8 MOV X19, X1
	0x036600BC CBZ X0, 0x36600D0
	0x036600C0 LDR X8, [X0]
	0x036600C4 LDP X9, X1, [X8 + 0x1A8]
	0x036600C8 BLR X9
	0x036600CC TBZ X0, 0x0, 0x36600EC
	0x036600D0 LDR X8, [X20 + 0x10]
	0x036600D4 CBZ X8, 0x36600EC
	0x036600D8 LDR X9, [X8 + 0x18]
	0x036600DC CMP X9, X19
	0x036600E0 B.EQ 0x36600F4
	0x036600E4 LDR X8, [X8 + 0x10]
	0x036600E8 CBNZ X8, 0x36600D8
	0x036600EC MOV X0, X31
	0x036600F0 B 0x36600F8
	0x036600F4 LDR X0, [X8 + 0x20]
	0x036600F8 LDP X20, X19, [X31 + 0x10]
	0x036600FC LDR X30, [X31], #0x20
	0x03660100 RET
	0x03660104 LDR X8, [X0]
	0x03660108 LDP X2, X1, [X8 + 0x1A8]
	0x0366010C BR X2
	0x03660110 LDR X0, [X0 + 0x10]
	0x03660114 CBZ X0, 0x3660124
	0x03660118 LDR X8, [X0 + 0x18]
	0x0366011C CMP X8, X1
	0x03660120 B.NE 0x3660110
	0x03660124 RET
	0x03660128 MOV X1, X31
	0x0366012C MOV X2, X31
	0x03660130 B 0x3314A68
	0x03660134 MOV X2, X31
	0x03660138 B 0x3314A68
	0x0366013C SUB X31, X31, 0x40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD82000
	008 Move W8, [X21+1699]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xADE000
	016 Move X0, [X0+2016]
	017 Call 0x1C17CF4
	018 Move X0, 0xADB000
	019 Move X0, [X0+3880]
	020 Call 0x1C17CF4
	021 Move X0, 0xAC5000
	022 Move X0, [X0+1616]
	023 Call 0x1C17CF4
	024 Move X0, 0xADB000
	025 Move X0, [X0+2320]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1699], W8
	029 Compare X20, 0
	030 JumpIfEqual {106}
	031 Move X8, 0xADB000
	032 Move X8, [X8+3880]
	033 Move X9, [X20]
	034 Move X8, [X8]
	035 Move W11, [X9+304]
	036 Move W10, [X8+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X9, [X9+200]
	039 Add X9, X9, X10
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, 0xADD000
	043 Move X8, [X8+2016]
	044 Move X22, [X20+16]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move X21, X0
	048 Compare X22, 0
	049 JumpIfEqual {53}
	050 Move X0, X21
	051 Move X1, X22
	052 Call Oid..ctor, X0, X1
	053 Move X8, 0xAC4000
	054 Move X9, 0xADA000
	055 Move X8, [X8+1616]
	056 Move X9, [X9+2320]
	057 Move X0, X21
	058 Move X1, X31
	059 Move X22, [X8]
	060 Move X23, [X9]
	061 Call Object..ctor, X0
	062 Move [X21+16], X22
	063 Move [X21+24], X23
	064 Move [X19+16], X21
	065 Move X1, [X20+24]
	066 Move X0, X19
	067 Call AsnEncodedData.set_RawData, X0, X1
	068 Move W8, [X20+32]
	069 Move X1, [X19+24]
	070 Move X0, X19
	071 Move [X19+32], W8
	072 Call X509SubjectKeyIdentifierExtension.Decode, X0, X1
	073 Move [X19+56], W0
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Move X0, 0xADD000
	082 Move X0, [X0+2472]
	083 Call 0x1C17D08
	084 Move X1, X31
	085 Call Locale.GetText, X0
	086 Move X19, X0
	087 Move X0, 0xA9C000
	088 Move X0, [X0+1400]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X20, X0
	092 Move X0, 0xADD000
	093 Move X0, [X0+2120]
	094 Call 0x1C17D08
	095 Move X2, X0
	096 Move X0, X20
	097 Move X1, X19
	098 Move X3, X31
	099 Call ArgumentException..ctor, X0, X1, X2
	100 Move X0, 0xADD000
	101 Move X0, [X0+3520]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X20
	105 Call 0x1C17DEC
	106 Move X0, 0xA99000
	107 Move X0, [X0+1320]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xADD000
	112 Move X0, [X0+2120]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Move X2, X31
	117 Call ArgumentNullException..ctor, X0, X1
	118 Move X0, 0xADD000
	119 Move X0, [X0+3520]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Call 0x1C17DEC

Method: System.Byte FromHexChar(System.Char c)

Disassembly:
	0x03660140 STP X30, X23, [X31 + 0x10]
	0x03660144 STP X22, X21, [X31 + 0x20]
	0x03660148 STP X20, X19, [X31 + 0x30]
	0x0366014C ADRP X22, 0xD80000
	0x03660150 STR W2, [X31 + 0xC]
	0x03660154 ADRP X23, 0xA95000
	0x03660158 LDRB W8, [X22 + 0x6BB]
	0x0366015C LDR X23, [X23 + 0xC48]
	0x03660160 MOV X21, X3
	0x03660164 MOV X19, X1
	0x03660168 MOV X20, X0
	0x0366016C TBNZ X8, 0x0, 0x3660190
	0x03660170 ADRP X0, 0xA95000
	0x03660174 LDR X0, [X0 + 0xC48]
	0x03660178 BL 0x1C16CF4
	0x0366017C ADRP X0, 0xADC000
	0x03660180 LDR X0, [X0 + 0xE28]

ISIL:
	001 Subtract W8, W0, 97
	002 And W8, W8, 0xFFFF
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Subtract W8, W0, 65
	005 And W8, W8, 0xFFFF
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Subtract W8, W0, 48
	008 And W9, W8, 0xFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSINV not yet implemented."
	011 Return X0
	012 Subtract W0, W0, 87
	013 Return X0
	014 Subtract W0, W0, 55
	015 Return X0

Method: System.Byte FromHexChars(System.Char c1, System.Char c2)

Disassembly:
	0x03660184 BL 0x1C16CF4
	0x03660188 MOVZ W8, 0x1
	0x0366018C STRB W8, [X22 + 0x6BB]
	0x03660190 LDR X0, [X23]
	0x03660194 LDR W8, [X0 + 0xE0]
	0x03660198 CBNZ W8, 0x36601A0
	0x0366019C BL 0x1C16DFC
	0x036601A0 MOV X0, X31
	0x036601A4 BL 0x33387A0
	0x036601A8 MOV X1, X0
	0x036601AC ADD X0, X31, 0xC
	0x036601B0 MOV X2, X31
	0x036601B4 BL 0x337B824
	0x036601B8 CBZ X21, 0x366021C
	0x036601BC LDR X8, [X21]
	0x036601C0 ADRP X23, 0xADC000
	0x036601C4 MOV X22, X0
	0x036601C8 MOV X0, X21
	0x036601CC LDP X9, X1, [X8 + 0x1A8]
	0x036601D0 LDR X23, [X23 + 0xE28]
	0x036601D4 BLR X9
	0x036601D8 LDR X8, [X23]
	0x036601DC MOV X3, X0
	0x036601E0 MOV X1, X19
	0x036601E4 MOV X2, X22
	0x036601E8 MOV X0, X8
	0x036601EC MOV X4, X31
	0x036601F0 BL 0x320A2DC
	0x036601F4 MOV X1, X0
	0x036601F8 MOV X0, X20
	0x036601FC MOV X2, X19
	0x03660200 MOV X3, X31
	0x03660204 BL 0x330E16C
	0x03660208 LDP X20, X19, [X31 + 0x30]
	0x0366020C LDP X22, X21, [X31 + 0x20]
	0x03660210 LDP X30, X23, [X31 + 0x10]
	0x03660214 ADD X31, X31, 0x40
	0x03660218 RET
	0x0366021C BL 0x1C16F20

ISIL:
	001 Subtract W8, W0, 97
	002 And W8, W8, 0xFFFF
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Subtract W8, W0, 65
	005 And W8, W8, 0xFFFF
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Subtract W8, W0, 48
	008 And W9, W8, 0xFFFF
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Subtract W8, W0, 87
	011 Subtract W8, W0, 55
	012 NotImplemented "Instruction ORN not yet implemented."
	013 And W31, W9, 255
	014 Subtract W9, W1, 97
	015 And W9, W9, 0xFFFF
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Subtract W9, W1, 65
	018 And W9, W9, 0xFFFF
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Subtract W9, W1, 48
	021 And W10, W9, 0xFFFF
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSINV not yet implemented."
	024 Subtract W9, W1, 87
	025 Move W0, 255
	026 Return X0
	027 Subtract W9, W1, 55
	028 Or W0, W9, W8
	029 Return X0

Method: System.Byte[] FromHex(System.String hex)

Disassembly:
	0x0365FE78 MOV X19, X0
	0x0365FE7C BL 0x33A51F0
	0x0365FE80 STR W31, [X19 + 0x10]
	0x0365FE84 LDR X0, [X20]
	0x0365FE88 LDR X8, [X0 + 0xB8]
	0x0365FE8C STR X19, [X8 + 0x8]
	0x0365FE90 BL 0x1C16F10
	0x0365FE94 MOV X1, X31
	0x0365FE98 MOV X19, X0
	0x0365FE9C BL 0x33A51F0
	0x0365FEA0 MOVZ W8, 0x1
	0x0365FEA4 STR W8, [X19 + 0x10]
	0x0365FEA8 LDR X8, [X20]
	0x0365FEAC LDR X8, [X8 + 0xB8]
	0x0365FEB0 STP X19, X19, [X8 + 0x10]
	0x0365FEB4 LDP X20, X19, [X31 + 0x10]
	0x0365FEB8 LDR X30, [X31], #0x20
	0x0365FEBC RET
	0x0365FEC0 STP X30, X21, [X31 - 0x20]!
	0x0365FEC4 STP X20, X19, [X31 + 0x10]
	0x0365FEC8 ADRP X20, 0xD81000
	0x0365FECC ADRP X21, 0xA96000
	0x0365FED0 LDRB W8, [X20 + 0x6B6]
	0x0365FED4 LDR X21, [X21 + 0x278]
	0x0365FED8 MOV X19, X0
	0x0365FEDC TBNZ X8, 0x0, 0x365FEF4
	0x0365FEE0 ADRP X0, 0xA96000
	0x0365FEE4 LDR X0, [X0 + 0x278]
	0x0365FEE8 BL 0x1C16CF4
	0x0365FEEC MOVZ W8, 0x1
	0x0365FEF0 STRB W8, [X20 + 0x6B6]
	0x0365FEF4 LDR X8, [X21]
	0x0365FEF8 MOV X0, X19
	0x0365FEFC MOV X1, X31
	0x0365FF00 LDR X8, [X8 + 0xB8]
	0x0365FF04 LDR X20, [X8]
	0x0365FF08 BL 0x33A51F0
	0x0365FF0C STR X20, [X19 + 0x10]
	0x0365FF10 LDP X20, X19, [X31 + 0x10]
	0x0365FF14 LDP X30, X21, [X31], #0x20
	0x0365FF18 RET
	0x0365FF1C STR X30, [X31 - 0x20]!
	0x0365FF20 STP X20, X19, [X31 + 0x10]
	0x0365FF24 MOV X19, X1
	0x0365FF28 MOV X1, X31
	0x0365FF2C MOV X20, X0
	0x0365FF30 BL 0x33A51F0
	0x0365FF34 STR X19, [X20 + 0x10]
	0x0365FF38 LDP X20, X19, [X31 + 0x10]
	0x0365FF3C LDR X30, [X31], #0x20
	0x0365FF40 RET
	0x0365FF44 LDR X0, [X0 + 0x10]
	0x0365FF48 RET
	0x0365FF4C LDR X0, [X0 + 0x10]
	0x0365FF50 RET
	0x0365FF54 STR X1, [X0 + 0x10]
	0x0365FF58 RET
	0x0365FF5C STP X30, X21, [X31 - 0x20]!
	0x0365FF60 STP X20, X19, [X31 + 0x10]
	0x0365FF64 ADRP X21, 0xD81000
	0x0365FF68 LDRB W8, [X21 + 0x6B7]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xD82000
	010 Move W8, [X20+1700]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xA95000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1700], W8
	021 Compare X19, 0
	022 JumpIfEqual {58}
	023 Move X8, 0xA95000
	024 Move X8, [X8+1560]
	025 Move W20, [X19+16]
	026 Move X0, [X8]
	027 NotImplemented "Instruction SBFM not yet implemented."
	028 Move W1, W22
	029 Call 0x1C17D6C
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, X0
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X24, X31
	034 Move W21, W31
	035 NotImplemented "Instruction CSINC not yet implemented."
	036 Add X25, X20, 32
	037 Move X0, X19
	038 Move W1, W21
	039 Move X2, X31
	040 Call String.get_Chars, X0, X1
	041 Add W21, W21, 1
	042 Move W22, W0
	043 Move X0, X19
	044 Move W1, W21
	045 Move X2, X31
	046 Call String.get_Chars, X0, X1
	047 Move W1, W0
	048 Move W0, W22
	049 Call X509SubjectKeyIdentifierExtension.FromHexChars, X0, X1
	050 Compare X20, 0
	051 JumpIfEqual {69}
	052 Move W8, [X20+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move [X25], W0
	055 Add X24, X24, 1
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Add W21, W21, 1
	058 Move X20, X31
	059 Move X0, X20
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Return X0
	069 Call 0x1C17F20
	070 Call 0x1C17F28

Method: System.Security.Cryptography.AsnDecodeStatus Decode(System.Byte[] extension)

Disassembly:
	0x0365F990 LDR X0, [X0 + 0x6C0]
	0x0365F994 BL 0x1C16CF4
	0x0365F998 MOVZ W8, 0x1
	0x0365F99C STRB W8, [X21 + 0x6AF]
	0x0365F9A0 CMP X19, X20
	0x0365F9A4 B.EQ 0x365F9EC
	0x0365F9A8 CBZ X20, 0x365F9E4
	0x0365F9AC ADRP X8, 0xADC000
	0x0365F9B0 LDR X8, [X8 + 0x6C0]
	0x0365F9B4 LDR X9, [X20]
	0x0365F9B8 LDR X8, [X8]
	0x0365F9BC LDRB W11, [X9 + 0x130]
	0x0365F9C0 LDRB W10, [X8 + 0x130]
	0x0365F9C4 CMP W11, W10
	0x0365F9C8 B.CC 0x365F9E4
	0x0365F9CC LDR X9, [X9 + 0xC8]
	0x0365F9D0 ADD X9, X9, X10, 0x3, LSL
	0x0365F9D4 LDUR X9, [X9 - 0x8]
	0x0365F9D8 CMP X9, X8
	0x0365F9DC CSEL X0, X20, X31, EQ
	0x0365F9E0 B.EQ 0x365F9FC
	0x0365F9E4 MOV W0, W31
	0x0365F9E8 B 0x365F9F0
	0x0365F9EC MOVZ W0, 0x1
	0x0365F9F0 LDP X20, X19, [X31 + 0x10]
	0x0365F9F4 LDP X30, X21, [X31], #0x20
	0x0365F9F8 RET
	0x0365F9FC CBZ X0, 0x365FA38
	0x0365FA00 LDR X8, [X0]
	0x0365FA04 LDP X9, X1, [X8 + 0x178]
	0x0365FA08 BLR X9
	0x0365FA0C LDR X8, [X19]
	0x0365FA10 MOV X20, X0
	0x0365FA14 MOV X0, X19
	0x0365FA18 LDP X9, X1, [X8 + 0x178]
	0x0365FA1C BLR X9
	0x0365FA20 MOV X1, X0
	0x0365FA24 MOV X0, X20
	0x0365FA28 LDP X20, X19, [X31 + 0x10]
	0x0365FA2C MOV X2, X31
	0x0365FA30 LDP X30, X21, [X31], #0x20
	0x0365FA34 B 0x321BA08
	0x0365FA38 BL 0x1C16F20
	0x0365FA3C STR X30, [X31 - 0x10]!
	0x0365FA40 LDR X8, [X0]
	0x0365FA44 LDP X9, X1, [X8 + 0x178]
	0x0365FA48 BLR X9
	0x0365FA4C CBZ X0, 0x365FA60
	0x0365FA50 LDR X8, [X0]
	0x0365FA54 LDP X2, X1, [X8 + 0x158]
	0x0365FA58 LDR X30, [X31], #0x10
	0x0365FA5C BR X2
	0x0365FA60 BL 0x1C16F20
	0x0365FA64 STR X30, [X31 - 0x20]!
	0x0365FA68 STP X20, X19, [X31 + 0x10]
	0x0365FA6C ADRP X19, 0xD81000
	0x0365FA70 ADRP X20, 0xADC000
	0x0365FA74 LDRB W8, [X19 + 0x6B0]
	0x0365FA78 LDR X20, [X20 + 0x6C0]
	0x0365FA7C TBNZ X8, 0x0, 0x365FA94
	0x0365FA80 ADRP X0, 0xADC000
	0x0365FA84 LDR X0, [X0 + 0x6C0]
	0x0365FA88 BL 0x1C16CF4
	0x0365FA8C MOVZ W8, 0x1
	0x0365FA90 STRB W8, [X19 + 0x6B0]
	0x0365FA94 LDR X0, [X20]
	0x0365FA98 BL 0x1C16F10
	0x0365FA9C MOV X19, X0
	0x0365FAA0 BL 0x365F8D4
	0x0365FAA4 LDR X8, [X20]
	0x0365FAA8 LDR X8, [X8 + 0xB8]
	0x0365FAAC STR X19, [X8]
	0x0365FAB0 LDP X20, X19, [X31 + 0x10]
	0x0365FAB4 LDR X30, [X31], #0x20
	0x0365FAB8 RET
	0x0365FABC STP X30, X21, [X31 - 0x20]!
	0x0365FAC0 STP X20, X19, [X31 + 0x10]
	0x0365FAC4 ADRP X21, 0xD81000
	0x0365FAC8 ADRP X20, 0xA96000
	0x0365FACC LDRB W8, [X21 + 0x6B1]
	0x0365FAD0 LDR X20, [X20 + 0x278]
	0x0365FAD4 MOV X19, X0
	0x0365FAD8 TBNZ X8, 0x0, 0x365FAF0
	0x0365FADC ADRP X0, 0xA96000
	0x0365FAE0 LDR X0, [X0 + 0x278]
	0x0365FAE4 BL 0x1C16CF4
	0x0365FAE8 MOVZ W8, 0x1
	0x0365FAEC STRB W8, [X21 + 0x6B1]
	0x0365FAF0 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD82000
	006 Move W8, [X21+1701]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xAC2000
	014 Move X0, [X0+2968]
	015 Call 0x1C17CF4
	016 Move X0, 0xA97000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1701], W8
	021 Compare X20, 0
	022 JumpIfEqual {75}
	023 Move X8, [X20+24]
	024 Compare X8, 0
	025 JumpIfEqual {75}
	026 Move X9, 0xA97000
	027 Move X9, [X9+632]
	028 Move X9, [X9]
	029 Move X9, [X9+184]
	030 Move X9, [X9]
	031 Move [X19+48], X9
	032 Compare W8, 0
	033 JumpIfEqual {57}
	034 Move W9, [X20+32]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W0, 4
	038 Move W0, 2
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, 0xAC2000
	041 Move X8, [X8+2968]
	042 Move X0, [X8]
	043 Call 0x1C17F10
	044 Move X21, X0
	045 Move X1, X20
	046 Move X2, X31
	047 Call ASN1..ctor, X0, X1
	048 Compare X21, 0
	049 JumpIfEqual {58}
	050 Move X0, X21
	051 Move X1, X31
	052 Call ASN1.get_Value, X0
	053 Move X8, X0
	054 Move W0, W31
	055 Move [X19+40], X8
	056 Move W0, 3
	057 Call 0x1C17F28
	058 Call 0x1C17F20
	059 Move X19, X0
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X19
	062 Call 0x3EB2AD0
	063 Move X19, X0
	064 Move X0, 0xA9B000
	065 Move X0, [X0+3264]
	066 Call 0x1C17D08
	067 Move X8, [X19]
	068 Move X1, [X8]
	069 Call 0x1C18270
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {81}
	074 Call 0x3EB2AE0
	075 Move W0, 1
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move X30, [X31+32]
	079 Move X21, [X31+40]
	080 Return X0
	081 Move W0, 8
	082 Call 0x3EB2AF0
	083 Move X8, [X19]
	084 Move [X0], X8
	085 Move X1, 0x856000
	086 Add X1, X1, 3672
	087 Move X2, X31
	088 Call 0x3EB2B00
	089 Move X19, X0
	090 Call 0x3EB2AE0
	091 Move X0, X19
	092 Call 0x1D2D690
	093 Call 0x1991590

Method: System.Byte[] Encode()

Disassembly:
	0x0365FCA4 LDR X8, [X0 + 0xB8]
	0x0365FCA8 STR X19, [X8 + 0x8]
	0x0365FCAC BL 0x1C16F10
	0x0365FCB0 LDR X22, [X22]
	0x0365FCB4 MOV X1, X31
	0x0365FCB8 MOV X19, X0
	0x0365FCBC BL 0x33A51F0
	0x0365FCC0 STR X22, [X19 + 0x10]
	0x0365FCC4 LDR X0, [X20]
	0x0365FCC8 LDR X8, [X0 + 0xB8]
	0x0365FCCC STR X19, [X8 + 0x10]
	0x0365FCD0 BL 0x1C16F10
	0x0365FCD4 LDR X21, [X21]
	0x0365FCD8 MOV X1, X31
	0x0365FCDC MOV X19, X0
	0x0365FCE0 BL 0x33A51F0
	0x0365FCE4 STR X21, [X19 + 0x10]
	0x0365FCE8 LDR X8, [X20]
	0x0365FCEC LDP X22, X21, [X31 + 0x10]
	0x0365FCF0 LDR X8, [X8 + 0xB8]
	0x0365FCF4 STR X19, [X8 + 0x18]
	0x0365FCF8 LDP X20, X19, [X31 + 0x20]
	0x0365FCFC LDP X30, X23, [X31], #0x30
	0x0365FD00 RET
	0x0365FD04 STR X30, [X31 - 0x20]!
	0x0365FD08 STP X20, X19, [X31 + 0x10]
	0x0365FD0C MOV W19, W1
	0x0365FD10 MOV X1, X31
	0x0365FD14 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD82000
	006 Move X21, 0xAC2000
	007 Move W8, [X20+1702]
	008 Move X21, [X21+2968]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAC2000
	015 Move X0, [X0+2968]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1702], W8
	019 Move X0, [X21]
	020 Move X20, [X19+40]
	021 Call 0x1C17F10
	022 Move W1, 4
	023 Move X2, X20
	024 Move X3, X31
	025 Move X19, X0
	026 Call ASN1..ctor, X0, X1, X2
	027 Compare X19, 0
	028 JumpIfEqual {38}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X2, [X8+376]
	034 Move X1, [X8+384]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X2
	038 Call 0x1C17F20

Method: System.String ToString(System.Boolean multiLine)

Disassembly:
	0x03660220 MOV X4, X31
	0x03660224 B 0x3315D1C
	0x03660228 MOV X1, X31
	0x0366022C B 0x33BDD8C
	0x03660230 MOV X1, X31
	0x03660234 B 0x33BDD8C
	0x03660238 MOV X1, X31
	0x0366023C B 0x33BDD8C
	0x03660240 MOV X1, X31
	0x03660244 B 0x33BDD8C
	0x03660248 MOV X1, X31
	0x0366024C B 0x33BDD8C
	0x03660250 MOV X1, X31
	0x03660254 B 0x33BDD8C
	0x03660258 STR X30, [X31 - 0x20]!
	0x0366025C STP X20, X19, [X31 + 0x10]
	0x03660260 MOV X19, X1
	0x03660264 MOV X1, X31
	0x03660268 MOV X20, X0
	0x0366026C BL 0x33A51F0
	0x03660270 STR X19, [X20 + 0x10]
	0x03660274 LDP X20, X19, [X31 + 0x10]
	0x03660278 LDR X30, [X31], #0x20
	0x0366027C RET
	0x03660280 LDR X0, [X0 + 0x10]
	0x03660284 RET
	0x03660288 STP X30, X21, [X31 - 0x20]!
	0x0366028C STP X20, X19, [X31 + 0x10]
	0x03660290 ADRP X21, 0xD80000
	0x03660294 LDRB W8, [X21 + 0x6BC]
	0x03660298 MOV X20, X1
	0x0366029C MOV X19, X0
	0x036602A0 TBNZ X8, 0x0, 0x36602B8
	0x036602A4 ADRP X0, 0xADC000
	0x036602A8 LDR X0, [X0 + 0xE30]
	0x036602AC BL 0x1C16CF4
	0x036602B0 MOVZ W8, 0x1
	0x036602B4 STRB W8, [X21 + 0x6BC]
	0x036602B8 CBZ X20, 0x36602D8
	0x036602BC ADRP X8, 0xADC000
	0x036602C0 LDR X8, [X8 + 0xE30]
	0x036602C4 LDR X9, [X20]
	0x036602C8 LDR X8, [X8]
	0x036602CC CMP X9, X8
	0x036602D0 CSEL X8, X20, X31, EQ
	0x036602D4 B.EQ 0x36602E8
	0x036602D8 LDP X20, X19, [X31 + 0x10]
	0x036602DC MOV W0, W31
	0x036602E0 LDP X30, X21, [X31], #0x20
	0x036602E4 RET
	0x036602E8 CBZ X8, 0x3660304
	0x036602EC LDR X0, [X8 + 0x10]
	0x036602F0 LDR X1, [X19 + 0x10]
	0x036602F4 LDP X20, X19, [X31 + 0x10]
	0x036602F8 MOV X2, X31
	0x036602FC LDP X30, X21, [X31], #0x20
	0x03660300 B 0x321BA08
	0x03660304 BL 0x1C16F20
	0x03660308 MOV X1, X31
	0x0366030C B 0x33A861C
	0x03660310 STR X30, [X31 - 0x20]!
	0x03660314 STP X20, X19, [X31 + 0x10]
	0x03660318 ADRP X19, 0xD80000
	0x0366031C ADRP X20, 0xADC000
	0x03660320 LDRB W8, [X19 + 0x6BD]
	0x03660324 LDR X20, [X20 + 0xE30]
	0x03660328 TBNZ X8, 0x0, 0x3660340
	0x0366032C ADRP X0, 0xADC000
	0x03660330 LDR X0, [X0 + 0xE30]
	0x03660334 BL 0x1C16CF4
	0x03660338 MOVZ W8, 0x1
	0x0366033C STRB W8, [X19 + 0x6BD]
	0x03660340 LDR X0, [X20]
	0x03660344 BL 0x1C16F10
	0x03660348 MOV X1, X31
	0x0366034C MOV X19, X0
	0x03660350 BL 0x33A51F0
	0x03660354 STR X31, [X19 + 0x10]
	0x03660358 LDR X8, [X20]
	0x0366035C LDR X8, [X8 + 0xB8]
	0x03660360 STR X19, [X8]
	0x03660364 LDP X20, X19, [X31 + 0x10]
	0x03660368 LDR X30, [X31], #0x20
	0x0366036C RET
	0x03660370 STR X30, [X31 - 0x20]!
	0x03660374 STP X20, X19, [X31 + 0x10]
	0x03660378 MOV X19, X1
	0x0366037C MOV X1, X31
	0x03660380 MOV X20, X0
	0x03660384 BL 0x33A51F0
	0x03660388 STR X19, [X20 + 0x10]
	0x0366038C LDP X20, X19, [X31 + 0x10]
	0x03660390 LDR X30, [X31], #0x20
	0x03660394 RET
	0x03660398 LDR X0, [X0 + 0x10]
	0x0366039C RET
	0x036603A0 STP X30, X21, [X31 - 0x20]!
	0x036603A4 STP X20, X19, [X31 + 0x10]
	0x036603A8 ADRP X21, 0xD80000
	0x036603AC LDRB W8, [X21 + 0x6BE]
	0x036603B0 MOV X20, X1
	0x036603B4 MOV X19, X0
	0x036603B8 TBNZ X8, 0x0, 0x36603D0
	0x036603BC ADRP X0, 0xADC000
	0x036603C0 LDR X0, [X0 + 0xE38]
	0x036603C4 BL 0x1C16CF4
	0x036603C8 MOVZ W8, 0x1
	0x036603CC STRB W8, [X21 + 0x6BE]
	0x036603D0 CBZ X20, 0x36603F0
	0x036603D4 ADRP X8, 0xADC000
	0x036603D8 LDR X8, [X8 + 0xE38]
	0x036603DC LDR X9, [X20]
	0x036603E0 LDR X8, [X8]
	0x036603E4 CMP X9, X8
	0x036603E8 CSEL X8, X20, X31, EQ
	0x036603EC B.EQ 0x3660400
	0x036603F0 LDP X20, X19, [X31 + 0x10]
	0x036603F4 MOV W0, W31
	0x036603F8 LDP X30, X21, [X31], #0x20
	0x036603FC RET
	0x03660400 CBZ X8, 0x366041C
	0x03660404 LDR X0, [X8 + 0x10]
	0x03660408 LDR X1, [X19 + 0x10]
	0x0366040C LDP X20, X19, [X31 + 0x10]
	0x03660410 MOV X2, X31
	0x03660414 LDP X30, X21, [X31], #0x20
	0x03660418 B 0x321BA08
	0x0366041C BL 0x1C16F20
	0x03660420 MOV X1, X31
	0x03660424 B 0x33A861C
	0x03660428 STR X30, [X31 - 0x20]!
	0x0366042C STP X20, X19, [X31 + 0x10]
	0x03660430 ADRP X19, 0xD80000
	0x03660434 ADRP X20, 0xADC000
	0x03660438 LDRB W8, [X19 + 0x6BF]
	0x0366043C LDR X20, [X20 + 0xE38]
	0x03660440 TBNZ X8, 0x0, 0x3660458
	0x03660444 ADRP X0, 0xADC000
	0x03660448 LDR X0, [X0 + 0xE38]
	0x0366044C BL 0x1C16CF4
	0x03660450 MOVZ W8, 0x1
	0x03660454 STRB W8, [X19 + 0x6BF]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xD81000
	009 Move W8, [X21+1703]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0xA94000
	017 Move X0, [X0+2288]
	018 Call 0x1C17CF4
	019 Move X0, 0xA96000
	020 Move X0, [X0+632]
	021 Call 0x1C17CF4
	022 Move X0, 0xA94000
	023 Move X0, [X0+3544]
	024 Call 0x1C17CF4
	025 Move X0, 0xAC7000
	026 Move X0, [X0+848]
	027 Call 0x1C17CF4
	028 Move X0, 0xAC4000
	029 Move X0, [X0+1616]
	030 Call 0x1C17CF4
	031 Move X0, 0xADD000
	032 Move X0, [X0+2192]
	033 Call 0x1C17CF4
	034 Move X0, 0xADD000
	035 Move X0, [X0+2488]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+1703], W8
	039 Move W8, [X20+56]
	040 Subtract W9, W8, 2
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X8, 0xA96000
	045 Move X8, [X8+632]
	046 Move X8, [X8]
	047 Move X8, [X8+184]
	048 Move X1, [X20+24]
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Call X509Extension.FormatUnkownData, X0, X1
	057 Return X0
	058 Move X8, 0xADD000
	059 Move X8, [X8+2192]
	060 Move X0, [X8]
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X22, [X31+32]
	064 Move X21, [X31+40]
	065 Move X24, [X31+16]
	066 Move X23, [X31+24]
	067 Move X30, [X31+64]
	068 Return X0
	069 Move X8, [X20+16]
	070 Compare X8, 0
	071 JumpIfEqual {142}
	072 Move X0, [X8+16]
	073 Move X8, 0xAC4000
	074 Move X8, [X8+1616]
	075 Move X2, X31
	076 Move X1, [X8]
	077 Call String.op_Inequality, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {99}
	082 Move X8, [X20+16]
	083 Compare X8, 0
	084 JumpIfEqual {142}
	085 Move X1, [X8+16]
	086 Move X8, 0xADD000
	087 Move X8, [X8+2488]
	088 Move X20, [X31+48]
	089 Move X19, [X31+56]
	090 Move X22, [X31+32]
	091 Move X21, [X31+40]
	092 Move X24, [X31+16]
	093 Move X23, [X31+24]
	094 Move X0, [X8]
	095 Move X2, X31
	096 Move X30, [X31+64]
	097 Call String.Format, X0, X1
	098 Return X0
	099 Move X8, 0xA94000
	100 Move X8, [X8+2288]
	101 Move X0, [X8]
	102 Call 0x1C17F10
	103 Move X1, X31
	104 Move X21, X0
	105 Call StringBuilder..ctor, X0
	106 Move X8, [X20+40]
	107 Compare X8, 0
	108 JumpIfEqual {142}
	109 Move X23, 0xAC7000
	110 Move X24, 0xA94000
	111 Move X23, [X23+848]
	112 Move X24, [X24+3544]
	113 Move X22, X31
	114 Move W9, [X8+24]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X1, [X23]
	118 Add X8, X8, X22
	119 Add X0, X8, 32
	120 Move X2, X31
	121 Call Byte.ToString, X0, X1
	122 Compare X21, 0
	123 JumpIfEqual {142}
	124 Move X1, X0
	125 Move X0, X21
	126 Move X2, X31
	127 Call StringBuilder.Append, X0, X1
	128 Move X8, [X20+40]
	129 Compare X8, 0
	130 JumpIfEqual {142}
	131 Move W9, [X8+24]
	132 Subtract W9, W9, 1
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X1, [X24]
	135 Move X0, X21
	136 Move X2, X31
	137 Call StringBuilder.Append, X0, X1
	138 Move X8, [X20+40]
	139 Add X22, X22, 1
	140 Compare X8, 0
	141 JumpIfNotEqual {114}
	142 Call 0x1C17F20
	143 Move TEMP, X19
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfNotEqual {155}
	147 Move X0, X31
	148 Call Environment.get_NewLine
	149 Compare X21, 0
	150 JumpIfEqual {142}
	151 Move X1, X0
	152 Move X0, X21
	153 Move X2, X31
	154 Call StringBuilder.Append, X0, X1
	155 Compare X21, 0
	156 JumpIfEqual {142}
	157 Move X8, [X21]
	158 Move X0, X21
	159 Move X20, [X31+48]
	160 Move X19, [X31+56]
	161 Move X22, [X31+32]
	162 Move X21, [X31+40]
	163 Move X2, [X8+360]
	164 Move X1, [X8+368]
	165 Move X24, [X31+16]
	166 Move X23, [X31+24]
	167 Move X30, [X31+64]
	168 CallNoReturn X2
	169 Call 0x1C17F28

