Type: System.Security.Cryptography.X509Certificates.X509KeyUsageExtension

Method: System.Void .ctor()

Disassembly:
	0x036549AC ADRP X22, 0xD8C000
	0x036549B0 LDRB W8, [X22 + 0x62D]
	0x036549B4 MOV X19, X2
	0x036549B8 MOV W21, W1
	0x036549BC MOV X20, X0
	0x036549C0 STR W3, [X31 + 0x28]
	0x036549C4 TBNZ X8, 0x0, 0x3654A54
	0x036549C8 ADRP X0, 0xACC000
	0x036549CC LDR X0, [X0 + 0xBD8]
	0x036549D0 BL 0x1C16CF4
	0x036549D4 ADRP X0, 0xAA1000
	0x036549D8 LDR X0, [X0 + 0xC48]
	0x036549DC BL 0x1C16CF4
	0x036549E0 ADRP X0, 0xAA0000
	0x036549E4 LDR X0, [X0 + 0x9F0]
	0x036549E8 BL 0x1C16CF4
	0x036549EC ADRP X0, 0xA9F000
	0x036549F0 LDR X0, [X0 + 0xE00]
	0x036549F4 BL 0x1C16CF4
	0x036549F8 ADRP X0, 0xA9F000
	0x036549FC LDR X0, [X0 + 0xE18]
	0x03654A00 BL 0x1C16CF4
	0x03654A04 ADRP X0, 0xAA1000
	0x03654A08 LDR X0, [X0 + 0x278]
	0x03654A0C BL 0x1C16CF4
	0x03654A10 ADRP X0, 0xAE8000
	0x03654A14 LDR X0, [X0 + 0xAF0]
	0x03654A18 BL 0x1C16CF4
	0x03654A1C ADRP X0, 0xAE5000
	0x03654A20 LDR X0, [X0 + 0x2A0]
	0x03654A24 BL 0x1C16CF4
	0x03654A28 ADRP X0, 0xAE8000
	0x03654A2C LDR X0, [X0 + 0x870]
	0x03654A30 BL 0x1C16CF4
	0x03654A34 ADRP X0, 0xAE8000
	0x03654A38 LDR X0, [X0 + 0xAF8]
	0x03654A3C BL 0x1C16CF4
	0x03654A40 ADRP X0, 0xACF000
	0x03654A44 LDR X0, [X0 + 0x770]
	0x03654A48 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD8D000
	008 Move X22, 0xAE9000
	009 Move X20, 0xAD0000
	010 Move X21, 0xAE6000
	011 Move W8, [X23+1684]
	012 Move X22, [X22+2016]
	013 Move X20, [X20+1904]
	014 Move X21, [X21+2248]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xAE9000
	021 Move X0, [X0+2016]
	022 Call 0x1C17CF4
	023 Move X0, 0xAE6000
	024 Move X0, [X0+2248]
	025 Call 0x1C17CF4
	026 Move X0, 0xAD0000
	027 Move X0, [X0+1904]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+1684], W8
	031 Move X0, X19
	032 Move X1, X31
	033 Call Object..ctor, X0
	034 Move X0, [X22]
	035 Call 0x1C17F10
	036 Move X22, [X20]
	037 Move X21, [X21]
	038 Move X1, X31
	039 Move X20, X0
	040 Call Object..ctor, X0
	041 Move [X20+16], X22
	042 Move [X20+24], X21
	043 Move [X19+16], X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return 

Method: System.Void .ctor(System.Security.Cryptography.AsnEncodedData encodedKeyUsage, System.Boolean critical)

Disassembly:
	0x0365084C ADRP X0, 0xAA5000
	0x03650850 LDR X0, [X0 + 0x278]
	0x03650854 BL 0x1C16CF4
	0x03650858 ADRP X0, 0xAD0000
	0x0365085C LDR X0, [X0 + 0xCF8]
	0x03650860 BL 0x1C16CF4
	0x03650864 MOVZ W8, 0x1
	0x03650868 STRB W8, [X21 + 0x617]
	0x0365086C CBZ W19, 0x365087C
	0x03650870 MOVZ W8, 0x71F1
	0x03650874 AND W8, W19, W8, 0x0
	0x03650878 CBZ W8, 0x3650924
	0x0365087C LDR X8, [X20 + 0x18]
	0x03650880 CBZ X8, 0x365096C
	0x03650884 LDR X8, [X8 + 0x18]
	0x03650888 CBZ X8, 0x3650900
	0x0365088C ADRP X21, 0xAD0000
	0x03650890 ADRP X23, 0xAD0000
	0x03650894 LDR X21, [X21 + 0xB98]
	0x03650898 LDR X23, [X23 + 0xCF8]
	0x0365089C MOV W0, W19
	0x036508A0 BL 0x3650970
	0x036508A4 LDR X8, [X21]
	0x036508A8 LDR X22, [X20 + 0x18]
	0x036508AC MOV X20, X0
	0x036508B0 MOV X0, X8
	0x036508B4 BL 0x1C16F10
	0x036508B8 MOV X1, X22
	0x036508BC MOV X2, X31
	0x036508C0 MOV X21, X0
	0x036508C4 BL 0x31E7A44
	0x036508C8 LDR X0, [X23]
	0x036508CC LDR W8, [X0 + 0xE0]
	0x036508D0 CBNZ W8, 0x36508D8
	0x036508D4 BL 0x1C16DFC
	0x036508D8 ANDS W31, W19, 0x40
	0x036508DC AND W1, W19, 0x1
	0x036508E0 MOV X0, X21
	0x036508E4 MOV X2, X20
	0x036508E8 LDP X20, X19, [X31 + 0x20]
	0x036508EC LDP X22, X21, [X31 + 0x10]
	0x036508F0 CSET W3, EQ
	0x036508F4 MOV X4, X31
	0x036508F8 LDP X30, X23, [X31], #0x30
	0x036508FC B 0x31F2D58
	0x03650900 ADRP X8, 0xAA5000
	0x03650904 LDR X8, [X8 + 0x278]
	0x03650908 LDP X20, X19, [X31 + 0x20]
	0x0365090C LDP X22, X21, [X31 + 0x10]
	0x03650910 LDR X8, [X8]
	0x03650914 LDR X8, [X8 + 0xB8]
	0x03650918 LDR X0, [X8]
	0x0365091C LDP X30, X23, [X31], #0x30

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xD91000
	010 Move X24, 0xAED000
	011 Move X22, 0xAD4000
	012 Move X23, 0xAEA000
	013 Move W8, [X25+1685]
	014 Move X24, [X24+2016]
	015 Move X22, [X22+1904]
	016 Move X23, [X23+2248]
	017 Move W20, W2
	018 Move X21, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xAED000
	025 Move X0, [X0+2016]
	026 Call 0x1C17CF4
	027 Move X0, 0xAEA000
	028 Move X0, [X0+2248]
	029 Call 0x1C17CF4
	030 Move X0, 0xAD4000
	031 Move X0, [X0+1904]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+1685], W8
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object..ctor, X0
	038 Move X0, [X24]
	039 Call 0x1C17F10
	040 Move X24, [X22]
	041 Move X23, [X23]
	042 Move X1, X31
	043 Move X22, X0
	044 Call Object..ctor, X0
	045 Move [X22+16], X24
	046 Move [X22+24], X23
	047 Move [X19+16], X22
	048 Compare X21, 0
	049 JumpIfEqual {66}
	050 Move X1, [X21+24]
	051 And W8, W20, 1
	052 Move X0, X19
	053 Move [X19+32], W8
	054 Move [X19+24], X1
	055 Call X509KeyUsageExtension.Decode, X0, X1
	056 Move [X19+40], W0
	057 Move X20, [X31+48]
	058 Move X19, [X31+56]
	059 Move X22, [X31+32]
	060 Move X21, [X31+40]
	061 Move X24, [X31+16]
	062 Move X23, [X31+24]
	063 Move X30, [X31+64]
	064 Move X25, [X31+72]
	065 Return 
	066 Call 0x1C17F20

Method: System.Void .ctor(System.Security.Cryptography.X509Certificates.X509KeyUsageFlags keyUsages, System.Boolean critical)

Disassembly:
	0x0365EFE8 LDRB W10, [X8 + 0x130]
	0x0365EFEC CMP W11, W10
	0x0365EFF0 B.CC 0x365F094
	0x0365EFF4 LDR X9, [X9 + 0xC8]
	0x0365EFF8 ADD X9, X9, X10, 0x3, LSL
	0x0365EFFC LDUR X9, [X9 - 0x8]
	0x0365F000 CMP X9, X8
	0x0365F004 B.NE 0x365F094
	0x0365F008 ADRP X8, 0xADD000
	0x0365F00C LDR X8, [X8 + 0x7E0]
	0x0365F010 LDR X22, [X20 + 0x10]
	0x0365F014 LDR X0, [X8]
	0x0365F018 BL 0x1C16F10
	0x0365F01C MOV X21, X0
	0x0365F020 CBZ X22, 0x365F034
	0x0365F024 MOV X0, X21
	0x0365F028 MOV X1, X22
	0x0365F02C BL 0x364DC68
	0x0365F030 B 0x365F05C
	0x0365F034 ADRP X8, 0xAC4000
	0x0365F038 ADRP X9, 0xADA000
	0x0365F03C LDR X8, [X8 + 0x650]
	0x0365F040 LDR X9, [X9 + 0x910]
	0x0365F044 MOV X0, X21
	0x0365F048 MOV X1, X31
	0x0365F04C LDR X22, [X8]
	0x0365F050 LDR X23, [X9]
	0x0365F054 BL 0x33BDD8C
	0x0365F058 STP X22, X23, [X21 + 0x10]
	0x0365F05C STR X21, [X19 + 0x10]
	0x0365F060 LDR X1, [X20 + 0x18]
	0x0365F064 MOV X0, X19
	0x0365F068 BL 0x364E404
	0x0365F06C LDRB W8, [X20 + 0x20]
	0x0365F070 LDR X1, [X19 + 0x18]
	0x0365F074 MOV X0, X19
	0x0365F078 STRB W8, [X19 + 0x20]
	0x0365F07C BL 0x365E990
	0x0365F080 STR W0, [X19 + 0x38]
	0x0365F084 LDP X20, X19, [X31 + 0x20]
	0x0365F088 LDP X22, X21, [X31 + 0x10]
	0x0365F08C LDP X30, X23, [X31], #0x30
	0x0365F090 RET
	0x0365F094 ADRP X0, 0xADD000
	0x0365F098 LDR X0, [X0 + 0x9A8]
	0x0365F09C BL 0x1C16D08
	0x0365F0A0 MOV X1, X31
	0x0365F0A4 BL 0x320A160
	0x0365F0A8 MOV X19, X0
	0x0365F0AC ADRP X0, 0xA9C000
	0x0365F0B0 LDR X0, [X0 + 0x578]
	0x0365F0B4 BL 0x1C16D08
	0x0365F0B8 BL 0x1C16F10
	0x0365F0BC MOV X20, X0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xD83000
	010 Move X24, 0xADF000
	011 Move X22, 0xAC5000
	012 Move X23, 0xADB000
	013 Move W8, [X25+1686]
	014 Move X24, [X24+2016]
	015 Move X22, [X22+1904]
	016 Move X23, [X23+2248]
	017 Move W21, W2
	018 Move W20, W1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {35}
	024 Move X0, 0xADE000
	025 Move X0, [X0+2016]
	026 Call 0x1C17CF4
	027 Move X0, 0xADB000
	028 Move X0, [X0+2248]
	029 Call 0x1C17CF4
	030 Move X0, 0xAC5000
	031 Move X0, [X0+1904]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+1686], W8
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object..ctor, X0
	038 Move X0, [X24]
	039 Call 0x1C17F10
	040 Move X24, [X22]
	041 Move X23, [X23]
	042 Move X1, X31
	043 Move X22, X0
	044 Call Object..ctor, X0
	045 Move TEMP, 0x80FF
	046 Not TEMP
	047 Move W9, TEMP
	048 And W8, W21, 1
	049 And W31, W20, W9
	050 Move [X22+16], X24
	051 Move [X22+24], X23
	052 Move [X19+32], W8
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 Move X0, X19
	055 Move [X19+16], X22
	056 Move [X19+36], W8
	057 Call X509KeyUsageExtension.Encode, X0
	058 Move X1, X0
	059 Move X0, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X24, [X31+16]
	065 Move X23, [X31+24]
	066 Move X30, [X31+64]
	067 Move X25, [X31+72]
	068 Call AsnEncodedData.set_RawData, X0, X1
	069 Return 

Method: System.Security.Cryptography.X509Certificates.X509KeyUsageFlags get_KeyUsages()

Disassembly:
	0x03656AD4 MOVZ W8, 0x1
	0x03656AD8 STRB W8, [X23 + 0x63C]
	0x03656ADC MOV X0, X22
	0x03656AE0 MOV X1, X31
	0x03656AE4 BL 0x32277A8
	0x03656AE8 LDR X8, [X20]
	0x03656AEC TBZ X0, 0x0, 0x3656B10
	0x03656AF0 MOV X0, X8
	0x03656AF4 BL 0x1C16F10
	0x03656AF8 MOV X20, X0
	0x03656AFC MOV X1, X21
	0x03656B00 MOV X2, X31
	0x03656B04 MOV X3, X31
	0x03656B08 BL 0x31EBA74
	0x03656B0C B 0x3656B2C
	0x03656B10 MOV X0, X8
	0x03656B14 BL 0x1C16F10
	0x03656B18 MOV X1, X21
	0x03656B1C MOV X2, X22
	0x03656B20 MOV X3, X31
	0x03656B24 MOV X20, X0
	0x03656B28 BL 0x31EBA74
	0x03656B2C CBZ X20, 0x3656F98
	0x03656B30 MOV X0, X20
	0x03656B34 MOV X1, X31
	0x03656B38 BL 0x31ECD5C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+40]
	004 Or W8, W8, 4
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W0, [X0+36]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0
	010 Move X0, 0xACB000
	011 Move X0, [X0+3296]
	012 Call 0x1C17D08
	013 Call 0x1C17F10
	014 Move X19, X0
	015 Move X0, 0xAE7000
	016 Move X0, [X0+2440]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Move X2, X31
	021 Call CryptographicException..ctor, X0, X1
	022 Move X0, 0xAE7000
	023 Move X0, [X0+2880]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Call 0x1C17DEC

Method: System.Void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData)

Disassembly:
	0x0365F22C STP X20, X19, [X31 + 0x30]
	0x0365F230 ADRP X21, 0xD81000
	0x0365F234 LDRB W8, [X21 + 0x6A7]
	0x0365F238 MOV W19, W1
	0x0365F23C MOV X20, X0
	0x0365F240 TBNZ X8, 0x0, 0x365F2A0
	0x0365F244 ADRP X0, 0xA94000
	0x0365F248 LDR X0, [X0 + 0x8F0]
	0x0365F24C BL 0x1C16CF4
	0x0365F250 ADRP X0, 0xA96000
	0x0365F254 LDR X0, [X0 + 0x278]
	0x0365F258 BL 0x1C16CF4
	0x0365F25C ADRP X0, 0xA94000
	0x0365F260 LDR X0, [X0 + 0xDD8]
	0x0365F264 BL 0x1C16CF4
	0x0365F268 ADRP X0, 0xAC7000
	0x0365F26C LDR X0, [X0 + 0x350]
	0x0365F270 BL 0x1C16CF4
	0x0365F274 ADRP X0, 0xAC4000
	0x0365F278 LDR X0, [X0 + 0x650]
	0x0365F27C BL 0x1C16CF4
	0x0365F280 ADRP X0, 0xADD000
	0x0365F284 LDR X0, [X0 + 0x890]
	0x0365F288 BL 0x1C16CF4
	0x0365F28C ADRP X0, 0xADD000
	0x0365F290 LDR X0, [X0 + 0x9B8]
	0x0365F294 BL 0x1C16CF4
	0x0365F298 MOVZ W8, 0x1
	0x0365F29C STRB W8, [X21 + 0x6A7]
	0x0365F2A0 LDR W8, [X20 + 0x38]
	0x0365F2A4 SUB W9, W8, 0x2
	0x0365F2A8 CMP W9, 0x2
	0x0365F2AC B.CC 0x365F2D4
	0x0365F2B0 CMP W8, 0x4
	0x0365F2B4 B.EQ 0x365F2EC
	0x0365F2B8 CMP W8, 0x1
	0x0365F2BC B.NE 0x365F30C
	0x0365F2C0 ADRP X8, 0xA96000
	0x0365F2C4 LDR X8, [X8 + 0x278]
	0x0365F2C8 LDR X8, [X8]
	0x0365F2CC LDR X8, [X8 + 0xB8]
	0x0365F2D0 B 0x365F2F4
	0x0365F2D4 LDR X1, [X20 + 0x18]
	0x0365F2D8 LDP X20, X19, [X31 + 0x30]
	0x0365F2DC LDP X22, X21, [X31 + 0x20]
	0x0365F2E0 LDP X24, X23, [X31 + 0x10]
	0x0365F2E4 LDR X30, [X31], #0x40
	0x0365F2E8 B 0x3651868
	0x0365F2EC ADRP X8, 0xADD000
	0x0365F2F0 LDR X8, [X8 + 0x890]
	0x0365F2F4 LDR X0, [X8]
	0x0365F2F8 LDP X20, X19, [X31 + 0x30]
	0x0365F2FC LDP X22, X21, [X31 + 0x20]
	0x0365F300 LDP X24, X23, [X31 + 0x10]
	0x0365F304 LDR X30, [X31], #0x40
	0x0365F308 RET
	0x0365F30C LDR X8, [X20 + 0x10]
	0x0365F310 CBZ X8, 0x365F408
	0x0365F314 LDR X0, [X8 + 0x10]
	0x0365F318 ADRP X8, 0xAC4000
	0x0365F31C LDR X8, [X8 + 0x650]
	0x0365F320 MOV X2, X31
	0x0365F324 LDR X1, [X8]
	0x0365F328 BL 0x3226EF8
	0x0365F32C TBZ X0, 0x0, 0x365F360
	0x0365F330 LDR X8, [X20 + 0x10]
	0x0365F334 CBZ X8, 0x365F408
	0x0365F338 LDR X1, [X8 + 0x10]
	0x0365F33C ADRP X8, 0xADD000
	0x0365F340 LDR X8, [X8 + 0x9B8]
	0x0365F344 LDP X20, X19, [X31 + 0x30]
	0x0365F348 LDP X22, X21, [X31 + 0x20]
	0x0365F34C LDP X24, X23, [X31 + 0x10]
	0x0365F350 LDR X0, [X8]
	0x0365F354 MOV X2, X31
	0x0365F358 LDR X30, [X31], #0x40
	0x0365F35C B 0x321EFD0
	0x0365F360 ADRP X8, 0xA94000
	0x0365F364 LDR X8, [X8 + 0x8F0]
	0x0365F368 LDR X0, [X8]
	0x0365F36C BL 0x1C16F10
	0x0365F370 MOV X1, X31
	0x0365F374 MOV X21, X0
	0x0365F378 BL 0x3231AC4
	0x0365F37C LDR X8, [X20 + 0x28]
	0x0365F380 CBZ X8, 0x365F408
	0x0365F384 ADRP X23, 0xAC7000
	0x0365F388 ADRP X24, 0xA94000
	0x0365F38C LDR X23, [X23 + 0x350]
	0x0365F390 LDR X24, [X24 + 0xDD8]
	0x0365F394 MOV X22, X31
	0x0365F398 LDR W9, [X8 + 0x18]
	0x0365F39C CMP X22, W9, SXTW
	0x0365F3A0 B.GE 0x365F40C
	0x0365F3A4 CMP X22, X9
	0x0365F3A8 B.CS 0x365F454
	0x0365F3AC LDR X1, [X23]
	0x0365F3B0 ADD X8, X8, X22
	0x0365F3B4 ADD X0, X8, 0x20
	0x0365F3B8 MOV X2, X31
	0x0365F3BC BL 0x3319C4C
	0x0365F3C0 CBZ X21, 0x365F408
	0x0365F3C4 MOV X1, X0
	0x0365F3C8 MOV X0, X21
	0x0365F3CC MOV X2, X31
	0x0365F3D0 BL 0x32333E0
	0x0365F3D4 LDR X8, [X20 + 0x28]
	0x0365F3D8 CBZ X8, 0x365F408
	0x0365F3DC LDR W9, [X8 + 0x18]
	0x0365F3E0 SUB W9, W9, 0x1
	0x0365F3E4 CMP X22, X9
	0x0365F3E8 B.EQ 0x365F400
	0x0365F3EC LDR X1, [X24]
	0x0365F3F0 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD82000
	008 Move W8, [X21+1687]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xADE000
	016 Move X0, [X0+2016]
	017 Call 0x1C17CF4
	018 Move X0, 0xADB000
	019 Move X0, [X0+3880]
	020 Call 0x1C17CF4
	021 Move X0, 0xADB000
	022 Move X0, [X0+2248]
	023 Call 0x1C17CF4
	024 Move X0, 0xAC5000
	025 Move X0, [X0+1904]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1687], W8
	029 Compare X20, 0
	030 JumpIfEqual {106}
	031 Move X8, 0xADB000
	032 Move X8, [X8+3880]
	033 Move X9, [X20]
	034 Move X8, [X8]
	035 Move W11, [X9+304]
	036 Move W10, [X8+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X9, [X9+200]
	039 Add X9, X9, X10
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, 0xADE000
	043 Move X8, [X8+2016]
	044 Move X22, [X20+16]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move X21, X0
	048 Compare X22, 0
	049 JumpIfEqual {53}
	050 Move X0, X21
	051 Move X1, X22
	052 Call Oid..ctor, X0, X1
	053 Move X8, 0xAC5000
	054 Move X9, 0xADB000
	055 Move X8, [X8+1904]
	056 Move X9, [X9+2248]
	057 Move X0, X21
	058 Move X1, X31
	059 Move X22, [X8]
	060 Move X23, [X9]
	061 Call Object..ctor, X0
	062 Move [X21+16], X22
	063 Move [X21+24], X23
	064 Move [X19+16], X21
	065 Move X1, [X20+24]
	066 Move X0, X19
	067 Call AsnEncodedData.set_RawData, X0, X1
	068 Move W8, [X20+32]
	069 Move X1, [X19+24]
	070 Move X0, X19
	071 Move [X19+32], W8
	072 Call X509KeyUsageExtension.Decode, X0, X1
	073 Move [X19+40], W0
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X30, [X31+48]
	079 Move X23, [X31+56]
	080 Return 
	081 Move X0, 0xADE000
	082 Move X0, [X0+2472]
	083 Call 0x1C17D08
	084 Move X1, X31
	085 Call Locale.GetText, X0
	086 Move X19, X0
	087 Move X0, 0xA9D000
	088 Move X0, [X0+1400]
	089 Call 0x1C17D08
	090 Call 0x1C17F10
	091 Move X20, X0
	092 Move X0, 0xADE000
	093 Move X0, [X0+2120]
	094 Call 0x1C17D08
	095 Move X2, X0
	096 Move X0, X20
	097 Move X1, X19
	098 Move X3, X31
	099 Call ArgumentException..ctor, X0, X1, X2
	100 Move X0, 0xADE000
	101 Move X0, [X0+3416]
	102 Call 0x1C17D08
	103 Move X1, X0
	104 Move X0, X20
	105 Call 0x1C17DEC
	106 Move X0, 0xA9A000
	107 Move X0, [X0+1320]
	108 Call 0x1C17D08
	109 Call 0x1C17F10
	110 Move X19, X0
	111 Move X0, 0xADE000
	112 Move X0, [X0+2120]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Move X2, X31
	117 Call ArgumentNullException..ctor, X0, X1
	118 Move X0, 0xADE000
	119 Move X0, [X0+3416]
	120 Call 0x1C17D08
	121 Move X1, X0
	122 Move X0, X19
	123 Call 0x1C17DEC

Method: System.Security.Cryptography.X509Certificates.X509KeyUsageFlags GetValidFlags(System.Security.Cryptography.X509Certificates.X509KeyUsageFlags flags)

Disassembly:
	0x0365F0C0 ADRP X0, 0xADD000
	0x0365F0C4 LDR X0, [X0 + 0x848]
	0x0365F0C8 BL 0x1C16D08
	0x0365F0CC MOV X2, X0

ISIL:
	001 Move TEMP, 0x80FF
	002 Not TEMP
	003 Move W8, TEMP
	004 And W31, W1, W8
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Return X0

Method: System.Security.Cryptography.AsnDecodeStatus Decode(System.Byte[] extension)

Disassembly:
	0x0365EE34 LDR X0, [X0 + 0x578]
	0x0365EE38 BL 0x1C16D08
	0x0365EE3C BL 0x1C16F10
	0x0365EE40 MOV X19, X0
	0x0365EE44 ADRP X0, 0xADE000
	0x0365EE48 LDR X0, [X0 + 0xDA8]
	0x0365EE4C BL 0x1C16D08
	0x0365EE50 MOV X1, X0
	0x0365EE54 MOV X0, X19
	0x0365EE58 MOV X2, X31
	0x0365EE5C BL 0x3314A68
	0x0365EE60 ADRP X0, 0xADE000
	0x0365EE64 LDR X0, [X0 + 0xDB8]
	0x0365EE68 BL 0x1C16D08
	0x0365EE6C MOV X1, X0
	0x0365EE70 MOV X0, X19
	0x0365EE74 BL 0x1C16DEC
	0x0365EE78 STP X30, X25, [X31 - 0x40]!
	0x0365EE7C STP X24, X23, [X31 + 0x10]
	0x0365EE80 STP X22, X21, [X31 + 0x20]
	0x0365EE84 STP X20, X19, [X31 + 0x30]
	0x0365EE88 ADRP X20, 0xD82000
	0x0365EE8C LDRB W8, [X20 + 0x6A4]
	0x0365EE90 MOV X19, X0
	0x0365EE94 TBNZ X8, 0x0, 0x365EEAC
	0x0365EE98 ADRP X0, 0xA95000
	0x0365EE9C LDR X0, [X0 + 0x618]
	0x0365EEA0 BL 0x1C16CF4
	0x0365EEA4 MOVZ W8, 0x1
	0x0365EEA8 STRB W8, [X20 + 0x6A4]
	0x0365EEAC CBZ X19, 0x365EF48
	0x0365EEB0 ADRP X8, 0xA95000
	0x0365EEB4 LDR X8, [X8 + 0x618]
	0x0365EEB8 LDR W20, [X19 + 0x10]
	0x0365EEBC LDR X0, [X8]
	0x0365EEC0 SBFM W22, W20, 0x1, 0x1F
	0x0365EEC4 MOV W1, W22
	0x0365EEC8 BL 0x1C16D6C
	0x0365EECC CMP W20, 0x2
	0x0365EED0 MOV X20, X0
	0x0365EED4 B.LT 0x365EF4C
	0x0365EED8 CMP W22, 0x1
	0x0365EEDC MOV X24, X31
	0x0365EEE0 MOV W21, W31
	0x0365EEE4 CSINC W23, W22, W31, GT
	0x0365EEE8 ADD X25, X20, 0x20
	0x0365EEEC MOV X0, X19
	0x0365EEF0 MOV W1, W21
	0x0365EEF4 MOV X2, X31
	0x0365EEF8 BL 0x3222A1C
	0x0365EEFC ADD W21, W21, 0x1
	0x0365EF00 MOV W22, W0
	0x0365EF04 MOV X0, X19
	0x0365EF08 MOV W1, W21
	0x0365EF0C MOV X2, X31
	0x0365EF10 BL 0x3222A1C
	0x0365EF14 MOV W1, W0
	0x0365EF18 MOV W0, W22
	0x0365EF1C BL 0x365F184
	0x0365EF20 CBZ X20, 0x365EF64
	0x0365EF24 LDR W8, [X20 + 0x18]
	0x0365EF28 CMP X24, X8
	0x0365EF2C B.CS 0x365EF68
	0x0365EF30 STRB W0, [X25, X24, LSL]
	0x0365EF34 ADD X24, X24, 0x1
	0x0365EF38 CMP X23, X24
	0x0365EF3C ADD W21, W21, 0x1
	0x0365EF40 B.NE 0x365EEEC
	0x0365EF44 B 0x365EF4C
	0x0365EF48 MOV X20, X31
	0x0365EF4C MOV X0, X20
	0x0365EF50 LDP X20, X19, [X31 + 0x30]
	0x0365EF54 LDP X22, X21, [X31 + 0x20]
	0x0365EF58 LDP X24, X23, [X31 + 0x10]
	0x0365EF5C LDP X30, X25, [X31], #0x40
	0x0365EF60 RET
	0x0365EF64 BL 0x1C16F20
	0x0365EF68 BL 0x1C16F28
	0x0365EF6C AND W3, W2, 0x1
	0x0365EF70 MOV W2, W31
	0x0365EF74 B 0x365455C
	0x0365EF78 STP X30, X23, [X31 - 0x30]!
	0x0365EF7C STP X22, X21, [X31 + 0x10]
	0x0365EF80 STP X20, X19, [X31 + 0x20]
	0x0365EF84 ADRP X21, 0xD82000
	0x0365EF88 LDRB W8, [X21 + 0x6A3]
	0x0365EF8C MOV X20, X1
	0x0365EF90 MOV X19, X0
	0x0365EF94 TBNZ X8, 0x0, 0x365EFD0
	0x0365EF98 ADRP X0, 0xADE000
	0x0365EF9C LDR X0, [X0 + 0x7E0]
	0x0365EFA0 BL 0x1C16CF4
	0x0365EFA4 ADRP X0, 0xADB000
	0x0365EFA8 LDR X0, [X0 + 0xF28]
	0x0365EFAC BL 0x1C16CF4
	0x0365EFB0 ADRP X0, 0xAC5000
	0x0365EFB4 LDR X0, [X0 + 0x650]
	0x0365EFB8 BL 0x1C16CF4
	0x0365EFBC ADRP X0, 0xADB000
	0x0365EFC0 LDR X0, [X0 + 0x910]
	0x0365EFC4 BL 0x1C16CF4
	0x0365EFC8 MOVZ W8, 0x1
	0x0365EFCC STRB W8, [X21 + 0x6A3]
	0x0365EFD0 CBZ X20, 0x365F0F8
	0x0365EFD4 ADRP X8, 0xADB000
	0x0365EFD8 LDR X8, [X8 + 0xF28]
	0x0365EFDC LDR X9, [X20]
	0x0365EFE0 LDR X8, [X8]
	0x0365EFE4 LDRB W11, [X9 + 0x130]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xD83000
	008 Move W8, [X20+1688]
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAC3000
	016 Move X0, [X0+2968]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1688], W8
	020 Compare X21, 0
	021 JumpIfEqual {92}
	022 Move X8, [X21+24]
	023 Compare X8, 0
	024 JumpIfEqual {92}
	025 Compare W8, 0
	026 JumpIfEqual {74}
	027 Move W9, [X21+32]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W0, 4
	031 Move W0, 2
	032 Move W0, 3
	033 Move X8, 0xAC3000
	034 Move X8, [X8+2968]
	035 Move X0, [X8]
	036 Call 0x1C17F10
	037 Move X20, X0
	038 Move X1, X21
	039 Move X2, X31
	040 Call ASN1..ctor, X0, X1
	041 Compare X20, 0
	042 JumpIfEqual {75}
	043 Move W21, W31
	044 Move W22, 33
	045 Move X0, X20
	046 Move X1, X31
	047 Call ASN1.get_Value, X0
	048 Compare X0, 0
	049 JumpIfEqual {71}
	050 NotImplemented "Instruction LDRSW not yet implemented."
	051 Subtract X23, X22, 32
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, X20
	054 Move X1, X31
	055 Call ASN1.get_Value, X0
	056 Compare X0, 0
	057 JumpIfEqual {72}
	058 Move W8, [X0+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, [X0]
	061 Add X22, X22, 1
	062 NotImplemented "Instruction BFM not yet implemented."
	063 Move W21, W8
	064 Move TEMP, 0x80FF
	065 Not TEMP
	066 Move W8, TEMP
	067 And W31, W21, W8
	068 Move W0, W31
	069 NotImplemented "Instruction CSEL not yet implemented."
	070 Move [X19+36], W8
	071 Call 0x1C17F20
	072 Call 0x1C17F20
	073 Call 0x1C17F28
	074 Call 0x1C17F28
	075 Call 0x1C17F20
	076 Move X19, X0
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, X19
	079 Call 0x3EB2AD0
	080 Move X19, X0
	081 Move X0, 0xA9C000
	082 Move X0, [X0+3264]
	083 Call 0x1C17D08
	084 Move X8, [X19]
	085 Move X1, [X8]
	086 Call 0x1C18270
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {100}
	091 Call 0x3EB2AE0
	092 Move W0, 1
	093 Move X20, [X31+32]
	094 Move X19, [X31+40]
	095 Move X22, [X31+16]
	096 Move X21, [X31+24]
	097 Move X30, [X31+48]
	098 Move X23, [X31+56]
	099 Return X0
	100 Move W0, 8
	101 Call 0x3EB2AF0
	102 Move X8, [X19]
	103 Move [X0], X8
	104 Move X1, 0x857000
	105 Add X1, X1, 3672
	106 Move X2, X31
	107 Call 0x3EB2B00
	108 Move X19, X0
	109 Call 0x3EB2AE0
	110 Move X0, X19
	111 Call 0x1D2D690
	112 Call 0x1991590

Method: System.Byte[] Encode()

Disassembly:
	0x0365F0D0 MOV X0, X20
	0x0365F0D4 MOV X1, X19
	0x0365F0D8 MOV X3, X31
	0x0365F0DC BL 0x330E16C
	0x0365F0E0 ADRP X0, 0xADD000
	0x0365F0E4 LDR X0, [X0 + 0xDC0]
	0x0365F0E8 BL 0x1C16D08
	0x0365F0EC MOV X1, X0
	0x0365F0F0 MOV X0, X20
	0x0365F0F4 BL 0x1C16DEC
	0x0365F0F8 ADRP X0, 0xA99000
	0x0365F0FC LDR X0, [X0 + 0x528]
	0x0365F100 BL 0x1C16D08
	0x0365F104 BL 0x1C16F10
	0x0365F108 MOV X19, X0
	0x0365F10C ADRP X0, 0xADD000
	0x0365F110 LDR X0, [X0 + 0x848]
	0x0365F114 BL 0x1C16D08
	0x0365F118 MOV X1, X0
	0x0365F11C MOV X0, X19
	0x0365F120 MOV X2, X31
	0x0365F124 BL 0x330E100
	0x0365F128 ADRP X0, 0xADD000
	0x0365F12C LDR X0, [X0 + 0xDC0]
	0x0365F130 BL 0x1C16D08
	0x0365F134 MOV X1, X0
	0x0365F138 MOV X0, X19
	0x0365F13C BL 0x1C16DEC
	0x0365F140 SUB W8, W0, 0x61
	0x0365F144 AND W8, W8, 0xFFFF
	0x0365F148 CMP W8, 0x5
	0x0365F14C B.LS 0x365F174
	0x0365F150 SUB W8, W0, 0x41
	0x0365F154 AND W8, W8, 0xFFFF
	0x0365F158 CMP W8, 0x5
	0x0365F15C B.LS 0x365F17C
	0x0365F160 SUB W8, W0, 0x30
	0x0365F164 AND W9, W8, 0xFFFF
	0x0365F168 CMP W9, 0x9
	0x0365F16C CSINV W0, W8, W31, LS
	0x0365F170 RET
	0x0365F174 SUB W0, W0, 0x57
	0x0365F178 RET
	0x0365F17C SUB W0, W0, 0x37
	0x0365F180 RET
	0x0365F184 SUB W8, W0, 0x61
	0x0365F188 AND W8, W8, 0xFFFF
	0x0365F18C CMP W8, 0x5
	0x0365F190 B.LS 0x365F1B8
	0x0365F194 SUB W8, W0, 0x41
	0x0365F198 AND W8, W8, 0xFFFF
	0x0365F19C CMP W8, 0x5
	0x0365F1A0 B.LS 0x365F1C0
	0x0365F1A4 SUB W8, W0, 0x30
	0x0365F1A8 AND W9, W8, 0xFFFF
	0x0365F1AC CMP W9, 0x9
	0x0365F1B0 B.LS 0x365F1C4
	0x0365F1B4 B 0x365F20C
	0x0365F1B8 SUB W8, W0, 0x57
	0x0365F1BC B 0x365F1D0
	0x0365F1C0 SUB W8, W0, 0x37
	0x0365F1C4 ORN W9, W31, W8, 0x0
	0x0365F1C8 ANDS W31, W9, 0xFF
	0x0365F1CC B.EQ 0x365F20C
	0x0365F1D0 SUB W9, W1, 0x61
	0x0365F1D4 AND W9, W9, 0xFFFF
	0x0365F1D8 CMP W9, 0x5
	0x0365F1DC B.LS 0x365F204
	0x0365F1E0 SUB W9, W1, 0x41
	0x0365F1E4 AND W9, W9, 0xFFFF
	0x0365F1E8 CMP W9, 0x5
	0x0365F1EC B.LS 0x365F214
	0x0365F1F0 SUB W9, W1, 0x30
	0x0365F1F4 AND W10, W9, 0xFFFF
	0x0365F1F8 CMP W10, 0x9
	0x0365F1FC CSINV W9, W9, W31, LS
	0x0365F200 B 0x365F218
	0x0365F204 SUB W9, W1, 0x57
	0x0365F208 B 0x365F218
	0x0365F20C MOVZ W0, 0xFF
	0x0365F210 RET
	0x0365F214 SUB W9, W1, 0x37
	0x0365F218 ORR W0, W9, W8, 0x4
	0x0365F21C RET
	0x0365F220 STR X30, [X31 - 0x40]!
	0x0365F224 STP X24, X23, [X31 + 0x10]
	0x0365F228 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD82000
	006 Move W8, [X20+1689]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xAC2000
	013 Move X0, [X0+2968]
	014 Call 0x1C17CF4
	015 Move X0, 0xA95000
	016 Move X0, [X0+1560]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1689], W8
	020 Move X8, 0xA95000
	021 Move W19, [X19+36]
	022 Move X8, [X8+1560]
	023 Compare W19, 0
	024 JumpIfEqual {42}
	025 NotImplemented "Instruction SBFM not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSEL not yet implemented."
	028 Move TEMP, X9
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {52}
	032 Move W10, W31
	033 Add W21, W10, 1
	034 Move TEMP, X9
	035 And TEMP, TEMP, 2
	036 Compare TEMP, 2
	037 JumpIfEqual {53}
	038 And W10, W10, 255
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction SBFM not yet implemented."
	041 Move W10, W21
	042 Move X0, [X8]
	043 Move W1, 1
	044 Call 0x1C17D6C
	045 Compare X0, 0
	046 JumpIfEqual {103}
	047 Move W8, [X0+24]
	048 Move X20, X0
	049 Compare W8, 0
	050 JumpIfEqual {102}
	051 Move [X20+32], W31
	052 Move W21, W31
	053 Move X0, [X8]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W1, 3
	056 Call 0x1C17D6C
	057 Compare X0, 0
	058 JumpIfEqual {103}
	059 Move W8, [X0+24]
	060 Move X20, X0
	061 Compare W8, 0
	062 JumpIfEqual {102}
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X20+32], W21
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X20+33], W19
	067 Move W8, W19
	068 ShiftRight W8, 8
	069 And W8, W8, 0x7FFFFFFF
	070 Move [X20+34], W8
	071 Move W1, 2
	072 Call 0x1C17D6C
	073 Compare X0, 0
	074 JumpIfEqual {103}
	075 Move W8, [X0+24]
	076 Move X20, X0
	077 Compare W8, 0
	078 JumpIfEqual {102}
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move [X20+32], W21
	081 Move [X20+33], W19
	082 Move X8, 0xAC2000
	083 Move X8, [X8+2968]
	084 Move X0, [X8]
	085 Call 0x1C17F10
	086 Move W1, 3
	087 Move X2, X20
	088 Move X3, X31
	089 Move X19, X0
	090 Call ASN1..ctor, X0, X1, X2
	091 Compare X19, 0
	092 JumpIfEqual {103}
	093 Move X8, [X19]
	094 Move X0, X19
	095 Move X20, [X31+16]
	096 Move X19, [X31+24]
	097 Move X2, [X8+376]
	098 Move X1, [X8+384]
	099 Move X30, [X31+32]
	100 Move X21, [X31+40]
	101 CallNoReturn X2
	102 Call 0x1C17F28
	103 Call 0x1C17F20

Method: System.String ToString(System.Boolean multiLine)

Disassembly:
	0x0365F3F4 MOV X2, X31
	0x0365F3F8 BL 0x32333E0
	0x0365F3FC LDR X8, [X20 + 0x28]
	0x0365F400 ADD X22, X22, 0x1
	0x0365F404 CBNZ X8, 0x365F398
	0x0365F408 BL 0x1C16F20
	0x0365F40C TBZ X19, 0x0, 0x365F430
	0x0365F410 MOV X0, X31
	0x0365F414 BL 0x33C1548
	0x0365F418 CBZ X21, 0x365F408
	0x0365F41C MOV X1, X0
	0x0365F420 MOV X0, X21
	0x0365F424 MOV X2, X31
	0x0365F428 BL 0x32333E0
	0x0365F42C B 0x365F434
	0x0365F430 CBZ X21, 0x365F408
	0x0365F434 LDR X8, [X21]
	0x0365F438 MOV X0, X21
	0x0365F43C LDP X20, X19, [X31 + 0x30]
	0x0365F440 LDP X22, X21, [X31 + 0x20]
	0x0365F444 LDP X2, X1, [X8 + 0x168]
	0x0365F448 LDP X24, X23, [X31 + 0x10]
	0x0365F44C LDR X30, [X31], #0x40
	0x0365F450 BR X2
	0x0365F454 BL 0x1C16F28
	0x0365F458 STR X30, [X31 - 0x30]!
	0x0365F45C STP X22, X21, [X31 + 0x10]
	0x0365F460 STP X20, X19, [X31 + 0x20]
	0x0365F464 ADRP X22, 0xD81000
	0x0365F468 ADRP X21, 0xA94000
	0x0365F46C LDRB W8, [X22 + 0x6A8]
	0x0365F470 LDR X21, [X21 + 0xB58]
	0x0365F474 MOV W20, W1
	0x0365F478 MOV X19, X0
	0x0365F47C TBNZ X8, 0x0, 0x365F494
	0x0365F480 ADRP X0, 0xA94000
	0x0365F484 LDR X0, [X0 + 0xB58]
	0x0365F488 BL 0x1C16CF4
	0x0365F48C MOVZ W8, 0x1
	0x0365F490 STRB W8, [X22 + 0x6A8]
	0x0365F494 MOV X0, X19
	0x0365F498 MOV X1, X31
	0x0365F49C AND W20, W20, 0x1
	0x0365F4A0 BL 0x33A51F0
	0x0365F4A4 LDR X0, [X21]
	0x0365F4A8 ADD X1, X31, 0xC
	0x0365F4AC STRB W20, [X31 + 0xC]
	0x0365F4B0 BL 0x1C16E04
	0x0365F4B4 STR X0, [X19 + 0x10]
	0x0365F4B8 LDP X20, X19, [X31 + 0x20]
	0x0365F4BC LDP X22, X21, [X31 + 0x10]
	0x0365F4C0 LDR X30, [X31], #0x30
	0x0365F4C4 RET
	0x0365F4C8 STR X30, [X31 - 0x20]!
	0x0365F4CC STP X20, X19, [X31 + 0x10]
	0x0365F4D0 MOV X19, X1
	0x0365F4D4 MOV X1, X31
	0x0365F4D8 MOV X20, X0
	0x0365F4DC BL 0x33A51F0
	0x0365F4E0 STR X19, [X20 + 0x10]
	0x0365F4E4 LDP X20, X19, [X31 + 0x10]
	0x0365F4E8 LDR X30, [X31], #0x20
	0x0365F4EC RET
	0x0365F4F0 LDR X0, [X0 + 0x10]
	0x0365F4F4 RET
	0x0365F4F8 STP X30, X21, [X31 - 0x20]!
	0x0365F4FC STP X20, X19, [X31 + 0x10]
	0x0365F500 ADRP X21, 0xD81000
	0x0365F504 LDRB W8, [X21 + 0x6A9]
	0x0365F508 MOV X20, X1
	0x0365F50C MOV X19, X0
	0x0365F510 TBNZ X8, 0x0, 0x365F528
	0x0365F514 ADRP X0, 0xADD000
	0x0365F518 LDR X0, [X0 + 0xDC8]
	0x0365F51C BL 0x1C16CF4
	0x0365F520 MOVZ W8, 0x1
	0x0365F524 STRB W8, [X21 + 0x6A9]
	0x0365F528 CMP X19, X20
	0x0365F52C B.EQ 0x365F574
	0x0365F530 CBZ X20, 0x365F56C
	0x0365F534 ADRP X8, 0xADD000
	0x0365F538 LDR X8, [X8 + 0xDC8]
	0x0365F53C LDR X9, [X20]
	0x0365F540 LDR X8, [X8]
	0x0365F544 LDRB W11, [X9 + 0x130]
	0x0365F548 LDRB W10, [X8 + 0x130]
	0x0365F54C CMP W11, W10
	0x0365F550 B.CC 0x365F56C
	0x0365F554 LDR X9, [X9 + 0xC8]
	0x0365F558 ADD X9, X9, X10, 0x3, LSL
	0x0365F55C LDUR X9, [X9 - 0x8]
	0x0365F560 CMP X9, X8
	0x0365F564 CSEL X20, X20, X31, EQ
	0x0365F568 B.EQ 0x365F584
	0x0365F56C MOV W0, W31
	0x0365F570 B 0x365F578
	0x0365F574 MOVZ W0, 0x1
	0x0365F578 LDP X20, X19, [X31 + 0x10]
	0x0365F57C LDP X30, X21, [X31], #0x20
	0x0365F580 RET
	0x0365F584 LDR X8, [X19]
	0x0365F588 MOV X0, X19
	0x0365F58C LDP X9, X1, [X8 + 0x178]
	0x0365F590 BLR X9
	0x0365F594 CBZ X0, 0x365F5E0
	0x0365F598 LDR X8, [X19]
	0x0365F59C MOV X0, X19
	0x0365F5A0 LDP X9, X1, [X8 + 0x178]
	0x0365F5A4 BLR X9
	0x0365F5A8 CBZ X20, 0x365F600
	0x0365F5AC LDR X8, [X20]
	0x0365F5B0 MOV X19, X0
	0x0365F5B4 MOV X0, X20
	0x0365F5B8 LDP X9, X1, [X8 + 0x178]
	0x0365F5BC BLR X9
	0x0365F5C0 CBZ X19, 0x365F600
	0x0365F5C4 LDR X8, [X19]
	0x0365F5C8 MOV X1, X0
	0x0365F5CC MOV X0, X19
	0x0365F5D0 LDP X20, X19, [X31 + 0x10]
	0x0365F5D4 LDP X3, X2, [X8 + 0x138]
	0x0365F5D8 LDP X30, X21, [X31], #0x20
	0x0365F5DC BR X3
	0x0365F5E0 CBZ X20, 0x365F600
	0x0365F5E4 LDR X8, [X20]
	0x0365F5E8 MOV X0, X20
	0x0365F5EC LDP X9, X1, [X8 + 0x178]
	0x0365F5F0 BLR X9
	0x0365F5F4 CMP X0, 0x0
	0x0365F5F8 CSET W0, EQ
	0x0365F5FC B 0x365F578
	0x0365F600 BL 0x1C16F20
	0x0365F604 MOV X1, X31
	0x0365F608 B 0x33A861C
	0x0365F60C STR X30, [X31 - 0x20]!
	0x0365F610 STP X20, X19, [X31 + 0x10]
	0x0365F614 MOV W19, W1
	0x0365F618 MOV X1, X31
	0x0365F61C MOV X20, X0
	0x0365F620 BL 0x33A51F0
	0x0365F624 STR W19, [X20 + 0x10]
	0x0365F628 LDP X20, X19, [X31 + 0x10]
	0x0365F62C LDR X30, [X31], #0x20
	0x0365F630 RET
	0x0365F634 STP X30, X21, [X31 - 0x20]!
	0x0365F638 STP X20, X19, [X31 + 0x10]
	0x0365F63C ADRP X21, 0xD81000
	0x0365F640 LDRB W8, [X21 + 0x6AA]
	0x0365F644 MOV X20, X1
	0x0365F648 MOV X19, X0
	0x0365F64C TBNZ X8, 0x0, 0x365F664
	0x0365F650 ADRP X0, 0xADD000
	0x0365F654 LDR X0, [X0 + 0xDD0]
	0x0365F658 BL 0x1C16CF4
	0x0365F65C MOVZ W8, 0x1
	0x0365F660 STRB W8, [X21 + 0x6AA]
	0x0365F664 CMP X19, X20
	0x0365F668 B.EQ 0x365F694
	0x0365F66C CBZ X20, 0x365F68C
	0x0365F670 ADRP X8, 0xADD000
	0x0365F674 LDR X8, [X8 + 0xDD0]
	0x0365F678 LDR X9, [X20]
	0x0365F67C LDR X8, [X8]
	0x0365F680 CMP X9, X8
	0x0365F684 CSEL X8, X20, X31, EQ
	0x0365F688 B.EQ 0x365F69C
	0x0365F68C MOV W0, W31
	0x0365F690 B 0x365F6B0
	0x0365F694 MOVZ W0, 0x1
	0x0365F698 B 0x365F6B0
	0x0365F69C CBZ X8, 0x365F6BC
	0x0365F6A0 LDR W8, [X8 + 0x10]
	0x0365F6A4 LDR W9, [X19 + 0x10]
	0x0365F6A8 CMP W8, W9
	0x0365F6AC CSET W0, EQ
	0x0365F6B0 LDP X20, X19, [X31 + 0x10]
	0x0365F6B4 LDP X30, X21, [X31], #0x20
	0x0365F6B8 RET
	0x0365F6BC BL 0x1C16F20
	0x0365F6C0 MOV X1, X31
	0x0365F6C4 B 0x33A861C
	0x0365F6C8 STR X30, [X31 - 0x20]!
	0x0365F6CC STP X20, X19, [X31 + 0x10]
	0x0365F6D0 AND W20, W1, 0x1
	0x0365F6D4 MOV X1, X31
	0x0365F6D8 MOV X19, X0
	0x0365F6DC BL 0x33A51F0
	0x0365F6E0 STRB W20, [X19 + 0x10]
	0x0365F6E4 LDP X20, X19, [X31 + 0x10]
	0x0365F6E8 LDR X30, [X31], #0x20
	0x0365F6EC RET
	0x0365F6F0 LDRB W0, [X0 + 0x10]
	0x0365F6F4 RET
	0x0365F6F8 SUB X31, X31, 0x30
	0x0365F6FC STP X30, X21, [X31 + 0x10]
	0x0365F700 STP X20, X19, [X31 + 0x20]
	0x0365F704 ADRP X21, 0xD81000
	0x0365F708 LDRB W8, [X21 + 0x6AB]
	0x0365F70C MOV X20, X1
	0x0365F710 MOV X19, X0
	0x0365F714 TBNZ X8, 0x0, 0x365F750
	0x0365F718 ADRP X0, 0xADD000
	0x0365F71C LDR X0, [X0 + 0xDD8]
	0x0365F720 BL 0x1C16CF4
	0x0365F724 ADRP X0, 0xA9E000
	0x0365F728 LDR X0, [X0 + 0x170]
	0x0365F72C BL 0x1C16CF4
	0x0365F730 ADRP X0, 0xA98000
	0x0365F734 LDR X0, [X0 + 0xFD8]
	0x0365F738 BL 0x1C16CF4
	0x0365F73C ADRP X0, 0xA98000
	0x0365F740 LDR X0, [X0 + 0xBF0]
	0x0365F744 BL 0x1C16CF4
	0x0365F748 MOVZ W8, 0x1
	0x0365F74C STRB W8, [X21 + 0x6AB]
	0x0365F750 CMP X19, X20
	0x0365F754 B.EQ 0x365F780
	0x0365F758 CBZ X20, 0x365F774
	0x0365F75C ADRP X8, 0xADD000
	0x0365F760 LDR X8, [X8 + 0xDD8]
	0x0365F764 LDR X9, [X20]
	0x0365F768 LDR X8, [X8]
	0x0365F76C CMP X9, X8
	0x0365F770 B.EQ 0x365F788
	0x0365F774 MOV W8, W31
	0x0365F778 MOV W9, W31
	0x0365F77C B 0x365F7B8
	0x0365F780 MOVZ W0, 0x1
	0x0365F784 B 0x365F7CC
	0x0365F788 ADRP X8, 0xA98000
	0x0365F78C LDRB W1, [X20 + 0x10]
	0x0365F790 LDR X8, [X8 + 0xFD8]
	0x0365F794 ADD X0, X31, 0xC
	0x0365F798 STRH W31, [X31 + 0xC]
	0x0365F79C LDR X2, [X8]
	0x0365F7A0 BL 0x242D570
	0x0365F7A4 LDRH W8, [X31 + 0xC]
	0x0365F7A8 CMP W8, 0xFF
	0x0365F7AC CSET W9, HI
	0x0365F7B0 ANDS W31, W8, 0xFF
	0x0365F7B4 CSET W8, NE
	0x0365F7B8 LDRB W10, [X19 + 0x10]
	0x0365F7BC CMP W10, 0x0
	0x0365F7C0 CSET W10, EQ
	0x0365F7C4 EOR W9, W9, W10, 0x0
	0x0365F7C8 AND W0, W8, W9, 0x0
	0x0365F7CC LDP X20, X19, [X31 + 0x20]
	0x0365F7D0 LDP X30, X21, [X31 + 0x10]
	0x0365F7D4 ADD X31, X31, 0x30
	0x0365F7D8 RET
	0x0365F7DC SUB X31, X31, 0x30
	0x0365F7E0 STP X30, X21, [X31 + 0x10]
	0x0365F7E4 STP X20, X19, [X31 + 0x20]
	0x0365F7E8 ADRP X21, 0xD81000
	0x0365F7EC ADRP X20, 0xA94000
	0x0365F7F0 LDRB W8, [X21 + 0x6AC]
	0x0365F7F4 LDR X20, [X20 + 0xB58]
	0x0365F7F8 MOV X19, X0
	0x0365F7FC TBNZ X8, 0x0, 0x365F814
	0x0365F800 ADRP X0, 0xA94000
	0x0365F804 LDR X0, [X0 + 0xB58]
	0x0365F808 BL 0x1C16CF4
	0x0365F80C MOVZ W8, 0x1
	0x0365F810 STRB W8, [X21 + 0x6AC]
	0x0365F814 LDRB W8, [X19 + 0x10]
	0x0365F818 LDR X0, [X20]
	0x0365F81C STRB W8, [X31 + 0xC]
	0x0365F820 LDR W8, [X0 + 0xE0]
	0x0365F824 CBNZ W8, 0x365F82C
	0x0365F828 BL 0x1C16DFC
	0x0365F82C ADD X0, X31, 0xC
	0x0365F830 MOV X1, X31
	0x0365F834 BL 0x33176B4
	0x0365F838 LDP X20, X19, [X31 + 0x20]
	0x0365F83C LDP X30, X21, [X31 + 0x10]
	0x0365F840 ADD X31, X31, 0x30
	0x0365F844 RET
	0x0365F848 STR X30, [X31 - 0x20]!
	0x0365F84C STP X20, X19, [X31 + 0x10]
	0x0365F850 ADRP X19, 0xD81000
	0x0365F854 ADRP X20, 0xADD000
	0x0365F858 LDRB W8, [X19 + 0x6AD]
	0x0365F85C LDR X20, [X20 + 0xDD8]
	0x0365F860 TBNZ X8, 0x0, 0x365F878
	0x0365F864 ADRP X0, 0xADD000
	0x0365F868 LDR X0, [X0 + 0xDD8]
	0x0365F86C BL 0x1C16CF4
	0x0365F870 MOVZ W8, 0x1
	0x0365F874 STRB W8, [X19 + 0x6AD]
	0x0365F878 LDR X0, [X20]
	0x0365F87C BL 0x1C16F10
	0x0365F880 MOV X1, X31
	0x0365F884 MOV X19, X0
	0x0365F888 BL 0x33A51F0
	0x0365F88C MOVZ W8, 0x1
	0x0365F890 STRB W8, [X19 + 0x10]
	0x0365F894 LDR X8, [X20]
	0x0365F898 LDR X8, [X8 + 0xB8]
	0x0365F89C STR X19, [X8]
	0x0365F8A0 LDR X0, [X20]
	0x0365F8A4 BL 0x1C16F10
	0x0365F8A8 MOV X1, X31
	0x0365F8AC MOV X19, X0
	0x0365F8B0 BL 0x33A51F0
	0x0365F8B4 STRB W31, [X19 + 0x10]
	0x0365F8B8 LDR X8, [X20]
	0x0365F8BC LDR X8, [X8 + 0xB8]
	0x0365F8C0 LDR X9, [X8]
	0x0365F8C4 STP X19, X9, [X8 + 0x8]
	0x0365F8C8 LDP X20, X19, [X31 + 0x10]
	0x0365F8CC LDR X30, [X31], #0x20
	0x0365F8D0 RET
	0x0365F8D4 STP X30, X21, [X31 - 0x20]!
	0x0365F8D8 STP X20, X19, [X31 + 0x10]
	0x0365F8DC ADRP X20, 0xD81000
	0x0365F8E0 ADRP X21, 0xA96000
	0x0365F8E4 LDRB W8, [X20 + 0x6AE]
	0x0365F8E8 LDR X21, [X21 + 0x278]
	0x0365F8EC MOV X19, X0
	0x0365F8F0 TBNZ X8, 0x0, 0x365F908
	0x0365F8F4 ADRP X0, 0xA96000
	0x0365F8F8 LDR X0, [X0 + 0x278]
	0x0365F8FC BL 0x1C16CF4
	0x0365F900 MOVZ W8, 0x1
	0x0365F904 STRB W8, [X20 + 0x6AE]
	0x0365F908 LDR X8, [X21]
	0x0365F90C MOV X0, X19
	0x0365F910 MOV X1, X31
	0x0365F914 LDR X8, [X8 + 0xB8]
	0x0365F918 LDR X20, [X8]
	0x0365F91C BL 0x33A51F0
	0x0365F920 STR X20, [X19 + 0x10]
	0x0365F924 LDP X20, X19, [X31 + 0x10]
	0x0365F928 LDP X30, X21, [X31], #0x20
	0x0365F92C RET
	0x0365F930 STR X30, [X31 - 0x20]!
	0x0365F934 STP X20, X19, [X31 + 0x10]
	0x0365F938 MOV X19, X1
	0x0365F93C MOV X1, X31
	0x0365F940 MOV X20, X0
	0x0365F944 BL 0x33A51F0
	0x0365F948 STR X19, [X20 + 0x10]
	0x0365F94C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD82000
	007 Move W8, [X21+1690]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {73}
	014 Move X0, 0xA95000
	015 Move X0, [X0+2288]
	016 Call 0x1C17CF4
	017 Move X0, 0xA97000
	018 Move X0, [X0+632]
	019 Call 0x1C17CF4
	020 Move X0, 0xADE000
	021 Move X0, [X0+3424]
	022 Call 0x1C17CF4
	023 Move X0, 0xADE000
	024 Move X0, [X0+3432]
	025 Call 0x1C17CF4
	026 Move X0, 0xA95000
	027 Move X0, [X0+3544]
	028 Call 0x1C17CF4
	029 Move X0, 0xADE000
	030 Move X0, [X0+3440]
	031 Call 0x1C17CF4
	032 Move X0, 0xADE000
	033 Move X0, [X0+3448]
	034 Call 0x1C17CF4
	035 Move X0, 0xAC8000
	036 Move X0, [X0+848]
	037 Call 0x1C17CF4
	038 Move X0, 0xA95000
	039 Move X0, [X0+2104]
	040 Call 0x1C17CF4
	041 Move X0, 0xADE000
	042 Move X0, [X0+3456]
	043 Call 0x1C17CF4
	044 Move X0, 0xADE000
	045 Move X0, [X0+3464]
	046 Call 0x1C17CF4
	047 Move X0, 0xADE000
	048 Move X0, [X0+3472]
	049 Call 0x1C17CF4
	050 Move X0, 0xA96000
	051 Move X0, [X0+1544]
	052 Call 0x1C17CF4
	053 Move X0, 0xADE000
	054 Move X0, [X0+3480]
	055 Call 0x1C17CF4
	056 Move X0, 0xADE000
	057 Move X0, [X0+2192]
	058 Call 0x1C17CF4
	059 Move X0, 0xA96000
	060 Move X0, [X0+1552]
	061 Call 0x1C17CF4
	062 Move X0, 0xADE000
	063 Move X0, [X0+2488]
	064 Call 0x1C17CF4
	065 Move X0, 0xAC5000
	066 Move X0, [X0+1904]
	067 Call 0x1C17CF4
	068 Move X0, 0xADE000
	069 Move X0, [X0+3488]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X21+1690], W8
	073 Move W8, [X20+40]
	074 Subtract W9, W8, 2
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X8, 0xA97000
	079 Move X8, [X8+632]
	080 Move X8, [X8]
	081 Move X8, [X8+184]
	082 Move X1, [X20+24]
	083 Call X509Extension.FormatUnkownData, X0, X1
	084 Move X8, [X20+16]
	085 Compare X8, 0
	086 JumpIfEqual {382}
	087 Move X0, [X8+16]
	088 Move X8, 0xAC5000
	089 Move X8, [X8+1904]
	090 Move X2, X31
	091 Move X1, [X8]
	092 Call String.op_Inequality, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {106}
	097 Move X8, [X20+16]
	098 Compare X8, 0
	099 JumpIfEqual {382}
	100 Move X1, [X8+16]
	101 Move X8, 0xADE000
	102 Move X8, [X8+2488]
	103 Move X2, X31
	104 Move X0, [X8]
	105 Call String.Format, X0, X1
	106 Move W8, [X20+36]
	107 Compare W8, 0
	108 JumpIfEqual {297}
	109 Move X8, 0xA95000
	110 Move X8, [X8+2288]
	111 Move X0, [X8]
	112 Call 0x1C17F10
	113 Move X1, X31
	114 Move X21, X0
	115 Call StringBuilder..ctor, X0
	116 Move W22, [X20+36]
	117 Move TEMP, X22
	118 And TEMP, TEMP, 128
	119 Compare TEMP, 128
	120 JumpIfNotEqual {130}
	121 Compare X21, 0
	122 JumpIfEqual {382}
	123 Move X8, 0xADE000
	124 Move X8, [X8+3480]
	125 Move X0, X21
	126 Move X2, X31
	127 Move X1, [X8]
	128 Call StringBuilder.Append, X0, X1
	129 Move W22, [X20+36]
	130 Move TEMP, X22
	131 And TEMP, TEMP, 64
	132 Compare TEMP, 64
	133 JumpIfNotEqual {153}
	134 Compare X21, 0
	135 JumpIfEqual {382}
	136 Move X0, X21
	137 Move X1, X31
	138 Call StringBuilder.get_Length, X0
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X8, 0xA95000
	141 Move X8, [X8+2104]
	142 Move X0, X21
	143 Move X2, X31
	144 Move X1, [X8]
	145 Call StringBuilder.Append, X0, X1
	146 Move X8, 0xADE000
	147 Move X8, [X8+3464]
	148 Move X0, X21
	149 Move X2, X31
	150 Move X1, [X8]
	151 Call StringBuilder.Append, X0, X1
	152 Move W22, [X20+36]
	153 Move TEMP, X22
	154 And TEMP, TEMP, 32
	155 Compare TEMP, 32
	156 JumpIfNotEqual {176}
	157 Compare X21, 0
	158 JumpIfEqual {382}
	159 Move X0, X21
	160 Move X1, X31
	161 Call StringBuilder.get_Length, X0
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X8, 0xA95000
	164 Move X8, [X8+2104]
	165 Move X0, X21
	166 Move X2, X31
	167 Move X1, [X8]
	168 Call StringBuilder.Append, X0, X1
	169 Move X8, 0xADE000
	170 Move X8, [X8+3488]
	171 Move X0, X21
	172 Move X2, X31
	173 Move X1, [X8]
	174 Call StringBuilder.Append, X0, X1
	175 Move W22, [X20+36]
	176 Move TEMP, X22
	177 And TEMP, TEMP, 16
	178 Compare TEMP, 16
	179 JumpIfNotEqual {199}
	180 Compare X21, 0
	181 JumpIfEqual {382}
	182 Move X0, X21
	183 Move X1, X31
	184 Call StringBuilder.get_Length, X0
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move X8, 0xA95000
	187 Move X8, [X8+2104]
	188 Move X0, X21
	189 Move X2, X31
	190 Move X1, [X8]
	191 Call StringBuilder.Append, X0, X1
	192 Move X8, 0xADE000
	193 Move X8, [X8+3472]
	194 Move X0, X21
	195 Move X2, X31
	196 Move X1, [X8]
	197 Call StringBuilder.Append, X0, X1
	198 Move W22, [X20+36]
	199 Move TEMP, X22
	200 And TEMP, TEMP, 8
	201 Compare TEMP, 8
	202 JumpIfNotEqual {222}
	203 Compare X21, 0
	204 JumpIfEqual {382}
	205 Move X0, X21
	206 Move X1, X31
	207 Call StringBuilder.get_Length, X0
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move X8, 0xA95000
	210 Move X8, [X8+2104]
	211 Move X0, X21
	212 Move X2, X31
	213 Move X1, [X8]
	214 Call StringBuilder.Append, X0, X1
	215 Move X8, 0xADE000
	216 Move X8, [X8+3424]
	217 Move X0, X21
	218 Move X2, X31
	219 Move X1, [X8]
	220 Call StringBuilder.Append, X0, X1
	221 Move W22, [X20+36]
	222 Move TEMP, X22
	223 And TEMP, TEMP, 4
	224 Compare TEMP, 4
	225 JumpIfNotEqual {245}
	226 Compare X21, 0
	227 JumpIfEqual {382}
	228 Move X0, X21
	229 Move X1, X31
	230 Call StringBuilder.get_Length, X0
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move X8, 0xA95000
	233 Move X8, [X8+2104]
	234 Move X0, X21
	235 Move X2, X31
	236 Move X1, [X8]
	237 Call StringBuilder.Append, X0, X1
	238 Move X8, 0xADE000
	239 Move X8, [X8+3432]
	240 Move X0, X21
	241 Move X2, X31
	242 Move X1, [X8]
	243 Call StringBuilder.Append, X0, X1
	244 Move W22, [X20+36]
	245 Move TEMP, X22
	246 And TEMP, TEMP, 2
	247 Compare TEMP, 2
	248 JumpIfNotEqual {268}
	249 Compare X21, 0
	250 JumpIfEqual {382}
	251 Move X0, X21
	252 Move X1, X31
	253 Call StringBuilder.get_Length, X0
	254 NotImplemented "Instruction CMP not yet implemented."
	255 Move X8, 0xA95000
	256 Move X8, [X8+2104]
	257 Move X0, X21
	258 Move X2, X31
	259 Move X1, [X8]
	260 Call StringBuilder.Append, X0, X1
	261 Move X8, 0xADE000
	262 Move X8, [X8+3440]
	263 Move X0, X21
	264 Move X2, X31
	265 Move X1, [X8]
	266 Call StringBuilder.Append, X0, X1
	267 Move W22, [X20+36]
	268 Move TEMP, X22
	269 And TEMP, TEMP, 1
	270 Compare TEMP, 1
	271 JumpIfNotEqual {291}
	272 Compare X21, 0
	273 JumpIfEqual {382}
	274 Move X0, X21
	275 Move X1, X31
	276 Call StringBuilder.get_Length, X0
	277 NotImplemented "Instruction CMP not yet implemented."
	278 Move X8, 0xA95000
	279 Move X8, [X8+2104]
	280 Move X0, X21
	281 Move X2, X31
	282 Move X1, [X8]
	283 Call StringBuilder.Append, X0, X1
	284 Move X8, 0xADE000
	285 Move X8, [X8+3456]
	286 Move X0, X21
	287 Move X2, X31
	288 Move X1, [X8]
	289 Call StringBuilder.Append, X0, X1
	290 Move W22, [X20+36]
	291 Move TEMP, X22
	292 And TEMP, TEMP, 0x8000
	293 Compare TEMP, 0x8000
	294 JumpIfEqual {306}
	295 Compare X21, 0
	296 JumpIfNotEqual {325}
	297 Move X8, 0xADE000
	298 Move X8, [X8+2192]
	299 Move X0, [X8]
	300 Move X20, [X31+32]
	301 Move X19, [X31+40]
	302 Move X22, [X31+16]
	303 Move X21, [X31+24]
	304 Move X30, [X31+48]
	305 Return X0
	306 Compare X21, 0
	307 JumpIfEqual {382}
	308 Move X0, X21
	309 Move X1, X31
	310 Call StringBuilder.get_Length, X0
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Move X8, 0xA95000
	313 Move X8, [X8+2104]
	314 Move X0, X21
	315 Move X2, X31
	316 Move X1, [X8]
	317 Call StringBuilder.Append, X0, X1
	318 Move X8, 0xADE000
	319 Move X8, [X8+3448]
	320 Move X0, X21
	321 Move X2, X31
	322 Move X1, [X8]
	323 Call StringBuilder.Append, X0, X1
	324 Move W22, [X20+36]
	325 Move X8, 0xA96000
	326 Move X8, [X8+1552]
	327 Move X0, X21
	328 Move X2, X31
	329 Move X1, [X8]
	330 Call StringBuilder.Append, X0, X1
	331 Move X20, 0xAC8000
	332 Move X20, [X20+848]
	333 Add X0, X31, 12
	334 Move X2, X31
	335 Move [X31+12], W22
	336 Move X1, [X20]
	337 Call Byte.ToString, X0, X1
	338 Move X1, X0
	339 Move X0, X21
	340 Move X2, X31
	341 Call StringBuilder.Append, X0, X1
	342 NotImplemented "Instruction CMP not yet implemented."
	343 Move X8, 0xA95000
	344 Move X8, [X8+3544]
	345 Move X0, X21
	346 Move X2, X31
	347 Move X1, [X8]
	348 Call StringBuilder.Append, X0, X1
	349 Move X1, [X20]
	350 Move W8, W22
	351 ShiftRight W8, 8
	352 And W8, W8, 0x7FFFFFFF
	353 Add X0, X31, 12
	354 Move X2, X31
	355 Move [X31+12], W8
	356 Call Byte.ToString, X0, X1
	357 Move X1, X0
	358 Move X0, X21
	359 Move X2, X31
	360 Call StringBuilder.Append, X0, X1
	361 Move X8, 0xA96000
	362 Move X8, [X8+1544]
	363 Move X0, X21
	364 Move X2, X31
	365 Move X1, [X8]
	366 Call StringBuilder.Append, X0, X1
	367 Move TEMP, X19
	368 And TEMP, TEMP, 1
	369 Compare TEMP, 1
	370 JumpIfNotEqual {377}
	371 Move X0, X31
	372 Call Environment.get_NewLine
	373 Move X1, X0
	374 Move X0, X21
	375 Move X2, X31
	376 Call StringBuilder.Append, X0, X1
	377 Move X8, [X21]
	378 Move X0, X21
	379 Move X9, [X8+360]
	380 Move X1, [X8+368]
	381 NotImplemented "Instruction BLR not yet implemented."
	382 Call 0x1C17F20

