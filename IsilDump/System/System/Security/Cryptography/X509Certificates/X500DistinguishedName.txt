Type: System.Security.Cryptography.X509Certificates.X500DistinguishedName

Method: System.Void .ctor(System.Byte[] encodedDistinguishedName)

Disassembly:
	0x03651630 BL 0x1C16CF4
	0x03651634 ADRP X0, 0xAD0000
	0x03651638 LDR X0, [X0 + 0x300]
	0x0365163C BL 0x1C16CF4
	0x03651640 ADRP X0, 0xAA9000
	0x03651644 LDR X0, [X0 + 0xEC8]
	0x03651648 BL 0x1C16CF4
	0x0365164C ADRP X0, 0xAD0000
	0x03651650 LDR X0, [X0 + 0x308]
	0x03651654 BL 0x1C16CF4
	0x03651658 ADRP X0, 0xAA4000
	0x0365165C LDR X0, [X0 + 0x798]
	0x03651660 BL 0x1C16CF4
	0x03651664 ADRP X0, 0xAA2000
	0x03651668 LDR X0, [X0 + 0x838]
	0x0365166C BL 0x1C16CF4
	0x03651670 ADRP X0, 0xAD0000
	0x03651674 LDR X0, [X0 + 0x310]
	0x03651678 BL 0x1C16CF4
	0x0365167C ADRP X0, 0xAEB000
	0x03651680 LDR X0, [X0 + 0x890]
	0x03651684 BL 0x1C16CF4
	0x03651688 ADRP X0, 0xAEB000
	0x0365168C LDR X0, [X0 + 0x9B8]
	0x03651690 BL 0x1C16CF4
	0x03651694 ADRP X0, 0xAD0000
	0x03651698 LDR X0, [X0 + 0x228]
	0x0365169C BL 0x1C16CF4
	0x036516A0 MOVZ W8, 0x1
	0x036516A4 STRB W8, [X21 + 0x622]
	0x036516A8 LDR W8, [X20 + 0x28]
	0x036516AC SUB W9, W8, 0x2
	0x036516B0 CMP W9, 0x2
	0x036516B4 B.CC 0x36516DC
	0x036516B8 CMP W8, 0x4
	0x036516BC B.EQ 0x36516EC
	0x036516C0 CMP W8, 0x1
	0x036516C4 B.NE 0x3651704
	0x036516C8 ADRP X8, 0xAA4000
	0x036516CC LDR X8, [X8 + 0x278]
	0x036516D0 LDR X8, [X8]
	0x036516D4 LDR X8, [X8 + 0xB8]
	0x036516D8 B 0x36516F4
	0x036516DC LDR X1, [X20 + 0x18]
	0x036516E0 LDP X20, X19, [X31 + 0x10]
	0x036516E4 LDP X30, X21, [X31], #0x20
	0x036516E8 B 0x3651868
	0x036516EC ADRP X8, 0xAEB000
	0x036516F0 LDR X8, [X8 + 0x890]
	0x036516F4 LDR X0, [X8]
	0x036516F8 LDP X20, X19, [X31 + 0x10]
	0x036516FC LDP X30, X21, [X31], #0x20
	0x03651700 RET
	0x03651704 LDR X8, [X20 + 0x10]
	0x03651708 CBZ X8, 0x3651864
	0x0365170C LDR X0, [X8 + 0x10]
	0x03651710 ADRP X8, 0xAD0000
	0x03651714 LDR X8, [X8 + 0x228]
	0x03651718 MOV X2, X31
	0x0365171C LDR X1, [X8]
	0x03651720 BL 0x3226EF8
	0x03651724 TBZ X0, 0x0, 0x3651750
	0x03651728 LDR X8, [X20 + 0x10]
	0x0365172C CBZ X8, 0x3651864
	0x03651730 LDR X1, [X8 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD90000
	006 Move W8, [X21+1558]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xAEC000
	014 Move X0, [X0+2016]
	015 Call 0x1C17CF4
	016 Move X0, 0xAA5000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1558], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object..ctor, X0
	024 Compare X20, 0
	025 JumpIfEqual {58}
	026 Move X8, 0xAEC000
	027 Move X8, [X8+2016]
	028 Move X0, [X8]
	029 Call 0x1C17F10
	030 Move X1, X31
	031 Move X21, X0
	032 Call Object..ctor, X0
	033 Move X0, X19
	034 Move X1, X21
	035 Call AsnEncodedData.set_Oid, X0, X1
	036 Move X0, X19
	037 Move X1, X20
	038 Call AsnEncodedData.set_RawData, X0, X1
	039 Move X8, [X20+24]
	040 Compare X8, 0
	041 JumpIfEqual {47}
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Move X8, 0xAA5000
	048 Move X8, [X8+632]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move X8, [X8]
	052 Move [X19+32], X8
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return 
	058 Move X0, 0xAA8000
	059 Move X0, [X0+1320]
	060 Call 0x1C17D08
	061 Call 0x1C17F10
	062 Move X19, X0
	063 Move X0, 0xAEC000
	064 Move X0, [X0+2400]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Move X2, X31
	069 Call ArgumentNullException..ctor, X0, X1
	070 Move X0, 0xAEC000
	071 Move X0, [X0+2408]
	072 Call 0x1C17D08
	073 Move X1, X0
	074 Move X0, X19
	075 Call 0x1C17DEC

Method: System.String get_Name()

Disassembly:
	0x03651818 BL 0x33C1548
	0x0365181C MOV X1, X0

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.String Decode(System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags flag)

Disassembly:
	0x03651820 MOV X0, X21
	0x03651824 MOV X2, X31
	0x03651828 BL 0x32333E0
	0x0365182C LDR X8, [X21]
	0x03651830 LDP X20, X19, [X31 + 0x10]
	0x03651834 MOV X0, X21
	0x03651838 LDP X2, X1, [X8 + 0x168]
	0x0365183C LDP X30, X21, [X31], #0x20
	0x03651840 BR X2
	0x03651844 ADRP X8, 0xAA4000
	0x03651848 LDR X8, [X8 + 0x798]
	0x0365184C MOV X0, X21
	0x03651850 MOV X2, X31
	0x03651854 LDR X1, [X8]
	0x03651858 BL 0x32333E0
	0x0365185C TBNZ X19, 0x0, 0x3651814
	0x03651860 B 0x365182C
	0x03651864 BL 0x1C16F20
	0x03651868 STP X30, X23, [X31 - 0x30]!
	0x0365186C STP X22, X21, [X31 + 0x10]
	0x03651870 STP X20, X19, [X31 + 0x20]
	0x03651874 ADRP X20, 0xD8F000
	0x03651878 LDRB W8, [X20 + 0x687]
	0x0365187C MOV X19, X1
	0x03651880 TBNZ X8, 0x0, 0x36518B0
	0x03651884 ADRP X0, 0xAA2000
	0x03651888 LDR X0, [X0 + 0x8F0]
	0x0365188C BL 0x1C16CF4
	0x03651890 ADRP X0, 0xAA4000
	0x03651894 LDR X0, [X0 + 0x278]
	0x03651898 BL 0x1C16CF4
	0x0365189C ADRP X0, 0xACF000
	0x036518A0 LDR X0, [X0 + 0xBA8]
	0x036518A4 BL 0x1C16CF4
	0x036518A8 MOVZ W8, 0x1
	0x036518AC STRB W8, [X20 + 0x687]
	0x036518B0 CBZ X19, 0x3651938
	0x036518B4 LDR X8, [X19 + 0x18]
	0x036518B8 CBZ X8, 0x3651938
	0x036518BC ADRP X8, 0xAA2000
	0x036518C0 LDR X8, [X8 + 0x8F0]
	0x036518C4 LDR X0, [X8]
	0x036518C8 BL 0x1C16F10
	0x036518CC MOV X1, X31
	0x036518D0 MOV X20, X0
	0x036518D4 BL 0x3231AC4
	0x036518D8 LDR X8, [X19 + 0x18]
	0x036518DC CMP W8, 0x1
	0x036518E0 B.LT 0x365195C
	0x036518E4 ADRP X23, 0xACF000
	0x036518E8 LDR X23, [X23 + 0xBA8]
	0x036518EC MOV X21, X31
	0x036518F0 AND X8, X8, 0x0
	0x036518F4 ADD X22, X19, 0x20
	0x036518F8 CMP X21, W8, UXTW
	0x036518FC B.CS 0x365197C
	0x03651900 LDR X1, [X23]
	0x03651904 ADD X0, X22, X21
	0x03651908 MOV X2, X31
	0x0365190C BL 0x3319C4C
	0x03651910 CBZ X20, 0x3651980
	0x03651914 MOV X1, X0
	0x03651918 MOV X0, X20
	0x0365191C MOV X2, X31
	0x03651920 BL 0x32333E0
	0x03651924 LDR W8, [X19 + 0x18]
	0x03651928 ADD X21, X21, 0x1
	0x0365192C CMP X21, W8, SXTW
	0x03651930 B.LT 0x36518F8
	0x03651934 B 0x3651960
	0x03651938 ADRP X8, 0xAA4000
	0x0365193C LDR X8, [X8 + 0x278]
	0x03651940 LDP X20, X19, [X31 + 0x20]
	0x03651944 LDP X22, X21, [X31 + 0x10]
	0x03651948 LDR X8, [X8]
	0x0365194C LDR X8, [X8 + 0xB8]
	0x03651950 LDR X0, [X8]
	0x03651954 LDP X30, X23, [X31], #0x30
	0x03651958 RET
	0x0365195C CBZ X20, 0x3651980
	0x03651960 LDR X8, [X20]
	0x03651964 MOV X0, X20
	0x03651968 LDP X20, X19, [X31 + 0x20]
	0x0365196C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xD90000
	008 Move W8, [X21+1559]
	009 Move W19, W1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xAD0000
	016 Move X0, [X0+2968]
	017 Call 0x1C17CF4
	018 Move X0, 0xAA5000
	019 Move X0, [X0+632]
	020 Call 0x1C17CF4
	021 Move X0, 0xAD0000
	022 Move X0, [X0+3320]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1559], W8
	026 Compare W19, 0
	027 JumpIfEqual {32}
	028 Move W8, 0x71F1
	029 And W8, W19, W8
	030 Compare W8, 0
	031 JumpIfEqual {84}
	032 Move X8, [X20+24]
	033 Compare X8, 0
	034 JumpIfEqual {102}
	035 Move X8, [X8+24]
	036 Compare X8, 0
	037 JumpIfEqual {72}
	038 Move X21, 0xAD0000
	039 Move X23, 0xAD0000
	040 Move X21, [X21+2968]
	041 Move X23, [X23+3320]
	042 Move W0, W19
	043 Call X500DistinguishedName.GetSeparator, X0
	044 Move X8, [X21]
	045 Move X22, [X20+24]
	046 Move X20, X0
	047 Move X0, X8
	048 Call 0x1C17F10
	049 Move X1, X22
	050 Move X2, X31
	051 Move X21, X0
	052 Call ASN1..ctor, X0, X1
	053 Move X0, [X23]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 And W31, W19, 64
	059 And W1, W19, 1
	060 Move X0, X21
	061 Move X2, X20
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 NotImplemented "Instruction CSET not yet implemented."
	067 Move X4, X31
	068 Move X30, [X31+48]
	069 Move X23, [X31+56]
	070 Call X501.ToString, X0, X1, X2, X3
	071 Return X0
	072 Move X8, 0xAA5000
	073 Move X8, [X8+632]
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X22, [X31+16]
	077 Move X21, [X31+24]
	078 Move X8, [X8]
	079 Move X8, [X8+184]
	080 Move X0, [X8]
	081 Move X30, [X31+48]
	082 Move X23, [X31+56]
	083 Return X0
	084 Move X0, 0xAAB000
	085 Move X0, [X0+1400]
	086 Call 0x1C17D08
	087 Call 0x1C17F10
	088 Move X19, X0
	089 Move X0, 0xADB000
	090 Move X0, [X0+3944]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X19
	094 Move X2, X31
	095 Call ArgumentException..ctor, X0, X1
	096 Move X0, 0xAEC000
	097 Move X0, [X0+2416]
	098 Call 0x1C17D08
	099 Move X1, X0
	100 Move X0, X19
	101 Call 0x1C17DEC
	102 Call 0x1C17F20

Method: System.String Format(System.Boolean multiLine)

Disassembly:
	0x036519E8 STP X20, X19, [X31 + 0x10]
	0x036519EC ADRP X19, 0xD8F000
	0x036519F0 LDRB W8, [X19 + 0x623]
	0x036519F4 MOV X21, X1
	0x036519F8 MOV X20, X0
	0x036519FC TBNZ X8, 0x0, 0x3651A20
	0x03651A00 ADRP X0, 0xAA2000
	0x03651A04 LDR X0, [X0 + 0xE00]
	0x03651A08 BL 0x1C16CF4
	0x03651A0C ADRP X0, 0xAD2000
	0x03651A10 LDR X0, [X0 + 0x940]
	0x03651A14 BL 0x1C16CF4
	0x03651A18 MOVZ W8, 0x1
	0x03651A1C STRB W8, [X19 + 0x623]
	0x03651A20 MOV X0, X20
	0x03651A24 MOV X1, X21
	0x03651A28 MOV X2, X31
	0x03651A2C BL 0x326ADC8
	0x03651A30 CBZ X21, 0x3651AEC
	0x03651A34 LDR X8, [X21 + 0x18]
	0x03651A38 CBZ X8, 0x3651AEC
	0x03651A3C ADRP X8, 0xAD2000
	0x03651A40 LDR X8, [X8 + 0x940]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, 1
	005 Compare TEMP, 1
	006 JumpIfNotEqual {23}
	007 Move W1, 256
	008 Call X500DistinguishedName.Decode, X0, X1
	009 Compare X0, 0
	010 JumpIfEqual {32}
	011 Move W8, [X0+16]
	012 Move X19, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X0, X31
	015 Call Environment.get_NewLine
	016 Move X1, X0
	017 Move X0, X19
	018 Move X2, X31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call String.Concat, X0, X1
	022 Return X0
	023 Move W1, 128
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Call X500DistinguishedName.Decode, X0, X1
	027 Return X0
	028 Move X0, X19
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Return X0
	032 Call 0x1C17F20

Method: System.String GetSeparator(System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags flag)

Disassembly:
	0x03651970 LDP X2, X1, [X8 + 0x168]
	0x03651974 LDP X30, X23, [X31], #0x30
	0x03651978 BR X2
	0x0365197C BL 0x1C16F28
	0x03651980 BL 0x1C16F20
	0x03651984 STP X30, X19, [X31 - 0x10]!
	0x03651988 MOV X19, X0
	0x0365198C BL 0x1C16D44
	0x03651990 STR X31, [X19 + 0x60]
	0x03651994 BL 0x1C16D44
	0x03651998 STR X31, [X19 + 0x68]
	0x0365199C BL 0x1C16D44
	0x036519A0 STR W31, [X19 + 0x70]
	0x036519A4 BL 0x1C16D44
	0x036519A8 STR X31, [X19 + 0x78]
	0x036519AC BL 0x1C16D44
	0x036519B0 STR X31, [X19 + 0x80]
	0x036519B4 BL 0x1C16D44
	0x036519B8 STR X31, [X19 + 0x88]
	0x036519BC BL 0x1C16D44
	0x036519C0 STR X31, [X19 + 0x90]
	0x036519C4 BL 0x1C16D44
	0x036519C8 STR X31, [X19 + 0x98]
	0x036519CC MOV X0, X19
	0x036519D0 MOV X1, X31
	0x036519D4 LDP X30, X19, [X31], #0x10
	0x036519D8 B 0x326AC30
	0x036519DC MOV X1, X31
	0x036519E0 B 0x326AD54
	0x036519E4 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD90000
	005 Move W8, [X20+1560]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xAA3000
	012 Move X0, [X0+2104]
	013 Call 0x1C17CF4
	014 Move X0, 0xACB000
	015 Move X0, [X0+2224]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1560], W8
	019 Move TEMP, X19
	020 And TEMP, TEMP, 16
	021 Compare TEMP, 16
	022 JumpIfEqual {33}
	023 Move TEMP, X19
	024 And TEMP, TEMP, 128
	025 Compare TEMP, 128
	026 JumpIfEqual {31}
	027 Move TEMP, X19
	028 And TEMP, TEMP, 256
	029 Compare TEMP, 256
	030 JumpIfEqual {40}
	031 Move X8, 0xAA3000
	032 Move X8, [X8+2104]
	033 Move X8, 0xACB000
	034 Move X8, [X8+2224]
	035 Move X0, [X8]
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return X0
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X0, X31
	043 Move X30, [X31+32]
	044 Call Environment.get_NewLine
	045 Return X0

Method: System.Void DecodeRawData()

Disassembly:
	0x03651734 ADRP X8, 0xAEB000
	0x03651738 LDR X8, [X8 + 0x9B8]
	0x0365173C LDP X20, X19, [X31 + 0x10]
	0x03651740 MOV X2, X31
	0x03651744 LDR X0, [X8]
	0x03651748 LDP X30, X21, [X31], #0x20
	0x0365174C B 0x321EFD0
	0x03651750 ADRP X8, 0xAA2000
	0x03651754 LDR X8, [X8 + 0x8F0]
	0x03651758 LDR X0, [X8]
	0x0365175C BL 0x1C16F10
	0x03651760 MOV X1, X31
	0x03651764 MOV X21, X0
	0x03651768 BL 0x3231AC4
	0x0365176C CBZ X21, 0x3651864
	0x03651770 ADRP X8, 0xAD0000
	0x03651774 LDR X8, [X8 + 0x300]
	0x03651778 MOV X0, X21
	0x0365177C MOV X2, X31
	0x03651780 LDR X1, [X8]
	0x03651784 BL 0x32333E0
	0x03651788 LDRB W8, [X20 + 0x21]
	0x0365178C ADRP X9, 0xAD0000
	0x03651790 ADRP X10, 0xAA9000
	0x03651794 LDR X9, [X9 + 0x310]
	0x03651798 LDR X10, [X10 + 0xEC8]
	0x0365179C CMP W8, 0x0
	0x036517A0 MOV X0, X21
	0x036517A4 MOV X2, X31
	0x036517A8 CSEL X8, X9, X10, EQ
	0x036517AC LDR X1, [X8]
	0x036517B0 BL 0x32333E0
	0x036517B4 TBZ X19, 0x0, 0x36517C8
	0x036517B8 MOV X0, X31
	0x036517BC BL 0x33C1548
	0x036517C0 MOV X1, X0
	0x036517C4 B 0x36517D4
	0x036517C8 ADRP X8, 0xAA2000
	0x036517CC LDR X8, [X8 + 0x838]
	0x036517D0 LDR X1, [X8]
	0x036517D4 MOV X0, X21
	0x036517D8 MOV X2, X31
	0x036517DC BL 0x32333E0
	0x036517E0 ADRP X8, 0xAD0000
	0x036517E4 LDR X8, [X8 + 0x308]
	0x036517E8 MOV X0, X21
	0x036517EC MOV X2, X31
	0x036517F0 LDR X1, [X8]
	0x036517F4 BL 0x32333E0
	0x036517F8 LDRB W8, [X20 + 0x22]
	0x036517FC CBZ W8, 0x3651844
	0x03651800 LDR W1, [X20 + 0x24]
	0x03651804 MOV X0, X21
	0x03651808 MOV X2, X31
	0x0365180C BL 0x3233E30
	0x03651810 TBZ X19, 0x0, 0x365182C
	0x03651814 MOV X0, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD90000
	006 Move W8, [X20+1561]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0xAD0000
	013 Move X0, [X0+2968]
	014 Call 0x1C17CF4
	015 Move X0, 0xAA5000
	016 Move X0, [X0+632]
	017 Call 0x1C17CF4
	018 Move X0, 0xAD0000
	019 Move X0, [X0+3320]
	020 Call 0x1C17CF4
	021 Move X0, 0xAA3000
	022 Move X0, [X0+2104]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1561], W8
	026 Move X21, [X19+24]
	027 Compare X21, 0
	028 JumpIfEqual {54}
	029 Move W8, [X21+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X8, 0xAD0000
	032 Move X8, [X8+2968]
	033 Move X0, [X8]
	034 Call 0x1C17F10
	035 Move X1, X21
	036 Move X2, X31
	037 Move X20, X0
	038 Call ASN1..ctor, X0, X1
	039 Move X8, 0xAD0000
	040 Move X8, [X8+3320]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X8, 0xAA3000
	047 Move X8, [X8+2104]
	048 Move W1, 1
	049 Move W3, 1
	050 Move X0, X20
	051 Move X2, [X8]
	052 Move X4, X31
	053 Call X501.ToString, X0, X1, X2, X3
	054 Move X8, 0xAA5000
	055 Move X8, [X8+632]
	056 Move X8, [X8]
	057 Move X8, [X8+184]
	058 Move X0, [X8]
	059 Move [X19+32], X0
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return 

Method: System.String Canonize(System.String s)

Disassembly:
	0x03651A44 LDR X0, [X8]
	0x03651A48 BL 0x1C16F10
	0x03651A4C MOV X1, X31
	0x03651A50 MOV X2, X31
	0x03651A54 MOV X19, X0
	0x03651A58 BL 0x3224CA0
	0x03651A5C MOV X0, X21
	0x03651A60 MOV X1, X19
	0x03651A64 MOV W2, W31
	0x03651A68 MOV X3, X31
	0x03651A6C BL 0x326B33C
	0x03651A70 MOV X1, X0
	0x03651A74 MOV X0, X20
	0x03651A78 MOV X2, X31
	0x03651A7C BL 0x326C188
	0x03651A80 MOV X20, X31
	0x03651A84 CBZ X19, 0x3651AE8
	0x03651A88 ADRP X10, 0xAA2000
	0x03651A8C LDR X8, [X19]
	0x03651A90 LDR X10, [X10 + 0xE00]
	0x03651A94 LDRH W9, [X8 + 0x12E]
	0x03651A98 LDR X1, [X10]
	0x03651A9C CBZ X9, 0x3651AC0
	0x03651AA0 LDR X10, [X8 + 0xB0]
	0x03651AA4 ADD X10, X10, 0x8
	0x03651AA8 LDUR X11, [X10 - 0x8]
	0x03651AAC CMP X11, X1
	0x03651AB0 B.EQ 0x3651AD0
	0x03651AB4 SUBS X9, X9, 0x1
	0x03651AB8 ADD X10, X10, 0x10
	0x03651ABC B.NE 0x3651AA8
	0x03651AC0 MOV X0, X19
	0x03651AC4 MOV W2, W31
	0x03651AC8 BL 0x1C5C788
	0x03651ACC B 0x3651ADC
	0x03651AD0 LDRSW X9, [X10]
	0x03651AD4 ADD X8, X8, X9, 0x4, LSL
	0x03651AD8 ADD X0, X8, 0x138
	0x03651ADC LDP X8, X1, [X0]
	0x03651AE0 MOV X0, X19
	0x03651AE4 BLR X8
	0x03651AE8 CBNZ X20, 0x3651AF8
	0x03651AEC LDP X20, X19, [X31 + 0x10]
	0x03651AF0 LDP X30, X21, [X31], #0x20
	0x03651AF4 RET
	0x03651AF8 MOV X0, X20
	0x03651AFC BL 0x1C16F18
	0x03651B00 B 0x3651B04
	0x03651B04 MOV X21, X0
	0x03651B08 CMP W1, 0x1
	0x03651B0C B.NE 0x3651B24
	0x03651B10 MOV X0, X21
	0x03651B14 BL 0x3EB1AD0
	0x03651B18 LDR X20, [X0]
	0x03651B1C BL 0x3EB1AE0
	0x03651B20 B 0x3651A84
	0x03651B24 MOV X20, X31
	0x03651B28 B 0x3651B30
	0x03651B2C MOV X21, X0
	0x03651B30 CBZ X19, 0x3651B94
	0x03651B34 ADRP X10, 0xAA2000
	0x03651B38 LDR X8, [X19]
	0x03651B3C LDR X10, [X10 + 0xE00]
	0x03651B40 LDRH W9, [X8 + 0x12E]
	0x03651B44 LDR X1, [X10]
	0x03651B48 CBZ X9, 0x3651B6C
	0x03651B4C LDR X10, [X8 + 0xB0]
	0x03651B50 ADD X10, X10, 0x8
	0x03651B54 LDUR X11, [X10 - 0x8]
	0x03651B58 CMP X11, X1
	0x03651B5C B.EQ 0x3651B7C
	0x03651B60 SUBS X9, X9, 0x1
	0x03651B64 ADD X10, X10, 0x10
	0x03651B68 B.NE 0x3651B54
	0x03651B6C MOV X0, X19
	0x03651B70 MOV W2, W31
	0x03651B74 BL 0x1C5C788
	0x03651B78 B 0x3651B88
	0x03651B7C LDRSW X9, [X10]
	0x03651B80 ADD X8, X8, X9, 0x4, LSL
	0x03651B84 ADD X0, X8, 0x138
	0x03651B88 LDP X8, X1, [X0]
	0x03651B8C MOV X0, X19
	0x03651B90 BLR X8
	0x03651B94 CBNZ X20, 0x3651BA0
	0x03651B98 MOV X0, X21
	0x03651B9C BL 0x1D2C690
	0x03651BA0 MOV X0, X20
	0x03651BA4 BL 0x1C16F18
	0x03651BA8 BL 0x1990590
	0x03651BAC MOV X2, X31
	0x03651BB0 B 0x326AFC8
	0x03651BB4 MOV X2, X31
	0x03651BB8 B 0x326B404
	0x03651BBC STP X30, X19, [X31 - 0x10]!
	0x03651BC0 MOV X4, X31
	0x03651BC4 BL 0x326B590
	0x03651BC8 ADRP X0, 0xACD000
	0x03651BCC LDR X0, [X0 + 0xC50]
	0x03651BD0 BL 0x1C16D08
	0x03651BD4 BL 0x1C16F10
	0x03651BD8 MOV X1, X31
	0x03651BDC MOV X19, X0
	0x03651BE0 BL 0x338E344
	0x03651BE4 ADRP X0, 0xAEB000
	0x03651BE8 LDR X0, [X0 + 0x9C0]
	0x03651BEC BL 0x1C16D08
	0x03651BF0 MOV X1, X0
	0x03651BF4 MOV X0, X19
	0x03651BF8 BL 0x1C16DEC
	0x03651BFC STP X30, X25, [X31 - 0x40]!
	0x03651C00 STP X24, X23, [X31 + 0x10]
	0x03651C04 STP X22, X21, [X31 + 0x20]
	0x03651C08 STP X20, X19, [X31 + 0x30]
	0x03651C0C ADRP X20, 0xD8F000
	0x03651C10 LDRB W8, [X20 + 0x624]
	0x03651C14 MOV X19, X0
	0x03651C18 TBNZ X8, 0x0, 0x3651C60
	0x03651C1C ADRP X0, 0xAA2000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0xD90000
	009 Move W8, [X19+1562]
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAA5000
	016 Move X0, [X0+368]
	017 Call 0x1C17CF4
	018 Move X0, 0xAA3000
	019 Move X0, [X0+2288]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1562], W8
	023 Compare X21, 0
	024 JumpIfEqual {141}
	025 Move X20, 0xAA3000
	026 Move X20, [X20+2288]
	027 Move W1, 61
	028 Move X0, X21
	029 Move X2, X31
	030 Call String.IndexOf, X0, X1
	031 Add W19, W0, 1
	032 Move X0, X21
	033 Move W1, W31
	034 Move W2, W19
	035 Move X3, X31
	036 Call String.Substring, X0, X1, X2
	037 Move X8, [X20]
	038 Move X22, X0
	039 Move X0, X8
	040 Call 0x1C17F10
	041 Move X1, X22
	042 Move X2, X31
	043 Move X20, X0
	044 Call StringBuilder..ctor, X0, X1
	045 Move W8, [X21+16]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X22, 0xAA5000
	048 Move X22, [X22+368]
	049 Move X0, [X22]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move W1, W19
	056 Move X2, X31
	057 Call Char.IsWhiteSpace, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {65}
	062 Move W8, [X21+16]
	063 Add W19, W19, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, X21
	066 Move X1, X31
	067 Call String.TrimEnd, X0
	068 Compare X0, 0
	069 JumpIfEqual {141}
	070 Move W8, [X0+16]
	071 Move X21, X0
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X24, 0xAA5000
	074 Move X24, [X24+368]
	075 Move W22, W31
	076 Move TEMP, X22
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {94}
	080 Move X0, [X24]
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {85}
	084 Call 0x1C17DFC
	085 Move X0, X21
	086 Move W1, W19
	087 Move X2, X31
	088 Call Char.IsWhiteSpace, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {94}
	093 Move W22, 1
	094 Move X0, [X24]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X21
	100 Move W1, W19
	101 Move X2, X31
	102 Call Char.IsWhiteSpace, X0, X1
	103 Move W22, W0
	104 Move X0, X21
	105 Move W1, W19
	106 Move X2, X31
	107 Call String.get_Chars, X0, X1
	108 Move X8, [X24]
	109 Move W23, W0
	110 Move W9, [X8+224]
	111 Compare W9, 0
	112 JumpIfNotEqual {115}
	113 Move X0, X8
	114 Call 0x1C17DFC
	115 Move W0, W23
	116 Move X1, X31
	117 Call Char.ToUpperInvariant, X0
	118 Compare X20, 0
	119 JumpIfEqual {141}
	120 Move W1, W0
	121 Move X0, X20
	122 Move X2, X31
	123 Call StringBuilder.Append, X0, X1
	124 Move W8, [X21+16]
	125 Add W19, W19, 1
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Compare X20, 0
	128 JumpIfEqual {141}
	129 Move X8, [X20]
	130 Move X0, X20
	131 Move X20, [X31+48]
	132 Move X19, [X31+56]
	133 Move X22, [X31+32]
	134 Move X21, [X31+40]
	135 Move X2, [X8+360]
	136 Move X1, [X8+368]
	137 Move X24, [X31+16]
	138 Move X23, [X31+24]
	139 Move X30, [X31+64]
	140 CallNoReturn X2
	141 Call 0x1C17F20

Method: System.Boolean AreEqual(System.Security.Cryptography.X509Certificates.X500DistinguishedName name1, System.Security.Cryptography.X509Certificates.X500DistinguishedName name2)

Disassembly:
	0x03651C20 LDR X0, [X0 + 0xE00]
	0x03651C24 BL 0x1C16CF4
	0x03651C28 ADRP X0, 0xAEB000
	0x03651C2C LDR X0, [X0 + 0x9C8]
	0x03651C30 BL 0x1C16CF4
	0x03651C34 ADRP X0, 0xAEB000
	0x03651C38 LDR X0, [X0 + 0x9D0]
	0x03651C3C BL 0x1C16CF4
	0x03651C40 ADRP X0, 0xAA2000
	0x03651C44 LDR X0, [X0 + 0xE18]
	0x03651C48 BL 0x1C16CF4
	0x03651C4C ADRP X0, 0xAEB000
	0x03651C50 LDR X0, [X0 + 0x9D8]
	0x03651C54 BL 0x1C16CF4
	0x03651C58 MOVZ W8, 0x1
	0x03651C5C STRB W8, [X20 + 0x624]
	0x03651C60 MOV X0, X19
	0x03651C64 MOV X1, X31
	0x03651C68 BL 0x326B690
	0x03651C6C LDR X20, [X19 + 0x98]
	0x03651C70 BL 0x1C16D44
	0x03651C74 CBNZ X20, 0x3651EB8
	0x03651C78 ADRP X8, 0xAEB000
	0x03651C7C LDR X8, [X8 + 0x9D8]
	0x03651C80 LDR X0, [X8]
	0x03651C84 BL 0x1C16F10
	0x03651C88 MOV X20, X0
	0x03651C8C BL 0x3651FC0
	0x03651C90 MOV X0, X19
	0x03651C94 BL 0x3652024
	0x03651C98 CBZ X0, 0x3651EDC
	0x03651C9C LDR X8, [X0]
	0x03651CA0 LDR X9, [X8 + 0x288]
	0x03651CA4 LDR X1, [X8 + 0x290]
	0x03651CA8 BLR X9
	0x03651CAC CBZ X0, 0x3651EDC
	0x03651CB0 ADRP X10, 0xAEB000
	0x03651CB4 LDR X8, [X0]
	0x03651CB8 LDR X10, [X10 + 0x9C8]
	0x03651CBC MOV X21, X0
	0x03651CC0 LDRH W9, [X8 + 0x12E]
	0x03651CC4 LDR X1, [X10]
	0x03651CC8 CBZ X9, 0x3651CEC
	0x03651CCC LDR X10, [X8 + 0xB0]
	0x03651CD0 ADD X10, X10, 0x8
	0x03651CD4 LDUR X11, [X10 - 0x8]
	0x03651CD8 CMP X11, X1
	0x03651CDC B.EQ 0x3651CFC
	0x03651CE0 SUBS X9, X9, 0x1
	0x03651CE4 ADD X10, X10, 0x10
	0x03651CE8 B.NE 0x3651CD4
	0x03651CEC MOV X0, X21
	0x03651CF0 MOV W2, W31
	0x03651CF4 BL 0x1C5C788
	0x03651CF8 B 0x3651D08
	0x03651CFC LDRSW X9, [X10]
	0x03651D00 ADD X8, X8, X9, 0x4, LSL
	0x03651D04 ADD X0, X8, 0x138
	0x03651D08 LDP X8, X1, [X0]
	0x03651D0C MOV X0, X21
	0x03651D10 BLR X8
	0x03651D14 MOV X21, X0
	0x03651D18 CBZ X0, 0x3651EE0
	0x03651D1C ADRP X24, 0xAA2000
	0x03651D20 ADRP X25, 0xAEB000
	0x03651D24 LDR X24, [X24 + 0xE18]
	0x03651D28 LDR X25, [X25 + 0x9D0]
	0x03651D2C LDR X8, [X21]
	0x03651D30 LDR X1, [X24]
	0x03651D34 LDRH W9, [X8 + 0x12E]
	0x03651D38 CBZ X9, 0x3651D5C
	0x03651D3C LDR X10, [X8 + 0xB0]
	0x03651D40 ADD X10, X10, 0x8
	0x03651D44 LDUR X11, [X10 - 0x8]
	0x03651D48 CMP X11, X1
	0x03651D4C B.EQ 0x3651D6C
	0x03651D50 SUBS X9, X9, 0x1
	0x03651D54 ADD X10, X10, 0x10
	0x03651D58 B.NE 0x3651D44
	0x03651D5C MOV X0, X21
	0x03651D60 MOV W2, W31
	0x03651D64 BL 0x1C5C788
	0x03651D68 B 0x3651D78
	0x03651D6C LDRSW X9, [X10]
	0x03651D70 ADD X8, X8, X9, 0x4, LSL
	0x03651D74 ADD X0, X8, 0x138
	0x03651D78 LDP X8, X1, [X0]
	0x03651D7C MOV X0, X21
	0x03651D80 BLR X8
	0x03651D84 TBZ X0, 0x0, 0x3651E34
	0x03651D88 LDR X8, [X21]
	0x03651D8C LDR X1, [X25]
	0x03651D90 LDRH W9, [X8 + 0x12E]
	0x03651D94 CBZ X9, 0x3651DB8
	0x03651D98 LDR X10, [X8 + 0xB0]
	0x03651D9C ADD X10, X10, 0x8
	0x03651DA0 LDUR X11, [X10 - 0x8]
	0x03651DA4 CMP X11, X1
	0x03651DA8 B.EQ 0x3651DC8
	0x03651DAC SUBS X9, X9, 0x1
	0x03651DB0 ADD X10, X10, 0x10
	0x03651DB4 B.NE 0x3651DA0
	0x03651DB8 MOV X0, X21
	0x03651DBC MOV W2, W31
	0x03651DC0 BL 0x1C5C788
	0x03651DC4 B 0x3651DD4
	0x03651DC8 LDRSW X9, [X10]
	0x03651DCC ADD X8, X8, X9, 0x4, LSL
	0x03651DD0 ADD X0, X8, 0x138
	0x03651DD4 LDP X8, X1, [X0]
	0x03651DD8 MOV X0, X21
	0x03651DDC BLR X8
	0x03651DE0 MOV X22, X0
	0x03651DE4 CBZ X0, 0x3651ED0
	0x03651DE8 LDR X0, [X22 + 0x10]
	0x03651DEC BL 0x36520B0
	0x03651DF0 MOV X23, X0
	0x03651DF4 CBZ X0, 0x3651E20
	0x03651DF8 LDR X8, [X23]
	0x03651DFC LDP X9, X2, [X8 + 0x178]
	0x03651E00 MOV X0, X23

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xD90000
	009 Move W8, [X21+1563]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAA3000
	017 Move X0, [X0+2760]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1563], W8
	021 Or X8, X19, X20
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 Compare X19, 0
	025 JumpIfEqual {120}
	026 Compare X20, 0
	027 JumpIfEqual {120}
	028 Move X8, [X19+40]
	029 Compare X8, 0
	030 JumpIfEqual {52}
	031 Move X9, [X20+40]
	032 Compare X9, 0
	033 JumpIfEqual {52}
	034 Move W10, [X8+24]
	035 Move W11, [X9+24]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W12, W31
	039 Subtract W11, W31, W10
	040 Add W31, W11, W12
	041 Move X12, W12
	042 Add X10, X8, X12
	043 Add X14, X9, X12
	044 Move W13, [X10+32]
	045 Move W14, [X14+32]
	046 Add W15, W11, W12
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Add W31, W15, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add W12, W12, 1
	052 Move X8, 0xAA3000
	053 Move X8, [X8+2760]
	054 Move W1, 1
	055 Move X0, [X8]
	056 Call 0x1C17D6C
	057 Move X21, X0
	058 Move X0, X31
	059 Call Environment.get_NewLine
	060 Compare X21, 0
	061 JumpIfEqual {130}
	062 Move W8, [X21+24]
	063 Compare W8, 0
	064 JumpIfEqual {129}
	065 Move [X21+32], X0
	066 Move W1, 320
	067 Move X0, X19
	068 Call X500DistinguishedName.Decode, X0, X1
	069 Compare X0, 0
	070 JumpIfEqual {130}
	071 Move W2, 1
	072 Move X1, X21
	073 Move X3, X31
	074 Call String.Split, X0, X1, X2
	075 Move X19, X0
	076 Move W1, 320
	077 Move X0, X20
	078 Call X500DistinguishedName.Decode, X0, X1
	079 Compare X0, 0
	080 JumpIfEqual {130}
	081 Move W2, 1
	082 Move X1, X21
	083 Move X3, X31
	084 Call String.Split, X0, X1, X2
	085 Compare X19, 0
	086 JumpIfEqual {130}
	087 Move X20, X0
	088 Compare X0, 0
	089 JumpIfEqual {130}
	090 Move X8, [X19+24]
	091 Move W9, [X20+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X22, X31
	095 And X8, X8, 0
	096 Add X23, X19, 32
	097 Add X24, X20, 32
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X0, [X23]
	100 Call X500DistinguishedName.Canonize, X0
	101 Move W8, [X20+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X21, X0
	104 Move X0, [X24]
	105 Call X500DistinguishedName.Canonize, X0
	106 Move X1, X0
	107 Move X0, X21
	108 Move X2, X31
	109 Call String.op_Inequality, X0, X1
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {117}
	114 Move W8, [X19+24]
	115 Add X22, X22, 1
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Xor W10, W0, 1
	118 Move W10, W31
	119 Move W10, 1
	120 Move X20, [X31+48]
	121 Move X19, [X31+56]
	122 Move X22, [X31+32]
	123 Move X21, [X31+40]
	124 Move X24, [X31+16]
	125 Move X23, [X31+24]
	126 And W0, W10, 1
	127 Move X30, [X31+64]
	128 Return X0
	129 Call 0x1C17F28
	130 Call 0x1C17F20

