Type: System.Security.Cryptography.X509Certificates.X509ChainPolicy

Method: System.Void .ctor()

Disassembly:
	0x0365A860 STP X30, X25, [X31 + 0x10]
	0x0365A864 STP X24, X23, [X31 + 0x20]
	0x0365A868 STP X22, X21, [X31 + 0x30]
	0x0365A86C STP X20, X19, [X31 + 0x40]
	0x0365A870 ADRP X21, 0xD86000
	0x0365A874 LDRB W8, [X21 + 0x69D]
	0x0365A878 MOV W19, W1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Object..ctor, X0
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Call X509ChainPolicy.Reset, X0
	010 Return 

Method: System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_ExtraStore()

Disassembly:
	0x0365BD04 TBNZ X0, 0x0, 0x365BD28
	0x0365BD08 LDR X1, [X23]
	0x0365BD0C MOV X0, X21
	0x0365BD10 MOV X2, X31
	0x0365BD14 BL 0x321BA08
	0x0365BD18 TBNZ X0, 0x0, 0x365BD28
	0x0365BD1C LDR W8, [X19 + 0x28]
	0x0365BD20 ORR W8, W8, 0x100
	0x0365BD24 STR W8, [X19 + 0x28]
	0x0365BD28 MOV X0, X20
	0x0365BD2C BL 0x36538E0
	0x0365BD30 TBNZ X0, 0x0, 0x365BCD4
	0x0365BD34 LDP X20, X19, [X31 + 0x20]
	0x0365BD38 LDP X22, X21, [X31 + 0x10]
	0x0365BD3C LDP X30, X23, [X31], #0x30
	0x0365BD40 RET
	0x0365BD44 BL 0x1C16F20
	0x0365BD48 SUB X31, X31, 0x40
	0x0365BD4C STP X30, X23, [X31 + 0x10]
	0x0365BD50 STP X22, X21, [X31 + 0x20]
	0x0365BD54 STP X20, X19, [X31 + 0x30]
	0x0365BD58 ADRP X20, 0xD85000
	0x0365BD5C LDRB W8, [X20 + 0x674]
	0x0365BD60 MOV X19, X0
	0x0365BD64 TBNZ X8, 0x0, 0x365BDA0
	0x0365BD68 ADRP X0, 0xAE1000
	0x0365BD6C LDR X0, [X0 + 0xCA0]
	0x0365BD70 BL 0x1C16CF4
	0x0365BD74 ADRP X0, 0xA98000
	0x0365BD78 LDR X0, [X0 + 0x8F0]
	0x0365BD7C BL 0x1C16CF4
	0x0365BD80 ADRP X0, 0xA9A000
	0x0365BD84 LDR X0, [X0 + 0x278]
	0x0365BD88 BL 0x1C16CF4
	0x0365BD8C ADRP X0, 0xAE1000
	0x0365BD90 LDR X0, [X0 + 0xCA8]
	0x0365BD94 BL 0x1C16CF4
	0x0365BD98 MOVZ W8, 0x1
	0x0365BD9C STRB W8, [X20 + 0x674]
	0x0365BDA0 STRB W31, [X31 + 0xC]
	0x0365BDA4 CBZ X19, 0x365BE64
	0x0365BDA8 ADRP X8, 0xAE1000
	0x0365BDAC LDR X8, [X8 + 0xCA0]
	0x0365BDB0 LDR X0, [X8]
	0x0365BDB4 BL 0x1C16F10
	0x0365BDB8 MOV X1, X19
	0x0365BDBC MOV X2, X31
	0x0365BDC0 MOV X20, X0
	0x0365BDC4 BL 0x31F8C7C
	0x0365BDC8 CBZ X20, 0x365BEA8
	0x0365BDCC MOV X0, X20
	0x0365BDD0 MOV X1, X31
	0x0365BDD4 BL 0x31F8EA4
	0x0365BDD8 CBZ X0, 0x365BE64
	0x0365BDDC ADRP X8, 0xA98000
	0x0365BDE0 LDR X8, [X8 + 0x8F0]
	0x0365BDE4 MOV X19, X0
	0x0365BDE8 LDR X0, [X8]
	0x0365BDEC BL 0x1C16F10
	0x0365BDF0 MOV X1, X31
	0x0365BDF4 MOV X20, X0
	0x0365BDF8 BL 0x3231AC4
	0x0365BDFC LDR X8, [X19 + 0x18]
	0x0365BE00 CMP W8, 0x1
	0x0365BE04 B.LT 0x365BE7C
	0x0365BE08 ADRP X23, 0xAE1000
	0x0365BE0C LDR X23, [X23 + 0xCA8]
	0x0365BE10 MOV X21, X31
	0x0365BE14 AND X8, X8, 0x0
	0x0365BE18 ADD X22, X19, 0x20
	0x0365BE1C CMP X21, W8, UXTW
	0x0365BE20 B.CS 0x365BEA4
	0x0365BE24 LDRB W8, [X22, X21, LSL]
	0x0365BE28 LDR X1, [X23]
	0x0365BE2C ADD X0, X31, 0xC
	0x0365BE30 MOV X2, X31
	0x0365BE34 STRB W8, [X31 + 0xC]
	0x0365BE38 BL 0x3319C4C
	0x0365BE3C CBZ X20, 0x365BEA8
	0x0365BE40 MOV X1, X0
	0x0365BE44 MOV X0, X20
	0x0365BE48 MOV X2, X31
	0x0365BE4C BL 0x32333E0
	0x0365BE50 LDR W8, [X19 + 0x18]
	0x0365BE54 ADD X21, X21, 0x1
	0x0365BE58 CMP X21, W8, SXTW
	0x0365BE5C B.LT 0x365BE1C
	0x0365BE60 B 0x365BE80
	0x0365BE64 ADRP X8, 0xA9A000
	0x0365BE68 LDR X8, [X8 + 0x278]
	0x0365BE6C LDR X8, [X8]
	0x0365BE70 LDR X8, [X8 + 0xB8]
	0x0365BE74 LDR X0, [X8]
	0x0365BE78 B 0x365BE90
	0x0365BE7C CBZ X20, 0x365BEA8
	0x0365BE80 LDR X8, [X20]
	0x0365BE84 MOV X0, X20
	0x0365BE88 LDP X9, X1, [X8 + 0x168]
	0x0365BE8C BLR X9
	0x0365BE90 LDP X20, X19, [X31 + 0x30]
	0x0365BE94 LDP X22, X21, [X31 + 0x20]
	0x0365BE98 LDP X30, X23, [X31 + 0x10]
	0x0365BE9C ADD X31, X31, 0x40
	0x0365BEA0 RET
	0x0365BEA4 BL 0x1C16F28
	0x0365BEA8 BL 0x1C16F20
	0x0365BEAC STR X30, [X31 - 0x20]!
	0x0365BEB0 STP X20, X19, [X31 + 0x10]
	0x0365BEB4 ADRP X20, 0xD85000
	0x0365BEB8 LDRB W8, [X20 + 0x673]
	0x0365BEBC MOV X19, X0
	0x0365BEC0 TBNZ X8, 0x0, 0x365BEE4
	0x0365BEC4 ADRP X0, 0xAE1000
	0x0365BEC8 LDR X0, [X0 + 0xBF8]
	0x0365BECC BL 0x1C16CF4
	0x0365BED0 ADRP X0, 0xAE1000
	0x0365BED4 LDR X0, [X0 + 0xC88]
	0x0365BED8 BL 0x1C16CF4
	0x0365BEDC MOVZ W8, 0x1
	0x0365BEE0 STRB W8, [X20 + 0x673]
	0x0365BEE4 CBZ X19, 0x365BF34
	0x0365BEE8 LDR X0, [X19 + 0x48]
	0x0365BEEC CBZ X0, 0x365BF34
	0x0365BEF0 ADRP X8, 0xAE1000
	0x0365BEF4 LDR X8, [X8 + 0xC88]
	0x0365BEF8 ADRP X19, 0xAE1000
	0x0365BEFC MOV X2, X31
	0x0365BF00 LDR X1, [X8]
	0x0365BF04 LDR X19, [X19 + 0xBF8]
	0x0365BF08 BL 0x31F7450
	0x0365BF0C LDR X8, [X19]
	0x0365BF10 MOV X19, X0
	0x0365BF14 LDR W9, [X8 + 0xE0]
	0x0365BF18 CBNZ W9, 0x365BF24
	0x0365BF1C MOV X0, X8
	0x0365BF20 BL 0x1C16DFC
	0x0365BF24 MOV X0, X19
	0x0365BF28 LDP X20, X19, [X31 + 0x10]
	0x0365BF2C LDR X30, [X31], #0x20
	0x0365BF30 B 0x365BD48
	0x0365BF34 BL 0x1C16F20
	0x0365BF38 STP X30, X23, [X31 - 0x30]!
	0x0365BF3C STP X22, X21, [X31 + 0x10]
	0x0365BF40 STP X20, X19, [X31 + 0x20]
	0x0365BF44 MOV X20, X0
	0x0365BF48 LDR X0, [X0 + 0x18]
	0x0365BF4C CBZ X0, 0x365C000
	0x0365BF50 MOV W19, W3
	0x0365BF54 MOV W21, W2
	0x0365BF58 MOV X22, X1
	0x0365BF5C MOV W1, W21
	0x0365BF60 BL 0x3658F78

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xD86000
	009 Move W8, [X20+1659]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xA99000
	016 Move X0, [X0+3584]
	017 Call 0x1C17CF4
	018 Move X0, 0xAE2000
	019 Move X0, [X0+2800]
	020 Call 0x1C17CF4
	021 Move X0, 0xADF000
	022 Move X0, [X0+672]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1659], W8
	026 Move X8, [X19+40]
	027 Compare X8, 0
	028 JumpIfNotEqual {104}
	029 Move X8, 0xAE2000
	030 Move X8, [X8+2800]
	031 Move X0, [X8]
	032 Call 0x1C17F10
	033 Move X1, X31
	034 Move X20, X0
	035 Call CollectionBase..ctor, X0
	036 Move X0, [X19+32]
	037 Move [X19+40], X20
	038 Compare X0, 0
	039 JumpIfEqual {103}
	040 Call X509CertificateCollection.GetEnumerator, X0
	041 Move X21, X0
	042 Compare X0, 0
	043 JumpIfEqual {114}
	044 Move X24, 0xADF000
	045 Move X24, [X24+672]
	046 Move X0, X21
	047 Call X509CertificateEnumerator.MoveNext, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {67}
	052 Move X0, X21
	053 Call X509CertificateEnumerator.get_Current, X0
	054 Move X23, X0
	055 Move X20, [X19+40]
	056 Move X0, [X24]
	057 Call 0x1C17F10
	058 Move X22, X0
	059 Move X1, X23
	060 Move X2, X31
	061 Call X509Certificate..ctor, X0, X1
	062 Compare X20, 0
	063 JumpIfEqual {113}
	064 Move X0, X20
	065 Move X1, X22
	066 Call X509Certificate2Collection.Add, X0, X1
	067 Move X20, X31
	068 Move W22, 3
	069 Move X23, 0xA99000
	070 Move X23, [X23+3584]
	071 Move X0, X21
	072 Move X1, [X23]
	073 Call 0x1C17E00
	074 Compare X0, 0
	075 JumpIfEqual {98}
	076 Move X8, [X0]
	077 Move X1, [X23]
	078 Move X21, X0
	079 NotImplemented "Instruction LDRH not yet implemented."
	080 Compare X9, 0
	081 JumpIfEqual {88}
	082 Move X10, [X8+176]
	083 Add X10, X10, 8
	084 NotImplemented "Instruction LDUR not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Subtract X9, X9, 1
	087 Add X10, X10, 16
	088 Move X0, X21
	089 Move W2, W31
	090 Call 0x1C5D788
	091 NotImplemented "Instruction LDRSW not yet implemented."
	092 Add X8, X8, X9
	093 Add X0, X8, 312
	094 Move X8, [X0]
	095 Move X1, [X0+8]
	096 Move X0, X21
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Compare X20, 0
	099 JumpIfNotEqual {115}
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Compare W22, 0
	102 JumpIfNotEqual {104}
	103 Move X8, [X19+40]
	104 Move X20, [X31+48]
	105 Move X19, [X31+56]
	106 Move X22, [X31+32]
	107 Move X21, [X31+40]
	108 Move X24, [X31+16]
	109 Move X23, [X31+24]
	110 Move X0, X8
	111 Move X30, [X31+64]
	112 Return X0
	113 Call 0x1C17F20
	114 Call 0x1C17F20
	115 Move X0, X20
	116 Call 0x1C17F18
	117 Move X22, X0
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X0, X22
	120 Call 0x3EB2AD0
	121 Move X20, [X0]
	122 Call 0x3EB2AE0
	123 Move W22, W31
	124 Move X20, X31
	125 Move X22, X0
	126 Move X23, 0xA99000
	127 Move X23, [X23+3584]
	128 Move X1, [X23]
	129 Move X0, X21
	130 Call 0x1C17E00
	131 Move X19, X0
	132 Compare X0, 0
	133 JumpIfEqual {155}
	134 Move X8, [X19]
	135 Move X1, [X23]
	136 NotImplemented "Instruction LDRH not yet implemented."
	137 Compare X9, 0
	138 JumpIfEqual {145}
	139 Move X10, [X8+176]
	140 Add X10, X10, 8
	141 NotImplemented "Instruction LDUR not yet implemented."
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Subtract X9, X9, 1
	144 Add X10, X10, 16
	145 Move X0, X19
	146 Move W2, W31
	147 Call 0x1C5D788
	148 NotImplemented "Instruction LDRSW not yet implemented."
	149 Add X8, X8, X9
	150 Add X0, X8, 312
	151 Move X8, [X0]
	152 Move X1, [X0+8]
	153 Move X0, X19
	154 NotImplemented "Instruction BLR not yet implemented."
	155 Compare X20, 0
	156 JumpIfNotEqual {159}
	157 Move X0, X22
	158 Call 0x1D2D690
	159 Move X0, X20
	160 Call 0x1C17F18
	161 Call 0x1991590

Method: System.Security.Cryptography.X509Certificates.X509RevocationFlag get_RevocationFlag()

Disassembly:
	0x0365DE64 STRB W8, [X20 + 0x698]
	0x0365DE68 CBZ X21, 0x365DFA0

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Security.Cryptography.X509Certificates.X509RevocationMode get_RevocationMode()

Disassembly:
	0x0365DE6C LDR X8, [X21 + 0x18]
	0x0365DE70 CBZ X8, 0x365DFA0

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_RevocationMode(System.Security.Cryptography.X509Certificates.X509RevocationMode value)

Disassembly:
	0x0365DE74 CBZ W8, 0x365DF48
	0x0365DE78 LDRB W9, [X21 + 0x20]
	0x0365DE7C CMP W9, 0x3
	0x0365DE80 B.NE 0x365DE98
	0x0365DE84 CMP W8, 0x3
	0x0365DE88 B.LT 0x365DEA0
	0x0365DE8C B.NE 0x365DEA8
	0x0365DE90 MOVZ W0, 0x4
	0x0365DE94 B 0x365DFA4
	0x0365DE98 MOVZ W0, 0x2
	0x0365DE9C B 0x365DFA4
	0x0365DEA0 MOVZ W0, 0x3
	0x0365DEA4 B 0x365DFA4
	0x0365DEA8 ADRP X8, 0xAC3000
	0x0365DEAC LDR X8, [X8 + 0xB98]
	0x0365DEB0 LDR X0, [X8]
	0x0365DEB4 BL 0x1C16F10
	0x0365DEB8 MOV X20, X0
	0x0365DEBC MOV X1, X21
	0x0365DEC0 MOV X2, X31
	0x0365DEC4 BL 0x31E7A44
	0x0365DEC8 CBZ X20, 0x365DF4C
	0x0365DECC MOV W21, W31
	0x0365DED0 MOVZ W22, 0x21

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move [X0+52], W1
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X0, 0xA9F000
	009 Move X0, [X0+1400]
	010 Call 0x1C17D08
	011 Call 0x1C17F10
	012 Move X19, X0
	013 Move X0, 0xAE0000
	014 Move X0, [X0+3272]
	015 Call 0x1C17D08
	016 Move X1, X0
	017 Move X0, X19
	018 Move X2, X31
	019 Call ArgumentException..ctor, X0, X1
	020 Move X0, 0xAE0000
	021 Move X0, [X0+3280]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Call 0x1C17DEC

Method: System.Security.Cryptography.X509Certificates.X509VerificationFlags get_VerificationFlags()

Disassembly:
	0x0365DED4 MOV X0, X20
	0x0365DED8 MOV X1, X31

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_VerificationFlags(System.Security.Cryptography.X509Certificates.X509VerificationFlags value)

Disassembly:
	0x0365DEDC BL 0x31E7D00
	0x0365DEE0 CBZ X0, 0x365DF3C
	0x0365DEE4 LDRSW X8, [X0 + 0x18]
	0x0365DEE8 SUB X23, X22, 0x20
	0x0365DEEC CMP X23, X8
	0x0365DEF0 B.GE 0x365DF24
	0x0365DEF4 MOV X0, X20
	0x0365DEF8 MOV X1, X31
	0x0365DEFC BL 0x31E7D00
	0x0365DF00 CBZ X0, 0x365DF40
	0x0365DF04 LDR W8, [X0 + 0x18]
	0x0365DF08 CMP X23, X8
	0x0365DF0C B.CS 0x365DF44
	0x0365DF10 LDRB W8, [X0, X22, LSL]
	0x0365DF14 ADD X22, X22, 0x1
	0x0365DF18 BFM W8, W21, 0x18, 0x17
	0x0365DF1C MOV W21, W8
	0x0365DF20 B 0x365DED4
	0x0365DF24 MOVN W8, 0x80FF
	0x0365DF28 ANDS W31, W21, W8, 0x0
	0x0365DF2C MOV W0, W31
	0x0365DF30 CSEL W8, W21, W31, EQ
	0x0365DF34 STR W8, [X19 + 0x24]
	0x0365DF38 B 0x365DFA4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move [X0+64], W1
	005 Move X30, [X31+16]
	006 Move X19, [X31+24]
	007 Return 
	008 Move X0, 0xA9F000
	009 Move X0, [X0+1400]
	010 Call 0x1C17D08
	011 Call 0x1C17F10
	012 Move X19, X0
	013 Move X0, 0xAE0000
	014 Move X0, [X0+3288]
	015 Call 0x1C17D08
	016 Move X1, X0
	017 Move X0, X19
	018 Move X2, X31
	019 Call ArgumentException..ctor, X0, X1
	020 Move X0, 0xAE0000
	021 Move X0, [X0+3296]
	022 Call 0x1C17D08
	023 Move X1, X0
	024 Move X0, X19
	025 Call 0x1C17DEC

Method: System.DateTime get_VerificationTime()

Disassembly:
	0x0365DF3C BL 0x1C16F20
	0x0365DF40 BL 0x1C16F20

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void Reset()

Disassembly:
	0x0365DD7C STR X30, [X31 - 0x20]!
	0x0365DD80 STP X20, X19, [X31 + 0x10]
	0x0365DD84 ADRP X20, 0xD83000
	0x0365DD88 LDRB W8, [X20 + 0x690]
	0x0365DD8C MOV X19, X0
	0x0365DD90 TBNZ X8, 0x0, 0x365DDA8
	0x0365DD94 ADRP X0, 0xA96000
	0x0365DD98 LDR X0, [X0 + 0xE18]
	0x0365DD9C BL 0x1C16CF4
	0x0365DDA0 MOVZ W8, 0x1
	0x0365DDA4 STRB W8, [X20 + 0x690]
	0x0365DDA8 LDR X19, [X19 + 0x10]
	0x0365DDAC CBZ X19, 0x365DE1C
	0x0365DDB0 ADRP X10, 0xA96000
	0x0365DDB4 LDR X8, [X19]
	0x0365DDB8 LDR X10, [X10 + 0xE18]
	0x0365DDBC LDRH W9, [X8 + 0x12E]
	0x0365DDC0 LDR X1, [X10]
	0x0365DDC4 CBZ X9, 0x365DDE8
	0x0365DDC8 LDR X10, [X8 + 0xB0]
	0x0365DDCC ADD X10, X10, 0x8
	0x0365DDD0 LDUR X11, [X10 - 0x8]
	0x0365DDD4 CMP X11, X1
	0x0365DDD8 B.EQ 0x365DDF8
	0x0365DDDC SUBS X9, X9, 0x1
	0x0365DDE0 ADD X10, X10, 0x10
	0x0365DDE4 B.NE 0x365DDD0
	0x0365DDE8 MOVZ W2, 0x2
	0x0365DDEC MOV X0, X19
	0x0365DDF0 BL 0x1C5C788
	0x0365DDF4 B 0x365DE08
	0x0365DDF8 LDR W9, [X10]
	0x0365DDFC ADD W9, W9, 0x2
	0x0365DE00 ADD X8, X8, W9, 0x4, SXTW
	0x0365DE04 ADD X0, X8, 0x138
	0x0365DE08 LDP X2, X1, [X0]
	0x0365DE0C MOV X0, X19
	0x0365DE10 LDP X20, X19, [X31 + 0x10]
	0x0365DE14 LDR X30, [X31], #0x20
	0x0365DE18 BR X2
	0x0365DE1C BL 0x1C16F20
	0x0365DE20 CBZ X0, 0x365DE30
	0x0365DE24 LDR X8, [X0]
	0x0365DE28 LDP X2, X1, [X8 + 0x188]
	0x0365DE2C BR X2
	0x0365DE30 RET
	0x0365DE34 STP X30, X23, [X31 - 0x30]!
	0x0365DE38 STP X22, X21, [X31 + 0x10]
	0x0365DE3C STP X20, X19, [X31 + 0x20]
	0x0365DE40 ADRP X20, 0xD83000
	0x0365DE44 LDRB W8, [X20 + 0x698]
	0x0365DE48 MOV X21, X1
	0x0365DE4C MOV X19, X0
	0x0365DE50 TBNZ X8, 0x0, 0x365DE68
	0x0365DE54 ADRP X0, 0xAC3000
	0x0365DE58 LDR X0, [X0 + 0xB98]
	0x0365DE5C BL 0x1C16CF4
	0x0365DE60 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xD84000
	008 Move X23, 0xAE0000
	009 Move X21, 0xA99000
	010 Move W8, [X20+1660]
	011 Move X23, [X23+3264]
	012 Move X21, [X21+1392]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xA98000
	019 Move X0, [X0+2544]
	020 Call 0x1C17CF4
	021 Move X0, 0xAE0000
	022 Move X0, [X0+3264]
	023 Call 0x1C17CF4
	024 Move X0, 0xA99000
	025 Move X0, [X0+1392]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1660], W8
	029 Move X0, [X23]
	030 Move X22, 0xA98000
	031 Move X22, [X22+2544]
	032 Call 0x1C17F10
	033 Move X20, X0
	034 Call OidCollection..ctor, X0
	035 Move [X19+16], X20
	036 Move X0, [X23]
	037 Call 0x1C17F10
	038 Move X20, X0
	039 Call OidCollection..ctor, X0
	040 Move X8, -45543424
	041 Move V0, [X8+2584]
	042 Move [X19+24], X20
	043 Move [X19+40], X31
	044 Move [X19+48], D0
	045 Move X0, [X21]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1C17DFC
	050 Move X0, [X21]
	051 Move X8, [X0+184]
	052 Move X8, [X8]
	053 Move [X19+64], W31
	054 Move [X19+56], X8
	055 Move X0, [X22]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X31
	061 Call DateTime.get_Now
	062 Move [X19+72], X0
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Move X23, [X31+56]
	069 Return 

