Type: System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono

Method: System.Boolean get_IsValid()

Disassembly:
	0x03657054 B 0x3657080
	0x03657058 B 0x3657134
	0x0365705C B 0x3657134
	0x03657060 B 0x3657134

ISIL:
	001 Move X8, [X0+184]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void .ctor(Mono.Security.X509.X509Certificate cert)

Disassembly:
	0x03657064 B 0x3657134
	0x03657068 B 0x3657134
	0x0365706C B 0x3657134
	0x03657070 B 0x3657134
	0x03657074 B 0x3657134
	0x03657078 B 0x3657080
	0x0365707C B 0x3657080
	0x03657080 MOV X25, X0
	0x03657084 CMP W1, 0x1
	0x03657088 B.NE 0x36570A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call X509CertificateImpl..ctor, X0
	008 Move [X20+184], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void .ctor(System.Security.Cryptography.X509Certificates.X509Certificate2ImplMono other)

Disassembly:
	0x03657094 LDR X19, [X0]
	0x03657098 BL 0x3EB1AE0
	0x0365709C B 0x3656F08
	0x036570A0 MOV X19, X31
	0x036570A4 B 0x36570AC
	0x036570A8 MOV X25, X0
	0x036570AC LDR X1, [X26]
	0x036570B0 MOV X0, X20
	0x036570B4 BL 0x1C16E00
	0x036570B8 MOV X20, X0
	0x036570BC CBZ X0, 0x3657118
	0x036570C0 LDR X8, [X20]
	0x036570C4 LDR X1, [X26]
	0x036570C8 LDRH W9, [X8 + 0x12E]
	0x036570CC CBZ X9, 0x36570F0
	0x036570D0 LDR X10, [X8 + 0xB0]
	0x036570D4 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X31
	006 Move X19, X0
	007 Call X509CertificateImpl..ctor, X0
	008 Compare X20, 0
	009 JumpIfEqual {21}
	010 Move X8, [X20+184]
	011 Move [X19+184], X8
	012 Move X0, [X20+176]
	013 Compare X0, 0
	014 JumpIfEqual {17}
	015 Call X509CertificateImplCollection.Clone, X0
	016 Move [X19+176], X0
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 
	021 Call 0x1C17F20

Method: System.Void .ctor(System.Byte[] rawData, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags)

Disassembly:
	0x03657130 B 0x3657134
	0x03657134 MOV X25, X0
	0x03657138 CMP W1, 0x1
	0x0365713C B.NE 0x365715C
	0x03657140 MOV X0, X25
	0x03657144 BL 0x3EB1AD0
	0x03657148 LDR X24, [X0]
	0x0365714C BL 0x3EB1AE0
	0x03657150 MOV W25, W31
	0x03657154 MOV X21, X31
	0x03657158 B 0x3656D08
	0x0365715C MOV X24, X31
	0x03657160 B 0x3657168
	0x03657164 MOV X25, X0
	0x03657168 ADRP X20, 0xA9C000
	0x0365716C LDR X20, [X20 + 0xE00]
	0x03657170 LDR X1, [X20]
	0x03657174 MOV X0, X23
	0x03657178 BL 0x1C16E00
	0x0365717C MOV X19, X0
	0x03657180 CBZ X0, 0x36571DC
	0x03657184 LDR X8, [X19]
	0x03657188 LDR X1, [X20]
	0x0365718C LDRH W9, [X8 + 0x12E]
	0x03657190 CBZ X9, 0x36571B4
	0x03657194 LDR X10, [X8 + 0xB0]
	0x03657198 ADD X10, X10, 0x8
	0x0365719C LDUR X11, [X10 - 0x8]
	0x036571A0 CMP X11, X1
	0x036571A4 B.EQ 0x36571C4
	0x036571A8 SUBS X9, X9, 0x1
	0x036571AC ADD X10, X10, 0x10
	0x036571B0 B.NE 0x365719C
	0x036571B4 MOV X0, X19
	0x036571B8 MOV W2, W31
	0x036571BC BL 0x1C5C788
	0x036571C0 B 0x36571D0
	0x036571C4 LDRSW X9, [X10]
	0x036571C8 ADD X8, X8, X9, 0x4, LSL
	0x036571CC ADD X0, X8, 0x138
	0x036571D0 LDP X8, X1, [X0]
	0x036571D4 MOV X0, X19
	0x036571D8 BLR X8
	0x036571DC CBNZ X24, 0x36571E8
	0x036571E0 MOV X0, X25
	0x036571E4 BL 0x1D2C690
	0x036571E8 MOV X0, X24
	0x036571EC BL 0x1C16F18
	0x036571F0 BL 0x1990590
	0x036571F4 STR X30, [X31 - 0x30]!
	0x036571F8 STP X22, X21, [X31 + 0x10]
	0x036571FC STP X20, X19, [X31 + 0x20]
	0x03657200 ADRP X22, 0xD89000
	0x03657204 ADRP X21, 0xAE5000
	0x03657208 ADRP X20, 0xAE5000
	0x0365720C LDRB W8, [X22 + 0x64A]
	0x03657210 LDR X21, [X21 + 0xB80]
	0x03657214 LDR X20, [X20 + 0xB88]
	0x03657218 MOV X19, X0
	0x0365721C TBNZ X8, 0x0, 0x3657240
	0x03657220 ADRP X0, 0xAE5000
	0x03657224 LDR X0, [X0 + 0xB88]
	0x03657228 BL 0x1C16CF4
	0x0365722C ADRP X0, 0xAE5000
	0x03657230 LDR X0, [X0 + 0xB80]
	0x03657234 BL 0x1C16CF4
	0x03657238 MOVZ W8, 0x1
	0x0365723C STRB W8, [X22 + 0x64A]
	0x03657240 MOV X0, X19
	0x03657244 MOV X1, X31
	0x03657248 BL 0x33BDD8C
	0x0365724C LDR X0, [X21]
	0x03657250 BL 0x1C16F10
	0x03657254 LDR X1, [X20]
	0x03657258 MOV X20, X0
	0x0365725C BL 0x301B7C4
	0x03657260 STR X20, [X19 + 0x10]
	0x03657264 LDP X20, X19, [X31 + 0x20]
	0x03657268 LDP X22, X21, [X31 + 0x10]
	0x0365726C LDR X30, [X31], #0x30
	0x03657270 RET
	0x03657274 STR X30, [X31 - 0x30]!
	0x03657278 STP X22, X21, [X31 + 0x10]
	0x0365727C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD8A000
	007 Move W8, [X22+1590]
	008 Move X21, X2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAE3000
	016 Move X0, [X0+472]
	017 Call 0x1C17CF4
	018 Move X0, 0xACA000
	019 Move X0, [X0+3264]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1590], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Call X509CertificateImpl..ctor, X0
	026 Move X0, X20
	027 Call X509Certificate2.GetCertContentType, X0
	028 Subtract W8, W0, 1
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X9, -44822528
	031 Add X9, X9, 1578
	032 NotImplemented "Instruction ADR not yet implemented."
	033 Move W11, [X9]
	034 Add X10, X10, X11
	035 CallNoReturn X10
	036 Move X8, 0xACA000
	037 Move X8, [X8+3264]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X1, X20
	041 Move X2, X31
	042 Move X21, X0
	043 Call X509Certificate..ctor, X0, X1
	044 Move [X19+184], X21
	045 Move X0, X19
	046 Move X1, X20
	047 Move X2, X21
	048 Call X509Certificate2ImplMono.ImportPkcs12, X0, X1, X2
	049 Move [X19+184], X0
	050 Move X8, 0xAE3000
	051 Move X8, [X8+472]
	052 Move X0, [X8]
	053 Call 0x1C17F10
	054 Move X1, X20
	055 Move X2, X31
	056 Move X21, X0
	057 Call AuthenticodeDeformatter..ctor, X0, X1
	058 Compare X21, 0
	059 JumpIfEqual {90}
	060 Move X8, [X21+112]
	061 Move [X19+184], X8
	062 Compare X8, 0
	063 JumpIfEqual {70}
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 
	070 Move X0, 0xAE6000
	071 Move X0, [X0+2904]
	072 Call 0x1C17D08
	073 Move X1, X31
	074 Call Locale.GetText, X0
	075 Move X19, X0
	076 Move X0, 0xACA000
	077 Move X0, [X0+3296]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X1, X19
	081 Move X2, X31
	082 Move X20, X0
	083 Call CryptographicException..ctor, X0, X1
	084 Move X0, 0xAE6000
	085 Move X0, [X0+2912]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X20
	089 Call 0x1C17DEC
	090 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509CertificateImpl Clone()

Disassembly:
	0x036572D8 LDR W10, [X0 + 0x1C]
	0x036572DC LDR X8, [X0 + 0x10]
	0x036572E0 LDR X9, [X9]
	0x036572E4 ADD W10, W10, 0x1
	0x036572E8 STR W10, [X0 + 0x1C]
	0x036572EC CBZ X8, 0x3657340
	0x036572F0 LDRSW X10, [X0 + 0x18]
	0x036572F4 LDR W11, [X8 + 0x18]
	0x036572F8 CMP W10, W11
	0x036572FC B.CS 0x3657320
	0x03657300 ADD W9, W10, 0x1
	0x03657304 ADD X8, X8, X10, 0x3, LSL
	0x03657308 STR W9, [X0 + 0x18]
	0x0365730C STR X19, [X8 + 0x20]
	0x03657310 LDP X20, X19, [X31 + 0x20]
	0x03657314 LDP X22, X21, [X31 + 0x10]
	0x03657318 LDR X30, [X31], #0x30
	0x0365731C RET
	0x03657320 LDR X8, [X9 + 0x20]
	0x03657324 MOV X1, X19
	0x03657328 LDP X20, X19, [X31 + 0x20]
	0x0365732C LDP X22, X21, [X31 + 0x10]
	0x03657330 LDR X8, [X8 + 0xC0]
	0x03657334 LDR X2, [X8 + 0x70]
	0x03657338 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD8A000
	006 Move X20, 0xAE3000
	007 Move W8, [X21+1591]
	008 Move X20, [X20+448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAE3000
	015 Move X0, [X0+448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1591], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call X509CertificateImpl.ThrowIfContextInvalid, X0
	022 Move X0, [X20]
	023 Call 0x1C17F10
	024 Move X1, X19
	025 Move X20, X0
	026 Call X509Certificate2ImplMono..ctor, X0, X1
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: Mono.Security.X509.X509Certificate get_Cert()

Disassembly:
	0x0365733C B 0x301BF90
	0x03657340 BL 0x1C16F20
	0x03657344 STR X30, [X31 - 0x20]!
	0x03657348 STP X20, X19, [X31 + 0x10]
	0x0365734C LDR X8, [X0 + 0xB8]
	0x03657350 CBZ X8, 0x3657370
	0x03657354 MOV X19, X1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call X509CertificateImpl.ThrowIfContextInvalid, X0
	006 Move X0, [X19+184]
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return X0

Method: System.Byte[] GetRawCertData()

Disassembly:
	0x03657358 BL 0x36573D0
	0x0365735C CBZ X0, 0x36573CC
	0x03657360 MOV X1, X19
	0x03657364 LDP X20, X19, [X31 + 0x10]
	0x03657368 LDR X30, [X31], #0x20
	0x0365736C B 0x3657430
	0x03657370 ADRP X19, 0xAE2000
	0x03657374 LDR X19, [X19 + 0x1C0]
	0x03657378 MOV X0, X19
	0x0365737C BL 0x1C16D08
	0x03657380 BL 0x19903D0
	0x03657384 MOV X0, X19
	0x03657388 BL 0x1C16D08
	0x0365738C LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call X509CertificateImpl.ThrowIfContextInvalid, X0
	006 Move X0, X19
	007 Move X1, X31
	008 Call X509CertificateImpl.ThrowIfContextInvalid, X0
	009 Move X0, [X19+184]
	010 Compare X0, 0
	011 JumpIfEqual {18}
	012 Move X8, [X0]
	013 Move X2, [X8+504]
	014 Move X1, [X8+512]
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 CallNoReturn X2
	018 Call 0x1C17F20

Method: System.Boolean get_HasPrivateKey()

Disassembly:
	0x03657390 ADRP X0, 0xAC9000
	0x03657394 LDR X19, [X8]
	0x03657398 LDR X0, [X0 + 0xCE0]
	0x0365739C BL 0x1C16D08
	0x036573A0 BL 0x1C16F10
	0x036573A4 MOV X1, X19
	0x036573A8 MOV X2, X31
	0x036573AC MOV X20, X0
	0x036573B0 BL 0x3252170

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Move X9, [X8+680]
	004 Move X1, [X8+688]
	005 NotImplemented "Instruction BLR not yet implemented."
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Move X30, [X31+16]
	009 Return X0

Method: System.Security.Cryptography.AsymmetricAlgorithm get_PrivateKey()

Disassembly:
	0x036573B4 ADRP X0, 0xAE5000
	0x036573B8 LDR X0, [X0 + 0xB98]
	0x036573BC BL 0x1C16D08
	0x036573C0 MOV X1, X0
	0x036573C4 MOV X0, X20
	0x036573C8 BL 0x1C16DEC
	0x036573CC BL 0x1C16F20
	0x036573D0 STR X30, [X31 - 0x20]!
	0x036573D4 STP X20, X19, [X31 + 0x10]
	0x036573D8 ADRP X19, 0xD89000
	0x036573DC ADRP X20, 0xAE2000
	0x036573E0 LDRB W8, [X19 + 0x652]
	0x036573E4 LDR X20, [X20 + 0x340]
	0x036573E8 TBNZ X8, 0x0, 0x3657400
	0x036573EC ADRP X0, 0xAE2000
	0x036573F0 LDR X0, [X0 + 0x340]
	0x036573F4 BL 0x1C16CF4
	0x036573F8 MOVZ W8, 0x1
	0x036573FC STRB W8, [X19 + 0x652]
	0x03657400 LDR X0, [X20]
	0x03657404 BL 0x1C16F10
	0x03657408 MOV X1, X31
	0x0365740C MOV X19, X0
	0x03657410 BL 0x33BDD8C
	0x03657414 MOV W0, W31
	0x03657418 BL 0x36586F0
	0x0365741C STR X0, [X19 + 0x10]
	0x03657420 MOV X0, X19
	0x03657424 LDP X20, X19, [X31 + 0x10]
	0x03657428 LDR X30, [X31], #0x20
	0x0365742C RET
	0x03657430 STR X30, [X31 - 0x20]!
	0x03657434 STP X20, X19, [X31 + 0x10]
	0x03657438 MOV X20, X0
	0x0365743C LDR X0, [X0 + 0x10]
	0x03657440 MOV X19, X1
	0x03657444 BL 0x365865C
	0x03657448 LDR X0, [X20 + 0x10]
	0x0365744C CBZ X0, 0x3657468
	0x03657450 LDR X8, [X0]
	0x03657454 MOV X1, X19
	0x03657458 LDP X20, X19, [X31 + 0x10]
	0x0365745C LDP X3, X2, [X8 + 0x1B8]
	0x03657460 LDR X30, [X31], #0x20
	0x03657464 BR X3
	0x03657468 BL 0x1C16F20
	0x0365746C LDR X0, [X0 + 0xB0]
	0x03657470 RET
	0x03657474 LDR X0, [X0 + 0xB8]
	0x03657478 RET
	0x0365747C STP X30, X23, [X31 - 0x30]!
	0x03657480 STP X22, X21, [X31 + 0x10]
	0x03657484 STP X20, X19, [X31 + 0x20]
	0x03657488 ADRP X22, 0xD89000
	0x0365748C ADRP X23, 0xACC000
	0x03657490 ADRP X20, 0xAE2000
	0x03657494 ADRP X21, 0xA9C000
	0x03657498 ADRP X19, 0xAE2000
	0x0365749C LDRB W8, [X22 + 0x63D]
	0x036574A0 LDR X23, [X23 + 0x9F0]
	0x036574A4 LDR X20, [X20 + 0x1C0]
	0x036574A8 LDR X21, [X21 + 0x618]
	0x036574AC LDR X19, [X19 + 0x1F8]
	0x036574B0 TBNZ X8, 0x0, 0x36574EC
	0x036574B4 ADRP X0, 0xA9C000
	0x036574B8 LDR X0, [X0 + 0x618]
	0x036574BC BL 0x1C16CF4
	0x036574C0 ADRP X0, 0xAE2000
	0x036574C4 LDR X0, [X0 + 0x1F8]
	0x036574C8 BL 0x1C16CF4
	0x036574CC ADRP X0, 0xAE2000
	0x036574D0 LDR X0, [X0 + 0x1C0]
	0x036574D4 BL 0x1C16CF4
	0x036574D8 ADRP X0, 0xACC000
	0x036574DC LDR X0, [X0 + 0x9F0]
	0x036574E0 BL 0x1C16CF4
	0x036574E4 MOVZ W8, 0x1
	0x036574E8 STRB W8, [X22 + 0x63D]
	0x036574EC LDR X0, [X23]
	0x036574F0 MOV X1, X31
	0x036574F4 BL 0x320A160
	0x036574F8 LDR X8, [X20]
	0x036574FC MOVZ W1, 0x9
	0x03657500 LDR X8, [X8 + 0xB8]
	0x03657504 STR X0, [X8]
	0x03657508 LDR X0, [X21]
	0x0365750C BL 0x1C16D6C
	0x03657510 LDR X1, [X19]
	0x03657514 MOV X2, X31
	0x03657518 MOV X19, X0
	0x0365751C BL 0x32C5BD8
	0x03657520 LDR X8, [X20]
	0x03657524 LDP X22, X21, [X31 + 0x10]
	0x03657528 LDR X8, [X8 + 0xB8]
	0x0365752C STR X19, [X8 + 0x8]
	0x03657530 LDP X20, X19, [X31 + 0x20]
	0x03657534 LDP X30, X23, [X31], #0x30
	0x03657538 RET
	0x0365753C SUB X31, X31, 0xC0
	0x03657540 STR X30, [X31 + 0xA0]
	0x03657544 STP X20, X19, [X31 + 0xB0]
	0x03657548 LDRB W8, [X0 + 0x10]
	0x0365754C CBNZ W8, 0x36575AC
	0x03657550 MOV X1, X31
	0x03657554 MOV X19, X0
	0x03657558 BL 0x326C218
	0x0365755C LDR X8, [X19]
	0x03657560 MOV X0, X19
	0x03657564 LDR X9, [X8 + 0x338]
	0x03657568 LDR X1, [X8 + 0x340]
	0x0365756C BLR X9
	0x03657570 MOV X20, X0
	0x03657574 ADD X0, X31, 0x8
	0x03657578 MOVZ W2, 0x98
	0x0365757C MOV W1, W31
	0x03657580 BL 0x3EB1B10
	0x03657584 ADD X0, X31, 0x8
	0x03657588 MOV X1, X20
	0x0365758C MOV X2, X31
	0x03657590 BL 0x35F2E60
	0x03657594 ADD X0, X19, 0x18
	0x03657598 ADD X1, X31, 0x8
	0x0365759C MOVZ W2, 0x98
	0x036575A0 BL 0x3EB1AC0
	0x036575A4 MOVZ W8, 0x1
	0x036575A8 STRB W8, [X19 + 0x10]
	0x036575AC LDP X20, X19, [X31 + 0xB0]
	0x036575B0 LDR X30, [X31 + 0xA0]
	0x036575B4 ADD X31, X31, 0xC0
	0x036575B8 RET
	0x036575BC STP X30, X19, [X31 - 0x10]!
	0x036575C0 MOV X19, X0
	0x036575C4 BL 0x365753C
	0x036575C8 LDR X0, [X19 + 0x68]
	0x036575CC LDP X30, X19, [X31], #0x10
	0x036575D0 RET
	0x036575D4 STP X30, X19, [X31 - 0x10]!
	0x036575D8 MOV X19, X0
	0x036575DC BL 0x365753C
	0x036575E0 LDR X0, [X19 + 0x70]
	0x036575E4 LDP X30, X19, [X31], #0x10
	0x036575E8 RET
	0x036575EC STP X30, X19, [X31 - 0x10]!
	0x036575F0 MOV X19, X0
	0x036575F4 BL 0x365753C
	0x036575F8 LDR X0, [X19 + 0x78]
	0x036575FC LDP X30, X19, [X31], #0x10
	0x03657600 RET
	0x03657604 STP X30, X19, [X31 - 0x10]!
	0x03657608 MOV X19, X0
	0x0365760C BL 0x365753C
	0x03657610 LDR X0, [X19 + 0x30]
	0x03657614 LDP X30, X19, [X31], #0x10
	0x03657618 RET
	0x0365761C STP X30, X19, [X31 - 0x10]!
	0x03657620 MOV X19, X0
	0x03657624 BL 0x365753C
	0x03657628 LDR X0, [X19 + 0x98]
	0x0365762C LDP X30, X19, [X31], #0x10
	0x03657630 RET
	0x03657634 STP X30, X19, [X31 - 0x10]!
	0x03657638 MOV X19, X0
	0x0365763C BL 0x365753C
	0x03657640 LDR W8, [X19 + 0x28]
	0x03657644 ADD W0, W8, 0x1
	0x03657648 LDP X30, X19, [X31], #0x10
	0x0365764C RET
	0x03657650 STP X30, X19, [X31 - 0x10]!
	0x03657654 MOV X19, X0
	0x03657658 BL 0x365753C
	0x0365765C LDR X0, [X19 + 0x60]
	0x03657660 LDP X30, X19, [X31], #0x10
	0x03657664 RET
	0x03657668 STP X30, X19, [X31 - 0x10]!
	0x0365766C MOV X19, X0
	0x03657670 BL 0x365753C
	0x03657674 LDR X0, [X19 + 0x48]
	0x03657678 LDP X30, X19, [X31], #0x10
	0x0365767C RET
	0x03657680 STR X30, [X31 - 0x10]!
	0x03657684 LDR X8, [X0]
	0x03657688 LDR X9, [X8 + 0x2D8]
	0x0365768C LDR X1, [X8 + 0x2E0]
	0x03657690 BLR X9
	0x03657694 CBZ X0, 0x36576A4
	0x03657698 LDR X0, [X0 + 0x20]
	0x0365769C LDR X30, [X31], #0x10
	0x036576A0 RET
	0x036576A4 BL 0x1C16F20
	0x036576A8 STR X30, [X31 - 0x10]!
	0x036576AC LDR X8, [X0]
	0x036576B0 LDR X9, [X8 + 0x298]
	0x036576B4 LDR X1, [X8 + 0x2A0]
	0x036576B8 BLR X9
	0x036576BC CBZ X0, 0x36576CC
	0x036576C0 LDR X0, [X0 + 0x20]
	0x036576C4 LDR X30, [X31], #0x10
	0x036576C8 RET
	0x036576CC BL 0x1C16F20
	0x036576D0 STP X30, X19, [X31 - 0x10]!
	0x036576D4 MOV X19, X0
	0x036576D8 BL 0x365753C
	0x036576DC LDR X0, [X19 + 0x18]
	0x036576E0 LDP X30, X19, [X31], #0x10
	0x036576E4 RET
	0x036576E8 STR X30, [X31 - 0x30]!
	0x036576EC STP X22, X21, [X31 + 0x10]
	0x036576F0 STP X20, X19, [X31 + 0x20]
	0x036576F4 ADRP X19, 0xD89000
	0x036576F8 LDRB W8, [X19 + 0x63E]
	0x036576FC MOV X20, X0
	0x03657700 TBNZ X8, 0x0, 0x3657718
	0x03657704 ADRP X0, 0xA9C000
	0x03657708 LDR X0, [X0 + 0xE00]
	0x0365770C BL 0x1C16CF4
	0x03657710 MOVZ W8, 0x1
	0x03657714 STRB W8, [X19 + 0x63E]
	0x03657718 ADRP X22, 0xA9C000
	0x0365771C LDR X22, [X22 + 0xE00]
	0x03657720 MOV X0, X20
	0x03657724 BL 0x365753C
	0x03657728 MOV X0, X31
	0x0365772C BL 0x325D0E8
	0x03657730 MOV X19, X0
	0x03657734 CBZ X0, 0x36577C0
	0x03657738 LDR X1, [X20 + 0x18]
	0x0365773C MOV X0, X19
	0x03657740 MOV X2, X31
	0x03657744 BL 0x32513F4
	0x03657748 MOV X21, X0
	0x0365774C MOV X20, X31
	0x03657750 LDR X8, [X19]
	0x03657754 LDR X1, [X22]
	0x03657758 LDRH W9, [X8 + 0x12E]
	0x0365775C CBZ X9, 0x3657780
	0x03657760 LDR X10, [X8 + 0xB0]
	0x03657764 ADD X10, X10, 0x8
	0x03657768 LDUR X11, [X10 - 0x8]
	0x0365776C CMP X11, X1
	0x03657770 B.EQ 0x3657790
	0x03657774 SUBS X9, X9, 0x1
	0x03657778 ADD X10, X10, 0x10
	0x0365777C B.NE 0x3657768
	0x03657780 MOV X0, X19
	0x03657784 MOV W2, W31
	0x03657788 BL 0x1C5C788
	0x0365778C B 0x365779C
	0x03657790 LDRSW X9, [X10]
	0x03657794 ADD X8, X8, X9, 0x4, LSL
	0x03657798 ADD X0, X8, 0x138
	0x0365779C LDP X8, X1, [X0]
	0x036577A0 MOV X0, X19
	0x036577A4 BLR X8
	0x036577A8 CBNZ X20, 0x36577C4

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+144], X20
	004 Move [X31+152], X19
	005 Move X19, 0xD8A000
	006 Move W8, [X19+1592]
	007 Move X20, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xACA000
	013 Move X0, [X0+3904]
	014 Call 0x1C17CF4
	015 Move X0, 0xACB000
	016 Move X0, [X0+416]
	017 Call 0x1C17CF4
	018 Move X0, 0xACB000
	019 Move X0, [X0+1752]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+1592], W8
	023 Move X0, [X20+184]
	024 Compare X0, 0
	025 JumpIfEqual {224}
	026 Move X8, [X0]
	027 Move X9, [X8+472]
	028 Move X1, [X8+480]
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Compare X0, 0
	031 JumpIfEqual {37}
	032 Move X19, 0xACB000
	033 Move X19, [X19+416]
	034 Move X9, [X0]
	035 Move X8, [X19]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, [X20+184]
	038 Compare X0, 0
	039 JumpIfEqual {247}
	040 Move X8, [X0]
	041 Move X9, [X8+472]
	042 Move X1, [X8+480]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X0, 0
	045 JumpIfEqual {57}
	046 Move X19, 0xACB000
	047 Move X19, [X19+1752]
	048 Move X9, [X0]
	049 Move X8, [X19]
	050 Move W11, [X9+304]
	051 Move W10, [X8+304]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X9, [X9+200]
	054 Add X9, X9, X10
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, [X20+184]
	058 Compare X0, 0
	059 JumpIfEqual {248}
	060 Move X1, X31
	061 Call X509Certificate.get_DSA, X0
	062 Compare X0, 0
	063 JumpIfEqual {173}
	064 Move X19, 0xACA000
	065 Move X19, [X19+3904]
	066 Move X9, [X0]
	067 Move X8, [X19]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X1, X31
	070 Call DSACryptoServiceProvider.get_PublicOnly, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {173}
	075 Move X0, [X19]
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X1, X31
	079 Call DSACryptoServiceProvider..ctor, X0
	080 Move X0, [X20+184]
	081 Compare X0, 0
	082 JumpIfEqual {252}
	083 Move X1, X31
	084 Call X509Certificate.get_DSA, X0
	085 Compare X0, 0
	086 JumpIfEqual {253}
	087 Move X8, [X0]
	088 Move X9, [X8+488]
	089 Move X2, [X8+496]
	090 Add X8, X31, 64
	091 Move W1, 1
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Move V0, [X31+64]
	094 Move V1, [X31+80]
	095 Move V2, [X31+96]
	096 Move V3, [X31+112]
	097 Move [X31], V0
	098 Move [X31+8], V1
	099 Move [X31+32], V2
	100 Move [X31+40], V3
	101 Compare X19, 0
	102 JumpIfEqual {254}
	103 Move X8, [X19]
	104 Move V0, [X31]
	105 Move V1, [X31+16]
	106 Move V2, [X31+32]
	107 Move V3, [X31+48]
	108 Move X9, [X8+504]
	109 Move [X31+64], V0
	110 Move [X31+72], V1
	111 Move [X31+96], V2
	112 Move [X31+104], V3
	113 Move X2, [X8+512]
	114 Add X1, X31, 64
	115 Move X0, X19
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Move X1, X31
	118 Call RSACryptoServiceProvider.get_PublicOnly, X0
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {173}
	123 Move X0, [X19]
	124 Call 0x1C17F10
	125 Move X19, X0
	126 Move X1, X31
	127 Call RSACryptoServiceProvider..ctor, X0
	128 Move X0, [X20+184]
	129 Compare X0, 0
	130 JumpIfEqual {249}
	131 Move X8, [X0]
	132 Move X9, [X8+472]
	133 Move X1, [X8+480]
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Compare X0, 0
	136 JumpIfEqual {250}
	137 Move X8, [X0]
	138 Move X9, [X8+488]
	139 Move X2, [X8+496]
	140 Add X8, X31, 64
	141 Move W1, 1
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Move V0, [X31+64]
	144 Move V1, [X31+80]
	145 Move V2, [X31+96]
	146 Move V3, [X31+112]
	147 Move [X31], V0
	148 Move [X31+8], V1
	149 Move [X31+32], V2
	150 Move [X31+40], V3
	151 Compare X19, 0
	152 JumpIfEqual {251}
	153 Move X8, [X19]
	154 Move V0, [X31]
	155 Move V1, [X31+16]
	156 Move V2, [X31+32]
	157 Move V3, [X31+48]
	158 Move X9, [X8+504]
	159 Move [X31+64], V0
	160 Move [X31+72], V1
	161 Move [X31+96], V2
	162 Move [X31+104], V3
	163 Move X2, [X8+512]
	164 Add X1, X31, 64
	165 Move X0, X19
	166 NotImplemented "Instruction BLR not yet implemented."
	167 Move X1, X31
	168 Call RSAManaged.get_PublicOnly, X0
	169 Move TEMP, X0
	170 And TEMP, TEMP, 1
	171 Compare TEMP, 1
	172 JumpIfNotEqual {180}
	173 Move X19, X31
	174 Move X0, X19
	175 Move X20, [X31+144]
	176 Move X19, [X31+152]
	177 Move X30, [X31+128]
	178 Add X31, X31, 160
	179 Return X0
	180 Move X0, [X19]
	181 Call 0x1C17F10
	182 Move X19, X0
	183 Move X1, X31
	184 Call RSAManaged..ctor, X0
	185 Move X0, [X20+184]
	186 Compare X0, 0
	187 JumpIfEqual {255}
	188 Move X8, [X0]
	189 Move X9, [X8+472]
	190 Move X1, [X8+480]
	191 NotImplemented "Instruction BLR not yet implemented."
	192 Compare X0, 0
	193 JumpIfEqual {256}
	194 Move X8, [X0]
	195 Move X9, [X8+488]
	196 Move X2, [X8+496]
	197 Add X8, X31, 64
	198 Move W1, 1
	199 NotImplemented "Instruction BLR not yet implemented."
	200 Move V0, [X31+64]
	201 Move V1, [X31+80]
	202 Move V2, [X31+96]
	203 Move V3, [X31+112]
	204 Move [X31], V0
	205 Move [X31+8], V1
	206 Move [X31+32], V2
	207 Move [X31+40], V3
	208 Compare X19, 0
	209 JumpIfEqual {257}
	210 Move X8, [X19]
	211 Move V0, [X31]
	212 Move V1, [X31+16]
	213 Move V2, [X31+32]
	214 Move V3, [X31+48]
	215 Move X9, [X8+504]
	216 Move [X31+64], V0
	217 Move [X31+72], V1
	218 Move [X31+96], V2
	219 Move [X31+104], V3
	220 Move X2, [X8+512]
	221 Add X1, X31, 64
	222 Move X0, X19
	223 NotImplemented "Instruction BLR not yet implemented."
	224 Move X19, 0xAE3000
	225 Move X19, [X19+448]
	226 Move X0, X19
	227 Call 0x1C17D08
	228 Call 0x19913D0
	229 Move X0, X19
	230 Call 0x1C17D08
	231 Move X8, [X0+184]
	232 Move X0, 0xACA000
	233 Move X19, [X8]
	234 Move X0, [X0+3296]
	235 Call 0x1C17D08
	236 Call 0x1C17F10
	237 Move X1, X19
	238 Move X2, X31
	239 Move X20, X0
	240 Call CryptographicException..ctor, X0, X1
	241 Move X0, 0xAE6000
	242 Move X0, [X0+2920]
	243 Call 0x1C17D08
	244 Move X1, X0
	245 Move X0, X20
	246 Call 0x1C17DEC
	247 Call 0x1C17F20
	248 Call 0x1C17F20
	249 Call 0x1C17F20
	250 Call 0x1C17F20
	251 Call 0x1C17F20
	252 Call 0x1C17F20
	253 Call 0x1C17F20
	254 Call 0x1C17F20
	255 Call 0x1C17F20
	256 Call 0x1C17F20
	257 Call 0x1C17F20
	258 Move X19, X0
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move X0, X19
	261 Call 0x3EB2AD0
	262 Move X19, X0
	263 Move X0, 0xAA3000
	264 Move X0, [X0+3264]
	265 Call 0x1C17D08
	266 Move X8, [X19]
	267 Move X1, [X8]
	268 Call 0x1C18270
	269 Move TEMP, X0
	270 And TEMP, TEMP, 1
	271 Compare TEMP, 1
	272 JumpIfNotEqual {274}
	273 Call 0x3EB2AE0
	274 Move W0, 8
	275 Call 0x3EB2AF0
	276 Move X8, [X19]
	277 Move [X0], X8
	278 Move X1, 0x85E000
	279 Add X1, X1, 3672
	280 Move X2, X31
	281 Call 0x3EB2B00
	282 Move X19, X0
	283 Call 0x3EB2AE0
	284 Move X0, X19
	285 Call 0x1D2D690
	286 Call 0x1991590

Method: System.Void set_PrivateKey(System.Security.Cryptography.AsymmetricAlgorithm value)

Disassembly:
	0x036577AC MOV X0, X21
	0x036577B0 LDP X20, X19, [X31 + 0x20]
	0x036577B4 LDP X22, X21, [X31 + 0x10]
	0x036577B8 LDR X30, [X31], #0x30
	0x036577BC RET
	0x036577C0 BL 0x1C16F20
	0x036577C4 MOV X0, X20
	0x036577C8 BL 0x1C16F18
	0x036577CC B 0x36577D0
	0x036577D0 MOV X21, X0
	0x036577D4 CMP W1, 0x1
	0x036577D8 B.NE 0x36577F8
	0x036577DC MOV X0, X21
	0x036577E0 BL 0x3EB1AD0
	0x036577E4 LDR X20, [X0]
	0x036577E8 BL 0x3EB1AE0
	0x036577EC MOV X21, X31
	0x036577F0 CBNZ X19, 0x3657750
	0x036577F4 B 0x36577A8
	0x036577F8 MOV X20, X31
	0x036577FC B 0x3657804
	0x03657800 MOV X21, X0
	0x03657804 CBZ X19, 0x3657860
	0x03657808 LDR X8, [X19]
	0x0365780C LDR X1, [X22]
	0x03657810 LDRH W9, [X8 + 0x12E]
	0x03657814 CBZ X9, 0x3657838
	0x03657818 LDR X10, [X8 + 0xB0]
	0x0365781C ADD X10, X10, 0x8
	0x03657820 LDUR X11, [X10 - 0x8]
	0x03657824 CMP X11, X1
	0x03657828 B.EQ 0x3657848
	0x0365782C SUBS X9, X9, 0x1
	0x03657830 ADD X10, X10, 0x10
	0x03657834 B.NE 0x3657820
	0x03657838 MOV X0, X19
	0x0365783C MOV W2, W31
	0x03657840 BL 0x1C5C788
	0x03657844 B 0x3657854
	0x03657848 LDRSW X9, [X10]
	0x0365784C ADD X8, X8, X9, 0x4, LSL
	0x03657850 ADD X0, X8, 0x138
	0x03657854 LDP X8, X1, [X0]
	0x03657858 MOV X0, X19
	0x0365785C BLR X8
	0x03657860 CBNZ X20, 0x365786C
	0x03657864 MOV X0, X21
	0x03657868 BL 0x1D2C690
	0x0365786C MOV X0, X20
	0x03657870 BL 0x1C16F18
	0x03657874 BL 0x1990590
	0x03657878 STP X30, X21, [X31 - 0x20]!
	0x0365787C STP X20, X19, [X31 + 0x10]
	0x03657880 MOV W19, W2
	0x03657884 MOV W20, W1
	0x03657888 MOV X21, X0
	0x0365788C BL 0x365753C
	0x03657890 AND W2, W19, 0x1
	0x03657894 MOV W1, W20
	0x03657898 LDP X20, X19, [X31 + 0x10]
	0x0365789C ADD X0, X21, 0x18
	0x036578A0 MOV X3, X31
	0x036578A4 LDP X30, X21, [X31], #0x20
	0x036578A8 B 0x35F3588
	0x036578AC STP X30, X19, [X31 - 0x10]!
	0x036578B0 MOV X19, X0
	0x036578B4 BL 0x365753C
	0x036578B8 LDR X0, [X19 + 0x90]
	0x036578BC LDP X30, X19, [X31], #0x10
	0x036578C0 RET
	0x036578C4 STP X30, X21, [X31 - 0x20]!
	0x036578C8 STP X20, X19, [X31 + 0x10]
	0x036578CC ADRP X21, 0xD89000
	0x036578D0 ADRP X20, 0xA9D000
	0x036578D4 LDRB W8, [X21 + 0x63F]
	0x036578D8 LDR X20, [X20 + 0x9F0]
	0x036578DC MOV X19, X0
	0x036578E0 TBNZ X8, 0x0, 0x36578F8
	0x036578E4 ADRP X0, 0xA9D000
	0x036578E8 LDR X0, [X0 + 0x9F0]
	0x036578EC BL 0x1C16CF4
	0x036578F0 MOVZ W8, 0x1
	0x036578F4 STRB W8, [X21 + 0x63F]
	0x036578F8 MOV X0, X19
	0x036578FC BL 0x365753C
	0x03657900 LDR X0, [X20]
	0x03657904 LDR W8, [X0 + 0xE0]
	0x03657908 CBNZ W8, 0x3657910
	0x0365790C BL 0x1C16DFC
	0x03657910 ADD X0, X19, 0x58
	0x03657914 LDP X20, X19, [X31 + 0x10]
	0x03657918 MOV X1, X31
	0x0365791C LDP X30, X21, [X31], #0x20
	0x03657920 B 0x3361FC4
	0x03657924 STP X30, X21, [X31 - 0x20]!
	0x03657928 STP X20, X19, [X31 + 0x10]
	0x0365792C ADRP X21, 0xD89000
	0x03657930 ADRP X20, 0xA9D000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD8A000
	006 Move W8, [X21+1593]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xACB000
	014 Move X0, [X0+344]
	015 Call 0x1C17CF4
	016 Move X0, 0xACB000
	017 Move X0, [X0+352]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1593], W8
	021 Move X0, [X20+184]
	022 Compare X0, 0
	023 JumpIfEqual {72}
	024 Compare X19, 0
	025 JumpIfEqual {47}
	026 Move X9, 0xACB000
	027 Move X9, [X9+352]
	028 Move X8, [X19]
	029 Move X10, [X9]
	030 Move W9, [X8+304]
	031 Move W11, [X10+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X12, [X8+200]
	034 Add X11, X12, X11
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X10, 0xACB000
	038 Move X10, [X10+344]
	039 Move X10, [X10]
	040 Move W11, [X10+304]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, [X8+200]
	043 Add X8, X8, X11
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X1, X19
	047 Move X8, [X0]
	048 Move X1, X31
	049 Move X9, [X8+488]
	050 Move X2, [X8+496]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move X0, [X20+184]
	053 Compare X0, 0
	054 JumpIfEqual {108}
	055 Move X1, X31
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X2, X31
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Call X509Certificate.set_DSA, X0, X1
	062 Return 
	063 Move X8, [X0]
	064 Move X1, X19
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X3, [X8+488]
	068 Move X2, [X8+496]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 CallNoReturn X3
	072 Move X19, 0xAE3000
	073 Move X19, [X19+448]
	074 Move X0, X19
	075 Call 0x1C17D08
	076 Call 0x19913D0
	077 Move X0, X19
	078 Call 0x1C17D08
	079 Move X8, [X0+184]
	080 Move X0, 0xACA000
	081 Move X19, [X8]
	082 Move X0, [X0+3296]
	083 Call 0x1C17D08
	084 Call 0x1C17F10
	085 Move X1, X19
	086 Move X2, X31
	087 Move X20, X0
	088 Call CryptographicException..ctor, X0, X1
	089 Move X0, 0xAE6000
	090 Move X0, [X0+2928]
	091 Call 0x1C17D08
	092 Move X1, X0
	093 Move X0, X20
	094 Call 0x1C17DEC
	095 Move X0, 0xA9D000
	096 Move X0, [X0+2880]
	097 Call 0x1C17D08
	098 Call 0x1C17F10
	099 Move X1, X31
	100 Move X19, X0
	101 Call NotSupportedException..ctor, X0
	102 Move X0, 0xAE6000
	103 Move X0, [X0+2928]
	104 Call 0x1C17D08
	105 Move X1, X0
	106 Move X0, X19
	107 Call 0x1C17DEC
	108 Call 0x1C17F20

Method: System.Security.Cryptography.RSA GetRSAPrivateKey()

Disassembly:
	0x03657934 LDRB W8, [X21 + 0x640]
	0x03657938 LDR X20, [X20 + 0x9F0]
	0x0365793C MOV X19, X0
	0x03657940 TBNZ X8, 0x0, 0x3657958
	0x03657944 ADRP X0, 0xA9D000
	0x03657948 LDR X0, [X0 + 0x9F0]
	0x0365794C BL 0x1C16CF4
	0x03657950 MOVZ W8, 0x1
	0x03657954 STRB W8, [X21 + 0x640]
	0x03657958 MOV X0, X19
	0x0365795C BL 0x365753C
	0x03657960 LDR X0, [X20]
	0x03657964 LDR W8, [X0 + 0xE0]
	0x03657968 CBNZ W8, 0x3657970
	0x0365796C BL 0x1C16DFC
	0x03657970 ADD X0, X19, 0x50
	0x03657974 LDP X20, X19, [X31 + 0x10]
	0x03657978 MOV X1, X31
	0x0365797C LDP X30, X21, [X31], #0x20
	0x03657980 B 0x3361FC4
	0x03657984 STP X30, X21, [X31 - 0x20]!
	0x03657988 STP X20, X19, [X31 + 0x10]
	0x0365798C ADRP X21, 0xD89000
	0x03657990 LDRB W8, [X21 + 0x641]
	0x03657994 MOV X19, X1
	0x03657998 MOV X20, X0
	0x0365799C TBNZ X8, 0x0, 0x36579B4
	0x036579A0 ADRP X0, 0xAE5000
	0x036579A4 LDR X0, [X0 + 0xBA0]
	0x036579A8 BL 0x1C16CF4
	0x036579AC MOVZ W8, 0x1
	0x036579B0 STRB W8, [X21 + 0x641]
	0x036579B4 LDR X8, [X20]
	0x036579B8 MOV X0, X20
	0x036579BC LDR X9, [X8 + 0x248]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD8A000
	005 Move W8, [X20+1594]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xACB000
	012 Move X0, [X0+352]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1594], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+680]
	019 Move X1, [X8+688]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Compare X0, 0
	022 JumpIfEqual {36}
	023 Move X8, 0xACB000
	024 Move X8, [X8+352]
	025 Move X9, [X0]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, X31
	031 Move X9, [X9+200]
	032 Add X9, X9, X10
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return X0

Method: System.Security.Cryptography.DSA GetDSAPrivateKey()

Disassembly:
	0x036579C0 LDR X1, [X8 + 0x250]
	0x036579C4 BLR X9
	0x036579C8 TBZ X0, 0x0, 0x3657A08
	0x036579CC CBZ X19, 0x3657A14
	0x036579D0 MOV X0, X19
	0x036579D4 MOV X1, X31
	0x036579D8 BL 0x3233888
	0x036579DC MOV X0, X19
	0x036579E0 MOV X1, X31
	0x036579E4 BL 0x3233888
	0x036579E8 ADRP X8, 0xAE5000
	0x036579EC LDR X8, [X8 + 0xBA0]
	0x036579F0 MOV X0, X19
	0x036579F4 LDP X20, X19, [X31 + 0x10]
	0x036579F8 MOV X2, X31
	0x036579FC LDR X1, [X8]
	0x03657A00 LDP X30, X21, [X31], #0x20
	0x03657A04 B 0x32338A8
	0x03657A08 LDP X20, X19, [X31 + 0x10]
	0x03657A0C LDP X30, X21, [X31], #0x20
	0x03657A10 RET
	0x03657A14 BL 0x1C16F20
	0x03657A18 STR X30, [X31 - 0x20]!
	0x03657A1C STP X20, X19, [X31 + 0x10]
	0x03657A20 MOV X19, X1
	0x03657A24 MOV X1, X31
	0x03657A28 MOV X20, X0
	0x03657A2C BL 0x3351EFC
	0x03657A30 MOV X0, X20
	0x03657A34 MOV X1, X19
	0x03657A38 LDP X20, X19, [X31 + 0x10]
	0x03657A3C LDR X30, [X31], #0x20
	0x03657A40 B 0x3657A44
	0x03657A44 STR X30, [X31 - 0x30]!
	0x03657A48 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD8A000
	005 Move W8, [X20+1595]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xACB000
	012 Move X0, [X0+344]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1595], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+680]
	019 Move X1, [X8+688]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Compare X0, 0
	022 JumpIfEqual {36}
	023 Move X8, 0xACB000
	024 Move X8, [X8+344]
	025 Move X9, [X0]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, X31
	031 Move X9, [X9+200]
	032 Add X9, X9, X10
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSEL not yet implemented."
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return X0

Method: Mono.Security.X509.X509Certificate ImportPkcs12(System.Byte[] rawData, Microsoft.Win32.SafeHandles.SafePasswordHandle password)

Disassembly:
	0x03657280 ADRP X22, 0xD89000
	0x03657284 LDRB W8, [X22 + 0x64E]
	0x03657288 MOV W21, W2
	0x0365728C MOV X19, X1
	0x03657290 MOV X20, X0
	0x03657294 TBNZ X8, 0x0, 0x36572AC
	0x03657298 ADRP X0, 0xAE5000
	0x0365729C LDR X0, [X0 + 0xB90]
	0x036572A0 BL 0x1C16CF4
	0x036572A4 MOVZ W8, 0x1
	0x036572A8 STRB W8, [X22 + 0x64E]
	0x036572AC TBNZ X21, 0x0, 0x36572C8
	0x036572B0 CBZ X19, 0x3657340
	0x036572B4 LDR X8, [X19]
	0x036572B8 MOV X0, X19
	0x036572BC LDP X9, X1, [X8 + 0x198]
	0x036572C0 BLR X9
	0x036572C4 MOV X19, X0
	0x036572C8 LDR X0, [X20 + 0x10]
	0x036572CC CBZ X0, 0x3657340
	0x036572D0 ADRP X9, 0xAE5000
	0x036572D4 LDR X9, [X9 + 0xB90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X2, 0
	008 JumpIfEqual {24}
	009 Move X8, [X2]
	010 Move X0, X2
	011 Move X21, X2
	012 Move X9, [X8+392]
	013 Move X1, [X8+400]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {20}
	019 Move X2, X31
	020 Move X0, X21
	021 Move X1, X31
	022 Call SafePasswordHandle.Mono_DangerousGetString, X0
	023 Move X2, X0
	024 Move X0, X20
	025 Move X1, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call X509Certificate2ImplMono.ImportPkcs12, X0, X1, X2
	031 Return X0

Method: Mono.Security.X509.X509Certificate ImportPkcs12(System.Byte[] rawData, System.String password)

Disassembly:
	0x03657A4C STP X20, X19, [X31 + 0x20]
	0x03657A50 CBZ X1, 0x3657ACC
	0x03657A54 MOV X20, X0
	0x03657A58 LDR X0, [X1 + 0x10]
	0x03657A5C MOV X19, X1
	0x03657A60 CBZ X0, 0x3657AB8
	0x03657A64 MOV W21, W31
	0x03657A68 LDR X8, [X0]
	0x03657A6C LDR X9, [X8 + 0x298]
	0x03657A70 LDR X1, [X8 + 0x2A0]
	0x03657A74 BLR X9
	0x03657A78 CMP W21, W0
	0x03657A7C B.GE 0x3657ABC
	0x03657A80 LDR X22, [X20 + 0x10]
	0x03657A84 MOV X0, X19
	0x03657A88 MOV W1, W21
	0x03657A8C BL 0x3657B14
	0x03657A90 CBZ X22, 0x3657AB8
	0x03657A94 LDR X8, [X22]
	0x03657A98 MOV X1, X0
	0x03657A9C MOV X0, X22
	0x03657AA0 LDR X9, [X8 + 0x308]
	0x03657AA4 LDR X2, [X8 + 0x310]
	0x03657AA8 BLR X9
	0x03657AAC LDR X0, [X19 + 0x10]
	0x03657AB0 ADD W21, W21, 0x1
	0x03657AB4 CBNZ X0, 0x3657A68
	0x03657AB8 BL 0x1C16F20
	0x03657ABC LDP X20, X19, [X31 + 0x20]
	0x03657AC0 LDP X22, X21, [X31 + 0x10]
	0x03657AC4 LDR X30, [X31], #0x30
	0x03657AC8 RET
	0x03657ACC ADRP X0, 0xAA1000
	0x03657AD0 LDR X0, [X0 + 0x528]
	0x03657AD4 BL 0x1C16D08
	0x03657AD8 BL 0x1C16F10
	0x03657ADC MOV X19, X0
	0x03657AE0 ADRP X0, 0xAA6000
	0x03657AE4 LDR X0, [X0 + 0xEC8]
	0x03657AE8 BL 0x1C16D08
	0x03657AEC MOV X1, X0
	0x03657AF0 MOV X0, X19
	0x03657AF4 MOV X2, X31
	0x03657AF8 BL 0x330E100
	0x03657AFC ADRP X0, 0xAE5000
	0x03657B00 LDR X0, [X0 + 0xBA8]
	0x03657B04 BL 0x1C16D08
	0x03657B08 MOV X1, X0
	0x03657B0C MOV X0, X19
	0x03657B10 BL 0x1C16DEC
	0x03657B14 STP X30, X21, [X31 - 0x20]!
	0x03657B18 STP X20, X19, [X31 + 0x10]
	0x03657B1C ADRP X21, 0xD89000
	0x03657B20 LDRB W8, [X21 + 0x642]
	0x03657B24 MOV W19, W1
	0x03657B28 MOV X20, X0
	0x03657B2C TBNZ X8, 0x0, 0x3657B44
	0x03657B30 ADRP X0, 0xACC000
	0x03657B34 LDR X0, [X0 + 0x9A8]
	0x03657B38 BL 0x1C16CF4
	0x03657B3C MOVZ W8, 0x1
	0x03657B40 STRB W8, [X21 + 0x642]
	0x03657B44 LDR X0, [X20 + 0x10]
	0x03657B48 CBZ X0, 0x3657BA8
	0x03657B4C LDR X8, [X0]
	0x03657B50 MOV W1, W19
	0x03657B54 LDR X9, [X8 + 0x2E8]
	0x03657B58 LDR X2, [X8 + 0x2F0]
	0x03657B5C BLR X9
	0x03657B60 CBZ X0, 0x3657B98
	0x03657B64 ADRP X9, 0xACC000
	0x03657B68 LDR X9, [X9 + 0x9A8]
	0x03657B6C LDR X8, [X0]
	0x03657B70 LDR X1, [X9]
	0x03657B74 LDRB W10, [X8 + 0x130]
	0x03657B78 LDRB W9, [X1 + 0x130]
	0x03657B7C CMP W10, W9
	0x03657B80 B.CC 0x3657BA4
	0x03657B84 LDR X8, [X8 + 0xC8]
	0x03657B88 ADD X8, X8, X9, 0x3, LSL
	0x03657B8C LDUR X8, [X8 - 0x8]
	0x03657B90 CMP X8, X1
	0x03657B94 B.NE 0x3657BA4
	0x03657B98 LDP X20, X19, [X31 + 0x10]
	0x03657B9C LDP X30, X21, [X31], #0x20
	0x03657BA0 RET
	0x03657BA4 BL 0x1C171E0
	0x03657BA8 BL 0x1C16F20
	0x03657BAC STP X30, X21, [X31 - 0x20]!
	0x03657BB0 STP X20, X19, [X31 + 0x10]
	0x03657BB4 ADRP X20, 0xD89000
	0x03657BB8 ADRP X21, 0xAE5000
	0x03657BBC LDRB W8, [X20 + 0x643]
	0x03657BC0 LDR X21, [X21 + 0xBB0]
	0x03657BC4 MOV X19, X0
	0x03657BC8 TBNZ X8, 0x0, 0x3657BE0
	0x03657BCC ADRP X0, 0xAE5000
	0x03657BD0 LDR X0, [X0 + 0xBB0]
	0x03657BD4 BL 0x1C16CF4
	0x03657BD8 MOVZ W8, 0x1
	0x03657BDC STRB W8, [X20 + 0x643]
	0x03657BE0 LDR X0, [X21]
	0x03657BE4 BL 0x1C16F10
	0x03657BE8 MOV X1, X19
	0x03657BEC MOV X20, X0
	0x03657BF0 BL 0x3657C04
	0x03657BF4 MOV X0, X20
	0x03657BF8 LDP X20, X19, [X31 + 0x10]
	0x03657BFC LDP X30, X21, [X31], #0x20
	0x03657C00 RET
	0x03657C04 STP X30, X21, [X31 - 0x20]!
	0x03657C08 STP X20, X19, [X31 + 0x10]
	0x03657C0C ADRP X21, 0xD89000
	0x03657C10 LDRB W8, [X21 + 0x644]
	0x03657C14 MOV X20, X1
	0x03657C18 MOV X19, X0
	0x03657C1C TBNZ X8, 0x0, 0x3657C34
	0x03657C20 ADRP X0, 0xAA4000
	0x03657C24 LDR X0, [X0 + 0xDB8]
	0x03657C28 BL 0x1C16CF4
	0x03657C2C MOVZ W8, 0x1
	0x03657C30 STRB W8, [X21 + 0x644]
	0x03657C34 MOV X0, X19
	0x03657C38 MOV X1, X31
	0x03657C3C BL 0x33BDD8C
	0x03657C40 CBZ X20, 0x3657CB4
	0x03657C44 ADRP X10, 0xAA4000
	0x03657C48 LDR X8, [X20]
	0x03657C4C LDR X10, [X10 + 0xDB8]
	0x03657C50 LDRH W9, [X8 + 0x12E]
	0x03657C54 LDR X1, [X10]
	0x03657C58 CBZ X9, 0x3657C7C
	0x03657C5C LDR X10, [X8 + 0xB0]
	0x03657C60 ADD X10, X10, 0x8
	0x03657C64 LDUR X11, [X10 - 0x8]
	0x03657C68 CMP X11, X1
	0x03657C6C B.EQ 0x3657C8C
	0x03657C70 SUBS X9, X9, 0x1
	0x03657C74 ADD X10, X10, 0x10
	0x03657C78 B.NE 0x3657C64
	0x03657C7C MOV X0, X20
	0x03657C80 MOV W2, W31
	0x03657C84 BL 0x1C5C788
	0x03657C88 B 0x3657C98
	0x03657C8C LDRSW X9, [X10]
	0x03657C90 ADD X8, X8, X9, 0x4, LSL
	0x03657C94 ADD X0, X8, 0x138
	0x03657C98 LDP X8, X1, [X0]
	0x03657C9C MOV X0, X20
	0x03657CA0 BLR X8
	0x03657CA4 STR X0, [X19 + 0x10]
	0x03657CA8 LDP X20, X19, [X31 + 0x10]
	0x03657CAC LDP X30, X21, [X31], #0x20
	0x03657CB0 RET
	0x03657CB4 BL 0x1C16F20
	0x03657CB8 STR X30, [X31 - 0x10]!
	0x03657CBC LDR X0, [X0 + 0x10]
	0x03657CC0 CBZ X0, 0x3657CD4
	0x03657CC4 LDR X8, [X0]
	0x03657CC8 LDP X2, X1, [X8 + 0x158]
	0x03657CCC LDR X30, [X31], #0x10
	0x03657CD0 BR X2
	0x03657CD4 BL 0x1C16F20
	0x03657CD8 STR X30, [X31 - 0x20]!
	0x03657CDC STP X20, X19, [X31 + 0x10]
	0x03657CE0 ADRP X20, 0xD89000
	0x03657CE4 LDRB W8, [X20 + 0x645]
	0x03657CE8 MOV X19, X0
	0x03657CEC TBNZ X8, 0x0, 0x3657D10
	0x03657CF0 ADRP X0, 0xA9C000
	0x03657CF4 LDR X0, [X0 + 0xE18]
	0x03657CF8 BL 0x1C16CF4
	0x03657CFC ADRP X0, 0xACC000
	0x03657D00 LDR X0, [X0 + 0x9A8]
	0x03657D04 BL 0x1C16CF4
	0x03657D08 MOVZ W8, 0x1
	0x03657D0C STRB W8, [X20 + 0x645]
	0x03657D10 LDR X19, [X19 + 0x10]
	0x03657D14 CBZ X19, 0x3657DC4
	0x03657D18 ADRP X10, 0xA9C000
	0x03657D1C LDR X8, [X19]
	0x03657D20 LDR X10, [X10 + 0xE18]
	0x03657D24 LDRH W9, [X8 + 0x12E]
	0x03657D28 LDR X1, [X10]
	0x03657D2C CBZ X9, 0x3657D50
	0x03657D30 LDR X10, [X8 + 0xB0]
	0x03657D34 ADD X10, X10, 0x8
	0x03657D38 LDUR X11, [X10 - 0x8]
	0x03657D3C CMP X11, X1
	0x03657D40 B.EQ 0x3657D60
	0x03657D44 SUBS X9, X9, 0x1
	0x03657D48 ADD X10, X10, 0x10
	0x03657D4C B.NE 0x3657D38
	0x03657D50 MOVZ W2, 0x1
	0x03657D54 MOV X0, X19
	0x03657D58 BL 0x1C5C788
	0x03657D5C B 0x3657D70
	0x03657D60 LDR W9, [X10]
	0x03657D64 ADD W9, W9, 0x1
	0x03657D68 ADD X8, X8, W9, 0x4, SXTW
	0x03657D6C ADD X0, X8, 0x138
	0x03657D70 LDP X8, X1, [X0]
	0x03657D74 MOV X0, X19
	0x03657D78 BLR X8
	0x03657D7C CBZ X0, 0x3657DB4
	0x03657D80 ADRP X9, 0xACC000
	0x03657D84 LDR X9, [X9 + 0x9A8]
	0x03657D88 LDR X8, [X0]
	0x03657D8C LDR X1, [X9]
	0x03657D90 LDRB W10, [X8 + 0x130]
	0x03657D94 LDRB W9, [X1 + 0x130]
	0x03657D98 CMP W10, W9
	0x03657D9C B.CC 0x3657DC0
	0x03657DA0 LDR X8, [X8 + 0xC8]
	0x03657DA4 ADD X8, X8, X9, 0x3, LSL
	0x03657DA8 LDUR X8, [X8 - 0x8]
	0x03657DAC CMP X8, X1
	0x03657DB0 B.NE 0x3657DC0
	0x03657DB4 LDP X20, X19, [X31 + 0x10]
	0x03657DB8 LDR X30, [X31], #0x20
	0x03657DBC RET
	0x03657DC0 BL 0x1C171E0
	0x03657DC4 BL 0x1C16F20
	0x03657DC8 STR X30, [X31 - 0x20]!
	0x03657DCC STP X20, X19, [X31 + 0x10]
	0x03657DD0 ADRP X20, 0xD89000
	0x03657DD4 LDRB W8, [X20 + 0x646]
	0x03657DD8 MOV X19, X0
	0x03657DDC TBNZ X8, 0x0, 0x3657DF4
	0x03657DE0 ADRP X0, 0xA9C000
	0x03657DE4 LDR X0, [X0 + 0xE18]
	0x03657DE8 BL 0x1C16CF4
	0x03657DEC MOVZ W8, 0x1
	0x03657DF0 STRB W8, [X20 + 0x646]
	0x03657DF4 LDR X19, [X19 + 0x10]
	0x03657DF8 CBZ X19, 0x3657E68
	0x03657DFC ADRP X10, 0xA9C000
	0x03657E00 LDR X8, [X19]
	0x03657E04 LDR X10, [X10 + 0xE18]
	0x03657E08 LDRH W9, [X8 + 0x12E]
	0x03657E0C LDR X1, [X10]
	0x03657E10 CBZ X9, 0x3657E34
	0x03657E14 LDR X10, [X8 + 0xB0]
	0x03657E18 ADD X10, X10, 0x8
	0x03657E1C LDUR X11, [X10 - 0x8]
	0x03657E20 CMP X11, X1
	0x03657E24 B.EQ 0x3657E44
	0x03657E28 SUBS X9, X9, 0x1
	0x03657E2C ADD X10, X10, 0x10
	0x03657E30 B.NE 0x3657E1C
	0x03657E34 MOVZ W2, 0x1
	0x03657E38 MOV X0, X19
	0x03657E3C BL 0x1C5C788
	0x03657E40 B 0x3657E54
	0x03657E44 LDR W9, [X10]
	0x03657E48 ADD W9, W9, 0x1
	0x03657E4C ADD X8, X8, W9, 0x4, SXTW
	0x03657E50 ADD X0, X8, 0x138
	0x03657E54 LDP X2, X1, [X0]
	0x03657E58 MOV X0, X19
	0x03657E5C LDP X20, X19, [X31 + 0x10]
	0x03657E60 LDR X30, [X31], #0x20
	0x03657E64 BR X2
	0x03657E68 BL 0x1C16F20
	0x03657E6C STR X30, [X31 - 0x20]!
	0x03657E70 STP X20, X19, [X31 + 0x10]
	0x03657E74 ADRP X20, 0xD89000
	0x03657E78 LDRB W8, [X20 + 0x647]
	0x03657E7C MOV X19, X0
	0x03657E80 TBNZ X8, 0x0, 0x3657E98
	0x03657E84 ADRP X0, 0xA9C000
	0x03657E88 LDR X0, [X0 + 0xE18]
	0x03657E8C BL 0x1C16CF4
	0x03657E90 MOVZ W8, 0x1
	0x03657E94 STRB W8, [X20 + 0x647]
	0x03657E98 LDR X19, [X19 + 0x10]
	0x03657E9C CBZ X19, 0x3657F08
	0x03657EA0 ADRP X10, 0xA9C000
	0x03657EA4 LDR X8, [X19]
	0x03657EA8 LDR X10, [X10 + 0xE18]
	0x03657EAC LDRH W9, [X8 + 0x12E]
	0x03657EB0 LDR X1, [X10]
	0x03657EB4 CBZ X9, 0x3657ED8
	0x03657EB8 LDR X10, [X8 + 0xB0]
	0x03657EBC ADD X10, X10, 0x8
	0x03657EC0 LDUR X11, [X10 - 0x8]
	0x03657EC4 CMP X11, X1
	0x03657EC8 B.EQ 0x3657EE8
	0x03657ECC SUBS X9, X9, 0x1
	0x03657ED0 ADD X10, X10, 0x10
	0x03657ED4 B.NE 0x3657EC0
	0x03657ED8 MOV X0, X19
	0x03657EDC MOV W2, W31
	0x03657EE0 BL 0x1C5C788
	0x03657EE4 B 0x3657EF4
	0x03657EE8 LDRSW X9, [X10]
	0x03657EEC ADD X8, X8, X9, 0x4, LSL
	0x03657EF0 ADD X0, X8, 0x138
	0x03657EF4 LDP X2, X1, [X0]
	0x03657EF8 MOV X0, X19
	0x03657EFC LDP X20, X19, [X31 + 0x10]
	0x03657F00 LDR X30, [X31], #0x20
	0x03657F04 BR X2
	0x03657F08 BL 0x1C16F20
	0x03657F0C STR X30, [X31 - 0x20]!
	0x03657F10 STP X20, X19, [X31 + 0x10]
	0x03657F14 ADRP X20, 0xD89000
	0x03657F18 LDRB W8, [X20 + 0x648]
	0x03657F1C MOV X19, X0
	0x03657F20 TBNZ X8, 0x0, 0x3657F38
	0x03657F24 ADRP X0, 0xA9C000
	0x03657F28 LDR X0, [X0 + 0xE18]
	0x03657F2C BL 0x1C16CF4
	0x03657F30 MOVZ W8, 0x1
	0x03657F34 STRB W8, [X20 + 0x648]
	0x03657F38 LDR X19, [X19 + 0x10]
	0x03657F3C CBZ X19, 0x3657FAC
	0x03657F40 ADRP X10, 0xA9C000
	0x03657F44 LDR X8, [X19]
	0x03657F48 LDR X10, [X10 + 0xE18]
	0x03657F4C LDRH W9, [X8 + 0x12E]
	0x03657F50 LDR X1, [X10]
	0x03657F54 CBZ X9, 0x3657F78
	0x03657F58 LDR X10, [X8 + 0xB0]
	0x03657F5C ADD X10, X10, 0x8
	0x03657F60 LDUR X11, [X10 - 0x8]
	0x03657F64 CMP X11, X1
	0x03657F68 B.EQ 0x3657F88
	0x03657F6C SUBS X9, X9, 0x1
	0x03657F70 ADD X10, X10, 0x10
	0x03657F74 B.NE 0x3657F60
	0x03657F78 MOVZ W2, 0x2
	0x03657F7C MOV X0, X19
	0x03657F80 BL 0x1C5C788
	0x03657F84 B 0x3657F98
	0x03657F88 LDR W9, [X10]
	0x03657F8C ADD W9, W9, 0x2
	0x03657F90 ADD X8, X8, W9, 0x4, SXTW
	0x03657F94 ADD X0, X8, 0x138
	0x03657F98 LDP X2, X1, [X0]
	0x03657F9C MOV X0, X19
	0x03657FA0 LDP X20, X19, [X31 + 0x10]
	0x03657FA4 LDR X30, [X31], #0x20
	0x03657FA8 BR X2
	0x03657FAC BL 0x1C16F20
	0x03657FB0 STR X30, [X31 - 0x20]!
	0x03657FB4 STP X20, X19, [X31 + 0x10]
	0x03657FB8 ADRP X20, 0xD89000
	0x03657FBC LDRB W8, [X20 + 0x649]
	0x03657FC0 MOV X19, X0
	0x03657FC4 TBNZ X8, 0x0, 0x3657FDC
	0x03657FC8 ADRP X0, 0xA9C000
	0x03657FCC LDR X0, [X0 + 0xE18]
	0x03657FD0 BL 0x1C16CF4
	0x03657FD4 MOVZ W8, 0x1
	0x03657FD8 STRB W8, [X20 + 0x649]
	0x03657FDC LDR X19, [X19 + 0x10]
	0x03657FE0 CBZ X19, 0x365804C
	0x03657FE4 ADRP X10, 0xA9C000
	0x03657FE8 LDR X8, [X19]
	0x03657FEC LDR X10, [X10 + 0xE18]
	0x03657FF0 LDRH W9, [X8 + 0x12E]
	0x03657FF4 LDR X1, [X10]
	0x03657FF8 CBZ X9, 0x365801C
	0x03657FFC LDR X10, [X8 + 0xB0]
	0x03658000 ADD X10, X10, 0x8
	0x03658004 LDUR X11, [X10 - 0x8]
	0x03658008 CMP X11, X1
	0x0365800C B.EQ 0x365802C
	0x03658010 SUBS X9, X9, 0x1
	0x03658014 ADD X10, X10, 0x10
	0x03658018 B.NE 0x3658004
	0x0365801C MOV X0, X19
	0x03658020 MOV W2, W31
	0x03658024 BL 0x1C5C788
	0x03658028 B 0x3658038
	0x0365802C LDRSW X9, [X10]
	0x03658030 ADD X8, X8, X9, 0x4, LSL
	0x03658034 ADD X0, X8, 0x138
	0x03658038 LDP X2, X1, [X0]
	0x0365803C MOV X0, X19
	0x03658040 LDP X20, X19, [X31 + 0x10]
	0x03658044 LDR X30, [X31], #0x20
	0x03658048 BR X2
	0x0365804C BL 0x1C16F20
	0x03658050 SUB X31, X31, 0x70
	0x03658054 STP X30, X23, [X31 + 0x40]
	0x03658058 STP X22, X21, [X31 + 0x50]
	0x0365805C STP X20, X19, [X31 + 0x60]
	0x03658060 ADRP X23, 0xD88000
	0x03658064 ADRP X22, 0xAE4000
	0x03658068 ADRP X21, 0xAE4000
	0x0365806C LDRB W8, [X23 + 0x64B]
	0x03658070 LDR X22, [X22 + 0xB80]
	0x03658074 LDR X21, [X21 + 0xB88]
	0x03658078 MOV X20, X1
	0x0365807C MOV X19, X0
	0x03658080 TBNZ X8, 0x0, 0x36580E0
	0x03658084 ADRP X0, 0xAE4000
	0x03658088 LDR X0, [X0 + 0xBB8]
	0x0365808C BL 0x1C16CF4
	0x03658090 ADRP X0, 0xAE4000
	0x03658094 LDR X0, [X0 + 0xBC0]
	0x03658098 BL 0x1C16CF4
	0x0365809C ADRP X0, 0xAE4000
	0x036580A0 LDR X0, [X0 + 0xBC8]
	0x036580A4 BL 0x1C16CF4
	0x036580A8 ADRP X0, 0xAE4000
	0x036580AC LDR X0, [X0 + 0xB90]
	0x036580B0 BL 0x1C16CF4
	0x036580B4 ADRP X0, 0xAE4000
	0x036580B8 LDR X0, [X0 + 0xBD0]
	0x036580BC BL 0x1C16CF4
	0x036580C0 ADRP X0, 0xAE4000
	0x036580C4 LDR X0, [X0 + 0xB88]
	0x036580C8 BL 0x1C16CF4
	0x036580CC ADRP X0, 0xAE4000
	0x036580D0 LDR X0, [X0 + 0xB80]
	0x036580D4 BL 0x1C16CF4
	0x036580D8 MOVZ W8, 0x1
	0x036580DC STRB W8, [X23 + 0x64B]
	0x036580E0 MOV X0, X19
	0x036580E4 MOV X1, X31
	0x036580E8 STP X31, X31, [X31 + 0x20]
	0x036580EC STR X31, [X31 + 0x30]
	0x036580F0 BL 0x33BDD8C
	0x036580F4 LDR X0, [X22]
	0x036580F8 BL 0x1C16F10
	0x036580FC LDR X1, [X21]
	0x03658100 MOV X21, X0
	0x03658104 BL 0x301B7C4
	0x03658108 STR X21, [X19 + 0x10]
	0x0365810C CBZ X20, 0x3658204
	0x03658110 LDR X0, [X20 + 0x10]
	0x03658114 CBZ X0, 0x3658204
	0x03658118 ADRP X8, 0xAE4000
	0x0365811C LDR X8, [X8 + 0xBD0]
	0x03658120 ADRP X22, 0xAE4000
	0x03658124 ADRP X23, 0xAE4000
	0x03658128 ADRP X21, 0xAE4000
	0x0365812C LDR X1, [X8]
	0x03658130 LDR X22, [X22 + 0xBC0]
	0x03658134 LDR X23, [X23 + 0xB90]
	0x03658138 LDR X21, [X21 + 0xBB8]
	0x0365813C ADD X8, X31, 0x8
	0x03658140 BL 0x301CB58
	0x03658144 LDUR V0, [X31 + 0x8]
	0x03658148 LDR X8, [X31 + 0x18]
	0x0365814C STR V0, [X31 + 0x2]
	0x03658150 STR X8, [X31 + 0x30]
	0x03658154 LDR X1, [X22]
	0x03658158 ADD X0, X31, 0x20
	0x0365815C BL 0x2BC4350
	0x03658160 TBZ X0, 0x0, 0x36581D8
	0x03658164 LDR X0, [X31 + 0x30]
	0x03658168 CBZ X0, 0x36581FC
	0x0365816C LDR X8, [X0]
	0x03658170 LDR X20, [X19 + 0x10]
	0x03658174 LDP X9, X1, [X8 + 0x198]
	0x03658178 BLR X9
	0x0365817C MOV X1, X0
	0x03658180 CBZ X20, 0x3658200
	0x03658184 LDR W10, [X20 + 0x1C]
	0x03658188 LDR X8, [X20 + 0x10]
	0x0365818C LDR X9, [X23]
	0x03658190 ADD W10, W10, 0x1
	0x03658194 STR W10, [X20 + 0x1C]
	0x03658198 CBZ X8, 0x36581F8
	0x0365819C LDRSW X10, [X20 + 0x18]
	0x036581A0 LDR W11, [X8 + 0x18]
	0x036581A4 CMP W10, W11
	0x036581A8 B.CS 0x36581C0
	0x036581AC ADD W9, W10, 0x1
	0x036581B0 ADD X8, X8, X10, 0x3, LSL
	0x036581B4 STR W9, [X20 + 0x18]
	0x036581B8 STR X1, [X8 + 0x20]
	0x036581BC B 0x3658154
	0x036581C0 LDR X8, [X9 + 0x20]
	0x036581C4 LDR X8, [X8 + 0xC0]
	0x036581C8 LDR X2, [X8 + 0x70]
	0x036581CC MOV X0, X20
	0x036581D0 BL 0x301BF90
	0x036581D4 B 0x3658154
	0x036581D8 LDR X1, [X21]
	0x036581DC ADD X0, X31, 0x20
	0x036581E0 BL 0x2BC434C
	0x036581E4 LDP X20, X19, [X31 + 0x60]
	0x036581E8 LDP X22, X21, [X31 + 0x50]
	0x036581EC LDP X30, X23, [X31 + 0x40]
	0x036581F0 ADD X31, X31, 0x70

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0xD8A000
	011 Move X20, 0xACA000
	012 Move W8, [X23+1596]
	013 Move X20, [X20+3432]
	014 Move X22, X2
	015 Move X21, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {44}
	021 Move X0, 0xAE6000
	022 Move X0, [X0+2936]
	023 Call 0x1C17CF4
	024 Move X0, 0xACB000
	025 Move X0, [X0+344]
	026 Call 0x1C17CF4
	027 Move X0, 0xA9D000
	028 Move X0, [X0+3584]
	029 Call 0x1C17CF4
	030 Move X0, 0xACA000
	031 Move X0, [X0+3432]
	032 Call 0x1C17CF4
	033 Move X0, 0xACB000
	034 Move X0, [X0+352]
	035 Call 0x1C17CF4
	036 Move X0, 0xAE3000
	037 Move X0, [X0+448]
	038 Call 0x1C17CF4
	039 Move X0, 0xAE6000
	040 Move X0, [X0+2896]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X23+1596], W8
	044 Move X0, X22
	045 Move X1, X31
	046 Call String.IsNullOrEmpty, X0
	047 Move X8, [X20]
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {59}
	052 Move X0, X8
	053 Call 0x1C17F10
	054 Move X20, X0
	055 Move X1, X21
	056 Move X2, X31
	057 Move X3, X31
	058 Call PKCS12..ctor, X0, X1, X2
	059 Move X0, X8
	060 Call 0x1C17F10
	061 Move X1, X21
	062 Move X2, X22
	063 Move X3, X31
	064 Move X20, X0
	065 Call PKCS12..ctor, X0, X1, X2
	066 Compare X20, 0
	067 JumpIfEqual {387}
	068 Move X0, X20
	069 Move X1, X31
	070 Call PKCS12.get_Certificates, X0
	071 Compare X0, 0
	072 JumpIfEqual {387}
	073 Move X1, X31
	074 Call CollectionBase.get_Count, X0
	075 Compare W0, 0
	076 JumpIfEqual {193}
	077 Move X0, X20
	078 Move X1, X31
	079 Call PKCS12.get_Keys, X0
	080 Compare X0, 0
	081 JumpIfEqual {387}
	082 Move X8, [X0]
	083 Move X9, [X8+664]
	084 Move X1, [X8+672]
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Compare W0, 0
	087 JumpIfEqual {194}
	088 Move X0, X20
	089 Move X1, X31
	090 Call PKCS12.get_Keys, X0
	091 Compare X0, 0
	092 JumpIfEqual {387}
	093 Move X8, [X0]
	094 Move W1, W31
	095 Move X9, [X8+744]
	096 Move X2, [X8+752]
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Compare X0, 0
	099 JumpIfEqual {387}
	100 Move X8, 0xAE6000
	101 Move X8, [X8+2936]
	102 Move X9, [X0]
	103 Move X22, X0
	104 Move X8, [X8]
	105 Move W11, [X9+304]
	106 Move W10, [X8+304]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X9, [X9+200]
	109 Add X9, X9, X10
	110 NotImplemented "Instruction LDUR not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X8, [X22]
	113 Move X0, X22
	114 Move W1, W31
	115 Move X9, [X8+456]
	116 Move X2, [X8+464]
	117 NotImplemented "Instruction BLR not yet implemented."
	118 Move X24, X0
	119 Move X0, X20
	120 Move X1, X31
	121 Call PKCS12.get_Certificates, X0
	122 Compare X0, 0
	123 JumpIfEqual {387}
	124 Move X1, X31
	125 Call X509CertificateCollection.GetEnumerator, X0
	126 Move X23, X0
	127 Compare X0, 0
	128 JumpIfEqual {391}
	129 Move X0, X23
	130 Move X1, X31
	131 Call X509CertificateEnumerator.MoveNext, X0
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {212}
	136 Move X0, X23
	137 Move X1, X31
	138 Call X509CertificateEnumerator.get_Current, X0
	139 Move X21, X0
	140 Compare X0, 0
	141 JumpIfEqual {386}
	142 Move X8, [X21]
	143 Move X9, [X8+472]
	144 Move X1, [X8+480]
	145 Move X0, X21
	146 NotImplemented "Instruction BLR not yet implemented."
	147 Compare X0, 0
	148 JumpIfEqual {169}
	149 Move X8, [X21]
	150 Move X9, [X8+472]
	151 Move X1, [X8+480]
	152 Move X0, X21
	153 NotImplemented "Instruction BLR not yet implemented."
	154 Compare X0, 0
	155 JumpIfEqual {388}
	156 Move X8, [X0]
	157 Move X9, [X8+456]
	158 Move X2, [X8+464]
	159 Move W1, W31
	160 NotImplemented "Instruction BLR not yet implemented."
	161 Move X1, X0
	162 Move X0, X24
	163 Move X2, X31
	164 Call String.op_Equality, X0, X1
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfEqual {192}
	169 Move X0, X21
	170 Move X1, X31
	171 Call X509Certificate.get_DSA, X0
	172 Compare X0, 0
	173 JumpIfEqual {129}
	174 Move X0, X21
	175 Move X1, X31
	176 Call X509Certificate.get_DSA, X0
	177 Compare X0, 0
	178 JumpIfEqual {389}
	179 Move X8, [X0]
	180 Move X9, [X8+456]
	181 Move X2, [X8+464]
	182 Move W1, W31
	183 NotImplemented "Instruction BLR not yet implemented."
	184 Move X1, X0
	185 Move X0, X24
	186 Move X2, X31
	187 Call String.op_Equality, X0, X1
	188 Move TEMP, X0
	189 And TEMP, TEMP, 1
	190 Compare TEMP, 1
	191 JumpIfNotEqual {129}
	192 Move X24, X31
	193 Move X21, X31
	194 Move X0, X20
	195 Move X1, X31
	196 Call PKCS12.get_Certificates, X0
	197 Compare X0, 0
	198 JumpIfEqual {387}
	199 Move X20, [X31+64]
	200 Move X19, [X31+72]
	201 Move X22, [X31+48]
	202 Move X21, [X31+56]
	203 Move X24, [X31+32]
	204 Move X23, [X31+40]
	205 Move X26, [X31+16]
	206 Move X25, [X31+24]
	207 Move W1, W31
	208 Move X2, X31
	209 Move X30, [X31+80]
	210 Call X509CertificateCollection.get_Item, X0, X1
	211 Return X0
	212 Move X24, X31
	213 Move X21, X31
	214 Move W25, 11
	215 Move X26, 0xA9D000
	216 Move X26, [X26+3584]
	217 Move X0, X23
	218 Move X1, [X26]
	219 Call 0x1C17E00
	220 Compare X0, 0
	221 JumpIfEqual {244}
	222 Move X8, [X0]
	223 Move X1, [X26]
	224 Move X23, X0
	225 NotImplemented "Instruction LDRH not yet implemented."
	226 Compare X9, 0
	227 JumpIfEqual {234}
	228 Move X10, [X8+176]
	229 Add X10, X10, 8
	230 NotImplemented "Instruction LDUR not yet implemented."
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Subtract X9, X9, 1
	233 Add X10, X10, 16
	234 Move X0, X23
	235 Move W2, W31
	236 Call 0x1C5D788
	237 NotImplemented "Instruction LDRSW not yet implemented."
	238 Add X8, X8, X9
	239 Add X0, X8, 312
	240 Move X8, [X0]
	241 Move X1, [X0+8]
	242 Move X0, X23
	243 NotImplemented "Instruction BLR not yet implemented."
	244 Compare X24, 0
	245 JumpIfNotEqual {392}
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Compare W25, 0
	248 JumpIfNotEqual {375}
	249 Compare X21, 0
	250 JumpIfEqual {259}
	251 Move X8, 0xACB000
	252 Move X8, [X8+352]
	253 Move X9, [X22]
	254 Move X8, [X8]
	255 Move W11, [X9+304]
	256 Move W10, [X8+304]
	257 NotImplemented "Instruction CMP not yet implemented."
	258 Move X1, X31
	259 Move X0, X20
	260 Move X1, X31
	261 Call PKCS12.get_Certificates, X0
	262 Compare X0, 0
	263 JumpIfEqual {387}
	264 Move W1, W31
	265 Move X2, X31
	266 Call X509CertificateCollection.get_Item, X0, X1
	267 Move X21, X0
	268 Move X9, [X9+200]
	269 Add X9, X9, X10
	270 NotImplemented "Instruction LDUR not yet implemented."
	271 NotImplemented "Instruction CMP not yet implemented."
	272 NotImplemented "Instruction CSEL not yet implemented."
	273 Move X8, [X21]
	274 Move X0, X21
	275 Move X9, [X8+488]
	276 Move X2, [X8+496]
	277 NotImplemented "Instruction BLR not yet implemented."
	278 Move X8, 0xACB000
	279 Move X8, [X8+344]
	280 Move X9, [X22]
	281 Move X8, [X8]
	282 Move W11, [X9+304]
	283 Move W10, [X8+304]
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Move X1, X31
	286 Move X9, [X9+200]
	287 Add X9, X9, X10
	288 NotImplemented "Instruction LDUR not yet implemented."
	289 NotImplemented "Instruction CMP not yet implemented."
	290 NotImplemented "Instruction CSEL not yet implemented."
	291 Move X0, X21
	292 Move X2, X31
	293 Call X509Certificate.set_DSA, X0, X1
	294 Move X0, X20
	295 Move X1, X31
	296 Call PKCS12.get_Certificates, X0
	297 Compare X0, 0
	298 JumpIfEqual {387}
	299 Move X1, X31
	300 Call CollectionBase.get_Count, X0
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Move X8, 0xAE6000
	303 Move X8, [X8+2896]
	304 Move X0, [X8]
	305 Call 0x1C17F10
	306 Move X22, X0
	307 Call X509CertificateImplCollection..ctor, X0
	308 Move X0, X20
	309 Move X1, X31
	310 Move [X19+176], X22
	311 Call PKCS12.get_Certificates, X0
	312 Compare X0, 0
	313 JumpIfEqual {387}
	314 Move X1, X31
	315 Call X509CertificateCollection.GetEnumerator, X0
	316 Move X20, X0
	317 Compare X0, 0
	318 JumpIfEqual {394}
	319 Move X24, 0xAE3000
	320 Move X24, [X24+448]
	321 Move X0, X20
	322 Move X1, X31
	323 Call X509CertificateEnumerator.MoveNext, X0
	324 Move TEMP, X0
	325 And TEMP, TEMP, 1
	326 Compare TEMP, 1
	327 JumpIfNotEqual {345}
	328 Move X0, X20
	329 Move X1, X31
	330 Call X509CertificateEnumerator.get_Current, X0
	331 Move X22, X0
	332 NotImplemented "Instruction CMP not yet implemented."
	333 Move X0, [X24]
	334 Call 0x1C17F10
	335 Move X23, X0
	336 Move X1, X31
	337 Call X509CertificateImpl..ctor, X0
	338 Move [X23+184], X22
	339 Move X0, [X19+176]
	340 Compare X0, 0
	341 JumpIfEqual {390}
	342 Move W2, 1
	343 Move X1, X23
	344 Call X509CertificateImplCollection.Add, X0, X1, X2
	345 Move X19, X31
	346 Move X1, [X26]
	347 Move X0, X20
	348 Call 0x1C17E00
	349 Compare X0, 0
	350 JumpIfEqual {373}
	351 Move X8, [X0]
	352 Move X1, [X26]
	353 Move X20, X0
	354 NotImplemented "Instruction LDRH not yet implemented."
	355 Compare X9, 0
	356 JumpIfEqual {363}
	357 Move X10, [X8+176]
	358 Add X10, X10, 8
	359 NotImplemented "Instruction LDUR not yet implemented."
	360 NotImplemented "Instruction CMP not yet implemented."
	361 Subtract X9, X9, 1
	362 Add X10, X10, 16
	363 Move X0, X20
	364 Move W2, W31
	365 Call 0x1C5D788
	366 NotImplemented "Instruction LDRSW not yet implemented."
	367 Add X8, X8, X9
	368 Add X0, X8, 312
	369 Move X8, [X0]
	370 Move X1, [X0+8]
	371 Move X0, X20
	372 NotImplemented "Instruction BLR not yet implemented."
	373 Compare X19, 0
	374 JumpIfNotEqual {395}
	375 Move X0, X21
	376 Move X20, [X31+64]
	377 Move X19, [X31+72]
	378 Move X22, [X31+48]
	379 Move X21, [X31+56]
	380 Move X24, [X31+32]
	381 Move X23, [X31+40]
	382 Move X26, [X31+16]
	383 Move X25, [X31+24]
	384 Move X30, [X31+80]
	385 Return X0
	386 Call 0x1C17F20
	387 Call 0x1C17F20
	388 Call 0x1C17F20
	389 Call 0x1C17F20
	390 Call 0x1C17F20
	391 Call 0x1C17F20
	392 Move X0, X24
	393 Call 0x1C17F18
	394 Call 0x1C17F20
	395 Move X0, X19
	396 Call 0x1C17F18
	397 NotImplemented "Instruction CMP not yet implemented."
	398 Move X25, X0
	399 Move X0, X25
	400 Call 0x3EB2AD0
	401 Move X20, X0
	402 Move X0, 0xAA3000
	403 Move X0, [X0+3264]
	404 Call 0x1C17D08
	405 Move X8, [X20]
	406 Move X1, [X8]
	407 Call 0x1C18270
	408 Move TEMP, X0
	409 And TEMP, TEMP, 1
	410 Compare TEMP, 1
	411 JumpIfNotEqual {421}
	412 Call 0x3EB2AE0
	413 Move X0, 0xA9E000
	414 Move X0, [X0+632]
	415 Call 0x1C17D08
	416 Move X8, [X0+184]
	417 Move X0, 0xAC9000
	418 Move X22, [X8]
	419 Move X0, [X0+3432]
	420 Call 0x1C17D08
	421 Move W0, 8
	422 Call 0x3EB2AF0
	423 Move X8, [X20]
	424 Move [X0], X8
	425 Move X1, 0x85D000
	426 Add X1, X1, 3672
	427 Move X2, X31
	428 Call 0x3EB2B00
	429 Move X25, X0
	430 Call 0x3EB2AE0
	431 Move X25, X0
	432 NotImplemented "Instruction CMP not yet implemented."
	433 Move X0, X25
	434 Call 0x3EB2AD0
	435 Move X19, [X0]
	436 Call 0x3EB2AE0
	437 Move X19, X31
	438 Move X25, X0
	439 Move X1, [X26]
	440 Move X0, X20
	441 Call 0x1C17E00
	442 Move X20, X0
	443 Compare X0, 0
	444 JumpIfEqual {466}
	445 Move X8, [X20]
	446 Move X1, [X26]
	447 NotImplemented "Instruction LDRH not yet implemented."
	448 Compare X9, 0
	449 JumpIfEqual {456}
	450 Move X10, [X8+176]
	451 Add X10, X10, 8
	452 NotImplemented "Instruction LDUR not yet implemented."
	453 NotImplemented "Instruction CMP not yet implemented."
	454 Subtract X9, X9, 1
	455 Add X10, X10, 16
	456 Move X0, X20
	457 Move W2, W31
	458 Call 0x1C5D788
	459 NotImplemented "Instruction LDRSW not yet implemented."
	460 Add X8, X8, X9
	461 Add X0, X8, 312
	462 Move X8, [X0]
	463 Move X1, [X0+8]
	464 Move X0, X20
	465 NotImplemented "Instruction BLR not yet implemented."
	466 Compare X19, 0
	467 JumpIfEqual {511}
	468 Move X0, X19
	469 Call 0x1C17F18
	470 Move X25, X0
	471 NotImplemented "Instruction CMP not yet implemented."
	472 Move X0, X25
	473 Call 0x3EB2AD0
	474 Move X24, [X0]
	475 Call 0x3EB2AE0
	476 Move W25, W31
	477 Move X21, X31
	478 Move X24, X31
	479 Move X25, X0
	480 Move X20, 0xA9C000
	481 Move X20, [X20+3584]
	482 Move X1, [X20]
	483 Move X0, X23
	484 Call 0x1C17E00
	485 Move X19, X0
	486 Compare X0, 0
	487 JumpIfEqual {509}
	488 Move X8, [X19]
	489 Move X1, [X20]
	490 NotImplemented "Instruction LDRH not yet implemented."
	491 Compare X9, 0
	492 JumpIfEqual {499}
	493 Move X10, [X8+176]
	494 Add X10, X10, 8
	495 NotImplemented "Instruction LDUR not yet implemented."
	496 NotImplemented "Instruction CMP not yet implemented."
	497 Subtract X9, X9, 1
	498 Add X10, X10, 16
	499 Move X0, X19
	500 Move W2, W31
	501 Call 0x1C5D788
	502 NotImplemented "Instruction LDRSW not yet implemented."
	503 Add X8, X8, X9
	504 Add X0, X8, 312
	505 Move X8, [X0]
	506 Move X1, [X0+8]
	507 Move X0, X19
	508 NotImplemented "Instruction BLR not yet implemented."
	509 Compare X24, 0
	510 JumpIfNotEqual {513}
	511 Move X0, X25
	512 Call 0x1D2D690
	513 Move X0, X24
	514 Call 0x1C17F18
	515 Call 0x1991590

Method: System.Boolean Verify(System.Security.Cryptography.X509Certificates.X509Certificate2 thisCertificate)

Disassembly:
	0x03658344 MOVZ W8, 0x1
	0x03658348 STRB W8, [X21 + 0x650]
	0x0365834C LDR X8, [X19]
	0x03658350 MOVZ W1, 0x1
	0x03658354 MOV X0, X19
	0x03658358 LDP X9, X2, [X8 + 0x188]
	0x0365835C BLR X9
	0x03658360 LDR X0, [X20]
	0x03658364 LDR W8, [X0 + 0xE0]
	0x03658368 CBNZ W8, 0x3658370
	0x0365836C BL 0x1C16DFC
	0x03658370 MOV X0, X19
	0x03658374 LDP X20, X19, [X31 + 0x10]
	0x03658378 MOV X1, X31
	0x0365837C LDP X30, X21, [X31], #0x20
	0x03658380 B 0x33B3E9C
	0x03658384 SUB X31, X31, 0x80
	0x03658388 STP X30, X25, [X31 + 0x40]
	0x0365838C STP X24, X23, [X31 + 0x50]
	0x03658390 STP X22, X21, [X31 + 0x60]
	0x03658394 STP X20, X19, [X31 + 0x70]
	0x03658398 ADRP X20, 0xD88000
	0x0365839C LDRB W8, [X20 + 0x651]
	0x036583A0 MOV X19, X0
	0x036583A4 TBNZ X8, 0x0, 0x36583EC
	0x036583A8 ADRP X0, 0xAE4000
	0x036583AC LDR X0, [X0 + 0xBB8]
	0x036583B0 BL 0x1C16CF4
	0x036583B4 ADRP X0, 0xAE4000
	0x036583B8 LDR X0, [X0 + 0xBC0]
	0x036583BC BL 0x1C16CF4
	0x036583C0 ADRP X0, 0xAE4000
	0x036583C4 LDR X0, [X0 + 0xBC8]
	0x036583C8 BL 0x1C16CF4
	0x036583CC ADRP X0, 0xAE4000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+184]
	005 Compare X8, 0
	006 JumpIfEqual {17}
	007 Move X19, X1
	008 Call X509Chain.Create
	009 Compare X0, 0
	010 JumpIfEqual {40}
	011 Move X1, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Call X509Chain.Build, X0, X1
	016 Return X0
	017 Move X19, 0xAE2000
	018 Move X19, [X19+448]
	019 Move X0, X19
	020 Call 0x1C17D08
	021 Call 0x19913D0
	022 Move X0, X19
	023 Call 0x1C17D08
	024 Move X8, [X0+184]
	025 Move X0, 0xAC9000
	026 Move X19, [X8]
	027 Move X0, [X0+3296]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X1, X19
	031 Move X2, X31
	032 Move X20, X0
	033 Call CryptographicException..ctor, X0, X1
	034 Move X0, 0xAE5000
	035 Move X0, [X0+2968]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X20
	039 Call 0x1C17DEC
	040 Call 0x1C17F20

Method: System.Security.Cryptography.X509Certificates.X509CertificateImplCollection get_IntermediateCertificates()

Disassembly:
	0x0365846C MOV X21, X0
	0x03658470 CMP W22, 0x1

ISIL:
	001 Move X0, [X0+176]
	002 Return X0

Method: Mono.Security.X509.X509Certificate get_MonoCertificate()

Disassembly:
	0x03658474 B.NE 0x3658540
	0x03658478 MOV X0, X21

ISIL:
	001 Move X0, [X0+184]
	002 Return X0

Method: System.Void .cctor()

Disassembly:
	0x0365847C BL 0x3EB1AD0
	0x03658480 MOV X21, X0
	0x03658484 MOV X0, X20
	0x03658488 BL 0x1C16D08
	0x0365848C LDR X8, [X21]
	0x03658490 LDR X1, [X8]
	0x03658494 BL 0x1C17270
	0x03658498 TBZ X0, 0x0, 0x36584F8
	0x0365849C BL 0x3EB1AE0
	0x036584A0 B 0x365843C
	0x036584A4 LDR X1, [X23]
	0x036584A8 ADD X0, X31, 0x20
	0x036584AC BL 0x2BC434C
	0x036584B0 LDR X8, [X19 + 0x10]
	0x036584B4 CBZ X8, 0x36584F4
	0x036584B8 LDP W2, W9, [X8 + 0x18]
	0x036584BC ADD W9, W9, 0x1
	0x036584C0 CMP W2, 0x1
	0x036584C4 STP W31, W9, [X8 + 0x18]
	0x036584C8 B.LT 0x36584DC
	0x036584CC LDR X0, [X8 + 0x10]
	0x036584D0 MOV W1, W31
	0x036584D4 MOV X3, X31
	0x036584D8 BL 0x339FA34
	0x036584DC LDP X20, X19, [X31 + 0x70]
	0x036584E0 LDP X22, X21, [X31 + 0x60]
	0x036584E4 LDP X24, X23, [X31 + 0x50]
	0x036584E8 LDP X30, X25, [X31 + 0x40]
	0x036584EC ADD X31, X31, 0x80
	0x036584F0 RET
	0x036584F4 BL 0x1C16F20
	0x036584F8 MOVZ W0, 0x8
	0x036584FC BL 0x3EB1AF0
	0x03658500 LDR X8, [X21]
	0x03658504 STR X8, [X0]
	0x03658508 ADRP X1, 0x85C000
	0x0365850C ADD X1, X1, 0xE58
	0x03658510 MOV X2, X31
	0x03658514 BL 0x3EB1B00
	0x03658518 B 0x3658524
	0x0365851C MOV X21, X0
	0x03658520 B 0x365853C
	0x03658524 MOV X21, X0
	0x03658528 MOV W22, W1
	0x0365852C BL 0x3EB1AE0
	0x03658530 B 0x3658540
	0x03658534 MOV X21, X0
	0x03658538 MOVZ W24, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xD89000
	008 Move X23, 0xACC000
	009 Move X20, 0xAE2000
	010 Move X21, 0xA9C000
	011 Move X19, 0xAE2000
	012 Move W8, [X22+1597]
	013 Move X23, [X23+2544]
	014 Move X20, [X20+448]
	015 Move X21, [X21+1560]
	016 Move X19, [X19+504]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xA9C000
	022 Move X0, [X0+1560]
	023 Call 0x1C17CF4
	024 Move X0, 0xAE2000
	025 Move X0, [X0+504]
	026 Call 0x1C17CF4
	027 Move X0, 0xAE2000
	028 Move X0, [X0+448]
	029 Call 0x1C17CF4
	030 Move X0, 0xACC000
	031 Move X0, [X0+2544]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+1597], W8
	035 Move X0, [X23]
	036 Move X1, X31
	037 Call Locale.GetText, X0
	038 Move X8, [X20]
	039 Move W1, 9
	040 Move X8, [X8+184]
	041 Move [X8], X0
	042 Move X0, [X21]
	043 Call 0x1C17D6C
	044 Move X1, [X19]
	045 Move X2, X31
	046 Move X19, X0
	047 Call RuntimeHelpers.InitializeArray, X0, X1
	048 Move X8, [X20]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X8, [X8+184]
	052 Move [X8+8], X19
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return 

