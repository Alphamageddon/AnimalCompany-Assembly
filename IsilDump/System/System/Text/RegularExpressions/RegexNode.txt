Type: System.Text.RegularExpressions.RegexNode

Method: System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options)

Disassembly:
	0x0364030C BL 0x36403FC
	0x03640310 CBZ X21, 0x36403F8
	0x03640314 STR W19, [X21 + 0x80]
	0x03640318 ADRP X22, 0xDA0000
	0x0364031C LDRB W8, [X22 + 0x57F]
	0x03640320 TBNZ X8, 0x0, 0x3640338
	0x03640324 ADRP X0, 0xAB5000
	0x03640328 LDR X0, [X0 + 0x278]
	0x0364032C BL 0x1C16CF4
	0x03640330 MOVZ W8, 0x1
	0x03640334 STRB W8, [X22 + 0x57F]
	0x03640338 CBNZ X20, 0x3640350

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X1, X31
	007 Move W19, W2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move [X21+16], W20
	011 Move [X21+52], W19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return 

Method: System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options, System.Char ch)

Disassembly:
	0x0364033C ADRP X8, 0xAB5000
	0x03640340 LDR X8, [X8 + 0x278]
	0x03640344 LDR X8, [X8]
	0x03640348 LDR X8, [X8 + 0xB8]
	0x0364034C LDR X20, [X8]
	0x03640350 ADRP X23, 0xAFC000
	0x03640354 LDR X23, [X23 + 0x3C8]
	0x03640358 MOV X0, X21
	0x0364035C STR X20, [X21 + 0x38]
	0x03640360 STR W31, [X21 + 0x40]
	0x03640364 BL 0x3640514
	0x03640368 MOV X0, X21
	0x0364036C MOV W1, W19
	0x03640370 BL 0x3640854
	0x03640374 MOV X0, X21
	0x03640378 BL 0x36408E0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move W19, W3
	009 Move W20, W2
	010 Move X22, X0
	011 Call Object..ctor, X0
	012 Move [X22+16], W21
	013 Move [X22+52], W20
	014 NotImplemented "Instruction STRH not yet implemented."
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X22, [X31+16]
	018 Move X21, [X31+24]
	019 Move X30, [X31+48]
	020 Return 

Method: System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options, System.String str)

Disassembly:
	0x0364037C LDR X8, [X21 + 0x78]
	0x03640380 MOV X20, X0
	0x03640384 CBZ X8, 0x36403A4
	0x03640388 ADRP X9, 0xAB5000
	0x0364038C LDR X9, [X9 + 0xE78]
	0x03640390 MOV X0, X8
	0x03640394 LDR X1, [X9]
	0x03640398 BL 0x301DDC4
	0x0364039C MOV X22, X0
	0x036403A0 B 0x36403A8
	0x036403A4 MOV X22, X31
	0x036403A8 LDR X0, [X23]
	0x036403AC LDP X27, X24, [X21 + 0x68]
	0x036403B0 LDR W25, [X21 + 0x58]
	0x036403B4 LDR X26, [X21 + 0x60]
	0x036403B8 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move X19, X3
	009 Move W20, W2
	010 Move X22, X0
	011 Call Object..ctor, X0
	012 Move [X22+16], W21
	013 Move [X22+52], W20
	014 Move [X22+32], X19
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X22, [X31+16]
	018 Move X21, [X31+24]
	019 Move X30, [X31+48]
	020 Return 

Method: System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options, System.Int32 m)

Disassembly:
	0x036403BC MOV X1, X31
	0x036403C0 MOV X21, X0
	0x036403C4 BL 0x33BDD8C
	0x036403C8 STP X20, X26, [X21 + 0x10]
	0x036403CC STR X24, [X21 + 0x20]
	0x036403D0 STR W25, [X21 + 0x28]
	0x036403D4 STP X27, X22, [X21 + 0x30]
	0x036403D8 STR W19, [X21 + 0x40]
	0x036403DC MOV X0, X21
	0x036403E0 LDP X20, X19, [X31 + 0x40]
	0x036403E4 LDP X22, X21, [X31 + 0x30]
	0x036403E8 LDP X24, X23, [X31 + 0x20]
	0x036403EC LDP X26, X25, [X31 + 0x10]
	0x036403F0 LDP X30, X27, [X31], #0x50
	0x036403F4 RET
	0x036403F8 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W1
	007 Move X1, X31
	008 Move W19, W3
	009 Move W20, W2
	010 Move X22, X0
	011 Call Object..ctor, X0
	012 Move [X22+16], W21
	013 Move [X22+52], W20
	014 Move [X22+44], W19
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X22, [X31+16]
	018 Move X21, [X31+24]
	019 Move X30, [X31+48]
	020 Return 

Method: System.Void .ctor(System.Int32 type, System.Text.RegularExpressions.RegexOptions options, System.Int32 m, System.Int32 n)

Disassembly:
	0x036403FC STR X30, [X31 - 0x40]!
	0x03640400 STP X24, X23, [X31 + 0x10]
	0x03640404 STP X22, X21, [X31 + 0x20]
	0x03640408 STP X20, X19, [X31 + 0x30]
	0x0364040C ADRP X24, 0xDA0000
	0x03640410 ADRP X23, 0xAFC000
	0x03640414 ADRP X22, 0xAFC000
	0x03640418 ADRP X21, 0xAE3000
	0x0364041C LDRB W8, [X24 + 0x57E]
	0x03640420 LDR X23, [X23 + 0x3D0]
	0x03640424 LDR X22, [X22 + 0x3D8]
	0x03640428 LDR X21, [X21 + 0xDB8]
	0x0364042C MOV X20, X1
	0x03640430 MOV X19, X0
	0x03640434 TBNZ X8, 0x0, 0x3640464
	0x03640438 ADRP X0, 0xAE3000
	0x0364043C LDR X0, [X0 + 0xDB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W22, W1
	008 Move X1, X31
	009 Move W19, W4
	010 Move W20, W3
	011 Move W21, W2
	012 Move X23, X0
	013 Call Object..ctor, X0
	014 Move [X23+16], W22
	015 Move [X23+48], W19
	016 Move [X23+52], W21
	017 Move [X23+44], W20
	018 Move X20, [X31+32]
	019 Move X19, [X31+40]
	020 Move X22, [X31+16]
	021 Move X21, [X31+24]
	022 Move X30, [X31+48]
	023 Move X23, [X31+56]
	024 Return 

Method: System.Boolean UseOptionR()

Disassembly:
	0x03640440 BL 0x1C16CF4
	0x03640444 ADRP X0, 0xAFC000
	0x03640448 LDR X0, [X0 + 0x3D8]

ISIL:
	001 Move W8, [X0+52]
	002 Move W0, W8
	003 ShiftRight W0, 6
	004 And W0, W0, 63
	005 Return X0

Method: System.Text.RegularExpressions.RegexNode ReverseLeft()

Disassembly:
	0x0364044C BL 0x1C16CF4
	0x03640450 ADRP X0, 0xAFC000
	0x03640454 LDR X0, [X0 + 0x3D0]
	0x03640458 BL 0x1C16CF4
	0x0364045C MOVZ W8, 0x1
	0x03640460 STRB W8, [X24 + 0x57E]
	0x03640464 MOV X0, X19
	0x03640468 MOV X1, X31
	0x0364046C BL 0x33BDD8C
	0x03640470 STR X20, [X19 + 0x48]
	0x03640474 LDR X0, [X23]
	0x03640478 BL 0x1C16F10
	0x0364047C LDR X1, [X22]
	0x03640480 MOV X20, X0
	0x03640484 BL 0x2FDE980
	0x03640488 STR X20, [X19 + 0x88]
	0x0364048C LDR X0, [X21]
	0x03640490 BL 0x1C16F10
	0x03640494 MOV X1, X31
	0x03640498 MOV X20, X0
	0x0364049C BL 0x335A0A0
	0x036404A0 STR X20, [X19 + 0x60]
	0x036404A4 LDP X20, X19, [X31 + 0x30]
	0x036404A8 LDP X22, X21, [X31 + 0x20]
	0x036404AC LDP X24, X23, [X31 + 0x10]
	0x036404B0 LDR X30, [X31], #0x40
	0x036404B4 RET
	0x036404B8 STP X30, X21, [X31 - 0x20]!
	0x036404BC STP X20, X19, [X31 + 0x10]
	0x036404C0 ADRP X21, 0xDA0000
	0x036404C4 LDRB W8, [X21 + 0x57F]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDA1000
	005 Move W8, [X20+1394]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xAFD000
	012 Move X0, [X0+904]
	013 Call 0x1C17CF4
	014 Move X0, 0xAFD000
	015 Move X0, [X0+720]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1394], W8
	019 Move W8, [X19+52]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 64
	022 Compare TEMP, 64
	023 JumpIfNotEqual {35}
	024 Move W8, [X19+16]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, [X19+24]
	027 Compare X0, 0
	028 JumpIfEqual {35}
	029 Move X8, 0xAFD000
	030 Move W2, [X0+24]
	031 Move X8, [X8+904]
	032 Move W1, W31
	033 Move X3, [X8]
	034 Call List`1<Object>.Reverse, X0, X1, X2
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Return X0

Method: System.Void MakeRep(System.Int32 type, System.Int32 min, System.Int32 max)

Disassembly:
	0x036404C8 MOV X20, X1
	0x036404CC MOV X19, X0
	0x036404D0 TBNZ X8, 0x0, 0x36404E8
	0x036404D4 ADRP X0, 0xAB5000
	0x036404D8 LDR X0, [X0 + 0x278]
	0x036404DC BL 0x1C16CF4

ISIL:
	001 Move W8, [X0+16]
	002 Move [X0+44], W2
	003 Move [X0+48], W3
	004 Add W8, W1, W8
	005 Subtract W8, W8, 9
	006 Move [X0+16], W8
	007 Return 

Method: System.Text.RegularExpressions.RegexNode Reduce()

Disassembly:
	0x036404E0 MOVZ W8, 0x1
	0x036404E4 STRB W8, [X21 + 0x57F]
	0x036404E8 CBNZ X20, 0x3640500
	0x036404EC ADRP X8, 0xAB5000
	0x036404F0 LDR X8, [X8 + 0x278]
	0x036404F4 LDR X8, [X8]
	0x036404F8 LDR X8, [X8 + 0xB8]
	0x036404FC LDR X20, [X8]
	0x03640500 STR X20, [X19 + 0x38]
	0x03640504 STR W31, [X19 + 0x40]
	0x03640508 LDP X20, X19, [X31 + 0x10]
	0x0364050C LDP X30, X21, [X31], #0x20
	0x03640510 RET
	0x03640514 STP X30, X23, [X31 - 0x30]!
	0x03640518 STP X22, X21, [X31 + 0x10]
	0x0364051C STP X20, X19, [X31 + 0x20]
	0x03640520 ADRP X20, 0xDA0000
	0x03640524 LDRB W8, [X20 + 0x58E]
	0x03640528 MOV X19, X0
	0x0364052C TBNZ X8, 0x0, 0x3640544
	0x03640530 ADRP X0, 0xAFB000
	0x03640534 LDR X0, [X0 + 0x8E0]
	0x03640538 BL 0x1C16CF4
	0x0364053C MOVZ W8, 0x1
	0x03640540 STRB W8, [X20 + 0x58E]
	0x03640544 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+16]
	003 Subtract W9, W8, 24
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, -44728320
	006 Add X8, X8, 1204
	007 NotImplemented "Instruction ADR not yet implemented."
	008 Move W11, [X8]
	009 Add X10, X10, X11
	010 CallNoReturn X10
	011 Move X30, [X31+16]
	012 Call RegexNode.ReduceRep, X0
	013 Return X0
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Call RegexNode.ReduceSet, X0
	017 Move X30, [X31+16]
	018 Return X0
	019 Move X30, [X31+16]
	020 Move X30, [X31+16]
	021 Call RegexNode.ReduceConcatenation, X0
	022 Return X0
	023 Move X30, [X31+16]
	024 Call RegexNode.ReduceGroup, X0
	025 Return X0

Method: System.Text.RegularExpressions.RegexNode StripEnation(System.Int32 emptyType)

Disassembly:
	0x03640F88 MOV X0, X19
	0x03640F8C BL 0x3643360
	0x03640F90 MOV X19, X0
	0x03640F94 ADRP X0, 0xAFC000
	0x03640F98 LDR X0, [X0 + 0x400]
	0x03640F9C BL 0x1C16D08
	0x03640FA0 MOV X1, X0
	0x03640FA4 MOV X0, X19
	0x03640FA8 BL 0x1C16DEC
	0x03640FAC TBZ X22, 0x0, 0x3640FF4
	0x03640FB0 ADRP X0, 0xAB5000
	0x03640FB4 LDR X0, [X0 + 0x170]
	0x03640FB8 BL 0x1C16D08
	0x03640FBC LDR W8, [X0 + 0xE0]
	0x03640FC0 CBNZ W8, 0x3640FC8
	0x03640FC4 BL 0x1C16DFC
	0x03640FC8 ADD X0, X31, 0xC
	0x03640FCC MOV X1, X31
	0x03640FD0 BL 0x330A76C
	0x03640FD4 MOV X20, X0
	0x03640FD8 ADRP X0, 0xAFC000
	0x03640FDC LDR X0, [X0 + 0x408]
	0x03640FE0 BL 0x1C16D08
	0x03640FE4 MOV X1, X20
	0x03640FE8 MOV X2, X31
	0x03640FEC BL 0x32094D4
	0x03640FF0 B 0x3641000
	0x03640FF4 ADRP X0, 0xAFC000
	0x03640FF8 LDR X0, [X0 + 0x410]
	0x03640FFC BL 0x1C16D08
	0x03641000 MOV X20, X0
	0x03641004 MOV X0, X19
	0x03641008 BL 0x19903C0
	0x0364100C MOV X0, X19
	0x03641010 MOV X1, X20
	0x03641014 B 0x3640F8C
	0x03641018 ADRP X0, 0xAFB000
	0x0364101C LDR X0, [X0 + 0x418]
	0x03641020 B 0x3640F80
	0x03641024 ADRP X0, 0xAFB000
	0x03641028 LDR X0, [X0 + 0x420]
	0x0364102C B 0x3640F80
	0x03641030 STR X30, [X31 - 0x50]!
	0x03641034 STP X26, X25, [X31 + 0x10]
	0x03641038 STP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDA1000
	006 Move W8, [X21+1395]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAFD000
	014 Move X0, [X0+936]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1395], W8
	018 Move X21, 0xDA1000
	019 Move W8, [X21+1403]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xAFD000
	025 Move X0, [X0+720]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1403], W8
	029 Move X8, [X19+24]
	030 Compare X8, 0
	031 JumpIfEqual {36}
	032 Move W8, [X8+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Compare W8, 0
	035 JumpIfNotEqual {46}
	036 Move X8, 0xAFD000
	037 Move X8, [X8+936]
	038 Move W21, [X19+52]
	039 Move X0, [X8]
	040 Call 0x1C17F10
	041 Move X1, X31
	042 Move X19, X0
	043 Call Object..ctor, X0
	044 Move [X19+16], W20
	045 Move [X19+52], W21
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move W1, W31
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Call RegexNode.Child, X0, X1
	059 Return X0

Method: System.Text.RegularExpressions.RegexNode ReduceGroup()

Disassembly:
	0x03640E40 MOV X0, X19
	0x03640E44 BL 0x3643D80
	0x03640E48 MOV W22, W0
	0x03640E4C LDR W8, [X19 + 0x40]
	0x03640E50 CMP W24, W8
	0x03640E54 B.EQ 0x3640F08
	0x03640E58 LDR X9, [X19 + 0x38]
	0x03640E5C CBZ X9, 0x3640F68
	0x03640E60 LDR W9, [X9 + 0x10]
	0x03640E64 CMP W9, W8
	0x03640E68 B.EQ 0x3640F08

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {10}
	004 Move W8, [X0+16]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W1, W31
	007 Call RegexNode.Child, X0, X1
	008 Compare X0, 0
	009 JumpIfNotEqual {4}
	010 Call 0x1C17F20
	011 Move X30, [X31+16]
	012 Return X0

Method: System.Text.RegularExpressions.RegexNode ReduceRep()

Disassembly:
	0x03640CB8 BL 0x36417EC
	0x03640CBC B 0x3640F1C
	0x03640CC0 LDR X8, [X19 + 0x10]
	0x03640CC4 CBZ X8, 0x3641018
	0x03640CC8 CMP W24, 0x0
	0x03640CCC MOV X0, X19
	0x03640CD0 CSET W22, NE
	0x03640CD4 BL 0x36433F8
	0x03640CD8 MOV X0, X19
	0x03640CDC BL 0x3643538
	0x03640CE0 MOV X0, X19
	0x03640CE4 BL 0x3643608
	0x03640CE8 LDR X8, [X19 + 0x30]
	0x03640CEC CBNZ X8, 0x3640D20
	0x03640CF0 B 0x3640F1C
	0x03640CF4 LDRB W8, [X19 + 0x80]
	0x03640CF8 TBNZ X8, 0x4, 0x3640D0C
	0x03640CFC MOVZ W1, 0xA
	0x03640D00 MOV X0, X19
	0x03640D04 BL 0x3643C6C
	0x03640D08 B 0x3640D20
	0x03640D0C ADRP X8, 0xAFC000
	0x03640D10 LDR X8, [X8 + 0x330]
	0x03640D14 LDR X1, [X8]
	0x03640D18 MOV X0, X19
	0x03640D1C BL 0x36427F0
	0x03640D20 MOV X0, X19
	0x03640D24 BL 0x364188C
	0x03640D28 LDR X8, [X19 + 0x38]
	0x03640D2C CBZ X8, 0x3640F68
	0x03640D30 LDR W8, [X8 + 0x10]
	0x03640D34 LDR W9, [X19 + 0x40]
	0x03640D38 CMP W8, W9
	0x03640D3C B.EQ 0x3640EF4
	0x03640D40 MOV X0, X19
	0x03640D44 BL 0x3641C6C
	0x03640D48 TBZ X0, 0x0, 0x3640EF0
	0x03640D4C MOV X0, X19
	0x03640D50 BL 0x3643D54
	0x03640D54 STRH W0, [X31 + 0xC]
	0x03640D58 LDR X8, [X19 + 0x30]
	0x03640D5C CBZ X8, 0x3640F18
	0x03640D60 MOV W20, W0
	0x03640D64 AND W8, W20, 0xFFFF
	0x03640D68 CMP W8, 0x2B
	0x03640D6C B.HI 0x3640D88
	0x03640D70 CMP W8, 0x2A
	0x03640D74 B.EQ 0x3640E28
	0x03640D78 CMP W8, 0x2B
	0x03640D7C B.NE 0x3640F78
	0x03640D80 MOVZ W21, 0x1
	0x03640D84 B 0x3640E2C
	0x03640D88 CMP W8, 0x3F
	0x03640D8C B.EQ 0x3640E34
	0x03640D90 CMP W8, 0x7B
	0x03640D94 B.NE 0x3640F78
	0x03640D98 LDR W24, [X19 + 0x40]
	0x03640D9C MOV X0, X19
	0x03640DA0 BL 0x3643D80
	0x03640DA4 LDR W8, [X19 + 0x40]
	0x03640DA8 MOV W21, W0
	0x03640DAC MOV W22, W0
	0x03640DB0 CMP W24, W8
	0x03640DB4 B.GE 0x3640E4C
	0x03640DB8 LDR X9, [X19 + 0x38]
	0x03640DBC CBZ X9, 0x3640F68
	0x03640DC0 LDR W9, [X9 + 0x10]
	0x03640DC4 MOV W22, W21
	0x03640DC8 SUB W8, W9, W8
	0x03640DCC CMP W8, 0x1
	0x03640DD0 B.LT 0x3640E4C
	0x03640DD4 MOV X0, X19
	0x03640DD8 BL 0x3641BB0
	0x03640DDC AND W8, W0, 0xFFFF
	0x03640DE0 CMP W8, 0x2C
	0x03640DE4 MOV W22, W21
	0x03640DE8 B.NE 0x3640E4C
	0x03640DEC LDR W8, [X19 + 0x40]
	0x03640DF0 LDR X9, [X19 + 0x38]
	0x03640DF4 ADD W8, W8, 0x1
	0x03640DF8 STR W8, [X19 + 0x40]
	0x03640DFC CBZ X9, 0x3640F68
	0x03640E00 LDR W9, [X9 + 0x10]
	0x03640E04 CMP W9, W8
	0x03640E08 B.EQ 0x3640E20
	0x03640E0C MOV X0, X19
	0x03640E10 BL 0x3641BB0
	0x03640E14 AND W8, W0, 0xFFFF
	0x03640E18 CMP W8, 0x7D
	0x03640E1C B.NE 0x3640E40
	0x03640E20 MOVN W22, 0x80000000
	0x03640E24 B 0x3640E4C
	0x03640E28 MOV W21, W31
	0x03640E2C MOVN W22, 0x80000000
	0x03640E30 B 0x3640E80
	0x03640E34 MOV W21, W31
	0x03640E38 MOVZ W22, 0x1
	0x03640E3C B 0x3640E80

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0xDA1000
	013 Move W8, [X20+1396]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xAFD000
	020 Move X0, [X0+936]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1396], W8
	024 Move X20, 0xAFD000
	025 Move W23, [X19+16]
	026 Move W22, [X19+44]
	027 Move W24, [X19+48]
	028 Move X20, [X20+720]
	029 Move X25, 0xDA1000
	030 Or W26, W31, 0x7FFFFFFE
	031 Move TEMP, 0x80000000
	032 Not TEMP
	033 Move W27, TEMP
	034 Move W28, 1
	035 Move X0, X19
	036 Move X21, X0
	037 Move W8, [X25+1403]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {45}
	042 Move X0, X20
	043 Call 0x1C17CF4
	044 Move [X25+1403], W28
	045 Move X8, [X21+24]
	046 Compare X8, 0
	047 JumpIfEqual {84}
	048 Move W8, [X8+24]
	049 Compare W8, 0
	050 JumpIfEqual {84}
	051 Move X0, X21
	052 Move W1, W31
	053 Call RegexNode.Child, X0, X1
	054 Compare X0, 0
	055 JumpIfEqual {112}
	056 Move W8, [X0+16]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Subtract W9, W8, 3
	060 NotImplemented "Instruction CMP not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract W8, W8, 6
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, [X21+44]
	065 Move W9, [X0+44]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move W8, [X0+48]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction UDIV not yet implemented."
	073 Multiply W9, W9, W22
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSEL not yet implemented."
	076 Move [X0+44], W22
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X21, X0
	079 NotImplemented "Instruction UDIV not yet implemented."
	080 Multiply W8, W8, W24
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSEL not yet implemented."
	083 Move [X0+48], W24
	084 Move TEMP, 0x80000000
	085 Not TEMP
	086 Move W8, TEMP
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X8, 0xAFD000
	089 Move W19, [X19+52]
	090 Move X8, [X8+936]
	091 Move X0, [X8]
	092 Call 0x1C17F10
	093 Move X1, X31
	094 Move X21, X0
	095 Call Object..ctor, X0
	096 Move W8, 22
	097 Move [X21+16], W8
	098 Move [X21+52], W19
	099 Move X0, X21
	100 Move X20, [X31+80]
	101 Move X19, [X31+88]
	102 Move X22, [X31+64]
	103 Move X21, [X31+72]
	104 Move X24, [X31+48]
	105 Move X23, [X31+56]
	106 Move X26, [X31+32]
	107 Move X25, [X31+40]
	108 Move X28, [X31+16]
	109 Move X27, [X31+24]
	110 Move X30, [X31+96]
	111 Return X0
	112 Call 0x1C17F20

Method: System.Text.RegularExpressions.RegexNode ReduceSet()

Disassembly:
	0x03640E6C MOV X0, X19
	0x03640E70 BL 0x3643D54
	0x03640E74 AND W8, W0, 0xFFFF
	0x03640E78 CMP W8, 0x7D
	0x03640E7C B.NE 0x3640F08
	0x03640E80 MOV X0, X19
	0x03640E84 BL 0x364188C
	0x03640E88 LDR X8, [X19 + 0x38]
	0x03640E8C CBZ X8, 0x3640F68
	0x03640E90 LDR W8, [X8 + 0x10]
	0x03640E94 LDR W9, [X19 + 0x40]
	0x03640E98 CMP W8, W9
	0x03640E9C B.EQ 0x3640EC8
	0x03640EA0 MOV X0, X19
	0x03640EA4 BL 0x3641BB0
	0x03640EA8 AND W8, W0, 0xFFFF
	0x03640EAC CMP W8, 0x3F
	0x03640EB0 B.NE 0x3640EC8
	0x03640EB4 LDR W8, [X19 + 0x40]
	0x03640EB8 MOVZ W1, 0x1
	0x03640EBC ADD W8, W8, 0x1
	0x03640EC0 STR W8, [X19 + 0x40]
	0x03640EC4 B 0x3640ECC
	0x03640EC8 MOV W1, W31
	0x03640ECC CMP W21, W22
	0x03640ED0 B.GT 0x3640F6C
	0x03640ED4 MOV X0, X19
	0x03640ED8 MOV W2, W21
	0x03640EDC MOV W3, W22
	0x03640EE0 BL 0x3643E4C
	0x03640EE4 LDR X8, [X19 + 0x30]
	0x03640EE8 CBNZ X8, 0x3640D64
	0x03640EEC B 0x3640F18
	0x03640EF0 MOV W24, W31
	0x03640EF4 MOV X0, X19
	0x03640EF8 BL 0x3643D2C
	0x03640EFC CMP W24, 0x0
	0x03640F00 CSET W22, NE
	0x03640F04 B 0x3640F1C
	0x03640F08 MOV X0, X19
	0x03640F0C BL 0x3643D2C
	0x03640F10 SUB W8, W24, 0x1
	0x03640F14 STR W8, [X19 + 0x40]
	0x03640F18 MOVZ W22, 0x1
	0x03640F1C LDR X8, [X19 + 0x38]
	0x03640F20 CBNZ X8, 0x36409A0
	0x03640F24 B 0x3640F68
	0x03640F28 MOV X0, X19
	0x03640F2C BL 0x36431EC
	0x03640F30 B 0x3640F1C
	0x03640F34 LDR X8, [X19 + 0x10]
	0x03640F38 CBNZ X8, 0x3641024
	0x03640F3C MOV X0, X19
	0x03640F40 BL 0x36433F8
	0x03640F44 LDR X0, [X19 + 0x30]
	0x03640F48 LDP X20, X19, [X31 + 0x60]
	0x03640F4C LDP X22, X21, [X31 + 0x50]
	0x03640F50 LDP X24, X23, [X31 + 0x40]
	0x03640F54 LDP X26, X25, [X31 + 0x30]
	0x03640F58 LDP X28, X27, [X31 + 0x20]
	0x03640F5C LDP X29, X30, [X31 + 0x10]
	0x03640F60 ADD X31, X31, 0x70
	0x03640F64 RET
	0x03640F68 BL 0x1C16F20
	0x03640F6C ADRP X0, 0xAFC000
	0x03640F70 LDR X0, [X0 + 0x3F0]
	0x03640F74 B 0x3640F80
	0x03640F78 ADRP X0, 0xAFC000
	0x03640F7C LDR X0, [X0 + 0x3F8]
	0x03640F80 BL 0x1C16D08
	0x03640F84 MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xDA1000
	007 Move X22, 0xAFC000
	008 Move W8, [X20+1397]
	009 Move X22, [X22+2272]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAFC000
	016 Move X0, [X0+2272]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1397], W8
	020 Move X0, [X22]
	021 Move X20, [X19+32]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call RegexCharClass.IsEmpty, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {36}
	033 Move W8, 22
	034 Move [X19+16], W8
	035 Move [X19+32], X31
	036 Move X0, [X22]
	037 Move X20, [X19+32]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Call RegexCharClass.IsSingleton, X0
	045 Move X8, [X22]
	046 Move X20, [X19+32]
	047 Move W21, W0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X31
	055 Move TEMP, X21
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {64}
	059 Call RegexCharClass.SingletonChar, X0
	060 Move W8, [X19+16]
	061 NotImplemented "Instruction STRH not yet implemented."
	062 Move [X19+32], X31
	063 Subtract W8, W8, 2
	064 Call RegexCharClass.IsSingletonInverse, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {83}
	069 Move X0, [X22]
	070 Move X20, [X19+32]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Move X1, X31
	077 Call RegexCharClass.SingletonChar, X0
	078 Move W8, [X19+16]
	079 NotImplemented "Instruction STRH not yet implemented."
	080 Move [X19+32], X31
	081 Subtract W8, W8, 1
	082 Move [X19+16], W8
	083 Move X0, X19
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Return X0

Method: System.Text.RegularExpressions.RegexNode ReduceAlternation()

Disassembly:
	0x03640548 MOV W1, W31
	0x0364054C MOV W2, W31
	0x03640550 BL 0x36452E0
	0x03640554 LDR X8, [X19 + 0x38]
	0x03640558 MOVZ W22, 0x1
	0x0364055C STR W22, [X19 + 0x50]
	0x03640560 CBZ X8, 0x3640850
	0x03640564 ADRP X23, 0xAFB000
	0x03640568 LDR X23, [X23 + 0x8E0]
	0x0364056C LDR W8, [X8 + 0x10]
	0x03640570 LDR W20, [X19 + 0x40]
	0x03640574 SUB W8, W8, W20
	0x03640578 CMP W8, 0x0
	0x0364057C B.LE 0x364083C
	0x03640580 MOV X0, X19
	0x03640584 BL 0x3643D54
	0x03640588 AND W8, W0, 0xFFFF
	0x0364058C CMP W8, 0x28
	0x03640590 B.HI 0x3640604
	0x03640594 CMP W8, 0x23
	0x03640598 B.EQ 0x3640648
	0x0364059C CMP W8, 0x28
	0x036405A0 B.NE 0x3640824
	0x036405A4 LDR X8, [X19 + 0x38]
	0x036405A8 CBZ X8, 0x3640850
	0x036405AC LDR W8, [X8 + 0x10]
	0x036405B0 LDR W9, [X19 + 0x40]
	0x036405B4 SUB W8, W8, W9
	0x036405B8 CMP W8, 0x2
	0x036405BC B.LT 0x3640668
	0x036405C0 MOVZ W1, 0x1
	0x036405C4 MOV X0, X19
	0x036405C8 BL 0x3644650
	0x036405CC AND W8, W0, 0xFFFF
	0x036405D0 CMP W8, 0x23
	0x036405D4 B.NE 0x3640668
	0x036405D8 MOV X0, X19
	0x036405DC BL 0x3641BB0
	0x036405E0 AND W8, W0, 0xFFFF
	0x036405E4 CMP W8, 0x3F
	0x036405E8 B.NE 0x3640668
	0x036405EC LDR W8, [X19 + 0x40]
	0x036405F0 MOV X0, X19
	0x036405F4 SUB W8, W8, 0x1
	0x036405F8 STR W8, [X19 + 0x40]
	0x036405FC BL 0x364188C
	0x03640600 B 0x3640820
	0x03640604 CMP W8, 0x29
	0x03640608 B.EQ 0x364075C
	0x0364060C CMP W8, 0x5B
	0x03640610 B.EQ 0x3640774
	0x03640614 CMP W8, 0x5C
	0x03640618 B.NE 0x3640824
	0x0364061C LDR X8, [X19 + 0x38]
	0x03640620 CBZ X8, 0x3640850
	0x03640624 LDR W8, [X8 + 0x10]
	0x03640628 LDR W9, [X19 + 0x40]
	0x0364062C SUB W8, W8, W9
	0x03640630 CMP W8, 0x1
	0x03640634 B.LT 0x3640824
	0x03640638 MOVZ W1, 0x1
	0x0364063C MOV X0, X19
	0x03640640 BL 0x36436A0
	0x03640644 B 0x3640824
	0x03640648 LDRB W8, [X19 + 0x80]
	0x0364064C TBZ X8, 0x5, 0x3640824
	0x03640650 LDR W8, [X19 + 0x40]
	0x03640654 MOV X0, X19
	0x03640658 SUB W8, W8, 0x1
	0x0364065C STR W8, [X19 + 0x40]
	0x03640660 BL 0x364188C
	0x03640664 B 0x3640824
	0x03640668 MOV X0, X19
	0x0364066C BL 0x3642868
	0x03640670 LDR X8, [X19 + 0x38]
	0x03640674 CBZ X8, 0x3640850
	0x03640678 LDR W8, [X8 + 0x10]
	0x0364067C LDR W9, [X19 + 0x40]
	0x03640680 SUB W8, W8, W9
	0x03640684 CMP W8, 0x1
	0x03640688 B.LT 0x3640788
	0x0364068C MOV X0, X19
	0x03640690 BL 0x3641BB0
	0x03640694 AND W8, W0, 0xFFFF
	0x03640698 CMP W8, 0x3F
	0x0364069C B.NE 0x3640788
	0x036406A0 LDR W8, [X19 + 0x40]
	0x036406A4 LDR X9, [X19 + 0x38]
	0x036406A8 ADD W8, W8, 0x1
	0x036406AC STR W8, [X19 + 0x40]
	0x036406B0 CBZ X9, 0x3640850
	0x036406B4 LDR W9, [X9 + 0x10]
	0x036406B8 SUB W8, W9, W8
	0x036406BC CMP W8, 0x2
	0x036406C0 B.LT 0x36407B4
	0x036406C4 MOV X0, X19
	0x036406C8 BL 0x3641BB0
	0x036406CC AND W8, W0, 0xFFFF
	0x036406D0 CMP W8, 0x3C
	0x036406D4 B.EQ 0x36406EC
	0x036406D8 MOV X0, X19
	0x036406DC BL 0x3641BB0
	0x036406E0 AND W8, W0, 0xFFFF
	0x036406E4 CMP W8, 0x27
	0x036406E8 B.NE 0x36407B4
	0x036406EC LDR W8, [X19 + 0x40]
	0x036406F0 MOV X0, X19
	0x036406F4 ADD W8, W8, 0x1
	0x036406F8 STR W8, [X19 + 0x40]
	0x036406FC BL 0x3641BB0
	0x03640700 AND W8, W0, 0xFFFF
	0x03640704 CMP W8, 0x30
	0x03640708 B.EQ 0x3640820
	0x0364070C MOV W21, W0
	0x03640710 LDR X0, [X23]
	0x03640714 LDR W8, [X0 + 0xE0]
	0x03640718 CBNZ W8, 0x3640720
	0x0364071C BL 0x1C16DFC
	0x03640720 MOV W0, W21
	0x03640724 MOV X1, X31
	0x03640728 BL 0x36357F0
	0x0364072C TBZ X0, 0x0, 0x3640820
	0x03640730 SUB W8, W21, 0x31
	0x03640734 AND W8, W8, 0xFFFF
	0x03640738 MOV X0, X19
	0x0364073C CMP W8, 0x8
	0x03640740 B.LS 0x3640830
	0x03640744 BL 0x3644594
	0x03640748 MOV X1, X0
	0x0364074C MOV X0, X19
	0x03640750 MOV W2, W20
	0x03640754 BL 0x3645438
	0x03640758 B 0x3640820
	0x0364075C MOV X0, X19
	0x03640760 BL 0x36453E8
	0x03640764 TBNZ X0, 0x0, 0x3640824
	0x03640768 MOV X0, X19
	0x0364076C BL 0x3643608
	0x03640770 B 0x3640824
	0x03640774 MOVZ W2, 0x1
	0x03640778 MOV X0, X19
	0x0364077C MOV W1, W31
	0x03640780 BL 0x36421E4
	0x03640784 B 0x3640824
	0x03640788 LDRB W8, [X19 + 0x80]
	0x0364078C TBNZ X8, 0x2, 0x3640820
	0x03640790 LDRB W8, [X19 + 0x90]
	0x03640794 CBNZ W8, 0x3640820
	0x03640798 LDR W1, [X19 + 0x50]
	0x0364079C ADD W8, W1, 0x1
	0x036407A0 STR W8, [X19 + 0x50]
	0x036407A4 MOV X0, X19
	0x036407A8 MOV W2, W20
	0x036407AC BL 0x36452E0
	0x036407B0 B 0x3640820
	0x036407B4 MOV X0, X19
	0x036407B8 BL 0x36447D8
	0x036407BC LDR X8, [X19 + 0x38]
	0x036407C0 CBZ X8, 0x3640850
	0x036407C4 LDR W8, [X8 + 0x10]
	0x036407C8 LDR W9, [X19 + 0x40]
	0x036407CC SUB W8, W8, W9
	0x036407D0 CMP W8, 0x1
	0x036407D4 B.LT 0x3640820
	0x036407D8 MOV X0, X19
	0x036407DC BL 0x3641BB0
	0x036407E0 AND W8, W0, 0xFFFF
	0x036407E4 CMP W8, 0x29
	0x036407E8 B.NE 0x3640804
	0x036407EC LDR W8, [X19 + 0x40]
	0x036407F0 MOV X0, X19
	0x036407F4 ADD W8, W8, 0x1
	0x036407F8 STR W8, [X19 + 0x40]
	0x036407FC BL 0x36431EC
	0x03640800 B 0x3640820
	0x03640804 MOV X0, X19
	0x03640808 BL 0x3641BB0
	0x0364080C AND W8, W0, 0xFFFF
	0x03640810 CMP W8, 0x28
	0x03640814 B.NE 0x3640820
	0x03640818 STRB W22, [X19 + 0x90]
	0x0364081C B 0x3640824
	0x03640820 STRB W31, [X19 + 0x90]
	0x03640824 LDR X8, [X19 + 0x38]
	0x03640828 CBNZ X8, 0x364056C
	0x0364082C B 0x3640850
	0x03640830 BL 0x3643D80
	0x03640834 MOV W1, W0
	0x03640838 B 0x36407A4
	0x0364083C MOV X0, X19
	0x03640840 LDP X20, X19, [X31 + 0x20]
	0x03640844 LDP X22, X21, [X31 + 0x10]
	0x03640848 LDP X30, X23, [X31], #0x30
	0x0364084C B 0x36455C0
	0x03640850 BL 0x1C16F20
	0x03640854 STP X30, X21, [X31 - 0x20]!
	0x03640858 STP X20, X19, [X31 + 0x10]
	0x0364085C ADRP X21, 0xDA0000
	0x03640860 LDRB W8, [X21 + 0x580]
	0x03640864 MOV W19, W1
	0x03640868 MOV X20, X0
	0x0364086C TBNZ X8, 0x0, 0x3640890
	0x03640870 ADRP X0, 0xAFC000
	0x03640874 LDR X0, [X0 + 0x3E0]
	0x03640878 BL 0x1C16CF4
	0x0364087C ADRP X0, 0xAFC000
	0x03640880 LDR X0, [X0 + 0x3E8]
	0x03640884 BL 0x1C16CF4
	0x03640888 MOVZ W8, 0x1
	0x0364088C STRB W8, [X21 + 0x580]
	0x03640890 LDR X0, [X20 + 0x88]
	0x03640894 MOVZ W8, 0x1
	0x03640898 STR W31, [X20 + 0x40]
	0x0364089C STR W8, [X20 + 0x50]
	0x036408A0 STRB W31, [X20 + 0x90]
	0x036408A4 CBZ X0, 0x36408DC
	0x036408A8 LDR W8, [X0 + 0x18]
	0x036408AC SUBS W2, W8, 0x1
	0x036408B0 B.LT 0x36408C8
	0x036408B4 ADRP X8, 0xAFC000
	0x036408B8 LDR X8, [X8 + 0x3E0]
	0x036408BC MOV W1, W31
	0x036408C0 LDR X3, [X8]
	0x036408C4 BL 0x2FE0C64
	0x036408C8 STR W19, [X20 + 0x80]
	0x036408CC STR X31, [X20 + 0x10]
	0x036408D0 LDP X20, X19, [X31 + 0x10]
	0x036408D4 LDP X30, X21, [X31], #0x20
	0x036408D8 RET
	0x036408DC BL 0x1C16F20
	0x036408E0 SUB X31, X31, 0x70
	0x036408E4 STP X29, X30, [X31 + 0x10]
	0x036408E8 STP X28, X27, [X31 + 0x20]
	0x036408EC STP X26, X25, [X31 + 0x30]
	0x036408F0 STP X24, X23, [X31 + 0x40]
	0x036408F4 STP X22, X21, [X31 + 0x50]
	0x036408F8 STP X20, X19, [X31 + 0x60]
	0x036408FC ADRP X21, 0xDA0000
	0x03640900 ADRP X20, 0xAFC000
	0x03640904 LDRB W8, [X21 + 0x581]
	0x03640908 LDR X20, [X20 + 0x3A8]
	0x0364090C MOV X19, X0
	0x03640910 TBNZ X8, 0x0, 0x3640940
	0x03640914 ADRP X0, 0xAFC000
	0x03640918 LDR X0, [X0 + 0x3A8]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0xDA1000
	014 Move W8, [X20+1398]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0xAFD000
	021 Move X0, [X0+912]
	022 Call 0x1C17CF4
	023 Move X0, 0xAFD000
	024 Move X0, [X0+920]
	025 Call 0x1C17CF4
	026 Move X0, 0xAFD000
	027 Move X0, [X0+720]
	028 Call 0x1C17CF4
	029 Move X0, 0xAFD000
	030 Move X0, [X0+728]
	031 Call 0x1C17CF4
	032 Move X0, 0xAFD000
	033 Move X0, [X0+928]
	034 Call 0x1C17CF4
	035 Move X0, 0xAFC000
	036 Move X0, [X0+2272]
	037 Call 0x1C17CF4
	038 Move X0, 0xAFD000
	039 Move X0, [X0+936]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+1398], W8
	043 Move X0, [X19+24]
	044 Compare X0, 0
	045 JumpIfEqual {250}
	046 Move X25, 0xAFD000
	047 Move X26, 0xAFD000
	048 Move X25, [X25+728]
	049 Move X26, [X26+928]
	050 Move W29, W31
	051 Move W28, W31
	052 Move W27, W31
	053 Move W21, W31
	054 Move W20, W31
	055 Move W8, [X0+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X2, [X25]
	058 Move W1, W21
	059 Call List`1<Object>.get_Item, X0, X1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X22, X0
	062 Move X0, [X19+24]
	063 Compare X0, 0
	064 JumpIfEqual {227}
	065 Move X3, [X26]
	066 Move W1, W20
	067 Move X2, X22
	068 Call List`1<Object>.set_Item, X0, X1, X2
	069 Compare X22, 0
	070 JumpIfEqual {227}
	071 Move W8, [X22+16]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move W9, [X22+52]
	076 Move W11, 65
	077 Xor W10, W29, 1
	078 And W24, W9, W11
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CSET not yet implemented."
	081 Or W9, W9, W10
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Or W8, W28, W9
	084 Move TEMP, X8
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {103}
	088 Move X8, 0xAFC000
	089 Move X8, [X8+2272]
	090 Move X23, [X22+32]
	091 Move X0, [X8]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X23
	097 Move X1, X31
	098 Call RegexCharClass.IsMergeable, X0
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfEqual {152}
	103 Move X8, 0xAFC000
	104 Move X8, [X8+2272]
	105 Move X22, [X22+32]
	106 Move X0, [X8]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1C17DFC
	111 Move X0, X22
	112 Move X1, X31
	113 Call RegexCharClass.IsMergeable, X0
	114 Xor W28, W0, 1
	115 NotImplemented "Instruction CMP not yet implemented."
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X8, [X22+24]
	118 Compare X8, 0
	119 JumpIfEqual {227}
	120 Move W23, W31
	121 Move W9, [X8+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X2, [X25]
	124 Move X0, X8
	125 Move W1, W23
	126 Call List`1<Object>.get_Item, X0, X1
	127 Compare X0, 0
	128 JumpIfEqual {227}
	129 Move [X0+56], X19
	130 Move X8, [X22+24]
	131 Add W23, W23, 1
	132 Compare X8, 0
	133 JumpIfNotEqual {121}
	134 Move TEMP, X8
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {152}
	138 Move W28, W31
	139 Move W29, 1
	140 Move W28, W31
	141 Move W29, W31
	142 Move X0, [X19+24]
	143 Compare X0, 0
	144 JumpIfEqual {227}
	145 Move X9, 0xAFD000
	146 Move X9, [X9+912]
	147 Add W1, W21, 1
	148 Move X2, X8
	149 Move X3, [X9]
	150 Call List`1<Object>.InsertRange, X0, X1, X2
	151 Subtract W20, W20, 1
	152 Move X0, [X19+24]
	153 Compare X0, 0
	154 JumpIfEqual {227}
	155 Move X2, [X25]
	156 Subtract W20, W20, 1
	157 Move W1, W20
	158 Call List`1<Object>.get_Item, X0, X1
	159 Compare X0, 0
	160 JumpIfEqual {227}
	161 Move W8, [X0+16]
	162 Move X23, X0
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X8, 0xAFC000
	165 Move X8, [X8+2272]
	166 Move X0, [X8]
	167 Call 0x1C17F10
	168 Move X1, X31
	169 Move X24, X0
	170 Call RegexCharClass..ctor, X0
	171 Compare X24, 0
	172 JumpIfEqual {227}
	173 NotImplemented "Instruction LDRH not yet implemented."
	174 Move X0, X24
	175 Move X2, X31
	176 Call RegexCharClass.AddChar, X0, X1
	177 Move X8, 0xAFC000
	178 Move X8, [X8+2272]
	179 Move X24, [X23+32]
	180 Move X0, [X8]
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {185}
	184 Call 0x1C17DFC
	185 Move X0, X24
	186 Move X1, X31
	187 Call RegexCharClass.Parse, X0
	188 Move X24, X0
	189 Move W8, [X22+16]
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Compare X24, 0
	192 JumpIfEqual {227}
	193 NotImplemented "Instruction LDRH not yet implemented."
	194 Move X0, X24
	195 Move X2, X31
	196 Call RegexCharClass.AddChar, X0, X1
	197 Move X8, 0xAFC000
	198 Move X8, [X8+2272]
	199 Move X22, [X22+32]
	200 Move X0, [X8]
	201 Move W8, [X0+224]
	202 Compare W8, 0
	203 JumpIfNotEqual {205}
	204 Call 0x1C17DFC
	205 Move X0, X22
	206 Move X1, X31
	207 Call RegexCharClass.Parse, X0
	208 Compare X24, 0
	209 JumpIfEqual {227}
	210 Move X1, X0
	211 Move X0, X24
	212 Move X2, X31
	213 Call RegexCharClass.AddCharClass, X0, X1
	214 Move W8, 11
	215 Move X0, X24
	216 Move X1, X31
	217 Move [X23+16], W8
	218 Call RegexCharClass.ToStringClass, X0
	219 Move [X23+32], X0
	220 Move W24, W27
	221 Move X0, [X19+24]
	222 Add W21, W21, 1
	223 Add W20, W20, 1
	224 Move W27, W24
	225 Compare X0, 0
	226 JumpIfNotEqual {55}
	227 Call 0x1C17F20
	228 Subtract W2, W21, W20
	229 Move X8, 0xAFD000
	230 Move X8, [X8+920]
	231 Move W1, W20
	232 Move X3, [X8]
	233 Call List`1<Object>.RemoveRange, X0, X1, X2
	234 Move X0, X19
	235 Move X20, [X31+80]
	236 Move X19, [X31+88]
	237 Move X22, [X31+64]
	238 Move X21, [X31+72]
	239 Move X24, [X31+48]
	240 Move X23, [X31+56]
	241 Move X26, [X31+32]
	242 Move X25, [X31+40]
	243 Move X28, [X31+16]
	244 Move X27, [X31+24]
	245 Move W1, 22
	246 Move X29, [X31+96]
	247 Move X30, [X31+104]
	248 Call RegexNode.StripEnation, X0, X1
	249 Return X0
	250 Move X8, 0xAFD000
	251 Move W20, [X19+52]
	252 Move X8, [X8+936]
	253 Move X0, [X8]
	254 Call 0x1C17F10
	255 Move X1, X31
	256 Move X19, X0
	257 Call Object..ctor, X0
	258 Move W8, 22
	259 Move [X19+16], W8
	260 Move [X19+52], W20
	261 Move X0, X19
	262 Move X20, [X31+80]
	263 Move X19, [X31+88]
	264 Move X22, [X31+64]
	265 Move X21, [X31+72]
	266 Move X24, [X31+48]
	267 Move X23, [X31+56]
	268 Move X26, [X31+32]
	269 Move X25, [X31+40]
	270 Move X28, [X31+16]
	271 Move X27, [X31+24]
	272 Move X29, [X31+96]
	273 Move X30, [X31+104]
	274 Return X0

Method: System.Text.RegularExpressions.RegexNode ReduceConcatenation()

Disassembly:
	0x0364091C BL 0x1C16CF4
	0x03640920 ADRP X0, 0xAFB000
	0x03640924 LDR X0, [X0 + 0x808]
	0x03640928 BL 0x1C16CF4
	0x0364092C ADRP X0, 0xAFC000
	0x03640930 LDR X0, [X0 + 0x330]
	0x03640934 BL 0x1C16CF4
	0x03640938 MOVZ W8, 0x1
	0x0364093C STRB W8, [X21 + 0x581]
	0x03640940 LDR X0, [X20]
	0x03640944 LDR W21, [X19 + 0x80]
	0x03640948 BL 0x1C16F10
	0x0364094C MOV X1, X31
	0x03640950 MOV X20, X0
	0x03640954 BL 0x33BDD8C
	0x03640958 MOVZ W8, 0x1C
	0x0364095C MOVI D0, 0xFFFFFFFF00000000
	0x03640960 MOV X0, X19
	0x03640964 MOV X1, X20
	0x03640968 STR W21, [X20 + 0x34]
	0x0364096C STR W8, [X20 + 0x10]
	0x03640970 STUR D0, [X20 + 0x2C]
	0x03640974 BL 0x36417EC
	0x03640978 LDR X8, [X19 + 0x38]
	0x0364097C CBZ X8, 0x3640F68
	0x03640980 ADRP X23, 0xAFB000
	0x03640984 LDR X23, [X23 + 0x808]
	0x03640988 ADRP X25, 0xFFFFFFFFFD557000
	0x0364098C MOV W22, W31
	0x03640990 ADD X25, X25, 0x4BA
	0x03640994 MOVZ W27, 0x14
	0x03640998 MOVZ W28, 0xE
	0x0364099C MOVZ W29, 0x12
	0x036409A0 LDR W8, [X8 + 0x10]
	0x036409A4 LDR W9, [X19 + 0x40]
	0x036409A8 SUB W8, W8, W9
	0x036409AC CMP W8, 0x0
	0x036409B0 B.LE 0x3640F34
	0x036409B4 MOV X0, X19
	0x036409B8 BL 0x364188C
	0x036409BC LDR W20, [X19 + 0x40]
	0x036409C0 LDRB W9, [X19 + 0x80]
	0x036409C4 LDR X8, [X19 + 0x38]
	0x036409C8 TBNZ X9, 0x5, 0x3640A40
	0x036409CC MOV W9, W20
	0x036409D0 CBZ X8, 0x3640F68
	0x036409D4 LDR W8, [X8 + 0x10]
	0x036409D8 SUB W8, W8, W9
	0x036409DC CMP W8, 0x1
	0x036409E0 B.LT 0x3640AB8
	0x036409E4 MOV X0, X19
	0x036409E8 BL 0x3641BB0
	0x036409EC LDR X8, [X23]
	0x036409F0 MOV W21, W0
	0x036409F4 LDR W9, [X8 + 0xE0]
	0x036409F8 CBNZ W9, 0x3640A04
	0x036409FC MOV X0, X8
	0x03640A00 BL 0x1C16DFC
	0x03640A04 MOV W0, W21
	0x03640A08 BL 0x3641DFC
	0x03640A0C TBZ X0, 0x0, 0x3640A28
	0x03640A10 AND W8, W21, 0xFFFF
	0x03640A14 CMP W8, 0x7B
	0x03640A18 B.NE 0x3640AB8
	0x03640A1C MOV X0, X19
	0x03640A20 BL 0x3641C6C
	0x03640A24 TBNZ X0, 0x0, 0x3640AB8
	0x03640A28 LDR W9, [X19 + 0x40]
	0x03640A2C LDR X8, [X19 + 0x38]
	0x03640A30 ADD W9, W9, 0x1
	0x03640A34 STR W9, [X19 + 0x40]
	0x03640A38 CBNZ X8, 0x36409D4
	0x03640A3C B 0x3640F68
	0x03640A40 MOV W9, W20
	0x03640A44 CBZ X8, 0x3640F68
	0x03640A48 LDR W8, [X8 + 0x10]
	0x03640A4C SUB W8, W8, W9
	0x03640A50 CMP W8, 0x1
	0x03640A54 B.LT 0x3640AB8
	0x03640A58 MOV X0, X19
	0x03640A5C BL 0x3641BB0
	0x03640A60 LDR X8, [X23]
	0x03640A64 STRH W0, [X31 + 0xC]
	0x03640A68 MOV W21, W0
	0x03640A6C LDR W9, [X8 + 0xE0]
	0x03640A70 CBNZ W9, 0x3640A7C
	0x03640A74 MOV X0, X8
	0x03640A78 BL 0x1C16DFC
	0x03640A7C MOV W0, W21
	0x03640A80 BL 0x3641BD4
	0x03640A84 TBZ X0, 0x0, 0x3640AA0
	0x03640A88 AND W8, W21, 0xFFFF
	0x03640A8C CMP W8, 0x7B
	0x03640A90 B.NE 0x3640AB8
	0x03640A94 MOV X0, X19
	0x03640A98 BL 0x3641C6C
	0x03640A9C TBNZ X0, 0x0, 0x3640AB8
	0x03640AA0 LDR W9, [X19 + 0x40]
	0x03640AA4 LDR X8, [X19 + 0x38]
	0x03640AA8 ADD W9, W9, 0x1
	0x03640AAC STR W9, [X19 + 0x40]
	0x03640AB0 CBNZ X8, 0x3640A48
	0x03640AB4 B 0x3640F68
	0x03640AB8 LDR W26, [X19 + 0x40]
	0x03640ABC MOV X0, X19
	0x03640AC0 BL 0x364188C
	0x03640AC4 LDR X8, [X19 + 0x38]
	0x03640AC8 CBZ X8, 0x3640F68
	0x03640ACC LDR W8, [X8 + 0x10]
	0x03640AD0 LDR W9, [X19 + 0x40]
	0x03640AD4 CMP W8, W9
	0x03640AD8 B.NE 0x3640AE8
	0x03640ADC MOV W24, W31
	0x03640AE0 MOVZ W21, 0x21
	0x03640AE4 B 0x3640B4C
	0x03640AE8 MOV X0, X19
	0x03640AEC BL 0x3641BB0
	0x03640AF0 LDR X8, [X23]
	0x03640AF4 STRH W0, [X31 + 0xC]
	0x03640AF8 MOV W21, W0
	0x03640AFC LDR W9, [X8 + 0xE0]
	0x03640B00 CBNZ W9, 0x3640B0C
	0x03640B04 MOV X0, X8
	0x03640B08 BL 0x1C16DFC
	0x03640B0C MOV W0, W21
	0x03640B10 BL 0x3641DFC
	0x03640B14 TBZ X0, 0x0, 0x3640B44
	0x03640B18 LDR X0, [X23]
	0x03640B1C LDR W8, [X0 + 0xE0]
	0x03640B20 CBNZ W8, 0x3640B28
	0x03640B24 BL 0x1C16DFC
	0x03640B28 MOV W0, W21
	0x03640B2C BL 0x3641E94
	0x03640B30 LDR W8, [X19 + 0x40]
	0x03640B34 AND W24, W0, 0x1
	0x03640B38 ADD W8, W8, 0x1
	0x03640B3C STR W8, [X19 + 0x40]
	0x03640B40 B 0x3640B50
	0x03640B44 MOV W24, W31
	0x03640B48 MOVZ W21, 0x20
	0x03640B4C STRH W21, [X31 + 0xC]
	0x03640B50 SUBS W8, W26, W20
	0x03640B54 B.LE 0x3640B9C
	0x03640B58 SUB W2, W8, W24
	0x03640B5C CMP W2, 0x1
	0x03640B60 B.LT 0x3640B74
	0x03640B64 MOV X0, X19
	0x03640B68 MOV W1, W20
	0x03640B6C MOV W3, W31
	0x03640B70 BL 0x3641F2C
	0x03640B74 CBZ W24, 0x3640B98
	0x03640B78 LDR X0, [X19 + 0x38]
	0x03640B7C CBZ X0, 0x3640F68
	0x03640B80 SUB W1, W26, 0x1
	0x03640B84 MOV X2, X31
	0x03640B88 BL 0x3222A1C
	0x03640B8C MOV W1, W0
	0x03640B90 MOV X0, X19
	0x03640B94 BL 0x3642128
	0x03640B98 MOV W22, W31
	0x03640B9C AND W8, W21, 0xFFFF
	0x03640BA0 CMP W8, 0x3F
	0x03640BA4 B.HI 0x3640BD8
	0x03640BA8 SUB W9, W8, 0x20
	0x03640BAC CMP W9, 0xE
	0x03640BB0 B.HI 0x3640C68
	0x03640BB4 ADR X8, 0x10
	0x03640BB8 LDRB W10, [X25, X9, LSL]
	0x03640BBC ADD X8, X8, X10, 0x2, LSL
	0x03640BC0 BR X8
	0x03640BC4 LDR W8, [X19 + 0x80]
	0x03640BC8 ANDS W31, W8, 0x2
	0x03640BCC MOVZ W8, 0xF
	0x03640BD0 CSEL W1, W27, W8, EQ
	0x03640BD4 B 0x3640C34
	0x03640BD8 CMP W8, 0x5D
	0x03640BDC B.LE 0x3640C04
	0x03640BE0 CMP W8, 0x5E
	0x03640BE4 B.EQ 0x3640C28
	0x03640BE8 CMP W8, 0x7B
	0x03640BEC B.EQ 0x3640C70
	0x03640BF0 CMP W8, 0x7C
	0x03640BF4 B.NE 0x3640F78
	0x03640BF8 MOV X0, X19
	0x03640BFC BL 0x364328C
	0x03640C00 B 0x3640EFC
	0x03640C04 CMP W8, 0x5B
	0x03640C08 B.EQ 0x3640C40
	0x03640C0C CMP W8, 0x5C
	0x03640C10 B.NE 0x3640F78
	0x03640C14 MOV X0, X19
	0x03640C18 MOV W1, W31
	0x03640C1C BL 0x36436A0
	0x03640C20 STR X0, [X19 + 0x30]
	0x03640C24 B 0x3640D20
	0x03640C28 LDR W8, [X19 + 0x80]
	0x03640C2C ANDS W31, W8, 0x2
	0x03640C30 CSEL W1, W29, W28, EQ
	0x03640C34 MOV X0, X19
	0x03640C38 BL 0x3643BF0
	0x03640C3C B 0x3640D20
	0x03640C40 LDR W8, [X19 + 0x80]
	0x03640C44 MOV X0, X19
	0x03640C48 MOV W2, W31
	0x03640C4C AND W1, W8, 0x1
	0x03640C50 BL 0x36421E4
	0x03640C54 CBZ X0, 0x3640F68
	0x03640C58 MOV X1, X31
	0x03640C5C BL 0x3635FCC
	0x03640C60 MOV X1, X0
	0x03640C64 B 0x3640D18
	0x03640C68 CMP W8, 0x3F
	0x03640C6C B.NE 0x3640F78
	0x03640C70 LDR X8, [X19 + 0x30]
	0x03640C74 CBZ X8, 0x3640FAC
	0x03640C78 LDR W8, [X19 + 0x40]
	0x03640C7C SUB W8, W8, 0x1
	0x03640C80 STR W8, [X19 + 0x40]
	0x03640C84 B 0x3640D20
	0x03640C88 CMP W24, 0x0
	0x03640C8C MOV X0, X19
	0x03640C90 CSET W22, NE
	0x03640C94 BL 0x3642868
	0x03640C98 MOV X0, X19
	0x03640C9C BL 0x3642908
	0x03640CA0 CBZ X0, 0x3640F28
	0x03640CA4 MOV X20, X0
	0x03640CA8 MOV X0, X19
	0x03640CAC BL 0x3643250
	0x03640CB0 MOV X0, X19
	0x03640CB4 MOV X1, X20

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0xDA1000
	014 Move W8, [X20+1399]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {49}
	020 Move X0, 0xAB6000
	021 Move X0, [X0+368]
	022 Call 0x1C17CF4
	023 Move X0, 0xABD000
	024 Move X0, [X0+2536]
	025 Call 0x1C17CF4
	026 Move X0, 0xAB6000
	027 Move X0, [X0+3144]
	028 Call 0x1C17CF4
	029 Move X0, 0xAFD000
	030 Move X0, [X0+912]
	031 Call 0x1C17CF4
	032 Move X0, 0xAFD000
	033 Move X0, [X0+920]
	034 Call 0x1C17CF4
	035 Move X0, 0xAFD000
	036 Move X0, [X0+720]
	037 Call 0x1C17CF4
	038 Move X0, 0xAFD000
	039 Move X0, [X0+728]
	040 Call 0x1C17CF4
	041 Move X0, 0xAFD000
	042 Move X0, [X0+928]
	043 Call 0x1C17CF4
	044 Move X0, 0xAFD000
	045 Move X0, [X0+936]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+1399], W8
	049 Move X0, [X19+24]
	050 Compare X0, 0
	051 JumpIfEqual {233}
	052 Move X26, 0xAFD000
	053 Move X27, 0xAFD000
	054 Move X26, [X26+728]
	055 Move X27, [X27+928]
	056 Move W24, W31
	057 Move W29, W31
	058 Move W21, W31
	059 Move W20, W31
	060 Move W25, 65
	061 Move W8, [X0+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X2, [X26]
	064 Move W1, W21
	065 Call List`1<Object>.get_Item, X0, X1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X22, X0
	068 Move X0, [X19+24]
	069 Compare X0, 0
	070 JumpIfEqual {210}
	071 Move X3, [X27]
	072 Move W1, W20
	073 Move X2, X22
	074 Call List`1<Object>.set_Item, X0, X1, X2
	075 Compare X22, 0
	076 JumpIfEqual {210}
	077 Move W8, [X22+16]
	078 NotImplemented "Instruction CMP not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move W28, [X22+52]
	082 And W8, W28, W25
	083 NotImplemented "Instruction CMP not yet implemented."
	084 NotImplemented "Instruction CSET not yet implemented."
	085 NotImplemented "Instruction ORN not yet implemented."
	086 Move TEMP, X9
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfEqual {174}
	090 Move X0, [X19+24]
	091 Compare X0, 0
	092 JumpIfEqual {210}
	093 Move X2, [X26]
	094 Subtract W20, W20, 1
	095 Move W1, W20
	096 Call List`1<Object>.get_Item, X0, X1
	097 Compare X0, 0
	098 JumpIfEqual {210}
	099 Move W8, [X0+16]
	100 Move X23, X0
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move W8, 12
	103 Move [X23+16], W8
	104 Move X8, 0xAB6000
	105 Move X8, [X8+3144]
	106 NotImplemented "Instruction LDRH not yet implemented."
	107 Move X0, [X8]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X0, X31
	113 Call CultureInfo.get_InvariantCulture
	114 Move X8, 0xABD000
	115 Move X8, [X8+2536]
	116 Move X25, X0
	117 Move X8, [X8]
	118 Move W9, [X8+224]
	119 Compare W9, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X8
	122 Call 0x1C17DFC
	123 Move W0, W24
	124 Move X1, X25
	125 Move X2, X31
	126 Call Convert.ToString, X0, X1
	127 Move W25, 65
	128 Move [X23+32], X0
	129 Move W8, [X22+16]
	130 Move TEMP, X28
	131 And TEMP, TEMP, 64
	132 Compare TEMP, 64
	133 JumpIfEqual {176}
	134 Move X24, [X23+32]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X8, 0xAB6000
	137 Move X8, [X8+368]
	138 Move X0, [X8]
	139 Move W8, [X0+224]
	140 Compare W8, 0
	141 JumpIfNotEqual {143}
	142 Call 0x1C17DFC
	143 Add X0, X22, 40
	144 Move X1, X31
	145 Call Char.ToString, X0
	146 Move X1, X0
	147 NotImplemented "Instruction CMP not yet implemented."
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move W8, [X22+52]
	150 Move W9, [X19+52]
	151 Xor W8, W9, W8
	152 Move TEMP, X8
	153 And TEMP, TEMP, 64
	154 Compare TEMP, 64
	155 JumpIfEqual {173}
	156 Move X8, [X22+24]
	157 Compare X8, 0
	158 JumpIfEqual {210}
	159 Move W23, W31
	160 Move W9, [X8+24]
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move X2, [X26]
	163 Move X0, X8
	164 Move W1, W23
	165 Call List`1<Object>.get_Item, X0, X1
	166 Compare X0, 0
	167 JumpIfEqual {210}
	168 Move [X0+56], X19
	169 Move X8, [X22+24]
	170 Add W23, W23, 1
	171 Compare X8, 0
	172 JumpIfNotEqual {160}
	173 Move W24, W31
	174 Move W24, 1
	175 Move W29, W8
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move X8, 0xAB6000
	178 Move X8, [X8+368]
	179 Move X0, [X8]
	180 Move W8, [X0+224]
	181 Compare W8, 0
	182 JumpIfNotEqual {184}
	183 Call 0x1C17DFC
	184 Add X0, X22, 40
	185 Move X1, X31
	186 Call Char.ToString, X0
	187 Move X0, [X19+24]
	188 Compare X0, 0
	189 JumpIfEqual {210}
	190 Move X9, 0xAFD000
	191 Move X9, [X9+912]
	192 Add W1, W21, 1
	193 Move X2, X8
	194 Move X3, [X9]
	195 Call List`1<Object>.InsertRange, X0, X1, X2
	196 Subtract W20, W20, 1
	197 Move X1, [X22+32]
	198 Move X0, X24
	199 Move X0, [X22+32]
	200 Move X1, [X23+32]
	201 Move X2, X31
	202 Call String.Concat, X0, X1
	203 Move [X23+32], X0
	204 Move W24, 1
	205 Move X0, [X19+24]
	206 Add W21, W21, 1
	207 Add W20, W20, 1
	208 Compare X0, 0
	209 JumpIfNotEqual {61}
	210 Call 0x1C17F20
	211 Subtract W2, W21, W20
	212 Move X8, 0xAFD000
	213 Move X8, [X8+920]
	214 Move W1, W20
	215 Move X3, [X8]
	216 Call List`1<Object>.RemoveRange, X0, X1, X2
	217 Move X0, X19
	218 Move X20, [X31+80]
	219 Move X19, [X31+88]
	220 Move X22, [X31+64]
	221 Move X21, [X31+72]
	222 Move X24, [X31+48]
	223 Move X23, [X31+56]
	224 Move X26, [X31+32]
	225 Move X25, [X31+40]
	226 Move X28, [X31+16]
	227 Move X27, [X31+24]
	228 Move W1, 23
	229 Move X29, [X31+96]
	230 Move X30, [X31+104]
	231 Call RegexNode.StripEnation, X0, X1
	232 Return X0
	233 Move X8, 0xAFD000
	234 Move W20, [X19+52]
	235 Move X8, [X8+936]
	236 Move X0, [X8]
	237 Call 0x1C17F10
	238 Move X1, X31
	239 Move X19, X0
	240 Call Object..ctor, X0
	241 Move W8, 23
	242 Move [X19+16], W8
	243 Move [X19+52], W20
	244 Move X0, X19
	245 Move X20, [X31+80]
	246 Move X19, [X31+88]
	247 Move X22, [X31+64]
	248 Move X21, [X31+72]
	249 Move X24, [X31+48]
	250 Move X23, [X31+56]
	251 Move X26, [X31+32]
	252 Move X25, [X31+40]
	253 Move X28, [X31+16]
	254 Move X27, [X31+24]
	255 Move X29, [X31+96]
	256 Move X30, [X31+104]
	257 Return X0

Method: System.Text.RegularExpressions.RegexNode MakeQuantifier(System.Boolean lazy, System.Int32 min, System.Int32 max)

Disassembly:
	0x0364103C STP X22, X21, [X31 + 0x30]
	0x03641040 STP X20, X19, [X31 + 0x40]
	0x03641044 MOV X25, X1
	0x03641048 MOV X1, X31
	0x0364104C MOV W19, W7
	0x03641050 MOV X20, X6
	0x03641054 MOV X21, X5
	0x03641058 MOV W22, W4
	0x0364105C MOV X23, X3
	0x03641060 MOV X24, X2
	0x03641064 MOV X26, X0
	0x03641068 BL 0x33BDD8C
	0x0364106C STP X25, X24, [X26 + 0x10]
	0x03641070 STR X23, [X26 + 0x20]
	0x03641074 STR W22, [X26 + 0x28]
	0x03641078 STP X21, X20, [X26 + 0x30]
	0x0364107C STR W19, [X26 + 0x40]
	0x03641080 LDP X20, X19, [X31 + 0x40]
	0x03641084 LDP X22, X21, [X31 + 0x30]
	0x03641088 LDP X24, X23, [X31 + 0x20]
	0x0364108C LDP X26, X25, [X31 + 0x10]
	0x03641090 LDR X30, [X31], #0x50
	0x03641094 RET
	0x03641098 STP X30, X25, [X31 - 0x40]!
	0x0364109C STP X24, X23, [X31 + 0x10]
	0x036410A0 STP X22, X21, [X31 + 0x20]
	0x036410A4 STP X20, X19, [X31 + 0x30]
	0x036410A8 ADRP X24, 0xD9F000
	0x036410AC ADRP X25, 0xAB4000
	0x036410B0 LDRB W8, [X24 + 0x57D]
	0x036410B4 LDR X25, [X25 + 0xC48]
	0x036410B8 MOV W23, W4
	0x036410BC MOV X21, X3
	0x036410C0 MOV W22, W2
	0x036410C4 MOV X19, X1
	0x036410C8 MOV X20, X0
	0x036410CC TBNZ X8, 0x0, 0x36410FC
	0x036410D0 ADRP X0, 0xAB4000
	0x036410D4 LDR X0, [X0 + 0xC48]
	0x036410D8 BL 0x1C16CF4
	0x036410DC ADRP X0, 0xAFA000
	0x036410E0 LDR X0, [X0 + 0x808]
	0x036410E4 BL 0x1C16CF4
	0x036410E8 ADRP X0, 0xAFB000
	0x036410EC LDR X0, [X0 + 0x428]
	0x036410F0 BL 0x1C16CF4
	0x036410F4 MOVZ W8, 0x1
	0x036410F8 STRB W8, [X24 + 0x57D]
	0x036410FC LDR X0, [X25]
	0x03641100 LDR W8, [X0 + 0xE0]
	0x03641104 CBNZ W8, 0x364110C
	0x03641108 BL 0x1C16DFC
	0x0364110C ADRP X24, 0xAFA000
	0x03641110 LDR X24, [X24 + 0x808]
	0x03641114 MOV X0, X31
	0x03641118 TBNZ X23, 0x9, 0x3641124
	0x0364111C BL 0x33387A0
	0x03641120 B 0x3641128
	0x03641124 BL 0x3338524
	0x03641128 MOV X25, X0
	0x0364112C LDR X0, [X24]
	0x03641130 BL 0x1C16F10
	0x03641134 MOV X1, X25
	0x03641138 MOV X24, X0
	0x0364113C BL 0x36403FC
	0x03641140 CBZ X24, 0x36411E0
	0x03641144 STR W23, [X24 + 0x80]
	0x03641148 STR W22, [X24 + 0x5C]
	0x0364114C STP X19, X21, [X24 + 0x60]
	0x03641150 ADRP X21, 0xD9F000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xDA0000
	009 Move W8, [X23+1400]
	010 Move W20, W3
	011 Move W21, W2
	012 Move W22, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xAFC000
	019 Move X0, [X0+936]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+1400], W8
	023 Or W8, W20, W21
	024 Compare W8, 0
	025 JumpIfEqual {43}
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W8, [X19+16]
	029 Subtract W9, W8, 9
	030 NotImplemented "Instruction CMP not yet implemented."
	031 And W31, W22, 1
	032 Move TEMP, 5
	033 Not TEMP
	034 Move W9, TEMP
	035 Move TEMP, 2
	036 Not TEMP
	037 Move W10, TEMP
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Add W8, W8, W9
	040 Move [X19+16], W8
	041 Move [X19+44], W21
	042 Move [X19+48], W20
	043 Move X8, 0xAFC000
	044 Move W20, [X19+52]
	045 Move X8, [X8+936]
	046 Move X0, [X8]
	047 Call 0x1C17F10
	048 Move X1, X31
	049 Move X19, X0
	050 Call Object..ctor, X0
	051 Move W8, 23
	052 Move [X19+16], W8
	053 Move [X19+52], W20
	054 Move X8, 0xAFC000
	055 Move W23, [X19+52]
	056 Move X8, [X8+936]
	057 And W31, W22, 1
	058 Move X0, [X8]
	059 Move W8, 26
	060 NotImplemented "Instruction CINC not yet implemented."
	061 Call 0x1C17F10
	062 Move X1, X31
	063 Move X22, X0
	064 Call Object..ctor, X0
	065 Move X0, X22
	066 Move X1, X19
	067 Move [X22+16], W24
	068 Move [X22+48], W20
	069 Move [X22+52], W23
	070 Move [X22+44], W21
	071 Call RegexNode.AddChild, X0, X1
	072 Move X19, X22
	073 Move X0, X19
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Return X0

Method: System.Void AddChild(System.Text.RegularExpressions.RegexNode newChild)

Disassembly:
	0x03641154 LDRB W8, [X21 + 0x57F]
	0x03641158 TBNZ X8, 0x0, 0x3641170
	0x0364115C ADRP X0, 0xAB4000
	0x03641160 LDR X0, [X0 + 0x278]
	0x03641164 BL 0x1C16CF4
	0x03641168 MOVZ W8, 0x1
	0x0364116C STRB W8, [X21 + 0x57F]
	0x03641170 ADRP X21, 0xAFB000
	0x03641174 LDR X21, [X21 + 0x428]
	0x03641178 MOV X8, X20
	0x0364117C CBNZ X20, 0x3641194
	0x03641180 ADRP X8, 0xAB4000
	0x03641184 LDR X8, [X8 + 0x278]
	0x03641188 LDR X8, [X8]
	0x0364118C LDR X8, [X8 + 0xB8]
	0x03641190 LDR X8, [X8]
	0x03641194 MOV X0, X24
	0x03641198 STR X8, [X24 + 0x38]
	0x0364119C STR W31, [X24 + 0x40]
	0x036411A0 BL 0x36411F0
	0x036411A4 LDR X8, [X21]
	0x036411A8 MOV X21, X0
	0x036411AC MOV X0, X8
	0x036411B0 BL 0x1C16F10
	0x036411B4 MOV X1, X20
	0x036411B8 MOV X2, X21
	0x036411BC MOV X3, X19
	0x036411C0 MOV X22, X0
	0x036411C4 BL 0x3641310
	0x036411C8 MOV X0, X22
	0x036411CC LDP X20, X19, [X31 + 0x30]
	0x036411D0 LDP X22, X21, [X31 + 0x20]
	0x036411D4 LDP X24, X23, [X31 + 0x10]
	0x036411D8 LDP X30, X25, [X31], #0x40
	0x036411DC RET
	0x036411E0 BL 0x1C16F20
	0x036411E4 STR W2, [X0 + 0x5C]
	0x036411E8 STP X1, X3, [X0 + 0x60]
	0x036411EC RET
	0x036411F0 STP X30, X21, [X31 - 0x20]!
	0x036411F4 STP X20, X19, [X31 + 0x10]
	0x036411F8 ADRP X21, 0xD9F000
	0x036411FC ADRP X20, 0xAFB000
	0x03641200 LDRB W8, [X21 + 0x582]
	0x03641204 LDR X20, [X20 + 0x3A8]
	0x03641208 MOV X19, X0
	0x0364120C TBNZ X8, 0x0, 0x3641224
	0x03641210 ADRP X0, 0xAFB000
	0x03641214 LDR X0, [X0 + 0x3A8]
	0x03641218 BL 0x1C16CF4
	0x0364121C MOVZ W8, 0x1
	0x03641220 STRB W8, [X21 + 0x582]
	0x03641224 LDR X0, [X20]
	0x03641228 LDR W21, [X19 + 0x80]
	0x0364122C BL 0x1C16F10
	0x03641230 MOV X1, X31
	0x03641234 MOV X20, X0
	0x03641238 BL 0x33BDD8C
	0x0364123C MOVZ W8, 0x19
	0x03641240 STR W8, [X20 + 0x10]
	0x03641244 STR W21, [X20 + 0x34]
	0x03641248 LDR X8, [X19 + 0x38]
	0x0364124C STR X20, [X19 + 0x28]
	0x03641250 CBZ X8, 0x36412FC
	0x03641254 LDR W8, [X8 + 0x10]
	0x03641258 LDR W20, [X19 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDA0000
	006 Move W8, [X21+1401]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xAFC000
	014 Move X0, [X0+944]
	015 Call 0x1C17CF4
	016 Move X0, 0xAFC000
	017 Move X0, [X0+952]
	018 Call 0x1C17CF4
	019 Move X0, 0xAFC000
	020 Move X0, [X0+960]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1401], W8
	024 Move X8, [X19+24]
	025 Compare X8, 0
	026 JumpIfNotEqual {38}
	027 Move X8, 0xAFC000
	028 Move X8, [X8+960]
	029 Move X0, [X8]
	030 Call 0x1C17F10
	031 Move X8, 0xAFC000
	032 Move X8, [X8+952]
	033 Move W1, 4
	034 Move X21, X0
	035 Move X2, [X8]
	036 Call List`1<Object>..ctor, X0, X1
	037 Move [X19+24], X21
	038 Compare X20, 0
	039 JumpIfEqual {76}
	040 Move X0, X20
	041 Call RegexNode.Reduce, X0
	042 Move X8, [X19+24]
	043 Compare X8, 0
	044 JumpIfEqual {76}
	045 Move X10, 0xAFC000
	046 Move X10, [X10+944]
	047 Move W11, [X8+28]
	048 Move X9, [X8+16]
	049 Move X10, [X10]
	050 Add W11, W11, 1
	051 Move [X8+28], W11
	052 Compare X9, 0
	053 JumpIfEqual {76}
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 Move W12, [X9+24]
	056 Move X20, X0
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add W10, W11, 1
	059 Add X9, X9, X11
	060 Move [X8+24], W10
	061 Move [X9+32], X20
	062 Move X9, [X10+32]
	063 Move X0, X8
	064 Move X1, X20
	065 Move X9, [X9+192]
	066 Move X2, [X9+112]
	067 Call List`1<Object>.AddWithResize, X0, X1
	068 Compare X20, 0
	069 JumpIfEqual {76}
	070 Move [X20+56], X19
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Return 
	076 Call 0x1C17F20

Method: System.Text.RegularExpressions.RegexNode Child(System.Int32 i)

Disassembly:
	0x0363CE48 STR W10, [X0 + 0x38]
	0x0363CE4C CBZ X8, 0x363CEB0
	0x0363CE50 LDR W9, [X8 + 0x18]
	0x0363CE54 CMP W10, W9
	0x0363CE58 B.CS 0x363CEAC
	0x0363CE5C ADD X10, X8, W10, 0x2, SXTW
	0x0363CE60 STR W1, [X10 + 0x20]
	0x0363CE64 LDR W10, [X0 + 0x38]
	0x0363CE68 SUB W10, W10, 0x1
	0x0363CE6C CMP W10, W9
	0x0363CE70 STR W10, [X0 + 0x38]
	0x0363CE74 B.CS 0x363CEAC
	0x0363CE78 ADD X10, X8, W10, 0x2, SXTW
	0x0363CE7C STR W2, [X10 + 0x20]
	0x0363CE80 LDR W10, [X0 + 0x38]
	0x0363CE84 SUB W10, W10, 0x1
	0x0363CE88 CMP W10, W9
	0x0363CE8C STR W10, [X0 + 0x38]
	0x0363CE90 B.CS 0x363CEAC
	0x0363CE94 LDR W9, [X0 + 0x94]
	0x0363CE98 ADD X8, X8, W10, 0x2, SXTW
	0x0363CE9C SUB W9, W31, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDA5000
	006 Move W8, [X21+1402]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB01000
	014 Move X0, [X0+728]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1402], W8
	018 Move X0, [X20+24]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move X8, 0xB01000
	022 Move X8, [X8+728]
	023 Move W1, W19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, [X8]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call List`1<Object>.get_Item, X0, X1
	030 Return X0
	031 Call 0x1C17F20

Method: System.Int32 ChildCount()

Disassembly:
	0x0363CDFC ADD X9, X8, W9, 0x2, SXTW
	0x0363CE00 STR W1, [X9 + 0x20]
	0x0363CE04 LDR W9, [X0 + 0x38]
	0x0363CE08 SUB W9, W9, 0x1
	0x0363CE0C CMP W9, W10
	0x0363CE10 STR W9, [X0 + 0x38]
	0x0363CE14 B.CS 0x363CE30
	0x0363CE18 LDR W10, [X0 + 0x94]
	0x0363CE1C ADD X8, X8, W9, 0x2, SXTW
	0x0363CE20 SUB W10, W31, W10
	0x0363CE24 STR W10, [X8 + 0x20]
	0x0363CE28 LDR X30, [X31], #0x10
	0x0363CE2C RET
	0x0363CE30 BL 0x1C16F28
	0x0363CE34 BL 0x1C16F20
	0x0363CE38 STR X30, [X31 - 0x10]!
	0x0363CE3C LDR W9, [X0 + 0x38]
	0x0363CE40 LDR X8, [X0 + 0x30]
	0x0363CE44 SUB W10, W9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDA5000
	005 Move W8, [X20+1403]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB01000
	012 Move X0, [X0+720]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1403], W8
	016 Move X8, [X19+24]
	017 Compare X8, 0
	018 JumpIfEqual {20}
	019 Move W0, [X8+24]
	020 Move W0, W31
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return X0

Method: System.Int32 Type()

Disassembly:
	0x0364125C SUBS W9, W8, W20
	0x03641260 B.EQ 0x3641300

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

