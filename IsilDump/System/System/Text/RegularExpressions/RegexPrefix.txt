Type: System.Text.RegularExpressions.RegexPrefix

Method: System.Void .ctor(System.String prefix, System.Boolean ci)

Disassembly:
	0x0363CBB4 CMP W9, W8
	0x0363CBB8 B.GE 0x363CBC8
	0x0363CBBC MOV X0, X19
	0x0363CBC0 LDP X30, X19, [X31], #0x10

ISIL:
	001 And W8, W2, 1
	002 Move [X0+8], X1
	003 Move [X0], W8
	004 Return 

Method: System.Boolean get_CaseInsensitive()

Disassembly:
	0x03646CD0 MOV X2, X20
	0x03646CD4 MOV W4, W3

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Text.RegularExpressions.RegexPrefix get_Empty()

Disassembly:
	0x03646CD8 MOV X5, X31
	0x03646CDC BL 0x339FCE8
	0x03646CE0 LDR X8, [X19 + 0x40]
	0x03646CE4 CBZ X8, 0x3646D08
	0x03646CE8 LDR W9, [X19 + 0x48]
	0x03646CEC LDR W8, [X8 + 0x18]
	0x03646CF0 STR X20, [X19 + 0x40]
	0x03646CF4 ADD W8, W9, W8
	0x03646CF8 STR W8, [X19 + 0x48]
	0x03646CFC LDP X20, X19, [X31 + 0x10]
	0x03646D00 LDR X30, [X31], #0x20
	0x03646D04 RET
	0x03646D08 BL 0x1C16F20
	0x03646D0C STR X30, [X31 - 0x20]!
	0x03646D10 STP X20, X19, [X31 + 0x10]
	0x03646D14 ADRP X20, 0xD9A000
	0x03646D18 LDRB W8, [X20 + 0x5B1]
	0x03646D1C MOV X19, X0
	0x03646D20 TBNZ X8, 0x0, 0x3646D38
	0x03646D24 ADRP X0, 0xAAE000
	0x03646D28 LDR X0, [X0 + 0xE58]
	0x03646D2C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9B000
	005 Move X19, 0xAF7000
	006 Move W8, [X20+1446]
	007 Move X19, [X19+752]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAF7000
	013 Move X0, [X0+752]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1446], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X1, [X8+8]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.String get_Prefix()

Disassembly:
	0x03646D30 MOVZ W8, 0x1
	0x03646D34 STRB W8, [X20 + 0x5B1]

ISIL:
	001 Move X0, [X0+8]
	002 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03646D38 LDR X8, [X19 + 0x30]
	0x03646D3C CBZ X8, 0x3646DA8
	0x03646D40 ADRP X9, 0xAAE000
	0x03646D44 LDR X9, [X9 + 0xE58]
	0x03646D48 LDR W8, [X8 + 0x18]
	0x03646D4C LDR X0, [X9]
	0x03646D50 UBFM W1, W8, 0x1F, 0x1E
	0x03646D54 BL 0x1C16D6C
	0x03646D58 LDR X8, [X19 + 0x30]
	0x03646D5C CBZ X8, 0x3646DA8
	0x03646D60 LDR W3, [X8 + 0x18]
	0x03646D64 MOV X20, X0
	0x03646D68 MOV X0, X8
	0x03646D6C MOV W1, W31
	0x03646D70 MOV X2, X20
	0x03646D74 MOV W4, W3
	0x03646D78 MOV X5, X31
	0x03646D7C BL 0x339FCE8
	0x03646D80 LDR X8, [X19 + 0x30]
	0x03646D84 CBZ X8, 0x3646DA8
	0x03646D88 LDR W9, [X19 + 0x38]
	0x03646D8C LDR W8, [X8 + 0x18]
	0x03646D90 STR X20, [X19 + 0x30]
	0x03646D94 ADD W8, W9, W8
	0x03646D98 STR W8, [X19 + 0x38]
	0x03646D9C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD9B000
	006 Move X21, 0xAB0000
	007 Move X19, 0xAF7000
	008 Move W8, [X20+1447]
	009 Move X21, [X21+632]
	010 Move X19, [X19+752]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAF7000
	016 Move X0, [X0+752]
	017 Call 0x1C17CF4
	018 Move X0, 0xAB0000
	019 Move X0, [X0+632]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1447], W8
	023 Move X8, [X21]
	024 Move X9, [X19]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X8, [X8+184]
	028 Move X9, [X9+184]
	029 Move X8, [X8]
	030 Move [X9], X31
	031 Move [X9+8], X8
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 

