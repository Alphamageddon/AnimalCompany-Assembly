Type: System.Text.RegularExpressions.Regex

Method: System.Text.RegularExpressions.Regex/CachedCodeEntry GetCachedCode(System.Text.RegularExpressions.Regex/CachedCodeEntryKey key, System.Boolean isToAdd)

Disassembly:
	0x03632AB0 STP X30, X19, [X31 - 0x10]!
	0x03632AB4 CBZ X1, 0x3632AE4
	0x03632AB8 LDR W5, [X1 + 0x10]
	0x03632ABC MOV W6, W2
	0x03632AC0 MOV X3, X1
	0x03632AC4 MOVZ W1, 0x1
	0x03632AC8 MOVN W2, 0x0
	0x03632ACC MOV W4, W31
	0x03632AD0 BL 0x3630D68
	0x03632AD4 CMP X0, 0x0
	0x03632AD8 CSET W0, EQ
	0x03632ADC LDP X30, X19, [X31], #0x10
	0x03632AE0 RET
	0x03632AE4 ADRP X0, 0xAC6000
	0x03632AE8 LDR X0, [X0 + 0x528]
	0x03632AEC BL 0x1C16D08
	0x03632AF0 BL 0x1C16F10
	0x03632AF4 MOV X19, X0
	0x03632AF8 ADRP X0, 0xAF5000
	0x03632AFC LDR X0, [X0 + 0x348]
	0x03632B00 BL 0x1C16D08
	0x03632B04 MOV X1, X0
	0x03632B08 MOV X0, X19
	0x03632B0C MOV X2, X31
	0x03632B10 BL 0x330E100
	0x03632B14 ADRP X0, 0xB09000
	0x03632B18 LDR X0, [X0 + 0x820]
	0x03632B1C BL 0x1C16D08
	0x03632B20 MOV X1, X0
	0x03632B24 MOV X0, X19
	0x03632B28 BL 0x1C16DEC
	0x03632B2C STR X30, [X31 - 0x30]!
	0x03632B30 STP X22, X21, [X31 + 0x10]
	0x03632B34 STP X20, X19, [X31 + 0x20]
	0x03632B38 ADRP X22, 0xDAE000
	0x03632B3C ADRP X21, 0xAC9000
	0x03632B40 LDRB W8, [X22 + 0x52A]
	0x03632B44 LDR X21, [X21 + 0x600]
	0x03632B48 MOV X19, X1
	0x03632B4C MOV X20, X0
	0x03632B50 TBNZ X8, 0x0, 0x3632B68
	0x03632B54 ADRP X0, 0xAC9000
	0x03632B58 LDR X0, [X0 + 0x600]
	0x03632B5C BL 0x1C16CF4
	0x03632B60 MOVZ W8, 0x1
	0x03632B64 STRB W8, [X22 + 0x52A]
	0x03632B68 LDR X0, [X21]
	0x03632B6C LDR W8, [X0 + 0xE0]
	0x03632B70 CBNZ W8, 0x3632B7C
	0x03632B74 BL 0x1C16DFC
	0x03632B78 LDR X0, [X21]
	0x03632B7C LDR X8, [X0 + 0xB8]
	0x03632B80 MOV X0, X20
	0x03632B84 MOV X1, X19
	0x03632B88 LDP X20, X19, [X31 + 0x20]
	0x03632B8C LDR X3, [X8 + 0x30]
	0x03632B90 LDP X22, X21, [X31 + 0x10]
	0x03632B94 MOV W2, W31
	0x03632B98 LDR X30, [X31], #0x30
	0x03632B9C B 0x3632BA0
	0x03632BA0 STR X30, [X31 - 0x40]!
	0x03632BA4 STP X24, X23, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+104], X23
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X22, 0xDAF000
	009 Move X23, 0xACA000
	010 Move W8, [X22+1314]
	011 Move X23, [X23+1536]
	012 Move W20, W2
	013 Move X21, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xACA000
	020 Move X0, [X0+1536]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1314], W8
	024 Move X0, [X23]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X23]
	030 Move X8, [X0+184]
	031 Move X22, [X8+24]
	032 Compare X22, 0
	033 JumpIfEqual {50}
	034 Move X8, [X22+48]
	035 Move V0, [X22+2]
	036 Add X0, X31, 32
	037 Add X1, X31, 64
	038 Move [X31+48], X8
	039 Move [X31+2], V0
	040 Move X8, [X21+16]
	041 Move V0, [X21]
	042 Move [X31+80], X8
	043 Move [X31+4], V0
	044 Call CachedCodeEntryKey.Equals, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {69}
	049 Move X0, [X23]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X23]
	055 Move X8, [X0+184]
	056 Move W8, [X8]
	057 Compare W8, 0
	058 JumpIfEqual {68}
	059 Move X8, [X21+16]
	060 Move V0, [X21]
	061 And W2, W20, 1
	062 Add X1, X31, 0
	063 Move X0, X19
	064 Move [X31+16], X8
	065 Move [X31], V0
	066 Call Regex.GetCachedCodeEntryInternal, X0, X1, X2
	067 Move X22, X0
	068 Move X22, X31
	069 Move X0, X22
	070 Move X20, [X31+128]
	071 Move X19, [X31+136]
	072 Move X22, [X31+112]
	073 Move X21, [X31+120]
	074 Move X30, [X31+96]
	075 Move X23, [X31+104]
	076 Add X31, X31, 144
	077 Return X0

Method: System.Text.RegularExpressions.Regex/CachedCodeEntry GetCachedCodeEntryInternal(System.Text.RegularExpressions.Regex/CachedCodeEntryKey key, System.Boolean isToAdd)

Disassembly:
	0x03632BD8 LDR X0, [X0 + 0x600]
	0x03632BDC BL 0x1C16CF4
	0x03632BE0 MOVZ W8, 0x1
	0x03632BE4 STRB W8, [X23 + 0x52B]
	0x03632BE8 LDR X0, [X24]
	0x03632BEC BL 0x1C16F10
	0x03632BF0 MOVZ W4, 0x1
	0x03632BF4 MOV X1, X22
	0x03632BF8 MOV W2, W21
	0x03632BFC MOV X3, X20
	0x03632C00 MOV X23, X0
	0x03632C04 BL 0x36326B8
	0x03632C08 CBZ X23, 0x3632C28
	0x03632C0C MOV X0, X23
	0x03632C10 MOV X1, X19
	0x03632C14 LDP X20, X19, [X31 + 0x30]
	0x03632C18 LDP X22, X21, [X31 + 0x20]
	0x03632C1C LDP X24, X23, [X31 + 0x10]
	0x03632C20 LDR X30, [X31], #0x40
	0x03632C24 B 0x3632C2C
	0x03632C28 BL 0x1C16F20
	0x03632C2C STP X30, X19, [X31 - 0x10]!
	0x03632C30 CBZ X1, 0x3632C50
	0x03632C34 LDRB W8, [X0 + 0x20]
	0x03632C38 TBNZ X8, 0x6, 0x3632C44
	0x03632C3C MOV W2, W31
	0x03632C40 B 0x3632C48
	0x03632C44 LDR W2, [X1 + 0x10]
	0x03632C48 LDP X30, X19, [X31], #0x10
	0x03632C4C B 0x3632C98
	0x03632C50 ADRP X0, 0xAC6000
	0x03632C54 LDR X0, [X0 + 0x528]
	0x03632C58 BL 0x1C16D08
	0x03632C5C BL 0x1C16F10
	0x03632C60 MOV X19, X0
	0x03632C64 ADRP X0, 0xAF5000
	0x03632C68 LDR X0, [X0 + 0x348]
	0x03632C6C BL 0x1C16D08
	0x03632C70 MOV X1, X0
	0x03632C74 MOV X0, X19
	0x03632C78 MOV X2, X31
	0x03632C7C BL 0x330E100
	0x03632C80 ADRP X0, 0xB09000
	0x03632C84 LDR X0, [X0 + 0x828]
	0x03632C88 BL 0x1C16D08
	0x03632C8C MOV X1, X0
	0x03632C90 MOV X0, X19
	0x03632C94 BL 0x1C16DEC
	0x03632C98 STP X30, X19, [X31 - 0x10]!
	0x03632C9C CBZ X1, 0x3632CC0
	0x03632CA0 LDR W5, [X1 + 0x10]
	0x03632CA4 MOV W6, W2
	0x03632CA8 MOV X3, X1
	0x03632CAC MOVN W2, 0x0
	0x03632CB0 MOV W1, W31
	0x03632CB4 MOV W4, W31
	0x03632CB8 LDP X30, X19, [X31], #0x10
	0x03632CBC B 0x3630D68
	0x03632CC0 ADRP X0, 0xAC6000
	0x03632CC4 LDR X0, [X0 + 0x528]
	0x03632CC8 BL 0x1C16D08
	0x03632CCC BL 0x1C16F10
	0x03632CD0 MOV X19, X0
	0x03632CD4 ADRP X0, 0xAF5000
	0x03632CD8 LDR X0, [X0 + 0x348]
	0x03632CDC BL 0x1C16D08
	0x03632CE0 MOV X1, X0
	0x03632CE4 MOV X0, X19
	0x03632CE8 MOV X2, X31
	0x03632CEC BL 0x330E100
	0x03632CF0 ADRP X0, 0xB09000
	0x03632CF4 LDR X0, [X0 + 0x830]
	0x03632CF8 BL 0x1C16D08
	0x03632CFC MOV X1, X0
	0x03632D00 MOV X0, X19
	0x03632D04 BL 0x1C16DEC
	0x03632D08 STP X30, X23, [X31 - 0x30]!
	0x03632D0C STP X22, X21, [X31 + 0x10]
	0x03632D10 STP X20, X19, [X31 + 0x20]
	0x03632D14 ADRP X23, 0xDAE000
	0x03632D18 ADRP X22, 0xAC9000
	0x03632D1C LDRB W8, [X23 + 0x52C]
	0x03632D20 LDR X22, [X22 + 0x600]
	0x03632D24 MOV X19, X2
	0x03632D28 MOV X20, X1
	0x03632D2C MOV X21, X0
	0x03632D30 TBNZ X8, 0x0, 0x3632D48
	0x03632D34 ADRP X0, 0xAC9000
	0x03632D38 LDR X0, [X0 + 0x600]
	0x03632D3C BL 0x1C16CF4
	0x03632D40 MOVZ W8, 0x1
	0x03632D44 STRB W8, [X23 + 0x52C]
	0x03632D48 LDR X0, [X22]
	0x03632D4C LDR W8, [X0 + 0xE0]
	0x03632D50 CBNZ W8, 0x3632D5C
	0x03632D54 BL 0x1C16DFC
	0x03632D58 LDR X0, [X22]
	0x03632D5C LDR X8, [X0 + 0xB8]
	0x03632D60 MOV X0, X21
	0x03632D64 MOV X1, X20
	0x03632D68 MOV X2, X19
	0x03632D6C LDR X4, [X8 + 0x30]
	0x03632D70 LDP X20, X19, [X31 + 0x20]
	0x03632D74 LDP X22, X21, [X31 + 0x10]
	0x03632D78 MOV W3, W31
	0x03632D7C LDP X30, X23, [X31], #0x30
	0x03632D80 B 0x3632D84
	0x03632D84 STP X30, X25, [X31 - 0x40]!
	0x03632D88 STP X24, X23, [X31 + 0x10]
	0x03632D8C STP X22, X21, [X31 + 0x20]
	0x03632D90 STP X20, X19, [X31 + 0x30]
	0x03632D94 ADRP X24, 0xDAE000
	0x03632D98 ADRP X25, 0xAC9000
	0x03632D9C LDRB W8, [X24 + 0x52E]
	0x03632DA0 LDR X25, [X25 + 0x600]
	0x03632DA4 MOV X21, X4
	0x03632DA8 MOV W22, W3
	0x03632DAC MOV X19, X2
	0x03632DB0 MOV X23, X1
	0x03632DB4 MOV X20, X0
	0x03632DB8 TBNZ X8, 0x0, 0x3632DD0
	0x03632DBC ADRP X0, 0xAC9000
	0x03632DC0 LDR X0, [X0 + 0x600]
	0x03632DC4 BL 0x1C16CF4
	0x03632DC8 MOVZ W8, 0x1
	0x03632DCC STRB W8, [X24 + 0x52E]
	0x03632DD0 LDR X0, [X25]
	0x03632DD4 BL 0x1C16F10
	0x03632DD8 MOVZ W4, 0x1
	0x03632DDC MOV X1, X23
	0x03632DE0 MOV W2, W22
	0x03632DE4 MOV X3, X21
	0x03632DE8 MOV X24, X0
	0x03632DEC BL 0x36326B8
	0x03632DF0 CBZ X24, 0x3632E14
	0x03632DF4 MOV X0, X24
	0x03632DF8 MOV X1, X20
	0x03632DFC MOV X2, X19
	0x03632E00 LDP X20, X19, [X31 + 0x30]
	0x03632E04 LDP X22, X21, [X31 + 0x20]
	0x03632E08 LDP X24, X23, [X31 + 0x10]
	0x03632E0C LDP X30, X25, [X31], #0x40
	0x03632E10 B 0x3632EA0
	0x03632E14 BL 0x1C16F20
	0x03632E18 STR X30, [X31 - 0x40]!
	0x03632E1C STP X24, X23, [X31 + 0x10]
	0x03632E20 STP X22, X21, [X31 + 0x20]
	0x03632E24 STP X20, X19, [X31 + 0x30]
	0x03632E28 ADRP X24, 0xDAE000
	0x03632E2C ADRP X23, 0xAC9000
	0x03632E30 LDRB W8, [X24 + 0x52D]
	0x03632E34 LDR X23, [X23 + 0x600]
	0x03632E38 MOV W19, W3
	0x03632E3C MOV X20, X2
	0x03632E40 MOV X21, X1
	0x03632E44 MOV X22, X0
	0x03632E48 TBNZ X8, 0x0, 0x3632E60
	0x03632E4C ADRP X0, 0xAC9000
	0x03632E50 LDR X0, [X0 + 0x600]
	0x03632E54 BL 0x1C16CF4
	0x03632E58 MOVZ W8, 0x1
	0x03632E5C STRB W8, [X24 + 0x52D]
	0x03632E60 LDR X0, [X23]
	0x03632E64 LDR W8, [X0 + 0xE0]
	0x03632E68 CBNZ W8, 0x3632E74
	0x03632E6C BL 0x1C16DFC
	0x03632E70 LDR X0, [X23]
	0x03632E74 LDR X8, [X0 + 0xB8]
	0x03632E78 MOV X0, X22
	0x03632E7C MOV X1, X21
	0x03632E80 MOV X2, X20
	0x03632E84 LDR X4, [X8 + 0x30]
	0x03632E88 MOV W3, W19
	0x03632E8C LDP X20, X19, [X31 + 0x30]
	0x03632E90 LDP X22, X21, [X31 + 0x20]
	0x03632E94 LDP X24, X23, [X31 + 0x10]
	0x03632E98 LDR X30, [X31], #0x40
	0x03632E9C B 0x3632D84
	0x03632EA0 STP X30, X19, [X31 - 0x10]!
	0x03632EA4 CBZ X1, 0x3632EC8
	0x03632EA8 LDRB W8, [X0 + 0x20]
	0x03632EAC TBNZ X8, 0x6, 0x3632EB8
	0x03632EB0 MOV W4, W31
	0x03632EB4 B 0x3632EBC
	0x03632EB8 LDR W4, [X1 + 0x10]
	0x03632EBC MOVN W3, 0x0
	0x03632EC0 LDP X30, X19, [X31], #0x10
	0x03632EC4 B 0x3632F10
	0x03632EC8 ADRP X0, 0xAC6000
	0x03632ECC LDR X0, [X0 + 0x528]
	0x03632ED0 BL 0x1C16D08
	0x03632ED4 BL 0x1C16F10
	0x03632ED8 MOV X19, X0
	0x03632EDC ADRP X0, 0xAF5000
	0x03632EE0 LDR X0, [X0 + 0x348]
	0x03632EE4 BL 0x1C16D08
	0x03632EE8 MOV X1, X0
	0x03632EEC MOV X0, X19
	0x03632EF0 MOV X2, X31
	0x03632EF4 BL 0x330E100
	0x03632EF8 ADRP X0, 0xB09000
	0x03632EFC LDR X0, [X0 + 0x838]
	0x03632F00 BL 0x1C16D08
	0x03632F04 MOV X1, X0
	0x03632F08 MOV X0, X19
	0x03632F0C BL 0x1C16DEC
	0x03632F10 STR X30, [X31 - 0x30]!
	0x03632F14 STP X22, X21, [X31 + 0x10]
	0x03632F18 STP X20, X19, [X31 + 0x20]
	0x03632F1C CBZ X1, 0x3632F7C
	0x03632F20 CBZ X2, 0x3632F9C
	0x03632F24 MOV X22, X0
	0x03632F28 MOV W19, W4
	0x03632F2C LDP X8, X4, [X22 + 0x30]
	0x03632F30 MOV W20, W3
	0x03632F34 LDR X0, [X0 + 0x58]
	0x03632F38 LDR W3, [X22 + 0x48]
	0x03632F3C LDR W5, [X22 + 0x20]
	0x03632F40 MOV X21, X1
	0x03632F44 MOV X1, X2
	0x03632F48 MOV X2, X8
	0x03632F4C MOV X6, X31
	0x03632F50 BL 0x3645DA0
	0x03632F54 CBZ X0, 0x3632FE4
	0x03632F58 MOV X1, X22
	0x03632F5C MOV X2, X21
	0x03632F60 MOV W3, W20
	0x03632F64 MOV W4, W19
	0x03632F68 LDP X20, X19, [X31 + 0x20]
	0x03632F6C LDP X22, X21, [X31 + 0x10]
	0x03632F70 MOV X5, X31
	0x03632F74 LDR X30, [X31], #0x30
	0x03632F78 B 0x364628C
	0x03632F7C ADRP X0, 0xAC6000
	0x03632F80 LDR X0, [X0 + 0x528]
	0x03632F84 BL 0x1C16D08
	0x03632F88 BL 0x1C16F10
	0x03632F8C MOV X19, X0
	0x03632F90 ADRP X0, 0xAF5000
	0x03632F94 LDR X0, [X0 + 0x348]
	0x03632F98 B 0x3632FB8
	0x03632F9C ADRP X0, 0xAC6000
	0x03632FA0 LDR X0, [X0 + 0x528]
	0x03632FA4 BL 0x1C16D08
	0x03632FA8 BL 0x1C16F10
	0x03632FAC MOV X19, X0
	0x03632FB0 ADRP X0, 0xAF0000
	0x03632FB4 LDR X0, [X0 + 0x340]
	0x03632FB8 BL 0x1C16D08
	0x03632FBC MOV X1, X0
	0x03632FC0 MOV X0, X19
	0x03632FC4 MOV X2, X31
	0x03632FC8 BL 0x330E100
	0x03632FCC ADRP X0, 0xB09000
	0x03632FD0 LDR X0, [X0 + 0x840]
	0x03632FD4 BL 0x1C16D08
	0x03632FD8 MOV X1, X0
	0x03632FDC MOV X0, X19
	0x03632FE0 BL 0x1C16DEC
	0x03632FE4 BL 0x1C16F20
	0x03632FE8 STP X30, X23, [X31 - 0x30]!
	0x03632FEC STP X22, X21, [X31 + 0x10]
	0x03632FF0 STP X20, X19, [X31 + 0x20]
	0x03632FF4 ADRP X23, 0xDAE000
	0x03632FF8 ADRP X20, 0xAC9000
	0x03632FFC ADRP X22, 0xB09000
	0x03633000 ADRP X19, 0xB08000
	0x03633004 ADRP X21, 0xAC2000
	0x03633008 LDRB W8, [X23 + 0x52F]
	0x0363300C LDR X20, [X20 + 0x600]
	0x03633010 LDR X22, [X22 + 0x848]
	0x03633014 LDR X19, [X19 + 0x850]
	0x03633018 LDR X21, [X21 + 0x570]
	0x0363301C TBNZ X8, 0x0, 0x3633064
	0x03633020 ADRP X0, 0xB08000
	0x03633024 LDR X0, [X0 + 0x850]
	0x03633028 BL 0x1C16CF4
	0x0363302C ADRP X0, 0xB08000
	0x03633030 LDR X0, [X0 + 0x848]
	0x03633034 BL 0x1C16CF4
	0x03633038 ADRP X0, 0xAC8000
	0x0363303C LDR X0, [X0 + 0x600]
	0x03633040 BL 0x1C16CF4
	0x03633044 ADRP X0, 0xAC2000
	0x03633048 LDR X0, [X0 + 0x570]
	0x0363304C BL 0x1C16CF4
	0x03633050 ADRP X0, 0xAC3000
	0x03633054 LDR X0, [X0 + 0x128]
	0x03633058 BL 0x1C16CF4
	0x0363305C MOVZ W8, 0x1
	0x03633060 STRB W8, [X23 + 0x52F]
	0x03633064 LDR X8, [X20]
	0x03633068 MOVZ W9, 0xF
	0x0363306C LDR X8, [X8 + 0xB8]
	0x03633070 STR W9, [X8]
	0x03633074 LDR X0, [X22]
	0x03633078 ADRP X22, 0xAC3000

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+144], X30
	003 Move [X31+152], X27
	004 Move [X31+160], X26
	005 Move [X31+168], X25
	006 Move [X31+176], X24
	007 Move [X31+184], X23
	008 Move [X31+192], X22
	009 Move [X31+200], X21
	010 Move [X31+208], X20
	011 Move [X31+216], X19
	012 Move X19, 0xDAF000
	013 Move X25, 0xACA000
	014 Move W8, [X19+1315]
	015 Move X25, [X25+1536]
	016 Move W23, W2
	017 Move X21, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0xB0A000
	024 Move X0, [X0+2016]
	025 Call 0x1C17CF4
	026 Move X0, 0xB0A000
	027 Move X0, [X0+2024]
	028 Call 0x1C17CF4
	029 Move X0, 0xB0A000
	030 Move X0, [X0+2032]
	031 Call 0x1C17CF4
	032 Move X0, 0xACA000
	033 Move X0, [X0+1536]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X19+1315], W8
	037 Move X0, [X25]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X25]
	043 Move X8, [X0+184]
	044 Move X19, [X8+8]
	045 Move [X31+108], W31
	046 Add X1, X31, 108
	047 Move X0, X19
	048 Move X2, X31
	049 Call Monitor.Enter, X0, X1
	050 Move X8, [X21+16]
	051 Move V0, [X21]
	052 Move X0, [X25]
	053 Move [X31+128], X8
	054 Move [X31+7], V0
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move V0, [X31+7]
	060 Move X8, [X31+128]
	061 Move [X31+5], V0
	062 Move [X31+96], X8
	063 Add X0, X31, 80
	064 Call Regex.LookupCachedAndPromote, X0
	065 Move X20, X0
	066 Move X24, X31
	067 Compare X0, 0
	068 JumpIfNotEqual {271}
	069 Move TEMP, X23
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {271}
	073 Move X0, [X25]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move X0, [X25]
	079 Move X8, [X0+184]
	080 Move W8, [X8]
	081 Compare W8, 0
	082 JumpIfEqual {161}
	083 Move X8, [X21+16]
	084 Move V0, [X21]
	085 Move X9, 0xB0A000
	086 Move X9, [X9+2016]
	087 Move [X31+128], X8
	088 Move [X31+7], V0
	089 Move X27, [X22+64]
	090 Move V0, [X22+3]
	091 Move W26, [X22+72]
	092 Move X24, [X22+80]
	093 Move X22, [X22+88]
	094 Move X23, [X22+96]
	095 Move X0, [X9]
	096 Move [X31], V0
	097 Call 0x1C17F10
	098 Move V0, [X31+7]
	099 Move X8, [X31+128]
	100 Move X20, X0
	101 Move [X31+3], V0
	102 Move [X31+64], X8
	103 Move X1, X31
	104 Call Object..ctor, X0
	105 Move V0, [X31+3]
	106 Move X8, [X31+64]
	107 Move V1, [X31]
	108 Move [X20+80], X27
	109 Move [X20+88], W26
	110 Move [X20+2], V0
	111 Move [X20+4], V1
	112 Move [X20+48], X8
	113 Move [X20+56], X23
	114 Move [X20+96], X24
	115 Move [X20+104], X22
	116 Move X8, [X25]
	117 Move W9, [X8+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {123}
	120 Move X0, X8
	121 Call 0x1C17DFC
	122 Move X8, [X25]
	123 Move X9, [X8+184]
	124 Move X9, [X9+24]
	125 Compare X9, 0
	126 JumpIfEqual {139}
	127 Move W10, [X8+224]
	128 Compare W10, 0
	129 JumpIfNotEqual {137}
	130 Move X0, X8
	131 Call 0x1C17DFC
	132 Move X8, [X25]
	133 Move X9, [X8+184]
	134 Move X9, [X9+24]
	135 Compare X9, 0
	136 JumpIfEqual {296}
	137 Move [X9+16], X20
	138 Move [X20+24], X9
	139 Move W9, [X8+224]
	140 Compare W9, 0
	141 JumpIfNotEqual {145}
	142 Move X0, X8
	143 Call 0x1C17DFC
	144 Move X8, [X25]
	145 Move X9, [X8+184]
	146 Move W10, [X9+16]
	147 Move [X9+24], X20
	148 Add W10, W10, 1
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move [X9+16], W10
	151 Move W11, [X8+224]
	152 Compare W11, 0
	153 JumpIfNotEqual {159}
	154 Move X0, X8
	155 Call 0x1C17DFC
	156 Move X8, [X25]
	157 Move X9, [X8+184]
	158 Move W10, [X9+16]
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Call Regex.FillCacheDictionary, X0
	161 Move X24, X31
	162 Move X20, X31
	163 Move W10, [X8+224]
	164 Compare W10, 0
	165 JumpIfNotEqual {170}
	166 Move X0, X8
	167 Call 0x1C17DFC
	168 Move X8, [X25]
	169 Move X9, [X8+184]
	170 Move X0, [X9+8]
	171 Move X8, [X21+16]
	172 Move V0, [X21]
	173 Move [X31+32], X8
	174 Move [X31+1], V0
	175 Compare X0, 0
	176 JumpIfEqual {295}
	177 Move X8, 0xB0A000
	178 Move X8, [X8+2024]
	179 Move V0, [X31+1]
	180 Move X9, [X31+32]
	181 Move X3, [X8]
	182 Move [X31+7], V0
	183 Move [X31+128], X9
	184 Add X1, X31, 112
	185 Move X2, X20
	186 Call Dictionary`2<CachedCodeEntryKey, Object>.Add, X0, X1, X2
	187 Move X8, [X25]
	188 Move W10, [X8+224]
	189 Compare W10, 0
	190 JumpIfNotEqual {195}
	191 Move X0, X8
	192 Call 0x1C17DFC
	193 Move X8, [X25]
	194 Move W10, [X8+224]
	195 Move X9, [X8+184]
	196 Move X11, [X9+32]
	197 Compare X11, 0
	198 JumpIfEqual {221}
	199 Compare W10, 0
	200 JumpIfNotEqual {205}
	201 Move X0, X8
	202 Call 0x1C17DFC
	203 Move X8, [X25]
	204 Move X9, [X8+184]
	205 Move W10, [X9+16]
	206 Move W11, [X9]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move W11, [X8+224]
	209 Compare W11, 0
	210 JumpIfNotEqual {216}
	211 Move X0, X8
	212 Call 0x1C17DFC
	213 Move X8, [X25]
	214 Move X9, [X8+184]
	215 Move W10, [X9+16]
	216 Move X21, [X9+32]
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Compare X21, 0
	219 JumpIfNotEqual {255}
	220 Call 0x1C17F20
	221 Compare W10, 0
	222 JumpIfNotEqual {227}
	223 Move X0, X8
	224 Call 0x1C17DFC
	225 Move X8, [X25]
	226 Move X9, [X8+184]
	227 Move X24, X31
	228 Move [X9+32], X20
	229 Move X24, X31
	230 Move W10, [X8+224]
	231 Compare W10, 0
	232 JumpIfNotEqual {237}
	233 Move X0, X8
	234 Call 0x1C17DFC
	235 Move X8, [X25]
	236 Move X9, [X8+184]
	237 Compare X21, 0
	238 JumpIfEqual {297}
	239 Move X0, [X9+8]
	240 Move X8, [X21+48]
	241 Move V0, [X21+2]
	242 Move [X31+32], X8
	243 Move [X31+1], V0
	244 Compare X0, 0
	245 JumpIfEqual {298}
	246 Move X8, 0xB0A000
	247 Move X8, [X8+2032]
	248 Move V0, [X31+1]
	249 Move X9, [X31+32]
	250 Move X2, [X8]
	251 Move [X31+7], V0
	252 Move [X31+128], X9
	253 Add X1, X31, 112
	254 Call Dictionary`2<CachedCodeEntryKey, Object>.Remove, X0, X1
	255 Move X21, [X21+16]
	256 Compare X21, 0
	257 JumpIfEqual {294}
	258 Move [X21+24], X31
	259 Move X0, [X25]
	260 Move W8, [X0+224]
	261 Compare W8, 0
	262 JumpIfNotEqual {265}
	263 Call 0x1C17DFC
	264 Move X0, [X25]
	265 Move X8, [X0+184]
	266 Move X24, X31
	267 Move W9, [X8+16]
	268 Move [X8+32], X21
	269 Subtract W9, W9, 1
	270 Move [X8+16], W9
	271 Move W8, [X31+108]
	272 Compare W8, 0
	273 JumpIfEqual {277}
	274 Move X0, X19
	275 Move X1, X31
	276 Call Monitor.Exit, X0
	277 Compare X24, 0
	278 JumpIfNotEqual {292}
	279 Move X0, X20
	280 Move X20, [X31+208]
	281 Move X19, [X31+216]
	282 Move X22, [X31+192]
	283 Move X21, [X31+200]
	284 Move X24, [X31+176]
	285 Move X23, [X31+184]
	286 Move X26, [X31+160]
	287 Move X25, [X31+168]
	288 Move X30, [X31+144]
	289 Move X27, [X31+152]
	290 Add X31, X31, 224
	291 Return X0
	292 Move X0, X24
	293 Call 0x1C17F18
	294 Call 0x1C17F20
	295 Call 0x1C17F20
	296 Call 0x1C17F20
	297 Call 0x1C17F20
	298 Call 0x1C17F20
	299 Move X20, X0
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move X0, X20
	302 Call 0x3EB2AD0
	303 Move X24, [X0]
	304 Call 0x3EB2AE0
	305 Move X24, X31
	306 Move X20, X0
	307 Move W8, [X31+108]
	308 Compare W8, 0
	309 JumpIfEqual {313}
	310 Move X0, X19
	311 Move X1, X31
	312 Call Monitor.Exit, X0
	313 Compare X24, 0
	314 JumpIfNotEqual {317}
	315 Move X0, X20
	316 Call 0x1D2D690
	317 Move X0, X24
	318 Call 0x1C17F18
	319 Call 0x1991590

Method: System.Void FillCacheDictionary()

Disassembly:
	0x036332B8 MOV X19, X0
	0x036332BC ADRP X0, 0xB08000
	0x036332C0 LDR X0, [X0 + 0x860]
	0x036332C4 BL 0x1C16D08
	0x036332C8 MOV X20, X0
	0x036332CC ADRP X0, 0xB08000
	0x036332D0 LDR X0, [X0 + 0x858]
	0x036332D4 BL 0x1C16D08
	0x036332D8 MOV X1, X0
	0x036332DC MOV X0, X20
	0x036332E0 MOV X2, X19
	0x036332E4 MOV X3, X31
	0x036332E8 BL 0x320A264
	0x036332EC MOV X19, X0
	0x036332F0 ADRP X0, 0xAC8000
	0x036332F4 LDR X0, [X0 + 0x760]
	0x036332F8 BL 0x1C16D08
	0x036332FC BL 0x1C16F10
	0x03633300 MOV X1, X19
	0x03633304 MOV X2, X31
	0x03633308 MOV X20, X0
	0x0363330C BL 0x3316014
	0x03633310 B 0x3633250
	0x03633314 MOVZ W0, 0x8
	0x03633318 BL 0x3EB1AF0
	0x0363331C LDR X8, [X20]
	0x03633320 STR X8, [X0]
	0x03633324 ADRP X1, 0x881000
	0x03633328 ADD X1, X1, 0xE58
	0x0363332C MOV X2, X31
	0x03633330 BL 0x3EB1B00
	0x03633334 MOV X20, X0
	0x03633338 BL 0x3EB1AE0
	0x0363333C MOV X0, X20
	0x03633340 BL 0x1D2C690
	0x03633344 BL 0x1990590
	0x03633348 STR X30, [X31 - 0x30]!
	0x0363334C STP X22, X21, [X31 + 0x10]
	0x03633350 STP X20, X19, [X31 + 0x20]
	0x03633354 ADRP X20, 0xDAD000
	0x03633358 ADRP X21, 0xAC8000
	0x0363335C LDRB W8, [X20 + 0x530]
	0x03633360 LDR X21, [X21 + 0x600]
	0x03633364 MOV X19, X0
	0x03633368 TBNZ X8, 0x0, 0x363338C
	0x0363336C ADRP X0, 0xAC8000
	0x03633370 LDR X0, [X0 + 0x600]
	0x03633374 BL 0x1C16CF4
	0x03633378 ADRP X0, 0xAC2000
	0x0363337C LDR X0, [X0 + 0x570]
	0x03633380 BL 0x1C16CF4
	0x03633384 MOVZ W8, 0x1
	0x03633388 STRB W8, [X20 + 0x530]
	0x0363338C LDR X0, [X21]
	0x03633390 ADRP X22, 0xAC2000
	0x03633394 LDR W8, [X0 + 0xE0]
	0x03633398 LDR X22, [X22 + 0x570]
	0x0363339C CBNZ W8, 0x36333A8
	0x036333A0 BL 0x1C16DFC
	0x036333A4 LDR X0, [X21]
	0x036333A8 LDR X8, [X22]
	0x036333AC LDR X9, [X0 + 0xB8]
	0x036333B0 LDR W10, [X8 + 0xE0]
	0x036333B4 LDR X20, [X9 + 0x38]
	0x036333B8 CBNZ W10, 0x36333C4

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X19, 0xDAE000
	007 Move X20, 0xAC9000
	008 Move W8, [X19+1316]
	009 Move X20, [X20+1536]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xB09000
	015 Move X0, [X0+2024]
	016 Call 0x1C17CF4
	017 Move X0, 0xB09000
	018 Move X0, [X0+2040]
	019 Call 0x1C17CF4
	020 Move X0, 0xAC9000
	021 Move X0, [X0+1536]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+1316], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X0, [X8+8]
	033 Compare X0, 0
	034 JumpIfEqual {77}
	035 Move X8, 0xB09000
	036 Move X8, [X8+2040]
	037 Move X1, [X8]
	038 Call Dictionary`2<CachedCodeEntryKey, Object>.Clear, X0
	039 Move X0, [X20]
	040 Move X8, [X0+184]
	041 Move X19, [X8+24]
	042 Compare X19, 0
	043 JumpIfEqual {71}
	044 Move X21, 0xB09000
	045 Move X21, [X21+2024]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {51}
	049 Call 0x1C17DFC
	050 Move X0, [X20]
	051 Move X8, [X0+184]
	052 Move X9, [X19+48]
	053 Move V0, [X19+2]
	054 Move X0, [X8+8]
	055 Move [X31+16], X9
	056 Move [X31], V0
	057 Compare X0, 0
	058 JumpIfEqual {77}
	059 Move V0, [X31]
	060 Move X8, [X31+16]
	061 Move X3, [X21]
	062 Add X1, X31, 32
	063 Move X2, X19
	064 Move [X31+2], V0
	065 Move [X31+48], X8
	066 Call Dictionary`2<CachedCodeEntryKey, Object>.Add, X0, X1, X2
	067 Move X19, [X19+24]
	068 Compare X19, 0
	069 JumpIfEqual {71}
	070 Move X0, [X20]
	071 Move X20, [X31+80]
	072 Move X19, [X31+88]
	073 Move X30, [X31+64]
	074 Move X21, [X31+72]
	075 Add X31, X31, 96
	076 Return 
	077 Call 0x1C17F20

Method: System.Boolean TryGetCacheValue(System.Text.RegularExpressions.Regex/CachedCodeEntryKey key, out System.Text.RegularExpressions.Regex/CachedCodeEntry entry)

Disassembly:
	0x036333BC MOV X0, X8
	0x036333C0 BL 0x1C16DFC
	0x036333C4 MOV X0, X20
	0x036333C8 MOV X1, X19
	0x036333CC MOV X2, X31
	0x036333D0 BL 0x3394CD8
	0x036333D4 TBNZ X0, 0x0, 0x3633448
	0x036333D8 LDR X0, [X22]
	0x036333DC LDR W8, [X0 + 0xE0]
	0x036333E0 CBNZ W8, 0x36333EC
	0x036333E4 BL 0x1C16DFC
	0x036333E8 LDR X0, [X22]
	0x036333EC LDR X8, [X0 + 0xB8]
	0x036333F0 MOV X1, X19
	0x036333F4 MOV X2, X31
	0x036333F8 LDR X0, [X8]
	0x036333FC BL 0x3394CF0
	0x03633400 TBZ X0, 0x0, 0x3633458
	0x03633404 LDR X0, [X21]
	0x03633408 LDR W8, [X0 + 0xE0]
	0x0363340C CBNZ W8, 0x3633418
	0x03633410 BL 0x1C16DFC
	0x03633414 LDR X0, [X21]
	0x03633418 LDR X8, [X22]
	0x0363341C LDR X9, [X0 + 0xB8]
	0x03633420 LDR W10, [X8 + 0xE0]
	0x03633424 LDR X20, [X9 + 0x28]
	0x03633428 CBNZ W10, 0x3633434
	0x0363342C MOV X0, X8
	0x03633430 BL 0x1C16DFC
	0x03633434 MOV X0, X19
	0x03633438 MOV X1, X20
	0x0363343C MOV X2, X31
	0x03633440 BL 0x3394CFC
	0x03633444 TBZ X0, 0x0, 0x3633458
	0x03633448 LDP X20, X19, [X31 + 0x20]
	0x0363344C LDP X22, X21, [X31 + 0x10]
	0x03633450 LDR X30, [X31], #0x30
	0x03633454 RET
	0x03633458 ADRP X0, 0xAC8000
	0x0363345C LDR X0, [X0 + 0x760]
	0x03633460 BL 0x1C16D08
	0x03633464 BL 0x1C16F10
	0x03633468 MOV X19, X0
	0x0363346C ADRP X0, 0xB08000
	0x03633470 LDR X0, [X0 + 0x870]
	0x03633474 BL 0x1C16D08
	0x03633478 MOV X1, X0
	0x0363347C MOV X0, X19
	0x03633480 MOV X2, X31
	0x03633484 BL 0x3316014
	0x03633488 ADRP X0, 0xB08000
	0x0363348C LDR X0, [X0 + 0x878]
	0x03633490 BL 0x1C16D08
	0x03633494 MOV X1, X0
	0x03633498 MOV X0, X19
	0x0363349C BL 0x1C16DEC
	0x036334A0 STR X30, [X31 - 0x30]!
	0x036334A4 STP X22, X21, [X31 + 0x10]
	0x036334A8 STP X20, X19, [X31 + 0x20]
	0x036334AC ADRP X22, 0xDAD000
	0x036334B0 ADRP X21, 0xAC8000
	0x036334B4 LDRB W8, [X22 + 0x532]
	0x036334B8 LDR X21, [X21 + 0x600]
	0x036334BC MOV X19, X1
	0x036334C0 MOV X20, X0
	0x036334C4 TBNZ X8, 0x0, 0x36334DC
	0x036334C8 ADRP X0, 0xAC8000
	0x036334CC LDR X0, [X0 + 0x600]
	0x036334D0 BL 0x1C16CF4
	0x036334D4 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X22, 0xDAE000
	008 Move X21, 0xAC9000
	009 Move W8, [X22+1317]
	010 Move X21, [X21+1536]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xB09000
	018 Move X0, [X0+2048]
	019 Call 0x1C17CF4
	020 Move X0, 0xAC9000
	021 Move X0, [X0+1536]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1317], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X21]
	031 Move X8, [X0+184]
	032 Move W9, [X8+16]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X8, [X20+16]
	035 Move V0, [X20]
	036 Move [X31+80], X8
	037 Move [X31+4], V0
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move V0, [X31+4]
	043 Move X8, [X31+80]
	044 Add X0, X31, 0
	045 Move X1, X19
	046 Move [X31], V0
	047 Move [X31+16], X8
	048 Call Regex.TryGetCacheValueSmall, X0, X1
	049 Move W9, [X0+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {55}
	052 Call 0x1C17DFC
	053 Move X8, [X21]
	054 Move X8, [X8+184]
	055 Move X0, [X8+8]
	056 Move X8, [X20+16]
	057 Move V0, [X20]
	058 Move [X31+48], X8
	059 Move [X31+2], V0
	060 Compare X0, 0
	061 JumpIfEqual {80}
	062 Move X8, 0xB09000
	063 Move X8, [X8+2048]
	064 Move V0, [X31+2]
	065 Move X9, [X31+48]
	066 Add X1, X31, 64
	067 Move X3, [X8]
	068 Move X2, X19
	069 Move [X31+4], V0
	070 Move [X31+80], X9
	071 Call Dictionary`2<CachedCodeEntryKey, Object>.TryGetValue, X0, X1, X2
	072 Move X20, [X31+128]
	073 Move X19, [X31+136]
	074 Move X22, [X31+112]
	075 Move X21, [X31+120]
	076 Move X30, [X31+96]
	077 And W0, W0, 1
	078 Add X31, X31, 144
	079 Return X0
	080 Call 0x1C17F20

Method: System.Boolean TryGetCacheValueSmall(System.Text.RegularExpressions.Regex/CachedCodeEntryKey key, out System.Text.RegularExpressions.Regex/CachedCodeEntry entry)

Disassembly:
	0x036334D8 STRB W8, [X22 + 0x532]
	0x036334DC LDR X0, [X21]
	0x036334E0 LDR W8, [X0 + 0xE0]
	0x036334E4 CBNZ W8, 0x36334F0
	0x036334E8 BL 0x1C16DFC
	0x036334EC LDR X0, [X21]
	0x036334F0 LDR X8, [X0 + 0xB8]
	0x036334F4 MOV X0, X20
	0x036334F8 MOV X1, X19
	0x036334FC LDP X20, X19, [X31 + 0x20]
	0x03633500 LDR X3, [X8 + 0x30]
	0x03633504 LDP X22, X21, [X31 + 0x10]
	0x03633508 MOV W2, W31
	0x0363350C MOV W4, W31
	0x03633510 LDR X30, [X31], #0x30
	0x03633514 B 0x36326B8
	0x03633518 STP X30, X23, [X31 - 0x30]!
	0x0363351C STP X22, X21, [X31 + 0x10]
	0x03633520 STP X20, X19, [X31 + 0x20]
	0x03633524 ADRP X23, 0xDAD000
	0x03633528 ADRP X22, 0xAC8000
	0x0363352C LDRB W8, [X23 + 0x533]
	0x03633530 LDR X22, [X22 + 0x600]
	0x03633534 MOV W19, W2
	0x03633538 MOV X20, X1
	0x0363353C MOV X21, X0
	0x03633540 TBNZ X8, 0x0, 0x3633558
	0x03633544 ADRP X0, 0xAC8000
	0x03633548 LDR X0, [X0 + 0x600]
	0x0363354C BL 0x1C16CF4
	0x03633550 MOVZ W8, 0x1
	0x03633554 STRB W8, [X23 + 0x533]
	0x03633558 LDR X0, [X22]
	0x0363355C LDR W8, [X0 + 0xE0]
	0x03633560 CBNZ W8, 0x363356C
	0x03633564 BL 0x1C16DFC
	0x03633568 LDR X0, [X22]
	0x0363356C LDR X8, [X0 + 0xB8]
	0x03633570 MOV X0, X21
	0x03633574 MOV X1, X20
	0x03633578 MOV W2, W19
	0x0363357C LDR X3, [X8 + 0x30]
	0x03633580 LDP X20, X19, [X31 + 0x20]
	0x03633584 LDP X22, X21, [X31 + 0x10]
	0x03633588 MOV W4, W31
	0x0363358C LDP X30, X23, [X31], #0x30
	0x03633590 B 0x36326B8
	0x03633594 STP X30, X19, [X31 - 0x10]!
	0x03633598 ADRP X0, 0xAEB000
	0x0363359C LDR X0, [X0 + 0xC50]
	0x036335A0 BL 0x1C16D08
	0x036335A4 BL 0x1C16F10
	0x036335A8 MOV X1, X31
	0x036335AC MOV X19, X0
	0x036335B0 BL 0x338E344
	0x036335B4 ADRP X0, 0xB08000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0xDAE000
	008 Move X21, 0xAC9000
	009 Move W8, [X22+1318]
	010 Move X21, [X21+1536]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xAC9000
	018 Move X0, [X0+1536]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1318], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X21]
	028 Move X8, [X0+184]
	029 Move X8, [X8+24]
	030 Compare X8, 0
	031 JumpIfEqual {58}
	032 Move X8, [X8+24]
	033 Move [X19], X8
	034 Compare X8, 0
	035 JumpIfEqual {60}
	036 Move X9, [X8+48]
	037 Move V0, [X8+2]
	038 Add X0, X31, 0
	039 Add X1, X31, 32
	040 Move [X31+16], X9
	041 Move [X31], V0
	042 Move X8, [X20+16]
	043 Move V0, [X20]
	044 Move [X31+48], X8
	045 Move [X31+2], V0
	046 Call CachedCodeEntryKey.Equals, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {61}
	051 Move X8, [X19]
	052 Compare X8, 0
	053 JumpIfEqual {69}
	054 Move X8, [X8+24]
	055 Move [X19], X8
	056 Compare X8, 0
	057 JumpIfNotEqual {36}
	058 Move W0, W31
	059 Move [X19], X31
	060 Move W0, W31
	061 Move X20, [X31+96]
	062 Move X19, [X31+104]
	063 Move X22, [X31+80]
	064 Move X21, [X31+88]
	065 Move X30, [X31+64]
	066 And W0, W0, 1
	067 Add X31, X31, 112
	068 Return X0
	069 Call 0x1C17F20

Method: System.Text.RegularExpressions.Regex/CachedCodeEntry LookupCachedAndPromote(System.Text.RegularExpressions.Regex/CachedCodeEntryKey key)

Disassembly:
	0x0363307C LDR X22, [X22 + 0x128]
	0x03633080 BL 0x1C16F10
	0x03633084 LDR X2, [X19]
	0x03633088 MOVZ W1, 0xF
	0x0363308C MOV X19, X0
	0x03633090 BL 0x2B2FDE4
	0x03633094 LDR X8, [X20]
	0x03633098 LDR X8, [X8 + 0xB8]
	0x0363309C STR X19, [X8 + 0x8]
	0x036330A0 STR W31, [X8 + 0x10]
	0x036330A4 LDR X0, [X21]
	0x036330A8 LDR W8, [X0 + 0xE0]
	0x036330AC CBNZ W8, 0x36330B4
	0x036330B0 BL 0x1C16DFC
	0x036330B4 ADRP X8, 0xFFFFFFFFFD4BA000
	0x036330B8 LDR V0, [X8 + 0xEF0]
	0x036330BC MOV X0, X31
	0x036330C0 BL 0x33945E4
	0x036330C4 LDR X8, [X20]
	0x036330C8 LDR X9, [X8 + 0xB8]
	0x036330CC STR X0, [X9 + 0x28]
	0x036330D0 LDR X0, [X22]
	0x036330D4 LDR W9, [X0 + 0xE0]
	0x036330D8 CBNZ W9, 0x36330E8
	0x036330DC BL 0x1C16DFC
	0x036330E0 LDR X0, [X22]
	0x036330E4 LDR X8, [X20]
	0x036330E8 LDR X9, [X0 + 0xB8]
	0x036330EC LDR X8, [X8 + 0xB8]
	0x036330F0 LDR X9, [X9]
	0x036330F4 STR X9, [X8 + 0x38]
	0x036330F8 BL 0x3633118
	0x036330FC LDR X8, [X20]
	0x03633100 LDP X20, X19, [X31 + 0x20]
	0x03633104 LDP X22, X21, [X31 + 0x10]
	0x03633108 LDR X8, [X8 + 0xB8]
	0x0363310C STR X0, [X8 + 0x30]
	0x03633110 LDP X30, X23, [X31], #0x30
	0x03633114 RET
	0x03633118 STR X30, [X31 - 0x20]!
	0x0363311C STP X20, X19, [X31 + 0x10]
	0x03633120 ADRP X19, 0xDAD000
	0x03633124 LDRB W8, [X19 + 0x531]
	0x03633128 TBNZ X8, 0x0, 0x3633158
	0x0363312C ADRP X0, 0xAC8000
	0x03633130 LDR X0, [X0 + 0x600]
	0x03633134 BL 0x1C16CF4
	0x03633138 ADRP X0, 0xAC2000
	0x0363313C LDR X0, [X0 + 0x570]
	0x03633140 BL 0x1C16CF4
	0x03633144 ADRP X0, 0xB08000
	0x03633148 LDR X0, [X0 + 0x858]
	0x0363314C BL 0x1C16CF4
	0x03633150 MOVZ W8, 0x1
	0x03633154 STRB W8, [X19 + 0x531]
	0x03633158 MOV X0, X31
	0x0363315C BL 0x33C0128
	0x03633160 CBZ X0, 0x36331F8
	0x03633164 ADRP X8, 0xB08000
	0x03633168 LDR X8, [X8 + 0x858]
	0x0363316C ADRP X20, 0xAC8000
	0x03633170 MOV X2, X31
	0x03633174 LDR X1, [X8]
	0x03633178 LDR X20, [X20 + 0x600]
	0x0363317C BL 0x33C013C
	0x03633180 CBZ X0, 0x36331CC
	0x03633184 ADRP X8, 0xAC2000
	0x03633188 LDR X8, [X8 + 0x570]
	0x0363318C LDR X9, [X0]
	0x03633190 MOV X19, X0
	0x03633194 LDR X8, [X8]
	0x03633198 CMP X9, X8
	0x0363319C B.NE 0x36331FC
	0x036331A0 MOV X0, X19
	0x036331A4 BL 0x1C16E08
	0x036331A8 MOV X8, X0
	0x036331AC LDR X0, [X20]
	0x036331B0 LDR X19, [X8]
	0x036331B4 LDR W9, [X0 + 0xE0]
	0x036331B8 CBNZ W9, 0x36331C0
	0x036331BC BL 0x1C16DFC
	0x036331C0 MOV X0, X19
	0x036331C4 BL 0x3633348
	0x036331C8 B 0x36331E8
	0x036331CC LDR X0, [X20]
	0x036331D0 LDR W8, [X0 + 0xE0]
	0x036331D4 CBNZ W8, 0x36331E0
	0x036331D8 BL 0x1C16DFC
	0x036331DC LDR X0, [X20]
	0x036331E0 LDR X8, [X0 + 0xB8]
	0x036331E4 LDR X19, [X8 + 0x38]
	0x036331E8 MOV X0, X19
	0x036331EC LDP X20, X19, [X31 + 0x10]
	0x036331F0 LDR X30, [X31], #0x20
	0x036331F4 RET
	0x036331F8 BL 0x1C16F20
	0x036331FC ADRP X0, 0xB08000
	0x03633200 LDR X0, [X0 + 0x860]
	0x03633204 BL 0x1C16D08
	0x03633208 MOV X20, X0
	0x0363320C ADRP X0, 0xB08000
	0x03633210 LDR X0, [X0 + 0x858]
	0x03633214 BL 0x1C16D08
	0x03633218 MOV X1, X0
	0x0363321C MOV X0, X20
	0x03633220 MOV X2, X19
	0x03633224 MOV X3, X31
	0x03633228 BL 0x320A264
	0x0363322C MOV X19, X0
	0x03633230 ADRP X0, 0xAC8000
	0x03633234 LDR X0, [X0 + 0xC08]
	0x03633238 BL 0x1C16D08
	0x0363323C BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+104], X21
	004 Move [X31+112], X20
	005 Move [X31+120], X19
	006 Move X21, 0xDAE000
	007 Move X20, 0xAC9000
	008 Move W8, [X21+1319]
	009 Move X20, [X20+1536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAC9000
	016 Move X0, [X0+1536]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1319], W8
	020 Move X8, [X20]
	021 Move [X31+56], X31
	022 Move W9, [X8+224]
	023 Compare W9, 0
	024 JumpIfNotEqual {28}
	025 Move X0, X8
	026 Call 0x1C17DFC
	027 Move X8, [X20]
	028 Move X9, [X8+184]
	029 Move X9, [X9+24]
	030 Compare X9, 0
	031 JumpIfEqual {56}
	032 Move X8, [X9+48]
	033 Move V0, [X9+2]
	034 Add X0, X31, 32
	035 Add X1, X31, 64
	036 Move [X31+48], X8
	037 Move [X31+2], V0
	038 Move X8, [X19+16]
	039 Move V0, [X19]
	040 Move [X31+80], X8
	041 Move [X31+4], V0
	042 Call CachedCodeEntryKey.Equals, X0, X1
	043 Move X8, [X20]
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {56}
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {54}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X8, [X20]
	054 Move X8, [X8+184]
	055 Add X19, X8, 24
	056 Move X9, [X19+16]
	057 Move V0, [X19]
	058 Move [X31+80], X9
	059 Move [X31+4], V0
	060 Move W9, [X8+224]
	061 Compare W9, 0
	062 JumpIfNotEqual {65}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move V0, [X31+4]
	066 Move X8, [X31+80]
	067 Add X0, X31, 0
	068 Add X1, X31, 56
	069 Move X2, X31
	070 Move [X31], V0
	071 Move [X31+16], X8
	072 Add X19, X31, 56
	073 Call 0x363C474
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {129}
	078 Move X0, [X20]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {84}
	082 Call 0x1C17DFC
	083 Move X0, [X20]
	084 Move X8, [X31+56]
	085 Compare X8, 0
	086 JumpIfEqual {136}
	087 Move X9, [X0+184]
	088 Move X10, [X9+32]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X9, [X8+24]
	091 Compare X9, 0
	092 JumpIfEqual {136}
	093 Move X10, [X8+16]
	094 Move [X9+16], X10
	095 Move W10, [X0+224]
	096 Move X19, [X8+16]
	097 Compare W10, 0
	098 JumpIfEqual {100}
	099 Move [X9+32], X19
	100 Call 0x1C17DFC
	101 Move X0, [X20]
	102 Move X8, [X31+56]
	103 Move X9, [X0+184]
	104 Move [X9+32], X19
	105 Compare X8, 0
	106 JumpIfEqual {136}
	107 Move X9, [X8+16]
	108 Compare X9, 0
	109 JumpIfEqual {136}
	110 Move X10, [X8+24]
	111 Move [X9+24], X10
	112 Move W9, [X0+224]
	113 Compare W9, 0
	114 JumpIfNotEqual {118}
	115 Call 0x1C17DFC
	116 Move X0, [X20]
	117 Move X8, [X31+56]
	118 Move X9, [X0+184]
	119 Move X10, [X9+24]
	120 Compare X10, 0
	121 JumpIfEqual {136}
	122 Move [X10+16], X8
	123 Compare X8, 0
	124 JumpIfEqual {136}
	125 Add X19, X31, 56
	126 Move [X8+16], X31
	127 Move [X8+24], X10
	128 Move [X9+24], X8
	129 Move X0, [X19]
	130 Move X20, [X31+112]
	131 Move X19, [X31+120]
	132 Move X30, [X31+96]
	133 Move X21, [X31+104]
	134 Add X31, X31, 128
	135 Return X0
	136 Call 0x1C17F20

Method: System.Boolean IsMatch(System.String input, System.String pattern)

Disassembly:
	0x036335B8 LDR X0, [X0 + 0x880]
	0x036335BC BL 0x1C16D08
	0x036335C0 MOV X1, X0
	0x036335C4 MOV X0, X19
	0x036335C8 BL 0x1C16DEC
	0x036335CC STR W1, [X0]
	0x036335D0 STP X2, X3, [X0 + 0x8]
	0x036335D4 RET
	0x036335D8 STR X30, [X31 - 0x30]!
	0x036335DC STP X22, X21, [X31 + 0x10]
	0x036335E0 STP X20, X19, [X31 + 0x20]
	0x036335E4 ADRP X20, 0xDAD000
	0x036335E8 LDRB W8, [X20 + 0x537]
	0x036335EC MOV X19, X0
	0x036335F0 TBNZ X8, 0x0, 0x3633620
	0x036335F4 ADRP X0, 0xB08000
	0x036335F8 LDR X0, [X0 + 0x888]
	0x036335FC BL 0x1C16CF4
	0x03633600 ADRP X0, 0xB08000
	0x03633604 LDR X0, [X0 + 0x890]
	0x03633608 BL 0x1C16CF4
	0x0363360C ADRP X0, 0xB08000
	0x03633610 LDR X0, [X0 + 0x898]
	0x03633614 BL 0x1C16CF4
	0x03633618 MOVZ W8, 0x1
	0x0363361C STRB W8, [X20 + 0x537]
	0x03633620 LDRB W8, [X19 + 0x68]
	0x03633624 CBNZ W8, 0x363368C
	0x03633628 ADRP X8, 0xB08000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xDAE000
	007 Move X21, 0xAC9000
	008 Move W8, [X22+1320]
	009 Move X21, [X21+1536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAC9000
	017 Move X0, [X0+1536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1320], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X3, [X8+48]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W2, W31
	036 Move X30, [X31+48]

Method: System.Boolean IsMatch(System.String input, System.String pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout)

Disassembly:
	0x0363362C LDR X8, [X8 + 0x888]
	0x03633630 MOVZ W9, 0x1
	0x03633634 STRB W9, [X19 + 0x68]
	0x03633638 ADRP X21, 0xB08000
	0x0363363C LDR X0, [X8]
	0x03633640 ADRP X22, 0xB08000
	0x03633644 LDR X21, [X21 + 0x898]
	0x03633648 LDR X22, [X22 + 0x890]
	0x0363364C BL 0x1C16F10
	0x03633650 MOV X1, X31
	0x03633654 MOV X20, X0
	0x03633658 BL 0x33BDD8C
	0x0363365C STR X20, [X19 + 0x50]
	0x03633660 LDR X0, [X21]
	0x03633664 BL 0x1C16F10
	0x03633668 LDR X2, [X22]
	0x0363366C MOV X1, X31
	0x03633670 MOV X20, X0
	0x03633674 BL 0x2850290
	0x03633678 STR X20, [X19 + 0x58]
	0x0363367C LDP X20, X19, [X31 + 0x20]
	0x03633680 LDP X22, X21, [X31 + 0x10]
	0x03633684 LDR X30, [X31], #0x30
	0x03633688 RET
	0x0363368C ADRP X0, 0xAC0000
	0x03633690 LDR X0, [X0 + 0xB40]
	0x03633694 BL 0x1C16D08
	0x03633698 BL 0x1C16F10
	0x0363369C MOV X19, X0
	0x036336A0 ADRP X0, 0xB08000
	0x036336A4 LDR X0, [X0 + 0x8A0]
	0x036336A8 BL 0x1C16D08
	0x036336AC MOV X1, X0
	0x036336B0 MOV X0, X19
	0x036336B4 MOV X2, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xDAE000
	009 Move X24, 0xAC9000
	010 Move W8, [X23+1321]
	011 Move X24, [X24+1536]
	012 Move X20, X3
	013 Move W21, W2
	014 Move X22, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xAC9000
	021 Move X0, [X0+1536]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1321], W8
	025 Move X0, [X24]
	026 Call 0x1C17F10
	027 Move W4, 1
	028 Move X1, X22
	029 Move W2, W21
	030 Move X3, X20
	031 Move X23, X0
	032 Call Regex..ctor, X0, X1, X2, X3, X4
	033 Compare X23, 0
	034 JumpIfEqual {46}
	035 Move X0, X23
	036 Move X1, X19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Call Regex.IsMatch, X0, X1
	045 Return X0
	046 Call 0x1C17F20

Method: System.Boolean IsMatch(System.String input)

Disassembly:
	0x03633A38 CMP W22, W0, UXTH
	0x03633A3C B.NE 0x3633A5C
	0x03633A40 SUB W26, W26, W27
	0x03633A44 ADDS W31, W28, W26
	0x03633A48 B.NE 0x3633A0C
	0x03633A4C ADD W24, W21, W26
	0x03633A50 MOV W28, W19
	0x03633A54 MOV W25, W19
	0x03633A58 B 0x3633A60
	0x03633A5C MOV W28, W19
	0x03633A60 LDR X19, [X31 + 0x8]
	0x03633A64 LDR X8, [X19 + 0x10]
	0x03633A68 CBZ X8, 0x3633CD4
	0x03633A6C LDR W9, [X8 + 0x18]
	0x03633A70 LDR W22, [X31]
	0x03633A74 CMP W24, W9
	0x03633A78 B.CS 0x3633CD0
	0x03633A7C ADD X8, X8, W24, 0x2, SXTW
	0x03633A80 LDR W9, [X8 + 0x20]!
	0x03633A84 CBNZ W9, 0x3633A90
	0x03633A88 SUB W9, W24, W25
	0x03633A8C STR W9, [X8]
	0x03633A90 SUB W23, W23, W27
	0x03633A94 CMP W23, W28
	0x03633A98 B.NE 0x36339E0
	0x03633A9C CMP W29, W28
	0x03633AA0 B.EQ 0x3633AD4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {16}
	005 Move W8, [X0+32]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 64
	008 Compare TEMP, 64
	009 JumpIfEqual {11}
	010 Move W2, W31
	011 Move W2, [X1+16]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call Regex.IsMatch, X0, X1, X2
	015 Return X0
	016 Move X0, 0xAC6000
	017 Move X0, [X0+1320]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0xAF5000
	022 Move X0, [X0+840]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Move X2, X31
	027 Call ArgumentNullException..ctor, X0, X1
	028 Move X0, 0xB09000
	029 Move X0, [X0+2072]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC

Method: System.Boolean IsMatch(System.String input, System.Int32 startat)

Disassembly:
	0x03633AB0 CMP W29, W9
	0x03633AB4 B.CS 0x3633CD0
	0x03633AB8 ADD X10, X8, W29, 0x2, SXTW
	0x03633ABC LDR W11, [X10 + 0x20]!
	0x03633AC0 CBNZ W11, 0x3633AC8
	0x03633AC4 STR W27, [X10]
	0x03633AC8 SUB W29, W29, W27
	0x03633ACC CMP W28, W29
	0x03633AD0 B.NE 0x3633AB0
	0x03633AD4 ADRP X8, 0xAC1000
	0x03633AD8 LDR X8, [X8 + 0xE58]
	0x03633ADC MOVZ W1, 0x80
	0x03633AE0 LDR X0, [X8]
	0x03633AE4 BL 0x1C16D6C
	0x03633AE8 STR X0, [X19 + 0x18]
	0x03633AEC CBZ X0, 0x3633CD4
	0x03633AF0 LDR W9, [X0 + 0x18]
	0x03633AF4 MOV X8, X31
	0x03633AF8 SUB W24, W21, W28
	0x03633AFC ADD X10, X0, 0x20
	0x03633B00 CMP X8, X9
	0x03633B04 B.CS 0x3633CD0
	0x03633B08 STR W24, [X10, X8, LSL #2]
	0x03633B0C ADD X8, X8, 0x1
	0x03633B10 CMP X8, 0x80
	0x03633B14 B.NE 0x3633B00
	0x03633B18 ADRP X8, 0xFFFFFFFFFD4BB000
	0x03633B1C LDR V0, [X8 + 0x398]
	0x03633B20 CMP W21, W28
	0x03633B24 STR D0, [X19 + 0x30]
	0x03633B28 B.EQ 0x3633CB0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {19}
	005 Move W5, [X1+16]
	006 Move W6, W2
	007 Move X3, X1
	008 Move W1, 1
	009 Move TEMP, 0
	010 Not TEMP
	011 Move W2, TEMP
	012 Move W4, W31
	013 Call Regex.Run, X0, X1, X2, X3, X4, X5, X6
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return X0
	019 Move X0, 0xAC6000
	020 Move X0, [X0+1320]
	021 Call 0x1C17D08
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Move X0, 0xAF5000
	025 Move X0, [X0+840]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Move X2, X31
	030 Call ArgumentNullException..ctor, X0, X1
	031 Move X0, 0xB09000
	032 Move X0, [X0+2080]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X19
	036 Call 0x1C17DEC

Method: System.Text.RegularExpressions.Match Match(System.String input, System.String pattern)

Disassembly:
	0x03633B2C MOV W22, W21
	0x03633B30 MOV X0, X20
	0x03633B34 MOV W1, W22
	0x03633B38 MOV X2, X31
	0x03633B3C BL 0x3222A1C
	0x03633B40 AND W29, W0, 0xFFFF
	0x03633B44 CMP W29, 0x7F
	0x03633B48 B.LS 0x3633C58
	0x03633B4C LDR X0, [X19 + 0x20]
	0x03633B50 CBNZ X0, 0x3633B70
	0x03633B54 ADRP X8, 0xAF8000
	0x03633B58 LDR X8, [X8 + 0xDA0]
	0x03633B5C MOVZ W1, 0x100
	0x03633B60 LDR X0, [X8]
	0x03633B64 BL 0x1C16D6C
	0x03633B68 STR X0, [X19 + 0x20]
	0x03633B6C CBZ X0, 0x3633CD4
	0x03633B70 LDR W8, [X0 + 0x18]
	0x03633B74 UBFM W26, W29, 0x8, 0x1F
	0x03633B78 CMP W26, W8
	0x03633B7C B.CS 0x3633CD0
	0x03633B80 MOV W25, W26
	0x03633B84 ADD X8, X0, X25, 0x3, LSL
	0x03633B88 LDR X8, [X8 + 0x20]
	0x03633B8C CBNZ X8, 0x3633C28
	0x03633B90 ADRP X8, 0xAC1000
	0x03633B94 LDR X8, [X8 + 0xE58]
	0x03633B98 MOVZ W1, 0x100
	0x03633B9C LDR X0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xDAE000
	007 Move X21, 0xAC9000
	008 Move W8, [X22+1322]
	009 Move X21, [X21+1536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAC9000
	017 Move X0, [X0+1536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1322], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X3, [X8+48]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W2, W31
	036 Move X30, [X31+48]

Method: System.Text.RegularExpressions.Match Match(System.String input, System.String pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout)

Disassembly:
	0x03633BA0 BL 0x1C16D6C
	0x03633BA4 CBZ X0, 0x3633CD4
	0x03633BA8 LDR W8, [X0 + 0x18]
	0x03633BAC MOV X23, X0
	0x03633BB0 UBFM X9, X8, 0x20, 0x1F
	0x03633BB4 CMP X9, 0x1
	0x03633BB8 B.LT 0x3633BE0
	0x03633BBC MOV X9, X31
	0x03633BC0 SXTW X10, W8
	0x03633BC4 ADD X11, X23, 0x20
	0x03633BC8 CMP X9, X8
	0x03633BCC B.CS 0x3633CD0
	0x03633BD0 STR W24, [X11, X9, LSL #2]
	0x03633BD4 ADD X9, X9, 0x1
	0x03633BD8 CMP X10, X9
	0x03633BDC B.NE 0x3633BC8
	0x03633BE0 CBNZ W26, 0x3633C04
	0x03633BE4 LDR X0, [X19 + 0x18]
	0x03633BE8 MOVZ W4, 0x80
	0x03633BEC MOV W1, W31
	0x03633BF0 MOV X2, X23
	0x03633BF4 MOV W3, W31
	0x03633BF8 MOV X5, X31
	0x03633BFC BL 0x339FCE8
	0x03633C00 STR X23, [X19 + 0x18]
	0x03633C04 LDR X8, [X19 + 0x20]
	0x03633C08 CBZ X8, 0x3633CD4
	0x03633C0C LDR W9, [X8 + 0x18]
	0x03633C10 CMP W26, W9
	0x03633C14 B.CS 0x3633CD0
	0x03633C18 ADD X8, X8, X25, 0x3, LSL
	0x03633C1C STR X23, [X8 + 0x20]
	0x03633C20 LDR X0, [X19 + 0x20]
	0x03633C24 CBZ X0, 0x3633CD4
	0x03633C28 LDR W8, [X0 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xDAE000
	009 Move X24, 0xAC9000
	010 Move W8, [X23+1323]
	011 Move X24, [X24+1536]
	012 Move X20, X3
	013 Move W21, W2
	014 Move X22, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xAC9000
	021 Move X0, [X0+1536]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1323], W8
	025 Move X0, [X24]
	026 Call 0x1C17F10
	027 Move W4, 1
	028 Move X1, X22
	029 Move W2, W21
	030 Move X3, X20
	031 Move X23, X0
	032 Call Regex..ctor, X0, X1, X2, X3, X4
	033 Compare X23, 0
	034 JumpIfEqual {44}
	035 Move X0, X23
	036 Move X1, X19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Call 0x1C17F20

Method: System.Text.RegularExpressions.Match Match(System.String input)

Disassembly:
	0x03633C2C CMP W26, W8
	0x03633C30 B.CS 0x3633CD0
	0x03633C34 ADD X8, X0, X25, 0x3, LSL
	0x03633C38 LDR X8, [X8 + 0x20]
	0x03633C3C CBZ X8, 0x3633CD4
	0x03633C40 LDR W10, [X8 + 0x18]
	0x03633C44 AND W9, W29, 0xFF
	0x03633C48 CMP W9, W10
	0x03633C4C B.CS 0x3633CD0
	0x03633C50 ADD X8, X8, W9, 0x2, UXTW
	0x03633C54 B 0x3633C90
	0x03633C58 LDR W8, [X19 + 0x30]
	0x03633C5C CMP W8, W29
	0x03633C60 B.LE 0x3633C68
	0x03633C64 STR W29, [X19 + 0x30]
	0x03633C68 LDR W8, [X19 + 0x34]
	0x03633C6C CMP W8, W29
	0x03633C70 B.GE 0x3633C78
	0x03633C74 STR W29, [X19 + 0x34]
	0x03633C78 LDR X8, [X19 + 0x18]
	0x03633C7C CBZ X8, 0x3633CD4
	0x03633C80 LDR W9, [X8 + 0x18]
	0x03633C84 CMP W29, W9
	0x03633C88 B.CS 0x3633CD0
	0x03633C8C ADD X8, X8, W29, 0x2, UXTW
	0x03633C90 LDR W9, [X8 + 0x20]!
	0x03633C94 CMP W9, W24

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {14}
	005 Move W8, [X0+32]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 64
	008 Compare TEMP, 64
	009 JumpIfEqual {11}
	010 Move W2, W31
	011 Move W2, [X1+16]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Move X0, 0xAC6000
	015 Move X0, [X0+1320]
	016 Call 0x1C17D08
	017 Call 0x1C17F10
	018 Move X19, X0
	019 Move X0, 0xAF5000
	020 Move X0, [X0+840]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Move X2, X31
	025 Call ArgumentNullException..ctor, X0, X1
	026 Move X0, 0xB09000
	027 Move X0, [X0+2088]
	028 Call 0x1C17D08
	029 Move X1, X0
	030 Move X0, X19
	031 Call 0x1C17DEC

Method: System.Text.RegularExpressions.Match Match(System.String input, System.Int32 startat)

Disassembly:
	0x03633C98 B.NE 0x3633CA4
	0x03633C9C SUB W9, W21, W22
	0x03633CA0 STR W9, [X8]
	0x03633CA4 SUB W22, W22, W27
	0x03633CA8 CMP W22, W28
	0x03633CAC B.NE 0x3633B30
	0x03633CB0 LDP X20, X19, [X31 + 0x60]
	0x03633CB4 LDP X22, X21, [X31 + 0x50]
	0x03633CB8 LDP X24, X23, [X31 + 0x40]
	0x03633CBC LDP X26, X25, [X31 + 0x30]
	0x03633CC0 LDP X28, X27, [X31 + 0x20]
	0x03633CC4 LDP X29, X30, [X31 + 0x10]
	0x03633CC8 ADD X31, X31, 0x70
	0x03633CCC RET
	0x03633CD0 BL 0x1C16F28
	0x03633CD4 BL 0x1C16F20
	0x03633CD8 STP X30, X25, [X31 - 0x40]!
	0x03633CDC STP X24, X23, [X31 + 0x10]
	0x03633CE0 STP X22, X21, [X31 + 0x20]
	0x03633CE4 STP X20, X19, [X31 + 0x30]
	0x03633CE8 LDRB W8, [X0 + 0x39]
	0x03633CEC MOV W19, W2
	0x03633CF0 MOV X21, X0
	0x03633CF4 MOV X20, X1
	0x03633CF8 CBZ W8, 0x3633D24
	0x03633CFC CBZ X20, 0x3633DDC
	0x03633D00 LDR X8, [X21 + 0x28]
	0x03633D04 CBZ X8, 0x3633DDC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {17}
	005 Move W5, [X1+16]
	006 Move W6, W2
	007 Move X3, X1
	008 Move TEMP, 0
	009 Not TEMP
	010 Move W2, TEMP
	011 Move W1, W31
	012 Move W4, W31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call Regex.Run, X0, X1, X2, X3, X4, X5, X6
	016 Return X0
	017 Move X0, 0xAC6000
	018 Move X0, [X0+1320]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xAF5000
	023 Move X0, [X0+840]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Move X2, X31
	028 Call ArgumentNullException..ctor, X0, X1
	029 Move X0, 0xB09000
	030 Move X0, [X0+2096]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.String Replace(System.String input, System.String pattern, System.String replacement)

Disassembly:
	0x03633D08 LDR W9, [X20 + 0x10]
	0x03633D0C LDR W8, [X8 + 0x10]
	0x03633D10 SUB W9, W9, W19
	0x03633D14 CMP W9, W8
	0x03633D18 B.GE 0x3633D50
	0x03633D1C MOV W0, W31
	0x03633D20 B 0x3633DE8
	0x03633D24 LDR X0, [X21 + 0x28]
	0x03633D28 CBZ X0, 0x3633DDC
	0x03633D2C LDR W4, [X0 + 0x10]
	0x03633D30 MOV W1, W31
	0x03633D34 MOV X2, X20
	0x03633D38 MOV W3, W19
	0x03633D3C MOV X5, X31
	0x03633D40 BL 0x32262CC
	0x03633D44 CMP W0, 0x0
	0x03633D48 CSET W0, EQ
	0x03633D4C B 0x3633DE8
	0x03633D50 LDR X0, [X21 + 0x40]
	0x03633D54 CBZ X0, 0x3633DDC
	0x03633D58 LDR X8, [X0]
	0x03633D5C LDP X9, X1, [X8 + 0x1D8]
	0x03633D60 BLR X9
	0x03633D64 LDR X8, [X21 + 0x28]
	0x03633D68 CBZ X8, 0x3633DDC
	0x03633D6C MOV X22, X0
	0x03633D70 MOV W23, W31
	0x03633D74 LDR W25, [X8 + 0x10]
	0x03633D78 CMP W23, W25
	0x03633D7C B.GE 0x3633DE0
	0x03633D80 ADD W1, W19, W23

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDAE000
	008 Move X22, 0xAC9000
	009 Move W8, [X23+1324]
	010 Move X22, [X22+1536]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xAC9000
	019 Move X0, [X0+1536]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+1324], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X22]
	029 Move X8, [X0+184]
	030 Move X0, X21
	031 Move X1, X20
	032 Move X2, X19
	033 Move X4, [X8+48]
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move W3, W31
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]

Method: System.String Replace(System.String input, System.String pattern, System.String replacement, System.Text.RegularExpressions.RegexOptions options)

Disassembly:
	0x03633E18 LDR W8, [X8 + 0x10]
	0x03633E1C SUB W9, W2, W3
	0x03633E20 CMP W9, W8
	0x03633E24 B.LT 0x3633E50
	0x03633E28 SUB W2, W2, W8
	0x03633E2C B 0x3633E5C
	0x03633E30 CMP W2, W3
	0x03633E34 B.LT 0x3633E50
	0x03633E38 LDR X8, [X0 + 0x28]
	0x03633E3C CBZ X8, 0x3633E64
	0x03633E40 LDR W8, [X8 + 0x10]
	0x03633E44 SUB W9, W4, W2
	0x03633E48 CMP W9, W8
	0x03633E4C B.GE 0x3633E5C
	0x03633E50 MOV W0, W31
	0x03633E54 LDR X30, [X31], #0x10
	0x03633E58 RET
	0x03633E5C LDR X30, [X31], #0x10
	0x03633E60 B 0x3633CD8
	0x03633E64 BL 0x1C16F20
	0x03633E68 SUB X31, X31, 0x70
	0x03633E6C STP X29, X30, [X31 + 0x10]
	0x03633E70 STP X28, X27, [X31 + 0x20]
	0x03633E74 STP X26, X25, [X31 + 0x30]
	0x03633E78 STP X24, X23, [X31 + 0x40]
	0x03633E7C STP X22, X21, [X31 + 0x50]
	0x03633E80 STP X20, X19, [X31 + 0x60]
	0x03633E84 MOV X21, X0
	0x03633E88 LDR X0, [X0 + 0x28]
	0x03633E8C STR W3, [X31 + 0xC]
	0x03633E90 CBZ X0, 0x3634144
	0x03633E94 LDRB W8, [X21 + 0x38]
	0x03633E98 LDR W27, [X0 + 0x10]
	0x03633E9C MOV W25, W4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDAE000
	009 Move X23, 0xAC9000
	010 Move W8, [X24+1325]
	011 Move X23, [X23+1536]
	012 Move W19, W3
	013 Move X20, X2
	014 Move X21, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xAC9000
	021 Move X0, [X0+1536]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1325], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X23]
	031 Move X8, [X0+184]
	032 Move X0, X22
	033 Move X1, X21
	034 Move X2, X20
	035 Move X4, [X8+48]
	036 Move W3, W19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Call Regex.Replace, X0, X1, X2, X3, X4
	045 Return X0

Method: System.String Replace(System.String input, System.String pattern, System.String replacement, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout)

Disassembly:
	0x03633D84 MOV X0, X20
	0x03633D88 MOV X2, X31
	0x03633D8C BL 0x3222A1C
	0x03633D90 CBZ X22, 0x3633DDC
	0x03633D94 LDR X8, [X22]
	0x03633D98 MOV W1, W0
	0x03633D9C MOV X0, X22
	0x03633DA0 LDP X9, X2, [X8 + 0x1A8]
	0x03633DA4 BLR X9
	0x03633DA8 LDR X8, [X21 + 0x28]
	0x03633DAC CBZ X8, 0x3633DDC
	0x03633DB0 MOV W24, W0
	0x03633DB4 MOV X0, X8
	0x03633DB8 MOV W1, W23
	0x03633DBC MOV X2, X31
	0x03633DC0 BL 0x3222A1C
	0x03633DC4 AND W8, W24, 0xFFFF
	0x03633DC8 CMP W8, W0, UXTH
	0x03633DCC B.NE 0x3633DE0
	0x03633DD0 LDR X8, [X21 + 0x28]
	0x03633DD4 ADD W23, W23, 0x1
	0x03633DD8 CBNZ X8, 0x3633D74
	0x03633DDC BL 0x1C16F20
	0x03633DE0 CMP W23, W25
	0x03633DE4 CSET W0, GE
	0x03633DE8 LDP X20, X19, [X31 + 0x30]
	0x03633DEC LDP X22, X21, [X31 + 0x20]
	0x03633DF0 LDP X24, X23, [X31 + 0x10]
	0x03633DF4 LDP X30, X25, [X31], #0x40
	0x03633DF8 RET
	0x03633DFC STR X30, [X31 - 0x10]!
	0x03633E00 LDRB W8, [X0 + 0x38]
	0x03633E04 CBZ W8, 0x3633E30
	0x03633E08 CMP W4, W2
	0x03633E0C B.LT 0x3633E50
	0x03633E10 LDR X8, [X0 + 0x28]
	0x03633E14 CBZ X8, 0x3633E64

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xDAE000
	010 Move X25, 0xAC9000
	011 Move W8, [X24+1326]
	012 Move X25, [X25+1536]
	013 Move X21, X4
	014 Move W22, W3
	015 Move X19, X2
	016 Move X23, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xAC9000
	023 Move X0, [X0+1536]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+1326], W8
	027 Move X0, [X25]
	028 Call 0x1C17F10
	029 Move W4, 1
	030 Move X1, X23
	031 Move W2, W22
	032 Move X3, X21
	033 Move X24, X0
	034 Call Regex..ctor, X0, X1, X2, X3, X4
	035 Compare X24, 0
	036 JumpIfEqual {50}
	037 Move X0, X24
	038 Move X1, X20
	039 Move X2, X19
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X24, [X31+16]
	045 Move X23, [X31+24]
	046 Move X30, [X31+64]
	047 Move X25, [X31+72]
	048 Call Regex.Replace, X0, X1, X2
	049 Return X0
	050 Call 0x1C17F20

Method: System.String Replace(System.String input, System.String replacement)

Disassembly:
	0x03633EA0 MOV X22, X1
	0x03633EA4 CBZ W8, 0x3633EC0
	0x03633EA8 MOV W23, W31
	0x03633EAC SUB W19, W27, 0x1
	0x03633EB0 SUB W24, W2, W27
	0x03633EB4 SUB W27, W31, W27
	0x03633EB8 MOVN W28, 0x0
	0x03633EBC B 0x3633ED0
	0x03633EC0 SUB W23, W27, 0x1
	0x03633EC4 MOV W19, W31
	0x03633EC8 ADD W24, W23, W2
	0x03633ECC MOVZ W28, 0x1
	0x03633ED0 MOV W1, W23
	0x03633ED4 MOV X2, X31
	0x03633ED8 BL 0x3222A1C
	0x03633EDC CMP W24, W25
	0x03633EE0 STR W0, [X31 + 0x8]
	0x03633EE4 B.GE 0x3634110
	0x03633EE8 LDR W8, [X31 + 0xC]
	0x03633EEC CMP W24, W8
	0x03633EF0 B.LT 0x3634110
	0x03633EF4 CBZ X22, 0x3634144
	0x03633EF8 SUB W8, W31, W28
	0x03633EFC SUB W29, W23, W28
	0x03633F00 SUB W20, W23, W19
	0x03633F04 STP W8, W25, [X31]
	0x03633F08 MOV X0, X22
	0x03633F0C MOV W1, W24

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {17}
	005 Move W8, [X0+32]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 64
	008 Compare TEMP, 64
	009 JumpIfEqual {11}
	010 Move W4, W31
	011 Move W4, [X1+16]
	012 Move TEMP, 0
	013 Not TEMP
	014 Move W3, TEMP
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Move X0, 0xAC6000
	018 Move X0, [X0+1320]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xAF5000
	023 Move X0, [X0+840]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Move X2, X31
	028 Call ArgumentNullException..ctor, X0, X1
	029 Move X0, 0xB09000
	030 Move X0, [X0+2104]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.String Replace(System.String input, System.String replacement, System.Int32 count, System.Int32 startat)

Disassembly:
	0x03633F10 MOV X2, X31
	0x03633F14 BL 0x3222A1C
	0x03633F18 LDRB W8, [X21 + 0x39]
	0x03633F1C MOV W26, W0
	0x03633F20 CBZ W8, 0x3633F50
	0x03633F24 LDR X0, [X21 + 0x40]
	0x03633F28 CBZ X0, 0x3634144
	0x03633F2C LDR X8, [X0]
	0x03633F30 LDP X9, X1, [X8 + 0x1D8]
	0x03633F34 BLR X9
	0x03633F38 CBZ X0, 0x3634144
	0x03633F3C LDR X8, [X0]
	0x03633F40 MOV W1, W26
	0x03633F44 LDP X9, X2, [X8 + 0x1A8]
	0x03633F48 BLR X9
	0x03633F4C MOV W26, W0
	0x03633F50 LDR W8, [X31 + 0x8]
	0x03633F54 AND W9, W26, 0xFFFF
	0x03633F58 CMP W9, W8, UXTH
	0x03633F5C B.NE 0x3634044
	0x03633F60 LDR W8, [X31]
	0x03633F64 MOV W25, W31
	0x03633F68 ADD W19, W8, W24
	0x03633F6C ADDS W31, W20, W25
	0x03633F70 B.EQ 0x3634118
	0x03633F74 ADD W1, W19, W25
	0x03633F78 MOV X0, X22
	0x03633F7C MOV X2, X31
	0x03633F80 BL 0x3222A1C
	0x03633F84 LDRB W8, [X21 + 0x39]
	0x03633F88 MOV W26, W0
	0x03633F8C CBZ W8, 0x3633FBC
	0x03633F90 LDR X0, [X21 + 0x40]
	0x03633F94 CBZ X0, 0x3634144
	0x03633F98 LDR X8, [X0]
	0x03633F9C LDP X9, X1, [X8 + 0x1D8]
	0x03633FA0 BLR X9
	0x03633FA4 CBZ X0, 0x3634144
	0x03633FA8 LDR X8, [X0]
	0x03633FAC MOV W1, W26
	0x03633FB0 LDP X9, X2, [X8 + 0x1A8]
	0x03633FB4 BLR X9
	0x03633FB8 MOV W26, W0
	0x03633FBC LDR X0, [X21 + 0x28]
	0x03633FC0 CBZ X0, 0x3634144
	0x03633FC4 ADD W1, W29, W25
	0x03633FC8 MOV X2, X31
	0x03633FCC BL 0x3222A1C
	0x03633FD0 AND W9, W26, 0xFFFF
	0x03633FD4 CMP W9, W0, UXTH
	0x03633FD8 SUB W25, W25, W28
	0x03633FDC B.EQ 0x3633F6C
	0x03633FE0 LDR X8, [X21 + 0x10]
	0x03633FE4 CBZ X8, 0x3634144

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X1, 0
	007 JumpIfEqual {37}
	008 Compare X2, 0
	009 JumpIfEqual {44}
	010 Move X22, X0
	011 Move W19, W4
	012 Move X8, [X22+48]
	013 Move X4, [X22+56]
	014 Move W20, W3
	015 Move X0, [X0+88]
	016 Move W3, [X22+72]
	017 Move W5, [X22+32]
	018 Move X21, X1
	019 Move X1, X2
	020 Move X2, X8
	021 Move X6, X31
	022 Call RegexReplacement.GetOrCreate, X0, X1, X2, X3, X4, X5
	023 Compare X0, 0
	024 JumpIfEqual {62}
	025 Move X1, X22
	026 Move X2, X21
	027 Move W3, W20
	028 Move W4, W19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X5, X31
	034 Move X30, [X31+48]
	035 Call RegexReplacement.Replace, X0, X1, X2, X3, X4
	036 Return X0
	037 Move X0, 0xAC6000
	038 Move X0, [X0+1320]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0xAF5000
	043 Move X0, [X0+840]
	044 Move X0, 0xAC6000
	045 Move X0, [X0+1320]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X19, X0
	049 Move X0, 0xAF0000
	050 Move X0, [X0+832]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Move X2, X31
	055 Call ArgumentNullException..ctor, X0, X1
	056 Move X0, 0xB09000
	057 Move X0, [X0+2112]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Call 0x1C17DEC
	062 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03633FE8 LDR W11, [X8 + 0x18]
	0x03633FEC ADD W10, W23, W25
	0x03633FF0 CMP W10, W11
	0x03633FF4 B.CS 0x3634148
	0x03633FF8 ADD X8, X8, W10, 0x2, SXTW
	0x03633FFC LDR W8, [X8 + 0x20]
	0x03634000 ANDS W31, W9, 0xFF80
	0x03634004 B.EQ 0x36340B0
	0x03634008 LDR X10, [X21 + 0x20]
	0x0363400C CBZ X10, 0x36340F4
	0x03634010 LDR W12, [X10 + 0x18]
	0x03634014 UBFM W11, W9, 0x8, 0x1F
	0x03634018 CMP W11, W12
	0x0363401C B.CS 0x3634148
	0x03634020 ADD X10, X10, W11, 0x3, UXTW
	0x03634024 LDR X10, [X10 + 0x20]
	0x03634028 CBZ X10, 0x36340F4
	0x0363402C LDR W11, [X10 + 0x18]
	0x03634030 AND W9, W9, 0xFF
	0x03634034 CMP W9, W11
	0x03634038 B.CS 0x3634148
	0x0363403C ADD X9, X10, W9, 0x2, UXTW
	0x03634040 B 0x36340C8
	0x03634044 CMP W9, 0x7F
	0x03634048 B.LS 0x3634090
	0x0363404C LDR X10, [X21 + 0x20]
	0x03634050 MOV W8, W27
	0x03634054 CBZ X10, 0x36340F4
	0x03634058 LDR W11, [X10 + 0x18]
	0x0363405C UBFM W8, W9, 0x8, 0x1F
	0x03634060 CMP W8, W11
	0x03634064 B.CS 0x3634148
	0x03634068 ADD X8, X10, W8, 0x3, UXTW
	0x0363406C LDR X10, [X8 + 0x20]
	0x03634070 MOV W8, W27
	0x03634074 CBZ X10, 0x36340F4
	0x03634078 LDR W11, [X10 + 0x18]
	0x0363407C AND W8, W9, 0xFF
	0x03634080 CMP W8, W11
	0x03634084 B.CS 0x3634148
	0x03634088 ADD X8, X10, W8, 0x2, UXTW
	0x0363408C B 0x36340A8
	0x03634090 LDR X8, [X21 + 0x18]
	0x03634094 CBZ X8, 0x3634144
	0x03634098 LDR W10, [X8 + 0x18]
	0x0363409C CMP W9, W10
	0x036340A0 B.CS 0x3634148
	0x036340A4 ADD X8, X8, W9, 0x2, UXTW
	0x036340A8 LDR W8, [X8 + 0x20]
	0x036340AC B 0x36340F4
	0x036340B0 LDR X10, [X21 + 0x18]
	0x036340B4 CBZ X10, 0x3634144
	0x036340B8 LDR W11, [X10 + 0x18]
	0x036340BC CMP W9, W11
	0x036340C0 B.CS 0x3634148
	0x036340C4 ADD X9, X10, W26, 0x2, UXTH
	0x036340C8 ADD X9, X9, 0x20
	0x036340CC LDR W9, [X9]
	0x036340D0 LDRB W10, [X21 + 0x38]
	0x036340D4 ADD W9, W9, W25
	0x036340D8 CMP W9, W8
	0x036340DC CSET W11, LT
	0x036340E0 CSET W12, GT
	0x036340E4 CMP W10, 0x0
	0x036340E8 CSEL W10, W12, W11, EQ
	0x036340EC CMP W10, 0x0
	0x036340F0 CSEL W8, W9, W8, NE
	0x036340F4 ADD W24, W8, W24
	0x036340F8 LDR W8, [X31 + 0x4]
	0x036340FC CMP W24, W8
	0x03634100 B.GE 0x3634110
	0x03634104 LDR W8, [X31 + 0xC]
	0x03634108 CMP W24, W8
	0x0363410C B.GE 0x3633F08
	0x03634110 MOVN W0, 0x0
	0x03634114 B 0x3634124

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDAE000
	008 Move X20, 0xAC9000
	009 Move X22, 0xB09000
	010 Move X19, 0xB08000
	011 Move X21, 0xAC2000
	012 Move W8, [X23+1327]
	013 Move X20, [X20+1536]
	014 Move X22, [X22+2120]
	015 Move X19, [X19+2128]
	016 Move X21, [X21+1392]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0xB08000
	022 Move X0, [X0+2128]
	023 Call 0x1C17CF4
	024 Move X0, 0xB08000
	025 Move X0, [X0+2120]
	026 Call 0x1C17CF4
	027 Move X0, 0xAC8000
	028 Move X0, [X0+1536]
	029 Call 0x1C17CF4
	030 Move X0, 0xAC2000
	031 Move X0, [X0+1392]
	032 Call 0x1C17CF4
	033 Move X0, 0xAC3000
	034 Move X0, [X0+296]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X23+1327], W8
	038 Move X8, [X20]
	039 Move W9, 15
	040 Move X8, [X8+184]
	041 Move [X8], W9
	042 Move X0, [X22]
	043 Move X22, 0xAC3000
	044 Move X22, [X22+296]
	045 Call 0x1C17F10
	046 Move X2, [X19]
	047 Move W1, 15
	048 Move X19, X0
	049 Call Dictionary`2<CachedCodeEntryKey, Object>..ctor, X0, X1
	050 Move X8, [X20]
	051 Move X8, [X8+184]
	052 Move [X8+8], X19
	053 Move [X8+16], W31
	054 Move X0, [X21]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X8, -45375488
	060 Move V0, [X8+3824]
	061 Move X0, X31
	062 Call TimeSpan.FromMilliseconds, V0
	063 Move X8, [X20]
	064 Move X9, [X8+184]
	065 Move [X9+40], X0
	066 Move X0, [X22]
	067 Move W9, [X0+224]
	068 Compare W9, 0
	069 JumpIfNotEqual {73}
	070 Call 0x1C17DFC
	071 Move X0, [X22]
	072 Move X8, [X20]
	073 Move X9, [X0+184]
	074 Move X8, [X8+184]
	075 Move X9, [X9]
	076 Move [X8+56], X9
	077 Call Regex.InitDefaultMatchTimeout
	078 Move X8, [X20]
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X8, [X8+184]
	084 Move [X8+48], X0
	085 Move X30, [X31+48]
	086 Move X23, [X31+56]
	087 Return 

Method: System.Void ValidateMatchTimeout(System.TimeSpan matchTimeout)

Disassembly:
	0x03634348 LDR X2, [X8 + 0x70]
	0x0363434C BL 0x31347A0
	0x03634350 LDRB W8, [X20 + 0x20]
	0x03634354 CBZ W8, 0x363438C
	0x03634358 LDR X0, [X20 + 0x10]
	0x0363435C CBZ X0, 0x363439C
	0x03634360 LDR W8, [X0 + 0x18]
	0x03634364 SUBS W1, W8, 0x1
	0x03634368 B.LT 0x363438C
	0x0363436C ADRP X8, 0xB07000
	0x03634370 LDR X8, [X8 + 0x8D8]
	0x03634374 LDR X2, [X8]
	0x03634378 BL 0x31344AC
	0x0363437C UBFM X8, X0, 0x10, 0x1F
	0x03634380 CMP W8, W19, UXTH
	0x03634384 B.CC 0x363438C
	0x03634388 STRB W31, [X20 + 0x20]
	0x0363438C LDP X20, X19, [X31 + 0x20]
	0x03634390 LDP X22, X21, [X31 + 0x10]
	0x03634394 LDR X30, [X31], #0x30
	0x03634398 RET
	0x0363439C BL 0x1C16F20
	0x036343A0 STP X30, X23, [X31 - 0x30]!
	0x036343A4 STP X22, X21, [X31 + 0x10]
	0x036343A8 STP X20, X19, [X31 + 0x20]
	0x036343AC ADRP X21, 0xDAC000
	0x036343B0 LDRB W8, [X21 + 0x53C]
	0x036343B4 MOV X20, X1
	0x036343B8 MOV X19, X0
	0x036343BC TBNZ X8, 0x0, 0x36343D4
	0x036343C0 ADRP X0, 0xB07000
	0x036343C4 LDR X0, [X0 + 0x8C8]
	0x036343C8 BL 0x1C16CF4
	0x036343CC MOVZ W8, 0x1
	0x036343D0 STRB W8, [X21 + 0x53C]
	0x036343D4 CBZ X20, 0x363450C
	0x036343D8 LDRB W8, [X20 + 0x20]
	0x036343DC CBZ W8, 0x3634438
	0x036343E0 LDRB W8, [X19 + 0x20]
	0x036343E4 CBZ W8, 0x363443C
	0x036343E8 MOV X0, X19
	0x036343EC BL 0x3634510
	0x036343F0 CMP W0, 0x1
	0x036343F4 B.LT 0x363443C
	0x036343F8 MOV X0, X20
	0x036343FC BL 0x3634510
	0x03634400 CMP W0, 0x1
	0x03634404 B.LT 0x363443C
	0x03634408 MOV X0, X20
	0x0363440C MOV W1, W31
	0x03634410 BL 0x3634558
	0x03634414 MOV X21, X0
	0x03634418 MOV X0, X19
	0x0363441C BL 0x3634510
	0x03634420 SUB W1, W0, 0x1
	0x03634424 MOV X0, X19
	0x03634428 BL 0x3634558
	0x0363442C AND W8, W21, 0xFFFF
	0x03634430 CMP W8, W0, LSR
	0x03634434 B.HI 0x363443C
	0x03634438 STRB W31, [X19 + 0x20]
	0x0363443C MOV X0, X20
	0x03634440 BL 0x3634510
	0x03634444 CMP W0, 0x1
	0x03634448 B.LT 0x36344D4
	0x0363444C ADRP X23, 0xB07000
	0x03634450 LDR X23, [X23 + 0x8C8]
	0x03634454 MOV W21, W31
	0x03634458 LDR X22, [X19 + 0x10]
	0x0363445C MOV X0, X20
	0x03634460 MOV W1, W21
	0x03634464 BL 0x3634558
	0x03634468 CBZ X22, 0x363450C
	0x0363446C LDR W10, [X22 + 0x1C]
	0x03634470 LDR X8, [X22 + 0x10]
	0x03634474 LDR X9, [X23]
	0x03634478 ADD W10, W10, 0x1
	0x0363447C STR W10, [X22 + 0x1C]
	0x03634480 CBZ X8, 0x363450C
	0x03634484 LDRSW X10, [X22 + 0x18]
	0x03634488 LDR W11, [X8 + 0x18]
	0x0363448C CMP W10, W11
	0x03634490 B.CS 0x36344A8
	0x03634494 ADD W9, W10, 0x1
	0x03634498 ADD X8, X8, X10, 0x2, LSL
	0x0363449C STR W9, [X22 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xDAD000
	007 Move X21, 0xAC8000
	008 Move W8, [X20+1328]
	009 Move X21, [X21+1536]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAC8000
	016 Move X0, [X0+1536]
	017 Call 0x1C17CF4
	018 Move X0, 0xAC2000
	019 Move X0, [X0+1392]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1328], W8
	023 Move X0, [X21]
	024 Move X22, 0xAC2000
	025 Move W8, [X0+224]
	026 Move X22, [X22+1392]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X21]
	031 Move X8, [X22]
	032 Move X9, [X0+184]
	033 Move W10, [X8+224]
	034 Move X20, [X9+56]
	035 Compare W10, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X19
	041 Move X2, X31
	042 Call TimeSpan.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {84}
	047 Move X0, [X22]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X8, [X0+184]
	054 Move X1, X19
	055 Move X2, X31
	056 Move X0, [X8]
	057 Call TimeSpan.op_LessThan, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {90}
	062 Move X0, [X21]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X21]
	068 Move X8, [X22]
	069 Move X9, [X0+184]
	070 Move W10, [X8+224]
	071 Move X20, [X9+40]
	072 Compare W10, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Move X0, X19
	077 Move X1, X20
	078 Move X2, X31
	079 Call TimeSpan.op_LessThanOrEqual, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {90}
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Return 
	090 Move X0, 0xAC8000
	091 Move X0, [X0+1888]
	092 Call 0x1C17D08
	093 Call 0x1C17F10
	094 Move X19, X0
	095 Move X0, 0xB08000
	096 Move X0, [X0+2160]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X19
	100 Move X2, X31
	101 Call ArgumentOutOfRangeException..ctor, X0, X1
	102 Move X0, 0xB08000
	103 Move X0, [X0+2168]
	104 Call 0x1C17D08
	105 Move X1, X0
	106 Move X0, X19
	107 Call 0x1C17DEC

Method: System.TimeSpan InitDefaultMatchTimeout()

Disassembly:
	0x03634118 LDRB W8, [X21 + 0x38]
	0x0363411C ADD W8, W8, W24
	0x03634120 ADD W0, W8, W25
	0x03634124 LDP X20, X19, [X31 + 0x60]
	0x03634128 LDP X22, X21, [X31 + 0x50]
	0x0363412C LDP X24, X23, [X31 + 0x40]
	0x03634130 LDP X26, X25, [X31 + 0x30]
	0x03634134 LDP X28, X27, [X31 + 0x20]
	0x03634138 LDP X29, X30, [X31 + 0x10]
	0x0363413C ADD X31, X31, 0x70
	0x03634140 RET
	0x03634144 BL 0x1C16F20
	0x03634148 BL 0x1C16F28
	0x0363414C STP X30, X23, [X31 - 0x30]!
	0x03634150 STP X22, X21, [X31 + 0x10]
	0x03634154 STP X20, X19, [X31 + 0x20]
	0x03634158 ADRP X23, 0xDAC000
	0x0363415C ADRP X22, 0xB07000
	0x03634160 ADRP X20, 0xB07000
	0x03634164 ADRP X21, 0xABF000
	0x03634168 LDRB W8, [X23 + 0x53B]
	0x0363416C LDR X22, [X22 + 0x8B8]
	0x03634170 LDR X20, [X20 + 0x8C0]
	0x03634174 LDR X21, [X21 + 0x8F0]
	0x03634178 MOV X19, X0
	0x0363417C TBNZ X8, 0x0, 0x36341AC
	0x03634180 ADRP X0, 0xB07000
	0x03634184 LDR X0, [X0 + 0x8C0]
	0x03634188 BL 0x1C16CF4
	0x0363418C ADRP X0, 0xB07000
	0x03634190 LDR X0, [X0 + 0x8B8]
	0x03634194 BL 0x1C16CF4
	0x03634198 ADRP X0, 0xABF000
	0x0363419C LDR X0, [X0 + 0x8F0]
	0x036341A0 BL 0x1C16CF4
	0x036341A4 MOVZ W8, 0x1
	0x036341A8 STRB W8, [X23 + 0x53B]
	0x036341AC MOV X0, X19
	0x036341B0 MOV X1, X31
	0x036341B4 BL 0x33BDD8C
	0x036341B8 LDR X0, [X22]
	0x036341BC BL 0x1C16F10
	0x036341C0 LDR X2, [X20]
	0x036341C4 MOVZ W1, 0x6
	0x036341C8 MOV X20, X0
	0x036341CC BL 0x3134010
	0x036341D0 MOVZ W8, 0x1
	0x036341D4 STR X20, [X19 + 0x10]
	0x036341D8 STRB W8, [X19 + 0x20]
	0x036341DC LDR X0, [X21]
	0x036341E0 BL 0x1C16F10
	0x036341E4 MOV X1, X31
	0x036341E8 MOV X20, X0
	0x036341EC BL 0x3231AC4
	0x036341F0 STR X20, [X19 + 0x18]
	0x036341F4 LDP X20, X19, [X31 + 0x20]
	0x036341F8 LDP X22, X21, [X31 + 0x10]
	0x036341FC LDP X30, X23, [X31], #0x30
	0x03634200 RET
	0x03634204 STP X30, X23, [X31 - 0x30]!
	0x03634208 STP X22, X21, [X31 + 0x10]
	0x0363420C STP X20, X19, [X31 + 0x20]
	0x03634210 AND W23, W1, 0x1
	0x03634214 MOV X1, X31
	0x03634218 MOV X19, X4
	0x0363421C MOV X20, X3
	0x03634220 MOV X21, X2
	0x03634224 MOV X22, X0
	0x03634228 BL 0x33BDD8C
	0x0363422C MOVZ W8, 0x1
	0x03634230 STP X21, X20, [X22 + 0x10]
	0x03634234 STRB W23, [X22 + 0x21]
	0x03634238 STRB W8, [X22 + 0x20]
	0x0363423C STR X19, [X22 + 0x28]
	0x03634240 LDP X20, X19, [X31 + 0x20]
	0x03634244 LDP X22, X21, [X31 + 0x10]
	0x03634248 LDP X30, X23, [X31], #0x30
	0x0363424C RET
	0x03634250 LDRB W8, [X0 + 0x21]
	0x03634254 CBZ W8, 0x3634260
	0x03634258 MOV W0, W31
	0x0363425C RET
	0x03634260 LDR X8, [X0 + 0x28]
	0x03634264 CMP X8, 0x0
	0x03634268 CSET W0, EQ
	0x0363426C RET
	0x03634270 AND W8, W1, 0x1
	0x03634274 STRB W8, [X0 + 0x21]
	0x03634278 RET
	0x0363427C MOV W2, W1
	0x03634280 B 0x3634284
	0x03634284 STR X30, [X31 - 0x30]!
	0x03634288 STP X22, X21, [X31 + 0x10]
	0x0363428C STP X20, X19, [X31 + 0x20]
	0x03634290 ADRP X21, 0xDAC000
	0x03634294 LDRB W8, [X21 + 0x53E]
	0x03634298 MOV W22, W2
	0x0363429C MOV W19, W1
	0x036342A0 MOV X20, X0
	0x036342A4 TBNZ X8, 0x0, 0x36342D4
	0x036342A8 ADRP X0, 0xB07000
	0x036342AC LDR X0, [X0 + 0x8C8]
	0x036342B0 BL 0x1C16CF4
	0x036342B4 ADRP X0, 0xB07000
	0x036342B8 LDR X0, [X0 + 0x8D0]
	0x036342BC BL 0x1C16CF4
	0x036342C0 ADRP X0, 0xB07000
	0x036342C4 LDR X0, [X0 + 0x8D8]
	0x036342C8 BL 0x1C16CF4
	0x036342CC MOVZ W8, 0x1
	0x036342D0 STRB W8, [X21 + 0x53E]
	0x036342D4 LDR X21, [X20 + 0x10]
	0x036342D8 ADD X0, X31, 0xC
	0x036342DC MOV W1, W19
	0x036342E0 MOV W2, W22
	0x036342E4 MOV X3, X31
	0x036342E8 STR W31, [X31 + 0xC]
	0x036342EC BL 0x363B668
	0x036342F0 CBZ X21, 0x363439C
	0x036342F4 ADRP X9, 0xB07000
	0x036342F8 LDR X9, [X9 + 0x8C8]
	0x036342FC LDR W10, [X21 + 0x1C]
	0x03634300 LDR W1, [X31 + 0xC]
	0x03634304 LDR X8, [X21 + 0x10]
	0x03634308 LDR X9, [X9]
	0x0363430C ADD W10, W10, 0x1
	0x03634310 STR W10, [X21 + 0x1C]
	0x03634314 CBZ X8, 0x363439C
	0x03634318 LDRSW X10, [X21 + 0x18]
	0x0363431C LDR W11, [X8 + 0x18]
	0x03634320 CMP W10, W11
	0x03634324 B.CS 0x363433C
	0x03634328 ADD W9, W10, 0x1
	0x0363432C ADD X8, X8, X10, 0x2, LSL
	0x03634330 STR W9, [X21 + 0x18]
	0x03634334 STR W1, [X8 + 0x20]
	0x03634338 B 0x3634350
	0x0363433C LDR X8, [X9 + 0x20]
	0x03634340 MOV X0, X21
	0x03634344 LDR X8, [X8 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xDAD000
	005 Move W8, [X19+1329]
	006 Move TEMP, X8
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {21}
	010 Move X0, 0xAC8000
	011 Move X0, [X0+1536]
	012 Call 0x1C17CF4
	013 Move X0, 0xAC2000
	014 Move X0, [X0+1392]
	015 Call 0x1C17CF4
	016 Move X0, 0xB08000
	017 Move X0, [X0+2136]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+1329], W8
	021 Move X0, X31
	022 Call AppDomain.get_CurrentDomain
	023 Compare X0, 0
	024 JumpIfEqual {64}
	025 Move X8, 0xB08000
	026 Move X8, [X8+2136]
	027 Move X20, 0xAC8000
	028 Move X2, X31
	029 Move X1, [X8]
	030 Move X20, [X20+1536]
	031 Call AppDomain.GetData, X0, X1
	032 Compare X0, 0
	033 JumpIfEqual {51}
	034 Move X8, 0xAC2000
	035 Move X8, [X8+1392]
	036 Move X9, [X0]
	037 Move X19, X0
	038 Move X8, [X8]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, X19
	041 Call 0x1C17E08
	042 Move X8, X0
	043 Move X0, [X20]
	044 Move X19, [X8]
	045 Move W9, [X0+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X19
	050 Call Regex.ValidateMatchTimeout, X0
	051 Move X0, [X20]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {57}
	055 Call 0x1C17DFC
	056 Move X0, [X20]
	057 Move X8, [X0+184]
	058 Move X19, [X8+56]
	059 Move X0, X19
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move X30, [X31+32]
	063 Return X0
	064 Call 0x1C17F20
	065 Move X0, 0xB08000
	066 Move X0, [X0+2144]
	067 Call 0x1C17D08
	068 Move X20, X0
	069 Move X0, 0xB08000
	070 Move X0, [X0+2136]
	071 Call 0x1C17D08
	072 Move X1, X0
	073 Move X0, X20
	074 Move X2, X19
	075 Move X3, X31
	076 Call SR.Format, X0, X1, X2
	077 Move X19, X0
	078 Move X0, 0xAC8000
	079 Move X0, [X0+3080]
	080 Call 0x1C17D08
	081 Call 0x1C17F10
	082 Move X1, X19
	083 Move X2, X31
	084 Move X20, X0
	085 Call InvalidCastException..ctor, X0, X1
	086 Move X0, 0xB08000
	087 Move X0, [X0+2152]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X20
	091 Call 0x1C17DEC
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X20, X0
	094 Move X0, X20
	095 Call 0x3EB2AD0
	096 Move X20, X0
	097 Move X0, 0xAC8000
	098 Move X0, [X0+1888]
	099 Call 0x1C17D08
	100 Move X8, [X20]
	101 Move X1, [X8]
	102 Call 0x1C18270
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {136}
	107 Call 0x3EB2AE0
	108 Move [X31+8], X19
	109 Move X0, 0xAC2000
	110 Move X0, [X0+1392]
	111 Call 0x1C17D08
	112 Add X1, X31, 8
	113 Call 0x1C17E04
	114 Move X19, X0
	115 Move X0, 0xB08000
	116 Move X0, [X0+2144]
	117 Call 0x1C17D08
	118 Move X20, X0
	119 Move X0, 0xB08000
	120 Move X0, [X0+2136]
	121 Call 0x1C17D08
	122 Move X1, X0
	123 Move X0, X20
	124 Move X2, X19
	125 Move X3, X31
	126 Call SR.Format, X0, X1, X2
	127 Move X19, X0
	128 Move X0, 0xAC8000
	129 Move X0, [X0+1888]
	130 Call 0x1C17D08
	131 Call 0x1C17F10
	132 Move X1, X19
	133 Move X2, X31
	134 Move X20, X0
	135 Call ArgumentOutOfRangeException..ctor, X0, X1
	136 Move W0, 8
	137 Call 0x3EB2AF0
	138 Move X8, [X20]
	139 Move [X0], X8
	140 Move X1, 0x881000
	141 Add X1, X1, 3672
	142 Move X2, X31
	143 Call 0x3EB2B00
	144 Move X20, X0
	145 Call 0x3EB2AE0
	146 Move X0, X20
	147 Call 0x1D2D690
	148 Call 0x1991590

Method: System.Void .ctor(System.String pattern)

Disassembly:
	0x036344A0 STR W0, [X8 + 0x20]
	0x036344A4 B 0x36344C0
	0x036344A8 LDR X8, [X9 + 0x20]
	0x036344AC AND X1, X0, 0x0
	0x036344B0 MOV X0, X22
	0x036344B4 LDR X8, [X8 + 0xC0]
	0x036344B8 LDR X2, [X8 + 0x70]
	0x036344BC BL 0x31347A0
	0x036344C0 MOV X0, X20
	0x036344C4 ADD W21, W21, 0x1
	0x036344C8 BL 0x3634510
	0x036344CC CMP W21, W0
	0x036344D0 B.LT 0x3634458
	0x036344D4 LDR X0, [X20 + 0x18]
	0x036344D8 CBZ X0, 0x363450C
	0x036344DC LDR X8, [X0]
	0x036344E0 LDR X19, [X19 + 0x18]
	0x036344E4 LDP X9, X1, [X8 + 0x168]
	0x036344E8 BLR X9
	0x036344EC CBZ X19, 0x363450C
	0x036344F0 MOV X1, X0
	0x036344F4 MOV X0, X19
	0x036344F8 LDP X20, X19, [X31 + 0x20]
	0x036344FC LDP X22, X21, [X31 + 0x10]
	0x03634500 MOV X2, X31
	0x03634504 LDP X30, X23, [X31], #0x30
	0x03634508 B 0x32333E0
	0x0363450C BL 0x1C16F20
	0x03634510 STR X30, [X31 - 0x20]!
	0x03634514 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xDAD000
	007 Move X21, 0xAC8000
	008 Move W8, [X22+1330]
	009 Move X21, [X21+1536]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAC8000
	017 Move X0, [X0+1536]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1330], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X3, [X8+48]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W2, W31
	036 Move W4, W31
	037 Move X30, [X31+48]
	038 Call Regex..ctor, X0, X1, X2, X3, X4
	039 Return 

Method: System.Void .ctor(System.String pattern, System.Text.RegularExpressions.RegexOptions options)

Disassembly:
	0x03634518 ADRP X20, 0xDAC000
	0x0363451C LDRB W8, [X20 + 0x551]
	0x03634520 MOV X19, X0
	0x03634524 TBNZ X8, 0x0, 0x363453C
	0x03634528 ADRP X0, 0xB07000
	0x0363452C LDR X0, [X0 + 0x8D0]
	0x03634530 BL 0x1C16CF4
	0x03634534 MOVZ W8, 0x1
	0x03634538 STRB W8, [X20 + 0x551]
	0x0363453C LDR X8, [X19 + 0x10]
	0x03634540 CBZ X8, 0x3634554
	0x03634544 LDR W0, [X8 + 0x18]
	0x03634548 LDP X20, X19, [X31 + 0x10]
	0x0363454C LDR X30, [X31], #0x20
	0x03634550 RET
	0x03634554 BL 0x1C16F20
	0x03634558 STP X30, X21, [X31 - 0x20]!
	0x0363455C STP X20, X19, [X31 + 0x10]
	0x03634560 ADRP X21, 0xDAC000
	0x03634564 LDRB W8, [X21 + 0x553]
	0x03634568 MOV W19, W1
	0x0363456C MOV X20, X0
	0x03634570 TBNZ X8, 0x0, 0x3634588
	0x03634574 ADRP X0, 0xB07000
	0x03634578 LDR X0, [X0 + 0x8D8]
	0x0363457C BL 0x1C16CF4
	0x03634580 MOVZ W8, 0x1
	0x03634584 STRB W8, [X21 + 0x553]
	0x03634588 LDR X0, [X20 + 0x10]
	0x0363458C CBZ X0, 0x36345B4
	0x03634590 ADRP X8, 0xB07000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDAD000
	008 Move X22, 0xAC8000
	009 Move W8, [X23+1331]
	010 Move X22, [X22+1536]
	011 Move W19, W2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xAC8000
	019 Move X0, [X0+1536]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+1331], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X22]
	029 Move X8, [X0+184]
	030 Move X0, X21
	031 Move X1, X20
	032 Move W2, W19
	033 Move X3, [X8+48]
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move W4, W31
	039 Move X30, [X31+48]
	040 Move X23, [X31+56]
	041 Call Regex..ctor, X0, X1, X2, X3, X4
	042 Return 

Method: System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context)

Disassembly:
	0x03634594 LDR X8, [X8 + 0x8D8]
	0x03634598 MOV W1, W19
	0x0363459C LDR X2, [X8]
	0x036345A0 BL 0x31344AC
	0x036345A4 LDP X20, X19, [X31 + 0x10]
	0x036345A8 AND X0, X0, 0x0
	0x036345AC LDP X30, X21, [X31], #0x20
	0x036345B0 RET
	0x036345B4 BL 0x1C16F20
	0x036345B8 SUB X31, X31, 0x50
	0x036345BC STP X30, X25, [X31 + 0x10]
	0x036345C0 STP X24, X23, [X31 + 0x20]
	0x036345C4 STP X22, X21, [X31 + 0x30]
	0x036345C8 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0xAEB000
	004 Move X0, [X0+3152]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call PlatformNotSupportedException..ctor, X0
	010 Move X0, 0xB08000
	011 Move X0, [X0+2176]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Void .ctor(System.String pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout, System.Boolean addToCache)

Disassembly:
	0x036336B8 BL 0x3379A44
	0x036336BC ADRP X0, 0xB08000
	0x036336C0 LDR X0, [X0 + 0x8A8]
	0x036336C4 BL 0x1C16D08
	0x036336C8 MOV X1, X0
	0x036336CC MOV X0, X19
	0x036336D0 BL 0x1C16DEC
	0x036336D4 LDRB W8, [X0 + 0x20]
	0x036336D8 UBFM W0, W8, 0x6, 0x6
	0x036336DC RET
	0x036336E0 LDR X0, [X0 + 0x18]
	0x036336E4 RET
	0x036336E8 LDRB W8, [X0 + 0x21]
	0x036336EC UBFM W0, W8, 0x1, 0x1
	0x036336F0 RET
	0x036336F4 SUB X31, X31, 0x40
	0x036336F8 STP X30, X21, [X31 + 0x20]
	0x036336FC STP X20, X19, [X31 + 0x30]
	0x03633700 ADRP X21, 0xDAD000
	0x03633704 LDRB W8, [X21 + 0x539]
	0x03633708 MOV X20, X1
	0x0363370C MOV X19, X0
	0x03633710 TBNZ X8, 0x0, 0x3633728
	0x03633714 ADRP X0, 0xB08000
	0x03633718 LDR X0, [X0 + 0x8B0]
	0x0363371C BL 0x1C16CF4
	0x03633720 MOVZ W8, 0x1
	0x03633724 STRB W8, [X21 + 0x539]
	0x03633728 CBZ X20, 0x3633744
	0x0363372C ADRP X8, 0xB08000
	0x03633730 LDR X8, [X8 + 0x8B0]
	0x03633734 LDR X9, [X20]
	0x03633738 LDR X8, [X8]
	0x0363373C CMP X9, X8
	0x03633740 B.EQ 0x363374C
	0x03633744 MOV W0, W31
	0x03633748 B 0x3633770
	0x0363374C MOV X0, X20
	0x03633750 BL 0x1C16E08
	0x03633754 LDR V0, [X0]
	0x03633758 LDR X8, [X0 + 0x10]
	0x0363375C ADD X1, X31, 0x0
	0x03633760 MOV X0, X19
	0x03633764 STR V0, [X31]
	0x03633768 STR X8, [X31 + 0x10]
	0x0363376C BL 0x3633784
	0x03633770 LDP X20, X19, [X31 + 0x30]
	0x03633774 LDP X30, X21, [X31 + 0x20]
	0x03633778 AND W0, W0, 0x1
	0x0363377C ADD X31, X31, 0x40
	0x03633780 RET
	0x03633784 STR X30, [X31 - 0x20]!
	0x03633788 STP X20, X19, [X31 + 0x10]
	0x0363378C MOV X20, X0
	0x03633790 LDR X0, [X0 + 0x10]
	0x03633794 CBZ X0, 0x36337E8
	0x03633798 MOV X19, X1
	0x0363379C LDR X1, [X1 + 0x10]
	0x036337A0 MOV X2, X31
	0x036337A4 BL 0x322693C
	0x036337A8 TBZ X0, 0x0, 0x36337D8
	0x036337AC LDR W8, [X20]
	0x036337B0 LDR W9, [X19]
	0x036337B4 CMP W8, W9
	0x036337B8 B.NE 0x36337D8
	0x036337BC LDR X0, [X20 + 0x8]
	0x036337C0 CBZ X0, 0x36337E8
	0x036337C4 LDR X1, [X19 + 0x8]
	0x036337C8 LDP X20, X19, [X31 + 0x10]
	0x036337CC MOV X2, X31
	0x036337D0 LDR X30, [X31], #0x20
	0x036337D4 B 0x322693C
	0x036337D8 LDP X20, X19, [X31 + 0x10]
	0x036337DC MOV W0, W31
	0x036337E0 LDR X30, [X31], #0x20
	0x036337E4 RET
	0x036337E8 BL 0x1C16F20
	0x036337EC STR X30, [X31 - 0x20]!
	0x036337F0 STP X20, X19, [X31 + 0x10]
	0x036337F4 MOV X19, X0
	0x036337F8 LDR X0, [X0 + 0x8]
	0x036337FC CBZ X0, 0x3633840
	0x03633800 LDR X8, [X0]
	0x03633804 LDR W20, [X19]
	0x03633808 LDP X9, X1, [X8 + 0x158]
	0x0363380C BLR X9
	0x03633810 LDR X8, [X19 + 0x10]
	0x03633814 CBZ X8, 0x3633840
	0x03633818 LDR X9, [X8]
	0x0363381C MOV W19, W0
	0x03633820 MOV X0, X8
	0x03633824 LDP X10, X1, [X9 + 0x158]
	0x03633828 BLR X10
	0x0363382C EOR W8, W19, W20, 0x0
	0x03633830 LDP X20, X19, [X31 + 0x10]
	0x03633834 EOR W0, W8, W0, 0x0
	0x03633838 LDR X30, [X31], #0x20
	0x0363383C RET
	0x03633840 BL 0x1C16F20
	0x03633844 SUB X31, X31, 0x70
	0x03633848 STP X29, X30, [X31 + 0x10]
	0x0363384C STP X28, X27, [X31 + 0x20]
	0x03633850 STP X26, X25, [X31 + 0x30]
	0x03633854 STP X24, X23, [X31 + 0x40]
	0x03633858 STP X22, X21, [X31 + 0x50]
	0x0363385C STP X20, X19, [X31 + 0x60]
	0x03633860 ADRP X24, 0xDAD000
	0x03633864 LDRB W8, [X24 + 0x53A]
	0x03633868 MOV X22, X4
	0x0363386C MOV W21, W3
	0x03633870 MOV W23, W2
	0x03633874 MOV X20, X1
	0x03633878 MOV X19, X0
	0x0363387C TBNZ X8, 0x0, 0x36338A0
	0x03633880 ADRP X0, 0xAF8000
	0x03633884 LDR X0, [X0 + 0xDA0]
	0x03633888 BL 0x1C16CF4
	0x0363388C ADRP X0, 0xAC1000
	0x03633890 LDR X0, [X0 + 0xE58]
	0x03633894 BL 0x1C16CF4
	0x03633898 MOVZ W8, 0x1
	0x0363389C STRB W8, [X24 + 0x53A]
	0x036338A0 MOV X0, X19
	0x036338A4 MOV X1, X31
	0x036338A8 BL 0x33BDD8C
	0x036338AC TBZ X23, 0x0, 0x3633948
	0x036338B0 CBZ X20, 0x3633CD4
	0x036338B4 LDR W0, [X20 + 0x10]
	0x036338B8 MOV X1, X31
	0x036338BC BL 0x3235A9C
	0x036338C0 LDR W8, [X20 + 0x10]
	0x036338C4 MOV X24, X0
	0x036338C8 CMP W8, 0x1
	0x036338CC B.LT 0x3633938
	0x036338D0 CBZ X22, 0x3633CD4
	0x036338D4 MOV W25, W31
	0x036338D8 LDR X8, [X22]
	0x036338DC MOV X0, X22
	0x036338E0 LDP X9, X1, [X8 + 0x1D8]
	0x036338E4 BLR X9
	0x036338E8 MOV X26, X0
	0x036338EC MOV X0, X20
	0x036338F0 MOV W1, W25
	0x036338F4 MOV X2, X31
	0x036338F8 BL 0x3222A1C
	0x036338FC CBZ X26, 0x3633CD4
	0x03633900 LDR X8, [X26]
	0x03633904 MOV W1, W0
	0x03633908 MOV X0, X26
	0x0363390C LDP X9, X2, [X8 + 0x1A8]
	0x03633910 BLR X9
	0x03633914 CBZ X24, 0x3633CD4
	0x03633918 MOV W1, W0
	0x0363391C MOV X0, X24
	0x03633920 MOV X2, X31
	0x03633924 BL 0x3233D30
	0x03633928 LDR W8, [X20 + 0x10]
	0x0363392C ADD W25, W25, 0x1
	0x03633930 CMP W25, W8
	0x03633934 B.LT 0x36338D8
	0x03633938 MOV X0, X24
	0x0363393C MOV X1, X31
	0x03633940 BL 0x3235BE8
	0x03633944 MOV X20, X0
	0x03633948 AND W8, W23, 0x1
	0x0363394C AND W9, W21, 0x1
	0x03633950 STR X20, [X19 + 0x28]
	0x03633954 STRB W9, [X19 + 0x38]
	0x03633958 STRB W8, [X19 + 0x39]
	0x0363395C STR X22, [X19 + 0x40]
	0x03633960 CBZ X20, 0x3633CD4
	0x03633964 ADRP X9, 0xAC1000
	0x03633968 LDR X9, [X9 + 0xE58]
	0x0363396C LDR W1, [X20 + 0x10]
	0x03633970 ANDS W31, W21, 0x1
	0x03633974 MOVN W8, 0x0
	0x03633978 LDR X0, [X9]
	0x0363397C CSNEG W27, W8, W8, NE
	0x03633980 SUB W8, W1, 0x1
	0x03633984 CSEL W21, W31, W8, NE
	0x03633988 CSINV W28, W1, W31, NE
	0x0363398C BL 0x1C16D6C
	0x03633990 STR X0, [X19 + 0x10]
	0x03633994 MOV X0, X20
	0x03633998 MOV W1, W21
	0x0363399C MOV X2, X31
	0x036339A0 BL 0x3222A1C
	0x036339A4 LDR X8, [X19 + 0x10]
	0x036339A8 CBZ X8, 0x3633CD4
	0x036339AC LDR W9, [X8 + 0x18]
	0x036339B0 CMP W21, W9
	0x036339B4 B.CS 0x3633CD0
	0x036339B8 SUB W29, W21, W27
	0x036339BC ADD X8, X8, W21, 0x2, SXTW
	0x036339C0 CMP W29, W28
	0x036339C4 STR W27, [X8 + 0x20]
	0x036339C8 B.EQ 0x3633AD4
	0x036339CC MOV W22, W0
	0x036339D0 SUB W8, W31, W28
	0x036339D4 MOV W23, W29
	0x036339D8 STP W0, W8, [X31]
	0x036339DC STR X19, [X31 + 0x8]
	0x036339E0 MOV X0, X20
	0x036339E4 MOV W1, W23
	0x036339E8 MOV X2, X31
	0x036339EC BL 0x3222A1C
	0x036339F0 AND W8, W0, 0xFFFF
	0x036339F4 CMP W8, W22, UXTH
	0x036339F8 B.NE 0x3633A90
	0x036339FC LDR W8, [X31 + 0x4]
	0x03633A00 MOV W19, W28
	0x03633A04 MOV W26, W31
	0x03633A08 ADD W28, W8, W23
	0x03633A0C ADD W24, W21, W26
	0x03633A10 MOV X0, X20
	0x03633A14 MOV W1, W24
	0x03633A18 MOV X2, X31
	0x03633A1C ADD W25, W23, W26
	0x03633A20 BL 0x3222A1C
	0x03633A24 AND W22, W0, 0xFFFF
	0x03633A28 MOV X0, X20
	0x03633A2C MOV W1, W25
	0x03633A30 MOV X2, X31
	0x03633A34 BL 0x3222A1C

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+80], X30
	003 Move [X31+96], X26
	004 Move [X31+104], X25
	005 Move [X31+112], X24
	006 Move [X31+120], X23
	007 Move [X31+128], X22
	008 Move [X31+136], X21
	009 Move [X31+144], X20
	010 Move [X31+152], X19
	011 Move X24, 0xDAE000
	012 Move W8, [X24+1332]
	013 Move W22, W4
	014 Move X23, X3
	015 Move W21, W2
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0xAC3000
	023 Move X0, [X0+3144]
	024 Call 0x1C17CF4
	025 Move X0, 0xB09000
	026 Move X0, [X0+2056]
	027 Call 0x1C17CF4
	028 Move X0, 0xAC9000
	029 Move X0, [X0+1536]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+1332], W8
	033 Move X0, X19
	034 Move X1, X31
	035 Call Object..ctor, X0
	036 Compare X20, 0
	037 JumpIfEqual {261}
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move TEMP, X21
	040 And TEMP, TEMP, 256
	041 Compare TEMP, 256
	042 JumpIfNotEqual {49}
	043 Move TEMP, 779
	044 Not TEMP
	045 Move W8, TEMP
	046 And W8, W21, W8
	047 Compare W8, 0
	048 JumpIfNotEqual {248}
	049 Move X25, 0xAC9000
	050 Move X25, [X25+1536]
	051 Move X24, 0xAC3000
	052 Move X0, [X25]
	053 Move W8, [X0+224]
	054 Move X24, [X24+3144]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X23
	059 Call Regex.ValidateMatchTimeout, X0
	060 Move [X19+32], W21
	061 Move [X19+16], X23
	062 Move [X19+24], X20
	063 Move X0, [X24]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X31
	069 Move TEMP, X21
	070 And TEMP, TEMP, 512
	071 Compare TEMP, 512
	072 JumpIfEqual {76}
	073 Call CultureInfo.get_CurrentCulture
	074 Compare X0, 0
	075 JumpIfNotEqual {79}
	076 Call CultureInfo.get_InvariantCulture
	077 Compare X0, 0
	078 JumpIfEqual {260}
	079 Move X8, [X0]
	080 Move X9, [X8+360]
	081 Move X1, [X8+368]
	082 NotImplemented "Instruction BLR not yet implemented."
	083 Move X26, 0xDAE000
	084 Move W8, [X26+1368]
	085 Move X23, X0
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0xAC9000
	089 Move X0, [X0+1536]
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X26+1368], W8
	093 Move X0, [X25]
	094 Move W8, [X0+224]
	095 Compare W8, 0
	096 JumpIfNotEqual {99}
	097 Call 0x1C17DFC
	098 Move X0, [X25]
	099 Move X8, [X0+184]
	100 Move X24, [X8+24]
	101 Compare X24, 0
	102 JumpIfEqual {119}
	103 Move X8, [X24+48]
	104 Move V0, [X24+2]
	105 Add X0, X31, 32
	106 Add X1, X31, 56
	107 Move [X31+56], W21
	108 Move [X31+60], W31
	109 Move [X31+48], X8
	110 Move [X31+2], V0
	111 Move [X31+64], X23
	112 Move [X31+72], X20
	113 Call CachedCodeEntryKey.Equals, X0, X1
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfEqual {139}
	118 Move X0, [X25]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {124}
	122 Call 0x1C17DFC
	123 Move X0, [X25]
	124 Move X8, [X0+184]
	125 Move W8, [X8]
	126 Compare W8, 0
	127 JumpIfEqual {153}
	128 Add X1, X31, 8
	129 Move X0, X19
	130 Move W2, W31
	131 Move [X31+8], W21
	132 Move [X31+12], W31
	133 Move [X31+16], X23
	134 Move [X31+24], X20
	135 Call Regex.GetCachedCodeEntryInternal, X0, X1, X2
	136 Move X24, X0
	137 Compare X0, 0
	138 JumpIfEqual {153}
	139 Move V0, [X24+4]
	140 Move W9, 1
	141 Move [X19+3], V0
	142 Move X8, [X24+80]
	143 Move [X19+64], X8
	144 Move W8, [X24+88]
	145 Move [X19+72], W8
	146 Move X8, [X24+56]
	147 Move [X19+96], X8
	148 Move X8, [X24+96]
	149 Move [X19+80], X8
	150 Move X8, [X24+104]
	151 Move [X19+104], W9
	152 Move [X19+88], X8
	153 Move X8, 0xB09000
	154 Move X8, [X8+2056]
	155 Move W24, [X19+32]
	156 Move X0, [X8]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move X0, X20
	162 Move W1, W24
	163 Move X2, X31
	164 Call RegexParser.Parse, X0, X1
	165 Compare X0, 0
	166 JumpIfEqual {260}
	167 Move X8, [X0+48]
	168 Move X1, X31
	169 Move [X19+56], X8
	170 Move X8, [X0+56]
	171 Move [X19+64], X8
	172 Call RegexWriter.Write, X0
	173 Move [X19+96], X0
	174 Compare X0, 0
	175 JumpIfEqual {260}
	176 Move X8, [X0+40]
	177 Move [X19+48], X8
	178 Move W8, [X0+48]
	179 Move X0, X19
	180 Move [X19+72], W8
	181 Call Regex.InitializeReferences, X0
	182 Move TEMP, X22
	183 And TEMP, TEMP, 1
	184 Compare TEMP, 1
	185 JumpIfNotEqual {237}
	186 Move W8, [X26+1368]
	187 Compare W8, 0
	188 JumpIfNotEqual {194}
	189 Move X0, 0xAC9000
	190 Move X0, [X0+1536]
	191 Call 0x1C17CF4
	192 Move W8, 1
	193 Move [X26+1368], W8
	194 Move X0, [X25]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {200}
	198 Call 0x1C17DFC
	199 Move X0, [X25]
	200 Move X8, [X0+184]
	201 Move X8, [X8+24]
	202 Compare X8, 0
	203 JumpIfEqual {220}
	204 Move X9, [X8+48]
	205 Move V0, [X8+2]
	206 Add X0, X31, 32
	207 Add X1, X31, 56
	208 Move [X31+56], W21
	209 Move [X31+60], W31
	210 Move [X31+48], X9
	211 Move [X31+2], V0
	212 Move [X31+64], X23
	213 Move [X31+72], X20
	214 Call CachedCodeEntryKey.Equals, X0, X1
	215 Move TEMP, X0
	216 And TEMP, TEMP, 1
	217 Compare TEMP, 1
	218 JumpIfEqual {237}
	219 Move X0, [X25]
	220 Move W8, [X0+224]
	221 Compare W8, 0
	222 JumpIfNotEqual {225}
	223 Call 0x1C17DFC
	224 Move X0, [X25]
	225 Move X8, [X0+184]
	226 Move W8, [X8]
	227 Compare W8, 0
	228 JumpIfEqual {237}
	229 Add X1, X31, 56
	230 Move W2, 1
	231 Move X0, X19
	232 Move [X31+56], W21
	233 Move [X31+60], W31
	234 Move [X31+64], X23
	235 Move [X31+72], X20
	236 Call Regex.GetCachedCodeEntryInternal, X0, X1, X2
	237 Move X20, [X31+144]
	238 Move X19, [X31+152]
	239 Move X22, [X31+128]
	240 Move X21, [X31+136]
	241 Move X24, [X31+112]
	242 Move X23, [X31+120]
	243 Move X26, [X31+96]
	244 Move X25, [X31+104]
	245 Move X30, [X31+80]
	246 Add X31, X31, 160
	247 Return 
	248 Move X0, 0xAC9000
	249 Move X0, [X0+1888]
	250 Call 0x1C17D08
	251 Call 0x1C17F10
	252 Move X19, X0
	253 Move X0, 0xAF5000
	254 Move X0, [X0+2096]
	255 Call 0x1C17D08
	256 Move X1, X0
	257 Move X0, X19
	258 Move X2, X31
	259 Call ArgumentOutOfRangeException..ctor, X0, X1
	260 Call 0x1C17F20
	261 Move X0, 0xAC6000
	262 Move X0, [X0+1320]
	263 Call 0x1C17D08
	264 Call 0x1C17F10
	265 Move X19, X0
	266 Move X0, 0xAC9000
	267 Move X0, [X0+1904]
	268 Call 0x1C17D08
	269 Move X1, X0
	270 Move X0, X19
	271 Move X2, X31
	272 Call ArgumentNullException..ctor, X0, X1
	273 Move X0, 0xB09000
	274 Move X0, [X0+2064]
	275 Call 0x1C17D08
	276 Move X1, X0
	277 Move X0, X19
	278 Call 0x1C17DEC

Method: System.Boolean get_RightToLeft()

Disassembly:
	0x036346D4 ADD W10, W10, 0x1
	0x036346D8 STR W10, [X23 + 0x1C]
	0x036346DC CBZ X8, 0x36347D8

ISIL:
	001 Move W8, [X0+32]
	002 Move W0, W8
	003 ShiftRight W0, 6
	004 And W0, W0, 63
	005 Return X0

Method: System.String ToString()

Disassembly:
	0x036346E0 LDRSW X10, [X23 + 0x18]
	0x036346E4 LDR W11, [X8 + 0x18]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.String GroupNameFromNumber(System.Int32 i)

Disassembly:
	0x03630F38 LDR X0, [X0 + 0x768]
	0x03630F3C BL 0x1C16D08
	0x03630F40 MOV X20, X0
	0x03630F44 ADRP X0, 0xB0B000
	0x03630F48 LDR X0, [X0 + 0x7C0]
	0x03630F4C BL 0x1C16D08
	0x03630F50 MOV X2, X0
	0x03630F54 MOV X0, X19
	0x03630F58 MOV X1, X20
	0x03630F5C MOV X3, X31
	0x03630F60 BL 0x3311888
	0x03630F64 ADRP X0, 0xB0B000
	0x03630F68 LDR X0, [X0 + 0x7C8]
	0x03630F6C BL 0x1C16D08
	0x03630F70 MOV X1, X0
	0x03630F74 MOV X0, X19
	0x03630F78 BL 0x1C16DEC
	0x03630F7C MOV X0, X20
	0x03630F80 BL 0x1C16F18
	0x03630F84 MOV X21, X0
	0x03630F88 MOV X26, X31
	0x03630F8C B 0x3630F94
	0x03630F90 MOV X21, X0
	0x03630F94 CMP W1, 0x1
	0x03630F98 B.NE 0x3630FB4
	0x03630F9C MOV X0, X21
	0x03630FA0 BL 0x3EB1AD0
	0x03630FA4 LDR X20, [X0]
	0x03630FA8 BL 0x3EB1AE0
	0x03630FAC MOV X21, X31
	0x03630FB0 B 0x3630E50
	0x03630FB4 MOV X20, X31
	0x03630FB8 B 0x3630FC0
	0x03630FBC MOV X21, X0
	0x03630FC0 LDR X0, [X19 + 0x50]
	0x03630FC4 CBNZ X0, 0x3630FCC
	0x03630FC8 BL 0x1C16F20
	0x03630FCC MOV X1, X26
	0x03630FD0 BL 0x36319F0
	0x03630FD4 CBNZ X20, 0x3630FE0
	0x03630FD8 MOV X0, X21
	0x03630FDC BL 0x1D2C690
	0x03630FE0 MOV X0, X20
	0x03630FE4 BL 0x1C16F18
	0x03630FE8 BL 0x1990590
	0x03630FEC STR X30, [X31 - 0x30]!
	0x03630FF0 STP X22, X21, [X31 + 0x10]
	0x03630FF4 STP X20, X19, [X31 + 0x20]
	0x03630FF8 ADRP X21, 0xDB0000
	0x03630FFC LDRB W8, [X21 + 0x51C]
	0x03631000 MOV W20, W1
	0x03631004 MOV X19, X0
	0x03631008 TBNZ X8, 0x0, 0x3631020
	0x0363100C ADRP X0, 0xAC4000
	0x03631010 LDR X0, [X0 + 0x278]
	0x03631014 BL 0x1C16CF4
	0x03631018 MOVZ W8, 0x1
	0x0363101C STRB W8, [X21 + 0x51C]
	0x03631020 LDR X8, [X19 + 0x68]
	0x03631024 CBZ X8, 0x3631180
	0x03631028 LDR W9, [X8 + 0x18]
	0x0363102C CMP W9, W20
	0x03631030 B.LS 0x363117C
	0x03631034 SXTW X9, W20
	0x03631038 ADD X8, X8, X9, 0x2, LSL
	0x0363103C LDR W8, [X8 + 0x20]
	0x03631040 CBZ W8, 0x36310DC
	0x03631044 LDR X10, [X19 + 0x60]
	0x03631048 CBZ X10, 0x3631180
	0x0363104C LDR W11, [X10 + 0x18]
	0x03631050 CMP W11, W20
	0x03631054 B.LS 0x363117C
	0x03631058 ADD X9, X10, X9, 0x3, LSL
	0x0363105C LDR X9, [X9 + 0x20]
	0x03631060 CBZ X9, 0x3631180
	0x03631064 LDR W11, [X9 + 0x18]
	0x03631068 UBFM W10, W8, 0x1F, 0x1E
	0x0363106C SUB W8, W10, 0x2
	0x03631070 CMP W8, W11
	0x03631074 B.CS 0x363117C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDB1000
	007 Move W8, [X21+1333]
	008 Move W20, W1
	009 Move X19, X0
	010 Move [X31+12], W1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xAC6000
	016 Move X0, [X0+3144]
	017 Call 0x1C17CF4
	018 Move X0, 0xB0C000
	019 Move X0, [X0+1760]
	020 Call 0x1C17CF4
	021 Move X0, 0xAC4000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0xAC6000
	025 Move X0, [X0+632]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1333], W8
	029 Move X8, [X19+64]
	030 Compare X8, 0
	031 JumpIfEqual {64}
	032 Move X21, [X19+48]
	033 Compare X21, 0
	034 JumpIfEqual {53}
	035 Move X8, 0xAC4000
	036 Move X8, [X8+1880]
	037 Add X1, X31, 8
	038 Move [X31+8], W20
	039 Move X0, [X8]
	040 Call 0x1C17E04
	041 Move X8, 0xB0C000
	042 Move X8, [X8+1760]
	043 Move X1, X0
	044 Add X2, X31, 12
	045 Move X0, X21
	046 Move X3, [X8]
	047 Call 0x21ECB50, X0, X1, X2
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {83}
	052 Move W20, [X31+12]
	053 Move TEMP, X20
	054 And TEMP, TEMP, -2147483648
	055 Compare TEMP, -2147483648
	056 JumpIfEqual {83}
	057 Move X8, [X19+64]
	058 Compare X8, 0
	059 JumpIfEqual {94}
	060 Move W9, [X8+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add X8, X8, W20
	063 Move X0, [X8+32]
	064 Move TEMP, X20
	065 And TEMP, TEMP, -2147483648
	066 Compare TEMP, -2147483648
	067 JumpIfEqual {83}
	068 Move W8, [X19+72]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X8, 0xAC5000
	071 Move X8, [X8+3144]
	072 Move X0, [X8]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X31
	078 Call CultureInfo.get_InvariantCulture
	079 Move X1, X0
	080 Add X0, X31, 12
	081 Move X2, X31
	082 Call Int32.ToString, X0, X1
	083 Move X8, 0xAC5000
	084 Move X8, [X8+632]
	085 Move X8, [X8]
	086 Move X8, [X8+184]
	087 Move X0, [X8]
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X30, [X31+16]
	091 Move X21, [X31+24]
	092 Add X31, X31, 48
	093 Return X0
	094 Call 0x1C17F20
	095 Call 0x1C17F28

Method: System.Int32 GroupNumberFromName(System.String name)

Disassembly:
	0x03630B44 LDR X0, [X0 + 0x4B0]
	0x03630B48 BL 0x1C16CF4
	0x03630B4C MOVZ W8, 0x1
	0x03630B50 STRB W8, [X28 + 0x519]
	0x03630B54 LDR X0, [X27]
	0x03630B58 ADRP X29, 0xAC5000
	0x03630B5C ADRP X28, 0xAFB000
	0x03630B60 LDR X29, [X29 + 0x4B0]
	0x03630B64 LDR X28, [X28 + 0xDA0]
	0x03630B68 MOVZ W1, 0x2
	0x03630B6C BL 0x1C16D6C
	0x03630B70 LDR X8, [X26]
	0x03630B74 MOV X26, X0
	0x03630B78 LDR W9, [X8 + 0xE0]
	0x03630B7C CBNZ W9, 0x3630B88
	0x03630B80 MOV X0, X8
	0x03630B84 BL 0x1C16DFC
	0x03630B88 LDR X29, [X29]
	0x03630B8C MOV X0, X22
	0x03630B90 MOV X1, X31
	0x03630B94 BL 0x33BDD8C
	0x03630B98 STP X31, X25, [X22 + 0x10]
	0x03630B9C STR X26, [X22 + 0x20]
	0x03630BA0 STR W31, [X22 + 0x28]
	0x03630BA4 STR X29, [X22 + 0x38]
	0x03630BA8 STR X24, [X22 + 0x48]
	0x03630BAC LDR X0, [X27]
	0x03630BB0 MOV W1, W23
	0x03630BB4 BL 0x1C16D6C
	0x03630BB8 STR X0, [X22 + 0x68]
	0x03630BBC LDR X0, [X28]
	0x03630BC0 MOV W1, W23
	0x03630BC4 BL 0x1C16D6C
	0x03630BC8 STR X0, [X22 + 0x60]
	0x03630BCC CBZ X0, 0x3630C0C
	0x03630BD0 LDR W8, [X0 + 0x18]
	0x03630BD4 CBZ W8, 0x3630C10
	0x03630BD8 LDR X8, [X22 + 0x20]
	0x03630BDC ADD W9, W20, W21
	0x03630BE0 LDP X24, X23, [X31 + 0x30]
	0x03630BE4 LDP X26, X25, [X31 + 0x20]
	0x03630BE8 STR X8, [X0 + 0x20]
	0x03630BEC STR W21, [X22 + 0x50]
	0x03630BF0 STP W9, W19, [X22 + 0x58]
	0x03630BF4 STRB W31, [X22 + 0x70]
	0x03630BF8 LDP X20, X19, [X31 + 0x50]
	0x03630BFC LDP X22, X21, [X31 + 0x40]
	0x03630C00 LDP X28, X27, [X31 + 0x10]
	0x03630C04 LDP X29, X30, [X31], #0x60
	0x03630C08 RET
	0x03630C0C BL 0x1C16F20
	0x03630C10 BL 0x1C16F28
	0x03630C14 STR X30, [X31 - 0x20]!
	0x03630C18 STP X20, X19, [X31 + 0x10]
	0x03630C1C ADRP X20, 0xDB0000
	0x03630C20 ADRP X19, 0xB0B000
	0x03630C24 LDRB W8, [X20 + 0x51A]
	0x03630C28 LDR X19, [X19 + 0x798]
	0x03630C2C TBNZ X8, 0x0, 0x3630C44
	0x03630C30 ADRP X0, 0xB0B000
	0x03630C34 LDR X0, [X0 + 0x798]
	0x03630C38 BL 0x1C16CF4
	0x03630C3C MOVZ W8, 0x1
	0x03630C40 STRB W8, [X20 + 0x51A]
	0x03630C44 LDR X0, [X19]
	0x03630C48 LDR W8, [X0 + 0xE0]
	0x03630C4C CBNZ W8, 0x3630C58
	0x03630C50 BL 0x1C16DFC
	0x03630C54 LDR X0, [X19]
	0x03630C58 LDR X8, [X0 + 0xB8]
	0x03630C5C LDP X20, X19, [X31 + 0x10]
	0x03630C60 LDR X0, [X8]
	0x03630C64 LDR X30, [X31], #0x20
	0x03630C68 RET
	0x03630C6C STR X30, [X31 - 0x10]!
	0x03630C70 LDR X11, [X0 + 0x68]
	0x03630C74 STR X1, [X0 + 0x48]
	0x03630C78 STR X2, [X0 + 0x18]
	0x03630C7C STR W3, [X0 + 0x50]
	0x03630C80 STP W4, W5, [X0 + 0x58]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0xDB1000
	009 Move W8, [X21+1334]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB0C000
	017 Move X0, [X0+1760]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1334], W8
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W8, TEMP
	024 Move [X31+12], W8
	025 Compare X19, 0
	026 JumpIfEqual {76}
	027 Move X0, [X20+56]
	028 Compare X0, 0
	029 JumpIfEqual {39}
	030 Move X8, 0xB0C000
	031 Move X8, [X8+1760]
	032 Add X2, X31, 12
	033 Move X1, X19
	034 Move X3, [X8]
	035 Call 0x21ECB50, X0, X1, X2
	036 Move W8, [X31+12]
	037 And W31, W0, 1
	038 NotImplemented "Instruction CSINV not yet implemented."
	039 Move W8, [X19+16]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W22, W31
	042 Move W21, W31
	043 Move W23, 10
	044 Move X0, X19
	045 Move W1, W21
	046 Move X2, X31
	047 Call String.get_Chars, X0, X1
	048 Subtract W8, W0, 48
	049 And W8, W8, 0xFFFF
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move W8, [X19+16]
	052 Multiply W9, W22, W23
	053 Add W9, W9, W0
	054 Add W21, W21, 1
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Subtract W22, W9, 48
	057 Move TEMP, X22
	058 And TEMP, TEMP, -2147483648
	059 Compare TEMP, -2147483648
	060 JumpIfNotEqual {65}
	061 Move TEMP, 0
	062 Not TEMP
	063 Move W0, TEMP
	064 Move W22, W31
	065 Move W8, [X20+72]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CSINV not yet implemented."
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X30, [X31+16]
	073 Move X23, [X31+24]
	074 Add X31, X31, 64
	075 Return X0
	076 Move X0, 0xAC9000
	077 Move X0, [X0+1320]
	078 Call 0x1C17D08
	079 Call 0x1C17F10
	080 Move X19, X0
	081 Move X0, 0xACC000
	082 Move X0, [X0+1416]
	083 Call 0x1C17D08
	084 Move X1, X0
	085 Move X0, X19
	086 Move X2, X31
	087 Call ArgumentNullException..ctor, X0, X1
	088 Move X0, 0xB0C000
	089 Move X0, [X0+1768]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Call 0x1C17DEC

Method: System.Void InitializeReferences()

Disassembly:
	0x036345D8 MOV X20, X0
	0x036345DC TBNZ X8, 0x0, 0x36345F4
	0x036345E0 ADRP X0, 0xB07000
	0x036345E4 LDR X0, [X0 + 0x8C8]
	0x036345E8 BL 0x1C16CF4
	0x036345EC MOVZ W8, 0x1
	0x036345F0 STRB W8, [X21 + 0x53D]
	0x036345F4 LDRB W8, [X20 + 0x20]
	0x036345F8 CBZ W8, 0x3634658
	0x036345FC MOV X0, X20
	0x03634600 BL 0x3634510
	0x03634604 CMP W0, 0x1
	0x03634608 B.LT 0x3634658
	0x0363460C CBZ X19, 0x36347D8
	0x03634610 LDR W8, [X19 + 0x10]
	0x03634614 CMP W8, 0x1
	0x03634618 B.LT 0x363465C
	0x0363461C MOV X0, X19
	0x03634620 MOV W1, W31
	0x03634624 MOV X2, X31
	0x03634628 BL 0x3222A1C
	0x0363462C MOV W21, W0
	0x03634630 MOV X0, X20
	0x03634634 BL 0x3634510
	0x03634638 SUB W1, W0, 0x1
	0x0363463C MOV X0, X20
	0x03634640 BL 0x3634558
	0x03634644 UBFM X8, X0, 0x10, 0x1F
	0x03634648 CMP W8, W21, UXTH
	0x0363464C B.CC 0x363465C
	0x03634650 STRB W31, [X20 + 0x20]
	0x03634654 B 0x363465C
	0x03634658 CBZ X19, 0x36347D8
	0x0363465C LDR W8, [X19 + 0x10]
	0x03634660 ADRP X25, 0xB07000
	0x03634664 LDR X25, [X25 + 0x8C8]
	0x03634668 SUB W9, W8, 0x1
	0x0363466C CMP W9, 0x1
	0x03634670 B.LT 0x3634734
	0x03634674 MOV W9, W31
	0x03634678 LDR X23, [X20 + 0x10]
	0x0363467C MOV X0, X19
	0x03634680 MOV W1, W9
	0x03634684 MOV X2, X31
	0x03634688 MOV W21, W9
	0x0363468C BL 0x3222A1C
	0x03634690 ADD W22, W21, 0x1
	0x03634694 MOV W24, W0
	0x03634698 MOV X0, X19
	0x0363469C MOV W1, W22
	0x036346A0 MOV X2, X31
	0x036346A4 BL 0x3222A1C
	0x036346A8 SUB W2, W0, 0x1
	0x036346AC ADD X0, X31, 0xC
	0x036346B0 MOV W1, W24
	0x036346B4 MOV X3, X31
	0x036346B8 STR W31, [X31 + 0xC]
	0x036346BC BL 0x363B668
	0x036346C0 CBZ X23, 0x36347D8
	0x036346C4 LDR W10, [X23 + 0x1C]
	0x036346C8 LDR W1, [X31 + 0xC]
	0x036346CC LDR X8, [X23 + 0x10]
	0x036346D0 LDR X9, [X25]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xDAD000
	007 Move W8, [X20+1335]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xB08000
	014 Move X0, [X0+2184]
	015 Call 0x1C17CF4
	016 Move X0, 0xB08000
	017 Move X0, [X0+2192]
	018 Call 0x1C17CF4
	019 Move X0, 0xB08000
	020 Move X0, [X0+2200]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1335], W8
	024 Move W8, [X19+104]
	025 Compare W8, 0
	026 JumpIfNotEqual {54}
	027 Move X8, 0xB08000
	028 Move X8, [X8+2184]
	029 Move W9, 1
	030 Move [X19+104], W9
	031 Move X21, 0xB08000
	032 Move X0, [X8]
	033 Move X22, 0xB08000
	034 Move X21, [X21+2200]
	035 Move X22, [X22+2192]
	036 Call 0x1C17F10
	037 Move X1, X31
	038 Move X20, X0
	039 Call Object..ctor, X0
	040 Move [X19+80], X20
	041 Move X0, [X21]
	042 Call 0x1C17F10
	043 Move X2, [X22]
	044 Move X1, X31
	045 Move X20, X0
	046 Call 0x2851290, X0, X1
	047 Move [X19+88], X20
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return 
	054 Move X0, 0xAC0000
	055 Move X0, [X0+2880]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xB08000
	060 Move X0, [X0+2208]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call NotSupportedException..ctor, X0, X1
	066 Move X0, 0xB08000
	067 Move X0, [X0+2216]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC

Method: System.Text.RegularExpressions.Match Run(System.Boolean quick, System.Int32 prevlen, System.String input, System.Int32 beginning, System.Int32 length, System.Int32 startat)

Disassembly:
	0x03631D68 BL 0x1C16DFC
	0x03631D6C LDR X8, [X25]
	0x03631D70 LDR X9, [X8 + 0xB8]
	0x03631D74 LDR X9, [X9 + 0x18]
	0x03631D78 CBZ X9, 0x3631DA4
	0x03631D7C LDR W10, [X8 + 0xE0]
	0x03631D80 CBNZ W10, 0x3631D9C
	0x03631D84 MOV X0, X8
	0x03631D88 BL 0x1C16DFC
	0x03631D8C LDR X8, [X25]
	0x03631D90 LDR X9, [X8 + 0xB8]
	0x03631D94 LDR X9, [X9 + 0x18]
	0x03631D98 CBZ X9, 0x3631FE0
	0x03631D9C STR X20, [X9 + 0x10]
	0x03631DA0 STR X9, [X20 + 0x18]
	0x03631DA4 LDR W9, [X8 + 0xE0]
	0x03631DA8 CBNZ W9, 0x3631DB8
	0x03631DAC MOV X0, X8
	0x03631DB0 BL 0x1C16DFC
	0x03631DB4 LDR X8, [X25]
	0x03631DB8 LDR X9, [X8 + 0xB8]
	0x03631DBC LDR W10, [X9 + 0x10]
	0x03631DC0 STR X20, [X9 + 0x18]
	0x03631DC4 ADD W10, W10, 0x1
	0x03631DC8 CMP W10, 0xA
	0x03631DCC STR W10, [X9 + 0x10]
	0x03631DD0 B.LT 0x3631E64
	0x03631DD4 LDR W11, [X8 + 0xE0]
	0x03631DD8 CBNZ W11, 0x3631DF0
	0x03631DDC MOV X0, X8
	0x03631DE0 BL 0x1C16DFC
	0x03631DE4 LDR X8, [X25]
	0x03631DE8 LDR X9, [X8 + 0xB8]
	0x03631DEC LDR W10, [X9 + 0x10]
	0x03631DF0 CMP W10, 0xA
	0x03631DF4 B.NE 0x3631E0C
	0x03631DF8 BL 0x36322B8
	0x03631DFC B 0x3631E64
	0x03631E00 MOV X24, X31
	0x03631E04 MOV X20, X31
	0x03631E08 B 0x3631F98
	0x03631E0C LDR W10, [X8 + 0xE0]
	0x03631E10 CBNZ W10, 0x3631E24
	0x03631E14 MOV X0, X8
	0x03631E18 BL 0x1C16DFC
	0x03631E1C LDR X8, [X25]
	0x03631E20 LDR X9, [X8 + 0xB8]
	0x03631E24 LDR X0, [X9 + 0x8]
	0x03631E28 LDR X8, [X21 + 0x10]
	0x03631E2C LDR V0, [X21]
	0x03631E30 STR X8, [X31 + 0x20]
	0x03631E34 STR V0, [X31 + 0x1]
	0x03631E38 CBZ X0, 0x3631FDC
	0x03631E3C ADRP X8, 0xB0A000
	0x03631E40 LDR X8, [X8 + 0x7E8]
	0x03631E44 LDR V0, [X31 + 0x1]
	0x03631E48 LDR X9, [X31 + 0x20]
	0x03631E4C LDR X3, [X8]
	0x03631E50 STR V0, [X31 + 0x7]
	0x03631E54 STR X9, [X31 + 0x80]
	0x03631E58 ADD X1, X31, 0x70
	0x03631E5C MOV X2, X20
	0x03631E60 BL 0x2B30710
	0x03631E64 LDR X8, [X25]
	0x03631E68 LDR W10, [X8 + 0xE0]
	0x03631E6C CBNZ W10, 0x3631E80
	0x03631E70 MOV X0, X8
	0x03631E74 BL 0x1C16DFC
	0x03631E78 LDR X8, [X25]
	0x03631E7C LDR W10, [X8 + 0xE0]
	0x03631E80 LDR X9, [X8 + 0xB8]
	0x03631E84 LDR X11, [X9 + 0x20]
	0x03631E88 CBZ X11, 0x3631EE0
	0x03631E8C CBNZ W10, 0x3631EA0
	0x03631E90 MOV X0, X8
	0x03631E94 BL 0x1C16DFC
	0x03631E98 LDR X8, [X25]
	0x03631E9C LDR X9, [X8 + 0xB8]
	0x03631EA0 LDR W10, [X9 + 0x10]
	0x03631EA4 LDR W11, [X9]
	0x03631EA8 CMP W10, W11
	0x03631EAC B.LE 0x3631F00
	0x03631EB0 LDR W11, [X8 + 0xE0]
	0x03631EB4 CBNZ W11, 0x3631ECC
	0x03631EB8 MOV X0, X8
	0x03631EBC BL 0x1C16DFC
	0x03631EC0 LDR X8, [X25]
	0x03631EC4 LDR X9, [X8 + 0xB8]
	0x03631EC8 LDR W10, [X9 + 0x10]
	0x03631ECC LDR X21, [X9 + 0x20]
	0x03631ED0 CMP W10, 0xA
	0x03631ED4 B.GE 0x3631F08
	0x03631ED8 CBNZ X21, 0x3631F60
	0x03631EDC BL 0x1C16F20
	0x03631EE0 CBNZ W10, 0x3631EF4
	0x03631EE4 MOV X0, X8
	0x03631EE8 BL 0x1C16DFC
	0x03631EEC LDR X8, [X25]
	0x03631EF0 LDR X9, [X8 + 0xB8]
	0x03631EF4 MOV X24, X31
	0x03631EF8 STR X20, [X9 + 0x20]
	0x03631EFC B 0x3631F98
	0x03631F00 MOV X24, X31
	0x03631F04 B 0x3631F98
	0x03631F08 LDR W10, [X8 + 0xE0]
	0x03631F0C CBNZ W10, 0x3631F20
	0x03631F10 MOV X0, X8
	0x03631F14 BL 0x1C16DFC
	0x03631F18 LDR X8, [X25]
	0x03631F1C LDR X9, [X8 + 0xB8]
	0x03631F20 CBZ X21, 0x3631FE4
	0x03631F24 LDR X0, [X9 + 0x8]
	0x03631F28 LDR X8, [X21 + 0x30]
	0x03631F2C LDR V0, [X21 + 0x2]
	0x03631F30 STR X8, [X31 + 0x20]
	0x03631F34 STR V0, [X31 + 0x1]
	0x03631F38 CBZ X0, 0x3631FE8
	0x03631F3C ADRP X8, 0xB0A000
	0x03631F40 LDR X8, [X8 + 0x7F0]
	0x03631F44 LDR V0, [X31 + 0x1]
	0x03631F48 LDR X9, [X31 + 0x20]
	0x03631F4C LDR X2, [X8]
	0x03631F50 STR V0, [X31 + 0x7]
	0x03631F54 STR X9, [X31 + 0x80]
	0x03631F58 ADD X1, X31, 0x70
	0x03631F5C BL 0x2B31DE0
	0x03631F60 LDR X21, [X21 + 0x10]
	0x03631F64 CBZ X21, 0x3631FD8
	0x03631F68 STR X31, [X21 + 0x18]
	0x03631F6C LDR X0, [X25]
	0x03631F70 LDR W8, [X0 + 0xE0]
	0x03631F74 CBNZ W8, 0x3631F80
	0x03631F78 BL 0x1C16DFC
	0x03631F7C LDR X0, [X25]
	0x03631F80 LDR X8, [X0 + 0xB8]
	0x03631F84 MOV X24, X31
	0x03631F88 LDR W9, [X8 + 0x10]
	0x03631F8C STR X21, [X8 + 0x20]
	0x03631F90 SUB W9, W9, 0x1
	0x03631F94 STR W9, [X8 + 0x10]
	0x03631F98 LDRB W8, [X31 + 0x6C]
	0x03631F9C CBZ W8, 0x3631FAC
	0x03631FA0 MOV X0, X19
	0x03631FA4 MOV X1, X31
	0x03631FA8 BL 0x33E14E4
	0x03631FAC CBNZ X24, 0x3631FD0
	0x03631FB0 MOV X0, X20
	0x03631FB4 LDP X20, X19, [X31 + 0xD0]
	0x03631FB8 LDP X22, X21, [X31 + 0xC0]
	0x03631FBC LDP X24, X23, [X31 + 0xB0]
	0x03631FC0 LDP X26, X25, [X31 + 0xA0]
	0x03631FC4 LDP X30, X27, [X31 + 0x90]
	0x03631FC8 ADD X31, X31, 0xE0
	0x03631FCC RET
	0x03631FD0 MOV X0, X24
	0x03631FD4 BL 0x1C16F18
	0x03631FD8 BL 0x1C16F20
	0x03631FDC BL 0x1C16F20
	0x03631FE0 BL 0x1C16F20
	0x03631FE4 BL 0x1C16F20
	0x03631FE8 BL 0x1C16F20

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+32], X28
	004 Move [X31+40], X27
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X26, 0xDB0000
	014 Move W8, [X26+1336]
	015 Move W20, W6
	016 Move W25, W5
	017 Move W22, W4
	018 Move X23, X3
	019 Move W21, W2
	020 Move W24, W1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0xAC5000
	027 Move X0, [X0+3144]
	028 Call 0x1C17CF4
	029 Move X0, 0xB0B000
	030 Move X0, [X0+1960]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X26+1336], W8
	034 Move TEMP, X20
	035 And TEMP, TEMP, -2147483648
	036 Compare TEMP, -2147483648
	037 JumpIfEqual {129}
	038 Compare X23, 0
	039 JumpIfEqual {128}
	040 Move W8, [X23+16]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move TEMP, X25
	043 And TEMP, TEMP, -2147483648
	044 Compare TEMP, -2147483648
	045 JumpIfEqual {140}
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, [X19+80]
	048 Compare X0, 0
	049 JumpIfEqual {128}
	050 Call ExclusiveReference.Get, X0
	051 Move X26, X0
	052 Compare X0, 0
	053 JumpIfNotEqual {64}
	054 Move X0, [X19+40]
	055 Compare X0, 0
	056 JumpIfEqual {99}
	057 Move X8, [X0]
	058 Move X9, [X8+376]
	059 Move X1, [X8+384]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X26, X0
	062 Compare X26, 0
	063 JumpIfEqual {127}
	064 Move X8, [X19+16]
	065 Add W4, W25, W22
	066 And W7, W24, 1
	067 Move X0, X26
	068 Move X1, X19
	069 Move X2, X23
	070 Move W3, W22
	071 Move W5, W20
	072 Move W6, W21
	073 Move [X31], X8
	074 Move [X31+8], X31
	075 Call RegexRunner.Scan, X0, X1, X2, X3, X4, X5, X6, X7, X8
	076 Move X21, X0
	077 Move X20, X31
	078 Move X0, [X19+80]
	079 Compare X0, 0
	080 JumpIfEqual {128}
	081 Move X1, X26
	082 Call ExclusiveReference.Release, X0, X1
	083 Compare X20, 0
	084 JumpIfNotEqual {163}
	085 Move X0, X21
	086 Move X20, [X31+96]
	087 Move X19, [X31+104]
	088 Move X22, [X31+80]
	089 Move X21, [X31+88]
	090 Move X24, [X31+64]
	091 Move X23, [X31+72]
	092 Move X26, [X31+48]
	093 Move X25, [X31+56]
	094 Move X28, [X31+32]
	095 Move X27, [X31+40]
	096 Move X30, [X31+16]
	097 Add X31, X31, 112
	098 Return X0
	099 Move X8, 0xAC5000
	100 Move X8, [X8+3144]
	101 Move X27, [X19+96]
	102 Move W26, [X19+32]
	103 Move X0, [X8]
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Move X0, X31
	109 Move TEMP, X26
	110 And TEMP, TEMP, 512
	111 Compare TEMP, 512
	112 JumpIfEqual {114}
	113 Call CultureInfo.get_CurrentCulture
	114 Call CultureInfo.get_InvariantCulture
	115 Move X8, 0xB0B000
	116 Move X8, [X8+1960]
	117 Move X28, X0
	118 Move X0, [X8]
	119 Call 0x1C17F10
	120 Move X1, X27
	121 Move X2, X28
	122 Move X3, X31
	123 Move X26, X0
	124 Call RegexInterpreter..ctor, X0, X1, X2
	125 Compare X26, 0
	126 JumpIfNotEqual {64}
	127 Call 0x1C17F20
	128 Call 0x1C17F20
	129 Move X0, 0xACB000
	130 Move X0, [X0+1888]
	131 Call 0x1C17D08
	132 Call 0x1C17F10
	133 Move X19, X0
	134 Move X0, 0xB0B000
	135 Move X0, [X0+1968]
	136 Call 0x1C17D08
	137 Move X20, X0
	138 Move X0, 0xB0B000
	139 Move X0, [X0+1976]
	140 Move X0, 0xACB000
	141 Move X0, [X0+1888]
	142 Call 0x1C17D08
	143 Call 0x1C17F10
	144 Move X19, X0
	145 Move X0, 0xACB000
	146 Move X0, [X0+1896]
	147 Call 0x1C17D08
	148 Move X20, X0
	149 Move X0, 0xB0B000
	150 Move X0, [X0+1984]
	151 Call 0x1C17D08
	152 Move X2, X0
	153 Move X0, X19
	154 Move X1, X20
	155 Move X3, X31
	156 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	157 Move X0, 0xB0B000
	158 Move X0, [X0+1992]
	159 Call 0x1C17D08
	160 Move X1, X0
	161 Move X0, X19
	162 Call 0x1C17DEC
	163 Move X0, X20
	164 Call 0x1C17F18
	165 Move X21, X0
	166 Move X26, X31
	167 Move X21, X0
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move X0, X21
	170 Call 0x3EB2AD0
	171 Move X20, [X0]
	172 Call 0x3EB2AE0
	173 Move X21, X31
	174 Move X20, X31
	175 Move X21, X0
	176 Move X0, [X19+80]
	177 Compare X0, 0
	178 JumpIfNotEqual {180}
	179 Call 0x1C17F20
	180 Move X1, X26
	181 Call ExclusiveReference.Release, X0, X1
	182 Compare X20, 0
	183 JumpIfNotEqual {186}
	184 Move X0, X21
	185 Call 0x1D2D690
	186 Move X0, X20
	187 Call 0x1C17F18
	188 Call 0x1991590

Method: System.Boolean UseOptionR()

Disassembly:
	0x03633AA4 LDR X8, [X19 + 0x10]
	0x03633AA8 CBZ X8, 0x3633CD4
	0x03633AAC LDR W9, [X8 + 0x18]

ISIL:
	001 Move W8, [X0+32]
	002 Move W0, W8
	003 ShiftRight W0, 6
	004 And W0, W0, 63
	005 Return X0

Method: System.Boolean UseOptionInvariant()

Disassembly:
	0x036346E8 CMP W10, W11
	0x036346EC B.CS 0x3634704
	0x036346F0 ADD W9, W10, 0x1

ISIL:
	001 Move W8, [X0+33]
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 1
	005 Return X0

