Type: System.Text.RegularExpressions.Group

Method: System.Void .ctor(System.String text, System.Int32[] caps, System.Int32 capcount, System.String name)

Disassembly:
	0x0363076C MOV X0, X20
	0x03630770 MOV X1, X19
	0x03630774 LDP X20, X19, [X31 + 0x10]
	0x03630778 LDP X30, X21, [X31], #0x20
	0x0363077C BR X3
	0x03630780 STP X30, X21, [X31 - 0x20]!
	0x03630784 STP X20, X19, [X31 + 0x10]
	0x03630788 ADRP X21, 0xDB0000
	0x0363078C LDRB W8, [X21 + 0x517]
	0x03630790 MOV X19, X1
	0x03630794 MOV X20, X0
	0x03630798 TBNZ X8, 0x0, 0x36307BC
	0x0363079C ADRP X0, 0xB0B000
	0x036307A0 LDR X0, [X0 + 0x6D0]
	0x036307A4 BL 0x1C16CF4
	0x036307A8 ADRP X0, 0xB0B000
	0x036307AC LDR X0, [X0 + 0x740]
	0x036307B0 BL 0x1C16CF4
	0x036307B4 MOVZ W8, 0x1
	0x036307B8 STRB W8, [X21 + 0x517]
	0x036307BC CBZ X19, 0x36307F4
	0x036307C0 ADRP X8, 0xB0B000
	0x036307C4 LDR X8, [X8 + 0x6D0]
	0x036307C8 LDR X9, [X19]
	0x036307CC LDR X8, [X8]
	0x036307D0 LDRB W11, [X9 + 0x130]
	0x036307D4 LDRB W10, [X8 + 0x130]
	0x036307D8 CMP W11, W10
	0x036307DC B.CC 0x36307F4
	0x036307E0 LDR X9, [X9 + 0xC8]
	0x036307E4 ADD X9, X9, X10, 0x3, LSL
	0x036307E8 LDUR X9, [X9 - 0x8]
	0x036307EC CMP X9, X8
	0x036307F0 B.EQ 0x3630804
	0x036307F4 LDP X20, X19, [X31 + 0x10]
	0x036307F8 MOVN W0, 0x0
	0x036307FC LDP X30, X21, [X31], #0x20
	0x03630800 RET
	0x03630804 ADRP X10, 0xB0B000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X4
	009 Move W20, W3
	010 Move X22, X2
	011 Move X23, X1
	012 Move X21, X0
	013 Compare W3, 0
	014 JumpIfEqual {27}
	015 Compare X22, 0
	016 JumpIfEqual {47}
	017 Move W9, [X22+24]
	018 Move W10, W20
	019 ShiftRight W10, 31
	020 And W10, W10, 0x3FFFFFFF
	021 Subtract W8, W10, 2
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Subtract W10, W10, 1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add X8, X22, W8
	026 Move V0, [X8+32]
	027 NotImplemented "Instruction MOVI not yet implemented."
	028 Move X0, X21
	029 Move X1, X31
	030 Move [X31], V0
	031 Call Object..ctor, X0
	032 Move V0, [X31]
	033 Move [X21+24], X23
	034 Move [X21+32], X22
	035 Move [X21+40], W20
	036 Move [X21+56], X19
	037 Move [X21+16], D0
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X30, [X31+16]
	043 Move X23, [X31+24]
	044 Add X31, X31, 64
	045 Return 
	046 Call 0x1C17F28
	047 Call 0x1C17F20

Method: System.Boolean get_Success()

Disassembly:
	0x03630808 LDR X8, [X20]
	0x0363080C LDR X10, [X10 + 0x740]
	0x03630810 LDRH W9, [X8 + 0x12E]
	0x03630814 LDR X1, [X10]

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03630818 CBZ X9, 0x363083C
	0x0363081C LDR X10, [X8 + 0xB0]
	0x03630820 ADD X10, X10, 0x8
	0x03630824 LDUR X11, [X10 - 0x8]
	0x03630828 CMP X11, X1
	0x0363082C B.EQ 0x363084C
	0x03630830 SUBS X9, X9, 0x1
	0x03630834 ADD X10, X10, 0x10
	0x03630838 B.NE 0x3630824
	0x0363083C MOVZ W2, 0x2
	0x03630840 MOV X0, X20
	0x03630844 BL 0x1C5C788
	0x03630848 B 0x363085C
	0x0363084C LDR W9, [X10]
	0x03630850 ADD W9, W9, 0x2
	0x03630854 ADD X8, X8, W9, 0x4, SXTW
	0x03630858 ADD X0, X8, 0x138
	0x0363085C LDP X3, X2, [X0]
	0x03630860 MOV X0, X20
	0x03630864 MOV X1, X19
	0x03630868 LDP X20, X19, [X31 + 0x10]
	0x0363086C LDP X30, X21, [X31], #0x20
	0x03630870 BR X3
	0x03630874 STP X30, X19, [X31 - 0x10]!
	0x03630878 ADRP X0, 0xAC3000
	0x0363087C LDR X0, [X0 + 0xB40]
	0x03630880 BL 0x1C16D08
	0x03630884 BL 0x1C16F10
	0x03630888 MOV X19, X0
	0x0363088C ADRP X0, 0xAED000
	0x03630890 LDR X0, [X0 + 0x68]
	0x03630894 BL 0x1C16D08
	0x03630898 MOV X1, X0
	0x0363089C MOV X0, X19
	0x036308A0 MOV X2, X31
	0x036308A4 BL 0x3379A44
	0x036308A8 ADRP X0, 0xB0B000
	0x036308AC LDR X0, [X0 + 0x768]
	0x036308B0 BL 0x1C16D08
	0x036308B4 MOV X1, X0
	0x036308B8 MOV X0, X19
	0x036308BC BL 0x1C16DEC
	0x036308C0 MOVZ W0, 0x1
	0x036308C4 RET
	0x036308C8 STP X30, X19, [X31 - 0x10]!
	0x036308CC ADRP X0, 0xAC3000
	0x036308D0 LDR X0, [X0 + 0xB40]
	0x036308D4 BL 0x1C16D08
	0x036308D8 BL 0x1C16F10
	0x036308DC MOV X19, X0
	0x036308E0 ADRP X0, 0xAED000
	0x036308E4 LDR X0, [X0 + 0x68]
	0x036308E8 BL 0x1C16D08
	0x036308EC MOV X1, X0
	0x036308F0 MOV X0, X19
	0x036308F4 MOV X2, X31
	0x036308F8 BL 0x3379A44
	0x036308FC ADRP X0, 0xB0B000
	0x03630900 LDR X0, [X0 + 0x770]
	0x03630904 BL 0x1C16D08
	0x03630908 MOV X1, X0
	0x0363090C MOV X0, X19
	0x03630910 BL 0x1C16DEC
	0x03630914 STP X30, X19, [X31 - 0x10]!
	0x03630918 ADRP X0, 0xAC3000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xDB1000
	008 Move X20, 0xAC6000
	009 Move X19, 0xB0C000
	010 Move W8, [X21+1293]
	011 Move X20, [X20+632]
	012 Move X19, [X19+1736]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xB0C000
	018 Move X0, [X0+1736]
	019 Call 0x1C17CF4
	020 Move X0, 0xB0C000
	021 Move X0, [X0+1744]
	022 Call 0x1C17CF4
	023 Move X0, 0xAC6000
	024 Move X0, [X0+632]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1293], W8
	028 Move X8, [X20]
	029 Move X19, [X19]
	030 Move X9, [X8+184]
	031 Move X8, [X19+56]
	032 Move X21, [X9]
	033 Compare X8, 0
	034 JumpIfNotEqual {38}
	035 Move X0, X19
	036 Call 0x1C5D6E0
	037 Move X8, [X19+56]
	038 Move X0, [X8+16]
	039 Move W8, [X0+309]
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {45}
	044 Call 0x1C5D684
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X8, [X19+56]
	050 Move X22, 0xB0C000
	051 Move X0, [X8+16]
	052 Move W8, [X0+309]
	053 Move X22, [X22+1744]
	054 Move TEMP, X8
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {59}
	058 Call 0x1C5D684
	059 Move X8, [X20]
	060 Move X9, [X0+184]
	061 Move X0, [X22]
	062 Move X8, [X8+184]
	063 Move X20, [X9]
	064 Move X23, [X8]
	065 Call 0x1C17F10
	066 Move X1, X31
	067 Move X19, X0
	068 Call Object..ctor, X0
	069 Move [X19+16], X31
	070 Move [X19+24], X21
	071 Move [X19+32], X20
	072 Move [X19+40], W31
	073 Move [X19+56], X23
	074 Move X8, [X22]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X8, [X8+184]
	078 Move [X8], X19
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X30, [X31+48]
	082 Move X23, [X31+56]
	083 Return 

Method: System.Void .ctor()

Disassembly:
	0x0363091C LDR X0, [X0 + 0xB40]
	0x03630920 BL 0x1C16D08
	0x03630924 BL 0x1C16F10
	0x03630928 MOV X19, X0
	0x0363092C ADRP X0, 0xAED000
	0x03630930 LDR X0, [X0 + 0x68]
	0x03630934 BL 0x1C16D08
	0x03630938 MOV X1, X0
	0x0363093C MOV X0, X19
	0x03630940 MOV X2, X31
	0x03630944 BL 0x3379A44
	0x03630948 ADRP X0, 0xB0B000
	0x0363094C LDR X0, [X0 + 0x778]
	0x03630950 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xDB1000
	005 Move X20, 0xB0C000
	006 Move W8, [X19+1294]
	007 Move X20, [X20+1752]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB0C000
	013 Move X0, [X0+1752]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1294], W8
	017 Move X0, [X20]
	018 Call 0x1C17D9C

