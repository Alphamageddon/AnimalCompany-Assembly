Type: System.Text.RegularExpressions.RegexFC

Method: System.Void .ctor(System.Boolean nullable)

Disassembly:
	0x0363D770 LDR W8, [X19 + 0x10]
	0x0363D774 MOV W0, W31
	0x0363D778 STR W8, [X19 + 0x28]
	0x0363D77C B 0x363D97C
	0x0363D780 LDRB W9, [X8 + 0x38]
	0x0363D784 CBZ W9, 0x363D978
	0x0363D788 LDRB W9, [X8 + 0x5C]
	0x0363D78C STRB W9, [X19 + 0x98]
	0x0363D790 ADRP X9, 0xAFF000
	0x0363D794 LDR X9, [X9 + 0x2F0]
	0x0363D798 LDRB W20, [X8 + 0x40]
	0x0363D79C LDR X0, [X9]
	0x0363D7A0 LDR W9, [X0 + 0xE0]
	0x0363D7A4 CBZ W9, 0x363D818
	0x0363D7A8 ANDS W31, W20, 0xFF
	0x0363D7AC CSET W9, NE
	0x0363D7B0 STRB W9, [X19 + 0x99]
	0x0363D7B4 B 0x363D830
	0x0363D7B8 TBZ X9, 0x4, 0x363D7D8
	0x0363D7BC LDR W10, [X19 + 0x14]
	0x0363D7C0 LDR W11, [X19 + 0x28]
	0x0363D7C4 SUB W10, W10, 0x1
	0x0363D7C8 CMP W11, W10
	0x0363D7CC B.GE 0x363D7D8
	0x0363D7D0 STR W10, [X19 + 0x28]
	0x0363D7D4 B 0x363D7F0
	0x0363D7D8 TBZ X9, 0x5, 0x363D7F0
	0x0363D7DC LDR W10, [X19 + 0x28]
	0x0363D7E0 LDR W9, [X19 + 0x14]
	0x0363D7E4 CMP W10, W9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xDA4000
	007 Move X21, 0xAFF000
	008 Move W8, [X22+1385]
	009 Move X21, [X21+2272]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAFF000
	017 Move X0, [X0+2272]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1385], W8
	021 Move X0, X19
	022 Move X1, X31
	023 And W22, W20, 1
	024 Call Object..ctor, X0
	025 Move X0, [X21]
	026 Call 0x1C17F10
	027 Move X1, X31
	028 Move X20, X0
	029 Call RegexCharClass..ctor, X0
	030 Move [X19+16], X20
	031 Move [X19+24], W22
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Return 

Method: System.Void .ctor(System.Char ch, System.Boolean not, System.Boolean nullable, System.Boolean caseInsensitive)

Disassembly:
	0x0363D894 LDR W9, [X19, X9, LSL]
	0x0363D898 LDR W8, [X19, X8, LSL]
	0x0363D89C SUB W8, W9, W8
	0x0363D8A0 CMP W8, 0x1
	0x0363D8A4 B.LT 0x363D950
	0x0363D8A8 ADD W20, W8, 0x1
	0x0363D8AC AND W21, W0, 0xFFFF
	0x0363D8B0 MOV X0, X19
	0x0363D8B4 BL 0x363D210
	0x0363D8B8 CMP W21, W0, UXTH
	0x0363D8BC B.EQ 0x363D958
	0x0363D8C0 SUB W20, W20, 0x1
	0x0363D8C4 CMP W20, 0x1
	0x0363D8C8 MOV W0, W31
	0x0363D8CC B.GT 0x363D8B0
	0x0363D8D0 B 0x363D97C
	0x0363D8D4 LDRB W8, [X19 + 0x98]
	0x0363D8D8 MOVZ W9, 0x10
	0x0363D8DC MOVZ W10, 0x28
	0x0363D8E0 MOVZ W11, 0x14
	0x0363D8E4 CMP W8, 0x0
	0x0363D8E8 CSEL X8, X10, X9, EQ
	0x0363D8EC CSEL X9, X11, X10, EQ
	0x0363D8F0 LDR W9, [X19, X9, LSL]
	0x0363D8F4 LDR W8, [X19, X8, LSL]
	0x0363D8F8 SUB W8, W9, W8
	0x0363D8FC CMP W8, 0x1
	0x0363D900 B.LT 0x363D950
	0x0363D904 ADD W23, W8, 0x1
	0x0363D908 MOV X0, X19
	0x0363D90C BL 0x363D210
	0x0363D910 LDR X8, [X22]
	0x0363D914 MOV W21, W0
	0x0363D918 LDR W9, [X8 + 0xE0]
	0x0363D91C CBNZ W9, 0x363D928
	0x0363D920 MOV X0, X8
	0x0363D924 BL 0x1C16DFC
	0x0363D928 MOV W0, W21
	0x0363D92C MOV X1, X20
	0x0363D930 MOV X2, X31
	0x0363D934 BL 0x3635788
	0x0363D938 TBNZ X0, 0x0, 0x363D958
	0x0363D93C SUB W23, W23, 0x1
	0x0363D940 CMP W23, 0x1
	0x0363D944 MOV W0, W31
	0x0363D948 B.GT 0x363D908
	0x0363D94C B 0x363D97C
	0x0363D950 MOV W0, W31
	0x0363D954 B 0x363D97C
	0x0363D958 CBZ X19, 0x363D98C
	0x0363D95C LDRB W8, [X19 + 0x98]
	0x0363D960 LDR W9, [X19 + 0x28]
	0x0363D964 MOVN W10, 0x0
	0x0363D968 CMP W8, 0x0
	0x0363D96C CSNEG W8, W10, W10, EQ
	0x0363D970 ADD W8, W8, W9
	0x0363D974 STR W8, [X19 + 0x28]
	0x0363D978 MOVZ W0, 0x1
	0x0363D97C LDP X20, X19, [X31 + 0x20]
	0x0363D980 LDP X22, X21, [X31 + 0x10]
	0x0363D984 LDP X30, X23, [X31], #0x30
	0x0363D988 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xDA4000
	010 Move X23, 0xAFF000
	011 Move W8, [X25+1386]
	012 Move X23, [X23+2272]
	013 Move W19, W4
	014 Move W21, W3
	015 Move W24, W2
	016 Move W22, W1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xAFF000
	023 Move X0, [X0+2272]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X25+1386], W8
	027 Move X0, X20
	028 Move X1, X31
	029 Call Object..ctor, X0
	030 Move X0, [X23]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X23, X0
	034 Call RegexCharClass..ctor, X0
	035 Move [X20+16], X23
	036 Move TEMP, X24
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {58}
	040 And W31, W22, 0xFFFF
	041 Compare X23, 0
	042 JumpIfEqual {78}
	043 NotImplemented "Instruction ORN not yet implemented."
	044 Subtract W2, W22, 1
	045 Move X0, X23
	046 Move W1, W31
	047 Move X3, X31
	048 And W24, W8, 0xFFFF
	049 Call RegexCharClass.AddRange, X0, X1, X2
	050 Compare W24, 0
	051 JumpIfEqual {65}
	052 Move X23, [X20+16]
	053 Compare X23, 0
	054 JumpIfEqual {78}
	055 Add W1, W22, 1
	056 Move W2, 0xFFFF
	057 Move X0, X23
	058 Compare X23, 0
	059 JumpIfEqual {78}
	060 Move X0, X23
	061 Move W1, W22
	062 Move W2, W22
	063 Move X3, X31
	064 Call RegexCharClass.AddRange, X0, X1, X2
	065 And W8, W21, 1
	066 And W9, W19, 1
	067 Move [X20+25], W9
	068 Move [X20+24], W8
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X30, [X31+64]
	076 Move X25, [X31+72]
	077 Return 
	078 Call 0x1C17F20

Method: System.Void .ctor(System.String charClass, System.Boolean nullable, System.Boolean caseInsensitive)

Disassembly:
	0x0363D98C BL 0x1C16F20
	0x0363D990 STP X29, X30, [X31 - 0x60]!
	0x0363D994 STP X28, X27, [X31 + 0x10]
	0x0363D998 STP X26, X25, [X31 + 0x20]
	0x0363D99C STP X24, X23, [X31 + 0x30]
	0x0363D9A0 STP X22, X21, [X31 + 0x40]
	0x0363D9A4 STP X20, X19, [X31 + 0x50]
	0x0363D9A8 ADRP X20, 0xDA3000
	0x0363D9AC LDRB W8, [X20 + 0x56D]
	0x0363D9B0 MOV X19, X0
	0x0363D9B4 TBNZ X8, 0x0, 0x363D9CC
	0x0363D9B8 ADRP X0, 0xAFE000
	0x0363D9BC LDR X0, [X0 + 0x8E0]
	0x0363D9C0 BL 0x1C16CF4
	0x0363D9C4 MOVZ W8, 0x1
	0x0363D9C8 STRB W8, [X20 + 0x56D]
	0x0363D9CC ADRP X23, 0xAFE000
	0x0363D9D0 LDR X23, [X23 + 0x8E0]
	0x0363D9D4 MOV X0, X19
	0x0363D9D8 MOV W1, W31
	0x0363D9DC BL 0x363CB10
	0x0363D9E0 ADRP X25, 0xFFFFFFFFFD55A000
	0x0363D9E4 ADRP X27, 0xFFFFFFFFFD55A000
	0x0363D9E8 ADRP X28, 0xFFFFFFFFFD55A000
	0x0363D9EC MOVN W24, 0x0
	0x0363D9F0 ADD X25, X25, 0x4A8
	0x0363D9F4 MOVZ W26, 0x1
	0x0363D9F8 ADD X27, X27, 0x464
	0x0363D9FC ADD X28, X28, 0x40E
	0x0363DA00 MOVN W20, 0x0
	0x0363DA04 TBZ X20, 0x1F, 0x363DA10
	0x0363DA08 MOV W29, W20
	0x0363DA0C B 0x363DA20
	0x0363DA10 MOV X0, X19
	0x0363DA14 MOV W1, W20
	0x0363DA18 BL 0x363CA8C
	0x0363DA1C MOVN W29, 0x0
	0x0363DA20 LDRB W8, [X19 + 0x74]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDA4000
	009 Move X23, 0xAFF000
	010 Move W8, [X24+1387]
	011 Move X23, [X23+2272]
	012 Move W19, W3
	013 Move W22, W2
	014 Move X21, X1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xAFF000
	021 Move X0, [X0+2272]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+1387], W8
	025 Move X0, X20
	026 Move X1, X31
	027 Call Object..ctor, X0
	028 Move X0, [X23]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 And W22, W22, 1
	036 Call RegexCharClass.Parse, X0
	037 And W8, W19, 1
	038 Move [X20+16], X0
	039 Move [X20+24], W22
	040 Move [X20+25], W8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X24, [X31+16]
	046 Move X23, [X31+24]
	047 Move X30, [X31+64]
	048 Return 

Method: System.Boolean AddFC(System.Text.RegularExpressions.RegexFC fc, System.Boolean concatenate)

Disassembly:
	0x0363D7E8 B.GE 0x363D7F0
	0x0363D7EC STR W9, [X19 + 0x28]
	0x0363D7F0 LDR X0, [X8 + 0x50]
	0x0363D7F4 CBZ X0, 0x363D978
	0x0363D7F8 LDP W3, W4, [X19 + 0x10]
	0x0363D7FC LDR W2, [X19 + 0x28]
	0x0363D800 LDR X1, [X19 + 0x20]
	0x0363D804 LDP X20, X19, [X31 + 0x20]
	0x0363D808 LDP X22, X21, [X31 + 0x10]
	0x0363D80C MOV X5, X31
	0x0363D810 LDP X30, X23, [X31], #0x30
	0x0363D814 B 0x3633DFC
	0x0363D818 BL 0x1C16DFC
	0x0363D81C LDR X8, [X19 + 0x80]
	0x0363D820 ANDS W31, W20, 0xFF
	0x0363D824 CSET W9, NE
	0x0363D828 STRB W9, [X19 + 0x99]
	0x0363D82C CBZ X8, 0x363D98C
	0x0363D830 ADRP X22, 0xAFE000
	0x0363D834 LDR X22, [X22 + 0x8E0]
	0x0363D838 LDR X20, [X8 + 0x48]
	0x0363D83C LDR X0, [X22]
	0x0363D840 LDR W9, [X0 + 0xE0]
	0x0363D844 CBNZ W9, 0x363D84C
	0x0363D848 BL 0x1C16DFC
	0x0363D84C MOV X0, X20
	0x0363D850 MOV X1, X31
	0x0363D854 BL 0x3635500
	0x0363D858 TBZ X0, 0x0, 0x363D8D4
	0x0363D85C LDR X0, [X22]
	0x0363D860 LDR W8, [X0 + 0xE0]
	0x0363D864 CBNZ W8, 0x363D86C
	0x0363D868 BL 0x1C16DFC
	0x0363D86C MOV X0, X20
	0x0363D870 MOV X1, X31
	0x0363D874 BL 0x363530C
	0x0363D878 LDRB W8, [X19 + 0x98]
	0x0363D87C MOVZ W9, 0x10
	0x0363D880 MOVZ W10, 0x28
	0x0363D884 MOVZ W11, 0x14
	0x0363D888 CMP W8, 0x0
	0x0363D88C CSEL X8, X10, X9, EQ
	0x0363D890 CSEL X9, X11, X10, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X0
	006 Move X0, [X0+16]
	007 Compare X0, 0
	008 JumpIfEqual {61}
	009 Move X19, X1
	010 Move X1, X31
	011 Move W21, W2
	012 Call RegexCharClass.get_CanMerge, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {39}
	017 Compare X19, 0
	018 JumpIfEqual {61}
	019 Move X0, [X19+16]
	020 Compare X0, 0
	021 JumpIfEqual {61}
	022 Move X1, X31
	023 Call RegexCharClass.get_CanMerge, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {39}
	028 Move TEMP, X21
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {40}
	032 Move W8, [X20+24]
	033 Compare W8, 0
	034 JumpIfEqual {55}
	035 Move W8, [X19+24]
	036 Compare W8, 0
	037 JumpIfNotEqual {45}
	038 Move [X20+24], W31
	039 Move W0, W31
	040 Move W8, [X19+24]
	041 Compare W8, 0
	042 JumpIfEqual {45}
	043 Move W8, 1
	044 Move [X20+24], W8
	045 Move W8, [X20+25]
	046 Move W9, [X19+25]
	047 Move X0, [X20+16]
	048 Or W8, W9, W8
	049 Move [X20+25], W8
	050 Compare X0, 0
	051 JumpIfEqual {61}
	052 Move X1, [X19+16]
	053 Move X2, X31
	054 Call RegexCharClass.AddCharClass, X0, X1
	055 Move W0, 1
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Return X0
	061 Call 0x1C17F20

Method: System.Boolean get_CaseInsensitive()

Disassembly:
	0x0363DA24 CBNZ W8, 0x363DA30
	0x0363DA28 MOV X0, X19

ISIL:
	001 Move W0, [X0+25]
	002 Return X0

Method: System.Void set_CaseInsensitive(System.Boolean value)

Disassembly:
	0x0363DA2C BL 0x3646BA0
	0x0363DA30 LDR W8, [X19 + 0x90]
	0x0363DA34 CMP W8, 0x2A

ISIL:
	001 And W8, W1, 1
	002 Move [X0+25], W8
	003 Return 

Method: System.String GetFirstChars(System.Globalization.CultureInfo culture)

Disassembly:
	0x0363CB7C RET
	0x0363CB80 BL 0x1C16F20
	0x0363CB84 BL 0x1C16F28
	0x0363CB88 STP X30, X19, [X31 - 0x10]!
	0x0363CB8C LDR W9, [X0 + 0x48]
	0x0363CB90 LDR W8, [X0 + 0x5C]
	0x0363CB94 MOV X19, X0
	0x0363CB98 CMP W9, W8, LSL
	0x0363CB9C B.GE 0x363CBAC
	0x0363CBA0 MOV X0, X19
	0x0363CBA4 BL 0x3646C6C
	0x0363CBA8 LDR W8, [X19 + 0x5C]
	0x0363CBAC LDR W9, [X19 + 0x38]
	0x0363CBB0 UBFM W8, W8, 0x1E, 0x1D

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+25]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {12}
	007 Move X0, [X19+16]
	008 Compare X0, 0
	009 JumpIfEqual {20}
	010 Move X2, X31
	011 Call RegexCharClass.AddLowercase, X0, X1
	012 Move X0, [X19+16]
	013 Compare X0, 0
	014 JumpIfEqual {20}
	015 Move X1, X31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call RegexCharClass.ToStringClass, X0
	019 Return X0
	020 Call 0x1C17F20

