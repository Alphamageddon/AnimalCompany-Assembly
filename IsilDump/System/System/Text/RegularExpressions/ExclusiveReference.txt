Type: System.Text.RegularExpressions.ExclusiveReference

Method: System.Text.RegularExpressions.RegexRunner Get()

Disassembly:
	0x03632998 BL 0x3631BD8
	0x0363299C LDP X20, X19, [X31 + 0x90]
	0x036329A0 LDP X22, X21, [X31 + 0x80]
	0x036329A4 LDP X24, X23, [X31 + 0x70]
	0x036329A8 LDP X26, X25, [X31 + 0x60]
	0x036329AC LDR X30, [X31 + 0x50]
	0x036329B0 ADD X31, X31, 0xA0
	0x036329B4 RET
	0x036329B8 ADRP X0, 0xAC9000
	0x036329BC LDR X0, [X0 + 0x760]
	0x036329C0 BL 0x1C16D08
	0x036329C4 BL 0x1C16F10
	0x036329C8 MOV X19, X0
	0x036329CC ADRP X0, 0xAF5000
	0x036329D0 LDR X0, [X0 + 0x830]
	0x036329D4 BL 0x1C16D08
	0x036329D8 MOV X1, X0
	0x036329DC MOV X0, X19
	0x036329E0 MOV X2, X31
	0x036329E4 BL 0x3316014
	0x036329E8 B 0x3632A20
	0x036329EC BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X0
	005 Add X19, X0, 32
	006 Call 0x1C17D44
	007 Move W1, 1
	008 Move X0, X19
	009 Move X2, X31
	010 Call Interlocked.Exchange, X0, X1
	011 Move W8, W0
	012 Move X0, X31
	013 Compare W8, 0
	014 JumpIfNotEqual {22}
	015 Move X0, [X20+16]
	016 Compare X0, 0
	017 JumpIfEqual {19}
	018 Move [X20+24], X0
	019 Call 0x1C17D44
	020 Move X0, X31
	021 Move [X19], W31
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Return X0

Method: System.Void Release(System.Text.RegularExpressions.RegexRunner obj)

Disassembly:
	0x036329F0 ADRP X0, 0xAC6000
	0x036329F4 LDR X0, [X0 + 0x528]
	0x036329F8 BL 0x1C16D08
	0x036329FC BL 0x1C16F10
	0x03632A00 MOV X19, X0
	0x03632A04 ADRP X0, 0xAC9000
	0x03632A08 LDR X0, [X0 + 0x770]
	0x03632A0C BL 0x1C16D08
	0x03632A10 MOV X1, X0
	0x03632A14 MOV X0, X19
	0x03632A18 MOV X2, X31
	0x03632A1C BL 0x330E100
	0x03632A20 ADRP X0, 0xB09000
	0x03632A24 LDR X0, [X0 + 0x810]
	0x03632A28 BL 0x1C16D08
	0x03632A2C MOV X1, X0
	0x03632A30 MOV X0, X19
	0x03632A34 BL 0x1C16DEC
	0x03632A38 STP X30, X19, [X31 - 0x10]!
	0x03632A3C CBZ X1, 0x3632A5C
	0x03632A40 LDRB W8, [X0 + 0x20]
	0x03632A44 TBNZ X8, 0x6, 0x3632A50
	0x03632A48 MOV W2, W31
	0x03632A4C B 0x3632A54
	0x03632A50 LDR W2, [X1 + 0x10]
	0x03632A54 LDP X30, X19, [X31], #0x10
	0x03632A58 B 0x3632AB0
	0x03632A5C ADRP X0, 0xAC6000
	0x03632A60 LDR X0, [X0 + 0x528]
	0x03632A64 BL 0x1C16D08
	0x03632A68 BL 0x1C16F10
	0x03632A6C MOV X19, X0
	0x03632A70 ADRP X0, 0xAF5000
	0x03632A74 LDR X0, [X0 + 0x348]
	0x03632A78 BL 0x1C16D08
	0x03632A7C MOV X1, X0
	0x03632A80 MOV X0, X19
	0x03632A84 MOV X2, X31
	0x03632A88 BL 0x330E100
	0x03632A8C ADRP X0, 0xB09000
	0x03632A90 LDR X0, [X0 + 0x818]
	0x03632A94 BL 0x1C16D08
	0x03632A98 MOV X1, X0
	0x03632A9C MOV X0, X19
	0x03632AA0 BL 0x1C16DEC
	0x03632AA4 LDRB W8, [X0 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {35}
	007 Move X8, [X0+24]
	008 Move X20, X1
	009 Move X19, X0
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Compare X8, 0
	012 JumpIfNotEqual {30}
	013 Add X21, X19, 32
	014 Call 0x1C17D44
	015 Move W1, 1
	016 Move X0, X21
	017 Move X2, X31
	018 Call Interlocked.Exchange, X0, X1
	019 Compare W0, 0
	020 JumpIfNotEqual {30}
	021 Move X8, [X19+16]
	022 Compare X8, 0
	023 JumpIfNotEqual {25}
	024 Move [X19+16], X20
	025 Call 0x1C17D44
	026 Move [X21], W31
	027 Move [X19+24], X31
	028 Call 0x1C17D44
	029 Move [X19+32], W31
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X0, 0xAC7000
	036 Move X0, [X0+1320]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xACD000
	041 Move X0, [X0+2216]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Move X2, X31
	046 Call ArgumentNullException..ctor, X0, X1
	047 Move X0, 0xB0A000
	048 Move X0, [X0+2008]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x03632AA8 UBFM W0, W8, 0x6, 0x6
	0x03632AAC RET

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

