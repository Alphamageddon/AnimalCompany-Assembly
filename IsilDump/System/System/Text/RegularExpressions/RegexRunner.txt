Type: System.Text.RegularExpressions.RegexRunner

Method: System.Void .ctor()

Disassembly:
	0x0363DA64 LDR W8, [X19 + 0x10]
	0x0363DA68 SUB W8, W2, W8

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Text.RegularExpressions.Match Scan(System.Text.RegularExpressions.Regex regex, System.String text, System.Int32 textbeg, System.Int32 textend, System.Int32 textstart, System.Int32 prevlen, System.Boolean quick, System.TimeSpan timeout)

Disassembly:
	0x03647624 ADRP X23, 0xAF5000
	0x03647628 LDR X23, [X23 + 0x2F8]
	0x0364762C MOV W0, W21
	0x03647630 BL 0x363B744
	0x03647634 TBZ X0, 0x0, 0x3647644
	0x03647638 LDR W8, [X20 + 0x58]
	0x0364763C ADD W8, W8, 0x1
	0x03647640 STR W8, [X20 + 0x58]
	0x03647644 LDR X24, [X23]
	0x03647648 LDRSW X22, [X20 + 0x18]
	0x0364764C LDR X0, [X24 + 0x20]
	0x03647650 LDRB W8, [X0 + 0x135]
	0x03647654 TBNZ X8, 0x0, 0x364765C
	0x03647658 BL 0x1C5C684
	0x0364765C LDR W8, [X20 + 0x8]
	0x03647660 CMP W22, W8
	0x03647664 B.LT 0x364768C
	0x03647668 LDR X0, [X24 + 0x20]
	0x0364766C LDRB W8, [X0 + 0x135]
	0x03647670 TBNZ X8, 0x0, 0x3647678
	0x03647674 BL 0x1C5C684
	0x03647678 LDR X8, [X0 + 0xC0]
	0x0364767C MOV X0, X20
	0x03647680 LDR X1, [X8 + 0x38]
	0x03647684 BL 0x278D43C
	0x03647688 LDR W8, [X20 + 0x8]
	0x0364768C CMP W22, W8
	0x03647690 B.CS 0x3647714
	0x03647694 LDR X8, [X20]
	0x03647698 ADD W24, W22, 0x1
	0x0364769C STR W21, [X8, X22, LSL #2]
	0x036476A0 STR W24, [X20 + 0x18]
	0x036476A4 LDR X21, [X23]
	0x036476A8 LDR X0, [X21 + 0x20]
	0x036476AC LDRB W8, [X0 + 0x135]
	0x036476B0 TBNZ X8, 0x0, 0x36476B8
	0x036476B4 BL 0x1C5C684
	0x036476B8 LDR W8, [X20 + 0x8]
	0x036476BC CMP W24, W8
	0x036476C0 B.LT 0x36476E8
	0x036476C4 LDR X0, [X21 + 0x20]
	0x036476C8 LDRB W8, [X0 + 0x135]
	0x036476CC TBNZ X8, 0x0, 0x36476D4
	0x036476D0 BL 0x1C5C684
	0x036476D4 LDR X8, [X0 + 0xC0]
	0x036476D8 MOV X0, X20
	0x036476DC LDR X1, [X8 + 0x38]
	0x036476E0 BL 0x278D43C
	0x036476E4 LDR W8, [X20 + 0x8]
	0x036476E8 CMP W24, W8
	0x036476EC B.CS 0x3647714
	0x036476F0 LDR X8, [X20]
	0x036476F4 ADD W9, W22, 0x2
	0x036476F8 LDP X22, X21, [X31 + 0x20]
	0x036476FC STR W19, [X8, W24, SXTW]
	0x03647700 STR W9, [X20 + 0x18]
	0x03647704 LDP X20, X19, [X31 + 0x30]
	0x03647708 LDP X24, X23, [X31 + 0x10]
	0x0364770C LDR X30, [X31], #0x40
	0x03647710 RET
	0x03647714 BL 0x1C16F28
	0x03647718 SUB X31, X31, 0x50
	0x0364771C STP X30, X25, [X31 + 0x10]
	0x03647720 STP X24, X23, [X31 + 0x20]
	0x03647724 STP X22, X21, [X31 + 0x30]
	0x03647728 STP X20, X19, [X31 + 0x40]
	0x0364772C ADRP X23, 0xD99000
	0x03647730 LDRB W8, [X23 + 0x5BE]
	0x03647734 MOV W21, W3
	0x03647738 MOV X20, X2
	0x0364773C MOV W22, W1
	0x03647740 MOV X19, X0
	0x03647744 STR W1, [X31 + 0xC]
	0x03647748 TBNZ X8, 0x0, 0x3647784
	0x0364774C ADRP X0, 0xAF5000
	0x03647750 LDR X0, [X0 + 0x2D0]
	0x03647754 BL 0x1C16CF4
	0x03647758 ADRP X0, 0xAF5000
	0x0364775C LDR X0, [X0 + 0x2F8]
	0x03647760 BL 0x1C16CF4
	0x03647764 ADRP X0, 0xAF5000
	0x03647768 LDR X0, [X0 + 0x300]
	0x0364776C BL 0x1C16CF4
	0x03647770 ADRP X0, 0xAF5000
	0x03647774 LDR X0, [X0 + 0x2E0]
	0x03647778 BL 0x1C16CF4
	0x0364777C MOVZ W8, 0x1
	0x03647780 STRB W8, [X23 + 0x5BE]
	0x03647784 CMP W22, 0xD
	0x03647788 B.LE 0x3647794
	0x0364778C MOV W23, W31
	0x03647790 B 0x36477A4
	0x03647794 CBZ X20, 0x36480C8
	0x03647798 LDR W8, [X20 + 0x34]
	0x0364779C AND W23, W8, 0x40
	0x036477A0 BFM W23, W8, 0x17, 0x0
	0x036477A4 SUB W8, W22, 0x3
	0x036477A8 CMP W8, 0x5F
	0x036477AC B.HI 0x3647910
	0x036477B0 ADRP X9, 0xFFFFFFFFFD550000
	0x036477B4 ADD X9, X9, 0x4F6
	0x036477B8 ADR X10, 0x10
	0x036477BC LDRH W11, [X9, X8, LSL #1]
	0x036477C0 ADD X10, X10, X11, 0x2, LSL
	0x036477C4 BR X10
	0x036477C8 CBZ X20, 0x36480C8
	0x036477CC LDR W1, [X20 + 0x10]
	0x036477D0 MOV X0, X19
	0x036477D4 LDP X20, X19, [X31 + 0x40]
	0x036477D8 LDP X22, X21, [X31 + 0x30]
	0x036477DC LDP X24, X23, [X31 + 0x20]
	0x036477E0 LDP X30, X25, [X31 + 0x10]
	0x036477E4 ADD X31, X31, 0x50
	0x036477E8 B 0x36481B4
	0x036477EC CBZ X20, 0x36480C8
	0x036477F0 LDR W3, [X20 + 0x2C]
	0x036477F4 CMP W3, 0x1
	0x036477F8 B.LT 0x3647C64
	0x036477FC LDR W8, [X20 + 0x10]
	0x03647800 CMP W8, 0x6
	0x03647804 B.EQ 0x3647810
	0x03647808 CMP W8, 0x3
	0x0364780C B.NE 0x3647C4C
	0x03647810 MOV W8, W31
	0x03647814 B 0x3647C50
	0x03647818 CBZ X20, 0x36480C8
	0x0364781C LDR W8, [X20 + 0x2C]
	0x03647820 CMP W8, 0x1
	0x03647824 B.LT 0x364784C
	0x03647828 LDR X1, [X20 + 0x20]
	0x0364782C MOV X0, X19
	0x03647830 BL 0x364840C
	0x03647834 LDR W3, [X20 + 0x2C]
	0x03647838 MOV W2, W0
	0x0364783C ORR W1, W23, 0x2
	0x03647840 MOV X0, X19
	0x03647844 BL 0x364827C
	0x03647848 LDR W8, [X20 + 0x2C]
	0x0364784C LDR W9, [X20 + 0x30]
	0x03647850 CMP W9, W8
	0x03647854 B.LE 0x36480B0
	0x03647858 LDR X1, [X20 + 0x20]
	0x0364785C LDR W21, [X20 + 0x10]
	0x03647860 MOV X0, X19
	0x03647864 BL 0x364840C
	0x03647868 LDR W8, [X20 + 0x30]
	0x0364786C MOVN W3, 0x80000000
	0x03647870 MOV W2, W0
	0x03647874 ORR W1, W21, W23, 0x0
	0x03647878 CMP W8, W3
	0x0364787C B.EQ 0x3647C88
	0x03647880 LDR W9, [X20 + 0x2C]
	0x03647884 SUB W3, W8, W9
	0x03647888 B 0x3647C88
	0x0364788C CBZ X20, 0x36480C8
	0x03647890 LDR W8, [X20 + 0x10]
	0x03647894 LDRH W2, [X20 + 0x28]
	0x03647898 ORR W1, W8, W23, 0x0
	0x0364789C B 0x3647908
	0x036478A0 CBZ X20, 0x36480C8
	0x036478A4 LDP W8, W9, [X20 + 0x2C]
	0x036478A8 MOVN W10, 0x80000000
	0x036478AC CMP W9, W10
	0x036478B0 B.NE 0x3647B30
	0x036478B4 CMP W8, 0x2
	0x036478B8 B.GE 0x3647B30
	0x036478BC CMP W8, 0x0
	0x036478C0 MOVZ W8, 0x1E
	0x036478C4 CINC W1, W8, NE
	0x036478C8 MOV X0, X19
	0x036478CC BL 0x36481B4
	0x036478D0 B 0x3647B50
	0x036478D4 CBZ X20, 0x36480C8
	0x036478D8 LDR X1, [X20 + 0x20]
	0x036478DC LDR W21, [X20 + 0x10]
	0x036478E0 MOV X0, X19
	0x036478E4 BL 0x364840C
	0x036478E8 B 0x3647900
	0x036478EC CBZ X20, 0x36480C8
	0x036478F0 LDR W1, [X20 + 0x2C]
	0x036478F4 LDR W21, [X20 + 0x10]
	0x036478F8 MOV X0, X19
	0x036478FC BL 0x3648554
	0x03647900 ORR W1, W21, W23, 0x0
	0x03647904 MOV W2, W0
	0x03647908 MOV X0, X19
	0x0364790C B 0x3647B18
	0x03647910 SUB W8, W22, 0x98
	0x03647914 CMP W8, 0xA
	0x03647918 B.HI 0x36480CC
	0x0364791C ADRP X9, 0xFFFFFFFFFD550000
	0x03647920 ADD X9, X9, 0x5B6
	0x03647924 ADR X10, 0x10
	0x03647928 LDRH W11, [X9, X8, LSL #1]
	0x0364792C ADD X10, X10, X11, 0x2, LSL
	0x03647930 BR X10
	0x03647934 CBZ X20, 0x36480C8
	0x03647938 LDR W8, [X20 + 0x30]
	0x0364793C LDR W21, [X19 + 0x18]
	0x03647940 MOVN W9, 0x80000000
	0x03647944 CMP W8, W9
	0x03647948 B.NE 0x3647CA4
	0x0364794C LDR W9, [X20 + 0x2C]
	0x03647950 CMP W9, 0x2

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+12], W7
	015 Move X19, 0xD9A000
	016 Move X29, 0xAB5000
	017 Move W8, [X19+1453]
	018 Move X27, [X31+112]
	019 Move X29, [X29+1536]
	020 Move W22, W6
	021 Move W21, W5
	022 Move W24, W4
	023 Move W25, W3
	024 Move X26, X2
	025 Move X23, X1
	026 Move X20, X0
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {42}
	031 Move X0, 0xAF5000
	032 Move X0, [X0+1944]
	033 Call 0x1C17CF4
	034 Move X0, 0xAB5000
	035 Move X0, [X0+1536]
	036 Call 0x1C17CF4
	037 Move X0, 0xAAF000
	038 Move X0, [X0+1392]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X19+1453], W8
	042 Move X0, [X29]
	043 Move X19, 0xAAF000
	044 Move W8, [X0+224]
	045 Move X19, [X19+1392]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X27
	050 Move X1, X31
	051 Call Regex.ValidateMatchTimeout, X0
	052 Move X8, [X29]
	053 Move X0, [X19]
	054 Move X8, [X8+184]
	055 Move W9, [X0+224]
	056 Move X28, [X8+56]
	057 Compare W9, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X28
	061 Move X1, X27
	062 Move X2, X31
	063 Call TimeSpan.op_Equality, X0, X1
	064 And W8, W0, 1
	065 Move [X20+116], W8
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {85}
	070 Move X0, [X29]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, [X19]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X8, [X29]
	081 Move X1, X31
	082 Move X8, [X8+184]
	083 Add X0, X8, 56
	084 Call TimeSpan.get_TotalMilliseconds, X0
	085 Move X0, [X19]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Add X0, X31, 112
	091 Move X1, X31
	092 Call TimeSpan.get_TotalMilliseconds, X0
	093 Move D1, 0.5
	094 Add D0, D0, D1
	095 Move X9, 0x7FF00000
	096 Move D1, X9
	097 NotImplemented "Instruction FCVTZS not yet implemented."
	098 Move W10, 0x80000000
	099 NotImplemented "Instruction FCMP not yet implemented."
	100 NotImplemented "Instruction CSEL not yet implemented."
	101 Move [X20+104], X23
	102 Move [X20+32], X26
	103 Move [X20+16], W25
	104 Move [X20+20], W24
	105 Move [X20+112], W8
	106 Move [X20+24], W21
	107 Compare X23, 0
	108 JumpIfEqual {247}
	109 Move X0, X23
	110 Move X1, X31
	111 Call Regex.get_RightToLeft, X0
	112 Move W8, W0
	113 Move X0, [X20+104]
	114 And W31, W8, 1
	115 Move TEMP, 0
	116 Not TEMP
	117 Move W8, TEMP
	118 NotImplemented "Instruction CSNEG not yet implemented."
	119 Compare X0, 0
	120 JumpIfEqual {247}
	121 Move X23, 0xAF5000
	122 Move X23, [X23+1944]
	123 Move X1, X31
	124 Call Regex.get_RightToLeft, X0
	125 And W31, W0, 1
	126 Move W8, 20
	127 Move W9, 16
	128 NotImplemented "Instruction CSEL not yet implemented."
	129 Move W25, [X20]
	130 Move [X20+40], W21
	131 Compare W22, 0
	132 JumpIfNotEqual {158}
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X0, [X23]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X19, 0xD9A000
	140 Move W8, [X19+1472]
	141 Compare W8, 0
	142 JumpIfNotEqual {148}
	143 Move X0, 0xAF5000
	144 Move X0, [X0+1944]
	145 Call 0x1C17CF4
	146 Move W8, 1
	147 Move [X19+1472], W8
	148 Move X0, [X23]
	149 Move W8, [X0+224]
	150 Compare W8, 0
	151 JumpIfNotEqual {154}
	152 Call 0x1C17DFC
	153 Move X0, [X23]
	154 Move X8, [X0+184]
	155 Move X0, [X8]
	156 Add W8, W24, W21
	157 Move [X20+40], W8
	158 Move W8, [X20+116]
	159 Compare W8, 0
	160 JumpIfNotEqual {168}
	161 Move W8, 1000
	162 Move X0, X31
	163 Move [X20+124], W8
	164 Call Environment.get_TickCount
	165 Move W8, [X20+112]
	166 Add W8, W8, W0
	167 Move [X20+120], W8
	168 Move W19, W31
	169 Move X8, [X20]
	170 Move X0, X20
	171 Move X9, [X8+392]
	172 Move X1, [X8+400]
	173 NotImplemented "Instruction BLR not yet implemented."
	174 Move TEMP, X0
	175 And TEMP, TEMP, 1
	176 Compare TEMP, 1
	177 JumpIfNotEqual {219}
	178 Move W8, [X20+116]
	179 Compare W8, 0
	180 JumpIfEqual {223}
	181 Move TEMP, X19
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfEqual {187}
	185 Move X0, X20
	186 Call RegexRunner.InitMatch, X0
	187 Move X8, [X20]
	188 Move X0, X20
	189 Move X9, [X8+376]
	190 Move X1, [X8+384]
	191 NotImplemented "Instruction BLR not yet implemented."
	192 Move X8, [X20+96]
	193 Compare X8, 0
	194 JumpIfEqual {247}
	195 Move X8, [X8+104]
	196 Compare X8, 0
	197 JumpIfEqual {247}
	198 Move W9, [X8+24]
	199 Compare W9, 0
	200 JumpIfEqual {248}
	201 Move W8, [X8+32]
	202 NotImplemented "Instruction CMP not yet implemented."
	203 Move X8, [X20+48]
	204 Compare X8, 0
	205 JumpIfEqual {247}
	206 Move X9, [X8+24]
	207 Move X8, [X20+64]
	208 Move [X20+56], W9
	209 Compare X8, 0
	210 JumpIfEqual {247}
	211 Move X9, [X8+24]
	212 Move X8, [X20+80]
	213 Move [X20+72], W9
	214 Compare X8, 0
	215 JumpIfEqual {247}
	216 Move X8, [X8+24]
	217 Move W19, 1
	218 Move [X20+88], W8
	219 Move W8, [X20+40]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Add W8, W8, W24
	222 Move [X20+40], W8
	223 Move X0, X20
	224 Call RegexRunner.DoCheckTimeout, X0
	225 Move TEMP, X19
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfNotEqual {185}
	229 Move W8, [X31+12]
	230 Move X0, X20
	231 And W1, W8, 1
	232 Call RegexRunner.TidyMatch, X0, X1
	233 Move X20, [X31+96]
	234 Move X19, [X31+104]
	235 Move X22, [X31+80]
	236 Move X21, [X31+88]
	237 Move X24, [X31+64]
	238 Move X23, [X31+72]
	239 Move X26, [X31+48]
	240 Move X25, [X31+56]
	241 Move X28, [X31+32]
	242 Move X27, [X31+40]
	243 Move X29, [X31+16]
	244 Move X30, [X31+24]
	245 Add X31, X31, 112
	246 Return X0
	247 Call 0x1C17F20
	248 Call 0x1C17F28

Method: System.Void StartTimeoutWatch()

Disassembly:
	0x03647954 B.GE 0x3647CA4
	0x03647958 LDR W8, [X19 + 0x38]
	0x0364795C LDR W9, [X19 + 0x28]
	0x03647960 SUB W8, W8, 0x1
	0x03647964 CMP W8, W9
	0x03647968 STR W8, [X19 + 0x38]
	0x0364796C B.CS 0x364814C
	0x03647970 LDR X9, [X19 + 0x20]
	0x03647974 SUB W1, W22, 0x82
	0x03647978 MOV X0, X19
	0x0364797C LDR W2, [X9, W8, SXTW]
	0x03647980 BL 0x36475E8
	0x03647984 B 0x3647CE4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+116]
	004 Compare W8, 0
	005 JumpIfNotEqual {14}
	006 Move W8, 1000
	007 Move X19, X0
	008 Move [X0+124], W8
	009 Move X0, X31
	010 Call Environment.get_TickCount
	011 Move W8, [X19+112]
	012 Add W8, W8, W0
	013 Move [X19+120], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 

Method: System.Void CheckTimeout()

Disassembly:
	0x0363FB28 CMP W8, 0x17
	0x0363FB2C B.EQ 0x363FBEC
	0x0363FB30 CMP W8, 0x19
	0x0363FB34 B.NE 0x363FB88

ISIL:
	001 Move W8, [X0+116]
	002 Compare W8, 0
	003 JumpIfEqual {5}
	004 Return 
	005 Call RegexRunner.DoCheckTimeout, X0
	006 Return 

Method: System.Void DoCheckTimeout()

Disassembly:
	0x03647BA0 MOV X0, X20
	0x03647BA4 LDR X1, [X8 + 0x38]
	0x03647BA8 BL 0x278D43C
	0x03647BAC LDR W8, [X19 + 0x28]
	0x03647BB0 CMP W22, W8
	0x03647BB4 B.CS 0x364814C
	0x03647BB8 LDR X8, [X19 + 0x20]
	0x03647BBC ADD W9, W22, 0x1
	0x03647BC0 MOVZ W1, 0x26
	0x03647BC4 MOV X0, X19
	0x03647BC8 MOV W2, W31
	0x03647BCC STR W21, [X8, X22, LSL #2]
	0x03647BD0 STR W9, [X19 + 0x38]
	0x03647BD4 BL 0x36475E8
	0x03647BD8 ADRP X8, 0xAF5000
	0x03647BDC LDR X8, [X8 + 0x2F8]
	0x03647BE0 LDR W21, [X19 + 0x18]
	0x03647BE4 LDRSW X22, [X19 + 0x38]
	0x03647BE8 LDR X20, [X8]
	0x03647BEC LDR X0, [X20 + 0x20]
	0x03647BF0 LDRB W8, [X0 + 0x135]
	0x03647BF4 TBNZ X8, 0x0, 0x3647BFC
	0x03647BF8 BL 0x1C5C684
	0x03647BFC LDR W8, [X19 + 0x28]
	0x03647C00 CMP W22, W8
	0x03647C04 B.LT 0x3647C30
	0x03647C08 LDR X0, [X20 + 0x20]
	0x03647C0C ADD X20, X19, 0x20
	0x03647C10 LDRB W8, [X0 + 0x135]
	0x03647C14 TBNZ X8, 0x0, 0x3647C1C
	0x03647C18 BL 0x1C5C684
	0x03647C1C LDR X8, [X0 + 0xC0]
	0x03647C20 MOV X0, X20
	0x03647C24 LDR X1, [X8 + 0x38]
	0x03647C28 BL 0x278D43C
	0x03647C2C LDR W8, [X19 + 0x28]
	0x03647C30 CMP W22, W8
	0x03647C34 B.CS 0x364814C
	0x03647C38 LDR X8, [X19 + 0x20]
	0x03647C3C ADD W9, W22, 0x1
	0x03647C40 STR W21, [X8, X22, LSL #2]
	0x03647C44 STR W9, [X19 + 0x38]
	0x03647C48 B 0x36480B0
	0x03647C4C MOVZ W8, 0x1
	0x03647C50 LDRH W2, [X20 + 0x28]
	0x03647C54 ORR W1, W8, W23, 0x0
	0x03647C58 MOV X0, X19
	0x03647C5C BL 0x364827C
	0x03647C60 LDR W3, [X20 + 0x2C]
	0x03647C64 LDR W8, [X20 + 0x30]
	0x03647C68 SUBS W9, W8, W3

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W8, [X0+124]
	007 Subtract W8, W8, 1
	008 Move [X0+124], W8
	009 Move W8, 1000
	010 Move X19, X0
	011 Move [X0+124], W8
	012 Move X0, X31
	013 Call Environment.get_TickCount
	014 Move W8, [X19+120]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move TEMP, X8
	018 And TEMP, TEMP, -2147483648
	019 Compare TEMP, -2147483648
	020 JumpIfNotEqual {27}
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 Return 
	027 Move X21, [X19+104]
	028 Move X20, [X19+32]
	029 Move X0, X21
	030 Call 0x19913C0
	031 Move X0, 0xAAF000
	032 Move X21, [X21+24]
	033 Move W19, [X19+112]
	034 Move X0, [X0+1392]
	035 Call 0x1C17D08
	036 Call 0x19913D0
	037 NotImplemented "Instruction SCVTF not yet implemented."
	038 Move X0, X31
	039 Call TimeSpan.FromMilliseconds, V0
	040 Move X19, X0
	041 Move X0, 0xAF6000
	042 Move X0, [X0+1520]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X1, X20
	046 Move X2, X21
	047 Move X3, X19
	048 Move X22, X0
	049 Call RegexMatchTimeoutException..ctor, X0, X1, X2, X3
	050 Move X0, 0xAF6000
	051 Move X0, [X0+1528]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X22
	055 Call 0x1C17DEC

Method: System.Void Go()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Boolean FindFirstChar()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void InitTrackCount()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void InitMatch()

Disassembly:
	0x03647988 CBZ X20, 0x36480C8
	0x0364798C LDR X8, [X20 + 0x18]
	0x03647990 CBZ X8, 0x36480C8
	0x03647994 LDR W8, [X8 + 0x18]
	0x03647998 SUB W8, W8, 0x1
	0x0364799C CMP W8, W21
	0x036479A0 B.GT 0x3647A9C
	0x036479A4 B 0x36480B0
	0x036479A8 MOVZ W1, 0x22
	0x036479AC MOV X0, X19
	0x036479B0 BL 0x36481B4
	0x036479B4 MOVZ W1, 0x1F
	0x036479B8 B 0x36477D0
	0x036479BC MOVZ W1, 0x22
	0x036479C0 B 0x3647A94
	0x036479C4 MOVZ W1, 0x22
	0x036479C8 B 0x36477D0
	0x036479CC CBNZ W21, 0x36480B0
	0x036479D0 MOVZ W1, 0x22
	0x036479D4 MOV X0, X19
	0x036479D8 BL 0x36481B4
	0x036479DC ADRP X8, 0xAF5000
	0x036479E0 LDR X8, [X8 + 0x2F8]
	0x036479E4 LDR W22, [X19 + 0x18]
	0x036479E8 LDRSW X23, [X19 + 0x38]
	0x036479EC LDR X21, [X8]
	0x036479F0 LDR X0, [X21 + 0x20]
	0x036479F4 LDRB W8, [X0 + 0x135]
	0x036479F8 TBNZ X8, 0x0, 0x3647A00
	0x036479FC BL 0x1C5C684
	0x03647A00 LDR W8, [X19 + 0x28]
	0x03647A04 CMP W23, W8
	0x03647A08 B.LT 0x3647A34
	0x03647A0C LDR X0, [X21 + 0x20]
	0x03647A10 ADD X21, X19, 0x20
	0x03647A14 LDRB W8, [X0 + 0x135]
	0x03647A18 TBNZ X8, 0x0, 0x3647A20
	0x03647A1C BL 0x1C5C684
	0x03647A20 LDR X8, [X0 + 0xC0]
	0x03647A24 MOV X0, X21
	0x03647A28 LDR X1, [X8 + 0x38]
	0x03647A2C BL 0x278D43C
	0x03647A30 LDR W8, [X19 + 0x28]
	0x03647A34 CMP W23, W8
	0x03647A38 B.CS 0x364814C
	0x03647A3C LDR X8, [X19 + 0x20]
	0x03647A40 ADD W9, W23, 0x1
	0x03647A44 MOVZ W1, 0x17
	0x03647A48 MOV X0, X19
	0x03647A4C MOV W2, W31
	0x03647A50 STR W22, [X8, X23, LSL #2]
	0x03647A54 STR W9, [X19 + 0x38]
	0x03647A58 BL 0x36475E8
	0x03647A5C CBZ X20, 0x36480C8
	0x03647A60 LDR W1, [X20 + 0x2C]
	0x03647A64 MOV X0, X19
	0x03647A68 BL 0x3648554
	0x03647A6C MOV W2, W0
	0x03647A70 MOVZ W1, 0x25
	0x03647A74 MOV X0, X19
	0x03647A78 BL 0x36475E8
	0x03647A7C B 0x3647F4C
	0x03647A80 CBNZ W21, 0x36480B0
	0x03647A84 MOVZ W1, 0x22
	0x03647A88 MOV X0, X19
	0x03647A8C BL 0x36481B4
	0x03647A90 MOVZ W1, 0x1F
	0x03647A94 MOV X0, X19
	0x03647A98 BL 0x36481B4
	0x03647A9C ADRP X8, 0xAF5000
	0x03647AA0 LDR X8, [X8 + 0x2F8]
	0x03647AA4 LDR W21, [X19 + 0x18]
	0x03647AA8 LDRSW X22, [X19 + 0x38]
	0x03647AAC LDR X20, [X8]
	0x03647AB0 LDR X0, [X20 + 0x20]
	0x03647AB4 LDRB W8, [X0 + 0x135]
	0x03647AB8 TBNZ X8, 0x0, 0x3647AC0
	0x03647ABC BL 0x1C5C684
	0x03647AC0 LDR W8, [X19 + 0x28]
	0x03647AC4 CMP W22, W8
	0x03647AC8 B.LT 0x3647AF4
	0x03647ACC LDR X0, [X20 + 0x20]
	0x03647AD0 ADD X20, X19, 0x20
	0x03647AD4 LDRB W8, [X0 + 0x135]
	0x03647AD8 TBNZ X8, 0x0, 0x3647AE0
	0x03647ADC BL 0x1C5C684
	0x03647AE0 LDR X8, [X0 + 0xC0]
	0x03647AE4 MOV X0, X20
	0x03647AE8 LDR X1, [X8 + 0x38]
	0x03647AEC BL 0x278D43C
	0x03647AF0 LDR W8, [X19 + 0x28]
	0x03647AF4 CMP W22, W8
	0x03647AF8 B.CS 0x364814C
	0x03647AFC LDR X8, [X19 + 0x20]
	0x03647B00 ADD W9, W22, 0x1
	0x03647B04 MOVZ W1, 0x17
	0x03647B08 MOV X0, X19
	0x03647B0C STR W21, [X8, X22, LSL #2]
	0x03647B10 STR W9, [X19 + 0x38]
	0x03647B14 MOV W2, W31
	0x03647B18 LDP X20, X19, [X31 + 0x40]
	0x03647B1C LDP X22, X21, [X31 + 0x30]
	0x03647B20 LDP X24, X23, [X31 + 0x20]
	0x03647B24 LDP X30, X25, [X31 + 0x10]
	0x03647B28 ADD X31, X31, 0x50
	0x03647B2C B 0x36475E8
	0x03647B30 MOVZ W9, 0x1
	0x03647B34 CMP W8, 0x0
	0x03647B38 MOVZ W10, 0x1A
	0x03647B3C SUB W8, W9, W8
	0x03647B40 CINC W1, W10, NE
	0x03647B44 CSEL W2, W31, W8, EQ
	0x03647B48 MOV X0, X19
	0x03647B4C BL 0x36475E8
	0x03647B50 LDR W8, [X20 + 0x2C]
	0x03647B54 CBNZ W8, 0x3647BD8
	0x03647B58 ADRP X8, 0xAF5000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0xD9A000
	013 Move W8, [X20+1454]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xAAE000
	020 Move X0, [X0+3672]
	021 Call 0x1C17CF4
	022 Move X0, 0xAF6000
	023 Move X0, [X0+1512]
	024 Call 0x1C17CF4
	025 Move X0, 0xAF5000
	026 Move X0, [X0+1944]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1454], W8
	030 Move X0, [X19+96]
	031 Move X20, [X19+104]
	032 Compare X0, 0
	033 JumpIfEqual {43}
	034 Move X8, [X0]
	035 Move X2, [X19+32]
	036 Move W3, [X19+16]
	037 Move W4, [X19+20]
	038 Move W5, [X19+24]
	039 Move X9, [X8+376]
	040 Move X6, [X8+384]
	041 Move X1, X20
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Compare X20, 0
	044 JumpIfEqual {140}
	045 Move X25, [X20+48]
	046 Move W22, [X20+72]
	047 Move X23, [X19+32]
	048 Move W24, [X19+16]
	049 Move W27, [X19+20]
	050 Move W21, [X19+24]
	051 Compare X25, 0
	052 JumpIfEqual {68}
	053 Move X8, 0xAF6000
	054 Move X8, [X8+1512]
	055 Move X0, [X8]
	056 Call 0x1C17F10
	057 Subtract W6, W27, W24
	058 Move X1, X20
	059 Move X2, X25
	060 Move W3, W22
	061 Move X4, X23
	062 Move W5, W24
	063 Move W7, W21
	064 Move X26, X0
	065 Move [X31], X31
	066 Call MatchSparse..ctor, X0, X1, X2, X3, X4, X5, X6, X7
	067 Move [X19+96], X26
	068 Move X8, 0xAF5000
	069 Move X8, [X8+1944]
	070 Move X0, [X8]
	071 Call 0x1C17F10
	072 Subtract W5, W27, W24
	073 Move X1, X20
	074 Move W2, W22
	075 Move X3, X23
	076 Move W4, W24
	077 Move W6, W21
	078 Move X7, X31
	079 Move X25, X0
	080 Call Match..ctor, X0, X1, X2, X3, X4, X5, X6
	081 Move [X19+96], X25
	082 Move X8, [X19+80]
	083 Compare X8, 0
	084 JumpIfEqual {96}
	085 Move X9, [X19+48]
	086 Compare X9, 0
	087 JumpIfEqual {140}
	088 Move X10, [X9+24]
	089 Move X9, [X19+64]
	090 Move [X19+56], W10
	091 Compare X9, 0
	092 JumpIfEqual {140}
	093 Move X9, [X9+24]
	094 Move [X19+72], W9
	095 Move W22, [X8+24]
	096 Move X8, [X19]
	097 Move X0, X19
	098 Move X9, [X8+408]
	099 Move X1, [X8+416]
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X23, 0xAAE000
	102 Move W8, [X19+92]
	103 Move X23, [X23+3672]
	104 Move W22, 32
	105 Move W9, 16
	106 Move W8, W8
	107 ShiftRight W8, 29
	108 And W8, W8, 0xFFFFFFF
	109 Move X0, [X23]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CSEL not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W1, W20
	114 NotImplemented "Instruction CSEL not yet implemented."
	115 Call 0x1C17D6C
	116 Move [X19+48], X0
	117 Move [X19+56], W20
	118 Move X0, [X23]
	119 Move W1, W21
	120 Call 0x1C17D6C
	121 Move [X19+64], X0
	122 Move [X19+72], W21
	123 Move X0, [X23]
	124 Move W1, 32
	125 Call 0x1C17D6C
	126 Move [X19+80], X0
	127 Move [X19+88], W22
	128 Move X20, [X31+80]
	129 Move X19, [X31+88]
	130 Move X22, [X31+64]
	131 Move X21, [X31+72]
	132 Move X24, [X31+48]
	133 Move X23, [X31+56]
	134 Move X26, [X31+32]
	135 Move X25, [X31+40]
	136 Move X30, [X31+16]
	137 Move X27, [X31+24]
	138 Add X31, X31, 96
	139 Return 
	140 Call 0x1C17F20

Method: System.Text.RegularExpressions.Match TidyMatch(System.Boolean quick)

Disassembly:
	0x03647B5C LDR X8, [X8 + 0x2F8]
	0x03647B60 LDR W21, [X19 + 0x18]
	0x03647B64 LDRSW X22, [X19 + 0x38]
	0x03647B68 LDR X20, [X8]
	0x03647B6C LDR X0, [X20 + 0x20]
	0x03647B70 LDRB W8, [X0 + 0x135]
	0x03647B74 TBNZ X8, 0x0, 0x3647B7C
	0x03647B78 BL 0x1C5C684
	0x03647B7C LDR W8, [X19 + 0x28]
	0x03647B80 CMP W22, W8
	0x03647B84 B.LT 0x3647BB0
	0x03647B88 LDR X0, [X20 + 0x20]
	0x03647B8C ADD X20, X19, 0x20
	0x03647B90 LDRB W8, [X0 + 0x135]
	0x03647B94 TBNZ X8, 0x0, 0x3647B9C
	0x03647B98 BL 0x1C5C684
	0x03647B9C LDR X8, [X0 + 0xC0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, 1
	005 Compare TEMP, 1
	006 JumpIfNotEqual {8}
	007 Move X19, X31
	008 Move X19, [X0+96]
	009 Move [X0+96], X31
	010 Compare X19, 0
	011 JumpIfEqual {22}
	012 Move X8, [X19]
	013 Move W1, [X0+40]
	014 Move X0, X19
	015 Move X9, [X8+520]
	016 Move X2, [X8+528]
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return X0
	022 Call 0x1C17F20

Method: System.Void EnsureStorage()

Disassembly:
	0x0363DB88 SUB W20, W20, 0x1
	0x0363DB8C CMP W20, 0x0
	0x0363DB90 B.LE 0x363E618
	0x0363DB94 MOV X0, X19
	0x0363DB98 BL 0x363D210
	0x0363DB9C AND W8, W0, 0xFFFF
	0x0363DBA0 CMP W8, W21, UXTH
	0x0363DBA4 B.EQ 0x363DB88
	0x0363DBA8 B 0x363E4F8
	0x0363DBAC MOVZ W1, 0x1
	0x0363DBB0 MOV X0, X19
	0x0363DBB4 BL 0x363D16C
	0x0363DBB8 LDRB W8, [X19 + 0x98]
	0x0363DBBC MOVZ W9, 0x10
	0x0363DBC0 MOVZ W10, 0x28
	0x0363DBC4 MOVZ W11, 0x14
	0x0363DBC8 CMP W8, 0x0
	0x0363DBCC CSEL X8, X10, X9, EQ

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W9, [X0+72]
	004 Move W8, [X0+92]
	005 Move X19, X0
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, X19
	008 Call RegexRunner.DoubleStack, X0
	009 Move W8, [X19+92]
	010 Move W9, [X19+56]
	011 Move W8, W8
	012 ShiftRight W8, 30
	013 And W8, W8, 0x1FFFFFFF
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call RegexRunner.DoubleTrack, X0
	019 Return 
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

Method: System.Boolean IsBoundary(System.Int32 index, System.Int32 startpos, System.Int32 endpos)

Disassembly:
	0x0363FD20 TBNZ X8, 0x0, 0x363FD30
	0x0363FD24 MOV X0, X20
	0x0363FD28 BL 0x1C16CF4
	0x0363FD2C STRB W28, [X25 + 0x57B]
	0x0363FD30 LDR X8, [X21 + 0x18]
	0x0363FD34 CBZ X8, 0x363FDE4
	0x0363FD38 LDR W8, [X8 + 0x18]
	0x0363FD3C CBZ W8, 0x363FDE4
	0x0363FD40 MOV X0, X21
	0x0363FD44 MOV W1, W31
	0x0363FD48 BL 0x363BE48
	0x0363FD4C CBZ X0, 0x363FE3C
	0x0363FD50 LDR W8, [X0 + 0x10]
	0x0363FD54 CMP W8, W23
	0x0363FD58 B.EQ 0x363FD84
	0x0363FD5C CMP W23, 0x1A
	0x0363FD60 B.NE 0x363FD70
	0x0363FD64 SUB W9, W8, 0x3
	0x0363FD68 CMP W9, 0x3
	0x0363FD6C B.CC 0x363FD84
	0x0363FD70 CMP W23, 0x1B
	0x0363FD74 B.NE 0x363FDE4
	0x0363FD78 SUB W8, W8, 0x6
	0x0363FD7C CMP W8, 0x2
	0x0363FD80 B.HI 0x363FDE4
	0x0363FD84 LDR W8, [X21 + 0x2C]
	0x0363FD88 LDR W9, [X0 + 0x2C]
	0x0363FD8C CBNZ W8, 0x363FD98
	0x0363FD90 CMP W9, 0x1
	0x0363FD94 B.GT 0x363FDE4
	0x0363FD98 LDR W8, [X0 + 0x30]
	0x0363FD9C CMP W8, W9, LSL
	0x0363FDA0 B.LT 0x363FDE4
	0x0363FDA4 CMP W9, 0x1
	0x0363FDA8 B.LT 0x363FDC0
	0x0363FDAC UDIV W10, W26, W9
	0x0363FDB0 MUL W9, W9, W22
	0x0363FDB4 CMP W10, W22
	0x0363FDB8 CSEL W22, W27, W9, LT
	0x0363FDBC STR W22, [X0 + 0x2C]
	0x0363FDC0 CMP W8, 0x1
	0x0363FDC4 MOV X21, X0
	0x0363FDC8 B.LT 0x363FD1C
	0x0363FDCC UDIV W9, W26, W8
	0x0363FDD0 MUL W8, W8, W24
	0x0363FDD4 CMP W9, W24
	0x0363FDD8 CSEL W24, W27, W8, LT
	0x0363FDDC STR W24, [X0 + 0x30]
	0x0363FDE0 B 0x363FD18
	0x0363FDE4 MOVN W8, 0x80000000
	0x0363FDE8 CMP W22, W8
	0x0363FDEC B.NE 0x363FE1C
	0x0363FDF0 ADRP X8, 0xAFD000
	0x0363FDF4 LDR W19, [X19 + 0x34]
	0x0363FDF8 LDR X8, [X8 + 0x3A8]
	0x0363FDFC LDR X0, [X8]
	0x0363FE00 BL 0x1C16F10
	0x0363FE04 MOV X1, X31
	0x0363FE08 MOV X21, X0
	0x0363FE0C BL 0x33BDD8C
	0x0363FE10 MOVZ W8, 0x16
	0x0363FE14 STR W8, [X21 + 0x10]
	0x0363FE18 STR W19, [X21 + 0x34]
	0x0363FE1C MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDA2000
	008 Move W8, [X23+1455]
	009 Move W20, W3
	010 Move W22, W2
	011 Move W19, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xAFD000
	018 Move X0, [X0+2272]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1455], W8
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, [X21+32]
	024 Compare X0, 0
	025 JumpIfEqual {73}
	026 Subtract W1, W19, 1
	027 Move X2, X31
	028 Call String.get_Chars, X0, X1
	029 Move X8, 0xAFD000
	030 Move X8, [X8+2272]
	031 Move W22, W0
	032 Move X8, [X8]
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move W0, W22
	039 Move X1, X31
	040 Call RegexCharClass.IsWordChar, X0
	041 And W22, W0, 1
	042 Move W22, W31
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X21+32]
	045 Compare X0, 0
	046 JumpIfEqual {73}
	047 Move W1, W19
	048 Move X2, X31
	049 Call String.get_Chars, X0, X1
	050 Move X8, 0xAFD000
	051 Move X8, [X8+2272]
	052 Move W19, W0
	053 Move X8, [X8]
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {59}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move W0, W19
	060 Move X1, X31
	061 Call RegexCharClass.IsWordChar, X0
	062 And W8, W0, 1
	063 Move W8, W31
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Boolean IsECMABoundary(System.Int32 index, System.Int32 startpos, System.Int32 endpos)

Disassembly:
	0x0363FE20 LDP X20, X19, [X31 + 0x50]
	0x0363FE24 LDP X22, X21, [X31 + 0x40]
	0x0363FE28 LDP X24, X23, [X31 + 0x30]
	0x0363FE2C LDP X26, X25, [X31 + 0x20]
	0x0363FE30 LDP X28, X27, [X31 + 0x10]
	0x0363FE34 LDR X30, [X31], #0x60
	0x0363FE38 RET
	0x0363FE3C BL 0x1C16F20
	0x0363FE40 STR X30, [X31 - 0x10]!
	0x0363FE44 CBZ X0, 0x363FE60
	0x0363FE48 LDR W8, [X0 + 0x10]
	0x0363FE4C CMP W8, 0x1D
	0x0363FE50 B.NE 0x363FE64
	0x0363FE54 MOV W1, W31
	0x0363FE58 BL 0x363BE48
	0x0363FE5C CBNZ X0, 0x363FE48
	0x0363FE60 BL 0x1C16F20
	0x0363FE64 LDR X30, [X31], #0x10
	0x0363FE68 RET
	0x0363FE6C STR X30, [X31 - 0x30]!
	0x0363FE70 STP X22, X21, [X31 + 0x10]
	0x0363FE74 STP X20, X19, [X31 + 0x20]
	0x0363FE78 ADRP X20, 0xDA1000
	0x0363FE7C ADRP X22, 0xAFC000
	0x0363FE80 LDRB W8, [X20 + 0x575]
	0x0363FE84 LDR X22, [X22 + 0x8E0]
	0x0363FE88 MOV X19, X0
	0x0363FE8C TBNZ X8, 0x0, 0x363FEA4
	0x0363FE90 ADRP X0, 0xAFC000
	0x0363FE94 LDR X0, [X0 + 0x8E0]
	0x0363FE98 BL 0x1C16CF4
	0x0363FE9C MOVZ W8, 0x1
	0x0363FEA0 STRB W8, [X20 + 0x575]
	0x0363FEA4 LDR X0, [X22]
	0x0363FEA8 LDR X20, [X19 + 0x20]
	0x0363FEAC LDR W8, [X0 + 0xE0]
	0x0363FEB0 CBNZ W8, 0x363FEB8
	0x0363FEB4 BL 0x1C16DFC
	0x0363FEB8 MOV X0, X20
	0x0363FEBC MOV X1, X31
	0x0363FEC0 BL 0x3635440
	0x0363FEC4 TBZ X0, 0x0, 0x363FED8
	0x0363FEC8 MOVZ W8, 0x16
	0x0363FECC STR W8, [X19 + 0x10]
	0x0363FED0 STR X31, [X19 + 0x20]
	0x0363FED4 B 0x363FF74
	0x0363FED8 LDR X0, [X22]
	0x0363FEDC LDR X20, [X19 + 0x20]
	0x0363FEE0 LDR W8, [X0 + 0xE0]
	0x0363FEE4 CBNZ W8, 0x363FEEC
	0x0363FEE8 BL 0x1C16DFC
	0x0363FEEC MOV X0, X20
	0x0363FEF0 MOV X1, X31
	0x0363FEF4 BL 0x3635500
	0x0363FEF8 LDR X8, [X22]
	0x0363FEFC LDR X20, [X19 + 0x20]
	0x0363FF00 MOV W21, W0
	0x0363FF04 LDR W9, [X8 + 0xE0]
	0x0363FF08 CBNZ W9, 0x363FF14
	0x0363FF0C MOV X0, X8
	0x0363FF10 BL 0x1C16DFC
	0x0363FF14 MOV X0, X20
	0x0363FF18 MOV X1, X31
	0x0363FF1C TBZ X21, 0x0, 0x363FF38

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xDA2000
	008 Move W8, [X23+1456]
	009 Move W20, W3
	010 Move W22, W2
	011 Move W19, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xAFD000
	018 Move X0, [X0+2272]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1456], W8
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, [X21+32]
	024 Compare X0, 0
	025 JumpIfEqual {73}
	026 Subtract W1, W19, 1
	027 Move X2, X31
	028 Call String.get_Chars, X0, X1
	029 Move X8, 0xAFD000
	030 Move X8, [X8+2272]
	031 Move W22, W0
	032 Move X8, [X8]
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move W0, W22
	039 Move X1, X31
	040 Call RegexCharClass.IsECMAWordChar, X0
	041 And W22, W0, 1
	042 Move W22, W31
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, [X21+32]
	045 Compare X0, 0
	046 JumpIfEqual {73}
	047 Move W1, W19
	048 Move X2, X31
	049 Call String.get_Chars, X0, X1
	050 Move X8, 0xAFD000
	051 Move X8, [X8+2272]
	052 Move W19, W0
	053 Move X8, [X8]
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {59}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move W0, W19
	060 Move X1, X31
	061 Call RegexCharClass.IsECMAWordChar, X0
	062 And W8, W0, 1
	063 Move W8, W31
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 NotImplemented "Instruction CSET not yet implemented."
	070 Move X30, [X31+48]
	071 Move X23, [X31+56]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Void DoubleTrack()

Disassembly:
	0x03647D0C MOV W2, W21
	0x03647D10 B 0x3648094
	0x03647D14 CBZ X20, 0x36480C8
	0x03647D18 LDR X8, [X20 + 0x18]
	0x03647D1C CBZ X8, 0x36480C8
	0x03647D20 LDR W8, [X8 + 0x18]
	0x03647D24 SUB W8, W8, 0x1
	0x03647D28 CMP W8, W21
	0x03647D2C B.LE 0x3647F54
	0x03647D30 LDR W22, [X19 + 0x38]
	0x03647D34 LDR W8, [X19 + 0x28]
	0x03647D38 SUB W23, W22, 0x1
	0x03647D3C CMP W23, W8
	0x03647D40 STR W23, [X19 + 0x38]
	0x03647D44 B.CS 0x364814C
	0x03647D48 ADRP X9, 0xAF5000
	0x03647D4C LDR X9, [X9 + 0x2F8]
	0x03647D50 LDR W24, [X19 + 0x18]
	0x03647D54 LDR X21, [X9]
	0x03647D58 LDR X9, [X19 + 0x20]
	0x03647D5C LDR X0, [X21 + 0x20]
	0x03647D60 LDR W20, [X9, W23, SXTW]
	0x03647D64 LDRB W9, [X0 + 0x135]
	0x03647D68 TBNZ X9, 0x0, 0x3647D74
	0x03647D6C BL 0x1C5C684
	0x03647D70 LDR W8, [X19 + 0x28]
	0x03647D74 CMP W23, W8
	0x03647D78 B.LT 0x3647DA4
	0x03647D7C LDR X0, [X21 + 0x20]
	0x03647D80 ADD X21, X19, 0x20
	0x03647D84 LDRB W8, [X0 + 0x135]
	0x03647D88 TBNZ X8, 0x0, 0x3647D90
	0x03647D8C BL 0x1C5C684
	0x03647D90 LDR X8, [X0 + 0xC0]
	0x03647D94 MOV X0, X21
	0x03647D98 LDR X1, [X8 + 0x38]
	0x03647D9C BL 0x278D43C
	0x03647DA0 LDR W8, [X19 + 0x28]
	0x03647DA4 CMP W23, W8
	0x03647DA8 B.CS 0x364814C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9A000
	005 Move W8, [X20+1457]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAAE000
	012 Move X0, [X0+3672]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1457], W8
	016 Move X8, [X19+48]
	017 Compare X8, 0
	018 JumpIfEqual {50}
	019 Move X9, 0xAAE000
	020 Move X9, [X9+3672]
	021 Move W8, [X8+24]
	022 Move X0, [X9]
	023 Move W1, W8
	024 ShiftRight W1, 31
	025 And W1, W1, 0x3FFFFFFF
	026 Call 0x1C17D6C
	027 Move X8, [X19+48]
	028 Compare X8, 0
	029 JumpIfEqual {50}
	030 Move W3, [X8+24]
	031 Move X20, X0
	032 Move X0, X8
	033 Move W1, W31
	034 Move X2, X20
	035 Move W4, W3
	036 Move X5, X31
	037 Call Array.Copy, X0, X1, X2, X3, X4
	038 Move X8, [X19+48]
	039 Compare X8, 0
	040 JumpIfEqual {50}
	041 Move W9, [X19+56]
	042 Move W8, [X8+24]
	043 Move [X19+48], X20
	044 Add W8, W9, W8
	045 Move [X19+56], W8
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 
	050 Call 0x1C17F20

Method: System.Void DoubleStack()

Disassembly:
	0x03647C6C B.LE 0x36480B0
	0x03647C70 LDR W10, [X20 + 0x10]
	0x03647C74 LDRH W2, [X20 + 0x28]
	0x03647C78 MOVN W11, 0x80000000
	0x03647C7C CMP W8, W11
	0x03647C80 ORR W1, W10, W23, 0x0
	0x03647C84 CSEL W3, W8, W9, EQ
	0x03647C88 MOV X0, X19
	0x03647C8C LDP X20, X19, [X31 + 0x40]
	0x03647C90 LDP X22, X21, [X31 + 0x30]
	0x03647C94 LDP X24, X23, [X31 + 0x20]
	0x03647C98 LDP X30, X25, [X31 + 0x10]
	0x03647C9C ADD X31, X31, 0x50
	0x03647CA0 B 0x364827C
	0x03647CA4 LDR W9, [X19 + 0x38]
	0x03647CA8 LDR W10, [X19 + 0x28]
	0x03647CAC SUB W9, W9, 0x1
	0x03647CB0 CMP W9, W10
	0x03647CB4 STR W9, [X19 + 0x38]
	0x03647CB8 B.CS 0x364814C
	0x03647CBC LDR X10, [X19 + 0x20]
	0x03647CC0 MOVN W3, 0x80000000
	0x03647CC4 CMP W8, W3
	0x03647CC8 SUB W1, W22, 0x7E
	0x03647CCC LDR W2, [X10, W9, SXTW]
	0x03647CD0 B.EQ 0x3647CDC
	0x03647CD4 LDR W9, [X20 + 0x2C]
	0x03647CD8 SUB W3, W8, W9
	0x03647CDC MOV X0, X19
	0x03647CE0 BL 0x364827C
	0x03647CE4 LDR W8, [X20 + 0x2C]
	0x03647CE8 CBNZ W8, 0x36480B0
	0x03647CEC LDR W8, [X19 + 0x38]
	0x03647CF0 LDR W9, [X19 + 0x28]
	0x03647CF4 SUB W8, W8, 0x1
	0x03647CF8 CMP W8, W9
	0x03647CFC STR W8, [X19 + 0x38]
	0x03647D00 B.CS 0x364814C
	0x03647D04 LDR X9, [X19 + 0x20]
	0x03647D08 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9A000
	005 Move W8, [X20+1458]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAAE000
	012 Move X0, [X0+3672]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1458], W8
	016 Move X8, [X19+64]
	017 Compare X8, 0
	018 JumpIfEqual {50}
	019 Move X9, 0xAAE000
	020 Move X9, [X9+3672]
	021 Move W8, [X8+24]
	022 Move X0, [X9]
	023 Move W1, W8
	024 ShiftRight W1, 31
	025 And W1, W1, 0x3FFFFFFF
	026 Call 0x1C17D6C
	027 Move X8, [X19+64]
	028 Compare X8, 0
	029 JumpIfEqual {50}
	030 Move W3, [X8+24]
	031 Move X20, X0
	032 Move X0, X8
	033 Move W1, W31
	034 Move X2, X20
	035 Move W4, W3
	036 Move X5, X31
	037 Call Array.Copy, X0, X1, X2, X3, X4
	038 Move X8, [X19+64]
	039 Compare X8, 0
	040 JumpIfEqual {50}
	041 Move W9, [X19+72]
	042 Move W8, [X8+24]
	043 Move [X19+64], X20
	044 Add W8, W9, W8
	045 Move [X19+72], W8
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 
	050 Call 0x1C17F20

Method: System.Void DoubleCrawl()

Disassembly:
	0x03647DAC LDR X8, [X19 + 0x20]
	0x03647DB0 SXTW X9, W23
	0x03647DB4 MOVZ W1, 0x26
	0x03647DB8 MOV X0, X19
	0x03647DBC MOV W2, W31
	0x03647DC0 STR W24, [X8, X9, LSL #2]
	0x03647DC4 STR W22, [X19 + 0x38]
	0x03647DC8 BL 0x36475E8
	0x03647DCC LDR W2, [X19 + 0x18]
	0x03647DD0 MOV X0, X19
	0x03647DD4 MOV W1, W20
	0x03647DD8 B 0x3648098
	0x03647DDC CBZ X20, 0x36480C8
	0x03647DE0 LDR W1, [X20 + 0x2C]
	0x03647DE4 MOV X0, X19
	0x03647DE8 BL 0x3648554
	0x03647DEC LDR W1, [X20 + 0x30]
	0x03647DF0 MOV W20, W0
	0x03647DF4 MOV X0, X19
	0x03647DF8 BL 0x3648554
	0x03647DFC MOVZ W1, 0x20
	0x03647E00 MOV W3, W0
	0x03647E04 MOV X0, X19
	0x03647E08 MOV W2, W20
	0x03647E0C B 0x3647C8C
	0x03647E10 MOVZ W1, 0x23
	0x03647E14 MOV X0, X19
	0x03647E18 BL 0x36481B4
	0x03647E1C LDR W8, [X19 + 0x38]
	0x03647E20 LDR W9, [X19 + 0x28]
	0x03647E24 SUB W8, W8, 0x1
	0x03647E28 CMP W8, W9
	0x03647E2C STR W8, [X19 + 0x38]
	0x03647E30 B.CS 0x364814C
	0x03647E34 LDR X9, [X19 + 0x20]
	0x03647E38 LDR W2, [X19 + 0x18]
	0x03647E3C MOV X0, X19
	0x03647E40 LDR W1, [X9, W8, SXTW]
	0x03647E44 BL 0x3648150
	0x03647E48 B 0x3647F4C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9A000
	005 Move W8, [X20+1459]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAAE000
	012 Move X0, [X0+3672]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1459], W8
	016 Move X8, [X19+80]
	017 Compare X8, 0
	018 JumpIfEqual {50}
	019 Move X9, 0xAAE000
	020 Move X9, [X9+3672]
	021 Move W8, [X8+24]
	022 Move X0, [X9]
	023 Move W1, W8
	024 ShiftRight W1, 31
	025 And W1, W1, 0x3FFFFFFF
	026 Call 0x1C17D6C
	027 Move X8, [X19+80]
	028 Compare X8, 0
	029 JumpIfEqual {50}
	030 Move W3, [X8+24]
	031 Move X20, X0
	032 Move X0, X8
	033 Move W1, W31
	034 Move X2, X20
	035 Move W4, W3
	036 Move X5, X31
	037 Call Array.Copy, X0, X1, X2, X3, X4
	038 Move X8, [X19+80]
	039 Compare X8, 0
	040 JumpIfEqual {50}
	041 Move W9, [X19+88]
	042 Move W8, [X8+24]
	043 Move [X19+80], X20
	044 Add W8, W9, W8
	045 Move [X19+88], W8
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 
	050 Call 0x1C17F20

Method: System.Void Crawl(System.Int32 i)

Disassembly:
	0x03647E4C CMP W21, 0x1
	0x03647E50 B.EQ 0x3648070
	0x03647E54 CBNZ W21, 0x36480B0
	0x03647E58 LDR W23, [X19 + 0x38]
	0x03647E5C LDR W8, [X19 + 0x28]
	0x03647E60 SUB W24, W23, 0x1
	0x03647E64 CMP W24, W8
	0x03647E68 STR W24, [X19 + 0x38]
	0x03647E6C B.CS 0x364814C
	0x03647E70 ADRP X9, 0xAF5000
	0x03647E74 LDR X9, [X9 + 0x2F8]
	0x03647E78 LDR W25, [X19 + 0x18]
	0x03647E7C LDR X22, [X9]
	0x03647E80 LDR X9, [X19 + 0x20]
	0x03647E84 LDR X0, [X22 + 0x20]
	0x03647E88 LDR W21, [X9, W24, SXTW]
	0x03647E8C LDRB W9, [X0 + 0x135]
	0x03647E90 TBNZ X9, 0x0, 0x3647E9C
	0x03647E94 BL 0x1C5C684
	0x03647E98 LDR W8, [X19 + 0x28]
	0x03647E9C CMP W24, W8
	0x03647EA0 B.LT 0x3647ECC
	0x03647EA4 LDR X0, [X22 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W9, [X0+88]
	005 Move X20, X0
	006 Move W19, W1
	007 Compare W9, 0
	008 JumpIfNotEqual {12}
	009 Move X0, X20
	010 Call RegexRunner.DoubleCrawl, X0
	011 Move W9, [X20+88]
	012 Move X8, [X20+80]
	013 Subtract W9, W9, 1
	014 Move [X20+88], W9
	015 Compare X8, 0
	016 JumpIfEqual {25}
	017 Move W10, [X8+24]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Add X8, X8, W9
	020 Move [X8+32], W19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1C17F20
	026 Call 0x1C17F28

Method: System.Int32 Popcrawl()

Disassembly:
	0x03647EA8 ADD X22, X19, 0x20
	0x03647EAC LDRB W8, [X0 + 0x135]
	0x03647EB0 TBNZ X8, 0x0, 0x3647EB8
	0x03647EB4 BL 0x1C5C684
	0x03647EB8 LDR X8, [X0 + 0xC0]
	0x03647EBC MOV X0, X22
	0x03647EC0 LDR X1, [X8 + 0x38]
	0x03647EC4 BL 0x278D43C
	0x03647EC8 LDR W8, [X19 + 0x28]
	0x03647ECC CMP W24, W8
	0x03647ED0 B.CS 0x364814C
	0x03647ED4 LDR X8, [X19 + 0x20]
	0x03647ED8 SXTW X9, W24
	0x03647EDC MOVZ W1, 0x26
	0x03647EE0 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Move X9, [X0+80]
	004 Add W10, W8, 1
	005 Move [X0+88], W10
	006 Compare X9, 0
	007 JumpIfEqual {14}
	008 Move W10, [X9+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Add X8, X9, X8
	011 Move W0, [X8+32]
	012 Move X30, [X31+16]
	013 Return X0
	014 Call 0x1C17F20
	015 Call 0x1C17F28

Method: System.Int32 Crawlpos()

Disassembly:
	0x0363FCFC LDP W22, W24, [X19 + 0x2C]
	0x0363FD00 LDR X20, [X20 + 0x2D0]
	0x0363FD04 ADRP X25, 0xDA1000
	0x0363FD08 ORR W26, W31, 0x7FFFFFFE
	0x0363FD0C MOVN W27, 0x80000000
	0x0363FD10 MOVZ W28, 0x1
	0x0363FD14 MOV X0, X19
	0x0363FD18 MOV X21, X0
	0x0363FD1C LDRB W8, [X25 + 0x57B]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+80]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W9, [X0+88]
	006 Move W8, [X8+24]
	007 Subtract W0, W8, W9
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Void Capture(System.Int32 capnum, System.Int32 start, System.Int32 end)

Disassembly:
	0x0363FC6C ADRP X8, 0xAFD000
	0x0363FC70 LDR W20, [X19 + 0x34]
	0x0363FC74 LDR X8, [X8 + 0x3A8]
	0x0363FC78 LDR X0, [X8]
	0x0363FC7C BL 0x1C16F10
	0x0363FC80 MOV X1, X31
	0x0363FC84 MOV X19, X0
	0x0363FC88 BL 0x33BDD8C
	0x0363FC8C MOVZ W8, 0x17
	0x0363FC90 STR W8, [X19 + 0x10]
	0x0363FC94 STR W20, [X19 + 0x34]
	0x0363FC98 MOV X0, X19
	0x0363FC9C LDP X20, X19, [X31 + 0x50]
	0x0363FCA0 LDP X22, X21, [X31 + 0x40]
	0x0363FCA4 LDP X24, X23, [X31 + 0x30]
	0x0363FCA8 LDP X26, X25, [X31 + 0x20]
	0x0363FCAC LDP X28, X27, [X31 + 0x10]
	0x0363FCB0 LDP X29, X30, [X31], #0x60
	0x0363FCB4 RET
	0x0363FCB8 STR X30, [X31 - 0x60]!
	0x0363FCBC STP X28, X27, [X31 + 0x10]
	0x0363FCC0 STP X26, X25, [X31 + 0x20]
	0x0363FCC4 STP X24, X23, [X31 + 0x30]
	0x0363FCC8 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W19, W3
	009 Move W21, W2
	010 Move W20, W1
	011 Move X23, X0
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Call RegexRunner.Crawl, X0, X1
	014 Move X0, [X23+96]
	015 Compare X0, 0
	016 JumpIfEqual {32}
	017 Move X8, [X0]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move W1, W20
	020 Move W2, W22
	021 Move X5, [X8+424]
	022 Move X4, [X8+432]
	023 NotImplemented "Instruction CSEL not yet implemented."
	024 Subtract W3, W8, W22
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Move X23, [X31+56]
	031 CallNoReturn X5
	032 Call 0x1C17F20

Method: System.Void TransferCapture(System.Int32 capnum, System.Int32 uncapnum, System.Int32 start, System.Int32 end)

Disassembly:
	0x0363FB58 CMP W23, W9
	0x0363FB5C B.GE 0x363FBCC
	0x0363FB60 LDR X2, [X26]
	0x0363FB64 MOV X0, X8
	0x0363FB68 MOV W1, W23
	0x0363FB6C BL 0x301BCCC
	0x0363FB70 CBZ X0, 0x363FC28
	0x0363FB74 STR X19, [X0 + 0x38]
	0x0363FB78 LDR X8, [X22 + 0x18]
	0x0363FB7C ADD W23, W23, 0x1
	0x0363FB80 CBNZ X8, 0x363FB54
	0x0363FB84 B 0x363FC28
	0x0363FB88 MOV W24, W31
	0x0363FB8C B 0x363FC18
	0x0363FB90 MOVZ W24, 0x1
	0x0363FB94 MOV W29, W8
	0x0363FB98 B 0x363FC18
	0x0363FB9C CMP W8, 0x9
	0x0363FBA0 B.NE 0x363FC00
	0x0363FBA4 ADRP X8, 0xAB6000
	0x0363FBA8 LDR X8, [X8 + 0x170]
	0x0363FBAC LDR X0, [X8]
	0x0363FBB0 LDR W8, [X0 + 0xE0]
	0x0363FBB4 CBNZ W8, 0x363FBBC
	0x0363FBB8 BL 0x1C16DFC
	0x0363FBBC ADD X0, X22, 0x28
	0x0363FBC0 MOV X1, X31
	0x0363FBC4 BL 0x330A76C
	0x0363FBC8 B 0x363FC04
	0x0363FBCC LDR X0, [X19 + 0x18]
	0x0363FBD0 CBZ X0, 0x363FC28
	0x0363FBD4 ADRP X9, 0xAFD000
	0x0363FBD8 LDR X9, [X9 + 0x390]
	0x0363FBDC ADD W1, W21, 0x1
	0x0363FBE0 MOV X2, X8
	0x0363FBE4 LDR X3, [X9]
	0x0363FBE8 BL 0x301D118
	0x0363FBEC SUB W20, W20, 0x1
	0x0363FBF0 B 0x363FC18
	0x0363FBF4 LDR X1, [X22 + 0x20]
	0x0363FBF8 MOV X0, X24
	0x0363FBFC B 0x363FC08
	0x0363FC00 LDR X0, [X22 + 0x20]
	0x0363FC04 LDR X1, [X23 + 0x20]
	0x0363FC08 MOV X2, X31
	0x0363FC0C BL 0x321B938
	0x0363FC10 STR X0, [X23 + 0x20]
	0x0363FC14 MOVZ W24, 0x1
	0x0363FC18 LDR X0, [X19 + 0x18]
	0x0363FC1C ADD W21, W21, 0x1
	0x0363FC20 ADD W20, W20, 0x1
	0x0363FC24 CBNZ X0, 0x363F9E4
	0x0363FC28 BL 0x1C16F20
	0x0363FC2C SUBS W2, W21, W20
	0x0363FC30 B.LE 0x363FC48
	0x0363FC34 ADRP X8, 0xAFD000
	0x0363FC38 LDR X8, [X8 + 0x398]
	0x0363FC3C MOV W1, W20
	0x0363FC40 LDR X3, [X8]
	0x0363FC44 BL 0x301DAD8
	0x0363FC48 MOV X0, X19
	0x0363FC4C LDP X20, X19, [X31 + 0x50]
	0x0363FC50 LDP X22, X21, [X31 + 0x40]
	0x0363FC54 LDP X24, X23, [X31 + 0x30]
	0x0363FC58 LDP X26, X25, [X31 + 0x20]
	0x0363FC5C LDP X28, X27, [X31 + 0x10]
	0x0363FC60 MOVZ W1, 0x17
	0x0363FC64 LDP X29, X30, [X31], #0x60
	0x0363FC68 B 0x363FF88

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, X0
	010 Move X0, [X0+96]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 NotImplemented "Instruction CSEL not yet implemented."
	014 Compare X0, 0
	015 JumpIfEqual {85}
	016 Move X8, [X0]
	017 Move W21, W2
	018 Move W19, W1
	019 Move W1, W21
	020 Move X9, [X8+488]
	021 Move X2, [X8+496]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move X8, [X20+96]
	024 Compare X8, 0
	025 JumpIfEqual {85}
	026 Move X9, [X8]
	027 Move W23, W0
	028 Move X0, X8
	029 Move W1, W21
	030 Move X10, [X9+504]
	031 Move X2, [X9+512]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Add W22, W0, W23
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move W24, W8
	041 Move W24, W25
	042 Move W22, W23
	043 Move X0, X20
	044 Move W1, W21
	045 Call RegexRunner.Crawl, X0, X1
	046 Move X0, [X20+96]
	047 Compare X0, 0
	048 JumpIfEqual {85}
	049 Move X8, [X0]
	050 Move W1, W21
	051 Move X9, [X8+440]
	052 Move X2, [X8+448]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Add W31, W19, 1
	055 Move X0, X20
	056 Move W1, W19
	057 Call RegexRunner.Crawl, X0, X1
	058 Move X0, [X20+96]
	059 Compare X0, 0
	060 JumpIfEqual {85}
	061 Move X8, [X0]
	062 Subtract W3, W24, W22
	063 Move W1, W19
	064 Move W2, W22
	065 Move X5, [X8+424]
	066 Move X4, [X8+432]
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X24, [X31+16]
	072 Move X23, [X31+24]
	073 Move X30, [X31+64]
	074 Move X25, [X31+72]
	075 CallNoReturn X5
	076 Move X20, [X31+48]
	077 Move X19, [X31+56]
	078 Move X22, [X31+32]
	079 Move X21, [X31+40]
	080 Move X24, [X31+16]
	081 Move X23, [X31+24]
	082 Move X30, [X31+64]
	083 Move X25, [X31+72]
	084 Return 
	085 Call 0x1C17F20

Method: System.Void Uncapture()

Disassembly:
	0x0363FCCC STP X20, X19, [X31 + 0x50]
	0x0363FCD0 ADRP X20, 0xDA1000
	0x0363FCD4 LDRB W8, [X20 + 0x574]
	0x0363FCD8 MOV X19, X0
	0x0363FCDC TBNZ X8, 0x0, 0x363FCF4
	0x0363FCE0 ADRP X0, 0xAFD000
	0x0363FCE4 LDR X0, [X0 + 0x3A8]
	0x0363FCE8 BL 0x1C16CF4
	0x0363FCEC MOVZ W8, 0x1
	0x0363FCF0 STRB W8, [X20 + 0x574]
	0x0363FCF4 ADRP X20, 0xAFD000
	0x0363FCF8 LDR W23, [X19 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call RegexRunner.Popcrawl, X0
	005 Move X8, [X19+96]
	006 Compare X8, 0
	007 JumpIfEqual {16}
	008 Move X9, [X8]
	009 Move W1, W0
	010 Move X0, X8
	011 Move X3, [X9+456]
	012 Move X2, [X9+464]
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 CallNoReturn X3
	016 Call 0x1C17F20

Method: System.Boolean IsMatched(System.Int32 cap)

Disassembly:
	0x0363FB38 LDR W8, [X22 + 0x34]
	0x0363FB3C LDR W9, [X19 + 0x34]
	0x0363FB40 EOR W8, W9, W8, 0x0
	0x0363FB44 TBNZ X8, 0x6, 0x363FB88
	0x0363FB48 LDR X8, [X22 + 0x18]
	0x0363FB4C CBZ X8, 0x363FC28
	0x0363FB50 MOV W23, W31
	0x0363FB54 LDR W9, [X8 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+472]
	007 Move X2, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Int32 MatchIndex(System.Int32 cap)

Disassembly:
	0x0363FF20 BL 0x363530C
	0x0363FF24 LDR W8, [X19 + 0x10]
	0x0363FF28 STRH W0, [X19 + 0x28]
	0x0363FF2C STR X31, [X19 + 0x20]
	0x0363FF30 SUB W8, W8, 0x2
	0x0363FF34 B 0x363FF70
	0x0363FF38 BL 0x363560C
	0x0363FF3C TBZ X0, 0x0, 0x363FF74

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+488]
	007 Move X2, [X8+496]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Int32 MatchLength(System.Int32 cap)

Disassembly:
	0x0363FF40 LDR X0, [X22]
	0x0363FF44 LDR X20, [X19 + 0x20]
	0x0363FF48 LDR W8, [X0 + 0xE0]
	0x0363FF4C CBNZ W8, 0x363FF54
	0x0363FF50 BL 0x1C16DFC
	0x0363FF54 MOV X0, X20
	0x0363FF58 MOV X1, X31
	0x0363FF5C BL 0x363530C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+96]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+504]
	007 Move X2, [X8+512]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

