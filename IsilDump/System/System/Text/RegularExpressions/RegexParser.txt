Type: System.Text.RegularExpressions.RegexParser

Method: System.Text.RegularExpressions.RegexTree Parse(System.String re, System.Text.RegularExpressions.RegexOptions op)

Disassembly:
	0x03641264 CMP W9, 0x1
	0x03641268 MOV W8, W20
	0x0364126C B.LT 0x36412A0
	0x03641270 ADD W21, W9, 0x1
	0x03641274 MOV X0, X19
	0x03641278 BL 0x3641BB0
	0x0364127C LDR W8, [X19 + 0x40]
	0x03641280 AND W9, W0, 0xFFFF
	0x03641284 CMP W9, 0x24
	0x03641288 B.EQ 0x36412B8
	0x0364128C SUB W21, W21, 0x1
	0x03641290 ADD W8, W8, 0x1
	0x03641294 CMP W21, 0x2
	0x03641298 STR W8, [X19 + 0x40]
	0x0364129C B.GE 0x3641274
	0x036412A0 SUB W2, W8, W20
	0x036412A4 MOVZ W3, 0x1
	0x036412A8 MOV X0, X19
	0x036412AC MOV W1, W20
	0x036412B0 BL 0x3641F2C
	0x036412B4 B 0x36412F4
	0x036412B8 SUB W2, W8, W20
	0x036412BC MOVZ W3, 0x1
	0x036412C0 MOV X0, X19
	0x036412C4 MOV W1, W20
	0x036412C8 BL 0x3641F2C
	0x036412CC MOV X0, X19
	0x036412D0 BL 0x3643D54
	0x036412D4 AND W8, W0, 0xFFFF
	0x036412D8 CMP W8, 0x24
	0x036412DC B.NE 0x36412EC
	0x036412E0 MOV X0, X19
	0x036412E4 BL 0x3643E90
	0x036412E8 STR X0, [X19 + 0x30]
	0x036412EC MOV X0, X19
	0x036412F0 BL 0x3643D2C
	0x036412F4 LDR X8, [X19 + 0x38]
	0x036412F8 CBNZ X8, 0x3641254
	0x036412FC BL 0x1C16F20
	0x03641300 LDR X0, [X19 + 0x28]
	0x03641304 LDP X20, X19, [X31 + 0x10]
	0x03641308 LDP X30, X21, [X31], #0x20
	0x0364130C RET
	0x03641310 SUB X31, X31, 0x80
	0x03641314 STP X29, X30, [X31 + 0x20]
	0x03641318 STP X28, X27, [X31 + 0x30]
	0x0364131C STP X26, X25, [X31 + 0x40]
	0x03641320 STP X24, X23, [X31 + 0x50]
	0x03641324 STP X22, X21, [X31 + 0x60]
	0x03641328 STP X20, X19, [X31 + 0x70]
	0x0364132C ADRP X19, 0xD9F000
	0x03641330 LDRB W8, [X19 + 0x5A8]
	0x03641334 MOV X24, X3
	0x03641338 MOV X25, X2
	0x0364133C MOV X20, X1
	0x03641340 MOV X21, X0
	0x03641344 TBNZ X8, 0x0, 0x36413B0
	0x03641348 ADRP X0, 0xAB2000
	0x0364134C LDR X0, [X0 + 0x758]
	0x03641350 BL 0x1C16CF4
	0x03641354 ADRP X0, 0xAB3000
	0x03641358 LDR X0, [X0 + 0xE10]
	0x0364135C BL 0x1C16CF4
	0x03641360 ADRP X0, 0xAB3000
	0x03641364 LDR X0, [X0 + 0x1B8]
	0x03641368 BL 0x1C16CF4
	0x0364136C ADRP X0, 0xAB6000
	0x03641370 LDR X0, [X0 + 0xB70]
	0x03641374 BL 0x1C16CF4
	0x03641378 ADRP X0, 0xAB3000
	0x0364137C LDR X0, [X0 + 0x1C0]
	0x03641380 BL 0x1C16CF4
	0x03641384 ADRP X0, 0xAB3000
	0x03641388 LDR X0, [X0 + 0x1C8]
	0x0364138C BL 0x1C16CF4
	0x03641390 ADRP X0, 0xAB3000
	0x03641394 LDR X0, [X0 + 0xE30]
	0x03641398 BL 0x1C16CF4
	0x0364139C ADRP X0, 0xAB3000
	0x036413A0 LDR X0, [X0 + 0x1D0]
	0x036413A4 BL 0x1C16CF4
	0x036413A8 MOVZ W8, 0x1
	0x036413AC STRB W8, [X19 + 0x5A8]
	0x036413B0 MOV X0, X21
	0x036413B4 MOV X1, X31
	0x036413B8 BL 0x33BDD8C
	0x036413BC CBZ X25, 0x364179C
	0x036413C0 LDR W8, [X25 + 0x10]
	0x036413C4 STP X21, X20, [X31 + 0x8]
	0x036413C8 CMP W8, 0x19
	0x036413CC B.NE 0x36417A0
	0x036413D0 ADRP X20, 0xAB3000
	0x036413D4 ADRP X22, 0xAB3000
	0x036413D8 ADRP X23, 0xAB3000
	0x036413DC ADRP X26, 0xAB6000
	0x036413E0 ADRP X19, 0xAB3000
	0x036413E4 LDR X20, [X20 + 0x1D0]
	0x036413E8 LDR X22, [X22 + 0x1C0]
	0x036413EC LDR X23, [X23 + 0xE30]
	0x036413F0 LDR X26, [X26 + 0xB70]
	0x036413F4 LDR X19, [X19 + 0xE10]
	0x036413F8 MOVZ W0, 0x10

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0xDA0000
	012 Move X22, 0xAB5000
	013 Move W8, [X21+1404]
	014 Move X22, [X22+3144]
	015 Move W19, W1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xAB5000
	022 Move X0, [X0+3144]
	023 Call 0x1C17CF4
	024 Move X0, 0xAB5000
	025 Move X0, [X0+3704]
	026 Call 0x1C17CF4
	027 Move X0, 0xAFB000
	028 Move X0, [X0+2056]
	029 Call 0x1C17CF4
	030 Move X0, 0xAFC000
	031 Move X0, [X0+968]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+1404], W8
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X21, 0xAFB000
	041 Move X21, [X21+2056]
	042 Move X0, X31
	043 Move TEMP, X19
	044 And TEMP, TEMP, 512
	045 Compare TEMP, 512
	046 JumpIfEqual {48}
	047 Call CultureInfo.get_CurrentCulture
	048 Call CultureInfo.get_InvariantCulture
	049 Move X22, X0
	050 Move X0, [X21]
	051 Call 0x1C17F10
	052 Move X1, X22
	053 Move X21, X0
	054 Call RegexParser..ctor, X0, X1
	055 Compare X21, 0
	056 JumpIfEqual {126}
	057 Move [X21+128], W19
	058 Move X22, 0xDA0000
	059 Move W8, [X22+1407]
	060 Move TEMP, X8
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {69}
	064 Move X0, 0xAB5000
	065 Move X0, [X0+632]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X22+1407], W8
	069 Compare X20, 0
	070 JumpIfNotEqual {76}
	071 Move X8, 0xAB5000
	072 Move X8, [X8+632]
	073 Move X8, [X8]
	074 Move X8, [X8+184]
	075 Move X20, [X8]
	076 Move X23, 0xAFC000
	077 Move X23, [X23+968]
	078 Move X0, X21
	079 Move [X21+56], X20
	080 Move [X21+64], W31
	081 Call RegexParser.CountCaptures, X0
	082 Move X0, X21
	083 Move W1, W19
	084 Call RegexParser.Reset, X0, X1
	085 Move X0, X21
	086 Call RegexParser.ScanRegex, X0
	087 Move X8, [X21+120]
	088 Move X20, X0
	089 Compare X8, 0
	090 JumpIfEqual {97}
	091 Move X9, 0xAB5000
	092 Move X9, [X9+3704]
	093 Move X0, X8
	094 Move X1, [X9]
	095 Call List`1<Object>.ToArray, X0
	096 Move X22, X0
	097 Move X22, X31
	098 Move X0, [X23]
	099 Move X27, [X21+104]
	100 Move X24, [X21+112]
	101 Move W25, [X21+88]
	102 Move X26, [X21+96]
	103 Call 0x1C17F10
	104 Move X1, X31
	105 Move X21, X0
	106 Call Object..ctor, X0
	107 Move [X21+16], X20
	108 Move [X21+24], X26
	109 Move [X21+32], X24
	110 Move [X21+40], W25
	111 Move [X21+48], X27
	112 Move [X21+56], X22
	113 Move [X21+64], W19
	114 Move X0, X21
	115 Move X20, [X31+64]
	116 Move X19, [X31+72]
	117 Move X22, [X31+48]
	118 Move X21, [X31+56]
	119 Move X24, [X31+32]
	120 Move X23, [X31+40]
	121 Move X26, [X31+16]
	122 Move X25, [X31+24]
	123 Move X30, [X31+80]
	124 Move X27, [X31+88]
	125 Return X0
	126 Call 0x1C17F20

Method: System.Text.RegularExpressions.RegexReplacement ParseReplacement(System.String rep, System.Collections.Hashtable caps, System.Int32 capsize, System.Collections.Hashtable capnames, System.Text.RegularExpressions.RegexOptions op)

Disassembly:
	0x03642098 BL 0x3233D30
	0x0364209C LDR W8, [X20 + 0x10]
	0x036420A0 ADD W22, W22, 0x1
	0x036420A4 CMP W22, W8
	0x036420A8 B.LT 0x3642048
	0x036420AC MOV X0, X21
	0x036420B0 MOV X1, X31
	0x036420B4 BL 0x3235BE8
	0x036420B8 LDR W22, [X19 + 0x80]
	0x036420BC MOV X20, X0
	0x036420C0 ADRP X8, 0xAFA000
	0x036420C4 LDR X8, [X8 + 0x3A8]
	0x036420C8 LDR X0, [X8]
	0x036420CC BL 0x1C16F10
	0x036420D0 MOV X1, X31
	0x036420D4 MOV X21, X0
	0x036420D8 BL 0x33BDD8C
	0x036420DC MOVZ W8, 0xC
	0x036420E0 STR W22, [X21 + 0x34]
	0x036420E4 STR W8, [X21 + 0x10]
	0x036420E8 STR X20, [X21 + 0x20]
	0x036420EC LDR X0, [X19 + 0x28]
	0x036420F0 CBZ X0, 0x3642108
	0x036420F4 MOV X1, X21
	0x036420F8 LDP X20, X19, [X31 + 0x20]
	0x036420FC LDP X22, X21, [X31 + 0x10]
	0x03642100 LDP X30, X23, [X31], #0x30
	0x03642104 B 0x3640154
	0x03642108 BL 0x1C16F20
	0x0364210C STR X30, [X31 - 0x10]!
	0x03642110 LDR X0, [X0 + 0x38]
	0x03642114 CBZ X0, 0x3642124
	0x03642118 MOV X2, X31
	0x0364211C LDR X30, [X31], #0x10
	0x03642120 B 0x3222A1C
	0x03642124 BL 0x1C16F20
	0x03642128 STR X30, [X31 - 0x30]!
	0x0364212C STP X22, X21, [X31 + 0x10]
	0x03642130 STP X20, X19, [X31 + 0x20]
	0x03642134 ADRP X21, 0xD9E000
	0x03642138 LDRB W8, [X21 + 0x59C]
	0x0364213C MOV W20, W1
	0x03642140 MOV X19, X0
	0x03642144 TBNZ X8, 0x0, 0x364215C
	0x03642148 ADRP X0, 0xAFA000
	0x0364214C LDR X0, [X0 + 0x3A8]
	0x03642150 BL 0x1C16CF4
	0x03642154 MOVZ W8, 0x1
	0x03642158 STRB W8, [X21 + 0x59C]
	0x0364215C LDR W22, [X19 + 0x80]
	0x03642160 TBZ X22, 0x0, 0x3642194
	0x03642164 LDR X0, [X19 + 0x48]
	0x03642168 CBZ X0, 0x36421D4
	0x0364216C LDR X8, [X0]
	0x03642170 LDP X9, X1, [X8 + 0x1D8]
	0x03642174 BLR X9
	0x03642178 CBZ X0, 0x36421D4
	0x0364217C LDR X8, [X0]
	0x03642180 MOV W1, W20
	0x03642184 LDP X9, X2, [X8 + 0x1A8]
	0x03642188 BLR X9
	0x0364218C LDR W22, [X19 + 0x80]
	0x03642190 MOV W20, W0
	0x03642194 ADRP X8, 0xAFA000
	0x03642198 LDR X8, [X8 + 0x3A8]
	0x0364219C LDR X0, [X8]
	0x036421A0 BL 0x1C16F10
	0x036421A4 MOV X1, X31
	0x036421A8 MOV X21, X0
	0x036421AC BL 0x33BDD8C
	0x036421B0 MOVZ W8, 0x9
	0x036421B4 STR W22, [X21 + 0x34]
	0x036421B8 STRH W20, [X21 + 0x28]
	0x036421BC STR W8, [X21 + 0x10]
	0x036421C0 STR X21, [X19 + 0x30]
	0x036421C4 LDP X20, X19, [X31 + 0x20]
	0x036421C8 LDP X22, X21, [X31 + 0x10]
	0x036421CC LDR X30, [X31], #0x30
	0x036421D0 RET
	0x036421D4 BL 0x1C16F20
	0x036421D8 LDR W8, [X0 + 0x80]
	0x036421DC AND W0, W8, 0x1
	0x036421E0 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xD9F000
	010 Move X25, 0xAB4000
	011 Move W8, [X24+1405]
	012 Move X25, [X25+3144]
	013 Move W23, W4
	014 Move X21, X3
	015 Move W22, W2
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0xAB4000
	023 Move X0, [X0+3144]
	024 Call 0x1C17CF4
	025 Move X0, 0xAFA000
	026 Move X0, [X0+2056]
	027 Call 0x1C17CF4
	028 Move X0, 0xAFB000
	029 Move X0, [X0+1064]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+1405], W8
	033 Move X0, [X25]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X24, 0xAFA000
	039 Move X24, [X24+2056]
	040 Move X0, X31
	041 Move TEMP, X23
	042 And TEMP, TEMP, 512
	043 Compare TEMP, 512
	044 JumpIfEqual {46}
	045 Call CultureInfo.get_CurrentCulture
	046 Call CultureInfo.get_InvariantCulture
	047 Move X25, X0
	048 Move X0, [X24]
	049 Call 0x1C17F10
	050 Move X1, X25
	051 Move X24, X0
	052 Call RegexParser..ctor, X0, X1
	053 Compare X24, 0
	054 JumpIfEqual {103}
	055 Move [X24+128], W23
	056 Move [X24+92], W22
	057 Move [X24+96], X19
	058 Move [X24+104], X21
	059 Move X21, 0xD9F000
	060 Move W8, [X21+1407]
	061 Move TEMP, X8
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {70}
	065 Move X0, 0xAB4000
	066 Move X0, [X0+632]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X21+1407], W8
	070 Move X21, 0xAFB000
	071 Move X21, [X21+1064]
	072 Move X8, X20
	073 Compare X20, 0
	074 JumpIfNotEqual {80}
	075 Move X8, 0xAB4000
	076 Move X8, [X8+632]
	077 Move X8, [X8]
	078 Move X8, [X8+184]
	079 Move X8, [X8]
	080 Move X0, X24
	081 Move [X24+56], X8
	082 Move [X24+64], W31
	083 Call RegexParser.ScanReplacement, X0
	084 Move X8, [X21]
	085 Move X21, X0
	086 Move X0, X8
	087 Call 0x1C17F10
	088 Move X1, X20
	089 Move X2, X21
	090 Move X3, X19
	091 Move X22, X0
	092 Call RegexReplacement..ctor, X0, X1, X2, X3
	093 Move X0, X22
	094 Move X20, [X31+48]
	095 Move X19, [X31+56]
	096 Move X22, [X31+32]
	097 Move X21, [X31+40]
	098 Move X24, [X31+16]
	099 Move X23, [X31+24]
	100 Move X30, [X31+64]
	101 Move X25, [X31+72]
	102 Return X0
	103 Call 0x1C17F20

Method: System.Void .ctor(System.Globalization.CultureInfo culture)

Disassembly:
	0x036413FC MOV X1, X31
	0x03641400 BL 0x3235A9C
	0x03641404 LDR X8, [X20]
	0x03641408 MOV X21, X0
	0x0364140C MOV X0, X8
	0x03641410 BL 0x1C16F10
	0x03641414 LDR X1, [X22]
	0x03641418 MOV X22, X0
	0x0364141C BL 0x301B7C4
	0x03641420 LDR X0, [X23]
	0x03641424 BL 0x1C16F10
	0x03641428 LDR X1, [X26]
	0x0364142C MOV X23, X0
	0x03641430 BL 0x2FDBF14
	0x03641434 ADRP X27, 0xAFB000
	0x03641438 LDR X27, [X27 + 0x2D0]
	0x0364143C MOV W26, W31
	0x03641440 ADRP X29, 0xD9F000
	0x03641444 MOVZ W20, 0x1
	0x03641448 LDRB W8, [X29 + 0x57B]
	0x0364144C TBNZ X8, 0x0, 0x364145C
	0x03641450 MOV X0, X27
	0x03641454 BL 0x1C16CF4
	0x03641458 STRB W20, [X29 + 0x57B]
	0x0364145C LDR X8, [X25 + 0x18]
	0x03641460 CBZ X8, 0x3641468
	0x03641464 LDR W8, [X8 + 0x18]
	0x03641468 CMP W26, W8
	0x0364146C B.GE 0x3641684
	0x03641470 MOV X0, X25
	0x03641474 MOV W1, W26
	0x03641478 BL 0x363BE48
	0x0364147C CBZ X0, 0x364179C
	0x03641480 LDR W8, [X0 + 0x10]
	0x03641484 MOV X28, X0
	0x03641488 CMP W8, 0x9
	0x0364148C B.EQ 0x36414B8
	0x03641490 CMP W8, 0xD
	0x03641494 B.EQ 0x36414D0
	0x03641498 CMP W8, 0xC
	0x0364149C B.NE 0x36417A0
	0x036414A0 CBZ X21, 0x364179C
	0x036414A4 LDR X1, [X28 + 0x20]
	0x036414A8 MOV X0, X21
	0x036414AC MOV X2, X31
	0x036414B0 BL 0x32333E0
	0x036414B4 B 0x364167C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xDA0000
	009 Move X23, 0xAFC000
	010 Move X22, 0xAFC000
	011 Move X21, 0xAE3000
	012 Move W8, [X24+1406]
	013 Move X23, [X23+976]
	014 Move X22, [X22+984]
	015 Move X21, [X21+3512]
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0xAE3000
	023 Move X0, [X0+3512]
	024 Call 0x1C17CF4
	025 Move X0, 0xAFC000
	026 Move X0, [X0+984]
	027 Call 0x1C17CF4
	028 Move X0, 0xAFC000
	029 Move X0, [X0+976]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X24+1406], W8
	033 Move X0, X19
	034 Move X1, X31
	035 Call Object..ctor, X0
	036 Move [X19+72], X20
	037 Move X0, [X23]
	038 Call 0x1C17F10
	039 Move X1, [X22]
	040 Move X20, X0
	041 Call List`1<Int32Enum>..ctor, X0
	042 Move [X19+136], X20
	043 Move X0, [X21]
	044 Call 0x1C17F10
	045 Move X1, X31
	046 Move X20, X0
	047 Call Hashtable..ctor, X0
	048 Move [X19+96], X20
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Return 

Method: System.Void SetPattern(System.String Re)

Disassembly:
	0x036414B8 CBZ X21, 0x364179C
	0x036414BC LDRH W1, [X28 + 0x28]
	0x036414C0 MOV X0, X21
	0x036414C4 MOV X2, X31
	0x036414C8 BL 0x3233D30
	0x036414CC B 0x364167C
	0x036414D0 CBZ X21, 0x364179C
	0x036414D4 MOV X0, X21
	0x036414D8 MOV X1, X31
	0x036414DC BL 0x323260C
	0x036414E0 CMP W0, 0x1
	0x036414E4 B.LT 0x36415C0
	0x036414E8 CBZ X22, 0x364179C
	0x036414EC CBZ X23, 0x364179C
	0x036414F0 LDR W10, [X23 + 0x1C]
	0x036414F4 LDR W1, [X22 + 0x18]
	0x036414F8 LDR X8, [X23 + 0x10]
	0x036414FC LDR X9, [X19]
	0x03641500 ADD W10, W10, 0x1
	0x03641504 STR W10, [X23 + 0x1C]
	0x03641508 CBZ X8, 0x364179C
	0x0364150C LDRSW X10, [X23 + 0x18]
	0x03641510 LDR W11, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDA0000
	006 Move W8, [X21+1407]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAB5000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1407], W8
	018 Compare X20, 0
	019 JumpIfNotEqual {25}
	020 Move X8, 0xAB5000
	021 Move X8, [X8+632]
	022 Move X8, [X8]
	023 Move X8, [X8+184]
	024 Move X20, [X8]
	025 Move [X19+56], X20
	026 Move [X19+64], W31
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

Method: System.Void Reset(System.Text.RegularExpressions.RegexOptions topopts)

Disassembly:
	0x03641854 LDR X0, [X21]
	0x03641858 LDR W22, [X19 + 0x80]
	0x0364185C BL 0x1C16F10
	0x03641860 MOV X1, X31
	0x03641864 MOV X20, X0
	0x03641868 BL 0x33BDD8C
	0x0364186C MOVZ W8, 0x19
	0x03641870 STR W22, [X20 + 0x34]
	0x03641874 STR W8, [X20 + 0x10]
	0x03641878 STR X20, [X19 + 0x28]
	0x0364187C LDP X20, X19, [X31 + 0x20]
	0x03641880 LDP X22, X21, [X31 + 0x10]
	0x03641884 LDR X30, [X31], #0x30
	0x03641888 RET
	0x0364188C STP X30, X21, [X31 - 0x20]!
	0x03641890 STP X20, X19, [X31 + 0x10]
	0x03641894 ADRP X20, 0xD9F000
	0x03641898 LDRB W8, [X20 + 0x585]
	0x0364189C MOV X19, X0
	0x036418A0 TBNZ X8, 0x0, 0x36418B8
	0x036418A4 ADRP X0, 0xAFA000
	0x036418A8 LDR X0, [X0 + 0x808]
	0x036418AC BL 0x1C16CF4
	0x036418B0 MOVZ W8, 0x1
	0x036418B4 STRB W8, [X20 + 0x585]
	0x036418B8 LDRB W9, [X19 + 0x80]
	0x036418BC LDR X8, [X19 + 0x38]
	0x036418C0 TBNZ X9, 0x5, 0x36419A4
	0x036418C4 CBZ X8, 0x3641B38
	0x036418C8 LDR W9, [X19 + 0x40]
	0x036418CC LDR W8, [X8 + 0x10]
	0x036418D0 SUB W8, W8, W9
	0x036418D4 CMP W8, 0x3
	0x036418D8 B.GE 0x36418E8
	0x036418DC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDA0000
	006 Move W8, [X21+1408]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xAFC000
	014 Move X0, [X0+992]
	015 Call 0x1C17CF4
	016 Move X0, 0xAFC000
	017 Move X0, [X0+1000]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1408], W8
	021 Move X0, [X20+136]
	022 Move W8, 1
	023 Move [X20+64], W31
	024 Move [X20+80], W8
	025 Move [X20+144], W31
	026 Compare X0, 0
	027 JumpIfEqual {42}
	028 Move W8, [X0+24]
	029 Subtract W2, W8, 1
	030 Move X8, 0xAFC000
	031 Move X8, [X8+992]
	032 Move W1, W31
	033 Move X3, [X8]
	034 Call List`1<Int32Enum>.RemoveRange, X0, X1, X2
	035 Move [X20+128], W19
	036 Move [X20+16], X31
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 
	042 Call 0x1C17F20

Method: System.Text.RegularExpressions.RegexNode ScanRegex()

Disassembly:
	0x036418E0 LDP X30, X21, [X31], #0x20
	0x036418E4 RET
	0x036418E8 MOVZ W1, 0x2
	0x036418EC MOV X0, X19
	0x036418F0 BL 0x3644650
	0x036418F4 AND W8, W0, 0xFFFF
	0x036418F8 CMP W8, 0x23
	0x036418FC B.NE 0x36418DC
	0x03641900 MOVZ W1, 0x1
	0x03641904 MOV X0, X19
	0x03641908 BL 0x3644650
	0x0364190C AND W8, W0, 0xFFFF
	0x03641910 CMP W8, 0x3F
	0x03641914 B.NE 0x36418DC
	0x03641918 MOV X0, X19
	0x0364191C BL 0x3641BB0
	0x03641920 AND W8, W0, 0xFFFF
	0x03641924 CMP W8, 0x28
	0x03641928 B.NE 0x36418DC
	0x0364192C LDR X8, [X19 + 0x38]
	0x03641930 CBZ X8, 0x3641B38
	0x03641934 LDR W9, [X19 + 0x40]
	0x03641938 LDR W10, [X8 + 0x10]
	0x0364193C SUB W9, W10, W9
	0x03641940 CMP W9, 0x1
	0x03641944 B.LT 0x364197C
	0x03641948 MOV X0, X19
	0x0364194C BL 0x3641BB0
	0x03641950 AND W8, W0, 0xFFFF
	0x03641954 CMP W8, 0x29
	0x03641958 B.EQ 0x3641974
	0x0364195C LDR W9, [X19 + 0x40]
	0x03641960 LDR X8, [X19 + 0x38]
	0x03641964 ADD W9, W9, 0x1
	0x03641968 STR W9, [X19 + 0x40]
	0x0364196C CBNZ X8, 0x3641938
	0x03641970 B 0x3641B38
	0x03641974 LDR X8, [X19 + 0x38]
	0x03641978 CBZ X8, 0x3641B38
	0x0364197C LDR W8, [X8 + 0x10]
	0x03641980 LDR W9, [X19 + 0x40]
	0x03641984 CMP W8, W9
	0x03641988 B.EQ 0x3641B3C
	0x0364198C ADD W9, W9, 0x1
	0x03641990 SUB W8, W8, W9
	0x03641994 CMP W8, 0x2
	0x03641998 STR W9, [X19 + 0x40]
	0x0364199C B.GT 0x36418E8
	0x036419A0 B 0x36418DC
	0x036419A4 CBZ X8, 0x3641B38
	0x036419A8 ADRP X21, 0xAFA000
	0x036419AC LDR X21, [X21 + 0x808]
	0x036419B0 LDR W9, [X8 + 0x10]
	0x036419B4 LDR W10, [X19 + 0x40]
	0x036419B8 SUB W9, W9, W10
	0x036419BC CMP W9, 0x1
	0x036419C0 B.LT 0x3641A00
	0x036419C4 MOV X0, X19
	0x036419C8 BL 0x3641BB0
	0x036419CC LDR X8, [X21]
	0x036419D0 MOV W20, W0
	0x036419D4 LDR W9, [X8 + 0xE0]
	0x036419D8 CBNZ W9, 0x36419E4
	0x036419DC MOV X0, X8
	0x036419E0 BL 0x1C16DFC
	0x036419E4 MOV W0, W20
	0x036419E8 BL 0x36448E4
	0x036419EC TBZ X0, 0x0, 0x36419F8
	0x036419F0 LDR W8, [X19 + 0x40]
	0x036419F4 B 0x3641B28
	0x036419F8 LDR X8, [X19 + 0x38]
	0x036419FC CBZ X8, 0x3641B38
	0x03641A00 LDR W8, [X8 + 0x10]
	0x03641A04 LDR W9, [X19 + 0x40]
	0x03641A08 CMP W8, W9
	0x03641A0C B.EQ 0x36418DC
	0x03641A10 MOV X0, X19
	0x03641A14 BL 0x3641BB0
	0x03641A18 LDR X8, [X19 + 0x38]
	0x03641A1C AND W9, W0, 0xFFFF
	0x03641A20 CMP W9, 0x23
	0x03641A24 B.NE 0x3641A6C
	0x03641A28 CBZ X8, 0x3641B38
	0x03641A2C LDR W9, [X19 + 0x40]
	0x03641A30 LDR W8, [X8 + 0x10]
	0x03641A34 SUB W8, W8, W9
	0x03641A38 CMP W8, 0x1
	0x03641A3C B.LT 0x3641B30
	0x03641A40 MOV X0, X19
	0x03641A44 BL 0x3641BB0
	0x03641A48 AND W8, W0, 0xFFFF
	0x03641A4C CMP W8, 0xA
	0x03641A50 B.EQ 0x3641B30
	0x03641A54 LDR W9, [X19 + 0x40]
	0x03641A58 LDR X8, [X19 + 0x38]
	0x03641A5C ADD W9, W9, 0x1
	0x03641A60 STR W9, [X19 + 0x40]
	0x03641A64 CBNZ X8, 0x3641A30
	0x03641A68 B 0x3641B38
	0x03641A6C CBZ X8, 0x3641B38
	0x03641A70 LDR W8, [X8 + 0x10]
	0x03641A74 LDR W9, [X19 + 0x40]
	0x03641A78 SUB W8, W8, W9
	0x03641A7C CMP W8, 0x3
	0x03641A80 B.LT 0x36418DC
	0x03641A84 MOVZ W1, 0x2
	0x03641A88 MOV X0, X19
	0x03641A8C BL 0x3644650
	0x03641A90 AND W8, W0, 0xFFFF
	0x03641A94 CMP W8, 0x23
	0x03641A98 B.NE 0x36418DC
	0x03641A9C MOVZ W1, 0x1
	0x03641AA0 MOV X0, X19
	0x03641AA4 BL 0x3644650
	0x03641AA8 AND W8, W0, 0xFFFF
	0x03641AAC CMP W8, 0x3F
	0x03641AB0 B.NE 0x36418DC
	0x03641AB4 MOV X0, X19
	0x03641AB8 BL 0x3641BB0
	0x03641ABC AND W8, W0, 0xFFFF
	0x03641AC0 CMP W8, 0x28
	0x03641AC4 B.NE 0x36418DC
	0x03641AC8 LDR X8, [X19 + 0x38]
	0x03641ACC CBZ X8, 0x3641B38
	0x03641AD0 LDR W9, [X19 + 0x40]
	0x03641AD4 LDR W10, [X8 + 0x10]
	0x03641AD8 SUB W9, W10, W9
	0x03641ADC CMP W9, 0x1
	0x03641AE0 B.LT 0x3641B18
	0x03641AE4 MOV X0, X19
	0x03641AE8 BL 0x3641BB0
	0x03641AEC AND W8, W0, 0xFFFF
	0x03641AF0 CMP W8, 0x29
	0x03641AF4 B.EQ 0x3641B10
	0x03641AF8 LDR W9, [X19 + 0x40]
	0x03641AFC LDR X8, [X19 + 0x38]
	0x03641B00 ADD W9, W9, 0x1
	0x03641B04 STR W9, [X19 + 0x40]
	0x03641B08 CBNZ X8, 0x3641AD4
	0x03641B0C B 0x3641B38
	0x03641B10 LDR X8, [X19 + 0x38]
	0x03641B14 CBZ X8, 0x3641B38
	0x03641B18 LDR W9, [X8 + 0x10]
	0x03641B1C LDR W8, [X19 + 0x40]
	0x03641B20 CMP W9, W8
	0x03641B24 B.EQ 0x3641B3C
	0x03641B28 ADD W8, W8, 0x1
	0x03641B2C STR W8, [X19 + 0x40]
	0x03641B30 LDR X8, [X19 + 0x38]
	0x03641B34 CBNZ X8, 0x36419B0
	0x03641B38 BL 0x1C16F20
	0x03641B3C ADRP X0, 0xAFB000
	0x03641B40 LDR X0, [X0 + 0x440]
	0x03641B44 BL 0x1C16D08
	0x03641B48 MOV X1, X0
	0x03641B4C MOV X0, X19
	0x03641B50 BL 0x3643360
	0x03641B54 MOV X19, X0
	0x03641B58 ADRP X0, 0xAFB000
	0x03641B5C LDR X0, [X0 + 0x448]
	0x03641B60 BL 0x1C16D08
	0x03641B64 MOV X1, X0
	0x03641B68 MOV X0, X19
	0x03641B6C BL 0x1C16DEC
	0x03641B70 LDRB W8, [X0 + 0x80]
	0x03641B74 UBFM W0, W8, 0x5, 0x5
	0x03641B78 RET
	0x03641B7C LDR W8, [X0 + 0x40]
	0x03641B80 ADD W8, W8, 0x1
	0x03641B84 STR W8, [X0 + 0x40]
	0x03641B88 RET
	0x03641B8C STR X30, [X31 - 0x10]!
	0x03641B90 LDR X8, [X0 + 0x38]
	0x03641B94 CBZ X8, 0x3641BAC
	0x03641B98 LDR W8, [X8 + 0x10]
	0x03641B9C LDR W9, [X0 + 0x40]
	0x03641BA0 SUB W0, W8, W9
	0x03641BA4 LDR X30, [X31], #0x10
	0x03641BA8 RET
	0x03641BAC BL 0x1C16F20
	0x03641BB0 STR X30, [X31 - 0x10]!
	0x03641BB4 MOV X8, X0
	0x03641BB8 LDR X0, [X0 + 0x38]
	0x03641BBC CBZ X0, 0x3641BD0
	0x03641BC0 LDR W1, [X8 + 0x40]
	0x03641BC4 MOV X2, X31
	0x03641BC8 LDR X30, [X31], #0x10
	0x03641BCC B 0x3222A1C
	0x03641BD0 BL 0x1C16F20
	0x03641BD4 STR X30, [X31 - 0x20]!
	0x03641BD8 STP X20, X19, [X31 + 0x10]
	0x03641BDC ADRP X20, 0xD9F000
	0x03641BE0 LDRB W8, [X20 + 0x595]
	0x03641BE4 MOV W19, W0
	0x03641BE8 TBNZ X8, 0x0, 0x3641C00
	0x03641BEC ADRP X0, 0xAFA000
	0x03641BF0 LDR X0, [X0 + 0x808]
	0x03641BF4 BL 0x1C16CF4
	0x03641BF8 MOVZ W8, 0x1
	0x03641BFC STRB W8, [X20 + 0x595]
	0x03641C00 AND W8, W19, 0xFFFF
	0x03641C04 CMP W8, 0x7C
	0x03641C08 B.LS 0x3641C14
	0x03641C0C MOV W0, W31
	0x03641C10 B 0x3641C58
	0x03641C14 ADRP X20, 0xAFA000
	0x03641C18 LDR X20, [X20 + 0x808]
	0x03641C1C LDR X0, [X20]
	0x03641C20 LDR W8, [X0 + 0xE0]
	0x03641C24 CBNZ W8, 0x3641C30
	0x03641C28 BL 0x1C16DFC
	0x03641C2C LDR X0, [X20]
	0x03641C30 LDR X8, [X0 + 0xB8]
	0x03641C34 LDR X8, [X8]
	0x03641C38 CBZ X8, 0x3641C64
	0x03641C3C LDR W9, [X8 + 0x18]
	0x03641C40 CMP W9, W19, UXTH
	0x03641C44 B.LS 0x3641C68
	0x03641C48 ADD X8, X8, W19, UXTH
	0x03641C4C LDRB W8, [X8 + 0x20]
	0x03641C50 CMP W8, 0x1
	0x03641C54 CSET W0, HI
	0x03641C58 LDP X20, X19, [X31 + 0x10]
	0x03641C5C LDR X30, [X31], #0x20
	0x03641C60 RET
	0x03641C64 BL 0x1C16F20
	0x03641C68 BL 0x1C16F28
	0x03641C6C STR X30, [X31 - 0x30]!
	0x03641C70 STP X22, X21, [X31 + 0x10]
	0x03641C74 STP X20, X19, [X31 + 0x20]
	0x03641C78 ADRP X20, 0xD9F000
	0x03641C7C LDRB W8, [X20 + 0x597]
	0x03641C80 MOV X19, X0
	0x03641C84 TBNZ X8, 0x0, 0x3641C9C
	0x03641C88 ADRP X0, 0xAFA000
	0x03641C8C LDR X0, [X0 + 0x808]
	0x03641C90 BL 0x1C16CF4
	0x03641C94 MOVZ W8, 0x1
	0x03641C98 STRB W8, [X20 + 0x597]
	0x03641C9C LDR X0, [X19 + 0x38]
	0x03641CA0 CBZ X0, 0x3641DF4
	0x03641CA4 LDR W8, [X0 + 0x10]
	0x03641CA8 LDR W20, [X19 + 0x40]
	0x03641CAC SUBS W22, W8, W20
	0x03641CB0 B.EQ 0x3641DD8
	0x03641CB4 MOV W1, W20
	0x03641CB8 MOV X2, X31
	0x03641CBC BL 0x3222A1C
	0x03641CC0 AND W8, W0, 0xFFFF
	0x03641CC4 CMP W8, 0x7B
	0x03641CC8 B.NE 0x3641D14
	0x03641CCC SUB W22, W22, 0x1
	0x03641CD0 CMP W22, 0x1
	0x03641CD4 B.LT 0x3641D64
	0x03641CD8 ADD W21, W20, 0x1
	0x03641CDC LDR X0, [X19 + 0x38]
	0x03641CE0 CBZ X0, 0x3641DF4
	0x03641CE4 MOV W1, W21
	0x03641CE8 MOV X2, X31
	0x03641CEC BL 0x3222A1C
	0x03641CF0 SUB W8, W0, 0x30
	0x03641CF4 AND W8, W8, 0xFFFF
	0x03641CF8 CMP W8, 0xA
	0x03641CFC B.CS 0x3641D70
	0x03641D00 SUB W22, W22, 0x1
	0x03641D04 CMP W22, 0x1
	0x03641D08 ADD W21, W21, 0x1
	0x03641D0C B.GE 0x3641CDC
	0x03641D10 B 0x3641DD8
	0x03641D14 B.HI 0x3641DD8
	0x03641D18 ADRP X19, 0xAFA000
	0x03641D1C LDR X19, [X19 + 0x808]
	0x03641D20 MOV W21, W0
	0x03641D24 LDR X0, [X19]
	0x03641D28 LDR W8, [X0 + 0xE0]
	0x03641D2C CBNZ W8, 0x3641D38
	0x03641D30 BL 0x1C16DFC
	0x03641D34 LDR X0, [X19]
	0x03641D38 LDR X8, [X0 + 0xB8]
	0x03641D3C LDR X8, [X8]
	0x03641D40 CBZ X8, 0x3641DF4
	0x03641D44 LDR W9, [X8 + 0x18]
	0x03641D48 CMP W9, W21, UXTH
	0x03641D4C B.LS 0x3641DF8
	0x03641D50 ADD X8, X8, W21, UXTH
	0x03641D54 LDRB W8, [X8 + 0x20]
	0x03641D58 CMP W8, 0x4
	0x03641D5C CSET W0, HI
	0x03641D60 B 0x3641DDC
	0x03641D64 CBZ W22, 0x3641DD8
	0x03641D68 MOVZ W0, 0x7B
	0x03641D6C MOV W21, W20
	0x03641D70 SUB W8, W21, W20
	0x03641D74 CMP W8, 0x1
	0x03641D78 B.EQ 0x3641DD8
	0x03641D7C AND W8, W0, 0xFFFF
	0x03641D80 CMP W8, 0x7D
	0x03641D84 B.EQ 0x3641DEC
	0x03641D88 CMP W8, 0x2C
	0x03641D8C B.NE 0x3641DD8
	0x03641D90 ADD W20, W21, 0x1
	0x03641D94 SUB W21, W22, 0x1
	0x03641D98 SUBS W21, W21, 0x1
	0x03641D9C B.LT 0x3641DD8
	0x03641DA0 LDR X0, [X19 + 0x38]
	0x03641DA4 CBZ X0, 0x3641DF4
	0x03641DA8 MOV W1, W20
	0x03641DAC MOV X2, X31
	0x03641DB0 BL 0x3222A1C
	0x03641DB4 SUB W8, W0, 0x30
	0x03641DB8 AND W8, W8, 0xFFFF
	0x03641DBC CMP W8, 0xA
	0x03641DC0 ADD W20, W20, 0x1
	0x03641DC4 B.CC 0x3641D98
	0x03641DC8 AND W8, W0, 0xFFFF
	0x03641DCC CMP W8, 0x7D
	0x03641DD0 CSET W0, EQ
	0x03641DD4 B 0x3641DDC
	0x03641DD8 MOV W0, W31
	0x03641DDC LDP X20, X19, [X31 + 0x20]
	0x03641DE0 LDP X22, X21, [X31 + 0x10]
	0x03641DE4 LDR X30, [X31], #0x30
	0x03641DE8 RET
	0x03641DEC MOVZ W0, 0x1
	0x03641DF0 B 0x3641DDC
	0x03641DF4 BL 0x1C16F20
	0x03641DF8 BL 0x1C16F28
	0x03641DFC STR X30, [X31 - 0x20]!
	0x03641E00 STP X20, X19, [X31 + 0x10]
	0x03641E04 ADRP X20, 0xD9F000
	0x03641E08 LDRB W8, [X20 + 0x594]
	0x03641E0C MOV W19, W0
	0x03641E10 TBNZ X8, 0x0, 0x3641E28
	0x03641E14 ADRP X0, 0xAFA000
	0x03641E18 LDR X0, [X0 + 0x808]
	0x03641E1C BL 0x1C16CF4
	0x03641E20 MOVZ W8, 0x1
	0x03641E24 STRB W8, [X20 + 0x594]
	0x03641E28 AND W8, W19, 0xFFFF
	0x03641E2C CMP W8, 0x7C
	0x03641E30 B.LS 0x3641E3C
	0x03641E34 MOV W0, W31
	0x03641E38 B 0x3641E80
	0x03641E3C ADRP X20, 0xAFA000
	0x03641E40 LDR X20, [X20 + 0x808]
	0x03641E44 LDR X0, [X20]
	0x03641E48 LDR W8, [X0 + 0xE0]
	0x03641E4C CBNZ W8, 0x3641E58
	0x03641E50 BL 0x1C16DFC
	0x03641E54 LDR X0, [X20]
	0x03641E58 LDR X8, [X0 + 0xB8]
	0x03641E5C LDR X8, [X8]
	0x03641E60 CBZ X8, 0x3641E8C
	0x03641E64 LDR W9, [X8 + 0x18]
	0x03641E68 CMP W9, W19, UXTH
	0x03641E6C B.LS 0x3641E90
	0x03641E70 ADD X8, X8, W19, UXTH
	0x03641E74 LDRB W8, [X8 + 0x20]
	0x03641E78 CMP W8, 0x3
	0x03641E7C CSET W0, HI
	0x03641E80 LDP X20, X19, [X31 + 0x10]
	0x03641E84 LDR X30, [X31], #0x20
	0x03641E88 RET
	0x03641E8C BL 0x1C16F20
	0x03641E90 BL 0x1C16F28
	0x03641E94 STR X30, [X31 - 0x20]!
	0x03641E98 STP X20, X19, [X31 + 0x10]
	0x03641E9C ADRP X20, 0xD9F000
	0x03641EA0 LDRB W8, [X20 + 0x596]
	0x03641EA4 MOV W19, W0
	0x03641EA8 TBNZ X8, 0x0, 0x3641EC0
	0x03641EAC ADRP X0, 0xAFA000
	0x03641EB0 LDR X0, [X0 + 0x808]
	0x03641EB4 BL 0x1C16CF4
	0x03641EB8 MOVZ W8, 0x1
	0x03641EBC STRB W8, [X20 + 0x596]
	0x03641EC0 AND W8, W19, 0xFFFF
	0x03641EC4 CMP W8, 0x7B
	0x03641EC8 B.LS 0x3641ED4
	0x03641ECC MOV W0, W31
	0x03641ED0 B 0x3641F18
	0x03641ED4 ADRP X20, 0xAFA000
	0x03641ED8 LDR X20, [X20 + 0x808]
	0x03641EDC LDR X0, [X20]
	0x03641EE0 LDR W8, [X0 + 0xE0]
	0x03641EE4 CBNZ W8, 0x3641EF0
	0x03641EE8 BL 0x1C16DFC
	0x03641EEC LDR X0, [X20]
	0x03641EF0 LDR X8, [X0 + 0xB8]
	0x03641EF4 LDR X8, [X8]
	0x03641EF8 CBZ X8, 0x3641F24
	0x03641EFC LDR W9, [X8 + 0x18]
	0x03641F00 CMP W9, W19, UXTH
	0x03641F04 B.LS 0x3641F28
	0x03641F08 ADD X8, X8, W19, UXTH
	0x03641F0C LDRB W8, [X8 + 0x20]
	0x03641F10 CMP W8, 0x4
	0x03641F14 CSET W0, HI
	0x03641F18 LDP X20, X19, [X31 + 0x10]
	0x03641F1C LDR X30, [X31], #0x20
	0x03641F20 RET
	0x03641F24 BL 0x1C16F20
	0x03641F28 BL 0x1C16F28
	0x03641F2C STP X30, X23, [X31 - 0x30]!
	0x03641F30 STP X22, X21, [X31 + 0x10]
	0x03641F34 STP X20, X19, [X31 + 0x20]
	0x03641F38 ADRP X23, 0xD9F000
	0x03641F3C LDRB W8, [X23 + 0x599]
	0x03641F40 MOV W21, W3
	0x03641F44 MOV W22, W2
	0x03641F48 MOV W20, W1
	0x03641F4C MOV X19, X0
	0x03641F50 TBNZ X8, 0x0, 0x3641F68
	0x03641F54 ADRP X0, 0xAFB000
	0x03641F58 LDR X0, [X0 + 0x3A8]
	0x03641F5C BL 0x1C16CF4
	0x03641F60 MOVZ W8, 0x1
	0x03641F64 STRB W8, [X23 + 0x599]
	0x03641F68 CBZ W22, 0x3641FF8
	0x03641F6C LDR X0, [X19 + 0x38]
	0x03641F70 CBZ X0, 0x3642108
	0x03641F74 MOV W1, W20
	0x03641F78 CMP W22, 0x2
	0x03641F7C B.GE 0x3642008
	0x03641F80 MOV X2, X31
	0x03641F84 BL 0x3222A1C
	0x03641F88 LDR W22, [X19 + 0x80]
	0x03641F8C MOV W20, W0
	0x03641F90 TBZ X22, 0x0, 0x3641FC8
	0x03641F94 TBNZ X21, 0x0, 0x3641FC8
	0x03641F98 LDR X0, [X19 + 0x48]
	0x03641F9C CBZ X0, 0x3642108
	0x03641FA0 LDR X8, [X0]
	0x03641FA4 LDP X9, X1, [X8 + 0x1D8]
	0x03641FA8 BLR X9
	0x03641FAC CBZ X0, 0x3642108
	0x03641FB0 LDR X8, [X0]
	0x03641FB4 MOV W1, W20
	0x03641FB8 LDP X9, X2, [X8 + 0x1A8]
	0x03641FBC BLR X9
	0x03641FC0 LDR W22, [X19 + 0x80]
	0x03641FC4 MOV W20, W0
	0x03641FC8 ADRP X8, 0xAFB000
	0x03641FCC LDR X8, [X8 + 0x3A8]
	0x03641FD0 LDR X0, [X8]
	0x03641FD4 BL 0x1C16F10
	0x03641FD8 MOV X1, X31
	0x03641FDC MOV X21, X0
	0x03641FE0 BL 0x33BDD8C
	0x03641FE4 MOVZ W8, 0x9
	0x03641FE8 STR W22, [X21 + 0x34]
	0x03641FEC STR W8, [X21 + 0x10]
	0x03641FF0 STRH W20, [X21 + 0x28]
	0x03641FF4 B 0x36420EC
	0x03641FF8 LDP X20, X19, [X31 + 0x20]
	0x03641FFC LDP X22, X21, [X31 + 0x10]
	0x03642000 LDP X30, X23, [X31], #0x30
	0x03642004 RET
	0x03642008 MOV W2, W22
	0x0364200C MOV X3, X31
	0x03642010 BL 0x3228DE4
	0x03642014 LDR W22, [X19 + 0x80]
	0x03642018 MOV X20, X0
	0x0364201C TBZ X22, 0x0, 0x36420C0
	0x03642020 TBNZ X21, 0x0, 0x36420C0
	0x03642024 CBZ X20, 0x3642108
	0x03642028 LDR W0, [X20 + 0x10]
	0x0364202C MOV X1, X31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xDA0000
	015 Move X20, 0xAFC000
	016 Move W8, [X21+1409]
	017 Move X20, [X20+936]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {34}
	023 Move X0, 0xAFC000
	024 Move X0, [X0+936]
	025 Call 0x1C17CF4
	026 Move X0, 0xAFB000
	027 Move X0, [X0+2056]
	028 Call 0x1C17CF4
	029 Move X0, 0xAFC000
	030 Move X0, [X0+816]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+1409], W8
	034 Move X0, [X20]
	035 Move W21, [X19+128]
	036 Call 0x1C17F10
	037 Move X1, X31
	038 Move X20, X0
	039 Call Object..ctor, X0
	040 Move W8, 28
	041 NotImplemented "Instruction MOVI not yet implemented."
	042 Move X0, X19
	043 Move X1, X20
	044 Move [X20+52], W21
	045 Move [X20+16], W8
	046 Move [X20+44], D0
	047 Call RegexParser.StartGroup, X0, X1
	048 Move X8, [X19+56]
	049 Compare X8, 0
	050 JumpIfEqual {432}
	051 Move X23, 0xAFB000
	052 Move X23, [X23+2056]
	053 Move X25, -44732416
	054 Move W22, W31
	055 Add X25, X25, 1210
	056 Move W27, 20
	057 Move W28, 14
	058 Move W29, 18
	059 Move W8, [X8+16]
	060 Move W9, [X19+64]
	061 Subtract W8, W8, W9
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, X19
	064 Call RegexParser.ScanBlank, X0
	065 Move W20, [X19+64]
	066 Move W9, [X19+128]
	067 Move X8, [X19+56]
	068 Move TEMP, X9
	069 And TEMP, TEMP, 32
	070 Compare TEMP, 32
	071 JumpIfEqual {107}
	072 Move W9, W20
	073 Compare X8, 0
	074 JumpIfEqual {432}
	075 Move W8, [X8+16]
	076 Subtract W8, W8, W9
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, X19
	079 Call RegexParser.RightChar, X0
	080 Move X8, [X23]
	081 Move W21, W0
	082 Move W9, [X8+224]
	083 Compare W9, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X8
	086 Call 0x1C17DFC
	087 Move W0, W21
	088 Call RegexParser.IsSpecial, X0
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {101}
	093 And W8, W21, 0xFFFF
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X0, X19
	096 Call RegexParser.IsTrueQuantifier, X0
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfEqual {143}
	101 Move W9, [X19+64]
	102 Move X8, [X19+56]
	103 Add W9, W9, 1
	104 Move [X19+64], W9
	105 Compare X8, 0
	106 JumpIfNotEqual {75}
	107 Move W9, W20
	108 Compare X8, 0
	109 JumpIfEqual {432}
	110 Move W8, [X8+16]
	111 Subtract W8, W8, W9
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X19
	114 Call RegexParser.RightChar, X0
	115 Move X8, [X23]
	116 NotImplemented "Instruction STRH not yet implemented."
	117 Move W21, W0
	118 Move W9, [X8+224]
	119 Compare W9, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X8
	122 Call 0x1C17DFC
	123 Move W0, W21
	124 Call RegexParser.IsStopperX, X0
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfNotEqual {137}
	129 And W8, W21, 0xFFFF
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X0, X19
	132 Call RegexParser.IsTrueQuantifier, X0
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfEqual {143}
	137 Move W9, [X19+64]
	138 Move X8, [X19+56]
	139 Add W9, W9, 1
	140 Move [X19+64], W9
	141 Compare X8, 0
	142 JumpIfNotEqual {110}
	143 Move W26, [X19+64]
	144 Move X0, X19
	145 Call RegexParser.ScanBlank, X0
	146 Move X8, [X19+56]
	147 Compare X8, 0
	148 JumpIfEqual {432}
	149 Move W8, [X8+16]
	150 Move W9, [X19+64]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move W24, W31
	153 Move W21, 33
	154 Move X0, X19
	155 Call RegexParser.RightChar, X0
	156 Move X8, [X23]
	157 NotImplemented "Instruction STRH not yet implemented."
	158 Move W21, W0
	159 Move W9, [X8+224]
	160 Compare W9, 0
	161 JumpIfNotEqual {164}
	162 Move X0, X8
	163 Call 0x1C17DFC
	164 Move W0, W21
	165 Call RegexParser.IsSpecial, X0
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {181}
	170 Move X0, [X23]
	171 Move W8, [X0+224]
	172 Compare W8, 0
	173 JumpIfNotEqual {175}
	174 Call 0x1C17DFC
	175 Move W0, W21
	176 Call RegexParser.IsQuantifier, X0
	177 Move W8, [X19+64]
	178 And W24, W0, 1
	179 Add W8, W8, 1
	180 Move [X19+64], W8
	181 Move W24, W31
	182 Move W21, 32
	183 NotImplemented "Instruction STRH not yet implemented."
	184 Subtract W8, W26, W20
	185 Subtract W2, W8, W24
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move X0, X19
	188 Move W1, W20
	189 Move W3, W31
	190 Call RegexParser.AddConcatenate, X0, X1, X2, X3
	191 Compare W24, 0
	192 JumpIfEqual {202}
	193 Move X0, [X19+56]
	194 Compare X0, 0
	195 JumpIfEqual {432}
	196 Subtract W1, W26, 1
	197 Move X2, X31
	198 Call String.get_Chars, X0, X1
	199 Move W1, W0
	200 Move X0, X19
	201 Call RegexParser.AddUnitOne, X0, X1
	202 Move W22, W31
	203 And W8, W21, 0xFFFF
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Subtract W9, W8, 32
	206 NotImplemented "Instruction CMP not yet implemented."
	207 NotImplemented "Instruction ADR not yet implemented."
	208 Move W10, [X25]
	209 Add X8, X8, X10
	210 CallNoReturn X8
	211 Move W8, [X19+128]
	212 And W31, W8, 2
	213 Move W8, 15
	214 NotImplemented "Instruction CSEL not yet implemented."
	215 NotImplemented "Instruction CMP not yet implemented."
	216 NotImplemented "Instruction CMP not yet implemented."
	217 NotImplemented "Instruction CMP not yet implemented."
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move X0, X19
	220 Call RegexParser.AddAlternate, X0
	221 NotImplemented "Instruction CMP not yet implemented."
	222 NotImplemented "Instruction CMP not yet implemented."
	223 Move X0, X19
	224 Move W1, W31
	225 Call RegexParser.ScanBackslash, X0, X1
	226 Move [X19+48], X0
	227 Move W8, [X19+128]
	228 And W31, W8, 2
	229 NotImplemented "Instruction CSEL not yet implemented."
	230 Move X0, X19
	231 Call RegexParser.AddUnitType, X0, X1
	232 Move W8, [X19+128]
	233 Move X0, X19
	234 Move W2, W31
	235 And W1, W8, 1
	236 Call RegexParser.ScanCharClass, X0, X1, X2
	237 Compare X0, 0
	238 JumpIfEqual {432}
	239 Move X1, X31
	240 Call RegexCharClass.ToStringClass, X0
	241 Move X1, X0
	242 NotImplemented "Instruction CMP not yet implemented."
	243 Move X8, [X19+48]
	244 Compare X8, 0
	245 JumpIfEqual {448}
	246 Move W8, [X19+64]
	247 Subtract W8, W8, 1
	248 Move [X19+64], W8
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move X0, X19
	251 NotImplemented "Instruction CSET not yet implemented."
	252 Call RegexParser.PushOptions, X0
	253 Move X0, X19
	254 Call RegexParser.ScanGroupOpen, X0
	255 Compare X0, 0
	256 JumpIfEqual {410}
	257 Move X20, X0
	258 Move X0, X19
	259 Call RegexParser.PushGroup, X0
	260 Move X0, X19
	261 Move X1, X20
	262 Call RegexParser.StartGroup, X0, X1
	263 Move X8, [X19+16]
	264 Compare X8, 0
	265 JumpIfEqual {477}
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move X0, X19
	268 NotImplemented "Instruction CSET not yet implemented."
	269 Call RegexParser.AddGroup, X0
	270 Move X0, X19
	271 Call RegexParser.PopGroup, X0
	272 Move X0, X19
	273 Call RegexParser.PopOptions, X0
	274 Move X8, [X19+48]
	275 Compare X8, 0
	276 JumpIfNotEqual {290}
	277 Move W8, [X19+128]
	278 Move TEMP, X8
	279 And TEMP, TEMP, 16
	280 Compare TEMP, 16
	281 JumpIfEqual {285}
	282 Move W1, 10
	283 Move X0, X19
	284 Call RegexParser.AddUnitNotone, X0, X1
	285 Move X8, 0xAFC000
	286 Move X8, [X8+816]
	287 Move X1, [X8]
	288 Move X0, X19
	289 Call RegexParser.AddUnitSet, X0, X1
	290 Move X0, X19
	291 Call RegexParser.ScanBlank, X0
	292 Move X8, [X19+56]
	293 Compare X8, 0
	294 JumpIfEqual {432}
	295 Move W8, [X8+16]
	296 Move W9, [X19+64]
	297 NotImplemented "Instruction CMP not yet implemented."
	298 Move X0, X19
	299 Call RegexParser.IsTrueQuantifier, X0
	300 Move TEMP, X0
	301 And TEMP, TEMP, 1
	302 Compare TEMP, 1
	303 JumpIfNotEqual {397}
	304 Move X0, X19
	305 Call RegexParser.RightCharMoveRight, X0
	306 NotImplemented "Instruction STRH not yet implemented."
	307 Move X8, [X19+48]
	308 Compare X8, 0
	309 JumpIfEqual {406}
	310 Move W20, W0
	311 And W8, W20, 0xFFFF
	312 NotImplemented "Instruction CMP not yet implemented."
	313 NotImplemented "Instruction CMP not yet implemented."
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Move W21, 1
	316 NotImplemented "Instruction CMP not yet implemented."
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Move W24, [X19+64]
	319 Move X0, X19
	320 Call RegexParser.ScanDecimal, X0
	321 Move W8, [X19+64]
	322 Move W21, W0
	323 Move W22, W0
	324 NotImplemented "Instruction CMP not yet implemented."
	325 Move X9, [X19+56]
	326 Compare X9, 0
	327 JumpIfEqual {432}
	328 Move W9, [X9+16]
	329 Move W22, W21
	330 Subtract W8, W9, W8
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move X0, X19
	333 Call RegexParser.RightChar, X0
	334 And W8, W0, 0xFFFF
	335 NotImplemented "Instruction CMP not yet implemented."
	336 Move W22, W21
	337 Move W8, [X19+64]
	338 Move X9, [X19+56]
	339 Add W8, W8, 1
	340 Move [X19+64], W8
	341 Compare X9, 0
	342 JumpIfEqual {432}
	343 Move W9, [X9+16]
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move X0, X19
	346 Call RegexParser.RightChar, X0
	347 And W8, W0, 0xFFFF
	348 NotImplemented "Instruction CMP not yet implemented."
	349 Move TEMP, 0x80000000
	350 Not TEMP
	351 Move W22, TEMP
	352 Move W21, W31
	353 Move TEMP, 0x80000000
	354 Not TEMP
	355 Move W22, TEMP
	356 Move W21, W31
	357 Move W22, 1
	358 Move X0, X19
	359 Call RegexParser.ScanDecimal, X0
	360 Move W22, W0
	361 Move W8, [X19+64]
	362 NotImplemented "Instruction CMP not yet implemented."
	363 Move X9, [X19+56]
	364 Compare X9, 0
	365 JumpIfEqual {432}
	366 Move W9, [X9+16]
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move X0, X19
	369 Call RegexParser.RightCharMoveRight, X0
	370 And W8, W0, 0xFFFF
	371 NotImplemented "Instruction CMP not yet implemented."
	372 Move X0, X19
	373 Call RegexParser.ScanBlank, X0
	374 Move X8, [X19+56]
	375 Compare X8, 0
	376 JumpIfEqual {432}
	377 Move W8, [X8+16]
	378 Move W9, [X19+64]
	379 NotImplemented "Instruction CMP not yet implemented."
	380 Move X0, X19
	381 Call RegexParser.RightChar, X0
	382 And W8, W0, 0xFFFF
	383 NotImplemented "Instruction CMP not yet implemented."
	384 Move W8, [X19+64]
	385 Move W1, 1
	386 Add W8, W8, 1
	387 Move [X19+64], W8
	388 Move W1, W31
	389 NotImplemented "Instruction CMP not yet implemented."
	390 Move X0, X19
	391 Move W2, W21
	392 Move W3, W22
	393 Call RegexParser.AddConcatenate, X0, X1, X2, X3
	394 Move X8, [X19+48]
	395 Compare X8, 0
	396 JumpIfNotEqual {311}
	397 Move W24, W31
	398 Move X0, X19
	399 Call RegexParser.AddConcatenate, X0
	400 NotImplemented "Instruction CMP not yet implemented."
	401 NotImplemented "Instruction CSET not yet implemented."
	402 Move X0, X19
	403 Call RegexParser.AddConcatenate, X0
	404 Subtract W8, W24, 1
	405 Move [X19+64], W8
	406 Move W22, 1
	407 Move X8, [X19+56]
	408 Compare X8, 0
	409 JumpIfNotEqual {59}
	410 Move X0, X19
	411 Call RegexParser.PopKeepOptions, X0
	412 Move X8, [X19+16]
	413 Compare X8, 0
	414 JumpIfNotEqual {479}
	415 Move X0, X19
	416 Call RegexParser.AddGroup, X0
	417 Move X0, [X19+48]
	418 Move X20, [X31+96]
	419 Move X19, [X31+104]
	420 Move X22, [X31+80]
	421 Move X21, [X31+88]
	422 Move X24, [X31+64]
	423 Move X23, [X31+72]
	424 Move X26, [X31+48]
	425 Move X25, [X31+56]
	426 Move X28, [X31+32]
	427 Move X27, [X31+40]
	428 Move X29, [X31+16]
	429 Move X30, [X31+24]
	430 Add X31, X31, 112
	431 Return X0
	432 Call 0x1C17F20
	433 Move X0, 0xAFC000
	434 Move X0, [X0+1008]
	435 Move X0, 0xAFC000
	436 Move X0, [X0+1016]
	437 Call 0x1C17D08
	438 Move X1, X0
	439 Move X0, X19
	440 Call RegexParser.MakeException, X0, X1
	441 Move X19, X0
	442 Move X0, 0xAFC000
	443 Move X0, [X0+1024]
	444 Call 0x1C17D08
	445 Move X1, X0
	446 Move X0, X19
	447 Call 0x1C17DEC
	448 Move TEMP, X22
	449 And TEMP, TEMP, 1
	450 Compare TEMP, 1
	451 JumpIfNotEqual {469}
	452 Move X0, 0xAB5000
	453 Move X0, [X0+368]
	454 Call 0x1C17D08
	455 Move W8, [X0+224]
	456 Compare W8, 0
	457 JumpIfNotEqual {459}
	458 Call 0x1C17DFC
	459 Add X0, X31, 12
	460 Move X1, X31
	461 Call Char.ToString, X0
	462 Move X20, X0
	463 Move X0, 0xAFC000
	464 Move X0, [X0+1032]
	465 Call 0x1C17D08
	466 Move X1, X20
	467 Move X2, X31
	468 Call SR.Format, X0, X1
	469 Move X0, 0xAFC000
	470 Move X0, [X0+1040]
	471 Call 0x1C17D08
	472 Move X20, X0
	473 Move X0, X19
	474 Call 0x19913C0
	475 Move X0, X19
	476 Move X1, X20
	477 Move X0, 0xAFB000
	478 Move X0, [X0+1048]
	479 Move X0, 0xAFB000
	480 Move X0, [X0+1056]

Method: System.Text.RegularExpressions.RegexNode ScanReplacement()

Disassembly:
	0x036421F0 STP X24, X23, [X31 + 0x30]
	0x036421F4 STP X22, X21, [X31 + 0x40]
	0x036421F8 STP X20, X19, [X31 + 0x50]
	0x036421FC ADRP X22, 0xD9E000
	0x03642200 LDRB W8, [X22 + 0x583]
	0x03642204 MOV W21, W2
	0x03642208 MOV W20, W1
	0x0364220C MOV X19, X0
	0x03642210 TBNZ X8, 0x0, 0x3642228
	0x03642214 ADRP X0, 0xAF9000
	0x03642218 LDR X0, [X0 + 0x8E0]
	0x0364221C BL 0x1C16CF4
	0x03642220 MOVZ W8, 0x1
	0x03642224 STRB W8, [X22 + 0x583]
	0x03642228 TBZ X21, 0x0, 0x3642234
	0x0364222C MOV X22, X31
	0x03642230 B 0x3642250
	0x03642234 ADRP X8, 0xAF9000
	0x03642238 LDR X8, [X8 + 0x8E0]
	0x0364223C LDR X0, [X8]
	0x03642240 BL 0x1C16F10
	0x03642244 MOV X1, X31
	0x03642248 MOV X22, X0
	0x0364224C BL 0x363414C
	0x03642250 LDR X8, [X19 + 0x38]
	0x03642254 CBZ X8, 0x3642764
	0x03642258 LDR W8, [X8 + 0x10]
	0x0364225C LDR W9, [X19 + 0x40]
	0x03642260 SUB W8, W8, W9
	0x03642264 CMP W8, 0x1
	0x03642268 B.LT 0x364229C
	0x0364226C MOV X0, X19
	0x03642270 BL 0x3641BB0
	0x03642274 AND W8, W0, 0xFFFF
	0x03642278 CMP W8, 0x5E
	0x0364227C B.NE 0x364229C
	0x03642280 LDR W8, [X19 + 0x40]
	0x03642284 ADD W8, W8, 0x1
	0x03642288 STR W8, [X19 + 0x40]
	0x0364228C TBNZ X21, 0x0, 0x364229C
	0x03642290 CBZ X22, 0x3642764
	0x03642294 MOVZ W8, 0x1
	0x03642298 STRB W8, [X22 + 0x21]
	0x0364229C LDR X8, [X19 + 0x38]
	0x036422A0 CBZ X8, 0x3642764
	0x036422A4 MOV W23, W31
	0x036422A8 MOV W25, W31
	0x036422AC MOVZ W26, 0x1
	0x036422B0 LDR W8, [X8 + 0x10]
	0x036422B4 LDR W9, [X19 + 0x40]
	0x036422B8 SUB W8, W8, W9
	0x036422BC CMP W8, 0x0
	0x036422C0 B.LE 0x3642768
	0x036422C4 MOV X0, X19
	0x036422C8 BL 0x3643D54
	0x036422CC AND W8, W0, 0xFFFF
	0x036422D0 CMP W8, 0x5B
	0x036422D4 B.EQ 0x36422FC
	0x036422D8 CMP W8, 0x5C
	0x036422DC B.EQ 0x364233C
	0x036422E0 CMP W8, 0x5D
	0x036422E4 B.NE 0x3642394
	0x036422E8 TBZ X26, 0x0, 0x3642728
	0x036422EC MOV W27, W31
	0x036422F0 MOVZ W24, 0x5D
	0x036422F4 TBNZ X25, 0x0, 0x364241C
	0x036422F8 B 0x3642554
	0x036422FC LDR X8, [X19 + 0x38]
	0x03642300 CBZ X8, 0x3642764
	0x03642304 LDR W8, [X8 + 0x10]
	0x03642308 LDR W9, [X19 + 0x40]
	0x0364230C SUB W8, W8, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD9F000
	006 Move X20, 0xAFB000
	007 Move W8, [X21+1410]
	008 Move X20, [X20+936]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAFB000
	015 Move X0, [X0+936]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1410], W8
	019 Move X0, [X20]
	020 Move W21, [X19+128]
	021 Call 0x1C17F10
	022 Move X1, X31
	023 Move X20, X0
	024 Call Object..ctor, X0
	025 Move W8, 25
	026 Move [X20+16], W8
	027 Move [X20+52], W21
	028 Move X8, [X19+56]
	029 Move [X19+40], X20
	030 Compare X8, 0
	031 JumpIfEqual {69}
	032 Move W8, [X8+16]
	033 Move W20, [X19+64]
	034 Subtract W9, W8, W20
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, W20
	037 Add W21, W9, 1
	038 Move X0, X19
	039 Call RegexParser.RightChar, X0
	040 Move W8, [X19+64]
	041 And W9, W0, 0xFFFF
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Subtract W21, W21, 1
	044 Add W8, W8, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X19+64], W8
	047 Subtract W2, W8, W20
	048 Move W3, 1
	049 Move X0, X19
	050 Move W1, W20
	051 Call RegexParser.AddConcatenate, X0, X1, X2, X3
	052 Subtract W2, W8, W20
	053 Move W3, 1
	054 Move X0, X19
	055 Move W1, W20
	056 Call RegexParser.AddConcatenate, X0, X1, X2, X3
	057 Move X0, X19
	058 Call RegexParser.RightCharMoveRight, X0
	059 And W8, W0, 0xFFFF
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X19
	062 Call RegexParser.ScanDollar, X0
	063 Move [X19+48], X0
	064 Move X0, X19
	065 Call RegexParser.AddConcatenate, X0
	066 Move X8, [X19+56]
	067 Compare X8, 0
	068 JumpIfNotEqual {32}
	069 Call 0x1C17F20
	070 Move X0, [X19+40]
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Return X0

Method: System.Text.RegularExpressions.RegexCharClass ScanCharClass(System.Boolean caseInsensitive, System.Boolean scanOnly)

Disassembly:
	0x036431E4 BL 0x32094D4
	0x036431E8 B 0x36430E4
	0x036431EC STR X30, [X31 - 0x20]!
	0x036431F0 STP X20, X19, [X31 + 0x10]
	0x036431F4 ADRP X20, 0xD9D000
	0x036431F8 LDRB W8, [X20 + 0x5A3]
	0x036431FC MOV X19, X0
	0x03643200 TBNZ X8, 0x0, 0x3643224
	0x03643204 ADRP X0, 0xAF9000
	0x03643208 LDR X0, [X0 + 0x4D0]
	0x0364320C BL 0x1C16CF4
	0x03643210 ADRP X0, 0xAF9000
	0x03643214 LDR X0, [X0 + 0x3E8]
	0x03643218 BL 0x1C16CF4
	0x0364321C MOVZ W8, 0x1
	0x03643220 STRB W8, [X20 + 0x5A3]
	0x03643224 LDR X0, [X19 + 0x88]
	0x03643228 CBZ X0, 0x364324C
	0x0364322C ADRP X8, 0xAF9000
	0x03643230 LDR X8, [X8 + 0x4D0]
	0x03643234 LDR W9, [X0 + 0x18]
	0x03643238 LDP X20, X19, [X31 + 0x10]
	0x0364323C LDR X2, [X8]
	0x03643240 SUB W1, W9, 0x1
	0x03643244 LDR X30, [X31], #0x20
	0x03643248 B 0x2FE0BFC
	0x0364324C BL 0x1C16F20
	0x03643250 STR X30, [X31 - 0x10]!
	0x03643254 LDR X8, [X0 + 0x18]
	0x03643258 CBZ X8, 0x3643288
	0x0364325C LDR X9, [X0 + 0x10]
	0x03643260 STR X9, [X8 + 0x38]
	0x03643264 LDR X9, [X0 + 0x20]
	0x03643268 CBZ X9, 0x3643288
	0x0364326C STR X8, [X9 + 0x38]
	0x03643270 LDR X8, [X0 + 0x28]
	0x03643274 CBZ X8, 0x3643288
	0x03643278 STR X9, [X8 + 0x38]
	0x0364327C STR X8, [X0 + 0x10]
	0x03643280 LDR X30, [X31], #0x10
	0x03643284 RET
	0x03643288 BL 0x1C16F20
	0x0364328C STP X30, X21, [X31 - 0x20]!
	0x03643290 STP X20, X19, [X31 + 0x10]
	0x03643294 ADRP X20, 0xD9D000
	0x03643298 LDRB W8, [X20 + 0x59B]
	0x0364329C MOV X19, X0
	0x036432A0 TBNZ X8, 0x0, 0x36432B8
	0x036432A4 ADRP X0, 0xAF9000
	0x036432A8 LDR X0, [X0 + 0x3A8]
	0x036432AC BL 0x1C16CF4
	0x036432B0 MOVZ W8, 0x1
	0x036432B4 STRB W8, [X20 + 0x59B]
	0x036432B8 LDR X20, [X19 + 0x18]
	0x036432BC CBZ X20, 0x364334C
	0x036432C0 LDR W8, [X20 + 0x10]
	0x036432C4 SUB W8, W8, 0x21
	0x036432C8 CMP W8, 0x1
	0x036432CC B.HI 0x36432EC
	0x036432D0 LDR X21, [X19 + 0x28]
	0x036432D4 CBZ X21, 0x364334C
	0x036432D8 MOV X0, X21
	0x036432DC BL 0x363F44C
	0x036432E0 MOV X0, X20
	0x036432E4 MOV X1, X21
	0x036432E8 B 0x364330C
	0x036432EC LDR X20, [X19 + 0x28]
	0x036432F0 CBZ X20, 0x364334C
	0x036432F4 LDR X21, [X19 + 0x20]
	0x036432F8 MOV X0, X20
	0x036432FC BL 0x363F44C
	0x03643300 CBZ X21, 0x364334C
	0x03643304 MOV X0, X21
	0x03643308 MOV X1, X20
	0x0364330C BL 0x3640154
	0x03643310 ADRP X8, 0xAF9000
	0x03643314 LDR X8, [X8 + 0x3A8]
	0x03643318 LDR W21, [X19 + 0x80]
	0x0364331C LDR X0, [X8]
	0x03643320 BL 0x1C16F10
	0x03643324 MOV X1, X31
	0x03643328 MOV X20, X0
	0x0364332C BL 0x33BDD8C
	0x03643330 MOVZ W8, 0x19
	0x03643334 STR W21, [X20 + 0x34]
	0x03643338 STR W8, [X20 + 0x10]
	0x0364333C STR X20, [X19 + 0x28]
	0x03643340 LDP X20, X19, [X31 + 0x10]
	0x03643344 LDP X30, X21, [X31], #0x20
	0x03643348 RET
	0x0364334C BL 0x1C16F20
	0x03643350 LDR X8, [X0 + 0x10]
	0x03643354 CMP X8, 0x0
	0x03643358 CSET W0, EQ
	0x0364335C RET
	0x03643360 STP X30, X23, [X31 - 0x30]!
	0x03643364 STP X22, X21, [X31 + 0x10]
	0x03643368 STP X20, X19, [X31 + 0x20]
	0x0364336C ADRP X23, 0xD9D000
	0x03643370 ADRP X22, 0xAF8000
	0x03643374 ADRP X21, 0xAB8000
	0x03643378 LDRB W8, [X23 + 0x5A4]
	0x0364337C LDR X22, [X22 + 0x910]
	0x03643380 LDR X21, [X21 + 0x578]
	0x03643384 MOV X19, X1
	0x03643388 MOV X20, X0
	0x0364338C TBNZ X8, 0x0, 0x36433B0
	0x03643390 ADRP X0, 0xAB8000
	0x03643394 LDR X0, [X0 + 0x578]
	0x03643398 BL 0x1C16CF4
	0x0364339C ADRP X0, 0xAF8000
	0x036433A0 LDR X0, [X0 + 0x910]
	0x036433A4 BL 0x1C16CF4
	0x036433A8 MOVZ W8, 0x1
	0x036433AC STRB W8, [X23 + 0x5A4]
	0x036433B0 LDR X1, [X20 + 0x38]
	0x036433B4 LDR X0, [X22]
	0x036433B8 MOV X2, X19
	0x036433BC MOV X3, X31
	0x036433C0 BL 0x320A264
	0x036433C4 LDR X8, [X21]
	0x036433C8 MOV X19, X0
	0x036433CC MOV X0, X8
	0x036433D0 BL 0x1C16F10
	0x036433D4 MOV X1, X19
	0x036433D8 MOV X2, X31
	0x036433DC MOV X20, X0
	0x036433E0 BL 0x3314A68
	0x036433E4 MOV X0, X20
	0x036433E8 LDP X20, X19, [X31 + 0x20]
	0x036433EC LDP X22, X21, [X31 + 0x10]
	0x036433F0 LDP X30, X23, [X31], #0x30
	0x036433F4 RET
	0x036433F8 STP X30, X21, [X31 - 0x20]!
	0x036433FC STP X20, X19, [X31 + 0x10]
	0x03643400 LDR X20, [X0 + 0x18]
	0x03643404 CBZ X20, 0x3643534
	0x03643408 LDR W8, [X20 + 0x10]
	0x0364340C MOV X19, X0
	0x03643410 SUB W8, W8, 0x21
	0x03643414 CMP W8, 0x1
	0x03643418 B.HI 0x36434EC
	0x0364341C LDR X21, [X19 + 0x28]
	0x03643420 CBZ X21, 0x3643534
	0x03643424 MOV X0, X21
	0x03643428 BL 0x363F44C
	0x0364342C MOV X0, X20
	0x03643430 MOV X1, X21
	0x03643434 BL 0x3640154
	0x03643438 LDR X21, [X19 + 0x18]
	0x0364343C CBZ X21, 0x3643534
	0x03643440 LDR W8, [X21 + 0x10]
	0x03643444 ADRP X20, 0xD9D000
	0x03643448 CMP W8, 0x21
	0x0364344C B.NE 0x3643480
	0x03643450 LDRB W8, [X20 + 0x57B]
	0x03643454 TBNZ X8, 0x0, 0x364346C
	0x03643458 ADRP X0, 0xAF9000
	0x0364345C LDR X0, [X0 + 0x2D0]
	0x03643460 BL 0x1C16CF4
	0x03643464 MOVZ W8, 0x1
	0x03643468 STRB W8, [X20 + 0x57B]
	0x0364346C LDR X8, [X21 + 0x18]
	0x03643470 CBZ X8, 0x3643480
	0x03643474 LDR W8, [X8 + 0x18]
	0x03643478 CMP W8, 0x2
	0x0364347C B.GT 0x36434B8
	0x03643480 LDR X21, [X19 + 0x18]
	0x03643484 CBZ X21, 0x3643534
	0x03643488 LDRB W8, [X20 + 0x57B]
	0x0364348C TBNZ X8, 0x0, 0x36434A4
	0x03643490 ADRP X0, 0xAF9000
	0x03643494 LDR X0, [X0 + 0x2D0]
	0x03643498 BL 0x1C16CF4
	0x0364349C MOVZ W8, 0x1
	0x036434A0 STRB W8, [X20 + 0x57B]
	0x036434A4 LDR X8, [X21 + 0x18]
	0x036434A8 CBZ X8, 0x3643520
	0x036434AC LDR W8, [X8 + 0x18]
	0x036434B0 CMP W8, 0x4
	0x036434B4 B.LT 0x3643520
	0x036434B8 ADRP X0, 0xAF9000
	0x036434BC LDR X0, [X0 + 0x4D8]
	0x036434C0 BL 0x1C16D08
	0x036434C4 MOV X1, X0
	0x036434C8 MOV X0, X19
	0x036434CC BL 0x3643360
	0x036434D0 MOV X19, X0
	0x036434D4 ADRP X0, 0xAF9000
	0x036434D8 LDR X0, [X0 + 0x4E0]
	0x036434DC BL 0x1C16D08
	0x036434E0 MOV X1, X0
	0x036434E4 MOV X0, X19
	0x036434E8 BL 0x1C16DEC
	0x036434EC LDR X20, [X19 + 0x28]
	0x036434F0 CBZ X20, 0x3643534
	0x036434F4 LDR X21, [X19 + 0x20]
	0x036434F8 MOV X0, X20
	0x036434FC BL 0x363F44C
	0x03643500 CBZ X21, 0x3643534
	0x03643504 MOV X0, X21
	0x03643508 MOV X1, X20
	0x0364350C BL 0x3640154
	0x03643510 LDR X0, [X19 + 0x18]
	0x03643514 CBZ X0, 0x3643534
	0x03643518 LDR X1, [X19 + 0x20]
	0x0364351C BL 0x3640154
	0x03643520 LDR X8, [X19 + 0x18]
	0x03643524 STR X8, [X19 + 0x30]
	0x03643528 LDP X20, X19, [X31 + 0x10]
	0x0364352C LDP X30, X21, [X31], #0x20
	0x03643530 RET
	0x03643534 BL 0x1C16F20
	0x03643538 STP X30, X21, [X31 - 0x20]!
	0x0364353C STP X20, X19, [X31 + 0x10]
	0x03643540 LDR X8, [X0 + 0x10]
	0x03643544 STR X8, [X0 + 0x28]
	0x03643548 CBZ X8, 0x36435D0
	0x0364354C LDR X8, [X8 + 0x38]
	0x03643550 MOV X19, X0
	0x03643554 STR X8, [X0 + 0x20]
	0x03643558 CBZ X8, 0x36435D0
	0x0364355C LDR X20, [X8 + 0x38]
	0x03643560 STR X20, [X19 + 0x18]
	0x03643564 CBZ X20, 0x36435D0
	0x03643568 LDR X8, [X20 + 0x38]
	0x0364356C STR X8, [X19 + 0x10]
	0x03643570 LDR W8, [X20 + 0x10]
	0x03643574 CMP W8, 0x22
	0x03643578 B.NE 0x36435C4
	0x0364357C ADRP X21, 0xD9D000
	0x03643580 LDRB W8, [X21 + 0x57B]
	0x03643584 TBNZ X8, 0x0, 0x364359C
	0x03643588 ADRP X0, 0xAF9000
	0x0364358C LDR X0, [X0 + 0x2D0]
	0x03643590 BL 0x1C16CF4
	0x03643594 MOVZ W8, 0x1
	0x03643598 STRB W8, [X21 + 0x57B]
	0x0364359C LDR X8, [X20 + 0x18]
	0x036435A0 CBZ X8, 0x36435AC
	0x036435A4 LDR W8, [X8 + 0x18]
	0x036435A8 CBNZ W8, 0x36435C4
	0x036435AC LDR X1, [X19 + 0x30]
	0x036435B0 CBZ X1, 0x36435D4
	0x036435B4 LDR X0, [X19 + 0x18]
	0x036435B8 CBZ X0, 0x36435D0
	0x036435BC BL 0x3640154
	0x036435C0 STR X31, [X19 + 0x30]
	0x036435C4 LDP X20, X19, [X31 + 0x10]
	0x036435C8 LDP X30, X21, [X31], #0x20
	0x036435CC RET
	0x036435D0 BL 0x1C16F20
	0x036435D4 ADRP X0, 0xAF9000
	0x036435D8 LDR X0, [X0 + 0x4E8]
	0x036435DC BL 0x1C16D08
	0x036435E0 MOV X1, X0
	0x036435E4 MOV X0, X19
	0x036435E8 BL 0x3643360
	0x036435EC MOV X19, X0
	0x036435F0 ADRP X0, 0xAF9000
	0x036435F4 LDR X0, [X0 + 0x4F0]
	0x036435F8 BL 0x1C16D08
	0x036435FC MOV X1, X0
	0x03643600 MOV X0, X19
	0x03643604 BL 0x1C16DEC
	0x03643608 STR X30, [X31 - 0x20]!
	0x0364360C STP X20, X19, [X31 + 0x10]
	0x03643610 ADRP X20, 0xD9D000
	0x03643614 LDRB W8, [X20 + 0x5A1]
	0x03643618 MOV X19, X0
	0x0364361C TBNZ X8, 0x0, 0x364364C
	0x03643620 ADRP X0, 0xAF9000
	0x03643624 LDR X0, [X0 + 0x4D0]
	0x03643628 BL 0x1C16CF4
	0x0364362C ADRP X0, 0xAF9000
	0x03643630 LDR X0, [X0 + 0x3E8]
	0x03643634 BL 0x1C16CF4
	0x03643638 ADRP X0, 0xAF9000
	0x0364363C LDR X0, [X0 + 0x4F8]
	0x03643640 BL 0x1C16CF4
	0x03643644 MOVZ W8, 0x1
	0x03643648 STRB W8, [X20 + 0x5A1]
	0x0364364C LDR X0, [X19 + 0x88]
	0x03643650 CBZ X0, 0x364369C
	0x03643654 ADRP X8, 0xAF9000
	0x03643658 LDR X8, [X8 + 0x4F8]
	0x0364365C LDR W9, [X0 + 0x18]
	0x03643660 LDR X2, [X8]
	0x03643664 SUB W1, W9, 0x1
	0x03643668 BL 0x2FDEE88
	0x0364366C LDR X8, [X19 + 0x88]
	0x03643670 STR W0, [X19 + 0x80]
	0x03643674 CBZ X8, 0x364369C
	0x03643678 ADRP X9, 0xAF9000
	0x0364367C LDR X9, [X9 + 0x4D0]
	0x03643680 LDR W10, [X8 + 0x18]
	0x03643684 LDP X20, X19, [X31 + 0x10]
	0x03643688 MOV X0, X8
	0x0364368C LDR X2, [X9]
	0x03643690 SUB W1, W10, 0x1
	0x03643694 LDR X30, [X31], #0x20
	0x03643698 B 0x2FE0BFC
	0x0364369C BL 0x1C16F20
	0x036436A0 STP X30, X21, [X31 - 0x20]!
	0x036436A4 STP X20, X19, [X31 + 0x10]
	0x036436A8 ADRP X21, 0xD9D000
	0x036436AC LDRB W8, [X21 + 0x586]
	0x036436B0 MOV W20, W1
	0x036436B4 MOV X19, X0
	0x036436B8 TBNZ X8, 0x0, 0x3643724
	0x036436BC ADRP X0, 0xAF8000
	0x036436C0 LDR X0, [X0 + 0x8E0]
	0x036436C4 BL 0x1C16CF4
	0x036436C8 ADRP X0, 0xAF9000
	0x036436CC LDR X0, [X0 + 0x3A8]
	0x036436D0 BL 0x1C16CF4
	0x036436D4 ADRP X0, 0xAF9000
	0x036436D8 LDR X0, [X0 + 0x500]
	0x036436DC BL 0x1C16CF4
	0x036436E0 ADRP X0, 0xAF9000
	0x036436E4 LDR X0, [X0 + 0x508]
	0x036436E8 BL 0x1C16CF4
	0x036436EC ADRP X0, 0xAF9000
	0x036436F0 LDR X0, [X0 + 0x510]
	0x036436F4 BL 0x1C16CF4
	0x036436F8 ADRP X0, 0xAF8000
	0x036436FC LDR X0, [X0 + 0x960]
	0x03643700 BL 0x1C16CF4
	0x03643704 ADRP X0, 0xAF9000
	0x03643708 LDR X0, [X0 + 0x518]
	0x0364370C BL 0x1C16CF4
	0x03643710 ADRP X0, 0xAF9000
	0x03643714 LDR X0, [X0 + 0x520]
	0x03643718 BL 0x1C16CF4
	0x0364371C MOVZ W8, 0x1
	0x03643720 STRB W8, [X21 + 0x586]
	0x03643724 LDR X8, [X19 + 0x38]
	0x03643728 CBZ X8, 0x3643BE0
	0x0364372C LDR W8, [X8 + 0x10]
	0x03643730 LDR W9, [X19 + 0x40]
	0x03643734 CMP W8, W9
	0x03643738 B.EQ 0x3643BAC
	0x0364373C MOV X0, X19
	0x03643740 BL 0x3641BB0
	0x03643744 AND W8, W0, 0xFFFF
	0x03643748 MOV W21, W0
	0x0364374C CMP W8, 0x5A
	0x03643750 B.HI 0x36437C4
	0x03643754 CMP W8, 0x50
	0x03643758 B.HI 0x36437EC
	0x0364375C AND W8, W21, 0xFFFF
	0x03643760 CMP W8, 0x46
	0x03643764 B.GT 0x364382C
	0x03643768 SUB W9, W8, 0x41
	0x0364376C CMP W9, 0x2
	0x03643770 B.CC 0x36438FC
	0x03643774 CMP W8, 0x44
	0x03643778 B.NE 0x3643914
	0x0364377C LDR W8, [X19 + 0x40]
	0x03643780 ADD W8, W8, 0x1
	0x03643784 STR W8, [X19 + 0x40]
	0x03643788 TBNZ X20, 0x0, 0x364390C
	0x0364378C LDR W20, [X19 + 0x80]
	0x03643790 TBNZ X20, 0x8, 0x3643B64
	0x03643794 ADRP X19, 0xAF8000
	0x03643798 LDR X19, [X19 + 0x8E0]
	0x0364379C LDR X0, [X19]
	0x036437A0 LDR W8, [X0 + 0xE0]
	0x036437A4 CBNZ W8, 0x36437B0
	0x036437A8 BL 0x1C16DFC
	0x036437AC LDR X0, [X19]
	0x036437B0 LDR X8, [X0 + 0xB8]
	0x036437B4 ADRP X9, 0xAF9000
	0x036437B8 LDR X9, [X9 + 0x3A8]
	0x036437BC LDR X21, [X8 + 0x50]
	0x036437C0 B 0x3643ACC
	0x036437C4 CMP W8, 0x70
	0x036437C8 B.HI 0x364380C
	0x036437CC AND W8, W21, 0xFFFF
	0x036437D0 CMP W8, 0x62
	0x036437D4 B.EQ 0x36438FC
	0x036437D8 CMP W8, 0x64
	0x036437DC B.EQ 0x3643968
	0x036437E0 CMP W8, 0x70
	0x036437E4 B.EQ 0x364383C
	0x036437E8 B 0x3643914
	0x036437EC AND W8, W21, 0xFFFF

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0xD9E000
	013 Move W8, [X22+1411]
	014 Move W21, W2
	015 Move W20, W1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xAF9000
	022 Move X0, [X0+2272]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1411], W8
	026 Move TEMP, X21
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {31}
	030 Move X22, X31
	031 Move X8, 0xAF9000
	032 Move X8, [X8+2272]
	033 Move X0, [X8]
	034 Call 0x1C17F10
	035 Move X1, X31
	036 Move X22, X0
	037 Call RegexCharClass..ctor, X0
	038 Move X8, [X19+56]
	039 Compare X8, 0
	040 JumpIfEqual {423}
	041 Move W8, [X8+16]
	042 Move W9, [X19+64]
	043 Subtract W8, W8, W9
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Call RegexParser.RightChar, X0
	047 And W8, W0, 0xFFFF
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W8, [X19+64]
	050 Add W8, W8, 1
	051 Move [X19+64], W8
	052 Move TEMP, X21
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfEqual {60}
	056 Compare X22, 0
	057 JumpIfEqual {423}
	058 Move W8, 1
	059 Move [X22+33], W8
	060 Move X8, [X19+56]
	061 Compare X8, 0
	062 JumpIfEqual {423}
	063 Move W23, W31
	064 Move W25, W31
	065 Move W26, 1
	066 Move W8, [X8+16]
	067 Move W9, [X19+64]
	068 Subtract W8, W8, W9
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X0, X19
	071 Call RegexParser.RightCharMoveRight, X0
	072 And W8, W0, 0xFFFF
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move TEMP, X26
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {396}
	080 Move W27, W31
	081 Move W24, 93
	082 Move TEMP, X25
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {160}
	086 Move X8, [X19+56]
	087 Compare X8, 0
	088 JumpIfEqual {423}
	089 Move W8, [X8+16]
	090 Move W9, [X19+64]
	091 Subtract W8, W8, W9
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X0, X19
	094 Call RegexParser.RightChar, X0
	095 And W8, W0, 0xFFFF
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CSET not yet implemented."
	098 Or W8, W25, W8
	099 Move TEMP, X8
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {133}
	103 Move W27, W31
	104 Move X8, [X19+56]
	105 Compare X8, 0
	106 JumpIfEqual {423}
	107 Move W8, [X8+16]
	108 Move W9, [X19+64]
	109 Subtract W8, W8, W9
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X0, X19
	112 Call RegexParser.RightCharMoveRight, X0
	113 And W8, W0, 0xFFFF
	114 Move W24, W0
	115 NotImplemented "Instruction CMP not yet implemented."
	116 NotImplemented "Instruction STRH not yet implemented."
	117 NotImplemented "Instruction CMP not yet implemented."
	118 And W8, W24, 0xFFFF
	119 NotImplemented "Instruction CMP not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move W24, W0
	122 Move W27, W31
	123 Move TEMP, X25
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfEqual {160}
	127 Move W27, W31
	128 Move W24, 92
	129 Move TEMP, X25
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfEqual {160}
	133 Move W24, [X19+64]
	134 Move X0, X19
	135 Add W8, W24, 1
	136 Move [X19+64], W8
	137 Call RegexParser.ScanCapname, X0
	138 Move X8, [X19+56]
	139 Compare X8, 0
	140 JumpIfEqual {423}
	141 Move W8, [X8+16]
	142 Move W9, [X19+64]
	143 Subtract W8, W8, W9
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X0, X19
	146 Call RegexParser.RightCharMoveRight, X0
	147 And W8, W0, 0xFFFF
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move X0, X19
	150 Call RegexParser.RightCharMoveRight, X0
	151 And W8, W0, 0xFFFF
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move W27, W31
	154 Move [X19+64], W24
	155 Move W24, 91
	156 Move TEMP, X25
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfNotEqual {253}
	160 Move TEMP, X21
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfEqual {332}
	164 And W8, W24, 0xFFFF
	165 NotImplemented "Instruction CMP not yet implemented."
	166 NotImplemented "Instruction CSET not yet implemented."
	167 Or W8, W27, W8
	168 Or W8, W26, W8
	169 Move TEMP, X8
	170 And TEMP, TEMP, 1
	171 Compare TEMP, 1
	172 JumpIfNotEqual {179}
	173 And W8, W23, 0xFFFF
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Compare X22, 0
	176 JumpIfEqual {423}
	177 Move X0, X22
	178 Move W1, W23
	179 Compare X22, 0
	180 JumpIfEqual {423}
	181 Move X0, X22
	182 Move W1, W23
	183 Move X2, X31
	184 Call RegexCharClass.AddChar, X0, X1
	185 And W1, W20, 1
	186 Move X0, X19
	187 Move W2, W31
	188 Call RegexParser.ScanCharClass, X0, X1, X2
	189 NotImplemented "Instruction CMP not yet implemented."
	190 And W8, W24, 0xFFFF
	191 NotImplemented "Instruction CMP not yet implemented."
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move TEMP, X21
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfEqual {333}
	197 Move TEMP, X25
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfEqual {441}
	201 Compare X22, 0
	202 JumpIfEqual {423}
	203 Move W8, [X19+128]
	204 Move X3, [X19+56]
	205 And W9, W24, 0xFFFF
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move W1, W8
	208 ShiftRight W1, 8
	209 And W1, W1, 255
	210 NotImplemented "Instruction CSET not yet implemented."
	211 Move X0, X22
	212 Move X4, X31
	213 Call RegexCharClass.AddDigit, X0, X1, X2, X3
	214 And W8, W24, 0xFFFF
	215 NotImplemented "Instruction CMP not yet implemented."
	216 NotImplemented "Instruction CMP not yet implemented."
	217 And W8, W24, 0xFFFF
	218 NotImplemented "Instruction CMP not yet implemented."
	219 NotImplemented "Instruction CMP not yet implemented."
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move TEMP, X21
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfEqual {333}
	225 Move TEMP, X25
	226 And TEMP, TEMP, 1
	227 Compare TEMP, 1
	228 JumpIfEqual {441}
	229 Compare X22, 0
	230 JumpIfEqual {423}
	231 Move W8, [X19+128]
	232 And W9, W24, 0xFFFF
	233 NotImplemented "Instruction CMP not yet implemented."
	234 NotImplemented "Instruction CSET not yet implemented."
	235 Move W1, W8
	236 ShiftRight W1, 8
	237 And W1, W1, 255
	238 Move X0, X22
	239 Move X3, X31
	240 Call RegexCharClass.AddWord, X0, X1, X2
	241 Move W8, [X19+64]
	242 Move X0, X19
	243 Subtract W8, W8, 1
	244 Move [X19+64], W8
	245 Call RegexParser.ScanCharEscape, X0
	246 Move W24, W0
	247 NotImplemented "Instruction STRH not yet implemented."
	248 Move W27, 1
	249 Move TEMP, X25
	250 And TEMP, TEMP, 1
	251 Compare TEMP, 1
	252 JumpIfEqual {160}
	253 Move X8, [X19+56]
	254 Compare X8, 0
	255 JumpIfEqual {423}
	256 Move W8, [X8+16]
	257 Move W9, [X19+64]
	258 Subtract W8, W8, W9
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Move X0, X19
	261 Call RegexParser.RightChar, X0
	262 And W8, W0, 0xFFFF
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Move W1, 1
	265 Move X0, X19
	266 Call RegexParser.RightChar, X0, X1
	267 And W8, W0, 0xFFFF
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Move X8, [X19+56]
	270 Compare X8, 0
	271 JumpIfEqual {423}
	272 Move W8, [X8+16]
	273 Move W9, [X19+64]
	274 And W10, W24, 0xFFFF
	275 Subtract W8, W8, W9
	276 NotImplemented "Instruction CMP not yet implemented."
	277 NotImplemented "Instruction CSET not yet implemented."
	278 NotImplemented "Instruction CMP not yet implemented."
	279 NotImplemented "Instruction CSET not yet implemented."
	280 Or W8, W8, W9
	281 Or W8, W27, W8
	282 Move TEMP, X8
	283 And TEMP, TEMP, 1
	284 Compare TEMP, 1
	285 JumpIfEqual {296}
	286 Move X0, X19
	287 Call RegexParser.RightChar, X0
	288 And W8, W0, 0xFFFF
	289 NotImplemented "Instruction CMP not yet implemented."
	290 NotImplemented "Instruction CSET not yet implemented."
	291 Or W8, W26, W8
	292 Move TEMP, X8
	293 And TEMP, TEMP, 1
	294 Compare TEMP, 1
	295 JumpIfNotEqual {307}
	296 Move TEMP, X21
	297 And TEMP, TEMP, 1
	298 Compare TEMP, 1
	299 JumpIfEqual {332}
	300 Compare X22, 0
	301 JumpIfEqual {423}
	302 Move X0, X22
	303 Move W1, W24
	304 Move W2, W24
	305 Move X3, X31
	306 Call RegexCharClass.AddRange, X0, X1, X2
	307 Move W8, [X19+64]
	308 And W1, W20, 1
	309 And W2, W21, 1
	310 Move X0, X19
	311 Add W8, W8, 1
	312 Move [X19+64], W8
	313 Call RegexParser.ScanCharClass, X0, X1, X2
	314 Move TEMP, X21
	315 And TEMP, TEMP, 1
	316 Compare TEMP, 1
	317 JumpIfEqual {332}
	318 Compare X22, 0
	319 JumpIfEqual {423}
	320 Move [X22+40], X0
	321 Move X8, [X19+56]
	322 Compare X8, 0
	323 JumpIfEqual {423}
	324 Move W8, [X8+16]
	325 Move W9, [X19+64]
	326 Subtract W8, W8, W9
	327 NotImplemented "Instruction CMP not yet implemented."
	328 Move X0, X19
	329 Call RegexParser.RightChar, X0
	330 And W8, W0, 0xFFFF
	331 NotImplemented "Instruction CMP not yet implemented."
	332 Move W25, W31
	333 Move X8, [X19+56]
	334 Move W26, W31
	335 Compare X8, 0
	336 JumpIfNotEqual {66}
	337 Move W8, [X19+64]
	338 Move W25, 1
	339 Move W23, W24
	340 Add W8, W8, 1
	341 Move [X19+64], W8
	342 Move TEMP, X21
	343 And TEMP, TEMP, 1
	344 Compare TEMP, 1
	345 JumpIfNotEqual {379}
	346 Move X0, X19
	347 Call RegexParser.ParseProperty, X0
	348 Move TEMP, X21
	349 And TEMP, TEMP, 1
	350 Compare TEMP, 1
	351 JumpIfEqual {333}
	352 Move TEMP, X25
	353 And TEMP, TEMP, 1
	354 Compare TEMP, 1
	355 JumpIfEqual {441}
	356 Compare X22, 0
	357 JumpIfEqual {423}
	358 Move W8, [X19+128]
	359 And W9, W24, 0xFFFF
	360 NotImplemented "Instruction CMP not yet implemented."
	361 NotImplemented "Instruction CSET not yet implemented."
	362 Move W1, W8
	363 ShiftRight W1, 8
	364 And W1, W1, 255
	365 Move X0, X22
	366 Move X3, X31
	367 Call RegexCharClass.AddSpace, X0, X1, X2
	368 Move TEMP, X21
	369 And TEMP, TEMP, 1
	370 Compare TEMP, 1
	371 JumpIfEqual {333}
	372 Compare X22, 0
	373 JumpIfEqual {423}
	374 Move W1, 45
	375 Move W2, 45
	376 Move X0, X22
	377 Move X3, X31
	378 Call RegexCharClass.AddRange, X0, X1, X2
	379 Move TEMP, X25
	380 And TEMP, TEMP, 1
	381 Compare TEMP, 1
	382 JumpIfEqual {441}
	383 Move X0, X19
	384 Call RegexParser.ParseProperty, X0
	385 Compare X22, 0
	386 JumpIfEqual {423}
	387 Move X4, [X19+56]
	388 And W8, W24, 0xFFFF
	389 NotImplemented "Instruction CMP not yet implemented."
	390 Move X1, X0
	391 NotImplemented "Instruction CSET not yet implemented."
	392 And W3, W20, 1
	393 Move X0, X22
	394 Move X5, X31
	395 Call RegexCharClass.AddCategoryFromName, X0, X1, X2, X3, X4
	396 Move TEMP, X21
	397 And TEMP, TEMP, 1
	398 Compare TEMP, 1
	399 JumpIfEqual {410}
	400 Move TEMP, X20
	401 And TEMP, TEMP, 1
	402 Compare TEMP, 1
	403 JumpIfNotEqual {410}
	404 Compare X22, 0
	405 JumpIfEqual {423}
	406 Move X1, [X19+72]
	407 Move X0, X22
	408 Move X2, X31
	409 Call RegexCharClass.AddLowercase, X0, X1
	410 Move X0, X22
	411 Move X20, [X31+80]
	412 Move X19, [X31+88]
	413 Move X22, [X31+64]
	414 Move X21, [X31+72]
	415 Move X24, [X31+48]
	416 Move X23, [X31+56]
	417 Move X26, [X31+32]
	418 Move X25, [X31+40]
	419 Move X30, [X31+16]
	420 Move X27, [X31+24]
	421 Add X31, X31, 96
	422 Return X0
	423 Call 0x1C17F20
	424 Move X0, 0xAFA000
	425 Move X0, [X0+1104]
	426 Call 0x1C17D08
	427 Move X1, X0
	428 Move X0, X19
	429 Call RegexParser.MakeException, X0, X1
	430 Move X19, X0
	431 Move X0, 0xAFA000
	432 Move X0, [X0+1112]
	433 Call 0x1C17D08
	434 Move X1, X0
	435 Move X0, X19
	436 Call 0x1C17DEC
	437 Move X0, 0xAFA000
	438 Move X0, [X0+1120]
	439 Move X0, 0xAFA000
	440 Move X0, [X0+1128]
	441 Move X0, 0xAB3000
	442 Move X0, [X0+368]
	443 Call 0x1C17D08
	444 Call 0x19913D0
	445 Add X0, X31, 12
	446 Move X1, X31
	447 Call Char.ToString, X0
	448 Move X20, X0
	449 Move X0, 0xAFA000
	450 Move X0, [X0+1136]
	451 Call 0x1C17D08
	452 Move X1, X20
	453 Move X2, X31
	454 Call SR.Format, X0, X1

Method: System.Text.RegularExpressions.RegexNode ScanGroupOpen()

Disassembly:
	0x03643908 TBZ X20, 0x0, 0x3643928
	0x0364390C MOV X19, X31
	0x03643910 B 0x3643B9C
	0x03643914 AND W1, W20, 0x1
	0x03643918 MOV X0, X19
	0x0364391C LDP X20, X19, [X31 + 0x10]
	0x03643920 LDP X30, X21, [X31], #0x20
	0x03643924 B 0x3644A0C
	0x03643928 MOV X0, X19
	0x0364392C MOV W1, W21
	0x03643930 BL 0x364497C
	0x03643934 ADRP X8, 0xAF9000
	0x03643938 LDR W21, [X19 + 0x80]
	0x0364393C LDR X8, [X8 + 0x3A8]
	0x03643940 MOV W20, W0
	0x03643944 LDR X8, [X8]
	0x03643948 MOV X0, X8
	0x0364394C BL 0x1C16F10
	0x03643950 MOV X1, X31
	0x03643954 MOV X19, X0
	0x03643958 BL 0x33BDD8C
	0x0364395C STR W20, [X19 + 0x10]
	0x03643960 STR W21, [X19 + 0x34]
	0x03643964 B 0x3643B9C
	0x03643968 LDR W8, [X19 + 0x40]
	0x0364396C ADD W8, W8, 0x1
	0x03643970 STR W8, [X19 + 0x40]
	0x03643974 TBNZ X20, 0x0, 0x364390C
	0x03643978 LDR W20, [X19 + 0x80]
	0x0364397C TBNZ X20, 0x8, 0x3643AD8
	0x03643980 ADRP X19, 0xAF8000
	0x03643984 LDR X19, [X19 + 0x8E0]
	0x03643988 LDR X0, [X19]
	0x0364398C LDR W8, [X0 + 0xE0]
	0x03643990 CBNZ W8, 0x364399C
	0x03643994 BL 0x1C16DFC
	0x03643998 LDR X0, [X19]
	0x0364399C LDR X8, [X0 + 0xB8]
	0x036439A0 ADRP X9, 0xAF9000
	0x036439A4 LDR X9, [X9 + 0x3A8]
	0x036439A8 LDR X21, [X8 + 0x48]
	0x036439AC B 0x3643ACC
	0x036439B0 LDR W8, [X19 + 0x40]
	0x036439B4 ADD W8, W8, 0x1
	0x036439B8 STR W8, [X19 + 0x40]
	0x036439BC TBNZ X20, 0x0, 0x364390C
	0x036439C0 LDR W20, [X19 + 0x80]
	0x036439C4 TBNZ X20, 0x8, 0x3643AF4
	0x036439C8 ADRP X19, 0xAF8000
	0x036439CC LDR X19, [X19 + 0x8E0]
	0x036439D0 LDR X0, [X19]
	0x036439D4 LDR W8, [X0 + 0xE0]
	0x036439D8 CBNZ W8, 0x36439E4
	0x036439DC BL 0x1C16DFC
	0x036439E0 LDR X0, [X19]
	0x036439E4 LDR X8, [X0 + 0xB8]
	0x036439E8 ADRP X9, 0xAF9000
	0x036439EC LDR X9, [X9 + 0x3A8]
	0x036439F0 LDR X21, [X8 + 0x30]
	0x036439F4 B 0x3643ACC
	0x036439F8 LDR W8, [X19 + 0x40]
	0x036439FC ADD W8, W8, 0x1
	0x03643A00 STR W8, [X19 + 0x40]
	0x03643A04 TBNZ X20, 0x0, 0x364390C
	0x03643A08 LDR W20, [X19 + 0x80]
	0x03643A0C TBNZ X20, 0x8, 0x3643B10
	0x03643A10 ADRP X19, 0xAF8000
	0x03643A14 LDR X19, [X19 + 0x8E0]
	0x03643A18 LDR X0, [X19]
	0x03643A1C LDR W8, [X0 + 0xE0]
	0x03643A20 CBNZ W8, 0x3643A2C
	0x03643A24 BL 0x1C16DFC
	0x03643A28 LDR X0, [X19]
	0x03643A2C LDR X8, [X0 + 0xB8]
	0x03643A30 ADRP X9, 0xAF9000
	0x03643A34 LDR X9, [X9 + 0x3A8]
	0x03643A38 LDR X21, [X8 + 0x40]
	0x03643A3C B 0x3643ACC
	0x03643A40 LDR W8, [X19 + 0x40]
	0x03643A44 ADD W8, W8, 0x1
	0x03643A48 STR W8, [X19 + 0x40]
	0x03643A4C TBNZ X20, 0x0, 0x364390C
	0x03643A50 LDR W20, [X19 + 0x80]
	0x03643A54 TBNZ X20, 0x8, 0x3643B2C
	0x03643A58 ADRP X19, 0xAF8000
	0x03643A5C LDR X19, [X19 + 0x8E0]
	0x03643A60 LDR X0, [X19]
	0x03643A64 LDR W8, [X0 + 0xE0]
	0x03643A68 CBNZ W8, 0x3643A74
	0x03643A6C BL 0x1C16DFC
	0x03643A70 LDR X0, [X19]
	0x03643A74 LDR X8, [X0 + 0xB8]
	0x03643A78 ADRP X9, 0xAF9000
	0x03643A7C LDR X9, [X9 + 0x3A8]
	0x03643A80 LDR X21, [X8 + 0x28]
	0x03643A84 B 0x3643ACC
	0x03643A88 LDR W8, [X19 + 0x40]
	0x03643A8C ADD W8, W8, 0x1
	0x03643A90 STR W8, [X19 + 0x40]
	0x03643A94 TBNZ X20, 0x0, 0x364390C
	0x03643A98 LDR W20, [X19 + 0x80]
	0x03643A9C TBNZ X20, 0x8, 0x3643B48
	0x03643AA0 ADRP X19, 0xAF8000
	0x03643AA4 LDR X19, [X19 + 0x8E0]
	0x03643AA8 LDR X0, [X19]
	0x03643AAC LDR W8, [X0 + 0xE0]
	0x03643AB0 CBNZ W8, 0x3643ABC
	0x03643AB4 BL 0x1C16DFC
	0x03643AB8 LDR X0, [X19]
	0x03643ABC LDR X8, [X0 + 0xB8]
	0x03643AC0 ADRP X9, 0xAF9000
	0x03643AC4 LDR X9, [X9 + 0x3A8]
	0x03643AC8 LDR X21, [X8 + 0x38]
	0x03643ACC LDR X0, [X9]
	0x03643AD0 BL 0x1C16F10
	0x03643AD4 B 0x3643B80
	0x03643AD8 ADRP X8, 0xAF9000
	0x03643ADC LDR X8, [X8 + 0x3A8]
	0x03643AE0 LDR X0, [X8]
	0x03643AE4 BL 0x1C16F10
	0x03643AE8 ADRP X8, 0xAF9000
	0x03643AEC LDR X8, [X8 + 0x518]
	0x03643AF0 B 0x3643B7C
	0x03643AF4 ADRP X8, 0xAF9000
	0x03643AF8 LDR X8, [X8 + 0x3A8]
	0x03643AFC LDR X0, [X8]
	0x03643B00 BL 0x1C16F10
	0x03643B04 ADRP X8, 0xAF9000
	0x03643B08 LDR X8, [X8 + 0x520]
	0x03643B0C B 0x3643B7C
	0x03643B10 ADRP X8, 0xAF9000
	0x03643B14 LDR X8, [X8 + 0x3A8]
	0x03643B18 LDR X0, [X8]
	0x03643B1C BL 0x1C16F10
	0x03643B20 ADRP X8, 0xAF9000
	0x03643B24 LDR X8, [X8 + 0x508]
	0x03643B28 B 0x3643B7C
	0x03643B2C ADRP X8, 0xAF9000
	0x03643B30 LDR X8, [X8 + 0x3A8]
	0x03643B34 LDR X0, [X8]
	0x03643B38 BL 0x1C16F10
	0x03643B3C ADRP X8, 0xAF9000
	0x03643B40 LDR X8, [X8 + 0x510]
	0x03643B44 B 0x3643B7C
	0x03643B48 ADRP X8, 0xAF9000
	0x03643B4C LDR X8, [X8 + 0x3A8]
	0x03643B50 LDR X0, [X8]
	0x03643B54 BL 0x1C16F10
	0x03643B58 ADRP X8, 0xAF8000
	0x03643B5C LDR X8, [X8 + 0x960]
	0x03643B60 B 0x3643B7C
	0x03643B64 ADRP X8, 0xAF9000
	0x03643B68 LDR X8, [X8 + 0x3A8]
	0x03643B6C LDR X0, [X8]
	0x03643B70 BL 0x1C16F10
	0x03643B74 ADRP X8, 0xAF9000
	0x03643B78 LDR X8, [X8 + 0x500]
	0x03643B7C LDR X21, [X8]
	0x03643B80 MOV X1, X31
	0x03643B84 MOV X19, X0
	0x03643B88 BL 0x33BDD8C
	0x03643B8C MOVZ W8, 0xB
	0x03643B90 STR W20, [X19 + 0x34]
	0x03643B94 STR W8, [X19 + 0x10]
	0x03643B98 STR X21, [X19 + 0x20]
	0x03643B9C MOV X0, X19
	0x03643BA0 LDP X20, X19, [X31 + 0x10]
	0x03643BA4 LDP X30, X21, [X31], #0x20
	0x03643BA8 RET
	0x03643BAC ADRP X0, 0xAF9000
	0x03643BB0 LDR X0, [X0 + 0x528]
	0x03643BB4 BL 0x1C16D08
	0x03643BB8 MOV X1, X0
	0x03643BBC MOV X0, X19
	0x03643BC0 BL 0x3643360
	0x03643BC4 MOV X19, X0
	0x03643BC8 ADRP X0, 0xAF9000
	0x03643BCC LDR X0, [X0 + 0x530]
	0x03643BD0 BL 0x1C16D08
	0x03643BD4 MOV X1, X0
	0x03643BD8 MOV X0, X19
	0x03643BDC BL 0x1C16DEC
	0x03643BE0 BL 0x1C16F20
	0x03643BE4 LDRB W8, [X0 + 0x80]
	0x03643BE8 UBFM W0, W8, 0x1, 0x1
	0x03643BEC RET
	0x03643BF0 STR X30, [X31 - 0x30]!
	0x03643BF4 STP X22, X21, [X31 + 0x10]
	0x03643BF8 STP X20, X19, [X31 + 0x20]
	0x03643BFC ADRP X22, 0xD9D000
	0x03643C00 ADRP X21, 0xAF9000
	0x03643C04 LDRB W8, [X22 + 0x59F]
	0x03643C08 LDR X21, [X21 + 0x3A8]
	0x03643C0C MOV W20, W1
	0x03643C10 MOV X19, X0
	0x03643C14 TBNZ X8, 0x0, 0x3643C2C
	0x03643C18 ADRP X0, 0xAF9000
	0x03643C1C LDR X0, [X0 + 0x3A8]
	0x03643C20 BL 0x1C16CF4
	0x03643C24 MOVZ W8, 0x1
	0x03643C28 STRB W8, [X22 + 0x59F]
	0x03643C2C LDR X0, [X21]
	0x03643C30 LDR W22, [X19 + 0x80]
	0x03643C34 BL 0x1C16F10
	0x03643C38 MOV X1, X31
	0x03643C3C MOV X21, X0
	0x03643C40 BL 0x33BDD8C
	0x03643C44 STR W20, [X21 + 0x10]
	0x03643C48 STR W22, [X21 + 0x34]
	0x03643C4C STR X21, [X19 + 0x30]
	0x03643C50 LDP X20, X19, [X31 + 0x20]
	0x03643C54 LDP X22, X21, [X31 + 0x10]
	0x03643C58 LDR X30, [X31], #0x30
	0x03643C5C RET
	0x03643C60 LDRB W8, [X0 + 0x80]
	0x03643C64 UBFM W0, W8, 0x4, 0x4
	0x03643C68 RET
	0x03643C6C STR X30, [X31 - 0x30]!
	0x03643C70 STP X22, X21, [X31 + 0x10]
	0x03643C74 STP X20, X19, [X31 + 0x20]
	0x03643C78 ADRP X21, 0xD9D000
	0x03643C7C LDRB W8, [X21 + 0x59D]
	0x03643C80 MOV W20, W1
	0x03643C84 MOV X19, X0
	0x03643C88 TBNZ X8, 0x0, 0x3643CA0
	0x03643C8C ADRP X0, 0xAF9000
	0x03643C90 LDR X0, [X0 + 0x3A8]
	0x03643C94 BL 0x1C16CF4
	0x03643C98 MOVZ W8, 0x1
	0x03643C9C STRB W8, [X21 + 0x59D]
	0x03643CA0 LDR W22, [X19 + 0x80]
	0x03643CA4 TBZ X22, 0x0, 0x3643CD8
	0x03643CA8 LDR X0, [X19 + 0x48]
	0x03643CAC CBZ X0, 0x3643D18
	0x03643CB0 LDR X8, [X0]
	0x03643CB4 LDP X9, X1, [X8 + 0x1D8]
	0x03643CB8 BLR X9
	0x03643CBC CBZ X0, 0x3643D18
	0x03643CC0 LDR X8, [X0]
	0x03643CC4 MOV W1, W20
	0x03643CC8 LDP X9, X2, [X8 + 0x1A8]
	0x03643CCC BLR X9
	0x03643CD0 LDR W22, [X19 + 0x80]
	0x03643CD4 MOV W20, W0
	0x03643CD8 ADRP X8, 0xAF9000
	0x03643CDC LDR X8, [X8 + 0x3A8]
	0x03643CE0 LDR X0, [X8]
	0x03643CE4 BL 0x1C16F10
	0x03643CE8 MOV X1, X31
	0x03643CEC MOV X21, X0
	0x03643CF0 BL 0x33BDD8C
	0x03643CF4 MOVZ W8, 0xA
	0x03643CF8 STR W22, [X21 + 0x34]
	0x03643CFC STRH W20, [X21 + 0x28]
	0x03643D00 STR W8, [X21 + 0x10]
	0x03643D04 STR X21, [X19 + 0x30]
	0x03643D08 LDP X20, X19, [X31 + 0x20]
	0x03643D0C LDP X22, X21, [X31 + 0x10]
	0x03643D10 LDR X30, [X31], #0x30
	0x03643D14 RET
	0x03643D18 BL 0x1C16F20
	0x03643D1C LDR W8, [X0 + 0x40]
	0x03643D20 SUB W8, W8, 0x1
	0x03643D24 STR W8, [X0 + 0x40]
	0x03643D28 RET
	0x03643D2C STP X30, X19, [X31 - 0x10]!
	0x03643D30 MOV X19, X0
	0x03643D34 LDR X0, [X0 + 0x28]
	0x03643D38 CBZ X0, 0x3643D50
	0x03643D3C LDR X1, [X19 + 0x30]
	0x03643D40 BL 0x3640154
	0x03643D44 STR X31, [X19 + 0x30]
	0x03643D48 LDP X30, X19, [X31], #0x10
	0x03643D4C RET
	0x03643D50 BL 0x1C16F20
	0x03643D54 STR X30, [X31 - 0x10]!
	0x03643D58 LDR W1, [X0 + 0x40]
	0x03643D5C MOV X8, X0
	0x03643D60 LDR X0, [X0 + 0x38]
	0x03643D64 ADD W9, W1, 0x1
	0x03643D68 STR W9, [X8 + 0x40]
	0x03643D6C CBZ X0, 0x3643D7C
	0x03643D70 MOV X2, X31
	0x03643D74 LDR X30, [X31], #0x10
	0x03643D78 B 0x3222A1C
	0x03643D7C BL 0x1C16F20
	0x03643D80 STR X30, [X31 - 0x30]!
	0x03643D84 STP X22, X21, [X31 + 0x10]
	0x03643D88 STP X20, X19, [X31 + 0x20]
	0x03643D8C LDR X9, [X0 + 0x38]
	0x03643D90 CBZ X9, 0x3643E00
	0x03643D94 LDR W8, [X0 + 0x40]
	0x03643D98 MOVZ W21, 0xCCCC
	0x03643D9C MOV X19, X0
	0x03643DA0 MOV W20, W31
	0x03643DA4 MOVK W21, 0xCCC0000
	0x03643DA8 MOVZ W22, 0xA
	0x03643DAC LDR W9, [X9 + 0x10]
	0x03643DB0 SUB W8, W9, W8
	0x03643DB4 CMP W8, 0x1
	0x03643DB8 B.LT 0x3643E04
	0x03643DBC MOV X0, X19
	0x03643DC0 BL 0x3641BB0
	0x03643DC4 SUB W8, W0, 0x30
	0x03643DC8 AND W10, W8, 0xFFFF
	0x03643DCC CMP W10, 0xA
	0x03643DD0 B.CS 0x3643E04
	0x03643DD4 LDR W8, [X19 + 0x40]
	0x03643DD8 CMP W20, W21
	0x03643DDC ADD W8, W8, 0x1
	0x03643DE0 STR W8, [X19 + 0x40]
	0x03643DE4 B.GT 0x3643E18
	0x03643DE8 B.NE 0x3643DF4
	0x03643DEC CMP W10, 0x8
	0x03643DF0 B.CS 0x3643E18
	0x03643DF4 LDR X9, [X19 + 0x38]
	0x03643DF8 MADD W20, W20, W22, W10
	0x03643DFC CBNZ X9, 0x3643DAC
	0x03643E00 BL 0x1C16F20
	0x03643E04 MOV W0, W20
	0x03643E08 LDP X20, X19, [X31 + 0x20]
	0x03643E0C LDP X22, X21, [X31 + 0x10]
	0x03643E10 LDR X30, [X31], #0x30
	0x03643E14 RET
	0x03643E18 ADRP X0, 0xAF9000
	0x03643E1C LDR X0, [X0 + 0x538]
	0x03643E20 BL 0x1C16D08
	0x03643E24 MOV X1, X0
	0x03643E28 MOV X0, X19
	0x03643E2C BL 0x3643360
	0x03643E30 MOV X19, X0
	0x03643E34 ADRP X0, 0xAF9000
	0x03643E38 LDR X0, [X0 + 0x540]
	0x03643E3C BL 0x1C16D08
	0x03643E40 MOV X1, X0
	0x03643E44 MOV X0, X19
	0x03643E48 BL 0x1C16DEC
	0x03643E4C STR X30, [X31 - 0x20]!
	0x03643E50 STP X20, X19, [X31 + 0x10]
	0x03643E54 MOV X19, X0
	0x03643E58 LDR X0, [X0 + 0x30]
	0x03643E5C CBZ X0, 0x3643E8C
	0x03643E60 LDR X20, [X19 + 0x28]
	0x03643E64 AND W1, W1, 0x1
	0x03643E68 BL 0x364003C
	0x03643E6C CBZ X20, 0x3643E8C
	0x03643E70 MOV X1, X0
	0x03643E74 MOV X0, X20
	0x03643E78 BL 0x3640154
	0x03643E7C STR X31, [X19 + 0x30]
	0x03643E80 LDP X20, X19, [X31 + 0x10]
	0x03643E84 LDR X30, [X31], #0x20
	0x03643E88 RET
	0x03643E8C BL 0x1C16F20
	0x03643E90 STP X30, X25, [X31 - 0x40]!
	0x03643E94 STP X24, X23, [X31 + 0x10]
	0x03643E98 STP X22, X21, [X31 + 0x20]
	0x03643E9C STP X20, X19, [X31 + 0x30]
	0x03643EA0 ADRP X20, 0xD9D000
	0x03643EA4 LDRB W8, [X20 + 0x588]
	0x03643EA8 MOV X19, X0
	0x03643EAC TBNZ X8, 0x0, 0x3643ED0
	0x03643EB0 ADRP X0, 0xAF8000
	0x03643EB4 LDR X0, [X0 + 0x8E0]
	0x03643EB8 BL 0x1C16CF4
	0x03643EBC ADRP X0, 0xAF9000
	0x03643EC0 LDR X0, [X0 + 0x3A8]
	0x03643EC4 BL 0x1C16CF4
	0x03643EC8 MOVZ W8, 0x1
	0x03643ECC STRB W8, [X20 + 0x588]
	0x03643ED0 LDR X8, [X19 + 0x38]
	0x03643ED4 CBZ X8, 0x3644250
	0x03643ED8 LDR W8, [X8 + 0x10]
	0x03643EDC LDR W9, [X19 + 0x40]
	0x03643EE0 CMP W8, W9
	0x03643EE4 B.EQ 0x3644204
	0x03643EE8 MOV X0, X19
	0x03643EEC BL 0x3641BB0
	0x03643EF0 LDR W21, [X19 + 0x40]
	0x03643EF4 AND W8, W0, 0xFFFF
	0x03643EF8 CMP W8, 0x7B
	0x03643EFC B.NE 0x3643FE8
	0x03643F00 LDR X8, [X19 + 0x38]
	0x03643F04 CBZ X8, 0x3644250
	0x03643F08 LDR W8, [X8 + 0x10]
	0x03643F0C SUB W8, W8, W21
	0x03643F10 CMP W8, 0x2
	0x03643F14 B.LT 0x3644200
	0x03643F18 ADD W8, W21, 0x1
	0x03643F1C MOV X0, X19
	0x03643F20 STR W8, [X19 + 0x40]
	0x03643F24 BL 0x3641BB0
	0x03643F28 SUB W8, W0, 0x30
	0x03643F2C AND W8, W8, 0xFFFF
	0x03643F30 CMP W8, 0x9
	0x03643F34 B.LS 0x3644054
	0x03643F38 ADRP X8, 0xAF8000
	0x03643F3C LDR X8, [X8 + 0x8E0]
	0x03643F40 MOV W20, W0
	0x03643F44 LDR X0, [X8]
	0x03643F48 LDR W8, [X0 + 0xE0]
	0x03643F4C CBNZ W8, 0x3643F54
	0x03643F50 BL 0x1C16DFC
	0x03643F54 MOV W0, W20
	0x03643F58 MOV X1, X31
	0x03643F5C BL 0x36357F0
	0x03643F60 TBZ X0, 0x0, 0x3644200
	0x03643F64 MOV X0, X19
	0x03643F68 BL 0x3644594
	0x03643F6C LDR X8, [X19 + 0x38]
	0x03643F70 CBZ X8, 0x3644250
	0x03643F74 LDR W8, [X8 + 0x10]
	0x03643F78 LDR W9, [X19 + 0x40]
	0x03643F7C SUB W8, W8, W9
	0x03643F80 CMP W8, 0x1
	0x03643F84 B.LT 0x3644200
	0x03643F88 MOV X20, X0
	0x03643F8C MOV X0, X19
	0x03643F90 BL 0x3643D54
	0x03643F94 AND W8, W0, 0xFFFF
	0x03643F98 CMP W8, 0x7D
	0x03643F9C B.NE 0x3644200
	0x03643FA0 LDR X0, [X19 + 0x68]
	0x03643FA4 CBZ X0, 0x3644200
	0x03643FA8 LDR X8, [X0]
	0x03643FAC MOV X1, X20
	0x03643FB0 LDR X9, [X8 + 0x2B8]
	0x03643FB4 LDR X2, [X8 + 0x2C0]
	0x03643FB8 BLR X9
	0x03643FBC TBZ X0, 0x0, 0x3644200
	0x03643FC0 LDR W21, [X19 + 0x80]
	0x03643FC4 MOV X0, X19
	0x03643FC8 MOV X1, X20
	0x03643FCC BL 0x364474C
	0x03643FD0 ADRP X8, 0xAF9000
	0x03643FD4 LDR X8, [X8 + 0x3A8]
	0x03643FD8 MOV W20, W0
	0x03643FDC LDR X8, [X8]
	0x03643FE0 MOV X0, X8
	0x03643FE4 B 0x3644114
	0x03643FE8 SUB W9, W0, 0x30
	0x03643FEC AND W9, W9, 0xFFFF
	0x03643FF0 CMP W9, 0x9
	0x03643FF4 B.LS 0x364403C
	0x03643FF8 AND W8, W0, 0xFFFF
	0x03643FFC CMP W8, 0x2B
	0x03644000 B.HI 0x36440A8
	0x03644004 SUB W8, W8, 0x24
	0x03644008 CMP W8, 0x7
	0x0364400C B.HI 0x3644200
	0x03644010 ADRP X9, 0xFFFFFFFFFD553000
	0x03644014 ADD X9, X9, 0x4CE
	0x03644018 ADR X10, 0x14
	0x0364401C LDRB W11, [X9, X8, LSL]
	0x03644020 ADD X10, X10, X11, 0x2, LSL
	0x03644024 MOV W20, W31
	0x03644028 BR X10
	0x0364402C LDR W20, [X19 + 0x80]
	0x03644030 ADD W8, W21, 0x1
	0x03644034 STR W8, [X19 + 0x40]
	0x03644038 B 0x3644208
	0x0364403C LDRB W9, [X19 + 0x81]
	0x03644040 TBNZ X9, 0x0, 0x36440C0
	0x03644044 MOV X0, X19
	0x03644048 BL 0x3643D80
	0x0364404C MOV W20, W0
	0x03644050 B 0x3644090
	0x03644054 MOV X0, X19
	0x03644058 BL 0x3643D80
	0x0364405C LDR X8, [X19 + 0x38]
	0x03644060 CBZ X8, 0x3644250
	0x03644064 LDR W8, [X8 + 0x10]
	0x03644068 LDR W9, [X19 + 0x40]
	0x0364406C SUB W8, W8, W9
	0x03644070 CMP W8, 0x1
	0x03644074 B.LT 0x3644200
	0x03644078 MOV W20, W0
	0x0364407C MOV X0, X19
	0x03644080 BL 0x3643D54
	0x03644084 AND W8, W0, 0xFFFF
	0x03644088 CMP W8, 0x7D
	0x0364408C B.NE 0x3644200
	0x03644090 MOV X0, X19
	0x03644094 MOV W1, W20
	0x03644098 BL 0x3644694
	0x0364409C TBZ X0, 0x0, 0x3644200
	0x036440A0 LDR W21, [X19 + 0x80]
	0x036440A4 B 0x3644108
	0x036440A8 CMP W8, 0x5F
	0x036440AC B.EQ 0x36440E8
	0x036440B0 CMP W8, 0x60
	0x036440B4 B.NE 0x3644200
	0x036440B8 MOVN W20, 0x0
	0x036440BC B 0x36440FC
	0x036440C0 SUB W20, W8, 0x30
	0x036440C4 ADD W8, W21, 0x1
	0x036440C8 MOV X0, X19
	0x036440CC MOV W1, W20
	0x036440D0 STR W8, [X19 + 0x40]
	0x036440D4 BL 0x3644694
	0x036440D8 TBNZ X0, 0x0, 0x36441AC
	0x036440DC MOVN W22, 0x0
	0x036440E0 MOV W23, W21
	0x036440E4 B 0x36441B4
	0x036440E8 MOVN W20, 0x3
	0x036440EC B 0x36440FC
	0x036440F0 MOVN W20, 0x1
	0x036440F4 B 0x36440FC
	0x036440F8 MOVN W20, 0x2
	0x036440FC ADD W8, W21, 0x1
	0x03644100 LDR W21, [X19 + 0x80]
	0x03644104 STR W8, [X19 + 0x40]
	0x03644108 ADRP X8, 0xAF8000
	0x0364410C LDR X8, [X8 + 0x3A8]
	0x03644110 LDR X0, [X8]
	0x03644114 BL 0x1C16F10
	0x03644118 MOV X1, X31
	0x0364411C MOV X19, X0
	0x03644120 BL 0x33BDD8C
	0x03644124 MOVZ W8, 0xD
	0x03644128 STR W21, [X19 + 0x34]
	0x0364412C STR W8, [X19 + 0x10]
	0x03644130 STR W20, [X19 + 0x2C]
	0x03644134 B 0x3644238
	0x03644138 LDR X8, [X19 + 0x38]
	0x0364413C CBZ X8, 0x3644250
	0x03644140 LDR W8, [X8 + 0x10]
	0x03644144 LDR W9, [X19 + 0x40]
	0x03644148 SUB W8, W8, W9
	0x0364414C CMP W8, 0x1
	0x03644150 B.LT 0x36441C4
	0x03644154 MOV X0, X19
	0x03644158 BL 0x3641BB0
	0x0364415C SUB W8, W0, 0x30
	0x03644160 AND W8, W8, 0xFFFF
	0x03644164 CMP W8, 0xA
	0x03644168 B.CS 0x36441C4
	0x0364416C CMP W20, W24
	0x03644170 B.GT 0x3644254
	0x03644174 B.NE 0x3644184
	0x03644178 AND W8, W0, 0xFFFF
	0x0364417C CMP W8, 0x38
	0x03644180 B.CS 0x3644254
	0x03644184 LDR W8, [X19 + 0x40]
	0x03644188 AND W9, W0, 0xFFFF
	0x0364418C MADD W9, W20, W25, W9
	0x03644190 SUB W20, W9, 0x30
	0x03644194 ADD W8, W8, 0x1
	0x03644198 MOV X0, X19
	0x0364419C MOV W1, W20
	0x036441A0 STR W8, [X19 + 0x40]
	0x036441A4 BL 0x3644694
	0x036441A8 TBZ X0, 0x0, 0x3644138
	0x036441AC LDR W23, [X19 + 0x40]
	0x036441B0 MOV W22, W20
	0x036441B4 MOVZ W24, 0xCCCC
	0x036441B8 MOVK W24, 0xCCC0000
	0x036441BC MOVZ W25, 0xA
	0x036441C0 B 0x3644138
	0x036441C4 STR W23, [X19 + 0x40]
	0x036441C8 TBNZ X22, 0x1F, 0x3644200
	0x036441CC ADRP X8, 0xAF8000
	0x036441D0 LDR W20, [X19 + 0x80]
	0x036441D4 LDR X8, [X8 + 0x3A8]
	0x036441D8 LDR X0, [X8]
	0x036441DC BL 0x1C16F10
	0x036441E0 MOV X1, X31
	0x036441E4 MOV X19, X0
	0x036441E8 BL 0x33BDD8C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xD9E000
	009 Move W8, [X20+1412]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xAF9000
	016 Move X0, [X0+2272]
	017 Call 0x1C17CF4
	018 Move X0, 0xAFA000
	019 Move X0, [X0+936]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1412], W8
	023 Move [X31+12], W31
	024 Move X8, [X19+56]
	025 Compare X8, 0
	026 JumpIfEqual {502}
	027 Move W8, [X8+16]
	028 Move W9, [X19+64]
	029 Move X22, 0xAFA000
	030 Move X22, [X22+936]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X19
	033 Call RegexParser.RightChar, X0
	034 And W8, W0, 0xFFFF
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X0, X19
	037 Call RegexParser.RightChar, X0
	038 And W8, W0, 0xFFFF
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, [X19+56]
	041 Compare X8, 0
	042 JumpIfEqual {502}
	043 Move W8, [X8+16]
	044 Move W9, [X19+64]
	045 Subtract W8, W8, W9
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W1, 1
	048 Move X0, X19
	049 Call RegexParser.RightChar, X0, X1
	050 And W8, W0, 0xFFFF
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move W20, [X19+128]
	053 Move TEMP, X20
	054 And TEMP, TEMP, 4
	055 Compare TEMP, 4
	056 JumpIfEqual {60}
	057 Move W8, [X19+144]
	058 Compare W8, 0
	059 JumpIfEqual {84}
	060 Move [X19+144], W31
	061 Move X0, [X22]
	062 Call 0x1C17F10
	063 Move X1, X31
	064 Move X19, X0
	065 Call Object..ctor, X0
	066 Move W8, 29
	067 Move [X19+16], W8
	068 Move W8, [X19+64]
	069 Move X9, [X19+56]
	070 Add W8, W8, 1
	071 Move [X19+64], W8
	072 Compare X9, 0
	073 JumpIfEqual {502}
	074 Move W9, [X9+16]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, X19
	077 Call RegexParser.RightCharMoveRight, X0
	078 And W8, W0, 0xFFFF
	079 Move W20, W0
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W23, 39
	084 Move W21, [X19+80]
	085 Add W8, W21, 1
	086 Move [X19+80], W8
	087 Move X0, [X22]
	088 Call 0x1C17F10
	089 Move X1, X31
	090 Move X19, X0
	091 Call Object..ctor, X0
	092 Move W8, 28
	093 Move TEMP, 0
	094 Not TEMP
	095 Move W9, TEMP
	096 Move [X19+16], W8
	097 Move [X19+44], W21
	098 Move [X19+48], W9
	099 Move [X19+52], W20
	100 Subtract W9, W8, 58
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X8, -44740608
	103 Add X8, X8, 1225
	104 NotImplemented "Instruction ADR not yet implemented."
	105 Move W11, [X8]
	106 Add X10, X10, X11
	107 Move W23, 62
	108 Move W21, 32
	109 CallNoReturn X10
	110 Move X8, [X19+56]
	111 Compare X8, 0
	112 JumpIfEqual {502}
	113 Move W8, [X8+16]
	114 Move W9, [X19+64]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, X19
	117 Call RegexParser.RightCharMoveRight, X0
	118 And W8, W0, 0xFFFF
	119 NotImplemented "Instruction CMP not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 And W8, W20, 0xFFFF
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W8, [X19+128]
	124 Or W8, W8, 64
	125 Move W8, [X19+128]
	126 And W8, W8, 0xFFFFFFBF
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X8, [X19+56]
	129 Compare X8, 0
	130 JumpIfEqual {502}
	131 Move W21, [X19+64]
	132 Move W8, [X8+16]
	133 Subtract W8, W8, W21
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X0, X19
	136 Call RegexParser.RightChar, X0
	137 Subtract W8, W0, 48
	138 And W8, W8, 0xFFFF
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X8, 0xAF9000
	141 Move X8, [X8+2272]
	142 Move W20, W0
	143 Move X0, [X8]
	144 Move W8, [X0+224]
	145 Compare W8, 0
	146 JumpIfNotEqual {148}
	147 Call 0x1C17DFC
	148 Move W0, W20
	149 Move X1, X31
	150 Call RegexCharClass.IsWordChar, X0
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfNotEqual {280}
	155 Move X0, X19
	156 Call RegexParser.ScanCapname, X0
	157 Move X8, [X19+104]
	158 Compare X8, 0
	159 JumpIfEqual {280}
	160 Move X9, [X8]
	161 Move X20, X0
	162 Move X0, X8
	163 Move X1, X20
	164 Move X10, [X9+696]
	165 Move X2, [X9+704]
	166 NotImplemented "Instruction BLR not yet implemented."
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfNotEqual {280}
	171 Move X8, [X19+56]
	172 Compare X8, 0
	173 JumpIfEqual {502}
	174 Move W8, [X8+16]
	175 Move W9, [X19+64]
	176 Subtract W8, W8, W9
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X0, X19
	179 Call RegexParser.RightCharMoveRight, X0
	180 And W8, W0, 0xFFFF
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move W21, [X19+128]
	183 Move X0, X19
	184 Move X1, X20
	185 Call RegexParser.CaptureSlotFromName, X0, X1
	186 Move X8, [X22]
	187 Move W20, W0
	188 Move X0, X8
	189 Move W9, [X19+64]
	190 Move X8, [X19+24]
	191 Subtract W9, W9, 1
	192 Move [X19+64], W9
	193 Compare X8, 0
	194 JumpIfEqual {502}
	195 Move W8, [X8+16]
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X0, X19
	198 Call RegexParser.ScanOptions, X0
	199 Move X8, [X19+56]
	200 Compare X8, 0
	201 JumpIfEqual {502}
	202 Move W8, [X8+16]
	203 Move W9, [X19+64]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X0, X19
	206 Call RegexParser.RightCharMoveRight, X0
	207 And W8, W0, 0xFFFF
	208 NotImplemented "Instruction CMP not yet implemented."
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Move W21, 29
	211 Move X19, X31
	212 Move W8, [X19+128]
	213 And W8, W8, 0xFFFFFFBF
	214 Move [X19+128], W8
	215 Move W21, 30
	216 And W8, W20, 0xFFFF
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move W8, [X19+128]
	219 Or W8, W8, 64
	220 Move [X19+128], W8
	221 Move W21, 31
	222 Move X0, [X22]
	223 Move W20, [X19+128]
	224 Call 0x1C17F10
	225 Move X1, X31
	226 Move X19, X0
	227 Call Object..ctor, X0
	228 Move [X19+16], W21
	229 Move [X19+52], W20
	230 Move X0, X19
	231 Move X20, [X31+48]
	232 Move X19, [X31+56]
	233 Move X22, [X31+32]
	234 Move X21, [X31+40]
	235 Move X24, [X31+16]
	236 Move X23, [X31+24]
	237 Move X30, [X31+64]
	238 Return X0
	239 Move W8, [X19+64]
	240 Subtract W9, W0, 48
	241 And W9, W9, 0xFFFF
	242 Move W21, W0
	243 Subtract W8, W8, 1
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Move [X19+64], W8
	246 Move X8, 0xAF9000
	247 Move X8, [X8+2272]
	248 Move X0, [X8]
	249 Move W8, [X0+224]
	250 Compare W8, 0
	251 JumpIfNotEqual {253}
	252 Call 0x1C17DFC
	253 Move W0, W21
	254 Move X1, X31
	255 Call RegexCharClass.IsWordChar, X0
	256 Move TEMP, X0
	257 And TEMP, TEMP, 1
	258 Compare TEMP, 1
	259 JumpIfNotEqual {343}
	260 Move X0, X19
	261 Call RegexParser.ScanCapname, X0
	262 Move X8, [X19+104]
	263 Compare X8, 0
	264 JumpIfEqual {463}
	265 Move X9, [X8]
	266 Move X20, X0
	267 Move X0, X8
	268 Move X1, X20
	269 Move X10, [X9+696]
	270 Move X2, [X9+704]
	271 NotImplemented "Instruction BLR not yet implemented."
	272 Move TEMP, X0
	273 And TEMP, TEMP, 1
	274 Compare TEMP, 1
	275 JumpIfNotEqual {463}
	276 Move X0, X19
	277 Move X1, X20
	278 Call RegexParser.CaptureSlotFromName, X0, X1
	279 Move W20, W0
	280 Move X9, [X19+56]
	281 Subtract W8, W21, 1
	282 Move W10, 1
	283 Move [X19+64], W8
	284 Move [X19+144], W10
	285 Compare X9, 0
	286 JumpIfEqual {502}
	287 Move W9, [X9+16]
	288 Subtract W20, W9, W8
	289 NotImplemented "Instruction CMP not yet implemented."
	290 Move W1, 1
	291 Move X0, X19
	292 Call RegexParser.RightChar, X0, X1
	293 And W8, W0, 0xFFFF
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Move W1, 2
	296 Move X0, X19
	297 Call RegexParser.RightChar, X0, X1
	298 And W8, W0, 0xFFFF
	299 NotImplemented "Instruction CMP not yet implemented."
	300 NotImplemented "Instruction CMP not yet implemented."
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Move W21, 34
	303 And W8, W0, 0xFFFF
	304 NotImplemented "Instruction CMP not yet implemented."
	305 Move W1, 3
	306 Move X0, X19
	307 Call RegexParser.RightChar, X0, X1
	308 And W8, W0, 0xFFFF
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Move W1, 3
	311 Move X0, X19
	312 Call RegexParser.RightChar, X0, X1
	313 And W8, W0, 0xFFFF
	314 NotImplemented "Instruction CMP not yet implemented."
	315 Move W21, 34
	316 Move X0, X19
	317 Call RegexParser.ScanDecimal, X0
	318 Move W20, W0
	319 Move X0, X19
	320 Move W1, W20
	321 Call RegexParser.IsCaptureSlot, X0, X1
	322 Move X8, [X19+56]
	323 And W31, W0, 1
	324 NotImplemented "Instruction CSINV not yet implemented."
	325 Compare X8, 0
	326 JumpIfEqual {502}
	327 Move W8, [X8+16]
	328 Move W9, [X19+64]
	329 Subtract W8, W8, W9
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Move X0, X19
	332 Call RegexParser.RightChar, X0
	333 NotImplemented "Instruction CMP not yet implemented."
	334 Move X0, X19
	335 Call RegexParser.RightChar, X0
	336 And W8, W0, 0xFFFF
	337 NotImplemented "Instruction CMP not yet implemented."
	338 Compare W20, 0
	339 JumpIfEqual {516}
	340 Add W31, W20, 1
	341 Move W24, W31
	342 Move W24, 1
	343 And W8, W21, 0xFFFF
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Move TEMP, 0
	346 Not TEMP
	347 Move W20, TEMP
	348 Move W24, 1
	349 Move X8, [X19+56]
	350 Compare X8, 0
	351 JumpIfEqual {502}
	352 Move W8, [X8+16]
	353 Move W9, [X19+64]
	354 Subtract W8, W8, W9
	355 NotImplemented "Instruction CMP not yet implemented."
	356 Move X0, X19
	357 Call RegexParser.RightChar, X0
	358 And W8, W0, 0xFFFF
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Move W8, [X19+64]
	361 Move X0, X19
	362 Add W8, W8, 1
	363 Move [X19+64], W8
	364 Call RegexParser.RightChar, X0
	365 Subtract W8, W0, 48
	366 And W8, W8, 0xFFFF
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move X8, 0xAF9000
	369 Move X8, [X8+2272]
	370 Move W21, W0
	371 Move X0, [X8]
	372 Move W8, [X0+224]
	373 Compare W8, 0
	374 JumpIfNotEqual {376}
	375 Call 0x1C17DFC
	376 Move W0, W21
	377 Move X1, X31
	378 Call RegexCharClass.IsWordChar, X0
	379 Move TEMP, X0
	380 And TEMP, TEMP, 1
	381 Compare TEMP, 1
	382 JumpIfNotEqual {500}
	383 Move X0, X19
	384 Call RegexParser.ScanCapname, X0
	385 Move X8, [X19+104]
	386 Move X21, X0
	387 Compare X8, 0
	388 JumpIfEqual {544}
	389 Move X9, [X8]
	390 Move X0, X8
	391 Move X1, X21
	392 Move X10, [X9+696]
	393 Move X2, [X9+704]
	394 NotImplemented "Instruction BLR not yet implemented."
	395 Move TEMP, X0
	396 And TEMP, TEMP, 1
	397 Compare TEMP, 1
	398 JumpIfNotEqual {544}
	399 Move X0, X19
	400 Move X1, X21
	401 Call RegexParser.CaptureSlotFromName, X0, X1
	402 Move X8, [X19+56]
	403 Compare X8, 0
	404 JumpIfEqual {502}
	405 Move W21, W0
	406 Move TEMP, 0
	407 Not TEMP
	408 Move W21, TEMP
	409 Compare W24, 0
	410 JumpIfEqual {412}
	411 Add W31, W21, 1
	412 Move X8, [X19+56]
	413 Compare X8, 0
	414 JumpIfEqual {502}
	415 Move W8, [X8+16]
	416 Move W9, [X19+64]
	417 Subtract W8, W8, W9
	418 NotImplemented "Instruction CMP not yet implemented."
	419 Move X0, X19
	420 Call RegexParser.RightCharMoveRight, X0
	421 NotImplemented "Instruction CMP not yet implemented."
	422 Move X0, [X22]
	423 Move W23, [X19+128]
	424 Call 0x1C17F10
	425 Move X1, X31
	426 Move X19, X0
	427 Call Object..ctor, X0
	428 Move W8, 28
	429 Move [X19+48], W21
	430 Move [X19+52], W23
	431 Move [X19+16], W8
	432 Move [X19+44], W20
	433 Move X0, X19
	434 Call RegexParser.ScanDecimal, X0
	435 Move [X31+12], W0
	436 Move X8, [X19+56]
	437 Compare X8, 0
	438 JumpIfEqual {502}
	439 Move W8, [X8+16]
	440 Move W9, [X19+64]
	441 Subtract W8, W8, W9
	442 NotImplemented "Instruction CMP not yet implemented."
	443 Move W20, W0
	444 Move X0, X19
	445 Call RegexParser.RightCharMoveRight, X0
	446 And W8, W0, 0xFFFF
	447 NotImplemented "Instruction CMP not yet implemented."
	448 Move X0, X19
	449 Move W1, W20
	450 Call RegexParser.IsCaptureSlot, X0, X1
	451 Move TEMP, X0
	452 And TEMP, TEMP, 1
	453 Compare TEMP, 1
	454 JumpIfNotEqual {531}
	455 Move W21, [X19+128]
	456 Move X0, [X22]
	457 Call 0x1C17F10
	458 Move X1, X31
	459 Move X19, X0
	460 Call Object..ctor, X0
	461 Move W8, 33
	462 Move [X19+52], W21
	463 Move TEMP, 0
	464 Not TEMP
	465 Move W20, TEMP
	466 Move X8, [X19+56]
	467 Compare X8, 0
	468 JumpIfEqual {502}
	469 Move W8, [X8+16]
	470 Move W9, [X19+64]
	471 Subtract W8, W8, W9
	472 NotImplemented "Instruction CMP not yet implemented."
	473 Move X0, X19
	474 Call RegexParser.RightChar, X0
	475 NotImplemented "Instruction CMP not yet implemented."
	476 Move X0, X19
	477 Call RegexParser.RightChar, X0
	478 And W8, W0, 0xFFFF
	479 NotImplemented "Instruction CMP not yet implemented."
	480 Move X0, X19
	481 Call RegexParser.ScanDecimal, X0
	482 Move W21, W0
	483 Move X0, X19
	484 Move W1, W21
	485 Call RegexParser.IsCaptureSlot, X0, X1
	486 Move TEMP, X0
	487 And TEMP, TEMP, 1
	488 Compare TEMP, 1
	489 JumpIfNotEqual {552}
	490 Move X8, [X19+56]
	491 Compare X8, 0
	492 JumpIfEqual {502}
	493 Move W8, [X8+16]
	494 Move W9, [X19+64]
	495 Subtract W8, W8, W9
	496 NotImplemented "Instruction CMP not yet implemented."
	497 Move X0, X19
	498 Call RegexParser.RightChar, X0
	499 NotImplemented "Instruction CMP not yet implemented."
	500 Move X0, 0xAF9000
	501 Move X0, [X0+1152]
	502 Call 0x1C17F20
	503 Move X0, 0xAF9000
	504 Move X0, [X0+1160]
	505 Call 0x1C17D08
	506 Move X1, X0
	507 Move X0, X19
	508 Call RegexParser.MakeException, X0, X1
	509 Move X19, X0
	510 Move X0, 0xAF9000
	511 Move X0, [X0+1168]
	512 Call 0x1C17D08
	513 Move X1, X0
	514 Move X0, X19
	515 Call 0x1C17DEC
	516 Move X0, 0xAF9000
	517 Move X0, [X0+1176]
	518 Move X0, 0xAB2000
	519 Move X0, [X0+3144]
	520 Call 0x1C17D08
	521 Call 0x19913D0
	522 Move X0, X31
	523 Call CultureInfo.get_CurrentCulture
	524 Move X1, X0
	525 Add X0, X31, 12
	526 Move X2, X31
	527 Call Int32.ToString, X0, X1
	528 Move X20, X0
	529 Move X0, 0xAF9000
	530 Move X0, [X0+1184]
	531 Move X0, 0xAB2000
	532 Move X0, [X0+3144]
	533 Call 0x1C17D08
	534 Call 0x19913D0
	535 Move X0, X31
	536 Call CultureInfo.get_CurrentCulture
	537 Move X1, X0
	538 Add X0, X31, 12
	539 Move X2, X31
	540 Call Int32.ToString, X0, X1
	541 Move X20, X0
	542 Move X0, 0xAF9000
	543 Move X0, [X0+1192]
	544 Move X0, 0xAF9000
	545 Move X0, [X0+1200]
	546 Call 0x1C17D08
	547 Move X1, X21
	548 Move X0, 0xAF9000
	549 Move X0, [X0+1208]
	550 Move X0, 0xAF9000
	551 Move X0, [X0+1216]
	552 Move [X31+8], W21
	553 Move X0, 0xAB0000
	554 Move X0, [X0+1880]
	555 Call 0x1C17D08
	556 Add X1, X31, 8
	557 Call 0x1C17E04
	558 Move X20, X0
	559 Move X0, 0xAF9000
	560 Move X0, [X0+1224]
	561 Call 0x1C17D08
	562 Move X1, X20
	563 Move X2, X31
	564 Call SR.Format, X0, X1

Method: System.Void ScanBlank()

Disassembly:
	0x0364288C MOVZ W8, 0x1
	0x03642890 STRB W8, [X20 + 0x5A0]
	0x03642894 LDR X0, [X19 + 0x88]
	0x03642898 CBZ X0, 0x3642904
	0x0364289C ADRP X9, 0xAFA000
	0x036428A0 LDR X9, [X9 + 0x478]
	0x036428A4 LDR W10, [X0 + 0x1C]
	0x036428A8 LDR W1, [X19 + 0x80]
	0x036428AC LDR X8, [X0 + 0x10]
	0x036428B0 LDR X9, [X9]
	0x036428B4 ADD W10, W10, 0x1
	0x036428B8 STR W10, [X0 + 0x1C]
	0x036428BC CBZ X8, 0x3642904
	0x036428C0 LDRSW X10, [X0 + 0x18]
	0x036428C4 LDR W11, [X8 + 0x18]
	0x036428C8 CMP W10, W11
	0x036428CC B.CS 0x36428EC
	0x036428D0 LDP X20, X19, [X31 + 0x10]
	0x036428D4 ADD W9, W10, 0x1
	0x036428D8 ADD X8, X8, X10, 0x2, LSL
	0x036428DC STR W9, [X0 + 0x18]
	0x036428E0 STR W1, [X8 + 0x20]
	0x036428E4 LDR X30, [X31], #0x20
	0x036428E8 RET
	0x036428EC LDR X8, [X9 + 0x20]
	0x036428F0 LDP X20, X19, [X31 + 0x10]
	0x036428F4 LDR X8, [X8 + 0xC0]
	0x036428F8 LDR X2, [X8 + 0x70]
	0x036428FC LDR X30, [X31], #0x20
	0x03642900 B 0x2FDF178
	0x03642904 BL 0x1C16F20
	0x03642908 STR X30, [X31 - 0x40]!
	0x0364290C STP X24, X23, [X31 + 0x10]
	0x03642910 STP X22, X21, [X31 + 0x20]
	0x03642914 STP X20, X19, [X31 + 0x30]
	0x03642918 ADRP X20, 0xD9E000
	0x0364291C LDRB W8, [X20 + 0x584]
	0x03642920 MOV X19, X0
	0x03642924 TBNZ X8, 0x0, 0x3642948
	0x03642928 ADRP X0, 0xAF9000
	0x0364292C LDR X0, [X0 + 0x8E0]
	0x03642930 BL 0x1C16CF4
	0x03642934 ADRP X0, 0xAFA000
	0x03642938 LDR X0, [X0 + 0x3A8]
	0x0364293C BL 0x1C16CF4
	0x03642940 MOVZ W8, 0x1
	0x03642944 STRB W8, [X20 + 0x584]
	0x03642948 STR W31, [X31 + 0xC]
	0x0364294C LDR X8, [X19 + 0x38]
	0x03642950 CBZ X8, 0x36430D4
	0x03642954 LDR W8, [X8 + 0x10]
	0x03642958 LDR W9, [X19 + 0x40]
	0x0364295C ADRP X22, 0xAFA000
	0x03642960 LDR X22, [X22 + 0x3A8]
	0x03642964 CMP W8, W9
	0x03642968 B.EQ 0x36429C8
	0x0364296C MOV X0, X19
	0x03642970 BL 0x3641BB0
	0x03642974 AND W8, W0, 0xFFFF
	0x03642978 CMP W8, 0x3F
	0x0364297C B.NE 0x36429C8
	0x03642980 MOV X0, X19
	0x03642984 BL 0x3641BB0
	0x03642988 AND W8, W0, 0xFFFF
	0x0364298C CMP W8, 0x3F
	0x03642990 B.NE 0x36429FC
	0x03642994 LDR X8, [X19 + 0x38]
	0x03642998 CBZ X8, 0x36430D4
	0x0364299C LDR W8, [X8 + 0x10]
	0x036429A0 LDR W9, [X19 + 0x40]
	0x036429A4 SUB W8, W8, W9
	0x036429A8 CMP W8, 0x2
	0x036429AC B.LT 0x36429FC
	0x036429B0 MOVZ W1, 0x1
	0x036429B4 MOV X0, X19
	0x036429B8 BL 0x3644650
	0x036429BC AND W8, W0, 0xFFFF
	0x036429C0 CMP W8, 0x29
	0x036429C4 B.NE 0x36429FC
	0x036429C8 LDR W20, [X19 + 0x80]
	0x036429CC TBNZ X20, 0x2, 0x36429D8
	0x036429D0 LDRB W8, [X19 + 0x90]
	0x036429D4 CBZ W8, 0x3642A4C
	0x036429D8 STRB W31, [X19 + 0x90]
	0x036429DC LDR X0, [X22]
	0x036429E0 BL 0x1C16F10
	0x036429E4 MOV X1, X31
	0x036429E8 MOV X19, X0
	0x036429EC BL 0x33BDD8C
	0x036429F0 MOVZ W8, 0x1D
	0x036429F4 STR W8, [X19 + 0x10]
	0x036429F8 B 0x3642CA8
	0x036429FC LDR W8, [X19 + 0x40]
	0x03642A00 LDR X9, [X19 + 0x38]
	0x03642A04 ADD W8, W8, 0x1
	0x03642A08 STR W8, [X19 + 0x40]
	0x03642A0C CBZ X9, 0x36430D4
	0x03642A10 LDR W9, [X9 + 0x10]
	0x03642A14 CMP W9, W8
	0x03642A18 B.EQ 0x36430D8
	0x03642A1C MOV X0, X19
	0x03642A20 BL 0x3643D54
	0x03642A24 AND W8, W0, 0xFFFF
	0x03642A28 MOV W20, W0
	0x03642A2C CMP W8, 0x27
	0x03642A30 B.HI 0x3642A84
	0x03642A34 CMP W8, 0x21
	0x03642A38 B.EQ 0x3642AFC
	0x03642A3C CMP W8, 0x27
	0x03642A40 B.NE 0x3642BF0
	0x03642A44 MOVZ W23, 0x27
	0x03642A48 B 0x3642AB0
	0x03642A4C LDR W21, [X19 + 0x50]
	0x03642A50 ADD W8, W21, 0x1
	0x03642A54 STR W8, [X19 + 0x50]
	0x03642A58 LDR X0, [X22]
	0x03642A5C BL 0x1C16F10
	0x03642A60 MOV X1, X31
	0x03642A64 MOV X19, X0
	0x03642A68 BL 0x33BDD8C
	0x03642A6C MOVZ W8, 0x1C
	0x03642A70 MOVN W9, 0x0
	0x03642A74 STR W8, [X19 + 0x10]
	0x03642A78 STR W21, [X19 + 0x2C]
	0x03642A7C STP W9, W20, [X19 + 0x30]
	0x03642A80 B 0x3642CAC
	0x03642A84 SUB W9, W8, 0x3A
	0x03642A88 CMP W9, 0x4
	0x03642A8C B.HI 0x3642B08
	0x03642A90 ADRP X8, 0xFFFFFFFFFD555000
	0x03642A94 ADD X8, X8, 0x4C9
	0x03642A98 ADR X10, 0x18
	0x03642A9C LDRB W11, [X8, X9, LSL]
	0x03642AA0 ADD X10, X10, X11, 0x2, LSL
	0x03642AA4 MOVZ W23, 0x3E
	0x03642AA8 MOVZ W21, 0x20
	0x03642AAC BR X10
	0x03642AB0 LDR X8, [X19 + 0x38]
	0x03642AB4 CBZ X8, 0x36430D4
	0x03642AB8 LDR W8, [X8 + 0x10]
	0x03642ABC LDR W9, [X19 + 0x40]
	0x03642AC0 CMP W8, W9
	0x03642AC4 B.EQ 0x36430D8
	0x03642AC8 MOV X0, X19
	0x03642ACC BL 0x3643D54
	0x03642AD0 AND W8, W0, 0xFFFF
	0x03642AD4 CMP W8, 0x21
	0x03642AD8 B.EQ 0x3642C70
	0x03642ADC CMP W8, 0x3D
	0x03642AE0 B.NE 0x3642CC4
	0x03642AE4 AND W8, W20, 0xFFFF
	0x03642AE8 CMP W8, 0x28
	0x03642AEC B.CC 0x36430D8
	0x03642AF0 LDR W8, [X19 + 0x80]
	0x03642AF4 ORR W8, W8, 0x40
	0x03642AF8 B 0x3642C64
	0x03642AFC LDR W8, [X19 + 0x80]
	0x03642B00 AND W8, W8, 0xFFFFFFBF
	0x03642B04 B 0x3642C84
	0x03642B08 CMP W8, 0x28
	0x03642B0C B.NE 0x3642BF0
	0x03642B10 LDR X8, [X19 + 0x38]
	0x03642B14 CBZ X8, 0x36430D4
	0x03642B18 LDR W21, [X19 + 0x40]
	0x03642B1C LDR W8, [X8 + 0x10]
	0x03642B20 SUB W8, W8, W21
	0x03642B24 CMP W8, 0x1
	0x03642B28 B.LT 0x3642D50
	0x03642B2C MOV X0, X19
	0x03642B30 BL 0x3641BB0
	0x03642B34 SUB W8, W0, 0x30
	0x03642B38 AND W8, W8, 0xFFFF
	0x03642B3C CMP W8, 0x9
	0x03642B40 B.LS 0x3642FC4
	0x03642B44 ADRP X8, 0xAF9000
	0x03642B48 LDR X8, [X8 + 0x8E0]
	0x03642B4C MOV W20, W0
	0x03642B50 LDR X0, [X8]
	0x03642B54 LDR W8, [X0 + 0xE0]
	0x03642B58 CBNZ W8, 0x3642B60
	0x03642B5C BL 0x1C16DFC
	0x03642B60 MOV W0, W20
	0x03642B64 MOV X1, X31
	0x03642B68 BL 0x36357F0
	0x03642B6C TBZ X0, 0x0, 0x3642D50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD9F000
	006 Move W8, [X20+1413]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAFA000
	013 Move X0, [X0+2056]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1413], W8
	017 Move W9, [X19+128]
	018 Move X8, [X19+56]
	019 Move TEMP, X9
	020 And TEMP, TEMP, 32
	021 Compare TEMP, 32
	022 JumpIfEqual {75}
	023 Compare X8, 0
	024 JumpIfEqual {174}
	025 Move W9, [X19+64]
	026 Move W8, [X8+16]
	027 Subtract W8, W8, W9
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return 
	034 Move W1, 2
	035 Move X0, X19
	036 Call RegexParser.RightChar, X0, X1
	037 And W8, W0, 0xFFFF
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W1, 1
	040 Move X0, X19
	041 Call RegexParser.RightChar, X0, X1
	042 And W8, W0, 0xFFFF
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X0, X19
	045 Call RegexParser.RightChar, X0
	046 And W8, W0, 0xFFFF
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X19+56]
	049 Compare X8, 0
	050 JumpIfEqual {174}
	051 Move W9, [X19+64]
	052 Move W10, [X8+16]
	053 Subtract W9, W10, W9
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X19
	056 Call RegexParser.RightChar, X0
	057 And W8, W0, 0xFFFF
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move W9, [X19+64]
	060 Move X8, [X19+56]
	061 Add W9, W9, 1
	062 Move [X19+64], W9
	063 Compare X8, 0
	064 JumpIfNotEqual {52}
	065 Move X8, [X19+56]
	066 Compare X8, 0
	067 JumpIfEqual {174}
	068 Move W8, [X8+16]
	069 Move W9, [X19+64]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add W9, W9, 1
	072 Subtract W8, W8, W9
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move [X19+64], W9
	075 Compare X8, 0
	076 JumpIfEqual {174}
	077 Move X21, 0xAFA000
	078 Move X21, [X21+2056]
	079 Move W9, [X8+16]
	080 Move W10, [X19+64]
	081 Subtract W9, W9, W10
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X0, X19
	084 Call RegexParser.RightChar, X0
	085 Move X8, [X21]
	086 Move W20, W0
	087 Move W9, [X8+224]
	088 Compare W9, 0
	089 JumpIfNotEqual {92}
	090 Move X0, X8
	091 Call 0x1C17DFC
	092 Move W0, W20
	093 Call RegexParser.IsSpace, X0
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {99}
	098 Move W8, [X19+64]
	099 Move X8, [X19+56]
	100 Compare X8, 0
	101 JumpIfEqual {174}
	102 Move W8, [X8+16]
	103 Move W9, [X19+64]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, X19
	106 Call RegexParser.RightChar, X0
	107 Move X8, [X19+56]
	108 And W9, W0, 0xFFFF
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Compare X8, 0
	111 JumpIfEqual {174}
	112 Move W9, [X19+64]
	113 Move W8, [X8+16]
	114 Subtract W8, W8, W9
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, X19
	117 Call RegexParser.RightChar, X0
	118 And W8, W0, 0xFFFF
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move W9, [X19+64]
	121 Move X8, [X19+56]
	122 Add W9, W9, 1
	123 Move [X19+64], W9
	124 Compare X8, 0
	125 JumpIfNotEqual {113}
	126 Compare X8, 0
	127 JumpIfEqual {174}
	128 Move W8, [X8+16]
	129 Move W9, [X19+64]
	130 Subtract W8, W8, W9
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move W1, 2
	133 Move X0, X19
	134 Call RegexParser.RightChar, X0, X1
	135 And W8, W0, 0xFFFF
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move W1, 1
	138 Move X0, X19
	139 Call RegexParser.RightChar, X0, X1
	140 And W8, W0, 0xFFFF
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X0, X19
	143 Call RegexParser.RightChar, X0
	144 And W8, W0, 0xFFFF
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X8, [X19+56]
	147 Compare X8, 0
	148 JumpIfEqual {174}
	149 Move W9, [X19+64]
	150 Move W10, [X8+16]
	151 Subtract W9, W10, W9
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X0, X19
	154 Call RegexParser.RightChar, X0
	155 And W8, W0, 0xFFFF
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move W9, [X19+64]
	158 Move X8, [X19+56]
	159 Add W9, W9, 1
	160 Move [X19+64], W9
	161 Compare X8, 0
	162 JumpIfNotEqual {150}
	163 Move X8, [X19+56]
	164 Compare X8, 0
	165 JumpIfEqual {174}
	166 Move W9, [X8+16]
	167 Move W8, [X19+64]
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Add W8, W8, 1
	170 Move [X19+64], W8
	171 Move X8, [X19+56]
	172 Compare X8, 0
	173 JumpIfNotEqual {79}
	174 Call 0x1C17F20
	175 Move X0, 0xAFB000
	176 Move X0, [X0+1088]
	177 Call 0x1C17D08
	178 Move X1, X0
	179 Move X0, X19
	180 Call RegexParser.MakeException, X0, X1
	181 Move X19, X0
	182 Move X0, 0xAFB000
	183 Move X0, [X0+1096]
	184 Call 0x1C17D08
	185 Move X1, X0
	186 Move X0, X19
	187 Call 0x1C17DEC

Method: System.Text.RegularExpressions.RegexNode ScanBackslash(System.Boolean scanOnly)

Disassembly:
	0x036446A0 ADRP X20, 0xD9C000
	0x036446A4 LDRB W8, [X20 + 0x593]
	0x036446A8 MOV W19, W1
	0x036446AC MOV X21, X0
	0x036446B0 TBNZ X8, 0x0, 0x36446C8
	0x036446B4 ADRP X0, 0xAAF000
	0x036446B8 LDR X0, [X0 + 0x758]
	0x036446BC BL 0x1C16CF4
	0x036446C0 MOVZ W8, 0x1
	0x036446C4 STRB W8, [X20 + 0x593]
	0x036446C8 LDR X20, [X21 + 0x60]
	0x036446CC CBZ X20, 0x3644704
	0x036446D0 ADRP X8, 0xAAF000
	0x036446D4 LDR X8, [X8 + 0x758]
	0x036446D8 ADD X1, X31, 0xC
	0x036446DC STR W19, [X31 + 0xC]
	0x036446E0 LDR X0, [X8]
	0x036446E4 BL 0x1C16E04
	0x036446E8 LDR X8, [X20]
	0x036446EC MOV X1, X0
	0x036446F0 MOV X0, X20
	0x036446F4 LDR X9, [X8 + 0x2B8]
	0x036446F8 LDR X2, [X8 + 0x2C0]
	0x036446FC BLR X9
	0x03644700 B 0x364471C
	0x03644704 TBNZ X19, 0x1F, 0x3644718
	0x03644708 LDR W8, [X21 + 0x5C]
	0x0364470C CMP W8, W19
	0x03644710 CSET W0, GT
	0x03644714 B 0x364471C
	0x03644718 MOV W0, W31
	0x0364471C LDP X20, X19, [X31 + 0x20]
	0x03644720 LDP X30, X21, [X31 + 0x10]
	0x03644724 AND W0, W0, 0x1
	0x03644728 ADD X31, X31, 0x30
	0x0364472C RET
	0x03644730 LDR X0, [X0 + 0x68]
	0x03644734 CBZ X0, 0x3644748
	0x03644738 LDR X8, [X0]
	0x0364473C LDR X3, [X8 + 0x2B8]
	0x03644740 LDR X2, [X8 + 0x2C0]
	0x03644744 BR X3
	0x03644748 RET
	0x0364474C STP X30, X21, [X31 - 0x20]!
	0x03644750 STP X20, X19, [X31 + 0x10]
	0x03644754 ADRP X21, 0xD9C000
	0x03644758 LDRB W8, [X21 + 0x592]
	0x0364475C MOV X19, X1
	0x03644760 MOV X20, X0
	0x03644764 TBNZ X8, 0x0, 0x364477C
	0x03644768 ADRP X0, 0xAAF000
	0x0364476C LDR X0, [X0 + 0x758]
	0x03644770 BL 0x1C16CF4
	0x03644774 MOVZ W8, 0x1
	0x03644778 STRB W8, [X21 + 0x592]
	0x0364477C LDR X0, [X20 + 0x68]
	0x03644780 CBZ X0, 0x36447D0
	0x03644784 LDR X8, [X0]
	0x03644788 MOV X1, X19
	0x0364478C LDR X9, [X8 + 0x2D8]
	0x03644790 LDR X2, [X8 + 0x2E0]
	0x03644794 BLR X9
	0x03644798 CBZ X0, 0x36447D0
	0x0364479C ADRP X8, 0xAAF000
	0x036447A0 LDR X8, [X8 + 0x758]
	0x036447A4 LDR X9, [X0]
	0x036447A8 LDR X1, [X8]
	0x036447AC LDR X8, [X9 + 0x40]
	0x036447B0 LDR X9, [X1 + 0x40]
	0x036447B4 CMP X8, X9
	0x036447B8 B.NE 0x36447D4
	0x036447BC BL 0x1C16E08
	0x036447C0 LDR W0, [X0]
	0x036447C4 LDP X20, X19, [X31 + 0x10]
	0x036447C8 LDP X30, X21, [X31], #0x20
	0x036447CC RET
	0x036447D0 BL 0x1C16F20
	0x036447D4 BL 0x1C171E0
	0x036447D8 STR X30, [X31 - 0x40]!
	0x036447DC STP X24, X23, [X31 + 0x10]
	0x036447E0 STP X22, X21, [X31 + 0x20]
	0x036447E4 STP X20, X19, [X31 + 0x30]
	0x036447E8 ADRP X20, 0xD9C000
	0x036447EC LDRB W8, [X20 + 0x58B]
	0x036447F0 MOV X19, X0
	0x036447F4 TBNZ X8, 0x0, 0x364480C
	0x036447F8 ADRP X0, 0xAF7000
	0x036447FC LDR X0, [X0 + 0x808]
	0x03644800 BL 0x1C16CF4
	0x03644804 MOVZ W8, 0x1
	0x03644808 STRB W8, [X20 + 0x58B]
	0x0364480C LDR X8, [X19 + 0x38]
	0x03644810 CBZ X8, 0x36448CC
	0x03644814 ADRP X21, 0xAF7000
	0x03644818 LDR W9, [X19 + 0x40]
	0x0364481C LDR X21, [X21 + 0x808]
	0x03644820 MOV W24, W31
	0x03644824 MOVZ W22, 0x1
	0x03644828 MOVZ W23, 0x113
	0x0364482C LDR W8, [X8 + 0x10]
	0x03644830 SUB W8, W8, W9
	0x03644834 CMP W8, 0x0
	0x03644838 B.LE 0x36448D0
	0x0364483C MOV X0, X19
	0x03644840 BL 0x3641BB0
	0x03644844 AND W8, W0, 0xFFFF
	0x03644848 CMP W8, 0x2B
	0x0364484C B.EQ 0x36448A4
	0x03644850 CMP W8, 0x2D
	0x03644854 B.EQ 0x364489C
	0x03644858 MOV W20, W0
	0x0364485C LDR X0, [X21]
	0x03644860 LDR W8, [X0 + 0xE0]
	0x03644864 CBNZ W8, 0x364486C
	0x03644868 BL 0x1C16DFC
	0x0364486C MOV W0, W20
	0x03644870 BL 0x3645280
	0x03644874 EXTR W8, W0, W0, 0x6
	0x03644878 CMP W8, 0x8
	0x0364487C B.HI 0x364488C
	0x03644880 LSLV W8, W22, W8
	0x03644884 ANDS W31, W8, W23, 0x0
	0x03644888 B.NE 0x36448D0
	0x0364488C LDR W8, [X19 + 0x80]
	0x03644890 TBZ X24, 0x0, 0x36448AC
	0x03644894 BIC W8, W8, W0, 0x0
	0x03644898 STR W8, [X19 + 0x80]
	0x0364489C MOVZ W24, 0x1
	0x036448A0 B 0x36448B8
	0x036448A4 MOV W24, W31
	0x036448A8 B 0x36448B8
	0x036448AC ORR W8, W8, W0, 0x0
	0x036448B0 MOV W24, W31
	0x036448B4 STR W8, [X19 + 0x80]
	0x036448B8 LDR W9, [X19 + 0x40]
	0x036448BC LDR X8, [X19 + 0x38]
	0x036448C0 ADD W9, W9, 0x1
	0x036448C4 STR W9, [X19 + 0x40]
	0x036448C8 CBNZ X8, 0x364482C
	0x036448CC BL 0x1C16F20
	0x036448D0 LDP X20, X19, [X31 + 0x30]
	0x036448D4 LDP X22, X21, [X31 + 0x20]
	0x036448D8 LDP X24, X23, [X31 + 0x10]
	0x036448DC LDR X30, [X31], #0x40
	0x036448E0 RET
	0x036448E4 STR X30, [X31 - 0x20]!
	0x036448E8 STP X20, X19, [X31 + 0x10]
	0x036448EC ADRP X20, 0xD9C000
	0x036448F0 LDRB W8, [X20 + 0x598]
	0x036448F4 MOV W19, W0
	0x036448F8 TBNZ X8, 0x0, 0x3644910
	0x036448FC ADRP X0, 0xAF7000
	0x03644900 LDR X0, [X0 + 0x808]
	0x03644904 BL 0x1C16CF4
	0x03644908 MOVZ W8, 0x1
	0x0364490C STRB W8, [X20 + 0x598]
	0x03644910 AND W8, W19, 0xFFFF
	0x03644914 CMP W8, 0x20
	0x03644918 B.LS 0x3644924
	0x0364491C MOV W0, W31
	0x03644920 B 0x3644968
	0x03644924 ADRP X20, 0xAF7000
	0x03644928 LDR X20, [X20 + 0x808]
	0x0364492C LDR X0, [X20]
	0x03644930 LDR W8, [X0 + 0xE0]
	0x03644934 CBNZ W8, 0x3644940
	0x03644938 BL 0x1C16DFC
	0x0364493C LDR X0, [X20]
	0x03644940 LDR X8, [X0 + 0xB8]
	0x03644944 LDR X8, [X8]
	0x03644948 CBZ X8, 0x3644974
	0x0364494C LDR W9, [X8 + 0x18]
	0x03644950 CMP W9, W19, UXTH
	0x03644954 B.LS 0x3644978
	0x03644958 ADD X8, X8, W19, UXTH
	0x0364495C LDRB W8, [X8 + 0x20]
	0x03644960 CMP W8, 0x2
	0x03644964 CSET W0, EQ
	0x03644968 LDP X20, X19, [X31 + 0x10]
	0x0364496C LDR X30, [X31], #0x20
	0x03644970 RET
	0x03644974 BL 0x1C16F20
	0x03644978 BL 0x1C16F28
	0x0364497C AND W8, W1, 0xFFFF
	0x03644980 CMP W8, 0x47
	0x03644984 B.HI 0x36449A8
	0x03644988 CMP W8, 0x41
	0x0364498C B.EQ 0x36449DC
	0x03644990 CMP W8, 0x42
	0x03644994 B.EQ 0x36449E4
	0x03644998 CMP W8, 0x47
	0x0364499C B.NE 0x36449D4
	0x036449A0 MOVZ W0, 0x13
	0x036449A4 RET
	0x036449A8 CMP W8, 0x5A
	0x036449AC B.EQ 0x36449FC
	0x036449B0 CMP W8, 0x7A
	0x036449B4 B.EQ 0x3644A04
	0x036449B8 CMP W8, 0x62
	0x036449BC B.NE 0x36449D4
	0x036449C0 LDRB W8, [X0 + 0x81]
	0x036449C4 MOVZ W9, 0x29
	0x036449C8 ANDS W31, W8, 0x1
	0x036449CC MOVZ W8, 0x10
	0x036449D0 B 0x36449F4
	0x036449D4 MOVZ W0, 0x16
	0x036449D8 RET
	0x036449DC MOVZ W0, 0x12
	0x036449E0 RET
	0x036449E4 LDRB W8, [X0 + 0x81]
	0x036449E8 MOVZ W9, 0x2A
	0x036449EC ANDS W31, W8, 0x1
	0x036449F0 MOVZ W8, 0x11
	0x036449F4 CSEL W0, W8, W9, EQ
	0x036449F8 RET
	0x036449FC MOVZ W0, 0x14
	0x03644A00 RET
	0x03644A04 MOVZ W0, 0x15
	0x03644A08 RET
	0x03644A0C SUB X31, X31, 0x60
	0x03644A10 STP X30, X27, [X31 + 0x10]
	0x03644A14 STP X26, X25, [X31 + 0x20]
	0x03644A18 STP X24, X23, [X31 + 0x30]
	0x03644A1C STP X22, X21, [X31 + 0x40]
	0x03644A20 STP X20, X19, [X31 + 0x50]
	0x03644A24 ADRP X21, 0xD9C000
	0x03644A28 LDRB W8, [X21 + 0x587]
	0x03644A2C MOV W20, W1
	0x03644A30 MOV X19, X0
	0x03644A34 TBNZ X8, 0x0, 0x3644A64
	0x03644A38 ADRP X0, 0xAAF000
	0x03644A3C LDR X0, [X0 + 0x758]
	0x03644A40 BL 0x1C16CF4
	0x03644A44 ADRP X0, 0xAF7000
	0x03644A48 LDR X0, [X0 + 0x8E0]
	0x03644A4C BL 0x1C16CF4
	0x03644A50 ADRP X0, 0xAF8000
	0x03644A54 LDR X0, [X0 + 0x3A8]
	0x03644A58 BL 0x1C16CF4
	0x03644A5C MOVZ W8, 0x1
	0x03644A60 STRB W8, [X21 + 0x587]
	0x03644A64 STR X31, [X31 + 0x8]
	0x03644A68 LDR X8, [X19 + 0x38]
	0x03644A6C CBZ X8, 0x3644EFC
	0x03644A70 LDR W8, [X8 + 0x10]
	0x03644A74 LDR W23, [X19 + 0x40]
	0x03644A78 CMP W8, W23
	0x03644A7C B.EQ 0x3644F00
	0x03644A80 MOV X0, X19
	0x03644A84 BL 0x3641BB0
	0x03644A88 AND W8, W0, 0xFFFF
	0x03644A8C CMP W8, 0x27
	0x03644A90 B.EQ 0x3644B14
	0x03644A94 CMP W8, 0x3C
	0x03644A98 B.EQ 0x3644B14
	0x03644A9C CMP W8, 0x6B
	0x03644AA0 B.NE 0x3644B30
	0x03644AA4 LDR X8, [X19 + 0x38]
	0x03644AA8 CBZ X8, 0x3644EFC
	0x03644AAC LDR W9, [X8 + 0x10]
	0x03644AB0 LDR W8, [X19 + 0x40]
	0x03644AB4 SUB W9, W9, W8
	0x03644AB8 CMP W9, 0x2
	0x03644ABC B.LT 0x3644B08
	0x03644AC0 ADD W8, W8, 0x1
	0x03644AC4 MOV X0, X19
	0x03644AC8 STR W8, [X19 + 0x40]
	0x03644ACC BL 0x3643D54
	0x03644AD0 AND W8, W0, 0xFFFF
	0x03644AD4 MOV W21, W0
	0x03644AD8 CMP W8, 0x27
	0x03644ADC B.EQ 0x3644AEC
	0x03644AE0 CMP W8, 0x3C
	0x03644AE4 B.NE 0x3644B08
	0x03644AE8 MOVZ W21, 0x3E
	0x03644AEC LDR X8, [X19 + 0x38]
	0x03644AF0 CBZ X8, 0x3644EFC
	0x03644AF4 LDR W8, [X8 + 0x10]
	0x03644AF8 LDR W9, [X19 + 0x40]
	0x03644AFC SUB W8, W8, W9
	0x03644B00 CMP W8, 0x0
	0x03644B04 B.GT 0x3644BB8
	0x03644B08 ADRP X0, 0xAF8000
	0x03644B0C LDR X0, [X0 + 0x578]
	0x03644B10 B 0x3644F08
	0x03644B14 LDR X8, [X19 + 0x38]
	0x03644B18 CBZ X8, 0x3644EFC
	0x03644B1C LDR W9, [X8 + 0x10]
	0x03644B20 LDR W8, [X19 + 0x40]
	0x03644B24 SUB W9, W9, W8
	0x03644B28 CMP W9, 0x2
	0x03644B2C B.GE 0x3644BA0
	0x03644B30 SUB W8, W0, 0x31
	0x03644B34 AND W8, W8, 0xFFFF
	0x03644B38 CMP W8, 0x8
	0x03644B3C B.HI 0x3644E5C
	0x03644B40 LDRB W8, [X19 + 0x81]
	0x03644B44 TBNZ X8, 0x0, 0x3644D2C
	0x03644B48 MOV X0, X19
	0x03644B4C BL 0x3643D80
	0x03644B50 STR W0, [X31 + 0x8]
	0x03644B54 TBNZ X20, 0x0, 0x3644EA4
	0x03644B58 MOV W21, W0
	0x03644B5C MOV X0, X19
	0x03644B60 MOV W1, W21
	0x03644B64 BL 0x3644694
	0x03644B68 TBZ X0, 0x0, 0x3644E54
	0x03644B6C ADRP X8, 0xAF8000
	0x03644B70 LDR W20, [X19 + 0x80]
	0x03644B74 LDR X8, [X8 + 0x3A8]
	0x03644B78 LDR X0, [X8]
	0x03644B7C BL 0x1C16F10
	0x03644B80 MOV X1, X31
	0x03644B84 MOV X19, X0
	0x03644B88 BL 0x33BDD8C
	0x03644B8C MOVZ W8, 0xD
	0x03644B90 STR W20, [X19 + 0x34]
	0x03644B94 STR W8, [X19 + 0x10]
	0x03644B98 STR W21, [X19 + 0x2C]
	0x03644B9C B 0x3644EDC
	0x03644BA0 AND W9, W0, 0xFFFF
	0x03644BA4 MOVZ W10, 0x3E
	0x03644BA8 CMP W9, 0x27
	0x03644BAC ADD W8, W8, 0x1
	0x03644BB0 CSEL W21, W9, W10, EQ
	0x03644BB4 STR W8, [X19 + 0x40]
	0x03644BB8 MOV X0, X19
	0x03644BBC BL 0x3641BB0
	0x03644BC0 SUB W8, W0, 0x30
	0x03644BC4 AND W8, W8, 0xFFFF
	0x03644BC8 CMP W8, 0x9
	0x03644BCC B.LS 0x3644CA4
	0x03644BD0 ADRP X8, 0xAF7000
	0x03644BD4 LDR X8, [X8 + 0x8E0]
	0x03644BD8 MOV W22, W0
	0x03644BDC LDR X0, [X8]
	0x03644BE0 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD9D000
	006 Move W8, [X21+1414]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {39}
	013 Move X0, 0xAF8000
	014 Move X0, [X0+2272]
	015 Call 0x1C17CF4
	016 Move X0, 0xAF9000
	017 Move X0, [X0+936]
	018 Call 0x1C17CF4
	019 Move X0, 0xAF9000
	020 Move X0, [X0+1280]
	021 Call 0x1C17CF4
	022 Move X0, 0xAF9000
	023 Move X0, [X0+1288]
	024 Call 0x1C17CF4
	025 Move X0, 0xAF9000
	026 Move X0, [X0+1296]
	027 Call 0x1C17CF4
	028 Move X0, 0xAF8000
	029 Move X0, [X0+2400]
	030 Call 0x1C17CF4
	031 Move X0, 0xAF9000
	032 Move X0, [X0+1304]
	033 Call 0x1C17CF4
	034 Move X0, 0xAF9000
	035 Move X0, [X0+1312]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+1414], W8
	039 Move X8, [X19+56]
	040 Compare X8, 0
	041 JumpIfEqual {365}
	042 Move W8, [X8+16]
	043 Move W9, [X19+64]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Call RegexParser.RightChar, X0
	047 And W8, W0, 0xFFFF
	048 Move W21, W0
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 And W8, W21, 0xFFFF
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Subtract W9, W8, 65
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W8, [X19+64]
	057 Add W8, W8, 1
	058 Move [X19+64], W8
	059 Move TEMP, X20
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {156}
	063 Move W20, [X19+128]
	064 Move TEMP, X20
	065 And TEMP, TEMP, 256
	066 Compare TEMP, 256
	067 JumpIfEqual {332}
	068 Move X19, 0xAF8000
	069 Move X19, [X19+2272]
	070 Move X0, [X19]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {76}
	074 Call 0x1C17DFC
	075 Move X0, [X19]
	076 Move X8, [X0+184]
	077 Move X9, 0xAF9000
	078 Move X9, [X9+936]
	079 Move X21, [X8+80]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 And W8, W21, 0xFFFF
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 NotImplemented "Instruction CMP not yet implemented."
	085 And W8, W21, 0xFFFF
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 And W8, W21, 0xFFFF
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction CMP not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move W8, [X19+64]
	096 Add W8, W8, 1
	097 Move [X19+64], W8
	098 Move TEMP, X20
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {156}
	102 Move X8, 0xAF8000
	103 Move X8, [X8+2272]
	104 Move X0, [X8]
	105 Call 0x1C17F10
	106 Move X1, X31
	107 Move X20, X0
	108 Call RegexCharClass..ctor, X0
	109 Move X0, X19
	110 Call RegexParser.ParseProperty, X0
	111 Compare X20, 0
	112 JumpIfEqual {365}
	113 Move W8, [X19+128]
	114 Move X4, [X19+56]
	115 And W9, W21, 0xFFFF
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move X1, X0
	118 And W3, W8, 1
	119 NotImplemented "Instruction CSET not yet implemented."
	120 Move X0, X20
	121 Move X5, X31
	122 Call RegexCharClass.AddCategoryFromName, X0, X1, X2, X3, X4
	123 Move W21, [X19+128]
	124 Move TEMP, X21
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {133}
	128 Move X1, [X19+72]
	129 Move X0, X20
	130 Move X2, X31
	131 Call RegexCharClass.AddLowercase, X0, X1
	132 Move W21, [X19+128]
	133 Move X0, X20
	134 Move X1, X31
	135 Call RegexCharClass.ToStringClass, X0
	136 Move X8, 0xAF9000
	137 Move X8, [X8+936]
	138 Move X20, X0
	139 Move X8, [X8]
	140 Move X0, X8
	141 Call 0x1C17F10
	142 Move X1, X31
	143 Move X19, X0
	144 Call Object..ctor, X0
	145 Move W8, 11
	146 Move [X19+52], W21
	147 Move [X19+16], W8
	148 Move [X19+32], X20
	149 Move W8, [X19+64]
	150 Add W8, W8, 1
	151 Move [X19+64], W8
	152 Move TEMP, X20
	153 And TEMP, TEMP, 1
	154 Compare TEMP, 1
	155 JumpIfNotEqual {165}
	156 Move X19, X31
	157 And W1, W20, 1
	158 Move X0, X19
	159 Move X20, [X31+16]
	160 Move X19, [X31+24]
	161 Move X30, [X31+32]
	162 Move X21, [X31+40]
	163 Call RegexParser.ScanBasicBackslash, X0, X1
	164 Return X0
	165 Move X0, X19
	166 Move W1, W21
	167 Call RegexParser.TypeFromCode, X0, X1
	168 Move X8, 0xAF9000
	169 Move W21, [X19+128]
	170 Move X8, [X8+936]
	171 Move W20, W0
	172 Move X8, [X8]
	173 Move X0, X8
	174 Call 0x1C17F10
	175 Move X1, X31
	176 Move X19, X0
	177 Call Object..ctor, X0
	178 Move [X19+16], W20
	179 Move [X19+52], W21
	180 Move W8, [X19+64]
	181 Add W8, W8, 1
	182 Move [X19+64], W8
	183 Move TEMP, X20
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfEqual {156}
	187 Move W20, [X19+128]
	188 Move TEMP, X20
	189 And TEMP, TEMP, 256
	190 Compare TEMP, 256
	191 JumpIfEqual {302}
	192 Move X19, 0xAF8000
	193 Move X19, [X19+2272]
	194 Move X0, [X19]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {200}
	198 Call 0x1C17DFC
	199 Move X0, [X19]
	200 Move X8, [X0+184]
	201 Move X9, 0xAF9000
	202 Move X9, [X9+936]
	203 Move X21, [X8+72]
	204 Move W8, [X19+64]
	205 Add W8, W8, 1
	206 Move [X19+64], W8
	207 Move TEMP, X20
	208 And TEMP, TEMP, 1
	209 Compare TEMP, 1
	210 JumpIfEqual {156}
	211 Move W20, [X19+128]
	212 Move TEMP, X20
	213 And TEMP, TEMP, 256
	214 Compare TEMP, 256
	215 JumpIfEqual {308}
	216 Move X19, 0xAF8000
	217 Move X19, [X19+2272]
	218 Move X0, [X19]
	219 Move W8, [X0+224]
	220 Compare W8, 0
	221 JumpIfNotEqual {224}
	222 Call 0x1C17DFC
	223 Move X0, [X19]
	224 Move X8, [X0+184]
	225 Move X9, 0xAF9000
	226 Move X9, [X9+936]
	227 Move X21, [X8+48]
	228 Move W8, [X19+64]
	229 Add W8, W8, 1
	230 Move [X19+64], W8
	231 Move TEMP, X20
	232 And TEMP, TEMP, 1
	233 Compare TEMP, 1
	234 JumpIfEqual {156}
	235 Move W20, [X19+128]
	236 Move TEMP, X20
	237 And TEMP, TEMP, 256
	238 Compare TEMP, 256
	239 JumpIfEqual {314}
	240 Move X19, 0xAF8000
	241 Move X19, [X19+2272]
	242 Move X0, [X19]
	243 Move W8, [X0+224]
	244 Compare W8, 0
	245 JumpIfNotEqual {248}
	246 Call 0x1C17DFC
	247 Move X0, [X19]
	248 Move X8, [X0+184]
	249 Move X9, 0xAF9000
	250 Move X9, [X9+936]
	251 Move X21, [X8+64]
	252 Move W8, [X19+64]
	253 Add W8, W8, 1
	254 Move [X19+64], W8
	255 Move TEMP, X20
	256 And TEMP, TEMP, 1
	257 Compare TEMP, 1
	258 JumpIfEqual {156}
	259 Move W20, [X19+128]
	260 Move TEMP, X20
	261 And TEMP, TEMP, 256
	262 Compare TEMP, 256
	263 JumpIfEqual {320}
	264 Move X19, 0xAF8000
	265 Move X19, [X19+2272]
	266 Move X0, [X19]
	267 Move W8, [X0+224]
	268 Compare W8, 0
	269 JumpIfNotEqual {272}
	270 Call 0x1C17DFC
	271 Move X0, [X19]
	272 Move X8, [X0+184]
	273 Move X9, 0xAF9000
	274 Move X9, [X9+936]
	275 Move X21, [X8+40]
	276 Move W8, [X19+64]
	277 Add W8, W8, 1
	278 Move [X19+64], W8
	279 Move TEMP, X20
	280 And TEMP, TEMP, 1
	281 Compare TEMP, 1
	282 JumpIfEqual {156}
	283 Move W20, [X19+128]
	284 Move TEMP, X20
	285 And TEMP, TEMP, 256
	286 Compare TEMP, 256
	287 JumpIfEqual {326}
	288 Move X19, 0xAF8000
	289 Move X19, [X19+2272]
	290 Move X0, [X19]
	291 Move W8, [X0+224]
	292 Compare W8, 0
	293 JumpIfNotEqual {296}
	294 Call 0x1C17DFC
	295 Move X0, [X19]
	296 Move X8, [X0+184]
	297 Move X9, 0xAF9000
	298 Move X9, [X9+936]
	299 Move X21, [X8+56]
	300 Move X0, [X9]
	301 Call 0x1C17F10
	302 Move X8, 0xAF9000
	303 Move X8, [X8+936]
	304 Move X0, [X8]
	305 Call 0x1C17F10
	306 Move X8, 0xAF9000
	307 Move X8, [X8+1304]
	308 Move X8, 0xAF9000
	309 Move X8, [X8+936]
	310 Move X0, [X8]
	311 Call 0x1C17F10
	312 Move X8, 0xAF9000
	313 Move X8, [X8+1312]
	314 Move X8, 0xAF9000
	315 Move X8, [X8+936]
	316 Move X0, [X8]
	317 Call 0x1C17F10
	318 Move X8, 0xAF9000
	319 Move X8, [X8+1288]
	320 Move X8, 0xAF9000
	321 Move X8, [X8+936]
	322 Move X0, [X8]
	323 Call 0x1C17F10
	324 Move X8, 0xAF9000
	325 Move X8, [X8+1296]
	326 Move X8, 0xAF9000
	327 Move X8, [X8+936]
	328 Move X0, [X8]
	329 Call 0x1C17F10
	330 Move X8, 0xAF8000
	331 Move X8, [X8+2400]
	332 Move X8, 0xAF9000
	333 Move X8, [X8+936]
	334 Move X0, [X8]
	335 Call 0x1C17F10
	336 Move X8, 0xAF9000
	337 Move X8, [X8+1280]
	338 Move X21, [X8]
	339 Move X1, X31
	340 Move X19, X0
	341 Call Object..ctor, X0
	342 Move W8, 11
	343 Move [X19+52], W20
	344 Move [X19+16], W8
	345 Move [X19+32], X21
	346 Move X0, X19
	347 Move X20, [X31+16]
	348 Move X19, [X31+24]
	349 Move X30, [X31+32]
	350 Move X21, [X31+40]
	351 Return X0
	352 Move X0, 0xAF9000
	353 Move X0, [X0+1320]
	354 Call 0x1C17D08
	355 Move X1, X0
	356 Move X0, X19
	357 Call RegexParser.MakeException, X0, X1
	358 Move X19, X0
	359 Move X0, 0xAF9000
	360 Move X0, [X0+1328]
	361 Call 0x1C17D08
	362 Move X1, X0
	363 Move X0, X19
	364 Call 0x1C17DEC
	365 Call 0x1C17F20

Method: System.Text.RegularExpressions.RegexNode ScanBasicBackslash(System.Boolean scanOnly)

Disassembly:
	0x03645A0C LDR X28, [X28 + 0x1B8]
	0x03645A10 MOV X27, X31
	0x03645A14 MOV W21, W31
	0x03645A18 LDR X8, [X19 + 0x70]
	0x03645A1C CBZ X8, 0x3645A38
	0x03645A20 LDR W9, [X8 + 0x18]
	0x03645A24 CMP X27, X9
	0x03645A28 B.CS 0x3645C18
	0x03645A2C ADD X8, X8, X27, 0x2, LSL
	0x03645A30 LDR W22, [X8 + 0x20]
	0x03645A34 B 0x3645A3C
	0x03645A38 MOV W22, W27
	0x03645A3C CMP W29, W22
	0x03645A40 B.NE 0x3645AA0
	0x03645A44 CBZ X20, 0x364579C
	0x03645A48 LDR X2, [X25]
	0x03645A4C LDR X22, [X19 + 0x78]
	0x03645A50 MOV X0, X20
	0x03645A54 MOV W1, W21
	0x03645A58 BL 0x301BCCC
	0x03645A5C CBZ X22, 0x364579C
	0x03645A60 LDR W10, [X22 + 0x1C]
	0x03645A64 LDR X8, [X22 + 0x10]
	0x03645A68 LDR X9, [X28]
	0x03645A6C ADD W10, W10, 0x1
	0x03645A70 STR W10, [X22 + 0x1C]
	0x03645A74 CBZ X8, 0x364579C
	0x03645A78 LDRSW X10, [X22 + 0x18]
	0x03645A7C LDR W11, [X8 + 0x18]
	0x03645A80 MOV X1, X0
	0x03645A84 CMP W10, W11
	0x03645A88 B.CS 0x3645B64
	0x03645A8C ADD W9, W10, 0x1
	0x03645A90 ADD X8, X8, X10, 0x3, LSL
	0x03645A94 STR W9, [X22 + 0x18]
	0x03645A98 STR X1, [X8 + 0x20]
	0x03645A9C B 0x3645B78
	0x03645AA0 ADRP X8, 0xAB7000
	0x03645AA4 LDR X8, [X8 + 0x9E8]
	0x03645AA8 LDR X23, [X19 + 0x48]
	0x03645AAC LDR X0, [X8]
	0x03645AB0 LDR W8, [X0 + 0xE0]
	0x03645AB4 CBNZ W8, 0x3645ABC
	0x03645AB8 BL 0x1C16DFC
	0x03645ABC MOV W0, W22
	0x03645AC0 MOV X1, X23
	0x03645AC4 MOV X2, X31
	0x03645AC8 BL 0x33222C4
	0x03645ACC LDR X8, [X19 + 0x78]
	0x03645AD0 CBZ X8, 0x364579C
	0x03645AD4 LDR W11, [X8 + 0x1C]
	0x03645AD8 LDR X9, [X8 + 0x10]
	0x03645ADC LDR X10, [X28]
	0x03645AE0 ADD W11, W11, 0x1
	0x03645AE4 STR W11, [X8 + 0x1C]
	0x03645AE8 CBZ X9, 0x364579C
	0x03645AEC LDRSW X11, [X8 + 0x18]
	0x03645AF0 LDR W12, [X9 + 0x18]
	0x03645AF4 MOV X23, X0
	0x03645AF8 CMP W11, W12
	0x03645AFC B.CS 0x3645B14
	0x03645B00 ADD W10, W11, 0x1
	0x03645B04 ADD X9, X9, X11, 0x3, LSL
	0x03645B08 STR W10, [X8 + 0x18]
	0x03645B0C STR X23, [X9 + 0x20]
	0x03645B10 B 0x3645B2C
	0x03645B14 LDR X9, [X10 + 0x20]
	0x03645B18 MOV X0, X8
	0x03645B1C MOV X1, X23
	0x03645B20 LDR X9, [X9 + 0xC0]
	0x03645B24 LDR X2, [X9 + 0x70]
	0x03645B28 BL 0x301BF90
	0x03645B2C LDR X0, [X26]
	0x03645B30 LDR X24, [X19 + 0x68]
	0x03645B34 ADD X1, X31, 0x8
	0x03645B38 STR W22, [X31 + 0x8]
	0x03645B3C BL 0x1C16E04
	0x03645B40 CBZ X24, 0x364579C
	0x03645B44 LDR X8, [X24]
	0x03645B48 MOV X2, X0
	0x03645B4C MOV X0, X24
	0x03645B50 MOV X1, X23
	0x03645B54 LDR X9, [X8 + 0x2E8]
	0x03645B58 LDR X3, [X8 + 0x2F0]
	0x03645B5C BLR X9
	0x03645B60 B 0x3645BE4
	0x03645B64 LDR X8, [X9 + 0x20]
	0x03645B68 MOV X0, X22
	0x03645B6C LDR X8, [X8 + 0xC0]
	0x03645B70 LDR X2, [X8 + 0x70]
	0x03645B74 BL 0x301BF90
	0x03645B78 LDR W8, [X20 + 0x18]
	0x03645B7C ADD W21, W21, 0x1
	0x03645B80 CMP W21, W8
	0x03645B84 B.NE 0x3645B90
	0x03645B88 MOVN W29, 0x0
	0x03645B8C B 0x3645BE4
	0x03645B90 LDR X2, [X25]
	0x03645B94 LDR X22, [X19 + 0x68]
	0x03645B98 MOV X0, X20
	0x03645B9C MOV W1, W21
	0x03645BA0 BL 0x301BCCC
	0x03645BA4 CBZ X22, 0x364579C
	0x03645BA8 LDR X8, [X22]
	0x03645BAC MOV X1, X0
	0x03645BB0 MOV X0, X22
	0x03645BB4 LDR X9, [X8 + 0x2D8]
	0x03645BB8 LDR X2, [X8 + 0x2E0]
	0x03645BBC BLR X9
	0x03645BC0 CBZ X0, 0x364579C
	0x03645BC4 LDR X8, [X0]
	0x03645BC8 LDR X1, [X26]
	0x03645BCC LDR X8, [X8 + 0x40]
	0x03645BD0 LDR X9, [X1 + 0x40]
	0x03645BD4 CMP X8, X9
	0x03645BD8 B.NE 0x3645C14
	0x03645BDC BL 0x1C16E08
	0x03645BE0 LDR W29, [X0]
	0x03645BE4 LDRSW X8, [X19 + 0x54]
	0x03645BE8 ADD X27, X27, 0x1
	0x03645BEC CMP X27, X8
	0x03645BF0 B.LT 0x3645A18
	0x03645BF4 LDP X20, X19, [X31 + 0x60]
	0x03645BF8 LDP X22, X21, [X31 + 0x50]
	0x03645BFC LDP X24, X23, [X31 + 0x40]
	0x03645C00 LDP X26, X25, [X31 + 0x30]
	0x03645C04 LDP X28, X27, [X31 + 0x20]
	0x03645C08 LDP X29, X30, [X31 + 0x10]
	0x03645C0C ADD X31, X31, 0x70
	0x03645C10 RET
	0x03645C14 BL 0x1C171E0
	0x03645C18 BL 0x1C16F28
	0x03645C1C LDR X0, [X0 + 0x30]
	0x03645C20 RET
	0x03645C24 STR X1, [X0 + 0x30]
	0x03645C28 RET
	0x03645C2C LDR W0, [X0 + 0x40]
	0x03645C30 RET
	0x03645C34 STR W1, [X0 + 0x40]
	0x03645C38 RET
	0x03645C3C STR X30, [X31 - 0x30]!
	0x03645C40 STP X22, X21, [X31 + 0x10]
	0x03645C44 STP X20, X19, [X31 + 0x20]
	0x03645C48 ADRP X21, 0xD9B000
	0x03645C4C ADRP X22, 0xAAE000
	0x03645C50 ADRP X19, 0xAF7000
	0x03645C54 ADRP X20, 0xAF6000
	0x03645C58 LDRB W8, [X21 + 0x5A5]
	0x03645C5C LDR X22, [X22 + 0x618]
	0x03645C60 LDR X19, [X19 + 0x5C0]
	0x03645C64 LDR X20, [X20 + 0x808]
	0x03645C68 TBNZ X8, 0x0, 0x3645C98
	0x03645C6C ADRP X0, 0xAAE000
	0x03645C70 LDR X0, [X0 + 0x618]
	0x03645C74 BL 0x1C16CF4
	0x03645C78 ADRP X0, 0xAF6000
	0x03645C7C LDR X0, [X0 + 0x808]
	0x03645C80 BL 0x1C16CF4
	0x03645C84 ADRP X0, 0xAF7000
	0x03645C88 LDR X0, [X0 + 0x5C0]
	0x03645C8C BL 0x1C16CF4
	0x03645C90 MOVZ W8, 0x1
	0x03645C94 STRB W8, [X21 + 0x5A5]
	0x03645C98 LDR X0, [X22]
	0x03645C9C MOVZ W1, 0x80
	0x03645CA0 BL 0x1C16D6C
	0x03645CA4 LDR X1, [X19]
	0x03645CA8 MOV X2, X31
	0x03645CAC MOV X19, X0
	0x03645CB0 BL 0x32C5BD8
	0x03645CB4 LDR X8, [X20]
	0x03645CB8 LDP X22, X21, [X31 + 0x10]
	0x03645CBC LDR X8, [X8 + 0xB8]
	0x03645CC0 STR X19, [X8]
	0x03645CC4 LDP X20, X19, [X31 + 0x20]
	0x03645CC8 LDR X30, [X31], #0x30
	0x03645CCC RET
	0x03645CD0 LDRB W0, [X0]
	0x03645CD4 RET
	0x03645CD8 STR X30, [X31 - 0x20]!
	0x03645CDC STP X20, X19, [X31 + 0x10]
	0x03645CE0 ADRP X20, 0xD9B000
	0x03645CE4 ADRP X19, 0xAF7000
	0x03645CE8 LDRB W8, [X20 + 0x5A6]
	0x03645CEC LDR X19, [X19 + 0x2F0]
	0x03645CF0 TBNZ X8, 0x0, 0x3645D08
	0x03645CF4 ADRP X0, 0xAF7000
	0x03645CF8 LDR X0, [X0 + 0x2F0]
	0x03645CFC BL 0x1C16CF4
	0x03645D00 MOVZ W8, 0x1
	0x03645D04 STRB W8, [X20 + 0x5A6]
	0x03645D08 LDR X0, [X19]
	0x03645D0C LDR W8, [X0 + 0xE0]
	0x03645D10 CBNZ W8, 0x3645D1C
	0x03645D14 BL 0x1C16DFC
	0x03645D18 LDR X0, [X19]
	0x03645D1C LDR X8, [X0 + 0xB8]
	0x03645D20 LDP X20, X19, [X31 + 0x10]
	0x03645D24 LDP X0, X1, [X8]
	0x03645D28 LDR X30, [X31], #0x20
	0x03645D2C RET
	0x03645D30 LDR X0, [X0 + 0x8]
	0x03645D34 RET
	0x03645D38 STP X30, X21, [X31 - 0x20]!
	0x03645D3C STP X20, X19, [X31 + 0x10]
	0x03645D40 ADRP X20, 0xD9B000
	0x03645D44 ADRP X21, 0xAB0000
	0x03645D48 ADRP X19, 0xAF7000
	0x03645D4C LDRB W8, [X20 + 0x5A7]
	0x03645D50 LDR X21, [X21 + 0x278]
	0x03645D54 LDR X19, [X19 + 0x2F0]
	0x03645D58 TBNZ X8, 0x0, 0x3645D7C
	0x03645D5C ADRP X0, 0xAF7000
	0x03645D60 LDR X0, [X0 + 0x2F0]
	0x03645D64 BL 0x1C16CF4
	0x03645D68 ADRP X0, 0xAB0000
	0x03645D6C LDR X0, [X0 + 0x278]
	0x03645D70 BL 0x1C16CF4
	0x03645D74 MOVZ W8, 0x1
	0x03645D78 STRB W8, [X20 + 0x5A7]
	0x03645D7C LDR X8, [X21]
	0x03645D80 LDR X9, [X19]
	0x03645D84 LDP X20, X19, [X31 + 0x10]
	0x03645D88 LDR X8, [X8 + 0xB8]
	0x03645D8C LDR X9, [X9 + 0xB8]
	0x03645D90 LDR X8, [X8]
	0x03645D94 STP X31, X8, [X9]
	0x03645D98 LDP X30, X21, [X31], #0x20
	0x03645D9C RET
	0x03645DA0 SUB X31, X31, 0x50
	0x03645DA4 STP X30, X25, [X31 + 0x10]
	0x03645DA8 STP X24, X23, [X31 + 0x20]
	0x03645DAC STP X22, X21, [X31 + 0x30]
	0x03645DB0 STP X20, X19, [X31 + 0x40]
	0x03645DB4 ADRP X25, 0xD9B000
	0x03645DB8 LDRB W8, [X25 + 0x5A9]
	0x03645DBC MOV W19, W5
	0x03645DC0 MOV X21, X4
	0x03645DC4 MOV W22, W3
	0x03645DC8 MOV X23, X2
	0x03645DCC MOV X24, X1
	0x03645DD0 MOV X20, X0
	0x03645DD4 TBNZ X8, 0x0, 0x3645E04
	0x03645DD8 ADRP X0, 0xAF6000
	0x03645DDC LDR X0, [X0 + 0x808]
	0x03645DE0 BL 0x1C16CF4
	0x03645DE4 ADRP X0, 0xAF7000
	0x03645DE8 LDR X0, [X0 + 0x5C8]
	0x03645DEC BL 0x1C16CF4
	0x03645DF0 ADRP X0, 0xAF7000
	0x03645DF4 LDR X0, [X0 + 0x5D0]
	0x03645DF8 BL 0x1C16CF4
	0x03645DFC MOVZ W8, 0x1
	0x03645E00 STRB W8, [X25 + 0x5A9]
	0x03645E04 STR X31, [X31 + 0x8]
	0x03645E08 CBZ X20, 0x3645EB0
	0x03645E0C ADRP X8, 0xAF7000
	0x03645E10 LDR X8, [X8 + 0x5D0]
	0x03645E14 ADD X1, X31, 0x8
	0x03645E18 MOV X0, X20
	0x03645E1C LDR X2, [X8]
	0x03645E20 BL 0x285052C
	0x03645E24 TBZ X0, 0x0, 0x3645E48
	0x03645E28 LDR X8, [X31 + 0x8]
	0x03645E2C CBZ X8, 0x3645EB0
	0x03645E30 LDR X0, [X8 + 0x20]
	0x03645E34 CBZ X0, 0x3645EB0
	0x03645E38 MOV X1, X24
	0x03645E3C MOV X2, X31
	0x03645E40 BL 0x322693C
	0x03645E44 TBNZ X0, 0x0, 0x3645E94
	0x03645E48 ADRP X8, 0xAF6000
	0x03645E4C LDR X8, [X8 + 0x808]
	0x03645E50 ADRP X25, 0xAF7000
	0x03645E54 LDR X0, [X8]
	0x03645E58 LDR W8, [X0 + 0xE0]
	0x03645E5C LDR X25, [X25 + 0x5C8]
	0x03645E60 CBNZ W8, 0x3645E68
	0x03645E64 BL 0x1C16DFC
	0x03645E68 MOV X0, X24
	0x03645E6C MOV X1, X23
	0x03645E70 MOV W2, W22
	0x03645E74 MOV X3, X21
	0x03645E78 MOV W4, W19
	0x03645E7C BL 0x3641098
	0x03645E80 LDR X2, [X25]
	0x03645E84 MOV X1, X0
	0x03645E88 STR X0, [X31 + 0x8]
	0x03645E8C MOV X0, X20
	0x03645E90 BL 0x2850520
	0x03645E94 LDR X0, [X31 + 0x8]
	0x03645E98 LDP X20, X19, [X31 + 0x40]
	0x03645E9C LDP X22, X21, [X31 + 0x30]
	0x03645EA0 LDP X24, X23, [X31 + 0x20]
	0x03645EA4 LDP X30, X25, [X31 + 0x10]
	0x03645EA8 ADD X31, X31, 0x50
	0x03645EAC RET
	0x03645EB0 BL 0x1C16F20
	0x03645EB4 LDR X0, [X0 + 0x20]
	0x03645EB8 RET
	0x03645EBC STR X30, [X31 - 0x50]!
	0x03645EC0 STP X26, X25, [X31 + 0x10]
	0x03645EC4 STP X24, X23, [X31 + 0x20]
	0x03645EC8 STP X22, X21, [X31 + 0x30]
	0x03645ECC STP X20, X19, [X31 + 0x40]
	0x03645ED0 ADRP X22, 0xD9B000
	0x03645ED4 LDRB W8, [X22 + 0x5AA]
	0x03645ED8 MOV X19, X2
	0x03645EDC MOV X20, X1
	0x03645EE0 MOV X21, X0
	0x03645EE4 TBNZ X8, 0x0, 0x3645F14
	0x03645EE8 ADRP X0, 0xAAF000
	0x03645EEC LDR X0, [X0 + 0xE28]
	0x03645EF0 BL 0x1C16CF4
	0x03645EF4 ADRP X0, 0xAD6000
	0x03645EF8 LDR X0, [X0 + 0xB58]
	0x03645EFC BL 0x1C16CF4
	0x03645F00 ADRP X0, 0xAD8000
	0x03645F04 LDR X0, [X0 + 0xF38]
	0x03645F08 BL 0x1C16CF4
	0x03645F0C MOVZ W8, 0x1
	0x03645F10 STRB W8, [X22 + 0x5AA]
	0x03645F14 LDR X0, [X21 + 0x18]
	0x03645F18 CBZ X0, 0x3646044
	0x03645F1C ADRP X23, 0xAD8000
	0x03645F20 ADRP X24, 0xAD6000
	0x03645F24 LDR X23, [X23 + 0xF38]
	0x03645F28 LDR X24, [X24 + 0xB58]
	0x03645F2C ADRP X25, 0xFFFFFFFFFD552000
	0x03645F30 MOV W22, W31
	0x03645F34 ADD X25, X25, 0x4EE
	0x03645F38 MOVN W26, 0x4
	0x03645F3C LDR W8, [X0 + 0x18]
	0x03645F40 CMP W22, W8
	0x03645F44 B.GE 0x3646048
	0x03645F48 LDR X2, [X23]
	0x03645F4C MOV W1, W22
	0x03645F50 BL 0x2FDC41C
	0x03645F54 MOV W1, W0
	0x03645F58 TBNZ X0, 0x1F, 0x3645F84
	0x03645F5C LDR X0, [X21 + 0x10]
	0x03645F60 CBZ X0, 0x3646044
	0x03645F64 LDR X2, [X24]
	0x03645F68 BL 0x301BCCC
	0x03645F6C CBZ X20, 0x3646044
	0x03645F70 MOV X1, X0
	0x03645F74 MOV X0, X20
	0x03645F78 MOV X2, X31
	0x03645F7C BL 0x32333E0
	0x03645F80 B 0x3645FF0
	0x03645F84 ADDS W31, W1, 0x5
	0x03645F88 B.LE 0x3645FB8
	0x03645F8C ORN W8, W31, W1, 0x0
	0x03645F90 CMP W8, 0x3
	0x03645F94 B.HI 0x3645FF0
	0x03645F98 ADR X9, 0x10
	0x03645F9C LDRB W10, [X25, X8, LSL]
	0x03645FA0 ADD X9, X9, X10, 0x2, LSL
	0x03645FA4 BR X9
	0x03645FA8 CBZ X19, 0x3646044
	0x03645FAC CBZ X20, 0x3646044
	0x03645FB0 LDR X1, [X19 + 0x18]
	0x03645FB4 B 0x3645F74

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0xD9C000
	013 Move W8, [X21+1415]
	014 Move W20, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xAAF000
	021 Move X0, [X0+1880]
	022 Call 0x1C17CF4
	023 Move X0, 0xAF7000
	024 Move X0, [X0+2272]
	025 Call 0x1C17CF4
	026 Move X0, 0xAF8000
	027 Move X0, [X0+936]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+1415], W8
	031 Move [X31+8], X31
	032 Move X8, [X19+56]
	033 Compare X8, 0
	034 JumpIfEqual {358}
	035 Move W8, [X8+16]
	036 Move W23, [X19+64]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, X19
	039 Call RegexParser.RightChar, X0
	040 And W8, W0, 0xFFFF
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X8, [X19+56]
	045 Compare X8, 0
	046 JumpIfEqual {358}
	047 Move W9, [X8+16]
	048 Move W8, [X19+64]
	049 Subtract W9, W9, W8
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Add W8, W8, 1
	052 Move X0, X19
	053 Move [X19+64], W8
	054 Call RegexParser.RightCharMoveRight, X0
	055 And W8, W0, 0xFFFF
	056 Move W21, W0
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move W21, 62
	060 Move X8, [X19+56]
	061 Compare X8, 0
	062 JumpIfEqual {358}
	063 Move W8, [X8+16]
	064 Move W9, [X19+64]
	065 Subtract W8, W8, W9
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X0, 0xAF8000
	068 Move X0, [X0+1400]
	069 Move X8, [X19+56]
	070 Compare X8, 0
	071 JumpIfEqual {358}
	072 Move W9, [X8+16]
	073 Move W8, [X19+64]
	074 Subtract W9, W9, W8
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Subtract W8, W0, 49
	077 And W8, W8, 0xFFFF
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move W8, [X19+129]
	080 Move TEMP, X8
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfEqual {222}
	084 Move X0, X19
	085 Call RegexParser.ScanDecimal, X0
	086 Move [X31+8], W0
	087 Move TEMP, X20
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfEqual {332}
	091 Move W21, W0
	092 Move X0, X19
	093 Move W1, W21
	094 Call RegexParser.IsCaptureSlot, X0, X1
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfNotEqual {303}
	099 Move X8, 0xAF8000
	100 Move W20, [X19+128]
	101 Move X8, [X8+936]
	102 Move X0, [X8]
	103 Call 0x1C17F10
	104 Move X1, X31
	105 Move X19, X0
	106 Call Object..ctor, X0
	107 Move W8, 13
	108 Move [X19+52], W20
	109 Move [X19+16], W8
	110 Move [X19+44], W21
	111 And W9, W0, 0xFFFF
	112 Move W10, 62
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Add W8, W8, 1
	115 NotImplemented "Instruction CSEL not yet implemented."
	116 Move [X19+64], W8
	117 Move X0, X19
	118 Call RegexParser.RightChar, X0
	119 Subtract W8, W0, 48
	120 And W8, W8, 0xFFFF
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X8, 0xAF7000
	123 Move X8, [X8+2272]
	124 Move W22, W0
	125 Move X0, [X8]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Move W0, W22
	131 Move X1, X31
	132 Call RegexCharClass.IsWordChar, X0
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {304}
	137 Move X0, X19
	138 Call RegexParser.ScanCapname, X0
	139 Move X8, [X19+56]
	140 Compare X8, 0
	141 JumpIfEqual {358}
	142 Move W8, [X8+16]
	143 Move W9, [X19+64]
	144 Subtract W8, W8, W9
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move X22, X0
	147 Move X0, X19
	148 Call RegexParser.RightCharMoveRight, X0
	149 And W8, W0, 0xFFFF
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move TEMP, X20
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfEqual {332}
	155 Move X0, [X19+104]
	156 Compare X0, 0
	157 JumpIfEqual {373}
	158 Move X8, [X0]
	159 Move X1, X22
	160 Move X9, [X8+696]
	161 Move X2, [X8+704]
	162 NotImplemented "Instruction BLR not yet implemented."
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {373}
	167 Move W21, [X19+128]
	168 Move X0, X19
	169 Move X1, X22
	170 Call RegexParser.CaptureSlotFromName, X0, X1
	171 Move X8, 0xAF8000
	172 Move X8, [X8+936]
	173 Move W20, W0
	174 Move X8, [X8]
	175 Move X0, X8
	176 Call 0x1C17F10
	177 Move X1, X31
	178 Move X19, X0
	179 Call Object..ctor, X0
	180 Move W8, 13
	181 Move [X19+52], W21
	182 Move [X19+16], W8
	183 Move [X19+44], W20
	184 Move X0, X19
	185 Call RegexParser.ScanDecimal, X0
	186 Move [X31+12], W0
	187 Move X8, [X19+56]
	188 Compare X8, 0
	189 JumpIfEqual {358}
	190 Move W8, [X8+16]
	191 Move W9, [X19+64]
	192 Subtract W8, W8, W9
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move W22, W0
	195 Move X0, X19
	196 Call RegexParser.RightCharMoveRight, X0
	197 And W8, W0, 0xFFFF
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move TEMP, X20
	200 And TEMP, TEMP, 1
	201 Compare TEMP, 1
	202 JumpIfEqual {332}
	203 Move X0, X19
	204 Move W1, W22
	205 Call RegexParser.IsCaptureSlot, X0, X1
	206 Move TEMP, X0
	207 And TEMP, TEMP, 1
	208 Compare TEMP, 1
	209 JumpIfNotEqual {377}
	210 Move X8, 0xAF8000
	211 Move W20, [X19+128]
	212 Move X8, [X8+936]
	213 Move X0, [X8]
	214 Call 0x1C17F10
	215 Move X1, X31
	216 Move X19, X0
	217 Call Object..ctor, X0
	218 Move W8, 13
	219 Move [X19+52], W20
	220 Move [X19+16], W8
	221 Move [X19+44], W22
	222 Move W8, [X19+88]
	223 And W9, W0, 0xFFFF
	224 Subtract W21, W9, 48
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move W8, [X19+64]
	227 Move X25, 0xAAF000
	228 Move X25, [X25+1880]
	229 Move TEMP, 0
	230 Not TEMP
	231 Move W24, TEMP
	232 Subtract W26, W8, 1
	233 Move W27, 10
	234 Move X0, X19
	235 Move W1, W21
	236 Call RegexParser.IsCaptureSlot, X0, X1
	237 Move TEMP, X0
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfNotEqual {265}
	241 Move X22, [X19+96]
	242 Compare X22, 0
	243 JumpIfEqual {264}
	244 Move X0, [X25]
	245 Add X1, X31, 4
	246 Move [X31+4], W21
	247 Call 0x1C17E04
	248 Move X8, [X22]
	249 Move X1, X0
	250 Move X0, X22
	251 Move X9, [X8+728]
	252 Move X2, [X8+736]
	253 NotImplemented "Instruction BLR not yet implemented."
	254 Compare X0, 0
	255 JumpIfEqual {358}
	256 Move X8, [X0]
	257 Move X1, [X25]
	258 Move X8, [X8+64]
	259 Move X9, [X1+64]
	260 NotImplemented "Instruction CMP not yet implemented."
	261 Call 0x1C17E08
	262 Move W8, [X0]
	263 NotImplemented "Instruction CMP not yet implemented."
	264 Move W24, W21
	265 Move W8, [X19+64]
	266 Move X9, [X19+56]
	267 Add W8, W8, 1
	268 Move [X19+64], W8
	269 Compare X9, 0
	270 JumpIfEqual {358}
	271 Move W9, [X9+16]
	272 NotImplemented "Instruction CMP not yet implemented."
	273 Move X0, X19
	274 Call RegexParser.RightChar, X0
	275 Subtract W8, W0, 48
	276 And W8, W8, 0xFFFF
	277 NotImplemented "Instruction CMP not yet implemented."
	278 Move W8, [X19+88]
	279 Multiply W9, W21, W27
	280 Add W9, W9, W0
	281 Subtract W21, W9, 48
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Move TEMP, X24
	284 And TEMP, TEMP, -2147483648
	285 Compare TEMP, -2147483648
	286 JumpIfEqual {304}
	287 Move TEMP, X20
	288 And TEMP, TEMP, 1
	289 Compare TEMP, 1
	290 JumpIfEqual {332}
	291 Move X8, 0xAF8000
	292 Move W20, [X19+128]
	293 Move X8, [X8+936]
	294 Move X0, [X8]
	295 Call 0x1C17F10
	296 Move X1, X31
	297 Move X19, X0
	298 Call Object..ctor, X0
	299 Move W8, 13
	300 Move [X19+52], W20
	301 Move [X19+16], W8
	302 Move [X19+44], W24
	303 NotImplemented "Instruction CMP not yet implemented."
	304 Move X0, X19
	305 Move [X19+64], W23
	306 Call RegexParser.ScanCharEscape, X0
	307 Move W8, [X19+128]
	308 Move W21, W0
	309 Move TEMP, X8
	310 And TEMP, TEMP, 1
	311 Compare TEMP, 1
	312 JumpIfNotEqual {328}
	313 Move X0, [X19+72]
	314 Compare X0, 0
	315 JumpIfEqual {358}
	316 Move X8, [X0]
	317 Move X9, [X8+472]
	318 Move X1, [X8+480]
	319 NotImplemented "Instruction BLR not yet implemented."
	320 Compare X0, 0
	321 JumpIfEqual {358}
	322 Move X8, [X0]
	323 Move W1, W21
	324 Move X9, [X8+424]
	325 Move X2, [X8+432]
	326 NotImplemented "Instruction BLR not yet implemented."
	327 Move W21, W0
	328 Move TEMP, X20
	329 And TEMP, TEMP, 1
	330 Compare TEMP, 1
	331 JumpIfNotEqual {333}
	332 Move X19, X31
	333 Move X8, 0xAF8000
	334 Move W20, [X19+128]
	335 Move X8, [X8+936]
	336 Move X0, [X8]
	337 Call 0x1C17F10
	338 Move X1, X31
	339 Move X19, X0
	340 Call Object..ctor, X0
	341 Move W8, 9
	342 Move [X19+52], W20
	343 Move [X19+16], W8
	344 NotImplemented "Instruction STRH not yet implemented."
	345 Move X0, X19
	346 Move X20, [X31+80]
	347 Move X19, [X31+88]
	348 Move X22, [X31+64]
	349 Move X21, [X31+72]
	350 Move X24, [X31+48]
	351 Move X23, [X31+56]
	352 Move X26, [X31+32]
	353 Move X25, [X31+40]
	354 Move X30, [X31+16]
	355 Move X27, [X31+24]
	356 Add X31, X31, 96
	357 Return X0
	358 Call 0x1C17F20
	359 Move X0, 0xAF8000
	360 Move X0, [X0+1320]
	361 Call 0x1C17D08
	362 Move X1, X0
	363 Move X0, X19
	364 Call RegexParser.MakeException, X0, X1
	365 Move X19, X0
	366 Move X0, 0xAF8000
	367 Move X0, [X0+1408]
	368 Call 0x1C17D08
	369 Move X1, X0
	370 Move X0, X19
	371 Call 0x1C17DEC
	372 Call 0x1C181E0
	373 Move X0, 0xAF8000
	374 Move X0, [X0+1200]
	375 Call 0x1C17D08
	376 Move X1, X22
	377 Move X0, 0xAB1000
	378 Move X0, [X0+3144]
	379 Call 0x1C17D08
	380 Call 0x19913D0
	381 Move X0, X31
	382 Call CultureInfo.get_CurrentCulture
	383 Move X1, X0
	384 Add X0, X31, 12
	385 Move X0, 0xAB1000
	386 Move X0, [X0+3144]
	387 Call 0x1C17D08
	388 Call 0x19913D0
	389 Move X0, X31
	390 Call CultureInfo.get_CurrentCulture
	391 Move X1, X0
	392 Add X0, X31, 8
	393 Move X2, X31
	394 Call Int32.ToString, X0, X1
	395 Move X20, X0
	396 Move X0, 0xAF8000
	397 Move X0, [X0+1224]
	398 Call 0x1C17D08
	399 Move X1, X20
	400 Move X2, X31
	401 Call SR.Format, X0, X1

Method: System.Text.RegularExpressions.RegexNode ScanDollar()

Disassembly:
	0x03644E90 MOV W1, W21
	0x03644E94 LDP X9, X2, [X8 + 0x1A8]
	0x03644E98 BLR X9
	0x03644E9C MOV W21, W0
	0x03644EA0 TBZ X20, 0x0, 0x3644EAC
	0x03644EA4 MOV X19, X31
	0x03644EA8 B 0x3644EDC
	0x03644EAC ADRP X8, 0xAF8000
	0x03644EB0 LDR W20, [X19 + 0x80]
	0x03644EB4 LDR X8, [X8 + 0x3A8]
	0x03644EB8 LDR X0, [X8]
	0x03644EBC BL 0x1C16F10
	0x03644EC0 MOV X1, X31
	0x03644EC4 MOV X19, X0
	0x03644EC8 BL 0x33BDD8C
	0x03644ECC MOVZ W8, 0x9
	0x03644ED0 STR W20, [X19 + 0x34]
	0x03644ED4 STR W8, [X19 + 0x10]
	0x03644ED8 STRH W21, [X19 + 0x28]
	0x03644EDC MOV X0, X19
	0x03644EE0 LDP X20, X19, [X31 + 0x50]
	0x03644EE4 LDP X22, X21, [X31 + 0x40]
	0x03644EE8 LDP X24, X23, [X31 + 0x30]
	0x03644EEC LDP X26, X25, [X31 + 0x20]
	0x03644EF0 LDP X30, X27, [X31 + 0x10]
	0x03644EF4 ADD X31, X31, 0x60
	0x03644EF8 RET
	0x03644EFC BL 0x1C16F20
	0x03644F00 ADRP X0, 0xAF8000
	0x03644F04 LDR X0, [X0 + 0x528]
	0x03644F08 BL 0x1C16D08
	0x03644F0C MOV X1, X0
	0x03644F10 MOV X0, X19
	0x03644F14 BL 0x3643360
	0x03644F18 MOV X19, X0
	0x03644F1C ADRP X0, 0xAF8000
	0x03644F20 LDR X0, [X0 + 0x580]
	0x03644F24 BL 0x1C16D08
	0x03644F28 MOV X1, X0
	0x03644F2C MOV X0, X19
	0x03644F30 BL 0x1C16DEC
	0x03644F34 BL 0x1C171E0
	0x03644F38 ADRP X0, 0xAF8000
	0x03644F3C LDR X0, [X0 + 0x4B0]
	0x03644F40 BL 0x1C16D08
	0x03644F44 MOV X1, X22
	0x03644F48 B 0x3644FAC
	0x03644F4C ADRP X0, 0xAB1000
	0x03644F50 LDR X0, [X0 + 0xC48]
	0x03644F54 BL 0x1C16D08
	0x03644F58 BL 0x19903D0
	0x03644F5C MOV X0, X31
	0x03644F60 BL 0x33387A0
	0x03644F64 MOV X1, X0
	0x03644F68 ADD X0, X31, 0xC
	0x03644F6C B 0x3644F90
	0x03644F70 ADRP X0, 0xAB1000
	0x03644F74 LDR X0, [X0 + 0xC48]
	0x03644F78 BL 0x1C16D08
	0x03644F7C BL 0x19903D0
	0x03644F80 MOV X0, X31
	0x03644F84 BL 0x33387A0
	0x03644F88 MOV X1, X0
	0x03644F8C ADD X0, X31, 0x8
	0x03644F90 MOV X2, X31
	0x03644F94 BL 0x337B824
	0x03644F98 MOV X20, X0
	0x03644F9C ADRP X0, 0xAF8000
	0x03644FA0 LDR X0, [X0 + 0x4C8]
	0x03644FA4 BL 0x1C16D08
	0x03644FA8 MOV X1, X20
	0x03644FAC MOV X2, X31
	0x03644FB0 BL 0x32094D4
	0x03644FB4 B 0x3644F0C
	0x03644FB8 STP X30, X21, [X31 - 0x20]!
	0x03644FBC STP X20, X19, [X31 + 0x10]
	0x03644FC0 LDR X8, [X0 + 0x38]
	0x03644FC4 CBZ X8, 0x3645050
	0x03644FC8 LDR W8, [X8 + 0x10]
	0x03644FCC LDR W9, [X0 + 0x40]
	0x03644FD0 MOV X19, X0
	0x03644FD4 SUB W8, W8, W9
	0x03644FD8 CMP W8, 0x3
	0x03644FDC MOVZ W9, 0x3
	0x03644FE0 CSEL W21, W8, W9, LT
	0x03644FE4 CMP W21, 0x1
	0x03644FE8 B.LT 0x364503C
	0x03644FEC MOV W20, W31
	0x03644FF0 MOV X0, X19
	0x03644FF4 BL 0x3641BB0
	0x03644FF8 AND W8, W0, 0xFFFF
	0x03644FFC SUB W8, W8, 0x30
	0x03645000 CMP W8, 0x8
	0x03645004 B.CS 0x3645040
	0x03645008 LDR W9, [X19 + 0x40]
	0x0364500C ADD W20, W8, W20, 0x3, LSL
	0x03645010 LDRB W8, [X19 + 0x81]
	0x03645014 CMP W20, 0x1F
	0x03645018 CSET W10, GT
	0x0364501C ADD W9, W9, 0x1
	0x03645020 AND W8, W8, W10, 0x0
	0x03645024 STR W9, [X19 + 0x40]
	0x03645028 TBNZ X8, 0x0, 0x3645040
	0x0364502C CMP W21, 0x2
	0x03645030 SUB W21, W21, 0x1
	0x03645034 B.GE 0x3644FF0
	0x03645038 B 0x3645040
	0x0364503C MOV W20, W31
	0x03645040 AND W0, W20, 0xFF
	0x03645044 LDP X20, X19, [X31 + 0x10]
	0x03645048 LDP X30, X21, [X31], #0x20
	0x0364504C RET
	0x03645050 BL 0x1C16F20
	0x03645054 STP X30, X23, [X31 - 0x30]!
	0x03645058 STP X22, X21, [X31 + 0x10]
	0x0364505C STP X20, X19, [X31 + 0x20]
	0x03645060 ADRP X20, 0xD9B000
	0x03645064 LDRB W8, [X20 + 0x58A]
	0x03645068 MOV W21, W1
	0x0364506C MOV X19, X0
	0x03645070 TBNZ X8, 0x0, 0x3645088
	0x03645074 ADRP X0, 0xAF6000
	0x03645078 LDR X0, [X0 + 0x808]
	0x0364507C BL 0x1C16CF4
	0x03645080 MOVZ W8, 0x1
	0x03645084 STRB W8, [X20 + 0x58A]
	0x03645088 LDR X8, [X19 + 0x38]
	0x0364508C CBZ X8, 0x3645184
	0x03645090 LDR W8, [X8 + 0x10]
	0x03645094 LDR W9, [X19 + 0x40]
	0x03645098 SUB W8, W8, W9
	0x0364509C CMP W8, W21
	0x036450A0 B.GE 0x36450E0
	0x036450A4 CMP W21, 0x1
	0x036450A8 B.LT 0x364516C
	0x036450AC ADRP X0, 0xAF7000
	0x036450B0 LDR X0, [X0 + 0x588]
	0x036450B4 BL 0x1C16D08
	0x036450B8 MOV X1, X0
	0x036450BC MOV X0, X19
	0x036450C0 BL 0x3643360
	0x036450C4 MOV X19, X0
	0x036450C8 ADRP X0, 0xAF7000
	0x036450CC LDR X0, [X0 + 0x590]
	0x036450D0 BL 0x1C16D08
	0x036450D4 MOV X1, X0
	0x036450D8 MOV X0, X19
	0x036450DC BL 0x1C16DEC
	0x036450E0 CMP W21, 0x1
	0x036450E4 B.LT 0x364516C
	0x036450E8 ADRP X23, 0xAF6000
	0x036450EC LDR X23, [X23 + 0x808]
	0x036450F0 MOV W20, W31
	0x036450F4 ADD W22, W21, 0x1
	0x036450F8 MOV X0, X19
	0x036450FC BL 0x3643D54
	0x03645100 LDR X8, [X23]
	0x03645104 MOV W21, W0
	0x03645108 LDR W9, [X8 + 0xE0]
	0x0364510C CBNZ W9, 0x3645118
	0x03645110 MOV X0, X8
	0x03645114 BL 0x1C16DFC
	0x03645118 AND W8, W21, 0xFFFF
	0x0364511C SUB W9, W8, 0x30
	0x03645120 CMP W9, 0xA
	0x03645124 B.CC 0x3645158
	0x03645128 SUB W9, W8, 0x61
	0x0364512C CMP W9, 0x5
	0x03645130 B.HI 0x364513C
	0x03645134 SUB W9, W8, 0x57
	0x03645138 B 0x3645158
	0x0364513C AND W9, W21, 0xFFFF
	0x03645140 CMP W9, 0x37
	0x03645144 B.CC 0x36450AC
	0x03645148 SUB W9, W8, 0x41
	0x0364514C CMP W9, 0x6
	0x03645150 B.CS 0x36450AC
	0x03645154 SUB W9, W8, 0x37
	0x03645158 SUB W22, W22, 0x1
	0x0364515C CMP W22, 0x2
	0x03645160 ADD W20, W9, W20, 0x4, LSL
	0x03645164 B.GE 0x36450F8
	0x03645168 B 0x3645170
	0x0364516C MOV W20, W31
	0x03645170 MOV W0, W20
	0x03645174 LDP X20, X19, [X31 + 0x20]
	0x03645178 LDP X22, X21, [X31 + 0x10]
	0x0364517C LDP X30, X23, [X31], #0x30
	0x03645180 RET
	0x03645184 BL 0x1C16F20
	0x03645188 AND W8, W0, 0xFFFF
	0x0364518C SUB W0, W8, 0x30
	0x03645190 CMP W0, 0xA
	0x03645194 B.CC 0x36451BC
	0x03645198 SUB W9, W8, 0x61
	0x0364519C CMP W9, 0x5
	0x036451A0 B.HI 0x36451AC
	0x036451A4 SUB W0, W8, 0x57
	0x036451A8 RET
	0x036451AC SUB W9, W8, 0x41
	0x036451B0 SUB W8, W8, 0x37
	0x036451B4 CMP W9, 0x6
	0x036451B8 CSINV W0, W8, W31, CC
	0x036451BC RET
	0x036451C0 STP X30, X19, [X31 - 0x10]!
	0x036451C4 LDR X8, [X0 + 0x38]
	0x036451C8 CBZ X8, 0x3645218
	0x036451CC LDR W8, [X8 + 0x10]
	0x036451D0 LDR W9, [X0 + 0x40]
	0x036451D4 MOV X19, X0
	0x036451D8 SUB W8, W8, W9
	0x036451DC CMP W8, 0x0
	0x036451E0 B.LE 0x364521C
	0x036451E4 MOV X0, X19
	0x036451E8 BL 0x3643D54
	0x036451EC SUB W8, W0, 0x61
	0x036451F0 AND W8, W8, 0xFFFF
	0x036451F4 SUB W9, W0, 0x20
	0x036451F8 CMP W8, 0x19
	0x036451FC CSEL W8, W0, W9, HI
	0x03645200 AND W8, W8, 0xFFFF
	0x03645204 SUB W0, W8, 0x40
	0x03645208 ANDS W31, W0, 0xFFE0
	0x0364520C B.NE 0x3645228
	0x03645210 LDP X30, X19, [X31], #0x10
	0x03645214 RET
	0x03645218 BL 0x1C16F20
	0x0364521C ADRP X0, 0xAF7000
	0x03645220 LDR X0, [X0 + 0x598]
	0x03645224 B 0x3645230
	0x03645228 ADRP X0, 0xAF7000
	0x0364522C LDR X0, [X0 + 0x5A0]
	0x03645230 BL 0x1C16D08
	0x03645234 MOV X1, X0
	0x03645238 MOV X0, X19
	0x0364523C BL 0x3643360
	0x03645240 MOV X19, X0
	0x03645244 ADRP X0, 0xAF7000
	0x03645248 LDR X0, [X0 + 0x5A8]
	0x0364524C BL 0x1C16D08
	0x03645250 MOV X1, X0
	0x03645254 MOV X0, X19
	0x03645258 BL 0x1C16DEC
	0x0364525C CMP W1, 0x40
	0x03645260 MOVZ W0, 0x1
	0x03645264 B.EQ 0x364527C
	0x03645268 CMP W1, 0x100
	0x0364526C B.EQ 0x364527C
	0x03645270 CMP W1, 0x200
	0x03645274 B.EQ 0x364527C
	0x03645278 MOV W0, W31
	0x0364527C RET
	0x03645280 SUB W8, W0, 0x41
	0x03645284 AND W8, W8, 0xFFFF

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xD9D000
	010 Move W8, [X20+1416]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xAF8000
	017 Move X0, [X0+2272]
	018 Call 0x1C17CF4
	019 Move X0, 0xAF9000
	020 Move X0, [X0+936]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1416], W8
	024 Move X8, [X19+56]
	025 Compare X8, 0
	026 JumpIfEqual {261}
	027 Move W8, [X8+16]
	028 Move W9, [X19+64]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, X19
	031 Call RegexParser.RightChar, X0
	032 Move W21, [X19+64]
	033 And W8, W0, 0xFFFF
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, [X19+56]
	036 Compare X8, 0
	037 JumpIfEqual {261}
	038 Move W8, [X8+16]
	039 Subtract W8, W8, W21
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Add W8, W21, 1
	042 Move X0, X19
	043 Move [X19+64], W8
	044 Call RegexParser.RightChar, X0
	045 Subtract W8, W0, 48
	046 And W8, W8, 0xFFFF
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, 0xAF8000
	049 Move X8, [X8+2272]
	050 Move W20, W0
	051 Move X0, [X8]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move W0, W20
	057 Move X1, X31
	058 Call RegexCharClass.IsWordChar, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {237}
	063 Move X0, X19
	064 Call RegexParser.ScanCapname, X0
	065 Move X8, [X19+56]
	066 Compare X8, 0
	067 JumpIfEqual {261}
	068 Move W8, [X8+16]
	069 Move W9, [X19+64]
	070 Subtract W8, W8, W9
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X20, X0
	073 Move X0, X19
	074 Call RegexParser.RightCharMoveRight, X0
	075 And W8, W0, 0xFFFF
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, [X19+104]
	078 Compare X0, 0
	079 JumpIfEqual {237}
	080 Move X8, [X0]
	081 Move X1, X20
	082 Move X9, [X8+696]
	083 Move X2, [X8+704]
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {237}
	089 Move W21, [X19+128]
	090 Move X0, X19
	091 Move X1, X20
	092 Call RegexParser.CaptureSlotFromName, X0, X1
	093 Move X8, 0xAF9000
	094 Move X8, [X8+936]
	095 Move W20, W0
	096 Move X8, [X8]
	097 Move X0, X8
	098 Subtract W9, W0, 48
	099 And W9, W9, 0xFFFF
	100 NotImplemented "Instruction CMP not yet implemented."
	101 And W8, W0, 0xFFFF
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Subtract W8, W8, 36
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X9, -44748800
	106 Add X9, X9, 1230
	107 NotImplemented "Instruction ADR not yet implemented."
	108 Move W11, [X9]
	109 Add X10, X10, X11
	110 Move W20, W31
	111 CallNoReturn X10
	112 Move W20, [X19+128]
	113 Add W8, W21, 1
	114 Move [X19+64], W8
	115 Move W9, [X19+129]
	116 Move TEMP, X9
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfEqual {150}
	120 Move X0, X19
	121 Call RegexParser.ScanDecimal, X0
	122 Move W20, W0
	123 Move X0, X19
	124 Call RegexParser.ScanDecimal, X0
	125 Move X8, [X19+56]
	126 Compare X8, 0
	127 JumpIfEqual {261}
	128 Move W8, [X8+16]
	129 Move W9, [X19+64]
	130 Subtract W8, W8, W9
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move W20, W0
	133 Move X0, X19
	134 Call RegexParser.RightCharMoveRight, X0
	135 And W8, W0, 0xFFFF
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X0, X19
	138 Move W1, W20
	139 Call RegexParser.IsCaptureSlot, X0, X1
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {237}
	144 Move W21, [X19+128]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move TEMP, 0
	148 Not TEMP
	149 Move W20, TEMP
	150 Subtract W20, W8, 48
	151 Add W8, W21, 1
	152 Move X0, X19
	153 Move W1, W20
	154 Move [X19+64], W8
	155 Call RegexParser.IsCaptureSlot, X0, X1
	156 Move TEMP, X0
	157 And TEMP, TEMP, 1
	158 Compare TEMP, 1
	159 JumpIfEqual {215}
	160 Move TEMP, 0
	161 Not TEMP
	162 Move W22, TEMP
	163 Move W23, W21
	164 Move TEMP, 3
	165 Not TEMP
	166 Move W20, TEMP
	167 Move TEMP, 1
	168 Not TEMP
	169 Move W20, TEMP
	170 Move TEMP, 2
	171 Not TEMP
	172 Move W20, TEMP
	173 Add W8, W21, 1
	174 Move W21, [X19+128]
	175 Move [X19+64], W8
	176 Move X8, 0xAF8000
	177 Move X8, [X8+936]
	178 Move X0, [X8]
	179 Call 0x1C17F10
	180 Move X1, X31
	181 Move X19, X0
	182 Call Object..ctor, X0
	183 Move W8, 13
	184 Move [X19+52], W21
	185 Move [X19+16], W8
	186 Move [X19+44], W20
	187 Move X8, [X19+56]
	188 Compare X8, 0
	189 JumpIfEqual {261}
	190 Move W8, [X8+16]
	191 Move W9, [X19+64]
	192 Subtract W8, W8, W9
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move X0, X19
	195 Call RegexParser.RightChar, X0
	196 Subtract W8, W0, 48
	197 And W8, W8, 0xFFFF
	198 NotImplemented "Instruction CMP not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 And W8, W0, 0xFFFF
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move W8, [X19+64]
	203 And W9, W0, 0xFFFF
	204 NotImplemented "Instruction MADD not yet implemented."
	205 Subtract W20, W9, 48
	206 Add W8, W8, 1
	207 Move X0, X19
	208 Move W1, W20
	209 Move [X19+64], W8
	210 Call RegexParser.IsCaptureSlot, X0, X1
	211 Move TEMP, X0
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfNotEqual {187}
	215 Move W23, [X19+64]
	216 Move W22, W20
	217 Move W24, 0xCCCC
	218 NotImplemented "Instruction MOVK not yet implemented."
	219 Move W25, 10
	220 Move [X19+64], W23
	221 Move TEMP, X22
	222 And TEMP, TEMP, -2147483648
	223 Compare TEMP, -2147483648
	224 JumpIfEqual {237}
	225 Move X8, 0xAF8000
	226 Move W20, [X19+128]
	227 Move X8, [X8+936]
	228 Move X0, [X8]
	229 Call 0x1C17F10
	230 Move X1, X31
	231 Move X19, X0
	232 Call Object..ctor, X0
	233 Move W8, 13
	234 Move [X19+52], W20
	235 Move [X19+16], W8
	236 Move [X19+44], W22
	237 Move [X19+64], W21
	238 Move W20, [X19+128]
	239 Move X8, 0xAF8000
	240 Move X8, [X8+936]
	241 Move X0, [X8]
	242 Call 0x1C17F10
	243 Move X1, X31
	244 Move X19, X0
	245 Call Object..ctor, X0
	246 Move W8, 9
	247 Move W9, 36
	248 Move [X19+52], W20
	249 Move [X19+16], W8
	250 NotImplemented "Instruction STRH not yet implemented."
	251 Move X0, X19
	252 Move X20, [X31+48]
	253 Move X19, [X31+56]
	254 Move X22, [X31+32]
	255 Move X21, [X31+40]
	256 Move X24, [X31+16]
	257 Move X23, [X31+24]
	258 Move X30, [X31+64]
	259 Move X25, [X31+72]
	260 Return X0
	261 Call 0x1C17F20
	262 Move X0, 0xAF8000
	263 Move X0, [X0+1336]
	264 Call 0x1C17D08
	265 Move X1, X0
	266 Move X0, X19
	267 Call RegexParser.MakeException, X0, X1
	268 Move X19, X0
	269 Move X0, 0xAF8000
	270 Move X0, [X0+1352]
	271 Call 0x1C17D08
	272 Move X1, X0
	273 Move X0, X19
	274 Call 0x1C17DEC

Method: System.String ScanCapname()

Disassembly:
	0x03645594 B 0x36455AC
	0x03645598 LDR X8, [X9 + 0x20]
	0x0364559C MOV X1, X19
	0x036455A0 LDR X8, [X8 + 0xC0]
	0x036455A4 LDR X2, [X8 + 0x70]
	0x036455A8 BL 0x301BF90
	0x036455AC LDP X20, X19, [X31 + 0x20]
	0x036455B0 LDP X22, X21, [X31 + 0x10]
	0x036455B4 LDR X30, [X31], #0x30
	0x036455B8 RET
	0x036455BC BL 0x1C16F20
	0x036455C0 SUB X31, X31, 0x70
	0x036455C4 STP X29, X30, [X31 + 0x10]
	0x036455C8 STP X28, X27, [X31 + 0x20]
	0x036455CC STP X26, X25, [X31 + 0x30]
	0x036455D0 STP X24, X23, [X31 + 0x40]
	0x036455D4 STP X22, X21, [X31 + 0x50]
	0x036455D8 STP X20, X19, [X31 + 0x60]
	0x036455DC ADRP X20, 0xD9B000
	0x036455E0 LDRB W8, [X20 + 0x591]
	0x036455E4 MOV X19, X0
	0x036455E8 TBNZ X8, 0x0, 0x3645690
	0x036455EC ADRP X0, 0xAF7000
	0x036455F0 LDR X0, [X0 + 0x5B0]
	0x036455F4 BL 0x1C16CF4
	0x036455F8 ADRP X0, 0xAF7000
	0x036455FC LDR X0, [X0 + 0x5B8]
	0x03645600 BL 0x1C16CF4
	0x03645604 ADRP X0, 0xAB7000
	0x03645608 LDR X0, [X0 + 0x9E8]
	0x0364560C BL 0x1C16CF4
	0x03645610 ADRP X0, 0xADE000
	0x03645614 LDR X0, [X0 + 0xDB8]
	0x03645618 BL 0x1C16CF4
	0x0364561C ADRP X0, 0xADB000
	0x03645620 LDR X0, [X0 + 0xF80]
	0x03645624 BL 0x1C16CF4
	0x03645628 ADRP X0, 0xAAE000
	0x0364562C LDR X0, [X0 + 0xE18]
	0x03645630 BL 0x1C16CF4
	0x03645634 ADRP X0, 0xAAF000
	0x03645638 LDR X0, [X0 + 0xE58]
	0x0364563C BL 0x1C16CF4
	0x03645640 ADRP X0, 0xAAE000
	0x03645644 LDR X0, [X0 + 0x758]
	0x03645648 BL 0x1C16CF4
	0x0364564C ADRP X0, 0xAAF000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xD9C000
	007 Move W8, [X19+1417]
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAF7000
	014 Move X0, [X0+2272]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1417], W8
	018 Move X22, 0xAF7000
	019 Move W19, [X20+64]
	020 Move X22, [X22+2272]
	021 Move X0, [X20+56]
	022 Compare X0, 0
	023 JumpIfEqual {60}
	024 Move W9, [X0+16]
	025 Move W8, [X20+64]
	026 Subtract W9, W9, W8
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X20
	029 Call RegexParser.RightCharMoveRight, X0
	030 Move X8, [X22]
	031 Move W21, W0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move W0, W21
	038 Move X1, X31
	039 Call RegexCharClass.IsWordChar, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {21}
	044 Move W8, [X20+64]
	045 Move X0, [X20+56]
	046 Subtract W8, W8, 1
	047 Move [X20+64], W8
	048 Compare X0, 0
	049 JumpIfEqual {60}
	050 Subtract W2, W8, W19
	051 Move W1, W19
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X3, X31
	057 Move X30, [X31+48]
	058 Call String.Substring, X0, X1, X2
	059 Return X0
	060 Call 0x1C17F20

Method: System.Char ScanOctal()

Disassembly:
	0x03645FB8 CBZ X19, 0x3646044
	0x03645FBC LDR X8, [X19]
	0x03645FC0 SUB W1, W26, W1
	0x03645FC4 MOV X0, X19
	0x03645FC8 LDP X9, X2, [X8 + 0x198]
	0x03645FCC BLR X9
	0x03645FD0 CBZ X20, 0x3646044
	0x03645FD4 MOV X2, X0
	0x03645FD8 MOV X3, X1
	0x03645FDC MOV X0, X20
	0x03645FE0 MOV X1, X2
	0x03645FE4 MOV X2, X3
	0x03645FE8 MOV X3, X31
	0x03645FEC BL 0x3233FF0
	0x03645FF0 LDR X0, [X21 + 0x18]
	0x03645FF4 ADD W22, W22, 0x1
	0x03645FF8 CBNZ X0, 0x3645F3C
	0x03645FFC B 0x3646044
	0x03646000 CBZ X19, 0x3646044
	0x03646004 MOV X0, X19
	0x03646008 MOV X1, X31
	0x0364600C BL 0x3631184
	0x03646010 CBNZ X20, 0x3645FD4
	0x03646014 B 0x3646044
	0x03646018 CBZ X19, 0x3646044
	0x0364601C MOV X0, X19
	0x03646020 MOV X1, X31
	0x03646024 BL 0x362F6DC
	0x03646028 CBNZ X20, 0x3645FD4
	0x0364602C B 0x3646044
	0x03646030 CBZ X19, 0x3646044
	0x03646034 MOV X0, X19
	0x03646038 MOV X1, X31
	0x0364603C BL 0x362F654
	0x03646040 CBNZ X20, 0x3645FD4
	0x03646044 BL 0x1C16F20
	0x03646048 LDP X20, X19, [X31 + 0x40]
	0x0364604C LDP X22, X21, [X31 + 0x30]
	0x03646050 LDP X24, X23, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+56]
	006 Compare X8, 0
	007 JumpIfEqual {43}
	008 Move W8, [X8+16]
	009 Move W9, [X0+64]
	010 Move X19, X0
	011 Subtract W8, W8, W9
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W9, 3
	014 NotImplemented "Instruction CSEL not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W20, W31
	017 Move X0, X19
	018 Call RegexParser.RightChar, X0
	019 And W8, W0, 0xFFFF
	020 Subtract W8, W8, 48
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W9, [X19+64]
	023 Add W20, W8, W20
	024 Move W8, [X19+129]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Add W9, W9, 1
	028 And W8, W8, W10
	029 Move [X19+64], W9
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {37}
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract W21, W21, 1
	036 Move W20, W31
	037 And W0, W20, 255
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0
	043 Call 0x1C17F20

Method: System.Int32 ScanDecimal()

Disassembly:
	0x03644D80 LDR X8, [X22]
	0x03644D84 MOV X1, X0
	0x03644D88 MOV X0, X22
	0x03644D8C LDR X9, [X8 + 0x2D8]
	0x03644D90 LDR X2, [X8 + 0x2E0]
	0x03644D94 BLR X9
	0x03644D98 CBZ X0, 0x3644EFC
	0x03644D9C LDR X8, [X0]
	0x03644DA0 LDR X1, [X25]
	0x03644DA4 LDR X8, [X8 + 0x40]
	0x03644DA8 LDR X9, [X1 + 0x40]
	0x03644DAC CMP X8, X9
	0x03644DB0 B.NE 0x3644F34
	0x03644DB4 BL 0x1C16E08
	0x03644DB8 LDR W8, [X0]
	0x03644DBC CMP W8, W26
	0x03644DC0 B.GE 0x3644DC8
	0x03644DC4 MOV W24, W21
	0x03644DC8 LDR W8, [X19 + 0x40]
	0x03644DCC LDR X9, [X19 + 0x38]
	0x03644DD0 ADD W8, W8, 0x1
	0x03644DD4 STR W8, [X19 + 0x40]
	0x03644DD8 CBZ X9, 0x3644EFC
	0x03644DDC LDR W9, [X9 + 0x10]
	0x03644DE0 CMP W9, W8
	0x03644DE4 B.EQ 0x3644E18
	0x03644DE8 MOV X0, X19
	0x03644DEC BL 0x3641BB0
	0x03644DF0 SUB W8, W0, 0x30
	0x03644DF4 AND W8, W8, 0xFFFF
	0x03644DF8 CMP W8, 0x9
	0x03644DFC B.HI 0x3644E18
	0x03644E00 LDR W8, [X19 + 0x58]
	0x03644E04 MUL W9, W21, W27
	0x03644E08 ADD W9, W9, W0, UXTH
	0x03644E0C SUB W21, W9, 0x30
	0x03644E10 CMP W21, W8
	0x03644E14 B.LE 0x3644D58
	0x03644E18 TBNZ X24, 0x1F, 0x3644E5C
	0x03644E1C TBNZ X20, 0x0, 0x3644EA4
	0x03644E20 ADRP X8, 0xAF8000
	0x03644E24 LDR W20, [X19 + 0x80]
	0x03644E28 LDR X8, [X8 + 0x3A8]
	0x03644E2C LDR X0, [X8]
	0x03644E30 BL 0x1C16F10
	0x03644E34 MOV X1, X31
	0x03644E38 MOV X19, X0
	0x03644E3C BL 0x33BDD8C
	0x03644E40 MOVZ W8, 0xD
	0x03644E44 STR W20, [X19 + 0x34]
	0x03644E48 STR W8, [X19 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X9, [X0+56]
	007 Compare X9, 0
	008 JumpIfEqual {32}
	009 Move W8, [X0+64]
	010 Move W21, 0xCCCC
	011 Move X19, X0
	012 Move W20, W31
	013 NotImplemented "Instruction MOVK not yet implemented."
	014 Move W22, 10
	015 Move W9, [X9+16]
	016 Subtract W8, W9, W8
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, X19
	019 Call RegexParser.RightChar, X0
	020 Subtract W8, W0, 48
	021 And W10, W8, 0xFFFF
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move W8, [X19+64]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add W8, W8, 1
	026 Move [X19+64], W8
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X9, [X19+56]
	029 NotImplemented "Instruction MADD not yet implemented."
	030 Compare X9, 0
	031 JumpIfNotEqual {15}
	032 Call 0x1C17F20
	033 Move W0, W20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return X0
	040 Move X0, 0xAF9000
	041 Move X0, [X0+1336]
	042 Call 0x1C17D08
	043 Move X1, X0
	044 Move X0, X19
	045 Call RegexParser.MakeException, X0, X1
	046 Move X19, X0
	047 Move X0, 0xAF9000
	048 Move X0, [X0+1344]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Call 0x1C17DEC

Method: System.Char ScanHex(System.Int32 c)

Disassembly:
	0x03646054 LDP X26, X25, [X31 + 0x10]
	0x03646058 LDR X30, [X31], #0x50
	0x0364605C RET
	0x03646060 SUB X31, X31, 0x70
	0x03646064 STR X30, [X31 + 0x10]
	0x03646068 STP X28, X27, [X31 + 0x20]
	0x0364606C STP X26, X25, [X31 + 0x30]
	0x03646070 STP X24, X23, [X31 + 0x40]
	0x03646074 STP X22, X21, [X31 + 0x50]
	0x03646078 STP X20, X19, [X31 + 0x60]
	0x0364607C ADRP X22, 0xD9A000
	0x03646080 LDRB W8, [X22 + 0x5AB]
	0x03646084 MOV X19, X2
	0x03646088 MOV X20, X1
	0x0364608C MOV X21, X0
	0x03646090 TBNZ X8, 0x0, 0x36460D8
	0x03646094 ADRP X0, 0xAAE000
	0x03646098 LDR X0, [X0 + 0x1B8]
	0x0364609C BL 0x1C16CF4
	0x036460A0 ADRP X0, 0xAAE000
	0x036460A4 LDR X0, [X0 + 0xE28]
	0x036460A8 BL 0x1C16CF4
	0x036460AC ADRP X0, 0xAD5000
	0x036460B0 LDR X0, [X0 + 0xB58]
	0x036460B4 BL 0x1C16CF4
	0x036460B8 ADRP X0, 0xAD7000
	0x036460BC LDR X0, [X0 + 0xF38]
	0x036460C0 BL 0x1C16CF4
	0x036460C4 ADRP X0, 0xAE0000
	0x036460C8 LDR X0, [X0 + 0xFD8]
	0x036460CC BL 0x1C16CF4
	0x036460D0 MOVZ W8, 0x1
	0x036460D4 STRB W8, [X22 + 0x5AB]
	0x036460D8 STP X31, X31, [X31]
	0x036460DC LDR X0, [X21 + 0x18]
	0x036460E0 CBZ X0, 0x3646288
	0x036460E4 LDR W8, [X0 + 0x18]
	0x036460E8 SUBS W22, W8, 0x1
	0x036460EC B.MI 0x3646268
	0x036460F0 ADRP X23, 0xAD7000
	0x036460F4 ADRP X25, 0xAAE000
	0x036460F8 ADRP X26, 0xAE0000
	0x036460FC ADRP X28, 0xAD5000
	0x03646100 LDR X23, [X23 + 0xF38]
	0x03646104 LDR X25, [X25 + 0x1B8]
	0x03646108 LDR X26, [X26 + 0xFD8]
	0x0364610C LDR X28, [X28 + 0xB58]
	0x03646110 ADRP X24, 0xFFFFFFFFFD551000
	0x03646114 ADD X24, X24, 0x4F2
	0x03646118 MOVN W27, 0x4
	0x0364611C LDR X2, [X23]
	0x03646120 MOV W1, W22
	0x03646124 BL 0x2FDC41C
	0x03646128 MOV W1, W0
	0x0364612C TBNZ X0, 0x1F, 0x3646148
	0x03646130 LDR X0, [X21 + 0x10]
	0x03646134 CBZ X0, 0x3646288
	0x03646138 LDR X2, [X28]
	0x0364613C BL 0x301BCCC
	0x03646140 CBNZ X20, 0x36461C4
	0x03646144 B 0x3646288
	0x03646148 ADDS W31, W1, 0x5
	0x0364614C B.LE 0x3646194
	0x03646150 ORN W8, W31, W1, 0x0
	0x03646154 CMP W8, 0x3
	0x03646158 B.HI 0x3646218
	0x0364615C ADR X9, 0x10
	0x03646160 LDRB W10, [X24, X8, LSL]
	0x03646164 ADD X9, X9, X10, 0x2, LSL
	0x03646168 BR X9
	0x0364616C CBZ X19, 0x3646288
	0x03646170 CBZ X20, 0x3646288
	0x03646174 LDR W10, [X20 + 0x1C]
	0x03646178 LDR X1, [X19 + 0x18]
	0x0364617C LDR X8, [X20 + 0x10]
	0x03646180 LDR X9, [X25]
	0x03646184 ADD W10, W10, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xD9B000
	008 Move W8, [X20+1418]
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAF6000
	016 Move X0, [X0+2056]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1418], W8
	020 Move X8, [X19+56]
	021 Compare X8, 0
	022 JumpIfEqual {78}
	023 Move W8, [X8+16]
	024 Move W9, [X19+64]
	025 Subtract W8, W8, W9
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, 0xAF7000
	029 Move X0, [X0+1416]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call RegexParser.MakeException, X0, X1
	034 Move X19, X0
	035 Move X0, 0xAF7000
	036 Move X0, [X0+1424]
	037 Call 0x1C17D08
	038 Move X1, X0
	039 Move X0, X19
	040 Call 0x1C17DEC
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X23, 0xAF6000
	043 Move X23, [X23+2056]
	044 Move W20, W31
	045 Add W22, W21, 1
	046 Move X0, X19
	047 Call RegexParser.RightCharMoveRight, X0
	048 Move X8, [X23]
	049 Move W21, W0
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 And W8, W21, 0xFFFF
	056 Subtract W9, W8, 48
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Subtract W9, W8, 97
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Subtract W9, W8, 87
	061 And W9, W21, 0xFFFF
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Subtract W9, W8, 65
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Subtract W9, W8, 55
	066 Subtract W22, W22, 1
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add W20, W9, W20
	069 Move W20, W31
	070 Move W0, W20
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move X30, [X31+48]
	076 Move X23, [X31+56]
	077 Return X0
	078 Call 0x1C17F20

Method: System.Int32 HexDigit(System.Char ch)

Disassembly:
	0x03646188 STR W10, [X20 + 0x1C]
	0x0364618C CBNZ X8, 0x36461E0
	0x03646190 B 0x3646288
	0x03646194 CBZ X19, 0x3646288
	0x03646198 LDR X8, [X19]
	0x0364619C SUB W1, W27, W1
	0x036461A0 MOV X0, X19
	0x036461A4 LDP X9, X2, [X8 + 0x198]
	0x036461A8 BLR X9
	0x036461AC LDR X8, [X26]
	0x036461B0 STP X0, X1, [X31]
	0x036461B4 ADD X0, X31, 0x0
	0x036461B8 MOV X1, X8
	0x036461BC BL 0x25BED38

ISIL:
	001 And W8, W0, 0xFFFF
	002 Subtract W0, W8, 48
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Subtract W9, W8, 97
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Subtract W0, W8, 87
	007 Return X0
	008 Subtract W9, W8, 65
	009 Subtract W8, W8, 55
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSINV not yet implemented."
	012 Return X0

Method: System.Char ScanControl()

Disassembly:
	0x036461C0 CBZ X20, 0x3646288
	0x036461C4 LDR W10, [X20 + 0x1C]
	0x036461C8 LDR X8, [X20 + 0x10]
	0x036461CC LDR X9, [X25]
	0x036461D0 ADD W10, W10, 0x1
	0x036461D4 STR W10, [X20 + 0x1C]
	0x036461D8 CBZ X8, 0x3646288
	0x036461DC MOV X1, X0
	0x036461E0 LDRSW X10, [X20 + 0x18]
	0x036461E4 LDR W11, [X8 + 0x18]
	0x036461E8 CMP W10, W11
	0x036461EC B.CS 0x3646204
	0x036461F0 ADD W9, W10, 0x1
	0x036461F4 ADD X8, X8, X10, 0x3, LSL
	0x036461F8 STR W9, [X20 + 0x18]
	0x036461FC STR X1, [X8 + 0x20]
	0x03646200 B 0x3646218
	0x03646204 LDR X8, [X9 + 0x20]
	0x03646208 MOV X0, X20
	0x0364620C LDR X8, [X8 + 0xC0]
	0x03646210 LDR X2, [X8 + 0x70]
	0x03646214 BL 0x301BF90
	0x03646218 SUBS W22, W22, 0x1
	0x0364621C B.MI 0x3646268
	0x03646220 LDR X0, [X21 + 0x18]
	0x03646224 CBNZ X0, 0x364611C
	0x03646228 B 0x3646288
	0x0364622C CBZ X19, 0x3646288
	0x03646230 MOV X0, X19
	0x03646234 MOV X1, X31
	0x03646238 BL 0x3631184
	0x0364623C B 0x36461AC
	0x03646240 CBZ X19, 0x3646288
	0x03646244 MOV X0, X19
	0x03646248 MOV X1, X31
	0x0364624C BL 0x362F6DC
	0x03646250 B 0x36461AC
	0x03646254 CBZ X19, 0x3646288
	0x03646258 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W8, [X8+16]
	007 Move W9, [X0+64]
	008 Move X19, X0
	009 Subtract W8, W8, W9
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move X0, X19
	012 Call RegexParser.RightCharMoveRight, X0
	013 Subtract W8, W0, 97
	014 And W8, W8, 0xFFFF
	015 Subtract W9, W0, 32
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CSEL not yet implemented."
	018 And W8, W8, 0xFFFF
	019 Subtract W0, W8, 64
	020 And W31, W0, 0xFFE0
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return X0
	024 Call 0x1C17F20
	025 Move X0, 0xAF7000
	026 Move X0, [X0+1432]
	027 Move X0, 0xAF7000
	028 Move X0, [X0+1440]
	029 Call 0x1C17D08
	030 Move X1, X0
	031 Move X0, X19
	032 Call RegexParser.MakeException, X0, X1
	033 Move X19, X0
	034 Move X0, 0xAF7000
	035 Move X0, [X0+1448]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X19
	039 Call 0x1C17DEC

Method: System.Boolean IsOnlyTopOption(System.Text.RegularExpressions.RegexOptions option)

Disassembly:
	0x0364625C MOV X1, X31
	0x03646260 BL 0x362F654
	0x03646264 B 0x36461AC
	0x03646268 LDP X20, X19, [X31 + 0x60]
	0x0364626C LDP X22, X21, [X31 + 0x50]
	0x03646270 LDP X24, X23, [X31 + 0x40]
	0x03646274 LDP X26, X25, [X31 + 0x30]
	0x03646278 LDP X28, X27, [X31 + 0x20]
	0x0364627C LDR X30, [X31 + 0x10]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W0, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W0, W31
	006 Return X0

Method: System.Void ScanOptions()

Disassembly:
	0x036457D8 BLR X10
	0x036457DC CBZ X0, 0x364579C
	0x036457E0 ADRP X23, 0xAAE000
	0x036457E4 ADRP X24, 0xADB000
	0x036457E8 LDR X23, [X23 + 0xE18]
	0x036457EC LDR X24, [X24 + 0xF80]
	0x036457F0 MOV X20, X0
	0x036457F4 MOV W22, W31
	0x036457F8 LDR X8, [X20]
	0x036457FC LDR X1, [X23]
	0x03645800 LDRH W9, [X8 + 0x12E]
	0x03645804 CBZ X9, 0x3645828
	0x03645808 LDR X10, [X8 + 0xB0]
	0x0364580C ADD X10, X10, 0x8
	0x03645810 LDUR X11, [X10 - 0x8]
	0x03645814 CMP X11, X1
	0x03645818 B.EQ 0x3645838
	0x0364581C SUBS X9, X9, 0x1
	0x03645820 ADD X10, X10, 0x10
	0x03645824 B.NE 0x3645810
	0x03645828 MOV X0, X20
	0x0364582C MOV W2, W31
	0x03645830 BL 0x1C5C788
	0x03645834 B 0x3645844
	0x03645838 LDRSW X9, [X10]
	0x0364583C ADD X8, X8, X9, 0x4, LSL
	0x03645840 ADD X0, X8, 0x138
	0x03645844 LDP X8, X1, [X0]
	0x03645848 MOV X0, X20
	0x0364584C BLR X8
	0x03645850 LDR X21, [X19 + 0x70]
	0x03645854 TBZ X0, 0x0, 0x36458FC
	0x03645858 LDR X8, [X20]
	0x0364585C LDR X1, [X24]
	0x03645860 LDRH W9, [X8 + 0x12E]
	0x03645864 CBZ X9, 0x3645888
	0x03645868 LDR X10, [X8 + 0xB0]
	0x0364586C ADD X10, X10, 0x8
	0x03645870 LDUR X11, [X10 - 0x8]
	0x03645874 CMP X11, X1
	0x03645878 B.EQ 0x3645898
	0x0364587C SUBS X9, X9, 0x1
	0x03645880 ADD X10, X10, 0x10
	0x03645884 B.NE 0x3645870
	0x03645888 MOV X0, X20
	0x0364588C MOV W2, W31
	0x03645890 BL 0x1C5C788
	0x03645894 B 0x36458A4
	0x03645898 LDRSW X9, [X10]
	0x0364589C ADD X8, X8, X9, 0x4, LSL
	0x036458A0 ADD X0, X8, 0x138
	0x036458A4 LDP X8, X1, [X0]
	0x036458A8 MOV X0, X20
	0x036458AC BLR X8
	0x036458B0 CBZ X21, 0x364579C
	0x036458B4 CBZ X0, 0x364579C
	0x036458B8 LDR X8, [X0]
	0x036458BC LDR X1, [X26]
	0x036458C0 LDR X8, [X8 + 0x40]
	0x036458C4 LDR X9, [X1 + 0x40]
	0x036458C8 CMP X8, X9
	0x036458CC B.NE 0x3645C14
	0x036458D0 BL 0x1C16E08
	0x036458D4 LDR W8, [X21 + 0x18]
	0x036458D8 CMP W22, W8
	0x036458DC B.CS 0x3645C18
	0x036458E0 LDR W8, [X0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0xD9C000
	009 Move W8, [X20+1419]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xAF7000
	016 Move X0, [X0+2056]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1419], W8
	020 Move X8, [X19+56]
	021 Compare X8, 0
	022 JumpIfEqual {67}
	023 Move X21, 0xAF7000
	024 Move W9, [X19+64]
	025 Move X21, [X21+2056]
	026 Move W24, W31
	027 Move W22, 1
	028 Move W23, 275
	029 Move W8, [X8+16]
	030 Subtract W8, W8, W9
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X19
	033 Call RegexParser.RightChar, X0
	034 And W8, W0, 0xFFFF
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W20, W0
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move W0, W20
	044 Call RegexParser.OptionFromCode, X0
	045 NotImplemented "Instruction EXTR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction LSLV not yet implemented."
	048 And W31, W8, W23
	049 Move W8, [X19+128]
	050 Move TEMP, X24
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {58}
	054 NotImplemented "Instruction BIC not yet implemented."
	055 Move [X19+128], W8
	056 Move W24, 1
	057 Move W24, W31
	058 Or W8, W8, W0
	059 Move W24, W31
	060 Move [X19+128], W8
	061 Move W9, [X19+64]
	062 Move X8, [X19+56]
	063 Add W9, W9, 1
	064 Move [X19+64], W9
	065 Compare X8, 0
	066 JumpIfNotEqual {29}
	067 Call 0x1C17F20
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Move X30, [X31+64]
	075 Return 

Method: System.Char ScanCharEscape()

Disassembly:
	0x03645404 LDR X0, [X0 + 0x3E8]
	0x03645408 BL 0x1C16CF4
	0x0364540C MOVZ W8, 0x1
	0x03645410 STRB W8, [X20 + 0x5A2]
	0x03645414 LDR X8, [X19 + 0x88]
	0x03645418 CBZ X8, 0x3645434
	0x0364541C LDR W8, [X8 + 0x18]
	0x03645420 LDP X20, X19, [X31 + 0x10]
	0x03645424 CMP W8, 0x0
	0x03645428 CSET W0, EQ
	0x0364542C LDR X30, [X31], #0x20
	0x03645430 RET
	0x03645434 BL 0x1C16F20
	0x03645438 STR X30, [X31 - 0x30]!
	0x0364543C STP X22, X21, [X31 + 0x10]
	0x03645440 STP X20, X19, [X31 + 0x20]
	0x03645444 ADRP X22, 0xD9B000
	0x03645448 LDRB W8, [X22 + 0x590]
	0x0364544C MOV W21, W2
	0x03645450 MOV X19, X1
	0x03645454 MOV X20, X0
	0x03645458 TBNZ X8, 0x0, 0x36454A0
	0x0364545C ADRP X0, 0xADE000
	0x03645460 LDR X0, [X0 + 0xDB8]
	0x03645464 BL 0x1C16CF4
	0x03645468 ADRP X0, 0xAAE000
	0x0364546C LDR X0, [X0 + 0x758]
	0x03645470 BL 0x1C16CF4
	0x03645474 ADRP X0, 0xAAF000
	0x03645478 LDR X0, [X0 + 0x1B8]
	0x0364547C BL 0x1C16CF4
	0x03645480 ADRP X0, 0xAAF000
	0x03645484 LDR X0, [X0 + 0x1C0]
	0x03645488 BL 0x1C16CF4
	0x0364548C ADRP X0, 0xAAF000
	0x03645490 LDR X0, [X0 + 0x1D0]
	0x03645494 BL 0x1C16CF4
	0x03645498 MOVZ W8, 0x1
	0x0364549C STRB W8, [X22 + 0x590]
	0x036454A0 LDR X0, [X20 + 0x68]
	0x036454A4 CBNZ X0, 0x36454F8
	0x036454A8 ADRP X8, 0xADE000
	0x036454AC LDR X8, [X8 + 0xDB8]
	0x036454B0 LDR X0, [X8]
	0x036454B4 BL 0x1C16F10
	0x036454B8 MOV X1, X31
	0x036454BC MOV X22, X0
	0x036454C0 BL 0x335A0A0
	0x036454C4 STR X22, [X20 + 0x68]
	0x036454C8 ADRP X8, 0xAAF000
	0x036454CC LDR X8, [X8 + 0x1D0]
	0x036454D0 LDR X0, [X8]
	0x036454D4 BL 0x1C16F10
	0x036454D8 ADRP X8, 0xAAF000
	0x036454DC LDR X8, [X8 + 0x1C0]
	0x036454E0 MOV X22, X0
	0x036454E4 LDR X1, [X8]
	0x036454E8 BL 0x301B7C4
	0x036454EC LDR X0, [X20 + 0x68]
	0x036454F0 STR X22, [X20 + 0x78]
	0x036454F4 CBZ X0, 0x36455BC
	0x036454F8 LDR X8, [X0]
	0x036454FC MOV X1, X19
	0x03645500 LDR X9, [X8 + 0x2B8]
	0x03645504 LDR X2, [X8 + 0x2C0]
	0x03645508 BLR X9
	0x0364550C TBNZ X0, 0x0, 0x36455AC
	0x03645510 ADRP X8, 0xAAE000
	0x03645514 LDR X22, [X20 + 0x68]
	0x03645518 LDR X8, [X8 + 0x758]
	0x0364551C ADD X1, X31, 0xC
	0x03645520 STR W21, [X31 + 0xC]
	0x03645524 LDR X0, [X8]
	0x03645528 BL 0x1C16E04
	0x0364552C CBZ X22, 0x36455BC
	0x03645530 LDR X8, [X22]
	0x03645534 MOV X2, X0
	0x03645538 MOV X0, X22
	0x0364553C MOV X1, X19
	0x03645540 LDR X9, [X8 + 0x278]
	0x03645544 LDR X3, [X8 + 0x280]
	0x03645548 BLR X9
	0x0364554C LDR X0, [X20 + 0x78]
	0x03645550 CBZ X0, 0x36455BC
	0x03645554 ADRP X9, 0xAAF000
	0x03645558 LDR X9, [X9 + 0x1B8]
	0x0364555C LDR W10, [X0 + 0x1C]
	0x03645560 LDR X8, [X0 + 0x10]
	0x03645564 LDR X9, [X9]
	0x03645568 ADD W10, W10, 0x1
	0x0364556C STR W10, [X0 + 0x1C]
	0x03645570 CBZ X8, 0x36455BC
	0x03645574 LDRSW X10, [X0 + 0x18]
	0x03645578 LDR W11, [X8 + 0x18]
	0x0364557C CMP W10, W11
	0x03645580 B.CS 0x3645598
	0x03645584 ADD W9, W10, 0x1
	0x03645588 ADD X8, X8, X10, 0x3, LSL
	0x0364558C STR W9, [X0 + 0x18]
	0x03645590 STR X19, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9C000
	005 Move W8, [X20+1420]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAF7000
	012 Move X0, [X0+2272]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1420], W8
	016 Move X0, X19
	017 Call RegexParser.RightCharMoveRight, X0
	018 And W8, W0, 0xFFF8
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction STRH not yet implemented."
	021 Move W8, [X19+64]
	022 Move X0, X19
	023 Subtract W8, W8, 1
	024 Move [X19+64], W8
	025 Call RegexParser.ScanOctal, X0
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return X0
	030 And W8, W0, 0xFFFF
	031 Subtract W8, W8, 97
	032 Move W20, W0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X9, -44748800
	035 Add X9, X9, 1238
	036 NotImplemented "Instruction ADR not yet implemented."
	037 Move W11, [X9]
	038 Add X10, X10, X11
	039 Move W0, 8
	040 CallNoReturn X10
	041 Move W0, 7
	042 Move X0, X19
	043 Call RegexParser.ScanControl, X0
	044 Move W0, 27
	045 Move W0, 12
	046 Move W0, 10
	047 Move W0, 13
	048 Move W0, 9
	049 Move W1, 4
	050 Move W0, 11
	051 Move W1, 2
	052 Move X0, X19
	053 Call RegexParser.ScanHex, X0, X1
	054 Move W8, [X19+129]
	055 Move TEMP, X8
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {99}
	059 Move X8, 0xAF7000
	060 Move X8, [X8+2272]
	061 Move X0, [X8]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move W0, W20
	067 Move X1, X31
	068 Call RegexCharClass.IsWordChar, X0
	069 Move W8, W0
	070 Move W0, W20
	071 Move TEMP, X8
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {26}
	075 Move X0, 0xAB1000
	076 Move X0, [X0+368]
	077 Call 0x1C17D08
	078 Call 0x19913D0
	079 Add X0, X31, 12
	080 Move X1, X31
	081 Call Char.ToString, X0
	082 Move X20, X0
	083 Move X0, 0xAF8000
	084 Move X0, [X0+1384]
	085 Call 0x1C17D08
	086 Move X1, X20
	087 Move X2, X31
	088 Call SR.Format, X0, X1
	089 Move X1, X0
	090 Move X0, X19
	091 Call RegexParser.MakeException, X0, X1
	092 Move X19, X0
	093 Move X0, 0xAF8000
	094 Move X0, [X0+1392]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X19
	098 Call 0x1C17DEC
	099 Move W0, W20

Method: System.String ParseProperty()

Disassembly:
	0x03645294 AND W9, W8, 0xFFFF
	0x03645298 CMP W9, 0x69
	0x0364529C B.HI 0x36452B4
	0x036452A0 CSET W8, EQ
	0x036452A4 CMP W9, 0x65
	0x036452A8 MOVZ W9, 0x100
	0x036452AC CSEL W0, W9, W8, EQ
	0x036452B0 RET
	0x036452B4 SUB W8, W8, 0x6D
	0x036452B8 AND W9, W8, 0xFFFF
	0x036452BC CMP W9, 0xB
	0x036452C0 B.HI 0x36452D8
	0x036452C4 ADRP X9, 0xFFFFFFFFFD552000
	0x036452C8 SXTH X8, W8
	0x036452CC ADD X9, X9, 0x5CC
	0x036452D0 LDR W0, [X9, X8, LSL #2]
	0x036452D4 RET
	0x036452D8 MOV W0, W31
	0x036452DC RET
	0x036452E0 SUB X31, X31, 0x50
	0x036452E4 STR X30, [X31 + 0x10]
	0x036452E8 STP X24, X23, [X31 + 0x20]
	0x036452EC STP X22, X21, [X31 + 0x30]
	0x036452F0 STP X20, X19, [X31 + 0x40]
	0x036452F4 ADRP X22, 0xD9B000
	0x036452F8 ADRP X24, 0xAAE000
	0x036452FC LDRB W8, [X22 + 0x58F]
	0x03645300 LDR X24, [X24 + 0x758]
	0x03645304 MOV W21, W2
	0x03645308 MOV W20, W1
	0x0364530C MOV X19, X0
	0x03645310 TBNZ X8, 0x0, 0x3645328
	0x03645314 ADRP X0, 0xAAE000
	0x03645318 LDR X0, [X0 + 0x758]
	0x0364531C BL 0x1C16CF4
	0x03645320 MOVZ W8, 0x1
	0x03645324 STRB W8, [X22 + 0x58F]
	0x03645328 LDR X0, [X24]
	0x0364532C LDR X22, [X19 + 0x60]
	0x03645330 ADD X1, X31, 0x1C
	0x03645334 STR W20, [X31 + 0x1C]
	0x03645338 BL 0x1C16E04
	0x0364533C CBZ X22, 0x36453E4
	0x03645340 LDR X8, [X22]
	0x03645344 MOV X1, X0
	0x03645348 MOV X0, X22
	0x0364534C LDR X9, [X8 + 0x2B8]
	0x03645350 LDR X2, [X8 + 0x2C0]
	0x03645354 BLR X9
	0x03645358 TBNZ X0, 0x0, 0x36453CC
	0x0364535C LDR X0, [X24]
	0x03645360 LDR X22, [X19 + 0x60]
	0x03645364 ADD X1, X31, 0x18
	0x03645368 STR W20, [X31 + 0x18]
	0x0364536C BL 0x1C16E04
	0x03645370 MOV X23, X0
	0x03645374 LDR X0, [X24]
	0x03645378 ADD X1, X31, 0xC
	0x0364537C STR W21, [X31 + 0xC]
	0x03645380 BL 0x1C16E04
	0x03645384 CBZ X22, 0x36453E4
	0x03645388 LDR X8, [X22]
	0x0364538C MOV X2, X0
	0x03645390 MOV X0, X22
	0x03645394 MOV X1, X23
	0x03645398 LDR X9, [X8 + 0x278]
	0x0364539C LDR X3, [X8 + 0x280]
	0x036453A0 BLR X9
	0x036453A4 LDP W8, W9, [X19 + 0x54]
	0x036453A8 ADD W8, W8, 0x1
	0x036453AC CMP W9, W20
	0x036453B0 STR W8, [X19 + 0x54]
	0x036453B4 B.GT 0x36453CC
	0x036453B8 MOVN W8, 0x80000000
	0x036453BC CMP W20, W8
	0x036453C0 B.EQ 0x36453C8
	0x036453C4 ADD W8, W20, 0x1
	0x036453C8 STR W8, [X19 + 0x58]
	0x036453CC LDP X20, X19, [X31 + 0x40]
	0x036453D0 LDP X22, X21, [X31 + 0x30]
	0x036453D4 LDP X24, X23, [X31 + 0x20]
	0x036453D8 LDR X30, [X31 + 0x10]
	0x036453DC ADD X31, X31, 0x50
	0x036453E0 RET
	0x036453E4 BL 0x1C16F20
	0x036453E8 STR X30, [X31 - 0x20]!
	0x036453EC STP X20, X19, [X31 + 0x10]
	0x036453F0 ADRP X20, 0xD9B000
	0x036453F4 LDRB W8, [X20 + 0x5A2]
	0x036453F8 MOV X19, X0
	0x036453FC TBNZ X8, 0x0, 0x3645414
	0x03645400 ADRP X0, 0xAF7000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD9C000
	007 Move W8, [X20+1421]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAF7000
	014 Move X0, [X0+2272]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1421], W8
	018 Move X8, [X19+56]
	019 Compare X8, 0
	020 JumpIfEqual {85}
	021 Move W8, [X8+16]
	022 Move W9, [X19+64]
	023 Subtract W8, W8, W9
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X19
	026 Call RegexParser.RightCharMoveRight, X0
	027 And W8, W0, 0xFFFF
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X22, 0xAF7000
	030 Move W20, [X19+64]
	031 Move X22, [X22+2272]
	032 Move X0, [X19+56]
	033 Compare X0, 0
	034 JumpIfEqual {85}
	035 Move W9, [X0+16]
	036 Move W8, [X19+64]
	037 Subtract W9, W9, W8
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X0, X19
	040 Call RegexParser.RightCharMoveRight, X0
	041 Move X8, [X22]
	042 Move W21, W0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move W0, W21
	049 Move X1, X31
	050 Call RegexCharClass.IsWordChar, X0
	051 And W8, W21, 0xFFFF
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {32}
	057 Move W8, [X19+64]
	058 Move X0, [X19+56]
	059 Subtract W8, W8, 1
	060 Move [X19+64], W8
	061 Compare X0, 0
	062 JumpIfEqual {85}
	063 Subtract W2, W8, W20
	064 Move W1, W20
	065 Move X3, X31
	066 Call String.Substring, X0, X1, X2
	067 Move X8, [X19+56]
	068 Compare X8, 0
	069 JumpIfEqual {85}
	070 Move W8, [X8+16]
	071 Move W9, [X19+64]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X20, X0
	074 Move X0, X19
	075 Call RegexParser.RightCharMoveRight, X0
	076 And W8, W0, 0xFFFF
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, X20
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Return X0
	085 Call 0x1C17F20
	086 Move X0, 0xAF8000
	087 Move X0, [X0+1360]
	088 Move X0, 0xAF8000
	089 Move X0, [X0+1368]
	090 Call 0x1C17D08
	091 Move X1, X0
	092 Move X0, X19
	093 Call RegexParser.MakeException, X0, X1
	094 Move X19, X0
	095 Move X0, 0xAF8000
	096 Move X0, [X0+1376]
	097 Call 0x1C17D08
	098 Move X1, X0
	099 Move X0, X19
	100 Call 0x1C17DEC

Method: System.Int32 TypeFromCode(System.Char ch)

Disassembly:
	0x0364597C MOV X0, X21
	0x03645980 LDR X9, [X8 + 0x2D8]
	0x03645984 LDR X2, [X8 + 0x2E0]
	0x03645988 BLR X9
	0x0364598C CBZ X0, 0x364579C
	0x03645990 LDR X8, [X0]
	0x03645994 LDR X1, [X26]
	0x03645998 LDR X8, [X8 + 0x40]
	0x0364599C LDR X9, [X1 + 0x40]
	0x036459A0 CMP X8, X9
	0x036459A4 B.NE 0x3645C14
	0x036459A8 BL 0x1C16E08
	0x036459AC LDR W29, [X0]
	0x036459B0 B 0x36459FC
	0x036459B4 LDR X8, [X19 + 0x70]
	0x036459B8 CBZ X8, 0x3645BF4
	0x036459BC ADRP X8, 0xADE000
	0x036459C0 LDR X8, [X8 + 0xDB8]
	0x036459C4 LDR X0, [X8]
	0x036459C8 BL 0x1C16F10
	0x036459CC MOV X1, X31
	0x036459D0 MOV X20, X0
	0x036459D4 BL 0x335A0A0
	0x036459D8 STR X20, [X19 + 0x68]
	0x036459DC LDR X0, [X22]
	0x036459E0 BL 0x1C16F10
	0x036459E4 LDR X1, [X21]
	0x036459E8 MOV X21, X0
	0x036459EC BL 0x301B7C4
	0x036459F0 MOV X20, X31
	0x036459F4 STR X21, [X19 + 0x78]
	0x036459F8 MOVN W29, 0x0
	0x036459FC LDR W8, [X19 + 0x54]
	0x03645A00 CMP W8, 0x1
	0x03645A04 B.LT 0x3645BF4
	0x03645A08 ADRP X28, 0xAAF000

ISIL:
	001 And W8, W1, 0xFFFF
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W0, 19
	007 Return X0
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W8, [X0+129]
	012 Move W9, 41
	013 And W31, W8, 1
	014 Move W8, 16
	015 Move W0, 22
	016 Return X0
	017 Move W0, 18
	018 Return X0
	019 Move W8, [X0+129]
	020 Move W9, 42
	021 And W31, W8, 1
	022 Move W8, 17
	023 NotImplemented "Instruction CSEL not yet implemented."
	024 Return X0
	025 Move W0, 20
	026 Return X0
	027 Move W0, 21
	028 Return X0

Method: System.Text.RegularExpressions.RegexOptions OptionFromCode(System.Char ch)

Disassembly:
	0x03646280 ADD X31, X31, 0x70
	0x03646284 RET
	0x03646288 BL 0x1C16F20
	0x0364628C STR X30, [X31 - 0x50]!
	0x03646290 STP X26, X25, [X31 + 0x10]
	0x03646294 STP X24, X23, [X31 + 0x20]
	0x03646298 STP X22, X21, [X31 + 0x30]
	0x0364629C STP X20, X19, [X31 + 0x40]
	0x036462A0 ADRP X23, 0xD9A000
	0x036462A4 LDRB W8, [X23 + 0x5AC]
	0x036462A8 MOV W22, W4
	0x036462AC MOV W20, W3
	0x036462B0 MOV X19, X2
	0x036462B4 MOV X24, X1
	0x036462B8 MOV X21, X0
	0x036462BC TBNZ X8, 0x0, 0x3646304
	0x036462C0 ADRP X0, 0xAAE000
	0x036462C4 LDR X0, [X0 + 0x1B8]
	0x036462C8 BL 0x1C16CF4
	0x036462CC ADRP X0, 0xAAE000
	0x036462D0 LDR X0, [X0 + 0x1C0]
	0x036462D4 BL 0x1C16CF4
	0x036462D8 ADRP X0, 0xAAE000
	0x036462DC LDR X0, [X0 + 0x1C8]

ISIL:
	001 Subtract W8, W0, 65
	002 And W8, W8, 0xFFFF
	003 Add W9, W0, 32
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 And W9, W8, 0xFFFF
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W9, 256
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 Return X0
	013 Subtract W8, W8, 109
	014 And W9, W8, 0xFFFF
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X9, -44752896
	017 NotImplemented "Instruction SXTH not yet implemented."
	018 Add X9, X9, 1484
	019 Move W0, [X9]
	020 Return X0
	021 Move W0, W31
	022 Return X0

Method: System.Void CountCaptures()

Disassembly:
	0x03641514 CMP W10, W11
	0x03641518 B.CS 0x3641530
	0x0364151C ADD W9, W10, 0x1
	0x03641520 ADD X8, X8, X10, 0x2, LSL
	0x03641524 STR W9, [X23 + 0x18]
	0x03641528 STR W1, [X8 + 0x20]
	0x0364152C B 0x3641544
	0x03641530 LDR X8, [X9 + 0x20]
	0x03641534 MOV X0, X23
	0x03641538 LDR X8, [X8 + 0xC0]
	0x0364153C LDR X2, [X8 + 0x70]
	0x03641540 BL 0x2FDC70C
	0x03641544 LDR X8, [X21]
	0x03641548 MOV X0, X21
	0x0364154C LDP X9, X1, [X8 + 0x168]
	0x03641550 BLR X9
	0x03641554 ADRP X9, 0xAB3000
	0x03641558 LDR W10, [X22 + 0x1C]
	0x0364155C LDR X8, [X22 + 0x10]
	0x03641560 LDR X9, [X9 + 0x1B8]
	0x03641564 ADD W10, W10, 0x1
	0x03641568 LDR X9, [X9]
	0x0364156C STR W10, [X22 + 0x1C]
	0x03641570 CBZ X8, 0x364179C
	0x03641574 LDRSW X10, [X22 + 0x18]
	0x03641578 LDR W11, [X8 + 0x18]
	0x0364157C MOV X1, X0
	0x03641580 CMP W10, W11
	0x03641584 B.CS 0x364159C
	0x03641588 ADD W9, W10, 0x1
	0x0364158C ADD X8, X8, X10, 0x3, LSL
	0x03641590 STR W9, [X22 + 0x18]
	0x03641594 STR X1, [X8 + 0x20]
	0x03641598 B 0x36415B0
	0x0364159C LDR X8, [X9 + 0x20]
	0x036415A0 MOV X0, X22
	0x036415A4 LDR X8, [X8 + 0xC0]
	0x036415A8 LDR X2, [X8 + 0x70]
	0x036415AC BL 0x301BF90
	0x036415B0 MOV X0, X21
	0x036415B4 MOV W1, W31
	0x036415B8 MOV X2, X31
	0x036415BC BL 0x3232ADC
	0x036415C0 LDR W8, [X28 + 0x2C]
	0x036415C4 ADRP X28, 0xAB2000
	0x036415C8 LDR X28, [X28 + 0x758]
	0x036415CC CBZ X24, 0x3641620
	0x036415D0 TBNZ X8, 0x1F, 0x3641620
	0x036415D4 LDR X0, [X28]
	0x036415D8 ADD X1, X31, 0x1C
	0x036415DC STR W8, [X31 + 0x1C]
	0x036415E0 BL 0x1C16E04
	0x036415E4 LDR X8, [X24]
	0x036415E8 MOV X1, X0
	0x036415EC MOV X0, X24
	0x036415F0 LDR X9, [X8 + 0x2D8]
	0x036415F4 LDR X2, [X8 + 0x2E0]
	0x036415F8 BLR X9
	0x036415FC CBZ X0, 0x364179C
	0x03641600 LDR X8, [X0]
	0x03641604 LDR X1, [X28]
	0x03641608 LDR X8, [X8 + 0x40]
	0x0364160C LDR X9, [X1 + 0x40]
	0x03641610 CMP X8, X9
	0x03641614 B.NE 0x36417E8
	0x03641618 BL 0x1C16E08
	0x0364161C LDR W8, [X0]
	0x03641620 CBZ X23, 0x364179C
	0x03641624 LDR W11, [X23 + 0x1C]
	0x03641628 LDR X9, [X23 + 0x10]
	0x0364162C LDR X10, [X19]
	0x03641630 ADD W11, W11, 0x1
	0x03641634 STR W11, [X23 + 0x1C]
	0x03641638 CBZ X9, 0x364179C
	0x0364163C LDRSW X11, [X23 + 0x18]
	0x03641640 LDR W12, [X9 + 0x18]
	0x03641644 CMP W11, W12
	0x03641648 MOVN W12, 0x4
	0x0364164C SUB W1, W12, W8
	0x03641650 B.CS 0x3641668
	0x03641654 ADD W8, W11, 0x1
	0x03641658 ADD X9, X9, X11, 0x2, LSL
	0x0364165C STR W8, [X23 + 0x18]
	0x03641660 STR W1, [X9 + 0x20]
	0x03641664 B 0x364167C
	0x03641668 LDR X8, [X10 + 0x20]
	0x0364166C MOV X0, X23
	0x03641670 LDR X8, [X8 + 0xC0]
	0x03641674 LDR X2, [X8 + 0x70]
	0x03641678 BL 0x2FDC70C
	0x0364167C ADD W26, W26, 0x1
	0x03641680 B 0x3641448
	0x03641684 CBZ X21, 0x364179C
	0x03641688 MOV X0, X21
	0x0364168C MOV X1, X31
	0x03641690 BL 0x323260C
	0x03641694 CMP W0, 0x1
	0x03641698 B.LT 0x3641764
	0x0364169C CBZ X22, 0x364179C
	0x036416A0 CBZ X23, 0x364179C
	0x036416A4 LDR W10, [X23 + 0x1C]
	0x036416A8 LDR W1, [X22 + 0x18]
	0x036416AC LDR X8, [X23 + 0x10]
	0x036416B0 LDR X9, [X19]
	0x036416B4 ADD W10, W10, 0x1
	0x036416B8 STR W10, [X23 + 0x1C]
	0x036416BC CBZ X8, 0x364179C
	0x036416C0 LDRSW X10, [X23 + 0x18]
	0x036416C4 LDR W11, [X8 + 0x18]
	0x036416C8 CMP W10, W11
	0x036416CC B.CS 0x36416E4
	0x036416D0 ADD W9, W10, 0x1
	0x036416D4 ADD X8, X8, X10, 0x2, LSL
	0x036416D8 STR W9, [X23 + 0x18]
	0x036416DC STR W1, [X8 + 0x20]
	0x036416E0 B 0x36416F8
	0x036416E4 LDR X8, [X9 + 0x20]
	0x036416E8 MOV X0, X23
	0x036416EC LDR X8, [X8 + 0xC0]
	0x036416F0 LDR X2, [X8 + 0x70]
	0x036416F4 BL 0x2FDC70C
	0x036416F8 LDR X8, [X21]
	0x036416FC MOV X0, X21
	0x03641700 LDP X9, X1, [X8 + 0x168]
	0x03641704 BLR X9
	0x03641708 ADRP X9, 0xAB3000
	0x0364170C LDR W10, [X22 + 0x1C]
	0x03641710 LDR X8, [X22 + 0x10]
	0x03641714 LDR X9, [X9 + 0x1B8]
	0x03641718 ADD W10, W10, 0x1
	0x0364171C LDR X9, [X9]
	0x03641720 STR W10, [X22 + 0x1C]
	0x03641724 CBZ X8, 0x364179C
	0x03641728 LDRSW X10, [X22 + 0x18]
	0x0364172C LDR W11, [X8 + 0x18]
	0x03641730 MOV X1, X0
	0x03641734 CMP W10, W11
	0x03641738 B.CS 0x3641750
	0x0364173C ADD W9, W10, 0x1
	0x03641740 ADD X8, X8, X10, 0x3, LSL
	0x03641744 STR W9, [X22 + 0x18]
	0x03641748 STR X1, [X8 + 0x20]
	0x0364174C B 0x3641764
	0x03641750 LDR X8, [X9 + 0x20]
	0x03641754 MOV X0, X22
	0x03641758 LDR X8, [X8 + 0xC0]
	0x0364175C LDR X2, [X8 + 0x70]
	0x03641760 BL 0x301BF90
	0x03641764 MOV X0, X21
	0x03641768 MOV X1, X31
	0x0364176C BL 0x3235B68
	0x03641770 LDP X9, X8, [X31 + 0x8]
	0x03641774 LDP X20, X19, [X31 + 0x70]
	0x03641778 LDP X26, X25, [X31 + 0x40]
	0x0364177C LDP X28, X27, [X31 + 0x30]
	0x03641780 STP X23, X8, [X9 + 0x18]
	0x03641784 STR X22, [X9 + 0x10]
	0x03641788 LDP X22, X21, [X31 + 0x60]
	0x0364178C LDP X24, X23, [X31 + 0x50]
	0x03641790 LDP X29, X30, [X31 + 0x20]
	0x03641794 ADD X31, X31, 0x80
	0x03641798 RET
	0x0364179C BL 0x1C16F20
	0x036417A0 ADRP X0, 0xABA000
	0x036417A4 LDR X0, [X0 + 0x578]
	0x036417A8 BL 0x1C16D08
	0x036417AC BL 0x1C16F10
	0x036417B0 MOV X19, X0
	0x036417B4 ADRP X0, 0xAFB000
	0x036417B8 LDR X0, [X0 + 0x430]
	0x036417BC BL 0x1C16D08
	0x036417C0 MOV X1, X0
	0x036417C4 MOV X0, X19
	0x036417C8 MOV X2, X31
	0x036417CC BL 0x3314A68
	0x036417D0 ADRP X0, 0xAFB000
	0x036417D4 LDR X0, [X0 + 0x438]
	0x036417D8 BL 0x1C16D08
	0x036417DC MOV X1, X0
	0x036417E0 MOV X0, X19
	0x036417E4 BL 0x1C16DEC
	0x036417E8 BL 0x1C171E0
	0x036417EC STR X30, [X31 - 0x30]!
	0x036417F0 STP X22, X21, [X31 + 0x10]
	0x036417F4 STP X20, X19, [X31 + 0x20]
	0x036417F8 ADRP X22, 0xD9F000
	0x036417FC ADRP X21, 0xAFB000
	0x03641800 LDRB W8, [X22 + 0x59A]
	0x03641804 LDR X21, [X21 + 0x3A8]
	0x03641808 MOV X20, X1
	0x0364180C MOV X19, X0
	0x03641810 TBNZ X8, 0x0, 0x3641828
	0x03641814 ADRP X0, 0xAFB000
	0x03641818 LDR X0, [X0 + 0x3A8]
	0x0364181C BL 0x1C16CF4
	0x03641820 MOVZ W8, 0x1
	0x03641824 STRB W8, [X22 + 0x59A]
	0x03641828 STR X20, [X19 + 0x18]
	0x0364182C LDR X0, [X21]
	0x03641830 LDR W22, [X19 + 0x80]
	0x03641834 BL 0x1C16F10
	0x03641838 MOV X1, X31
	0x0364183C MOV X20, X0
	0x03641840 BL 0x33BDD8C
	0x03641844 MOVZ W8, 0x18
	0x03641848 STR W22, [X20 + 0x34]
	0x0364184C STR W8, [X20 + 0x10]
	0x03641850 STR X20, [X19 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xDA0000
	008 Move W8, [X20+1422]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAFB000
	015 Move X0, [X0+2272]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1422], W8
	019 Move X0, X19
	020 Move W1, W31
	021 Move W2, W31
	022 Call RegexParser.NoteCaptureSlot, X0, X1, X2
	023 Move X8, [X19+56]
	024 Move W22, 1
	025 Move [X19+80], W22
	026 Compare X8, 0
	027 JumpIfEqual {207}
	028 Move X23, 0xAFB000
	029 Move X23, [X23+2272]
	030 Move W8, [X8+16]
	031 Move W20, [X19+64]
	032 Subtract W8, W8, W20
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Call RegexParser.RightCharMoveRight, X0
	036 And W8, W0, 0xFFFF
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X8, [X19+56]
	041 Compare X8, 0
	042 JumpIfEqual {207}
	043 Move W8, [X8+16]
	044 Move W9, [X19+64]
	045 Subtract W8, W8, W9
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W1, 1
	048 Move X0, X19
	049 Call RegexParser.RightChar, X0, X1
	050 And W8, W0, 0xFFFF
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, X19
	053 Call RegexParser.RightChar, X0
	054 And W8, W0, 0xFFFF
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W8, [X19+64]
	057 Move X0, X19
	058 Subtract W8, W8, 1
	059 Move [X19+64], W8
	060 Call RegexParser.ScanBlank, X0
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X8, [X19+56]
	065 Compare X8, 0
	066 JumpIfEqual {207}
	067 Move W8, [X8+16]
	068 Move W9, [X19+64]
	069 Subtract W8, W8, W9
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W1, 1
	072 Move X0, X19
	073 Call RegexParser.ScanBackslash, X0, X1
	074 Move W8, [X19+128]
	075 Move TEMP, X8
	076 And TEMP, TEMP, 32
	077 Compare TEMP, 32
	078 JumpIfNotEqual {193}
	079 Move W8, [X19+64]
	080 Move X0, X19
	081 Subtract W8, W8, 1
	082 Move [X19+64], W8
	083 Call RegexParser.ScanBlank, X0
	084 Move X0, X19
	085 Call RegexParser.PushOptions, X0
	086 Move X8, [X19+56]
	087 Compare X8, 0
	088 JumpIfEqual {207}
	089 Move W8, [X8+16]
	090 Move W9, [X19+64]
	091 Subtract W8, W8, W9
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X0, X19
	094 Call RegexParser.RightChar, X0
	095 And W8, W0, 0xFFFF
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move W8, [X19+64]
	098 Move X9, [X19+56]
	099 Add W8, W8, 1
	100 Move [X19+64], W8
	101 Compare X9, 0
	102 JumpIfEqual {207}
	103 Move W9, [X9+16]
	104 Subtract W8, W9, W8
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X0, X19
	107 Call RegexParser.RightChar, X0
	108 And W8, W0, 0xFFFF
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X0, X19
	111 Call RegexParser.RightChar, X0
	112 And W8, W0, 0xFFFF
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move W8, [X19+64]
	115 Move X0, X19
	116 Add W8, W8, 1
	117 Move [X19+64], W8
	118 Call RegexParser.RightChar, X0
	119 And W8, W0, 0xFFFF
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move W21, W0
	122 Move X0, [X23]
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {127}
	126 Call 0x1C17DFC
	127 Move W0, W21
	128 Move X1, X31
	129 Call RegexCharClass.IsWordChar, X0
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {192}
	134 Subtract W8, W21, 49
	135 And W8, W8, 0xFFFF
	136 Move X0, X19
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Call RegexParser.ScanCapname, X0
	139 Move X1, X0
	140 Move X0, X19
	141 Move W2, W20
	142 Call RegexParser.NoteCaptureName, X0, X1, X2
	143 Move X0, X19
	144 Call RegexParser.EmptyOptionsStack, X0
	145 Move TEMP, X0
	146 And TEMP, TEMP, 1
	147 Compare TEMP, 1
	148 JumpIfEqual {193}
	149 Move X0, X19
	150 Call RegexParser.PopOptions, X0
	151 Move W2, 1
	152 Move X0, X19
	153 Move W1, W31
	154 Call RegexParser.ScanCharClass, X0, X1, X2
	155 Move W8, [X19+128]
	156 Move TEMP, X8
	157 And TEMP, TEMP, 4
	158 Compare TEMP, 4
	159 JumpIfEqual {192}
	160 Move W8, [X19+144]
	161 Compare W8, 0
	162 JumpIfNotEqual {192}
	163 Move W1, [X19+80]
	164 Add W8, W1, 1
	165 Move [X19+80], W8
	166 Move X0, X19
	167 Move W2, W20
	168 Call RegexParser.NoteCaptureSlot, X0, X1, X2
	169 Move X0, X19
	170 Call RegexParser.ScanOptions, X0
	171 Move X8, [X19+56]
	172 Compare X8, 0
	173 JumpIfEqual {207}
	174 Move W8, [X8+16]
	175 Move W9, [X19+64]
	176 Subtract W8, W8, W9
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move X0, X19
	179 Call RegexParser.RightChar, X0
	180 And W8, W0, 0xFFFF
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move W8, [X19+64]
	183 Move X0, X19
	184 Add W8, W8, 1
	185 Move [X19+64], W8
	186 Call RegexParser.PopKeepOptions, X0
	187 Move X0, X19
	188 Call RegexParser.RightChar, X0
	189 And W8, W0, 0xFFFF
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move [X19+144], W22
	192 Move [X19+144], W31
	193 Move X8, [X19+56]
	194 Compare X8, 0
	195 JumpIfNotEqual {30}
	196 Call RegexParser.ScanDecimal, X0
	197 Move W1, W0
	198 Move X0, X19
	199 Move X20, [X31+32]
	200 Move X19, [X31+40]
	201 Move X22, [X31+16]
	202 Move X21, [X31+24]
	203 Move X30, [X31+48]
	204 Move X23, [X31+56]
	205 Call RegexParser.AssignNameSlots, X0
	206 Return 
	207 Call 0x1C17F20

Method: System.Void NoteCaptureSlot(System.Int32 i, System.Int32 pos)

Disassembly:
	0x036462E0 BL 0x1C16CF4
	0x036462E4 ADRP X0, 0xAD5000
	0x036462E8 LDR X0, [X0 + 0xB58]
	0x036462EC BL 0x1C16CF4
	0x036462F0 ADRP X0, 0xAAE000
	0x036462F4 LDR X0, [X0 + 0x1D0]
	0x036462F8 BL 0x1C16CF4
	0x036462FC MOVZ W8, 0x1
	0x03646300 STRB W8, [X23 + 0x5AC]
	0x03646304 ADDS W31, W20, 0x2
	0x03646308 B.LE 0x36465C8
	0x0364630C TBNZ X22, 0x1F, 0x3646598
	0x03646310 CBZ X19, 0x3646594
	0x03646314 LDR W8, [X19 + 0x10]
	0x03646318 CMP W8, W22
	0x0364631C B.LT 0x3646598
	0x03646320 CBZ W20, 0x36464C8
	0x03646324 CBZ X24, 0x3646594
	0x03646328 MOV X0, X24
	0x0364632C MOV X1, X19
	0x03646330 MOV W2, W22
	0x03646334 MOV X3, X31
	0x03646338 BL 0x3632C98
	0x0364633C CBZ X0, 0x3646594
	0x03646340 MOV X1, X31
	0x03646344 MOV X23, X0
	0x03646348 BL 0x362F808
	0x0364634C TBZ X0, 0x0, 0x36464C8
	0x03646350 MOVZ W0, 0x10
	0x03646354 MOV X1, X31
	0x03646358 BL 0x3235A9C
	0x0364635C MOV X22, X0
	0x03646360 MOV X0, X24
	0x03646364 MOV X1, X31
	0x03646368 BL 0x36336D4
	0x0364636C TBZ X0, 0x0, 0x36464E4
	0x03646370 ADRP X8, 0xAAE000
	0x03646374 LDR X8, [X8 + 0x1D0]
	0x03646378 LDR X0, [X8]
	0x0364637C BL 0x1C16F10
	0x03646380 ADRP X8, 0xAAE000
	0x03646384 LDR X8, [X8 + 0x1C0]
	0x03646388 MOV X24, X0
	0x0364638C LDR X1, [X8]
	0x03646390 BL 0x301B7C4
	0x03646394 ADRP X26, 0xAAE000
	0x03646398 LDR W8, [X19 + 0x10]
	0x0364639C LDR X26, [X26 + 0x1B8]
	0x036463A0 LDP W25, W9, [X23 + 0x10]
	0x036463A4 ADD W1, W9, W25
	0x036463A8 CMP W1, W8
	0x036463AC B.EQ 0x3646420
	0x036463B0 SUB W8, W8, W25
	0x036463B4 SUB W2, W8, W9
	0x036463B8 MOV X0, X19
	0x036463BC MOV X3, X31
	0x036463C0 BL 0x3228DE4
	0x036463C4 CBZ X24, 0x3646594
	0x036463C8 LDR W10, [X24 + 0x1C]
	0x036463CC LDR X8, [X24 + 0x10]
	0x036463D0 LDR X9, [X26]
	0x036463D4 ADD W10, W10, 0x1
	0x036463D8 STR W10, [X24 + 0x1C]
	0x036463DC CBZ X8, 0x3646594
	0x036463E0 LDRSW X10, [X24 + 0x18]
	0x036463E4 LDR W11, [X8 + 0x18]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X22, 0xD9B000
	010 Move X24, 0xAAE000
	011 Move W8, [X22+1423]
	012 Move X24, [X24+1880]
	013 Move W21, W2
	014 Move W20, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xAAE000
	021 Move X0, [X0+1880]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1423], W8
	025 Move X0, [X24]
	026 Move X22, [X19+96]
	027 Add X1, X31, 28
	028 Move [X31+28], W20
	029 Call 0x1C17E04
	030 Compare X22, 0
	031 JumpIfEqual {81}
	032 Move X8, [X22]
	033 Move X1, X0
	034 Move X0, X22
	035 Move X9, [X8+696]
	036 Move X2, [X8+704]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {72}
	042 Move X0, [X24]
	043 Move X22, [X19+96]
	044 Add X1, X31, 24
	045 Move [X31+24], W20
	046 Call 0x1C17E04
	047 Move X23, X0
	048 Move X0, [X24]
	049 Add X1, X31, 12
	050 Move [X31+12], W21
	051 Call 0x1C17E04
	052 Compare X22, 0
	053 JumpIfEqual {81}
	054 Move X8, [X22]
	055 Move X2, X0
	056 Move X0, X22
	057 Move X1, X23
	058 Move X9, [X8+632]
	059 Move X3, [X8+640]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move W8, [X19+84]
	062 Move W9, [X19+88]
	063 Add W8, W8, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move [X19+84], W8
	066 Move TEMP, 0x80000000
	067 Not TEMP
	068 Move W8, TEMP
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add W8, W20, 1
	071 Move [X19+88], W8
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X24, [X31+32]
	077 Move X23, [X31+40]
	078 Move X30, [X31+16]
	079 Add X31, X31, 80
	080 Return 
	081 Call 0x1C17F20

Method: System.Void NoteCaptureName(System.String name, System.Int32 pos)

Disassembly:
	0x03646438 MOV X0, X23
	0x0364643C MOV X1, X31
	0x03646440 BL 0x3630D38
	0x03646444 CBZ X0, 0x3646594
	0x03646448 MOV X1, X31
	0x0364644C MOV X23, X0
	0x03646450 BL 0x362F808
	0x03646454 MOV W8, W25
	0x03646458 TBNZ X0, 0x0, 0x36463A0
	0x0364645C CMP W25, 0x1
	0x03646460 B.LT 0x3646480
	0x03646464 CBZ X22, 0x3646594
	0x03646468 MOV X0, X22
	0x0364646C MOV X1, X19
	0x03646470 MOV W2, W31
	0x03646474 MOV W3, W25
	0x03646478 MOV X4, X31
	0x0364647C BL 0x323351C
	0x03646480 CBZ X24, 0x3646594
	0x03646484 LDR W8, [X24 + 0x18]
	0x03646488 SUBS W19, W8, 0x1
	0x0364648C B.MI 0x3646574
	0x03646490 ADRP X20, 0xAD5000
	0x03646494 LDR X20, [X20 + 0xB58]
	0x03646498 LDR X2, [X20]
	0x0364649C MOV X0, X24
	0x036464A0 MOV W1, W19
	0x036464A4 BL 0x301BCCC
	0x036464A8 CBZ X22, 0x3646594
	0x036464AC MOV X1, X0
	0x036464B0 MOV X0, X22
	0x036464B4 MOV X2, X31
	0x036464B8 BL 0x32333E0
	0x036464BC SUBS W19, W19, 0x1
	0x036464C0 B.PL 0x3646498
	0x036464C4 B 0x3646574
	0x036464C8 MOV X0, X19
	0x036464CC LDP X20, X19, [X31 + 0x40]
	0x036464D0 LDP X22, X21, [X31 + 0x30]
	0x036464D4 LDP X24, X23, [X31 + 0x20]
	0x036464D8 LDP X26, X25, [X31 + 0x10]
	0x036464DC LDR X30, [X31], #0x50
	0x036464E0 RET
	0x036464E4 MOV W24, W31
	0x036464E8 LDR W8, [X23 + 0x10]
	0x036464EC SUBS W3, W8, W24
	0x036464F0 B.EQ 0x3646510
	0x036464F4 CBZ X22, 0x3646594
	0x036464F8 MOV X0, X22
	0x036464FC MOV X1, X19
	0x03646500 MOV W2, W24
	0x03646504 MOV X4, X31
	0x03646508 BL 0x323351C
	0x0364650C LDR W24, [X23 + 0x10]
	0x03646510 LDR W8, [X23 + 0x14]
	0x03646514 MOV X0, X21
	0x03646518 MOV X1, X22
	0x0364651C MOV X2, X23
	0x03646520 ADD W24, W8, W24
	0x03646524 BL 0x3645EBC
	0x03646528 SUBS W20, W20, 0x1
	0x0364652C B.EQ 0x3646550
	0x03646530 MOV X0, X23
	0x03646534 MOV X1, X31
	0x03646538 BL 0x3630D38
	0x0364653C CBZ X0, 0x3646594
	0x03646540 MOV X1, X31
	0x03646544 MOV X23, X0
	0x03646548 BL 0x362F808
	0x0364654C TBNZ X0, 0x0, 0x36464E8
	0x03646550 LDR W8, [X19 + 0x10]
	0x03646554 SUBS W3, W8, W24
	0x03646558 B.LE 0x3646574
	0x0364655C CBZ X22, 0x3646594
	0x03646560 MOV X0, X22
	0x03646564 MOV X1, X19
	0x03646568 MOV W2, W24
	0x0364656C MOV X4, X31
	0x03646570 BL 0x323351C
	0x03646574 MOV X0, X22
	0x03646578 LDP X20, X19, [X31 + 0x40]
	0x0364657C LDP X22, X21, [X31 + 0x30]
	0x03646580 LDP X24, X23, [X31 + 0x20]
	0x03646584 LDP X26, X25, [X31 + 0x10]
	0x03646588 MOV X1, X31
	0x0364658C LDR X30, [X31], #0x50
	0x03646590 B 0x3235BE8
	0x03646594 BL 0x1C16F20
	0x03646598 ADRP X0, 0xAB5000
	0x0364659C LDR X0, [X0 + 0x760]
	0x036465A0 BL 0x1C16D08
	0x036465A4 BL 0x1C16F10
	0x036465A8 MOV X19, X0
	0x036465AC ADRP X0, 0xAF5000
	0x036465B0 LDR X0, [X0 + 0x7B0]
	0x036465B4 BL 0x1C16D08
	0x036465B8 MOV X20, X0
	0x036465BC ADRP X0, 0xAF5000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD9B000
	007 Move W8, [X22+1424]
	008 Move W21, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0xADE000
	016 Move X0, [X0+3512]
	017 Call 0x1C17CF4
	018 Move X0, 0xAAE000
	019 Move X0, [X0+1880]
	020 Call 0x1C17CF4
	021 Move X0, 0xAAF000
	022 Move X0, [X0+440]
	023 Call 0x1C17CF4
	024 Move X0, 0xAAF000
	025 Move X0, [X0+448]
	026 Call 0x1C17CF4
	027 Move X0, 0xAAF000
	028 Move X0, [X0+464]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X22+1424], W8
	032 Move X0, [X20+104]
	033 Compare X0, 0
	034 JumpIfNotEqual {56}
	035 Move X8, 0xADE000
	036 Move X8, [X8+3512]
	037 Move X0, [X8]
	038 Call 0x1C17F10
	039 Move X1, X31
	040 Move X22, X0
	041 Call Hashtable..ctor, X0
	042 Move [X20+104], X22
	043 Move X8, 0xAAF000
	044 Move X8, [X8+464]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move X8, 0xAAF000
	048 Move X8, [X8+448]
	049 Move X22, X0
	050 Move X1, [X8]
	051 Call List`1<Object>..ctor, X0
	052 Move X0, [X20+104]
	053 Move [X20+120], X22
	054 Compare X0, 0
	055 JumpIfEqual {111}
	056 Move X8, [X0]
	057 Move X1, X19
	058 Move X9, [X8+696]
	059 Move X2, [X8+704]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {105}
	065 Move X8, 0xAAE000
	066 Move X22, [X20+104]
	067 Move X8, [X8+1880]
	068 Add X1, X31, 12
	069 Move [X31+12], W21
	070 Move X0, [X8]
	071 Call 0x1C17E04
	072 Compare X22, 0
	073 JumpIfEqual {111}
	074 Move X8, [X22]
	075 Move X2, X0
	076 Move X0, X22
	077 Move X1, X19
	078 Move X9, [X8+632]
	079 Move X3, [X8+640]
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move X0, [X20+120]
	082 Compare X0, 0
	083 JumpIfEqual {111}
	084 Move X9, 0xAAF000
	085 Move X9, [X9+440]
	086 Move W10, [X0+28]
	087 Move X8, [X0+16]
	088 Move X9, [X9]
	089 Add W10, W10, 1
	090 Move [X0+28], W10
	091 Compare X8, 0
	092 JumpIfEqual {111}
	093 NotImplemented "Instruction LDRSW not yet implemented."
	094 Move W11, [X8+24]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Add W9, W10, 1
	097 Add X8, X8, X10
	098 Move [X0+24], W9
	099 Move [X8+32], X19
	100 Move X8, [X9+32]
	101 Move X1, X19
	102 Move X8, [X8+192]
	103 Move X2, [X8+112]
	104 Call List`1<Object>.AddWithResize, X0, X1
	105 Move X20, [X31+32]
	106 Move X19, [X31+40]
	107 Move X22, [X31+16]
	108 Move X21, [X31+24]
	109 Move X30, [X31+48]
	110 Return 
	111 Call 0x1C17F20

Method: System.Void NoteCaptures(System.Collections.Hashtable caps, System.Int32 capsize, System.Collections.Hashtable capnames)

Disassembly:
	0x036421E4 SUB X31, X31, 0x60
	0x036421E8 STP X30, X27, [X31 + 0x10]
	0x036421EC STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X0+92], W2
	002 Move [X0+96], X1
	003 Move [X0+104], X3
	004 Return 

Method: System.Void AssignNameSlots()

Disassembly:
	0x036465C0 LDR X0, [X0 + 0x7B8]
	0x036465C4 B 0x36465F4
	0x036465C8 ADRP X0, 0xAB5000
	0x036465CC LDR X0, [X0 + 0x760]
	0x036465D0 BL 0x1C16D08
	0x036465D4 BL 0x1C16F10
	0x036465D8 MOV X19, X0
	0x036465DC ADRP X0, 0xAD5000
	0x036465E0 LDR X0, [X0 + 0x648]
	0x036465E4 BL 0x1C16D08
	0x036465E8 MOV X20, X0
	0x036465EC ADRP X0, 0xAF6000
	0x036465F0 LDR X0, [X0 + 0x5D8]
	0x036465F4 BL 0x1C16D08
	0x036465F8 MOV X2, X0
	0x036465FC MOV X0, X19
	0x03646600 MOV X1, X20
	0x03646604 MOV X3, X31
	0x03646608 BL 0x3311888
	0x0364660C ADRP X0, 0xAF6000
	0x03646610 LDR X0, [X0 + 0x5E0]
	0x03646614 BL 0x1C16D08
	0x03646618 MOV X1, X0
	0x0364661C MOV X0, X19
	0x03646620 BL 0x1C16DEC
	0x03646624 SUB X31, X31, 0x70
	0x03646628 STP X29, X30, [X31 + 0x10]
	0x0364662C STP X28, X27, [X31 + 0x20]
	0x03646630 STP X26, X25, [X31 + 0x30]
	0x03646634 STP X24, X23, [X31 + 0x40]
	0x03646638 STP X22, X21, [X31 + 0x50]
	0x0364663C STP X20, X19, [X31 + 0x60]
	0x03646640 STR W7, [X31 + 0xC]
	0x03646644 ADRP X19, 0xD9A000
	0x03646648 ADRP X29, 0xAB5000
	0x0364664C LDRB W8, [X19 + 0x5AD]
	0x03646650 LDR X27, [X31 + 0x70]
	0x03646654 LDR X29, [X29 + 0x600]
	0x03646658 MOV W22, W6
	0x0364665C MOV W21, W5
	0x03646660 MOV W24, W4
	0x03646664 MOV W25, W3
	0x03646668 MOV X26, X2
	0x0364666C MOV X23, X1
	0x03646670 MOV X20, X0
	0x03646674 TBNZ X8, 0x0, 0x36466A4
	0x03646678 ADRP X0, 0xAF5000
	0x0364667C LDR X0, [X0 + 0x798]
	0x03646680 BL 0x1C16CF4
	0x03646684 ADRP X0, 0xAB5000
	0x03646688 LDR X0, [X0 + 0x600]
	0x0364668C BL 0x1C16CF4
	0x03646690 ADRP X0, 0xAAF000
	0x03646694 LDR X0, [X0 + 0x570]
	0x03646698 BL 0x1C16CF4
	0x0364669C MOVZ W8, 0x1
	0x036466A0 STRB W8, [X19 + 0x5AD]
	0x036466A4 LDR X0, [X29]
	0x036466A8 ADRP X19, 0xAAF000
	0x036466AC LDR W8, [X0 + 0xE0]
	0x036466B0 LDR X19, [X19 + 0x570]
	0x036466B4 CBNZ W8, 0x36466BC
	0x036466B8 BL 0x1C16DFC
	0x036466BC MOV X0, X27
	0x036466C0 MOV X1, X31
	0x036466C4 BL 0x3633348
	0x036466C8 LDR X8, [X29]
	0x036466CC LDR X0, [X19]
	0x036466D0 LDR X8, [X8 + 0xB8]
	0x036466D4 LDR W9, [X0 + 0xE0]
	0x036466D8 LDR X28, [X8 + 0x38]
	0x036466DC CBNZ W9, 0x36466E4
	0x036466E0 BL 0x1C16DFC
	0x036466E4 MOV X0, X28
	0x036466E8 MOV X1, X27
	0x036466EC MOV X2, X31
	0x036466F0 BL 0x3394CD8
	0x036466F4 AND W8, W0, 0x1
	0x036466F8 STRB W8, [X20 + 0x74]
	0x036466FC TBZ X0, 0x0, 0x3646738
	0x03646700 LDR X0, [X29]
	0x03646704 LDR W8, [X0 + 0xE0]
	0x03646708 CBNZ W8, 0x3646710
	0x0364670C BL 0x1C16DFC
	0x03646710 LDR X0, [X19]
	0x03646714 LDR W8, [X0 + 0xE0]
	0x03646718 CBNZ W8, 0x3646720
	0x0364671C BL 0x1C16DFC
	0x03646720 LDR X8, [X29]
	0x03646724 MOV X1, X31
	0x03646728 LDR X8, [X8 + 0xB8]
	0x0364672C ADD X0, X8, 0x38
	0x03646730 BL 0x3394200
	0x03646734 B 0x364675C
	0x03646738 LDR X0, [X19]
	0x0364673C LDR W8, [X0 + 0xE0]
	0x03646740 CBNZ W8, 0x3646748
	0x03646744 BL 0x1C16DFC
	0x03646748 ADD X0, X31, 0x70
	0x0364674C MOV X1, X31
	0x03646750 BL 0x3394200
	0x03646754 FMOV D1, 0.5
	0x03646758 FADD D0, D0, D1
	0x0364675C MOVZ X9, 0x7FF00000
	0x03646760 FMOV D1, X9
	0x03646764 FCVTZS W8, D0
	0x03646768 MOVZ W10, 0x80000000
	0x0364676C FCMP D0, D1
	0x03646770 CSEL W8, W10, W8, EQ
	0x03646774 STR X23, [X20 + 0x68]
	0x03646778 STR X26, [X20 + 0x20]
	0x0364677C STP W25, W24, [X20 + 0x10]
	0x03646780 STR W8, [X20 + 0x70]
	0x03646784 STR W21, [X20 + 0x18]
	0x03646788 CBZ X23, 0x364694C
	0x0364678C MOV X0, X23
	0x03646790 MOV X1, X31
	0x03646794 BL 0x36336D4
	0x03646798 MOV W8, W0
	0x0364679C LDR X0, [X20 + 0x68]
	0x036467A0 ANDS W31, W8, 0x1
	0x036467A4 MOVN W8, 0x0
	0x036467A8 CSNEG W24, W8, W8, NE
	0x036467AC CBZ X0, 0x364694C
	0x036467B0 ADRP X23, 0xAF5000
	0x036467B4 LDR X23, [X23 + 0x798]
	0x036467B8 MOV X1, X31
	0x036467BC BL 0x36336D4
	0x036467C0 ANDS W31, W0, 0x1
	0x036467C4 MOVZ W8, 0x14
	0x036467C8 MOVZ W9, 0x10
	0x036467CC CSEL X8, X9, X8, NE
	0x036467D0 LDR W25, [X20, X8, LSL]
	0x036467D4 STR W21, [X20 + 0x28]
	0x036467D8 CBNZ W22, 0x364683C
	0x036467DC CMP W25, W21
	0x036467E0 B.NE 0x3646834
	0x036467E4 LDR X0, [X23]
	0x036467E8 LDR W8, [X0 + 0xE0]
	0x036467EC CBNZ W8, 0x36467F4
	0x036467F0 BL 0x1C16DFC
	0x036467F4 ADRP X19, 0xD9A000
	0x036467F8 LDRB W8, [X19 + 0x5C0]
	0x036467FC CBNZ W8, 0x3646814
	0x03646800 ADRP X0, 0xAF5000
	0x03646804 LDR X0, [X0 + 0x798]
	0x03646808 BL 0x1C16CF4
	0x0364680C MOVZ W8, 0x1
	0x03646810 STRB W8, [X19 + 0x5C0]
	0x03646814 LDR X0, [X23]
	0x03646818 LDR W8, [X0 + 0xE0]
	0x0364681C CBNZ W8, 0x3646828
	0x03646820 BL 0x1C16DFC
	0x03646824 LDR X0, [X23]
	0x03646828 LDR X8, [X0 + 0xB8]
	0x0364682C LDR X0, [X8]
	0x03646830 B 0x364692C
	0x03646834 ADD W8, W24, W21
	0x03646838 STR W8, [X20 + 0x28]
	0x0364683C LDRB W8, [X20 + 0x74]
	0x03646840 CBNZ W8, 0x3646860
	0x03646844 MOVZ W8, 0x3E8
	0x03646848 MOV X0, X31
	0x0364684C STR W8, [X20 + 0x7C]
	0x03646850 BL 0x33C18F4
	0x03646854 LDR W8, [X20 + 0x70]
	0x03646858 ADD W8, W8, W0
	0x0364685C STR W8, [X20 + 0x78]
	0x03646860 MOV W19, W31
	0x03646864 LDR X8, [X20]
	0x03646868 MOV X0, X20
	0x0364686C LDP X9, X1, [X8 + 0x188]
	0x03646870 BLR X9
	0x03646874 TBZ X0, 0x0, 0x36468F4
	0x03646878 LDRB W8, [X20 + 0x74]
	0x0364687C CBZ W8, 0x364690C
	0x03646880 TBNZ X19, 0x0, 0x364688C
	0x03646884 MOV X0, X20
	0x03646888 BL 0x3646988
	0x0364688C LDR X8, [X20]
	0x03646890 MOV X0, X20
	0x03646894 LDP X9, X1, [X8 + 0x178]
	0x03646898 BLR X9
	0x0364689C LDR X8, [X20 + 0x60]
	0x036468A0 CBZ X8, 0x364694C
	0x036468A4 LDR X8, [X8 + 0x68]
	0x036468A8 CBZ X8, 0x364694C
	0x036468AC LDR W9, [X8 + 0x18]
	0x036468B0 CBZ W9, 0x3646950
	0x036468B4 LDR W8, [X8 + 0x20]
	0x036468B8 CMP W8, 0x1
	0x036468BC B.GE 0x364691C
	0x036468C0 LDR X8, [X20 + 0x30]
	0x036468C4 CBZ X8, 0x364694C
	0x036468C8 LDR X9, [X8 + 0x18]
	0x036468CC LDR X8, [X20 + 0x40]
	0x036468D0 STR W9, [X20 + 0x38]
	0x036468D4 CBZ X8, 0x364694C
	0x036468D8 LDR X9, [X8 + 0x18]
	0x036468DC LDR X8, [X20 + 0x50]
	0x036468E0 STR W9, [X20 + 0x48]
	0x036468E4 CBZ X8, 0x364694C
	0x036468E8 LDR X8, [X8 + 0x18]
	0x036468EC MOVZ W19, 0x1
	0x036468F0 STR W8, [X20 + 0x58]
	0x036468F4 LDR W8, [X20 + 0x28]
	0x036468F8 CMP W8, W25
	0x036468FC B.EQ 0x36467E4
	0x03646900 ADD W8, W8, W24
	0x03646904 STR W8, [X20 + 0x28]
	0x03646908 B 0x3646864
	0x0364690C MOV X0, X20
	0x03646910 BL 0x3646BA0
	0x03646914 TBZ X19, 0x0, 0x3646884
	0x03646918 B 0x364688C
	0x0364691C LDR W8, [X31 + 0xC]
	0x03646920 MOV X0, X20
	0x03646924 AND W1, W8, 0x1
	0x03646928 BL 0x3646B5C
	0x0364692C LDP X20, X19, [X31 + 0x60]
	0x03646930 LDP X22, X21, [X31 + 0x50]
	0x03646934 LDP X24, X23, [X31 + 0x40]
	0x03646938 LDP X26, X25, [X31 + 0x30]
	0x0364693C LDP X28, X27, [X31 + 0x20]
	0x03646940 LDP X29, X30, [X31 + 0x10]
	0x03646944 ADD X31, X31, 0x70
	0x03646948 RET
	0x0364694C BL 0x1C16F20
	0x03646950 BL 0x1C16F28
	0x03646954 STP X30, X19, [X31 - 0x10]!
	0x03646958 LDRB W8, [X0 + 0x74]
	0x0364695C CBNZ W8, 0x3646980
	0x03646960 MOVZ W8, 0x3E8
	0x03646964 MOV X19, X0
	0x03646968 STR W8, [X0 + 0x7C]
	0x0364696C MOV X0, X31
	0x03646970 BL 0x33C18F4
	0x03646974 LDR W8, [X19 + 0x70]
	0x03646978 ADD W8, W8, W0
	0x0364697C STR W8, [X19 + 0x78]
	0x03646980 LDP X30, X19, [X31], #0x10
	0x03646984 RET
	0x03646988 SUB X31, X31, 0x60
	0x0364698C STP X30, X27, [X31 + 0x10]
	0x03646990 STP X26, X25, [X31 + 0x20]
	0x03646994 STP X24, X23, [X31 + 0x30]
	0x03646998 STP X22, X21, [X31 + 0x40]
	0x0364699C STP X20, X19, [X31 + 0x50]
	0x036469A0 ADRP X20, 0xD9A000
	0x036469A4 LDRB W8, [X20 + 0x5AE]
	0x036469A8 MOV X19, X0
	0x036469AC TBNZ X8, 0x0, 0x36469DC
	0x036469B0 ADRP X0, 0xAAE000
	0x036469B4 LDR X0, [X0 + 0xE58]
	0x036469B8 BL 0x1C16CF4
	0x036469BC ADRP X0, 0xAF6000
	0x036469C0 LDR X0, [X0 + 0x5E8]
	0x036469C4 BL 0x1C16CF4
	0x036469C8 ADRP X0, 0xAF5000
	0x036469CC LDR X0, [X0 + 0x798]
	0x036469D0 BL 0x1C16CF4
	0x036469D4 MOVZ W8, 0x1
	0x036469D8 STRB W8, [X20 + 0x5AE]
	0x036469DC LDP X0, X20, [X19 + 0x60]
	0x036469E0 CBZ X0, 0x3646A04
	0x036469E4 LDR X8, [X0]
	0x036469E8 LDR X2, [X19 + 0x20]
	0x036469EC LDP W3, W4, [X19 + 0x10]
	0x036469F0 LDR W5, [X19 + 0x18]
	0x036469F4 LDP X9, X6, [X8 + 0x178]
	0x036469F8 MOV X1, X20
	0x036469FC BLR X9
	0x03646A00 B 0x3646A98
	0x03646A04 CBZ X20, 0x3646B58
	0x03646A08 LDR X25, [X20 + 0x30]
	0x03646A0C LDR W22, [X20 + 0x48]
	0x03646A10 LDR X23, [X19 + 0x20]
	0x03646A14 LDP W24, W27, [X19 + 0x10]
	0x03646A18 LDR W21, [X19 + 0x18]
	0x03646A1C CBZ X25, 0x3646A60
	0x03646A20 ADRP X8, 0xAF6000
	0x03646A24 LDR X8, [X8 + 0x5E8]
	0x03646A28 LDR X0, [X8]
	0x03646A2C BL 0x1C16F10
	0x03646A30 SUB W6, W27, W24
	0x03646A34 MOV X1, X20
	0x03646A38 MOV X2, X25
	0x03646A3C MOV W3, W22
	0x03646A40 MOV X4, X23
	0x03646A44 MOV W5, W24
	0x03646A48 MOV W7, W21
	0x03646A4C MOV X26, X0
	0x03646A50 STR X31, [X31]
	0x03646A54 BL 0x363187C
	0x03646A58 STR X26, [X19 + 0x60]
	0x03646A5C B 0x3646A98
	0x03646A60 ADRP X8, 0xAF5000
	0x03646A64 LDR X8, [X8 + 0x798]
	0x03646A68 LDR X0, [X8]
	0x03646A6C BL 0x1C16F10
	0x03646A70 SUB W5, W27, W24
	0x03646A74 MOV X1, X20
	0x03646A78 MOV W2, W22
	0x03646A7C MOV X3, X23
	0x03646A80 MOV W4, W24
	0x03646A84 MOV W6, W21
	0x03646A88 MOV X7, X31
	0x03646A8C MOV X25, X0
	0x03646A90 BL 0x3630ACC
	0x03646A94 STR X25, [X19 + 0x60]
	0x03646A98 LDR X8, [X19 + 0x50]
	0x03646A9C CBZ X8, 0x3646AC8
	0x03646AA0 LDR X9, [X19 + 0x30]
	0x03646AA4 CBZ X9, 0x3646B58
	0x03646AA8 LDR X10, [X9 + 0x18]
	0x03646AAC LDR X9, [X19 + 0x40]
	0x03646AB0 STR W10, [X19 + 0x38]
	0x03646AB4 CBZ X9, 0x3646B58
	0x03646AB8 LDR X9, [X9 + 0x18]
	0x03646ABC STR W9, [X19 + 0x48]
	0x03646AC0 LDR W22, [X8 + 0x18]
	0x03646AC4 B 0x3646B38
	0x03646AC8 LDR X8, [X19]
	0x03646ACC MOV X0, X19
	0x03646AD0 LDP X9, X1, [X8 + 0x198]
	0x03646AD4 BLR X9
	0x03646AD8 ADRP X23, 0xAAE000
	0x03646ADC LDR W8, [X19 + 0x5C]
	0x03646AE0 LDR X23, [X23 + 0xE58]
	0x03646AE4 MOVZ W22, 0x20
	0x03646AE8 MOVZ W9, 0x10
	0x03646AEC UBFM W8, W8, 0x1D, 0x1C
	0x03646AF0 LDR X0, [X23]
	0x03646AF4 CMP W8, 0x20
	0x03646AF8 CSEL W20, W8, W22, GT
	0x03646AFC CMP W8, 0x10
	0x03646B00 MOV W1, W20
	0x03646B04 CSEL W21, W8, W9, GT
	0x03646B08 BL 0x1C16D6C
	0x03646B0C STR X0, [X19 + 0x30]
	0x03646B10 STR W20, [X19 + 0x38]
	0x03646B14 LDR X0, [X23]
	0x03646B18 MOV W1, W21
	0x03646B1C BL 0x1C16D6C
	0x03646B20 STR X0, [X19 + 0x40]
	0x03646B24 STR W21, [X19 + 0x48]
	0x03646B28 LDR X0, [X23]
	0x03646B2C MOVZ W1, 0x20
	0x03646B30 BL 0x1C16D6C
	0x03646B34 STR X0, [X19 + 0x50]
	0x03646B38 STR W22, [X19 + 0x58]
	0x03646B3C LDP X20, X19, [X31 + 0x50]
	0x03646B40 LDP X22, X21, [X31 + 0x40]
	0x03646B44 LDP X24, X23, [X31 + 0x30]
	0x03646B48 LDP X26, X25, [X31 + 0x20]
	0x03646B4C LDP X30, X27, [X31 + 0x10]
	0x03646B50 ADD X31, X31, 0x60
	0x03646B54 RET
	0x03646B58 BL 0x1C16F20
	0x03646B5C STP X30, X19, [X31 - 0x10]!
	0x03646B60 TBZ X1, 0x0, 0x3646B6C
	0x03646B64 MOV X19, X31
	0x03646B68 B 0x3646B90
	0x03646B6C LDR X19, [X0 + 0x60]
	0x03646B70 STR X31, [X0 + 0x60]
	0x03646B74 CBZ X19, 0x3646B9C
	0x03646B78 LDR X8, [X19]
	0x03646B7C LDR W1, [X0 + 0x28]
	0x03646B80 MOV X0, X19
	0x03646B84 LDR X9, [X8 + 0x208]
	0x03646B88 LDR X2, [X8 + 0x210]
	0x03646B8C BLR X9
	0x03646B90 MOV X0, X19
	0x03646B94 LDP X30, X19, [X31], #0x10
	0x03646B98 RET
	0x03646B9C BL 0x1C16F20
	0x03646BA0 STR X30, [X31 - 0x30]!
	0x03646BA4 STP X22, X21, [X31 + 0x10]
	0x03646BA8 STP X20, X19, [X31 + 0x20]
	0x03646BAC LDR W8, [X0 + 0x7C]
	0x03646BB0 SUBS W8, W8, 0x1
	0x03646BB4 STR W8, [X0 + 0x7C]
	0x03646BB8 B.NE 0x3646BE8
	0x03646BBC MOVZ W8, 0x3E8
	0x03646BC0 MOV X19, X0
	0x03646BC4 STR W8, [X0 + 0x7C]
	0x03646BC8 MOV X0, X31
	0x03646BCC BL 0x33C18F4
	0x03646BD0 LDR W8, [X19 + 0x78]
	0x03646BD4 CMP W0, W8
	0x03646BD8 B.LT 0x3646BE8
	0x03646BDC CMP W0, 0x1
	0x03646BE0 B.LT 0x3646BF8
	0x03646BE4 TBZ X8, 0x1F, 0x3646BF8
	0x03646BE8 LDP X20, X19, [X31 + 0x20]
	0x03646BEC LDP X22, X21, [X31 + 0x10]
	0x03646BF0 LDR X30, [X31], #0x30
	0x03646BF4 RET
	0x03646BF8 LDR X21, [X19 + 0x68]
	0x03646BFC LDR X20, [X19 + 0x20]
	0x03646C00 MOV X0, X21
	0x03646C04 BL 0x19903C0
	0x03646C08 ADRP X0, 0xAAF000
	0x03646C0C LDR X21, [X21 + 0x18]
	0x03646C10 LDR W19, [X19 + 0x70]
	0x03646C14 LDR X0, [X0 + 0x570]
	0x03646C18 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0xD9B000
	015 Move W8, [X20+1425]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {62}
	021 Move X0, 0xAF7000
	022 Move X0, [X0+1456]
	023 Call 0x1C17CF4
	024 Move X0, 0xAF7000
	025 Move X0, [X0+1464]
	026 Call 0x1C17CF4
	027 Move X0, 0xAB7000
	028 Move X0, [X0+2536]
	029 Call 0x1C17CF4
	030 Move X0, 0xADE000
	031 Move X0, [X0+3512]
	032 Call 0x1C17CF4
	033 Move X0, 0xADB000
	034 Move X0, [X0+3968]
	035 Call 0x1C17CF4
	036 Move X0, 0xAAE000
	037 Move X0, [X0+3608]
	038 Call 0x1C17CF4
	039 Move X0, 0xAAF000
	040 Move X0, [X0+3672]
	041 Call 0x1C17CF4
	042 Move X0, 0xAAE000
	043 Move X0, [X0+1880]
	044 Call 0x1C17CF4
	045 Move X0, 0xAAF000
	046 Move X0, [X0+440]
	047 Call 0x1C17CF4
	048 Move X0, 0xAAF000
	049 Move X0, [X0+448]
	050 Call 0x1C17CF4
	051 Move X0, 0xAAF000
	052 Move X0, [X0+456]
	053 Call 0x1C17CF4
	054 Move X0, 0xAD6000
	055 Move X0, [X0+2904]
	056 Call 0x1C17CF4
	057 Move X0, 0xAAF000
	058 Move X0, [X0+464]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X20+1425], W8
	062 Move X25, 0xAD6000
	063 Move X26, 0xAAE000
	064 Move X8, [X19+104]
	065 Move X25, [X25+2904]
	066 Move X26, [X26+1880]
	067 Compare X8, 0
	068 JumpIfEqual {137}
	069 Move X8, [X19+120]
	070 Compare X8, 0
	071 JumpIfEqual {136}
	072 Move W20, W31
	073 Move W8, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move W1, [X19+80]
	076 Move X0, X19
	077 Call RegexParser.IsCaptureSlot, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {85}
	082 Move W8, [X19+80]
	083 Add W1, W8, 1
	084 Move [X19+80], W1
	085 Move X0, [X19+120]
	086 Compare X0, 0
	087 JumpIfEqual {136}
	088 Move X2, [X25]
	089 Move W1, W20
	090 Call List`1<Object>.get_Item, X0, X1
	091 Move X8, [X19+104]
	092 Compare X8, 0
	093 JumpIfEqual {136}
	094 Move X9, [X8]
	095 Move X21, X0
	096 Move X0, X8
	097 Move X1, X21
	098 Move X10, [X9+728]
	099 Move X2, [X9+736]
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Compare X0, 0
	102 JumpIfEqual {136}
	103 Move X8, [X0]
	104 Move X1, [X26]
	105 Move X8, [X8+64]
	106 Move X9, [X1+64]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Call 0x1C17E08
	109 Move W22, [X0]
	110 Move W8, [X19+80]
	111 Move X0, [X26]
	112 Move X23, [X19+104]
	113 Add X1, X31, 12
	114 Move [X31+12], W8
	115 Call 0x1C17E04
	116 Compare X23, 0
	117 JumpIfEqual {136}
	118 Move X8, [X23]
	119 Move X2, X0
	120 Move X0, X23
	121 Move X1, X21
	122 Move X9, [X8+744]
	123 Move X3, [X8+752]
	124 NotImplemented "Instruction BLR not yet implemented."
	125 Move W1, [X19+80]
	126 Move X0, X19
	127 Move W2, W22
	128 Call RegexParser.NoteCaptureSlot, X0, X1, X2
	129 Move W9, [X19+80]
	130 Move X8, [X19+120]
	131 Add W20, W20, 1
	132 Add W9, W9, 1
	133 Move [X19+80], W9
	134 Compare X8, 0
	135 JumpIfNotEqual {73}
	136 Call 0x1C17F20
	137 Move W1, [X19+84]
	138 Move W8, [X19+88]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X8, 0xAAF000
	141 Move X8, [X8+3672]
	142 Move X0, [X8]
	143 Call 0x1C17D6C
	144 Move X8, [X19+96]
	145 Move [X19+112], X0
	146 Compare X8, 0
	147 JumpIfEqual {136}
	148 Move X9, [X8]
	149 Move X0, X8
	150 Move X10, [X9+760]
	151 Move X1, [X9+768]
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Compare X0, 0
	154 JumpIfEqual {136}
	155 Move X23, 0xAAE000
	156 Move X24, 0xADB000
	157 Move X23, [X23+3608]
	158 Move X24, [X24+3968]
	159 Move X20, X0
	160 Move W22, W31
	161 Move X8, [X20]
	162 Move X1, [X23]
	163 NotImplemented "Instruction LDRH not yet implemented."
	164 Compare X9, 0
	165 JumpIfEqual {172}
	166 Move X10, [X8+176]
	167 Add X10, X10, 8
	168 NotImplemented "Instruction LDUR not yet implemented."
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Subtract X9, X9, 1
	171 Add X10, X10, 16
	172 Move X0, X20
	173 Move W2, W31
	174 Call 0x1C5D788
	175 NotImplemented "Instruction LDRSW not yet implemented."
	176 Add X8, X8, X9
	177 Add X0, X8, 312
	178 Move X8, [X0]
	179 Move X1, [X0+8]
	180 Move X0, X20
	181 NotImplemented "Instruction BLR not yet implemented."
	182 Move X21, [X19+112]
	183 Move TEMP, X0
	184 And TEMP, TEMP, 1
	185 Compare TEMP, 1
	186 JumpIfNotEqual {226}
	187 Move X8, [X20]
	188 Move X1, [X24]
	189 NotImplemented "Instruction LDRH not yet implemented."
	190 Compare X9, 0
	191 JumpIfEqual {198}
	192 Move X10, [X8+176]
	193 Add X10, X10, 8
	194 NotImplemented "Instruction LDUR not yet implemented."
	195 NotImplemented "Instruction CMP not yet implemented."
	196 Subtract X9, X9, 1
	197 Add X10, X10, 16
	198 Move X0, X20
	199 Move W2, W31
	200 Call 0x1C5D788
	201 NotImplemented "Instruction LDRSW not yet implemented."
	202 Add X8, X8, X9
	203 Add X0, X8, 312
	204 Move X8, [X0]
	205 Move X1, [X0+8]
	206 Move X0, X20
	207 NotImplemented "Instruction BLR not yet implemented."
	208 Compare X21, 0
	209 JumpIfEqual {136}
	210 Compare X0, 0
	211 JumpIfEqual {136}
	212 Move X8, [X0]
	213 Move X1, [X26]
	214 Move X8, [X8+64]
	215 Move X9, [X1+64]
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Call 0x1C17E08
	218 Move W8, [X21+24]
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move W8, [X0]
	221 Move X9, W22
	222 Add W10, W22, 1
	223 Add X9, X21, X9
	224 Move W22, W10
	225 Move [X9+32], W8
	226 Move X8, 0xAF7000
	227 Move X8, [X8+1464]
	228 Move X0, [X8]
	229 Call Comparer`1<Int32>.get_Default
	230 Move X8, 0xAF7000
	231 Move X8, [X8+1456]
	232 Move X1, X0
	233 Move X0, X21
	234 Move X2, [X8]
	235 Call 0x2158CE8, X0, X1
	236 Move X22, 0xAAF000
	237 Move X21, 0xAAF000
	238 Move X8, [X19+104]
	239 Move X22, [X22+464]
	240 Move X21, [X21+448]
	241 Compare X8, 0
	242 JumpIfEqual {274}
	243 Move X0, [X22]
	244 Move X20, [X19+120]
	245 Call 0x1C17F10
	246 Move X1, [X21]
	247 Move X21, X0
	248 Call List`1<Object>..ctor, X0
	249 Move [X19+120], X21
	250 Compare X20, 0
	251 JumpIfEqual {136}
	252 Move X2, [X25]
	253 Move X21, [X19+104]
	254 Move X0, X20
	255 Move W1, W31
	256 Call List`1<Object>.get_Item, X0, X1
	257 Compare X21, 0
	258 JumpIfEqual {136}
	259 Move X8, [X21]
	260 Move X1, X0
	261 Move X0, X21
	262 Move X9, [X8+728]
	263 Move X2, [X8+736]
	264 NotImplemented "Instruction BLR not yet implemented."
	265 Compare X0, 0
	266 JumpIfEqual {136}
	267 Move X8, [X0]
	268 Move X1, [X26]
	269 Move X8, [X8+64]
	270 Move X9, [X1+64]
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Call 0x1C17E08
	273 Move W29, [X0]
	274 Move X8, [X19+112]
	275 Compare X8, 0
	276 JumpIfEqual {420}
	277 Move X8, 0xADE000
	278 Move X8, [X8+3512]
	279 Move X0, [X8]
	280 Call 0x1C17F10
	281 Move X1, X31
	282 Move X20, X0
	283 Call Hashtable..ctor, X0
	284 Move [X19+104], X20
	285 Move X0, [X22]
	286 Call 0x1C17F10
	287 Move X1, [X21]
	288 Move X21, X0
	289 Call List`1<Object>..ctor, X0
	290 Move X20, X31
	291 Move [X19+120], X21
	292 Move TEMP, 0
	293 Not TEMP
	294 Move W29, TEMP
	295 Move W8, [X19+84]
	296 NotImplemented "Instruction CMP not yet implemented."
	297 Move X28, 0xAAF000
	298 Move X28, [X28+440]
	299 Move X27, X31
	300 Move W21, W31
	301 Move X8, [X19+112]
	302 Compare X8, 0
	303 JumpIfEqual {308}
	304 Move W9, [X8+24]
	305 NotImplemented "Instruction CMP not yet implemented."
	306 Add X8, X8, X27
	307 Move W22, [X8+32]
	308 Move W22, W27
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Compare X20, 0
	311 JumpIfEqual {136}
	312 Move X2, [X25]
	313 Move X22, [X19+120]
	314 Move X0, X20
	315 Move W1, W21
	316 Call List`1<Object>.get_Item, X0, X1
	317 Compare X22, 0
	318 JumpIfEqual {136}
	319 Move W10, [X22+28]
	320 Move X8, [X22+16]
	321 Move X9, [X28]
	322 Add W10, W10, 1
	323 Move [X22+28], W10
	324 Compare X8, 0
	325 JumpIfEqual {136}
	326 NotImplemented "Instruction LDRSW not yet implemented."
	327 Move W11, [X8+24]
	328 Move X1, X0
	329 NotImplemented "Instruction CMP not yet implemented."
	330 Add W9, W10, 1
	331 Add X8, X8, X10
	332 Move [X22+24], W9
	333 Move [X8+32], X1
	334 Move X8, 0xAB7000
	335 Move X8, [X8+2536]
	336 Move X23, [X19+72]
	337 Move X0, [X8]
	338 Move W8, [X0+224]
	339 Compare W8, 0
	340 JumpIfNotEqual {342}
	341 Call 0x1C17DFC
	342 Move W0, W22
	343 Move X1, X23
	344 Move X2, X31
	345 Call Convert.ToString, X0, X1
	346 Move X8, [X19+120]
	347 Compare X8, 0
	348 JumpIfEqual {136}
	349 Move W11, [X8+28]
	350 Move X9, [X8+16]
	351 Move X10, [X28]
	352 Add W11, W11, 1
	353 Move [X8+28], W11
	354 Compare X9, 0
	355 JumpIfEqual {136}
	356 NotImplemented "Instruction LDRSW not yet implemented."
	357 Move W12, [X9+24]
	358 Move X23, X0
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Add W10, W11, 1
	361 Add X9, X9, X11
	362 Move [X8+24], W10
	363 Move [X9+32], X23
	364 Move X9, [X10+32]
	365 Move X0, X8
	366 Move X1, X23
	367 Move X9, [X9+192]
	368 Move X2, [X9+112]
	369 Call List`1<Object>.AddWithResize, X0, X1
	370 Move X0, [X26]
	371 Move X24, [X19+104]
	372 Add X1, X31, 8
	373 Move [X31+8], W22
	374 Call 0x1C17E04
	375 Compare X24, 0
	376 JumpIfEqual {136}
	377 Move X8, [X24]
	378 Move X2, X0
	379 Move X0, X24
	380 Move X1, X23
	381 Move X9, [X8+744]
	382 Move X3, [X8+752]
	383 NotImplemented "Instruction BLR not yet implemented."
	384 Move X8, [X9+32]
	385 Move X0, X22
	386 Move X8, [X8+192]
	387 Move X2, [X8+112]
	388 Call List`1<Object>.AddWithResize, X0, X1
	389 Move W8, [X20+24]
	390 Add W21, W21, 1
	391 NotImplemented "Instruction CMP not yet implemented."
	392 Move TEMP, 0
	393 Not TEMP
	394 Move W29, TEMP
	395 Move X2, [X25]
	396 Move X22, [X19+104]
	397 Move X0, X20
	398 Move W1, W21
	399 Call List`1<Object>.get_Item, X0, X1
	400 Compare X22, 0
	401 JumpIfEqual {136}
	402 Move X8, [X22]
	403 Move X1, X0
	404 Move X0, X22
	405 Move X9, [X8+728]
	406 Move X2, [X8+736]
	407 NotImplemented "Instruction BLR not yet implemented."
	408 Compare X0, 0
	409 JumpIfEqual {136}
	410 Move X8, [X0]
	411 Move X1, [X26]
	412 Move X8, [X8+64]
	413 Move X9, [X1+64]
	414 NotImplemented "Instruction CMP not yet implemented."
	415 Call 0x1C17E08
	416 Move W29, [X0]
	417 NotImplemented "Instruction LDRSW not yet implemented."
	418 Add X27, X27, 1
	419 NotImplemented "Instruction CMP not yet implemented."
	420 Move X20, [X31+96]
	421 Move X19, [X31+104]
	422 Move X22, [X31+80]
	423 Move X21, [X31+88]
	424 Move X24, [X31+64]
	425 Move X23, [X31+72]
	426 Move X26, [X31+48]
	427 Move X25, [X31+56]
	428 Move X28, [X31+32]
	429 Move X27, [X31+40]
	430 Move X29, [X31+16]
	431 Move X30, [X31+24]
	432 Add X31, X31, 112
	433 Return 
	434 Call 0x1C181E0
	435 Call 0x1C17F28

Method: System.Int32 CaptureSlotFromName(System.String capname)

Disassembly:
	0x0364574C STR W8, [X31 + 0xC]
	0x03645750 BL 0x1C16E04
	0x03645754 CBZ X23, 0x364579C
	0x03645758 LDR X8, [X23]
	0x0364575C MOV X2, X0
	0x03645760 MOV X0, X23
	0x03645764 MOV X1, X21
	0x03645768 LDR X9, [X8 + 0x2E8]
	0x0364576C LDR X3, [X8 + 0x2F0]
	0x03645770 BLR X9
	0x03645774 LDR W1, [X19 + 0x50]
	0x03645778 MOV X0, X19
	0x0364577C MOV W2, W22
	0x03645780 BL 0x36452E0
	0x03645784 LDR W9, [X19 + 0x50]
	0x03645788 LDR X8, [X19 + 0x78]
	0x0364578C ADD W20, W20, 0x1
	0x03645790 ADD W9, W9, 0x1
	0x03645794 STR W9, [X19 + 0x50]
	0x03645798 CBNZ X8, 0x36456B4
	0x0364579C BL 0x1C16F20
	0x036457A0 LDP W1, W8, [X19 + 0x54]
	0x036457A4 CMP W1, W8
	0x036457A8 B.GE 0x3645924
	0x036457AC ADRP X8, 0xAAF000
	0x036457B0 LDR X8, [X8 + 0xE58]
	0x036457B4 LDR X0, [X8]
	0x036457B8 BL 0x1C16D6C
	0x036457BC LDR X8, [X19 + 0x60]
	0x036457C0 STR X0, [X19 + 0x70]
	0x036457C4 CBZ X8, 0x364579C
	0x036457C8 LDR X9, [X8]
	0x036457CC MOV X0, X8
	0x036457D0 LDR X10, [X9 + 0x2F8]
	0x036457D4 LDR X1, [X9 + 0x300]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD9C000
	006 Move W8, [X21+1426]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAAF000
	014 Move X0, [X0+1880]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1426], W8
	018 Move X0, [X20+104]
	019 Compare X0, 0
	020 JumpIfEqual {42}
	021 Move X8, [X0]
	022 Move X1, X19
	023 Move X9, [X8+728]
	024 Move X2, [X8+736]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Compare X0, 0
	027 JumpIfEqual {42}
	028 Move X8, 0xAAF000
	029 Move X8, [X8+1880]
	030 Move X9, [X0]
	031 Move X1, [X8]
	032 Move X8, [X9+64]
	033 Move X9, [X1+64]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Call 0x1C17E08
	036 Move W0, [X0]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Call 0x1C17F20
	043 Call 0x1C181E0

Method: System.Boolean IsCaptureSlot(System.Int32 i)

Disassembly:
	0x03645694 ADRP X26, 0xAAE000
	0x03645698 LDR X8, [X19 + 0x68]
	0x0364569C LDR X25, [X25 + 0xB58]
	0x036456A0 LDR X26, [X26 + 0x758]
	0x036456A4 CBZ X8, 0x36457A0
	0x036456A8 LDR X8, [X19 + 0x78]
	0x036456AC CBZ X8, 0x364579C
	0x036456B0 MOV W20, W31
	0x036456B4 LDR W8, [X8 + 0x18]
	0x036456B8 CMP W20, W8
	0x036456BC B.GE 0x36457A0
	0x036456C0 LDR W1, [X19 + 0x50]
	0x036456C4 MOV X0, X19
	0x036456C8 BL 0x3644694
	0x036456CC TBZ X0, 0x0, 0x36456E0
	0x036456D0 LDR W8, [X19 + 0x50]
	0x036456D4 ADD W1, W8, 0x1
	0x036456D8 STR W1, [X19 + 0x50]
	0x036456DC B 0x36456C4
	0x036456E0 LDR X0, [X19 + 0x78]
	0x036456E4 CBZ X0, 0x364579C
	0x036456E8 LDR X2, [X25]
	0x036456EC MOV W1, W20
	0x036456F0 BL 0x301BCCC
	0x036456F4 LDR X8, [X19 + 0x68]
	0x036456F8 CBZ X8, 0x364579C
	0x036456FC LDR X9, [X8]
	0x03645700 MOV X21, X0
	0x03645704 MOV X0, X8
	0x03645708 MOV X1, X21
	0x0364570C LDR X10, [X9 + 0x2D8]
	0x03645710 LDR X2, [X9 + 0x2E0]
	0x03645714 BLR X10
	0x03645718 CBZ X0, 0x364579C
	0x0364571C LDR X8, [X0]
	0x03645720 LDR X1, [X26]
	0x03645724 LDR X8, [X8 + 0x40]
	0x03645728 LDR X9, [X1 + 0x40]
	0x0364572C CMP X8, X9

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD9C000
	007 Move W8, [X20+1427]
	008 Move W19, W1
	009 Move X21, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAAF000
	015 Move X0, [X0+1880]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1427], W8
	019 Move X20, [X21+96]
	020 Compare X20, 0
	021 JumpIfEqual {34}
	022 Move X8, 0xAAF000
	023 Move X8, [X8+1880]
	024 Add X1, X31, 12
	025 Move [X31+12], W19
	026 Move X0, [X8]
	027 Call 0x1C17E04
	028 Move X8, [X20]
	029 Move X1, X0
	030 Move X0, X20
	031 Move X9, [X8+696]
	032 Move X2, [X8+704]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move TEMP, X19
	035 And TEMP, TEMP, -2147483648
	036 Compare TEMP, -2147483648
	037 JumpIfEqual {41}
	038 Move W8, [X21+92]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSET not yet implemented."
	041 Move W0, W31
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+16]
	045 Move X21, [X31+24]
	046 And W0, W0, 1
	047 Add X31, X31, 48
	048 Return X0

Method: System.Boolean IsCaptureName(System.String capname)

Disassembly:
	0x03645730 B.NE 0x3645C14
	0x03645734 BL 0x1C16E08
	0x03645738 LDR W22, [X0]
	0x0364573C LDR W8, [X19 + 0x50]
	0x03645740 LDR X0, [X26]
	0x03645744 LDR X23, [X19 + 0x68]
	0x03645748 ADD X1, X31, 0xC

ISIL:
	001 Move X0, [X0+104]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X3, [X8+696]
	006 Move X2, [X8+704]
	007 CallNoReturn X3
	008 Return X0

Method: System.Boolean UseOptionN()

Disassembly:
	0x03645688 MOVZ W8, 0x1
	0x0364568C STRB W8, [X20 + 0x591]
	0x03645690 ADRP X25, 0xAD6000

ISIL:
	001 Move W8, [X0+128]
	002 Move W0, W8
	003 ShiftRight W0, 2
	004 And W0, W0, 3
	005 Return X0

Method: System.Boolean UseOptionI()

Disassembly:
	0x036431D8 BL 0x1C16D08
	0x036431DC MOV X1, X20
	0x036431E0 MOV X2, X31

ISIL:
	001 Move W8, [X0+128]
	002 And W0, W8, 1
	003 Return X0

Method: System.Boolean UseOptionM()

Disassembly:
	0x03644BE4 CBNZ W8, 0x3644BEC
	0x03644BE8 BL 0x1C16DFC
	0x03644BEC MOV W0, W22

ISIL:
	001 Move W8, [X0+128]
	002 Move W0, W8
	003 ShiftRight W0, 1
	004 And W0, W0, 1
	005 Return X0

Method: System.Boolean UseOptionS()

Disassembly:
	0x03644C60 MOV X0, X19
	0x03644C64 MOV X1, X22
	0x03644C68 BL 0x364474C

ISIL:
	001 Move W8, [X0+128]
	002 Move W0, W8
	003 ShiftRight W0, 4
	004 And W0, W0, 15
	005 Return X0

Method: System.Boolean UseOptionX()

Disassembly:
	0x03642B70 MOV X0, X19
	0x03642B74 BL 0x3644594
	0x03642B78 LDR X8, [X19 + 0x68]

ISIL:
	001 Move W8, [X0+128]
	002 Move W0, W8
	003 ShiftRight W0, 5
	004 And W0, W0, 31
	005 Return X0

Method: System.Boolean UseOptionE()

Disassembly:
	0x03645288 ADD W9, W0, 0x20
	0x0364528C CMP W8, 0x19
	0x03645290 CSEL W8, W0, W9, HI

ISIL:
	001 Move W8, [X0+129]
	002 And W0, W8, 1
	003 Return X0

Method: System.Boolean IsSpecial(System.Char ch)

Disassembly:
	0x03642DFC B 0x3642C8C
	0x03642E00 MOV X0, X19
	0x03642E04 BL 0x3643D80
	0x03642E08 MOV W20, W0
	0x03642E0C MOV X0, X19
	0x03642E10 MOV W1, W20
	0x03642E14 BL 0x3644694
	0x03642E18 LDR X8, [X19 + 0x38]
	0x03642E1C ANDS W31, W0, 0x1
	0x03642E20 CSINV W20, W20, W31, NE
	0x03642E24 CBZ X8, 0x36430D4
	0x03642E28 LDR W8, [X8 + 0x10]
	0x03642E2C LDR W9, [X19 + 0x40]
	0x03642E30 SUB W8, W8, W9
	0x03642E34 CMP W8, 0x1
	0x03642E38 B.LT 0x3642E60
	0x03642E3C MOV X0, X19
	0x03642E40 BL 0x3641BB0
	0x03642E44 CMP W23, W0, UXTH
	0x03642E48 B.EQ 0x3642E60
	0x03642E4C MOV X0, X19
	0x03642E50 BL 0x3641BB0
	0x03642E54 AND W8, W0, 0xFFFF
	0x03642E58 CMP W8, 0x2D
	0x03642E5C B.NE 0x36430C8
	0x03642E60 CBZ W20, 0x364310C
	0x03642E64 ADDS W31, W20, 0x1
	0x03642E68 B.EQ 0x3642E74
	0x03642E6C MOV W24, W31
	0x03642E70 B 0x3642E90
	0x03642E74 MOVZ W24, 0x1
	0x03642E78 B 0x3642F5C
	0x03642E7C AND W8, W21, 0xFFFF
	0x03642E80 CMP W8, 0x2D
	0x03642E84 B.NE 0x36430C8
	0x03642E88 MOVN W20, 0x0
	0x03642E8C MOVZ W24, 0x1
	0x03642E90 LDR X8, [X19 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9F000
	005 Move W8, [X20+1428]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAFA000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1428], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W31
	019 Move X20, 0xAFA000
	020 Move X20, [X20+2056]
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X20]
	027 Move X8, [X0+184]
	028 Move X8, [X8]
	029 Compare X8, 0
	030 JumpIfEqual {41}
	031 Move W9, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X8, W19
	034 Move W8, [X8+32]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return X0
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: System.Boolean IsStopperX(System.Char ch)

Disassembly:
	0x03642BD4 MOV X0, X19
	0x03642BD8 MOV X1, X20
	0x03642BDC BL 0x364474C
	0x03642BE0 LDR X8, [X22]
	0x03642BE4 MOV W20, W0
	0x03642BE8 MOV X0, X8
	0x03642BEC B 0x364301C
	0x03642BF0 LDR W9, [X19 + 0x40]
	0x03642BF4 LDR X8, [X19 + 0x18]
	0x03642BF8 SUB W9, W9, 0x1
	0x03642BFC STR W9, [X19 + 0x40]
	0x03642C00 CBZ X8, 0x36430D4
	0x03642C04 LDR W8, [X8 + 0x10]
	0x03642C08 CMP W8, 0x22
	0x03642C0C B.EQ 0x3642C18
	0x03642C10 MOV X0, X19
	0x03642C14 BL 0x36447D8
	0x03642C18 LDR X8, [X19 + 0x38]
	0x03642C1C CBZ X8, 0x36430D4
	0x03642C20 LDR W8, [X8 + 0x10]
	0x03642C24 LDR W9, [X19 + 0x40]
	0x03642C28 CMP W8, W9
	0x03642C2C B.EQ 0x36430D8
	0x03642C30 MOV X0, X19
	0x03642C34 BL 0x3643D54
	0x03642C38 AND W8, W0, 0xFFFF
	0x03642C3C CMP W8, 0x29
	0x03642C40 B.EQ 0x3642C54
	0x03642C44 CMP W8, 0x3A
	0x03642C48 B.NE 0x36430D8
	0x03642C4C MOVZ W21, 0x1D
	0x03642C50 B 0x3642C8C
	0x03642C54 MOV X19, X31
	0x03642C58 B 0x3642CAC
	0x03642C5C LDR W8, [X19 + 0x80]
	0x03642C60 AND W8, W8, 0xFFFFFFBF
	0x03642C64 STR W8, [X19 + 0x80]
	0x03642C68 MOVZ W21, 0x1E

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9F000
	005 Move W8, [X20+1429]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAFA000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1429], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W31
	019 Move X20, 0xAFA000
	020 Move X20, [X20+2056]
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X20]
	027 Move X8, [X0+184]
	028 Move X8, [X8]
	029 Compare X8, 0
	030 JumpIfEqual {41}
	031 Move W9, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X8, W19
	034 Move W8, [X8+32]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return X0
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: System.Boolean IsQuantifier(System.Char ch)

Disassembly:
	0x03642E94 CBZ X8, 0x36430D4
	0x03642E98 LDR W8, [X8 + 0x10]
	0x03642E9C LDR W9, [X19 + 0x40]
	0x03642EA0 SUB W8, W8, W9
	0x03642EA4 CMP W8, 0x2
	0x03642EA8 B.LT 0x3642F5C
	0x03642EAC MOV X0, X19
	0x03642EB0 BL 0x3641BB0
	0x03642EB4 AND W8, W0, 0xFFFF
	0x03642EB8 CMP W8, 0x2D
	0x03642EBC B.NE 0x3642F5C
	0x03642EC0 LDR W8, [X19 + 0x40]
	0x03642EC4 MOV X0, X19
	0x03642EC8 ADD W8, W8, 0x1
	0x03642ECC STR W8, [X19 + 0x40]
	0x03642ED0 BL 0x3641BB0
	0x03642ED4 SUB W8, W0, 0x30
	0x03642ED8 AND W8, W8, 0xFFFF
	0x03642EDC CMP W8, 0x9
	0x03642EE0 B.LS 0x3643080
	0x03642EE4 ADRP X8, 0xAF9000
	0x03642EE8 LDR X8, [X8 + 0x8E0]
	0x03642EEC MOV W21, W0
	0x03642EF0 LDR X0, [X8]
	0x03642EF4 LDR W8, [X0 + 0xE0]
	0x03642EF8 CBNZ W8, 0x3642F00
	0x03642EFC BL 0x1C16DFC
	0x03642F00 MOV W0, W21
	0x03642F04 MOV X1, X31
	0x03642F08 BL 0x36357F0
	0x03642F0C TBZ X0, 0x0, 0x36430C8
	0x03642F10 MOV X0, X19
	0x03642F14 BL 0x3644594
	0x03642F18 LDR X8, [X19 + 0x68]
	0x03642F1C MOV X21, X0
	0x03642F20 CBZ X8, 0x3643188
	0x03642F24 LDR X9, [X8]
	0x03642F28 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9F000
	005 Move W8, [X20+1430]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAFA000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1430], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W31
	019 Move X20, 0xAFA000
	020 Move X20, [X20+2056]
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X20]
	027 Move X8, [X0+184]
	028 Move X8, [X8]
	029 Compare X8, 0
	030 JumpIfEqual {41}
	031 Move W9, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X8, W19
	034 Move W8, [X8+32]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return X0
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: System.Boolean IsTrueQuantifier()

Disassembly:
	0x03642C6C B 0x3642C8C
	0x03642C70 AND W8, W20, 0xFFFF
	0x03642C74 CMP W8, 0x28
	0x03642C78 B.CC 0x36430D8
	0x03642C7C LDR W8, [X19 + 0x80]
	0x03642C80 ORR W8, W8, 0x40
	0x03642C84 STR W8, [X19 + 0x80]
	0x03642C88 MOVZ W21, 0x1F
	0x03642C8C LDR X0, [X22]
	0x03642C90 LDR W20, [X19 + 0x80]
	0x03642C94 BL 0x1C16F10
	0x03642C98 MOV X1, X31
	0x03642C9C MOV X19, X0
	0x03642CA0 BL 0x33BDD8C
	0x03642CA4 STR W21, [X19 + 0x10]
	0x03642CA8 STR W20, [X19 + 0x34]
	0x03642CAC MOV X0, X19
	0x03642CB0 LDP X20, X19, [X31 + 0x30]
	0x03642CB4 LDP X22, X21, [X31 + 0x20]
	0x03642CB8 LDP X24, X23, [X31 + 0x10]
	0x03642CBC LDR X30, [X31], #0x40
	0x03642CC0 RET
	0x03642CC4 LDR W8, [X19 + 0x40]
	0x03642CC8 SUB W9, W0, 0x30
	0x03642CCC AND W9, W9, 0xFFFF
	0x03642CD0 MOV W21, W0
	0x03642CD4 SUB W8, W8, 0x1
	0x03642CD8 CMP W9, 0x9
	0x03642CDC STR W8, [X19 + 0x40]
	0x03642CE0 B.LS 0x3642E00
	0x03642CE4 ADRP X8, 0xAF9000
	0x03642CE8 LDR X8, [X8 + 0x8E0]
	0x03642CEC LDR X0, [X8]
	0x03642CF0 LDR W8, [X0 + 0xE0]
	0x03642CF4 CBNZ W8, 0x3642CFC
	0x03642CF8 BL 0x1C16DFC
	0x03642CFC MOV W0, W21
	0x03642D00 MOV X1, X31
	0x03642D04 BL 0x36357F0
	0x03642D08 TBZ X0, 0x0, 0x3642E7C
	0x03642D0C MOV X0, X19
	0x03642D10 BL 0x3644594
	0x03642D14 LDR X8, [X19 + 0x68]
	0x03642D18 CBZ X8, 0x3643038
	0x03642D1C LDR X9, [X8]
	0x03642D20 MOV X20, X0
	0x03642D24 MOV X0, X8
	0x03642D28 MOV X1, X20
	0x03642D2C LDR X10, [X9 + 0x2B8]
	0x03642D30 LDR X2, [X9 + 0x2C0]
	0x03642D34 BLR X10
	0x03642D38 TBZ X0, 0x0, 0x3643038
	0x03642D3C MOV X0, X19
	0x03642D40 MOV X1, X20
	0x03642D44 BL 0x364474C
	0x03642D48 MOV W20, W0
	0x03642D4C B 0x364303C
	0x03642D50 LDR X9, [X19 + 0x38]
	0x03642D54 SUB W8, W21, 0x1
	0x03642D58 MOVZ W10, 0x1
	0x03642D5C STR W8, [X19 + 0x40]
	0x03642D60 STRB W10, [X19 + 0x90]
	0x03642D64 CBZ X9, 0x36430D4
	0x03642D68 LDR W9, [X9 + 0x10]
	0x03642D6C SUB W20, W9, W8
	0x03642D70 CMP W20, 0x3
	0x03642D74 B.LT 0x3642DF8
	0x03642D78 MOVZ W1, 0x1
	0x03642D7C MOV X0, X19
	0x03642D80 BL 0x3644650
	0x03642D84 AND W8, W0, 0xFFFF
	0x03642D88 CMP W8, 0x3F
	0x03642D8C B.NE 0x3642DF8
	0x03642D90 MOVZ W1, 0x2
	0x03642D94 MOV X0, X19
	0x03642D98 BL 0x3644650
	0x03642D9C AND W8, W0, 0xFFFF
	0x03642DA0 CMP W8, 0x27
	0x03642DA4 B.EQ 0x364319C
	0x03642DA8 CMP W8, 0x23
	0x03642DAC B.EQ 0x36431A8
	0x03642DB0 CMP W20, 0x4
	0x03642DB4 MOVZ W21, 0x22
	0x03642DB8 B.LT 0x3642C8C
	0x03642DBC AND W8, W0, 0xFFFF
	0x03642DC0 CMP W8, 0x3C
	0x03642DC4 B.NE 0x3642C8C
	0x03642DC8 MOVZ W1, 0x3
	0x03642DCC MOV X0, X19
	0x03642DD0 BL 0x3644650
	0x03642DD4 AND W8, W0, 0xFFFF
	0x03642DD8 CMP W8, 0x21
	0x03642DDC B.EQ 0x3642DF8
	0x03642DE0 MOVZ W1, 0x3
	0x03642DE4 MOV X0, X19
	0x03642DE8 BL 0x3644650
	0x03642DEC AND W8, W0, 0xFFFF
	0x03642DF0 CMP W8, 0x3D
	0x03642DF4 B.NE 0x364319C
	0x03642DF8 MOVZ W21, 0x22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD9F000
	007 Move W8, [X20+1431]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAFA000
	014 Move X0, [X0+2056]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1431], W8
	018 Move X0, [X19+56]
	019 Compare X0, 0
	020 JumpIfEqual {96}
	021 Move W8, [X0+16]
	022 Move W20, [X19+64]
	023 Subtract W22, W8, W20
	024 Move W1, W20
	025 Move X2, X31
	026 Call String.get_Chars, X0, X1
	027 And W8, W0, 0xFFFF
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Subtract W22, W22, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add W21, W20, 1
	032 Move X0, [X19+56]
	033 Compare X0, 0
	034 JumpIfEqual {96}
	035 Move W1, W21
	036 Move X2, X31
	037 Call String.get_Chars, X0, X1
	038 Subtract W8, W0, 48
	039 And W8, W8, 0xFFFF
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract W22, W22, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Add W21, W21, 1
	044 Move X19, 0xAFA000
	045 Move X19, [X19+2056]
	046 Move W21, W0
	047 Move X0, [X19]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X19]
	053 Move X8, [X0+184]
	054 Move X8, [X8]
	055 Compare X8, 0
	056 JumpIfEqual {96}
	057 Move W9, [X8+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X8, X8, W21
	060 Move W8, [X8+32]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSET not yet implemented."
	063 Compare W22, 0
	064 JumpIfEqual {88}
	065 Move W0, 123
	066 Move W21, W20
	067 Subtract W8, W21, W20
	068 NotImplemented "Instruction CMP not yet implemented."
	069 And W8, W0, 0xFFFF
	070 NotImplemented "Instruction CMP not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add W20, W21, 1
	073 Subtract W21, W22, 1
	074 Subtract W21, W21, 1
	075 Move X0, [X19+56]
	076 Compare X0, 0
	077 JumpIfEqual {96}
	078 Move W1, W20
	079 Move X2, X31
	080 Call String.get_Chars, X0, X1
	081 Subtract W8, W0, 48
	082 And W8, W8, 0xFFFF
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add W20, W20, 1
	085 And W8, W0, 0xFFFF
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSET not yet implemented."
	088 Move W0, W31
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X22, [X31+16]
	092 Move X21, [X31+24]
	093 Move X30, [X31+48]
	094 Return X0
	095 Move W0, 1
	096 Call 0x1C17F20
	097 Call 0x1C17F28

Method: System.Boolean IsSpace(System.Char ch)

Disassembly:
	0x036458E4 SXTW X9, W22
	0x036458E8 ADD W10, W22, 0x1
	0x036458EC ADD X9, X21, X9, 0x2, LSL
	0x036458F0 MOV W22, W10
	0x036458F4 STR W8, [X9 + 0x20]
	0x036458F8 B 0x36457F8
	0x036458FC ADRP X8, 0xAF7000
	0x03645900 LDR X8, [X8 + 0x5B8]
	0x03645904 LDR X0, [X8]
	0x03645908 BL 0x291DF4C
	0x0364590C ADRP X8, 0xAF7000
	0x03645910 LDR X8, [X8 + 0x5B0]
	0x03645914 MOV X1, X0
	0x03645918 MOV X0, X21
	0x0364591C LDR X2, [X8]
	0x03645920 BL 0x2157CE8
	0x03645924 ADRP X22, 0xAAF000
	0x03645928 ADRP X21, 0xAAF000
	0x0364592C LDR X8, [X19 + 0x68]
	0x03645930 LDR X22, [X22 + 0x1D0]
	0x03645934 LDR X21, [X21 + 0x1C0]
	0x03645938 CBZ X8, 0x36459B4
	0x0364593C LDR X0, [X22]
	0x03645940 LDR X20, [X19 + 0x78]
	0x03645944 BL 0x1C16F10
	0x03645948 LDR X1, [X21]
	0x0364594C MOV X21, X0
	0x03645950 BL 0x301B7C4
	0x03645954 STR X21, [X19 + 0x78]
	0x03645958 CBZ X20, 0x364579C
	0x0364595C LDR X2, [X25]
	0x03645960 LDR X21, [X19 + 0x68]
	0x03645964 MOV X0, X20
	0x03645968 MOV W1, W31
	0x0364596C BL 0x301BCCC
	0x03645970 CBZ X21, 0x364579C
	0x03645974 LDR X8, [X21]
	0x03645978 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9C000
	005 Move W8, [X20+1432]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAF7000
	012 Move X0, [X0+2056]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1432], W8
	016 And W8, W19, 0xFFFF
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, W31
	019 Move X20, 0xAF7000
	020 Move X20, [X20+2056]
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X20]
	027 Move X8, [X0+184]
	028 Move X8, [X8]
	029 Compare X8, 0
	030 JumpIfEqual {41}
	031 Move W9, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X8, W19
	034 Move W8, [X8+32]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return X0
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: System.Void AddConcatenate(System.Int32 pos, System.Int32 cch, System.Boolean isReplacement)

Disassembly:
	0x03642F2C MOV X1, X21
	0x03642F30 LDR X10, [X9 + 0x2B8]
	0x03642F34 LDR X2, [X9 + 0x2C0]
	0x03642F38 BLR X10
	0x03642F3C TBZ X0, 0x0, 0x3643188
	0x03642F40 MOV X0, X19
	0x03642F44 MOV X1, X21
	0x03642F48 BL 0x364474C
	0x03642F4C LDR X8, [X19 + 0x38]
	0x03642F50 CBZ X8, 0x36430D4
	0x03642F54 MOV W21, W0
	0x03642F58 B 0x36430A4
	0x03642F5C MOVN W21, 0x0
	0x03642F60 CBZ W24, 0x3642F6C
	0x03642F64 ADDS W31, W21, 0x1
	0x03642F68 B.EQ 0x36430D8
	0x03642F6C LDR X8, [X19 + 0x38]
	0x03642F70 CBZ X8, 0x36430D4
	0x03642F74 LDR W8, [X8 + 0x10]
	0x03642F78 LDR W9, [X19 + 0x40]
	0x03642F7C SUB W8, W8, W9
	0x03642F80 CMP W8, 0x1
	0x03642F84 B.LT 0x36430D8
	0x03642F88 MOV X0, X19
	0x03642F8C BL 0x3643D54
	0x03642F90 CMP W23, W0, UXTH
	0x03642F94 B.NE 0x36430D8
	0x03642F98 LDR X0, [X22]
	0x03642F9C LDR W23, [X19 + 0x80]
	0x03642FA0 BL 0x1C16F10
	0x03642FA4 MOV X1, X31
	0x03642FA8 MOV X19, X0
	0x03642FAC BL 0x33BDD8C
	0x03642FB0 MOVZ W8, 0x1C
	0x03642FB4 STP W21, W23, [X19 + 0x30]
	0x03642FB8 STR W8, [X19 + 0x10]
	0x03642FBC STR W20, [X19 + 0x2C]
	0x03642FC0 B 0x3642CAC
	0x03642FC4 MOV X0, X19
	0x03642FC8 BL 0x3643D80
	0x03642FCC STR W0, [X31 + 0xC]
	0x03642FD0 LDR X8, [X19 + 0x38]
	0x03642FD4 CBZ X8, 0x36430D4
	0x03642FD8 LDR W8, [X8 + 0x10]
	0x03642FDC LDR W9, [X19 + 0x40]
	0x03642FE0 SUB W8, W8, W9
	0x03642FE4 CMP W8, 0x1
	0x03642FE8 B.LT 0x3643118
	0x03642FEC MOV W20, W0
	0x03642FF0 MOV X0, X19
	0x03642FF4 BL 0x3643D54
	0x03642FF8 AND W8, W0, 0xFFFF
	0x03642FFC CMP W8, 0x29
	0x03643000 B.NE 0x3643118
	0x03643004 MOV X0, X19
	0x03643008 MOV W1, W20
	0x0364300C BL 0x3644694
	0x03643010 TBZ X0, 0x0, 0x3643150
	0x03643014 LDR W21, [X19 + 0x80]
	0x03643018 LDR X0, [X22]
	0x0364301C BL 0x1C16F10
	0x03643020 MOV X1, X31
	0x03643024 MOV X19, X0
	0x03643028 BL 0x33BDD8C
	0x0364302C MOVZ W8, 0x21
	0x03643030 STR W21, [X19 + 0x34]
	0x03643034 B 0x3642FB8
	0x03643038 MOVN W20, 0x0
	0x0364303C LDR X8, [X19 + 0x38]
	0x03643040 CBZ X8, 0x36430D4
	0x03643044 LDR W8, [X8 + 0x10]
	0x03643048 LDR W9, [X19 + 0x40]
	0x0364304C SUB W8, W8, W9
	0x03643050 CMP W8, 0x1
	0x03643054 B.LT 0x3642E64
	0x03643058 MOV X0, X19
	0x0364305C BL 0x3641BB0
	0x03643060 CMP W23, W0, UXTH
	0x03643064 B.EQ 0x3642E64
	0x03643068 MOV X0, X19
	0x0364306C BL 0x3641BB0
	0x03643070 AND W8, W0, 0xFFFF
	0x03643074 CMP W8, 0x2D
	0x03643078 B.EQ 0x3642E64
	0x0364307C B 0x36430C8
	0x03643080 MOV X0, X19
	0x03643084 BL 0x3643D80
	0x03643088 MOV W21, W0
	0x0364308C MOV X0, X19
	0x03643090 MOV W1, W21
	0x03643094 BL 0x3644694
	0x03643098 TBZ X0, 0x0, 0x36431B4
	0x0364309C LDR X8, [X19 + 0x38]
	0x036430A0 CBZ X8, 0x36430D4
	0x036430A4 LDR W8, [X8 + 0x10]
	0x036430A8 LDR W9, [X19 + 0x40]
	0x036430AC SUB W8, W8, W9
	0x036430B0 CMP W8, 0x1
	0x036430B4 B.LT 0x3642F60
	0x036430B8 MOV X0, X19
	0x036430BC BL 0x3641BB0
	0x036430C0 CMP W23, W0, UXTH
	0x036430C4 B.EQ 0x3642F60
	0x036430C8 ADRP X0, 0xAF9000
	0x036430CC LDR X0, [X0 + 0x480]
	0x036430D0 B 0x36430E0
	0x036430D4 BL 0x1C16F20
	0x036430D8 ADRP X0, 0xAF9000
	0x036430DC LDR X0, [X0 + 0x488]
	0x036430E0 BL 0x1C16D08
	0x036430E4 MOV X1, X0
	0x036430E8 MOV X0, X19
	0x036430EC BL 0x3643360
	0x036430F0 MOV X19, X0
	0x036430F4 ADRP X0, 0xAF9000
	0x036430F8 LDR X0, [X0 + 0x490]
	0x036430FC BL 0x1C16D08
	0x03643100 MOV X1, X0
	0x03643104 MOV X0, X19
	0x03643108 BL 0x1C16DEC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD9F000
	008 Move W8, [X23+1433]
	009 Move W21, W3
	010 Move W22, W2
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xAFB000
	018 Move X0, [X0+936]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+1433], W8
	022 Compare W22, 0
	023 JumpIfEqual {68}
	024 Move X0, [X19+56]
	025 Compare X0, 0
	026 JumpIfEqual {154}
	027 Move W1, W20
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X2, X31
	030 Call String.get_Chars, X0, X1
	031 Move W22, [X19+128]
	032 Move W20, W0
	033 Move TEMP, X22
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {57}
	037 Move TEMP, X21
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {57}
	041 Move X0, [X19+72]
	042 Compare X0, 0
	043 JumpIfEqual {154}
	044 Move X8, [X0]
	045 Move X9, [X8+472]
	046 Move X1, [X8+480]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Compare X0, 0
	049 JumpIfEqual {154}
	050 Move X8, [X0]
	051 Move W1, W20
	052 Move X9, [X8+424]
	053 Move X2, [X8+432]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move W22, [X19+128]
	056 Move W20, W0
	057 Move X8, 0xAFB000
	058 Move X8, [X8+936]
	059 Move X0, [X8]
	060 Call 0x1C17F10
	061 Move X1, X31
	062 Move X21, X0
	063 Call Object..ctor, X0
	064 Move W8, 9
	065 Move [X21+52], W22
	066 Move [X21+16], W8
	067 NotImplemented "Instruction STRH not yet implemented."
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Move X23, [X31+56]
	074 Return 
	075 Move W2, W22
	076 Move X3, X31
	077 Call String.Substring, X0, X1, X2
	078 Move W22, [X19+128]
	079 Move X20, X0
	080 Move TEMP, X22
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {131}
	084 Move TEMP, X21
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {131}
	088 Compare X20, 0
	089 JumpIfEqual {154}
	090 Move W0, [X20+16]
	091 Move X1, X31
	092 Call StringBuilderCache.Acquire, X0
	093 Move W8, [X20+16]
	094 Move X21, X0
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W22, W31
	097 Move X0, [X19+72]
	098 Compare X0, 0
	099 JumpIfEqual {154}
	100 Move X8, [X0]
	101 Move X9, [X8+472]
	102 Move X1, [X8+480]
	103 NotImplemented "Instruction BLR not yet implemented."
	104 Move X23, X0
	105 Move X0, X20
	106 Move W1, W22
	107 Move X2, X31
	108 Call String.get_Chars, X0, X1
	109 Compare X23, 0
	110 JumpIfEqual {154}
	111 Move X8, [X23]
	112 Move W1, W0
	113 Move X0, X23
	114 Move X9, [X8+424]
	115 Move X2, [X8+432]
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Compare X21, 0
	118 JumpIfEqual {154}
	119 Move W1, W0
	120 Move X0, X21
	121 Move X2, X31
	122 Call StringBuilder.Append, X0, X1
	123 Move W8, [X20+16]
	124 Add W22, W22, 1
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X0, X21
	127 Move X1, X31
	128 Call StringBuilderCache.GetStringAndRelease, X0
	129 Move W22, [X19+128]
	130 Move X20, X0
	131 Move X8, 0xAFA000
	132 Move X8, [X8+936]
	133 Move X0, [X8]
	134 Call 0x1C17F10
	135 Move X1, X31
	136 Move X21, X0
	137 Call Object..ctor, X0
	138 Move W8, 12
	139 Move [X21+52], W22
	140 Move [X21+16], W8
	141 Move [X21+32], X20
	142 Move X0, [X19+40]
	143 Compare X0, 0
	144 JumpIfEqual {154}
	145 Move X1, X21
	146 Move X20, [X31+32]
	147 Move X19, [X31+40]
	148 Move X22, [X31+16]
	149 Move X21, [X31+24]
	150 Move X30, [X31+48]
	151 Move X23, [X31+56]
	152 Call RegexNode.AddChild, X0, X1
	153 Return 
	154 Call 0x1C17F20

Method: System.Void PushGroup()

Disassembly:
	0x03644250 BL 0x1C16F20
	0x03644254 ADRP X0, 0xAF8000
	0x03644258 LDR X0, [X0 + 0x538]
	0x0364425C BL 0x1C16D08
	0x03644260 MOV X1, X0
	0x03644264 MOV X0, X19
	0x03644268 BL 0x3643360
	0x0364426C MOV X19, X0
	0x03644270 ADRP X0, 0xAF8000
	0x03644274 LDR X0, [X0 + 0x548]
	0x03644278 BL 0x1C16D08
	0x0364427C MOV X1, X0
	0x03644280 MOV X0, X19
	0x03644284 BL 0x1C16DEC
	0x03644288 LDRB W8, [X0 + 0x81]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {18}
	005 Move X9, [X0+16]
	006 Move [X8+56], X9
	007 Move X9, [X0+32]
	008 Compare X9, 0
	009 JumpIfEqual {18}
	010 Move [X9+56], X8
	011 Move X8, [X0+40]
	012 Compare X8, 0
	013 JumpIfEqual {18}
	014 Move [X8+56], X9
	015 Move [X0+16], X8
	016 Move X30, [X31+16]
	017 Return 
	018 Call 0x1C17F20

Method: System.Void PopGroup()

Disassembly:
	0x03644538 BL 0x19903D0
	0x0364453C ADD X0, X31, 0xC
	0x03644540 MOV X1, X31
	0x03644544 BL 0x330A76C
	0x03644548 MOV X20, X0
	0x0364454C ADRP X0, 0xAF8000
	0x03644550 LDR X0, [X0 + 0x568]
	0x03644554 BL 0x1C16D08
	0x03644558 MOV X1, X20
	0x0364455C MOV X2, X31
	0x03644560 BL 0x32094D4
	0x03644564 MOV X1, X0
	0x03644568 MOV X0, X19
	0x0364456C BL 0x3643360
	0x03644570 MOV X19, X0
	0x03644574 ADRP X0, 0xAF8000
	0x03644578 LDR X0, [X0 + 0x570]
	0x0364457C BL 0x1C16D08
	0x03644580 MOV X1, X0
	0x03644584 MOV X0, X19
	0x03644588 BL 0x1C16DEC
	0x0364458C MOV W0, W20
	0x03644590 B 0x364445C
	0x03644594 STR X30, [X31 - 0x30]!
	0x03644598 STP X22, X21, [X31 + 0x10]
	0x0364459C STP X20, X19, [X31 + 0x20]
	0x036445A0 ADRP X19, 0xD9C000
	0x036445A4 LDRB W8, [X19 + 0x589]
	0x036445A8 MOV X20, X0
	0x036445AC TBNZ X8, 0x0, 0x36445C4
	0x036445B0 ADRP X0, 0xAF7000
	0x036445B4 LDR X0, [X0 + 0x8E0]
	0x036445B8 BL 0x1C16CF4
	0x036445BC MOVZ W8, 0x1
	0x036445C0 STRB W8, [X19 + 0x589]
	0x036445C4 ADRP X22, 0xAF7000
	0x036445C8 LDR W19, [X20 + 0x40]
	0x036445CC LDR X22, [X22 + 0x8E0]
	0x036445D0 LDR X0, [X20 + 0x38]
	0x036445D4 CBZ X0, 0x364464C
	0x036445D8 LDR W9, [X0 + 0x10]
	0x036445DC LDR W8, [X20 + 0x40]
	0x036445E0 SUB W9, W9, W8
	0x036445E4 CMP W9, 0x0
	0x036445E8 B.LE 0x3644630
	0x036445EC MOV X0, X20
	0x036445F0 BL 0x3643D54
	0x036445F4 LDR X8, [X22]
	0x036445F8 MOV W21, W0
	0x036445FC LDR W9, [X8 + 0xE0]
	0x03644600 CBNZ W9, 0x364460C
	0x03644604 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+16]
	006 Move [X0+40], X8
	007 Compare X8, 0
	008 JumpIfEqual {52}
	009 Move X8, [X8+56]
	010 Move X19, X0
	011 Move [X0+32], X8
	012 Compare X8, 0
	013 JumpIfEqual {52}
	014 Move X20, [X8+56]
	015 Move [X19+24], X20
	016 Compare X20, 0
	017 JumpIfEqual {52}
	018 Move X8, [X20+56]
	019 Move [X19+16], X8
	020 Move W8, [X20+16]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X21, 0xD9D000
	023 Move W8, [X21+1403]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0xAF9000
	029 Move X0, [X0+720]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+1403], W8
	033 Move X8, [X20+24]
	034 Compare X8, 0
	035 JumpIfEqual {39}
	036 Move W8, [X8+24]
	037 Compare W8, 0
	038 JumpIfNotEqual {47}
	039 Move X1, [X19+48]
	040 Compare X1, 0
	041 JumpIfEqual {53}
	042 Move X0, [X19+24]
	043 Compare X0, 0
	044 JumpIfEqual {52}
	045 Call RegexNode.AddChild, X0, X1
	046 Move [X19+48], X31
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 
	052 Call 0x1C17F20
	053 Move X0, 0xAF9000
	054 Move X0, [X0+1256]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Call RegexParser.MakeException, X0, X1
	059 Move X19, X0
	060 Move X0, 0xAF9000
	061 Move X0, [X0+1264]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Call 0x1C17DEC

Method: System.Boolean EmptyStack()

Disassembly:
	0x03644350 B.EQ 0x3644300
	0x03644354 TBNZ X0, 0x0, 0x3644300
	0x03644358 LDR W8, [X19 + 0x40]
	0x0364435C LDR X0, [X19 + 0x38]

ISIL:
	001 Move X8, [X0+16]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void StartGroup(System.Text.RegularExpressions.RegexNode openGroup)

Disassembly:
	0x036427EC B 0x3642774
	0x036427F0 STR X30, [X31 - 0x30]!
	0x036427F4 STP X22, X21, [X31 + 0x10]
	0x036427F8 STP X20, X19, [X31 + 0x20]
	0x036427FC ADRP X22, 0xD9E000
	0x03642800 ADRP X21, 0xAFA000
	0x03642804 LDRB W8, [X22 + 0x59E]
	0x03642808 LDR X21, [X21 + 0x3A8]
	0x0364280C MOV X20, X1
	0x03642810 MOV X19, X0
	0x03642814 TBNZ X8, 0x0, 0x364282C
	0x03642818 ADRP X0, 0xAFA000
	0x0364281C LDR X0, [X0 + 0x3A8]
	0x03642820 BL 0x1C16CF4
	0x03642824 MOVZ W8, 0x1
	0x03642828 STRB W8, [X22 + 0x59E]
	0x0364282C LDR X0, [X21]
	0x03642830 LDR W22, [X19 + 0x80]
	0x03642834 BL 0x1C16F10
	0x03642838 MOV X1, X31
	0x0364283C MOV X21, X0
	0x03642840 BL 0x33BDD8C
	0x03642844 MOVZ W8, 0xB
	0x03642848 STR W22, [X21 + 0x34]
	0x0364284C STR X20, [X21 + 0x20]
	0x03642850 STR W8, [X21 + 0x10]
	0x03642854 STR X21, [X19 + 0x30]
	0x03642858 LDP X20, X19, [X31 + 0x20]
	0x0364285C LDP X22, X21, [X31 + 0x10]
	0x03642860 LDR X30, [X31], #0x30
	0x03642864 RET
	0x03642868 STR X30, [X31 - 0x20]!
	0x0364286C STP X20, X19, [X31 + 0x10]
	0x03642870 ADRP X20, 0xD9E000
	0x03642874 LDRB W8, [X20 + 0x5A0]
	0x03642878 MOV X19, X0
	0x0364287C TBNZ X8, 0x0, 0x3642894
	0x03642880 ADRP X0, 0xAFA000
	0x03642884 LDR X0, [X0 + 0x478]
	0x03642888 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD9F000
	007 Move X21, 0xAFB000
	008 Move W8, [X22+1434]
	009 Move X21, [X21+936]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAFB000
	017 Move X0, [X0+936]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1434], W8
	021 Move [X19+24], X20
	022 Move X0, [X21]
	023 Move W22, [X19+128]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X20, X0
	027 Call Object..ctor, X0
	028 Move W8, 24
	029 Move [X20+52], W22
	030 Move [X20+16], W8
	031 Move [X19+32], X20
	032 Move X0, [X21]
	033 Move W22, [X19+128]
	034 Call 0x1C17F10
	035 Move X1, X31
	036 Move X20, X0
	037 Call Object..ctor, X0
	038 Move W8, 25
	039 Move [X20+52], W22
	040 Move [X20+16], W8
	041 Move [X19+40], X20
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return 

Method: System.Void AddAlternate()

Disassembly:
	0x0364428C AND W0, W8, 0x1
	0x03644290 RET
	0x03644294 STR X30, [X31 - 0x30]!
	0x03644298 STP X22, X21, [X31 + 0x10]
	0x0364429C STP X20, X19, [X31 + 0x20]
	0x036442A0 ADRP X20, 0xD9C000
	0x036442A4 LDRB W8, [X20 + 0x58D]
	0x036442A8 MOV X19, X0
	0x036442AC TBNZ X8, 0x0, 0x36442C4
	0x036442B0 ADRP X0, 0xAF7000
	0x036442B4 LDR X0, [X0 + 0x8E0]
	0x036442B8 BL 0x1C16CF4
	0x036442BC MOVZ W8, 0x1
	0x036442C0 STRB W8, [X20 + 0x58D]
	0x036442C4 LDR X8, [X19 + 0x38]
	0x036442C8 CBZ X8, 0x36443C0
	0x036442CC LDR W8, [X8 + 0x10]
	0x036442D0 LDR W9, [X19 + 0x40]
	0x036442D4 SUB W8, W8, W9
	0x036442D8 CMP W8, 0x2
	0x036442DC B.LE 0x36443C4
	0x036442E0 MOV X0, X19
	0x036442E4 BL 0x3643D54
	0x036442E8 AND W8, W0, 0xFFFF
	0x036442EC CMP W8, 0x7B
	0x036442F0 B.NE 0x36443D0
	0x036442F4 ADRP X22, 0xAF7000
	0x036442F8 LDR W20, [X19 + 0x40]
	0x036442FC LDR X22, [X22 + 0x8E0]
	0x03644300 LDR X0, [X19 + 0x38]
	0x03644304 CBZ X0, 0x36443C0
	0x03644308 LDR W9, [X0 + 0x10]
	0x0364430C LDR W8, [X19 + 0x40]
	0x03644310 SUB W9, W9, W8
	0x03644314 CMP W9, 0x0
	0x03644318 B.LE 0x364436C
	0x0364431C MOV X0, X19
	0x03644320 BL 0x3643D54
	0x03644324 LDR X8, [X22]
	0x03644328 MOV W21, W0
	0x0364432C LDR W9, [X8 + 0xE0]
	0x03644330 CBNZ W9, 0x364433C
	0x03644334 MOV X0, X8
	0x03644338 BL 0x1C16DFC
	0x0364433C MOV W0, W21
	0x03644340 MOV X1, X31
	0x03644344 BL 0x36357F0
	0x03644348 AND W8, W21, 0xFFFF
	0x0364434C CMP W8, 0x2D

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD9D000
	006 Move W8, [X20+1435]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAF9000
	013 Move X0, [X0+936]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1435], W8
	017 Move X20, [X19+24]
	018 Compare X20, 0
	019 JumpIfEqual {58}
	020 Move W8, [X20+16]
	021 Subtract W8, W8, 33
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X21, [X19+40]
	024 Compare X21, 0
	025 JumpIfEqual {58}
	026 Move X0, X21
	027 Call RegexNode.ReverseLeft, X0
	028 Move X0, X20
	029 Move X1, X21
	030 Move X20, [X19+40]
	031 Compare X20, 0
	032 JumpIfEqual {58}
	033 Move X21, [X19+32]
	034 Move X0, X20
	035 Call RegexNode.ReverseLeft, X0
	036 Compare X21, 0
	037 JumpIfEqual {58}
	038 Move X0, X21
	039 Move X1, X20
	040 Call RegexNode.AddChild, X0, X1
	041 Move X8, 0xAF9000
	042 Move X8, [X8+936]
	043 Move W21, [X19+128]
	044 Move X0, [X8]
	045 Call 0x1C17F10
	046 Move X1, X31
	047 Move X20, X0
	048 Call Object..ctor, X0
	049 Move W8, 25
	050 Move [X20+52], W21
	051 Move [X20+16], W8
	052 Move [X19+40], X20
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return 
	058 Call 0x1C17F20

Method: System.Void AddConcatenate()

Disassembly:
	0x03644D2C LDR W8, [X19 + 0x58]
	0x03644D30 AND W9, W0, 0xFFFF
	0x03644D34 SUB W21, W9, 0x30
	0x03644D38 CMP W21, W8
	0x03644D3C B.GT 0x3644E5C
	0x03644D40 LDR W8, [X19 + 0x40]
	0x03644D44 ADRP X25, 0xAAF000
	0x03644D48 LDR X25, [X25 + 0x758]
	0x03644D4C MOVN W24, 0x0
	0x03644D50 SUB W26, W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+40]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, [X19+48]
	008 Call RegexNode.AddChild, X0, X1
	009 Move [X19+48], X31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void AddConcatenate(System.Boolean lazy, System.Int32 min, System.Int32 max)

Disassembly:
	0x03644E4C STR W24, [X19 + 0x2C]
	0x03644E50 B 0x3644EDC
	0x03644E54 CMP W21, 0x9
	0x03644E58 B.LE 0x3644F70
	0x03644E5C MOV X0, X19
	0x03644E60 STR W23, [X19 + 0x40]
	0x03644E64 BL 0x3644404
	0x03644E68 LDRB W8, [X19 + 0x80]
	0x03644E6C MOV W21, W0
	0x03644E70 TBZ X8, 0x0, 0x3644EA0
	0x03644E74 LDR X0, [X19 + 0x48]
	0x03644E78 CBZ X0, 0x3644EFC
	0x03644E7C LDR X8, [X0]
	0x03644E80 LDP X9, X1, [X8 + 0x1D8]
	0x03644E84 BLR X9
	0x03644E88 CBZ X0, 0x3644EFC
	0x03644E8C LDR X8, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+48]
	006 Compare X0, 0
	007 JumpIfEqual {21}
	008 Move X20, [X19+40]
	009 And W1, W1, 1
	010 Call RegexNode.MakeQuantifier, X0, X1, X2, X3
	011 Compare X20, 0
	012 JumpIfEqual {21}
	013 Move X1, X0
	014 Move X0, X20
	015 Call RegexNode.AddChild, X0, X1
	016 Move [X19+48], X31
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return 
	021 Call 0x1C17F20

Method: System.Text.RegularExpressions.RegexNode Unit()

Disassembly:
	0x03646C1C BL 0x19903D0
	0x03646C20 SCVTF D0, W19

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void AddUnitOne(System.Char ch)

Disassembly:
	0x03643128 MOV X0, X31
	0x0364312C BL 0x33387A0
	0x03643130 MOV X1, X0
	0x03643134 ADD X0, X31, 0xC
	0x03643138 MOV X2, X31
	0x0364313C BL 0x337B824
	0x03643140 MOV X20, X0
	0x03643144 ADRP X0, 0xAF9000
	0x03643148 LDR X0, [X0 + 0x4A0]
	0x0364314C B 0x36431D8
	0x03643150 ADRP X0, 0xAB2000
	0x03643154 LDR X0, [X0 + 0xC48]
	0x03643158 BL 0x1C16D08
	0x0364315C BL 0x19903D0
	0x03643160 MOV X0, X31
	0x03643164 BL 0x33387A0
	0x03643168 MOV X1, X0
	0x0364316C ADD X0, X31, 0xC
	0x03643170 MOV X2, X31
	0x03643174 BL 0x337B824
	0x03643178 MOV X20, X0
	0x0364317C ADRP X0, 0xAF9000
	0x03643180 LDR X0, [X0 + 0x4A8]
	0x03643184 B 0x36431D8
	0x03643188 ADRP X0, 0xAF9000
	0x0364318C LDR X0, [X0 + 0x4B0]
	0x03643190 BL 0x1C16D08
	0x03643194 MOV X1, X21
	0x03643198 B 0x36431E0
	0x0364319C ADRP X0, 0xAF9000
	0x036431A0 LDR X0, [X0 + 0x4B8]
	0x036431A4 B 0x36430E0
	0x036431A8 ADRP X0, 0xAF9000
	0x036431AC LDR X0, [X0 + 0x4C0]
	0x036431B0 B 0x36430E0
	0x036431B4 STR W21, [X31 + 0x8]
	0x036431B8 ADRP X0, 0xAB0000
	0x036431BC LDR X0, [X0 + 0x758]
	0x036431C0 BL 0x1C16D08
	0x036431C4 ADD X1, X31, 0x8
	0x036431C8 BL 0x1C16E04
	0x036431CC MOV X20, X0
	0x036431D0 ADRP X0, 0xAF9000
	0x036431D4 LDR X0, [X0 + 0x4C8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD9E000
	007 Move W8, [X21+1436]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAFA000
	015 Move X0, [X0+936]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1436], W8
	019 Move W22, [X19+128]
	020 Move TEMP, X22
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {40}
	024 Move X0, [X19+72]
	025 Compare X0, 0
	026 JumpIfEqual {58}
	027 Move X8, [X0]
	028 Move X9, [X8+472]
	029 Move X1, [X8+480]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Compare X0, 0
	032 JumpIfEqual {58}
	033 Move X8, [X0]
	034 Move W1, W20
	035 Move X9, [X8+424]
	036 Move X2, [X8+432]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move W22, [X19+128]
	039 Move W20, W0
	040 Move X8, 0xAFA000
	041 Move X8, [X8+936]
	042 Move X0, [X8]
	043 Call 0x1C17F10
	044 Move X1, X31
	045 Move X21, X0
	046 Call Object..ctor, X0
	047 Move W8, 9
	048 Move [X21+52], W22
	049 NotImplemented "Instruction STRH not yet implemented."
	050 Move [X21+16], W8
	051 Move [X19+48], X21
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Return 
	058 Call 0x1C17F20

Method: System.Void AddUnitNotone(System.Char ch)

Disassembly:
	0x03644C6C ADRP X8, 0xAF8000
	0x03644C70 LDR X8, [X8 + 0x3A8]
	0x03644C74 MOV W20, W0
	0x03644C78 LDR X8, [X8]
	0x03644C7C MOV X0, X8
	0x03644C80 BL 0x1C16F10
	0x03644C84 MOV X1, X31
	0x03644C88 MOV X19, X0
	0x03644C8C BL 0x33BDD8C
	0x03644C90 MOVZ W8, 0xD
	0x03644C94 STR W21, [X19 + 0x34]
	0x03644C98 STR W8, [X19 + 0x10]
	0x03644C9C STR W20, [X19 + 0x2C]
	0x03644CA0 B 0x3644EDC
	0x03644CA4 MOV X0, X19
	0x03644CA8 BL 0x3643D80
	0x03644CAC STR W0, [X31 + 0xC]
	0x03644CB0 LDR X8, [X19 + 0x38]
	0x03644CB4 CBZ X8, 0x3644EFC
	0x03644CB8 LDR W8, [X8 + 0x10]
	0x03644CBC LDR W9, [X19 + 0x40]
	0x03644CC0 SUB W8, W8, W9
	0x03644CC4 CMP W8, 0x1
	0x03644CC8 B.LT 0x3644E5C
	0x03644CCC MOV W22, W0
	0x03644CD0 MOV X0, X19
	0x03644CD4 BL 0x3643D54
	0x03644CD8 AND W8, W0, 0xFFFF
	0x03644CDC CMP W8, W21, UXTH
	0x03644CE0 B.NE 0x3644E5C
	0x03644CE4 TBNZ X20, 0x0, 0x3644EA4
	0x03644CE8 MOV X0, X19
	0x03644CEC MOV W1, W22
	0x03644CF0 BL 0x3644694
	0x03644CF4 TBZ X0, 0x0, 0x3644F4C
	0x03644CF8 ADRP X8, 0xAF8000
	0x03644CFC LDR W20, [X19 + 0x80]
	0x03644D00 LDR X8, [X8 + 0x3A8]
	0x03644D04 LDR X0, [X8]
	0x03644D08 BL 0x1C16F10
	0x03644D0C MOV X1, X31
	0x03644D10 MOV X19, X0
	0x03644D14 BL 0x33BDD8C
	0x03644D18 MOVZ W8, 0xD

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD9D000
	007 Move W8, [X21+1437]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xAF9000
	015 Move X0, [X0+936]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1437], W8
	019 Move W22, [X19+128]
	020 Move TEMP, X22
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {40}
	024 Move X0, [X19+72]
	025 Compare X0, 0
	026 JumpIfEqual {58}
	027 Move X8, [X0]
	028 Move X9, [X8+472]
	029 Move X1, [X8+480]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Compare X0, 0
	032 JumpIfEqual {58}
	033 Move X8, [X0]
	034 Move W1, W20
	035 Move X9, [X8+424]
	036 Move X2, [X8+432]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move W22, [X19+128]
	039 Move W20, W0
	040 Move X8, 0xAF9000
	041 Move X8, [X8+936]
	042 Move X0, [X8]
	043 Call 0x1C17F10
	044 Move X1, X31
	045 Move X21, X0
	046 Call Object..ctor, X0
	047 Move W8, 10
	048 Move [X21+52], W22
	049 NotImplemented "Instruction STRH not yet implemented."
	050 Move [X21+16], W8
	051 Move [X19+48], X21
	052 Move X20, [X31+32]
	053 Move X19, [X31+40]
	054 Move X22, [X31+16]
	055 Move X21, [X31+24]
	056 Move X30, [X31+48]
	057 Return 
	058 Call 0x1C17F20

Method: System.Void AddUnitSet(System.String cc)

Disassembly:
	0x036437F0 CMP W8, 0x53
	0x036437F4 B.EQ 0x36439B0
	0x036437F8 CMP W8, 0x57
	0x036437FC B.EQ 0x36439F8
	0x03643800 CMP W8, 0x5A
	0x03643804 B.EQ 0x36438FC
	0x03643808 B 0x3643914
	0x0364380C AND W8, W21, 0xFFFF
	0x03643810 CMP W8, 0x73
	0x03643814 B.EQ 0x3643A40
	0x03643818 CMP W8, 0x77
	0x0364381C B.EQ 0x3643A88
	0x03643820 CMP W8, 0x7A
	0x03643824 B.EQ 0x36438FC
	0x03643828 B 0x3643914
	0x0364382C CMP W8, 0x47
	0x03643830 B.EQ 0x36438FC
	0x03643834 CMP W8, 0x50
	0x03643838 B.NE 0x3643914
	0x0364383C LDR W8, [X19 + 0x40]
	0x03643840 ADD W8, W8, 0x1
	0x03643844 STR W8, [X19 + 0x40]
	0x03643848 TBNZ X20, 0x0, 0x364390C
	0x0364384C ADRP X8, 0xAF8000
	0x03643850 LDR X8, [X8 + 0x8E0]
	0x03643854 LDR X0, [X8]
	0x03643858 BL 0x1C16F10
	0x0364385C MOV X1, X31
	0x03643860 MOV X20, X0
	0x03643864 BL 0x363414C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD9E000
	007 Move X21, 0xAFA000
	008 Move W8, [X22+1438]
	009 Move X21, [X21+936]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAFA000
	017 Move X0, [X0+936]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1438], W8
	021 Move X0, [X21]
	022 Move W22, [X19+128]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X21, X0
	026 Call Object..ctor, X0
	027 Move W8, 11
	028 Move [X21+52], W22
	029 Move [X21+32], X20
	030 Move [X21+16], W8
	031 Move [X19+48], X21
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Return 

Method: System.Void AddUnitNode(System.Text.RegularExpressions.RegexNode node)

Disassembly:
	0x03646C24 MOV X0, X31
	0x03646C28 BL 0x33945E4

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Void AddUnitType(System.Int32 type)

Disassembly:
	0x03644BF0 MOV X1, X31
	0x03644BF4 BL 0x36357F0
	0x03644BF8 TBZ X0, 0x0, 0x3644E5C
	0x03644BFC MOV X0, X19
	0x03644C00 BL 0x3644594
	0x03644C04 LDR X8, [X19 + 0x38]
	0x03644C08 CBZ X8, 0x3644EFC
	0x03644C0C LDR W8, [X8 + 0x10]
	0x03644C10 LDR W9, [X19 + 0x40]
	0x03644C14 SUB W8, W8, W9
	0x03644C18 CMP W8, 0x1
	0x03644C1C B.LT 0x3644E5C
	0x03644C20 MOV X22, X0
	0x03644C24 MOV X0, X19
	0x03644C28 BL 0x3643D54
	0x03644C2C AND W8, W0, 0xFFFF
	0x03644C30 CMP W8, W21, UXTH
	0x03644C34 B.NE 0x3644E5C
	0x03644C38 TBNZ X20, 0x0, 0x3644EA4
	0x03644C3C LDR X0, [X19 + 0x68]
	0x03644C40 CBZ X0, 0x3644F38
	0x03644C44 LDR X8, [X0]
	0x03644C48 MOV X1, X22
	0x03644C4C LDR X9, [X8 + 0x2B8]
	0x03644C50 LDR X2, [X8 + 0x2C0]
	0x03644C54 BLR X9
	0x03644C58 TBZ X0, 0x0, 0x3644F38
	0x03644C5C LDR W21, [X19 + 0x80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xD9D000
	007 Move X21, 0xAF9000
	008 Move W8, [X22+1439]
	009 Move X21, [X21+936]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xAF9000
	017 Move X0, [X0+936]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1439], W8
	021 Move X0, [X21]
	022 Move W22, [X19+128]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X21, X0
	026 Call Object..ctor, X0
	027 Move [X21+16], W20
	028 Move [X21+52], W22
	029 Move [X19+48], X21
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return 

Method: System.Void AddGroup()

Disassembly:
	0x036443F8 MOV X1, X0
	0x036443FC MOV X0, X19
	0x03644400 BL 0x1C16DEC
	0x03644404 STR X30, [X31 - 0x20]!
	0x03644408 STP X20, X19, [X31 + 0x10]
	0x0364440C ADRP X20, 0xD9C000
	0x03644410 LDRB W8, [X20 + 0x58C]
	0x03644414 MOV X19, X0
	0x03644418 TBNZ X8, 0x0, 0x3644430
	0x0364441C ADRP X0, 0xAF7000
	0x03644420 LDR X0, [X0 + 0x8E0]
	0x03644424 BL 0x1C16CF4
	0x03644428 MOVZ W8, 0x1
	0x0364442C STRB W8, [X20 + 0x58C]
	0x03644430 MOV X0, X19
	0x03644434 BL 0x3643D54
	0x03644438 AND W8, W0, 0xFFF8
	0x0364443C CMP W8, 0x30
	0x03644440 STRH W0, [X31 + 0xC]
	0x03644444 B.NE 0x3644468
	0x03644448 LDR W8, [X19 + 0x40]
	0x0364444C MOV X0, X19
	0x03644450 SUB W8, W8, 0x1
	0x03644454 STR W8, [X19 + 0x40]
	0x03644458 BL 0x3644FB8
	0x0364445C LDP X20, X19, [X31 + 0x10]
	0x03644460 LDR X30, [X31], #0x20
	0x03644464 RET
	0x03644468 AND W8, W0, 0xFFFF
	0x0364446C SUB W8, W8, 0x61
	0x03644470 MOV W20, W0
	0x03644474 CMP W8, 0x17
	0x03644478 B.HI 0x36444F4
	0x0364447C ADRP X9, 0xFFFFFFFFFD553000
	0x03644480 ADD X9, X9, 0x4D6
	0x03644484 ADR X10, 0xFFFFFFFFFFFFFFD8
	0x03644488 LDRB W11, [X9, X8, LSL]
	0x0364448C ADD X10, X10, X11, 0x2, LSL
	0x03644490 MOVZ W0, 0x8
	0x03644494 BR X10
	0x03644498 MOVZ W0, 0x7
	0x0364449C B 0x364445C
	0x036444A0 MOV X0, X19
	0x036444A4 BL 0x36451C0
	0x036444A8 B 0x364445C
	0x036444AC MOVZ W0, 0x1B
	0x036444B0 B 0x364445C
	0x036444B4 MOVZ W0, 0xC
	0x036444B8 B 0x364445C
	0x036444BC MOVZ W0, 0xA
	0x036444C0 B 0x364445C
	0x036444C4 MOVZ W0, 0xD
	0x036444C8 B 0x364445C
	0x036444CC MOVZ W0, 0x9
	0x036444D0 B 0x364445C
	0x036444D4 MOVZ W1, 0x4
	0x036444D8 B 0x36444E8
	0x036444DC MOVZ W0, 0xB
	0x036444E0 B 0x364445C
	0x036444E4 MOVZ W1, 0x2
	0x036444E8 MOV X0, X19
	0x036444EC BL 0x3645054
	0x036444F0 B 0x364445C
	0x036444F4 LDRB W8, [X19 + 0x81]
	0x036444F8 TBNZ X8, 0x0, 0x364458C
	0x036444FC ADRP X8, 0xAF7000
	0x03644500 LDR X8, [X8 + 0x8E0]
	0x03644504 LDR X0, [X8]
	0x03644508 LDR W8, [X0 + 0xE0]
	0x0364450C CBNZ W8, 0x3644514
	0x03644510 BL 0x1C16DFC
	0x03644514 MOV W0, W20
	0x03644518 MOV X1, X31
	0x0364451C BL 0x36357F0
	0x03644520 MOV W8, W0
	0x03644524 MOV W0, W20
	0x03644528 TBZ X8, 0x0, 0x364445C
	0x0364452C ADRP X0, 0xAB1000
	0x03644530 LDR X0, [X0 + 0x170]
	0x03644534 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, [X0+24]
	006 Compare X20, 0
	007 JumpIfEqual {95}
	008 Move W8, [X20+16]
	009 Move X19, X0
	010 Subtract W8, W8, 33
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X21, [X19+40]
	013 Compare X21, 0
	014 JumpIfEqual {95}
	015 Move X0, X21
	016 Call RegexNode.ReverseLeft, X0
	017 Move X0, X20
	018 Move X1, X21
	019 Call RegexNode.AddChild, X0, X1
	020 Move X21, [X19+24]
	021 Compare X21, 0
	022 JumpIfEqual {95}
	023 Move W8, [X21+16]
	024 Move X20, 0xD9D000
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W8, [X20+1403]
	027 Move TEMP, X8
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {36}
	031 Move X0, 0xAF9000
	032 Move X0, [X0+720]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1403], W8
	036 Move X8, [X21+24]
	037 Compare X8, 0
	038 JumpIfEqual {41}
	039 Move W8, [X8+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X21, [X19+24]
	042 Compare X21, 0
	043 JumpIfEqual {95}
	044 Move W8, [X20+1403]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {54}
	049 Move X0, 0xAF9000
	050 Move X0, [X0+720]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X20+1403], W8
	054 Move X8, [X21+24]
	055 Compare X8, 0
	056 JumpIfEqual {88}
	057 Move W8, [X8+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, 0xAF9000
	060 Move X0, [X0+1240]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call RegexParser.MakeException, X0, X1
	065 Move X19, X0
	066 Move X0, 0xAF9000
	067 Move X0, [X0+1248]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC
	072 Move X20, [X19+40]
	073 Compare X20, 0
	074 JumpIfEqual {95}
	075 Move X21, [X19+32]
	076 Move X0, X20
	077 Call RegexNode.ReverseLeft, X0
	078 Compare X21, 0
	079 JumpIfEqual {95}
	080 Move X0, X21
	081 Move X1, X20
	082 Call RegexNode.AddChild, X0, X1
	083 Move X0, [X19+24]
	084 Compare X0, 0
	085 JumpIfEqual {95}
	086 Move X1, [X19+32]
	087 Call RegexNode.AddChild, X0, X1
	088 Move X8, [X19+24]
	089 Move [X19+48], X8
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Return 
	095 Call 0x1C17F20

Method: System.Void PushOptions()

Disassembly:
	0x03643868 MOV X0, X19
	0x0364386C BL 0x3644294
	0x03643870 CBZ X20, 0x3643BE0
	0x03643874 LDR W8, [X19 + 0x80]
	0x03643878 LDR X4, [X19 + 0x38]
	0x0364387C AND W9, W21, 0xFFFF
	0x03643880 CMP W9, 0x70
	0x03643884 MOV X1, X0
	0x03643888 AND W3, W8, 0x1
	0x0364388C CSET W2, NE
	0x03643890 MOV X0, X20
	0x03643894 MOV X5, X31
	0x03643898 BL 0x36347E4
	0x0364389C LDR W21, [X19 + 0x80]
	0x036438A0 TBZ X21, 0x0, 0x36438B8
	0x036438A4 LDR X1, [X19 + 0x48]
	0x036438A8 MOV X0, X20
	0x036438AC MOV X2, X31
	0x036438B0 BL 0x3634CF4
	0x036438B4 LDR W21, [X19 + 0x80]
	0x036438B8 MOV X0, X20
	0x036438BC MOV X1, X31
	0x036438C0 BL 0x3635FCC
	0x036438C4 ADRP X8, 0xAF9000
	0x036438C8 LDR X8, [X8 + 0x3A8]
	0x036438CC MOV X20, X0
	0x036438D0 LDR X8, [X8]
	0x036438D4 MOV X0, X8
	0x036438D8 BL 0x1C16F10
	0x036438DC MOV X1, X31
	0x036438E0 MOV X19, X0
	0x036438E4 BL 0x33BDD8C
	0x036438E8 MOVZ W8, 0xB
	0x036438EC STR W21, [X19 + 0x34]
	0x036438F0 STR W8, [X19 + 0x10]
	0x036438F4 STR X20, [X19 + 0x20]
	0x036438F8 B 0x3643B9C
	0x036438FC LDR W8, [X19 + 0x40]
	0x03643900 ADD W8, W8, 0x1
	0x03643904 STR W8, [X19 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9E000
	005 Move W8, [X20+1440]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAFA000
	012 Move X0, [X0+1144]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1440], W8
	016 Move X0, [X19+136]
	017 Compare X0, 0
	018 JumpIfEqual {48}
	019 Move X9, 0xAFA000
	020 Move X9, [X9+1144]
	021 Move W10, [X0+28]
	022 Move W1, [X19+128]
	023 Move X8, [X0+16]
	024 Move X9, [X9]
	025 Add W10, W10, 1
	026 Move [X0+28], W10
	027 Compare X8, 0
	028 JumpIfEqual {48}
	029 NotImplemented "Instruction LDRSW not yet implemented."
	030 Move W11, [X8+24]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Add W9, W10, 1
	035 Add X8, X8, X10
	036 Move [X0+24], W9
	037 Move [X8+32], W1
	038 Move X30, [X31+32]
	039 Return 
	040 Move X8, [X9+32]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X8, [X8+192]
	044 Move X2, [X8+112]
	045 Move X30, [X31+32]
	046 Call List`1<Int32Enum>.AddWithResize, X0, X1
	047 Return 
	048 Call 0x1C17F20

Method: System.Void PopOptions()

Disassembly:
	0x03644608 BL 0x1C16DFC
	0x0364460C MOV W0, W21
	0x03644610 MOV X1, X31
	0x03644614 BL 0x36357F0
	0x03644618 TBNZ X0, 0x0, 0x36445D0
	0x0364461C LDR W8, [X20 + 0x40]
	0x03644620 LDR X0, [X20 + 0x38]
	0x03644624 SUB W8, W8, 0x1
	0x03644628 STR W8, [X20 + 0x40]
	0x0364462C CBZ X0, 0x364464C
	0x03644630 SUB W2, W8, W19
	0x03644634 MOV W1, W19
	0x03644638 LDP X20, X19, [X31 + 0x20]
	0x0364463C LDP X22, X21, [X31 + 0x10]
	0x03644640 MOV X3, X31
	0x03644644 LDR X30, [X31], #0x30
	0x03644648 B 0x3228DE4
	0x0364464C BL 0x1C16F20
	0x03644650 STR X30, [X31 - 0x10]!
	0x03644654 MOV X8, X0
	0x03644658 LDR X0, [X0 + 0x38]
	0x0364465C CBZ X0, 0x3644674
	0x03644660 LDR W8, [X8 + 0x40]
	0x03644664 MOV X2, X31
	0x03644668 ADD W1, W8, W1
	0x0364466C LDR X30, [X31], #0x10
	0x03644670 B 0x3222A1C
	0x03644674 BL 0x1C16F20
	0x03644678 LDR W8, [X0 + 0x40]
	0x0364467C ADD W8, W8, W1
	0x03644680 STR W8, [X0 + 0x40]
	0x03644684 RET
	0x03644688 LDRB W8, [X0 + 0x80]
	0x0364468C UBFM W0, W8, 0x2, 0x2
	0x03644690 RET
	0x03644694 SUB X31, X31, 0x30
	0x03644698 STP X30, X21, [X31 + 0x10]
	0x0364469C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9D000
	005 Move W8, [X20+1441]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0xAF9000
	012 Move X0, [X0+1232]
	013 Call 0x1C17CF4
	014 Move X0, 0xAF9000
	015 Move X0, [X0+1000]
	016 Call 0x1C17CF4
	017 Move X0, 0xAF9000
	018 Move X0, [X0+1272]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1441], W8
	022 Move X0, [X19+136]
	023 Compare X0, 0
	024 JumpIfEqual {46}
	025 Move X8, 0xAF9000
	026 Move X8, [X8+1272]
	027 Move W9, [X0+24]
	028 Move X2, [X8]
	029 Subtract W1, W9, 1
	030 Call List`1<Int32Enum>.get_Item, X0, X1
	031 Move X8, [X19+136]
	032 Move [X19+128], W0
	033 Compare X8, 0
	034 JumpIfEqual {46}
	035 Move X9, 0xAF9000
	036 Move X9, [X9+1232]
	037 Move W10, [X8+24]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X0, X8
	041 Move X2, [X9]
	042 Subtract W1, W10, 1
	043 Move X30, [X31+32]
	044 Call List`1<Int32Enum>.RemoveAt, X0, X1
	045 Return 
	046 Call 0x1C17F20

Method: System.Boolean EmptyOptionsStack()

Disassembly:
	0x036463E8 MOV X1, X0
	0x036463EC CMP W10, W11
	0x036463F0 B.CS 0x3646408
	0x036463F4 ADD W9, W10, 0x1
	0x036463F8 ADD X8, X8, X10, 0x3, LSL
	0x036463FC STR W9, [X24 + 0x18]
	0x03646400 STR X1, [X8 + 0x20]
	0x03646404 B 0x364641C
	0x03646408 LDR X8, [X9 + 0x20]
	0x0364640C MOV X0, X24
	0x03646410 LDR X8, [X8 + 0xC0]
	0x03646414 LDR X2, [X8 + 0x70]
	0x03646418 BL 0x301BF90
	0x0364641C LDR W25, [X23 + 0x10]
	0x03646420 MOV X0, X21
	0x03646424 MOV X1, X24
	0x03646428 MOV X2, X23
	0x0364642C BL 0x3646060
	0x03646430 SUBS W20, W20, 0x1
	0x03646434 B.EQ 0x364645C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9B000
	005 Move W8, [X20+1442]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xAF7000
	012 Move X0, [X0+1000]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1442], W8
	016 Move X8, [X19+136]
	017 Compare X8, 0
	018 JumpIfEqual {26}
	019 Move W8, [X8+24]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSET not yet implemented."
	024 Move X30, [X31+32]
	025 Return X0
	026 Call 0x1C17F20

Method: System.Void PopKeepOptions()

Disassembly:
	0x036441EC MOVZ W8, 0xD
	0x036441F0 STR W20, [X19 + 0x34]
	0x036441F4 STR W8, [X19 + 0x10]
	0x036441F8 STR W22, [X19 + 0x2C]
	0x036441FC B 0x3644238
	0x03644200 STR W21, [X19 + 0x40]
	0x03644204 LDR W20, [X19 + 0x80]
	0x03644208 ADRP X8, 0xAF8000
	0x0364420C LDR X8, [X8 + 0x3A8]
	0x03644210 LDR X0, [X8]
	0x03644214 BL 0x1C16F10
	0x03644218 MOV X1, X31
	0x0364421C MOV X19, X0
	0x03644220 BL 0x33BDD8C
	0x03644224 MOVZ W8, 0x9
	0x03644228 MOVZ W9, 0x24
	0x0364422C STR W20, [X19 + 0x34]
	0x03644230 STR W8, [X19 + 0x10]
	0x03644234 STRH W9, [X19 + 0x28]
	0x03644238 MOV X0, X19
	0x0364423C LDP X20, X19, [X31 + 0x30]
	0x03644240 LDP X22, X21, [X31 + 0x20]
	0x03644244 LDP X24, X23, [X31 + 0x10]
	0x03644248 LDP X30, X25, [X31], #0x40
	0x0364424C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD9D000
	005 Move W8, [X20+1443]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xAF9000
	012 Move X0, [X0+1232]
	013 Call 0x1C17CF4
	014 Move X0, 0xAF9000
	015 Move X0, [X0+1000]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1443], W8
	019 Move X0, [X19+136]
	020 Compare X0, 0
	021 JumpIfEqual {32}
	022 Move X8, 0xAF9000
	023 Move X8, [X8+1232]
	024 Move W9, [X0+24]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X2, [X8]
	028 Subtract W1, W9, 1
	029 Move X30, [X31+32]
	030 Call List`1<Int32Enum>.RemoveAt, X0, X1
	031 Return 
	032 Call 0x1C17F20

Method: System.ArgumentException MakeException(System.String message)

Disassembly:
	0x03644360 SUB W8, W8, 0x1
	0x03644364 STR W8, [X19 + 0x40]
	0x03644368 CBZ X0, 0x36443C0
	0x0364436C SUB W2, W8, W20
	0x03644370 MOV W1, W20
	0x03644374 MOV X3, X31
	0x03644378 BL 0x3228DE4
	0x0364437C LDR X8, [X19 + 0x38]
	0x03644380 CBZ X8, 0x36443C0
	0x03644384 LDR W8, [X8 + 0x10]
	0x03644388 LDR W9, [X19 + 0x40]
	0x0364438C CMP W8, W9
	0x03644390 B.EQ 0x36443C4
	0x03644394 MOV X20, X0
	0x03644398 MOV X0, X19
	0x0364439C BL 0x3643D54
	0x036443A0 AND W8, W0, 0xFFFF
	0x036443A4 CMP W8, 0x7D
	0x036443A8 B.NE 0x36443C4
	0x036443AC MOV X0, X20
	0x036443B0 LDP X20, X19, [X31 + 0x20]
	0x036443B4 LDP X22, X21, [X31 + 0x10]
	0x036443B8 LDR X30, [X31], #0x30
	0x036443BC RET
	0x036443C0 BL 0x1C16F20
	0x036443C4 ADRP X0, 0xAF8000
	0x036443C8 LDR X0, [X0 + 0x550]
	0x036443CC B 0x36443D8
	0x036443D0 ADRP X0, 0xAF8000
	0x036443D4 LDR X0, [X0 + 0x558]
	0x036443D8 BL 0x1C16D08
	0x036443DC MOV X1, X0
	0x036443E0 MOV X0, X19
	0x036443E4 BL 0x3643360
	0x036443E8 MOV X19, X0
	0x036443EC ADRP X0, 0xAF8000
	0x036443F0 LDR X0, [X0 + 0x560]
	0x036443F4 BL 0x1C16D08

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD9D000
	008 Move X22, 0xAF8000
	009 Move X21, 0xAB8000
	010 Move W8, [X23+1444]
	011 Move X22, [X22+2320]
	012 Move X21, [X21+1400]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xAB8000
	020 Move X0, [X0+1400]
	021 Call 0x1C17CF4
	022 Move X0, 0xAF8000
	023 Move X0, [X0+2320]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+1444], W8
	027 Move X1, [X20+56]
	028 Move X0, [X22]
	029 Move X2, X19
	030 Move X3, X31
	031 Call SR.Format, X0, X1, X2
	032 Move X8, [X21]
	033 Move X19, X0
	034 Move X0, X8
	035 Call 0x1C17F10
	036 Move X1, X19
	037 Move X2, X31
	038 Move X20, X0
	039 Call ArgumentException..ctor, X0, X1
	040 Move X0, X20
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Return X0

Method: System.Int32 Textpos()

Disassembly:
	0x03646C2C MOV X19, X0
	0x03646C30 ADRP X0, 0xAF6000

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void Textto(System.Int32 pos)

Disassembly:
	0x03646C34 LDR X0, [X0 + 0x5F0]
	0x03646C38 BL 0x1C16D08

ISIL:
	001 Move [X0+64], W1
	002 Return 

Method: System.Char RightCharMoveRight()

Disassembly:
	0x03644D54 MOVZ W27, 0xA
	0x03644D58 MOV X0, X19
	0x03644D5C MOV W1, W21
	0x03644D60 BL 0x3644694
	0x03644D64 TBZ X0, 0x0, 0x3644DC8
	0x03644D68 LDR X22, [X19 + 0x60]
	0x03644D6C CBZ X22, 0x3644DC4
	0x03644D70 LDR X0, [X25]
	0x03644D74 ADD X1, X31, 0x4
	0x03644D78 STR W21, [X31 + 0x4]
	0x03644D7C BL 0x1C16E04

ISIL:
	001 Move [X31-16], X30
	002 Move W1, [X0+64]
	003 Move X8, X0
	004 Move X0, [X0+56]
	005 Add W9, W1, 1
	006 Move [X8+64], W9
	007 Compare X0, 0
	008 JumpIfEqual {13}
	009 Move X2, X31
	010 Move X30, [X31+16]
	011 Call String.get_Chars, X0, X1
	012 Return X0
	013 Call 0x1C17F20

Method: System.Void MoveRight()

Disassembly:
	0x03642B7C CBZ X8, 0x3642D50
	0x03642B80 LDR X9, [X8]
	0x03642B84 MOV X20, X0
	0x03642B88 MOV X0, X8

ISIL:
	001 Move W8, [X0+64]
	002 Add W8, W8, 1
	003 Move [X0+64], W8
	004 Return 

Method: System.Void MoveRight(System.Int32 i)

Disassembly:
	0x03645678 BL 0x1C16CF4
	0x0364567C ADRP X0, 0xAAF000
	0x03645680 LDR X0, [X0 + 0x1D0]
	0x03645684 BL 0x1C16CF4

ISIL:
	001 Move W8, [X0+64]
	002 Add W8, W8, W1
	003 Move [X0+64], W8
	004 Return 

Method: System.Void MoveLeft()

Disassembly:
	0x03644D1C STR W20, [X19 + 0x34]
	0x03644D20 STR W8, [X19 + 0x10]
	0x03644D24 STR W22, [X19 + 0x2C]
	0x03644D28 B 0x3644EDC

ISIL:
	001 Move W8, [X0+64]
	002 Subtract W8, W8, 1
	003 Move [X0+64], W8
	004 Return 

Method: System.Char CharAt(System.Int32 i)

Disassembly:
	0x0364310C ADRP X0, 0xAF9000
	0x03643110 LDR X0, [X0 + 0x498]
	0x03643114 B 0x36430E0
	0x03643118 ADRP X0, 0xAB2000
	0x0364311C LDR X0, [X0 + 0xC48]
	0x03643120 BL 0x1C16D08
	0x03643124 BL 0x19903D0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+56]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call String.get_Chars, X0, X1
	008 Return X0
	009 Call 0x1C17F20

Method: System.Char RightChar()

Disassembly:
	0x03642BB0 SUB W8, W8, W9
	0x03642BB4 CMP W8, 0x1
	0x03642BB8 B.LT 0x3642D50
	0x03642BBC MOV X0, X19
	0x03642BC0 BL 0x3643D54
	0x03642BC4 AND W8, W0, 0xFFFF
	0x03642BC8 CMP W8, 0x29
	0x03642BCC B.NE 0x3642D50
	0x03642BD0 LDR W21, [X19 + 0x80]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+56]
	004 Compare X0, 0
	005 JumpIfEqual {11}
	006 Move W1, [X8+64]
	007 Move X2, X31
	008 Move X30, [X31+16]
	009 Call String.get_Chars, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Char RightChar(System.Int32 i)

Disassembly:
	0x03645650 LDR X0, [X0 + 0x1B8]
	0x03645654 BL 0x1C16CF4
	0x03645658 ADRP X0, 0xAAF000
	0x0364565C LDR X0, [X0 + 0x1C0]
	0x03645660 BL 0x1C16CF4
	0x03645664 ADRP X0, 0xAAF000
	0x03645668 LDR X0, [X0 + 0x1C8]
	0x0364566C BL 0x1C16CF4
	0x03645670 ADRP X0, 0xAD6000
	0x03645674 LDR X0, [X0 + 0xB58]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move X0, [X0+56]
	004 Compare X0, 0
	005 JumpIfEqual {12}
	006 Move W8, [X8+64]
	007 Move X2, X31
	008 Add W1, W8, W1
	009 Move X30, [X31+16]
	010 Call String.get_Chars, X0, X1
	011 Return X0
	012 Call 0x1C17F20

Method: System.Int32 CharsRight()

Disassembly:
	0x03642B8C MOV X1, X20
	0x03642B90 LDR X10, [X9 + 0x2B8]
	0x03642B94 LDR X2, [X9 + 0x2C0]
	0x03642B98 BLR X10
	0x03642B9C TBZ X0, 0x0, 0x3642D50
	0x03642BA0 LDR X8, [X19 + 0x38]
	0x03642BA4 CBZ X8, 0x36430D4
	0x03642BA8 LDR W8, [X8 + 0x10]
	0x03642BAC LDR W9, [X19 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move W8, [X8+16]
	006 Move W9, [X0+64]
	007 Subtract W0, W8, W9
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03646C3C BL 0x1C16F10
	0x03646C40 MOV X1, X20
	0x03646C44 MOV X2, X21
	0x03646C48 MOV X3, X19
	0x03646C4C MOV X22, X0
	0x03646C50 BL 0x363EF60
	0x03646C54 ADRP X0, 0xAF6000
	0x03646C58 LDR X0, [X0 + 0x5F8]
	0x03646C5C BL 0x1C16D08
	0x03646C60 MOV X1, X0
	0x03646C64 MOV X0, X22
	0x03646C68 BL 0x1C16DEC
	0x03646C6C STR X30, [X31 - 0x20]!
	0x03646C70 STP X20, X19, [X31 + 0x10]
	0x03646C74 ADRP X20, 0xD9A000
	0x03646C78 LDRB W8, [X20 + 0x5B2]
	0x03646C7C MOV X19, X0
	0x03646C80 TBNZ X8, 0x0, 0x3646C98
	0x03646C84 ADRP X0, 0xAAE000
	0x03646C88 LDR X0, [X0 + 0xE58]
	0x03646C8C BL 0x1C16CF4
	0x03646C90 MOVZ W8, 0x1
	0x03646C94 STRB W8, [X20 + 0x5B2]
	0x03646C98 LDR X8, [X19 + 0x40]
	0x03646C9C CBZ X8, 0x3646D08
	0x03646CA0 ADRP X9, 0xAAE000
	0x03646CA4 LDR X9, [X9 + 0xE58]
	0x03646CA8 LDR W8, [X8 + 0x18]
	0x03646CAC LDR X0, [X9]
	0x03646CB0 UBFM W1, W8, 0x1F, 0x1E
	0x03646CB4 BL 0x1C16D6C
	0x03646CB8 LDR X8, [X19 + 0x40]
	0x03646CBC CBZ X8, 0x3646D08
	0x03646CC0 LDR W3, [X8 + 0x18]
	0x03646CC4 MOV X20, X0
	0x03646CC8 MOV X0, X8
	0x03646CCC MOV W1, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD9B000
	007 Move X22, 0xAAE000
	008 Move X19, 0xAF7000
	009 Move X20, 0xAF6000
	010 Move W8, [X21+1445]
	011 Move X22, [X22+1560]
	012 Move X19, [X19+1472]
	013 Move X20, [X20+2056]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xAAE000
	019 Move X0, [X0+1560]
	020 Call 0x1C17CF4
	021 Move X0, 0xAF6000
	022 Move X0, [X0+2056]
	023 Call 0x1C17CF4
	024 Move X0, 0xAF7000
	025 Move X0, [X0+1472]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1445], W8
	029 Move X0, [X22]
	030 Move W1, 128
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

