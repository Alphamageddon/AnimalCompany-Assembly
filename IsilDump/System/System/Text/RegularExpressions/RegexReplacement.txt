Type: System.Text.RegularExpressions.RegexReplacement

Method: System.Void .ctor(System.String rep, System.Text.RegularExpressions.RegexNode concat, System.Collections.Hashtable _caps)

Disassembly:
	0x03642310 CMP W8, 0x1
	0x03642314 B.LT 0x3642334
	0x03642318 MOV X0, X19
	0x0364231C BL 0x3641BB0
	0x03642320 AND W8, W0, 0xFFFF
	0x03642324 CMP W8, 0x3A
	0x03642328 CSET W8, NE
	0x0364232C ORR W8, W25, W8, 0x0
	0x03642330 TBZ X8, 0x0, 0x36423B4
	0x03642334 MOV W27, W31
	0x03642338 B 0x3642414
	0x0364233C LDR X8, [X19 + 0x38]
	0x03642340 CBZ X8, 0x3642764
	0x03642344 LDR W8, [X8 + 0x10]
	0x03642348 LDR W9, [X19 + 0x40]
	0x0364234C SUB W8, W8, W9
	0x03642350 CMP W8, 0x1
	0x03642354 B.LT 0x36423A4
	0x03642358 MOV X0, X19
	0x0364235C BL 0x3643D54
	0x03642360 AND W8, W0, 0xFFFF
	0x03642364 MOV W24, W0
	0x03642368 CMP W8, 0x53
	0x0364236C STRH W0, [X31 + 0xC]
	0x03642370 B.HI 0x364247C
	0x03642374 CMP W8, 0x44
	0x03642378 B.HI 0x36424CC
	0x0364237C AND W8, W24, 0xFFFF
	0x03642380 CMP W8, 0x2D
	0x03642384 B.EQ 0x36426D0
	0x03642388 CMP W8, 0x44
	0x0364238C B.EQ 0x3642498
	0x03642390 B 0x3642530
	0x03642394 MOV W24, W0
	0x03642398 MOV W27, W31
	0x0364239C TBNZ X25, 0x0, 0x364241C
	0x036423A0 B 0x3642554
	0x036423A4 MOV W27, W31
	0x036423A8 MOVZ W24, 0x5C
	0x036423AC TBNZ X25, 0x0, 0x364241C
	0x036423B0 B 0x3642554
	0x036423B4 LDR W24, [X19 + 0x40]
	0x036423B8 MOV X0, X19
	0x036423BC ADD W8, W24, 0x1
	0x036423C0 STR W8, [X19 + 0x40]
	0x036423C4 BL 0x3644594
	0x036423C8 LDR X8, [X19 + 0x38]
	0x036423CC CBZ X8, 0x3642764
	0x036423D0 LDR W8, [X8 + 0x10]
	0x036423D4 LDR W9, [X19 + 0x40]
	0x036423D8 SUB W8, W8, W9
	0x036423DC CMP W8, 0x2
	0x036423E0 B.LT 0x364240C
	0x036423E4 MOV X0, X19
	0x036423E8 BL 0x3643D54
	0x036423EC AND W8, W0, 0xFFFF
	0x036423F0 CMP W8, 0x3A
	0x036423F4 B.NE 0x364240C
	0x036423F8 MOV X0, X19
	0x036423FC BL 0x3643D54
	0x03642400 AND W8, W0, 0xFFFF
	0x03642404 CMP W8, 0x5D
	0x03642408 B.EQ 0x3642334
	0x0364240C MOV W27, W31
	0x03642410 STR W24, [X19 + 0x40]
	0x03642414 MOVZ W24, 0x5B
	0x03642418 TBZ X25, 0x0, 0x3642554
	0x0364241C TBNZ X21, 0x0, 0x3642664
	0x03642420 AND W8, W24, 0xFFFF
	0x03642424 CMP W8, 0x5B
	0x03642428 CSET W8, NE
	0x0364242C ORR W8, W27, W8, 0x0
	0x03642430 ORR W8, W26, W8, 0x0
	0x03642434 TBZ X8, 0x0, 0x3642454
	0x03642438 AND W8, W23, 0xFFFF
	0x0364243C CMP W8, W24, UXTH
	0x03642440 B.HI 0x364279C
	0x03642444 CBZ X22, 0x3642764
	0x03642448 MOV X0, X22
	0x0364244C MOV W1, W23
	0x03642450 B 0x36425FC
	0x03642454 CBZ X22, 0x3642764
	0x03642458 MOV X0, X22
	0x0364245C MOV W1, W23
	0x03642460 MOV X2, X31
	0x03642464 BL 0x363427C
	0x03642468 AND W1, W20, 0x1
	0x0364246C MOV X0, X19
	0x03642470 MOV W2, W31
	0x03642474 BL 0x36421E4
	0x03642478 B 0x3642630
	0x0364247C CMP W8, 0x64
	0x03642480 B.HI 0x36424E4
	0x03642484 AND W8, W24, 0xFFFF
	0x03642488 CMP W8, 0x57
	0x0364248C B.EQ 0x3642500
	0x03642490 CMP W8, 0x64
	0x03642494 B.NE 0x3642530
	0x03642498 TBNZ X21, 0x0, 0x3642668
	0x0364249C TBNZ X25, 0x0, 0x36427B4
	0x036424A0 CBZ X22, 0x3642764
	0x036424A4 LDR W8, [X19 + 0x80]
	0x036424A8 LDR X3, [X19 + 0x38]
	0x036424AC AND W9, W24, 0xFFFF
	0x036424B0 CMP W9, 0x44
	0x036424B4 UBFM W1, W8, 0x8, 0x8
	0x036424B8 CSET W2, EQ
	0x036424BC MOV X0, X22
	0x036424C0 MOV X4, X31
	0x036424C4 BL 0x3635258
	0x036424C8 B 0x3642664
	0x036424CC AND W8, W24, 0xFFFF
	0x036424D0 CMP W8, 0x50
	0x036424D4 B.EQ 0x3642690
	0x036424D8 CMP W8, 0x53
	0x036424DC B.EQ 0x36426A0
	0x036424E0 B 0x3642530
	0x036424E4 AND W8, W24, 0xFFFF
	0x036424E8 CMP W8, 0x70
	0x036424EC B.EQ 0x3642690
	0x036424F0 CMP W8, 0x73
	0x036424F4 B.EQ 0x36426A0
	0x036424F8 CMP W8, 0x77
	0x036424FC B.NE 0x3642530
	0x03642500 TBNZ X21, 0x0, 0x3642668
	0x03642504 TBNZ X25, 0x0, 0x36427B4
	0x03642508 CBZ X22, 0x3642764
	0x0364250C LDR W8, [X19 + 0x80]
	0x03642510 AND W9, W24, 0xFFFF
	0x03642514 CMP W9, 0x57
	0x03642518 CSET W2, EQ
	0x0364251C UBFM W1, W8, 0x8, 0x8
	0x03642520 MOV X0, X22
	0x03642524 MOV X3, X31
	0x03642528 BL 0x3635060
	0x0364252C B 0x3642664
	0x03642530 LDR W8, [X19 + 0x40]
	0x03642534 MOV X0, X19
	0x03642538 SUB W8, W8, 0x1
	0x0364253C STR W8, [X19 + 0x40]
	0x03642540 BL 0x3644404
	0x03642544 MOV W24, W0
	0x03642548 STRH W0, [X31 + 0xC]
	0x0364254C MOVZ W27, 0x1
	0x03642550 TBNZ X25, 0x0, 0x364241C
	0x03642554 LDR X8, [X19 + 0x38]
	0x03642558 CBZ X8, 0x3642764
	0x0364255C LDR W8, [X8 + 0x10]
	0x03642560 LDR W9, [X19 + 0x40]
	0x03642564 SUB W8, W8, W9
	0x03642568 CMP W8, 0x2
	0x0364256C B.LT 0x364259C
	0x03642570 MOV X0, X19
	0x03642574 BL 0x3641BB0
	0x03642578 AND W8, W0, 0xFFFF
	0x0364257C CMP W8, 0x2D
	0x03642580 B.NE 0x364259C
	0x03642584 MOVZ W1, 0x1
	0x03642588 MOV X0, X19
	0x0364258C BL 0x3644650
	0x03642590 AND W8, W0, 0xFFFF
	0x03642594 CMP W8, 0x5D
	0x03642598 B.NE 0x3642678
	0x0364259C LDR X8, [X19 + 0x38]
	0x036425A0 CBZ X8, 0x3642764
	0x036425A4 LDR W8, [X8 + 0x10]
	0x036425A8 LDR W9, [X19 + 0x40]
	0x036425AC AND W10, W24, 0xFFFF
	0x036425B0 SUB W8, W8, W9
	0x036425B4 CMP W8, 0x1
	0x036425B8 CSET W8, LT
	0x036425BC CMP W10, 0x2D
	0x036425C0 CSET W9, NE
	0x036425C4 ORR W8, W8, W9, 0x0
	0x036425C8 ORR W8, W27, W8, 0x0
	0x036425CC TBNZ X8, 0x0, 0x36425EC
	0x036425D0 MOV X0, X19
	0x036425D4 BL 0x3641BB0
	0x036425D8 AND W8, W0, 0xFFFF
	0x036425DC CMP W8, 0x5B
	0x036425E0 CSET W8, NE
	0x036425E4 ORR W8, W26, W8, 0x0
	0x036425E8 TBZ X8, 0x0, 0x364260C
	0x036425EC TBNZ X21, 0x0, 0x3642664
	0x036425F0 CBZ X22, 0x3642764
	0x036425F4 MOV X0, X22
	0x036425F8 MOV W1, W24
	0x036425FC MOV W2, W24
	0x03642600 MOV X3, X31
	0x03642604 BL 0x3634284
	0x03642608 B 0x3642664
	0x0364260C LDR W8, [X19 + 0x40]
	0x03642610 AND W1, W20, 0x1
	0x03642614 AND W2, W21, 0x1
	0x03642618 MOV X0, X19
	0x0364261C ADD W8, W8, 0x1
	0x03642620 STR W8, [X19 + 0x40]
	0x03642624 BL 0x36421E4
	0x03642628 TBNZ X21, 0x0, 0x3642664
	0x0364262C CBZ X22, 0x3642764
	0x03642630 STR X0, [X22 + 0x28]
	0x03642634 LDR X8, [X19 + 0x38]
	0x03642638 CBZ X8, 0x3642764
	0x0364263C LDR W8, [X8 + 0x10]
	0x03642640 LDR W9, [X19 + 0x40]
	0x03642644 SUB W8, W8, W9
	0x03642648 CMP W8, 0x1
	0x0364264C B.LT 0x3642664
	0x03642650 MOV X0, X19
	0x03642654 BL 0x3641BB0
	0x03642658 AND W8, W0, 0xFFFF
	0x0364265C CMP W8, 0x5D
	0x03642660 B.NE 0x36427A8
	0x03642664 MOV W25, W31
	0x03642668 LDR X8, [X19 + 0x38]
	0x0364266C MOV W26, W31
	0x03642670 CBNZ X8, 0x36422B0
	0x03642674 B 0x3642764
	0x03642678 LDR W8, [X19 + 0x40]
	0x0364267C MOVZ W25, 0x1
	0x03642680 MOV W23, W24
	0x03642684 ADD W8, W8, 0x1
	0x03642688 STR W8, [X19 + 0x40]
	0x0364268C B 0x3642668
	0x03642690 TBZ X21, 0x0, 0x36426F0
	0x03642694 MOV X0, X19
	0x03642698 BL 0x3644294
	0x0364269C B 0x3642668
	0x036426A0 TBNZ X21, 0x0, 0x3642668
	0x036426A4 TBNZ X25, 0x0, 0x36427B4
	0x036426A8 CBZ X22, 0x3642764
	0x036426AC LDR W8, [X19 + 0x80]
	0x036426B0 AND W9, W24, 0xFFFF
	0x036426B4 CMP W9, 0x53
	0x036426B8 CSET W2, EQ
	0x036426BC UBFM W1, W8, 0x8, 0x8
	0x036426C0 MOV X0, X22
	0x036426C4 MOV X3, X31
	0x036426C8 BL 0x363515C
	0x036426CC B 0x3642664
	0x036426D0 TBNZ X21, 0x0, 0x3642668
	0x036426D4 CBZ X22, 0x3642764
	0x036426D8 MOVZ W1, 0x2D
	0x036426DC MOVZ W2, 0x2D
	0x036426E0 MOV X0, X22
	0x036426E4 MOV X3, X31
	0x036426E8 BL 0x3634284
	0x036426EC B 0x3642668
	0x036426F0 TBNZ X25, 0x0, 0x36427B4
	0x036426F4 MOV X0, X19
	0x036426F8 BL 0x3644294
	0x036426FC CBZ X22, 0x3642764
	0x03642700 LDR X4, [X19 + 0x38]
	0x03642704 AND W8, W24, 0xFFFF
	0x03642708 CMP W8, 0x70
	0x0364270C MOV X1, X0
	0x03642710 CSET W2, NE
	0x03642714 AND W3, W20, 0x1
	0x03642718 MOV X0, X22
	0x0364271C MOV X5, X31
	0x03642720 BL 0x36347E4
	0x03642724 B 0x3642664
	0x03642728 TBNZ X21, 0x0, 0x3642744
	0x0364272C TBZ X20, 0x0, 0x3642744
	0x03642730 CBZ X22, 0x3642764
	0x03642734 LDR X1, [X19 + 0x48]
	0x03642738 MOV X0, X22
	0x0364273C MOV X2, X31
	0x03642740 BL 0x3634CF4
	0x03642744 MOV X0, X22
	0x03642748 LDP X20, X19, [X31 + 0x50]
	0x0364274C LDP X22, X21, [X31 + 0x40]
	0x03642750 LDP X24, X23, [X31 + 0x30]
	0x03642754 LDP X26, X25, [X31 + 0x20]
	0x03642758 LDP X30, X27, [X31 + 0x10]
	0x0364275C ADD X31, X31, 0x60
	0x03642760 RET
	0x03642764 BL 0x1C16F20
	0x03642768 ADRP X0, 0xAFA000
	0x0364276C LDR X0, [X0 + 0x450]
	0x03642770 BL 0x1C16D08
	0x03642774 MOV X1, X0
	0x03642778 MOV X0, X19
	0x0364277C BL 0x3643360
	0x03642780 MOV X19, X0
	0x03642784 ADRP X0, 0xAFA000
	0x03642788 LDR X0, [X0 + 0x458]
	0x0364278C BL 0x1C16D08
	0x03642790 MOV X1, X0
	0x03642794 MOV X0, X19
	0x03642798 BL 0x1C16DEC
	0x0364279C ADRP X0, 0xAFA000
	0x036427A0 LDR X0, [X0 + 0x460]
	0x036427A4 B 0x3642770
	0x036427A8 ADRP X0, 0xAFA000
	0x036427AC LDR X0, [X0 + 0x468]
	0x036427B0 B 0x3642770
	0x036427B4 ADRP X0, 0xAB3000
	0x036427B8 LDR X0, [X0 + 0x170]
	0x036427BC BL 0x1C16D08
	0x036427C0 BL 0x19903D0
	0x036427C4 ADD X0, X31, 0xC
	0x036427C8 MOV X1, X31
	0x036427CC BL 0x330A76C
	0x036427D0 MOV X20, X0
	0x036427D4 ADRP X0, 0xAFA000
	0x036427D8 LDR X0, [X0 + 0x470]
	0x036427DC BL 0x1C16D08
	0x036427E0 MOV X1, X20
	0x036427E4 MOV X2, X31
	0x036427E8 BL 0x32094D4

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, 0xD9F000
	015 Move W8, [X19+1448]
	016 Move X24, X3
	017 Move X25, X2
	018 Move X20, X1
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {50}
	024 Move X0, 0xAB2000
	025 Move X0, [X0+1880]
	026 Call 0x1C17CF4
	027 Move X0, 0xAB3000
	028 Move X0, [X0+3600]
	029 Call 0x1C17CF4
	030 Move X0, 0xAB3000
	031 Move X0, [X0+440]
	032 Call 0x1C17CF4
	033 Move X0, 0xAB6000
	034 Move X0, [X0+2928]
	035 Call 0x1C17CF4
	036 Move X0, 0xAB3000
	037 Move X0, [X0+448]
	038 Call 0x1C17CF4
	039 Move X0, 0xAB3000
	040 Move X0, [X0+456]
	041 Call 0x1C17CF4
	042 Move X0, 0xAB3000
	043 Move X0, [X0+3632]
	044 Call 0x1C17CF4
	045 Move X0, 0xAB3000
	046 Move X0, [X0+464]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X19+1448], W8
	050 Move X0, X21
	051 Move X1, X31
	052 Call Object..ctor, X0
	053 Compare X25, 0
	054 JumpIfEqual {318}
	055 Move W8, [X25+16]
	056 Move [X31+8], X21
	057 Move [X31+16], X20
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X20, 0xAB3000
	060 Move X22, 0xAB3000
	061 Move X23, 0xAB3000
	062 Move X26, 0xAB6000
	063 Move X19, 0xAB3000
	064 Move X20, [X20+464]
	065 Move X22, [X22+448]
	066 Move X23, [X23+3632]
	067 Move X26, [X26+2928]
	068 Move X19, [X19+3600]
	069 Move W0, 16
	070 Move X1, X31
	071 Call StringBuilderCache.Acquire, X0
	072 Move X8, [X20]
	073 Move X21, X0
	074 Move X0, X8
	075 Call 0x1C17F10
	076 Move X1, [X22]
	077 Move X22, X0
	078 Call List`1<Object>..ctor, X0
	079 Move X0, [X23]
	080 Call 0x1C17F10
	081 Move X1, [X26]
	082 Move X23, X0
	083 Call List`1<Int32>..ctor, X0
	084 Move X27, 0xAFB000
	085 Move X27, [X27+720]
	086 Move W26, W31
	087 Move X29, 0xD9F000
	088 Move W20, 1
	089 Move W8, [X29+1403]
	090 Move TEMP, X8
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfEqual {97}
	094 Move X0, X27
	095 Call 0x1C17CF4
	096 Move [X29+1403], W20
	097 Move X8, [X25+24]
	098 Compare X8, 0
	099 JumpIfEqual {101}
	100 Move W8, [X8+24]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Move X0, X25
	103 Move W1, W26
	104 Call RegexNode.Child, X0, X1
	105 Compare X0, 0
	106 JumpIfEqual {318}
	107 Move W8, [X0+16]
	108 Move X28, X0
	109 NotImplemented "Instruction CMP not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Compare X21, 0
	113 JumpIfEqual {318}
	114 Move X1, [X28+32]
	115 Move X0, X21
	116 Move X2, X31
	117 Call StringBuilder.Append, X0, X1
	118 Compare X21, 0
	119 JumpIfEqual {318}
	120 NotImplemented "Instruction LDRH not yet implemented."
	121 Move X0, X21
	122 Move X2, X31
	123 Call StringBuilder.Append, X0, X1
	124 Compare X21, 0
	125 JumpIfEqual {318}
	126 Move X0, X21
	127 Move X1, X31
	128 Call StringBuilder.get_Length, X0
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Compare X22, 0
	131 JumpIfEqual {318}
	132 Compare X23, 0
	133 JumpIfEqual {318}
	134 Move W10, [X23+28]
	135 Move W1, [X22+24]
	136 Move X8, [X23+16]
	137 Move X9, [X19]
	138 Add W10, W10, 1
	139 Move [X23+28], W10
	140 Compare X8, 0
	141 JumpIfEqual {318}
	142 NotImplemented "Instruction LDRSW not yet implemented."
	143 Move W11, [X8+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Add W9, W10, 1
	146 Add X8, X8, X10
	147 Move [X23+24], W9
	148 Move [X8+32], W1
	149 Move X8, [X9+32]
	150 Move X0, X23
	151 Move X8, [X8+192]
	152 Move X2, [X8+112]
	153 Call List`1<Int32>.AddWithResize, X0, X1
	154 Move X8, [X21]
	155 Move X0, X21
	156 Move X9, [X8+360]
	157 Move X1, [X8+368]
	158 NotImplemented "Instruction BLR not yet implemented."
	159 Move X9, 0xAB3000
	160 Move W10, [X22+28]
	161 Move X8, [X22+16]
	162 Move X9, [X9+440]
	163 Add W10, W10, 1
	164 Move X9, [X9]
	165 Move [X22+28], W10
	166 Compare X8, 0
	167 JumpIfEqual {318}
	168 NotImplemented "Instruction LDRSW not yet implemented."
	169 Move W11, [X8+24]
	170 Move X1, X0
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Add W9, W10, 1
	173 Add X8, X8, X10
	174 Move [X22+24], W9
	175 Move [X8+32], X1
	176 Move X8, [X9+32]
	177 Move X0, X22
	178 Move X8, [X8+192]
	179 Move X2, [X8+112]
	180 Call List`1<Object>.AddWithResize, X0, X1
	181 Move X0, X21
	182 Move W1, W31
	183 Move X2, X31
	184 Call StringBuilder.set_Length, X0, X1
	185 Move W8, [X28+44]
	186 Move X28, 0xAB2000
	187 Move X28, [X28+1880]
	188 Compare X24, 0
	189 JumpIfEqual {213}
	190 Move TEMP, X8
	191 And TEMP, TEMP, -2147483648
	192 Compare TEMP, -2147483648
	193 JumpIfEqual {213}
	194 Move X0, [X28]
	195 Add X1, X31, 28
	196 Move [X31+28], W8
	197 Call 0x1C17E04
	198 Move X8, [X24]
	199 Move X1, X0
	200 Move X0, X24
	201 Move X9, [X8+728]
	202 Move X2, [X8+736]
	203 NotImplemented "Instruction BLR not yet implemented."
	204 Compare X0, 0
	205 JumpIfEqual {318}
	206 Move X8, [X0]
	207 Move X1, [X28]
	208 Move X8, [X8+64]
	209 Move X9, [X1+64]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Call 0x1C17E08
	212 Move W8, [X0]
	213 Compare X23, 0
	214 JumpIfEqual {318}
	215 Move W11, [X23+28]
	216 Move X9, [X23+16]
	217 Move X10, [X19]
	218 Add W11, W11, 1
	219 Move [X23+28], W11
	220 Compare X9, 0
	221 JumpIfEqual {318}
	222 NotImplemented "Instruction LDRSW not yet implemented."
	223 Move W12, [X9+24]
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Move TEMP, 4
	226 Not TEMP
	227 Move W12, TEMP
	228 Subtract W1, W12, W8
	229 Add W8, W11, 1
	230 Add X9, X9, X11
	231 Move [X23+24], W8
	232 Move [X9+32], W1
	233 Move X8, [X10+32]
	234 Move X0, X23
	235 Move X8, [X8+192]
	236 Move X2, [X8+112]
	237 Call List`1<Int32>.AddWithResize, X0, X1
	238 Add W26, W26, 1
	239 Compare X21, 0
	240 JumpIfEqual {318}
	241 Move X0, X21
	242 Move X1, X31
	243 Call StringBuilder.get_Length, X0
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Compare X22, 0
	246 JumpIfEqual {318}
	247 Compare X23, 0
	248 JumpIfEqual {318}
	249 Move W10, [X23+28]
	250 Move W1, [X22+24]
	251 Move X8, [X23+16]
	252 Move X9, [X19]
	253 Add W10, W10, 1
	254 Move [X23+28], W10
	255 Compare X8, 0
	256 JumpIfEqual {318}
	257 NotImplemented "Instruction LDRSW not yet implemented."
	258 Move W11, [X8+24]
	259 NotImplemented "Instruction CMP not yet implemented."
	260 Add W9, W10, 1
	261 Add X8, X8, X10
	262 Move [X23+24], W9
	263 Move [X8+32], W1
	264 Move X8, [X9+32]
	265 Move X0, X23
	266 Move X8, [X8+192]
	267 Move X2, [X8+112]
	268 Call List`1<Int32>.AddWithResize, X0, X1
	269 Move X8, [X21]
	270 Move X0, X21
	271 Move X9, [X8+360]
	272 Move X1, [X8+368]
	273 NotImplemented "Instruction BLR not yet implemented."
	274 Move X9, 0xAB3000
	275 Move W10, [X22+28]
	276 Move X8, [X22+16]
	277 Move X9, [X9+440]
	278 Add W10, W10, 1
	279 Move X9, [X9]
	280 Move [X22+28], W10
	281 Compare X8, 0
	282 JumpIfEqual {318}
	283 NotImplemented "Instruction LDRSW not yet implemented."
	284 Move W11, [X8+24]
	285 Move X1, X0
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Add W9, W10, 1
	288 Add X8, X8, X10
	289 Move [X22+24], W9
	290 Move [X8+32], X1
	291 Move X8, [X9+32]
	292 Move X0, X22
	293 Move X8, [X8+192]
	294 Move X2, [X8+112]
	295 Call List`1<Object>.AddWithResize, X0, X1
	296 Move X0, X21
	297 Move X1, X31
	298 Call StringBuilderCache.Release, X0
	299 Move X9, [X31+8]
	300 Move X8, [X31+16]
	301 Move X20, [X31+112]
	302 Move X19, [X31+120]
	303 Move X26, [X31+64]
	304 Move X25, [X31+72]
	305 Move X28, [X31+48]
	306 Move X27, [X31+56]
	307 Move [X9+24], X23
	308 Move [X9+32], X8
	309 Move [X9+16], X22
	310 Move X22, [X31+96]
	311 Move X21, [X31+104]
	312 Move X24, [X31+80]
	313 Move X23, [X31+88]
	314 Move X29, [X31+32]
	315 Move X30, [X31+40]
	316 Add X31, X31, 128
	317 Return 
	318 Call 0x1C17F20
	319 Move X0, 0xABA000
	320 Move X0, [X0+1400]
	321 Call 0x1C17D08
	322 Call 0x1C17F10
	323 Move X19, X0
	324 Move X0, 0xAFB000
	325 Move X0, [X0+1072]
	326 Call 0x1C17D08
	327 Move X1, X0
	328 Move X0, X19
	329 Move X2, X31
	330 Call ArgumentException..ctor, X0, X1
	331 Move X0, 0xAFB000
	332 Move X0, [X0+1080]
	333 Call 0x1C17D08
	334 Move X1, X0
	335 Move X0, X19
	336 Call 0x1C17DEC
	337 Call 0x1C181E0

Method: System.Text.RegularExpressions.RegexReplacement GetOrCreate(System.WeakReference`1<System.Text.RegularExpressions.RegexReplacement> replRef, System.String replacement, System.Collections.Hashtable caps, System.Int32 capsize, System.Collections.Hashtable capnames, System.Text.RegularExpressions.RegexOptions roptions)

Disassembly:
	0x03646DA0 LDR X30, [X31], #0x20
	0x03646DA4 RET
	0x03646DA8 BL 0x1C16F20
	0x03646DAC STR X30, [X31 - 0x20]!
	0x03646DB0 STP X20, X19, [X31 + 0x10]
	0x03646DB4 ADRP X20, 0xD9A000
	0x03646DB8 LDRB W8, [X20 + 0x5B3]
	0x03646DBC MOV X19, X0
	0x03646DC0 TBNZ X8, 0x0, 0x3646DD8
	0x03646DC4 ADRP X0, 0xAAE000
	0x03646DC8 LDR X0, [X0 + 0xE58]
	0x03646DCC BL 0x1C16CF4
	0x03646DD0 MOVZ W8, 0x1
	0x03646DD4 STRB W8, [X20 + 0x5B3]
	0x03646DD8 LDR X8, [X19 + 0x50]
	0x03646DDC CBZ X8, 0x3646E48
	0x03646DE0 ADRP X9, 0xAAE000
	0x03646DE4 LDR X9, [X9 + 0xE58]
	0x03646DE8 LDR W8, [X8 + 0x18]
	0x03646DEC LDR X0, [X9]
	0x03646DF0 UBFM W1, W8, 0x1F, 0x1E
	0x03646DF4 BL 0x1C16D6C
	0x03646DF8 LDR X8, [X19 + 0x50]
	0x03646DFC CBZ X8, 0x3646E48
	0x03646E00 LDR W3, [X8 + 0x18]
	0x03646E04 MOV X20, X0
	0x03646E08 MOV X0, X8
	0x03646E0C MOV W1, W31
	0x03646E10 MOV X2, X20
	0x03646E14 MOV W4, W3
	0x03646E18 MOV X5, X31
	0x03646E1C BL 0x339FCE8
	0x03646E20 LDR X8, [X19 + 0x50]
	0x03646E24 CBZ X8, 0x3646E48
	0x03646E28 LDR W9, [X19 + 0x58]
	0x03646E2C LDR W8, [X8 + 0x18]
	0x03646E30 STR X20, [X19 + 0x50]
	0x03646E34 ADD W8, W9, W8
	0x03646E38 STR W8, [X19 + 0x58]
	0x03646E3C LDP X20, X19, [X31 + 0x10]
	0x03646E40 LDR X30, [X31], #0x20
	0x03646E44 RET
	0x03646E48 BL 0x1C16F20
	0x03646E4C STR X30, [X31 - 0x20]!
	0x03646E50 STP X20, X19, [X31 + 0x10]
	0x03646E54 LDR W9, [X0 + 0x58]
	0x03646E58 MOV X20, X0
	0x03646E5C MOV W19, W1
	0x03646E60 CBNZ W9, 0x3646E70
	0x03646E64 MOV X0, X20
	0x03646E68 BL 0x3646DAC
	0x03646E6C LDR W9, [X20 + 0x58]
	0x03646E70 LDR X8, [X20 + 0x50]
	0x03646E74 SUB W9, W9, 0x1
	0x03646E78 STR W9, [X20 + 0x58]
	0x03646E7C CBZ X8, 0x3646EA0
	0x03646E80 LDR W10, [X8 + 0x18]
	0x03646E84 CMP W9, W10
	0x03646E88 B.CS 0x3646EA4
	0x03646E8C ADD X8, X8, W9, 0x2, SXTW
	0x03646E90 STR W19, [X8 + 0x20]
	0x03646E94 LDP X20, X19, [X31 + 0x10]
	0x03646E98 LDR X30, [X31], #0x20
	0x03646E9C RET
	0x03646EA0 BL 0x1C16F20
	0x03646EA4 BL 0x1C16F28
	0x03646EA8 STR X30, [X31 - 0x10]!
	0x03646EAC LDRSW X8, [X0 + 0x58]
	0x03646EB0 LDR X9, [X0 + 0x50]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0xD9B000
	011 Move W8, [X25+1449]
	012 Move W19, W5
	013 Move X21, X4
	014 Move W22, W3
	015 Move X23, X2
	016 Move X24, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0xAF6000
	023 Move X0, [X0+2056]
	024 Call 0x1C17CF4
	025 Move X0, 0xAF7000
	026 Move X0, [X0+1480]
	027 Call 0x1C17CF4
	028 Move X0, 0xAF7000
	029 Move X0, [X0+1488]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X25+1449], W8
	033 Move [X31+8], X31
	034 Compare X20, 0
	035 JumpIfEqual {90}
	036 Move X8, 0xAF7000
	037 Move X8, [X8+1488]
	038 Add X1, X31, 8
	039 Move X0, X20
	040 Move X2, [X8]
	041 Call 0x285152C, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {59}
	046 Move X8, [X31+8]
	047 Compare X8, 0
	048 JumpIfEqual {90}
	049 Move X0, [X8+32]
	050 Compare X0, 0
	051 JumpIfEqual {90}
	052 Move X1, X24
	053 Move X2, X31
	054 Call String.Equals, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {79}
	059 Move X8, 0xAF6000
	060 Move X8, [X8+2056]
	061 Move X25, 0xAF7000
	062 Move X0, [X8]
	063 Move W8, [X0+224]
	064 Move X25, [X25+1480]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X24
	069 Move X1, X23
	070 Move W2, W22
	071 Move X3, X21
	072 Move W4, W19
	073 Call RegexParser.ParseReplacement, X0, X1, X2, X3, X4
	074 Move X2, [X25]
	075 Move X1, X0
	076 Move [X31+8], X0
	077 Move X0, X20
	078 Call 0x2851520, X0, X1
	079 Move X0, [X31+8]
	080 Move X20, [X31+64]
	081 Move X19, [X31+72]
	082 Move X22, [X31+48]
	083 Move X21, [X31+56]
	084 Move X24, [X31+32]
	085 Move X23, [X31+40]
	086 Move X30, [X31+16]
	087 Move X25, [X31+24]
	088 Add X31, X31, 80
	089 Return X0
	090 Call 0x1C17F20

Method: System.String get_Pattern()

Disassembly:
	0x03646EB4 ADD W10, W8, 0x1
	0x03646EB8 STR W10, [X0 + 0x58]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void ReplacementImpl(System.Text.StringBuilder sb, System.Text.RegularExpressions.Match match)

Disassembly:
	0x03646EBC CBZ X9, 0x3646EDC
	0x03646EC0 LDR W10, [X9 + 0x18]
	0x03646EC4 CMP W8, W10
	0x03646EC8 B.CS 0x3646EE0
	0x03646ECC ADD X8, X9, X8, 0x2, LSL
	0x03646ED0 LDR W0, [X8 + 0x20]
	0x03646ED4 LDR X30, [X31], #0x10
	0x03646ED8 RET
	0x03646EDC BL 0x1C16F20
	0x03646EE0 BL 0x1C16F28
	0x03646EE4 SUB X31, X31, 0xA0
	0x03646EE8 STP X29, X30, [X31 + 0x40]
	0x03646EEC STP X28, X27, [X31 + 0x50]
	0x03646EF0 STP X26, X25, [X31 + 0x60]
	0x03646EF4 STP X24, X23, [X31 + 0x70]
	0x03646EF8 STP X22, X21, [X31 + 0x80]
	0x03646EFC STP X20, X19, [X31 + 0x90]
	0x03646F00 ADRP X29, 0xD9A000
	0x03646F04 ADRP X28, 0xAF6000
	0x03646F08 ADRP X27, 0xAAF000
	0x03646F0C ADRP X26, 0xAAF000
	0x03646F10 ADRP X25, 0xAAE000
	0x03646F14 ADRP X24, 0xAAE000
	0x03646F18 LDRB W8, [X29 + 0x5B4]
	0x03646F1C LDR X28, [X28 + 0x2C0]
	0x03646F20 LDR X27, [X27 + 0xB18]
	0x03646F24 LDR X26, [X26 + 0xB20]
	0x03646F28 LDR X25, [X25 + 0x1D0]
	0x03646F2C LDR X24, [X24 + 0x1C0]
	0x03646F30 MOV X20, X4
	0x03646F34 MOV X21, X3
	0x03646F38 MOV X22, X2
	0x03646F3C MOV X23, X1
	0x03646F40 MOV X19, X0
	0x03646F44 TBNZ X8, 0x0, 0x3646F8C
	0x03646F48 ADRP X0, 0xAAF000
	0x03646F4C LDR X0, [X0 + 0xB20]
	0x03646F50 BL 0x1C16CF4
	0x03646F54 ADRP X0, 0xAAF000
	0x03646F58 LDR X0, [X0 + 0xB18]
	0x03646F5C BL 0x1C16CF4
	0x03646F60 ADRP X0, 0xAAE000
	0x03646F64 LDR X0, [X0 + 0x1C0]
	0x03646F68 BL 0x1C16CF4
	0x03646F6C ADRP X0, 0xAAE000
	0x03646F70 LDR X0, [X0 + 0x1D0]
	0x03646F74 BL 0x1C16CF4
	0x03646F78 ADRP X0, 0xAF6000
	0x03646F7C LDR X0, [X0 + 0x2C0]
	0x03646F80 BL 0x1C16CF4
	0x03646F84 MOVZ W8, 0x1
	0x03646F88 STRB W8, [X29 + 0x5B4]
	0x03646F8C LDR X3, [X28]
	0x03646F90 MOVI V0.2D, 0x0
	0x03646F94 ADD X0, X31, 0x20
	0x03646F98 MOV X1, X23
	0x03646F9C MOV X2, X22
	0x03646FA0 STP V0, V0, [X31 + 0x20]
	0x03646FA4 BL 0x278D208
	0x03646FA8 LDP V1, V0, [X31 + 0x20]
	0x03646FAC ADD X0, X31, 0x0
	0x03646FB0 MOV X1, X21
	0x03646FB4 MOV X2, X20
	0x03646FB8 STP V1, V0, [X19]
	0x03646FBC LDR X3, [X28]
	0x03646FC0 MOVI V0.2D, 0x0
	0x03646FC4 STP V0, V0, [X31]
	0x03646FC8 BL 0x278D208
	0x03646FCC LDP V1, V0, [X31]
	0x03646FD0 STP V1, V0, [X19 + 0x20]
	0x03646FD4 LDR X0, [X27]
	0x03646FD8 BL 0x1C16F10
	0x03646FDC LDR X1, [X26]
	0x03646FE0 MOV X20, X0
	0x03646FE4 BL 0x2A9E704
	0x03646FE8 STR X20, [X19 + 0x40]
	0x03646FEC LDR X0, [X25]
	0x03646FF0 BL 0x1C16F10
	0x03646FF4 LDR X1, [X24]
	0x03646FF8 MOV X20, X0
	0x03646FFC BL 0x301B7C4
	0x03647000 STP X20, X31, [X19 + 0x48]
	0x03647004 STR W31, [X19 + 0x58]
	0x03647008 LDP X20, X19, [X31 + 0x90]
	0x0364700C LDP X22, X21, [X31 + 0x80]
	0x03647010 LDP X24, X23, [X31 + 0x70]
	0x03647014 LDP X26, X25, [X31 + 0x60]
	0x03647018 LDP X28, X27, [X31 + 0x50]
	0x0364701C LDP X29, X30, [X31 + 0x40]
	0x03647020 ADD X31, X31, 0xA0
	0x03647024 RET
	0x03647028 STP X29, X30, [X31 - 0x30]!
	0x0364702C STR X21, [X31 + 0x10]
	0x03647030 STP X20, X19, [X31 + 0x20]
	0x03647034 ADD X29, X31, 0x0
	0x03647038 SUB X31, X31, 0x70
	0x0364703C MRS X21, 0xC000
	0x03647040 LDR X8, [X21 + 0x28]
	0x03647044 ADRP X20, 0xD99000
	0x03647048 MOV X19, X0
	0x0364704C STUR X8, [X29 - 0x8]
	0x03647050 LDRB W8, [X20 + 0x5B5]
	0x03647054 TBNZ X8, 0x0, 0x364706C
	0x03647058 ADRP X0, 0xADB000
	0x0364705C LDR X0, [X0 + 0x160]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0xD9B000
	011 Move W8, [X22+1450]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xAAF000
	020 Move X0, [X0+3624]
	021 Call 0x1C17CF4
	022 Move X0, 0xAD6000
	023 Move X0, [X0+2904]
	024 Call 0x1C17CF4
	025 Move X0, 0xAD8000
	026 Move X0, [X0+3896]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+1450], W8
	030 Move X0, [X21+24]
	031 Compare X0, 0
	032 JumpIfEqual {118}
	033 Move X23, 0xAD8000
	034 Move X24, 0xAD6000
	035 Move X23, [X23+3896]
	036 Move X24, [X24+2904]
	037 Move X25, -44752896
	038 Move W22, W31
	039 Add X25, X25, 1262
	040 Move TEMP, 4
	041 Not TEMP
	042 Move W26, TEMP
	043 Move W8, [X0+24]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X2, [X23]
	046 Move W1, W22
	047 Call List`1<Int32>.get_Item, X0, X1
	048 Move W1, W0
	049 Move TEMP, X0
	050 And TEMP, TEMP, -2147483648
	051 Compare TEMP, -2147483648
	052 JumpIfEqual {64}
	053 Move X0, [X21+16]
	054 Compare X0, 0
	055 JumpIfEqual {118}
	056 Move X2, [X24]
	057 Call List`1<Object>.get_Item, X0, X1
	058 Compare X20, 0
	059 JumpIfEqual {118}
	060 Move X1, X0
	061 Move X0, X20
	062 Move X2, X31
	063 Call StringBuilder.Append, X0, X1
	064 Add W31, W1, 5
	065 NotImplemented "Instruction ORN not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction ADR not yet implemented."
	068 Move W10, [X25]
	069 Add X9, X9, X10
	070 CallNoReturn X9
	071 Compare X19, 0
	072 JumpIfEqual {118}
	073 Compare X20, 0
	074 JumpIfEqual {118}
	075 Move X1, [X19+24]
	076 Compare X19, 0
	077 JumpIfEqual {118}
	078 Move X8, [X19]
	079 Subtract W1, W26, W1
	080 Move X0, X19
	081 Move X9, [X8+408]
	082 Move X2, [X8+416]
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Compare X20, 0
	085 JumpIfEqual {118}
	086 Move X2, X0
	087 Move X3, X1
	088 Move X0, X20
	089 Move X1, X2
	090 Move X2, X3
	091 Move X3, X31
	092 Call StringBuilder.Append, X0, X1
	093 Move X0, [X21+24]
	094 Add W22, W22, 1
	095 Compare X0, 0
	096 JumpIfNotEqual {43}
	097 Compare X19, 0
	098 JumpIfEqual {118}
	099 Move X0, X19
	100 Move X1, X31
	101 Call Match.LastGroupToStringImpl, X0
	102 Compare X20, 0
	103 JumpIfNotEqual {86}
	104 Compare X19, 0
	105 JumpIfEqual {118}
	106 Move X0, X19
	107 Move X1, X31
	108 Call Capture.GetRightSubstring, X0
	109 Compare X20, 0
	110 JumpIfNotEqual {86}
	111 Compare X19, 0
	112 JumpIfEqual {118}
	113 Move X0, X19
	114 Move X1, X31
	115 Call Capture.GetLeftSubstring, X0
	116 Compare X20, 0
	117 JumpIfNotEqual {86}
	118 Call 0x1C17F20
	119 Move X20, [X31+64]
	120 Move X19, [X31+72]
	121 Move X22, [X31+48]
	122 Move X21, [X31+56]
	123 Move X24, [X31+32]
	124 Move X23, [X31+40]
	125 Move X26, [X31+16]
	126 Move X25, [X31+24]
	127 Move X30, [X31+80]
	128 Return 

Method: System.Void ReplacementImplRTL(System.Collections.Generic.List`1<System.String> al, System.Text.RegularExpressions.Match match)

Disassembly:
	0x03647060 BL 0x1C16CF4
	0x03647064 MOVZ W8, 0x1
	0x03647068 STRB W8, [X20 + 0x5B5]
	0x0364706C MOVI V0.2D, 0x0
	0x03647070 SUB X20, X31, 0xE0
	0x03647074 STP V0, V0, [X29 - 0x30]
	0x03647078 STP V0, V0, [X29 - 0x50]
	0x0364707C STP V0, V0, [X29 - 0x70]
	0x03647080 ADD X31, X20, 0x0
	0x03647084 MOVZ W2, 0xE0
	0x03647088 MOV X0, X20
	0x0364708C MOV W1, W31
	0x03647090 BL 0x3EB1B10
	0x03647094 ADD X8, X31, 0x0
	0x03647098 SUB X3, X8, 0x80
	0x0364709C ADD X31, X3, 0x0
	0x036470A0 MOVI V0.2D, 0x0
	0x036470A4 SUB X0, X29, 0x70
	0x036470A8 MOVZ W2, 0x38
	0x036470AC MOVZ W4, 0x20
	0x036470B0 MOV X1, X20
	0x036470B4 STP V0, V0, [X8 - 0x20]
	0x036470B8 STP V0, V0, [X8 - 0x40]
	0x036470BC STP V0, V0, [X8 - 0x60]
	0x036470C0 STP V0, V0, [X8 - 0x80]
	0x036470C4 BL 0x3646EE4
	0x036470C8 SUB X0, X29, 0x70
	0x036470CC MOV X1, X19
	0x036470D0 BL 0x364710C
	0x036470D4 MOV X19, X0
	0x036470D8 SUB X0, X29, 0x70
	0x036470DC BL 0x3647594
	0x036470E0 LDR X8, [X21 + 0x28]
	0x036470E4 LDUR X9, [X29 - 0x8]
	0x036470E8 CMP X8, X9
	0x036470EC B.NE 0x3647108
	0x036470F0 MOV X0, X19
	0x036470F4 ADD X31, X29, 0x0
	0x036470F8 LDP X20, X19, [X31 + 0x20]
	0x036470FC LDR X21, [X31 + 0x10]
	0x03647100 LDP X29, X30, [X31], #0x30
	0x03647104 RET
	0x03647108 BL 0x3EB1B20
	0x0364710C SUB X31, X31, 0xF0
	0x03647110 STP X29, X30, [X31 + 0x90]
	0x03647114 STP X28, X27, [X31 + 0xA0]
	0x03647118 STP X26, X25, [X31 + 0xB0]
	0x0364711C STP X24, X23, [X31 + 0xC0]
	0x03647120 STP X22, X21, [X31 + 0xD0]
	0x03647124 STP X20, X19, [X31 + 0xE0]
	0x03647128 ADRP X21, 0xD99000
	0x0364712C LDRB W8, [X21 + 0x5B7]
	0x03647130 MOV X20, X1
	0x03647134 MOV X19, X0
	0x03647138 TBNZ X8, 0x0, 0x36471D4
	0x0364713C ADRP X0, 0xAAE000
	0x03647140 LDR X0, [X0 + 0xC48]
	0x03647144 BL 0x1C16CF4
	0x03647148 ADRP X0, 0xAAC000
	0x0364714C LDR X0, [X0 + 0x758]
	0x03647150 BL 0x1C16CF4
	0x03647154 ADRP X0, 0xAF5000
	0x03647158 LDR X0, [X0 + 0x2D0]
	0x0364715C BL 0x1C16CF4
	0x03647160 ADRP X0, 0xAF5000
	0x03647164 LDR X0, [X0 + 0x2D8]
	0x03647168 BL 0x1C16CF4
	0x0364716C ADRP X0, 0xAF5000
	0x03647170 LDR X0, [X0 + 0x600]
	0x03647174 BL 0x1C16CF4
	0x03647178 ADRP X0, 0xAF5000
	0x0364717C LDR X0, [X0 + 0x608]
	0x03647180 BL 0x1C16CF4
	0x03647184 ADRP X0, 0xAF5000
	0x03647188 LDR X0, [X0 + 0x610]
	0x0364718C BL 0x1C16CF4
	0x03647190 ADRP X0, 0xAF5000
	0x03647194 LDR X0, [X0 + 0x2F0]
	0x03647198 BL 0x1C16CF4
	0x0364719C ADRP X0, 0xAF5000
	0x036471A0 LDR X0, [X0 + 0x2F8]
	0x036471A4 BL 0x1C16CF4
	0x036471A8 ADRP X0, 0xAF5000
	0x036471AC LDR X0, [X0 + 0x618]
	0x036471B0 BL 0x1C16CF4
	0x036471B4 ADRP X0, 0xAF5000
	0x036471B8 LDR X0, [X0 + 0x300]
	0x036471BC BL 0x1C16CF4
	0x036471C0 ADRP X0, 0xAF5000
	0x036471C4 LDR X0, [X0 + 0x2E0]
	0x036471C8 BL 0x1C16CF4
	0x036471CC MOVZ W8, 0x1
	0x036471D0 STRB W8, [X21 + 0x5B7]
	0x036471D4 STP X31, X31, [X31 + 0x70]
	0x036471D8 STR X31, [X31 + 0x80]
	0x036471DC STP X31, X31, [X31 + 0x60]
	0x036471E0 CBZ X20, 0x364758C
	0x036471E4 LDR X8, [X20 + 0x20]
	0x036471E8 LDR W9, [X20 + 0x28]
	0x036471EC CBZ X8, 0x36471FC
	0x036471F0 LDR X21, [X8 + 0x18]
	0x036471F4 CMP W9, W21
	0x036471F8 B.NE 0x3647208
	0x036471FC STR X31, [X19 + 0x50]
	0x03647200 MOV W21, W9
	0x03647204 B 0x3647298
	0x03647208 LDR X10, [X20 + 0x18]
	0x0364720C AND X9, X21, 0x0
	0x03647210 CMP W9, 0x1
	0x03647214 STR X10, [X19 + 0x50]
	0x03647218 B.LT 0x3647298
	0x0364721C ADRP X25, 0xAAC000
	0x03647220 LDR X25, [X25 + 0x758]
	0x03647224 MOV X24, X31
	0x03647228 CMP X24, W9, UXTW
	0x0364722C B.CS 0x3647590
	0x03647230 ADD X8, X8, X24, 0x2, LSL
	0x03647234 LDR W8, [X8 + 0x20]
	0x03647238 LDR X0, [X25]
	0x0364723C LDR X22, [X19 + 0x50]
	0x03647240 ADD X1, X31, 0x40
	0x03647244 STR W8, [X31 + 0x40]
	0x03647248 BL 0x1C16E04
	0x0364724C MOV X23, X0
	0x03647250 LDR X0, [X25]
	0x03647254 ADD X1, X31, 0x5C
	0x03647258 STR W24, [X31 + 0x5C]
	0x0364725C BL 0x1C16E04
	0x03647260 CBZ X22, 0x364758C
	0x03647264 LDR X8, [X22]
	0x03647268 MOV X2, X0
	0x0364726C MOV X0, X22
	0x03647270 MOV X1, X23
	0x03647274 LDR X9, [X8 + 0x2E8]
	0x03647278 LDR X3, [X8 + 0x2F0]
	0x0364727C BLR X9
	0x03647280 LDR X8, [X20 + 0x20]
	0x03647284 CBZ X8, 0x364758C
	0x03647288 LDR W9, [X8 + 0x18]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+32], X28
	004 Move [X31+40], X27
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X22, 0xD9A000
	014 Move W8, [X22+1451]
	015 Move X19, X2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0xAAE000
	023 Move X0, [X0+440]
	024 Call 0x1C17CF4
	025 Move X0, 0xAAE000
	026 Move X0, [X0+3624]
	027 Call 0x1C17CF4
	028 Move X0, 0xAD5000
	029 Move X0, [X0+2904]
	030 Call 0x1C17CF4
	031 Move X0, 0xAD7000
	032 Move X0, [X0+3896]
	033 Call 0x1C17CF4
	034 Move X0, 0xAE0000
	035 Move X0, [X0+4056]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+1451], W8
	039 Move [X31], X31
	040 Move [X31+8], X31
	041 Move X0, [X21+24]
	042 Compare X0, 0
	043 JumpIfEqual {161}
	044 Move W8, [X0+24]
	045 Subtract W22, W8, 1
	046 Move X23, 0xAD7000
	047 Move X25, 0xAAE000
	048 Move X26, 0xAE0000
	049 Move X28, 0xAD5000
	050 Move X23, [X23+3896]
	051 Move X25, [X25+440]
	052 Move X26, [X26+4056]
	053 Move X28, [X28+2904]
	054 Move X24, -44756992
	055 Add X24, X24, 1266
	056 Move TEMP, 4
	057 Not TEMP
	058 Move W27, TEMP
	059 Move X2, [X23]
	060 Move W1, W22
	061 Call List`1<Int32>.get_Item, X0, X1
	062 Move W1, W0
	063 Move TEMP, X0
	064 And TEMP, TEMP, -2147483648
	065 Compare TEMP, -2147483648
	066 JumpIfEqual {74}
	067 Move X0, [X21+16]
	068 Compare X0, 0
	069 JumpIfEqual {161}
	070 Move X2, [X28]
	071 Call List`1<Object>.get_Item, X0, X1
	072 Compare X20, 0
	073 JumpIfNotEqual {109}
	074 Add W31, W1, 5
	075 NotImplemented "Instruction ORN not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction ADR not yet implemented."
	078 Move W10, [X24]
	079 Add X9, X9, X10
	080 CallNoReturn X9
	081 Compare X19, 0
	082 JumpIfEqual {161}
	083 Compare X20, 0
	084 JumpIfEqual {161}
	085 Move W10, [X20+28]
	086 Move X1, [X19+24]
	087 Move X8, [X20+16]
	088 Move X9, [X25]
	089 Add W10, W10, 1
	090 Move [X20+28], W10
	091 Compare X8, 0
	092 JumpIfNotEqual {117}
	093 Compare X19, 0
	094 JumpIfEqual {161}
	095 Move X8, [X19]
	096 Subtract W1, W27, W1
	097 Move X0, X19
	098 Move X9, [X8+408]
	099 Move X2, [X8+416]
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X8, [X26]
	102 Move [X31], X0
	103 Move [X31+8], X1
	104 Add X0, X31, 0
	105 Move X1, X8
	106 Call ReadOnlySpan`1<Char>.ToString, X0
	107 Compare X20, 0
	108 JumpIfEqual {161}
	109 Move W10, [X20+28]
	110 Move X8, [X20+16]
	111 Move X9, [X25]
	112 Add W10, W10, 1
	113 Move [X20+28], W10
	114 Compare X8, 0
	115 JumpIfEqual {161}
	116 Move X1, X0
	117 NotImplemented "Instruction LDRSW not yet implemented."
	118 Move W11, [X8+24]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Add W9, W10, 1
	121 Add X8, X8, X10
	122 Move [X20+24], W9
	123 Move [X8+32], X1
	124 Move X8, [X9+32]
	125 Move X0, X20
	126 Move X8, [X8+192]
	127 Move X2, [X8+112]
	128 Call List`1<Object>.AddWithResize, X0, X1
	129 Subtract W22, W22, 1
	130 Move X0, [X21+24]
	131 Compare X0, 0
	132 JumpIfNotEqual {59}
	133 Compare X19, 0
	134 JumpIfEqual {161}
	135 Move X0, X19
	136 Move X1, X31
	137 Call Match.LastGroupToStringImpl, X0
	138 Compare X19, 0
	139 JumpIfEqual {161}
	140 Move X0, X19
	141 Move X1, X31
	142 Call Capture.GetRightSubstring, X0
	143 Compare X19, 0
	144 JumpIfEqual {161}
	145 Move X0, X19
	146 Move X1, X31
	147 Call Capture.GetLeftSubstring, X0
	148 Move X20, [X31+96]
	149 Move X19, [X31+104]
	150 Move X22, [X31+80]
	151 Move X21, [X31+88]
	152 Move X24, [X31+64]
	153 Move X23, [X31+72]
	154 Move X26, [X31+48]
	155 Move X25, [X31+56]
	156 Move X28, [X31+32]
	157 Move X27, [X31+40]
	158 Move X30, [X31+16]
	159 Add X31, X31, 112
	160 Return 
	161 Call 0x1C17F20

Method: System.String Replace(System.Text.RegularExpressions.Regex regex, System.String input, System.Int32 count, System.Int32 startat)

Disassembly:
	0x0364728C ADD X24, X24, 0x1
	0x03647290 CMP X24, W9, SXTW
	0x03647294 B.LT 0x3647228
	0x03647298 LDR X22, [X20 + 0x10]
	0x0364729C MOVZ W1, 0x17
	0x036472A0 MOV X0, X19
	0x036472A4 MOV W2, W31
	0x036472A8 BL 0x36475E8
	0x036472AC CBZ X22, 0x364758C
	0x036472B0 ADRP X27, 0xAF5000
	0x036472B4 ADRP X28, 0xAF5000
	0x036472B8 ADRP X26, 0xAF5000
	0x036472BC LDR X27, [X27 + 0x2D8]
	0x036472C0 LDR X28, [X28 + 0x2F8]
	0x036472C4 LDR X26, [X26 + 0x2F0]
	0x036472C8 MOV W24, W31
	0x036472CC ADD X23, X19, 0x20
	0x036472D0 LDR X8, [X22 + 0x18]
	0x036472D4 CBZ X8, 0x3647384
	0x036472D8 LDR W8, [X8 + 0x18]
	0x036472DC CMP W24, W8
	0x036472E0 B.GE 0x3647398
	0x036472E4 LDR W8, [X22 + 0x10]
	0x036472E8 MOV X0, X19
	0x036472EC MOV X2, X22
	0x036472F0 MOV W3, W24
	0x036472F4 ORR W1, W8, 0x40
	0x036472F8 BL 0x3647718
	0x036472FC LDR X0, [X22 + 0x18]
	0x03647300 CBZ X0, 0x364758C
	0x03647304 LDR X2, [X27]
	0x03647308 MOV W1, W24
	0x0364730C BL 0x301BCCC
	0x03647310 LDR X25, [X28]
	0x03647314 LDRSW X29, [X19 + 0x38]
	0x03647318 MOV X22, X0
	0x0364731C LDR X8, [X25 + 0x20]
	0x03647320 LDRB W9, [X8 + 0x135]
	0x03647324 TBNZ X9, 0x0, 0x3647330
	0x03647328 MOV X0, X8
	0x0364732C BL 0x1C5C684
	0x03647330 LDR W8, [X19 + 0x28]
	0x03647334 CMP W29, W8
	0x03647338 B.LT 0x3647360
	0x0364733C LDR X0, [X25 + 0x20]
	0x03647340 LDRB W8, [X0 + 0x135]
	0x03647344 TBNZ X8, 0x0, 0x364734C
	0x03647348 BL 0x1C5C684
	0x0364734C LDR X8, [X0 + 0xC0]
	0x03647350 MOV X0, X23
	0x03647354 LDR X1, [X8 + 0x38]
	0x03647358 BL 0x278D43C
	0x0364735C LDR W8, [X19 + 0x28]
	0x03647360 CMP W29, W8
	0x03647364 B.CS 0x3647590
	0x03647368 LDR X8, [X19 + 0x20]
	0x0364736C ADD W9, W29, 0x1
	0x03647370 STR W24, [X8, X29, LSL #2]
	0x03647374 MOV W24, W31
	0x03647378 STR W9, [X19 + 0x38]
	0x0364737C CBNZ X22, 0x36472D0
	0x03647380 B 0x364758C
	0x03647384 LDR W1, [X22 + 0x10]
	0x03647388 MOV X0, X19
	0x0364738C MOV X2, X22
	0x03647390 MOV W3, W31
	0x03647394 BL 0x3647718
	0x03647398 LDR W8, [X19 + 0x38]
	0x0364739C CBZ W8, 0x36473E8
	0x036473A0 LDR W9, [X19 + 0x28]
	0x036473A4 SUB W8, W8, 0x1
	0x036473A8 STR W8, [X19 + 0x38]
	0x036473AC CMP W8, W9
	0x036473B0 B.CS 0x3647590
	0x036473B4 LDR X22, [X22 + 0x38]
	0x036473B8 CBZ X22, 0x364758C
	0x036473BC LDR X9, [X19 + 0x20]
	0x036473C0 LDR W10, [X22 + 0x10]
	0x036473C4 MOV X0, X19
	0x036473C8 MOV X2, X22
	0x036473CC LDR W24, [X9, W8, SXTW]
	0x036473D0 ORR W1, W10, 0x80
	0x036473D4 MOV W3, W24
	0x036473D8 BL 0x3647718
	0x036473DC ADD W24, W24, 0x1
	0x036473E0 CBNZ X22, 0x36472D0
	0x036473E4 B 0x364758C
	0x036473E8 LDR W2, [X19 + 0x18]
	0x036473EC MOV X0, X19
	0x036473F0 MOV W1, W31
	0x036473F4 BL 0x3648150
	0x036473F8 MOVZ W1, 0x28
	0x036473FC MOV X0, X19
	0x03647400 BL 0x36481B4
	0x03647404 ADD X8, X31, 0x40
	0x03647408 MOV X0, X20
	0x0364740C BL 0x363B848
	0x03647410 LDR V0, [X31 + 0x4]
	0x03647414 LDR X8, [X31 + 0x50]
	0x03647418 MOV X0, X20
	0x0364741C STR V0, [X31 + 0x7]
	0x03647420 STR X8, [X31 + 0x80]
	0x03647424 BL 0x363BBC4
	0x03647428 ADRP X8, 0xAAE000
	0x0364742C LDR X8, [X8 + 0xC48]
	0x03647430 MOV X24, X0
	0x03647434 LDR W22, [X20 + 0x40]
	0x03647438 MOV X23, X1
	0x0364743C LDR X0, [X8]
	0x03647440 LDR W8, [X0 + 0xE0]
	0x03647444 CBNZ W8, 0x364744C
	0x03647448 BL 0x1C16DFC
	0x0364744C MOV X0, X31
	0x03647450 TBNZ X22, 0x9, 0x364745C
	0x03647454 BL 0x33387A0
	0x03647458 B 0x3647460
	0x0364745C BL 0x3338524
	0x03647460 MOV X25, X0
	0x03647464 LDR X0, [X26]
	0x03647468 LDR W8, [X0 + 0xE0]
	0x0364746C CBNZ W8, 0x3647474
	0x03647470 BL 0x1C16DFC
	0x03647474 CBZ X23, 0x364758C
	0x03647478 LDR W8, [X23 + 0x10]
	0x0364747C UBFM W22, W22, 0x6, 0x6
	0x03647480 CMP W8, 0x1
	0x03647484 B.LT 0x36474D0
	0x03647488 LDR X0, [X26]
	0x0364748C LDR W8, [X0 + 0xE0]
	0x03647490 CBNZ W8, 0x3647498
	0x03647494 BL 0x1C16DFC
	0x03647498 ADRP X8, 0xAF5000
	0x0364749C LDR X8, [X8 + 0x608]
	0x036474A0 ANDS W31, W24, 0xFF
	0x036474A4 CSET W26, NE
	0x036474A8 LDR X0, [X8]
	0x036474AC BL 0x1C16F10
	0x036474B0 MOV X1, X23
	0x036474B4 MOV W2, W26
	0x036474B8 MOV W3, W22
	0x036474BC MOV X4, X25
	0x036474C0 MOV X5, X31
	0x036474C4 MOV X24, X0
	0x036474C8 BL 0x3633844
	0x036474CC B 0x36474D4
	0x036474D0 MOV X24, X31
	0x036474D4 MOV X0, X20
	0x036474D8 BL 0x363BEA0
	0x036474DC ADRP X8, 0xAF5000
	0x036474E0 LDR X8, [X8 + 0x618]
	0x036474E4 MOV W20, W0
	0x036474E8 MOV X0, X19
	0x036474EC LDR X1, [X8]
	0x036474F0 BL 0x278D2CC
	0x036474F4 ADRP X8, 0xAF5000
	0x036474F8 LDR X8, [X8 + 0x600]
	0x036474FC STP X0, X1, [X31 + 0x60]
	0x03647500 ADD X0, X31, 0x60
	0x03647504 LDR X8, [X8]
	0x03647508 MOV X1, X8
	0x0364750C BL 0x25BF5E4
	0x03647510 ADRP X9, 0xAF5000
	0x03647514 LDR W25, [X19 + 0x58]
	0x03647518 LDP X26, X19, [X19 + 0x48]
	0x0364751C LDR X8, [X31 + 0x80]
	0x03647520 LDR V0, [X31 + 0x7]
	0x03647524 LDR X9, [X9 + 0x610]
	0x03647528 MOV X23, X0
	0x0364752C STR X8, [X31 + 0x30]
	0x03647530 STR V0, [X31 + 0x2]
	0x03647534 LDR X0, [X9]
	0x03647538 BL 0x1C16F10
	0x0364753C ADD X7, X31, 0x20
	0x03647540 MOV X1, X23
	0x03647544 MOV X2, X26
	0x03647548 MOV W3, W25
	0x0364754C MOV X4, X19
	0x03647550 MOV W5, W21
	0x03647554 MOV X6, X24
	0x03647558 MOV X27, X0
	0x0364755C STRB W22, [X31 + 0x8]
	0x03647560 STR W20, [X31]
	0x03647564 BL 0x363B674
	0x03647568 MOV X0, X27
	0x0364756C LDP X20, X19, [X31 + 0xE0]
	0x03647570 LDP X22, X21, [X31 + 0xD0]
	0x03647574 LDP X24, X23, [X31 + 0xC0]
	0x03647578 LDP X26, X25, [X31 + 0xB0]
	0x0364757C LDP X28, X27, [X31 + 0xA0]
	0x03647580 LDP X29, X30, [X31 + 0x90]
	0x03647584 ADD X31, X31, 0xF0
	0x03647588 RET
	0x0364758C BL 0x1C16F20
	0x03647590 BL 0x1C16F28
	0x03647594 STP X30, X21, [X31 - 0x20]!
	0x03647598 STP X20, X19, [X31 + 0x10]
	0x0364759C ADRP X21, 0xD99000
	0x036475A0 ADRP X20, 0xAF5000
	0x036475A4 LDRB W8, [X21 + 0x5B6]
	0x036475A8 LDR X20, [X20 + 0x2E8]
	0x036475AC MOV X19, X0
	0x036475B0 TBNZ X8, 0x0, 0x36475C8
	0x036475B4 ADRP X0, 0xAF5000
	0x036475B8 LDR X0, [X0 + 0x2E8]
	0x036475BC BL 0x1C16CF4
	0x036475C0 MOVZ W8, 0x1
	0x036475C4 STRB W8, [X21 + 0x5B6]
	0x036475C8 LDR X1, [X20]
	0x036475CC MOV X0, X19
	0x036475D0 BL 0x3648634
	0x036475D4 LDR X1, [X20]
	0x036475D8 ADD X0, X19, 0x20
	0x036475DC LDP X20, X19, [X31 + 0x10]
	0x036475E0 LDP X30, X21, [X31], #0x20
	0x036475E4 B 0x3648634
	0x036475E8 STR X30, [X31 - 0x40]!
	0x036475EC STP X24, X23, [X31 + 0x10]
	0x036475F0 STP X22, X21, [X31 + 0x20]
	0x036475F4 STP X20, X19, [X31 + 0x30]
	0x036475F8 ADRP X22, 0xD99000
	0x036475FC LDRB W8, [X22 + 0x5BA]
	0x03647600 MOV W19, W2
	0x03647604 MOV W21, W1
	0x03647608 MOV X20, X0
	0x0364760C TBNZ X8, 0x0, 0x3647624
	0x03647610 ADRP X0, 0xAF5000
	0x03647614 LDR X0, [X0 + 0x2F8]
	0x03647618 BL 0x1C16CF4
	0x0364761C MOVZ W8, 0x1
	0x03647620 STRB W8, [X22 + 0x5BA]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0xD9A000
	011 Move W8, [X23+1452]
	012 Move W22, W4
	013 Move W20, W3
	014 Move X19, X2
	015 Move X24, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0xAAE000
	022 Move X0, [X0+440]
	023 Call 0x1C17CF4
	024 Move X0, 0xAAE000
	025 Move X0, [X0+448]
	026 Call 0x1C17CF4
	027 Move X0, 0xAAE000
	028 Move X0, [X0+456]
	029 Call 0x1C17CF4
	030 Move X0, 0xAD5000
	031 Move X0, [X0+2904]
	032 Call 0x1C17CF4
	033 Move X0, 0xAAE000
	034 Move X0, [X0+464]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X23+1452], W8
	038 Add W31, W20, 2
	039 Move TEMP, X22
	040 And TEMP, TEMP, -2147483648
	041 Compare TEMP, -2147483648
	042 JumpIfEqual {228}
	043 Compare X19, 0
	044 JumpIfEqual {227}
	045 Move W8, [X19+16]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Compare W20, 0
	048 JumpIfEqual {164}
	049 Compare X24, 0
	050 JumpIfEqual {227}
	051 Move X0, X24
	052 Move X1, X19
	053 Move W2, W22
	054 Move X3, X31
	055 Call Regex.Match, X0, X1, X2
	056 Compare X0, 0
	057 JumpIfEqual {227}
	058 Move X1, X31
	059 Move X23, X0
	060 Call Group.get_Success, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {164}
	065 Move W0, 16
	066 Move X1, X31
	067 Call StringBuilderCache.Acquire, X0
	068 Move X22, X0
	069 Move X0, X24
	070 Move X1, X31
	071 Call Regex.get_RightToLeft, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {175}
	076 Move X8, 0xAAE000
	077 Move X8, [X8+464]
	078 Move X0, [X8]
	079 Call 0x1C17F10
	080 Move X8, 0xAAE000
	081 Move X8, [X8+448]
	082 Move X24, X0
	083 Move X1, [X8]
	084 Call List`1<Object>..ctor, X0
	085 Move X26, 0xAAE000
	086 Move W8, [X19+16]
	087 Move X26, [X26+440]
	088 Move W25, [X23+16]
	089 Move W9, [X23+20]
	090 Add W1, W9, W25
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Subtract W8, W8, W25
	093 Subtract W2, W8, W9
	094 Move X0, X19
	095 Move X3, X31
	096 Call String.Substring, X0, X1, X2
	097 Compare X24, 0
	098 JumpIfEqual {227}
	099 Move W10, [X24+28]
	100 Move X8, [X24+16]
	101 Move X9, [X26]
	102 Add W10, W10, 1
	103 Move [X24+28], W10
	104 Compare X8, 0
	105 JumpIfEqual {227}
	106 NotImplemented "Instruction LDRSW not yet implemented."
	107 Move W11, [X8+24]
	108 Move X1, X0
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Add W9, W10, 1
	111 Add X8, X8, X10
	112 Move [X24+24], W9
	113 Move [X8+32], X1
	114 Move X8, [X9+32]
	115 Move X0, X24
	116 Move X8, [X8+192]
	117 Move X2, [X8+112]
	118 Call List`1<Object>.AddWithResize, X0, X1
	119 Move W25, [X23+16]
	120 Move X0, X21
	121 Move X1, X24
	122 Move X2, X23
	123 Call RegexReplacement.ReplacementImplRTL, X0, X1, X2
	124 Subtract W20, W20, 1
	125 Move X0, X23
	126 Move X1, X31
	127 Call Match.NextMatch, X0
	128 Compare X0, 0
	129 JumpIfEqual {227}
	130 Move X1, X31
	131 Move X23, X0
	132 Call Group.get_Success, X0
	133 Move W8, W25
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfEqual {88}
	138 NotImplemented "Instruction CMP not yet implemented."
	139 Compare X22, 0
	140 JumpIfEqual {227}
	141 Move X0, X22
	142 Move X1, X19
	143 Move W2, W31
	144 Move W3, W25
	145 Move X4, X31
	146 Call StringBuilder.Append, X0, X1, X2, X3
	147 Compare X24, 0
	148 JumpIfEqual {227}
	149 Move W8, [X24+24]
	150 Subtract W19, W8, 1
	151 Move X20, 0xAD5000
	152 Move X20, [X20+2904]
	153 Move X2, [X20]
	154 Move X0, X24
	155 Move W1, W19
	156 Call List`1<Object>.get_Item, X0, X1
	157 Compare X22, 0
	158 JumpIfEqual {227}
	159 Move X1, X0
	160 Move X0, X22
	161 Move X2, X31
	162 Call StringBuilder.Append, X0, X1
	163 Subtract W19, W19, 1
	164 Move X0, X19
	165 Move X20, [X31+64]
	166 Move X19, [X31+72]
	167 Move X22, [X31+48]
	168 Move X21, [X31+56]
	169 Move X24, [X31+32]
	170 Move X23, [X31+40]
	171 Move X26, [X31+16]
	172 Move X25, [X31+24]
	173 Move X30, [X31+80]
	174 Return X0
	175 Move W24, W31
	176 Move W8, [X23+16]
	177 Subtract W3, W8, W24
	178 Compare X22, 0
	179 JumpIfEqual {227}
	180 Move X0, X22
	181 Move X1, X19
	182 Move W2, W24
	183 Move X4, X31
	184 Call StringBuilder.Append, X0, X1, X2, X3
	185 Move W24, [X23+16]
	186 Move W8, [X23+20]
	187 Move X0, X21
	188 Move X1, X22
	189 Move X2, X23
	190 Add W24, W8, W24
	191 Call RegexReplacement.ReplacementImpl, X0, X1, X2
	192 Subtract W20, W20, 1
	193 Move X0, X23
	194 Move X1, X31
	195 Call Match.NextMatch, X0
	196 Compare X0, 0
	197 JumpIfEqual {227}
	198 Move X1, X31
	199 Move X23, X0
	200 Call Group.get_Success, X0
	201 Move TEMP, X0
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfEqual {176}
	205 Move W8, [X19+16]
	206 Subtract W3, W8, W24
	207 Compare X22, 0
	208 JumpIfEqual {227}
	209 Move X0, X22
	210 Move X1, X19
	211 Move W2, W24
	212 Move X4, X31
	213 Call StringBuilder.Append, X0, X1, X2, X3
	214 Move X0, X22
	215 Move X20, [X31+64]
	216 Move X19, [X31+72]
	217 Move X22, [X31+48]
	218 Move X21, [X31+56]
	219 Move X24, [X31+32]
	220 Move X23, [X31+40]
	221 Move X26, [X31+16]
	222 Move X25, [X31+24]
	223 Move X1, X31
	224 Move X30, [X31+80]
	225 Call StringBuilderCache.GetStringAndRelease, X0
	226 Return X0
	227 Call 0x1C17F20
	228 Move X0, 0xAB5000
	229 Move X0, [X0+1888]
	230 Call 0x1C17D08
	231 Call 0x1C17F10
	232 Move X19, X0
	233 Move X0, 0xAF5000
	234 Move X0, [X0+1968]
	235 Call 0x1C17D08
	236 Move X20, X0
	237 Move X0, 0xAF5000
	238 Move X0, [X0+1976]
	239 Move X0, 0xAB5000
	240 Move X0, [X0+1888]
	241 Call 0x1C17D08
	242 Call 0x1C17F10
	243 Move X19, X0
	244 Move X0, 0xAD5000
	245 Move X0, [X0+1608]
	246 Call 0x1C17D08
	247 Move X20, X0
	248 Move X0, 0xAF6000
	249 Move X0, [X0+1496]
	250 Call 0x1C17D08
	251 Move X2, X0
	252 Move X0, X19
	253 Move X1, X20
	254 Move X3, X31
	255 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	256 Move X0, 0xAF6000
	257 Move X0, [X0+1504]
	258 Call 0x1C17D08
	259 Move X1, X0
	260 Move X0, X19
	261 Call 0x1C17DEC

