Type: System.Net.Cookie

Method: System.Void .ctor()

Disassembly:
	0x03689EFC SUB W11, W11, 0x41
	0x03689F00 CMP W9, 0xA
	0x03689F04 AND W9, W11, 0xFFFF
	0x03689F08 CSET W11, CC
	0x03689F0C CMP W10, 0x2
	0x03689F10 AND W8, W0, 0xFFFF
	0x03689F14 CSET W10, CC
	0x03689F18 CMP W9, 0x1A
	0x03689F1C ORR W9, W11, W10, 0x0
	0x03689F20 CSET W10, CC
	0x03689F24 CMP W8, 0x5F
	0x03689F28 ORR W8, W10, W9, 0x0
	0x03689F2C CSET W9, EQ
	0x03689F30 ORR W0, W9, W8, 0x0
	0x03689F34 CMP W0, 0x1
	0x03689F38 B.NE 0x3689F5C
	0x03689F3C LDR W8, [X19 + 0x10]
	0x03689F40 ADD W20, W20, 0x1
	0x03689F44 CMP W20, W8
	0x03689F48 B.LT 0x3689ED8
	0x03689F4C B 0x3689F5C
	0x03689F50 MOV W0, W31
	0x03689F54 B 0x3689F5C
	0x03689F58 MOVZ W0, 0x1
	0x03689F5C LDP X20, X19, [X31 + 0x10]
	0x03689F60 LDR X30, [X31], #0x20
	0x03689F64 RET
	0x03689F68 STR X30, [X31 - 0x20]!
	0x03689F6C STP X20, X19, [X31 + 0x10]
	0x03689F70 ADRP X20, 0xD57000
	0x03689F74 LDRB W8, [X20 + 0x840]
	0x03689F78 MOV X19, X0
	0x03689F7C TBNZ X8, 0x0, 0x3689F94
	0x03689F80 ADRP X0, 0xA6C000
	0x03689F84 LDR X0, [X0 + 0x278]
	0x03689F88 BL 0x1C16CF4
	0x03689F8C MOVZ W8, 0x1
	0x03689F90 STRB W8, [X20 + 0x840]
	0x03689F94 CBZ X19, 0x368A028
	0x03689F98 LDR W8, [X19 + 0x10]
	0x03689F9C CMP W8, 0x2
	0x03689FA0 B.LT 0x368A000
	0x03689FA4 MOV X0, X19
	0x03689FA8 MOV W1, W31
	0x03689FAC MOV X2, X31
	0x03689FB0 BL 0x3222A1C
	0x03689FB4 AND W8, W0, 0xFFFF
	0x03689FB8 CMP W8, 0x22
	0x03689FBC B.NE 0x368A000
	0x03689FC0 LDR W8, [X19 + 0x10]
	0x03689FC4 MOV X0, X19
	0x03689FC8 MOV X2, X31
	0x03689FCC SUB W1, W8, 0x1
	0x03689FD0 BL 0x3222A1C
	0x03689FD4 AND W8, W0, 0xFFFF
	0x03689FD8 CMP W8, 0x22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD58000
	007 Move X20, 0xA6D000
	008 Move X22, 0xA6C000
	009 Move W8, [X21+2087]
	010 Move X20, [X20+632]
	011 Move X22, [X22+2544]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xA6C000
	018 Move X0, [X0+2544]
	019 Call 0x1C17CF4
	020 Move X0, 0xA6D000
	021 Move X0, [X0+632]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2087], W8
	025 Move X8, [X20]
	026 Move W21, 1
	027 Move X9, [X8+184]
	028 Move X9, [X9]
	029 Move [X19+32], W21
	030 Move [X19+48], W21
	031 Move [X19+16], X9
	032 Move [X19+40], X9
	033 Move X0, [X22]
	034 Move W9, [X0+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {40}
	037 Call 0x1C17DFC
	038 Move X0, [X22]
	039 Move X8, [X20]
	040 Move X9, [X0+184]
	041 Move X0, X31
	042 Move X9, [X9+16]
	043 Move [X19+56], X9
	044 Move X8, [X8+184]
	045 Move X8, [X8]
	046 Move [X19+80], W21
	047 Move [X19+96], W21
	048 Move [X19+64], X8
	049 Move [X19+72], X8
	050 Move [X19+88], X8
	051 Call DateTime.get_Now
	052 Move [X19+120], X0
	053 Move X8, [X20]
	054 Move X0, X19
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X1, X31
	058 Move X8, [X8+184]
	059 Move X8, [X8]
	060 Move [X19+128], X8
	061 Move [X19+144], X8
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X30, [X31+48]
	065 Call Object..ctor, X0
	066 Return 

Method: System.String get_Comment()

Disassembly:
	0x03689FDC B.NE 0x368A000
	0x03689FE0 LDR W8, [X19 + 0x10]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Comment(System.String value)

Disassembly:
	0x03689FE4 SUBS W2, W8, 0x2
	0x03689FE8 B.NE 0x368A010
	0x03689FEC ADRP X8, 0xA6C000
	0x03689FF0 LDR X8, [X8 + 0x278]
	0x03689FF4 LDR X8, [X8]
	0x03689FF8 LDR X8, [X8 + 0xB8]
	0x03689FFC LDR X19, [X8]
	0x0368A000 MOV X0, X19
	0x0368A004 LDP X20, X19, [X31 + 0x10]
	0x0368A008 LDR X30, [X31], #0x20
	0x0368A00C RET
	0x0368A010 MOV X0, X19
	0x0368A014 LDP X20, X19, [X31 + 0x10]
	0x0368A018 MOVZ W1, 0x1
	0x0368A01C MOV X3, X31
	0x0368A020 LDR X30, [X31], #0x20
	0x0368A024 B 0x3228DE4
	0x0368A028 BL 0x1C16F20
	0x0368A02C STR X30, [X31 - 0x50]!
	0x0368A030 STP X26, X25, [X31 + 0x10]
	0x0368A034 STP X24, X23, [X31 + 0x20]
	0x0368A038 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD58000
	006 Move W8, [X21+2088]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA6C000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2088], W8
	018 Compare X20, 0
	019 JumpIfNotEqual {25}
	020 Move X8, 0xA6C000
	021 Move X8, [X8+632]
	022 Move X8, [X8]
	023 Move X8, [X8+184]
	024 Move X20, [X8]
	025 Move [X19+16], X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 

Method: System.Void set_CommentUri(System.Uri value)

Disassembly:
	0x0368A03C STP X20, X19, [X31 + 0x40]
	0x0368A040 ADRP X21, 0xD56000

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Void set_HttpOnly(System.Boolean value)

Disassembly:
	0x0368A044 LDRB W8, [X21 + 0x830]
	0x0368A048 MOV X19, X1
	0x0368A04C MOV X20, X0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+113], W8
	003 Return 

Method: System.Void set_Discard(System.Boolean value)

Disassembly:
	0x0368A050 TBNZ X8, 0x0, 0x368A0A4
	0x0368A054 ADRP X0, 0xAB4000
	0x0368A058 LDR X0, [X0 + 0x2A0]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+36], W8
	003 Return 

Method: System.String get_Domain()

Disassembly:
	0x0368A05C BL 0x1C16CF4
	0x0368A060 ADRP X0, 0xA6A000

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_Domain(System.String value)

Disassembly:
	0x0368A064 LDR X0, [X0 + 0xE10]
	0x0368A068 BL 0x1C16CF4
	0x0368A06C ADRP X0, 0xA6A000
	0x0368A070 LDR X0, [X0 + 0xE18]
	0x0368A074 BL 0x1C16CF4
	0x0368A078 ADRP X0, 0xA6D000
	0x0368A07C LDR X0, [X0 + 0xB70]
	0x0368A080 BL 0x1C16CF4
	0x0368A084 ADRP X0, 0xA6A000
	0x0368A088 LDR X0, [X0 + 0xE30]
	0x0368A08C BL 0x1C16CF4
	0x0368A090 ADRP X0, 0xA6B000
	0x0368A094 LDR X0, [X0 + 0x278]
	0x0368A098 BL 0x1C16CF4
	0x0368A09C MOVZ W8, 0x1
	0x0368A0A0 STRB W8, [X21 + 0x830]
	0x0368A0A4 ADRP X23, 0xA6B000
	0x0368A0A8 LDR X23, [X23 + 0x278]
	0x0368A0AC STR W31, [X31 + 0xC]
	0x0368A0B0 STRB W31, [X20 + 0x60]
	0x0368A0B4 CBZ X19, 0x368A264
	0x0368A0B8 LDR W8, [X19 + 0x10]
	0x0368A0BC CBZ W8, 0x368A264
	0x0368A0C0 MOV X0, X19
	0x0368A0C4 MOV W1, W31
	0x0368A0C8 MOV X2, X31
	0x0368A0CC BL 0x3222A1C
	0x0368A0D0 AND W8, W0, 0xFFFF
	0x0368A0D4 CMP W8, 0x22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD57000
	006 Move W8, [X21+2089]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA6C000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2089], W8
	018 Move X8, 0xA6C000
	019 Move X8, [X8+632]
	020 Compare X20, 0
	021 JumpIfNotEqual {25}
	022 Move X9, [X8]
	023 Move X9, [X9+184]
	024 Move X20, [X9]
	025 Compare X19, 0
	026 JumpIfEqual {38}
	027 Move [X19+40], X20
	028 Move [X19+48], W31
	029 Move X8, [X8]
	030 Move X8, [X8+184]
	031 Move X8, [X8]
	032 Move [X19+144], X8
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Call 0x1C17F20

Method: System.String get__Domain()

Disassembly:
	0x0368A0D8 B.NE 0x368A290
	0x0368A0DC LDR W8, [X19 + 0x10]
	0x0368A0E0 MOV X0, X19
	0x0368A0E4 MOV X2, X31
	0x0368A0E8 SUB W1, W8, 0x1
	0x0368A0EC BL 0x3222A1C
	0x0368A0F0 AND W8, W0, 0xFFFF
	0x0368A0F4 CMP W8, 0x22
	0x0368A0F8 B.NE 0x368A290
	0x0368A0FC ADRP X21, 0xAB4000
	0x0368A100 LDR X21, [X21 + 0x2A0]
	0x0368A104 LDR X0, [X21]
	0x0368A108 LDR W8, [X0 + 0xE0]
	0x0368A10C CBNZ W8, 0x368A118
	0x0368A110 BL 0x1C16DFC
	0x0368A114 LDR X0, [X21]
	0x0368A118 LDR X8, [X0 + 0xB8]
	0x0368A11C MOV X0, X19
	0x0368A120 MOV X2, X31
	0x0368A124 LDR X1, [X8]
	0x0368A128 BL 0x3229E68
	0x0368A12C ADRP X8, 0xA6A000
	0x0368A130 LDR X8, [X8 + 0xE30]
	0x0368A134 MOV X22, X0
	0x0368A138 LDR X8, [X8]
	0x0368A13C MOV X0, X8
	0x0368A140 BL 0x1C16F10
	0x0368A144 ADRP X8, 0xA6D000
	0x0368A148 LDR X8, [X8 + 0xB70]
	0x0368A14C MOV X21, X0
	0x0368A150 LDR X1, [X8]
	0x0368A154 BL 0x2FDBF14
	0x0368A158 CBZ X22, 0x368A358
	0x0368A15C LDR X8, [X22 + 0x18]
	0x0368A160 CMP W8, 0x1
	0x0368A164 B.LT 0x368A230
	0x0368A168 ADRP X26, 0xA6A000
	0x0368A16C LDR X26, [X26 + 0xE10]
	0x0368A170 MOV X24, X31
	0x0368A174 AND X8, X8, 0x0
	0x0368A178 ADD X25, X22, 0x20
	0x0368A17C CMP X24, W8, UXTW
	0x0368A180 B.CS 0x368A28C
	0x0368A184 LDR X8, [X23]
	0x0368A188 LDR X0, [X25, X24, LSL #3]
	0x0368A18C MOV X2, X31
	0x0368A190 LDR X8, [X8 + 0xB8]
	0x0368A194 LDR X1, [X8]
	0x0368A198 BL 0x3226EF8
	0x0368A19C TBZ X0, 0x0, 0x368A220
	0x0368A1A0 LDR W8, [X22 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD57000
	005 Move W8, [X20+2090]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0xA6C000
	012 Move X0, [X0+632]
	013 Call 0x1C17CF4
	014 Move X0, 0xAB5000
	015 Move X0, [X0+664]
	016 Call 0x1C17CF4
	017 Move X0, 0xA75000
	018 Move X0, [X0+3288]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2090], W8
	022 Move W8, [X19+32]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, 0xA6C000
	025 Move X8, [X8+632]
	026 Move W9, [X19+48]
	027 Compare W9, 0
	028 JumpIfEqual {36}
	029 Move X8, [X8]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X8, [X8+184]
	033 Move X0, [X8]
	034 Move X30, [X31+32]
	035 Return X0
	036 Move X2, [X19+40]
	037 Compare X2, 0
	038 JumpIfEqual {60}
	039 Move W9, [X2+16]
	040 Compare W9, 0
	041 JumpIfEqual {29}
	042 Move X10, 0xAB5000
	043 Move W9, [X19+153]
	044 Move X10, [X10+664]
	045 Move X0, [X10]
	046 Compare W9, 0
	047 JumpIfEqual {50}
	048 Move X8, 0xA75000
	049 Move X8, [X8+3288]
	050 Move X8, [X8]
	051 Move X8, [X8+184]
	052 Move X1, [X8]
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X4, X31
	056 Move X3, X1
	057 Move X30, [X31+32]
	058 Call String.Concat, X0, X1, X2, X3
	059 Return X0
	060 Call 0x1C17F20

Method: System.Boolean get_Expired()

Disassembly:
	0x0368A1B4 MOV X2, X31
	0x0368A1B8 BL 0x337BDF4
	0x0368A1BC TBZ X0, 0x0, 0x368A290
	0x0368A1C0 LDR W1, [X31 + 0xC]
	0x0368A1C4 CMP W1, 0x10000
	0x0368A1C8 B.CS 0x368A290
	0x0368A1CC CBZ X21, 0x368A358
	0x0368A1D0 LDR W10, [X21 + 0x1C]
	0x0368A1D4 LDR X8, [X21 + 0x10]
	0x0368A1D8 LDR X9, [X26]
	0x0368A1DC ADD W10, W10, 0x1
	0x0368A1E0 STR W10, [X21 + 0x1C]
	0x0368A1E4 CBZ X8, 0x368A358
	0x0368A1E8 LDRSW X10, [X21 + 0x18]
	0x0368A1EC LDR W11, [X8 + 0x18]
	0x0368A1F0 CMP W10, W11
	0x0368A1F4 B.CS 0x368A20C
	0x0368A1F8 ADD W9, W10, 0x1
	0x0368A1FC ADD X8, X8, X10, 0x2, LSL
	0x0368A200 STR W9, [X21 + 0x18]
	0x0368A204 STR W1, [X8 + 0x20]
	0x0368A208 B 0x368A220
	0x0368A20C LDR X8, [X9 + 0x20]
	0x0368A210 MOV X0, X21
	0x0368A214 LDR X8, [X8 + 0xC0]
	0x0368A218 LDR X2, [X8 + 0x70]
	0x0368A21C BL 0x2FDC70C
	0x0368A220 LDR W8, [X22 + 0x18]
	0x0368A224 ADD X24, X24, 0x1
	0x0368A228 CMP X24, W8, SXTW
	0x0368A22C B.LT 0x368A17C
	0x0368A230 CBZ X21, 0x368A358
	0x0368A234 ADRP X8, 0xA6A000
	0x0368A238 LDR X8, [X8 + 0xE18]
	0x0368A23C MOV X0, X21
	0x0368A240 LDR X1, [X8]
	0x0368A244 BL 0x2FDE4C8
	0x0368A248 MOVZ W8, 0x1
	0x0368A24C MOVZ W9, 0x3
	0x0368A250 STR X0, [X20 + 0x68]
	0x0368A254 STR X19, [X20 + 0x58]
	0x0368A258 STR W8, [X20 + 0x88]
	0x0368A25C STR W9, [X20 + 0x20]
	0x0368A260 B 0x368A274
	0x0368A264 LDR X8, [X23]
	0x0368A268 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD57000
	006 Move X21, 0xA6B000
	007 Move W8, [X20+2091]
	008 Move X21, [X21+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA6B000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2091], W8
	019 Move X0, [X21]
	020 Move X20, [X19+56]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move X0, X20
	028 Move X2, X31
	029 Move X1, [X8+16]
	030 Call DateTime.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {56}
	035 Move X0, [X21]
	036 Add X19, X19, 56
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Move X1, X31
	043 Call DateTime.ToLocalTime, X0
	044 Move X19, X0
	045 Move X0, X31
	046 Call DateTime.get_Now
	047 Move X1, X0
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X2, X31
	052 Move X30, [X31+32]
	053 Move X21, [X31+40]
	054 Call DateTime.op_LessThanOrEqual, X0, X1
	055 Return X0
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move W0, W31
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0

Method: System.Void set_Expires(System.DateTime value)

Disassembly:
	0x0368A26C LDR X8, [X8]
	0x0368A270 STR X8, [X20 + 0x58]

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.String get_Name()

Disassembly:
	0x0368A274 LDP X20, X19, [X31 + 0x40]
	0x0368A278 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Boolean InternalSetName(System.String value)

Disassembly:
	0x0368A27C LDP X24, X23, [X31 + 0x20]
	0x0368A280 LDP X26, X25, [X31 + 0x10]
	0x0368A284 LDR X30, [X31], #0x50
	0x0368A288 RET
	0x0368A28C BL 0x1C16F28
	0x0368A290 ADRP X0, 0xA69000
	0x0368A294 LDR X0, [X0 + 0x9D0]
	0x0368A298 BL 0x1C16D08
	0x0368A29C MOVZ W1, 0x2
	0x0368A2A0 BL 0x1C16D6C
	0x0368A2A4 MOV X20, X0
	0x0368A2A8 BL 0x19903C0
	0x0368A2AC ADRP X21, 0xAB4000
	0x0368A2B0 LDR X21, [X21 + 0x2D0]
	0x0368A2B4 MOV X0, X21
	0x0368A2B8 BL 0x1C16D08
	0x0368A2BC MOV X1, X0
	0x0368A2C0 MOV X0, X20
	0x0368A2C4 BL 0x19980B4
	0x0368A2C8 MOV X0, X21
	0x0368A2CC BL 0x1C16D08
	0x0368A2D0 MOV X2, X0
	0x0368A2D4 MOV X0, X20
	0x0368A2D8 MOV X1, X31
	0x0368A2DC BL 0x1993444
	0x0368A2E0 MOV X0, X20
	0x0368A2E4 BL 0x19903C0
	0x0368A2E8 MOV X0, X20
	0x0368A2EC MOV X1, X19
	0x0368A2F0 BL 0x19980B4
	0x0368A2F4 MOVZ W1, 0x1
	0x0368A2F8 MOV X0, X20
	0x0368A2FC MOV X2, X19
	0x0368A300 BL 0x1993444
	0x0368A304 ADRP X0, 0xAB4000
	0x0368A308 LDR X0, [X0 + 0x2B0]
	0x0368A30C BL 0x1C16D08
	0x0368A310 MOV X1, X20
	0x0368A314 MOV X2, X31
	0x0368A318 BL 0x320A16C
	0x0368A31C MOV X19, X0
	0x0368A320 ADRP X0, 0xAB4000
	0x0368A324 LDR X0, [X0 + 0x2D8]
	0x0368A328 BL 0x1C16D08
	0x0368A32C BL 0x1C16F10
	0x0368A330 MOV X1, X19
	0x0368A334 MOV X2, X31
	0x0368A338 MOV X20, X0
	0x0368A33C BL 0x369143C
	0x0368A340 ADRP X0, 0xAB4000
	0x0368A344 LDR X0, [X0 + 0x2E8]
	0x0368A348 BL 0x1C16D08
	0x0368A34C MOV X1, X0
	0x0368A350 MOV X0, X20
	0x0368A354 BL 0x1C16DEC
	0x0368A358 BL 0x1C16F20
	0x0368A35C LDR X0, [X0 + 0x68]
	0x0368A360 RET
	0x0368A364 STR X30, [X31 - 0x20]!
	0x0368A368 STP X20, X19, [X31 + 0x10]
	0x0368A36C ADRP X20, 0xD56000
	0x0368A370 LDRB W8, [X20 + 0x831]
	0x0368A374 MOV X19, X0
	0x0368A378 TBNZ X8, 0x0, 0x368A3A8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD57000
	007 Move X22, 0xAB4000
	008 Move W8, [X21+2092]
	009 Move X22, [X22+3624]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xAB5000
	017 Move X0, [X0+672]
	018 Call 0x1C17CF4
	019 Move X0, 0xA6C000
	020 Move X0, [X0+632]
	021 Call 0x1C17CF4
	022 Move X0, 0xAB4000
	023 Move X0, [X0+3624]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2092], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfEqual {33}
	031 Compare X20, 0
	032 JumpIfNotEqual {36}
	033 Call 0x1C17DFC
	034 Compare X20, 0
	035 JumpIfEqual {59}
	036 Move W8, [X20+16]
	037 Compare W8, 0
	038 JumpIfEqual {59}
	039 Move X0, X20
	040 Move W1, W31
	041 Move X2, X31
	042 Call String.get_Chars, X0, X1
	043 And W8, W0, 0xFFFF
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X21, 0xAB5000
	046 Move X21, [X21+672]
	047 Move X0, [X21]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X21]
	053 Move X8, [X0+184]
	054 Move X0, X20
	055 Move X2, X31
	056 Move X1, [X8+8]
	057 Call String.IndexOfAny, X0, X1
	058 Add W31, W0, 1
	059 Move X8, 0xA6C000
	060 Move X8, [X8+632]
	061 Move W0, W31
	062 Move X8, [X8]
	063 Move X8, [X8+184]
	064 Move X20, [X8]
	065 Move [X19+64], X20
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return X0
	072 Move W0, 1

Method: System.String get_Path()

Disassembly:
	0x0368A37C ADRP X0, 0xA6B000
	0x0368A380 LDR X0, [X0 + 0x278]

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_Path(System.String value)

Disassembly:
	0x0368A384 BL 0x1C16CF4
	0x0368A388 ADRP X0, 0xA96000
	0x0368A38C LDR X0, [X0 + 0xFB8]
	0x0368A390 BL 0x1C16CF4
	0x0368A394 ADRP X0, 0xAB4000
	0x0368A398 LDR X0, [X0 + 0x2F0]
	0x0368A39C BL 0x1C16CF4
	0x0368A3A0 MOVZ W8, 0x1
	0x0368A3A4 STRB W8, [X20 + 0x831]
	0x0368A3A8 ADRP X8, 0xA6B000
	0x0368A3AC LDRB W9, [X19 + 0x60]
	0x0368A3B0 LDR X8, [X8 + 0x278]
	0x0368A3B4 CBZ W9, 0x368A3D0
	0x0368A3B8 LDR X8, [X8]
	0x0368A3BC LDP X20, X19, [X31 + 0x10]
	0x0368A3C0 LDR X8, [X8 + 0xB8]
	0x0368A3C4 LDR X0, [X8]
	0x0368A3C8 LDR X30, [X31], #0x20
	0x0368A3CC RET
	0x0368A3D0 LDR X1, [X19 + 0x58]
	0x0368A3D4 CBZ X1, 0x368A428
	0x0368A3D8 ADRP X10, 0xAB4000
	0x0368A3DC LDR W9, [X1 + 0x10]
	0x0368A3E0 LDR X10, [X10 + 0x2F0]
	0x0368A3E4 LDR X19, [X10]
	0x0368A3E8 CBZ W9, 0x368A408
	0x0368A3EC ADRP X8, 0xA96000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD57000
	006 Move W8, [X21+2093]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {24}
	013 Compare X20, 0
	014 JumpIfEqual {31}
	015 Compare X19, 0
	016 JumpIfEqual {38}
	017 Move [X19+72], X20
	018 Move [X19+80], W31
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 Return 
	024 Move X0, 0xA6C000
	025 Move X0, [X0+632]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2093], W8
	029 Compare X20, 0
	030 JumpIfNotEqual {15}
	031 Move X8, 0xA6C000
	032 Move X8, [X8+632]
	033 Move X8, [X8]
	034 Move X8, [X8+184]
	035 Move X20, [X8]
	036 Compare X19, 0
	037 JumpIfNotEqual {17}
	038 Call 0x1C17F20

Method: System.String get__Path()

Disassembly:
	0x0368A3F0 LDR X8, [X8 + 0xFB8]
	0x0368A3F4 MOV X2, X31
	0x0368A3F8 LDR X0, [X8]
	0x0368A3FC BL 0x321B938
	0x0368A400 MOV X1, X0
	0x0368A404 B 0x368A414
	0x0368A408 LDR X8, [X8]
	0x0368A40C LDR X8, [X8 + 0xB8]
	0x0368A410 LDR X1, [X8]
	0x0368A414 MOV X0, X19
	0x0368A418 LDP X20, X19, [X31 + 0x10]
	0x0368A41C MOV X2, X31
	0x0368A420 LDR X30, [X31], #0x20
	0x0368A424 B 0x321B938
	0x0368A428 BL 0x1C16F20
	0x0368A42C LDRB W0, [X0 + 0x70]
	0x0368A430 RET
	0x0368A434 AND W8, W1, 0x1
	0x0368A438 STRB W8, [X0 + 0x70]
	0x0368A43C RET
	0x0368A440 LDR X0, [X0 + 0x80]
	0x0368A444 RET
	0x0368A448 STP X30, X21, [X31 - 0x20]!
	0x0368A44C STP X20, X19, [X31 + 0x10]
	0x0368A450 ADRP X21, 0xD56000
	0x0368A454 LDRB W8, [X21 + 0x832]
	0x0368A458 MOV X20, X1
	0x0368A45C MOV X19, X0
	0x0368A460 TBZ X8, 0x0, 0x368A47C
	0x0368A464 CBZ X20, 0x368A494
	0x0368A468 CBZ X19, 0x368A4AC
	0x0368A46C STR X20, [X19 + 0x80]
	0x0368A470 LDP X20, X19, [X31 + 0x10]
	0x0368A474 LDP X30, X21, [X31], #0x20
	0x0368A478 RET
	0x0368A47C ADRP X0, 0xA6B000
	0x0368A480 LDR X0, [X0 + 0x278]
	0x0368A484 BL 0x1C16CF4
	0x0368A488 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD57000
	005 Move W8, [X20+2094]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0xA6C000
	012 Move X0, [X0+632]
	013 Call 0x1C17CF4
	014 Move X0, 0xAB5000
	015 Move X0, [X0+680]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2094], W8
	019 Move W8, [X19+32]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W8, [X19+80]
	022 Compare W8, 0
	023 JumpIfEqual {33}
	024 Move X8, 0xA6C000
	025 Move X8, [X8+632]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X8, [X8]
	029 Move X8, [X8+184]
	030 Move X0, [X8]
	031 Move X30, [X31+32]
	032 Return X0
	033 Move X1, [X19+72]
	034 Compare X1, 0
	035 JumpIfEqual {48}
	036 Move W8, [X1+16]
	037 Compare W8, 0
	038 JumpIfEqual {24}
	039 Move X8, 0xAB5000
	040 Move X8, [X8+680]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X2, X31
	044 Move X0, [X8]
	045 Move X30, [X31+32]
	046 Call String.Concat, X0, X1
	047 Return X0
	048 Call 0x1C17F20

Method: System.Boolean get_Plain()

Disassembly:
	0x0368A1A4 CMP X24, X8
	0x0368A1A8 B.CS 0x368A28C
	0x0368A1AC LDR X0, [X25, X24, LSL #3]
	0x0368A1B0 ADD X1, X31, 0xC

ISIL:
	001 Move W8, [X0+32]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean IsDomainEqualToHost(System.String domain, System.String host)

Disassembly:
	0x0368A48C STRB W8, [X21 + 0x832]
	0x0368A490 CBNZ X20, 0x368A468
	0x0368A494 ADRP X8, 0xA6B000
	0x0368A498 LDR X8, [X8 + 0x278]
	0x0368A49C LDR X8, [X8]
	0x0368A4A0 LDR X8, [X8 + 0xB8]
	0x0368A4A4 LDR X20, [X8]
	0x0368A4A8 CBNZ X19, 0x368A46C
	0x0368A4AC BL 0x1C16F20
	0x0368A4B0 LDR W0, [X0 + 0x20]
	0x0368A4B4 RET
	0x0368A4B8 LDRB W8, [X0 + 0x30]
	0x0368A4BC MOVZ W9, 0x28
	0x0368A4C0 CMP W8, 0x0
	0x0368A4C4 MOVZ W8, 0x90
	0x0368A4C8 CSEL X8, X8, X9, EQ
	0x0368A4CC LDR X0, [X0, X8, LSL]
	0x0368A4D0 RET
	0x0368A4D4 LDR W0, [X0 + 0x88]
	0x0368A4D8 RET
	0x0368A4DC STP X30, X19, [X31 - 0x10]!
	0x0368A4E0 TBNZ X1, 0x1F, 0x368A508

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {26}
	005 Move X2, X0
	006 Compare X0, 0
	007 JumpIfEqual {26}
	008 Move W4, [X1+16]
	009 Move W8, [X2+16]
	010 Add W9, W4, 1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W3, 1
	013 Move W5, 5
	014 Move X0, X1
	015 Move W1, W31
	016 Move X6, X31
	017 Move W19, 1
	018 Call String.Compare, X0, X1, X2, X3, X4, X5
	019 Compare W0, 0
	020 JumpIfEqual {22}
	021 Move W19, W31
	022 Move W0, W19
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return X0
	026 Call 0x1C17F20

Method: System.Boolean VerifySetDefaults(System.Net.CookieVariant variant, System.Uri uri, System.Boolean isLocalDomain, System.String localDomain, System.Boolean set_default, System.Boolean isThrow)

Disassembly:
	0x0368A4E4 STR W1, [X0 + 0x88]
	0x0368A4E8 CBZ W1, 0x368A500
	0x0368A4EC LDR W8, [X0 + 0x20]
	0x0368A4F0 CMP W8, 0x1
	0x0368A4F4 B.GT 0x368A500
	0x0368A4F8 MOVZ W8, 0x2
	0x0368A4FC STR W8, [X0 + 0x20]
	0x0368A500 LDP X30, X19, [X31], #0x10
	0x0368A504 RET
	0x0368A508 ADRP X0, 0xA71000
	0x0368A50C LDR X0, [X0 + 0x760]
	0x0368A510 BL 0x1C16D08
	0x0368A514 BL 0x1C16F10
	0x0368A518 MOV X19, X0
	0x0368A51C ADRP X0, 0xA73000
	0x0368A520 LDR X0, [X0 + 0xEC8]
	0x0368A524 BL 0x1C16D08
	0x0368A528 MOV X1, X0
	0x0368A52C MOV X0, X19
	0x0368A530 MOV X2, X31
	0x0368A534 BL 0x3316014
	0x0368A538 ADRP X0, 0xAB4000
	0x0368A53C LDR X0, [X0 + 0x2F8]
	0x0368A540 BL 0x1C16D08
	0x0368A544 MOV X1, X0
	0x0368A548 MOV X0, X19
	0x0368A54C BL 0x1C16DEC
	0x0368A550 STR X30, [X31 - 0x30]!
	0x0368A554 STP X22, X21, [X31 + 0x10]
	0x0368A558 STP X20, X19, [X31 + 0x20]
	0x0368A55C ADRP X20, 0xD56000
	0x0368A560 LDRB W8, [X20 + 0x833]
	0x0368A564 MOV X19, X0
	0x0368A568 TBNZ X8, 0x0, 0x368A598
	0x0368A56C ADRP X0, 0xA6B000
	0x0368A570 LDR X0, [X0 + 0x278]
	0x0368A574 BL 0x1C16CF4
	0x0368A578 ADRP X0, 0xAB4000
	0x0368A57C LDR X0, [X0 + 0x300]
	0x0368A580 BL 0x1C16CF4
	0x0368A584 ADRP X0, 0xA74000
	0x0368A588 LDR X0, [X0 + 0xCD8]
	0x0368A58C BL 0x1C16CF4
	0x0368A590 MOVZ W8, 0x1
	0x0368A594 STRB W8, [X20 + 0x833]
	0x0368A598 MOV X22, X19
	0x0368A59C LDR W8, [X22 + 0x88]!
	0x0368A5A0 CBZ W8, 0x368A5C4
	0x0368A5A4 ADRP X8, 0xAB4000
	0x0368A5A8 LDR X8, [X8 + 0x300]
	0x0368A5AC LDRB W9, [X19 + 0x98]
	0x0368A5B0 LDR X20, [X8]
	0x0368A5B4 CBZ W9, 0x368A5E8
	0x0368A5B8 ADRP X8, 0xA74000
	0x0368A5BC LDR X8, [X8 + 0xCD8]
	0x0368A5C0 B 0x368A5F8
	0x0368A5C4 ADRP X8, 0xA6B000
	0x0368A5C8 LDR X8, [X8 + 0x278]
	0x0368A5CC LDP X20, X19, [X31 + 0x20]
	0x0368A5D0 LDP X22, X21, [X31 + 0x10]
	0x0368A5D4 LDR X8, [X8]
	0x0368A5D8 LDR X8, [X8 + 0xB8]
	0x0368A5DC LDR X0, [X8]
	0x0368A5E0 LDR X30, [X31], #0x30
	0x0368A5E4 RET
	0x0368A5E8 ADRP X8, 0xA6B000
	0x0368A5EC LDR X8, [X8 + 0x278]
	0x0368A5F0 LDR X8, [X8]
	0x0368A5F4 LDR X8, [X8 + 0xB8]
	0x0368A5F8 LDR X21, [X8]
	0x0368A5FC MOV X0, X31
	0x0368A600 BL 0x333AB78
	0x0368A604 MOV X1, X0
	0x0368A608 MOV X0, X22
	0x0368A60C MOV X2, X31
	0x0368A610 BL 0x337B824
	0x0368A614 LDRB W8, [X19 + 0x98]
	0x0368A618 MOV X2, X0
	0x0368A61C CBZ W8, 0x368A62C
	0x0368A620 ADRP X8, 0xA74000
	0x0368A624 LDR X8, [X8 + 0xCD8]
	0x0368A628 B 0x368A63C
	0x0368A62C ADRP X8, 0xA6B000
	0x0368A630 LDR X8, [X8 + 0x278]
	0x0368A634 LDR X8, [X8]
	0x0368A638 LDR X8, [X8 + 0xB8]
	0x0368A63C LDR X3, [X8]
	0x0368A640 MOV X0, X20
	0x0368A644 MOV X1, X21
	0x0368A648 LDP X20, X19, [X31 + 0x20]
	0x0368A64C LDP X22, X21, [X31 + 0x10]
	0x0368A650 MOV X4, X31
	0x0368A654 LDR X30, [X31], #0x30
	0x0368A658 B 0x32277C4
	0x0368A65C STR X30, [X31 - 0x20]!
	0x0368A660 STP X20, X19, [X31 + 0x10]
	0x0368A664 ADRP X20, 0xD56000
	0x0368A668 ADRP X19, 0xAB4000
	0x0368A66C LDRB W8, [X20 + 0x834]
	0x0368A670 LDR X19, [X19 + 0x2A0]
	0x0368A674 TBNZ X8, 0x0, 0x368A68C
	0x0368A678 ADRP X0, 0xAB4000
	0x0368A67C LDR X0, [X0 + 0x2A0]
	0x0368A680 BL 0x1C16CF4
	0x0368A684 MOVZ W8, 0x1
	0x0368A688 STRB W8, [X20 + 0x834]
	0x0368A68C LDR X0, [X19]
	0x0368A690 LDR W8, [X0 + 0xE0]
	0x0368A694 CBNZ W8, 0x368A6A0
	0x0368A698 BL 0x1C16DFC
	0x0368A69C LDR X0, [X19]
	0x0368A6A0 LDR X8, [X0 + 0xB8]
	0x0368A6A4 LDP X20, X19, [X31 + 0x10]
	0x0368A6A8 LDR X0, [X8 + 0x18]
	0x0368A6AC LDR X30, [X31], #0x20
	0x0368A6B0 RET
	0x0368A6B4 STP X30, X21, [X31 - 0x20]!
	0x0368A6B8 STP X20, X19, [X31 + 0x10]
	0x0368A6BC ADRP X21, 0xD56000
	0x0368A6C0 LDRB W8, [X21 + 0x835]
	0x0368A6C4 MOV X19, X1
	0x0368A6C8 MOV X20, X0
	0x0368A6CC TBNZ X8, 0x0, 0x368A6E4
	0x0368A6D0 ADRP X0, 0xAB4000
	0x0368A6D4 LDR X0, [X0 + 0x2A0]
	0x0368A6D8 BL 0x1C16CF4
	0x0368A6DC MOVZ W8, 0x1
	0x0368A6E0 STRB W8, [X21 + 0x835]
	0x0368A6E4 CBZ X19, 0x368A760
	0x0368A6E8 ADRP X8, 0xAB4000
	0x0368A6EC LDR X8, [X8 + 0x2A0]
	0x0368A6F0 LDR X9, [X19]
	0x0368A6F4 LDR X8, [X8]
	0x0368A6F8 CMP X9, X8
	0x0368A6FC B.NE 0x368A760
	0x0368A700 LDR X0, [X20 + 0x40]
	0x0368A704 LDR X1, [X19 + 0x40]
	0x0368A708 MOVZ W2, 0x5
	0x0368A70C MOV X3, X31
	0x0368A710 BL 0x322590C
	0x0368A714 CBNZ W0, 0x368A760
	0x0368A718 LDR X0, [X20 + 0x80]
	0x0368A71C LDR X1, [X19 + 0x80]
	0x0368A720 MOVZ W2, 0x4
	0x0368A724 MOV X3, X31
	0x0368A728 BL 0x322590C
	0x0368A72C CBNZ W0, 0x368A760
	0x0368A730 LDR X0, [X20 + 0x48]
	0x0368A734 LDR X1, [X19 + 0x48]
	0x0368A738 MOVZ W2, 0x4
	0x0368A73C MOV X3, X31
	0x0368A740 BL 0x322590C
	0x0368A744 CBNZ W0, 0x368A760
	0x0368A748 LDR X0, [X20 + 0x28]
	0x0368A74C LDR X1, [X19 + 0x28]
	0x0368A750 MOVZ W2, 0x5
	0x0368A754 MOV X3, X31
	0x0368A758 BL 0x322590C
	0x0368A75C CBZ W0, 0x368A770
	0x0368A760 MOV W0, W31
	0x0368A764 LDP X20, X19, [X31 + 0x10]
	0x0368A768 LDP X30, X21, [X31], #0x20
	0x0368A76C RET
	0x0368A770 LDR W8, [X20 + 0x88]
	0x0368A774 LDR W9, [X19 + 0x88]
	0x0368A778 CMP W8, W9
	0x0368A77C CSET W0, EQ
	0x0368A780 B 0x368A764
	0x0368A784 SUB X31, X31, 0x30
	0x0368A788 STP X30, X21, [X31 + 0x10]
	0x0368A78C STP X20, X19, [X31 + 0x20]
	0x0368A790 ADRP X20, 0xD56000
	0x0368A794 ADRP X21, 0xA69000
	0x0368A798 LDRB W8, [X20 + 0x836]
	0x0368A79C LDR X21, [X21 + 0xAC8]
	0x0368A7A0 MOV X19, X0
	0x0368A7A4 TBNZ X8, 0x0, 0x368A7E0
	0x0368A7A8 ADRP X0, 0xA69000
	0x0368A7AC LDR X0, [X0 + 0xAC8]
	0x0368A7B0 BL 0x1C16CF4
	0x0368A7B4 ADRP X0, 0xA96000
	0x0368A7B8 LDR X0, [X0 + 0xFB8]
	0x0368A7BC BL 0x1C16CF4
	0x0368A7C0 ADRP X0, 0xA72000
	0x0368A7C4 LDR X0, [X0 + 0x848]
	0x0368A7C8 BL 0x1C16CF4
	0x0368A7CC ADRP X0, 0xA91000
	0x0368A7D0 LDR X0, [X0 + 0x8B0]
	0x0368A7D4 BL 0x1C16CF4
	0x0368A7D8 MOVZ W8, 0x1
	0x0368A7DC STRB W8, [X20 + 0x836]
	0x0368A7E0 LDR X0, [X21]
	0x0368A7E4 MOVZ W1, 0x9
	0x0368A7E8 BL 0x1C16D6C
	0x0368A7EC CBZ X0, 0x368A8E0
	0x0368A7F0 LDR W8, [X0 + 0x18]
	0x0368A7F4 MOV X20, X0
	0x0368A7F8 CBZ W8, 0x368A8DC
	0x0368A7FC LDR X9, [X19 + 0x40]
	0x0368A800 CMP W8, 0x1
	0x0368A804 STR X9, [X20 + 0x20]
	0x0368A808 B.EQ 0x368A8DC
	0x0368A80C ADRP X9, 0xA96000
	0x0368A810 LDR X9, [X9 + 0xFB8]
	0x0368A814 CMP W8, 0x2
	0x0368A818 LDR X9, [X9]
	0x0368A81C STR X9, [X20 + 0x28]
	0x0368A820 B.LS 0x368A8DC
	0x0368A824 LDR X9, [X19 + 0x80]
	0x0368A828 CMP W8, 0x3
	0x0368A82C STR X9, [X20 + 0x30]
	0x0368A830 B.EQ 0x368A8DC
	0x0368A834 ADRP X9, 0xA72000
	0x0368A838 LDR X9, [X9 + 0x848]
	0x0368A83C CMP W8, 0x4
	0x0368A840 LDR X9, [X9]
	0x0368A844 STR X9, [X20 + 0x38]
	0x0368A848 B.LS 0x368A8DC
	0x0368A84C LDR X9, [X19 + 0x48]
	0x0368A850 CMP W8, 0x5
	0x0368A854 STR X9, [X20 + 0x40]
	0x0368A858 B.EQ 0x368A8DC
	0x0368A85C ADRP X9, 0xA91000
	0x0368A860 LDR X9, [X9 + 0x8B0]
	0x0368A864 CMP W8, 0x6
	0x0368A868 LDR X10, [X9]
	0x0368A86C STR X10, [X20 + 0x48]
	0x0368A870 B.LS 0x368A8DC
	0x0368A874 LDR X10, [X19 + 0x28]
	0x0368A878 CMP W8, 0x7
	0x0368A87C STR X10, [X20 + 0x50]
	0x0368A880 B.EQ 0x368A8DC
	0x0368A884 LDR X8, [X9]
	0x0368A888 ADD X0, X31, 0xC
	0x0368A88C MOV X1, X31
	0x0368A890 STR X8, [X20 + 0x58]
	0x0368A894 LDR W8, [X19 + 0x88]
	0x0368A898 STR W8, [X31 + 0xC]
	0x0368A89C BL 0x337B6E0
	0x0368A8A0 LDR W8, [X20 + 0x18]
	0x0368A8A4 CMP W8, 0x8
	0x0368A8A8 B.LS 0x368A8DC
	0x0368A8AC STR X0, [X20 + 0x60]
	0x0368A8B0 MOV X0, X20
	0x0368A8B4 MOV X1, X31
	0x0368A8B8 BL 0x32278CC
	0x0368A8BC CBZ X0, 0x368A8E0
	0x0368A8C0 LDR X8, [X0]
	0x0368A8C4 LDP X9, X1, [X8 + 0x158]
	0x0368A8C8 BLR X9
	0x0368A8CC LDP X20, X19, [X31 + 0x20]
	0x0368A8D0 LDP X30, X21, [X31 + 0x10]
	0x0368A8D4 ADD X31, X31, 0x30
	0x0368A8D8 RET
	0x0368A8DC BL 0x1C16F28
	0x0368A8E0 BL 0x1C16F20
	0x0368A8E4 STP X30, X25, [X31 - 0x40]!
	0x0368A8E8 STP X24, X23, [X31 + 0x10]
	0x0368A8EC STP X22, X21, [X31 + 0x20]
	0x0368A8F0 STP X20, X19, [X31 + 0x30]
	0x0368A8F4 ADRP X20, 0xD56000
	0x0368A8F8 ADRP X19, 0xA69000
	0x0368A8FC LDRB W8, [X20 + 0x837]
	0x0368A900 LDR X19, [X19 + 0xAC8]
	0x0368A904 MOV X22, X0
	0x0368A908 TBNZ X8, 0x0, 0x368A944
	0x0368A90C ADRP X0, 0xA69000
	0x0368A910 LDR X0, [X0 + 0xAC8]
	0x0368A914 BL 0x1C16CF4
	0x0368A918 ADRP X0, 0xA6B000
	0x0368A91C LDR X0, [X0 + 0x278]
	0x0368A920 BL 0x1C16CF4
	0x0368A924 ADRP X0, 0xA96000
	0x0368A928 LDR X0, [X0 + 0xFB8]
	0x0368A92C BL 0x1C16CF4
	0x0368A930 ADRP X0, 0xA91000
	0x0368A934 LDR X0, [X0 + 0x8B0]
	0x0368A938 BL 0x1C16CF4
	0x0368A93C MOVZ W8, 0x1
	0x0368A940 STRB W8, [X20 + 0x837]
	0x0368A944 MOV X0, X22
	0x0368A948 BL 0x36890D8
	0x0368A94C MOV X21, X0
	0x0368A950 MOV X0, X22
	0x0368A954 BL 0x36893F0
	0x0368A958 MOV X23, X0
	0x0368A95C MOV X0, X22
	0x0368A960 BL 0x368A364
	0x0368A964 MOV X20, X0
	0x0368A968 MOV X0, X22
	0x0368A96C BL 0x368A550
	0x0368A970 LDR X8, [X19]
	0x0368A974 MOV X24, X0
	0x0368A978 MOVZ W1, 0x7
	0x0368A97C MOV X0, X8
	0x0368A980 BL 0x1C16D6C
	0x0368A984 CBZ X24, 0x368AB2C
	0x0368A988 ADRP X25, 0xA91000
	0x0368A98C LDR W8, [X24 + 0x10]
	0x0368A990 LDR X25, [X25 + 0x8B0]
	0x0368A994 MOV X19, X0
	0x0368A998 CBZ W8, 0x368A9B4
	0x0368A99C LDR X1, [X25]
	0x0368A9A0 MOV X0, X24
	0x0368A9A4 MOV X2, X31
	0x0368A9A8 BL 0x321B938
	0x0368A9AC CBNZ X19, 0x368A9CC
	0x0368A9B0 B 0x368AB2C
	0x0368A9B4 ADRP X8, 0xA6B000
	0x0368A9B8 LDR X8, [X8 + 0x278]
	0x0368A9BC LDR X8, [X8]
	0x0368A9C0 LDR X8, [X8 + 0xB8]
	0x0368A9C4 LDR X0, [X8]
	0x0368A9C8 CBZ X19, 0x368AB2C
	0x0368A9CC LDR W8, [X19 + 0x18]
	0x0368A9D0 CBZ W8, 0x368AB28
	0x0368A9D4 CMP W8, 0x1
	0x0368A9D8 STR X0, [X19 + 0x20]
	0x0368A9DC B.EQ 0x368AB28
	0x0368A9E0 LDR X9, [X22 + 0x40]
	0x0368A9E4 CMP W8, 0x2
	0x0368A9E8 STR X9, [X19 + 0x28]
	0x0368A9EC B.LS 0x368AB28
	0x0368A9F0 ADRP X24, 0xA96000
	0x0368A9F4 LDR X24, [X24 + 0xFB8]
	0x0368A9F8 CMP W8, 0x3
	0x0368A9FC LDR X9, [X24]
	0x0368AA00 STR X9, [X19 + 0x30]
	0x0368AA04 B.EQ 0x368AB28
	0x0368AA08 LDR X9, [X22 + 0x80]
	0x0368AA0C STR X9, [X19 + 0x38]
	0x0368AA10 CBZ X23, 0x368AB2C
	0x0368AA14 LDR W9, [X23 + 0x10]
	0x0368AA18 CBZ W9, 0x368AA34
	0x0368AA1C LDR X0, [X25]
	0x0368AA20 MOV X1, X23
	0x0368AA24 MOV X2, X31
	0x0368AA28 BL 0x321B938
	0x0368AA2C LDR W8, [X19 + 0x18]
	0x0368AA30 B 0x368AA48
	0x0368AA34 ADRP X9, 0xA6B000
	0x0368AA38 LDR X9, [X9 + 0x278]
	0x0368AA3C LDR X9, [X9]
	0x0368AA40 LDR X9, [X9 + 0xB8]
	0x0368AA44 LDR X0, [X9]
	0x0368AA48 CMP W8, 0x4
	0x0368AA4C B.LS 0x368AB28
	0x0368AA50 STR X0, [X19 + 0x40]
	0x0368AA54 CBZ X21, 0x368AB2C
	0x0368AA58 LDR W9, [X21 + 0x10]
	0x0368AA5C CBZ W9, 0x368AA78
	0x0368AA60 LDR X0, [X25]
	0x0368AA64 MOV X1, X21
	0x0368AA68 MOV X2, X31
	0x0368AA6C BL 0x321B938
	0x0368AA70 LDR W8, [X19 + 0x18]
	0x0368AA74 B 0x368AA8C
	0x0368AA78 ADRP X9, 0xA6B000
	0x0368AA7C LDR X9, [X9 + 0x278]
	0x0368AA80 LDR X9, [X9]
	0x0368AA84 LDR X9, [X9 + 0xB8]
	0x0368AA88 LDR X0, [X9]
	0x0368AA8C CMP W8, 0x5
	0x0368AA90 B.LS 0x368AB28
	0x0368AA94 STR X0, [X19 + 0x48]
	0x0368AA98 CBZ X20, 0x368AB2C
	0x0368AA9C LDR W9, [X20 + 0x10]
	0x0368AAA0 CBZ W9, 0x368AABC
	0x0368AAA4 LDR X0, [X25]
	0x0368AAA8 MOV X1, X20
	0x0368AAAC MOV X2, X31
	0x0368AAB0 BL 0x321B938
	0x0368AAB4 LDR W8, [X19 + 0x18]
	0x0368AAB8 B 0x368AAD0
	0x0368AABC ADRP X9, 0xA6B000
	0x0368AAC0 LDR X9, [X9 + 0x278]
	0x0368AAC4 LDR X9, [X9]
	0x0368AAC8 LDR X9, [X9 + 0xB8]
	0x0368AACC LDR X0, [X9]
	0x0368AAD0 CMP W8, 0x6
	0x0368AAD4 B.LS 0x368AB28
	0x0368AAD8 STR X0, [X19 + 0x50]
	0x0368AADC MOV X0, X19
	0x0368AAE0 MOV X1, X31
	0x0368AAE4 BL 0x32278CC
	0x0368AAE8 LDR X1, [X24]
	0x0368AAEC MOV X2, X31
	0x0368AAF0 MOV X19, X0
	0x0368AAF4 BL 0x321BA08
	0x0368AAF8 TBZ X0, 0x0, 0x368AB10
	0x0368AAFC ADRP X8, 0xA6B000
	0x0368AB00 LDR X8, [X8 + 0x278]
	0x0368AB04 LDR X8, [X8]
	0x0368AB08 LDR X8, [X8 + 0xB8]
	0x0368AB0C LDR X19, [X8]
	0x0368AB10 MOV X0, X19
	0x0368AB14 LDP X20, X19, [X31 + 0x30]
	0x0368AB18 LDP X22, X21, [X31 + 0x20]
	0x0368AB1C LDP X24, X23, [X31 + 0x10]
	0x0368AB20 LDP X30, X25, [X31], #0x40
	0x0368AB24 RET
	0x0368AB28 BL 0x1C16F28
	0x0368AB2C BL 0x1C16F20
	0x0368AB30 STP X30, X23, [X31 - 0x30]!
	0x0368AB34 STP X22, X21, [X31 + 0x10]
	0x0368AB38 STP X20, X19, [X31 + 0x20]
	0x0368AB3C ADRP X23, 0xD56000
	0x0368AB40 ADRP X21, 0xA72000
	0x0368AB44 ADRP X19, 0xAB4000
	0x0368AB48 ADRP X20, 0xAB4000
	0x0368AB4C ADRP X22, 0xAB4000
	0x0368AB50 LDRB W8, [X23 + 0x838]
	0x0368AB54 LDR X21, [X21 + 0x8D8]
	0x0368AB58 LDR X19, [X19 + 0x308]
	0x0368AB5C LDR X20, [X20 + 0x2A0]
	0x0368AB60 LDR X22, [X22 + 0x310]
	0x0368AB64 TBNZ X8, 0x0, 0x368ABAC
	0x0368AB68 ADRP X0, 0xA72000
	0x0368AB6C LDR X0, [X0 + 0x8D8]
	0x0368AB70 BL 0x1C16CF4
	0x0368AB74 ADRP X0, 0xAB4000
	0x0368AB78 LDR X0, [X0 + 0x318]
	0x0368AB7C BL 0x1C16CF4
	0x0368AB80 ADRP X0, 0xAB4000
	0x0368AB84 LDR X0, [X0 + 0x2A0]
	0x0368AB88 BL 0x1C16CF4
	0x0368AB8C ADRP X0, 0xAB4000
	0x0368AB90 LDR X0, [X0 + 0x308]
	0x0368AB94 BL 0x1C16CF4
	0x0368AB98 ADRP X0, 0xAB4000
	0x0368AB9C LDR X0, [X0 + 0x310]
	0x0368ABA0 BL 0x1C16CF4
	0x0368ABA4 MOVZ W8, 0x1
	0x0368ABA8 STRB W8, [X23 + 0x838]
	0x0368ABAC LDR X0, [X21]
	0x0368ABB0 MOVZ W1, 0x3
	0x0368ABB4 BL 0x1C16D6C
	0x0368ABB8 LDR X1, [X19]
	0x0368ABBC MOV X2, X31
	0x0368ABC0 MOV X19, X0
	0x0368ABC4 BL 0x32C5BD8
	0x0368ABC8 LDR X8, [X20]
	0x0368ABCC MOVZ W1, 0x7
	0x0368ABD0 LDR X8, [X8 + 0xB8]
	0x0368ABD4 STR X19, [X8]
	0x0368ABD8 LDR X0, [X21]
	0x0368ABDC BL 0x1C16D6C
	0x0368ABE0 LDR X1, [X22]
	0x0368ABE4 MOV X2, X31
	0x0368ABE8 MOV X19, X0
	0x0368ABEC BL 0x32C5BD8
	0x0368ABF0 LDR X8, [X20]
	0x0368ABF4 MOVZ W1, 0x2
	0x0368ABF8 LDR X8, [X8 + 0xB8]
	0x0368ABFC STR X19, [X8 + 0x8]
	0x0368AC00 LDR X0, [X21]
	0x0368AC04 BL 0x1C16D6C
	0x0368AC08 CBZ X0, 0x368AC74
	0x0368AC0C LDR W8, [X0 + 0x18]
	0x0368AC10 CBZ W8, 0x368AC70
	0x0368AC14 MOVZ W9, 0x3B
	0x0368AC18 CMP W8, 0x1
	0x0368AC1C STRH W9, [X0 + 0x20]
	0x0368AC20 B.EQ 0x368AC70
	0x0368AC24 MOVZ W8, 0x2C
	0x0368AC28 STRH W8, [X0 + 0x22]
	0x0368AC2C LDR X8, [X20]
	0x0368AC30 ADRP X9, 0xAB4000
	0x0368AC34 LDR X8, [X8 + 0xB8]
	0x0368AC38 LDR X9, [X9 + 0x318]
	0x0368AC3C STR X0, [X8 + 0x10]
	0x0368AC40 LDR X0, [X9]
	0x0368AC44 BL 0x1C16F10
	0x0368AC48 MOV X1, X31
	0x0368AC4C MOV X19, X0
	0x0368AC50 BL 0x33BDD8C
	0x0368AC54 LDR X8, [X20]
	0x0368AC58 LDP X22, X21, [X31 + 0x10]
	0x0368AC5C LDR X8, [X8 + 0xB8]
	0x0368AC60 STR X19, [X8 + 0x18]
	0x0368AC64 LDP X20, X19, [X31 + 0x20]
	0x0368AC68 LDP X30, X23, [X31], #0x30
	0x0368AC6C RET
	0x0368AC70 BL 0x1C16F28
	0x0368AC74 BL 0x1C16F20
	0x0368AC78 MOV X1, X31
	0x0368AC7C B 0x33BDD8C
	0x0368AC80 STR X30, [X31 - 0x20]!
	0x0368AC84 STP X20, X19, [X31 + 0x10]
	0x0368AC88 MOV X19, X1
	0x0368AC8C MOV X1, X31
	0x0368AC90 MOV X20, X0
	0x0368AC94 BL 0x33BDD8C
	0x0368AC98 CBZ X19, 0x368ACB4
	0x0368AC9C LDR W8, [X19 + 0x10]
	0x0368ACA0 STR X19, [X20 + 0x38]
	0x0368ACA4 STR W8, [X20 + 0x18]
	0x0368ACA8 LDP X20, X19, [X31 + 0x10]
	0x0368ACAC LDR X30, [X31], #0x20
	0x0368ACB0 RET
	0x0368ACB4 BL 0x1C16F20
	0x0368ACB8 LDRB W0, [X0 + 0x10]
	0x0368ACBC RET
	0x0368ACC0 AND W8, W1, 0x1
	0x0368ACC4 STRB W8, [X0 + 0x10]
	0x0368ACC8 RET
	0x0368ACCC LDP W8, W9, [X0 + 0x14]
	0x0368ACD0 CMP W8, W9
	0x0368ACD4 CSET W0, GE
	0x0368ACD8 RET
	0x0368ACDC LDR X0, [X0 + 0x20]
	0x0368ACE0 RET
	0x0368ACE4 STR X1, [X0 + 0x20]
	0x0368ACE8 RET
	0x0368ACEC LDRB W0, [X0 + 0x28]
	0x0368ACF0 RET
	0x0368ACF4 AND W8, W1, 0x1
	0x0368ACF8 STRB W8, [X0 + 0x28]
	0x0368ACFC RET
	0x0368AD00 LDR W0, [X0 + 0x30]
	0x0368AD04 RET
	0x0368AD08 STR W1, [X0 + 0x30]
	0x0368AD0C RET
	0x0368AD10 LDR X0, [X0 + 0x40]
	0x0368AD14 RET
	0x0368AD18 STR X1, [X0 + 0x40]
	0x0368AD1C RET
	0x0368AD20 STR X30, [X31 - 0x20]!
	0x0368AD24 STP X20, X19, [X31 + 0x10]
	0x0368AD28 ADRP X20, 0xD56000
	0x0368AD2C LDRB W8, [X20 + 0x839]
	0x0368AD30 MOV X19, X0
	0x0368AD34 TBNZ X8, 0x0, 0x368AD4C
	0x0368AD38 ADRP X0, 0xA6B000
	0x0368AD3C LDR X0, [X0 + 0x278]
	0x0368AD40 BL 0x1C16CF4
	0x0368AD44 MOVZ W8, 0x1
	0x0368AD48 STRB W8, [X20 + 0x839]
	0x0368AD4C LDR W2, [X19 + 0x34]
	0x0368AD50 CBZ W2, 0x368AD84
	0x0368AD54 LDR X0, [X19 + 0x38]
	0x0368AD58 CBZ X0, 0x368ADA4
	0x0368AD5C LDR W1, [X19 + 0x2C]
	0x0368AD60 MOV X3, X31
	0x0368AD64 BL 0x3228DE4
	0x0368AD68 LDRB W8, [X19 + 0x28]
	0x0368AD6C CBNZ W8, 0x368AD98
	0x0368AD70 CBZ X0, 0x368ADA4
	0x0368AD74 LDP X20, X19, [X31 + 0x10]
	0x0368AD78 MOV X1, X31
	0x0368AD7C LDR X30, [X31], #0x20
	0x0368AD80 B 0x322B8DC
	0x0368AD84 ADRP X8, 0xA6B000
	0x0368AD88 LDR X8, [X8 + 0x278]
	0x0368AD8C LDR X8, [X8]
	0x0368AD90 LDR X8, [X8 + 0xB8]
	0x0368AD94 LDR X0, [X8]
	0x0368AD98 LDP X20, X19, [X31 + 0x10]
	0x0368AD9C LDR X30, [X31], #0x20
	0x0368ADA0 RET
	0x0368ADA4 BL 0x1C16F20
	0x0368ADA8 STP X30, X23, [X31 - 0x30]!
	0x0368ADAC STP X22, X21, [X31 + 0x10]
	0x0368ADB0 STP X20, X19, [X31 + 0x20]
	0x0368ADB4 ADRP X22, 0xD56000
	0x0368ADB8 LDRB W8, [X22 + 0x83A]
	0x0368ADBC MOV W20, W2
	0x0368ADC0 MOV W21, W1
	0x0368ADC4 MOV X19, X0
	0x0368ADC8 TBNZ X8, 0x0, 0x368ADE0
	0x0368ADCC ADRP X0, 0xA6B000
	0x0368ADD0 LDR X0, [X0 + 0x170]
	0x0368ADD4 BL 0x1C16CF4
	0x0368ADD8 MOVZ W8, 0x1
	0x0368ADDC STRB W8, [X22 + 0x83A]
	0x0368ADE0 LDP W1, W8, [X19 + 0x14]
	0x0368ADE4 STR W31, [X19 + 0x34]
	0x0368ADE8 CMP W1, W8
	0x0368ADEC STR W1, [X19 + 0x2C]
	0x0368ADF0 B.GE 0x368AE60
	0x0368ADF4 ADRP X23, 0xA6B000
	0x0368ADF8 LDR X23, [X23 + 0x170]
	0x0368ADFC LDR X0, [X19 + 0x38]
	0x0368AE00 CBZ X0, 0x368B044
	0x0368AE04 MOV X2, X31
	0x0368AE08 BL 0x3222A1C
	0x0368AE0C LDR X8, [X23]
	0x0368AE10 MOV W22, W0
	0x0368AE14 LDR W9, [X8 + 0xE0]
	0x0368AE18 CBNZ W9, 0x368AE24
	0x0368AE1C MOV X0, X8
	0x0368AE20 BL 0x1C16DFC
	0x0368AE24 MOV W0, W22
	0x0368AE28 MOV X1, X31
	0x0368AE2C BL 0x3317FCC
	0x0368AE30 LDR W1, [X19 + 0x14]
	0x0368AE34 TBZ X0, 0x0, 0x368AE5C
	0x0368AE38 LDR W9, [X19 + 0x2C]
	0x0368AE3C LDR W8, [X19 + 0x18]
	0x0368AE40 ADD W1, W1, 0x1
	0x0368AE44 STR W1, [X19 + 0x14]
	0x0368AE48 ADD W9, W9, 0x1
	0x0368AE4C CMP W1, W8
	0x0368AE50 STR W9, [X19 + 0x2C]
	0x0368AE54 B.LT 0x368ADFC
	0x0368AE58 B 0x368AE60
	0x0368AE5C LDR W8, [X19 + 0x18]
	0x0368AE60 CMP W1, W8
	0x0368AE64 B.GE 0x368B030
	0x0368AE68 LDR X0, [X19 + 0x38]
	0x0368AE6C CBZ X0, 0x368B044
	0x0368AE70 MOV X2, X31
	0x0368AE74 BL 0x3222A1C
	0x0368AE78 AND W8, W0, 0xFFFF
	0x0368AE7C CMP W8, 0x22
	0x0368AE80 B.NE 0x368AEEC
	0x0368AE84 LDP W9, W8, [X19 + 0x14]
	0x0368AE88 MOVZ W10, 0x1
	0x0368AE8C STRB W10, [X19 + 0x28]
	0x0368AE90 ADD W1, W9, 0x1
	0x0368AE94 CMP W1, W8
	0x0368AE98 STR W1, [X19 + 0x14]
	0x0368AE9C B.GE 0x368AEFC
	0x0368AEA0 MOV W21, W31
	0x0368AEA4 LDR X0, [X19 + 0x38]
	0x0368AEA8 CBZ X0, 0x368B044
	0x0368AEAC MOV X2, X31
	0x0368AEB0 BL 0x3222A1C

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0xD57000
	015 Move W8, [X21+2095]
	016 Move W20, W6
	017 Move W22, W5
	018 Move X26, X4
	019 Move W27, W3
	020 Move X23, X2
	021 Move W25, W1
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move X0, 0xAB5000
	028 Move X0, [X0+672]
	029 Call 0x1C17CF4
	030 Move X0, 0xA6C000
	031 Move X0, [X0+3144]
	032 Call 0x1C17CF4
	033 Move X0, 0xA6B000
	034 Move X0, [X0+3672]
	035 Call 0x1C17CF4
	036 Move X0, 0xA73000
	037 Move X0, [X0+1936]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+2095], W8
	041 Compare X23, 0
	042 JumpIfEqual {648}
	043 Move X0, X23
	044 Move X1, X31
	045 Call Uri.get_Host, X0
	046 Move X24, X0
	047 Move X0, X23
	048 Move X1, X31
	049 Call Uri.get_Port, X0
	050 Move W21, W0
	051 Move X0, X23
	052 Move X1, X31
	053 Call Uri.get_AbsolutePath, X0
	054 Move X23, X0
	055 Move TEMP, X22
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {67}
	059 Move W8, [X19+136]
	060 Move W9, 2
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CCMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CSINC not yet implemented."
	066 Move [X19+32], W25
	067 Move X0, [X19+64]
	068 Compare X0, 0
	069 JumpIfEqual {95}
	070 Move W8, [X0+16]
	071 Compare W8, 0
	072 JumpIfEqual {95}
	073 Move W1, W31
	074 Move X2, X31
	075 Call String.get_Chars, X0, X1
	076 And W8, W0, 0xFFFF
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X29, 0xAB5000
	079 Move X29, [X29+672]
	080 Move X28, [X19+64]
	081 Move X0, [X29]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Compare X28, 0
	087 JumpIfEqual {648}
	088 Move X8, [X29]
	089 Move X0, X28
	090 Move X2, X31
	091 Move X8, [X8+184]
	092 Move X1, [X8+8]
	093 Call String.IndexOfAny, X0, X1
	094 Add W31, W0, 1
	095 Move TEMP, X20
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {641}
	099 Move W0, W31
	100 Move X20, [X31+96]
	101 Move X19, [X31+104]
	102 Move X22, [X31+80]
	103 Move X21, [X31+88]
	104 Move X24, [X31+64]
	105 Move X23, [X31+72]
	106 Move X26, [X31+48]
	107 Move X25, [X31+56]
	108 Move X28, [X31+32]
	109 Move X27, [X31+40]
	110 Move X29, [X31+16]
	111 Move X30, [X31+24]
	112 Add X31, X31, 112
	113 Return X0
	114 Move X0, [X19+128]
	115 Compare X0, 0
	116 JumpIfEqual {148}
	117 Move W8, [X0+16]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move W1, W31
	120 Move X2, X31
	121 Call String.get_Chars, X0, X1
	122 And W8, W0, 0xFFFF
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X0, [X19+128]
	125 Compare X0, 0
	126 JumpIfEqual {648}
	127 Move W8, [X0+16]
	128 Move X2, X31
	129 Subtract W1, W8, 1
	130 Call String.get_Chars, X0, X1
	131 And W8, W0, 0xFFFF
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move X0, [X29]
	134 Move X28, [X19+128]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Compare X28, 0
	140 JumpIfEqual {648}
	141 Move X8, [X29]
	142 Move X0, X28
	143 Move X2, X31
	144 Move X8, [X8+184]
	145 Move X1, [X8+16]
	146 Call String.IndexOfAny, X0, X1
	147 Add W31, W0, 1
	148 Move TEMP, X20
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {99}
	152 Move X0, 0xA6A000
	153 Move X0, [X0+2512]
	154 Call 0x1C17D08
	155 Move W1, 2
	156 Call 0x1C17D6C
	157 Compare X0, 0
	158 JumpIfEqual {648}
	159 Move X20, X0
	160 Move X0, 0xA96000
	161 Move X0, [X0+232]
	162 Call 0x1C17D08
	163 Compare X0, 0
	164 JumpIfEqual {170}
	165 Move X8, [X20]
	166 Move X1, [X8+64]
	167 Call 0x1C17E00
	168 Compare X0, 0
	169 JumpIfEqual {660}
	170 Move X0, 0xA96000
	171 Move X0, [X0+232]
	172 Call 0x1C17D08
	173 Move W8, [X20+24]
	174 Compare W8, 0
	175 JumpIfEqual {669}
	176 Move [X20+32], X0
	177 Move X0, 0xAB5000
	178 Move X22, [X19+128]
	179 Move X0, [X0+688]
	180 Call 0x1C17D08
	181 Move X21, X0
	182 Compare X22, 0
	183 JumpIfEqual {678}
	184 Move X19, [X19+128]
	185 Move X0, [X19+16]
	186 Compare X0, 0
	187 JumpIfEqual {244}
	188 Move W8, [X0+16]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move W1, W31
	191 Move X2, X31
	192 Call String.get_Chars, X0, X1
	193 And W8, W0, 0xFFFF
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move X0, [X19+16]
	196 Compare X0, 0
	197 JumpIfEqual {648}
	198 Move W8, [X0+16]
	199 Move X2, X31
	200 Subtract W1, W8, 1
	201 Call String.get_Chars, X0, X1
	202 And W8, W0, 0xFFFF
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Move X0, [X29]
	205 Move X28, [X19+16]
	206 Move W8, [X0+224]
	207 Compare W8, 0
	208 JumpIfNotEqual {210}
	209 Call 0x1C17DFC
	210 Compare X28, 0
	211 JumpIfEqual {648}
	212 Move X8, [X29]
	213 Move X0, X28
	214 Move X2, X31
	215 Move X8, [X8+184]
	216 Move X1, [X8+16]
	217 Call String.IndexOfAny, X0, X1
	218 Add W31, W0, 1
	219 Move TEMP, X20
	220 And TEMP, TEMP, 1
	221 Compare TEMP, 1
	222 JumpIfNotEqual {99}
	223 Move X0, 0xA6A000
	224 Move X0, [X0+2512]
	225 Call 0x1C17D08
	226 Move W1, 2
	227 Call 0x1C17D6C
	228 Move X20, X0
	229 Call 0x19913C0
	230 Move X21, 0xAB5000
	231 Move X21, [X21+696]
	232 Move X0, X21
	233 Call 0x1C17D08
	234 Move X1, X0
	235 Move X0, X20
	236 Call 0x19990B4
	237 Move X0, X21
	238 Call 0x1C17D08
	239 Move X2, X0
	240 Move X0, X20
	241 Move X1, X31
	242 Call 0x1994444
	243 Move X19, [X19+16]
	244 Move X0, [X19+72]
	245 Compare X0, 0
	246 JumpIfEqual {278}
	247 Move W8, [X0+16]
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Move W1, W31
	250 Move X2, X31
	251 Call String.get_Chars, X0, X1
	252 And W8, W0, 0xFFFF
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move X0, [X19+72]
	255 Compare X0, 0
	256 JumpIfEqual {648}
	257 Move W8, [X0+16]
	258 Move X2, X31
	259 Subtract W1, W8, 1
	260 Call String.get_Chars, X0, X1
	261 And W8, W0, 0xFFFF
	262 NotImplemented "Instruction CMP not yet implemented."
	263 Move X0, [X29]
	264 Move X28, [X19+72]
	265 Move W8, [X0+224]
	266 Compare W8, 0
	267 JumpIfNotEqual {269}
	268 Call 0x1C17DFC
	269 Compare X28, 0
	270 JumpIfEqual {648}
	271 Move X8, [X29]
	272 Move X0, X28
	273 Move X2, X31
	274 Move X8, [X8+184]
	275 Move X1, [X8+16]
	276 Call String.IndexOfAny, X0, X1
	277 Add W31, W0, 1
	278 Move W8, [X19+48]
	279 Move TEMP, X22
	280 And TEMP, TEMP, 1
	281 Compare TEMP, 1
	282 JumpIfNotEqual {299}
	283 Compare W8, 0
	284 JumpIfEqual {334}
	285 Move [X19+40], X24
	286 Move W8, [X19+80]
	287 Compare W8, 0
	288 JumpIfEqual {526}
	289 Move W8, [X19+32]
	290 NotImplemented "Instruction CMP not yet implemented."
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Compare X23, 0
	293 JumpIfEqual {648}
	294 Move W1, 47
	295 Move X0, X23
	296 Move X2, X31
	297 Call String.LastIndexOf, X0, X1
	298 Move W2, W0
	299 Move X28, [X19+40]
	300 Compare W8, 0
	301 JumpIfEqual {335}
	302 Move W2, 5
	303 Move X0, X24
	304 Move X1, X28
	305 Move X3, X31
	306 Call String.Compare, X0, X1, X2
	307 Compare W0, 0
	308 JumpIfEqual {526}
	309 Move TEMP, X20
	310 And TEMP, TEMP, 1
	311 Compare TEMP, 1
	312 JumpIfNotEqual {99}
	313 Move X0, 0xA6A000
	314 Move X0, [X0+2512]
	315 Call 0x1C17D08
	316 Move W1, 2
	317 Call 0x1C17D6C
	318 Move X20, X0
	319 Call 0x19913C0
	320 Move X21, 0xAB5000
	321 Move X21, [X21+704]
	322 Move X0, X21
	323 Call 0x1C17D08
	324 Move X1, X0
	325 Move X0, X20
	326 Call 0x19990B4
	327 Move X0, X21
	328 Call 0x1C17D08
	329 Move X2, X0
	330 Move X0, X20
	331 Move X1, X31
	332 Call 0x1994444
	333 Move X19, [X19+40]
	334 Move X28, [X19+40]
	335 Move X0, [X29]
	336 Move W8, [X0+224]
	337 Compare W8, 0
	338 JumpIfNotEqual {340}
	339 Call 0x1C17DFC
	340 Move X0, X28
	341 Call Cookie.DomainCharsTest, X0
	342 Move TEMP, X0
	343 And TEMP, TEMP, 1
	344 Compare TEMP, 1
	345 JumpIfNotEqual {415}
	346 Compare X28, 0
	347 JumpIfEqual {648}
	348 Move X0, X28
	349 Move W1, W31
	350 Move X2, X31
	351 Call String.get_Chars, X0, X1
	352 And W8, W0, 0xFFFF
	353 NotImplemented "Instruction CMP not yet implemented."
	354 Or W8, W25, 2
	355 NotImplemented "Instruction CMP not yet implemented."
	356 Move X8, 0xA73000
	357 Move X8, [X8+1936]
	358 Move X1, X28
	359 Move X2, X31
	360 Move X0, [X8]
	361 Call String.Concat, X0, X1
	362 Move X28, X0
	363 Compare X24, 0
	364 JumpIfEqual {648}
	365 Move W1, 46
	366 Move X0, X24
	367 Move X2, X31
	368 Call String.IndexOf, X0, X1
	369 Move [X31+12], W0
	370 Move TEMP, X27
	371 And TEMP, TEMP, 1
	372 Compare TEMP, 1
	373 JumpIfNotEqual {381}
	374 Move W2, 5
	375 Move X0, X26
	376 Move X1, X28
	377 Move X3, X31
	378 Call String.Compare, X0, X1, X2
	379 Compare W0, 0
	380 JumpIfEqual {506}
	381 Compare X28, 0
	382 JumpIfEqual {648}
	383 Move W8, [X28+16]
	384 Move W1, 46
	385 Move W2, 1
	386 Move X0, X28
	387 Subtract W3, W8, 2
	388 Move X4, X31
	389 Call String.IndexOf, X0, X1, X2, X3
	390 Add W31, W0, 1
	391 NotImplemented "Instruction CMP not yet implemented."
	392 Move X0, [X29]
	393 Move W8, [X0+224]
	394 Compare W8, 0
	395 JumpIfNotEqual {397}
	396 Call 0x1C17DFC
	397 Move X0, X28
	398 Move X1, X24
	399 Call Cookie.IsDomainEqualToHost, X0, X1
	400 Move TEMP, X0
	401 And TEMP, TEMP, 1
	402 Compare TEMP, 1
	403 JumpIfEqual {506}
	404 Move W8, [X24+16]
	405 Move W4, [X28+16]
	406 Subtract W1, W8, W4
	407 Move W5, 5
	408 Move X0, X24
	409 Move X2, X28
	410 Move W3, W31
	411 Move X6, X31
	412 Call String.Compare, X0, X1, X2, X3, X4, X5
	413 Compare W0, 0
	414 JumpIfNotEqual {309}
	415 Move TEMP, X20
	416 And TEMP, TEMP, 1
	417 Compare TEMP, 1
	418 JumpIfNotEqual {99}
	419 Move X0, 0xA6A000
	420 Move X0, [X0+2512]
	421 Call 0x1C17D08
	422 Move W1, 2
	423 Call 0x1C17D6C
	424 Compare X0, 0
	425 JumpIfEqual {648}
	426 Move X19, X0
	427 Move X0, 0xAB5000
	428 Move X0, [X0+704]
	429 Call 0x1C17D08
	430 Compare X0, 0
	431 JumpIfEqual {437}
	432 Move X8, [X19]
	433 Move X1, [X8+64]
	434 Call 0x1C17E00
	435 Compare X0, 0
	436 JumpIfEqual {660}
	437 Move X0, 0xAB5000
	438 Move X0, [X0+704]
	439 Call 0x1C17D08
	440 Move W8, [X19+24]
	441 Compare W8, 0
	442 JumpIfEqual {669}
	443 Move [X19+32], X0
	444 Move X0, 0xAB5000
	445 Move X0, [X0+688]
	446 Call 0x1C17D08
	447 Move X20, X0
	448 Compare X28, 0
	449 JumpIfNotEqual {454}
	450 Move X0, 0xA71000
	451 Move X0, [X0+3416]
	452 Call 0x1C17D08
	453 Move X28, X0
	454 Move X0, X19
	455 Call 0x19913C0
	456 Move X0, X19
	457 Move X1, X28
	458 Call 0x19990B4
	459 Move W1, 1
	460 Move X0, X19
	461 Move X2, X28
	462 Call 0x1994444
	463 Move X0, X20
	464 Move X1, X19
	465 Compare X23, 0
	466 JumpIfEqual {648}
	467 Move W1, 47
	468 Move X0, X23
	469 Move X2, X31
	470 Call String.LastIndexOf, X0, X1
	471 Add W2, W0, 1
	472 Move X0, X23
	473 Move W1, W31
	474 Move X3, X31
	475 Call String.Substring, X0, X1, X2
	476 Move X23, X0
	477 Move [X19+72], X23
	478 Move W8, [X31+12]
	479 Add W31, W8, 1
	480 Move W8, [X24+16]
	481 Move W9, [X31+12]
	482 Move W4, [X28+16]
	483 Subtract W8, W8, W9
	484 NotImplemented "Instruction CMP not yet implemented."
	485 Move W1, [X31+12]
	486 Move W5, 5
	487 Move X0, X24
	488 Move X2, X28
	489 Move W3, W31
	490 Move X6, X31
	491 Call String.Compare, X0, X1, X2, X3, X4, X5
	492 Compare W0, 0
	493 JumpIfEqual {506}
	494 Move X0, [X29]
	495 Move W8, [X0+224]
	496 Compare W8, 0
	497 JumpIfNotEqual {499}
	498 Call 0x1C17DFC
	499 Move X0, X28
	500 Move X1, X24
	501 Call Cookie.IsDomainEqualToHost, X0, X1
	502 Move TEMP, X0
	503 And TEMP, TEMP, 1
	504 Compare TEMP, 1
	505 JumpIfNotEqual {309}
	506 Move X8, 0xA6C000
	507 Move X8, [X8+3144]
	508 Move X0, [X8]
	509 Move W8, [X0+224]
	510 Compare W8, 0
	511 JumpIfNotEqual {513}
	512 Call 0x1C17DFC
	513 Move X0, X31
	514 Call CultureInfo.get_InvariantCulture
	515 Compare X28, 0
	516 JumpIfEqual {648}
	517 Move X1, X0
	518 Move X0, X28
	519 Move X2, X31
	520 Call String.ToLower, X0, X1
	521 Move [X19+144], X0
	522 Move TEMP, X22
	523 And TEMP, TEMP, 1
	524 Compare TEMP, 1
	525 JumpIfEqual {286}
	526 Move X0, [X19+72]
	527 Call CookieParser.CheckQuoted, X0
	528 Compare X23, 0
	529 JumpIfEqual {648}
	530 Move X1, X0
	531 Move X0, X23
	532 Move X2, X31
	533 Call String.StartsWith, X0, X1
	534 Move TEMP, X0
	535 And TEMP, TEMP, 1
	536 Compare TEMP, 1
	537 JumpIfNotEqual {567}
	538 Move TEMP, X22
	539 And TEMP, TEMP, 1
	540 Compare TEMP, 1
	541 JumpIfNotEqual {563}
	542 Move W8, [X19+96]
	543 Compare W8, 0
	544 JumpIfNotEqual {563}
	545 Move X8, [X19+88]
	546 Compare X8, 0
	547 JumpIfEqual {648}
	548 Move W8, [X8+16]
	549 Compare W8, 0
	550 JumpIfNotEqual {563}
	551 Move X8, 0xA6B000
	552 Move X8, [X8+3672]
	553 Move W1, 1
	554 Move X0, [X8]
	555 Call 0x1C17D6C
	556 Compare X0, 0
	557 JumpIfEqual {648}
	558 Move W8, [X0+24]
	559 Compare W8, 0
	560 JumpIfEqual {669}
	561 Move [X0+32], W21
	562 Move [X19+104], X0
	563 Move W8, [X19+96]
	564 Compare W8, 0
	565 JumpIfEqual {604}
	566 Move W0, 1
	567 Move TEMP, X20
	568 And TEMP, TEMP, 1
	569 Compare TEMP, 1
	570 JumpIfNotEqual {99}
	571 Move X0, 0xA6A000
	572 Move X0, [X0+2512]
	573 Call 0x1C17D08
	574 Move W1, 2
	575 Call 0x1C17D6C
	576 Move X20, X0
	577 Call 0x19913C0
	578 Move X21, 0xAB5000
	579 Move X21, [X21+712]
	580 Move X0, X21
	581 Call 0x1C17D08
	582 Move X1, X0
	583 Move X0, X20
	584 Call 0x19990B4
	585 Move X0, X21
	586 Call 0x1C17D08
	587 Move X2, X0
	588 Move X0, X20
	589 Move X1, X31
	590 Call 0x1994444
	591 Move X19, [X19+72]
	592 Move X0, X20
	593 Call 0x19913C0
	594 Move X0, X20
	595 Move X1, X19
	596 Call 0x19990B4
	597 Move W1, 1
	598 Move X0, X20
	599 Move X2, X19
	600 Call 0x1994444
	601 Move X0, 0xAB5000
	602 Move X0, [X0+688]
	603 Call 0x1C17D08
	604 Move X8, [X19+104]
	605 Compare X8, 0
	606 JumpIfEqual {648}
	607 Move W9, [X8+24]
	608 NotImplemented "Instruction CMP not yet implemented."
	609 Move W10, W31
	610 NotImplemented "Instruction CMP not yet implemented."
	611 Add X11, X8, W10
	612 Move W11, [X11+32]
	613 NotImplemented "Instruction CMP not yet implemented."
	614 Add W10, W10, 1
	615 NotImplemented "Instruction CMP not yet implemented."
	616 Move TEMP, X20
	617 And TEMP, TEMP, 1
	618 Compare TEMP, 1
	619 JumpIfNotEqual {99}
	620 Move X0, 0xA6A000
	621 Move X0, [X0+2512]
	622 Call 0x1C17D08
	623 Move W1, 2
	624 Call 0x1C17D6C
	625 Move X20, X0
	626 Call 0x19913C0
	627 Move X21, 0xAB5000
	628 Move X21, [X21+720]
	629 Move X0, X21
	630 Call 0x1C17D08
	631 Move X1, X0
	632 Move X0, X20
	633 Call 0x19990B4
	634 Move X0, X21
	635 Call 0x1C17D08
	636 Move X2, X0
	637 Move X0, X20
	638 Move X1, X31
	639 Call 0x1994444
	640 Move X19, [X19+88]
	641 Move X0, 0xA6A000
	642 Move X0, [X0+2512]
	643 Call 0x1C17D08
	644 Move W1, 2
	645 Call 0x1C17D6C
	646 Compare X0, 0
	647 JumpIfNotEqual {649}
	648 Call 0x1C17F20
	649 Move X20, X0
	650 Move X0, 0xA6F000
	651 Move X0, [X0+368]
	652 Call 0x1C17D08
	653 Compare X0, 0
	654 JumpIfEqual {663}
	655 Move X8, [X20]
	656 Move X1, [X8+64]
	657 Call 0x1C17E00
	658 Compare X0, 0
	659 JumpIfNotEqual {663}
	660 Call 0x1C17F44
	661 Move X1, X31
	662 Call 0x1C17DEC
	663 Move X0, 0xA6F000
	664 Move X0, [X0+368]
	665 Call 0x1C17D08
	666 Move W8, [X20+24]
	667 Compare W8, 0
	668 JumpIfNotEqual {670}
	669 Call 0x1C17F28
	670 Move [X20+32], X0
	671 Move X0, 0xAB5000
	672 Move X22, [X19+64]
	673 Move X0, [X0+688]
	674 Call 0x1C17D08
	675 Move X21, X0
	676 Compare X22, 0
	677 JumpIfNotEqual {682}
	678 Move X0, 0xA71000
	679 Move X0, [X0+3416]
	680 Call 0x1C17D08
	681 Move X19, X0
	682 Move X19, [X19+64]
	683 Move X0, X20
	684 Call 0x19913C0
	685 Move X0, X20
	686 Move X1, X19
	687 Call 0x19990B4
	688 Move W1, 1
	689 Move X0, X20
	690 Move X2, X19
	691 Call 0x1994444
	692 Move X0, X21
	693 Move X1, X20
	694 Move X2, X31
	695 Call SR.GetString, X0, X1
	696 Move X19, X0
	697 Move X0, 0xAB5000
	698 Move X0, [X0+728]
	699 Call 0x1C17D08
	700 Call 0x1C17F10
	701 Move X1, X19
	702 Move X2, X31
	703 Move X20, X0
	704 Call CookieException..ctor, X0, X1
	705 Move X0, 0xAB5000
	706 Move X0, [X0+736]
	707 Call 0x1C17D08
	708 Move X1, X0
	709 Move X0, X20
	710 Call 0x1C17DEC

Method: System.Boolean DomainCharsTest(System.String name)

Disassembly:
	0x0368AEB4 AND W8, W0, 0xFFFF
	0x0368AEB8 CMP W8, 0x22
	0x0368AEBC EOR W9, W21, 0x1
	0x0368AEC0 B.NE 0x368AEC8
	0x0368AEC4 TBNZ X9, 0x0, 0x368AEF8
	0x0368AEC8 CMP W8, 0x5C
	0x0368AECC LDP W10, W8, [X19 + 0x14]
	0x0368AED0 CSET W11, EQ
	0x0368AED4 AND W21, W11, W9, 0x0
	0x0368AED8 ADD W1, W10, 0x1
	0x0368AEDC CMP W1, W8
	0x0368AEE0 STR W1, [X19 + 0x14]
	0x0368AEE4 B.LT 0x368AEA4
	0x0368AEE8 B 0x368AEFC
	0x0368AEEC LDP W1, W8, [X19 + 0x14]
	0x0368AEF0 MOVZ W22, 0x1
	0x0368AEF4 B 0x368AF20
	0x0368AEF8 LDP W1, W8, [X19 + 0x14]
	0x0368AEFC CMP W1, W8
	0x0368AF00 B.GE 0x368AF0C
	0x0368AF04 ADD W1, W1, 0x1
	0x0368AF08 STR W1, [X19 + 0x14]
	0x0368AF0C LDR W9, [X19 + 0x2C]
	0x0368AF10 MOV W22, W31
	0x0368AF14 MOV W21, W31
	0x0368AF18 SUB W9, W1, W9
	0x0368AF1C STR W9, [X19 + 0x34]
	0x0368AF20 CMP W1, W8
	0x0368AF24 B.GE 0x368AFE8
	0x0368AF28 LDR X0, [X19 + 0x38]
	0x0368AF2C CBZ X0, 0x368B044
	0x0368AF30 MOV X2, X31
	0x0368AF34 BL 0x3222A1C
	0x0368AF38 AND W8, W0, 0xFFFF
	0x0368AF3C CMP W8, 0x3B
	0x0368AF40 B.EQ 0x368AFE4
	0x0368AF44 TBNZ X20, 0x0, 0x368AF68
	0x0368AF48 LDR X0, [X19 + 0x38]
	0x0368AF4C CBZ X0, 0x368B044
	0x0368AF50 LDR W1, [X19 + 0x14]
	0x0368AF54 MOV X2, X31
	0x0368AF58 BL 0x3222A1C
	0x0368AF5C AND W8, W0, 0xFFFF
	0x0368AF60 CMP W8, 0x3D
	0x0368AF64 B.EQ 0x368AFE4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {41}
	006 Move W8, [X0+16]
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfEqual {39}
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W20, W31
	012 Move X0, X19
	013 Move W1, W20
	014 Move X2, X31
	015 Call String.get_Chars, X0, X1
	016 Subtract W9, W0, 48
	017 Subtract W10, W0, 45
	018 And W11, W0, 0xFFFFFFDF
	019 And W9, W9, 0xFFFF
	020 And W10, W10, 0xFFFF
	021 Subtract W11, W11, 65
	022 NotImplemented "Instruction CMP not yet implemented."
	023 And W9, W11, 0xFFFF
	024 NotImplemented "Instruction CSET not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 And W8, W0, 0xFFFF
	027 NotImplemented "Instruction CSET not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Or W9, W11, W10
	030 NotImplemented "Instruction CSET not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Or W8, W10, W9
	033 NotImplemented "Instruction CSET not yet implemented."
	034 Or W0, W9, W8
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, [X19+16]
	037 Add W20, W20, 1
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W0, W31
	040 Move W0, 1
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return X0

Method: System.Void set_Port(System.String value)

Disassembly:
	0x0368B02C B 0x368B034
	0x0368B030 MOVZ W0, 0x5
	0x0368B034 LDP X20, X19, [X31 + 0x20]
	0x0368B038 LDP X22, X21, [X31 + 0x10]
	0x0368B03C LDP X30, X23, [X31], #0x30
	0x0368B040 RET
	0x0368B044 BL 0x1C16F20
	0x0368B048 STR X30, [X31 - 0x30]!
	0x0368B04C STP X22, X21, [X31 + 0x10]
	0x0368B050 STP X20, X19, [X31 + 0x20]
	0x0368B054 MOV W21, W2
	0x0368B058 MOV W22, W1
	0x0368B05C MOV X19, X0
	0x0368B060 BL 0x368B14C
	0x0368B064 MOV X0, X19
	0x0368B068 MOV W1, W31
	0x0368B06C MOV W2, W31
	0x0368B070 BL 0x368ADA8
	0x0368B074 MOV W20, W0
	0x0368B078 CMP W0, 0x5
	0x0368B07C B.EQ 0x368B090
	0x0368B080 CMP W20, 0x4
	0x0368B084 B.NE 0x368B0C0
	0x0368B088 MOVZ W8, 0x1
	0x0368B08C STRB W8, [X19 + 0x10]
	0x0368B090 MOV X0, X19
	0x0368B094 BL 0x368AD20
	0x0368B098 STR X0, [X19 + 0x20]
	0x0368B09C CBZ X0, 0x368B148
	0x0368B0A0 LDR W8, [X0 + 0x10]
	0x0368B0A4 CBZ W8, 0x368B134
	0x0368B0A8 AND W1, W21, 0x1
	0x0368B0AC MOV X0, X19
	0x0368B0B0 BL 0x368B1B4
	0x0368B0B4 STR W0, [X19 + 0x30]
	0x0368B0B8 MOVZ W20, 0x2
	0x0368B0BC B 0x368B134
	0x0368B0C0 MOV X0, X19
	0x0368B0C4 BL 0x368AD20
	0x0368B0C8 STR X0, [X19 + 0x20]
	0x0368B0CC TBZ X22, 0x0, 0x368B0E8
	0x0368B0D0 MOVZ W8, 0x9
	0x0368B0D4 CMP W20, 0x6
	0x0368B0D8 STR W8, [X19 + 0x30]
	0x0368B0DC B.NE 0x368B0B8
	0x0368B0E0 MOV W1, W31
	0x0368B0E4 B 0x368B108
	0x0368B0E8 AND W1, W21, 0x1
	0x0368B0EC MOV X0, X19
	0x0368B0F0 BL 0x368B1B4
	0x0368B0F4 CMP W20, 0x6
	0x0368B0F8 STR W0, [X19 + 0x30]
	0x0368B0FC B.NE 0x368B0B8
	0x0368B100 CMP W0, 0xC
	0x0368B104 CSET W1, EQ
	0x0368B108 MOVZ W2, 0x1
	0x0368B10C MOV X0, X19
	0x0368B110 MOVZ W20, 0x1
	0x0368B114 BL 0x368ADA8
	0x0368B118 CMP W0, 0x4
	0x0368B11C B.NE 0x368B124
	0x0368B120 STRB W20, [X19 + 0x10]
	0x0368B124 MOV X0, X19
	0x0368B128 BL 0x368AD20
	0x0368B12C MOVZ W20, 0x1
	0x0368B130 STR X0, [X19 + 0x40]
	0x0368B134 MOV W0, W20
	0x0368B138 LDP X20, X19, [X31 + 0x20]
	0x0368B13C LDP X22, X21, [X31 + 0x10]
	0x0368B140 LDR X30, [X31], #0x30
	0x0368B144 RET
	0x0368B148 BL 0x1C16F20
	0x0368B14C STP X30, X21, [X31 - 0x20]!
	0x0368B150 STP X20, X19, [X31 + 0x10]
	0x0368B154 ADRP X21, 0xD55000
	0x0368B158 ADRP X20, 0xA6A000
	0x0368B15C LDRB W8, [X21 + 0x83B]
	0x0368B160 LDR X20, [X20 + 0x278]
	0x0368B164 MOV X19, X0
	0x0368B168 TBNZ X8, 0x0, 0x368B180
	0x0368B16C ADRP X0, 0xA6A000
	0x0368B170 LDR X0, [X0 + 0x278]
	0x0368B174 BL 0x1C16CF4
	0x0368B178 MOVZ W8, 0x1
	0x0368B17C STRB W8, [X21 + 0x83B]
	0x0368B180 STRB W31, [X19 + 0x10]
	0x0368B184 LDR X8, [X20]
	0x0368B188 LDR W9, [X19 + 0x14]
	0x0368B18C LDR X8, [X8 + 0xB8]
	0x0368B190 LDR X8, [X8]
	0x0368B194 STRB W31, [X19 + 0x28]
	0x0368B198 STR X31, [X19 + 0x30]
	0x0368B19C STR W9, [X19 + 0x2C]
	0x0368B1A0 STR X8, [X19 + 0x20]
	0x0368B1A4 STR X8, [X19 + 0x40]
	0x0368B1A8 LDP X20, X19, [X31 + 0x10]
	0x0368B1AC LDP X30, X21, [X31], #0x20
	0x0368B1B0 RET
	0x0368B1B4 STR X30, [X31 - 0x30]!
	0x0368B1B8 STP X22, X21, [X31 + 0x10]
	0x0368B1BC STP X20, X19, [X31 + 0x20]
	0x0368B1C0 ADRP X21, 0xD55000
	0x0368B1C4 LDRB W8, [X21 + 0x83C]
	0x0368B1C8 MOV W20, W1
	0x0368B1CC MOV X19, X0
	0x0368B1D0 TBNZ X8, 0x0, 0x368B1E8
	0x0368B1D4 ADRP X0, 0xAB3000
	0x0368B1D8 LDR X0, [X0 + 0x320]
	0x0368B1DC BL 0x1C16CF4
	0x0368B1E0 MOVZ W8, 0x1
	0x0368B1E4 STRB W8, [X21 + 0x83C]
	0x0368B1E8 ADRP X21, 0xAB3000
	0x0368B1EC LDR X21, [X21 + 0x320]
	0x0368B1F0 TBZ X20, 0x0, 0x368B278
	0x0368B1F4 MOV X20, X31
	0x0368B1F8 MOV X22, X31
	0x0368B1FC LDR X0, [X21]
	0x0368B200 LDR W8, [X0 + 0xE0]
	0x0368B204 CBNZ W8, 0x368B210
	0x0368B208 BL 0x1C16DFC
	0x0368B20C LDR X0, [X21]
	0x0368B210 LDR X8, [X0 + 0xB8]
	0x0368B214 LDR X8, [X8]
	0x0368B218 CBZ X8, 0x368B368
	0x0368B21C LDRSW X9, [X8 + 0x18]
	0x0368B220 CMP X22, X9
	0x0368B224 B.GE 0x368B2FC
	0x0368B228 LDR W9, [X0 + 0xE0]
	0x0368B22C CBNZ W9, 0x368B244
	0x0368B230 BL 0x1C16DFC
	0x0368B234 LDR X8, [X21]
	0x0368B238 LDR X8, [X8 + 0xB8]
	0x0368B23C LDR X8, [X8]
	0x0368B240 CBZ X8, 0x368B368
	0x0368B244 LDR W9, [X8 + 0x18]
	0x0368B248 CMP X22, X9
	0x0368B24C B.CS 0x368B36C
	0x0368B250 ADD X8, X8, X20
	0x0368B254 LDR X1, [X19 + 0x20]
	0x0368B258 LDR X0, [X8 + 0x20]
	0x0368B25C MOVZ W2, 0x5
	0x0368B260 MOV X3, X31
	0x0368B264 BL 0x322590C
	0x0368B268 CBZ W0, 0x368B304
	0x0368B26C ADD X22, X22, 0x1
	0x0368B270 ADD X20, X20, 0x10
	0x0368B274 B 0x368B1FC
	0x0368B278 MOV X20, X31
	0x0368B27C MOV X22, X31
	0x0368B280 LDR X0, [X21]
	0x0368B284 LDR W8, [X0 + 0xE0]
	0x0368B288 CBNZ W8, 0x368B294
	0x0368B28C BL 0x1C16DFC
	0x0368B290 LDR X0, [X21]
	0x0368B294 LDR X8, [X0 + 0xB8]
	0x0368B298 LDR X8, [X8 + 0x8]
	0x0368B29C CBZ X8, 0x368B368
	0x0368B2A0 LDRSW X9, [X8 + 0x18]
	0x0368B2A4 CMP X22, X9
	0x0368B2A8 B.GE 0x368B2FC
	0x0368B2AC LDR W9, [X0 + 0xE0]
	0x0368B2B0 CBNZ W9, 0x368B2C8
	0x0368B2B4 BL 0x1C16DFC
	0x0368B2B8 LDR X8, [X21]
	0x0368B2BC LDR X8, [X8 + 0xB8]
	0x0368B2C0 LDR X8, [X8 + 0x8]
	0x0368B2C4 CBZ X8, 0x368B368
	0x0368B2C8 LDR W9, [X8 + 0x18]
	0x0368B2CC CMP X22, X9
	0x0368B2D0 B.CS 0x368B36C
	0x0368B2D4 ADD X8, X8, X20
	0x0368B2D8 LDR X1, [X19 + 0x20]
	0x0368B2DC LDR X0, [X8 + 0x20]
	0x0368B2E0 MOVZ W2, 0x5
	0x0368B2E4 MOV X3, X31
	0x0368B2E8 BL 0x322590C
	0x0368B2EC CBZ W0, 0x368B348
	0x0368B2F0 ADD X22, X22, 0x1
	0x0368B2F4 ADD X20, X20, 0x10
	0x0368B2F8 B 0x368B280
	0x0368B2FC MOVZ W0, 0x12
	0x0368B300 B 0x368B338
	0x0368B304 LDR X0, [X21]
	0x0368B308 LDR W8, [X0 + 0xE0]
	0x0368B30C CBNZ W8, 0x368B318
	0x0368B310 BL 0x1C16DFC
	0x0368B314 LDR X0, [X21]
	0x0368B318 LDR X8, [X0 + 0xB8]
	0x0368B31C LDR X8, [X8]
	0x0368B320 CBZ X8, 0x368B368
	0x0368B324 LDR W9, [X8 + 0x18]
	0x0368B328 CMP W22, W9
	0x0368B32C B.CS 0x368B36C
	0x0368B330 ADD X8, X8, X20
	0x0368B334 LDR W0, [X8 + 0x28]
	0x0368B338 LDP X20, X19, [X31 + 0x20]
	0x0368B33C LDP X22, X21, [X31 + 0x10]
	0x0368B340 LDR X30, [X31], #0x30
	0x0368B344 RET
	0x0368B348 LDR X0, [X21]
	0x0368B34C LDR W8, [X0 + 0xE0]
	0x0368B350 CBNZ W8, 0x368B35C
	0x0368B354 BL 0x1C16DFC
	0x0368B358 LDR X0, [X21]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0xD56000
	011 Move W8, [X21+2096]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0xAB4000
	019 Move X0, [X0+672]
	020 Call 0x1C17CF4
	021 Move X0, 0xA6A000
	022 Move X0, [X0+3600]
	023 Call 0x1C17CF4
	024 Move X0, 0xA6A000
	025 Move X0, [X0+3608]
	026 Call 0x1C17CF4
	027 Move X0, 0xA6D000
	028 Move X0, [X0+2928]
	029 Call 0x1C17CF4
	030 Move X0, 0xA6A000
	031 Move X0, [X0+3632]
	032 Call 0x1C17CF4
	033 Move X0, 0xA6B000
	034 Move X0, [X0+632]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+2096], W8
	038 Move X23, 0xA6B000
	039 Move X23, [X23+632]
	040 Move [X31+12], W31
	041 Move [X20+96], W31
	042 Compare X19, 0
	043 JumpIfEqual {153}
	044 Move W8, [X19+16]
	045 Compare W8, 0
	046 JumpIfEqual {153}
	047 Move X0, X19
	048 Move W1, W31
	049 Move X2, X31
	050 Call String.get_Chars, X0, X1
	051 And W8, W0, 0xFFFF
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, [X19+16]
	054 Move X0, X19
	055 Move X2, X31
	056 Subtract W1, W8, 1
	057 Call String.get_Chars, X0, X1
	058 And W8, W0, 0xFFFF
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X21, 0xAB4000
	061 Move X21, [X21+672]
	062 Move X0, [X21]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X21]
	068 Move X8, [X0+184]
	069 Move X0, X19
	070 Move X2, X31
	071 Move X1, [X8]
	072 Call String.Split, X0, X1
	073 Move X8, 0xA6A000
	074 Move X8, [X8+3632]
	075 Move X22, X0
	076 Move X8, [X8]
	077 Move X0, X8
	078 Call 0x1C17F10
	079 Move X8, 0xA6D000
	080 Move X8, [X8+2928]
	081 Move X21, X0
	082 Move X1, [X8]
	083 Call List`1<Int32>..ctor, X0
	084 Compare X22, 0
	085 JumpIfEqual {218}
	086 Move X8, [X22+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X26, 0xA6A000
	089 Move X26, [X26+3600]
	090 Move X24, X31
	091 And X8, X8, 0
	092 Add X25, X22, 32
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X8, [X23]
	095 Move X0, [X25]
	096 Move X2, X31
	097 Move X8, [X8+184]
	098 Move X1, [X8]
	099 Call String.op_Inequality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {137}
	104 Move W8, [X22+24]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X0, [X25]
	107 Add X1, X31, 12
	108 Move X2, X31
	109 Call Int32.TryParse, X0, X1
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {168}
	114 Move W1, [X31+12]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Compare X21, 0
	117 JumpIfEqual {218}
	118 Move W10, [X21+28]
	119 Move X8, [X21+16]
	120 Move X9, [X26]
	121 Add W10, W10, 1
	122 Move [X21+28], W10
	123 Compare X8, 0
	124 JumpIfEqual {218}
	125 NotImplemented "Instruction LDRSW not yet implemented."
	126 Move W11, [X8+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Add W9, W10, 1
	129 Add X8, X8, X10
	130 Move [X21+24], W9
	131 Move [X8+32], W1
	132 Move X8, [X9+32]
	133 Move X0, X21
	134 Move X8, [X8+192]
	135 Move X2, [X8+112]
	136 Call List`1<Int32>.AddWithResize, X0, X1
	137 Move W8, [X22+24]
	138 Add X24, X24, 1
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Compare X21, 0
	141 JumpIfEqual {218}
	142 Move X8, 0xA6A000
	143 Move X8, [X8+3608]
	144 Move X0, X21
	145 Move X1, [X8]
	146 Call List`1<Int32>.ToArray, X0
	147 Move W8, 1
	148 Move W9, 3
	149 Move [X20+104], X0
	150 Move [X20+88], X19
	151 Move [X20+136], W8
	152 Move [X20+32], W9
	153 Move X8, [X23]
	154 Move X8, [X8+184]
	155 Move X8, [X8]
	156 Move [X20+88], X8
	157 Move X20, [X31+64]
	158 Move X19, [X31+72]
	159 Move X22, [X31+48]
	160 Move X21, [X31+56]
	161 Move X24, [X31+32]
	162 Move X23, [X31+40]
	163 Move X26, [X31+16]
	164 Move X25, [X31+24]
	165 Move X30, [X31+80]
	166 Return 
	167 Call 0x1C17F28
	168 Move X0, 0xA69000
	169 Move X0, [X0+2512]
	170 Call 0x1C17D08
	171 Move W1, 2
	172 Call 0x1C17D6C
	173 Move X20, X0
	174 Call 0x19913C0
	175 Move X21, 0xAB4000
	176 Move X21, [X21+720]
	177 Move X0, X21
	178 Call 0x1C17D08
	179 Move X1, X0
	180 Move X0, X20
	181 Call 0x19990B4
	182 Move X0, X21
	183 Call 0x1C17D08
	184 Move X2, X0
	185 Move X0, X20
	186 Move X1, X31
	187 Call 0x1994444
	188 Move X0, X20
	189 Call 0x19913C0
	190 Move X0, X20
	191 Move X1, X19
	192 Call 0x19990B4
	193 Move W1, 1
	194 Move X0, X20
	195 Move X2, X19
	196 Call 0x1994444
	197 Move X0, 0xAB4000
	198 Move X0, [X0+688]
	199 Call 0x1C17D08
	200 Move X1, X20
	201 Move X2, X31
	202 Call SR.GetString, X0, X1
	203 Move X19, X0
	204 Move X0, 0xAB4000
	205 Move X0, [X0+728]
	206 Call 0x1C17D08
	207 Call 0x1C17F10
	208 Move X1, X19
	209 Move X2, X31
	210 Move X20, X0
	211 Call CookieException..ctor, X0, X1
	212 Move X0, 0xAB4000
	213 Move X0, [X0+744]
	214 Call 0x1C17D08
	215 Move X1, X0
	216 Move X0, X20
	217 Call 0x1C17DEC
	218 Call 0x1C17F20

Method: System.Int32[] get_PortList()

Disassembly:
	0x0368B35C LDR X8, [X0 + 0xB8]
	0x0368B360 LDR X8, [X8 + 0x8]

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.String get__Port()

Disassembly:
	0x0368B364 CBNZ X8, 0x368B324
	0x0368B368 BL 0x1C16F20
	0x0368B36C BL 0x1C16F28
	0x0368B370 STR X30, [X31 - 0x10]!
	0x0368B374 LDR X0, [X0]
	0x0368B378 MOVZ W2, 0x5
	0x0368B37C MOV X3, X31
	0x0368B380 BL 0x322590C
	0x0368B384 CMP W0, 0x0
	0x0368B388 CSET W0, EQ
	0x0368B38C LDR X30, [X31], #0x10
	0x0368B390 RET
	0x0368B394 STR X30, [X31 - 0x20]!
	0x0368B398 STP X20, X19, [X31 + 0x10]
	0x0368B39C ADRP X20, 0xD55000
	0x0368B3A0 ADRP X19, 0xAB3000
	0x0368B3A4 LDRB W8, [X20 + 0x83D]
	0x0368B3A8 LDR X19, [X19 + 0x328]
	0x0368B3AC TBNZ X8, 0x0, 0x368B490
	0x0368B3B0 ADRP X0, 0xAB3000
	0x0368B3B4 LDR X0, [X0 + 0x320]
	0x0368B3B8 BL 0x1C16CF4
	0x0368B3BC ADRP X0, 0xAB3000
	0x0368B3C0 LDR X0, [X0 + 0x328]
	0x0368B3C4 BL 0x1C16CF4
	0x0368B3C8 ADRP X0, 0xAB3000
	0x0368B3CC LDR X0, [X0 + 0x330]
	0x0368B3D0 BL 0x1C16CF4
	0x0368B3D4 ADRP X0, 0xAB3000
	0x0368B3D8 LDR X0, [X0 + 0x338]
	0x0368B3DC BL 0x1C16CF4
	0x0368B3E0 ADRP X0, 0xAB3000
	0x0368B3E4 LDR X0, [X0 + 0x340]
	0x0368B3E8 BL 0x1C16CF4
	0x0368B3EC ADRP X0, 0xAB3000
	0x0368B3F0 LDR X0, [X0 + 0x2C0]
	0x0368B3F4 BL 0x1C16CF4
	0x0368B3F8 ADRP X0, 0xAB3000
	0x0368B3FC LDR X0, [X0 + 0x348]
	0x0368B400 BL 0x1C16CF4
	0x0368B404 ADRP X0, 0xAB3000
	0x0368B408 LDR X0, [X0 + 0x2B8]
	0x0368B40C BL 0x1C16CF4
	0x0368B410 ADRP X0, 0xAB3000
	0x0368B414 LDR X0, [X0 + 0x350]
	0x0368B418 BL 0x1C16CF4
	0x0368B41C ADRP X0, 0xAB3000
	0x0368B420 LDR X0, [X0 + 0x358]
	0x0368B424 BL 0x1C16CF4
	0x0368B428 ADRP X0, 0xAAF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD56000
	005 Move W8, [X20+2097]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0xA6B000
	012 Move X0, [X0+632]
	013 Call 0x1C17CF4
	014 Move X0, 0xA96000
	015 Move X0, [X0+4024]
	016 Call 0x1C17CF4
	017 Move X0, 0xAB4000
	018 Move X0, [X0+752]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2097], W8
	022 Move X8, 0xA6B000
	023 Move W9, [X19+96]
	024 Move X8, [X8+632]
	025 Compare W9, 0
	026 JumpIfEqual {34}
	027 Move X8, [X8]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X8, [X8+184]
	031 Move X0, [X8]
	032 Move X30, [X31+32]
	033 Return X0
	034 Move X1, [X19+88]
	035 Compare X1, 0
	036 JumpIfEqual {59}
	037 Move X10, 0xAB4000
	038 Move W9, [X1+16]
	039 Move X10, [X10+752]
	040 Move X19, [X10]
	041 Compare W9, 0
	042 JumpIfEqual {49}
	043 Move X8, 0xA96000
	044 Move X8, [X8+4024]
	045 Move X2, X31
	046 Move X0, [X8]
	047 Call String.Concat, X0, X1
	048 Move X1, X0
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move X1, [X8]
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X2, X31
	056 Move X30, [X31+32]
	057 Call String.Concat, X0, X1
	058 Return X0
	059 Call 0x1C17F20

Method: System.Boolean get_Secure()

Disassembly:
	0x0368B42C LDR X0, [X0 + 0xA78]
	0x0368B430 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+112]
	002 Return X0

Method: System.Void set_Secure(System.Boolean value)

Disassembly:
	0x0368B434 ADRP X0, 0xAB3000
	0x0368B438 LDR X0, [X0 + 0x360]
	0x0368B43C BL 0x1C16CF4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+112], W8
	003 Return 

Method: System.String get_Value()

Disassembly:
	0x0368B440 ADRP X0, 0xAB3000
	0x0368B444 LDR X0, [X0 + 0x368]

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void set_Value(System.String value)

Disassembly:
	0x0368B448 BL 0x1C16CF4
	0x0368B44C ADRP X0, 0xAB3000
	0x0368B450 LDR X0, [X0 + 0x370]
	0x0368B454 BL 0x1C16CF4
	0x0368B458 ADRP X0, 0xAB3000
	0x0368B45C LDR X0, [X0 + 0x2F0]
	0x0368B460 BL 0x1C16CF4
	0x0368B464 ADRP X0, 0xAB3000
	0x0368B468 LDR X0, [X0 + 0x2D0]
	0x0368B46C BL 0x1C16CF4
	0x0368B470 ADRP X0, 0xA69000
	0x0368B474 LDR X0, [X0 + 0x2A0]
	0x0368B478 BL 0x1C16CF4
	0x0368B47C ADRP X0, 0xAB3000
	0x0368B480 LDR X0, [X0 + 0x2C8]
	0x0368B484 BL 0x1C16CF4
	0x0368B488 MOVZ W8, 0x1
	0x0368B48C STRB W8, [X20 + 0x83D]
	0x0368B490 LDR X0, [X19]
	0x0368B494 MOVZ W1, 0xB
	0x0368B498 BL 0x1C16D6C
	0x0368B49C CBZ X0, 0x368B6A0
	0x0368B4A0 LDR W8, [X0 + 0x18]
	0x0368B4A4 CBZ W8, 0x368B69C
	0x0368B4A8 ADRP X9, 0xAB3000
	0x0368B4AC LDR X9, [X9 + 0x2C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD56000
	006 Move W8, [X21+2098]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {23}
	013 Compare X20, 0
	014 JumpIfEqual {30}
	015 Compare X19, 0
	016 JumpIfEqual {37}
	017 Move [X19+128], X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Return 
	023 Move X0, 0xA6B000
	024 Move X0, [X0+632]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2098], W8
	028 Compare X20, 0
	029 JumpIfNotEqual {15}
	030 Move X8, 0xA6B000
	031 Move X8, [X8+632]
	032 Move X8, [X8]
	033 Move X8, [X8+184]
	034 Move X20, [X8]
	035 Compare X19, 0
	036 JumpIfNotEqual {17}
	037 Call 0x1C17F20

Method: System.Net.CookieVariant get_Variant()

Disassembly:
	0x0368B4B0 MOVZ W10, 0xE
	0x0368B4B4 CMP W8, 0x1

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.String get_DomainKey()

Disassembly:
	0x0368B4B8 LDR X9, [X9]
	0x0368B4BC STP X9, X10, [X0 + 0x20]
	0x0368B4C0 B.EQ 0x368B69C
	0x0368B4C4 ADRP X9, 0xAB3000
	0x0368B4C8 LDR X9, [X9 + 0x368]
	0x0368B4CC MOVZ W10, 0xD
	0x0368B4D0 CMP W8, 0x2

ISIL:
	001 Move W8, [X0+48]
	002 Move W9, 40
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, 144
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Move X0, [X0]
	007 Return X0

Method: System.Int32 get_Version()

Disassembly:
	0x0368B4D4 LDR X9, [X9]
	0x0368B4D8 STP X9, X10, [X0 + 0x30]

ISIL:
	001 Move W0, [X0+136]
	002 Return X0

Method: System.Void set_Version(System.Int32 value)

Disassembly:
	0x0368B4DC B.LS 0x368B69C
	0x0368B4E0 ADRP X9, 0xAAF000
	0x0368B4E4 LDR X9, [X9 + 0xA78]
	0x0368B4E8 MOVZ W10, 0xC
	0x0368B4EC CMP W8, 0x3
	0x0368B4F0 LDR X9, [X9]
	0x0368B4F4 STP X9, X10, [X0 + 0x40]
	0x0368B4F8 B.EQ 0x368B69C
	0x0368B4FC ADRP X9, 0xA69000
	0x0368B500 LDR X9, [X9 + 0x2A0]
	0x0368B504 MOVZ W10, 0x13
	0x0368B508 CMP W8, 0x4
	0x0368B50C LDR X9, [X9]
	0x0368B510 STP X9, X10, [X0 + 0x50]
	0x0368B514 B.LS 0x368B69C
	0x0368B518 ADRP X9, 0xAB3000
	0x0368B51C LDR X9, [X9 + 0x2C0]
	0x0368B520 MOVZ W10, 0xB
	0x0368B524 CMP W8, 0x5
	0x0368B528 LDR X9, [X9]
	0x0368B52C STP X9, X10, [X0 + 0x60]
	0x0368B530 B.EQ 0x368B69C
	0x0368B534 ADRP X9, 0xAB3000
	0x0368B538 LDR X9, [X9 + 0x370]
	0x0368B53C MOVZ W10, 0x10
	0x0368B540 CMP W8, 0x6
	0x0368B544 LDR X9, [X9]
	0x0368B548 STP X9, X10, [X0 + 0x70]
	0x0368B54C B.LS 0x368B69C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {17}
	007 Move [X0+136], W1
	008 Compare W1, 0
	009 JumpIfEqual {14}
	010 Move W8, [X0+32]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, 2
	013 Move [X0+32], W8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return 
	017 Move X0, 0xA71000
	018 Move X0, [X0+1888]
	019 Call 0x1C17D08
	020 Call 0x1C17F10
	021 Move X19, X0
	022 Move X0, 0xA73000
	023 Move X0, [X0+3784]
	024 Call 0x1C17D08
	025 Move X1, X0
	026 Move X0, X19
	027 Move X2, X31
	028 Call ArgumentOutOfRangeException..ctor, X0, X1
	029 Move X0, 0xAB4000
	030 Move X0, [X0+760]
	031 Call 0x1C17D08
	032 Move X1, X0
	033 Move X0, X19
	034 Call 0x1C17DEC

Method: System.String get__Version()

Disassembly:
	0x0368B550 ADRP X9, 0xAB3000
	0x0368B554 LDR X9, [X9 + 0x340]
	0x0368B558 MOVZ W10, 0xA
	0x0368B55C CMP W8, 0x7
	0x0368B560 LDR X9, [X9]
	0x0368B564 STP X9, X10, [X0 + 0x80]
	0x0368B568 B.EQ 0x368B69C
	0x0368B56C ADRP X9, 0xAB3000
	0x0368B570 LDR X9, [X9 + 0x2D0]
	0x0368B574 MOVZ W10, 0xF
	0x0368B578 CMP W8, 0x8
	0x0368B57C LDR X9, [X9]
	0x0368B580 STP X9, X10, [X0 + 0x90]
	0x0368B584 B.LS 0x368B69C
	0x0368B588 ADRP X9, 0xAB3000
	0x0368B58C LDR X9, [X9 + 0x2B8]
	0x0368B590 MOVZ W10, 0x7
	0x0368B594 CMP W8, 0x9
	0x0368B598 LDR X9, [X9]
	0x0368B59C STP X9, X10, [X0 + 0xA0]
	0x0368B5A0 B.EQ 0x368B69C
	0x0368B5A4 ADRP X9, 0xAB3000
	0x0368B5A8 LDR X9, [X9 + 0x358]
	0x0368B5AC MOVZ W10, 0x8
	0x0368B5B0 CMP W8, 0xA
	0x0368B5B4 LDR X9, [X9]
	0x0368B5B8 STP X9, X10, [X0 + 0xB0]
	0x0368B5BC B.LS 0x368B69C
	0x0368B5C0 ADRP X8, 0xAB3000
	0x0368B5C4 LDR X8, [X8 + 0x338]
	0x0368B5C8 ADRP X20, 0xAB3000
	0x0368B5CC MOVZ W9, 0x11
	0x0368B5D0 MOVZ W1, 0x5
	0x0368B5D4 LDR X8, [X8]
	0x0368B5D8 LDR X20, [X20 + 0x320]
	0x0368B5DC STP X8, X9, [X0 + 0xC0]
	0x0368B5E0 LDR X8, [X20]
	0x0368B5E4 LDR X8, [X8 + 0xB8]
	0x0368B5E8 STR X0, [X8]
	0x0368B5EC LDR X0, [X19]
	0x0368B5F0 BL 0x1C16D6C
	0x0368B5F4 CBZ X0, 0x368B6A0
	0x0368B5F8 LDR W8, [X0 + 0x18]
	0x0368B5FC CBZ W8, 0x368B69C
	0x0368B600 ADRP X9, 0xAB3000
	0x0368B604 LDR X9, [X9 + 0x350]
	0x0368B608 MOVZ W10, 0xE
	0x0368B60C CMP W8, 0x1
	0x0368B610 LDR X9, [X9]
	0x0368B614 STP X9, X10, [X0 + 0x20]
	0x0368B618 B.EQ 0x368B69C
	0x0368B61C ADRP X9, 0xAB3000
	0x0368B620 LDR X9, [X9 + 0x330]
	0x0368B624 MOVZ W10, 0x13
	0x0368B628 CMP W8, 0x2
	0x0368B62C LDR X9, [X9]
	0x0368B630 STP X9, X10, [X0 + 0x30]
	0x0368B634 B.LS 0x368B69C
	0x0368B638 ADRP X9, 0xAB3000
	0x0368B63C LDR X9, [X9 + 0x360]
	0x0368B640 MOVZ W10, 0xB
	0x0368B644 CMP W8, 0x3
	0x0368B648 LDR X9, [X9]
	0x0368B64C STP X9, X10, [X0 + 0x40]
	0x0368B650 B.EQ 0x368B69C
	0x0368B654 ADRP X9, 0xAB3000
	0x0368B658 LDR X9, [X9 + 0x2F0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD56000
	007 Move W8, [X20+2099]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xA6B000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move X0, 0xAB4000
	017 Move X0, [X0+768]
	018 Call 0x1C17CF4
	019 Move X0, 0xA74000
	020 Move X0, [X0+3288]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2099], W8
	024 Move X22, X19
	025 Add X22, X22, 136
	026 Move W8, [X22]
	027 Compare W8, 0
	028 JumpIfEqual {37}
	029 Move X8, 0xAB4000
	030 Move X8, [X8+768]
	031 Move W9, [X19+152]
	032 Move X20, [X8]
	033 Compare W9, 0
	034 JumpIfEqual {48}
	035 Move X8, 0xA74000
	036 Move X8, [X8+3288]
	037 Move X8, 0xA6B000
	038 Move X8, [X8+632]
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X8, [X8]
	044 Move X8, [X8+184]
	045 Move X0, [X8]
	046 Move X30, [X31+48]
	047 Return X0
	048 Move X8, 0xA6B000
	049 Move X8, [X8+632]
	050 Move X8, [X8]
	051 Move X8, [X8+184]
	052 Move X21, [X8]
	053 Move X0, X31
	054 Call NumberFormatInfo.get_InvariantInfo
	055 Move X1, X0
	056 Move X0, X22
	057 Move X2, X31
	058 Call Int32.ToString, X0, X1
	059 Move W8, [X19+152]
	060 Move X2, X0
	061 Compare W8, 0
	062 JumpIfEqual {65}
	063 Move X8, 0xA74000
	064 Move X8, [X8+3288]
	065 Move X8, 0xA6B000
	066 Move X8, [X8+632]
	067 Move X8, [X8]
	068 Move X8, [X8+184]
	069 Move X3, [X8]
	070 Move X0, X20
	071 Move X1, X21
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 Move X4, X31
	077 Move X30, [X31+48]
	078 Call String.Concat, X0, X1, X2, X3
	079 Return X0

Method: System.Collections.IComparer GetComparer()

Disassembly:
	0x0368B65C MOVZ W10, 0xF
	0x0368B660 CMP W8, 0x4
	0x0368B664 LDR X9, [X9]
	0x0368B668 STP X9, X10, [X0 + 0x50]
	0x0368B66C B.LS 0x368B69C
	0x0368B670 ADRP X8, 0xAB3000
	0x0368B674 LDR X8, [X8 + 0x348]
	0x0368B678 MOVZ W9, 0x11
	0x0368B67C LDR X8, [X8]
	0x0368B680 STP X8, X9, [X0 + 0x60]
	0x0368B684 LDR X8, [X20]
	0x0368B688 LDP X20, X19, [X31 + 0x10]
	0x0368B68C LDR X8, [X8 + 0xB8]
	0x0368B690 STR X0, [X8 + 0x8]
	0x0368B694 LDR X30, [X31], #0x20
	0x0368B698 RET
	0x0368B69C BL 0x1C16F28
	0x0368B6A0 BL 0x1C16F20
	0x0368B6A4 STR X1, [X0]
	0x0368B6A8 STR W2, [X0 + 0x8]
	0x0368B6AC RET
	0x0368B6B0 LDR W0, [X0 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD56000
	005 Move X19, 0xAB4000
	006 Move W8, [X20+2100]
	007 Move X19, [X19+672]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAB4000
	013 Move X0, [X0+672]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2100], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Boolean Equals(System.Object comparand)

Disassembly:
	0x0368B6B4 RET
	0x0368B6B8 STR X30, [X31 - 0x30]!
	0x0368B6BC STP X22, X21, [X31 + 0x10]
	0x0368B6C0 STP X20, X19, [X31 + 0x20]
	0x0368B6C4 ADRP X22, 0xD55000
	0x0368B6C8 ADRP X21, 0xAB3000
	0x0368B6CC LDRB W8, [X22 + 0x83E]
	0x0368B6D0 LDR X21, [X21 + 0x320]
	0x0368B6D4 MOV X20, X1
	0x0368B6D8 MOV X19, X0
	0x0368B6DC TBNZ X8, 0x0, 0x368B6F4
	0x0368B6E0 ADRP X0, 0xAB3000
	0x0368B6E4 LDR X0, [X0 + 0x320]
	0x0368B6E8 BL 0x1C16CF4
	0x0368B6EC MOVZ W8, 0x1
	0x0368B6F0 STRB W8, [X22 + 0x83E]
	0x0368B6F4 MOV X0, X19
	0x0368B6F8 MOV X1, X31
	0x0368B6FC BL 0x33BDD8C
	0x0368B700 LDR X0, [X21]
	0x0368B704 BL 0x1C16F10
	0x0368B708 MOV X1, X20
	0x0368B70C MOV X21, X0
	0x0368B710 BL 0x368AC80
	0x0368B714 STR X21, [X19 + 0x10]
	0x0368B718 LDP X20, X19, [X31 + 0x20]
	0x0368B71C LDP X22, X21, [X31 + 0x10]
	0x0368B720 LDR X30, [X31], #0x30
	0x0368B724 RET
	0x0368B728 SUB X31, X31, 0xB0
	0x0368B72C STP X29, X30, [X31 + 0x50]
	0x0368B730 STP X28, X27, [X31 + 0x60]
	0x0368B734 STP X26, X25, [X31 + 0x70]
	0x0368B738 STP X24, X23, [X31 + 0x80]
	0x0368B73C STP X22, X21, [X31 + 0x90]
	0x0368B740 STP X20, X19, [X31 + 0xA0]
	0x0368B744 ADRP X20, 0xD55000
	0x0368B748 LDRB W8, [X20 + 0x83F]
	0x0368B74C MOV X19, X0
	0x0368B750 TBNZ X8, 0x0, 0x368B798
	0x0368B754 ADRP X0, 0xAB3000
	0x0368B758 LDR X0, [X0 + 0x2A0]
	0x0368B75C BL 0x1C16CF4
	0x0368B760 ADRP X0, 0xA6A000
	0x0368B764 LDR X0, [X0 + 0xC48]
	0x0368B768 BL 0x1C16CF4
	0x0368B76C ADRP X0, 0xA69000
	0x0368B770 LDR X0, [X0 + 0x9F0]
	0x0368B774 BL 0x1C16CF4
	0x0368B778 ADRP X0, 0xA6A000
	0x0368B77C LDR X0, [X0 + 0x278]
	0x0368B780 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD56000
	006 Move W8, [X21+2101]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xAB4000
	014 Move X0, [X0+672]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2101], W8
	018 Compare X19, 0
	019 JumpIfEqual {53}
	020 Move X8, 0xAB4000
	021 Move X8, [X8+672]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, [X20+64]
	026 Move X1, [X19+64]
	027 Move W2, 5
	028 Move X3, X31
	029 Call String.Compare, X0, X1, X2
	030 Compare W0, 0
	031 JumpIfNotEqual {53}
	032 Move X0, [X20+128]
	033 Move X1, [X19+128]
	034 Move W2, 4
	035 Move X3, X31
	036 Call String.Compare, X0, X1, X2
	037 Compare W0, 0
	038 JumpIfNotEqual {53}
	039 Move X0, [X20+72]
	040 Move X1, [X19+72]
	041 Move W2, 4
	042 Move X3, X31
	043 Call String.Compare, X0, X1, X2
	044 Compare W0, 0
	045 JumpIfNotEqual {53}
	046 Move X0, [X20+40]
	047 Move X1, [X19+40]
	048 Move W2, 5
	049 Move X3, X31
	050 Call String.Compare, X0, X1, X2
	051 Compare W0, 0
	052 JumpIfEqual {59}
	053 Move W0, W31
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return X0
	059 Move W8, [X20+136]
	060 Move W9, [X19+136]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 NotImplemented "Instruction CSET not yet implemented."

Method: System.Int32 GetHashCode()

Disassembly:
	0x0368B784 ADRP X0, 0xA6A000
	0x0368B788 LDR X0, [X0 + 0xA28]
	0x0368B78C BL 0x1C16CF4
	0x0368B790 MOVZ W8, 0x1
	0x0368B794 STRB W8, [X20 + 0x83F]
	0x0368B798 STP X31, X31, [X31 + 0x8]
	0x0368B79C ADRP X25, 0xAB3000
	0x0368B7A0 LDR X25, [X25 + 0x2A0]
	0x0368B7A4 STP X31, X31, [X31 + 0x40]
	0x0368B7A8 STR W31, [X31 + 0x3C]
	0x0368B7AC STR X31, [X31 + 0x30]
	0x0368B7B0 STR W31, [X31 + 0x2C]
	0x0368B7B4 STR W31, [X31 + 0x20]
	0x0368B7B8 LDR X0, [X19 + 0x10]
	0x0368B7BC ADRP X29, 0xFFFFFFFFFD50C000
	0x0368B7C0 ADRP X27, 0xFFFFFFFFFD50C000
	0x0368B7C4 MOV W28, W31
	0x0368B7C8 MOV W22, W31
	0x0368B7CC MOV W26, W31
	0x0368B7D0 MOV W24, W31
	0x0368B7D4 MOV W20, W31
	0x0368B7D8 MOV X21, X31
	0x0368B7DC ADD X29, X29, 0x7A5
	0x0368B7E0 ADD X27, X27, 0x7AD
	0x0368B7E4 CBZ X0, 0x368BC68
	0x0368B7E8 CMP X21, 0x0
	0x0368B7EC CSET W1, EQ
	0x0368B7F0 MOVZ W2, 0x1
	0x0368B7F4 BL 0x368B048
	0x0368B7F8 CBZ X21, 0x368B88C
	0x0368B7FC CMP W0, 0x2
	0x0368B800 B.EQ 0x368B8F8
	0x0368B804 CMP W0, 0x1
	0x0368B808 B.NE 0x368BBA8
	0x0368B80C LDR X8, [X19 + 0x10]
	0x0368B810 CBZ X8, 0x368BC68
	0x0368B814 LDR W9, [X8 + 0x30]
	0x0368B818 SUB W9, W9, 0x7
	0x0368B81C CMP W9, 0xC
	0x0368B820 B.HI 0x368BBA8
	0x0368B824 ADR X10, 0x10
	0x0368B828 LDRB W11, [X27, X9, LSL]
	0x0368B82C ADD X10, X10, X11, 0x2, LSL
	0x0368B830 BR X10
	0x0368B834 LDR W9, [X31 + 0x10]
	0x0368B838 TBNZ X9, 0x0, 0x368B880
	0x0368B83C ADRP X9, 0xD55000
	0x0368B840 LDRB W9, [X9 + 0x828]
	0x0368B844 LDR X23, [X8 + 0x40]
	0x0368B848 TBNZ X9, 0x0, 0x368B864
	0x0368B84C ADRP X0, 0xA6A000
	0x0368B850 LDR X0, [X0 + 0x278]
	0x0368B854 BL 0x1C16CF4
	0x0368B858 MOVZ W8, 0x1
	0x0368B85C ADRP X9, 0xD55000
	0x0368B860 STRB W8, [X9 + 0x828]
	0x0368B864 CBNZ X23, 0x368B87C
	0x0368B868 ADRP X8, 0xA6A000
	0x0368B86C LDR X8, [X8 + 0x278]
	0x0368B870 LDR X8, [X8]
	0x0368B874 LDR X8, [X8 + 0xB8]
	0x0368B878 LDR X23, [X8]
	0x0368B87C STR X23, [X21 + 0x10]
	0x0368B880 MOVZ W8, 0x1
	0x0368B884 STR W8, [X31 + 0x10]
	0x0368B888 B 0x368BBA8
	0x0368B88C SUB W8, W0, 0x1
	0x0368B890 CMP W8, 0x1
	0x0368B894 B.HI 0x368B934
	0x0368B898 LDR X0, [X25]
	0x0368B89C BL 0x1C16F10
	0x0368B8A0 MOV X21, X0
	0x0368B8A4 BL 0x3688EFC
	0x0368B8A8 LDR X8, [X19 + 0x10]
	0x0368B8AC CBZ X8, 0x368BC68
	0x0368B8B0 CBZ X21, 0x368BC68
	0x0368B8B4 LDR X1, [X8 + 0x20]
	0x0368B8B8 MOV X0, X21
	0x0368B8BC BL 0x368927C
	0x0368B8C0 TBNZ X0, 0x0, 0x368B8E0
	0x0368B8C4 ADRP X8, 0xA6A000
	0x0368B8C8 LDR X8, [X8 + 0x278]
	0x0368B8CC MOV X0, X21
	0x0368B8D0 LDR X8, [X8]
	0x0368B8D4 LDR X8, [X8 + 0xB8]
	0x0368B8D8 LDR X1, [X8]
	0x0368B8DC BL 0x368927C
	0x0368B8E0 LDR X8, [X19 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD56000
	007 Move X21, 0xA69000
	008 Move W8, [X20+2102]
	009 Move X21, [X21+2760]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0xA69000
	016 Move X0, [X0+2760]
	017 Call 0x1C17CF4
	018 Move X0, 0xA96000
	019 Move X0, [X0+4024]
	020 Call 0x1C17CF4
	021 Move X0, 0xA72000
	022 Move X0, [X0+2120]
	023 Call 0x1C17CF4
	024 Move X0, 0xA91000
	025 Move X0, [X0+2224]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2102], W8
	029 Move X0, [X21]
	030 Move W1, 9
	031 Call 0x1C17D6C
	032 Compare X0, 0
	033 JumpIfEqual {91}
	034 Move W8, [X0+24]
	035 Move X20, X0
	036 Compare W8, 0
	037 JumpIfEqual {90}
	038 Move X9, [X19+64]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X20+32], X9
	041 Move X9, 0xA96000
	042 Move X9, [X9+4024]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X9, [X9]
	045 Move [X20+40], X9
	046 Move X9, [X19+128]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move [X20+48], X9
	049 Move X9, 0xA72000
	050 Move X9, [X9+2120]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X9, [X9]
	053 Move [X20+56], X9
	054 Move X9, [X19+72]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move [X20+64], X9
	057 Move X9, 0xA91000
	058 Move X9, [X9+2224]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X10, [X9]
	061 Move [X20+72], X10
	062 Move X10, [X19+40]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X20+80], X10
	065 Move X8, [X9]
	066 Add X0, X31, 12
	067 Move X1, X31
	068 Move [X20+88], X8
	069 Move W8, [X19+136]
	070 Move [X31+12], W8
	071 Call Int32.ToString, X0
	072 Move W8, [X20+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move [X20+96], X0
	075 Move X0, X20
	076 Move X1, X31
	077 Call String.Concat, X0
	078 Compare X0, 0
	079 JumpIfEqual {91}
	080 Move X8, [X0]
	081 Move X9, [X8+344]
	082 Move X1, [X8+352]
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X30, [X31+16]
	087 Move X21, [X31+24]
	088 Add X31, X31, 48
	089 Return X0
	090 Call 0x1C17F28
	091 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x0368B8E4 CBZ X8, 0x368BC68
	0x0368B8E8 LDR X1, [X8 + 0x40]
	0x0368B8EC MOV X0, X21
	0x0368B8F0 BL 0x368A448
	0x0368B8F4 B 0x368BBA8
	0x0368B8F8 LDR X8, [X19 + 0x10]
	0x0368B8FC CBZ X8, 0x368BC68
	0x0368B900 LDR W8, [X8 + 0x30]
	0x0368B904 SUB W8, W8, 0xA
	0x0368B908 CMP W8, 0x7
	0x0368B90C B.HI 0x368BBA8
	0x0368B910 ADR X9, 0x10
	0x0368B914 LDRB W10, [X29, X8, LSL]
	0x0368B918 ADD X9, X9, X10, 0x2, LSL
	0x0368B91C BR X9
	0x0368B920 MOVZ W8, 0x1
	0x0368B924 TBNZ X28, 0x0, 0x368B92C
	0x0368B928 STRB W8, [X21 + 0x24]
	0x0368B92C MOVZ W28, 0x1
	0x0368B930 B 0x368BBA8
	0x0368B934 MOV X21, X31
	0x0368B938 B 0x368BBA8
	0x0368B93C MOVZ W8, 0x1
	0x0368B940 TBNZ X22, 0x0, 0x368B948
	0x0368B944 STRB W8, [X21 + 0x70]
	0x0368B948 MOVZ W22, 0x1
	0x0368B94C B 0x368BBA8
	0x0368B950 TBNZ X26, 0x0, 0x368BA08
	0x0368B954 ADRP X8, 0xA6A000
	0x0368B958 LDR X8, [X8 + 0x278]
	0x0368B95C MOV X0, X21
	0x0368B960 LDR X8, [X8]
	0x0368B964 LDR X8, [X8 + 0xB8]
	0x0368B968 LDR X1, [X8]
	0x0368B96C BL 0x368A02C
	0x0368B970 B 0x368BA08
	0x0368B974 MOVZ W8, 0x1
	0x0368B978 STRB W8, [X21 + 0x71]
	0x0368B97C B 0x368BBA8
	0x0368B980 LDR W9, [X31 + 0x14]
	0x0368B984 TBNZ X9, 0x0, 0x368B994
	0x0368B988 LDR X1, [X8 + 0x40]
	0x0368B98C MOV X0, X21
	0x0368B990 BL 0x3689384
	0x0368B994 MOVZ W8, 0x1
	0x0368B998 STR W8, [X31 + 0x14]
	0x0368B99C B 0x368BBA8
	0x0368B9A0 TBNZ X20, 0x0, 0x368B9F0
	0x0368B9A4 LDR X0, [X8 + 0x40]
	0x0368B9A8 BL 0x3689F68
	0x0368B9AC ADRP X8, 0xA6A000
	0x0368B9B0 LDR X8, [X8 + 0xA28]
	0x0368B9B4 MOV X23, X0
	0x0368B9B8 LDR X8, [X8]
	0x0368B9BC LDR W9, [X8 + 0xE0]
	0x0368B9C0 CBNZ W9, 0x368B9CC
	0x0368B9C4 MOV X0, X8
	0x0368B9C8 BL 0x1C16DFC
	0x0368B9CC ADD X2, X31, 0x48
	0x0368B9D0 MOVZ W1, 0x1
	0x0368B9D4 MOV X0, X23
	0x0368B9D8 MOV X3, X31
	0x0368B9DC MOVZ W20, 0x1
	0x0368B9E0 BL 0x361E23C
	0x0368B9E4 TBZ X0, 0x0, 0x368BBA8
	0x0368B9E8 LDR X8, [X31 + 0x48]
	0x0368B9EC STR X8, [X21 + 0x18]
	0x0368B9F0 MOVZ W20, 0x1
	0x0368B9F4 B 0x368BBA8
	0x0368B9F8 TBNZ X26, 0x0, 0x368BA08
	0x0368B9FC LDR X1, [X8 + 0x40]
	0x0368BA00 MOV X0, X21
	0x0368BA04 BL 0x368A02C
	0x0368BA08 MOVZ W26, 0x1
	0x0368BA0C B 0x368BBA8
	0x0368BA10 LDR W9, [X31 + 0xC]
	0x0368BA14 TBNZ X9, 0x0, 0x368BBA0
	0x0368BA18 LDR X0, [X8 + 0x40]
	0x0368BA1C BL 0x3689F68
	0x0368BA20 ADD X1, X31, 0x2C
	0x0368BA24 MOV X2, X31
	0x0368BA28 BL 0x337BDF4
	0x0368BA2C TBZ X0, 0x0, 0x368BB84
	0x0368BA30 LDR W1, [X31 + 0x2C]
	0x0368BA34 MOV X0, X21
	0x0368BA38 BL 0x368A4DC
	0x0368BA3C LDR X8, [X19 + 0x10]
	0x0368BA40 CBZ X8, 0x368BC68
	0x0368BA44 LDRB W8, [X8 + 0x28]
	0x0368BA48 STRB W8, [X21 + 0x98]
	0x0368BA4C B 0x368BBA0
	0x0368BA50 LDR W9, [X31 + 0x8]
	0x0368BA54 TBNZ X9, 0x0, 0x368BA7C
	0x0368BA58 LDR X0, [X8 + 0x40]
	0x0368BA5C BL 0x3689F68
	0x0368BA60 MOV X1, X0
	0x0368BA64 MOV X0, X21
	0x0368BA68 BL 0x3689064
	0x0368BA6C LDR X8, [X19 + 0x10]
	0x0368BA70 CBZ X8, 0x368BC68
	0x0368BA74 LDRB W8, [X8 + 0x28]
	0x0368BA78 STRB W8, [X21 + 0x99]
	0x0368BA7C MOVZ W8, 0x1
	0x0368BA80 STR W8, [X31 + 0x8]
	0x0368BA84 B 0x368BBA8
	0x0368BA88 TBNZ X24, 0x0, 0x368BB7C
	0x0368BA8C LDR X0, [X8 + 0x40]
	0x0368BA90 BL 0x3689F68
	0x0368BA94 ADRP X8, 0xA6A000
	0x0368BA98 LDR X8, [X8 + 0xC48]
	0x0368BA9C MOV X23, X0
	0x0368BAA0 LDR X8, [X8]
	0x0368BAA4 LDR W9, [X8 + 0xE0]
	0x0368BAA8 CBNZ W9, 0x368BAB4
	0x0368BAAC MOV X0, X8
	0x0368BAB0 BL 0x1C16DFC
	0x0368BAB4 MOV X0, X31
	0x0368BAB8 BL 0x3338524
	0x0368BABC ADRP X8, 0xA69000
	0x0368BAC0 LDR X8, [X8 + 0x9F0]
	0x0368BAC4 MOV X24, X0
	0x0368BAC8 LDR X8, [X8]
	0x0368BACC LDR W9, [X8 + 0xE0]
	0x0368BAD0 CBNZ W9, 0x368BADC
	0x0368BAD4 MOV X0, X8
	0x0368BAD8 BL 0x1C16DFC
	0x0368BADC ADD X3, X31, 0x40
	0x0368BAE0 MOVZ W2, 0x7
	0x0368BAE4 MOV X0, X23
	0x0368BAE8 MOV X1, X24
	0x0368BAEC MOV X4, X31
	0x0368BAF0 BL 0x33627B0
	0x0368BAF4 TBZ X0, 0x0, 0x368BB60
	0x0368BAF8 LDR X8, [X31 + 0x40]
	0x0368BAFC STR X8, [X21 + 0x38]
	0x0368BB00 B 0x368BB7C
	0x0368BB04 TBNZ X24, 0x0, 0x368BB7C
	0x0368BB08 LDR X0, [X8 + 0x40]
	0x0368BB0C BL 0x3689F68
	0x0368BB10 ADD X1, X31, 0x3C
	0x0368BB14 MOV X2, X31
	0x0368BB18 BL 0x337BDF4
	0x0368BB1C TBZ X0, 0x0, 0x368BB60
	0x0368BB20 ADRP X8, 0xA69000
	0x0368BB24 LDR X8, [X8 + 0x9F0]
	0x0368BB28 LDR X0, [X8]
	0x0368BB2C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0xD56000
	010 Move X19, 0xA69000
	011 Move W8, [X20+2103]
	012 Move X19, [X19+2760]
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0xA69000
	019 Move X0, [X0+2760]
	020 Call 0x1C17CF4
	021 Move X0, 0xA6B000
	022 Move X0, [X0+632]
	023 Call 0x1C17CF4
	024 Move X0, 0xA96000
	025 Move X0, [X0+4024]
	026 Call 0x1C17CF4
	027 Move X0, 0xA91000
	028 Move X0, [X0+2224]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2103], W8
	032 Move X0, X22
	033 Call Cookie.get__Domain, X0
	034 Move X21, X0
	035 Move X0, X22
	036 Call Cookie.get__Path, X0
	037 Move X23, X0
	038 Move X0, X22
	039 Call Cookie.get__Port, X0
	040 Move X20, X0
	041 Move X0, X22
	042 Call Cookie.get__Version, X0
	043 Move X8, [X19]
	044 Move X24, X0
	045 Move W1, 7
	046 Move X0, X8
	047 Call 0x1C17D6C
	048 Compare X24, 0
	049 JumpIfEqual {162}
	050 Move X25, 0xA91000
	051 Move W8, [X24+16]
	052 Move X25, [X25+2224]
	053 Move X19, X0
	054 Compare W8, 0
	055 JumpIfEqual {62}
	056 Move X1, [X25]
	057 Move X0, X24
	058 Move X2, X31
	059 Call String.Concat, X0, X1
	060 Compare X19, 0
	061 JumpIfNotEqual {69}
	062 Move X8, 0xA6B000
	063 Move X8, [X8+632]
	064 Move X8, [X8]
	065 Move X8, [X8+184]
	066 Move X0, [X8]
	067 Compare X19, 0
	068 JumpIfEqual {162}
	069 Move W8, [X19+24]
	070 Compare W8, 0
	071 JumpIfEqual {161}
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move [X19+32], X0
	074 Move X9, [X22+64]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move [X19+40], X9
	077 Move X24, 0xA96000
	078 Move X24, [X24+4024]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X9, [X24]
	081 Move [X19+48], X9
	082 Move X9, [X22+128]
	083 Move [X19+56], X9
	084 Compare X23, 0
	085 JumpIfEqual {162}
	086 Move W9, [X23+16]
	087 Compare W9, 0
	088 JumpIfEqual {94}
	089 Move X0, [X25]
	090 Move X1, X23
	091 Move X2, X31
	092 Call String.Concat, X0, X1
	093 Move W8, [X19+24]
	094 Move X9, 0xA6B000
	095 Move X9, [X9+632]
	096 Move X9, [X9]
	097 Move X9, [X9+184]
	098 Move X0, [X9]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move [X19+64], X0
	101 Compare X21, 0
	102 JumpIfEqual {162}
	103 Move W9, [X21+16]
	104 Compare W9, 0
	105 JumpIfEqual {111}
	106 Move X0, [X25]
	107 Move X1, X21
	108 Move X2, X31
	109 Call String.Concat, X0, X1
	110 Move W8, [X19+24]
	111 Move X9, 0xA6B000
	112 Move X9, [X9+632]
	113 Move X9, [X9]
	114 Move X9, [X9+184]
	115 Move X0, [X9]
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move [X19+72], X0
	118 Compare X20, 0
	119 JumpIfEqual {162}
	120 Move W9, [X20+16]
	121 Compare W9, 0
	122 JumpIfEqual {128}
	123 Move X0, [X25]
	124 Move X1, X20
	125 Move X2, X31
	126 Call String.Concat, X0, X1
	127 Move W8, [X19+24]
	128 Move X9, 0xA6B000
	129 Move X9, [X9+632]
	130 Move X9, [X9]
	131 Move X9, [X9+184]
	132 Move X0, [X9]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move [X19+80], X0
	135 Move X0, X19
	136 Move X1, X31
	137 Call String.Concat, X0
	138 Move X1, [X24]
	139 Move X2, X31
	140 Move X19, X0
	141 Call String.op_Equality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {151}
	146 Move X8, 0xA6B000
	147 Move X8, [X8+632]
	148 Move X8, [X8]
	149 Move X8, [X8+184]
	150 Move X19, [X8]
	151 Move X0, X19
	152 Move X20, [X31+48]
	153 Move X19, [X31+56]
	154 Move X22, [X31+32]
	155 Move X21, [X31+40]
	156 Move X24, [X31+16]
	157 Move X23, [X31+24]
	158 Move X30, [X31+64]
	159 Move X25, [X31+72]
	160 Return X0
	161 Call 0x1C17F28
	162 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x0368BB30 CBNZ W8, 0x368BB38
	0x0368BB34 BL 0x1C16DFC
	0x0368BB38 MOV X0, X31
	0x0368BB3C BL 0x3361584
	0x0368BB40 LDR W8, [X31 + 0x3C]
	0x0368BB44 STR X0, [X31 + 0x30]
	0x0368BB48 ADD X0, X31, 0x30
	0x0368BB4C MOV X1, X31
	0x0368BB50 SCVTF D0, W8
	0x0368BB54 BL 0x336059C
	0x0368BB58 STR X0, [X21 + 0x38]
	0x0368BB5C B 0x368BB7C
	0x0368BB60 ADRP X8, 0xA6A000
	0x0368BB64 LDR X8, [X8 + 0x278]
	0x0368BB68 MOV X0, X21
	0x0368BB6C LDR X8, [X8]
	0x0368BB70 LDR X8, [X8 + 0xB8]
	0x0368BB74 LDR X1, [X8]
	0x0368BB78 BL 0x368927C
	0x0368BB7C MOVZ W24, 0x1
	0x0368BB80 B 0x368BBA8
	0x0368BB84 ADRP X8, 0xA6A000
	0x0368BB88 LDR X8, [X8 + 0x278]
	0x0368BB8C MOV X0, X21
	0x0368BB90 LDR X8, [X8]
	0x0368BB94 LDR X8, [X8 + 0xB8]
	0x0368BB98 LDR X1, [X8]
	0x0368BB9C BL 0x368927C
	0x0368BBA0 MOVZ W8, 0x1
	0x0368BBA4 STR W8, [X31 + 0xC]
	0x0368BBA8 LDR X0, [X19 + 0x10]
	0x0368BBAC CBZ X0, 0x368BC68
	0x0368BBB0 LDP W8, W9, [X0 + 0x14]
	0x0368BBB4 CMP W8, W9
	0x0368BBB8 B.GE 0x368BC44
	0x0368BBBC LDRB W8, [X0 + 0x10]
	0x0368BBC0 CBZ W8, 0x368B7E4
	0x0368BBC4 B 0x368BC44
	0x0368BBC8 CMP W1, 0x1
	0x0368BBCC MOV X23, X0
	0x0368BBD0 B.NE 0x368BC98
	0x0368BBD4 MOV X0, X23
	0x0368BBD8 BL 0x3EB1AD0
	0x0368BBDC MOV X23, X0
	0x0368BBE0 ADRP X0, 0xA6E000
	0x0368BBE4 LDR X0, [X0 + 0xCC0]
	0x0368BBE8 BL 0x1C16D08
	0x0368BBEC LDR X8, [X23]
	0x0368BBF0 LDR X1, [X8]
	0x0368BBF4 BL 0x1C17270
	0x0368BBF8 TBZ X0, 0x0, 0x368BC6C
	0x0368BBFC LDR X8, [X23]
	0x0368BC00 LDRSW X9, [X31 + 0x20]
	0x0368BC04 ADD X10, X31, 0x18
	0x0368BC08 STR X8, [X10, X9, LSL #3]
	0x0368BC0C ADD W8, W9, 0x1
	0x0368BC10 STR W8, [X31 + 0x20]
	0x0368BC14 BL 0x3EB1AE0
	0x0368BC18 ADRP X0, 0xA6A000
	0x0368BC1C LDR X0, [X0 + 0x278]
	0x0368BC20 BL 0x1C16D08
	0x0368BC24 LDR X8, [X0 + 0xB8]
	0x0368BC28 MOV X0, X21
	0x0368BC2C LDR X1, [X8]
	0x0368BC30 BL 0x368927C
	0x0368BC34 LDR W8, [X31 + 0x20]
	0x0368BC38 SUB W8, W8, 0x1
	0x0368BC3C STR W8, [X31 + 0x20]
	0x0368BC40 B 0x368BA08
	0x0368BC44 MOV X0, X21
	0x0368BC48 LDP X20, X19, [X31 + 0xA0]
	0x0368BC4C LDP X22, X21, [X31 + 0x90]
	0x0368BC50 LDP X24, X23, [X31 + 0x80]
	0x0368BC54 LDP X26, X25, [X31 + 0x70]
	0x0368BC58 LDP X28, X27, [X31 + 0x60]
	0x0368BC5C LDP X29, X30, [X31 + 0x50]
	0x0368BC60 ADD X31, X31, 0xB0
	0x0368BC64 RET
	0x0368BC68 BL 0x1C16F20
	0x0368BC6C MOVZ W0, 0x8
	0x0368BC70 BL 0x3EB1AF0
	0x0368BC74 LDR X8, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD56000
	008 Move X21, 0xA72000
	009 Move X19, 0xAB4000
	010 Move X20, 0xAB4000
	011 Move X22, 0xAB4000
	012 Move W8, [X23+2104]
	013 Move X21, [X21+2264]
	014 Move X19, [X19+776]
	015 Move X20, [X20+672]
	016 Move X22, [X22+784]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0xA72000
	022 Move X0, [X0+2264]
	023 Call 0x1C17CF4
	024 Move X0, 0xAB4000
	025 Move X0, [X0+792]
	026 Call 0x1C17CF4
	027 Move X0, 0xAB4000
	028 Move X0, [X0+672]
	029 Call 0x1C17CF4
	030 Move X0, 0xAB4000
	031 Move X0, [X0+776]
	032 Call 0x1C17CF4
	033 Move X0, 0xAB4000
	034 Move X0, [X0+784]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X23+2104], W8
	038 Move X0, [X21]
	039 Move W1, 3
	040 Call 0x1C17D6C
	041 Move X1, [X19]
	042 Move X2, X31
	043 Move X19, X0
	044 Call RuntimeHelpers.InitializeArray, X0, X1
	045 Move X8, [X20]
	046 Move W1, 7
	047 Move X8, [X8+184]
	048 Move [X8], X19
	049 Move X0, [X21]
	050 Call 0x1C17D6C
	051 Move X1, [X22]
	052 Move X2, X31
	053 Move X19, X0
	054 Call RuntimeHelpers.InitializeArray, X0, X1
	055 Move X8, [X20]
	056 Move W1, 2
	057 Move X8, [X8+184]
	058 Move [X8+8], X19
	059 Move X0, [X21]
	060 Call 0x1C17D6C
	061 Compare X0, 0
	062 JumpIfEqual {92}
	063 Move W8, [X0+24]
	064 Compare W8, 0
	065 JumpIfEqual {91}
	066 Move W9, 59
	067 NotImplemented "Instruction CMP not yet implemented."
	068 NotImplemented "Instruction STRH not yet implemented."
	069 Move W8, 44
	070 NotImplemented "Instruction STRH not yet implemented."
	071 Move X8, [X20]
	072 Move X9, 0xAB4000
	073 Move X8, [X8+184]
	074 Move X9, [X9+792]
	075 Move [X8+16], X0
	076 Move X0, [X9]
	077 Call 0x1C17F10
	078 Move X1, X31
	079 Move X19, X0
	080 Call Object..ctor, X0
	081 Move X8, [X20]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X8, [X8+184]
	085 Move [X8+24], X19
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X30, [X31+48]
	089 Move X23, [X31+56]
	090 Return 
	091 Call 0x1C17F28
	092 Call 0x1C17F20

