Type: System.Net.ContextAwareResult

Method: System.Void SafeCaptureIdentity()

Disassembly:
	0x0366AC24 ADRP X0, 0xAD3000

ISIL:
	001 Return 

Method: System.Void CleanupInternal()

Disassembly:
	0x0366AC28 LDR X0, [X0 + 0x660]

ISIL:
	001 Return 

Method: System.Void .ctor(System.Object myObject, System.Object myState, System.AsyncCallback myCallBack)

Disassembly:
	0x0366AC2C BL 0x1C16CF4
	0x0366AC30 ADRP X0, 0xAD3000

ISIL:
	001 Move X4, X31
	002 Call LazyAsyncResult..ctor, X0, X1, X2, X3
	003 Return 

Method: System.Void .ctor(System.Boolean captureIdentity, System.Boolean forceCaptureContext, System.Object myObject, System.Object myState, System.AsyncCallback myCallBack)

Disassembly:
	0x0366AC34 LDR X0, [X0 + 0x668]
	0x0366AC38 BL 0x1C16CF4
	0x0366AC3C ADRP X0, 0xAD3000
	0x0366AC40 LDR X0, [X0 + 0x670]
	0x0366AC44 BL 0x1C16CF4
	0x0366AC48 ADRP X0, 0xAD3000
	0x0366AC4C LDR X0, [X0 + 0x678]
	0x0366AC50 BL 0x1C16CF4
	0x0366AC54 ADRP X0, 0xAD3000
	0x0366AC58 LDR X0, [X0 + 0x680]
	0x0366AC5C BL 0x1C16CF4
	0x0366AC60 ADRP X0, 0xAD3000
	0x0366AC64 LDR X0, [X0 + 0x688]
	0x0366AC68 BL 0x1C16CF4
	0x0366AC6C ADRP X0, 0xAD3000
	0x0366AC70 LDR X0, [X0 + 0x690]
	0x0366AC74 BL 0x1C16CF4
	0x0366AC78 ADRP X0, 0xAD3000
	0x0366AC7C LDR X0, [X0 + 0x698]
	0x0366AC80 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W21, W2
	006 Move W20, W1
	007 Move X1, X3
	008 Move X2, X4
	009 Move X3, X5
	010 Move X4, X31
	011 Move X19, X0
	012 Call LazyAsyncResult..ctor, X0, X1, X2, X3
	013 Move TEMP, X21
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {19}
	017 Move W8, 2
	018 Move [X19+80], W8
	019 Move TEMP, X20
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {26}
	023 Move W8, [X19+80]
	024 Or W8, W8, 1
	025 Move [X19+80], W8
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 

Method: System.Void .ctor(System.Boolean captureIdentity, System.Boolean forceCaptureContext, System.Boolean threadSafeContextCopy, System.Object myObject, System.Object myState, System.AsyncCallback myCallBack)

Disassembly:
	0x0366AC84 ADRP X0, 0xAD3000
	0x0366AC88 LDR X0, [X0 + 0x6A0]
	0x0366AC8C BL 0x1C16CF4
	0x0366AC90 ADRP X0, 0xAD3000
	0x0366AC94 LDR X0, [X0 + 0x6A8]
	0x0366AC98 BL 0x1C16CF4
	0x0366AC9C ADRP X0, 0xAD3000
	0x0366ACA0 LDR X0, [X0 + 0x6B0]
	0x0366ACA4 BL 0x1C16CF4
	0x0366ACA8 ADRP X0, 0xAD3000
	0x0366ACAC LDR X0, [X0 + 0x6B8]
	0x0366ACB0 BL 0x1C16CF4
	0x0366ACB4 ADRP X0, 0xAD3000
	0x0366ACB8 LDR X0, [X0 + 0x6C0]
	0x0366ACBC BL 0x1C16CF4
	0x0366ACC0 ADRP X0, 0xAD3000
	0x0366ACC4 LDR X0, [X0 + 0x6C8]
	0x0366ACC8 BL 0x1C16CF4
	0x0366ACCC ADRP X0, 0xAD3000
	0x0366ACD0 LDR X0, [X0 + 0x6D0]
	0x0366ACD4 BL 0x1C16CF4
	0x0366ACD8 ADRP X0, 0xAD3000
	0x0366ACDC LDR X0, [X0 + 0x6D8]
	0x0366ACE0 BL 0x1C16CF4
	0x0366ACE4 MOVZ W8, 0x1
	0x0366ACE8 STRB W8, [X20 + 0x737]
	0x0366ACEC CMP W19, 0xE2
	0x0366ACF0 B.LE 0x366AD28
	0x0366ACF4 SUB W8, W19, 0x190
	0x0366ACF8 CMP W8, 0x33

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W20, W3
	007 Move W22, W2
	008 Move W21, W1
	009 Move X1, X4
	010 Move X2, X5
	011 Move X3, X6
	012 Move X4, X31
	013 Move X19, X0
	014 Call LazyAsyncResult..ctor, X0, X1, X2, X3
	015 Move TEMP, X22
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move TEMP, X21
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {42}
	023 Move TEMP, X20
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {30}
	027 Move W8, [X19+80]
	028 Or W8, W8, 4
	029 Move [X19+80], W8
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return 
	036 Move W8, 2
	037 Move [X19+80], W8
	038 Move TEMP, X21
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {23}
	042 Move W8, [X19+80]
	043 Or W8, W8, 1
	044 Move [X19+80], W8
	045 Move TEMP, X20
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {27}

Method: System.Object StartPostingAsyncOp()

Disassembly:
	0x0366ACFC MOV X0, X31
	0x0366AD00 B.HI 0x366AD58

ISIL:
	001 Move W1, 1

Method: System.Object StartPostingAsyncOp(System.Boolean lockCapture)

Disassembly:
	0x0366AD04 ADRP X9, 0xFFFFFFFFFD52D000
	0x0366AD08 ADD X9, X9, 0x750
	0x0366AD0C ADR X10, 0x10
	0x0366AD10 LDRB W11, [X9, X8, LSL]
	0x0366AD14 ADD X10, X10, X11, 0x2, LSL
	0x0366AD18 BR X10
	0x0366AD1C ADRP X8, 0xAD3000
	0x0366AD20 LDR X8, [X8 + 0x690]
	0x0366AD24 B 0x366B084
	0x0366AD28 SUB W8, W19, 0xC8
	0x0366AD2C CMP W8, 0x8
	0x0366AD30 B.HI 0x366AD88
	0x0366AD34 ADRP X9, 0xFFFFFFFFFD52D000
	0x0366AD38 ADD X9, X9, 0x73E
	0x0366AD3C ADR X10, 0x10
	0x0366AD40 LDRB W11, [X9, X8, LSL]
	0x0366AD44 ADD X10, X10, X11, 0x2, LSL
	0x0366AD48 BR X10
	0x0366AD4C ADRP X8, 0xAD3000
	0x0366AD50 LDR X8, [X8 + 0x540]
	0x0366AD54 B 0x366B084
	0x0366AD58 SUB W8, W19, 0x1F4
	0x0366AD5C CMP W8, 0xB
	0x0366AD60 B.HI 0x366ADB8
	0x0366AD64 ADRP X9, 0xFFFFFFFFFD52D000
	0x0366AD68 ADD X9, X9, 0x784
	0x0366AD6C ADR X10, 0x10
	0x0366AD70 LDRB W11, [X9, X8, LSL]
	0x0366AD74 ADD X10, X10, X11, 0x2, LSL
	0x0366AD78 BR X10
	0x0366AD7C ADRP X8, 0xAD3000
	0x0366AD80 LDR X8, [X8 + 0x588]
	0x0366AD84 B 0x366B084
	0x0366AD88 SUB W8, W19, 0x64
	0x0366AD8C CMP W8, 0x3
	0x0366AD90 B.HI 0x366AE48
	0x0366AD94 ADRP X9, 0xFFFFFFFFFD52D000
	0x0366AD98 ADD X9, X9, 0x73A
	0x0366AD9C ADR X10, 0x10
	0x0366ADA0 LDRB W11, [X9, X8, LSL]
	0x0366ADA4 ADD X10, X10, X11, 0x2, LSL
	0x0366ADA8 BR X10
	0x0366ADAC ADRP X8, 0xAD3000
	0x0366ADB0 LDR X8, [X8 + 0x6A8]
	0x0366ADB4 B 0x366B084
	0x0366ADB8 SUB W8, W19, 0x12C
	0x0366ADBC CMP W8, 0x8
	0x0366ADC0 B.HI 0x366B088
	0x0366ADC4 ADRP X9, 0xFFFFFFFFFD52D000
	0x0366ADC8 ADD X9, X9, 0x747
	0x0366ADCC ADR X10, 0x10
	0x0366ADD0 LDRB W11, [X9, X8, LSL]
	0x0366ADD4 ADD X10, X10, X11, 0x2, LSL
	0x0366ADD8 BR X10
	0x0366ADDC ADRP X8, 0xAD3000
	0x0366ADE0 LDR X8, [X8 + 0x6B8]
	0x0366ADE4 B 0x366B084
	0x0366ADE8 ADRP X8, 0xAD3000
	0x0366ADEC LDR X8, [X8 + 0x5F8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD77000
	006 Move W8, [X21+1840]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xAD4000
	014 Move X0, [X0+1128]
	015 Call 0x1C17CF4
	016 Move X0, 0xA90000
	017 Move X0, [X0+3264]
	018 Call 0x1C17CF4
	019 Move X0, 0xAD4000
	020 Move X0, [X0+1136]
	021 Call 0x1C17CF4
	022 Move X0, 0xAD4000
	023 Move X0, [X0+1144]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1840], W8
	027 Move X0, X19
	028 Move X1, X31
	029 Call LazyAsyncResult.get_InternalPeekCompleted, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {49}
	034 Move X8, 0xAD4000
	035 Move X8, [X8+1128]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X8, 0xAD4000
	042 Move X9, 0xAD4000
	043 Move X8, [X8+1144]
	044 Move X9, [X9+1136]
	045 Move X0, X19
	046 Move X1, [X8]
	047 Move X2, [X9]
	048 Call NetEventSource.Fail, X0, X1, X2
	049 Move TEMP, X20
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {60}
	053 Move X8, 0xA90000
	054 Move X8, [X8+3264]
	055 Move X0, [X8]
	056 Call 0x1C17F10
	057 Move X1, X31
	058 Move X20, X0
	059 Call Object..ctor, X0
	060 Move X20, X31
	061 Compare X19, 0
	062 JumpIfEqual {73}
	063 Move W8, [X19+80]
	064 Move [X19+72], X20
	065 Move X0, X20
	066 Or W8, W8, 8
	067 Move [X19+80], W8
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0
	073 Call 0x1C17F20

Method: System.Boolean FinishPostingAsyncOp()

Disassembly:
	0x0366AEC0 ADRP X8, 0xAD3000
	0x0366AEC4 LDR X8, [X8 + 0x5D8]
	0x0366AEC8 B 0x366B084
	0x0366AECC ADRP X8, 0xAD3000
	0x0366AED0 LDR X8, [X8 + 0x5C8]
	0x0366AED4 B 0x366B084
	0x0366AED8 ADRP X8, 0xAD3000
	0x0366AEDC LDR X8, [X8 + 0x508]
	0x0366AEE0 B 0x366B084
	0x0366AEE4 ADRP X8, 0xAD3000
	0x0366AEE8 LDR X8, [X8 + 0x628]
	0x0366AEEC B 0x366B084
	0x0366AEF0 ADRP X8, 0xAD3000
	0x0366AEF4 LDR X8, [X8 + 0x538]
	0x0366AEF8 B 0x366B084
	0x0366AEFC ADRP X8, 0xAD3000

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+80]
	003 And W9, W8, 24
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Or W8, W8, 16
	006 Add X1, X31, 8
	007 Move W2, W31
	008 Move [X0+80], W8
	009 Move [X31+8], X31
	010 Call ContextAwareResult.CaptureOrComplete, X0, X1, X2
	011 Move W0, W31
	012 And W0, W0, 1
	013 Move X30, [X31+16]
	014 Return X0

Method: System.Void Cleanup()

Disassembly:
	0x0366B2C8 MOV X0, X20
	0x0366B2CC BL 0x366B400
	0x0366B2D0 MOV X3, X0
	0x0366B2D4 CBZ X22, 0x366B314
	0x0366B2D8 MOV X0, X22
	0x0366B2DC MOV X1, X21
	0x0366B2E0 MOV X2, X19
	0x0366B2E4 LDP X20, X19, [X31 + 0x20]
	0x0366B2E8 LDP X22, X21, [X31 + 0x10]
	0x0366B2EC LDP X30, X23, [X31], #0x30
	0x0366B2F0 B 0x366B758
	0x0366B2F4 LDP X20, X19, [X31 + 0x20]
	0x0366B2F8 LDP X22, X21, [X31 + 0x10]
	0x0366B2FC LDP X30, X23, [X31], #0x30
	0x0366B300 RET
	0x0366B304 ADRP X8, 0xA88000
	0x0366B308 LDR X8, [X8 + 0x988]
	0x0366B30C LDR X3, [X8]
	0x0366B310 CBNZ X22, 0x366B2D8
	0x0366B314 BL 0x1C16F20
	0x0366B318 SUB X31, X31, 0x30
	0x0366B31C STP X30, X21, [X31 + 0x10]
	0x0366B320 STP X20, X19, [X31 + 0x20]
	0x0366B324 ADRP X20, 0xD75000
	0x0366B328 LDRB W8, [X20 + 0x749]
	0x0366B32C MOV X19, X0
	0x0366B330 TBNZ X8, 0x0, 0x366B360
	0x0366B334 ADRP X0, 0xAD2000
	0x0366B338 LDR X0, [X0 + 0x468]
	0x0366B33C BL 0x1C16CF4
	0x0366B340 ADRP X0, 0xA89000
	0x0366B344 LDR X0, [X0 + 0xA08]
	0x0366B348 BL 0x1C16CF4
	0x0366B34C ADRP X0, 0xA92000
	0x0366B350 LDR X0, [X0 + 0xEC0]
	0x0366B354 BL 0x1C16CF4
	0x0366B358 MOVZ W8, 0x1
	0x0366B35C STRB W8, [X20 + 0x749]
	0x0366B360 CBZ X19, 0x366B3E0
	0x0366B364 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD76000
	006 Move X20, 0xAD3000
	007 Move W8, [X21+1841]
	008 Move X20, [X20+1128]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xAD3000
	015 Move X0, [X0+1128]
	016 Call 0x1C17CF4
	017 Move X0, 0xAD3000
	018 Move X0, [X0+1216]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1841], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call LazyAsyncResult.Cleanup, X0
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Call NetEventSource.get_IsEnabled
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {51}
	035 Move X0, [X20]
	036 Move X20, 0xAD3000
	037 Move W8, [X0+224]
	038 Move X20, [X20+1216]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X2, [X20]
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call NetEventSource.Info, X0, X1, X2
	050 Return 
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 

Method: System.Boolean CaptureOrComplete(ref System.Threading.ExecutionContext cachedContext, System.Boolean returnContext)

Disassembly:
	0x0366AF00 LDR X8, [X8 + 0x580]
	0x0366AF04 B 0x366B084
	0x0366AF08 ADRP X8, 0xAD3000
	0x0366AF0C LDR X8, [X8 + 0x670]
	0x0366AF10 B 0x366B084
	0x0366AF14 ADRP X8, 0xAD3000
	0x0366AF18 LDR X8, [X8 + 0x5B0]
	0x0366AF1C B 0x366B084
	0x0366AF20 ADRP X8, 0xAD3000
	0x0366AF24 LDR X8, [X8 + 0x598]
	0x0366AF28 B 0x366B084
	0x0366AF2C ADRP X8, 0xAD3000
	0x0366AF30 LDR X8, [X8 + 0x5A0]
	0x0366AF34 B 0x366B084
	0x0366AF38 ADRP X8, 0xAD3000
	0x0366AF3C LDR X8, [X8 + 0x688]
	0x0366AF40 B 0x366B084
	0x0366AF44 ADRP X8, 0xAD3000
	0x0366AF48 LDR X8, [X8 + 0x678]
	0x0366AF4C B 0x366B084
	0x0366AF50 ADRP X8, 0xAD3000
	0x0366AF54 LDR X8, [X8 + 0x638]
	0x0366AF58 B 0x366B084
	0x0366AF5C ADRP X8, 0xAD3000
	0x0366AF60 LDR X8, [X8 + 0x570]
	0x0366AF64 B 0x366B084
	0x0366AF68 ADRP X8, 0xAD3000
	0x0366AF6C LDR X8, [X8 + 0x500]
	0x0366AF70 B 0x366B084
	0x0366AF74 ADRP X8, 0xAD3000
	0x0366AF78 LDR X8, [X8 + 0x640]
	0x0366AF7C B 0x366B084
	0x0366AF80 ADRP X8, 0xAD3000
	0x0366AF84 LDR X8, [X8 + 0x668]
	0x0366AF88 B 0x366B084
	0x0366AF8C ADRP X8, 0xAD3000
	0x0366AF90 LDR X8, [X8 + 0x590]
	0x0366AF94 B 0x366B084
	0x0366AF98 ADRP X8, 0xAD3000
	0x0366AF9C LDR X8, [X8 + 0x618]
	0x0366AFA0 B 0x366B084
	0x0366AFA4 ADRP X8, 0xAD3000
	0x0366AFA8 LDR X8, [X8 + 0x6C8]
	0x0366AFAC B 0x366B084
	0x0366AFB0 ADRP X8, 0xAD3000
	0x0366AFB4 LDR X8, [X8 + 0x610]
	0x0366AFB8 B 0x366B084
	0x0366AFBC ADRP X8, 0xAD3000
	0x0366AFC0 LDR X8, [X8 + 0x530]
	0x0366AFC4 B 0x366B084
	0x0366AFC8 ADRP X8, 0xAD3000
	0x0366AFCC LDR X8, [X8 + 0x648]
	0x0366AFD0 B 0x366B084
	0x0366AFD4 ADRP X8, 0xAD3000
	0x0366AFD8 LDR X8, [X8 + 0x660]
	0x0366AFDC B 0x366B084
	0x0366AFE0 ADRP X8, 0xAD3000
	0x0366AFE4 LDR X8, [X8 + 0x518]
	0x0366AFE8 B 0x366B084
	0x0366AFEC ADRP X8, 0xAD3000
	0x0366AFF0 LDR X8, [X8 + 0x560]
	0x0366AFF4 B 0x366B084
	0x0366AFF8 ADRP X8, 0xAD3000
	0x0366AFFC LDR X8, [X8 + 0x5C0]
	0x0366B000 B 0x366B084
	0x0366B004 ADRP X8, 0xAD2000
	0x0366B008 LDR X8, [X8 + 0x6D8]
	0x0366B00C B 0x366B084
	0x0366B010 ADRP X8, 0xAD2000
	0x0366B014 LDR X8, [X8 + 0x698]
	0x0366B018 B 0x366B084
	0x0366B01C ADRP X8, 0xAD2000
	0x0366B020 LDR X8, [X8 + 0x6C0]
	0x0366B024 B 0x366B084
	0x0366B028 ADRP X8, 0xAD2000
	0x0366B02C LDR X8, [X8 + 0x5B8]
	0x0366B030 B 0x366B084
	0x0366B034 ADRP X8, 0xAD2000
	0x0366B038 LDR X8, [X8 + 0x600]
	0x0366B03C B 0x366B084
	0x0366B040 ADRP X8, 0xAD2000
	0x0366B044 LDR X8, [X8 + 0x550]
	0x0366B048 B 0x366B084
	0x0366B04C ADRP X8, 0xAD2000
	0x0366B050 LDR X8, [X8 + 0x6D0]
	0x0366B054 B 0x366B084
	0x0366B058 ADRP X8, 0xAD2000
	0x0366B05C LDR X8, [X8 + 0x5E8]
	0x0366B060 B 0x366B084
	0x0366B064 ADRP X8, 0xAD2000
	0x0366B068 LDR X8, [X8 + 0x528]
	0x0366B06C B 0x366B084
	0x0366B070 ADRP X8, 0xAD2000
	0x0366B074 LDR X8, [X8 + 0x5E0]
	0x0366B078 B 0x366B084
	0x0366B07C ADRP X8, 0xAD2000
	0x0366B080 LDR X8, [X8 + 0x5D0]
	0x0366B084 LDR X0, [X8]
	0x0366B088 LDP X20, X19, [X31 + 0x10]
	0x0366B08C LDR X30, [X31], #0x20
	0x0366B090 RET
	0x0366B094 STP X30, X23, [X31 - 0x30]!
	0x0366B098 STP X22, X21, [X31 + 0x10]
	0x0366B09C STP X20, X19, [X31 + 0x20]
	0x0366B0A0 CBZ X0, 0x366B190
	0x0366B0A4 LDR W8, [X0 + 0x10]
	0x0366B0A8 MOV X19, X0
	0x0366B0AC CMP W8, 0x1
	0x0366B0B0 B.LT 0x366B174
	0x0366B0B4 MOVZ W21, 0x13
	0x0366B0B8 MOVZ X23, 0x7F
	0x0366B0BC MOV W20, W31
	0x0366B0C0 MOVK W21, 0x800000
	0x0366B0C4 MOVZ W22, 0x24E1
	0x0366B0C8 MOVK X23, 0xE
	0x0366B0CC MOV X0, X19
	0x0366B0D0 MOV W1, W20
	0x0366B0D4 MOV X2, X31
	0x0366B0D8 BL 0x3222A1C
	0x0366B0DC AND W8, W0, 0xFFFF
	0x0366B0E0 CMP W8, 0x2F
	0x0366B0E4 B.HI 0x366B10C
	0x0366B0E8 CMP W8, 0x20
	0x0366B0EC B.HI 0x366B130
	0x0366B0F0 SUB W8, W0, 0x9
	0x0366B0F4 AND W9, W8, 0xFFFF
	0x0366B0F8 CMP W9, 0x18
	0x0366B0FC B.CS 0x366B164
	0x0366B100 LSRV W8, W21, W8
	0x0366B104 TBZ X8, 0x0, 0x366B164
	0x0366B108 B 0x366B188
	0x0366B10C CMP W8, 0x5D
	0x0366B110 B.HI 0x366B14C
	0x0366B114 SUB W8, W0, 0x3A
	0x0366B118 AND W9, W8, 0xFFFF
	0x0366B11C CMP W9, 0x24
	0x0366B120 B.CS 0x366B164
	0x0366B124 LSRV X8, X23, X8
	0x0366B128 TBZ X8, 0x0, 0x366B164
	0x0366B12C B 0x366B188
	0x0366B130 SUB W8, W0, 0x22
	0x0366B134 AND W9, W8, 0xFFFF
	0x0366B138 CMP W9, 0xE
	0x0366B13C B.CS 0x366B164
	0x0366B140 LSRV W8, W22, W8
	0x0366B144 TBZ X8, 0x0, 0x366B164
	0x0366B148 B 0x366B188
	0x0366B14C AND W8, W0, 0xFFFF
	0x0366B150 CMP W8, 0x7B
	0x0366B154 MOVZ W0, 0x1
	0x0366B158 B.EQ 0x366B178
	0x0366B15C CMP W8, 0x7D
	0x0366B160 B.EQ 0x366B178
	0x0366B164 LDR W8, [X19 + 0x10]
	0x0366B168 ADD W20, W20, 0x1
	0x0366B16C CMP W20, W8
	0x0366B170 B.LT 0x366B0CC
	0x0366B174 MOV W0, W31
	0x0366B178 LDP X20, X19, [X31 + 0x20]
	0x0366B17C LDP X22, X21, [X31 + 0x10]
	0x0366B180 LDP X30, X23, [X31], #0x30
	0x0366B184 RET
	0x0366B188 MOVZ W0, 0x1
	0x0366B18C B 0x366B178
	0x0366B190 BL 0x1C16F20
	0x0366B194 STR X30, [X31 - 0x30]!
	0x0366B198 STP X22, X21, [X31 + 0x10]
	0x0366B19C STP X20, X19, [X31 + 0x20]
	0x0366B1A0 ADRP X21, 0xD75000
	0x0366B1A4 ADRP X22, 0xA91000
	0x0366B1A8 ADRP X19, 0xAD2000
	0x0366B1AC ADRP X20, 0xAD2000
	0x0366B1B0 LDRB W8, [X21 + 0x738]
	0x0366B1B4 LDR X22, [X22 + 0x8D8]
	0x0366B1B8 LDR X19, [X19 + 0x6E0]
	0x0366B1BC LDR X20, [X20 + 0x6E8]
	0x0366B1C0 TBNZ X8, 0x0, 0x366B1F0
	0x0366B1C4 ADRP X0, 0xA91000
	0x0366B1C8 LDR X0, [X0 + 0x8D8]
	0x0366B1CC BL 0x1C16CF4
	0x0366B1D0 ADRP X0, 0xAD2000
	0x0366B1D4 LDR X0, [X0 + 0x6E8]
	0x0366B1D8 BL 0x1C16CF4
	0x0366B1DC ADRP X0, 0xAD2000
	0x0366B1E0 LDR X0, [X0 + 0x6E0]
	0x0366B1E4 BL 0x1C16CF4
	0x0366B1E8 MOVZ W8, 0x1
	0x0366B1EC STRB W8, [X21 + 0x738]
	0x0366B1F0 LDR X0, [X22]
	0x0366B1F4 MOVZ W1, 0x6
	0x0366B1F8 BL 0x1C16D6C
	0x0366B1FC LDR X1, [X19]
	0x0366B200 MOV X2, X31
	0x0366B204 MOV X19, X0
	0x0366B208 BL 0x32C5BD8
	0x0366B20C LDR X8, [X20]
	0x0366B210 LDP X22, X21, [X31 + 0x10]
	0x0366B214 LDR X8, [X8 + 0xB8]
	0x0366B218 STR X19, [X8]
	0x0366B21C LDP X20, X19, [X31 + 0x20]
	0x0366B220 LDR X30, [X31], #0x30
	0x0366B224 RET
	0x0366B228 STP X30, X23, [X31 - 0x30]!
	0x0366B22C STP X22, X21, [X31 + 0x10]
	0x0366B230 STP X20, X19, [X31 + 0x20]
	0x0366B234 ADRP X22, 0xD75000
	0x0366B238 ADRP X23, 0xAD2000
	0x0366B23C LDRB W8, [X22 + 0x739]
	0x0366B240 LDR X23, [X23 + 0x468]
	0x0366B244 MOV X19, X2
	0x0366B248 MOV X20, X1
	0x0366B24C MOV X21, X0
	0x0366B250 TBNZ X8, 0x0, 0x366B274
	0x0366B254 ADRP X0, 0xAD2000
	0x0366B258 LDR X0, [X0 + 0x468]
	0x0366B25C BL 0x1C16CF4
	0x0366B260 ADRP X0, 0xA88000
	0x0366B264 LDR X0, [X0 + 0x988]
	0x0366B268 BL 0x1C16CF4
	0x0366B26C MOVZ W8, 0x1
	0x0366B270 STRB W8, [X22 + 0x739]
	0x0366B274 LDR X0, [X23]
	0x0366B278 LDR W8, [X0 + 0xE0]
	0x0366B27C CBNZ W8, 0x366B284
	0x0366B280 BL 0x1C16DFC
	0x0366B284 BL 0x366A368
	0x0366B288 TBZ X0, 0x0, 0x366B2F4
	0x0366B28C LDR X0, [X23]
	0x0366B290 LDR W8, [X0 + 0xE0]
	0x0366B294 CBNZ W8, 0x366B2A0
	0x0366B298 BL 0x1C16DFC
	0x0366B29C LDR X0, [X23]
	0x0366B2A0 LDR X8, [X0 + 0xB8]
	0x0366B2A4 MOV X0, X21
	0x0366B2A8 LDR X22, [X8]
	0x0366B2AC BL 0x366B318
	0x0366B2B0 MOV X21, X0
	0x0366B2B4 CBZ X20, 0x366B304
	0x0366B2B8 LDR X0, [X23]
	0x0366B2BC LDR W8, [X0 + 0xE0]
	0x0366B2C0 CBNZ W8, 0x366B2C8
	0x0366B2C4 BL 0x1C16DFC

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0xD77000
	011 Move W8, [X22+1842]
	012 Move W21, W2
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {54}
	019 Move X0, 0xAB2000
	020 Move X0, [X0+1408]
	021 Call 0x1C17CF4
	022 Move X0, 0xAD4000
	023 Move X0, [X0+1128]
	024 Call 0x1C17CF4
	025 Move X0, 0xA8A000
	026 Move X0, [X0+2512]
	027 Call 0x1C17CF4
	028 Move X0, 0xAD4000
	029 Move X0, [X0+1152]
	030 Call 0x1C17CF4
	031 Move X0, 0xAD4000
	032 Move X0, [X0+1160]
	033 Call 0x1C17CF4
	034 Move X0, 0xAD4000
	035 Move X0, [X0+1168]
	036 Call 0x1C17CF4
	037 Move X0, 0xAD4000
	038 Move X0, [X0+1176]
	039 Call 0x1C17CF4
	040 Move X0, 0xAD4000
	041 Move X0, [X0+1184]
	042 Call 0x1C17CF4
	043 Move X0, 0xAD4000
	044 Move X0, [X0+1192]
	045 Call 0x1C17CF4
	046 Move X0, 0xAD4000
	047 Move X0, [X0+1200]
	048 Call 0x1C17CF4
	049 Move X0, 0xAD4000
	050 Move X0, [X0+1208]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X22+1842], W8
	054 Move X24, 0xAD4000
	055 Move X23, 0xAD4000
	056 Move W8, [X19+80]
	057 Move X24, [X24+1128]
	058 Move X23, [X23+1208]
	059 Move TEMP, X8
	060 And TEMP, TEMP, 8
	061 Compare TEMP, 8
	062 JumpIfEqual {74}
	063 Move X0, [X24]
	064 Move X22, 0xAD4000
	065 Move W8, [X0+224]
	066 Move X22, [X22+1160]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X1, [X22]
	071 Move X2, [X23]
	072 Move X0, X19
	073 Call NetEventSource.Fail, X0, X1, X2
	074 Move X25, [X19+32]
	075 Move W26, [X19+80]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CSET not yet implemented."
	078 And W31, W26, 2
	079 NotImplemented "Instruction CSET not yet implemented."
	080 And W22, W8, W9
	081 Move TEMP, X26
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfEqual {139}
	085 Move TEMP, X22
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfEqual {96}
	089 Move X0, X19
	090 Move X1, X31
	091 Call LazyAsyncResult.get_InternalPeekCompleted, X0
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {173}
	096 Move X0, [X24]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Call NetEventSource.get_IsEnabled
	102 Move TEMP, X0
	103 And TEMP, TEMP, 1
	104 Compare TEMP, 1
	105 JumpIfNotEqual {117}
	106 Move X0, [X24]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1C17DFC
	111 Move X8, 0xAD3000
	112 Move X8, [X8+1152]
	113 Move X2, [X23]
	114 Move X0, X19
	115 Move X1, [X8]
	116 Call NetEventSource.Info, X0, X1, X2
	117 Move [X20], X31
	118 Move X8, [X19+32]
	119 Compare X8, 0
	120 JumpIfEqual {266}
	121 Move X0, X19
	122 Move X1, X31
	123 Call LazyAsyncResult.get_CompletedSynchronously, X0
	124 Move TEMP, X0
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfEqual {266}
	128 Move X0, [X24]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {133}
	132 Call 0x1C17DFC
	133 Move X8, 0xAD3000
	134 Move X8, [X8+1176]
	135 Move X2, [X23]
	136 Move X0, X19
	137 Move X1, [X8]
	138 Call NetEventSource.Fail, X0, X1, X2
	139 Move X0, X19
	140 Move X1, X31
	141 Call LazyAsyncResult.get_InternalPeekCompleted, X0
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfEqual {85}
	146 Compare X25, 0
	147 JumpIfNotEqual {85}
	148 Move TEMP, X26
	149 And TEMP, TEMP, 2
	150 Compare TEMP, 2
	151 JumpIfEqual {85}
	152 Move X0, [X24]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Call NetEventSource.get_IsEnabled
	158 Move TEMP, X0
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfNotEqual {85}
	162 Move X0, [X24]
	163 Move W8, [X0+224]
	164 Compare W8, 0
	165 JumpIfNotEqual {167}
	166 Call 0x1C17DFC
	167 Move X8, 0xAD3000
	168 Move X8, [X8+1184]
	169 Move X2, [X23]
	170 Move X0, X19
	171 Move X1, [X8]
	172 Call NetEventSource.Info, X0, X1, X2
	173 Move X0, [X24]
	174 Move W8, [X0+224]
	175 Compare W8, 0
	176 JumpIfNotEqual {178}
	177 Call 0x1C17DFC
	178 Call NetEventSource.get_IsEnabled
	179 Move TEMP, X0
	180 And TEMP, TEMP, 1
	181 Compare TEMP, 1
	182 JumpIfNotEqual {194}
	183 Move X0, [X24]
	184 Move W8, [X0+224]
	185 Compare W8, 0
	186 JumpIfNotEqual {188}
	187 Call 0x1C17DFC
	188 Move X8, 0xAD3000
	189 Move X8, [X8+1192]
	190 Move X2, [X23]
	191 Move X0, X19
	192 Move X1, [X8]
	193 Call NetEventSource.Info, X0, X1, X2
	194 Move X22, [X20]
	195 Compare X22, 0
	196 JumpIfNotEqual {210}
	197 Move X8, 0xAB1000
	198 Move X8, [X8+1408]
	199 Move X0, [X8]
	200 Move W8, [X0+224]
	201 Compare W8, 0
	202 JumpIfNotEqual {204}
	203 Call 0x1C17DFC
	204 Move X0, X31
	205 Call ExecutionContext.Capture
	206 Move X22, X0
	207 Move [X20], X0
	208 Compare X0, 0
	209 JumpIfEqual {217}
	210 Call 0x1C17D44
	211 Move [X19+64], X22
	212 Move TEMP, X21
	213 And TEMP, TEMP, 1
	214 Compare TEMP, 1
	215 JumpIfEqual {217}
	216 Move [X20], X31
	217 Move X0, [X24]
	218 Move W8, [X0+224]
	219 Compare W8, 0
	220 JumpIfNotEqual {222}
	221 Call 0x1C17DFC
	222 Call NetEventSource.get_IsEnabled
	223 Move TEMP, X0
	224 And TEMP, TEMP, 1
	225 Compare TEMP, 1
	226 JumpIfNotEqual {266}
	227 Move X8, 0xA89000
	228 Move X8, [X8+2512]
	229 Move W1, 1
	230 Move X0, [X8]
	231 Call 0x1C17D6C
	232 Move X21, [X19+64]
	233 Move X20, X0
	234 Call 0x1C17D44
	235 Compare X20, 0
	236 JumpIfEqual {310}
	237 Compare X21, 0
	238 JumpIfEqual {245}
	239 Move X8, [X20]
	240 Move X0, X21
	241 Move X1, [X8+64]
	242 Call 0x1C17E00
	243 Compare X0, 0
	244 JumpIfEqual {312}
	245 Move W8, [X20+24]
	246 Compare W8, 0
	247 JumpIfEqual {311}
	248 Move [X20+32], X21
	249 Move X8, 0xAD3000
	250 Move X8, [X8+1168]
	251 Move X1, X20
	252 Move X2, X31
	253 Move X0, [X8]
	254 Call FormattableStringFactory.Create, X0, X1
	255 Move X8, [X24]
	256 Move X20, X0
	257 Move W9, [X8+224]
	258 Compare W9, 0
	259 JumpIfNotEqual {262}
	260 Move X0, X8
	261 Call 0x1C17DFC
	262 Move X2, [X23]
	263 Move X0, X19
	264 Move X1, X20
	265 Call NetEventSource.Info, X0, X1, X2
	266 Move X0, X19
	267 Move X1, X31
	268 Call LazyAsyncResult.get_CompletedSynchronously, X0
	269 Move W20, W0
	270 Move TEMP, X0
	271 And TEMP, TEMP, 1
	272 Compare TEMP, 1
	273 JumpIfNotEqual {299}
	274 Move X0, [X24]
	275 Move W8, [X0+224]
	276 Compare W8, 0
	277 JumpIfNotEqual {279}
	278 Call 0x1C17DFC
	279 Call NetEventSource.get_IsEnabled
	280 Move TEMP, X0
	281 And TEMP, TEMP, 1
	282 Compare TEMP, 1
	283 JumpIfNotEqual {295}
	284 Move X0, [X24]
	285 Move W8, [X0+224]
	286 Compare W8, 0
	287 JumpIfNotEqual {289}
	288 Call 0x1C17DFC
	289 Move X8, 0xAD3000
	290 Move X8, [X8+1200]
	291 Move X2, [X23]
	292 Move X0, X19
	293 Move X1, [X8]
	294 Call NetEventSource.Info, X0, X1, X2
	295 Move X0, X19
	296 Move X1, X31
	297 Move X2, X31
	298 Call LazyAsyncResult.Complete, X0, X1
	299 And W0, W20, 1
	300 Move X20, [X31+64]
	301 Move X19, [X31+72]
	302 Move X22, [X31+48]
	303 Move X21, [X31+56]
	304 Move X24, [X31+32]
	305 Move X23, [X31+40]
	306 Move X26, [X31+16]
	307 Move X25, [X31+24]
	308 Move X30, [X31+80]
	309 Return X0
	310 Call 0x1C17F20
	311 Call 0x1C17F28
	312 Call 0x1C17F44
	313 Move X1, X31
	314 Call 0x1C17DEC

Method: System.Void Complete(System.IntPtr userToken)

Disassembly:
	0x0366B58C MOV X0, X19
	0x0366B590 LDP X9, X1, [X8 + 0x188]
	0x0366B594 BLR X9
	0x0366B598 LDR X8, [X19]
	0x0366B59C MOV X20, X0
	0x0366B5A0 MOV X0, X19
	0x0366B5A4 MOV W1, W31
	0x0366B5A8 LDP X9, X2, [X8 + 0x1B8]
	0x0366B5AC BLR X9
	0x0366B5B0 ADRP X8, 0xAD2000
	0x0366B5B4 LDR X8, [X8 + 0x468]
	0x0366B5B8 MOV X19, X0
	0x0366B5BC LDR X8, [X8]
	0x0366B5C0 LDR W9, [X8 + 0xE0]
	0x0366B5C4 CBNZ W9, 0x366B5D0
	0x0366B5C8 MOV X0, X8
	0x0366B5CC BL 0x1C16DFC
	0x0366B5D0 MOV X0, X19
	0x0366B5D4 BL 0x366B8BC
	0x0366B5D8 MOV X1, X0
	0x0366B5DC MOV X0, X20
	0x0366B5E0 LDP X20, X19, [X31 + 0x40]
	0x0366B5E4 LDP X22, X21, [X31 + 0x30]
	0x0366B5E8 LDP X24, X23, [X31 + 0x20]
	0x0366B5EC LDP X26, X25, [X31 + 0x10]
	0x0366B5F0 MOV X2, X31
	0x0366B5F4 LDR X30, [X31], #0x50
	0x0366B5F8 B 0x321EFD0
	0x0366B5FC LDR X8, [X19]
	0x0366B600 MOV X0, X19
	0x0366B604 LDP X9, X1, [X8 + 0x188]
	0x0366B608 BLR X9
	0x0366B60C LDR X8, [X19]
	0x0366B610 MOV X20, X0
	0x0366B614 MOV X0, X19
	0x0366B618 MOV W1, W31
	0x0366B61C LDP X9, X2, [X8 + 0x1B8]
	0x0366B620 BLR X9
	0x0366B624 ADRP X8, 0xAD2000
	0x0366B628 LDR X8, [X8 + 0x468]
	0x0366B62C MOV X21, X0
	0x0366B630 LDR X8, [X8]
	0x0366B634 LDR W9, [X8 + 0xE0]
	0x0366B638 CBNZ W9, 0x366B644
	0x0366B63C MOV X0, X8
	0x0366B640 BL 0x1C16DFC
	0x0366B644 MOV X0, X21
	0x0366B648 BL 0x366B8BC
	0x0366B64C LDR X8, [X19]
	0x0366B650 MOV X21, X0
	0x0366B654 MOVZ W1, 0x1
	0x0366B658 MOV X0, X19
	0x0366B65C LDP X9, X2, [X8 + 0x1B8]
	0x0366B660 BLR X9
	0x0366B664 BL 0x366B8BC
	0x0366B668 MOV X2, X0
	0x0366B66C MOV X0, X20
	0x0366B670 MOV X1, X21
	0x0366B674 LDP X20, X19, [X31 + 0x40]
	0x0366B678 LDP X22, X21, [X31 + 0x30]
	0x0366B67C LDP X24, X23, [X31 + 0x20]
	0x0366B680 LDP X26, X25, [X31 + 0x10]
	0x0366B684 MOV X3, X31
	0x0366B688 LDR X30, [X31], #0x50
	0x0366B68C B 0x3227BD4
	0x0366B690 LDR X8, [X19]
	0x0366B694 MOV X0, X19
	0x0366B698 LDP X9, X1, [X8 + 0x188]
	0x0366B69C BLR X9
	0x0366B6A0 LDR X8, [X19]
	0x0366B6A4 MOV X20, X0
	0x0366B6A8 MOV X0, X19
	0x0366B6AC MOV W1, W31
	0x0366B6B0 LDP X9, X2, [X8 + 0x1B8]
	0x0366B6B4 BLR X9
	0x0366B6B8 ADRP X8, 0xAD2000
	0x0366B6BC LDR X8, [X8 + 0x468]
	0x0366B6C0 MOV X21, X0
	0x0366B6C4 LDR X8, [X8]
	0x0366B6C8 LDR W9, [X8 + 0xE0]
	0x0366B6CC CBNZ W9, 0x366B6D8
	0x0366B6D0 MOV X0, X8
	0x0366B6D4 BL 0x1C16DFC
	0x0366B6D8 MOV X0, X21
	0x0366B6DC BL 0x366B8BC
	0x0366B6E0 LDR X8, [X19]
	0x0366B6E4 MOV X21, X0
	0x0366B6E8 MOVZ W1, 0x1
	0x0366B6EC MOV X0, X19
	0x0366B6F0 LDP X9, X2, [X8 + 0x1B8]
	0x0366B6F4 BLR X9
	0x0366B6F8 BL 0x366B8BC
	0x0366B6FC LDR X8, [X19]
	0x0366B700 MOV X22, X0
	0x0366B704 MOVZ W1, 0x2
	0x0366B708 MOV X0, X19
	0x0366B70C LDP X9, X2, [X8 + 0x1B8]
	0x0366B710 BLR X9
	0x0366B714 BL 0x366B8BC
	0x0366B718 MOV X3, X0
	0x0366B71C MOV X0, X20
	0x0366B720 MOV X1, X21
	0x0366B724 MOV X2, X22
	0x0366B728 LDP X20, X19, [X31 + 0x40]
	0x0366B72C LDP X22, X21, [X31 + 0x30]
	0x0366B730 LDP X24, X23, [X31 + 0x20]
	0x0366B734 LDP X26, X25, [X31 + 0x10]
	0x0366B738 MOV X4, X31
	0x0366B73C LDR X30, [X31], #0x50
	0x0366B740 B 0x3227C18
	0x0366B744 BL 0x1C16F28
	0x0366B748 BL 0x1C16F20
	0x0366B74C BL 0x1C16F44
	0x0366B750 MOV X1, X31
	0x0366B754 BL 0x1C16DEC
	0x0366B758 STP X30, X23, [X31 - 0x30]!
	0x0366B75C STP X22, X21, [X31 + 0x10]
	0x0366B760 STP X20, X19, [X31 + 0x20]
	0x0366B764 ADRP X23, 0xD75000
	0x0366B768 LDRB W8, [X23 + 0x73C]
	0x0366B76C MOV X19, X3
	0x0366B770 MOV X22, X2
	0x0366B774 MOV X20, X1
	0x0366B778 MOV X21, X0
	0x0366B77C TBNZ X8, 0x0, 0x366B794
	0x0366B780 ADRP X0, 0xAD2000
	0x0366B784 LDR X0, [X0 + 0x6F0]
	0x0366B788 BL 0x1C16CF4
	0x0366B78C MOVZ W8, 0x1
	0x0366B790 STRB W8, [X23 + 0x73C]
	0x0366B794 CBZ X21, 0x366B7D0
	0x0366B798 ADRP X8, 0xAD2000
	0x0366B79C LDR X8, [X8 + 0x6F0]
	0x0366B7A0 CMP X22, 0x0
	0x0366B7A4 MOV X0, X21
	0x0366B7A8 MOV X2, X20
	0x0366B7AC LDR X8, [X8]
	0x0366B7B0 MOV X4, X19
	0x0366B7B4 LDP X20, X19, [X31 + 0x20]
	0x0366B7B8 MOVZ W1, 0x1
	0x0366B7BC CSEL X3, X8, X22, EQ
	0x0366B7C0 LDP X22, X21, [X31 + 0x10]
	0x0366B7C4 MOV X5, X31
	0x0366B7C8 LDP X30, X23, [X31], #0x30
	0x0366B7CC B 0x334FCA4
	0x0366B7D0 BL 0x1C16F20
	0x0366B7D4 STP X30, X23, [X31 - 0x30]!
	0x0366B7D8 STP X22, X21, [X31 + 0x10]
	0x0366B7DC STP X20, X19, [X31 + 0x20]
	0x0366B7E0 ADRP X23, 0xD75000
	0x0366B7E4 ADRP X22, 0xAD2000
	0x0366B7E8 LDRB W8, [X23 + 0x73A]
	0x0366B7EC LDR X22, [X22 + 0x468]
	0x0366B7F0 MOV X19, X2
	0x0366B7F4 MOV X20, X1
	0x0366B7F8 MOV X21, X0
	0x0366B7FC TBNZ X8, 0x0, 0x366B820
	0x0366B800 ADRP X0, 0xAD2000
	0x0366B804 LDR X0, [X0 + 0x468]
	0x0366B808 BL 0x1C16CF4
	0x0366B80C ADRP X0, 0xAD2000
	0x0366B810 LDR X0, [X0 + 0x6F8]
	0x0366B814 BL 0x1C16CF4
	0x0366B818 MOVZ W8, 0x1
	0x0366B81C STRB W8, [X23 + 0x73A]
	0x0366B820 LDR X0, [X22]
	0x0366B824 LDR W8, [X0 + 0xE0]
	0x0366B828 CBNZ W8, 0x366B830
	0x0366B82C BL 0x1C16DFC
	0x0366B830 BL 0x366A368
	0x0366B834 TBZ X0, 0x0, 0x366B8A8
	0x0366B838 LDR X0, [X22]
	0x0366B83C LDR W8, [X0 + 0xE0]
	0x0366B840 CBNZ W8, 0x366B84C
	0x0366B844 BL 0x1C16DFC
	0x0366B848 LDR X0, [X22]
	0x0366B84C LDR X8, [X0 + 0xB8]
	0x0366B850 MOV X0, X21
	0x0366B854 LDR X22, [X8]
	0x0366B858 BL 0x366B318
	0x0366B85C MOV X21, X0
	0x0366B860 MOV X0, X20
	0x0366B864 BL 0x366B8BC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0xD76000
	010 Move X23, 0xAD3000
	011 Move W8, [X21+1843]
	012 Move X23, [X23+1128]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {51}
	019 Move X0, 0xA89000
	020 Move X0, [X0+2904]
	021 Call 0x1C17CF4
	022 Move X0, 0xABB000
	023 Move X0, [X0+2376]
	024 Call 0x1C17CF4
	025 Move X0, 0xAB1000
	026 Move X0, [X0+1408]
	027 Call 0x1C17CF4
	028 Move X0, 0xAB2000
	029 Move X0, [X0+3872]
	030 Call 0x1C17CF4
	031 Move X0, 0xAD3000
	032 Move X0, [X0+1128]
	033 Call 0x1C17CF4
	034 Move X0, 0xA89000
	035 Move X0, [X0+2512]
	036 Call 0x1C17CF4
	037 Move X0, 0xAD3000
	038 Move X0, [X0+1224]
	039 Call 0x1C17CF4
	040 Move X0, 0xAD3000
	041 Move X0, [X0+1232]
	042 Call 0x1C17CF4
	043 Move X0, 0xAD3000
	044 Move X0, [X0+1240]
	045 Call 0x1C17CF4
	046 Move X0, 0xAD3000
	047 Move X0, [X0+1248]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X21+1843], W8
	051 Move X0, [X23]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Call NetEventSource.get_IsEnabled
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {129}
	061 Move X8, 0xA89000
	062 Move X8, [X8+2512]
	063 Move X22, 0xA89000
	064 Move W1, 2
	065 Move X0, [X8]
	066 Move X22, [X22+2904]
	067 Call 0x1C17D6C
	068 Move X24, [X19+64]
	069 Move X21, X0
	070 Call 0x1C17D44
	071 Move X0, [X22]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CSET not yet implemented."
	074 Add X1, X31, 28
	075 Move [X31+28], W8
	076 Call 0x1C17E04
	077 Compare X21, 0
	078 JumpIfEqual {215}
	079 Move X22, X0
	080 Compare X0, 0
	081 JumpIfEqual {88}
	082 Move X8, [X21]
	083 Move X0, X22
	084 Move X1, [X8+64]
	085 Call 0x1C17E00
	086 Compare X0, 0
	087 JumpIfEqual {212}
	088 Move W8, [X21+24]
	089 Compare W8, 0
	090 JumpIfEqual {211}
	091 Move [X21+32], X22
	092 Move X8, 0xAB2000
	093 Move X8, [X8+3872]
	094 Add X1, X31, 8
	095 Move [X31+8], X20
	096 Move X0, [X8]
	097 Call 0x1C17E04
	098 Move X22, X0
	099 Compare X0, 0
	100 JumpIfEqual {107}
	101 Move X8, [X21]
	102 Move X0, X22
	103 Move X1, [X8+64]
	104 Call 0x1C17E00
	105 Compare X0, 0
	106 JumpIfEqual {212}
	107 Move W8, [X21+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move [X21+40], X22
	110 Move X8, 0xAD3000
	111 Move X8, [X8+1240]
	112 Move X1, X21
	113 Move X2, X31
	114 Move X0, [X8]
	115 Call FormattableStringFactory.Create, X0, X1
	116 Move X8, [X23]
	117 Move X21, X0
	118 Move W9, [X8+224]
	119 Compare W9, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X8
	122 Call 0x1C17DFC
	123 Move X8, 0xAD3000
	124 Move X8, [X8+1248]
	125 Move X0, X19
	126 Move X1, X21
	127 Move X2, [X8]
	128 Call NetEventSource.Info, X0, X1, X2
	129 Move W8, [X19+80]
	130 Move TEMP, X8
	131 And TEMP, TEMP, 8
	132 Compare TEMP, 8
	133 JumpIfEqual {138}
	134 Move X0, X19
	135 Move X1, X20
	136 Move X2, X31
	137 Call LazyAsyncResult.Complete, X0, X1
	138 Move X0, X19
	139 Move X1, X31
	140 Call LazyAsyncResult.get_CompletedSynchronously, X0
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfEqual {202}
	145 Move X21, [X19+64]
	146 Call 0x1C17D44
	147 Move X0, X20
	148 Move X1, X31
	149 Move X2, X31
	150 Call IntPtr.op_Inequality, X0, X1
	151 Compare X21, 0
	152 JumpIfEqual {134}
	153 Move TEMP, X0
	154 And TEMP, TEMP, 1
	155 Compare TEMP, 1
	156 JumpIfEqual {134}
	157 Move X23, 0xAD3000
	158 Move X23, [X23+1232]
	159 Move X0, [X23]
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {165}
	163 Call 0x1C17DFC
	164 Move X0, [X23]
	165 Move X8, [X0+184]
	166 Move X20, [X8+8]
	167 Compare X20, 0
	168 JumpIfNotEqual {190}
	169 Move W8, [X0+224]
	170 Compare W8, 0
	171 JumpIfNotEqual {174}
	172 Call 0x1C17DFC
	173 Move X0, [X23]
	174 Move X9, 0xABB000
	175 Move X8, [X0+184]
	176 Move X9, [X9+2376]
	177 Move X22, [X8]
	178 Move X0, [X9]
	179 Call 0x1C17F10
	180 Move X8, 0xAD3000
	181 Move X8, [X8+1224]
	182 Move X1, X22
	183 Move X3, X31
	184 Move X20, X0
	185 Move X2, [X8]
	186 Call ContextCallback..ctor, X0, X1, X2
	187 Move X8, [X23]
	188 Move X8, [X8+184]
	189 Move [X8+8], X20
	190 Move X8, 0xAB1000
	191 Move X8, [X8+1408]
	192 Move X0, [X8]
	193 Move W8, [X0+224]
	194 Compare W8, 0
	195 JumpIfNotEqual {197}
	196 Call 0x1C17DFC
	197 Move X0, X21
	198 Move X1, X20
	199 Move X2, X19
	200 Move X3, X31
	201 Call ExecutionContext.Run, X0, X1, X2
	202 Move X20, [X31+64]
	203 Move X19, [X31+72]
	204 Move X22, [X31+48]
	205 Move X21, [X31+56]
	206 Move X24, [X31+32]
	207 Move X23, [X31+40]
	208 Move X30, [X31+16]
	209 Add X31, X31, 80
	210 Return 
	211 Call 0x1C17F28
	212 Call 0x1C17F44
	213 Move X1, X31
	214 Call 0x1C17DEC
	215 Call 0x1C17F20

Method: System.Void CompleteCallback()

Disassembly:
	0x0366B868 ADRP X8, 0xAD2000
	0x0366B86C LDR X8, [X8 + 0x6F8]
	0x0366B870 MOV X1, X0
	0x0366B874 MOV X2, X31
	0x0366B878 LDR X8, [X8]
	0x0366B87C MOV X0, X8
	0x0366B880 BL 0x321EFD0
	0x0366B884 CBZ X22, 0x366B8B8
	0x0366B888 MOV X3, X0
	0x0366B88C MOV X0, X22
	0x0366B890 MOV X1, X21
	0x0366B894 MOV X2, X19
	0x0366B898 LDP X20, X19, [X31 + 0x20]
	0x0366B89C LDP X22, X21, [X31 + 0x10]
	0x0366B8A0 LDP X30, X23, [X31], #0x30
	0x0366B8A4 B 0x366B758
	0x0366B8A8 LDP X20, X19, [X31 + 0x20]
	0x0366B8AC LDP X22, X21, [X31 + 0x10]
	0x0366B8B0 LDP X30, X23, [X31], #0x30
	0x0366B8B4 RET
	0x0366B8B8 BL 0x1C16F20
	0x0366B8BC SUB X31, X31, 0x30
	0x0366B8C0 STP X30, X21, [X31 + 0x10]
	0x0366B8C4 STP X20, X19, [X31 + 0x20]
	0x0366B8C8 ADRP X20, 0xD75000
	0x0366B8CC LDRB W8, [X20 + 0x74A]
	0x0366B8D0 MOV X19, X0
	0x0366B8D4 TBNZ X8, 0x0, 0x366B964
	0x0366B8D8 ADRP X0, 0xA8F000
	0x0366B8DC LDR X0, [X0 + 0x2F0]
	0x0366B8E0 BL 0x1C16CF4
	0x0366B8E4 ADRP X0, 0xA88000
	0x0366B8E8 LDR X0, [X0 + 0x758]
	0x0366B8EC BL 0x1C16CF4
	0x0366B8F0 ADRP X0, 0xAB1000
	0x0366B8F4 LDR X0, [X0 + 0xF20]
	0x0366B8F8 BL 0x1C16CF4
	0x0366B8FC ADRP X0, 0xAD2000
	0x0366B900 LDR X0, [X0 + 0x468]
	0x0366B904 BL 0x1C16CF4
	0x0366B908 ADRP X0, 0xA88000
	0x0366B90C LDR X0, [X0 + 0xEF0]
	0x0366B910 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD76000
	006 Move X20, 0xAD3000
	007 Move W8, [X21+1844]
	008 Move X20, [X20+1128]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xAD3000
	015 Move X0, [X0+1128]
	016 Call 0x1C17CF4
	017 Move X0, 0xAD3000
	018 Move X0, [X0+1256]
	019 Call 0x1C17CF4
	020 Move X0, 0xAD3000
	021 Move X0, [X0+1264]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1844], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Call NetEventSource.get_IsEnabled
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {48}
	035 Move X0, [X20]
	036 Move X21, 0xAD3000
	037 Move X20, 0xAD3000
	038 Move W8, [X0+224]
	039 Move X21, [X21+1264]
	040 Move X20, [X20+1256]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X1, [X21]
	045 Move X2, [X20]
	046 Move X0, X19
	047 Call NetEventSource.Info, X0, X1, X2
	048 Move X0, X19
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X1, X31
	052 Move X2, X31
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call LazyAsyncResult.Complete, X0, X1
	056 Return 

