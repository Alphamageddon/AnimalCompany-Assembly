Type: System.Net.ServicePointManager/SPKey

Method: System.Void .ctor(System.Uri uri, System.Uri proxy, System.Boolean use_connect)

Disassembly:
	0x036A71A8 ADRP X8, 0xA97000
	0x036A71AC LDR X21, [X21 + 0x40]
	0x036A71B0 LDR X2, [X20 + 0x18]
	0x036A71B4 LDR X8, [X8 + 0xD88]
	0x036A71B8 MOV X3, X0
	0x036A71BC ADD X0, X31, 0x8
	0x036A71C0 MOV X1, X19
	0x036A71C4 LDR X4, [X8]
	0x036A71C8 STP X31, X31, [X31 + 0x8]
	0x036A71CC STR X31, [X31 + 0x18]
	0x036A71D0 BL 0x27C14F8
	0x036A71D4 CBZ X21, 0x36A721C
	0x036A71D8 ADRP X8, 0xA97000
	0x036A71DC LDR X8, [X8 + 0xD70]
	0x036A71E0 LDUR V0, [X31 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, X1
	007 Move X1, X31
	008 Move X19, X2
	009 Move X21, X0
	010 And W22, W3, 1
	011 Call Object..ctor, X0
	012 Move [X21+16], X20
	013 Move [X21+24], X19
	014 Move [X21+32], W22
	015 Move X20, [X31+32]
	016 Move X19, [X31+40]
	017 Move X22, [X31+16]
	018 Move X21, [X31+24]
	019 Move X30, [X31+48]
	020 Return 

Method: System.Boolean get_UsesProxy()

Disassembly:
	0x036A7680 BL 0x1C16CF4
	0x036A7684 ADRP X0, 0xA97000
	0x036A7688 LDR X0, [X0 + 0xE18]
	0x036A768C BL 0x1C16CF4
	0x036A7690 MOVZ W8, 0x1
	0x036A7694 STRB W8, [X20 + 0x91C]
	0x036A7698 LDR X8, [X19 + 0x30]
	0x036A769C CBZ X8, 0x36A7728
	0x036A76A0 LDR X21, [X8 + 0x10]
	0x036A76A4 CBZ X21, 0x36A770C
	0x036A76A8 ADRP X23, 0xA97000
	0x036A76AC ADRP X24, 0xA97000
	0x036A76B0 LDR X23, [X23 + 0xE00]
	0x036A76B4 LDR X24, [X24 + 0xE10]
	0x036A76B8 LDR X1, [X23]
	0x036A76BC LDR X20, [X21 + 0x28]
	0x036A76C0 MOV X0, X21
	0x036A76C4 BL 0x2EEA710
	0x036A76C8 CBZ X20, 0x36A7728
	0x036A76CC MOV X22, X0
	0x036A76D0 MOV X0, X20
	0x036A76D4 MOV X1, X31
	0x036A76D8 BL 0x36ACC30
	0x036A76DC TBZ X0, 0x0, 0x36A7710

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD3A000
	006 Move X20, 0xA4F000
	007 Move W8, [X21+2310]
	008 Move X20, [X20+2600]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA4F000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2310], W8
	019 Move X0, [X20]
	020 Move X19, [X19+24]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X2, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Uri.op_Inequality, X0, X1
	033 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x036A76E0 LDR X0, [X19 + 0x30]
	0x036A76E4 CBZ X0, 0x36A7728
	0x036A76E8 LDR X2, [X24]
	0x036A76EC MOV X1, X21
	0x036A76F0 BL 0x2EED4A4
	0x036A76F4 LDR X0, [X19 + 0x10]
	0x036A76F8 CBZ X0, 0x36A7728
	0x036A76FC MOV X1, X20
	0x036A7700 BL 0x36A772C
	0x036A7704 MOV X21, X22
	0x036A7708 CBNZ X22, 0x36A76B8
	0x036A770C MOV X20, X31
	0x036A7710 MOV X0, X20
	0x036A7714 LDP X20, X19, [X31 + 0x30]
	0x036A7718 LDP X22, X21, [X31 + 0x20]
	0x036A771C LDP X24, X23, [X31 + 0x10]
	0x036A7720 LDR X30, [X31], #0x40
	0x036A7724 RET
	0x036A7728 BL 0x1C16F20
	0x036A772C STR X30, [X31 - 0x40]!
	0x036A7730 STP X24, X23, [X31 + 0x10]
	0x036A7734 STP X22, X21, [X31 + 0x20]
	0x036A7738 STP X20, X19, [X31 + 0x30]
	0x036A773C ADRP X21, 0xD39000
	0x036A7740 LDRB W8, [X21 + 0x910]
	0x036A7744 MOV X19, X1
	0x036A7748 MOV X20, X0
	0x036A774C TBNZ X8, 0x0, 0x36A7788
	0x036A7750 ADRP X0, 0xA97000
	0x036A7754 LDR X0, [X0 + 0xE20]
	0x036A7758 BL 0x1C16CF4
	0x036A775C ADRP X0, 0xA97000
	0x036A7760 LDR X0, [X0 + 0xE28]
	0x036A7764 BL 0x1C16CF4
	0x036A7768 ADRP X0, 0xA97000
	0x036A776C LDR X0, [X0 + 0xE30]
	0x036A7770 BL 0x1C16CF4
	0x036A7774 ADRP X0, 0xA97000
	0x036A7778 LDR X0, [X0 + 0xE38]
	0x036A777C BL 0x1C16CF4
	0x036A7780 MOVZ W8, 0x1
	0x036A7784 STRB W8, [X21 + 0x910]
	0x036A7788 LDR X8, [X20 + 0x38]
	0x036A778C CBZ X8, 0x36A77F4
	0x036A7790 LDR X21, [X8 + 0x10]
	0x036A7794 CBZ X21, 0x36A77E0
	0x036A7798 ADRP X23, 0xA97000
	0x036A779C ADRP X24, 0xA97000
	0x036A77A0 LDR X23, [X23 + 0xE20]
	0x036A77A4 LDR X24, [X24 + 0xE30]
	0x036A77A8 LDR X1, [X23]
	0x036A77AC MOV X0, X21
	0x036A77B0 BL 0x2EEA604

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD3A000
	007 Move W8, [X20+2311]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA4F000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2311], W8
	018 Move X0, [X19+16]
	019 Compare X0, 0
	020 JumpIfEqual {71}
	021 Move X8, [X0]
	022 Move X20, 0xA4F000
	023 Move W22, [X19+32]
	024 Move X9, [X8+344]
	025 Move X1, [X8+352]
	026 Move X20, [X20+2600]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X8, [X20]
	029 Move X21, [X19+24]
	030 Move W20, W0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X21
	037 Move X1, X31
	038 Move X2, X31
	039 Call Uri.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {51}
	044 Move X0, [X19+24]
	045 Compare X0, 0
	046 JumpIfEqual {71}
	047 Move X8, [X0]
	048 Move X9, [X8+344]
	049 Move X1, [X8+352]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move W0, W31
	052 Move W8, W22
	053 ShiftRight W8, 27
	054 And W8, W8, 0x3FFFFFF
	055 Subtract W8, W8, W22
	056 Add W8, W8, W20
	057 Move W9, W8
	058 ShiftRight W9, 27
	059 And W9, W9, 0x3FFFFFF
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Subtract W8, W9, W8
	065 Move W9, 0x7489
	066 Add W8, W8, W0
	067 NotImplemented "Instruction MOVK not yet implemented."
	068 Add W0, W8, W9
	069 Move X30, [X31+48]
	070 Return X0
	071 Call 0x1C17F20

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x036A77B4 LDR X8, [X21 + 0x30]
	0x036A77B8 MOV X22, X0
	0x036A77BC CMP X8, X19
	0x036A77C0 B.NE 0x36A77D8
	0x036A77C4 LDR X0, [X20 + 0x38]
	0x036A77C8 CBZ X0, 0x36A77F4
	0x036A77CC LDR X2, [X24]
	0x036A77D0 MOV X1, X21
	0x036A77D4 BL 0x2EEB138
	0x036A77D8 MOV X21, X22
	0x036A77DC CBNZ X22, 0x36A77A8
	0x036A77E0 LDP X20, X19, [X31 + 0x30]
	0x036A77E4 LDP X22, X21, [X31 + 0x20]
	0x036A77E8 LDP X24, X23, [X31 + 0x10]
	0x036A77EC LDR X30, [X31], #0x40
	0x036A77F0 RET
	0x036A77F4 BL 0x1C16F20
	0x036A77F8 STR X30, [X31 - 0x20]!
	0x036A77FC STP X20, X19, [X31 + 0x10]
	0x036A7800 ADRP X20, 0xD39000
	0x036A7804 LDRB W8, [X20 + 0x912]
	0x036A7808 MOV X19, X0
	0x036A780C TBNZ X8, 0x0, 0x36A7824
	0x036A7810 ADRP X0, 0xA7A000
	0x036A7814 LDR X0, [X0 + 0x230]
	0x036A7818 BL 0x1C16CF4
	0x036A781C MOVZ W8, 0x1
	0x036A7820 STRB W8, [X20 + 0x912]
	0x036A7824 LDR X20, [X19 + 0x10]
	0x036A7828 MOVI V0.2D, 0x0
	0x036A782C STUR V0, [X19 + 0x38]
	0x036A7830 STUR V0, [X19 + 0x28]
	0x036A7834 CBZ X20, 0x36A7874
	0x036A7838 ADRP X8, 0xA7A000
	0x036A783C LDR X8, [X8 + 0x230]
	0x036A7840 MOVZ W9, 0x1
	0x036A7844 STRB W9, [X20 + 0x5C]
	0x036A7848 STR X31, [X20 + 0x70]
	0x036A784C LDR X0, [X8]
	0x036A7850 LDR W8, [X0 + 0xE0]
	0x036A7854 CBNZ W8, 0x36A785C
	0x036A7858 BL 0x1C16DFC
	0x036A785C MOV X0, X20
	0x036A7860 BL 0x36A65E8
	0x036A7864 STR X31, [X19 + 0x10]
	0x036A7868 LDP X20, X19, [X31 + 0x10]
	0x036A786C LDR X30, [X31], #0x20
	0x036A7870 RET
	0x036A7874 BL 0x1C16F20
	0x036A7878 SUB X31, X31, 0x40
	0x036A787C STR X30, [X31 + 0x10]
	0x036A7880 STP X22, X21, [X31 + 0x20]
	0x036A7884 STP X20, X19, [X31 + 0x30]
	0x036A7888 ADRP X19, 0xD39000
	0x036A788C LDRB W8, [X19 + 0x914]
	0x036A7890 MOV X20, X1
	0x036A7894 MOV X21, X0
	0x036A7898 TBNZ X8, 0x0, 0x36A78E0
	0x036A789C ADRP X0, 0xA97000
	0x036A78A0 LDR X0, [X0 + 0xC40]
	0x036A78A4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD3A000
	006 Move W8, [X21+2312]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA98000
	014 Move X0, [X0+2040]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2312], W8
	018 Compare X19, 0
	019 JumpIfEqual {56}
	020 Move X8, 0xA98000
	021 Move X8, [X8+2040]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 Move W11, [X9+304]
	025 Move W10, [X8+304]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X9+200]
	028 Add X9, X9, X10
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, [X20+16]
	032 Compare X0, 0
	033 JumpIfEqual {81}
	034 Move X8, [X0]
	035 Move X1, [X19+16]
	036 Move X9, [X8+312]
	037 Move X2, [X8+320]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {56}
	043 Move W8, [X20+32]
	044 Move W9, [X19+32]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X20
	047 Call SPKey.get_UsesProxy, X0
	048 Move W21, W0
	049 Move X0, X19
	050 Call SPKey.get_UsesProxy, X0
	051 Xor W8, W21, W0
	052 Move TEMP, X8
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {62}
	056 Move W0, W31
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Move X0, X20
	063 Call SPKey.get_UsesProxy, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {80}
	068 Move X0, [X20+24]
	069 Compare X0, 0
	070 JumpIfEqual {81}
	071 Move X8, [X0]
	072 Move X1, [X19+24]
	073 Move X9, [X8+312]
	074 Move X2, [X8+320]
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {56}
	080 Move W0, 1
	081 Call 0x1C17F20

