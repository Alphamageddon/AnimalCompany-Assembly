Type: System.Net.BufferOffsetSize

Method: System.Void .ctor(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Boolean copyBuffer)

Disassembly:
	0x0368603C BL 0x1C16F10
	0x03686040 LDR X25, [X20]
	0x03686044 MOV X1, X31
	0x03686048 MOV X20, X0
	0x0368604C BL 0x33BDD8C
	0x03686050 STRH W31, [X20 + 0x10]
	0x03686054 STP X24, X25, [X20 + 0x18]
	0x03686058 STRB W31, [X20 + 0x28]
	0x0368605C LDR X8, [X19]
	0x03686060 MOV X0, X20
	0x03686064 LDR X1, [X8 + 0x40]
	0x03686068 BL 0x1C16E00
	0x0368606C CBZ X0, 0x3686C78
	0x03686070 LDR W8, [X23]
	0x03686074 CMP W8, 0x15
	0x03686078 B.LS 0x3686C74
	0x0368607C STR X20, [X19 + 0xC8]
	0x03686080 LDR X8, [X22]
	0x03686084 LDR X0, [X21]
	0x03686088 ADRP X20, 0xAB4000
	0x0368608C LDR X8, [X8 + 0xB8]
	0x03686090 LDR X24, [X8 + 0x10]
	0x03686094 LDR X20, [X20 + 0xA70]
	0x03686098 BL 0x1C16F10
	0x0368609C LDR X25, [X20]
	0x036860A0 MOV X1, X31
	0x036860A4 MOV X20, X0
	0x036860A8 BL 0x33BDD8C
	0x036860AC STRH W31, [X20 + 0x10]
	0x036860B0 STP X24, X25, [X20 + 0x18]
	0x036860B4 STRB W31, [X20 + 0x28]
	0x036860B8 LDR X8, [X19]
	0x036860BC MOV X0, X20
	0x036860C0 LDR X1, [X8 + 0x40]
	0x036860C4 BL 0x1C16E00
	0x036860C8 CBZ X0, 0x3686C78
	0x036860CC LDR W8, [X23]
	0x036860D0 CMP W8, 0x16
	0x036860D4 B.LS 0x3686C74
	0x036860D8 STR X20, [X19 + 0xD0]
	0x036860DC LDR X8, [X22]
	0x036860E0 LDR X0, [X21]
	0x036860E4 ADRP X20, 0xAB4000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xD5B000
	009 Move W8, [X24+2061]
	010 Move W23, W4
	011 Move W19, W3
	012 Move W21, W2
	013 Move X22, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xA6E000
	020 Move X0, [X0+1560]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X24+2061], W8
	024 Move X0, X20
	025 Move X1, X31
	026 Call Object..ctor, X0
	027 Move TEMP, X23
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {46}
	031 Move X8, 0xA6E000
	032 Move X8, [X8+1560]
	033 Move W1, W19
	034 Move X0, [X8]
	035 Call 0x1C17D6C
	036 Move X23, X0
	037 Move X0, X22
	038 Move W1, W21
	039 Move X2, X23
	040 Move W3, W31
	041 Move W4, W19
	042 Move X5, X31
	043 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	044 Move W21, W31
	045 Move X22, X23
	046 Move [X20+16], X22
	047 Move [X20+24], W21
	048 Move [X20+28], W19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Return 

Method: System.Void .ctor(System.Byte[] buffer, System.Boolean copyBuffer)

Disassembly:
	0x036860E8 LDR X8, [X8 + 0xB8]
	0x036860EC LDR X24, [X8 + 0x10]
	0x036860F0 LDR X20, [X20 + 0x188]
	0x036860F4 BL 0x1C16F10
	0x036860F8 LDR X25, [X20]
	0x036860FC MOV X1, X31
	0x03686100 MOV X20, X0
	0x03686104 BL 0x33BDD8C

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {10}
	004 Move W3, [X1+24]
	005 And W4, W2, 1
	006 Move W2, W31
	007 Move X30, [X31+16]
	008 Call BufferOffsetSize..ctor, X0, X1, X2, X3, X4
	009 Return 
	010 Call 0x1C17F20

