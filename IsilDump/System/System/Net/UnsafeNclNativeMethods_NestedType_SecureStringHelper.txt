Type: System.Net.UnsafeNclNativeMethods/SecureStringHelper

Method: System.String CreateString(System.Security.SecureString secureString)

Disassembly:
	0x03697704 LDR X10, [X8 + 0xB0]
	0x03697708 ADD X10, X10, 0x8
	0x0369770C LDUR X11, [X10 - 0x8]
	0x03697710 CMP X11, X1
	0x03697714 B.EQ 0x3697750
	0x03697718 SUBS X9, X9, 0x1
	0x0369771C ADD X10, X10, 0x10
	0x03697720 B.NE 0x369770C
	0x03697724 MOVZ W2, 0x2
	0x03697728 MOV X0, X24
	0x0369772C BL 0x1C5C788
	0x03697730 B 0x3697760
	0x03697734 MOV X0, X31
	0x03697738 B 0x369781C
	0x0369773C MOV X21, X31
	0x03697740 MOV W24, W31
	0x03697744 MOV X23, X31
	0x03697748 MOVZ W22, 0x9
	0x0369774C B 0x369777C
	0x03697750 LDR W9, [X10]
	0x03697754 ADD W9, W9, 0x2
	0x03697758 ADD X8, X8, W9, 0x4, SXTW
	0x0369775C ADD X0, X8, 0x138
	0x03697760 LDP X8, X1, [X0]
	0x03697764 MOV X0, X24
	0x03697768 BLR X8
	0x0369776C MOV X21, X31
	0x03697770 MOV W24, W31
	0x03697774 STR X0, [X23 + 0x20]
	0x03697778 MOVZ W22, 0x8
	0x0369777C LDR X1, [X26]
	0x03697780 MOV X0, X20
	0x03697784 BL 0x1C16E00
	0x03697788 MOV X20, X0
	0x0369778C CBZ X0, 0x36977E8
	0x03697790 LDR X8, [X20]
	0x03697794 LDR X1, [X26]
	0x03697798 LDRH W9, [X8 + 0x12E]
	0x0369779C CBZ X9, 0x36977C0
	0x036977A0 LDR X10, [X8 + 0xB0]
	0x036977A4 ADD X10, X10, 0x8
	0x036977A8 LDUR X11, [X10 - 0x8]
	0x036977AC CMP X11, X1
	0x036977B0 B.EQ 0x36977D0
	0x036977B4 SUBS X9, X9, 0x1
	0x036977B8 ADD X10, X10, 0x10
	0x036977BC B.NE 0x36977A8
	0x036977C0 MOV X0, X20
	0x036977C4 MOV W2, W31
	0x036977C8 BL 0x1C5C788
	0x036977CC B 0x36977DC
	0x036977D0 LDRSW X9, [X10]
	0x036977D4 ADD X8, X8, X9, 0x4, LSL
	0x036977D8 ADD X0, X8, 0x138
	0x036977DC LDP X8, X1, [X0]
	0x036977E0 MOV X0, X20
	0x036977E4 BLR X8
	0x036977E8 CBNZ X21, 0x36978A0
	0x036977EC MOV X20, X31
	0x036977F0 TBZ X24, 0x0, 0x36977FC
	0x036977F4 MOV W22, W31
	0x036977F8 MOV X21, X20
	0x036977FC LDRB W8, [X31 + 0xC]
	0x03697800 CBZ W8, 0x3697810
	0x03697804 MOV X0, X19
	0x03697808 MOV X1, X31
	0x0369780C BL 0x33E14E4
	0x03697810 CBNZ X21, 0x3697890
	0x03697814 CMP W22, 0x8
	0x03697818 CSEL X0, X23, X31, EQ
	0x0369781C LDP X20, X19, [X31 + 0x50]
	0x03697820 LDP X22, X21, [X31 + 0x40]
	0x03697824 LDP X24, X23, [X31 + 0x30]
	0x03697828 LDP X26, X25, [X31 + 0x20]
	0x0369782C LDP X28, X27, [X31 + 0x10]
	0x03697830 LDR X30, [X31], #0x60
	0x03697834 RET
	0x03697838 BL 0x1C16F20
	0x0369783C MOV X0, X23
	0x03697840 MOV X1, X25
	0x03697844 BL 0x1C171E0
	0x03697848 ADRP X0, 0xA61000
	0x0369784C LDR X0, [X0 + 0x528]
	0x03697850 BL 0x1C16D08
	0x03697854 BL 0x1C16F10
	0x03697858 MOV X19, X0
	0x0369785C ADRP X0, 0xAA3000
	0x03697860 LDR X0, [X0 + 0x3D8]
	0x03697864 BL 0x1C16D08
	0x03697868 MOV X1, X0
	0x0369786C MOV X0, X19
	0x03697870 MOV X2, X31
	0x03697874 BL 0x330E100

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xD4A000
	007 Move W8, [X20+2177]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xA85000
	014 Move X0, [X0+2128]
	015 Call 0x1C17CF4
	016 Move X0, 0xA5F000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2177], W8
	021 Compare X19, 0
	022 JumpIfEqual {63}
	023 Move X0, X19
	024 Move X1, X31
	025 Call SecureString.get_Length, X0
	026 Compare W0, 0
	027 JumpIfEqual {63}
	028 Move X22, 0xA85000
	029 Move X22, [X22+2128]
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X1, X31
	037 Call Marshal.SecureStringToGlobalAllocUnicode, X0
	038 Move X19, X0
	039 Move X1, X31
	040 Call Marshal.PtrToStringUni, X0
	041 Move X21, X0
	042 Move X20, X31
	043 Move X0, X19
	044 Move X1, X31
	045 Move X2, X31
	046 Call IntPtr.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {59}
	051 Move X0, [X22]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X19
	057 Move X1, X31
	058 Call Marshal.ZeroFreeGlobalAllocUnicode, X0
	059 Compare X20, 0
	060 JumpIfEqual {68}
	061 Move X0, X20
	062 Call 0x1C17F18
	063 Move X8, 0xA5F000
	064 Move X8, [X8+632]
	065 Move X8, [X8]
	066 Move X8, [X8+184]
	067 Move X21, [X8]
	068 Move X0, X21
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Return X0
	075 Move X21, X0
	076 Move X21, X0
	077 Move X19, X31
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, X21
	080 Call 0x3EB2AD0
	081 Move X20, [X0]
	082 Call 0x3EB2AE0
	083 Move X21, X31
	084 Move X20, X31
	085 Move X21, X0
	086 Move X0, X19
	087 Move X1, X31
	088 Move X2, X31
	089 Call IntPtr.op_Inequality, X0, X1
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {102}
	094 Move X0, [X22]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X19
	100 Move X1, X31
	101 Call Marshal.ZeroFreeGlobalAllocUnicode, X0
	102 Compare X20, 0
	103 JumpIfNotEqual {106}
	104 Move X0, X21
	105 Call 0x1D2D690
	106 Move X0, X20
	107 Call 0x1C17F18
	108 Call 0x1991590

Method: System.Security.SecureString CreateSecureString(System.String plainString)

Disassembly:
	0x03697878 ADRP X0, 0xAA7000
	0x0369787C LDR X0, [X0 + 0x5D8]
	0x03697880 BL 0x1C16D08
	0x03697884 MOV X1, X0
	0x03697888 MOV X0, X19
	0x0369788C BL 0x1C16DEC
	0x03697890 MOV X0, X21
	0x03697894 BL 0x1C16F18
	0x03697898 BL 0x1C16F20
	0x0369789C BL 0x1C16F20
	0x036978A0 MOV X0, X21
	0x036978A4 BL 0x1C16F18
	0x036978A8 B 0x36978E0
	0x036978AC B 0x36978E0
	0x036978B0 B 0x36978B8
	0x036978B4 B 0x36978B8
	0x036978B8 MOV X22, X1
	0x036978BC MOV X24, X0
	0x036978C0 B 0x3697984
	0x036978C4 MOV X22, X1
	0x036978C8 MOV X24, X0
	0x036978CC B 0x3697988
	0x036978D0 B 0x36978E0
	0x036978D4 B 0x36978E0
	0x036978D8 B 0x36978E0
	0x036978DC B 0x36978E0
	0x036978E0 MOV X24, X0
	0x036978E4 CMP W1, 0x1
	0x036978E8 B.NE 0x369790C
	0x036978EC MOV X0, X24
	0x036978F0 BL 0x3EB1AD0
	0x036978F4 LDR X21, [X0]
	0x036978F8 BL 0x3EB1AE0
	0x036978FC MOV W22, W31
	0x03697900 MOV X23, X31
	0x03697904 MOVZ W24, 0x1
	0x03697908 B 0x369777C
	0x0369790C MOV X22, X1
	0x03697910 MOV X21, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xD4A000
	006 Move W8, [X20+2178]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xAA8000
	013 Move X0, [X0+1408]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2178], W8
	017 Move X21, 0xAA8000
	018 Move X21, [X21+1408]
	019 Compare X19, 0
	020 JumpIfEqual {37}
	021 Move W8, [X19+16]
	022 Compare W8, 0
	023 JumpIfEqual {37}
	024 Move X0, X31
	025 Call RuntimeHelpers.get_OffsetToStringData
	026 Move X8, [X21]
	027 Move W20, [X19+16]
	028 Add X19, X19, W0
	029 Move X0, X8
	030 Call 0x1C17F10
	031 Move X1, X19
	032 Move W2, W20
	033 Move X3, X31
	034 Move X21, X0
	035 Call SecureString..ctor, X0, X1, X2
	036 Move X0, X21
	037 Move X0, [X21]
	038 Call 0x1C17F10
	039 Move X1, X31
	040 Move X19, X0
	041 Call SecureString..ctor, X0
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

