Type: System.UriBuilder

Method: System.Void .ctor(System.String uri)

Disassembly:
	0x03628EE0 LDR X8, [X19 + 0x30]
	0x03628EE4 CMP W9, 0x8
	0x03628EE8 STR X8, [X21 + 0x58]
	0x03628EEC B.EQ 0x3628F24
	0x03628EF0 LDR X8, [X19 + 0x40]
	0x03628EF4 CMP W9, 0x9
	0x03628EF8 STR X8, [X21 + 0x60]
	0x03628EFC B.LS 0x3628F24
	0x03628F00 LDR X8, [X19 + 0x18]
	0x03628F04 MOV X0, X21
	0x03628F08 LDP X20, X19, [X31 + 0x20]
	0x03628F0C MOV X1, X31
	0x03628F10 STR X8, [X21 + 0x68]
	0x03628F14 LDP X22, X21, [X31 + 0x10]
	0x03628F18 LDP X30, X23, [X31], #0x30
	0x03628F1C B 0x32278CC
	0x03628F20 BL 0x1C16F20
	0x03628F24 BL 0x1C16F28
	0x03628F28 ADRP X0, 0xB13000
	0x03628F2C LDR X0, [X0 + 0xD8]
	0x03628F30 BL 0x1C16D08
	0x03628F34 BL 0x1C16F10
	0x03628F38 MOV X19, X0
	0x03628F3C ADRP X0, 0xB13000
	0x03628F40 LDR X0, [X0 + 0x448]
	0x03628F44 BL 0x1C16D08
	0x03628F48 MOV X1, X0
	0x03628F4C MOV X0, X19
	0x03628F50 BL 0x3628F6C
	0x03628F54 ADRP X0, 0xB13000
	0x03628F58 LDR X0, [X0 + 0x450]
	0x03628F5C BL 0x1C16D08
	0x03628F60 MOV X1, X0
	0x03628F64 MOV X0, X19
	0x03628F68 BL 0x1C16DEC
	0x03628F6C MOV X2, X31
	0x03628F70 B 0x33674A0
	0x03628F74 SUB X31, X31, 0x30
	0x03628F78 STP X30, X21, [X31 + 0x10]
	0x03628F7C STP X20, X19, [X31 + 0x20]
	0x03628F80 ADRP X21, 0xDB8000
	0x03628F84 ADRP X20, 0xB13000
	0x03628F88 LDRB W8, [X21 + 0x4FA]
	0x03628F8C LDR X20, [X20 + 0x48]
	0x03628F90 MOV X19, X0
	0x03628F94 TBNZ X8, 0x0, 0x3628FB8
	0x03628F98 ADRP X0, 0xB13000
	0x03628F9C LDR X0, [X0 + 0x458]
	0x03628FA0 BL 0x1C16CF4
	0x03628FA4 ADRP X0, 0xB13000
	0x03628FA8 LDR X0, [X0 + 0x48]
	0x03628FAC BL 0x1C16CF4
	0x03628FB0 MOVZ W8, 0x1
	0x03628FB4 STRB W8, [X21 + 0x4FA]
	0x03628FB8 LDR X0, [X20]
	0x03628FBC STR X31, [X31 + 0x8]
	0x03628FC0 LDR W8, [X0 + 0xE0]
	0x03628FC4 CBNZ W8, 0x3628FD0
	0x03628FC8 BL 0x1C16DFC
	0x03628FCC LDR X0, [X20]
	0x03628FD0 LDR X8, [X0 + 0xB8]
	0x03628FD4 LDR X0, [X8]
	0x03628FD8 CBZ X0, 0x3629040
	0x03628FDC ADRP X21, 0xB13000
	0x03628FE0 LDR X21, [X21 + 0x458]
	0x03628FE4 ADD X2, X31, 0x8
	0x03628FE8 MOV X1, X19
	0x03628FEC LDR X3, [X21]
	0x03628FF0 BL 0x2AA6B2C
	0x03628FF4 LDR X0, [X31 + 0x8]
	0x03628FF8 CBNZ X0, 0x3629030
	0x03628FFC LDR X0, [X20]
	0x03629000 LDR W8, [X0 + 0xE0]
	0x03629004 CBNZ W8, 0x3629010
	0x03629008 BL 0x1C16DFC
	0x0362900C LDR X0, [X20]
	0x03629010 LDR X8, [X0 + 0xB8]
	0x03629014 LDR X0, [X8 + 0x8]
	0x03629018 CBZ X0, 0x3629040
	0x0362901C LDR X3, [X21]
	0x03629020 ADD X2, X31, 0x8
	0x03629024 MOV X1, X19
	0x03629028 BL 0x2AA6B2C
	0x0362902C LDR X0, [X31 + 0x8]
	0x03629030 LDP X20, X19, [X31 + 0x20]
	0x03629034 LDP X30, X21, [X31 + 0x10]
	0x03629038 ADD X31, X31, 0x30
	0x0362903C RET
	0x03629040 BL 0x1C16F20
	0x03629044 STR X30, [X31 - 0x10]!
	0x03629048 MOV W2, W31
	0x0362904C BL 0x362CA94
	0x03629050 ORN W8, W31, W0, 0x0
	0x03629054 AND W0, W8, 0x1
	0x03629058 LDR X30, [X31], #0x10
	0x0362905C RET
	0x03629060 MOV W2, W31
	0x03629064 B 0x362CA94
	0x03629068 SUB W8, W0, 0xA0
	0x0362906C UBFM W8, W8, 0x5, 0xF
	0x03629070 CMP W8, 0x6BB
	0x03629074 MOVZ W8, 0x1
	0x03629078 B.CC 0x36290B8
	0x0362907C ADD W9, W0, 0x700
	0x03629080 AND W9, W9, 0xFFFF

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0xDB9000
	011 Move X21, 0xACE000
	012 Move X25, 0xB14000
	013 Move X24, 0xACD000
	014 Move X23, 0xB08000
	015 Move X22, 0xACE000
	016 Move W8, [X26+1244]
	017 Move X21, [X21+632]
	018 Move X25, [X25+1064]
	019 Move X24, [X24+3784]
	020 Move X23, [X23+1512]
	021 Move X22, [X22+2600]
	022 Move X20, X1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {45}
	028 Move X0, 0xACE000
	029 Move X0, [X0+632]
	030 Call 0x1C17CF4
	031 Move X0, 0xACE000
	032 Move X0, [X0+2600]
	033 Call 0x1C17CF4
	034 Move X0, 0xB08000
	035 Move X0, [X0+1512]
	036 Call 0x1C17CF4
	037 Move X0, 0xB14000
	038 Move X0, [X0+1064]
	039 Call 0x1C17CF4
	040 Move X0, 0xACD000
	041 Move X0, [X0+3784]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X26+1244], W8
	045 Move W8, 1
	046 Move [X19+16], W8
	047 Move X8, [X21]
	048 Move X9, [X25]
	049 Move TEMP, 0
	050 Not TEMP
	051 Move W10, TEMP
	052 Move X8, [X8+184]
	053 Move X8, [X8]
	054 Move [X19+24], X8
	055 Move [X19+32], X9
	056 Move X9, [X24]
	057 Move [X19+56], W10
	058 Move [X19+40], X8
	059 Move [X19+48], X9
	060 Move X9, [X23]
	061 Move [X19+64], X8
	062 Move [X19+72], X9
	063 Move X0, [X22]
	064 Move W9, [X0+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {72}
	067 Call 0x1C17DFC
	068 Move X8, [X21]
	069 Move X0, [X22]
	070 Move X8, [X8+184]
	071 Move X8, [X8]
	072 Move X9, [X0+184]
	073 Move X0, X19
	074 Move X1, X31
	075 Move X9, [X9+96]
	076 Move [X19+96], X8
	077 Move [X19+80], X9
	078 Call Object..ctor, X0
	079 Move X0, [X22]
	080 Call 0x1C17F10
	081 Move X1, X20
	082 Move W2, W31
	083 Move X3, X31
	084 Move X21, X0
	085 Call Uri..ctor, X0, X1, X2
	086 Compare X21, 0
	087 JumpIfEqual {126}
	088 Move X0, X21
	089 Move X1, X31
	090 Call Uri.get_IsAbsoluteUri, X0
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfEqual {115}
	095 Move X0, [X22]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {101}
	099 Call 0x1C17DFC
	100 Move X0, [X22]
	101 Move X8, [X0+184]
	102 Move X2, X20
	103 Move X3, X31
	104 Move X0, [X8+24]
	105 Move X1, [X8+96]
	106 Call String.Concat, X0, X1, X2
	107 Move X8, [X22]
	108 Move X20, X0
	109 Move X0, X8
	110 Call 0x1C17F10
	111 Move X1, X20
	112 Move X2, X31
	113 Move X21, X0
	114 Call Uri..ctor, X0, X1
	115 Move X0, X19
	116 Move X1, X21
	117 Move X20, [X31+64]
	118 Move X19, [X31+72]
	119 Move X22, [X31+48]
	120 Move X21, [X31+56]
	121 Move X24, [X31+32]
	122 Move X23, [X31+40]
	123 Move X26, [X31+16]
	124 Move X25, [X31+24]
	125 Move X30, [X31+80]
	126 Call 0x1C17F20

Method: System.Void .ctor(System.Uri uri)

Disassembly:
	0x036291F8 BL 0x1C16CF4
	0x036291FC ADRP X0, 0xB12000
	0x03629200 LDR X0, [X0 + 0x500]
	0x03629204 BL 0x1C16CF4
	0x03629208 ADRP X0, 0xB12000
	0x0362920C LDR X0, [X0 + 0x508]
	0x03629210 BL 0x1C16CF4
	0x03629214 ADRP X0, 0xB12000
	0x03629218 LDR X0, [X0 + 0x510]
	0x0362921C BL 0x1C16CF4
	0x03629220 ADRP X0, 0xB12000
	0x03629224 LDR X0, [X0 + 0x518]
	0x03629228 BL 0x1C16CF4
	0x0362922C ADRP X0, 0xB12000
	0x03629230 LDR X0, [X0 + 0x520]
	0x03629234 BL 0x1C16CF4
	0x03629238 ADRP X0, 0xB12000
	0x0362923C LDR X0, [X0 + 0x528]
	0x03629240 BL 0x1C16CF4
	0x03629244 ADRP X0, 0xB12000
	0x03629248 LDR X0, [X0 + 0x530]
	0x0362924C BL 0x1C16CF4
	0x03629250 ADRP X0, 0xB12000
	0x03629254 LDR X0, [X0 + 0x538]
	0x03629258 BL 0x1C16CF4
	0x0362925C ADRP X0, 0xB12000
	0x03629260 LDR X0, [X0 + 0x540]
	0x03629264 BL 0x1C16CF4
	0x03629268 ADRP X0, 0xB12000
	0x0362926C LDR X0, [X0 + 0x548]
	0x03629270 BL 0x1C16CF4
	0x03629274 ADRP X0, 0xB12000
	0x03629278 LDR X0, [X0 + 0x550]
	0x0362927C BL 0x1C16CF4
	0x03629280 ADRP X0, 0xB12000
	0x03629284 LDR X0, [X0 + 0x558]
	0x03629288 BL 0x1C16CF4
	0x0362928C MOVZ W8, 0x1
	0x03629290 STRB W8, [X24 + 0x4E7]
	0x03629294 STRB W31, [X22]
	0x03629298 LDR X0, [X23]
	0x0362929C LDR W8, [X0 + 0xE0]
	0x036292A0 CBNZ W8, 0x36292A8
	0x036292A4 BL 0x1C16DFC
	0x036292A8 MOV W0, W21
	0x036292AC MOV W1, W20
	0x036292B0 MOV X2, X31
	0x036292B4 BL 0x331C10C
	0x036292B8 TBZ X0, 0x0, 0x36296C8
	0x036292BC ADRP X8, 0xAD3000
	0x036292C0 LDR X8, [X8 + 0x8D8]
	0x036292C4 MOVZ W9, 0x1
	0x036292C8 STRB W9, [X22]
	0x036292CC MOVZ W1, 0x2
	0x036292D0 LDR X0, [X8]
	0x036292D4 BL 0x1C16D6C
	0x036292D8 CBZ X0, 0x36296EC
	0x036292DC LDR W8, [X0 + 0x18]
	0x036292E0 MOV X1, X0
	0x036292E4 CBZ W8, 0x36296E8
	0x036292E8 CMP W8, 0x1
	0x036292EC STRH W21, [X1 + 0x20]
	0x036292F0 B.EQ 0x36296E8
	0x036292F4 MOV X0, X31
	0x036292F8 MOV X2, X31
	0x036292FC STRH W20, [X1 + 0x22]
	0x03629300 BL 0x32256D4
	0x03629304 ADRP X8, 0xB12000
	0x03629308 LDR X8, [X8 + 0x480]
	0x0362930C MOV X2, X31
	0x03629310 MOV X20, X0
	0x03629314 LDR X1, [X8]
	0x03629318 BL 0x32261E8
	0x0362931C TBNZ X0, 0x1F, 0x3629340
	0x03629320 ADRP X8, 0xB12000
	0x03629324 LDR X8, [X8 + 0x4D0]
	0x03629328 MOV X0, X20
	0x0362932C MOV X2, X31
	0x03629330 LDR X1, [X8]
	0x03629334 BL 0x32261E8
	0x03629338 CMP W0, 0x1
	0x0362933C B.LT 0x36296D0
	0x03629340 ADRP X8, 0xB12000
	0x03629344 LDR X8, [X8 + 0x510]
	0x03629348 MOV X0, X20
	0x0362934C MOV X2, X31
	0x03629350 LDR X1, [X8]
	0x03629354 BL 0x32261E8
	0x03629358 TBNZ X0, 0x1F, 0x362937C
	0x0362935C ADRP X8, 0xB12000
	0x03629360 LDR X8, [X8 + 0x4C0]
	0x03629364 MOV X0, X20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0xDB8000
	011 Move X21, 0xACD000
	012 Move X25, 0xB13000
	013 Move X24, 0xACC000
	014 Move X23, 0xB07000
	015 Move X22, 0xACD000
	016 Move W8, [X26+1245]
	017 Move X21, [X21+632]
	018 Move X25, [X25+1064]
	019 Move X24, [X24+3784]
	020 Move X23, [X23+1512]
	021 Move X22, [X22+2600]
	022 Move X19, X1
	023 Move X20, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {45}
	028 Move X0, 0xACD000
	029 Move X0, [X0+632]
	030 Call 0x1C17CF4
	031 Move X0, 0xACD000
	032 Move X0, [X0+2600]
	033 Call 0x1C17CF4
	034 Move X0, 0xB07000
	035 Move X0, [X0+1512]
	036 Call 0x1C17CF4
	037 Move X0, 0xB13000
	038 Move X0, [X0+1064]
	039 Call 0x1C17CF4
	040 Move X0, 0xACC000
	041 Move X0, [X0+3784]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X26+1245], W8
	045 Move W8, 1
	046 Move [X20+16], W8
	047 Move X8, [X21]
	048 Move X9, [X25]
	049 Move TEMP, 0
	050 Not TEMP
	051 Move W10, TEMP
	052 Move X8, [X8+184]
	053 Move X8, [X8]
	054 Move [X20+24], X8
	055 Move [X20+32], X9
	056 Move X9, [X24]
	057 Move [X20+56], W10
	058 Move [X20+40], X8
	059 Move [X20+48], X9
	060 Move X9, [X23]
	061 Move [X20+64], X8
	062 Move [X20+72], X9
	063 Move X0, [X22]
	064 Move W9, [X0+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {72}
	067 Call 0x1C17DFC
	068 Move X8, [X21]
	069 Move X0, [X22]
	070 Move X8, [X8+184]
	071 Move X8, [X8]
	072 Move X9, [X0+184]
	073 Move X0, X20
	074 Move X1, X31
	075 Move X9, [X9+96]
	076 Move [X20+96], X8
	077 Move [X20+80], X9
	078 Call Object..ctor, X0
	079 Compare X19, 0
	080 JumpIfEqual {94}
	081 Move X0, X20
	082 Move X1, X19
	083 Move X20, [X31+64]
	084 Move X19, [X31+72]
	085 Move X22, [X31+48]
	086 Move X21, [X31+56]
	087 Move X24, [X31+32]
	088 Move X23, [X31+40]
	089 Move X26, [X31+16]
	090 Move X25, [X31+24]
	091 Move X30, [X31+80]
	092 Call UriBuilder.Init, X0, X1
	093 Return 
	094 Move X0, 0xAD0000
	095 Move X0, [X0+1320]
	096 Call 0x1C17D08
	097 Call 0x1C17F10
	098 Move X19, X0
	099 Move X0, 0xAFB000
	100 Move X0, [X0+3608]
	101 Call 0x1C17D08
	102 Move X1, X0
	103 Move X0, X19
	104 Move X2, X31
	105 Call ArgumentNullException..ctor, X0, X1
	106 Move X0, 0xB13000
	107 Move X0, [X0+1072]
	108 Call 0x1C17D08
	109 Move X1, X0
	110 Move X0, X19
	111 Call 0x1C17DEC

Method: System.Void Init(System.Uri uri)

Disassembly:
	0x03629084 CMP W9, 0x4D0
	0x03629088 B.CC 0x36290B8
	0x0362908C ADD W8, W0, 0x210
	0x03629090 AND W8, W8, 0xFFFF
	0x03629094 CMP W8, 0x200
	0x03629098 CSET W8, CC
	0x0362909C B.CC 0x36290B8
	0x036290A0 TBZ X1, 0x0, 0x36290B8
	0x036290A4 ADD W8, W0, 0x2000
	0x036290A8 UBFM W8, W8, 0x8, 0xF
	0x036290AC CMP W8, 0x19
	0x036290B0 CSET W0, CC
	0x036290B4 RET
	0x036290B8 MOV W0, W8
	0x036290BC RET
	0x036290C0 STR X30, [X31 - 0x40]!
	0x036290C4 STP X24, X23, [X31 + 0x10]
	0x036290C8 STP X22, X21, [X31 + 0x20]
	0x036290CC STP X20, X19, [X31 + 0x30]
	0x036290D0 ADRP X24, 0xDB7000
	0x036290D4 ADRP X23, 0xACC000
	0x036290D8 LDRB W8, [X24 + 0x4E7]
	0x036290DC LDR X23, [X23 + 0x170]
	0x036290E0 MOV W19, W3
	0x036290E4 MOV X22, X2
	0x036290E8 MOV W20, W1
	0x036290EC MOV W21, W0
	0x036290F0 TBNZ X8, 0x0, 0x3629294
	0x036290F4 ADRP X0, 0xAD3000
	0x036290F8 LDR X0, [X0 + 0x8D8]
	0x036290FC BL 0x1C16CF4
	0x03629100 ADRP X0, 0xACC000
	0x03629104 LDR X0, [X0 + 0x170]
	0x03629108 BL 0x1C16CF4
	0x0362910C ADRP X0, 0xB12000
	0x03629110 LDR X0, [X0 + 0x460]
	0x03629114 BL 0x1C16CF4
	0x03629118 ADRP X0, 0xB12000
	0x0362911C LDR X0, [X0 + 0x468]
	0x03629120 BL 0x1C16CF4
	0x03629124 ADRP X0, 0xB12000
	0x03629128 LDR X0, [X0 + 0x470]
	0x0362912C BL 0x1C16CF4
	0x03629130 ADRP X0, 0xB12000
	0x03629134 LDR X0, [X0 + 0x478]
	0x03629138 BL 0x1C16CF4
	0x0362913C ADRP X0, 0xB12000
	0x03629140 LDR X0, [X0 + 0x480]
	0x03629144 BL 0x1C16CF4
	0x03629148 ADRP X0, 0xB12000
	0x0362914C LDR X0, [X0 + 0x488]
	0x03629150 BL 0x1C16CF4
	0x03629154 ADRP X0, 0xB12000
	0x03629158 LDR X0, [X0 + 0x490]
	0x0362915C BL 0x1C16CF4
	0x03629160 ADRP X0, 0xB12000
	0x03629164 LDR X0, [X0 + 0x498]
	0x03629168 BL 0x1C16CF4
	0x0362916C ADRP X0, 0xB12000
	0x03629170 LDR X0, [X0 + 0x4A0]
	0x03629174 BL 0x1C16CF4
	0x03629178 ADRP X0, 0xB12000
	0x0362917C LDR X0, [X0 + 0x4A8]
	0x03629180 BL 0x1C16CF4
	0x03629184 ADRP X0, 0xB12000
	0x03629188 LDR X0, [X0 + 0x4B0]
	0x0362918C BL 0x1C16CF4
	0x03629190 ADRP X0, 0xB12000
	0x03629194 LDR X0, [X0 + 0x4B8]
	0x03629198 BL 0x1C16CF4
	0x0362919C ADRP X0, 0xB12000
	0x036291A0 LDR X0, [X0 + 0x4C0]
	0x036291A4 BL 0x1C16CF4
	0x036291A8 ADRP X0, 0xB12000
	0x036291AC LDR X0, [X0 + 0x4C8]
	0x036291B0 BL 0x1C16CF4
	0x036291B4 ADRP X0, 0xB12000
	0x036291B8 LDR X0, [X0 + 0x4D0]
	0x036291BC BL 0x1C16CF4
	0x036291C0 ADRP X0, 0xB12000
	0x036291C4 LDR X0, [X0 + 0x4D8]
	0x036291C8 BL 0x1C16CF4
	0x036291CC ADRP X0, 0xB12000
	0x036291D0 LDR X0, [X0 + 0x4E0]
	0x036291D4 BL 0x1C16CF4
	0x036291D8 ADRP X0, 0xB12000
	0x036291DC LDR X0, [X0 + 0x4E8]
	0x036291E0 BL 0x1C16CF4
	0x036291E4 ADRP X0, 0xB12000
	0x036291E8 LDR X0, [X0 + 0x4F0]
	0x036291EC BL 0x1C16CF4
	0x036291F0 ADRP X0, 0xB12000
	0x036291F4 LDR X0, [X0 + 0x4F8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDB8000
	007 Move W8, [X21+1246]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xACD000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0xAD4000
	018 Move X0, [X0+2440]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1246], W8
	022 Compare X19, 0
	023 JumpIfEqual {108}
	024 Move X0, X19
	025 Move X1, X31
	026 Call Uri.get_Fragment, X0
	027 Move [X20+24], X0
	028 Move X0, X19
	029 Move X1, X31
	030 Call Uri.get_Query, X0
	031 Move [X20+64], X0
	032 Move X0, X19
	033 Move X1, X31
	034 Call Uri.get_Host, X0
	035 Move [X20+32], X0
	036 Move X0, X19
	037 Move X1, X31
	038 Call Uri.get_AbsolutePath, X0
	039 Move [X20+48], X0
	040 Move X0, X19
	041 Move X1, X31
	042 Call Uri.get_Port, X0
	043 Move [X20+56], W0
	044 Move X0, X19
	045 Move X1, X31
	046 Call Uri.get_Scheme, X0
	047 Move [X20+72], X0
	048 Move X0, X19
	049 Move X1, X31
	050 Call Uri.get_HasAuthority, X0
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {65}
	055 Move X21, 0xACD000
	056 Move X21, [X21+2600]
	057 Move X0, [X21]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X21]
	063 Move X8, [X0+184]
	064 Add X8, X8, 96
	065 Move X8, 0xAD4000
	066 Move X8, [X8+2440]
	067 Move X8, [X8]
	068 Move X0, X19
	069 Move X1, X31
	070 Move [X20+80], X8
	071 Call Uri.get_UserInfo, X0
	072 Move X1, X31
	073 Move X21, X0
	074 Call String.IsNullOrEmpty, X0
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {99}
	079 Compare X21, 0
	080 JumpIfEqual {108}
	081 Move W1, 58
	082 Move X0, X21
	083 Move X2, X31
	084 Call String.IndexOf, X0, X1
	085 Add W31, W0, 1
	086 Move W22, W0
	087 Add W1, W0, 1
	088 Move X0, X21
	089 Move X2, X31
	090 Call String.Substring, X0, X1
	091 Move [X20+40], X0
	092 Move X0, X21
	093 Move W1, W31
	094 Move W2, W22
	095 Move X3, X31
	096 Call String.Substring, X0, X1, X2
	097 Move X21, X0
	098 Move [X20+96], X21
	099 Move X0, X20
	100 Move X1, X19
	101 Move X20, [X31+32]
	102 Move X19, [X31+40]
	103 Move X22, [X31+16]
	104 Move X21, [X31+24]
	105 Move X30, [X31+48]
	106 Call UriBuilder.SetFieldsFromUri, X0, X1
	107 Return 
	108 Call 0x1C17F20

Method: System.Void .ctor(System.String schemeName, System.String hostName)

Disassembly:
	0x036294CC MOV X0, X20
	0x036294D0 MOV X2, X31
	0x036294D4 LDR X1, [X8]
	0x036294D8 BL 0x32261E8
	0x036294DC CMP W0, 0x1
	0x036294E0 B.LT 0x36296D0
	0x036294E4 ADRP X8, 0xB12000
	0x036294E8 LDR X8, [X8 + 0x540]
	0x036294EC MOV X0, X20
	0x036294F0 MOV X2, X31
	0x036294F4 LDR X1, [X8]
	0x036294F8 BL 0x32261E8
	0x036294FC TBNZ X0, 0x1F, 0x3629520
	0x03629500 ADRP X8, 0xB12000
	0x03629504 LDR X8, [X8 + 0x508]
	0x03629508 MOV X0, X20
	0x0362950C MOV X2, X31
	0x03629510 LDR X1, [X8]
	0x03629514 BL 0x32261E8
	0x03629518 CMP W0, 0x1
	0x0362951C B.LT 0x36296D0
	0x03629520 ADRP X8, 0xB12000
	0x03629524 LDR X8, [X8 + 0x550]
	0x03629528 MOV X0, X20
	0x0362952C MOV X2, X31
	0x03629530 LDR X1, [X8]
	0x03629534 BL 0x32261E8
	0x03629538 TBNZ X0, 0x1F, 0x362955C
	0x0362953C ADRP X8, 0xB12000
	0x03629540 LDR X8, [X8 + 0x488]
	0x03629544 MOV X0, X20
	0x03629548 MOV X2, X31
	0x0362954C LDR X1, [X8]
	0x03629550 BL 0x32261E8
	0x03629554 CMP W0, 0x1
	0x03629558 B.LT 0x36296D0
	0x0362955C ADRP X8, 0xB12000
	0x03629560 LDR X8, [X8 + 0x4E8]
	0x03629564 MOV X0, X20
	0x03629568 MOV X2, X31
	0x0362956C LDR X1, [X8]
	0x03629570 BL 0x32261E8
	0x03629574 TBNZ X0, 0x1F, 0x3629598
	0x03629578 ADRP X8, 0xB12000
	0x0362957C LDR X8, [X8 + 0x4A8]
	0x03629580 MOV X0, X20
	0x03629584 MOV X2, X31
	0x03629588 LDR X1, [X8]
	0x0362958C BL 0x32261E8
	0x03629590 CMP W0, 0x1
	0x03629594 B.LT 0x36296D0
	0x03629598 ADRP X8, 0xB12000
	0x0362959C LDR X8, [X8 + 0x4E0]
	0x036295A0 MOV X0, X20
	0x036295A4 MOV X2, X31
	0x036295A8 LDR X1, [X8]
	0x036295AC BL 0x32261E8
	0x036295B0 TBNZ X0, 0x1F, 0x36295D4
	0x036295B4 ADRP X8, 0xB12000
	0x036295B8 LDR X8, [X8 + 0x460]
	0x036295BC MOV X0, X20
	0x036295C0 MOV X2, X31
	0x036295C4 LDR X1, [X8]
	0x036295C8 BL 0x32261E8
	0x036295CC CMP W0, 0x1
	0x036295D0 B.LT 0x36296D0
	0x036295D4 ADRP X8, 0xB12000
	0x036295D8 LDR X8, [X8 + 0x490]
	0x036295DC MOV X0, X20
	0x036295E0 MOV X2, X31
	0x036295E4 LDR X1, [X8]
	0x036295E8 BL 0x32261E8
	0x036295EC TBNZ X0, 0x1F, 0x3629610
	0x036295F0 ADRP X8, 0xB12000
	0x036295F4 LDR X8, [X8 + 0x4B0]
	0x036295F8 MOV X0, X20
	0x036295FC MOV X2, X31

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0xDB8000
	012 Move X22, 0xACD000
	013 Move X26, 0xB13000
	014 Move X25, 0xACC000
	015 Move X24, 0xB07000
	016 Move X23, 0xACD000
	017 Move W8, [X27+1247]
	018 Move X22, [X22+632]
	019 Move X26, [X26+1064]
	020 Move X25, [X25+3784]
	021 Move X24, [X24+1512]
	022 Move X23, [X23+2600]
	023 Move X19, X2
	024 Move X21, X1
	025 Move X20, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {47}
	030 Move X0, 0xACD000
	031 Move X0, [X0+632]
	032 Call 0x1C17CF4
	033 Move X0, 0xACD000
	034 Move X0, [X0+2600]
	035 Call 0x1C17CF4
	036 Move X0, 0xB07000
	037 Move X0, [X0+1512]
	038 Call 0x1C17CF4
	039 Move X0, 0xB13000
	040 Move X0, [X0+1064]
	041 Call 0x1C17CF4
	042 Move X0, 0xACC000
	043 Move X0, [X0+3784]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X27+1247], W8
	047 Move W8, 1
	048 Move [X20+16], W8
	049 Move X8, [X22]
	050 Move X9, [X26]
	051 Move TEMP, 0
	052 Not TEMP
	053 Move W10, TEMP
	054 Move X8, [X8+184]
	055 Move X8, [X8]
	056 Move [X20+24], X8
	057 Move [X20+32], X9
	058 Move X9, [X25]
	059 Move [X20+56], W10
	060 Move [X20+40], X8
	061 Move [X20+48], X9
	062 Move X9, [X24]
	063 Move [X20+64], X8
	064 Move [X20+72], X9
	065 Move X0, [X23]
	066 Move W9, [X0+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {74}
	069 Call 0x1C17DFC
	070 Move X8, [X22]
	071 Move X0, [X23]
	072 Move X8, [X8+184]
	073 Move X8, [X8]
	074 Move X9, [X0+184]
	075 Move X0, X20
	076 Move X1, X31
	077 Move X9, [X9+96]
	078 Move [X20+96], X8
	079 Move [X20+80], X9
	080 Call Object..ctor, X0
	081 Move X0, X20
	082 Move X1, X21
	083 Call UriBuilder.set_Scheme, X0, X1
	084 Move X0, X20
	085 Move X1, X19
	086 Move X20, [X31+64]
	087 Move X19, [X31+72]
	088 Move X22, [X31+48]
	089 Move X21, [X31+56]
	090 Move X24, [X31+32]
	091 Move X23, [X31+40]
	092 Move X26, [X31+16]
	093 Move X25, [X31+24]
	094 Move X30, [X31+80]
	095 Move X27, [X31+88]
	096 Call UriBuilder.set_Host, X0, X1
	097 Return 

Method: System.Void .ctor(System.String scheme, System.String host, System.Int32 portNumber)

Disassembly:
	0x03629830 RET
	0x03629834 SUB X31, X31, 0x90
	0x03629838 STP X29, X30, [X31 + 0x30]
	0x0362983C STP X28, X27, [X31 + 0x40]
	0x03629840 STP X26, X25, [X31 + 0x50]
	0x03629844 STP X24, X23, [X31 + 0x60]
	0x03629848 STP X22, X21, [X31 + 0x70]
	0x0362984C STP X20, X19, [X31 + 0x80]
	0x03629850 STR W3, [X31 + 0x18]
	0x03629854 ADRP X19, 0xDB7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W3
	005 Move X20, X0
	006 Call UriBuilder..ctor, X0, X1, X2
	007 Move X0, X20
	008 Move W1, W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]

Method: System.String get_Host()

Disassembly:
	0x036298C4 BL 0x1C16CF4
	0x036298C8 ADRP X0, 0xB12000

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_Host(System.String value)

Disassembly:
	0x03629744 CMP W20, 0x4
	0x03629748 B.LE 0x362977C
	0x0362974C CMP W20, 0x10
	0x03629750 B.EQ 0x36297FC
	0x03629754 CMP W20, 0x20
	0x03629758 B.EQ 0x3629764
	0x0362975C CMP W20, 0x40
	0x03629760 B.NE 0x3629824
	0x03629764 SUB W8, W19, 0x23
	0x03629768 AND W9, W8, 0xFFFF
	0x0362976C CMP W9, 0x3B
	0x03629770 B.CS 0x3629824
	0x03629774 MOVZ X9, 0x1
	0x03629778 B 0x3629814
	0x0362977C CMP W20, 0x2
	0x03629780 B.EQ 0x36297E0
	0x03629784 CMP W20, 0x4
	0x03629788 B.NE 0x3629824
	0x0362978C SUB W8, W19, 0x23
	0x03629790 AND W9, W8, 0xFFFF
	0x03629794 CMP W9, 0x3B
	0x03629798 B.CS 0x3629824
	0x0362979C MOVZ X9, 0x1001
	0x036297A0 MOVK X9, 0x30000000
	0x036297A4 MOVK X9, 0x5000000
	0x036297A8 ORR X9, X9, 0xFFFFFF
	0x036297AC B 0x3629818
	0x036297B0 CBNZ W20, 0x3629824
	0x036297B4 ADRP X8, 0xACC000
	0x036297B8 LDR X8, [X8 + 0xA28]
	0x036297BC LDR X0, [X8]
	0x036297C0 LDR W8, [X0 + 0xE0]
	0x036297C4 CBNZ W8, 0x36297CC
	0x036297C8 BL 0x1C16DFC
	0x036297CC MOV W0, W19
	0x036297D0 LDP X20, X19, [X31 + 0x10]
	0x036297D4 MOV X1, X31
	0x036297D8 LDP X30, X21, [X31], #0x20
	0x036297DC B 0x361D4D0
	0x036297E0 SUB W8, W19, 0x23
	0x036297E4 AND W9, W8, 0xFFFF
	0x036297E8 CMP W9, 0x3B
	0x036297EC B.CS 0x3629824
	0x036297F0 MOVZ X9, 0x1001
	0x036297F4 MOVK X9, 0x30000000
	0x036297F8 B 0x3629814
	0x036297FC SUB W8, W19, 0x23
	0x03629800 AND W9, W8, 0xFFFF
	0x03629804 CMP W9, 0x3B
	0x03629808 B.CS 0x3629824
	0x0362980C MOVZ X9, 0x1001
	0x03629810 MOVK X9, 0x10000000
	0x03629814 MOVK X9, 0x5000000
	0x03629818 LSRV X8, X9, X8
	0x0362981C AND W0, W8, 0x1
	0x03629820 B 0x3629828
	0x03629824 MOV W0, W31
	0x03629828 LDP X20, X19, [X31 + 0x10]
	0x0362982C LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDB8000
	006 Move W8, [X21+1248]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xACD000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move X0, 0xACB000
	017 Move X0, [X0+3784]
	018 Call 0x1C17CF4
	019 Move X0, 0xACB000
	020 Move X0, [X0+2120]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1248], W8
	024 Compare X20, 0
	025 JumpIfEqual {28}
	026 Move X21, X19
	027 Move [X21+32], X20
	028 Move X8, 0xACD000
	029 Move X8, [X8+632]
	030 Move X21, X19
	031 Move X8, [X8]
	032 Move X8, [X8+184]
	033 Move X20, [X8]
	034 Move [X21+32], X20
	035 Compare X20, 0
	036 JumpIfEqual {70}
	037 Move W1, 58
	038 Move X0, X20
	039 Move X2, X31
	040 Call String.IndexOf, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfEqual {63}
	045 Move X0, [X21]
	046 Compare X0, 0
	047 JumpIfEqual {70}
	048 Move W1, W31
	049 Move X2, X31
	050 Call String.get_Chars, X0, X1
	051 And W8, W0, 0xFFFF
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, 0xACB000
	054 Move X9, 0xACB000
	055 Move X1, [X21]
	056 Move X8, [X8+3784]
	057 Move X9, [X9+2120]
	058 Move X3, X31
	059 Move X0, [X8]
	060 Move X2, [X9]
	061 Call String.Concat, X0, X1, X2
	062 Move [X21], X0
	063 Move W8, 1
	064 Move [X19+16], W8
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Return 
	070 Call 0x1C17F20

Method: System.Void set_Path(System.String value)

Disassembly:
	0x036298CC LDR X0, [X0 + 0x58]
	0x036298D0 BL 0x1C16CF4
	0x036298D4 ADRP X0, 0xACC000
	0x036298D8 LDR X0, [X0 + 0xA28]
	0x036298DC BL 0x1C16CF4
	0x036298E0 ADRP X0, 0xACA000
	0x036298E4 LDR X0, [X0 + 0x988]
	0x036298E8 BL 0x1C16CF4
	0x036298EC MOVZ W8, 0x1
	0x036298F0 STRB W8, [X19 + 0x4E9]
	0x036298F4 LDR X0, [X22]
	0x036298F8 SUBS W1, W20, W25
	0x036298FC STR W31, [X31 + 0x24]
	0x03629900 BL 0x1C16D6C
	0x03629904 MOVZ W1, 0x3
	0x03629908 MOV X2, X31
	0x0362990C MOV X22, X0
	0x03629910 BL 0x32C0780
	0x03629914 STR X0, [X31 + 0x28]
	0x03629918 ADD X0, X31, 0x28
	0x0362991C MOV X1, X31
	0x03629920 BL 0x32C0690
	0x03629924 MOV X1, X31
	0x03629928 BL 0x33C6948
	0x0362992C CMP W20, W25
	0x03629930 STR W31, [X31 + 0x24]
	0x03629934 B.LE 0x362A018
	0x03629938 MOV X24, X0
	0x0362993C MOV X23, X31
	0x03629940 STR W31, [X31 + 0x1C]
	0x03629944 STRB W31, [X31 + 0x20]
	0x03629948 ADD X26, X21, W25, 0x1, SXTW
	0x0362994C LDRH W27, [X26]
	0x03629950 CMP W27, 0x25
	0x03629954 B.NE 0x36299FC
	0x03629958 ADD W19, W25, 0x2
	0x0362995C CMP W19, W20
	0x03629960 B.GE 0x3629A18
	0x03629964 ADRP X8, 0xB12000
	0x03629968 LDR X8, [X8 + 0x58]
	0x0362996C MOV X29, X23
	0x03629970 ADD W23, W25, 0x1
	0x03629974 LDRH W27, [X21, W23, SXTW]
	0x03629978 LDR X0, [X8]
	0x0362997C LDRH W28, [X21, W19, SXTW]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDB8000
	006 Move W8, [X21+1249]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xACD000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0xACC000
	017 Move X0, [X0+3784]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1249], W8
	021 Compare X20, 0
	022 JumpIfEqual {26}
	023 Move W8, [X20+16]
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X8, 0xACC000
	027 Move X8, [X8+3784]
	028 Move X20, [X8]
	029 Compare X20, 0
	030 JumpIfEqual {56}
	031 Move X21, 0xACD000
	032 Move X21, [X21+2600]
	033 Move W1, 92
	034 Move W2, 47
	035 Move X0, X20
	036 Move X3, X31
	037 Call String.Replace, X0, X1, X2
	038 Move X8, [X21]
	039 Move X20, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X31
	047 Call Uri.InternalEscapeString, X0
	048 Move W8, 1
	049 Move [X19+48], X0
	050 Move [X19+16], W8
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 
	056 Call 0x1C17F20

Method: System.Void set_Port(System.Int32 value)

Disassembly:
	0x03629858 ADRP X22, 0xAD3000
	0x0362985C LDRB W8, [X19 + 0x4E9]
	0x03629860 LDR X22, [X22 + 0x8D8]
	0x03629864 MOV W20, W2
	0x03629868 MOV W25, W1
	0x0362986C MOV X21, X0
	0x03629870 TBNZ X8, 0x0, 0x36298F4
	0x03629874 ADRP X0, 0xACA000
	0x03629878 LDR X0, [X0 + 0x618]
	0x0362987C BL 0x1C16CF4
	0x03629880 ADRP X0, 0xAD3000
	0x03629884 LDR X0, [X0 + 0x8D8]
	0x03629888 BL 0x1C16CF4
	0x0362988C ADRP X0, 0xACC000
	0x03629890 LDR X0, [X0 + 0x170]
	0x03629894 BL 0x1C16CF4
	0x03629898 ADRP X0, 0xAF9000
	0x0362989C LDR X0, [X0 + 0x648]
	0x036298A0 BL 0x1C16CF4
	0x036298A4 ADRP X0, 0xAF9000
	0x036298A8 LDR X0, [X0 + 0x368]
	0x036298AC BL 0x1C16CF4
	0x036298B0 ADRP X0, 0xAF9000
	0x036298B4 LDR X0, [X0 + 0x3F8]
	0x036298B8 BL 0x1C16CF4
	0x036298BC ADRP X0, 0xB12000
	0x036298C0 LDR X0, [X0 + 0x560]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Add W8, W1, 1
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move W8, 1
	006 Move [X0+56], W1
	007 Move [X0+16], W8
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move X0, 0xAD3000
	012 Move X0, [X0+1888]
	013 Call 0x1C17D08
	014 Call 0x1C17F10
	015 Move X19, X0
	016 Move X0, 0xAD5000
	017 Move X0, [X0+3784]
	018 Call 0x1C17D08
	019 Move X1, X0
	020 Move X0, X19
	021 Move X2, X31
	022 Call ArgumentOutOfRangeException..ctor, X0, X1
	023 Move X0, 0xB13000
	024 Move X0, [X0+1088]
	025 Call 0x1C17D08
	026 Move X1, X0
	027 Move X0, X19
	028 Call 0x1C17DEC

Method: System.Void set_Query(System.String value)

Disassembly:
	0x03629980 LDR W8, [X0 + 0xE0]
	0x03629984 CBNZ W8, 0x362998C
	0x03629988 BL 0x1C16DFC
	0x0362998C MOV W0, W27
	0x03629990 MOV W1, W28
	0x03629994 BL 0x362A090
	0x03629998 AND W8, W0, 0xFFFF
	0x0362999C CMP W8, 0x25
	0x036299A0 B.EQ 0x36299C0
	0x036299A4 MOVZ W9, 0xFFFF
	0x036299A8 CMP W8, W9
	0x036299AC B.EQ 0x36299C0
	0x036299B0 LDR W1, [X31 + 0x18]
	0x036299B4 MOV W27, W0
	0x036299B8 BL 0x36296F0
	0x036299BC TBZ X0, 0x0, 0x3629BA4
	0x036299C0 LDRSW X8, [X31 + 0x24]
	0x036299C4 LDRH W9, [X26]
	0x036299C8 SXTW X10, W23
	0x036299CC ADD W11, W8, 0x1
	0x036299D0 STRH W9, [X24, X8, LSL #1]
	0x036299D4 LDRH W9, [X21, X10, LSL #1]
	0x036299D8 ADD W12, W8, 0x3
	0x036299DC SXTW X10, W19
	0x036299E0 ADD W8, W8, 0x2
	0x036299E4 STRH W9, [X24, W11, SXTW]
	0x036299E8 STR W12, [X31 + 0x24]
	0x036299EC LDRH W9, [X21, X10, LSL #1]
	0x036299F0 STRH W9, [X24, W8, SXTW]
	0x036299F4 MOV X23, X29
	0x036299F8 B 0x3629B38
	0x036299FC CMP W27, 0x80
	0x03629A00 B.CS 0x3629A2C
	0x03629A04 LDRSW X8, [X31 + 0x24]
	0x03629A08 ADD W9, W8, 0x1
	0x03629A0C STR W9, [X31 + 0x24]
	0x03629A10 STRH W27, [X24, X8, LSL #1]
	0x03629A14 B 0x3629B34
	0x03629A18 LDRSW X8, [X31 + 0x24]
	0x03629A1C ADD W9, W8, 0x1
	0x03629A20 STR W9, [X31 + 0x24]
	0x03629A24 MOVZ W9, 0x25
	0x03629A28 B 0x3629B30
	0x03629A2C ADRP X8, 0xACC000
	0x03629A30 LDR X8, [X8 + 0x170]
	0x03629A34 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDB8000
	006 Move W8, [X21+1250]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xACD000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move X0, 0xAF9000
	017 Move X0, [X0+2448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1250], W8
	021 Compare X20, 0
	022 JumpIfNotEqual {30}
	023 Move X8, 0xACD000
	024 Move X8, [X8+632]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move X20, [X8]
	028 Compare X20, 0
	029 JumpIfEqual {53}
	030 Move W8, [X20+16]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X20
	033 Move W1, W31
	034 Move X2, X31
	035 Call String.get_Chars, X0, X1
	036 And W8, W0, 0xFFFF
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, 0xAF9000
	039 Move X8, [X8+2448]
	040 Move X1, X20
	041 Move X2, X31
	042 Move X0, [X8]
	043 Call String.Concat, X0, X1
	044 Move X20, X0
	045 Move W8, 1
	046 Move [X19+64], X20
	047 Move [X19+16], W8
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return 
	053 Call 0x1C17F20

Method: System.Void set_Scheme(System.String value)

Disassembly:
	0x03629600 LDR X1, [X8]
	0x03629604 BL 0x32261E8
	0x03629608 CMP W0, 0x1
	0x0362960C B.LT 0x36296D0
	0x03629610 ADRP X8, 0xB12000
	0x03629614 LDR X8, [X8 + 0x548]
	0x03629618 MOV X0, X20
	0x0362961C MOV X2, X31
	0x03629620 LDR X1, [X8]
	0x03629624 BL 0x32261E8
	0x03629628 TBNZ X0, 0x1F, 0x362964C
	0x0362962C ADRP X8, 0xB12000
	0x03629630 LDR X8, [X8 + 0x518]
	0x03629634 MOV X0, X20
	0x03629638 MOV X2, X31
	0x0362963C LDR X1, [X8]
	0x03629640 BL 0x32261E8
	0x03629644 CMP W0, 0x1
	0x03629648 B.LT 0x36296D0
	0x0362964C TBZ X19, 0x0, 0x36296C8
	0x03629650 ADRP X8, 0xB12000
	0x03629654 LDR X8, [X8 + 0x498]
	0x03629658 MOV X0, X20
	0x0362965C MOV X2, X31
	0x03629660 LDR X1, [X8]
	0x03629664 BL 0x32261E8
	0x03629668 TBNZ X0, 0x1F, 0x362968C
	0x0362966C ADRP X8, 0xB12000
	0x03629670 LDR X8, [X8 + 0x558]
	0x03629674 MOV X0, X20
	0x03629678 MOV X2, X31
	0x0362967C LDR X1, [X8]
	0x03629680 BL 0x32261E8
	0x03629684 CMP W0, 0x1
	0x03629688 B.LT 0x36296D0
	0x0362968C ADRP X8, 0xB12000
	0x03629690 LDR X8, [X8 + 0x4A0]
	0x03629694 MOV X0, X20
	0x03629698 MOV X2, X31
	0x0362969C LDR X1, [X8]
	0x036296A0 BL 0x32261E8
	0x036296A4 TBNZ X0, 0x1F, 0x36296C8
	0x036296A8 ADRP X8, 0xB12000
	0x036296AC LDR X8, [X8 + 0x538]
	0x036296B0 MOV X0, X20
	0x036296B4 MOV X2, X31
	0x036296B8 LDR X1, [X8]
	0x036296BC BL 0x32261E8
	0x036296C0 CMP W0, 0x0
	0x036296C4 B.LE 0x36296D0
	0x036296C8 MOV W0, W31
	0x036296CC B 0x36296D4
	0x036296D0 MOVZ W0, 0x1
	0x036296D4 LDP X20, X19, [X31 + 0x30]
	0x036296D8 LDP X22, X21, [X31 + 0x20]
	0x036296DC LDP X24, X23, [X31 + 0x10]
	0x036296E0 LDR X30, [X31], #0x40
	0x036296E4 RET
	0x036296E8 BL 0x1C16F28
	0x036296EC BL 0x1C16F20
	0x036296F0 STP X30, X21, [X31 - 0x20]!
	0x036296F4 STP X20, X19, [X31 + 0x10]
	0x036296F8 ADRP X21, 0xDB7000
	0x036296FC LDRB W8, [X21 + 0x4E8]
	0x03629700 MOV W20, W1
	0x03629704 MOV W19, W0
	0x03629708 TBNZ X8, 0x0, 0x3629720
	0x0362970C ADRP X0, 0xACC000
	0x03629710 LDR X0, [X0 + 0xA28]
	0x03629714 BL 0x1C16CF4
	0x03629718 MOVZ W8, 0x1
	0x0362971C STRB W8, [X21 + 0x4E8]
	0x03629720 SUB W8, W20, 0x1
	0x03629724 CMP W8, 0x3F
	0x03629728 B.HI 0x36297B0
	0x0362972C MOVZ W9, 0x1
	0x03629730 LSLV X8, X9, X8
	0x03629734 ORR X9, X31, 0x8000000080000000
	0x03629738 MOVK X9, 0x808B
	0x0362973C ANDS X31, X8, X9, 0x0
	0x03629740 B.EQ 0x36297B0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDB8000
	006 Move W8, [X21+1251]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xACD000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move X0, 0xACD000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1251], W8
	021 Compare X20, 0
	022 JumpIfNotEqual {30}
	023 Move X8, 0xACD000
	024 Move X8, [X8+632]
	025 Move X8, [X8]
	026 Move X8, [X8+184]
	027 Move X20, [X8]
	028 Compare X20, 0
	029 JumpIfEqual {72}
	030 Move W1, 58
	031 Move X0, X20
	032 Move X2, X31
	033 Call String.IndexOf, X0, X1
	034 Add W31, W0, 1
	035 Move W2, W0
	036 Move X0, X20
	037 Move W1, W31
	038 Move X3, X31
	039 Call String.Substring, X0, X1, X2
	040 Move X20, X0
	041 Compare X0, 0
	042 JumpIfEqual {72}
	043 Move W8, [X20+16]
	044 Compare W8, 0
	045 JumpIfEqual {64}
	046 Move X8, 0xACD000
	047 Move X8, [X8+2600]
	048 Move X0, [X8]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X31
	055 Call Uri.CheckSchemeName, X0
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {73}
	060 Move X0, X20
	061 Move X1, X31
	062 Call String.ToLowerInvariant, X0
	063 Move X20, X0
	064 Move W8, 1
	065 Move [X19+72], X20
	066 Move [X19+16], W8
	067 Move X20, [X31+16]
	068 Move X19, [X31+24]
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Return 
	072 Call 0x1C17F20
	073 Move X0, 0xAD3000
	074 Move X0, [X0+1400]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X19, X0
	078 Move X0, 0xB13000
	079 Move X0, [X0+224]
	080 Call 0x1C17D08
	081 Move X20, X0
	082 Move X0, 0xAD5000
	083 Move X0, [X0+3784]
	084 Call 0x1C17D08
	085 Move X2, X0
	086 Move X0, X19
	087 Move X1, X20
	088 Move X3, X31
	089 Call ArgumentException..ctor, X0, X1, X2
	090 Move X0, 0xB13000
	091 Move X0, [X0+1080]
	092 Call 0x1C17D08
	093 Move X1, X0
	094 Move X0, X19
	095 Call 0x1C17DEC

Method: System.Uri get_Uri()

Disassembly:
	0x03629A38 LDR W8, [X0 + 0xE0]
	0x03629A3C CBNZ W8, 0x3629A44
	0x03629A40 BL 0x1C16DFC
	0x03629A44 MOV W0, W27
	0x03629A48 MOV X1, X31
	0x03629A4C BL 0x331BFEC
	0x03629A50 TBZ X0, 0x0, 0x3629AAC
	0x03629A54 ADD W19, W25, 0x1
	0x03629A58 CMP W19, W20
	0x03629A5C B.GE 0x3629AAC
	0x03629A60 LDR W8, [X31 + 0x18]
	0x03629A64 LDRH W1, [X21, W19, SXTW]
	0x03629A68 ADD X2, X31, 0x20
	0x03629A6C MOV W0, W27
	0x03629A70 CMP W8, 0x20
	0x03629A74 CSET W3, EQ
	0x03629A78 BL 0x36290C0
	0x03629A7C TBZ X0, 0x0, 0x3629B54
	0x03629A80 LDRSW X8, [X31 + 0x24]
	0x03629A84 LDRH W9, [X26]
	0x03629A88 MOV W10, W19
	0x03629A8C SXTW X10, W10
	0x03629A90 STRH W9, [X24, X8, LSL #1]
	0x03629A94 ADD W9, W8, 0x2
	0x03629A98 STR W9, [X31 + 0x24]
	0x03629A9C LDRH W9, [X21, X10, LSL #1]
	0x03629AA0 ADD W8, W8, 0x1
	0x03629AA4 STRH W9, [X24, W8, SXTW]
	0x03629AA8 B 0x3629B38
	0x03629AAC SUB W8, W27, 0xA0
	0x03629AB0 UBFM W8, W8, 0x5, 0xF
	0x03629AB4 CMP W8, 0x6BB
	0x03629AB8 B.CC 0x3629AF8
	0x03629ABC ADD W8, W27, 0x700
	0x03629AC0 AND W8, W8, 0xFFFF
	0x03629AC4 CMP W8, 0x4D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xDB8000
	006 Move W8, [X20+1252]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xACD000
	013 Move X0, [X0+2600]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1252], W8
	017 Move W8, [X19+16]
	018 Compare W8, 0
	019 JumpIfEqual {40}
	020 Move X8, [X19]
	021 Move X20, 0xACD000
	022 Move X0, X19
	023 Move X9, [X8+360]
	024 Move X1, [X8+368]
	025 Move X20, [X20+2600]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move X0, X8
	030 Call 0x1C17F10
	031 Move X1, X20
	032 Move X2, X31
	033 Move X21, X0
	034 Call Uri..ctor, X0, X1
	035 Move X0, X19
	036 Move X1, X21
	037 Move [X19+88], X21
	038 Call UriBuilder.SetFieldsFromUri, X0, X1
	039 Move [X19+16], W31
	040 Move X0, [X19+88]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0

Method: System.Boolean Equals(System.Object rparam)

Disassembly:
	0x03629AC8 B.CC 0x3629AF8
	0x03629ACC LDR W8, [X31 + 0x18]
	0x03629AD0 CMP W8, 0x20
	0x03629AD4 ADD W8, W27, 0x210
	0x03629AD8 B.NE 0x3629B48
	0x03629ADC AND W9, W8, 0xFFFF
	0x03629AE0 CMP W9, 0x200
	0x03629AE4 B.CC 0x3629B48
	0x03629AE8 ADD W8, W27, 0x2000
	0x03629AEC UBFM W8, W8, 0x8, 0xF
	0x03629AF0 CMP W8, 0x19
	0x03629AF4 B.CS 0x3629B54
	0x03629AF8 ADRP X8, 0xACC000
	0x03629AFC LDR X8, [X8 + 0xA28]
	0x03629B00 LDR X0, [X8]
	0x03629B04 LDR W8, [X0 + 0xE0]
	0x03629B08 CBNZ W8, 0x3629B10
	0x03629B0C BL 0x1C16DFC
	0x03629B10 MOV W0, W27
	0x03629B14 MOV X1, X31
	0x03629B18 BL 0x36236A8
	0x03629B1C TBNZ X0, 0x0, 0x3629B34
	0x03629B20 LDRSW X8, [X31 + 0x24]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {25}
	006 Move X20, X1
	007 Call UriBuilder.get_Uri, X0
	008 Move X8, [X20]
	009 Move X19, X0
	010 Move X0, X20
	011 Move X9, [X8+360]
	012 Move X1, [X8+368]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Compare X19, 0
	015 JumpIfEqual {30}
	016 Move X8, [X19]
	017 Move X1, X0
	018 Move X0, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X3, [X8+312]
	022 Move X2, [X8+320]
	023 Move X30, [X31+32]
	024 CallNoReturn X3
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W31
	028 Move X30, [X31+32]
	029 Return X0
	030 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x03629B24 ADD W9, W8, 0x1
	0x03629B28 STR W9, [X31 + 0x24]
	0x03629B2C LDRH W9, [X26]
	0x03629B30 STRH W9, [X24, X8, LSL #1]
	0x03629B34 MOV W19, W25
	0x03629B38 ADD W25, W19, 0x1
	0x03629B3C CMP W25, W20
	0x03629B40 B.LT 0x3629944

ISIL:
	001 Move [X31-16], X30
	002 Call UriBuilder.get_Uri, X0
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+344]
	007 Move X1, [X8+352]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void SetFieldsFromUri(System.Uri uri)

Disassembly:
	0x03629368 MOV X2, X31
	0x0362936C LDR X1, [X8]
	0x03629370 BL 0x32261E8
	0x03629374 CMP W0, 0x1
	0x03629378 B.LT 0x36296D0
	0x0362937C ADRP X8, 0xB12000
	0x03629380 LDR X8, [X8 + 0x4F8]
	0x03629384 MOV X0, X20
	0x03629388 MOV X2, X31
	0x0362938C LDR X1, [X8]
	0x03629390 BL 0x32261E8
	0x03629394 TBNZ X0, 0x1F, 0x36293B8
	0x03629398 ADRP X8, 0xB12000
	0x0362939C LDR X8, [X8 + 0x478]
	0x036293A0 MOV X0, X20
	0x036293A4 MOV X2, X31
	0x036293A8 LDR X1, [X8]
	0x036293AC BL 0x32261E8
	0x036293B0 CMP W0, 0x1
	0x036293B4 B.LT 0x36296D0
	0x036293B8 ADRP X8, 0xB12000
	0x036293BC LDR X8, [X8 + 0x520]
	0x036293C0 MOV X0, X20
	0x036293C4 MOV X2, X31
	0x036293C8 LDR X1, [X8]
	0x036293CC BL 0x32261E8
	0x036293D0 TBNZ X0, 0x1F, 0x36293F4
	0x036293D4 ADRP X8, 0xB12000
	0x036293D8 LDR X8, [X8 + 0x4C8]
	0x036293DC MOV X0, X20
	0x036293E0 MOV X2, X31
	0x036293E4 LDR X1, [X8]
	0x036293E8 BL 0x32261E8
	0x036293EC CMP W0, 0x1
	0x036293F0 B.LT 0x36296D0
	0x036293F4 ADRP X8, 0xB12000
	0x036293F8 LDR X8, [X8 + 0x530]
	0x036293FC MOV X0, X20
	0x03629400 MOV X2, X31
	0x03629404 LDR X1, [X8]
	0x03629408 BL 0x32261E8
	0x0362940C TBNZ X0, 0x1F, 0x3629430
	0x03629410 ADRP X8, 0xB12000
	0x03629414 LDR X8, [X8 + 0x500]
	0x03629418 MOV X0, X20
	0x0362941C MOV X2, X31
	0x03629420 LDR X1, [X8]
	0x03629424 BL 0x32261E8
	0x03629428 CMP W0, 0x1
	0x0362942C B.LT 0x36296D0
	0x03629430 ADRP X8, 0xB12000
	0x03629434 LDR X8, [X8 + 0x4D8]
	0x03629438 MOV X0, X20
	0x0362943C MOV X2, X31
	0x03629440 LDR X1, [X8]
	0x03629444 BL 0x32261E8
	0x03629448 TBNZ X0, 0x1F, 0x362946C
	0x0362944C ADRP X8, 0xB12000
	0x03629450 LDR X8, [X8 + 0x4F0]
	0x03629454 MOV X0, X20
	0x03629458 MOV X2, X31
	0x0362945C LDR X1, [X8]
	0x03629460 BL 0x32261E8
	0x03629464 CMP W0, 0x1
	0x03629468 B.LT 0x36296D0
	0x0362946C ADRP X8, 0xB12000
	0x03629470 LDR X8, [X8 + 0x470]
	0x03629474 MOV X0, X20
	0x03629478 MOV X2, X31
	0x0362947C LDR X1, [X8]
	0x03629480 BL 0x32261E8
	0x03629484 TBNZ X0, 0x1F, 0x36294A8
	0x03629488 ADRP X8, 0xB12000
	0x0362948C LDR X8, [X8 + 0x4B8]
	0x03629490 MOV X0, X20
	0x03629494 MOV X2, X31
	0x03629498 LDR X1, [X8]
	0x0362949C BL 0x32261E8
	0x036294A0 CMP W0, 0x1
	0x036294A4 B.LT 0x36296D0
	0x036294A8 ADRP X8, 0xB12000
	0x036294AC LDR X8, [X8 + 0x528]
	0x036294B0 MOV X0, X20
	0x036294B4 MOV X2, X31
	0x036294B8 LDR X1, [X8]
	0x036294BC BL 0x32261E8
	0x036294C0 TBNZ X0, 0x1F, 0x36294E4
	0x036294C4 ADRP X8, 0xB12000
	0x036294C8 LDR X8, [X8 + 0x468]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDB8000
	006 Move W8, [X21+1253]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xACD000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0xAD4000
	017 Move X0, [X0+2440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1253], W8
	021 Compare X20, 0
	022 JumpIfEqual {99}
	023 Move X0, X20
	024 Move X1, X31
	025 Call Uri.get_Fragment, X0
	026 Move [X19+24], X0
	027 Move X0, X20
	028 Move X1, X31
	029 Call Uri.get_Query, X0
	030 Move [X19+64], X0
	031 Move X0, X20
	032 Move X1, X31
	033 Call Uri.get_Host, X0
	034 Move [X19+32], X0
	035 Move X0, X20
	036 Move X1, X31
	037 Call Uri.get_AbsolutePath, X0
	038 Move [X19+48], X0
	039 Move X0, X20
	040 Move X1, X31
	041 Call Uri.get_Port, X0
	042 Move [X19+56], W0
	043 Move X0, X20
	044 Move X1, X31
	045 Call Uri.get_Scheme, X0
	046 Move [X19+72], X0
	047 Move X0, X20
	048 Move X1, X31
	049 Call Uri.get_HasAuthority, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {64}
	054 Move X21, 0xACD000
	055 Move X21, [X21+2600]
	056 Move X0, [X21]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {62}
	060 Call 0x1C17DFC
	061 Move X0, [X21]
	062 Move X8, [X0+184]
	063 Add X8, X8, 96
	064 Move X8, 0xAD4000
	065 Move X8, [X8+2440]
	066 Move X8, [X8]
	067 Move X0, X20
	068 Move X1, X31
	069 Move [X19+80], X8
	070 Call Uri.get_UserInfo, X0
	071 Compare X0, 0
	072 JumpIfEqual {99}
	073 Move W8, [X0+16]
	074 Move X20, X0
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move W1, 58
	077 Move X0, X20
	078 Move X2, X31
	079 Call String.IndexOf, X0, X1
	080 Add W31, W0, 1
	081 Move W21, W0
	082 Add W1, W0, 1
	083 Move X0, X20
	084 Move X2, X31
	085 Call String.Substring, X0, X1
	086 Move [X19+40], X0
	087 Move X0, X20
	088 Move W1, W31
	089 Move W2, W21
	090 Move X3, X31
	091 Call String.Substring, X0, X1, X2
	092 Move X20, X0
	093 Move [X19+96], X20
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X30, [X31+32]
	097 Move X21, [X31+40]
	098 Return 
	099 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x03629B44 B 0x362A018
	0x03629B48 AND W8, W8, 0xFFFF
	0x03629B4C CMP W8, 0x1FF
	0x03629B50 B.LS 0x3629AF8
	0x03629B54 LDR W8, [X31 + 0x1C]
	0x03629B58 CMP W8, 0xB
	0x03629B5C B.GT 0x3629D90
	0x03629B60 CBZ X22, 0x362A070
	0x03629B64 LDR W8, [X22 + 0x18]
	0x03629B68 MOVZ W9, 0xFFA6
	0x03629B6C MOVK W9, 0x7FFF0000
	0x03629B70 CMP W8, W9
	0x03629B74 B.GE 0x362A074
	0x03629B78 ADRP X9, 0xAD3000
	0x03629B7C LDR X9, [X9 + 0x8D8]
	0x03629B80 ADD W1, W8, 0x5A
	0x03629B84 LDR X0, [X9]
	0x03629B88 BL 0x1C16D6C
	0x03629B8C MOV X22, X0
	0x03629B90 CBZ X0, 0x3629D28
	0x03629B94 LDR W8, [X22 + 0x18]
	0x03629B98 CBZ W8, 0x3629D24
	0x03629B9C ADD X0, X22, 0x20
	0x03629BA0 B 0x3629D28
	0x03629BA4 ADRP X8, 0xB12000
	0x03629BA8 LDR X8, [X8 + 0x58]
	0x03629BAC LDR X0, [X8]
	0x03629BB0 LDR W8, [X0 + 0xE0]
	0x03629BB4 CBNZ W8, 0x3629BBC
	0x03629BB8 BL 0x1C16DFC
	0x03629BBC AND W8, W27, 0xFFFF
	0x03629BC0 CMP W8, 0x20
	0x03629BC4 B.CC 0x36299C0
	0x03629BC8 SUB W8, W27, 0x7F
	0x03629BCC AND W8, W8, 0xFFFF
	0x03629BD0 CMP W8, 0x21
	0x03629BD4 B.CC 0x36299C0
	0x03629BD8 SUB W8, W27, 0x3B
	0x03629BDC MOVZ W9, 0xFFFD
	0x03629BE0 AND W8, W8, 0xFFFF
	0x03629BE4 AND W9, W27, W9, 0x0
	0x03629BE8 SUB W10, W27, 0x23
	0x03629BEC CMP W8, 0x6
	0x03629BF0 AND W10, W10, 0xFFFF
	0x03629BF4 CSET W8, CC
	0x03629BF8 CMP W9, 0x3C
	0x03629BFC CSET W9, NE
	0x03629C00 CMP W10, 0x4
	0x03629C04 B.CC 0x36299C0
	0x03629C08 AND W8, W8, W9, 0x0
	0x03629C0C TBNZ X8, 0x0, 0x36299C0
	0x03629C10 AND W8, W27, 0xFFFF
	0x03629C14 SUB W9, W8, 0x2B
	0x03629C18 CMP W9, 0x31
	0x03629C1C B.HI 0x3629C38
	0x03629C20 MOVZ W10, 0x1
	0x03629C24 LSLV X9, X10, X9
	0x03629C28 MOVZ X10, 0x13
	0x03629C2C MOVK X10, 0x20000
	0x03629C30 ANDS X31, X9, X10, 0x0
	0x03629C34 B.NE 0x36299C0
	0x03629C38 CMP W8, 0x7F
	0x03629C3C B.LS 0x3629E70
	0x03629C40 MOV X23, X29
	0x03629C44 CBNZ X29, 0x3629C64
	0x03629C48 ADRP X8, 0xACA000
	0x03629C4C LDR X8, [X8 + 0x618]
	0x03629C50 SUB W1, W20, W25
	0x03629C54 LDR X0, [X8]
	0x03629C58 BL 0x1C16D6C
	0x03629C5C MOV X23, X0
	0x03629C60 CBZ X0, 0x362A070
	0x03629C64 ADRP X29, 0xACA000
	0x03629C68 LDR W8, [X23 + 0x18]
	0x03629C6C LDR X29, [X29 + 0x988]
	0x03629C70 CBZ W8, 0x362A06C
	0x03629C74 ADD W8, W25, 0x3
	0x03629C78 CMP W8, W20
	0x03629C7C STRB W27, [X23 + 0x20]
	0x03629C80 B.GE 0x3629E84
	0x03629C84 MOV X28, X23
	0x03629C88 MOVZ W23, 0x1
	0x03629C8C MOV W19, W25
	0x03629C90 ADD W8, W19, 0x3
	0x03629C94 LDRH W8, [X21, W8, SXTW]
	0x03629C98 CMP W8, 0x25
	0x03629C9C B.NE 0x3629E8C
	0x03629CA0 ADD W8, W19, 0x5
	0x03629CA4 CMP W8, W20
	0x03629CA8 B.GE 0x3629E8C
	0x03629CAC ADRP X9, 0xB12000
	0x03629CB0 LDR X9, [X9 + 0x58]
	0x03629CB4 LDRH W27, [X21, W8, SXTW]
	0x03629CB8 LDR X0, [X9]
	0x03629CBC ADD W9, W19, 0x4
	0x03629CC0 LDRH W26, [X21, W9, SXTW]
	0x03629CC4 LDR W9, [X0 + 0xE0]
	0x03629CC8 CBNZ W9, 0x3629CD0
	0x03629CCC BL 0x1C16DFC
	0x03629CD0 MOV W0, W26
	0x03629CD4 MOV W1, W27
	0x03629CD8 BL 0x362A090
	0x03629CDC SUB W8, W0, 0x80
	0x03629CE0 MOVZ W9, 0xFF7E
	0x03629CE4 CMP W9, W8, UXTH
	0x03629CE8 B.CC 0x3629E8C
	0x03629CEC LDR W8, [X28 + 0x18]
	0x03629CF0 CMP W23, W8
	0x03629CF4 B.CS 0x362A06C
	0x03629CF8 MOV X9, X28
	0x03629CFC ADD W26, W23, 0x1
	0x03629D00 ADD W8, W19, 0x3
	0x03629D04 ADD W10, W19, 0x6
	0x03629D08 ADD X9, X28, W23, SXTW
	0x03629D0C CMP W10, W20
	0x03629D10 MOV W19, W8
	0x03629D14 MOV W23, W26
	0x03629D18 STRB W0, [X9 + 0x20]
	0x03629D1C B.LT 0x3629C90
	0x03629D20 B 0x3629E94
	0x03629D24 MOV X0, X31
	0x03629D28 LDR W8, [X31 + 0x24]
	0x03629D2C MOV X1, X24
	0x03629D30 MOV X3, X31
	0x03629D34 UBFM W2, W8, 0x1F, 0x1E
	0x03629D38 BL 0x33A8924
	0x03629D3C ADD X0, X31, 0x28
	0x03629D40 MOV X1, X31
	0x03629D44 BL 0x32C05E4
	0x03629D48 TBZ X0, 0x0, 0x3629D58
	0x03629D4C ADD X0, X31, 0x28
	0x03629D50 MOV X1, X31
	0x03629D54 BL 0x32C0794
	0x03629D58 LDR W8, [X31 + 0x1C]
	0x03629D5C MOVZ W1, 0x3
	0x03629D60 MOV X0, X22
	0x03629D64 MOV X2, X31
	0x03629D68 ADD W8, W8, 0x5A
	0x03629D6C STR W8, [X31 + 0x1C]
	0x03629D70 BL 0x32C0780
	0x03629D74 STR X0, [X31 + 0x28]
	0x03629D78 ADD X0, X31, 0x28
	0x03629D7C MOV X1, X31
	0x03629D80 BL 0x32C0690
	0x03629D84 MOV X1, X31
	0x03629D88 BL 0x33C6948
	0x03629D8C MOV X24, X0
	0x03629D90 ADRP X8, 0xACA000
	0x03629D94 LDR X8, [X8 + 0x618]
	0x03629D98 MOVZ W1, 0x4
	0x03629D9C LDR X0, [X8]
	0x03629DA0 BL 0x1C16D6C
	0x03629DA4 MOV X27, X0
	0x03629DA8 CBZ X0, 0x3629DBC
	0x03629DAC LDR W8, [X27 + 0x18]
	0x03629DB0 CBZ W8, 0x3629DBC
	0x03629DB4 ADD X28, X27, 0x20
	0x03629DB8 B 0x3629DC0
	0x03629DBC MOV X28, X31
	0x03629DC0 MOV X0, X31
	0x03629DC4 BL 0x3241948
	0x03629DC8 CBZ X0, 0x362A070
	0x03629DCC LDR X8, [X0]
	0x03629DD0 LDRB W9, [X31 + 0x20]
	0x03629DD4 MOVZ W4, 0x4
	0x03629DD8 MOV X1, X26
	0x03629DDC LDR X10, [X8 + 0x298]
	0x03629DE0 LDR X5, [X8 + 0x2A0]
	0x03629DE4 CMP W9, 0x0
	0x03629DE8 MOVZ W8, 0x1
	0x03629DEC CINC W2, W8, NE
	0x03629DF0 MOV X3, X28
	0x03629DF4 BLR X10
	0x03629DF8 LDR W9, [X31 + 0x1C]
	0x03629DFC SUB W8, W0, W0, 0x2, LSL
	0x03629E00 CMP W0, 0x1
	0x03629E04 ADD W9, W8, W9
	0x03629E08 STR W9, [X31 + 0x1C]
	0x03629E0C B.LT 0x3629B34
	0x03629E10 CBZ X27, 0x362A070
	0x03629E14 MOV X29, X23
	0x03629E18 MOV X19, X31
	0x03629E1C MOV W23, W0
	0x03629E20 ADD X28, X27, 0x20
	0x03629E24 LDR W8, [X27 + 0x18]
	0x03629E28 CMP X19, X8
	0x03629E2C B.CS 0x362A06C
	0x03629E30 ADRP X8, 0xB12000
	0x03629E34 LDR X8, [X8 + 0x58]
	0x03629E38 LDRB W26, [X28, X19, LSL]
	0x03629E3C LDR X0, [X8]
	0x03629E40 LDR W8, [X0 + 0xE0]
	0x03629E44 CBNZ W8, 0x3629E4C
	0x03629E48 BL 0x1C16DFC
	0x03629E4C ADD X2, X31, 0x24
	0x03629E50 MOV W0, W26
	0x03629E54 MOV X1, X22
	0x03629E58 BL 0x362A6B4
	0x03629E5C ADD X19, X19, 0x1
	0x03629E60 CMP X23, X19
	0x03629E64 B.NE 0x3629E24
	0x03629E68 MOV W19, W25
	0x03629E6C B 0x36299F4
	0x03629E70 LDRSW X8, [X31 + 0x24]
	0x03629E74 ADD W9, W8, 0x1
	0x03629E78 STR W9, [X31 + 0x24]
	0x03629E7C STRH W27, [X24, X8, LSL #1]
	0x03629E80 B 0x36299F4
	0x03629E84 MOVZ W26, 0x1
	0x03629E88 B 0x3629E9C
	0x03629E8C MOV W26, W23
	0x03629E90 MOV W8, W19
	0x03629E94 ADD W19, W8, 0x2
	0x03629E98 MOV X23, X28
	0x03629E9C MOV X0, X31
	0x03629EA0 BL 0x3241948
	0x03629EA4 CBZ X0, 0x362A070
	0x03629EA8 LDR X8, [X0]
	0x03629EAC LDP X9, X1, [X8 + 0x1E8]
	0x03629EB0 BLR X9
	0x03629EB4 MOV X27, X0
	0x03629EB8 CBZ X0, 0x3629EF0
	0x03629EBC ADRP X9, 0xAF9000
	0x03629EC0 LDR X8, [X27]
	0x03629EC4 LDR X9, [X9 + 0x3F8]
	0x03629EC8 LDRB W10, [X8 + 0x130]
	0x03629ECC LDR X1, [X9]
	0x03629ED0 LDRB W9, [X1 + 0x130]
	0x03629ED4 CMP W10, W9
	0x03629ED8 B.CC 0x362A088
	0x03629EDC LDR X8, [X8 + 0xC8]
	0x03629EE0 ADD X8, X8, X9, 0x3, LSL
	0x03629EE4 LDUR X8, [X8 - 0x8]
	0x03629EE8 CMP X8, X1
	0x03629EEC B.NE 0x362A088
	0x03629EF0 ADRP X8, 0xAF9000
	0x03629EF4 LDR X8, [X8 + 0x368]
	0x03629EF8 LDR X0, [X8]
	0x03629EFC BL 0x1C16F10
	0x03629F00 LDR X1, [X29]
	0x03629F04 MOV X2, X31
	0x03629F08 MOV X28, X0
	0x03629F0C BL 0x322F374
	0x03629F10 CBZ X27, 0x362A070
	0x03629F14 MOV X0, X27
	0x03629F18 MOV X1, X28
	0x03629F1C MOV X2, X31
	0x03629F20 BL 0x3243820
	0x03629F24 ADRP X8, 0xAF9000
	0x03629F28 LDR X8, [X8 + 0x648]
	0x03629F2C LDR X0, [X8]
	0x03629F30 BL 0x1C16F10
	0x03629F34 LDR X1, [X29]
	0x03629F38 MOV X2, X31
	0x03629F3C MOV X28, X0
	0x03629F40 BL 0x33FE644
	0x03629F44 MOV X0, X27
	0x03629F48 MOV X1, X28
	0x03629F4C MOV X2, X31
	0x03629F50 BL 0x32438DC
	0x03629F54 ADRP X8, 0xAD3000
	0x03629F58 LDR X8, [X8 + 0x8D8]
	0x03629F5C LDR W1, [X23 + 0x18]
	0x03629F60 LDR X0, [X8]
	0x03629F64 BL 0x1C16D6C
	0x03629F68 LDR X8, [X27]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0xDB8000
	008 Move W8, [X20+1254]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {37}
	014 Move X0, 0xACB000
	015 Move X0, [X0+2760]
	016 Call 0x1C17CF4
	017 Move X0, 0xACD000
	018 Move X0, [X0+632]
	019 Call 0x1C17CF4
	020 Move X0, 0xB13000
	021 Move X0, [X0+72]
	022 Call 0x1C17CF4
	023 Move X0, 0xACD000
	024 Move X0, [X0+2600]
	025 Call 0x1C17CF4
	026 Move X0, 0xACC000
	027 Move X0, [X0+3784]
	028 Call 0x1C17CF4
	029 Move X0, 0xAD4000
	030 Move X0, [X0+2440]
	031 Call 0x1C17CF4
	032 Move X0, 0xAD5000
	033 Move X0, [X0+2200]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+1254], W8
	037 Move X8, [X19+96]
	038 Compare X8, 0
	039 JumpIfEqual {266}
	040 Move W8, [X8+16]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X8, [X19+40]
	044 Compare X8, 0
	045 JumpIfEqual {266}
	046 Move W8, [X8+16]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X20, [X19+72]
	049 Compare X20, 0
	050 JumpIfEqual {266}
	051 Move W8, [X20+16]
	052 Compare W8, 0
	053 JumpIfEqual {130}
	054 Move X8, 0xB13000
	055 Move X8, [X8+72]
	056 Move X0, [X8]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Call UriParser.GetSyntax, X0
	063 Compare X0, 0
	064 JumpIfEqual {91}
	065 Move W8, [X0+16]
	066 Move X20, X19
	067 And W31, W8, 1
	068 NotImplemented "Instruction CSEL not yet implemented."
	069 Move TEMP, X8
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfEqual {107}
	073 Move X10, [X19+32]
	074 Compare X10, 0
	075 JumpIfEqual {266}
	076 Move W10, [X10+16]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CSEL not yet implemented."
	079 Compare W10, 0
	080 JumpIfEqual {120}
	081 Move TEMP, X8
	082 And TEMP, TEMP, 0x4000
	083 Compare TEMP, 0x4000
	084 JumpIfEqual {123}
	085 Move TEMP, X8
	086 And TEMP, TEMP, 2
	087 Compare TEMP, 2
	088 JumpIfEqual {107}
	089 Move X8, 0xAD4000
	090 Move X8, [X8+2440]
	091 Move X8, [X19+32]
	092 Compare X8, 0
	093 JumpIfEqual {266}
	094 Move W8, [X8+16]
	095 Compare W8, 0
	096 JumpIfEqual {117}
	097 Move X20, 0xACD000
	098 Move X20, [X20+2600]
	099 Move X0, [X20]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {105}
	103 Call 0x1C17DFC
	104 Move X0, [X20]
	105 Move X8, [X0+184]
	106 Add X8, X8, 96
	107 Move X21, 0xACD000
	108 Move X21, [X21+2600]
	109 Move X0, [X21]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {115}
	113 Call 0x1C17DFC
	114 Move X0, [X21]
	115 Move X8, [X0+184]
	116 Add X8, X8, 96
	117 Move X8, 0xAD4000
	118 Move X8, [X8+2440]
	119 Move X20, X19
	120 Move X8, 0xAD4000
	121 Move X8, [X8+2440]
	122 Move X20, X19
	123 Move X8, 0xAD4000
	124 Move X8, [X8+2440]
	125 Move X20, X9
	126 Compare X20, 0
	127 JumpIfEqual {266}
	128 Move X8, [X8]
	129 Move [X20+80], X8
	130 Move X0, [X19+72]
	131 Compare X0, 0
	132 JumpIfEqual {266}
	133 Move X20, 0xACB000
	134 Move X22, 0xACD000
	135 Move W8, [X0+16]
	136 Move X20, [X20+2760]
	137 Move X22, [X22+632]
	138 Compare W8, 0
	139 JumpIfEqual {144}
	140 Move X1, [X19+80]
	141 Move X2, X31
	142 Call String.Concat, X0, X1
	143 Move X21, X0
	144 Move X8, [X22]
	145 Move X8, [X8+184]
	146 Move X21, [X8]
	147 Move X0, [X20]
	148 Move W1, 10
	149 Call 0x1C17D6C
	150 Compare X0, 0
	151 JumpIfEqual {266}
	152 Move X8, [X0+24]
	153 Move X20, X0
	154 Compare W8, 0
	155 JumpIfEqual {267}
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move [X20+32], X21
	158 Move X9, [X19+96]
	159 Move [X20+40], X9
	160 Move X1, [X19+40]
	161 Compare X1, 0
	162 JumpIfEqual {266}
	163 Move W9, [X1+16]
	164 Move X21, 0xAD4000
	165 Move X21, [X21+2440]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move X0, [X21]
	168 Move X2, X31
	169 Call String.Concat, X0, X1
	170 Move X8, [X20+24]
	171 Move X9, [X22]
	172 Move X9, [X9+184]
	173 Move X0, [X9]
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move [X20+48], X0
	176 Move X9, [X19+96]
	177 Compare X9, 0
	178 JumpIfEqual {266}
	179 Move W9, [X9+16]
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move X9, 0xAD5000
	182 Move X9, [X9+2200]
	183 Move X9, [X22]
	184 Move X9, [X9+184]
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Move X9, [X9]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move [X20+56], X9
	189 Move X8, [X19+32]
	190 Move X0, X19
	191 Move [X20+64], X8
	192 Add X0, X0, 56
	193 Move W8, [X0]
	194 Add W31, W8, 1
	195 Move X8, [X19+32]
	196 Compare X8, 0
	197 JumpIfEqual {266}
	198 Move W8, [X8+16]
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move X1, X31
	201 Call Int32.ToString, X0
	202 Move X8, [X21]
	203 Move X1, X0
	204 Move X2, X31
	205 Move X0, X8
	206 Call String.Concat, X0, X1
	207 Move X8, [X22]
	208 Move X8, [X8+184]
	209 Move X0, [X8]
	210 Move W8, [X20+24]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move [X20+72], X0
	213 Move X8, [X19+32]
	214 Compare X8, 0
	215 JumpIfEqual {266}
	216 Move W8, [X8+16]
	217 Move W9, 6
	218 NotImplemented "Instruction CMP not yet implemented."
	219 NotImplemented "Instruction CSEL not yet implemented."
	220 NotImplemented "Instruction CSEL not yet implemented."
	221 Move X0, [X19+48]
	222 Compare X0, 0
	223 JumpIfEqual {266}
	224 Move W8, [X0+16]
	225 Compare W8, 0
	226 JumpIfEqual {236}
	227 Move W1, W31
	228 Move X2, X31
	229 Call String.get_Chars, X0, X1
	230 And W8, W0, 0xFFFF
	231 NotImplemented "Instruction CMP not yet implemented."
	232 Move X8, 0xACC000
	233 Move X8, [X8+3784]
	234 Move X21, X20
	235 Move W23, 6
	236 Move W23, 6
	237 Move X21, X20
	238 Move X8, [X22]
	239 Move X8, [X8+184]
	240 Compare X21, 0
	241 JumpIfEqual {266}
	242 Move W9, [X21+24]
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move X8, [X8]
	245 Add X10, X21, W23
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Move [X10+32], X8
	248 Move X8, [X19+48]
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move [X21+88], X8
	251 Move X8, [X19+64]
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Move [X21+96], X8
	254 Move X8, [X19+24]
	255 Move X0, X21
	256 Move X20, [X31+32]
	257 Move X19, [X31+40]
	258 Move X1, X31
	259 Move [X21+104], X8
	260 Move X22, [X31+16]
	261 Move X21, [X31+24]
	262 Move X30, [X31+48]
	263 Move X23, [X31+56]
	264 Call String.Concat, X0
	265 Return X0
	266 Call 0x1C17F20
	267 Call 0x1C17F28
	268 Move X0, 0xB13000
	269 Move X0, [X0+216]
	270 Call 0x1C17D08
	271 Call 0x1C17F10
	272 Move X19, X0
	273 Move X0, 0xB13000
	274 Move X0, [X0+1096]
	275 Call 0x1C17D08
	276 Move X1, X0
	277 Move X0, X19
	278 Call UriFormatException..ctor, X0, X1
	279 Move X0, 0xB13000
	280 Move X0, [X0+1104]
	281 Call 0x1C17D08
	282 Move X1, X0
	283 Move X0, X19
	284 Call 0x1C17DEC

