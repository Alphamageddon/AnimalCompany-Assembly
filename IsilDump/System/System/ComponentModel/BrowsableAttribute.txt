Type: System.ComponentModel.BrowsableAttribute

Method: System.Void .ctor(System.Boolean browsable)

Disassembly:
	0x036606C8 ADRP X20, 0xD80000
	0x036606CC ADRP X19, 0xADC000
	0x036606D0 ADRP X21, 0xADC000
	0x036606D4 LDRB W8, [X20 + 0x6C3]
	0x036606D8 LDR X19, [X19 + 0xE50]
	0x036606DC LDR X21, [X21 + 0xE58]
	0x036606E0 TBNZ X8, 0x0, 0x3660704
	0x036606E4 ADRP X0, 0xADC000
	0x036606E8 LDR X0, [X0 + 0xE58]
	0x036606EC BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W20, W1, 1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Attribute..ctor, X0
	008 Move [X19+16], W20
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Boolean get_Browsable()

Disassembly:
	0x036606F0 ADRP X0, 0xADC000
	0x036606F4 LDR X0, [X0 + 0xE50]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x036606F8 BL 0x1C16CF4
	0x036606FC MOVZ W8, 0x1
	0x03660700 STRB W8, [X20 + 0x6C3]
	0x03660704 LDR X8, [X21]
	0x03660708 LDR X9, [X19]
	0x0366070C LDP X20, X19, [X31 + 0x10]
	0x03660710 LDR X8, [X8 + 0xB8]
	0x03660714 STR X9, [X8]
	0x03660718 LDP X30, X21, [X31], #0x20
	0x0366071C RET
	0x03660720 MOV X1, X31
	0x03660724 B 0x33BDD8C
	0x03660728 MOV X1, X31
	0x0366072C B 0x33BDD8C
	0x03660730 MOV X1, X31
	0x03660734 B 0x33BDD8C
	0x03660738 STP X30, X21, [X31 - 0x20]!
	0x0366073C STP X20, X19, [X31 + 0x10]
	0x03660740 ADRP X21, 0xD80000
	0x03660744 ADRP X20, 0xA95000
	0x03660748 LDRB W8, [X21 + 0x6C4]
	0x0366074C LDR X20, [X20 + 0x278]
	0x03660750 MOV X19, X0
	0x03660754 TBNZ X8, 0x0, 0x366076C
	0x03660758 ADRP X0, 0xA95000
	0x0366075C LDR X0, [X0 + 0x278]
	0x03660760 BL 0x1C16CF4
	0x03660764 MOVZ W8, 0x1
	0x03660768 STRB W8, [X21 + 0x6C4]
	0x0366076C MOV X0, X19
	0x03660770 MOV X1, X31
	0x03660774 BL 0x33A51F0
	0x03660778 LDR X8, [X20]
	0x0366077C LDR X8, [X8 + 0xB8]
	0x03660780 LDR X8, [X8]
	0x03660784 STR X8, [X19 + 0x10]
	0x03660788 LDP X20, X19, [X31 + 0x10]
	0x0366078C LDP X30, X21, [X31], #0x20
	0x03660790 RET
	0x03660794 STR X30, [X31 - 0x20]!
	0x03660798 STP X20, X19, [X31 + 0x10]
	0x0366079C MOV X20, X1
	0x036607A0 MOV X1, X31
	0x036607A4 MOV X19, X0
	0x036607A8 BL 0x33A51F0
	0x036607AC CBZ X20, 0x36607D4
	0x036607B0 LDR X8, [X20]
	0x036607B4 MOV X0, X20
	0x036607B8 LDR X9, [X8 + 0x2D8]
	0x036607BC LDR X1, [X8 + 0x2E0]
	0x036607C0 BLR X9
	0x036607C4 STR X0, [X19 + 0x10]
	0x036607C8 LDP X20, X19, [X31 + 0x10]
	0x036607CC LDR X30, [X31], #0x20
	0x036607D0 RET
	0x036607D4 BL 0x1C16F20
	0x036607D8 LDR X0, [X0 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD81000
	007 Move W8, [X21+1707]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0xADD000
	015 Move X0, [X0+3544]
	016 Call 0x1C17CF4
	017 Move X0, 0xA9E000
	018 Move X0, [X0+368]
	019 Call 0x1C17CF4
	020 Move X0, 0xA98000
	021 Move X0, [X0+4056]
	022 Call 0x1C17CF4
	023 Move X0, 0xA98000
	024 Move X0, [X0+3056]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+1707], W8
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare X20, 0
	030 JumpIfEqual {36}
	031 Move X8, 0xADD000
	032 Move X8, [X8+3544]
	033 Move X9, [X20]
	034 Move X8, [X8]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W8, W31
	037 Move W9, W31
	038 Move W0, 1
	039 Move X8, 0xA98000
	040 Move W1, [X20+16]
	041 Move X8, [X8+4056]
	042 Add X0, X31, 12
	043 NotImplemented "Instruction STRH not yet implemented."
	044 Move X2, [X8]
	045 Call Nullable`1<Boolean>..ctor, X0, X1
	046 NotImplemented "Instruction LDRH not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 And W31, W8, 255
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Move W10, [X19+16]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CSET not yet implemented."
	054 Xor W9, W9, W10
	055 And W0, W8, W9
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X30, [X31+16]
	059 Move X21, [X31+24]
	060 Add X31, X31, 48
	061 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x036607DC RET
	0x036607E0 STP X30, X21, [X31 - 0x20]!
	0x036607E4 STP X20, X19, [X31 + 0x10]
	0x036607E8 ADRP X21, 0xD80000
	0x036607EC LDRB W8, [X21 + 0x6C5]
	0x036607F0 MOV X20, X1
	0x036607F4 MOV X19, X0
	0x036607F8 TBNZ X8, 0x0, 0x3660810
	0x036607FC ADRP X0, 0xADC000
	0x03660800 LDR X0, [X0 + 0xE60]
	0x03660804 BL 0x1C16CF4
	0x03660808 MOVZ W8, 0x1
	0x0366080C STRB W8, [X21 + 0x6C5]
	0x03660810 CBZ X20, 0x3660830
	0x03660814 ADRP X8, 0xADC000
	0x03660818 LDR X8, [X8 + 0xE60]
	0x0366081C LDR X9, [X20]
	0x03660820 LDR X8, [X8]
	0x03660824 CMP X9, X8
	0x03660828 CSEL X8, X20, X31, EQ
	0x0366082C B.EQ 0x3660840
	0x03660830 LDP X20, X19, [X31 + 0x10]
	0x03660834 MOV W0, W31
	0x03660838 LDP X30, X21, [X31], #0x20
	0x0366083C RET
	0x03660840 CBZ X8, 0x366085C
	0x03660844 LDR X0, [X8 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD81000
	007 Move X20, 0xA94000
	008 Move W8, [X21+1708]
	009 Move X20, [X20+2904]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA94000
	016 Move X0, [X0+2904]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1708], W8
	020 Move W8, [X19+16]
	021 Move X0, [X20]
	022 Move [X31+12], W8
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Add X0, X31, 12
	028 Move X1, X31
	029 Call Boolean.GetHashCode, X0
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Add X31, X31, 48
	035 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03660848 LDR X1, [X19 + 0x10]
	0x0366084C LDP X20, X19, [X31 + 0x10]
	0x03660850 MOV X2, X31
	0x03660854 LDP X30, X21, [X31], #0x20
	0x03660858 B 0x321BA08
	0x0366085C BL 0x1C16F20
	0x03660860 STR X30, [X31 - 0x10]!
	0x03660864 LDR X0, [X0 + 0x10]
	0x03660868 CBZ X0, 0x366087C
	0x0366086C LDR X8, [X0]
	0x03660870 LDP X2, X1, [X8 + 0x158]
	0x03660874 LDR X30, [X31], #0x10
	0x03660878 BR X2
	0x0366087C BL 0x1C16F20
	0x03660880 STR X30, [X31 - 0x20]!
	0x03660884 STP X20, X19, [X31 + 0x10]
	0x03660888 ADRP X19, 0xD80000
	0x0366088C ADRP X20, 0xADC000
	0x03660890 LDRB W8, [X19 + 0x6C6]
	0x03660894 LDR X20, [X20 + 0xE60]
	0x03660898 TBNZ X8, 0x0, 0x36608B0
	0x0366089C ADRP X0, 0xADC000
	0x036608A0 LDR X0, [X0 + 0xE60]
	0x036608A4 BL 0x1C16CF4
	0x036608A8 MOVZ W8, 0x1
	0x036608AC STRB W8, [X19 + 0x6C6]
	0x036608B0 LDR X0, [X20]
	0x036608B4 BL 0x1C16F10
	0x036608B8 MOV X19, X0
	0x036608BC BL 0x3660738
	0x036608C0 LDR X8, [X20]
	0x036608C4 LDR X8, [X8 + 0xB8]
	0x036608C8 STR X19, [X8]
	0x036608CC LDP X20, X19, [X31 + 0x10]
	0x036608D0 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xD81000
	005 Move X20, 0xADD000
	006 Move W8, [X19+1709]
	007 Move X20, [X20+3544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xADD000
	013 Move X0, [X0+3544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1709], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X1, X31
	020 Move X19, X0
	021 Call Attribute..ctor, X0
	022 Move W8, 1
	023 Move [X19+16], W8
	024 Move X8, [X20]
	025 Move X8, [X8+184]
	026 Move [X8], X19
	027 Move X0, [X20]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X19, X0
	031 Call Attribute..ctor, X0
	032 Move [X19+16], W31
	033 Move X8, [X20]
	034 Move X8, [X8+184]
	035 Move X9, [X8]
	036 Move [X8+8], X19
	037 Move [X8+16], X9
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Return 

