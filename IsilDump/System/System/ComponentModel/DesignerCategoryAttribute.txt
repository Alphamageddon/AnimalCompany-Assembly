Type: System.ComponentModel.DesignerCategoryAttribute

Method: System.Void .ctor()

Disassembly:
	0x03660ABC LDP X30, X19, [X31], #0x10
	0x03660AC0 BR X2
	0x03660AC4 BL 0x1C16F20
	0x03660AC8 STR X30, [X31 - 0x20]!
	0x03660ACC STP X20, X19, [X31 + 0x10]
	0x03660AD0 ADRP X20, 0xD80000
	0x03660AD4 LDRB W8, [X20 + 0x6C8]
	0x03660AD8 MOV X19, X1
	0x03660ADC TBNZ X8, 0x0, 0x3660BB4
	0x03660AE0 ADRP X0, 0xADC000
	0x03660AE4 LDR X0, [X0 + 0xE70]
	0x03660AE8 BL 0x1C16CF4
	0x03660AEC ADRP X0, 0xADC000
	0x03660AF0 LDR X0, [X0 + 0xE78]
	0x03660AF4 BL 0x1C16CF4
	0x03660AF8 ADRP X0, 0xADC000
	0x03660AFC LDR X0, [X0 + 0xE80]
	0x03660B00 BL 0x1C16CF4
	0x03660B04 ADRP X0, 0xADC000
	0x03660B08 LDR X0, [X0 + 0xE88]
	0x03660B0C BL 0x1C16CF4
	0x03660B10 ADRP X0, 0xADC000
	0x03660B14 LDR X0, [X0 + 0xE90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD81000
	006 Move X20, 0xA96000
	007 Move W8, [X21+1713]
	008 Move X20, [X20+632]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA96000
	015 Move X0, [X0+632]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1713], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Attribute..ctor, X0
	022 Move X8, [X20]
	023 Move X8, [X8+184]
	024 Move X8, [X8]
	025 Move [X19+16], X8
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 

Method: System.Void .ctor(System.String category)

Disassembly:
	0x03660B18 BL 0x1C16CF4
	0x03660B1C ADRP X0, 0xADC000
	0x03660B20 LDR X0, [X0 + 0xE98]
	0x03660B24 BL 0x1C16CF4
	0x03660B28 ADRP X0, 0xA97000
	0x03660B2C LDR X0, [X0 + 0x468]
	0x03660B30 BL 0x1C16CF4
	0x03660B34 ADRP X0, 0xADC000
	0x03660B38 LDR X0, [X0 + 0xEA0]
	0x03660B3C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Attribute..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.String get_Category()

Disassembly:
	0x03660B40 ADRP X0, 0xADC000
	0x03660B44 LDR X0, [X0 + 0xEA8]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03660B48 BL 0x1C16CF4
	0x03660B4C ADRP X0, 0xADC000
	0x03660B50 LDR X0, [X0 + 0xEB0]
	0x03660B54 BL 0x1C16CF4
	0x03660B58 ADRP X0, 0xADC000
	0x03660B5C LDR X0, [X0 + 0xEB8]
	0x03660B60 BL 0x1C16CF4
	0x03660B64 ADRP X0, 0xADC000
	0x03660B68 LDR X0, [X0 + 0xEC0]
	0x03660B6C BL 0x1C16CF4
	0x03660B70 ADRP X0, 0xADC000
	0x03660B74 LDR X0, [X0 + 0xEC8]
	0x03660B78 BL 0x1C16CF4
	0x03660B7C ADRP X0, 0xABF000
	0x03660B80 LDR X0, [X0 + 0x128]
	0x03660B84 BL 0x1C16CF4
	0x03660B88 ADRP X0, 0xABF000
	0x03660B8C LDR X0, [X0 + 0xF0]
	0x03660B90 BL 0x1C16CF4
	0x03660B94 ADRP X0, 0xADC000
	0x03660B98 LDR X0, [X0 + 0xED0]
	0x03660B9C BL 0x1C16CF4
	0x03660BA0 ADRP X0, 0xA93000
	0x03660BA4 LDR X0, [X0 + 0x7C8]
	0x03660BA8 BL 0x1C16CF4
	0x03660BAC MOVZ W8, 0x1
	0x03660BB0 STRB W8, [X20 + 0x6C8]
	0x03660BB4 MOV X0, X19
	0x03660BB8 MOV X1, X31
	0x03660BBC BL 0x3626318
	0x03660BC0 MOVZ W8, 0x6F10
	0x03660BC4 MOVK W8, 0x69110000
	0x03660BC8 CMP W0, W8
	0x03660BCC B.HI 0x3660C1C
	0x03660BD0 MOVZ W8, 0x9B64
	0x03660BD4 MOVK W8, 0x2B1D0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD81000
	006 Move W8, [X21+1714]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xADD000
	014 Move X0, [X0+3552]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1714], W8
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Compare X20, 0
	020 JumpIfEqual {27}
	021 Move X8, 0xADD000
	022 Move X8, [X8+3552]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 NotImplemented "Instruction CSEL not yet implemented."
	027 Move W0, W31
	028 Move W0, 1
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0
	034 Compare X8, 0
	035 JumpIfEqual {45}
	036 Move X0, [X8+16]
	037 Move X1, [X19+16]
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X2, X31
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call String.op_Equality, X0, X1
	044 Return X0
	045 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x03660BD8 CMP W0, W8
	0x03660BDC B.HI 0x3660C78
	0x03660BE0 MOVZ W8, 0xA447
	0x03660BE4 MOVK W8, 0x1F190000
	0x03660BE8 CMP W0, W8
	0x03660BEC B.HI 0x3660CF0
	0x03660BF0 MOVZ W8, 0xA91F
	0x03660BF4 MOVK W8, 0xA770000

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+344]
	007 Move X1, [X8+352]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03660BF8 CMP W0, W8
	0x03660BFC B.EQ 0x3660DA0
	0x03660C00 MOVZ W8, 0xA447
	0x03660C04 MOVK W8, 0x1F190000
	0x03660C08 CMP W0, W8
	0x03660C0C B.NE 0x3660E34
	0x03660C10 ADRP X20, 0xADC000
	0x03660C14 LDR X20, [X20 + 0xEC0]
	0x03660C18 B 0x3660E18
	0x03660C1C MOVZ W8, 0xB1B3
	0x03660C20 MOVK W8, 0xBC570000
	0x03660C24 CMP W0, W8
	0x03660C28 B.HI 0x3660CB4
	0x03660C2C MOVZ W8, 0x37A1
	0x03660C30 MOVK W8, 0x8D290000
	0x03660C34 CMP W0, W8
	0x03660C38 B.HI 0x3660D1C
	0x03660C3C B.EQ 0x3660DC8
	0x03660C40 MOVZ W8, 0xE0E7
	0x03660C44 MOVK W8, 0x6A120000
	0x03660C48 CMP W0, W8
	0x03660C4C B.NE 0x3660E34
	0x03660C50 ADRP X8, 0xADC000
	0x03660C54 LDR X8, [X8 + 0xEC8]
	0x03660C58 MOV X0, X19
	0x03660C5C MOV X2, X31
	0x03660C60 LDR X1, [X8]
	0x03660C64 BL 0x321BA08
	0x03660C68 ADRP X8, 0xADC000
	0x03660C6C LDR X8, [X8 + 0xE90]
	0x03660C70 LDR X8, [X8]
	0x03660C74 B 0x3660E2C
	0x03660C78 MOVZ W8, 0x2D5E
	0x03660C7C MOVK W8, 0x3E140000
	0x03660C80 CMP W0, W8
	0x03660C84 B.HI 0x3660D48
	0x03660C88 MOVZ W8, 0x8B9F
	0x03660C8C MOVK W8, 0x31010000
	0x03660C90 CMP W0, W8
	0x03660C94 B.EQ 0x3660DD4
	0x03660C98 MOVZ W8, 0x2D5E
	0x03660C9C MOVK W8, 0x3E140000
	0x03660CA0 CMP W0, W8
	0x03660CA4 B.NE 0x3660E34
	0x03660CA8 ADRP X20, 0xADC000
	0x03660CAC LDR X20, [X20 + 0xE80]
	0x03660CB0 B 0x3660E18
	0x03660CB4 MOVZ W8, 0x342A
	0x03660CB8 MOVK W8, 0xE27F0000
	0x03660CBC CMP W0, W8
	0x03660CC0 B.HI 0x3660D74
	0x03660CC4 MOVZ W8, 0xC90C
	0x03660CC8 MOVK W8, 0xCD1A0000
	0x03660CCC CMP W0, W8
	0x03660CD0 B.EQ 0x3660DE0
	0x03660CD4 MOVZ W8, 0x342A
	0x03660CD8 MOVK W8, 0xE27F0000
	0x03660CDC CMP W0, W8
	0x03660CE0 B.NE 0x3660E34
	0x03660CE4 ADRP X20, 0xA97000
	0x03660CE8 LDR X20, [X20 + 0x468]
	0x03660CEC B 0x3660E18
	0x03660CF0 MOVZ W8, 0x8E11
	0x03660CF4 MOVK W8, 0x28520000
	0x03660CF8 CMP W0, W8
	0x03660CFC B.EQ 0x3660DEC
	0x03660D00 MOVZ W8, 0x9B64

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xD81000
	008 Move X20, 0xADD000
	009 Move X19, 0xADD000
	010 Move X22, 0xADD000
	011 Move X21, 0xADD000
	012 Move W8, [X23+1715]
	013 Move X20, [X20+3552]
	014 Move X19, [X19+3560]
	015 Move X22, [X22+3568]
	016 Move X21, [X21+3576]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xADD000
	022 Move X0, [X0+3552]
	023 Call 0x1C17CF4
	024 Move X0, 0xADD000
	025 Move X0, [X0+3568]
	026 Call 0x1C17CF4
	027 Move X0, 0xADD000
	028 Move X0, [X0+3576]
	029 Call 0x1C17CF4
	030 Move X0, 0xADD000
	031 Move X0, [X0+3560]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X23+1715], W8
	035 Move X0, [X20]
	036 Call 0x1C17F10
	037 Move X23, [X19]
	038 Move X1, X31
	039 Move X19, X0
	040 Call Attribute..ctor, X0
	041 Move [X19+16], X23
	042 Move X8, [X20]
	043 Move X8, [X8+184]
	044 Move [X8], X19
	045 Move X0, [X20]
	046 Call 0x1C17F10
	047 Move X19, X0
	048 Call DesignerCategoryAttribute..ctor, X0
	049 Move X0, [X20]
	050 Move X8, [X0+184]
	051 Move [X8+8], X19
	052 Call 0x1C17F10
	053 Move X22, [X22]
	054 Move X1, X31
	055 Move X19, X0
	056 Call Attribute..ctor, X0
	057 Move [X19+16], X22
	058 Move X0, [X20]
	059 Move X8, [X0+184]
	060 Move [X8+16], X19
	061 Call 0x1C17F10
	062 Move X21, [X21]
	063 Move X1, X31
	064 Move X19, X0
	065 Call Attribute..ctor, X0
	066 Move [X19+16], X21
	067 Move X8, [X20]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X8, [X8+184]
	071 Move [X8+24], X19
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X30, [X31+48]
	075 Move X23, [X31+56]
	076 Return 

