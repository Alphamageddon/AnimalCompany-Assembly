Type: System.StringExtensions

Method: System.String SubstringTrim(System.String value, System.Int32 startIndex)

Disassembly:
	0x03628D60 CBZ X1, 0x3628F20
	0x03628D64 LDR W9, [X1 + 0x10]
	0x03628D68 ADRP X21, 0xAD4000
	0x03628D6C LDR X21, [X21 + 0x988]
	0x03628D70 CMP W9, 0x0
	0x03628D74 B.LE 0x3628D8C
	0x03628D78 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {7}
	004 Move W8, [X0+16]
	005 Subtract W2, W8, W1
	006 Move X30, [X31+16]
	007 Call 0x1C17F20

Method: System.String SubstringTrim(System.String value, System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x03628D7C MOV X2, X31
	0x03628D80 BL 0x321B938
	0x03628D84 LDR X8, [X20 + 0x18]
	0x03628D88 B 0x3628D98
	0x03628D8C LDR X9, [X22]
	0x03628D90 LDR X9, [X9 + 0xB8]
	0x03628D94 LDR X0, [X9]
	0x03628D98 CMP W8, 0x2
	0x03628D9C B.LS 0x3628F24
	0x03628DA0 STR X0, [X20 + 0x30]
	0x03628DA4 LDR X9, [X19 + 0x60]
	0x03628DA8 CBZ X9, 0x3628F20
	0x03628DAC LDR W9, [X9 + 0x10]
	0x03628DB0 CMP W9, 0x0
	0x03628DB4 B.LE 0x3628DC4
	0x03628DB8 ADRP X9, 0xAD5000
	0x03628DBC LDR X9, [X9 + 0x898]
	0x03628DC0 B 0x3628DCC
	0x03628DC4 LDR X9, [X22]
	0x03628DC8 LDR X9, [X9 + 0xB8]
	0x03628DCC CMP W8, 0x3
	0x03628DD0 B.LS 0x3628F24
	0x03628DD4 LDR X9, [X9]
	0x03628DD8 CMP W8, 0x4
	0x03628DDC STR X9, [X20 + 0x38]
	0x03628DE0 B.EQ 0x3628F24
	0x03628DE4 LDR X8, [X19 + 0x20]
	0x03628DE8 MOV X0, X19
	0x03628DEC STR X8, [X20 + 0x40]
	0x03628DF0 LDR W8, [X0 + 0x38]!
	0x03628DF4 ADDS W31, W8, 0x1
	0x03628DF8 B.EQ 0x3628E30
	0x03628DFC LDR X8, [X19 + 0x20]
	0x03628E00 CBZ X8, 0x3628F20
	0x03628E04 LDR W8, [X8 + 0x10]
	0x03628E08 CMP W8, 0x0
	0x03628E0C B.LE 0x3628E30
	0x03628E10 MOV X1, X31
	0x03628E14 BL 0x337B6E0
	0x03628E18 LDR X8, [X21]
	0x03628E1C MOV X1, X0
	0x03628E20 MOV X2, X31
	0x03628E24 MOV X0, X8
	0x03628E28 BL 0x321B938
	0x03628E2C B 0x3628E3C
	0x03628E30 LDR X8, [X22]
	0x03628E34 LDR X8, [X8 + 0xB8]
	0x03628E38 LDR X0, [X8]
	0x03628E3C LDR W8, [X20 + 0x18]
	0x03628E40 CMP W8, 0x5
	0x03628E44 B.LS 0x3628F24
	0x03628E48 STR X0, [X20 + 0x48]
	0x03628E4C LDR X8, [X19 + 0x20]
	0x03628E50 CBZ X8, 0x3628F20
	0x03628E54 LDR W8, [X8 + 0x10]
	0x03628E58 MOVZ W9, 0x6
	0x03628E5C CMP W8, 0x1
	0x03628E60 CSEL X21, X31, X20, LT
	0x03628E64 CSEL W23, W31, W9, LT
	0x03628E68 B.LT 0x3628EA0
	0x03628E6C LDR X0, [X19 + 0x30]
	0x03628E70 CBZ X0, 0x3628F20
	0x03628E74 LDR W8, [X0 + 0x10]
	0x03628E78 CBZ W8, 0x3628EAC
	0x03628E7C MOV W1, W31
	0x03628E80 MOV X2, X31
	0x03628E84 BL 0x3222A1C
	0x03628E88 AND W8, W0, 0xFFFF
	0x03628E8C CMP W8, 0x2F
	0x03628E90 B.EQ 0x3628EB4
	0x03628E94 ADRP X8, 0xACC000
	0x03628E98 LDR X8, [X8 + 0xEC8]
	0x03628E9C B 0x3628EBC
	0x03628EA0 MOV X21, X20
	0x03628EA4 MOVZ W23, 0x6
	0x03628EA8 B 0x3628EB4
	0x03628EAC MOVZ W23, 0x6
	0x03628EB0 MOV X21, X20
	0x03628EB4 LDR X8, [X22]
	0x03628EB8 LDR X8, [X8 + 0xB8]
	0x03628EBC CBZ X21, 0x3628F20
	0x03628EC0 LDR W9, [X21 + 0x18]
	0x03628EC4 CMP W23, W9
	0x03628EC8 B.CS 0x3628F24
	0x03628ECC LDR X8, [X8]
	0x03628ED0 ADD X10, X21, W23, 0x3, UXTW
	0x03628ED4 CMP W9, 0x7
	0x03628ED8 STR X8, [X10 + 0x20]
	0x03628EDC B.LS 0x3628F24

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0xDB9000
	008 Move W8, [X22+1243]
	009 Move W21, W2
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xACE000
	017 Move X0, [X0+368]
	018 Call 0x1C17CF4
	019 Move X0, 0xACE000
	020 Move X0, [X0+632]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1243], W8
	024 Compare W21, 0
	025 JumpIfEqual {80}
	026 Add W8, W20, W21
	027 Subtract W21, W8, 1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare X19, 0
	030 JumpIfEqual {108}
	031 Move X23, 0xACE000
	032 Move X23, [X23+368]
	033 Move X0, X19
	034 Move W1, W20
	035 Move X2, X31
	036 Call String.get_Chars, X0, X1
	037 Move X8, [X23]
	038 Move W22, W0
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move W0, W22
	045 Move X1, X31
	046 Call Char.IsWhiteSpace, X0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {53}
	051 Add W20, W20, 1
	052 NotImplemented "Instruction CMP not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Compare X19, 0
	055 JumpIfEqual {108}
	056 Move X23, 0xACE000
	057 Move X23, [X23+368]
	058 Move X0, X19
	059 Move W1, W21
	060 Move X2, X31
	061 Call String.get_Chars, X0, X1
	062 Move X8, [X23]
	063 Move W22, W0
	064 Move W9, [X8+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {69}
	067 Move X0, X8
	068 Call 0x1C17DFC
	069 Move W0, W22
	070 Move X1, X31
	071 Call Char.IsWhiteSpace, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {78}
	076 Subtract W21, W21, 1
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Subtract W8, W21, W20
	079 Add W2, W8, 1
	080 Move X8, 0xACE000
	081 Move X8, [X8+632]
	082 Move X8, [X8]
	083 Move X8, [X8+184]
	084 Move X19, [X8]
	085 Move X0, X19
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X30, [X31+48]
	091 Move X23, [X31+56]
	092 Return X0
	093 Compare X19, 0
	094 JumpIfEqual {108}
	095 Move W8, [X19+16]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X0, X19
	098 Move W1, W20
	099 Move X20, [X31+32]
	100 Move X19, [X31+40]
	101 Move X22, [X31+16]
	102 Move X21, [X31+24]
	103 Move X3, X31
	104 Move X30, [X31+48]
	105 Move X23, [X31+56]
	106 Call String.Substring, X0, X1, X2
	107 Return X0
	108 Call 0x1C17F20

