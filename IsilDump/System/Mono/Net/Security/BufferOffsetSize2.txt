Type: Mono.Net.Security.BufferOffsetSize2

Method: System.Void .ctor(System.Int32 size)

Disassembly:
	0x035E8A28 MOV X2, X31
	0x035E8A2C BL 0x32C4908
	0x035E8A30 B 0x35E8820
	0x035E8A34 MOVZ W0, 0x8
	0x035E8A38 BL 0x3EB1AF0
	0x035E8A3C LDR X8, [X20]
	0x035E8A40 STR X8, [X0]
	0x035E8A44 ADRP X1, 0x8CC000
	0x035E8A48 ADD X1, X1, 0xE58
	0x035E8A4C MOV X2, X31
	0x035E8A50 BL 0x3EB1B00
	0x035E8A54 MOV X20, X0
	0x035E8A58 BL 0x3EB1AE0
	0x035E8A5C MOV X0, X20
	0x035E8A60 BL 0x1D2C690
	0x035E8A64 BL 0x1990590
	0x035E8A68 STR X30, [X31 - 0x20]!
	0x035E8A6C STP X20, X19, [X31 + 0x10]
	0x035E8A70 ADRP X20, 0xDF8000
	0x035E8A74 LDRB W8, [X20 + 0x2B1]
	0x035E8A78 MOV X19, X0
	0x035E8A7C TBNZ X8, 0x0, 0x35E8AD0
	0x035E8A80 ADRP X0, 0xB51000
	0x035E8A84 LDR X0, [X0 + 0x490]
	0x035E8A88 BL 0x1C16CF4
	0x035E8A8C ADRP X0, 0xB39000
	0x035E8A90 LDR X0, [X0 + 0x7A8]
	0x035E8A94 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xDF9000
	007 Move X22, 0xB0C000
	008 Move W8, [X21+665]
	009 Move X22, [X22+1560]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB0C000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+665], W8
	021 Move X0, [X22]
	022 Move W1, W19
	023 Call 0x1C17D6C
	024 Move X1, X0
	025 Move X0, X20
	026 Move W2, W31
	027 Move W3, W31
	028 Call BufferOffsetSize..ctor, X0, X1, X2, X3
	029 Move [X20+40], W19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return 

Method: System.Void Reset()

Disassembly:
	0x035E8A98 ADRP X0, 0xB0B000
	0x035E8A9C LDR X0, [X0 + 0xB40]
	0x035E8AA0 BL 0x1C16CF4
	0x035E8AA4 ADRP X0, 0xB34000
	0x035E8AA8 LDR X0, [X0 + 0x4B8]
	0x035E8AAC BL 0x1C16CF4
	0x035E8AB0 ADRP X0, 0xB13000
	0x035E8AB4 LDR X0, [X0 + 0x8A8]
	0x035E8AB8 BL 0x1C16CF4
	0x035E8ABC ADRP X0, 0xB51000
	0x035E8AC0 LDR X0, [X0 + 0x498]
	0x035E8AC4 BL 0x1C16CF4
	0x035E8AC8 MOVZ W8, 0x1
	0x035E8ACC STRB W8, [X20 + 0x2B1]
	0x035E8AD0 CBZ X19, 0x35E8BBC
	0x035E8AD4 ADRP X9, 0xB13000
	0x035E8AD8 LDR X9, [X9 + 0x8A8]
	0x035E8ADC LDR X8, [X19]
	0x035E8AE0 LDR X10, [X9]
	0x035E8AE4 LDRB W9, [X8 + 0x130]
	0x035E8AE8 LDRB W11, [X10 + 0x130]
	0x035E8AEC CMP W9, W11
	0x035E8AF0 B.CC 0x35E8B08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDF9000
	006 Move X20, 0xB0C000
	007 Move W8, [X21+666]
	008 Move X20, [X20+1560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB0C000
	015 Move X0, [X0+1560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+666], W8
	019 Move [X19+24], X31
	020 Move [X19+32], W31
	021 Move W1, [X19+40]
	022 Move X0, [X20]
	023 Call 0x1C17D6C
	024 Move [X19+16], X0
	025 Move [X19+36], W31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 

Method: System.Void MakeRoom(System.Int32 size)

Disassembly:
	0x035E8AF4 LDR X12, [X8 + 0xC8]
	0x035E8AF8 ADD X11, X12, X11, 0x3, LSL
	0x035E8AFC LDUR X11, [X11 - 0x8]
	0x035E8B00 CMP X11, X10
	0x035E8B04 B.EQ 0x35E8BEC
	0x035E8B08 ADRP X10, 0xB39000
	0x035E8B0C LDR X10, [X10 + 0x7A8]
	0x035E8B10 LDR X10, [X10]
	0x035E8B14 LDRB W11, [X10 + 0x130]
	0x035E8B18 CMP W9, W11
	0x035E8B1C B.CC 0x35E8B34
	0x035E8B20 LDR X12, [X8 + 0xC8]
	0x035E8B24 ADD X11, X12, X11, 0x3, LSL
	0x035E8B28 LDUR X11, [X11 - 0x8]
	0x035E8B2C CMP X11, X10
	0x035E8B30 B.EQ 0x35E8BEC
	0x035E8B34 ADRP X10, 0xB34000
	0x035E8B38 LDR X10, [X10 + 0x4B8]
	0x035E8B3C LDR X10, [X10]
	0x035E8B40 LDRB W11, [X10 + 0x130]
	0x035E8B44 CMP W9, W11
	0x035E8B48 B.CC 0x35E8B60
	0x035E8B4C LDR X12, [X8 + 0xC8]
	0x035E8B50 ADD X11, X12, X11, 0x3, LSL
	0x035E8B54 LDUR X11, [X11 - 0x8]
	0x035E8B58 CMP X11, X10
	0x035E8B5C B.EQ 0x35E8BEC
	0x035E8B60 ADRP X10, 0xB51000
	0x035E8B64 LDR X10, [X10 + 0x490]
	0x035E8B68 LDR X0, [X10]
	0x035E8B6C LDRB W10, [X0 + 0x130]
	0x035E8B70 CMP W9, W10
	0x035E8B74 B.CC 0x35E8B8C
	0x035E8B78 LDR X11, [X8 + 0xC8]
	0x035E8B7C ADD X10, X11, X10, 0x3, LSL
	0x035E8B80 LDUR X10, [X10 - 0x8]
	0x035E8B84 CMP X10, X0
	0x035E8B88 B.EQ 0x35E8BEC
	0x035E8B8C ADRP X10, 0xB0B000
	0x035E8B90 LDR X10, [X10 + 0xB40]
	0x035E8B94 LDR X10, [X10]
	0x035E8B98 LDRB W11, [X10 + 0x130]
	0x035E8B9C CMP W9, W11
	0x035E8BA0 B.CC 0x35E8BC8
	0x035E8BA4 LDR X8, [X8 + 0xC8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDF9000
	006 Move W8, [X21+667]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB0C000
	014 Move X0, [X0+1560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+667], W8
	018 Move X8, [X19+16]
	019 Compare X8, 0
	020 JumpIfEqual {54}
	021 Move W10, [X19+24]
	022 Move W11, [X19+28]
	023 Move W8, [X8+24]
	024 Add W9, W11, W10
	025 Subtract W9, W8, W9
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X12, 0xB0C000
	028 Move X12, [X12+1560]
	029 Or W10, W10, W11
	030 Move X0, [X12]
	031 Compare W10, 0
	032 JumpIfEqual {46}
	033 Subtract W9, W20, W9
	034 Add W1, W9, W8
	035 Call 0x1C17D6C
	036 Move X8, [X19+16]
	037 Compare X8, 0
	038 JumpIfEqual {54}
	039 Move X20, X0
	040 Move X0, X8
	041 Move X1, X20
	042 Move W2, W31
	043 Move X3, X31
	044 Call Array.CopyTo, X0, X1, X2
	045 Move [X19+16], X20
	046 Move W1, W20
	047 Call 0x1C17D6C
	048 Move [X19+16], X0
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return 
	054 Call 0x1C17F20

Method: System.Void AppendData(System.Byte[] buffer, System.Int32 offset, System.Int32 size)

Disassembly:
	0x035E8BA8 ADD X8, X8, X11, 0x3, LSL
	0x035E8BAC LDUR X8, [X8 - 0x8]
	0x035E8BB0 CMP X8, X10
	0x035E8BB4 B.NE 0x35E8BC8
	0x035E8BB8 B 0x35E8BEC
	0x035E8BBC ADRP X8, 0xB51000
	0x035E8BC0 LDR X8, [X8 + 0x490]
	0x035E8BC4 LDR X0, [X8]
	0x035E8BC8 ADRP X20, 0xB51000
	0x035E8BCC LDR X20, [X20 + 0x498]
	0x035E8BD0 BL 0x1C16F10
	0x035E8BD4 LDR X1, [X20]
	0x035E8BD8 MOV X2, X19
	0x035E8BDC MOV X3, X31
	0x035E8BE0 MOV X20, X0
	0x035E8BE4 BL 0x364C484
	0x035E8BE8 MOV X19, X20
	0x035E8BEC MOV X0, X19
	0x035E8BF0 LDP X20, X19, [X31 + 0x10]
	0x035E8BF4 LDR X30, [X31], #0x20
	0x035E8BF8 RET
	0x035E8BFC SUB X31, X31, 0xA0
	0x035E8C00 STP X30, X23, [X31 + 0x70]
	0x035E8C04 STP X22, X21, [X31 + 0x80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X1
	007 Move W1, W3
	008 Move W19, W3
	009 Move W20, W2
	010 Move X22, X0
	011 Call BufferOffsetSize2.MakeRoom, X0, X1
	012 Move W8, [X22+24]
	013 Move W9, [X22+28]
	014 Move X2, [X22+16]
	015 Move X0, X21
	016 Move W1, W20
	017 Add W3, W9, W8
	018 Move W4, W19
	019 Move X5, X31
	020 Call Buffer.BlockCopy, X0, X1, X2, X3, X4
	021 Move W8, [X22+28]
	022 Add W8, W8, W19
	023 Move [X22+28], W8
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Return 

