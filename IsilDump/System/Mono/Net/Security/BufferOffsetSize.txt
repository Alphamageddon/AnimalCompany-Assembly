Type: Mono.Net.Security.BufferOffsetSize

Method: System.Int32 get_EndOffset()

Disassembly:
	0x035E885C MOV X1, X0
	0x035E8860 MOV X0, X20
	0x035E8864 BL 0x1C16DEC

ISIL:
	001 Move W8, [X0+24]
	002 Move W9, [X0+28]
	003 Add W0, W9, W8
	004 Return X0

Method: System.Int32 get_Remaining()

Disassembly:
	0x035E8868 BL 0x1C16F20
	0x035E886C BL 0x1C16F20
	0x035E8870 BL 0x1C16F20
	0x035E8874 BL 0x1C16F20
	0x035E8878 ADRP X0, 0xB39000
	0x035E887C LDR X0, [X0 + 0x7A8]
	0x035E8880 BL 0x1C16D08
	0x035E8884 BL 0x1C16F10
	0x035E8888 MOV X20, X0
	0x035E888C ADRP X0, 0xB51000

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move W9, [X0+24]
	006 Move W10, [X0+28]
	007 Move W8, [X8+24]
	008 Add W9, W10, W9
	009 Subtract W0, W8, W9
	010 Move X30, [X31+16]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void .ctor(System.Byte[] buffer, System.Int32 offset, System.Int32 size)

Disassembly:
	0x035E8890 LDR X0, [X0 + 0x488]
	0x035E8894 BL 0x1C16D08
	0x035E8898 MOV X1, X0
	0x035E889C MOV X0, X20
	0x035E88A0 MOV X2, X31
	0x035E88A4 BL 0x32E16BC
	0x035E88A8 ADRP X0, 0xB51000
	0x035E88AC LDR X0, [X0 + 0x480]
	0x035E88B0 BL 0x1C16D08
	0x035E88B4 MOV X1, X0
	0x035E88B8 MOV X0, X20
	0x035E88BC BL 0x1C16DEC
	0x035E88C0 B 0x35E89C4
	0x035E88C4 B 0x35E89C4
	0x035E88C8 B 0x35E89C4
	0x035E88CC B 0x35E89C4
	0x035E88D0 B 0x35E89C4
	0x035E88D4 B 0x35E89C4
	0x035E88D8 B 0x35E89C4
	0x035E88DC B 0x35E89C4
	0x035E88E0 B 0x35E89C4
	0x035E88E4 B 0x35E89C4
	0x035E88E8 B 0x35E88F4
	0x035E88EC B 0x35E89C4
	0x035E88F0 B 0x35E89C4
	0x035E88F4 MOV X20, X0
	0x035E88F8 CMP W1, 0x1
	0x035E88FC B.NE 0x35E89C8
	0x035E8900 MOV X0, X20
	0x035E8904 BL 0x3EB1AD0
	0x035E8908 MOV X20, X0
	0x035E890C ADRP X0, 0xB0B000
	0x035E8910 LDR X0, [X0 + 0x7D0]
	0x035E8914 BL 0x1C16D08
	0x035E8918 LDR X8, [X20]
	0x035E891C LDR X1, [X8]
	0x035E8920 BL 0x1C17270
	0x035E8924 TBZ X0, 0x0, 0x35E896C
	0x035E8928 LDR X20, [X20]
	0x035E892C BL 0x3EB1AE0
	0x035E8930 ADRP X0, 0xB51000
	0x035E8934 LDR X0, [X0 + 0x318]
	0x035E8938 BL 0x1C16D08
	0x035E893C LDR W8, [X0 + 0xE0]
	0x035E8940 CBNZ W8, 0x35E8948
	0x035E8944 BL 0x1C16DFC
	0x035E8948 MOV X0, X20
	0x035E894C BL 0x35E8A68
	0x035E8950 MOV X20, X0
	0x035E8954 ADRP X0, 0xB51000
	0x035E8958 LDR X0, [X0 + 0x480]
	0x035E895C BL 0x1C16D08
	0x035E8960 MOV X1, X0
	0x035E8964 MOV X0, X20
	0x035E8968 BL 0x1C16DEC
	0x035E896C MOVZ W0, 0x8
	0x035E8970 BL 0x3EB1AF0
	0x035E8974 LDR X8, [X20]
	0x035E8978 STR X8, [X0]
	0x035E897C ADRP X1, 0x8CC000
	0x035E8980 ADD X1, X1, 0xE58
	0x035E8984 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X1
	007 Move X1, X31
	008 Move W19, W3
	009 Move W21, W2
	010 Move X20, X0
	011 Call Object..ctor, X0
	012 Compare X22, 0
	013 JumpIfEqual {42}
	014 Move TEMP, X21
	015 And TEMP, TEMP, -2147483648
	016 Compare TEMP, -2147483648
	017 JumpIfEqual {54}
	018 Move TEMP, X19
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfEqual {35}
	022 Move W8, [X22+24]
	023 Add W9, W19, W21
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move [X20+16], X22
	026 Move [X20+24], W21
	027 Move [X20+28], W19
	028 Move [X20+36], W31
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Return 
	035 Move X0, 0xB14000
	036 Move X0, [X0+1888]
	037 Call 0x1C17D08
	038 Call 0x1C17F10
	039 Move X19, X0
	040 Move X0, 0xB37000
	041 Move X0, [X0+3984]
	042 Move X0, 0xB11000
	043 Move X0, [X0+1320]
	044 Call 0x1C17D08
	045 Call 0x1C17F10
	046 Move X19, X0
	047 Move X0, 0xB37000
	048 Move X0, [X0+3912]
	049 Call 0x1C17D08
	050 Move X1, X0
	051 Move X0, X19
	052 Move X2, X31
	053 Call ArgumentNullException..ctor, X0, X1
	054 Move X0, 0xB14000
	055 Move X0, [X0+1888]
	056 Call 0x1C17D08
	057 Call 0x1C17F10
	058 Move X19, X0
	059 Move X0, 0xB3B000
	060 Move X0, [X0+3472]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Move X2, X31
	065 Call ArgumentOutOfRangeException..ctor, X0, X1
	066 Move X0, 0xB52000
	067 Move X0, [X0+960]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC

Method: System.String ToString()

Disassembly:
	0x035E8988 BL 0x3EB1B00
	0x035E898C B 0x35E8A54
	0x035E8990 B 0x35E89C4
	0x035E8994 B 0x35E89C4
	0x035E8998 MOV X20, X0
	0x035E899C STR X1, [X31 + 0x28]
	0x035E89A0 B 0x35E89B0
	0x035E89A4 MOV X20, X0
	0x035E89A8 STR X1, [X31 + 0x28]
	0x035E89AC BL 0x3EB1AE0
	0x035E89B0 LDR X1, [X31 + 0x28]
	0x035E89B4 B 0x35E89C8
	0x035E89B8 B 0x35E89C4
	0x035E89BC B 0x35E89C4
	0x035E89C0 B 0x35E89C4
	0x035E89C4 MOV X20, X0
	0x035E89C8 CMP W1, 0x1
	0x035E89CC B.NE 0x35E8A5C
	0x035E89D0 MOV X0, X20
	0x035E89D4 BL 0x3EB1AD0
	0x035E89D8 MOV X20, X0
	0x035E89DC ADRP X0, 0xB0B000
	0x035E89E0 LDR X0, [X0 + 0x7D0]
	0x035E89E4 BL 0x1C16D08
	0x035E89E8 LDR X8, [X20]
	0x035E89EC LDR X1, [X8]
	0x035E89F0 BL 0x1C17270
	0x035E89F4 TBZ X0, 0x0, 0x35E8A34
	0x035E89F8 LDR X20, [X20]
	0x035E89FC BL 0x3EB1AE0
	0x035E8A00 MOVN W8, 0x1
	0x035E8A04 STR W8, [X19], #0x8
	0x035E8A08 ADRP X0, 0xB0E000
	0x035E8A0C LDR X0, [X0 + 0x280]
	0x035E8A10 BL 0x1C16D08
	0x035E8A14 LDR W8, [X0 + 0xE0]
	0x035E8A18 CBNZ W8, 0x35E8A20
	0x035E8A1C BL 0x1C16DFC
	0x035E8A20 MOV X0, X19
	0x035E8A24 MOV X1, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xDF9000
	007 Move X22, 0xB0C000
	008 Move X21, 0xB52000
	009 Move W8, [X20+664]
	010 Move X22, [X22+1880]
	011 Move X21, [X21+968]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xB0C000
	018 Move X0, [X0+1880]
	019 Call 0x1C17CF4
	020 Move X0, 0xB52000
	021 Move X0, [X0+968]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+664], W8
	025 Move W8, [X19+24]
	026 Move X0, [X22]
	027 Add X1, X31, 12
	028 Move [X31+12], W8
	029 Call 0x1C17E04
	030 Move X20, X0
	031 Move W8, [X19+28]
	032 Move X0, [X22]
	033 Add X1, X31, 8
	034 Move [X31+8], W8
	035 Call 0x1C17E04
	036 Move X8, [X21]
	037 Move X2, X0
	038 Move X1, X20
	039 Move X3, X31
	040 Move X0, X8
	041 Call String.Format, X0, X1, X2
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return X0

