Type: Mono.Unity.UnityTls

Method: System.IntPtr GetUnityTlsInterface()

Disassembly:
	0x035E2FB8 BLR X10

ISIL:
	001 Call 0x1C9A814
	002 Return X0

Method: System.Boolean get_IsSupported()

Disassembly:
	0x035E2FBC LDR X30, [X31 + 0x20]
	0x035E2FC0 ADD X31, X31, 0x30
	0x035E2FC4 RET
	0x035E2FC8 STP X30, X21, [X31 - 0x20]!
	0x035E2FCC STP X20, X19, [X31 + 0x10]
	0x035E2FD0 LDR X8, [X2 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Call UnityTls.get_NativeInterface
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Move X30, [X31+16]
	006 Return X0

Method: Mono.Unity.UnityTls/unitytls_interface_struct get_NativeInterface()

Disassembly:
	0x035E2D34 STR X8, [X19 + 0x18]
	0x035E2D38 B 0x35E2D50
	0x035E2D3C CBZ X20, 0x35E2D68
	0x035E2D40 LDR X8, [X19 + 0x10]
	0x035E2D44 LDR X9, [X19 + 0x20]
	0x035E2D48 STR X8, [X19 + 0x18]
	0x035E2D4C STR X9, [X19 + 0x40]
	0x035E2D50 ADRP X8, 0xFFFFFFFFFE5E1000
	0x035E2D54 ADD X8, X8, 0x7B0
	0x035E2D58 STR X8, [X19 + 0x38]
	0x035E2D5C LDP X20, X19, [X31 + 0x10]
	0x035E2D60 LDP X30, X21, [X31], #0x20
	0x035E2D64 RET
	0x035E2D68 ADRP X1, 0xFFFFFFFFFD539000
	0x035E2D6C ADD X1, X1, 0xEE3
	0x035E2D70 MOV X0, X31
	0x035E2D74 BL 0x1C16F3C
	0x035E2D78 MOV X1, X31
	0x035E2D7C BL 0x1C16DEC
	0x035E2D80 LDR X8, [X0 + 0x40]
	0x035E2D84 LDR X9, [X0 + 0x18]
	0x035E2D88 LDR X7, [X0 + 0x28]
	0x035E2D8C MOV X0, X8
	0x035E2D90 BR X9
	0x035E2D94 STP X30, X21, [X31 - 0x20]!
	0x035E2D98 STP X20, X19, [X31 + 0x10]
	0x035E2D9C LDR X8, [X2 + 0x8]
	0x035E2DA0 STP X1, X2, [X0 + 0x20]
	0x035E2DA4 MOV X19, X0
	0x035E2DA8 MOV X20, X1
	0x035E2DAC STR X8, [X0 + 0x10]
	0x035E2DB0 LDRB W21, [X2 + 0x52]
	0x035E2DB4 STR X0, [X0 + 0x40]
	0x035E2DB8 MOV X0, X2
	0x035E2DBC BL 0x1C16D84
	0x035E2DC0 TBZ X0, 0x0, 0x35E2DDC
	0x035E2DC4 CMP W21, 0x7
	0x035E2DC8 B.NE 0x35E2DE0
	0x035E2DCC ADRP X8, 0xFFFFFFFFFE5E1000
	0x035E2DD0 ADD X8, X8, 0x96C
	0x035E2DD4 STR X8, [X19 + 0x18]
	0x035E2DD8 B 0x35E2DF0
	0x035E2DDC CBZ X20, 0x35E2E08
	0x035E2DE0 LDR X8, [X19 + 0x10]
	0x035E2DE4 LDR X9, [X19 + 0x20]
	0x035E2DE8 STR X8, [X19 + 0x18]
	0x035E2DEC STR X9, [X19 + 0x40]
	0x035E2DF0 ADRP X8, 0xFFFFFFFFFE5E1000
	0x035E2DF4 ADD X8, X8, 0x8C8
	0x035E2DF8 STR X8, [X19 + 0x38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xDFF000
	005 Move X20, 0xB58000
	006 Move W8, [X19+637]
	007 Move X20, [X20+512]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xB58000
	013 Move X0, [X0+520]
	014 Call 0x1C17CF4
	015 Move X0, 0xB3A000
	016 Move X0, [X0+2128]
	017 Call 0x1C17CF4
	018 Move X0, 0xB58000
	019 Move X0, [X0+512]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+637], W8
	023 Move X8, [X20]
	024 Move X8, [X8+184]
	025 Move X0, [X8]
	026 Compare X0, 0
	027 JumpIfNotEqual {57}
	028 Call 0x1C9A814
	029 Move X1, X31
	030 Move X2, X31
	031 Move X19, X0
	032 Call IntPtr.op_Equality, X0, X1
	033 Move W8, W0
	034 Move X0, X31
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {57}
	039 Move X8, 0xB3A000
	040 Move X8, [X8+2128]
	041 Move X0, [X8]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X8, 0xB58000
	047 Move X8, [X8+520]
	048 Move X0, X19
	049 Move X1, [X8]
	050 Call 0x22167DC, X0
	051 Move X8, [X20]
	052 Move X8, [X8+184]
	053 Move [X8], X0
	054 Move X8, [X20]
	055 Move X8, [X8+184]
	056 Move X0, [X8]
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Return X0

