Type: Unity.AI.Navigation.NavMeshModifierVolume

Method: UnityEngine.Vector3 get_size()

Disassembly:
	0x036E0464 STP X22, X21, [X31 + 0x80]
	0x036E0468 STP X20, X19, [X31 + 0x90]
	0x036E046C SUB X31, X31, 0x1B0

ISIL:
	001 Move S0, [X0+32]
	002 Move S1, [X0+36]
	003 Move V2, [X0+40]
	004 Return X0

Method: System.Void set_size(UnityEngine.Vector3 value)

Disassembly:
	0x036E0470 ADRP X24, 0xD00000
	0x036E0474 ADRP X23, 0xA60000
	0x036E0478 ADRP X20, 0xA60000

ISIL:
	001 Move [X0+32], S0
	002 Move [X0+40], S1
	003 Move [X0+40], S2
	004 Return 

Method: UnityEngine.Vector3 get_center()

Disassembly:
	0x036E047C ADRP X22, 0xA60000
	0x036E0480 ADRP X21, 0xA60000
	0x036E0484 LDRB W8, [X24 + 0xB06]

ISIL:
	001 Move S0, [X0+44]
	002 Move S1, [X0+48]
	003 Move V2, [X0+52]
	004 Return X0

Method: System.Void set_center(UnityEngine.Vector3 value)

Disassembly:
	0x036E0488 LDR X23, [X23 + 0x5C8]
	0x036E048C LDR X20, [X20 + 0x5D0]
	0x036E0490 LDR X22, [X22 + 0x5D8]

ISIL:
	001 Move [X0+44], S0
	002 Move [X0+52], S1
	003 Move [X0+52], S2
	004 Return 

Method: System.Int32 get_area()

Disassembly:
	0x036E0494 LDR X21, [X21 + 0x5E0]
	0x036E0498 MOV X19, X0

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_area(System.Int32 value)

Disassembly:
	0x036E049C TBNZ X8, 0x0, 0x36E05B0
	0x036E04A0 ADRP X0, 0xA60000

ISIL:
	001 Move [X0+56], W1
	002 Return 

Method: System.Collections.Generic.List`1<Unity.AI.Navigation.NavMeshModifierVolume> get_activeModifiers()

Disassembly:
	0x036E04A4 LDR X0, [X0 + 0x5E8]
	0x036E04A8 BL 0x1C16CF4
	0x036E04AC ADRP X0, 0xA60000
	0x036E04B0 LDR X0, [X0 + 0x5F0]
	0x036E04B4 BL 0x1C16CF4
	0x036E04B8 ADRP X0, 0xA60000
	0x036E04BC LDR X0, [X0 + 0x5F8]
	0x036E04C0 BL 0x1C16CF4
	0x036E04C4 ADRP X0, 0xA60000
	0x036E04C8 LDR X0, [X0 + 0x600]
	0x036E04CC BL 0x1C16CF4
	0x036E04D0 ADRP X0, 0xA60000
	0x036E04D4 LDR X0, [X0 + 0x608]
	0x036E04D8 BL 0x1C16CF4
	0x036E04DC ADRP X0, 0xA60000
	0x036E04E0 LDR X0, [X0 + 0x610]
	0x036E04E4 BL 0x1C16CF4
	0x036E04E8 ADRP X0, 0xA60000
	0x036E04EC LDR X0, [X0 + 0x618]
	0x036E04F0 BL 0x1C16CF4
	0x036E04F4 ADRP X0, 0xA60000
	0x036E04F8 LDR X0, [X0 + 0x620]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xD01000
	005 Move X19, 0xA61000
	006 Move W8, [X20+2805]
	007 Move X19, [X19+1376]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA61000
	013 Move X0, [X0+1376]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2805], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void OnEnable()

Disassembly:
	0x036E04FC BL 0x1C16CF4
	0x036E0500 ADRP X0, 0xA60000
	0x036E0504 LDR X0, [X0 + 0x628]
	0x036E0508 BL 0x1C16CF4
	0x036E050C ADRP X0, 0xA60000
	0x036E0510 LDR X0, [X0 + 0x5E0]
	0x036E0514 BL 0x1C16CF4
	0x036E0518 ADRP X0, 0xA60000
	0x036E051C LDR X0, [X0 + 0x5D0]
	0x036E0520 BL 0x1C16CF4
	0x036E0524 ADRP X0, 0xA60000
	0x036E0528 LDR X0, [X0 + 0x550]
	0x036E052C BL 0x1C16CF4
	0x036E0530 ADRP X0, 0xA60000
	0x036E0534 LDR X0, [X0 + 0x5D8]
	0x036E0538 BL 0x1C16CF4
	0x036E053C ADRP X0, 0xA60000
	0x036E0540 LDR X0, [X0 + 0x5C8]
	0x036E0544 BL 0x1C16CF4
	0x036E0548 ADRP X0, 0xA60000
	0x036E054C LDR X0, [X0 + 0x528]
	0x036E0550 BL 0x1C16CF4
	0x036E0554 ADRP X0, 0xA60000
	0x036E0558 LDR X0, [X0 + 0x590]
	0x036E055C BL 0x1C16CF4
	0x036E0560 ADRP X0, 0xA60000
	0x036E0564 LDR X0, [X0 + 0x630]
	0x036E0568 BL 0x1C16CF4
	0x036E056C ADRP X0, 0xA60000
	0x036E0570 LDR X0, [X0 + 0x638]
	0x036E0574 BL 0x1C16CF4
	0x036E0578 ADRP X0, 0xA60000
	0x036E057C LDR X0, [X0 + 0x640]
	0x036E0580 BL 0x1C16CF4
	0x036E0584 ADRP X0, 0xA60000
	0x036E0588 LDR X0, [X0 + 0x648]
	0x036E058C BL 0x1C16CF4
	0x036E0590 ADRP X0, 0xA60000
	0x036E0594 LDR X0, [X0 + 0x650]
	0x036E0598 BL 0x1C16CF4
	0x036E059C ADRP X0, 0xA60000
	0x036E05A0 LDR X0, [X0 + 0x658]
	0x036E05A4 BL 0x1C16CF4
	0x036E05A8 MOVZ W8, 0x1
	0x036E05AC STRB W8, [X24 + 0xB06]
	0x036E05B0 ADRP X25, 0xA60000
	0x036E05B4 LDR X25, [X25 + 0x658]
	0x036E05B8 LDR X0, [X23]
	0x036E05BC MOVI V0.2D, 0x0
	0x036E05C0 STP X31, X31, [X31 + 0x150]
	0x036E05C4 STR X31, [X31 + 0x160]
	0x036E05C8 STP V0, V0, [X31 + 0x130]
	0x036E05CC BL 0x1C16F10
	0x036E05D0 LDR X1, [X20]
	0x036E05D4 MOV X20, X0
	0x036E05D8 BL 0x300C9B0
	0x036E05DC LDR X0, [X22]
	0x036E05E0 STR X20, [X31 + 0x1B8]
	0x036E05E4 BL 0x1C16F10
	0x036E05E8 LDR X1, [X21]
	0x036E05EC MOV X21, X0
	0x036E05F0 BL 0x3009B80
	0x036E05F4 LDR W8, [X19 + 0x24]
	0x036E05F8 CMP W8, 0x2
	0x036E05FC B.NE 0x36E06D4
	0x036E0600 ADRP X8, 0xA60000
	0x036E0604 LDR X8, [X8 + 0x5E8]
	0x036E0608 ADRP X22, 0xA60000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD01000
	006 Move X20, 0xA61000
	007 Move W8, [X21+2806]
	008 Move X20, [X20+1376]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xA61000
	015 Move X0, [X0+1384]
	016 Call 0x1C17CF4
	017 Move X0, 0xA61000
	018 Move X0, [X0+1392]
	019 Call 0x1C17CF4
	020 Move X0, 0xA61000
	021 Move X0, [X0+1376]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2806], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move X0, [X8]
	033 Compare X0, 0
	034 JumpIfEqual {85}
	035 Move X8, 0xA61000
	036 Move X8, [X8+1392]
	037 Move X1, X19
	038 Move X2, [X8]
	039 Call List`1<Object>.Contains, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {70}
	044 Move X0, [X20]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X20]
	050 Move X8, [X0+184]
	051 Move X0, [X8]
	052 Compare X0, 0
	053 JumpIfEqual {85}
	054 Move X9, 0xA61000
	055 Move X9, [X9+1384]
	056 Move W10, [X0+28]
	057 Move X8, [X0+16]
	058 Move X9, [X9]
	059 Add W10, W10, 1
	060 Move [X0+28], W10
	061 Compare X8, 0
	062 JumpIfEqual {85}
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 Move W11, [X8+24]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add W9, W10, 1
	067 Add X8, X8, X10
	068 Move [X0+24], W9
	069 Move [X8+32], X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return 
	075 Move X8, [X9+32]
	076 Move X1, X19
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X8, [X8+192]
	080 Move X2, [X8+112]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call List`1<Object>.AddWithResize, X0, X1
	084 Return 
	085 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x036E060C ADRP X24, 0xA60000
	0x036E0610 MOV X0, X19
	0x036E0614 LDR X1, [X8]
	0x036E0618 LDR X22, [X22 + 0x550]
	0x036E061C LDR X24, [X24 + 0x628]
	0x036E0620 BL 0x21A453C
	0x036E0624 LDR X8, [X22]
	0x036E0628 MOV X23, X0
	0x036E062C MOV X0, X8
	0x036E0630 BL 0x1C16F10
	0x036E0634 LDR X2, [X24]
	0x036E0638 MOV X1, X23
	0x036E063C MOV X22, X0
	0x036E0640 BL 0x301B8E0
	0x036E0644 LDR X0, [X25]
	0x036E0648 LDR W8, [X0 + 0xE0]
	0x036E064C CBNZ W8, 0x36E0658
	0x036E0650 BL 0x1C16DFC
	0x036E0654 LDR X0, [X25]
	0x036E0658 LDR X8, [X0 + 0xB8]
	0x036E065C LDR X23, [X8 + 0x10]
	0x036E0660 CBNZ X23, 0x36E06B4
	0x036E0664 LDR W8, [X0 + 0xE0]
	0x036E0668 CBNZ W8, 0x36E0674
	0x036E066C BL 0x1C16DFC
	0x036E0670 LDR X0, [X25]
	0x036E0674 ADRP X9, 0xA60000
	0x036E0678 LDR X8, [X0 + 0xB8]
	0x036E067C LDR X9, [X9 + 0x638]
	0x036E0680 LDR X24, [X8]
	0x036E0684 LDR X0, [X9]
	0x036E0688 BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD01000
	006 Move X20, 0xA61000
	007 Move W8, [X21+2807]
	008 Move X20, [X20+1376]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xA61000
	015 Move X0, [X0+1400]
	016 Call 0x1C17CF4
	017 Move X0, 0xA61000
	018 Move X0, [X0+1376]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2807], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, [X8]
	030 Compare X0, 0
	031 JumpIfEqual {42}
	032 Move X8, 0xA61000
	033 Move X8, [X8+1400]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X2, [X8]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call List`1<Object>.Remove, X0, X1
	041 Return 
	042 Call 0x1C17F20

Method: System.Boolean AffectsAgentType(System.Int32 agentTypeID)

Disassembly:
	0x036E068C ADRP X8, 0xA60000
	0x036E0690 LDR X8, [X8 + 0x640]
	0x036E0694 MOV X1, X24
	0x036E0698 MOV X3, X31
	0x036E069C MOV X23, X0
	0x036E06A0 LDR X2, [X8]
	0x036E06A4 BL 0x24AD1FC
	0x036E06A8 LDR X8, [X25]
	0x036E06AC LDR X8, [X8 + 0xB8]
	0x036E06B0 STR X23, [X8 + 0x10]
	0x036E06B4 CBZ X22, 0x36E0C50
	0x036E06B8 ADRP X8, 0xA60000
	0x036E06BC LDR X8, [X8 + 0x620]
	0x036E06C0 MOV X0, X22
	0x036E06C4 MOV X1, X23
	0x036E06C8 LDR X2, [X8]
	0x036E06CC BL 0x301D8DC
	0x036E06D0 B 0x36E0728
	0x036E06D4 ADRP X22, 0xA60000
	0x036E06D8 LDR X22, [X22 + 0x528]
	0x036E06DC LDR X0, [X22]
	0x036E06E0 LDR W8, [X0 + 0xE0]
	0x036E06E4 CBNZ W8, 0x36E06EC
	0x036E06E8 BL 0x1C16DFC
	0x036E06EC ADRP X23, 0xD00000
	0x036E06F0 LDRB W8, [X23 + 0xB0E]
	0x036E06F4 CBNZ W8, 0x36E070C
	0x036E06F8 ADRP X0, 0xA60000
	0x036E06FC LDR X0, [X0 + 0x528]
	0x036E0700 BL 0x1C16CF4
	0x036E0704 MOVZ W8, 0x1
	0x036E0708 STRB W8, [X23 + 0xB0E]
	0x036E070C LDR X0, [X22]
	0x036E0710 LDR W8, [X0 + 0xE0]
	0x036E0714 CBNZ W8, 0x36E0720
	0x036E0718 BL 0x1C16DFC
	0x036E071C LDR X0, [X22]
	0x036E0720 LDR X8, [X0 + 0xB8]
	0x036E0724 LDR X22, [X8]
	0x036E0728 CBZ X22, 0x36E0C50
	0x036E072C ADRP X8, 0xA60000
	0x036E0730 LDR X8, [X8 + 0x610]
	0x036E0734 ADRP X27, 0xA60000
	0x036E0738 LDR X27, [X27 + 0x5F8]
	0x036E073C ADRP X28, 0xA60000
	0x036E0740 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD01000
	006 Move W8, [X21+2808]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xA61000
	014 Move X0, [X0+1352]
	015 Call 0x1C17CF4
	016 Move X0, 0xA15000
	017 Move X0, [X0+3624]
	018 Call 0x1C17CF4
	019 Move X0, 0xA3E000
	020 Move X0, [X0+3896]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2808], W8
	024 Move X0, [X20+64]
	025 Compare X0, 0
	026 JumpIfEqual {53}
	027 Move W8, [X0+24]
	028 Compare W8, 0
	029 JumpIfEqual {46}
	030 Move X8, 0xA3E000
	031 Move X8, [X8+3896]
	032 Move W1, W31
	033 Move X2, [X8]
	034 Call List`1<Int32>.get_Item, X0, X1
	035 Add W31, W0, 1
	036 Move X0, [X20+64]
	037 Compare X0, 0
	038 JumpIfEqual {53}
	039 Move X8, 0xA61000
	040 Move X8, [X8+1352]
	041 Move W1, W19
	042 Move X2, [X8]
	043 Call List`1<Int32>.IndexOf, X0, X1
	044 Add W31, W0, 1
	045 NotImplemented "Instruction CSET not yet implemented."
	046 Move W0, W31
	047 Move W0, 1
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x036E0744 ADRP X24, 0xA60000
	0x036E0748 ADRP X26, 0xA60000
	0x036E074C LDR X28, [X28 + 0x608]
	0x036E0750 LDR X24, [X24 + 0x618]
	0x036E0754 LDR X26, [X26 + 0x5F0]
	0x036E0758 ADD X8, X31, 0xF0
	0x036E075C MOV X0, X22
	0x036E0760 BL 0x301CB58
	0x036E0764 LDR V0, [X31 + 0xF]
	0x036E0768 LDR X8, [X31 + 0x100]
	0x036E076C STR V0, [X31 + 0x15]
	0x036E0770 STR X8, [X31 + 0x160]
	0x036E0774 LDR X1, [X27]
	0x036E0778 ADD X0, X31, 0x150
	0x036E077C BL 0x2BC4350
	0x036E0780 TBZ X0, 0x0, 0x36E08C8
	0x036E0784 LDR X22, [X31 + 0x160]
	0x036E0788 LDR W0, [X19 + 0x40]
	0x036E078C MOV X1, X31
	0x036E0790 BL 0x3C35CB8
	0x036E0794 CBZ X22, 0x36E0C40
	0x036E0798 MOV W23, W0
	0x036E079C MOV X0, X22
	0x036E07A0 MOV X1, X31
	0x036E07A4 BL 0x3C32ECC
	0x036E07A8 CBZ X0, 0x36E0C44
	0x036E07AC MOV X1, X31
	0x036E07B0 BL 0x3C35734
	0x036E07B4 LSRV W8, W23, W0
	0x036E07B8 TBZ X8, 0x0, 0x36E0774
	0x036E07BC LDR W1, [X19 + 0x20]
	0x036E07C0 MOV X0, X22
	0x036E07C4 BL 0x36DF260
	0x036E07C8 TBZ X0, 0x0, 0x36E0774
	0x036E07CC MOVI V0.2D, 0x0
	0x036E07D0 STP V0, V0, [X31 + 0x130]
	0x036E07D4 MOV X0, X22
	0x036E07D8 MOV X1, X31
	0x036E07DC BL 0x3C32E90
	0x036E07E0 MOV X1, X0
	0x036E07E4 ADD X0, X31, 0x130
	0x036E07E8 MOV X2, X31
	0x036E07EC BL 0x3BE2A64
	0x036E07F0 LDRB W1, [X22 + 0x20]
	0x036E07F4 ADD X0, X31, 0x130
	0x036E07F8 MOV X2, X31
	0x036E07FC BL 0x3BE2A1C
	0x036E0800 LDR W1, [X22 + 0x24]
	0x036E0804 ADD X0, X31, 0x130
	0x036E0808 MOV X2, X31
	0x036E080C BL 0x3BE2A28
	0x036E0810 LDRB W1, [X22 + 0x2A]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xD01000
	006 Move X20, 0xA15000
	007 Move W8, [X21+2809]
	008 Move X20, [X20+3672]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xA15000
	015 Move X0, [X0+3672]
	016 Call 0x1C17CF4
	017 Move X0, 0xA3C000
	018 Move X0, [X0+1944]
	019 Call 0x1C17CF4
	020 Move X0, 0xA15000
	021 Move X0, [X0+3632]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2809], W8
	025 Move X8, -46088192
	026 Move X9, -46080000
	027 Move V0, [X8+217]
	028 Move V1, [X9+1608]
	029 Move W1, 1
	030 Move [X19+2], V0
	031 Move [X19+48], D1
	032 Move X0, [X20]
	033 Call 0x1C17D6C
	034 Compare X0, 0
	035 JumpIfEqual {63}
	036 Move W8, [X0+24]
	037 Move X20, X0
	038 Compare W8, 0
	039 JumpIfEqual {64}
	040 Move X8, 0xA15000
	041 Move X8, [X8+3632]
	042 Move TEMP, 0
	043 Not TEMP
	044 Move W9, TEMP
	045 Move [X20+32], W9
	046 Move X21, 0xA3C000
	047 Move X0, [X8]
	048 Move X21, [X21+1944]
	049 Call 0x1C17F10
	050 Move X2, [X21]
	051 Move X1, X20
	052 Move X21, X0
	053 Call List`1<Int32>..ctor, X0, X1
	054 Move [X19+64], X21
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X1, X31
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Call MonoBehaviour..ctor, X0
	062 Return 
	063 Call 0x1C17F20
	064 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x036E0814 ADD X0, X31, 0x130
	0x036E0818 MOV X2, X31
	0x036E081C BL 0x3BE2A30
	0x036E0820 LDRB W1, [X22 + 0x2B]
	0x036E0824 ADD X0, X31, 0x130
	0x036E0828 MOV X2, X31
	0x036E082C BL 0x3BE2A54
	0x036E0830 LDRB W1, [X22 + 0x28]
	0x036E0834 ADD X0, X31, 0x130
	0x036E0838 MOV X2, X31
	0x036E083C BL 0x3BE2A3C
	0x036E0840 LDRB W1, [X22 + 0x29]
	0x036E0844 ADD X0, X31, 0x130
	0x036E0848 MOV X2, X31
	0x036E084C BL 0x3BE2A48
	0x036E0850 LDP V0, V1, [X31 + 0x130]
	0x036E0854 STP V0, V1, [X31 + 0xF0]
	0x036E0858 CBZ X21, 0x36E0C48
	0x036E085C LDP V0, V1, [X31 + 0xF0]
	0x036E0860 LDR X10, [X28]
	0x036E0864 STP V0, V1, [X31 + 0x170]
	0x036E0868 LDR W9, [X21 + 0x1C]
	0x036E086C LDR X8, [X21 + 0x10]
	0x036E0870 ADD W9, W9, 0x1
	0x036E0874 STR W9, [X21 + 0x1C]
	0x036E0878 CBZ X8, 0x36E0C4C
	0x036E087C LDRSW X9, [X21 + 0x18]
	0x036E0880 LDR W11, [X8 + 0x18]
	0x036E0884 CMP W9, W11
	0x036E0888 B.CS 0x36E08A4
	0x036E088C ADD W10, W9, 0x1
	0x036E0890 STR W10, [X21 + 0x18]
	0x036E0894 LDP V1, V0, [X31 + 0x170]
	0x036E0898 ADD X8, X8, X9, 0x5, LSL
	0x036E089C STP V1, V0, [X8 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xD01000
	007 Move X22, 0xA61000
	008 Move X19, 0xA61000
	009 Move X20, 0xA61000
	010 Move W8, [X21+2810]
	011 Move X22, [X22+1408]
	012 Move X19, [X19+1416]
	013 Move X20, [X20+1376]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xA61000
	019 Move X0, [X0+1416]
	020 Call 0x1C17CF4
	021 Move X0, 0xA61000
	022 Move X0, [X0+1408]
	023 Call 0x1C17CF4
	024 Move X0, 0xA61000
	025 Move X0, [X0+1376]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2810], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call List`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

