Type: Unity.Burst.BurstCompilerOptions

Method: System.String SerialiseCompilationOptionsSafe(System.String[] roots, System.String[] folders, System.String options)

Disassembly:
	0x036FD0F8 LDR X9, [X19]
	0x036FD0FC CBZ X9, 0x36FD144
	0x036FD100 LDRB W10, [X9 + 0x1E]
	0x036FD104 CBZ W10, 0x36FD118
	0x036FD108 LDRH W9, [X9 + 0x1E]
	0x036FD10C STRH W9, [X8 + 0x1E]
	0x036FD110 LDR X8, [X20]
	0x036FD114 CBZ X8, 0x36FD144
	0x036FD118 LDRB W9, [X8 + 0x1C]
	0x036FD11C CBNZ W9, 0x36FD138
	0x036FD120 LDR X9, [X19]
	0x036FD124 CBZ X9, 0x36FD144
	0x036FD128 LDRB W10, [X9 + 0x1C]
	0x036FD12C CBZ W10, 0x36FD138
	0x036FD130 LDRH W9, [X9 + 0x1C]
	0x036FD134 STRH W9, [X8 + 0x1C]
	0x036FD138 LDP X20, X19, [X31 + 0x10]
	0x036FD13C LDP X30, X21, [X31], #0x20
	0x036FD140 RET
	0x036FD144 BL 0x1C16F20
	0x036FD148 SUB X31, X31, 0x50
	0x036FD14C STP X30, X25, [X31 + 0x10]
	0x036FD150 STP X24, X23, [X31 + 0x20]
	0x036FD154 STP X22, X21, [X31 + 0x30]
	0x036FD158 STP X20, X19, [X31 + 0x40]
	0x036FD15C ADRP X23, 0xCE3000
	0x036FD160 ADRP X25, 0xA43000
	0x036FD164 LDRB W8, [X23 + 0xC0E]
	0x036FD168 LDR X25, [X25 + 0xCE0]
	0x036FD16C MOV W20, W4
	0x036FD170 MOV W21, W3
	0x036FD174 MOV X19, X2
	0x036FD178 MOV X24, X1
	0x036FD17C MOV X22, X0
	0x036FD180 TBNZ X8, 0x0, 0x36FD198
	0x036FD184 ADRP X0, 0xA43000
	0x036FD188 LDR X0, [X0 + 0xCE0]
	0x036FD18C BL 0x1C16CF4
	0x036FD190 MOVZ W8, 0x1
	0x036FD194 STRB W8, [X23 + 0xC0E]
	0x036FD198 STP X31, X31, [X31]
	0x036FD19C STR X31, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0xCE4000
	008 Move X23, 0x9F7000
	009 Move W8, [X21+3075]
	010 Move X23, [X23+2760]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X22, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x9F7000
	019 Move X0, [X0+2760]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3075], W8
	023 Move X0, [X23]
	024 Move W1, 3
	025 Call 0x1C17D6C
	026 Move X21, X0
	027 Move X0, X22
	028 Call SafeStringArrayHelper.SerialiseStringArraySafe, X0
	029 Compare X21, 0
	030 JumpIfEqual {50}
	031 Move W8, [X21+24]
	032 Compare W8, 0
	033 JumpIfEqual {49}
	034 Move [X21+32], X0
	035 Move X0, X20
	036 Call SafeStringArrayHelper.SerialiseStringArraySafe, X0
	037 Move W8, [X21+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move [X21+40], X0
	041 Move [X21+48], X19
	042 Move X0, X21
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call 0x1C17F28
	050 Call 0x1C17F20

Method: System.ValueTuple`3<System.String[], System.String[], System.String> DeserialiseCompilationOptionsSafe(System.String from)

Disassembly:
	0x036FD2F0 ADRP X0, 0x9F6000
	0x036FD2F4 LDR X0, [X0 + 0x8F0]
	0x036FD2F8 BL 0x1C16CF4
	0x036FD2FC ADRP X0, 0xA43000
	0x036FD300 LDR X0, [X0 + 0xEA0]
	0x036FD304 BL 0x1C16CF4
	0x036FD308 ADRP X0, 0xA43000
	0x036FD30C LDR X0, [X0 + 0xEA8]
	0x036FD310 BL 0x1C16CF4
	0x036FD314 ADRP X0, 0xA43000
	0x036FD318 LDR X0, [X0 + 0xEB0]
	0x036FD31C BL 0x1C16CF4
	0x036FD320 ADRP X0, 0xA43000
	0x036FD324 LDR X0, [X0 + 0xEB8]
	0x036FD328 BL 0x1C16CF4
	0x036FD32C ADRP X0, 0xA43000
	0x036FD330 LDR X0, [X0 + 0xEC0]
	0x036FD334 BL 0x1C16CF4
	0x036FD338 ADRP X0, 0xA43000
	0x036FD33C LDR X0, [X0 + 0xEC8]
	0x036FD340 BL 0x1C16CF4
	0x036FD344 ADRP X0, 0xA43000
	0x036FD348 LDR X0, [X0 + 0xED0]
	0x036FD34C BL 0x1C16CF4
	0x036FD350 ADRP X0, 0xA43000
	0x036FD354 LDR X0, [X0 + 0xED8]
	0x036FD358 BL 0x1C16CF4
	0x036FD35C ADRP X0, 0xA43000
	0x036FD360 LDR X0, [X0 + 0xEE0]
	0x036FD364 BL 0x1C16CF4
	0x036FD368 ADRP X0, 0xA43000
	0x036FD36C LDR X0, [X0 + 0xEE8]
	0x036FD370 BL 0x1C16CF4
	0x036FD374 ADRP X0, 0xA43000
	0x036FD378 LDR X0, [X0 + 0xEF0]
	0x036FD37C BL 0x1C16CF4
	0x036FD380 ADRP X0, 0xA43000
	0x036FD384 LDR X0, [X0 + 0xEF8]
	0x036FD388 BL 0x1C16CF4
	0x036FD38C ADRP X0, 0xA43000
	0x036FD390 LDR X0, [X0 + 0xF00]
	0x036FD394 BL 0x1C16CF4
	0x036FD398 ADRP X0, 0xA43000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCE4000
	006 Move W9, [X21+3076]
	007 Move X20, X0
	008 Move X19, X8
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA44000
	014 Move X0, [X0+3640]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3076], W8
	018 Move X0, X20
	019 Call SafeStringArrayHelper.DeserialiseStringArraySafe, X0
	020 Compare X0, 0
	021 JumpIfEqual {52}
	022 Move W8, [X0+24]
	023 Move X20, X0
	024 Compare W8, 0
	025 JumpIfEqual {51}
	026 Move X0, [X20+32]
	027 Call SafeStringArrayHelper.DeserialiseStringArraySafe, X0
	028 Move W8, [X20+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X21, X0
	031 Move X0, [X20+40]
	032 Call SafeStringArrayHelper.DeserialiseStringArraySafe, X0
	033 Move W8, [X20+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, 0xA44000
	036 Move X8, [X8+3640]
	037 Move X2, X0
	038 Move X3, [X20+48]
	039 Move [X19], X31
	040 Move [X19+8], X31
	041 Move X4, [X8]
	042 Move [X19+16], X31
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X21
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call ValueTuple`3<Object, Object, Object>..ctor, X0, X1, X2, X3
	050 Return X0
	051 Call 0x1C17F28
	052 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x036FD628 ADD X10, X10, X11, 0x2, LSL
	0x036FD62C BR X10

ISIL:
	001 Move W1, W31
	002 Call BurstCompilerOptions..ctor, X0, X1
	003 Return 

Method: System.Void .ctor(System.Boolean isGlobal)

Disassembly:
	0x036FCBDC LDR X0, [X0 + 0x50]
	0x036FCBE0 BL 0x1C16CF4
	0x036FCBE4 ADRP X0, 0x9F7000
	0x036FCBE8 LDR X0, [X0 + 0xE18]
	0x036FCBEC BL 0x1C16CF4
	0x036FCBF0 ADRP X0, 0x9F9000
	0x036FCBF4 LDR X0, [X0 + 0xE78]
	0x036FCBF8 BL 0x1C16CF4
	0x036FCBFC ADRP X0, 0x9F8000
	0x036FCC00 LDR X0, [X0 + 0x1C0]
	0x036FCC04 BL 0x1C16CF4
	0x036FCC08 ADRP X0, 0x9F8000
	0x036FCC0C LDR X0, [X0 + 0x1D0]
	0x036FCC10 BL 0x1C16CF4
	0x036FCC14 ADRP X0, 0xA44000
	0x036FCC18 LDR X0, [X0 + 0xE70]
	0x036FCC1C BL 0x1C16CF4
	0x036FCC20 MOVZ W8, 0x1
	0x036FCC24 STRB W8, [X20 + 0xC0B]
	0x036FCC28 LDR X1, [X21]
	0x036FCC2C MOV X0, X19
	0x036FCC30 BL 0x21A891C
	0x036FCC34 MOV X21, X0
	0x036FCC38 CBNZ X0, 0x36FCE9C
	0x036FCC3C MOV X0, X19
	0x036FCC40 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W20, W1, 1
	005 Move X1, X31
	006 Move X19, X0
	007 Call Object..ctor, X0
	008 Move W1, 1
	009 Move X0, X19
	010 Move [X19+22], W20
	011 Move W20, 1
	012 Call BurstCompilerOptions.set_EnableBurstCompilation, X0, X1
	013 Move W8, [X19+18]
	014 Move [X19+18], W20
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X8, [X19+24]
	017 Compare X8, 0
	018 JumpIfEqual {26}
	019 Move X2, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 CallNoReturn X2
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return 

Method: System.Boolean get_IsGlobal()

Disassembly:
	0x036FD788 LDR X0, [X24]
	0x036FD78C ADRP X22, 0xA43000

ISIL:
	001 Move W0, [X0+22]
	002 Return X0

Method: System.Boolean get_IsEnabled()

Disassembly:
	0x036FD790 LDR W8, [X0 + 0xE0]
	0x036FD794 LDR X22, [X22 + 0xEF8]
	0x036FD798 CBNZ W8, 0x36FD7A0
	0x036FD79C BL 0x1C16DFC
	0x036FD7A0 LDR X0, [X22]
	0x036FD7A4 MOV X1, X31
	0x036FD7A8 BL 0x36FD8C8
	0x036FD7AC MOV X1, X0
	0x036FD7B0 MOV X0, X21
	0x036FD7B4 BL 0x36FD9AC
	0x036FD7B8 LDRB W8, [X20 + 0x14]
	0x036FD7BC ADRP X20, 0xA1D000
	0x036FD7C0 LDR X20, [X20 + 0x1D0]
	0x036FD7C4 CBZ W8, 0x36FD8A0
	0x036FD7C8 LDR X0, [X24]
	0x036FD7CC ADRP X19, 0xA43000
	0x036FD7D0 LDR W8, [X0 + 0xE0]
	0x036FD7D4 LDR X19, [X19 + 0xEA8]
	0x036FD7D8 CBNZ W8, 0x36FD7E0
	0x036FD7DC BL 0x1C16DFC
	0x036FD7E0 LDR X0, [X19]
	0x036FD7E4 MOV X1, X31
	0x036FD7E8 BL 0x36FD8C8
	0x036FD7EC MOV X1, X0
	0x036FD7F0 MOV X0, X21
	0x036FD7F4 BL 0x36FD9AC
	0x036FD7F8 ADRP X22, 0xA43000
	0x036FD7FC ADRP X23, 0xA43000
	0x036FD800 LDR X22, [X22 + 0xEB0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xCE4000
	005 Move W8, [X20+3077]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA44000
	012 Move X0, [X0+3296]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3077], W8
	016 Move W8, [X19+16]
	017 Compare W8, 0
	018 JumpIfEqual {31}
	019 Move X19, 0xA44000
	020 Move X19, [X19+3296]
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move W8, [X8]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Move W0, W31
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Boolean get_EnableBurstCompilation()

Disassembly:
	0x036FD804 LDR X23, [X23 + 0xED8]
	0x036FD808 MOV X0, X31

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_EnableBurstCompilation(System.Boolean value)

Disassembly:
	0x036FD630 ADRP X8, 0x9F6000
	0x036FD634 LDR X8, [X8 + 0x758]
	0x036FD638 LDR X0, [X8]
	0x036FD63C MOVZ W8, 0x2
	0x036FD640 B 0x36FD6CC
	0x036FD644 ADRP X8, 0x9F6000
	0x036FD648 LDR X8, [X8 + 0x758]
	0x036FD64C LDR X0, [X8]
	0x036FD650 MOVZ W8, 0x3
	0x036FD654 B 0x36FD6CC
	0x036FD658 LDR X0, [X24]
	0x036FD65C LDR W8, [X0 + 0xE0]
	0x036FD660 CBNZ W8, 0x36FD668
	0x036FD664 BL 0x1C16DFC
	0x036FD668 ADRP X8, 0xA43000
	0x036FD66C LDR X8, [X8 + 0xEA0]
	0x036FD670 MOV X1, X31
	0x036FD674 LDR X0, [X8]
	0x036FD678 BL 0x36FD8C8
	0x036FD67C MOV X1, X0
	0x036FD680 MOV X0, X21
	0x036FD684 BL 0x36FD9AC
	0x036FD688 ADRP X8, 0x9F6000
	0x036FD68C LDR X8, [X8 + 0x758]
	0x036FD690 ADD X1, X31, 0xC
	0x036FD694 LDR X0, [X8]
	0x036FD698 MOVZ W8, 0x3
	0x036FD69C STR W8, [X31 + 0xC]
	0x036FD6A0 BL 0x1C16E04
	0x036FD6A4 ADRP X8, 0xA43000
	0x036FD6A8 LDR X8, [X8 + 0xEF0]
	0x036FD6AC MOV X1, X0
	0x036FD6B0 LDR X8, [X8]
	0x036FD6B4 MOV X0, X8
	0x036FD6B8 B 0x36FD700
	0x036FD6BC ADRP X8, 0x9F6000
	0x036FD6C0 LDR X8, [X8 + 0x758]
	0x036FD6C4 LDR X0, [X8]
	0x036FD6C8 MOVZ W8, 0x1
	0x036FD6CC ADD X1, X31, 0xC
	0x036FD6D0 STR W8, [X31 + 0xC]
	0x036FD6D4 BL 0x1C16E04
	0x036FD6D8 LDR X8, [X24]
	0x036FD6DC MOV X22, X0
	0x036FD6E0 LDR W9, [X8 + 0xE0]
	0x036FD6E4 CBNZ W9, 0x36FD6F0
	0x036FD6E8 MOV X0, X8
	0x036FD6EC BL 0x1C16DFC
	0x036FD6F0 ADRP X8, 0xA43000
	0x036FD6F4 LDR X8, [X8 + 0xEF0]
	0x036FD6F8 MOV X1, X22
	0x036FD6FC LDR X0, [X8]
	0x036FD700 BL 0x36FD8C8
	0x036FD704 MOV X1, X0
	0x036FD708 MOV X0, X21
	0x036FD70C BL 0x36FD9AC
	0x036FD710 ADRP X8, 0xA43000
	0x036FD714 ADRP X23, 0xA43000
	0x036FD718 LDRB W9, [X20 + 0x15]
	0x036FD71C LDR X8, [X8 + 0xE98]
	0x036FD720 LDR X23, [X23 + 0xEE0]
	0x036FD724 CBZ W9, 0x36FD734
	0x036FD728 LDR X0, [X8]
	0x036FD72C MOVZ W8, 0x2
	0x036FD730 B 0x36FD744
	0x036FD734 LDRB W9, [X20 + 0x12]
	0x036FD738 CBZ W9, 0x36FD8B4
	0x036FD73C LDR X0, [X8]
	0x036FD740 MOVZ W8, 0x1
	0x036FD744 STR W8, [X31 + 0xC]
	0x036FD748 ADD X1, X31, 0xC
	0x036FD74C BL 0x1C16E04
	0x036FD750 LDR X8, [X24]
	0x036FD754 MOV X22, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xCE4000
	007 Move W8, [X21+3078]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xA44000
	015 Move X0, [X0+3296]
	016 Call 0x1C17CF4
	017 Move X0, 0xA1F000
	018 Move X0, [X0+2120]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3078], W8
	022 Move W8, [X19+22]
	023 Compare W8, 0
	024 JumpIfEqual {32}
	025 Move X21, 0xA44000
	026 Move X21, [X21+3296]
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfEqual {36}
	031 Move W8, W31
	032 Move W8, [X19+16]
	033 And W9, W20, 1
	034 Move [X19+16], W9
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Call 0x1C17DFC
	037 Move W8, [X19+22]
	038 Move X0, [X21]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSET not yet implemented."
	041 Move X9, [X0+184]
	042 Move W21, [X19+16]
	043 Move W9, [X9]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSET not yet implemented."
	046 And W20, W9, W20
	047 Move [X19+16], W20
	048 Move TEMP, X8
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {53}
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W0, W20
	054 Move X1, X31
	055 Call JobsUtility.set_JobCompilerEnabled, X0
	056 Move X22, 0xA1F000
	057 Move X22, [X22+2120]
	058 Move X0, [X22]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {64}
	062 Call 0x1C17DFC
	063 Move X0, [X22]
	064 Move X8, [X0+184]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X8], W20
	067 Move X8, [X19+24]
	068 Compare X8, 0
	069 JumpIfEqual {79}
	070 Move X2, [X8+24]
	071 Move X0, [X8+64]
	072 Move X1, [X8+40]
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 CallNoReturn X2
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X22, [X31+16]
	082 Move X21, [X31+24]
	083 Move X30, [X31+48]
	084 Return 

Method: System.Boolean get_EnableBurstCompileSynchronously()

Disassembly:
	0x036FD828 LDR X1, [X22]
	0x036FD82C LDR X2, [X23]

ISIL:
	001 Move W0, [X0+17]
	002 Return X0

Method: System.Void set_EnableBurstCompileSynchronously(System.Boolean value)

Disassembly:
	0x036FD830 ADRP X20, 0xA43000
	0x036FD834 LDR X20, [X20 + 0xEC8]
	0x036FD838 MOV X0, X19
	0x036FD83C MOV X3, X31
	0x036FD840 BL 0x32FE7B4
	0x036FD844 LDR X8, [X24]
	0x036FD848 MOV X19, X0
	0x036FD84C LDR W9, [X8 + 0xE0]
	0x036FD850 CBNZ W9, 0x36FD85C
	0x036FD854 MOV X0, X8
	0x036FD858 BL 0x1C16DFC
	0x036FD85C LDR X0, [X20]

ISIL:
	001 Move W8, [X0+17]
	002 And W9, W1, 1
	003 Move [X0+17], W9
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 Move X2, [X8+24]
	009 Move X0, [X8+64]
	010 Move X1, [X8+40]
	011 CallNoReturn X2
	012 Return 

Method: System.Boolean get_EnableBurstSafetyChecks()

Disassembly:
	0x036FD860 MOV X1, X19
	0x036FD864 BL 0x36FD8C8

ISIL:
	001 Move W0, [X0+18]
	002 Return X0

Method: System.Void set_EnableBurstSafetyChecks(System.Boolean value)

Disassembly:
	0x036FD758 LDR W9, [X8 + 0xE0]
	0x036FD75C CBNZ W9, 0x36FD768
	0x036FD760 MOV X0, X8
	0x036FD764 BL 0x1C16DFC
	0x036FD768 LDR X0, [X23]
	0x036FD76C MOV X1, X22
	0x036FD770 BL 0x36FD8C8
	0x036FD774 MOV X1, X0
	0x036FD778 MOV X0, X21
	0x036FD77C BL 0x36FD9AC
	0x036FD780 LDRB W8, [X20 + 0x13]
	0x036FD784 CBZ W8, 0x36FD7B8

ISIL:
	001 Move W8, [X0+18]
	002 And W9, W1, 1
	003 Move [X0+18], W9
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 Move X2, [X8+24]
	009 Move X0, [X8+64]
	010 Move X1, [X8+40]
	011 CallNoReturn X2
	012 Return 

Method: System.Boolean get_ForceEnableBurstSafetyChecks()

Disassembly:
	0x036FD86C MOV X0, X21
	0x036FD870 BL 0x36FD9AC

ISIL:
	001 Move W0, [X0+21]
	002 Return X0

Method: System.Void set_ForceEnableBurstSafetyChecks(System.Boolean value)

Disassembly:
	0x036FD874 CBZ X21, 0x36FD8C4
	0x036FD878 LDR X8, [X21]
	0x036FD87C MOV X0, X21
	0x036FD880 LDP X9, X1, [X8 + 0x168]
	0x036FD884 BLR X9
	0x036FD888 LDP X20, X19, [X31 + 0x40]
	0x036FD88C LDP X22, X21, [X31 + 0x30]
	0x036FD890 LDP X24, X23, [X31 + 0x20]
	0x036FD894 LDP X26, X25, [X31 + 0x10]
	0x036FD898 LDR X30, [X31], #0x50
	0x036FD89C RET
	0x036FD8A0 CBZ X19, 0x36FD7F8

ISIL:
	001 Move W8, [X0+21]
	002 And W9, W1, 1
	003 Move [X0+21], W9
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 Move X2, [X8+24]
	009 Move X0, [X8+64]
	010 Move X1, [X8+40]
	011 CallNoReturn X2
	012 Return 

Method: System.Boolean get_EnableBurstDebug()

Disassembly:
	0x036FD8A4 MOV X0, X19
	0x036FD8A8 BL 0x36FA104

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void set_EnableBurstDebug(System.Boolean value)

Disassembly:
	0x036FD8AC TBNZ X0, 0x0, 0x36FD7C8
	0x036FD8B0 B 0x36FD7F8
	0x036FD8B4 LDR X0, [X8]
	0x036FD8B8 STR W31, [X31 + 0xC]
	0x036FD8BC B 0x36FD748
	0x036FD8C0 BL 0x1C16F28
	0x036FD8C4 BL 0x1C16F20
	0x036FD8C8 STP X30, X21, [X31 - 0x20]!
	0x036FD8CC STP X20, X19, [X31 + 0x10]
	0x036FD8D0 ADRP X21, 0xCE3000
	0x036FD8D4 LDRB W8, [X21 + 0xC10]
	0x036FD8D8 MOV X20, X1

ISIL:
	001 Move W8, [X0+20]
	002 And W9, W1, 1
	003 Move [X0+20], W9
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 Move X2, [X8+24]
	009 Move X0, [X8+64]
	010 Move X1, [X8+40]
	011 CallNoReturn X2
	012 Return 

Method: System.Boolean get_DisableOptimizations()

Disassembly:
	0x036FD8DC MOV X19, X0
	0x036FD8E0 TBNZ X8, 0x0, 0x36FD904

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void set_DisableOptimizations(System.Boolean value)

Disassembly:
	0x036FD8E4 ADRP X0, 0x9F8000

ISIL:
	001 Return 

Method: System.Boolean get_EnableFastMath()

Disassembly:
	0x036FD8E8 LDR X0, [X0 + 0x278]
	0x036FD8EC BL 0x1C16CF4

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void set_EnableFastMath(System.Boolean value)

Disassembly:
	0x036FD8F0 ADRP X0, 0xA21000

ISIL:
	001 Return 

Method: System.Boolean get_EnableBurstTimings()

Disassembly:
	0x036FD8F4 LDR X0, [X0 + 0x578]
	0x036FD8F8 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+19]
	002 Return X0

Method: System.Void set_EnableBurstTimings(System.Boolean value)

Disassembly:
	0x036FD8FC MOVZ W8, 0x1
	0x036FD900 STRB W8, [X21 + 0xC10]
	0x036FD904 CBZ X19, 0x36FD964
	0x036FD908 ADRP X8, 0xA21000
	0x036FD90C LDR X8, [X8 + 0x578]
	0x036FD910 LDR X21, [X8]
	0x036FD914 CBNZ X20, 0x36FD930
	0x036FD918 ADRP X8, 0x9F8000
	0x036FD91C LDR X8, [X8 + 0x278]
	0x036FD920 LDR X8, [X8]
	0x036FD924 LDR X8, [X8 + 0xB8]
	0x036FD928 LDR X20, [X8]

ISIL:
	001 Move W8, [X0+19]
	002 And W9, W1, 1
	003 Move [X0+19], W9
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X8, [X0+24]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 Move X2, [X8+24]
	009 Move X0, [X8+64]
	010 Move X1, [X8+40]
	011 CallNoReturn X2
	012 Return 

Method: System.Boolean get_RequiresSynchronousCompilation()

Disassembly:
	0x036FD92C CBZ X20, 0x36FD95C
	0x036FD930 LDR X8, [X20]
	0x036FD934 MOV X0, X20
	0x036FD938 LDP X9, X1, [X8 + 0x168]
	0x036FD93C BLR X9
	0x036FD940 MOV X2, X0
	0x036FD944 MOV X1, X19
	0x036FD948 LDP X20, X19, [X31 + 0x10]
	0x036FD94C MOV X0, X21
	0x036FD950 MOV X3, X31
	0x036FD954 LDP X30, X21, [X31], #0x20
	0x036FD958 B 0x32274B8
	0x036FD95C MOV X2, X31
	0x036FD960 B 0x36FD944
	0x036FD964 ADRP X0, 0x9FB000
	0x036FD968 LDR X0, [X0 + 0x528]
	0x036FD96C BL 0x1C16D08
	0x036FD970 BL 0x1C16F10
	0x036FD974 MOV X19, X0
	0x036FD978 ADRP X0, 0xA43000
	0x036FD97C LDR X0, [X0 + 0xF18]
	0x036FD980 BL 0x1C16D08
	0x036FD984 MOV X1, X0
	0x036FD988 MOV X0, X19
	0x036FD98C MOV X2, X31
	0x036FD990 BL 0x330E100
	0x036FD994 ADRP X0, 0xA43000
	0x036FD998 LDR X0, [X0 + 0xF20]
	0x036FD99C BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xCE4000
	005 Move W8, [X20+3079]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA44000
	012 Move X0, [X0+3296]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3079], W8
	016 Move W8, [X19+17]
	017 Compare W8, 0
	018 JumpIfEqual {20}
	019 Move W0, 1
	020 Move X19, 0xA44000
	021 Move X19, [X19+3296]
	022 Move X0, [X19]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X19]
	028 Move X8, [X0+184]
	029 Move W8, [X8+1]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Action get_OptionsChanged()

Disassembly:
	0x036FD9A0 MOV X1, X0
	0x036FD9A4 MOV X0, X19

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_OptionsChanged(System.Action value)

Disassembly:
	0x036FD9A8 BL 0x1C16DEC
	0x036FD9AC STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: Unity.Burst.BurstCompilerOptions Clone()

Disassembly:
	0x036FD9B0 STP X20, X19, [X31 + 0x10]
	0x036FD9B4 CBZ X0, 0x36FD9F4
	0x036FD9B8 MOV X19, X1
	0x036FD9BC MOV X1, X31
	0x036FD9C0 MOV X20, X0
	0x036FD9C4 BL 0x323260C
	0x036FD9C8 CBZ W0, 0x36FD9DC
	0x036FD9CC MOVZ W1, 0xA
	0x036FD9D0 MOV X0, X20
	0x036FD9D4 MOV X2, X31
	0x036FD9D8 BL 0x3233D30
	0x036FD9DC MOV X0, X20
	0x036FD9E0 MOV X1, X19
	0x036FD9E4 LDP X20, X19, [X31 + 0x10]
	0x036FD9E8 MOV X2, X31
	0x036FD9EC LDR X30, [X31], #0x20
	0x036FD9F0 B 0x32333E0
	0x036FD9F4 BL 0x1C16F20
	0x036FD9F8 STR X30, [X31 - 0x50]!
	0x036FD9FC STP X26, X25, [X31 + 0x10]
	0x036FDA00 STP X24, X23, [X31 + 0x20]
	0x036FDA04 STP X22, X21, [X31 + 0x30]
	0x036FDA08 STP X20, X19, [X31 + 0x40]
	0x036FDA0C ADRP X19, 0xCE3000
	0x036FDA10 LDRB W8, [X19 + 0xC11]
	0x036FDA14 TBNZ X8, 0x0, 0x36FDA44
	0x036FDA18 ADRP X0, 0xA43000
	0x036FDA1C LDR X0, [X0 + 0xCE0]
	0x036FDA20 BL 0x1C16CF4
	0x036FDA24 ADRP X0, 0xA43000
	0x036FDA28 LDR X0, [X0 + 0xF28]
	0x036FDA2C BL 0x1C16CF4
	0x036FDA30 ADRP X0, 0xA43000
	0x036FDA34 LDR X0, [X0 + 0xF30]
	0x036FDA38 BL 0x1C16CF4
	0x036FDA3C MOVZ W8, 0x1
	0x036FDA40 STRB W8, [X19 + 0xC11]
	0x036FDA44 MOV X0, X31
	0x036FDA48 BL 0x33C1904
	0x036FDA4C CBZ X0, 0x36FDB04
	0x036FDA50 LDR X8, [X0 + 0x18]
	0x036FDA54 MOV X19, X0
	0x036FDA58 CMP W8, 0x1
	0x036FDA5C B.LT 0x36FDAE8
	0x036FDA60 ADRP X22, 0xA43000
	0x036FDA64 ADRP X23, 0xA43000
	0x036FDA68 ADRP X24, 0xA43000
	0x036FDA6C LDR X22, [X22 + 0xF28]
	0x036FDA70 LDR X23, [X23 + 0xCE0]
	0x036FDA74 LDR X24, [X24 + 0xF30]
	0x036FDA78 MOV X21, X31
	0x036FDA7C AND X8, X8, 0x0
	0x036FDA80 ADD X25, X19, 0x20
	0x036FDA84 MOVZ W26, 0x1
	0x036FDA88 CMP X21, W8, UXTW
	0x036FDA8C B.CS 0x36FDB00
	0x036FDA90 LDR X20, [X25, X21, LSL #3]
	0x036FDA94 LDR X1, [X22]
	0x036FDA98 MOV X2, X31
	0x036FDA9C MOV X0, X20
	0x036FDAA0 BL 0x321BA08
	0x036FDAA4 TBZ X0, 0x0, 0x36FDAB4
	0x036FDAA8 LDR X8, [X23]
	0x036FDAAC LDR X8, [X8 + 0xB8]
	0x036FDAB0 B 0x36FDAD4
	0x036FDAB4 LDR X1, [X24]
	0x036FDAB8 MOV X0, X20
	0x036FDABC MOV X2, X31
	0x036FDAC0 BL 0x321BA08
	0x036FDAC4 TBZ X0, 0x0, 0x36FDAD8
	0x036FDAC8 LDR X8, [X23]
	0x036FDACC LDR X8, [X8 + 0xB8]
	0x036FDAD0 ADD X8, X8, 0x1
	0x036FDAD4 STRB W26, [X8]
	0x036FDAD8 LDR W8, [X19 + 0x18]
	0x036FDADC ADD X21, X21, 0x1
	0x036FDAE0 CMP X21, W8, SXTW
	0x036FDAE4 B.LT 0x36FDA88
	0x036FDAE8 LDP X20, X19, [X31 + 0x40]
	0x036FDAEC LDP X22, X21, [X31 + 0x30]
	0x036FDAF0 LDP X24, X23, [X31 + 0x20]
	0x036FDAF4 LDP X26, X25, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0xCE4000
	006 Move X21, 0xA44000
	007 Move W8, [X19+3080]
	008 Move X21, [X21+3296]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA44000
	015 Move X0, [X0+3296]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+3080], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W1, W31
	022 Move X19, X0
	023 Call BurstCompilerOptions..ctor, X0, X1
	024 Compare X19, 0
	025 JumpIfEqual {90}
	026 Move W1, [X20+16]
	027 Move X0, X19
	028 Call BurstCompilerOptions.set_EnableBurstCompilation, X0, X1
	029 Move W8, [X20+17]
	030 Move W9, [X19+17]
	031 Move [X19+17], W8
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X8, [X19+24]
	034 Compare X8, 0
	035 JumpIfEqual {40}
	036 Move X9, [X8+24]
	037 Move X0, [X8+64]
	038 Move X1, [X8+40]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move W8, [X20+18]
	041 Move W9, [X19+18]
	042 Move [X19+18], W8
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X8, [X19+24]
	045 Compare X8, 0
	046 JumpIfEqual {51}
	047 Move X9, [X8+24]
	048 Move X0, [X8+64]
	049 Move X1, [X8+40]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move W8, [X20+19]
	052 Move W9, [X19+19]
	053 Move [X19+19], W8
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X8, [X19+24]
	056 Compare X8, 0
	057 JumpIfEqual {62}
	058 Move X9, [X8+24]
	059 Move X0, [X8+64]
	060 Move X1, [X8+40]
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move W8, [X20+20]
	063 Move W9, [X19+20]
	064 Move [X19+20], W8
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X8, [X19+24]
	067 Compare X8, 0
	068 JumpIfEqual {73}
	069 Move X9, [X8+24]
	070 Move X0, [X8+64]
	071 Move X1, [X8+40]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Move W8, [X20+21]
	074 Move W9, [X19+21]
	075 Move [X19+21], W8
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X8, [X19+24]
	078 Compare X8, 0
	079 JumpIfEqual {84}
	080 Move X9, [X8+24]
	081 Move X0, [X8+64]
	082 Move X1, [X8+40]
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move X0, X19
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Return X0
	090 Call 0x1C17F20

Method: System.Boolean TryGetAttribute(System.Reflection.MemberInfo member, out Unity.Burst.BurstCompileAttribute attribute)

Disassembly:
	0x036FDAF8 LDR X30, [X31], #0x50
	0x036FDAFC RET
	0x036FDB00 BL 0x1C16F28
	0x036FDB04 BL 0x1C16F20
	0x036FDB08 MOV W0, W31
	0x036FDB0C RET
	0x036FDB10 STR X30, [X31 - 0x10]!
	0x036FDB14 CBZ X0, 0x36FDB30
	0x036FDB18 LDR X8, [X0]
	0x036FDB1C LDR X9, [X8 + 0x2D8]
	0x036FDB20 LDR X1, [X8 + 0x2E0]
	0x036FDB24 BLR X9
	0x036FDB28 LDR X30, [X31], #0x10
	0x036FDB2C B 0x36FDB34
	0x036FDB30 BL 0x1C16F20
	0x036FDB34 STR X30, [X31 - 0x30]!
	0x036FDB38 STP X22, X21, [X31 + 0x10]
	0x036FDB3C STP X20, X19, [X31 + 0x20]
	0x036FDB40 CBZ X0, 0x36FDBB4
	0x036FDB44 LDR W8, [X0 + 0x10]
	0x036FDB48 MOVZ W20, 0x9DC5
	0x036FDB4C MOV X19, X0
	0x036FDB50 MOVK W20, 0x811C0000
	0x036FDB54 CMP W8, 0x1
	0x036FDB58 B.LT 0x36FDBA0
	0x036FDB5C MOVZ W22, 0x193
	0x036FDB60 MOV W21, W31
	0x036FDB64 MOVK W22, 0x1000000
	0x036FDB68 MOV X0, X19
	0x036FDB6C MOV W1, W21
	0x036FDB70 MOV X2, X31
	0x036FDB74 BL 0x3222A1C
	0x036FDB78 AND W9, W0, 0xFF
	0x036FDB7C LDR W10, [X19 + 0x10]
	0x036FDB80 EOR W9, W20, W9, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCE4000
	006 Move W8, [X21+3081]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA44000
	014 Move X0, [X0+3296]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3081], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Move X2, X31
	021 Move [X19], X31
	022 Call MemberInfo.op_Equality, X0, X1
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {28}
	027 Move W0, W31
	028 Move X8, 0xA44000
	029 Move X8, [X8+3296]
	030 Move X0, [X8]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Call BurstCompilerOptions.GetBurstCompileAttribute, X0
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move [X19], X0
	040 Move W0, W8
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0

Method: System.Boolean TryGetAttribute(System.Reflection.Assembly assembly, out Unity.Burst.BurstCompileAttribute attribute)

Disassembly:
	0x036FDFA4 ADRP X0, 0xA43000
	0x036FDFA8 LDR X0, [X0 + 0xF70]
	0x036FDFAC BL 0x1C16D08
	0x036FDFB0 MOV X1, X0
	0x036FDFB4 MOV X0, X19
	0x036FDFB8 BL 0x1C16DEC
	0x036FDFBC MOV X1, X31
	0x036FDFC0 B 0x33A51F0
	0x036FDFC4 CMP W3, W1
	0x036FDFC8 MOV X8, X2
	0x036FDFCC CSEL W9, W1, W3, GT
	0x036FDFD0 SXTW X2, W9
	0x036FDFD4 MOV X1, X8
	0x036FDFD8 MOV X3, X31
	0x036FDFDC STURH W9, [X0 - 0x2]
	0x036FDFE0 STRB W31, [X0, W9, SXTW]
	0x036FDFE4 B 0x3BFF954
	0x036FDFE8 STR X30, [X31 - 0x50]!
	0x036FDFEC STP X26, X25, [X31 + 0x10]
	0x036FDFF0 STP X24, X23, [X31 + 0x20]
	0x036FDFF4 STP X22, X21, [X31 + 0x30]
	0x036FDFF8 STP X20, X19, [X31 + 0x40]
	0x036FDFFC ADRP X26, 0xCE3000
	0x036FE000 ADRP X25, 0xA42000
	0x036FE004 LDRB W8, [X26 + 0xC15]
	0x036FE008 B 0x3EB16C4
	0x036FE00C MOV W24, W5
	0x036FE010 MOV W19, W4
	0x036FE014 MOV X23, X3
	0x036FE018 MOV W20, W2
	0x036FE01C MOV X21, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCE4000
	006 Move W8, [X21+3082]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA44000
	014 Move X0, [X0+3704]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3082], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Move X2, X31
	021 Call Assembly.op_Equality, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {28}
	026 Move W0, W31
	027 Move [X19], X31
	028 Move X8, 0xA44000
	029 Move X8, [X8+3704]
	030 Move X0, X20
	031 Move X1, [X8]
	032 Call 0x21A985C, X0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move [X19], X0
	035 NotImplemented "Instruction CSET not yet implemented."
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return X0

Method: Unity.Burst.BurstCompileAttribute GetBurstCompileAttribute(System.Reflection.MemberInfo memberInfo)

Disassembly:
	0x036FDB84 AND W8, W0, 0xFF00
	0x036FDB88 MUL W9, W9, W22
	0x036FDB8C EOR W8, W9, W8, 0x8
	0x036FDB90 ADD W21, W21, 0x1
	0x036FDB94 CMP W21, W10
	0x036FDB98 MUL W20, W8, W22
	0x036FDB9C B.LT 0x36FDB68
	0x036FDBA0 MOV W0, W20
	0x036FDBA4 LDP X20, X19, [X31 + 0x20]
	0x036FDBA8 LDP X22, X21, [X31 + 0x10]
	0x036FDBAC LDR X30, [X31], #0x30
	0x036FDBB0 RET
	0x036FDBB4 BL 0x1C16F20
	0x036FDBB8 STR X30, [X31 - 0x10]!
	0x036FDBBC CBZ X0, 0x36FDBD8
	0x036FDBC0 LDR X8, [X0]
	0x036FDBC4 LDR X9, [X8 + 0x2D8]
	0x036FDBC8 LDR X1, [X8 + 0x2E0]
	0x036FDBCC BLR X9
	0x036FDBD0 LDR X30, [X31], #0x10
	0x036FDBD4 B 0x36FDBDC
	0x036FDBD8 BL 0x1C16F20
	0x036FDBDC STR X30, [X31 - 0x30]!
	0x036FDBE0 STP X22, X21, [X31 + 0x10]
	0x036FDBE4 STP X20, X19, [X31 + 0x20]
	0x036FDBE8 CBZ X0, 0x36FDC64
	0x036FDBEC LDR W8, [X0 + 0x10]
	0x036FDBF0 MOVZ X20, 0x2325
	0x036FDBF4 MOVK X20, 0x84220000
	0x036FDBF8 MOVK X20, 0x9CE4
	0x036FDBFC MOV X19, X0
	0x036FDC00 CMP W8, 0x1
	0x036FDC04 MOVK X20, 0xCBF20000
	0x036FDC08 B.LT 0x36FDC50
	0x036FDC0C MOVZ X22, 0x1B3
	0x036FDC10 MOV W21, W31
	0x036FDC14 MOVK X22, 0x100
	0x036FDC18 MOV X0, X19
	0x036FDC1C MOV W1, W21
	0x036FDC20 MOV X2, X31
	0x036FDC24 BL 0x3222A1C
	0x036FDC28 AND X8, X0, 0xFF
	0x036FDC2C LDR W10, [X19 + 0x10]
	0x036FDC30 EOR X8, X20, X8, 0x0
	0x036FDC34 UBFM W9, W0, 0x8, 0xF
	0x036FDC38 MUL X8, X8, X22
	0x036FDC3C EOR X8, X8, X9, 0x0
	0x036FDC40 ADD W21, W21, 0x1
	0x036FDC44 CMP W21, W10
	0x036FDC48 MUL X20, X8, X22
	0x036FDC4C B.LT 0x36FDC18
	0x036FDC50 MOV X0, X20
	0x036FDC54 LDP X20, X19, [X31 + 0x20]
	0x036FDC58 LDP X22, X21, [X31 + 0x10]
	0x036FDC5C LDR X30, [X31], #0x30
	0x036FDC60 RET
	0x036FDC64 BL 0x1C16F20
	0x036FDC68 STP X30, X21, [X31 - 0x20]!
	0x036FDC6C STP X20, X19, [X31 + 0x10]
	0x036FDC70 ADRP X20, 0xCE3000
	0x036FDC74 ADRP X21, 0xA1E000
	0x036FDC78 LDRB W8, [X20 + 0xC12]
	0x036FDC7C LDR X21, [X21 + 0x848]
	0x036FDC80 MOV X19, X0
	0x036FDC84 TBNZ X8, 0x0, 0x36FDC9C
	0x036FDC88 ADRP X0, 0xA1E000
	0x036FDC8C LDR X0, [X0 + 0x848]
	0x036FDC90 BL 0x1C16CF4
	0x036FDC94 MOVZ W8, 0x1
	0x036FDC98 STRB W8, [X20 + 0xC12]
	0x036FDC9C LDR X0, [X21]
	0x036FDCA0 LDR W8, [X0 + 0xE0]
	0x036FDCA4 CBNZ W8, 0x36FDCAC
	0x036FDCA8 BL 0x1C16DFC
	0x036FDCAC BL 0x36FA3FC
	0x036FDCB0 TBZ X0, 0x0, 0x36FDCC4
	0x036FDCB4 MOV X0, X19
	0x036FDCB8 LDP X20, X19, [X31 + 0x10]
	0x036FDCBC LDP X30, X21, [X31], #0x20
	0x036FDCC0 B 0x36FDCD4
	0x036FDCC4 LDP X20, X19, [X31 + 0x10]
	0x036FDCC8 MOV W0, W31
	0x036FDCCC LDP X30, X21, [X31], #0x20
	0x036FDCD0 RET
	0x036FDCD4 STR X30, [X31 - 0x30]!
	0x036FDCD8 STP X22, X21, [X31 + 0x10]
	0x036FDCDC STP X20, X19, [X31 + 0x20]
	0x036FDCE0 ADRP X22, 0xCE3000
	0x036FDCE4 ADRP X20, 0xA43000
	0x036FDCE8 ADRP X21, 0x9F6000
	0x036FDCEC LDRB W8, [X22 + 0xC13]
	0x036FDCF0 LDR X20, [X20 + 0xF38]
	0x036FDCF4 LDR X21, [X21 + 0x6C0]
	0x036FDCF8 MOV X19, X0
	0x036FDCFC TBNZ X8, 0x0, 0x36FDD44
	0x036FDD00 ADRP X0, 0x9F6000
	0x036FDD04 LDR X0, [X0 + 0xB58]
	0x036FDD08 BL 0x1C16CF4
	0x036FDD0C ADRP X0, 0xA43000
	0x036FDD10 LDR X0, [X0 + 0xF38]
	0x036FDD14 BL 0x1C16CF4
	0x036FDD18 ADRP X0, 0x9F6000
	0x036FDD1C LDR X0, [X0 + 0x9D0]
	0x036FDD20 BL 0x1C16CF4
	0x036FDD24 ADRP X0, 0x9F6000
	0x036FDD28 LDR X0, [X0 + 0x6C0]
	0x036FDD2C BL 0x1C16CF4
	0x036FDD30 ADRP X0, 0xA43000
	0x036FDD34 LDR X0, [X0 + 0xCA0]
	0x036FDD38 BL 0x1C16CF4
	0x036FDD3C MOVZ W8, 0x1
	0x036FDD40 STRB W8, [X22 + 0xC13]
	0x036FDD44 LDR X0, [X21]
	0x036FDD48 LDR X20, [X20]
	0x036FDD4C LDR W8, [X0 + 0xE0]
	0x036FDD50 CBNZ W8, 0x36FDD58
	0x036FDD54 BL 0x1C16DFC
	0x036FDD58 MOV X0, X20
	0x036FDD5C MOV X1, X31
	0x036FDD60 BL 0x338C698
	0x036FDD64 CBZ X0, 0x36FDE18
	0x036FDD68 ADRP X8, 0xA43000
	0x036FDD6C LDR X8, [X8 + 0xCA0]
	0x036FDD70 ADRP X20, 0x9F6000
	0x036FDD74 MOV X2, X31
	0x036FDD78 LDR X1, [X8]
	0x036FDD7C LDR X20, [X20 + 0x9D0]
	0x036FDD80 BL 0x33975F8
	0x036FDD84 LDR X8, [X20]
	0x036FDD88 MOV X20, X0
	0x036FDD8C MOVZ W1, 0x1
	0x036FDD90 MOV X0, X8
	0x036FDD94 BL 0x1C16D6C
	0x036FDD98 CBZ X0, 0x36FDE18
	0x036FDD9C MOV X21, X0
	0x036FDDA0 CBZ X19, 0x36FDDB8
	0x036FDDA4 LDR X8, [X21]
	0x036FDDA8 MOV X0, X19
	0x036FDDAC LDR X1, [X8 + 0x40]
	0x036FDDB0 BL 0x1C16E00
	0x036FDDB4 CBZ X0, 0x36FDE24
	0x036FDDB8 LDR W8, [X21 + 0x18]
	0x036FDDBC CBZ W8, 0x36FDE1C
	0x036FDDC0 STR X19, [X21 + 0x20]
	0x036FDDC4 CBZ X20, 0x36FDE18
	0x036FDDC8 MOV X0, X20
	0x036FDDCC MOV X1, X31
	0x036FDDD0 MOV X2, X21
	0x036FDDD4 MOV X3, X31
	0x036FDDD8 BL 0x32CE4E0
	0x036FDDDC CBZ X0, 0x36FDE18
	0x036FDDE0 ADRP X8, 0x9F6000
	0x036FDDE4 LDR X8, [X8 + 0xB58]
	0x036FDDE8 LDR X9, [X0]
	0x036FDDEC LDR X1, [X8]
	0x036FDDF0 LDR X8, [X9 + 0x40]
	0x036FDDF4 LDR X9, [X1 + 0x40]
	0x036FDDF8 CMP X8, X9
	0x036FDDFC B.NE 0x36FDE20
	0x036FDE00 BL 0x1C16E08
	0x036FDE04 LDRB W0, [X0]
	0x036FDE08 LDP X20, X19, [X31 + 0x20]
	0x036FDE0C LDP X22, X21, [X31 + 0x10]
	0x036FDE10 LDR X30, [X31], #0x30
	0x036FDE14 RET
	0x036FDE18 BL 0x1C16F20
	0x036FDE1C BL 0x1C16F28
	0x036FDE20 BL 0x1C171E0
	0x036FDE24 BL 0x1C16F44
	0x036FDE28 MOV X1, X31
	0x036FDE2C BL 0x1C16DEC
	0x036FDE30 MOV W4, W3
	0x036FDE34 MOV X3, X2
	0x036FDE38 MOV X2, X0
	0x036FDE3C MOV X0, X31
	0x036FDE40 MOV X5, X31
	0x036FDE44 B 0x3C0077C
	0x036FDE48 RET
	0x036FDE4C STR X30, [X31 - 0x40]!
	0x036FDE50 STP X24, X23, [X31 + 0x10]
	0x036FDE54 STP X22, X21, [X31 + 0x20]
	0x036FDE58 STP X20, X19, [X31 + 0x30]
	0x036FDE5C ADRP X24, 0xCE3000
	0x036FDE60 ADRP X23, 0xA43000
	0x036FDE64 ADRP X22, 0xA43000
	0x036FDE68 ADRP X21, 0xA43000
	0x036FDE6C ADRP X19, 0xA43000
	0x036FDE70 ADRP X20, 0x9F6000
	0x036FDE74 LDRB W8, [X24 + 0xC14]
	0x036FDE78 LDR X23, [X23 + 0xF40]
	0x036FDE7C LDR X22, [X22 + 0xF48]
	0x036FDE80 LDR X21, [X21 + 0xF50]
	0x036FDE84 LDR X19, [X19 + 0xF58]
	0x036FDE88 LDR X20, [X20 + 0x6C0]
	0x036FDE8C TBNZ X8, 0x0, 0x36FDEE0
	0x036FDE90 ADRP X0, 0xA43000
	0x036FDE94 LDR X0, [X0 + 0xF40]
	0x036FDE98 BL 0x1C16CF4
	0x036FDE9C ADRP X0, 0xA43000
	0x036FDEA0 LDR X0, [X0 + 0xF58]
	0x036FDEA4 BL 0x1C16CF4
	0x036FDEA8 ADRP X0, 0xA43000
	0x036FDEAC LDR X0, [X0 + 0xF48]
	0x036FDEB0 BL 0x1C16CF4
	0x036FDEB4 ADRP X0, 0xA43000
	0x036FDEB8 LDR X0, [X0 + 0xF60]
	0x036FDEBC BL 0x1C16CF4
	0x036FDEC0 ADRP X0, 0x9F6000
	0x036FDEC4 LDR X0, [X0 + 0x6C0]
	0x036FDEC8 BL 0x1C16CF4
	0x036FDECC ADRP X0, 0xA43000
	0x036FDED0 LDR X0, [X0 + 0xF50]
	0x036FDED4 BL 0x1C16CF4
	0x036FDED8 MOVZ W8, 0x1
	0x036FDEDC STRB W8, [X24 + 0xC14]
	0x036FDEE0 LDR X0, [X23]
	0x036FDEE4 ADRP X23, 0xA43000
	0x036FDEE8 LDR X23, [X23 + 0xF60]
	0x036FDEEC BL 0x1C16F10
	0x036FDEF0 MOV X1, X31
	0x036FDEF4 BL 0x3C005E0
	0x036FDEF8 LDR X0, [X22]
	0x036FDEFC BL 0x1C16F10
	0x036FDF00 LDR X1, [X21]
	0x036FDF04 MOV X2, X31
	0x036FDF08 BL 0x334DB0C
	0x036FDF0C LDR X0, [X20]
	0x036FDF10 LDR X19, [X19]
	0x036FDF14 LDR W8, [X0 + 0xE0]
	0x036FDF18 CBNZ W8, 0x36FDF20
	0x036FDF1C BL 0x1C16DFC
	0x036FDF20 MOV X0, X19
	0x036FDF24 MOV X1, X31
	0x036FDF28 BL 0x338C698
	0x036FDF2C LDR X8, [X23]
	0x036FDF30 MOV X19, X0
	0x036FDF34 MOV X0, X8
	0x036FDF38 BL 0x1C16F10
	0x036FDF3C MOV X1, X19
	0x036FDF40 LDP X20, X19, [X31 + 0x30]
	0x036FDF44 LDP X22, X21, [X31 + 0x20]
	0x036FDF48 LDP X24, X23, [X31 + 0x10]
	0x036FDF4C MOV X2, X31
	0x036FDF50 LDR X30, [X31], #0x40
	0x036FDF54 B 0x3BFE068
	0x036FDF58 MOV W4, W3
	0x036FDF5C MOV X2, X0
	0x036FDF60 MOV X0, X31
	0x036FDF64 MOV X3, X31
	0x036FDF68 MOV X5, X31
	0x036FDF6C B 0x3C00710
	0x036FDF70 STP X30, X19, [X31 - 0x10]!
	0x036FDF74 ADRP X0, 0x9FF000
	0x036FDF78 LDR X0, [X0 + 0x758]
	0x036FDF7C BL 0x1C16D08
	0x036FDF80 BL 0x1C16F10
	0x036FDF84 MOV X19, X0
	0x036FDF88 ADRP X0, 0xA43000
	0x036FDF8C LDR X0, [X0 + 0xF68]
	0x036FDF90 BL 0x1C16D08
	0x036FDF94 MOV X1, X0
	0x036FDF98 MOV X0, X19
	0x036FDF9C MOV X2, X31
	0x036FDFA0 BL 0x33802E4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xCE4000
	007 Move X21, 0xA44000
	008 Move W8, [X20+3083]
	009 Move X21, [X21+3680]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {47}
	015 Move X0, 0xA44000
	016 Move X0, [X0+3688]
	017 Call 0x1C17CF4
	018 Move X0, 0xA44000
	019 Move X0, [X0+3680]
	020 Call 0x1C17CF4
	021 Move X0, 0x9F7000
	022 Move X0, [X0+3584]
	023 Call 0x1C17CF4
	024 Move X0, 0xA21000
	025 Move X0, [X0+72]
	026 Call 0x1C17CF4
	027 Move X0, 0xA21000
	028 Move X0, [X0+80]
	029 Call 0x1C17CF4
	030 Move X0, 0x9F7000
	031 Move X0, [X0+3608]
	032 Call 0x1C17CF4
	033 Move X0, 0x9F9000
	034 Move X0, [X0+3704]
	035 Call 0x1C17CF4
	036 Move X0, 0x9F8000
	037 Move X0, [X0+448]
	038 Call 0x1C17CF4
	039 Move X0, 0x9F8000
	040 Move X0, [X0+464]
	041 Call 0x1C17CF4
	042 Move X0, 0xA44000
	043 Move X0, [X0+3696]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+3083], W8
	047 Move X1, [X21]
	048 Move X0, X19
	049 Call 0x21A991C, X0
	050 Move X21, X0
	051 Compare X0, 0
	052 JumpIfNotEqual {214}
	053 Move X0, X19
	054 Move X1, X31
	055 Call CustomAttributeExtensions.GetCustomAttributes, X0
	056 Compare X0, 0
	057 JumpIfEqual {223}
	058 Move X10, 0xA21000
	059 Move X8, [X0]
	060 Move X10, [X10+72]
	061 Move X19, X0
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Move X1, [X10]
	064 Compare X9, 0
	065 JumpIfEqual {72}
	066 Move X10, [X8+176]
	067 Add X10, X10, 8
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Subtract X9, X9, 1
	071 Add X10, X10, 16
	072 Move X0, X19
	073 Move W2, W31
	074 Call 0x1C5D788
	075 NotImplemented "Instruction LDRSW not yet implemented."
	076 Add X8, X8, X9
	077 Add X0, X8, 312
	078 Move X8, [X0]
	079 Move X1, [X0+8]
	080 Move X0, X19
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move X19, X0
	083 Compare X0, 0
	084 JumpIfEqual {224}
	085 Move X20, 0x9F7000
	086 Move X21, 0xA21000
	087 Move X22, 0xA44000
	088 Move X20, [X20+3608]
	089 Move X21, [X21+80]
	090 Move X22, [X22+3696]
	091 Move X8, [X19]
	092 Move X1, [X20]
	093 NotImplemented "Instruction LDRH not yet implemented."
	094 Compare X9, 0
	095 JumpIfEqual {102}
	096 Move X10, [X8+176]
	097 Add X10, X10, 8
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Subtract X9, X9, 1
	101 Add X10, X10, 16
	102 Move X0, X19
	103 Move W2, W31
	104 Call 0x1C5D788
	105 NotImplemented "Instruction LDRSW not yet implemented."
	106 Add X8, X8, X9
	107 Add X0, X8, 312
	108 Move X8, [X0]
	109 Move X1, [X0+8]
	110 Move X0, X19
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {185}
	116 Move X8, [X19]
	117 Move X1, [X21]
	118 NotImplemented "Instruction LDRH not yet implemented."
	119 Compare X9, 0
	120 JumpIfEqual {127}
	121 Move X10, [X8+176]
	122 Add X10, X10, 8
	123 NotImplemented "Instruction LDUR not yet implemented."
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Subtract X9, X9, 1
	126 Add X10, X10, 16
	127 Move X0, X19
	128 Move W2, W31
	129 Call 0x1C5D788
	130 NotImplemented "Instruction LDRSW not yet implemented."
	131 Add X8, X8, X9
	132 Add X0, X8, 312
	133 Move X8, [X0]
	134 Move X1, [X0+8]
	135 Move X0, X19
	136 NotImplemented "Instruction BLR not yet implemented."
	137 Compare X0, 0
	138 JumpIfEqual {221}
	139 Move X1, X31
	140 Call "il2cpp_vm_object_is_inst", X0
	141 Compare X0, 0
	142 JumpIfEqual {222}
	143 Move X8, [X0]
	144 Move X1, [X8+752]
	145 Move X9, [X8+744]
	146 NotImplemented "Instruction BLR not yet implemented."
	147 Move X1, [X22]
	148 Move X2, X31
	149 Call String.op_Equality, X0, X1
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfNotEqual {91}
	154 Move X8, 0x9F8000
	155 Move X8, [X8+464]
	156 Move X0, [X8]
	157 Call 0x1C17F10
	158 Move X8, 0x9F8000
	159 Move X8, [X8+448]
	160 Move X20, X0
	161 Move X1, [X8]
	162 Call List`1<Object>..ctor, X0
	163 Move X8, 0xA44000
	164 Move X8, [X8+3688]
	165 Move X0, [X8]
	166 Call 0x1C17F10
	167 Move X21, X0
	168 Move X1, X31
	169 Call Attribute..ctor, X0
	170 Move [X21+16], X31
	171 Move W1, 1
	172 Move X0, X21
	173 Call BurstCompileAttribute.set_CompileSynchronously, X0, X1
	174 Compare X20, 0
	175 JumpIfEqual {227}
	176 Move X8, 0x9F9000
	177 Move X8, [X8+3704]
	178 Move X1, [X8]
	179 Move X0, X20
	180 Call List`1<Object>.ToArray, X0
	181 Move X20, X31
	182 Move [X21+40], X0
	183 Compare X19, 0
	184 JumpIfNotEqual {189}
	185 Move X20, X31
	186 Move X21, X31
	187 Compare X19, 0
	188 JumpIfEqual {212}
	189 Move X10, 0x9F7000
	190 Move X8, [X19]
	191 Move X10, [X10+3584]
	192 NotImplemented "Instruction LDRH not yet implemented."
	193 Move X1, [X10]
	194 Compare X9, 0
	195 JumpIfEqual {202}
	196 Move X10, [X8+176]
	197 Add X10, X10, 8
	198 NotImplemented "Instruction LDUR not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Subtract X9, X9, 1
	201 Add X10, X10, 16
	202 Move X0, X19
	203 Move W2, W31
	204 Call 0x1C5D788
	205 NotImplemented "Instruction LDRSW not yet implemented."
	206 Add X8, X8, X9
	207 Add X0, X8, 312
	208 Move X8, [X0]
	209 Move X1, [X0+8]
	210 Move X0, X19
	211 NotImplemented "Instruction BLR not yet implemented."
	212 Compare X20, 0
	213 JumpIfNotEqual {225}
	214 Move X0, X21
	215 Move X20, [X31+32]
	216 Move X19, [X31+40]
	217 Move X22, [X31+16]
	218 Move X21, [X31+24]
	219 Move X30, [X31+48]
	220 Return X0
	221 Call 0x1C17F20
	222 Call 0x1C17F20
	223 Call 0x1C17F20
	224 Call 0x1C17F20
	225 Move X0, X20
	226 Call 0x1C17F18
	227 Call 0x1C17F20
	228 Move X21, X0
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move X0, X21
	231 Call 0x3EB2AD0
	232 Move X20, [X0]
	233 Call 0x3EB2AE0
	234 Move X20, X31
	235 Move X21, X0
	236 Compare X19, 0
	237 JumpIfEqual {261}
	238 Move X10, 0x9F7000
	239 Move X8, [X19]
	240 Move X10, [X10+3584]
	241 NotImplemented "Instruction LDRH not yet implemented."
	242 Move X1, [X10]
	243 Compare X9, 0
	244 JumpIfEqual {251}
	245 Move X10, [X8+176]
	246 Add X10, X10, 8
	247 NotImplemented "Instruction LDUR not yet implemented."
	248 NotImplemented "Instruction CMP not yet implemented."
	249 Subtract X9, X9, 1
	250 Add X10, X10, 16
	251 Move X0, X19
	252 Move W2, W31
	253 Call 0x1C5D788
	254 NotImplemented "Instruction LDRSW not yet implemented."
	255 Add X8, X8, X9
	256 Add X0, X8, 312
	257 Move X8, [X0]
	258 Move X1, [X0+8]
	259 Move X0, X19
	260 NotImplemented "Instruction BLR not yet implemented."
	261 Compare X20, 0
	262 JumpIfNotEqual {265}
	263 Move X0, X21
	264 Call 0x1D2D690
	265 Move X0, X20
	266 Call 0x1C17F18
	267 Call 0x1991590

Method: System.Boolean HasBurstCompileAttribute(System.Reflection.MemberInfo member)

Disassembly:
	0x036FBFA4 LDR X30, [X31], #0x10
	0x036FBFA8 RET
	0x036FBFAC BL 0x1C16F20
	0x036FBFB0 LDR X0, [X0 + 0x10]
	0x036FBFB4 RET
	0x036FBFB8 STR X30, [X31 - 0x20]!
	0x036FBFBC STP X20, X19, [X31 + 0x10]
	0x036FBFC0 ADRP X19, 0xCE5000
	0x036FBFC4 ADRP X20, 0xA45000
	0x036FBFC8 LDRB W8, [X19 + 0xC00]
	0x036FBFCC LDR X20, [X20 + 0xD00]
	0x036FBFD0 TBNZ X8, 0x0, 0x36FBFE8
	0x036FBFD4 ADRP X0, 0xA45000
	0x036FBFD8 LDR X0, [X0 + 0xD00]
	0x036FBFDC BL 0x1C16CF4
	0x036FBFE0 MOVZ W8, 0x1
	0x036FBFE4 STRB W8, [X19 + 0xC00]
	0x036FBFE8 LDR X0, [X20]
	0x036FBFEC BL 0x1C16F10
	0x036FBFF0 MOV X1, X31
	0x036FBFF4 MOV X19, X0
	0x036FBFF8 BL 0x33BDD8C
	0x036FBFFC LDR X8, [X20]
	0x036FC000 LDR X8, [X8 + 0xB8]
	0x036FC004 STR X19, [X8]
	0x036FC008 LDP X20, X19, [X31 + 0x10]
	0x036FC00C LDR X30, [X31], #0x20
	0x036FC010 RET
	0x036FC014 MOV X1, X31
	0x036FC018 B 0x33BDD8C
	0x036FC01C STR X30, [X31 - 0x20]!
	0x036FC020 STP X20, X19, [X31 + 0x10]
	0x036FC024 ADRP X20, 0xCE4000
	0x036FC028 LDRB W8, [X20 + 0xC01]
	0x036FC02C MOV X19, X1
	0x036FC030 TBNZ X8, 0x0, 0x36FC048
	0x036FC034 ADRP X0, 0xA44000
	0x036FC038 LDR X0, [X0 + 0xE20]
	0x036FC03C BL 0x1C16CF4
	0x036FC040 MOVZ W8, 0x1
	0x036FC044 STRB W8, [X20 + 0xC01]
	0x036FC048 CBZ X19, 0x36FC084
	0x036FC04C MOV X0, X19
	0x036FC050 MOV X1, X31
	0x036FC054 BL 0x33BE520
	0x036FC058 CBZ X0, 0x36FC084
	0x036FC05C LDR X8, [X0]
	0x036FC060 ADRP X19, 0xA44000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xCE6000
	005 Move W8, [X20+3084]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xA46000
	012 Move X0, [X0+3296]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3084], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Move X2, X31
	019 Move [X31+8], X31
	020 Call MemberInfo.op_Equality, X0, X1
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {40}
	025 Move X8, 0xA46000
	026 Move X8, [X8+3296]
	027 Move X0, [X8]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Add X1, X31, 8
	033 Move X0, X19
	034 Call BurstCompilerOptions.TryGetAttribute, X0, X1
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 And W0, W0, 1
	038 Move X30, [X31+32]
	039 Return X0
	040 Move X0, 0x9FD000
	041 Move X0, [X0+1320]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X19, X0
	045 Move X0, 0xA29000
	046 Move X0, [X0+3688]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Move X2, X31
	051 Call ArgumentNullException..ctor, X0, X1
	052 Move X0, 0xA45000
	053 Move X0, [X0+3464]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC

Method: System.Void MergeAttributes(ref Unity.Burst.BurstCompileAttribute memberAttribute, in Unity.Burst.BurstCompileAttribute assemblyAttribute)

Disassembly:
	0x036FE020 MOV X22, X0
	0x036FE024 TBNZ X8, 0x0, 0x36FE03C
	0x036FE028 ADRP X0, 0xA42000
	0x036FE02C LDR X0, [X0 + 0xF78]
	0x036FE030 BL 0x1C16CF4
	0x036FE034 MOVZ W8, 0x1
	0x036FE038 STRB W8, [X26 + 0xC15]
	0x036FE03C LDR X0, [X25]
	0x036FE040 LDR W8, [X0 + 0xE0]
	0x036FE044 CBNZ W8, 0x36FE04C
	0x036FE048 BL 0x1C16DFC
	0x036FE04C UBFM W8, W24, 0x10, 0xF
	0x036FE050 MOVZ W9, 0x1000000
	0x036FE054 CMP W8, W9
	0x036FE058 SBFM W24, W24, 0x8, 0xF
	0x036FE05C B.LT 0x36FE08C
	0x036FE060 SUBS W8, W24, W19
	0x036FE064 B.LE 0x36FE08C
	0x036FE068 MOVZ W9, 0x20
	0x036FE06C LDRSW X10, [X21]
	0x036FE070 CMP W10, W20
	0x036FE074 B.GE 0x36FE100
	0x036FE078 ADD W11, W10, 0x1
	0x036FE07C SUBS W8, W8, 0x1
	0x036FE080 STR W11, [X21]
	0x036FE084 STRB W9, [X10, X22, LSL]
	0x036FE088 B.NE 0x36FE06C
	0x036FE08C LDRSW X8, [X21]
	0x036FE090 SUB W9, W20, W8
	0x036FE094 CMP W9, W19
	0x036FE098 CSEL W26, W9, W19, LT
	0x036FE09C CMP W26, 0x1
	0x036FE0A0 B.LT 0x36FE100
	0x036FE0A4 ADD X0, X8, X22
	0x036FE0A8 MOV W2, W26
	0x036FE0AC MOV X1, X23
	0x036FE0B0 MOV X3, X31
	0x036FE0B4 BL 0x3BFF954
	0x036FE0B8 LDR W8, [X21]
	0x036FE0BC ADD W8, W8, W26
	0x036FE0C0 STR W8, [X21]
	0x036FE0C4 LDR X0, [X25]
	0x036FE0C8 LDR W8, [X0 + 0xE0]
	0x036FE0CC CBNZ W8, 0x36FE0D4
	0x036FE0D0 BL 0x1C16DFC
	0x036FE0D4 MOV X0, X22
	0x036FE0D8 MOV X1, X21
	0x036FE0DC MOV W2, W20
	0x036FE0E0 MOV W3, W24
	0x036FE0E4 MOV W4, W19
	0x036FE0E8 LDP X20, X19, [X31 + 0x40]
	0x036FE0EC LDP X22, X21, [X31 + 0x30]
	0x036FE0F0 LDP X24, X23, [X31 + 0x20]
	0x036FE0F4 LDP X26, X25, [X31 + 0x10]
	0x036FE0F8 LDR X30, [X31], #0x50
	0x036FE0FC B 0x36FE164
	0x036FE100 LDP X20, X19, [X31 + 0x40]
	0x036FE104 LDP X22, X21, [X31 + 0x30]
	0x036FE108 LDP X24, X23, [X31 + 0x20]
	0x036FE10C LDP X26, X25, [X31 + 0x10]
	0x036FE110 LDR X30, [X31], #0x50
	0x036FE114 RET
	0x036FE118 CMP W3, 0x1
	0x036FE11C MOV W8, W31
	0x036FE120 B.LT 0x36FE15C
	0x036FE124 CMP W4, W3
	0x036FE128 B.GE 0x36FE15C
	0x036FE12C SUB W8, W3, W4
	0x036FE130 MOVZ W9, 0x20
	0x036FE134 LDRSW X10, [X1]
	0x036FE138 CMP W10, W2
	0x036FE13C B.GE 0x36FE154
	0x036FE140 ADD W11, W10, 0x1
	0x036FE144 SUBS W8, W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCE3000
	006 Move W8, [X21+3085]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x9FA000
	014 Move X0, [X0+3056]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3085], W8
	018 Move X8, [X20]
	019 Compare X8, 0
	020 JumpIfEqual {103}
	021 Move W9, [X8+16]
	022 Compare W9, 0
	023 JumpIfNotEqual {29}
	024 Move X9, [X19]
	025 Compare X9, 0
	026 JumpIfEqual {103}
	027 Move W9, [X9+16]
	028 Move [X8+16], W9
	029 Move W9, [X8+20]
	030 Compare W9, 0
	031 JumpIfNotEqual {37}
	032 Move X9, [X19]
	033 Compare X9, 0
	034 JumpIfEqual {103}
	035 Move W9, [X9+20]
	036 Move [X8+20], W9
	037 Move W9, [X8+32]
	038 Compare W9, 0
	039 JumpIfNotEqual {45}
	040 Move X9, [X19]
	041 Compare X9, 0
	042 JumpIfEqual {103}
	043 Move W9, [X9+32]
	044 Move [X8+32], W9
	045 Move W9, [X8+24]
	046 Compare W9, 0
	047 JumpIfNotEqual {59}
	048 Move X9, [X19]
	049 Compare X9, 0
	050 JumpIfEqual {103}
	051 Move W10, [X9+24]
	052 Compare W10, 0
	053 JumpIfEqual {59}
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 NotImplemented "Instruction STRH not yet implemented."
	056 Move X8, [X20]
	057 Compare X8, 0
	058 JumpIfEqual {103}
	059 Move W9, [X8+26]
	060 Compare W9, 0
	061 JumpIfNotEqual {73}
	062 Move X9, [X19]
	063 Compare X9, 0
	064 JumpIfEqual {103}
	065 Move W10, [X9+26]
	066 Compare W10, 0
	067 JumpIfEqual {73}
	068 NotImplemented "Instruction LDRH not yet implemented."
	069 NotImplemented "Instruction STRH not yet implemented."
	070 Move X8, [X20]
	071 Compare X8, 0
	072 JumpIfEqual {103}
	073 Move W9, [X8+30]
	074 Compare W9, 0
	075 JumpIfNotEqual {87}
	076 Move X9, [X19]
	077 Compare X9, 0
	078 JumpIfEqual {103}
	079 Move W10, [X9+30]
	080 Compare W10, 0
	081 JumpIfEqual {87}
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 NotImplemented "Instruction STRH not yet implemented."
	084 Move X8, [X20]
	085 Compare X8, 0
	086 JumpIfEqual {103}
	087 Move W9, [X8+28]
	088 Compare W9, 0
	089 JumpIfNotEqual {98}
	090 Move X9, [X19]
	091 Compare X9, 0
	092 JumpIfEqual {103}
	093 Move W10, [X9+28]
	094 Compare W10, 0
	095 JumpIfEqual {98}
	096 NotImplemented "Instruction LDRH not yet implemented."
	097 NotImplemented "Instruction STRH not yet implemented."
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 Move X30, [X31+32]
	101 Move X21, [X31+40]
	102 Return 
	103 Call 0x1C17F20

Method: System.Boolean TryGetOptions(System.Reflection.MemberInfo member, out System.String flagsOut, System.Boolean isForILPostProcessing = False, System.Boolean isForCompilerClient = False)

Disassembly:
	0x036FE148 STR W11, [X1]
	0x036FE14C STRB W9, [X10, X0, LSL]
	0x036FE150 B.NE 0x36FE134
	0x036FE154 CMP W10, W2
	0x036FE158 CSET W8, GE
	0x036FE15C MOV W0, W8
	0x036FE160 RET
	0x036FE164 STR X30, [X31 - 0x40]!
	0x036FE168 STP X24, X23, [X31 + 0x10]
	0x036FE16C STP X22, X21, [X31 + 0x20]
	0x036FE170 STP X20, X19, [X31 + 0x30]
	0x036FE174 ADRP X24, 0xCE2000
	0x036FE178 LDRB W8, [X24 + 0xC27]
	0x036FE17C MOV W22, W4
	0x036FE180 MOV W23, W3
	0x036FE184 MOV W19, W2
	0x036FE188 MOV X20, X1
	0x036FE18C MOV X21, X0
	0x036FE190 TBNZ X8, 0x0, 0x36FE1A8
	0x036FE194 ADRP X0, 0xA42000
	0x036FE198 LDR X0, [X0 + 0xF78]
	0x036FE19C BL 0x1C16CF4
	0x036FE1A0 MOVZ W8, 0x1
	0x036FE1A4 STRB W8, [X24 + 0xC27]
	0x036FE1A8 TBNZ X23, 0x1F, 0x36FE1B4
	0x036FE1AC MOV W0, W31
	0x036FE1B0 B 0x36FE218
	0x036FE1B4 ADRP X8, 0xA42000
	0x036FE1B8 LDR X8, [X8 + 0xF78]
	0x036FE1BC SUB W24, W31, W23
	0x036FE1C0 LDR X0, [X8]
	0x036FE1C4 LDR W8, [X0 + 0xE0]
	0x036FE1C8 CBNZ W8, 0x36FE1D0
	0x036FE1CC BL 0x1C16DFC
	0x036FE1D0 CMP W24, 0x1
	0x036FE1D4 MOV W0, W31
	0x036FE1D8 B.LT 0x36FE218
	0x036FE1DC CMP W24, W22
	0x036FE1E0 B.LE 0x36FE218
	0x036FE1E4 ADD W8, W22, W23
	0x036FE1E8 SUB W8, W31, W8
	0x036FE1EC MOVZ W9, 0x20
	0x036FE1F0 LDRSW X10, [X20]
	0x036FE1F4 CMP W10, W19
	0x036FE1F8 B.GE 0x36FE210
	0x036FE1FC ADD W11, W10, 0x1
	0x036FE200 SUBS W8, W8, 0x1
	0x036FE204 STR W11, [X20]
	0x036FE208 STRB W9, [X10, X21, LSL]
	0x036FE20C B.NE 0x36FE1F0
	0x036FE210 CMP W10, W19
	0x036FE214 CSET W0, GE
	0x036FE218 LDP X20, X19, [X31 + 0x30]
	0x036FE21C LDP X22, X21, [X31 + 0x20]
	0x036FE220 LDP X24, X23, [X31 + 0x10]
	0x036FE224 LDR X30, [X31], #0x40
	0x036FE228 RET
	0x036FE22C STR D8, [X31 - 0x40]!
	0x036FE230 STR X30, [X31 + 0x8]
	0x036FE234 STP X24, X23, [X31 + 0x10]
	0x036FE238 STP X22, X21, [X31 + 0x20]
	0x036FE23C STP X20, X19, [X31 + 0x30]
	0x036FE240 ADRP X23, 0xCE2000
	0x036FE244 ADRP X24, 0xA42000
	0x036FE248 LDRB W8, [X23 + 0xC16]
	0x036FE24C LDR X24, [X24 + 0xF78]
	0x036FE250 MOV W21, W3
	0x036FE254 MOV V8.16B, V0.16B
	0x036FE258 MOV W19, W2
	0x036FE25C MOV X20, X1
	0x036FE260 MOV X22, X0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0xCE3000
	011 Move X25, 0xA43000
	012 Move W8, [X23+3086]
	013 Move X25, [X25+3296]
	014 Move W20, W4
	015 Move W21, W3
	016 Move X19, X2
	017 Move X24, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0xA43000
	024 Move X0, [X0+3296]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+3086], W8
	028 Move [X31], X31
	029 Move [X31+8], X31
	030 Move [X19], X31
	031 Move X0, [X25]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Add X1, X31, 8
	037 Move X0, X24
	038 Call BurstCompilerOptions.TryGetAttribute, X0, X1
	039 Move W23, W0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {85}
	044 Compare X24, 0
	045 JumpIfEqual {96}
	046 Move X8, [X24]
	047 Move X0, X24
	048 Move X9, [X8+472]
	049 Move X1, [X8+480]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Compare X0, 0
	052 JumpIfEqual {96}
	053 Move X8, [X0]
	054 Move X9, [X8+424]
	055 Move X1, [X8+432]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X8, [X25]
	058 Move X24, X0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Add X1, X31, 0
	065 Move X0, X24
	066 Call BurstCompilerOptions.TryGetAttribute, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {79}
	071 Move X0, [X25]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Add X0, X31, 8
	077 Add X1, X31, 0
	078 Call BurstCompilerOptions.MergeAttributes, X0, X1
	079 Move X1, [X31+8]
	080 And W2, W21, 1
	081 And W3, W20, 1
	082 Move X0, X22
	083 Call BurstCompilerOptions.GetOptions, X0, X1, X2, X3
	084 Move [X19], X0
	085 And W0, W23, 1
	086 Move X20, [X31+64]
	087 Move X19, [X31+72]
	088 Move X22, [X31+48]
	089 Move X21, [X31+56]
	090 Move X24, [X31+32]
	091 Move X23, [X31+40]
	092 Move X30, [X31+16]
	093 Move X25, [X31+24]
	094 Add X31, X31, 80
	095 Return X0
	096 Call 0x1C17F20

Method: System.String GetOptions(Unity.Burst.BurstCompileAttribute attr = null, System.Boolean isForILPostProcessing = False, System.Boolean isForCompilerClient = False)

Disassembly:
	0x036FE264 TBNZ X8, 0x0, 0x36FE27C
	0x036FE268 ADRP X0, 0xA42000
	0x036FE26C LDR X0, [X0 + 0xF78]
	0x036FE270 BL 0x1C16CF4
	0x036FE274 MOVZ W8, 0x1
	0x036FE278 STRB W8, [X23 + 0xC16]
	0x036FE27C LDR X0, [X24]
	0x036FE280 LDR W8, [X0 + 0xE0]
	0x036FE284 CBNZ W8, 0x36FE28C
	0x036FE288 BL 0x1C16DFC
	0x036FE28C MOV W3, W21
	0x036FE290 MOV X0, X22
	0x036FE294 MOV X1, X20
	0x036FE298 MOV W2, W19
	0x036FE29C LDP X20, X19, [X31 + 0x30]
	0x036FE2A0 LDP X22, X21, [X31 + 0x20]
	0x036FE2A4 LDP X24, X23, [X31 + 0x10]
	0x036FE2A8 LDR X30, [X31 + 0x8]
	0x036FE2AC MOV V0.16B, V8.16B
	0x036FE2B0 LDR V8, [X31], #0x40
	0x036FE2B4 B 0x36FE2B8
	0x036FE2B8 STR D8, [X31 - 0x70]!
	0x036FE2BC STP X29, X30, [X31 + 0x10]
	0x036FE2C0 STP X28, X27, [X31 + 0x20]
	0x036FE2C4 STP X26, X25, [X31 + 0x30]
	0x036FE2C8 STP X24, X23, [X31 + 0x40]
	0x036FE2CC STP X22, X21, [X31 + 0x50]
	0x036FE2D0 STP X20, X19, [X31 + 0x60]
	0x036FE2D4 ADD X29, X31, 0x10
	0x036FE2D8 SUB X31, X31, 0x50
	0x036FE2DC MRS X20, 0xC000
	0x036FE2E0 LDR X8, [X20 + 0x28]
	0x036FE2E4 ADRP X19, 0xCE2000
	0x036FE2E8 MOV X22, X3
	0x036FE2EC MOV V8.16B, V0.16B
	0x036FE2F0 STUR X8, [X29 - 0x18]
	0x036FE2F4 LDRB W8, [X19 + 0xC35]
	0x036FE2F8 MOV W24, W2
	0x036FE2FC MOV X25, X1
	0x036FE300 MOV X26, X0
	0x036FE304 TBNZ X8, 0x0, 0x36FE328
	0x036FE308 ADRP X0, 0xA42000
	0x036FE30C LDR X0, [X0 + 0xF78]
	0x036FE310 BL 0x1C16CF4
	0x036FE314 ADRP X0, 0x9F5000
	0x036FE318 LDR X0, [X0 + 0x5A8]
	0x036FE31C BL 0x1C16CF4
	0x036FE320 MOVZ W8, 0x1
	0x036FE324 STRB W8, [X19 + 0xC35]
	0x036FE328 ADRP X9, 0xA42000
	0x036FE32C LDR X9, [X9 + 0xF78]
	0x036FE330 FMOV W21, S8
	0x036FE334 UBFM W8, W21, 0x17, 0x1E
	0x036FE338 AND W23, W21, 0x7FFFFF
	0x036FE33C STUR W31, [X29 - 0x1C]
	0x036FE340 STP X31, X31, [X29 - 0x38]
	0x036FE344 STUR X31, [X29 - 0x28]
	0x036FE348 CBZ W8, 0x36FE388
	0x036FE34C CMP W8, 0xFF
	0x036FE350 B.NE 0x36FE3BC
	0x036FE354 LDR X0, [X9]
	0x036FE358 AND X19, X22, 0x0
	0x036FE35C LDR W8, [X0 + 0xE0]
	0x036FE360 CBNZ W8, 0x36FE368
	0x036FE364 BL 0x1C16DFC
	0x036FE368 MOV W3, W23
	0x036FE36C UBFM W4, W21, 0x1F, 0x1F
	0x036FE370 MOV X0, X26
	0x036FE374 MOV X1, X25
	0x036FE378 MOV W2, W24
	0x036FE37C MOV X5, X19
	0x036FE380 BL 0x3701DE4
	0x036FE384 B 0x36FE500
	0x036FE388 LDR X0, [X9]
	0x036FE38C STP X26, X25, [X29 - 0x50]
	0x036FE390 STUR W24, [X29 - 0x3C]
	0x036FE394 LDR W8, [X0 + 0xE0]
	0x036FE398 CBNZ W8, 0x36FE3A0
	0x036FE39C BL 0x1C16DFC
	0x036FE3A0 MOV W0, W23
	0x036FE3A4 BL 0x37001D8
	0x036FE3A8 MOV W26, W0
	0x036FE3AC MOV W25, W31
	0x036FE3B0 MOVN W8, 0x94
	0x036FE3B4 STUR W8, [X29 - 0x54]
	0x036FE3B8 B 0x36FE3E8
	0x036FE3BC CMP W8, 0x1
	0x036FE3C0 SUB W9, W8, 0x96
	0x036FE3C4 CSET W8, NE
	0x036FE3C8 CMP W23, 0x0
	0x036FE3CC STUR W9, [X29 - 0x54]
	0x036FE3D0 CSET W9, EQ
	0x036FE3D4 STP X26, X25, [X29 - 0x50]
	0x036FE3D8 STUR W24, [X29 - 0x3C]
	0x036FE3DC ORR W23, W23, 0x800000
	0x036FE3E0 AND W25, W9, W8, 0x0
	0x036FE3E4 MOVZ W26, 0x17
	0x036FE3E8 ADRP X8, 0x9F5000
	0x036FE3EC LDR X8, [X8 + 0x5A8]
	0x036FE3F0 MOVZ W10, 0xFF
	0x036FE3F4 UBFM W9, W22, 0x10, 0x17
	0x036FE3F8 ANDS W31, W10, W22, 0x10
	0x036FE3FC LDR X0, [X8]
	0x036FE400 CSINV W27, W9, W31, NE
	0x036FE404 LDR W8, [X0 + 0xE0]
	0x036FE408 CBNZ W8, 0x36FE410
	0x036FE40C BL 0x1C16DFC
	0x036FE410 ADD W1, W27, 0x1
	0x036FE414 MOVZ W0, 0xA
	0x036FE418 MOV X2, X31
	0x036FE41C BL 0x337EDF0
	0x036FE420 SXTW X19, W0
	0x036FE424 CBZ W0, 0x36FE440
	0x036FE428 ADD X9, X19, 0xF
	0x036FE42C ADD X8, X31, 0x0
	0x036FE430 AND X9, X9, 0xFFFFFFFF
	0x036FE434 SUB X28, X8, X9
	0x036FE438 ADD X31, X28, 0x0
	0x036FE43C B 0x36FE444
	0x036FE440 MOV X28, X31
	0x036FE444 MOV X0, X28
	0x036FE448 MOV W1, W31
	0x036FE44C MOV X2, X19
	0x036FE450 BL 0x3EB1B10
	0x036FE454 ADRP X24, 0xA42000
	0x036FE458 LDR X24, [X24 + 0xF78]
	0x036FE45C CMP W27, 0x0
	0x036FE460 MOVZ W9, 0x7
	0x036FE464 CSEL W27, W27, W9, GE
	0x036FE468 LDR X0, [X24]
	0x036FE46C LDR W8, [X0 + 0xE0]
	0x036FE470 CBNZ W8, 0x36FE478
	0x036FE474 BL 0x1C16DFC
	0x036FE478 MOV W0, W23
	0x036FE47C SUB X8, X29, 0x1C
	0x036FE480 SUB W7, W19, 0x1
	0x036FE484 STR X8, [X31 - 0x10]!
	0x036FE488 LDUR W1, [X29 - 0x54]
	0x036FE48C MOVZ W4, 0x1
	0x036FE490 MOV W2, W26
	0x036FE494 MOV W3, W25
	0x036FE498 MOV W5, W27
	0x036FE49C MOV X6, X28
	0x036FE4A0 MOVZ W19, 0x1
	0x036FE4A4 BL 0x3701008
	0x036FE4A8 ADD X31, X31, 0x10
	0x036FE4AC STRB W31, [X28, W0, UXTW]
	0x036FE4B0 LDUR W9, [X29 - 0x1C]
	0x036FE4B4 MOVZ W8, 0x80000000
	0x036FE4B8 STP W19, W0, [X29 - 0x30]
	0x036FE4BC LDR X0, [X24]
	0x036FE4C0 CMP W21, W8
	0x036FE4C4 CSET W8, HI
	0x036FE4C8 ADD W9, W9, 0x1
	0x036FE4CC STUR X28, [X29 - 0x38]
	0x036FE4D0 STUR W9, [X29 - 0x28]
	0x036FE4D4 STURB W8, [X29 - 0x24]
	0x036FE4D8 LDR W8, [X0 + 0xE0]
	0x036FE4DC AND X19, X22, 0x0
	0x036FE4E0 CBNZ W8, 0x36FE4E8
	0x036FE4E4 BL 0x1C16DFC
	0x036FE4E8 LDP X0, X1, [X29 - 0x50]
	0x036FE4EC LDUR W2, [X29 - 0x3C]
	0x036FE4F0 SUB X3, X29, 0x38
	0x036FE4F4 MOV W4, W27
	0x036FE4F8 MOV X5, X19
	0x036FE4FC BL 0x36FF4C0
	0x036FE500 LDR X8, [X20 + 0x28]
	0x036FE504 LDUR X9, [X29 - 0x18]
	0x036FE508 CMP X8, X9
	0x036FE50C B.NE 0x36FE534
	0x036FE510 SUB X31, X29, 0x10
	0x036FE514 LDP X20, X19, [X31 + 0x60]
	0x036FE518 LDP X22, X21, [X31 + 0x50]
	0x036FE51C LDP X24, X23, [X31 + 0x40]
	0x036FE520 LDP X26, X25, [X31 + 0x30]
	0x036FE524 LDP X28, X27, [X31 + 0x20]
	0x036FE528 LDP X29, X30, [X31 + 0x10]
	0x036FE52C LDR V8, [X31], #0x70
	0x036FE530 RET
	0x036FE534 BL 0x3EB1B20
	0x036FE538 STR D8, [X31 - 0x40]!
	0x036FE53C STR X30, [X31 + 0x8]
	0x036FE540 STP X24, X23, [X31 + 0x10]
	0x036FE544 STP X22, X21, [X31 + 0x20]
	0x036FE548 STP X20, X19, [X31 + 0x30]
	0x036FE54C ADRP X23, 0xCE2000
	0x036FE550 ADRP X24, 0xA42000
	0x036FE554 LDRB W8, [X23 + 0xC17]
	0x036FE558 LDR X24, [X24 + 0xF78]
	0x036FE55C MOV W21, W3
	0x036FE560 MOV V8.16B, V0.16B
	0x036FE564 MOV W19, W2
	0x036FE568 MOV X20, X1
	0x036FE56C MOV X22, X0
	0x036FE570 TBNZ X8, 0x0, 0x36FE588
	0x036FE574 ADRP X0, 0xA42000
	0x036FE578 LDR X0, [X0 + 0xF78]
	0x036FE57C BL 0x1C16CF4
	0x036FE580 MOVZ W8, 0x1
	0x036FE584 STRB W8, [X23 + 0xC17]
	0x036FE588 LDR X0, [X24]
	0x036FE58C LDR W8, [X0 + 0xE0]
	0x036FE590 CBNZ W8, 0x36FE598
	0x036FE594 BL 0x1C16DFC
	0x036FE598 MOV W3, W21
	0x036FE59C MOV X0, X22
	0x036FE5A0 MOV X1, X20
	0x036FE5A4 MOV W2, W19
	0x036FE5A8 LDP X20, X19, [X31 + 0x30]
	0x036FE5AC LDP X22, X21, [X31 + 0x20]
	0x036FE5B0 LDP X24, X23, [X31 + 0x10]
	0x036FE5B4 LDR X30, [X31 + 0x8]
	0x036FE5B8 MOV V0.16B, V8.16B
	0x036FE5BC LDR V8, [X31], #0x40
	0x036FE5C0 B 0x36FE5C4
	0x036FE5C4 STR D8, [X31 - 0x70]!
	0x036FE5C8 STP X29, X30, [X31 + 0x10]
	0x036FE5CC STP X28, X27, [X31 + 0x20]
	0x036FE5D0 STP X26, X25, [X31 + 0x30]
	0x036FE5D4 STP X24, X23, [X31 + 0x40]
	0x036FE5D8 STP X22, X21, [X31 + 0x50]
	0x036FE5DC STP X20, X19, [X31 + 0x60]
	0x036FE5E0 ADD X29, X31, 0x10
	0x036FE5E4 SUB X31, X31, 0x50
	0x036FE5E8 MRS X21, 0xC000
	0x036FE5EC LDR X8, [X21 + 0x28]
	0x036FE5F0 ADRP X19, 0xCE2000
	0x036FE5F4 MOV X22, X3
	0x036FE5F8 MOV V8.16B, V0.16B
	0x036FE5FC STUR X8, [X29 - 0x18]
	0x036FE600 LDRB W8, [X19 + 0xC36]
	0x036FE604 MOV W20, W2
	0x036FE608 MOV X25, X1
	0x036FE60C MOV X26, X0
	0x036FE610 TBNZ X8, 0x0, 0x36FE634
	0x036FE614 ADRP X0, 0xA42000
	0x036FE618 LDR X0, [X0 + 0xF78]
	0x036FE61C BL 0x1C16CF4
	0x036FE620 ADRP X0, 0x9F5000
	0x036FE624 LDR X0, [X0 + 0x5A8]
	0x036FE628 BL 0x1C16CF4
	0x036FE62C MOVZ W8, 0x1
	0x036FE630 STRB W8, [X19 + 0xC36]
	0x036FE634 ADRP X9, 0xA42000
	0x036FE638 LDR X9, [X9 + 0xF78]
	0x036FE63C FMOV X23, D8
	0x036FE640 UBFM X8, X23, 0x34, 0x3E
	0x036FE644 AND X24, X23, 0xFFFFF
	0x036FE648 STUR W31, [X29 - 0x1C]
	0x036FE64C STP X31, X31, [X29 - 0x38]
	0x036FE650 STUR X31, [X29 - 0x28]
	0x036FE654 CBZ W8, 0x36FE694
	0x036FE658 CMP W8, 0x7FF
	0x036FE65C B.NE 0x36FE6C4
	0x036FE660 LDR X0, [X9]
	0x036FE664 AND X19, X22, 0x0
	0x036FE668 LDR W8, [X0 + 0xE0]
	0x036FE66C CBNZ W8, 0x36FE674
	0x036FE670 BL 0x1C16DFC
	0x036FE674 UBFM X4, X23, 0x3F, 0x3F
	0x036FE678 MOV X0, X26
	0x036FE67C MOV X1, X25
	0x036FE680 MOV W2, W20
	0x036FE684 MOV X3, X24
	0x036FE688 MOV X5, X19
	0x036FE68C BL 0x3701DE4
	0x036FE690 B 0x36FE808
	0x036FE694 LDR X0, [X9]
	0x036FE698 STP X26, X25, [X29 - 0x50]
	0x036FE69C LDR W8, [X0 + 0xE0]
	0x036FE6A0 CBNZ W8, 0x36FE6A8
	0x036FE6A4 BL 0x1C16DFC
	0x036FE6A8 MOV W0, W23
	0x036FE6AC BL 0x37001D8
	0x036FE6B0 MOV W27, W0
	0x036FE6B4 MOV W26, W31
	0x036FE6B8 MOVN W8, 0x431
	0x036FE6BC STUR W8, [X29 - 0x54]
	0x036FE6C0 B 0x36FE6EC
	0x036FE6C4 CMP W8, 0x1
	0x036FE6C8 SUB W9, W8, 0x433
	0x036FE6CC CSET W8, NE
	0x036FE6D0 CMP X24, 0x0
	0x036FE6D4 STUR W9, [X29 - 0x54]
	0x036FE6D8 CSET W9, EQ
	0x036FE6DC STP X26, X25, [X29 - 0x50]
	0x036FE6E0 ORR X24, X24, 0x1FFFFFFFFFFFFF
	0x036FE6E4 AND W26, W9, W8, 0x0
	0x036FE6E8 MOVZ W27, 0x34
	0x036FE6EC STUR W20, [X29 - 0x3C]
	0x036FE6F0 ADRP X8, 0x9F5000
	0x036FE6F4 LDR X8, [X8 + 0x5A8]
	0x036FE6F8 MOVZ W10, 0xFF
	0x036FE6FC UBFM W9, W22, 0x10, 0x17
	0x036FE700 ANDS W31, W10, W22, 0x10
	0x036FE704 LDR X0, [X8]
	0x036FE708 CSINV W28, W9, W31, NE
	0x036FE70C LDR W8, [X0 + 0xE0]
	0x036FE710 CBNZ W8, 0x36FE718
	0x036FE714 BL 0x1C16DFC
	0x036FE718 ADD W1, W28, 0x1
	0x036FE71C MOVZ W0, 0x12
	0x036FE720 MOV X2, X31
	0x036FE724 BL 0x337EDF0
	0x036FE728 SXTW X20, W0
	0x036FE72C CBZ W0, 0x36FE748
	0x036FE730 ADD X9, X20, 0xF
	0x036FE734 ADD X8, X31, 0x0
	0x036FE738 AND X9, X9, 0xFFFFFFFF
	0x036FE73C SUB X19, X8, X9
	0x036FE740 ADD X31, X19, 0x0
	0x036FE744 B 0x36FE74C
	0x036FE748 MOV X19, X31
	0x036FE74C MOV X0, X19
	0x036FE750 MOV W1, W31
	0x036FE754 MOV X2, X20
	0x036FE758 BL 0x3EB1B10
	0x036FE75C ADRP X25, 0xA42000
	0x036FE760 LDR X25, [X25 + 0xF78]
	0x036FE764 CMP W28, 0x0
	0x036FE768 MOVZ W9, 0xF
	0x036FE76C CSEL W28, W28, W9, GE
	0x036FE770 LDR X0, [X25]
	0x036FE774 LDR W8, [X0 + 0xE0]
	0x036FE778 CBNZ W8, 0x36FE780
	0x036FE77C BL 0x1C16DFC
	0x036FE780 SUB X8, X29, 0x1C
	0x036FE784 SUB W7, W20, 0x1
	0x036FE788 STR X8, [X31 - 0x10]!
	0x036FE78C LDUR W1, [X29 - 0x54]
	0x036FE790 MOVZ W4, 0x1
	0x036FE794 MOV X0, X24
	0x036FE798 MOV W2, W27
	0x036FE79C MOV W3, W26
	0x036FE7A0 MOV W5, W28
	0x036FE7A4 MOV X6, X19
	0x036FE7A8 MOVZ W20, 0x1
	0x036FE7AC BL 0x3701008
	0x036FE7B0 ADD X31, X31, 0x10
	0x036FE7B4 STRB W31, [X19, W0, UXTW]
	0x036FE7B8 LDUR W9, [X29 - 0x1C]
	0x036FE7BC MOVZ X8, 0x80000000
	0x036FE7C0 STP W20, W0, [X29 - 0x30]
	0x036FE7C4 LDR X0, [X25]
	0x036FE7C8 CMP X23, X8
	0x036FE7CC CSET W8, HI
	0x036FE7D0 ADD W9, W9, 0x1
	0x036FE7D4 STUR X19, [X29 - 0x38]
	0x036FE7D8 STUR W9, [X29 - 0x28]
	0x036FE7DC STURB W8, [X29 - 0x24]
	0x036FE7E0 LDR W8, [X0 + 0xE0]
	0x036FE7E4 AND X19, X22, 0x0
	0x036FE7E8 CBNZ W8, 0x36FE7F0
	0x036FE7EC BL 0x1C16DFC
	0x036FE7F0 LDP X0, X1, [X29 - 0x50]
	0x036FE7F4 LDUR W2, [X29 - 0x3C]
	0x036FE7F8 SUB X3, X29, 0x38
	0x036FE7FC MOV W4, W28
	0x036FE800 MOV X5, X19
	0x036FE804 BL 0x36FF4C0
	0x036FE808 LDR X8, [X21 + 0x28]
	0x036FE80C LDUR X9, [X29 - 0x18]
	0x036FE810 CMP X8, X9
	0x036FE814 B.NE 0x36FE83C
	0x036FE818 SUB X31, X29, 0x10
	0x036FE81C LDP X20, X19, [X31 + 0x60]
	0x036FE820 LDP X22, X21, [X31 + 0x50]
	0x036FE824 LDP X24, X23, [X31 + 0x40]
	0x036FE828 LDP X26, X25, [X31 + 0x30]
	0x036FE82C LDP X28, X27, [X31 + 0x20]
	0x036FE830 LDP X29, X30, [X31 + 0x10]
	0x036FE834 LDR V8, [X31], #0x70
	0x036FE838 RET
	0x036FE83C BL 0x3EB1B20
	0x036FE840 STP X30, X25, [X31 - 0x40]!
	0x036FE844 STP X24, X23, [X31 + 0x10]
	0x036FE848 STP X22, X21, [X31 + 0x20]
	0x036FE84C STP X20, X19, [X31 + 0x30]
	0x036FE850 ADRP X22, 0xCE2000
	0x036FE854 ADRP X25, 0xA42000
	0x036FE858 LDRB W8, [X22 + 0xC18]
	0x036FE85C LDR X25, [X25 + 0xF78]
	0x036FE860 MOV W23, W4
	0x036FE864 MOV W24, W3
	0x036FE868 MOV W19, W2
	0x036FE86C MOV X20, X1
	0x036FE870 MOV X21, X0
	0x036FE874 TBNZ X8, 0x0, 0x36FE88C
	0x036FE878 ADRP X0, 0xA42000
	0x036FE87C LDR X0, [X0 + 0xF78]
	0x036FE880 BL 0x1C16CF4
	0x036FE884 MOVZ W8, 0x1
	0x036FE888 STRB W8, [X22 + 0xC18]
	0x036FE88C LDR X0, [X25]
	0x036FE890 ANDS W31, W24, 0x1
	0x036FE894 MOVZ W9, 0x4
	0x036FE898 CINC W22, W9, EQ
	0x036FE89C LDR W8, [X0 + 0xE0]
	0x036FE8A0 CBNZ W8, 0x36FE8A8
	0x036FE8A4 BL 0x1C16DFC
	0x036FE8A8 UBFM W8, W23, 0x10, 0xF
	0x036FE8AC MOVZ W9, 0x1000000
	0x036FE8B0 CMP W8, W9
	0x036FE8B4 SBFM W23, W23, 0x8, 0xF
	0x036FE8B8 B.LT 0x36FE8EC
	0x036FE8BC CMP W22, W23
	0x036FE8C0 B.GE 0x36FE8EC
	0x036FE8C4 SUB W8, W23, W22

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0xCE3000
	011 Move X21, 0x9F6000
	012 Move W8, [X24+3087]
	013 Move X21, [X21+2288]
	014 Move W23, W3
	015 Move W22, W2
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {93}
	022 Move X0, 0xA43000
	023 Move X0, [X0+3296]
	024 Call 0x1C17CF4
	025 Move X0, 0xA43000
	026 Move X0, [X0+3712]
	027 Call 0x1C17CF4
	028 Move X0, 0xA43000
	029 Move X0, [X0+3720]
	030 Call 0x1C17CF4
	031 Move X0, 0xA43000
	032 Move X0, [X0+3728]
	033 Call 0x1C17CF4
	034 Move X0, 0xA43000
	035 Move X0, [X0+3736]
	036 Call 0x1C17CF4
	037 Move X0, 0x9F6000
	038 Move X0, [X0+1880]
	039 Call 0x1C17CF4
	040 Move X0, 0xA1D000
	041 Move X0, [X0+464]
	042 Call 0x1C17CF4
	043 Move X0, 0x9F6000
	044 Move X0, [X0+2288]
	045 Call 0x1C17CF4
	046 Move X0, 0xA43000
	047 Move X0, [X0+3744]
	048 Call 0x1C17CF4
	049 Move X0, 0xA43000
	050 Move X0, [X0+3752]
	051 Call 0x1C17CF4
	052 Move X0, 0xA43000
	053 Move X0, [X0+3760]
	054 Call 0x1C17CF4
	055 Move X0, 0xA43000
	056 Move X0, [X0+3768]
	057 Call 0x1C17CF4
	058 Move X0, 0xA43000
	059 Move X0, [X0+3776]
	060 Call 0x1C17CF4
	061 Move X0, 0xA43000
	062 Move X0, [X0+3784]
	063 Call 0x1C17CF4
	064 Move X0, 0xA43000
	065 Move X0, [X0+3792]
	066 Call 0x1C17CF4
	067 Move X0, 0xA43000
	068 Move X0, [X0+3800]
	069 Call 0x1C17CF4
	070 Move X0, 0xA43000
	071 Move X0, [X0+3808]
	072 Call 0x1C17CF4
	073 Move X0, 0xA43000
	074 Move X0, [X0+3816]
	075 Call 0x1C17CF4
	076 Move X0, 0xA43000
	077 Move X0, [X0+3824]
	078 Call 0x1C17CF4
	079 Move X0, 0xA43000
	080 Move X0, [X0+3832]
	081 Call 0x1C17CF4
	082 Move X0, 0xA43000
	083 Move X0, [X0+3840]
	084 Call 0x1C17CF4
	085 Move X0, 0xA43000
	086 Move X0, [X0+3848]
	087 Call 0x1C17CF4
	088 Move X0, 0xA43000
	089 Move X0, [X0+3856]
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X24+3087], W8
	093 Move X0, [X21]
	094 Move X24, 0xA43000
	095 Move X24, [X24+3296]
	096 Call 0x1C17F10
	097 Move X1, X31
	098 Move X21, X0
	099 Call StringBuilder..ctor, X0
	100 Move TEMP, X23
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfEqual {131}
	104 Compare X19, 0
	105 JumpIfEqual {112}
	106 Move X0, X19
	107 Call BurstCompileAttribute.get_CompileSynchronously, X0
	108 Move TEMP, X0
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfEqual {118}
	112 Move X0, X20
	113 Call BurstCompilerOptions.get_RequiresSynchronousCompilation, X0
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {131}
	118 Move X0, [X24]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Move X8, 0xA43000
	124 Move X8, [X8+3792]
	125 Move X1, X31
	126 Move X0, [X8]
	127 Call BurstCompilerOptions.GetOption, X0, X1
	128 Move X1, X0
	129 Move X0, X21
	130 Call BurstCompilerOptions.AddOption, X0, X1
	131 Move X0, [X24]
	132 Move X25, 0xA43000
	133 Move X23, 0xA43000
	134 Move W8, [X0+224]
	135 Move X25, [X25+3776]
	136 Move X23, [X23+3816]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move X0, [X25]
	141 Move X1, [X23]
	142 Call BurstCompilerOptions.GetOption, X0, X1
	143 Move X1, X0
	144 Move X0, X21
	145 Call BurstCompilerOptions.AddOption, X0, X1
	146 Move TEMP, X22
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfNotEqual {172}
	150 Move X8, 0xA43000
	151 Move X8, [X8+3712]
	152 Move X23, 0xA43000
	153 Add X1, X31, 12
	154 Move X0, [X8]
	155 Move X23, [X23+3856]
	156 Move W8, 2
	157 Move [X31+12], W8
	158 Call 0x1C17E04
	159 Move X8, [X24]
	160 Move X22, X0
	161 Move W9, [X8+224]
	162 Compare W9, 0
	163 JumpIfNotEqual {166}
	164 Move X0, X8
	165 Call 0x1C17DFC
	166 Move X0, [X23]
	167 Move X1, X22
	168 Call BurstCompilerOptions.GetOption, X0, X1
	169 Move X1, X0
	170 Move X0, X21
	171 Call BurstCompilerOptions.AddOption, X0, X1
	172 Compare X19, 0
	173 JumpIfEqual {332}
	174 Move W8, [X19+16]
	175 Compare W8, 0
	176 JumpIfEqual {198}
	177 Move X9, 0xA43000
	178 Move X9, [X9+3720]
	179 Add X1, X31, 12
	180 Move [X31+12], W8
	181 Move X0, [X9]
	182 Call 0x1C17E04
	183 Move X8, [X24]
	184 Move X22, X0
	185 Move W9, [X8+224]
	186 Compare W9, 0
	187 JumpIfNotEqual {190}
	188 Move X0, X8
	189 Call 0x1C17DFC
	190 Move X8, 0xA43000
	191 Move X8, [X8+3848]
	192 Move X1, X22
	193 Move X0, [X8]
	194 Call BurstCompilerOptions.GetOption, X0, X1
	195 Move X1, X0
	196 Move X0, X21
	197 Call BurstCompilerOptions.AddOption, X0, X1
	198 Move W8, [X19+20]
	199 Compare W8, 0
	200 JumpIfEqual {222}
	201 Move X9, 0xA43000
	202 Move X9, [X9+3728]
	203 Add X1, X31, 12
	204 Move [X31+12], W8
	205 Move X0, [X9]
	206 Call 0x1C17E04
	207 Move X8, [X24]
	208 Move X22, X0
	209 Move W9, [X8+224]
	210 Compare W9, 0
	211 JumpIfNotEqual {214}
	212 Move X0, X8
	213 Call 0x1C17DFC
	214 Move X8, 0xA43000
	215 Move X8, [X8+3768]
	216 Move X1, X22
	217 Move X0, [X8]
	218 Call BurstCompilerOptions.GetOption, X0, X1
	219 Move X1, X0
	220 Move X0, X21
	221 Call BurstCompilerOptions.AddOption, X0, X1
	222 Move X0, X19
	223 Call BurstCompileAttribute.get_DisableSafetyChecks, X0
	224 Move TEMP, X0
	225 And TEMP, TEMP, 1
	226 Compare TEMP, 1
	227 JumpIfNotEqual {241}
	228 Move X0, [X24]
	229 Move W8, [X0+224]
	230 Compare W8, 0
	231 JumpIfNotEqual {233}
	232 Call 0x1C17DFC
	233 Move X8, 0xA43000
	234 Move X8, [X8+3840]
	235 Move X1, X31
	236 Move X0, [X8]
	237 Call BurstCompilerOptions.GetOption, X0, X1
	238 Move X1, X0
	239 Move X0, X21
	240 Call BurstCompilerOptions.AddOption, X0, X1
	241 Move X23, [X19+40]
	242 Compare X23, 0
	243 JumpIfEqual {269}
	244 Move X8, [X23+24]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X25, X31
	247 And X8, X8, 0
	248 Add X26, X23, 32
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move X22, [X26]
	251 Move X1, X31
	252 Move X0, X22
	253 Call String.IsNullOrEmpty, X0
	254 Move TEMP, X0
	255 And TEMP, TEMP, 1
	256 Compare TEMP, 1
	257 JumpIfEqual {266}
	258 Move X0, [X24]
	259 Move W8, [X0+224]
	260 Compare W8, 0
	261 JumpIfNotEqual {263}
	262 Call 0x1C17DFC
	263 Move X0, X21
	264 Move X1, X22
	265 Call BurstCompilerOptions.AddOption, X0, X1
	266 Move W8, [X23+24]
	267 Add X25, X25, 1
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Move W8, [X19+32]
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Move X9, -45506560
	272 Add X9, X9, 2081
	273 NotImplemented "Instruction ADR not yet implemented."
	274 Move W11, [X9]
	275 Add X10, X10, X11
	276 CallNoReturn X10
	277 Move X8, 0x9F6000
	278 Move X8, [X8+1880]
	279 Move X0, [X8]
	280 Move W8, 2
	281 Move X8, 0x9F6000
	282 Move X8, [X8+1880]
	283 Move X0, [X8]
	284 Move W8, 3
	285 Move X0, [X24]
	286 Move W8, [X0+224]
	287 Compare W8, 0
	288 JumpIfNotEqual {290}
	289 Call 0x1C17DFC
	290 Move X8, 0xA43000
	291 Move X8, [X8+3744]
	292 Move X1, X31
	293 Move X0, [X8]
	294 Call BurstCompilerOptions.GetOption, X0, X1
	295 Move X1, X0
	296 Move X0, X21
	297 Call BurstCompilerOptions.AddOption, X0, X1
	298 Move X8, 0x9F6000
	299 Move X8, [X8+1880]
	300 Add X1, X31, 12
	301 Move X0, [X8]
	302 Move W8, 3
	303 Move [X31+12], W8
	304 Call 0x1C17E04
	305 Move X8, 0xA43000
	306 Move X8, [X8+3824]
	307 Move X1, X0
	308 Move X8, [X8]
	309 Move X0, X8
	310 Move X8, 0x9F6000
	311 Move X8, [X8+1880]
	312 Move X0, [X8]
	313 Move W8, 1
	314 Add X1, X31, 12
	315 Move [X31+12], W8
	316 Call 0x1C17E04
	317 Move X8, [X24]
	318 Move X22, X0
	319 Move W9, [X8+224]
	320 Compare W9, 0
	321 JumpIfNotEqual {324}
	322 Move X0, X8
	323 Call 0x1C17DFC
	324 Move X8, 0xA43000
	325 Move X8, [X8+3824]
	326 Move X1, X22
	327 Move X0, [X8]
	328 Call BurstCompilerOptions.GetOption, X0, X1
	329 Move X1, X0
	330 Move X0, X21
	331 Call BurstCompilerOptions.AddOption, X0, X1
	332 Move X8, 0xA43000
	333 Move X23, 0xA43000
	334 Move W9, [X20+21]
	335 Move X8, [X8+3736]
	336 Move X23, [X23+3808]
	337 Compare W9, 0
	338 JumpIfEqual {341}
	339 Move X0, [X8]
	340 Move W8, 2
	341 Move W9, [X20+18]
	342 Compare W9, 0
	343 JumpIfEqual {454}
	344 Move X0, [X8]
	345 Move W8, 1
	346 Move [X31+12], W8
	347 Add X1, X31, 12
	348 Call 0x1C17E04
	349 Move X8, [X24]
	350 Move X22, X0
	351 Move W9, [X8+224]
	352 Compare W9, 0
	353 JumpIfNotEqual {356}
	354 Move X0, X8
	355 Call 0x1C17DFC
	356 Move X0, [X23]
	357 Move X1, X22
	358 Call BurstCompilerOptions.GetOption, X0, X1
	359 Move X1, X0
	360 Move X0, X21
	361 Call BurstCompilerOptions.AddOption, X0, X1
	362 Move W8, [X20+19]
	363 Compare W8, 0
	364 JumpIfEqual {378}
	365 Move X0, [X24]
	366 Move X22, 0xA43000
	367 Move W8, [X0+224]
	368 Move X22, [X22+3832]
	369 Compare W8, 0
	370 JumpIfNotEqual {372}
	371 Call 0x1C17DFC
	372 Move X0, [X22]
	373 Move X1, X31
	374 Call BurstCompilerOptions.GetOption, X0, X1
	375 Move X1, X0
	376 Move X0, X21
	377 Call BurstCompilerOptions.AddOption, X0, X1
	378 Move W8, [X20+20]
	379 Move X20, 0xA1D000
	380 Move X20, [X20+464]
	381 Compare W8, 0
	382 JumpIfEqual {446}
	383 Move X0, [X24]
	384 Move X19, 0xA43000
	385 Move W8, [X0+224]
	386 Move X19, [X19+3752]
	387 Compare W8, 0
	388 JumpIfNotEqual {390}
	389 Call 0x1C17DFC
	390 Move X0, [X19]
	391 Move X1, X31
	392 Call BurstCompilerOptions.GetOption, X0, X1
	393 Move X1, X0
	394 Move X0, X21
	395 Call BurstCompilerOptions.AddOption, X0, X1
	396 Move X22, 0xA43000
	397 Move X23, 0xA43000
	398 Move X22, [X22+3760]
	399 Move X23, [X23+3800]
	400 Move X0, X31
	401 Call Environment.get_CurrentDirectory
	402 Move X8, [X20]
	403 Move X19, X0
	404 Move W9, [X8+224]
	405 Compare W9, 0
	406 JumpIfNotEqual {409}
	407 Move X0, X8
	408 Call 0x1C17DFC
	409 Move X1, [X22]
	410 Move X2, [X23]
	411 Move X20, 0xA43000
	412 Move X20, [X20+3784]
	413 Move X0, X19
	414 Move X3, X31
	415 Call Path.Combine, X0, X1, X2
	416 Move X8, [X24]
	417 Move X19, X0
	418 Move W9, [X8+224]
	419 Compare W9, 0
	420 JumpIfNotEqual {423}
	421 Move X0, X8
	422 Call 0x1C17DFC
	423 Move X0, [X20]
	424 Move X1, X19
	425 Call BurstCompilerOptions.GetOption, X0, X1
	426 Move X1, X0
	427 Move X0, X21
	428 Call BurstCompilerOptions.AddOption, X0, X1
	429 Compare X21, 0
	430 JumpIfEqual {457}
	431 Move X8, [X21]
	432 Move X0, X21
	433 Move X9, [X8+360]
	434 Move X1, [X8+368]
	435 NotImplemented "Instruction BLR not yet implemented."
	436 Move X20, [X31+64]
	437 Move X19, [X31+72]
	438 Move X22, [X31+48]
	439 Move X21, [X31+56]
	440 Move X24, [X31+32]
	441 Move X23, [X31+40]
	442 Move X26, [X31+16]
	443 Move X25, [X31+24]
	444 Move X30, [X31+80]
	445 Return X0
	446 Compare X19, 0
	447 JumpIfEqual {396}
	448 Move X0, X19
	449 Call BurstCompileAttribute.get_Debug, X0
	450 Move TEMP, X0
	451 And TEMP, TEMP, 1
	452 Compare TEMP, 1
	453 JumpIfEqual {383}
	454 Move X0, [X8]
	455 Move [X31+12], W31
	456 Call 0x1C17F28
	457 Call 0x1C17F20

Method: System.Void AddOption(System.Text.StringBuilder builder, System.String option)

Disassembly:
	0x036FE9AC CMP W8, W19
	0x036FE9B0 B.GE 0x36FE9FC
	0x036FE9B4 ADD W9, W8, 0x1
	0x036FE9B8 MOVZ W10, 0x65
	0x036FE9BC STR W9, [X20]
	0x036FE9C0 STRB W10, [X21, W8, SXTW]
	0x036FE9C4 LDR X0, [X25]
	0x036FE9C8 LDR W8, [X0 + 0xE0]
	0x036FE9CC CBNZ W8, 0x36FE9D4
	0x036FE9D0 BL 0x1C16DFC
	0x036FE9D4 MOV X0, X21
	0x036FE9D8 MOV X1, X20
	0x036FE9DC MOV W2, W19
	0x036FE9E0 MOV W3, W23
	0x036FE9E4 MOV W4, W22
	0x036FE9E8 LDP X20, X19, [X31 + 0x30]
	0x036FE9EC LDP X22, X21, [X31 + 0x20]
	0x036FE9F0 LDP X24, X23, [X31 + 0x10]
	0x036FE9F4 LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {24}
	006 Move X19, X1
	007 Move X1, X31
	008 Move X20, X0
	009 Call StringBuilder.get_Length, X0
	010 Compare W0, 0
	011 JumpIfEqual {16}
	012 Move W1, 10
	013 Move X0, X20
	014 Move X2, X31
	015 Call StringBuilder.Append, X0, X1
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X2, X31
	021 Move X30, [X31+32]
	022 Call StringBuilder.Append, X0, X1
	023 Return 
	024 Call 0x1C17F20

Method: System.String GetOption(System.String optionName, System.Object value = null)

Disassembly:
	0x036FE8C8 MOVZ W9, 0x20
	0x036FE8CC LDRSW X10, [X20]
	0x036FE8D0 CMP W10, W19
	0x036FE8D4 B.GE 0x36FE9FC
	0x036FE8D8 ADD W11, W10, 0x1
	0x036FE8DC SUBS W8, W8, 0x1
	0x036FE8E0 STR W11, [X20]
	0x036FE8E4 STRB W9, [X10, X21, LSL]
	0x036FE8E8 B.NE 0x36FE8CC
	0x036FE8EC LDRSW X8, [X20]
	0x036FE8F0 CMP W8, W19
	0x036FE8F4 TBZ X24, 0x0, 0x36FE940
	0x036FE8F8 B.GE 0x36FE9FC
	0x036FE8FC ADD W9, W8, 0x1
	0x036FE900 MOVZ W10, 0x54
	0x036FE904 STR W9, [X20]
	0x036FE908 STRB W10, [X8, X21, LSL]
	0x036FE90C LDRSW X8, [X20]
	0x036FE910 CMP W8, W19
	0x036FE914 B.GE 0x36FE9FC
	0x036FE918 ADD W9, W8, 0x1
	0x036FE91C MOVZ W10, 0x72
	0x036FE920 STR W9, [X20]
	0x036FE924 STRB W10, [X8, X21, LSL]
	0x036FE928 LDRSW X8, [X20]
	0x036FE92C CMP W8, W19
	0x036FE930 B.GE 0x36FE9FC
	0x036FE934 ADD W9, W8, 0x1
	0x036FE938 MOVZ W10, 0x75
	0x036FE93C B 0x36FE9A0
	0x036FE940 B.GE 0x36FE9FC
	0x036FE944 ADD W9, W8, 0x1
	0x036FE948 MOVZ W10, 0x46
	0x036FE94C STR W9, [X20]
	0x036FE950 STRB W10, [X8, X21, LSL]
	0x036FE954 LDRSW X8, [X20]
	0x036FE958 CMP W8, W19
	0x036FE95C B.GE 0x36FE9FC
	0x036FE960 ADD W9, W8, 0x1
	0x036FE964 MOVZ W10, 0x61
	0x036FE968 STR W9, [X20]
	0x036FE96C STRB W10, [X8, X21, LSL]
	0x036FE970 LDRSW X8, [X20]
	0x036FE974 CMP W8, W19
	0x036FE978 B.GE 0x36FE9FC
	0x036FE97C ADD W9, W8, 0x1
	0x036FE980 MOVZ W10, 0x6C
	0x036FE984 STR W9, [X20]
	0x036FE988 STRB W10, [X8, X21, LSL]
	0x036FE98C LDRSW X8, [X20]
	0x036FE990 CMP W8, W19
	0x036FE994 B.GE 0x36FE9FC
	0x036FE998 ADD W9, W8, 0x1
	0x036FE99C MOVZ W10, 0x73
	0x036FE9A0 STR W9, [X20]
	0x036FE9A4 STRB W10, [X8, X21, LSL]
	0x036FE9A8 LDR W8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCE3000
	006 Move W8, [X21+3088]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x9F8000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move X0, 0xA21000
	017 Move X0, [X0+1400]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3088], W8
	021 Compare X19, 0
	022 JumpIfEqual {51}
	023 Move X8, 0xA21000
	024 Move X8, [X8+1400]
	025 Move X21, [X8]
	026 Compare X20, 0
	027 JumpIfNotEqual {35}
	028 Move X8, 0x9F8000
	029 Move X8, [X8+632]
	030 Move X8, [X8]
	031 Move X8, [X8+184]
	032 Move X20, [X8]
	033 Compare X20, 0
	034 JumpIfEqual {50}
	035 Move X8, [X20]
	036 Move X0, X20
	037 Move X9, [X8+360]
	038 Move X1, [X8+368]
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X2, X0
	041 Move X1, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X0, X21
	045 Move X3, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call String.Concat, X0, X1, X2
	049 Return X0
	050 Move X2, X31
	051 Move X0, 0x9FB000
	052 Move X0, [X0+1320]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0xA43000
	057 Move X0, [X0+3864]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Move X2, X31
	062 Call ArgumentNullException..ctor, X0, X1
	063 Move X0, 0xA43000
	064 Move X0, [X0+3872]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Call 0x1C17DEC

Method: System.Void OnOptionsChanged()

Disassembly:
	0x036FD80C BL 0x33C1514
	0x036FD810 LDR X8, [X20]
	0x036FD814 MOV X19, X0
	0x036FD818 LDR W9, [X8 + 0xE0]
	0x036FD81C CBNZ W9, 0x36FD828
	0x036FD820 MOV X0, X8
	0x036FD824 BL 0x1C16DFC

ISIL:
	001 Move X8, [X0+24]
	002 Compare X8, 0
	003 JumpIfEqual {8}
	004 Move X2, [X8+24]
	005 Move X0, [X8+64]
	006 Move X1, [X8+40]
	007 CallNoReturn X2
	008 Return 

Method: System.Void MaybeTriggerRecompilation()

Disassembly:
	0x036FD868 MOV X1, X0

ISIL:
	001 Return 

Method: System.Void .cctor()

Disassembly:
	0x036FE9F8 B 0x36FE164
	0x036FE9FC LDP X20, X19, [X31 + 0x30]
	0x036FEA00 LDP X22, X21, [X31 + 0x20]
	0x036FEA04 LDP X24, X23, [X31 + 0x10]
	0x036FEA08 LDP X30, X25, [X31], #0x40
	0x036FEA0C RET
	0x036FEA10 STP X30, X25, [X31 - 0x40]!
	0x036FEA14 STP X24, X23, [X31 + 0x10]
	0x036FEA18 STP X22, X21, [X31 + 0x20]
	0x036FEA1C STP X20, X19, [X31 + 0x30]
	0x036FEA20 ADRP X25, 0xCE2000
	0x036FEA24 ADRP X24, 0xA42000
	0x036FEA28 LDRB W8, [X25 + 0xC19]
	0x036FEA2C LDR X24, [X24 + 0xF78]
	0x036FEA30 MOV W22, W4
	0x036FEA34 MOV W23, W3
	0x036FEA38 MOV W19, W2
	0x036FEA3C MOV X20, X1
	0x036FEA40 MOV X21, X0
	0x036FEA44 TBNZ X8, 0x0, 0x36FEA5C
	0x036FEA48 ADRP X0, 0xA42000
	0x036FEA4C LDR X0, [X0 + 0xF78]
	0x036FEA50 BL 0x1C16CF4
	0x036FEA54 MOVZ W8, 0x1
	0x036FEA58 STRB W8, [X25 + 0xC19]
	0x036FEA5C LDR X0, [X24]
	0x036FEA60 LDR W8, [X0 + 0xE0]
	0x036FEA64 CBNZ W8, 0x36FEA6C
	0x036FEA68 BL 0x1C16DFC
	0x036FEA6C UBFM W8, W22, 0x10, 0xF
	0x036FEA70 MOVZ W9, 0x2000000
	0x036FEA74 CMP W8, W9
	0x036FEA78 SBFM W22, W22, 0x8, 0xF
	0x036FEA7C B.LT 0x36FEAA8
	0x036FEA80 SUB W8, W22, 0x1
	0x036FEA84 MOVZ W9, 0x20
	0x036FEA88 LDRSW X10, [X20]
	0x036FEA8C CMP W10, W19
	0x036FEA90 B.GE 0x36FEBF4
	0x036FEA94 ADD W11, W10, 0x1
	0x036FEA98 SUBS W8, W8, 0x1
	0x036FEA9C STR W11, [X20]
	0x036FEAA0 STRB W9, [X10, X21, LSL]
	0x036FEAA4 B.NE 0x36FEA88
	0x036FEAA8 AND W8, W23, 0xFFFF
	0x036FEAAC CMP W8, 0x7F
	0x036FEAB0 B.HI 0x36FEAC8
	0x036FEAB4 LDR W8, [X20]
	0x036FEAB8 CMP W8, W19
	0x036FEABC B.GE 0x36FEBF4
	0x036FEAC0 ADD W9, W8, 0x1
	0x036FEAC4 B 0x36FEB14
	0x036FEAC8 SUB W8, W23, 0x80
	0x036FEACC AND W8, W8, 0xFFFF
	0x036FEAD0 CMP W8, 0x77F
	0x036FEAD4 B.HI 0x36FEB54
	0x036FEAD8 LDRSW X8, [X20]
	0x036FEADC CMP W8, W19
	0x036FEAE0 B.GE 0x36FEBF4
	0x036FEAE4 ADD W9, W8, 0x1
	0x036FEAE8 UBFM W10, W23, 0x6, 0x1F
	0x036FEAEC STR W9, [X20]
	0x036FEAF0 ORR W9, W10, 0xC0
	0x036FEAF4 STRB W9, [X8, X21, LSL]
	0x036FEAF8 LDR W8, [X20]
	0x036FEAFC CMP W8, W19
	0x036FEB00 B.GE 0x36FEBF4
	0x036FEB04 MOVN W10, 0x7F

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0xCE3000
	011 Move W8, [X19+3089]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xA43000
	017 Move X0, [X0+3296]
	018 Call 0x1C17CF4
	019 Move X0, 0xA43000
	020 Move X0, [X0+3880]
	021 Call 0x1C17CF4
	022 Move X0, 0xA43000
	023 Move X0, [X0+3888]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+3089], W8
	027 Move X0, X31
	028 Call Environment.GetCommandLineArgs
	029 Compare X0, 0
	030 JumpIfEqual {82}
	031 Move X8, [X0+24]
	032 Move X19, X0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X22, 0xA43000
	035 Move X23, 0xA43000
	036 Move X24, 0xA43000
	037 Move X22, [X22+3880]
	038 Move X23, [X23+3296]
	039 Move X24, [X24+3888]
	040 Move X21, X31
	041 And X8, X8, 0
	042 Add X25, X19, 32
	043 Move W26, 1
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X20, [X25]
	046 Move X1, [X22]
	047 Move X2, X31
	048 Move X0, X20
	049 Call String.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {56}
	054 Move X8, [X23]
	055 Move X8, [X8+184]
	056 Move X1, [X24]
	057 Move X0, X20
	058 Move X2, X31
	059 Call String.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {68}
	064 Move X8, [X23]
	065 Move X8, [X8+184]
	066 Add X8, X8, 1
	067 Move [X8], W26
	068 Move W8, [X19+24]
	069 Add X21, X21, 1
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X20, [X31+64]
	072 Move X19, [X31+72]
	073 Move X22, [X31+48]
	074 Move X21, [X31+56]
	075 Move X24, [X31+32]
	076 Move X23, [X31+40]
	077 Move X26, [X31+16]
	078 Move X25, [X31+24]
	079 Move X30, [X31+80]
	080 Return 
	081 Call 0x1C17F28
	082 Call 0x1C17F20

Method: System.Boolean CheckIsSecondaryUnityProcess()

Disassembly:
	0x036FEB08 BFM W10, W23, 0x0, 0x5
	0x036FEB0C ADD W9, W8, 0x1

ISIL:
	001 Move W0, W31
	002 Return X0

