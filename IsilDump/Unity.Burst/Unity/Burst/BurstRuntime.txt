Type: Unity.Burst.BurstRuntime

Method: System.Int32 GetHashCode32()

Disassembly:
	0x021A1B9C ADRP X0, 0x1F57000
	0x021A1BA0 LDR X0, [X0 + 0x528]
	0x021A1BA4 BL 0x1C16D08
	0x021A1BA8 BL 0x1C16F10
	0x021A1BAC MOV X19, X0
	0x021A1BB0 ADRP X0, 0x1F7A000
	0x021A1BB4 LDR X0, [X0 + 0x8A8]
	0x021A1BB8 BL 0x1C16D08
	0x021A1BBC MOV X1, X0
	0x021A1BC0 MOV X0, X19
	0x021A1BC4 MOV X2, X31
	0x021A1BC8 BL 0x330E100
	0x021A1BCC MOV X0, X19
	0x021A1BD0 MOV X1, X22
	0x021A1BD4 BL 0x1C16DEC
	0x021A1BD8 STP X29, X30, [X31 - 0x60]!
	0x021A1BDC STP X28, X27, [X31 + 0x10]
	0x021A1BE0 STP X26, X25, [X31 + 0x20]
	0x021A1BE4 STP X24, X23, [X31 + 0x30]
	0x021A1BE8 STP X22, X21, [X31 + 0x40]
	0x021A1BEC STP X20, X19, [X31 + 0x50]
	0x021A1BF0 ADD X29, X31, 0x0
	0x021A1BF4 SUB X31, X31, 0x40

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call 0x1C5D6E0
	009 Move X8, [X19+56]
	010 Move X0, [X8+8]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move W8, [X0+224]
	018 Compare W8, 0
	019 JumpIfNotEqual {21}
	020 Call 0x1C17DFC
	021 Move X8, [X19+56]
	022 Move X0, [X8+8]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+184]
	030 Move W0, [X8]
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Return X0

Method: System.Int32 GetHashCode32(System.Type type)

Disassembly:
	0x036FEB10 MOV W23, W10
	0x036FEB14 STR W9, [X20]
	0x036FEB18 STRB W23, [X21, W8, SXTW]
	0x036FEB1C LDR X0, [X24]
	0x036FEB20 LDR W8, [X0 + 0xE0]
	0x036FEB24 CBNZ W8, 0x36FEB2C
	0x036FEB28 BL 0x1C16DFC
	0x036FEB2C MOV X0, X21
	0x036FEB30 MOV X1, X20

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move X8, [X0]
	005 Move X9, [X8+728]
	006 Move X1, [X8+736]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move X30, [X31+16]
	009 Call 0x1C17F20

Method: System.Int64 GetHashCode64()

Disassembly:
	0x021A1BF8 STUR X3, [X29 - 0x38]
	0x021A1BFC MRS X20, 0xC000
	0x021A1C00 LDR X8, [X20 + 0x28]
	0x021A1C04 MOV X19, X4
	0x021A1C08 MOV X27, X1
	0x021A1C0C MOV X23, X0
	0x021A1C10 STUR X8, [X29 - 0x8]
	0x021A1C14 STP X2, X1, [X29 - 0x30]
	0x021A1C18 LDR X21, [X4 + 0x38]
	0x021A1C1C STUR X2, [X29 - 0x40]
	0x021A1C20 CBNZ X21, 0x21A1C30
	0x021A1C24 MOV X0, X19
	0x021A1C28 BL 0x1C5C6E0
	0x021A1C2C LDR X21, [X19 + 0x38]
	0x021A1C30 LDR X9, [X21 + 0x8]
	0x021A1C34 LDR X8, [X21 + 0x20]
	0x021A1C38 LDR W28, [X9 + 0xFC]
	0x021A1C3C LDR W22, [X8 + 0xFC]
	0x021A1C40 ADD X8, X31, 0x0
	0x021A1C44 ADD X9, X28, 0xF
	0x021A1C48 AND X9, X9, 0x1FFFFFFFF
	0x021A1C4C SUB X26, X8, X9
	0x021A1C50 ADD X31, X26, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call 0x1C5D6E0
	009 Move X8, [X19+56]
	010 Move X0, [X8+8]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move W8, [X0+224]
	018 Compare W8, 0
	019 JumpIfNotEqual {21}
	020 Call 0x1C17DFC
	021 Move X8, [X19+56]
	022 Move X0, [X8+8]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+184]
	030 Move X0, [X8]
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Return X0

Method: System.Int64 GetHashCode64(System.Type type)

Disassembly:
	0x036FEBB8 B.GE 0x36FEBF4
	0x036FEBBC MOVZ W10, 0xE0
	0x036FEBC0 ADD W9, W8, 0x1
	0x036FEBC4 BFM W10, W23, 0xC, 0xF
	0x036FEBC8 STR W9, [X20]
	0x036FEBCC STRB W10, [X8, X21, LSL]
	0x036FEBD0 LDRSW X8, [X20]
	0x036FEBD4 CMP W8, W19
	0x036FEBD8 B.GE 0x36FEBF4

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {9}
	004 Move X8, [X0]
	005 Move X9, [X8+728]
	006 Move X1, [X8+736]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move X30, [X31+16]
	009 Call 0x1C17F20

Method: System.Int32 HashStringWithFNV1A32(System.String text)

Disassembly:
	0x036FEB34 MOV W2, W19
	0x036FEB38 MOV W3, W22
	0x036FEB3C LDP X20, X19, [X31 + 0x30]
	0x036FEB40 LDP X22, X21, [X31 + 0x20]
	0x036FEB44 LDP X24, X23, [X31 + 0x10]
	0x036FEB48 MOVZ W4, 0x1
	0x036FEB4C LDP X30, X25, [X31], #0x40
	0x036FEB50 B 0x36FE164
	0x036FEB54 LDRSW X8, [X20]
	0x036FEB58 UBFM W9, W23, 0xB, 0xF
	0x036FEB5C CMP W9, 0x1B
	0x036FEB60 B.NE 0x36FEBB4
	0x036FEB64 CMP W8, W19
	0x036FEB68 B.GE 0x36FEBF4
	0x036FEB6C ADD W9, W8, 0x1
	0x036FEB70 MOVZ W10, 0xEF
	0x036FEB74 STR W9, [X20]
	0x036FEB78 STRB W10, [X8, X21, LSL]
	0x036FEB7C LDRSW X8, [X20]
	0x036FEB80 CMP W8, W19
	0x036FEB84 B.GE 0x36FEBF4
	0x036FEB88 ADD W9, W8, 0x1
	0x036FEB8C MOVZ W10, 0xBF
	0x036FEB90 STR W9, [X20]
	0x036FEB94 STRB W10, [X8, X21, LSL]
	0x036FEB98 LDR W8, [X20]
	0x036FEB9C CMP W8, W19
	0x036FEBA0 B.GE 0x36FEBF4
	0x036FEBA4 ADD W9, W8, 0x1
	0x036FEBA8 STR W9, [X20]
	0x036FEBAC MOVZ W23, 0xBD
	0x036FEBB0 B 0x36FEB18
	0x036FEBB4 CMP W8, W19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {36}
	008 Move W8, [X0+16]
	009 Move W20, 0x9DC5
	010 Move X19, X0
	011 NotImplemented "Instruction MOVK not yet implemented."
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W22, 403
	014 Move W21, W31
	015 NotImplemented "Instruction MOVK not yet implemented."
	016 Move X0, X19
	017 Move W1, W21
	018 Move X2, X31
	019 Call String.get_Chars, X0, X1
	020 And W9, W0, 255
	021 Move W10, [X19+16]
	022 Xor W9, W20, W9
	023 And W8, W0, 0xFF00
	024 Multiply W9, W9, W22
	025 Xor W8, W9, W8
	026 Add W21, W21, 1
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Multiply W20, W8, W22
	029 Move W0, W20
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0
	036 Call 0x1C17F20

Method: System.Int64 HashStringWithFNV1A64(System.String text)

Disassembly:
	0x036FEBDC MOVZ W10, 0x80
	0x036FEBE0 ADD W9, W8, 0x1
	0x036FEBE4 BFM W10, W23, 0x6, 0xB
	0x036FEBE8 STR W9, [X20]
	0x036FEBEC STRB W10, [X8, X21, LSL]
	0x036FEBF0 B 0x36FEAF8
	0x036FEBF4 LDP X20, X19, [X31 + 0x30]
	0x036FEBF8 LDP X22, X21, [X31 + 0x20]
	0x036FEBFC LDP X24, X23, [X31 + 0x10]
	0x036FEC00 LDP X30, X25, [X31], #0x40
	0x036FEC04 RET
	0x036FEC08 STP X30, X25, [X31 - 0x40]!
	0x036FEC0C STP X24, X23, [X31 + 0x10]
	0x036FEC10 STP X22, X21, [X31 + 0x20]
	0x036FEC14 STP X20, X19, [X31 + 0x30]
	0x036FEC18 ADRP X24, 0xCE2000
	0x036FEC1C ADRP X25, 0xA42000
	0x036FEC20 LDRB W8, [X24 + 0xC1A]
	0x036FEC24 LDR X25, [X25 + 0xF78]
	0x036FEC28 MOV W19, W4
	0x036FEC2C MOV W22, W3
	0x036FEC30 MOV W20, W2
	0x036FEC34 MOV X21, X1
	0x036FEC38 MOV X23, X0
	0x036FEC3C TBNZ X8, 0x0, 0x36FEC54
	0x036FEC40 ADRP X0, 0xA42000
	0x036FEC44 LDR X0, [X0 + 0xF78]
	0x036FEC48 BL 0x1C16CF4
	0x036FEC4C MOVZ W8, 0x1
	0x036FEC50 STRB W8, [X24 + 0xC1A]
	0x036FEC54 LDR X0, [X25]
	0x036FEC58 LDR W8, [X0 + 0xE0]
	0x036FEC5C CBNZ W8, 0x36FEC64
	0x036FEC60 BL 0x1C16DFC
	0x036FEC64 AND X3, X22, 0xFF

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {40}
	008 Move W8, [X0+16]
	009 Move X20, 0x2325
	010 NotImplemented "Instruction MOVK not yet implemented."
	011 NotImplemented "Instruction MOVK not yet implemented."
	012 Move X19, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction MOVK not yet implemented."
	015 Move X22, 435
	016 Move W21, W31
	017 NotImplemented "Instruction MOVK not yet implemented."
	018 Move X0, X19
	019 Move W1, W21
	020 Move X2, X31
	021 Call String.get_Chars, X0, X1
	022 And X8, X0, 255
	023 Move W10, [X19+16]
	024 Xor X8, X20, X8
	025 Move W9, W0
	026 ShiftRight W9, 8
	027 And W9, W9, 0x7FFF
	028 Multiply X8, X8, X22
	029 Xor X8, X8, X9
	030 Add W21, W21, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Multiply X20, X8, X22
	033 Move X0, X20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return X0
	040 Call 0x1C17F20

Method: System.Boolean LoadAdditionalLibrary(System.String pathToLibBurstGenerated)

Disassembly:
	0x036FEC68 MOV X0, X23
	0x036FEC6C MOV X1, X21
	0x036FEC70 MOV W2, W20
	0x036FEC74 MOV W4, W19
	0x036FEC78 LDP X20, X19, [X31 + 0x30]
	0x036FEC7C LDP X22, X21, [X31 + 0x20]
	0x036FEC80 LDP X24, X23, [X31 + 0x10]
	0x036FEC84 LDP X30, X25, [X31], #0x40
	0x036FEC88 B 0x36FEC8C
	0x036FEC8C STP X30, X25, [X31 - 0x40]!
	0x036FEC90 STP X24, X23, [X31 + 0x10]
	0x036FEC94 STP X22, X21, [X31 + 0x20]
	0x036FEC98 STP X20, X19, [X31 + 0x30]
	0x036FEC9C ADRP X24, 0xCE2000
	0x036FECA0 ADRP X25, 0xA42000
	0x036FECA4 LDRB W8, [X24 + 0xC1D]
	0x036FECA8 LDR X25, [X25 + 0xF78]
	0x036FECAC MOV W22, W4
	0x036FECB0 MOV X19, X3
	0x036FECB4 MOV W20, W2
	0x036FECB8 MOV X21, X1
	0x036FECBC MOV X23, X0
	0x036FECC0 TBNZ X8, 0x0, 0x36FECD8
	0x036FECC4 ADRP X0, 0xA42000
	0x036FECC8 LDR X0, [X0 + 0xF78]
	0x036FECCC BL 0x1C16CF4
	0x036FECD0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xCE3000
	006 Move X21, 0xA1E000
	007 Move W8, [X20+3090]
	008 Move X21, [X21+2120]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xA1E000
	015 Move X0, [X0+2120]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3090], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call BurstCompiler.IsLoadAdditionalLibrarySupported
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {34}
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move W0, W31
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0

Method: System.Boolean LoadAdditionalLibraryInternal(System.String pathToLibBurstGenerated)

Disassembly:
	0x036FECD4 STRB W8, [X24 + 0xC1D]
	0x036FECD8 LDR X0, [X25]
	0x036FECDC LDR W8, [X0 + 0xE0]
	0x036FECE0 CBNZ W8, 0x36FECE8
	0x036FECE4 BL 0x1C16DFC
	0x036FECE8 MOV W4, W22
	0x036FECEC MOV X0, X23
	0x036FECF0 MOV X1, X21
	0x036FECF4 MOV W2, W20
	0x036FECF8 MOV X3, X19
	0x036FECFC LDP X20, X19, [X31 + 0x30]
	0x036FED00 LDP X22, X21, [X31 + 0x20]
	0x036FED04 LDP X24, X23, [X31 + 0x10]
	0x036FED08 LDP X30, X25, [X31], #0x40
	0x036FED0C B 0x36FEE18
	0x036FED10 STP X30, X25, [X31 - 0x40]!
	0x036FED14 STP X24, X23, [X31 + 0x10]
	0x036FED18 STP X22, X21, [X31 + 0x20]
	0x036FED1C STP X20, X19, [X31 + 0x30]
	0x036FED20 ADRP X24, 0xCE2000
	0x036FED24 ADRP X25, 0xA42000
	0x036FED28 LDRB W8, [X24 + 0xC1B]
	0x036FED2C LDR X25, [X25 + 0xF78]
	0x036FED30 MOV W19, W4
	0x036FED34 MOV W22, W3
	0x036FED38 MOV W20, W2
	0x036FED3C MOV X21, X1
	0x036FED40 MOV X23, X0
	0x036FED44 TBNZ X8, 0x0, 0x36FED5C
	0x036FED48 ADRP X0, 0xA42000
	0x036FED4C LDR X0, [X0 + 0xF78]
	0x036FED50 BL 0x1C16CF4
	0x036FED54 MOVZ W8, 0x1
	0x036FED58 STRB W8, [X24 + 0xC1B]
	0x036FED5C LDR X0, [X25]
	0x036FED60 LDR W8, [X0 + 0xE0]
	0x036FED64 CBNZ W8, 0x36FED6C
	0x036FED68 BL 0x1C16DFC
	0x036FED6C AND X3, X22, 0xFFFF
	0x036FED70 MOV X0, X23
	0x036FED74 MOV X1, X21
	0x036FED78 MOV W2, W20
	0x036FED7C MOV W4, W19
	0x036FED80 LDP X20, X19, [X31 + 0x30]
	0x036FED84 LDP X22, X21, [X31 + 0x20]
	0x036FED88 LDP X24, X23, [X31 + 0x10]
	0x036FED8C LDP X30, X25, [X31], #0x40
	0x036FED90 B 0x36FEC8C
	0x036FED94 STP X30, X25, [X31 - 0x40]!
	0x036FED98 STP X24, X23, [X31 + 0x10]
	0x036FED9C STP X22, X21, [X31 + 0x20]
	0x036FEDA0 STP X20, X19, [X31 + 0x30]
	0x036FEDA4 ADRP X24, 0xCE2000
	0x036FEDA8 ADRP X25, 0xA42000
	0x036FEDAC LDRB W8, [X24 + 0xC1C]
	0x036FEDB0 LDR X25, [X25 + 0xF78]
	0x036FEDB4 MOV W21, W4
	0x036FEDB8 MOV W23, W3
	0x036FEDBC MOV W19, W2
	0x036FEDC0 MOV X20, X1
	0x036FEDC4 MOV X22, X0
	0x036FEDC8 TBNZ X8, 0x0, 0x36FEDE0
	0x036FEDCC ADRP X0, 0xA42000
	0x036FEDD0 LDR X0, [X0 + 0xF78]
	0x036FEDD4 BL 0x1C16CF4
	0x036FEDD8 MOVZ W8, 0x1
	0x036FEDDC STRB W8, [X24 + 0xC1C]
	0x036FEDE0 LDR X0, [X25]
	0x036FEDE4 LDR W8, [X0 + 0xE0]
	0x036FEDE8 CBNZ W8, 0x36FEDF0
	0x036FEDEC BL 0x1C16DFC
	0x036FEDF0 MOV W3, W23
	0x036FEDF4 MOV W4, W21
	0x036FEDF8 MOV X0, X22
	0x036FEDFC MOV X1, X20
	0x036FEE00 MOV W2, W19
	0x036FEE04 LDP X20, X19, [X31 + 0x30]
	0x036FEE08 LDP X22, X21, [X31 + 0x20]
	0x036FEE0C LDP X24, X23, [X31 + 0x10]
	0x036FEE10 LDP X30, X25, [X31], #0x40
	0x036FEE14 B 0x36FEE18
	0x036FEE18 STP X29, X30, [X31 - 0x60]!
	0x036FEE1C STP X28, X27, [X31 + 0x10]
	0x036FEE20 STP X26, X25, [X31 + 0x20]
	0x036FEE24 STP X24, X23, [X31 + 0x30]
	0x036FEE28 STP X22, X21, [X31 + 0x40]
	0x036FEE2C STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xCE3000
	007 Move X20, 0xA43000
	008 Move X21, 0x9F6000
	009 Move W8, [X22+3091]
	010 Move X20, [X20+3896]
	011 Move X21, [X21+1728]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x9F6000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move X0, 0xA43000
	021 Move X0, [X0+3896]
	022 Call 0x1C17CF4
	023 Move X0, 0x9F6000
	024 Move X0, [X0+2512]
	025 Call 0x1C17CF4
	026 Move X0, 0x9F6000
	027 Move X0, [X0+1728]
	028 Call 0x1C17CF4
	029 Move X0, 0xA43000
	030 Move X0, [X0+3232]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+3091], W8
	034 Move X0, [X21]
	035 Move X20, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Call Type.GetTypeFromHandle, X0
	043 Compare X0, 0
	044 JumpIfEqual {96}
	045 Move X8, 0xA43000
	046 Move X8, [X8+3232]
	047 Move X20, 0x9F6000
	048 Move X2, X31
	049 Move X1, [X8]
	050 Move X20, [X20+2512]
	051 Call Type.GetMethod, X0, X1
	052 Move X8, [X20]
	053 Move X20, X0
	054 Move W1, 1
	055 Move X0, X8
	056 Call 0x1C17D6C
	057 Compare X0, 0
	058 JumpIfEqual {96}
	059 Move X21, X0
	060 Compare X19, 0
	061 JumpIfEqual {68}
	062 Move X8, [X21]
	063 Move X0, X19
	064 Move X1, [X8+64]
	065 Call 0x1C17E00
	066 Compare X0, 0
	067 JumpIfEqual {99}
	068 Move W8, [X21+24]
	069 Compare W8, 0
	070 JumpIfEqual {97}
	071 Move [X21+32], X19
	072 Compare X20, 0
	073 JumpIfEqual {96}
	074 Move X0, X20
	075 Move X1, X31
	076 Move X2, X21
	077 Move X3, X31
	078 Call MethodBase.Invoke, X0, X1, X2
	079 Compare X0, 0
	080 JumpIfEqual {96}
	081 Move X8, 0x9F6000
	082 Move X8, [X8+2904]
	083 Move X9, [X0]
	084 Move X1, [X8]
	085 Move X8, [X9+64]
	086 Move X9, [X1+64]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Call 0x1C17E08
	089 Move W0, [X0]
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Return X0
	096 Call 0x1C17F20
	097 Call 0x1C17F28
	098 Call 0x1C181E0
	099 Call 0x1C17F44
	100 Move X1, X31
	101 Call 0x1C17DEC

Method: System.Void RuntimeLog(System.Byte* message, System.Int32 logType, System.Byte* fileName, System.Int32 lineNumber)

Disassembly:
	0x036FEE30 ADD X29, X31, 0x0
	0x036FEE34 SUB X31, X31, 0x40
	0x036FEE38 STUR W2, [X29 - 0x24]
	0x036FEE3C STP X0, X1, [X29 - 0x38]
	0x036FEE40 MRS X25, 0xC000
	0x036FEE44 LDR X8, [X25 + 0x28]

ISIL:
	001 Move W4, W3
	002 Move X3, X2
	003 Move X2, X0
	004 Move X0, X31
	005 Move X5, X31
	006 Call BurstCompilerService.RuntimeLog, X0, X1, X2, X3, X4
	007 Return 

Method: System.Void Initialize()

Disassembly:
	0x036FEE48 ADRP X19, 0xCE2000

ISIL:
	001 Return 

Method: System.Void PreventRequiredAttributeStrip()

Disassembly:
	0x036FEE4C MOV X22, X4
	0x036FEE50 MOV X23, X3
	0x036FEE54 STUR X8, [X29 - 0x8]
	0x036FEE58 LDRB W8, [X19 + 0xC22]
	0x036FEE5C UBFM X9, X4, 0x10, 0x3F
	0x036FEE60 STUR X9, [X29 - 0x40]
	0x036FEE64 TBNZ X8, 0x0, 0x36FEE7C
	0x036FEE68 ADRP X0, 0xA42000
	0x036FEE6C LDR X0, [X0 + 0xF78]
	0x036FEE70 BL 0x1C16CF4
	0x036FEE74 MOVZ W8, 0x1
	0x036FEE78 STRB W8, [X19 + 0xC22]
	0x036FEE7C ADRP X27, 0xA42000
	0x036FEE80 LDR X27, [X27 + 0xF78]
	0x036FEE84 AND W8, W22, 0xFF
	0x036FEE88 MOVZ W9, 0xA
	0x036FEE8C MOVZ W10, 0x10
	0x036FEE90 CMP W8, 0x3
	0x036FEE94 CSEL X28, X10, X9, EQ
	0x036FEE98 MOVZ W8, 0x1
	0x036FEE9C MOV X9, X23
	0x036FEEA0 STP X31, X31, [X29 - 0x20]
	0x036FEEA4 STUR X31, [X29 - 0x10]
	0x036FEEA8 CMP X9, X28
	0x036FEEAC UDIV X9, X9, X28
	0x036FEEB0 ADD W8, W8, 0x1
	0x036FEEB4 B.CS 0x36FEEA8
	0x036FEEB8 SXTW X2, W8
	0x036FEEBC SUB W19, W8, 0x2
	0x036FEEC0 CBZ W8, 0x36FEEDC
	0x036FEEC4 ADD X10, X2, 0xF
	0x036FEEC8 ADD X9, X31, 0x0
	0x036FEECC AND X10, X10, 0xFFFFFFFF
	0x036FEED0 SUB X24, X9, X10
	0x036FEED4 ADD X31, X24, 0x0
	0x036FEED8 B 0x36FEEE0
	0x036FEEDC MOV X24, X31
	0x036FEEE0 MOV X0, X24
	0x036FEEE4 MOV W1, W31
	0x036FEEE8 SUB W20, W8, 0x1
	0x036FEEEC BL 0x3EB1B10
	0x036FEEF0 ANDS X31, X22, 0xFFFFFFFF
	0x036FEEF4 MOVZ W8, 0x57
	0x036FEEF8 MOVZ W9, 0x37
	0x036FEEFC CSEL W21, W9, W8, EQ
	0x036FEF00 LDR X0, [X27]
	0x036FEF04 SUB W26, W19, 0x1
	0x036FEF08 LDR W8, [X0 + 0xE0]
	0x036FEF0C CBNZ W8, 0x36FEF14
	0x036FEF10 BL 0x1C16DFC
	0x036FEF14 UDIV X8, X23, X28
	0x036FEF18 MSUB W9, W8, W28, W23
	0x036FEF1C ADD W10, W21, W9
	0x036FEF20 ADD W11, W9, 0x30
	0x036FEF24 CMP W9, 0x9
	0x036FEF28 CSEL W9, W10, W11, HI
	0x036FEF2C CMP X23, X28
	0x036FEF30 STRB W9, [X24, W19, SXTW]
	0x036FEF34 MOV W19, W26
	0x036FEF38 MOV X23, X8
	0x036FEF3C B.CS 0x36FEF00
	0x036FEF40 STRB W31, [X24, W20, SXTW]
	0x036FEF44 LDR X0, [X27]
	0x036FEF48 STUR X24, [X29 - 0x20]
	0x036FEF4C STP W31, W20, [X29 - 0x18]
	0x036FEF50 STUR W20, [X29 - 0x10]
	0x036FEF54 STURB W31, [X29 - 0xC]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xCE3000
	009 Move X23, 0xA43000
	010 Move X22, 0xA43000
	011 Move X21, 0xA43000
	012 Move X19, 0xA43000
	013 Move X20, 0x9F6000
	014 Move W8, [X24+3092]
	015 Move X23, [X23+3904]
	016 Move X22, [X22+3912]
	017 Move X21, [X21+3920]
	018 Move X19, [X19+3928]
	019 Move X20, [X20+1728]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {44}
	024 Move X0, 0xA43000
	025 Move X0, [X0+3904]
	026 Call 0x1C17CF4
	027 Move X0, 0xA43000
	028 Move X0, [X0+3928]
	029 Call 0x1C17CF4
	030 Move X0, 0xA43000
	031 Move X0, [X0+3912]
	032 Call 0x1C17CF4
	033 Move X0, 0xA43000
	034 Move X0, [X0+3936]
	035 Call 0x1C17CF4
	036 Move X0, 0x9F6000
	037 Move X0, [X0+1728]
	038 Call 0x1C17CF4
	039 Move X0, 0xA43000
	040 Move X0, [X0+3920]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X24+3092], W8
	044 Move X0, [X23]
	045 Move X23, 0xA43000
	046 Move X23, [X23+3936]
	047 Call 0x1C17F10
	048 Move X1, X31
	049 Call BurstDiscardAttribute..ctor, X0
	050 Move X0, [X22]
	051 Call 0x1C17F10
	052 Move X1, [X21]
	053 Move X2, X31
	054 Call ConditionalAttribute..ctor, X0, X1
	055 Move X0, [X20]
	056 Move X19, [X19]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X19
	062 Move X1, X31
	063 Call Type.GetTypeFromHandle, X0
	064 Move X8, [X23]
	065 Move X19, X0
	066 Move X0, X8
	067 Call 0x1C17F10
	068 Move X1, X19
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X2, X31
	076 Move X30, [X31+64]
	077 Call JobProducerTypeAttribute..ctor, X0, X1
	078 Return 

Method: System.Void Log(System.Byte* message, System.Int32 logType, System.Byte* fileName, System.Int32 lineNumber)

Disassembly:
	0x036FEF58 LDUR X9, [X29 - 0x40]
	0x036FEF5C LDR W8, [X0 + 0xE0]
	0x036FEF60 AND W23, W9, 0xFF
	0x036FEF64 CBNZ W8, 0x36FEF6C
	0x036FEF68 BL 0x1C16DFC
	0x036FEF6C LDP X0, X1, [X29 - 0x38]

ISIL:
	001 Move W4, W3
	002 Move X2, X0
	003 Move X0, X31
	004 Move X3, X31
	005 Move X5, X31
	006 Call BurstCompilerService.Log, X0, X1, X2, X3, X4
	007 Return 

Method: System.Byte* GetUTF8LiteralPointer(System.String str, out System.Int32 byteCount)

Disassembly:
	0x036FEF70 LDUR W2, [X29 - 0x24]
	0x036FEF74 MOV W5, W22
	0x036FEF78 BFM W5, W23, 0x10, 0x7
	0x036FEF7C SUB X3, X29, 0x20
	0x036FEF80 MOV W4, W23
	0x036FEF84 BL 0x36FF4C0
	0x036FEF88 LDR X8, [X25 + 0x28]
	0x036FEF8C LDUR X9, [X29 - 0x8]
	0x036FEF90 CMP X8, X9
	0x036FEF94 B.NE 0x36FEFB8
	0x036FEF98 ADD X31, X29, 0x0
	0x036FEF9C LDP X20, X19, [X31 + 0x50]
	0x036FEFA0 LDP X22, X21, [X31 + 0x40]
	0x036FEFA4 LDP X24, X23, [X31 + 0x30]
	0x036FEFA8 LDP X26, X25, [X31 + 0x20]
	0x036FEFAC LDP X28, X27, [X31 + 0x10]
	0x036FEFB0 LDP X29, X30, [X31], #0x60
	0x036FEFB4 RET
	0x036FEFB8 BL 0x3EB1B20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x9FF000
	004 Move X0, [X0+1880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Move X0, 0xA43000
	009 Move X0, [X0+3944]
	010 Call 0x1C17D08
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Call NotImplementedException..ctor, X0, X1
	015 Move X0, 0xA43000
	016 Move X0, [X0+3952]
	017 Call 0x1C17D08
	018 Move X1, X0
	019 Move X0, X19
	020 Call 0x1C17DEC

