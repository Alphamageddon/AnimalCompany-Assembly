Type: Unity.Burst.SafeStringArrayHelper

Method: System.String SerialiseStringArraySafe(System.String[] array)

Disassembly:
	0x036FD1A0 LDR X0, [X25]
	0x036FD1A4 LDR W8, [X0 + 0xE0]
	0x036FD1A8 CBNZ W8, 0x36FD1B0
	0x036FD1AC BL 0x1C16DFC
	0x036FD1B0 ADD X1, X31, 0x8
	0x036FD1B4 MOV X0, X24
	0x036FD1B8 BL 0x36FCAF8
	0x036FD1BC MOV W23, W0
	0x036FD1C0 TBZ X0, 0x0, 0x36FD244
	0x036FD1C4 CBZ X24, 0x36FD260
	0x036FD1C8 LDR X8, [X24]
	0x036FD1CC MOV X0, X24
	0x036FD1D0 LDP X9, X1, [X8 + 0x1D8]
	0x036FD1D4 BLR X9
	0x036FD1D8 CBZ X0, 0x36FD260
	0x036FD1DC LDR X8, [X0]
	0x036FD1E0 LDP X9, X1, [X8 + 0x1A8]
	0x036FD1E4 BLR X9
	0x036FD1E8 LDR X8, [X25]
	0x036FD1EC MOV X24, X0
	0x036FD1F0 LDR W9, [X8 + 0xE0]
	0x036FD1F4 CBNZ W9, 0x36FD200
	0x036FD1F8 MOV X0, X8
	0x036FD1FC BL 0x1C16DFC
	0x036FD200 ADD X1, X31, 0x0
	0x036FD204 MOV X0, X24
	0x036FD208 BL 0x36FCFA4
	0x036FD20C TBZ X0, 0x0, 0x36FD22C
	0x036FD210 LDR X0, [X25]
	0x036FD214 LDR W8, [X0 + 0xE0]
	0x036FD218 CBNZ W8, 0x36FD220
	0x036FD21C BL 0x1C16DFC
	0x036FD220 ADD X0, X31, 0x8
	0x036FD224 ADD X1, X31, 0x0
	0x036FD228 BL 0x36FD020
	0x036FD22C LDR X1, [X31 + 0x8]
	0x036FD230 AND W2, W21, 0x1
	0x036FD234 AND W3, W20, 0x1
	0x036FD238 MOV X0, X22
	0x036FD23C BL 0x36FD264
	0x036FD240 STR X0, [X19]
	0x036FD244 AND W0, W23, 0x1
	0x036FD248 LDP X20, X19, [X31 + 0x40]
	0x036FD24C LDP X22, X21, [X31 + 0x30]
	0x036FD250 LDP X24, X23, [X31 + 0x20]
	0x036FD254 LDP X30, X25, [X31 + 0x10]
	0x036FD258 ADD X31, X31, 0x50
	0x036FD25C RET
	0x036FD260 BL 0x1C16F20
	0x036FD264 STR X30, [X31 - 0x50]!
	0x036FD268 STP X26, X25, [X31 + 0x10]
	0x036FD26C STP X24, X23, [X31 + 0x20]
	0x036FD270 STP X22, X21, [X31 + 0x30]
	0x036FD274 STP X20, X19, [X31 + 0x40]
	0x036FD278 ADRP X24, 0xCE3000
	0x036FD27C ADRP X21, 0x9F6000
	0x036FD280 LDRB W8, [X24 + 0xC0F]
	0x036FD284 LDR X21, [X21 + 0x8F0]
	0x036FD288 MOV W23, W3
	0x036FD28C MOV W22, W2
	0x036FD290 MOV X19, X1
	0x036FD294 MOV X20, X0
	0x036FD298 TBNZ X8, 0x0, 0x36FD3B8
	0x036FD29C ADRP X0, 0xA43000
	0x036FD2A0 LDR X0, [X0 + 0xCE0]
	0x036FD2A4 BL 0x1C16CF4
	0x036FD2A8 ADRP X0, 0xA43000
	0x036FD2AC LDR X0, [X0 + 0xE80]
	0x036FD2B0 BL 0x1C16CF4
	0x036FD2B4 ADRP X0, 0xA43000
	0x036FD2B8 LDR X0, [X0 + 0xE88]
	0x036FD2BC BL 0x1C16CF4
	0x036FD2C0 ADRP X0, 0xA43000
	0x036FD2C4 LDR X0, [X0 + 0xE90]
	0x036FD2C8 BL 0x1C16CF4
	0x036FD2CC ADRP X0, 0xA43000
	0x036FD2D0 LDR X0, [X0 + 0xE98]
	0x036FD2D4 BL 0x1C16CF4
	0x036FD2D8 ADRP X0, 0x9F6000
	0x036FD2DC LDR X0, [X0 + 0x758]
	0x036FD2E0 BL 0x1C16CF4
	0x036FD2E4 ADRP X0, 0xA1D000
	0x036FD2E8 LDR X0, [X0 + 0x1D0]
	0x036FD2EC BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xCE4000
	011 Move X21, 0x9F7000
	012 Move W8, [X20+3129]
	013 Move X21, [X21+2288]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x9F7000
	020 Move X0, [X0+1880]
	021 Call 0x1C17CF4
	022 Move X0, 0x9F7000
	023 Move X0, [X0+2288]
	024 Call 0x1C17CF4
	025 Move X0, 0xA44000
	026 Move X0, [X0+3632]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3129], W8
	030 Move X0, [X21]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X20, X0
	034 Call StringBuilder..ctor, X0
	035 Compare X19, 0
	036 JumpIfEqual {97}
	037 Move X8, [X19+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X23, 0x9F7000
	040 Move X24, 0xA44000
	041 Move X23, [X23+1880]
	042 Move X24, [X24+3632]
	043 Move X22, X31
	044 And X8, X8, 0
	045 Add X25, X19, 32
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X21, [X25]
	048 Move X0, X31
	049 Call Encoding.get_UTF8
	050 Compare X0, 0
	051 JumpIfEqual {97}
	052 Move X8, [X0]
	053 Move X1, X21
	054 Move X9, [X8+504]
	055 Move X2, [X8+512]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X8, [X23]
	058 Move [X31+12], W0
	059 Add X1, X31, 12
	060 Move X0, X8
	061 Call 0x1C17E04
	062 Move X8, [X24]
	063 Move X1, X0
	064 Move X2, X31
	065 Move X0, X8
	066 Call String.Format, X0, X1
	067 Compare X20, 0
	068 JumpIfEqual {97}
	069 Move X1, X0
	070 Move X0, X20
	071 Move X2, X31
	072 Call StringBuilder.Append, X0, X1
	073 Move X0, X20
	074 Move X1, X21
	075 Move X2, X31
	076 Call StringBuilder.Append, X0, X1
	077 Move W8, [X19+24]
	078 Add X22, X22, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Compare X20, 0
	081 JumpIfEqual {97}
	082 Move X8, [X20]
	083 Move X0, X20
	084 Move X9, [X8+360]
	085 Move X1, [X8+368]
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X20, [X31+64]
	088 Move X19, [X31+72]
	089 Move X22, [X31+48]
	090 Move X21, [X31+56]
	091 Move X24, [X31+32]
	092 Move X23, [X31+40]
	093 Move X30, [X31+16]
	094 Move X25, [X31+24]
	095 Add X31, X31, 80
	096 Return X0
	097 Call 0x1C17F20
	098 Call 0x1C17F28

Method: System.String[] DeserialiseStringArraySafe(System.String input)

Disassembly:
	0x036FD39C LDR X0, [X0 + 0xF08]
	0x036FD3A0 BL 0x1C16CF4
	0x036FD3A4 ADRP X0, 0xA43000
	0x036FD3A8 LDR X0, [X0 + 0xF10]
	0x036FD3AC BL 0x1C16CF4
	0x036FD3B0 MOVZ W8, 0x1
	0x036FD3B4 STRB W8, [X24 + 0xC0F]
	0x036FD3B8 LDR X0, [X21]
	0x036FD3BC ADRP X24, 0xA43000
	0x036FD3C0 LDR X24, [X24 + 0xCE0]
	0x036FD3C4 BL 0x1C16F10
	0x036FD3C8 MOV X1, X31
	0x036FD3CC MOV X21, X0
	0x036FD3D0 BL 0x3231AC4
	0x036FD3D4 TBNZ X23, 0x0, 0x36FD424
	0x036FD3D8 CBZ X19, 0x36FD3E8
	0x036FD3DC MOV X0, X19
	0x036FD3E0 BL 0x36FA030
	0x036FD3E4 TBNZ X0, 0x0, 0x36FD3F4
	0x036FD3E8 MOV X0, X20
	0x036FD3EC BL 0x36FC92C
	0x036FD3F0 TBZ X0, 0x0, 0x36FD424
	0x036FD3F4 LDR X0, [X24]
	0x036FD3F8 LDR W8, [X0 + 0xE0]
	0x036FD3FC CBNZ W8, 0x36FD404
	0x036FD400 BL 0x1C16DFC
	0x036FD404 ADRP X8, 0xA43000
	0x036FD408 LDR X8, [X8 + 0xED0]
	0x036FD40C MOV X1, X31
	0x036FD410 LDR X0, [X8]
	0x036FD414 BL 0x36FD8C8
	0x036FD418 MOV X1, X0
	0x036FD41C MOV X0, X21
	0x036FD420 BL 0x36FD9AC
	0x036FD424 LDR X0, [X24]
	0x036FD428 ADRP X25, 0xA43000
	0x036FD42C ADRP X23, 0xA43000
	0x036FD430 LDR W8, [X0 + 0xE0]
	0x036FD434 LDR X25, [X25 + 0xEC0]
	0x036FD438 LDR X23, [X23 + 0xEE8]
	0x036FD43C CBNZ W8, 0x36FD444
	0x036FD440 BL 0x1C16DFC
	0x036FD444 LDR X0, [X25]
	0x036FD448 LDR X1, [X23]
	0x036FD44C BL 0x36FD8C8
	0x036FD450 MOV X1, X0
	0x036FD454 MOV X0, X21
	0x036FD458 BL 0x36FD9AC
	0x036FD45C TBZ X22, 0x0, 0x36FD4B4
	0x036FD460 ADRP X8, 0xA43000
	0x036FD464 LDR X8, [X8 + 0xE80]
	0x036FD468 ADRP X23, 0xA43000
	0x036FD46C ADD X1, X31, 0xC
	0x036FD470 LDR X0, [X8]
	0x036FD474 LDR X23, [X23 + 0xF10]
	0x036FD478 MOVZ W8, 0x2
	0x036FD47C STR W8, [X31 + 0xC]
	0x036FD480 BL 0x1C16E04
	0x036FD484 LDR X8, [X24]
	0x036FD488 MOV X22, X0
	0x036FD48C LDR W9, [X8 + 0xE0]
	0x036FD490 CBNZ W9, 0x36FD49C
	0x036FD494 MOV X0, X8
	0x036FD498 BL 0x1C16DFC
	0x036FD49C LDR X0, [X23]
	0x036FD4A0 MOV X1, X22
	0x036FD4A4 BL 0x36FD8C8
	0x036FD4A8 MOV X1, X0
	0x036FD4AC MOV X0, X21
	0x036FD4B0 BL 0x36FD9AC
	0x036FD4B4 CBZ X19, 0x36FD710
	0x036FD4B8 LDR W8, [X19 + 0x10]
	0x036FD4BC CBZ W8, 0x36FD510
	0x036FD4C0 ADRP X9, 0xA43000
	0x036FD4C4 LDR X9, [X9 + 0xE88]
	0x036FD4C8 ADD X1, X31, 0xC
	0x036FD4CC STR W8, [X31 + 0xC]
	0x036FD4D0 LDR X0, [X9]
	0x036FD4D4 BL 0x1C16E04
	0x036FD4D8 LDR X8, [X24]
	0x036FD4DC MOV X22, X0
	0x036FD4E0 LDR W9, [X8 + 0xE0]
	0x036FD4E4 CBNZ W9, 0x36FD4F0
	0x036FD4E8 MOV X0, X8
	0x036FD4EC BL 0x1C16DFC
	0x036FD4F0 ADRP X8, 0xA43000
	0x036FD4F4 LDR X8, [X8 + 0xF08]
	0x036FD4F8 MOV X1, X22
	0x036FD4FC LDR X0, [X8]
	0x036FD500 BL 0x36FD8C8
	0x036FD504 MOV X1, X0
	0x036FD508 MOV X0, X21
	0x036FD50C BL 0x36FD9AC
	0x036FD510 LDR W8, [X19 + 0x14]
	0x036FD514 CBZ W8, 0x36FD568
	0x036FD518 ADRP X9, 0xA43000
	0x036FD51C LDR X9, [X9 + 0xE90]
	0x036FD520 ADD X1, X31, 0xC
	0x036FD524 STR W8, [X31 + 0xC]
	0x036FD528 LDR X0, [X9]
	0x036FD52C BL 0x1C16E04
	0x036FD530 LDR X8, [X24]
	0x036FD534 MOV X22, X0
	0x036FD538 LDR W9, [X8 + 0xE0]
	0x036FD53C CBNZ W9, 0x36FD548
	0x036FD540 MOV X0, X8
	0x036FD544 BL 0x1C16DFC
	0x036FD548 ADRP X8, 0xA43000
	0x036FD54C LDR X8, [X8 + 0xEB8]
	0x036FD550 MOV X1, X22
	0x036FD554 LDR X0, [X8]
	0x036FD558 BL 0x36FD8C8
	0x036FD55C MOV X1, X0
	0x036FD560 MOV X0, X21
	0x036FD564 BL 0x36FD9AC
	0x036FD568 MOV X0, X19
	0x036FD56C BL 0x36FA1D8
	0x036FD570 TBZ X0, 0x0, 0x36FD5A4
	0x036FD574 LDR X0, [X24]
	0x036FD578 LDR W8, [X0 + 0xE0]
	0x036FD57C CBNZ W8, 0x36FD584
	0x036FD580 BL 0x1C16DFC
	0x036FD584 ADRP X8, 0xA43000
	0x036FD588 LDR X8, [X8 + 0xF00]
	0x036FD58C MOV X1, X31
	0x036FD590 LDR X0, [X8]
	0x036FD594 BL 0x36FD8C8
	0x036FD598 MOV X1, X0
	0x036FD59C MOV X0, X21
	0x036FD5A0 BL 0x36FD9AC
	0x036FD5A4 LDR X23, [X19 + 0x28]
	0x036FD5A8 CBZ X23, 0x36FD60C
	0x036FD5AC LDR X8, [X23 + 0x18]
	0x036FD5B0 CMP W8, 0x1
	0x036FD5B4 B.LT 0x36FD60C
	0x036FD5B8 MOV X25, X31
	0x036FD5BC AND X8, X8, 0x0
	0x036FD5C0 ADD X26, X23, 0x20
	0x036FD5C4 CMP X25, W8, UXTW
	0x036FD5C8 B.CS 0x36FD8C0
	0x036FD5CC LDR X22, [X26, X25, LSL #3]
	0x036FD5D0 MOV X1, X31
	0x036FD5D4 MOV X0, X22
	0x036FD5D8 BL 0x32277A8
	0x036FD5DC TBNZ X0, 0x0, 0x36FD5FC
	0x036FD5E0 LDR X0, [X24]
	0x036FD5E4 LDR W8, [X0 + 0xE0]
	0x036FD5E8 CBNZ W8, 0x36FD5F0
	0x036FD5EC BL 0x1C16DFC
	0x036FD5F0 MOV X0, X21
	0x036FD5F4 MOV X1, X22
	0x036FD5F8 BL 0x36FD9AC
	0x036FD5FC LDR W8, [X23 + 0x18]
	0x036FD600 ADD X25, X25, 0x1
	0x036FD604 CMP X25, W8, SXTW
	0x036FD608 B.LT 0x36FD5C4
	0x036FD60C LDR W8, [X19 + 0x20]
	0x036FD610 CMP W8, 0x4
	0x036FD614 B.HI 0x36FD710
	0x036FD618 ADRP X9, 0xFFFFFFFFFD49A000
	0x036FD61C ADD X9, X9, 0x821
	0x036FD620 ADR X10, 0x10
	0x036FD624 LDRB W11, [X9, X8, LSL]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xCE4000
	011 Move W8, [X20+3130]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x9F8000
	018 Move X0, [X0+440]
	019 Call 0x1C17CF4
	020 Move X0, 0x9F9000
	021 Move X0, [X0+3704]
	022 Call 0x1C17CF4
	023 Move X0, 0x9F8000
	024 Move X0, [X0+448]
	025 Call 0x1C17CF4
	026 Move X0, 0x9F8000
	027 Move X0, [X0+464]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3130], W8
	031 Move X0, X31
	032 Call Encoding.get_UTF8
	033 Compare X0, 0
	034 JumpIfEqual {169}
	035 Move X8, [X0]
	036 Move X20, 0x9F8000
	037 Move X22, 0x9F8000
	038 Move X1, X19
	039 Move X9, [X8+616]
	040 Move X2, [X8+624]
	041 Move X20, [X20+464]
	042 Move X22, [X22+448]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X8, [X20]
	045 Move X21, X0
	046 Move X0, X8
	047 Call 0x1C17F10
	048 Move X1, [X22]
	049 Move X20, X0
	050 Call List`1<Object>..ctor, X0
	051 Compare X21, 0
	052 JumpIfEqual {169}
	053 Move W23, [X21+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X25, 0x9F8000
	056 Move X25, [X25+440]
	057 Move W24, W31
	058 Move W26, 10
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W8, [X21+24]
	061 Move W22, W31
	062 NotImplemented "Instruction CMP not yet implemented."
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Add X9, X21, W24
	066 Move W9, [X9+32]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Subtract W10, W9, 48
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction MADD not yet implemented."
	071 Add W24, W24, 1
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract W22, W9, 48
	074 Move X0, X31
	075 Call Encoding.get_UTF8
	076 Compare X0, 0
	077 JumpIfEqual {169}
	078 Move X8, [X0]
	079 Add W2, W24, 1
	080 Move X1, X21
	081 Move W3, W22
	082 Move X9, [X8+904]
	083 Move X4, [X8+912]
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Compare X20, 0
	086 JumpIfEqual {169}
	087 Move W10, [X20+28]
	088 Move X8, [X20+16]
	089 Move X9, [X25]
	090 Add W10, W10, 1
	091 Move [X20+28], W10
	092 Compare X8, 0
	093 JumpIfEqual {169}
	094 NotImplemented "Instruction LDRSW not yet implemented."
	095 Move W11, [X8+24]
	096 Move X1, X0
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Add W9, W10, 1
	099 Add X8, X8, X10
	100 Move [X20+24], W9
	101 Move [X8+32], X1
	102 Move X8, [X9+32]
	103 Move X0, X20
	104 Move X8, [X8+192]
	105 Move X2, [X8+112]
	106 Call List`1<Object>.AddWithResize, X0, X1
	107 Add W8, W24, W22
	108 Add W24, W8, 1
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Compare X20, 0
	111 JumpIfEqual {169}
	112 Move X8, 0x9F9000
	113 Move X8, [X8+3704]
	114 Move X0, X20
	115 Move X20, [X31+64]
	116 Move X19, [X31+72]
	117 Move X22, [X31+48]
	118 Move X21, [X31+56]
	119 Move X1, [X8]
	120 Move X24, [X31+32]
	121 Move X23, [X31+40]
	122 Move X26, [X31+16]
	123 Move X25, [X31+24]
	124 Move X30, [X31+80]
	125 Call List`1<Object>.ToArray, X0
	126 Return X0
	127 Call 0x1C17F28
	128 Move X0, 0xA44000
	129 Move X0, [X0+3648]
	130 Call 0x1C17D08
	131 Move X20, X0
	132 Move X0, 0xA44000
	133 Move X0, [X0+3656]
	134 Call 0x1C17D08
	135 Move X2, X0
	136 Move X0, X20
	137 Move X1, X19
	138 Move X3, X31
	139 Call String.Concat, X0, X1, X2
	140 Move [X31+12], W24
	141 Move X0, 0x9F7000
	142 Move X0, [X0+1880]
	143 Call 0x1C17D08
	144 Add X1, X31, 12
	145 Call 0x1C17E04
	146 Move X20, X0
	147 Move X0, 0xA44000
	148 Move X0, [X0+3664]
	149 Call 0x1C17D08
	150 Move X1, X19
	151 Move X2, X20
	152 Move X3, X31
	153 Call String.Format, X0, X1, X2
	154 Move X19, X0
	155 Move X0, 0xA24000
	156 Move X0, [X0+3080]
	157 Call 0x1C17D08
	158 Call 0x1C17F10
	159 Move X1, X19
	160 Move X2, X31
	161 Move X20, X0
	162 Call FormatException..ctor, X0, X1
	163 Move X0, 0xA44000
	164 Move X0, [X0+3672]
	165 Call 0x1C17D08
	166 Move X1, X0
	167 Move X0, X20
	168 Call 0x1C17DEC
	169 Call 0x1C17F20

