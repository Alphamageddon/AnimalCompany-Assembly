Type: Unity.Burst.BurstString

Method: System.Void CopyFixedString(System.Byte* dest, System.Int32 destLength, System.Byte* src, System.Int32 srcLength)

Disassembly:
	0x036FEFC4 STP X22, X21, [X31 + 0x20]
	0x036FEFC8 STP X20, X19, [X31 + 0x30]
	0x036FEFCC ADRP X24, 0xCE2000
	0x036FEFD0 ADRP X25, 0xA42000
	0x036FEFD4 LDRB W8, [X24 + 0xC1E]
	0x036FEFD8 LDR X25, [X25 + 0xF78]
	0x036FEFDC MOV W22, W4
	0x036FEFE0 MOV W23, W3
	0x036FEFE4 MOV W19, W2

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move X8, X2
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 Move X2, W9
	005 Move X1, X8
	006 Move X3, X31
	007 NotImplemented "Instruction STURH not yet implemented."
	008 Move [X0], W31
	009 Call UnsafeUtility.MemCpy, X0, X1, X2
	010 Return 

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Byte* src, System.Int32 srcLength, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FEFE8 MOV X20, X1
	0x036FEFEC MOV X21, X0
	0x036FEFF0 TBNZ X8, 0x0, 0x36FF008
	0x036FEFF4 ADRP X0, 0xA42000
	0x036FEFF8 LDR X0, [X0 + 0xF78]
	0x036FEFFC BL 0x1C16CF4
	0x036FF000 MOVZ W8, 0x1
	0x036FF004 STRB W8, [X24 + 0xC1E]
	0x036FF008 LDR X0, [X25]
	0x036FF00C LDR W8, [X0 + 0xE0]
	0x036FF010 CBNZ W8, 0x36FF018
	0x036FF014 BL 0x1C16DFC
	0x036FF018 AND W8, W22, 0xFF
	0x036FF01C CMP W8, 0x3
	0x036FF020 B.NE 0x36FF04C
	0x036FF024 AND X3, X23, 0xFF
	0x036FF028 MOV W4, W22
	0x036FF02C MOV X0, X21
	0x036FF030 MOV X1, X20
	0x036FF034 MOV W2, W19
	0x036FF038 LDP X20, X19, [X31 + 0x30]
	0x036FF03C LDP X22, X21, [X31 + 0x20]
	0x036FF040 LDP X24, X23, [X31 + 0x10]
	0x036FF044 LDP X30, X25, [X31], #0x40
	0x036FF048 B 0x36FEE18
	0x036FF04C SXTB X3, W23
	0x036FF050 MOV W4, W22
	0x036FF054 MOV X0, X21
	0x036FF058 MOV X1, X20
	0x036FF05C MOV W2, W19
	0x036FF060 LDP X20, X19, [X31 + 0x30]
	0x036FF064 LDP X22, X21, [X31 + 0x20]
	0x036FF068 LDP X24, X23, [X31 + 0x10]
	0x036FF06C LDP X30, X25, [X31], #0x40
	0x036FF070 B 0x36FF074
	0x036FF074 STP X29, X30, [X31 - 0x60]!
	0x036FF078 STP X28, X27, [X31 + 0x10]
	0x036FF07C STP X26, X25, [X31 + 0x20]
	0x036FF080 STP X24, X23, [X31 + 0x30]
	0x036FF084 STP X22, X21, [X31 + 0x40]
	0x036FF088 STP X20, X19, [X31 + 0x50]
	0x036FF08C ADD X29, X31, 0x0
	0x036FF090 SUB X31, X31, 0x50
	0x036FF094 STUR W2, [X29 - 0x2C]
	0x036FF098 STP X0, X1, [X29 - 0x40]
	0x036FF09C MRS X8, 0xC000
	0x036FF0A0 STUR X8, [X29 - 0x28]
	0x036FF0A4 LDR X8, [X8 + 0x28]
	0x036FF0A8 ADRP X19, 0xCE1000
	0x036FF0AC MOV X22, X4
	0x036FF0B0 MOV X26, X3
	0x036FF0B4 STUR X8, [X29 - 0x8]
	0x036FF0B8 LDRB W8, [X19 + 0xC23]
	0x036FF0BC UBFM X9, X4, 0x10, 0x3F
	0x036FF0C0 STUR X9, [X29 - 0x48]
	0x036FF0C4 TBNZ X8, 0x0, 0x36FF0DC
	0x036FF0C8 ADRP X0, 0xA41000
	0x036FF0CC LDR X0, [X0 + 0xF78]
	0x036FF0D0 BL 0x1C16CF4
	0x036FF0D4 MOVZ W8, 0x1
	0x036FF0D8 STRB W8, [X19 + 0xC23]
	0x036FF0DC ADRP X27, 0xA41000
	0x036FF0E0 LDR X27, [X27 + 0xF78]
	0x036FF0E4 AND W8, W22, 0xFF
	0x036FF0E8 MOVZ W9, 0xA
	0x036FF0EC MOVZ W10, 0x10
	0x036FF0F0 CMP W8, 0x3
	0x036FF0F4 CSEL X28, X10, X9, EQ
	0x036FF0F8 MOVZ W8, 0x1
	0x036FF0FC MOV X9, X26
	0x036FF100 STP X31, X31, [X29 - 0x20]
	0x036FF104 STUR X31, [X29 - 0x10]
	0x036FF108 SDIV X9, X9, X28
	0x036FF10C ADD W8, W8, 0x1
	0x036FF110 CBNZ X9, 0x36FF108
	0x036FF114 SXTW X2, W8

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0xCE3000
	011 Move X25, 0xA42000
	012 Move W8, [X26+3093]
	013 Call 0x3EB26C4
	014 Return 
	015 Move W24, W5
	016 Move W19, W4
	017 Move X23, X3
	018 Move W20, W2
	019 Move X21, X1
	020 Move X22, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xA42000
	026 Move X0, [X0+3960]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X26+3093], W8
	030 Move X0, [X25]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move W8, W24
	036 ShiftRight W8, 16
	037 And W8, W8, 0x7FFF
	038 Move W9, 0x1000000
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction SBFM not yet implemented."
	041 Subtract W8, W24, W19
	042 Move W9, 32
	043 NotImplemented "Instruction LDRSW not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add W11, W10, 1
	046 Subtract W8, W8, 1
	047 Move [X21], W11
	048 Move [X10], W9
	049 NotImplemented "Instruction LDRSW not yet implemented."
	050 Subtract W9, W20, W8
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CSEL not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X0, X8, X22
	055 Move W2, W26
	056 Move X1, X23
	057 Move X3, X31
	058 Call UnsafeUtility.MemCpy, X0, X1, X2
	059 Move W8, [X21]
	060 Add W8, W8, W26
	061 Move [X21], W8
	062 Move X0, [X25]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X22
	068 Move X1, X21
	069 Move W2, W20
	070 Move W3, W24
	071 Move W4, W19
	072 Move X20, [X31+64]
	073 Move X19, [X31+72]
	074 Move X22, [X31+48]
	075 Move X21, [X31+56]
	076 Move X24, [X31+32]
	077 Move X23, [X31+40]
	078 Move X26, [X31+16]
	079 Move X25, [X31+24]
	080 Move X30, [X31+80]
	081 Call BurstString.AlignRight, X0, X1, X2, X3, X4
	082 Return 
	083 Move X20, [X31+64]
	084 Move X19, [X31+72]
	085 Move X22, [X31+48]
	086 Move X21, [X31+56]
	087 Move X24, [X31+32]
	088 Move X23, [X31+40]
	089 Move X26, [X31+16]
	090 Move X25, [X31+24]
	091 Move X30, [X31+80]
	092 Return 

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Single value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FF22C STP X24, X23, [X31 + 0x10]
	0x036FF230 STP X22, X21, [X31 + 0x20]
	0x036FF234 STP X20, X19, [X31 + 0x30]
	0x036FF238 ADRP X24, 0xCE1000
	0x036FF23C ADRP X25, 0xA41000
	0x036FF240 LDRB W8, [X24 + 0xC1F]
	0x036FF244 LDR X25, [X25 + 0xF78]
	0x036FF248 MOV W22, W4
	0x036FF24C MOV W23, W3
	0x036FF250 MOV W19, W2
	0x036FF254 MOV X20, X1
	0x036FF258 MOV X21, X0
	0x036FF25C TBNZ X8, 0x0, 0x36FF274
	0x036FF260 ADRP X0, 0xA41000
	0x036FF264 LDR X0, [X0 + 0xF78]
	0x036FF268 BL 0x1C16CF4
	0x036FF26C MOVZ W8, 0x1
	0x036FF270 STRB W8, [X24 + 0xC1F]
	0x036FF274 LDR X0, [X25]
	0x036FF278 LDR W8, [X0 + 0xE0]
	0x036FF27C CBNZ W8, 0x36FF284
	0x036FF280 BL 0x1C16DFC
	0x036FF284 AND W8, W22, 0xFF
	0x036FF288 CMP W8, 0x3
	0x036FF28C B.NE 0x36FF2B8
	0x036FF290 AND X3, X23, 0xFFFF
	0x036FF294 MOV W4, W22
	0x036FF298 MOV X0, X21
	0x036FF29C MOV X1, X20
	0x036FF2A0 MOV W2, W19
	0x036FF2A4 LDP X20, X19, [X31 + 0x30]
	0x036FF2A8 LDP X22, X21, [X31 + 0x20]
	0x036FF2AC LDP X24, X23, [X31 + 0x10]
	0x036FF2B0 LDP X30, X25, [X31], #0x40
	0x036FF2B4 B 0x36FEE18

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0xCE2000
	010 Move X24, 0xA42000
	011 Move W8, [X23+3094]
	012 Move X24, [X24+3960]
	013 Move W21, W3
	014 Move V8, V0
	015 Move W19, W2
	016 Move X20, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3094], W8
	027 Move X0, [X24]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W3, W21
	033 Move X0, X22
	034 Move X1, X20
	035 Move W2, W19
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X24, [X31+16]
	041 Move X23, [X31+24]
	042 Move X30, [X31+8]
	043 Move V0, V8
	044 Move V8, [X31+64]

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Double value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FF538 SUB W8, W8, 0x1
	0x036FF53C CMP W8, 0x2
	0x036FF540 MOV W28, W23
	0x036FF544 B.HI 0x36FF624
	0x036FF548 LDR W8, [X22 + 0xC]
	0x036FF54C LDR X0, [X27]
	0x036FF550 UBFM W9, W23, 0x10, 0x17
	0x036FF554 LDRB W10, [X22 + 0x14]
	0x036FF558 SUBS W11, W9, W8
	0x036FF55C LDR W12, [X0 + 0xE0]
	0x036FF560 CSEL W29, W9, W8, GT
	0x036FF564 AND W8, W28, 0xFF
	0x036FF568 CSEL W4, W11, W31, GT
	0x036FF56C CMP W8, 0x2
	0x036FF570 CSET W8, EQ
	0x036FF574 ORR W24, W10, W8, 0x0
	0x036FF578 CBNZ W12, 0x36FF588
	0x036FF57C MOV W25, W4
	0x036FF580 BL 0x1C16DFC
	0x036FF584 MOV W4, W25
	0x036FF588 SBFM W8, W23, 0x8, 0xF
	0x036FF58C ADD W25, W24, W29
	0x036FF590 CMP W8, 0x1
	0x036FF594 SXTB W23, W26
	0x036FF598 B.LT 0x36FF5D0
	0x036FF59C CMP W25, W23
	0x036FF5A0 B.GE 0x36FF5D0
	0x036FF5A4 ADD W8, W24, W29
	0x036FF5A8 SUB W8, W23, W8
	0x036FF5AC MOVZ W9, 0x20
	0x036FF5B0 LDRSW X10, [X20]
	0x036FF5B4 CMP W10, W19
	0x036FF5B8 B.GE 0x36FF710
	0x036FF5BC ADD W11, W10, 0x1
	0x036FF5C0 SUBS W8, W8, 0x1

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X23, 0xCE2000
	010 Move X24, 0xA42000
	011 Move W8, [X23+3095]
	012 Move X24, [X24+3960]
	013 Move W21, W3
	014 Move V8, V0
	015 Move W19, W2
	016 Move X20, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3095], W8
	027 Move X0, [X24]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W3, W21
	033 Move X0, X22
	034 Move X1, X20
	035 Move W2, W19
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X24, [X31+16]
	041 Move X23, [X31+24]
	042 Move X30, [X31+8]
	043 Move V0, V8
	044 Move V8, [X31+64]

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Boolean value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FF840 CMP W21, 0x1
	0x036FF844 MOV W23, W21
	0x036FF848 B.LT 0x36FF86C
	0x036FF84C MOV X24, X31
	0x036FF850 LDRB W8, [X22, X24, LSL]
	0x036FF854 CBZ W8, 0x36FF870
	0x036FF858 ADD X24, X24, 0x1
	0x036FF85C CMP X23, X24
	0x036FF860 B.NE 0x36FF850
	0x036FF864 MOV W24, W23
	0x036FF868 B 0x36FF878
	0x036FF86C MOV W24, W31
	0x036FF870 CMP W24, W21
	0x036FF874 B.NE 0x36FF8D0
	0x036FF878 ADRP X8, 0xA41000
	0x036FF87C LDR X8, [X8 + 0xF78]
	0x036FF880 LDR X0, [X8]
	0x036FF884 LDR W8, [X0 + 0xE0]
	0x036FF888 CBNZ W8, 0x36FF890
	0x036FF88C BL 0x1C16DFC
	0x036FF890 LDRB W8, [X22, W21, UXTW]
	0x036FF894 CMP W8, 0x35
	0x036FF898 B.CC 0x36FF8D0
	0x036FF89C CBZ W8, 0x36FF8D0
	0x036FF8A0 TBNZ X20, 0x0, 0x36FF8D0
	0x036FF8A4 SUBS X9, X23, 0x1
	0x036FF8A8 B.LT 0x36FF904
	0x036FF8AC ADD X8, X22, X23
	0x036FF8B0 LDURB W10, [X8 - 0x1]
	0x036FF8B4 MOV X23, X9
	0x036FF8B8 CMP W10, 0x39
	0x036FF8BC B.EQ 0x36FF8A4
	0x036FF8C0 ADD W10, W10, 0x1
	0x036FF8C4 ADD W8, W9, 0x1
	0x036FF8C8 STRB W10, [X22, X9, LSL]
	0x036FF8CC B 0x36FF91C
	0x036FF8D0 MOV W9, W24
	0x036FF8D4 SUB X8, X22, 0x1
	0x036FF8D8 SUBS X10, X9, 0x1
	0x036FF8DC B.LT 0x36FF8F8
	0x036FF8E0 LDRB W9, [X8, X9, LSL]
	0x036FF8E4 CMP W9, 0x30
	0x036FF8E8 MOV X9, X10
	0x036FF8EC B.EQ 0x36FF8D8
	0x036FF8F0 ADD W8, W10, 0x1
	0x036FF8F4 B 0x36FF91C
	0x036FF8F8 MOV W8, W31
	0x036FF8FC STR W31, [X19 + 0x10]
	0x036FF900 B 0x36FF91C
	0x036FF904 LDR W8, [X19 + 0x10]
	0x036FF908 MOVZ W9, 0x31
	0x036FF90C ADD W8, W8, 0x1
	0x036FF910 STR W8, [X19 + 0x10]
	0x036FF914 STRB W9, [X22]
	0x036FF918 MOVZ W8, 0x1
	0x036FF91C STRB W31, [X22, W8, SXTW]
	0x036FF920 STR W8, [X19 + 0xC]
	0x036FF924 LDP X20, X19, [X31 + 0x30]
	0x036FF928 LDP X22, X21, [X31 + 0x20]
	0x036FF92C LDP X24, X23, [X31 + 0x10]
	0x036FF930 LDR X30, [X31], #0x40
	0x036FF934 RET
	0x036FF938 STP X30, X21, [X31 - 0x20]!
	0x036FF93C STP X20, X19, [X31 + 0x10]
	0x036FF940 ADRP X21, 0xCE1000
	0x036FF944 LDRB W8, [X21 + 0xC28]
	0x036FF948 MOV W19, W1
	0x036FF94C MOV X20, X0
	0x036FF950 TBNZ X8, 0x0, 0x36FF968
	0x036FF954 ADRP X0, 0xA41000
	0x036FF958 LDR X0, [X0 + 0xF78]
	0x036FF95C BL 0x1C16CF4
	0x036FF960 MOVZ W8, 0x1
	0x036FF964 STRB W8, [X21 + 0xC28]
	0x036FF968 LDR W8, [X20 + 0x10]
	0x036FF96C LDR X10, [X20]
	0x036FF970 CMP W8, W19
	0x036FF974 CSET W9, LE
	0x036FF978 ADDS W31, W8, 0x4
	0x036FF97C CSET W11, GT
	0x036FF980 ANDS W9, W9, W11, 0x0
	0x036FF984 LDRB W11, [X20 + 0x14]
	0x036FF988 CSINC W12, W8, W31, NE
	0x036FF98C CMP W12, 0x1
	0x036FF990 B.LT 0x36FF9C0
	0x036FF994 ADD W13, W12, 0x1
	0x036FF998 MOV X14, X10
	0x036FF99C LDRB W15, [X14], #0x1
	0x036FF9A0 SUB W13, W13, 0x1
	0x036FF9A4 CMP W15, 0x0
	0x036FF9A8 CSEL X10, X10, X14, EQ
	0x036FF9AC CMP W13, 0x1
	0x036FF9B0 B.GT 0x36FF998
	0x036FF9B4 MOV W13, W31
	0x036FF9B8 ADD W19, W12, W11
	0x036FF9BC B 0x36FF9C8
	0x036FF9C0 ADD W19, W11, 0x1
	0x036FF9C4 MOV W13, W8
	0x036FF9C8 LDRB W11, [X10]
	0x036FF9CC TBNZ X13, 0x1F, 0x36FF9D4
	0x036FF9D0 CBZ W11, 0x36FF9F4
	0x036FF9D4 BIC W12, W13, W13, 0x1F
	0x036FF9D8 ADD W12, W19, W12
	0x036FF9DC SUB W12, W12, W13
	0x036FF9E0 ADD W19, W12, 0x1
	0x036FF9E4 CBZ W11, 0x36FF9F4
	0x036FF9E8 LDRB W11, [X10 + 0x1]!
	0x036FF9EC ADD W19, W19, 0x1
	0x036FF9F0 CBNZ W11, 0x36FF9E8
	0x036FF9F4 TBNZ X9, 0x0, 0x36FFA70
	0x036FF9F8 ADRP X9, 0xA41000
	0x036FF9FC LDR X9, [X9 + 0xF78]
	0x036FFA00 SUB W21, W8, 0x1
	0x036FFA04 CMP W21, 0x0
	0x036FFA08 MOVZ W8, 0x1
	0x036FFA0C LDR X0, [X9]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0xCE2000
	010 Move X25, 0xA42000
	011 Move W8, [X22+3096]
	012 Move X25, [X25+3960]
	013 Move W23, W4
	014 Move W24, W3
	015 Move W19, W2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+3096], W8
	027 Move X0, [X25]
	028 And W31, W24, 1
	029 Move W9, 4
	030 NotImplemented "Instruction CINC not yet implemented."
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move W8, W23
	036 ShiftRight W8, 16
	037 And W8, W8, 0x7FFF
	038 Move W9, 0x1000000
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction SBFM not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Subtract W8, W23, W22
	043 Move W9, 32
	044 NotImplemented "Instruction LDRSW not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Add W11, W10, 1
	047 Subtract W8, W8, 1
	048 Move [X20], W11
	049 Move [X10], W9
	050 NotImplemented "Instruction LDRSW not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move TEMP, X24
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 Invalid "Jump target not found in method."
	056 Add W9, W8, 1
	057 Move W10, 84
	058 Move [X20], W9
	059 Move [X8], W10
	060 NotImplemented "Instruction LDRSW not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add W9, W8, 1
	063 Move W10, 114
	064 Move [X20], W9
	065 Move [X8], W10
	066 NotImplemented "Instruction LDRSW not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Add W9, W8, 1
	069 Move W10, 117
	070 Add W9, W8, 1
	071 Move W10, 70
	072 Move [X20], W9
	073 Move [X8], W10
	074 NotImplemented "Instruction LDRSW not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Add W9, W8, 1
	077 Move W10, 97
	078 Move [X20], W9
	079 Move [X8], W10
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W9, W8, 1
	083 Move W10, 108
	084 Move [X20], W9
	085 Move [X8], W10
	086 NotImplemented "Instruction LDRSW not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add W9, W8, 1
	089 Move W10, 115
	090 Move [X20], W9
	091 Move [X8], W10
	092 Move W8, [X20]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add W9, W8, 1
	095 Move W10, 101
	096 Move [X20], W9
	097 Move [X21], W10
	098 Move X0, [X25]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X0, X21
	104 Move X1, X20
	105 Move W2, W19
	106 Move W3, W23
	107 Move W4, W22
	108 Move X20, [X31+48]
	109 Move X19, [X31+56]
	110 Move X22, [X31+32]
	111 Move X21, [X31+40]
	112 Move X24, [X31+16]
	113 Move X23, [X31+24]
	114 Move X30, [X31+64]
	115 Move X25, [X31+72]
	116 Call BurstString.AlignRight, X0, X1, X2, X3, X4
	117 Return 
	118 Move X20, [X31+48]
	119 Move X19, [X31+56]
	120 Move X22, [X31+32]
	121 Move X21, [X31+40]
	122 Move X24, [X31+16]
	123 Move X23, [X31+24]
	124 Move X30, [X31+64]
	125 Move X25, [X31+72]
	126 Return 

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Char value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FFA10 CINC W20, W8, GE
	0x036FFA14 LDR W9, [X0 + 0xE0]
	0x036FFA18 CBNZ W9, 0x36FFA20
	0x036FFA1C BL 0x1C16DFC
	0x036FFA20 SXTW X9, W21
	0x036FFA24 ORR X10, X31, 0x6666666666666666
	0x036FFA28 MOV W8, W31
	0x036FFA2C MOVK X10, 0x6667
	0x036FFA30 MOV X11, X9
	0x036FFA34 SMULH X12, X11, X10, X31
	0x036FFA38 SBFM X13, X12, 0x2, 0x3F
	0x036FFA3C ADD X11, X11, 0x9
	0x036FFA40 ADD X12, X13, X12, 0x3F, LSR
	0x036FFA44 CMP X11, 0x12
	0x036FFA48 ADD W8, W8, 0x1
	0x036FFA4C MOV X11, X12
	0x036FFA50 B.HI 0x36FFA34
	0x036FFA54 UBFM X9, X9, 0x3F, 0x3F
	0x036FFA58 CMP W8, 0x2
	0x036FFA5C MOVZ W10, 0x2
	0x036FFA60 ADD W9, W20, W9
	0x036FFA64 CSEL W8, W8, W10, GT
	0x036FFA68 ADD W9, W9, W19
	0x036FFA6C ADD W19, W9, W8
	0x036FFA70 MOV W0, W19
	0x036FFA74 LDP X20, X19, [X31 + 0x10]
	0x036FFA78 LDP X30, X21, [X31], #0x20
	0x036FFA7C RET
	0x036FFA80 STP X30, X25, [X31 - 0x40]!
	0x036FFA84 STP X24, X23, [X31 + 0x10]
	0x036FFA88 STP X22, X21, [X31 + 0x20]
	0x036FFA8C STP X20, X19, [X31 + 0x30]
	0x036FFA90 ADRP X25, 0xCE1000
	0x036FFA94 LDRB W8, [X25 + 0xC29]
	0x036FFA98 MOV W23, W5
	0x036FFA9C MOV W24, W4
	0x036FFAA0 MOV X22, X3
	0x036FFAA4 MOV W19, W2
	0x036FFAA8 MOV X20, X1
	0x036FFAAC MOV X21, X0
	0x036FFAB0 TBNZ X8, 0x0, 0x36FFAC8
	0x036FFAB4 ADRP X0, 0xA41000
	0x036FFAB8 LDR X0, [X0 + 0xF78]
	0x036FFABC BL 0x1C16CF4
	0x036FFAC0 MOVZ W8, 0x1
	0x036FFAC4 STRB W8, [X25 + 0xC29]
	0x036FFAC8 LDR W10, [X22 + 0x10]
	0x036FFACC LDRB W12, [X22 + 0x14]
	0x036FFAD0 LDR X9, [X22]
	0x036FFAD4 CMP W10, W24
	0x036FFAD8 CSET W8, LE
	0x036FFADC ADDS W31, W10, 0x4
	0x036FFAE0 CSET W11, GT
	0x036FFAE4 ANDS W8, W8, W11, 0x0
	0x036FFAE8 CSINC W11, W10, W31, NE
	0x036FFAEC CBZ W12, 0x36FFB0C
	0x036FFAF0 LDRSW X12, [X20]
	0x036FFAF4 CMP W12, W19
	0x036FFAF8 B.GE 0x36FFC60
	0x036FFAFC ADD W13, W12, 0x1
	0x036FFB00 MOVZ W14, 0x2D
	0x036FFB04 STR W13, [X20]
	0x036FFB08 STRB W14, [X12, X21, LSL]
	0x036FFB0C CMP W11, 0x1
	0x036FFB10 B.LT 0x36FFB60
	0x036FFB14 ADD W10, W11, 0x1
	0x036FFB18 MOVZ W11, 0x30
	0x036FFB1C LDRSW X12, [X20]
	0x036FFB20 CMP W12, W19
	0x036FFB24 B.GE 0x36FFC60
	0x036FFB28 ADD W13, W12, 0x1
	0x036FFB2C MOV X14, X9
	0x036FFB30 STR W13, [X20]
	0x036FFB34 LDRB W13, [X14], #0x1
	0x036FFB38 SUB W10, W10, 0x1
	0x036FFB3C CMP W13, 0x0
	0x036FFB40 CSEL W13, W11, W13, EQ
	0x036FFB44 CSEL X9, X9, X14, EQ
	0x036FFB48 CMP W10, 0x1
	0x036FFB4C STRB W13, [X12, X21, LSL]
	0x036FFB50 B.GT 0x36FFB1C
	0x036FFB54 MOV W10, W31
	0x036FFB58 TBZ X10, 0x1F, 0x36FFB80
	0x036FFB5C B 0x36FFBEC
	0x036FFB60 LDRSW X11, [X20]
	0x036FFB64 CMP W11, W19
	0x036FFB68 B.GE 0x36FFC60
	0x036FFB6C ADD W12, W11, 0x1
	0x036FFB70 MOVZ W13, 0x30
	0x036FFB74 STR W12, [X20]
	0x036FFB78 STRB W13, [X11, X21, LSL]
	0x036FFB7C TBNZ X10, 0x1F, 0x36FFBEC
	0x036FFB80 LDRB W11, [X9]
	0x036FFB84 CBNZ W11, 0x36FFBEC
	0x036FFB88 TBNZ X8, 0x0, 0x36FFC60
	0x036FFB8C LDRSW X8, [X20]
	0x036FFB90 CMP W8, W19
	0x036FFB94 B.GE 0x36FFC60
	0x036FFB98 ADD W9, W8, 0x1
	0x036FFB9C STR W9, [X20]
	0x036FFBA0 STRB W23, [X8, X21, LSL]
	0x036FFBA4 ADRP X8, 0xA41000
	0x036FFBA8 LDR X8, [X8 + 0xF78]
	0x036FFBAC LDR X0, [X8]
	0x036FFBB0 LDR W8, [X22 + 0x10]
	0x036FFBB4 LDR W9, [X0 + 0xE0]
	0x036FFBB8 SUB W22, W8, 0x1
	0x036FFBBC CBNZ W9, 0x36FFBC4
	0x036FFBC0 BL 0x1C16DFC
	0x036FFBC4 SXTW X3, W22
	0x036FFBC8 MOV X0, X21
	0x036FFBCC MOV X1, X20
	0x036FFBD0 MOV W2, W19
	0x036FFBD4 LDP X20, X19, [X31 + 0x30]
	0x036FFBD8 LDP X22, X21, [X31 + 0x20]
	0x036FFBDC LDP X24, X23, [X31 + 0x10]
	0x036FFBE0 ORR W4, W31, 0x20002
	0x036FFBE4 LDP X30, X25, [X31], #0x40
	0x036FFBE8 B 0x36FF074
	0x036FFBEC LDRSW X11, [X20]
	0x036FFBF0 CMP W11, W19
	0x036FFBF4 B.GE 0x36FFC60
	0x036FFBF8 ADD W12, W11, 0x1
	0x036FFBFC MOVZ W13, 0x2E
	0x036FFC00 STR W12, [X20]
	0x036FFC04 STRB W13, [X11, X21, LSL]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xCE2000
	010 Move X24, 0xA42000
	011 Move W8, [X25+3097]
	012 Move X24, [X24+3960]
	013 Move W22, W4
	014 Move W23, W3
	015 Move W19, W2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X25+3097], W8
	027 Move X0, [X24]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W8, W22
	033 ShiftRight W8, 16
	034 And W8, W8, 0x7FFF
	035 Move W9, 0x2000000
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction SBFM not yet implemented."
	038 Subtract W8, W22, 1
	039 Move W9, 32
	040 NotImplemented "Instruction LDRSW not yet implemented."
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Add W11, W10, 1
	043 Subtract W8, W8, 1
	044 Move [X20], W11
	045 Move [X10], W9
	046 And W8, W23, 0xFFFF
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move W8, [X20]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add W9, W8, 1
	051 Subtract W8, W23, 128
	052 And W8, W8, 0xFFFF
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add W9, W8, 1
	057 Move W10, W23
	058 ShiftRight W10, 6
	059 And W10, W10, 0x7FFFFFFF
	060 Move [X20], W9
	061 Or W9, W10, 192
	062 Move [X8], W9
	063 Move W8, [X20]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move TEMP, 127
	066 Not TEMP
	067 Move W10, TEMP
	068 NotImplemented "Instruction BFM not yet implemented."
	069 Add W9, W8, 1
	070 Move W23, W10
	071 Move [X20], W9
	072 Move [X21], W23
	073 Move X0, [X24]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X0, X21
	079 Move X1, X20
	080 Move W2, W19
	081 Move W3, W22
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X22, [X31+32]
	085 Move X21, [X31+40]
	086 Move X24, [X31+16]
	087 Move X23, [X31+24]
	088 Move W4, 1
	089 Move X30, [X31+64]
	090 Move X25, [X31+72]
	091 Call BurstString.AlignRight, X0, X1, X2, X3, X4
	092 Return 
	093 NotImplemented "Instruction LDRSW not yet implemented."
	094 Move W9, W23
	095 ShiftRight W9, 11
	096 And W9, W9, 0x7FFF
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Add W9, W8, 1
	100 Move W10, 239
	101 Move [X20], W9
	102 Move [X8], W10
	103 NotImplemented "Instruction LDRSW not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add W9, W8, 1
	106 Move W10, 191
	107 Move [X20], W9
	108 Move [X8], W10
	109 Move W8, [X20]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add W9, W8, 1
	112 Move [X20], W9
	113 Move W23, 189
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move W10, 224
	116 Add W9, W8, 1
	117 NotImplemented "Instruction BFM not yet implemented."
	118 Move [X20], W9
	119 Move [X8], W10
	120 NotImplemented "Instruction LDRSW not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move W10, 128
	123 Add W9, W8, 1
	124 NotImplemented "Instruction BFM not yet implemented."
	125 Move [X20], W9
	126 Move [X8], W10
	127 Move X20, [X31+48]
	128 Move X19, [X31+56]
	129 Move X22, [X31+32]
	130 Move X21, [X31+40]
	131 Move X24, [X31+16]
	132 Move X23, [X31+24]
	133 Move X30, [X31+64]
	134 Move X25, [X31+72]
	135 Return 

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Byte value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FFC08 TBZ X10, 0x1F, 0x36FFC30
	0x036FFC0C MOVZ W11, 0x30
	0x036FFC10 LDRSW X12, [X20]
	0x036FFC14 CMP W12, W19
	0x036FFC18 B.GE 0x36FFC60
	0x036FFC1C ADD W13, W12, 0x1
	0x036FFC20 ADDS W10, W10, 0x1
	0x036FFC24 STR W13, [X20]
	0x036FFC28 STRB W11, [X12, X21, LSL]
	0x036FFC2C B.CC 0x36FFC10
	0x036FFC30 LDRB W10, [X9]
	0x036FFC34 CBZ W10, 0x36FFB88
	0x036FFC38 LDRSW X10, [X20]
	0x036FFC3C CMP W10, W19
	0x036FFC40 B.GE 0x36FFC60
	0x036FFC44 ADD W11, W10, 0x1
	0x036FFC48 STR W11, [X20]
	0x036FFC4C LDRB W11, [X9]
	0x036FFC50 STRB W11, [X10, X21, LSL]
	0x036FFC54 LDRB W10, [X9 + 0x1]!
	0x036FFC58 CBNZ W10, 0x36FFC38
	0x036FFC5C B 0x36FFB88
	0x036FFC60 LDP X20, X19, [X31 + 0x30]
	0x036FFC64 LDP X22, X21, [X31 + 0x20]
	0x036FFC68 LDP X24, X23, [X31 + 0x10]
	0x036FFC6C LDP X30, X25, [X31], #0x40
	0x036FFC70 RET
	0x036FFC74 SUB X31, X31, 0x40
	0x036FFC78 STP X30, X23, [X31 + 0x10]
	0x036FFC7C STP X22, X21, [X31 + 0x20]
	0x036FFC80 STP X20, X19, [X31 + 0x30]
	0x036FFC84 ADRP X23, 0xCE1000
	0x036FFC88 ADRP X22, 0xA41000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xCE2000
	010 Move X25, 0xA42000
	011 Move W8, [X24+3098]
	012 Move X25, [X25+3960]
	013 Move W19, W4
	014 Move W22, W3
	015 Move W20, W2
	016 Move X21, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3098], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 And X3, X22, 255
	033 Move X0, X23
	034 Move X1, X21
	035 Move W2, W20
	036 Move W4, W19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Move X25, [X31+72]

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.UInt16 value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FFD10 LDR X8, [X19]
	0x036FFD14 STR X8, [X20]
	0x036FFD18 LDR X8, [X0 + 0x28]
	0x036FFD1C B 0x36FFD4C
	0x036FFD20 LDR X0, [X19]
	0x036FFD24 CBZ X0, 0x36FFD64
	0x036FFD28 MOV W1, W31
	0x036FFD2C MOV X2, X31
	0x036FFD30 BL 0x3222A1C
	0x036FFD34 AND W8, W0, 0xFFFF
	0x036FFD38 CMP W8, 0x2C
	0x036FFD3C B.NE 0x36FFD50
	0x036FFD40 LDR X9, [X19]
	0x036FFD44 MOV X8, X31
	0x036FFD48 STR X9, [X20]
	0x036FFD4C STR X8, [X19]
	0x036FFD50 LDP X20, X19, [X31 + 0x30]
	0x036FFD54 LDP X22, X21, [X31 + 0x20]
	0x036FFD58 LDP X30, X23, [X31 + 0x10]
	0x036FFD5C ADD X31, X31, 0x40
	0x036FFD60 RET
	0x036FFD64 BL 0x1C16F20
	0x036FFD68 BL 0x1C16F28
	0x036FFD6C LDR X19, [X19]
	0x036FFD70 STR W8, [X31 + 0xC]
	0x036FFD74 ADRP X0, 0x9F4000
	0x036FFD78 LDR X0, [X0 + 0x758]
	0x036FFD7C BL 0x1C16D08
	0x036FFD80 ADD X1, X31, 0xC
	0x036FFD84 BL 0x1C16E04
	0x036FFD88 MOV X20, X0
	0x036FFD8C ADRP X0, 0xA41000
	0x036FFD90 LDR X0, [X0 + 0xF80]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xCE2000
	010 Move X25, 0xA42000
	011 Move W8, [X24+3099]
	012 Move X25, [X25+3960]
	013 Move W19, W4
	014 Move W22, W3
	015 Move W20, W2
	016 Move X21, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3099], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 And X3, X22, 0xFFFF
	033 Move X0, X23
	034 Move X1, X21
	035 Move W2, W20
	036 Move W4, W19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Move X25, [X31+72]
	045 Call BurstString.Format, X0, X1, X2, X3, X4
	046 Return 

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.UInt32 value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FFD94 BL 0x1C16D08
	0x036FFD98 MOV X1, X19
	0x036FFD9C MOV X2, X20
	0x036FFDA0 MOV X3, X31
	0x036FFDA4 BL 0x3227BD4
	0x036FFDA8 MOV X19, X0
	0x036FFDAC ADRP X0, 0x9FC000
	0x036FFDB0 LDR X0, [X0 + 0x578]
	0x036FFDB4 BL 0x1C16D08
	0x036FFDB8 BL 0x1C16F10
	0x036FFDBC MOV X1, X19
	0x036FFDC0 MOV X2, X31
	0x036FFDC4 MOV X20, X0
	0x036FFDC8 BL 0x3314A68
	0x036FFDCC ADRP X0, 0xA41000
	0x036FFDD0 LDR X0, [X0 + 0xF88]
	0x036FFDD4 BL 0x1C16D08
	0x036FFDD8 MOV X1, X0
	0x036FFDDC MOV X0, X20
	0x036FFDE0 BL 0x1C16DEC
	0x036FFDE4 SUB X31, X31, 0x50
	0x036FFDE8 STP X30, X23, [X31 + 0x20]
	0x036FFDEC STP X22, X21, [X31 + 0x30]
	0x036FFDF0 STP X20, X19, [X31 + 0x40]
	0x036FFDF4 ADRP X20, 0xCE1000
	0x036FFDF8 LDRB W8, [X20 + 0xC26]
	0x036FFDFC MOV X19, X0
	0x036FFE00 TBNZ X8, 0x0, 0x36FFE18
	0x036FFE04 ADRP X0, 0xA41000
	0x036FFE08 LDR X0, [X0 + 0xF78]
	0x036FFE0C BL 0x1C16CF4
	0x036FFE10 MOVZ W8, 0x1
	0x036FFE14 STRB W8, [X20 + 0xC26]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xCE2000
	010 Move X25, 0xA42000
	011 Move W8, [X24+3100]
	012 Move X25, [X25+3960]
	013 Move W21, W4
	014 Move W23, W3
	015 Move W19, W2
	016 Move X20, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3100], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W3, W23
	033 Move W4, W21
	034 Move X0, X22
	035 Move X1, X20
	036 Move W2, W19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Move X25, [X31+72]

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.UInt64 value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FFC8C LDRB W8, [X23 + 0xC25]
	0x036FFC90 LDR X22, [X22 + 0xF78]
	0x036FFC94 MOV X19, X2
	0x036FFC98 MOV X20, X1
	0x036FFC9C MOV X21, X0
	0x036FFCA0 TBNZ X8, 0x0, 0x36FFCB8
	0x036FFCA4 ADRP X0, 0xA41000
	0x036FFCA8 LDR X0, [X0 + 0xF78]
	0x036FFCAC BL 0x1C16CF4
	0x036FFCB0 MOVZ W8, 0x1
	0x036FFCB4 STRB W8, [X23 + 0xC25]
	0x036FFCB8 LDR X0, [X22]
	0x036FFCBC LDR W8, [X0 + 0xE0]
	0x036FFCC0 CBNZ W8, 0x36FFCC8
	0x036FFCC4 BL 0x1C16DFC
	0x036FFCC8 CBZ X21, 0x36FFD64
	0x036FFCCC LDR X8, [X22]
	0x036FFCD0 MOVZ W2, 0x1
	0x036FFCD4 MOV X0, X21
	0x036FFCD8 MOV X3, X31
	0x036FFCDC LDR X8, [X8 + 0xB8]
	0x036FFCE0 LDR X1, [X8]
	0x036FFCE4 BL 0x3229F54
	0x036FFCE8 CBZ X0, 0x36FFD64
	0x036FFCEC LDR W8, [X0 + 0x18]
	0x036FFCF0 CBZ W8, 0x36FFD68
	0x036FFCF4 LDR X9, [X0 + 0x20]
	0x036FFCF8 CMP W8, 0x1
	0x036FFCFC STR X9, [X19]
	0x036FFD00 STR X31, [X20]
	0x036FFD04 B.EQ 0x36FFD20
	0x036FFD08 CMP W8, 0x2
	0x036FFD0C B.NE 0x36FFD6C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xCE2000
	010 Move X25, 0xA42000
	011 Move W8, [X24+3101]
	012 Move X25, [X25+3960]
	013 Move W22, W4
	014 Move X19, X3
	015 Move W20, W2
	016 Move X21, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3101], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W4, W22
	033 Move X0, X23
	034 Move X1, X21
	035 Move W2, W20
	036 Move X3, X19
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X30, [X31+64]
	044 Move X25, [X31+72]
	045 Call BurstString.ConvertUnsignedIntegerToString, X0, X1, X2, X3, X4
	046 Return 

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.SByte value, System.Int32 formatOptionsRaw)

Disassembly:
	0x036FFFBC AND W8, W0, 0xFFFF
	0x036FFFC0 CMP W8, 0x2C
	0x036FFFC4 B.NE 0x3700028
	0x036FFFC8 MOVZ W1, 0x1
	0x036FFFCC MOV X0, X20
	0x036FFFD0 MOV X2, X31
	0x036FFFD4 BL 0x322B484
	0x036FFFD8 ADD X1, X31, 0xC
	0x036FFFDC MOV X2, X31
	0x036FFFE0 MOV X19, X0
	0x036FFFE4 BL 0x337BDF4
	0x036FFFE8 TBZ X0, 0x0, 0x3700054
	0x036FFFEC LDR W9, [X31 + 0xC]
	0x036FFFF0 CMP W23, 0x0
	0x036FFFF4 MOVZ W8, 0x1000000
	0x036FFFF8 CSEL W8, W8, W31, NE
	0x036FFFFC UBFM W9, W9, 0x18, 0x7
	0x03700000 UBFM W10, W21, 0x10, 0x7
	0x03700004 ORR W8, W9, W8, 0x0
	0x03700008 ORR W8, W8, W10, 0x0
	0x0370000C ORR W0, W8, W22, 0x0
	0x03700010 LDP X20, X19, [X31 + 0x40]
	0x03700014 LDP X22, X21, [X31 + 0x30]
	0x03700018 LDP X30, X23, [X31 + 0x20]
	0x0370001C ADD X31, X31, 0x50
	0x03700020 RET
	0x03700024 BL 0x1C16F20
	0x03700028 ADRP X0, 0xA40000
	0x0370002C LDR X0, [X0 + 0xF90]
	0x03700030 BL 0x1C16D08
	0x03700034 MOV X19, X0
	0x03700038 ADRP X0, 0xA40000
	0x0370003C LDR X0, [X0 + 0xF98]
	0x03700040 BL 0x1C16D08
	0x03700044 MOV X2, X0
	0x03700048 MOV X0, X19
	0x0370004C MOV X1, X20
	0x03700050 B 0x3700158
	0x03700054 ADRP X0, 0xA40000
	0x03700058 LDR X0, [X0 + 0xFA0]
	0x0370005C BL 0x1C16D08
	0x03700060 MOV X20, X0
	0x03700064 ADRP X0, 0xA40000
	0x03700068 LDR X0, [X0 + 0xFA8]
	0x0370006C B 0x3700148
	0x03700070 ADRP X0, 0x9F3000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xCE2000
	010 Move X25, 0xA42000
	011 Move W8, [X24+3102]
	012 Move X25, [X25+3960]
	013 Move W22, W4
	014 Move W23, W3
	015 Move W19, W2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA42000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3102], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 And W8, W22, 255
	033 NotImplemented "Instruction CMP not yet implemented."
	034 And X3, X23, 255
	035 Move W4, W22
	036 Move X0, X21
	037 Move X1, X20
	038 Move W2, W19
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X24, [X31+16]
	044 Move X23, [X31+24]
	045 Move X30, [X31+64]
	046 Move X25, [X31+72]
	047 Call BurstString.ConvertUnsignedIntegerToString, X0, X1, X2, X3, X4
	048 Return 
	049 NotImplemented "Instruction SXTB not yet implemented."
	050 Move W4, W22
	051 Move X0, X21
	052 Move X1, X20
	053 Move W2, W19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X30, [X31+64]
	061 Move X25, [X31+72]

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Int16 value, System.Int32 formatOptionsRaw)

Disassembly:
	0x03700228 LDR X8, [X0 + 0xB8]
	0x0370022C LDR X8, [X8 + 0x8]
	0x03700230 CBZ X8, 0x37002F4
	0x03700234 LDR W9, [X8 + 0x18]
	0x03700238 CMP W21, W9
	0x0370023C B.CS 0x37002F8
	0x03700240 ADD X8, X8, W21, UXTW
	0x03700244 LDRB W8, [X8 + 0x20]
	0x03700248 ADD W0, W8, 0x18
	0x0370024C B 0x37002E8
	0x03700250 UBFM W21, W19, 0x10, 0x1F
	0x03700254 CBZ W21, 0x3700294
	0x03700258 LDR X0, [X20]
	0x0370025C LDR W8, [X0 + 0xE0]
	0x03700260 CBNZ W8, 0x370026C
	0x03700264 BL 0x1C16DFC
	0x03700268 LDR X0, [X20]
	0x0370026C LDR X8, [X0 + 0xB8]
	0x03700270 LDR X8, [X8 + 0x8]
	0x03700274 CBZ X8, 0x37002F4
	0x03700278 LDR W9, [X8 + 0x18]
	0x0370027C CMP W21, W9
	0x03700280 B.CS 0x37002F8
	0x03700284 ADD X8, X8, W21, UXTW
	0x03700288 LDRB W8, [X8 + 0x20]
	0x0370028C ADD W0, W8, 0x10
	0x03700290 B 0x37002E8
	0x03700294 LDR X0, [X20]
	0x03700298 LDR W8, [X0 + 0xE0]
	0x0370029C CBNZ W8, 0x37002A8
	0x037002A0 BL 0x1C16DFC
	0x037002A4 LDR X0, [X20]
	0x037002A8 LDR X8, [X0 + 0xB8]
	0x037002AC LDR X8, [X8 + 0x8]
	0x037002B0 CBZ X8, 0x37002F4
	0x037002B4 LDR W10, [X8 + 0x18]
	0x037002B8 UBFM W9, W19, 0x8, 0x1F
	0x037002BC CBZ W9, 0x37002D8
	0x037002C0 CMP W9, W10
	0x037002C4 B.CS 0x37002F8
	0x037002C8 ADD X8, X8, W9, UXTW
	0x037002CC LDRB W8, [X8 + 0x20]
	0x037002D0 ADD W0, W8, 0x8
	0x037002D4 B 0x37002E8
	0x037002D8 CMP W10, W19
	0x037002DC B.LS 0x37002F8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xCE1000
	010 Move X25, 0xA41000
	011 Move W8, [X24+3103]
	012 Move X25, [X25+3960]
	013 Move W22, W4
	014 Move W23, W3
	015 Move W19, W2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA41000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3103], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 And W8, W22, 255
	033 NotImplemented "Instruction CMP not yet implemented."
	034 And X3, X23, 0xFFFF
	035 Move W4, W22
	036 Move X0, X21
	037 Move X1, X20
	038 Move W2, W19
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X24, [X31+16]
	044 Move X23, [X31+24]
	045 Move X30, [X31+64]
	046 Move X25, [X31+72]
	047 Call BurstString.ConvertUnsignedIntegerToString, X0, X1, X2, X3, X4
	048 Return 
	049 NotImplemented "Instruction SXTH not yet implemented."
	050 Move W4, W22
	051 Move X0, X21
	052 Move X1, X20
	053 Move W2, W19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X30, [X31+64]
	061 Move X25, [X31+72]
	062 Call BurstString.ConvertIntegerToString, X0, X1, X2, X3, X4
	063 Return 

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Int32 value, System.Int32 formatOptionsRaw)

Disassembly:
	0x037002E0 ADD X8, X8, W19, UXTW
	0x037002E4 LDRB W0, [X8 + 0x20]
	0x037002E8 LDP X20, X19, [X31 + 0x10]
	0x037002EC LDP X30, X21, [X31], #0x20
	0x037002F0 RET
	0x037002F4 BL 0x1C16F20
	0x037002F8 BL 0x1C16F28
	0x037002FC LDR W10, [X0]
	0x03700300 LDR W9, [X1]
	0x03700304 MOV X8, X0
	0x03700308 SUBS W0, W10, W9
	0x0370030C B.EQ 0x3700314
	0x03700310 RET
	0x03700314 ADD X8, X8, 0x4
	0x03700318 ADD X9, X1, 0x4
	0x0370031C SUB W10, W10, 0x1
	0x03700320 TBNZ X10, 0x1F, 0x3700344
	0x03700324 LDR W11, [X8, W10, UXTW]
	0x03700328 LDR W12, [X9, W10, UXTW]
	0x0370032C SUB W10, W10, 0x1
	0x03700330 CMP W11, W12
	0x03700334 B.EQ 0x3700320
	0x03700338 MOVZ W8, 0x1
	0x0370033C CSNEG W0, W8, W8, HI
	0x03700340 RET
	0x03700344 MOV W0, W31
	0x03700348 RET
	0x0370034C STP X30, X23, [X31 - 0x30]!
	0x03700350 STP X22, X21, [X31 + 0x10]
	0x03700354 STP X20, X19, [X31 + 0x20]
	0x03700358 ADRP X23, 0xCE0000
	0x0370035C ADRP X22, 0xA40000
	0x03700360 LDRB W8, [X23 + 0xC2C]
	0x03700364 LDR X22, [X22 + 0xF78]
	0x03700368 MOV X19, X2
	0x0370036C MOV X20, X1
	0x03700370 MOV X21, X0
	0x03700374 TBNZ X8, 0x0, 0x370038C
	0x03700378 ADRP X0, 0xA40000
	0x0370037C LDR X0, [X0 + 0xF78]
	0x03700380 BL 0x1C16CF4
	0x03700384 MOVZ W8, 0x1
	0x03700388 STRB W8, [X23 + 0xC2C]
	0x0370038C LDR X0, [X22]
	0x03700390 LDR W22, [X20]
	0x03700394 LDR W23, [X19]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xCE1000
	010 Move X25, 0xA41000
	011 Move W8, [X24+3104]
	012 Move X25, [X25+3960]
	013 Move W22, W4
	014 Move W23, W3
	015 Move W19, W2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA41000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3104], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 And W8, W22, 255
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W3, W23
	035 Move W4, W22
	036 Move X0, X21
	037 Move X1, X20
	038 Move W2, W19
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X24, [X31+16]
	044 Move X23, [X31+24]
	045 Move X30, [X31+64]
	046 Move X25, [X31+72]
	047 Call BurstString.ConvertUnsignedIntegerToString, X0, X1, X2, X3, X4
	048 Return 
	049 Move X3, W23
	050 Move W4, W22
	051 Move X0, X21
	052 Move X1, X20
	053 Move W2, W19
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X30, [X31+64]
	061 Move X25, [X31+72]
	062 Call BurstString.ConvertIntegerToString, X0, X1, X2, X3, X4
	063 Return 

Method: System.Void Format(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Int64 value, System.Int32 formatOptionsRaw)

Disassembly:
	0x03700398 LDR W8, [X0 + 0xE0]
	0x0370039C CBNZ W8, 0x37003A4
	0x037003A0 BL 0x1C16DFC
	0x037003A4 MOV X0, X21
	0x037003A8 CMP W22, W23
	0x037003AC B.GE 0x37003BC
	0x037003B0 MOV X1, X19
	0x037003B4 MOV X2, X20
	0x037003B8 B 0x37003C4
	0x037003BC MOV X1, X20
	0x037003C0 MOV X2, X19
	0x037003C4 LDP X20, X19, [X31 + 0x20]
	0x037003C8 LDP X22, X21, [X31 + 0x10]
	0x037003CC LDP X30, X23, [X31], #0x30
	0x037003D0 B 0x37003D4
	0x037003D4 LDRSW X8, [X1], #0x4
	0x037003D8 LDRSW X11, [X2], #0x4
	0x037003DC MOV X9, X0
	0x037003E0 MOV X10, X31
	0x037003E4 STR W8, [X9], #0x4
	0x037003E8 ADD X12, X1, X8, 0x2, LSL
	0x037003EC CBZ W11, 0x3700428
	0x037003F0 UBFM X13, X11, 0x3E, 0x3D
	0x037003F4 ADD X14, X2, 0x4
	0x037003F8 MOV X11, X1
	0x037003FC LDR W15, [X11], #0x4
	0x03700400 LDR W16, [X2]
	0x03700404 MOV X2, X14
	0x03700408 SUBS X13, X13, 0x4
	0x0370040C ADD X10, X10, X15
	0x03700410 ADD X15, X10, X16
	0x03700414 UBFM X10, X15, 0x20, 0x3F
	0x03700418 STR W15, [X9], #0x4
	0x0370041C ADD X14, X14, 0x4
	0x03700420 B.NE 0x37003FC
	0x03700424 B 0x370042C
	0x03700428 MOV X11, X1
	0x0370042C CMP X12, X11
	0x03700430 B.EQ 0x3700464
	0x03700434 UBFM X12, X8, 0x3E, 0x3D
	0x03700438 ADD X12, X1, X12

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0xCE1000
	010 Move X25, 0xA41000
	011 Move W8, [X24+3105]
	012 Move X25, [X25+3960]
	013 Move W23, W4
	014 Move X19, X3
	015 Move W20, W2
	016 Move X21, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA41000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3105], W8
	027 Move X0, [X25]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 And W8, W23, 255
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W4, W23
	035 Move X0, X22
	036 Move X1, X21
	037 Move W2, W20
	038 Move X3, X19
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X24, [X31+16]
	044 Move X23, [X31+24]
	045 Move X30, [X31+64]
	046 Move X25, [X31+72]
	047 Call BurstString.ConvertUnsignedIntegerToString, X0, X1, X2, X3, X4
	048 Return 
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X24, [X31+16]
	054 Move X23, [X31+24]
	055 Move X30, [X31+64]
	056 Move X25, [X31+72]
	057 Call BurstString.ConvertIntegerToString, X0, X1, X2, X3, X4
	058 Return 

Method: System.Void ConvertUnsignedIntegerToString(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.UInt64 value, Unity.Burst.BurstString/FormatOptions options)

Disassembly:
	0x036FFE18 MOV X0, X19
	0x036FFE1C MOV X1, X31
	0x036FFE20 STP X31, X31, [X31 + 0x10]
	0x036FFE24 STR X31, [X31 + 0x8]
	0x036FFE28 BL 0x322DA44
	0x036FFE2C TBZ X0, 0x0, 0x36FFE44
	0x036FFE30 MOV W8, W31
	0x036FFE34 MOV W21, W31
	0x036FFE38 MOV W9, W31
	0x036FFE3C MOV W22, W31
	0x036FFE40 B 0x3700000
	0x036FFE44 ADRP X8, 0xA41000
	0x036FFE48 LDR X8, [X8 + 0xF78]
	0x036FFE4C LDR X0, [X8]
	0x036FFE50 LDR W8, [X0 + 0xE0]
	0x036FFE54 CBNZ W8, 0x36FFE5C
	0x036FFE58 BL 0x1C16DFC
	0x036FFE5C ADD X1, X31, 0x18
	0x036FFE60 ADD X2, X31, 0x10
	0x036FFE64 MOV X0, X19
	0x036FFE68 BL 0x36FFC74
	0x036FFE6C LDR X0, [X31 + 0x10]
	0x036FFE70 CBZ X0, 0x36FFE84
	0x036FFE74 MOV X1, X31
	0x036FFE78 BL 0x322B8DC
	0x036FFE7C MOV X19, X0
	0x036FFE80 B 0x36FFE88
	0x036FFE84 MOV X19, X31
	0x036FFE88 LDR X0, [X31 + 0x18]
	0x036FFE8C STR X19, [X31 + 0x10]
	0x036FFE90 CBZ X0, 0x36FFEA4
	0x036FFE94 MOV X1, X31
	0x036FFE98 BL 0x322B8DC
	0x036FFE9C MOV X20, X0
	0x036FFEA0 B 0x36FFEA8
	0x036FFEA4 MOV X20, X31
	0x036FFEA8 MOV X0, X19
	0x036FFEAC MOV X1, X31
	0x036FFEB0 STR X20, [X31 + 0x18]
	0x036FFEB4 STR W31, [X31 + 0xC]
	0x036FFEB8 BL 0x32277A8
	0x036FFEBC TBZ X0, 0x0, 0x36FFED0
	0x036FFEC0 MOV W21, W31
	0x036FFEC4 MOV W23, W31
	0x036FFEC8 MOV W22, W31
	0x036FFECC B 0x36FFF98
	0x036FFED0 CBZ X19, 0x3700024
	0x036FFED4 MOV X0, X19
	0x036FFED8 MOV W1, W31
	0x036FFEDC MOV X2, X31
	0x036FFEE0 BL 0x3222A1C
	0x036FFEE4 AND W8, W0, 0xFFFF
	0x036FFEE8 CMP W8, 0x58
	0x036FFEEC B.HI 0x36FFF14
	0x036FFEF0 CMP W8, 0x44
	0x036FFEF4 B.EQ 0x36FFF34
	0x036FFEF8 CMP W8, 0x47
	0x036FFEFC B.EQ 0x36FFF3C
	0x036FFF00 CMP W8, 0x58
	0x036FFF04 B.NE 0x3700130
	0x036FFF08 MOV W23, W31
	0x036FFF0C MOVZ W22, 0x3
	0x036FFF10 B 0x36FFF5C
	0x036FFF14 CMP W8, 0x64
	0x036FFF18 B.EQ 0x36FFF48
	0x036FFF1C CMP W8, 0x67
	0x036FFF20 B.EQ 0x36FFF54
	0x036FFF24 CMP W8, 0x78
	0x036FFF28 B.NE 0x3700130
	0x036FFF2C MOVZ W22, 0x3
	0x036FFF30 B 0x36FFF58
	0x036FFF34 MOV W23, W31
	0x036FFF38 B 0x36FFF4C
	0x036FFF3C MOV W23, W31
	0x036FFF40 MOV W22, W31
	0x036FFF44 B 0x36FFF5C
	0x036FFF48 MOVZ W23, 0x1
	0x036FFF4C MOVZ W22, 0x1
	0x036FFF50 B 0x36FFF5C
	0x036FFF54 MOV W22, W31
	0x036FFF58 MOVZ W23, 0x1
	0x036FFF5C LDR W8, [X19 + 0x10]
	0x036FFF60 CMP W8, 0x2
	0x036FFF64 B.GE 0x36FFF70
	0x036FFF68 MOV W21, W31
	0x036FFF6C B 0x36FFF98
	0x036FFF70 MOVZ W1, 0x1
	0x036FFF74 MOV X0, X19
	0x036FFF78 MOV X2, X31
	0x036FFF7C BL 0x322B484
	0x036FFF80 ADD X1, X31, 0x8
	0x036FFF84 MOV X2, X31
	0x036FFF88 MOV X21, X0
	0x036FFF8C BL 0x339A090
	0x036FFF90 TBZ X0, 0x0, 0x3700070
	0x036FFF94 LDR W21, [X31 + 0x8]
	0x036FFF98 MOV X0, X20
	0x036FFF9C MOV X1, X31
	0x036FFFA0 BL 0x32277A8
	0x036FFFA4 TBNZ X0, 0x0, 0x36FFFEC
	0x036FFFA8 CBZ X20, 0x3700024
	0x036FFFAC MOV X0, X20
	0x036FFFB0 MOV W1, W31
	0x036FFFB4 MOV X2, X31
	0x036FFFB8 BL 0x3222A1C

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 64
	015 Move [X29-36], W2
	016 Move [X29-56], X0
	017 Move [X29-48], X1
	018 NotImplemented "Instruction MRS not yet implemented."
	019 Move X8, [X25+40]
	020 Move X19, 0xCE2000
	021 Move X22, X4
	022 Move X23, X3
	023 Move [X29-8], X8
	024 Move W8, [X19+3106]
	025 Move X9, X4
	026 ShiftRight X9, 16
	027 And X9, X9, 0x7FFFFFFF
	028 Move [X29-64], X9
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {38}
	033 Move X0, 0xA42000
	034 Move X0, [X0+3960]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X19+3106], W8
	038 Move X27, 0xA42000
	039 Move X27, [X27+3960]
	040 And W8, W22, 255
	041 Move W9, 10
	042 Move W10, 16
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSEL not yet implemented."
	045 Move W8, 1
	046 Move X9, X23
	047 Move [X29-32], X31
	048 Move [X29-24], X31
	049 Move [X29-16], X31
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction UDIV not yet implemented."
	052 Add W8, W8, 1
	053 Move X2, W8
	054 Subtract W19, W8, 2
	055 Compare W8, 0
	056 JumpIfEqual {62}
	057 Add X10, X2, 15
	058 Add X9, X31, 0
	059 And X10, X10, 0xFFFFFFFF
	060 Subtract X24, X9, X10
	061 Add X31, X24, 0
	062 Move X24, X31
	063 Move X0, X24
	064 Move W1, W31
	065 Subtract W20, W8, 1
	066 Call 0x3EB2B10
	067 And X31, X22, 0xFFFFFFFF
	068 Move W8, 87
	069 Move W9, 55
	070 NotImplemented "Instruction CSEL not yet implemented."
	071 Move X0, [X27]
	072 Subtract W26, W19, 1
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 NotImplemented "Instruction UDIV not yet implemented."
	078 NotImplemented "Instruction MSUB not yet implemented."
	079 Add W10, W21, W9
	080 Add W11, W9, 48
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSEL not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move [X24], W9
	085 Move W19, W26
	086 Move X23, X8
	087 Move [X24], W31
	088 Move X0, [X27]
	089 Move [X29-32], X24
	090 Move [X29-24], W31
	091 Move [X29-20], W20
	092 Move [X29-16], W20
	093 NotImplemented "Instruction STURB not yet implemented."
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 Move W8, [X0+224]
	096 And W23, W9, 255
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X0, [X29-56]
	101 Move X1, [X29-48]
	102 NotImplemented "Instruction LDUR not yet implemented."
	103 Move W5, W22
	104 NotImplemented "Instruction BFM not yet implemented."
	105 Subtract X3, X29, 32
	106 Move W4, W23
	107 Call BurstString.FormatNumber, X0, X1, X2, X3, X4, X5
	108 Move X8, [X25+40]
	109 NotImplemented "Instruction LDUR not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X31, X29, 0
	112 Move X20, [X31+80]
	113 Move X19, [X31+88]
	114 Move X22, [X31+64]
	115 Move X21, [X31+72]
	116 Move X24, [X31+48]
	117 Move X23, [X31+56]
	118 Move X26, [X31+32]
	119 Move X25, [X31+40]
	120 Move X28, [X31+16]
	121 Move X27, [X31+24]
	122 Move X29, [X31+96]
	123 Move X30, [X31+104]
	124 Return 
	125 Call 0x3EB2B20

Method: System.Int32 GetLengthIntegerToString(System.Int64 value, System.Int32 basis, System.Int32 zeroPadding)

Disassembly:
	0x03700734 LDR W15, [X14]
	0x03700738 SUBS X13, X13, 0x4
	0x0370073C MADD X9, X15, X12, X9
	0x03700740 STR W9, [X14]
	0x03700744 UBFM X9, X9, 0x20, 0x3F
	0x03700748 MOV X14, X11
	0x0370074C ADD X11, X11, 0x4
	0x03700750 B.NE 0x3700734
	0x03700754 CBZ X9, 0x3700768
	0x03700758 STR W9, [X8, X10, LSL]
	0x0370075C LDR W8, [X0]

ISIL:
	001 Move W8, W31
	002 Move X9, W1
	003 Move X10, X0
	004 NotImplemented "Instruction SDIV not yet implemented."
	005 Add W8, W8, 1
	006 Compare X10, 0
	007 JumpIfNotEqual {4}
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSEL not yet implemented."
	010 Move X9, X0
	011 ShiftRight X9, 63
	012 And X9, X9, 0x7FFFFFFF
	013 Add W0, W8, W9
	014 Return X0

Method: System.Void ConvertIntegerToString(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Int64 value, Unity.Burst.BurstString/FormatOptions options)

Disassembly:
	0x03700074 LDR X0, [X0 + 0xAC8]
	0x03700078 BL 0x1C16D08
	0x0370007C MOVZ W1, 0x5
	0x03700080 BL 0x1C16D6C
	0x03700084 MOV X20, X0
	0x03700088 BL 0x19903C0
	0x0370008C ADRP X0, 0xA40000
	0x03700090 LDR X0, [X0 + 0xFB0]
	0x03700094 BL 0x1C16D08
	0x03700098 MOV X2, X0
	0x0370009C MOV X0, X20
	0x037000A0 MOV X1, X31
	0x037000A4 BL 0x1993444
	0x037000A8 MOV X0, X20
	0x037000AC BL 0x19903C0
	0x037000B0 MOVZ W1, 0x1
	0x037000B4 MOV X0, X20
	0x037000B8 MOV X2, X19
	0x037000BC BL 0x1993444
	0x037000C0 MOV X0, X20
	0x037000C4 BL 0x19903C0
	0x037000C8 ADRP X0, 0xA40000
	0x037000CC LDR X0, [X0 + 0xFB8]
	0x037000D0 BL 0x1C16D08
	0x037000D4 MOV X2, X0
	0x037000D8 MOVZ W1, 0x2
	0x037000DC MOV X0, X20
	0x037000E0 BL 0x1993444
	0x037000E4 MOV X0, X20
	0x037000E8 BL 0x19903C0
	0x037000EC MOVZ W1, 0x3
	0x037000F0 MOV X0, X20
	0x037000F4 MOV X2, X21
	0x037000F8 BL 0x1993444
	0x037000FC MOV X0, X20
	0x03700100 BL 0x19903C0
	0x03700104 ADRP X0, 0x9FC000
	0x03700108 LDR X0, [X0 + 0x790]
	0x0370010C BL 0x1C16D08
	0x03700110 MOV X2, X0
	0x03700114 MOVZ W1, 0x4
	0x03700118 MOV X0, X20
	0x0370011C BL 0x1993444
	0x03700120 MOV X0, X20
	0x03700124 MOV X1, X31
	0x03700128 BL 0x32278CC
	0x0370012C B 0x3700160
	0x03700130 ADRP X0, 0xA40000
	0x03700134 LDR X0, [X0 + 0xFC0]
	0x03700138 BL 0x1C16D08
	0x0370013C MOV X20, X0
	0x03700140 ADRP X0, 0xA40000
	0x03700144 LDR X0, [X0 + 0xFC8]
	0x03700148 BL 0x1C16D08
	0x0370014C MOV X2, X0
	0x03700150 MOV X0, X20
	0x03700154 MOV X1, X19
	0x03700158 MOV X3, X31
	0x0370015C BL 0x32274B8
	0x03700160 MOV X19, X0
	0x03700164 ADRP X0, 0x9FB000
	0x03700168 LDR X0, [X0 + 0x578]
	0x0370016C BL 0x1C16D08
	0x03700170 BL 0x1C16F10
	0x03700174 MOV X1, X19
	0x03700178 MOV X2, X31
	0x0370017C MOV X20, X0
	0x03700180 BL 0x3314A68
	0x03700184 ADRP X0, 0xA40000
	0x03700188 LDR X0, [X0 + 0xFD0]
	0x0370018C BL 0x1C16D08
	0x03700190 MOV X1, X0
	0x03700194 MOV X0, X20
	0x03700198 BL 0x1C16DEC
	0x0370019C AND W8, W4, 0x1
	0x037001A0 STRB W1, [X0]
	0x037001A4 STRB W2, [X0 + 0x1]
	0x037001A8 STRB W3, [X0 + 0x2]
	0x037001AC STRB W8, [X0 + 0x3]
	0x037001B0 RET
	0x037001B4 LDRB W8, [X0, W1, SXTW]
	0x037001B8 EOR W9, W2, 0x1
	0x037001BC CMP W8, 0x0
	0x037001C0 CSET W10, NE
	0x037001C4 CMP W8, 0x34
	0x037001C8 AND W8, W10, W9, 0x0
	0x037001CC CSET W9, HI
	0x037001D0 AND W0, W9, W8, 0x0
	0x037001D4 RET
	0x037001D8 STP X30, X21, [X31 - 0x20]!
	0x037001DC STP X20, X19, [X31 + 0x10]
	0x037001E0 ADRP X20, 0xCE0000
	0x037001E4 LDRB W8, [X20 + 0xC2B]
	0x037001E8 MOV W19, W0
	0x037001EC TBNZ X8, 0x0, 0x3700204
	0x037001F0 ADRP X0, 0xA40000
	0x037001F4 LDR X0, [X0 + 0xF78]
	0x037001F8 BL 0x1C16CF4
	0x037001FC MOVZ W8, 0x1
	0x03700200 STRB W8, [X20 + 0xC2B]
	0x03700204 ADRP X20, 0xA40000
	0x03700208 LDR X20, [X20 + 0xF78]
	0x0370020C UBFM W21, W19, 0x18, 0x1F
	0x03700210 CBZ W21, 0x3700250
	0x03700214 LDR X0, [X20]
	0x03700218 LDR W8, [X0 + 0xE0]
	0x0370021C CBNZ W8, 0x3700228
	0x03700220 BL 0x1C16DFC
	0x03700224 LDR X0, [X20]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Add X29, X31, 0
	014 Subtract X31, X31, 80
	015 Move [X29-44], W2
	016 Move [X29-64], X0
	017 Move [X29-56], X1
	018 NotImplemented "Instruction MRS not yet implemented."
	019 Move [X29-40], X8
	020 Move X8, [X8+40]
	021 Move X19, 0xCE1000
	022 Move X22, X4
	023 Move X26, X3
	024 Move [X29-8], X8
	025 Move W8, [X19+3107]
	026 Move X9, X4
	027 ShiftRight X9, 16
	028 And X9, X9, 0x7FFFFFFF
	029 Move [X29-72], X9
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {39}
	034 Move X0, 0xA41000
	035 Move X0, [X0+3960]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X19+3107], W8
	039 Move X27, 0xA41000
	040 Move X27, [X27+3960]
	041 And W8, W22, 255
	042 Move W9, 10
	043 Move W10, 16
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move W8, 1
	047 Move X9, X26
	048 Move [X29-32], X31
	049 Move [X29-24], X31
	050 Move [X29-16], X31
	051 NotImplemented "Instruction SDIV not yet implemented."
	052 Add W8, W8, 1
	053 Compare X9, 0
	054 JumpIfNotEqual {51}
	055 Move X2, W8
	056 Subtract W19, W8, 2
	057 Compare W8, 0
	058 JumpIfEqual {64}
	059 Add X10, X2, 15
	060 Add X9, X31, 0
	061 And X10, X10, 0xFFFFFFFF
	062 Subtract X24, X9, X10
	063 Add X31, X24, 0
	064 Move X24, X31
	065 Move X0, X24
	066 Move W1, W31
	067 Subtract W20, W8, 1
	068 Call 0x3EB2B10
	069 And X31, X22, 0xFFFFFFFF
	070 Move W8, 87
	071 Move W9, 55
	072 NotImplemented "Instruction CSEL not yet implemented."
	073 Move X23, X26
	074 Move X0, [X27]
	075 Subtract W25, W19, 1
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 NotImplemented "Instruction SDIV not yet implemented."
	081 NotImplemented "Instruction MSUB not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 NotImplemented "Instruction CSNEG not yet implemented."
	084 Add W10, W21, W9
	085 Add W11, W9, 48
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSEL not yet implemented."
	088 Move [X24], W9
	089 Move W19, W25
	090 Move X23, X8
	091 Compare X8, 0
	092 JumpIfNotEqual {74}
	093 Move [X24], W31
	094 Move X0, [X27]
	095 Move X8, X26
	096 ShiftRight X8, 63
	097 And X8, X8, 0x7FFFFFFF
	098 Move [X29-32], X24
	099 Move [X29-24], W31
	100 Move [X29-20], W20
	101 Move [X29-16], W20
	102 NotImplemented "Instruction STURB not yet implemented."
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Move W8, [X0+224]
	105 And W23, W9, 255
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X0, [X29-64]
	110 Move X1, [X29-56]
	111 NotImplemented "Instruction LDUR not yet implemented."
	112 Move W5, W22
	113 NotImplemented "Instruction BFM not yet implemented."
	114 Subtract X3, X29, 32
	115 Move W4, W23
	116 Call BurstString.FormatNumber, X0, X1, X2, X3, X4, X5
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 Move X8, [X8+40]
	119 NotImplemented "Instruction LDUR not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Add X31, X29, 0
	122 Move X20, [X31+80]
	123 Move X19, [X31+88]
	124 Move X22, [X31+64]
	125 Move X21, [X31+72]
	126 Move X24, [X31+48]
	127 Move X23, [X31+56]
	128 Move X26, [X31+32]
	129 Move X25, [X31+40]
	130 Move X28, [X31+16]
	131 Move X27, [X31+24]
	132 Move X29, [X31+96]
	133 Move X30, [X31+104]
	134 Return 
	135 Call 0x3EB2B20

Method: System.Void FormatNumber(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, ref Unity.Burst.BurstString/NumberBuffer number, System.Int32 nMaxDigits, Unity.Burst.BurstString/FormatOptions options)

Disassembly:
	0x037004C0 LDR W22, [X20]
	0x037004C4 LDR W23, [X19]
	0x037004C8 LDR W8, [X0 + 0xE0]
	0x037004CC CBNZ W8, 0x37004D4
	0x037004D0 BL 0x1C16DFC
	0x037004D4 MOV X0, X21
	0x037004D8 CMP W22, W23
	0x037004DC B.GE 0x37004EC
	0x037004E0 MOV X1, X19
	0x037004E4 MOV X2, X20
	0x037004E8 B 0x37004F4
	0x037004EC MOV X1, X20
	0x037004F0 MOV X2, X19
	0x037004F4 LDP X20, X19, [X31 + 0x20]
	0x037004F8 LDP X22, X21, [X31 + 0x10]
	0x037004FC LDP X30, X23, [X31], #0x30
	0x03700500 B 0x3700504
	0x03700504 LDR W12, [X1]
	0x03700508 LDR W13, [X2]
	0x0370050C ADD W8, W13, W12
	0x03700510 CMP W8, 0x1
	0x03700514 B.LT 0x3700578
	0x03700518 ADRP X11, 0xFFFFFFFFFD3EA000
	0x0370051C LDR V0, [X11 + 0x79]
	0x03700520 MOV W10, W8
	0x03700524 ADD X12, X10, 0x1
	0x03700528 SUB X13, X10, 0x1
	0x0370052C MOVZ W11, 0x2
	0x03700530 ADD X9, X0, 0x4
	0x03700534 AND X10, X12, 0x0
	0x03700538 UNIMPLEMENTED
	0x0370053C UNIMPLEMENTED
	0x00000000 INVALID
	0x03700544 UNIMPLEMENTED
	0x03700548 FMOV W11, S3
	0x0370054C TBZ X11, 0x0, 0x3700554
	0x03700550 STR W31, [X9]
	0x03700554 UNIMPLEMENTED
	0x03700558 TBZ X11, 0x0, 0x3700560
	0x0370055C STR W31, [X9 + 0x4]
	0x00000000 INVALID
	0x03700564 SUBS X10, X10, 0x2
	0x03700568 ADD X9, X9, 0x8
	0x0370056C B.NE 0x3700540
	0x03700570 LDR W12, [X1]
	0x03700574 LDR W13, [X2]
	0x03700578 ADD X9, X0, 0x4
	0x0370057C CBZ W13, 0x37005DC
	0x03700580 ADD X10, X1, 0x4
	0x03700584 ADD X11, X2, 0x4
	0x03700588 ADD X12, X10, W12, 0x2, SXTW
	0x0370058C ADD X13, X11, W13, 0x2, SXTW
	0x03700590 MOV X14, X9
	0x03700594 LDR W15, [X11]
	0x03700598 CBZ W15, 0x37005CC
	0x0370059C MOV X1, X31
	0x037005A0 MOV X16, X14
	0x037005A4 MOV X17, X10
	0x037005A8 LDR W2, [X16]
	0x037005AC LDR W3, [X17], #0x4
	0x037005B0 ADD X1, X1, X2
	0x037005B4 MADD X2, X3, X15, X1
	0x037005B8 CMP X17, X12
	0x037005BC UBFM X1, X2, 0x20, 0x3F
	0x037005C0 STR W2, [X16], #0x4
	0x037005C4 B.NE 0x37005A8
	0x037005C8 STR W1, [X16]
	0x037005CC ADD X11, X11, 0x4
	0x037005D0 CMP X13, X11
	0x037005D4 ADD X14, X14, 0x4
	0x037005D8 B.NE 0x3700594
	0x037005DC SUBS W10, W8, 0x1
	0x037005E0 B.LT 0x37005F0
	0x037005E4 LDR W9, [X9, W10, SXTW]
	0x037005E8 CBNZ W9, 0x37005F0
	0x037005EC MOV W8, W10
	0x037005F0 STR W8, [X0]
	0x037005F4 RET
	0x037005F8 MOV X11, X1
	0x037005FC LDRSW X9, [X11], #0x4
	0x03700600 CBZ W9, 0x370064C
	0x03700604 MOV X8, X31
	0x03700608 UBFM X10, X9, 0x3E, 0x3D
	0x0370060C ADD X9, X0, 0x4
	0x03700610 MOV W12, W2
	0x03700614 ADD X13, X11, 0x4
	0x03700618 LDR W14, [X11]
	0x0370061C MOV X11, X13
	0x03700620 SUBS X10, X10, 0x4
	0x03700624 ADD X13, X13, 0x4
	0x03700628 MADD X8, X14, X12, X8
	0x0370062C STR W8, [X9], #0x4
	0x03700630 UBFM X8, X8, 0x20, 0x3F
	0x03700634 B.NE 0x3700618
	0x03700638 CBZ W8, 0x370064C
	0x0370063C STR W8, [X9]
	0x03700640 LDR W8, [X1]
	0x03700644 ADD W8, W8, 0x1
	0x03700648 B 0x3700650
	0x0370064C LDR W8, [X1]
	0x03700650 STR W8, [X0]
	0x03700654 RET
	0x03700658 MOV X10, X1
	0x0370065C LDRSW X9, [X10], #0x4
	0x03700660 CBZ W9, 0x3700698
	0x03700664 MOV W8, W31
	0x03700668 UBFM X11, X9, 0x3E, 0x3D
	0x0370066C ADD X9, X0, 0x4
	0x03700670 ADD X12, X10, 0x4
	0x03700674 LDR W13, [X10]
	0x03700678 MOV X10, X12
	0x0370067C SUBS X11, X11, 0x4
	0x03700680 ADD X12, X12, 0x4
	0x03700684 ORR W14, W8, W13, 0x1
	0x03700688 UBFM W8, W13, 0x1F, 0x1F
	0x0370068C STR W14, [X9], #0x4
	0x03700690 B.NE 0x3700674
	0x03700694 TBNZ X13, 0x1F, 0x37006A0
	0x03700698 LDR W8, [X1]
	0x0370069C B 0x37006AC
	0x037006A0 STR W8, [X9]
	0x037006A4 LDR W8, [X1]
	0x037006A8 ADD W8, W8, 0x1
	0x037006AC STR W8, [X0]
	0x037006B0 RET
	0x037006B4 MOV X8, X0
	0x037006B8 LDRSW X10, [X8], #0x4
	0x037006BC CBZ W10, 0x37006F8
	0x037006C0 UBFM X10, X10, 0x3E, 0x3D
	0x037006C4 MOV W9, W31
	0x037006C8 ADD X11, X8, 0x4
	0x037006CC MOV X12, X10
	0x037006D0 MOV X13, X8
	0x037006D4 LDR W14, [X13]
	0x037006D8 SUBS X12, X12, 0x4
	0x037006DC ORR W15, W9, W14, 0x1
	0x037006E0 UBFM W9, W14, 0x1F, 0x1F
	0x037006E4 STR W15, [X13]
	0x037006E8 MOV X13, X11
	0x037006EC ADD X11, X11, 0x4
	0x037006F0 B.NE 0x37006D4
	0x037006F4 TBNZ X14, 0x1F, 0x37006FC
	0x037006F8 RET
	0x037006FC STR W9, [X8, X10, LSL]
	0x03700700 LDR W8, [X0]
	0x03700704 ADD W8, W8, 0x1
	0x03700708 STR W8, [X0]
	0x0370070C RET
	0x03700710 MOV X8, X0
	0x03700714 LDRSW X10, [X8], #0x4
	0x03700718 CBZ W10, 0x3700768
	0x0370071C UBFM X10, X10, 0x3E, 0x3D
	0x03700720 MOV X9, X31
	0x03700724 ADD X11, X8, 0x4
	0x03700728 MOVZ W12, 0xA
	0x0370072C MOV X13, X10
	0x03700730 MOV X14, X8

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X25, 0xCE1000
	014 Move W8, [X25+3108]
	015 Move X23, X5
	016 Move W24, W4
	017 Move X22, X3
	018 Move W19, W2
	019 Move X20, X1
	020 Move X21, X0
	021 Move X26, X5
	022 ShiftRight X26, 8
	023 And X26, X26, 0x7FFFFFFF
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0xA41000
	029 Move X0, [X0+3960]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X25+3108], W8
	033 Move X27, 0xA41000
	034 Move W25, [X22+8]
	035 Move X27, [X27+3960]
	036 And W31, W23, 255
	037 Compare W25, 0
	038 Invalid "Jump target not found in method."
	039 And W8, W23, 255
	040 Subtract W8, W8, 1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W28, W23
	043 Move W8, [X22+12]
	044 Move X0, [X27]
	045 Move W9, W23
	046 ShiftRight W9, 16
	047 And W9, W9, 0x7FFFFF
	048 Move W10, [X22+20]
	049 Subtract W11, W9, W8
	050 Move W12, [X0+224]
	051 NotImplemented "Instruction CSEL not yet implemented."
	052 And W8, W28, 255
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CSET not yet implemented."
	056 Or W24, W10, W8
	057 Compare W12, 0
	058 JumpIfNotEqual {62}
	059 Move W25, W4
	060 Call 0x1C17DFC
	061 Move W4, W25
	062 NotImplemented "Instruction SBFM not yet implemented."
	063 Add W25, W24, W29
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction SXTB not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add W8, W24, W29
	068 Subtract W8, W23, W8
	069 Move W9, 32
	070 NotImplemented "Instruction LDRSW not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add W11, W10, 1
	073 Subtract W8, W8, 1
	074 Move [X20], W11
	075 Move [X10], W9
	076 Move X0, [X27]
	077 Move W8, [X0+224]
	078 Compare W8, 0
	079 JumpIfNotEqual {83}
	080 Move W24, W4
	081 Call 0x1C17DFC
	082 Move W4, W24
	083 And W8, W28, 255
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CSET not yet implemented."
	086 Move X0, X21
	087 Move X1, X20
	088 Move W2, W19
	089 Move X3, X22
	090 Call BurstString.FormatDecimalOrHexadecimal, X0, X1, X2, X3, X4, X5
	091 Move X0, X21
	092 Move X1, X20
	093 Move W2, W19
	094 Move W3, W23
	095 Move W8, W23
	096 ShiftRight W8, 16
	097 And W8, W8, 0x7FFFFF
	098 Compare W8, 0
	099 JumpIfEqual {176}
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move W24, [X22+12]
	102 Move X0, [X27]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 NotImplemented "Instruction CMP not yet implemented."
	108 NotImplemented "Instruction CSET not yet implemented."
	109 Move X0, X22
	110 Move W1, W24
	111 NotImplemented "Instruction SBFM not yet implemented."
	112 Call BurstString.RoundNumber, X0, X1, X2
	113 Move X0, X22
	114 Move W1, W24
	115 Call BurstString.GetLengthForFormatGeneral, X0, X1
	116 Move W25, W0
	117 NotImplemented "Instruction CMP not yet implemented."
	118 NotImplemented "Instruction SXTB not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Subtract W8, W26, W25
	121 Move W9, 32
	122 NotImplemented "Instruction LDRSW not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Add W11, W10, 1
	125 Subtract W8, W8, 1
	126 Move [X20], W11
	127 Move [X10], W9
	128 Move X0, [X27]
	129 And X31, X23, 0xFFFFFFFF
	130 Move W9, 101
	131 Move W10, 69
	132 Move W8, [X0+224]
	133 NotImplemented "Instruction CSEL not yet implemented."
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move X0, X21
	138 Move X1, X20
	139 Move W2, W19
	140 Move X3, X22
	141 Move W4, W24
	142 Move W5, W23
	143 Call BurstString.FormatGeneral, X0, X1, X2, X3, X4, X5
	144 Move X0, X21
	145 Move X1, X20
	146 Move W2, W19
	147 Move W3, W26
	148 Move W4, W25
	149 Move X20, [X31+80]
	150 Move X19, [X31+88]
	151 Move X22, [X31+64]
	152 Move X21, [X31+72]
	153 Move X24, [X31+48]
	154 Move X23, [X31+56]
	155 Move X26, [X31+32]
	156 Move X25, [X31+40]
	157 Move X28, [X31+16]
	158 Move X27, [X31+24]
	159 Move X29, [X31+96]
	160 Move X30, [X31+104]
	161 Call BurstString.AlignRight, X0, X1, X2, X3, X4
	162 Return 
	163 Move X20, [X31+80]
	164 Move X19, [X31+88]
	165 Move X22, [X31+64]
	166 Move X21, [X31+72]
	167 Move X24, [X31+48]
	168 Move X23, [X31+56]
	169 Move X26, [X31+32]
	170 Move X25, [X31+40]
	171 Move X28, [X31+16]
	172 Move X27, [X31+24]
	173 Move X29, [X31+96]
	174 Move X30, [X31+104]
	175 Return 
	176 Move W28, 1

Method: System.Void FormatDecimalOrHexadecimal(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, ref Unity.Burst.BurstString/NumberBuffer number, System.Int32 zeroPadding, System.Boolean outputPositiveSign)

Disassembly:
	0x03700760 ADD W8, W8, 0x1
	0x03700764 STR W8, [X0]
	0x03700768 RET
	0x0370076C SUB X31, X31, 0xC0
	0x03700770 STP X30, X21, [X31 + 0xA0]
	0x03700774 STP X20, X19, [X31 + 0xB0]
	0x03700778 MRS X21, 0xC000
	0x0370077C MOV X19, X8
	0x03700780 LDR X8, [X21 + 0x28]
	0x03700784 MOV W20, W0
	0x03700788 ADD X0, X31, 0x8
	0x0370078C MOVZ W2, 0x90
	0x03700790 MOV W1, W31
	0x03700794 STR X8, [X31 + 0x98]
	0x03700798 BL 0x3EB1B10
	0x0370079C CMP W20, 0x4
	0x037007A0 B.HI 0x37008C0
	0x037007A4 ADRP X9, 0xFFFFFFFFFD497000
	0x037007A8 MOV W8, W20
	0x037007AC ADD X9, X9, 0x826
	0x037007B0 ADR X10, 0x10
	0x037007B4 LDRB W11, [X9, X8, LSL]
	0x037007B8 ADD X10, X10, X11, 0x2, LSL
	0x037007BC BR X10
	0x037007C0 ADRP X8, 0xFFFFFFFFFD3ED000
	0x037007C4 LDR V0, [X8 + 0xB80]
	0x037007C8 B 0x37008B8
	0x037007CC ADRP X8, 0xFFFFFFFFFD3ED000
	0x037007D0 MOVZ X10, 0x9909
	0x037007D4 LDR V0, [X8 + 0xE68]
	0x037007D8 MOVZ X8, 0xE42F
	0x037007DC MOVK X10, 0x3DF0000
	0x037007E0 MOVK X8, 0x23740000
	0x037007E4 MOVZ X9, 0x3E01
	0x037007E8 MOVK X10, 0x38FD
	0x037007EC MOVK X8, 0xF5EC
	0x037007F0 MOVK X9, 0x2E950000
	0x037007F4 MOVK X10, 0xF150000
	0x037007F8 MOVK X8, 0xD3CF0000
	0x037007FC STP X31, X9, [X31 + 0x10]

ISIL:
	001 Move W8, [X3+20]
	002 Compare W8, 0
	003 JumpIfEqual {7}
	004 Move W8, [X1]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W9, 45
	007 Move TEMP, X5
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {17}
	011 Move W8, [X1]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W9, 43
	014 Add W10, W8, 1
	015 Move [X1], W10
	016 Move [X0], W9
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W8, 48
	019 NotImplemented "Instruction LDRSW not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Add W10, W9, 1
	022 Subtract W4, W4, 1
	023 Move [X1], W10
	024 Move [X9], W8
	025 Move W8, [X3+12]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X9, [X3]
	028 NotImplemented "Instruction LDRSW not yet implemented."
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Add W11, W10, 1
	031 Move [X1], W11
	032 Move W11, [X9+1]
	033 Subtract X8, X8, 1
	034 Move [X10], W11
	035 Return 

Method: System.Byte ValueToIntegerChar(System.Int32 value, System.Boolean uppercase)

Disassembly:
	0x03700464 CBZ X10, 0x3700474
	0x03700468 MOVZ W10, 0x1
	0x0370046C ADD W8, W8, 0x1
	0x03700470 STR W10, [X9]
	0x03700474 STR W8, [X0]
	0x03700478 RET
	0x0370047C STP X30, X23, [X31 - 0x30]!
	0x03700480 STP X22, X21, [X31 + 0x10]
	0x03700484 STP X20, X19, [X31 + 0x20]
	0x03700488 ADRP X23, 0xCE0000
	0x0370048C ADRP X22, 0xA40000
	0x03700490 LDRB W8, [X23 + 0xC2D]
	0x03700494 LDR X22, [X22 + 0xF78]
	0x03700498 MOV X19, X2
	0x0370049C MOV X20, X1
	0x037004A0 MOV X21, X0
	0x037004A4 TBNZ X8, 0x0, 0x37004BC

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSNEG not yet implemented."
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 And W31, W1, 1
	006 Move W9, 97
	007 Move W10, 65
	008 NotImplemented "Instruction CSEL not yet implemented."
	009 Add W8, W8, W9
	010 Add W0, W8, 246
	011 Return X0
	012 Add W0, W8, 48
	013 Return X0
	014 Move W0, 63
	015 Return X0

Method: System.Void OptsSplit(System.String fullFormat, out System.String padding, out System.String format)

Disassembly:
	0x03700C74 ADD X1, X31, 0x128
	0x03700C78 MOVZ W2, 0x90
	0x03700C7C BL 0x3EB1AC0
	0x03700C80 UBFM W21, W21, 0x1, 0x1F
	0x03700C84 ADD W20, W20, 0x1
	0x03700C88 CBNZ W21, 0x3700C30
	0x03700C8C ADD X1, X31, 0x1B8
	0x03700C90 MOVZ W2, 0x90
	0x03700C94 MOV X0, X19
	0x03700C98 BL 0x3EB1AC0
	0x03700C9C LDR X8, [X22 + 0x28]
	0x03700CA0 LDR X9, [X31 + 0x248]
	0x03700CA4 CMP X8, X9
	0x03700CA8 B.NE 0x3700CCC
	0x03700CAC ADD X31, X31, 0x250
	0x03700CB0 LDP X20, X19, [X31 + 0x30]
	0x03700CB4 LDP X22, X21, [X31 + 0x20]
	0x03700CB8 LDP X24, X23, [X31 + 0x10]
	0x03700CBC LDP X29, X30, [X31], #0x40
	0x03700CC0 RET
	0x03700CC4 BL 0x1C16F20
	0x03700CC8 BL 0x1C16F28
	0x03700CCC BL 0x3EB1B20
	0x03700CD0 ADD W8, W1, 0x1F
	0x03700CD4 CMP W1, 0x0
	0x03700CD8 CSEL W8, W8, W1, LT
	0x03700CDC ADDS W31, W1, 0x1F
	0x03700CE0 SBFM X8, X8, 0x5, 0x1F
	0x03700CE4 B.LT 0x3700D08
	0x03700CE8 MOV X10, X31
	0x03700CEC ADD X9, X0, 0x4
	0x03700CF0 MOVZ W11, 0x1
	0x03700CF4 STR W31, [X9, X10, LSL #2]
	0x03700CF8 MOV W10, W11
	0x03700CFC CMP X10, X8
	0x03700D00 ADD W11, W11, 0x1
	0x03700D04 B.LE 0x3700CF4
	0x03700D08 ADD W9, W8, 0x1
	0x03700D0C STR W9, [X0]
	0x03700D10 ADD X8, X0, X8, 0x2, LSL
	0x03700D14 LDR W9, [X8 + 0x4]
	0x03700D18 MOVZ W10, 0x1
	0x03700D1C LSLV W10, W10, W1
	0x03700D20 ORR W9, W9, W10, 0x0
	0x03700D24 STR W9, [X8 + 0x4]
	0x03700D28 RET
	0x03700D2C STR X30, [X31 - 0x50]!
	0x03700D30 STP X26, X25, [X31 + 0x10]
	0x03700D34 STP X24, X23, [X31 + 0x20]
	0x03700D38 STP X22, X21, [X31 + 0x30]
	0x03700D3C STP X20, X19, [X31 + 0x40]
	0x03700D40 ADRP X20, 0xCE0000
	0x03700D44 LDRB W8, [X20 + 0xC30]
	0x03700D48 MOV X21, X1
	0x03700D4C MOV X19, X0
	0x03700D50 TBNZ X8, 0x0, 0x3700D68
	0x03700D54 ADRP X0, 0xA40000
	0x03700D58 LDR X0, [X0 + 0xF78]
	0x03700D5C BL 0x1C16CF4
	0x03700D60 MOVZ W8, 0x1
	0x03700D64 STRB W8, [X20 + 0xC30]
	0x03700D68 LDR W26, [X21]
	0x03700D6C LDR W10, [X19]
	0x03700D70 CMP W10, W26
	0x03700D74 B.GE 0x3700D80
	0x03700D78 MOV W20, W31
	0x03700D7C B 0x3700ED8
	0x03700D80 SXTW X9, W26
	0x03700D84 UBFM X11, X9, 0x3E, 0x3D
	0x03700D88 ADD X23, X21, 0x4
	0x03700D8C SUB X8, X11, 0x4
	0x03700D90 ADD X24, X8, X23
	0x03700D94 ADD X22, X19, 0x4
	0x03700D98 LDR W12, [X24]
	0x03700D9C LDR W13, [X8, X22, LSL]
	0x03700DA0 ADRP X8, 0xA40000
	0x03700DA4 LDR X8, [X8 + 0xF78]
	0x03700DA8 ADD W12, W12, 0x1
	0x03700DAC MOV X25, X22
	0x03700DB0 CMP W12, W13
	0x03700DB4 UDIV W20, W13, W12
	0x03700DB8 B.HI 0x3700E30
	0x03700DBC MOV X15, X31
	0x03700DC0 MOV X10, X31
	0x03700DC4 MOV W12, W20
	0x03700DC8 MOV X13, X25
	0x03700DCC MOV X14, X23
	0x03700DD0 LDR W16, [X14], #0x4
	0x03700DD4 LDR W17, [X13]
	0x03700DD8 NOP
	0x03700DDC MADD X16, X16, X12, X15
	0x03700DE0 UBFM X15, X16, 0x20, 0x3F

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0xCE1000
	009 Move X22, 0xA41000
	010 Move W8, [X23+3109]
	011 Move X22, [X22+3960]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xA41000
	020 Move X0, [X0+3960]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+3109], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Compare X21, 0
	030 JumpIfEqual {71}
	031 Move X8, [X22]
	032 Move W2, 1
	033 Move X0, X21
	034 Move X3, X31
	035 Move X8, [X8+184]
	036 Move X1, [X8]
	037 Call String.Split, X0, X1, X2
	038 Compare X0, 0
	039 JumpIfEqual {71}
	040 Move W8, [X0+24]
	041 Compare W8, 0
	042 JumpIfEqual {72}
	043 Move X9, [X0+32]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move [X19], X9
	046 Move [X20], X31
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X19]
	049 Move [X20], X8
	050 Move X8, [X0+40]
	051 Move X0, [X19]
	052 Compare X0, 0
	053 JumpIfEqual {71}
	054 Move W1, W31
	055 Move X2, X31
	056 Call String.get_Chars, X0, X1
	057 And W8, W0, 0xFFFF
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X9, [X19]
	060 Move X8, X31
	061 Move [X20], X9
	062 Move [X19], X8
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X30, [X31+16]
	068 Move X23, [X31+24]
	069 Add X31, X31, 64
	070 Return 
	071 Call 0x1C17F20
	072 Call 0x1C17F28
	073 Move X19, [X19]
	074 Move [X31+12], W8
	075 Move X0, 0x9F4000
	076 Move X0, [X0+1880]
	077 Call 0x1C17D08
	078 Add X1, X31, 12
	079 Call 0x1C17E04
	080 Move X20, X0
	081 Move X0, 0xA41000
	082 Move X0, [X0+3968]
	083 Call 0x1C17D08
	084 Move X1, X19
	085 Move X2, X20
	086 Move X3, X31
	087 Call String.Format, X0, X1, X2
	088 Move X19, X0
	089 Move X0, 0x9FC000
	090 Move X0, [X0+1400]
	091 Call 0x1C17D08
	092 Call 0x1C17F10
	093 Move X1, X19
	094 Move X2, X31
	095 Move X20, X0
	096 Call ArgumentException..ctor, X0, X1
	097 Move X0, 0xA41000
	098 Move X0, [X0+3976]
	099 Call 0x1C17D08
	100 Move X1, X0
	101 Move X0, X20
	102 Call 0x1C17DEC

Method: Unity.Burst.BurstString/FormatOptions ParseFormatToFormatOptions(System.String fullFormat)

Disassembly:
	0x03700DE4 SUB X16, X17, W16, UXTW
	0x03700DE8 SUB X16, X16, X10
	0x03700DEC CMP X14, X24
	0x03700DF0 UBFM X10, X16, 0x20, 0x20
	0x03700DF4 STR W16, [X13], #0x4
	0x03700DF8 B.LS 0x3700DD0
	0x03700DFC ADD X11, X22, X11
	0x03700E00 AND W12, W26, W26, 0x1F
	0x03700E04 ADD W10, W26, 0x1
	0x03700E08 SUB X11, X11, 0x4
	0x03700E0C SUBS X9, X9, 0x1
	0x03700E10 B.LT 0x3700E24
	0x03700E14 LDR W13, [X11], #0xFFFFFFFFFFFFFFFC
	0x03700E18 SUB W10, W10, 0x1
	0x03700E1C CBZ W13, 0x3700E0C
	0x03700E20 B 0x3700E28
	0x03700E24 MOV W10, W12
	0x03700E28 MOV W26, W10
	0x03700E2C STR W10, [X19]
	0x03700E30 LDR X0, [X8]
	0x03700E34 LDR W8, [X0 + 0xE0]
	0x03700E38 CBNZ W8, 0x3700E44
	0x03700E3C BL 0x1C16DFC
	0x03700E40 LDR W10, [X19]
	0x03700E44 LDR W8, [X21]
	0x03700E48 SUBS W8, W10, W8
	0x03700E4C B.EQ 0x3700E58
	0x03700E50 TBZ X8, 0x1F, 0x3700E78
	0x03700E54 B 0x3700ED8
	0x03700E58 SUB W8, W10, 0x1
	0x03700E5C TBNZ X8, 0x1F, 0x3700E78
	0x03700E60 LDR W9, [X25, W8, UXTW]
	0x03700E64 LDR W10, [X23, W8, UXTW]
	0x03700E68 SUB W8, W8, 0x1
	0x03700E6C CMP W9, W10
	0x03700E70 B.EQ 0x3700E5C
	0x03700E74 B.LS 0x3700ED8
	0x03700E78 MOV X8, X31
	0x03700E7C LDR W9, [X25]
	0x03700E80 LDR W10, [X23], #0x4
	0x03700E84 SUB X9, X9, X10
	0x03700E88 SUB X9, X9, X8
	0x03700E8C CMP X23, X24
	0x03700E90 UBFM X8, X9, 0x20, 0x20
	0x03700E94 STR W9, [X25], #0x4
	0x03700E98 B.LS 0x3700E7C
	0x03700E9C MOV W8, W26
	0x03700EA0 ADD X11, X22, W26, 0x2, SXTW
	0x03700EA4 ADD W20, W20, 0x1
	0x03700EA8 SXTW X9, W8
	0x03700EAC AND W10, W26, W26, 0x1F
	0x03700EB0 ADD W8, W26, 0x1
	0x03700EB4 SUB X11, X11, 0x4
	0x03700EB8 SUBS X9, X9, 0x1
	0x03700EBC B.LT 0x3700ED0
	0x03700EC0 LDR W12, [X11], #0xFFFFFFFFFFFFFFFC
	0x03700EC4 SUB W8, W8, 0x1
	0x03700EC8 CBZ W12, 0x3700EB8
	0x03700ECC B 0x3700ED4
	0x03700ED0 MOV W8, W10
	0x03700ED4 STR W8, [X19]
	0x03700ED8 MOV W0, W20
	0x03700EDC LDP X20, X19, [X31 + 0x40]
	0x03700EE0 LDP X22, X21, [X31 + 0x30]
	0x03700EE4 LDP X24, X23, [X31 + 0x20]
	0x03700EE8 LDP X26, X25, [X31 + 0x10]
	0x03700EEC LDR X30, [X31], #0x50
	0x03700EF0 RET
	0x03700EF4 ADD W8, W1, 0x1F
	0x03700EF8 CMP W1, 0x0
	0x03700EFC LDR W10, [X0]
	0x03700F00 CSEL W8, W8, W1, LT
	0x03700F04 AND W9, W8, 0xFFFFFFE0
	0x03700F08 SUBS W12, W1, W9
	0x03700F0C SBFM W8, W8, 0x5, 0x1F
	0x03700F10 B.EQ 0x3700FA4
	0x03700F14 ADD W13, W10, W8
	0x03700F18 MOV X9, X0
	0x03700F1C SUB W14, W31, W12
	0x03700F20 ADD W15, W13, 0x1
	0x03700F24 AND W13, W14, 0x1F
	0x03700F28 STR W15, [X9], #0x4
	0x03700F2C SUB W14, W10, 0x1
	0x03700F30 MOV W11, W31
	0x03700F34 AND W12, W12, 0x1F
	0x03700F38 ADD X14, X9, W14, 0x2, SXTW
	0x03700F3C LDR W15, [X14], #0xFFFFFFFFFFFFFFFC
	0x03700F40 ADD W16, W8, W10
	0x03700F44 SUB W10, W10, 0x1
	0x03700F48 CMP W10, 0x0
	0x03700F4C LSRV W17, W15, W13
	0x03700F50 ORR W11, W17, W11, 0x0
	0x03700F54 STR W11, [X9, W16, SXTW]
	0x03700F58 LSLV W11, W15, W12
	0x03700F5C B.GT 0x3700F3C
	0x03700F60 ADD W10, W8, W10
	0x03700F64 CMP W1, 0x20
	0x03700F68 STR W11, [X9, W10, SXTW]
	0x03700F6C B.LT 0x3700F90
	0x03700F70 MOV X10, X31
	0x03700F74 SXTW X8, W8
	0x03700F78 MOVZ W11, 0x1
	0x03700F7C STR W31, [X9, X10, LSL #2]
	0x03700F80 MOV W10, W11
	0x03700F84 CMP X10, X8
	0x03700F88 ADD W11, W11, 0x1
	0x03700F8C B.LT 0x3700F7C
	0x03700F90 LDR W8, [X0]
	0x03700F94 SUB W8, W8, 0x1
	0x03700F98 LDR W9, [X9, W8, SXTW]
	0x03700F9C CBZ W9, 0x3701000
	0x03700FA0 RET
	0x03700FA4 SXTW X10, W10
	0x03700FA8 ADD X9, X0, 0x4
	0x03700FAC ADD X10, X9, X10, 0x2, LSL
	0x03700FB0 SUB X11, X10, 0x4
	0x03700FB4 CMP X11, X9
	0x03700FB8 SXTW X10, W8
	0x03700FBC B.CC 0x3700FD4
	0x03700FC0 LDR W12, [X11]
	0x03700FC4 STR W12, [X11, X10, LSL #2]
	0x03700FC8 SUB X11, X11, 0x4
	0x03700FCC CMP X11, X9
	0x03700FD0 B.CS 0x3700FC0
	0x03700FD4 CMP W1, 0x20
	0x03700FD8 B.LT 0x3700FF8
	0x03700FDC MOV X11, X31
	0x03700FE0 MOVZ W12, 0x1
	0x03700FE4 STR W31, [X9, X11, LSL #2]
	0x03700FE8 MOV W11, W12
	0x03700FEC CMP X11, X10
	0x03700FF0 ADD W12, W12, 0x1
	0x03700FF4 B.LT 0x3700FE4
	0x03700FF8 LDR W9, [X0]
	0x03700FFC ADD W8, W9, W8
	0x03701000 STR W8, [X0]
	0x03701004 RET
	0x03701008 STP X29, X30, [X31 - 0x60]!
	0x0370100C STP X28, X27, [X31 + 0x10]
	0x03701010 STP X26, X25, [X31 + 0x20]
	0x03701014 STP X24, X23, [X31 + 0x30]
	0x03701018 STP X22, X21, [X31 + 0x40]
	0x0370101C STP X20, X19, [X31 + 0x50]
	0x03701020 SUB X31, X31, 0x4B0
	0x03701024 MRS X27, 0xC000
	0x03701028 LDR X8, [X27 + 0x28]
	0x0370102C ADRP X19, 0xCDF000
	0x03701030 LDR X9, [X31 + 0x510]
	0x03701034 MOV W23, W7
	0x03701038 STR X8, [X31 + 0x4A8]
	0x0370103C LDRB W8, [X19 + 0xC31]
	0x03701040 MOV X28, X6
	0x03701044 MOV W22, W5
	0x03701048 MOV W20, W4
	0x0370104C MOV W26, W3
	0x03701050 MOV W24, W2
	0x03701054 MOV W25, W1
	0x03701058 MOV X21, X0
	0x0370105C STR X9, [X31 + 0x20]
	0x03701060 TBNZ X8, 0x0, 0x3701084
	0x03701064 ADRP X0, 0xA3F000
	0x03701068 LDR X0, [X0 + 0xF78]
	0x0370106C BL 0x1C16CF4
	0x03701070 ADRP X0, 0x9F2000
	0x03701074 LDR X0, [X0 + 0x5A8]
	0x03701078 BL 0x1C16CF4
	0x0370107C MOVZ W8, 0x1
	0x03701080 STRB W8, [X19 + 0xC31]
	0x03701084 ADD X0, X31, 0x1D8
	0x03701088 MOVZ W2, 0x90
	0x0370108C MOV W1, W31
	0x03701090 BL 0x3EB1B10
	0x03701094 ADD X0, X31, 0x148
	0x03701098 MOVZ W2, 0x90
	0x0370109C MOV W1, W31
	0x037010A0 BL 0x3EB1B10
	0x037010A4 ADD X0, X31, 0xB8
	0x037010A8 MOVZ W2, 0x90
	0x037010AC MOV W1, W31
	0x037010B0 BL 0x3EB1B10
	0x037010B4 ADD X0, X31, 0x28
	0x037010B8 MOVZ W2, 0x90
	0x037010BC MOV W1, W31
	0x037010C0 BL 0x3EB1B10
	0x037010C4 CBZ X21, 0x3701144
	0x037010C8 STR X28, [X31 + 0x18]
	0x037010CC ADRP X28, 0x9F2000
	0x037010D0 ADRP X29, 0xA3F000
	0x037010D4 LDR X28, [X28 + 0x5A8]
	0x037010D8 LDR X29, [X29 + 0xF78]
	0x037010DC ADD X0, X31, 0x418
	0x037010E0 MOVZ W2, 0x90
	0x037010E4 MOV W1, W31
	0x037010E8 BL 0x3EB1B10
	0x037010EC ADD X0, X31, 0x388
	0x037010F0 MOVZ W2, 0x90
	0x037010F4 MOV W1, W31
	0x037010F8 BL 0x3EB1B10
	0x037010FC ADD X0, X31, 0x2F8
	0x03701100 MOVZ W2, 0x90
	0x03701104 MOV W1, W31
	0x03701108 BL 0x3EB1B10
	0x0370110C ADD X0, X31, 0x268
	0x03701110 MOVZ W2, 0x90
	0x03701114 MOV W1, W31
	0x03701118 BL 0x3EB1B10
	0x0370111C TBZ X26, 0x0, 0x370115C
	0x03701120 UBFM X9, X21, 0x1E, 0x3D
	0x03701124 UBFM X8, X21, 0x3E, 0x3D
	0x03701128 CBZ X9, 0x3701180
	0x0370112C UBFM X9, X21, 0x1E, 0x3F
	0x03701130 MOVZ W10, 0x2
	0x03701134 STR W9, [X31 + 0x390]
	0x03701138 STR W8, [X31 + 0x38C]
	0x0370113C STR W10, [X31 + 0x388]
	0x03701140 B 0x37011AC
	0x03701144 MOVZ W8, 0x30
	0x03701148 STRB W8, [X28]
	0x0370114C LDR X8, [X31 + 0x20]
	0x03701150 MOVZ W0, 0x1
	0x03701154 STR W31, [X8]
	0x03701158 B 0x370178C
	0x0370115C UBFM X9, X21, 0x1F, 0x3E
	0x03701160 UBFM X8, X21, 0x3F, 0x3E
	0x03701164 CBZ X9, 0x3701194
	0x03701168 UBFM X9, X21, 0x1F, 0x3F
	0x0370116C MOVZ W10, 0x2
	0x03701170 STR W9, [X31 + 0x390]
	0x03701174 STR W8, [X31 + 0x38C]
	0x03701178 STR W10, [X31 + 0x388]
	0x0370117C B 0x3701228
	0x03701180 CBZ X8, 0x37011A8
	0x03701184 MOVZ W9, 0x1
	0x03701188 STR W8, [X31 + 0x38C]
	0x0370118C STR W9, [X31 + 0x388]
	0x03701190 B 0x37011AC
	0x03701194 CBZ X8, 0x3701224
	0x03701198 MOVZ W9, 0x1

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0xCE1000
	009 Move W8, [X20+3110]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xA41000
	016 Move X0, [X0+3960]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3110], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Move [X31+16], X31
	023 Move [X31+24], X31
	024 Move [X31+8], X31
	025 Call String.IsNullOrWhiteSpace, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {34}
	030 Move W8, W31
	031 Move W21, W31
	032 Move W9, W31
	033 Move W22, W31
	034 Move X8, 0xA41000
	035 Move X8, [X8+3960]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Add X1, X31, 24
	042 Add X2, X31, 16
	043 Move X0, X19
	044 Call BurstString.OptsSplit, X0, X1, X2
	045 Move X0, [X31+16]
	046 Compare X0, 0
	047 JumpIfEqual {51}
	048 Move X1, X31
	049 Call String.Trim, X0
	050 Move X19, X0
	051 Move X19, X31
	052 Move X0, [X31+24]
	053 Move [X31+16], X19
	054 Compare X0, 0
	055 JumpIfEqual {59}
	056 Move X1, X31
	057 Call String.Trim, X0
	058 Move X20, X0
	059 Move X20, X31
	060 Move X0, X19
	061 Move X1, X31
	062 Move [X31+24], X20
	063 Move [X31+12], W31
	064 Call String.IsNullOrEmpty, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {72}
	069 Move W21, W31
	070 Move W23, W31
	071 Move W22, W31
	072 Compare X19, 0
	073 JumpIfEqual {160}
	074 Move X0, X19
	075 Move W1, W31
	076 Move X2, X31
	077 Call String.get_Chars, X0, X1
	078 And W8, W0, 0xFFFF
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W23, W31
	084 Move W22, 3
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move W22, 3
	089 Move W23, W31
	090 Move W23, W31
	091 Move W22, W31
	092 Move W23, 1
	093 Move W22, 1
	094 Move W22, W31
	095 Move W23, 1
	096 Move W8, [X19+16]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W21, W31
	099 Move W1, 1
	100 Move X0, X19
	101 Move X2, X31
	102 Call String.Substring, X0, X1
	103 Add X1, X31, 8
	104 Move X2, X31
	105 Move X21, X0
	106 Call UInt32.TryParse, X0, X1
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {177}
	111 Move W21, [X31+8]
	112 Move X0, X20
	113 Move X1, X31
	114 Call String.IsNullOrEmpty, X0
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfEqual {139}
	119 Compare X20, 0
	120 JumpIfEqual {160}
	121 Move X0, X20
	122 Move W1, W31
	123 Move X2, X31
	124 Call String.get_Chars, X0, X1
	125 And W8, W0, 0xFFFF
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W1, 1
	128 Move X0, X20
	129 Move X2, X31
	130 Call String.Substring, X0, X1
	131 Add X1, X31, 12
	132 Move X2, X31
	133 Move X19, X0
	134 Call Int32.TryParse, X0, X1
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {171}
	139 Move W9, [X31+12]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move W8, 0x1000000
	142 NotImplemented "Instruction CSEL not yet implemented."
	143 Move W9, W9
	144 ShiftRight W9, 24
	145 And W9, W9, 127
	146 Move W10, W21
	147 ShiftRight W10, 16
	148 And W10, W10, 127
	149 Or W8, W9, W8
	150 Or W8, W8, W10
	151 Or W0, W8, W22
	152 Move X20, [X31+64]
	153 Move X19, [X31+72]
	154 Move X22, [X31+48]
	155 Move X21, [X31+56]
	156 Move X30, [X31+32]
	157 Move X23, [X31+40]
	158 Add X31, X31, 80
	159 Return X0
	160 Call 0x1C17F20
	161 Move X0, 0xA40000
	162 Move X0, [X0+3984]
	163 Call 0x1C17D08
	164 Move X19, X0
	165 Move X0, 0xA40000
	166 Move X0, [X0+3992]
	167 Call 0x1C17D08
	168 Move X2, X0
	169 Move X0, X19
	170 Move X1, X20
	171 Move X0, 0xA40000
	172 Move X0, [X0+4000]
	173 Call 0x1C17D08
	174 Move X20, X0
	175 Move X0, 0xA40000
	176 Move X0, [X0+4008]
	177 Move X0, 0x9F3000
	178 Move X0, [X0+2760]
	179 Call 0x1C17D08
	180 Move W1, 5
	181 Call 0x1C17D6C
	182 Move X20, X0
	183 Call 0x19913C0
	184 Move X0, 0xA40000
	185 Move X0, [X0+4016]
	186 Call 0x1C17D08
	187 Move X2, X0
	188 Move X0, X20
	189 Move X1, X31
	190 Call 0x1994444
	191 Move X0, X20
	192 Call 0x19913C0
	193 Move W1, 1
	194 Move X0, X20
	195 Move X2, X19
	196 Call 0x1994444
	197 Move X0, X20
	198 Call 0x19913C0
	199 Move X0, 0xA40000
	200 Move X0, [X0+4024]
	201 Call 0x1C17D08
	202 Move X2, X0
	203 Move W1, 2
	204 Move X0, X20
	205 Call 0x1994444
	206 Move X0, X20
	207 Call 0x19913C0
	208 Move W1, 3
	209 Move X0, X20
	210 Move X2, X21
	211 Call 0x1994444
	212 Move X0, X20
	213 Call 0x19913C0
	214 Move X0, 0x9FC000
	215 Move X0, [X0+1936]
	216 Call 0x1C17D08
	217 Move X2, X0
	218 Move W1, 4
	219 Move X0, X20
	220 Call 0x1994444
	221 Move X0, X20
	222 Move X1, X31
	223 Call String.Concat, X0
	224 Move X0, 0xA40000
	225 Move X0, [X0+4032]
	226 Call 0x1C17D08
	227 Move X20, X0
	228 Move X0, 0xA40000
	229 Move X0, [X0+4040]
	230 Call 0x1C17D08
	231 Move X2, X0
	232 Move X0, X20
	233 Move X1, X19
	234 Move X3, X31
	235 Call String.Concat, X0, X1, X2
	236 Move X19, X0
	237 Move X0, 0x9FB000
	238 Move X0, [X0+1400]
	239 Call 0x1C17D08
	240 Call 0x1C17F10
	241 Move X1, X19
	242 Move X2, X31
	243 Move X20, X0
	244 Call ArgumentException..ctor, X0, X1
	245 Move X0, 0xA40000
	246 Move X0, [X0+4048]
	247 Call 0x1C17D08
	248 Move X1, X0
	249 Move X0, X20
	250 Call 0x1C17DEC

Method: System.Boolean AlignRight(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Int32 align, System.Int32 length)

Disassembly:
	0x036FF164 SUB W25, W19, 0x1
	0x036FF168 LDR W8, [X0 + 0xE0]
	0x036FF16C CBNZ W8, 0x36FF174
	0x036FF170 BL 0x1C16DFC
	0x036FF174 SDIV X8, X23, X28
	0x036FF178 MSUB W9, W8, W28, W23
	0x036FF17C CMP W9, 0x0
	0x036FF180 CSNEG W9, W9, W9, PL
	0x036FF184 ADD W10, W21, W9
	0x036FF188 ADD W11, W9, 0x30
	0x036FF18C CMP W9, 0x9
	0x036FF190 CSEL W9, W10, W11, GT
	0x036FF194 STRB W9, [X24, W19, SXTW]
	0x036FF198 MOV W19, W25
	0x036FF19C MOV X23, X8
	0x036FF1A0 CBNZ X8, 0x36FF160
	0x036FF1A4 STRB W31, [X24, W20, SXTW]
	0x036FF1A8 LDR X0, [X27]
	0x036FF1AC UBFM X8, X26, 0x3F, 0x3F
	0x036FF1B0 STUR X24, [X29 - 0x20]
	0x036FF1B4 STP W31, W20, [X29 - 0x18]
	0x036FF1B8 STUR W20, [X29 - 0x10]
	0x036FF1BC STURB W8, [X29 - 0xC]
	0x036FF1C0 LDUR X9, [X29 - 0x48]
	0x036FF1C4 LDR W8, [X0 + 0xE0]
	0x036FF1C8 AND W23, W9, 0xFF
	0x036FF1CC CBNZ W8, 0x36FF1D4
	0x036FF1D0 BL 0x1C16DFC
	0x036FF1D4 LDP X0, X1, [X29 - 0x40]
	0x036FF1D8 LDUR W2, [X29 - 0x2C]
	0x036FF1DC MOV W5, W22
	0x036FF1E0 BFM W5, W23, 0x10, 0x7
	0x036FF1E4 SUB X3, X29, 0x20
	0x036FF1E8 MOV W4, W23
	0x036FF1EC BL 0x36FF4C0
	0x036FF1F0 LDUR X8, [X29 - 0x28]
	0x036FF1F4 LDR X8, [X8 + 0x28]
	0x036FF1F8 LDUR X9, [X29 - 0x8]
	0x036FF1FC CMP X8, X9
	0x036FF200 B.NE 0x36FF224
	0x036FF204 ADD X31, X29, 0x0
	0x036FF208 LDP X20, X19, [X31 + 0x50]
	0x036FF20C LDP X22, X21, [X31 + 0x40]
	0x036FF210 LDP X24, X23, [X31 + 0x30]
	0x036FF214 LDP X26, X25, [X31 + 0x20]
	0x036FF218 LDP X28, X27, [X31 + 0x10]
	0x036FF21C LDP X29, X30, [X31], #0x60
	0x036FF220 RET
	0x036FF224 BL 0x3EB1B20
	0x036FF228 STP X30, X25, [X31 - 0x40]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0xCE2000
	009 Move W8, [X24+3111]
	010 Move W22, W4
	011 Move W23, W3
	012 Move W19, W2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xA42000
	020 Move X0, [X0+3960]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X24+3111], W8
	024 Move TEMP, X23
	025 And TEMP, TEMP, -2147483648
	026 Compare TEMP, -2147483648
	027 JumpIfEqual {29}
	028 Move W0, W31
	029 Move X8, 0xA42000
	030 Move X8, [X8+3960]
	031 Subtract W24, W31, W23
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W0, W31
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add W8, W22, W23
	041 Subtract W8, W31, W8
	042 Move W9, 32
	043 NotImplemented "Instruction LDRSW not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add W11, W10, 1
	046 Subtract W8, W8, 1
	047 Move [X20], W11
	048 Move [X10], W9
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Move X22, [X31+32]
	054 Move X21, [X31+40]
	055 Move X24, [X31+16]
	056 Move X23, [X31+24]
	057 Move X30, [X31+64]
	058 Return X0

Method: System.Boolean AlignLeft(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Int32 align, System.Int32 length)

Disassembly:
	0x036FF118 SUB W19, W8, 0x2
	0x036FF11C CBZ W8, 0x36FF138
	0x036FF120 ADD X10, X2, 0xF
	0x036FF124 ADD X9, X31, 0x0
	0x036FF128 AND X10, X10, 0xFFFFFFFF
	0x036FF12C SUB X24, X9, X10
	0x036FF130 ADD X31, X24, 0x0
	0x036FF134 B 0x36FF13C
	0x036FF138 MOV X24, X31
	0x036FF13C MOV X0, X24
	0x036FF140 MOV W1, W31
	0x036FF144 SUB W20, W8, 0x1
	0x036FF148 BL 0x3EB1B10
	0x036FF14C ANDS X31, X22, 0xFFFFFFFF
	0x036FF150 MOVZ W8, 0x57
	0x036FF154 MOVZ W9, 0x37
	0x036FF158 CSEL W21, W9, W8, EQ
	0x036FF15C MOV X23, X26
	0x036FF160 LDR X0, [X27]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W8, W31
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Subtract W8, W3, W4
	005 Move W9, 32
	006 NotImplemented "Instruction LDRSW not yet implemented."
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Add W11, W10, 1
	009 Subtract W8, W8, 1
	010 Move [X1], W11
	011 Move [X10], W9
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Move W0, W8
	015 Return X0

Method: System.Int32 GetLengthForFormatGeneral(ref Unity.Burst.BurstString/NumberBuffer number, System.Int32 nMaxDigits)

Disassembly:
	0x03700938 STP X12, X8, [X31 + 0x40]
	0x0370093C MOVZ X8, 0xEF17
	0x03700940 STP X9, X10, [X31 + 0x50]
	0x03700944 MOVZ X9, 0xC7F7
	0x03700948 MOVK X8, 0x65F90000
	0x0370094C MOVK X9, 0x80DC0000
	0x03700950 MOVK X8, 0x28F2
	0x03700954 MOVK X9, 0xEDDC
	0x03700958 MOVK X8, 0x55BC0000
	0x0370095C MOVK X9, 0xF46E0000
	0x03700960 STP X8, X9, [X31 + 0x60]
	0x03700964 MOVZ X8, 0xEFCE
	0x03700968 MOVK X8, 0x5FDC0000
	0x0370096C MOVK X8, 0x53F7
	0x03700970 MOVK X8, 0x50000
	0x03700974 STP X31, X31, [X31 + 0x10]
	0x03700978 STR D0, [X31 + 0x8]
	0x0370097C STR X8, [X31 + 0x70]
	0x03700980 ADD X1, X31, 0x8
	0x03700984 MOVZ W2, 0x90
	0x03700988 MOV X0, X19
	0x0370098C BL 0x3EB1AC0
	0x03700990 LDR X8, [X21 + 0x28]
	0x03700994 LDR X9, [X31 + 0x98]
	0x03700998 CMP X8, X9
	0x0370099C B.NE 0x37009B0
	0x037009A0 LDP X20, X19, [X31 + 0xB0]
	0x037009A4 LDP X30, X21, [X31 + 0xA0]
	0x037009A8 ADD X31, X31, 0xC0
	0x037009AC RET
	0x037009B0 BL 0x3EB1B20
	0x037009B4 STR X29, [X31 - 0x40]!
	0x037009B8 STP X30, X23, [X31 + 0x10]
	0x037009BC STP X22, X21, [X31 + 0x20]
	0x037009C0 STP X20, X19, [X31 + 0x30]
	0x037009C4 SUB X31, X31, 0x250
	0x037009C8 MRS X21, 0xC000
	0x037009CC LDR X8, [X21 + 0x28]
	0x037009D0 ADRP X23, 0xCE0000
	0x037009D4 ADRP X22, 0xA40000
	0x037009D8 MOV W20, W1
	0x037009DC STR X8, [X31 + 0x248]
	0x037009E0 LDRB W8, [X23 + 0xC2E]
	0x037009E4 LDR X22, [X22 + 0xF78]
	0x037009E8 MOV X19, X0
	0x037009EC TBNZ X8, 0x0, 0x3700A04
	0x037009F0 ADRP X0, 0xA40000
	0x037009F4 LDR X0, [X0 + 0xF78]
	0x037009F8 BL 0x1C16CF4
	0x037009FC MOVZ W8, 0x1
	0x03700A00 STRB W8, [X23 + 0xC2E]
	0x03700A04 ADD X0, X31, 0x98
	0x03700A08 MOVZ W2, 0x90
	0x03700A0C MOV W1, W31
	0x03700A10 BL 0x3EB1B10
	0x03700A14 ADD X0, X31, 0x1B8
	0x03700A18 MOVZ W2, 0x90
	0x03700A1C MOV W1, W31
	0x03700A20 BL 0x3EB1B10
	0x03700A24 ADD X0, X31, 0x128
	0x03700A28 MOVZ W2, 0x90
	0x03700A2C MOV W1, W31
	0x03700A30 BL 0x3EB1B10
	0x03700A34 LDR X0, [X22]
	0x03700A38 LDR W8, [X0 + 0xE0]
	0x03700A3C CBNZ W8, 0x3700A48
	0x03700A40 BL 0x1C16DFC
	0x03700A44 LDR X0, [X22]
	0x03700A48 LDR X8, [X0 + 0xB8]
	0x03700A4C LDR X8, [X8 + 0x10]
	0x03700A50 CBZ X8, 0x3700B1C
	0x03700A54 LDR W10, [X8 + 0x18]
	0x03700A58 AND W9, W20, 0x7
	0x03700A5C CMP W9, W10
	0x03700A60 B.CS 0x3700B20
	0x03700A64 ADD X8, X8, W9, 0x2, UXTW
	0x03700A68 LDR W8, [X8 + 0x20]
	0x03700A6C CBZ W8, 0x3700A78
	0x03700A70 STR W8, [X31 + 0x1BC]
	0x03700A74 MOVZ W8, 0x1
	0x03700A78 UBFM W23, W20, 0x3, 0x1F
	0x03700A7C STR W8, [X31 + 0x1B8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xCE1000
	006 Move W8, [X21+3112]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xA41000
	014 Move X0, [X0+3960]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3112], W8
	018 Move W8, [X20+16]
	019 Move X10, [X20]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 NotImplemented "Instruction CSET not yet implemented."
	022 Add W31, W8, 4
	023 NotImplemented "Instruction CSET not yet implemented."
	024 And W9, W9, W11
	025 Move W11, [X20+20]
	026 NotImplemented "Instruction CSINC not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Add W13, W12, 1
	029 Move X14, X10
	030 Move W15, [X14+1]
	031 Subtract W13, W13, 1
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CSEL not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W13, W31
	036 Add W19, W12, W11
	037 Add W19, W11, 1
	038 Move W13, W8
	039 Move W11, [X10]
	040 Move TEMP, X13
	041 And TEMP, TEMP, -2147483648
	042 Compare TEMP, -2147483648
	043 JumpIfEqual {46}
	044 Compare W11, 0
	045 JumpIfEqual {57}
	046 NotImplemented "Instruction BIC not yet implemented."
	047 Add W12, W19, W12
	048 Subtract W12, W12, W13
	049 Add W19, W12, 1
	050 Compare W11, 0
	051 JumpIfEqual {57}
	052 Add X10, X10, 1
	053 Move W11, [X10]
	054 Add W19, W19, 1
	055 Compare W11, 0
	056 JumpIfNotEqual {52}
	057 Move TEMP, X9
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfEqual {93}
	061 Move X9, 0xA41000
	062 Move X9, [X9+3960]
	063 Subtract W21, W8, 1
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W8, 1
	066 Move X0, [X9]
	067 NotImplemented "Instruction CINC not yet implemented."
	068 Move W9, [X0+224]
	069 Compare W9, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X9, W21
	073 Or X10, X31, 0x6666666666666666
	074 Move W8, W31
	075 NotImplemented "Instruction MOVK not yet implemented."
	076 Move X11, X9
	077 NotImplemented "Instruction SMULH not yet implemented."
	078 NotImplemented "Instruction SBFM not yet implemented."
	079 Add X11, X11, 9
	080 Add X12, X13, X12
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W8, W8, 1
	083 Move X11, X12
	084 Move X9, X9
	085 ShiftRight X9, 63
	086 And X9, X9, 0x7FFFFFFF
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move W10, 2
	089 Add W9, W20, W9
	090 NotImplemented "Instruction CSEL not yet implemented."
	091 Add W9, W9, W19
	092 Add W19, W9, W8
	093 Move W0, W19
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X30, [X31+32]
	097 Move X21, [X31+40]
	098 Return X0

Method: System.Void FormatGeneral(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, ref Unity.Burst.BurstString/NumberBuffer number, System.Int32 nMaxDigits, System.Byte expChar)

Disassembly:
	0x03700A80 CBZ W23, 0x3700AE4
	0x03700A84 MOV W20, W31
	0x03700A88 TBZ X23, 0x0, 0x3700AD8
	0x03700A8C LDR X0, [X22]
	0x03700A90 LDR W8, [X0 + 0xE0]
	0x03700A94 CBNZ W8, 0x3700A9C
	0x03700A98 BL 0x1C16DFC
	0x03700A9C ADD X8, X31, 0x8
	0x03700AA0 MOV W0, W20
	0x03700AA4 BL 0x370076C
	0x03700AA8 ADD X0, X31, 0x98
	0x03700AAC ADD X1, X31, 0x8
	0x03700AB0 MOVZ W2, 0x90
	0x03700AB4 BL 0x3EB1AC0
	0x03700AB8 ADD X0, X31, 0x128
	0x03700ABC ADD X1, X31, 0x1B8
	0x03700AC0 ADD X2, X31, 0x98
	0x03700AC4 BL 0x370047C
	0x03700AC8 ADD X0, X31, 0x1B8
	0x03700ACC ADD X1, X31, 0x128
	0x03700AD0 MOVZ W2, 0x90
	0x03700AD4 BL 0x3EB1AC0
	0x03700AD8 UBFM W23, W23, 0x1, 0x1F
	0x03700ADC ADD W20, W20, 0x1
	0x03700AE0 CBNZ W23, 0x3700A88
	0x03700AE4 ADD X1, X31, 0x1B8
	0x03700AE8 MOVZ W2, 0x90
	0x03700AEC MOV X0, X19
	0x03700AF0 BL 0x3EB1AC0
	0x03700AF4 LDR X8, [X21 + 0x28]
	0x03700AF8 LDR X9, [X31 + 0x248]
	0x03700AFC CMP X8, X9
	0x03700B00 B.NE 0x3700B24
	0x03700B04 ADD X31, X31, 0x250
	0x03700B08 LDP X20, X19, [X31 + 0x30]
	0x03700B0C LDP X22, X21, [X31 + 0x20]
	0x03700B10 LDP X30, X23, [X31 + 0x10]
	0x03700B14 LDR X29, [X31], #0x40
	0x03700B18 RET
	0x03700B1C BL 0x1C16F20
	0x03700B20 BL 0x1C16F28
	0x03700B24 BL 0x3EB1B20
	0x03700B28 CBZ W1, 0x3700B38
	0x03700B2C MOVZ W8, 0x1
	0x03700B30 STR W1, [X0 + 0x4]
	0x03700B34 B 0x3700B3C
	0x03700B38 MOV W8, W31
	0x03700B3C STR W8, [X0]
	0x03700B40 RET
	0x03700B44 STP X29, X30, [X31 - 0x40]!
	0x03700B48 STP X24, X23, [X31 + 0x10]
	0x03700B4C STP X22, X21, [X31 + 0x20]
	0x03700B50 STP X20, X19, [X31 + 0x30]
	0x03700B54 SUB X31, X31, 0x250
	0x03700B58 MRS X22, 0xC000
	0x03700B5C LDR X8, [X22 + 0x28]
	0x03700B60 ADRP X23, 0xCE0000
	0x03700B64 MOV W20, W2
	0x03700B68 MOV X21, X1
	0x03700B6C STR X8, [X31 + 0x248]
	0x03700B70 LDRB W8, [X23 + 0xC2F]
	0x03700B74 MOV X19, X0
	0x03700B78 TBNZ X8, 0x0, 0x3700B90
	0x03700B7C ADRP X0, 0xA40000
	0x03700B80 LDR X0, [X0 + 0xF78]
	0x03700B84 BL 0x1C16CF4
	0x03700B88 MOVZ W8, 0x1
	0x03700B8C STRB W8, [X23 + 0xC2F]
	0x03700B90 ADRP X23, 0xA40000
	0x03700B94 LDR X23, [X23 + 0xF78]
	0x03700B98 ADD X0, X31, 0x98
	0x03700B9C MOVZ W2, 0x90
	0x03700BA0 MOV W1, W31
	0x03700BA4 BL 0x3EB1B10
	0x03700BA8 ADD X0, X31, 0x1B8
	0x03700BAC MOVZ W2, 0x90
	0x03700BB0 MOV W1, W31
	0x03700BB4 BL 0x3EB1B10
	0x03700BB8 ADD X0, X31, 0x128
	0x03700BBC MOVZ W2, 0x90
	0x03700BC0 MOV W1, W31
	0x03700BC4 BL 0x3EB1B10
	0x03700BC8 ANDS W24, W20, 0x7
	0x03700BCC B.EQ 0x3700C14
	0x03700BD0 LDR X0, [X23]
	0x03700BD4 LDR W8, [X0 + 0xE0]
	0x03700BD8 CBNZ W8, 0x3700BE4
	0x03700BDC BL 0x1C16DFC
	0x03700BE0 LDR X0, [X23]
	0x03700BE4 LDR X8, [X0 + 0xB8]
	0x03700BE8 LDR X8, [X8 + 0x10]
	0x03700BEC CBZ X8, 0x3700CC4
	0x03700BF0 LDR W9, [X8 + 0x18]
	0x03700BF4 CMP W24, W9
	0x03700BF8 B.CS 0x3700CC8
	0x03700BFC ADD X8, X8, W24, 0x2, UXTW
	0x03700C00 LDR W2, [X8 + 0x20]
	0x03700C04 ADD X0, X31, 0x1B8
	0x03700C08 MOV X1, X21
	0x03700C0C BL 0x37005F8
	0x03700C10 B 0x3700C24
	0x03700C14 ADD X0, X31, 0x1B8
	0x03700C18 MOVZ W2, 0x90
	0x03700C1C MOV X1, X21
	0x03700C20 BL 0x3EB1AC0
	0x03700C24 UBFM W21, W20, 0x3, 0x1F
	0x03700C28 CBZ W21, 0x3700C8C
	0x03700C2C MOV W20, W31
	0x03700C30 TBZ X21, 0x0, 0x3700C80
	0x03700C34 LDR X0, [X23]
	0x03700C38 LDR W8, [X0 + 0xE0]
	0x03700C3C CBNZ W8, 0x3700C44
	0x03700C40 BL 0x1C16DFC
	0x03700C44 ADD X8, X31, 0x8
	0x03700C48 MOV W0, W20
	0x03700C4C BL 0x370076C
	0x03700C50 ADD X0, X31, 0x98
	0x03700C54 ADD X1, X31, 0x8
	0x03700C58 MOVZ W2, 0x90
	0x03700C5C BL 0x3EB1AC0
	0x03700C60 ADD X0, X31, 0x128
	0x03700C64 ADD X1, X31, 0x1B8
	0x03700C68 ADD X2, X31, 0x98
	0x03700C6C BL 0x370047C
	0x03700C70 ADD X0, X31, 0x1B8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0xCE1000
	010 Move W8, [X25+3113]
	011 Move W23, W5
	012 Move W24, W4
	013 Move X22, X3
	014 Move W19, W2
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xA41000
	022 Move X0, [X0+3960]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X25+3113], W8
	026 Move W10, [X22+16]
	027 Move W12, [X22+20]
	028 Move X9, [X22]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction CSET not yet implemented."
	031 Add W31, W10, 4
	032 NotImplemented "Instruction CSET not yet implemented."
	033 And W8, W8, W11
	034 NotImplemented "Instruction CSINC not yet implemented."
	035 Compare W12, 0
	036 JumpIfEqual {43}
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Add W13, W12, 1
	040 Move W14, 45
	041 Move [X20], W13
	042 Move [X12], W14
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add W10, W11, 1
	045 Move W11, 48
	046 NotImplemented "Instruction LDRSW not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Add W13, W12, 1
	049 Move X14, X9
	050 Move [X20], W13
	051 Move W13, [X14+1]
	052 Subtract W10, W10, 1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CSEL not yet implemented."
	055 NotImplemented "Instruction CSEL not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move [X12], W13
	058 Move W10, W31
	059 Move TEMP, X10
	060 And TEMP, TEMP, -2147483648
	061 Compare TEMP, -2147483648
	062 JumpIfNotEqual {73}
	063 NotImplemented "Instruction LDRSW not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Add W12, W11, 1
	066 Move W13, 48
	067 Move [X20], W12
	068 Move [X11], W13
	069 Move TEMP, X10
	070 And TEMP, TEMP, -2147483648
	071 Compare TEMP, -2147483648
	072 JumpIfEqual {109}
	073 Move W11, [X9]
	074 Compare W11, 0
	075 JumpIfNotEqual {109}
	076 Move TEMP, X8
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfEqual {139}
	080 NotImplemented "Instruction LDRSW not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W9, W8, 1
	083 Move [X20], W9
	084 Move [X8], W23
	085 Move X8, 0xA41000
	086 Move X8, [X8+3960]
	087 Move X0, [X8]
	088 Move W8, [X22+16]
	089 Move W9, [X0+224]
	090 Subtract W22, W8, 1
	091 Compare W9, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X3, W22
	095 Move X0, X21
	096 Move X1, X20
	097 Move W2, W19
	098 Move X20, [X31+48]
	099 Move X19, [X31+56]
	100 Move X22, [X31+32]
	101 Move X21, [X31+40]
	102 Move X24, [X31+16]
	103 Move X23, [X31+24]
	104 Or W4, W31, 0x20002
	105 Move X30, [X31+64]
	106 Move X25, [X31+72]
	107 Call BurstString.ConvertIntegerToString, X0, X1, X2, X3, X4
	108 Return 
	109 NotImplemented "Instruction LDRSW not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add W12, W11, 1
	112 Move W13, 46
	113 Move [X20], W12
	114 Move [X11], W13
	115 Move TEMP, X10
	116 And TEMP, TEMP, -2147483648
	117 Compare TEMP, -2147483648
	118 JumpIfNotEqual {126}
	119 Move W11, 48
	120 NotImplemented "Instruction LDRSW not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Add W13, W12, 1
	123 Add W10, W10, 1
	124 Move [X20], W13
	125 Move [X12], W11
	126 Move W10, [X9]
	127 Compare W10, 0
	128 JumpIfEqual {76}
	129 NotImplemented "Instruction LDRSW not yet implemented."
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Add W11, W10, 1
	132 Move [X20], W11
	133 Move W11, [X9]
	134 Move [X10], W11
	135 Add X9, X9, 1
	136 Move W10, [X9]
	137 Compare W10, 0
	138 JumpIfNotEqual {129}
	139 Move X20, [X31+48]
	140 Move X19, [X31+56]
	141 Move X22, [X31+32]
	142 Move X21, [X31+40]
	143 Move X24, [X31+16]
	144 Move X23, [X31+24]
	145 Move X30, [X31+64]
	146 Move X25, [X31+72]
	147 Return 

Method: System.Void RoundNumber(ref Unity.Burst.BurstString/NumberBuffer number, System.Int32 pos, System.Boolean isCorrectlyRounded)

Disassembly:
	0x03700800 MOVZ X9, 0xDC08
	0x03700804 STP X10, X8, [X31 + 0x20]
	0x03700808 MOVZ X8, 0x7F19
	0x0370080C MOVK X9, 0xC4040000
	0x03700810 MOVK X8, 0xA6330000
	0x03700814 MOVK X9, 0xB0DA
	0x03700818 MOVK X8, 0x2603
	0x0370081C MOVK X9, 0xBCCD0000
	0x03700820 MOVK X8, 0xE91F0000
	0x03700824 STP X9, X8, [X31 + 0x30]
	0x03700828 MOVZ W8, 0x24E
	0x0370082C STR D0, [X31 + 0x8]
	0x03700830 STR W8, [X31 + 0x40]
	0x03700834 B 0x3700980
	0x03700838 ADRP X8, 0xFFFFFFFFFD3ED000
	0x0370083C LDR V0, [X8 + 0x3D0]
	0x03700840 MOVZ X8, 0xEF81
	0x03700844 MOVK X8, 0x85AC0000
	0x03700848 MOVK X8, 0x415B
	0x0370084C MOVK X8, 0x2D6D0000
	0x03700850 MOVZ W9, 0x4EE
	0x03700854 STR X8, [X31 + 0x10]
	0x03700858 STR D0, [X31 + 0x8]
	0x0370085C STR W9, [X31 + 0x18]
	0x03700860 B 0x3700980
	0x03700864 ADRP X8, 0xFFFFFFFFFD3ED000
	0x03700868 MOVZ X10, 0xED64
	0x0370086C LDR V0, [X8 + 0xB68]
	0x03700870 MOVZ X8, 0xF9F4
	0x03700874 MOVK X10, 0x6E380000
	0x03700878 MOVK X8, 0xE93F0000
	0x0370087C MOVZ X9, 0x1F01
	0x03700880 MOVK X10, 0x97ED
	0x03700884 MOVK X8, 0x4F03
	0x03700888 MOVK X9, 0xBF6A0000
	0x0370088C MOVK X10, 0xDAA70000
	0x03700890 MOVK X8, 0x180000
	0x03700894 STP X9, X10, [X31 + 0x10]
	0x03700898 STR D0, [X31 + 0x8]
	0x0370089C STR X8, [X31 + 0x20]
	0x037008A0 B 0x3700980
	0x037008A4 ADRP X8, 0xFFFFFFFFFD3ED000
	0x037008A8 LDR V0, [X8 + 0x5C8]
	0x037008AC MOVZ W8, 0x86F2
	0x037008B0 MOVK W8, 0x230000
	0x037008B4 STR W8, [X31 + 0x10]
	0x037008B8 STR D0, [X31 + 0x8]
	0x037008BC B 0x3700980
	0x037008C0 MOVZ X10, 0x875B
	0x037008C4 MOVZ X11, 0x2F87
	0x037008C8 MOVK X10, 0xBED30000
	0x037008CC MOVK X11, 0x12150000
	0x037008D0 MOVZ X9, 0x7C01
	0x037008D4 MOVK X10, 0x9F72
	0x037008D8 MOVK X11, 0x50C6
	0x037008DC ADRP X8, 0xFFFFFFFFFD3ED000
	0x037008E0 MOVK X9, 0x982E0000
	0x037008E4 MOVK X10, 0xD8D90000
	0x037008E8 MOVK X11, 0x6BDE0000
	0x037008EC MOVZ X12, 0x6E70
	0x037008F0 LDR V0, [X8 + 0xAD8]
	0x037008F4 MOVZ X8, 0x716E
	0x037008F8 STP X31, X9, [X31 + 0x20]
	0x037008FC MOVZ X9, 0x3624
	0x03700900 STP X10, X11, [X31 + 0x30]
	0x03700904 MOVZ X10, 0x540E
	0x03700908 MOVK X12, 0xCF4A0000
	0x0370090C MOVK X8, 0x26B20000
	0x03700910 MOVK X9, 0x1D150000
	0x03700914 MOVK X10, 0x63FF0000
	0x03700918 MOVK X12, 0xD80F
	0x0370091C MOVK X8, 0x66B0
	0x03700920 MOVK X9, 0xD35A
	0x03700924 MOVK X10, 0x73C0
	0x03700928 MOVK X12, 0xD5950000
	0x0370092C MOVK X8, 0xADC60000
	0x03700930 MOVK X9, 0x3C420000
	0x03700934 MOVK X10, 0xCC550000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0xCE1000
	009 Move W8, [X22+3114]
	010 Move W20, W2
	011 Move W21, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xA41000
	018 Move X0, [X0+3960]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+3114], W8
	022 Move X22, [X19]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W23, W21
	025 Move X24, X31
	026 Move W8, [X22]
	027 Compare W8, 0
	028 JumpIfEqual {33}
	029 Add X24, X24, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W24, W23
	032 Move W24, W31
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X8, 0xA41000
	035 Move X8, [X8+3960]
	036 Move X0, [X8]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move W8, [X22]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Compare W8, 0
	044 JumpIfEqual {57}
	045 Move TEMP, X20
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {57}
	049 Subtract X9, X23, 1
	050 Add X8, X22, X23
	051 NotImplemented "Instruction LDURB not yet implemented."
	052 Move X23, X9
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add W10, W10, 1
	055 Add W8, W9, 1
	056 Move [X22], W10
	057 Move W9, W24
	058 Subtract X8, X22, 1
	059 Subtract X10, X9, 1
	060 Move W9, [X8]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X9, X10
	063 Add W8, W10, 1
	064 Move W8, W31
	065 Move [X19+16], W31
	066 Move W8, [X19+16]
	067 Move W9, 49
	068 Add W8, W8, 1
	069 Move [X19+16], W8
	070 Move [X22], W9
	071 Move W8, 1
	072 Move [X22], W31
	073 Move [X19+12], W8
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Return 

Method: System.Boolean ShouldRoundUp(System.Byte* dig, System.Int32 i, System.Boolean isCorrectlyRounded)

Disassembly:
	0x037011B4 CBNZ W8, 0x37011BC
	0x037011B8 BL 0x1C16DFC
	0x037011BC CMP W25, 0x1
	0x037011C0 B.LT 0x37011F8
	0x037011C4 ADD X0, X31, 0x388
	0x037011C8 MOV W1, W25
	0x037011CC BL 0x3700EF4
	0x037011D0 ADRP X8, 0xFFFFFFFFFD3EC000
	0x037011D4 LDR V0, [X8 + 0x470]

ISIL:
	001 Move W8, [X0]
	002 Xor W9, W2, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 NotImplemented "Instruction CMP not yet implemented."
	006 And W8, W10, W9
	007 NotImplemented "Instruction CSET not yet implemented."
	008 And W0, W9, W8
	009 Return X0

Method: System.UInt32 LogBase2(System.UInt32 val)

Disassembly:
	0x037011D8 ADD X0, X31, 0x2F8
	0x037011DC MOV W1, W25
	0x037011E0 STR D0, [X31 + 0x418]
	0x037011E4 BL 0x3700CD0
	0x037011E8 ADD W1, W25, 0x1
	0x037011EC ADD X0, X31, 0x268
	0x037011F0 ADD X21, X31, 0x268
	0x037011F4 B 0x3701264
	0x037011F8 MOVZ W8, 0x2
	0x037011FC SUB W1, W8, W25
	0x03701200 ADD X0, X31, 0x418
	0x03701204 BL 0x3700CD0
	0x03701208 ADRP X8, 0xFFFFFFFFFD3EC000
	0x0370120C LDR V0, [X8 + 0x5B8]
	0x03701210 MOVI V1.2S, 0x1
	0x03701214 STR D1, [X31 + 0x2F8]
	0x03701218 ADD X21, X31, 0x268
	0x0370121C STR D0, [X31 + 0x268]
	0x03701220 B 0x3701288
	0x03701224 STR W31, [X31 + 0x388]
	0x03701228 LDR X0, [X29]
	0x0370122C LDR W8, [X0 + 0xE0]
	0x03701230 CBNZ W8, 0x3701238
	0x03701234 BL 0x1C16DFC
	0x03701238 CMP W25, 0x1
	0x0370123C B.LT 0x370126C
	0x03701240 ADD X0, X31, 0x388
	0x03701244 MOV W1, W25
	0x03701248 BL 0x3700EF4
	0x0370124C ADRP X8, 0xFFFFFFFFFD3EC000
	0x03701250 LDR V0, [X8 + 0x5B8]
	0x03701254 ADD X0, X31, 0x2F8
	0x03701258 MOV W1, W25
	0x0370125C ADD X21, X31, 0x2F8
	0x03701260 STR D0, [X31 + 0x418]
	0x03701264 BL 0x3700CD0
	0x03701268 B 0x3701288
	0x0370126C MOVZ W8, 0x1
	0x03701270 SUB W1, W8, W25
	0x03701274 ADD X0, X31, 0x418
	0x03701278 BL 0x3700CD0
	0x0370127C MOVI V0.2S, 0x1
	0x03701280 ADD X21, X31, 0x2F8
	0x03701284 STR D0, [X31 + 0x2F8]
	0x03701288 LDR X0, [X28]
	0x0370128C LDR W8, [X0 + 0xE0]
	0x03701290 CBNZ W8, 0x3701298
	0x03701294 BL 0x1C16DFC
	0x03701298 ADRP X8, 0xFFFFFFFFFD3ED000
	0x0370129C LDR V0, [X8 + 0x20]
	0x037012A0 ADD W8, W24, W25
	0x037012A4 ADRP X9, 0xFFFFFFFFFD3EC000
	0x037012A8 SCVTF D1, W8
	0x037012AC FMUL D0, D1, D0
	0x037012B0 LDR V1, [X9 + 0x7A8]
	0x037012B4 MOVZ X8, 0x7FF00000
	0x037012B8 MOVZ W9, 0x80000000
	0x037012BC SUB W26, W31, W22
	0x037012C0 FADD D0, D0, D1
	0x037012C4 FMOV D1, X8
	0x037012C8 FCVTPS W8, D0
	0x037012CC FRINTP D0, D0
	0x037012D0 FCMP D0, D1
	0x037012D4 CSEL W8, W9, W8, EQ
	0x037012D8 MOVZ W9, 0x1
	0x037012DC SUB W9, W9, W22
	0x037012E0 CMP W8, W26
	0x037012E4 LDR X28, [X31 + 0x18]
	0x037012E8 CSEL W9, W8, W9, GT
	0x037012EC CMP W20, 0x2
	0x037012F0 CSEL W24, W9, W8, EQ
	0x037012F4 CMP W24, 0x1
	0x037012F8 B.LT 0x3701330

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xCE0000
	006 Move W8, [X20+3115]
	007 Move W19, W0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xA40000
	013 Move X0, [X0+3960]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3115], W8
	017 Move X20, 0xA40000
	018 Move X20, [X20+3960]
	019 Move W21, W19
	020 ShiftRight W21, 24
	021 And W21, W21, 0x7FFFFFFF
	022 Compare W21, 0
	023 JumpIfEqual {39}
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X0+184]
	031 Move X8, [X8+8]
	032 Compare X8, 0
	033 JumpIfEqual {87}
	034 Move W9, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Add X8, X8, W21
	037 Move W8, [X8+32]
	038 Add W0, W8, 24
	039 Move W21, W19
	040 ShiftRight W21, 16
	041 And W21, W21, 0x7FFFFFFF
	042 Compare W21, 0
	043 JumpIfEqual {59}
	044 Move X0, [X20]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X20]
	050 Move X8, [X0+184]
	051 Move X8, [X8+8]
	052 Compare X8, 0
	053 JumpIfEqual {87}
	054 Move W9, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Add X8, X8, W21
	057 Move W8, [X8+32]
	058 Add W0, W8, 16
	059 Move X0, [X20]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {65}
	063 Call 0x1C17DFC
	064 Move X0, [X20]
	065 Move X8, [X0+184]
	066 Move X8, [X8+8]
	067 Compare X8, 0
	068 JumpIfEqual {87}
	069 Move W10, [X8+24]
	070 Move W9, W19
	071 ShiftRight W9, 8
	072 And W9, W9, 0x7FFFFFFF
	073 Compare W9, 0
	074 JumpIfEqual {79}
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Add X8, X8, W9
	077 Move W8, [X8+32]
	078 Add W0, W8, 8
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Add X8, X8, W19
	081 Move W0, [X8+32]
	082 Move X20, [X31+16]
	083 Move X19, [X31+24]
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 Return X0
	087 Call 0x1C17F20
	088 Call 0x1C17F28

Method: System.Int32 BigInt_Compare(in Unity.Burst.BurstString/tBigInt lhs, in Unity.Burst.BurstString/tBigInt rhs)

Disassembly:
	0x037012FC LDR X0, [X29]
	0x03701300 LDR W8, [X0 + 0xE0]
	0x03701304 CBNZ W8, 0x370130C
	0x03701308 BL 0x1C16DFC
	0x0370130C ADD X0, X31, 0x1D8
	0x03701310 ADD X1, X31, 0x418
	0x03701314 MOV W2, W24
	0x03701318 BL 0x3700B44
	0x0370131C ADD X0, X31, 0x418
	0x03701320 ADD X1, X31, 0x1D8
	0x03701324 MOVZ W2, 0x90
	0x03701328 BL 0x3EB1AC0
	0x0370132C B 0x37013B8
	0x03701330 TBZ X24, 0x1F, 0x37013B8
	0x03701334 LDR X0, [X29]
	0x03701338 LDR W8, [X0 + 0xE0]
	0x0370133C CBNZ W8, 0x3701344
	0x03701340 BL 0x1C16DFC
	0x03701344 SUB W1, W31, W24
	0x03701348 ADD X0, X31, 0x148

ISIL:
	001 Move W10, [X0]
	002 Move W9, [X1]
	003 Move X8, X0
	004 Subtract W0, W10, W9
	005 Return X0
	006 Add X8, X8, 4
	007 Add X9, X1, 4
	008 Subtract W10, W10, 1
	009 Move TEMP, X10
	010 And TEMP, TEMP, -2147483648
	011 Compare TEMP, -2147483648
	012 JumpIfEqual {20}
	013 Move W11, [X8]
	014 Move W12, [X9]
	015 Subtract W10, W10, 1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W8, 1
	018 NotImplemented "Instruction CSNEG not yet implemented."
	019 Return X0
	020 Move W0, W31
	021 Return X0

Method: System.Void BigInt_Add(out Unity.Burst.BurstString/tBigInt pResult, in Unity.Burst.BurstString/tBigInt lhs, in Unity.Burst.BurstString/tBigInt rhs)

Disassembly:
	0x0370134C BL 0x37009B4
	0x03701350 ADD X0, X31, 0xB8
	0x03701354 ADD X1, X31, 0x388
	0x03701358 ADD X2, X31, 0x148
	0x0370135C BL 0x370047C
	0x03701360 ADD X0, X31, 0x388
	0x03701364 ADD X1, X31, 0xB8
	0x03701368 MOVZ W2, 0x90
	0x0370136C BL 0x3EB1AC0
	0x03701370 ADD X0, X31, 0xB8
	0x03701374 ADD X1, X31, 0x2F8
	0x03701378 ADD X2, X31, 0x148
	0x0370137C ADD X19, X31, 0x2F8
	0x03701380 BL 0x370047C
	0x03701384 ADD X0, X31, 0x2F8
	0x03701388 ADD X1, X31, 0xB8
	0x0370138C MOVZ W2, 0x90
	0x03701390 BL 0x3EB1AC0
	0x03701394 CMP X21, X19
	0x03701398 B.EQ 0x37013B8
	0x0370139C LDR X0, [X29]
	0x037013A0 LDR W8, [X0 + 0xE0]
	0x037013A4 CBNZ W8, 0x37013AC
	0x037013A8 BL 0x1C16DFC
	0x037013AC ADD X1, X31, 0x2F8
	0x037013B0 MOV X0, X21
	0x037013B4 BL 0x3700658
	0x037013B8 LDR X0, [X29]
	0x037013BC LDR W8, [X0 + 0xE0]
	0x037013C0 CBNZ W8, 0x37013C8
	0x037013C4 BL 0x1C16DFC
	0x037013C8 LDR W10, [X31 + 0x388]
	0x037013CC LDR W8, [X31 + 0x418]
	0x037013D0 SUBS W8, W10, W8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xCE0000
	008 Move X22, 0xA40000
	009 Move W8, [X23+3116]
	010 Move X22, [X22+3960]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xA40000
	019 Move X0, [X0+3960]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3116], W8
	023 Move X0, [X22]
	024 Move W22, [X20]
	025 Move W23, [X19]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X1, X19
	033 Move X2, X20
	034 Move X1, X20
	035 Move X2, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]

Method: System.Void BigInt_Add_internal(out Unity.Burst.BurstString/tBigInt pResult, in Unity.Burst.BurstString/tBigInt pLarge, in Unity.Burst.BurstString/tBigInt pSmall)

Disassembly:
	0x037013D4 B.EQ 0x37013E4
	0x037013D8 TBNZ X8, 0x1F, 0x3701414
	0x037013DC ADD W24, W24, 0x1
	0x037013E0 B 0x370145C
	0x037013E4 ADD X8, X31, 0x388
	0x037013E8 ADD X9, X31, 0x418
	0x037013EC ORR X8, X8, 0x7
	0x037013F0 ORR X9, X9, 0x7
	0x037013F4 SUB W10, W10, 0x1
	0x037013F8 TBNZ X10, 0x1F, 0x37013DC
	0x037013FC LDR W11, [X8, W10, UXTW]
	0x03701400 LDR W12, [X9, W10, UXTW]
	0x03701404 SUB W10, W10, 0x1
	0x03701408 CMP W11, W12
	0x0370140C B.EQ 0x37013F8
	0x03701410 B.HI 0x37013DC
	0x03701414 LDR X0, [X29]
	0x03701418 LDR W8, [X0 + 0xE0]
	0x0370141C CBNZ W8, 0x3701424
	0x03701420 BL 0x1C16DFC
	0x03701424 ADD X0, X31, 0x388
	0x03701428 BL 0x3700710
	0x0370142C ADD X0, X31, 0x2F8
	0x03701430 ADD X19, X31, 0x2F8
	0x03701434 BL 0x3700710
	0x03701438 CMP X21, X19
	0x0370143C B.EQ 0x370145C
	0x03701440 LDR X0, [X29]
	0x03701444 LDR W8, [X0 + 0xE0]
	0x03701448 CBNZ W8, 0x3701450
	0x0370144C BL 0x1C16DFC
	0x03701450 ADD X1, X31, 0x2F8
	0x03701454 MOV X0, X21
	0x03701458 BL 0x3700658
	0x0370145C CMP W20, 0x2
	0x03701460 SUB W25, W24, W23
	0x03701464 B.EQ 0x3701480
	0x03701468 CMP W20, 0x1
	0x0370146C B.NE 0x3701488
	0x03701470 SUB W8, W24, W22
	0x03701474 CMP W8, W25
	0x03701478 CSEL W25, W8, W25, GT

ISIL:
	001 NotImplemented "Instruction LDRSW not yet implemented."
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Move X9, X0
	004 Move X10, X31
	005 Move [X9+4], W8
	006 Add X12, X1, X8
	007 Compare W11, 0
	008 JumpIfEqual {25}
	009 Move X13, X11
	010 ShiftRight X13, 62
	011 And X13, X13, 0x1FFFFFFF
	012 Add X14, X2, 4
	013 Move X11, X1
	014 Move W15, [X11+4]
	015 Move W16, [X2]
	016 Move X2, X14
	017 Subtract X13, X13, 4
	018 Add X10, X10, X15
	019 Add X15, X10, X16
	020 Move X10, X15
	021 ShiftRight X10, 32
	022 And X10, X10, 0x7FFFFFFF
	023 Move [X9+4], W15
	024 Add X14, X14, 4
	025 Move X11, X1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X12, X8
	028 ShiftRight X12, 62
	029 And X12, X12, 0x1FFFFFFF
	030 Add X12, X1, X12
	031 Subtract X12, X12, 4
	032 Subtract X13, X11, 4
	033 Move W14, [X11]
	034 Add X11, X13, 8
	035 Add X13, X13, 4
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add X14, X10, X14
	038 Move X10, X14
	039 ShiftRight X10, 32
	040 And X10, X10, 0x7FFFFFFF
	041 Move [X9+4], W14
	042 Compare X10, 0
	043 JumpIfEqual {47}
	044 Move W10, 1
	045 Add W8, W8, 1
	046 Move [X9], W10
	047 Move [X0], W8
	048 Return 

Method: System.Void BigInt_Multiply(out Unity.Burst.BurstString/tBigInt pResult, in Unity.Burst.BurstString/tBigInt lhs, in Unity.Burst.BurstString/tBigInt rhs)

Disassembly:
	0x0370147C B 0x3701488
	0x03701480 CMP W25, W26
	0x03701484 CSEL W25, W26, W25, LT
	0x03701488 LDR X9, [X31 + 0x20]
	0x0370148C SUB W8, W24, 0x1
	0x03701490 STR W8, [X9]
	0x03701494 LDR W8, [X31 + 0x418]
	0x03701498 ADD X9, X31, 0x418
	0x0370149C ORR X23, X9, 0x7
	0x037014A0 MOVZ W9, 0x9992
	0x037014A4 SUB W8, W8, 0x1
	0x037014A8 LDR W22, [X23, W8, SXTW]
	0x037014AC MOVK W9, 0x19990000
	0x037014B0 SUB W8, W22, 0x8
	0x037014B4 CMP W8, W9
	0x037014B8 B.CC 0x370152C
	0x037014BC LDR X0, [X29]
	0x037014C0 LDR W8, [X0 + 0xE0]
	0x037014C4 CBNZ W8, 0x37014CC
	0x037014C8 BL 0x1C16DFC
	0x037014CC MOV W0, W22
	0x037014D0 BL 0x37001D8
	0x037014D4 MOVZ W8, 0x1B
	0x037014D8 SUB W8, W8, W0
	0x037014DC AND W22, W8, 0x1F
	0x037014E0 ADD X0, X31, 0x418
	0x037014E4 MOV W1, W22
	0x037014E8 BL 0x3700EF4
	0x037014EC ADD X0, X31, 0x388
	0x037014F0 MOV W1, W22
	0x037014F4 BL 0x3700EF4
	0x037014F8 ADD X0, X31, 0x2F8
	0x037014FC MOV W1, W22
	0x03701500 ADD X19, X31, 0x2F8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0xCE0000
	008 Move X22, 0xA40000
	009 Move W8, [X23+3117]
	010 Move X22, [X22+3960]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xA40000
	019 Move X0, [X0+3960]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3117], W8
	023 Move X0, [X22]
	024 Move W22, [X20]
	025 Move W23, [X19]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X1, X19
	033 Move X2, X20
	034 Move X1, X20
	035 Move X2, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move X30, [X31+48]
	041 Move X23, [X31+56]

Method: System.Void BigInt_Multiply_internal(out Unity.Burst.BurstString/tBigInt pResult, in Unity.Burst.BurstString/tBigInt pLarge, in Unity.Burst.BurstString/tBigInt pSmall)

Disassembly:
	0x03701504 BL 0x3700EF4
	0x03701508 CMP X21, X19
	0x0370150C B.EQ 0x370152C
	0x03701510 LDR X0, [X29]
	0x03701514 LDR W8, [X0 + 0xE0]
	0x03701518 CBNZ W8, 0x3701520
	0x0370151C BL 0x1C16DFC
	0x03701520 ADD X1, X31, 0x2F8
	0x03701524 MOV X0, X21
	0x03701528 BL 0x3700658
	0x0370152C CBZ W20, 0x3701590
	0x03701530 SUB W8, W25, W24
	0x03701534 ADD W19, W8, 0x1
	0x03701538 MOV X22, X28
	0x0370153C LDR X0, [X29]
	0x03701540 LDR W8, [X0 + 0xE0]
	0x03701544 CBNZ W8, 0x370154C
	0x03701548 BL 0x1C16DFC
	0x0370154C ADD X0, X31, 0x388
	0x03701550 ADD X1, X31, 0x418
	0x03701554 BL 0x3700D2C
	0x03701558 MOV W20, W0
	0x0370155C CBZ W19, 0x37016EC
	0x03701560 LDR W8, [X31 + 0x388]
	0x03701564 CBZ W8, 0x37016EC
	0x03701568 ADD W8, W20, 0x30
	0x0370156C STRB W8, [X22], #0x1
	0x03701570 LDR X0, [X29]
	0x03701574 LDR W8, [X0 + 0xE0]
	0x03701578 CBNZ W8, 0x3701580
	0x0370157C BL 0x1C16DFC
	0x03701580 ADD X0, X31, 0x388
	0x03701584 BL 0x3700710
	0x03701588 ADD W19, W19, 0x1
	0x0370158C B 0x370153C
	0x03701590 ADD X8, X31, 0x388
	0x03701594 ADD X26, X31, 0x2F8
	0x03701598 ADD X9, X31, 0x28
	0x0370159C STR X27, [X31 + 0x10]
	0x037015A0 MOV X22, X28
	0x037015A4 ORR X28, X8, 0x7
	0x037015A8 ORR X27, X26, 0x7
	0x037015AC ORR X19, X9, 0x7
	0x037015B0 LDR X0, [X29]
	0x037015B4 LDR W8, [X0 + 0xE0]
	0x037015B8 CBNZ W8, 0x37015C0
	0x037015BC BL 0x1C16DFC
	0x037015C0 ADD X0, X31, 0x388
	0x037015C4 ADD X1, X31, 0x418
	0x037015C8 BL 0x3700D2C
	0x037015CC MOV W20, W0
	0x037015D0 ADD X0, X31, 0x28
	0x037015D4 ADD X1, X31, 0x388
	0x037015D8 MOV X2, X21
	0x037015DC BL 0x370034C
	0x037015E0 LDR W9, [X31 + 0x388]
	0x037015E4 LDR W8, [X31 + 0x2F8]
	0x037015E8 SUBS W8, W9, W8
	0x037015EC B.NE 0x370161C
	0x037015F0 SUB W8, W9, 0x1
	0x037015F4 TBNZ X8, 0x1F, 0x3701618

ISIL:
	001 Move W12, [X1]
	002 Move W13, [X2]
	003 Add W8, W13, W12
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X11, -46227456
	006 Move V0, [X11+121]
	007 Move W10, W8
	008 Add X12, X10, 1
	009 Subtract X13, X10, 1
	010 Move W11, 2
	011 Add X9, X0, 4
	012 And X10, X12, 0
	013 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	014 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	015 NotImplemented "Instruction INVALID not yet implemented."
	016 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	017 Move W11, S3
	018 Move TEMP, X11
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {23}
	022 Move [X9], W31
	023 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	024 Move TEMP, X11
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 Invalid "Jump target not found in method."
	028 Move [X9+4], W31
	029 NotImplemented "Instruction INVALID not yet implemented."
	030 Subtract X10, X10, 2
	031 Add X9, X9, 8
	032 Move W12, [X1]
	033 Move W13, [X2]
	034 Add X9, X0, 4
	035 Compare W13, 0
	036 JumpIfEqual {61}
	037 Add X10, X1, 4
	038 Add X11, X2, 4
	039 Add X12, X10, W12
	040 Add X13, X11, W13
	041 Move X14, X9
	042 Move W15, [X11]
	043 Compare W15, 0
	044 JumpIfEqual {58}
	045 Move X1, X31
	046 Move X16, X14
	047 Move X17, X10
	048 Move W2, [X16]
	049 Move W3, [X17+4]
	050 Add X1, X1, X2
	051 NotImplemented "Instruction MADD not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X1, X2
	054 ShiftRight X1, 32
	055 And X1, X1, 0x7FFFFFFF
	056 Move [X16+4], W2
	057 Move [X16], W1
	058 Add X11, X11, 4
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Add X14, X14, 4
	061 Subtract W10, W8, 1
	062 Move W9, [X9]
	063 Compare W9, 0
	064 JumpIfNotEqual {66}
	065 Move W8, W10
	066 Move [X0], W8
	067 Return 

Method: System.Void BigInt_Multiply(out Unity.Burst.BurstString/tBigInt pResult, in Unity.Burst.BurstString/tBigInt lhs, System.UInt32 rhs)

Disassembly:
	0x037015F8 LDR W9, [X28, W8, UXTW]
	0x037015FC LDR W10, [X27, W8, UXTW]
	0x03701600 SUB W8, W8, 0x1
	0x03701604 CMP W9, W10
	0x03701608 B.EQ 0x37015F4
	0x0370160C MOVZ W8, 0x1
	0x03701610 CSNEG W8, W8, W8, HI
	0x03701614 B 0x370161C
	0x03701618 MOV W8, W31
	0x0370161C LDR W10, [X31 + 0x28]
	0x03701620 LDR W9, [X31 + 0x418]
	0x03701624 SUB W24, W24, 0x1
	0x03701628 SUBS W9, W10, W9
	0x0370162C B.NE 0x370165C
	0x03701630 SUB W9, W10, 0x1
	0x03701634 TBNZ X9, 0x1F, 0x3701658
	0x03701638 LDR W10, [X19, W9, UXTW]
	0x0370163C LDR W11, [X23, W9, UXTW]
	0x03701640 SUB W9, W9, 0x1
	0x03701644 CMP W10, W11
	0x03701648 B.EQ 0x3701634
	0x0370164C MOVZ W9, 0x1
	0x03701650 CSNEG W9, W9, W9, HI
	0x03701654 B 0x370165C

ISIL:
	001 Move X11, X1
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Compare W9, 0
	004 JumpIfEqual {26}
	005 Move X8, X31
	006 Move X10, X9
	007 ShiftRight X10, 62
	008 And X10, X10, 0x1FFFFFFF
	009 Add X9, X0, 4
	010 Move W12, W2
	011 Add X13, X11, 4
	012 Move W14, [X11]
	013 Move X11, X13
	014 Subtract X10, X10, 4
	015 Add X13, X13, 4
	016 NotImplemented "Instruction MADD not yet implemented."
	017 Move [X9+4], W8
	018 Move X8, X8
	019 ShiftRight X8, 32
	020 And X8, X8, 0x7FFFFFFF
	021 Compare W8, 0
	022 JumpIfEqual {26}
	023 Move [X9], W8
	024 Move W8, [X1]
	025 Add W8, W8, 1
	026 Move W8, [X1]
	027 Move [X0], W8
	028 Return 

Method: System.Void BigInt_Multiply2(out Unity.Burst.BurstString/tBigInt pResult, in Unity.Burst.BurstString/tBigInt input)

Disassembly:
	0x03701658 MOV W9, W31
	0x0370165C CMP W9, 0x0
	0x03701660 CSET W10, GT
	0x03701664 CMP W24, W25
	0x03701668 CSET W11, EQ
	0x0370166C ORR W11, W11, W8, 0x1F
	0x03701670 ORR W10, W11, W10, 0x0
	0x03701674 CBNZ W10, 0x37016C8
	0x03701678 ADD W8, W20, 0x30
	0x0370167C STRB W8, [X22], #0x1
	0x03701680 LDR X0, [X29]
	0x03701684 LDR W8, [X0 + 0xE0]
	0x03701688 CBNZ W8, 0x3701690
	0x0370168C BL 0x1C16DFC
	0x03701690 ADD X0, X31, 0x388
	0x03701694 BL 0x3700710
	0x03701698 ADD X0, X31, 0x2F8
	0x0370169C BL 0x3700710
	0x037016A0 CMP X21, X26
	0x037016A4 B.EQ 0x37015B0
	0x037016A8 LDR X0, [X29]
	0x037016AC LDR W8, [X0 + 0xE0]
	0x037016B0 CBNZ W8, 0x37016B8

ISIL:
	001 Move X10, X1
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Compare W9, 0
	004 JumpIfEqual {24}
	005 Move W8, W31
	006 Move X11, X9
	007 ShiftRight X11, 62
	008 And X11, X11, 0x1FFFFFFF
	009 Add X9, X0, 4
	010 Add X12, X10, 4
	011 Move W13, [X10]
	012 Move X10, X12
	013 Subtract X11, X11, 4
	014 Add X12, X12, 4
	015 Or W14, W8, W13
	016 Move W8, W13
	017 ShiftRight W8, 31
	018 And W8, W8, 0x7FFFFFFF
	019 Move [X9+4], W14
	020 Move TEMP, X13
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {25}
	024 Move W8, [X1]
	025 Move [X9], W8
	026 Move W8, [X1]
	027 Add W8, W8, 1
	028 Move [X0], W8
	029 Return 

Method: System.Void BigInt_Multiply2(ref Unity.Burst.BurstString/tBigInt pResult)

Disassembly:
	0x037016B4 BL 0x1C16DFC
	0x037016B8 ADD X1, X31, 0x2F8
	0x037016BC MOV X0, X21
	0x037016C0 BL 0x3700658
	0x037016C4 B 0x37015B0
	0x037016C8 CMP W9, 0x0
	0x037016CC CSET W9, GT
	0x037016D0 CMP W8, 0x0
	0x037016D4 CSET W10, LT
	0x037016D8 EOR W9, W10, W9, 0x0
	0x037016DC TBZ X9, 0x0, 0x37016E8
	0x037016E0 LDP X27, X28, [X31 + 0x10]
	0x037016E4 B 0x3701718
	0x037016E8 LDP X27, X28, [X31 + 0x10]
	0x037016EC LDR X0, [X29]
	0x037016F0 LDR W8, [X0 + 0xE0]
	0x037016F4 CBNZ W8, 0x37016FC
	0x037016F8 BL 0x1C16DFC
	0x037016FC ADD X0, X31, 0x388
	0x03701700 ADD X19, X31, 0x388
	0x03701704 BL 0x37006B4
	0x03701708 LDR W9, [X31 + 0x388]
	0x0370170C LDR W8, [X31 + 0x418]

ISIL:
	001 Move X8, X0
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Compare W10, 0
	004 JumpIfEqual {25}
	005 Move X10, X10
	006 ShiftRight X10, 62
	007 And X10, X10, 0x1FFFFFFF
	008 Move W9, W31
	009 Add X11, X8, 4
	010 Move X12, X10
	011 Move X13, X8
	012 Move W14, [X13]
	013 Subtract X12, X12, 4
	014 Or W15, W9, W14
	015 Move W9, W14
	016 ShiftRight W9, 31
	017 And W9, W9, 0x7FFFFFFF
	018 Move [X13], W15
	019 Move X13, X11
	020 Add X11, X11, 4
	021 Move TEMP, X14
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {26}
	025 Return 
	026 Move [X8], W9
	027 Move W8, [X0]
	028 Add W8, W8, 1
	029 Move [X0], W8
	030 Return 

Method: System.Void BigInt_Multiply10(ref Unity.Burst.BurstString/tBigInt pResult)

Disassembly:
	0x03701710 SUBS W8, W9, W8
	0x03701714 B.EQ 0x370174C
	0x03701718 TBNZ X8, 0x1F, 0x3701780
	0x0370171C CMP W20, 0x9
	0x03701720 B.NE 0x3701774
	0x03701724 CMP X22, X28
	0x03701728 B.EQ 0x37017BC
	0x0370172C MOV X8, X22
	0x03701730 LDRB W9, [X22 - 0x1]!
	0x03701734 CMP W9, 0x39
	0x03701738 B.EQ 0x3701724
	0x0370173C ADD W9, W9, 0x1
	0x03701740 STURB W9, [X8 - 0x1]
	0x03701744 MOV X22, X8
	0x03701748 B 0x3701788
	0x0370174C ORR X8, X19, 0x7
	0x03701750 SUB W9, W9, 0x1
	0x03701754 TBNZ X9, 0x1F, 0x370177C
	0x03701758 LDR W10, [X8, W9, UXTW]
	0x0370175C LDR W11, [X23, W9, UXTW]
	0x03701760 SUB W9, W9, 0x1
	0x03701764 CMP W10, W11
	0x03701768 B.EQ 0x3701754

ISIL:
	001 Move X8, X0
	002 NotImplemented "Instruction LDRSW not yet implemented."
	003 Compare W10, 0
	004 JumpIfEqual {28}
	005 Move X10, X10
	006 ShiftRight X10, 62
	007 And X10, X10, 0x1FFFFFFF
	008 Move X9, X31
	009 Add X11, X8, 4
	010 Move W12, 10
	011 Move X13, X10
	012 Move X14, X8
	013 Move W15, [X14]
	014 Subtract X13, X13, 4
	015 NotImplemented "Instruction MADD not yet implemented."
	016 Move [X14], W9
	017 Move X9, X9
	018 ShiftRight X9, 32
	019 And X9, X9, 0x7FFFFFFF
	020 Move X14, X11
	021 Add X11, X11, 4
	022 Compare X9, 0
	023 JumpIfEqual {28}
	024 Move [X8], W9
	025 Move W8, [X0]
	026 Add W8, W8, 1
	027 Move [X0], W8
	028 Return 

Method: Unity.Burst.BurstString/tBigInt g_PowerOf10_Big(System.Int32 i)

Disassembly:
	0x0370176C B.HI 0x370171C
	0x03701770 B 0x3701780
	0x03701774 ADD W8, W20, 0x31
	0x03701778 B 0x3701784
	0x0370177C TBNZ X20, 0x0, 0x370171C
	0x03701780 ADD W8, W20, 0x30
	0x03701784 STRB W8, [X22], #0x1
	0x03701788 SUB W0, W22, W28
	0x0370178C LDR X8, [X27 + 0x28]
	0x03701790 LDR X9, [X31 + 0x4A8]
	0x03701794 CMP X8, X9
	0x03701798 B.NE 0x37017DC
	0x0370179C ADD X31, X31, 0x4B0
	0x037017A0 LDP X20, X19, [X31 + 0x50]
	0x037017A4 LDP X22, X21, [X31 + 0x40]
	0x037017A8 LDP X24, X23, [X31 + 0x30]
	0x037017AC LDP X26, X25, [X31 + 0x20]
	0x037017B0 LDP X28, X27, [X31 + 0x10]
	0x037017B4 LDP X29, X30, [X31], #0x60
	0x037017B8 RET
	0x037017BC LDR X9, [X31 + 0x20]
	0x037017C0 MOVZ W8, 0x31
	0x037017C4 MOV X22, X28
	0x037017C8 STRB W8, [X22], #0x1
	0x037017CC LDR W8, [X9]
	0x037017D0 ADD W8, W8, 0x1
	0x037017D4 STR W8, [X9]
	0x037017D8 B 0x3701788
	0x037017DC BL 0x3EB1B20
	0x037017E0 UBFM X8, X1, 0x20, 0x3F
	0x037017E4 CBZ X8, 0x37017F4
	0x037017E8 STUR X1, [X0 + 0x4]
	0x037017EC MOVZ W8, 0x2
	0x037017F0 B 0x3701808
	0x037017F4 CBZ X1, 0x3701804
	0x037017F8 MOVZ W8, 0x1
	0x037017FC STR W1, [X0 + 0x4]
	0x03701800 B 0x3701808
	0x03701804 MOV W8, W31
	0x03701808 STR W8, [X0]
	0x0370180C RET
	0x03701810 ADD X8, X0, W1, 0x2, SXTW
	0x03701814 LDR W0, [X8 + 0x4]
	0x03701818 RET
	0x0370181C LDR W8, [X0]
	0x03701820 CMP W8, 0x0
	0x03701824 CSET W0, EQ
	0x03701828 RET
	0x0370182C SUB X31, X31, 0x70
	0x03701830 STP X30, X27, [X31 + 0x20]
	0x03701834 STP X26, X25, [X31 + 0x30]
	0x03701838 STP X24, X23, [X31 + 0x40]
	0x0370183C STP X22, X21, [X31 + 0x50]
	0x03701840 STP X20, X19, [X31 + 0x60]
	0x03701844 ADRP X27, 0xCDF000
	0x03701848 ADRP X21, 0xA3F000
	0x0370184C LDRB W8, [X27 + 0xC32]
	0x03701850 LDR X21, [X21 + 0xF78]
	0x03701854 MOV W20, W6
	0x03701858 MOV W26, W5
	0x0370185C MOV W23, W4
	0x03701860 MOV W24, W3
	0x03701864 MOV X25, X2
	0x03701868 MOV W22, W1
	0x0370186C MOV X19, X0
	0x03701870 TBNZ X8, 0x0, 0x3701888
	0x03701874 ADRP X0, 0xA3F000
	0x03701878 LDR X0, [X0 + 0xF78]
	0x0370187C BL 0x1C16CF4
	0x03701880 MOVZ W8, 0x1
	0x03701884 STRB W8, [X27 + 0xC32]
	0x03701888 LDR X0, [X21]
	0x0370188C STR W31, [X31 + 0x1C]
	0x03701890 SUB W21, W22, 0x1
	0x03701894 LDR W8, [X0 + 0xE0]
	0x03701898 CBNZ W8, 0x37018A0
	0x0370189C BL 0x1C16DFC
	0x037018A0 ADD X8, X31, 0x1C
	0x037018A4 AND W3, W26, 0x1
	0x037018A8 TBNZ X20, 0x1F, 0x37018C8
	0x037018AC MOVZ W4, 0x2
	0x037018B0 MOV X0, X25
	0x037018B4 MOV W1, W24
	0x037018B8 MOV W2, W23
	0x037018BC MOV W5, W20
	0x037018C0 STR X8, [X31]
	0x037018C4 B 0x37018E0
	0x037018C8 STR X8, [X31]
	0x037018CC MOV X0, X25
	0x037018D0 MOV W1, W24
	0x037018D4 MOV W2, W23
	0x037018D8 MOV W4, W31
	0x037018DC MOV W5, W31
	0x037018E0 MOV X6, X19
	0x037018E4 MOV W7, W21
	0x037018E8 BL 0x3701008
	0x037018EC LDR W24, [X31 + 0x1C]
	0x037018F0 TBNZ X24, 0x1F, 0x3701940
	0x037018F4 CMP W0, W24
	0x037018F8 ADD X8, X24, 0x1
	0x037018FC B.LS 0x37019F0
	0x03701900 SUBS W9, W0, W8
	0x03701904 B.LS 0x3701A70
	0x03701908 SUB W10, W21, W24
	0x0370190C ADD X23, X8, X19
	0x03701910 SUB W8, W10, 0x2
	0x03701914 CMP W9, W8
	0x03701918 CSEL W22, W8, W9, HI
	0x0370191C ADD X0, X23, 0x1
	0x03701920 MOV X1, X23
	0x03701924 MOV X2, X22
	0x03701928 BL 0x3EB1AC0
	0x0370192C MOVZ W8, 0x2E
	0x03701930 ADD W9, W24, W22
	0x03701934 STRB W8, [X23]
	0x03701938 ADD W0, W9, 0x2
	0x0370193C B 0x3701AA4
	0x03701940 CMP W21, 0x3
	0x03701944 B.CC 0x3701A78
	0x03701948 ORN W8, W31, W24, 0x0
	0x0370194C SUB W9, W22, 0x3
	0x03701950 CMP W9, W8
	0x03701954 CSINV W23, W9, W24, CC
	0x03701958 ADD W24, W23, 0x2
	0x0370195C SUB W8, W21, W24
	0x03701960 CMP W0, W8
	0x03701964 CSEL W22, W8, W0, HI
	0x03701968 ADD X0, X24, X19
	0x0370196C MOV X1, X19
	0x03701970 MOV X2, X22
	0x03701974 BL 0x3EB1AC0
	0x03701978 CBZ W23, 0x37019E4
	0x0370197C ADRP X10, 0xFFFFFFFFFD3E9000
	0x03701980 CMP W24, 0x3
	0x03701984 MOVZ W9, 0x3
	0x03701988 LDR V0, [X10 + 0x79]
	0x0370198C CSEL W9, W24, W9, HI
	0x03701990 SUB X10, X9, 0x1
	0x03701994 SUB X11, X9, 0x3
	0x03701998 MOV X8, X31
	0x0370199C AND X9, X10, 0xFFFFFFFF
	0x037019A0 UNIMPLEMENTED
	0x037019A4 MOVZ W10, 0x30
	0x037019A8 UNIMPLEMENTED
	0x037019AC ORR V2.16B, V2.16B, V0.16B
	0x00000000 INVALID

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+160], X30
	003 Move [X31+168], X21
	004 Move [X31+176], X20
	005 Move [X31+184], X19
	006 NotImplemented "Instruction MRS not yet implemented."
	007 Move X19, X8
	008 Move X8, [X21+40]
	009 Move W20, W0
	010 Add X0, X31, 8
	011 Move W2, 144
	012 Move W1, W31
	013 Move [X31+152], X8
	014 Call 0x3EB2B10
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X9, -45518848
	017 Move W8, W20
	018 Add X9, X9, 2086
	019 NotImplemented "Instruction ADR not yet implemented."
	020 Move W11, [X9]
	021 Add X10, X10, X11
	022 CallNoReturn X10
	023 Move X8, -46215168
	024 Move V0, [X8+2944]
	025 Move X8, -46215168
	026 Move X10, 0x9909
	027 Move V0, [X8+3688]
	028 Move X8, 0xE42F
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 NotImplemented "Instruction MOVK not yet implemented."
	031 Move X9, 0x3E01
	032 NotImplemented "Instruction MOVK not yet implemented."
	033 NotImplemented "Instruction MOVK not yet implemented."
	034 NotImplemented "Instruction MOVK not yet implemented."
	035 NotImplemented "Instruction MOVK not yet implemented."
	036 NotImplemented "Instruction MOVK not yet implemented."
	037 Move [X31+16], X31
	038 Move [X31+24], X9
	039 Move X9, 0xDC08
	040 Move [X31+32], X10
	041 Move [X31+40], X8
	042 Move X8, 0x7F19
	043 NotImplemented "Instruction MOVK not yet implemented."
	044 NotImplemented "Instruction MOVK not yet implemented."
	045 NotImplemented "Instruction MOVK not yet implemented."
	046 NotImplemented "Instruction MOVK not yet implemented."
	047 NotImplemented "Instruction MOVK not yet implemented."
	048 NotImplemented "Instruction MOVK not yet implemented."
	049 Move [X31+48], X9
	050 Move [X31+56], X8
	051 Move W8, 590
	052 Move [X31+8], D0
	053 Move [X31+64], W8
	054 Move X8, -46215168
	055 Move V0, [X8+976]
	056 Move X8, 0xEF81
	057 NotImplemented "Instruction MOVK not yet implemented."
	058 NotImplemented "Instruction MOVK not yet implemented."
	059 NotImplemented "Instruction MOVK not yet implemented."
	060 Move W9, 1262
	061 Move [X31+16], X8
	062 Move [X31+8], D0
	063 Move [X31+24], W9
	064 Move X8, -46215168
	065 Move X10, 0xED64
	066 Move V0, [X8+2920]
	067 Move X8, 0xF9F4
	068 NotImplemented "Instruction MOVK not yet implemented."
	069 NotImplemented "Instruction MOVK not yet implemented."
	070 Move X9, 0x1F01
	071 NotImplemented "Instruction MOVK not yet implemented."
	072 NotImplemented "Instruction MOVK not yet implemented."
	073 NotImplemented "Instruction MOVK not yet implemented."
	074 NotImplemented "Instruction MOVK not yet implemented."
	075 NotImplemented "Instruction MOVK not yet implemented."
	076 Move [X31+16], X9
	077 Move [X31+24], X10
	078 Move [X31+8], D0
	079 Move [X31+32], X8
	080 Move X8, -46215168
	081 Move V0, [X8+1480]
	082 Move W8, 0x86F2
	083 NotImplemented "Instruction MOVK not yet implemented."
	084 Move [X31+16], W8
	085 Move [X31+8], D0
	086 Move X10, 0x875B
	087 Move X11, 0x2F87
	088 NotImplemented "Instruction MOVK not yet implemented."
	089 NotImplemented "Instruction MOVK not yet implemented."
	090 Move X9, 0x7C01
	091 NotImplemented "Instruction MOVK not yet implemented."
	092 NotImplemented "Instruction MOVK not yet implemented."
	093 Move X8, -46215168
	094 NotImplemented "Instruction MOVK not yet implemented."
	095 NotImplemented "Instruction MOVK not yet implemented."
	096 NotImplemented "Instruction MOVK not yet implemented."
	097 Move X12, 0x6E70
	098 Move V0, [X8+2776]
	099 Move X8, 0x716E
	100 Move [X31+32], X31
	101 Move [X31+40], X9
	102 Move X9, 0x3624
	103 Move [X31+48], X10
	104 Move [X31+56], X11
	105 Move X10, 0x540E
	106 NotImplemented "Instruction MOVK not yet implemented."
	107 NotImplemented "Instruction MOVK not yet implemented."
	108 NotImplemented "Instruction MOVK not yet implemented."
	109 NotImplemented "Instruction MOVK not yet implemented."
	110 NotImplemented "Instruction MOVK not yet implemented."
	111 NotImplemented "Instruction MOVK not yet implemented."
	112 NotImplemented "Instruction MOVK not yet implemented."
	113 NotImplemented "Instruction MOVK not yet implemented."
	114 NotImplemented "Instruction MOVK not yet implemented."
	115 NotImplemented "Instruction MOVK not yet implemented."
	116 NotImplemented "Instruction MOVK not yet implemented."
	117 NotImplemented "Instruction MOVK not yet implemented."
	118 Move [X31+64], X12
	119 Move [X31+72], X8
	120 Move X8, 0xEF17
	121 Move [X31+80], X9
	122 Move [X31+88], X10
	123 Move X9, 0xC7F7
	124 NotImplemented "Instruction MOVK not yet implemented."
	125 NotImplemented "Instruction MOVK not yet implemented."
	126 NotImplemented "Instruction MOVK not yet implemented."
	127 NotImplemented "Instruction MOVK not yet implemented."
	128 NotImplemented "Instruction MOVK not yet implemented."
	129 NotImplemented "Instruction MOVK not yet implemented."
	130 Move [X31+96], X8
	131 Move [X31+104], X9
	132 Move X8, 0xEFCE
	133 NotImplemented "Instruction MOVK not yet implemented."
	134 NotImplemented "Instruction MOVK not yet implemented."
	135 NotImplemented "Instruction MOVK not yet implemented."
	136 Move [X31+16], X31
	137 Move [X31+24], X31
	138 Move [X31+8], D0
	139 Move [X31+112], X8
	140 Add X1, X31, 8
	141 Move W2, 144
	142 Move X0, X19
	143 Call 0x3EB2AC0
	144 Move X8, [X21+40]
	145 Move X9, [X31+152]
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move X20, [X31+176]
	148 Move X19, [X31+184]
	149 Move X30, [X31+160]
	150 Move X21, [X31+168]
	151 Add X31, X31, 192
	152 Return X0
	153 Call 0x3EB2B20

Method: System.Void BigInt_Pow10(out Unity.Burst.BurstString/tBigInt pResult, System.UInt32 exponent)

Disassembly:
	0x037019B4 UNIMPLEMENTED
	0x037019B8 FMOV W11, S2
	0x037019BC TBZ X11, 0x0, 0x37019C8
	0x037019C0 ADD X11, X19, X8
	0x037019C4 STRB W10, [X11 + 0x2]
	0x037019C8 UNIMPLEMENTED
	0x037019CC TBZ X11, 0x0, 0x37019D8
	0x037019D0 ADD X11, X19, X8
	0x037019D4 STRB W10, [X11 + 0x3]
	0x037019D8 ADD X8, X8, 0x2
	0x037019DC CMP X9, X8
	0x037019E0 B.NE 0x37019A8
	0x037019E4 ADD W22, W22, W23
	0x037019E8 MOV W0, W22
	0x037019EC B 0x3701A7C
	0x037019F0 CMP W24, W21
	0x037019F4 CSEL W8, W8, W21, CC
	0x037019F8 CMP W0, W8
	0x037019FC B.CS 0x3701A70
	0x03701A00 ADRP X11, 0xFFFFFFFFFD3E9000
	0x03701A04 MOV W10, W8
	0x03701A08 LDR V0, [X11 + 0x79]
	0x03701A0C SUB X10, X10, W0, UXTW
	0x03701A10 ADD X11, X10, 0x1
	0x03701A14 SUB X12, X10, 0x1
	0x03701A18 MOV X9, X31
	0x03701A1C AND X10, X11, 0xFFFFFFFF
	0x03701A20 UNIMPLEMENTED
	0x03701A24 ADD X11, X19, W0, UXTW
	0x03701A28 MOVZ W12, 0x30
	0x03701A2C UNIMPLEMENTED
	0x03701A30 ORR V2.16B, V2.16B, V0.16B
	0x00000000 INVALID
	0x03701A38 UNIMPLEMENTED
	0x03701A3C FMOV W13, S2
	0x03701A40 TBZ X13, 0x0, 0x3701A48
	0x03701A44 STRB W12, [X11, X9, LSL]
	0x03701A48 UNIMPLEMENTED
	0x03701A4C TBZ X13, 0x0, 0x3701A58
	0x03701A50 ADD X13, X11, X9
	0x03701A54 STRB W12, [X13 + 0x1]
	0x03701A58 ADD X9, X9, 0x2
	0x03701A5C CMP X10, X9
	0x03701A60 B.NE 0x3701A2C
	0x03701A64 MOV W22, W31
	0x03701A68 MOV W0, W8
	0x03701A6C B 0x3701AA4
	0x03701A70 MOV W22, W31
	0x03701A74 B 0x3701AA4
	0x03701A78 MOV W22, W31
	0x03701A7C CMP W21, 0x2
	0x03701A80 B.CC 0x3701A94
	0x03701A84 MOVZ W8, 0x2E
	0x03701A88 STRB W8, [X19 + 0x1]
	0x03701A8C ADD W0, W0, 0x1
	0x03701A90 B 0x3701A98
	0x03701A94 CBZ W21, 0x3701AA4
	0x03701A98 MOVZ W8, 0x30
	0x03701A9C ADD W0, W0, 0x1
	0x03701AA0 STRB W8, [X19]
	0x03701AA4 CMP W22, W20
	0x03701AA8 B.GE 0x3701B48
	0x03701AAC CMP W0, W21
	0x03701AB0 B.CS 0x3701B48
	0x03701AB4 CBNZ W22, 0x3701AC8
	0x03701AB8 ADD W8, W0, 0x1
	0x03701ABC MOVZ W9, 0x2E
	0x03701AC0 STRB W9, [X19, W0, UXTW]
	0x03701AC4 MOV W0, W8
	0x03701AC8 SUB W8, W20, W22
	0x03701ACC ADD W8, W0, W8
	0x03701AD0 CMP W21, W8
	0x03701AD4 CSEL W8, W21, W8, CC
	0x03701AD8 CMP W0, W8
	0x03701ADC B.CS 0x3701B48
	0x03701AE0 ADRP X11, 0xFFFFFFFFFD3E9000
	0x03701AE4 MOV W10, W8
	0x03701AE8 LDR V0, [X11 + 0x79]
	0x03701AEC SUB X10, X10, W0, UXTW
	0x03701AF0 ADD X11, X10, 0x1
	0x03701AF4 SUB X12, X10, 0x1
	0x03701AF8 MOV X9, X31
	0x03701AFC AND X10, X11, 0xFFFFFFFF
	0x03701B00 UNIMPLEMENTED
	0x03701B04 ADD X11, X19, W0, UXTW
	0x03701B08 MOVZ W12, 0x30
	0x03701B0C UNIMPLEMENTED
	0x03701B10 ORR V2.16B, V2.16B, V0.16B
	0x00000000 INVALID
	0x03701B18 UNIMPLEMENTED
	0x03701B1C FMOV W13, S2
	0x03701B20 TBZ X13, 0x0, 0x3701B28
	0x03701B24 STRB W12, [X11, X9, LSL]

ISIL:
	001 Move [X31-64], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Subtract X31, X31, 592
	009 NotImplemented "Instruction MRS not yet implemented."
	010 Move X8, [X21+40]
	011 Move X23, 0xCE0000
	012 Move X22, 0xA40000
	013 Move W20, W1
	014 Move [X31+584], X8
	015 Move W8, [X23+3118]
	016 Move X22, [X22+3960]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA40000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3118], W8
	027 Add X0, X31, 152
	028 Move W2, 144
	029 Move W1, W31
	030 Call 0x3EB2B10
	031 Add X0, X31, 440
	032 Move W2, 144
	033 Move W1, W31
	034 Call 0x3EB2B10
	035 Add X0, X31, 296
	036 Move W2, 144
	037 Move W1, W31
	038 Call 0x3EB2B10
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X22]
	045 Move X8, [X0+184]
	046 Move X8, [X8+16]
	047 Compare X8, 0
	048 JumpIfEqual {111}
	049 Move W10, [X8+24]
	050 And W9, W20, 7
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X8, X8, W9
	053 Move W8, [X8+32]
	054 Compare W8, 0
	055 JumpIfEqual {58}
	056 Move [X31+444], W8
	057 Move W8, 1
	058 Move W23, W20
	059 ShiftRight W23, 3
	060 And W23, W23, 0x7FFFFFFF
	061 Move [X31+440], W8
	062 Compare W23, 0
	063 JumpIfEqual {95}
	064 Move W20, W31
	065 Move TEMP, X23
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {89}
	069 Move X0, [X22]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Add X8, X31, 8
	075 Move W0, W20
	076 Call BurstString.g_PowerOf10_Big, X0
	077 Add X0, X31, 152
	078 Add X1, X31, 8
	079 Move W2, 144
	080 Call 0x3EB2AC0
	081 Add X0, X31, 296
	082 Add X1, X31, 440
	083 Add X2, X31, 152
	084 Call BurstString.BigInt_Multiply, X0, X1, X2
	085 Add X0, X31, 440
	086 Add X1, X31, 296
	087 Move W2, 144
	088 Call 0x3EB2AC0
	089 Move W23, W23
	090 ShiftRight W23, 1
	091 And W23, W23, 0x7FFFFFFF
	092 Add W20, W20, 1
	093 Compare W23, 0
	094 JumpIfNotEqual {65}
	095 Add X1, X31, 440
	096 Move W2, 144
	097 Move X0, X19
	098 Call 0x3EB2AC0
	099 Move X8, [X21+40]
	100 Move X9, [X31+584]
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Add X31, X31, 592
	103 Move X20, [X31+48]
	104 Move X19, [X31+56]
	105 Move X22, [X31+32]
	106 Move X21, [X31+40]
	107 Move X30, [X31+16]
	108 Move X23, [X31+24]
	109 Move X29, [X31+64]
	110 Return 
	111 Call 0x1C17F20
	112 Call 0x1C17F28
	113 Call 0x3EB2B20

Method: System.Void BigInt_MultiplyPow10(out Unity.Burst.BurstString/tBigInt pResult, in Unity.Burst.BurstString/tBigInt input, System.UInt32 exponent)

Disassembly:
	0x03701B44 MOV W0, W8
	0x03701B48 LDP X20, X19, [X31 + 0x60]
	0x03701B4C LDP X22, X21, [X31 + 0x50]
	0x03701B50 LDP X24, X23, [X31 + 0x40]
	0x03701B54 LDP X26, X25, [X31 + 0x30]
	0x03701B58 LDP X30, X27, [X31 + 0x20]
	0x03701B5C ADD X31, X31, 0x70
	0x03701B60 RET
	0x03701B64 STP X29, X30, [X31 - 0x60]!
	0x03701B68 STR X27, [X31 + 0x10]
	0x03701B6C STP X26, X25, [X31 + 0x20]
	0x03701B70 STP X24, X23, [X31 + 0x30]
	0x03701B74 STP X22, X21, [X31 + 0x40]
	0x03701B78 STP X20, X19, [X31 + 0x50]
	0x03701B7C ADD X29, X31, 0x0
	0x03701B80 ADRP X27, 0xCDF000
	0x03701B84 ADRP X26, 0xA3F000
	0x03701B88 LDRB W8, [X27 + 0xC33]
	0x03701B8C LDR X26, [X26 + 0xF78]
	0x03701B90 MOV W21, W6
	0x03701B94 MOV W25, W5
	0x03701B98 MOV W20, W4
	0x03701B9C MOV W23, W3
	0x03701BA0 MOV X24, X2
	0x03701BA4 MOV W22, W1
	0x03701BA8 MOV X19, X0
	0x03701BAC TBNZ X8, 0x0, 0x3701BC4
	0x03701BB0 ADRP X0, 0xA3F000
	0x03701BB4 LDR X0, [X0 + 0xF78]
	0x03701BB8 BL 0x1C16CF4
	0x03701BBC MOVZ W8, 0x1
	0x03701BC0 STRB W8, [X27 + 0xC33]
	0x03701BC4 LDR X0, [X26]
	0x03701BC8 STR W31, [X29 + 0x1C]
	0x03701BCC LDR W8, [X0 + 0xE0]
	0x03701BD0 CBZ W8, 0x3701BFC
	0x03701BD4 TBNZ X21, 0x1F, 0x3701C04
	0x03701BD8 ADD W5, W21, 0x1
	0x03701BDC ADD X8, X29, 0x1C
	0x03701BE0 AND W3, W25, 0x1
	0x03701BE4 MOVZ W4, 0x1
	0x03701BE8 STR X8, [X31 - 0x10]!
	0x03701BEC MOV X0, X24
	0x03701BF0 MOV W1, W23
	0x03701BF4 MOV W2, W20
	0x03701BF8 B 0x3701C24
	0x03701BFC BL 0x1C16DFC
	0x03701C00 TBZ X21, 0x1F, 0x3701BD8
	0x03701C04 ADD X8, X29, 0x1C
	0x03701C08 AND W3, W25, 0x1
	0x03701C0C STR X8, [X31 - 0x10]!
	0x03701C10 MOV X0, X24
	0x03701C14 MOV W1, W23
	0x03701C18 MOV W2, W20
	0x03701C1C MOV W4, W31
	0x03701C20 MOV W5, W31
	0x03701C24 MOV X6, X19
	0x03701C28 MOV W7, W22
	0x03701C2C BL 0x3701008
	0x03701C30 ADD X31, X31, 0x10
	0x03701C34 CMP W22, 0x2
	0x03701C38 MOV X20, X19
	0x03701C3C B.CC 0x3701DC0
	0x03701C40 SUB W24, W22, 0x1
	0x03701C44 ADD X20, X19, 0x1
	0x03701C48 CMP W24, 0x2
	0x03701C4C SUB W23, W0, 0x1
	0x03701C50 B.CC 0x3701C88
	0x03701C54 CBZ W23, 0x3701C88
	0x03701C58 SUB W8, W22, 0x3
	0x03701C5C CMP W23, W8
	0x03701C60 CSEL W23, W8, W23, HI
	0x03701C64 ADD X0, X19, 0x2
	0x03701C68 MOV X1, X20
	0x03701C6C MOV X2, X23
	0x03701C70 BL 0x3EB1AC0
	0x03701C74 ADD W9, W23, 0x1
	0x03701C78 MOVZ W8, 0x2E
	0x03701C7C ADD X20, X20, W9, SXTW
	0x03701C80 SUB W24, W24, W9
	0x03701C84 STRB W8, [X19 + 0x1]
	0x03701C88 CMP W23, W21
	0x03701C8C B.GE 0x3701CE4
	0x03701C90 CMP W24, 0x2
	0x03701C94 B.CC 0x3701CE4
	0x03701C98 CBNZ W23, 0x3701CA8
	0x03701C9C MOVZ W8, 0x2E
	0x03701CA0 STRB W8, [X20], #0x1
	0x03701CA4 SUB W24, W24, 0x1
	0x03701CA8 SUB W8, W21, W23
	0x03701CAC SUB W9, W24, 0x1
	0x03701CB0 CMP W9, W8
	0x03701CB4 CSEL W9, W9, W8, CC
	0x03701CB8 ADD X8, X9, X20
	0x03701CBC CMP X8, X20
	0x03701CC0 B.LS 0x3701CE4
	0x03701CC4 ADD X10, X20, 0x1
	0x03701CC8 MOVZ W11, 0x30
	0x03701CCC STRB W11, [X20]

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Subtract X31, X31, 592
	010 NotImplemented "Instruction MRS not yet implemented."
	011 Move X8, [X22+40]
	012 Move X23, 0xCE0000
	013 Move W20, W2
	014 Move X21, X1
	015 Move [X31+584], X8
	016 Move W8, [X23+3119]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xA40000
	023 Move X0, [X0+3960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+3119], W8
	027 Move X23, 0xA40000
	028 Move X23, [X23+3960]
	029 Add X0, X31, 152
	030 Move W2, 144
	031 Move W1, W31
	032 Call 0x3EB2B10
	033 Add X0, X31, 440
	034 Move W2, 144
	035 Move W1, W31
	036 Call 0x3EB2B10
	037 Add X0, X31, 296
	038 Move W2, 144
	039 Move W1, W31
	040 Call 0x3EB2B10
	041 And W24, W20, 7
	042 Move X0, [X23]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X23]
	048 Move X8, [X0+184]
	049 Move X8, [X8+16]
	050 Compare X8, 0
	051 JumpIfEqual {116}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Add X8, X8, W24
	055 Move W2, [X8+32]
	056 Add X0, X31, 440
	057 Move X1, X21
	058 Call BurstString.BigInt_Multiply, X0, X1, X2
	059 Add X0, X31, 440
	060 Move W2, 144
	061 Move X1, X21
	062 Call 0x3EB2AC0
	063 Move W21, W20
	064 ShiftRight W21, 3
	065 And W21, W21, 0x7FFFFFFF
	066 Compare W21, 0
	067 JumpIfEqual {99}
	068 Move W20, W31
	069 Move TEMP, X21
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {93}
	073 Move X0, [X23]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Add X8, X31, 8
	079 Move W0, W20
	080 Call BurstString.g_PowerOf10_Big, X0
	081 Add X0, X31, 152
	082 Add X1, X31, 8
	083 Move W2, 144
	084 Call 0x3EB2AC0
	085 Add X0, X31, 296
	086 Add X1, X31, 440
	087 Add X2, X31, 152
	088 Call BurstString.BigInt_Multiply, X0, X1, X2
	089 Add X0, X31, 440
	090 Add X1, X31, 296
	091 Move W2, 144
	092 Call 0x3EB2AC0
	093 Move W21, W21
	094 ShiftRight W21, 1
	095 And W21, W21, 0x7FFFFFFF
	096 Add W20, W20, 1
	097 Compare W21, 0
	098 JumpIfNotEqual {69}
	099 Add X1, X31, 440
	100 Move W2, 144
	101 Move X0, X19
	102 Call 0x3EB2AC0
	103 Move X8, [X22+40]
	104 Move X9, [X31+584]
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Add X31, X31, 592
	107 Move X20, [X31+48]
	108 Move X19, [X31+56]
	109 Move X22, [X31+32]
	110 Move X21, [X31+40]
	111 Move X24, [X31+16]
	112 Move X23, [X31+24]
	113 Move X29, [X31+64]
	114 Move X30, [X31+72]
	115 Return 
	116 Call 0x1C17F20
	117 Call 0x1C17F28
	118 Call 0x3EB2B20

Method: System.Void BigInt_Pow2(out Unity.Burst.BurstString/tBigInt pResult, System.UInt32 exponent)

Disassembly:
	0x03701CD0 MOV X20, X10
	0x03701CD4 SUBS X9, X9, 0x1
	0x03701CD8 ADD X10, X10, 0x1
	0x03701CDC B.NE 0x3701CCC
	0x03701CE0 MOV X20, X8
	0x03701CE4 CMP W24, 0x2
	0x03701CE8 B.CC 0x3701DC0
	0x03701CEC ADD X8, X31, 0x0
	0x03701CF0 SUB X1, X8, 0x10
	0x03701CF4 ADD X31, X1, 0x0
	0x03701CF8 LDR W9, [X29 + 0x1C]
	0x03701CFC MOVZ W10, 0x65
	0x03701D00 STUR W31, [X8 - 0x10]
	0x03701D04 STURB W31, [X8 - 0xC]
	0x03701D08 STURB W10, [X8 - 0x10]
	0x03701D0C ORR X8, X1, 0x1
	0x03701D10 TBNZ X9, 0x1F, 0x3701D24
	0x03701D14 MOVZ W9, 0x2B
	0x03701D18 STRB W9, [X8]
	0x03701D1C LDR W8, [X29 + 0x1C]
	0x03701D20 B 0x3701D34
	0x03701D24 MOVZ W9, 0x2D
	0x03701D28 STRB W9, [X8]

ISIL:
	001 Add W8, W1, 31
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSEL not yet implemented."
	004 Add W31, W1, 31
	005 NotImplemented "Instruction SBFM not yet implemented."
	006 Move X10, X31
	007 Add X9, X0, 4
	008 Move W11, 1
	009 Move [X9], W31
	010 Move W10, W11
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add W11, W11, 1
	013 Add W9, W8, 1
	014 Move [X0], W9
	015 Add X8, X0, X8
	016 Move W9, [X8+4]
	017 Move W10, 1
	018 NotImplemented "Instruction LSLV not yet implemented."
	019 Or W9, W9, W10
	020 Move [X8+4], W9
	021 Return 

Method: System.UInt32 BigInt_DivideWithRemainder_MaxQuotient9(ref Unity.Burst.BurstString/tBigInt pDividend, in Unity.Burst.BurstString/tBigInt divisor)

Disassembly:
	0x03701D2C LDR W8, [X29 + 0x1C]
	0x03701D30 SUB W8, W31, W8
	0x03701D34 MOVZ W9, 0x851F
	0x03701D38 MOVK W9, 0x51EB0000
	0x03701D3C SXTW X10, W8
	0x03701D40 SMADDL X8, X8, X9, X31
	0x03701D44 UBFM X9, X8, 0x3F, 0x3F
	0x03701D48 SBFM X8, X8, 0x25, 0x3F
	0x03701D4C ADD W8, W8, W9
	0x03701D50 ORR X11, X1, 0x3
	0x03701D54 ADD W9, W8, 0x30
	0x03701D58 STRB W9, [X11]
	0x03701D5C MOVZ W9, 0x64
	0x03701D60 ORR X11, X31, 0x6666666666666666
	0x03701D64 MUL W8, W8, W9
	0x03701D68 MOVK X11, 0x6667
	0x03701D6C SUB X8, X10, X8
	0x03701D70 SMULH X10, X8, X11, X31
	0x03701D74 UBFM X11, X10, 0x3F, 0x3F
	0x03701D78 UBFM X10, X10, 0x2, 0x3F
	0x03701D7C MOVN W9, 0x9
	0x03701D80 ADD W10, W10, W11
	0x03701D84 ORR X11, X1, 0x3
	0x03701D88 MADD W8, W10, W9, W8
	0x03701D8C SUB W12, W24, 0x1
	0x03701D90 ADD W10, W10, 0x30
	0x03701D94 STRB W10, [X11]
	0x03701D98 MOVZ W10, 0x5
	0x03701D9C CMP W12, 0x5
	0x03701DA0 CSEL W21, W12, W10, CC
	0x03701DA4 ORR X9, X1, 0x7
	0x03701DA8 ADD W8, W8, 0x30
	0x03701DAC MOV X0, X20
	0x03701DB0 MOV X2, X21
	0x03701DB4 STRB W8, [X9]
	0x03701DB8 BL 0x3EB1AC0
	0x03701DBC ADD X20, X21, X20
	0x03701DC0 SUB W0, W20, W19
	0x03701DC4 ADD X31, X29, 0x0
	0x03701DC8 LDP X20, X19, [X31 + 0x50]
	0x03701DCC LDP X22, X21, [X31 + 0x40]
	0x03701DD0 LDP X24, X23, [X31 + 0x30]
	0x03701DD4 LDP X26, X25, [X31 + 0x20]
	0x03701DD8 LDR X27, [X31 + 0x10]
	0x03701DDC LDP X29, X30, [X31], #0x60
	0x03701DE0 RET
	0x03701DE4 STP X30, X27, [X31 - 0x50]!
	0x03701DE8 STP X26, X25, [X31 + 0x10]
	0x03701DEC STP X24, X23, [X31 + 0x20]
	0x03701DF0 STP X22, X21, [X31 + 0x30]
	0x03701DF4 STP X20, X19, [X31 + 0x40]
	0x03701DF8 ADRP X22, 0xCDF000
	0x03701DFC ADRP X26, 0xA3F000
	0x03701E00 LDRB W8, [X22 + 0xC34]
	0x03701E04 LDR X26, [X26 + 0xF78]
	0x03701E08 MOV X23, X5
	0x03701E0C MOV W24, W4
	0x03701E10 MOV X25, X3
	0x03701E14 MOV W19, W2
	0x03701E18 MOV X20, X1
	0x03701E1C MOV X21, X0
	0x03701E20 TBNZ X8, 0x0, 0x3701E38
	0x03701E24 ADRP X0, 0xA3F000
	0x03701E28 LDR X0, [X0 + 0xF78]
	0x03701E2C BL 0x1C16CF4
	0x03701E30 MOVZ W8, 0x1
	0x03701E34 STRB W8, [X22 + 0xC34]
	0x03701E38 LDR X0, [X26]
	0x03701E3C ANDS W31, W24, 0x1
	0x03701E40 MOVZ W8, 0x8
	0x03701E44 CINC W8, W8, NE
	0x03701E48 LDR W9, [X0 + 0xE0]
	0x03701E4C CMP X25, 0x0
	0x03701E50 MOVZ W10, 0x3
	0x03701E54 CSEL W22, W8, W10, EQ
	0x03701E58 UBFM W27, W23, 0x10, 0xF
	0x03701E5C CBNZ W9, 0x3701E64
	0x03701E60 BL 0x1C16DFC
	0x03701E64 MOVZ W8, 0x1000000
	0x03701E68 CMP W27, W8
	0x03701E6C SBFM W23, W23, 0x8, 0xF
	0x03701E70 B.LT 0x3701EA4
	0x03701E74 CMP W22, W23
	0x03701E78 B.GE 0x3701EA4
	0x03701E7C SUB W8, W23, W22
	0x03701E80 MOVZ W9, 0x20
	0x03701E84 LDRSW X10, [X20]
	0x03701E88 CMP W10, W19
	0x03701E8C B.GE 0x3701FC0
	0x03701E90 ADD W11, W10, 0x1
	0x03701E94 SUBS W8, W8, 0x1
	0x03701E98 STR W11, [X20]
	0x03701E9C STRB W9, [X10, X21, LSL]
	0x03701EA0 B.NE 0x3701E84
	0x03701EA4 CBZ X25, 0x3701F08
	0x03701EA8 MOV X24, X31
	0x03701EAC LDRSW X25, [X20]
	0x03701EB0 CMP W25, W19
	0x03701EB4 B.GE 0x3701FC0
	0x03701EB8 ADD W8, W25, 0x1
	0x03701EBC STR W8, [X20]
	0x03701EC0 LDR X0, [X26]
	0x03701EC4 LDR W8, [X0 + 0xE0]
	0x03701EC8 CBNZ W8, 0x3701ED4
	0x03701ECC BL 0x1C16DFC
	0x03701ED0 LDR X0, [X26]
	0x03701ED4 LDR X8, [X0 + 0xB8]
	0x03701ED8 LDR X8, [X8 + 0x20]
	0x03701EDC CBZ X8, 0x3701FD8
	0x03701EE0 LDR W9, [X8 + 0x18]
	0x03701EE4 CMP X24, X9
	0x03701EE8 B.CS 0x3701FDC
	0x03701EEC ADD X8, X8, X24
	0x03701EF0 LDRB W8, [X8 + 0x20]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0xCE0000
	011 Move W8, [X20+3120]
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xA40000
	019 Move X0, [X0+3960]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3120], W8
	023 Move W26, [X21]
	024 Move W10, [X19]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W20, W31
	027 Move X9, W26
	028 Move X11, X9
	029 ShiftRight X11, 62
	030 And X11, X11, 0x1FFFFFFF
	031 Add X23, X21, 4
	032 Subtract X8, X11, 4
	033 Add X24, X8, X23
	034 Add X22, X19, 4
	035 Move W12, [X24]
	036 Move W13, [X8]
	037 Move X8, 0xA40000
	038 Move X8, [X8+3960]
	039 Add W12, W12, 1
	040 Move X25, X22
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction UDIV not yet implemented."
	043 Move X15, X31
	044 Move X10, X31
	045 Move W12, W20
	046 Move X13, X25
	047 Move X14, X23
	048 Move W16, [X14+4]
	049 Move W17, [X13]
	050 NotImplemented "Instruction NOP not yet implemented."
	051 NotImplemented "Instruction MADD not yet implemented."
	052 Move X15, X16
	053 ShiftRight X15, 32
	054 And X15, X15, 0x7FFFFFFF
	055 Subtract X16, X17, W16
	056 Subtract X16, X16, X10
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X10, X16
	059 ShiftRight X10, 32
	060 And X10, X10, 0
	061 Move [X13+4], W16
	062 Add X11, X22, X11
	063 And W12, W26, W26
	064 Add W10, W26, 1
	065 Subtract X11, X11, 4
	066 Subtract X9, X9, 1
	067 Move W13, [X11-4]
	068 Subtract W10, W10, 1
	069 Compare W13, 0
	070 JumpIfEqual {66}
	071 Move W10, W12
	072 Move W26, W10
	073 Move [X19], W10
	074 Move X0, [X8]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1C17DFC
	079 Move W10, [X19]
	080 Move W8, [X21]
	081 Subtract W8, W10, W8
	082 Move TEMP, X8
	083 And TEMP, TEMP, -2147483648
	084 Compare TEMP, -2147483648
	085 JumpIfNotEqual {95}
	086 Subtract W8, W10, 1
	087 Move TEMP, X8
	088 And TEMP, TEMP, -2147483648
	089 Compare TEMP, -2147483648
	090 JumpIfEqual {95}
	091 Move W9, [X25]
	092 Move W10, [X23]
	093 Subtract W8, W8, 1
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X8, X31
	096 Move W9, [X25]
	097 Move W10, [X23+4]
	098 Subtract X9, X9, X10
	099 Subtract X9, X9, X8
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X8, X9
	102 ShiftRight X8, 32
	103 And X8, X8, 0
	104 Move [X25+4], W9
	105 Move W8, W26
	106 Add X11, X22, W26
	107 Add W20, W20, 1
	108 Move X9, W8
	109 And W10, W26, W26
	110 Add W8, W26, 1
	111 Subtract X11, X11, 4
	112 Subtract X9, X9, 1
	113 Move W12, [X11-4]
	114 Subtract W8, W8, 1
	115 Compare W12, 0
	116 JumpIfEqual {112}
	117 Move W8, W10
	118 Move [X19], W8
	119 Move W0, W20
	120 Move X20, [X31+64]
	121 Move X19, [X31+72]
	122 Move X22, [X31+48]
	123 Move X21, [X31+56]
	124 Move X24, [X31+32]
	125 Move X23, [X31+40]
	126 Move X26, [X31+16]
	127 Move X25, [X31+24]
	128 Move X30, [X31+80]
	129 Return X0

Method: System.Void BigInt_ShiftLeft(ref Unity.Burst.BurstString/tBigInt pResult, System.UInt32 shift)

Disassembly:
	0x03701EF4 ADD X24, X24, 0x1
	0x03701EF8 CMP X24, 0x3
	0x03701EFC STRB W8, [X25, X21, LSL]
	0x03701F00 B.NE 0x3701EAC
	0x03701F04 B 0x3701F84
	0x03701F08 TBZ X24, 0x0, 0x3701F28
	0x03701F0C LDRSW X8, [X20]
	0x03701F10 CMP W8, W19
	0x03701F14 B.GE 0x3701FC0
	0x03701F18 ADD W9, W8, 0x1
	0x03701F1C MOVZ W10, 0x2D
	0x03701F20 STR W9, [X20]
	0x03701F24 STRB W10, [X8, X21, LSL]
	0x03701F28 MOV X24, X31
	0x03701F2C LDRSW X25, [X20]
	0x03701F30 CMP W25, W19
	0x03701F34 B.GE 0x3701FC0
	0x03701F38 ADD W8, W25, 0x1
	0x03701F3C STR W8, [X20]
	0x03701F40 LDR X0, [X26]
	0x03701F44 LDR W8, [X0 + 0xE0]
	0x03701F48 CBNZ W8, 0x3701F54
	0x03701F4C BL 0x1C16DFC
	0x03701F50 LDR X0, [X26]
	0x03701F54 LDR X8, [X0 + 0xB8]
	0x03701F58 LDR X8, [X8 + 0x18]
	0x03701F5C CBZ X8, 0x3701FD8
	0x03701F60 LDR W9, [X8 + 0x18]
	0x03701F64 CMP X24, X9
	0x03701F68 B.CS 0x3701FDC
	0x03701F6C ADD X8, X8, X24
	0x03701F70 LDRB W8, [X8 + 0x20]
	0x03701F74 ADD X24, X24, 0x1
	0x03701F78 CMP X24, 0x8
	0x03701F7C STRB W8, [X21, X25, LSL]
	0x03701F80 B.NE 0x3701F2C
	0x03701F84 LDR X0, [X26]
	0x03701F88 LDR W8, [X0 + 0xE0]
	0x03701F8C CBNZ W8, 0x3701F94
	0x03701F90 BL 0x1C16DFC
	0x03701F94 MOV X0, X21
	0x03701F98 MOV X1, X20
	0x03701F9C MOV W2, W19
	0x03701FA0 MOV W3, W23
	0x03701FA4 MOV W4, W22
	0x03701FA8 LDP X20, X19, [X31 + 0x40]
	0x03701FAC LDP X22, X21, [X31 + 0x30]
	0x03701FB0 LDP X24, X23, [X31 + 0x20]
	0x03701FB4 LDP X26, X25, [X31 + 0x10]
	0x03701FB8 LDP X30, X27, [X31], #0x50
	0x03701FBC B 0x36FE164
	0x03701FC0 LDP X20, X19, [X31 + 0x40]
	0x03701FC4 LDP X22, X21, [X31 + 0x30]
	0x03701FC8 LDP X24, X23, [X31 + 0x20]
	0x03701FCC LDP X26, X25, [X31 + 0x10]
	0x03701FD0 LDP X30, X27, [X31], #0x50
	0x03701FD4 RET
	0x03701FD8 BL 0x1C16F20
	0x03701FDC BL 0x1C16F28
	0x03701FE0 LDR W8, [X0]
	0x03701FE4 UBFM W0, W8, 0x17, 0x1E
	0x03701FE8 RET
	0x03701FEC LDR W8, [X0]
	0x03701FF0 AND W0, W8, 0x7FFFFF
	0x03701FF4 RET
	0x03701FF8 LDR W8, [X0]
	0x03701FFC UBFM W0, W8, 0x1F, 0x1F
	0x03702000 RET
	0x03702004 LDR X8, [X0]

ISIL:
	001 Add W8, W1, 31
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W10, [X0]
	004 NotImplemented "Instruction CSEL not yet implemented."
	005 And W9, W8, 0xFFFFFFE0
	006 Subtract W12, W1, W9
	007 NotImplemented "Instruction SBFM not yet implemented."
	008 Add W13, W10, W8
	009 Move X9, X0
	010 Subtract W14, W31, W12
	011 Add W15, W13, 1
	012 And W13, W14, 31
	013 Move [X9+4], W15
	014 Subtract W14, W10, 1
	015 Move W11, W31
	016 And W12, W12, 31
	017 Add X14, X9, W14
	018 Move W15, [X14-4]
	019 Add W16, W8, W10
	020 Subtract W10, W10, 1
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction LSRV not yet implemented."
	023 Or W11, W17, W11
	024 Move [X9], W11
	025 NotImplemented "Instruction LSLV not yet implemented."
	026 Add W10, W8, W10
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move [X9], W11
	029 Move X10, X31
	030 Move X8, W8
	031 Move W11, 1
	032 Move [X9], W31
	033 Move W10, W11
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add W11, W11, 1
	036 Move W8, [X0]
	037 Subtract W8, W8, 1
	038 Move W9, [X9]
	039 Compare W9, 0
	040 JumpIfEqual {61}
	041 Return 
	042 Move X10, W10
	043 Add X9, X0, 4
	044 Add X10, X9, X10
	045 Subtract X11, X10, 4
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X10, W8
	048 Move W12, [X11]
	049 Move [X11], W12
	050 Subtract X11, X11, 4
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X11, X31
	054 Move W12, 1
	055 Move [X9], W31
	056 Move W11, W12
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Add W12, W12, 1
	059 Move W9, [X0]
	060 Add W8, W9, W8
	061 Move [X0], W8
	062 Return 

Method: System.UInt32 Dragon4(System.UInt64 mantissa, System.Int32 exponent, System.UInt32 mantissaHighBitIdx, System.Boolean hasUnequalMargins, Unity.Burst.BurstString/CutoffMode cutoffMode, System.UInt32 cutoffNumber, System.Byte* pOutBuffer, System.UInt32 bufferSize, out System.Int32 pOutExponent)

Disassembly:
	0x03702008 UBFM X0, X8, 0x34, 0x3E
	0x0370200C RET
	0x03702010 LDR X8, [X0]
	0x03702014 AND X0, X8, 0xFFFFF
	0x03702018 RET
	0x0370201C LDR X8, [X0]
	0x03702020 UBFM X0, X8, 0x3F, 0x3F
	0x03702024 RET
	0x03702028 STP X30, X25, [X31 - 0x40]!
	0x0370202C STP X24, X23, [X31 + 0x10]
	0x03702030 STP X22, X21, [X31 + 0x20]
	0x03702034 STP X20, X19, [X31 + 0x30]
	0x03702038 ADRP X19, 0xCDE000
	0x0370203C ADRP X20, 0x9FA000
	0x03702040 LDRB W8, [X19 + 0xC37]
	0x03702044 LDR X20, [X20 + 0x8D8]
	0x03702048 TBNZ X8, 0x0, 0x37020B4
	0x0370204C ADRP X0, 0xA3E000
	0x03702050 LDR X0, [X0 + 0xF78]
	0x03702054 BL 0x1C16CF4
	0x03702058 ADRP X0, 0x9F1000
	0x0370205C LDR X0, [X0 + 0x618]
	0x03702060 BL 0x1C16CF4
	0x03702064 ADRP X0, 0x9FA000
	0x03702068 LDR X0, [X0 + 0x8D8]
	0x0370206C BL 0x1C16CF4
	0x03702070 ADRP X0, 0xA3E000
	0x03702074 LDR X0, [X0 + 0xFD8]
	0x03702078 BL 0x1C16CF4
	0x0370207C ADRP X0, 0xA3E000
	0x03702080 LDR X0, [X0 + 0xFE0]
	0x03702084 BL 0x1C16CF4
	0x03702088 ADRP X0, 0xA3E000
	0x0370208C LDR X0, [X0 + 0xFE8]
	0x03702090 BL 0x1C16CF4
	0x03702094 ADRP X0, 0xA3E000
	0x03702098 LDR X0, [X0 + 0xFF0]
	0x0370209C BL 0x1C16CF4
	0x037020A0 ADRP X0, 0xA1A000
	0x037020A4 LDR X0, [X0 + 0xD08]
	0x037020A8 BL 0x1C16CF4
	0x037020AC MOVZ W8, 0x1
	0x037020B0 STRB W8, [X19 + 0xC37]
	0x037020B4 LDR X0, [X20]
	0x037020B8 MOVZ W1, 0x1
	0x037020BC BL 0x1C16D6C
	0x037020C0 CBZ X0, 0x37021CC
	0x037020C4 LDR W8, [X0 + 0x18]
	0x037020C8 CBZ W8, 0x37021D0
	0x037020CC ADRP X20, 0xA3E000
	0x037020D0 LDR X20, [X20 + 0xF78]
	0x037020D4 MOVZ W8, 0x3A
	0x037020D8 STRH W8, [X0 + 0x20]
	0x037020DC ADRP X21, 0x9F1000
	0x037020E0 LDR X8, [X20]
	0x037020E4 ADRP X19, 0xA3E000
	0x037020E8 ADRP X22, 0xA1A000
	0x037020EC ADRP X23, 0xA3E000
	0x037020F0 LDR X8, [X8 + 0xB8]
	0x037020F4 LDR X21, [X21 + 0x618]
	0x037020F8 LDR X19, [X19 + 0xFD8]
	0x037020FC LDR X22, [X22 + 0xD08]
	0x03702100 STR X0, [X8]
	0x03702104 LDR X0, [X21]
	0x03702108 ADRP X24, 0xA3E000
	0x0370210C ADRP X25, 0xA3E000
	0x03702110 LDR X23, [X23 + 0xFE0]
	0x03702114 LDR X24, [X24 + 0xFE8]
	0x03702118 LDR X25, [X25 + 0xFF0]
	0x0370211C MOVZ W1, 0x100
	0x03702120 BL 0x1C16D6C
	0x03702124 LDR X1, [X19]
	0x03702128 MOV X2, X31
	0x0370212C MOV X19, X0
	0x03702130 BL 0x32C5BD8
	0x03702134 LDR X8, [X20]
	0x03702138 MOVZ W1, 0x8
	0x0370213C LDR X8, [X8 + 0xB8]
	0x03702140 STR X19, [X8 + 0x8]
	0x03702144 LDR X0, [X22]
	0x03702148 BL 0x1C16D6C
	0x0370214C LDR X1, [X23]
	0x03702150 MOV X2, X31
	0x03702154 MOV X19, X0
	0x03702158 BL 0x32C5BD8
	0x0370215C LDR X8, [X20]
	0x03702160 MOVZ W1, 0x8
	0x03702164 LDR X8, [X8 + 0xB8]
	0x03702168 STR X19, [X8 + 0x10]
	0x0370216C LDR X0, [X21]
	0x03702170 BL 0x1C16D6C
	0x03702174 LDR X1, [X24]
	0x03702178 MOV X2, X31
	0x0370217C MOV X19, X0
	0x03702180 BL 0x32C5BD8
	0x03702184 LDR X8, [X20]
	0x03702188 MOVZ W1, 0x3
	0x0370218C LDR X8, [X8 + 0xB8]
	0x03702190 STR X19, [X8 + 0x18]
	0x03702194 LDR X0, [X21]
	0x03702198 BL 0x1C16D6C
	0x0370219C LDR X1, [X25]
	0x037021A0 MOV X2, X31
	0x037021A4 MOV X19, X0
	0x037021A8 BL 0x32C5BD8
	0x037021AC LDR X8, [X20]
	0x037021B0 LDP X22, X21, [X31 + 0x20]
	0x037021B4 LDP X24, X23, [X31 + 0x10]
	0x037021B8 LDR X8, [X8 + 0xB8]
	0x037021BC STR X19, [X8 + 0x20]
	0x037021C0 LDP X20, X19, [X31 + 0x30]
	0x037021C4 LDP X30, X25, [X31], #0x40
	0x037021C8 RET
	0x037021CC BL 0x1C16F20
	0x037021D0 BL 0x1C16F28
	0x037021D4 MOV X1, X31
	0x037021D8 B 0x33A51F0
	0x037021DC LDR X0, [X0]
	0x037021E0 RET
	0x037021E4 LDR W0, [X0]
	0x037021E8 RET
	0x037021EC SUB X31, X31, 0x40
	0x037021F0 STR X30, [X31 + 0x10]
	0x037021F4 STP X22, X21, [X31 + 0x20]
	0x037021F8 STP X20, X19, [X31 + 0x30]
	0x037021FC ADRP X20, 0xCDE000
	0x03702200 ADRP X21, 0x9F1000
	0x03702204 LDRB W8, [X20 + 0xC38]
	0x03702208 LDR X21, [X21 + 0x9D0]
	0x0370220C MOV X19, X0
	0x03702210 TBNZ X8, 0x0, 0x3702294
	0x03702214 ADRP X0, 0x9F1000
	0x03702218 LDR X0, [X0 + 0xB58]
	0x0370221C BL 0x1C16CF4
	0x03702220 ADRP X0, 0x9F2000
	0x03702224 LDR X0, [X0 + 0x9D8]
	0x03702228 BL 0x1C16CF4
	0x0370222C ADRP X0, 0xA3E000
	0x03702230 LDR X0, [X0 + 0xFF8]
	0x03702234 BL 0x1C16CF4
	0x03702238 ADRP X0, 0x9F1000
	0x0370223C LDR X0, [X0 + 0x9D0]
	0x03702240 BL 0x1C16CF4
	0x03702244 ADRP X0, 0xA1A000
	0x03702248 LDR X0, [X0 + 0x6B0]
	0x0370224C BL 0x1C16CF4
	0x03702250 ADRP X0, 0xA3F000
	0x03702254 LDR X0, [X0]
	0x03702258 BL 0x1C16CF4
	0x0370225C ADRP X0, 0xA3F000
	0x03702260 LDR X0, [X0 + 0x8]
	0x03702264 BL 0x1C16CF4
	0x03702268 ADRP X0, 0xA3F000
	0x0370226C LDR X0, [X0 + 0x10]
	0x03702270 BL 0x1C16CF4
	0x03702274 ADRP X0, 0xA3F000
	0x03702278 LDR X0, [X0 + 0x18]
	0x0370227C BL 0x1C16CF4
	0x03702280 ADRP X0, 0xA3F000
	0x03702284 LDR X0, [X0 + 0x20]
	0x03702288 BL 0x1C16CF4
	0x0370228C MOVZ W8, 0x1
	0x03702290 STRB W8, [X20 + 0xC38]
	0x03702294 LDR X0, [X21]
	0x03702298 MOVZ W1, 0x8
	0x0370229C BL 0x1C16D6C
	0x037022A0 CBZ X0, 0x37024D4
	0x037022A4 ADRP X21, 0xA3F000
	0x037022A8 LDR X21, [X21]
	0x037022AC MOV X20, X0
	0x037022B0 LDR X0, [X21]
	0x037022B4 CBZ X0, 0x37022C8
	0x037022B8 LDR X8, [X20]
	0x037022BC LDR X1, [X8 + 0x40]
	0x037022C0 BL 0x1C16E00
	0x037022C4 CBZ X0, 0x37024C8
	0x037022C8 LDR W8, [X20 + 0x18]
	0x037022CC CBZ W8, 0x37024C4
	0x037022D0 LDR X8, [X21]
	0x037022D4 ADRP X9, 0xA3E000
	0x037022D8 LDR X9, [X9 + 0xFF8]
	0x037022DC ADD X1, X31, 0x1C
	0x037022E0 STR X8, [X20 + 0x20]
	0x037022E4 LDRB W8, [X19]
	0x037022E8 LDR X0, [X9]
	0x037022EC STRB W8, [X31 + 0x1C]
	0x037022F0 BL 0x1C16E04
	0x037022F4 MOV X21, X0
	0x037022F8 CBZ X0, 0x3702310
	0x037022FC LDR X8, [X20]
	0x03702300 MOV X0, X21
	0x03702304 LDR X1, [X8 + 0x40]
	0x03702308 BL 0x1C16E00
	0x0370230C CBZ X0, 0x37024C8
	0x03702310 LDR W8, [X20 + 0x18]
	0x03702314 CMP W8, 0x1
	0x03702318 B.LS 0x37024C4
	0x0370231C ADRP X22, 0xA3F000
	0x03702320 LDR X22, [X22 + 0x20]
	0x03702324 STR X21, [X20 + 0x28]
	0x03702328 LDR X0, [X22]
	0x0370232C CBZ X0, 0x3702344
	0x03702330 LDR X8, [X20]
	0x03702334 LDR X1, [X8 + 0x40]
	0x03702338 BL 0x1C16E00
	0x0370233C CBZ X0, 0x37024C8
	0x03702340 LDR W8, [X20 + 0x18]
	0x03702344 CMP W8, 0x2
	0x03702348 B.LS 0x37024C4
	0x0370234C LDR X8, [X22]
	0x03702350 ADRP X9, 0xA1A000
	0x03702354 LDR X9, [X9 + 0x6B0]
	0x03702358 ADD X1, X31, 0x18
	0x0370235C STR X8, [X20 + 0x30]
	0x03702360 LDRB W8, [X19 + 0x1]
	0x03702364 LDR X0, [X9]
	0x03702368 STRB W8, [X31 + 0x18]
	0x0370236C BL 0x1C16E04
	0x03702370 MOV X21, X0
	0x03702374 CBZ X0, 0x370238C
	0x03702378 LDR X8, [X20]
	0x0370237C MOV X0, X21
	0x03702380 LDR X1, [X8 + 0x40]
	0x03702384 BL 0x1C16E00
	0x03702388 CBZ X0, 0x37024C8
	0x0370238C LDR W8, [X20 + 0x18]
	0x03702390 CMP W8, 0x3
	0x03702394 B.LS 0x37024C4
	0x03702398 ADRP X22, 0xA3F000
	0x0370239C LDR X22, [X22 + 0x8]
	0x037023A0 STR X21, [X20 + 0x38]
	0x037023A4 LDR X0, [X22]
	0x037023A8 CBZ X0, 0x37023C0
	0x037023AC LDR X8, [X20]
	0x037023B0 LDR X1, [X8 + 0x40]
	0x037023B4 BL 0x1C16E00
	0x037023B8 CBZ X0, 0x37024C8
	0x037023BC LDR W8, [X20 + 0x18]
	0x037023C0 CMP W8, 0x4
	0x037023C4 B.LS 0x37024C4
	0x037023C8 LDR X8, [X22]
	0x037023CC ADRP X9, 0x9F2000
	0x037023D0 LDR X9, [X9 + 0x9D8]
	0x037023D4 ADD X1, X31, 0xC
	0x037023D8 STR X8, [X20 + 0x40]
	0x037023DC LDRB W8, [X19 + 0x2]
	0x037023E0 LDR X0, [X9]
	0x037023E4 STRB W8, [X31 + 0xC]
	0x037023E8 BL 0x1C16E04
	0x037023EC MOV X21, X0
	0x037023F0 CBZ X0, 0x3702408
	0x037023F4 LDR X8, [X20]
	0x037023F8 MOV X0, X21
	0x037023FC LDR X1, [X8 + 0x40]
	0x03702400 BL 0x1C16E00
	0x03702404 CBZ X0, 0x37024C8
	0x03702408 LDR W8, [X20 + 0x18]
	0x0370240C CMP W8, 0x5
	0x03702410 B.LS 0x37024C4
	0x03702414 ADRP X22, 0xA3F000
	0x03702418 LDR X22, [X22 + 0x18]
	0x0370241C STR X21, [X20 + 0x48]
	0x03702420 LDR X0, [X22]
	0x03702424 CBZ X0, 0x370243C
	0x03702428 LDR X8, [X20]
	0x0370242C LDR X1, [X8 + 0x40]
	0x03702430 BL 0x1C16E00
	0x03702434 CBZ X0, 0x37024C8
	0x03702438 LDR W8, [X20 + 0x18]
	0x0370243C CMP W8, 0x6
	0x03702440 B.LS 0x37024C4
	0x03702444 LDR X8, [X22]
	0x03702448 ADRP X9, 0x9F1000
	0x0370244C ADD X1, X31, 0x8
	0x03702450 STR X8, [X20 + 0x50]
	0x03702454 LDRB W8, [X19 + 0x3]
	0x03702458 LDR X9, [X9 + 0xB58]
	0x0370245C EOR W8, W8, 0x1
	0x03702460 LDR X0, [X9]
	0x03702464 STRB W8, [X31 + 0x8]
	0x03702468 BL 0x1C16E04
	0x0370246C MOV X19, X0
	0x03702470 CBZ X0, 0x3702488
	0x03702474 LDR X8, [X20]
	0x03702478 MOV X0, X19
	0x0370247C LDR X1, [X8 + 0x40]
	0x03702480 BL 0x1C16E00
	0x03702484 CBZ X0, 0x37024C8
	0x03702488 LDR W8, [X20 + 0x18]
	0x0370248C CMP W8, 0x7
	0x03702490 B.LS 0x37024C4
	0x03702494 ADRP X8, 0xA3F000
	0x03702498 LDR X8, [X8 + 0x10]
	0x0370249C STR X19, [X20 + 0x58]
	0x037024A0 MOV X1, X20
	0x037024A4 MOV X2, X31
	0x037024A8 LDR X0, [X8]
	0x037024AC BL 0x3227C5C
	0x037024B0 LDP X20, X19, [X31 + 0x30]
	0x037024B4 LDP X22, X21, [X31 + 0x20]
	0x037024B8 LDR X30, [X31 + 0x10]
	0x037024BC ADD X31, X31, 0x40
	0x037024C0 RET
	0x037024C4 BL 0x1C16F28
	0x037024C8 BL 0x1C16F44
	0x037024CC MOV X1, X31
	0x037024D0 BL 0x1C16DEC
	0x037024D4 BL 0x1C16F20
	0x037024D8 LDR W0, [X0]
	0x037024DC RET
	0x037024E0 STR W31, [X0]
	0x037024E4 RET
	0x037024E8 LDR W8, [X0]
	0x037024EC CBZ W8, 0x37024F8
	0x037024F0 LDR W0, [X0 + 0x4]
	0x037024F4 RET
	0x037024F8 MOV W0, W31
	0x037024FC RET
	0x03702500 MOV X1, X31
	0x03702504 B 0x33A51F0
	0x03702508 CBZ W0, 0x3702510
	0x0370250C RET
	0x03702510 STR X30, [X31 - 0x20]!
	0x03702514 STP X20, X19, [X31 + 0x10]
	0x03702518 ADRP X0, 0x9F9000
	0x0370251C LDR X0, [X0 + 0x578]
	0x03702520 BL 0x1C16D08
	0x03702524 BL 0x1C16F10
	0x03702528 MOV X19, X0
	0x0370252C ADRP X0, 0xA3F000
	0x03702530 LDR X0, [X0 + 0x28]
	0x03702534 BL 0x1C16D08
	0x03702538 MOV X20, X0
	0x0370253C ADRP X0, 0xA3F000
	0x03702540 LDR X0, [X0 + 0x30]
	0x03702544 BL 0x1C16D08
	0x03702548 MOV X2, X0
	0x0370254C MOV X0, X19
	0x03702550 MOV X1, X20
	0x03702554 MOV X3, X31
	0x03702558 BL 0x330E16C
	0x0370255C ADRP X0, 0xA3F000
	0x03702560 LDR X0, [X0 + 0x38]
	0x03702564 BL 0x1C16D08
	0x03702568 MOV X1, X0
	0x0370256C MOV X0, X19
	0x03702570 BL 0x1C16DEC
	0x03702574 CBZ X0, 0x370257C
	0x03702578 RET
	0x0370257C STP X30, X19, [X31 - 0x10]!
	0x03702580 ADRP X0, 0x9F1000
	0x03702584 LDR X0, [X0 + 0x5B0]
	0x03702588 BL 0x1C16D08
	0x0370258C BL 0x1C16F10
	0x03702590 MOV X19, X0
	0x03702594 ADRP X0, 0xA3F000
	0x03702598 LDR X0, [X0 + 0x40]
	0x0370259C BL 0x1C16D08
	0x037025A0 MOV X1, X0
	0x037025A4 MOV X0, X19
	0x037025A8 MOV X2, X31
	0x037025AC BL 0x337DF1C
	0x037025B0 ADRP X0, 0xA3F000
	0x037025B4 LDR X0, [X0 + 0x48]
	0x037025B8 BL 0x1C16D08
	0x037025BC MOV X1, X0
	0x037025C0 MOV X0, X19
	0x037025C4 BL 0x1C16DEC
	0x037025C8 SUB X31, X31, 0x30
	0x037025CC STP X31, X30, [X31 + 0x8]
	0x037025D0 STP X20, X19, [X31 + 0x20]
	0x037025D4 MOV W19, W3
	0x037025D8 MOV W20, W2
	0x037025DC MOV X2, X1
	0x037025E0 MOV X1, X0
	0x037025E4 ADD X0, X31, 0x0
	0x037025E8 MOV X3, X31
	0x037025EC STR X31, [X31]
	0x037025F0 BL 0x3C22BE0
	0x037025F4 ADD X0, X31, 0x0
	0x037025F8 MOV W1, W20
	0x037025FC MOV W2, W19
	0x03702600 MOV X3, X31
	0x03702604 BL 0x3BFFCC0
	0x03702608 LDP X20, X19, [X31 + 0x20]
	0x0370260C LDR X30, [X31 + 0x10]
	0x03702610 ADD X31, X31, 0x30
	0x03702614 RET
	0x03702618 MOV X1, X31
	0x0370261C B 0x33A51F0
	0x03702620 MOV W0, W31
	0x03702624 RET
	0x03702628 STP X30, X19, [X31 - 0x10]!
	0x0370262C ADRP X0, 0x9FA000
	0x03702630 LDR X0, [X0 + 0x758]
	0x03702634 BL 0x1C16D08
	0x03702638 BL 0x1C16F10
	0x0370263C MOV X1, X31
	0x03702640 MOV X19, X0
	0x03702644 BL 0x3380288
	0x03702648 ADRP X0, 0xA3F000
	0x0370264C LDR X0, [X0 + 0x50]
	0x03702650 BL 0x1C16D08
	0x03702654 MOV X1, X0
	0x03702658 MOV X0, X19
	0x0370265C BL 0x1C16DEC
	0x03702660 STP X30, X19, [X31 - 0x10]!
	0x03702664 ADRP X0, 0x9FA000
	0x03702668 LDR X0, [X0 + 0x758]
	0x0370266C BL 0x1C16D08
	0x03702670 BL 0x1C16F10
	0x03702674 MOV X1, X31
	0x03702678 MOV X19, X0
	0x0370267C BL 0x3380288
	0x03702680 ADRP X0, 0xA3F000
	0x03702684 LDR X0, [X0 + 0x58]
	0x03702688 BL 0x1C16D08
	0x0370268C MOV X1, X0
	0x03702690 MOV X0, X19
	0x03702694 BL 0x1C16DEC
	0x03702698 STP X30, X19, [X31 - 0x10]!
	0x0370269C ADRP X0, 0x9FA000
	0x037026A0 LDR X0, [X0 + 0x758]
	0x037026A4 BL 0x1C16D08
	0x037026A8 BL 0x1C16F10
	0x037026AC MOV X1, X31
	0x037026B0 MOV X19, X0
	0x037026B4 BL 0x3380288
	0x037026B8 ADRP X0, 0xA3F000
	0x037026BC LDR X0, [X0 + 0x60]
	0x037026C0 BL 0x1C16D08
	0x037026C4 MOV X1, X0
	0x037026C8 MOV X0, X19
	0x037026CC BL 0x1C16DEC
	0x037026D0 STP X30, X19, [X31 - 0x10]!
	0x037026D4 ADRP X0, 0x9FA000
	0x037026D8 LDR X0, [X0 + 0x758]
	0x037026DC BL 0x1C16D08
	0x037026E0 BL 0x1C16F10
	0x037026E4 MOV X1, X31
	0x037026E8 MOV X19, X0
	0x037026EC BL 0x3380288
	0x037026F0 ADRP X0, 0xA3F000
	0x037026F4 LDR X0, [X0 + 0x68]
	0x037026F8 BL 0x1C16D08
	0x037026FC MOV X1, X0
	0x03702700 MOV X0, X19
	0x03702704 BL 0x1C16DEC
	0x03702708 STP X30, X19, [X31 - 0x10]!
	0x0370270C ADRP X0, 0x9FA000
	0x03702710 LDR X0, [X0 + 0x758]
	0x03702714 BL 0x1C16D08
	0x03702718 BL 0x1C16F10
	0x0370271C MOV X1, X31
	0x03702720 MOV X19, X0
	0x03702724 BL 0x3380288
	0x03702728 ADRP X0, 0xA3F000
	0x0370272C LDR X0, [X0 + 0x70]
	0x03702730 BL 0x1C16D08
	0x03702734 MOV X1, X0
	0x03702738 MOV X0, X19
	0x0370273C BL 0x1C16DEC
	0x03702740 STP X30, X19, [X31 - 0x10]!
	0x03702744 ADRP X0, 0x9FA000
	0x03702748 LDR X0, [X0 + 0x758]
	0x0370274C BL 0x1C16D08
	0x03702750 BL 0x1C16F10
	0x03702754 MOV X1, X31
	0x03702758 MOV X19, X0
	0x0370275C BL 0x3380288
	0x03702760 ADRP X0, 0xA3F000
	0x03702764 LDR X0, [X0 + 0x78]
	0x03702768 BL 0x1C16D08
	0x0370276C MOV X1, X0
	0x03702770 MOV X0, X19
	0x03702774 BL 0x1C16DEC
	0x03702778 STP X30, X19, [X31 - 0x10]!
	0x0370277C ADRP X0, 0x9FA000
	0x03702780 LDR X0, [X0 + 0x758]
	0x03702784 BL 0x1C16D08
	0x03702788 BL 0x1C16F10
	0x0370278C MOV X1, X31
	0x03702790 MOV X19, X0
	0x03702794 BL 0x3380288
	0x03702798 ADRP X0, 0xA3F000
	0x0370279C LDR X0, [X0 + 0x80]
	0x037027A0 BL 0x1C16D08
	0x037027A4 MOV X1, X0
	0x037027A8 MOV X0, X19
	0x037027AC BL 0x1C16DEC
	0x037027B0 STP X30, X19, [X31 - 0x10]!
	0x037027B4 ADRP X0, 0x9FA000
	0x037027B8 LDR X0, [X0 + 0x758]
	0x037027BC BL 0x1C16D08
	0x037027C0 BL 0x1C16F10
	0x037027C4 MOV X1, X31
	0x037027C8 MOV X19, X0
	0x037027CC BL 0x3380288
	0x037027D0 ADRP X0, 0xA3F000
	0x037027D4 LDR X0, [X0 + 0x88]
	0x037027D8 BL 0x1C16D08
	0x037027DC MOV X1, X0

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 1200
	014 NotImplemented "Instruction MRS not yet implemented."
	015 Move X8, [X27+40]
	016 Move X19, 0xCDF000
	017 Move X9, [X31+1296]
	018 Move W23, W7
	019 Move [X31+1192], X8
	020 Move W8, [X19+3121]
	021 Move X28, X6
	022 Move W22, W5
	023 Move W20, W4
	024 Move W26, W3
	025 Move W24, W2
	026 Move W25, W1
	027 Move X21, X0
	028 Move [X31+32], X9
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {41}
	033 Move X0, 0xA3F000
	034 Move X0, [X0+3960]
	035 Call 0x1C17CF4
	036 Move X0, 0x9F2000
	037 Move X0, [X0+1448]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X19+3121], W8
	041 Add X0, X31, 472
	042 Move W2, 144
	043 Move W1, W31
	044 Call 0x3EB2B10
	045 Add X0, X31, 328
	046 Move W2, 144
	047 Move W1, W31
	048 Call 0x3EB2B10
	049 Add X0, X31, 184
	050 Move W2, 144
	051 Move W1, W31
	052 Call 0x3EB2B10
	053 Add X0, X31, 40
	054 Move W2, 144
	055 Move W1, W31
	056 Call 0x3EB2B10
	057 Compare X21, 0
	058 JumpIfEqual {99}
	059 Move [X31+24], X28
	060 Move X28, 0x9F2000
	061 Move X29, 0xA3F000
	062 Move X28, [X28+1448]
	063 Move X29, [X29+3960]
	064 Add X0, X31, 1048
	065 Move W2, 144
	066 Move W1, W31
	067 Call 0x3EB2B10
	068 Add X0, X31, 904
	069 Move W2, 144
	070 Move W1, W31
	071 Call 0x3EB2B10
	072 Add X0, X31, 760
	073 Move W2, 144
	074 Move W1, W31
	075 Call 0x3EB2B10
	076 Add X0, X31, 616
	077 Move W2, 144
	078 Move W1, W31
	079 Call 0x3EB2B10
	080 Move TEMP, X26
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {104}
	084 Move X9, X21
	085 ShiftRight X9, 30
	086 And X9, X9, 0x1FFFFFFF
	087 Move X8, X21
	088 ShiftRight X8, 62
	089 And X8, X8, 0x1FFFFFFF
	090 Compare X9, 0
	091 JumpIfEqual {119}
	092 Move X9, X21
	093 ShiftRight X9, 30
	094 And X9, X9, 0x7FFFFFFF
	095 Move W10, 2
	096 Move [X31+912], W9
	097 Move [X31+908], W8
	098 Move [X31+904], W10
	099 Move W8, 48
	100 Move [X28], W8
	101 Move X8, [X31+32]
	102 Move W0, 1
	103 Move [X8], W31
	104 Move X9, X21
	105 ShiftRight X9, 31
	106 And X9, X9, 0x3FFFFFFF
	107 Move X8, X21
	108 ShiftRight X8, 63
	109 And X8, X8, 0x3FFFFFFF
	110 Compare X9, 0
	111 JumpIfEqual {124}
	112 Move X9, X21
	113 ShiftRight X9, 31
	114 And X9, X9, 0x7FFFFFFF
	115 Move W10, 2
	116 Move [X31+912], W9
	117 Move [X31+908], W8
	118 Move [X31+904], W10
	119 Compare X8, 0
	120 JumpIfEqual {129}
	121 Move W9, 1
	122 Move [X31+908], W8
	123 Move [X31+904], W9
	124 Compare X8, 0
	125 JumpIfEqual {158}
	126 Move W9, 1
	127 Move [X31+908], W8
	128 Move [X31+904], W9
	129 Move [X31+904], W31
	130 Move X0, [X29]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Add X0, X31, 904
	137 Move W1, W25
	138 Call BurstString.BigInt_ShiftLeft, X0, X1
	139 Move X8, -46219264
	140 Move V0, [X8+1136]
	141 Add X0, X31, 760
	142 Move W1, W25
	143 Move [X31+1048], D0
	144 Call BurstString.BigInt_Pow2, X0, X1
	145 Add W1, W25, 1
	146 Add X0, X31, 616
	147 Add X21, X31, 616
	148 Move W8, 2
	149 Subtract W1, W8, W25
	150 Add X0, X31, 1048
	151 Call BurstString.BigInt_Pow2, X0, X1
	152 Move X8, -46219264
	153 Move V0, [X8+1464]
	154 NotImplemented "Instruction MOVI not yet implemented."
	155 Move [X31+760], D1
	156 Add X21, X31, 616
	157 Move [X31+616], D0
	158 Move [X31+904], W31
	159 Move X0, [X29]
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {164}
	163 Call 0x1C17DFC
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Add X0, X31, 904
	166 Move W1, W25
	167 Call BurstString.BigInt_ShiftLeft, X0, X1
	168 Move X8, -46219264
	169 Move V0, [X8+1464]
	170 Add X0, X31, 760
	171 Move W1, W25
	172 Add X21, X31, 760
	173 Move [X31+1048], D0
	174 Call BurstString.BigInt_Pow2, X0, X1
	175 Move W8, 1
	176 Subtract W1, W8, W25
	177 Add X0, X31, 1048
	178 Call BurstString.BigInt_Pow2, X0, X1
	179 NotImplemented "Instruction MOVI not yet implemented."
	180 Add X21, X31, 760
	181 Move [X31+760], D0
	182 Move X0, [X28]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X8, -46215168
	188 Move V0, [X8+32]
	189 Add W8, W24, W25
	190 Move X9, -46219264
	191 NotImplemented "Instruction SCVTF not yet implemented."
	192 Multiply D0, D1, D0
	193 Move V1, [X9+1960]
	194 Move X8, 0x7FF00000
	195 Move W9, 0x80000000
	196 Subtract W26, W31, W22
	197 Add D0, D0, D1
	198 Move D1, X8
	199 NotImplemented "Instruction FCVTPS not yet implemented."
	200 NotImplemented "Instruction FRINTP not yet implemented."
	201 NotImplemented "Instruction FCMP not yet implemented."
	202 NotImplemented "Instruction CSEL not yet implemented."
	203 Move W9, 1
	204 Subtract W9, W9, W22
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move X28, [X31+24]
	207 NotImplemented "Instruction CSEL not yet implemented."
	208 NotImplemented "Instruction CMP not yet implemented."
	209 NotImplemented "Instruction CSEL not yet implemented."
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, [X29]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {216}
	215 Call 0x1C17DFC
	216 Add X0, X31, 472
	217 Add X1, X31, 1048
	218 Move W2, W24
	219 Call BurstString.BigInt_MultiplyPow10, X0, X1, X2
	220 Add X0, X31, 1048
	221 Add X1, X31, 472
	222 Move W2, 144
	223 Call 0x3EB2AC0
	224 Move TEMP, X24
	225 And TEMP, TEMP, -2147483648
	226 Compare TEMP, -2147483648
	227 JumpIfNotEqual {262}
	228 Move X0, [X29]
	229 Move W8, [X0+224]
	230 Compare W8, 0
	231 JumpIfNotEqual {233}
	232 Call 0x1C17DFC
	233 Subtract W1, W31, W24
	234 Add X0, X31, 328
	235 Call BurstString.BigInt_Pow10, X0, X1
	236 Add X0, X31, 184
	237 Add X1, X31, 904
	238 Add X2, X31, 328
	239 Call BurstString.BigInt_Multiply, X0, X1, X2
	240 Add X0, X31, 904
	241 Add X1, X31, 184
	242 Move W2, 144
	243 Call 0x3EB2AC0
	244 Add X0, X31, 184
	245 Add X1, X31, 760
	246 Add X2, X31, 328
	247 Add X19, X31, 760
	248 Call BurstString.BigInt_Multiply, X0, X1, X2
	249 Add X0, X31, 760
	250 Add X1, X31, 184
	251 Move W2, 144
	252 Call 0x3EB2AC0
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move X0, [X29]
	255 Move W8, [X0+224]
	256 Compare W8, 0
	257 JumpIfNotEqual {259}
	258 Call 0x1C17DFC
	259 Add X1, X31, 760
	260 Move X0, X21
	261 Call BurstString.BigInt_Multiply2, X0, X1
	262 Move X0, [X29]
	263 Move W8, [X0+224]
	264 Compare W8, 0
	265 JumpIfNotEqual {267}
	266 Call 0x1C17DFC
	267 Move W10, [X31+904]
	268 Move W8, [X31+1048]
	269 Subtract W8, W10, W8
	270 Move TEMP, X8
	271 And TEMP, TEMP, -2147483648
	272 Compare TEMP, -2147483648
	273 JumpIfEqual {288}
	274 Add W24, W24, 1
	275 Add X8, X31, 904
	276 Add X9, X31, 1048
	277 Or X8, X8, 7
	278 Or X9, X9, 7
	279 Subtract W10, W10, 1
	280 Move TEMP, X10
	281 And TEMP, TEMP, -2147483648
	282 Compare TEMP, -2147483648
	283 JumpIfEqual {274}
	284 Move W11, [X8]
	285 Move W12, [X9]
	286 Subtract W10, W10, 1
	287 NotImplemented "Instruction CMP not yet implemented."
	288 Move X0, [X29]
	289 Move W8, [X0+224]
	290 Compare W8, 0
	291 JumpIfNotEqual {293}
	292 Call 0x1C17DFC
	293 Add X0, X31, 904
	294 Call BurstString.BigInt_Multiply10, X0
	295 Add X0, X31, 760
	296 Add X19, X31, 760
	297 Call BurstString.BigInt_Multiply10, X0
	298 NotImplemented "Instruction CMP not yet implemented."
	299 Move X0, [X29]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Add X1, X31, 760
	305 Move X0, X21
	306 Call BurstString.BigInt_Multiply2, X0, X1
	307 NotImplemented "Instruction CMP not yet implemented."
	308 Subtract W25, W24, W23
	309 NotImplemented "Instruction CMP not yet implemented."
	310 Subtract W8, W24, W22
	311 NotImplemented "Instruction CMP not yet implemented."
	312 NotImplemented "Instruction CSEL not yet implemented."
	313 NotImplemented "Instruction CMP not yet implemented."
	314 NotImplemented "Instruction CSEL not yet implemented."
	315 Move X9, [X31+32]
	316 Subtract W8, W24, 1
	317 Move [X9], W8
	318 Move W8, [X31+1048]
	319 Add X9, X31, 1048
	320 Or X23, X9, 7
	321 Move W9, 0x9992
	322 Subtract W8, W8, 1
	323 Move W22, [X23]
	324 NotImplemented "Instruction MOVK not yet implemented."
	325 Subtract W8, W22, 8
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Move X0, [X29]
	328 Move W8, [X0+224]
	329 Compare W8, 0
	330 JumpIfNotEqual {332}
	331 Call 0x1C17DFC
	332 Move W0, W22
	333 Call BurstString.LogBase2, X0
	334 Move W8, 27
	335 Subtract W8, W8, W0
	336 And W22, W8, 31
	337 Add X0, X31, 1048
	338 Move W1, W22
	339 Call BurstString.BigInt_ShiftLeft, X0, X1
	340 Add X0, X31, 904
	341 Move W1, W22
	342 Call BurstString.BigInt_ShiftLeft, X0, X1
	343 Add X0, X31, 760
	344 Move W1, W22
	345 Add X19, X31, 760
	346 Call BurstString.BigInt_ShiftLeft, X0, X1
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Move X0, [X29]
	349 Move W8, [X0+224]
	350 Compare W8, 0
	351 JumpIfNotEqual {353}
	352 Call 0x1C17DFC
	353 Add X1, X31, 760
	354 Move X0, X21
	355 Call BurstString.BigInt_Multiply2, X0, X1
	356 Compare W20, 0
	357 JumpIfEqual {385}
	358 Subtract W8, W25, W24
	359 Add W19, W8, 1
	360 Move X22, X28
	361 Move X0, [X29]
	362 Move W8, [X0+224]
	363 Compare W8, 0
	364 JumpIfNotEqual {366}
	365 Call 0x1C17DFC
	366 Add X0, X31, 904
	367 Add X1, X31, 1048
	368 Call BurstString.BigInt_DivideWithRemainder_MaxQuotient9, X0, X1
	369 Move W20, W0
	370 Compare W19, 0
	371 JumpIfEqual {478}
	372 Move W8, [X31+904]
	373 Compare W8, 0
	374 JumpIfEqual {478}
	375 Add W8, W20, 48
	376 Move [X22+1], W8
	377 Move X0, [X29]
	378 Move W8, [X0+224]
	379 Compare W8, 0
	380 JumpIfNotEqual {382}
	381 Call 0x1C17DFC
	382 Add X0, X31, 904
	383 Call BurstString.BigInt_Multiply10, X0
	384 Add W19, W19, 1
	385 Add X8, X31, 904
	386 Add X26, X31, 760
	387 Add X9, X31, 40
	388 Move [X31+16], X27
	389 Move X22, X28
	390 Or X28, X8, 7
	391 Or X27, X26, 7
	392 Or X19, X9, 7
	393 Move X0, [X29]
	394 Move W8, [X0+224]
	395 Compare W8, 0
	396 JumpIfNotEqual {398}
	397 Call 0x1C17DFC
	398 Add X0, X31, 904
	399 Add X1, X31, 1048
	400 Call BurstString.BigInt_DivideWithRemainder_MaxQuotient9, X0, X1
	401 Move W20, W0
	402 Add X0, X31, 40
	403 Add X1, X31, 904
	404 Move X2, X21
	405 Call BurstString.BigInt_Add, X0, X1, X2
	406 Move W9, [X31+904]
	407 Move W8, [X31+760]
	408 Subtract W8, W9, W8
	409 Subtract W8, W9, 1
	410 Move TEMP, X8
	411 And TEMP, TEMP, -2147483648
	412 Compare TEMP, -2147483648
	413 JumpIfEqual {420}
	414 Move W9, [X28]
	415 Move W10, [X27]
	416 Subtract W8, W8, 1
	417 NotImplemented "Instruction CMP not yet implemented."
	418 Move W8, 1
	419 NotImplemented "Instruction CSNEG not yet implemented."
	420 Move W8, W31
	421 Move W10, [X31+40]
	422 Move W9, [X31+1048]
	423 Subtract W24, W24, 1
	424 Subtract W9, W10, W9
	425 Subtract W9, W10, 1
	426 Move TEMP, X9
	427 And TEMP, TEMP, -2147483648
	428 Compare TEMP, -2147483648
	429 JumpIfEqual {436}
	430 Move W10, [X19]
	431 Move W11, [X23]
	432 Subtract W9, W9, 1
	433 NotImplemented "Instruction CMP not yet implemented."
	434 Move W9, 1
	435 NotImplemented "Instruction CSNEG not yet implemented."
	436 Move W9, W31
	437 NotImplemented "Instruction CMP not yet implemented."
	438 NotImplemented "Instruction CSET not yet implemented."
	439 NotImplemented "Instruction CMP not yet implemented."
	440 NotImplemented "Instruction CSET not yet implemented."
	441 Or W11, W11, W8
	442 Or W10, W11, W10
	443 Compare W10, 0
	444 JumpIfNotEqual {465}
	445 Add W8, W20, 48
	446 Move [X22+1], W8
	447 Move X0, [X29]
	448 Move W8, [X0+224]
	449 Compare W8, 0
	450 JumpIfNotEqual {452}
	451 Call 0x1C17DFC
	452 Add X0, X31, 904
	453 Call BurstString.BigInt_Multiply10, X0
	454 Add X0, X31, 760
	455 Call BurstString.BigInt_Multiply10, X0
	456 NotImplemented "Instruction CMP not yet implemented."
	457 Move X0, [X29]
	458 Move W8, [X0+224]
	459 Compare W8, 0
	460 JumpIfNotEqual {462}
	461 Call 0x1C17DFC
	462 Add X1, X31, 760
	463 Move X0, X21
	464 Call BurstString.BigInt_Multiply2, X0, X1
	465 NotImplemented "Instruction CMP not yet implemented."
	466 NotImplemented "Instruction CSET not yet implemented."
	467 NotImplemented "Instruction CMP not yet implemented."
	468 NotImplemented "Instruction CSET not yet implemented."
	469 Xor W9, W10, W9
	470 Move TEMP, X9
	471 And TEMP, TEMP, 1
	472 Compare TEMP, 1
	473 JumpIfNotEqual {476}
	474 Move X27, [X31+16]
	475 Move X28, [X31+24]
	476 Move X27, [X31+16]
	477 Move X28, [X31+24]
	478 Move X0, [X29]
	479 Move W8, [X0+224]
	480 Compare W8, 0
	481 JumpIfNotEqual {483}
	482 Call 0x1C17DFC
	483 Add X0, X31, 904
	484 Add X19, X31, 904
	485 Call BurstString.BigInt_Multiply2, X0
	486 Move W9, [X31+904]
	487 Move W8, [X31+1048]
	488 Subtract W8, W9, W8
	489 Move TEMP, X8
	490 And TEMP, TEMP, -2147483648
	491 Compare TEMP, -2147483648
	492 JumpIfEqual {517}
	493 NotImplemented "Instruction CMP not yet implemented."
	494 NotImplemented "Instruction CMP not yet implemented."
	495 Move X8, X22
	496 Add X22, X22, -1
	497 Move W9, [X22]
	498 NotImplemented "Instruction CMP not yet implemented."
	499 Add W9, W9, 1
	500 NotImplemented "Instruction STURB not yet implemented."
	501 Move X22, X8
	502 Or X8, X19, 7
	503 Subtract W9, W9, 1
	504 Move TEMP, X9
	505 And TEMP, TEMP, -2147483648
	506 Compare TEMP, -2147483648
	507 JumpIfEqual {513}
	508 Move W10, [X8]
	509 Move W11, [X23]
	510 Subtract W9, W9, 1
	511 NotImplemented "Instruction CMP not yet implemented."
	512 Add W8, W20, 49
	513 Move TEMP, X20
	514 And TEMP, TEMP, 1
	515 Compare TEMP, 1
	516 JumpIfEqual {493}
	517 Add W8, W20, 48
	518 Move [X22+1], W8
	519 Subtract W0, W22, W28
	520 Move X8, [X27+40]
	521 Move X9, [X31+1192]
	522 NotImplemented "Instruction CMP not yet implemented."
	523 Add X31, X31, 1200
	524 Move X20, [X31+80]
	525 Move X19, [X31+88]
	526 Move X22, [X31+64]
	527 Move X21, [X31+72]
	528 Move X24, [X31+48]
	529 Move X23, [X31+56]
	530 Move X26, [X31+32]
	531 Move X25, [X31+40]
	532 Move X28, [X31+16]
	533 Move X27, [X31+24]
	534 Move X29, [X31+96]
	535 Move X30, [X31+104]
	536 Return X0
	537 Move X9, [X31+32]
	538 Move W8, 49
	539 Move X22, X28
	540 Move [X22+1], W8
	541 Move W8, [X9]
	542 Add W8, W8, 1
	543 Move [X9], W8
	544 Call 0x3EB2B20

Method: System.Int32 FormatPositional(System.Byte* pOutBuffer, System.UInt32 bufferSize, System.UInt64 mantissa, System.Int32 exponent, System.UInt32 mantissaHighBitIdx, System.Boolean hasUnequalMargins, System.Int32 precision)

Disassembly:
	0x0370282C ADRP X0, 0x9FA000
	0x03702830 LDR X0, [X0 + 0x758]
	0x03702834 BL 0x1C16D08
	0x03702838 BL 0x1C16F10
	0x0370283C MOV X1, X31
	0x03702840 MOV X19, X0
	0x03702844 BL 0x3380288
	0x03702848 ADRP X0, 0xA3F000
	0x0370284C LDR X0, [X0 + 0x90]
	0x03702850 BL 0x1C16D08
	0x03702854 MOV X1, X0
	0x03702858 MOV X0, X19
	0x0370285C BL 0x1C16DEC
	0x03702860 STP X30, X19, [X31 - 0x10]!
	0x03702864 ADRP X0, 0x9FA000
	0x03702868 LDR X0, [X0 + 0x758]
	0x0370286C BL 0x1C16D08
	0x03702870 BL 0x1C16F10
	0x03702874 MOV X1, X31
	0x03702878 MOV X19, X0
	0x0370287C BL 0x3380288
	0x03702880 ADRP X0, 0xA3F000
	0x03702884 LDR X0, [X0 + 0x98]
	0x03702888 BL 0x1C16D08
	0x0370288C MOV X1, X0
	0x03702890 MOV X0, X19
	0x03702894 BL 0x1C16DEC
	0x03702898 STP X30, X19, [X31 - 0x10]!
	0x0370289C ADRP X0, 0x9FA000
	0x037028A0 LDR X0, [X0 + 0x758]
	0x037028A4 BL 0x1C16D08
	0x037028A8 BL 0x1C16F10
	0x037028AC MOV X1, X31
	0x037028B0 MOV X19, X0
	0x037028B4 BL 0x3380288
	0x037028B8 ADRP X0, 0xA3F000
	0x037028BC LDR X0, [X0 + 0xA0]
	0x037028C0 BL 0x1C16D08
	0x037028C4 MOV X1, X0
	0x037028C8 MOV X0, X19
	0x037028CC BL 0x1C16DEC
	0x037028D0 STP X30, X19, [X31 - 0x10]!
	0x037028D4 ADRP X0, 0x9FA000
	0x037028D8 LDR X0, [X0 + 0x758]
	0x037028DC BL 0x1C16D08
	0x037028E0 BL 0x1C16F10
	0x037028E4 MOV X1, X31
	0x037028E8 MOV X19, X0
	0x037028EC BL 0x3380288
	0x037028F0 ADRP X0, 0xA3F000
	0x037028F4 LDR X0, [X0 + 0xA8]
	0x037028F8 BL 0x1C16D08
	0x037028FC MOV X1, X0
	0x03702900 MOV X0, X19
	0x03702904 BL 0x1C16DEC
	0x03702908 STP X30, X19, [X31 - 0x10]!
	0x0370290C ADRP X0, 0x9FA000
	0x03702910 LDR X0, [X0 + 0x758]
	0x03702914 BL 0x1C16D08
	0x03702918 BL 0x1C16F10
	0x0370291C MOV X1, X31
	0x03702920 MOV X19, X0
	0x03702924 BL 0x3380288
	0x03702928 ADRP X0, 0xA3F000
	0x0370292C LDR X0, [X0 + 0xB0]
	0x03702930 BL 0x1C16D08
	0x03702934 MOV X1, X0
	0x03702938 MOV X0, X19
	0x0370293C BL 0x1C16DEC
	0x03702940 STP X30, X19, [X31 - 0x10]!
	0x03702944 ADRP X0, 0x9FA000
	0x03702948 LDR X0, [X0 + 0x758]
	0x0370294C BL 0x1C16D08
	0x03702950 BL 0x1C16F10
	0x03702954 MOV X1, X31
	0x03702958 MOV X19, X0
	0x0370295C BL 0x3380288
	0x03702960 ADRP X0, 0xA3F000
	0x03702964 LDR X0, [X0 + 0xB8]
	0x03702968 BL 0x1C16D08
	0x0370296C MOV X1, X0
	0x03702970 MOV X0, X19
	0x03702974 BL 0x1C16DEC
	0x03702978 STP X30, X19, [X31 - 0x10]!
	0x0370297C ADRP X0, 0x9FA000
	0x03702980 LDR X0, [X0 + 0x758]
	0x03702984 BL 0x1C16D08
	0x03702988 BL 0x1C16F10
	0x0370298C MOV X1, X31
	0x03702990 MOV X19, X0
	0x03702994 BL 0x3380288
	0x03702998 ADRP X0, 0xA3F000
	0x0370299C LDR X0, [X0 + 0xC0]
	0x037029A0 BL 0x1C16D08
	0x037029A4 MOV X1, X0
	0x037029A8 MOV X0, X19
	0x037029AC BL 0x1C16DEC
	0x037029B0 STP X30, X19, [X31 - 0x10]!
	0x037029B4 ADRP X0, 0x9FA000
	0x037029B8 LDR X0, [X0 + 0x758]
	0x037029BC BL 0x1C16D08
	0x037029C0 BL 0x1C16F10
	0x037029C4 MOV X1, X31
	0x037029C8 MOV X19, X0
	0x037029CC BL 0x3380288
	0x037029D0 ADRP X0, 0xA3F000
	0x037029D4 LDR X0, [X0 + 0xC8]
	0x037029D8 BL 0x1C16D08
	0x037029DC MOV X1, X0
	0x037029E0 MOV X0, X19
	0x037029E4 BL 0x1C16DEC
	0x037029E8 STP X30, X19, [X31 - 0x10]!
	0x037029EC ADRP X0, 0x9FA000
	0x037029F0 LDR X0, [X0 + 0x758]
	0x037029F4 BL 0x1C16D08
	0x037029F8 BL 0x1C16F10
	0x037029FC MOV X1, X31
	0x03702A00 MOV X19, X0
	0x03702A04 BL 0x3380288
	0x03702A08 ADRP X0, 0xA3F000
	0x03702A0C LDR X0, [X0 + 0xD0]
	0x03702A10 BL 0x1C16D08
	0x03702A14 MOV X1, X0
	0x03702A18 MOV X0, X19
	0x03702A1C BL 0x1C16DEC
	0x03702A20 STP X30, X19, [X31 - 0x10]!
	0x03702A24 ADRP X0, 0x9FA000
	0x03702A28 LDR X0, [X0 + 0x758]
	0x03702A2C BL 0x1C16D08
	0x03702A30 BL 0x1C16F10
	0x03702A34 MOV X1, X31
	0x03702A38 MOV X19, X0
	0x03702A3C BL 0x3380288
	0x03702A40 ADRP X0, 0xA3F000
	0x03702A44 LDR X0, [X0 + 0xD8]
	0x03702A48 BL 0x1C16D08
	0x03702A4C MOV X1, X0
	0x03702A50 MOV X0, X19
	0x03702A54 BL 0x1C16DEC
	0x03702A58 STP X30, X19, [X31 - 0x10]!
	0x03702A5C ADRP X0, 0x9FA000
	0x03702A60 LDR X0, [X0 + 0x758]
	0x03702A64 BL 0x1C16D08
	0x03702A68 BL 0x1C16F10
	0x03702A6C MOV X1, X31
	0x03702A70 MOV X19, X0
	0x03702A74 BL 0x3380288
	0x03702A78 ADRP X0, 0xA3F000
	0x03702A7C LDR X0, [X0 + 0xE0]
	0x03702A80 BL 0x1C16D08
	0x03702A84 MOV X1, X0
	0x03702A88 MOV X0, X19
	0x03702A8C BL 0x1C16DEC
	0x03702A90 STP X30, X19, [X31 - 0x10]!
	0x03702A94 ADRP X0, 0x9FA000
	0x03702A98 LDR X0, [X0 + 0x758]
	0x03702A9C BL 0x1C16D08
	0x03702AA0 BL 0x1C16F10
	0x03702AA4 MOV X1, X31
	0x03702AA8 MOV X19, X0
	0x03702AAC BL 0x3380288
	0x03702AB0 ADRP X0, 0xA3F000
	0x03702AB4 LDR X0, [X0 + 0xE8]
	0x03702AB8 BL 0x1C16D08
	0x03702ABC MOV X1, X0
	0x03702AC0 MOV X0, X19
	0x03702AC4 BL 0x1C16DEC
	0x03702AC8 STP X30, X19, [X31 - 0x10]!
	0x03702ACC ADRP X0, 0x9FA000
	0x03702AD0 LDR X0, [X0 + 0x758]
	0x03702AD4 BL 0x1C16D08
	0x03702AD8 BL 0x1C16F10
	0x03702ADC MOV X1, X31
	0x03702AE0 MOV X19, X0
	0x03702AE4 BL 0x3380288
	0x03702AE8 ADRP X0, 0xA3F000
	0x03702AEC LDR X0, [X0 + 0xF0]
	0x03702AF0 BL 0x1C16D08
	0x03702AF4 MOV X1, X0
	0x03702AF8 MOV X0, X19
	0x03702AFC BL 0x1C16DEC
	0x03702B00 STP X30, X19, [X31 - 0x10]!
	0x03702B04 ADRP X0, 0x9FA000
	0x03702B08 LDR X0, [X0 + 0x758]
	0x03702B0C BL 0x1C16D08
	0x03702B10 BL 0x1C16F10
	0x03702B14 MOV X1, X31
	0x03702B18 MOV X19, X0
	0x03702B1C BL 0x3380288
	0x03702B20 ADRP X0, 0xA3F000
	0x03702B24 LDR X0, [X0 + 0xF8]
	0x03702B28 BL 0x1C16D08
	0x03702B2C MOV X1, X0
	0x03702B30 MOV X0, X19
	0x03702B34 BL 0x1C16DEC
	0x03702B38 STP X30, X19, [X31 - 0x10]!
	0x03702B3C ADRP X0, 0x9FA000
	0x03702B40 LDR X0, [X0 + 0x758]
	0x03702B44 BL 0x1C16D08
	0x03702B48 BL 0x1C16F10
	0x03702B4C MOV X1, X31
	0x03702B50 MOV X19, X0
	0x03702B54 BL 0x3380288
	0x03702B58 ADRP X0, 0xA3F000
	0x03702B5C LDR X0, [X0 + 0x100]
	0x03702B60 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], X30
	003 Move [X31+40], X27
	004 Move [X31+48], X26
	005 Move [X31+56], X25
	006 Move [X31+64], X24
	007 Move [X31+72], X23
	008 Move [X31+80], X22
	009 Move [X31+88], X21
	010 Move [X31+96], X20
	011 Move [X31+104], X19
	012 Move X27, 0xCDF000
	013 Move X21, 0xA3F000
	014 Move W8, [X27+3122]
	015 Move X21, [X21+3960]
	016 Move W20, W6
	017 Move W26, W5
	018 Move W23, W4
	019 Move W24, W3
	020 Move X25, X2
	021 Move W22, W1
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0xA3F000
	028 Move X0, [X0+3960]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X27+3122], W8
	032 Move X0, [X21]
	033 Move [X31+28], W31
	034 Subtract W21, W22, 1
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Add X8, X31, 28
	040 And W3, W26, 1
	041 Move TEMP, X20
	042 And TEMP, TEMP, -2147483648
	043 Compare TEMP, -2147483648
	044 JumpIfEqual {51}
	045 Move W4, 2
	046 Move X0, X25
	047 Move W1, W24
	048 Move W2, W23
	049 Move W5, W20
	050 Move [X31], X8
	051 Move [X31], X8
	052 Move X0, X25
	053 Move W1, W24
	054 Move W2, W23
	055 Move W4, W31
	056 Move W5, W31
	057 Move X6, X19
	058 Move W7, W21
	059 Call BurstString.Dragon4, X0, X1, X2, X3, X4, X5, X6, X7, X8
	060 Move W24, [X31+28]
	061 Move TEMP, X24
	062 And TEMP, TEMP, -2147483648
	063 Compare TEMP, -2147483648
	064 JumpIfEqual {81}
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Add X8, X24, 1
	067 Subtract W9, W0, W8
	068 Subtract W10, W21, W24
	069 Add X23, X8, X19
	070 Subtract W8, W10, 2
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSEL not yet implemented."
	073 Add X0, X23, 1
	074 Move X1, X23
	075 Move X2, X22
	076 Call 0x3EB2AC0
	077 Move W8, 46
	078 Add W9, W24, W22
	079 Move [X23], W8
	080 Add W0, W9, 2
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction ORN not yet implemented."
	083 Subtract W9, W22, 3
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction CSINV not yet implemented."
	086 Add W24, W23, 2
	087 Subtract W8, W21, W24
	088 NotImplemented "Instruction CMP not yet implemented."
	089 NotImplemented "Instruction CSEL not yet implemented."
	090 Add X0, X24, X19
	091 Move X1, X19
	092 Move X2, X22
	093 Call 0x3EB2AC0
	094 Compare W23, 0
	095 JumpIfEqual {127}
	096 Move X10, -46231552
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W9, 3
	099 Move V0, [X10+121]
	100 NotImplemented "Instruction CSEL not yet implemented."
	101 Subtract X10, X9, 1
	102 Subtract X11, X9, 3
	103 Move X8, X31
	104 And X9, X10, 0xFFFFFFFF
	105 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	106 Move W10, 48
	107 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	108 Or V2, V2, V0
	109 NotImplemented "Instruction INVALID not yet implemented."
	110 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	111 Move W11, S2
	112 Move TEMP, X11
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {118}
	116 Add X11, X19, X8
	117 Move [X11+2], W10
	118 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	119 Move TEMP, X11
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {125}
	123 Add X11, X19, X8
	124 Move [X11+3], W10
	125 Add X8, X8, 2
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Add W22, W22, W23
	128 Move W0, W22
	129 NotImplemented "Instruction CMP not yet implemented."
	130 NotImplemented "Instruction CSEL not yet implemented."
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X11, -46231552
	133 Move W10, W8
	134 Move V0, [X11+121]
	135 Subtract X10, X10, W0
	136 Add X11, X10, 1
	137 Subtract X12, X10, 1
	138 Move X9, X31
	139 And X10, X11, 0xFFFFFFFF
	140 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	141 Add X11, X19, W0
	142 Move W12, 48
	143 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	144 Or V2, V2, V0
	145 NotImplemented "Instruction INVALID not yet implemented."
	146 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	147 Move W13, S2
	148 Move TEMP, X13
	149 And TEMP, TEMP, 1
	150 Compare TEMP, 1
	151 JumpIfNotEqual {153}
	152 Move [X11], W12
	153 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	154 Move TEMP, X13
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfNotEqual {160}
	158 Add X13, X11, X9
	159 Move [X13+1], W12
	160 Add X9, X9, 2
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Move W22, W31
	163 Move W0, W8
	164 Move W22, W31
	165 Move W22, W31
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move W8, 46
	168 Move [X19+1], W8
	169 Add W0, W0, 1
	170 Compare W21, 0
	171 JumpIfEqual {175}
	172 Move W8, 48
	173 Add W0, W0, 1
	174 Move [X19], W8
	175 NotImplemented "Instruction CMP not yet implemented."
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Compare W22, 0
	178 JumpIfNotEqual {183}
	179 Add W8, W0, 1
	180 Move W9, 46
	181 Move [X19], W9
	182 Move W0, W8
	183 Subtract W8, W20, W22
	184 Add W8, W0, W8
	185 NotImplemented "Instruction CMP not yet implemented."
	186 NotImplemented "Instruction CSEL not yet implemented."
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move X11, -46231552
	189 Move W10, W8
	190 Move V0, [X11+121]
	191 Subtract X10, X10, W0
	192 Add X11, X10, 1
	193 Subtract X12, X10, 1
	194 Move X9, X31
	195 And X10, X11, 0xFFFFFFFF
	196 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	197 Add X11, X19, W0
	198 Move W12, 48
	199 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	200 Or V2, V2, V0
	201 NotImplemented "Instruction INVALID not yet implemented."
	202 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	203 Move W13, S2
	204 Move TEMP, X13
	205 And TEMP, TEMP, 1
	206 Compare TEMP, 1
	207 JumpIfNotEqual {209}
	208 Move [X11], W12
	209 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	210 Move TEMP, X13
	211 And TEMP, TEMP, 1
	212 Compare TEMP, 1
	213 JumpIfNotEqual {216}
	214 Add X13, X11, X9
	215 Move [X13+1], W12
	216 Add X9, X9, 2
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move W0, W8
	219 Move X20, [X31+96]
	220 Move X19, [X31+104]
	221 Move X22, [X31+80]
	222 Move X21, [X31+88]
	223 Move X24, [X31+64]
	224 Move X23, [X31+72]
	225 Move X26, [X31+48]
	226 Move X25, [X31+56]
	227 Move X30, [X31+32]
	228 Move X27, [X31+40]
	229 Add X31, X31, 112
	230 Return X0

Method: System.Int32 FormatScientific(System.Byte* pOutBuffer, System.UInt32 bufferSize, System.UInt64 mantissa, System.Int32 exponent, System.UInt32 mantissaHighBitIdx, System.Boolean hasUnequalMargins, System.Int32 precision)

Disassembly:
	0x03702B64 MOV X1, X0
	0x03702B68 MOV X0, X19
	0x03702B6C BL 0x1C16DEC
	0x03702B70 STP X30, X19, [X31 - 0x10]!
	0x03702B74 ADRP X0, 0x9FA000
	0x03702B78 LDR X0, [X0 + 0x758]
	0x03702B7C BL 0x1C16D08
	0x03702B80 BL 0x1C16F10
	0x03702B84 MOV X1, X31
	0x03702B88 MOV X19, X0
	0x03702B8C BL 0x3380288
	0x03702B90 ADRP X0, 0xA3F000
	0x03702B94 LDR X0, [X0 + 0x108]
	0x03702B98 BL 0x1C16D08
	0x03702B9C MOV X1, X0
	0x03702BA0 MOV X0, X19
	0x03702BA4 BL 0x1C16DEC
	0x03702BA8 STP X30, X19, [X31 - 0x10]!
	0x03702BAC ADRP X0, 0x9FA000
	0x03702BB0 LDR X0, [X0 + 0x758]
	0x03702BB4 BL 0x1C16D08
	0x03702BB8 BL 0x1C16F10
	0x03702BBC MOV X1, X31
	0x03702BC0 MOV X19, X0
	0x03702BC4 BL 0x3380288
	0x03702BC8 ADRP X0, 0xA3F000
	0x03702BCC LDR X0, [X0 + 0x110]
	0x03702BD0 BL 0x1C16D08
	0x03702BD4 MOV X1, X0
	0x03702BD8 MOV X0, X19
	0x03702BDC BL 0x1C16DEC
	0x03702BE0 STP X30, X19, [X31 - 0x10]!
	0x03702BE4 ADRP X0, 0x9FA000
	0x03702BE8 LDR X0, [X0 + 0x758]
	0x03702BEC BL 0x1C16D08
	0x03702BF0 BL 0x1C16F10
	0x03702BF4 MOV X1, X31
	0x03702BF8 MOV X19, X0
	0x03702BFC BL 0x3380288
	0x03702C00 ADRP X0, 0xA3F000
	0x03702C04 LDR X0, [X0 + 0x118]
	0x03702C08 BL 0x1C16D08
	0x03702C0C MOV X1, X0
	0x03702C10 MOV X0, X19
	0x03702C14 BL 0x1C16DEC
	0x03702C18 STP X30, X19, [X31 - 0x10]!
	0x03702C1C ADRP X0, 0x9FA000
	0x03702C20 LDR X0, [X0 + 0x758]
	0x03702C24 BL 0x1C16D08
	0x03702C28 BL 0x1C16F10
	0x03702C2C MOV X1, X31
	0x03702C30 MOV X19, X0
	0x03702C34 BL 0x3380288
	0x03702C38 ADRP X0, 0xA3F000
	0x03702C3C LDR X0, [X0 + 0x120]
	0x03702C40 BL 0x1C16D08
	0x03702C44 MOV X1, X0
	0x03702C48 MOV X0, X19
	0x03702C4C BL 0x1C16DEC
	0x03702C50 STP X30, X19, [X31 - 0x10]!
	0x03702C54 ADRP X0, 0x9FA000
	0x03702C58 LDR X0, [X0 + 0x758]
	0x03702C5C BL 0x1C16D08
	0x03702C60 BL 0x1C16F10
	0x03702C64 MOV X1, X31
	0x03702C68 MOV X19, X0
	0x03702C6C BL 0x3380288
	0x03702C70 ADRP X0, 0xA3F000
	0x03702C74 LDR X0, [X0 + 0x128]
	0x03702C78 BL 0x1C16D08
	0x03702C7C MOV X1, X0
	0x03702C80 MOV X0, X19
	0x03702C84 BL 0x1C16DEC
	0x03702C88 STP X30, X19, [X31 - 0x10]!
	0x03702C8C ADRP X0, 0x9FA000
	0x03702C90 LDR X0, [X0 + 0x758]
	0x03702C94 BL 0x1C16D08
	0x03702C98 BL 0x1C16F10
	0x03702C9C MOV X1, X31
	0x03702CA0 MOV X19, X0
	0x03702CA4 BL 0x3380288
	0x03702CA8 ADRP X0, 0xA3F000
	0x03702CAC LDR X0, [X0 + 0x130]
	0x03702CB0 BL 0x1C16D08
	0x03702CB4 MOV X1, X0
	0x03702CB8 MOV X0, X19
	0x03702CBC BL 0x1C16DEC
	0x03702CC0 STP X30, X19, [X31 - 0x10]!
	0x03702CC4 ADRP X0, 0x9FA000
	0x03702CC8 LDR X0, [X0 + 0x758]
	0x03702CCC BL 0x1C16D08
	0x03702CD0 BL 0x1C16F10
	0x03702CD4 MOV X1, X31
	0x03702CD8 MOV X19, X0
	0x03702CDC BL 0x3380288
	0x03702CE0 ADRP X0, 0xA3F000
	0x03702CE4 LDR X0, [X0 + 0x138]
	0x03702CE8 BL 0x1C16D08
	0x03702CEC MOV X1, X0
	0x03702CF0 MOV X0, X19
	0x03702CF4 BL 0x1C16DEC
	0x03702CF8 STP X30, X19, [X31 - 0x10]!
	0x03702CFC ADRP X0, 0x9FA000
	0x03702D00 LDR X0, [X0 + 0x758]
	0x03702D04 BL 0x1C16D08
	0x03702D08 BL 0x1C16F10
	0x03702D0C MOV X1, X31
	0x03702D10 MOV X19, X0
	0x03702D14 BL 0x3380288
	0x03702D18 ADRP X0, 0xA3F000
	0x03702D1C LDR X0, [X0 + 0x140]
	0x03702D20 BL 0x1C16D08
	0x03702D24 MOV X1, X0
	0x03702D28 MOV X0, X19
	0x03702D2C BL 0x1C16DEC
	0x03702D30 STP X30, X19, [X31 - 0x10]!
	0x03702D34 ADRP X0, 0x9FA000
	0x03702D38 LDR X0, [X0 + 0x758]
	0x03702D3C BL 0x1C16D08
	0x03702D40 BL 0x1C16F10
	0x03702D44 MOV X1, X31
	0x03702D48 MOV X19, X0
	0x03702D4C BL 0x3380288
	0x03702D50 ADRP X0, 0xA3F000
	0x03702D54 LDR X0, [X0 + 0x148]
	0x03702D58 BL 0x1C16D08
	0x03702D5C MOV X1, X0
	0x03702D60 MOV X0, X19
	0x03702D64 BL 0x1C16DEC
	0x03702D68 STP X30, X19, [X31 - 0x10]!
	0x03702D6C ADRP X0, 0x9FA000
	0x03702D70 LDR X0, [X0 + 0x758]
	0x03702D74 BL 0x1C16D08
	0x03702D78 BL 0x1C16F10
	0x03702D7C MOV X1, X31
	0x03702D80 MOV X19, X0
	0x03702D84 BL 0x3380288
	0x03702D88 ADRP X0, 0xA3F000
	0x03702D8C LDR X0, [X0 + 0x150]
	0x03702D90 BL 0x1C16D08
	0x03702D94 MOV X1, X0
	0x03702D98 MOV X0, X19
	0x03702D9C BL 0x1C16DEC
	0x03702DA0 STP X30, X19, [X31 - 0x10]!
	0x03702DA4 ADRP X0, 0x9FA000
	0x03702DA8 LDR X0, [X0 + 0x758]
	0x03702DAC BL 0x1C16D08
	0x03702DB0 BL 0x1C16F10
	0x03702DB4 MOV X1, X31
	0x03702DB8 MOV X19, X0
	0x03702DBC BL 0x3380288
	0x03702DC0 ADRP X0, 0xA3F000
	0x03702DC4 LDR X0, [X0 + 0x158]
	0x03702DC8 BL 0x1C16D08
	0x03702DCC MOV X1, X0
	0x03702DD0 MOV X0, X19
	0x03702DD4 BL 0x1C16DEC
	0x03702DD8 STP X30, X19, [X31 - 0x10]!
	0x03702DDC ADRP X0, 0x9FA000
	0x03702DE0 LDR X0, [X0 + 0x758]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Add X29, X31, 0
	013 Move X27, 0xCDF000
	014 Move X26, 0xA3F000
	015 Move W8, [X27+3123]
	016 Move X26, [X26+3960]
	017 Move W21, W6
	018 Move W25, W5
	019 Move W20, W4
	020 Move W23, W3
	021 Move X24, X2
	022 Move W22, W1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0xA3F000
	029 Move X0, [X0+3960]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X27+3123], W8
	033 Move X0, [X26]
	034 Move [X29+28], W31
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfEqual {50}
	038 Move TEMP, X21
	039 And TEMP, TEMP, -2147483648
	040 Compare TEMP, -2147483648
	041 JumpIfEqual {55}
	042 Add W5, W21, 1
	043 Add X8, X29, 28
	044 And W3, W25, 1
	045 Move W4, 1
	046 Move [X31-16], X8
	047 Move X0, X24
	048 Move W1, W23
	049 Move W2, W20
	050 Call 0x1C17DFC
	051 Move TEMP, X21
	052 And TEMP, TEMP, -2147483648
	053 Compare TEMP, -2147483648
	054 JumpIfNotEqual {42}
	055 Add X8, X29, 28
	056 And W3, W25, 1
	057 Move [X31-16], X8
	058 Move X0, X24
	059 Move W1, W23
	060 Move W2, W20
	061 Move W4, W31
	062 Move W5, W31
	063 Move X6, X19
	064 Move W7, W22
	065 Call BurstString.Dragon4, X0, X1, X2, X3, X4, X5, X6, X7, X8
	066 Add X31, X31, 16
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move X20, X19
	069 Subtract W24, W22, 1
	070 Add X20, X19, 1
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Subtract W23, W0, 1
	073 Compare W23, 0
	074 JumpIfEqual {87}
	075 Subtract W8, W22, 3
	076 NotImplemented "Instruction CMP not yet implemented."
	077 NotImplemented "Instruction CSEL not yet implemented."
	078 Add X0, X19, 2
	079 Move X1, X20
	080 Move X2, X23
	081 Call 0x3EB2AC0
	082 Add W9, W23, 1
	083 Move W8, 46
	084 Add X20, X20, W9
	085 Subtract W24, W24, W9
	086 Move [X19+1], W8
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Compare W23, 0
	090 JumpIfNotEqual {94}
	091 Move W8, 46
	092 Move [X20+1], W8
	093 Subtract W24, W24, 1
	094 Subtract W8, W21, W23
	095 Subtract W9, W24, 1
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CSEL not yet implemented."
	098 Add X8, X9, X20
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Add X10, X20, 1
	101 Move W11, 48
	102 Move [X20], W11
	103 Move X20, X10
	104 Subtract X9, X9, 1
	105 Add X10, X10, 1
	106 Move X20, X8
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Add X8, X31, 0
	109 Subtract X1, X8, 16
	110 Add X31, X1, 0
	111 Move W9, [X29+28]
	112 Move W10, 101
	113 Move [X8-16], W31
	114 NotImplemented "Instruction STURB not yet implemented."
	115 NotImplemented "Instruction STURB not yet implemented."
	116 Or X8, X1, 1
	117 Move TEMP, X9
	118 And TEMP, TEMP, -2147483648
	119 Compare TEMP, -2147483648
	120 JumpIfEqual {124}
	121 Move W9, 43
	122 Move [X8], W9
	123 Move W8, [X29+28]
	124 Move W9, 45
	125 Move [X8], W9
	126 Move W8, [X29+28]
	127 Subtract W8, W31, W8
	128 Move W9, 0x851F
	129 NotImplemented "Instruction MOVK not yet implemented."
	130 Move X10, W8
	131 NotImplemented "Instruction SMADDL not yet implemented."
	132 Move X9, X8
	133 ShiftRight X9, 63
	134 And X9, X9, 0x7FFFFFFF
	135 NotImplemented "Instruction SBFM not yet implemented."
	136 Add W8, W8, W9
	137 Or X11, X1, 3
	138 Add W9, W8, 48
	139 Move [X11], W9
	140 Move W9, 100
	141 Or X11, X31, 0x6666666666666666
	142 Multiply W8, W8, W9
	143 NotImplemented "Instruction MOVK not yet implemented."
	144 Subtract X8, X10, X8
	145 NotImplemented "Instruction SMULH not yet implemented."
	146 Move X11, X10
	147 ShiftRight X11, 63
	148 And X11, X11, 0x7FFFFFFF
	149 Move X10, X10
	150 ShiftRight X10, 2
	151 And X10, X10, 0x7FFFFFFF
	152 Move TEMP, 9
	153 Not TEMP
	154 Move W9, TEMP
	155 Add W10, W10, W11
	156 Or X11, X1, 3
	157 NotImplemented "Instruction MADD not yet implemented."
	158 Subtract W12, W24, 1
	159 Add W10, W10, 48
	160 Move [X11], W10
	161 Move W10, 5
	162 NotImplemented "Instruction CMP not yet implemented."
	163 NotImplemented "Instruction CSEL not yet implemented."
	164 Or X9, X1, 7
	165 Add W8, W8, 48
	166 Move X0, X20
	167 Move X2, X21
	168 Move [X9], W8
	169 Call 0x3EB2AC0
	170 Add X20, X21, X20
	171 Subtract W0, W20, W19
	172 Add X31, X29, 0
	173 Move X20, [X31+80]
	174 Move X19, [X31+88]
	175 Move X22, [X31+64]
	176 Move X21, [X31+72]
	177 Move X24, [X31+48]
	178 Move X23, [X31+56]
	179 Move X26, [X31+32]
	180 Move X25, [X31+40]
	181 Move X27, [X31+16]
	182 Move X29, [X31+96]
	183 Move X30, [X31+104]
	184 Return X0

Method: System.Void FormatInfinityNaN(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.UInt64 mantissa, System.Boolean isNegative, Unity.Burst.BurstString/FormatOptions formatOptions)

Disassembly:
	0x03702DE4 BL 0x1C16D08
	0x03702DE8 BL 0x1C16F10
	0x03702DEC MOV X1, X31
	0x03702DF0 MOV X19, X0
	0x03702DF4 BL 0x3380288
	0x03702DF8 ADRP X0, 0xA3F000
	0x03702DFC LDR X0, [X0 + 0x160]
	0x03702E00 BL 0x1C16D08
	0x03702E04 MOV X1, X0
	0x03702E08 MOV X0, X19
	0x03702E0C BL 0x1C16DEC
	0x03702E10 STP X30, X19, [X31 - 0x10]!
	0x03702E14 ADRP X0, 0x9FA000
	0x03702E18 LDR X0, [X0 + 0x758]
	0x03702E1C BL 0x1C16D08
	0x03702E20 BL 0x1C16F10
	0x03702E24 MOV X1, X31
	0x03702E28 MOV X19, X0
	0x03702E2C BL 0x3380288
	0x03702E30 ADRP X0, 0xA3F000
	0x03702E34 LDR X0, [X0 + 0x168]
	0x03702E38 BL 0x1C16D08
	0x03702E3C MOV X1, X0
	0x03702E40 MOV X0, X19
	0x03702E44 BL 0x1C16DEC
	0x03702E48 STP X30, X19, [X31 - 0x10]!
	0x03702E4C ADRP X0, 0x9FA000
	0x03702E50 LDR X0, [X0 + 0x758]
	0x03702E54 BL 0x1C16D08
	0x03702E58 BL 0x1C16F10
	0x03702E5C MOV X1, X31
	0x03702E60 MOV X19, X0
	0x03702E64 BL 0x3380288
	0x03702E68 ADRP X0, 0xA3F000
	0x03702E6C LDR X0, [X0 + 0x170]
	0x03702E70 BL 0x1C16D08
	0x03702E74 MOV X1, X0
	0x03702E78 MOV X0, X19
	0x03702E7C BL 0x1C16DEC
	0x03702E80 STP X30, X19, [X31 - 0x10]!
	0x03702E84 ADRP X0, 0x9FA000
	0x03702E88 LDR X0, [X0 + 0x758]
	0x03702E8C BL 0x1C16D08
	0x03702E90 BL 0x1C16F10
	0x03702E94 MOV X1, X31
	0x03702E98 MOV X19, X0
	0x03702E9C BL 0x3380288
	0x03702EA0 ADRP X0, 0xA3F000
	0x03702EA4 LDR X0, [X0 + 0x178]
	0x03702EA8 BL 0x1C16D08
	0x03702EAC MOV X1, X0
	0x03702EB0 MOV X0, X19
	0x03702EB4 BL 0x1C16DEC
	0x03702EB8 STP X30, X19, [X31 - 0x10]!
	0x03702EBC ADRP X0, 0x9FA000
	0x03702EC0 LDR X0, [X0 + 0x758]
	0x03702EC4 BL 0x1C16D08
	0x03702EC8 BL 0x1C16F10
	0x03702ECC MOV X1, X31
	0x03702ED0 MOV X19, X0
	0x03702ED4 BL 0x3380288
	0x03702ED8 ADRP X0, 0xA3F000
	0x03702EDC LDR X0, [X0 + 0x180]
	0x03702EE0 BL 0x1C16D08
	0x03702EE4 MOV X1, X0
	0x03702EE8 MOV X0, X19
	0x03702EEC BL 0x1C16DEC
	0x03702EF0 STP X30, X19, [X31 - 0x10]!
	0x03702EF4 ADRP X0, 0x9FA000
	0x03702EF8 LDR X0, [X0 + 0x758]
	0x03702EFC BL 0x1C16D08
	0x03702F00 BL 0x1C16F10
	0x03702F04 MOV X1, X31
	0x03702F08 MOV X19, X0
	0x03702F0C BL 0x3380288
	0x03702F10 ADRP X0, 0xA3F000
	0x03702F14 LDR X0, [X0 + 0x188]
	0x03702F18 BL 0x1C16D08
	0x03702F1C MOV X1, X0
	0x03702F20 MOV X0, X19
	0x03702F24 BL 0x1C16DEC
	0x03702F28 STP X30, X19, [X31 - 0x10]!
	0x03702F2C ADRP X0, 0x9FA000
	0x03702F30 LDR X0, [X0 + 0x758]
	0x03702F34 BL 0x1C16D08
	0x03702F38 BL 0x1C16F10
	0x03702F3C MOV X1, X31
	0x03702F40 MOV X19, X0
	0x03702F44 BL 0x3380288
	0x03702F48 ADRP X0, 0xA3F000
	0x03702F4C LDR X0, [X0 + 0x190]
	0x03702F50 BL 0x1C16D08
	0x03702F54 MOV X1, X0
	0x03702F58 MOV X0, X19
	0x03702F5C BL 0x1C16DEC
	0x03702F60 STP X30, X19, [X31 - 0x10]!
	0x03702F64 ADRP X0, 0x9FA000
	0x03702F68 LDR X0, [X0 + 0x758]
	0x03702F6C BL 0x1C16D08
	0x03702F70 BL 0x1C16F10
	0x03702F74 MOV X1, X31
	0x03702F78 MOV X19, X0
	0x03702F7C BL 0x3380288
	0x03702F80 ADRP X0, 0xA3F000
	0x03702F84 LDR X0, [X0 + 0x198]
	0x03702F88 BL 0x1C16D08
	0x03702F8C MOV X1, X0
	0x03702F90 MOV X0, X19
	0x03702F94 BL 0x1C16DEC
	0x03702F98 STP X30, X19, [X31 - 0x10]!
	0x03702F9C ADRP X0, 0x9FA000
	0x03702FA0 LDR X0, [X0 + 0x758]
	0x03702FA4 BL 0x1C16D08
	0x03702FA8 BL 0x1C16F10
	0x03702FAC MOV X1, X31
	0x03702FB0 MOV X19, X0
	0x03702FB4 BL 0x3380288
	0x03702FB8 ADRP X0, 0xA3F000
	0x03702FBC LDR X0, [X0 + 0x1A0]
	0x03702FC0 BL 0x1C16D08
	0x03702FC4 MOV X1, X0
	0x03702FC8 MOV X0, X19
	0x03702FCC BL 0x1C16DEC
	0x03702FD0 STP X30, X19, [X31 - 0x10]!
	0x03702FD4 ADRP X0, 0x9FA000
	0x03702FD8 LDR X0, [X0 + 0x758]
	0x03702FDC BL 0x1C16D08

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X22, 0xCDF000
	012 Move X26, 0xA3F000
	013 Move W8, [X22+3124]
	014 Move X26, [X26+3960]
	015 Move X23, X5
	016 Move W24, W4
	017 Move X25, X3
	018 Move W19, W2
	019 Move X20, X1
	020 Move X21, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0xA3F000
	026 Move X0, [X0+3960]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X22+3124], W8
	030 Move X0, [X26]
	031 And W31, W24, 1
	032 Move W8, 8
	033 NotImplemented "Instruction CINC not yet implemented."
	034 Move W9, [X0+224]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W10, 3
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Move W27, W23
	039 ShiftRight W27, 16
	040 And W27, W27, 0x7FFF
	041 Compare W9, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move W8, 0x1000000
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction SBFM not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract W8, W23, W22
	049 Move W9, 32
	050 NotImplemented "Instruction LDRSW not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add W11, W10, 1
	053 Subtract W8, W8, 1
	054 Move [X20], W11
	055 Move [X10], W9
	056 Compare X25, 0
	057 JumpIfEqual {80}
	058 Move X24, X31
	059 NotImplemented "Instruction LDRSW not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add W8, W25, 1
	062 Move [X20], W8
	063 Move X0, [X26]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {69}
	067 Call 0x1C17DFC
	068 Move X0, [X26]
	069 Move X8, [X0+184]
	070 Move X8, [X8+32]
	071 Compare X8, 0
	072 JumpIfEqual {145}
	073 Move W9, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Add X8, X8, X24
	076 Move W8, [X8+32]
	077 Add X24, X24, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X25], W8
	080 Move TEMP, X24
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {90}
	084 NotImplemented "Instruction LDRSW not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Add W9, W8, 1
	087 Move W10, 45
	088 Move [X20], W9
	089 Move [X8], W10
	090 Move X24, X31
	091 NotImplemented "Instruction LDRSW not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add W8, W25, 1
	094 Move [X20], W8
	095 Move X0, [X26]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {101}
	099 Call 0x1C17DFC
	100 Move X0, [X26]
	101 Move X8, [X0+184]
	102 Move X8, [X8+24]
	103 Compare X8, 0
	104 JumpIfEqual {145}
	105 Move W9, [X8+24]
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Add X8, X8, X24
	108 Move W8, [X8+32]
	109 Add X24, X24, 1
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move [X21], W8
	112 Move X0, [X26]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {117}
	116 Call 0x1C17DFC
	117 Move X0, X21
	118 Move X1, X20
	119 Move W2, W19
	120 Move W3, W23
	121 Move W4, W22
	122 Move X20, [X31+64]
	123 Move X19, [X31+72]
	124 Move X22, [X31+48]
	125 Move X21, [X31+56]
	126 Move X24, [X31+32]
	127 Move X23, [X31+40]
	128 Move X26, [X31+16]
	129 Move X25, [X31+24]
	130 Move X30, [X31+80]
	131 Move X27, [X31+88]
	132 Call BurstString.AlignRight, X0, X1, X2, X3, X4
	133 Return 
	134 Move X20, [X31+64]
	135 Move X19, [X31+72]
	136 Move X22, [X31+48]
	137 Move X21, [X31+56]
	138 Move X24, [X31+32]
	139 Move X23, [X31+40]
	140 Move X26, [X31+16]
	141 Move X25, [X31+24]
	142 Move X30, [X31+80]
	143 Move X27, [X31+88]
	144 Return 
	145 Call 0x1C17F20
	146 Call 0x1C17F28

Method: System.Void ConvertFloatToString(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Single value, Unity.Burst.BurstString/FormatOptions formatOptions)

Disassembly:
	0x036FF2B8 SXTH X3, W23
	0x036FF2BC MOV W4, W22
	0x036FF2C0 MOV X0, X21
	0x036FF2C4 MOV X1, X20
	0x036FF2C8 MOV W2, W19
	0x036FF2CC LDP X20, X19, [X31 + 0x30]
	0x036FF2D0 LDP X22, X21, [X31 + 0x20]
	0x036FF2D4 LDP X24, X23, [X31 + 0x10]
	0x036FF2D8 LDP X30, X25, [X31], #0x40
	0x036FF2DC B 0x36FF074
	0x036FF2E0 STP X30, X25, [X31 - 0x40]!
	0x036FF2E4 STP X24, X23, [X31 + 0x10]
	0x036FF2E8 STP X22, X21, [X31 + 0x20]
	0x036FF2EC STP X20, X19, [X31 + 0x30]
	0x036FF2F0 ADRP X24, 0xCE1000
	0x036FF2F4 ADRP X25, 0xA41000
	0x036FF2F8 LDRB W8, [X24 + 0xC20]
	0x036FF2FC LDR X25, [X25 + 0xF78]
	0x036FF300 MOV W22, W4
	0x036FF304 MOV W23, W3
	0x036FF308 MOV W19, W2
	0x036FF30C MOV X20, X1
	0x036FF310 MOV X21, X0
	0x036FF314 TBNZ X8, 0x0, 0x36FF32C
	0x036FF318 ADRP X0, 0xA41000
	0x036FF31C LDR X0, [X0 + 0xF78]
	0x036FF320 BL 0x1C16CF4
	0x036FF324 MOVZ W8, 0x1
	0x036FF328 STRB W8, [X24 + 0xC20]
	0x036FF32C LDR X0, [X25]
	0x036FF330 LDR W8, [X0 + 0xE0]
	0x036FF334 CBNZ W8, 0x36FF33C
	0x036FF338 BL 0x1C16DFC
	0x036FF33C AND W8, W22, 0xFF
	0x036FF340 CMP W8, 0x3
	0x036FF344 B.NE 0x36FF370
	0x036FF348 MOV W3, W23
	0x036FF34C MOV W4, W22
	0x036FF350 MOV X0, X21
	0x036FF354 MOV X1, X20
	0x036FF358 MOV W2, W19
	0x036FF35C LDP X20, X19, [X31 + 0x30]
	0x036FF360 LDP X22, X21, [X31 + 0x20]
	0x036FF364 LDP X24, X23, [X31 + 0x10]
	0x036FF368 LDP X30, X25, [X31], #0x40
	0x036FF36C B 0x36FEE18
	0x036FF370 SXTW X3, W23
	0x036FF374 MOV W4, W22
	0x036FF378 MOV X0, X21
	0x036FF37C MOV X1, X20
	0x036FF380 MOV W2, W19
	0x036FF384 LDP X20, X19, [X31 + 0x30]
	0x036FF388 LDP X22, X21, [X31 + 0x20]
	0x036FF38C LDP X24, X23, [X31 + 0x10]
	0x036FF390 LDP X30, X25, [X31], #0x40
	0x036FF394 B 0x36FF074
	0x036FF398 STP X30, X25, [X31 - 0x40]!
	0x036FF39C STP X24, X23, [X31 + 0x10]
	0x036FF3A0 STP X22, X21, [X31 + 0x20]
	0x036FF3A4 STP X20, X19, [X31 + 0x30]
	0x036FF3A8 ADRP X24, 0xCE1000
	0x036FF3AC ADRP X25, 0xA41000
	0x036FF3B0 LDRB W8, [X24 + 0xC21]
	0x036FF3B4 LDR X25, [X25 + 0xF78]
	0x036FF3B8 MOV W23, W4
	0x036FF3BC MOV X19, X3
	0x036FF3C0 MOV W20, W2
	0x036FF3C4 MOV X21, X1
	0x036FF3C8 MOV X22, X0
	0x036FF3CC TBNZ X8, 0x0, 0x36FF3E4
	0x036FF3D0 ADRP X0, 0xA41000
	0x036FF3D4 LDR X0, [X0 + 0xF78]
	0x036FF3D8 BL 0x1C16CF4
	0x036FF3DC MOVZ W8, 0x1
	0x036FF3E0 STRB W8, [X24 + 0xC21]
	0x036FF3E4 LDR X0, [X25]
	0x036FF3E8 LDR W8, [X0 + 0xE0]
	0x036FF3EC CBNZ W8, 0x36FF3F4
	0x036FF3F0 BL 0x1C16DFC
	0x036FF3F4 AND W8, W23, 0xFF
	0x036FF3F8 CMP W8, 0x3
	0x036FF3FC MOV W4, W23
	0x036FF400 MOV X0, X22
	0x036FF404 MOV X1, X21
	0x036FF408 MOV W2, W20
	0x036FF40C MOV X3, X19
	0x036FF410 B.NE 0x36FF428
	0x036FF414 LDP X20, X19, [X31 + 0x30]
	0x036FF418 LDP X22, X21, [X31 + 0x20]
	0x036FF41C LDP X24, X23, [X31 + 0x10]
	0x036FF420 LDP X30, X25, [X31], #0x40
	0x036FF424 B 0x36FEE18
	0x036FF428 LDP X20, X19, [X31 + 0x30]
	0x036FF42C LDP X22, X21, [X31 + 0x20]
	0x036FF430 LDP X24, X23, [X31 + 0x10]
	0x036FF434 LDP X30, X25, [X31], #0x40
	0x036FF438 B 0x36FF074
	0x036FF43C LDRB W8, [X0]
	0x036FF440 MOVZ W9, 0xA
	0x036FF444 CMP W8, 0x3
	0x036FF448 MOVZ W8, 0x10
	0x036FF44C CSEL W0, W8, W9, EQ
	0x036FF450 RET
	0x036FF454 LDRB W8, [X0 + 0x3]
	0x036FF458 CMP W8, 0x0
	0x036FF45C CSET W0, EQ
	0x036FF460 RET
	0x036FF464 CMP W0, 0x0
	0x036FF468 CSNEG W8, W0, W0, PL
	0x036FF46C CMP W8, 0x9
	0x036FF470 B.LE 0x36FF498
	0x036FF474 CMP W8, 0x23
	0x036FF478 B.GT 0x36FF4A0
	0x036FF47C ANDS W31, W1, 0x1
	0x036FF480 MOVZ W9, 0x61
	0x036FF484 MOVZ W10, 0x41
	0x036FF488 CSEL W9, W10, W9, NE
	0x036FF48C ADD W8, W8, W9
	0x036FF490 ADD W0, W8, 0xF6
	0x036FF494 RET
	0x036FF498 ADD W0, W8, 0x30
	0x036FF49C RET
	0x036FF4A0 MOVZ W0, 0x3F
	0x036FF4A4 RET
	0x036FF4A8 AND W8, W5, 0x1
	0x036FF4AC STR X2, [X0]
	0x036FF4B0 STP W1, W3, [X0 + 0x8]
	0x036FF4B4 STR W4, [X0 + 0x10]
	0x036FF4B8 STRB W8, [X0 + 0x14]
	0x036FF4BC RET
	0x036FF4C0 STP X29, X30, [X31 - 0x60]!
	0x036FF4C4 STP X28, X27, [X31 + 0x10]
	0x036FF4C8 STP X26, X25, [X31 + 0x20]
	0x036FF4CC STP X24, X23, [X31 + 0x30]
	0x036FF4D0 STP X22, X21, [X31 + 0x40]
	0x036FF4D4 STP X20, X19, [X31 + 0x50]
	0x036FF4D8 ADRP X25, 0xCE1000
	0x036FF4DC LDRB W8, [X25 + 0xC24]
	0x036FF4E0 MOV X23, X5
	0x036FF4E4 MOV W24, W4
	0x036FF4E8 MOV X22, X3
	0x036FF4EC MOV W19, W2
	0x036FF4F0 MOV X20, X1
	0x036FF4F4 MOV X21, X0
	0x036FF4F8 UBFM X26, X5, 0x8, 0x3F
	0x036FF4FC TBNZ X8, 0x0, 0x36FF514
	0x036FF500 ADRP X0, 0xA41000
	0x036FF504 LDR X0, [X0 + 0xF78]
	0x036FF508 BL 0x1C16CF4
	0x036FF50C MOVZ W8, 0x1
	0x036FF510 STRB W8, [X25 + 0xC24]
	0x036FF514 ADRP X27, 0xA41000
	0x036FF518 LDR W25, [X22 + 0x8]
	0x036FF51C LDR X27, [X27 + 0xF78]
	0x036FF520 ANDS W31, W23, 0xFF
	0x036FF524 CBZ W25, 0x36FF530
	0x036FF528 B.NE 0x36FF534
	0x036FF52C B 0x36FF624
	0x036FF530 B.EQ 0x36FF61C
	0x036FF534 AND W8, W23, 0xFF

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Add X29, X31, 16
	015 Subtract X31, X31, 80
	016 NotImplemented "Instruction MRS not yet implemented."
	017 Move X8, [X20+40]
	018 Move X19, 0xCE2000
	019 Move X22, X3
	020 Move V8, V0
	021 Move [X29-24], X8
	022 Move W8, [X19+3125]
	023 Move W24, W2
	024 Move X25, X1
	025 Move X26, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {38}
	030 Move X0, 0xA42000
	031 Move X0, [X0+3960]
	032 Call 0x1C17CF4
	033 Move X0, 0x9F5000
	034 Move X0, [X0+1448]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X19+3125], W8
	038 Move X9, 0xA42000
	039 Move X9, [X9+3960]
	040 Move W21, S8
	041 Move W8, W21
	042 ShiftRight W8, 23
	043 And W8, W8, 0x3FFFFFFF
	044 And W23, W21, 0x7FFFFF
	045 Move [X29-28], W31
	046 Move [X29-56], X31
	047 Move [X29-48], X31
	048 Move [X29-40], X31
	049 Compare W8, 0
	050 JumpIfEqual {67}
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, [X9]
	053 And X19, X22, 0
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move W3, W23
	059 Move W4, W21
	060 ShiftRight W4, 31
	061 And W4, W4, 0x7FFFFFFF
	062 Move X0, X26
	063 Move X1, X25
	064 Move W2, W24
	065 Move X5, X19
	066 Call BurstString.FormatInfinityNaN, X0, X1, X2, X3, X4, X5
	067 Move X0, [X9]
	068 Move [X29-80], X26
	069 Move [X29-72], X25
	070 Move [X29-60], W24
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move W0, W23
	076 Call BurstString.LogBase2, X0
	077 Move W26, W0
	078 Move W25, W31
	079 Move TEMP, 148
	080 Not TEMP
	081 Move W8, TEMP
	082 Move [X29-84], W8
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Subtract W9, W8, 150
	085 NotImplemented "Instruction CSET not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move [X29-84], W9
	088 NotImplemented "Instruction CSET not yet implemented."
	089 Move [X29-80], X26
	090 Move [X29-72], X25
	091 Move [X29-60], W24
	092 Or W23, W23, 0x800000
	093 And W25, W9, W8
	094 Move W26, 23
	095 Move X8, 0x9F5000
	096 Move X8, [X8+1448]
	097 Move W10, 255
	098 Move W9, W22
	099 ShiftRight W9, 16
	100 And W9, W9, 0x7FFFFF
	101 And W31, W10, W22
	102 Move X0, [X8]
	103 NotImplemented "Instruction CSINV not yet implemented."
	104 Move W8, [X0+224]
	105 Compare W8, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Add W1, W27, 1
	109 Move W0, 10
	110 Move X2, X31
	111 Call Math.Max, X0, X1
	112 Move X19, W0
	113 Compare W0, 0
	114 JumpIfEqual {120}
	115 Add X9, X19, 15
	116 Add X8, X31, 0
	117 And X9, X9, 0xFFFFFFFF
	118 Subtract X28, X8, X9
	119 Add X31, X28, 0
	120 Move X28, X31
	121 Move X0, X28
	122 Move W1, W31
	123 Move X2, X19
	124 Call 0x3EB2B10
	125 Move X24, 0xA42000
	126 Move X24, [X24+3960]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move W9, 7
	129 NotImplemented "Instruction CSEL not yet implemented."
	130 Move X0, [X24]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move W0, W23
	136 Subtract X8, X29, 28
	137 Subtract W7, W19, 1
	138 Move [X31-16], X8
	139 NotImplemented "Instruction LDUR not yet implemented."
	140 Move W4, 1
	141 Move W2, W26
	142 Move W3, W25
	143 Move W5, W27
	144 Move X6, X28
	145 Move W19, 1
	146 Call BurstString.Dragon4, X0, X1, X2, X3, X4, X5, X6, X7, X8
	147 Add X31, X31, 16
	148 Move [X28], W31
	149 NotImplemented "Instruction LDUR not yet implemented."
	150 Move W8, 0x80000000
	151 Move [X29-48], W19
	152 Move [X29-44], W0
	153 Move X0, [X24]
	154 NotImplemented "Instruction CMP not yet implemented."
	155 NotImplemented "Instruction CSET not yet implemented."
	156 Add W9, W9, 1
	157 Move [X29-56], X28
	158 Move [X29-40], W9
	159 NotImplemented "Instruction STURB not yet implemented."
	160 Move W8, [X0+224]
	161 And X19, X22, 0
	162 Compare W8, 0
	163 JumpIfNotEqual {165}
	164 Call 0x1C17DFC
	165 Move X0, [X29-80]
	166 Move X1, [X29-72]
	167 NotImplemented "Instruction LDUR not yet implemented."
	168 Subtract X3, X29, 56
	169 Move W4, W27
	170 Move X5, X19
	171 Call BurstString.FormatNumber, X0, X1, X2, X3, X4, X5
	172 Move X8, [X20+40]
	173 NotImplemented "Instruction LDUR not yet implemented."
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Subtract X31, X29, 16
	176 Move X20, [X31+96]
	177 Move X19, [X31+104]
	178 Move X22, [X31+80]
	179 Move X21, [X31+88]
	180 Move X24, [X31+64]
	181 Move X23, [X31+72]
	182 Move X26, [X31+48]
	183 Move X25, [X31+56]
	184 Move X28, [X31+32]
	185 Move X27, [X31+40]
	186 Move X29, [X31+16]
	187 Move X30, [X31+24]
	188 Move V8, [X31+112]
	189 Return 
	190 Call 0x3EB2B20

Method: System.Void ConvertDoubleToString(System.Byte* dest, ref System.Int32 destIndex, System.Int32 destLength, System.Double value, Unity.Burst.BurstString/FormatOptions formatOptions)

Disassembly:
	0x036FF5C4 STR W11, [X20]
	0x036FF5C8 STRB W9, [X10, X21, LSL]
	0x036FF5CC B.NE 0x36FF5B0
	0x036FF5D0 LDR X0, [X27]
	0x036FF5D4 LDR W8, [X0 + 0xE0]
	0x036FF5D8 CBNZ W8, 0x36FF5E8
	0x036FF5DC MOV W24, W4
	0x036FF5E0 BL 0x1C16DFC
	0x036FF5E4 MOV W4, W24
	0x036FF5E8 AND W8, W28, 0xFF
	0x036FF5EC CMP W8, 0x2
	0x036FF5F0 CSET W5, EQ
	0x036FF5F4 MOV X0, X21
	0x036FF5F8 MOV X1, X20
	0x036FF5FC MOV W2, W19
	0x036FF600 MOV X3, X22
	0x036FF604 BL 0x36FF760
	0x036FF608 MOV X0, X21
	0x036FF60C MOV X1, X20
	0x036FF610 MOV W2, W19
	0x036FF614 MOV W3, W23
	0x036FF618 B 0x36FF6F0
	0x036FF61C UBFM W8, W23, 0x10, 0x17
	0x036FF620 CBZ W8, 0x36FF72C
	0x036FF624 CMP W24, 0x0
	0x036FF628 B.GT 0x36FF630
	0x036FF62C LDR W24, [X22 + 0xC]
	0x036FF630 LDR X0, [X27]
	0x036FF634 LDR W8, [X0 + 0xE0]
	0x036FF638 CBNZ W8, 0x36FF640
	0x036FF63C BL 0x1C16DFC
	0x036FF640 CMP W25, 0x1
	0x036FF644 CSET W2, EQ
	0x036FF648 MOV X0, X22
	0x036FF64C MOV W1, W24
	0x036FF650 SBFM W28, W23, 0x8, 0xF
	0x036FF654 BL 0x36FF800
	0x036FF658 MOV X0, X22
	0x036FF65C MOV W1, W24
	0x036FF660 BL 0x36FF938
	0x036FF664 MOV W25, W0
	0x036FF668 CMP W28, 0x1
	0x036FF66C SXTB W26, W26
	0x036FF670 B.LT 0x36FF6A4
	0x036FF674 CMP W25, W26
	0x036FF678 B.GE 0x36FF6A4
	0x036FF67C SUB W8, W26, W25
	0x036FF680 MOVZ W9, 0x20
	0x036FF684 LDRSW X10, [X20]
	0x036FF688 CMP W10, W19
	0x036FF68C B.GE 0x36FF710
	0x036FF690 ADD W11, W10, 0x1
	0x036FF694 SUBS W8, W8, 0x1
	0x036FF698 STR W11, [X20]
	0x036FF69C STRB W9, [X10, X21, LSL]
	0x036FF6A0 B.NE 0x36FF684
	0x036FF6A4 LDR X0, [X27]
	0x036FF6A8 ANDS X31, X23, 0xFFFFFFFF
	0x036FF6AC MOVZ W9, 0x65
	0x036FF6B0 MOVZ W10, 0x45
	0x036FF6B4 LDR W8, [X0 + 0xE0]
	0x036FF6B8 CSEL W23, W10, W9, EQ
	0x036FF6BC CBNZ W8, 0x36FF6C4
	0x036FF6C0 BL 0x1C16DFC
	0x036FF6C4 MOV X0, X21
	0x036FF6C8 MOV X1, X20
	0x036FF6CC MOV W2, W19
	0x036FF6D0 MOV X3, X22
	0x036FF6D4 MOV W4, W24
	0x036FF6D8 MOV W5, W23
	0x036FF6DC BL 0x36FFA80
	0x036FF6E0 MOV X0, X21
	0x036FF6E4 MOV X1, X20
	0x036FF6E8 MOV W2, W19
	0x036FF6EC MOV W3, W26
	0x036FF6F0 MOV W4, W25
	0x036FF6F4 LDP X20, X19, [X31 + 0x50]
	0x036FF6F8 LDP X22, X21, [X31 + 0x40]
	0x036FF6FC LDP X24, X23, [X31 + 0x30]
	0x036FF700 LDP X26, X25, [X31 + 0x20]
	0x036FF704 LDP X28, X27, [X31 + 0x10]
	0x036FF708 LDP X29, X30, [X31], #0x60
	0x036FF70C B 0x36FE164
	0x036FF710 LDP X20, X19, [X31 + 0x50]
	0x036FF714 LDP X22, X21, [X31 + 0x40]
	0x036FF718 LDP X24, X23, [X31 + 0x30]
	0x036FF71C LDP X26, X25, [X31 + 0x20]
	0x036FF720 LDP X28, X27, [X31 + 0x10]
	0x036FF724 LDP X29, X30, [X31], #0x60
	0x036FF728 RET
	0x036FF72C MOVZ W28, 0x1
	0x036FF730 B 0x36FF548
	0x036FF734 MOV W8, W31
	0x036FF738 SXTW X9, W1
	0x036FF73C MOV X10, X0
	0x036FF740 SDIV X10, X10, X9
	0x036FF744 ADD W8, W8, 0x1
	0x036FF748 CBNZ X10, 0x36FF740
	0x036FF74C CMP W8, W2
	0x036FF750 CSEL W8, W2, W8, LT
	0x036FF754 UBFM X9, X0, 0x3F, 0x3F
	0x036FF758 ADD W0, W8, W9
	0x036FF75C RET
	0x036FF760 LDRB W8, [X3 + 0x14]
	0x036FF764 CBZ W8, 0x36FF77C
	0x036FF768 LDR W8, [X1]
	0x036FF76C CMP W8, W2
	0x036FF770 B.GE 0x36FF7FC
	0x036FF774 MOVZ W9, 0x2D
	0x036FF778 B 0x36FF790
	0x036FF77C TBZ X5, 0x0, 0x36FF79C
	0x036FF780 LDR W8, [X1]
	0x036FF784 CMP W8, W2
	0x036FF788 B.GE 0x36FF7FC
	0x036FF78C MOVZ W9, 0x2B
	0x036FF790 ADD W10, W8, 0x1
	0x036FF794 STR W10, [X1]
	0x036FF798 STRB W9, [X0, W8, SXTW]
	0x036FF79C CMP W4, 0x1
	0x036FF7A0 B.LT 0x36FF7C8
	0x036FF7A4 MOVZ W8, 0x30
	0x036FF7A8 LDRSW X9, [X1]
	0x036FF7AC CMP W9, W2
	0x036FF7B0 B.GE 0x36FF7FC
	0x036FF7B4 ADD W10, W9, 0x1
	0x036FF7B8 SUBS W4, W4, 0x1
	0x036FF7BC STR W10, [X1]
	0x036FF7C0 STRB W8, [X9, X0, LSL]
	0x036FF7C4 B.NE 0x36FF7A8
	0x036FF7C8 LDR W8, [X3 + 0xC]
	0x036FF7CC CMP W8, 0x1
	0x036FF7D0 B.LT 0x36FF7FC
	0x036FF7D4 LDR X9, [X3]
	0x036FF7D8 LDRSW X10, [X1]
	0x036FF7DC CMP W10, W2
	0x036FF7E0 B.GE 0x36FF7FC
	0x036FF7E4 ADD W11, W10, 0x1
	0x036FF7E8 STR W11, [X1]
	0x036FF7EC LDRB W11, [X9], #0x1
	0x036FF7F0 SUBS X8, X8, 0x1
	0x036FF7F4 STRB W11, [X10, X0, LSL]
	0x036FF7F8 B.NE 0x36FF7D8
	0x036FF7FC RET
	0x036FF800 STR X30, [X31 - 0x40]!
	0x036FF804 STP X24, X23, [X31 + 0x10]
	0x036FF808 STP X22, X21, [X31 + 0x20]
	0x036FF80C STP X20, X19, [X31 + 0x30]
	0x036FF810 ADRP X22, 0xCE1000
	0x036FF814 LDRB W8, [X22 + 0xC2A]
	0x036FF818 MOV W20, W2
	0x036FF81C MOV W21, W1
	0x036FF820 MOV X19, X0
	0x036FF824 TBNZ X8, 0x0, 0x36FF83C
	0x036FF828 ADRP X0, 0xA41000
	0x036FF82C LDR X0, [X0 + 0xF78]
	0x036FF830 BL 0x1C16CF4
	0x036FF834 MOVZ W8, 0x1
	0x036FF838 STRB W8, [X22 + 0xC2A]
	0x036FF83C LDR X22, [X19]

ISIL:
	001 Move [X31-112], D8
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Add X29, X31, 16
	015 Subtract X31, X31, 80
	016 NotImplemented "Instruction MRS not yet implemented."
	017 Move X8, [X21+40]
	018 Move X19, 0xCE2000
	019 Move X22, X3
	020 Move V8, V0
	021 Move [X29-24], X8
	022 Move W8, [X19+3126]
	023 Move W20, W2
	024 Move X25, X1
	025 Move X26, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {38}
	030 Move X0, 0xA42000
	031 Move X0, [X0+3960]
	032 Call 0x1C17CF4
	033 Move X0, 0x9F5000
	034 Move X0, [X0+1448]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X19+3126], W8
	038 Move X9, 0xA42000
	039 Move X9, [X9+3960]
	040 Move X23, D8
	041 Move X8, X23
	042 ShiftRight X8, 52
	043 And X8, X8, 0x3FFFFFFF
	044 And X24, X23, 0xFFFFF
	045 Move [X29-28], W31
	046 Move [X29-56], X31
	047 Move [X29-48], X31
	048 Move [X29-40], X31
	049 Compare W8, 0
	050 JumpIfEqual {67}
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, [X9]
	053 And X19, X22, 0
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X4, X23
	059 ShiftRight X4, 63
	060 And X4, X4, 0x7FFFFFFF
	061 Move X0, X26
	062 Move X1, X25
	063 Move W2, W20
	064 Move X3, X24
	065 Move X5, X19
	066 Call BurstString.FormatInfinityNaN, X0, X1, X2, X3, X4, X5
	067 Move X0, [X9]
	068 Move [X29-80], X26
	069 Move [X29-72], X25
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move W0, W23
	075 Call BurstString.LogBase2, X0
	076 Move W27, W0
	077 Move W26, W31
	078 Move TEMP, 1073
	079 Not TEMP
	080 Move W8, TEMP
	081 Move [X29-84], W8
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Subtract W9, W8, 1075
	084 NotImplemented "Instruction CSET not yet implemented."
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move [X29-84], W9
	087 NotImplemented "Instruction CSET not yet implemented."
	088 Move [X29-80], X26
	089 Move [X29-72], X25
	090 Or X24, X24, 0x1FFFFFFFFFFFFF
	091 And W26, W9, W8
	092 Move W27, 52
	093 Move [X29-60], W20
	094 Move X8, 0x9F5000
	095 Move X8, [X8+1448]
	096 Move W10, 255
	097 Move W9, W22
	098 ShiftRight W9, 16
	099 And W9, W9, 0x7FFFFF
	100 And W31, W10, W22
	101 Move X0, [X8]
	102 NotImplemented "Instruction CSINV not yet implemented."
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Add W1, W28, 1
	108 Move W0, 18
	109 Move X2, X31
	110 Call Math.Max, X0, X1
	111 Move X20, W0
	112 Compare W0, 0
	113 JumpIfEqual {119}
	114 Add X9, X20, 15
	115 Add X8, X31, 0
	116 And X9, X9, 0xFFFFFFFF
	117 Subtract X19, X8, X9
	118 Add X31, X19, 0
	119 Move X19, X31
	120 Move X0, X19
	121 Move W1, W31
	122 Move X2, X20
	123 Call 0x3EB2B10
	124 Move X25, 0xA42000
	125 Move X25, [X25+3960]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move W9, 15
	128 NotImplemented "Instruction CSEL not yet implemented."
	129 Move X0, [X25]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Subtract X8, X29, 28
	135 Subtract W7, W20, 1
	136 Move [X31-16], X8
	137 NotImplemented "Instruction LDUR not yet implemented."
	138 Move W4, 1
	139 Move X0, X24
	140 Move W2, W27
	141 Move W3, W26
	142 Move W5, W28
	143 Move X6, X19
	144 Move W20, 1
	145 Call BurstString.Dragon4, X0, X1, X2, X3, X4, X5, X6, X7, X8
	146 Add X31, X31, 16
	147 Move [X19], W31
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 Move X8, 0x80000000
	150 Move [X29-48], W20
	151 Move [X29-44], W0
	152 Move X0, [X25]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 NotImplemented "Instruction CSET not yet implemented."
	155 Add W9, W9, 1
	156 Move [X29-56], X19
	157 Move [X29-40], W9
	158 NotImplemented "Instruction STURB not yet implemented."
	159 Move W8, [X0+224]
	160 And X19, X22, 0
	161 Compare W8, 0
	162 JumpIfNotEqual {164}
	163 Call 0x1C17DFC
	164 Move X0, [X29-80]
	165 Move X1, [X29-72]
	166 NotImplemented "Instruction LDUR not yet implemented."
	167 Subtract X3, X29, 56
	168 Move W4, W28
	169 Move X5, X19
	170 Call BurstString.FormatNumber, X0, X1, X2, X3, X4, X5
	171 Move X8, [X21+40]
	172 NotImplemented "Instruction LDUR not yet implemented."
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Subtract X31, X29, 16
	175 Move X20, [X31+96]
	176 Move X19, [X31+104]
	177 Move X22, [X31+80]
	178 Move X21, [X31+88]
	179 Move X24, [X31+64]
	180 Move X23, [X31+72]
	181 Move X26, [X31+48]
	182 Move X25, [X31+56]
	183 Move X28, [X31+32]
	184 Move X27, [X31+40]
	185 Move X29, [X31+16]
	186 Move X30, [X31+24]
	187 Move V8, [X31+112]
	188 Return 
	189 Call 0x3EB2B20

Method: System.Void .cctor()

Disassembly:
	0x03703028 ADRP X0, 0xA3E000
	0x0370302C LDR X0, [X0 + 0x1B0]
	0x03703030 BL 0x1C16D08
	0x03703034 MOV X1, X0
	0x03703038 MOV X0, X19
	0x0370303C BL 0x1C16DEC
	0x03703040 STP X30, X19, [X31 - 0x10]!
	0x03703044 ADRP X0, 0x9F9000
	0x03703048 LDR X0, [X0 + 0x758]
	0x0370304C BL 0x1C16D08
	0x03703050 BL 0x1C16F10
	0x03703054 MOV X1, X31
	0x03703058 MOV X19, X0
	0x0370305C BL 0x3380288
	0x03703060 ADRP X0, 0xA3E000
	0x03703064 LDR X0, [X0 + 0x1B8]
	0x03703068 BL 0x1C16D08
	0x0370306C MOV X1, X0
	0x03703070 MOV X0, X19
	0x03703074 BL 0x1C16DEC
	0x03703078 STP X30, X19, [X31 - 0x10]!
	0x0370307C ADRP X0, 0x9F9000
	0x03703080 LDR X0, [X0 + 0x758]
	0x03703084 BL 0x1C16D08
	0x03703088 BL 0x1C16F10
	0x0370308C MOV X1, X31
	0x03703090 MOV X19, X0
	0x03703094 BL 0x3380288
	0x03703098 ADRP X0, 0xA3E000
	0x0370309C LDR X0, [X0 + 0x1C0]
	0x037030A0 BL 0x1C16D08
	0x037030A4 MOV X1, X0
	0x037030A8 MOV X0, X19
	0x037030AC BL 0x1C16DEC
	0x037030B0 STP X30, X19, [X31 - 0x10]!
	0x037030B4 ADRP X0, 0x9F9000
	0x037030B8 LDR X0, [X0 + 0x758]
	0x037030BC BL 0x1C16D08
	0x037030C0 BL 0x1C16F10
	0x037030C4 MOV X1, X31
	0x037030C8 MOV X19, X0
	0x037030CC BL 0x3380288
	0x037030D0 ADRP X0, 0xA3E000
	0x037030D4 LDR X0, [X0 + 0x1C8]
	0x037030D8 BL 0x1C16D08
	0x037030DC MOV X1, X0
	0x037030E0 MOV X0, X19
	0x037030E4 BL 0x1C16DEC
	0x037030E8 STP X30, X19, [X31 - 0x10]!
	0x037030EC ADRP X0, 0x9F9000
	0x037030F0 LDR X0, [X0 + 0x758]
	0x037030F4 BL 0x1C16D08
	0x037030F8 BL 0x1C16F10
	0x037030FC MOV X1, X31
	0x03703100 MOV X19, X0
	0x03703104 BL 0x3380288
	0x03703108 ADRP X0, 0xA3E000
	0x0370310C LDR X0, [X0 + 0x1D0]
	0x03703110 BL 0x1C16D08
	0x03703114 MOV X1, X0
	0x03703118 MOV X0, X19
	0x0370311C BL 0x1C16DEC
	0x03703120 STP X30, X19, [X31 - 0x10]!
	0x03703124 ADRP X0, 0x9F9000
	0x03703128 LDR X0, [X0 + 0x758]
	0x0370312C BL 0x1C16D08
	0x03703130 BL 0x1C16F10
	0x03703134 MOV X1, X31
	0x03703138 MOV X19, X0
	0x0370313C BL 0x3380288
	0x03703140 ADRP X0, 0xA3E000
	0x03703144 LDR X0, [X0 + 0x1D8]
	0x03703148 BL 0x1C16D08
	0x0370314C MOV X1, X0
	0x03703150 MOV X0, X19
	0x03703154 BL 0x1C16DEC
	0x03703158 STP X30, X19, [X31 - 0x10]!
	0x0370315C ADRP X0, 0x9F9000
	0x03703160 LDR X0, [X0 + 0x758]
	0x03703164 BL 0x1C16D08
	0x03703168 BL 0x1C16F10
	0x0370316C MOV X1, X31
	0x03703170 MOV X19, X0
	0x03703174 BL 0x3380288
	0x03703178 ADRP X0, 0xA3E000
	0x0370317C LDR X0, [X0 + 0x1E0]
	0x03703180 BL 0x1C16D08
	0x03703184 MOV X1, X0
	0x03703188 MOV X0, X19
	0x0370318C BL 0x1C16DEC
	0x03703190 STP X30, X19, [X31 - 0x10]!
	0x03703194 ADRP X0, 0x9F9000
	0x03703198 LDR X0, [X0 + 0x758]
	0x0370319C BL 0x1C16D08
	0x037031A0 BL 0x1C16F10
	0x037031A4 MOV X1, X31
	0x037031A8 MOV X19, X0
	0x037031AC BL 0x3380288
	0x037031B0 ADRP X0, 0xA3E000
	0x037031B4 LDR X0, [X0 + 0x1E8]
	0x037031B8 BL 0x1C16D08
	0x037031BC MOV X1, X0
	0x037031C0 MOV X0, X19
	0x037031C4 BL 0x1C16DEC
	0x037031C8 STP X30, X19, [X31 - 0x10]!
	0x037031CC ADRP X0, 0x9F9000
	0x037031D0 LDR X0, [X0 + 0x758]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0xCDE000
	010 Move X20, 0x9FA000
	011 Move W8, [X19+3127]
	012 Move X20, [X20+2264]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {43}
	017 Move X0, 0xA3E000
	018 Move X0, [X0+3960]
	019 Call 0x1C17CF4
	020 Move X0, 0x9F1000
	021 Move X0, [X0+1560]
	022 Call 0x1C17CF4
	023 Move X0, 0x9FA000
	024 Move X0, [X0+2264]
	025 Call 0x1C17CF4
	026 Move X0, 0xA3E000
	027 Move X0, [X0+4056]
	028 Call 0x1C17CF4
	029 Move X0, 0xA3E000
	030 Move X0, [X0+4064]
	031 Call 0x1C17CF4
	032 Move X0, 0xA3E000
	033 Move X0, [X0+4072]
	034 Call 0x1C17CF4
	035 Move X0, 0xA3E000
	036 Move X0, [X0+4080]
	037 Call 0x1C17CF4
	038 Move X0, 0xA1A000
	039 Move X0, [X0+3336]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X19+3127], W8
	043 Move X0, [X20]
	044 Move W1, 1
	045 Call 0x1C17D6C
	046 Compare X0, 0
	047 JumpIfEqual {119}
	048 Move W8, [X0+24]
	049 Compare W8, 0
	050 JumpIfEqual {120}
	051 Move X20, 0xA3E000
	052 Move X20, [X20+3960]
	053 Move W8, 58
	054 NotImplemented "Instruction STRH not yet implemented."
	055 Move X21, 0x9F1000
	056 Move X8, [X20]
	057 Move X19, 0xA3E000
	058 Move X22, 0xA1A000
	059 Move X23, 0xA3E000
	060 Move X8, [X8+184]
	061 Move X21, [X21+1560]
	062 Move X19, [X19+4056]
	063 Move X22, [X22+3336]
	064 Move [X8], X0
	065 Move X0, [X21]
	066 Move X24, 0xA3E000
	067 Move X25, 0xA3E000
	068 Move X23, [X23+4064]
	069 Move X24, [X24+4072]
	070 Move X25, [X25+4080]
	071 Move W1, 256
	072 Call 0x1C17D6C
	073 Move X1, [X19]
	074 Move X2, X31
	075 Move X19, X0
	076 Call RuntimeHelpers.InitializeArray, X0, X1
	077 Move X8, [X20]
	078 Move W1, 8
	079 Move X8, [X8+184]
	080 Move [X8+8], X19
	081 Move X0, [X22]
	082 Call 0x1C17D6C
	083 Move X1, [X23]
	084 Move X2, X31
	085 Move X19, X0
	086 Call RuntimeHelpers.InitializeArray, X0, X1
	087 Move X8, [X20]
	088 Move W1, 8
	089 Move X8, [X8+184]
	090 Move [X8+16], X19
	091 Move X0, [X21]
	092 Call 0x1C17D6C
	093 Move X1, [X24]
	094 Move X2, X31
	095 Move X19, X0
	096 Call RuntimeHelpers.InitializeArray, X0, X1
	097 Move X8, [X20]
	098 Move W1, 3
	099 Move X8, [X8+184]
	100 Move [X8+24], X19
	101 Move X0, [X21]
	102 Call 0x1C17D6C
	103 Move X1, [X25]
	104 Move X2, X31
	105 Move X19, X0
	106 Call RuntimeHelpers.InitializeArray, X0, X1
	107 Move X8, [X20]
	108 Move X22, [X31+32]
	109 Move X21, [X31+40]
	110 Move X24, [X31+16]
	111 Move X23, [X31+24]
	112 Move X8, [X8+184]
	113 Move [X8+32], X19
	114 Move X20, [X31+48]
	115 Move X19, [X31+56]
	116 Move X30, [X31+64]
	117 Move X25, [X31+72]
	118 Return 
	119 Call 0x1C17F20
	120 Call 0x1C17F28

