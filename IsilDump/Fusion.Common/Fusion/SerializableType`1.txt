Type: Fusion.SerializableType`1

Method: System.Boolean get_IsValid()

Disassembly:
	0x025DFC0C LDR X1, [X9 + 0x3F0]
	0x025DFC10 MOV X4, X21
	0x025DFC14 LDP X0, X8, [X1 + 0x8]
	0x025DFC18 BLR X8
	0x025DFC1C LDR X2, [X20 + 0x58]
	0x025DFC20 CBZ X2, 0x25DFD64
	0x025DFC24 LDR X8, [X19 + 0x20]
	0x025DFC28 SUB X3, X29, 0x20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0]
	003 Move X1, X31
	004 Call String.IsNullOrEmpty, X0
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W0, W8, 1
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void .ctor(System.Type type)

Disassembly:
	0x025DFC2C MOV X4, X24
	0x025DFC30 LDR X8, [X8 + 0xC0]
	0x025DFC34 LDR X1, [X8 + 0xC8]
	0x025DFC38 LDR X0, [X1]
	0x025DFC3C STUR W26, [X29 - 0xC]
	0x025DFC40 STP X27, X24, [X29 - 0x20]
	0x025DFC44 LDR X8, [X1 + 0x10]
	0x025DFC48 BLR X8
	0x025DFC4C LDR X8, [X19 + 0x20]
	0x025DFC50 LDR X8, [X8 + 0xC0]
	0x025DFC54 LDR X8, [X8 + 0x98]
	0x025DFC58 LDR W9, [X8 + 0x28]
	0x025DFC5C MOV X8, X24

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {16}
	005 Move X8, [X1]
	006 Move X19, X0
	007 Move X0, X1
	008 Move X9, [X8+728]
	009 Move X8, [X8+736]
	010 Move X1, X8
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move [X19], X0
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Call 0x1C17F20

Method: Fusion.SerializableType`1<BaseType> AsShort()

Disassembly:
	0x025DFC60 TBNZ X9, 0x1F, 0x25DFC68
	0x025DFC64 LDR X8, [X24]
	0x025DFC68 LDR X9, [X20]
	0x025DFC6C STP X8, X22, [X29 - 0x20]
	0x025DFC70 SUB X3, X29, 0x20
	0x025DFC74 MOV X2, X20
	0x025DFC78 LDR X1, [X9 + 0x400]
	0x025DFC7C MOV X4, X22
	0x025DFC80 LDP X0, X8, [X1 + 0x8]
	0x025DFC84 BLR X8
	0x025DFC88 LDR X8, [X19 + 0x20]
	0x025DFC8C LDR X9, [X8 + 0xC0]
	0x025DFC90 LDR X8, [X9 + 0x60]
	0x025DFC94 LDR X1, [X9 + 0xD8]
	0x025DFC98 LDR W10, [X8 + 0x28]
	0x025DFC9C LDR X0, [X1]
	0x025DFCA0 MOV X8, X21
	0x025DFCA4 TBNZ X10, 0x1F, 0x25DFCAC
	0x025DFCA8 LDR X8, [X21]
	0x025DFCAC LDR X9, [X9 + 0x88]
	0x025DFCB0 MOV X4, X22
	0x025DFCB4 LDR W9, [X9 + 0x28]
	0x025DFCB8 TBNZ X9, 0x1F, 0x25DFCC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1DFB000
	006 Move X20, 0x1B1D000
	007 Move W8, [X21+3982]
	008 Move X20, [X20+1504]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x1B1D000
	015 Move X0, [X0+1504]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3982], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call SerializableType.GetShortAssemblyQualifiedName, X0
	032 Return X0

Method: System.Type get_Value()

Disassembly:
	0x025DFCBC LDR X4, [X22]
	0x025DFCC0 STP X8, X4, [X29 - 0x20]
	0x025DFCC4 LDR X8, [X1 + 0x10]
	0x025DFCC8 SUB X3, X29, 0x20
	0x025DFCCC MOV X2, X20
	0x025DFCD0 BLR X8
	0x025DFCD4 LDR X0, [X20 + 0x50]
	0x025DFCD8 CBZ X0, 0x25DFD64
	0x025DFCDC LDR X8, [X19 + 0x20]
	0x025DFCE0 ADD W26, W26, 0x1
	0x025DFCE4 LDR X8, [X8 + 0xC0]
	0x025DFCE8 LDR X1, [X8 + 0xE0]
	0x025DFCEC LDR X8, [X1]
	0x025DFCF0 BLR X8
	0x025DFCF4 CMP W26, W0
	0x025DFCF8 B.LT 0x25DFBB0
	0x025DFCFC LDR X0, [X20 + 0x50]
	0x025DFD00 CBZ X0, 0x25DFD64
	0x025DFD04 LDR X8, [X19 + 0x20]
	0x025DFD08 LDR X8, [X8 + 0xC0]
	0x025DFD0C LDR X1, [X8 + 0x10]
	0x025DFD10 LDR X8, [X1]
	0x025DFD14 BLR X8
	0x025DFD18 LDR X0, [X20 + 0x58]
	0x025DFD1C CBZ X0, 0x25DFD64
	0x025DFD20 LDR X8, [X19 + 0x20]
	0x025DFD24 LDR X8, [X8 + 0xC0]
	0x025DFD28 LDR X1, [X8 + 0x20]
	0x025DFD2C LDR X8, [X1]
	0x025DFD30 BLR X8
	0x025DFD34 LDR X8, [X25 + 0x28]
	0x025DFD38 LDUR X9, [X29 - 0x8]
	0x025DFD3C CMP X8, X9
	0x025DFD40 B.NE 0x25DFD68
	0x025DFD44 ADD X31, X29, 0x0
	0x025DFD48 LDP X20, X19, [X31 + 0x50]
	0x025DFD4C LDP X22, X21, [X31 + 0x40]
	0x025DFD50 LDP X24, X23, [X31 + 0x30]
	0x025DFD54 LDP X26, X25, [X31 + 0x20]
	0x025DFD58 LDR X27, [X31 + 0x10]
	0x025DFD5C LDP X29, X30, [X31], #0x60
	0x025DFD60 RET
	0x025DFD64 BL 0x1C16F20
	0x025DFD68 BL 0x3EB1B20
	0x025DFD6C STP X30, X21, [X31 - 0x20]!
	0x025DFD70 STP X20, X19, [X31 + 0x10]
	0x025DFD74 LDR X8, [X1 + 0x20]
	0x025DFD78 MOV X19, X1
	0x025DFD7C MOV X20, X0
	0x025DFD80 LDR X8, [X8 + 0xC0]
	0x025DFD84 LDR X8, [X8 + 0x8]
	0x025DFD88 LDRB W9, [X8 + 0x135]
	0x025DFD8C TBNZ X9, 0x0, 0x25DFD9C
	0x025DFD90 MOV X0, X8
	0x025DFD94 BL 0x1C5C684
	0x025DFD98 MOV X8, X0
	0x025DFD9C MOV X0, X8
	0x025DFDA0 BL 0x1C16F10
	0x025DFDA4 LDR X8, [X19 + 0x20]
	0x025DFDA8 MOV X21, X0
	0x025DFDAC LDR X8, [X8 + 0xC0]
	0x025DFDB0 LDR X1, [X8 + 0xE8]
	0x025DFDB4 LDR X8, [X1]
	0x025DFDB8 BLR X8
	0x025DFDBC STR X21, [X20 + 0x50]
	0x025DFDC0 LDR X8, [X19 + 0x20]
	0x025DFDC4 LDR X8, [X8 + 0xC0]
	0x025DFDC8 LDR X0, [X8 + 0x18]
	0x025DFDCC LDRB W8, [X0 + 0x135]
	0x025DFDD0 TBNZ X8, 0x0, 0x25DFDD8
	0x025DFDD4 BL 0x1C5C684
	0x025DFDD8 BL 0x1C16F10
	0x025DFDDC LDR X8, [X19 + 0x20]
	0x025DFDE0 MOV X21, X0
	0x025DFDE4 LDR X8, [X8 + 0xC0]
	0x025DFDE8 LDR X1, [X8 + 0xF0]
	0x025DFDEC LDR X8, [X1]
	0x025DFDF0 BLR X8
	0x025DFDF4 STR X21, [X20 + 0x58]
	0x025DFDF8 LDR X8, [X19 + 0x20]
	0x025DFDFC MOV X0, X20
	0x025DFE00 LDP X20, X19, [X31 + 0x10]
	0x025DFE04 LDR X8, [X8 + 0xC0]
	0x025DFE08 LDR X1, [X8 + 0xF8]
	0x025DFE0C LDR X2, [X1]
	0x025DFE10 LDP X30, X21, [X31], #0x20
	0x025DFE14 BR X2
	0x025DFE18 STR X30, [X31 - 0x30]!
	0x025DFE1C STP X22, X21, [X31 + 0x10]
	0x025DFE20 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1DFB000
	007 Move X21, 0x1B1D000
	008 Move W8, [X22+3983]
	009 Move X21, [X21+1504]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x1B1D000
	017 Move X0, [X0+1504]
	018 Call 0x1C17CF4
	019 Move X0, 0x1B15000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+3983], W8
	024 Move X8, [X20]
	025 Move X0, [X21]
	026 Move [X31+8], X8
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X21, 0x1B15000
	032 Move X21, [X21+1728]
	033 Add X0, X31, 8
	034 Move X1, X31
	035 Call SerializableType.get_Value, X0
	036 Move X8, [X19+32]
	037 Move X20, X0
	038 Move W9, [X8+309]
	039 Move TEMP, X9
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {46}
	043 Move X0, X8
	044 Call 0x1C5D684
	045 Move X8, X0
	046 Move X0, [X21]
	047 Move X8, [X8+192]
	048 Move W9, [X0+224]
	049 Move X21, [X8+8]
	050 Compare W9, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X21
	054 Move X1, X31
	055 Call Type.GetTypeFromHandle, X0
	056 Compare X20, 0
	057 JumpIfEqual {75}
	058 Move X8, [X20]
	059 Move X1, X0
	060 Move X0, X20
	061 Move X9, [X8+664]
	062 Move X2, [X8+672]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {76}
	068 Move X0, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Return X0
	075 Call 0x1C17F20
	076 Move X0, [X19+32]
	077 Call 0x199C99C
	078 Move X8, [X0+192]
	079 Move X0, 0x1B15000
	080 Move X21, [X8+8]
	081 Move X0, [X0+1728]
	082 Call 0x1C17D08
	083 Call 0x19913D0
	084 Move X0, X21
	085 Move X1, X31
	086 Call Type.GetTypeFromHandle, X0
	087 Move X21, X0
	088 Move X0, 0x1B3F000
	089 Move X0, [X0+560]
	090 Call 0x1C17D08
	091 Move X1, X20
	092 Move X2, X21
	093 Move X3, X31
	094 Call String.Format, X0, X1, X2
	095 Move X20, X0
	096 Move X0, 0x1B15000
	097 Move X0, [X0+2000]
	098 Call 0x1C17D08
	099 Call 0x1C17F10
	100 Move X1, X20
	101 Move X2, X31
	102 Move X21, X0
	103 Call Exception..ctor, X0, X1
	104 Move X0, X21
	105 Move X1, X19
	106 Call 0x1C17DEC

Method: Fusion.SerializableType`1<BaseType> op_Implicit(System.Type type)

Disassembly:
	0x025DFE24 LDR X8, [X2 + 0x8]
	0x025DFE28 STP X1, X2, [X0 + 0x20]
	0x025DFE2C MOV X19, X0
	0x025DFE30 MOV X20, X2
	0x025DFE34 STR X8, [X0 + 0x10]
	0x025DFE38 LDRB W22, [X2 + 0x52]
	0x025DFE3C STR X0, [X0 + 0x40]
	0x025DFE40 MOV X0, X2
	0x025DFE44 MOV X21, X1
	0x025DFE48 BL 0x1C16D84
	0x025DFE4C TBZ X0, 0x0, 0x25DFE6C
	0x025DFE50 ADRP X8, 0xFFFFFFFFFF3D5000
	0x025DFE54 ADRP X9, 0xFFFFFFFFFF3D5000
	0x025DFE58 ADD X8, X8, 0xC30
	0x025DFE5C ADD X9, X9, 0xBF8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X1+32]
	004 Move X19, X0
	005 Move W9, [X8+309]
	006 Move TEMP, X9
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfEqual {12}
	010 Move X0, X8
	011 Call 0x1C5D684
	012 Compare X19, 0
	013 JumpIfEqual {21}
	014 Move X8, [X19]
	015 Move X0, X19
	016 Move X2, [X8+728]
	017 Move X1, [X8+736]
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 CallNoReturn X2
	021 Call 0x1C17F20

Method: System.Type op_Implicit(Fusion.SerializableType`1<BaseType> serializableType)

Disassembly:
	0x025DFE60 CMP W22, 0x2
	0x025DFE64 CSEL X8, X9, X8, EQ
	0x025DFE68 B 0x25DFEE4
	0x025DFE6C CMP W22, 0x1
	0x025DFE70 B.NE 0x25DFEA4
	0x025DFE74 LDRB W8, [X19 + 0x70]
	0x025DFE78 CBZ W8, 0x25DFEB4
	0x025DFE7C MOV X0, X20
	0x025DFE80 BL 0x1C16D7C
	0x025DFE84 MOV W21, W0
	0x025DFE88 MOV X0, X20
	0x025DFE8C BL 0x1C17238

ISIL:
	001 Move [X31-16], X30
	002 Move [X31+8], X0
	003 Move X0, [X1+32]
	004 Move W8, [X0+309]
	005 Move TEMP, X8
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfEqual {10}
	009 Call 0x1C5D684
	010 Move X8, [X0+192]
	011 Add X0, X31, 8
	012 Move X1, [X8+24]
	013 Call 0x25DFCBC, X0
	014 Move X30, [X31+16]
	015 Return X0

Method: System.Boolean Equals(Fusion.SerializableType`1<BaseType> other)

Disassembly:
	0x025DFE90 TBZ X21, 0x0, 0x25DFEC0
	0x025DFE94 TBZ X0, 0x0, 0x25DFED0
	0x025DFE98 ADRP X8, 0xFFFFFFFFFF3D5000

ISIL:
	001 Move X0, [X0]
	002 Move X2, X31
	003 Call String.op_Equality, X0, X1
	004 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x025DFE9C ADD X8, X8, 0xE14
	0x025DFEA0 B 0x25DFEE4
	0x025DFEA4 CBZ X21, 0x25DFF04
	0x025DFEA8 ADRP X8, 0xFFFFFFFFFF3D5000
	0x025DFEAC ADD X8, X8, 0xC6C
	0x025DFEB0 B 0x25DFEE4
	0x025DFEB4 ADRP X8, 0xFFFFFFFFFF3D5000
	0x025DFEB8 ADD X8, X8, 0xCA4
	0x025DFEBC B 0x25DFEE4
	0x025DFEC0 TBZ X0, 0x0, 0x25DFEDC
	0x025DFEC4 ADRP X8, 0xFFFFFFFFFF3D5000
	0x025DFEC8 ADD X8, X8, 0xD18
	0x025DFECC B 0x25DFEE4
	0x025DFED0 ADRP X8, 0xFFFFFFFFFF3D5000
	0x025DFED4 ADD X8, X8, 0xDBC
	0x025DFED8 B 0x25DFEE4
	0x025DFEDC ADRP X8, 0xFFFFFFFFFF3D5000
	0x025DFEE0 ADD X8, X8, 0xCDC
	0x025DFEE4 STR X8, [X19 + 0x18]
	0x025DFEE8 ADRP X8, 0xFFFFFFFFFF3D5000
	0x025DFEEC ADD X8, X8, 0xBA0
	0x025DFEF0 STR X8, [X19 + 0x38]
	0x025DFEF4 LDP X20, X19, [X31 + 0x20]
	0x025DFEF8 LDP X22, X21, [X31 + 0x10]
	0x025DFEFC LDR X30, [X31], #0x30
	0x025DFF00 RET
	0x025DFF04 ADRP X1, 0xFFFFFFFFFE53C000
	0x025DFF08 ADD X1, X1, 0xEE3
	0x025DFF0C MOV X0, X31
	0x025DFF10 BL 0x1C16F3C
	0x025DFF14 MOV X1, X31
	0x025DFF18 BL 0x1C16DEC
	0x025DFF1C LDR X8, [X0 + 0x40]
	0x025DFF20 LDR X4, [X0 + 0x18]
	0x025DFF24 LDR X3, [X0 + 0x28]
	0x025DFF28 MOV X0, X8
	0x025DFF2C BR X4
	0x025DFF30 STP X29, X30, [X31 - 0x40]!
	0x025DFF34 STR X23, [X31 + 0x10]
	0x025DFF38 STP X22, X21, [X31 + 0x20]
	0x025DFF3C STP X20, X19, [X31 + 0x30]
	0x025DFF40 ADD X29, X31, 0x0
	0x025DFF44 SUB X31, X31, 0x10
	0x025DFF48 MRS X23, 0xC000
	0x025DFF4C LDR X8, [X23 + 0x28]
	0x025DFF50 MOV X21, X1
	0x025DFF54 MOV X20, X0
	0x025DFF58 STUR X8, [X29 - 0x8]
	0x025DFF5C LDR X8, [X1 + 0x20]
	0x025DFF60 LDR X8, [X8 + 0xC0]
	0x025DFF64 LDR X19, [X8 + 0x8]
	0x025DFF68 ADD X9, X19, 0x135
	0x025DFF6C LDRH W9, [X9]
	0x025DFF70 TBNZ X9, 0x0, 0x25DFF94
	0x025DFF74 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X20, X2
	007 Move X21, X1
	008 Move X19, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Compare X21, 0
	026 JumpIfEqual {29}
	027 Move X8, [X21]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move W0, W31
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0
	035 Move X0, [X20+32]
	036 Move W8, [X0+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {42}
	041 Call 0x1C5D684
	042 Move X8, [X0+192]
	043 Move X1, [X8]
	044 Move W8, [X1+309]
	045 Move TEMP, X8
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {52}
	049 Move X0, X1
	050 Call 0x1C5D684
	051 Move X1, X0
	052 Move X8, [X21]
	053 Move X9, [X1+64]
	054 Move X0, X21
	055 Move X8, [X8+64]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Call 0x1C17E08
	058 Move X8, X0
	059 Move X0, [X20+32]
	060 Move X20, [X8]
	061 Move W9, [X0+309]
	062 Move TEMP, X9
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfEqual {67}
	066 Call 0x1C5D684
	067 Move X0, [X19]
	068 Move X1, X20
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X2, X31
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Call String.op_Equality, X0, X1
	075 Return X0
	076 Call 0x1C181E0

Method: System.Int32 GetHashCode()

Disassembly:
	0x025DFF78 BL 0x1C5C684
	0x025DFF7C LDR X8, [X21 + 0x20]
	0x025DFF80 LDR X8, [X8 + 0xC0]
	0x025DFF84 LDR X19, [X8 + 0x8]
	0x025DFF88 ADD X9, X19, 0x135
	0x025DFF8C LDRH W9, [X9]

ISIL:
	001 Move X0, [X0]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+344]
	006 Move X1, [X8+352]
	007 CallNoReturn X2
	008 Return X0

