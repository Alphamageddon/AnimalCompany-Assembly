Type: Fusion.SerializableType

Method: System.Boolean get_IsValid()

Disassembly:
	0x01E34980 ORR W22, W22, W8, 0x0
	0x01E34984 CINC W23, W23, EQ
	0x01E34988 BL 0x3222A1C
	0x01E3498C LDR W9, [X19 + 0x10]
	0x01E34990 AND W8, W0, 0xFFFF
	0x01E34994 CMP W8, 0x7D
	0x01E34998 CSET W8, EQ
	0x01E3499C ADD W21, W21, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0]
	003 Move X1, X31
	004 Call String.IsNullOrEmpty, X0
	005 NotImplemented "Instruction ORN not yet implemented."
	006 And W0, W8, 1
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void .ctor(System.Type type)

Disassembly:
	0x01E349A0 CMP W21, W9
	0x01E349A4 SUB W23, W23, W8
	0x01E349A8 B.GE 0x1E349B4
	0x01E349AC CMP W23, 0x0
	0x01E349B0 B.GT 0x1E34958
	0x01E349B4 CMP W23, 0x0
	0x01E349B8 CSET W8, NE
	0x01E349BC ORN W8, W8, W22, 0x0
	0x01E349C0 TBNZ X8, 0x0, 0x1E349E4
	0x01E349C4 LDR W1, [X20 + 0x10]
	0x01E349C8 MOV X0, X19
	0x01E349CC LDP X20, X19, [X31 + 0x20]
	0x01E349D0 MOV X3, X31
	0x01E349D4 SUB W2, W21, W1
	0x01E349D8 LDP X22, X21, [X31 + 0x10]
	0x01E349DC LDP X30, X23, [X31], #0x30
	0x01E349E0 B 0x3228B90
	0x01E349E4 MOV X0, X19
	0x01E349E8 LDP X20, X19, [X31 + 0x20]
	0x01E349EC LDP X22, X21, [X31 + 0x10]
	0x01E349F0 LDP X30, X23, [X31], #0x30
	0x01E349F4 RET
	0x01E349F8 BL 0x1C16F20
	0x01E349FC MOV X1, X31
	0x01E34A00 B 0x33BDD8C
	0x01E34A04 STR X30, [X31 - 0x30]!
	0x01E34A08 STP X22, X21, [X31 + 0x10]
	0x01E34A0C STP X20, X19, [X31 + 0x20]
	0x01E34A10 ADRP X21, 0x25A4000
	0x01E34A14 ADRP X22, 0x22C7000
	0x01E34A18 ADRP X19, 0x22C7000
	0x01E34A1C ADRP X20, 0x22C7000
	0x01E34A20 LDRB W8, [X21 + 0xEC0]
	0x01E34A24 LDR X22, [X22 + 0x600]
	0x01E34A28 LDR X19, [X19 + 0x678]
	0x01E34A2C LDR X20, [X20 + 0x670]
	0x01E34A30 TBNZ X8, 0x0, 0x1E34A60
	0x01E34A34 ADRP X0, 0x22C7000
	0x01E34A38 LDR X0, [X0 + 0x670]
	0x01E34A3C BL 0x1C16CF4
	0x01E34A40 ADRP X0, 0x22C7000
	0x01E34A44 LDR X0, [X0 + 0x600]
	0x01E34A48 BL 0x1C16CF4
	0x01E34A4C ADRP X0, 0x22C7000
	0x01E34A50 LDR X0, [X0 + 0x678]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25A5000
	007 Move X22, 0x22C0000
	008 Move W8, [X21+3761]
	009 Move X22, [X22+1728]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x22C2000
	017 Move X0, [X0+632]
	018 Call 0x1C17CF4
	019 Move X0, 0x22C0000
	020 Move X0, [X0+1728]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3761], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Type.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {42}
	037 Move X8, 0x22C2000
	038 Move X8, [X8+632]
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move X0, [X8]
	042 Compare X20, 0
	043 JumpIfEqual {56}
	044 Move X8, [X20]
	045 Move X0, X20
	046 Move X9, [X8+728]
	047 Move X1, [X8+736]
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move [X19], X0
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X30, [X31+48]
	055 Return 
	056 Call 0x1C17F20

Method: System.Void .ctor(System.String type)

Disassembly:
	0x01E34A54 BL 0x1C16CF4
	0x01E34A58 MOVZ W8, 0x1
	0x01E34A5C STRB W8, [X21 + 0xEC0]
	0x01E34A60 LDR X0, [X22]
	0x01E34A64 BL 0x1C16F10
	0x01E34A68 LDR X1, [X19]
	0x01E34A6C MOVZ W2, 0x9
	0x01E34A70 MOV X3, X31
	0x01E34A74 MOV X19, X0
	0x01E34A78 BL 0x3633518
	0x01E34A7C LDR X8, [X20]
	0x01E34A80 LDP X22, X21, [X31 + 0x10]
	0x01E34A84 LDR X8, [X8 + 0xB8]
	0x01E34A88 STR X19, [X8]
	0x01E34A8C LDP X20, X19, [X31 + 0x20]
	0x01E34A90 LDR X30, [X31], #0x30
	0x01E34A94 RET
	0x01E34A98 FABS S4, S0
	0x01E34A9C FABS S5, S1
	0x01E34AA0 FABS S6, S2
	0x01E34AA4 FABS S7, S3
	0x01E34AA8 FCMP S4, S5
	0x01E34AAC CSET W10, LE
	0x01E34AB0 FCSEL S4, S5, S4, LE
	0x01E34AB4 FCMP S6, S7

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25A5000
	006 Move W8, [X21+3762]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22C2000
	014 Move X0, [X0+632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3762], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Call String.IsNullOrEmpty, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {30}
	025 Move X8, 0x22C2000
	026 Move X8, [X8+632]
	027 Move X8, [X8]
	028 Move X8, [X8+184]
	029 Move X20, [X8]
	030 Move [X19], X20
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 

Method: System.Type get_Value()

Disassembly:
	0x01E34AB8 MOVZ W8, 0x3
	0x01E34ABC MOVZ W9, 0x2
	0x01E34AC0 FCSEL S5, S6, S7, GT
	0x01E34AC4 CSEL W8, W9, W8, GT
	0x01E34AC8 FCMP S4, S5
	0x01E34ACC CSEL W8, W10, W8, GT
	0x01E34AD0 CMP W8, 0x2
	0x01E34AD4 B.EQ 0x1E34AF0
	0x01E34AD8 CMP W8, 0x1
	0x01E34ADC B.EQ 0x1E34AF8
	0x01E34AE0 CBNZ W8, 0x1E34B00
	0x01E34AE4 MOV V4.16B, V0.16B
	0x01E34AE8 MOV V0.16B, V1.16B
	0x01E34AEC B 0x1E34B0C
	0x01E34AF0 MOV V4.16B, V2.16B
	0x01E34AF4 B 0x1E34B08
	0x01E34AF8 MOV V4.16B, V1.16B
	0x01E34AFC B 0x1E34B0C
	0x01E34B00 MOV V4.16B, V3.16B
	0x01E34B04 MOV V3.16B, V2.16B
	0x01E34B08 MOV V2.16B, V1.16B
	0x01E34B0C ADRP X9, 0xFFFFFFFFFECB5000
	0x01E34B10 LDR V1, [X9 + 0xF5C]
	0x01E34B14 MOVZ W9, 0x44000000
	0x01E34B18 FCMP S4, 0x0
	0x01E34B1C FMUL S0, S0, S1
	0x01E34B20 FMUL S2, S2, S1
	0x01E34B24 FMUL S1, S3, S1
	0x01E34B28 FMOV S3, W9
	0x01E34B2C B.LE 0x1E34B60
	0x01E34B30 FADD S0, S0, S3
	0x01E34B34 FADD S2, S2, S3
	0x01E34B38 FCVTZS W9, S0
	0x01E34B3C FCVTZU W10, S0
	0x01E34B40 FCMP S0, 0x0
	0x01E34B44 FCVTZS W11, S2
	0x01E34B48 FCVTZU W12, S2
	0x01E34B4C CSEL W9, W9, W10, MI
	0x01E34B50 FCMP S2, 0x0
	0x01E34B54 CSEL W10, W11, W12, MI
	0x01E34B58 FADD S0, S1, S3
	0x01E34B5C B 0x1E34B8C
	0x01E34B60 FSUB S0, S3, S0
	0x01E34B64 FSUB S2, S3, S2
	0x01E34B68 FCVTZS W9, S0
	0x01E34B6C FCVTZU W10, S0
	0x01E34B70 FCMP S0, 0x0
	0x01E34B74 FCVTZS W11, S2
	0x01E34B78 FCVTZU W12, S2
	0x01E34B7C CSEL W9, W9, W10, MI
	0x01E34B80 FCMP S2, 0x0
	0x01E34B84 CSEL W10, W11, W12, MI
	0x01E34B88 FSUB S0, S3, S1
	0x01E34B8C FCVTZS W11, S0
	0x01E34B90 FCVTZU W12, S0
	0x01E34B94 FCMP S0, 0x0
	0x01E34B98 CSEL W11, W11, W12, MI
	0x01E34B9C UBFM W11, W11, 0xC, 0xB
	0x01E34BA0 ORR W8, W11, W8, 0x1E
	0x01E34BA4 ORR W8, W8, W10, 0xA
	0x01E34BA8 ORR W0, W8, W9, 0x0
	0x01E34BAC RET
	0x01E34BB0 STR D10, [X31 - 0x40]!
	0x01E34BB4 STP D9, D8, [X31 + 0x10]
	0x01E34BB8 STP X30, X21, [X31 + 0x20]
	0x01E34BBC STP X20, X19, [X31 + 0x30]
	0x01E34BC0 ADRP X20, 0x25A4000
	0x01E34BC4 ADRP X21, 0x22BF000
	0x01E34BC8 LDRB W8, [X20 + 0xEC1]
	0x01E34BCC LDR X21, [X21 + 0x5A8]
	0x01E34BD0 MOV W19, W0
	0x01E34BD4 TBNZ X8, 0x0, 0x1E34BEC
	0x01E34BD8 ADRP X0, 0x22BF000
	0x01E34BDC LDR X0, [X0 + 0x5A8]
	0x01E34BE0 BL 0x1C16CF4
	0x01E34BE4 MOVZ W8, 0x1
	0x01E34BE8 STRB W8, [X20 + 0xEC1]
	0x01E34BEC LDR X0, [X21]
	0x01E34BF0 ADRP X10, 0xFFFFFFFFFECB6000
	0x01E34BF4 UBFM W8, W19, 0xA, 0x13
	0x01E34BF8 LDR V0, [X10 + 0x38]
	0x01E34BFC AND W10, W19, 0x3FF
	0x01E34C00 SUB X8, X8, 0x200
	0x01E34C04 UBFM W9, W19, 0x14, 0x1D
	0x01E34C08 SUB X10, X10, 0x200
	0x01E34C0C SCVTF S2, X8
	0x01E34C10 LDR W8, [X0 + 0xE0]
	0x01E34C14 SCVTF S1, X10
	0x01E34C18 SUB X9, X9, 0x200
	0x01E34C1C FMUL S9, S1, S0
	0x01E34C20 SCVTF S1, X9
	0x01E34C24 UBFM W20, W19, 0x1E, 0x1F
	0x01E34C28 FMUL S8, S2, S0
	0x01E34C2C FMUL S10, S1, S0
	0x01E34C30 CBNZ W8, 0x1E34C38
	0x01E34C34 BL 0x1C16DFC
	0x01E34C38 FMUL S0, S9, S9
	0x01E34C3C FMUL S1, S8, S8
	0x01E34C40 FMUL S2, S10, S10
	0x01E34C44 FADD S0, S0, S1
	0x01E34C48 FADD S0, S2, S0
	0x01E34C4C FCVT S0, S0
	0x01E34C50 FMOV D1, 1
	0x01E34C54 FSUB D0, D1, D0
	0x01E34C58 FSQRT D0, D0
	0x00000000 INVALID
	0x01E34C60 CBZ W20, 0x1E34C80
	0x01E34C64 MOV V0.16B, V9.16B
	0x01E34C68 CMP W20, 0x2
	0x01E34C6C B.EQ 0x1E34C88
	0x01E34C70 CMP W20, 0x1
	0x01E34C74 B.NE 0x1E34C98
	0x01E34C78 MOV V9.16B, V3.16B
	0x01E34C7C B 0x1E34C90
	0x01E34C80 MOV V0.16B, V3.16B
	0x01E34C84 B 0x1E34C90
	0x01E34C88 MOV V9.16B, V8.16B
	0x01E34C8C MOV V8.16B, V3.16B
	0x01E34C90 MOV V3.16B, V10.16B
	0x01E34C94 B 0x1E34CA0
	0x01E34C98 MOV V9.16B, V8.16B
	0x01E34C9C MOV V8.16B, V10.16B
	0x01E34CA0 MOV V1.16B, V9.16B
	0x01E34CA4 MOV V2.16B, V8.16B
	0x01E34CA8 LDP X20, X19, [X31 + 0x30]
	0x01E34CAC LDP X30, X21, [X31 + 0x20]
	0x01E34CB0 LDP D9, D8, [X31 + 0x10]
	0x01E34CB4 LDR V10, [X31], #0x40
	0x01E34CB8 RET
	0x01E34CBC ADD W8, W0, 0x7
	0x01E34CC0 SBFM W0, W8, 0x3, 0x1F
	0x01E34CC4 RET
	0x01E34CC8 ADD W8, W0, 0x1F
	0x01E34CCC SBFM W0, W8, 0x5, 0x1F
	0x01E34CD0 RET
	0x01E34CD4 SXTH W8, W0
	0x01E34CD8 ADD W8, W8, 0x7
	0x01E34CDC UBFM W0, W8, 0x3, 0x1F
	0x01E34CE0 RET
	0x01E34CE4 STP X30, X27, [X31 - 0x50]!
	0x01E34CE8 STP X26, X25, [X31 + 0x10]
	0x01E34CEC STP X24, X23, [X31 + 0x20]
	0x01E34CF0 STP X22, X21, [X31 + 0x30]
	0x01E34CF4 STP X20, X19, [X31 + 0x40]
	0x01E34CF8 ADRP X20, 0x25A4000
	0x01E34CFC ADRP X22, 0x22BF000
	0x01E34D00 LDRB W8, [X20 + 0xEC2]
	0x01E34D04 LDR X22, [X22 + 0x8F0]
	0x01E34D08 MOV W21, W1
	0x01E34D0C MOV X19, X0
	0x01E34D10 TBNZ X8, 0x0, 0x1E34D4C
	0x01E34D14 ADRP X0, 0x22BF000
	0x01E34D18 LDR X0, [X0 + 0x8F0]
	0x01E34D1C BL 0x1C16CF4
	0x01E34D20 ADRP X0, 0x22C7000
	0x01E34D24 LDR X0, [X0 + 0x680]
	0x01E34D28 BL 0x1C16CF4
	0x01E34D2C ADRP X0, 0x22BF000
	0x01E34D30 LDR X0, [X0 + 0xDD8]
	0x01E34D34 BL 0x1C16CF4
	0x01E34D38 ADRP X0, 0x22C7000
	0x01E34D3C LDR X0, [X0 + 0x688]
	0x01E34D40 BL 0x1C16CF4
	0x01E34D44 MOVZ W8, 0x1
	0x01E34D48 STRB W8, [X20 + 0xEC2]
	0x01E34D4C LDR X0, [X22]
	0x01E34D50 BL 0x1C16F10
	0x01E34D54 MOV X1, X31
	0x01E34D58 MOV X20, X0
	0x01E34D5C BL 0x3231AC4
	0x01E34D60 CBZ X20, 0x1E34E24
	0x01E34D64 ADRP X8, 0x22C7000
	0x01E34D68 LDR X8, [X8 + 0x688]
	0x01E34D6C ADRP X22, 0x22C7000
	0x01E34D70 MOV X0, X20
	0x01E34D74 MOV X2, X31
	0x01E34D78 LDR X1, [X8]
	0x01E34D7C LDR X22, [X22 + 0x680]
	0x01E34D80 BL 0x32333E0
	0x01E34D84 CMP W21, 0x1
	0x01E34D88 B.LT 0x1E34DF0
	0x01E34D8C ADRP X24, 0x22BF000
	0x01E34D90 LDR X24, [X24 + 0xDD8]
	0x01E34D94 MOV X23, X31
	0x01E34D98 MOV W21, W21
	0x01E34D9C MOVZ W25, 0x30
	0x01E34DA0 LDRB W26, [X23, X19, LSL]
	0x01E34DA4 MOV W27, W31
	0x01E34DA8 LSRV W8, W26, W27
	0x01E34DAC ANDS W31, W8, 0x1
	0x01E34DB0 CINC W1, W25, NE
	0x01E34DB4 MOV X0, X20
	0x01E34DB8 MOV X2, X31
	0x01E34DBC BL 0x3233D30
	0x01E34DC0 ADD W27, W27, 0x1
	0x01E34DC4 CMP W27, 0x8
	0x01E34DC8 B.NE 0x1E34DA8
	0x01E34DCC ADD X23, X23, 0x1
	0x01E34DD0 CMP X23, X21
	0x01E34DD4 B.CS 0x1E34DE8
	0x01E34DD8 LDR X1, [X24]
	0x01E34DDC MOV X0, X20
	0x01E34DE0 MOV X2, X31
	0x01E34DE4 BL 0x32333E0
	0x01E34DE8 CMP X23, X21
	0x01E34DEC B.NE 0x1E34DA0
	0x01E34DF0 LDR X1, [X22]
	0x01E34DF4 MOV X0, X20
	0x01E34DF8 MOV X2, X31
	0x01E34DFC BL 0x32333E0
	0x01E34E00 LDR X8, [X20]
	0x01E34E04 MOV X0, X20
	0x01E34E08 LDP X20, X19, [X31 + 0x40]
	0x01E34E0C LDP X22, X21, [X31 + 0x30]
	0x01E34E10 LDP X2, X1, [X8 + 0x168]
	0x01E34E14 LDP X24, X23, [X31 + 0x20]
	0x01E34E18 LDP X26, X25, [X31 + 0x10]
	0x01E34E1C LDP X30, X27, [X31], #0x50
	0x01E34E20 BR X2
	0x01E34E24 BL 0x1C16F20
	0x01E34E28 MOVZ W8, 0x20
	0x01E34E2C SUBS W9, W8, 0x1
	0x01E34E30 LSRV W10, W0, W9
	0x01E34E34 TBNZ X10, 0x0, 0x1E34E44
	0x01E34E38 MOV W8, W9
	0x01E34E3C B.NE 0x1E34E2C
	0x01E34E40 MOV W8, W31
	0x01E34E44 MOV W0, W8
	0x01E34E48 RET
	0x01E34E4C STR D8, [X31 - 0x20]!
	0x01E34E50 STR X30, [X31 + 0x8]
	0x01E34E54 STP X20, X19, [X31 + 0x10]
	0x01E34E58 ADRP X19, 0x25A4000
	0x01E34E5C ADRP X20, 0x22BF000
	0x01E34E60 LDRB W8, [X19 + 0xEC3]
	0x01E34E64 LDR X20, [X20 + 0x5A8]
	0x01E34E68 MOV V8.16B, V0.16B
	0x01E34E6C TBNZ X8, 0x0, 0x1E34E84
	0x01E34E70 ADRP X0, 0x22BF000
	0x01E34E74 LDR X0, [X0 + 0x5A8]
	0x01E34E78 BL 0x1C16CF4
	0x01E34E7C MOVZ W8, 0x1
	0x01E34E80 STRB W8, [X19 + 0xEC3]
	0x01E34E84 LDR X0, [X20]
	0x01E34E88 LDR W8, [X0 + 0xE0]
	0x01E34E8C CBNZ W8, 0x1E34E94
	0x01E34E90 BL 0x1C16DFC
	0x01E34E94 MOVZ X8, 0x7FF00000
	0x01E34E98 LDP X20, X19, [X31 + 0x10]
	0x01E34E9C LDR X30, [X31 + 0x8]
	0x01E34EA0 FRINTM D0, D8
	0x01E34EA4 FMOV D1, X8
	0x01E34EA8 FCVTMS W9, D8
	0x01E34EAC FCMP D0, D1
	0x01E34EB0 MOVZ W8, 0x80000000
	0x01E34EB4 CSEL W0, W8, W9, EQ

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x25A5000
	009 Move W8, [X20+3763]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {38}
	015 Move X0, 0x22C8000
	016 Move X0, [X0+1456]
	017 Call 0x1C17CF4
	018 Move X0, 0x22C0000
	019 Move X0, [X0+1808]
	020 Call 0x1C17CF4
	021 Move X0, 0x22C2000
	022 Move X0, [X0+624]
	023 Call 0x1C17CF4
	024 Move X0, 0x22C8000
	025 Move X0, [X0+1464]
	026 Call 0x1C17CF4
	027 Move X0, 0x22C8000
	028 Move X0, [X0+1472]
	029 Call 0x1C17CF4
	030 Move X0, 0x22C8000
	031 Move X0, [X0+1480]
	032 Call 0x1C17CF4
	033 Move X0, 0x22C0000
	034 Move X0, [X0+1728]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+3763], W8
	038 Move [X31+8], X31
	039 Move X0, [X19]
	040 Move X1, X31
	041 Call String.IsNullOrEmpty, X0
	042 Move X20, X31
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {174}
	047 Move X23, 0x22C8000
	048 Move X23, [X23+1456]
	049 Move X0, [X23]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X23]
	055 Move X8, [X0+184]
	056 Move X20, [X8]
	057 Move [X31+4], W31
	058 Add X1, X31, 4
	059 Move X0, X20
	060 Move X2, X31
	061 Call Monitor.Enter, X0, X1
	062 Move X0, [X23]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X23]
	068 Move X8, [X0+184]
	069 Move X0, [X8]
	070 Compare X0, 0
	071 JumpIfEqual {185}
	072 Move X8, 0x22C2000
	073 Move X1, [X19]
	074 Move X8, [X8+624]
	075 Move X3, [X8]
	076 Add X2, X31, 8
	077 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {117}
	082 Move X8, 0x22C0000
	083 Move X8, [X8+1728]
	084 Move X21, [X19]
	085 Move X0, [X8]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X8, 0x22C8000
	091 Move X9, 0x22C8000
	092 Move X8, [X8+1480]
	093 Move X9, [X9+1472]
	094 Move X2, [X8]
	095 Move X3, [X9]
	096 Move W1, 1
	097 Move X0, X21
	098 Call 0x1C180BC
	099 Move X8, [X23]
	100 Move [X31+8], X0
	101 Move W9, [X8+224]
	102 Compare W9, 0
	103 JumpIfNotEqual {107}
	104 Move X0, X8
	105 Call 0x1C17DFC
	106 Move X8, [X23]
	107 Move X8, [X8+184]
	108 Move X0, [X8]
	109 Compare X0, 0
	110 JumpIfEqual {217}
	111 Move X8, 0x22C0000
	112 Move X2, [X31+8]
	113 Move X1, [X19]
	114 Move X8, [X8+1808]
	115 Move X3, [X8]
	116 Call Dictionary`2<Object, Object>.Add, X0, X1, X2
	117 Move X22, X31
	118 Move W21, 6
	119 Move W8, [X31+4]
	120 Compare W8, 0
	121 JumpIfEqual {125}
	122 Move X0, X20
	123 Move X1, X31
	124 Call Monitor.Exit, X0
	125 Compare X22, 0
	126 JumpIfNotEqual {183}
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Compare W21, 0
	129 JumpIfNotEqual {174}
	130 Move X20, [X31+8]
	131 Compare X20, 0
	132 JumpIfEqual {141}
	133 Move X8, 0x22C8000
	134 Move X8, [X8+1464]
	135 Move X9, [X20]
	136 Move X8, [X8]
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X8, 0x22C0000
	139 Move X8, [X8+1728]
	140 Move X8, [X8]
	141 Move X8, 0x22C0000
	142 Move X8, [X8+1728]
	143 Move X8, [X8]
	144 Move X0, X20
	145 Move X1, X31
	146 Call ExceptionDispatchInfo.Throw, X0
	147 Move X8, 0x22C0000
	148 Move X20, [X31+8]
	149 Move X8, [X8+1728]
	150 Move X8, [X8]
	151 Compare X20, 0
	152 JumpIfEqual {161}
	153 Move X9, [X20]
	154 Move W10, [X8+304]
	155 Move W11, [X9+304]
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move X9, [X9+200]
	158 Add X9, X9, X10
	159 NotImplemented "Instruction LDUR not yet implemented."
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move W9, [X8+224]
	162 Compare W9, 0
	163 JumpIfNotEqual {166}
	164 Move X0, X8
	165 Call 0x1C17DFC
	166 Move X0, X20
	167 Move X1, X31
	168 Move X2, X31
	169 Call Type.op_Equality, X0, X1
	170 Move TEMP, X0
	171 And TEMP, TEMP, 1
	172 Compare TEMP, 1
	173 JumpIfEqual {189}
	174 Move X0, X20
	175 Move X20, [X31+48]
	176 Move X19, [X31+56]
	177 Move X22, [X31+32]
	178 Move X21, [X31+40]
	179 Move X30, [X31+16]
	180 Move X23, [X31+24]
	181 Add X31, X31, 64
	182 Return X0
	183 Move X0, X22
	184 Call 0x1C17F18
	185 Call 0x1C17F20
	186 Move X0, X20
	187 Move X1, X8
	188 Call 0x1C181E0
	189 Move X0, 0x22C8000
	190 Move X19, [X19]
	191 Move X0, [X0+1488]
	192 Call 0x1C17D08
	193 Move X20, X0
	194 Move X0, 0x22C8000
	195 Move X0, [X0+1496]
	196 Call 0x1C17D08
	197 Move X2, X0
	198 Move X0, X20
	199 Move X1, X19
	200 Move X3, X31
	201 Call String.Concat, X0, X1, X2
	202 Move X19, X0
	203 Move X0, 0x22C0000
	204 Move X0, [X0+2000]
	205 Call 0x1C17D08
	206 Call 0x1C17F10
	207 Move X1, X19
	208 Move X2, X31
	209 Move X20, X0
	210 Call Exception..ctor, X0, X1
	211 Move X0, 0x22C8000
	212 Move X0, [X0+1472]
	213 Call 0x1C17D08
	214 Move X1, X0
	215 Move X0, X20
	216 Call 0x1C17DEC
	217 Call 0x1C17F20
	218 Move X22, X1
	219 Move X21, X0
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X0, X21
	222 Call 0x3EB2AD0
	223 Move X21, X0
	224 Move X0, 0x22C0000
	225 Move X0, [X0+2000]
	226 Call 0x1C17D08
	227 Move X8, [X21]
	228 Move X1, [X8]
	229 Call 0x1C18270
	230 Move TEMP, X0
	231 And TEMP, TEMP, 1
	232 Compare TEMP, 1
	233 JumpIfNotEqual {239}
	234 Move X21, [X21]
	235 Call 0x3EB2AE0
	236 Move X0, X21
	237 Move X1, X31
	238 Call ExceptionDispatchInfo.Capture, X0
	239 Move W0, 8
	240 Call 0x3EB2AF0
	241 Move X8, [X21]
	242 Move [X0], X8
	243 Move X1, 0x2081000
	244 Add X1, X1, 3672
	245 Move X2, X31
	246 Call 0x3EB2B00
	247 Move X22, X1
	248 Move X21, X0
	249 Call 0x3EB2AE0
	250 Move X22, X1
	251 Move X21, X0
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Move X0, X21
	254 Call 0x3EB2AD0
	255 Move X22, [X0]
	256 Call 0x3EB2AE0
	257 Move W21, W31
	258 Move X22, X31
	259 Move X21, X0
	260 Move W8, [X31+4]
	261 Compare W8, 0
	262 JumpIfEqual {266}
	263 Move X0, X20
	264 Move X1, X31
	265 Call Monitor.Exit, X0
	266 Compare X22, 0
	267 JumpIfNotEqual {270}
	268 Move X0, X21
	269 Call 0x1D2D690
	270 Move X0, X22
	271 Call 0x1C17F18
	272 Call 0x1991590

Method: Fusion.SerializableType AsShort()

Disassembly:
	0x01E34EB8 LDR V8, [X31], #0x20
	0x01E34EBC RET
	0x01E34EC0 STR D8, [X31 - 0x20]!
	0x01E34EC4 STR X30, [X31 + 0x8]
	0x01E34EC8 STP X20, X19, [X31 + 0x10]
	0x01E34ECC ADRP X19, 0x25A4000
	0x01E34ED0 ADRP X20, 0x22BF000
	0x01E34ED4 LDRB W8, [X19 + 0xEC4]
	0x01E34ED8 LDR X20, [X20 + 0x5A8]
	0x01E34EDC MOV V8.16B, V0.16B
	0x01E34EE0 TBNZ X8, 0x0, 0x1E34EF8
	0x01E34EE4 ADRP X0, 0x22BF000
	0x01E34EE8 LDR X0, [X0 + 0x5A8]
	0x01E34EEC BL 0x1C16CF4
	0x01E34EF0 MOVZ W8, 0x1
	0x01E34EF4 STRB W8, [X19 + 0xEC4]
	0x01E34EF8 LDR X0, [X20]
	0x01E34EFC LDR W8, [X0 + 0xE0]
	0x01E34F00 CBNZ W8, 0x1E34F08
	0x01E34F04 BL 0x1C16DFC
	0x01E34F08 MOVZ X8, 0x7FF00000
	0x01E34F0C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25A5000
	006 Move X20, 0x22C8000
	007 Move W8, [X21+3764]
	008 Move X20, [X20+1504]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22C8000
	015 Move X0, [X0+1504]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3764], W8
	019 Move X0, [X20]
	020 Move X19, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]

Method: Fusion.SerializableType op_Implicit(System.Type type)

Disassembly:
	0x01E34F9C AND X8, X8, 0x5555555555555555
	0x01E34FA0 SUB X8, X0, X8
	0x01E34FA4 AND X9, X8, 0x3333333333333333
	0x01E34FA8 UBFM X8, X8, 0x2, 0x3F
	0x01E34FAC AND X8, X8, 0x3333333333333333
	0x01E34FB0 ADD X8, X8, X9
	0x01E34FB4 ADD X8, X8, X8, 0x4, LSR
	0x01E34FB8 AND X8, X8, 0xF0F0F0F0F0F0F0F

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X0
	003 Add X0, X31, 8
	004 Move [X31+8], X31
	005 Call SerializableType..ctor, X0, X1
	006 Move X0, [X31+8]
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Type op_Implicit(Fusion.SerializableType serializableType)

Disassembly:
	0x01E34FBC ORR X9, X31, 0x101010101010101
	0x01E34FC0 MUL X8, X8, X9
	0x01E34FC4 UBFM X0, X8, 0x38, 0x3F
	0x01E34FC8 RET
	0x01E34FCC ADRP X8, 0xFFFFFFFFFECB9000
	0x01E34FD0 LDR V1, [X8 + 0xB58]
	0x01E34FD4 FDIV D0, D0, D1
	0x01E34FD8 RET
	0x01E34FDC ADRP X8, 0xFFFFFFFFFECB9000
	0x01E34FE0 LDR V1, [X8 + 0xB58]
	0x01E34FE4 MOVZ X8, 0x7FF00000
	0x01E34FE8 FMOV D2, X8
	0x01E34FEC MOVZ X9, 0x80000000
	0x01E34FF0 FMUL D0, D0, D1
	0x01E34FF4 FCVTZS X8, D0
	0x01E34FF8 FCMP D0, D2
	0x01E34FFC CSEL X0, X9, X8, EQ
	0x01E35000 RET
	0x01E35004 ADRP X8, 0xFFFFFFFFFECB8000
	0x01E35008 LDR V1, [X8 + 0x598]
	0x01E3500C MOVZ X8, 0x7FF00000
	0x01E35010 FMOV D2, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x25A5000
	005 Move [X31+8], X0
	006 Move X20, 0x22C8000
	007 Move W8, [X19+3765]
	008 Move X20, [X20+1504]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22C8000
	014 Move X0, [X0+1504]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3765], W8
	018 Move X0, [X20]
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Add X0, X31, 8
	024 Call SerializableType.get_Value, X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Boolean Equals(Fusion.SerializableType other)

Disassembly:
	0x01E35014 MOVZ X9, 0x80000000
	0x01E35018 FMUL D0, D0, D1
	0x01E3501C FCVTZS X8, D0

ISIL:
	001 Move X0, [X0]
	002 Move X2, X31
	003 Call String.op_Equality, X0, X1
	004 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x01E35020 FCMP D0, D2
	0x01E35024 CSEL X0, X9, X8, EQ
	0x01E35028 RET
	0x01E3502C ADRP X8, 0xFFFFFFFFFECB8000
	0x01E35030 LDR V0, [X8 + 0x598]
	0x01E35034 SCVTF D1, X0
	0x01E35038 FDIV D0, D1, D0
	0x01E3503C RET
	0x01E35040 MOVZ W8, 0x3E8
	0x01E35044 MUL X0, X0, X8
	0x01E35048 RET
	0x01E3504C STR D10, [X31 - 0x30]!
	0x01E35050 STP D9, D8, [X31 + 0x8]
	0x01E35054 STR X30, [X31 + 0x18]
	0x01E35058 STP X20, X19, [X31 + 0x20]
	0x01E3505C ADRP X19, 0x25A3000
	0x01E35060 ADRP X20, 0x22BE000
	0x01E35064 LDRB W8, [X19 + 0xEC5]
	0x01E35068 LDR X20, [X20 + 0x5A8]
	0x01E3506C MOV V10.16B, V2.16B
	0x01E35070 MOV V8.16B, V1.16B
	0x01E35074 MOV V9.16B, V0.16B
	0x01E35078 TBNZ X8, 0x0, 0x1E35090
	0x01E3507C ADRP X0, 0x22BE000
	0x01E35080 LDR X0, [X0 + 0x5A8]
	0x01E35084 BL 0x1C16CF4
	0x01E35088 MOVZ W8, 0x1
	0x01E3508C STRB W8, [X19 + 0xEC5]
	0x01E35090 LDR X0, [X20]
	0x01E35094 LDR W8, [X0 + 0xE0]
	0x01E35098 CBNZ W8, 0x1E350A0
	0x01E3509C BL 0x1C16DFC
	0x01E350A0 ADRP X8, 0xFFFFFFFFFECB8000
	0x01E350A4 LDR V0, [X8 + 0x4B8]
	0x01E350A8 FMUL D0, D10, D0
	0x01E350AC BL 0x3EB1BF0
	0x01E350B0 FMOV D1, 1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25A4000
	006 Move W8, [X21+3766]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22C7000
	014 Move X0, [X0+1504]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3766], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X21, 0x22C7000
	021 Move X21, [X21+1504]
	022 Move X9, [X20]
	023 Move X8, [X21]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move X8, X0
	034 Move X0, [X21]
	035 Move X20, [X8]
	036 Move W9, [X0+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, [X19]
	041 Move X1, X20
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X2, X31
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Call String.op_Equality, X0, X1
	048 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x01E350B4 FMOV D2, 0.5
	0x01E350B8 FSUB D0, D1, D0
	0x01E350BC FMUL D0, D0, D2
	0x01E350C0 FSUB D1, D1, D0
	0x01E350C4 FMUL D1, D1, D9
	0x01E350C8 FMUL D0, D0, D8

ISIL:
	001 Move X0, [X0]
	002 Compare X0, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Move X2, [X8+344]
	006 Move X1, [X8+352]
	007 CallNoReturn X2
	008 Return X0

Method: System.String GetShortAssemblyQualifiedName(System.Type type)

Disassembly:
	0x01E350CC LDP X20, X19, [X31 + 0x20]
	0x01E350D0 LDR X30, [X31 + 0x18]
	0x01E350D4 LDP D9, D8, [X31 + 0x8]
	0x01E350D8 FADD D0, D0, D1
	0x01E350DC LDR V10, [X31], #0x30
	0x01E350E0 RET
	0x01E350E4 TBNZ X0, 0x1F, 0x1E350F4
	0x01E350E8 CMP W0, 0x100
	0x01E350EC CSINV W0, W0, W31, LT
	0x01E350F0 RET
	0x01E350F4 MOV W0, W31
	0x01E350F8 RET
	0x01E350FC SBFM W8, W0, 0x1F, 0x1F
	0x01E35100 EOR W0, W8, W0, 0x1
	0x01E35104 RET
	0x01E35108 AND W8, W0, 0x1
	0x01E3510C SUB W8, W31, W8
	0x01E35110 EOR W0, W8, W0, 0x1
	0x01E35114 RET
	0x01E35118 SBFM X8, X0, 0x3F, 0x3F
	0x01E3511C EOR X0, X8, X0, 0x1
	0x01E35120 RET
	0x01E35124 AND X8, X0, 0x1
	0x01E35128 SUB X8, X31, X8
	0x01E3512C EOR X0, X8, X0, 0x1
	0x01E35130 RET
	0x01E35134 CMP W0, W1
	0x01E35138 B.GE 0x1E35144
	0x01E3513C MOV W0, W1
	0x01E35140 RET
	0x01E35144 CMP W0, W2
	0x01E35148 CSEL W0, W2, W0, GT
	0x01E3514C RET
	0x01E35150 CMP W0, W1
	0x01E35154 B.CS 0x1E35160
	0x01E35158 MOV W0, W1
	0x01E3515C RET
	0x01E35160 CMP W0, W2
	0x01E35164 CSEL W0, W2, W0, HI
	0x01E35168 RET
	0x01E3516C FCMP D0, D1
	0x01E35170 B.MI 0x1E35184
	0x01E35174 FCMP D0, D2
	0x01E35178 MOV V1.16B, V2.16B
	0x01E3517C B.GT 0x1E35184
	0x01E35180 MOV V1.16B, V0.16B
	0x01E35184 MOV V0.16B, V1.16B
	0x01E35188 RET
	0x01E3518C FCMP S0, S1
	0x01E35190 B.MI 0x1E351A4
	0x01E35194 FCMP S0, S2
	0x01E35198 MOV V1.16B, V2.16B
	0x01E3519C B.GT 0x1E351A4
	0x01E351A0 MOV V1.16B, V0.16B
	0x01E351A4 MOV V0.16B, V1.16B
	0x01E351A8 RET
	0x01E351AC FCMP D0, 0x0
	0x01E351B0 FMOV D1, X31
	0x01E351B4 B.MI 0x1E351C8
	0x01E351B8 FMOV D1, 1
	0x01E351BC FCMP D0, D1
	0x01E351C0 B.GT 0x1E351C8
	0x01E351C4 MOV V1.16B, V0.16B
	0x01E351C8 MOV V0.16B, V1.16B
	0x01E351CC RET
	0x01E351D0 FCMP S0, 0x0
	0x01E351D4 FMOV S1, W31
	0x01E351D8 B.MI 0x1E351EC
	0x01E351DC FMOV S1, 1
	0x01E351E0 FCMP S0, S1
	0x01E351E4 B.GT 0x1E351EC
	0x01E351E8 MOV V1.16B, V0.16B
	0x01E351EC MOV V0.16B, V1.16B
	0x01E351F0 RET
	0x01E351F4 STR D10, [X31 - 0x30]!
	0x01E351F8 STP D9, D8, [X31 + 0x8]
	0x01E351FC STR X30, [X31 + 0x18]
	0x01E35200 STP X20, X19, [X31 + 0x20]
	0x01E35204 ADRP X19, 0x25A3000
	0x01E35208 ADRP X20, 0x22C5000
	0x01E3520C LDRB W8, [X19 + 0xEC6]
	0x01E35210 LDR X20, [X20 + 0xC68]
	0x01E35214 MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25A4000
	006 Move X21, 0x22BF000
	007 Move W8, [X20+3767]
	008 Move X21, [X21+1728]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22C7000
	015 Move X0, [X0+1504]
	016 Call 0x1C17CF4
	017 Move X0, 0x22BF000
	018 Move X0, [X0+1728]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3767], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Move X2, X31
	030 Call Type.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {59}
	035 Compare X19, 0
	036 JumpIfEqual {77}
	037 Move X8, [X19]
	038 Move X0, X19
	039 Move X9, [X8+728]
	040 Move X1, [X8+736]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Compare X0, 0
	043 JumpIfEqual {78}
	044 Move X8, 0x22C7000
	045 Move X8, [X8+1504]
	046 Move X20, X0
	047 Move X0, [X8]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X20
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Call SerializableType.GetShortAssemblyQualifiedName, X0
	058 Return X0
	059 Move X0, 0x22C4000
	060 Move X0, [X0+1320]
	061 Call 0x1C17D08
	062 Call 0x1C17F10
	063 Move X19, X0
	064 Move X0, 0x22C7000
	065 Move X0, [X0+1512]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Move X2, X31
	070 Call ArgumentNullException..ctor, X0, X1
	071 Move X0, 0x22C7000
	072 Move X0, [X0+1520]
	073 Call 0x1C17D08
	074 Move X1, X0
	075 Move X0, X19
	076 Call 0x1C17DEC
	077 Call 0x1C17F20
	078 Move X0, 0x22C7000
	079 Move X0, [X0+1528]
	080 Call 0x1C17D08
	081 Move X1, X19
	082 Move X2, X31
	083 Call String.Format, X0, X1
	084 Move X19, X0
	085 Move X0, 0x22BF000
	086 Move X0, [X0+1456]
	087 Call 0x1C17D08
	088 Call 0x1C17F10
	089 Move X1, X19
	090 Move X2, X31
	091 Move X20, X0
	092 Call InvalidOperationException..ctor, X0, X1
	093 Move X0, 0x22C7000
	094 Move X0, [X0+1520]
	095 Call 0x1C17D08
	096 Move X1, X0
	097 Move X0, X20
	098 Call 0x1C17DEC

Method: System.String GetShortAssemblyQualifiedName(System.String assemblyQualifiedName)

Disassembly:
	0x01E34F10 LDR X30, [X31 + 0x8]
	0x01E34F14 FRINTP D0, D8
	0x01E34F18 FMOV D1, X8
	0x01E34F1C FCVTPS W9, D8
	0x01E34F20 FCMP D0, D1
	0x01E34F24 MOVZ W8, 0x80000000
	0x01E34F28 CSEL W0, W8, W9, EQ
	0x01E34F2C LDR V8, [X31], #0x20
	0x01E34F30 RET
	0x01E34F34 MOV W8, W31
	0x01E34F38 UBFM W0, W0, 0x1, 0x1F
	0x01E34F3C ADD W8, W8, 0x1
	0x01E34F40 CBNZ W0, 0x1E34F38
	0x01E34F44 MOV W0, W8
	0x01E34F48 RET
	0x01E34F4C MOV W8, W0
	0x01E34F50 MOVZ W0, 0x20
	0x01E34F54 MOVZ W9, 0x1
	0x01E34F58 SUB W10, W0, 0x1
	0x01E34F5C LSLV W10, W9, W10
	0x01E34F60 SXTW X10, W10
	0x01E34F64 BICS X31, X10, X8, 0x0
	0x01E34F68 B.EQ 0x1E34F74
	0x01E34F6C SUBS W0, W0, 0x1
	0x01E34F70 B.NE 0x1E34F58
	0x01E34F74 RET
	0x01E34F78 SUB W8, W0, 0x1
	0x01E34F7C MOV W8, W8
	0x01E34F80 MOV W8, W8
	0x01E34F84 MOV W8, W8
	0x01E34F88 MOV W8, W8
	0x01E34F8C MOV W8, W8
	0x01E34F90 ADD W0, W8, 0x1
	0x01E34F94 RET
	0x01E34F98 UBFM X8, X0, 0x1, 0x3F

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x25A5000
	006 Move X20, 0x22C8000
	007 Move W8, [X21+3768]
	008 Move X20, [X20+1504]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x22C8000
	015 Move X0, [X0+1504]
	016 Call 0x1C17CF4
	017 Move X0, 0x22C2000
	018 Move X0, [X0+632]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3768], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, [X8]
	030 Compare X0, 0
	031 JumpIfEqual {45}
	032 Move X8, 0x22C2000
	033 Move X8, [X8+632]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X3, X31
	038 Move X8, [X8]
	039 Move X8, [X8+184]
	040 Move X2, [X8]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call Regex.Replace, X0, X1, X2
	044 Return X0
	045 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x01E35218 MOV V9.16B, V1.16B
	0x01E3521C MOV V8.16B, V0.16B
	0x01E35220 TBNZ X8, 0x0, 0x1E35238
	0x01E35224 ADRP X0, 0x22C5000
	0x01E35228 LDR X0, [X0 + 0xC68]
	0x01E3522C BL 0x1C16CF4
	0x01E35230 MOVZ W8, 0x1
	0x01E35234 STRB W8, [X19 + 0xEC6]
	0x01E35238 LDR X0, [X20]
	0x01E3523C LDR W8, [X0 + 0xE0]
	0x01E35240 CBNZ W8, 0x1E35248
	0x01E35244 BL 0x1C16DFC
	0x01E35248 FCMP S10, 0x0
	0x01E3524C FMOV S0, W31
	0x01E35250 B.MI 0x1E35264
	0x01E35254 FMOV S0, 1
	0x01E35258 FCMP S10, S0
	0x01E3525C B.GT 0x1E35264
	0x01E35260 MOV V0.16B, V10.16B
	0x01E35264 FSUB S1, S9, S8
	0x01E35268 FMUL S0, S1, S0
	0x01E3526C FADD S0, S0, S8
	0x01E35270 LDP X20, X19, [X31 + 0x20]
	0x01E35274 LDR X30, [X31 + 0x18]
	0x01E35278 LDP D9, D8, [X31 + 0x8]
	0x01E3527C LDR V10, [X31], #0x30
	0x01E35280 RET
	0x01E35284 STR D10, [X31 - 0x30]!
	0x01E35288 STP D9, D8, [X31 + 0x8]
	0x01E3528C STR X30, [X31 + 0x18]
	0x01E35290 STP X20, X19, [X31 + 0x20]
	0x01E35294 ADRP X19, 0x25A3000
	0x01E35298 ADRP X20, 0x22C5000
	0x01E3529C LDRB W8, [X19 + 0xEC7]
	0x01E352A0 LDR X20, [X20 + 0xC68]
	0x01E352A4 MOV V10.16B, V2.16B
	0x01E352A8 MOV V9.16B, V1.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25A4000
	007 Move X22, 0x22C7000
	008 Move X19, 0x22C7000
	009 Move X20, 0x22C7000
	010 Move W8, [X21+3769]
	011 Move X22, [X22+1536]
	012 Move X19, [X19+1544]
	013 Move X20, [X20+1504]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x22C7000
	019 Move X0, [X0+1536]
	020 Call 0x1C17CF4
	021 Move X0, 0x22C7000
	022 Move X0, [X0+1504]
	023 Call 0x1C17CF4
	024 Move X0, 0x22C7000
	025 Move X0, [X0+1544]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3769], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move W2, 8
	033 Move X3, X31
	034 Move X19, X0
	035 Call Regex..ctor, X0, X1, X2
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Return 

