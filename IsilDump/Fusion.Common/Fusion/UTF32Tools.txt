Type: Fusion.UTF32Tools

Method: Fusion.UTF32Tools/ConversionResult Convert(System.String str, System.UInt32* dst, System.Int32 dstCapacity)

Disassembly:
	0x01E3923C TBNZ X2, 0x1F, 0x1E392AC
	0x01E39240 CBZ W2, 0x1E39260
	0x01E39244 MOV X20, X0
	0x01E39248 MOV W21, W2
	0x01E3924C LDR W0, [X20], #0x4
	0x01E39250 BL 0x1E392F4
	0x01E39254 SUBS X21, X21, 0x1
	0x01E39258 STR W0, [X19], #0x4
	0x01E3925C B.NE 0x1E3924C
	0x01E39260 LDP X20, X19, [X31 + 0x10]
	0x01E39264 LDP X30, X21, [X31], #0x20
	0x01E39268 RET
	0x01E3926C ADRP X0, 0x22BF000
	0x01E39270 LDR X0, [X0 + 0x528]
	0x01E39274 BL 0x1C16D08
	0x01E39278 BL 0x1C16F10
	0x01E3927C MOV X19, X0
	0x01E39280 ADRP X0, 0x22C2000
	0x01E39284 LDR X0, [X0 + 0x798]
	0x01E39288 B 0x1E392C8
	0x01E3928C ADRP X0, 0x22BF000
	0x01E39290 LDR X0, [X0 + 0x528]
	0x01E39294 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move W19, W2
	008 Move X21, X0
	009 Call String.IsNullOrEmpty, X0
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {20}
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X0, X31
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 Return X0
	020 Compare X21, 0
	021 JumpIfEqual {32}
	022 Move X0, X31
	023 Call RuntimeHelpers.get_OffsetToStringData
	024 Move W1, [X21+16]
	025 Move X2, X20
	026 Move W3, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Add X0, X21, W0
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call 0x1C17F20

Method: Fusion.UTF32Tools/ConversionResult Convert(System.Char* str, System.Int32 strLength, System.UInt32* dst, System.Int32 dstCapacity)

Disassembly:
	0x01E39298 BL 0x1C16F10
	0x01E3929C MOV X19, X0
	0x01E392A0 ADRP X0, 0x22C2000
	0x01E392A4 LDR X0, [X0 + 0x7A0]
	0x01E392A8 B 0x1E392C8
	0x01E392AC ADRP X0, 0x22BF000
	0x01E392B0 LDR X0, [X0 + 0x528]
	0x01E392B4 BL 0x1C16D08
	0x01E392B8 BL 0x1C16F10
	0x01E392BC MOV X19, X0
	0x01E392C0 ADRP X0, 0x22C2000
	0x01E392C4 LDR X0, [X0 + 0x768]
	0x01E392C8 BL 0x1C16D08
	0x01E392CC MOV X1, X0
	0x01E392D0 MOV X0, X19
	0x01E392D4 MOV X2, X31
	0x01E392D8 BL 0x330E100
	0x01E392DC ADRP X0, 0x22C2000
	0x01E392E0 LDR X0, [X0 + 0x7B0]
	0x01E392E4 BL 0x1C16D08
	0x01E392E8 MOV X1, X0
	0x01E392EC MOV X0, X19
	0x01E392F0 BL 0x1C16DEC
	0x01E392F4 STP X29, X30, [X31 - 0x20]!
	0x01E392F8 STP X20, X19, [X31 + 0x10]
	0x01E392FC ADD X29, X31, 0x0
	0x01E39300 ADRP X20, 0x259F000
	0x01E39304 LDRB W8, [X20 + 0xEF7]
	0x01E39308 MOV W19, W0
	0x01E3930C TBNZ X8, 0x0, 0x1E39324
	0x01E39310 ADRP X0, 0x22BC000
	0x01E39314 LDR X0, [X0 + 0x170]
	0x01E39318 BL 0x1C16CF4
	0x01E3931C MOVZ W8, 0x1
	0x01E39320 STRB W8, [X20 + 0xEF7]
	0x01E39324 MOV W0, W19
	0x01E39328 BL 0x1E389EC
	0x01E3932C MOV X19, X0
	0x01E39330 UBFM X8, X0, 0x10, 0x1F
	0x01E39334 CBZ W8, 0x1E393B0
	0x01E39338 ADD X9, X31, 0x0
	0x01E3933C SUB X1, X9, 0x10
	0x01E39340 UBFM X8, X19, 0x10, 0x3F
	0x01E39344 ADD X31, X1, 0x0
	0x01E39348 STUR W31, [X9 - 0x10]
	0x01E3934C STURH W19, [X9 - 0x10]
	0x01E39350 ORR X9, X1, 0x3
	0x01E39354 MOVZ W3, 0x2
	0x01E39358 MOV X0, X31
	0x01E3935C MOV W2, W31
	0x01E39360 MOV X4, X31
	0x01E39364 STRH W8, [X9]
	0x01E39368 BL 0x322EAD4
	0x01E3936C CBZ X0, 0x1E393E8
	0x01E39370 MOV X1, X31
	0x01E39374 BL 0x322B860
	0x01E39378 CBZ X0, 0x1E393E8
	0x01E3937C MOV W1, W31
	0x01E39380 MOV X2, X31
	0x01E39384 MOV X19, X0
	0x01E39388 BL 0x3222A1C
	0x01E3938C MOV W20, W0
	0x01E39390 MOVZ W1, 0x1
	0x01E39394 MOV X0, X19
	0x01E39398 MOV X2, X31
	0x01E3939C BL 0x3222A1C
	0x01E393A0 MOV W1, W0
	0x01E393A4 MOV W0, W20
	0x01E393A8 BL 0x1E38A78
	0x01E393AC B 0x1E393D8
	0x01E393B0 ADRP X8, 0x22BC000
	0x01E393B4 LDR X8, [X8 + 0x170]
	0x01E393B8 LDR X0, [X8]
	0x01E393BC LDR W8, [X0 + 0xE0]
	0x01E393C0 CBNZ W8, 0x1E393C8
	0x01E393C4 BL 0x1C16DFC
	0x01E393C8 MOV W0, W19
	0x01E393CC MOV X1, X31
	0x01E393D0 BL 0x331AD34
	0x01E393D4 AND W0, W0, 0xFFFF
	0x01E393D8 ADD X31, X29, 0x0
	0x01E393DC LDP X20, X19, [X31 + 0x10]
	0x01E393E0 LDP X29, X30, [X31], #0x20
	0x01E393E4 RET
	0x01E393E8 BL 0x1C16F20
	0x01E393EC MOVZ W8, 0x3FF0000
	0x01E393F0 ADD W8, W0, W8
	0x01E393F4 MOVN W9, 0x27FF
	0x01E393F8 ADD W0, W9, W8, 0xA, LSR
	0x01E393FC RET
	0x01E39400 STP X30, X19, [X31 - 0x10]!
	0x01E39404 MOV X19, X0
	0x01E39408 MOV X0, X31
	0x01E3940C BL 0x3242E20
	0x01E39410 CBZ X0, 0x1E3943C
	0x01E39414 LDR X8, [X0]
	0x01E39418 MOV X1, X19
	0x01E3941C LDP X9, X2, [X8 + 0x1F8]
	0x01E39420 BLR X9
	0x01E39424 ADD W8, W0, 0x3

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X23, 0x25A0000
	015 Move W8, [X23+3826]
	016 Move W22, W3
	017 Move X19, X2
	018 Move W20, W1
	019 Move X21, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x22BD000
	025 Move X0, [X0+368]
	026 Call 0x1C17CF4
	027 Move X0, 0x22C3000
	028 Move X0, [X0+1816]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+3826], W8
	032 Move X24, X31
	033 Subtract W8, W20, 1
	034 Move W25, W31
	035 Move [X31+8], W8
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X23, 0x22BD000
	038 Move X23, [X23+368]
	039 Move X24, X31
	040 Move W25, W31
	041 Move W27, W22
	042 Move TEMP, 0xD7FF
	043 Not TEMP
	044 Move W9, TEMP
	045 NotImplemented "Instruction LDRH not yet implemented."
	046 Add W29, W22, W9
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, [X23]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move W0, W22
	054 Move X1, X31
	055 Call Char.IsHighSurrogate, X0
	056 Move W8, [X31+8]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {92}
	062 Move X0, [X23]
	063 Add W28, W25, 1
	064 Move X26, X23
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move W0, W23
	071 Move X1, X31
	072 Call Char.IsLowSurrogate, X0
	073 Move X23, X26
	074 Move TEMP, 0xD7FF
	075 Not TEMP
	076 Move W9, TEMP
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {92}
	081 Move X8, W28
	082 NotImplemented "Instruction LDRH not yet implemented."
	083 Move W10, 0x2400
	084 Move W25, W28
	085 Add W8, W8, W29
	086 Add W22, W8, W10
	087 Add W25, W25, 1
	088 Move [X19+4], W22
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Add X24, X24, 1
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X0, [X23]
	093 Add X1, X31, 12
	094 NotImplemented "Instruction STRH not yet implemented."
	095 Call 0x1C17E04
	096 Move X8, 0x22C3000
	097 Move X8, [X8+1816]
	098 Move X1, X0
	099 Move X2, X31
	100 Move X8, [X8]
	101 Move X0, X8
	102 Call String.Format, X0, X1
	103 Move X1, X31
	104 Call Assert.AlwaysFail, X0
	105 Move W0, W25
	106 NotImplemented "Instruction BFM not yet implemented."
	107 Move X20, [X31+96]
	108 Move X19, [X31+104]
	109 Move X22, [X31+80]
	110 Move X21, [X31+88]
	111 Move X24, [X31+64]
	112 Move X23, [X31+72]
	113 Move X26, [X31+48]
	114 Move X25, [X31+56]
	115 Move X28, [X31+32]
	116 Move X27, [X31+40]
	117 Move X29, [X31+16]
	118 Move X30, [X31+24]
	119 Add X31, X31, 112
	120 Return X0

Method: System.Int32 CompareOrdinal(System.UInt32* strA, System.Int32 aLength, System.UInt32* strB, System.Int32 bLength, System.Boolean ignoreCase)

Disassembly:
	0x01E39430 SBFM W0, W8, 0x2, 0x1F
	0x01E39434 LDP X30, X19, [X31], #0x10
	0x01E39438 RET
	0x01E3943C BL 0x1C16F20
	0x01E39440 MOVN W8, 0x23FF
	0x01E39444 BFM W8, W0, 0x0, 0x9
	0x01E39448 MOV W0, W8
	0x01E3944C RET
	0x01E39450 SUB W8, W0, 0x110000
	0x01E39454 MOVZ W9, 0xD800
	0x01E39458 MOVZ W10, 0xFFEF0000
	0x01E3945C EOR W8, W8, W9, 0x0
	0x01E39460 ORR W9, W10, 0x7FF
	0x01E39464 CMP W8, W9
	0x01E39468 CSET W0, HI
	0x01E3946C RET
	0x01E39470 LDR W8, [X1]
	0x01E39474 LDR W9, [X0]
	0x01E39478 STR W8, [X0]
	0x01E3947C STR W9, [X1]
	0x01E39480 RET
	0x01E39484 STRH W31, [X0 + 0x8]
	0x01E39488 STRH W31, [X0 + 0x18]
	0x01E3948C STR X1, [X0 + 0x10]
	0x01E39490 STP W31, W2, [X0]
	0x01E39494 RET
	0x01E39498 LDRH W0, [X0 + 0x18]
	0x01E3949C RET
	0x01E394A0 STRH W1, [X0 + 0x18]
	0x01E394A4 RET
	0x01E394A8 SUB X31, X31, 0x30
	0x01E394AC STP X30, X21, [X31 + 0x10]
	0x01E394B0 STP X20, X19, [X31 + 0x20]
	0x01E394B4 ADRP X21, 0x259F000
	0x01E394B8 ADRP X20, 0x22BC000
	0x01E394BC LDRB W8, [X21 + 0xEFA]
	0x01E394C0 LDR X20, [X20 + 0x170]
	0x01E394C4 MOV X19, X0
	0x01E394C8 TBNZ X8, 0x0, 0x1E394E0
	0x01E394CC ADRP X0, 0x22BC000
	0x01E394D0 LDR X0, [X0 + 0x170]
	0x01E394D4 BL 0x1C16CF4
	0x01E394D8 MOVZ W8, 0x1
	0x01E394DC STRB W8, [X21 + 0xEFA]
	0x01E394E0 LDRH W8, [X19 + 0x18]
	0x01E394E4 LDR X0, [X20]
	0x01E394E8 ADD X1, X31, 0xC
	0x01E394EC STRH W8, [X31 + 0xC]
	0x01E394F0 BL 0x1C16E04
	0x01E394F4 LDP X20, X19, [X31 + 0x20]
	0x01E394F8 LDP X30, X21, [X31 + 0x10]
	0x01E394FC ADD X31, X31, 0x30
	0x01E39500 RET
	0x01E39504 RET
	0x01E39508 STP X30, X19, [X31 - 0x10]!
	0x01E3950C MOV X19, X0
	0x01E39510 LDRH W0, [X0 + 0x8]
	0x01E39514 CBZ W0, 0x1E39520
	0x01E39518 MOV W8, W31
	0x01E3951C B 0x1E39548
	0x01E39520 LDP W8, W9, [X19]
	0x01E39524 SXTW X8, W8
	0x01E39528 CMP W8, W9
	0x01E3952C B.GE 0x1E39558
	0x01E39530 LDR X9, [X19 + 0x10]
	0x01E39534 ADD W10, W8, 0x1
	0x01E39538 STR W10, [X19]
	0x01E3953C LDR W0, [X9, X8, LSL #2]
	0x01E39540 BL 0x1E389EC
	0x01E39544 UBFM X8, X0, 0x10, 0x3F
	0x01E39548 STRH W0, [X19 + 0x18]
	0x01E3954C MOVZ W0, 0x1
	0x01E39550 STRH W8, [X19 + 0x8]
	0x01E39554 B 0x1E3955C
	0x01E39558 MOV W0, W31
	0x01E3955C LDP X30, X19, [X31], #0x10
	0x01E39560 RET
	0x01E39564 STR W31, [X0]
	0x01E39568 RET
	0x01E3956C STR X30, [X31 - 0x30]!
	0x01E39570 STP X22, X21, [X31 + 0x10]
	0x01E39574 STP X20, X19, [X31 + 0x20]
	0x01E39578 ADRP X21, 0x259F000
	0x01E3957C ADRP X19, 0x22C2000
	0x01E39580 ADRP X20, 0x22BA000
	0x01E39584 LDRB W8, [X21 + 0xEFB]
	0x01E39588 LDR X19, [X19 + 0x7B8]
	0x01E3958C LDR X20, [X20 + 0x6C0]
	0x01E39590 TBNZ X8, 0x0, 0x1E395C0
	0x01E39594 ADRP X0, 0x22BA000
	0x01E39598 LDR X0, [X0 + 0x6C0]
	0x01E3959C BL 0x1C16CF4
	0x01E395A0 ADRP X0, 0x22C2000
	0x01E395A4 LDR X0, [X0 + 0x7C0]
	0x01E395A8 BL 0x1C16CF4
	0x01E395AC ADRP X0, 0x22C2000
	0x01E395B0 LDR X0, [X0 + 0x7B8]
	0x01E395B4 BL 0x1C16CF4
	0x01E395B8 MOVZ W8, 0x1
	0x01E395BC STRB W8, [X21 + 0xEFB]
	0x01E395C0 LDR X0, [X20]
	0x01E395C4 LDR X19, [X19]
	0x01E395C8 LDR W8, [X0 + 0xE0]
	0x01E395CC CBNZ W8, 0x1E395D4
	0x01E395D0 BL 0x1C16DFC
	0x01E395D4 MOV X0, X19
	0x01E395D8 MOV X1, X31
	0x01E395DC BL 0x338C698
	0x01E395E0 CBZ X0, 0x1E39658
	0x01E395E4 LDR X8, [X0]
	0x01E395E8 LDR X9, [X8 + 0x2F8]
	0x01E395EC LDR X1, [X8 + 0x300]
	0x01E395F0 BLR X9
	0x01E395F4 CBZ X0, 0x1E39658
	0x01E395F8 LDR X8, [X0]
	0x01E395FC LDR X9, [X8 + 0x258]
	0x01E39600 LDR X1, [X8 + 0x260]
	0x01E39604 BLR X9
	0x01E39608 CBZ X0, 0x1E39658
	0x01E3960C LDR X8, [X0 + 0x60]
	0x01E39610 CBZ X8, 0x1E39658
	0x01E39614 ADRP X9, 0x22C2000
	0x01E39618 LDR X9, [X9 + 0x7C0]
	0x01E3961C LDP W19, W20, [X8 + 0x10]
	0x01E39620 LDR W21, [X8 + 0x18]
	0x01E39624 LDR X0, [X9]
	0x01E39628 BL 0x1C16F10
	0x01E3962C MOV W1, W19
	0x01E39630 MOV W2, W20
	0x01E39634 MOV W3, W21
	0x01E39638 MOV X4, X31
	0x01E3963C MOV X22, X0
	0x01E39640 BL 0x339C170
	0x01E39644 MOV X0, X22
	0x01E39648 LDP X20, X19, [X31 + 0x20]
	0x01E3964C LDP X22, X21, [X31 + 0x10]
	0x01E39650 LDR X30, [X31], #0x30
	0x01E39654 RET
	0x01E39658 BL 0x1C16F20
	0x01E3965C STP X30, X21, [X31 - 0x20]!
	0x01E39660 STP X20, X19, [X31 + 0x10]
	0x01E39664 ADRP X20, 0x259F000

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X24, 0x25A0000
	015 Move W8, [X24+3827]
	016 Move W23, W4
	017 Move W19, W3
	018 Move X21, X2
	019 Move W20, W1
	020 Move X22, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0x22BB000
	026 Move X0, [X0+1448]
	027 Call 0x1C17CF4
	028 Move X0, 0x22C3000
	029 Move X0, [X0+1824]
	030 Call 0x1C17CF4
	031 Move X0, 0x22C3000
	032 Move X0, [X0+1816]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X24+3827], W8
	036 Compare X22, 0
	037 JumpIfNotEqual {39}
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Compare X21, 0
	040 JumpIfNotEqual {42}
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, 0x22BB000
	043 Move X8, [X8+1448]
	044 Move X0, [X8]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move W0, W20
	050 Move W1, W19
	051 Move X2, X31
	052 Call Math.Min, X0, X1
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move TEMP, X23
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 Invalid "Jump target not found in method."
	058 Move X28, 0x22C3000
	059 Move X29, 0x22C3000
	060 Move X28, [X28+1824]
	061 Move X29, [X29+1816]
	062 Move W25, 0xFFEF0000
	063 Move W26, W0
	064 Move W27, 0xD800
	065 Move W0, [X22]
	066 Add W9, W25, 2047
	067 Add W8, W0, W25
	068 Xor W8, W8, W27
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W8, [X21]
	071 Add W10, W8, W25
	072 Xor W10, W10, W27
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract W23, W0, W8
	075 Call UTF32Tools.ToLowerInvariant, X0
	076 Move W8, [X21]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move W24, W0
	079 Move W0, W8
	080 Call UTF32Tools.ToLowerInvariant, X0
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X8, [X28]
	083 Move [X31+12], W0
	084 Add X1, X31, 12
	085 Move X0, X8
	086 Move X0, [X28]
	087 Add X1, X31, 8
	088 Move [X31+8], W8
	089 Call 0x1C17E04
	090 Move X8, [X29]
	091 Move X1, X0
	092 Move X2, X31
	093 Move X0, X8
	094 Call String.Format, X0, X1
	095 Move X1, X31
	096 Call Assert.AlwaysFail, X0
	097 Add X22, X22, 4
	098 Subtract X26, X26, 1
	099 Add X21, X21, 4
	100 Move W8, W0
	101 Move W9, [X22]
	102 Move W10, [X21]
	103 Subtract W23, W9, W10
	104 Add X22, X22, 4
	105 Subtract X8, X8, 1
	106 Add X21, X21, 4
	107 Subtract W23, W20, W19
	108 Move W0, W23
	109 Move X20, [X31+96]
	110 Move X19, [X31+104]
	111 Move X22, [X31+80]
	112 Move X21, [X31+88]
	113 Move X24, [X31+64]
	114 Move X23, [X31+72]
	115 Move X26, [X31+48]
	116 Move X25, [X31+56]
	117 Move X28, [X31+32]
	118 Move X27, [X31+40]
	119 Move X29, [X31+16]
	120 Move X30, [X31+24]
	121 Add X31, X31, 112
	122 Return X0
	123 Move X0, 0x22C0000
	124 Move X0, [X0+1320]
	125 Call 0x1C17D08
	126 Call 0x1C17F10
	127 Move X19, X0
	128 Move X0, 0x22C3000
	129 Move X0, [X0+1832]
	130 Move X0, 0x22C0000
	131 Move X0, [X0+1320]
	132 Call 0x1C17D08
	133 Call 0x1C17F10
	134 Move X19, X0
	135 Move X0, 0x22C3000
	136 Move X0, [X0+1840]
	137 Call 0x1C17D08
	138 Move X1, X0
	139 Move X0, X19
	140 Move X2, X31
	141 Call ArgumentNullException..ctor, X0, X1
	142 Move X0, 0x22C3000
	143 Move X0, [X0+1848]
	144 Call 0x1C17D08
	145 Move X1, X0
	146 Move X0, X19
	147 Call 0x1C17DEC

Method: System.Int32 CompareOrdinal(System.String strA, System.UInt32* strB, System.Int32 bLength, System.Boolean ignoreCase = False)

Disassembly:
	0x01E39760 LDP X20, X19, [X31 + 0x10]
	0x01E39764 LDP X30, X21, [X31], #0x20
	0x01E39768 RET
	0x01E3976C BL 0x1C16F20
	0x01E39770 STP X30, X21, [X31 - 0x20]!
	0x01E39774 STP X20, X19, [X31 + 0x10]
	0x01E39778 ADRP X19, 0x259F000
	0x01E3977C ADRP X21, 0x22C2000
	0x01E39780 ADRP X20, 0x22C2000
	0x01E39784 LDRB W8, [X19 + 0xEFE]
	0x01E39788 LDR X21, [X21 + 0x7C0]
	0x01E3978C LDR X20, [X20 + 0x7C8]
	0x01E39790 TBNZ X8, 0x0, 0x1E397B4
	0x01E39794 ADRP X0, 0x22C2000
	0x01E39798 LDR X0, [X0 + 0x7C0]
	0x01E3979C BL 0x1C16CF4
	0x01E397A0 ADRP X0, 0x22C2000
	0x01E397A4 LDR X0, [X0 + 0x7C8]
	0x01E397A8 BL 0x1C16CF4
	0x01E397AC MOVZ W8, 0x1
	0x01E397B0 STRB W8, [X19 + 0xEFE]
	0x01E397B4 LDR X0, [X21]
	0x01E397B8 BL 0x1C16F10
	0x01E397BC MOV W1, W31
	0x01E397C0 MOV W2, W31
	0x01E397C4 MOV W3, W31
	0x01E397C8 MOV X4, X31
	0x01E397CC MOV X19, X0
	0x01E397D0 BL 0x339C170
	0x01E397D4 LDR X8, [X20]
	0x01E397D8 LDR X8, [X8 + 0xB8]
	0x01E397DC STR X19, [X8]
	0x01E397E0 LDP X20, X19, [X31 + 0x10]
	0x01E397E4 LDP X30, X21, [X31], #0x20
	0x01E397E8 RET
	0x01E397EC MOV X1, X31
	0x01E397F0 B 0x33A51F0
	0x01E397F4 MOV X1, X31
	0x01E397F8 B 0x33A51F0
	0x01E397FC STR X30, [X31 - 0x20]!
	0x01E39800 STP X20, X19, [X31 + 0x10]
	0x01E39804 MOV W19, W1
	0x01E39808 MOV X1, X31
	0x01E3980C MOV X20, X0
	0x01E39810 BL 0x33A51F0
	0x01E39814 STR W19, [X20 + 0x10]
	0x01E39818 LDP X20, X19, [X31 + 0x10]
	0x01E3981C LDR X30, [X31], #0x20
	0x01E39820 RET
	0x01E39824 STP X30, X19, [X31 - 0x10]!
	0x01E39828 MOV X1, X31
	0x01E3982C MOV X19, X0
	0x01E39830 BL 0x33A51F0
	0x01E39834 MOVZ W8, 0x2
	0x01E39838 STR W8, [X19 + 0x10]
	0x01E3983C LDP X30, X19, [X31], #0x10
	0x01E39840 RET
	0x01E39844 LDR W0, [X0 + 0x10]
	0x01E39848 RET
	0x01E3984C MOV X1, X31
	0x01E39850 B 0x33A51F0
	0x01E39854 MOV X1, X31
	0x01E39858 B 0x33A51F0
	0x01E3985C MOV X1, X31
	0x01E39860 B 0x33A51F0
	0x01E39864 STR X30, [X31 - 0x20]!
	0x01E39868 STP X20, X19, [X31 + 0x10]
	0x01E3986C ADRP X20, 0x259F000
	0x01E39870 ADRP X19, 0x22C2000
	0x01E39874 LDRB W8, [X20 + 0xEFF]
	0x01E39878 LDR X19, [X19 + 0x7D0]
	0x01E3987C TBNZ X8, 0x0, 0x1E39894
	0x01E39880 ADRP X0, 0x22C2000
	0x01E39884 LDR X0, [X0 + 0x7D0]
	0x01E39888 BL 0x1C16CF4
	0x01E3988C MOVZ W8, 0x1
	0x01E39890 STRB W8, [X20 + 0xEFF]
	0x01E39894 LDR X0, [X19]
	0x01E39898 LDR W8, [X0 + 0xE0]
	0x01E3989C CBNZ W8, 0x1E398A8
	0x01E398A0 BL 0x1C16DFC
	0x01E398A4 LDR X0, [X19]
	0x01E398A8 LDR X8, [X0 + 0xB8]
	0x01E398AC LDP X20, X19, [X31 + 0x10]
	0x01E398B0 LDR X0, [X8]
	0x01E398B4 LDR X30, [X31], #0x20
	0x01E398B8 RET
	0x01E398BC STP X30, X21, [X31 - 0x20]!
	0x01E398C0 STP X20, X19, [X31 + 0x10]
	0x01E398C4 ADRP X21, 0x259F000
	0x01E398C8 ADRP X20, 0x22C2000
	0x01E398CC LDRB W8, [X21 + 0xF00]
	0x01E398D0 LDR X20, [X20 + 0x7D0]
	0x01E398D4 MOV X19, X0
	0x01E398D8 TBNZ X8, 0x0, 0x1E398F0
	0x01E398DC ADRP X0, 0x22C2000
	0x01E398E0 LDR X0, [X0 + 0x7D0]
	0x01E398E4 BL 0x1C16CF4
	0x01E398E8 MOVZ W8, 0x1
	0x01E398EC STRB W8, [X21 + 0xF00]
	0x01E398F0 LDR X0, [X20]
	0x01E398F4 LDR W8, [X0 + 0xE0]
	0x01E398F8 CBNZ W8, 0x1E39904
	0x01E398FC BL 0x1C16DFC
	0x01E39900 LDR X0, [X20]
	0x01E39904 LDR X8, [X0 + 0xB8]
	0x01E39908 STR X19, [X8]
	0x01E3990C LDP X20, X19, [X31 + 0x10]
	0x01E39910 LDP X30, X21, [X31], #0x20
	0x01E39914 RET
	0x01E39918 STR X30, [X31 - 0x30]!
	0x01E3991C STP X22, X21, [X31 + 0x10]
	0x01E39920 STP X20, X19, [X31 + 0x20]
	0x01E39924 ADRP X19, 0x259F000
	0x01E39928 ADRP X22, 0x22C2000
	0x01E3992C LDRB W8, [X19 + 0xF01]
	0x01E39930 LDR X22, [X22 + 0x7D0]
	0x01E39934 TBNZ X8, 0x0, 0x1E3997C
	0x01E39938 ADRP X0, 0x22C2000
	0x01E3993C LDR X0, [X0 + 0x7D8]
	0x01E39940 BL 0x1C16CF4
	0x01E39944 ADRP X0, 0x22C2000
	0x01E39948 LDR X0, [X0 + 0x7E0]
	0x01E3994C BL 0x1C16CF4
	0x01E39950 ADRP X0, 0x22C2000
	0x01E39954 LDR X0, [X0 + 0x7D0]
	0x01E39958 BL 0x1C16CF4
	0x01E3995C ADRP X0, 0x22C2000
	0x01E39960 LDR X0, [X0 + 0x7E8]
	0x01E39964 BL 0x1C16CF4
	0x01E39968 ADRP X0, 0x22BB000
	0x01E3996C LDR X0, [X0 + 0x7B8]
	0x01E39970 BL 0x1C16CF4
	0x01E39974 MOVZ W8, 0x1
	0x01E39978 STRB W8, [X19 + 0xF01]
	0x01E3997C LDR X0, [X22]
	0x01E39980 LDR W8, [X0 + 0xE0]
	0x01E39984 CBNZ W8, 0x1E3998C
	0x01E39988 BL 0x1C16DFC
	0x01E3998C ADRP X19, 0x259F000
	0x01E39990 LDRB W8, [X19 + 0xF1A]
	0x01E39994 CBNZ W8, 0x1E399AC
	0x01E39998 ADRP X0, 0x22C2000
	0x01E3999C LDR X0, [X0 + 0x7D0]
	0x01E399A0 BL 0x1C16CF4
	0x01E399A4 MOVZ W8, 0x1
	0x01E399A8 STRB W8, [X19 + 0xF1A]
	0x01E399AC LDR X0, [X22]
	0x01E399B0 LDR W8, [X0 + 0xE0]
	0x01E399B4 CBNZ W8, 0x1E399C0
	0x01E399B8 BL 0x1C16DFC
	0x01E399BC LDR X0, [X22]
	0x01E399C0 LDR X8, [X0 + 0xB8]
	0x01E399C4 LDR X8, [X8]
	0x01E399C8 CBZ X8, 0x1E39A80
	0x01E399CC LDR W8, [X0 + 0xE0]
	0x01E399D0 CBNZ W8, 0x1E399D8
	0x01E399D4 BL 0x1C16DFC
	0x01E399D8 LDRB W8, [X19 + 0xF1A]
	0x01E399DC CBNZ W8, 0x1E399F4
	0x01E399E0 ADRP X0, 0x22C2000
	0x01E399E4 LDR X0, [X0 + 0x7D0]
	0x01E399E8 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, 0x25A0000
	015 Move W8, [X19+3828]
	016 Move W20, W2
	017 Move X21, X1
	018 Move X22, X0
	019 Move [X31+8], W3
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x22BD000
	025 Move X0, [X0+368]
	026 Call 0x1C17CF4
	027 Move X0, 0x22C3000
	028 Move X0, [X0+1816]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X19+3828], W8
	032 Compare X22, 0
	033 JumpIfEqual {161}
	034 Move W25, [X22+16]
	035 Move X0, X31
	036 Call RuntimeHelpers.get_OffsetToStringData
	037 Subtract W28, W25, 1
	038 Move W27, W31
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W26, W27
	041 Move [X31+4], W20
	042 Move W19, W20
	043 Move X20, 0x22BD000
	044 Move X20, [X20+368]
	045 Move X26, X31
	046 Move W27, W31
	047 Add X29, X22, W0
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Move W9, 0xD800
	050 And W8, W22, 0xF800
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Move X0, [X20]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move W0, W22
	058 Move X1, X31
	059 Call Char.IsHighSurrogate, X0
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {129}
	065 Move X0, [X20]
	066 Add W24, W27, 1
	067 NotImplemented "Instruction LDRH not yet implemented."
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move W0, W23
	073 Move X1, X31
	074 Call Char.IsLowSurrogate, X0
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {129}
	079 Move X8, W24
	080 NotImplemented "Instruction LDRH not yet implemented."
	081 Move W0, W22
	082 Call UTF32Tools.ToUTF32, X0, X1
	083 Move W8, [X21]
	084 Subtract W23, W0, W8
	085 Move W8, [X31+8]
	086 Move TEMP, X8
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {146}
	090 Call UTF32Tools.ToLowerInvariant, X0
	091 Move W8, [X21]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move W27, W24
	094 Move W0, [X21]
	095 Subtract W23, W22, W0
	096 Move W8, [X31+8]
	097 Move TEMP, X8
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {146}
	101 Call UTF32Tools.ToUTF16, X0
	102 And X31, X0, 0xFFFFFFFF
	103 Move X24, X0
	104 Move X0, [X20]
	105 Move W8, [X0+224]
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move W0, W22
	110 Move X1, X31
	111 Call Char.ToLowerInvariant, X0
	112 Move W22, W0
	113 Move W0, W24
	114 Move X1, X31
	115 Call Char.ToLowerInvariant, X0
	116 And W8, W22, 0xFFFF
	117 Subtract W23, W8, W0
	118 Move W22, W0
	119 Move W0, W8
	120 Call UTF32Tools.ToLowerInvariant, X0
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move W27, W24
	123 Add W27, W27, 1
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Add X26, X26, 1
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Add X21, X21, 4
	128 Move W26, W27
	129 Move X0, [X20]
	130 Add X1, X31, 12
	131 NotImplemented "Instruction STRH not yet implemented."
	132 Call 0x1C17E04
	133 Move X8, 0x22C3000
	134 Move X8, [X8+1816]
	135 Move X1, X0
	136 Move X2, X31
	137 Move X8, [X8]
	138 Move X0, X8
	139 Call String.Format, X0, X1
	140 Move X1, X31
	141 Call Assert.AlwaysFail, X0
	142 Move W20, [X31+4]
	143 Subtract W8, W25, W20
	144 Subtract W8, W8, W27
	145 Add W23, W8, W26
	146 Move W0, W23
	147 Move X20, [X31+96]
	148 Move X19, [X31+104]
	149 Move X22, [X31+80]
	150 Move X21, [X31+88]
	151 Move X24, [X31+64]
	152 Move X23, [X31+72]
	153 Move X26, [X31+48]
	154 Move X25, [X31+56]
	155 Move X28, [X31+32]
	156 Move X27, [X31+40]
	157 Move X29, [X31+16]
	158 Move X30, [X31+24]
	159 Add X31, X31, 112
	160 Return X0
	161 Move X0, 0x22C0000
	162 Move X0, [X0+1320]
	163 Call 0x1C17D08
	164 Call 0x1C17F10
	165 Move X19, X0
	166 Move X0, 0x22C3000
	167 Move X0, [X0+1832]
	168 Call 0x1C17D08
	169 Move X1, X0
	170 Move X0, X19
	171 Move X2, X31
	172 Call ArgumentNullException..ctor, X0, X1
	173 Move X0, 0x22C3000
	174 Move X0, [X0+1856]
	175 Call 0x1C17D08
	176 Move X1, X0
	177 Move X0, X19
	178 Call 0x1C17DEC

Method: System.Boolean EndsWithOrdinal(System.UInt32* strA, System.Int32 aLength, System.UInt32* bStr, System.Int32 bLength, System.Boolean ignoreCase = False)

Disassembly:
	0x01E39B00 LDR W8, [X0 + 0xE0]
	0x01E39B04 CBNZ W8, 0x1E39B0C
	0x01E39B08 BL 0x1C16DFC
	0x01E39B0C ADRP X20, 0x259F000
	0x01E39B10 LDRB W8, [X20 + 0xF1C]
	0x01E39B14 CBNZ W8, 0x1E39B2C
	0x01E39B18 ADRP X0, 0x22C2000
	0x01E39B1C LDR X0, [X0 + 0x7D0]
	0x01E39B20 BL 0x1C16CF4
	0x01E39B24 MOVZ W8, 0x1
	0x01E39B28 STRB W8, [X20 + 0xF1C]
	0x01E39B2C LDR X0, [X22]
	0x01E39B30 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract W8, W1, W3
	002 Move W0, W31
	003 Return X0
	004 Move [X31-16], X30
	005 Add X0, X0, W8
	006 And W4, W4, 1
	007 Move W1, W3
	008 Call UTF32Tools.CompareOrdinal, X0, X1, X2, X3, X4
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CSET not yet implemented."
	011 Move X30, [X31+16]
	012 Return X0

Method: System.Boolean EndsWithOrdinal(System.UInt32* strA, System.Int32 aLength, System.String strB, System.Boolean ignoreCase = False)

Disassembly:
	0x01E39B34 CBNZ W8, 0x1E39B40
	0x01E39B38 BL 0x1C16DFC
	0x01E39B3C LDR X0, [X22]
	0x01E39B40 LDR X8, [X0 + 0xB8]
	0x01E39B44 STR X19, [X8]
	0x01E39B48 LDP X20, X19, [X31 + 0x20]
	0x01E39B4C LDP X22, X21, [X31 + 0x10]
	0x01E39B50 LDR X30, [X31], #0x30
	0x01E39B54 RET
	0x01E39B58 BL 0x1C16F20
	0x01E39B5C STR X30, [X31 - 0x40]!
	0x01E39B60 STP X24, X23, [X31 + 0x10]
	0x01E39B64 STP X22, X21, [X31 + 0x20]
	0x01E39B68 STP X20, X19, [X31 + 0x30]
	0x01E39B6C ADRP X22, 0x259F000
	0x01E39B70 ADRP X23, 0x22C2000
	0x01E39B74 LDRB W8, [X22 + 0xF02]
	0x01E39B78 LDR X23, [X23 + 0x7F0]
	0x01E39B7C MOV W19, W2
	0x01E39B80 MOV X20, X1
	0x01E39B84 MOV X21, X0
	0x01E39B88 TBNZ X8, 0x0, 0x1E39BDC
	0x01E39B8C ADRP X0, 0x22C2000
	0x01E39B90 LDR X0, [X0 + 0x7F8]
	0x01E39B94 BL 0x1C16CF4
	0x01E39B98 ADRP X0, 0x22C2000
	0x01E39B9C LDR X0, [X0 + 0x7D0]
	0x01E39BA0 BL 0x1C16CF4
	0x01E39BA4 ADRP X0, 0x22C2000
	0x01E39BA8 LDR X0, [X0 + 0x800]
	0x01E39BAC BL 0x1C16CF4
	0x01E39BB0 ADRP X0, 0x22BB000
	0x01E39BB4 LDR X0, [X0 + 0x7B8]
	0x01E39BB8 BL 0x1C16CF4
	0x01E39BBC ADRP X0, 0x22C2000
	0x01E39BC0 LDR X0, [X0 + 0x808]
	0x01E39BC4 BL 0x1C16CF4
	0x01E39BC8 ADRP X0, 0x22C2000
	0x01E39BCC LDR X0, [X0 + 0x7F0]
	0x01E39BD0 BL 0x1C16CF4
	0x01E39BD4 MOVZ W8, 0x1
	0x01E39BD8 STRB W8, [X22 + 0xF02]
	0x01E39BDC LDR X0, [X23]
	0x01E39BE0 BL 0x1C16F10
	0x01E39BE4 MOV X1, X31
	0x01E39BE8 MOV X22, X0
	0x01E39BEC BL 0x33BDD8C
	0x01E39BF0 CBZ X22, 0x1E39CE4
	0x01E39BF4 ADRP X23, 0x22BB000
	0x01E39BF8 LDR X23, [X23 + 0x7B8]
	0x01E39BFC STR X21, [X22 + 0x10]
	0x01E39C00 LDR X0, [X23]
	0x01E39C04 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X2, 0
	007 JumpIfEqual {40}
	008 Move X21, X0
	009 Move X0, X31
	010 Move W20, W3
	011 Move X19, X2
	012 Move W22, W1
	013 Call Encoding.get_UTF32
	014 Compare X0, 0
	015 JumpIfEqual {58}
	016 Move X8, [X0]
	017 Move X1, X19
	018 Move X9, [X8+504]
	019 Move X2, [X8+512]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Add W8, W0, 3
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSEL not yet implemented."
	024 NotImplemented "Instruction SBFM not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Subtract W8, W22, W2
	028 Add X1, X21, W8
	029 And W3, W20, 1
	030 Move X0, X19
	031 Call UTF32Tools.CompareOrdinal, X0, X1, X2, X3
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CSET not yet implemented."
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return X0
	040 Move X0, 0x22C0000
	041 Move X0, [X0+1320]
	042 Call 0x1C17D08
	043 Call 0x1C17F10
	044 Move X19, X0
	045 Move X0, 0x22C3000
	046 Move X0, [X0+1840]
	047 Call 0x1C17D08
	048 Move X1, X0
	049 Move X0, X19
	050 Move X2, X31
	051 Call ArgumentNullException..ctor, X0, X1
	052 Move X0, 0x22C3000
	053 Move X0, [X0+1872]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Call 0x1C17DEC
	058 Call 0x1C17F20

Method: System.Int32 GetHashDeterministic(System.UInt32* str, System.Int32 length)

Disassembly:
	0x01E39C08 CBZ W8, 0x1E39C8C
	0x01E39C0C CBZ X21, 0x1E39C94
	0x01E39C10 ADRP X8, 0x22C2000
	0x01E39C14 LDR X8, [X8 + 0x800]
	0x01E39C18 ADRP X21, 0x22C2000
	0x01E39C1C ADRP X23, 0x22C2000
	0x01E39C20 ADRP X24, 0x22C2000
	0x01E39C24 LDR X1, [X8]
	0x01E39C28 LDR X21, [X21 + 0x7F8]
	0x01E39C2C LDR X23, [X23 + 0x808]
	0x01E39C30 LDR X24, [X24 + 0x7D0]
	0x01E39C34 MOVZ W0, 0x1
	0x01E39C38 BL 0x229A11C
	0x01E39C3C STR X0, [X22 + 0x18]
	0x01E39C40 LDR X0, [X21]
	0x01E39C44 BL 0x1C16F10
	0x01E39C48 LDR X2, [X23]
	0x01E39C4C MOV X1, X22
	0x01E39C50 MOV X3, X31
	0x01E39C54 MOV X21, X0
	0x01E39C58 BL 0x2D27AA8
	0x01E39C5C LDR X0, [X24]
	0x01E39C60 LDR W8, [X0 + 0xE0]
	0x01E39C64 CBNZ W8, 0x1E39C6C
	0x01E39C68 BL 0x1C16DFC
	0x01E39C6C MOV X0, X21
	0x01E39C70 MOV X1, X20
	0x01E39C74 MOV W2, W19
	0x01E39C78 LDP X20, X19, [X31 + 0x30]
	0x01E39C7C LDP X22, X21, [X31 + 0x20]
	0x01E39C80 LDP X24, X23, [X31 + 0x10]
	0x01E39C84 LDR X30, [X31], #0x40
	0x01E39C88 B 0x1E39CF0
	0x01E39C8C BL 0x1C16DFC
	0x01E39C90 CBNZ X21, 0x1E39C10
	0x01E39C94 ADRP X19, 0x259F000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W20, 0x1505
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction MOVK not yet implemented."
	009 Move W22, 0x1505
	010 Move X19, X0
	011 Move W21, W1
	012 NotImplemented "Instruction MOVK not yet implemented."
	013 Move W0, [X19+4]
	014 Call UTF32Tools.ToUTF16, X0
	015 Add W8, W22, W22
	016 And W9, W0, 0xFFFF
	017 Add W10, W20, W20
	018 Move X11, X0
	019 ShiftRight X11, 16
	020 And X11, X11, 0x7FFFFFFF
	021 Xor W8, W9, W8
	022 Xor W9, W10, W0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Subtract X21, X21, 1
	027 Move W8, 0x8B65
	028 NotImplemented "Instruction MOVK not yet implemented."
	029 Multiply W8, W20, W8
	030 Move W20, W22
	031 Move W8, 505
	032 NotImplemented "Instruction MOVK not yet implemented."
	033 Add W0, W8, W20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return X0

Method: System.Boolean StartsWithOrdinal(System.UInt32* strA, System.Int32 aLength, System.UInt32* strB, System.Int32 bLength, System.Boolean ignoreCase = False)

Disassembly:
	0x01E39C98 LDRB W8, [X19 + 0xF1D]
	0x01E39C9C CBNZ W8, 0x1E39CB4
	0x01E39CA0 ADRP X0, 0x22BB000
	0x01E39CA4 LDR X0, [X0 + 0x7B8]
	0x01E39CA8 BL 0x1C16CF4
	0x01E39CAC MOVZ W8, 0x1
	0x01E39CB0 STRB W8, [X19 + 0xF1D]
	0x01E39CB4 LDR X0, [X23]
	0x01E39CB8 LDR W8, [X0 + 0xE0]
	0x01E39CBC CBNZ W8, 0x1E39CC8
	0x01E39CC0 BL 0x1C16DFC
	0x01E39CC4 LDR X0, [X23]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W0, W31
	003 Return X0
	004 Move [X31-16], X30
	005 And W4, W4, 1
	006 Move W1, W3
	007 Call UTF32Tools.CompareOrdinal, X0, X1, X2, X3, X4
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Move X30, [X31+16]
	011 Return X0

Method: System.Boolean StartsWithOrdinal(System.UInt32* strA, System.Int32 aLength, System.String strB, System.Boolean ignoreCase = False)

Disassembly:
	0x01E39CC8 LDR X8, [X0 + 0xB8]
	0x01E39CCC LDP X20, X19, [X31 + 0x30]
	0x01E39CD0 LDP X22, X21, [X31 + 0x20]
	0x01E39CD4 LDP X24, X23, [X31 + 0x10]
	0x01E39CD8 LDR X0, [X8 + 0x30]
	0x01E39CDC LDR X30, [X31], #0x40
	0x01E39CE0 RET
	0x01E39CE4 BL 0x1C16F20
	0x01E39CE8 MOV X1, X31
	0x01E39CEC B 0x33BDD8C
	0x01E39CF0 STR X30, [X31 - 0x40]!
	0x01E39CF4 STP X24, X23, [X31 + 0x10]
	0x01E39CF8 STP X22, X21, [X31 + 0x20]
	0x01E39CFC STP X20, X19, [X31 + 0x30]
	0x01E39D00 ADRP X19, 0x259F000
	0x01E39D04 ADRP X22, 0x22C2000
	0x01E39D08 LDRB W8, [X19 + 0xF03]
	0x01E39D0C LDR X22, [X22 + 0x810]
	0x01E39D10 MOV W20, W2
	0x01E39D14 MOV X23, X1
	0x01E39D18 MOV X21, X0
	0x01E39D1C TBNZ X8, 0x0, 0x1E39D64
	0x01E39D20 ADRP X0, 0x22C2000
	0x01E39D24 LDR X0, [X0 + 0x818]
	0x01E39D28 BL 0x1C16CF4
	0x01E39D2C ADRP X0, 0x22C2000
	0x01E39D30 LDR X0, [X0 + 0x820]
	0x01E39D34 BL 0x1C16CF4
	0x01E39D38 ADRP X0, 0x22C2000
	0x01E39D3C LDR X0, [X0 + 0x7D0]
	0x01E39D40 BL 0x1C16CF4
	0x01E39D44 ADRP X0, 0x22C2000
	0x01E39D48 LDR X0, [X0 + 0x828]
	0x01E39D4C BL 0x1C16CF4
	0x01E39D50 ADRP X0, 0x22C2000
	0x01E39D54 LDR X0, [X0 + 0x810]
	0x01E39D58 BL 0x1C16CF4
	0x01E39D5C MOVZ W8, 0x1
	0x01E39D60 STRB W8, [X19 + 0xF03]
	0x01E39D64 LDR X0, [X22]
	0x01E39D68 BL 0x1C16F10
	0x01E39D6C MOV X1, X31
	0x01E39D70 MOV X22, X0
	0x01E39D74 BL 0x33BDD8C
	0x01E39D78 CBZ X22, 0x1E39EBC
	0x01E39D7C ADRP X19, 0x22C2000
	0x01E39D80 LDR X19, [X19 + 0x7D0]
	0x01E39D84 STR X23, [X22 + 0x10]
	0x01E39D88 STR W20, [X22 + 0x18]
	0x01E39D8C STR X21, [X22 + 0x20]
	0x01E39D90 LDR X0, [X19]
	0x01E39D94 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X2, 0
	007 JumpIfEqual {39}
	008 Move X21, X0
	009 Move X0, X31
	010 Move W20, W3
	011 Move X19, X2
	012 Move W22, W1
	013 Call Encoding.get_UTF32
	014 Compare X0, 0
	015 JumpIfEqual {57}
	016 Move X8, [X0]
	017 Move X1, X19
	018 Move X9, [X8+504]
	019 Move X2, [X8+512]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Add W8, W0, 3
	022 NotImplemented "Instruction CMP not yet implemented."
	023 NotImplemented "Instruction CSEL not yet implemented."
	024 NotImplemented "Instruction SBFM not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 And W3, W20, 1
	028 Move X0, X19
	029 Move X1, X21
	030 Call UTF32Tools.CompareOrdinal, X0, X1, X2, X3
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0
	039 Move X0, 0x22C0000
	040 Move X0, [X0+1320]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0x22C3000
	045 Move X0, [X0+1840]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call ArgumentNullException..ctor, X0, X1
	051 Move X0, 0x22C3000
	052 Move X0, [X0+1880]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1C17DEC
	057 Call 0x1C17F20

Method: System.Int32 IndexOf(System.UInt32* str, System.Int32 length, System.String pattern)

Disassembly:
	0x01E39D98 CBNZ W8, 0x1E39DA0
	0x01E39D9C BL 0x1C16DFC
	0x01E39DA0 ADRP X23, 0x259F000
	0x01E39DA4 LDRB W8, [X23 + 0xF1A]
	0x01E39DA8 CBNZ W8, 0x1E39DC0
	0x01E39DAC ADRP X0, 0x22C2000
	0x01E39DB0 LDR X0, [X0 + 0x7D0]
	0x01E39DB4 BL 0x1C16CF4
	0x01E39DB8 MOVZ W8, 0x1
	0x01E39DBC STRB W8, [X23 + 0xF1A]
	0x01E39DC0 LDR X0, [X19]
	0x01E39DC4 ADRP X24, 0x22C2000
	0x01E39DC8 ADRP X21, 0x22C2000
	0x01E39DCC LDR W8, [X0 + 0xE0]
	0x01E39DD0 LDR X24, [X24 + 0x818]
	0x01E39DD4 LDR X21, [X21 + 0x828]
	0x01E39DD8 CBNZ W8, 0x1E39DE4
	0x01E39DDC BL 0x1C16DFC
	0x01E39DE0 LDR X0, [X19]
	0x01E39DE4 LDR X8, [X0 + 0xB8]
	0x01E39DE8 LDR X0, [X24]
	0x01E39DEC LDR X20, [X8]
	0x01E39DF0 BL 0x1C16F10
	0x01E39DF4 LDR X2, [X21]
	0x01E39DF8 MOV X1, X22
	0x01E39DFC MOV X3, X31
	0x01E39E00 MOV X21, X0
	0x01E39E04 BL 0x2D27AA8
	0x01E39E08 LDRB W8, [X23 + 0xF1A]
	0x01E39E0C LDR X22, [X22 + 0x10]
	0x01E39E10 CBNZ W8, 0x1E39E28
	0x01E39E14 ADRP X0, 0x22C2000
	0x01E39E18 LDR X0, [X0 + 0x7D0]
	0x01E39E1C BL 0x1C16CF4
	0x01E39E20 MOVZ W8, 0x1
	0x01E39E24 STRB W8, [X23 + 0xF1A]
	0x01E39E28 LDR X0, [X19]
	0x01E39E2C LDR W8, [X0 + 0xE0]
	0x01E39E30 CBNZ W8, 0x1E39E3C
	0x01E39E34 BL 0x1C16DFC
	0x01E39E38 LDR X0, [X19]
	0x01E39E3C LDR X8, [X0 + 0xB8]
	0x01E39E40 LDR X8, [X8]
	0x01E39E44 CBZ X8, 0x1E39EBC
	0x01E39E48 LDRB W9, [X23 + 0xF1A]
	0x01E39E4C LDR W24, [X8 + 0x20]
	0x01E39E50 CBNZ W9, 0x1E39E68
	0x01E39E54 MOV X0, X19
	0x01E39E58 BL 0x1C16CF4
	0x01E39E5C LDR X0, [X19]
	0x01E39E60 MOVZ W8, 0x1
	0x01E39E64 STRB W8, [X23 + 0xF1A]
	0x01E39E68 LDR W8, [X0 + 0xE0]
	0x01E39E6C CBNZ W8, 0x1E39E78
	0x01E39E70 BL 0x1C16DFC
	0x01E39E74 LDR X0, [X19]
	0x01E39E78 LDR X8, [X0 + 0xB8]
	0x01E39E7C LDR X8, [X8]
	0x01E39E80 CBZ X8, 0x1E39EBC
	0x01E39E84 CBZ X20, 0x1E39EBC
	0x01E39E88 ADRP X9, 0x22C2000
	0x01E39E8C LDR X9, [X9 + 0x820]
	0x01E39E90 LDR X4, [X8 + 0x18]
	0x01E39E94 ORR W3, W24, 0x2
	0x01E39E98 MOV X0, X20
	0x01E39E9C LDR X5, [X9]
	0x01E39EA0 MOV X1, X21
	0x01E39EA4 MOV X2, X22
	0x01E39EA8 LDP X20, X19, [X31 + 0x30]
	0x01E39EAC LDP X22, X21, [X31 + 0x20]
	0x01E39EB0 LDP X24, X23, [X31 + 0x10]
	0x01E39EB4 LDR X30, [X31], #0x40
	0x01E39EB8 B 0x229B8B8
	0x01E39EBC BL 0x1C16F20
	0x01E39EC0 MOV X1, X31
	0x01E39EC4 B 0x33BDD8C
	0x01E39EC8 STP X30, X25, [X31 - 0x40]!
	0x01E39ECC STP X24, X23, [X31 + 0x10]
	0x01E39ED0 STP X22, X21, [X31 + 0x20]
	0x01E39ED4 STP X20, X19, [X31 + 0x30]
	0x01E39ED8 ADRP X20, 0x259F000
	0x01E39EDC ADRP X23, 0x22C2000
	0x01E39EE0 LDRB W8, [X20 + 0xF04]
	0x01E39EE4 LDR X23, [X23 + 0x830]
	0x01E39EE8 MOV W19, W2
	0x01E39EEC MOV X22, X1
	0x01E39EF0 MOV X21, X0
	0x01E39EF4 TBNZ X8, 0x0, 0x1E39F3C
	0x01E39EF8 ADRP X0, 0x22C2000
	0x01E39EFC LDR X0, [X0 + 0x818]
	0x01E39F00 BL 0x1C16CF4
	0x01E39F04 ADRP X0, 0x22C2000
	0x01E39F08 LDR X0, [X0 + 0x820]
	0x01E39F0C BL 0x1C16CF4
	0x01E39F10 ADRP X0, 0x22C2000
	0x01E39F14 LDR X0, [X0 + 0x7D0]
	0x01E39F18 BL 0x1C16CF4
	0x01E39F1C ADRP X0, 0x22C2000
	0x01E39F20 LDR X0, [X0 + 0x838]
	0x01E39F24 BL 0x1C16CF4
	0x01E39F28 ADRP X0, 0x22C2000
	0x01E39F2C LDR X0, [X0 + 0x830]
	0x01E39F30 BL 0x1C16CF4
	0x01E39F34 MOVZ W8, 0x1
	0x01E39F38 STRB W8, [X20 + 0xF04]
	0x01E39F3C LDR X0, [X23]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move TEMP, X1
	013 And TEMP, TEMP, -2147483648
	014 Compare TEMP, -2147483648
	015 JumpIfEqual {79}
	016 Move X20, X0
	017 Compare X0, 0
	018 JumpIfEqual {91}
	019 Move X23, X2
	020 Compare X2, 0
	021 JumpIfEqual {98}
	022 Move W19, W1
	023 Compare W1, 0
	024 JumpIfEqual {39}
	025 Move X0, X31
	026 Call Encoding.get_UTF32
	027 Compare X0, 0
	028 JumpIfEqual {116}
	029 Move X8, [X0]
	030 Move X1, X23
	031 Move X9, [X8+504]
	032 Move X2, [X8+512]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Add W8, W0, 3
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 NotImplemented "Instruction SBFM not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move TEMP, 0
	040 Not TEMP
	041 Move W21, TEMP
	042 Move W0, W21
	043 Move X20, [X31+80]
	044 Move X19, [X31+88]
	045 Move X22, [X31+64]
	046 Move X21, [X31+72]
	047 Move X24, [X31+48]
	048 Move X23, [X31+56]
	049 Move X26, [X31+32]
	050 Move X25, [X31+40]
	051 Move X28, [X31+16]
	052 Move X27, [X31+24]
	053 Move X30, [X31+96]
	054 Return X0
	055 Move W22, W0
	056 Move X0, X31
	057 Call RuntimeHelpers.get_OffsetToStringData
	058 NotImplemented "Instruction LDRSW not yet implemented."
	059 Add X25, X23, W0
	060 Move W21, W31
	061 Move W26, W24
	062 Add X23, X25, X8
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W27, W31
	065 Move [X31+8], X25
	066 Move X28, X26
	067 Add X0, X31, 8
	068 Move X1, X23
	069 Call UTF32Tools.ReadNextCodePoint, X0, X1
	070 Add W8, W21, W27
	071 Move W8, [X20]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract X28, X28, 1
	074 Add W27, W27, 1
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Add W21, W21, 1
	077 Add W8, W21, W24
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X0, 0x22C3000
	080 Move X0, [X0+1888]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X19, X0
	084 Move X0, 0x22C3000
	085 Move X0, [X0+1896]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Move X2, X31
	090 Call ArgumentOutOfRangeException..ctor, X0, X1
	091 Move X0, 0x22C0000
	092 Move X0, [X0+1320]
	093 Call 0x1C17D08
	094 Call 0x1C17F10
	095 Move X19, X0
	096 Move X0, 0x22BD000
	097 Move X0, [X0+3200]
	098 Move X0, 0x22C0000
	099 Move X0, [X0+1320]
	100 Call 0x1C17D08
	101 Call 0x1C17F10
	102 Move X19, X0
	103 Move X0, 0x22C3000
	104 Move X0, [X0+1904]
	105 Call 0x1C17D08
	106 Move X1, X0
	107 Move X0, X19
	108 Move X2, X31
	109 Call ArgumentNullException..ctor, X0, X1
	110 Move X0, 0x22C3000
	111 Move X0, [X0+1912]
	112 Call 0x1C17D08
	113 Move X1, X0
	114 Move X0, X19
	115 Call 0x1C17DEC
	116 Call 0x1C17F20

Method: System.Int32 IndexOf(System.UInt32* str, System.Int32 length, System.UInt32* pattern, System.Int32 patternLength)

Disassembly:
	0x01E3A00C LDR X8, [X0 + 0xB8]
	0x01E3A010 LDR X8, [X8]
	0x01E3A014 CBZ X8, 0x1E3A08C
	0x01E3A018 LDRB W9, [X24 + 0xF1A]
	0x01E3A01C LDR W25, [X8 + 0x20]
	0x01E3A020 CBNZ W9, 0x1E3A038
	0x01E3A024 MOV X0, X20
	0x01E3A028 BL 0x1C16CF4
	0x01E3A02C LDR X0, [X20]
	0x01E3A030 MOVZ W8, 0x1
	0x01E3A034 STRB W8, [X24 + 0xF1A]
	0x01E3A038 LDR W8, [X0 + 0xE0]
	0x01E3A03C CBNZ W8, 0x1E3A048
	0x01E3A040 BL 0x1C16DFC
	0x01E3A044 LDR X0, [X20]
	0x01E3A048 LDR X8, [X0 + 0xB8]
	0x01E3A04C LDR X8, [X8]
	0x01E3A050 CBZ X8, 0x1E3A08C
	0x01E3A054 CBZ X21, 0x1E3A08C
	0x01E3A058 ADRP X9, 0x22C1000
	0x01E3A05C LDR X9, [X9 + 0x820]
	0x01E3A060 LDR X4, [X8 + 0x18]
	0x01E3A064 ORR W3, W25, W19, 0x0
	0x01E3A068 MOV X0, X21
	0x01E3A06C LDR X5, [X9]
	0x01E3A070 MOV X1, X22
	0x01E3A074 MOV X2, X23
	0x01E3A078 LDP X20, X19, [X31 + 0x30]
	0x01E3A07C LDP X22, X21, [X31 + 0x20]
	0x01E3A080 LDP X24, X23, [X31 + 0x10]
	0x01E3A084 LDP X30, X25, [X31], #0x40
	0x01E3A088 B 0x229B8B8
	0x01E3A08C BL 0x1C16F20
	0x01E3A090 MOV X1, X31
	0x01E3A094 B 0x33BDD8C
	0x01E3A098 STP X30, X25, [X31 - 0x40]!
	0x01E3A09C STP X24, X23, [X31 + 0x10]
	0x01E3A0A0 STP X22, X21, [X31 + 0x20]
	0x01E3A0A4 STP X20, X19, [X31 + 0x30]
	0x01E3A0A8 ADRP X20, 0x259E000
	0x01E3A0AC ADRP X23, 0x22C1000
	0x01E3A0B0 LDRB W8, [X20 + 0xF05]
	0x01E3A0B4 LDR X23, [X23 + 0x840]
	0x01E3A0B8 MOV X22, X2
	0x01E3A0BC MOV X21, X1
	0x01E3A0C0 MOV X19, X0
	0x01E3A0C4 TBNZ X8, 0x0, 0x1E3A10C
	0x01E3A0C8 ADRP X0, 0x22C1000
	0x01E3A0CC LDR X0, [X0 + 0x848]
	0x01E3A0D0 BL 0x1C16CF4
	0x01E3A0D4 ADRP X0, 0x22C1000
	0x01E3A0D8 LDR X0, [X0 + 0x850]
	0x01E3A0DC BL 0x1C16CF4
	0x01E3A0E0 ADRP X0, 0x22C1000
	0x01E3A0E4 LDR X0, [X0 + 0x7D0]
	0x01E3A0E8 BL 0x1C16CF4
	0x01E3A0EC ADRP X0, 0x22C1000
	0x01E3A0F0 LDR X0, [X0 + 0x858]
	0x01E3A0F4 BL 0x1C16CF4
	0x01E3A0F8 ADRP X0, 0x22C1000
	0x01E3A0FC LDR X0, [X0 + 0x840]
	0x01E3A100 BL 0x1C16CF4
	0x01E3A104 MOVZ W8, 0x1
	0x01E3A108 STRB W8, [X20 + 0xF05]
	0x01E3A10C LDR X0, [X23]
	0x01E3A110 BL 0x1C16F10
	0x01E3A114 MOV X1, X31
	0x01E3A118 MOV X23, X0
	0x01E3A11C BL 0x33BDD8C
	0x01E3A120 CBZ X23, 0x1E3A260
	0x01E3A124 ADRP X20, 0x22C1000
	0x01E3A128 LDR X20, [X20 + 0x7D0]
	0x01E3A12C STP X22, X21, [X23 + 0x10]
	0x01E3A130 LDR X0, [X20]
	0x01E3A134 LDR W8, [X0 + 0xE0]
	0x01E3A138 CBNZ W8, 0x1E3A140
	0x01E3A13C BL 0x1C16DFC
	0x01E3A140 ADRP X25, 0x259E000
	0x01E3A144 LDRB W8, [X25 + 0xF1A]
	0x01E3A148 CBNZ W8, 0x1E3A160
	0x01E3A14C ADRP X0, 0x22C1000
	0x01E3A150 LDR X0, [X0 + 0x7D0]
	0x01E3A154 BL 0x1C16CF4
	0x01E3A158 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {46}
	007 Move TEMP, X3
	008 And TEMP, TEMP, -2147483648
	009 Compare TEMP, -2147483648
	010 JumpIfEqual {53}
	011 Move X8, X0
	012 Compare X0, 0
	013 JumpIfEqual {65}
	014 Compare X2, 0
	015 JumpIfEqual {72}
	016 Move TEMP, 0
	017 Not TEMP
	018 Move W0, TEMP
	019 Compare W1, 0
	020 JumpIfEqual {43}
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move W0, W31
	023 Move W9, W3
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W10, W31
	026 Move X11, X9
	027 Move X12, X2
	028 Add W13, W0, W10
	029 Move W13, [X8]
	030 Move W14, [X12]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Add W10, W10, 1
	033 Subtract X11, X11, 1
	034 Add X12, X12, 4
	035 Move W10, W31
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Add W0, W0, 1
	038 Add W10, W0, W3
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move TEMP, 0
	041 Not TEMP
	042 Move W0, TEMP
	043 Move X30, [X31+16]
	044 Move X19, [X31+24]
	045 Return X0
	046 Move X0, 0x22C2000
	047 Move X0, [X0+1888]
	048 Call 0x1C17D08
	049 Call 0x1C17F10
	050 Move X19, X0
	051 Move X0, 0x22C2000
	052 Move X0, [X0+1896]
	053 Move X0, 0x22C2000
	054 Move X0, [X0+1888]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X19, X0
	058 Move X0, 0x22C2000
	059 Move X0, [X0+1928]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Move X2, X31
	064 Call ArgumentOutOfRangeException..ctor, X0, X1
	065 Move X0, 0x22BF000
	066 Move X0, [X0+1320]
	067 Call 0x1C17D08
	068 Call 0x1C17F10
	069 Move X19, X0
	070 Move X0, 0x22BC000
	071 Move X0, [X0+3200]
	072 Move X0, 0x22BF000
	073 Move X0, [X0+1320]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X19, X0
	077 Move X0, 0x22C2000
	078 Move X0, [X0+1904]
	079 Call 0x1C17D08
	080 Move X1, X0
	081 Move X0, X19
	082 Move X2, X31
	083 Call ArgumentNullException..ctor, X0, X1
	084 Move X0, 0x22C2000
	085 Move X0, [X0+1936]
	086 Call 0x1C17D08
	087 Move X1, X0
	088 Move X0, X19
	089 Call 0x1C17DEC

Method: System.Void ToLowerInvariant(System.UInt32* src, System.UInt32* dst, System.Int32 length)

Disassembly:
	0x01E3A15C STRB W8, [X25 + 0xF1A]
	0x01E3A160 LDR X0, [X20]
	0x01E3A164 ADRP X24, 0x22C1000
	0x01E3A168 ADRP X22, 0x22C1000
	0x01E3A16C LDR W8, [X0 + 0xE0]
	0x01E3A170 LDR X24, [X24 + 0x848]
	0x01E3A174 LDR X22, [X22 + 0x858]
	0x01E3A178 CBNZ W8, 0x1E3A184
	0x01E3A17C BL 0x1C16DFC
	0x01E3A180 LDR X0, [X20]
	0x01E3A184 LDR X8, [X0 + 0xB8]
	0x01E3A188 LDR X0, [X24]
	0x01E3A18C LDR X21, [X8]
	0x01E3A190 BL 0x1C16F10
	0x01E3A194 LDR X2, [X22]
	0x01E3A198 MOV X1, X23
	0x01E3A19C MOV X3, X31
	0x01E3A1A0 MOV X22, X0
	0x01E3A1A4 BL 0x2D30578
	0x01E3A1A8 LDRB W8, [X25 + 0xF1A]
	0x01E3A1AC LDR X23, [X23 + 0x10]
	0x01E3A1B0 CBNZ W8, 0x1E3A1C8
	0x01E3A1B4 ADRP X0, 0x22C1000
	0x01E3A1B8 LDR X0, [X0 + 0x7D0]
	0x01E3A1BC BL 0x1C16CF4
	0x01E3A1C0 MOVZ W8, 0x1
	0x01E3A1C4 STRB W8, [X25 + 0xF1A]
	0x01E3A1C8 LDR X0, [X20]
	0x01E3A1CC LDR W8, [X0 + 0xE0]
	0x01E3A1D0 CBNZ W8, 0x1E3A1DC
	0x01E3A1D4 BL 0x1C16DFC
	0x01E3A1D8 LDR X0, [X20]
	0x01E3A1DC LDR X8, [X0 + 0xB8]
	0x01E3A1E0 LDR X8, [X8]
	0x01E3A1E4 CBZ X8, 0x1E3A260
	0x01E3A1E8 LDRB W9, [X25 + 0xF1A]
	0x01E3A1EC LDR W24, [X8 + 0x24]
	0x01E3A1F0 CBNZ W9, 0x1E3A208
	0x01E3A1F4 MOV X0, X20
	0x01E3A1F8 BL 0x1C16CF4
	0x01E3A1FC LDR X0, [X20]
	0x01E3A200 MOVZ W8, 0x1
	0x01E3A204 STRB W8, [X25 + 0xF1A]
	0x01E3A208 LDR W8, [X0 + 0xE0]
	0x01E3A20C CBNZ W8, 0x1E3A218
	0x01E3A210 BL 0x1C16DFC
	0x01E3A214 LDR X0, [X20]
	0x01E3A218 LDR X8, [X0 + 0xB8]
	0x01E3A21C LDR X8, [X8]
	0x01E3A220 CBZ X8, 0x1E3A260
	0x01E3A224 CBZ X21, 0x1E3A260

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {27}
	007 Move X19, X1
	008 Compare X1, 0
	009 JumpIfEqual {34}
	010 Move TEMP, X2
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {41}
	014 Compare W2, 0
	015 JumpIfEqual {22}
	016 Move X20, X0
	017 Move W21, W2
	018 Move W0, [X20+4]
	019 Call UTF32Tools.ToLowerInvariant, X0
	020 Subtract X21, X21, 1
	021 Move [X19+4], W0
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return 
	027 Move X0, 0x22BF000
	028 Move X0, [X0+1320]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X19, X0
	032 Move X0, 0x22C2000
	033 Move X0, [X0+1944]
	034 Move X0, 0x22BF000
	035 Move X0, [X0+1320]
	036 Call 0x1C17D08
	037 Call 0x1C17F10
	038 Move X19, X0
	039 Move X0, 0x22C2000
	040 Move X0, [X0+1952]
	041 Move X0, 0x22BF000
	042 Move X0, [X0+1320]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X19, X0
	046 Move X0, 0x22C2000
	047 Move X0, [X0+1896]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Move X2, X31
	052 Call ArgumentNullException..ctor, X0, X1
	053 Move X0, 0x22C2000
	054 Move X0, [X0+1960]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Call 0x1C17DEC

Method: System.Void ToUpperInvariant(System.UInt32* src, System.UInt32* dst, System.Int32 length)

Disassembly:
	0x01E3A228 ADRP X9, 0x22C1000
	0x01E3A22C LDR X9, [X9 + 0x850]
	0x01E3A230 LDR X5, [X8 + 0x18]
	0x01E3A234 MOV X0, X21
	0x01E3A238 MOV X1, X19
	0x01E3A23C LDR X6, [X9]
	0x01E3A240 MOV X2, X22
	0x01E3A244 MOV X3, X23
	0x01E3A248 MOV W4, W24
	0x01E3A24C LDP X20, X19, [X31 + 0x30]
	0x01E3A250 LDP X22, X21, [X31 + 0x20]
	0x01E3A254 LDP X24, X23, [X31 + 0x10]
	0x01E3A258 LDP X30, X25, [X31], #0x40
	0x01E3A25C B 0x229AF24
	0x01E3A260 BL 0x1C16F20
	0x01E3A264 MOV X1, X31
	0x01E3A268 B 0x33BDD8C
	0x01E3A26C STR X30, [X31 - 0x30]!
	0x01E3A270 STP X22, X21, [X31 + 0x10]
	0x01E3A274 STP X20, X19, [X31 + 0x20]
	0x01E3A278 ADRP X21, 0x259E000
	0x01E3A27C ADRP X22, 0x22C1000
	0x01E3A280 LDRB W8, [X21 + 0xF06]
	0x01E3A284 LDR X22, [X22 + 0x860]
	0x01E3A288 MOV X19, X1
	0x01E3A28C MOV W20, W0
	0x01E3A290 TBNZ X8, 0x0, 0x1E3A2D8
	0x01E3A294 ADRP X0, 0x22C1000
	0x01E3A298 LDR X0, [X0 + 0x868]
	0x01E3A29C BL 0x1C16CF4
	0x01E3A2A0 ADRP X0, 0x22C1000
	0x01E3A2A4 LDR X0, [X0 + 0x7D0]
	0x01E3A2A8 BL 0x1C16CF4
	0x01E3A2AC ADRP X0, 0x22BA000
	0x01E3A2B0 LDR X0, [X0 + 0x7B8]
	0x01E3A2B4 BL 0x1C16CF4
	0x01E3A2B8 ADRP X0, 0x22C1000
	0x01E3A2BC LDR X0, [X0 + 0x870]
	0x01E3A2C0 BL 0x1C16CF4
	0x01E3A2C4 ADRP X0, 0x22C1000
	0x01E3A2C8 LDR X0, [X0 + 0x860]
	0x01E3A2CC BL 0x1C16CF4
	0x01E3A2D0 MOVZ W8, 0x1
	0x01E3A2D4 STRB W8, [X21 + 0xF06]
	0x01E3A2D8 LDR X0, [X22]
	0x01E3A2DC BL 0x1C16F10
	0x01E3A2E0 MOV X1, X31
	0x01E3A2E4 MOV X21, X0
	0x01E3A2E8 BL 0x33BDD8C
	0x01E3A2EC CBZ X21, 0x1E3A3C4
	0x01E3A2F0 STR W20, [X21 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {27}
	007 Move X19, X1
	008 Compare X1, 0
	009 JumpIfEqual {34}
	010 Move TEMP, X2
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {41}
	014 Compare W2, 0
	015 JumpIfEqual {22}
	016 Move X20, X0
	017 Move W21, W2
	018 Move W0, [X20+4]
	019 Call UTF32Tools.ToUpperInvariant, X0
	020 Subtract X21, X21, 1
	021 Move [X19+4], W0
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return 
	027 Move X0, 0x22BF000
	028 Move X0, [X0+1320]
	029 Call 0x1C17D08
	030 Call 0x1C17F10
	031 Move X19, X0
	032 Move X0, 0x22C2000
	033 Move X0, [X0+1944]
	034 Move X0, 0x22BF000
	035 Move X0, [X0+1320]
	036 Call 0x1C17D08
	037 Call 0x1C17F10
	038 Move X19, X0
	039 Move X0, 0x22C2000
	040 Move X0, [X0+1952]
	041 Move X0, 0x22BF000
	042 Move X0, [X0+1320]
	043 Call 0x1C17D08
	044 Call 0x1C17F10
	045 Move X19, X0
	046 Move X0, 0x22C2000
	047 Move X0, [X0+1896]
	048 Call 0x1C17D08
	049 Move X1, X0
	050 Move X0, X19
	051 Move X2, X31
	052 Call ArgumentNullException..ctor, X0, X1
	053 Move X0, 0x22C2000
	054 Move X0, [X0+1968]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Call 0x1C17DEC

Method: System.Char GetHighSurrogate(System.UInt32 scalar)

Disassembly:
	0x01E3A3EC ADRP X0, 0x22C1000
	0x01E3A3F0 LDR X0, [X0 + 0x7D0]
	0x01E3A3F4 BL 0x1C16CF4
	0x01E3A3F8 ADRP X0, 0x22BA000
	0x01E3A3FC LDR X0, [X0 + 0x7B8]

ISIL:
	001 Move W8, 0x3FF0000
	002 Add W8, W0, W8
	003 Move TEMP, 0x27FF
	004 Not TEMP
	005 Move W9, TEMP
	006 Add W0, W9, W8
	007 Return X0

Method: System.Int32 GetLength(System.String str)

Disassembly:
	0x01E3A400 BL 0x1C16CF4
	0x01E3A404 MOVZ W8, 0x1
	0x01E3A408 STRB W8, [X20 + 0xF07]
	0x01E3A40C LDR X0, [X19]
	0x01E3A410 LDR W8, [X0 + 0xE0]
	0x01E3A414 CBNZ W8, 0x1E3A41C
	0x01E3A418 BL 0x1C16DFC
	0x01E3A41C ADRP X20, 0x259E000
	0x01E3A420 LDRB W8, [X20 + 0xF1B]
	0x01E3A424 CBNZ W8, 0x1E3A43C
	0x01E3A428 ADRP X0, 0x22BA000
	0x01E3A42C LDR X0, [X0 + 0x7B8]
	0x01E3A430 BL 0x1C16CF4
	0x01E3A434 MOVZ W8, 0x1
	0x01E3A438 STRB W8, [X20 + 0xF1B]
	0x01E3A43C LDR X0, [X19]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call Encoding.get_UTF32
	006 Compare X0, 0
	007 JumpIfEqual {20}
	008 Move X8, [X0]
	009 Move X1, X19
	010 Move X9, [X8+504]
	011 Move X2, [X8+512]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Add W8, W0, 3
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSEL not yet implemented."
	016 NotImplemented "Instruction SBFM not yet implemented."
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return X0
	020 Call 0x1C17F20

Method: System.Char GetLowSurrogate(System.UInt32 scalar)

Disassembly:
	0x01E3A440 ADRP X20, 0x22C1000
	0x01E3A444 LDR W8, [X0 + 0xE0]
	0x01E3A448 LDR X20, [X20 + 0x7D0]
	0x01E3A44C CBNZ W8, 0x1E3A458

ISIL:
	001 Move TEMP, 0x23FF
	002 Not TEMP
	003 Move W8, TEMP
	004 NotImplemented "Instruction BFM not yet implemented."
	005 Move W0, W8
	006 Return X0

Method: System.Boolean IsValidCodePoint(System.UInt32 scalar)

Disassembly:
	0x01E3A450 BL 0x1C16DFC
	0x01E3A454 LDR X0, [X19]
	0x01E3A458 LDR X8, [X0 + 0xB8]
	0x01E3A45C LDR X9, [X20]
	0x01E3A460 LDP X20, X19, [X31 + 0x10]
	0x01E3A464 LDR X8, [X8 + 0x28]
	0x01E3A468 LDR X9, [X9 + 0xB8]
	0x01E3A46C STR X8, [X9]

ISIL:
	001 Subtract W8, W0, 0x110000
	002 Move W9, 0xD800
	003 Move W10, 0xFFEF0000
	004 Xor W8, W8, W9
	005 Or W9, W10, 2047
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: System.UInt32 ReadNextCodePoint(ref System.Char* pstr, System.Char* end)

Disassembly:
	0x01E39F40 BL 0x1C16F10
	0x01E39F44 MOV X1, X31
	0x01E39F48 MOV X23, X0
	0x01E39F4C BL 0x33BDD8C
	0x01E39F50 CBZ X23, 0x1E3A08C
	0x01E39F54 ADRP X20, 0x22C2000
	0x01E39F58 LDR X20, [X20 + 0x7D0]
	0x01E39F5C STP X22, X21, [X23 + 0x10]
	0x01E39F60 LDR X0, [X20]
	0x01E39F64 LDR W8, [X0 + 0xE0]
	0x01E39F68 CBNZ W8, 0x1E39F70
	0x01E39F6C BL 0x1C16DFC
	0x01E39F70 ADRP X24, 0x259F000
	0x01E39F74 LDRB W8, [X24 + 0xF1A]
	0x01E39F78 CBNZ W8, 0x1E39F90
	0x01E39F7C ADRP X0, 0x22C2000
	0x01E39F80 LDR X0, [X0 + 0x7D0]
	0x01E39F84 BL 0x1C16CF4
	0x01E39F88 MOVZ W8, 0x1
	0x01E39F8C STRB W8, [X24 + 0xF1A]
	0x01E39F90 LDR X0, [X20]
	0x01E39F94 ADRP X25, 0x22C2000
	0x01E39F98 ADRP X22, 0x22C2000
	0x01E39F9C LDR W8, [X0 + 0xE0]
	0x01E39FA0 LDR X25, [X25 + 0x818]
	0x01E39FA4 LDR X22, [X22 + 0x838]
	0x01E39FA8 CBNZ W8, 0x1E39FB4
	0x01E39FAC BL 0x1C16DFC
	0x01E39FB0 LDR X0, [X20]
	0x01E39FB4 LDR X8, [X0 + 0xB8]
	0x01E39FB8 LDR X0, [X25]
	0x01E39FBC LDR X21, [X8]
	0x01E39FC0 BL 0x1C16F10
	0x01E39FC4 LDR X2, [X22]
	0x01E39FC8 MOV X1, X23
	0x01E39FCC MOV X3, X31
	0x01E39FD0 MOV X22, X0
	0x01E39FD4 BL 0x2D27AA8
	0x01E39FD8 LDRB W8, [X24 + 0xF1A]
	0x01E39FDC LDR X23, [X23 + 0x10]
	0x01E39FE0 CBNZ W8, 0x1E39FF8
	0x01E39FE4 ADRP X0, 0x22C2000
	0x01E39FE8 LDR X0, [X0 + 0x7D0]
	0x01E39FEC BL 0x1C16CF4
	0x01E39FF0 MOVZ W8, 0x1
	0x01E39FF4 STRB W8, [X24 + 0xF1A]
	0x01E39FF8 LDR X0, [X20]
	0x01E39FFC LDR W8, [X0 + 0xE0]
	0x01E3A000 CBNZ W8, 0x1E3A00C
	0x01E3A004 BL 0x1C16DFC
	0x01E3A008 LDR X0, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25A0000
	007 Move X21, 0x22BD000
	008 Move W8, [X22+3829]
	009 Move X21, [X21+368]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x22BD000
	017 Move X0, [X0+368]
	018 Call 0x1C17CF4
	019 Move X0, 0x22C3000
	020 Move X0, [X0+1920]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+3829], W8
	024 Move X8, [X19]
	025 Add X9, X8, 2
	026 Move [X19], X9
	027 Move X0, [X21]
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Move W9, [X0+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move W0, W21
	034 Move X1, X31
	035 Call Char.IsHighSurrogate, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {56}
	040 Move X9, 0x22C3000
	041 Move X8, [X19]
	042 Move X9, [X9+1920]
	043 Move X2, X31
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X1, [X9]
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Call Assert.Always, X0, X1
	048 Move X8, [X19]
	049 Add X9, X8, 2
	050 Move [X19], X9
	051 NotImplemented "Instruction LDRH not yet implemented."
	052 Move W9, 0x2400
	053 NotImplemented "Instruction MOVK not yet implemented."
	054 Add W8, W8, W21
	055 Add W21, W8, W9
	056 Move W0, W21
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Return X0

Method: System.Void Swap(ref System.Int32 a, ref System.Int32 b)

Disassembly:
	0x01E3A470 LDR X30, [X31], #0x20
	0x01E3A474 RET
	0x01E3A478 STP X30, X19, [X31 - 0x10]!
	0x01E3A47C LDR X8, [X0 + 0x10]
	0x01E3A480 CBZ X8, 0x1E3A4A4

ISIL:
	001 Move W8, [X1]
	002 Move W9, [X0]
	003 Move [X0], W8
	004 Move [X1], W9
	005 Return 

Method: System.UInt32 ToLowerInvariant(System.UInt32 value)

Disassembly:
	0x01E39668 LDRB W8, [X20 + 0xEFC]
	0x01E3966C MOV X19, X0
	0x01E39670 TBNZ X8, 0x0, 0x1E39688
	0x01E39674 ADRP X0, 0x22C2000
	0x01E39678 LDR X0, [X0 + 0x7C0]
	0x01E3967C BL 0x1C16CF4
	0x01E39680 MOVZ W8, 0x1
	0x01E39684 STRB W8, [X20 + 0xEFC]
	0x01E39688 CBZ X19, 0x1E396C4
	0x01E3968C ADRP X8, 0x22C2000
	0x01E39690 LDR X8, [X8 + 0x7C0]
	0x01E39694 LDP W20, W19, [X19 + 0x10]
	0x01E39698 LDR X0, [X8]
	0x01E3969C BL 0x1C16F10
	0x01E396A0 MOV W1, W20
	0x01E396A4 MOV W2, W19
	0x01E396A8 MOV X3, X31
	0x01E396AC MOV X21, X0
	0x01E396B0 BL 0x339C25C
	0x01E396B4 LDP X20, X19, [X31 + 0x10]
	0x01E396B8 MOV X0, X21
	0x01E396BC LDP X30, X21, [X31], #0x20
	0x01E396C0 RET
	0x01E396C4 BL 0x1C16F20
	0x01E396C8 STP X30, X21, [X31 - 0x20]!
	0x01E396CC STP X20, X19, [X31 + 0x10]
	0x01E396D0 ADRP X21, 0x259F000
	0x01E396D4 ADRP X19, 0x22C2000
	0x01E396D8 ADRP X20, 0x22BA000
	0x01E396DC LDRB W8, [X21 + 0xEFD]
	0x01E396E0 LDR X19, [X19 + 0x7B8]
	0x01E396E4 LDR X20, [X20 + 0x6C0]
	0x01E396E8 TBNZ X8, 0x0, 0x1E3970C
	0x01E396EC ADRP X0, 0x22BA000
	0x01E396F0 LDR X0, [X0 + 0x6C0]
	0x01E396F4 BL 0x1C16CF4
	0x01E396F8 ADRP X0, 0x22C2000
	0x01E396FC LDR X0, [X0 + 0x7B8]
	0x01E39700 BL 0x1C16CF4
	0x01E39704 MOVZ W8, 0x1
	0x01E39708 STRB W8, [X21 + 0xEFD]
	0x01E3970C LDR X0, [X20]
	0x01E39710 LDR X19, [X19]
	0x01E39714 LDR W8, [X0 + 0xE0]
	0x01E39718 CBNZ W8, 0x1E39720
	0x01E3971C BL 0x1C16DFC
	0x01E39720 MOV X0, X19
	0x01E39724 MOV X1, X31
	0x01E39728 BL 0x338C698
	0x01E3972C CBZ X0, 0x1E3976C
	0x01E39730 LDR X8, [X0]
	0x01E39734 LDR X9, [X8 + 0x2F8]
	0x01E39738 LDR X1, [X8 + 0x300]
	0x01E3973C BLR X9
	0x01E39740 CBZ X0, 0x1E3976C
	0x01E39744 LDR X8, [X0]
	0x01E39748 LDP X9, X1, [X8 + 0x1D8]
	0x01E3974C BLR X9
	0x01E39750 MOV X1, X31
	0x01E39754 BL 0x364B578
	0x01E39758 CBZ X0, 0x1E3976C
	0x01E3975C LDR X0, [X0 + 0x70]

ISIL:
	001 Move [X31-32], X29
	002 Move [X31-24], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Add X29, X31, 0
	006 Move X20, 0x25A0000
	007 Move W8, [X20+3830]
	008 Move W19, W0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22BD000
	014 Move X0, [X0+368]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3830], W8
	018 Move W0, W19
	019 Call UTF32Tools.ToUTF16, X0
	020 Move X19, X0
	021 Move X8, X0
	022 ShiftRight X8, 16
	023 And X8, X8, 0x7FFFFFFF
	024 Compare W8, 0
	025 JumpIfEqual {59}
	026 Add X9, X31, 0
	027 Subtract X1, X9, 16
	028 Move X8, X19
	029 ShiftRight X8, 16
	030 And X8, X8, 0x7FFFFFFF
	031 Add X31, X1, 0
	032 Move [X9-16], W31
	033 NotImplemented "Instruction STURH not yet implemented."
	034 Or X9, X1, 3
	035 Move W3, 2
	036 Move X0, X31
	037 Move W2, W31
	038 Move X4, X31
	039 NotImplemented "Instruction STRH not yet implemented."
	040 Call String.CreateString, X0, X1, X2, X3
	041 Compare X0, 0
	042 JumpIfEqual {76}
	043 Move X1, X31
	044 Call String.ToLowerInvariant, X0
	045 Compare X0, 0
	046 JumpIfEqual {76}
	047 Move W1, W31
	048 Move X2, X31
	049 Move X19, X0
	050 Call String.get_Chars, X0, X1
	051 Move W20, W0
	052 Move W1, 1
	053 Move X0, X19
	054 Move X2, X31
	055 Call String.get_Chars, X0, X1
	056 Move W1, W0
	057 Move W0, W20
	058 Call UTF32Tools.ToUTF32, X0, X1
	059 Move X8, 0x22BD000
	060 Move X8, [X8+368]
	061 Move X0, [X8]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move W0, W19
	067 Move X1, X31
	068 Call Char.ToLowerInvariant, X0
	069 And W0, W0, 0xFFFF
	070 Add X31, X29, 0
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X29, [X31+32]
	074 Move X30, [X31+40]
	075 Return X0
	076 Call 0x1C17F20

Method: System.UInt32 ToUpperInvariant(System.UInt32 value)

Disassembly:
	0x01E3A2F4 ADRP X20, 0x259E000
	0x01E3A2F8 ADRP X22, 0x22C1000
	0x01E3A2FC LDRB W8, [X20 + 0xEDB]
	0x01E3A300 LDR X22, [X22 + 0x710]
	0x01E3A304 TBNZ X8, 0x0, 0x1E3A31C
	0x01E3A308 ADRP X0, 0x22C1000
	0x01E3A30C LDR X0, [X0 + 0x710]
	0x01E3A310 BL 0x1C16CF4
	0x01E3A314 MOVZ W8, 0x1
	0x01E3A318 STRB W8, [X20 + 0xEDB]
	0x01E3A31C LDR X8, [X22]
	0x01E3A320 LDR X8, [X8 + 0xB8]
	0x01E3A324 LDRB W8, [X8]
	0x01E3A328 TBNZ X8, 0x1, 0x1E3A364
	0x01E3A32C ADRP X8, 0x22BA000
	0x01E3A330 LDR X8, [X8 + 0x7B8]
	0x01E3A334 LDR W20, [X21 + 0x10]
	0x01E3A338 LDR X0, [X8]
	0x01E3A33C LDR W8, [X0 + 0xE0]
	0x01E3A340 CBNZ W8, 0x1E3A348
	0x01E3A344 BL 0x1C16DFC
	0x01E3A348 MOV W0, W20
	0x01E3A34C MOV X1, X19
	0x01E3A350 LDP X20, X19, [X31 + 0x20]
	0x01E3A354 LDP X22, X21, [X31 + 0x10]
	0x01E3A358 MOV X2, X31
	0x01E3A35C LDR X30, [X31], #0x30
	0x01E3A360 B 0x33F503C
	0x01E3A364 ADRP X8, 0x22C1000
	0x01E3A368 LDR X8, [X8 + 0x868]
	0x01E3A36C LDR X0, [X8]
	0x01E3A370 BL 0x1C16F10
	0x01E3A374 ADRP X8, 0x22C1000
	0x01E3A378 LDR X8, [X8 + 0x870]
	0x01E3A37C MOV X1, X21
	0x01E3A380 MOV X3, X31
	0x01E3A384 MOV X20, X0
	0x01E3A388 LDR X2, [X8]
	0x01E3A38C BL 0x2D2B9F4
	0x01E3A390 ADRP X8, 0x22C1000
	0x01E3A394 LDR X8, [X8 + 0x7D0]
	0x01E3A398 LDR X0, [X8]
	0x01E3A39C LDR W8, [X0 + 0xE0]
	0x01E3A3A0 CBNZ W8, 0x1E3A3A8
	0x01E3A3A4 BL 0x1C16DFC
	0x01E3A3A8 MOV X0, X20
	0x01E3A3AC MOV X1, X19
	0x01E3A3B0 LDP X20, X19, [X31 + 0x20]
	0x01E3A3B4 LDP X22, X21, [X31 + 0x10]
	0x01E3A3B8 MOV W2, W31
	0x01E3A3BC LDR X30, [X31], #0x30
	0x01E3A3C0 B 0x1E39EC8
	0x01E3A3C4 BL 0x1C16F20
	0x01E3A3C8 MOV X1, X31
	0x01E3A3CC B 0x33BDD8C
	0x01E3A3D0 STR X30, [X31 - 0x20]!
	0x01E3A3D4 STP X20, X19, [X31 + 0x10]
	0x01E3A3D8 ADRP X20, 0x259E000
	0x01E3A3DC ADRP X19, 0x22BA000
	0x01E3A3E0 LDRB W8, [X20 + 0xF07]
	0x01E3A3E4 LDR X19, [X19 + 0x7B8]
	0x01E3A3E8 TBNZ X8, 0x0, 0x1E3A40C

ISIL:
	001 Move [X31-32], X29
	002 Move [X31-24], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Add X29, X31, 0
	006 Move X20, 0x259F000
	007 Move W8, [X20+3831]
	008 Move W19, W0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22BC000
	014 Move X0, [X0+368]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3831], W8
	018 Move W0, W19
	019 Call UTF32Tools.ToUTF16, X0
	020 Move X19, X0
	021 Move X8, X0
	022 ShiftRight X8, 16
	023 And X8, X8, 0x7FFFFFFF
	024 Compare W8, 0
	025 JumpIfEqual {59}
	026 Add X9, X31, 0
	027 Subtract X1, X9, 16
	028 Move X8, X19
	029 ShiftRight X8, 16
	030 And X8, X8, 0x7FFFFFFF
	031 Add X31, X1, 0
	032 Move [X9-16], W31
	033 NotImplemented "Instruction STURH not yet implemented."
	034 Or X9, X1, 3
	035 Move W3, 2
	036 Move X0, X31
	037 Move W2, W31
	038 Move X4, X31
	039 NotImplemented "Instruction STRH not yet implemented."
	040 Call String.CreateString, X0, X1, X2, X3
	041 Compare X0, 0
	042 JumpIfEqual {76}
	043 Move X1, X31
	044 Call String.ToUpperInvariant, X0
	045 Compare X0, 0
	046 JumpIfEqual {76}
	047 Move W1, W31
	048 Move X2, X31
	049 Move X19, X0
	050 Call String.get_Chars, X0, X1
	051 Move W20, W0
	052 Move W1, 1
	053 Move X0, X19
	054 Move X2, X31
	055 Call String.get_Chars, X0, X1
	056 Move W1, W0
	057 Move W0, W20
	058 Call UTF32Tools.ToUTF32, X0, X1
	059 Move X8, 0x22BC000
	060 Move X8, [X8+368]
	061 Move X0, [X8]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move W0, W19
	067 Move X1, X31
	068 Call Char.ToUpperInvariant, X0
	069 And W0, W0, 0xFFFF
	070 Add X31, X29, 0
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X29, [X31+32]
	074 Move X30, [X31+40]
	075 Return X0
	076 Call 0x1C17F20

Method: System.ValueTuple`2<System.Char, System.Char> ToUTF16(System.UInt32 scalar)

Disassembly:
	0x01E399EC MOVZ W8, 0x1
	0x01E399F0 STRB W8, [X19 + 0xF1A]
	0x01E399F4 LDR X0, [X22]
	0x01E399F8 ADRP X20, 0x22BB000
	0x01E399FC LDR W8, [X0 + 0xE0]
	0x01E39A00 LDR X20, [X20 + 0x7B8]
	0x01E39A04 CBNZ W8, 0x1E39A10
	0x01E39A08 BL 0x1C16DFC
	0x01E39A0C LDR X0, [X22]
	0x01E39A10 LDR X8, [X20]
	0x01E39A14 LDR X9, [X0 + 0xB8]
	0x01E39A18 LDR W10, [X8 + 0xE0]
	0x01E39A1C LDR X19, [X9]
	0x01E39A20 CBNZ W10, 0x1E39A2C
	0x01E39A24 MOV X0, X8
	0x01E39A28 BL 0x1C16DFC
	0x01E39A2C ADRP X21, 0x259F000
	0x01E39A30 LDRB W8, [X21 + 0xF1B]
	0x01E39A34 CBNZ W8, 0x1E39A4C
	0x01E39A38 ADRP X0, 0x22BB000
	0x01E39A3C LDR X0, [X0 + 0x7B8]
	0x01E39A40 BL 0x1C16CF4
	0x01E39A44 MOVZ W8, 0x1
	0x01E39A48 STRB W8, [X21 + 0xF1B]
	0x01E39A4C LDR X0, [X20]
	0x01E39A50 LDR W8, [X0 + 0xE0]
	0x01E39A54 CBNZ W8, 0x1E39A60
	0x01E39A58 BL 0x1C16DFC
	0x01E39A5C LDR X0, [X20]
	0x01E39A60 CBZ X19, 0x1E39B58
	0x01E39A64 LDR X8, [X0 + 0xB8]
	0x01E39A68 LDR X9, [X19]
	0x01E39A6C MOV X0, X19
	0x01E39A70 LDR X1, [X8 + 0x28]
	0x01E39A74 LDP X8, X2, [X9 + 0x138]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x25A0000
	005 Move W8, [X20+3832]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x22C3000
	012 Move X0, [X0+1864]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3832], W8
	016 Move X8, 0x22C3000
	017 Move X8, [X8+1864]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X3, [X8]
	020 Move W9, 0x3FF0000
	021 Move TEMP, 0x27FF
	022 Not TEMP
	023 Move W10, TEMP
	024 Move TEMP, 0x23FF
	025 Not TEMP
	026 Move W2, TEMP
	027 Add W8, W19, W9
	028 Add W1, W10, W8
	029 NotImplemented "Instruction BFM not yet implemented."
	030 Move [X31+12], W31
	031 Add X0, X31, 12
	032 Move X3, [X8]
	033 Add X0, X31, 12
	034 Move W1, W19
	035 Move W2, W31
	036 Move [X31+12], W31
	037 Call ValueTuple`2<Char, Char>..ctor, X0, X1, X2
	038 Move W0, [X31+12]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0

Method: System.UInt32 ToUTF32(System.Char charOrHighSurrogate, System.Char lowSurrogate =  )

Disassembly:
	0x01E39A78 BLR X8
	0x01E39A7C TBZ X0, 0x0, 0x1E39B48
	0x01E39A80 ADRP X8, 0x22C2000
	0x01E39A84 LDR X8, [X8 + 0x7D8]
	0x01E39A88 ADRP X20, 0x22C2000
	0x01E39A8C LDR X0, [X8]
	0x01E39A90 LDR W8, [X0 + 0xE0]
	0x01E39A94 LDR X20, [X20 + 0x7E8]
	0x01E39A98 CBNZ W8, 0x1E39AA0
	0x01E39A9C BL 0x1C16DFC
	0x01E39AA0 ADRP X19, 0x22C2000
	0x01E39AA4 LDR X19, [X19 + 0x7E0]
	0x01E39AA8 MOV X0, X31
	0x01E39AAC BL 0x33DD2A8
	0x01E39AB0 LDR X8, [X20]
	0x01E39AB4 MOV X20, X0
	0x01E39AB8 LDR W9, [X8 + 0xE0]
	0x01E39ABC CBNZ W9, 0x1E39AC8
	0x01E39AC0 MOV X0, X8
	0x01E39AC4 BL 0x1C16DFC
	0x01E39AC8 MOV X0, X31
	0x01E39ACC BL 0x33FA184
	0x01E39AD0 LDR X8, [X19]
	0x01E39AD4 MOV X21, X0
	0x01E39AD8 MOV X0, X8
	0x01E39ADC BL 0x1C16F10
	0x01E39AE0 MOVZ W2, 0x8
	0x01E39AE4 ORR W3, W31, 0x80008
	0x01E39AE8 MOV X1, X20
	0x01E39AEC MOV X4, X21
	0x01E39AF0 MOV X5, X31
	0x01E39AF4 MOV X19, X0
	0x01E39AF8 BL 0x33F94A4
	0x01E39AFC LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x25A0000
	007 Move X21, 0x22BD000
	008 Move W8, [X22+3833]
	009 Move X21, [X21+368]
	010 Move W19, W1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22BD000
	017 Move X0, [X0+368]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3833], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move W0, W20
	027 Move X1, X31
	028 Call Char.IsHighSurrogate, X0
	029 And W8, W20, 0xFFFF
	030 Move W10, W8
	031 ShiftRight W10, 22
	032 And W10, W10, 0x1FFFFF
	033 Move W9, 0x2400
	034 Add W10, W10, W19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 NotImplemented "Instruction MOVK not yet implemented."
	040 Add W9, W10, W9
	041 And W31, W0, 1
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 Move X30, [X31+48]
	044 Return X0

