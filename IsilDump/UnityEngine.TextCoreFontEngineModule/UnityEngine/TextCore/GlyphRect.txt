Type: UnityEngine.TextCore.GlyphRect

Method: System.Int32 get_x()

Disassembly:
	0x03C9D090 ADD W23, W22, W21
	0x03C9D094 CMP W23, W10

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Int32 get_y()

Disassembly:
	0x03C9D098 B.GT 0x3C9D0C8
	0x03C9D09C LDR W10, [X8 + 0xE0]

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Int32 get_width()

Disassembly:
	0x03C9D0A0 CBNZ W10, 0x3C9D0B4
	0x03C9D0A4 MOV X0, X8

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Int32 get_height()

Disassembly:
	0x03C9D0A8 BL 0x1C16DFC
	0x03C9D0AC LDR X8, [X29]

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: UnityEngine.TextCore.GlyphRect get_zero()

Disassembly:
	0x03C9D0B0 LDR X9, [X8 + 0xB8]
	0x03C9D0B4 LDR X9, [X9 + 0x28]
	0x03C9D0B8 CBZ X9, 0x3C9D48C
	0x03C9D0BC LDR W9, [X9 + 0x18]
	0x03C9D0C0 CMP W23, W9
	0x03C9D0C4 B.LE 0x3C9D12C
	0x03C9D0C8 ADRP X24, 0x4C4000
	0x03C9D0CC LDR X24, [X24 + 0x200]
	0x03C9D0D0 ADD W0, W23, 0x1
	0x03C9D0D4 MOV X1, X31
	0x03C9D0D8 BL 0x3C2B340
	0x03C9D0DC LDR X8, [X24]
	0x03C9D0E0 MOV W27, W0
	0x03C9D0E4 MOV W1, W27
	0x03C9D0E8 MOV X0, X8
	0x03C9D0EC BL 0x1C16D6C
	0x03C9D0F0 LDR X8, [X29]
	0x03C9D0F4 MOV X28, X0
	0x03C9D0F8 LDR W9, [X8 + 0xE0]
	0x03C9D0FC CBNZ W9, 0x3C9D10C
	0x03C9D100 MOV X0, X8
	0x03C9D104 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x74B000
	005 Move X19, 0x47F000
	006 Move W8, [X20+474]
	007 Move X19, [X19+1544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x47F000
	013 Move X0, [X0+1544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+474], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X1, [X8+8]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void .ctor(System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)

Disassembly:
	0x03C9D108 LDR X8, [X29]
	0x03C9D10C LDR X8, [X8 + 0xB8]
	0x03C9D110 MOV W1, W27

ISIL:
	001 Move [X0], W1
	002 Move [X0+4], W2
	003 Move [X0+8], W3
	004 Move [X0+12], W4
	005 Return 

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C9D114 STR X28, [X8 + 0x20]
	0x03C9D118 LDR X0, [X24]
	0x03C9D11C BL 0x1C16D6C
	0x03C9D120 LDR X8, [X29]
	0x03C9D124 LDR X9, [X8 + 0xB8]
	0x03C9D128 STR X0, [X9 + 0x28]
	0x03C9D12C CMP W21, W22
	0x03C9D130 CSEL W9, W21, W22, GT
	0x03C9D134 CMP W9, 0x1
	0x03C9D138 B.LT 0x3C9D1FC
	0x03C9D13C ADRP X28, 0x4C4000
	0x03C9D140 LDR X28, [X28 + 0x210]
	0x03C9D144 MOV X27, X31
	0x03C9D148 MOV W23, W9
	0x03C9D14C MOVZ W24, 0x20
	0x03C9D150 CMP X27, X21
	0x03C9D154 B.GE 0x3C9D19C
	0x03C9D158 LDR X0, [X29]
	0x03C9D15C LDR W8, [X0 + 0xE0]
	0x03C9D160 CBNZ W8, 0x3C9D16C
	0x03C9D164 BL 0x1C16DFC
	0x03C9D168 LDR X0, [X29]
	0x03C9D16C LDR X8, [X0 + 0xB8]
	0x03C9D170 LDR X2, [X28]
	0x03C9D174 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x74B000
	007 Move X20, 0x47F000
	008 Move W8, [X21+475]
	009 Move X20, [X20+1544]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x47F000
	016 Move X0, [X0+1544]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+475], W8
	020 Move V0, [X19]
	021 Move X0, [X20]
	022 Add X1, X31, 0
	023 Move [X31], V0
	024 Call 0x1C17E04
	025 Move X1, X31
	026 Call ValueType.GetHashCode, X0
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C9D178 MOV W1, W27
	0x03C9D17C LDR X25, [X8 + 0x20]
	0x03C9D180 BL 0x2FC5398
	0x03C9D184 CBZ X25, 0x3C9D48C
	0x03C9D188 LDR W8, [X25 + 0x18]
	0x03C9D18C CMP X27, X8
	0x03C9D190 B.CS 0x3C9D490
	0x03C9D194 ADD X8, X25, X24
	0x03C9D198 STP X0, X1, [X8]
	0x03C9D19C CMP X27, X22
	0x03C9D1A0 B.GE 0x3C9D1E8
	0x03C9D1A4 LDR X0, [X29]
	0x03C9D1A8 LDR W8, [X0 + 0xE0]
	0x03C9D1AC CBNZ W8, 0x3C9D1B8
	0x03C9D1B0 BL 0x1C16DFC
	0x03C9D1B4 LDR X0, [X29]
	0x03C9D1B8 LDR X8, [X0 + 0xB8]
	0x03C9D1BC LDR X2, [X28]
	0x03C9D1C0 MOV X0, X19
	0x03C9D1C4 MOV W1, W27
	0x03C9D1C8 LDR X25, [X8 + 0x28]
	0x03C9D1CC BL 0x2FC5398
	0x03C9D1D0 CBZ X25, 0x3C9D48C
	0x03C9D1D4 LDR W8, [X25 + 0x18]
	0x03C9D1D8 CMP X27, X8
	0x03C9D1DC B.CS 0x3C9D490
	0x03C9D1E0 ADD X8, X25, X24
	0x03C9D1E4 STP X0, X1, [X8]
	0x03C9D1E8 ADD X27, X27, 0x1
	0x03C9D1EC CMP X23, X27

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0x74B000
	008 Move X21, 0x47F000
	009 Move W8, [X22+476]
	010 Move X21, [X21+1544]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x47F000
	018 Move X0, [X0+1544]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+476], W8
	022 Move V0, [X20]
	023 Move X0, [X21]
	024 Add X1, X31, 0
	025 Move [X31], V0
	026 Call 0x1C17E04
	027 Move X1, X19
	028 Move X2, X31
	029 Call ValueType.Equals, X0, X1
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X30, [X31+16]
	035 And W0, W0, 1
	036 Add X31, X31, 64
	037 Return X0

Method: System.Boolean Equals(UnityEngine.TextCore.GlyphRect other)

Disassembly:
	0x03C9D1F0 ADD X24, X24, 0x10
	0x03C9D1F4 B.NE 0x3C9D150
	0x03C9D1F8 LDR X8, [X29]
	0x03C9D1FC LDR W9, [X8 + 0xE0]
	0x03C9D200 CBNZ W9, 0x3C9D210
	0x03C9D204 MOV X0, X8
	0x03C9D208 BL 0x1C16DFC
	0x03C9D20C LDR X8, [X29]
	0x03C9D210 LDR X9, [X8 + 0xB8]
	0x03C9D214 ADRP X21, 0x74A000
	0x03C9D218 LDR X22, [X31 + 0x38]
	0x03C9D21C LDR X8, [X21 + 0x288]
	0x03C9D220 LDP X28, X27, [X9 + 0x20]
	0x03C9D224 CBNZ X8, 0x3C9D23C
	0x03C9D228 ADRP X0, 0xFFFFFFFFFCE5A000
	0x03C9D22C ADD X0, X0, 0xB14
	0x03C9D230 BL 0x1C16CB8
	0x03C9D234 MOV X8, X0
	0x03C9D238 STR X0, [X21 + 0x288]
	0x03C9D23C LDP W0, W1, [X31 + 0x2C]
	0x03C9D240 LDR W2, [X31 + 0x34]
	0x03C9D244 ADD X9, X31, 0x70
	0x03C9D248 ADD X4, X31, 0xEC
	0x03C9D24C ADD X6, X31, 0xE8
	0x03C9D250 MOV X3, X28
	0x03C9D254 MOV X5, X27
	0x03C9D258 MOV W7, W26
	0x03C9D25C STP X22, X9, [X31]
	0x03C9D260 BLR X8
	0x03C9D264 MOV W22, W0
	0x03C9D268 TBZ X0, 0x0, 0x3C9D45C
	0x03C9D26C ADRP X9, 0x4BB000
	0x03C9D270 LDR W21, [X31 + 0x70]
	0x03C9D274 LDUR V0, [X31 + 0x74]
	0x03C9D278 LDUR V1, [X31 + 0x84]
	0x03C9D27C LDR W8, [X31 + 0x94]
	0x03C9D280 LDR V8, [X31 + 0x98]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0x74B000
	009 Move X22, 0x47F000
	010 Move W8, [X23+477]
	011 Move X22, [X22+1544]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x47F000
	020 Move X0, [X0+1544]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+477], W8
	024 Move V0, [X21]
	025 Move X0, [X22]
	026 Add X1, X31, 16
	027 Move [X31+1], V0
	028 Call 0x1C17E04
	029 Move X21, X0
	030 Move X0, [X22]
	031 Add X1, X31, 0
	032 Move [X31], X20
	033 Move [X31+8], X19
	034 Call 0x1C17E04
	035 Move X1, X0
	036 Move X0, X21
	037 Move X2, X31
	038 Call ValueType.Equals, X0, X1
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X22, [X31+48]
	042 Move X21, [X31+56]
	043 Move X30, [X31+32]
	044 Move X23, [X31+40]
	045 And W0, W0, 1
	046 Add X31, X31, 80
	047 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03C9D284 LDR W24, [X31 + 0x9C]
	0x03C9D288 LDR X9, [X9 + 0xC08]
	0x03C9D28C STP V0, V1, [X31 + 0x40]
	0x03C9D290 STR W8, [X31 + 0x60]
	0x03C9D294 LDR X0, [X9]
	0x03C9D298 BL 0x1C16F10
	0x03C9D29C MOV X1, X31
	0x03C9D2A0 MOV X23, X0
	0x03C9D2A4 BL 0x33BDD8C
	0x03C9D2A8 STR W21, [X23 + 0x10]
	0x03C9D2AC LDR W8, [X31 + 0x50]
	0x03C9D2B0 LDR V0, [X31 + 0x4]
	0x03C9D2B4 STR W8, [X23 + 0x24]
	0x03C9D2B8 STUR V0, [X23 + 0x14]
	0x03C9D2BC LDR W8, [X31 + 0x60]
	0x03C9D2C0 LDP V1, V0, [X31 + 0x40]
	0x03C9D2C4 STR W8, [X31 + 0xD0]
	0x03C9D2C8 STP V1, V0, [X31 + 0xB0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x74B000
	005 Move X20, 0x47F000
	006 Move W8, [X19+478]
	007 Move X20, [X20+1544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x47F000
	013 Move X0, [X0+1544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+478], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move [X8], X31
	022 Move [X8+8], X31
	023 Move X30, [X31+32]
	024 Return 

