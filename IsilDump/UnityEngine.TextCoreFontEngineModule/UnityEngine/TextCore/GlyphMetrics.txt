Type: UnityEngine.TextCore.GlyphMetrics

Method: System.Single get_width()

Disassembly:
	0x03C9D2CC LDUR V0, [X31 + 0xC4]
	0x03C9D2D0 LDR X8, [X31 + 0x20]

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Single get_height()

Disassembly:
	0x03C9D2D4 STR S8, [X23 + 0x38]
	0x03C9D2D8 STR W24, [X23 + 0x3C]

ISIL:
	001 Move V0, [X0+4]
	002 Return V0

Method: System.Single get_horizontalBearingX()

Disassembly:
	0x03C9D2DC STUR V0, [X23 + 0x28]
	0x03C9D2E0 STR X23, [X8]

ISIL:
	001 Move V0, [X0+8]
	002 Return V0

Method: System.Single get_horizontalBearingY()

Disassembly:
	0x03C9D2E4 LDR W8, [X20 + 0x1C]
	0x03C9D2E8 ADD W8, W8, 0x1

ISIL:
	001 Move V0, [X0+12]
	002 Return V0

Method: System.Single get_horizontalAdvance()

Disassembly:
	0x03C9D2EC STP W31, W8, [X20 + 0x18]
	0x03C9D2F0 LDR W8, [X19 + 0x1C]

ISIL:
	001 Move V0, [X0+16]
	002 Return V0

Method: System.Void .ctor(System.Single width, System.Single height, System.Single bearingX, System.Single bearingY, System.Single advance)

Disassembly:
	0x03C9D2F4 ADD W8, W8, 0x1
	0x03C9D2F8 STP W31, W8, [X19 + 0x18]
	0x03C9D2FC LDP W9, W8, [X31 + 0xE8]
	0x03C9D300 CMP W8, W9

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Move [X0+16], S4
	006 Return 

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C9D304 CSEL W9, W8, W9, GT
	0x03C9D308 CMP W9, 0x1
	0x03C9D30C B.LT 0x3C9D464
	0x03C9D310 ADRP X25, 0x4BB000
	0x03C9D314 LDR X25, [X25 + 0xBC8]
	0x03C9D318 MOV W9, W9
	0x03C9D31C MOV X21, X31
	0x03C9D320 MOVZ W23, 0x20
	0x03C9D324 SUB X24, X9, 0x1
	0x03C9D328 CMP X21, W8, SXTW
	0x03C9D32C B.GE 0x3C9D3B4
	0x03C9D330 LDR X0, [X29]
	0x03C9D334 LDR W8, [X0 + 0xE0]
	0x03C9D338 CBNZ W8, 0x3C9D344
	0x03C9D33C BL 0x1C16DFC
	0x03C9D340 LDR X0, [X29]
	0x03C9D344 LDR X8, [X0 + 0xB8]
	0x03C9D348 LDR X8, [X8 + 0x20]
	0x03C9D34C CBZ X8, 0x3C9D48C
	0x03C9D350 LDR W9, [X8 + 0x18]
	0x03C9D354 CMP X21, X9
	0x03C9D358 B.CS 0x3C9D490
	0x03C9D35C ADD X8, X8, X23
	0x03C9D360 LDR W10, [X20 + 0x1C]
	0x03C9D364 LDP X1, X2, [X8]
	0x03C9D368 LDR X8, [X20 + 0x10]
	0x03C9D36C LDR X9, [X25]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x74B000
	007 Move X20, 0x4C5000
	008 Move W8, [X21+479]
	009 Move X20, [X20+504]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4C5000
	016 Move X0, [X0+504]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+479], W8
	020 Move W8, [X19+16]
	021 Move V0, [X19]
	022 Move X0, [X20]
	023 Add X1, X31, 0
	024 Move [X31+16], W8
	025 Move [X31], V0
	026 Call 0x1C17E04
	027 Move X1, X31
	028 Call ValueType.GetHashCode, X0
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Add X31, X31, 64
	034 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C9D370 ADD W10, W10, 0x1
	0x03C9D374 STR W10, [X20 + 0x1C]
	0x03C9D378 CBZ X8, 0x3C9D48C
	0x03C9D37C LDRSW X10, [X20 + 0x18]
	0x03C9D380 LDR W11, [X8 + 0x18]
	0x03C9D384 CMP W10, W11
	0x03C9D388 B.CS 0x3C9D3A0
	0x03C9D38C ADD W9, W10, 0x1
	0x03C9D390 ADD X8, X8, X10, 0x4, LSL
	0x03C9D394 STR W9, [X20 + 0x18]
	0x03C9D398 STP X1, X2, [X8 + 0x20]
	0x03C9D39C B 0x3C9D3B4
	0x03C9D3A0 LDR X8, [X9 + 0x20]
	0x03C9D3A4 MOV X0, X20
	0x03C9D3A8 LDR X8, [X8 + 0xC0]
	0x03C9D3AC LDR X3, [X8 + 0x70]
	0x03C9D3B0 BL 0x2FC569C
	0x03C9D3B4 LDRSW X8, [X31 + 0xE8]
	0x03C9D3B8 CMP X21, X8
	0x03C9D3BC B.GE 0x3C9D444
	0x03C9D3C0 LDR X0, [X29]
	0x03C9D3C4 LDR W8, [X0 + 0xE0]
	0x03C9D3C8 CBNZ W8, 0x3C9D3D4
	0x03C9D3CC BL 0x1C16DFC
	0x03C9D3D0 LDR X0, [X29]
	0x03C9D3D4 LDR X8, [X0 + 0xB8]
	0x03C9D3D8 LDR X8, [X8 + 0x28]
	0x03C9D3DC CBZ X8, 0x3C9D48C
	0x03C9D3E0 LDR W9, [X8 + 0x18]
	0x03C9D3E4 CMP X21, X9
	0x03C9D3E8 B.CS 0x3C9D490
	0x03C9D3EC ADD X8, X8, X23

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x74B000
	008 Move X21, 0x4C5000
	009 Move W8, [X22+480]
	010 Move X21, [X21+504]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x4C5000
	018 Move X0, [X0+504]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+480], W8
	022 Move W8, [X20+16]
	023 Move V0, [X20]
	024 Move X0, [X21]
	025 Add X1, X31, 0
	026 Move [X31+16], W8
	027 Move [X31], V0
	028 Call 0x1C17E04
	029 Move X1, X19
	030 Move X2, X31
	031 Call ValueType.Equals, X0, X1
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X22, [X31+48]
	035 Move X21, [X31+56]
	036 Move X30, [X31+32]
	037 And W0, W0, 1
	038 Add X31, X31, 80
	039 Return X0

Method: System.Boolean Equals(UnityEngine.TextCore.GlyphMetrics other)

Disassembly:
	0x03C9D3F0 LDR W10, [X19 + 0x1C]
	0x03C9D3F4 LDP X1, X2, [X8]
	0x03C9D3F8 LDR X8, [X19 + 0x10]
	0x03C9D3FC LDR X9, [X25]
	0x03C9D400 ADD W10, W10, 0x1
	0x03C9D404 STR W10, [X19 + 0x1C]
	0x03C9D408 CBZ X8, 0x3C9D48C
	0x03C9D40C LDRSW X10, [X19 + 0x18]
	0x03C9D410 LDR W11, [X8 + 0x18]
	0x03C9D414 CMP W10, W11
	0x03C9D418 B.CS 0x3C9D430
	0x03C9D41C ADD W9, W10, 0x1
	0x03C9D420 ADD X8, X8, X10, 0x4, LSL
	0x03C9D424 STR W9, [X19 + 0x18]
	0x03C9D428 STP X1, X2, [X8 + 0x20]
	0x03C9D42C B 0x3C9D444
	0x03C9D430 LDR X8, [X9 + 0x20]
	0x03C9D434 MOV X0, X19
	0x03C9D438 LDR X8, [X8 + 0xC0]
	0x03C9D43C LDR X3, [X8 + 0x70]
	0x03C9D440 BL 0x2FC569C
	0x03C9D444 CMP X24, X21
	0x03C9D448 B.EQ 0x3C9D464
	0x03C9D44C LDR W8, [X31 + 0xEC]
	0x03C9D450 ADD X21, X21, 0x1
	0x03C9D454 ADD X23, X23, 0x10
	0x03C9D458 B 0x3C9D328
	0x03C9D45C LDR X8, [X31 + 0x20]
	0x03C9D460 STR X31, [X8]
	0x03C9D464 AND W0, W22, 0x1
	0x03C9D468 LDP X20, X19, [X31 + 0x140]
	0x03C9D46C LDP X22, X21, [X31 + 0x130]
	0x03C9D470 LDP X24, X23, [X31 + 0x120]
	0x03C9D474 LDP X26, X25, [X31 + 0x110]
	0x03C9D478 LDP X28, X27, [X31 + 0x100]
	0x03C9D47C LDP X29, X30, [X31 + 0xF0]
	0x03C9D480 LDR V8, [X31 + 0xE0]
	0x03C9D484 ADD X31, X31, 0x150
	0x03C9D488 RET
	0x03C9D48C BL 0x1C16F20
	0x03C9D490 BL 0x1C16F28

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0x74B000
	008 Move X21, 0x4C5000
	009 Move W8, [X22+481]
	010 Move X21, [X21+504]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x4C5000
	018 Move X0, [X0+504]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+481], W8
	022 Move W8, [X20+16]
	023 Move V0, [X20]
	024 Move X0, [X21]
	025 Add X1, X31, 32
	026 Move [X31+48], W8
	027 Move [X31+2], V0
	028 Call 0x1C17E04
	029 Move X20, X0
	030 Move W8, [X19+16]
	031 Move V0, [X19]
	032 Move X0, [X21]
	033 Add X1, X31, 0
	034 Move [X31+16], W8
	035 Move [X31], V0
	036 Call 0x1C17E04
	037 Move X1, X0
	038 Move X0, X20
	039 Move X2, X31
	040 Call ValueType.Equals, X0, X1
	041 Move X20, [X31+96]
	042 Move X19, [X31+104]
	043 Move X22, [X31+80]
	044 Move X21, [X31+88]
	045 Move X30, [X31+64]
	046 And W0, W0, 1
	047 Add X31, X31, 112
	048 Return X0

