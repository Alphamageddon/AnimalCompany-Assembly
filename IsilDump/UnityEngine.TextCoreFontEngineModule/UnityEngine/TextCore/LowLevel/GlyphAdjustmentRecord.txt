Type: UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord

Method: System.UInt32 get_glyphIndex()

Disassembly:
	0x03C9F52C LDR X0, [X27]
	0x03C9F530 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: UnityEngine.TextCore.LowLevel.GlyphValueRecord get_glyphValueRecord()

Disassembly:
	0x03C9F534 CBNZ W8, 0x3C9F53C
	0x03C9F538 BL 0x1C16DFC
	0x03C9F53C MOVZ W8, 0x1

ISIL:
	001 Move S0, [X0+4]
	002 Move S1, [X0+8]
	003 Move S2, [X0+12]
	004 Move S3, [X0+16]
	005 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C9F540 MOVZ W7, 0x1
	0x03C9F544 MOV X0, X25
	0x03C9F548 MOV W1, W24
	0x03C9F54C MOV W2, W23
	0x03C9F550 MOV W3, W22
	0x03C9F554 MOV W4, W21
	0x03C9F558 MOV W5, W20
	0x03C9F55C MOV W6, W19
	0x03C9F560 STRB W8, [X31]
	0x03C9F564 BL 0x3C9F35C
	0x03C9F568 LDP X20, X19, [X31 + 0x50]
	0x03C9F56C LDP X22, X21, [X31 + 0x40]
	0x03C9F570 LDP X24, X23, [X31 + 0x30]
	0x03C9F574 LDP X26, X25, [X31 + 0x20]
	0x03C9F578 LDP X30, X27, [X31 + 0x10]
	0x03C9F57C ADD X31, X31, 0x60
	0x03C9F580 RET
	0x03C9F584 SUB X31, X31, 0x120
	0x03C9F588 STP X29, X30, [X31 + 0xC0]
	0x03C9F58C STP X28, X27, [X31 + 0xD0]
	0x03C9F590 STP X26, X25, [X31 + 0xE0]
	0x03C9F594 STP X24, X23, [X31 + 0xF0]
	0x03C9F598 STP X22, X21, [X31 + 0x100]
	0x03C9F59C STP X20, X19, [X31 + 0x110]
	0x03C9F5A0 ADRP X19, 0x748000
	0x03C9F5A4 ADRP X27, 0x4C2000
	0x03C9F5A8 LDRB W8, [X19 + 0x2D3]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x749000
	007 Move X20, 0x4C3000
	008 Move W8, [X21+708]
	009 Move X20, [X20+576]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4C3000
	016 Move X0, [X0+576]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+708], W8
	020 Move W8, [X19+16]
	021 Move V0, [X19]
	022 Move X0, [X20]
	023 Add X1, X31, 0
	024 Move [X31+16], W8
	025 Move [X31], V0
	026 Call 0x1C17E04
	027 Move X1, X31
	028 Call ValueType.GetHashCode, X0
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Add X31, X31, 64
	034 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C9F5AC LDR X27, [X27 + 0x288]
	0x03C9F5B0 MOV W24, W6
	0x03C9F5B4 MOV W25, W5
	0x03C9F5B8 MOV W20, W4
	0x03C9F5BC MOV W21, W3
	0x03C9F5C0 MOV W23, W2
	0x03C9F5C4 MOV W22, W1
	0x03C9F5C8 MOV X26, X0
	0x03C9F5CC TBNZ X8, 0x0, 0x3C9F65C
	0x03C9F5D0 ADRP X0, 0x4B9000
	0x03C9F5D4 LDR X0, [X0 + 0xBC0]
	0x03C9F5D8 BL 0x1C16CF4
	0x03C9F5DC ADRP X0, 0x4B9000
	0x03C9F5E0 LDR X0, [X0 + 0xBC8]
	0x03C9F5E4 BL 0x1C16CF4
	0x03C9F5E8 ADRP X0, 0x4B9000
	0x03C9F5EC LDR X0, [X0 + 0xBD0]
	0x03C9F5F0 BL 0x1C16CF4
	0x03C9F5F4 ADRP X0, 0x4B9000
	0x03C9F5F8 LDR X0, [X0 + 0xBD8]
	0x03C9F5FC BL 0x1C16CF4
	0x03C9F600 ADRP X0, 0x458000
	0x03C9F604 LDR X0, [X0 + 0xCA0]
	0x03C9F608 BL 0x1C16CF4
	0x03C9F60C ADRP X0, 0x454000
	0x03C9F610 LDR X0, [X0 + 0x598]
	0x03C9F614 BL 0x1C16CF4
	0x03C9F618 ADRP X0, 0x4C2000
	0x03C9F61C LDR X0, [X0 + 0x288]
	0x03C9F620 BL 0x1C16CF4
	0x03C9F624 ADRP X0, 0x4C2000
	0x03C9F628 LDR X0, [X0 + 0x268]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x749000
	008 Move X21, 0x4C3000
	009 Move W8, [X22+709]
	010 Move X21, [X21+576]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x4C3000
	018 Move X0, [X0+576]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+709], W8
	022 Move W8, [X20+16]
	023 Move V0, [X20]
	024 Move X0, [X21]
	025 Add X1, X31, 0
	026 Move [X31+16], W8
	027 Move [X31], V0
	028 Call 0x1C17E04
	029 Move X1, X19
	030 Move X2, X31
	031 Call ValueType.Equals, X0, X1
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X22, [X31+48]
	035 Move X21, [X31+56]
	036 Move X30, [X31+32]
	037 And W0, W0, 1
	038 Add X31, X31, 80
	039 Return X0

Method: System.Boolean Equals(UnityEngine.TextCore.LowLevel.GlyphAdjustmentRecord other)

Disassembly:
	0x03C9F62C BL 0x1C16CF4
	0x03C9F630 ADRP X0, 0x4B9000
	0x03C9F634 LDR X0, [X0 + 0xBE8]
	0x03C9F638 BL 0x1C16CF4
	0x03C9F63C ADRP X0, 0x47E000
	0x03C9F640 LDR X0, [X0 + 0x250]
	0x03C9F644 BL 0x1C16CF4
	0x03C9F648 ADRP X0, 0x4B9000
	0x03C9F64C LDR X0, [X0 + 0xBF0]
	0x03C9F650 BL 0x1C16CF4
	0x03C9F654 MOVZ W8, 0x1
	0x03C9F658 STRB W8, [X19 + 0x2D3]
	0x03C9F65C LDR X0, [X27]
	0x03C9F660 BL 0x22537A0
	0x03C9F664 CBZ X0, 0x3C9F9F0
	0x03C9F668 ADRP X8, 0x4B9000
	0x03C9F66C LDR X8, [X8 + 0xBF0]
	0x03C9F670 ADRP X9, 0x4B9000
	0x03C9F674 MOV X19, X0
	0x03C9F678 LDR X8, [X8]
	0x03C9F67C LDR X9, [X9 + 0xBC0]
	0x03C9F680 STR X8, [X0 + 0x18]
	0x03C9F684 LDR X0, [X9]
	0x03C9F688 LDR W8, [X0 + 0xE0]
	0x03C9F68C CBNZ W8, 0x3C9F694
	0x03C9F690 BL 0x1C16DFC
	0x03C9F694 ADRP X28, 0x4B9000
	0x03C9F698 ADRP X27, 0x47E000
	0x03C9F69C LDR X28, [X28 + 0xBE8]
	0x03C9F6A0 LDR X27, [X27 + 0x250]
	0x03C9F6A4 ADD X8, X31, 0x60
	0x03C9F6A8 MOV X0, X31
	0x03C9F6AC BL 0x3C9CAFC
	0x03C9F6B0 ADD X0, X31, 0x0
	0x03C9F6B4 ADD X1, X31, 0x60
	0x03C9F6B8 MOVZ W2, 0x60
	0x03C9F6BC BL 0x3EB1AC0
	0x03C9F6C0 ADD X0, X19, 0xB0
	0x03C9F6C4 ADD X1, X31, 0x0
	0x03C9F6C8 MOVZ W2, 0x60
	0x03C9F6CC BL 0x3EB1AC0

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0x749000
	008 Move X21, 0x4C3000
	009 Move W8, [X22+710]
	010 Move X21, [X21+576]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x4C3000
	018 Move X0, [X0+576]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+710], W8
	022 Move W8, [X20+16]
	023 Move V0, [X20]
	024 Move X0, [X21]
	025 Add X1, X31, 32
	026 Move [X31+48], W8
	027 Move [X31+2], V0
	028 Call 0x1C17E04
	029 Move X20, X0
	030 Move W8, [X19+16]
	031 Move V0, [X19]
	032 Move X0, [X21]
	033 Add X1, X31, 0
	034 Move [X31+16], W8
	035 Move [X31], V0
	036 Call 0x1C17E04
	037 Move X1, X0
	038 Move X0, X20
	039 Move X2, X31
	040 Call ValueType.Equals, X0, X1
	041 Move X20, [X31+96]
	042 Move X19, [X31+104]
	043 Move X22, [X31+80]
	044 Move X21, [X31+88]
	045 Move X30, [X31+64]
	046 And W0, W0, 1
	047 Add X31, X31, 112
	048 Return X0

