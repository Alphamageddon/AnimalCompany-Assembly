Type: UnityEngine.TextCore.LowLevel.GlyphValueRecord

Method: System.Single get_xPlacement()

Disassembly:
	0x03C9F364 STP X26, X25, [X31 + 0x20]
	0x03C9F368 STP X24, X23, [X31 + 0x30]

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Void set_xPlacement(System.Single value)

Disassembly:
	0x03C9F36C STP X22, X21, [X31 + 0x40]
	0x03C9F370 STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X0], S0
	002 Return 

Method: System.Single get_yPlacement()

Disassembly:
	0x03C9F374 ADRP X27, 0x748000
	0x03C9F378 ADRP X28, 0x4B9000

ISIL:
	001 Move V0, [X0+4]
	002 Return V0

Method: System.Void set_yPlacement(System.Single value)

Disassembly:
	0x03C9F37C LDRB W8, [X27 + 0x2CF]
	0x03C9F380 LDR X28, [X28 + 0xBC0]

ISIL:
	001 Move [X0+4], S0
	002 Return 

Method: System.Single get_xAdvance()

Disassembly:
	0x03C9F384 MOV W20, W7
	0x03C9F388 MOV W21, W6

ISIL:
	001 Move V0, [X0+8]
	002 Return V0

Method: System.Single get_yAdvance()

Disassembly:
	0x03C9F38C MOV W22, W5
	0x03C9F390 MOV W23, W4

ISIL:
	001 Move V0, [X0+12]
	002 Return V0

Method: UnityEngine.TextCore.LowLevel.GlyphValueRecord op_Addition(UnityEngine.TextCore.LowLevel.GlyphValueRecord a, UnityEngine.TextCore.LowLevel.GlyphValueRecord b)

Disassembly:
	0x03C9F394 MOV W24, W3
	0x03C9F398 MOV W26, W2
	0x03C9F39C MOV W25, W1
	0x03C9F3A0 MOV X19, X0
	0x03C9F3A4 TBNZ X8, 0x0, 0x3C9F3EC

ISIL:
	001 Add S0, S0, S4
	002 Add S1, S1, S5
	003 Add S2, S2, S6
	004 Add S3, S3, S7
	005 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C9F3A8 ADRP X0, 0x454000
	0x03C9F3AC LDR X0, [X0 + 0xA28]
	0x03C9F3B0 BL 0x1C16CF4
	0x03C9F3B4 ADRP X0, 0x4C2000
	0x03C9F3B8 LDR X0, [X0 + 0x258]
	0x03C9F3BC BL 0x1C16CF4
	0x03C9F3C0 ADRP X0, 0x4B9000
	0x03C9F3C4 LDR X0, [X0 + 0xBC0]
	0x03C9F3C8 BL 0x1C16CF4
	0x03C9F3CC ADRP X0, 0x47C000
	0x03C9F3D0 LDR X0, [X0 + 0x6F8]
	0x03C9F3D4 BL 0x1C16CF4
	0x03C9F3D8 ADRP X0, 0x4C2000
	0x03C9F3DC LDR X0, [X0 + 0x280]
	0x03C9F3E0 BL 0x1C16CF4
	0x03C9F3E4 MOVZ W8, 0x1
	0x03C9F3E8 STRB W8, [X27 + 0x2CF]
	0x03C9F3EC LDR X0, [X28]
	0x03C9F3F0 LDR W8, [X0 + 0xE0]
	0x03C9F3F4 CBNZ W8, 0x3C9F3FC
	0x03C9F3F8 BL 0x1C16DFC
	0x03C9F3FC MOV X0, X19
	0x03C9F400 MOV W1, W26
	0x03C9F404 MOV W2, W25
	0x03C9F408 MOV X3, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x749000
	007 Move X20, 0x4C3000
	008 Move W8, [X21+705]
	009 Move X20, [X20+568]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4C3000
	016 Move X0, [X0+568]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+705], W8
	020 Move V0, [X19]
	021 Move X0, [X20]
	022 Add X1, X31, 0
	023 Move [X31], V0
	024 Call 0x1C17E04
	025 Move X1, X31
	026 Call ValueType.GetHashCode, X0
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C9F40C BL 0x3C9C6B4
	0x03C9F410 CBZ W0, 0x3C9F46C
	0x03C9F414 ADRP X8, 0x4C2000
	0x03C9F418 ADRP X9, 0x47C000
	0x03C9F41C LDR X8, [X8 + 0x280]
	0x03C9F420 LDR X9, [X9 + 0x6F8]
	0x03C9F424 ADRP X20, 0x454000
	0x03C9F428 MOV X1, X19
	0x03C9F42C LDR X0, [X8]
	0x03C9F430 LDR X2, [X9]
	0x03C9F434 LDR X20, [X20 + 0xA28]
	0x03C9F438 MOV X3, X31
	0x03C9F43C BL 0x32274B8
	0x03C9F440 LDR X8, [X20]
	0x03C9F444 MOV X19, X0
	0x03C9F448 LDR W9, [X8 + 0xE0]
	0x03C9F44C CBNZ W9, 0x3C9F458
	0x03C9F450 MOV X0, X8
	0x03C9F454 BL 0x1C16DFC
	0x03C9F458 MOV X0, X19
	0x03C9F45C MOV X1, X31
	0x03C9F460 BL 0x3C06048
	0x03C9F464 MOV X0, X31
	0x03C9F468 B 0x3C9F4B0
	0x03C9F46C ADRP X8, 0x4C2000
	0x03C9F470 LDR X8, [X8 + 0x258]
	0x03C9F474 LDRB W25, [X31 + 0x60]
	0x03C9F478 LDR X0, [X8]
	0x03C9F47C LDR W8, [X0 + 0xE0]
	0x03C9F480 CBNZ W8, 0x3C9F488

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0x749000
	008 Move X21, 0x4C3000
	009 Move W8, [X22+706]
	010 Move X21, [X21+568]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x4C3000
	018 Move X0, [X0+568]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+706], W8
	022 Move V0, [X20]
	023 Move X0, [X21]
	024 Add X1, X31, 0
	025 Move [X31], V0
	026 Call 0x1C17E04
	027 Move X1, X19
	028 Move X2, X31
	029 Call ValueType.Equals, X0, X1
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X30, [X31+16]
	035 And W0, W0, 1
	036 Add X31, X31, 64
	037 Return X0

Method: System.Boolean Equals(UnityEngine.TextCore.LowLevel.GlyphValueRecord other)

Disassembly:
	0x03C9F484 BL 0x1C16DFC
	0x03C9F488 AND W6, W25, 0x1
	0x03C9F48C MOV X0, X31
	0x03C9F490 MOV W1, W24
	0x03C9F494 MOV W2, W23
	0x03C9F498 MOV W3, W22
	0x03C9F49C MOV W4, W21
	0x03C9F4A0 MOV W5, W20
	0x03C9F4A4 BL 0x3C9F584
	0x03C9F4A8 CBZ X0, 0x3C9F4CC
	0x03C9F4AC STR X19, [X0 + 0xA0]
	0x03C9F4B0 LDP X20, X19, [X31 + 0x50]
	0x03C9F4B4 LDP X22, X21, [X31 + 0x40]
	0x03C9F4B8 LDP X24, X23, [X31 + 0x30]
	0x03C9F4BC LDP X26, X25, [X31 + 0x20]
	0x03C9F4C0 LDP X28, X27, [X31 + 0x10]
	0x03C9F4C4 LDR X30, [X31], #0x60
	0x03C9F4C8 RET
	0x03C9F4CC BL 0x1C16F20
	0x03C9F4D0 SUB X31, X31, 0x60
	0x03C9F4D4 STP X30, X27, [X31 + 0x10]
	0x03C9F4D8 STP X26, X25, [X31 + 0x20]
	0x03C9F4DC STP X24, X23, [X31 + 0x30]
	0x03C9F4E0 STP X22, X21, [X31 + 0x40]
	0x03C9F4E4 STP X20, X19, [X31 + 0x50]
	0x03C9F4E8 ADRP X26, 0x748000
	0x03C9F4EC ADRP X27, 0x4C2000
	0x03C9F4F0 LDRB W8, [X26 + 0x2CE]
	0x03C9F4F4 LDR X27, [X27 + 0x258]
	0x03C9F4F8 MOV W19, W6
	0x03C9F4FC MOV W20, W5
	0x03C9F500 MOV W21, W4
	0x03C9F504 MOV W22, W3
	0x03C9F508 MOV W23, W2
	0x03C9F50C MOV W24, W1
	0x03C9F510 MOV X25, X0
	0x03C9F514 TBNZ X8, 0x0, 0x3C9F52C
	0x03C9F518 ADRP X0, 0x4C2000
	0x03C9F51C LDR X0, [X0 + 0x258]
	0x03C9F520 BL 0x1C16CF4
	0x03C9F524 MOVZ W8, 0x1
	0x03C9F528 STRB W8, [X26 + 0x2CE]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X30
	007 Move [X31+72], X21
	008 Move [X31+80], X20
	009 Move [X31+88], X19
	010 Move X21, 0x749000
	011 Move X20, 0x4C3000
	012 Move W8, [X21+707]
	013 Move X20, [X20+568]
	014 Move V8, V3
	015 Move V9, V2
	016 Move V10, V1
	017 Move V11, V0
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x4C3000
	024 Move X0, [X0+568]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+707], W8
	028 Move V0, [X19]
	029 Move X0, [X20]
	030 Add X1, X31, 16
	031 Move [X31+1], V0
	032 Call 0x1C17E04
	033 Move X19, X0
	034 Move X0, [X20]
	035 Add X1, X31, 0
	036 Move [X31], S11
	037 Move [X31+8], S10
	038 Move [X31+8], S9
	039 Move [X31+16], S8
	040 Call 0x1C17E04
	041 Move X1, X0
	042 Move X0, X19
	043 Move X2, X31
	044 Call ValueType.Equals, X0, X1
	045 Move X20, [X31+80]
	046 Move X19, [X31+88]
	047 Move X30, [X31+64]
	048 Move X21, [X31+72]
	049 Move D9, [X31+48]
	050 Move D8, [X31+56]
	051 Move D11, [X31+32]
	052 Move D10, [X31+40]
	053 And W0, W0, 1
	054 Add X31, X31, 96
	055 Return X0

