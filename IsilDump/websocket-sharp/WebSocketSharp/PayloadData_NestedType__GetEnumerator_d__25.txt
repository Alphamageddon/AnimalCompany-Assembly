Type: WebSocketSharp.PayloadData/<GetEnumerator>d__25

Method: System.Void .ctor(System.Int32 <>1__state)

Disassembly:
	0x03E7B868 LDR X1, [X23]
	0x03E7B86C LDRH W9, [X8 + 0x12E]
	0x03E7B870 CBZ X9, 0x3E7B894
	0x03E7B874 LDR X10, [X8 + 0xB0]
	0x03E7B878 ADD X10, X10, 0x8
	0x03E7B87C LDUR X11, [X10 - 0x8]
	0x03E7B880 CMP X11, X1
	0x03E7B884 B.EQ 0x3E7B8A4
	0x03E7B888 SUBS X9, X9, 0x1
	0x03E7B88C ADD X10, X10, 0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Void System.IDisposable.Dispose()

Disassembly:
	0x03E7B890 B.NE 0x3E7B87C

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x03E7B894 MOV X0, X19
	0x03E7B898 MOV W2, W31
	0x03E7B89C BL 0x1C5C788
	0x03E7B8A0 B 0x3E7B8B0
	0x03E7B8A4 LDRSW X9, [X10]
	0x03E7B8A8 ADD X8, X8, X9, 0x4, LSL
	0x03E7B8AC ADD X0, X8, 0x138
	0x03E7B8B0 LDP X8, X1, [X0]
	0x03E7B8B4 MOV X0, X19
	0x03E7B8B8 BLR X8
	0x03E7B8BC CBNZ X21, 0x3E7B8C8
	0x03E7B8C0 MOV X0, X20
	0x03E7B8C4 BL 0x1D2C690
	0x03E7B8C8 MOV X0, X21
	0x03E7B8CC BL 0x1C16F18
	0x03E7B8D0 BL 0x1990590
	0x03E7B8D4 STR X30, [X31 - 0x40]!
	0x03E7B8D8 STP X24, X23, [X31 + 0x10]
	0x03E7B8DC STP X22, X21, [X31 + 0x20]
	0x03E7B8E0 STP X20, X19, [X31 + 0x30]
	0x03E7B8E4 ADRP X19, 0x56D000
	0x03E7B8E8 LDRB W8, [X19 + 0xD96]
	0x03E7B8EC MOV W22, W2
	0x03E7B8F0 MOV X21, X1
	0x03E7B8F4 MOV X20, X0
	0x03E7B8F8 TBNZ X8, 0x0, 0x3E7B91C
	0x03E7B8FC ADRP X0, 0x2F1000
	0x03E7B900 LDR X0, [X0 + 0xA78]
	0x03E7B904 BL 0x1C16CF4
	0x03E7B908 ADRP X0, 0x2AF000
	0x03E7B90C LDR X0, [X0 + 0x188]
	0x03E7B910 BL 0x1C16CF4
	0x03E7B914 MOVZ W8, 0x1
	0x03E7B918 STRB W8, [X19 + 0xD96]
	0x03E7B91C LDR X19, [X20 + 0x28]
	0x03E7B920 MOV X1, X31
	0x03E7B924 MOV X0, X19
	0x03E7B928 BL 0x33E14E0
	0x03E7B92C LDR W23, [X20 + 0x18]
	0x03E7B930 BL 0x1C16D44
	0x03E7B934 CMP W23, W22

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+16]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Compare W8, 0
	005 JumpIfNotEqual {35}
	006 Move X9, [X0+24]
	007 Move TEMP, 0
	008 Not TEMP
	009 Move W8, TEMP
	010 Move [X0+16], W8
	011 Compare X9, 0
	012 JumpIfEqual {41}
	013 Move X9, [X9+16]
	014 Move W8, W31
	015 Move [X0+40], W31
	016 Move [X0+32], X9
	017 Move W8, [X0+40]
	018 Move X9, [X0+32]
	019 Move TEMP, 0
	020 Not TEMP
	021 Move W10, TEMP
	022 Move [X0+16], W10
	023 Add W8, W8, 1
	024 Move [X0+40], W8
	025 Compare X9, 0
	026 JumpIfEqual {41}
	027 Move W10, [X9+24]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Add X8, X9, W8
	030 Move W9, [X8+32]
	031 Move W8, 1
	032 Move [X0+16], W8
	033 Move [X0+44], W9
	034 Move [X0+20], W9
	035 Move W8, W31
	036 Move W8, W31
	037 Move [X0+32], X31
	038 Move W0, W8
	039 Move X30, [X31+16]
	040 Return X0
	041 Call 0x1C17F20
	042 Call 0x1C17F28

Method: System.Byte System.Collections.Generic.IEnumerator<System.Byte>.get_Current()

Disassembly:
	0x03E7B938 B.GT 0x3E7B9AC
	0x03E7B93C ADRP X8, 0x2AF000

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Void System.Collections.IEnumerator.Reset()

Disassembly:
	0x03E7B940 LDR X8, [X8 + 0x188]
	0x03E7B944 LDR X0, [X8]
	0x03E7B948 BL 0x1C16F10
	0x03E7B94C MOV X24, X0
	0x03E7B950 MOVZ W1, 0x2
	0x03E7B954 MOVZ W2, 0x1
	0x03E7B958 MOV X3, X31
	0x03E7B95C BL 0x334DE74
	0x03E7B960 ADRP X8, 0x2F1000
	0x03E7B964 LDR X8, [X8 + 0xA78]
	0x03E7B968 LDR X0, [X8]
	0x03E7B96C BL 0x1C16F10
	0x03E7B970 MOV X23, X0
	0x03E7B974 MOV W1, W22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x279000
	004 Move X0, [X0+2880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotSupportedException..ctor, X0
	010 Move X0, 0x2F2000
	011 Move X0, [X0+2592]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x03E7B978 MOV X2, X24
	0x03E7B97C MOV X3, X21
	0x03E7B980 BL 0x3E7AAF0
	0x03E7B984 LDR X21, [X20 + 0x20]
	0x03E7B988 LDR X20, [X20 + 0x10]
	0x03E7B98C BL 0x1C16D44
	0x03E7B990 CBZ X21, 0x3E7B9C8
	0x03E7B994 LDR X0, [X21 + 0x40]
	0x03E7B998 LDR X8, [X21 + 0x18]
	0x03E7B99C LDR X3, [X21 + 0x28]
	0x03E7B9A0 MOV X1, X23
	0x03E7B9A4 MOV X2, X20
	0x03E7B9A8 BLR X8
	0x03E7B9AC MOV X0, X19
	0x03E7B9B0 LDP X20, X19, [X31 + 0x30]
	0x03E7B9B4 LDP X22, X21, [X31 + 0x20]
	0x03E7B9B8 LDP X24, X23, [X31 + 0x10]
	0x03E7B9BC MOV X1, X31
	0x03E7B9C0 LDR X30, [X31], #0x40
	0x03E7B9C4 B 0x33E14E4
	0x03E7B9C8 BL 0x1C16F20
	0x03E7B9CC B 0x3E7B9E0
	0x03E7B9D0 B 0x3E7B9E0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x56E000
	007 Move X20, 0x27A000
	008 Move W8, [X21+3469]
	009 Move X20, [X20+2520]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x27A000
	016 Move X0, [X0+2520]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3469], W8
	020 Move W8, [X19+20]
	021 Move X0, [X20]
	022 Add X1, X31, 12
	023 Move [X31+12], W8
	024 Call 0x1C17E04
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X30, [X31+16]
	028 Move X21, [X31+24]
	029 Add X31, X31, 48
	030 Return X0

