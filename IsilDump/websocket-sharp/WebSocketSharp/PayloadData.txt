Type: WebSocketSharp.PayloadData

Method: System.Void .cctor()

Disassembly:
	0x03E7B560 ADRP X21, 0x280000
	0x03E7B564 MOV X0, X20
	0x03E7B568 LDP X9, X1, [X8 + 0x168]
	0x03E7B56C LDR X21, [X21 + 0x958]
	0x03E7B570 BLR X9
	0x03E7B574 LDR X8, [X21]
	0x03E7B578 MOV X20, X0
	0x03E7B57C LDR W9, [X8 + 0xE0]
	0x03E7B580 CBNZ W9, 0x3E7B58C
	0x03E7B584 MOV X0, X8
	0x03E7B588 BL 0x1C16DFC
	0x03E7B58C MOV X0, X20
	0x03E7B590 MOV X1, X31
	0x03E7B594 BL 0x33C33A0
	0x03E7B598 CBZ X19, 0x3E7B5BC
	0x03E7B59C LDR W8, [X19 + 0x10]
	0x03E7B5A0 CMP W8, 0x1
	0x03E7B5A4 B.LT 0x3E7B5BC
	0x03E7B5A8 MOV X0, X20
	0x03E7B5AC MOV X1, X19
	0x03E7B5B0 LDP X20, X19, [X31 + 0x10]
	0x03E7B5B4 LDP X30, X21, [X31], #0x20
	0x03E7B5B8 B 0x3E7B5CC
	0x03E7B5BC LDP X20, X19, [X31 + 0x10]
	0x03E7B5C0 LDP X30, X21, [X31], #0x20
	0x03E7B5C4 RET
	0x03E7B5C8 BL 0x1C16F20
	0x03E7B5CC SUB X31, X31, 0x40
	0x03E7B5D0 STP X30, X23, [X31 + 0x10]
	0x03E7B5D4 STP X22, X21, [X31 + 0x20]
	0x03E7B5D8 STP X20, X19, [X31 + 0x30]
	0x03E7B5DC ADRP X23, 0x56D000
	0x03E7B5E0 ADRP X19, 0x2A6000
	0x03E7B5E4 ADRP X22, 0x2AB000
	0x03E7B5E8 LDRB W8, [X23 + 0xD97]
	0x03E7B5EC LDR X19, [X19 + 0xD08]
	0x03E7B5F0 LDR X22, [X22 + 0xE70]
	0x03E7B5F4 MOV X21, X1
	0x03E7B5F8 MOV X20, X0
	0x03E7B5FC TBNZ X8, 0x0, 0x3E7B62C
	0x03E7B600 ADRP X0, 0x278000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x56E000
	006 Move X19, 0x2F2000
	007 Move W8, [X20+3460]
	008 Move X19, [X19+968]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2F2000
	014 Move X0, [X0+952]
	015 Call 0x1C17CF4
	016 Move X0, 0x2F2000
	017 Move X0, [X0+968]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3460], W8
	021 Move X0, [X19]
	022 Move X20, 0x2F2000
	023 Move W8, [X0+224]
	024 Move X20, [X20+952]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Move X0, [X20]
	031 Move X21, [X8+8]
	032 Call 0x1C17F10
	033 Move X1, X31
	034 Move X19, X0
	035 Call Object..ctor, X0
	036 Move [X19+16], X21
	037 Move [X19+32], X31
	038 Move X8, [X20]
	039 Move TEMP, 0x80000000
	040 Not TEMP
	041 Move X9, TEMP
	042 Move X8, [X8+184]
	043 Move [X8], X19
	044 Move X8, [X20]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X8, [X8+184]
	048 Move [X8+8], X9
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void .ctor(System.Byte[] data)

Disassembly:
	0x03E7B634 LDR X23, [X23 + 0xE00]
	0x03E7B638 BL 0x1C16F10
	0x03E7B63C MOVZ W2, 0x1
	0x03E7B640 MOV X1, X21
	0x03E7B644 MOV X3, X31
	0x03E7B648 MOV X19, X0
	0x03E7B64C BL 0x32E879C
	0x03E7B650 LDR X0, [X22]
	0x03E7B654 LDR W8, [X0 + 0xE0]
	0x03E7B658 CBNZ W8, 0x3E7B660
	0x03E7B65C BL 0x1C16DFC
	0x03E7B660 MOV X0, X19
	0x03E7B664 MOV X1, X31
	0x03E7B668 BL 0x32EA0DC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {19}
	007 NotImplemented "Instruction LDRSW not yet implemented."
	008 Move X20, X1
	009 Move X1, X31
	010 Move X19, X0
	011 Call Object..ctor, X0
	012 Move [X19+16], X20
	013 Move [X19+32], X21
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Move X21, [X31+40]
	018 Return 
	019 Call 0x1C17F20

Method: System.Void .ctor(System.Byte[] data, System.Int64 length)

Disassembly:
	0x03E7B604 LDR X0, [X0 + 0xE00]
	0x03E7B608 BL 0x1C16CF4
	0x03E7B60C ADRP X0, 0x2A6000
	0x03E7B610 LDR X0, [X0 + 0xD08]
	0x03E7B614 BL 0x1C16CF4
	0x03E7B618 ADRP X0, 0x2AB000
	0x03E7B61C LDR X0, [X0 + 0xE70]
	0x03E7B620 BL 0x1C16CF4
	0x03E7B624 MOVZ W8, 0x1
	0x03E7B628 STRB W8, [X23 + 0xD97]
	0x03E7B62C LDR X0, [X19]
	0x03E7B630 ADRP X23, 0x278000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move [X21+16], X20
	011 Move [X21+32], X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return 

Method: System.Void .ctor(System.UInt16 code, System.String reason)

Disassembly:
	0x03E6E84C B 0x3E6E868
	0x03E6E850 LDRH W20, [X20 + 0x108]
	0x03E6E854 BL 0x1C16D44
	0x03E6E858 CMP W20, 0x2
	0x03E6E85C B.NE 0x3E6E878
	0x03E6E860 ADRP X8, 0x2FE000
	0x03E6E864 LDR X8, [X8 + 0x460]
	0x03E6E868 LDR X8, [X8]
	0x03E6E86C MOV W0, W31
	0x03E6E870 STR X8, [X19]
	0x03E6E874 B 0x3E6E87C
	0x03E6E878 MOVZ W0, 0x1
	0x03E6E87C LDP X20, X19, [X31 + 0x10]
	0x03E6E880 LDP X30, X21, [X31], #0x20
	0x03E6E884 RET
	0x03E6E888 STP X30, X21, [X31 - 0x20]!
	0x03E6E88C STP X20, X19, [X31 + 0x10]
	0x03E6E890 ADRP X20, 0x57A000
	0x03E6E894 ADRP X21, 0x2FE000
	0x03E6E898 LDRB W8, [X20 + 0xD1B]
	0x03E6E89C LDR X21, [X21 + 0x468]
	0x03E6E8A0 MOV X19, X0
	0x03E6E8A4 TBNZ X8, 0x0, 0x3E6E8BC
	0x03E6E8A8 ADRP X0, 0x2FE000
	0x03E6E8AC LDR X0, [X0 + 0x468]
	0x03E6E8B0 BL 0x1C16CF4
	0x03E6E8B4 MOVZ W8, 0x1
	0x03E6E8B8 STRB W8, [X20 + 0xD1B]
	0x03E6E8BC LDR X0, [X21]
	0x03E6E8C0 BL 0x1C16F10
	0x03E6E8C4 MOVN W1, 0x1
	0x03E6E8C8 MOV X20, X0
	0x03E6E8CC BL 0x3E6E8EC
	0x03E6E8D0 CBZ X20, 0x3E6E8E8
	0x03E6E8D4 STR X19, [X20 + 0x28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x57B000
	008 Move X22, 0x28D000
	009 Move W8, [X23+3461]
	010 Move X22, [X22+584]
	011 Move X20, X2
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x28D000
	019 Move X0, [X0+584]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3461], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Call Object..ctor, X0
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move W0, W21
	032 Move X1, X20
	033 Call Ext.Append, X0, X1
	034 Move [X19+16], X0
	035 Compare X0, 0
	036 JumpIfEqual {46}
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Move X22, [X31+16]
	039 Move X21, [X31+24]
	040 Move [X19+32], X8
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+48]
	044 Move X23, [X31+56]
	045 Return 
	046 Call 0x1C17F20

Method: System.UInt16 get_Code()

Disassembly:
	0x03E6E8F0 STP X20, X19, [X31 + 0x10]
	0x03E6E8F4 MOV W20, W1
	0x03E6E8F8 MOV X1, X31
	0x03E6E8FC MOV X19, X0
	0x03E6E900 BL 0x33BDD8C
	0x03E6E904 MOV X0, X31
	0x03E6E908 STR W20, [X19 + 0x10]
	0x03E6E90C BL 0x33E3C68
	0x03E6E910 CBZ X0, 0x3E6E92C
	0x03E6E914 MOV X1, X31
	0x03E6E918 BL 0x33E3CC4
	0x03E6E91C STR W0, [X19 + 0x20]
	0x03E6E920 LDP X20, X19, [X31 + 0x10]
	0x03E6E924 LDR X30, [X31], #0x20
	0x03E6E928 RET
	0x03E6E92C BL 0x1C16F20
	0x03E6E930 LDR X0, [X0 + 0x48]
	0x03E6E934 RET
	0x03E6E938 LDRB W0, [X0 + 0x50]
	0x03E6E93C RET
	0x03E6E940 AND W8, W1, 0x1
	0x03E6E944 STRB W8, [X0 + 0x50]
	0x03E6E948 RET
	0x03E6E94C LDRB W0, [X0 + 0x51]
	0x03E6E950 RET
	0x03E6E954 SUB X31, X31, 0x30
	0x03E6E958 STP X30, X21, [X31 + 0x10]
	0x03E6E95C STP X20, X19, [X31 + 0x20]
	0x03E6E960 STR X31, [X31 + 0x8]
	0x03E6E964 LDRB W8, [X0 + 0x20]
	0x03E6E968 CBZ W8, 0x3E6EA04
	0x03E6E96C MOV W21, W1
	0x03E6E970 ADD X1, X31, 0x8
	0x03E6E974 MOV X20, X0
	0x03E6E978 BL 0x3E6E7F4
	0x03E6E97C TBZ X0, 0x0, 0x3E6E9AC
	0x03E6E980 LDR X19, [X20 + 0x80]
	0x03E6E984 MOV X1, X31
	0x03E6E988 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x57B000
	005 Move W8, [X20+3462]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2FF000
	012 Move X0, [X0+744]
	013 Call 0x1C17CF4
	014 Move X0, 0x28D000
	015 Move X0, [X0+584]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3462], W8
	019 Move X8, [X19+32]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X8, 0x28D000
	022 Move X8, [X8+584]
	023 Move X20, 0x2FF000
	024 Move X19, [X19+16]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Move X20, [X20+744]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X3, [X20]
	032 Move W2, 2
	033 Move X0, X19
	034 Move W1, W31
	035 Call 0x21E35A8, X0, X1, X2
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move W1, 1
	039 Move X30, [X31+32]
	040 Call Ext.ToUInt16, X0, X1
	041 Return X0
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move W0, 1005
	045 Move X30, [X31+32]
	046 Return X0

Method: System.Int64 get_ExtensionDataLength()

Disassembly:
	0x03E7B66C MOV X21, X0
	0x03E7B670 CBZ X0, 0x3E7B76C

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_ExtensionDataLength(System.Int64 value)

Disassembly:
	0x03E7B674 LDR X8, [X21]
	0x03E7B678 LDR X9, [X8 + 0x278]

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Boolean get_HasReservedCode()

Disassembly:
	0x03E75858 MOV X3, X24
	0x03E7585C BL 0x3E74658
	0x03E75860 TBZ X0, 0x0, 0x3E75990
	0x03E75864 CMP W21, 0x0
	0x03E75868 MOVN X8, 0x1
	0x03E7586C CINC X8, X8, NE
	0x03E75870 ADD X22, X8, X27
	0x03E75874 CMP X22, 0x1
	0x03E75878 B.LT 0x3E758EC
	0x03E7587C LDR X0, [X25]
	0x03E75880 LDR W8, [X0 + 0xE0]
	0x03E75884 CBNZ W8, 0x3E75890
	0x03E75888 BL 0x1C16DFC
	0x03E7588C LDR X0, [X25]
	0x03E75890 LDR X8, [X0 + 0xB8]
	0x03E75894 LDR X9, [X20]
	0x03E75898 MOV X0, X20
	0x03E7589C MOV X1, X24
	0x03E758A0 LDR W3, [X8 + 0x10]
	0x03E758A4 LDR X8, [X9 + 0x358]
	0x03E758A8 LDR X4, [X9 + 0x360]
	0x03E758AC MOV W2, W31
	0x03E758B0 BLR X8
	0x03E758B4 LDR X8, [X25]
	0x03E758B8 LDR X8, [X8 + 0xB8]
	0x03E758BC LDR W8, [X8 + 0x10]
	0x03E758C0 CMP W0, W8
	0x03E758C4 B.NE 0x3E75990
	0x03E758C8 MOV X0, X19
	0x03E758CC MOV W1, W31
	0x03E758D0 MOV W2, W31
	0x03E758D4 MOV X3, X24
	0x03E758D8 MOV W4, W31
	0x03E758DC BL 0x3E74658
	0x03E758E0 TBZ X0, 0x0, 0x3E75990
	0x03E758E4 SUBS X22, X22, 0x1
	0x03E758E8 B.NE 0x3E7587C
	0x03E758EC CBZ W21, 0x3E75938
	0x03E758F0 LDR X0, [X26]
	0x03E758F4 MOV W1, W21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x574000
	005 Move W8, [X20+3463]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x286000
	012 Move X0, [X0+584]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3463], W8
	016 Move X8, [X19+32]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X20, 0x286000
	019 Move X20, [X20+584]
	020 Move X0, X19
	021 Call PayloadData.get_Code, X0
	022 Move X8, [X20]
	023 Move W19, W0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 And W8, W19, 0xFFFE
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W0, 1
	032 Move W0, W31
	033 And W8, W19, 0xFFFF
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSET not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction CSET not yet implemented."
	038 Or W0, W9, W8
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0

Method: System.String get_Reason()

Disassembly:
	0x03E6E9A4 STRB W8, [X20 + 0x51]
	0x03E6E9A8 B 0x3E6E9E8
	0x03E6E9AC LDR X19, [X20 + 0xA8]
	0x03E6E9B0 BL 0x1C16D44
	0x03E6E9B4 CBZ X19, 0x3E6EA4C
	0x03E6E9B8 LDR X1, [X31 + 0x8]
	0x03E6E9BC MOV X0, X19
	0x03E6E9C0 MOV X2, X31
	0x03E6E9C4 BL 0x3E7B278
	0x03E6E9C8 B 0x3E6E9F4
	0x03E6E9CC LDR X20, [X20 + 0xA8]
	0x03E6E9D0 BL 0x1C16D44
	0x03E6E9D4 CBZ X20, 0x3E6EA50
	0x03E6E9D8 LDR X1, [X31 + 0x8]
	0x03E6E9DC MOV X0, X20
	0x03E6E9E0 MOV X2, X31
	0x03E6E9E4 BL 0x3E7B278
	0x03E6E9E8 MOV X0, X19
	0x03E6E9EC MOV X1, X31
	0x03E6E9F0 BL 0x33E14E4
	0x03E6E9F4 LDP X20, X19, [X31 + 0x20]
	0x03E6E9F8 LDP X30, X21, [X31 + 0x10]
	0x03E6E9FC ADD X31, X31, 0x30
	0x03E6EA00 RET
	0x03E6EA04 ADRP X0, 0x2FE000
	0x03E6EA08 LDR X0, [X0 + 0x448]
	0x03E6EA0C BL 0x1C16D08
	0x03E6EA10 MOV X19, X0
	0x03E6EA14 ADRP X0, 0x285000
	0x03E6EA18 LDR X0, [X0 + 0x5B0]
	0x03E6EA1C BL 0x1C16D08
	0x03E6EA20 BL 0x1C16F10
	0x03E6EA24 MOV X1, X19
	0x03E6EA28 MOV X2, X31
	0x03E6EA2C MOV X20, X0
	0x03E6EA30 BL 0x337DF1C
	0x03E6EA34 ADRP X0, 0x2FE000
	0x03E6EA38 LDR X0, [X0 + 0x470]
	0x03E6EA3C BL 0x1C16D08
	0x03E6EA40 MOV X1, X0
	0x03E6EA44 MOV X0, X20
	0x03E6EA48 BL 0x1C16DEC
	0x03E6EA4C BL 0x1C16F20
	0x03E6EA50 BL 0x1C16F20
	0x03E6EA54 B 0x3E6EA5C
	0x03E6EA58 B 0x3E6EA5C
	0x03E6EA5C MOV X20, X0
	0x03E6EA60 CMP W1, 0x1
	0x03E6EA64 B.NE 0x3E6EA90

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x57B000
	007 Move W8, [X20+3464]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x2FF000
	014 Move X0, [X0+944]
	015 Call 0x1C17CF4
	016 Move X0, 0x28D000
	017 Move X0, [X0+584]
	018 Call 0x1C17CF4
	019 Move X0, 0x288000
	020 Move X0, [X0+632]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3464], W8
	024 Move [X31+8], X31
	025 Move X20, [X19+32]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0x28D000
	028 Move X8, [X8+584]
	029 Move X21, 0x2FF000
	030 Move X19, [X19+16]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Move X21, [X21+944]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X3, [X21]
	038 Subtract X2, X20, 2
	039 Move W1, 2
	040 Move X0, X19
	041 Call 0x21E371C, X0, X1, X2
	042 Add X1, X31, 8
	043 Add X19, X31, 8
	044 Call Ext.TryGetUTF8DecodedString, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {53}
	049 Move X8, 0x288000
	050 Move X8, [X8+632]
	051 Move X8, [X8]
	052 Move X19, [X8+184]
	053 Move X0, [X19]
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+16]
	057 Move X21, [X31+24]
	058 Add X31, X31, 48
	059 Return X0

Method: System.Byte[] get_ApplicationData()

Disassembly:
	0x03E6E4A0 TBNZ X8, 0x0, 0x3E6E4D0
	0x03E6E4A4 ADRP X0, 0x285000
	0x03E6E4A8 LDR X0, [X0 + 0x618]
	0x03E6E4AC BL 0x1C16CF4
	0x03E6E4B0 ADRP X0, 0x28E000
	0x03E6E4B4 LDR X0, [X0 + 0x9E8]
	0x03E6E4B8 BL 0x1C16CF4
	0x03E6E4BC ADRP X0, 0x2FE000
	0x03E6E4C0 LDR X0, [X0 + 0x3C8]
	0x03E6E4C4 BL 0x1C16CF4
	0x03E6E4C8 MOVZ W8, 0x1
	0x03E6E4CC STRB W8, [X19 + 0xD5E]
	0x03E6E4D0 LDR X0, [X21]
	0x03E6E4D4 MOVZ W1, 0x10
	0x03E6E4D8 BL 0x1C16D6C
	0x03E6E4DC LDR X8, [X20]
	0x03E6E4E0 MOV X19, X0
	0x03E6E4E4 LDR W9, [X8 + 0xE0]
	0x03E6E4E8 CBNZ W9, 0x3E6E4F8
	0x03E6E4EC MOV X0, X8
	0x03E6E4F0 BL 0x1C16DFC
	0x03E6E4F4 LDR X8, [X20]
	0x03E6E4F8 LDR X8, [X8 + 0xB8]
	0x03E6E4FC LDR X0, [X8 + 0x18]
	0x03E6E500 CBZ X0, 0x3E6E540
	0x03E6E504 LDR X8, [X0]
	0x03E6E508 ADRP X20, 0x28E000
	0x03E6E50C MOV X1, X19
	0x03E6E510 LDP X9, X2, [X8 + 0x198]
	0x03E6E514 LDR X20, [X20 + 0x9E8]
	0x03E6E518 BLR X9
	0x03E6E51C LDR X0, [X20]
	0x03E6E520 LDR W8, [X0 + 0xE0]
	0x03E6E524 CBNZ W8, 0x3E6E52C
	0x03E6E528 BL 0x1C16DFC
	0x03E6E52C MOV X0, X19
	0x03E6E530 LDP X20, X19, [X31 + 0x10]
	0x03E6E534 MOV X1, X31
	0x03E6E538 LDP X30, X21, [X31], #0x20
	0x03E6E53C B 0x33225A0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x57B000
	007 Move W8, [X20+3465]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2FF000
	014 Move X0, [X0+944]
	015 Call 0x1C17CF4
	016 Move X0, 0x28D000
	017 Move X0, [X0+584]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3465], W8
	021 Move X21, [X19+16]
	022 Move X20, [X19+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, 0x28D000
	025 Move X8, [X8+584]
	026 Move X22, 0x2FF000
	027 Move X19, [X19+32]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Move X22, [X22+944]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X3, [X22]
	035 Subtract X2, X19, X20
	036 Move X0, X21
	037 Move X1, X20
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Call 0x21E371C, X0, X1, X2
	044 Return X0
	045 Move X0, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return X0

Method: System.Byte[] get_ExtensionData()

Disassembly:
	0x03E7B67C LDR X2, [X8 + 0x280]
	0x03E7B680 MOV X0, X21
	0x03E7B684 MOV X1, X20
	0x03E7B688 BLR X9
	0x03E7B68C MOV X20, X31
	0x03E7B690 LDR X8, [X21]
	0x03E7B694 LDR X1, [X23]
	0x03E7B698 LDRH W9, [X8 + 0x12E]
	0x03E7B69C CBZ X9, 0x3E7B6C0
	0x03E7B6A0 LDR X10, [X8 + 0xB0]
	0x03E7B6A4 ADD X10, X10, 0x8
	0x03E7B6A8 LDUR X11, [X10 - 0x8]
	0x03E7B6AC CMP X11, X1
	0x03E7B6B0 B.EQ 0x3E7B6D0
	0x03E7B6B4 SUBS X9, X9, 0x1
	0x03E7B6B8 ADD X10, X10, 0x10
	0x03E7B6BC B.NE 0x3E7B6A8
	0x03E7B6C0 MOV X0, X21
	0x03E7B6C4 MOV W2, W31
	0x03E7B6C8 BL 0x1C5C788
	0x03E7B6CC B 0x3E7B6DC
	0x03E7B6D0 LDRSW X9, [X10]
	0x03E7B6D4 ADD X8, X8, X9, 0x4, LSL
	0x03E7B6D8 ADD X0, X8, 0x138
	0x03E7B6DC LDP X8, X1, [X0]
	0x03E7B6E0 MOV X0, X21
	0x03E7B6E4 BLR X8
	0x03E7B6E8 CBNZ X20, 0x3E7B770
	0x03E7B6EC MOV X21, X31
	0x03E7B6F0 CBZ X19, 0x3E7B74C
	0x03E7B6F4 LDR X8, [X19]
	0x03E7B6F8 LDR X1, [X23]
	0x03E7B6FC LDRH W9, [X8 + 0x12E]
	0x03E7B700 CBZ X9, 0x3E7B724
	0x03E7B704 LDR X10, [X8 + 0xB0]
	0x03E7B708 ADD X10, X10, 0x8
	0x03E7B70C LDUR X11, [X10 - 0x8]
	0x03E7B710 CMP X11, X1
	0x03E7B714 B.EQ 0x3E7B734
	0x03E7B718 SUBS X9, X9, 0x1
	0x03E7B71C ADD X10, X10, 0x10
	0x03E7B720 B.NE 0x3E7B70C
	0x03E7B724 MOV X0, X19
	0x03E7B728 MOV W2, W31
	0x03E7B72C BL 0x1C5C788
	0x03E7B730 B 0x3E7B740
	0x03E7B734 LDRSW X9, [X10]
	0x03E7B738 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x56E000
	006 Move W8, [X20+3466]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x2F2000
	013 Move X0, [X0+944]
	014 Call 0x1C17CF4
	015 Move X0, 0x280000
	016 Move X0, [X0+584]
	017 Call 0x1C17CF4
	018 Move X0, 0x2F2000
	019 Move X0, [X0+968]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3466], W8
	023 Move X20, [X19+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X8, 0x280000
	026 Move X8, [X8+584]
	027 Move X21, 0x2F2000
	028 Move X19, [X19+16]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Move X21, [X21+944]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X3, [X21]
	036 Move X0, X19
	037 Move X2, X20
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X1, X31
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Call 0x21E371C, X0, X1, X2
	044 Return X0
	045 Move X19, 0x2F2000
	046 Move X19, [X19+968]
	047 Move X0, [X19]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X19]
	053 Move X8, [X0+184]
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X0, [X8+8]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Return X0

Method: System.UInt64 get_Length()

Disassembly:
	0x03E7B73C ADD X0, X8, 0x138
	0x03E7B740 LDP X8, X1, [X0]

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void Mask(System.Byte[] key)

Disassembly:
	0x03E7B744 MOV X0, X19
	0x03E7B748 BLR X8
	0x03E7B74C CBNZ X21, 0x3E7B764
	0x03E7B750 LDP X20, X19, [X31 + 0x30]
	0x03E7B754 LDP X22, X21, [X31 + 0x20]
	0x03E7B758 LDP X30, X23, [X31 + 0x10]
	0x03E7B75C ADD X31, X31, 0x40
	0x03E7B760 RET
	0x03E7B764 MOV X0, X21
	0x03E7B768 BL 0x1C16F18
	0x03E7B76C BL 0x1C16F20
	0x03E7B770 MOV X0, X20
	0x03E7B774 BL 0x1C16F18
	0x03E7B778 B 0x3E7B830
	0x03E7B77C B 0x3E7B830
	0x03E7B780 MOV X22, X1
	0x03E7B784 CMP W22, 0x1
	0x03E7B788 MOV X20, X0
	0x03E7B78C B.NE 0x3E7B7B0
	0x03E7B790 MOV X0, X20
	0x03E7B794 BL 0x3EB1AD0
	0x03E7B798 LDR X8, [X0]
	0x03E7B79C STR X8, [X31 + 0x8]
	0x03E7B7A0 BL 0x3EB1AE0
	0x03E7B7A4 LDR X20, [X31 + 0x8]
	0x03E7B7A8 CBNZ X21, 0x3E7B690
	0x03E7B7AC B 0x3E7B6E8
	0x03E7B7B0 STR X31, [X31 + 0x8]
	0x03E7B7B4 CBZ X21, 0x3E7B810
	0x03E7B7B8 LDR X8, [X21]
	0x03E7B7BC LDR X1, [X23]
	0x03E7B7C0 LDRH W9, [X8 + 0x12E]
	0x03E7B7C4 CBZ X9, 0x3E7B7E8
	0x03E7B7C8 LDR X10, [X8 + 0xB0]
	0x03E7B7CC ADD X10, X10, 0x8
	0x03E7B7D0 LDUR X11, [X10 - 0x8]
	0x03E7B7D4 CMP X11, X1
	0x03E7B7D8 B.EQ 0x3E7B7F8
	0x03E7B7DC SUBS X9, X9, 0x1
	0x03E7B7E0 ADD X10, X10, 0x10
	0x03E7B7E4 B.NE 0x3E7B7D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x56E000
	006 Move W8, [X21+3467]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2F2000
	014 Move X0, [X0+2576]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3467], W8
	018 Move X8, [X20+32]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, X31
	021 Move X9, [X20+16]
	022 Compare X9, 0
	023 JumpIfEqual {45}
	024 Move W10, [X9+24]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Compare X19, 0
	027 JumpIfEqual {45}
	028 Move W11, [X19+24]
	029 And X10, X8, 3
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add X9, X9, X8
	032 Add X10, X19, X10
	033 Move W11, [X9+32]
	034 Move W10, [X10+32]
	035 Add X8, X8, 1
	036 Xor W10, W10, W11
	037 Move [X9+32], W10
	038 Move X9, [X20+32]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Call 0x1C17F20
	046 Call 0x1C17F28

Method: System.Collections.Generic.IEnumerator`1<System.Byte> GetEnumerator()

Disassembly:
	0x03E7B7E8 MOV X0, X21
	0x03E7B7EC MOV W2, W31
	0x03E7B7F0 BL 0x1C5C788
	0x03E7B7F4 B 0x3E7B804
	0x03E7B7F8 LDRSW X9, [X10]
	0x03E7B7FC ADD X8, X8, X9, 0x4, LSL
	0x03E7B800 ADD X0, X8, 0x138
	0x03E7B804 LDP X8, X1, [X0]
	0x03E7B808 MOV X0, X21
	0x03E7B80C BLR X8
	0x03E7B810 LDR X8, [X31 + 0x8]
	0x03E7B814 CBZ X8, 0x3E7B838
	0x03E7B818 LDR X0, [X31 + 0x8]
	0x03E7B81C BL 0x1C16F18
	0x03E7B820 MOV X22, X1
	0x03E7B824 MOV X20, X0
	0x03E7B828 CBNZ X21, 0x3E7B7B8
	0x03E7B82C B 0x3E7B810
	0x03E7B830 MOV X22, X1
	0x03E7B834 MOV X20, X0
	0x03E7B838 CMP W22, 0x1
	0x03E7B83C B.NE 0x3E7B854
	0x03E7B840 MOV X0, X20
	0x03E7B844 BL 0x3EB1AD0
	0x03E7B848 LDR X21, [X0]
	0x03E7B84C BL 0x3EB1AE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x56E000
	006 Move X21, 0x2F2000
	007 Move W8, [X20+3468]
	008 Move X21, [X21+2584]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2F2000
	015 Move X0, [X0+2584]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3468], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move W1, W31
	022 Move X2, X31
	023 Move X20, X0
	024 Call <GetEnumerator>d__25..ctor, X0, X1
	025 Compare X20, 0
	026 JumpIfEqual {34}
	027 Move [X20+24], X19
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0
	034 Call 0x1C17F20

Method: System.Byte[] ToArray()

Disassembly:
	0x03E7B850 B 0x3E7B6F0
	0x03E7B854 MOV X21, X31

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.String ToString()

Disassembly:
	0x03E7B858 B 0x3E7B860
	0x03E7B85C MOV X20, X0
	0x03E7B860 CBZ X19, 0x3E7B8BC

ISIL:
	001 Move X0, [X0+16]
	002 Move X1, X31
	003 Call BitConverter.ToString, X0
	004 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x03E7B864 LDR X8, [X19]

ISIL:
	001 Call PayloadData.GetEnumerator, X0
	002 Return X0

