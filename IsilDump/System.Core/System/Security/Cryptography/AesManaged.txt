Type: System.Security.Cryptography.AesManaged

Method: System.Void .ctor()

Disassembly:
	0x035DA7F0 STR X30, [X31 - 0x30]!
	0x035DA7F4 STP X22, X21, [X31 + 0x10]
	0x035DA7F8 STP X20, X19, [X31 + 0x20]
	0x035DA7FC ADRP X22, 0xE06000
	0x035DA800 LDRB W8, [X22 + 0x24F]
	0x035DA804 MOV X19, X2
	0x035DA808 MOV X20, X1
	0x035DA80C MOV X21, X0
	0x035DA810 TBNZ X8, 0x0, 0x35DA828
	0x035DA814 ADRP X0, 0xB5F000
	0x035DA818 LDR X0, [X0 + 0x38]
	0x035DA81C BL 0x1C16CF4
	0x035DA820 MOVZ W8, 0x1
	0x035DA824 STRB W8, [X22 + 0x24F]
	0x035DA828 LDR X8, [X21]
	0x035DA82C MOV X0, X21
	0x035DA830 LDR X9, [X8 + 0x238]
	0x035DA834 LDR X1, [X8 + 0x240]
	0x035DA838 BLR X9
	0x035DA83C CMP W0, 0x4
	0x035DA840 B.NE 0x35DA85C
	0x035DA844 LDR X8, [X21]
	0x035DA848 MOV X0, X21
	0x035DA84C LDP X9, X1, [X8 + 0x1B8]
	0x035DA850 BLR X9
	0x035DA854 CMP W0, 0x41
	0x035DA858 B.GE 0x35DA898
	0x035DA85C ADRP X8, 0xB5F000
	0x035DA860 LDR X8, [X8 + 0x38]
	0x035DA864 LDR X0, [X8]
	0x035DA868 BL 0x1C16F10
	0x035DA86C MOVZ W2, 0x1
	0x035DA870 MOV X1, X21
	0x035DA874 MOV X3, X20
	0x035DA878 MOV X4, X19
	0x035DA87C MOV X22, X0
	0x035DA880 BL 0x35DA0FC
	0x035DA884 MOV X0, X22
	0x035DA888 LDP X20, X19, [X31 + 0x20]
	0x035DA88C LDP X22, X21, [X31 + 0x10]
	0x035DA890 LDR X30, [X31], #0x30
	0x035DA894 RET
	0x035DA898 ADRP X0, 0xB46000
	0x035DA89C LDR X0, [X0 + 0xCE0]
	0x035DA8A0 BL 0x1C16D08
	0x035DA8A4 BL 0x1C16F10
	0x035DA8A8 MOV X19, X0
	0x035DA8AC ADRP X0, 0xB5F000
	0x035DA8B0 LDR X0, [X0 + 0x40]
	0x035DA8B4 BL 0x1C16D08
	0x035DA8B8 MOV X1, X0
	0x035DA8BC MOV X0, X19
	0x035DA8C0 MOV X2, X31
	0x035DA8C4 BL 0x3252170
	0x035DA8C8 ADRP X0, 0xB5F000
	0x035DA8CC LDR X0, [X0 + 0x70]
	0x035DA8D0 BL 0x1C16D08
	0x035DA8D4 MOV X1, X0
	0x035DA8D8 MOV X0, X19
	0x035DA8DC BL 0x1C16DEC
	0x035DA8E0 MOV X1, X31
	0x035DA8E4 B 0x3260A18
	0x035DA8E8 MOV X2, X31
	0x035DA8EC B 0x3260AAC
	0x035DA8F0 MOV X1, X31
	0x035DA8F4 B 0x3260C08
	0x035DA8F8 MOV X2, X31
	0x035DA8FC B 0x3260C9C
	0x035DA900 LDR W0, [X0 + 0x38]
	0x035DA904 RET
	0x035DA908 MOV X2, X31
	0x035DA90C B 0x3260F0C
	0x035DA910 LDR W0, [X0 + 0x14]
	0x035DA914 RET
	0x035DA918 LDR W0, [X0 + 0x3C]
	0x035DA91C RET
	0x035DA920 CMP W1, 0x5
	0x035DA924 B.EQ 0x35DA930
	0x035DA928 MOV X2, X31
	0x035DA92C B 0x3260F90
	0x035DA930 STP X30, X19, [X31 - 0x10]!
	0x035DA934 ADRP X0, 0xB46000
	0x035DA938 LDR X0, [X0 + 0xCE0]
	0x035DA93C BL 0x1C16D08
	0x035DA940 BL 0x1C16F10
	0x035DA944 MOV X19, X0
	0x035DA948 ADRP X0, 0xB5F000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE07000
	006 Move X20, 0xB27000
	007 Move W8, [X21+587]
	008 Move X20, [X20+3568]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xB27000
	015 Move X0, [X0+3568]
	016 Call 0x1C17CF4
	017 Move X0, 0xB47000
	018 Move X0, [X0+3032]
	019 Call 0x1C17CF4
	020 Move X0, 0xB4A000
	021 Move X0, [X0+1184]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+587], W8
	025 Move X0, [X20]
	026 Move X20, 0xB47000
	027 Move W8, [X0+224]
	028 Move X20, [X20+3032]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X1, X31
	034 Call Aes..ctor, X0
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X31
	041 Call CryptoConfig.get_AllowOnlyFipsAlgorithms
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {86}
	046 Move X8, 0xB4A000
	047 Move X8, [X8+1184]
	048 Move X0, [X8]
	049 Call 0x1C17F10
	050 Move X1, X31
	051 Move X20, X0
	052 Call RijndaelManaged..ctor, X0
	053 Move X8, [X19]
	054 Move [X19+72], X20
	055 Move X0, X19
	056 Move X9, [X8+408]
	057 Move X1, [X8+416]
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Compare X20, 0
	060 JumpIfEqual {85}
	061 Move X8, [X20]
	062 Move W1, W0
	063 Move X0, X20
	064 Move X9, [X8+424]
	065 Move X2, [X8+432]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X8, [X19]
	068 Move X20, [X19+72]
	069 Move X0, X19
	070 Move X9, [X8+536]
	071 Move X1, [X8+544]
	072 NotImplemented "Instruction BLR not yet implemented."
	073 Compare X20, 0
	074 JumpIfEqual {85}
	075 Move X8, [X20]
	076 Move W1, W0
	077 Move X0, X20
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move X3, [X8+552]
	081 Move X2, [X8+560]
	082 Move X30, [X31+32]
	083 Move X21, [X31+40]
	084 CallNoReturn X3
	085 Call 0x1C17F20
	086 Move X0, 0xB4A000
	087 Move X0, [X0+160]
	088 Call 0x1C17D08
	089 Move X19, X0
	090 Move X0, 0xB1A000
	091 Move X0, [X0+1456]
	092 Call 0x1C17D08
	093 Call 0x1C17F10
	094 Move X1, X19
	095 Move X2, X31
	096 Move X20, X0
	097 Call InvalidOperationException..ctor, X0, X1
	098 Move X0, 0xB60000
	099 Move X0, [X0+24]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X20
	103 Call 0x1C17DEC

Method: System.Int32 get_FeedbackSize()

Disassembly:
	0x035DA94C LDR X0, [X0 + 0x78]
	0x035DA950 BL 0x1C16D08
	0x035DA954 MOV X1, X0
	0x035DA958 MOV X0, X19
	0x035DA95C MOV X2, X31
	0x035DA960 BL 0x3252170
	0x035DA964 ADRP X0, 0xB5F000
	0x035DA968 LDR X0, [X0 + 0x80]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+440]
	007 Move X1, [X8+448]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Byte[] get_IV()

Disassembly:
	0x035DA96C BL 0x1C16D08
	0x035DA970 MOV X1, X0
	0x035DA974 MOV X0, X19
	0x035DA978 BL 0x1C16DEC
	0x035DA97C LDR W0, [X0 + 0x40]
	0x035DA980 RET
	0x035DA984 MOV X2, X31
	0x035DA988 B 0x326100C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+456]
	007 Move X1, [X8+464]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_IV(System.Byte[] value)

Disassembly:
	0x035DA98C STR X30, [X31 - 0x20]!
	0x035DA990 STP X20, X19, [X31 + 0x10]
	0x035DA994 LDR X8, [X0]
	0x035DA998 MOV X19, X0
	0x035DA99C LDP X9, X1, [X8 + 0x1E8]
	0x035DA9A0 BLR X9
	0x035DA9A4 LDR X8, [X19]
	0x035DA9A8 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+472]
	007 Move X2, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Byte[] get_Key()

Disassembly:
	0x035DA9AC MOV X0, X19
	0x035DA9B0 LDP X9, X1, [X8 + 0x1C8]
	0x035DA9B4 BLR X9
	0x035DA9B8 LDR X8, [X19]
	0x035DA9BC MOV X2, X0
	0x035DA9C0 MOV X0, X19
	0x035DA9C4 MOV X1, X20
	0x035DA9C8 LDR X4, [X8 + 0x2A8]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+488]
	007 Move X1, [X8+496]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_Key(System.Byte[] value)

Disassembly:
	0x035DA9CC LDR X3, [X8 + 0x2B0]
	0x035DA9D0 LDP X20, X19, [X31 + 0x10]
	0x035DA9D4 LDR X30, [X31], #0x20
	0x035DA9D8 BR X4
	0x035DA9DC STR X30, [X31 - 0x20]!
	0x035DA9E0 STP X20, X19, [X31 + 0x10]
	0x035DA9E4 LDR X8, [X0]
	0x035DA9E8 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+504]
	007 Move X2, [X8+512]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Int32 get_KeySize()

Disassembly:
	0x035DA9EC LDP X9, X1, [X8 + 0x1E8]
	0x035DA9F0 BLR X9
	0x035DA9F4 LDR X8, [X19]
	0x035DA9F8 MOV X20, X0
	0x035DA9FC MOV X0, X19
	0x035DAA00 LDP X9, X1, [X8 + 0x1C8]
	0x035DAA04 BLR X9
	0x035DAA08 LDR X8, [X19]
	0x035DAA0C MOV X2, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+536]
	007 Move X1, [X8+544]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_KeySize(System.Int32 value)

Disassembly:
	0x035DAA10 MOV X0, X19
	0x035DAA14 MOV X1, X20
	0x035DAA18 LDR X4, [X8 + 0x288]
	0x035DAA1C LDR X3, [X8 + 0x290]
	0x035DAA20 LDP X20, X19, [X31 + 0x10]
	0x035DAA24 LDR X30, [X31], #0x20
	0x035DAA28 BR X4
	0x035DAA2C AND W1, W1, 0x1
	0x035DAA30 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+552]
	007 Move X2, [X8+560]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Security.Cryptography.CipherMode get_Mode()

Disassembly:
	0x035DAA34 B 0x32608D4
	0x035DAA38 STP X30, X21, [X31 - 0x20]!
	0x035DAA3C STP X20, X19, [X31 + 0x10]
	0x035DAA40 ADRP X21, 0xE06000
	0x035DAA44 ADRP X20, 0xB5F000
	0x035DAA48 LDRB W8, [X21 + 0x251]
	0x035DAA4C LDR X20, [X20 + 0x38]
	0x035DAA50 MOV W19, W1
	0x035DAA54 TBNZ X8, 0x0, 0x35DAA6C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+568]
	007 Move X1, [X8+576]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_Mode(System.Security.Cryptography.CipherMode value)

Disassembly:
	0x035DAA58 ADRP X0, 0xB5F000
	0x035DAA5C LDR X0, [X0 + 0x38]
	0x035DAA60 BL 0x1C16CF4
	0x035DAA64 MOVZ W8, 0x1
	0x035DAA68 STRB W8, [X21 + 0x251]
	0x035DAA6C LDR X0, [X20]
	0x035DAA70 LDR W8, [X0 + 0xE0]
	0x035DAA74 CBNZ W8, 0x35DAA80
	0x035DAA78 BL 0x1C16DFC
	0x035DAA7C LDR X0, [X20]
	0x035DAA80 LDR X8, [X0 + 0xB8]
	0x035DAA84 LDR X8, [X8 + 0x8]
	0x035DAA88 CBZ X8, 0x35DAAF8
	0x035DAA8C LDR W13, [X8 + 0x18]
	0x035DAA90 AND W9, W19, 0xFF
	0x035DAA94 CMP W9, W13
	0x035DAA98 B.CS 0x35DAAF4
	0x035DAA9C UBFM W10, W19, 0x8, 0xF
	0x035DAAA0 CMP W10, W13
	0x035DAAA4 B.CS 0x35DAAF4
	0x035DAAA8 UBFM W11, W19, 0x10, 0x17
	0x035DAAAC CMP W11, W13
	0x035DAAB0 B.CS 0x35DAAF4
	0x035DAAB4 UBFM W12, W19, 0x18, 0x1F
	0x035DAAB8 CMP W12, W13
	0x035DAABC B.CS 0x35DAAF4
	0x035DAAC0 ADD X9, X8, W9, UXTW
	0x035DAAC4 ADD X10, X8, W10, UXTW
	0x035DAAC8 LDRB W0, [X9 + 0x20]
	0x035DAACC LDRB W9, [X10 + 0x20]
	0x035DAAD0 ADD X8, X8, 0x20
	0x035DAAD4 LDRB W10, [X8, W11, UXTW]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Subtract W8, W1, 3
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, [X0+72]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move X8, [X0]
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X3, [X8+584]
	013 Move X2, [X8+592]
	014 Move X30, [X31+32]
	015 CallNoReturn X3
	016 Move X0, 0xB4A000
	017 Move X0, [X0+464]
	018 Call 0x1C17D08
	019 Move X19, X0
	020 Move X0, 0xB47000
	021 Move X0, [X0+3296]
	022 Call 0x1C17D08
	023 Call 0x1C17F10
	024 Move X1, X19
	025 Move X2, X31
	026 Move X20, X0
	027 Call CryptographicException..ctor, X0, X1
	028 Move X0, 0xB60000
	029 Move X0, [X0+32]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X20
	033 Call 0x1C17DEC
	034 Call 0x1C17F20

Method: System.Security.Cryptography.PaddingMode get_Padding()

Disassembly:
	0x035DAAD8 LDRB W8, [X8, W12, UXTW]
	0x035DAADC LDP X20, X19, [X31 + 0x10]
	0x035DAAE0 BFM W0, W9, 0x18, 0x7
	0x035DAAE4 BFM W0, W10, 0x10, 0x7
	0x035DAAE8 BFM W0, W8, 0x8, 0x7
	0x035DAAEC LDP X30, X21, [X31], #0x20
	0x035DAAF0 RET
	0x035DAAF4 BL 0x1C16F28
	0x035DAAF8 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+600]
	007 Move X1, [X8+608]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void set_Padding(System.Security.Cryptography.PaddingMode value)

Disassembly:
	0x035DAAFC LDRB W8, [X0 + 0x18]
	0x035DAB00 LDR X3, [X0 + 0x58]
	0x035DAB04 CBZ W8, 0x35DAB0C
	0x035DAB08 B 0x35DAB10
	0x035DAB0C B 0x35DC93C
	0x035DAB10 SUB X31, X31, 0xB0
	0x035DAB14 STP X29, X30, [X31 + 0x50]
	0x035DAB18 STP X28, X27, [X31 + 0x60]
	0x035DAB1C STP X26, X25, [X31 + 0x70]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+616]
	007 Move X2, [X8+624]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Security.Cryptography.ICryptoTransform CreateDecryptor()

Disassembly:
	0x035DAB20 STP X24, X23, [X31 + 0x80]
	0x035DAB24 STP X22, X21, [X31 + 0x90]
	0x035DAB28 STP X20, X19, [X31 + 0xA0]
	0x035DAB2C ADRP X19, 0xE06000
	0x035DAB30 LDRB W8, [X19 + 0x252]
	0x035DAB34 MOV X20, X3
	0x035DAB38 MOV X21, X2
	0x035DAB3C MOV X22, X1
	0x035DAB40 STR X0, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+664]
	007 Move X1, [X8+672]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Security.Cryptography.ICryptoTransform CreateDecryptor(System.Byte[] key, System.Byte[] iv)

Disassembly:
	0x035DAB44 TBNZ X8, 0x0, 0x35DAB5C
	0x035DAB48 ADRP X0, 0xB5F000
	0x035DAB4C LDR X0, [X0 + 0x38]
	0x035DAB50 BL 0x1C16CF4
	0x035DAB54 MOVZ W8, 0x1
	0x035DAB58 STRB W8, [X19 + 0x252]
	0x035DAB5C CBZ X22, 0x35DC938
	0x035DAB60 LDR W8, [X22 + 0x18]
	0x035DAB64 CBZ W8, 0x35DC934
	0x035DAB68 CMP W8, 0x1
	0x035DAB6C B.EQ 0x35DC934
	0x035DAB70 CMP W8, 0x2
	0x035DAB74 B.LS 0x35DC934
	0x035DAB78 CMP W8, 0x3
	0x035DAB7C B.EQ 0x35DC934
	0x035DAB80 CBZ X20, 0x35DC938
	0x035DAB84 LDR W9, [X20 + 0x18]
	0x035DAB88 CBZ W9, 0x35DC934
	0x035DAB8C CMP W8, 0x4
	0x035DAB90 B.LS 0x35DC934
	0x035DAB94 CMP W8, 0x5
	0x035DAB98 B.EQ 0x35DC934
	0x035DAB9C CMP W8, 0x6
	0x035DABA0 B.LS 0x35DC934
	0x035DABA4 CMP W8, 0x7
	0x035DABA8 B.EQ 0x35DC934
	0x035DABAC CMP W9, 0x1
	0x035DABB0 B.LS 0x35DC934
	0x035DABB4 CMP W8, 0x8
	0x035DABB8 B.LS 0x35DC934
	0x035DABBC CMP W8, 0x9
	0x035DABC0 B.EQ 0x35DC934
	0x035DABC4 CMP W8, 0xA
	0x035DABC8 B.LS 0x35DC934
	0x035DABCC CMP W8, 0xB
	0x035DABD0 B.EQ 0x35DC934
	0x035DABD4 CMP W9, 0x2
	0x035DABD8 B.LS 0x35DC934
	0x035DABDC CMP W8, 0xC
	0x035DABE0 B.LS 0x35DC934
	0x035DABE4 CMP W8, 0xD
	0x035DABE8 B.EQ 0x35DC934
	0x035DABEC CMP W8, 0xE
	0x035DABF0 B.LS 0x35DC934
	0x035DABF4 CMP W8, 0xF
	0x035DABF8 B.EQ 0x35DC934
	0x035DABFC CMP W9, 0x3
	0x035DAC00 STR X21, [X31 + 0x38]
	0x035DAC04 B.LS 0x35DC934
	0x035DAC08 ADRP X25, 0xB5F000
	0x035DAC0C LDR X25, [X25 + 0x38]
	0x035DAC10 LDRB W24, [X22 + 0x20]
	0x035DAC14 LDRB W19, [X22 + 0x21]
	0x035DAC18 LDRB W13, [X22 + 0x22]
	0x035DAC1C LDR X0, [X25]
	0x035DAC20 LDRB W10, [X22 + 0x23]
	0x035DAC24 LDRB W23, [X22 + 0x24]
	0x035DAC28 LDRB W4, [X22 + 0x25]
	0x035DAC2C LDRB W14, [X22 + 0x26]
	0x035DAC30 LDRB W11, [X22 + 0x27]
	0x035DAC34 LDP W29, W2, [X20 + 0x20]
	0x035DAC38 LDRB W6, [X22 + 0x28]
	0x035DAC3C LDRB W28, [X22 + 0x29]
	0x035DAC40 LDRB W15, [X22 + 0x2A]
	0x035DAC44 LDRB W12, [X22 + 0x2B]
	0x035DAC48 LDRB W16, [X22 + 0x2C]
	0x035DAC4C LDRB W26, [X22 + 0x2D]
	0x035DAC50 LDRB W27, [X22 + 0x2E]
	0x035DAC54 LDRB W7, [X22 + 0x2F]
	0x035DAC58 LDR W8, [X0 + 0xE0]
	0x035DAC5C LDP W21, W30, [X20 + 0x28]
	0x035DAC60 CBNZ W8, 0x35DACD4
	0x035DAC64 STP W7, W2, [X31 + 0x1C]
	0x035DAC68 STR X20, [X31 + 0x48]
	0x035DAC6C STP W27, W26, [X31 + 0x2C]
	0x035DAC70 MOV W26, W30
	0x035DAC74 MOV W27, W16
	0x035DAC78 MOV W20, W12
	0x035DAC7C STP W15, W21, [X31 + 0x24]
	0x035DAC80 STP W6, W23, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {38}
	007 Move W8, [X1+24]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X2, X31
	011 Move W1, W8
	012 ShiftRight W1, 29
	013 And W1, W1, 0xFFFFFFF
	014 Move X21, X0
	015 Call SymmetricAlgorithm.ValidKeySize, X0, X1
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {56}
	020 Compare X19, 0
	021 JumpIfEqual {25}
	022 Move W8, [X21+16]
	023 Move W9, [X19+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, [X21+72]
	026 Compare X0, 0
	027 JumpIfEqual {67}
	028 Move X8, [X0]
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X4, [X8+680]
	034 Move X3, [X8+688]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X4
	038 Move X0, 0xB1F000
	039 Move X0, [X0+1320]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X19, X0
	043 Move X0, 0xB44000
	044 Move X0, [X0+112]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Move X2, X31
	049 Call ArgumentNullException..ctor, X0, X1
	050 Move X0, 0xB60000
	051 Move X0, [X0+40]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Call 0x1C17DEC
	056 Move X0, 0xB49000
	057 Move X0, [X0+3848]
	058 Call 0x1C17D08
	059 Move X19, X0
	060 Move X0, 0xB22000
	061 Move X0, [X0+1400]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X20, X0
	065 Move X0, 0xB44000
	066 Move X0, [X0+112]
	067 Call 0x1C17F20
	068 Move X0, 0xB4A000
	069 Move X0, [X0+456]
	070 Call 0x1C17D08
	071 Move X19, X0
	072 Move X0, 0xB22000
	073 Move X0, [X0+1400]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X20, X0
	077 Move X0, 0xB4F000
	078 Move X0, [X0+2880]
	079 Call 0x1C17D08
	080 Move X2, X0
	081 Move X0, X20
	082 Move X1, X19
	083 Move X3, X31
	084 Call ArgumentException..ctor, X0, X1, X2
	085 Move X0, 0xB60000
	086 Move X0, [X0+40]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X20
	090 Call 0x1C17DEC

Method: System.Security.Cryptography.ICryptoTransform CreateEncryptor()

Disassembly:
	0x035DAC84 MOV W21, W11
	0x035DAC88 MOV W22, W14
	0x035DAC8C STR W4, [X31 + 0x18]
	0x035DAC90 MOV W23, W10
	0x035DAC94 STR W13, [X31 + 0xC]
	0x035DAC98 BL 0x1C16DFC
	0x035DAC9C LDP W13, W6, [X31 + 0xC]
	0x035DACA0 MOV W10, W23
	0x035DACA4 LDP W23, W4, [X31 + 0x14]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+632]
	007 Move X1, [X8+640]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Security.Cryptography.ICryptoTransform CreateEncryptor(System.Byte[] key, System.Byte[] iv)

Disassembly:
	0x035DACA8 LDP W2, W15, [X31 + 0x20]
	0x035DACAC MOV W11, W21
	0x035DACB0 MOV W12, W20
	0x035DACB4 MOV W16, W27
	0x035DACB8 LDP W21, W27, [X31 + 0x28]
	0x035DACBC MOV W30, W26
	0x035DACC0 LDR W26, [X31 + 0x30]
	0x035DACC4 LDR X20, [X31 + 0x48]
	0x035DACC8 LDR W7, [X31 + 0x1C]
	0x035DACCC LDR X0, [X25]
	0x035DACD0 MOV W14, W22
	0x035DACD4 LDR X17, [X0 + 0xB8]
	0x035DACD8 LDR X8, [X17 + 0x18]
	0x035DACDC CBZ X8, 0x35DC938
	0x035DACE0 UBFM W9, W24, 0x8, 0x7
	0x035DACE4 BFM W9, W19, 0x10, 0x7
	0x035DACE8 BFM W9, W13, 0x18, 0x7
	0x035DACEC LDR W13, [X8 + 0x18]
	0x035DACF0 ORR W9, W9, W10, 0x0
	0x035DACF4 EOR W3, W29, W9, 0x0
	0x035DACF8 UBFM W1, W3, 0x18, 0x1F
	0x035DACFC CMP W1, W13
	0x035DAD00 B.CS 0x35DC934
	0x035DAD04 LDR X10, [X17 + 0x20]
	0x035DAD08 CBZ X10, 0x35DC938
	0x035DAD0C UBFM W9, W23, 0x8, 0x7
	0x035DAD10 BFM W9, W4, 0x10, 0x7
	0x035DAD14 BFM W9, W14, 0x18, 0x7
	0x035DAD18 LDR W14, [X10 + 0x18]
	0x035DAD1C ORR W9, W9, W11, 0x0
	0x035DAD20 EOR W4, W9, W2, 0x0
	0x035DAD24 UBFM W2, W4, 0x10, 0x17
	0x035DAD28 CMP W2, W14
	0x035DAD2C B.CS 0x35DC934
	0x035DAD30 LDR X11, [X17 + 0x28]
	0x035DAD34 CBZ X11, 0x35DC938
	0x035DAD38 UBFM W9, W6, 0x8, 0x7
	0x035DAD3C BFM W9, W28, 0x10, 0x7
	0x035DAD40 BFM W9, W15, 0x18, 0x7
	0x035DAD44 LDR W15, [X11 + 0x18]
	0x035DAD48 ORR W9, W9, W12, 0x0
	0x035DAD4C EOR W6, W9, W21, 0x0
	0x035DAD50 UBFM W5, W6, 0x8, 0xF
	0x035DAD54 CMP W5, W15
	0x035DAD58 B.CS 0x35DC934
	0x035DAD5C LDR X12, [X17 + 0x30]
	0x035DAD60 CBZ X12, 0x35DC938
	0x035DAD64 UBFM W9, W16, 0x8, 0x7
	0x035DAD68 BFM W9, W26, 0x10, 0x7
	0x035DAD6C BFM W9, W27, 0x18, 0x7
	0x035DAD70 LDR W16, [X12 + 0x18]
	0x035DAD74 ORR W9, W9, W7, 0x0
	0x035DAD78 EOR W9, W9, W30, 0x0
	0x035DAD7C AND W24, W9, 0xFF
	0x035DAD80 CMP W24, W16
	0x035DAD84 B.CS 0x35DC934
	0x035DAD88 STR X17, [X31 + 0x30]
	0x035DAD8C LDR W17, [X20 + 0x18]
	0x035DAD90 CMP W17, 0x4
	0x035DAD94 B.LS 0x35DC934
	0x035DAD98 UBFM W7, W4, 0x18, 0x1F
	0x035DAD9C CMP W7, W13
	0x035DADA0 B.CS 0x35DC934
	0x035DADA4 UBFM W22, W6, 0x10, 0x17
	0x035DADA8 CMP W22, W14
	0x035DADAC B.CS 0x35DC934
	0x035DADB0 UBFM W25, W9, 0x8, 0xF
	0x035DADB4 CMP W25, W15
	0x035DADB8 B.CS 0x35DC934
	0x035DADBC AND W27, W3, 0xFF
	0x035DADC0 CMP W27, W16
	0x035DADC4 B.CS 0x35DC934
	0x035DADC8 CMP W17, 0x5
	0x035DADCC B.LS 0x35DC934
	0x035DADD0 UBFM W26, W6, 0x18, 0x1F
	0x035DADD4 CMP W26, W13
	0x035DADD8 B.CS 0x35DC934
	0x035DADDC UBFM W28, W9, 0x10, 0x17
	0x035DADE0 CMP W28, W14
	0x035DADE4 B.CS 0x35DC934

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {38}
	007 Move W8, [X1+24]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X2, X31
	011 Move W1, W8
	012 ShiftRight W1, 29
	013 And W1, W1, 0xFFFFFFF
	014 Move X21, X0
	015 Call SymmetricAlgorithm.ValidKeySize, X0, X1
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {56}
	020 Compare X19, 0
	021 JumpIfEqual {25}
	022 Move W8, [X21+16]
	023 Move W9, [X19+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, [X21+72]
	026 Compare X0, 0
	027 JumpIfEqual {67}
	028 Move X8, [X0]
	029 Move X1, X20
	030 Move X2, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X4, [X8+648]
	034 Move X3, [X8+656]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X4
	038 Move X0, 0xB1F000
	039 Move X0, [X0+1320]
	040 Call 0x1C17D08
	041 Call 0x1C17F10
	042 Move X19, X0
	043 Move X0, 0xB44000
	044 Move X0, [X0+112]
	045 Call 0x1C17D08
	046 Move X1, X0
	047 Move X0, X19
	048 Move X2, X31
	049 Call ArgumentNullException..ctor, X0, X1
	050 Move X0, 0xB60000
	051 Move X0, [X0+48]
	052 Call 0x1C17D08
	053 Move X1, X0
	054 Move X0, X19
	055 Call 0x1C17DEC
	056 Move X0, 0xB49000
	057 Move X0, [X0+3848]
	058 Call 0x1C17D08
	059 Move X19, X0
	060 Move X0, 0xB22000
	061 Move X0, [X0+1400]
	062 Call 0x1C17D08
	063 Call 0x1C17F10
	064 Move X20, X0
	065 Move X0, 0xB44000
	066 Move X0, [X0+112]
	067 Call 0x1C17F20
	068 Move X0, 0xB4A000
	069 Move X0, [X0+456]
	070 Call 0x1C17D08
	071 Move X19, X0
	072 Move X0, 0xB22000
	073 Move X0, [X0+1400]
	074 Call 0x1C17D08
	075 Call 0x1C17F10
	076 Move X20, X0
	077 Move X0, 0xB4F000
	078 Move X0, [X0+2880]
	079 Call 0x1C17D08
	080 Move X2, X0
	081 Move X0, X20
	082 Move X1, X19
	083 Move X3, X31
	084 Call ArgumentException..ctor, X0, X1, X2
	085 Move X0, 0xB60000
	086 Move X0, [X0+48]
	087 Call 0x1C17D08
	088 Move X1, X0
	089 Move X0, X20
	090 Call 0x1C17DEC

Method: System.Void Dispose(System.Boolean disposing)

Disassembly:
	0x035DADE8 UBFM W29, W3, 0x8, 0xF
	0x035DADEC CMP W29, W15
	0x035DADF0 B.CS 0x35DC934
	0x035DADF4 AND W21, W4, 0xFF
	0x035DADF8 CMP W21, W16
	0x035DADFC B.CS 0x35DC934
	0x035DAE00 CMP W17, 0x6
	0x035DAE04 STR X0, [X31 + 0x48]
	0x035DAE08 B.LS 0x35DC934
	0x035DAE0C UBFM W30, W9, 0x18, 0x1F
	0x035DAE10 CMP W30, W13
	0x035DAE14 B.CS 0x35DC934
	0x035DAE18 UBFM W23, W3, 0x10, 0x17
	0x035DAE1C CMP W23, W14
	0x035DAE20 B.CS 0x35DC934
	0x035DAE24 UBFM W9, W4, 0x8, 0xF
	0x035DAE28 CMP W9, W15
	0x035DAE2C B.CS 0x35DC934
	0x035DAE30 AND W0, W6, 0xFF
	0x035DAE34 CMP W0, W16
	0x035DAE38 B.CS 0x35DC934
	0x035DAE3C CMP W17, 0x7
	0x035DAE40 B.LS 0x35DC934
	0x035DAE44 ADD X1, X8, W1, 0x2, UXTW
	0x035DAE48 ADD X2, X10, W2, 0x2, UXTW
	0x035DAE4C ADD X3, X11, W5, 0x2, UXTW
	0x035DAE50 LDR W1, [X1 + 0x20]
	0x035DAE54 LDR W2, [X2 + 0x20]
	0x035DAE58 LDR W3, [X3 + 0x20]
	0x035DAE5C ADD X4, X12, W24, 0x2, UXTW
	0x035DAE60 LDR W4, [X4 + 0x20]
	0x035DAE64 LDR W5, [X20 + 0x30]
	0x035DAE68 EOR W1, W2, W1, 0x0
	0x035DAE6C EOR W1, W1, W3, 0x0
	0x035DAE70 EOR W1, W1, W4, 0x0
	0x035DAE74 EOR W3, W1, W5, 0x0
	0x035DAE78 UBFM W1, W3, 0x18, 0x1F
	0x035DAE7C CMP W1, W13
	0x035DAE80 B.CS 0x35DC934
	0x035DAE84 ADD X2, X8, W7, 0x2, UXTW
	0x035DAE88 ADD X4, X10, W22, 0x2, UXTW
	0x035DAE8C ADD X5, X11, W25, 0x2, UXTW
	0x035DAE90 LDR W2, [X2 + 0x20]
	0x035DAE94 LDR W4, [X4 + 0x20]
	0x035DAE98 LDR W5, [X5 + 0x20]
	0x035DAE9C ADD X6, X12, W27, 0x2, UXTW
	0x035DAEA0 LDR W6, [X6 + 0x20]
	0x035DAEA4 LDR W7, [X20 + 0x34]
	0x035DAEA8 EOR W2, W4, W2, 0x0
	0x035DAEAC EOR W2, W2, W5, 0x0
	0x035DAEB0 EOR W2, W2, W6, 0x0
	0x035DAEB4 EOR W4, W2, W7, 0x0
	0x035DAEB8 UBFM W2, W4, 0x10, 0x17
	0x035DAEBC CMP W2, W14
	0x035DAEC0 B.CS 0x35DC934
	0x035DAEC4 ADD X5, X8, W26, 0x2, UXTW
	0x035DAEC8 ADD X6, X10, W28, 0x2, UXTW
	0x035DAECC ADD X7, X11, W29, 0x2, UXTW
	0x035DAED0 LDR W5, [X5 + 0x20]
	0x035DAED4 LDR W6, [X6 + 0x20]
	0x035DAED8 LDR W7, [X7 + 0x20]
	0x035DAEDC ADD X19, X12, W21, 0x2, UXTW
	0x035DAEE0 LDR W19, [X19 + 0x20]
	0x035DAEE4 LDR W21, [X20 + 0x38]
	0x035DAEE8 EOR W5, W6, W5, 0x0
	0x035DAEEC EOR W5, W5, W7, 0x0
	0x035DAEF0 EOR W5, W5, W19, 0x0
	0x035DAEF4 EOR W6, W5, W21, 0x0
	0x035DAEF8 UBFM W5, W6, 0x8, 0xF
	0x035DAEFC CMP W5, W15
	0x035DAF00 B.CS 0x35DC934
	0x035DAF04 ADD X7, X8, W30, 0x2, UXTW
	0x035DAF08 ADD X19, X10, W23, 0x2, UXTW
	0x035DAF0C ADD X9, X11, W9, 0x2, UXTW
	0x035DAF10 LDR W7, [X7 + 0x20]
	0x035DAF14 LDR W19, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE07000
	006 Move W8, [X21+588]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB1A000
	014 Move X0, [X0+3584]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+588], W8
	018 Move TEMP, X20
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {48}
	022 Move X21, [X19+72]
	023 Compare X21, 0
	024 JumpIfEqual {57}
	025 Move X10, 0xB1A000
	026 Move X8, [X21]
	027 Move X10, [X10+3584]
	028 NotImplemented "Instruction LDRH not yet implemented."
	029 Move X1, [X10]
	030 Compare X9, 0
	031 JumpIfEqual {38}
	032 Move X10, [X8+176]
	033 Add X10, X10, 8
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Subtract X9, X9, 1
	037 Add X10, X10, 16
	038 Move X0, X21
	039 Move W2, W31
	040 Call 0x1C5D788
	041 NotImplemented "Instruction LDRSW not yet implemented."
	042 Add X8, X8, X9
	043 Add X0, X8, 312
	044 Move X8, [X0]
	045 Move X1, [X0+8]
	046 Move X0, X21
	047 NotImplemented "Instruction BLR not yet implemented."
	048 And W1, W20, 1
	049 Move X0, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X2, X31
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call SymmetricAlgorithm.Dispose, X0, X1
	056 Return 
	057 Call 0x1C17F20
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X21, X0
	060 Move X0, X21
	061 Call 0x3EB2AD0
	062 Move X20, [X0]
	063 Call 0x3EB2AE0
	064 Move W1, 1
	065 Move X0, X19
	066 Move X2, X31
	067 Call SymmetricAlgorithm.Dispose, X0, X1
	068 Compare X20, 0
	069 JumpIfNotEqual {76}
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return 
	075 Move X20, X31
	076 Move X0, X20
	077 Call 0x1C17F18
	078 Move X21, X0
	079 Move W1, 1
	080 Move X0, X19
	081 Move X2, X31
	082 Call SymmetricAlgorithm.Dispose, X0, X1
	083 Compare X20, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X21
	086 Call 0x1D2D690
	087 Move X0, X20
	088 Call 0x1C17F18
	089 Call 0x1991590

Method: System.Void GenerateIV()

Disassembly:
	0x035DAF18 LDR W9, [X9 + 0x20]
	0x035DAF1C ADD X0, X12, W0, 0x2, UXTW
	0x035DAF20 LDR W0, [X0 + 0x20]
	0x035DAF24 LDR W21, [X20 + 0x3C]
	0x035DAF28 EOR W7, W19, W7, 0x0
	0x035DAF2C EOR W9, W7, W9, 0x0
	0x035DAF30 EOR W9, W9, W0, 0x0
	0x035DAF34 EOR W9, W9, W21, 0x0
	0x035DAF38 AND W22, W9, 0xFF

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+712]
	007 Move X1, [X8+720]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void GenerateKey()

Disassembly:
	0x035DAF3C CMP W22, W16
	0x035DAF40 B.CS 0x35DC934
	0x035DAF44 CMP W17, 0x8
	0x035DAF48 B.LS 0x35DC934
	0x035DAF4C UBFM W7, W4, 0x18, 0x1F
	0x035DAF50 CMP W7, W13
	0x035DAF54 B.CS 0x35DC934
	0x035DAF58 UBFM W24, W6, 0x10, 0x17
	0x035DAF5C CMP W24, W14

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+72]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+696]
	007 Move X1, [X8+704]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

