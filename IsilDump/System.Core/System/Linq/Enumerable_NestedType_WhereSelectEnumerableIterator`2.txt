Type: System.Linq.Enumerable/WhereSelectEnumerableIterator`2

Method: System.Void .ctor(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource, System.Boolean> predicate, System.Func`2<TSource, TResult> selector)

Disassembly:
	0x0286C134 LDR X8, [X8 + 0xC0]
	0x0286C138 LDR X8, [X8 + 0x88]
	0x0286C13C LDRB W9, [X8 + 0x135]
	0x0286C140 TBNZ X9, 0x0, 0x286C150
	0x0286C144 MOV X0, X8
	0x0286C148 BL 0x1C5C684
	0x0286C14C MOV X8, X0
	0x0286C150 MOV X0, X8
	0x0286C154 BL 0x1C16F10
	0x0286C158 LDR X8, [X20 + 0x20]
	0x0286C15C MOV X1, X21
	0x0286C160 MOV X2, X19
	0x0286C164 MOV X20, X0
	0x0286C168 LDR X8, [X8 + 0xC0]
	0x0286C16C LDR X3, [X8 + 0x90]
	0x0286C170 BL 0x2857580
	0x0286C174 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X4+32]
	007 Move X21, X1
	008 Move X19, X3
	009 Move X20, X2
	010 Move X8, [X8+192]
	011 Move X22, X0
	012 Move X1, [X8]
	013 Call Iterator`1<ValueTuple`2<Object, Object>>..ctor, X0
	014 Move [X22+40], X21
	015 Move [X22+48], X20
	016 Move [X22+56], X19
	017 Move X20, [X31+32]
	018 Move X19, [X31+40]
	019 Move X22, [X31+16]
	020 Move X21, [X31+24]
	021 Move X30, [X31+48]
	022 Return 

Method: System.Linq.Enumerable/Iterator`1<TResult> Clone()

Disassembly:
	0x0286C178 LDP X20, X19, [X31 + 0x10]
	0x0286C17C LDP X30, X21, [X31], #0x20
	0x0286C180 RET
	0x0286C184 STR X30, [X31 - 0x30]!
	0x0286C188 STP X22, X21, [X31 + 0x10]
	0x0286C18C STP X20, X19, [X31 + 0x20]
	0x0286C190 LDR X8, [X4 + 0x20]
	0x0286C194 MOV X21, X1
	0x0286C198 MOV X19, X3
	0x0286C19C MOV X20, X2
	0x0286C1A0 LDR X8, [X8 + 0xC0]
	0x0286C1A4 MOV X22, X0
	0x0286C1A8 LDR X1, [X8]
	0x0286C1AC BL 0x2EA3EB8
	0x0286C1B0 STP X21, X20, [X22 + 0x28]
	0x0286C1B4 STR X19, [X22 + 0x38]
	0x0286C1B8 LDP X20, X19, [X31 + 0x20]
	0x0286C1BC LDP X22, X21, [X31 + 0x10]
	0x0286C1C0 LDR X30, [X31], #0x30
	0x0286C1C4 RET
	0x0286C1C8 STR X30, [X31 - 0x30]!
	0x0286C1CC STP X22, X21, [X31 + 0x10]
	0x0286C1D0 STP X20, X19, [X31 + 0x20]
	0x0286C1D4 LDR X9, [X1 + 0x20]
	0x0286C1D8 MOV X8, X0
	0x0286C1DC LDP X21, X20, [X8 + 0x28]
	0x0286C1E0 LDR X22, [X8 + 0x38]
	0x0286C1E4 LDR X9, [X9 + 0xC0]
	0x0286C1E8 MOV X19, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X9, [X1+32]
	007 Move X8, X0
	008 Move X21, [X8+40]
	009 Move X20, [X8+48]
	010 Move X22, [X8+56]
	011 Move X9, [X9+192]
	012 Move X19, X1
	013 Move X0, [X9+24]
	014 Move W9, [X0+309]
	015 Move TEMP, X9
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {20}
	019 Call 0x1C5D684
	020 Call 0x1C17F10
	021 Move X8, [X19+32]
	022 Move X19, X0
	023 Move X8, [X8+192]
	024 Move X8, [X8+48]
	025 Move X8, [X8+32]
	026 Move X8, [X8+192]
	027 Move X1, [X8]
	028 Call Iterator`1<ValueTuple`2<Object, Object>>..ctor, X0
	029 Move [X19+40], X21
	030 Move [X19+48], X20
	031 Move [X19+56], X22
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Void Dispose()

Disassembly:
	0x0286C1EC LDR X0, [X9 + 0x18]
	0x0286C1F0 LDRB W9, [X0 + 0x135]
	0x0286C1F4 TBNZ X9, 0x0, 0x286C1FC
	0x0286C1F8 BL 0x1C5C684
	0x0286C1FC BL 0x1C16F10
	0x0286C200 LDR X8, [X19 + 0x20]
	0x0286C204 MOV X19, X0
	0x0286C208 LDR X8, [X8 + 0xC0]
	0x0286C20C LDR X8, [X8 + 0x30]
	0x0286C210 LDR X8, [X8 + 0x20]
	0x0286C214 LDR X8, [X8 + 0xC0]
	0x0286C218 LDR X1, [X8]
	0x0286C21C BL 0x2EA3EB8
	0x0286C220 STP X21, X20, [X19 + 0x28]
	0x0286C224 STR X22, [X19 + 0x38]
	0x0286C228 MOV X0, X19
	0x0286C22C LDP X20, X19, [X31 + 0x20]
	0x0286C230 LDP X22, X21, [X31 + 0x10]
	0x0286C234 LDR X30, [X31], #0x30
	0x0286C238 RET
	0x0286C23C STP X30, X21, [X31 - 0x20]!
	0x0286C240 STP X20, X19, [X31 + 0x10]
	0x0286C244 ADRP X21, 0x1B6E000
	0x0286C248 LDRB W8, [X21 + 0xB32]
	0x0286C24C MOV X19, X1
	0x0286C250 MOV X20, X0
	0x0286C254 TBNZ X8, 0x0, 0x286C26C
	0x0286C258 ADRP X0, 0x1887000
	0x0286C25C LDR X0, [X0 + 0xE00]
	0x0286C260 BL 0x1C16CF4
	0x0286C264 MOVZ W8, 0x1
	0x0286C268 STRB W8, [X21 + 0xB32]
	0x0286C26C LDR X21, [X20 + 0x40]
	0x0286C270 CBZ X21, 0x286C2D4
	0x0286C274 ADRP X10, 0x1887000
	0x0286C278 LDR X8, [X21]
	0x0286C27C LDR X10, [X10 + 0xE00]
	0x0286C280 LDRH W9, [X8 + 0x12E]
	0x0286C284 LDR X1, [X10]
	0x0286C288 CBZ X9, 0x286C2AC
	0x0286C28C LDR X10, [X8 + 0xB0]
	0x0286C290 ADD X10, X10, 0x8
	0x0286C294 LDUR X11, [X10 - 0x8]
	0x0286C298 CMP X11, X1
	0x0286C29C B.EQ 0x286C2BC
	0x0286C2A0 SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1B6F000
	006 Move W8, [X21+2858]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x1888000
	014 Move X0, [X0+3584]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2858], W8
	018 Move X21, [X20+64]
	019 Compare X21, 0
	020 JumpIfEqual {44}
	021 Move X10, 0x1888000
	022 Move X8, [X21]
	023 Move X10, [X10+3584]
	024 NotImplemented "Instruction LDRH not yet implemented."
	025 Move X1, [X10]
	026 Compare X9, 0
	027 JumpIfEqual {34}
	028 Move X10, [X8+176]
	029 Add X10, X10, 8
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Subtract X9, X9, 1
	033 Add X10, X10, 16
	034 Move X0, X21
	035 Move W2, W31
	036 Call 0x1C5D788
	037 NotImplemented "Instruction LDRSW not yet implemented."
	038 Add X8, X8, X9
	039 Add X0, X8, 312
	040 Move X8, [X0]
	041 Move X1, [X0+8]
	042 Move X0, X21
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move [X20+64], X31
	045 Move X8, [X19+32]
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X8, [X8+192]
	050 Move X1, [X8+72]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Call Iterator`1<ValueTuple`2<Object, Object>>.Dispose, X0
	054 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x0286C2A4 ADD X10, X10, 0x10
	0x0286C2A8 B.NE 0x286C294
	0x0286C2AC MOV X0, X21
	0x0286C2B0 MOV W2, W31
	0x0286C2B4 BL 0x1C5C788
	0x0286C2B8 B 0x286C2C8
	0x0286C2BC LDRSW X9, [X10]
	0x0286C2C0 ADD X8, X8, X9, 0x4, LSL
	0x0286C2C4 ADD X0, X8, 0x138
	0x0286C2C8 LDP X8, X1, [X0]
	0x0286C2CC MOV X0, X21
	0x0286C2D0 BLR X8
	0x0286C2D4 STR X31, [X20 + 0x40]
	0x0286C2D8 LDR X8, [X19 + 0x20]
	0x0286C2DC MOV X0, X20
	0x0286C2E0 LDP X20, X19, [X31 + 0x10]
	0x0286C2E4 LDR X8, [X8 + 0xC0]
	0x0286C2E8 LDR X1, [X8 + 0x48]
	0x0286C2EC LDP X30, X21, [X31], #0x20
	0x0286C2F0 B 0x2EA3EF8
	0x0286C2F4 STP X30, X23, [X31 - 0x30]!
	0x0286C2F8 STP X22, X21, [X31 + 0x10]
	0x0286C2FC STP X20, X19, [X31 + 0x20]
	0x0286C300 ADRP X21, 0x1B6E000
	0x0286C304 LDRB W8, [X21 + 0xB33]
	0x0286C308 MOV X20, X1
	0x0286C30C MOV X19, X0
	0x0286C310 TBNZ X8, 0x0, 0x286C328
	0x0286C314 ADRP X0, 0x1887000
	0x0286C318 LDR X0, [X0 + 0xE18]
	0x0286C31C BL 0x1C16CF4
	0x0286C320 MOVZ W8, 0x1
	0x0286C324 STRB W8, [X21 + 0xB33]
	0x0286C328 LDR W8, [X19 + 0x14]
	0x0286C32C ADRP X23, 0x1887000
	0x0286C330 LDR X23, [X23 + 0xE18]
	0x0286C334 CMP W8, 0x2
	0x0286C338 B.EQ 0x286C3CC
	0x0286C33C CMP W8, 0x1
	0x0286C340 B.NE 0x286C518
	0x0286C344 LDR X21, [X19 + 0x28]
	0x0286C348 CBZ X21, 0x286C52C
	0x0286C34C LDR X8, [X20 + 0x20]
	0x0286C350 LDR X8, [X8 + 0xC0]
	0x0286C354 LDR X1, [X8 + 0x10]
	0x0286C358 LDRB W8, [X1 + 0x135]
	0x0286C35C TBNZ X8, 0x0, 0x286C36C
	0x0286C360 MOV X0, X1
	0x0286C364 BL 0x1C5C684
	0x0286C368 MOV X1, X0
	0x0286C36C LDR X8, [X21]
	0x0286C370 LDRH W9, [X8 + 0x12E]
	0x0286C374 CBZ X9, 0x286C398
	0x0286C378 LDR X10, [X8 + 0xB0]
	0x0286C37C ADD X10, X10, 0x8
	0x0286C380 LDUR X11, [X10 - 0x8]
	0x0286C384 CMP X11, X1
	0x0286C388 B.EQ 0x286C3A8
	0x0286C38C SUBS X9, X9, 0x1
	0x0286C390 ADD X10, X10, 0x10
	0x0286C394 B.NE 0x286C380
	0x0286C398 MOV X0, X21
	0x0286C39C MOV W2, W31
	0x0286C3A0 BL 0x1C5C788
	0x0286C3A4 B 0x286C3B4
	0x0286C3A8 LDRSW X9, [X10]
	0x0286C3AC ADD X8, X8, X9, 0x4, LSL
	0x0286C3B0 ADD X0, X8, 0x138
	0x0286C3B4 LDP X8, X1, [X0]
	0x0286C3B8 MOV X0, X21
	0x0286C3BC BLR X8
	0x0286C3C0 MOVZ W8, 0x2
	0x0286C3C4 STR X0, [X19 + 0x40]
	0x0286C3C8 STR W8, [X19 + 0x14]
	0x0286C3CC LDR X21, [X19 + 0x40]
	0x0286C3D0 CBZ X21, 0x286C52C
	0x0286C3D4 LDR X8, [X21]
	0x0286C3D8 LDR X1, [X23]
	0x0286C3DC LDRH W9, [X8 + 0x12E]
	0x0286C3E0 CBZ X9, 0x286C404
	0x0286C3E4 LDR X10, [X8 + 0xB0]
	0x0286C3E8 ADD X10, X10, 0x8
	0x0286C3EC LDUR X11, [X10 - 0x8]
	0x0286C3F0 CMP X11, X1
	0x0286C3F4 B.EQ 0x286C414
	0x0286C3F8 SUBS X9, X9, 0x1
	0x0286C3FC ADD X10, X10, 0x10
	0x0286C400 B.NE 0x286C3EC
	0x0286C404 MOV X0, X21
	0x0286C408 MOV W2, W31
	0x0286C40C BL 0x1C5C788
	0x0286C410 B 0x286C420
	0x0286C414 LDRSW X9, [X10]
	0x0286C418 ADD X8, X8, X9, 0x4, LSL
	0x0286C41C ADD X0, X8, 0x138
	0x0286C420 LDP X8, X1, [X0]
	0x0286C424 MOV X0, X21
	0x0286C428 BLR X8
	0x0286C42C TBZ X0, 0x0, 0x286C504
	0x0286C430 LDR X21, [X19 + 0x40]
	0x0286C434 CBZ X21, 0x286C52C
	0x0286C438 LDR X8, [X20 + 0x20]
	0x0286C43C LDR X8, [X8 + 0xC0]
	0x0286C440 LDR X1, [X8 + 0x40]
	0x0286C444 LDRB W8, [X1 + 0x135]
	0x0286C448 TBNZ X8, 0x0, 0x286C458
	0x0286C44C MOV X0, X1
	0x0286C450 BL 0x1C5C684
	0x0286C454 MOV X1, X0
	0x0286C458 LDR X8, [X21]
	0x0286C45C LDRH W9, [X8 + 0x12E]
	0x0286C460 CBZ X9, 0x286C484
	0x0286C464 LDR X10, [X8 + 0xB0]
	0x0286C468 ADD X10, X10, 0x8
	0x0286C46C LDUR X11, [X10 - 0x8]
	0x0286C470 CMP X11, X1
	0x0286C474 B.EQ 0x286C494
	0x0286C478 SUBS X9, X9, 0x1
	0x0286C47C ADD X10, X10, 0x10
	0x0286C480 B.NE 0x286C46C
	0x0286C484 MOV X0, X21
	0x0286C488 MOV W2, W31
	0x0286C48C BL 0x1C5C788
	0x0286C490 B 0x286C4A0
	0x0286C494 LDRSW X9, [X10]
	0x0286C498 ADD X8, X8, X9, 0x4, LSL
	0x0286C49C ADD X0, X8, 0x138
	0x0286C4A0 LDP X8, X1, [X0]
	0x0286C4A4 MOV X0, X21
	0x0286C4A8 BLR X8
	0x0286C4AC LDR X8, [X19 + 0x30]
	0x0286C4B0 MOV X21, X0
	0x0286C4B4 MOV X22, X1
	0x0286C4B8 CBZ X8, 0x286C4D8
	0x0286C4BC LDR X9, [X8 + 0x18]
	0x0286C4C0 LDR X0, [X8 + 0x40]
	0x0286C4C4 LDR X3, [X8 + 0x28]
	0x0286C4C8 MOV X1, X21
	0x0286C4CC MOV X2, X22
	0x0286C4D0 BLR X9
	0x0286C4D4 TBZ X0, 0x0, 0x286C3CC
	0x0286C4D8 LDR X8, [X19 + 0x38]
	0x0286C4DC CBZ X8, 0x286C52C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x1B6F000
	008 Move W8, [X21+2859]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x1888000
	016 Move X0, [X0+3608]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2859], W8
	020 Move W8, [X19+20]
	021 Move X23, 0x1888000
	022 Move X23, [X23+3608]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X21, [X19+40]
	026 Compare X21, 0
	027 JumpIfEqual {166}
	028 Move X8, [X20+32]
	029 Move X8, [X8+192]
	030 Move X1, [X8+16]
	031 Move W8, [X1+309]
	032 Move TEMP, X8
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {39}
	036 Move X0, X1
	037 Call 0x1C5D684
	038 Move X1, X0
	039 Move X8, [X21]
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Compare X9, 0
	042 JumpIfEqual {49}
	043 Move X10, [X8+176]
	044 Add X10, X10, 8
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X9, X9, 1
	048 Add X10, X10, 16
	049 Move X0, X21
	050 Move W2, W31
	051 Call 0x1C5D788
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Add X8, X8, X9
	054 Add X0, X8, 312
	055 Move X8, [X0]
	056 Move X1, [X0+8]
	057 Move X0, X21
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move W8, 2
	060 Move [X19+64], X0
	061 Move [X19+20], W8
	062 Move X21, [X19+64]
	063 Compare X21, 0
	064 JumpIfEqual {166}
	065 Move X8, [X21]
	066 Move X1, [X23]
	067 NotImplemented "Instruction LDRH not yet implemented."
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move X0, X21
	077 Move W2, W31
	078 Call 0x1C5D788
	079 NotImplemented "Instruction LDRSW not yet implemented."
	080 Add X8, X8, X9
	081 Add X0, X8, 312
	082 Move X8, [X0]
	083 Move X1, [X0+8]
	084 Move X0, X21
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {151}
	090 Move X21, [X19+64]
	091 Compare X21, 0
	092 JumpIfEqual {166}
	093 Move X8, [X20+32]
	094 Move X8, [X8+192]
	095 Move X1, [X8+64]
	096 Move W8, [X1+309]
	097 Move TEMP, X8
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfEqual {104}
	101 Move X0, X1
	102 Call 0x1C5D684
	103 Move X1, X0
	104 Move X8, [X21]
	105 NotImplemented "Instruction LDRH not yet implemented."
	106 Compare X9, 0
	107 JumpIfEqual {114}
	108 Move X10, [X8+176]
	109 Add X10, X10, 8
	110 NotImplemented "Instruction LDUR not yet implemented."
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Subtract X9, X9, 1
	113 Add X10, X10, 16
	114 Move X0, X21
	115 Move W2, W31
	116 Call 0x1C5D788
	117 NotImplemented "Instruction LDRSW not yet implemented."
	118 Add X8, X8, X9
	119 Add X0, X8, 312
	120 Move X8, [X0]
	121 Move X1, [X0+8]
	122 Move X0, X21
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X8, [X19+48]
	125 Move X21, X0
	126 Move X22, X1
	127 Compare X8, 0
	128 JumpIfEqual {139}
	129 Move X9, [X8+24]
	130 Move X0, [X8+64]
	131 Move X3, [X8+40]
	132 Move X1, X21
	133 Move X2, X22
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {62}
	139 Move X8, [X19+56]
	140 Compare X8, 0
	141 JumpIfEqual {166}
	142 Move X9, [X8+24]
	143 Move X0, [X8+64]
	144 Move X3, [X8+40]
	145 Move X1, X21
	146 Move X2, X22
	147 NotImplemented "Instruction BLR not yet implemented."
	148 Move [X19+24], X0
	149 Move [X19+32], X1
	150 Move W0, 1
	151 Compare X19, 0
	152 JumpIfEqual {166}
	153 Move X8, [X19]
	154 Move X0, X19
	155 Move X9, [X8+504]
	156 Move X1, [X8+512]
	157 NotImplemented "Instruction BLR not yet implemented."
	158 Move W0, W31
	159 Move X20, [X31+32]
	160 Move X19, [X31+40]
	161 Move X22, [X31+16]
	162 Move X21, [X31+24]
	163 Move X30, [X31+48]
	164 Move X23, [X31+56]
	165 Return X0
	166 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerable`1<TResult2> Select(System.Func`2<TResult, TResult2> selector)

Disassembly:
	0x02270458 LDP X30, X23, [X31], #0x30
	0x0227045C RET
	0x02270460 STP X30, X23, [X31 - 0x30]!
	0x02270464 STP X22, X21, [X31 + 0x10]
	0x02270468 STP X20, X19, [X31 + 0x20]
	0x0227046C LDR X8, [X2 + 0x38]
	0x02270470 MOV X19, X2
	0x02270474 MOV X22, X1
	0x02270478 MOV X23, X0
	0x0227047C CBNZ X8, 0x227048C
	0x02270480 MOV X0, X19
	0x02270484 BL 0x1C5C6E0
	0x02270488 LDR X8, [X19 + 0x38]
	0x0227048C LDR X0, [X23 + 0x30]
	0x02270490 LDR X2, [X8 + 0x8]
	0x02270494 LDP X20, X21, [X23 + 0x20]
	0x02270498 MOV X1, X22
	0x0227049C BL 0x21B6854
	0x022704A0 LDR X8, [X19 + 0x38]
	0x022704A4 MOV X22, X0
	0x022704A8 LDR X8, [X8 + 0x18]
	0x022704AC LDRB W9, [X8 + 0x135]
	0x022704B0 TBNZ X9, 0x0, 0x22704C0
	0x022704B4 MOV X0, X8
	0x022704B8 BL 0x1C5C684
	0x022704BC MOV X8, X0
	0x022704C0 MOV X0, X8
	0x022704C4 BL 0x1C16F10
	0x022704C8 LDR X8, [X19 + 0x38]
	0x022704CC MOV X1, X20
	0x022704D0 MOV X2, X21
	0x022704D4 MOV X3, X22
	0x022704D8 LDR X4, [X8 + 0x20]
	0x022704DC MOV X19, X0
	0x022704E0 BL 0x287214C
	0x022704E4 MOV X0, X19
	0x022704E8 LDP X20, X19, [X31 + 0x20]
	0x022704EC LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X2+56]
	008 Move X19, X2
	009 Move X22, X1
	010 Move X23, X0
	011 Compare X8, 0
	012 JumpIfNotEqual {16}
	013 Move X0, X19
	014 Call 0x1C5D6E0
	015 Move X8, [X19+56]
	016 Move X0, [X23+48]
	017 Move X2, [X8+8]
	018 Move X20, [X23+32]
	019 Move X21, [X23+40]
	020 Move X1, X22
	021 Call 0x21B6774, X0, X1
	022 Move X8, [X19+56]
	023 Move X22, X0
	024 Move X8, [X8+24]
	025 Move W9, [X8+309]
	026 Move TEMP, X9
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {33}
	030 Move X0, X8
	031 Call 0x1C5D684
	032 Move X8, X0
	033 Move X0, X8
	034 Call 0x1C17F10
	035 Move X8, [X19+56]
	036 Move X1, X20
	037 Move X2, X21
	038 Move X3, X22
	039 Move X4, [X8+32]
	040 Move X19, X0
	041 Call WhereSelectEnumerableIterator`2<KeyValuePair`2<Edge, Object>, Edge>..ctor, X0, X1, X2, X3
	042 Move X0, X19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Return X0

Method: System.Collections.Generic.IEnumerable`1<TResult> Where(System.Func`2<TResult, System.Boolean> predicate)

Disassembly:
	0x0286C4E0 LDR X9, [X8 + 0x18]
	0x0286C4E4 LDR X0, [X8 + 0x40]
	0x0286C4E8 LDR X3, [X8 + 0x28]
	0x0286C4EC MOV X1, X21
	0x0286C4F0 MOV X2, X22
	0x0286C4F4 BLR X9
	0x0286C4F8 STP X0, X1, [X19 + 0x18]
	0x0286C4FC MOVZ W0, 0x1
	0x0286C500 B 0x286C51C
	0x0286C504 CBZ X19, 0x286C52C
	0x0286C508 LDR X8, [X19]
	0x0286C50C MOV X0, X19
	0x0286C510 LDP X9, X1, [X8 + 0x1F8]
	0x0286C514 BLR X9
	0x0286C518 MOV W0, W31
	0x0286C51C LDP X20, X19, [X31 + 0x20]
	0x0286C520 LDP X22, X21, [X31 + 0x10]
	0x0286C524 LDP X30, X23, [X31], #0x30
	0x0286C528 RET
	0x0286C52C BL 0x1C16F20
	0x0286C530 STP X30, X21, [X31 - 0x20]!
	0x0286C534 STP X20, X19, [X31 + 0x10]
	0x0286C538 LDR X8, [X2 + 0x20]
	0x0286C53C MOV X20, X2
	0x0286C540 MOV X19, X1
	0x0286C544 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+32]
	006 Move X20, X2
	007 Move X19, X1
	008 Move X21, X0
	009 Move X8, [X8+192]
	010 Move X8, [X8+136]
	011 Move W9, [X8+309]
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X0, X8
	020 Call 0x1C17F10
	021 Move X8, [X20+32]
	022 Move X1, X21
	023 Move X2, X19
	024 Move X20, X0
	025 Move X8, [X8+192]
	026 Move X3, [X8+144]
	027 Call WhereEnumerableIterator`1<ValueTuple`2<Object, Object>>..ctor, X0, X1, X2
	028 Move X0, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Return X0

