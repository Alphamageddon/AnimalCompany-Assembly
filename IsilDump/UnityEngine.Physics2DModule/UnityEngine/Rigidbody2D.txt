Type: UnityEngine.Rigidbody2D

Method: UnityEngine.Vector2 get_position()

Disassembly:
	0x03C8A764 ADD X0, X0, 0x253
	0x03C8A768 BL 0x1C16CB8
	0x03C8A76C STR X0, [X19 + 0xD38]
	0x03C8A770 LDP X30, X19, [X31], #0x10
	0x03C8A774 BR X0
	0x03C8A778 STP X30, X19, [X31 - 0x10]!
	0x03C8A77C ADRP X19, 0x75C000
	0x03C8A780 LDR X0, [X19 + 0xD40]
	0x03C8A784 CBNZ X0, 0x3C8A798
	0x03C8A788 ADRP X0, 0xFFFFFFFFFCE95000
	0x03C8A78C ADD X0, X0, 0x5D3
	0x03C8A790 BL 0x1C16CB8
	0x03C8A794 STR X0, [X19 + 0xD40]
	0x03C8A798 LDP X30, X19, [X31], #0x10
	0x03C8A79C BR X0
	0x03C8A7A0 STR X30, [X31 - 0x20]!
	0x03C8A7A4 STP X20, X19, [X31 + 0x10]
	0x03C8A7A8 ADRP X20, 0x75C000
	0x03C8A7AC LDR X1, [X20 + 0xD48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X8, [X20+3328]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51777536
	011 Add X0, X0, 4062
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+3328], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_position(UnityEngine.Vector2 value)

Disassembly:
	0x03C8A7F4 BL 0x1C16CB8
	0x03C8A7F8 STR X0, [X19 + 0xD50]
	0x03C8A7FC LDP X30, X19, [X31], #0x10
	0x03C8A800 BR X0
	0x03C8A804 STR X30, [X31 - 0x20]!
	0x03C8A808 STP X20, X19, [X31 + 0x10]
	0x03C8A80C ADRP X20, 0x75C000
	0x03C8A810 ADRP X19, 0x469000
	0x03C8A814 LDRB W8, [X20 + 0xD58]
	0x03C8A818 LDR X19, [X19 + 0x5F8]
	0x03C8A81C TBNZ X8, 0x0, 0x3C8A834
	0x03C8A820 ADRP X0, 0x469000
	0x03C8A824 LDR X0, [X0 + 0x5F8]
	0x03C8A828 BL 0x1C16CF4
	0x03C8A82C MOVZ W8, 0x1
	0x03C8A830 STRB W8, [X20 + 0xD58]
	0x03C8A834 LDR X0, [X19]
	0x03C8A838 STR W31, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X8, [X20+3336]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51871744
	012 Add X0, X0, 1605
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+3336], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: System.Single get_rotation()

Disassembly:
	0x03C8A880 STR X30, [X31 - 0x20]!
	0x03C8A884 STP X20, X19, [X31 + 0x10]
	0x03C8A888 ADRP X20, 0x75C000
	0x03C8A88C LDR X1, [X20 + 0xE08]
	0x03C8A890 MOV X19, X0
	0x03C8A894 CBNZ X1, 0x3C8A8AC
	0x03C8A898 ADRP X0, 0xFFFFFFFFFCE6D000
	0x03C8A89C ADD X0, X0, 0xA0C
	0x03C8A8A0 BL 0x1C16CB8
	0x03C8A8A4 MOV X1, X0
	0x03C8A8A8 STR X0, [X20 + 0xE08]
	0x03C8A8AC MOV X0, X19
	0x03C8A8B0 LDP X20, X19, [X31 + 0x10]
	0x03C8A8B4 LDR X30, [X31], #0x20
	0x03C8A8B8 BR X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3176]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51904512
	010 Add X0, X0, 2876
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3176], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_rotation(System.Single value)

Disassembly:
	0x03C8A8BC STR X30, [X31 - 0x30]!
	0x03C8A8C0 STP X22, X21, [X31 + 0x10]
	0x03C8A8C4 STP X20, X19, [X31 + 0x20]
	0x03C8A8C8 ADRP X22, 0x75C000
	0x03C8A8CC LDR X3, [X22 + 0xD60]
	0x03C8A8D0 MOV W20, W2
	0x03C8A8D4 MOV X19, X1
	0x03C8A8D8 MOV X21, X0
	0x03C8A8DC CBNZ X3, 0x3C8A8F4
	0x03C8A8E0 ADRP X0, 0xFFFFFFFFFCE7F000
	0x03C8A8E4 ADD X0, X0, 0xB85
	0x03C8A8E8 BL 0x1C16CB8
	0x03C8A8EC MOV X3, X0
	0x03C8A8F0 STR X0, [X22 + 0xD60]
	0x03C8A8F4 AND W2, W20, 0x1
	0x03C8A8F8 MOV X0, X21
	0x03C8A8FC MOV X1, X19
	0x03C8A900 LDP X20, X19, [X31 + 0x20]
	0x03C8A904 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x75D000
	006 Move X1, [X20+3184]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51789824
	012 Add X0, X0, 1528
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3184], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: UnityEngine.Vector2 get_velocity()

Disassembly:
	0x03C8A908 LDR X30, [X31], #0x30
	0x03C8A90C BR X3
	0x03C8A910 STR X30, [X31 - 0x30]!
	0x03C8A914 STP X22, X21, [X31 + 0x10]
	0x03C8A918 STP X20, X19, [X31 + 0x20]
	0x03C8A91C ADRP X21, 0x75C000
	0x03C8A920 ADRP X22, 0x469000
	0x03C8A924 LDRB W8, [X21 + 0xD68]
	0x03C8A928 LDR X22, [X22 + 0x5F8]
	0x03C8A92C MOV X19, X1
	0x03C8A930 MOV X20, X0
	0x03C8A934 TBNZ X8, 0x0, 0x3C8A94C
	0x03C8A938 ADRP X0, 0x469000
	0x03C8A93C LDR X0, [X0 + 0x5F8]
	0x03C8A940 BL 0x1C16CF4
	0x03C8A944 MOVZ W8, 0x1
	0x03C8A948 STRB W8, [X21 + 0xD68]
	0x03C8A94C LDR X0, [X22]
	0x03C8A950 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X8, [X20+3344]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51871744
	011 Add X0, X0, 1674
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+3344], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_velocity(UnityEngine.Vector2 value)

Disassembly:
	0x03C8A998 STP X30, X21, [X31 - 0x20]!
	0x03C8A99C STP X20, X19, [X31 + 0x10]
	0x03C8A9A0 ADRP X21, 0x75C000
	0x03C8A9A4 LDR X2, [X21 + 0xD70]
	0x03C8A9A8 MOV X19, X1
	0x03C8A9AC MOV X20, X0
	0x03C8A9B0 CBNZ X2, 0x3C8A9C8
	0x03C8A9B4 ADRP X0, 0xFFFFFFFFFCE69000
	0x03C8A9B8 ADD X0, X0, 0xAB8
	0x03C8A9BC BL 0x1C16CB8
	0x03C8A9C0 MOV X2, X0
	0x03C8A9C4 STR X0, [X21 + 0xD70]
	0x03C8A9C8 MOV X0, X20
	0x03C8A9CC MOV X1, X19
	0x03C8A9D0 LDP X20, X19, [X31 + 0x10]
	0x03C8A9D4 LDP X30, X21, [X31], #0x20
	0x03C8A9D8 BR X2
	0x03C8A9DC SUB X31, X31, 0x70

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X8, [X20+3352]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51798016
	012 Add X0, X0, 2321
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+3352], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: System.Single get_angularVelocity()

Disassembly:
	0x03C8AA24 MOV V12.16B, V2.16B
	0x03C8AA28 MOV V13.16B, V1.16B
	0x03C8AA2C MOV V14.16B, V0.16B
	0x03C8AA30 TBNZ X8, 0x0, 0x3C8AA48
	0x03C8AA34 ADRP X0, 0x469000
	0x03C8AA38 LDR X0, [X0 + 0x5F8]
	0x03C8AA3C BL 0x1C16CF4
	0x03C8AA40 MOVZ W8, 0x1
	0x03C8AA44 STRB W8, [X22 + 0xD78]
	0x03C8AA48 LDR X0, [X21]
	0x03C8AA4C LDR W8, [X0 + 0xE0]
	0x03C8AA50 CBNZ W8, 0x3C8AA58
	0x03C8AA54 BL 0x1C16DFC
	0x03C8AA58 BL 0x3C8A804
	0x03C8AA5C STR W0, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3192]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51978240
	010 Add X0, X0, 2489
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3192], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_angularVelocity(System.Single value)

Disassembly:
	0x03C8AA60 ADD X0, X31, 0x8
	0x03C8AA64 MOV V0.16B, V14.16B
	0x03C8AA68 MOV V1.16B, V13.16B
	0x03C8AA6C MOV V2.16B, V12.16B
	0x03C8AA70 MOV V3.16B, V11.16B
	0x03C8AA74 MOV V4.16B, V10.16B
	0x03C8AA78 MOV V5.16B, V9.16B
	0x03C8AA7C MOV V6.16B, V8.16B
	0x03C8AA80 MOV W1, W20
	0x03C8AA84 MOV W2, W19
	0x03C8AA88 BL 0x3C8AAB4
	0x03C8AA8C LDP X20, X19, [X31 + 0x60]
	0x03C8AA90 LDP X22, X21, [X31 + 0x50]
	0x03C8AA94 LDR X30, [X31 + 0x48]
	0x03C8AA98 LDP D9, D8, [X31 + 0x38]
	0x03C8AA9C LDP D11, D10, [X31 + 0x28]
	0x03C8AAA0 LDP D13, D12, [X31 + 0x18]
	0x03C8AAA4 LDR V14, [X31 + 0x10]
	0x03C8AAA8 AND W0, W0, 0x1

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x75D000
	006 Move X1, [X20+3200]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51838976
	012 Add X0, X0, 719
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3200], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Single get_mass()

Disassembly:
	0x03C8AAAC ADD X31, X31, 0x70
	0x03C8AAB0 RET
	0x03C8AAB4 SUB X31, X31, 0x90
	0x03C8AAB8 STP D15, D14, [X31 + 0x20]
	0x03C8AABC STP D13, D12, [X31 + 0x30]
	0x03C8AAC0 STP D11, D10, [X31 + 0x40]
	0x03C8AAC4 STP D9, D8, [X31 + 0x50]
	0x03C8AAC8 STP X30, X23, [X31 + 0x60]
	0x03C8AACC STP X22, X21, [X31 + 0x70]
	0x03C8AAD0 STP X20, X19, [X31 + 0x80]
	0x03C8AAD4 ADRP X22, 0x74E000
	0x03C8AAD8 LDRB W8, [X22 + 0x784]
	0x03C8AADC MOV W19, W2
	0x03C8AAE0 MOV W20, W1
	0x03C8AAE4 MOV V8.16B, V6.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3208]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51896320
	010 Add X0, X0, 2548
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3208], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_mass(System.Single value)

Disassembly:
	0x03C8AAE8 MOV V12.16B, V5.16B
	0x03C8AAEC MOV V13.16B, V4.16B
	0x03C8AAF0 MOV V14.16B, V3.16B
	0x03C8AAF4 MOV V9.16B, V2.16B
	0x03C8AAF8 MOV V10.16B, V1.16B
	0x03C8AAFC MOV V11.16B, V0.16B
	0x03C8AB00 MOV X21, X0
	0x03C8AB04 CBNZ W8, 0x3C8AB1C
	0x03C8AB08 ADRP X0, 0x469000
	0x03C8AB0C LDR X0, [X0 + 0x5A8]
	0x03C8AB10 BL 0x1C16CF4
	0x03C8AB14 MOVZ W8, 0x1
	0x03C8AB18 STRB W8, [X22 + 0x784]
	0x03C8AB1C ADRP X22, 0x469000
	0x03C8AB20 LDR X22, [X22 + 0x5A8]
	0x03C8AB24 LDR X0, [X22]
	0x03C8AB28 LDR W8, [X0 + 0xE0]
	0x03C8AB2C CBNZ W8, 0x3C8AB34
	0x03C8AB30 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x75D000
	006 Move X1, [X20+3216]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51847168
	012 Add X0, X0, 469
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3216], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Single get_drag()

Disassembly:
	0x03C8AB34 FMUL S0, S14, S14
	0x03C8AB38 FMUL S1, S13, S13
	0x03C8AB3C FMUL S2, S12, S12
	0x03C8AB40 FADD S0, S0, S1
	0x03C8AB44 FADD S0, S2, S0
	0x03C8AB48 MOVZ W8, 0x1
	0x03C8AB4C FSQRT S15, S0
	0x03C8AB50 FMOV S0, W8
	0x03C8AB54 FCMP S15, S0
	0x03C8AB58 B.LE 0x3C8ABD0
	0x03C8AB5C ADRP X23, 0x74E000
	0x03C8AB60 LDRB W8, [X23 + 0x785]
	0x03C8AB64 CBNZ W8, 0x3C8AB7C
	0x03C8AB68 ADRP X0, 0x469000
	0x03C8AB6C LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3224]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51978240
	010 Add X0, X0, 2536
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3224], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_drag(System.Single value)

Disassembly:
	0x03C8AB70 BL 0x1C16CF4
	0x03C8AB74 MOVZ W8, 0x1
	0x03C8AB78 STRB W8, [X23 + 0x785]
	0x03C8AB7C LDR X0, [X22]
	0x03C8AB80 FDIV S14, S14, S15
	0x03C8AB84 FDIV S13, S13, S15
	0x03C8AB88 FDIV S12, S12, S15
	0x03C8AB8C LDR W8, [X0 + 0xE0]
	0x03C8AB90 CBNZ W8, 0x3C8AB98
	0x03C8AB94 BL 0x1C16DFC
	0x03C8AB98 FMUL S0, S14, S14
	0x03C8AB9C FMUL S1, S13, S13
	0x03C8ABA0 ADRP X8, 0xFFFFFFFFFCE60000
	0x03C8ABA4 FADD S0, S0, S1
	0x03C8ABA8 LDR V1, [X8 + 0x17C]
	0x03C8ABAC FMUL S2, S12, S12
	0x03C8ABB0 FADD S0, S2, S0
	0x03C8ABB4 FSQRT S2, S0
	0x03C8ABB8 FCMP S2, S1

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x75D000
	006 Move X1, [X20+3232]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51896320
	012 Add X0, X0, 2584
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3232], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Single get_angularDrag()

Disassembly:
	0x03C8ABBC B.LE 0x3C8ABD8
	0x03C8ABC0 FDIV S0, S14, S2
	0x03C8ABC4 FDIV S1, S13, S2
	0x03C8ABC8 FDIV S2, S12, S2
	0x03C8ABCC B 0x3C8AC10
	0x03C8ABD0 MOV W0, W31
	0x03C8ABD4 B 0x3C8AC5C
	0x03C8ABD8 ADRP X22, 0x74E000
	0x03C8ABDC LDRB W8, [X22 + 0x783]
	0x03C8ABE0 CBNZ W8, 0x3C8ABF8
	0x03C8ABE4 ADRP X0, 0x469000
	0x03C8ABE8 LDR X0, [X0 + 0x5A0]
	0x03C8ABEC BL 0x1C16CF4
	0x03C8ABF0 MOVZ W8, 0x1
	0x03C8ABF4 STRB W8, [X22 + 0x783]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3240]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51765248
	010 Add X0, X0, 439
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3240], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_angularDrag(System.Single value)

Disassembly:
	0x03C8ABF8 ADRP X8, 0x469000
	0x03C8ABFC LDR X8, [X8 + 0x5A0]
	0x03C8AC00 LDR X8, [X8]
	0x03C8AC04 LDR X8, [X8 + 0xB8]
	0x03C8AC08 LDP S0, S1, [X8]
	0x03C8AC0C LDR V2, [X8 + 0x8]
	0x03C8AC10 LDR W9, [X21]
	0x03C8AC14 ADRP X21, 0x75D000
	0x03C8AC18 LDR X8, [X21 + 0x28]
	0x03C8AC1C STP S11, S10, [X31]
	0x03C8AC20 STP S9, S0, [X31 + 0x8]
	0x03C8AC24 STP S1, S2, [X31 + 0x10]
	0x03C8AC28 STR W9, [X31 + 0x18]
	0x03C8AC2C CBNZ X8, 0x3C8AC44
	0x03C8AC30 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C8AC34 ADD X0, X0, 0x3EB
	0x03C8AC38 BL 0x1C16CB8
	0x03C8AC3C MOV X8, X0
	0x03C8AC40 STR X0, [X21 + 0x28]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x75D000
	006 Move X1, [X20+3248]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51888128
	012 Add X0, X0, 2293
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3248], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Single get_gravityScale()

Disassembly:
	0x03C8AC44 ADD X0, X31, 0x18
	0x03C8AC48 ADD X1, X31, 0x0
	0x03C8AC4C MOV V0.16B, V8.16B
	0x03C8AC50 MOV W2, W20
	0x03C8AC54 MOV W3, W19
	0x03C8AC58 BLR X8
	0x03C8AC5C LDP X20, X19, [X31 + 0x80]
	0x03C8AC60 LDP X22, X21, [X31 + 0x70]
	0x03C8AC64 LDP X30, X23, [X31 + 0x60]
	0x03C8AC68 LDP D9, D8, [X31 + 0x50]
	0x03C8AC6C LDP D11, D10, [X31 + 0x40]
	0x03C8AC70 LDP D13, D12, [X31 + 0x30]
	0x03C8AC74 LDP D15, D14, [X31 + 0x20]
	0x03C8AC78 AND W0, W0, 0x1
	0x03C8AC7C ADD X31, X31, 0x90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3256]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51912704
	010 Add X0, X0, 2507
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3256], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_gravityScale(System.Single value)

Disassembly:
	0x03C8AC80 RET
	0x03C8AC84 STR D14, [X31 - 0x60]!
	0x03C8AC88 STP D13, D12, [X31 + 0x10]
	0x03C8AC8C STP D11, D10, [X31 + 0x20]
	0x03C8AC90 STP D9, D8, [X31 + 0x30]
	0x03C8AC94 STP X30, X21, [X31 + 0x40]
	0x03C8AC98 STP X20, X19, [X31 + 0x50]
	0x03C8AC9C ADRP X21, 0x75C000
	0x03C8ACA0 ADRP X20, 0x469000
	0x03C8ACA4 LDRB W8, [X21 + 0xD79]
	0x03C8ACA8 LDR X20, [X20 + 0x5F8]
	0x03C8ACAC MOV W19, W0
	0x03C8ACB0 MOV V8.16B, V6.16B
	0x03C8ACB4 MOV V9.16B, V5.16B
	0x03C8ACB8 MOV V10.16B, V4.16B
	0x03C8ACBC MOV V11.16B, V3.16B
	0x03C8ACC0 MOV V12.16B, V2.16B
	0x03C8ACC4 MOV V13.16B, V1.16B
	0x03C8ACC8 MOV V14.16B, V0.16B

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x75D000
	006 Move X1, [X20+3264]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51986432
	012 Add X0, X0, 2268
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3264], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: UnityEngine.RigidbodyType2D get_bodyType()

Disassembly:
	0x03C8ACCC TBNZ X8, 0x0, 0x3C8ACE4
	0x03C8ACD0 ADRP X0, 0x469000
	0x03C8ACD4 LDR X0, [X0 + 0x5F8]
	0x03C8ACD8 BL 0x1C16CF4
	0x03C8ACDC MOVZ W8, 0x1
	0x03C8ACE0 STRB W8, [X21 + 0xD79]
	0x03C8ACE4 LDR X0, [X20]
	0x03C8ACE8 LDR W8, [X0 + 0xE0]
	0x03C8ACEC CBNZ W8, 0x3C8ACF4
	0x03C8ACF0 BL 0x1C16DFC
	0x03C8ACF4 BL 0x3C8A804
	0x03C8ACF8 STR W0, [X31 + 0x8]
	0x03C8ACFC ADD X0, X31, 0x8
	0x03C8AD00 MOV V0.16B, V14.16B
	0x03C8AD04 MOV V1.16B, V13.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3272]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51888128
	010 Add X0, X0, 2349
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3272], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_bodyType(UnityEngine.RigidbodyType2D value)

Disassembly:
	0x03C8AD08 MOV V2.16B, V12.16B
	0x03C8AD0C MOV V3.16B, V11.16B
	0x03C8AD10 MOV V4.16B, V10.16B
	0x03C8AD14 MOV V5.16B, V9.16B
	0x03C8AD18 MOV V6.16B, V8.16B
	0x03C8AD1C MOV W1, W19
	0x03C8AD20 MOV W2, W31
	0x03C8AD24 BL 0x3C8AAB4
	0x03C8AD28 LDP X20, X19, [X31 + 0x50]
	0x03C8AD2C LDP X30, X21, [X31 + 0x40]
	0x03C8AD30 LDP D9, D8, [X31 + 0x30]
	0x03C8AD34 LDP D11, D10, [X31 + 0x20]
	0x03C8AD38 LDP D13, D12, [X31 + 0x10]
	0x03C8AD3C AND W0, W0, 0x1
	0x03C8AD40 LDR V14, [X31], #0x60
	0x03C8AD44 RET
	0x03C8AD48 SUB X31, X31, 0x60

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x75D000
	006 Move X2, [X21+3280]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51986432
	012 Add X0, X0, 2325
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3280], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean get_isKinematic()

Disassembly:
	0x03C8AD4C STR D14, [X31 + 0x10]
	0x03C8AD50 STP D13, D12, [X31 + 0x18]
	0x03C8AD54 STP D11, D10, [X31 + 0x28]
	0x03C8AD58 STP D9, D8, [X31 + 0x38]
	0x03C8AD5C STR X30, [X31 + 0x48]
	0x03C8AD60 STP X20, X19, [X31 + 0x50]
	0x03C8AD64 ADRP X20, 0x75C000
	0x03C8AD68 ADRP X19, 0x469000
	0x03C8AD6C LDRB W8, [X20 + 0xD7A]
	0x03C8AD70 LDR X19, [X19 + 0x5F8]
	0x03C8AD74 MOV V8.16B, V6.16B
	0x03C8AD78 MOV V9.16B, V5.16B
	0x03C8AD7C MOV V10.16B, V4.16B
	0x03C8AD80 MOV V11.16B, V3.16B
	0x03C8AD84 MOV V12.16B, V2.16B
	0x03C8AD88 MOV V13.16B, V1.16B
	0x03C8AD8C MOV V14.16B, V0.16B
	0x03C8AD90 TBNZ X8, 0x0, 0x3C8ADA8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X8, [X20+3272]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51888128
	010 Add X0, X0, 2349
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+3272], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSET not yet implemented."
	020 Move X30, [X31+32]
	021 Return X0

Method: System.Void set_isKinematic(System.Boolean value)

Disassembly:
	0x03C8AD94 ADRP X0, 0x469000
	0x03C8AD98 LDR X0, [X0 + 0x5F8]
	0x03C8AD9C BL 0x1C16CF4
	0x03C8ADA0 MOVZ W8, 0x1
	0x03C8ADA4 STRB W8, [X20 + 0xD7A]
	0x03C8ADA8 LDR X0, [X19]
	0x03C8ADAC LDR W8, [X0 + 0xE0]
	0x03C8ADB0 CBNZ W8, 0x3C8ADB8
	0x03C8ADB4 BL 0x1C16DFC
	0x03C8ADB8 BL 0x3C8A804
	0x03C8ADBC STR W0, [X31 + 0x8]
	0x03C8ADC0 ADD X0, X31, 0x8
	0x03C8ADC4 MOVN W1, 0x4
	0x03C8ADC8 MOV V0.16B, V14.16B
	0x03C8ADCC MOV V1.16B, V13.16B
	0x03C8ADD0 MOV V2.16B, V12.16B
	0x03C8ADD4 MOV V3.16B, V11.16B
	0x03C8ADD8 MOV V4.16B, V10.16B
	0x03C8ADDC MOV V5.16B, V9.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X21, 0x75D000
	008 Move X2, [X21+3280]
	009 Move W20, W1
	010 Move X19, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51986432
	014 Add X0, X0, 2325
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+3280], X0
	018 And W1, W20, 1
	019 Move X0, X19
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 CallNoReturn X2
	025 Call 0x1C17F20

Method: UnityEngine.RigidbodyConstraints2D get_constraints()

Disassembly:
	0x03C8ADE0 MOV V6.16B, V8.16B
	0x03C8ADE4 MOV W2, W31
	0x03C8ADE8 BL 0x3C8AAB4
	0x03C8ADEC LDP X20, X19, [X31 + 0x50]
	0x03C8ADF0 LDR X30, [X31 + 0x48]
	0x03C8ADF4 LDP D9, D8, [X31 + 0x38]
	0x03C8ADF8 LDP D11, D10, [X31 + 0x28]
	0x03C8ADFC LDP D13, D12, [X31 + 0x18]
	0x03C8AE00 LDR V14, [X31 + 0x10]
	0x03C8AE04 AND W0, W0, 0x1
	0x03C8AE08 ADD X31, X31, 0x60
	0x03C8AE0C RET
	0x03C8AE10 STP D13, D12, [X31 - 0x50]!
	0x03C8AE14 STP D11, D10, [X31 + 0x10]
	0x03C8AE18 STP D9, D8, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3288]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51929088
	010 Add X0, X0, 2456
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3288], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_constraints(UnityEngine.RigidbodyConstraints2D value)

Disassembly:
	0x03C8AE1C STR X30, [X31 + 0x30]
	0x03C8AE20 STP X20, X19, [X31 + 0x40]
	0x03C8AE24 ADRP X20, 0x75C000
	0x03C8AE28 ADRP X19, 0x469000
	0x03C8AE2C LDRB W8, [X20 + 0xD7B]
	0x03C8AE30 LDR X19, [X19 + 0x5F8]
	0x03C8AE34 MOV V8.16B, V5.16B
	0x03C8AE38 MOV V9.16B, V4.16B
	0x03C8AE3C MOV V10.16B, V3.16B
	0x03C8AE40 MOV V11.16B, V2.16B
	0x03C8AE44 MOV V12.16B, V1.16B
	0x03C8AE48 MOV V13.16B, V0.16B
	0x03C8AE4C TBNZ X8, 0x0, 0x3C8AE64
	0x03C8AE50 ADRP X0, 0x469000
	0x03C8AE54 LDR X0, [X0 + 0x5F8]
	0x03C8AE58 BL 0x1C16CF4
	0x03C8AE5C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x75D000
	006 Move X2, [X21+3296]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51847168
	012 Add X0, X0, 518
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3296], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean IsSleeping()

Disassembly:
	0x03C8AE60 STRB W8, [X20 + 0xD7B]
	0x03C8AE64 LDR X0, [X19]
	0x03C8AE68 LDR W8, [X0 + 0xE0]
	0x03C8AE6C CBNZ W8, 0x3C8AE74
	0x03C8AE70 BL 0x1C16DFC
	0x03C8AE74 BL 0x3C8A804
	0x03C8AE78 MOVZ W8, 0x7F800000
	0x03C8AE7C STR W0, [X31 + 0x38]
	0x03C8AE80 ADD X0, X31, 0x38
	0x03C8AE84 MOVN W1, 0x4
	0x03C8AE88 FMOV S6, W8
	0x03C8AE8C MOV V0.16B, V13.16B
	0x03C8AE90 MOV V1.16B, V12.16B
	0x03C8AE94 MOV V2.16B, V11.16B
	0x03C8AE98 MOV V3.16B, V10.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3304]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51986432
	010 Add X0, X0, 2392
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3304], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Sleep()

Disassembly:
	0x03C8AE9C MOV V4.16B, V9.16B
	0x03C8AEA0 MOV V5.16B, V8.16B
	0x03C8AEA4 MOV W2, W31
	0x03C8AEA8 BL 0x3C8AAB4
	0x03C8AEAC LDP X20, X19, [X31 + 0x40]
	0x03C8AEB0 LDR X30, [X31 + 0x30]
	0x03C8AEB4 LDP D9, D8, [X31 + 0x20]
	0x03C8AEB8 LDP D11, D10, [X31 + 0x10]
	0x03C8AEBC AND W0, W0, 0x1
	0x03C8AEC0 LDP D13, D12, [X31], #0x50
	0x03C8AEC4 RET
	0x03C8AEC8 STR D14, [X31 - 0x70]!
	0x03C8AECC STP D13, D12, [X31 + 0x10]
	0x03C8AED0 STP D11, D10, [X31 + 0x20]
	0x03C8AED4 STP D9, D8, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3312]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51904512
	010 Add X0, X0, 2916
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3312], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void WakeUp()

Disassembly:
	0x03C8AED8 STP X30, X23, [X31 + 0x40]
	0x03C8AEDC STP X22, X21, [X31 + 0x50]
	0x03C8AEE0 STP X20, X19, [X31 + 0x60]
	0x03C8AEE4 ADRP X23, 0x75C000
	0x03C8AEE8 ADRP X22, 0x469000
	0x03C8AEEC LDRB W8, [X23 + 0xD7C]
	0x03C8AEF0 LDR X22, [X22 + 0x5F8]
	0x03C8AEF4 MOV W19, W2
	0x03C8AEF8 MOV W20, W1
	0x03C8AEFC MOV V8.16B, V6.16B
	0x03C8AF00 MOV X21, X0
	0x03C8AF04 MOV V9.16B, V5.16B
	0x03C8AF08 MOV V10.16B, V4.16B
	0x03C8AF0C MOV V11.16B, V3.16B
	0x03C8AF10 MOV V12.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x75D000
	005 Move X1, [X20+3320]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51929088
	010 Add X0, X0, 2499
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3320], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void get_position_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C8A7B0 MOV W19, W0
	0x03C8A7B4 CBNZ X1, 0x3C8A7CC
	0x03C8A7B8 ADRP X0, 0xFFFFFFFFFCE67000
	0x03C8A7BC ADD X0, X0, 0x765
	0x03C8A7C0 BL 0x1C16CB8
	0x03C8A7C4 MOV X1, X0
	0x03C8A7C8 STR X0, [X20 + 0xD48]
	0x03C8A7CC MOV W0, W19
	0x03C8A7D0 LDP X20, X19, [X31 + 0x10]
	0x03C8A7D4 LDR X30, [X31], #0x20
	0x03C8A7D8 BR X1
	0x03C8A7DC STP X30, X19, [X31 - 0x10]!
	0x03C8A7E0 ADRP X19, 0x75C000
	0x03C8A7E4 LDR X0, [X19 + 0xD50]
	0x03C8A7E8 CBNZ X0, 0x3C8A7FC
	0x03C8A7EC ADRP X0, 0xFFFFFFFFFCE7D000
	0x03C8A7F0 ADD X0, X0, 0x9F7

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x75D000
	006 Move X2, [X21+3328]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51777536
	012 Add X0, X0, 4062
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3328], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_position_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C8A83C LDR W8, [X0 + 0xE0]
	0x03C8A840 CBNZ W8, 0x3C8A848
	0x03C8A844 BL 0x1C16DFC
	0x03C8A848 ADRP X19, 0x75C000
	0x03C8A84C LDR X8, [X19 + 0xE08]
	0x03C8A850 CBNZ X8, 0x3C8A868
	0x03C8A854 ADRP X0, 0xFFFFFFFFFCE6D000
	0x03C8A858 ADD X0, X0, 0xA0C
	0x03C8A85C BL 0x1C16CB8
	0x03C8A860 MOV X8, X0
	0x03C8A864 STR X0, [X19 + 0xE08]
	0x03C8A868 ADD X0, X31, 0x8
	0x03C8A86C BLR X8
	0x03C8A870 LDR W0, [X31 + 0x8]
	0x03C8A874 LDP X20, X19, [X31 + 0x10]
	0x03C8A878 LDR X30, [X31], #0x20
	0x03C8A87C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x75D000
	006 Move X2, [X21+3336]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51871744
	012 Add X0, X0, 1605
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3336], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_velocity_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C8A954 CBNZ W8, 0x3C8A95C
	0x03C8A958 BL 0x1C16DFC
	0x03C8A95C ADRP X21, 0x75C000
	0x03C8A960 LDR X3, [X21 + 0xD60]
	0x03C8A964 CBNZ X3, 0x3C8A97C
	0x03C8A968 ADRP X0, 0xFFFFFFFFFCE7F000
	0x03C8A96C ADD X0, X0, 0xB85
	0x03C8A970 BL 0x1C16CB8
	0x03C8A974 MOV X3, X0
	0x03C8A978 STR X0, [X21 + 0xD60]
	0x03C8A97C MOV X0, X20
	0x03C8A980 MOV X1, X19
	0x03C8A984 LDP X20, X19, [X31 + 0x20]
	0x03C8A988 LDP X22, X21, [X31 + 0x10]
	0x03C8A98C MOVZ W2, 0x1
	0x03C8A990 LDR X30, [X31], #0x30
	0x03C8A994 BR X3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x75D000
	006 Move X2, [X21+3344]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51871744
	012 Add X0, X0, 1674
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3344], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_velocity_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C8A9E0 STR D14, [X31 + 0x10]
	0x03C8A9E4 STP D13, D12, [X31 + 0x18]
	0x03C8A9E8 STP D11, D10, [X31 + 0x28]
	0x03C8A9EC STP D9, D8, [X31 + 0x38]
	0x03C8A9F0 STR X30, [X31 + 0x48]
	0x03C8A9F4 STP X22, X21, [X31 + 0x50]
	0x03C8A9F8 STP X20, X19, [X31 + 0x60]
	0x03C8A9FC ADRP X22, 0x75C000
	0x03C8AA00 ADRP X21, 0x469000
	0x03C8AA04 LDRB W8, [X22 + 0xD78]
	0x03C8AA08 LDR X21, [X21 + 0x5F8]
	0x03C8AA0C MOV W19, W1
	0x03C8AA10 MOV W20, W0
	0x03C8AA14 MOV V8.16B, V6.16B
	0x03C8AA18 MOV V9.16B, V5.16B
	0x03C8AA1C MOV V10.16B, V4.16B
	0x03C8AA20 MOV V11.16B, V3.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x75D000
	006 Move X2, [X21+3352]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51798016
	012 Add X0, X0, 2321
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3352], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

