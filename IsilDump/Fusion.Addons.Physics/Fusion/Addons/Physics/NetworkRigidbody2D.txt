Type: Fusion.Addons.Physics.NetworkRigidbody2D

Method: UnityEngine.Vector3 get_RBPosition()

Disassembly:
	0x01E2C250 LDR X0, [X22]
	0x01E2C254 LDR W8, [X0 + 0xE0]
	0x01E2C258 CBNZ W8, 0x1E2C260
	0x01E2C25C BL 0x1C16DFC
	0x01E2C260 FMOV W8, S8
	0x01E2C264 MOVZ W9, 0x44800000
	0x01E2C268 UBFM W8, W8, 0x1F, 0x1F
	0x01E2C26C FMOV S0, 0.5
	0x01E2C270 FMOV S1, W9

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X1, X31
	006 Call Rigidbody2D.get_position, X0
	007 Move S2, W31
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: System.Void set_RBPosition(UnityEngine.Vector3 value)

Disassembly:
	0x01E2C274 UCVTF S2, W8
	0x01E2C278 MOVZ W9, 0x7F800000
	0x01E2C27C FMUL S1, S8, S1
	0x01E2C280 FSUB S0, S0, S2
	0x01E2C284 FMOV S2, W9
	0x01E2C288 FADD S0, S1, S0
	0x01E2C28C FCVTZS W8, S0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody2D.set_position, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: UnityEngine.Quaternion get_RBRotation()

Disassembly:
	0x01E2C290 FCMP S0, S2
	0x01E2C294 MOVZ W9, 0x80000000
	0x01E2C298 CSEL W8, W9, W8, EQ
	0x01E2C29C SBFM W9, W8, 0x1F, 0x1F
	0x01E2C2A0 EOR W8, W9, W8, 0x1
	0x01E2C2A4 MOV X0, X20
	0x01E2C2A8 MOV X1, X31
	0x01E2C2AC STR W8, [X19 + 0x38]
	0x01E2C2B0 BL 0x3C8EB60
	0x01E2C2B4 LDRB W8, [X21 + 0xE8F]
	0x01E2C2B8 MOV V8.16B, V0.16B
	0x01E2C2BC CBNZ W8, 0x1E2C2D4
	0x01E2C2C0 ADRP X0, 0x22CE000
	0x01E2C2C4 LDR X0, [X0 + 0xC68]
	0x01E2C2C8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {17}
	005 Move X1, X31
	006 Call Rigidbody2D.get_rotation, X0
	007 Move X8, -20189184
	008 Move V2, [X8+260]
	009 Move V1, V0
	010 Move S0, W31
	011 Move X0, X31
	012 Multiply S2, S1, S2
	013 Move S1, W31
	014 Move X30, [X31+16]
	015 Call Quaternion.Internal_FromEulerRad, X0
	016 Return X0
	017 Call 0x1C17F20

Method: System.Void set_RBRotation(UnityEngine.Quaternion value)

Disassembly:
	0x01E2C2CC MOVZ W8, 0x1
	0x01E2C2D0 STRB W8, [X21 + 0xE8F]
	0x01E2C2D4 LDR X0, [X22]
	0x01E2C2D8 LDR W8, [X0 + 0xE0]
	0x01E2C2DC CBNZ W8, 0x1E2C2E4
	0x01E2C2E0 BL 0x1C16DFC
	0x01E2C2E4 FMOV W8, S8
	0x01E2C2E8 MOVZ W9, 0x44800000
	0x01E2C2EC UBFM W8, W8, 0x1F, 0x1F
	0x01E2C2F0 FMOV S0, 0.5
	0x01E2C2F4 FMOV S1, W9
	0x01E2C2F8 UCVTF S2, W8
	0x01E2C2FC MOVZ W9, 0x7F800000
	0x01E2C300 FMUL S1, S8, S1
	0x01E2C304 FSUB S0, S0, S2
	0x01E2C308 FMOV S2, W9
	0x01E2C30C FADD S0, S1, S0
	0x01E2C310 FCVTZS W8, S0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+184]
	004 Move X0, X31
	005 Call Quaternion.Internal_ToEulerRad, X0
	006 Move X8, -20189184
	007 Move V3, [X8+1096]
	008 Move X0, X31
	009 Multiply S0, S0, S3
	010 Multiply S1, S1, S3
	011 Multiply S2, S2, S3
	012 Call Quaternion.Internal_MakePositive, X0
	013 Compare X19, 0
	014 JumpIfEqual {22}
	015 Move X0, X19
	016 Move V0, V2
	017 Move X1, X31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Call Rigidbody2D.set_rotation, X0, V0
	021 Return 
	022 Call 0x1C17F20

Method: System.Boolean get_RBIsKinematic()

Disassembly:
	0x01E2C314 FCMP S0, S2
	0x01E2C318 MOVZ W9, 0x80000000
	0x01E2C31C CSEL W8, W9, W8, EQ
	0x01E2C320 SBFM W9, W8, 0x1F, 0x1F
	0x01E2C324 EOR W8, W9, W8, 0x1
	0x01E2C328 MOV X0, X20
	0x01E2C32C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody2D.get_isKinematic, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Void set_RBIsKinematic(System.Boolean value)

Disassembly:
	0x01E2C330 STR W8, [X19 + 0x3C]
	0x01E2C334 BL 0x3C8E868
	0x01E2C338 MOV X0, X31
	0x01E2C33C BL 0x1E2E540
	0x01E2C340 STR X0, [X19 + 0x48]
	0x01E2C344 STR W1, [X19 + 0x50]
	0x01E2C348 MOV X0, X20
	0x01E2C34C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 And W1, W1, 1
	006 Move X2, X31
	007 Move X30, [X31+16]
	008 Call Rigidbody2D.set_isKinematic, X0, X1
	009 Return 
	010 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01E2C350 BL 0x3C8E9A0
	0x01E2C354 MOV X0, X31
	0x01E2C358 BL 0x1E2E540
	0x01E2C35C STUR X0, [X19 + 0x54]
	0x01E2C360 STR W1, [X19 + 0x5C]
	0x01E2C364 LDP X20, X19, [X31 + 0x20]
	0x01E2C368 LDP X22, X21, [X31 + 0x10]
	0x01E2C36C LDR X30, [X31 + 0x8]
	0x01E2C370 LDR V8, [X31], #0x30
	0x01E2C374 RET
	0x01E2C378 BL 0x1C16F20
	0x01E2C37C STP X30, X23, [X31 - 0x30]!
	0x01E2C380 STP X22, X21, [X31 + 0x10]
	0x01E2C384 STP X20, X19, [X31 + 0x20]
	0x01E2C388 ADRP X21, 0x25AC000
	0x01E2C38C LDRB W8, [X21 + 0xE90]
	0x01E2C390 LDR W23, [X2 + 0x40]
	0x01E2C394 MOV X20, X2
	0x01E2C398 MOV X19, X1
	0x01E2C39C CBNZ W8, 0x1E2C3B4
	0x01E2C3A0 ADRP X0, 0x22CE000
	0x01E2C3A4 LDR X0, [X0 + 0xC68]
	0x01E2C3A8 BL 0x1C16CF4
	0x01E2C3AC MOVZ W8, 0x1
	0x01E2C3B0 STRB W8, [X21 + 0xE90]
	0x01E2C3B4 ADRP X22, 0x22CE000
	0x01E2C3B8 LDR X22, [X22 + 0xC68]
	0x01E2C3BC LDR X0, [X22]
	0x01E2C3C0 LDR W8, [X0 + 0xE0]
	0x01E2C3C4 CBNZ W8, 0x1E2C3CC
	0x01E2C3C8 BL 0x1C16DFC
	0x01E2C3CC CBZ X19, 0x1E2C4EC
	0x01E2C3D0 AND W8, W23, 0x1
	0x01E2C3D4 SUB W8, W31, W8
	0x01E2C3D8 EOR W8, W8, W23, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25AD000
	007 Move X22, 0x22CF000
	008 Move X20, 0x22CF000
	009 Move W8, [X21+3685]
	010 Move X22, [X22+3160]
	011 Move X20, [X20+3168]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x22CF000
	018 Move X0, [X0+3160]
	019 Call 0x1C17CF4
	020 Move X0, 0x22CF000
	021 Move X0, [X0+3168]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3685], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call 0x241FC74, X0
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call Physics2D.get_simulationMode
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move [X19+181], W8
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return 

Method: System.Boolean GetRBIsKinematic(UnityEngine.Rigidbody2D rb)

Disassembly:
	0x01E2C3DC MOVZ W9, 0x3A800000
	0x01E2C3E0 SCVTF S0, W8
	0x01E2C3E4 FMOV S1, W9
	0x01E2C3E8 FMUL S0, S0, S1
	0x01E2C3EC MOV X0, X19
	0x01E2C3F0 MOV X1, X31

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody2D.get_isKinematic, X0
	006 Return X0
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Void SetRBIsKinematic(UnityEngine.Rigidbody2D rb, System.Boolean kinematic)

Disassembly:
	0x01E2C3F4 BL 0x3C8EC24
	0x01E2C3F8 LDRB W8, [X21 + 0xE90]
	0x01E2C3FC LDR W23, [X20 + 0x38]
	0x01E2C400 CBNZ W8, 0x1E2C418
	0x01E2C404 ADRP X0, 0x22CE000
	0x01E2C408 LDR X0, [X0 + 0xC68]
	0x01E2C40C BL 0x1C16CF4
	0x01E2C410 MOVZ W8, 0x1
	0x01E2C414 STRB W8, [X21 + 0xE90]
	0x01E2C418 LDR X0, [X22]
	0x01E2C41C LDR W8, [X0 + 0xE0]
	0x01E2C420 CBNZ W8, 0x1E2C428
	0x01E2C424 BL 0x1C16DFC
	0x01E2C428 AND W8, W23, 0x1
	0x01E2C42C SUB W8, W31, W8
	0x01E2C430 EOR W8, W8, W23, 0x1
	0x01E2C434 MOVZ W9, 0x3A800000
	0x01E2C438 SCVTF S0, W8
	0x01E2C43C FMOV S1, W9
	0x01E2C440 FMUL S0, S0, S1
	0x01E2C444 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {25}
	006 Move X19, X1
	007 Move X0, X1
	008 Move X1, X31
	009 Move W20, W2
	010 Call Rigidbody2D.get_isKinematic, X0
	011 And W8, W0, 1
	012 And W1, W20, 1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X2, X31
	018 Move X30, [X31+32]
	019 Call Rigidbody2D.set_isKinematic, X0, X1
	020 Return 
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1C17F20

Method: System.Void CaptureRBPositionRotation(UnityEngine.Rigidbody2D rb, ref Fusion.Addons.Physics.NetworkRBData data)

Disassembly:
	0x01E2C448 MOV X1, X31
	0x01E2C44C BL 0x3C8EB14
	0x01E2C450 LDRB W8, [X21 + 0xE90]
	0x01E2C454 LDR W23, [X20 + 0x3C]
	0x01E2C458 CBNZ W8, 0x1E2C470
	0x01E2C45C ADRP X0, 0x22CE000
	0x01E2C460 LDR X0, [X0 + 0xC68]
	0x01E2C464 BL 0x1C16CF4
	0x01E2C468 MOVZ W8, 0x1
	0x01E2C46C STRB W8, [X21 + 0xE90]
	0x01E2C470 LDR X0, [X22]
	0x01E2C474 LDR W8, [X0 + 0xE0]
	0x01E2C478 CBNZ W8, 0x1E2C480
	0x01E2C47C BL 0x1C16DFC
	0x01E2C480 AND W8, W23, 0x1
	0x01E2C484 SUB W8, W31, W8
	0x01E2C488 EOR W8, W8, W23, 0x1
	0x01E2C48C MOVZ W9, 0x3A800000
	0x01E2C490 SCVTF S0, W8
	0x01E2C494 FMOV S1, W9
	0x01E2C498 FMUL S0, S0, S1
	0x01E2C49C MOV X0, X19
	0x01E2C4A0 MOV X1, X31
	0x01E2C4A4 BL 0x3C8EB9C
	0x01E2C4A8 LDR X0, [X20 + 0x48]
	0x01E2C4AC LDR W1, [X20 + 0x50]
	0x01E2C4B0 MOV X2, X31
	0x01E2C4B4 BL 0x1E2E6F8
	0x01E2C4B8 MOV X0, X19
	0x01E2C4BC MOV X1, X31
	0x01E2C4C0 BL 0x3C8E908
	0x01E2C4C4 LDUR X0, [X20 + 0x54]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {42}
	007 Move X20, X1
	008 Move X21, X0
	009 Move X0, X1
	010 Move X1, X31
	011 Move X19, X2
	012 Call Rigidbody2D.get_position, X0
	013 Move [X19+8], S0
	014 Move [X19+16], S1
	015 Move [X19+16], W31
	016 Move W21, [X21+144]
	017 Move X0, X20
	018 Move X1, X31
	019 Call Rigidbody2D.get_rotation, X0
	020 Move X8, -20189184
	021 Move V1, [X8+260]
	022 Move X0, X31
	023 Multiply S2, S0, S1
	024 Move S0, W31
	025 Move S1, W31
	026 Call Quaternion.Internal_FromEulerRad, X0
	027 Compare W21, 0
	028 JumpIfEqual {33}
	029 Move [X19+108], S0
	030 Move [X19+116], S1
	031 Move [X19+116], S2
	032 Move [X19+124], S3
	033 Move [X19+20], S0
	034 Move [X19+28], S1
	035 Move [X19+28], S2
	036 Move [X19+36], S3
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 
	042 Call 0x1C17F20

Method: System.Void ApplyRBPositionRotation(UnityEngine.Rigidbody2D rb, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)

Disassembly:
	0x01E2C4C8 LDR W1, [X20 + 0x5C]
	0x01E2C4CC MOV X2, X31
	0x01E2C4D0 BL 0x1E2E6F8
	0x01E2C4D4 MOV X0, X19
	0x01E2C4D8 LDP X20, X19, [X31 + 0x20]
	0x01E2C4DC LDP X22, X21, [X31 + 0x10]
	0x01E2C4E0 MOV X1, X31
	0x01E2C4E4 LDP X30, X23, [X31], #0x30
	0x01E2C4E8 B 0x3C8EA40
	0x01E2C4EC BL 0x1C16F20
	0x01E2C4F0 STP X30, X21, [X31 - 0x20]!
	0x01E2C4F4 STP X20, X19, [X31 + 0x10]
	0x01E2C4F8 ADRP X20, 0x25AC000
	0x01E2C4FC ADRP X21, 0x22CE000
	0x01E2C500 LDRB W8, [X20 + 0xE6B]
	0x01E2C504 LDR X21, [X21 + 0xC88]
	0x01E2C508 MOV X19, X0
	0x01E2C50C TBNZ X8, 0x0, 0x1E2C524
	0x01E2C510 ADRP X0, 0x22CE000
	0x01E2C514 LDR X0, [X0 + 0xC88]
	0x01E2C518 BL 0x1C16CF4
	0x01E2C51C MOVZ W8, 0x1
	0x01E2C520 STRB W8, [X20 + 0xE6B]
	0x01E2C524 LDR X1, [X21]
	0x01E2C528 MOV X0, X19
	0x01E2C52C BL 0x241EE9C
	0x01E2C530 LDR X19, [X19 + 0xB8]
	0x01E2C534 CBZ X19, 0x1E2C58C
	0x01E2C538 MOV X0, X19
	0x01E2C53C MOV X1, X31
	0x01E2C540 BL 0x3C8ECF0
	0x01E2C544 TBZ X0, 0x0, 0x1E2C554
	0x01E2C548 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {41}
	009 Move X19, X1
	010 Move X0, X1
	011 Move X1, X31
	012 Move V8, V6
	013 Move V9, V5
	014 Move V10, V4
	015 Move V11, V3
	016 Call Rigidbody2D.set_position, X0, X1
	017 Move V0, V11
	018 Move V1, V10
	019 Move V2, V9
	020 Move V3, V8
	021 Move X0, X31
	022 Call Quaternion.Internal_ToEulerRad, X0
	023 Move X8, -20189184
	024 Move V3, [X8+1096]
	025 Move X0, X31
	026 Multiply S0, S0, S3
	027 Multiply S1, S1, S3
	028 Multiply S2, S2, S3
	029 Call Quaternion.Internal_MakePositive, X0
	030 Move X0, X19
	031 Move X30, [X31+32]
	032 Move X19, [X31+40]
	033 Move D9, [X31+16]
	034 Move D8, [X31+24]
	035 Move V0, V2
	036 Move X1, X31
	037 Move D11, [X31+48]
	038 Move D10, [X31+56]
	039 Call Rigidbody2D.set_rotation, X0, V0
	040 Return 
	041 Call 0x1C17F20

Method: Fusion.Addons.Physics.NetworkRigidbodyFlags GetRBFlags(UnityEngine.Rigidbody2D rb)

Disassembly:
	0x01E2C54C LDP X30, X21, [X31], #0x20
	0x01E2C550 RET
	0x01E2C554 FMOV S0, W31
	0x01E2C558 FMOV S1, W31
	0x01E2C55C FMOV S2, W31
	0x01E2C560 MOV X0, X19
	0x01E2C564 MOV X1, X31
	0x01E2C568 BL 0x3C8E908
	0x01E2C56C MOV X0, X19
	0x01E2C570 LDP X20, X19, [X31 + 0x10]
	0x01E2C574 FMOV S0, W31
	0x01E2C578 FMOV S1, W31
	0x01E2C57C FMOV S2, W31
	0x01E2C580 MOV X1, X31
	0x01E2C584 LDP X30, X21, [X31], #0x20
	0x01E2C588 B 0x3C8EA40
	0x01E2C58C BL 0x1C16F20
	0x01E2C590 CBZ X1, 0x1E2C5A0
	0x01E2C594 MOV X0, X1
	0x01E2C598 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {25}
	007 Move X19, X1
	008 Move X0, X1
	009 Move X1, X31
	010 Call Rigidbody2D.get_isKinematic, X0
	011 Move W20, W0
	012 And W21, W0, 1
	013 Move X0, X19
	014 Move X1, X31
	015 Call Rigidbody2D.IsSleeping, X0
	016 Move W8, 2
	017 NotImplemented "Instruction BFM not yet implemented."
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 And W31, W0, 1
	021 NotImplemented "Instruction CSEL not yet implemented."
	022 Move X30, [X31+32]
	023 Move X21, [X31+40]
	024 Return X0
	025 Call 0x1C17F20

Method: System.Int32 GetRBConstraints(UnityEngine.Rigidbody2D rb)

Disassembly:
	0x01E2C59C B 0x3C8F34C
	0x01E2C5A0 STR X30, [X31 - 0x10]!
	0x01E2C5A4 BL 0x1C16F20
	0x01E2C5A8 CBZ X1, 0x1E2C5B8
	0x01E2C5AC MOV X0, X1
	0x01E2C5B0 MOV X1, X31

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody2D.get_constraints, X0
	006 Return X0
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Void SetRBConstraints(UnityEngine.Rigidbody2D rb, System.Int32 constraints)

Disassembly:
	0x01E2C5B4 B 0x3C8F310
	0x01E2C5B8 STR X30, [X31 - 0x10]!
	0x01E2C5BC BL 0x1C16F20
	0x01E2C5C0 CBZ X1, 0x1E2C5D0
	0x01E2C5C4 MOV X0, X1
	0x01E2C5C8 MOV X1, X31
	0x01E2C5CC B 0x3C8F388

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {8}
	003 Move X0, X1
	004 Move W1, W2
	005 Move X2, X31
	006 Call Rigidbody2D.set_constraints, X0, X1
	007 Return 
	008 Move [X31-16], X30
	009 Call 0x1C17F20

Method: System.Void CaptureExtras(UnityEngine.Rigidbody2D rb, ref Fusion.Addons.Physics.NetworkRBData data)

Disassembly:
	0x01E2C5D0 STR X30, [X31 - 0x10]!
	0x01E2C5D4 BL 0x1C16F20
	0x01E2C5D8 SUB X31, X31, 0x70
	0x01E2C5DC STP D15, D14, [X31 + 0x10]
	0x01E2C5E0 STP D13, D12, [X31 + 0x20]
	0x01E2C5E4 STP D11, D10, [X31 + 0x30]
	0x01E2C5E8 STP D9, D8, [X31 + 0x40]
	0x01E2C5EC STR X30, [X31 + 0x50]
	0x01E2C5F0 STP X20, X19, [X31 + 0x60]
	0x01E2C5F4 ADRP X20, 0x25AC000
	0x01E2C5F8 LDRB W8, [X20 + 0xE6C]
	0x01E2C5FC MOV X19, X1
	0x01E2C600 TBNZ X8, 0x0, 0x1E2C618
	0x01E2C604 ADRP X0, 0x22C7000
	0x01E2C608 LDR X0, [X0 + 0x5F8]
	0x01E2C60C BL 0x1C16CF4
	0x01E2C610 MOVZ W8, 0x1
	0x01E2C614 STRB W8, [X20 + 0xE6C]
	0x01E2C618 CBZ X19, 0x1E2C718
	0x01E2C61C ADRP X20, 0x22C7000
	0x01E2C620 LDR X20, [X20 + 0x5F8]
	0x01E2C624 MOV X0, X19
	0x01E2C628 MOV X1, X31
	0x01E2C62C BL 0x3C8EBE8
	0x01E2C630 MOV X0, X19
	0x01E2C634 MOV X1, X31
	0x01E2C638 STR S0, [X31 + 0x5C]
	0x01E2C63C BL 0x3C8E868
	0x01E2C640 MOV X0, X19
	0x01E2C644 MOV X1, X31
	0x01E2C648 MOV V8.16B, V0.16B
	0x01E2C64C MOV V9.16B, V1.16B
	0x01E2C650 MOV V14.16B, V2.16B
	0x01E2C654 BL 0x3C8E9A0
	0x01E2C658 MOV X0, X19
	0x01E2C65C MOV X1, X31
	0x01E2C660 MOV V11.16B, V0.16B
	0x01E2C664 STR S1, [X31 + 0xC]
	0x01E2C668 STR S2, [X31 + 0x58]
	0x01E2C66C BL 0x3C8EE90
	0x01E2C670 MOV X0, X19
	0x01E2C674 MOV X1, X31
	0x01E2C678 MOV V12.16B, V0.16B
	0x01E2C67C MOV V13.16B, V1.16B
	0x01E2C680 MOV V15.16B, V2.16B
	0x01E2C684 BL 0x3C8EBE8
	0x01E2C688 LDR X0, [X20]
	0x01E2C68C MOV V10.16B, V0.16B
	0x01E2C690 LDR W8, [X0 + 0xE0]
	0x01E2C694 CBNZ W8, 0x1E2C69C
	0x01E2C698 BL 0x1C16DFC
	0x01E2C69C FMUL S0, S8, S8
	0x01E2C6A0 FMUL S1, S9, S9
	0x01E2C6A4 FADD S0, S0, S1
	0x01E2C6A8 FMUL S1, S14, S14
	0x01E2C6AC MOV X0, X31
	0x01E2C6B0 FADD S8, S1, S0
	0x01E2C6B4 BL 0x3C8A728
	0x01E2C6B8 LDP S4, S1, [X31 + 0x58]
	0x01E2C6BC LDR V3, [X31 + 0xC]
	0x01E2C6C0 FMUL S2, S11, S11
	0x01E2C6C4 FMUL S2, S12, S2
	0x01E2C6C8 FMUL S1, S1, S8
	0x01E2C6CC FMUL S3, S3, S3
	0x01E2C6D0 FMUL S4, S4, S4
	0x01E2C6D4 FMUL S3, S13, S3
	0x01E2C6D8 FADD S1, S2, S1
	0x01E2C6DC FMUL S4, S15, S4
	0x01E2C6E0 FADD S1, S3, S1
	0x01E2C6E4 FADD S1, S4, S1
	0x01E2C6E8 FADD S2, S10, S10
	0x01E2C6EC LDP X20, X19, [X31 + 0x60]
	0x01E2C6F0 LDR X30, [X31 + 0x50]
	0x01E2C6F4 LDP D9, D8, [X31 + 0x40]
	0x01E2C6F8 LDP D11, D10, [X31 + 0x30]
	0x01E2C6FC LDP D13, D12, [X31 + 0x20]
	0x01E2C700 LDP D15, D14, [X31 + 0x10]
	0x01E2C704 FDIV S1, S1, S2
	0x01E2C708 FCMP S1, S0
	0x01E2C70C CSET W0, LS
	0x01E2C710 ADD X31, X31, 0x70
	0x01E2C714 RET
	0x01E2C718 BL 0x1C16F20
	0x01E2C71C SUB X31, X31, 0x80
	0x01E2C720 STP D15, D14, [X31 + 0x10]
	0x01E2C724 STP D13, D12, [X31 + 0x20]
	0x01E2C728 STP D11, D10, [X31 + 0x30]
	0x01E2C72C STP D9, D8, [X31 + 0x40]
	0x01E2C730 STP X30, X23, [X31 + 0x50]
	0x01E2C734 STP X22, X21, [X31 + 0x60]
	0x01E2C738 STP X20, X19, [X31 + 0x70]
	0x01E2C73C ADRP X21, 0x25AC000
	0x01E2C740 LDRB W8, [X21 + 0xE6D]
	0x01E2C744 MOV X19, X1
	0x01E2C748 MOV X20, X0
	0x01E2C74C TBNZ X8, 0x0, 0x1E2C764
	0x01E2C750 ADRP X0, 0x22C7000
	0x01E2C754 LDR X0, [X0 + 0x5F8]
	0x01E2C758 BL 0x1C16CF4
	0x01E2C75C MOVZ W8, 0x1
	0x01E2C760 STRB W8, [X21 + 0xE6D]
	0x01E2C764 ADRP X22, 0x25AC000
	0x01E2C768 LDRB W8, [X22 + 0xE90]
	0x01E2C76C LDR W21, [X19 + 0x40]
	0x01E2C770 CBNZ W8, 0x1E2C788
	0x01E2C774 ADRP X0, 0x22CE000
	0x01E2C778 LDR X0, [X0 + 0xC68]
	0x01E2C77C BL 0x1C16CF4
	0x01E2C780 MOVZ W8, 0x1
	0x01E2C784 STRB W8, [X22 + 0xE90]
	0x01E2C788 ADRP X23, 0x22CE000
	0x01E2C78C LDR X23, [X23 + 0xC68]
	0x01E2C790 LDR X0, [X23]
	0x01E2C794 LDR W8, [X0 + 0xE0]
	0x01E2C798 CBNZ W8, 0x1E2C7A0
	0x01E2C79C BL 0x1C16DFC
	0x01E2C7A0 LDR X0, [X19 + 0x48]
	0x01E2C7A4 LDR W1, [X19 + 0x50]
	0x01E2C7A8 MOV X2, X31
	0x01E2C7AC BL 0x1E2E6F8
	0x01E2C7B0 LDUR X0, [X19 + 0x54]
	0x01E2C7B4 LDR W1, [X19 + 0x5C]
	0x01E2C7B8 MOV X2, X31
	0x01E2C7BC MOV V11.16B, V0.16B
	0x01E2C7C0 MOV V12.16B, V1.16B
	0x01E2C7C4 MOV V13.16B, V2.16B
	0x01E2C7C8 BL 0x1E2E6F8
	0x01E2C7CC LDR X0, [X20 + 0xB8]
	0x01E2C7D0 STR S2, [X31 + 0xC]
	0x01E2C7D4 CBZ X0, 0x1E2C8E8
	0x01E2C7D8 MOV X1, X31
	0x01E2C7DC MOV V10.16B, V0.16B
	0x01E2C7E0 MOV V9.16B, V1.16B
	0x01E2C7E4 BL 0x3C8EE90
	0x01E2C7E8 LDRB W8, [X22 + 0xE90]
	0x01E2C7EC LDR W19, [X19 + 0x40]
	0x01E2C7F0 MOV V14.16B, V0.16B
	0x01E2C7F4 MOV V15.16B, V1.16B
	0x01E2C7F8 MOV V8.16B, V2.16B
	0x01E2C7FC CBNZ W8, 0x1E2C814
	0x01E2C800 ADRP X0, 0x22CE000
	0x01E2C804 LDR X0, [X0 + 0xC68]
	0x01E2C808 BL 0x1C16CF4
	0x01E2C80C MOVZ W8, 0x1
	0x01E2C810 STRB W8, [X22 + 0xE90]
	0x01E2C814 LDR X0, [X23]
	0x01E2C818 ADRP X20, 0x22C7000
	0x01E2C81C LDR W8, [X0 + 0xE0]
	0x01E2C820 LDR X20, [X20 + 0x5F8]
	0x01E2C824 CBNZ W8, 0x1E2C82C
	0x01E2C828 BL 0x1C16DFC
	0x01E2C82C LDR X0, [X20]
	0x01E2C830 LDR W8, [X0 + 0xE0]
	0x01E2C834 CBNZ W8, 0x1E2C83C
	0x01E2C838 BL 0x1C16DFC
	0x01E2C83C MOVZ W8, 0x3A800000
	0x01E2C840 FMOV S0, W8
	0x01E2C844 AND W8, W19, 0x1
	0x01E2C848 AND W9, W21, 0x1
	0x01E2C84C FMUL S1, S11, S11
	0x01E2C850 FMUL S2, S12, S12
	0x01E2C854 SUB W8, W31, W8
	0x01E2C858 SUB W9, W31, W9
	0x01E2C85C FMUL S3, S13, S13
	0x01E2C860 EOR W8, W8, W19, 0x1
	0x01E2C864 FADD S1, S1, S2
	0x01E2C868 EOR W9, W9, W21, 0x1
	0x01E2C86C FADD S11, S3, S1
	0x01E2C870 SCVTF S1, W8
	0x01E2C874 SCVTF S2, W9
	0x01E2C878 MOV X0, X31
	0x01E2C87C FMUL S12, S1, S0
	0x01E2C880 FMUL S13, S2, S0
	0x01E2C884 BL 0x3C8A728
	0x01E2C888 LDR V4, [X31 + 0xC]
	0x01E2C88C FMUL S2, S10, S10
	0x01E2C890 FMUL S1, S13, S11
	0x01E2C894 FMUL S3, S9, S9
	0x01E2C898 FMUL S2, S2, S14
	0x01E2C89C FMUL S4, S4, S4
	0x01E2C8A0 FMUL S3, S3, S15
	0x01E2C8A4 FADD S1, S1, S2
	0x01E2C8A8 FMUL S4, S4, S8
	0x01E2C8AC FADD S1, S3, S1
	0x01E2C8B0 FADD S1, S4, S1
	0x01E2C8B4 FADD S2, S12, S12
	0x01E2C8B8 LDP X20, X19, [X31 + 0x70]
	0x01E2C8BC LDP X22, X21, [X31 + 0x60]
	0x01E2C8C0 LDP X30, X23, [X31 + 0x50]
	0x01E2C8C4 LDP D9, D8, [X31 + 0x40]
	0x01E2C8C8 LDP D11, D10, [X31 + 0x30]
	0x01E2C8CC LDP D13, D12, [X31 + 0x20]
	0x01E2C8D0 LDP D15, D14, [X31 + 0x10]
	0x01E2C8D4 FDIV S1, S1, S2

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Compare X1, 0
	010 JumpIfEqual {223}
	011 Move X20, X1
	012 Move X0, X1
	013 Move X1, X31
	014 Move X19, X2
	015 Call Rigidbody2D.get_mass, X0
	016 Move X21, 0x25AD000
	017 Move W8, [X21+3727]
	018 Move V8, V0
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x22CF000
	022 Move X0, [X0+3176]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+3727], W8
	026 Move X22, 0x22CF000
	027 Move X22, [X22+3176]
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move W8, S8
	034 Move W9, 0x44800000
	035 Move W8, W8
	036 ShiftRight W8, 31
	037 And W8, W8, 0x7FFFFFFF
	038 Move S0, 0.5
	039 Move S1, W9
	040 NotImplemented "Instruction UCVTF not yet implemented."
	041 Move W9, 0x7F800000
	042 Multiply S1, S8, S1
	043 Subtract S0, S0, S2
	044 Move S2, W9
	045 Add S0, S1, S0
	046 NotImplemented "Instruction FCVTZS not yet implemented."
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move W9, 0x80000000
	049 NotImplemented "Instruction CSEL not yet implemented."
	050 NotImplemented "Instruction SBFM not yet implemented."
	051 Xor W8, W9, W8
	052 Move X0, X20
	053 Move X1, X31
	054 Move [X19+64], W8
	055 Call Rigidbody2D.get_drag, X0
	056 Move W8, [X21+3727]
	057 Move V8, V0
	058 Compare W8, 0
	059 JumpIfNotEqual {65}
	060 Move X0, 0x22CF000
	061 Move X0, [X0+3176]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X21+3727], W8
	065 Move X0, [X22]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move W8, S8
	071 Move W9, 0x44800000
	072 Move W8, W8
	073 ShiftRight W8, 31
	074 And W8, W8, 0x7FFFFFFF
	075 Move S0, 0.5
	076 Move S1, W9
	077 NotImplemented "Instruction UCVTF not yet implemented."
	078 Move W9, 0x7F800000
	079 Multiply S1, S8, S1
	080 Subtract S0, S0, S2
	081 Move S2, W9
	082 Add S0, S1, S0
	083 NotImplemented "Instruction FCVTZS not yet implemented."
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move W9, 0x80000000
	086 NotImplemented "Instruction CSEL not yet implemented."
	087 NotImplemented "Instruction SBFM not yet implemented."
	088 Xor W8, W9, W8
	089 Move X0, X20
	090 Move X1, X31
	091 Move [X19+56], W8
	092 Call Rigidbody2D.get_angularDrag, X0
	093 Move W8, [X21+3727]
	094 Move V8, V0
	095 Compare W8, 0
	096 JumpIfNotEqual {102}
	097 Move X0, 0x22CF000
	098 Move X0, [X0+3176]
	099 Call 0x1C17CF4
	100 Move W8, 1
	101 Move [X21+3727], W8
	102 Move X0, [X22]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Move W8, S8
	108 Move W9, 0x44800000
	109 Move W8, W8
	110 ShiftRight W8, 31
	111 And W8, W8, 0x7FFFFFFF
	112 Move S0, 0.5
	113 Move S1, W9
	114 NotImplemented "Instruction UCVTF not yet implemented."
	115 Move W9, 0x7F800000
	116 Multiply S1, S8, S1
	117 Subtract S0, S0, S2
	118 Move S2, W9
	119 Add S0, S1, S0
	120 NotImplemented "Instruction FCVTZS not yet implemented."
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 Move W9, 0x80000000
	123 NotImplemented "Instruction CSEL not yet implemented."
	124 NotImplemented "Instruction SBFM not yet implemented."
	125 Xor W8, W9, W8
	126 Move X0, X20
	127 Move X1, X31
	128 Move [X19+60], W8
	129 Call Rigidbody2D.get_velocity, X0
	130 Move W8, [X21+3727]
	131 Move V9, V0
	132 Move V8, V1
	133 Compare W8, 0
	134 JumpIfNotEqual {140}
	135 Move X0, 0x22CF000
	136 Move X0, [X0+3176]
	137 Call 0x1C17CF4
	138 Move W8, 1
	139 Move [X21+3727], W8
	140 Move X0, [X22]
	141 Move W8, [X0+224]
	142 Compare W8, 0
	143 JumpIfEqual {145}
	144 Move W8, W31
	145 Call 0x1C17DFC
	146 Move W8, [X21+3727]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 NotImplemented "Instruction CSET not yet implemented."
	149 Move W9, S9
	150 Move W10, 0x44800000
	151 Move W9, W9
	152 ShiftRight W9, 31
	153 And W9, W9, 0x7FFFFFFF
	154 Move S0, 0.5
	155 Move S1, W10
	156 NotImplemented "Instruction UCVTF not yet implemented."
	157 Move W11, 0x7F800000
	158 Multiply S1, S9, S1
	159 Subtract S0, S0, S2
	160 Move S3, W11
	161 Add S0, S1, S0
	162 NotImplemented "Instruction FCVTZS not yet implemented."
	163 NotImplemented "Instruction FCMP not yet implemented."
	164 Move W10, 0x80000000
	165 NotImplemented "Instruction CSEL not yet implemented."
	166 Compare W8, 0
	167 JumpIfEqual {173}
	168 Move X0, 0x22CF000
	169 Move X0, [X0+3176]
	170 Call 0x1C17CF4
	171 Move W8, 1
	172 Move [X21+3727], W8
	173 Move X0, [X22]
	174 Move W8, [X0+224]
	175 Compare W8, 0
	176 JumpIfNotEqual {178}
	177 Call 0x1C17DFC
	178 Move W9, S8
	179 Move W10, 0x44800000
	180 Move W9, W9
	181 ShiftRight W9, 31
	182 And W9, W9, 0x7FFFFFFF
	183 Move S0, 0.5
	184 Move S1, W10
	185 NotImplemented "Instruction UCVTF not yet implemented."
	186 Move W10, 0x7F800000
	187 Multiply S1, S8, S1
	188 Subtract S0, S0, S2
	189 Move S2, W10
	190 Add S0, S1, S0
	191 NotImplemented "Instruction FCVTZS not yet implemented."
	192 NotImplemented "Instruction FCMP not yet implemented."
	193 Move W10, 0x80000000
	194 NotImplemented "Instruction CSEL not yet implemented."
	195 NotImplemented "Instruction SBFM not yet implemented."
	196 NotImplemented "Instruction SBFM not yet implemented."
	197 Xor W8, W8, W23
	198 Xor W9, W10, W9
	199 NotImplemented "Instruction BFM not yet implemented."
	200 Move [X19+72], X8
	201 Move X0, X20
	202 Move X1, X31
	203 Move [X19+8], W31
	204 Call Rigidbody2D.get_angularVelocity, X0
	205 Add X0, X19, 12
	206 Move X1, X31
	207 Call Vector3Compressed.set_Z, X0, V0
	208 Move X0, X20
	209 Move X1, X31
	210 Call Rigidbody2D.get_gravityScale, X0
	211 Move X0, X19
	212 Move X20, [X31+48]
	213 Move X19, [X31+56]
	214 Move X22, [X31+32]
	215 Move X21, [X31+40]
	216 Move X30, [X31+16]
	217 Move X23, [X31+24]
	218 Move X1, X31
	219 Move D9, [X31+64]
	220 Move D8, [X31+72]
	221 Call Vector3Compressed.set_Z, X0, V0
	222 Return 
	223 Call 0x1C17F20

Method: System.Void ApplyExtras(UnityEngine.Rigidbody2D rb, ref Fusion.Addons.Physics.NetworkRBData data)

Disassembly:
	0x01E2C8F0 STP X20, X19, [X31 + 0x10]
	0x01E2C8F4 ADRP X20, 0x25AC000
	0x01E2C8F8 ADRP X21, 0x22CE000
	0x01E2C8FC LDRB W8, [X20 + 0xE6E]
	0x01E2C900 LDR X21, [X21 + 0xC90]
	0x01E2C904 MOV X19, X0
	0x01E2C908 TBNZ X8, 0x0, 0x1E2C920
	0x01E2C90C ADRP X0, 0x22CE000
	0x01E2C910 LDR X0, [X0 + 0xC90]
	0x01E2C914 BL 0x1C16CF4
	0x01E2C918 MOVZ W8, 0x1
	0x01E2C91C STRB W8, [X20 + 0xE6E]
	0x01E2C920 LDR X1, [X21]
	0x01E2C924 MOV X0, X19
	0x01E2C928 LDP X20, X19, [X31 + 0x10]
	0x01E2C92C LDP X30, X21, [X31], #0x20
	0x01E2C930 B 0x2421258
	0x01E2C934 STP X30, X21, [X31 - 0x20]!
	0x01E2C938 STP X20, X19, [X31 + 0x10]
	0x01E2C93C ADRP X20, 0x25AC000
	0x01E2C940 ADRP X21, 0x22CE000
	0x01E2C944 LDRB W8, [X20 + 0xE6F]
	0x01E2C948 LDR X21, [X21 + 0xC98]
	0x01E2C94C MOV X19, X0
	0x01E2C950 TBNZ X8, 0x0, 0x1E2C968
	0x01E2C954 ADRP X0, 0x22CE000
	0x01E2C958 LDR X0, [X0 + 0xC98]
	0x01E2C95C BL 0x1C16CF4
	0x01E2C960 MOVZ W8, 0x1
	0x01E2C964 STRB W8, [X20 + 0xE6F]
	0x01E2C968 LDR X2, [X21]
	0x01E2C96C MOV X0, X19
	0x01E2C970 LDP X20, X19, [X31 + 0x10]
	0x01E2C974 MOV W1, W31
	0x01E2C978 LDP X30, X21, [X31], #0x20
	0x01E2C97C B 0x22275CC
	0x01E2C980 STP X30, X21, [X31 - 0x20]!
	0x01E2C984 STP X20, X19, [X31 + 0x10]
	0x01E2C988 ADRP X21, 0x25AC000
	0x01E2C98C ADRP X20, 0x22C7000
	0x01E2C990 LDRB W8, [X21 + 0xE70]
	0x01E2C994 LDR X20, [X20 + 0x598]
	0x01E2C998 MOV X19, X0
	0x01E2C99C TBNZ X8, 0x0, 0x1E2C9B4
	0x01E2C9A0 ADRP X0, 0x22C7000
	0x01E2C9A4 LDR X0, [X0 + 0x598]
	0x01E2C9A8 BL 0x1C16CF4
	0x01E2C9AC MOVZ W8, 0x1
	0x01E2C9B0 STRB W8, [X21 + 0xE70]
	0x01E2C9B4 LDR X0, [X20]
	0x01E2C9B8 LDR X20, [X19 + 0x88]
	0x01E2C9BC LDR W8, [X0 + 0xE0]
	0x01E2C9C0 CBNZ W8, 0x1E2C9C8
	0x01E2C9C4 BL 0x1C16DFC
	0x01E2C9C8 MOV X0, X20
	0x01E2C9CC MOV X1, X31
	0x01E2C9D0 BL 0x3C38948
	0x01E2C9D4 TBZ X0, 0x0, 0x1E2C9E0
	0x01E2C9D8 MOV W0, W31
	0x01E2C9DC B 0x1E2C9EC
	0x01E2C9E0 LDRB W8, [X19 + 0x91]
	0x01E2C9E4 CMP W8, 0x0
	0x01E2C9E8 CSET W0, NE
	0x01E2C9EC LDP X20, X19, [X31 + 0x10]
	0x01E2C9F0 LDP X30, X21, [X31], #0x20
	0x01E2C9F4 RET
	0x01E2C9F8 LDRB W0, [X0 + 0xB5]
	0x01E2C9FC RET
	0x01E2CA00 AND W8, W1, 0x1
	0x01E2CA04 STRB W8, [X0 + 0xB5]
	0x01E2CA08 RET
	0x01E2CA0C LDR X0, [X0 + 0x88]
	0x01E2CA10 RET
	0x01E2CA14 B 0x1E2CA18
	0x01E2CA18 STR X30, [X31 - 0x30]!
	0x01E2CA1C STP X22, X21, [X31 + 0x10]
	0x01E2CA20 STP X20, X19, [X31 + 0x20]
	0x01E2CA24 ADRP X22, 0x25AC000
	0x01E2CA28 ADRP X21, 0x22C7000
	0x01E2CA2C LDRB W8, [X22 + 0xE71]
	0x01E2CA30 LDR X21, [X21 + 0x598]
	0x01E2CA34 MOV X20, X1
	0x01E2CA38 MOV X19, X0
	0x01E2CA3C TBNZ X8, 0x0, 0x1E2CA54
	0x01E2CA40 ADRP X0, 0x22C7000
	0x01E2CA44 LDR X0, [X0 + 0x598]
	0x01E2CA48 BL 0x1C16CF4
	0x01E2CA4C MOVZ W8, 0x1
	0x01E2CA50 STRB W8, [X22 + 0xE71]
	0x01E2CA54 LDR X0, [X21]
	0x01E2CA58 LDR W8, [X0 + 0xE0]
	0x01E2CA5C CBNZ W8, 0x1E2CA64
	0x01E2CA60 BL 0x1C16DFC
	0x01E2CA64 MOV X0, X20
	0x01E2CA68 MOV X1, X31
	0x01E2CA6C MOV X2, X31
	0x01E2CA70 BL 0x3C3883C
	0x01E2CA74 TBNZ X0, 0x0, 0x1E2CAB0
	0x01E2CA78 MOV X0, X19
	0x01E2CA7C MOV X1, X31
	0x01E2CA80 BL 0x3C32E90
	0x01E2CA84 LDR X8, [X21]
	0x01E2CA88 MOV X21, X0
	0x01E2CA8C LDR W9, [X8 + 0xE0]
	0x01E2CA90 CBNZ W9, 0x1E2CA9C
	0x01E2CA94 MOV X0, X8
	0x01E2CA98 BL 0x1C16DFC
	0x01E2CA9C MOV X0, X20
	0x01E2CAA0 MOV X1, X21
	0x01E2CAA4 MOV X2, X31
	0x01E2CAA8 BL 0x3C3883C
	0x01E2CAAC TBZ X0, 0x0, 0x1E2CABC
	0x01E2CAB0 STR X31, [X19 + 0x88]
	0x01E2CAB4 STRB W31, [X19 + 0xB3]
	0x01E2CAB8 B 0x1E2CAC0
	0x01E2CABC STR X20, [X19 + 0x88]
	0x01E2CAC0 LDP X20, X19, [X31 + 0x20]
	0x01E2CAC4 LDP X22, X21, [X31 + 0x10]
	0x01E2CAC8 LDR X30, [X31], #0x30
	0x01E2CACC RET
	0x01E2CAD0 LDR X1, [X0 + 0x88]
	0x01E2CAD4 B 0x1E2CA18
	0x01E2CAD8 STP X30, X19, [X31 - 0x10]!
	0x01E2CADC LDR X8, [X0 + 0x38]
	0x01E2CAE0 CBZ X8, 0x1E2CB90
	0x01E2CAE4 LDR X8, [X8 + 0x98]
	0x01E2CAE8 CBZ X8, 0x1E2CB90
	0x01E2CAEC MOV X19, X0
	0x01E2CAF0 LDR X0, [X8 + 0x40]
	0x01E2CAF4 CBZ X0, 0x1E2CB90
	0x01E2CAF8 MOV X1, X31
	0x01E2CAFC BL 0x1ED4BCC
	0x01E2CB00 LDR X8, [X19 + 0x38]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x25AD000
	010 Move W8, [X22+3728]
	011 Move W21, [X2+64]
	012 Move X20, X2
	013 Move X19, X1
	014 Compare W8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, 0x22CF000
	017 Move X0, [X0+3176]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3728], W8
	021 Move X23, 0x22CF000
	022 Move X23, [X23+3176]
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Compare X19, 0
	029 JumpIfEqual {156}
	030 And W8, W21, 1
	031 Subtract W8, W31, W8
	032 Xor W8, W8, W21
	033 Move W9, 0x3A800000
	034 NotImplemented "Instruction SCVTF not yet implemented."
	035 Move S1, W9
	036 Multiply S0, S0, S1
	037 Move X0, X19
	038 Move X1, X31
	039 Call Rigidbody2D.set_mass, X0, V0
	040 Move W8, [X22+3728]
	041 Move W21, [X20+56]
	042 Compare W8, 0
	043 JumpIfNotEqual {49}
	044 Move X0, 0x22CF000
	045 Move X0, [X0+3176]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X22+3728], W8
	049 Move X0, [X23]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 And W8, W21, 1
	055 Subtract W8, W31, W8
	056 Xor W8, W8, W21
	057 Move W9, 0x3A800000
	058 NotImplemented "Instruction SCVTF not yet implemented."
	059 Move S1, W9
	060 Multiply S0, S0, S1
	061 Move X0, X19
	062 Move X1, X31
	063 Call Rigidbody2D.set_drag, X0, V0
	064 Move W8, [X22+3728]
	065 Move W21, [X20+60]
	066 Compare W8, 0
	067 JumpIfNotEqual {73}
	068 Move X0, 0x22CF000
	069 Move X0, [X0+3176]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X22+3728], W8
	073 Move X0, [X23]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 And W8, W21, 1
	079 Subtract W8, W31, W8
	080 Xor W8, W8, W21
	081 Move W9, 0x3A800000
	082 NotImplemented "Instruction SCVTF not yet implemented."
	083 Move S1, W9
	084 Multiply S0, S0, S1
	085 Move X0, X19
	086 Move X1, X31
	087 Call Rigidbody2D.set_angularDrag, X0, V0
	088 Move X21, X20
	089 Add X21, X21, 72
	090 Move X24, [X21]
	091 Move W8, [X22+3728]
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0x22CF000
	095 Move X0, [X0+3176]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X22+3728], W8
	099 Move X0, [X23]
	100 Move X25, X24
	101 ShiftRight X25, 32
	102 And X25, X25, 0x7FFFFFFF
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {115}
	106 Call 0x1C17DFC
	107 Move W8, [X22+3728]
	108 Compare W8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x22CF000
	111 Move X0, [X0+3176]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X22+3728], W8
	115 Move X0, [X23]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 And W8, W24, 1
	121 Move W9, 0x3A800000
	122 And W10, W25, 1
	123 Subtract W8, W31, W8
	124 Move S1, W9
	125 Subtract W9, W31, W10
	126 Xor W8, W8, W24
	127 Xor W9, W9, W25
	128 NotImplemented "Instruction SCVTF not yet implemented."
	129 NotImplemented "Instruction SCVTF not yet implemented."
	130 Multiply S0, S0, S1
	131 Multiply S1, S2, S1
	132 Move X0, X19
	133 Move X1, X31
	134 Call Rigidbody2D.set_velocity, X0, X1
	135 Add X0, X20, 84
	136 Move X1, X31
	137 Call Vector3Compressed.get_Z, X0
	138 Move X0, X19
	139 Move X1, X31
	140 Call Rigidbody2D.set_angularVelocity, X0, V0
	141 Move X0, X21
	142 Move X1, X31
	143 Call Vector3Compressed.get_Z, X0
	144 Move X0, X19
	145 Move X20, [X31+48]
	146 Move X19, [X31+56]
	147 Move X22, [X31+32]
	148 Move X21, [X31+40]
	149 Move X24, [X31+16]
	150 Move X23, [X31+24]
	151 Move X1, X31
	152 Move X30, [X31+64]
	153 Move X25, [X31+72]
	154 Call Rigidbody2D.set_gravityScale, X0, V0
	155 Return 
	156 Call 0x1C17F20

Method: System.Void ResetRigidbody()

Disassembly:
	0x01E2CB10 MOV X0, X8
	0x01E2CB14 MOV X1, X31
	0x01E2CB18 BL 0x1E9E520
	0x01E2CB1C LDR X1, [X19 + 0x88]
	0x01E2CB20 CMP W0, 0x1
	0x01E2CB24 CSET W8, EQ
	0x01E2CB28 MOV X0, X19
	0x01E2CB2C STRB W8, [X19 + 0xB0]
	0x01E2CB30 BL 0x1E2CA18
	0x01E2CB34 MOV X0, X19
	0x01E2CB38 MOV X1, X31
	0x01E2CB3C BL 0x3C32E90
	0x01E2CB40 CBZ X0, 0x1E2CB90
	0x01E2CB44 MOV X1, X31
	0x01E2CB48 BL 0x3C3F58C
	0x01E2CB4C LDR X8, [X19]
	0x01E2CB50 MOV X0, X19
	0x01E2CB54 LDR X9, [X8 + 0x278]
	0x01E2CB58 LDR X1, [X8 + 0x280]
	0x01E2CB5C BLR X9
	0x01E2CB60 MOV X0, X19
	0x01E2CB64 MOV X1, X31
	0x01E2CB68 BL 0x3C32E90
	0x01E2CB6C CBZ X0, 0x1E2CB90
	0x01E2CB70 MOV X1, X31
	0x01E2CB74 BL 0x3C3DEB4
	0x01E2CB78 LDR X8, [X19]
	0x01E2CB7C MOV X0, X19
	0x01E2CB80 LDR X2, [X8 + 0x298]
	0x01E2CB84 LDR X1, [X8 + 0x2A0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25AD000
	006 Move X21, 0x22CF000
	007 Move W8, [X20+3686]
	008 Move X21, [X21+3184]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22CF000
	015 Move X0, [X0+3184]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3686], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Call 0x241FE9C, X0
	022 Move X19, [X19+184]
	023 Compare X19, 0
	024 JumpIfEqual {39}
	025 Move S0, W31
	026 Move S1, W31
	027 Move X0, X19
	028 Move X1, X31
	029 Call Rigidbody2D.set_velocity, X0, X1
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move S0, W31
	034 Move X1, X31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call Rigidbody2D.set_angularVelocity, X0, V0
	038 Return 
	039 Call 0x1C17F20

Method: System.Boolean IsRBSleeping(UnityEngine.Rigidbody2D rb)

Disassembly:
	0x01E2CB88 LDP X30, X19, [X31], #0x10
	0x01E2CB8C BR X2
	0x01E2CB90 BL 0x1C16F20
	0x01E2CB94 ADRP X8, 0xFFFFFFFFFECC0000
	0x01E2CB98 LDR V0, [X8 + 0x60]
	0x01E2CB9C MOVZ W8, 0x1

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody2D.IsSleeping, X0
	006 Return X0
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Void ForceRBSleep(UnityEngine.Rigidbody2D rb)

Disassembly:
	0x01E2CBA0 MOV X1, X31
	0x01E2CBA4 STRB W8, [X0 + 0x82]
	0x01E2CBA8 STRB W8, [X0 + 0x91]
	0x01E2CBAC STUR V0, [X0 + 0x94]
	0x01E2CBB0 B 0x1E7E134
	0x01E2CBB4 MOVZ X1, 0xD70A

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody2D.Sleep, X0
	006 Return 
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Void ForceRBWake(UnityEngine.Rigidbody2D rb)

Disassembly:
	0x01E2CBB8 MOVZ X0, 0x1
	0x01E2CBBC MOVK X1, 0x3C230000
	0x01E2CBC0 MOVK X0, 0xD70A
	0x01E2CBC4 MOVK X1, 0xD70A
	0x01E2CBC8 MOVK X0, 0x3C230000
	0x01E2CBCC MOVK X1, 0x3C230000

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody2D.WakeUp, X0
	006 Return 
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Boolean IsRigidbodyBelowSleepingThresholds(UnityEngine.Rigidbody2D rb)

Disassembly:
	0x01E2CBD0 RET
	0x01E2CBD4 AND W1, W1, 0x1
	0x01E2CBD8 MOV X2, X31
	0x01E2CBDC B 0x1E73D08
	0x01E2CBE0 MOV X1, X31
	0x01E2CBE4 B 0x1E73D0C
	0x01E2CBE8 SUB X31, X31, 0x30
	0x01E2CBEC STP X30, X21, [X31 + 0x10]
	0x01E2CBF0 STP X20, X19, [X31 + 0x20]
	0x01E2CBF4 ADRP X21, 0x25AC000
	0x01E2CBF8 ADRP X20, 0x22CE000
	0x01E2CBFC LDRB W8, [X21 + 0xE72]
	0x01E2CC00 LDR X20, [X20 + 0xCA0]
	0x01E2CC04 MOV X19, X0
	0x01E2CC08 TBNZ X8, 0x0, 0x1E2CC20
	0x01E2CC0C ADRP X0, 0x22CE000
	0x01E2CC10 LDR X0, [X0 + 0xCA0]
	0x01E2CC14 BL 0x1C16CF4
	0x01E2CC18 MOVZ W8, 0x1
	0x01E2CC1C STRB W8, [X21 + 0xE72]
	0x01E2CC20 LDR W1, [X19 + 0x44]
	0x01E2CC24 LDR X3, [X20]
	0x01E2CC28 ADD X0, X31, 0x8
	0x01E2CC2C STR X31, [X31 + 0x8]
	0x01E2CC30 UBFM W2, W1, 0x8, 0xF
	0x01E2CC34 BL 0x279BD90
	0x01E2CC38 LDR X0, [X31 + 0x8]
	0x01E2CC3C LDP X20, X19, [X31 + 0x20]
	0x01E2CC40 LDP X30, X21, [X31 + 0x10]
	0x01E2CC44 ADD X31, X31, 0x30
	0x01E2CC48 RET
	0x01E2CC4C UBFM X8, X1, 0x18, 0x3F
	0x01E2CC50 BFM W8, W1, 0x0, 0x7
	0x01E2CC54 STR W8, [X0 + 0x44]
	0x01E2CC58 RET
	0x01E2CC5C STR X30, [X31 - 0x30]!
	0x01E2CC60 STP X22, X21, [X31 + 0x10]
	0x01E2CC64 STP X20, X19, [X31 + 0x20]
	0x01E2CC68 ADRP X21, 0x25AC000
	0x01E2CC6C LDRB W8, [X21 + 0xE90]
	0x01E2CC70 LDP W20, W19, [X0 + 0x48]
	0x01E2CC74 CBNZ W8, 0x1E2CC8C
	0x01E2CC78 ADRP X0, 0x22CE000
	0x01E2CC7C LDR X0, [X0 + 0xC68]
	0x01E2CC80 BL 0x1C16CF4
	0x01E2CC84 MOVZ W8, 0x1
	0x01E2CC88 STRB W8, [X21 + 0xE90]
	0x01E2CC8C ADRP X22, 0x22CE000
	0x01E2CC90 LDR X22, [X22 + 0xC68]
	0x01E2CC94 LDR X0, [X22]
	0x01E2CC98 LDR W8, [X0 + 0xE0]
	0x01E2CC9C CBNZ W8, 0x1E2CCC0
	0x01E2CCA0 BL 0x1C16DFC
	0x01E2CCA4 LDRB W8, [X21 + 0xE90]
	0x01E2CCA8 CBNZ W8, 0x1E2CCC0
	0x01E2CCAC ADRP X0, 0x22CE000
	0x01E2CCB0 LDR X0, [X0 + 0xC68]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x25AD000
	007 Move W8, [X20+3687]
	008 Move X19, X1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x22CF000
	014 Move X0, [X0+3168]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3687], W8
	018 Compare X19, 0
	019 JumpIfEqual {65}
	020 Move X20, 0x22CF000
	021 Move X20, [X20+3168]
	022 Move X0, X19
	023 Move X1, X31
	024 Call Rigidbody2D.get_velocity, X0
	025 Move X0, [X20]
	026 Multiply S0, S0, S0
	027 Multiply S1, S1, S1
	028 Add S9, S0, S1
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call Physics2D.get_linearSleepTolerance
	035 Move X0, X31
	036 Move V8, V0
	037 Call Physics2D.get_linearSleepTolerance
	038 Multiply S0, S8, S0
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move X0, X19
	041 Move X1, X31
	042 Call Rigidbody2D.get_angularVelocity, X0
	043 Move X0, [X20]
	044 Move V8, V0
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X31
	050 Call Physics2D.get_angularSleepTolerance
	051 Move X0, X31
	052 Move V9, V0
	053 Call Physics2D.get_angularSleepTolerance
	054 Multiply S1, S8, S8
	055 Multiply S0, S9, S0
	056 NotImplemented "Instruction FCMP not yet implemented."
	057 NotImplemented "Instruction CSET not yet implemented."
	058 Move W0, W31
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X30, [X31+16]
	062 Move D9, [X31+48]
	063 Move D8, [X31+56]
	064 Return X0
	065 Call 0x1C17F20

Method: System.Boolean IsStateBelowSleepingThresholds(Fusion.Addons.Physics.NetworkRBData data)

Disassembly:
	0x01E2CCB4 BL 0x1C16CF4
	0x01E2CCB8 MOVZ W8, 0x1
	0x01E2CCBC STRB W8, [X21 + 0xE90]
	0x01E2CCC0 LDR X0, [X22]
	0x01E2CCC4 LDR W8, [X0 + 0xE0]
	0x01E2CCC8 CBNZ W8, 0x1E2CCD0
	0x01E2CCCC BL 0x1C16DFC
	0x01E2CCD0 AND W8, W20, 0x1
	0x01E2CCD4 MOVZ W9, 0x3A800000
	0x01E2CCD8 AND W10, W19, 0x1
	0x01E2CCDC SUB W8, W31, W8
	0x01E2CCE0 FMOV S1, W9
	0x01E2CCE4 SUB W9, W31, W10
	0x01E2CCE8 EOR W8, W8, W20, 0x1
	0x01E2CCEC EOR W9, W9, W19, 0x1
	0x01E2CCF0 LDP X20, X19, [X31 + 0x20]
	0x01E2CCF4 LDP X22, X21, [X31 + 0x10]
	0x01E2CCF8 SCVTF S0, W8
	0x01E2CCFC SCVTF S2, W9
	0x01E2CD00 FMUL S0, S0, S1
	0x01E2CD04 FMUL S1, S2, S1
	0x01E2CD08 LDR X30, [X31], #0x30
	0x01E2CD0C RET
	0x01E2CD10 STP D9, D8, [X31 - 0x40]!
	0x01E2CD14 STR X30, [X31 + 0x10]
	0x01E2CD18 STP X22, X21, [X31 + 0x20]
	0x01E2CD1C STP X20, X19, [X31 + 0x30]
	0x01E2CD20 ADRP X20, 0x25AC000
	0x01E2CD24 LDRB W8, [X20 + 0xE8F]
	0x01E2CD28 MOV V8.16B, V1.16B
	0x01E2CD2C MOV V9.16B, V0.16B
	0x01E2CD30 MOV X19, X0
	0x01E2CD34 CBNZ W8, 0x1E2CD4C
	0x01E2CD38 ADRP X0, 0x22CE000
	0x01E2CD3C LDR X0, [X0 + 0xC68]
	0x01E2CD40 BL 0x1C16CF4
	0x01E2CD44 MOVZ W8, 0x1
	0x01E2CD48 STRB W8, [X20 + 0xE8F]
	0x01E2CD4C ADRP X21, 0x22CE000
	0x01E2CD50 LDR X21, [X21 + 0xC68]
	0x01E2CD54 LDR X0, [X21]
	0x01E2CD58 LDR W8, [X0 + 0xE0]
	0x01E2CD5C CBZ W8, 0x1E2CD68
	0x01E2CD60 MOV W8, W31
	0x01E2CD64 B 0x1E2CD78
	0x01E2CD68 BL 0x1C16DFC
	0x01E2CD6C LDRB W8, [X20 + 0xE8F]
	0x01E2CD70 CMP W8, 0x0
	0x01E2CD74 CSET W8, EQ
	0x01E2CD78 FMOV W9, S9
	0x01E2CD7C MOVZ W10, 0x44800000
	0x01E2CD80 UBFM W9, W9, 0x1F, 0x1F
	0x01E2CD84 FMOV S0, 0.5
	0x01E2CD88 FMOV S1, W10
	0x01E2CD8C UCVTF S2, W9
	0x01E2CD90 MOVZ W11, 0x7F800000
	0x01E2CD94 FMUL S1, S9, S1
	0x01E2CD98 FSUB S0, S0, S2
	0x01E2CD9C FMOV S3, W11
	0x01E2CDA0 FADD S0, S1, S0
	0x01E2CDA4 FCVTZS W9, S0
	0x01E2CDA8 FCMP S0, S3
	0x01E2CDAC MOVZ W10, 0x80000000
	0x01E2CDB0 CSEL W22, W10, W9, EQ
	0x01E2CDB4 CBZ W8, 0x1E2CDCC
	0x01E2CDB8 ADRP X0, 0x22CE000
	0x01E2CDBC LDR X0, [X0 + 0xC68]
	0x01E2CDC0 BL 0x1C16CF4
	0x01E2CDC4 MOVZ W8, 0x1
	0x01E2CDC8 STRB W8, [X20 + 0xE8F]
	0x01E2CDCC LDR X0, [X21]
	0x01E2CDD0 LDR W8, [X0 + 0xE0]
	0x01E2CDD4 CBNZ W8, 0x1E2CDDC
	0x01E2CDD8 BL 0x1C16DFC
	0x01E2CDDC FMOV W9, S8
	0x01E2CDE0 MOVZ W10, 0x44800000
	0x01E2CDE4 UBFM W9, W9, 0x1F, 0x1F
	0x01E2CDE8 FMOV S0, 0.5
	0x01E2CDEC FMOV S1, W10
	0x01E2CDF0 UCVTF S2, W9
	0x01E2CDF4 MOVZ W10, 0x7F800000
	0x01E2CDF8 FMUL S1, S8, S1
	0x01E2CDFC FSUB S0, S0, S2
	0x01E2CE00 FMOV S2, W10
	0x01E2CE04 FADD S0, S1, S0
	0x01E2CE08 MOVZ W9, 0x80000000
	0x01E2CE0C FCVTZS W10, S0
	0x01E2CE10 FCMP S0, S2
	0x01E2CE14 CSEL W9, W9, W10, EQ
	0x01E2CE18 SBFM W8, W22, 0x1F, 0x1F
	0x01E2CE1C SBFM W10, W9, 0x1F, 0x1F
	0x01E2CE20 EOR W8, W8, W22, 0x1

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x25AD000
	010 Move W8, [X20+3688]
	011 Move X19, X1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x22CF000
	017 Move X0, [X0+3168]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3688], W8
	021 Move X20, 0x25AD000
	022 Move W8, [X20+3728]
	023 Move W22, [X19+72]
	024 Move W21, [X19+76]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0x22CF000
	028 Move X0, [X0+3176]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3728], W8
	032 Move X23, 0x22CF000
	033 Move X23, [X23+3176]
	034 Move X0, [X23]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {47}
	038 Call 0x1C17DFC
	039 Move W8, [X20+3728]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x22CF000
	043 Move X0, [X0+3176]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+3728], W8
	047 Move X0, [X23]
	048 Move X20, 0x22CF000
	049 Move W8, [X0+224]
	050 Move X20, [X20+3168]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move W8, 0x3A800000
	055 Move X0, [X20]
	056 Move S0, W8
	057 And W8, W22, 1
	058 And W9, W21, 1
	059 Subtract W8, W31, W8
	060 Subtract W9, W31, W9
	061 Xor W8, W8, W22
	062 Xor W9, W9, W21
	063 NotImplemented "Instruction SCVTF not yet implemented."
	064 NotImplemented "Instruction SCVTF not yet implemented."
	065 Move W8, [X0+224]
	066 Multiply S1, S1, S0
	067 Multiply S0, S2, S0
	068 Multiply S1, S1, S1
	069 Multiply S0, S0, S0
	070 Add S9, S1, S0
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move X0, X31
	075 Call Physics2D.get_linearSleepTolerance
	076 Move X0, X31
	077 Move V8, V0
	078 Call Physics2D.get_linearSleepTolerance
	079 Multiply S0, S8, S0
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Add X0, X19, 84
	082 Move X1, X31
	083 Call Vector3Compressed.get_Z, X0
	084 Move X0, [X20]
	085 Move V8, V0
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X31
	091 Call Physics2D.get_angularSleepTolerance
	092 Move X0, X31
	093 Move V9, V0
	094 Call Physics2D.get_angularSleepTolerance
	095 Multiply S1, S8, S8
	096 Multiply S0, S9, S0
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 NotImplemented "Instruction CSET not yet implemented."
	099 Move W0, W31
	100 Move X20, [X31+48]
	101 Move X19, [X31+56]
	102 Move X22, [X31+32]
	103 Move X21, [X31+40]
	104 Move X30, [X31+16]
	105 Move X23, [X31+24]
	106 Move D9, [X31+64]
	107 Move D8, [X31+72]
	108 Return X0

Method: System.Void .ctor()

Disassembly:
	0x01E2CE30 STR W31, [X19 + 0x50]
	0x01E2CE34 LDP X20, X19, [X31 + 0x30]
	0x01E2CE38 LDP X22, X21, [X31 + 0x20]
	0x01E2CE3C LDR X30, [X31 + 0x10]
	0x01E2CE40 LDP D9, D8, [X31], #0x40
	0x01E2CE44 RET
	0x01E2CE48 STR X30, [X31 - 0x30]!
	0x01E2CE4C STP X22, X21, [X31 + 0x10]
	0x01E2CE50 STP X20, X19, [X31 + 0x20]
	0x01E2CE54 ADRP X22, 0x25AC000
	0x01E2CE58 ADRP X21, 0x22CE000
	0x01E2CE5C LDRB W8, [X22 + 0xE73]
	0x01E2CE60 LDR X21, [X21 + 0xC60]
	0x01E2CE64 MOV W20, W1
	0x01E2CE68 MOV X19, X0
	0x01E2CE6C TBNZ X8, 0x0, 0x1E2CE90
	0x01E2CE70 ADRP X0, 0x22CE000
	0x01E2CE74 LDR X0, [X0 + 0xC60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25AD000
	006 Move X21, 0x22CF000
	007 Move W8, [X20+3689]
	008 Move X21, [X21+3192]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22CF000
	015 Move X0, [X0+3192]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3689], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x2422258, X0
	026 Return 

