Type: Fusion.Addons.Physics.NetworkRigidbody3D

Method: UnityEngine.Vector3 get_RBPosition()

Disassembly:
	0x01E2CE78 BL 0x1C16CF4
	0x01E2CE7C ADRP X0, 0x22CE000
	0x01E2CE80 LDR X0, [X0 + 0xCA8]
	0x01E2CE84 BL 0x1C16CF4
	0x01E2CE88 MOVZ W8, 0x1
	0x01E2CE8C STRB W8, [X22 + 0xE73]
	0x01E2CE90 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody.get_position, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Void set_RBPosition(UnityEngine.Vector3 value)

Disassembly:
	0x01E2CE94 ADRP X22, 0x22CE000
	0x01E2CE98 LDR W8, [X0 + 0xE0]
	0x01E2CE9C LDR X22, [X22 + 0xCA8]
	0x01E2CEA0 CBNZ W8, 0x1E2CEA8
	0x01E2CEA4 BL 0x1C16DFC
	0x01E2CEA8 MOV X0, X31
	0x01E2CEAC BL 0x3C88824

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody.set_position, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: UnityEngine.Quaternion get_RBRotation()

Disassembly:
	0x01E2CEB0 LDR X8, [X22]
	0x01E2CEB4 LDR X8, [X8 + 0xB8]
	0x01E2CEB8 STR W0, [X8]
	0x01E2CEBC TBZ X20, 0x0, 0x1E2CED8
	0x01E2CEC0 LDR X0, [X21]
	0x01E2CEC4 LDR W19, [X19 + 0x4C]
	0x01E2CEC8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody.get_rotation, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Void set_RBRotation(UnityEngine.Quaternion value)

Disassembly:
	0x01E2CECC CBNZ W8, 0x1E2CEEC
	0x01E2CED0 BL 0x1C16DFC
	0x01E2CED4 B 0x1E2CEEC
	0x01E2CED8 LDR X0, [X21]
	0x01E2CEDC LDR W8, [X0 + 0xE0]
	0x01E2CEE0 CBNZ W8, 0x1E2CEE8
	0x01E2CEE4 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody.set_rotation, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Boolean get_RBIsKinematic()

Disassembly:
	0x01E2CEE8 MOVZ W19, 0x2
	0x01E2CEEC MOV W0, W19
	0x01E2CEF0 LDP X20, X19, [X31 + 0x20]
	0x01E2CEF4 LDP X22, X21, [X31 + 0x10]
	0x01E2CEF8 MOV X1, X31
	0x01E2CEFC LDR X30, [X31], #0x30
	0x01E2CF00 B 0x3C8884C

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call Rigidbody.get_isKinematic, X0
	008 Return X0
	009 Call 0x1C17F20

Method: System.Void set_RBIsKinematic(System.Boolean value)

Disassembly:
	0x01E2CF04 STP X30, X21, [X31 - 0x20]!
	0x01E2CF08 STP X20, X19, [X31 + 0x10]
	0x01E2CF0C ADRP X20, 0x25AC000
	0x01E2CF10 ADRP X21, 0x22CE000
	0x01E2CF14 ADRP X19, 0x22CE000
	0x01E2CF18 LDRB W8, [X20 + 0xE74]
	0x01E2CF1C LDR X21, [X21 + 0xCA8]
	0x01E2CF20 LDR X19, [X19 + 0xC60]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+184]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 And W1, W1, 1
	006 Move X2, X31
	007 Move X30, [X31+16]
	008 Call Rigidbody.set_isKinematic, X0, X1
	009 Return 
	010 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01E2CF24 TBNZ X8, 0x0, 0x1E2CF48
	0x01E2CF28 ADRP X0, 0x22CE000
	0x01E2CF2C LDR X0, [X0 + 0xC60]
	0x01E2CF30 BL 0x1C16CF4
	0x01E2CF34 ADRP X0, 0x22CE000
	0x01E2CF38 LDR X0, [X0 + 0xCA8]
	0x01E2CF3C BL 0x1C16CF4
	0x01E2CF40 MOVZ W8, 0x1
	0x01E2CF44 STRB W8, [X20 + 0xE74]
	0x01E2CF48 LDR X8, [X21]
	0x01E2CF4C LDR X0, [X19]
	0x01E2CF50 LDR X8, [X8 + 0xB8]
	0x01E2CF54 LDR W9, [X0 + 0xE0]
	0x01E2CF58 LDR W19, [X8]
	0x01E2CF5C CBNZ W9, 0x1E2CF64
	0x01E2CF60 BL 0x1C16DFC
	0x01E2CF64 MOV W0, W19
	0x01E2CF68 LDP X20, X19, [X31 + 0x10]
	0x01E2CF6C MOV X1, X31
	0x01E2CF70 LDP X30, X21, [X31], #0x20
	0x01E2CF74 B 0x3C8884C
	0x01E2CF78 STR X30, [X31 - 0x20]!
	0x01E2CF7C STP X20, X19, [X31 + 0x10]
	0x01E2CF80 ADRP X19, 0x25AC000
	0x01E2CF84 ADRP X20, 0x22CE000
	0x01E2CF88 LDRB W8, [X19 + 0xE75]
	0x01E2CF8C LDR X20, [X20 + 0xC60]
	0x01E2CF90 TBNZ X8, 0x0, 0x1E2CFA8
	0x01E2CF94 ADRP X0, 0x22CE000
	0x01E2CF98 LDR X0, [X0 + 0xC60]
	0x01E2CF9C BL 0x1C16CF4
	0x01E2CFA0 MOVZ W8, 0x1
	0x01E2CFA4 STRB W8, [X19 + 0xE75]
	0x01E2CFA8 LDR X0, [X20]
	0x01E2CFAC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x25AD000
	007 Move X22, 0x22CF000
	008 Move X20, 0x22C8000
	009 Move W8, [X21+3690]
	010 Move X22, [X22+3200]
	011 Move X20, [X20+1528]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x22CF000
	018 Move X0, [X0+3200]
	019 Call 0x1C17CF4
	020 Move X0, 0x22C8000
	021 Move X0, [X0+1528]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3690], W8
	025 Move X1, [X22]
	026 Move X0, X19
	027 Call 0x241FC74, X0
	028 Move X0, [X20]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call Physics.get_simulationMode
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move [X19+181], W8
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return 

Method: System.Boolean GetRBIsKinematic(UnityEngine.Rigidbody rb)

Disassembly:
	0x01E2CFB0 CBNZ W8, 0x1E2CFB8
	0x01E2CFB4 BL 0x1C16DFC
	0x01E2CFB8 LDP X20, X19, [X31 + 0x10]
	0x01E2CFBC MOV X0, X31
	0x01E2CFC0 LDR X30, [X31], #0x20
	0x01E2CFC4 B 0x3C887C0

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody.get_isKinematic, X0
	006 Return X0
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Void SetRBIsKinematic(UnityEngine.Rigidbody rb, System.Boolean kinematic)

Disassembly:
	0x01E2CFC8 STP X30, X21, [X31 - 0x20]!
	0x01E2CFCC STP X20, X19, [X31 + 0x10]
	0x01E2CFD0 ADRP X20, 0x25AC000
	0x01E2CFD4 ADRP X21, 0x22CE000
	0x01E2CFD8 LDRB W8, [X20 + 0xE76]
	0x01E2CFDC LDR X21, [X21 + 0xC60]
	0x01E2CFE0 MOV W19, W1
	0x01E2CFE4 TBNZ X8, 0x0, 0x1E2CFFC
	0x01E2CFE8 ADRP X0, 0x22CE000
	0x01E2CFEC LDR X0, [X0 + 0xC60]
	0x01E2CFF0 BL 0x1C16CF4
	0x01E2CFF4 MOVZ W8, 0x1
	0x01E2CFF8 STRB W8, [X20 + 0xE76]
	0x01E2CFFC LDR X0, [X21]
	0x01E2D000 LDR W8, [X0 + 0xE0]
	0x01E2D004 CBNZ W8, 0x1E2D00C
	0x01E2D008 BL 0x1C16DFC
	0x01E2D00C AND W0, W19, 0x1
	0x01E2D010 LDP X20, X19, [X31 + 0x10]
	0x01E2D014 MOV X1, X31
	0x01E2D018 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {25}
	006 Move X19, X1
	007 Move X0, X1
	008 Move X1, X31
	009 Move W20, W2
	010 Call Rigidbody.get_isKinematic, X0
	011 And W8, W0, 1
	012 And W1, W20, 1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X2, X31
	018 Move X30, [X31+32]
	019 Call Rigidbody.set_isKinematic, X0, X1
	020 Return 
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Return 
	025 Call 0x1C17F20

Method: System.Void CaptureRBPositionRotation(UnityEngine.Rigidbody rb, ref Fusion.Addons.Physics.NetworkRBData data)

Disassembly:
	0x01E2D01C B 0x3C887E8
	0x01E2D020 STR X30, [X31 - 0x20]!
	0x01E2D024 STP X20, X19, [X31 + 0x10]
	0x01E2D028 ADRP X19, 0x25AB000
	0x01E2D02C ADRP X20, 0x22CD000
	0x01E2D030 LDRB W8, [X19 + 0xE77]
	0x01E2D034 LDR X20, [X20 + 0xC60]
	0x01E2D038 TBNZ X8, 0x0, 0x1E2D050
	0x01E2D03C ADRP X0, 0x22CD000
	0x01E2D040 LDR X0, [X0 + 0xC60]
	0x01E2D044 BL 0x1C16CF4
	0x01E2D048 MOVZ W8, 0x1
	0x01E2D04C STRB W8, [X19 + 0xE77]
	0x01E2D050 LDR X0, [X20]
	0x01E2D054 LDR W8, [X0 + 0xE0]
	0x01E2D058 CBNZ W8, 0x1E2D060
	0x01E2D05C BL 0x1C16DFC
	0x01E2D060 LDP X20, X19, [X31 + 0x10]
	0x01E2D064 MOV X0, X31
	0x01E2D068 LDR X30, [X31], #0x20
	0x01E2D06C B 0x3C88824
	0x01E2D070 SUB X31, X31, 0x30
	0x01E2D074 STR D8, [X31 + 0x10]
	0x01E2D078 STR X30, [X31 + 0x18]
	0x01E2D07C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {35}
	007 Move X20, X1
	008 Move X21, X0
	009 Move X0, X1
	010 Move X1, X31
	011 Move X19, X2
	012 Call Rigidbody.get_position, X0
	013 Move [X19+8], S0
	014 Move [X19+16], S1
	015 Move [X19+16], S2
	016 Move W21, [X21+144]
	017 Move X0, X20
	018 Move X1, X31
	019 Call Rigidbody.get_rotation, X0
	020 Compare W21, 0
	021 JumpIfEqual {26}
	022 Move [X19+108], S0
	023 Move [X19+116], S1
	024 Move [X19+116], S2
	025 Move [X19+124], S3
	026 Move [X19+20], S0
	027 Move [X19+28], S1
	028 Move [X19+28], S2
	029 Move [X19+36], S3
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Call 0x1C17F20

Method: System.Void ApplyRBPositionRotation(UnityEngine.Rigidbody rb, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)

Disassembly:
	0x01E2D080 ADRP X20, 0x25AB000
	0x01E2D084 LDRB W8, [X20 + 0xE78]
	0x01E2D088 MOV V8.16B, V0.16B
	0x01E2D08C MOV X19, X0
	0x01E2D090 TBNZ X8, 0x0, 0x1E2D0B4
	0x01E2D094 ADRP X0, 0x22CD000
	0x01E2D098 LDR X0, [X0 + 0xCB0]
	0x01E2D09C BL 0x1C16CF4
	0x01E2D0A0 ADRP X0, 0x22CD000
	0x01E2D0A4 LDR X0, [X0 + 0xC60]
	0x01E2D0A8 BL 0x1C16CF4
	0x01E2D0AC MOVZ W8, 0x1
	0x01E2D0B0 STRB W8, [X20 + 0xE78]
	0x01E2D0B4 STR W31, [X31 + 0x8]
	0x01E2D0B8 LDR X8, [X19 + 0x38]
	0x01E2D0BC CBZ X8, 0x1E2D190
	0x01E2D0C0 LDR X19, [X8 + 0x100]
	0x01E2D0C4 CBZ X19, 0x1E2D190
	0x01E2D0C8 ADRP X10, 0x22CD000
	0x01E2D0CC LDR X8, [X19]
	0x01E2D0D0 LDR X10, [X10 + 0xCB0]
	0x01E2D0D4 LDRH W9, [X8 + 0x12E]
	0x01E2D0D8 LDR X1, [X10]

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {31}
	009 Move X19, X1
	010 Move X0, X1
	011 Move X1, X31
	012 Move V8, V6
	013 Move V9, V5
	014 Move V10, V4
	015 Move V11, V3
	016 Call Rigidbody.set_position, X0, X1
	017 Move X0, X19
	018 Move V2, V9
	019 Move V3, V8
	020 Move X30, [X31+32]
	021 Move X19, [X31+40]
	022 Move D9, [X31+16]
	023 Move D8, [X31+24]
	024 Move V0, V11
	025 Move V1, V10
	026 Move X1, X31
	027 Move D11, [X31+48]
	028 Move D10, [X31+56]
	029 Call Rigidbody.set_rotation, X0, X1
	030 Return 
	031 Call 0x1C17F20

Method: Fusion.Addons.Physics.NetworkRigidbodyFlags GetRBFlags(UnityEngine.Rigidbody rb)

Disassembly:
	0x01E2D0DC CBZ X9, 0x1E2D100
	0x01E2D0E0 LDR X10, [X8 + 0xB0]
	0x01E2D0E4 ADD X10, X10, 0x8
	0x01E2D0E8 LDUR X11, [X10 - 0x8]
	0x01E2D0EC CMP X11, X1
	0x01E2D0F0 B.EQ 0x1E2D110
	0x01E2D0F4 SUBS X9, X9, 0x1
	0x01E2D0F8 ADD X10, X10, 0x10
	0x01E2D0FC B.NE 0x1E2D0E8
	0x01E2D100 MOVZ W2, 0x5
	0x01E2D104 MOV X0, X19
	0x01E2D108 BL 0x1C5C788
	0x01E2D10C B 0x1E2D120
	0x01E2D110 LDR W9, [X10]
	0x01E2D114 ADD W9, W9, 0x5
	0x01E2D118 ADD X8, X8, W9, 0x4, SXTW
	0x01E2D11C ADD X0, X8, 0x138
	0x01E2D120 LDP X8, X2, [X0]
	0x01E2D124 ADD X1, X31, 0x8
	0x01E2D128 MOV X0, X19
	0x01E2D12C BLR X8
	0x01E2D130 TBZ X0, 0x0, 0x1E2D17C
	0x01E2D134 ADD X0, X31, 0x8
	0x01E2D138 MOV X1, X31
	0x01E2D13C BL 0x3C877F4
	0x01E2D140 TBZ X0, 0x0, 0x1E2D158

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {31}
	007 Move X19, X1
	008 Move X0, X1
	009 Move X1, X31
	010 Call Rigidbody.get_isKinematic, X0
	011 Move W20, W0
	012 And W21, W0, 1
	013 Move X0, X19
	014 Move X1, X31
	015 Call Rigidbody.IsSleeping, X0
	016 Move W8, 2
	017 NotImplemented "Instruction BFM not yet implemented."
	018 And W31, W0, 1
	019 Move X0, X19
	020 Move X1, X31
	021 NotImplemented "Instruction CSEL not yet implemented."
	022 Call Rigidbody.get_useGravity, X0
	023 Or W8, W20, 4
	024 And W31, W0, 1
	025 NotImplemented "Instruction CSEL not yet implemented."
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Call 0x1C17F20

Method: System.Int32 GetRBConstraints(UnityEngine.Rigidbody rb)

Disassembly:
	0x01E2D144 ADD X0, X31, 0x8
	0x01E2D148 MOV V0.16B, V8.16B
	0x01E2D14C MOV X1, X31
	0x01E2D150 BL 0x3C878BC
	0x01E2D154 B 0x1E2D17C
	0x01E2D158 ADRP X8, 0x22CD000

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody.get_constraints, X0
	006 Return X0
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Void SetRBConstraints(UnityEngine.Rigidbody rb, System.Int32 constraints)

Disassembly:
	0x01E2D15C LDR X8, [X8 + 0xC60]
	0x01E2D160 LDR X0, [X8]
	0x01E2D164 LDR W8, [X0 + 0xE0]
	0x01E2D168 CBNZ W8, 0x1E2D170
	0x01E2D16C BL 0x1C16DFC
	0x01E2D170 MOV V0.16B, V8.16B
	0x01E2D174 MOV X0, X31

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {8}
	003 Move X0, X1
	004 Move W1, W2
	005 Move X2, X31
	006 Call Rigidbody.set_constraints, X0, X1
	007 Return 
	008 Move [X31-16], X30
	009 Call 0x1C17F20

Method: System.Void CaptureExtras(UnityEngine.Rigidbody rb, ref Fusion.Addons.Physics.NetworkRBData data)

Disassembly:
	0x01E2D178 BL 0x3C888D8
	0x01E2D17C LDP X20, X19, [X31 + 0x20]
	0x01E2D180 LDR X30, [X31 + 0x18]
	0x01E2D184 LDR V8, [X31 + 0x10]
	0x01E2D188 ADD X31, X31, 0x30
	0x01E2D18C RET
	0x01E2D190 BL 0x1C16F20
	0x01E2D194 SUB X31, X31, 0x80
	0x01E2D198 STR D8, [X31 + 0x40]
	0x01E2D19C STR X30, [X31 + 0x48]
	0x01E2D1A0 STP X24, X23, [X31 + 0x50]
	0x01E2D1A4 STP X22, X21, [X31 + 0x60]
	0x01E2D1A8 STP X20, X19, [X31 + 0x70]
	0x01E2D1AC ADRP X21, 0x25AB000
	0x01E2D1B0 LDRB W8, [X21 + 0xE79]
	0x01E2D1B4 MOV W19, W1
	0x01E2D1B8 MOV V8.16B, V0.16B
	0x01E2D1BC MOV X20, X0
	0x01E2D1C0 TBNZ X8, 0x0, 0x1E2D214
	0x01E2D1C4 ADRP X0, 0x22CD000
	0x01E2D1C8 LDR X0, [X0 + 0xCB8]
	0x01E2D1CC BL 0x1C16CF4
	0x01E2D1D0 ADRP X0, 0x22CD000
	0x01E2D1D4 LDR X0, [X0 + 0xCC0]
	0x01E2D1D8 BL 0x1C16CF4
	0x01E2D1DC ADRP X0, 0x22CD000
	0x01E2D1E0 LDR X0, [X0 + 0xCC8]
	0x01E2D1E4 BL 0x1C16CF4
	0x01E2D1E8 ADRP X0, 0x22CD000
	0x01E2D1EC LDR X0, [X0 + 0xCD0]
	0x01E2D1F0 BL 0x1C16CF4
	0x01E2D1F4 ADRP X0, 0x22CD000
	0x01E2D1F8 LDR X0, [X0 + 0xCD8]
	0x01E2D1FC BL 0x1C16CF4
	0x01E2D200 ADRP X0, 0x22CD000
	0x01E2D204 LDR X0, [X0 + 0xC60]
	0x01E2D208 BL 0x1C16CF4
	0x01E2D20C MOVZ W8, 0x1
	0x01E2D210 STRB W8, [X21 + 0xE79]
	0x01E2D214 STP X31, X31, [X31 + 0x20]
	0x01E2D218 STR X31, [X31 + 0x30]
	0x01E2D21C STR W31, [X31 + 0x18]
	0x01E2D220 LDR X8, [X20 + 0x88]
	0x01E2D224 CBZ X8, 0x1E2D318
	0x01E2D228 LDR W8, [X8 + 0x18]
	0x01E2D22C CBZ W8, 0x1E2D318
	0x01E2D230 ADRP X22, 0x22CD000
	0x01E2D234 LDR X22, [X22 + 0xC60]
	0x01E2D238 LDR X0, [X22]
	0x01E2D23C LDR W8, [X0 + 0xE0]
	0x01E2D240 CBNZ W8, 0x1E2D248
	0x01E2D244 BL 0x1C16DFC
	0x01E2D248 MOV X0, X31
	0x01E2D24C BL 0x3C88790
	0x01E2D250 LDR X9, [X20 + 0x88]
	0x01E2D254 CBZ X9, 0x1E2D334
	0x01E2D258 ADRP X8, 0x22CD000
	0x01E2D25C LDR X8, [X8 + 0xCD0]
	0x01E2D260 MOV X21, X0
	0x01E2D264 MOV X0, X9
	0x01E2D268 LDR X1, [X8]
	0x01E2D26C ADD X8, X31, 0x0
	0x01E2D270 BL 0x2EF6F08
	0x01E2D274 LDR V0, [X31]
	0x01E2D278 LDR X8, [X31 + 0x10]
	0x01E2D27C ADRP X23, 0x22CD000
	0x01E2D280 AND X21, X21, 0x0
	0x01E2D284 STR V0, [X31 + 0x2]
	0x01E2D288 STR X8, [X31 + 0x30]
	0x01E2D28C LDR X23, [X23 + 0xCC0]
	0x01E2D290 LDR X1, [X23]
	0x01E2D294 ADD X0, X31, 0x20
	0x01E2D298 BL 0x2BAFC8C
	0x01E2D29C TBZ X0, 0x0, 0x1E2D304
	0x01E2D2A0 LDR X24, [X31 + 0x30]
	0x01E2D2A4 TBZ X19, 0x0, 0x1E2D2B8
	0x01E2D2A8 UBFM X1, X24, 0x20, 0x3F
	0x01E2D2AC MOV X0, X20
	0x01E2D2B0 BL 0x1E2D3C0
	0x01E2D2B4 TBZ X0, 0x0, 0x1E2D290
	0x01E2D2B8 AND X0, X24, 0x0
	0x01E2D2BC MOV X1, X21
	0x01E2D2C0 MOV X2, X31
	0x01E2D2C4 BL 0x3C87758
	0x01E2D2C8 TBNZ X0, 0x0, 0x1E2D2EC
	0x01E2D2CC LDR X0, [X22]
	0x01E2D2D0 LDR W8, [X0 + 0xE0]
	0x01E2D2D4 CBNZ W8, 0x1E2D2DC
	0x01E2D2D8 BL 0x1C16DFC
	0x01E2D2DC MOV X0, X31
	0x01E2D2E0 BL 0x3C88824
	0x01E2D2E4 CMP W0, 0x2
	0x01E2D2E8 B.NE 0x1E2D290
	0x01E2D2EC STR W24, [X31 + 0x18]
	0x01E2D2F0 ADD X0, X31, 0x18
	0x01E2D2F4 MOV V0.16B, V8.16B
	0x01E2D2F8 MOV X1, X31
	0x01E2D2FC BL 0x3C878BC
	0x01E2D300 B 0x1E2D290
	0x01E2D304 ADRP X8, 0x22CD000
	0x01E2D308 LDR X8, [X8 + 0xCB8]
	0x01E2D30C ADD X0, X31, 0x20
	0x01E2D310 LDR X1, [X8]
	0x01E2D314 BL 0x2BAFC88
	0x01E2D318 LDP X20, X19, [X31 + 0x70]
	0x01E2D31C LDP X22, X21, [X31 + 0x60]
	0x01E2D320 LDP X24, X23, [X31 + 0x50]
	0x01E2D324 LDR X30, [X31 + 0x48]
	0x01E2D328 LDR V8, [X31 + 0x40]
	0x01E2D32C ADD X31, X31, 0x80
	0x01E2D330 RET
	0x01E2D334 BL 0x1C16F20
	0x01E2D338 B 0x1E2D34C
	0x01E2D33C B 0x1E2D34C
	0x01E2D340 B 0x1E2D34C
	0x01E2D344 B 0x1E2D34C
	0x01E2D348 B 0x1E2D34C
	0x01E2D34C MOV X19, X0
	0x01E2D350 CMP W1, 0x1
	0x01E2D354 B.NE 0x1E2D388
	0x01E2D358 MOV X0, X19
	0x01E2D35C BL 0x3EB1AD0
	0x01E2D360 LDR X20, [X0]
	0x01E2D364 BL 0x3EB1AE0
	0x01E2D368 ADRP X8, 0x22CD000
	0x01E2D36C LDR X8, [X8 + 0xCB8]
	0x01E2D370 ADD X0, X31, 0x20
	0x01E2D374 LDR X1, [X8]
	0x01E2D378 BL 0x2BAFC88

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {146}
	009 Move X20, X1
	010 Move X0, X1
	011 Move X1, X31
	012 Move X19, X2
	013 Call Rigidbody.get_mass, X0
	014 Move X21, 0x25AC000
	015 Move W8, [X21+3727]
	016 Move V8, V0
	017 Compare W8, 0
	018 JumpIfNotEqual {24}
	019 Move X0, 0x22CE000
	020 Move X0, [X0+3176]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3727], W8
	024 Move X22, 0x22CE000
	025 Move X22, [X22+3176]
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move W8, S8
	032 Move W9, 0x44800000
	033 Move W8, W8
	034 ShiftRight W8, 31
	035 And W8, W8, 0x7FFFFFFF
	036 Move S0, 0.5
	037 Move S1, W9
	038 NotImplemented "Instruction UCVTF not yet implemented."
	039 Move W9, 0x7F800000
	040 Multiply S1, S8, S1
	041 Subtract S0, S0, S2
	042 Move S2, W9
	043 Add S0, S1, S0
	044 NotImplemented "Instruction FCVTZS not yet implemented."
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Move W9, 0x80000000
	047 NotImplemented "Instruction CSEL not yet implemented."
	048 NotImplemented "Instruction SBFM not yet implemented."
	049 Xor W8, W9, W8
	050 Move X0, X20
	051 Move X1, X31
	052 Move [X19+64], W8
	053 Call Rigidbody.get_drag, X0
	054 Move W8, [X21+3727]
	055 Move V8, V0
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0x22CE000
	059 Move X0, [X0+3176]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X21+3727], W8
	063 Move X0, [X22]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move W8, S8
	069 Move W9, 0x44800000
	070 Move W8, W8
	071 ShiftRight W8, 31
	072 And W8, W8, 0x7FFFFFFF
	073 Move S0, 0.5
	074 Move S1, W9
	075 NotImplemented "Instruction UCVTF not yet implemented."
	076 Move W9, 0x7F800000
	077 Multiply S1, S8, S1
	078 Subtract S0, S0, S2
	079 Move S2, W9
	080 Add S0, S1, S0
	081 NotImplemented "Instruction FCVTZS not yet implemented."
	082 NotImplemented "Instruction FCMP not yet implemented."
	083 Move W9, 0x80000000
	084 NotImplemented "Instruction CSEL not yet implemented."
	085 NotImplemented "Instruction SBFM not yet implemented."
	086 Xor W8, W9, W8
	087 Move X0, X20
	088 Move X1, X31
	089 Move [X19+56], W8
	090 Call Rigidbody.get_angularDrag, X0
	091 Move W8, [X21+3727]
	092 Move V8, V0
	093 Compare W8, 0
	094 JumpIfNotEqual {100}
	095 Move X0, 0x22CE000
	096 Move X0, [X0+3176]
	097 Call 0x1C17CF4
	098 Move W8, 1
	099 Move [X21+3727], W8
	100 Move X0, [X22]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move W8, S8
	106 Move W9, 0x44800000
	107 Move W8, W8
	108 ShiftRight W8, 31
	109 And W8, W8, 0x7FFFFFFF
	110 Move S0, 0.5
	111 Move S1, W9
	112 NotImplemented "Instruction UCVTF not yet implemented."
	113 Move W9, 0x7F800000
	114 Multiply S1, S8, S1
	115 Subtract S0, S0, S2
	116 Move S2, W9
	117 Add S0, S1, S0
	118 NotImplemented "Instruction FCVTZS not yet implemented."
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 Move W9, 0x80000000
	121 NotImplemented "Instruction CSEL not yet implemented."
	122 NotImplemented "Instruction SBFM not yet implemented."
	123 Xor W8, W9, W8
	124 Move X0, X20
	125 Move X1, X31
	126 Move [X19+60], W8
	127 Call Rigidbody.get_velocity, X0
	128 Move X0, X31
	129 Call 0x1E2F540
	130 Move [X19+72], X0
	131 Move [X19+80], W1
	132 Move X0, X20
	133 Move X1, X31
	134 Call Rigidbody.get_angularVelocity, X0
	135 Move X0, X31
	136 Call 0x1E2F540
	137 Move [X19+84], X0
	138 Move [X19+92], W1
	139 Move X20, [X31+32]
	140 Move X19, [X31+40]
	141 Move X22, [X31+16]
	142 Move X21, [X31+24]
	143 Move X30, [X31+8]
	144 Move V8, [X31+48]
	145 Return 
	146 Call 0x1C17F20

Method: System.Void ApplyExtras(UnityEngine.Rigidbody rb, ref Fusion.Addons.Physics.NetworkRBData data)

Disassembly:
	0x01E2D37C CBZ X20, 0x1E2D318
	0x01E2D380 MOV X0, X20
	0x01E2D384 BL 0x1C16F18
	0x01E2D388 MOV X20, X31
	0x01E2D38C B 0x1E2D394
	0x01E2D390 MOV X19, X0
	0x01E2D394 ADRP X8, 0x22CD000
	0x01E2D398 LDR X8, [X8 + 0xCB8]
	0x01E2D39C LDR X1, [X8]
	0x01E2D3A0 ADD X0, X31, 0x20
	0x01E2D3A4 BL 0x2BAFC88
	0x01E2D3A8 CBNZ X20, 0x1E2D3B4
	0x01E2D3AC MOV X0, X19
	0x01E2D3B0 BL 0x1D2C690
	0x01E2D3B4 MOV X0, X20
	0x01E2D3B8 BL 0x1C16F18
	0x01E2D3BC BL 0x1990590
	0x01E2D3C0 STR X30, [X31 - 0x20]!
	0x01E2D3C4 STP X20, X19, [X31 + 0x10]
	0x01E2D3C8 MOV X19, X0
	0x01E2D3CC LDR X0, [X0 + 0x38]
	0x01E2D3D0 CBZ X0, 0x1E2D424
	0x01E2D3D4 MOV W20, W1
	0x01E2D3D8 MOV X1, X31
	0x01E2D3DC BL 0x1E9DEF4
	0x01E2D3E0 MOV W8, W0
	0x01E2D3E4 CMP W20, 0x3
	0x01E2D3E8 MOVZ W0, 0x1
	0x01E2D3EC B.EQ 0x1E2D418
	0x01E2D3F0 TBNZ X8, 0x0, 0x1E2D418
	0x01E2D3F4 CMP W20, 0x2
	0x01E2D3F8 B.NE 0x1E2D414
	0x01E2D3FC LDR X0, [X19 + 0x38]
	0x01E2D400 CBZ X0, 0x1E2D424
	0x01E2D404 LDP X20, X19, [X31 + 0x10]
	0x01E2D408 MOV X1, X31
	0x01E2D40C LDR X30, [X31], #0x20
	0x01E2D410 B 0x1E9E99C
	0x01E2D414 MOV W0, W31
	0x01E2D418 LDP X20, X19, [X31 + 0x10]
	0x01E2D41C LDR X30, [X31], #0x20
	0x01E2D420 RET
	0x01E2D424 BL 0x1C16F20
	0x01E2D428 STP X30, X21, [X31 - 0x20]!
	0x01E2D42C STP X20, X19, [X31 + 0x10]
	0x01E2D430 ADRP X20, 0x25AB000
	0x01E2D434 ADRP X21, 0x22CD000
	0x01E2D438 LDRB W8, [X20 + 0xE7A]
	0x01E2D43C LDR X21, [X21 + 0xCE0]
	0x01E2D440 MOV X19, X0
	0x01E2D444 TBNZ X8, 0x0, 0x1E2D45C
	0x01E2D448 ADRP X0, 0x22CD000
	0x01E2D44C LDR X0, [X0 + 0xCE0]
	0x01E2D450 BL 0x1C16CF4
	0x01E2D454 MOVZ W8, 0x1
	0x01E2D458 STRB W8, [X20 + 0xE7A]
	0x01E2D45C LDR X1, [X21]
	0x01E2D460 MOV X0, X19
	0x01E2D464 LDP X20, X19, [X31 + 0x10]
	0x01E2D468 LDP X30, X21, [X31], #0x20
	0x01E2D46C B 0x25D576C
	0x01E2D470 STR X30, [X31 - 0x20]!
	0x01E2D474 STP X20, X19, [X31 + 0x10]
	0x01E2D478 ADRP X19, 0x25AB000
	0x01E2D47C ADRP X20, 0x22C6000
	0x01E2D480 LDRB W8, [X19 + 0xE7B]
	0x01E2D484 LDR X20, [X20 + 0x5F8]
	0x01E2D488 TBNZ X8, 0x0, 0x1E2D4A0
	0x01E2D48C ADRP X0, 0x22C6000
	0x01E2D490 LDR X0, [X0 + 0x5F8]
	0x01E2D494 BL 0x1C16CF4
	0x01E2D498 MOVZ W8, 0x1
	0x01E2D49C STRB W8, [X19 + 0xE7B]
	0x01E2D4A0 LDR X0, [X20]
	0x01E2D4A4 LDR W8, [X0 + 0xE0]
	0x01E2D4A8 CBNZ W8, 0x1E2D4B0
	0x01E2D4AC BL 0x1C16DFC
	0x01E2D4B0 LDP X20, X19, [X31 + 0x10]
	0x01E2D4B4 MOV X0, X31
	0x01E2D4B8 LDR X30, [X31], #0x20
	0x01E2D4BC B 0x3C8A778
	0x01E2D4C0 STR X30, [X31 - 0x30]!
	0x01E2D4C4 STP X22, X21, [X31 + 0x10]
	0x01E2D4C8 STP X20, X19, [X31 + 0x20]
	0x01E2D4CC ADRP X22, 0x25AB000
	0x01E2D4D0 ADRP X21, 0x22C6000
	0x01E2D4D4 LDRB W8, [X22 + 0xE7C]
	0x01E2D4D8 LDR X21, [X21 + 0x5F8]
	0x01E2D4DC MOV W20, W1
	0x01E2D4E0 MOV X19, X0
	0x01E2D4E4 TBNZ X8, 0x0, 0x1E2D508
	0x01E2D4E8 ADRP X0, 0x22C6000
	0x01E2D4EC LDR X0, [X0 + 0x5F8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x25AC000
	008 Move W8, [X21+3728]
	009 Move W23, [X2+64]
	010 Move X20, X2
	011 Move X19, X1
	012 Compare W8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, 0x22CE000
	015 Move X0, [X0+3176]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3728], W8
	019 Move X22, 0x22CE000
	020 Move X22, [X22+3176]
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Compare X19, 0
	027 JumpIfEqual {107}
	028 And W8, W23, 1
	029 Subtract W8, W31, W8
	030 Xor W8, W8, W23
	031 Move W9, 0x3A800000
	032 NotImplemented "Instruction SCVTF not yet implemented."
	033 Move S1, W9
	034 Multiply S0, S0, S1
	035 Move X0, X19
	036 Move X1, X31
	037 Call Rigidbody.set_mass, X0, V0
	038 Move W8, [X21+3728]
	039 Move W23, [X20+56]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x22CE000
	043 Move X0, [X0+3176]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X21+3728], W8
	047 Move X0, [X22]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 And W8, W23, 1
	053 Subtract W8, W31, W8
	054 Xor W8, W8, W23
	055 Move W9, 0x3A800000
	056 NotImplemented "Instruction SCVTF not yet implemented."
	057 Move S1, W9
	058 Multiply S0, S0, S1
	059 Move X0, X19
	060 Move X1, X31
	061 Call Rigidbody.set_drag, X0, V0
	062 Move W8, [X21+3728]
	063 Move W23, [X20+60]
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0x22CE000
	067 Move X0, [X0+3176]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X21+3728], W8
	071 Move X0, [X22]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 And W8, W23, 1
	077 Subtract W8, W31, W8
	078 Xor W8, W8, W23
	079 Move W9, 0x3A800000
	080 NotImplemented "Instruction SCVTF not yet implemented."
	081 Move S1, W9
	082 Multiply S0, S0, S1
	083 Move X0, X19
	084 Move X1, X31
	085 Call Rigidbody.set_angularDrag, X0, V0
	086 Move X0, [X20+72]
	087 Move W1, [X20+80]
	088 Move X2, X31
	089 Call 0x1E2F6F8
	090 Move X0, X19
	091 Move X1, X31
	092 Call Rigidbody.set_velocity, X0, X1
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 Move W1, [X20+92]
	095 Move X2, X31
	096 Call 0x1E2F6F8
	097 Move X0, X19
	098 Move X20, [X31+32]
	099 Move X19, [X31+40]
	100 Move X22, [X31+16]
	101 Move X21, [X31+24]
	102 Move X1, X31
	103 Move X30, [X31+48]
	104 Move X23, [X31+56]
	105 Call Rigidbody.set_angularVelocity, X0, X1
	106 Return 
	107 Call 0x1C17F20

Method: System.Void ResetRigidbody()

Disassembly:
	0x01E2D4F0 BL 0x1C16CF4
	0x01E2D4F4 ADRP X0, 0x22CD000
	0x01E2D4F8 LDR X0, [X0 + 0xCA8]
	0x01E2D4FC BL 0x1C16CF4
	0x01E2D500 MOVZ W8, 0x1
	0x01E2D504 STRB W8, [X22 + 0xE7C]
	0x01E2D508 LDR X0, [X21]
	0x01E2D50C ADRP X22, 0x22CD000
	0x01E2D510 LDR W8, [X0 + 0xE0]
	0x01E2D514 LDR X22, [X22 + 0xCA8]
	0x01E2D518 CBNZ W8, 0x1E2D520
	0x01E2D51C BL 0x1C16DFC
	0x01E2D520 MOV X0, X31
	0x01E2D524 BL 0x3C8A778
	0x01E2D528 LDR X8, [X22]
	0x01E2D52C LDR X8, [X8 + 0xB8]
	0x01E2D530 STR W0, [X8]
	0x01E2D534 TBZ X20, 0x0, 0x1E2D550
	0x01E2D538 LDR X0, [X21]
	0x01E2D53C LDR W19, [X19 + 0x4C]
	0x01E2D540 LDR W8, [X0 + 0xE0]
	0x01E2D544 CBNZ W8, 0x1E2D564
	0x01E2D548 BL 0x1C16DFC
	0x01E2D54C B 0x1E2D564
	0x01E2D550 LDR X0, [X21]
	0x01E2D554 LDR W8, [X0 + 0xE0]
	0x01E2D558 CBNZ W8, 0x1E2D560
	0x01E2D55C BL 0x1C16DFC
	0x01E2D560 MOVZ W19, 0x2
	0x01E2D564 MOV W0, W19
	0x01E2D568 LDP X20, X19, [X31 + 0x20]
	0x01E2D56C LDP X22, X21, [X31 + 0x10]
	0x01E2D570 MOV X1, X31
	0x01E2D574 LDR X30, [X31], #0x30
	0x01E2D578 B 0x3C8A7A0
	0x01E2D57C STP X30, X21, [X31 - 0x20]!
	0x01E2D580 STP X20, X19, [X31 + 0x10]
	0x01E2D584 ADRP X20, 0x25AB000
	0x01E2D588 ADRP X21, 0x22CD000
	0x01E2D58C ADRP X19, 0x22C6000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25AC000
	006 Move X21, 0x22CE000
	007 Move W8, [X20+3691]
	008 Move X21, [X21+3208]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22CE000
	015 Move X0, [X0+3208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3691], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Call 0x241FE9C, X0
	022 Move X19, [X19+184]
	023 Compare X19, 0
	024 JumpIfEqual {54}
	025 Move X0, X19
	026 Move X1, X31
	027 Call Rigidbody.get_isKinematic, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {37}
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 
	037 Move S0, W31
	038 Move S1, W31
	039 Move S2, W31
	040 Move X0, X19
	041 Move X1, X31
	042 Call Rigidbody.set_velocity, X0, X1
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move S0, W31
	047 Move S1, W31
	048 Move S2, W31
	049 Move X1, X31
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Call Rigidbody.set_angularVelocity, X0, X1
	053 Return 
	054 Call 0x1C17F20

Method: System.Boolean IsRBSleeping(UnityEngine.Rigidbody rb)

Disassembly:
	0x01E2D590 LDRB W8, [X20 + 0xE7D]
	0x01E2D594 LDR X21, [X21 + 0xCA8]
	0x01E2D598 LDR X19, [X19 + 0x5F8]
	0x01E2D59C TBNZ X8, 0x0, 0x1E2D5C0
	0x01E2D5A0 ADRP X0, 0x22C6000
	0x01E2D5A4 LDR X0, [X0 + 0x5F8]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody.IsSleeping, X0
	006 Return X0
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Void ForceRBSleep(UnityEngine.Rigidbody rb)

Disassembly:
	0x01E2D5A8 BL 0x1C16CF4
	0x01E2D5AC ADRP X0, 0x22CD000
	0x01E2D5B0 LDR X0, [X0 + 0xCA8]
	0x01E2D5B4 BL 0x1C16CF4
	0x01E2D5B8 MOVZ W8, 0x1
	0x01E2D5BC STRB W8, [X20 + 0xE7D]

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody.Sleep, X0
	006 Return 
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Void ForceRBWake(UnityEngine.Rigidbody rb)

Disassembly:
	0x01E2D5C0 LDR X8, [X21]
	0x01E2D5C4 LDR X0, [X19]
	0x01E2D5C8 LDR X8, [X8 + 0xB8]
	0x01E2D5CC LDR W9, [X0 + 0xE0]
	0x01E2D5D0 LDR W19, [X8]
	0x01E2D5D4 CBNZ W9, 0x1E2D5DC

ISIL:
	001 Compare X1, 0
	002 JumpIfEqual {7}
	003 Move X0, X1
	004 Move X1, X31
	005 Call Rigidbody.WakeUp, X0
	006 Return 
	007 Move [X31-16], X30
	008 Call 0x1C17F20

Method: System.Boolean IsRigidbodyBelowSleepingThresholds(UnityEngine.Rigidbody rb)

Disassembly:
	0x01E2D5D8 BL 0x1C16DFC
	0x01E2D5DC MOV W0, W19
	0x01E2D5E0 LDP X20, X19, [X31 + 0x10]
	0x01E2D5E4 MOV X1, X31
	0x01E2D5E8 LDP X30, X21, [X31], #0x20
	0x01E2D5EC B 0x3C8A7A0
	0x01E2D5F0 STR X30, [X31 - 0x20]!
	0x01E2D5F4 STP X20, X19, [X31 + 0x10]
	0x01E2D5F8 ADRP X19, 0x25AB000
	0x01E2D5FC ADRP X20, 0x22C6000
	0x01E2D600 LDRB W8, [X19 + 0xE7E]
	0x01E2D604 LDR X20, [X20 + 0x5F8]
	0x01E2D608 TBNZ X8, 0x0, 0x1E2D620
	0x01E2D60C ADRP X0, 0x22C6000
	0x01E2D610 LDR X0, [X0 + 0x5F8]
	0x01E2D614 BL 0x1C16CF4
	0x01E2D618 MOVZ W8, 0x1
	0x01E2D61C STRB W8, [X19 + 0xE7E]
	0x01E2D620 LDR X0, [X20]
	0x01E2D624 LDR W8, [X0 + 0xE0]
	0x01E2D628 CBNZ W8, 0x1E2D630
	0x01E2D62C BL 0x1C16DFC
	0x01E2D630 LDP X20, X19, [X31 + 0x10]
	0x01E2D634 MOV X0, X31
	0x01E2D638 LDR X30, [X31], #0x20
	0x01E2D63C B 0x3C8D390
	0x01E2D640 STP X30, X21, [X31 - 0x20]!
	0x01E2D644 STP X20, X19, [X31 + 0x10]
	0x01E2D648 ADRP X20, 0x25AB000
	0x01E2D64C ADRP X21, 0x22C6000
	0x01E2D650 LDRB W8, [X20 + 0xE7F]
	0x01E2D654 LDR X21, [X21 + 0x5F8]
	0x01E2D658 MOV W19, W1
	0x01E2D65C TBNZ X8, 0x0, 0x1E2D674
	0x01E2D660 ADRP X0, 0x22C6000
	0x01E2D664 LDR X0, [X0 + 0x5F8]
	0x01E2D668 BL 0x1C16CF4
	0x01E2D66C MOVZ W8, 0x1
	0x01E2D670 STRB W8, [X20 + 0xE7F]
	0x01E2D674 LDR X0, [X21]
	0x01E2D678 LDR W8, [X0 + 0xE0]
	0x01E2D67C CBNZ W8, 0x1E2D684
	0x01E2D680 BL 0x1C16DFC
	0x01E2D684 AND W0, W19, 0x1
	0x01E2D688 LDP X20, X19, [X31 + 0x10]
	0x01E2D68C MOV X1, X31
	0x01E2D690 LDP X30, X21, [X31], #0x20
	0x01E2D694 B 0x3C8D3B8
	0x01E2D698 SUB X31, X31, 0x30
	0x01E2D69C STR D8, [X31 + 0x10]
	0x01E2D6A0 STR X30, [X31 + 0x18]
	0x01E2D6A4 STP X20, X19, [X31 + 0x20]
	0x01E2D6A8 ADRP X20, 0x25AB000
	0x01E2D6AC LDRB W8, [X20 + 0xE80]
	0x01E2D6B0 MOV V8.16B, V0.16B
	0x01E2D6B4 MOV X19, X0
	0x01E2D6B8 TBNZ X8, 0x0, 0x1E2D6DC
	0x01E2D6BC ADRP X0, 0x22CD000
	0x01E2D6C0 LDR X0, [X0 + 0xCB0]
	0x01E2D6C4 BL 0x1C16CF4
	0x01E2D6C8 ADRP X0, 0x22C6000
	0x01E2D6CC LDR X0, [X0 + 0x5F8]
	0x01E2D6D0 BL 0x1C16CF4
	0x01E2D6D4 MOVZ W8, 0x1
	0x01E2D6D8 STRB W8, [X20 + 0xE80]
	0x01E2D6DC STR W31, [X31 + 0x8]
	0x01E2D6E0 LDR X8, [X19 + 0x38]
	0x01E2D6E4 CBZ X8, 0x1E2D7B8
	0x01E2D6E8 LDR X19, [X8 + 0x100]
	0x01E2D6EC CBZ X19, 0x1E2D7B8
	0x01E2D6F0 ADRP X10, 0x22CD000
	0x01E2D6F4 LDR X8, [X19]
	0x01E2D6F8 LDR X10, [X10 + 0xCB0]
	0x01E2D6FC LDRH W9, [X8 + 0x12E]
	0x01E2D700 LDR X1, [X10]
	0x01E2D704 CBZ X9, 0x1E2D728
	0x01E2D708 LDR X10, [X8 + 0xB0]
	0x01E2D70C ADD X10, X10, 0x8
	0x01E2D710 LDUR X11, [X10 - 0x8]
	0x01E2D714 CMP X11, X1
	0x01E2D718 B.EQ 0x1E2D738

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X20, 0x25AC000
	014 Move W8, [X20+3692]
	015 Move X19, X1
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x22C7000
	021 Move X0, [X0+1528]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3692], W8
	025 Compare X19, 0
	026 JumpIfEqual {97}
	027 Move X20, 0x22C7000
	028 Move X20, [X20+1528]
	029 Move X0, X19
	030 Move X1, X31
	031 Call Rigidbody.get_mass, X0
	032 Move X0, X19
	033 Move X1, X31
	034 Move [X31+92], S0
	035 Call Rigidbody.get_velocity, X0
	036 Move X0, X19
	037 Move X1, X31
	038 Move V8, V0
	039 Move V9, V1
	040 Move V14, V2
	041 Call Rigidbody.get_angularVelocity, X0
	042 Move X0, X19
	043 Move X1, X31
	044 Move V11, V0
	045 Move [X31+12], S1
	046 Move [X31+88], S2
	047 Call Rigidbody.get_inertiaTensor, X0
	048 Move X0, X19
	049 Move X1, X31
	050 Move V12, V0
	051 Move V13, V1
	052 Move V15, V2
	053 Call Rigidbody.get_mass, X0
	054 Move X0, [X20]
	055 Move V10, V0
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Multiply S0, S8, S8
	061 Multiply S1, S9, S9
	062 Add S0, S0, S1
	063 Multiply S1, S14, S14
	064 Move X0, X31
	065 Add S8, S1, S0
	066 Call Physics.get_sleepThreshold
	067 Move S4, [X31+88]
	068 Move S1, [X31+92]
	069 Move V3, [X31+12]
	070 Multiply S2, S11, S11
	071 Multiply S2, S12, S2
	072 Multiply S1, S1, S8
	073 Multiply S3, S3, S3
	074 Multiply S4, S4, S4
	075 Multiply S3, S13, S3
	076 Add S1, S2, S1
	077 Multiply S4, S15, S4
	078 Add S1, S3, S1
	079 Add S1, S4, S1
	080 Add S2, S10, S10
	081 Move X20, [X31+96]
	082 Move X19, [X31+104]
	083 Move X30, [X31+80]
	084 Move D9, [X31+64]
	085 Move D8, [X31+72]
	086 Move D11, [X31+48]
	087 Move D10, [X31+56]
	088 Move D13, [X31+32]
	089 Move D12, [X31+40]
	090 Move D15, [X31+16]
	091 Move D14, [X31+24]
	092 NotImplemented "Instruction FDIV not yet implemented."
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 NotImplemented "Instruction CSET not yet implemented."
	095 Add X31, X31, 112
	096 Return X0
	097 Call 0x1C17F20

Method: System.Boolean IsStateBelowSleepingThresholds(Fusion.Addons.Physics.NetworkRBData data)

Disassembly:
	0x01E2D71C SUBS X9, X9, 0x1
	0x01E2D720 ADD X10, X10, 0x10
	0x01E2D724 B.NE 0x1E2D710
	0x01E2D728 MOVZ W2, 0x6
	0x01E2D72C MOV X0, X19
	0x01E2D730 BL 0x1C5C788
	0x01E2D734 B 0x1E2D748
	0x01E2D738 LDR W9, [X10]
	0x01E2D73C ADD W9, W9, 0x6
	0x01E2D740 ADD X8, X8, W9, 0x4, SXTW
	0x01E2D744 ADD X0, X8, 0x138
	0x01E2D748 LDP X8, X2, [X0]
	0x01E2D74C ADD X1, X31, 0x8
	0x01E2D750 MOV X0, X19
	0x01E2D754 BLR X8
	0x01E2D758 TBZ X0, 0x0, 0x1E2D7A4
	0x01E2D75C ADD X0, X31, 0x8
	0x01E2D760 MOV X1, X31
	0x01E2D764 BL 0x3C90350
	0x01E2D768 TBZ X0, 0x0, 0x1E2D780
	0x01E2D76C ADD X0, X31, 0x8
	0x01E2D770 MOV V0.16B, V8.16B
	0x01E2D774 MOV X1, X31
	0x01E2D778 BL 0x3C90418
	0x01E2D77C B 0x1E2D7A4
	0x01E2D780 ADRP X8, 0x22C6000
	0x01E2D784 LDR X8, [X8 + 0x5F8]
	0x01E2D788 LDR X0, [X8]
	0x01E2D78C LDR W8, [X0 + 0xE0]
	0x01E2D790 CBNZ W8, 0x1E2D798
	0x01E2D794 BL 0x1C16DFC
	0x01E2D798 MOV V0.16B, V8.16B
	0x01E2D79C MOV X0, X31
	0x01E2D7A0 BL 0x3C8D278
	0x01E2D7A4 LDP X20, X19, [X31 + 0x20]
	0x01E2D7A8 LDR X30, [X31 + 0x18]
	0x01E2D7AC LDR V8, [X31 + 0x10]
	0x01E2D7B0 ADD X31, X31, 0x30
	0x01E2D7B4 RET
	0x01E2D7B8 BL 0x1C16F20
	0x01E2D7BC SUB X31, X31, 0x80
	0x01E2D7C0 STR D8, [X31 + 0x40]
	0x01E2D7C4 STR X30, [X31 + 0x48]
	0x01E2D7C8 STP X24, X23, [X31 + 0x50]
	0x01E2D7CC STP X22, X21, [X31 + 0x60]
	0x01E2D7D0 STP X20, X19, [X31 + 0x70]
	0x01E2D7D4 ADRP X21, 0x25AB000
	0x01E2D7D8 LDRB W8, [X21 + 0xE81]
	0x01E2D7DC MOV W19, W1
	0x01E2D7E0 MOV V8.16B, V0.16B
	0x01E2D7E4 MOV X20, X0
	0x01E2D7E8 TBNZ X8, 0x0, 0x1E2D83C
	0x01E2D7EC ADRP X0, 0x22CD000
	0x01E2D7F0 LDR X0, [X0 + 0xCE8]
	0x01E2D7F4 BL 0x1C16CF4
	0x01E2D7F8 ADRP X0, 0x22CD000
	0x01E2D7FC LDR X0, [X0 + 0xCF0]
	0x01E2D800 BL 0x1C16CF4
	0x01E2D804 ADRP X0, 0x22CD000
	0x01E2D808 LDR X0, [X0 + 0xCF8]
	0x01E2D80C BL 0x1C16CF4
	0x01E2D810 ADRP X0, 0x22CD000
	0x01E2D814 LDR X0, [X0 + 0xD00]
	0x01E2D818 BL 0x1C16CF4
	0x01E2D81C ADRP X0, 0x22CD000
	0x01E2D820 LDR X0, [X0 + 0xD08]
	0x01E2D824 BL 0x1C16CF4
	0x01E2D828 ADRP X0, 0x22C6000
	0x01E2D82C LDR X0, [X0 + 0x5F8]
	0x01E2D830 BL 0x1C16CF4
	0x01E2D834 MOVZ W8, 0x1
	0x01E2D838 STRB W8, [X21 + 0xE81]
	0x01E2D83C STP X31, X31, [X31 + 0x20]
	0x01E2D840 STR X31, [X31 + 0x30]
	0x01E2D844 STR W31, [X31 + 0x18]
	0x01E2D848 LDR X8, [X20 + 0x88]
	0x01E2D84C CBZ X8, 0x1E2D940
	0x01E2D850 LDR W8, [X8 + 0x18]
	0x01E2D854 CBZ W8, 0x1E2D940
	0x01E2D858 ADRP X22, 0x22C6000
	0x01E2D85C LDR X22, [X22 + 0x5F8]
	0x01E2D860 LDR X0, [X22]
	0x01E2D864 LDR W8, [X0 + 0xE0]
	0x01E2D868 CBNZ W8, 0x1E2D870
	0x01E2D86C BL 0x1C16DFC
	0x01E2D870 MOV X0, X31
	0x01E2D874 BL 0x3C8A804
	0x01E2D878 LDR X9, [X20 + 0x88]
	0x01E2D87C CBZ X9, 0x1E2D95C
	0x01E2D880 ADRP X8, 0x22CD000
	0x01E2D884 LDR X8, [X8 + 0xD00]
	0x01E2D888 MOV X21, X0
	0x01E2D88C MOV X0, X9
	0x01E2D890 LDR X1, [X8]
	0x01E2D894 ADD X8, X31, 0x0
	0x01E2D898 BL 0x2EF4498
	0x01E2D89C LDR V0, [X31]
	0x01E2D8A0 LDR X8, [X31 + 0x10]
	0x01E2D8A4 ADRP X23, 0x22CD000
	0x01E2D8A8 AND X21, X21, 0x0
	0x01E2D8AC STR V0, [X31 + 0x2]
	0x01E2D8B0 STR X8, [X31 + 0x30]
	0x01E2D8B4 LDR X23, [X23 + 0xCF0]
	0x01E2D8B8 LDR X1, [X23]
	0x01E2D8BC ADD X0, X31, 0x20
	0x01E2D8C0 BL 0x2BAFAB8
	0x01E2D8C4 TBZ X0, 0x0, 0x1E2D92C
	0x01E2D8C8 LDR X24, [X31 + 0x30]
	0x01E2D8CC TBZ X19, 0x0, 0x1E2D8E0
	0x01E2D8D0 UBFM X1, X24, 0x20, 0x3F
	0x01E2D8D4 MOV X0, X20
	0x01E2D8D8 BL 0x1E2D3C0
	0x01E2D8DC TBZ X0, 0x0, 0x1E2D8B8
	0x01E2D8E0 AND X0, X24, 0x0
	0x01E2D8E4 MOV X1, X21
	0x01E2D8E8 MOV X2, X31

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X21, 0x25AC000
	017 Move W8, [X21+3693]
	018 Move X19, X1
	019 Move X20, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x22C7000
	025 Move X0, [X0+1528]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3693], W8
	029 Move X22, 0x25AC000
	030 Move W8, [X22+3728]
	031 Move W21, [X19+64]
	032 Compare W8, 0
	033 JumpIfNotEqual {39}
	034 Move X0, 0x22CE000
	035 Move X0, [X0+3176]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+3728], W8
	039 Move X23, 0x22CE000
	040 Move X23, [X23+3176]
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, [X19+72]
	047 Move W1, [X19+80]
	048 Move X2, X31
	049 Call 0x1E2F6F8
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move W1, [X19+92]
	052 Move X2, X31
	053 Move V11, V0
	054 Move V12, V1
	055 Move V13, V2
	056 Call 0x1E2F6F8
	057 Move X0, [X20+184]
	058 Move [X31+12], S2
	059 Compare X0, 0
	060 JumpIfEqual {139}
	061 Move X1, X31
	062 Move V10, V0
	063 Move V9, V1
	064 Call Rigidbody.get_inertiaTensor, X0
	065 Move W8, [X22+3728]
	066 Move W19, [X19+64]
	067 Move V14, V0
	068 Move V15, V1
	069 Move V8, V2
	070 Compare W8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, 0x22CE000
	073 Move X0, [X0+3176]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X22+3728], W8
	077 Move X0, [X23]
	078 Move X20, 0x22C7000
	079 Move W8, [X0+224]
	080 Move X20, [X20+1528]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move X0, [X20]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move W8, 0x3A800000
	090 Move S0, W8
	091 And W8, W19, 1
	092 And W9, W21, 1
	093 Multiply S1, S11, S11
	094 Multiply S2, S12, S12
	095 Subtract W8, W31, W8
	096 Subtract W9, W31, W9
	097 Multiply S3, S13, S13
	098 Xor W8, W8, W19
	099 Add S1, S1, S2
	100 Xor W9, W9, W21
	101 Add S11, S3, S1
	102 NotImplemented "Instruction SCVTF not yet implemented."
	103 NotImplemented "Instruction SCVTF not yet implemented."
	104 Move X0, X31
	105 Multiply S12, S1, S0
	106 Multiply S13, S2, S0
	107 Call Physics.get_sleepThreshold
	108 Move V4, [X31+12]
	109 Multiply S2, S10, S10
	110 Multiply S1, S13, S11
	111 Multiply S3, S9, S9
	112 Multiply S2, S2, S14
	113 Multiply S4, S4, S4
	114 Multiply S3, S3, S15
	115 Add S1, S1, S2
	116 Multiply S4, S4, S8
	117 Add S1, S3, S1
	118 Add S1, S4, S1
	119 Add S2, S12, S12
	120 Move X20, [X31+112]
	121 Move X19, [X31+120]
	122 Move X22, [X31+96]
	123 Move X21, [X31+104]
	124 Move X30, [X31+80]
	125 Move X23, [X31+88]
	126 Move D9, [X31+64]
	127 Move D8, [X31+72]
	128 Move D11, [X31+48]
	129 Move D10, [X31+56]
	130 Move D13, [X31+32]
	131 Move D12, [X31+40]
	132 Move D15, [X31+16]
	133 Move D14, [X31+24]
	134 NotImplemented "Instruction FDIV not yet implemented."
	135 NotImplemented "Instruction FCMP not yet implemented."
	136 NotImplemented "Instruction CSET not yet implemented."
	137 Add X31, X31, 128
	138 Return X0
	139 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01E2D8EC BL 0x3C902B4
	0x01E2D8F0 TBNZ X0, 0x0, 0x1E2D914
	0x01E2D8F4 LDR X0, [X22]
	0x01E2D8F8 LDR W8, [X0 + 0xE0]
	0x01E2D8FC CBNZ W8, 0x1E2D904
	0x01E2D900 BL 0x1C16DFC
	0x01E2D904 MOV X0, X31
	0x01E2D908 BL 0x3C8A778
	0x01E2D90C CMP W0, 0x2
	0x01E2D910 B.NE 0x1E2D8B8
	0x01E2D914 STR W24, [X31 + 0x18]
	0x01E2D918 ADD X0, X31, 0x18
	0x01E2D91C MOV V0.16B, V8.16B
	0x01E2D920 MOV X1, X31
	0x01E2D924 BL 0x3C90418
	0x01E2D928 B 0x1E2D8B8
	0x01E2D92C ADRP X8, 0x22CD000
	0x01E2D930 LDR X8, [X8 + 0xCE8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x25AC000
	006 Move X21, 0x22CE000
	007 Move W8, [X20+3694]
	008 Move X21, [X21+3216]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x22CE000
	015 Move X0, [X0+3216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3694], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x2422258, X0
	026 Return 

