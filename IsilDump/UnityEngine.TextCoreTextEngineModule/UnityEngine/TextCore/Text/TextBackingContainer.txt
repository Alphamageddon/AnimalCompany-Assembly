Type: UnityEngine.TextCore.Text.TextBackingContainer

Method: System.Int32 get_Capacity()

Disassembly:
	0x03CC6368 FMUL S0, S0, S4
	0x03CC636C SCVTF S5, X13
	0x03CC6370 FADD S0, S0, S5
	0x03CC6374 MOVZ W13, 0x1
	0x03CC6378 B 0x3CC6394
	0x03CC637C UCVTF S5, W14
	0x03CC6380 FMUL S5, S2, S5

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x03CC6384 FMUL S5, S5, S1
	0x03CC6388 MOV W13, W31

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Void set_Count(System.Int32 value)

Disassembly:
	0x03CC638C FADD S0, S0, S5
	0x03CC6390 FMUL S2, S2, S3

ISIL:
	001 Move [X0+8], W1
	002 Return 

Method: System.UInt32 get_Item(System.Int32 index)

Disassembly:
	0x03CC6394 ADD W1, W1, 0x1
	0x03CC6398 SUBS X12, X12, 0x1
	0x03CC639C ADD X11, X11, 0x2
	0x03CC63A0 B.NE 0x3CC631C
	0x03CC63A4 B 0x3CC63D4
	0x03CC63A8 ADD W10, W1, 0x1
	0x03CC63AC CMP W10, W8
	0x03CC63B0 B.GE 0x3CC63D0
	0x03CC63B4 CMP W10, W9
	0x03CC63B8 B.CS 0x3CC63E0
	0x03CC63BC ADD X8, X0, W10, 0x1, SXTW
	0x03CC63C0 LDRH W8, [X8 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move W9, [X8+24]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Add X8, X8, W1
	008 Move W0, [X8+32]
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20
	012 Call 0x1C17F28

Method: System.Void set_Item(System.Int32 index, System.UInt32 value)

Disassembly:
	0x03CC63C4 CMP W8, 0x20
	0x03CC63C8 CSEL W8, W10, W1, EQ
	0x03CC63CC B 0x3CC63D4
	0x03CC63D0 MOV W8, W1
	0x03CC63D4 STR W8, [X3]
	0x03CC63D8 LDR X30, [X31], #0x10
	0x03CC63DC RET
	0x03CC63E0 BL 0x1C16F28
	0x03CC63E4 BL 0x1C16F20
	0x03CC63E8 ADRP X8, 0xFFFFFFFFFCE24000
	0x03CC63EC LDR V3, [X8 + 0xC]
	0x03CC63F0 MOVZ W8, 0xCF000000
	0x03CC63F4 MOVZ W9, 0x7F800000
	0x03CC63F8 FMOV S5, W8
	0x03CC63FC MOVZ W8, 0x45800000
	0x03CC6400 FMUL S1, S1, S3
	0x03CC6404 FMOV S4, W9
	0x03CC6408 FMUL S0, S0, S3
	0x03CC640C FMOV S3, W8
	0x03CC6410 FCVTZS W8, S1
	0x03CC6414 FCMP S1, S4
	0x03CC6418 SCVTF S1, W8
	0x03CC641C FCVTZS W8, S0
	0x03CC6420 FCSEL S1, S5, S1, EQ

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0]
	006 Compare X8, 0
	007 JumpIfEqual {27}
	008 Move W9, [X8+24]
	009 Move W19, W2
	010 Move W20, W1
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W1, W20
	013 Move X21, X0
	014 Call TextBackingContainer.Resize, X0, X1
	015 Move X8, [X21]
	016 Compare X8, 0
	017 JumpIfEqual {27}
	018 Move W9, [X8+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Add X8, X8, W20
	021 Move [X8+32], W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Return 
	027 Call 0x1C17F20
	028 Call 0x1C17F28

Method: System.Void .ctor(System.Int32 size)

Disassembly:
	0x03CC6488 ADRP X0, 0x49B000
	0x03CC648C LDR X0, [X0 + 0xDA0]
	0x03CC6490 BL 0x1C16CF4
	0x03CC6494 MOVZ W8, 0x1
	0x03CC6498 STRB W8, [X25 + 0x359]
	0x03CC649C CBZ X24, 0x3CC6524
	0x03CC64A0 LDR W8, [X19]
	0x03CC64A4 ADD W8, W8, 0x1
	0x03CC64A8 STR W8, [X19]
	0x03CC64AC LDR X9, [X21]
	0x03CC64B0 CBZ X9, 0x3CC6538
	0x03CC64B4 LDR W10, [X9 + 0x18]
	0x03CC64B8 CMP W8, W10
	0x03CC64BC B.CS 0x3CC653C
	0x03CC64C0 ADRP X10, 0x49B000
	0x03CC64C4 LDR X10, [X10 + 0xDA0]
	0x03CC64C8 ADRP X25, 0x49B000
	0x03CC64CC LDR X25, [X25 + 0xB48]
	0x03CC64D0 LDR W1, [X24 + 0x18]
	0x03CC64D4 LDR X2, [X10]
	0x03CC64D8 SXTW X8, W8
	0x03CC64DC ADD X8, X9, X8, 0x5, LSL
	0x03CC64E0 ADD X0, X8, 0x20
	0x03CC64E4 BL 0x26E1C34

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x722000
	007 Move X22, 0x457000
	008 Move W8, [X21+845]
	009 Move X22, [X22+3336]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x457000
	017 Move X0, [X0+3336]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+845], W8
	021 Move X0, [X22]
	022 Move W1, W20
	023 Call 0x1C17D6C
	024 Move [X19], X0
	025 Move [X19+8], W31
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move X30, [X31+48]
	031 Return 

Method: System.Void Resize(System.Int32 size)

Disassembly:
	0x03CC6424 SCVTF S5, W8
	0x03CC6428 MOVZ W8, 0xD5000000
	0x03CC642C FMUL S3, S5, S3
	0x03CC6430 FCMP S0, S4
	0x03CC6434 FMOV S0, W8
	0x03CC6438 FCSEL S0, S0, S3, EQ
	0x03CC643C FADD S0, S0, S1
	0x03CC6440 MOV V1.16B, V2.16B
	0x03CC6444 RET
	0x03CC6448 STP X30, X25, [X31 - 0x40]!
	0x03CC644C STP X24, X23, [X31 + 0x10]
	0x03CC6450 STP X22, X21, [X31 + 0x20]
	0x03CC6454 STP X20, X19, [X31 + 0x30]
	0x03CC6458 ADRP X25, 0x721000
	0x03CC645C LDRB W8, [X25 + 0x359]
	0x03CC6460 MOV X20, X5
	0x03CC6464 MOV X21, X4
	0x03CC6468 MOV X19, X3
	0x03CC646C MOV X22, X2
	0x03CC6470 MOV X23, X1
	0x03CC6474 MOV X24, X0
	0x03CC6478 TBNZ X8, 0x0, 0x3CC649C
	0x03CC647C ADRP X0, 0x49B000
	0x03CC6480 LDR X0, [X0 + 0xB48]
	0x03CC6484 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x722000
	007 Move X21, 0x494000
	008 Move W8, [X22+846]
	009 Move X21, [X21+2648]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x494000
	017 Move X0, [X0+2648]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+846], W8
	021 Add W0, W20, 1
	022 Move X1, X31
	023 Call Mathf.NextPowerOfTwo, X0
	024 Move X2, [X21]
	025 Move W1, W0
	026 Move X0, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X30, [X31+48]
	032 Call Array.Resize, X0, X1
	033 Return 

