Type: UnityEngine.TextCore.Text.SpriteAsset

Method: UnityEngine.TextCore.FaceInfo get_faceInfo()

Disassembly:
	0x03CAC2D4 CMP W8, 0x1
	0x03CAC2D8 B.LT 0x3CAC2F8
	0x03CAC2DC MOV W1, W20
	0x03CAC2E0 MOV X3, X19
	0x03CAC2E4 LDP X20, X19, [X31 + 0x20]
	0x03CAC2E8 LDP X22, X21, [X31 + 0x10]
	0x03CAC2EC MOVZ W2, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Add X1, X0, 72
	003 Move W2, 96
	004 Move X0, X8
	005 Call 0x3EB2AC0
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Void set_faceInfo(UnityEngine.TextCore.FaceInfo value)

Disassembly:
	0x03CAC2F0 LDP X30, X23, [X31], #0x30
	0x03CAC2F4 B 0x3CAC0C4
	0x03CAC2F8 MOV X21, X31
	0x03CAC2FC MOVN W8, 0x0
	0x03CAC300 STR W8, [X19]
	0x03CAC304 MOV X0, X21

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 72
	003 Move W2, 96
	004 Call 0x3EB2B30
	005 Move X30, [X31+16]
	006 Return 

Method: UnityEngine.Texture get_spriteSheet()

Disassembly:
	0x03CAC308 LDP X20, X19, [X31 + 0x20]
	0x03CAC30C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+168]
	002 Return X0

Method: System.Void set_spriteSheet(UnityEngine.Texture value)

Disassembly:
	0x03CAC310 LDP X30, X23, [X31], #0x30
	0x03CAC314 RET

ISIL:
	001 Move [X0+168], X1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.TextCore.Text.SpriteCharacter> get_spriteCharacterTable()

Disassembly:
	0x03CAC318 BL 0x1C16F20
	0x03CAC31C STP X30, X23, [X31 - 0x30]!
	0x03CAC320 STP X22, X21, [X31 + 0x10]
	0x03CAC324 STP X20, X19, [X31 + 0x20]
	0x03CAC328 ADRP X20, 0x73B000
	0x03CAC32C LDRB W8, [X20 + 0x32D]
	0x03CAC330 MOV X19, X0
	0x03CAC334 TBNZ X8, 0x0, 0x3CAC388
	0x03CAC338 ADRP X0, 0x4B5000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+64]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {9}
	007 Move X0, X19
	008 Call SpriteAsset.UpdateLookupTables, X0
	009 Move X0, [X19+176]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Void set_spriteCharacterTable(System.Collections.Generic.List`1<UnityEngine.TextCore.Text.SpriteCharacter> value)

Disassembly:
	0x03CAC7F0 STR X30, [X31 + 0x20]
	0x03CAC7F4 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X0+176], X1
	002 Return 

Method: System.Collections.Generic.Dictionary`2<System.UInt32, UnityEngine.TextCore.Text.SpriteCharacter> get_spriteCharacterLookupTable()

Disassembly:
	0x03CA9914 MOV X1, X31
	0x03CA9918 BL 0x3C385F8
	0x03CA991C CMP W21, W0
	0x03CA9920 CSET W8, EQ
	0x03CA9924 STRB W31, [X19 + 0x21]
	0x03CA9928 STR X31, [X19 + 0x28]
	0x03CA992C STR S8, [X19 + 0x30]
	0x03CA9930 STRB W8, [X19 + 0x20]
	0x03CA9934 STR W31, [X19 + 0x34]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+184]
	005 Compare X0, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call SpriteAsset.UpdateLookupTables, X0
	009 Move X0, [X19+184]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Void set_spriteCharacterLookupTable(System.Collections.Generic.Dictionary`2<System.UInt32, UnityEngine.TextCore.Text.SpriteCharacter> value)

Disassembly:
	0x03CAC7F8 MOVZ W20, 0x3
	0x03CAC7FC MOV X1, X31

ISIL:
	001 Move [X0+184], X1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.TextCore.Text.SpriteGlyph> get_spriteGlyphTable()

Disassembly:
	0x03CAC800 MOV V8.16B, V3.16B
	0x03CAC804 MOV V9.16B, V2.16B

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: System.Void set_spriteGlyphTable(System.Collections.Generic.List`1<UnityEngine.TextCore.Text.SpriteGlyph> value)

Disassembly:
	0x03CAC808 MOV V10.16B, V1.16B
	0x03CAC80C MOV V11.16B, V0.16B

ISIL:
	001 Move [X0+192], X1
	002 Return 

Method: System.Void Awake()

Disassembly:
	0x03CAC810 MOV X19, X0

ISIL:
	001 Return 

Method: System.Void UpdateLookupTables()

Disassembly:
	0x03CAC33C LDR X0, [X0 + 0x750]
	0x03CAC340 BL 0x1C16CF4
	0x03CAC344 ADRP X0, 0x4B5000
	0x03CAC348 LDR X0, [X0 + 0x758]
	0x03CAC34C BL 0x1C16CF4
	0x03CAC350 ADRP X0, 0x4B5000
	0x03CAC354 LDR X0, [X0 + 0x760]
	0x03CAC358 BL 0x1C16CF4
	0x03CAC35C ADRP X0, 0x4B5000
	0x03CAC360 LDR X0, [X0 + 0x728]
	0x03CAC364 BL 0x1C16CF4
	0x03CAC368 ADRP X0, 0x4B5000
	0x03CAC36C LDR X0, [X0 + 0x768]
	0x03CAC370 BL 0x1C16CF4
	0x03CAC374 ADRP X0, 0x4B5000
	0x03CAC378 LDR X0, [X0 + 0x770]
	0x03CAC37C BL 0x1C16CF4
	0x03CAC380 MOVZ W8, 0x1
	0x03CAC384 STRB W8, [X20 + 0x32D]
	0x03CAC388 LDR X20, [X19 + 0xC0]
	0x03CAC38C CBZ X20, 0x3CAC43C
	0x03CAC390 LDR W8, [X20 + 0x18]
	0x03CAC394 CBZ W8, 0x3CAC43C
	0x03CAC398 ADRP X23, 0x4B5000
	0x03CAC39C LDR X23, [X23 + 0x770]
	0x03CAC3A0 LDR X0, [X23]
	0x03CAC3A4 LDR W8, [X0 + 0xE0]
	0x03CAC3A8 CBNZ W8, 0x3CAC3B4
	0x03CAC3AC BL 0x1C16DFC
	0x03CAC3B0 LDR X0, [X23]
	0x03CAC3B4 LDR X8, [X0 + 0xB8]
	0x03CAC3B8 LDR X21, [X8 + 0x8]
	0x03CAC3BC CBNZ X21, 0x3CAC410
	0x03CAC3C0 LDR W8, [X0 + 0xE0]
	0x03CAC3C4 CBNZ W8, 0x3CAC3D0
	0x03CAC3C8 BL 0x1C16DFC
	0x03CAC3CC LDR X0, [X23]
	0x03CAC3D0 ADRP X9, 0x4B5000
	0x03CAC3D4 LDR X8, [X0 + 0xB8]
	0x03CAC3D8 LDR X9, [X9 + 0x760]
	0x03CAC3DC LDR X22, [X8]
	0x03CAC3E0 LDR X0, [X9]
	0x03CAC3E4 BL 0x1C16F10
	0x03CAC3E8 ADRP X8, 0x4B5000
	0x03CAC3EC LDR X8, [X8 + 0x768]
	0x03CAC3F0 MOV X1, X22
	0x03CAC3F4 MOV X3, X31
	0x03CAC3F8 MOV X21, X0
	0x03CAC3FC LDR X2, [X8]
	0x03CAC400 BL 0x2D30E18
	0x03CAC404 LDR X8, [X23]
	0x03CAC408 LDR X8, [X8 + 0xB8]
	0x03CAC40C STR X21, [X8 + 0x8]
	0x03CAC410 ADRP X8, 0x4B5000
	0x03CAC414 LDR X8, [X8 + 0x750]
	0x03CAC418 MOV X0, X20
	0x03CAC41C MOV X1, X21
	0x03CAC420 LDR X2, [X8]
	0x03CAC424 BL 0x21C9CA0
	0x03CAC428 ADRP X8, 0x4B5000
	0x03CAC42C LDR X8, [X8 + 0x758]
	0x03CAC430 LDR X1, [X8]
	0x03CAC434 BL 0x21D79F4
	0x03CAC438 STR X0, [X19 + 0xC0]
	0x03CAC43C LDP X20, X19, [X31 + 0x20]
	0x03CAC440 LDP X22, X21, [X31 + 0x10]
	0x03CAC444 LDP X30, X23, [X31], #0x30
	0x03CAC448 RET
	0x03CAC44C STP X30, X23, [X31 - 0x30]!
	0x03CAC450 STP X22, X21, [X31 + 0x10]
	0x03CAC454 STP X20, X19, [X31 + 0x20]
	0x03CAC458 ADRP X20, 0x73B000
	0x03CAC45C LDRB W8, [X20 + 0x32E]
	0x03CAC460 MOV X19, X0
	0x03CAC464 TBNZ X8, 0x0, 0x3CAC4B8
	0x03CAC468 ADRP X0, 0x4B5000
	0x03CAC46C LDR X0, [X0 + 0x778]
	0x03CAC470 BL 0x1C16CF4
	0x03CAC474 ADRP X0, 0x4B5000
	0x03CAC478 LDR X0, [X0 + 0x780]
	0x03CAC47C BL 0x1C16CF4
	0x03CAC480 ADRP X0, 0x4B5000
	0x03CAC484 LDR X0, [X0 + 0x788]
	0x03CAC488 BL 0x1C16CF4
	0x03CAC48C ADRP X0, 0x4B5000
	0x03CAC490 LDR X0, [X0 + 0x730]
	0x03CAC494 BL 0x1C16CF4
	0x03CAC498 ADRP X0, 0x4B5000
	0x03CAC49C LDR X0, [X0 + 0x790]
	0x03CAC4A0 BL 0x1C16CF4
	0x03CAC4A4 ADRP X0, 0x4B5000
	0x03CAC4A8 LDR X0, [X0 + 0x770]
	0x03CAC4AC BL 0x1C16CF4
	0x03CAC4B0 MOVZ W8, 0x1
	0x03CAC4B4 STRB W8, [X20 + 0x32E]
	0x03CAC4B8 LDR X20, [X19 + 0xB0]
	0x03CAC4BC CBZ X20, 0x3CAC570
	0x03CAC4C0 LDR W8, [X20 + 0x18]
	0x03CAC4C4 CMP W8, 0x1
	0x03CAC4C8 B.LT 0x3CAC570
	0x03CAC4CC ADRP X23, 0x4B5000
	0x03CAC4D0 LDR X23, [X23 + 0x770]
	0x03CAC4D4 LDR X0, [X23]
	0x03CAC4D8 LDR W8, [X0 + 0xE0]
	0x03CAC4DC CBNZ W8, 0x3CAC4E8
	0x03CAC4E0 BL 0x1C16DFC
	0x03CAC4E4 LDR X0, [X23]
	0x03CAC4E8 LDR X8, [X0 + 0xB8]
	0x03CAC4EC LDR X21, [X8 + 0x10]
	0x03CAC4F0 CBNZ X21, 0x3CAC544
	0x03CAC4F4 LDR W8, [X0 + 0xE0]
	0x03CAC4F8 CBNZ W8, 0x3CAC504
	0x03CAC4FC BL 0x1C16DFC
	0x03CAC500 LDR X0, [X23]
	0x03CAC504 ADRP X9, 0x4B5000
	0x03CAC508 LDR X8, [X0 + 0xB8]
	0x03CAC50C LDR X9, [X9 + 0x788]
	0x03CAC510 LDR X22, [X8]
	0x03CAC514 LDR X0, [X9]
	0x03CAC518 BL 0x1C16F10
	0x03CAC51C ADRP X8, 0x4B5000
	0x03CAC520 LDR X8, [X8 + 0x790]
	0x03CAC524 MOV X1, X22
	0x03CAC528 MOV X3, X31
	0x03CAC52C MOV X21, X0
	0x03CAC530 LDR X2, [X8]
	0x03CAC534 BL 0x2D30E18
	0x03CAC538 LDR X8, [X23]
	0x03CAC53C LDR X8, [X8 + 0xB8]
	0x03CAC540 STR X21, [X8 + 0x10]
	0x03CAC544 ADRP X8, 0x4B5000
	0x03CAC548 LDR X8, [X8 + 0x778]
	0x03CAC54C MOV X0, X20
	0x03CAC550 MOV X1, X21
	0x03CAC554 LDR X2, [X8]
	0x03CAC558 BL 0x21C9CA0
	0x03CAC55C ADRP X8, 0x4B5000
	0x03CAC560 LDR X8, [X8 + 0x780]
	0x03CAC564 LDR X1, [X8]
	0x03CAC568 BL 0x21D79F4
	0x03CAC56C STR X0, [X19 + 0xB0]
	0x03CAC570 LDP X20, X19, [X31 + 0x20]
	0x03CAC574 LDP X22, X21, [X31 + 0x10]
	0x03CAC578 LDP X30, X23, [X31], #0x30
	0x03CAC57C RET
	0x03CAC580 STP X30, X19, [X31 - 0x10]!
	0x03CAC584 MOV X19, X0
	0x03CAC588 BL 0x3CAC31C
	0x03CAC58C MOV X0, X19
	0x03CAC590 LDP X30, X19, [X31], #0x10
	0x03CAC594 B 0x3CAC44C
	0x03CAC598 STR X30, [X31 - 0x40]!
	0x03CAC59C STP X24, X23, [X31 + 0x10]
	0x03CAC5A0 STP X22, X21, [X31 + 0x20]
	0x03CAC5A4 STP X20, X19, [X31 + 0x30]
	0x03CAC5A8 ADRP X23, 0x73B000
	0x03CAC5AC ADRP X24, 0x4B5000
	0x03CAC5B0 ADRP X20, 0x4B5000
	0x03CAC5B4 ADRP X22, 0x4B5000
	0x03CAC5B8 ADRP X21, 0x4B5000
	0x03CAC5BC LDRB W8, [X23 + 0x32F]
	0x03CAC5C0 LDR X24, [X24 + 0x798]
	0x03CAC5C4 LDR X20, [X20 + 0x7A0]
	0x03CAC5C8 LDR X22, [X22 + 0x7A8]
	0x03CAC5CC LDR X21, [X21 + 0x7B0]
	0x03CAC5D0 MOV X19, X0
	0x03CAC5D4 TBNZ X8, 0x0, 0x3CAC610
	0x03CAC5D8 ADRP X0, 0x4B5000
	0x03CAC5DC LDR X0, [X0 + 0x7B0]
	0x03CAC5E0 BL 0x1C16CF4
	0x03CAC5E4 ADRP X0, 0x4B5000
	0x03CAC5E8 LDR X0, [X0 + 0x7A0]
	0x03CAC5EC BL 0x1C16CF4
	0x03CAC5F0 ADRP X0, 0x4B5000
	0x03CAC5F4 LDR X0, [X0 + 0x7A8]
	0x03CAC5F8 BL 0x1C16CF4
	0x03CAC5FC ADRP X0, 0x4B5000
	0x03CAC600 LDR X0, [X0 + 0x798]
	0x03CAC604 BL 0x1C16CF4
	0x03CAC608 MOVZ W8, 0x1
	0x03CAC60C STRB W8, [X23 + 0x32F]
	0x03CAC610 LDR X0, [X24]
	0x03CAC614 BL 0x1C16F10
	0x03CAC618 LDR X1, [X20]
	0x03CAC61C MOV X20, X0
	0x03CAC620 BL 0x301B7C4
	0x03CAC624 STR X20, [X19 + 0xB0]
	0x03CAC628 LDR X0, [X22]
	0x03CAC62C BL 0x1C16F10
	0x03CAC630 LDR X1, [X21]
	0x03CAC634 MOV X20, X0
	0x03CAC638 BL 0x301B7C4
	0x03CAC63C STR X20, [X19 + 0xC0]
	0x03CAC640 STRB W31, [X19 + 0xD8]
	0x03CAC644 MOV X0, X19
	0x03CAC648 LDP X20, X19, [X31 + 0x30]
	0x03CAC64C LDP X22, X21, [X31 + 0x20]
	0x03CAC650 LDP X24, X23, [X31 + 0x10]
	0x03CAC654 MOV X1, X31
	0x03CAC658 LDR X30, [X31], #0x40
	0x03CAC65C B 0x3C36D2C
	0x03CAC660 STR X30, [X31 - 0x20]!
	0x03CAC664 STP X20, X19, [X31 + 0x10]
	0x03CAC668 ADRP X19, 0x73B000
	0x03CAC66C ADRP X20, 0x4B5000
	0x03CAC670 LDRB W8, [X19 + 0x330]
	0x03CAC674 LDR X20, [X20 + 0x770]
	0x03CAC678 TBNZ X8, 0x0, 0x3CAC690
	0x03CAC67C ADRP X0, 0x4B5000
	0x03CAC680 LDR X0, [X0 + 0x770]
	0x03CAC684 BL 0x1C16CF4
	0x03CAC688 MOVZ W8, 0x1
	0x03CAC68C STRB W8, [X19 + 0x330]
	0x03CAC690 LDR X0, [X20]
	0x03CAC694 BL 0x1C16F10
	0x03CAC698 MOV X1, X31
	0x03CAC69C MOV X19, X0
	0x03CAC6A0 BL 0x33BDD8C
	0x03CAC6A4 LDR X8, [X20]
	0x03CAC6A8 LDR X8, [X8 + 0xB8]
	0x03CAC6AC STR X19, [X8]
	0x03CAC6B0 LDP X20, X19, [X31 + 0x10]
	0x03CAC6B4 LDR X30, [X31], #0x20
	0x03CAC6B8 RET
	0x03CAC6BC MOV X1, X31
	0x03CAC6C0 B 0x33BDD8C
	0x03CAC6C4 CBZ X1, 0x3CAC6D4
	0x03CAC6C8 MOV X0, X1
	0x03CAC6CC MOV X1, X31
	0x03CAC6D0 B 0x3C9C494
	0x03CAC6D4 STR X30, [X31 - 0x10]!
	0x03CAC6D8 BL 0x1C16F20
	0x03CAC6DC STR X30, [X31 - 0x10]!
	0x03CAC6E0 CBZ X1, 0x3CAC6F0
	0x03CAC6E4 LDR W0, [X1 + 0x14]
	0x03CAC6E8 LDR X30, [X31], #0x10
	0x03CAC6EC RET
	0x03CAC6F0 BL 0x1C16F20
	0x03CAC6F4 STP X30, X19, [X31 - 0x10]!
	0x03CAC6F8 MOV X1, X31
	0x03CAC6FC MOV X19, X0
	0x03CAC700 BL 0x33BDD8C
	0x03CAC704 MOVZ W8, 0x2
	0x03CAC708 STRB W8, [X19 + 0x10]
	0x03CAC70C LDP X30, X19, [X31], #0x10
	0x03CAC710 RET
	0x03CAC714 MOV X1, X31
	0x03CAC718 B 0x3C9C500
	0x03CAC71C LDR X0, [X0 + 0x18]
	0x03CAC720 RET
	0x03CAC724 STR X1, [X0 + 0x18]
	0x03CAC728 RET
	0x03CAC72C STR W1, [X0 + 0x24]
	0x03CAC730 RET
	0x03CAC734 LDR X0, [X0 + 0x28]
	0x03CAC738 RET
	0x03CAC73C STR X1, [X0 + 0x28]
	0x03CAC740 RET
	0x03CAC744 STR W1, [X0 + 0x30]
	0x03CAC748 RET
	0x03CAC74C STP X30, X21, [X31 - 0x20]!
	0x03CAC750 STP X20, X19, [X31 + 0x10]
	0x03CAC754 ADRP X21, 0x73B000
	0x03CAC758 ADRP X20, 0x4B5000
	0x03CAC75C LDRB W8, [X21 + 0x332]
	0x03CAC760 LDR X20, [X20 + 0x7B8]
	0x03CAC764 MOV X19, X0
	0x03CAC768 TBNZ X8, 0x0, 0x3CAC780
	0x03CAC76C ADRP X0, 0x4B5000
	0x03CAC770 LDR X0, [X0 + 0x7B8]
	0x03CAC774 BL 0x1C16CF4
	0x03CAC778 MOVZ W8, 0x1
	0x03CAC77C STRB W8, [X21 + 0x332]
	0x03CAC780 MOVZ W21, 0x3
	0x03CAC784 MOV X0, X19
	0x03CAC788 MOV X1, X31
	0x03CAC78C STR W21, [X19 + 0x18]
	0x03CAC790 BL 0x3C36D2C
	0x03CAC794 STR W21, [X19 + 0x18]
	0x03CAC798 LDR X0, [X20]
	0x03CAC79C LDR W8, [X0 + 0xE0]
	0x03CAC7A0 CBNZ W8, 0x3CAC7AC
	0x03CAC7A4 BL 0x1C16DFC
	0x03CAC7A8 LDR X0, [X20]
	0x03CAC7AC LDR X8, [X0 + 0xB8]
	0x03CAC7B0 LDR V0, [X8]
	0x03CAC7B4 STUR V0, [X19 + 0x1C]
	0x03CAC7B8 LDR X8, [X0 + 0xB8]
	0x03CAC7BC LDR V0, [X8]
	0x03CAC7C0 STUR V0, [X19 + 0x2C]
	0x03CAC7C4 LDR X8, [X0 + 0xB8]
	0x03CAC7C8 LDR V0, [X8]
	0x03CAC7CC STUR V0, [X19 + 0x3C]
	0x03CAC7D0 LDR X8, [X0 + 0xB8]
	0x03CAC7D4 LDR V0, [X8]
	0x03CAC7D8 STUR V0, [X19 + 0x4C]
	0x03CAC7DC LDP X20, X19, [X31 + 0x10]
	0x03CAC7E0 LDP X30, X21, [X31], #0x20
	0x03CAC7E4 RET
	0x03CAC7E8 STP D11, D10, [X31 - 0x40]!
	0x03CAC7EC STP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x73C000
	014 Move W8, [X20+804]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {97}
	020 Move X0, 0x4B6000
	021 Move X0, [X0+1744]
	022 Call 0x1C17CF4
	023 Move X0, 0x452000
	024 Move X0, [X0+2136]
	025 Call 0x1C17CF4
	026 Move X0, 0x4AE000
	027 Move X0, [X0+2168]
	028 Call 0x1C17CF4
	029 Move X0, 0x4B6000
	030 Move X0, [X0+1752]
	031 Call 0x1C17CF4
	032 Move X0, 0x4B6000
	033 Move X0, [X0+1760]
	034 Call 0x1C17CF4
	035 Move X0, 0x472000
	036 Move X0, [X0+2256]
	037 Call 0x1C17CF4
	038 Move X0, 0x4B6000
	039 Move X0, [X0+1768]
	040 Call 0x1C17CF4
	041 Move X0, 0x4AE000
	042 Move X0, [X0+2192]
	043 Call 0x1C17CF4
	044 Move X0, 0x4A3000
	045 Move X0, [X0+3336]
	046 Call 0x1C17CF4
	047 Move X0, 0x4AE000
	048 Move X0, [X0+2200]
	049 Call 0x1C17CF4
	050 Move X0, 0x4B6000
	051 Move X0, [X0+1776]
	052 Call 0x1C17CF4
	053 Move X0, 0x4B6000
	054 Move X0, [X0+1784]
	055 Call 0x1C17CF4
	056 Move X0, 0x4AE000
	057 Move X0, [X0+2224]
	058 Call 0x1C17CF4
	059 Move X0, 0x452000
	060 Move X0, [X0+2192]
	061 Call 0x1C17CF4
	062 Move X0, 0x4B6000
	063 Move X0, [X0+1792]
	064 Call 0x1C17CF4
	065 Move X0, 0x4B6000
	066 Move X0, [X0+1800]
	067 Call 0x1C17CF4
	068 Move X0, 0x4B6000
	069 Move X0, [X0+1808]
	070 Call 0x1C17CF4
	071 Move X0, 0x4AE000
	072 Move X0, [X0+2256]
	073 Call 0x1C17CF4
	074 Move X0, 0x452000
	075 Move X0, [X0+2184]
	076 Call 0x1C17CF4
	077 Move X0, 0x4B6000
	078 Move X0, [X0+1816]
	079 Call 0x1C17CF4
	080 Move X0, 0x4B6000
	081 Move X0, [X0+1824]
	082 Call 0x1C17CF4
	083 Move X0, 0x4B6000
	084 Move X0, [X0+1832]
	085 Call 0x1C17CF4
	086 Move X0, 0x4B6000
	087 Move X0, [X0+1840]
	088 Call 0x1C17CF4
	089 Move X0, 0x4B6000
	090 Move X0, [X0+1848]
	091 Call 0x1C17CF4
	092 Move X0, 0x4B6000
	093 Move X0, [X0+1856]
	094 Call 0x1C17CF4
	095 Move W8, 1
	096 Move [X20+804], W8
	097 Move X0, [X19+64]
	098 Compare X0, 0
	099 JumpIfEqual {104}
	100 Move X8, 0x4AE000
	101 Move X8, [X8+2192]
	102 Move X1, [X8]
	103 Call Dictionary`2<UInt32, Int32>.Clear, X0
	104 Move X8, 0x4AE000
	105 Move X8, [X8+2256]
	106 Move X0, [X8]
	107 Call 0x1C17F10
	108 Move X8, 0x4AE000
	109 Move X8, [X8+2224]
	110 Move X20, X0
	111 Move X1, [X8]
	112 Call Dictionary`2<UInt32, Int32>..ctor, X0
	113 Move [X19+64], X20
	114 Move X0, [X19+200]
	115 Compare X0, 0
	116 JumpIfEqual {121}
	117 Move X8, 0x4B6000
	118 Move X8, [X8+1760]
	119 Move X1, [X8]
	120 Call Dictionary`2<UInt32, Object>.Clear, X0
	121 Move X8, 0x4B6000
	122 Move X8, [X8+1824]
	123 Move X0, [X8]
	124 Call 0x1C17F10
	125 Move X8, 0x4B6000
	126 Move X8, [X8+1792]
	127 Move X20, X0
	128 Move X1, [X8]
	129 Call Dictionary`2<UInt32, Object>..ctor, X0
	130 Move [X19+200], X20
	131 Move X0, [X19+192]
	132 Compare X0, 0
	133 JumpIfEqual {334}
	134 Move X28, 0x4B6000
	135 Move X27, 0x4AE000
	136 Move X23, 0x4B6000
	137 Move X29, 0x4B6000
	138 Move X25, 0x4AE000
	139 Move X24, 0x4B6000
	140 Move X26, 0x4A3000
	141 Move X28, [X28+1856]
	142 Move X27, [X27+2200]
	143 Move X23, [X23+1776]
	144 Move X29, [X29+1744]
	145 Move X25, [X25+2168]
	146 Move X24, [X24+1848]
	147 Move X26, [X26+3336]
	148 Move W20, W31
	149 Move W8, [X0+24]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 Move X2, [X28]
	152 Move W1, W20
	153 Call List`1<Object>.get_Item, X0, X1
	154 Compare X0, 0
	155 JumpIfEqual {334}
	156 Move X1, X31
	157 Move X21, X0
	158 Call Glyph.get_index, X0
	159 Move X8, [X19+64]
	160 Compare X8, 0
	161 JumpIfEqual {334}
	162 Move X2, [X27]
	163 Move W22, W0
	164 Move X0, X8
	165 Move W1, W22
	166 Call Dictionary`2<UInt32, Int32>.ContainsKey, X0, X1
	167 Move TEMP, X0
	168 And TEMP, TEMP, 1
	169 Compare TEMP, 1
	170 JumpIfEqual {178}
	171 Move X0, [X19+64]
	172 Compare X0, 0
	173 JumpIfEqual {334}
	174 Move X3, [X25]
	175 Move W1, W22
	176 Move W2, W20
	177 Call Dictionary`2<UInt32, Int32>.Add, X0, X1, X2
	178 Move X0, [X19+200]
	179 Compare X0, 0
	180 JumpIfEqual {334}
	181 Move X2, [X23]
	182 Move W1, W22
	183 Call Dictionary`2<UInt32, Object>.ContainsKey, X0, X1
	184 Move TEMP, X0
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfEqual {195}
	188 Move X0, [X19+200]
	189 Compare X0, 0
	190 JumpIfEqual {334}
	191 Move X3, [X29]
	192 Move W1, W22
	193 Move X2, X21
	194 Call Dictionary`2<UInt32, Object>.Add, X0, X1, X2
	195 Move X0, [X19+192]
	196 Add W20, W20, 1
	197 Compare X0, 0
	198 JumpIfNotEqual {149}
	199 Move X0, [X19+56]
	200 Compare X0, 0
	201 JumpIfEqual {206}
	202 Move X8, 0x472000
	203 Move X8, [X8+2256]
	204 Move X1, [X8]
	205 Call Dictionary`2<Int32, Int32>.Clear, X0
	206 Move X8, 0x452000
	207 Move X8, [X8+2184]
	208 Move X0, [X8]
	209 Call 0x1C17F10
	210 Move X8, 0x452000
	211 Move X8, [X8+2192]
	212 Move X20, X0
	213 Move X1, [X8]
	214 Call Dictionary`2<Int32, Int32>..ctor, X0
	215 Move [X19+56], X20
	216 Move X25, 0x4B6000
	217 Move X27, 0x4B6000
	218 Move X29, 0x4B6000
	219 Move X25, [X25+1808]
	220 Move X27, [X27+1784]
	221 Move X29, [X29+1752]
	222 Move X0, [X19+184]
	223 Compare X0, 0
	224 JumpIfEqual {229}
	225 Move X8, 0x4B6000
	226 Move X8, [X8+1768]
	227 Move X1, [X8]
	228 Call Dictionary`2<UInt32, Object>.Clear, X0
	229 Move X8, 0x4B6000
	230 Move X8, [X8+1816]
	231 Move X0, [X8]
	232 Call 0x1C17F10
	233 Move X8, 0x4B6000
	234 Move X8, [X8+1800]
	235 Move X20, X0
	236 Move X1, [X8]
	237 Call Dictionary`2<UInt32, Object>..ctor, X0
	238 Move [X19+184], X20
	239 Move X0, [X19+176]
	240 Compare X0, 0
	241 JumpIfEqual {334}
	242 Move W20, W31
	243 Move W28, 0xFFFE
	244 Move W8, [X0+24]
	245 NotImplemented "Instruction CMP not yet implemented."
	246 Move X2, [X24]
	247 Move W1, W20
	248 Call List`1<Object>.get_Item, X0, X1
	249 Compare X0, 0
	250 JumpIfEqual {330}
	251 Move X21, X0
	252 Move X0, [X19+200]
	253 Compare X0, 0
	254 JumpIfEqual {334}
	255 Move W22, [X21+40]
	256 Move X2, [X23]
	257 Move W1, W22
	258 Call Dictionary`2<UInt32, Object>.ContainsKey, X0, X1
	259 Move TEMP, X0
	260 And TEMP, TEMP, 1
	261 Compare TEMP, 1
	262 JumpIfNotEqual {330}
	263 Move X0, [X19+200]
	264 Compare X0, 0
	265 JumpIfEqual {334}
	266 Move X2, [X25]
	267 Move W1, W22
	268 Call Dictionary`2<UInt32, Object>.get_Item, X0, X1
	269 Move [X21+24], X19
	270 Move [X21+32], X0
	271 Move X0, [X19+176]
	272 Compare X0, 0
	273 JumpIfEqual {334}
	274 Move X2, [X24]
	275 Move W1, W20
	276 Call List`1<Object>.get_Item, X0, X1
	277 Compare X0, 0
	278 JumpIfEqual {334}
	279 Move X0, [X0+48]
	280 Move X1, X31
	281 Call TextUtilities.GetHashCodeCaseInSensitive, X0
	282 Move X8, [X19+56]
	283 Compare X8, 0
	284 JumpIfEqual {334}
	285 Move X2, [X26]
	286 Move W22, W0
	287 Move X0, X8
	288 Move W1, W22
	289 Call Dictionary`2<Int32, Int32>.ContainsKey, X0, X1
	290 Move TEMP, X0
	291 And TEMP, TEMP, 1
	292 Compare TEMP, 1
	293 JumpIfEqual {303}
	294 Move X0, [X19+56]
	295 Compare X0, 0
	296 JumpIfEqual {334}
	297 Move X8, 0x452000
	298 Move X8, [X8+2136]
	299 Move W1, W22
	300 Move W2, W20
	301 Move X3, [X8]
	302 Call Dictionary`2<Int32, Int32>.Add, X0, X1, X2
	303 Move X0, [X19+176]
	304 Compare X0, 0
	305 JumpIfEqual {334}
	306 Move X2, [X24]
	307 Move W1, W20
	308 Call List`1<Object>.get_Item, X0, X1
	309 Compare X0, 0
	310 JumpIfEqual {334}
	311 Move W22, [X0+20]
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move X0, [X19+184]
	314 Compare X0, 0
	315 JumpIfEqual {334}
	316 Move X2, [X27]
	317 Move W1, W22
	318 Call Dictionary`2<UInt32, Object>.ContainsKey, X0, X1
	319 Move TEMP, X0
	320 And TEMP, TEMP, 1
	321 Compare TEMP, 1
	322 JumpIfEqual {330}
	323 Move X0, [X19+184]
	324 Compare X0, 0
	325 JumpIfEqual {334}
	326 Move X3, [X29]
	327 Move W1, W22
	328 Move X2, X21
	329 Call Dictionary`2<UInt32, Object>.Add, X0, X1, X2
	330 Move X0, [X19+176]
	331 Add W20, W20, 1
	332 Compare X0, 0
	333 JumpIfNotEqual {244}
	334 Call 0x1C17F20
	335 Move [X19+216], W31
	336 Move X20, [X31+80]
	337 Move X19, [X31+88]
	338 Move X22, [X31+64]
	339 Move X21, [X31+72]
	340 Move X24, [X31+48]
	341 Move X23, [X31+56]
	342 Move X26, [X31+32]
	343 Move X25, [X31+40]
	344 Move X28, [X31+16]
	345 Move X27, [X31+24]
	346 Move X29, [X31+96]
	347 Move X30, [X31+104]
	348 Return 

Method: System.Int32 GetSpriteIndexFromHashcode(System.Int32 hashCode)

Disassembly:
	0x03CAC81C STR W20, [X19 + 0x18]
	0x03CAC820 STP S11, S10, [X19 + 0x1C]
	0x03CAC824 STP S9, S8, [X19 + 0x24]
	0x03CAC828 STP S11, S10, [X19 + 0x2C]
	0x03CAC82C STP S9, S8, [X19 + 0x34]
	0x03CAC830 STP S11, S10, [X19 + 0x3C]
	0x03CAC834 STP S9, S8, [X19 + 0x44]
	0x03CAC838 STP S11, S10, [X19 + 0x4C]
	0x03CAC83C STP S9, S8, [X19 + 0x54]
	0x03CAC840 LDP X20, X19, [X31 + 0x30]
	0x03CAC844 LDR X30, [X31 + 0x20]
	0x03CAC848 LDP D9, D8, [X31 + 0x10]
	0x03CAC84C LDP D11, D10, [X31], #0x40
	0x03CAC850 RET
	0x03CAC854 SUB X31, X31, 0x80
	0x03CAC858 STP D15, D14, [X31 + 0x20]
	0x03CAC85C STP D13, D12, [X31 + 0x30]
	0x03CAC860 STP D11, D10, [X31 + 0x40]
	0x03CAC864 STP D9, D8, [X31 + 0x50]
	0x03CAC868 STR X30, [X31 + 0x60]
	0x03CAC86C STP X20, X19, [X31 + 0x70]
	0x03CAC870 MOV V15.16B, V0.16B
	0x03CAC874 LDR V0, [X31 + 0x9]
	0x03CAC878 MOVZ W20, 0x3
	0x03CAC87C MOV X1, X31
	0x03CAC880 MOV V8.16B, V7.16B
	0x03CAC884 STR V0, [X31 + 0x1]
	0x03CAC888 LDR V0, [X31 + 0x8]
	0x03CAC88C MOV V9.16B, V6.16B
	0x03CAC890 MOV V10.16B, V5.16B
	0x03CAC894 MOV V11.16B, V4.16B
	0x03CAC898 MOV V12.16B, V3.16B
	0x03CAC89C MOV V13.16B, V2.16B
	0x03CAC8A0 MOV V14.16B, V1.16B

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x73C000
	007 Move W8, [X21+805]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x452000
	015 Move X0, [X0+2160]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+805], W8
	019 Move [X31+12], W31
	020 Move X0, [X20+56]
	021 Compare X0, 0
	022 JumpIfNotEqual {26}
	023 Move X0, X20
	024 Call SpriteAsset.UpdateLookupTables, X0
	025 Move X0, [X20+56]
	026 Compare X0, 0
	027 JumpIfEqual {43}
	028 Move X8, 0x452000
	029 Move X8, [X8+2160]
	030 Add X2, X31, 12
	031 Move W1, W19
	032 Move X3, [X8]
	033 Call Dictionary`2<Int32, Int32>.TryGetValue, X0, X1, X2
	034 Move W8, [X31+12]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 And W31, W0, 1
	040 NotImplemented "Instruction CSINV not yet implemented."
	041 Add X31, X31, 48
	042 Return X0
	043 Call 0x1C17F20

Method: System.Int32 GetSpriteIndexFromUnicode(System.UInt32 unicode)

Disassembly:
	0x03CAC8A4 MOV X19, X0
	0x03CAC8A8 STR V0, [X31]
	0x03CAC8AC STR W20, [X0 + 0x18]
	0x03CAC8B0 BL 0x3C36D2C
	0x03CAC8B4 LDR V0, [X31]
	0x03CAC8B8 STR W20, [X19 + 0x18]
	0x03CAC8BC STP S15, S14, [X19 + 0x1C]
	0x03CAC8C0 STP S13, S12, [X19 + 0x24]
	0x03CAC8C4 STUR V0, [X19 + 0x3C]
	0x03CAC8C8 LDR V0, [X31 + 0x1]
	0x03CAC8CC STP S11, S10, [X19 + 0x2C]
	0x03CAC8D0 STP S9, S8, [X19 + 0x34]
	0x03CAC8D4 LDR X30, [X31 + 0x60]
	0x03CAC8D8 STUR V0, [X19 + 0x4C]
	0x03CAC8DC LDP X20, X19, [X31 + 0x70]
	0x03CAC8E0 LDP D9, D8, [X31 + 0x50]
	0x03CAC8E4 LDP D11, D10, [X31 + 0x40]
	0x03CAC8E8 LDP D13, D12, [X31 + 0x30]
	0x03CAC8EC LDP D15, D14, [X31 + 0x20]
	0x03CAC8F0 ADD X31, X31, 0x80
	0x03CAC8F4 RET
	0x03CAC8F8 STR X30, [X31 - 0x20]!
	0x03CAC8FC STP X20, X19, [X31 + 0x10]
	0x03CAC900 ADRP X19, 0x73B000
	0x03CAC904 ADRP X20, 0x4B5000
	0x03CAC908 LDRB W8, [X19 + 0x333]
	0x03CAC90C LDR X20, [X20 + 0x7B8]
	0x03CAC910 TBNZ X8, 0x0, 0x3CAC928
	0x03CAC914 ADRP X0, 0x4B5000
	0x03CAC918 LDR X0, [X0 + 0x7B8]
	0x03CAC91C BL 0x1C16CF4
	0x03CAC920 MOVZ W8, 0x1
	0x03CAC924 STRB W8, [X19 + 0x333]
	0x03CAC928 LDR X8, [X20]
	0x03CAC92C LDP X20, X19, [X31 + 0x10]
	0x03CAC930 FMOV V0.4S, 0x0
	0x03CAC934 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x73C000
	007 Move W8, [X21+806]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4B6000
	015 Move X0, [X0+1536]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+806], W8
	019 Move [X31+8], X31
	020 Move X0, [X20+184]
	021 Compare X0, 0
	022 JumpIfNotEqual {26}
	023 Move X0, X20
	024 Call SpriteAsset.UpdateLookupTables, X0
	025 Move X0, [X20+184]
	026 Compare X0, 0
	027 JumpIfEqual {51}
	028 Move X8, 0x4B6000
	029 Move X8, [X8+1536]
	030 Add X2, X31, 8
	031 Move W1, W19
	032 Move X3, [X8]
	033 Call Dictionary`2<UInt32, Object>.TryGetValue, X0, X1, X2
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {42}
	038 Move X8, [X31+8]
	039 Compare X8, 0
	040 JumpIfEqual {51}
	041 Move W0, [X8+40]
	042 Move TEMP, 0
	043 Not TEMP
	044 Move W0, TEMP
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X30, [X31+16]
	048 Move X21, [X31+24]
	049 Add X31, X31, 48
	050 Return X0
	051 Call 0x1C17F20

Method: System.Int32 GetSpriteIndexFromName(System.String name)

Disassembly:
	0x03CAC938 STR V0, [X8]
	0x03CAC93C LDR X30, [X31], #0x20
	0x03CAC940 RET
	0x03CAC944 LDRB W0, [X0 + 0x10]
	0x03CAC948 RET
	0x03CAC94C LDR X0, [X0 + 0x20]
	0x03CAC950 RET
	0x03CAC954 LDR V0, [X0 + 0x2C]
	0x03CAC958 RET
	0x03CAC95C STP X29, X30, [X31 - 0x60]!
	0x03CAC960 STP X28, X27, [X31 + 0x10]
	0x03CAC964 STP X26, X25, [X31 + 0x20]
	0x03CAC968 STP X24, X23, [X31 + 0x30]
	0x03CAC96C STP X22, X21, [X31 + 0x40]
	0x03CAC970 STP X20, X19, [X31 + 0x50]
	0x03CAC974 SUB X31, X31, 0x1A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+56]
	005 Move X19, X0
	006 Move X20, X1
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call SpriteAsset.UpdateLookupTables, X0
	011 Move X0, X20
	012 Move X1, X31
	013 Call TextUtilities.GetHashCodeCaseInSensitive, X0
	014 Move W1, W0
	015 Move X0, X19
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Call SpriteAsset.GetSpriteIndexFromHashcode, X0, X1
	020 Return X0

Method: UnityEngine.TextCore.Text.SpriteAsset SearchForSpriteByUnicode(UnityEngine.TextCore.Text.SpriteAsset spriteAsset, System.UInt32 unicode, System.Boolean includeFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03CAC978 ADRP X20, 0x73B000
	0x03CAC97C ADRP X21, 0x447000
	0x03CAC980 LDRB W8, [X20 + 0x334]
	0x03CAC984 LDR X21, [X21 + 0x9D0]
	0x03CAC988 MOV X19, X0
	0x03CAC98C TBNZ X8, 0x0, 0x3CACC2C
	0x03CAC990 ADRP X0, 0x447000
	0x03CAC994 LDR X0, [X0 + 0xB58]
	0x03CAC998 BL 0x1C16CF4
	0x03CAC99C ADRP X0, 0x449000
	0x03CAC9A0 LDR X0, [X0 + 0x170]
	0x03CAC9A4 BL 0x1C16CF4
	0x03CAC9A8 ADRP X0, 0x472000
	0x03CAC9AC LDR X0, [X0 + 0x488]
	0x03CAC9B0 BL 0x1C16CF4
	0x03CAC9B4 ADRP X0, 0x4B5000
	0x03CAC9B8 LDR X0, [X0 + 0x7C0]
	0x03CAC9BC BL 0x1C16CF4
	0x03CAC9C0 ADRP X0, 0x4B5000
	0x03CAC9C4 LDR X0, [X0 + 0x7C8]
	0x03CAC9C8 BL 0x1C16CF4
	0x03CAC9CC ADRP X0, 0x447000
	0x03CAC9D0 LDR X0, [X0 + 0x758]
	0x03CAC9D4 BL 0x1C16CF4
	0x03CAC9D8 ADRP X0, 0x447000
	0x03CAC9DC LDR X0, [X0 + 0x9D0]
	0x03CAC9E0 BL 0x1C16CF4
	0x03CAC9E4 ADRP X0, 0x447000
	0x03CAC9E8 LDR X0, [X0 + 0xA90]
	0x03CAC9EC BL 0x1C16CF4
	0x03CAC9F0 ADRP X0, 0x4B5000
	0x03CAC9F4 LDR X0, [X0 + 0x7D0]
	0x03CAC9F8 BL 0x1C16CF4
	0x03CAC9FC ADRP X0, 0x4B5000
	0x03CACA00 LDR X0, [X0 + 0x7D8]
	0x03CACA04 BL 0x1C16CF4
	0x03CACA08 ADRP X0, 0x447000
	0x03CACA0C LDR X0, [X0 + 0x5A0]
	0x03CACA10 BL 0x1C16CF4
	0x03CACA14 ADRP X0, 0x4B5000
	0x03CACA18 LDR X0, [X0 + 0x7E0]
	0x03CACA1C BL 0x1C16CF4
	0x03CACA20 ADRP X0, 0x4B5000
	0x03CACA24 LDR X0, [X0 + 0x7E8]
	0x03CACA28 BL 0x1C16CF4
	0x03CACA2C ADRP X0, 0x4B5000
	0x03CACA30 LDR X0, [X0 + 0x7F0]
	0x03CACA34 BL 0x1C16CF4
	0x03CACA38 ADRP X0, 0x4B5000
	0x03CACA3C LDR X0, [X0 + 0x7F8]
	0x03CACA40 BL 0x1C16CF4
	0x03CACA44 ADRP X0, 0x4B5000
	0x03CACA48 LDR X0, [X0 + 0x800]
	0x03CACA4C BL 0x1C16CF4
	0x03CACA50 ADRP X0, 0x4B5000
	0x03CACA54 LDR X0, [X0 + 0x808]
	0x03CACA58 BL 0x1C16CF4
	0x03CACA5C ADRP X0, 0x4B5000
	0x03CACA60 LDR X0, [X0 + 0x810]
	0x03CACA64 BL 0x1C16CF4
	0x03CACA68 ADRP X0, 0x4B5000
	0x03CACA6C LDR X0, [X0 + 0x818]
	0x03CACA70 BL 0x1C16CF4
	0x03CACA74 ADRP X0, 0x4B5000
	0x03CACA78 LDR X0, [X0 + 0x820]
	0x03CACA7C BL 0x1C16CF4
	0x03CACA80 ADRP X0, 0x4B5000
	0x03CACA84 LDR X0, [X0 + 0x828]
	0x03CACA88 BL 0x1C16CF4
	0x03CACA8C ADRP X0, 0x4B5000
	0x03CACA90 LDR X0, [X0 + 0x830]
	0x03CACA94 BL 0x1C16CF4
	0x03CACA98 ADRP X0, 0x452000
	0x03CACA9C LDR X0, [X0 + 0x130]
	0x03CACAA0 BL 0x1C16CF4
	0x03CACAA4 ADRP X0, 0x4B5000
	0x03CACAA8 LDR X0, [X0 + 0x838]
	0x03CACAAC BL 0x1C16CF4
	0x03CACAB0 ADRP X0, 0x4B5000
	0x03CACAB4 LDR X0, [X0 + 0x840]
	0x03CACAB8 BL 0x1C16CF4
	0x03CACABC ADRP X0, 0x4B5000
	0x03CACAC0 LDR X0, [X0 + 0x848]
	0x03CACAC4 BL 0x1C16CF4
	0x03CACAC8 ADRP X0, 0x4B2000
	0x03CACACC LDR X0, [X0 + 0xD38]
	0x03CACAD0 BL 0x1C16CF4
	0x03CACAD4 ADRP X0, 0x4B5000
	0x03CACAD8 LDR X0, [X0 + 0x850]
	0x03CACADC BL 0x1C16CF4
	0x03CACAE0 ADRP X0, 0x4B5000
	0x03CACAE4 LDR X0, [X0 + 0x858]
	0x03CACAE8 BL 0x1C16CF4
	0x03CACAEC ADRP X0, 0x4B5000
	0x03CACAF0 LDR X0, [X0 + 0x860]
	0x03CACAF4 BL 0x1C16CF4
	0x03CACAF8 ADRP X0, 0x4B5000
	0x03CACAFC LDR X0, [X0 + 0x868]
	0x03CACB00 BL 0x1C16CF4
	0x03CACB04 ADRP X0, 0x4B5000
	0x03CACB08 LDR X0, [X0 + 0x870]
	0x03CACB0C BL 0x1C16CF4
	0x03CACB10 ADRP X0, 0x4B5000
	0x03CACB14 LDR X0, [X0 + 0x878]
	0x03CACB18 BL 0x1C16CF4
	0x03CACB1C ADRP X0, 0x4B5000
	0x03CACB20 LDR X0, [X0 + 0x880]
	0x03CACB24 BL 0x1C16CF4
	0x03CACB28 ADRP X0, 0x4B5000
	0x03CACB2C LDR X0, [X0 + 0x888]
	0x03CACB30 BL 0x1C16CF4
	0x03CACB34 ADRP X0, 0x47B000
	0x03CACB38 LDR X0, [X0 + 0x680]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x73C000
	009 Move X24, 0x448000
	010 Move W8, [X23+807]
	011 Move X24, [X24+1432]
	012 Move X19, X3
	013 Move W22, W2
	014 Move W21, W1
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0x44A000
	021 Move X0, [X0+2520]
	022 Call 0x1C17CF4
	023 Move X0, 0x44F000
	024 Move X0, [X0+1656]
	025 Call 0x1C17CF4
	026 Move X0, 0x44F000
	027 Move X0, [X0+1672]
	028 Call 0x1C17CF4
	029 Move X0, 0x449000
	030 Move X0, [X0+3592]
	031 Call 0x1C17CF4
	032 Move X0, 0x4B6000
	033 Move X0, [X0+1544]
	034 Call 0x1C17CF4
	035 Move X0, 0x448000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0x4B6000
	039 Move X0, [X0+1864]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X23+807], W8
	043 Move X0, [X24]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Equality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {61}
	056 Move X20, X31
	057 Move TEMP, 0
	058 Not TEMP
	059 Move W8, TEMP
	060 Move [X19], W8
	061 Compare X20, 0
	062 JumpIfEqual {133}
	063 Move X0, X20
	064 Move W1, W21
	065 Call SpriteAsset.GetSpriteIndexFromUnicode, X0, X1
	066 Add W31, W0, 1
	067 Move [X19], W0
	068 Move X0, X20
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X22, [X31+32]
	072 Move X21, [X31+40]
	073 Move X24, [X31+16]
	074 Move X23, [X31+24]
	075 Move X30, [X31+64]
	076 Return X0
	077 Move X24, 0x4B6000
	078 Move X24, [X24+1864]
	079 Move X8, [X24]
	080 Move X8, [X8+184]
	081 Move X0, [X8]
	082 Compare X0, 0
	083 JumpIfEqual {88}
	084 Move X8, 0x44F000
	085 Move X8, [X8+1656]
	086 Move X1, [X8]
	087 Call HashSet`1<Int32>.Clear, X0
	088 Move X8, 0x449000
	089 Move X8, [X8+3592]
	090 Move X0, [X8]
	091 Call 0x1C17F10
	092 Move X8, 0x44F000
	093 Move X8, [X8+1672]
	094 Move X23, X0
	095 Move X1, [X8]
	096 Call HashSet`1<Int32>..ctor, X0
	097 Move X8, [X24]
	098 Move X8, [X8+184]
	099 Move [X8], X23
	100 Move X0, X20
	101 Move X1, X31
	102 Call Object.GetInstanceID, X0
	103 Move X8, [X24]
	104 Move X8, [X8+184]
	105 Move X8, [X8]
	106 Compare X8, 0
	107 JumpIfEqual {133}
	108 Move X9, 0x44A000
	109 Move X9, [X9+2520]
	110 Move W1, W0
	111 Move X0, X8
	112 Move X2, [X9]
	113 Call HashSet`1<Int32>.Add, X0, X1
	114 Move TEMP, X22
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {56}
	118 Move X0, [X20+208]
	119 Compare X0, 0
	120 JumpIfEqual {56}
	121 Move W8, [X0+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move W1, W21
	124 Move X3, X19
	125 Move X20, [X31+48]
	126 Move X19, [X31+56]
	127 Move X22, [X31+32]
	128 Move X21, [X31+40]
	129 Move X24, [X31+16]
	130 Move X23, [X31+24]
	131 Move W2, 1
	132 Move X30, [X31+64]
	133 Call 0x1C17F20

Method: UnityEngine.TextCore.Text.SpriteAsset SearchForSpriteByUnicodeInternal(System.Collections.Generic.List`1<UnityEngine.TextCore.Text.SpriteAsset> spriteAssets, System.UInt32 unicode, System.Boolean includeFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03CACB3C BL 0x1C16CF4
	0x03CACB40 ADRP X0, 0x47F000
	0x03CACB44 LDR X0, [X0 + 0x990]
	0x03CACB48 BL 0x1C16CF4
	0x03CACB4C ADRP X0, 0x4B5000
	0x03CACB50 LDR X0, [X0 + 0x890]
	0x03CACB54 BL 0x1C16CF4
	0x03CACB58 ADRP X0, 0x4B5000
	0x03CACB5C LDR X0, [X0 + 0x898]
	0x03CACB60 BL 0x1C16CF4
	0x03CACB64 ADRP X0, 0x4B5000
	0x03CACB68 LDR X0, [X0 + 0x8A0]
	0x03CACB6C BL 0x1C16CF4
	0x03CACB70 ADRP X0, 0x4B5000
	0x03CACB74 LDR X0, [X0 + 0x8A8]
	0x03CACB78 BL 0x1C16CF4
	0x03CACB7C ADRP X0, 0x4B5000
	0x03CACB80 LDR X0, [X0 + 0x8B0]
	0x03CACB84 BL 0x1C16CF4
	0x03CACB88 ADRP X0, 0x4B5000
	0x03CACB8C LDR X0, [X0 + 0x8B8]
	0x03CACB90 BL 0x1C16CF4
	0x03CACB94 ADRP X0, 0x4B5000
	0x03CACB98 LDR X0, [X0 + 0x8C0]
	0x03CACB9C BL 0x1C16CF4
	0x03CACBA0 ADRP X0, 0x4B5000
	0x03CACBA4 LDR X0, [X0 + 0x8C8]
	0x03CACBA8 BL 0x1C16CF4
	0x03CACBAC ADRP X0, 0x4B5000
	0x03CACBB0 LDR X0, [X0 + 0x8D0]
	0x03CACBB4 BL 0x1C16CF4
	0x03CACBB8 ADRP X0, 0x4A9000
	0x03CACBBC LDR X0, [X0 + 0x108]
	0x03CACBC0 BL 0x1C16CF4
	0x03CACBC4 ADRP X0, 0x4B5000
	0x03CACBC8 LDR X0, [X0 + 0x8D8]
	0x03CACBCC BL 0x1C16CF4
	0x03CACBD0 ADRP X0, 0x4B5000
	0x03CACBD4 LDR X0, [X0 + 0x8E0]
	0x03CACBD8 BL 0x1C16CF4
	0x03CACBDC ADRP X0, 0x4B5000
	0x03CACBE0 LDR X0, [X0 + 0x8E8]
	0x03CACBE4 BL 0x1C16CF4
	0x03CACBE8 ADRP X0, 0x4B5000
	0x03CACBEC LDR X0, [X0 + 0x8F0]
	0x03CACBF0 BL 0x1C16CF4
	0x03CACBF4 ADRP X0, 0x47C000
	0x03CACBF8 LDR X0, [X0 + 0xAB8]
	0x03CACBFC BL 0x1C16CF4
	0x03CACC00 ADRP X0, 0x4B5000
	0x03CACC04 LDR X0, [X0 + 0x8F8]
	0x03CACC08 BL 0x1C16CF4
	0x03CACC0C ADRP X0, 0x4B5000
	0x03CACC10 LDR X0, [X0 + 0x900]
	0x03CACC14 BL 0x1C16CF4
	0x03CACC18 ADRP X0, 0x480000
	0x03CACC1C LDR X0, [X0 + 0xE08]
	0x03CACC20 BL 0x1C16CF4
	0x03CACC24 MOVZ W8, 0x1
	0x03CACC28 STRB W8, [X20 + 0x334]
	0x03CACC2C LDR X0, [X21]
	0x03CACC30 MOVZ W1, 0x56
	0x03CACC34 BL 0x1C16D6C
	0x03CACC38 CBZ X0, 0x3CAE050
	0x03CACC3C ADRP X21, 0x4B5000
	0x03CACC40 LDR X21, [X21 + 0x8F8]
	0x03CACC44 MOV X20, X0
	0x03CACC48 LDR X0, [X21]
	0x03CACC4C CBZ X0, 0x3CACC60
	0x03CACC50 LDR X8, [X20]
	0x03CACC54 LDR X1, [X8 + 0x40]
	0x03CACC58 BL 0x1C16E00
	0x03CACC5C CBZ X0, 0x3CAE044
	0x03CACC60 MOV X22, X20
	0x03CACC64 LDR W8, [X22 + 0x18]!
	0x03CACC68 CBZ W8, 0x3CAE040
	0x03CACC6C LDR X8, [X21]
	0x03CACC70 ADRP X9, 0x449000
	0x03CACC74 LDR X9, [X9 + 0x170]
	0x03CACC78 ADD X1, X31, 0x19C
	0x03CACC7C STR X8, [X20 + 0x20]
	0x03CACC80 LDRH W8, [X19]
	0x03CACC84 LDR X0, [X9]
	0x03CACC88 STRH W8, [X31 + 0x19C]
	0x03CACC8C BL 0x1C16E04
	0x03CACC90 MOV X21, X0
	0x03CACC94 CBZ X0, 0x3CACCAC
	0x03CACC98 LDR X8, [X20]
	0x03CACC9C MOV X0, X21
	0x03CACCA0 LDR X1, [X8 + 0x40]
	0x03CACCA4 BL 0x1C16E00
	0x03CACCA8 CBZ X0, 0x3CAE044
	0x03CACCAC LDR W8, [X22]
	0x03CACCB0 CMP W8, 0x1
	0x03CACCB4 B.LS 0x3CAE040
	0x03CACCB8 ADRP X23, 0x452000
	0x03CACCBC LDR X23, [X23 + 0x130]
	0x03CACCC0 STR X21, [X20 + 0x28]
	0x03CACCC4 LDR X0, [X23]
	0x03CACCC8 CBZ X0, 0x3CACCE0
	0x03CACCCC LDR X8, [X20]
	0x03CACCD0 LDR X1, [X8 + 0x40]
	0x03CACCD4 BL 0x1C16E00
	0x03CACCD8 CBZ X0, 0x3CAE044

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x73C000
	013 Move W8, [X22+808]
	014 Move X19, X3
	015 Move W23, W2
	016 Move W20, W1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x44A000
	023 Move X0, [X0+2520]
	024 Call 0x1C17CF4
	025 Move X0, 0x4B6000
	026 Move X0, [X0+1544]
	027 Call 0x1C17CF4
	028 Move X0, 0x4B6000
	029 Move X0, [X0+1552]
	030 Call 0x1C17CF4
	031 Move X0, 0x448000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0x4B6000
	035 Move X0, [X0+1864]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+808], W8
	039 Compare X21, 0
	040 JumpIfEqual {131}
	041 Move W8, [X21+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X25, 0x4B6000
	044 Move X26, 0x448000
	045 Move X27, 0x4B6000
	046 Move X28, 0x44A000
	047 Move X25, [X25+1552]
	048 Move X26, [X26+1432]
	049 Move X27, [X27+1864]
	050 Move X28, [X28+2520]
	051 Move W22, W31
	052 And W23, W23, 1
	053 Move X2, [X25]
	054 Move X0, X21
	055 Move W1, W22
	056 Call List`1<Object>.get_Item, X0, X1
	057 Move X8, [X26]
	058 Move X24, X0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X24
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Equality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {110}
	072 Compare X24, 0
	073 JumpIfEqual {131}
	074 Move X0, X24
	075 Move X1, X31
	076 Call Object.GetInstanceID, X0
	077 Move X8, [X27]
	078 Move X8, [X8+184]
	079 Move X8, [X8]
	080 Compare X8, 0
	081 JumpIfEqual {131}
	082 Move X2, [X28]
	083 Move W1, W0
	084 Move X0, X8
	085 Call HashSet`1<Int32>.Add, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {110}
	090 Move X0, X24
	091 Move W1, W20
	092 Move W2, W23
	093 Move X3, X19
	094 Call SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	095 Move X8, [X26]
	096 Move X24, X0
	097 Move W9, [X8+224]
	098 Compare W9, 0
	099 JumpIfNotEqual {102}
	100 Move X0, X8
	101 Call 0x1C17DFC
	102 Move X0, X24
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Inequality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {118}
	110 Move W8, [X21+24]
	111 Add W22, W22, 1
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X24, X31
	114 Move TEMP, 0
	115 Not TEMP
	116 Move W8, TEMP
	117 Move [X19], W8
	118 Move X0, X24
	119 Move X20, [X31+80]
	120 Move X19, [X31+88]
	121 Move X22, [X31+64]
	122 Move X21, [X31+72]
	123 Move X24, [X31+48]
	124 Move X23, [X31+56]
	125 Move X26, [X31+32]
	126 Move X25, [X31+40]
	127 Move X28, [X31+16]
	128 Move X27, [X31+24]
	129 Move X30, [X31+96]
	130 Return X0
	131 Call 0x1C17F20

Method: UnityEngine.TextCore.Text.SpriteAsset SearchForSpriteByUnicodeInternal(UnityEngine.TextCore.Text.SpriteAsset spriteAsset, System.UInt32 unicode, System.Boolean includeFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03CACCDC LDR W8, [X22]
	0x03CACCE0 CMP W8, 0x2
	0x03CACCE4 B.LS 0x3CAE040
	0x03CACCE8 LDR X8, [X23]
	0x03CACCEC ADRP X23, 0x447000
	0x03CACCF0 LDR X23, [X23 + 0x758]
	0x03CACCF4 ADD X1, X31, 0x198
	0x03CACCF8 STR X8, [X20 + 0x30]
	0x03CACCFC LDR W8, [X19 + 0x4]
	0x03CACD00 LDR X0, [X23]
	0x03CACD04 STR W8, [X31 + 0x198]
	0x03CACD08 BL 0x1C16E04
	0x03CACD0C MOV X21, X0
	0x03CACD10 CBZ X0, 0x3CACD28
	0x03CACD14 LDR X8, [X20]
	0x03CACD18 MOV X0, X21
	0x03CACD1C LDR X1, [X8 + 0x40]
	0x03CACD20 BL 0x1C16E00
	0x03CACD24 CBZ X0, 0x3CAE044
	0x03CACD28 LDR W8, [X22]
	0x03CACD2C CMP W8, 0x3
	0x03CACD30 B.LS 0x3CAE040
	0x03CACD34 ADRP X24, 0x47F000
	0x03CACD38 LDR X24, [X24 + 0x990]
	0x03CACD3C STR X21, [X20 + 0x38]
	0x03CACD40 LDR X0, [X24]
	0x03CACD44 CBZ X0, 0x3CACD5C
	0x03CACD48 LDR X8, [X20]
	0x03CACD4C LDR X1, [X8 + 0x40]
	0x03CACD50 BL 0x1C16E00
	0x03CACD54 CBZ X0, 0x3CAE044
	0x03CACD58 LDR W8, [X22]
	0x03CACD5C CMP W8, 0x4
	0x03CACD60 B.LS 0x3CAE040
	0x03CACD64 LDR X8, [X24]
	0x03CACD68 ADRP X9, 0x4B5000
	0x03CACD6C LDR X9, [X9 + 0x7D0]
	0x03CACD70 ADD X1, X31, 0x194
	0x03CACD74 STR X8, [X20 + 0x40]
	0x03CACD78 LDRB W8, [X19 + 0x8]
	0x03CACD7C LDR X0, [X9]
	0x03CACD80 STRB W8, [X31 + 0x194]
	0x03CACD84 BL 0x1C16E04
	0x03CACD88 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x73C000
	008 Move W8, [X23+809]
	009 Move X19, X3
	010 Move W22, W2
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x4B6000
	018 Move X0, [X0+1544]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+809], W8
	022 Compare X21, 0
	023 JumpIfEqual {62}
	024 Move X0, X21
	025 Move W1, W20
	026 Call SpriteAsset.GetSpriteIndexFromUnicode, X0, X1
	027 Add W31, W0, 1
	028 Move [X19], W0
	029 Move TEMP, X22
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {49}
	033 Move X0, [X21+208]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move W8, [X0+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W1, W20
	039 Move X3, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move W2, 1
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Call SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	048 Return X0
	049 Move X21, X31
	050 Move TEMP, 0
	051 Not TEMP
	052 Move W8, TEMP
	053 Move [X19], W8
	054 Move X0, X21
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0
	062 Call 0x1C17F20

Method: UnityEngine.TextCore.Text.SpriteAsset SearchForSpriteByHashCode(UnityEngine.TextCore.Text.SpriteAsset spriteAsset, System.Int32 hashCode, System.Boolean includeFallbacks, out System.Int32 spriteIndex, UnityEngine.TextCore.Text.TextSettings textSettings = null)

Disassembly:
	0x03CACD8C CBZ X0, 0x3CACDA4
	0x03CACD90 LDR X8, [X20]
	0x03CACD94 MOV X0, X21
	0x03CACD98 LDR X1, [X8 + 0x40]
	0x03CACD9C BL 0x1C16E00
	0x03CACDA0 CBZ X0, 0x3CAE044
	0x03CACDA4 LDR W8, [X22]
	0x03CACDA8 CMP W8, 0x5
	0x03CACDAC B.LS 0x3CAE040
	0x03CACDB0 ADRP X24, 0x4B5000
	0x03CACDB4 LDR X24, [X24 + 0x7E0]
	0x03CACDB8 STR X21, [X20 + 0x48]
	0x03CACDBC LDR X0, [X24]
	0x03CACDC0 CBZ X0, 0x3CACDD8
	0x03CACDC4 LDR X8, [X20]
	0x03CACDC8 LDR X1, [X8 + 0x40]
	0x03CACDCC BL 0x1C16E00
	0x03CACDD0 CBZ X0, 0x3CAE044
	0x03CACDD4 LDR W8, [X22]
	0x03CACDD8 CMP W8, 0x6
	0x03CACDDC B.LS 0x3CAE040
	0x03CACDE0 LDR X8, [X24]
	0x03CACDE4 ADD X1, X31, 0x190
	0x03CACDE8 STR X8, [X20 + 0x50]
	0x03CACDEC LDR W8, [X19 + 0xC]
	0x03CACDF0 LDR X0, [X23]
	0x03CACDF4 STR W8, [X31 + 0x190]
	0x03CACDF8 BL 0x1C16E04
	0x03CACDFC MOV X21, X0
	0x03CACE00 CBZ X0, 0x3CACE18
	0x03CACE04 LDR X8, [X20]
	0x03CACE08 MOV X0, X21
	0x03CACE0C LDR X1, [X8 + 0x40]
	0x03CACE10 BL 0x1C16E00
	0x03CACE14 CBZ X0, 0x3CAE044
	0x03CACE18 LDR W8, [X22]
	0x03CACE1C CMP W8, 0x7
	0x03CACE20 B.LS 0x3CAE040
	0x03CACE24 ADRP X24, 0x4B5000
	0x03CACE28 LDR X24, [X24 + 0x800]
	0x03CACE2C STR X21, [X20 + 0x58]
	0x03CACE30 LDR X0, [X24]
	0x03CACE34 CBZ X0, 0x3CACE4C
	0x03CACE38 LDR X8, [X20]
	0x03CACE3C LDR X1, [X8 + 0x40]
	0x03CACE40 BL 0x1C16E00
	0x03CACE44 CBZ X0, 0x3CAE044
	0x03CACE48 LDR W8, [X22]
	0x03CACE4C CMP W8, 0x8
	0x03CACE50 B.LS 0x3CAE040
	0x03CACE54 LDR X9, [X24]
	0x03CACE58 STR X9, [X20 + 0x60]
	0x03CACE5C LDR X21, [X19 + 0x10]
	0x03CACE60 CBZ X21, 0x3CACE7C
	0x03CACE64 LDR X8, [X20]
	0x03CACE68 MOV X0, X21
	0x03CACE6C LDR X1, [X8 + 0x40]
	0x03CACE70 BL 0x1C16E00
	0x03CACE74 CBZ X0, 0x3CAE044
	0x03CACE78 LDR W8, [X22]
	0x03CACE7C CMP W8, 0x9
	0x03CACE80 B.LS 0x3CAE040
	0x03CACE84 ADRP X24, 0x4B5000
	0x03CACE88 LDR X24, [X24 + 0x870]
	0x03CACE8C STR X21, [X20 + 0x68]
	0x03CACE90 LDR X0, [X24]
	0x03CACE94 CBZ X0, 0x3CACEAC
	0x03CACE98 LDR X8, [X20]
	0x03CACE9C LDR X1, [X8 + 0x40]
	0x03CACEA0 BL 0x1C16E00
	0x03CACEA4 CBZ X0, 0x3CAE044
	0x03CACEA8 LDR W8, [X22]
	0x03CACEAC CMP W8, 0xA
	0x03CACEB0 B.LS 0x3CAE040
	0x03CACEB4 LDR X9, [X24]
	0x03CACEB8 STR X9, [X20 + 0x70]
	0x03CACEBC LDR X21, [X19 + 0x18]
	0x03CACEC0 CBZ X21, 0x3CACEDC
	0x03CACEC4 LDR X8, [X20]
	0x03CACEC8 MOV X0, X21
	0x03CACECC LDR X1, [X8 + 0x40]
	0x03CACED0 BL 0x1C16E00
	0x03CACED4 CBZ X0, 0x3CAE044
	0x03CACED8 LDR W8, [X22]
	0x03CACEDC CMP W8, 0xB
	0x03CACEE0 B.LS 0x3CAE040
	0x03CACEE4 ADRP X24, 0x4B5000
	0x03CACEE8 LDR X24, [X24 + 0x8C0]
	0x03CACEEC STR X21, [X20 + 0x78]
	0x03CACEF0 LDR X0, [X24]
	0x03CACEF4 CBZ X0, 0x3CACF0C
	0x03CACEF8 LDR X8, [X20]
	0x03CACEFC LDR X1, [X8 + 0x40]
	0x03CACF00 BL 0x1C16E00
	0x03CACF04 CBZ X0, 0x3CAE044
	0x03CACF08 LDR W8, [X22]
	0x03CACF0C CMP W8, 0xC
	0x03CACF10 B.LS 0x3CAE040
	0x03CACF14 LDR X9, [X24]
	0x03CACF18 STR X9, [X20 + 0x80]
	0x03CACF1C LDR X21, [X19 + 0x20]
	0x03CACF20 CBZ X21, 0x3CACF3C
	0x03CACF24 LDR X8, [X20]
	0x03CACF28 MOV X0, X21
	0x03CACF2C LDR X1, [X8 + 0x40]
	0x03CACF30 BL 0x1C16E00
	0x03CACF34 CBZ X0, 0x3CAE044
	0x03CACF38 LDR W8, [X22]
	0x03CACF3C CMP W8, 0xD
	0x03CACF40 B.LS 0x3CAE040
	0x03CACF44 ADRP X24, 0x4B5000
	0x03CACF48 LDR X24, [X24 + 0x890]
	0x03CACF4C STR X21, [X20 + 0x88]
	0x03CACF50 LDR X0, [X24]
	0x03CACF54 CBZ X0, 0x3CACF6C
	0x03CACF58 LDR X8, [X20]
	0x03CACF5C LDR X1, [X8 + 0x40]
	0x03CACF60 BL 0x1C16E00
	0x03CACF64 CBZ X0, 0x3CAE044
	0x03CACF68 LDR W8, [X22]
	0x03CACF6C CMP W8, 0xE
	0x03CACF70 B.LS 0x3CAE040
	0x03CACF74 LDR X9, [X24]
	0x03CACF78 STR X9, [X20 + 0x90]
	0x03CACF7C LDR X21, [X19 + 0x28]
	0x03CACF80 CBZ X21, 0x3CACF9C
	0x03CACF84 LDR X8, [X20]
	0x03CACF88 MOV X0, X21
	0x03CACF8C LDR X1, [X8 + 0x40]
	0x03CACF90 BL 0x1C16E00
	0x03CACF94 CBZ X0, 0x3CAE044
	0x03CACF98 LDR W8, [X22]
	0x03CACF9C CMP W8, 0xF
	0x03CACFA0 B.LS 0x3CAE040
	0x03CACFA4 ADRP X24, 0x4B5000
	0x03CACFA8 LDR X24, [X24 + 0x810]
	0x03CACFAC STR X21, [X20 + 0x98]
	0x03CACFB0 LDR X0, [X24]
	0x03CACFB4 CBZ X0, 0x3CACFCC
	0x03CACFB8 LDR X8, [X20]
	0x03CACFBC LDR X1, [X8 + 0x40]
	0x03CACFC0 BL 0x1C16E00
	0x03CACFC4 CBZ X0, 0x3CAE044
	0x03CACFC8 LDR W8, [X22]
	0x03CACFCC CMP W8, 0x10
	0x03CACFD0 B.LS 0x3CAE040
	0x03CACFD4 LDR X8, [X24]
	0x03CACFD8 ADD X1, X31, 0x18C
	0x03CACFDC STR X8, [X20 + 0xA0]
	0x03CACFE0 LDR W8, [X19 + 0x30]
	0x03CACFE4 LDR X0, [X23]
	0x03CACFE8 STR W8, [X31 + 0x18C]
	0x03CACFEC BL 0x1C16E04
	0x03CACFF0 MOV X21, X0
	0x03CACFF4 CBZ X0, 0x3CAD00C
	0x03CACFF8 LDR X8, [X20]
	0x03CACFFC MOV X0, X21
	0x03CAD000 LDR X1, [X8 + 0x40]
	0x03CAD004 BL 0x1C16E00
	0x03CAD008 CBZ X0, 0x3CAE044
	0x03CAD00C LDR W8, [X22]
	0x03CAD010 CMP W8, 0x11
	0x03CAD014 B.LS 0x3CAE040
	0x03CAD018 ADRP X24, 0x4B1000
	0x03CAD01C LDR X24, [X24 + 0xD38]
	0x03CAD020 STR X21, [X20 + 0xA8]
	0x03CAD024 LDR X0, [X24]
	0x03CAD028 CBZ X0, 0x3CAD040
	0x03CAD02C LDR X8, [X20]
	0x03CAD030 LDR X1, [X8 + 0x40]
	0x03CAD034 BL 0x1C16E00
	0x03CAD038 CBZ X0, 0x3CAE044
	0x03CAD03C LDR W8, [X22]
	0x03CAD040 CMP W8, 0x12
	0x03CAD044 B.LS 0x3CAE040
	0x03CAD048 LDR X9, [X24]
	0x03CAD04C STR X9, [X20 + 0xB0]
	0x03CAD050 LDR X21, [X19 + 0x38]
	0x03CAD054 CBZ X21, 0x3CAD070
	0x03CAD058 LDR X8, [X20]
	0x03CAD05C MOV X0, X21
	0x03CAD060 LDR X1, [X8 + 0x40]
	0x03CAD064 BL 0x1C16E00
	0x03CAD068 CBZ X0, 0x3CAE044
	0x03CAD06C LDR W8, [X22]
	0x03CAD070 CMP W8, 0x13
	0x03CAD074 B.LS 0x3CAE040
	0x03CAD078 ADRP X24, 0x4B4000
	0x03CAD07C LDR X24, [X24 + 0x850]
	0x03CAD080 STR X21, [X20 + 0xB8]
	0x03CAD084 LDR X0, [X24]
	0x03CAD088 CBZ X0, 0x3CAD0A0
	0x03CAD08C LDR X8, [X20]
	0x03CAD090 LDR X1, [X8 + 0x40]
	0x03CAD094 BL 0x1C16E00
	0x03CAD098 CBZ X0, 0x3CAE044
	0x03CAD09C LDR W8, [X22]
	0x03CAD0A0 CMP W8, 0x14
	0x03CAD0A4 B.LS 0x3CAE040
	0x03CAD0A8 LDR X8, [X24]
	0x03CAD0AC ADD X1, X31, 0x188
	0x03CAD0B0 STR X8, [X20 + 0xC0]
	0x03CAD0B4 LDR W8, [X19 + 0x40]
	0x03CAD0B8 LDR X0, [X23]
	0x03CAD0BC STR W8, [X31 + 0x188]
	0x03CAD0C0 BL 0x1C16E04

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X24, 0x73C000
	013 Move X26, 0x448000
	014 Move W8, [X24+810]
	015 Move X26, [X26+1432]
	016 Move X20, X4
	017 Move X19, X3
	018 Move W22, W2
	019 Move W23, W1
	020 Move X21, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {48}
	025 Move X0, 0x44A000
	026 Move X0, [X0+2520]
	027 Call 0x1C17CF4
	028 Move X0, 0x44F000
	029 Move X0, [X0+1656]
	030 Call 0x1C17CF4
	031 Move X0, 0x44F000
	032 Move X0, [X0+1672]
	033 Call 0x1C17CF4
	034 Move X0, 0x449000
	035 Move X0, [X0+3592]
	036 Call 0x1C17CF4
	037 Move X0, 0x4B6000
	038 Move X0, [X0+1544]
	039 Call 0x1C17CF4
	040 Move X0, 0x448000
	041 Move X0, [X0+1432]
	042 Call 0x1C17CF4
	043 Move X0, 0x4B6000
	044 Move X0, [X0+1864]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X24+810], W8
	048 Move X0, [X26]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X21
	054 Move X1, X31
	055 Move X2, X31
	056 Call Object.op_Equality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {66}
	061 Move X21, X31
	062 Move TEMP, 0
	063 Not TEMP
	064 Move W8, TEMP
	065 Move [X19], W8
	066 Compare X21, 0
	067 JumpIfEqual {244}
	068 Move X0, X21
	069 Move W1, W23
	070 Call SpriteAsset.GetSpriteIndexFromHashcode, X0, X1
	071 Add W31, W0, 1
	072 Move [X19], W0
	073 Move X0, X21
	074 Move X20, [X31+80]
	075 Move X19, [X31+88]
	076 Move X22, [X31+64]
	077 Move X21, [X31+72]
	078 Move X24, [X31+48]
	079 Move X23, [X31+56]
	080 Move X26, [X31+32]
	081 Move X25, [X31+40]
	082 Move X28, [X31+16]
	083 Move X27, [X31+24]
	084 Move X30, [X31+96]
	085 Return X0
	086 Move X27, 0x4B6000
	087 Move X27, [X27+1864]
	088 Move X8, [X27]
	089 Move X8, [X8+184]
	090 Move X0, [X8]
	091 Compare X0, 0
	092 JumpIfEqual {97}
	093 Move X8, 0x44F000
	094 Move X8, [X8+1656]
	095 Move X1, [X8]
	096 Call HashSet`1<Int32>.Clear, X0
	097 Move X8, 0x449000
	098 Move X8, [X8+3592]
	099 Move X0, [X8]
	100 Call 0x1C17F10
	101 Move X8, 0x44F000
	102 Move X8, [X8+1672]
	103 Move X24, X0
	104 Move X1, [X8]
	105 Call HashSet`1<Int32>..ctor, X0
	106 Move X8, [X27]
	107 Move X8, [X8+184]
	108 Move [X8], X24
	109 Move W24, [X21+32]
	110 Compare W24, 0
	111 JumpIfNotEqual {117}
	112 Move X0, X21
	113 Move X1, X31
	114 Call Object.GetInstanceID, X0
	115 Move W24, W0
	116 Move [X21+32], W0
	117 Move X8, [X27]
	118 Move X8, [X8+184]
	119 Move X0, [X8]
	120 Compare X0, 0
	121 JumpIfEqual {244}
	122 Move X28, 0x44A000
	123 Move X28, [X28+2520]
	124 Move W1, W24
	125 Move X2, [X28]
	126 Call HashSet`1<Int32>.Add, X0, X1
	127 Move TEMP, X22
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {142}
	131 Move X0, [X21+208]
	132 Compare X0, 0
	133 JumpIfEqual {142}
	134 Move W8, [X0+24]
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move W2, 1
	137 Move W1, W23
	138 Move X3, X19
	139 Call SpriteAsset.SearchForSpriteByHashCodeInternal, X0, X1, X2, X3
	140 Move W8, [X19]
	141 Add W31, W8, 1
	142 Move X0, [X26]
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfNotEqual {147}
	146 Call 0x1C17DFC
	147 Move X0, X20
	148 Move X1, X31
	149 Move X2, X31
	150 Call Object.op_Equality, X0, X1
	151 Move TEMP, X0
	152 And TEMP, TEMP, 1
	153 Compare TEMP, 1
	154 JumpIfEqual {61}
	155 Move TEMP, X22
	156 And TEMP, TEMP, 1
	157 Compare TEMP, 1
	158 JumpIfNotEqual {183}
	159 Compare X20, 0
	160 JumpIfEqual {244}
	161 Move X0, [X26]
	162 Move X25, [X20+72]
	163 Move W8, [X0+224]
	164 Compare W8, 0
	165 JumpIfNotEqual {167}
	166 Call 0x1C17DFC
	167 Move X0, X25
	168 Move X1, X31
	169 Move X2, X31
	170 Call Object.op_Inequality, X0, X1
	171 Move TEMP, X0
	172 And TEMP, TEMP, 1
	173 Compare TEMP, 1
	174 JumpIfNotEqual {183}
	175 Move X0, [X20+72]
	176 Move W2, 1
	177 Move W1, W23
	178 Move X3, X19
	179 Call SpriteAsset.SearchForSpriteByHashCodeInternal, X0, X1, X2, X3
	180 Move W8, [X19]
	181 Add W31, W8, 1
	182 Move X21, X0
	183 Move X8, [X27]
	184 Move X8, [X8+184]
	185 Move X0, [X8]
	186 Compare X0, 0
	187 JumpIfEqual {244}
	188 Move X8, 0x44F000
	189 Move X8, [X8+1656]
	190 Move X1, [X8]
	191 Call HashSet`1<Int32>.Clear, X0
	192 Compare X20, 0
	193 JumpIfEqual {244}
	194 Move W23, [X20+96]
	195 Move X0, X21
	196 Move W1, W23
	197 Call SpriteAsset.GetSpriteIndexFromUnicode, X0, X1
	198 Add W31, W0, 1
	199 Move [X19], W0
	200 Move X8, [X27]
	201 Move X8, [X8+184]
	202 Move X0, [X8]
	203 Compare X0, 0
	204 JumpIfEqual {244}
	205 Move X2, [X28]
	206 Move W1, W24
	207 Call HashSet`1<Int32>.Add, X0, X1
	208 Move TEMP, X22
	209 And TEMP, TEMP, 1
	210 Compare TEMP, 1
	211 JumpIfNotEqual {61}
	212 Move X0, [X21+208]
	213 Compare X0, 0
	214 JumpIfEqual {223}
	215 Move W8, [X0+24]
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Move W2, 1
	218 Move W1, W23
	219 Move X3, X19
	220 Call SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	221 Move W8, [X19]
	222 Add W31, W8, 1
	223 Move X0, [X26]
	224 Move X21, [X20+72]
	225 Move W8, [X0+224]
	226 Compare W8, 0
	227 JumpIfNotEqual {229}
	228 Call 0x1C17DFC
	229 Move X0, X21
	230 Move X1, X31
	231 Move X2, X31
	232 Call Object.op_Inequality, X0, X1
	233 Move TEMP, X0
	234 And TEMP, TEMP, 1
	235 Compare TEMP, 1
	236 JumpIfNotEqual {61}
	237 Move X0, [X20+72]
	238 Move W2, 1
	239 Move W1, W23
	240 Move X3, X19
	241 Call SpriteAsset.SearchForSpriteByUnicodeInternal, X0, X1, X2, X3
	242 Move W8, [X19]
	243 Add W31, W8, 1
	244 Call 0x1C17F20

Method: UnityEngine.TextCore.Text.SpriteAsset SearchForSpriteByHashCodeInternal(System.Collections.Generic.List`1<UnityEngine.TextCore.Text.SpriteAsset> spriteAssets, System.Int32 hashCode, System.Boolean searchFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03CAD0C4 MOV X21, X0
	0x03CAD0C8 CBZ X0, 0x3CAD0E0
	0x03CAD0CC LDR X8, [X20]
	0x03CAD0D0 MOV X0, X21
	0x03CAD0D4 LDR X1, [X8 + 0x40]
	0x03CAD0D8 BL 0x1C16E00
	0x03CAD0DC CBZ X0, 0x3CAE044
	0x03CAD0E0 LDR W8, [X22]
	0x03CAD0E4 CMP W8, 0x15
	0x03CAD0E8 B.LS 0x3CAE040
	0x03CAD0EC ADRP X24, 0x4B4000
	0x03CAD0F0 LDR X24, [X24 + 0x7E8]
	0x03CAD0F4 STR X21, [X20 + 0xC8]
	0x03CAD0F8 LDR X0, [X24]
	0x03CAD0FC CBZ X0, 0x3CAD114
	0x03CAD100 LDR X8, [X20]
	0x03CAD104 LDR X1, [X8 + 0x40]
	0x03CAD108 BL 0x1C16E00
	0x03CAD10C CBZ X0, 0x3CAE044
	0x03CAD110 LDR W8, [X22]
	0x03CAD114 CMP W8, 0x16
	0x03CAD118 B.LS 0x3CAE040
	0x03CAD11C LDR X8, [X24]
	0x03CAD120 ADRP X24, 0x446000
	0x03CAD124 LDR X24, [X24 + 0xB58]
	0x03CAD128 ADD X1, X31, 0x184
	0x03CAD12C STR X8, [X20 + 0xD0]
	0x03CAD130 LDRB W8, [X19 + 0x44]
	0x03CAD134 LDR X0, [X24]
	0x03CAD138 STRB W8, [X31 + 0x184]
	0x03CAD13C BL 0x1C16E04
	0x03CAD140 MOV X21, X0
	0x03CAD144 CBZ X0, 0x3CAD15C
	0x03CAD148 LDR X8, [X20]
	0x03CAD14C MOV X0, X21
	0x03CAD150 LDR X1, [X8 + 0x40]
	0x03CAD154 BL 0x1C16E00
	0x03CAD158 CBZ X0, 0x3CAE044
	0x03CAD15C LDR W8, [X22]
	0x03CAD160 CMP W8, 0x17
	0x03CAD164 B.LS 0x3CAE040
	0x03CAD168 ADRP X25, 0x4B4000
	0x03CAD16C LDR X25, [X25 + 0x8A8]
	0x03CAD170 STR X21, [X20 + 0xD8]
	0x03CAD174 LDR X0, [X25]
	0x03CAD178 CBZ X0, 0x3CAD190
	0x03CAD17C LDR X8, [X20]
	0x03CAD180 LDR X1, [X8 + 0x40]
	0x03CAD184 BL 0x1C16E00
	0x03CAD188 CBZ X0, 0x3CAE044
	0x03CAD18C LDR W8, [X22]
	0x03CAD190 CMP W8, 0x18
	0x03CAD194 B.LS 0x3CAE040
	0x03CAD198 LDR X8, [X25]
	0x03CAD19C ADRP X25, 0x446000
	0x03CAD1A0 LDR X25, [X25 + 0xA90]
	0x03CAD1A4 ADD X1, X31, 0x180
	0x03CAD1A8 STR X8, [X20 + 0xE0]
	0x03CAD1AC LDR V0, [X19 + 0x48]
	0x03CAD1B0 LDR X0, [X25]
	0x03CAD1B4 STR S0, [X31 + 0x180]
	0x03CAD1B8 BL 0x1C16E04
	0x03CAD1BC MOV X21, X0
	0x03CAD1C0 CBZ X0, 0x3CAD1D8
	0x03CAD1C4 LDR X8, [X20]
	0x03CAD1C8 MOV X0, X21
	0x03CAD1CC LDR X1, [X8 + 0x40]
	0x03CAD1D0 BL 0x1C16E00
	0x03CAD1D4 CBZ X0, 0x3CAE044
	0x03CAD1D8 LDR W8, [X22]
	0x03CAD1DC CMP W8, 0x19
	0x03CAD1E0 B.LS 0x3CAE040
	0x03CAD1E4 ADRP X26, 0x4B4000
	0x03CAD1E8 LDR X26, [X26 + 0x7F0]
	0x03CAD1EC STR X21, [X20 + 0xE8]
	0x03CAD1F0 LDR X0, [X26]
	0x03CAD1F4 CBZ X0, 0x3CAD20C
	0x03CAD1F8 LDR X8, [X20]
	0x03CAD1FC LDR X1, [X8 + 0x40]
	0x03CAD200 BL 0x1C16E00
	0x03CAD204 CBZ X0, 0x3CAE044
	0x03CAD208 LDR W8, [X22]
	0x03CAD20C CMP W8, 0x1A
	0x03CAD210 B.LS 0x3CAE040
	0x03CAD214 LDR X8, [X26]
	0x03CAD218 ADD X1, X31, 0x17C
	0x03CAD21C STR X8, [X20 + 0xF0]
	0x03CAD220 LDR W8, [X19 + 0x4C]
	0x03CAD224 LDR X0, [X23]
	0x03CAD228 STR W8, [X31 + 0x17C]
	0x03CAD22C BL 0x1C16E04
	0x03CAD230 MOV X21, X0
	0x03CAD234 CBZ X0, 0x3CAD24C
	0x03CAD238 LDR X8, [X20]
	0x03CAD23C MOV X0, X21
	0x03CAD240 LDR X1, [X8 + 0x40]
	0x03CAD244 BL 0x1C16E00
	0x03CAD248 CBZ X0, 0x3CAE044
	0x03CAD24C LDR W8, [X22]
	0x03CAD250 CMP W8, 0x1B
	0x03CAD254 B.LS 0x3CAE040
	0x03CAD258 ADRP X26, 0x4B4000
	0x03CAD25C LDR X26, [X26 + 0x8D0]
	0x03CAD260 STR X21, [X20 + 0xF8]
	0x03CAD264 LDR X0, [X26]
	0x03CAD268 CBZ X0, 0x3CAD280

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x73B000
	013 Move W8, [X22+811]
	014 Move X19, X3
	015 Move W23, W2
	016 Move W20, W1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0x449000
	023 Move X0, [X0+2520]
	024 Call 0x1C17CF4
	025 Move X0, 0x4B5000
	026 Move X0, [X0+1544]
	027 Call 0x1C17CF4
	028 Move X0, 0x4B5000
	029 Move X0, [X0+1552]
	030 Call 0x1C17CF4
	031 Move X0, 0x447000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0x4B5000
	035 Move X0, [X0+1864]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X22+811], W8
	039 Compare X21, 0
	040 JumpIfEqual {134}
	041 Move W8, [X21+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X25, 0x4B5000
	044 Move X26, 0x447000
	045 Move X27, 0x4B5000
	046 Move X28, 0x449000
	047 Move X25, [X25+1552]
	048 Move X26, [X26+1432]
	049 Move X27, [X27+1864]
	050 Move X28, [X28+2520]
	051 Move W22, W31
	052 And W23, W23, 1
	053 Move X2, [X25]
	054 Move X0, X21
	055 Move W1, W22
	056 Call List`1<Object>.get_Item, X0, X1
	057 Move X8, [X26]
	058 Move X24, X0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X24
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Equality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {113}
	072 Compare X24, 0
	073 JumpIfEqual {134}
	074 Move W1, [X24+32]
	075 Compare W1, 0
	076 JumpIfNotEqual {82}
	077 Move X0, X24
	078 Move X1, X31
	079 Call Object.GetInstanceID, X0
	080 Move W1, W0
	081 Move [X24+32], W0
	082 Move X8, [X27]
	083 Move X8, [X8+184]
	084 Move X0, [X8]
	085 Compare X0, 0
	086 JumpIfEqual {134}
	087 Move X2, [X28]
	088 Call HashSet`1<Int32>.Add, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {113}
	093 Move X0, X24
	094 Move W1, W20
	095 Move W2, W23
	096 Move X3, X19
	097 Call SpriteAsset.SearchForSpriteByHashCodeInternal, X0, X1, X2, X3
	098 Move X8, [X26]
	099 Move X24, X0
	100 Move W9, [X8+224]
	101 Compare W9, 0
	102 JumpIfNotEqual {105}
	103 Move X0, X8
	104 Call 0x1C17DFC
	105 Move X0, X24
	106 Move X1, X31
	107 Move X2, X31
	108 Call Object.op_Inequality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {121}
	113 Move W8, [X21+24]
	114 Add W22, W22, 1
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X24, X31
	117 Move TEMP, 0
	118 Not TEMP
	119 Move W8, TEMP
	120 Move [X19], W8
	121 Move X0, X24
	122 Move X20, [X31+80]
	123 Move X19, [X31+88]
	124 Move X22, [X31+64]
	125 Move X21, [X31+72]
	126 Move X24, [X31+48]
	127 Move X23, [X31+56]
	128 Move X26, [X31+32]
	129 Move X25, [X31+40]
	130 Move X28, [X31+16]
	131 Move X27, [X31+24]
	132 Move X30, [X31+96]
	133 Return X0
	134 Call 0x1C17F20

Method: UnityEngine.TextCore.Text.SpriteAsset SearchForSpriteByHashCodeInternal(UnityEngine.TextCore.Text.SpriteAsset spriteAsset, System.Int32 hashCode, System.Boolean searchFallbacks, out System.Int32 spriteIndex)

Disassembly:
	0x03CAD26C LDR X8, [X20]
	0x03CAD270 LDR X1, [X8 + 0x40]
	0x03CAD274 BL 0x1C16E00
	0x03CAD278 CBZ X0, 0x3CAE044
	0x03CAD27C LDR W8, [X22]
	0x03CAD280 CMP W8, 0x1C
	0x03CAD284 B.LS 0x3CAE040
	0x03CAD288 LDR X8, [X26]
	0x03CAD28C ADD X1, X31, 0x178
	0x03CAD290 STR X8, [X20 + 0x100]
	0x03CAD294 LDR W8, [X19 + 0x50]
	0x03CAD298 LDR X0, [X23]
	0x03CAD29C STR W8, [X31 + 0x178]
	0x03CAD2A0 BL 0x1C16E04
	0x03CAD2A4 MOV X21, X0
	0x03CAD2A8 CBZ X0, 0x3CAD2C0
	0x03CAD2AC LDR X8, [X20]
	0x03CAD2B0 MOV X0, X21
	0x03CAD2B4 LDR X1, [X8 + 0x40]
	0x03CAD2B8 BL 0x1C16E00
	0x03CAD2BC CBZ X0, 0x3CAE044
	0x03CAD2C0 LDR W8, [X22]
	0x03CAD2C4 CMP W8, 0x1D
	0x03CAD2C8 B.LS 0x3CAE040
	0x03CAD2CC ADRP X26, 0x4B4000
	0x03CAD2D0 LDR X26, [X26 + 0x8D8]
	0x03CAD2D4 STR X21, [X20 + 0x108]
	0x03CAD2D8 LDR X0, [X26]
	0x03CAD2DC CBZ X0, 0x3CAD2F4
	0x03CAD2E0 LDR X8, [X20]
	0x03CAD2E4 LDR X1, [X8 + 0x40]
	0x03CAD2E8 BL 0x1C16E00
	0x03CAD2EC CBZ X0, 0x3CAE044
	0x03CAD2F0 LDR W8, [X22]
	0x03CAD2F4 CMP W8, 0x1E
	0x03CAD2F8 B.LS 0x3CAE040
	0x03CAD2FC LDR X8, [X26]
	0x03CAD300 ADD X1, X31, 0x174
	0x03CAD304 STR X8, [X20 + 0x110]
	0x03CAD308 LDR W8, [X19 + 0x54]
	0x03CAD30C LDR X0, [X23]
	0x03CAD310 STR W8, [X31 + 0x174]
	0x03CAD314 BL 0x1C16E04
	0x03CAD318 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x73B000
	008 Move W8, [X23+812]
	009 Move X19, X3
	010 Move W22, W2
	011 Move W20, W1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x4B5000
	018 Move X0, [X0+1544]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+812], W8
	022 Compare X21, 0
	023 JumpIfEqual {62}
	024 Move X0, X21
	025 Move W1, W20
	026 Call SpriteAsset.GetSpriteIndexFromHashcode, X0, X1
	027 Add W31, W0, 1
	028 Move [X19], W0
	029 Move TEMP, X22
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {49}
	033 Move X0, [X21+208]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move W8, [X0+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W1, W20
	039 Move X3, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move W2, 1
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Call SpriteAsset.SearchForSpriteByHashCodeInternal, X0, X1, X2, X3
	048 Return X0
	049 Move X21, X31
	050 Move TEMP, 0
	051 Not TEMP
	052 Move W8, TEMP
	053 Move [X19], W8
	054 Move X0, X21
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0
	062 Call 0x1C17F20

Method: System.Void SortGlyphTable()

Disassembly:
	0x03CAD31C CBZ X0, 0x3CAD334
	0x03CAD320 LDR X8, [X20]
	0x03CAD324 MOV X0, X21
	0x03CAD328 LDR X1, [X8 + 0x40]
	0x03CAD32C BL 0x1C16E00
	0x03CAD330 CBZ X0, 0x3CAE044
	0x03CAD334 LDR W8, [X22]
	0x03CAD338 CMP W8, 0x1F
	0x03CAD33C B.LS 0x3CAE040
	0x03CAD340 ADRP X26, 0x4B4000
	0x03CAD344 LDR X26, [X26 + 0x8C8]
	0x03CAD348 STR X21, [X20 + 0x118]
	0x03CAD34C LDR X0, [X26]
	0x03CAD350 CBZ X0, 0x3CAD368
	0x03CAD354 LDR X8, [X20]
	0x03CAD358 LDR X1, [X8 + 0x40]
	0x03CAD35C BL 0x1C16E00
	0x03CAD360 CBZ X0, 0x3CAE044
	0x03CAD364 LDR W8, [X22]
	0x03CAD368 CMP W8, 0x20
	0x03CAD36C B.LS 0x3CAE040
	0x03CAD370 LDR X8, [X26]
	0x03CAD374 ADRP X27, 0x4B4000
	0x03CAD378 LDR X27, [X27 + 0x7D8]
	0x03CAD37C ADD X26, X31, 0xB0
	0x03CAD380 STR X8, [X20 + 0x120]
	0x03CAD384 LDR X8, [X19 + 0x78]
	0x03CAD388 LDUR V0, [X19 + 0x68]
	0x03CAD38C LDUR V1, [X19 + 0x58]
	0x03CAD390 LDR X0, [X27]
	0x03CAD394 ADD X1, X31, 0x140
	0x03CAD398 STR X8, [X31 + 0x160]
	0x03CAD39C STP V1, V0, [X26 + 0x90]
	0x03CAD3A0 BL 0x1C16E04
	0x03CAD3A4 MOV X21, X0
	0x03CAD3A8 CBZ X0, 0x3CAD3C0
	0x03CAD3AC LDR X8, [X20]
	0x03CAD3B0 MOV X0, X21
	0x03CAD3B4 LDR X1, [X8 + 0x40]
	0x03CAD3B8 BL 0x1C16E00
	0x03CAD3BC CBZ X0, 0x3CAE044
	0x03CAD3C0 LDR W8, [X22]
	0x03CAD3C4 CMP W8, 0x21
	0x03CAD3C8 B.LS 0x3CAE040
	0x03CAD3CC ADRP X28, 0x4B4000
	0x03CAD3D0 LDR X28, [X28 + 0x848]
	0x03CAD3D4 STR X21, [X20 + 0x128]
	0x03CAD3D8 LDR X0, [X28]
	0x03CAD3DC CBZ X0, 0x3CAD3F4
	0x03CAD3E0 LDR X8, [X20]
	0x03CAD3E4 LDR X1, [X8 + 0x40]
	0x03CAD3E8 BL 0x1C16E00
	0x03CAD3EC CBZ X0, 0x3CAE044
	0x03CAD3F0 LDR W8, [X22]
	0x03CAD3F4 CMP W8, 0x22
	0x03CAD3F8 B.LS 0x3CAE040
	0x03CAD3FC LDR X8, [X28]
	0x03CAD400 ADD X1, X31, 0x110
	0x03CAD404 STR X8, [X20 + 0x130]
	0x03CAD408 LDR X8, [X19 + 0xA0]
	0x03CAD40C LDP V1, V0, [X19 + 0x80]
	0x03CAD410 LDR X0, [X27]
	0x03CAD414 STR X8, [X31 + 0x130]
	0x03CAD418 STP V1, V0, [X26 + 0x60]
	0x03CAD41C BL 0x1C16E04
	0x03CAD420 MOV X21, X0
	0x03CAD424 CBZ X0, 0x3CAD43C
	0x03CAD428 LDR X8, [X20]
	0x03CAD42C MOV X0, X21
	0x03CAD430 LDR X1, [X8 + 0x40]
	0x03CAD434 BL 0x1C16E00
	0x03CAD438 CBZ X0, 0x3CAE044
	0x03CAD43C LDR W8, [X22]
	0x03CAD440 CMP W8, 0x23
	0x03CAD444 B.LS 0x3CAE040
	0x03CAD448 ADRP X28, 0x4B4000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x73B000
	008 Move W8, [X20+813]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x4B5000
	015 Move X0, [X0+1872]
	016 Call 0x1C17CF4
	017 Move X0, 0x4B5000
	018 Move X0, [X0+1880]
	019 Call 0x1C17CF4
	020 Move X0, 0x4B5000
	021 Move X0, [X0+1888]
	022 Call 0x1C17CF4
	023 Move X0, 0x4B5000
	024 Move X0, [X0+1832]
	025 Call 0x1C17CF4
	026 Move X0, 0x4B5000
	027 Move X0, [X0+1896]
	028 Call 0x1C17CF4
	029 Move X0, 0x4B5000
	030 Move X0, [X0+1904]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+813], W8
	034 Move X20, [X19+192]
	035 Compare X20, 0
	036 JumpIfEqual {84}
	037 Move W8, [X20+24]
	038 Compare W8, 0
	039 JumpIfEqual {84}
	040 Move X23, 0x4B5000
	041 Move X23, [X23+1904]
	042 Move X0, [X23]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X23]
	048 Move X8, [X0+184]
	049 Move X21, [X8+8]
	050 Compare X21, 0
	051 JumpIfNotEqual {73}
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {57}
	055 Call 0x1C17DFC
	056 Move X0, [X23]
	057 Move X9, 0x4B5000
	058 Move X8, [X0+184]
	059 Move X9, [X9+1888]
	060 Move X22, [X8]
	061 Move X0, [X9]
	062 Call 0x1C17F10
	063 Move X8, 0x4B5000
	064 Move X8, [X8+1896]
	065 Move X1, X22
	066 Move X3, X31
	067 Move X21, X0
	068 Move X2, [X8]
	069 Call Func`2<Object, UInt32>..ctor, X0, X1, X2
	070 Move X8, [X23]
	071 Move X8, [X8+184]
	072 Move [X8+8], X21
	073 Move X8, 0x4B5000
	074 Move X8, [X8+1872]
	075 Move X0, X20
	076 Move X1, X21
	077 Move X2, [X8]
	078 Call Enumerable.OrderBy, X0, X1
	079 Move X8, 0x4B5000
	080 Move X8, [X8+1880]
	081 Move X1, [X8]
	082 Call Enumerable.ToList, X0
	083 Move [X19+192], X0
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Move X23, [X31+56]
	090 Return 

Method: System.Void SortCharacterTable()

Disassembly:
	0x03CAD44C LDR X28, [X28 + 0x818]
	0x03CAD450 STR X21, [X20 + 0x138]
	0x03CAD454 LDR X0, [X28]
	0x03CAD458 CBZ X0, 0x3CAD470
	0x03CAD45C LDR X8, [X20]
	0x03CAD460 LDR X1, [X8 + 0x40]
	0x03CAD464 BL 0x1C16E00
	0x03CAD468 CBZ X0, 0x3CAE044
	0x03CAD46C LDR W8, [X22]
	0x03CAD470 CMP W8, 0x24
	0x03CAD474 B.LS 0x3CAE040
	0x03CAD478 LDR X8, [X28]
	0x03CAD47C ADD X1, X31, 0xE0
	0x03CAD480 STR X8, [X20 + 0x140]
	0x03CAD484 LDR X8, [X19 + 0xC8]
	0x03CAD488 LDUR V0, [X19 + 0xB8]
	0x03CAD48C LDUR V1, [X19 + 0xA8]
	0x03CAD490 LDR X0, [X27]
	0x03CAD494 STR X8, [X31 + 0x100]
	0x03CAD498 STP V1, V0, [X26 + 0x30]
	0x03CAD49C BL 0x1C16E04
	0x03CAD4A0 MOV X21, X0
	0x03CAD4A4 CBZ X0, 0x3CAD4BC
	0x03CAD4A8 LDR X8, [X20]
	0x03CAD4AC MOV X0, X21
	0x03CAD4B0 LDR X1, [X8 + 0x40]
	0x03CAD4B4 BL 0x1C16E00
	0x03CAD4B8 CBZ X0, 0x3CAE044
	0x03CAD4BC LDR W8, [X22]
	0x03CAD4C0 CMP W8, 0x25
	0x03CAD4C4 B.LS 0x3CAE040
	0x03CAD4C8 ADRP X28, 0x4B4000
	0x03CAD4CC LDR X28, [X28 + 0x858]
	0x03CAD4D0 STR X21, [X20 + 0x148]
	0x03CAD4D4 LDR X0, [X28]
	0x03CAD4D8 CBZ X0, 0x3CAD4F0
	0x03CAD4DC LDR X8, [X20]
	0x03CAD4E0 LDR X1, [X8 + 0x40]
	0x03CAD4E4 BL 0x1C16E00
	0x03CAD4E8 CBZ X0, 0x3CAE044
	0x03CAD4EC LDR W8, [X22]
	0x03CAD4F0 CMP W8, 0x26
	0x03CAD4F4 B.LS 0x3CAE040
	0x03CAD4F8 LDR X8, [X28]
	0x03CAD4FC ADD X1, X31, 0xB0
	0x03CAD500 STR X8, [X20 + 0x150]
	0x03CAD504 LDR X8, [X19 + 0xF0]
	0x03CAD508 LDP V1, V0, [X19 + 0xD0]
	0x03CAD50C LDR X0, [X27]
	0x03CAD510 STR X8, [X31 + 0xD0]
	0x03CAD514 STP V1, V0, [X26]
	0x03CAD518 BL 0x1C16E04
	0x03CAD51C MOV X21, X0
	0x03CAD520 CBZ X0, 0x3CAD538
	0x03CAD524 LDR X8, [X20]
	0x03CAD528 MOV X0, X21
	0x03CAD52C LDR X1, [X8 + 0x40]
	0x03CAD530 BL 0x1C16E00
	0x03CAD534 CBZ X0, 0x3CAE044
	0x03CAD538 LDR W8, [X22]
	0x03CAD53C CMP W8, 0x27
	0x03CAD540 B.LS 0x3CAE040
	0x03CAD544 ADRP X26, 0x4B4000
	0x03CAD548 LDR X26, [X26 + 0x888]
	0x03CAD54C STR X21, [X20 + 0x158]
	0x03CAD550 LDR X0, [X26]
	0x03CAD554 CBZ X0, 0x3CAD56C
	0x03CAD558 LDR X8, [X20]
	0x03CAD55C LDR X1, [X8 + 0x40]
	0x03CAD560 BL 0x1C16E00
	0x03CAD564 CBZ X0, 0x3CAE044
	0x03CAD568 LDR W8, [X22]
	0x03CAD56C CMP W8, 0x28
	0x03CAD570 B.LS 0x3CAE040
	0x03CAD574 LDR X8, [X26]
	0x03CAD578 ADRP X26, 0x446000
	0x03CAD57C LDR X26, [X26 + 0x5A0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x73B000
	008 Move W8, [X20+814]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x4B5000
	015 Move X0, [X0+1912]
	016 Call 0x1C17CF4
	017 Move X0, 0x4B5000
	018 Move X0, [X0+1920]
	019 Call 0x1C17CF4
	020 Move X0, 0x4B5000
	021 Move X0, [X0+1928]
	022 Call 0x1C17CF4
	023 Move X0, 0x4B5000
	024 Move X0, [X0+1840]
	025 Call 0x1C17CF4
	026 Move X0, 0x4B5000
	027 Move X0, [X0+1936]
	028 Call 0x1C17CF4
	029 Move X0, 0x4B5000
	030 Move X0, [X0+1904]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+814], W8
	034 Move X20, [X19+176]
	035 Compare X20, 0
	036 JumpIfEqual {83}
	037 Move W8, [X20+24]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X23, 0x4B5000
	040 Move X23, [X23+1904]
	041 Move X0, [X23]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X23]
	047 Move X8, [X0+184]
	048 Move X21, [X8+16]
	049 Compare X21, 0
	050 JumpIfNotEqual {72}
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X23]
	056 Move X9, 0x4B5000
	057 Move X8, [X0+184]
	058 Move X9, [X9+1928]
	059 Move X22, [X8]
	060 Move X0, [X9]
	061 Call 0x1C17F10
	062 Move X8, 0x4B5000
	063 Move X8, [X8+1936]
	064 Move X1, X22
	065 Move X3, X31
	066 Move X21, X0
	067 Move X2, [X8]
	068 Call Func`2<Object, UInt32>..ctor, X0, X1, X2
	069 Move X8, [X23]
	070 Move X8, [X8+184]
	071 Move [X8+16], X21
	072 Move X8, 0x4B5000
	073 Move X8, [X8+1912]
	074 Move X0, X20
	075 Move X1, X21
	076 Move X2, [X8]
	077 Call Enumerable.OrderBy, X0, X1
	078 Move X8, 0x4B5000
	079 Move X8, [X8+1920]
	080 Move X1, [X8]
	081 Call Enumerable.ToList, X0
	082 Move [X19+176], X0
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X30, [X31+48]
	088 Move X23, [X31+56]
	089 Return 

Method: System.Void SortGlyphAndCharacterTables()

Disassembly:
	0x03CAD580 ADD X1, X31, 0xA0
	0x03CAD584 STR X8, [X20 + 0x160]
	0x03CAD588 LDR W8, [X19 + 0x100]
	0x03CAD58C LDR X9, [X19 + 0xF8]
	0x03CAD590 LDR X0, [X26]
	0x03CAD594 STR W8, [X31 + 0xA8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call SpriteAsset.SortGlyphTable, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Call SpriteAsset.SortCharacterTable, X0
	009 Return 

Method: System.Void .ctor()

Disassembly:
	0x03CAD598 STR X9, [X31 + 0xA0]
	0x03CAD59C BL 0x1C16E04
	0x03CAD5A0 MOV X21, X0
	0x03CAD5A4 CBZ X0, 0x3CAD5BC
	0x03CAD5A8 LDR X8, [X20]
	0x03CAD5AC MOV X0, X21
	0x03CAD5B0 LDR X1, [X8 + 0x40]
	0x03CAD5B4 BL 0x1C16E00
	0x03CAD5B8 CBZ X0, 0x3CAE044
	0x03CAD5BC LDR W8, [X22]
	0x03CAD5C0 CMP W8, 0x29
	0x03CAD5C4 B.LS 0x3CAE040
	0x03CAD5C8 ADRP X27, 0x4B4000
	0x03CAD5CC LDR X27, [X27 + 0x7F8]
	0x03CAD5D0 STR X21, [X20 + 0x168]
	0x03CAD5D4 LDR X0, [X27]
	0x03CAD5D8 CBZ X0, 0x3CAD5F0
	0x03CAD5DC LDR X8, [X20]
	0x03CAD5E0 LDR X1, [X8 + 0x40]
	0x03CAD5E4 BL 0x1C16E00
	0x03CAD5E8 CBZ X0, 0x3CAE044
	0x03CAD5EC LDR W8, [X22]
	0x03CAD5F0 CMP W8, 0x2A
	0x03CAD5F4 B.LS 0x3CAE040
	0x03CAD5F8 LDR X8, [X27]
	0x03CAD5FC ADD X9, X19, 0x104
	0x03CAD600 ADD X1, X31, 0x90
	0x03CAD604 STR X8, [X20 + 0x170]
	0x03CAD608 LDR W8, [X9 + 0x8]
	0x03CAD60C LDR X9, [X9]
	0x03CAD610 LDR X0, [X26]
	0x03CAD614 STR W8, [X31 + 0x98]
	0x03CAD618 STR X9, [X31 + 0x90]
	0x03CAD61C BL 0x1C16E04
	0x03CAD620 MOV X21, X0
	0x03CAD624 CBZ X0, 0x3CAD63C
	0x03CAD628 LDR X8, [X20]
	0x03CAD62C MOV X0, X21
	0x03CAD630 LDR X1, [X8 + 0x40]
	0x03CAD634 BL 0x1C16E00
	0x03CAD638 CBZ X0, 0x3CAE044
	0x03CAD63C LDR W8, [X22]
	0x03CAD640 CMP W8, 0x2B
	0x03CAD644 B.LS 0x3CAE040
	0x03CAD648 ADRP X27, 0x4B4000
	0x03CAD64C LDR X27, [X27 + 0x8A0]
	0x03CAD650 STR X21, [X20 + 0x178]
	0x03CAD654 LDR X0, [X27]
	0x03CAD658 CBZ X0, 0x3CAD670
	0x03CAD65C LDR X8, [X20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x73B000
	009 Move X24, 0x4B5000
	010 Move X20, 0x4B5000
	011 Move X22, 0x4B5000
	012 Move X21, 0x4B5000
	013 Move W8, [X23+815]
	014 Move X24, [X24+1944]
	015 Move X20, [X20+1952]
	016 Move X22, [X22+1960]
	017 Move X21, [X21+1968]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x4B5000
	024 Move X0, [X0+1968]
	025 Call 0x1C17CF4
	026 Move X0, 0x4B5000
	027 Move X0, [X0+1952]
	028 Call 0x1C17CF4
	029 Move X0, 0x4B5000
	030 Move X0, [X0+1960]
	031 Call 0x1C17CF4
	032 Move X0, 0x4B5000
	033 Move X0, [X0+1944]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X23+815], W8
	037 Move X0, [X24]
	038 Call 0x1C17F10
	039 Move X1, [X20]
	040 Move X20, X0
	041 Call List`1<Object>..ctor, X0
	042 Move [X19+176], X20
	043 Move X0, [X22]
	044 Call 0x1C17F10
	045 Move X1, [X21]
	046 Move X20, X0
	047 Call List`1<Object>..ctor, X0
	048 Move [X19+192], X20
	049 Move [X19+216], W31
	050 Move X0, X19
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Move X22, [X31+32]
	054 Move X21, [X31+40]
	055 Move X24, [X31+16]
	056 Move X23, [X31+24]
	057 Move X1, X31
	058 Move X30, [X31+64]
	059 Call ScriptableObject..ctor, X0
	060 Return 

