Type: UnityEngine.TextCore.Text.TextHandle

Method: System.Void .ctor()

Disassembly:
	0x03CCA86C LDR X0, [X0 + 0xDD8]
	0x03CCA870 BL 0x1C16CF4
	0x03CCA874 MOVZ W8, 0x1
	0x03CCA878 STRB W8, [X21 + 0x377]
	0x03CCA87C TBZ X20, 0x0, 0x3CCA890
	0x03CCA880 LDR X8, [X19 + 0x28]
	0x03CCA884 CBZ X8, 0x3CCAAA4
	0x03CCA888 LDR V0, [X8 + 0x24]
	0x03CCA88C FSUB S9, S0, S9
	0x03CCA890 MOV X0, X19
	0x03CCA894 BL 0x3CC98D0
	0x03CCA898 CBZ X0, 0x3CCAAA4
	0x03CCA89C MOV X20, X31
	0x03CCA8A0 MOVZ W26, 0x188
	0x03CCA8A4 MOVZ X27, 0x1
	0x03CCA8A8 LDRSW X8, [X0 + 0x20]
	0x03CCA8AC CMP X20, X8
	0x03CCA8B0 B.GE 0x3CCAAA8
	0x03CCA8B4 MOV X0, X19
	0x03CCA8B8 BL 0x3CC98D0
	0x03CCA8BC CBZ X0, 0x3CCAAA4
	0x03CCA8C0 LDR X8, [X0 + 0x40]
	0x03CCA8C4 CBZ X8, 0x3CCAAA4
	0x03CCA8C8 LDR W9, [X8 + 0x18]
	0x03CCA8CC CMP X20, X9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x71E000
	006 Move X20, 0x498000
	007 Move W8, [X21+883]
	008 Move X20, [X20+2312]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x498000
	015 Move X0, [X0+2312]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+883], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Call 0x1C17F10
	024 Move X1, X31
	025 Move X20, X0
	026 Call TextGenerationSettings..ctor, X0
	027 Move [X19+40], X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 

Method: UnityEngine.TextCore.Text.TextInfo get_textInfo()

Disassembly:
	0x03CCA8D0 B.CS 0x3CCAAE0
	0x03CCA8D4 MOVZ W9, 0x30
	0x03CCA8D8 MADD X8, X20, X9, X8
	0x03CCA8DC ADRP X9, 0x70E000
	0x03CCA8E0 LDRB W9, [X9 + 0x783]
	0x03CCA8E4 LDP W28, W21, [X8 + 0x2C]
	0x03CCA8E8 CBNZ W9, 0x3CCA904
	0x03CCA8EC ADRP X0, 0x429000
	0x03CCA8F0 LDR X0, [X0 + 0x5A0]
	0x03CCA8F4 BL 0x1C16CF4
	0x03CCA8F8 ADRP X8, 0x70E000
	0x03CCA8FC MOVZ W9, 0x1
	0x03CCA900 STRB W9, [X8 + 0x783]
	0x03CCA904 CMP W21, 0x1
	0x03CCA908 B.LT 0x3CCAA94
	0x03CCA90C ADRP X8, 0x429000
	0x03CCA910 LDR X8, [X8 + 0x5A0]
	0x03CCA914 MOV W24, W31
	0x03CCA918 SUB W25, W21, 0x1
	0x03CCA91C UBFM X23, X28, 0x20, 0x1F
	0x03CCA920 LDR X8, [X8]
	0x03CCA924 MOV X29, X21
	0x03CCA928 LDR X8, [X8 + 0xB8]
	0x03CCA92C LDP S8, S13, [X8 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x71E000
	005 Move W8, [X20+884]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x498000
	012 Move X0, [X0+2920]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+884], W8
	016 Move X20, [X19+24]
	017 Compare X20, 0
	018 JumpIfNotEqual {26}
	019 Move X8, 0x498000
	020 Move X8, [X8+2920]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X20, X0
	024 Call TextInfo..ctor, X0
	025 Move [X19+24], X20
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return X0

Method: UnityEngine.TextCore.Text.TextInfo get_layoutTextInfo()

Disassembly:
	0x03CCAA68 STR S12, [X31]
	0x03CCAA6C BL 0x3CCA698
	0x03CCAA70 MOV W24, W31
	0x03CCAA74 MOV V15.16B, V11.16B
	0x03CCAA78 TBNZ X0, 0x0, 0x3CCAAAC
	0x03CCAA7C SUB X25, X25, 0x1
	0x03CCAA80 ADD X23, X23, X27
	0x03CCAA84 SUBS X29, X29, 0x1
	0x03CCAA88 ADD X28, X28, 0x1
	0x03CCAA8C MOV V11.16B, V15.16B
	0x03CCAA90 B.NE 0x3CCA93C
	0x03CCAA94 MOV X0, X19
	0x03CCAA98 ADD X20, X20, 0x1
	0x03CCAA9C BL 0x3CC98D0
	0x03CCAAA0 CBNZ X0, 0x3CCA8A8
	0x03CCAAA4 BL 0x1C16F20
	0x03CCAAA8 MOVN W20, 0x0
	0x03CCAAAC MOV W0, W20
	0x03CCAAB0 LDP X20, X19, [X31 + 0xD0]
	0x03CCAAB4 LDP X22, X21, [X31 + 0xC0]
	0x03CCAAB8 LDP X24, X23, [X31 + 0xB0]
	0x03CCAABC LDP X26, X25, [X31 + 0xA0]
	0x03CCAAC0 LDP X28, X27, [X31 + 0x90]
	0x03CCAAC4 LDP X29, X30, [X31 + 0x80]
	0x03CCAAC8 LDP D9, D8, [X31 + 0x70]
	0x03CCAACC LDP D11, D10, [X31 + 0x60]
	0x03CCAAD0 LDP D13, D12, [X31 + 0x50]
	0x03CCAAD4 LDP D15, D14, [X31 + 0x40]
	0x03CCAAD8 ADD X31, X31, 0xE0
	0x03CCAADC RET
	0x03CCAAE0 BL 0x1C16F28
	0x03CCAAE4 STR X30, [X31 - 0x20]!
	0x03CCAAE8 STP X20, X19, [X31 + 0x10]
	0x03CCAAEC CMP W1, 0x1
	0x03CCAAF0 MOV X20, X0
	0x03CCAAF4 B.LT 0x3CCAB30
	0x03CCAAF8 MOV X0, X20
	0x03CCAAFC MOV W19, W1
	0x03CCAB00 BL 0x3CC98D0
	0x03CCAB04 CBZ X0, 0x3CCAB6C
	0x03CCAB08 LDR W8, [X0 + 0x10]
	0x03CCAB0C CMP W8, W19
	0x03CCAB10 B.GT 0x3CCAB34
	0x03CCAB14 MOV X0, X20
	0x03CCAB18 BL 0x3CC98D0
	0x03CCAB1C CBZ X0, 0x3CCAB6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x71E000
	005 Move X20, 0x498000
	006 Move W8, [X19+885]
	007 Move X20, [X20+3544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x498000
	013 Move X0, [X0+3544]
	014 Call 0x1C17CF4
	015 Move X0, 0x498000
	016 Move X0, [X0+2920]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+885], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Move X8, [X0+184]
	027 Move X8, [X8]
	028 Compare X8, 0
	029 JumpIfNotEqual {45}
	030 Move X8, 0x498000
	031 Move X8, [X8+2920]
	032 Move X0, [X8]
	033 Call 0x1C17F10
	034 Move X19, X0
	035 Call TextInfo..ctor, X0
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {42}
	040 Call 0x1C17DFC
	041 Move X0, [X20]
	042 Move X8, [X0+184]
	043 Move [X8], X19
	044 Move X0, [X20]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X20]
	050 Move X8, [X0+184]
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X0, [X8]
	054 Move X30, [X31+32]
	055 Return X0

Method: System.Boolean IsDirty()

Disassembly:
	0x03CCAB20 LDR W8, [X0 + 0x10]
	0x03CCAB24 SUB W8, W8, 0x1
	0x03CCAB28 BIC W19, W8, W8, 0x1F
	0x03CCAB2C B 0x3CCAB34
	0x03CCAB30 MOV W19, W31
	0x03CCAB34 MOV X0, X20
	0x03CCAB38 BL 0x3CC98D0
	0x03CCAB3C CBZ X0, 0x3CCAB6C
	0x03CCAB40 LDR X8, [X0 + 0x30]
	0x03CCAB44 CBZ X8, 0x3CCAB6C
	0x03CCAB48 LDR W9, [X8 + 0x18]
	0x03CCAB4C CMP W19, W9
	0x03CCAB50 B.CS 0x3CCAB70
	0x03CCAB54 MOVZ W9, 0x188
	0x03CCAB58 SMADDL X8, X19, X9, X8
	0x03CCAB5C LDR W0, [X8 + 0x6C]
	0x03CCAB60 LDP X20, X19, [X31 + 0x10]
	0x03CCAB64 LDR X30, [X31], #0x20
	0x03CCAB68 RET
	0x03CCAB6C BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+40]
	005 Compare X0, 0
	006 JumpIfEqual {23}
	007 Move X8, [X0]
	008 Move X9, [X8+344]
	009 Move X1, [X8+352]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move W8, [X19+32]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move W8, [X19+48]
	014 Compare W8, 0
	015 JumpIfEqual {22}
	016 Move [X19+32], W0
	017 Move W0, 1
	018 Move [X19+48], W31
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return X0
	022 Move W0, W31
	023 Call 0x1C17F20

Method: UnityEngine.Vector2 GetCursorPositionFromStringIndexUsingCharacterHeight(System.Int32 index, System.Boolean inverseYAxis = True)

Disassembly:
	0x03CCAB70 BL 0x1C16F28
	0x03CCAB74 STR X30, [X31 - 0x20]!
	0x03CCAB78 STP X20, X19, [X31 + 0x10]
	0x03CCAB7C CMP W1, 0x1
	0x03CCAB80 MOV X20, X0
	0x03CCAB84 B.LT 0x3CCABC0
	0x03CCAB88 MOV X0, X20
	0x03CCAB8C MOV W19, W1
	0x03CCAB90 BL 0x3CC98D0
	0x03CCAB94 CBZ X0, 0x3CCABFC
	0x03CCAB98 LDR W8, [X0 + 0x24]
	0x03CCAB9C CMP W8, W19
	0x03CCABA0 B.GT 0x3CCABC4
	0x03CCABA4 MOV X0, X20
	0x03CCABA8 BL 0x3CC98D0
	0x03CCABAC CBZ X0, 0x3CCABFC
	0x03CCABB0 LDR W8, [X0 + 0x24]
	0x03CCABB4 SUB W8, W8, 0x1
	0x03CCABB8 BIC W19, W8, W8, 0x1F
	0x03CCABBC B 0x3CCABC4
	0x03CCABC0 MOV W19, W31
	0x03CCABC4 MOV X0, X20
	0x03CCABC8 BL 0x3CC98D0
	0x03CCABCC CBZ X0, 0x3CCABFC
	0x03CCABD0 LDR X8, [X0 + 0x48]
	0x03CCABD4 CBZ X8, 0x3CCABFC
	0x03CCABD8 LDR W9, [X8 + 0x18]
	0x03CCABDC CMP W19, W9
	0x03CCABE0 B.CS 0x3CCAC00
	0x03CCABE4 MOVZ W9, 0x60
	0x03CCABE8 SMADDL X8, X19, X9, X8
	0x03CCABEC LDR V0, [X8 + 0x4C]
	0x03CCABF0 LDP X20, X19, [X31 + 0x10]
	0x03CCABF4 LDR X30, [X31], #0x20
	0x03CCABF8 RET
	0x03CCABFC BL 0x1C16F20
	0x03CCAC00 BL 0x1C16F28
	0x03CCAC04 STR X30, [X31 - 0x20]!
	0x03CCAC08 STP X20, X19, [X31 + 0x10]
	0x03CCAC0C CMP W1, 0x1
	0x03CCAC10 MOV X19, X0
	0x03CCAC14 B.LT 0x3CCAC50
	0x03CCAC18 MOV X0, X19
	0x03CCAC1C MOV W20, W1
	0x03CCAC20 BL 0x3CC98D0
	0x03CCAC24 CBZ X0, 0x3CCAC90
	0x03CCAC28 LDR W8, [X0 + 0x10]
	0x03CCAC2C CMP W8, W20
	0x03CCAC30 B.GT 0x3CCAC54
	0x03CCAC34 MOV X0, X19
	0x03CCAC38 BL 0x3CC98D0
	0x03CCAC3C CBZ X0, 0x3CCAC90
	0x03CCAC40 LDR W8, [X0 + 0x10]
	0x03CCAC44 SUB W8, W8, 0x1
	0x03CCAC48 BIC W20, W8, W8, 0x1F
	0x03CCAC4C B 0x3CCAC54
	0x03CCAC50 MOV W20, W31
	0x03CCAC54 MOV X0, X19
	0x03CCAC58 BL 0x3CC98D0
	0x03CCAC5C CBZ X0, 0x3CCAC90
	0x03CCAC60 LDR X8, [X0 + 0x30]
	0x03CCAC64 CBZ X8, 0x3CCAC90
	0x03CCAC68 LDR W9, [X8 + 0x18]
	0x03CCAC6C CMP W20, W9
	0x03CCAC70 B.CS 0x3CCAC94
	0x03CCAC74 MOVZ W9, 0x188
	0x03CCAC78 SMADDL X8, X20, X9, X8
	0x03CCAC7C LDR W1, [X8 + 0x6C]
	0x03CCAC80 MOV X0, X19
	0x03CCAC84 LDP X20, X19, [X31 + 0x10]
	0x03CCAC88 LDR X30, [X31], #0x20
	0x03CCAC8C B 0x3CCAB74
	0x03CCAC90 BL 0x1C16F20
	0x03CCAC94 BL 0x1C16F28
	0x03CCAC98 STR X30, [X31 - 0x20]!
	0x03CCAC9C STP X20, X19, [X31 + 0x10]
	0x03CCACA0 CMP W1, 0x1
	0x03CCACA4 MOV X20, X0
	0x03CCACA8 B.LT 0x3CCACE4
	0x03CCACAC MOV X0, X20
	0x03CCACB0 MOV W19, W1
	0x03CCACB4 BL 0x3CC98D0
	0x03CCACB8 CBZ X0, 0x3CCAD28
	0x03CCACBC LDR W8, [X0 + 0x10]

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, X0
	013 Move X0, [X0+40]
	014 Move W19, W2
	015 Move W20, W1
	016 Move X1, X31
	017 Move X2, X31
	018 Call TextGenerationSettings.op_Equality, X0, X1
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {38}
	023 Move X19, 0x710000
	024 Move W8, [X19+1935]
	025 Compare W8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, 0x432000
	028 Move X0, [X0+3848]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X19+1935], W8
	032 Move X8, 0x432000
	033 Move X8, [X8+3848]
	034 Move X8, [X8]
	035 Move X8, [X8+184]
	036 Move S8, [X8]
	037 Move S9, [X8+4]
	038 Move X8, [X21+40]
	039 Compare X8, 0
	040 JumpIfEqual {104}
	041 Move S8, [X8+24]
	042 Move S9, [X8+28]
	043 Move V10, [X8+36]
	044 Move X0, X21
	045 Call TextHandle.get_textInfo, X0
	046 Compare X0, 0
	047 JumpIfEqual {104}
	048 Move W8, [X0+16]
	049 Compare W8, 0
	050 JumpIfEqual {90}
	051 Move X0, X21
	052 Call TextHandle.get_textInfo, X0
	053 Compare X0, 0
	054 JumpIfEqual {104}
	055 Move W8, [X0+16]
	056 Move W22, W20
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X0, X21
	059 Call TextHandle.get_textInfo, X0
	060 Compare X0, 0
	061 JumpIfEqual {104}
	062 Move W8, [X0+16]
	063 Subtract W22, W8, 1
	064 Move X0, X21
	065 Call TextHandle.get_textInfo, X0
	066 Compare X0, 0
	067 JumpIfEqual {104}
	068 Move X8, [X0+48]
	069 Compare X8, 0
	070 JumpIfEqual {104}
	071 Move W9, [X8+24]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W9, 392
	074 NotImplemented "Instruction SMADDL not yet implemented."
	075 Move V12, [X8+328]
	076 Move V11, [X8+340]
	077 Move V13, [X8+356]
	078 Move X0, X21
	079 Call TextHandle.get_textInfo, X0
	080 Compare X0, 0
	081 JumpIfEqual {104}
	082 Move W8, [X0+16]
	083 Subtract S0, S10, S11
	084 NotImplemented "Instruction CMP not yet implemented."
	085 NotImplemented "Instruction FCSEL not yet implemented."
	086 And W31, W19, 1
	087 NotImplemented "Instruction FCSEL not yet implemented."
	088 Add S8, S8, S1
	089 Add S9, S9, S0
	090 Move V0, V8
	091 Move V1, V9
	092 Move X20, [X31+80]
	093 Move X19, [X31+88]
	094 Move X22, [X31+64]
	095 Move X21, [X31+72]
	096 Move X30, [X31+48]
	097 Move D9, [X31+32]
	098 Move D8, [X31+40]
	099 Move D11, [X31+16]
	100 Move D10, [X31+24]
	101 Move D13, [X31+96]
	102 Move D12, [X31+104]
	103 Return X0
	104 Call 0x1C17F20
	105 Call 0x1C17F28

Method: UnityEngine.Vector2 GetCursorPositionFromStringIndexUsingLineHeight(System.Int32 index, System.Boolean useXAdvance = False, System.Boolean inverseYAxis = True)

Disassembly:
	0x03CCACC0 CMP W8, W19
	0x03CCACC4 B.GT 0x3CCACE8
	0x03CCACC8 MOV X0, X20
	0x03CCACCC BL 0x3CC98D0
	0x03CCACD0 CBZ X0, 0x3CCAD28
	0x03CCACD4 LDR W8, [X0 + 0x10]
	0x03CCACD8 SUB W8, W8, 0x1
	0x03CCACDC BIC W19, W8, W8, 0x1F
	0x03CCACE0 B 0x3CCACE8
	0x03CCACE4 MOV W19, W31
	0x03CCACE8 MOV X0, X20
	0x03CCACEC BL 0x3CC98D0
	0x03CCACF0 CBZ X0, 0x3CCAD28
	0x03CCACF4 LDR X8, [X0 + 0x30]
	0x03CCACF8 CBZ X8, 0x3CCAD28
	0x03CCACFC LDR W9, [X8 + 0x18]
	0x03CCAD00 CMP W19, W9
	0x03CCAD04 B.CS 0x3CCAD2C
	0x03CCAD08 MOVZ W9, 0x188
	0x03CCAD0C SMADDL X8, X19, X9, X8
	0x03CCAD10 LDR V0, [X8 + 0x14C]
	0x03CCAD14 LDR V1, [X8 + 0x154]
	0x03CCAD18 LDP X20, X19, [X31 + 0x10]
	0x03CCAD1C FSUB S0, S0, S1
	0x03CCAD20 LDR X30, [X31], #0x20
	0x03CCAD24 RET
	0x03CCAD28 BL 0x1C16F20
	0x03CCAD2C BL 0x1C16F28
	0x03CCAD30 STP X30, X19, [X31 - 0x10]!
	0x03CCAD34 MOV X19, X0
	0x03CCAD38 BL 0x3CC98D0
	0x03CCAD3C CBZ X0, 0x3CCAD64
	0x03CCAD40 MOV X0, X19
	0x03CCAD44 BL 0x3CC98D0
	0x03CCAD48 CBZ X0, 0x3CCAD6C
	0x03CCAD4C LDR W8, [X0 + 0x10]
	0x03CCAD50 CBZ W8, 0x3CCAD60
	0x03CCAD54 MOV X0, X31
	0x03CCAD58 LDP X30, X19, [X31], #0x10
	0x03CCAD5C B 0x3CB881C
	0x03CCAD60 MOVZ W0, 0x1
	0x03CCAD64 LDP X30, X19, [X31], #0x10
	0x03CCAD68 RET
	0x03CCAD6C BL 0x1C16F20
	0x03CCAD70 STP X30, X23, [X31 - 0x30]!
	0x03CCAD74 STP X22, X21, [X31 + 0x10]
	0x03CCAD78 STP X20, X19, [X31 + 0x20]
	0x03CCAD7C ADRP X20, 0x71D000
	0x03CCAD80 LDRB W8, [X20 + 0x378]
	0x03CCAD84 MOV W22, W2
	0x03CCAD88 MOV W21, W1
	0x03CCAD8C MOV X19, X0
	0x03CCAD90 TBNZ X8, 0x0, 0x3CCADA8
	0x03CCAD94 ADRP X0, 0x429000
	0x03CCAD98 LDR X0, [X0 + 0x8F0]
	0x03CCAD9C BL 0x1C16CF4
	0x03CCADA0 MOVZ W8, 0x1
	0x03CCADA4 STRB W8, [X20 + 0x378]
	0x03CCADA8 TBNZ X21, 0x1F, 0x3CCAE74
	0x03CCADAC MOV X0, X19
	0x03CCADB0 BL 0x3CC98D0
	0x03CCADB4 CBZ X0, 0x3CCAE6C
	0x03CCADB8 LDR W8, [X0 + 0x10]
	0x03CCADBC ADD W23, W22, W21
	0x03CCADC0 CMP W23, W8
	0x03CCADC4 B.GT 0x3CCAE74
	0x03CCADC8 ADRP X8, 0x429000
	0x03CCADCC LDR X8, [X8 + 0x8F0]
	0x03CCADD0 LDR X0, [X8]
	0x03CCADD4 BL 0x1C16F10
	0x03CCADD8 MOV W1, W22
	0x03CCADDC MOV X2, X31
	0x03CCADE0 MOV X20, X0
	0x03CCADE4 BL 0x3231B28
	0x03CCADE8 CMP W23, W21
	0x03CCADEC B.LE 0x3CCAE4C
	0x03CCADF0 MOVZ W8, 0x188
	0x03CCADF4 UMADDL X8, X21, X8, X31
	0x03CCADF8 MOV W22, W21
	0x03CCADFC SXTW X23, W23
	0x03CCAE00 ADD X21, X8, 0x20
	0x03CCAE04 MOV X0, X19
	0x03CCAE08 BL 0x3CC98D0
	0x03CCAE0C CBZ X0, 0x3CCAE6C
	0x03CCAE10 LDR X8, [X0 + 0x30]
	0x03CCAE14 CBZ X8, 0x3CCAE6C
	0x03CCAE18 LDR W9, [X8 + 0x18]
	0x03CCAE1C CMP W22, W9
	0x03CCAE20 B.CS 0x3CCAE70
	0x03CCAE24 CBZ X20, 0x3CCAE6C
	0x03CCAE28 LDRH W1, [X8, X21, LSL]
	0x03CCAE2C MOV X0, X20
	0x03CCAE30 MOV X2, X31
	0x03CCAE34 BL 0x3233D30
	0x03CCAE38 ADD X22, X22, 0x1
	0x03CCAE3C CMP X23, X22
	0x03CCAE40 ADD X21, X21, 0x188
	0x03CCAE44 B.NE 0x3CCAE04
	0x03CCAE48 B 0x3CCAE50

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, X0
	014 Move X0, [X0+40]
	015 Move W19, W2
	016 Move W21, W1
	017 Move X1, X31
	018 Move X2, X31
	019 Move W20, W3
	020 Call TextGenerationSettings.op_Equality, X0, X1
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {40}
	025 Move X19, 0x710000
	026 Move W8, [X19+1935]
	027 Compare W8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, 0x432000
	030 Move X0, [X0+3848]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X19+1935], W8
	034 Move X8, 0x432000
	035 Move X8, [X8+3848]
	036 Move X8, [X8]
	037 Move X8, [X8+184]
	038 Move S8, [X8]
	039 Move S9, [X8+4]
	040 Move X8, [X22+40]
	041 Compare X8, 0
	042 JumpIfEqual {123}
	043 Move S8, [X8+24]
	044 Move S9, [X8+28]
	045 Move V10, [X8+36]
	046 Move X0, X22
	047 Call TextHandle.get_textInfo, X0
	048 Compare X0, 0
	049 JumpIfEqual {123}
	050 Move W8, [X0+16]
	051 Compare W8, 0
	052 JumpIfEqual {108}
	053 Move X0, X22
	054 Call TextHandle.get_textInfo, X0
	055 Compare X0, 0
	056 JumpIfEqual {123}
	057 Move W8, [X0+16]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, X22
	060 Call TextHandle.get_textInfo, X0
	061 Compare X0, 0
	062 JumpIfEqual {123}
	063 Move W8, [X0+16]
	064 Subtract W21, W8, 1
	065 Move X0, X22
	066 Call TextHandle.get_textInfo, X0
	067 Compare X0, 0
	068 JumpIfEqual {123}
	069 Move X8, [X0+48]
	070 Compare X8, 0
	071 JumpIfEqual {123}
	072 Move W9, [X8+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move W9, 392
	075 NotImplemented "Instruction SMADDL not yet implemented."
	076 NotImplemented "Instruction LDRSW not yet implemented."
	077 Move V11, [X8+328]
	078 Move V12, [X8+356]
	079 Move X0, X22
	080 Call TextHandle.get_textInfo, X0
	081 Compare X0, 0
	082 JumpIfEqual {123}
	083 Move X8, [X0+72]
	084 Compare X8, 0
	085 JumpIfEqual {123}
	086 Move W9, [X8+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move W9, 96
	089 NotImplemented "Instruction MADD not yet implemented."
	090 Move V13, [X8+88]
	091 Move X0, X22
	092 Call TextHandle.get_textInfo, X0
	093 Compare X0, 0
	094 JumpIfEqual {123}
	095 Move W8, [X0+16]
	096 Subtract S0, S10, S13
	097 And W31, W20, 1
	098 NotImplemented "Instruction FCSEL not yet implemented."
	099 Subtract W8, W8, 1
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move TEMP, X19
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {106}
	105 Add S8, S8, S11
	106 Add S8, S8, S12
	107 Add S9, S9, S0
	108 Move V0, V8
	109 Move V1, V9
	110 Move X20, [X31+80]
	111 Move X19, [X31+88]
	112 Move X22, [X31+64]
	113 Move X21, [X31+72]
	114 Move X30, [X31+48]
	115 Move X23, [X31+56]
	116 Move D9, [X31+32]
	117 Move D8, [X31+40]
	118 Move D11, [X31+16]
	119 Move D10, [X31+24]
	120 Move D13, [X31+96]
	121 Move D12, [X31+104]
	122 Return X0
	123 Call 0x1C17F20
	124 Call 0x1C17F28

Method: System.Int32 GetCursorIndexFromPosition(UnityEngine.Vector2 position, System.Boolean inverseYAxis = True)

Disassembly:
	0x03CCAE4C CBZ X20, 0x3CCAE6C
	0x03CCAE50 LDR X8, [X20]
	0x03CCAE54 MOV X0, X20
	0x03CCAE58 LDP X20, X19, [X31 + 0x20]
	0x03CCAE5C LDP X22, X21, [X31 + 0x10]
	0x03CCAE60 LDP X2, X1, [X8 + 0x168]
	0x03CCAE64 LDP X30, X23, [X31], #0x30
	0x03CCAE68 BR X2
	0x03CCAE6C BL 0x1C16F20
	0x03CCAE70 BL 0x1C16F28
	0x03CCAE74 ADRP X0, 0x431000
	0x03CCAE78 LDR X0, [X0 + 0x760]
	0x03CCAE7C BL 0x1C16D08
	0x03CCAE80 BL 0x1C16F10
	0x03CCAE84 MOV X1, X31
	0x03CCAE88 MOV X19, X0
	0x03CCAE8C BL 0x3315FB8
	0x03CCAE90 ADRP X0, 0x497000
	0x03CCAE94 LDR X0, [X0 + 0xDE0]
	0x03CCAE98 BL 0x1C16D08
	0x03CCAE9C MOV X1, X0
	0x03CCAEA0 MOV X0, X19
	0x03CCAEA4 BL 0x1C16DEC
	0x03CCAEA8 STR X30, [X31 - 0x30]!
	0x03CCAEAC STP X22, X21, [X31 + 0x10]
	0x03CCAEB0 STP X20, X19, [X31 + 0x20]
	0x03CCAEB4 TBNZ X2, 0x1F, 0x3CCAF5C
	0x03CCAEB8 MOV W19, W2
	0x03CCAEBC MOV W20, W1
	0x03CCAEC0 MOV X21, X0
	0x03CCAEC4 BL 0x3CC98D0
	0x03CCAEC8 CBZ X0, 0x3CCAF3C
	0x03CCAECC LDR W8, [X0 + 0x10]
	0x03CCAED0 CMP W8, W19
	0x03CCAED4 B.LE 0x3CCAF5C
	0x03CCAED8 MOV X0, X21
	0x03CCAEDC BL 0x3CC98D0
	0x03CCAEE0 CBZ X0, 0x3CCAF3C
	0x03CCAEE4 MOVZ W8, 0x188
	0x03CCAEE8 SMADDL X8, X19, X8, X31
	0x03CCAEEC ADD X22, X8, 0x20
	0x03CCAEF0 LDR W8, [X0 + 0x10]
	0x03CCAEF4 CMP W19, W8
	0x03CCAEF8 B.GE 0x3CCAF40
	0x03CCAEFC MOV X0, X21
	0x03CCAF00 BL 0x3CC98D0
	0x03CCAF04 CBZ X0, 0x3CCAF3C
	0x03CCAF08 LDR X8, [X0 + 0x30]
	0x03CCAF0C CBZ X8, 0x3CCAF3C
	0x03CCAF10 LDR W9, [X8 + 0x18]
	0x03CCAF14 CMP W19, W9
	0x03CCAF18 B.CS 0x3CCAF58
	0x03CCAF1C LDRH W8, [X8, X22, LSL]
	0x03CCAF20 CMP W8, W20, UXTH
	0x03CCAF24 B.EQ 0x3CCAF44
	0x03CCAF28 MOV X0, X21
	0x03CCAF2C ADD W19, W19, 0x1
	0x03CCAF30 BL 0x3CC98D0
	0x03CCAF34 ADD X22, X22, 0x188
	0x03CCAF38 CBNZ X0, 0x3CCAEF0
	0x03CCAF3C BL 0x1C16F20
	0x03CCAF40 MOVN W19, 0x0
	0x03CCAF44 MOV W0, W19
	0x03CCAF48 LDP X20, X19, [X31 + 0x20]
	0x03CCAF4C LDP X22, X21, [X31 + 0x10]
	0x03CCAF50 LDR X30, [X31], #0x30
	0x03CCAF54 RET
	0x03CCAF58 BL 0x1C16F28
	0x03CCAF5C ADRP X0, 0x431000
	0x03CCAF60 LDR X0, [X0 + 0x760]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, [X0+40]
	008 Move W20, W1
	009 Move X1, X31
	010 Move X2, X31
	011 Move V9, V1
	012 Move V8, V0
	013 Call TextGenerationSettings.op_Equality, X0, X1
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {19}
	018 Move W20, W31
	019 Move TEMP, X20
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {28}
	023 Move X8, [X19+40]
	024 Compare X8, 0
	025 JumpIfEqual {77}
	026 Move V0, [X8+36]
	027 Subtract S9, S0, S9
	028 Move X0, X19
	029 Call TextHandle.get_textInfo, X0
	030 Compare X0, 0
	031 JumpIfEqual {77}
	032 Move W8, [X0+36]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X0, X19
	035 Move V0, V8
	036 Move V1, V9
	037 Call TextHandle.FindNearestLine, X0, X1
	038 Move W1, W0
	039 Move W1, W31
	040 Move X0, X19
	041 Move V0, V8
	042 Move V1, V9
	043 Move W2, W31
	044 Call TextHandle.FindNearestCharacterOnLine, X0, X1, X2, X3
	045 Move W20, W0
	046 Move X0, X19
	047 Call TextHandle.get_textInfo, X0
	048 Compare X0, 0
	049 JumpIfEqual {77}
	050 Move X8, [X0+48]
	051 Compare X8, 0
	052 JumpIfEqual {77}
	053 Move W9, [X8+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W9, 392
	056 NotImplemented "Instruction SMADDL not yet implemented."
	057 Move V0, [X9+292]
	058 Move V1, [X9+304]
	059 Subtract S2, S8, S0
	060 Subtract S0, S1, S0
	061 NotImplemented "Instruction FDIV not yet implemented."
	062 Move S1, 0.5
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 Move X9, W20
	065 Move W10, 392
	066 NotImplemented "Instruction MADD not yet implemented."
	067 NotImplemented "Instruction LDRH not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 NotImplemented "Instruction CINC not yet implemented."
	070 Move W0, W20
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X30, [X31+16]
	074 Move D9, [X31+48]
	075 Move D8, [X31+56]
	076 Return X0
	077 Call 0x1C17F20
	078 Call 0x1C17F28

Method: System.Int32 LineDownCharacterPosition(System.Int32 originalPos)

Disassembly:
	0x03CCB2F4 BL 0x1C16F28
	0x03CCB2F8 STP X30, X23, [X31 - 0x30]!
	0x03CCB2FC STP X22, X21, [X31 + 0x10]
	0x03CCB300 STP X20, X19, [X31 + 0x20]
	0x03CCB304 ADRP X20, 0x71C000
	0x03CCB308 LDRB W8, [X20 + 0x37D]
	0x03CCB30C MOV X19, X0
	0x03CCB310 TBNZ X8, 0x0, 0x3CCB334
	0x03CCB314 ADRP X0, 0x496000
	0x03CCB318 LDR X0, [X0 + 0xDB0]
	0x03CCB31C BL 0x1C16CF4
	0x03CCB320 ADRP X0, 0x496000
	0x03CCB324 LDR X0, [X0 + 0xB68]
	0x03CCB328 BL 0x1C16CF4
	0x03CCB32C MOVZ W8, 0x1
	0x03CCB330 STRB W8, [X20 + 0x37D]
	0x03CCB334 LDR X20, [X19 + 0x48]
	0x03CCB338 CBNZ X20, 0x3CCB358
	0x03CCB33C ADRP X8, 0x496000
	0x03CCB340 LDR X8, [X8 + 0xDB0]
	0x03CCB344 MOVZ W1, 0x1
	0x03CCB348 LDR X0, [X8]
	0x03CCB34C BL 0x1C16D6C
	0x03CCB350 MOV X20, X0
	0x03CCB354 STR X0, [X19 + 0x48]
	0x03CCB358 CBZ X20, 0x3CCB464
	0x03CCB35C LDR X8, [X20 + 0x18]
	0x03CCB360 CMP W8, 0x1
	0x03CCB364 B.LT 0x3CCB450
	0x03CCB368 ADRP X22, 0x496000
	0x03CCB36C LDR X22, [X22 + 0xB68]
	0x03CCB370 MOV X21, X31
	0x03CCB374 AND X8, X8, 0x0
	0x03CCB378 MOVZ W23, 0x78
	0x03CCB37C CMP X21, W8, UXTW
	0x03CCB380 B.CS 0x3CCB460
	0x03CCB384 ADD X9, X20, X23
	0x03CCB388 STUR W31, [X9 - 0x4C]
	0x03CCB38C STUR W31, [X9 - 0x44]
	0x03CCB390 STUR X31, [X9 - 0x58]
	0x03CCB394 LDR X0, [X22]
	0x03CCB398 LDR W9, [X0 + 0xE0]
	0x03CCB39C CBZ W9, 0x3CCB3A8
	0x03CCB3A0 AND X8, X8, 0x0
	0x03CCB3A4 B 0x3CCB3B4
	0x03CCB3A8 BL 0x1C16DFC
	0x03CCB3AC LDR X0, [X22]
	0x03CCB3B0 LDR W8, [X20 + 0x18]
	0x03CCB3B4 CMP X21, X8
	0x03CCB3B8 B.CS 0x3CCB460
	0x03CCB3BC LDR X8, [X0 + 0xB8]
	0x03CCB3C0 ADD X9, X20, X23
	0x03CCB3C4 LDR V0, [X8 + 0x8]
	0x03CCB3C8 STUR S0, [X9 - 0x28]
	0x03CCB3CC LDR X9, [X19 + 0x48]
	0x03CCB3D0 CBZ X9, 0x3CCB464
	0x03CCB3D4 LDR W10, [X9 + 0x18]
	0x03CCB3D8 CMP X21, X10
	0x03CCB3DC B.CS 0x3CCB460
	0x03CCB3E0 ADD X9, X9, X23
	0x03CCB3E4 STUR W31, [X9 - 0x24]
	0x03CCB3E8 LDR V0, [X8]
	0x03CCB3EC STUR W31, [X9 - 0x1C]
	0x03CCB3F0 STUR X31, [X9 - 0x14]
	0x03CCB3F4 STUR S0, [X9 - 0x20]
	0x03CCB3F8 LDR X8, [X8]
	0x03CCB3FC STUR X8, [X9 - 0x8]
	0x03CCB400 LDR X8, [X19 + 0x48]
	0x03CCB404 CBZ X8, 0x3CCB464
	0x03CCB408 LDR W9, [X8 + 0x18]
	0x03CCB40C CMP X21, X9
	0x03CCB410 B.CS 0x3CCB460
	0x03CCB414 LDR X9, [X22]
	0x03CCB418 LDR X9, [X9 + 0xB8]
	0x03CCB41C LDR X9, [X9 + 0x8]
	0x03CCB420 STR X9, [X8, X23, LSL]
	0x03CCB424 LDR X20, [X19 + 0x48]
	0x03CCB428 CBZ X20, 0x3CCB464
	0x03CCB42C LDR W8, [X20 + 0x18]
	0x03CCB430 CMP X21, X8
	0x03CCB434 B.CS 0x3CCB460
	0x03CCB438 ADD X21, X21, 0x1
	0x03CCB43C ADD X9, X20, X23
	0x03CCB440 CMP X21, W8, SXTW
	0x03CCB444 ADD X23, X23, 0x60
	0x03CCB448 STUR W31, [X9 - 0x18]
	0x03CCB44C B.LT 0x3CCB37C
	0x03CCB450 LDP X20, X19, [X31 + 0x20]
	0x03CCB454 LDP X22, X21, [X31 + 0x10]
	0x03CCB458 LDP X30, X23, [X31], #0x30
	0x03CCB45C RET
	0x03CCB460 BL 0x1C16F28
	0x03CCB464 BL 0x1C16F20
	0x03CCB468 STR X30, [X31 - 0x20]!
	0x03CCB46C STP X20, X19, [X31 + 0x10]
	0x03CCB470 ADRP X20, 0x71C000
	0x03CCB474 LDRB W8, [X20 + 0x37E]
	0x03CCB478 MOV X19, X0
	0x03CCB47C TBNZ X8, 0x0, 0x3CCB494
	0x03CCB480 ADRP X0, 0x496000
	0x03CCB484 LDR X0, [X0 + 0xDC0]
	0x03CCB488 BL 0x1C16CF4
	0x03CCB48C MOVZ W8, 0x1
	0x03CCB490 STRB W8, [X20 + 0x37E]
	0x03CCB494 LDR X0, [X19 + 0x50]
	0x03CCB498 CBNZ X0, 0x3CCB4B4
	0x03CCB49C ADRP X8, 0x496000
	0x03CCB4A0 LDR X8, [X8 + 0xDC0]
	0x03CCB4A4 MOVZ W1, 0x2
	0x03CCB4A8 LDR X0, [X8]
	0x03CCB4AC BL 0x1C16D6C
	0x03CCB4B0 STR X0, [X19 + 0x50]
	0x03CCB4B4 CBZ X0, 0x3CCB4FC
	0x03CCB4B8 LDR X8, [X0 + 0x18]
	0x03CCB4BC CMP W8, 0x1
	0x03CCB4C0 B.LT 0x3CCB4F0
	0x03CCB4C4 ADRP X9, 0xFFFFFFFFFCE23000
	0x03CCB4C8 LDR V0, [X9 + 0x348]
	0x03CCB4CC MOVZ W10, 0xFE00

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move W20, W1
	013 Move X19, X0
	014 Call TextHandle.get_textInfo, X0
	015 Compare X0, 0
	016 JumpIfEqual {127}
	017 Move W21, [X0+16]
	018 Move X0, X19
	019 Call TextHandle.get_textInfo, X0
	020 Compare X0, 0
	021 JumpIfEqual {127}
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X8, [X0+48]
	024 Compare X8, 0
	025 JumpIfEqual {127}
	026 Move W9, [X8+24]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W9, 392
	029 NotImplemented "Instruction SMADDL not yet implemented."
	030 Move W20, [X8+108]
	031 Move V8, [X8+328]
	032 Move X0, X19
	033 Call TextHandle.get_textInfo, X0
	034 Compare X0, 0
	035 JumpIfEqual {127}
	036 Move W22, [X0+36]
	037 Move X0, X19
	038 Call TextHandle.get_textInfo, X0
	039 Compare X0, 0
	040 JumpIfEqual {127}
	041 Add W21, W20, 1
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X8, [X0+72]
	044 Compare X8, 0
	045 JumpIfEqual {127}
	046 Move W9, [X8+24]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X22, W21
	049 Move W9, 96
	050 NotImplemented "Instruction MADD not yet implemented."
	051 Move W20, [X8+64]
	052 Move X0, X19
	053 Call TextHandle.get_textInfo, X0
	054 Compare X0, 0
	055 JumpIfEqual {127}
	056 Move X8, [X0+72]
	057 Compare X8, 0
	058 JumpIfEqual {127}
	059 Move W9, [X8+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move W9, 96
	062 NotImplemented "Instruction MADD not yet implemented."
	063 Move W21, [X8+56]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X9, W21
	066 Move W10, 392
	067 Move X8, W20
	068 Move W11, 0x7F800000
	069 Multiply X10, X9, X10
	070 Move S9, W31
	071 Move TEMP, 0
	072 Not TEMP
	073 Move W22, TEMP
	074 Subtract X23, X8, X9
	075 Move S10, W11
	076 Add X24, X10, 328
	077 Move S11, 1
	078 Move X0, X19
	079 Call TextHandle.get_textInfo, X0
	080 Compare X0, 0
	081 JumpIfEqual {127}
	082 Move X8, [X0+48]
	083 Compare X8, 0
	084 JumpIfEqual {127}
	085 Move W9, [X8+24]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Add X8, X8, X24
	088 Move V0, [X8]
	089 Move V2, [X8+28]
	090 Subtract S1, S8, S0
	091 Subtract S0, S2, S0
	092 NotImplemented "Instruction FDIV not yet implemented."
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 NotImplemented "Instruction FABS not yet implemented."
	096 NotImplemented "Instruction FCMP not yet implemented."
	097 NotImplemented "Instruction FCSEL not yet implemented."
	098 NotImplemented "Instruction FCSEL not yet implemented."
	099 NotImplemented "Instruction CSEL not yet implemented."
	100 Add W21, W21, 1
	101 Subtract X23, X23, 1
	102 Add X24, X24, 392
	103 Add W31, W22, 1
	104 Move S0, 0.5
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 NotImplemented "Instruction CSET not yet implemented."
	107 Add W20, W22, W8
	108 Move W8, [X0+16]
	109 Subtract W20, W8, 1
	110 Move W0, W20
	111 Move X20, [X31+80]
	112 Move X19, [X31+88]
	113 Move X22, [X31+64]
	114 Move X21, [X31+72]
	115 Move X24, [X31+48]
	116 Move X23, [X31+56]
	117 Move X30, [X31+32]
	118 Move D9, [X31+16]
	119 Move D8, [X31+24]
	120 Move D11, [X31+96]
	121 Move D10, [X31+104]
	122 Return X0
	123 Move S1, 0.5
	124 NotImplemented "Instruction FCMP not yet implemented."
	125 NotImplemented "Instruction CSET not yet implemented."
	126 Add W0, W8, W21
	127 Call 0x1C17F20
	128 Call 0x1C17F28

Method: System.Int32 LineUpCharacterPosition(System.Int32 originalPos)

Disassembly:
	0x03CCB4D0 AND X8, X8, 0x0
	0x03CCB4D4 ADD X9, X0, 0x30
	0x03CCB4D8 MOVK W10, 0x46FF0000
	0x03CCB4DC STUR X31, [X9 - 0x10]
	0x03CCB4E0 STUR D0, [X9 - 0x8]
	0x03CCB4E4 STR W10, [X9], #0x14
	0x03CCB4E8 SUBS X8, X8, 0x1
	0x03CCB4EC B.NE 0x3CCB4DC
	0x03CCB4F0 LDP X20, X19, [X31 + 0x10]
	0x03CCB4F4 LDR X30, [X31], #0x20
	0x03CCB4F8 RET
	0x03CCB4FC BL 0x1C16F20
	0x03CCB500 STR X30, [X31 - 0x20]!
	0x03CCB504 STP X20, X19, [X31 + 0x10]
	0x03CCB508 ADRP X20, 0x71C000
	0x03CCB50C ADRP X19, 0x496000
	0x03CCB510 LDRB W8, [X20 + 0x37F]
	0x03CCB514 LDR X19, [X19 + 0xB68]
	0x03CCB518 TBNZ X8, 0x0, 0x3CCB530
	0x03CCB51C ADRP X0, 0x496000
	0x03CCB520 LDR X0, [X0 + 0xB68]
	0x03CCB524 BL 0x1C16CF4
	0x03CCB528 MOVZ W8, 0x1
	0x03CCB52C STRB W8, [X20 + 0x37F]
	0x03CCB530 LDR X8, [X19]
	0x03CCB534 MOVZ W9, 0xFE00
	0x03CCB538 MOVK W9, 0x46FF0000
	0x03CCB53C UNIMPLEMENTED
	0x03CCB540 LDR X8, [X8 + 0xB8]
	0x03CCB544 MOVZ W9, 0xFE00
	0x03CCB548 MOVK W9, 0xC6FF0000
	0x03CCB54C STR D0, [X8]
	0x03CCB550 LDR X8, [X19]
	0x03CCB554 LDP X20, X19, [X31 + 0x10]
	0x03CCB558 UNIMPLEMENTED
	0x03CCB55C LDR X8, [X8 + 0xB8]
	0x03CCB560 STR D0, [X8 + 0x8]
	0x03CCB564 LDR X30, [X31], #0x20
	0x03CCB568 RET
	0x03CCB56C STRH W31, [X0 + 0x8]
	0x03CCB570 STR X31, [X0]
	0x03CCB574 RET
	0x03CCB578 CMP W1, 0x10
	0x03CCB57C B.LE 0x3CCB5A8
	0x03CCB580 CMP W1, 0x80
	0x03CCB584 B.LE 0x3CCB5E0
	0x03CCB588 CMP W1, 0x100
	0x03CCB58C B.EQ 0x3CCB620
	0x03CCB590 CMP W1, 0x200
	0x03CCB594 B.NE 0x3CCB600
	0x03CCB598 LDRB W8, [X0 + 0x4]
	0x03CCB59C ADD W8, W8, 0x1
	0x03CCB5A0 STRB W8, [X0 + 0x4]
	0x03CCB5A4 B 0x3CCB66C
	0x03CCB5A8 SUB W9, W1, 0x1
	0x03CCB5AC CMP W9, 0x7
	0x03CCB5B0 MOV W8, W31
	0x03CCB5B4 B.HI 0x3CCB608
	0x03CCB5B8 ADRP X10, 0xFFFFFFFFFCECC000
	0x03CCB5BC ADD X10, X10, 0xD7C
	0x03CCB5C0 ADR X11, 0x10
	0x03CCB5C4 LDRB W12, [X10, X9, LSL]
	0x03CCB5C8 ADD X11, X11, X12, 0x2, LSL
	0x03CCB5CC BR X11
	0x03CCB5D0 LDRB W8, [X0]
	0x03CCB5D4 ADD W8, W8, 0x1
	0x03CCB5D8 STRB W8, [X0]
	0x03CCB5DC B 0x3CCB66C
	0x03CCB5E0 CMP W1, 0x40
	0x03CCB5E4 B.EQ 0x3CCB660
	0x03CCB5E8 CMP W1, 0x80
	0x03CCB5EC B.NE 0x3CCB600
	0x03CCB5F0 LDRB W8, [X0 + 0x5]
	0x03CCB5F4 ADD W8, W8, 0x1
	0x03CCB5F8 STRB W8, [X0 + 0x5]
	0x03CCB5FC B 0x3CCB66C
	0x03CCB600 MOV W8, W31
	0x03CCB604 B 0x3CCB66C
	0x03CCB608 CMP W1, 0x10
	0x03CCB60C B.NE 0x3CCB66C
	0x03CCB610 LDRB W8, [X0 + 0x7]
	0x03CCB614 ADD W8, W8, 0x1
	0x03CCB618 STRB W8, [X0 + 0x7]
	0x03CCB61C B 0x3CCB66C
	0x03CCB620 LDRB W8, [X0 + 0x6]
	0x03CCB624 ADD W8, W8, 0x1
	0x03CCB628 STRB W8, [X0 + 0x6]
	0x03CCB62C B 0x3CCB66C
	0x03CCB630 LDRB W8, [X0 + 0x1]
	0x03CCB634 ADD W8, W8, 0x1
	0x03CCB638 STRB W8, [X0 + 0x1]
	0x03CCB63C B 0x3CCB66C
	0x03CCB640 LDRB W8, [X0 + 0x2]
	0x03CCB644 ADD W8, W8, 0x1
	0x03CCB648 STRB W8, [X0 + 0x2]
	0x03CCB64C B 0x3CCB66C
	0x03CCB650 LDRB W8, [X0 + 0x8]
	0x03CCB654 ADD W8, W8, 0x1
	0x03CCB658 STRB W8, [X0 + 0x8]
	0x03CCB65C B 0x3CCB66C
	0x03CCB660 LDRB W8, [X0 + 0x3]
	0x03CCB664 ADD W8, W8, 0x1
	0x03CCB668 STRB W8, [X0 + 0x3]
	0x03CCB66C MOV W0, W8
	0x03CCB670 RET
	0x03CCB674 CMP W1, 0x10
	0x03CCB678 B.LE 0x3CCB6AC
	0x03CCB67C CMP W1, 0x80
	0x03CCB680 B.LE 0x3CCB6EC
	0x03CCB684 CMP W1, 0x100
	0x03CCB688 B.EQ 0x3CCB73C
	0x03CCB68C CMP W1, 0x200
	0x03CCB690 B.NE 0x3CCB714
	0x03CCB694 LDRB W8, [X0 + 0x4]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move W20, W1
	013 Move X19, X0
	014 Call TextHandle.get_textInfo, X0
	015 Compare X0, 0
	016 JumpIfEqual {122}
	017 Move W8, [X0+16]
	018 Move X0, X19
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CSET not yet implemented."
	021 Call TextHandle.get_textInfo, X0
	022 Compare X0, 0
	023 JumpIfEqual {122}
	024 Move X8, [X0+48]
	025 Compare X8, 0
	026 JumpIfEqual {122}
	027 Move W10, [X8+24]
	028 Subtract W9, W20, W21
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W10, 392
	031 NotImplemented "Instruction SMADDL not yet implemented."
	032 NotImplemented "Instruction LDRSW not yet implemented."
	033 Subtract W20, W21, 1
	034 Move V8, [X8+328]
	035 Move X0, X19
	036 Call TextHandle.get_textInfo, X0
	037 Compare X0, 0
	038 JumpIfEqual {122}
	039 Move X8, [X0+72]
	040 Compare X8, 0
	041 JumpIfEqual {122}
	042 Move W9, [X8+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move W9, 96
	045 NotImplemented "Instruction MADD not yet implemented."
	046 Move W22, [X8+56]
	047 Move X0, X19
	048 Call TextHandle.get_textInfo, X0
	049 Compare X0, 0
	050 JumpIfEqual {122}
	051 Move X8, [X0+72]
	052 Compare X8, 0
	053 JumpIfEqual {122}
	054 Move W9, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W9, 96
	057 NotImplemented "Instruction UMADDL not yet implemented."
	058 Move W21, [X8+56]
	059 Subtract W20, W22, 1
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X8, W21
	062 Move W10, 392
	063 Move X9, W20
	064 Move W11, 0x7F800000
	065 Multiply X10, X8, X10
	066 Move S9, W31
	067 Move TEMP, 0
	068 Not TEMP
	069 Move W22, TEMP
	070 Subtract X23, X9, X8
	071 Move S10, W11
	072 Add X24, X10, 328
	073 Move S11, 1
	074 Move X0, X19
	075 Call TextHandle.get_textInfo, X0
	076 Compare X0, 0
	077 JumpIfEqual {122}
	078 Move X8, [X0+48]
	079 Compare X8, 0
	080 JumpIfEqual {122}
	081 Move W9, [X8+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add X8, X8, X24
	084 Move V0, [X8]
	085 Move V2, [X8+28]
	086 Subtract S1, S8, S0
	087 Subtract S0, S2, S0
	088 NotImplemented "Instruction FDIV not yet implemented."
	089 NotImplemented "Instruction FCMP not yet implemented."
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 NotImplemented "Instruction FABS not yet implemented."
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 NotImplemented "Instruction FCSEL not yet implemented."
	094 NotImplemented "Instruction FCSEL not yet implemented."
	095 NotImplemented "Instruction CSEL not yet implemented."
	096 Add W21, W21, 1
	097 Subtract X23, X23, 1
	098 Add X24, X24, 392
	099 Add W31, W22, 1
	100 Move S0, 0.5
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 NotImplemented "Instruction CSET not yet implemented."
	103 Add W20, W22, W8
	104 Move W20, W31
	105 Move W0, W20
	106 Move X20, [X31+80]
	107 Move X19, [X31+88]
	108 Move X22, [X31+64]
	109 Move X21, [X31+72]
	110 Move X24, [X31+48]
	111 Move X23, [X31+56]
	112 Move X30, [X31+32]
	113 Move D9, [X31+16]
	114 Move D8, [X31+24]
	115 Move D11, [X31+96]
	116 Move D10, [X31+104]
	117 Return X0
	118 Move S1, 0.5
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 NotImplemented "Instruction CSET not yet implemented."
	121 Add W0, W8, W21
	122 Call 0x1C17F20
	123 Call 0x1C17F28

Method: System.Int32 FindNearestLine(UnityEngine.Vector2 position)

Disassembly:
	0x03CCAF64 BL 0x1C16D08
	0x03CCAF68 BL 0x1C16F10
	0x03CCAF6C MOV X1, X31
	0x03CCAF70 MOV X19, X0
	0x03CCAF74 BL 0x3315FB8
	0x03CCAF78 ADRP X0, 0x497000
	0x03CCAF7C LDR X0, [X0 + 0xDE8]
	0x03CCAF80 BL 0x1C16D08
	0x03CCAF84 MOV X1, X0
	0x03CCAF88 MOV X0, X19
	0x03CCAF8C BL 0x1C16DEC
	0x03CCAF90 STR X30, [X31 - 0x30]!
	0x03CCAF94 STP X22, X21, [X31 + 0x10]
	0x03CCAF98 STP X20, X19, [X31 + 0x20]
	0x03CCAF9C TBNZ X2, 0x1F, 0x3CCB028
	0x03CCAFA0 MOV W19, W2
	0x03CCAFA4 MOV W20, W1
	0x03CCAFA8 MOV X21, X0
	0x03CCAFAC BL 0x3CC98D0
	0x03CCAFB0 CBZ X0, 0x3CCB020
	0x03CCAFB4 LDR W8, [X0 + 0x10]
	0x03CCAFB8 CMP W8, W19
	0x03CCAFBC B.LE 0x3CCB028
	0x03CCAFC0 MOVZ W8, 0x188
	0x03CCAFC4 UMADDL X8, X19, X8, X31
	0x03CCAFC8 ADD X22, X8, 0x20
	0x03CCAFCC MOV X0, X21
	0x03CCAFD0 BL 0x3CC98D0
	0x03CCAFD4 CBZ X0, 0x3CCB020
	0x03CCAFD8 LDR X8, [X0 + 0x30]
	0x03CCAFDC CBZ X8, 0x3CCB020
	0x03CCAFE0 LDR W9, [X8 + 0x18]
	0x03CCAFE4 CMP W19, W9
	0x03CCAFE8 B.CS 0x3CCB024
	0x03CCAFEC LDRH W8, [X8, X22, LSL]
	0x03CCAFF0 CMP W8, W20, UXTH
	0x03CCAFF4 B.EQ 0x3CCB00C
	0x03CCAFF8 CMP W19, 0x0
	0x03CCAFFC SUB W19, W19, 0x1
	0x03CCB000 SUB X22, X22, 0x188
	0x03CCB004 B.GT 0x3CCAFCC
	0x03CCB008 MOVN W19, 0x0
	0x03CCB00C MOV W0, W19
	0x03CCB010 LDP X20, X19, [X31 + 0x20]
	0x03CCB014 LDP X22, X21, [X31 + 0x10]
	0x03CCB018 LDR X30, [X31], #0x30
	0x03CCB01C RET
	0x03CCB020 BL 0x1C16F20
	0x03CCB024 BL 0x1C16F28
	0x03CCB028 ADRP X0, 0x430000
	0x03CCB02C LDR X0, [X0 + 0x760]
	0x03CCB030 BL 0x1C16D08

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move V8, V1
	009 Move X19, X0
	010 Call TextHandle.get_textInfo, X0
	011 Compare X0, 0
	012 JumpIfEqual {49}
	013 Move W8, 0x7F800000
	014 Move X22, X31
	015 Move X21, X31
	016 Move TEMP, 0
	017 Not TEMP
	018 Move W20, TEMP
	019 Move S9, W8
	020 NotImplemented "Instruction LDRSW not yet implemented."
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X0, X19
	023 Call TextHandle.get_textInfo, X0
	024 Compare X0, 0
	025 JumpIfEqual {49}
	026 Move X8, [X0+72]
	027 Compare X8, 0
	028 JumpIfEqual {49}
	029 Move W9, [X8+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Add X8, X8, X22
	032 Move V0, [X8+80]
	033 Move V1, [X8+88]
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 NotImplemented "Instruction FABD not yet implemented."
	037 NotImplemented "Instruction FABD not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 NotImplemented "Instruction FCSEL not yet implemented."
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Move X0, X19
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 NotImplemented "Instruction FCSEL not yet implemented."
	044 Add X21, X21, 1
	045 Call TextHandle.get_textInfo, X0
	046 Add X22, X22, 96
	047 Compare X0, 0
	048 JumpIfNotEqual {20}
	049 Call 0x1C17F20
	050 Move W20, W21
	051 Move W0, W20
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X30, [X31+16]
	057 Move D9, [X31+64]
	058 Move D8, [X31+72]
	059 Return X0
	060 Call 0x1C17F28

Method: System.Int32 FindNearestCharacterOnLine(UnityEngine.Vector2 position, System.Int32 line, System.Boolean visibleOnly)

Disassembly:
	0x03CCB034 BL 0x1C16F10
	0x03CCB038 MOV X1, X31
	0x03CCB03C MOV X19, X0
	0x03CCB040 BL 0x3315FB8
	0x03CCB044 ADRP X0, 0x496000
	0x03CCB048 LDR X0, [X0 + 0xDF0]
	0x03CCB04C BL 0x1C16D08
	0x03CCB050 MOV X1, X0
	0x03CCB054 MOV X0, X19
	0x03CCB058 BL 0x1C16DEC
	0x03CCB05C STP X30, X19, [X31 - 0x10]!
	0x03CCB060 MOV X19, X0
	0x03CCB064 BL 0x3CCB074
	0x03CCB068 LDR V0, [X19 + 0x10]
	0x03CCB06C LDP X30, X19, [X31], #0x10
	0x03CCB070 RET
	0x03CCB074 STR X30, [X31 - 0x30]!
	0x03CCB078 STP X22, X21, [X31 + 0x10]
	0x03CCB07C STP X20, X19, [X31 + 0x20]
	0x03CCB080 ADRP X21, 0x71C000
	0x03CCB084 ADRP X22, 0x496000
	0x03CCB088 LDRB W8, [X21 + 0x379]
	0x03CCB08C LDR X22, [X22 + 0xDD8]
	0x03CCB090 MOV X20, X1
	0x03CCB094 MOV X19, X0
	0x03CCB098 TBNZ X8, 0x0, 0x3CCB0B0
	0x03CCB09C ADRP X0, 0x496000
	0x03CCB0A0 LDR X0, [X0 + 0xDD8]
	0x03CCB0A4 BL 0x1C16CF4
	0x03CCB0A8 MOVZ W8, 0x1
	0x03CCB0AC STRB W8, [X21 + 0x379]
	0x03CCB0B0 LDR X0, [X22]
	0x03CCB0B4 LDR W8, [X0 + 0xE0]
	0x03CCB0B8 CBNZ W8, 0x3CCB0C0
	0x03CCB0BC BL 0x1C16DFC
	0x03CCB0C0 BL 0x3CC9A68
	0x03CCB0C4 MOV X1, X0
	0x03CCB0C8 MOV X0, X20
	0x03CCB0CC MOV X2, X31
	0x03CCB0D0 BL 0x3CB85B0
	0x03CCB0D4 STP S0, S1, [X19 + 0x10]
	0x03CCB0D8 LDP X20, X19, [X31 + 0x20]
	0x03CCB0DC LDP X22, X21, [X31 + 0x10]
	0x03CCB0E0 LDR X30, [X31], #0x30
	0x03CCB0E4 RET
	0x03CCB0E8 STP X30, X19, [X31 - 0x10]!
	0x03CCB0EC MOV X19, X0
	0x03CCB0F0 BL 0x3CCB074
	0x03CCB0F4 LDR V0, [X19 + 0x14]
	0x03CCB0F8 LDP X30, X19, [X31], #0x10
	0x03CCB0FC RET
	0x03CCB100 STP X30, X21, [X31 - 0x20]!
	0x03CCB104 STP X20, X19, [X31 + 0x10]
	0x03CCB108 MOV X20, X1
	0x03CCB10C MOV X19, X0
	0x03CCB110 BL 0x3CC9B20
	0x03CCB114 MOV W21, W0
	0x03CCB118 MOV X0, X19
	0x03CCB11C BL 0x3CC98D0
	0x03CCB120 TBZ X21, 0x0, 0x3CCB15C
	0x03CCB124 CBZ X0, 0x3CCB168
	0x03CCB128 MOVZ W8, 0x1
	0x03CCB12C STRB W8, [X0 + 0x60]
	0x03CCB130 MOV X0, X19
	0x03CCB134 BL 0x3CC98D0
	0x03CCB138 MOV X1, X0
	0x03CCB13C MOV X0, X20
	0x03CCB140 MOV X2, X31
	0x03CCB144 BL 0x3CB8348
	0x03CCB148 STR X20, [X19 + 0x28]
	0x03CCB14C MOV X0, X19
	0x03CCB150 LDP X20, X19, [X31 + 0x10]
	0x03CCB154 LDP X30, X21, [X31], #0x20
	0x03CCB158 B 0x3CC98D0
	0x03CCB15C LDP X20, X19, [X31 + 0x10]
	0x03CCB160 LDP X30, X21, [X31], #0x20
	0x03CCB164 RET
	0x03CCB168 BL 0x1C16F20
	0x03CCB16C STP X30, X21, [X31 - 0x20]!
	0x03CCB170 STP X20, X19, [X31 + 0x10]
	0x03CCB174 ADRP X19, 0x71C000
	0x03CCB178 ADRP X21, 0x496000
	0x03CCB17C ADRP X20, 0x496000
	0x03CCB180 LDRB W8, [X19 + 0x37A]
	0x03CCB184 LDR X21, [X21 + 0x908]
	0x03CCB188 LDR X20, [X20 + 0xDD8]
	0x03CCB18C TBNZ X8, 0x0, 0x3CCB1B0
	0x03CCB190 ADRP X0, 0x496000
	0x03CCB194 LDR X0, [X0 + 0x908]
	0x03CCB198 BL 0x1C16CF4
	0x03CCB19C ADRP X0, 0x496000
	0x03CCB1A0 LDR X0, [X0 + 0xDD8]
	0x03CCB1A4 BL 0x1C16CF4
	0x03CCB1A8 MOVZ W8, 0x1
	0x03CCB1AC STRB W8, [X19 + 0x37A]
	0x03CCB1B0 LDR X0, [X21]
	0x03CCB1B4 BL 0x1C16F10
	0x03CCB1B8 MOV X1, X31
	0x03CCB1BC MOV X19, X0
	0x03CCB1C0 BL 0x3CB0588
	0x03CCB1C4 LDR X8, [X20]
	0x03CCB1C8 LDR X8, [X8 + 0xB8]
	0x03CCB1CC STR X19, [X8 + 0x8]
	0x03CCB1D0 LDP X20, X19, [X31 + 0x10]
	0x03CCB1D4 LDP X30, X21, [X31], #0x20
	0x03CCB1D8 RET
	0x03CCB1DC STR X30, [X31 - 0x10]!
	0x03CCB1E0 LDR X11, [X0 + 0x58]
	0x03CCB1E4 STRB W31, [X0 + 0x61]
	0x03CCB1E8 STP X31, X31, [X0 + 0x18]
	0x03CCB1EC STR X31, [X0 + 0x10]
	0x03CCB1F0 STR W31, [X0 + 0x28]
	0x03CCB1F4 CBZ X11, 0x3CCB238
	0x03CCB1F8 LDR W8, [X11 + 0x18]
	0x03CCB1FC UBFM X9, X8, 0x20, 0x1F
	0x03CCB200 CMP X9, 0x1
	0x03CCB204 B.LT 0x3CCB22C
	0x03CCB208 MOV X9, X31
	0x03CCB20C SXTW X10, W8
	0x03CCB210 ADD X11, X11, 0x20
	0x03CCB214 CMP X9, X8
	0x03CCB218 B.CS 0x3CCB234
	0x03CCB21C ADD X9, X9, 0x1
	0x03CCB220 CMP X9, X10
	0x03CCB224 STR W31, [X11], #0x50
	0x03CCB228 B.LT 0x3CCB214
	0x03CCB22C LDR X30, [X31], #0x10
	0x03CCB230 RET
	0x03CCB234 BL 0x1C16F28
	0x03CCB238 BL 0x1C16F20
	0x03CCB23C STP X30, X25, [X31 - 0x40]!
	0x03CCB240 STP X24, X23, [X31 + 0x10]
	0x03CCB244 STP X22, X21, [X31 + 0x20]
	0x03CCB248 STP X20, X19, [X31 + 0x30]
	0x03CCB24C ADRP X21, 0x71C000
	0x03CCB250 LDRB W8, [X21 + 0x37C]
	0x03CCB254 MOV W20, W1
	0x03CCB258 MOV X19, X0
	0x03CCB25C TBNZ X8, 0x0, 0x3CCB274
	0x03CCB260 ADRP X0, 0x496000
	0x03CCB264 LDR X0, [X0 + 0x6C8]
	0x03CCB268 BL 0x1C16CF4
	0x03CCB26C MOVZ W8, 0x1
	0x03CCB270 STRB W8, [X21 + 0x37C]
	0x03CCB274 LDR X23, [X19 + 0x58]
	0x03CCB278 CBZ X23, 0x3CCB2DC
	0x03CCB27C ADRP X22, 0x496000
	0x03CCB280 LDR X22, [X22 + 0x6C8]
	0x03CCB284 MOV X21, X31
	0x03CCB288 MOVZ W24, 0x20
	0x03CCB28C AND W20, W20, 0x1
	0x03CCB290 LDR W8, [X23 + 0x18]
	0x03CCB294 CMP X21, W8, SXTW
	0x03CCB298 B.GE 0x3CCB2E0
	0x03CCB29C LDR X0, [X22]
	0x03CCB2A0 LDR W9, [X0 + 0xE0]
	0x03CCB2A4 CBNZ W9, 0x3CCB2B0
	0x03CCB2A8 BL 0x1C16DFC
	0x03CCB2AC LDR W8, [X23 + 0x18]
	0x03CCB2B0 CMP X21, X8
	0x03CCB2B4 B.CS 0x3CCB2F4
	0x03CCB2B8 ADD X0, X23, X24
	0x03CCB2BC MOV W1, W20
	0x03CCB2C0 MOV X2, X31
	0x03CCB2C4 ADD X21, X21, 0x1
	0x03CCB2C8 ADD X25, X24, 0x50
	0x03CCB2CC BL 0x3CAABB8
	0x03CCB2D0 LDR X23, [X19 + 0x58]
	0x03CCB2D4 MOV X24, X25
	0x03CCB2D8 CBNZ X23, 0x3CCB290
	0x03CCB2DC BL 0x1C16F20
	0x03CCB2E0 LDP X20, X19, [X31 + 0x30]
	0x03CCB2E4 LDP X22, X21, [X31 + 0x20]
	0x03CCB2E8 LDP X24, X23, [X31 + 0x10]
	0x03CCB2EC LDP X30, X25, [X31], #0x40
	0x03CCB2F0 RET

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+136], X25
	012 Move [X31+144], X24
	013 Move [X31+152], X23
	014 Move [X31+160], X22
	015 Move [X31+168], X21
	016 Move [X31+176], X20
	017 Move [X31+184], X19
	018 Move X22, 0x71D000
	019 Move W8, [X22+886]
	020 Move W20, W2
	021 Move W21, W1
	022 Move X19, X0
	023 Move [X31+56], S0
	024 Move [X31+64], S1
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {34}
	029 Move X0, 0x497000
	030 Move X0, [X0+3544]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+886], W8
	034 Move X0, X19
	035 Call TextHandle.get_textInfo, X0
	036 Compare X0, 0
	037 JumpIfEqual {207}
	038 Move X8, [X0+72]
	039 Compare X8, 0
	040 JumpIfEqual {207}
	041 Move W9, [X8+24]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X23, W21
	044 Move W9, 96
	045 NotImplemented "Instruction MADD not yet implemented."
	046 Move W22, [X8+56]
	047 Move X0, X19
	048 Call TextHandle.get_textInfo, X0
	049 Compare X0, 0
	050 JumpIfEqual {207}
	051 Move X8, [X0+72]
	052 Compare X8, 0
	053 JumpIfEqual {207}
	054 Move W9, [X8+24]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W9, 96
	057 NotImplemented "Instruction MADD not yet implemented."
	058 Move W21, [X8+64]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W20, W21
	061 Move W9, 0x7F800000
	062 Move [X31+48], W9
	063 Move X25, 0x497000
	064 Move X25, [X25+3544]
	065 Move S15, [X31+56]
	066 Move S12, [X31+60]
	067 Xor W8, W20, 1
	068 Move W23, 392
	069 Xor W24, W8, 1
	070 Move W20, W21
	071 Move X0, X19
	072 Call TextHandle.get_textInfo, X0
	073 Compare X0, 0
	074 JumpIfEqual {207}
	075 Move X9, [X0+48]
	076 Compare X9, 0
	077 JumpIfEqual {207}
	078 Move W8, [X9+24]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 NotImplemented "Instruction SMADDL not yet implemented."
	081 Move W10, [X8+416]
	082 And W31, W10, 1
	083 NotImplemented "Instruction CSET not yet implemented."
	084 And W10, W10, W24
	085 Move TEMP, X10
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfEqual {185}
	089 Move X10, W22
	090 NotImplemented "Instruction MADD not yet implemented."
	091 NotImplemented "Instruction LDRH not yet implemented."
	092 NotImplemented "Instruction CMP not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move X0, [X25]
	095 Move V10, [X8+292]
	096 Move V11, [X8+296]
	097 Move V8, [X8+300]
	098 Move V13, [X8+304]
	099 Move V14, [X8+308]
	100 Move W9, [X0+224]
	101 Move V9, [X8+312]
	102 Compare W9, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move S0, [X31+56]
	106 Move S1, [X31+60]
	107 Move S2, W31
	108 Move V3, V10
	109 Move V4, V11
	110 Move V5, V8
	111 Move [X31+20], S14
	112 Move [X31+28], S9
	113 Move [X31+16], S13
	114 Move [X31+8], W31
	115 Move [X31], S10
	116 Move [X31+8], S14
	117 Call TextHandle.PointIntersectRectangle, X0, X1, X2, X3, X4
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfEqual {206}
	122 Move X0, [X25]
	123 Move W8, [X0+224]
	124 Compare W8, 0
	125 JumpIfNotEqual {127}
	126 Call 0x1C17DFC
	127 Move S0, W31
	128 Move S5, W31
	129 Move [X31+8], S0
	130 Move V0, V10
	131 Move V1, V11
	132 Move V2, V8
	133 Move V3, V10
	134 Move V4, V14
	135 Move [X31], S15
	136 Move [X31+8], S12
	137 Call TextHandle.DistanceToLine, X0, X1, X2
	138 Move [X31+52], S8
	139 Move V8, V0
	140 Move S0, W31
	141 Move [X31+4], S12
	142 Move [X31+12], S0
	143 Move S2, W31
	144 Move V0, V10
	145 Move V1, V14
	146 Move V3, V13
	147 Move V4, V14
	148 Move V5, V9
	149 Move [X31], S15
	150 Call TextHandle.DistanceToLine, X0, X1, X2
	151 Move V2, V9
	152 Move V9, V0
	153 Move S0, W31
	154 Move [X31+4], S12
	155 Move [X31+12], S0
	156 Move S5, W31
	157 Move V0, V13
	158 Move V1, V14
	159 Move V3, V13
	160 Move V4, V11
	161 Move [X31], S15
	162 Call TextHandle.DistanceToLine, X0, X1, X2
	163 Move V5, [X31+52]
	164 Move V14, V0
	165 Move S0, W31
	166 Move [X31+4], S12
	167 Move [X31+12], S0
	168 Move S2, W31
	169 Move V0, V13
	170 Move V1, V11
	171 Move V3, V10
	172 Move V4, V11
	173 Move [X31], S15
	174 Call TextHandle.DistanceToLine, X0, X1, X2
	175 NotImplemented "Instruction FCMP not yet implemented."
	176 NotImplemented "Instruction FCSEL not yet implemented."
	177 NotImplemented "Instruction FCMP not yet implemented."
	178 NotImplemented "Instruction FCSEL not yet implemented."
	179 NotImplemented "Instruction FCMP not yet implemented."
	180 NotImplemented "Instruction FCSEL not yet implemented."
	181 Move V1, [X31+48]
	182 NotImplemented "Instruction FCMP not yet implemented."
	183 Move W20, W22
	184 Move [X31+48], S0
	185 Add W22, W22, 1
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move W0, W20
	188 Move X20, [X31+176]
	189 Move X19, [X31+184]
	190 Move X22, [X31+160]
	191 Move X21, [X31+168]
	192 Move X24, [X31+144]
	193 Move X23, [X31+152]
	194 Move X30, [X31+128]
	195 Move X25, [X31+136]
	196 Move D9, [X31+112]
	197 Move D8, [X31+120]
	198 Move D11, [X31+96]
	199 Move D10, [X31+104]
	200 Move D13, [X31+80]
	201 Move D12, [X31+88]
	202 Move D15, [X31+64]
	203 Move D14, [X31+72]
	204 Add X31, X31, 192
	205 Return X0
	206 Move W20, W22
	207 Call 0x1C17F20
	208 Call 0x1C17F28

Method: System.Int32 FindIntersectingLink(UnityEngine.Vector3 position, System.Boolean inverseYAxis = True)

Disassembly:
	0x03CCB820 ADRP X0, 0x496000
	0x03CCB824 LDR X0, [X0 + 0xE10]
	0x03CCB828 BL 0x1C16CF4
	0x03CCB82C ADRP X0, 0x496000
	0x03CCB830 LDR X0, [X0 + 0xE18]
	0x03CCB834 BL 0x1C16CF4
	0x03CCB838 ADRP X0, 0x496000
	0x03CCB83C LDR X0, [X0 + 0xE20]
	0x03CCB840 BL 0x1C16CF4
	0x03CCB844 ADRP X0, 0x496000
	0x03CCB848 LDR X0, [X0 + 0xE28]
	0x03CCB84C BL 0x1C16CF4
	0x03CCB850 ADRP X0, 0x496000
	0x03CCB854 LDR X0, [X0 + 0xE30]
	0x03CCB858 BL 0x1C16CF4
	0x03CCB85C ADRP X0, 0x496000
	0x03CCB860 LDR X0, [X0 + 0x260]
	0x03CCB864 BL 0x1C16CF4
	0x03CCB868 MOVZ W8, 0x1
	0x03CCB86C STRB W8, [X20 + 0x380]
	0x03CCB870 CBZ X19, 0x3CCBCC4
	0x03CCB874 ADRP X26, 0x496000
	0x03CCB878 LDR X26, [X26 + 0x260]
	0x03CCB87C MOV X0, X19
	0x03CCB880 MOV X1, X31
	0x03CCB884 BL 0x3CA3338
	0x03CCB888 LDR X8, [X26]
	0x03CCB88C MOV W20, W0
	0x03CCB890 LDR W9, [X8 + 0xE0]
	0x03CCB894 CBNZ W9, 0x3CCB8A4
	0x03CCB898 MOV X0, X8
	0x03CCB89C BL 0x1C16DFC
	0x03CCB8A0 LDR X8, [X26]
	0x03CCB8A4 LDR X8, [X8 + 0xB8]
	0x03CCB8A8 LDR X0, [X8]
	0x03CCB8AC CBZ X0, 0x3CCBCC4
	0x03CCB8B0 ADRP X8, 0x496000
	0x03CCB8B4 LDR X8, [X8 + 0xE08]
	0x03CCB8B8 MOV W1, W20
	0x03CCB8BC LDR X2, [X8]
	0x03CCB8C0 BL 0x2A32D00
	0x03CCB8C4 TBZ X0, 0x0, 0x3CCBB50
	0x03CCB8C8 LDR X0, [X26]
	0x03CCB8CC LDR W8, [X0 + 0xE0]
	0x03CCB8D0 CBNZ W8, 0x3CCB8DC
	0x03CCB8D4 BL 0x1C16DFC
	0x03CCB8D8 LDR X0, [X26]
	0x03CCB8DC LDR X8, [X0 + 0xB8]
	0x03CCB8E0 LDR X0, [X8]
	0x03CCB8E4 CBZ X0, 0x3CCBCC4
	0x03CCB8E8 ADRP X8, 0x496000
	0x03CCB8EC LDR X8, [X8 + 0xE28]
	0x03CCB8F0 MOV W1, W20
	0x03CCB8F4 LDR X2, [X8]
	0x03CCB8F8 ADD X8, X31, 0x0
	0x03CCB8FC BL 0x2A32988
	0x03CCB900 LDP W21, W22, [X31]
	0x03CCB904 LDP W23, W27, [X31 + 0x8]
	0x03CCB908 LDP X24, X28, [X31 + 0x10]
	0x03CCB90C MOV X0, X19
	0x03CCB910 MOV X1, X31
	0x03CCB914 BL 0x3CA9FFC
	0x03CCB918 CMP W21, W0
	0x03CCB91C B.NE 0x3CCB948
	0x03CCB920 MOV X0, X19
	0x03CCB924 MOV X1, X31
	0x03CCB928 BL 0x3C9EB48
	0x03CCB92C CMP W22, W0
	0x03CCB930 B.NE 0x3CCB948
	0x03CCB934 MOV X0, X19
	0x03CCB938 MOV X1, X31
	0x03CCB93C BL 0x3C9EB80
	0x03CCB940 CMP W23, W0
	0x03CCB944 B.EQ 0x3CCBCA4
	0x03CCB948 MOV X0, X19
	0x03CCB94C MOV X1, X31
	0x03CCB950 BL 0x3CA9FFC
	0x03CCB954 CMP W21, W0
	0x03CCB958 B.EQ 0x3CCBA04
	0x03CCB95C LDR X0, [X26]
	0x03CCB960 LDR W8, [X0 + 0xE0]
	0x03CCB964 CBNZ W8, 0x3CCB970
	0x03CCB968 BL 0x1C16DFC
	0x03CCB96C LDR X0, [X26]
	0x03CCB970 LDR X8, [X0 + 0xB8]
	0x03CCB974 LDR X0, [X8 + 0x8]
	0x03CCB978 CBZ X0, 0x3CCBCC4
	0x03CCB97C ADRP X8, 0x496000
	0x03CCB980 LDR X8, [X8 + 0xE18]
	0x03CCB984 MOV W1, W21
	0x03CCB988 LDR X2, [X8]
	0x03CCB98C BL 0x2A14A88
	0x03CCB990 MOV X0, X19
	0x03CCB994 MOV X1, X31
	0x03CCB998 BL 0x3CA9FFC
	0x03CCB99C LDR X8, [X26]
	0x03CCB9A0 LDR X8, [X8 + 0xB8]
	0x03CCB9A4 LDR X8, [X8 + 0x8]
	0x03CCB9A8 CBZ X8, 0x3CCBCC4
	0x03CCB9AC ADRP X9, 0x496000
	0x03CCB9B0 LDR X9, [X9 + 0x688]
	0x03CCB9B4 MOV W21, W0
	0x03CCB9B8 MOV X0, X8
	0x03CCB9BC MOV W1, W21
	0x03CCB9C0 LDR X2, [X9]
	0x03CCB9C4 BL 0x2A13880
	0x03CCB9C8 TBNZ X0, 0x0, 0x3CCBA04
	0x03CCB9CC LDR X0, [X26]
	0x03CCB9D0 LDR W8, [X0 + 0xE0]
	0x03CCB9D4 CBNZ W8, 0x3CCB9E0
	0x03CCB9D8 BL 0x1C16DFC
	0x03CCB9DC LDR X0, [X26]
	0x03CCB9E0 LDR X8, [X0 + 0xB8]
	0x03CCB9E4 LDR X0, [X8 + 0x8]
	0x03CCB9E8 CBZ X0, 0x3CCBCC4
	0x03CCB9EC ADRP X8, 0x496000
	0x03CCB9F0 LDR X8, [X8 + 0x680]
	0x03CCB9F4 MOV W1, W21
	0x03CCB9F8 MOV X2, X19
	0x03CCB9FC LDR X3, [X8]
	0x03CCBA00 BL 0x2A1368C
	0x03CCBA04 MOV X0, X19
	0x03CCBA08 MOV X1, X31
	0x03CCBA0C BL 0x3C9EB48
	0x03CCBA10 CMP W22, W0
	0x03CCBA14 B.NE 0x3CCBA2C
	0x03CCBA18 MOV X0, X19
	0x03CCBA1C MOV X1, X31
	0x03CCBA20 BL 0x3C9EB80
	0x03CCBA24 CMP W23, W0
	0x03CCBA28 B.EQ 0x3CCBB08
	0x03CCBA2C LDR X0, [X26]
	0x03CCBA30 LDR W8, [X0 + 0xE0]
	0x03CCBA34 CBNZ W8, 0x3CCBA40
	0x03CCBA38 BL 0x1C16DFC
	0x03CCBA3C LDR X0, [X26]
	0x03CCBA40 LDR X8, [X0 + 0xB8]
	0x03CCBA44 LDR X0, [X8 + 0x10]
	0x03CCBA48 CBZ X0, 0x3CCBCC4
	0x03CCBA4C ADRP X8, 0x496000
	0x03CCBA50 LDR X8, [X8 + 0xE20]
	0x03CCBA54 MOV X1, X24
	0x03CCBA58 LDR X2, [X8]
	0x03CCBA5C BL 0x2A4F714
	0x03CCBA60 MOV X0, X19
	0x03CCBA64 MOV X1, X31
	0x03CCBA68 BL 0x3C9EB48
	0x03CCBA6C MOV W22, W0
	0x03CCBA70 MOV X0, X19
	0x03CCBA74 MOV X1, X31
	0x03CCBA78 BL 0x3C9EB80
	0x03CCBA7C MOV W23, W0
	0x03CCBA80 MOV X0, X19
	0x03CCBA84 MOV X1, X31
	0x03CCBA88 BL 0x3C9EB80
	0x03CCBA8C MOV W25, W0
	0x03CCBA90 MOV X0, X19
	0x03CCBA94 MOV X1, X31
	0x03CCBA98 BL 0x3C9EB48
	0x03CCBA9C LDR X8, [X26]
	0x03CCBAA0 LDR X8, [X8 + 0xB8]
	0x03CCBAA4 LDR X8, [X8 + 0x10]
	0x03CCBAA8 CBZ X8, 0x3CCBCC4
	0x03CCBAAC ADRP X9, 0x496000
	0x03CCBAB0 LDR X9, [X9 + 0xE10]
	0x03CCBAB4 MOV W24, W0
	0x03CCBAB8 BFM X24, X25, 0x20, 0x1F
	0x03CCBABC MOV X0, X8
	0x03CCBAC0 LDR X2, [X9]
	0x03CCBAC4 MOV X1, X24
	0x03CCBAC8 BL 0x2A4E524
	0x03CCBACC TBNZ X0, 0x0, 0x3CCBB08
	0x03CCBAD0 LDR X0, [X26]
	0x03CCBAD4 LDR W8, [X0 + 0xE0]
	0x03CCBAD8 CBNZ W8, 0x3CCBAE4
	0x03CCBADC BL 0x1C16DFC
	0x03CCBAE0 LDR X0, [X26]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X29
	011 Move [X31+136], X30
	012 Move [X31+144], X28
	013 Move [X31+152], X27
	014 Move [X31+160], X26
	015 Move [X31+168], X25
	016 Move [X31+176], X24
	017 Move [X31+184], X23
	018 Move [X31+192], X22
	019 Move [X31+200], X21
	020 Move [X31+208], X20
	021 Move [X31+216], X19
	022 Move X21, 0x71D000
	023 Move W8, [X21+887]
	024 Move W20, W1
	025 Move V9, V1
	026 Move X19, X0
	027 Move [X31+56], S0
	028 Move [X31+64], S2
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {38}
	033 Move X0, 0x497000
	034 Move X0, [X0+3544]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+887], W8
	038 Move TEMP, X20
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {47}
	042 Move X8, [X19+40]
	043 Compare X8, 0
	044 JumpIfEqual {201}
	045 Move V0, [X8+36]
	046 Subtract S9, S0, S9
	047 Move X0, X19
	048 Call TextHandle.get_textInfo, X0
	049 Compare X0, 0
	050 JumpIfEqual {201}
	051 Move X20, X31
	052 Move W26, 392
	053 Move X27, 1
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X0, X19
	057 Call TextHandle.get_textInfo, X0
	058 Compare X0, 0
	059 JumpIfEqual {201}
	060 Move X8, [X0+64]
	061 Compare X8, 0
	062 JumpIfEqual {201}
	063 Move W9, [X8+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move W9, 48
	066 NotImplemented "Instruction MADD not yet implemented."
	067 Move X9, 0x70E000
	068 Move W9, [X9+1923]
	069 Move W28, [X8+44]
	070 Move W21, [X8+48]
	071 Compare W9, 0
	072 JumpIfNotEqual {79}
	073 Move X0, 0x429000
	074 Move X0, [X0+1440]
	075 Call 0x1C17CF4
	076 Move X8, 0x70E000
	077 Move W9, 1
	078 Move [X8+1923], W9
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X8, 0x429000
	081 Move X8, [X8+1440]
	082 Move W24, W31
	083 Subtract W25, W21, 1
	084 Move X23, X28
	085 ShiftRight X23, 32
	086 And X23, X23, 0x7FFFFFFF
	087 Move X8, [X8]
	088 Move X29, X21
	089 Move X8, [X8+184]
	090 Move S8, [X8+4]
	091 Move S13, [X8+8]
	092 Move V12, [X8]
	093 Move V11, V8
	094 Move V14, V13
	095 Move X0, X19
	096 Call TextHandle.get_textInfo, X0
	097 Compare X0, 0
	098 JumpIfEqual {201}
	099 Move X8, [X0+48]
	100 Compare X8, 0
	101 JumpIfEqual {201}
	102 Move W9, [X8+24]
	103 NotImplemented "Instruction CMP not yet implemented."
	104 NotImplemented "Instruction SBFM not yet implemented."
	105 NotImplemented "Instruction MADD not yet implemented."
	106 Move W22, [X8+108]
	107 Move V10, [X8+304]
	108 Move V15, [X8+332]
	109 Move TEMP, X24
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfEqual {146}
	113 Move V12, [X8+292]
	114 Move V8, [X8+340]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move S14, W31
	117 Move X8, 0x497000
	118 Move X8, [X8+3544]
	119 Move X0, [X8]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move S0, [X31+56]
	125 Move S2, [X31+60]
	126 Move S5, W31
	127 Move V1, V9
	128 Move V3, V12
	129 Move V4, V8
	130 Move [X31+24], W31
	131 Move [X31+16], S10
	132 Move [X31+24], S15
	133 Move [X31+8], W31
	134 Move [X31], S12
	135 Move [X31+8], S15
	136 Move S14, W31
	137 Call TextHandle.PointIntersectRectangle, X0, X1, X2, X3, X4
	138 Move W24, W31
	139 Move S13, W31
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {191}
	144 Move V11, V15
	145 Move S13, W31
	146 Compare X25, 0
	147 JumpIfEqual {165}
	148 Move X0, X19
	149 Call TextHandle.get_textInfo, X0
	150 Compare X0, 0
	151 JumpIfEqual {201}
	152 Move X8, [X0+48]
	153 Compare X8, 0
	154 JumpIfEqual {201}
	155 Move W9, [X8+24]
	156 Add X10, X28, 1
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Add X9, X23, X27
	159 NotImplemented "Instruction SBFM not yet implemented."
	160 NotImplemented "Instruction MADD not yet implemented."
	161 Move W8, [X8+108]
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move W24, 1
	164 Move V15, V11
	165 Move X8, 0x497000
	166 Move X8, [X8+3544]
	167 Move X0, [X8]
	168 Move W8, [X0+224]
	169 Compare W8, 0
	170 JumpIfNotEqual {172}
	171 Call 0x1C17DFC
	172 Move S0, [X31+56]
	173 Move S2, [X31+60]
	174 Move V1, V9
	175 Move V3, V12
	176 Move V4, V8
	177 Move V5, V13
	178 Move [X31+24], W31
	179 Move [X31+16], S10
	180 Move [X31+24], S15
	181 Move [X31+4], S11
	182 Move [X31+12], S14
	183 Move [X31], S12
	184 Call TextHandle.PointIntersectRectangle, X0, X1, X2, X3, X4
	185 Move W24, W31
	186 Move V15, V11
	187 Move TEMP, X0
	188 And TEMP, TEMP, 1
	189 Compare TEMP, 1
	190 JumpIfEqual {205}
	191 Subtract X25, X25, 1
	192 Add X23, X23, X27
	193 Subtract X29, X29, 1
	194 Add X28, X28, 1
	195 Move V11, V15
	196 Move X0, X19
	197 Add X20, X20, 1
	198 Call TextHandle.get_textInfo, X0
	199 Compare X0, 0
	200 JumpIfNotEqual {54}
	201 Call 0x1C17F20
	202 Move TEMP, 0
	203 Not TEMP
	204 Move W20, TEMP
	205 Move W0, W20
	206 Move X20, [X31+208]
	207 Move X19, [X31+216]
	208 Move X22, [X31+192]
	209 Move X21, [X31+200]
	210 Move X24, [X31+176]
	211 Move X23, [X31+184]
	212 Move X26, [X31+160]
	213 Move X25, [X31+168]
	214 Move X28, [X31+144]
	215 Move X27, [X31+152]
	216 Move X29, [X31+128]
	217 Move X30, [X31+136]
	218 Move D9, [X31+112]
	219 Move D8, [X31+120]
	220 Move D11, [X31+96]
	221 Move D10, [X31+104]
	222 Move D13, [X31+80]
	223 Move D12, [X31+88]
	224 Move D15, [X31+64]
	225 Move D14, [X31+72]
	226 Add X31, X31, 224
	227 Return X0
	228 Call 0x1C17F28

Method: System.Boolean PointIntersectRectangle(UnityEngine.Vector3 m, UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 d)

Disassembly:
	0x03CCB698 CMP W8, 0x1
	0x03CCB69C CSINC W8, W8, W31, HI
	0x03CCB6A0 SUB W8, W8, 0x1
	0x03CCB6A4 STRB W8, [X0 + 0x4]
	0x03CCB6A8 B 0x3CCB7B0
	0x03CCB6AC SUB W9, W1, 0x1
	0x03CCB6B0 CMP W9, 0x7
	0x03CCB6B4 MOV W8, W31
	0x03CCB6B8 B.HI 0x3CCB71C
	0x03CCB6BC ADRP X10, 0xFFFFFFFFFCECC000
	0x03CCB6C0 ADD X10, X10, 0xD84
	0x03CCB6C4 ADR X11, 0x10
	0x03CCB6C8 LDRB W12, [X10, X9, LSL]
	0x03CCB6CC ADD X11, X11, X12, 0x2, LSL
	0x03CCB6D0 BR X11
	0x03CCB6D4 LDRB W8, [X0]
	0x03CCB6D8 CMP W8, 0x1
	0x03CCB6DC CSINC W8, W8, W31, HI
	0x03CCB6E0 SUB W8, W8, 0x1
	0x03CCB6E4 STRB W8, [X0]
	0x03CCB6E8 B 0x3CCB7B0
	0x03CCB6EC CMP W1, 0x40
	0x03CCB6F0 B.EQ 0x3CCB79C
	0x03CCB6F4 CMP W1, 0x80
	0x03CCB6F8 B.NE 0x3CCB714
	0x03CCB6FC LDRB W8, [X0 + 0x5]
	0x03CCB700 CMP W8, 0x1
	0x03CCB704 CSINC W8, W8, W31, HI
	0x03CCB708 SUB W8, W8, 0x1
	0x03CCB70C STRB W8, [X0 + 0x5]
	0x03CCB710 B 0x3CCB7B0
	0x03CCB714 MOV W8, W31
	0x03CCB718 B 0x3CCB7B0
	0x03CCB71C CMP W1, 0x10
	0x03CCB720 B.NE 0x3CCB7B0
	0x03CCB724 LDRB W8, [X0 + 0x7]
	0x03CCB728 CMP W8, 0x1
	0x03CCB72C CSINC W8, W8, W31, HI
	0x03CCB730 SUB W8, W8, 0x1
	0x03CCB734 STRB W8, [X0 + 0x7]
	0x03CCB738 B 0x3CCB7B0
	0x03CCB73C LDRB W8, [X0 + 0x6]
	0x03CCB740 CMP W8, 0x1
	0x03CCB744 CSINC W8, W8, W31, HI
	0x03CCB748 SUB W8, W8, 0x1
	0x03CCB74C STRB W8, [X0 + 0x6]
	0x03CCB750 B 0x3CCB7B0
	0x03CCB754 LDRB W8, [X0 + 0x1]

ISIL:
	001 Move S7, [X31+4]
	002 Move S6, [X31+8]
	003 Move V16, [X31]
	004 Subtract S19, S0, S3
	005 Subtract S20, S1, S4
	006 Subtract S17, S7, S4
	007 Subtract S18, S16, S3
	008 Subtract S21, S2, S5
	009 Subtract S4, S6, S5
	010 Multiply S3, S19, S18
	011 Multiply S5, S20, S17
	012 Add S3, S3, S5
	013 Multiply S5, S21, S4
	014 Add S3, S5, S3
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move W0, W31
	017 Return X0
	018 Multiply S5, S18, S18
	019 Multiply S17, S17, S17
	020 Add S5, S5, S17
	021 Multiply S4, S4, S4
	022 Add S4, S4, S5
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move W0, W31
	025 Move S5, [X31+20]
	026 Move S4, [X31+24]
	027 Move V3, [X31+16]
	028 Subtract S17, S0, S16
	029 Subtract S18, S1, S7
	030 Subtract S1, S5, S7
	031 Subtract S3, S3, S16
	032 Subtract S2, S2, S6
	033 Subtract S0, S4, S6
	034 Multiply S4, S17, S3
	035 Multiply S5, S18, S1
	036 Add S4, S4, S5
	037 Multiply S2, S2, S0
	038 Add S2, S2, S4
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Multiply S3, S3, S3
	041 Multiply S1, S1, S1
	042 Add S1, S3, S1
	043 Multiply S0, S0, S0
	044 Add S0, S0, S1
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Return X0

Method: System.Single DistanceToLine(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 point)

Disassembly:
	0x03CCB758 CMP W8, 0x1
	0x03CCB75C CSINC W8, W8, W31, HI
	0x03CCB760 SUB W8, W8, 0x1
	0x03CCB764 STRB W8, [X0 + 0x1]
	0x03CCB768 B 0x3CCB7B0
	0x03CCB76C LDRB W8, [X0 + 0x2]
	0x03CCB770 CMP W8, 0x1
	0x03CCB774 CSINC W8, W8, W31, HI
	0x03CCB778 SUB W8, W8, 0x1
	0x03CCB77C STRB W8, [X0 + 0x2]
	0x03CCB780 B 0x3CCB7B0
	0x03CCB784 LDRB W8, [X0 + 0x8]
	0x03CCB788 CMP W8, 0x1
	0x03CCB78C CSINC W8, W8, W31, HI
	0x03CCB790 SUB W8, W8, 0x1
	0x03CCB794 STRB W8, [X0 + 0x8]
	0x03CCB798 B 0x3CCB7B0
	0x03CCB79C LDRB W8, [X0 + 0x3]
	0x03CCB7A0 CMP W8, 0x1
	0x03CCB7A4 CSINC W8, W8, W31, HI
	0x03CCB7A8 SUB W8, W8, 0x1
	0x03CCB7AC STRB W8, [X0 + 0x3]
	0x03CCB7B0 MOV W0, W8
	0x03CCB7B4 RET
	0x03CCB7B8 SUB X31, X31, 0x80
	0x03CCB7BC STR X30, [X31 + 0x20]
	0x03CCB7C0 STP X28, X27, [X31 + 0x30]
	0x03CCB7C4 STP X26, X25, [X31 + 0x40]
	0x03CCB7C8 STP X24, X23, [X31 + 0x50]
	0x03CCB7CC STP X22, X21, [X31 + 0x60]
	0x03CCB7D0 STP X20, X19, [X31 + 0x70]
	0x03CCB7D4 ADRP X20, 0x71C000
	0x03CCB7D8 LDRB W8, [X20 + 0x380]
	0x03CCB7DC MOV X19, X0
	0x03CCB7E0 TBNZ X8, 0x0, 0x3CCB870
	0x03CCB7E4 ADRP X0, 0x496000
	0x03CCB7E8 LDR X0, [X0 + 0x680]
	0x03CCB7EC BL 0x1C16CF4
	0x03CCB7F0 ADRP X0, 0x496000
	0x03CCB7F4 LDR X0, [X0 + 0xDF8]
	0x03CCB7F8 BL 0x1C16CF4
	0x03CCB7FC ADRP X0, 0x496000
	0x03CCB800 LDR X0, [X0 + 0xE00]
	0x03CCB804 BL 0x1C16CF4
	0x03CCB808 ADRP X0, 0x496000
	0x03CCB80C LDR X0, [X0 + 0xE08]
	0x03CCB810 BL 0x1C16CF4
	0x03CCB814 ADRP X0, 0x496000
	0x03CCB818 LDR X0, [X0 + 0x688]
	0x03CCB81C BL 0x1C16CF4

ISIL:
	001 Move S19, [X31+4]
	002 Move S18, [X31+8]
	003 Move V20, [X31]
	004 Subtract S7, S3, S0
	005 Subtract S16, S4, S1
	006 Subtract S1, S1, S19
	007 Subtract S6, S0, S20
	008 Subtract S17, S5, S2
	009 Subtract S0, S2, S18
	010 Multiply S2, S7, S6
	011 Multiply S21, S16, S1
	012 Add S2, S2, S21
	013 Multiply S21, S17, S0
	014 Add S2, S21, S2
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Multiply S2, S6, S6
	017 Subtract S20, S20, S3
	018 Subtract S4, S19, S4
	019 Subtract S3, S18, S5
	020 Multiply S5, S7, S20
	021 Multiply S18, S16, S4
	022 Add S5, S5, S18
	023 Multiply S18, S17, S3
	024 Add S5, S18, S5
	025 NotImplemented "Instruction FCMP not yet implemented."
	026 Multiply S0, S20, S20
	027 Multiply S1, S4, S4
	028 Add S1, S0, S1
	029 Multiply S0, S3, S3
	030 Multiply S3, S7, S7
	031 Multiply S4, S16, S16
	032 Add S3, S3, S4
	033 Multiply S4, S17, S17
	034 Add S3, S4, S3
	035 NotImplemented "Instruction FDIV not yet implemented."
	036 Multiply S3, S7, S2
	037 Multiply S4, S16, S2
	038 Multiply S2, S17, S2
	039 Subtract S3, S6, S3
	040 Subtract S1, S1, S4
	041 Subtract S0, S0, S2
	042 Multiply S2, S3, S3
	043 Multiply S1, S1, S1
	044 Add S1, S2, S1
	045 Multiply S0, S0, S0
	046 Add S0, S0, S1
	047 Return V0

Method: System.Int32 GetLineNumber(System.Int32 index)

Disassembly:
	0x03CCBAE4 LDR X8, [X0 + 0xB8]
	0x03CCBAE8 LDR X0, [X8 + 0x10]
	0x03CCBAEC CBZ X0, 0x3CCBCC4
	0x03CCBAF0 ADRP X8, 0x496000
	0x03CCBAF4 LDR X8, [X8 + 0xE00]
	0x03CCBAF8 MOV X1, X24
	0x03CCBAFC MOV X2, X19
	0x03CCBB00 LDR X3, [X8]
	0x03CCBB04 BL 0x2A4E330
	0x03CCBB08 LDR X0, [X26]
	0x03CCBB0C LDR W8, [X0 + 0xE0]
	0x03CCBB10 CBNZ W8, 0x3CCBB1C
	0x03CCBB14 BL 0x1C16DFC
	0x03CCBB18 LDR X0, [X26]
	0x03CCBB1C LDR X8, [X0 + 0xB8]
	0x03CCBB20 LDR X0, [X8]
	0x03CCBB24 CBZ X0, 0x3CCBCC4
	0x03CCBB28 ADRP X8, 0x496000
	0x03CCBB2C LDR X8, [X8 + 0xE30]
	0x03CCBB30 ADD X2, X31, 0x0
	0x03CCBB34 MOV W1, W20
	0x03CCBB38 STP W21, W22, [X31]
	0x03CCBB3C LDR X3, [X8]
	0x03CCBB40 STP W23, W27, [X31 + 0x8]
	0x03CCBB44 STP X24, X28, [X31 + 0x10]
	0x03CCBB48 BL 0x2A32A20
	0x03CCBB4C B 0x3CCBCA4
	0x03CCBB50 MOV X0, X19
	0x03CCBB54 MOV X1, X31
	0x03CCBB58 BL 0x3CA9FFC
	0x03CCBB5C MOV W21, W0
	0x03CCBB60 MOV X0, X19
	0x03CCBB64 MOV X1, X31
	0x03CCBB68 BL 0x3C9EB48
	0x03CCBB6C MOV W23, W0
	0x03CCBB70 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X20, X0
	006 Move X0, X20
	007 Move W19, W1
	008 Call TextHandle.get_textInfo, X0
	009 Compare X0, 0
	010 JumpIfEqual {37}
	011 Move W8, [X0+16]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X0, X20
	014 Call TextHandle.get_textInfo, X0
	015 Compare X0, 0
	016 JumpIfEqual {37}
	017 Move W8, [X0+16]
	018 Subtract W8, W8, 1
	019 NotImplemented "Instruction BIC not yet implemented."
	020 Move W19, W31
	021 Move X0, X20
	022 Call TextHandle.get_textInfo, X0
	023 Compare X0, 0
	024 JumpIfEqual {37}
	025 Move X8, [X0+48]
	026 Compare X8, 0
	027 JumpIfEqual {37}
	028 Move W9, [X8+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W9, 392
	031 NotImplemented "Instruction SMADDL not yet implemented."
	032 Move W0, [X8+108]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return X0
	037 Call 0x1C17F20
	038 Call 0x1C17F28

Method: System.Single GetLineHeight(System.Int32 lineNumber)

Disassembly:
	0x03CCBB74 MOV X1, X31
	0x03CCBB78 BL 0x3C9EB80
	0x03CCBB7C MOV W24, W0
	0x03CCBB80 LDR X0, [X26]
	0x03CCBB84 CMP W21, 0x0
	0x03CCBB88 CSEL W22, W23, W21, EQ
	0x03CCBB8C LDR W8, [X0 + 0xE0]
	0x03CCBB90 CBNZ W8, 0x3CCBB9C
	0x03CCBB94 BL 0x1C16DFC
	0x03CCBB98 LDR X0, [X26]
	0x03CCBB9C LDR X8, [X0 + 0xB8]
	0x03CCBBA0 LDR X0, [X8]
	0x03CCBBA4 CBZ X0, 0x3CCBCC4
	0x03CCBBA8 ADRP X8, 0x496000
	0x03CCBBAC LDR X8, [X8 + 0xDF8]
	0x03CCBBB0 MOV W21, W23
	0x03CCBBB4 BFM X21, X24, 0x20, 0x1F
	0x03CCBBB8 ADD X2, X31, 0x0
	0x03CCBBBC LDR X3, [X8]
	0x03CCBBC0 MOV W1, W20
	0x03CCBBC4 STP W22, W23, [X31]
	0x03CCBBC8 STP W24, W31, [X31 + 0x8]
	0x03CCBBCC STP X21, X19, [X31 + 0x10]
	0x03CCBBD0 BL 0x2A32A58
	0x03CCBBD4 LDR X8, [X26]
	0x03CCBBD8 LDR X8, [X8 + 0xB8]
	0x03CCBBDC LDR X0, [X8 + 0x8]
	0x03CCBBE0 CBZ X0, 0x3CCBCC4
	0x03CCBBE4 ADRP X8, 0x496000
	0x03CCBBE8 LDR X8, [X8 + 0x688]
	0x03CCBBEC MOV W1, W22
	0x03CCBBF0 LDR X2, [X8]
	0x03CCBBF4 BL 0x2A13880
	0x03CCBBF8 TBNZ X0, 0x0, 0x3CCBC34
	0x03CCBBFC LDR X0, [X26]
	0x03CCBC00 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X20, X0
	006 Move X0, X20
	007 Move W19, W1
	008 Call TextHandle.get_textInfo, X0
	009 Compare X0, 0
	010 JumpIfEqual {37}
	011 Move W8, [X0+36]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X0, X20
	014 Call TextHandle.get_textInfo, X0
	015 Compare X0, 0
	016 JumpIfEqual {37}
	017 Move W8, [X0+36]
	018 Subtract W8, W8, 1
	019 NotImplemented "Instruction BIC not yet implemented."
	020 Move W19, W31
	021 Move X0, X20
	022 Call TextHandle.get_textInfo, X0
	023 Compare X0, 0
	024 JumpIfEqual {37}
	025 Move X8, [X0+72]
	026 Compare X8, 0
	027 JumpIfEqual {37}
	028 Move W9, [X8+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W9, 96
	031 NotImplemented "Instruction SMADDL not yet implemented."
	032 Move V0, [X8+76]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return V0
	037 Call 0x1C17F20
	038 Call 0x1C17F28

Method: System.Single GetLineHeightFromCharacterIndex(System.Int32 index)

Disassembly:
	0x03CCBC04 CBNZ W8, 0x3CCBC10
	0x03CCBC08 BL 0x1C16DFC
	0x03CCBC0C LDR X0, [X26]
	0x03CCBC10 LDR X8, [X0 + 0xB8]
	0x03CCBC14 LDR X0, [X8 + 0x8]
	0x03CCBC18 CBZ X0, 0x3CCBCC4
	0x03CCBC1C ADRP X8, 0x496000
	0x03CCBC20 LDR X8, [X8 + 0x680]
	0x03CCBC24 MOV W1, W22
	0x03CCBC28 MOV X2, X19
	0x03CCBC2C LDR X3, [X8]
	0x03CCBC30 BL 0x2A1368C
	0x03CCBC34 LDR X0, [X26]
	0x03CCBC38 LDR W8, [X0 + 0xE0]
	0x03CCBC3C CBNZ W8, 0x3CCBC48
	0x03CCBC40 BL 0x1C16DFC
	0x03CCBC44 LDR X0, [X26]
	0x03CCBC48 LDR X8, [X0 + 0xB8]
	0x03CCBC4C LDR X0, [X8 + 0x10]
	0x03CCBC50 CBZ X0, 0x3CCBCC4
	0x03CCBC54 ADRP X8, 0x496000
	0x03CCBC58 LDR X8, [X8 + 0xE10]
	0x03CCBC5C MOV X1, X21
	0x03CCBC60 LDR X2, [X8]
	0x03CCBC64 BL 0x2A4E524
	0x03CCBC68 TBNZ X0, 0x0, 0x3CCBCA4
	0x03CCBC6C LDR X0, [X26]
	0x03CCBC70 LDR W8, [X0 + 0xE0]
	0x03CCBC74 CBNZ W8, 0x3CCBC80
	0x03CCBC78 BL 0x1C16DFC
	0x03CCBC7C LDR X0, [X26]
	0x03CCBC80 LDR X8, [X0 + 0xB8]
	0x03CCBC84 LDR X0, [X8 + 0x10]
	0x03CCBC88 CBZ X0, 0x3CCBCC4
	0x03CCBC8C ADRP X8, 0x496000
	0x03CCBC90 LDR X8, [X8 + 0xE00]
	0x03CCBC94 MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X19, X0
	006 Move X0, X19
	007 Move W20, W1
	008 Call TextHandle.get_textInfo, X0
	009 Compare X0, 0
	010 JumpIfEqual {39}
	011 Move W8, [X0+16]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X0, X19
	014 Call TextHandle.get_textInfo, X0
	015 Compare X0, 0
	016 JumpIfEqual {39}
	017 Move W8, [X0+16]
	018 Subtract W8, W8, 1
	019 NotImplemented "Instruction BIC not yet implemented."
	020 Move W20, W31
	021 Move X0, X19
	022 Call TextHandle.get_textInfo, X0
	023 Compare X0, 0
	024 JumpIfEqual {39}
	025 Move X8, [X0+48]
	026 Compare X8, 0
	027 JumpIfEqual {39}
	028 Move W9, [X8+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W9, 392
	031 NotImplemented "Instruction SMADDL not yet implemented."
	032 Move W1, [X8+108]
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Call TextHandle.GetLineHeight, X0, X1
	038 Return V0
	039 Call 0x1C17F20
	040 Call 0x1C17F28

Method: System.Single GetCharacterHeightFromIndex(System.Int32 index)

Disassembly:
	0x03CCBC98 MOV X2, X19
	0x03CCBC9C LDR X3, [X8]
	0x03CCBCA0 BL 0x2A4E330
	0x03CCBCA4 LDP X20, X19, [X31 + 0x70]
	0x03CCBCA8 LDP X22, X21, [X31 + 0x60]
	0x03CCBCAC LDP X24, X23, [X31 + 0x50]
	0x03CCBCB0 LDP X26, X25, [X31 + 0x40]
	0x03CCBCB4 LDP X28, X27, [X31 + 0x30]
	0x03CCBCB8 LDR X30, [X31 + 0x20]
	0x03CCBCBC ADD X31, X31, 0x80
	0x03CCBCC0 RET
	0x03CCBCC4 BL 0x1C16F20
	0x03CCBCC8 CMP W1, 0x0
	0x03CCBCCC MOV W8, W2
	0x03CCBCD0 CSEL W9, W2, W1, EQ
	0x03CCBCD4 BFM X8, X3, 0x20, 0x1F
	0x03CCBCD8 STP W2, W3, [X0 + 0x4]
	0x03CCBCDC STR W9, [X0]
	0x03CCBCE0 STP X8, X4, [X0 + 0x10]
	0x03CCBCE4 RET
	0x03CCBCE8 STP X29, X30, [X31 - 0x60]!
	0x03CCBCEC STP X28, X27, [X31 + 0x10]
	0x03CCBCF0 STP X26, X25, [X31 + 0x20]
	0x03CCBCF4 STP X24, X23, [X31 + 0x30]
	0x03CCBCF8 STP X22, X21, [X31 + 0x40]
	0x03CCBCFC STP X20, X19, [X31 + 0x50]
	0x03CCBD00 ADRP X28, 0x71C000
	0x03CCBD04 ADRP X29, 0x496000
	0x03CCBD08 ADRP X19, 0x496000
	0x03CCBD0C ADRP X20, 0x496000
	0x03CCBD10 ADRP X27, 0x496000
	0x03CCBD14 ADRP X26, 0x496000
	0x03CCBD18 ADRP X25, 0x496000
	0x03CCBD1C ADRP X24, 0x496000
	0x03CCBD20 ADRP X23, 0x429000
	0x03CCBD24 ADRP X22, 0x429000
	0x03CCBD28 ADRP X21, 0x496000
	0x03CCBD2C LDR X29, [X29 + 0xE38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X20, X0
	006 Move X0, X20
	007 Move W19, W1
	008 Call TextHandle.get_textInfo, X0
	009 Compare X0, 0
	010 JumpIfEqual {39}
	011 Move W8, [X0+16]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X0, X20
	014 Call TextHandle.get_textInfo, X0
	015 Compare X0, 0
	016 JumpIfEqual {39}
	017 Move W8, [X0+16]
	018 Subtract W8, W8, 1
	019 NotImplemented "Instruction BIC not yet implemented."
	020 Move W19, W31
	021 Move X0, X20
	022 Call TextHandle.get_textInfo, X0
	023 Compare X0, 0
	024 JumpIfEqual {39}
	025 Move X8, [X0+48]
	026 Compare X8, 0
	027 JumpIfEqual {39}
	028 Move W9, [X8+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W9, 392
	031 NotImplemented "Instruction SMADDL not yet implemented."
	032 Move V0, [X8+332]
	033 Move V1, [X8+340]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Subtract S0, S0, S1
	037 Move X30, [X31+32]
	038 Return V0
	039 Call 0x1C17F20
	040 Call 0x1C17F28

Method: System.Boolean IsElided()

Disassembly:
	0x03CCBD30 LDR X19, [X19 + 0xE40]
	0x03CCBD34 LDR X20, [X20 + 0x260]
	0x03CCBD38 LDR X27, [X27 + 0x650]
	0x03CCBD3C LDR X26, [X26 + 0x658]
	0x03CCBD40 LDRB W8, [X28 + 0x381]
	0x03CCBD44 LDR X25, [X25 + 0xE48]
	0x03CCBD48 LDR X24, [X24 + 0xE50]
	0x03CCBD4C LDR X23, [X23 + 0xE30]
	0x03CCBD50 LDR X22, [X22 + 0xE20]
	0x03CCBD54 LDR X21, [X21 + 0x290]
	0x03CCBD58 TBNZ X8, 0x0, 0x3CCBDDC
	0x03CCBD5C ADRP X0, 0x496000
	0x03CCBD60 LDR X0, [X0 + 0xE40]
	0x03CCBD64 BL 0x1C16CF4
	0x03CCBD68 ADRP X0, 0x496000
	0x03CCBD6C LDR X0, [X0 + 0x658]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TextHandle.get_textInfo, X0
	005 Compare X0, 0
	006 JumpIfEqual {20}
	007 Move X0, X19
	008 Call TextHandle.get_textInfo, X0
	009 Compare X0, 0
	010 JumpIfEqual {23}
	011 Move W8, [X0+16]
	012 Compare W8, 0
	013 JumpIfEqual {19}
	014 Move X0, X31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call TextGenerator.get_isTextTruncated
	018 Return X0
	019 Move W0, 1
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return X0
	023 Call 0x1C17F20

Method: System.String Substring(System.Int32 startIndex, System.Int32 length)

Disassembly:
	0x03CCBD70 BL 0x1C16CF4
	0x03CCBD74 ADRP X0, 0x496000
	0x03CCBD78 LDR X0, [X0 + 0xE50]
	0x03CCBD7C BL 0x1C16CF4
	0x03CCBD80 ADRP X0, 0x496000
	0x03CCBD84 LDR X0, [X0 + 0xE38]
	0x03CCBD88 BL 0x1C16CF4
	0x03CCBD8C ADRP X0, 0x496000
	0x03CCBD90 LDR X0, [X0 + 0xE48]
	0x03CCBD94 BL 0x1C16CF4
	0x03CCBD98 ADRP X0, 0x496000
	0x03CCBD9C LDR X0, [X0 + 0x650]
	0x03CCBDA0 BL 0x1C16CF4
	0x03CCBDA4 ADRP X0, 0x429000
	0x03CCBDA8 LDR X0, [X0 + 0xE20]
	0x03CCBDAC BL 0x1C16CF4
	0x03CCBDB0 ADRP X0, 0x429000
	0x03CCBDB4 LDR X0, [X0 + 0xE30]
	0x03CCBDB8 BL 0x1C16CF4
	0x03CCBDBC ADRP X0, 0x496000
	0x03CCBDC0 LDR X0, [X0 + 0x260]
	0x03CCBDC4 BL 0x1C16CF4
	0x03CCBDC8 ADRP X0, 0x496000
	0x03CCBDCC LDR X0, [X0 + 0x290]
	0x03CCBDD0 BL 0x1C16CF4
	0x03CCBDD4 MOVZ W8, 0x1
	0x03CCBDD8 STRB W8, [X28 + 0x381]
	0x03CCBDDC LDR X0, [X29]
	0x03CCBDE0 BL 0x1C16F10
	0x03CCBDE4 LDR X1, [X19]
	0x03CCBDE8 MOV X19, X0
	0x03CCBDEC BL 0x2A3210C
	0x03CCBDF0 LDR X8, [X20]
	0x03CCBDF4 LDR X8, [X8 + 0xB8]
	0x03CCBDF8 STR X19, [X8]
	0x03CCBDFC LDR X0, [X27]
	0x03CCBE00 BL 0x1C16F10
	0x03CCBE04 LDR X1, [X26]
	0x03CCBE08 MOV X19, X0
	0x03CCBE0C BL 0x2A12DD4
	0x03CCBE10 LDR X8, [X20]
	0x03CCBE14 LDR X8, [X8 + 0xB8]
	0x03CCBE18 STR X19, [X8 + 0x8]
	0x03CCBE1C LDR X0, [X25]
	0x03CCBE20 BL 0x1C16F10
	0x03CCBE24 LDR X1, [X24]
	0x03CCBE28 MOV X19, X0
	0x03CCBE2C BL 0x2A4DA7C
	0x03CCBE30 LDR X8, [X20]
	0x03CCBE34 LDR X8, [X8 + 0xB8]
	0x03CCBE38 STR X19, [X8 + 0x10]
	0x03CCBE3C LDR X0, [X23]
	0x03CCBE40 BL 0x1C16F10
	0x03CCBE44 LDR X2, [X22]
	0x03CCBE48 MOVZ W1, 0x10
	0x03CCBE4C MOV X19, X0
	0x03CCBE50 BL 0x2FDBF80
	0x03CCBE54 LDR X8, [X20]
	0x03CCBE58 LDR X8, [X8 + 0xB8]
	0x03CCBE5C STR X19, [X8 + 0x18]
	0x03CCBE60 LDR X0, [X21]
	0x03CCBE64 BL 0x3CCBE90
	0x03CCBE68 LDR X8, [X20]
	0x03CCBE6C LDP X20, X19, [X31 + 0x50]
	0x03CCBE70 LDP X22, X21, [X31 + 0x40]
	0x03CCBE74 LDP X24, X23, [X31 + 0x30]
	0x03CCBE78 LDR X8, [X8 + 0xB8]
	0x03CCBE7C LDP X26, X25, [X31 + 0x20]
	0x03CCBE80 LDP X28, X27, [X31 + 0x10]
	0x03CCBE84 STR W0, [X8 + 0x20]
	0x03CCBE88 LDP X29, X30, [X31], #0x60
	0x03CCBE8C RET
	0x03CCBE90 STP X30, X21, [X31 - 0x20]!
	0x03CCBE94 STP X20, X19, [X31 + 0x10]
	0x03CCBE98 CBZ X0, 0x3CCBEFC
	0x03CCBE9C LDR W8, [X0 + 0x10]
	0x03CCBEA0 MOV X19, X0
	0x03CCBEA4 CMP W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x71D000
	008 Move W8, [X20+888]
	009 Move W22, W2
	010 Move W21, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x429000
	017 Move X0, [X0+2288]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+888], W8
	021 Move TEMP, X21
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {79}
	025 Move X0, X19
	026 Call TextHandle.get_textInfo, X0
	027 Compare X0, 0
	028 JumpIfEqual {77}
	029 Move W8, [X0+16]
	030 Add W23, W22, W21
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X8, 0x429000
	033 Move X8, [X8+2288]
	034 Move X0, [X8]
	035 Call 0x1C17F10
	036 Move W1, W22
	037 Move X2, X31
	038 Move X20, X0
	039 Call StringBuilder..ctor, X0, X1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W8, 392
	042 NotImplemented "Instruction UMADDL not yet implemented."
	043 Move W22, W21
	044 Move X23, W23
	045 Add X21, X8, 32
	046 Move X0, X19
	047 Call TextHandle.get_textInfo, X0
	048 Compare X0, 0
	049 JumpIfEqual {77}
	050 Move X8, [X0+48]
	051 Compare X8, 0
	052 JumpIfEqual {77}
	053 Move W9, [X8+24]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Compare X20, 0
	056 JumpIfEqual {77}
	057 NotImplemented "Instruction LDRH not yet implemented."
	058 Move X0, X20
	059 Move X2, X31
	060 Call StringBuilder.Append, X0, X1
	061 Add X22, X22, 1
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add X21, X21, 392
	064 Compare X20, 0
	065 JumpIfEqual {77}
	066 Move X8, [X20]
	067 Move X0, X20
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X2, [X8+360]
	073 Move X1, [X8+368]
	074 Move X30, [X31+48]
	075 Move X23, [X31+56]
	076 CallNoReturn X2
	077 Call 0x1C17F20
	078 Call 0x1C17F28
	079 Move X0, 0x431000
	080 Move X0, [X0+1888]
	081 Call 0x1C17D08
	082 Call 0x1C17F10
	083 Move X1, X31
	084 Move X19, X0
	085 Call ArgumentOutOfRangeException..ctor, X0
	086 Move X0, 0x497000
	087 Move X0, [X0+3552]
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x1C17DEC

Method: System.Int32 IndexOf(System.Char value, System.Int32 startIndex)

Disassembly:
	0x03CCBEA8 B.LT 0x3CCBEE8
	0x03CCBEAC MOV W21, W31
	0x03CCBEB0 MOV W20, W31
	0x03CCBEB4 MOV X0, X19
	0x03CCBEB8 MOV W1, W21
	0x03CCBEBC MOV X2, X31
	0x03CCBEC0 BL 0x3222A1C
	0x03CCBEC4 BL 0x3CCDF00
	0x03CCBEC8 LDR W8, [X19 + 0x10]
	0x03CCBECC ADD W9, W20, W20, 0x5, LSL
	0x03CCBED0 AND W10, W0, 0xFFFF
	0x03CCBED4 ADD W21, W21, 0x1
	0x03CCBED8 CMP W21, W8
	0x03CCBEDC EOR W20, W9, W10, 0x0
	0x03CCBEE0 B.LT 0x3CCBEB4
	0x03CCBEE4 B 0x3CCBEEC
	0x03CCBEE8 MOV W20, W31
	0x03CCBEEC MOV W0, W20
	0x03CCBEF0 LDP X20, X19, [X31 + 0x10]
	0x03CCBEF4 LDP X30, X21, [X31], #0x20
	0x03CCBEF8 RET
	0x03CCBEFC BL 0x1C16F20
	0x03CCBF00 LDR X0, [X0 + 0x18]
	0x03CCBF04 RET
	0x03CCBF08 STR X1, [X0 + 0x18]
	0x03CCBF0C RET
	0x03CCBF10 LDR X0, [X0 + 0x20]
	0x03CCBF14 RET
	0x03CCBF18 STR X1, [X0 + 0x20]
	0x03CCBF1C RET
	0x03CCBF20 LDR X0, [X0 + 0x28]
	0x03CCBF24 RET
	0x03CCBF28 STR X1, [X0 + 0x28]
	0x03CCBF2C RET
	0x03CCBF30 LDR X0, [X0 + 0x30]
	0x03CCBF34 RET
	0x03CCBF38 STR X1, [X0 + 0x30]
	0x03CCBF3C RET
	0x03CCBF40 LDRB W0, [X0 + 0x38]
	0x03CCBF44 RET
	0x03CCBF48 AND W8, W1, 0x1
	0x03CCBF4C STRB W8, [X0 + 0x38]
	0x03CCBF50 RET
	0x03CCBF54 LDR W0, [X0 + 0x3C]
	0x03CCBF58 RET
	0x03CCBF5C STR W1, [X0 + 0x3C]
	0x03CCBF60 RET
	0x03CCBF64 LDRB W0, [X0 + 0x40]
	0x03CCBF68 RET
	0x03CCBF6C AND W8, W1, 0x1
	0x03CCBF70 STRB W8, [X0 + 0x40]
	0x03CCBF74 RET
	0x03CCBF78 LDR X0, [X0 + 0x48]
	0x03CCBF7C RET
	0x03CCBF80 STR X1, [X0 + 0x48]
	0x03CCBF84 RET
	0x03CCBF88 LDR X0, [X0 + 0x50]
	0x03CCBF8C RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {56}
	010 Move W19, W2
	011 Move W20, W1
	012 Move X21, X0
	013 Call TextHandle.get_textInfo, X0
	014 Compare X0, 0
	015 JumpIfEqual {44}
	016 Move W8, [X0+16]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, X21
	019 Call TextHandle.get_textInfo, X0
	020 Compare X0, 0
	021 JumpIfEqual {44}
	022 Move W8, 392
	023 NotImplemented "Instruction SMADDL not yet implemented."
	024 Add X22, X8, 32
	025 Move W8, [X0+16]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, X21
	028 Call TextHandle.get_textInfo, X0
	029 Compare X0, 0
	030 JumpIfEqual {44}
	031 Move X8, [X0+48]
	032 Compare X8, 0
	033 JumpIfEqual {44}
	034 Move W9, [X8+24]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction LDRH not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, X21
	039 Add W19, W19, 1
	040 Call TextHandle.get_textInfo, X0
	041 Add X22, X22, 392
	042 Compare X0, 0
	043 JumpIfNotEqual {25}
	044 Call 0x1C17F20
	045 Move TEMP, 0
	046 Not TEMP
	047 Move W19, TEMP
	048 Move W0, W19
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Return X0
	055 Call 0x1C17F28
	056 Move X0, 0x431000
	057 Move X0, [X0+1888]
	058 Call 0x1C17D08
	059 Call 0x1C17F10
	060 Move X1, X31
	061 Move X19, X0
	062 Call ArgumentOutOfRangeException..ctor, X0
	063 Move X0, 0x497000
	064 Move X0, [X0+3560]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Call 0x1C17DEC

Method: System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex)

Disassembly:
	0x03CCBF90 STR X1, [X0 + 0x50]
	0x03CCBF94 RET
	0x03CCBF98 LDR X0, [X0 + 0x58]
	0x03CCBF9C RET
	0x03CCBFA0 STR X1, [X0 + 0x58]
	0x03CCBFA4 RET
	0x03CCBFA8 LDR W0, [X0 + 0x60]
	0x03CCBFAC RET
	0x03CCBFB0 STR W1, [X0 + 0x60]
	0x03CCBFB4 RET
	0x03CCBFB8 LDR X0, [X0 + 0x68]
	0x03CCBFBC RET
	0x03CCBFC0 STR X1, [X0 + 0x68]
	0x03CCBFC4 RET
	0x03CCBFC8 LDR X0, [X0 + 0x70]
	0x03CCBFCC RET
	0x03CCBFD0 STR X1, [X0 + 0x70]
	0x03CCBFD4 RET
	0x03CCBFD8 LDR X0, [X0 + 0x78]
	0x03CCBFDC RET
	0x03CCBFE0 STR X1, [X0 + 0x78]
	0x03CCBFE4 RET
	0x03CCBFE8 STR X30, [X31 - 0x20]!
	0x03CCBFEC STP X20, X19, [X31 + 0x10]
	0x03CCBFF0 ADRP X20, 0x71C000
	0x03CCBFF4 LDRB W8, [X20 + 0x382]
	0x03CCBFF8 MOV X19, X0
	0x03CCBFFC TBNZ X8, 0x0, 0x3CCC014
	0x03CCC000 ADRP X0, 0x495000
	0x03CCC004 LDR X0, [X0 + 0xE58]
	0x03CCC008 BL 0x1C16CF4
	0x03CCC00C MOVZ W8, 0x1
	0x03CCC010 STRB W8, [X20 + 0x382]
	0x03CCC014 LDR X0, [X19 + 0x80]
	0x03CCC018 CBNZ X0, 0x3CCC04C
	0x03CCC01C ADRP X8, 0x495000
	0x03CCC020 LDR X8, [X8 + 0xE58]
	0x03CCC024 LDR X0, [X8]
	0x03CCC028 BL 0x1C16F10
	0x03CCC02C MOV X1, X31
	0x03CCC030 MOV X20, X0
	0x03CCC034 BL 0x33BDD8C
	0x03CCC038 STR X20, [X19 + 0x80]
	0x03CCC03C CBZ X20, 0x3CCC058
	0x03CCC040 MOV X0, X20
	0x03CCC044 BL 0x3CCC064
	0x03CCC048 LDR X0, [X19 + 0x80]
	0x03CCC04C LDP X20, X19, [X31 + 0x10]
	0x03CCC050 LDR X30, [X31], #0x20
	0x03CCC054 RET
	0x03CCC058 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {47}
	010 Move W19, W2
	011 Move W20, W1
	012 Move X21, X0
	013 Call TextHandle.get_textInfo, X0
	014 Compare X0, 0
	015 JumpIfEqual {45}
	016 Move W8, [X0+16]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W8, 392
	019 NotImplemented "Instruction UMADDL not yet implemented."
	020 Add X22, X8, 32
	021 Move X0, X21
	022 Call TextHandle.get_textInfo, X0
	023 Compare X0, 0
	024 JumpIfEqual {45}
	025 Move X8, [X0+48]
	026 Compare X8, 0
	027 JumpIfEqual {45}
	028 Move W9, [X8+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 NotImplemented "Instruction LDRH not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Subtract W19, W19, 1
	034 Subtract X22, X22, 392
	035 Move TEMP, 0
	036 Not TEMP
	037 Move W19, TEMP
	038 Move W0, W19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return X0
	045 Call 0x1C17F20
	046 Call 0x1C17F28
	047 Move X0, 0x430000
	048 Move X0, [X0+1888]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X1, X31
	052 Move X19, X0
	053 Call ArgumentOutOfRangeException..ctor, X0
	054 Move X0, 0x496000
	055 Move X0, [X0+3568]
	056 Call 0x1C17D08
	057 Move X1, X0
	058 Move X0, X19
	059 Call 0x1C17DEC

Method: System.Single ComputeTextWidth(UnityEngine.TextCore.Text.TextGenerationSettings tgs)

Disassembly:
	0x03CCC05C MOV X1, X31
	0x03CCC060 B 0x33BDD8C
	0x03CCC064 STP X30, X21, [X31 - 0x20]!
	0x03CCC068 STP X20, X19, [X31 + 0x10]
	0x03CCC06C ADRP X20, 0x71B000
	0x03CCC070 LDRB W8, [X20 + 0x391]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TextHandle.UpdatePreferredValues, X0, X1
	005 Move V0, [X19+16]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return V0

Method: System.Single ComputeTextHeight(UnityEngine.TextCore.Text.TextGenerationSettings tgs)

Disassembly:
	0x03CCC0E8 CBNZ W8, 0x3CCC0F0
	0x03CCC0EC BL 0x1C16DFC
	0x03CCC0F0 MOV X0, X20
	0x03CCC0F4 MOV X1, X31
	0x03CCC0F8 MOV X2, X31
	0x03CCC0FC BL 0x3C3883C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TextHandle.UpdatePreferredValues, X0, X1
	005 Move V0, [X19+20]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return V0

Method: System.Void UpdatePreferredValues(UnityEngine.TextCore.Text.TextGenerationSettings tgs)

Disassembly:
	0x03CCC074 MOV X19, X0
	0x03CCC078 TBNZ X8, 0x0, 0x3CCC0CC
	0x03CCC07C ADRP X0, 0x482000
	0x03CCC080 LDR X0, [X0 + 0x830]
	0x03CCC084 BL 0x1C16CF4
	0x03CCC088 ADRP X0, 0x482000
	0x03CCC08C LDR X0, [X0 + 0x838]
	0x03CCC090 BL 0x1C16CF4
	0x03CCC094 ADRP X0, 0x427000
	0x03CCC098 LDR X0, [X0 + 0x598]
	0x03CCC09C BL 0x1C16CF4
	0x03CCC0A0 ADRP X0, 0x495000
	0x03CCC0A4 LDR X0, [X0 + 0xE60]
	0x03CCC0A8 BL 0x1C16CF4
	0x03CCC0AC ADRP X0, 0x495000
	0x03CCC0B0 LDR X0, [X0 + 0xE68]
	0x03CCC0B4 BL 0x1C16CF4
	0x03CCC0B8 ADRP X0, 0x495000
	0x03CCC0BC LDR X0, [X0 + 0xE70]
	0x03CCC0C0 BL 0x1C16CF4
	0x03CCC0C4 MOVZ W8, 0x1
	0x03CCC0C8 STRB W8, [X20 + 0x391]
	0x03CCC0CC LDR X8, [X19 + 0x30]
	0x03CCC0D0 CBNZ X8, 0x3CCC23C
	0x03CCC0D4 ADRP X21, 0x427000
	0x03CCC0D8 LDR X21, [X21 + 0x598]
	0x03CCC0DC LDR X20, [X19 + 0x18]
	0x03CCC0E0 LDR X0, [X21]
	0x03CCC0E4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x71C000
	007 Move X22, 0x496000
	008 Move W8, [X21+889]
	009 Move X22, [X22+3544]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x496000
	017 Move X0, [X0+3544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+889], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call TextHandle.get_layoutTextInfo
	027 Move X1, X0
	028 Move X0, X20
	029 Move X2, X31
	030 Call TextGenerator.GetPreferredValues, X0, X1
	031 Move [X19+16], S0
	032 Move [X19+24], S1
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Return 

Method: UnityEngine.TextCore.Text.TextInfo Update(UnityEngine.TextCore.Text.TextGenerationSettings tgs)

Disassembly:
	0x03CCC100 TBZ X0, 0x0, 0x3CCC12C
	0x03CCC104 ADRP X8, 0x495000
	0x03CCC108 ADRP X9, 0x495000
	0x03CCC10C LDR X8, [X8 + 0xE70]
	0x03CCC110 LDR X9, [X9 + 0xE60]
	0x03CCC114 LDR X0, [X8]
	0x03CCC118 LDR X1, [X9]
	0x03CCC11C BL 0x2241FB8
	0x03CCC120 MOV X20, X0
	0x03CCC124 STR X0, [X19 + 0x18]
	0x03CCC128 B 0x3CCC130
	0x03CCC12C LDR X20, [X19 + 0x18]
	0x03CCC130 LDR X0, [X21]
	0x03CCC134 LDR W8, [X0 + 0xE0]
	0x03CCC138 CBNZ W8, 0x3CCC140
	0x03CCC13C BL 0x1C16DFC
	0x03CCC140 MOV X0, X20
	0x03CCC144 MOV X1, X31
	0x03CCC148 MOV X2, X31
	0x03CCC14C BL 0x3C354F8
	0x03CCC150 TBZ X0, 0x0, 0x3CCC164
	0x03CCC154 LDR X0, [X19 + 0x18]
	0x03CCC158 BL 0x3CCE288
	0x03CCC15C MOV X20, X0
	0x03CCC160 B 0x3CCC188
	0x03CCC164 ADRP X8, 0x482000
	0x03CCC168 LDR X8, [X8 + 0x838]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X19, X0
	007 Call TextHandle.IsDirty, X0
	008 Move W21, W0
	009 Move X0, X19
	010 Call TextHandle.get_textInfo, X0
	011 Move TEMP, X21
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {33}
	015 Compare X0, 0
	016 JumpIfEqual {38}
	017 Move W8, 1
	018 Move [X0+96], W8
	019 Move X0, X19
	020 Call TextHandle.get_textInfo, X0
	021 Move X1, X0
	022 Move X0, X20
	023 Move X2, X31
	024 Call TextGenerator.GenerateText, X0, X1
	025 Move [X19+40], X20
	026 Move X0, X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Call TextHandle.get_textInfo, X0
	032 Return X0
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0
	038 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03CCC16C LDR X0, [X8]
	0x03CCC170 BL 0x1C16F10
	0x03CCC174 ADRP X8, 0x482000
	0x03CCC178 LDR X8, [X8 + 0x830]
	0x03CCC17C MOV X20, X0
	0x03CCC180 LDR X1, [X8]
	0x03CCC184 BL 0x2DCCB98
	0x03CCC188 STR X20, [X19 + 0x30]
	0x03CCC18C LDR X0, [X21]
	0x03CCC190 LDR X20, [X19 + 0x20]
	0x03CCC194 LDR W8, [X0 + 0xE0]
	0x03CCC198 CBNZ W8, 0x3CCC1A0
	0x03CCC19C BL 0x1C16DFC
	0x03CCC1A0 MOV X0, X20
	0x03CCC1A4 MOV X1, X31
	0x03CCC1A8 MOV X2, X31
	0x03CCC1AC BL 0x3C3883C
	0x03CCC1B0 TBZ X0, 0x0, 0x3CCC1DC
	0x03CCC1B4 ADRP X8, 0x495000
	0x03CCC1B8 ADRP X9, 0x495000
	0x03CCC1BC LDR X8, [X8 + 0xE68]
	0x03CCC1C0 LDR X9, [X9 + 0xE60]
	0x03CCC1C4 LDR X0, [X8]
	0x03CCC1C8 LDR X1, [X9]
	0x03CCC1CC BL 0x2241FB8
	0x03CCC1D0 MOV X20, X0
	0x03CCC1D4 STR X0, [X19 + 0x20]
	0x03CCC1D8 B 0x3CCC1E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x71C000
	006 Move X21, 0x496000
	007 Move X20, 0x496000
	008 Move W8, [X19+890]
	009 Move X21, [X21+2312]
	010 Move X20, [X20+3544]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x496000
	016 Move X0, [X0+2312]
	017 Call 0x1C17CF4
	018 Move X0, 0x496000
	019 Move X0, [X0+3544]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+890], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X19, X0
	027 Call TextGenerationSettings..ctor, X0
	028 Move X8, [X20]
	029 Move X8, [X8+184]
	030 Move [X8+8], X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Return 

