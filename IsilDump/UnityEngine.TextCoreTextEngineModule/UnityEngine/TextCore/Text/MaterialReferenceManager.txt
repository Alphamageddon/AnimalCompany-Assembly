Type: UnityEngine.TextCore.Text.MaterialReferenceManager

Method: UnityEngine.TextCore.Text.MaterialReferenceManager get_instance()

Disassembly:
	0x03CAAD30 LDR W11, [X10 + 0x18]
	0x03CAAD34 CMP W11, W1
	0x03CAAD38 B.LS 0x3CAB258
	0x03CAAD3C MOVZ W11, 0xC
	0x03CAAD40 MADD X10, X8, X11, X10
	0x03CAAD44 STR D0, [X10 + 0x20]
	0x03CAAD48 STR S1, [X10 + 0x28]
	0x03CAAD4C LDR X12, [X0 + 0x8]
	0x03CAAD50 CBZ X12, 0x3CAB25C
	0x03CAAD54 LDR W10, [X12 + 0x18]
	0x03CAAD58 ADD W11, W2, 0x1
	0x03CAAD5C CMP W11, W10
	0x03CAAD60 B.CS 0x3CAB258
	0x03CAAD64 SXTW X11, W11
	0x03CAAD68 MOVZ W13, 0xC
	0x03CAAD6C MADD X13, X11, X13, X12
	0x03CAAD70 LDR V0, [X13 + 0x20]!
	0x03CAAD74 ADD W15, W1, 0x1
	0x03CAAD78 CMP W15, W10
	0x03CAAD7C MOV X14, X13
	0x03CAAD80 LDR V1, [X14 + 0x8]!
	0x03CAAD84 B.CS 0x3CAB258
	0x03CAAD88 SXTW X10, W15
	0x03CAAD8C MOVZ W15, 0xC
	0x03CAAD90 MADD X12, X10, X15, X12
	0x03CAAD94 LDR V2, [X12 + 0x20]
	0x03CAAD98 LDR V3, [X12 + 0x28]
	0x03CAAD9C STR D2, [X13]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x73E000
	005 Move X20, 0x4B8000
	006 Move W8, [X19+790]
	007 Move X20, [X20+1608]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4B8000
	013 Move X0, [X0+1608]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+790], W8
	017 Move X0, [X20]
	018 Move X8, [X0+184]
	019 Move X8, [X8]
	020 Compare X8, 0
	021 JumpIfNotEqual {29}
	022 Call 0x1C17F10
	023 Move X19, X0
	024 Call MaterialReferenceManager..ctor, X0
	025 Move X8, [X20]
	026 Move X8, [X8+184]
	027 Move [X8], X19
	028 Move X0, [X20]
	029 Move X8, [X0+184]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X0, [X8]
	033 Move X30, [X31+32]
	034 Return X0

Method: System.Void AddFontAsset(UnityEngine.TextCore.Text.FontAsset fontAsset)

Disassembly:
	0x03CAAEF4 CBZ X16, 0x3CAB25C
	0x03CAAEF8 LDR W17, [X16 + 0x18]
	0x03CAAEFC CMP W17, W1
	0x03CAAF00 B.LS 0x3CAB258
	0x03CAAF04 ADD X16, X16, X8, 0x4, LSL
	0x03CAAF08 STR V0, [X16 + 0x2]
	0x03CAAF0C LDR X16, [X0 + 0x20]
	0x03CAAF10 CBZ X16, 0x3CAB25C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call MaterialReferenceManager.get_instance
	005 Compare X0, 0
	006 JumpIfEqual {10}
	007 Move X1, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call 0x1C17F20

Method: System.Void AddFontAssetInternal(UnityEngine.TextCore.Text.FontAsset fontAsset)

Disassembly:
	0x03CAAF14 LDR W17, [X16 + 0x18]
	0x03CAAF18 CMP W11, W17
	0x03CAAF1C B.CS 0x3CAB258
	0x03CAAF20 ADD X3, X16, X11, 0x4, LSL
	0x03CAAF24 LDR V0, [X3 + 0x20]!
	0x03CAAF28 CMP W10, W17
	0x03CAAF2C B.CS 0x3CAB258
	0x03CAAF30 ADD X16, X16, X10, 0x4, LSL
	0x03CAAF34 LDR V1, [X16 + 0x2]
	0x03CAAF38 STR V1, [X3]
	0x03CAAF3C LDR X16, [X0 + 0x20]
	0x03CAAF40 CBZ X16, 0x3CAB25C
	0x03CAAF44 LDR W17, [X16 + 0x18]
	0x03CAAF48 CMP W10, W17
	0x03CAAF4C B.CS 0x3CAB258
	0x03CAAF50 ADD X16, X16, X10, 0x4, LSL
	0x03CAAF54 STR V0, [X16 + 0x2]
	0x03CAAF58 LDR X16, [X0 + 0x20]
	0x03CAAF5C CBZ X16, 0x3CAB25C
	0x03CAAF60 LDR W17, [X16 + 0x18]
	0x03CAAF64 CMP W13, W17
	0x03CAAF68 B.CS 0x3CAB258
	0x03CAAF6C ADD X3, X16, X13, 0x4, LSL
	0x03CAAF70 LDR V0, [X3 + 0x20]!
	0x03CAAF74 CMP W12, W17
	0x03CAAF78 B.CS 0x3CAB258
	0x03CAAF7C ADD X16, X16, X12, 0x4, LSL
	0x03CAAF80 LDR V1, [X16 + 0x2]
	0x03CAAF84 STR V1, [X3]
	0x03CAAF88 LDR X16, [X0 + 0x20]
	0x03CAAF8C CBZ X16, 0x3CAB25C
	0x03CAAF90 LDR W17, [X16 + 0x18]
	0x03CAAF94 CMP W12, W17
	0x03CAAF98 B.CS 0x3CAB258
	0x03CAAF9C ADD X16, X16, X12, 0x4, LSL
	0x03CAAFA0 STR V0, [X16 + 0x2]
	0x03CAAFA4 LDR X16, [X0 + 0x20]
	0x03CAAFA8 CBZ X16, 0x3CAB25C
	0x03CAAFAC LDR W17, [X16 + 0x18]
	0x03CAAFB0 CMP W15, W17
	0x03CAAFB4 B.CS 0x3CAB258
	0x03CAAFB8 ADD X3, X16, X15, 0x4, LSL
	0x03CAAFBC LDR V0, [X3 + 0x20]!
	0x03CAAFC0 CMP W14, W17
	0x03CAAFC4 B.CS 0x3CAB258
	0x03CAAFC8 ADD X16, X16, X14, 0x4, LSL
	0x03CAAFCC LDR V1, [X16 + 0x2]
	0x03CAAFD0 STR V1, [X3]
	0x03CAAFD4 LDR X16, [X0 + 0x20]
	0x03CAAFD8 CBZ X16, 0x3CAB25C
	0x03CAAFDC LDR W17, [X16 + 0x18]
	0x03CAAFE0 CMP W14, W17
	0x03CAAFE4 B.CS 0x3CAB258
	0x03CAAFE8 ADD X16, X16, X14, 0x4, LSL
	0x03CAAFEC STR V0, [X16 + 0x2]
	0x03CAAFF0 LDR X16, [X0 + 0x28]
	0x03CAAFF4 CBZ X16, 0x3CAB25C
	0x03CAAFF8 LDR W3, [X16 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x73E000
	006 Move W8, [X21+791]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x4B8000
	014 Move X0, [X0+1664]
	015 Call 0x1C17CF4
	016 Move X0, 0x4AF000
	017 Move X0, [X0+1264]
	018 Call 0x1C17CF4
	019 Move X0, 0x4B8000
	020 Move X0, [X0+1672]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+791], W8
	024 Compare X19, 0
	025 JumpIfEqual {75}
	026 Move X21, [X20+24]
	027 Move X0, X19
	028 Call TextAsset.get_hashCode, X0
	029 Compare X21, 0
	030 JumpIfEqual {75}
	031 Move X8, 0x4B8000
	032 Move X8, [X8+1672]
	033 Move W1, W0
	034 Move X0, X21
	035 Move X2, [X8]
	036 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {46}
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return 
	046 Move X21, [X20+24]
	047 Move X0, X19
	048 Call TextAsset.get_hashCode, X0
	049 Compare X21, 0
	050 JumpIfEqual {75}
	051 Move X8, 0x4B8000
	052 Move X8, [X8+1664]
	053 Move W1, W0
	054 Move X0, X21
	055 Move X2, X19
	056 Move X3, [X8]
	057 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	058 Move X20, [X20+16]
	059 Move X0, X19
	060 Call TextAsset.get_materialHashCode, X0
	061 Compare X20, 0
	062 JumpIfEqual {75}
	063 Move X8, 0x4AF000
	064 Move X2, [X19+40]
	065 Move X8, [X8+1264]
	066 Move W1, W0
	067 Move X0, X20
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X3, [X8]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	074 Return 
	075 Call 0x1C17F20

Method: System.Void AddSpriteAsset(System.Int32 hashCode, UnityEngine.TextCore.Text.SpriteAsset spriteAsset)

Disassembly:
	0x03CAB0C4 CMP W12, W17
	0x03CAB0C8 B.CS 0x3CAB258
	0x03CAB0CC ADD X16, X16, X12, 0x3, LSL
	0x03CAB0D0 STR D0, [X16 + 0x20]
	0x03CAB0D4 LDR X16, [X0 + 0x28]
	0x03CAB0D8 CBZ X16, 0x3CAB25C
	0x03CAB0DC LDR W17, [X16 + 0x18]
	0x03CAB0E0 CMP W15, W17
	0x03CAB0E4 B.CS 0x3CAB258
	0x03CAB0E8 ADD X3, X16, X15, 0x3, LSL
	0x03CAB0EC LDR V0, [X3 + 0x20]!
	0x03CAB0F0 CMP W14, W17

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Void AddSpriteAssetInternal(System.Int32 hashCode, UnityEngine.TextCore.Text.SpriteAsset spriteAsset)

Disassembly:
	0x03CAB0F4 B.CS 0x3CAB258
	0x03CAB0F8 ADD X16, X16, X14, 0x3, LSL
	0x03CAB0FC LDR V1, [X16 + 0x20]
	0x03CAB100 STR D1, [X3]
	0x03CAB104 LDR X16, [X0 + 0x28]
	0x03CAB108 CBZ X16, 0x3CAB25C
	0x03CAB10C LDR W17, [X16 + 0x18]
	0x03CAB110 CMP W14, W17
	0x03CAB114 B.CS 0x3CAB258
	0x03CAB118 ADD X16, X16, X14, 0x3, LSL
	0x03CAB11C STR D0, [X16 + 0x20]
	0x03CAB120 LDR X16, [X0 + 0x30]
	0x03CAB124 CBZ X16, 0x3CAB25C
	0x03CAB128 LDR W3, [X16 + 0x18]
	0x03CAB12C CMP W3, W2
	0x03CAB130 B.LS 0x3CAB258
	0x03CAB134 ADD X17, X16, X9, 0x2, LSL
	0x03CAB138 LDR W9, [X17 + 0x20]!
	0x03CAB13C CMP W3, W1
	0x03CAB140 B.LS 0x3CAB258
	0x03CAB144 ADD X16, X16, X8, 0x2, LSL
	0x03CAB148 LDR W16, [X16 + 0x20]
	0x03CAB14C STR W16, [X17]
	0x03CAB150 LDR X16, [X0 + 0x30]
	0x03CAB154 CBZ X16, 0x3CAB25C
	0x03CAB158 LDR W17, [X16 + 0x18]
	0x03CAB15C CMP W17, W1
	0x03CAB160 B.LS 0x3CAB258
	0x03CAB164 ADD X8, X16, X8, 0x2, LSL
	0x03CAB168 STR W9, [X8 + 0x20]
	0x03CAB16C LDR X9, [X0 + 0x30]
	0x03CAB170 CBZ X9, 0x3CAB25C
	0x03CAB174 LDR W16, [X9 + 0x18]
	0x03CAB178 CMP W11, W16
	0x03CAB17C B.CS 0x3CAB258
	0x03CAB180 ADD X11, X9, X11, 0x2, LSL
	0x03CAB184 LDR W8, [X11 + 0x20]!
	0x03CAB188 CMP W10, W16
	0x03CAB18C B.CS 0x3CAB258
	0x03CAB190 ADD X9, X9, X10, 0x2, LSL
	0x03CAB194 LDR W9, [X9 + 0x20]
	0x03CAB198 STR W9, [X11]
	0x03CAB19C LDR X9, [X0 + 0x30]
	0x03CAB1A0 CBZ X9, 0x3CAB25C
	0x03CAB1A4 LDR W11, [X9 + 0x18]
	0x03CAB1A8 CMP W10, W11
	0x03CAB1AC B.CS 0x3CAB258
	0x03CAB1B0 ADD X9, X9, X10, 0x2, LSL
	0x03CAB1B4 STR W8, [X9 + 0x20]
	0x03CAB1B8 LDR X9, [X0 + 0x30]
	0x03CAB1BC CBZ X9, 0x3CAB25C
	0x03CAB1C0 LDR W10, [X9 + 0x18]
	0x03CAB1C4 CMP W13, W10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x73D000
	007 Move W8, [X22+792]
	008 Move X20, X2
	009 Move W19, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x4B7000
	016 Move X0, [X0+1680]
	017 Call 0x1C17CF4
	018 Move X0, 0x4AE000
	019 Move X0, [X0+1264]
	020 Call 0x1C17CF4
	021 Move X0, 0x4B7000
	022 Move X0, [X0+1688]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+792], W8
	026 Move X0, [X21+32]
	027 Compare X0, 0
	028 JumpIfEqual {70}
	029 Move X8, 0x4B7000
	030 Move X8, [X8+1688]
	031 Move W1, W19
	032 Move X2, [X8]
	033 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {44}
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return 
	044 Move X0, [X21+32]
	045 Compare X0, 0
	046 JumpIfEqual {70}
	047 Move X8, 0x4B7000
	048 Move X8, [X8+1680]
	049 Move W1, W19
	050 Move X2, X20
	051 Move X3, [X8]
	052 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	053 Compare X20, 0
	054 JumpIfEqual {70}
	055 Move X0, [X21+16]
	056 Compare X0, 0
	057 JumpIfEqual {70}
	058 Move X8, 0x4AE000
	059 Move X2, [X20+40]
	060 Move X8, [X8+1264]
	061 Move W1, W19
	062 Move X20, [X31+32]
	063 Move X19, [X31+40]
	064 Move X22, [X31+16]
	065 Move X21, [X31+24]
	066 Move X3, [X8]
	067 Move X30, [X31+48]
	068 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	069 Return 
	070 Call 0x1C17F20

Method: System.Void AddFontMaterial(System.Int32 hashCode, UnityEngine.Material material)

Disassembly:
	0x03CAB1C8 B.CS 0x3CAB258
	0x03CAB1CC ADD X11, X9, X13, 0x2, LSL
	0x03CAB1D0 LDR W8, [X11 + 0x20]!
	0x03CAB1D4 CMP W12, W10
	0x03CAB1D8 B.CS 0x3CAB258
	0x03CAB1DC ADD X9, X9, X12, 0x2, LSL
	0x03CAB1E0 LDR W9, [X9 + 0x20]
	0x03CAB1E4 STR W9, [X11]
	0x03CAB1E8 LDR X9, [X0 + 0x30]
	0x03CAB1EC CBZ X9, 0x3CAB25C
	0x03CAB1F0 LDR W10, [X9 + 0x18]
	0x03CAB1F4 CMP W12, W10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Void AddFontMaterialInternal(System.Int32 hashCode, UnityEngine.Material material)

Disassembly:
	0x03CAB1F8 B.CS 0x3CAB258
	0x03CAB1FC ADD X9, X9, X12, 0x2, LSL
	0x03CAB200 STR W8, [X9 + 0x20]
	0x03CAB204 LDR X9, [X0 + 0x30]
	0x03CAB208 CBZ X9, 0x3CAB25C
	0x03CAB20C LDR W10, [X9 + 0x18]
	0x03CAB210 CMP W15, W10
	0x03CAB214 B.CS 0x3CAB258
	0x03CAB218 ADD X11, X9, X15, 0x2, LSL
	0x03CAB21C LDR W8, [X11 + 0x20]!
	0x03CAB220 CMP W14, W10
	0x03CAB224 B.CS 0x3CAB258
	0x03CAB228 ADD X9, X9, X14, 0x2, LSL
	0x03CAB22C LDR W9, [X9 + 0x20]
	0x03CAB230 STR W9, [X11]
	0x03CAB234 LDR X9, [X0 + 0x30]
	0x03CAB238 CBZ X9, 0x3CAB25C
	0x03CAB23C LDR W10, [X9 + 0x18]
	0x03CAB240 CMP W14, W10
	0x03CAB244 B.CS 0x3CAB258
	0x03CAB248 ADD X9, X9, X14, 0x2, LSL
	0x03CAB24C STR W8, [X9 + 0x20]
	0x03CAB250 LDR X30, [X31], #0x10
	0x03CAB254 RET
	0x03CAB258 BL 0x1C16F28
	0x03CAB25C BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x73D000
	007 Move W8, [X22+793]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4AE000
	016 Move X0, [X0+1264]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+793], W8
	020 Move X0, [X21+16]
	021 Compare X0, 0
	022 JumpIfEqual {35}
	023 Move X8, 0x4AE000
	024 Move X8, [X8+1264]
	025 Move W1, W20
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X3, [X8]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	034 Return 
	035 Call 0x1C17F20

Method: System.Void AddColorGradientPreset(System.Int32 hashCode, UnityEngine.TextCore.Text.TextColorGradient spriteAsset)

Disassembly:
	0x03CAB260 STR X30, [X31 - 0x20]!
	0x03CAB264 STP X20, X19, [X31 + 0x10]
	0x03CAB268 ADRP X20, 0x73C000
	0x03CAB26C ADRP X19, 0x4B6000
	0x03CAB270 LDRB W8, [X20 + 0x323]
	0x03CAB274 LDR X19, [X19 + 0x6C8]
	0x03CAB278 TBNZ X8, 0x0, 0x3CAB290
	0x03CAB27C ADRP X0, 0x4B6000
	0x03CAB280 LDR X0, [X0 + 0x6C8]
	0x03CAB284 BL 0x1C16CF4
	0x03CAB288 MOVZ W8, 0x1
	0x03CAB28C STRB W8, [X20 + 0x323]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Void AddColorGradientPreset_Internal(System.Int32 hashCode, UnityEngine.TextCore.Text.TextColorGradient spriteAsset)

Disassembly:
	0x03CAB290 LDR X8, [X19]
	0x03CAB294 MOVN W9, 0x0
	0x03CAB298 LDR X8, [X8 + 0xB8]
	0x03CAB29C STR W9, [X8]
	0x03CAB2A0 LDR X8, [X19]
	0x03CAB2A4 MOVZ W9, 0xBF800000
	0x03CAB2A8 LDR X8, [X8 + 0xB8]
	0x03CAB2AC STP W31, W31, [X8 + 0x4]
	0x03CAB2B0 STR W9, [X8 + 0xC]
	0x03CAB2B4 LDR X8, [X19]
	0x03CAB2B8 ADRP X9, 0xFFFFFFFFFCE3F000
	0x03CAB2BC LDR V0, [X9 + 0x5C]
	0x03CAB2C0 LDP X20, X19, [X31 + 0x10]
	0x03CAB2C4 LDR X8, [X8 + 0xB8]
	0x03CAB2C8 STR V0, [X8 + 0x1]
	0x03CAB2CC LDR X30, [X31], #0x20
	0x03CAB2D0 RET
	0x03CAB2D4 STR X30, [X31 - 0x10]!
	0x03CAB2D8 ADD X1, X0, 0x48
	0x03CAB2DC MOVZ W2, 0x60
	0x03CAB2E0 MOV X0, X8
	0x03CAB2E4 BL 0x3EB1AC0
	0x03CAB2E8 LDR X30, [X31], #0x10
	0x03CAB2EC RET
	0x03CAB2F0 STR X30, [X31 - 0x10]!
	0x03CAB2F4 ADD X0, X0, 0x48
	0x03CAB2F8 MOVZ W2, 0x60
	0x03CAB2FC BL 0x3EB1B30
	0x03CAB300 LDR X30, [X31], #0x10
	0x03CAB304 RET
	0x03CAB308 LDR X0, [X0 + 0xA8]
	0x03CAB30C RET
	0x03CAB310 STR X1, [X0 + 0xA8]
	0x03CAB314 RET
	0x03CAB318 STP X30, X19, [X31 - 0x10]!
	0x03CAB31C LDR X8, [X0 + 0x40]
	0x03CAB320 MOV X19, X0
	0x03CAB324 CBNZ X8, 0x3CAB330
	0x03CAB328 MOV X0, X19
	0x03CAB32C BL 0x3CAB33C
	0x03CAB330 LDR X0, [X19 + 0xB0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x73D000
	007 Move W8, [X22+794]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x4B7000
	016 Move X0, [X0+1696]
	017 Call 0x1C17CF4
	018 Move X0, 0x4B7000
	019 Move X0, [X0+1704]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+794], W8
	023 Move X0, [X21+40]
	024 Compare X0, 0
	025 JumpIfEqual {56}
	026 Move X8, 0x4B7000
	027 Move X8, [X8+1704]
	028 Move W1, W20
	029 Move X2, [X8]
	030 Call Dictionary`2<Int32, Object>.ContainsKey, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 
	041 Move X0, [X21+40]
	042 Compare X0, 0
	043 JumpIfEqual {56}
	044 Move X8, 0x4B7000
	045 Move X8, [X8+1696]
	046 Move W1, W20
	047 Move X2, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X3, [X8]
	051 Move X22, [X31+16]
	052 Move X21, [X31+24]
	053 Move X30, [X31+48]
	054 Call Dictionary`2<Int32, Object>.Add, X0, X1, X2
	055 Return 
	056 Call 0x1C17F20

Method: System.Boolean TryGetFontAsset(System.Int32 hashCode, out UnityEngine.TextCore.Text.FontAsset fontAsset)

Disassembly:
	0x03CAB334 LDP X30, X19, [X31], #0x10
	0x03CAB338 RET
	0x03CAB33C STP X29, X30, [X31 - 0x60]!
	0x03CAB340 STP X28, X27, [X31 + 0x10]
	0x03CAB344 STP X26, X25, [X31 + 0x20]
	0x03CAB348 STP X24, X23, [X31 + 0x30]
	0x03CAB34C STP X22, X21, [X31 + 0x40]
	0x03CAB350 STP X20, X19, [X31 + 0x50]
	0x03CAB354 ADRP X20, 0x73C000
	0x03CAB358 LDRB W8, [X20 + 0x324]
	0x03CAB35C MOV X19, X0
	0x03CAB360 TBNZ X8, 0x0, 0x3CAB498

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Boolean TryGetFontAssetInternal(System.Int32 hashCode, out UnityEngine.TextCore.Text.FontAsset fontAsset)

Disassembly:
	0x03CAB364 ADRP X0, 0x4B6000
	0x03CAB368 LDR X0, [X0 + 0x6D0]
	0x03CAB36C BL 0x1C16CF4
	0x03CAB370 ADRP X0, 0x452000
	0x03CAB374 LDR X0, [X0 + 0x858]
	0x03CAB378 BL 0x1C16CF4
	0x03CAB37C ADRP X0, 0x4AE000
	0x03CAB380 LDR X0, [X0 + 0x878]
	0x03CAB384 BL 0x1C16CF4
	0x03CAB388 ADRP X0, 0x4B6000
	0x03CAB38C LDR X0, [X0 + 0x6D8]
	0x03CAB390 BL 0x1C16CF4
	0x03CAB394 ADRP X0, 0x4B6000
	0x03CAB398 LDR X0, [X0 + 0x6E0]
	0x03CAB39C BL 0x1C16CF4
	0x03CAB3A0 ADRP X0, 0x472000
	0x03CAB3A4 LDR X0, [X0 + 0x8D0]
	0x03CAB3A8 BL 0x1C16CF4
	0x03CAB3AC ADRP X0, 0x4B6000
	0x03CAB3B0 LDR X0, [X0 + 0x6E8]
	0x03CAB3B4 BL 0x1C16CF4
	0x03CAB3B8 ADRP X0, 0x4AE000
	0x03CAB3BC LDR X0, [X0 + 0x890]
	0x03CAB3C0 BL 0x1C16CF4
	0x03CAB3C4 ADRP X0, 0x4A3000
	0x03CAB3C8 LDR X0, [X0 + 0xD08]
	0x03CAB3CC BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x73D000
	007 Move W8, [X22+795]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4B7000
	016 Move X0, [X0+1712]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+795], W8
	020 Move [X19], X31
	021 Move X0, [X21+24]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x4B7000
	025 Move X8, [X8+1712]
	026 Move W1, W20
	027 Move X2, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X3, [X8]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean TryGetSpriteAsset(System.Int32 hashCode, out UnityEngine.TextCore.Text.SpriteAsset spriteAsset)

Disassembly:
	0x03CAB3D0 ADRP X0, 0x4AE000
	0x03CAB3D4 LDR X0, [X0 + 0x898]
	0x03CAB3D8 BL 0x1C16CF4
	0x03CAB3DC ADRP X0, 0x4B6000
	0x03CAB3E0 LDR X0, [X0 + 0x6F0]
	0x03CAB3E4 BL 0x1C16CF4
	0x03CAB3E8 ADRP X0, 0x4B6000
	0x03CAB3EC LDR X0, [X0 + 0x6F8]
	0x03CAB3F0 BL 0x1C16CF4
	0x03CAB3F4 ADRP X0, 0x4AE000
	0x03CAB3F8 LDR X0, [X0 + 0x8B0]
	0x03CAB3FC BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Boolean TryGetSpriteAssetInternal(System.Int32 hashCode, out UnityEngine.TextCore.Text.SpriteAsset spriteAsset)

Disassembly:
	0x03CAB400 ADRP X0, 0x452000
	0x03CAB404 LDR X0, [X0 + 0x890]
	0x03CAB408 BL 0x1C16CF4
	0x03CAB40C ADRP X0, 0x4B6000
	0x03CAB410 LDR X0, [X0 + 0x700]
	0x03CAB414 BL 0x1C16CF4
	0x03CAB418 ADRP X0, 0x4B6000
	0x03CAB41C LDR X0, [X0 + 0x708]
	0x03CAB420 BL 0x1C16CF4
	0x03CAB424 ADRP X0, 0x4B6000
	0x03CAB428 LDR X0, [X0 + 0x710]
	0x03CAB42C BL 0x1C16CF4
	0x03CAB430 ADRP X0, 0x4AE000
	0x03CAB434 LDR X0, [X0 + 0x8D0]
	0x03CAB438 BL 0x1C16CF4
	0x03CAB43C ADRP X0, 0x452000
	0x03CAB440 LDR X0, [X0 + 0x888]
	0x03CAB444 BL 0x1C16CF4
	0x03CAB448 ADRP X0, 0x4B6000
	0x03CAB44C LDR X0, [X0 + 0x718]
	0x03CAB450 BL 0x1C16CF4
	0x03CAB454 ADRP X0, 0x4B6000
	0x03CAB458 LDR X0, [X0 + 0x720]
	0x03CAB45C BL 0x1C16CF4
	0x03CAB460 ADRP X0, 0x4B6000
	0x03CAB464 LDR X0, [X0 + 0x728]
	0x03CAB468 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x73D000
	007 Move W8, [X22+796]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4B7000
	016 Move X0, [X0+1720]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+796], W8
	020 Move [X19], X31
	021 Move X0, [X21+32]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x4B7000
	025 Move X8, [X8+1720]
	026 Move W1, W20
	027 Move X2, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X3, [X8]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean TryGetColorGradientPreset(System.Int32 hashCode, out UnityEngine.TextCore.Text.TextColorGradient gradientPreset)

Disassembly:
	0x03CAB46C ADRP X0, 0x4B6000
	0x03CAB470 LDR X0, [X0 + 0x730]
	0x03CAB474 BL 0x1C16CF4
	0x03CAB478 ADRP X0, 0x4B6000
	0x03CAB47C LDR X0, [X0 + 0x738]
	0x03CAB480 BL 0x1C16CF4
	0x03CAB484 ADRP X0, 0x4B6000
	0x03CAB488 LDR X0, [X0 + 0x740]
	0x03CAB48C BL 0x1C16CF4
	0x03CAB490 MOVZ W8, 0x1
	0x03CAB494 STRB W8, [X20 + 0x324]
	0x03CAB498 LDR X0, [X19 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Boolean TryGetColorGradientPresetInternal(System.Int32 hashCode, out UnityEngine.TextCore.Text.TextColorGradient gradientPreset)

Disassembly:
	0x03CAB49C CBZ X0, 0x3CAB4B4
	0x03CAB4A0 ADRP X8, 0x4AE000
	0x03CAB4A4 LDR X8, [X8 + 0x890]
	0x03CAB4A8 LDR X1, [X8]
	0x03CAB4AC BL 0x2B05BBC
	0x03CAB4B0 B 0x3CAB4DC
	0x03CAB4B4 ADRP X8, 0x4AE000
	0x03CAB4B8 LDR X8, [X8 + 0x8D0]
	0x03CAB4BC LDR X0, [X8]
	0x03CAB4C0 BL 0x1C16F10
	0x03CAB4C4 ADRP X8, 0x4AE000
	0x03CAB4C8 LDR X8, [X8 + 0x8B0]
	0x03CAB4CC MOV X20, X0
	0x03CAB4D0 LDR X1, [X8]
	0x03CAB4D4 BL 0x2B05194
	0x03CAB4D8 STR X20, [X19 + 0x40]
	0x03CAB4DC LDR X0, [X19 + 0xC8]
	0x03CAB4E0 CBZ X0, 0x3CAB4F8
	0x03CAB4E4 ADRP X8, 0x4B6000
	0x03CAB4E8 LDR X8, [X8 + 0x6E0]
	0x03CAB4EC LDR X1, [X8]
	0x03CAB4F0 BL 0x2B0F1E4
	0x03CAB4F4 B 0x3CAB520
	0x03CAB4F8 ADRP X8, 0x4B6000
	0x03CAB4FC LDR X8, [X8 + 0x720]
	0x03CAB500 LDR X0, [X8]
	0x03CAB504 BL 0x1C16F10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x73D000
	007 Move W8, [X22+797]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4B7000
	016 Move X0, [X0+1728]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+797], W8
	020 Move [X19], X31
	021 Move X0, [X21+40]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x4B7000
	025 Move X8, [X8+1728]
	026 Move W1, W20
	027 Move X2, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X3, [X8]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean TryGetMaterial(System.Int32 hashCode, out UnityEngine.Material material)

Disassembly:
	0x03CAB508 ADRP X8, 0x4B6000
	0x03CAB50C LDR X8, [X8 + 0x700]
	0x03CAB510 MOV X20, X0
	0x03CAB514 LDR X1, [X8]
	0x03CAB518 BL 0x2B0E7A4
	0x03CAB51C STR X20, [X19 + 0xC8]
	0x03CAB520 LDR X0, [X19 + 0xC0]
	0x03CAB524 CBZ X0, 0x3CAB7CC
	0x03CAB528 ADRP X28, 0x4B6000
	0x03CAB52C ADRP X27, 0x4AE000
	0x03CAB530 ADRP X23, 0x4B6000
	0x03CAB534 ADRP X29, 0x4B6000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move W20, W0
	006 Call MaterialReferenceManager.get_instance
	007 Compare X0, 0
	008 JumpIfEqual {14}
	009 Move W1, W20
	010 Move X2, X19
	011 Move X20, [X31+16]
	012 Move X19, [X31+24]
	013 Move X30, [X31+32]
	014 Call 0x1C17F20

Method: System.Boolean TryGetMaterialInternal(System.Int32 hashCode, out UnityEngine.Material material)

Disassembly:
	0x03CAB538 ADRP X25, 0x4AE000
	0x03CAB53C ADRP X24, 0x4B6000
	0x03CAB540 ADRP X26, 0x4A3000
	0x03CAB544 LDR X28, [X28 + 0x740]
	0x03CAB548 LDR X27, [X27 + 0x898]
	0x03CAB54C LDR X23, [X23 + 0x6F0]
	0x03CAB550 LDR X29, [X29 + 0x6D0]
	0x03CAB554 LDR X25, [X25 + 0x878]
	0x03CAB558 LDR X24, [X24 + 0x738]
	0x03CAB55C LDR X26, [X26 + 0xD08]
	0x03CAB560 MOV W20, W31
	0x03CAB564 LDR W8, [X0 + 0x18]
	0x03CAB568 CMP W20, W8
	0x03CAB56C B.GE 0x3CAB604
	0x03CAB570 LDR X2, [X28]
	0x03CAB574 MOV W1, W20
	0x03CAB578 BL 0x301BCCC
	0x03CAB57C CBZ X0, 0x3CAB7CC
	0x03CAB580 MOV X1, X31
	0x03CAB584 MOV X21, X0
	0x03CAB588 BL 0x3C9C494
	0x03CAB58C LDR X8, [X19 + 0x40]
	0x03CAB590 CBZ X8, 0x3CAB7CC
	0x03CAB594 LDR X2, [X27]
	0x03CAB598 MOV W22, W0
	0x03CAB59C MOV X0, X8
	0x03CAB5A0 MOV W1, W22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x73D000
	007 Move W8, [X22+798]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4AE000
	016 Move X0, [X0+1336]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+798], W8
	020 Move [X19], X31
	021 Move X0, [X21+16]
	022 Compare X0, 0
	023 JumpIfEqual {36}
	024 Move X8, 0x4AE000
	025 Move X8, [X8+1336]
	026 Move W1, W20
	027 Move X2, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X3, [X8]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call Dictionary`2<Int32, Object>.TryGetValue, X0, X1, X2
	035 Return X0
	036 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03CAADA0 STR S3, [X14]
	0x03CAADA4 LDR X12, [X0 + 0x8]
	0x03CAADA8 CBZ X12, 0x3CAB25C
	0x03CAADAC LDR W13, [X12 + 0x18]
	0x03CAADB0 CMP W10, W13
	0x03CAADB4 B.CS 0x3CAB258
	0x03CAADB8 MOVZ W13, 0xC
	0x03CAADBC MADD X12, X10, X13, X12
	0x03CAADC0 STR D0, [X12 + 0x20]
	0x03CAADC4 STR S1, [X12 + 0x28]
	0x03CAADC8 LDR X14, [X0 + 0x8]
	0x03CAADCC CBZ X14, 0x3CAB25C
	0x03CAADD0 LDR W12, [X14 + 0x18]
	0x03CAADD4 ADD W13, W2, 0x2
	0x03CAADD8 CMP W13, W12
	0x03CAADDC B.CS 0x3CAB258
	0x03CAADE0 SXTW X13, W13
	0x03CAADE4 MOVZ W15, 0xC
	0x03CAADE8 MADD X15, X13, X15, X14
	0x03CAADEC LDR V0, [X15 + 0x20]!
	0x03CAADF0 ADD W17, W1, 0x2
	0x03CAADF4 CMP W17, W12
	0x03CAADF8 MOV X16, X15
	0x03CAADFC LDR V1, [X16 + 0x8]!
	0x03CAAE00 B.CS 0x3CAB258
	0x03CAAE04 SXTW X12, W17
	0x03CAAE08 MOVZ W17, 0xC
	0x03CAAE0C MADD X14, X12, X17, X14
	0x03CAAE10 LDR V2, [X14 + 0x20]
	0x03CAAE14 LDR V3, [X14 + 0x28]
	0x03CAAE18 STR D2, [X15]
	0x03CAAE1C STR S3, [X16]
	0x03CAAE20 LDR X14, [X0 + 0x8]
	0x03CAAE24 CBZ X14, 0x3CAB25C
	0x03CAAE28 LDR W15, [X14 + 0x18]
	0x03CAAE2C CMP W12, W15
	0x03CAAE30 B.CS 0x3CAB258
	0x03CAAE34 MOVZ W15, 0xC
	0x03CAAE38 MADD X14, X12, X15, X14
	0x03CAAE3C STR D0, [X14 + 0x20]
	0x03CAAE40 STR S1, [X14 + 0x28]
	0x03CAAE44 LDR X16, [X0 + 0x8]
	0x03CAAE48 CBZ X16, 0x3CAB25C
	0x03CAAE4C LDR W14, [X16 + 0x18]
	0x03CAAE50 ADD W15, W2, 0x3
	0x03CAAE54 CMP W15, W14
	0x03CAAE58 B.CS 0x3CAB258
	0x03CAAE5C SXTW X15, W15
	0x03CAAE60 MOVZ W17, 0xC
	0x03CAAE64 MADD X17, X15, X17, X16
	0x03CAAE68 LDR V0, [X17 + 0x20]!
	0x03CAAE6C ADD W4, W1, 0x3
	0x03CAAE70 CMP W4, W14
	0x03CAAE74 MOV X3, X17
	0x03CAAE78 LDR V1, [X3 + 0x8]!
	0x03CAAE7C B.CS 0x3CAB258
	0x03CAAE80 SXTW X14, W4
	0x03CAAE84 MOVZ W4, 0xC
	0x03CAAE88 MADD X16, X14, X4, X16
	0x03CAAE8C LDR V2, [X16 + 0x20]
	0x03CAAE90 LDR V3, [X16 + 0x28]
	0x03CAAE94 STR D2, [X17]
	0x03CAAE98 STR S3, [X3]
	0x03CAAE9C LDR X16, [X0 + 0x8]
	0x03CAAEA0 CBZ X16, 0x3CAB25C
	0x03CAAEA4 LDR W17, [X16 + 0x18]
	0x03CAAEA8 CMP W14, W17
	0x03CAAEAC B.CS 0x3CAB258
	0x03CAAEB0 MOVZ W17, 0xC
	0x03CAAEB4 MADD X16, X14, X17, X16
	0x03CAAEB8 STR D0, [X16 + 0x20]
	0x03CAAEBC STR S1, [X16 + 0x28]
	0x03CAAEC0 LDR X16, [X0 + 0x20]
	0x03CAAEC4 CBZ X16, 0x3CAB25C
	0x03CAAEC8 LDR W3, [X16 + 0x18]
	0x03CAAECC CMP W3, W2
	0x03CAAED0 B.LS 0x3CAB258
	0x03CAAED4 ADD X17, X16, X9, 0x4, LSL
	0x03CAAED8 LDR V0, [X17 + 0x20]!
	0x03CAAEDC CMP W3, W1
	0x03CAAEE0 B.LS 0x3CAB258
	0x03CAAEE4 ADD X16, X16, X8, 0x4, LSL
	0x03CAAEE8 LDR V1, [X16 + 0x2]
	0x03CAAEEC STR V1, [X17]
	0x03CAAEF0 LDR X16, [X0 + 0x20]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X27, 0x73E000
	013 Move X28, 0x4AF000
	014 Move X20, 0x4AF000
	015 Move X26, 0x4B8000
	016 Move X25, 0x4B8000
	017 Move X24, 0x4B8000
	018 Move X23, 0x4B8000
	019 Move X22, 0x4B8000
	020 Move X21, 0x4B8000
	021 Move X28, [X28+1192]
	022 Move X20, [X20+1200]
	023 Move X26, [X26+1616]
	024 Move W8, [X27+799]
	025 Move X25, [X25+1624]
	026 Move X24, [X24+1632]
	027 Move X23, [X23+1640]
	028 Move X22, [X22+1648]
	029 Move X21, [X21+1656]
	030 Move X19, X0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {61}
	035 Move X0, 0x4AF000
	036 Move X0, [X0+1200]
	037 Call 0x1C17CF4
	038 Move X0, 0x4B8000
	039 Move X0, [X0+1640]
	040 Call 0x1C17CF4
	041 Move X0, 0x4B8000
	042 Move X0, [X0+1624]
	043 Call 0x1C17CF4
	044 Move X0, 0x4B8000
	045 Move X0, [X0+1656]
	046 Call 0x1C17CF4
	047 Move X0, 0x4B8000
	048 Move X0, [X0+1632]
	049 Call 0x1C17CF4
	050 Move X0, 0x4B8000
	051 Move X0, [X0+1648]
	052 Call 0x1C17CF4
	053 Move X0, 0x4AF000
	054 Move X0, [X0+1192]
	055 Call 0x1C17CF4
	056 Move X0, 0x4B8000
	057 Move X0, [X0+1616]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X27+799], W8
	061 Move X0, [X28]
	062 Call 0x1C17F10
	063 Move X1, [X20]
	064 Move X20, X0
	065 Call Dictionary`2<Int32, Object>..ctor, X0
	066 Move [X19+16], X20
	067 Move X0, [X26]
	068 Call 0x1C17F10
	069 Move X1, [X25]
	070 Move X20, X0
	071 Call Dictionary`2<Int32, Object>..ctor, X0
	072 Move [X19+24], X20
	073 Move X0, [X24]
	074 Call 0x1C17F10
	075 Move X1, [X23]
	076 Move X20, X0
	077 Call Dictionary`2<Int32, Object>..ctor, X0
	078 Move [X19+32], X20
	079 Move X0, [X22]
	080 Call 0x1C17F10
	081 Move X1, [X21]
	082 Move X20, X0
	083 Call Dictionary`2<Int32, Object>..ctor, X0
	084 Move [X19+40], X20
	085 Move X0, X19
	086 Move X20, [X31+80]
	087 Move X19, [X31+88]
	088 Move X22, [X31+64]
	089 Move X21, [X31+72]
	090 Move X24, [X31+48]
	091 Move X23, [X31+56]
	092 Move X26, [X31+32]
	093 Move X25, [X31+40]
	094 Move X28, [X31+16]
	095 Move X27, [X31+24]
	096 Move X1, X31
	097 Move X30, [X31+96]
	098 Call Object..ctor, X0
	099 Return 

