Type: UnityEngine.TextCore.Text.Offset

Method: System.Single get_left()

Disassembly:
	0x03CC64F0 LDR W8, [X0 + 0xE0]
	0x03CC64F4 CBNZ W8, 0x3CC64FC

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Single get_right()

Disassembly:
	0x03CC64F8 BL 0x1C16DFC
	0x03CC64FC MOV X0, X23

ISIL:
	001 Move V0, [X0+4]
	002 Return V0

Method: System.Single get_top()

Disassembly:
	0x03CC6500 MOV X1, X22
	0x03CC6504 MOV X2, X24

ISIL:
	001 Move V0, [X0+8]
	002 Return V0

Method: System.Single get_bottom()

Disassembly:
	0x03CC6508 MOV X3, X19
	0x03CC650C MOV X4, X21

ISIL:
	001 Move V0, [X0+12]
	002 Return V0

Method: UnityEngine.TextCore.Text.Offset get_zero()

Disassembly:
	0x03CC6510 MOV X5, X20
	0x03CC6514 BL 0x3CC6550
	0x03CC6518 LDR W8, [X19]
	0x03CC651C SUB W8, W8, 0x1
	0x03CC6520 STR W8, [X19]
	0x03CC6524 LDP X20, X19, [X31 + 0x30]
	0x03CC6528 LDP X22, X21, [X31 + 0x20]
	0x03CC652C LDP X24, X23, [X31 + 0x10]
	0x03CC6530 LDP X30, X25, [X31], #0x40
	0x03CC6534 RET
	0x03CC6538 BL 0x1C16F20
	0x03CC653C BL 0x1C16F28
	0x03CC6540 LDR W0, [X0 + 0x18]
	0x03CC6544 RET
	0x03CC6548 LDR X0, [X0 + 0x30]
	0x03CC654C RET
	0x03CC6550 SUB X31, X31, 0x90
	0x03CC6554 STP X29, X30, [X31 + 0x30]
	0x03CC6558 STP X28, X27, [X31 + 0x40]
	0x03CC655C STP X26, X25, [X31 + 0x50]
	0x03CC6560 STP X24, X23, [X31 + 0x60]
	0x03CC6564 STP X22, X21, [X31 + 0x70]
	0x03CC6568 STP X20, X19, [X31 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x722000
	005 Move X19, 0x49C000
	006 Move W8, [X20+847]
	007 Move X19, [X19+2872]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x49C000
	013 Move X0, [X0+2872]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+847], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move S0, [X8]
	027 Move S1, [X8+4]
	028 Move S2, [X8+8]
	029 Move S3, [X8+12]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Void .ctor(System.Single left, System.Single right, System.Single top, System.Single bottom)

Disassembly:
	0x03CC656C ADRP X19, 0x721000
	0x03CC6570 LDRB W8, [X19 + 0x360]
	0x03CC6574 MOV X21, X5

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Return 

Method: System.Boolean op_Equality(UnityEngine.TextCore.Text.Offset lhs, UnityEngine.TextCore.Text.Offset rhs)

Disassembly:
	0x03CC6578 MOV X22, X2
	0x03CC657C MOV X23, X1
	0x03CC6580 MOV X24, X0
	0x03CC6584 STP X3, X4, [X31 + 0x10]
	0x03CC6588 STR X2, [X31 + 0x28]
	0x03CC658C TBNZ X8, 0x0, 0x3CC65B0
	0x03CC6590 ADRP X0, 0x49B000
	0x03CC6594 LDR X0, [X0 + 0xC80]
	0x03CC6598 BL 0x1C16CF4
	0x03CC659C ADRP X0, 0x49B000
	0x03CC65A0 LDR X0, [X0 + 0xB48]
	0x03CC65A4 BL 0x1C16CF4

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction CSET not yet implemented."
	007 And W0, W8, W9
	008 Return X0
	009 Move W0, W31
	010 Return X0

Method: UnityEngine.TextCore.Text.Offset op_Multiply(UnityEngine.TextCore.Text.Offset a, System.Single b)

Disassembly:
	0x03CC65A8 MOVZ W8, 0x1
	0x03CC65AC STRB W8, [X19 + 0x360]
	0x03CC65B0 STR W31, [X31 + 0x24]
	0x03CC65B4 LDR X8, [X21]
	0x03CC65B8 CBZ X8, 0x3CC69E0

ISIL:
	001 Multiply S0, S0, S4
	002 Multiply S1, S1, S4
	003 Multiply S2, S2, S4
	004 Multiply S3, S3, S4
	005 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03CC65BC CBZ X22, 0x3CC69E0
	0x03CC65C0 LDR X9, [X24]
	0x03CC65C4 CBZ X9, 0x3CC69E0
	0x03CC65C8 LDR W26, [X22 + 0x18]
	0x03CC65CC LDR W10, [X23]
	0x03CC65D0 LDR W9, [X9 + 0x18]
	0x03CC65D4 ADRP X27, 0x49B000
	0x03CC65D8 LDRB W20, [X8 + 0xBE]
	0x03CC65DC LDR X27, [X27 + 0xB48]
	0x03CC65E0 ADD W25, W10, W26
	0x03CC65E4 CMP W25, W9
	0x03CC65E8 B.LT 0x3CC6614
	0x03CC65EC LDR X0, [X27]
	0x03CC65F0 LDR W8, [X0 + 0xE0]
	0x03CC65F4 CBNZ W8, 0x3CC65FC
	0x03CC65F8 BL 0x1C16DFC
	0x03CC65FC ADRP X8, 0x49B000
	0x03CC6600 LDR X8, [X8 + 0xC80]
	0x03CC6604 MOV X0, X24
	0x03CC6608 MOV W1, W25
	0x03CC660C LDR X2, [X8]
	0x03CC6610 BL 0x229C0E8
	0x03CC6614 CMP W26, 0x1
	0x03CC6618 STR X21, [X31 + 0x8]
	0x03CC661C B.LT 0x3CC69BC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x722000
	007 Move X20, 0x49C000
	008 Move W8, [X21+848]
	009 Move X20, [X20+2872]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x49C000
	016 Move X0, [X0+2872]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+848], W8
	020 Move V0, [X19]
	021 Move X0, [X20]
	022 Add X1, X31, 0
	023 Move [X31], V0
	024 Call 0x1C17E04
	025 Move X1, X31
	026 Call ValueType.GetHashCode, X0
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03CC6620 CMP W20, 0x0
	0x03CC6624 MOVZ W28, 0x6A02
	0x03CC6628 MOVZ W29, 0xC72F
	0x03CC662C MOVZ W20, 0x743B
	0x03CC6630 MOV W25, W31
	0x03CC6634 MOVK W28, 0x10000
	0x03CC6638 MOVK W29, 0x2B0000
	0x03CC663C MOVK W20, 0xEE780000
	0x03CC6640 CSET W21, NE
	0x03CC6644 LDR W9, [X22 + 0x18]
	0x03CC6648 CMP W25, W9
	0x03CC664C B.CS 0x3CC69DC
	0x03CC6650 ADD X8, X22, W25, 0x2, SXTW
	0x03CC6654 LDR W0, [X8 + 0x20]
	0x03CC6658 CMP W0, 0x5C
	0x03CC665C B.NE 0x3CC6704
	0x03CC6660 ADD W8, W25, 0x1
	0x03CC6664 CMP W8, W26
	0x03CC6668 B.GE 0x3CC679C
	0x03CC666C CMP W8, W9
	0x03CC6670 B.CS 0x3CC69DC
	0x03CC6674 ADD X9, X22, W8, 0x2, SXTW
	0x03CC6678 LDR W9, [X9 + 0x20]
	0x03CC667C CMP W9, 0x5C
	0x03CC6680 B.HI 0x3CC669C
	0x03CC6684 CMP W9, 0x55
	0x03CC6688 B.EQ 0x3CC66D8
	0x03CC668C CMP W9, 0x5C
	0x03CC6690 B.NE 0x3CC679C
	0x03CC6694 MOVZ W0, 0x5C

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X22, 0x722000
	008 Move X21, 0x49C000
	009 Move W8, [X22+849]
	010 Move X21, [X21+2872]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x49C000
	018 Move X0, [X0+2872]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+849], W8
	022 Move V0, [X20]
	023 Move X0, [X21]
	024 Add X1, X31, 0
	025 Move [X31], V0
	026 Call 0x1C17E04
	027 Move X1, X19
	028 Move X2, X31
	029 Call ValueType.Equals, X0, X1
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X30, [X31+16]
	035 And W0, W0, 1
	036 Add X31, X31, 64
	037 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03CC6698 B 0x3CC6858
	0x03CC669C CMP W9, 0x6E
	0x03CC66A0 B.EQ 0x3CC6854
	0x03CC66A4 CMP W9, 0x75
	0x03CC66A8 B.NE 0x3CC679C
	0x03CC66AC ADD W19, W25, 0x5
	0x03CC66B0 CMP W19, W26
	0x03CC66B4 B.GE 0x3CC679C
	0x03CC66B8 LDR X0, [X27]
	0x03CC66BC LDR W8, [X0 + 0xE0]
	0x03CC66C0 CBNZ W8, 0x3CC66C8
	0x03CC66C4 BL 0x1C16DFC
	0x03CC66C8 ADD W1, W25, 0x2
	0x03CC66CC MOV X0, X22
	0x03CC66D0 BL 0x3CC7324
	0x03CC66D4 B 0x3CC6700
	0x03CC66D8 ADD W19, W25, 0x9
	0x03CC66DC CMP W19, W26

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x722000
	005 Move X20, 0x49C000
	006 Move W8, [X19+850]
	007 Move X20, [X20+2872]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x49C000
	013 Move X0, [X0+2872]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+850], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move [X8], X31
	022 Move [X8+8], X31
	023 Move X30, [X31+32]
	024 Return 

