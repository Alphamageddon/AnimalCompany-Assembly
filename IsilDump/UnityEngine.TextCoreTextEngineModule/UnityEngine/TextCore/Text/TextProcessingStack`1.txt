Type: UnityEngine.TextCore.Text.TextProcessingStack`1

Method: System.Void .ctor(T[] stack)

Disassembly:
	0x026E1D6C MOV W0, W8
	0x026E1D70 LDR X30, [X31], #0x10
	0x026E1D74 RET
	0x026E1D78 MOV W8, W31
	0x026E1D7C B 0x26E1D6C
	0x026E1D80 BL 0x1C16F20
	0x026E1D84 BL 0x1C16F28
	0x026E1D88 STR X30, [X31 - 0x10]!
	0x026E1D8C LDR W9, [X0 + 0x8]
	0x026E1D90 CBZ W9, 0x26E1DB8
	0x026E1D94 LDR X8, [X0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0], X1
	003 Compare X1, 0
	004 JumpIfEqual {12}
	005 Move X8, [X1+24]
	006 NotImplemented "Instruction MOVI not yet implemented."
	007 Move [X0+8], D0
	008 Move [X0+20], D0
	009 Move [X0+16], W8
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Void .ctor(System.Int32 capacity)

Disassembly:
	0x026E1D98 CBZ X8, 0x26E1DC8
	0x026E1D9C LDR W10, [X8 + 0x18]
	0x026E1DA0 SUB W9, W9, 0x1
	0x026E1DA4 CMP W9, W10
	0x026E1DA8 B.CS 0x26E1DCC
	0x026E1DAC ADD X8, X8, W9, 0x2, SXTW
	0x026E1DB0 ADD X8, X8, 0x20
	0x026E1DB4 B 0x26E1DBC
	0x026E1DB8 ADD X8, X0, 0xC
	0x026E1DBC LDR W0, [X8]
	0x026E1DC0 LDR X30, [X31], #0x10
	0x026E1DC4 RET
	0x026E1DC8 BL 0x1C16F20
	0x026E1DCC BL 0x1C16F28
	0x026E1DD0 STR X30, [X31 - 0x10]!
	0x026E1DD4 LDR W9, [X0 + 0x8]
	0x026E1DD8 LDR X8, [X0]
	0x026E1DDC SUBS W9, W9, 0x1
	0x026E1DE0 B.LT 0x26E1DFC
	0x026E1DE4 CBZ X8, 0x26E1E1C
	0x026E1DE8 LDR W10, [X8 + 0x18]
	0x026E1DEC CMP W9, W10
	0x026E1DF0 B.CS 0x26E1E20
	0x026E1DF4 MOV W9, W9
	0x026E1DF8 B 0x26E1E0C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+32]
	005 Move W19, W1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {15}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X8, X0
	015 Move X8, [X8+192]
	016 Move X0, [X8+24]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move W1, W19
	024 Call 0x1C17D6C
	025 NotImplemented "Instruction MOVI not yet implemented."
	026 Move [X20], X0
	027 Move [X20+16], W19
	028 Move [X20+8], D0
	029 Move [X20+20], D0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return 

Method: System.Void .ctor(System.Int32 capacity, System.Int32 rolloverSize)

Disassembly:
	0x026E1DFC CBZ X8, 0x26E1E1C
	0x026E1E00 LDR W9, [X8 + 0x18]
	0x026E1E04 CBZ W9, 0x26E1E20
	0x026E1E08 MOV X9, X31
	0x026E1E0C ADD X8, X8, X9, 0x2, LSL
	0x026E1E10 LDR W0, [X8 + 0x20]
	0x026E1E14 LDR X30, [X31], #0x10
	0x026E1E18 RET
	0x026E1E1C BL 0x1C16F20
	0x026E1E20 BL 0x1C16F28
	0x026E1E24 STR X30, [X31 - 0x10]!
	0x026E1E28 STR X1, [X0]
	0x026E1E2C CBZ X1, 0x26E1E4C
	0x026E1E30 LDR X8, [X1 + 0x18]
	0x026E1E34 MOVI V0.2D, 0x0
	0x026E1E38 STR D0, [X0 + 0x8]
	0x026E1E3C STUR D0, [X0 + 0x14]
	0x026E1E40 STR W8, [X0 + 0x10]
	0x026E1E44 LDR X30, [X31], #0x10
	0x026E1E48 RET
	0x026E1E4C BL 0x1C16F20
	0x026E1E50 STR X30, [X31 - 0x20]!
	0x026E1E54 STP X20, X19, [X31 + 0x10]
	0x026E1E58 LDR X8, [X2 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+32]
	006 Move W19, W2
	007 Move W21, W1
	008 Move X20, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, [X8+24]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move W1, W21
	026 Call 0x1C17D6C
	027 Move [X20], X0
	028 Move [X20+8], X31
	029 Move [X20+16], W21
	030 Move [X20+20], W19
	031 Move [X20+24], W31
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 

Method: System.Int32 get_Count()

Disassembly:
	0x026E1E5C MOV W19, W1
	0x026E1E60 MOV X20, X0

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: T get_current()

Disassembly:
	0x026E1E64 LDRB W9, [X8 + 0x135]
	0x026E1E68 TBNZ X9, 0x0, 0x26E1E78
	0x026E1E6C MOV X0, X8
	0x026E1E70 BL 0x1C5C684
	0x026E1E74 MOV X8, X0
	0x026E1E78 LDR X8, [X8 + 0xC0]
	0x026E1E7C LDR X0, [X8 + 0x18]
	0x026E1E80 LDRB W8, [X0 + 0x135]
	0x026E1E84 TBNZ X8, 0x0, 0x26E1E8C
	0x026E1E88 BL 0x1C5C684
	0x026E1E8C MOV W1, W19
	0x026E1E90 BL 0x1C16D6C
	0x026E1E94 MOVI V0.2D, 0x0
	0x026E1E98 STR X0, [X20]
	0x026E1E9C STR W19, [X20 + 0x10]
	0x026E1EA0 STR D0, [X20 + 0x8]
	0x026E1EA4 STUR D0, [X20 + 0x14]
	0x026E1EA8 LDP X20, X19, [X31 + 0x10]
	0x026E1EAC LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+8]
	003 Move X8, [X0]
	004 Subtract W9, W9, 1
	005 Compare X8, 0
	006 JumpIfEqual {19}
	007 Move W10, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add X8, X8, W9
	010 Compare X8, 0
	011 JumpIfEqual {19}
	012 Move W9, [X8+24]
	013 Compare W9, 0
	014 JumpIfEqual {20}
	015 Add X8, X8, 32
	016 Move W0, [X8]
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

Method: System.Void SetDefault(UnityEngine.TextCore.Text.TextProcessingStack`1<T>[] stack, T item)

Disassembly:
	0x026E1EB0 RET
	0x026E1EB4 STP X30, X21, [X31 - 0x20]!
	0x026E1EB8 STP X20, X19, [X31 + 0x10]
	0x026E1EBC LDR X8, [X3 + 0x20]
	0x026E1EC0 MOV W19, W2
	0x026E1EC4 MOV W21, W1
	0x026E1EC8 MOV X20, X0
	0x026E1ECC LDRB W9, [X8 + 0x135]
	0x026E1ED0 TBNZ X9, 0x0, 0x26E1EE0
	0x026E1ED4 MOV X0, X8
	0x026E1ED8 BL 0x1C5C684
	0x026E1EDC MOV X8, X0
	0x026E1EE0 LDR X8, [X8 + 0xC0]
	0x026E1EE4 LDR X0, [X8 + 0x18]
	0x026E1EE8 LDRB W8, [X0 + 0x135]
	0x026E1EEC TBNZ X8, 0x0, 0x26E1EF4
	0x026E1EF0 BL 0x1C5C684
	0x026E1EF4 MOV W1, W21
	0x026E1EF8 BL 0x1C16D6C
	0x026E1EFC STP X0, X31, [X20]
	0x026E1F00 STP W21, W19, [X20 + 0x10]
	0x026E1F04 STR W31, [X20 + 0x18]
	0x026E1F08 LDP X20, X19, [X31 + 0x10]
	0x026E1F0C LDP X30, X21, [X31], #0x20
	0x026E1F10 RET
	0x026E1F14 LDR W0, [X0 + 0x18]
	0x026E1F18 RET
	0x026E1F1C STR X30, [X31 - 0x10]!
	0x026E1F20 LDR W9, [X0 + 0x8]
	0x026E1F24 LDR X8, [X0]
	0x026E1F28 SUBS W9, W9, 0x1
	0x026E1F2C B.LT 0x26E1F48
	0x026E1F30 CBZ X8, 0x26E1F68
	0x026E1F34 LDR W10, [X8 + 0x18]
	0x026E1F38 CMP W9, W10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X0, 0
	008 JumpIfEqual {42}
	009 Move X8, [X0+24]
	010 Move X20, X0
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X19, X2
	013 Move X23, X31
	014 And X21, X1, 0
	015 And X8, X8, 0
	016 Add X22, X20, 32
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, [X19+32]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move X8, [X0+192]
	026 Move X0, X22
	027 Move X1, X21
	028 Move X2, [X8+40]
	029 Call 0x26E1F48, X0, X1
	030 Move W8, [X20+24]
	031 Add X23, X23, 1
	032 Add X22, X22, 32
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Move X23, [X31+56]
	040 Return 
	041 Call 0x1C17F28
	042 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x026E1F3C B.CS 0x26E1F6C
	0x026E1F40 MOV W9, W9
	0x026E1F44 B 0x26E1F58

ISIL:
	001 Move [X0+8], W31
	002 Move [X0+24], W31
	003 Return 

Method: System.Void SetDefault(T item)

Disassembly:
	0x026E1F48 CBZ X8, 0x26E1F68
	0x026E1F4C LDR W9, [X8 + 0x18]
	0x026E1F50 CBZ W9, 0x26E1F6C
	0x026E1F54 MOV X9, X31
	0x026E1F58 ADD X8, X8, X9, 0x2, LSL
	0x026E1F5C LDR W0, [X8 + 0x20]
	0x026E1F60 LDR X30, [X31], #0x10
	0x026E1F64 RET
	0x026E1F68 BL 0x1C16F20
	0x026E1F6C BL 0x1C16F28
	0x026E1F70 STP X30, X23, [X31 - 0x30]!
	0x026E1F74 STP X22, X21, [X31 + 0x10]
	0x026E1F78 STP X20, X19, [X31 + 0x20]
	0x026E1F7C CBZ X0, 0x26E1FF8
	0x026E1F80 LDR X8, [X0 + 0x18]
	0x026E1F84 MOV X21, X0
	0x026E1F88 CMP W8, 0x1
	0x026E1F8C B.LT 0x26E1FE4
	0x026E1F90 MOV X19, X2
	0x026E1F94 MOV W20, W1
	0x026E1F98 MOV X23, X31
	0x026E1F9C AND X8, X8, 0x0
	0x026E1FA0 ADD X22, X21, 0x20
	0x026E1FA4 CMP X23, W8, UXTW
	0x026E1FA8 B.CS 0x26E1FF4
	0x026E1FAC LDR X0, [X19 + 0x20]
	0x026E1FB0 LDRB W8, [X0 + 0x135]
	0x026E1FB4 TBNZ X8, 0x0, 0x26E1FBC
	0x026E1FB8 BL 0x1C5C684
	0x026E1FBC LDR X8, [X0 + 0xC0]
	0x026E1FC0 MOV X0, X22
	0x026E1FC4 MOV W1, W20
	0x026E1FC8 LDR X2, [X8 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0]
	006 Move X20, X1
	007 Compare X0, 0
	008 JumpIfNotEqual {30}
	009 Move W8, 4
	010 Move [X19+16], W8
	011 Move X0, [X2+32]
	012 Move W8, [X0+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move X8, [X0+192]
	019 Move X0, [X8+24]
	020 Move W8, [X0+309]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {26}
	025 Call 0x1C5D684
	026 Move W1, 4
	027 Call 0x1C17D6C
	028 Move [X19], X0
	029 Move [X19+12], W31
	030 Compare X0, 0
	031 JumpIfEqual {43}
	032 Move W8, [X0+24]
	033 Compare W8, 0
	034 JumpIfEqual {44}
	035 Move W8, 1
	036 Move [X0+32], W20
	037 Move [X19+8], W8
	038 Move [X19+24], W8
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return 
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.Void Add(T item)

Disassembly:
	0x026E1FCC BL 0x26E2008
	0x026E1FD0 LDR W8, [X21 + 0x18]
	0x026E1FD4 ADD X23, X23, 0x1
	0x026E1FD8 ADD X22, X22, 0x20
	0x026E1FDC CMP X23, W8, SXTW
	0x026E1FE0 B.LT 0x26E1FA4
	0x026E1FE4 LDP X20, X19, [X31 + 0x20]
	0x026E1FE8 LDP X22, X21, [X31 + 0x10]
	0x026E1FEC LDP X30, X23, [X31], #0x30
	0x026E1FF0 RET
	0x026E1FF4 BL 0x1C16F28
	0x026E1FF8 BL 0x1C16F20
	0x026E1FFC STR W31, [X0 + 0x8]
	0x026E2000 STR W31, [X0 + 0x18]
	0x026E2004 RET
	0x026E2008 STR X30, [X31 - 0x20]!
	0x026E200C STP X20, X19, [X31 + 0x10]
	0x026E2010 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0]
	003 Compare X8, 0
	004 JumpIfEqual {16}
	005 NotImplemented "Instruction LDRSW not yet implemented."
	006 Move W10, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add X8, X8, X9
	010 Move [X8+32], W1
	011 Move W8, [X0+8]
	012 Add W8, W8, 1
	013 Move [X0+8], W8
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20
	017 Call 0x1C17F28

Method: T Remove()

Disassembly:
	0x026E2014 LDR X0, [X0]
	0x026E2018 MOV W20, W1
	0x026E201C CBNZ X0, 0x26E205C
	0x026E2020 MOVZ W8, 0x4
	0x026E2024 STR W8, [X19 + 0x10]
	0x026E2028 LDR X0, [X2 + 0x20]
	0x026E202C LDRB W8, [X0 + 0x135]
	0x026E2030 TBNZ X8, 0x0, 0x26E2038
	0x026E2034 BL 0x1C5C684
	0x026E2038 LDR X8, [X0 + 0xC0]
	0x026E203C LDR X0, [X8 + 0x18]
	0x026E2040 LDRB W8, [X0 + 0x135]
	0x026E2044 TBNZ X8, 0x0, 0x26E204C
	0x026E2048 BL 0x1C5C684
	0x026E204C MOVZ W1, 0x4
	0x026E2050 BL 0x1C16D6C
	0x026E2054 STR X0, [X19]
	0x026E2058 STR W31, [X19 + 0xC]
	0x026E205C CBZ X0, 0x26E2084
	0x026E2060 LDR W8, [X0 + 0x18]
	0x026E2064 CBZ W8, 0x26E2088
	0x026E2068 MOVZ W8, 0x1
	0x026E206C STR W20, [X0 + 0x20]
	0x026E2070 STR W8, [X19 + 0x8]
	0x026E2074 STR W8, [X19 + 0x18]
	0x026E2078 LDP X20, X19, [X31 + 0x10]
	0x026E207C LDR X30, [X31], #0x20
	0x026E2080 RET
	0x026E2084 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+8]
	003 Move W9, [X0+24]
	004 Subtract W10, W8, 1
	005 Subtract W9, W9, 1
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move [X0+8], W10
	008 Move [X0+24], W9
	009 Move X9, [X0]
	010 Compare X9, 0
	011 JumpIfEqual {29}
	012 Move W10, [X9+24]
	013 Subtract W8, W8, 2
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add X8, X9, W8
	016 Move X8, [X0]
	017 Move W9, 1
	018 Move [X0+24], W31
	019 Move [X0+8], W9
	020 Compare X8, 0
	021 JumpIfEqual {29}
	022 Move W9, [X8+24]
	023 Compare W9, 0
	024 JumpIfEqual {30}
	025 Add X8, X8, 32
	026 Move W0, [X8]
	027 Move X30, [X31+16]
	028 Return X0
	029 Call 0x1C17F20
	030 Call 0x1C17F28

Method: System.Void Push(T item)

Disassembly:
	0x026E2088 BL 0x1C16F28
	0x026E208C STR X30, [X31 - 0x10]!
	0x026E2090 LDR X8, [X0]
	0x026E2094 CBZ X8, 0x26E20CC
	0x026E2098 LDRSW X9, [X0 + 0x8]
	0x026E209C LDR W10, [X8 + 0x18]
	0x026E20A0 CMP W9, W10
	0x026E20A4 B.GE 0x26E20C4
	0x026E20A8 CMP W9, W10
	0x026E20AC B.CS 0x26E20D0
	0x026E20B0 ADD X8, X8, X9, 0x2, LSL
	0x026E20B4 STR W1, [X8 + 0x20]
	0x026E20B8 LDR W8, [X0 + 0x8]
	0x026E20BC ADD W8, W8, 0x1
	0x026E20C0 STR W8, [X0 + 0x8]
	0x026E20C4 LDR X30, [X31], #0x10
	0x026E20C8 RET
	0x026E20CC BL 0x1C16F20
	0x026E20D0 BL 0x1C16F28
	0x026E20D4 STR X30, [X31 - 0x10]!
	0x026E20D8 LDR W8, [X0 + 0x8]
	0x026E20DC LDR W9, [X0 + 0x18]
	0x026E20E0 SUB W10, W8, 0x1
	0x026E20E4 SUB W9, W9, 0x1
	0x026E20E8 CMP W10, 0x0
	0x026E20EC STR W10, [X0 + 0x8]
	0x026E20F0 STR W9, [X0 + 0x18]
	0x026E20F4 B.LE 0x26E2118
	0x026E20F8 LDR X9, [X0]
	0x026E20FC CBZ X9, 0x26E2140
	0x026E2100 LDR W10, [X9 + 0x18]
	0x026E2104 SUB W8, W8, 0x2
	0x026E2108 CMP W8, W10
	0x026E210C B.CS 0x26E2144
	0x026E2110 ADD X8, X9, W8, 0x2, UXTW
	0x026E2114 B 0x26E2134
	0x026E2118 LDR X8, [X0]
	0x026E211C MOVZ W9, 0x1
	0x026E2120 STR W31, [X0 + 0x18]
	0x026E2124 STR W9, [X0 + 0x8]
	0x026E2128 CBZ X8, 0x26E2140
	0x026E212C LDR W9, [X8 + 0x18]
	0x026E2130 CBZ W9, 0x26E2144
	0x026E2134 LDR W0, [X8 + 0x20]!
	0x026E2138 LDR X30, [X31], #0x10
	0x026E213C RET
	0x026E2140 BL 0x1C16F20
	0x026E2144 BL 0x1C16F28
	0x026E2148 STP X30, X21, [X31 - 0x20]!
	0x026E214C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+8]
	006 Move W9, [X0+16]
	007 Move X19, X0
	008 Move X20, X1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W8, W8
	011 ShiftRight W8, 31
	012 And W8, W8, 0x3FFFFFFF
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W9, 4
	015 NotImplemented "Instruction CSEL not yet implemented."
	016 Move [X19+16], W21
	017 Move X0, [X2+32]
	018 Move W8, [X0+309]
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {24}
	023 Call 0x1C5D684
	024 Move X8, [X0+192]
	025 Move X0, X19
	026 Move W1, W21
	027 Move X2, [X8+56]
	028 Call Array.Resize, X0, X1
	029 Move W8, [X19+8]
	030 Move X9, [X19]
	031 Compare X9, 0
	032 JumpIfEqual {57}
	033 Move W10, [X9+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add X8, X9, W8
	036 Move [X8+32], W20
	037 Move W8, [X19+8]
	038 Move W9, [X19+20]
	039 Add W8, W8, 1
	040 Compare W9, 0
	041 JumpIfEqual {48}
	042 Move W10, [X19+24]
	043 NotImplemented "Instruction SDIV not yet implemented."
	044 NotImplemented "Instruction MSUB not yet implemented."
	045 Move [X19+8], W8
	046 NotImplemented "Instruction CMP not yet implemented."
	047 NotImplemented "Instruction CSINC not yet implemented."
	048 Move W9, [X19+24]
	049 Move [X19+8], W8
	050 Add W8, W9, 1
	051 Move [X19+24], W8
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 
	057 Call 0x1C17F20
	058 Call 0x1C17F28

Method: T Pop()

Disassembly:
	0x026E2150 LDR W8, [X0 + 0x8]
	0x026E2154 LDR W9, [X0 + 0x10]
	0x026E2158 MOV X19, X0
	0x026E215C MOV W20, W1
	0x026E2160 CMP W8, W9
	0x026E2164 B.NE 0x26E21A4
	0x026E2168 UBFM W8, W8, 0x1F, 0x1E
	0x026E216C CMP W8, 0x0
	0x026E2170 MOVZ W9, 0x4
	0x026E2174 CSEL W21, W9, W8, EQ
	0x026E2178 STR W21, [X19 + 0x10]
	0x026E217C LDR X0, [X2 + 0x20]
	0x026E2180 LDRB W8, [X0 + 0x135]
	0x026E2184 TBNZ X8, 0x0, 0x26E218C
	0x026E2188 BL 0x1C5C684
	0x026E218C LDR X8, [X0 + 0xC0]
	0x026E2190 MOV X0, X19
	0x026E2194 MOV W1, W21
	0x026E2198 LDR X2, [X8 + 0x38]
	0x026E219C BL 0x21163A0
	0x026E21A0 LDR W8, [X19 + 0x8]
	0x026E21A4 LDR X9, [X19]
	0x026E21A8 CBZ X9, 0x26E2208
	0x026E21AC LDR W10, [X9 + 0x18]
	0x026E21B0 CMP W8, W10
	0x026E21B4 B.CS 0x26E220C
	0x026E21B8 ADD X8, X9, W8, 0x2, SXTW
	0x026E21BC STR W20, [X8 + 0x20]
	0x026E21C0 LDR W8, [X19 + 0x8]
	0x026E21C4 LDR W9, [X19 + 0x14]
	0x026E21C8 ADD W8, W8, 0x1
	0x026E21CC CBZ W9, 0x26E21EC
	0x026E21D0 LDR W10, [X19 + 0x18]
	0x026E21D4 SDIV W11, W8, W9
	0x026E21D8 MSUB W8, W11, W9, W8

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+8]
	003 Move W9, [X0+20]
	004 Compare W8, 0
	005 JumpIfEqual {9}
	006 Subtract W8, W8, 1
	007 Compare W9, 0
	008 JumpIfNotEqual {14}
	009 Compare W9, 0
	010 JumpIfEqual {36}
	011 Move TEMP, 0
	012 Not TEMP
	013 Move W8, TEMP
	014 NotImplemented "Instruction SDIV not yet implemented."
	015 NotImplemented "Instruction MSUB not yet implemented."
	016 And W9, W9, W8
	017 Add W8, W9, W8
	018 Move X9, [X0]
	019 Move [X0+8], W8
	020 Compare X9, 0
	021 JumpIfEqual {37}
	022 Move W10, [X9+24]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W10, [X0+12]
	025 Add X9, X9, W8
	026 Move W8, [X9+32]
	027 Move [X9+32], W10
	028 Move W9, [X0+24]
	029 Subtract W10, W9, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move [X0+24], W9
	033 Move X0, X8
	034 Move X30, [X31+16]
	035 Return X0
	036 Move X8, X31
	037 Call 0x1C17F20
	038 Call 0x1C17F28

Method: T Peek()

Disassembly:
	0x026E21DC STR W8, [X19 + 0x8]
	0x026E21E0 CMP W10, W9
	0x026E21E4 CSINC W8, W9, W10, GE
	0x026E21E8 B 0x26E21F8
	0x026E21EC LDR W9, [X19 + 0x18]
	0x026E21F0 STR W8, [X19 + 0x8]
	0x026E21F4 ADD W8, W9, 0x1
	0x026E21F8 STR W8, [X19 + 0x18]
	0x026E21FC LDP X20, X19, [X31 + 0x10]
	0x026E2200 LDP X30, X21, [X31], #0x20
	0x026E2204 RET
	0x026E2208 BL 0x1C16F20
	0x026E220C BL 0x1C16F28
	0x026E2210 STR X30, [X31 - 0x10]!
	0x026E2214 LDR W8, [X0 + 0x8]
	0x026E2218 LDR W9, [X0 + 0x14]
	0x026E221C CBZ W8, 0x26E222C
	0x026E2220 SUB W8, W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+8]
	003 Compare W9, 0
	004 JumpIfEqual {13}
	005 Move X8, [X0]
	006 Compare X8, 0
	007 JumpIfEqual {17}
	008 Move W10, [X8+24]
	009 Subtract W9, W9, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Add X8, X8, W9
	012 Add X8, X8, 32
	013 Add X8, X0, 12
	014 Move W0, [X8]
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20
	018 Call 0x1C17F28

Method: T CurrentItem()

Disassembly:
	0x026E2224 CBNZ W9, 0x26E2234
	0x026E2228 B 0x26E2244
	0x026E222C CBZ W9, 0x26E228C
	0x026E2230 MOVN W8, 0x0
	0x026E2234 SDIV W10, W8, W9
	0x026E2238 MSUB W8, W10, W9, W8
	0x026E223C AND W9, W9, W8, 0x1F
	0x026E2240 ADD W8, W9, W8
	0x026E2244 LDR X9, [X0]
	0x026E2248 STR W8, [X0 + 0x8]
	0x026E224C CBZ X9, 0x26E2294
	0x026E2250 LDR W10, [X9 + 0x18]
	0x026E2254 CMP W8, W10
	0x026E2258 B.CS 0x26E2298
	0x026E225C LDR W10, [X0 + 0xC]
	0x026E2260 ADD X9, X9, W8, 0x2, SXTW
	0x026E2264 LDR W8, [X9 + 0x20]
	0x026E2268 STR W10, [X9 + 0x20]
	0x026E226C LDR W9, [X0 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move W9, [X0+8]
	003 Move X8, [X0]
	004 Subtract W9, W9, 1
	005 Compare X8, 0
	006 JumpIfEqual {19}
	007 Move W10, [X8+24]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Add X8, X8, W9
	010 Compare X8, 0
	011 JumpIfEqual {19}
	012 Move W9, [X8+24]
	013 Compare W9, 0
	014 JumpIfEqual {20}
	015 Add X8, X8, 32
	016 Move W0, [X8]
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20
	020 Call 0x1C17F28

