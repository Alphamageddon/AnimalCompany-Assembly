Type: UnityEngine.TextCore.Text.UnicodeLineBreakingRules

Method: UnityEngine.TextAsset get_leadingCharacters()

Disassembly:
	0x03CCF04C ADD X2, X31, 0x0
	0x03CCF050 MOV X0, X20

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: UnityEngine.TextAsset get_followingCharacters()

Disassembly:
	0x03CCF054 MOV X1, X19
	0x03CCF058 BL 0x3CCF2E4

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Collections.Generic.HashSet`1<System.UInt32> get_leadingCharactersLookup()

Disassembly:
	0x03CCF05C LDP X20, X19, [X31 + 0x70]
	0x03CCF060 LDR X30, [X31 + 0x60]
	0x03CCF064 CMP W0, 0x0
	0x03CCF068 CSET W0, EQ
	0x03CCF06C ADD X31, X31, 0x80
	0x03CCF070 RET
	0x03CCF074 SUB X31, X31, 0x30
	0x03CCF078 STP X31, X30, [X31 + 0x8]
	0x03CCF07C STP X20, X19, [X31 + 0x20]
	0x03CCF080 ADRP X20, 0x718000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+48]
	005 Compare X0, 0
	006 JumpIfNotEqual {12}
	007 Move X1, [X19+24]
	008 Move X2, [X19+32]
	009 Move X0, X19
	010 Call UnicodeLineBreakingRules.LoadLineBreakingRules, X0, X1, X2
	011 Move X0, [X19+48]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return X0

Method: System.Collections.Generic.HashSet`1<System.UInt32> get_followingCharactersLookup()

Disassembly:
	0x03CCF258 CBZ X20, 0x3CCF270
	0x03CCF25C LDR X8, [X21]
	0x03CCF260 MOV X0, X20
	0x03CCF264 LDR X1, [X8 + 0x40]
	0x03CCF268 BL 0x1C16E00
	0x03CCF26C CBZ X0, 0x3CCF2D8
	0x03CCF270 LDR W8, [X21 + 0x18]
	0x03CCF274 CBZ W8, 0x3CCF2D4
	0x03CCF278 STR X20, [X21 + 0x20]
	0x03CCF27C ADRP X8, 0x424000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+48]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {11}
	007 Move X1, [X19+24]
	008 Move X2, [X19+32]
	009 Move X0, X19
	010 Call UnicodeLineBreakingRules.LoadLineBreakingRules, X0, X1, X2
	011 Move X0, [X19+56]
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return X0

Method: System.Boolean get_useModernHangulLineBreakingRules()

Disassembly:
	0x03CCF280 LDR X8, [X8 + 0xA28]
	0x03CCF284 LDR X0, [X8]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void LoadLineBreakingRules()

Disassembly:
	0x03CCD064 ADRP X0, 0x494000
	0x03CCD068 LDR X0, [X0 + 0xF30]
	0x03CCD06C BL 0x1C16CF4
	0x03CCD070 ADRP X0, 0x48C000
	0x03CCD074 LDR X0, [X0 + 0x5B8]
	0x03CCD078 BL 0x1C16CF4
	0x03CCD07C ADRP X0, 0x48C000
	0x03CCD080 LDR X0, [X0 + 0x5C0]
	0x03CCD084 BL 0x1C16CF4
	0x03CCD088 ADRP X0, 0x494000
	0x03CCD08C LDR X0, [X0 + 0xF38]
	0x03CCD090 BL 0x1C16CF4
	0x03CCD094 ADRP X0, 0x48C000
	0x03CCD098 LDR X0, [X0 + 0x5C8]
	0x03CCD09C BL 0x1C16CF4
	0x03CCD0A0 ADRP X0, 0x48C000
	0x03CCD0A4 LDR X0, [X0 + 0x5D0]
	0x03CCD0A8 BL 0x1C16CF4
	0x03CCD0AC ADRP X0, 0x48C000
	0x03CCD0B0 LDR X0, [X0 + 0x5D8]
	0x03CCD0B4 BL 0x1C16CF4
	0x03CCD0B8 ADRP X0, 0x48C000
	0x03CCD0BC LDR X0, [X0 + 0x5E8]
	0x03CCD0C0 BL 0x1C16CF4
	0x03CCD0C4 ADRP X0, 0x48C000
	0x03CCD0C8 LDR X0, [X0 + 0x5F0]
	0x03CCD0CC BL 0x1C16CF4
	0x03CCD0D0 ADRP X0, 0x48C000
	0x03CCD0D4 LDR X0, [X0 + 0x5F8]
	0x03CCD0D8 BL 0x1C16CF4
	0x03CCD0DC ADRP X0, 0x48C000
	0x03CCD0E0 LDR X0, [X0 + 0x600]
	0x03CCD0E4 BL 0x1C16CF4
	0x03CCD0E8 ADRP X0, 0x48C000
	0x03CCD0EC LDR X0, [X0 + 0x608]
	0x03CCD0F0 BL 0x1C16CF4
	0x03CCD0F4 ADRP X0, 0x48C000
	0x03CCD0F8 LDR X0, [X0 + 0x610]
	0x03CCD0FC BL 0x1C16CF4
	0x03CCD100 ADRP X0, 0x48C000
	0x03CCD104 LDR X0, [X0 + 0x618]
	0x03CCD108 BL 0x1C16CF4
	0x03CCD10C ADRP X0, 0x48C000
	0x03CCD110 LDR X0, [X0 + 0x620]
	0x03CCD114 BL 0x1C16CF4
	0x03CCD118 ADRP X0, 0x48C000
	0x03CCD11C LDR X0, [X0 + 0x628]
	0x03CCD120 BL 0x1C16CF4
	0x03CCD124 ADRP X0, 0x48C000
	0x03CCD128 LDR X0, [X0 + 0x630]
	0x03CCD12C BL 0x1C16CF4
	0x03CCD130 MOVZ W8, 0x1
	0x03CCD134 STRB W8, [X20 + 0x389]
	0x03CCD138 LDR X0, [X19]
	0x03CCD13C LDR W8, [X0 + 0xE0]
	0x03CCD140 CBNZ W8, 0x3CCD14C
	0x03CCD144 BL 0x1C16DFC
	0x03CCD148 LDR X0, [X19]
	0x03CCD14C LDR X8, [X0 + 0xB8]
	0x03CCD150 LDRB W9, [X8 + 0x144]
	0x03CCD154 CBNZ W9, 0x3CCD8F4
	0x03CCD158 LDR W9, [X0 + 0xE0]
	0x03CCD15C CBNZ W9, 0x3CCD16C
	0x03CCD160 BL 0x1C16DFC
	0x03CCD164 LDR X8, [X19]
	0x03CCD168 LDR X8, [X8 + 0xB8]
	0x03CCD16C MOVZ W9, 0x1
	0x03CCD170 STRB W9, [X8 + 0x144]
	0x03CCD174 ADRP X8, 0x480000
	0x03CCD178 LDR X8, [X8 + 0xB00]
	0x03CCD17C MOV X1, X31
	0x03CCD180 LDR X0, [X8]
	0x03CCD184 BL 0x3C124EC
	0x03CCD188 LDR X8, [X19]
	0x03CCD18C MOV X1, X31
	0x03CCD190 LDR X8, [X8 + 0xB8]
	0x03CCD194 STR W0, [X8]
	0x03CCD198 ADRP X8, 0x48C000
	0x03CCD19C LDR X8, [X8 + 0x600]
	0x03CCD1A0 LDR X0, [X8]
	0x03CCD1A4 BL 0x3C124EC
	0x03CCD1A8 LDR X8, [X19]
	0x03CCD1AC MOV X1, X31
	0x03CCD1B0 LDR X8, [X8 + 0xB8]
	0x03CCD1B4 STR W0, [X8 + 0x4]
	0x03CCD1B8 ADRP X8, 0x48C000
	0x03CCD1BC LDR X8, [X8 + 0x4D0]
	0x03CCD1C0 LDR X0, [X8]
	0x03CCD1C4 BL 0x3C124EC
	0x03CCD1C8 LDR X8, [X19]
	0x03CCD1CC MOV X1, X31
	0x03CCD1D0 LDR X8, [X8 + 0xB8]
	0x03CCD1D4 STR W0, [X8 + 0x8]
	0x03CCD1D8 ADRP X8, 0x48C000
	0x03CCD1DC LDR X8, [X8 + 0x518]
	0x03CCD1E0 LDR X0, [X8]
	0x03CCD1E4 BL 0x3C124EC
	0x03CCD1E8 LDR X8, [X19]
	0x03CCD1EC MOV X1, X31
	0x03CCD1F0 LDR X8, [X8 + 0xB8]
	0x03CCD1F4 STR W0, [X8 + 0xC]
	0x03CCD1F8 ADRP X8, 0x48C000
	0x03CCD1FC LDR X8, [X8 + 0x5C0]
	0x03CCD200 LDR X0, [X8]
	0x03CCD204 BL 0x3C124EC
	0x03CCD208 LDR X8, [X19]
	0x03CCD20C MOV X1, X31
	0x03CCD210 LDR X8, [X8 + 0xB8]
	0x03CCD214 STR W0, [X8 + 0x10]
	0x03CCD218 ADRP X8, 0x494000
	0x03CCD21C LDR X8, [X8 + 0xF18]
	0x03CCD220 LDR X0, [X8]
	0x03CCD224 BL 0x3C124EC
	0x03CCD228 LDR X8, [X19]
	0x03CCD22C MOV X1, X31
	0x03CCD230 LDR X8, [X8 + 0xB8]
	0x03CCD234 STR W0, [X8 + 0x14]
	0x03CCD238 ADRP X8, 0x494000
	0x03CCD23C LDR X8, [X8 + 0xF10]
	0x03CCD240 LDR X0, [X8]
	0x03CCD244 BL 0x3C124EC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x71B000
	006 Move W8, [X20+913]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {32}
	012 Move X0, 0x482000
	013 Move X0, [X0+2096]
	014 Call 0x1C17CF4
	015 Move X0, 0x482000
	016 Move X0, [X0+2104]
	017 Call 0x1C17CF4
	018 Move X0, 0x427000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x495000
	022 Move X0, [X0+3680]
	023 Call 0x1C17CF4
	024 Move X0, 0x495000
	025 Move X0, [X0+3688]
	026 Call 0x1C17CF4
	027 Move X0, 0x495000
	028 Move X0, [X0+3696]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+913], W8
	032 Move X8, [X19+48]
	033 Compare X8, 0
	034 JumpIfNotEqual {137}
	035 Move X21, 0x427000
	036 Move X21, [X21+1432]
	037 Move X20, [X19+24]
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {60}
	051 Move X8, 0x495000
	052 Move X9, 0x495000
	053 Move X8, [X8+3696]
	054 Move X9, [X9+3680]
	055 Move X0, [X8]
	056 Move X1, [X9]
	057 Call 0x2242FB8, X0
	058 Move X20, X0
	059 Move [X19+24], X0
	060 Move X20, [X19+24]
	061 Move X0, [X21]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X20
	067 Move X1, X31
	068 Move X2, X31
	069 Call Object.op_Inequality, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {77}
	074 Move X0, [X19+24]
	075 Call UnicodeLineBreakingRules.GetCharacters, X0
	076 Move X20, X0
	077 Move X8, 0x482000
	078 Move X8, [X8+2104]
	079 Move X0, [X8]
	080 Call 0x1C17F10
	081 Move X8, 0x482000
	082 Move X8, [X8+2096]
	083 Move X20, X0
	084 Move X1, [X8]
	085 Call HashSet`1<UInt32>..ctor, X0
	086 Move [X19+48], X20
	087 Move X0, [X21]
	088 Move X20, [X19+32]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move X0, X20
	094 Move X1, X31
	095 Move X2, X31
	096 Call Object.op_Equality, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {110}
	101 Move X8, 0x495000
	102 Move X9, 0x495000
	103 Move X8, [X8+3688]
	104 Move X9, [X9+3680]
	105 Move X0, [X8]
	106 Move X1, [X9]
	107 Call 0x2242FB8, X0
	108 Move X20, X0
	109 Move [X19+32], X0
	110 Move X20, [X19+32]
	111 Move X0, [X21]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Move X0, X20
	117 Move X1, X31
	118 Move X2, X31
	119 Call Object.op_Inequality, X0, X1
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfNotEqual {127}
	124 Move X0, [X19+32]
	125 Call UnicodeLineBreakingRules.GetCharacters, X0
	126 Move X20, X0
	127 Move X8, 0x482000
	128 Move X8, [X8+2104]
	129 Move X0, [X8]
	130 Call 0x1C17F10
	131 Move X8, 0x482000
	132 Move X8, [X8+2096]
	133 Move X20, X0
	134 Move X1, [X8]
	135 Call HashSet`1<UInt32>..ctor, X0
	136 Move [X19+56], X20
	137 Move X20, [X31+16]
	138 Move X19, [X31+24]
	139 Move X30, [X31+32]
	140 Move X21, [X31+40]
	141 Return 

Method: System.Void LoadLineBreakingRules(UnityEngine.TextAsset leadingRules, UnityEngine.TextAsset followingRules)

Disassembly:
	0x03CCF084 LDR X8, [X20 + 0x3E0]
	0x03CCF088 MOV X19, X0
	0x03CCF08C STR X31, [X31]
	0x03CCF090 CBNZ X8, 0x3CCF0A8
	0x03CCF094 ADRP X0, 0xFFFFFFFFFCE42000
	0x03CCF098 ADD X0, X0, 0x788
	0x03CCF09C BL 0x1C16CB8
	0x03CCF0A0 MOV X8, X0
	0x03CCF0A4 STR X0, [X20 + 0x3E0]
	0x03CCF0A8 ADD X1, X31, 0x0
	0x03CCF0AC MOV X0, X19
	0x03CCF0B0 BLR X8
	0x03CCF0B4 LDP S0, S1, [X31]
	0x03CCF0B8 LDP S2, S3, [X31 + 0x8]
	0x03CCF0BC LDP X20, X19, [X31 + 0x20]
	0x03CCF0C0 LDR X30, [X31 + 0x10]
	0x03CCF0C4 ADD X31, X31, 0x30
	0x03CCF0C8 RET
	0x03CCF0CC SUB X31, X31, 0x80
	0x03CCF0D0 STR X30, [X31 + 0x60]
	0x03CCF0D4 STP X20, X19, [X31 + 0x70]
	0x03CCF0D8 MOV X8, X2
	0x03CCF0DC MOVZ W9, 0x1
	0x03CCF0E0 MOV X19, X1
	0x03CCF0E4 MOV X20, X0
	0x03CCF0E8 STR W9, [X2 + 0x40]
	0x03CCF0EC STRB W9, [X2 + 0x3C]
	0x03CCF0F0 ADD X0, X31, 0x0
	0x03CCF0F4 MOVZ W2, 0x60
	0x03CCF0F8 MOV X1, X8
	0x03CCF0FC BL 0x3EB1AC0
	0x03CCF100 ADD X2, X31, 0x0
	0x03CCF104 MOV X0, X20
	0x03CCF108 MOV X1, X19
	0x03CCF10C BL 0x3CCF2E4
	0x03CCF110 MOV X0, X20
	0x03CCF114 BL 0x3CCF074
	0x03CCF118 LDP X20, X19, [X31 + 0x70]
	0x03CCF11C LDR X30, [X31 + 0x60]
	0x03CCF120 MOV V0.16B, V3.16B
	0x03CCF124 ADD X31, X31, 0x80
	0x03CCF128 RET
	0x03CCF12C SUB X31, X31, 0x90
	0x03CCF130 STP X30, X23, [X31 + 0x60]
	0x03CCF134 STP X22, X21, [X31 + 0x70]
	0x03CCF138 STP X20, X19, [X31 + 0x80]
	0x03CCF13C ADRP X23, 0x718000
	0x03CCF140 LDRB W8, [X23 + 0x398]
	0x03CCF144 MOV X19, X3
	0x03CCF148 MOV X20, X2
	0x03CCF14C MOV X21, X1
	0x03CCF150 MOV X22, X0
	0x03CCF154 TBNZ X8, 0x0, 0x3CCF190
	0x03CCF158 ADRP X0, 0x424000
	0x03CCF15C LDR X0, [X0 + 0xA28]
	0x03CCF160 BL 0x1C16CF4
	0x03CCF164 ADRP X0, 0x424000
	0x03CCF168 LDR X0, [X0 + 0x9D0]
	0x03CCF16C BL 0x1C16CF4
	0x03CCF170 ADRP X0, 0x492000
	0x03CCF174 LDR X0, [X0 + 0xFD8]
	0x03CCF178 BL 0x1C16CF4
	0x03CCF17C ADRP X0, 0x492000
	0x03CCF180 LDR X0, [X0 + 0xFE0]
	0x03CCF184 BL 0x1C16CF4
	0x03CCF188 MOVZ W8, 0x1
	0x03CCF18C STRB W8, [X23 + 0x398]
	0x03CCF190 ADD X0, X31, 0x0
	0x03CCF194 MOVZ W2, 0x60
	0x03CCF198 MOV X1, X20
	0x03CCF19C BL 0x3EB1AC0
	0x03CCF1A0 ADD X2, X31, 0x0
	0x03CCF1A4 MOV X0, X22
	0x03CCF1A8 MOV X1, X21
	0x03CCF1AC BL 0x3CCF2E4
	0x03CCF1B0 CBZ W0, 0x3CCF2B8
	0x03CCF1B4 MOV W21, W0
	0x03CCF1B8 TBZ X0, 0x0, 0x3CCF234
	0x03CCF1BC ADRP X8, 0x424000
	0x03CCF1C0 LDR X8, [X8 + 0x9D0]
	0x03CCF1C4 MOVZ W1, 0x1
	0x03CCF1C8 LDR X0, [X8]
	0x03CCF1CC BL 0x1C16D6C
	0x03CCF1D0 CBZ X0, 0x3CCF2D0
	0x03CCF1D4 LDR X23, [X20]
	0x03CCF1D8 MOV X22, X0
	0x03CCF1DC CBZ X23, 0x3CCF1F4
	0x03CCF1E0 LDR X8, [X22]
	0x03CCF1E4 MOV X0, X23
	0x03CCF1E8 LDR X1, [X8 + 0x40]
	0x03CCF1EC BL 0x1C16E00
	0x03CCF1F0 CBZ X0, 0x3CCF2D8
	0x03CCF1F4 LDR W8, [X22 + 0x18]
	0x03CCF1F8 CBZ W8, 0x3CCF2D4
	0x03CCF1FC STR X23, [X22 + 0x20]
	0x03CCF200 ADRP X8, 0x424000
	0x03CCF204 LDR X8, [X8 + 0xA28]
	0x03CCF208 LDR X0, [X8]
	0x03CCF20C LDR W8, [X0 + 0xE0]
	0x03CCF210 CBNZ W8, 0x3CCF218
	0x03CCF214 BL 0x1C16DFC
	0x03CCF218 ADRP X8, 0x492000
	0x03CCF21C LDR X8, [X8 + 0xFD8]
	0x03CCF220 MOV X0, X19
	0x03CCF224 MOV X2, X22
	0x03CCF228 MOV X3, X31
	0x03CCF22C LDR X1, [X8]
	0x03CCF230 BL 0x3C067D4
	0x03CCF234 TBZ X21, 0x1, 0x3CCF2B0
	0x03CCF238 ADRP X8, 0x424000
	0x03CCF23C LDR X8, [X8 + 0x9D0]
	0x03CCF240 MOVZ W1, 0x1
	0x03CCF244 LDR X0, [X8]
	0x03CCF248 BL 0x1C16D6C
	0x03CCF24C CBZ X0, 0x3CCF2D0
	0x03CCF250 LDR X20, [X20]
	0x03CCF254 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x719000
	007 Move W8, [X22+914]
	008 Move X20, X2
	009 Move X21, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0x480000
	016 Move X0, [X0+2096]
	017 Call 0x1C17CF4
	018 Move X0, 0x480000
	019 Move X0, [X0+2104]
	020 Call 0x1C17CF4
	021 Move X0, 0x425000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x493000
	025 Move X0, [X0+3680]
	026 Call 0x1C17CF4
	027 Move X0, 0x493000
	028 Move X0, [X0+3688]
	029 Call 0x1C17CF4
	030 Move X0, 0x493000
	031 Move X0, [X0+3696]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+914], W8
	035 Move X8, [X19+48]
	036 Compare X8, 0
	037 JumpIfNotEqual {134}
	038 Move X22, 0x425000
	039 Move X22, [X22+1432]
	040 Move X0, [X22]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X21
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Equality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {61}
	053 Move X8, 0x493000
	054 Move X9, 0x493000
	055 Move X8, [X8+3696]
	056 Move X9, [X9+3680]
	057 Move X0, [X8]
	058 Move X1, [X9]
	059 Call 0x2242FB8, X0
	060 Move X21, X0
	061 Move X0, [X22]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X21
	067 Move X1, X31
	068 Move X2, X31
	069 Call Object.op_Inequality, X0, X1
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {77}
	074 Move X0, X21
	075 Call UnicodeLineBreakingRules.GetCharacters, X0
	076 Move X21, X0
	077 Move X8, 0x480000
	078 Move X8, [X8+2104]
	079 Move X0, [X8]
	080 Call 0x1C17F10
	081 Move X8, 0x480000
	082 Move X8, [X8+2096]
	083 Move X21, X0
	084 Move X1, [X8]
	085 Call HashSet`1<UInt32>..ctor, X0
	086 Move [X19+48], X21
	087 Move X0, [X22]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, X20
	093 Move X1, X31
	094 Move X2, X31
	095 Call Object.op_Equality, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {108}
	100 Move X8, 0x493000
	101 Move X9, 0x493000
	102 Move X8, [X8+3688]
	103 Move X9, [X9+3680]
	104 Move X0, [X8]
	105 Move X1, [X9]
	106 Call 0x2242FB8, X0
	107 Move X20, X0
	108 Move X0, [X22]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Move X0, X20
	114 Move X1, X31
	115 Move X2, X31
	116 Call Object.op_Inequality, X0, X1
	117 Move TEMP, X0
	118 And TEMP, TEMP, 1
	119 Compare TEMP, 1
	120 JumpIfNotEqual {124}
	121 Move X0, X20
	122 Call UnicodeLineBreakingRules.GetCharacters, X0
	123 Move X20, X0
	124 Move X8, 0x480000
	125 Move X8, [X8+2104]
	126 Move X0, [X8]
	127 Call 0x1C17F10
	128 Move X8, 0x480000
	129 Move X8, [X8+2096]
	130 Move X20, X0
	131 Move X1, [X8]
	132 Call HashSet`1<UInt32>..ctor, X0
	133 Move [X19+56], X20
	134 Move X20, [X31+32]
	135 Move X19, [X31+40]
	136 Move X22, [X31+16]
	137 Move X21, [X31+24]
	138 Move X30, [X31+48]
	139 Return 

Method: System.Collections.Generic.HashSet`1<System.UInt32> GetCharacters(UnityEngine.TextAsset file)

Disassembly:
	0x03CCF288 LDR W8, [X0 + 0xE0]
	0x03CCF28C CBNZ W8, 0x3CCF294
	0x03CCF290 BL 0x1C16DFC
	0x03CCF294 ADRP X8, 0x492000
	0x03CCF298 LDR X8, [X8 + 0xFE0]
	0x03CCF29C MOV X0, X19
	0x03CCF2A0 MOV X2, X21
	0x03CCF2A4 MOV X3, X31
	0x03CCF2A8 LDR X1, [X8]
	0x03CCF2AC BL 0x3C067D4
	0x03CCF2B0 MOV W0, W31
	0x03CCF2B4 B 0x3CCF2BC
	0x03CCF2B8 MOVZ W0, 0x1
	0x03CCF2BC LDP X20, X19, [X31 + 0x80]
	0x03CCF2C0 LDP X22, X21, [X31 + 0x70]
	0x03CCF2C4 LDP X30, X23, [X31 + 0x60]
	0x03CCF2C8 ADD X31, X31, 0x90
	0x03CCF2CC RET
	0x03CCF2D0 BL 0x1C16F20
	0x03CCF2D4 BL 0x1C16F28
	0x03CCF2D8 BL 0x1C16F44
	0x03CCF2DC MOV X1, X31
	0x03CCF2E0 BL 0x1C16DEC
	0x03CCF2E4 SUB X31, X31, 0xE0
	0x03CCF2E8 STP X30, X21, [X31 + 0xC0]
	0x03CCF2EC STP X20, X19, [X31 + 0xD0]
	0x03CCF2F0 LDRB W8, [X0 + 0x80]
	0x03CCF2F4 MOV X21, X2
	0x03CCF2F8 MOV X19, X0
	0x03CCF2FC MOV X20, X1
	0x03CCF300 CBZ W8, 0x3CCF340
	0x03CCF304 LDR X1, [X19 + 0x18]
	0x03CCF308 MOV X0, X20
	0x03CCF30C MOV X2, X31
	0x03CCF310 BL 0x321BA08
	0x03CCF314 TBZ X0, 0x0, 0x3CCF340
	0x03CCF318 ADD X1, X19, 0x20
	0x03CCF31C ADD X0, X31, 0x60
	0x03CCF320 MOVZ W2, 0x60
	0x03CCF324 BL 0x3EB1AC0
	0x03CCF328 ADD X1, X31, 0x60
	0x03CCF32C MOV X0, X21
	0x03CCF330 BL 0x3CCE570
	0x03CCF334 TBZ X0, 0x0, 0x3CCF340
	0x03CCF338 LDR W0, [X19 + 0x84]
	0x03CCF33C B 0x3CCF364
	0x03CCF340 ADD X0, X31, 0x0
	0x03CCF344 MOVZ W2, 0x60
	0x03CCF348 MOV X1, X21
	0x03CCF34C BL 0x3EB1AC0
	0x03CCF350 ADD X2, X31, 0x0
	0x03CCF354 MOV X0, X19
	0x03CCF358 MOV X1, X20
	0x03CCF35C BL 0x3CCF374
	0x03CCF360 STR W0, [X19 + 0x84]
	0x03CCF364 LDP X20, X19, [X31 + 0xD0]
	0x03CCF368 LDP X30, X21, [X31 + 0xC0]
	0x03CCF36C ADD X31, X31, 0xE0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x719000
	007 Move X22, 0x480000
	008 Move X19, 0x480000
	009 Move W8, [X21+915]
	010 Move X22, [X22+2104]
	011 Move X19, [X19+2096]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x480000
	018 Move X0, [X0+2088]
	019 Call 0x1C17CF4
	020 Move X0, 0x480000
	021 Move X0, [X0+2096]
	022 Call 0x1C17CF4
	023 Move X0, 0x480000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+915], W8
	028 Move X0, [X22]
	029 Call 0x1C17F10
	030 Move X1, [X19]
	031 Move X19, X0
	032 Call HashSet`1<UInt32>..ctor, X0
	033 Compare X20, 0
	034 JumpIfEqual {66}
	035 Move X0, X20
	036 Move X1, X31
	037 Call TextAsset.get_text, X0
	038 Compare X0, 0
	039 JumpIfEqual {66}
	040 Move W8, [X0+16]
	041 Move X20, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X22, 0x480000
	044 Move X22, [X22+2088]
	045 Move W21, W31
	046 Move X0, X20
	047 Move W1, W21
	048 Move X2, X31
	049 Call String.get_Chars, X0, X1
	050 Compare X19, 0
	051 JumpIfEqual {66}
	052 Move X2, [X22]
	053 And W1, W0, 0xFFFF
	054 Move X0, X19
	055 Call HashSet`1<UInt32>.Add, X0, X1
	056 Move W8, [X20+16]
	057 Add W21, W21, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, X19
	060 Move X20, [X31+32]
	061 Move X19, [X31+40]
	062 Move X22, [X31+16]
	063 Move X21, [X31+24]
	064 Move X30, [X31+48]
	065 Return X0
	066 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03CCD05C LDR X0, [X0 + 0x5B0]
	0x03CCD060 BL 0x1C16CF4

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

