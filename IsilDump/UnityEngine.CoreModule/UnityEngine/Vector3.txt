Type: UnityEngine.Vector3

Method: UnityEngine.Vector3 Slerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single t)

Disassembly:
	0x03C29A58 FSQRT S0, S0
	0x03C29A5C LDR V10, [X31], #0x30
	0x03C29A60 RET
	0x03C29A64 STR D10, [X31 - 0x40]!
	0x03C29A68 STP D9, D8, [X31 + 0x10]
	0x03C29A6C STP X30, X21, [X31 + 0x20]
	0x03C29A70 STP X20, X19, [X31 + 0x30]
	0x03C29A74 ADRP X21, 0x7BC000
	0x03C29A78 ADRP X20, 0x4CA000
	0x03C29A7C LDRB W8, [X21 + 0x48]
	0x03C29A80 LDR X20, [X20 + 0x5A8]
	0x03C29A84 MOV X19, X0
	0x03C29A88 TBNZ X8, 0x0, 0x3C29AA0
	0x03C29A8C ADRP X0, 0x4CA000
	0x03C29A90 LDR X0, [X0 + 0x5A8]
	0x03C29A94 BL 0x1C16CF4
	0x03C29A98 MOVZ W8, 0x1
	0x03C29A9C STRB W8, [X21 + 0x48]
	0x03C29AA0 LDR X0, [X20]
	0x03C29AA4 LDP S10, S9, [X19]
	0x03C29AA8 LDR V8, [X19 + 0x8]
	0x03C29AAC LDR W8, [X0 + 0xE0]
	0x03C29AB0 CBNZ W8, 0x3C29AB8
	0x03C29AB4 BL 0x1C16DFC
	0x03C29AB8 FMUL S0, S10, S10
	0x03C29ABC FMUL S1, S9, S9
	0x03C29AC0 FADD S0, S0, S1
	0x03C29AC4 FMUL S1, S8, S8
	0x03C29AC8 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], D8
	003 Move [X31+64], X30
	004 Move [X31+72], X19
	005 Move X19, 0x7BD000
	006 Move X8, [X19+88]
	007 Move V8, V6
	008 Move [X31+32], S0
	009 Move [X31+40], S1
	010 Move [X31+40], S2
	011 Move [X31+16], S3
	012 Move [X31+24], S4
	013 Move [X31+24], S5
	014 Move [X31+8], W31
	015 Move [X31], X31
	016 Compare X8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, -51425280
	019 Add X0, X0, 96
	020 Call 0x1C17CB8
	021 Move X8, X0
	022 Move [X19+88], X0
	023 Add X0, X31, 32
	024 Add X1, X31, 16
	025 Add X2, X31, 0
	026 Move V0, V8
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move S0, [X31]
	029 Move S1, [X31+4]
	030 Move V2, [X31+8]
	031 Move X30, [X31+64]
	032 Move X19, [X31+72]
	033 Move V8, [X31+48]
	034 Add X31, X31, 80
	035 Return X0

Method: System.Void OrthoNormalize2(ref UnityEngine.Vector3 a, ref UnityEngine.Vector3 b)

Disassembly:
	0x03C29B30 FCSEL S2, S2, S5, MI
	0x03C29B34 RET
	0x03C29B38 FCMP S0, S3
	0x03C29B3C FCSEL S0, S0, S3, GT
	0x03C29B40 FCMP S1, S4
	0x03C29B44 FCSEL S1, S1, S4, GT
	0x03C29B48 FCMP S2, S5
	0x03C29B4C FCSEL S2, S2, S5, GT
	0x03C29B50 RET
	0x03C29B54 STR X30, [X31 - 0x20]!
	0x03C29B58 STP X20, X19, [X31 + 0x10]
	0x03C29B5C ADRP X19, 0x7BC000
	0x03C29B60 ADRP X20, 0x4CA000
	0x03C29B64 LDRB W8, [X19 + 0x49]
	0x03C29B68 LDR X20, [X20 + 0x5A0]
	0x03C29B6C TBNZ X8, 0x0, 0x3C29B84
	0x03C29B70 ADRP X0, 0x4CA000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7BD000
	006 Move X2, [X21+56]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51445760
	012 Add X0, X0, 2441
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+56], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void OrthoNormalize(ref UnityEngine.Vector3 normal, ref UnityEngine.Vector3 tangent)

Disassembly:
	0x03C29B74 LDR X0, [X0 + 0x5A0]
	0x03C29B78 BL 0x1C16CF4
	0x03C29B7C MOVZ W8, 0x1
	0x03C29B80 STRB W8, [X19 + 0x49]
	0x03C29B84 LDR X8, [X20]
	0x03C29B88 LDP X20, X19, [X31 + 0x10]
	0x03C29B8C LDR X8, [X8 + 0xB8]
	0x03C29B90 LDP S0, S1, [X8]
	0x03C29B94 LDR V2, [X8 + 0x8]
	0x03C29B98 LDR X30, [X31], #0x20
	0x03C29B9C RET
	0x03C29BA0 STR X30, [X31 - 0x20]!
	0x03C29BA4 STP X20, X19, [X31 + 0x10]
	0x03C29BA8 ADRP X19, 0x7BC000
	0x03C29BAC ADRP X20, 0x4CA000
	0x03C29BB0 LDRB W8, [X19 + 0x4A]
	0x03C29BB4 LDR X20, [X20 + 0x5A0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7BD000
	006 Move X2, [X21+56]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51445760
	012 Add X0, X0, 2441
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+56], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Vector3 Lerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single t)

Disassembly:
	0x03C29BB8 TBNZ X8, 0x0, 0x3C29BD0
	0x03C29BBC ADRP X0, 0x4CA000
	0x03C29BC0 LDR X0, [X0 + 0x5A0]
	0x03C29BC4 BL 0x1C16CF4
	0x03C29BC8 MOVZ W8, 0x1
	0x03C29BCC STRB W8, [X19 + 0x4A]
	0x03C29BD0 LDR X8, [X20]
	0x03C29BD4 LDP X20, X19, [X31 + 0x10]
	0x03C29BD8 LDR X8, [X8 + 0xB8]
	0x03C29BDC LDP S0, S1, [X8 + 0xC]
	0x03C29BE0 LDR V2, [X8 + 0x14]
	0x03C29BE4 LDR X30, [X31], #0x20
	0x03C29BE8 RET
	0x03C29BEC STR X30, [X31 - 0x20]!
	0x03C29BF0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move S7, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S7, W31
	005 Subtract S3, S3, S0
	006 Subtract S4, S4, S1
	007 Subtract S5, S5, S2
	008 NotImplemented "Instruction FCSEL not yet implemented."
	009 Multiply S3, S3, S6
	010 Multiply S4, S4, S6
	011 Multiply S5, S5, S6
	012 Add S0, S0, S3
	013 Add S1, S1, S4
	014 Add S2, S2, S5
	015 Return X0

Method: UnityEngine.Vector3 LerpUnclamped(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single t)

Disassembly:
	0x03C29BF4 ADRP X19, 0x7BC000
	0x03C29BF8 ADRP X20, 0x4CA000
	0x03C29BFC LDRB W8, [X19 + 0x4B]
	0x03C29C00 LDR X20, [X20 + 0x5A0]
	0x03C29C04 TBNZ X8, 0x0, 0x3C29C1C
	0x03C29C08 ADRP X0, 0x4CA000
	0x03C29C0C LDR X0, [X0 + 0x5A0]
	0x03C29C10 BL 0x1C16CF4
	0x03C29C14 MOVZ W8, 0x1
	0x03C29C18 STRB W8, [X19 + 0x4B]

ISIL:
	001 Subtract S3, S3, S0
	002 Subtract S4, S4, S1
	003 Subtract S5, S5, S2
	004 Multiply S3, S3, S6
	005 Multiply S4, S4, S6
	006 Multiply S5, S5, S6
	007 Add S0, S0, S3
	008 Add S1, S1, S4
	009 Add S2, S2, S5
	010 Return X0

Method: UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, System.Single smoothTime)

Disassembly:
	0x03C29C1C LDR X8, [X20]
	0x03C29C20 LDP X20, X19, [X31 + 0x10]
	0x03C29C24 LDR X8, [X8 + 0xB8]
	0x03C29C28 LDP S0, S1, [X8 + 0x48]
	0x03C29C2C LDR V2, [X8 + 0x50]
	0x03C29C30 LDR X30, [X31], #0x20
	0x03C29C34 RET
	0x03C29C38 STR X30, [X31 - 0x20]!
	0x03C29C3C STP X20, X19, [X31 + 0x10]
	0x03C29C40 ADRP X19, 0x7BC000
	0x03C29C44 ADRP X20, 0x4CA000
	0x03C29C48 LDRB W8, [X19 + 0x4C]
	0x03C29C4C LDR X20, [X20 + 0x5A0]
	0x03C29C50 TBNZ X8, 0x0, 0x3C29C68
	0x03C29C54 ADRP X0, 0x4CA000
	0x03C29C58 LDR X0, [X0 + 0x5A0]
	0x03C29C5C BL 0x1C16CF4
	0x03C29C60 MOVZ W8, 0x1
	0x03C29C64 STRB W8, [X19 + 0x4C]
	0x03C29C68 LDR X8, [X20]
	0x03C29C6C LDP X20, X19, [X31 + 0x10]
	0x03C29C70 LDR X8, [X8 + 0xB8]
	0x03C29C74 LDP S0, S1, [X8 + 0x54]
	0x03C29C78 LDR V2, [X8 + 0x5C]
	0x03C29C7C LDR X30, [X31], #0x20
	0x03C29C80 RET
	0x03C29C84 STR X30, [X31 - 0x20]!
	0x03C29C88 STP X20, X19, [X31 + 0x10]
	0x03C29C8C ADRP X19, 0x7BC000
	0x03C29C90 ADRP X20, 0x4CA000
	0x03C29C94 LDRB W8, [X19 + 0x4D]
	0x03C29C98 LDR X20, [X20 + 0x5A0]
	0x03C29C9C TBNZ X8, 0x0, 0x3C29CB4
	0x03C29CA0 ADRP X0, 0x4CA000
	0x03C29CA4 LDR X0, [X0 + 0x5A0]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D14
	003 Move [X31+32], D13
	004 Move [X31+40], D12
	005 Move [X31+48], D11
	006 Move [X31+56], D10
	007 Move [X31+64], D9
	008 Move [X31+72], D8
	009 Move [X31+80], X30
	010 Move [X31+88], X19
	011 Move X19, X0
	012 Move X0, X31
	013 Move V8, V6
	014 Move V9, V5
	015 Move V10, V4
	016 Move V11, V3
	017 Move V12, V2
	018 Move V13, V1
	019 Move V14, V0
	020 Call Time.get_deltaTime
	021 Move W8, 0x7F800000
	022 Move [X31], S0
	023 Move S7, W8
	024 Move V0, V14
	025 Move V1, V13
	026 Move V2, V12
	027 Move V3, V11
	028 Move V4, V10
	029 Move V5, V9
	030 Move X0, X19
	031 Move V6, V8
	032 Call Vector3.SmoothDamp, X0, X1, X2, V0, V1, V2
	033 Move X30, [X31+80]
	034 Move X19, [X31+88]
	035 Move D9, [X31+64]
	036 Move D8, [X31+72]
	037 Move D11, [X31+48]
	038 Move D10, [X31+56]
	039 Move D13, [X31+32]
	040 Move D12, [X31+40]
	041 Move V14, [X31+16]
	042 Add X31, X31, 96
	043 Return X0

Method: UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, System.Single smoothTime, System.Single maxSpeed, System.Single deltaTime)

Disassembly:
	0x03C29CA8 BL 0x1C16CF4
	0x03C29CAC MOVZ W8, 0x1
	0x03C29CB0 STRB W8, [X19 + 0x4D]
	0x03C29CB4 LDR X8, [X20]
	0x03C29CB8 LDP X20, X19, [X31 + 0x10]
	0x03C29CBC LDR X8, [X8 + 0xB8]
	0x03C29CC0 LDP S0, S1, [X8 + 0x18]
	0x03C29CC4 LDR V2, [X8 + 0x20]
	0x03C29CC8 LDR X30, [X31], #0x20
	0x03C29CCC RET
	0x03C29CD0 STR X30, [X31 - 0x20]!
	0x03C29CD4 STP X20, X19, [X31 + 0x10]
	0x03C29CD8 ADRP X19, 0x7BC000
	0x03C29CDC ADRP X20, 0x4CA000
	0x03C29CE0 LDRB W8, [X19 + 0x4E]
	0x03C29CE4 LDR X20, [X20 + 0x5A0]
	0x03C29CE8 TBNZ X8, 0x0, 0x3C29D00
	0x03C29CEC ADRP X0, 0x4CA000
	0x03C29CF0 LDR X0, [X0 + 0x5A0]
	0x03C29CF4 BL 0x1C16CF4
	0x03C29CF8 MOVZ W8, 0x1
	0x03C29CFC STRB W8, [X19 + 0x4E]
	0x03C29D00 LDR X8, [X20]
	0x03C29D04 LDP X20, X19, [X31 + 0x10]
	0x03C29D08 LDR X8, [X8 + 0xB8]
	0x03C29D0C LDP S0, S1, [X8 + 0x24]
	0x03C29D10 LDR V2, [X8 + 0x2C]
	0x03C29D14 LDR X30, [X31], #0x20
	0x03C29D18 RET
	0x03C29D1C STR X30, [X31 - 0x20]!
	0x03C29D20 STP X20, X19, [X31 + 0x10]
	0x03C29D24 ADRP X19, 0x7BC000
	0x03C29D28 ADRP X20, 0x4CA000
	0x03C29D2C LDRB W8, [X19 + 0x4F]
	0x03C29D30 LDR X20, [X20 + 0x5A0]
	0x03C29D34 TBNZ X8, 0x0, 0x3C29D4C
	0x03C29D38 ADRP X0, 0x4CA000
	0x03C29D3C LDR X0, [X0 + 0x5A0]
	0x03C29D40 BL 0x1C16CF4
	0x03C29D44 MOVZ W8, 0x1
	0x03C29D48 STRB W8, [X19 + 0x4F]
	0x03C29D4C LDR X8, [X20]
	0x03C29D50 LDP X20, X19, [X31 + 0x10]
	0x03C29D54 LDR X8, [X8 + 0xB8]
	0x03C29D58 LDP S0, S1, [X8 + 0x30]
	0x03C29D5C LDR V2, [X8 + 0x38]
	0x03C29D60 LDR X30, [X31], #0x20
	0x03C29D64 RET
	0x03C29D68 STR X30, [X31 - 0x20]!
	0x03C29D6C STP X20, X19, [X31 + 0x10]
	0x03C29D70 ADRP X19, 0x7BC000
	0x03C29D74 ADRP X20, 0x4CA000
	0x03C29D78 LDRB W8, [X19 + 0x50]
	0x03C29D7C LDR X20, [X20 + 0x5A0]
	0x03C29D80 TBNZ X8, 0x0, 0x3C29D98
	0x03C29D84 ADRP X0, 0x4CA000
	0x03C29D88 LDR X0, [X0 + 0x5A0]
	0x03C29D8C BL 0x1C16CF4
	0x03C29D90 MOVZ W8, 0x1
	0x03C29D94 STRB W8, [X19 + 0x50]
	0x03C29D98 LDR X8, [X20]
	0x03C29D9C LDP X20, X19, [X31 + 0x10]
	0x03C29DA0 LDR X8, [X8 + 0xB8]
	0x03C29DA4 LDP S0, S1, [X8 + 0x3C]
	0x03C29DA8 LDR V2, [X8 + 0x44]
	0x03C29DAC LDR X30, [X31], #0x20
	0x03C29DB0 RET
	0x03C29DB4 STR X30, [X31 - 0x20]!
	0x03C29DB8 STP X20, X19, [X31 + 0x10]
	0x03C29DBC ADRP X19, 0x7BC000
	0x03C29DC0 ADRP X20, 0x4CA000
	0x03C29DC4 LDRB W8, [X19 + 0x51]
	0x03C29DC8 LDR X20, [X20 + 0x5A0]
	0x03C29DCC TBNZ X8, 0x0, 0x3C29DE4
	0x03C29DD0 ADRP X0, 0x4CA000
	0x03C29DD4 LDR X0, [X0 + 0x5A0]
	0x03C29DD8 BL 0x1C16CF4
	0x03C29DDC MOVZ W8, 0x1
	0x03C29DE0 STRB W8, [X19 + 0x51]
	0x03C29DE4 LDR X8, [X20]
	0x03C29DE8 LDP X20, X19, [X31 + 0x10]
	0x03C29DEC LDR X8, [X8 + 0xB8]
	0x03C29DF0 LDP S0, S1, [X8 + 0x60]
	0x03C29DF4 LDR V2, [X8 + 0x68]
	0x03C29DF8 LDR X30, [X31], #0x20
	0x03C29DFC RET
	0x03C29E00 FADD S0, S0, S3
	0x03C29E04 FADD S1, S1, S4
	0x03C29E08 FADD S2, S2, S5
	0x03C29E0C RET
	0x03C29E10 FSUB S0, S0, S3
	0x03C29E14 FSUB S1, S1, S4
	0x03C29E18 FSUB S2, S2, S5
	0x03C29E1C RET
	0x03C29E20 FNEG S0, S0
	0x03C29E24 FNEG S1, S1
	0x03C29E28 FNEG S2, S2
	0x03C29E2C RET
	0x03C29E30 FMUL S0, S0, S3
	0x03C29E34 FMUL S1, S1, S3
	0x03C29E38 FMUL S2, S2, S3
	0x03C29E3C RET
	0x03C29E40 FMUL S4, S1, S0
	0x03C29E44 FMUL S1, S2, S0
	0x03C29E48 FMUL S2, S3, S0
	0x03C29E4C MOV V0.16B, V4.16B
	0x03C29E50 RET
	0x03C29E54 FDIV S0, S0, S3
	0x03C29E58 FDIV S1, S1, S3
	0x03C29E5C FDIV S2, S2, S3
	0x03C29E60 RET
	0x03C29E64 ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C29E68 FSUB S0, S0, S3
	0x03C29E6C FSUB S1, S1, S4
	0x03C29E70 LDR V3, [X8 + 0xF20]
	0x03C29E74 FSUB S2, S2, S5
	0x03C29E78 FMUL S0, S0, S0
	0x03C29E7C FMUL S1, S1, S1
	0x03C29E80 FADD S0, S0, S1
	0x03C29E84 FMUL S1, S2, S2
	0x03C29E88 FADD S0, S1, S0
	0x03C29E8C FCMP S0, S3
	0x03C29E90 CSET W0, MI
	0x03C29E94 RET
	0x03C29E98 ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C29E9C FSUB S0, S0, S3
	0x03C29EA0 FSUB S1, S1, S4
	0x03C29EA4 LDR V3, [X8 + 0xF20]
	0x03C29EA8 FSUB S2, S2, S5
	0x03C29EAC FMUL S0, S0, S0
	0x03C29EB0 FMUL S1, S1, S1
	0x03C29EB4 FADD S0, S0, S1
	0x03C29EB8 FMUL S1, S2, S2
	0x03C29EBC FADD S0, S1, S0
	0x03C29EC0 FCMP S0, S3
	0x03C29EC4 CSET W0, PL
	0x03C29EC8 RET
	0x03C29ECC MOV X1, X31
	0x03C29ED0 MOV X2, X31
	0x03C29ED4 MOV X3, X31
	0x03C29ED8 B 0x2430694
	0x03C29EDC MOV X2, X31
	0x03C29EE0 MOV X3, X31

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+144], D12
	003 Move [X31+152], D11
	004 Move [X31+160], D10
	005 Move [X31+168], D9
	006 Move [X31+176], D8
	007 Move [X31+184], X30
	008 Move [X31+192], X20
	009 Move [X31+200], X19
	010 Move X20, 0x7BD000
	011 Move W8, [X20+64]
	012 Move V23, [X31+208]
	013 Move V9, V7
	014 Move V10, V6
	015 Move X19, X0
	016 Move V20, V5
	017 Move V22, V3
	018 Move V8, V0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {40}
	023 Move X0, 0x4CB000
	024 Move X0, [X0+1448]
	025 Move [X31+112], V4
	026 Move [X31+120], V20
	027 Move [X31+80], V23
	028 Move [X31+88], V22
	029 Move [X31+48], V2
	030 Move [X31+56], V1
	031 Call 0x1C17CF4
	032 Move V2, [X31+48]
	033 Move V1, [X31+64]
	034 Move V23, [X31+80]
	035 Move V22, [X31+96]
	036 Move V4, [X31+112]
	037 Move V20, [X31+128]
	038 Move W8, 1
	039 Move [X20+64], W8
	040 Move X8, -51638272
	041 Move V6, [X8+3880]
	042 Move X8, -51634176
	043 Move V3, [X8+872]
	044 Move V25, V4
	045 Move S0, 2
	046 Move X8, -51634176
	047 Move V1.S[1], V2.S[0]
	048 Move V25.S[1], V20.S[0]
	049 NotImplemented "Instruction FMAX not yet implemented."
	050 Subtract S11, S8, S22
	051 Move V7, [X8+288]
	052 Subtract V12, V1, V25
	053 NotImplemented "Instruction FDIV not yet implemented."
	054 Multiply S5, S11, S11
	055 NotImplemented "Instruction INVALID not yet implemented."
	056 Multiply S0, S18, S23
	057 Move S16, 1
	058 Add S5, S5, S6
	059 Move S6, V6.S[1]
	060 Multiply S3, S0, S3
	061 Add S10, S6, S5
	062 Multiply S5, S2, S9
	063 Add S2, S0, S16
	064 Multiply S3, S0, S3
	065 Add S2, S2, S3
	066 Multiply S3, S0, S7
	067 Multiply S3, S0, S3
	068 Multiply S0, S0, S3
	069 Add S0, S2, S0
	070 Multiply S2, S5, S5
	071 NotImplemented "Instruction FCMP not yet implemented."
	072 NotImplemented "Instruction FDIV not yet implemented."
	073 Move X8, 0x4CB000
	074 Move X8, [X8+1448]
	075 Move X0, [X8]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {98}
	079 Move [X31+112], V4
	080 Move [X31+120], V20
	081 Move [X31+80], V23
	082 Move [X31+88], V22
	083 Move [X31+48], V25
	084 Move [X31+56], V1
	085 Move [X31+16], V26
	086 Move [X31+24], V18
	087 Move [X31], V5
	088 Call 0x1C17DFC
	089 Move V5, [X31]
	090 Move V26, [X31+16]
	091 Move V18, [X31+32]
	092 Move V25, [X31+48]
	093 Move V1, [X31+64]
	094 Move V23, [X31+80]
	095 Move V22, [X31+96]
	096 Move V4, [X31+112]
	097 Move V20, [X31+8]
	098 NotImplemented "Instruction FSQRT not yet implemented."
	099 NotImplemented "Instruction FDIV not yet implemented."
	100 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	101 NotImplemented "Instruction INVALID not yet implemented."
	102 Multiply S11, S5, S2
	103 NotImplemented "Instruction INVALID not yet implemented."
	104 Move V2, [X19]
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 Multiply S3, S18, S11
	107 NotImplemented "Instruction INVALID not yet implemented."
	108 Add S3, S2, S3
	109 Add V5, V5, V21
	110 Multiply S3, S3, S23
	111 NotImplemented "Instruction INVALID not yet implemented."
	112 Multiply S16, S18, S3
	113 Add S3, S11, S3
	114 Multiply S17, S18, V5.S[0]
	115 Multiply S18, S18, V5.S[1]
	116 Add V5, V12, V5
	117 Subtract S0, S8, S11
	118 Subtract V24, V1, V12
	119 Subtract S2, S2, S16
	120 Subtract S17, S21, S17
	121 Multiply S3, S26, S3
	122 NotImplemented "Instruction INVALID not yet implemented."
	123 Subtract V7, V25, V1
	124 Multiply S2, S26, S2
	125 Multiply S17, S26, S17
	126 Add S0, S0, S3
	127 Add V1, V24, V5
	128 Subtract S6, S22, S8
	129 Move [X19], S2
	130 Move [X19+8], S17
	131 Subtract S2, S0, S22
	132 Subtract V3, V1, V25
	133 Multiply S2, S6, S2
	134 NotImplemented "Instruction INVALID not yet implemented."
	135 Move S19, V21.S[1]
	136 Add S2, S2, S3
	137 Move S3, V3.S[1]
	138 Subtract S16, S19, S18
	139 Add S2, S2, S3
	140 Multiply S16, S26, S16
	141 NotImplemented "Instruction FCMP not yet implemented."
	142 Move [X19+8], S16
	143 Move V1, V22
	144 Move V1.S[1], V4.S[0]
	145 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	146 Subtract V1, V1, V1
	147 Subtract S2, S20, S20
	148 NotImplemented "Instruction INVALID not yet implemented."
	149 NotImplemented "Instruction FDIV not yet implemented."
	150 Move [X19], D0
	151 Move V1, V4
	152 Move V0, V22
	153 Move [X19+8], S2
	154 Move S20, V1.S[1]
	155 Move X20, [X31+192]
	156 Move X19, [X31+200]
	157 Move X30, [X31+184]
	158 Move D9, [X31+168]
	159 Move D8, [X31+176]
	160 Move D11, [X31+152]
	161 Move D10, [X31+160]
	162 Move V12, [X31+144]
	163 Move V2, V20
	164 Add X31, X31, 208
	165 Return X0

Method: System.Single get_Item(System.Int32 index)

Disassembly:
	0x03C29EE4 B 0x2430694
	0x03C29EE8 STP X30, X23, [X31 - 0x30]!
	0x03C29EEC STP X22, X21, [X31 + 0x10]
	0x03C29EF0 STP X20, X19, [X31 + 0x20]
	0x03C29EF4 ADRP X23, 0x7BC000
	0x03C29EF8 ADRP X22, 0x4D1000
	0x03C29EFC LDRB W8, [X23 + 0x52]
	0x03C29F00 LDR X22, [X22 + 0xE78]
	0x03C29F04 MOV X20, X2
	0x03C29F08 MOV X21, X1
	0x03C29F0C MOV X19, X0
	0x03C29F10 TBNZ X8, 0x0, 0x3C29F4C
	0x03C29F14 ADRP X0, 0x4CC000
	0x03C29F18 LDR X0, [X0 + 0xC48]
	0x03C29F1C BL 0x1C16CF4
	0x03C29F20 ADRP X0, 0x4CA000
	0x03C29F24 LDR X0, [X0 + 0x9D0]
	0x03C29F28 BL 0x1C16CF4
	0x03C29F2C ADRP X0, 0x4D1000
	0x03C29F30 LDR X0, [X0 + 0xE78]
	0x03C29F34 BL 0x1C16CF4
	0x03C29F38 ADRP X0, 0x4F3000
	0x03C29F3C LDR X0, [X0 + 0xD18]
	0x03C29F40 BL 0x1C16CF4
	0x03C29F44 MOVZ W8, 0x1
	0x03C29F48 STRB W8, [X23 + 0x52]
	0x03C29F4C MOV X0, X21
	0x03C29F50 MOV X1, X31
	0x03C29F54 BL 0x32277A8
	0x03C29F58 LDR X8, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Compare W1, 0
	006 JumpIfEqual {27}
	007 Move X0, 0x4D5000
	008 Move X0, [X0+3960]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0x526000
	013 Move X0, [X0+1784]
	014 Call 0x1C17D08
	015 Move X1, X0
	016 Move X0, X19
	017 Move X2, X31
	018 Call IndexOutOfRangeException..ctor, X0, X1
	019 Move X0, 0x526000
	020 Move X0, [X0+1792]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Call 0x1C17DEC
	025 Add X0, X0, 8
	026 Add X0, X0, 4
	027 Move V0, [X0]
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return V0

Method: System.Void set_Item(System.Int32 index, System.Single value)

Disassembly:
	0x03C29F5C ANDS W31, W0, 0x1
	0x03C29F60 CSEL X21, X8, X21, NE
	0x03C29F64 CBNZ X20, 0x3C29FA0
	0x03C29F68 ADRP X8, 0x4CC000
	0x03C29F6C LDR X8, [X8 + 0xC48]
	0x03C29F70 LDR X0, [X8]
	0x03C29F74 LDR W8, [X0 + 0xE0]
	0x03C29F78 CBNZ W8, 0x3C29F80
	0x03C29F7C BL 0x1C16DFC
	0x03C29F80 MOV X0, X31
	0x03C29F84 BL 0x3338524
	0x03C29F88 CBZ X0, 0x3C2A0AC
	0x03C29F8C LDR X8, [X0]
	0x03C29F90 LDR X9, [X8 + 0x218]
	0x03C29F94 LDR X1, [X8 + 0x220]
	0x03C29F98 BLR X9
	0x03C29F9C MOV X20, X0
	0x03C29FA0 ADRP X8, 0x4CA000
	0x03C29FA4 LDR X8, [X8 + 0x9D0]
	0x03C29FA8 MOVZ W1, 0x3
	0x03C29FAC LDR X0, [X8]
	0x03C29FB0 BL 0x1C16D6C
	0x03C29FB4 MOV X22, X0
	0x03C29FB8 MOV X0, X19
	0x03C29FBC MOV X1, X21
	0x03C29FC0 MOV X2, X20
	0x03C29FC4 MOV X3, X31
	0x03C29FC8 BL 0x338FFB4
	0x03C29FCC CBZ X22, 0x3C2A0AC
	0x03C29FD0 MOV X23, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Compare W1, 0
	006 JumpIfEqual {27}
	007 Move X0, 0x4D5000
	008 Move X0, [X0+3960]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0x526000
	013 Move X0, [X0+1784]
	014 Call 0x1C17D08
	015 Move X1, X0
	016 Move X0, X19
	017 Move X2, X31
	018 Call IndexOutOfRangeException..ctor, X0, X1
	019 Move X0, 0x537000
	020 Move X0, [X0+672]
	021 Call 0x1C17D08
	022 Move X1, X0
	023 Move X0, X19
	024 Call 0x1C17DEC
	025 Add X0, X0, 8
	026 Add X0, X0, 4
	027 Move [X0], S0
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return 

Method: System.Void .ctor(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x03C29FD4 CBZ X0, 0x3C29FEC
	0x03C29FD8 LDR X8, [X22]
	0x03C29FDC MOV X0, X23

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Return 

Method: System.Void .ctor(System.Single x, System.Single y)

Disassembly:
	0x03C29FE0 LDR X1, [X8 + 0x40]
	0x03C29FE4 BL 0x1C16E00
	0x03C29FE8 CBZ X0, 0x3C2A0A0

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], W31
	004 Return 

Method: UnityEngine.Vector3 Scale(UnityEngine.Vector3 a, UnityEngine.Vector3 b)

Disassembly:
	0x03C29FEC LDR W8, [X22 + 0x18]
	0x03C29FF0 CBZ W8, 0x3C2A09C
	0x03C29FF4 ADD X0, X19, 0x4
	0x03C29FF8 MOV X1, X21

ISIL:
	001 Multiply S0, S0, S3
	002 Multiply S1, S1, S4
	003 Multiply S2, S2, S5
	004 Return X0

Method: System.Void Scale(UnityEngine.Vector3 scale)

Disassembly:
	0x03C29FFC MOV X2, X20
	0x03C2A000 MOV X3, X31
	0x03C2A004 STR X23, [X22 + 0x20]
	0x03C2A008 BL 0x338FFB4
	0x03C2A00C MOV X23, X0
	0x03C2A010 CBZ X0, 0x3C2A028
	0x03C2A014 LDR X8, [X22]
	0x03C2A018 MOV X0, X23

ISIL:
	001 Move V3, [X0]
	002 Move V4, [X0+8]
	003 Move V0.S[1], V1.S[0]
	004 NotImplemented "Instruction INVALID not yet implemented."
	005 Multiply S1, S2, S4
	006 Move [X0], D0
	007 Move [X0+8], S1
	008 Return 

Method: UnityEngine.Vector3 Cross(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)

Disassembly:
	0x03C2A01C LDR X1, [X8 + 0x40]
	0x03C2A020 BL 0x1C16E00
	0x03C2A024 CBZ X0, 0x3C2A0A0
	0x03C2A028 LDR W8, [X22 + 0x18]
	0x03C2A02C CMP W8, 0x1
	0x03C2A030 B.LS 0x3C2A09C
	0x03C2A034 ADD X0, X19, 0x8
	0x03C2A038 MOV X1, X21
	0x03C2A03C MOV X2, X20
	0x03C2A040 MOV X3, X31

ISIL:
	001 Multiply S6, S1, S5
	002 Multiply S7, S2, S4
	003 Multiply S2, S2, S3
	004 Multiply S5, S0, S5
	005 Multiply S4, S0, S4
	006 Multiply S3, S1, S3
	007 Subtract S0, S6, S7
	008 Subtract S1, S2, S5
	009 Subtract S2, S4, S3
	010 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C2A044 STR X23, [X22 + 0x28]
	0x03C2A048 BL 0x338FFB4
	0x03C2A04C MOV X19, X0
	0x03C2A050 CBZ X0, 0x3C2A068
	0x03C2A054 LDR X8, [X22]
	0x03C2A058 MOV X0, X19
	0x03C2A05C LDR X1, [X8 + 0x40]
	0x03C2A060 BL 0x1C16E00
	0x03C2A064 CBZ X0, 0x3C2A0A0
	0x03C2A068 LDR W8, [X22 + 0x18]
	0x03C2A06C CMP W8, 0x2
	0x03C2A070 B.LS 0x3C2A09C
	0x03C2A074 ADRP X8, 0x4F2000
	0x03C2A078 LDR X8, [X8 + 0xD18]
	0x03C2A07C STR X19, [X22 + 0x30]
	0x03C2A080 MOV X1, X22
	0x03C2A084 LDP X20, X19, [X31 + 0x20]
	0x03C2A088 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X1, X31
	006 Move X19, X0
	007 Call Single.GetHashCode, X0
	008 Move W20, W0
	009 Add X0, X19, 4
	010 Move X1, X31
	011 Call Single.GetHashCode, X0
	012 Move W21, W0
	013 Add X0, X19, 8
	014 Move X1, X31
	015 Call Single.GetHashCode, X0
	016 Xor W8, W20, W21
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Xor W0, W8, W0
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Return X0

Method: System.Boolean Equals(System.Object other)

Disassembly:
	0x03C2A08C LDP X22, X21, [X31 + 0x10]
	0x03C2A090 MOV X2, X31
	0x03C2A094 LDP X30, X23, [X31], #0x30
	0x03C2A098 B 0x3C96574
	0x03C2A09C BL 0x1C16F28
	0x03C2A0A0 BL 0x1C16F44
	0x03C2A0A4 MOV X1, X31
	0x03C2A0A8 BL 0x1C16DEC
	0x03C2A0AC BL 0x1C16F20
	0x03C2A0B0 STR X30, [X31 - 0x20]!
	0x03C2A0B4 STP X20, X19, [X31 + 0x10]
	0x03C2A0B8 ADRP X20, 0x7BB000
	0x03C2A0BC ADRP X19, 0x4C9000
	0x03C2A0C0 LDRB W8, [X20 + 0x53]
	0x03C2A0C4 LDR X19, [X19 + 0x5A0]
	0x03C2A0C8 TBNZ X8, 0x0, 0x3C2A0E0
	0x03C2A0CC ADRP X0, 0x4C9000
	0x03C2A0D0 LDR X0, [X0 + 0x5A0]
	0x03C2A0D4 BL 0x1C16CF4
	0x03C2A0D8 MOVZ W8, 0x1
	0x03C2A0DC STRB W8, [X20 + 0x53]
	0x03C2A0E0 LDR X8, [X19]
	0x03C2A0E4 MOVI D0, 0x0
	0x03C2A0E8 FMOV V1.2S, 0x0
	0x03C2A0EC MOVZ W10, 0x3F800000
	0x03C2A0F0 LDR X8, [X8 + 0xB8]
	0x03C2A0F4 ADRP X11, 0xFFFFFFFFFCEC4000
	0x03C2A0F8 STR D0, [X8]
	0x03C2A0FC STR W31, [X8 + 0x8]
	0x03C2A100 LDR X8, [X19]
	0x03C2A104 LDP X20, X19, [X31 + 0x10]
	0x03C2A108 LDR X9, [X8 + 0xB8]
	0x03C2A10C STUR D1, [X9 + 0xC]
	0x03C2A110 STR W10, [X9 + 0x14]
	0x03C2A114 LDR V1, [X11]
	0x03C2A118 LDR X9, [X8 + 0xB8]
	0x03C2A11C ADRP X11, 0xFFFFFFFFFCEC4000
	0x03C2A120 STR D1, [X9 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7BC000
	006 Move W8, [X21+65]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x4CA000
	014 Move X0, [X0+1440]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+65], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x4CA000
	021 Move X8, [X8+1440]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move V0, [X0]
	034 Move V1, [X19]
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move V0, [X0+4]
	037 Move V1, [X19+4]
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V0, [X0+8]
	040 Move V1, [X19+8]
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 NotImplemented "Instruction CSET not yet implemented."

Method: System.Boolean Equals(UnityEngine.Vector3 other)

Disassembly:
	0x03C2A124 STR W31, [X9 + 0x20]
	0x03C2A128 LDR V1, [X11 + 0x278]
	0x03C2A12C LDR X9, [X8 + 0xB8]
	0x03C2A130 ADRP X11, 0xFFFFFFFFFCEC4000
	0x03C2A134 STUR D1, [X9 + 0x24]
	0x03C2A138 STR W31, [X9 + 0x2C]
	0x03C2A13C LDR V1, [X11 + 0x378]
	0x03C2A140 LDR X9, [X8 + 0xB8]
	0x03C2A144 ADRP X11, 0xFFFFFFFFFCEC3000
	0x03C2A148 STR D1, [X9 + 0x30]
	0x03C2A14C STR W31, [X9 + 0x38]
	0x03C2A150 LDR V1, [X11 + 0x648]

ISIL:
	001 Move V3, [X0]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move V0, [X0+4]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move V0, [X0+8]
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0
	009 Move W0, W31
	010 Return X0

Method: UnityEngine.Vector3 Reflect(UnityEngine.Vector3 inDirection, UnityEngine.Vector3 inNormal)

Disassembly:
	0x03C2A154 LDR X9, [X8 + 0xB8]
	0x03C2A158 STUR D1, [X9 + 0x3C]
	0x03C2A15C STR W31, [X9 + 0x44]
	0x03C2A160 LDR X9, [X8 + 0xB8]
	0x03C2A164 STR D0, [X9 + 0x48]
	0x03C2A168 STR W10, [X9 + 0x50]
	0x03C2A16C LDR X9, [X8 + 0xB8]
	0x03C2A170 MOVZ W10, 0xBF800000
	0x03C2A174 STUR D0, [X9 + 0x54]
	0x03C2A178 STR W10, [X9 + 0x5C]
	0x03C2A17C LDR X9, [X8 + 0xB8]
	0x03C2A180 MOVZ W10, 0x7F800000
	0x03C2A184 UNIMPLEMENTED
	0x03C2A188 STR D0, [X9 + 0x60]

ISIL:
	001 Multiply S6, S0, S3
	002 Multiply S7, S1, S4
	003 Add S6, S6, S7
	004 Multiply S7, S2, S5
	005 Add S6, S7, S6
	006 Move S7, -2
	007 Multiply S6, S6, S7
	008 Multiply S3, S3, S6
	009 Multiply S4, S4, S6
	010 Multiply S5, S5, S6
	011 Add S0, S0, S3
	012 Add S1, S1, S4
	013 Add S2, S2, S5
	014 Return X0

Method: UnityEngine.Vector3 Normalize(UnityEngine.Vector3 value)

Disassembly:
	0x03C2A18C STR W10, [X9 + 0x68]
	0x03C2A190 LDR X8, [X8 + 0xB8]
	0x03C2A194 MVNI V0.2S, 0x7F, 0x10
	0x03C2A198 MOVZ W9, 0xFF800000
	0x03C2A19C STUR D0, [X8 + 0x6C]
	0x03C2A1A0 STR W9, [X8 + 0x74]
	0x03C2A1A4 LDR X30, [X31], #0x20
	0x03C2A1A8 RET
	0x03C2A1AC SUB X31, X31, 0x40
	0x03C2A1B0 STP X30, X19, [X31 + 0x30]
	0x03C2A1B4 ADRP X19, 0x7BB000
	0x03C2A1B8 LDR X8, [X19 + 0x68]
	0x03C2A1BC STP S0, S1, [X31 + 0x20]
	0x03C2A1C0 STR S2, [X31 + 0x28]
	0x03C2A1C4 STP S3, S4, [X31 + 0x10]
	0x03C2A1C8 STR S5, [X31 + 0x18]
	0x03C2A1CC STP X31, X31, [X31]
	0x03C2A1D0 CBNZ X8, 0x3C2A1E8
	0x03C2A1D4 ADRP X0, 0xFFFFFFFFFCED3000
	0x03C2A1D8 ADD X0, X0, 0x4FB
	0x03C2A1DC BL 0x1C16CB8
	0x03C2A1E0 MOV X8, X0
	0x03C2A1E4 STR X0, [X19 + 0x68]
	0x03C2A1E8 ADD X0, X31, 0x20
	0x03C2A1EC ADD X1, X31, 0x10
	0x03C2A1F0 ADD X2, X31, 0x0
	0x03C2A1F4 BLR X8
	0x03C2A1F8 LDP S0, S1, [X31]
	0x03C2A1FC LDP S2, S3, [X31 + 0x8]
	0x03C2A200 LDP X30, X19, [X31 + 0x30]
	0x03C2A204 ADD X31, X31, 0x40
	0x03C2A208 RET
	0x03C2A20C STR X30, [X31 - 0x30]!
	0x03C2A210 STP X22, X21, [X31 + 0x10]
	0x03C2A214 STP X20, X19, [X31 + 0x20]
	0x03C2A218 ADRP X22, 0x7BB000
	0x03C2A21C LDR X3, [X22 + 0x68]
	0x03C2A220 MOV X19, X2
	0x03C2A224 MOV X20, X1
	0x03C2A228 MOV X21, X0
	0x03C2A22C CBNZ X3, 0x3C2A244
	0x03C2A230 ADRP X0, 0xFFFFFFFFFCED3000
	0x03C2A234 ADD X0, X0, 0x4FB
	0x03C2A238 BL 0x1C16CB8
	0x03C2A23C MOV X3, X0
	0x03C2A240 STR X0, [X22 + 0x68]
	0x03C2A244 MOV X0, X21
	0x03C2A248 MOV X1, X20
	0x03C2A24C MOV X2, X19
	0x03C2A250 LDP X20, X19, [X31 + 0x20]
	0x03C2A254 LDP X22, X21, [X31 + 0x10]
	0x03C2A258 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, 0x7AF000
	007 Move W8, [X19+1925]
	008 Move V8, V2
	009 Move V9, V1
	010 Move V10, V0
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, 0x4CA000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1925], W8
	018 Move X8, 0x4CA000
	019 Move X8, [X8+1448]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Multiply S0, S10, S10
	026 Multiply S1, S9, S9
	027 Move X8, -51638272
	028 Add S0, S0, S1
	029 Move V1, [X8+380]
	030 Multiply S2, S8, S8
	031 Add S0, S2, S0
	032 NotImplemented "Instruction FSQRT not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FDIV not yet implemented."
	035 NotImplemented "Instruction FDIV not yet implemented."
	036 NotImplemented "Instruction FDIV not yet implemented."
	037 Move X19, 0x7AF000
	038 Move W8, [X19+1923]
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x4CA000
	042 Move X0, [X0+1440]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X19+1923], W8
	046 Move X8, 0x4CA000
	047 Move X8, [X8+1440]
	048 Move X8, [X8]
	049 Move X8, [X8+184]
	050 Move S0, [X8]
	051 Move S1, [X8+4]
	052 Move V2, [X8+8]
	053 Move X30, [X31+32]
	054 Move X19, [X31+40]
	055 Move D9, [X31+16]
	056 Move D8, [X31+24]
	057 Move V10, [X31+48]
	058 Return X0

Method: System.Void Normalize()

Disassembly:
	0x03C2A25C BR X3
	0x03C2A260 SUB X31, X31, 0x30
	0x03C2A264 STP X30, X19, [X31 + 0x20]
	0x03C2A268 ADRP X19, 0x7BB000
	0x03C2A26C LDR X8, [X19 + 0x70]
	0x03C2A270 STP S0, S1, [X31 + 0x10]
	0x03C2A274 STP S2, S3, [X31 + 0x18]
	0x03C2A278 STP X31, X31, [X31]
	0x03C2A27C CBNZ X8, 0x3C2A294
	0x03C2A280 ADRP X0, 0xFFFFFFFFFCEF6000
	0x03C2A284 ADD X0, X0, 0xA3A
	0x03C2A288 BL 0x1C16CB8
	0x03C2A28C MOV X8, X0
	0x03C2A290 STR X0, [X19 + 0x70]
	0x03C2A294 ADD X0, X31, 0x10
	0x03C2A298 ADD X1, X31, 0x0
	0x03C2A29C BLR X8
	0x03C2A2A0 LDP S0, S1, [X31]
	0x03C2A2A4 LDP S2, S3, [X31 + 0x8]
	0x03C2A2A8 LDP X30, X19, [X31 + 0x20]
	0x03C2A2AC ADD X31, X31, 0x30
	0x03C2A2B0 RET
	0x03C2A2B4 STP X30, X21, [X31 - 0x20]!
	0x03C2A2B8 STP X20, X19, [X31 + 0x10]
	0x03C2A2BC ADRP X21, 0x7BB000
	0x03C2A2C0 LDR X2, [X21 + 0x70]
	0x03C2A2C4 MOV X19, X1
	0x03C2A2C8 MOV X20, X0
	0x03C2A2CC CBNZ X2, 0x3C2A2E4
	0x03C2A2D0 ADRP X0, 0xFFFFFFFFFCEF6000
	0x03C2A2D4 ADD X0, X0, 0xA3A
	0x03C2A2D8 BL 0x1C16CB8
	0x03C2A2DC MOV X2, X0
	0x03C2A2E0 STR X0, [X21 + 0x70]
	0x03C2A2E4 MOV X0, X20
	0x03C2A2E8 MOV X1, X19
	0x03C2A2EC LDP X20, X19, [X31 + 0x10]
	0x03C2A2F0 LDP X30, X21, [X31], #0x20
	0x03C2A2F4 BR X2
	0x03C2A2F8 SUB X31, X31, 0x50
	0x03C2A2FC STR D8, [X31 + 0x30]
	0x03C2A300 STP X30, X19, [X31 + 0x40]
	0x03C2A304 ADRP X19, 0x7BB000
	0x03C2A308 LDR V8, [X31 + 0x50]
	0x03C2A30C LDR X8, [X19 + 0x78]
	0x03C2A310 STP S0, S1, [X31 + 0x20]
	0x03C2A314 STP S2, S3, [X31 + 0x28]
	0x03C2A318 STP S4, S5, [X31 + 0x10]
	0x03C2A31C STP S6, S7, [X31 + 0x18]
	0x03C2A320 STP X31, X31, [X31]
	0x03C2A324 CBNZ X8, 0x3C2A33C
	0x03C2A328 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C2A32C ADD X0, X0, 0xC44
	0x03C2A330 BL 0x1C16CB8
	0x03C2A334 MOV X8, X0
	0x03C2A338 STR X0, [X19 + 0x78]
	0x03C2A33C ADD X0, X31, 0x20
	0x03C2A340 ADD X1, X31, 0x10

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x7AF000
	008 Move S9, [X0]
	009 Move S10, [X0+4]
	010 Move W8, [X20+1925]
	011 Move V8, [X0+8]
	012 Move X19, X0
	013 Compare W8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, 0x4CA000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1925], W8
	020 Move X8, 0x4CA000
	021 Move X8, [X8+1448]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X8, -51638272
	028 Multiply S0, S9, S9
	029 Multiply S1, S10, S10
	030 Move V2, [X8+380]
	031 Add S0, S0, S1
	032 Multiply S1, S8, S8
	033 Add S0, S1, S0
	034 NotImplemented "Instruction FSQRT not yet implemented."
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move V0, [X19]
	037 Move V2, [X19+8]
	038 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	039 NotImplemented "Instruction INVALID not yet implemented."
	040 NotImplemented "Instruction FDIV not yet implemented."
	041 Move X20, 0x7AF000
	042 Move W8, [X20+1923]
	043 Compare W8, 0
	044 JumpIfNotEqual {50}
	045 Move X0, 0x4CA000
	046 Move X0, [X0+1440]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+1923], W8
	050 Move X8, 0x4CA000
	051 Move X8, [X8+1440]
	052 Move X8, [X8]
	053 Move X8, [X8+184]
	054 Move V0, [X8]
	055 Move V1, [X8+8]
	056 Move [X19], D0
	057 Move [X19+8], S1
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X30, [X31+24]
	061 Move D9, [X31+8]
	062 Move D8, [X31+16]
	063 Move V10, [X31+48]
	064 Return 

Method: UnityEngine.Vector3 get_normalized()

Disassembly:
	0x03C2A344 ADD X2, X31, 0x0
	0x03C2A348 MOV V0.16B, V8.16B
	0x03C2A34C BLR X8
	0x03C2A350 LDP S0, S1, [X31]
	0x03C2A354 LDP S2, S3, [X31 + 0x8]
	0x03C2A358 LDP X30, X19, [X31 + 0x40]
	0x03C2A35C LDR V8, [X31 + 0x30]
	0x03C2A360 ADD X31, X31, 0x50
	0x03C2A364 RET
	0x03C2A368 STR D8, [X31 - 0x30]!
	0x03C2A36C STR X30, [X31 + 0x8]
	0x03C2A370 STP X22, X21, [X31 + 0x10]
	0x03C2A374 STP X20, X19, [X31 + 0x20]
	0x03C2A378 ADRP X22, 0x7BB000
	0x03C2A37C LDR X3, [X22 + 0x78]
	0x03C2A380 MOV X19, X2
	0x03C2A384 MOV V8.16B, V0.16B
	0x03C2A388 MOV X20, X1
	0x03C2A38C MOV X21, X0
	0x03C2A390 CBNZ X3, 0x3C2A3A8
	0x03C2A394 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C2A398 ADD X0, X0, 0xC44
	0x03C2A39C BL 0x1C16CB8
	0x03C2A3A0 MOV X3, X0
	0x03C2A3A4 STR X0, [X22 + 0x78]
	0x03C2A3A8 MOV X0, X21
	0x03C2A3AC MOV X1, X20
	0x03C2A3B0 MOV X2, X19
	0x03C2A3B4 LDP X20, X19, [X31 + 0x20]
	0x03C2A3B8 LDP X22, X21, [X31 + 0x10]
	0x03C2A3BC LDR X30, [X31 + 0x8]
	0x03C2A3C0 MOV V0.16B, V8.16B
	0x03C2A3C4 LDR V8, [X31], #0x30
	0x03C2A3C8 BR X3
	0x03C2A3CC SUB X31, X31, 0x50
	0x03C2A3D0 STR D8, [X31 + 0x30]
	0x03C2A3D4 STP X30, X19, [X31 + 0x40]
	0x03C2A3D8 ADRP X19, 0x7BB000
	0x03C2A3DC LDR V8, [X31 + 0x50]
	0x03C2A3E0 LDR X8, [X19 + 0x80]
	0x03C2A3E4 STP S0, S1, [X31 + 0x20]
	0x03C2A3E8 STP S2, S3, [X31 + 0x28]
	0x03C2A3EC STP S4, S5, [X31 + 0x10]
	0x03C2A3F0 STP S6, S7, [X31 + 0x18]
	0x03C2A3F4 STP X31, X31, [X31]
	0x03C2A3F8 CBNZ X8, 0x3C2A410
	0x03C2A3FC ADRP X0, 0xFFFFFFFFFCEC7000
	0x03C2A400 ADD X0, X0, 0x19
	0x03C2A404 BL 0x1C16CB8
	0x03C2A408 MOV X8, X0
	0x03C2A40C STR X0, [X19 + 0x80]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, 0x7AF000
	007 Move S8, [X0]
	008 Move S9, [X0+4]
	009 Move W8, [X19+1925]
	010 Move V10, [X0+8]
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, 0x4CA000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1925], W8
	018 Move X8, 0x4CA000
	019 Move X8, [X8+1448]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Multiply S0, S8, S8
	026 Multiply S1, S9, S9
	027 Move X8, -51638272
	028 Add S0, S0, S1
	029 Move V1, [X8+380]
	030 Multiply S2, S10, S10
	031 Add S0, S2, S0
	032 NotImplemented "Instruction FSQRT not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FDIV not yet implemented."
	035 NotImplemented "Instruction FDIV not yet implemented."
	036 NotImplemented "Instruction FDIV not yet implemented."
	037 Move X19, 0x7AF000
	038 Move W8, [X19+1923]
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x4CA000
	042 Move X0, [X0+1440]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X19+1923], W8
	046 Move X8, 0x4CA000
	047 Move X8, [X8+1440]
	048 Move X8, [X8]
	049 Move X8, [X8+184]
	050 Move S0, [X8]
	051 Move S1, [X8+4]
	052 Move V2, [X8+8]
	053 Move X30, [X31+32]
	054 Move X19, [X31+40]
	055 Move D9, [X31+16]
	056 Move D8, [X31+24]
	057 Move V10, [X31+48]
	058 Return X0

Method: System.Single Dot(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)

Disassembly:
	0x03C2A410 ADD X0, X31, 0x20
	0x03C2A414 ADD X1, X31, 0x10
	0x03C2A418 ADD X2, X31, 0x0
	0x03C2A41C MOV V0.16B, V8.16B
	0x03C2A420 BLR X8
	0x03C2A424 LDP S0, S1, [X31]

ISIL:
	001 Multiply S0, S0, S3
	002 Multiply S1, S1, S4
	003 Add S0, S0, S1
	004 Multiply S1, S2, S5
	005 Add S0, S1, S0
	006 Return V0

Method: UnityEngine.Vector3 Project(UnityEngine.Vector3 vector, UnityEngine.Vector3 onNormal)

Disassembly:
	0x03C2A428 LDP S2, S3, [X31 + 0x8]
	0x03C2A42C LDP X30, X19, [X31 + 0x40]
	0x03C2A430 LDR V8, [X31 + 0x30]
	0x03C2A434 ADD X31, X31, 0x50
	0x03C2A438 RET
	0x03C2A43C STR D8, [X31 - 0x30]!
	0x03C2A440 STR X30, [X31 + 0x8]
	0x03C2A444 STP X22, X21, [X31 + 0x10]
	0x03C2A448 STP X20, X19, [X31 + 0x20]
	0x03C2A44C ADRP X22, 0x7BB000
	0x03C2A450 LDR X3, [X22 + 0x80]
	0x03C2A454 MOV X19, X2
	0x03C2A458 MOV V8.16B, V0.16B
	0x03C2A45C MOV X20, X1
	0x03C2A460 MOV X21, X0
	0x03C2A464 CBNZ X3, 0x3C2A47C
	0x03C2A468 ADRP X0, 0xFFFFFFFFFCEC7000
	0x03C2A46C ADD X0, X0, 0x19
	0x03C2A470 BL 0x1C16CB8
	0x03C2A474 MOV X3, X0
	0x03C2A478 STR X0, [X22 + 0x80]
	0x03C2A47C MOV X0, X21
	0x03C2A480 MOV X1, X20
	0x03C2A484 MOV X2, X19
	0x03C2A488 LDP X20, X19, [X31 + 0x20]
	0x03C2A48C LDP X22, X21, [X31 + 0x10]
	0x03C2A490 LDR X30, [X31 + 0x8]
	0x03C2A494 MOV V0.16B, V8.16B
	0x03C2A498 LDR V8, [X31], #0x30
	0x03C2A49C BR X3
	0x03C2A4A0 SUB X31, X31, 0x50
	0x03C2A4A4 STR D8, [X31 + 0x30]
	0x03C2A4A8 STP X30, X19, [X31 + 0x40]
	0x03C2A4AC ADRP X19, 0x7BB000
	0x03C2A4B0 LDR V8, [X31 + 0x50]
	0x03C2A4B4 LDR X8, [X19 + 0x88]
	0x03C2A4B8 STP S0, S1, [X31 + 0x20]
	0x03C2A4BC STP S2, S3, [X31 + 0x28]
	0x03C2A4C0 STP S4, S5, [X31 + 0x10]
	0x03C2A4C4 STP S6, S7, [X31 + 0x18]
	0x03C2A4C8 STP X31, X31, [X31]
	0x03C2A4CC CBNZ X8, 0x3C2A4E4
	0x03C2A4D0 ADRP X0, 0xFFFFFFFFFCEFA000
	0x03C2A4D4 ADD X0, X0, 0xCF3
	0x03C2A4D8 BL 0x1C16CB8
	0x03C2A4DC MOV X8, X0
	0x03C2A4E0 STR X0, [X19 + 0x88]
	0x03C2A4E4 ADD X0, X31, 0x20
	0x03C2A4E8 ADD X1, X31, 0x10
	0x03C2A4EC ADD X2, X31, 0x0
	0x03C2A4F0 MOV V0.16B, V8.16B
	0x03C2A4F4 BLR X8
	0x03C2A4F8 LDP S0, S1, [X31]
	0x03C2A4FC LDP S2, S3, [X31 + 0x8]
	0x03C2A500 LDP X30, X19, [X31 + 0x40]
	0x03C2A504 LDR V8, [X31 + 0x30]
	0x03C2A508 ADD X31, X31, 0x50
	0x03C2A50C RET
	0x03C2A510 STR D8, [X31 - 0x30]!
	0x03C2A514 STR X30, [X31 + 0x8]
	0x03C2A518 STP X22, X21, [X31 + 0x10]
	0x03C2A51C STP X20, X19, [X31 + 0x20]
	0x03C2A520 ADRP X22, 0x7BB000

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x7BC000
	011 Move X19, 0x4D1000
	012 Move W8, [X20+66]
	013 Move X19, [X19+1208]
	014 Move V8, V5
	015 Move V9, V4
	016 Move V10, V3
	017 Move V11, V2
	018 Move V12, V1
	019 Move V13, V0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x4D1000
	025 Move X0, [X0+1208]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+66], W8
	029 Move X8, [X19]
	030 Multiply S0, S10, S10
	031 Multiply S1, S9, S9
	032 Add S0, S0, S1
	033 Move X8, [X8+184]
	034 Multiply S1, S8, S8
	035 Add S2, S1, S0
	036 Move V3, [X8]
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Move X19, 0x7AF000
	039 Move W8, [X19+1923]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x4CA000
	043 Move X0, [X0+1440]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X19+1923], W8
	047 Move X8, 0x4CA000
	048 Move X8, [X8+1440]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move S0, [X8]
	052 Move S1, [X8+4]
	053 Move V2, [X8+8]
	054 Multiply S0, S13, S10
	055 Multiply S1, S12, S9
	056 Multiply S3, S11, S8
	057 Add S0, S0, S1
	058 Add S0, S3, S0
	059 Multiply S1, S10, S0
	060 Multiply S3, S9, S0
	061 Multiply S4, S8, S0
	062 NotImplemented "Instruction FDIV not yet implemented."
	063 NotImplemented "Instruction FDIV not yet implemented."
	064 NotImplemented "Instruction FDIV not yet implemented."
	065 Move X20, [X31+64]
	066 Move X19, [X31+72]
	067 Move X30, [X31+48]
	068 Move D9, [X31+32]
	069 Move D8, [X31+40]
	070 Move D11, [X31+16]
	071 Move D10, [X31+24]
	072 Move D13, [X31+80]
	073 Move D12, [X31+88]
	074 Return X0

Method: UnityEngine.Vector3 ProjectOnPlane(UnityEngine.Vector3 vector, UnityEngine.Vector3 planeNormal)

Disassembly:
	0x03C2A524 LDR X3, [X22 + 0x88]
	0x03C2A528 MOV X19, X2
	0x03C2A52C MOV V8.16B, V0.16B
	0x03C2A530 MOV X20, X1
	0x03C2A534 MOV X21, X0
	0x03C2A538 CBNZ X3, 0x3C2A550
	0x03C2A53C ADRP X0, 0xFFFFFFFFFCEFA000
	0x03C2A540 ADD X0, X0, 0xCF3
	0x03C2A544 BL 0x1C16CB8
	0x03C2A548 MOV X3, X0
	0x03C2A54C STR X0, [X22 + 0x88]
	0x03C2A550 MOV X0, X21
	0x03C2A554 MOV X1, X20
	0x03C2A558 MOV X2, X19
	0x03C2A55C LDP X20, X19, [X31 + 0x20]
	0x03C2A560 LDP X22, X21, [X31 + 0x10]
	0x03C2A564 LDR X30, [X31 + 0x8]
	0x03C2A568 MOV V0.16B, V8.16B
	0x03C2A56C LDR V8, [X31], #0x30
	0x03C2A570 BR X3
	0x03C2A574 SUB X31, X31, 0x30
	0x03C2A578 STP X30, X19, [X31 + 0x20]
	0x03C2A57C ADRP X19, 0x7BB000
	0x03C2A580 LDR X8, [X19 + 0x90]
	0x03C2A584 STP S0, S1, [X31 + 0x10]
	0x03C2A588 STR S2, [X31 + 0x18]
	0x03C2A58C STP X31, X31, [X31]
	0x03C2A590 CBNZ X8, 0x3C2A5A8
	0x03C2A594 ADRP X0, 0xFFFFFFFFFCEFC000
	0x03C2A598 ADD X0, X0, 0xD80
	0x03C2A59C BL 0x1C16CB8
	0x03C2A5A0 MOV X8, X0
	0x03C2A5A4 STR X0, [X19 + 0x90]
	0x03C2A5A8 ADD X0, X31, 0x10
	0x03C2A5AC ADD X1, X31, 0x0
	0x03C2A5B0 BLR X8
	0x03C2A5B4 LDP S0, S1, [X31]
	0x03C2A5B8 LDP S2, S3, [X31 + 0x8]
	0x03C2A5BC LDP X30, X19, [X31 + 0x20]
	0x03C2A5C0 ADD X31, X31, 0x30
	0x03C2A5C4 RET
	0x03C2A5C8 STP X30, X21, [X31 - 0x20]!
	0x03C2A5CC STP X20, X19, [X31 + 0x10]
	0x03C2A5D0 ADRP X21, 0x7BB000
	0x03C2A5D4 LDR X2, [X21 + 0x90]
	0x03C2A5D8 MOV X19, X1
	0x03C2A5DC MOV X20, X0
	0x03C2A5E0 CBNZ X2, 0x3C2A5F8
	0x03C2A5E4 ADRP X0, 0xFFFFFFFFFCEFC000
	0x03C2A5E8 ADD X0, X0, 0xD80
	0x03C2A5EC BL 0x1C16CB8
	0x03C2A5F0 MOV X2, X0
	0x03C2A5F4 STR X0, [X21 + 0x90]
	0x03C2A5F8 MOV X0, X20

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x7BC000
	011 Move X19, 0x4D1000
	012 Move W8, [X20+67]
	013 Move X19, [X19+1208]
	014 Move V11, V5
	015 Move V12, V4
	016 Move V13, V3
	017 Move V8, V2
	018 Move V9, V1
	019 Move V10, V0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x4D1000
	025 Move X0, [X0+1208]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+67], W8
	029 Move X8, [X19]
	030 Multiply S0, S13, S13
	031 Multiply S1, S12, S12
	032 Add S0, S0, S1
	033 Move X8, [X8+184]
	034 Multiply S1, S11, S11
	035 Add S0, S1, S0
	036 Move V2, [X8]
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Multiply S1, S10, S13
	039 Multiply S2, S9, S12
	040 Multiply S3, S8, S11
	041 Add S1, S1, S2
	042 Add S1, S3, S1
	043 Multiply S2, S13, S1
	044 Multiply S3, S12, S1
	045 Multiply S1, S11, S1
	046 NotImplemented "Instruction FDIV not yet implemented."
	047 NotImplemented "Instruction FDIV not yet implemented."
	048 NotImplemented "Instruction FDIV not yet implemented."
	049 Subtract S10, S10, S2
	050 Subtract S9, S9, S3
	051 Subtract S8, S8, S0
	052 Move V0, V10
	053 Move V1, V9
	054 Move V2, V8
	055 Move X20, [X31+64]
	056 Move X19, [X31+72]
	057 Move X30, [X31+48]
	058 Move D9, [X31+32]
	059 Move D8, [X31+40]
	060 Move D11, [X31+16]
	061 Move D10, [X31+24]
	062 Move D13, [X31+80]
	063 Move D12, [X31+88]
	064 Return X0

Method: System.Single Angle(UnityEngine.Vector3 from, UnityEngine.Vector3 to)

Disassembly:
	0x03C2A5FC MOV X1, X19
	0x03C2A600 LDP X20, X19, [X31 + 0x10]
	0x03C2A604 LDP X30, X21, [X31], #0x20
	0x03C2A608 BR X2
	0x03C2A60C SUB X31, X31, 0x30
	0x03C2A610 STP X30, X19, [X31 + 0x20]
	0x03C2A614 ADRP X19, 0x7BB000
	0x03C2A618 LDR X8, [X19 + 0x98]
	0x03C2A61C STP S0, S1, [X31 + 0x10]
	0x03C2A620 STP S2, S3, [X31 + 0x18]
	0x03C2A624 STR W31, [X31 + 0x8]
	0x03C2A628 STR X31, [X31]
	0x03C2A62C CBNZ X8, 0x3C2A644
	0x03C2A630 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C2A634 ADD X0, X0, 0xCC2
	0x03C2A638 BL 0x1C16CB8
	0x03C2A63C MOV X8, X0
	0x03C2A640 STR X0, [X19 + 0x98]
	0x03C2A644 ADD X0, X31, 0x10
	0x03C2A648 ADD X1, X31, 0x0
	0x03C2A64C BLR X8
	0x03C2A650 LDP S0, S1, [X31]
	0x03C2A654 LDR V2, [X31 + 0x8]
	0x03C2A658 LDP X30, X19, [X31 + 0x20]
	0x03C2A65C ADD X31, X31, 0x30
	0x03C2A660 RET
	0x03C2A664 STP X30, X21, [X31 - 0x20]!
	0x03C2A668 STP X20, X19, [X31 + 0x10]
	0x03C2A66C ADRP X21, 0x7BB000
	0x03C2A670 LDR X2, [X21 + 0x98]
	0x03C2A674 MOV X19, X1
	0x03C2A678 MOV X20, X0
	0x03C2A67C CBNZ X2, 0x3C2A694
	0x03C2A680 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C2A684 ADD X0, X0, 0xCC2
	0x03C2A688 BL 0x1C16CB8
	0x03C2A68C MOV X2, X0
	0x03C2A690 STR X0, [X21 + 0x98]
	0x03C2A694 MOV X0, X20
	0x03C2A698 MOV X1, X19
	0x03C2A69C LDP X20, X19, [X31 + 0x10]
	0x03C2A6A0 LDP X30, X21, [X31], #0x20
	0x03C2A6A4 BR X2
	0x03C2A6A8 SUB X31, X31, 0x30
	0x03C2A6AC STP X30, X21, [X31 + 0x10]
	0x03C2A6B0 STP X20, X19, [X31 + 0x20]
	0x03C2A6B4 ADRP X21, 0x7BB000
	0x03C2A6B8 LDR X8, [X21 + 0xA0]
	0x03C2A6BC MOV X19, X1
	0x03C2A6C0 MOV X20, X0
	0x03C2A6C4 STP S0, S1, [X31]
	0x03C2A6C8 STP S2, S3, [X31 + 0x8]
	0x03C2A6CC CBNZ X8, 0x3C2A6E4
	0x03C2A6D0 ADRP X0, 0xFFFFFFFFFCEF4000
	0x03C2A6D4 ADD X0, X0, 0xC53
	0x03C2A6D8 BL 0x1C16CB8
	0x03C2A6DC MOV X8, X0
	0x03C2A6E0 STR X0, [X21 + 0xA0]
	0x03C2A6E4 ADD X0, X31, 0x0
	0x03C2A6E8 MOV X1, X20
	0x03C2A6EC MOV X2, X19
	0x03C2A6F0 BLR X8
	0x03C2A6F4 LDP X20, X19, [X31 + 0x20]
	0x03C2A6F8 LDP X30, X21, [X31 + 0x10]
	0x03C2A6FC ADD X31, X31, 0x30
	0x03C2A700 RET
	0x03C2A704 STR X30, [X31 - 0x30]!
	0x03C2A708 STP X22, X21, [X31 + 0x10]
	0x03C2A70C STP X20, X19, [X31 + 0x20]
	0x03C2A710 ADRP X22, 0x7BB000
	0x03C2A714 LDR X3, [X22 + 0xA0]

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x7BC000
	013 Move X19, 0x4CA000
	014 Move W8, [X20+68]
	015 Move X19, [X19+1448]
	016 Move V8, V5
	017 Move V10, V4
	018 Move V11, V3
	019 Move V9, V2
	020 Move V12, V1
	021 Move V13, V0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x4CA000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+68], W8
	031 Move X0, [X19]
	032 Multiply S0, S13, S13
	033 Multiply S1, S12, S12
	034 Add S0, S0, S1
	035 Multiply S1, S9, S9
	036 Move W8, [X0+224]
	037 Add S14, S1, S0
	038 Multiply S0, S11, S11
	039 Multiply S1, S10, S10
	040 Add S0, S0, S1
	041 Multiply S1, S8, S8
	042 Add S15, S1, S0
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X8, -51642368
	047 Move V0, [X8+4072]
	048 Multiply S1, S14, S15
	049 NotImplemented "Instruction FSQRT not yet implemented."
	050 NotImplemented "Instruction FCMP not yet implemented."
	051 Move S0, W31
	052 Move X0, [X19]
	053 Multiply S0, S13, S11
	054 Multiply S2, S12, S10
	055 Multiply S3, S9, S8
	056 Add S0, S0, S2
	057 Add S0, S3, S0
	058 Move W8, [X0+224]
	059 NotImplemented "Instruction FDIV not yet implemented."
	060 Move S1, 1
	061 Move S2, -1
	062 NotImplemented "Instruction FMIN not yet implemented."
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 NotImplemented "Instruction FCSEL not yet implemented."
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 NotImplemented "Instruction FCVT not yet implemented."
	069 Call 0x3EB2B80
	070 Move X8, -51638272
	071 Move V1, [X8+1096]
	072 NotImplemented "Instruction INVALID not yet implemented."
	073 Multiply S0, S0, S1
	074 Move X20, [X31+80]
	075 Move X19, [X31+88]
	076 Move X30, [X31+64]
	077 Move D9, [X31+48]
	078 Move D8, [X31+56]
	079 Move D11, [X31+32]
	080 Move D10, [X31+40]
	081 Move D13, [X31+16]
	082 Move D12, [X31+24]
	083 Move D15, [X31+96]
	084 Move D14, [X31+104]
	085 Return V0

Method: System.Single SignedAngle(UnityEngine.Vector3 from, UnityEngine.Vector3 to, UnityEngine.Vector3 axis)

Disassembly:
	0x03C2A718 MOV X19, X2
	0x03C2A71C MOV X20, X1
	0x03C2A720 MOV X21, X0
	0x03C2A724 CBNZ X3, 0x3C2A73C
	0x03C2A728 ADRP X0, 0xFFFFFFFFFCEF4000
	0x03C2A72C ADD X0, X0, 0xC53
	0x03C2A730 BL 0x1C16CB8
	0x03C2A734 MOV X3, X0
	0x03C2A738 STR X0, [X22 + 0xA0]
	0x03C2A73C MOV X0, X21
	0x03C2A740 MOV X1, X20
	0x03C2A744 MOV X2, X19
	0x03C2A748 LDP X20, X19, [X31 + 0x20]
	0x03C2A74C LDP X22, X21, [X31 + 0x10]
	0x03C2A750 LDR X30, [X31], #0x30
	0x03C2A754 BR X3
	0x03C2A758 SUB X31, X31, 0x40
	0x03C2A75C STR D8, [X31 + 0x20]
	0x03C2A760 STP X30, X19, [X31 + 0x30]
	0x03C2A764 ADRP X19, 0x7BB000
	0x03C2A768 LDR X8, [X19 + 0xA8]
	0x03C2A76C MOV V8.16B, V0.16B
	0x03C2A770 STP S1, S2, [X31 + 0x10]
	0x03C2A774 STR S3, [X31 + 0x18]
	0x03C2A778 STP X31, X31, [X31]
	0x03C2A77C CBNZ X8, 0x3C2A794
	0x03C2A780 ADRP X0, 0xFFFFFFFFFCEDF000
	0x03C2A784 ADD X0, X0, 0x2A2
	0x03C2A788 BL 0x1C16CB8
	0x03C2A78C MOV X8, X0
	0x03C2A790 STR X0, [X19 + 0xA8]
	0x03C2A794 ADD X0, X31, 0x10
	0x03C2A798 ADD X1, X31, 0x0
	0x03C2A79C MOV V0.16B, V8.16B
	0x03C2A7A0 BLR X8
	0x03C2A7A4 LDP S0, S1, [X31]
	0x03C2A7A8 LDP S2, S3, [X31 + 0x8]
	0x03C2A7AC LDP X30, X19, [X31 + 0x30]
	0x03C2A7B0 LDR V8, [X31 + 0x20]
	0x03C2A7B4 ADD X31, X31, 0x40
	0x03C2A7B8 RET
	0x03C2A7BC STR D8, [X31 - 0x30]!
	0x03C2A7C0 STP X30, X21, [X31 + 0x10]
	0x03C2A7C4 STP X20, X19, [X31 + 0x20]
	0x03C2A7C8 ADRP X21, 0x7BB000
	0x03C2A7CC LDR X2, [X21 + 0xA8]
	0x03C2A7D0 MOV X19, X1
	0x03C2A7D4 MOV X20, X0
	0x03C2A7D8 MOV V8.16B, V0.16B
	0x03C2A7DC CBNZ X2, 0x3C2A7F4
	0x03C2A7E0 ADRP X0, 0xFFFFFFFFFCEDF000
	0x03C2A7E4 ADD X0, X0, 0x2A2
	0x03C2A7E8 BL 0x1C16CB8
	0x03C2A7EC MOV X2, X0
	0x03C2A7F0 STR X0, [X21 + 0xA8]
	0x03C2A7F4 MOV X0, X20
	0x03C2A7F8 MOV X1, X19
	0x03C2A7FC LDP X20, X19, [X31 + 0x20]
	0x03C2A800 LDP X30, X21, [X31 + 0x10]
	0x03C2A804 MOV V0.16B, V8.16B
	0x03C2A808 LDR V8, [X31], #0x30
	0x03C2A80C BR X2
	0x03C2A810 SUB X31, X31, 0x40
	0x03C2A814 STP X30, X19, [X31 + 0x30]
	0x03C2A818 ADRP X19, 0x7BB000
	0x03C2A81C LDR X8, [X19 + 0xB0]
	0x03C2A820 STP S0, S1, [X31 + 0x20]
	0x03C2A824 STR S2, [X31 + 0x28]
	0x03C2A828 STP S3, S4, [X31 + 0x10]
	0x03C2A82C STR S5, [X31 + 0x18]
	0x03C2A830 STP X31, X31, [X31]
	0x03C2A834 CBNZ X8, 0x3C2A84C
	0x03C2A838 ADRP X0, 0xFFFFFFFFFCEF3000
	0x03C2A83C ADD X0, X0, 0xD2
	0x03C2A840 BL 0x1C16CB8
	0x03C2A844 MOV X8, X0
	0x03C2A848 STR X0, [X19 + 0xB0]
	0x03C2A84C ADD X0, X31, 0x20
	0x03C2A850 ADD X1, X31, 0x10
	0x03C2A854 ADD X2, X31, 0x0
	0x03C2A858 BLR X8
	0x03C2A85C LDP S0, S1, [X31]
	0x03C2A860 LDP S2, S3, [X31 + 0x8]
	0x03C2A864 LDP X30, X19, [X31 + 0x30]
	0x03C2A868 ADD X31, X31, 0x40
	0x03C2A86C RET
	0x03C2A870 STR X30, [X31 - 0x30]!
	0x03C2A874 STP X22, X21, [X31 + 0x10]
	0x03C2A878 STP X20, X19, [X31 + 0x20]
	0x03C2A87C ADRP X22, 0x7BB000
	0x03C2A880 LDR X3, [X22 + 0xB0]
	0x03C2A884 MOV X19, X2
	0x03C2A888 MOV X20, X1
	0x03C2A88C MOV X21, X0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X19
	012 Move X19, 0x7AF000
	013 Move W8, [X19+2596]
	014 Move V10, V5
	015 Move V9, V4
	016 Move V8, V3
	017 Move V12, V2
	018 Move V11, V1
	019 Move V13, V0
	020 Compare W8, 0
	021 JumpIfNotEqual {27}
	022 Move X0, 0x4CA000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+2596], W8
	027 Move X19, 0x4CA000
	028 Move X19, [X19+1448]
	029 Multiply S0, S13, S13
	030 Multiply S1, S11, S11
	031 Add S0, S0, S1
	032 Move X0, [X19]
	033 Multiply S1, S12, S12
	034 Add S15, S1, S0
	035 Multiply S0, S8, S8
	036 Move W8, [X0+224]
	037 Multiply S1, S9, S9
	038 Add S0, S0, S1
	039 Multiply S1, S10, S10
	040 Add S14, S1, S0
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X8, -51642368
	045 Move V0, [X8+4072]
	046 Move S16, [X31+100]
	047 Move S7, [X31+104]
	048 Move V17, [X31+96]
	049 Multiply S1, S15, S14
	050 NotImplemented "Instruction FSQRT not yet implemented."
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 Move S0, W31
	053 Move X0, [X19]
	054 Multiply S0, S13, S8
	055 Multiply S2, S11, S9
	056 Multiply S3, S12, S10
	057 Add S0, S0, S2
	058 Add S0, S3, S0
	059 Move W8, [X0+224]
	060 NotImplemented "Instruction FDIV not yet implemented."
	061 Move S1, 1
	062 Move S2, -1
	063 NotImplemented "Instruction FMIN not yet implemented."
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 Move V15, V7
	066 NotImplemented "Instruction FCSEL not yet implemented."
	067 Move [X31+8], S17
	068 Move [X31+16], S16
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 NotImplemented "Instruction FCVT not yet implemented."
	073 Call 0x3EB2B80
	074 Move X8, -51638272
	075 Move V1, [X8+1096]
	076 Move S17, [X31+8]
	077 Move S16, [X31+12]
	078 NotImplemented "Instruction INVALID not yet implemented."
	079 Move V7, V15
	080 Multiply S0, S0, S1
	081 Multiply S1, S11, S10
	082 Multiply S2, S12, S9
	083 Multiply S3, S12, S8
	084 Multiply S4, S13, S10
	085 Multiply S5, S13, S9
	086 Multiply S6, S11, S8
	087 Subtract S1, S1, S2
	088 Subtract S2, S3, S4
	089 Subtract S3, S5, S6
	090 Multiply S1, S17, S1
	091 Multiply S2, S16, S2
	092 Multiply S3, S7, S3
	093 Add S1, S1, S2
	094 Move X30, [X31+80]
	095 Move X19, [X31+88]
	096 Move D9, [X31+64]
	097 Move D8, [X31+72]
	098 Move D11, [X31+48]
	099 Move D10, [X31+56]
	100 Move D13, [X31+32]
	101 Move D12, [X31+40]
	102 Move D15, [X31+16]
	103 Move D14, [X31+24]
	104 Add S1, S3, S1
	105 NotImplemented "Instruction FNEG not yet implemented."
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 NotImplemented "Instruction FCSEL not yet implemented."
	108 Add X31, X31, 96
	109 Return V0

Method: System.Single Distance(UnityEngine.Vector3 a, UnityEngine.Vector3 b)

Disassembly:
	0x03C2A890 CBNZ X3, 0x3C2A8A8
	0x03C2A894 ADRP X0, 0xFFFFFFFFFCEF3000
	0x03C2A898 ADD X0, X0, 0xD2
	0x03C2A89C BL 0x1C16CB8
	0x03C2A8A0 MOV X3, X0
	0x03C2A8A4 STR X0, [X22 + 0xB0]
	0x03C2A8A8 MOV X0, X21
	0x03C2A8AC MOV X1, X20
	0x03C2A8B0 MOV X2, X19
	0x03C2A8B4 LDP X20, X19, [X31 + 0x20]
	0x03C2A8B8 LDP X22, X21, [X31 + 0x10]
	0x03C2A8BC LDR X30, [X31], #0x30
	0x03C2A8C0 BR X3
	0x03C2A8C4 STR D10, [X31 - 0x30]!
	0x03C2A8C8 STP D9, D8, [X31 + 0x10]
	0x03C2A8CC STP X30, X19, [X31 + 0x20]
	0x03C2A8D0 ADRP X19, 0x7AE000
	0x03C2A8D4 LDRB W8, [X19 + 0x786]
	0x03C2A8D8 MOV V8.16B, V2.16B
	0x03C2A8DC MOV V9.16B, V1.16B
	0x03C2A8E0 MOV V10.16B, V0.16B
	0x03C2A8E4 CBNZ W8, 0x3C2A8FC
	0x03C2A8E8 ADRP X0, 0x4C9000
	0x03C2A8EC LDR X0, [X0 + 0x5A0]
	0x03C2A8F0 BL 0x1C16CF4
	0x03C2A8F4 MOVZ W8, 0x1
	0x03C2A8F8 STRB W8, [X19 + 0x786]
	0x03C2A8FC ADRP X8, 0x4C9000
	0x03C2A900 LDR X8, [X8 + 0x5A0]
	0x03C2A904 MOV V1.16B, V9.16B
	0x03C2A908 MOV V2.16B, V8.16B
	0x03C2A90C LDP X30, X19, [X31 + 0x20]
	0x03C2A910 LDR X8, [X8]
	0x03C2A914 LDP D9, D8, [X31 + 0x10]
	0x03C2A918 MOV V0.16B, V10.16B
	0x03C2A91C LDR X8, [X8 + 0xB8]
	0x03C2A920 LDP S3, S4, [X8 + 0x18]
	0x03C2A924 LDR V5, [X8 + 0x20]
	0x03C2A928 LDR V10, [X31], #0x30
	0x03C2A92C B 0x3C2A810

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x7BC000
	011 Move X19, 0x4CA000
	012 Move W8, [X20+69]
	013 Move X19, [X19+1448]
	014 Move V8, V5
	015 Move V9, V4
	016 Move V11, V3
	017 Move V10, V2
	018 Move V12, V1
	019 Move V13, V0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x4CA000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+69], W8
	029 Move X0, [X19]
	030 Subtract S11, S13, S11
	031 Subtract S9, S12, S9
	032 Subtract S8, S10, S8
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Multiply S0, S11, S11
	038 Multiply S1, S9, S9
	039 Add S0, S0, S1
	040 Multiply S1, S8, S8
	041 Move X20, [X31+64]
	042 Move X19, [X31+72]
	043 Move X30, [X31+48]
	044 Move D9, [X31+32]
	045 Move D8, [X31+40]
	046 Move D11, [X31+16]
	047 Move D10, [X31+24]
	048 Add S0, S1, S0
	049 NotImplemented "Instruction FSQRT not yet implemented."
	050 Move D13, [X31+80]
	051 Move D12, [X31+88]
	052 Return V0

Method: UnityEngine.Vector3 ClampMagnitude(UnityEngine.Vector3 vector, System.Single maxLength)

Disassembly:
	0x03C2A930 STP S0, S1, [X0]
	0x03C2A934 STP S2, S3, [X0 + 0x8]
	0x03C2A938 RET
	0x03C2A93C STR X30, [X31 - 0x20]!
	0x03C2A940 STP X20, X19, [X31 + 0x10]
	0x03C2A944 ADRP X19, 0x7BB000
	0x03C2A948 ADRP X20, 0x4CA000
	0x03C2A94C LDRB W8, [X19 + 0x60]
	0x03C2A950 LDR X20, [X20 + 0x5A8]
	0x03C2A954 TBNZ X8, 0x0, 0x3C2A96C
	0x03C2A958 ADRP X0, 0x4CA000
	0x03C2A95C LDR X0, [X0 + 0x5A8]
	0x03C2A960 BL 0x1C16CF4
	0x03C2A964 MOVZ W8, 0x1
	0x03C2A968 STRB W8, [X19 + 0x60]
	0x03C2A96C LDR X8, [X20]
	0x03C2A970 LDP X20, X19, [X31 + 0x10]
	0x03C2A974 LDR X8, [X8 + 0xB8]
	0x03C2A978 LDP S0, S1, [X8]
	0x03C2A97C LDP S2, S3, [X8 + 0x8]
	0x03C2A980 LDR X30, [X31], #0x20
	0x03C2A984 RET
	0x03C2A988 FMUL S16, S3, S4
	0x03C2A98C FMUL S17, S0, S7
	0x03C2A990 FMUL S18, S1, S6
	0x03C2A994 FMUL S19, S2, S5
	0x03C2A998 FMUL S20, S3, S5
	0x03C2A99C FMUL S21, S1, S7
	0x03C2A9A0 FMUL S22, S2, S4
	0x03C2A9A4 FMUL S23, S0, S6
	0x03C2A9A8 FMUL S24, S0, S5
	0x03C2A9AC FMUL S0, S0, S4
	0x03C2A9B0 FMUL S4, S1, S4
	0x03C2A9B4 FMUL S1, S1, S5
	0x03C2A9B8 FMUL S5, S3, S6
	0x03C2A9BC FMUL S3, S3, S7
	0x03C2A9C0 FMUL S7, S2, S7
	0x03C2A9C4 FMUL S6, S2, S6
	0x03C2A9C8 FADD S2, S16, S17
	0x03C2A9CC FADD S16, S20, S21
	0x03C2A9D0 FADD S5, S5, S7
	0x03C2A9D4 FSUB S0, S3, S0
	0x03C2A9D8 FADD S2, S18, S2
	0x03C2A9DC FADD S3, S22, S16
	0x03C2A9E0 FADD S5, S24, S5

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X19
	008 Move X19, 0x7BC000
	009 Move W8, [X19+70]
	010 Move V11, V3
	011 Move V8, V2
	012 Move V9, V1
	013 Move V10, V0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x4CA000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+70], W8
	023 Multiply S0, S10, S10
	024 Multiply S1, S9, S9
	025 Multiply S2, S8, S8
	026 Add S0, S0, S1
	027 Add S12, S2, S0
	028 Multiply S0, S11, S11
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X8, 0x4CA000
	031 Move X8, [X8+1448]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 NotImplemented "Instruction FSQRT not yet implemented."
	038 NotImplemented "Instruction FDIV not yet implemented."
	039 NotImplemented "Instruction FDIV not yet implemented."
	040 NotImplemented "Instruction FDIV not yet implemented."
	041 Multiply S10, S1, S11
	042 Multiply S9, S2, S11
	043 Multiply S8, S0, S11
	044 Move V0, V10
	045 Move V1, V9
	046 Move V2, V8
	047 Move X30, [X31+48]
	048 Move X19, [X31+56]
	049 Move D9, [X31+32]
	050 Move D8, [X31+40]
	051 Move D11, [X31+16]
	052 Move D10, [X31+24]
	053 Move V12, [X31+64]
	054 Return X0

Method: System.Single Magnitude(UnityEngine.Vector3 vector)

Disassembly:
	0x03C2A9E4 FSUB S7, S0, S1
	0x03C2A9E8 FSUB S0, S2, S19
	0x03C2A9EC FSUB S1, S3, S23
	0x03C2A9F0 FSUB S2, S5, S4
	0x03C2A9F4 FSUB S3, S7, S6
	0x03C2A9F8 RET
	0x03C2A9FC FADD S7, S0, S0
	0x03C2AA00 FADD S16, S1, S1
	0x03C2AA04 FADD S17, S2, S2
	0x03C2AA08 FMUL S19, S0, S7
	0x03C2AA0C FMUL S20, S1, S16
	0x03C2AA10 FMUL S2, S2, S17
	0x03C2AA14 FMOV S18, 1
	0x03C2AA18 FMUL S21, S0, S16
	0x03C2AA1C FMUL S0, S0, S17
	0x03C2AA20 FMUL S1, S1, S17
	0x03C2AA24 FMUL S7, S3, S7
	0x03C2AA28 FMUL S16, S3, S16
	0x03C2AA2C FMUL S3, S3, S17
	0x03C2AA30 FADD S17, S20, S2
	0x03C2AA34 FADD S2, S19, S2
	0x03C2AA38 FSUB S22, S21, S3
	0x03C2AA3C FADD S3, S21, S3
	0x03C2AA40 FADD S21, S0, S16
	0x03C2AA44 FSUB S0, S0, S16
	0x03C2AA48 FSUB S16, S1, S7
	0x03C2AA4C FADD S1, S1, S7
	0x03C2AA50 FADD S7, S19, S20
	0x03C2AA54 FSUB S17, S18, S17
	0x03C2AA58 FSUB S2, S18, S2
	0x03C2AA5C FMUL S19, S5, S22
	0x03C2AA60 FMUL S3, S4, S3

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x7BC000
	008 Move X20, 0x4CA000
	009 Move W8, [X19+71]
	010 Move X20, [X20+1448]
	011 Move V8, V2
	012 Move V9, V1
	013 Move V10, V0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x4CA000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+71], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Multiply S0, S10, S10
	029 Multiply S1, S9, S9
	030 Add S0, S0, S1
	031 Multiply S1, S8, S8
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+24]
	035 Move D9, [X31+8]
	036 Move D8, [X31+16]
	037 Add S0, S1, S0
	038 NotImplemented "Instruction FSQRT not yet implemented."
	039 Move V10, [X31+48]
	040 Return V0

Method: System.Single get_magnitude()

Disassembly:
	0x03C2AA64 FMUL S0, S4, S0
	0x03C2AA68 FMUL S1, S5, S1
	0x03C2AA6C FSUB S7, S18, S7
	0x03C2AA70 FMUL S4, S4, S17
	0x03C2AA74 FMUL S2, S5, S2
	0x03C2AA78 FMUL S20, S6, S21
	0x03C2AA7C FMUL S16, S6, S16
	0x03C2AA80 FADD S5, S0, S1
	0x03C2AA84 FMUL S6, S6, S7
	0x03C2AA88 FADD S0, S19, S4
	0x03C2AA8C FADD S1, S3, S2
	0x03C2AA90 FADD S0, S20, S0
	0x03C2AA94 FADD S1, S16, S1
	0x03C2AA98 FADD S2, S5, S6
	0x03C2AA9C RET
	0x03C2AAA0 ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AAA4 LDR V1, [X8 + 0x1B4]
	0x03C2AAA8 FCMP S0, S1
	0x03C2AAAC CSET W0, GT
	0x03C2AAB0 RET
	0x03C2AAB4 FMUL S0, S0, S4
	0x03C2AAB8 FMUL S1, S1, S5
	0x03C2AABC ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AAC0 FADD S0, S0, S1
	0x03C2AAC4 LDR V1, [X8 + 0x1B4]
	0x03C2AAC8 FMUL S2, S2, S6
	0x03C2AACC FADD S0, S2, S0
	0x03C2AAD0 FMUL S2, S3, S7
	0x03C2AAD4 FADD S0, S2, S0
	0x03C2AAD8 FCMP S0, S1
	0x03C2AADC CSET W0, GT
	0x03C2AAE0 RET

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7BC000
	009 Move X20, 0x4CA000
	010 Move W8, [X21+72]
	011 Move X20, [X20+1448]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x4CA000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+72], W8
	022 Move X0, [X20]
	023 Move S10, [X19]
	024 Move S9, [X19+4]
	025 Move V8, [X19+8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Multiply S0, S10, S10
	031 Multiply S1, S9, S9
	032 Add S0, S0, S1
	033 Multiply S1, S8, S8
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Move D9, [X31+16]
	039 Move D8, [X31+24]
	040 Add S0, S0, S1
	041 NotImplemented "Instruction FSQRT not yet implemented."
	042 Move V10, [X31+64]
	043 Return V0

Method: System.Single SqrMagnitude(UnityEngine.Vector3 vector)

Disassembly:
	0x03C2AAE4 FMUL S0, S0, S4
	0x03C2AAE8 FMUL S1, S1, S5
	0x03C2AAEC ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AAF0 FADD S0, S0, S1
	0x03C2AAF4 LDR V1, [X8 + 0x1B4]
	0x03C2AAF8 FMUL S2, S2, S6

ISIL:
	001 Multiply S0, S0, S0
	002 Multiply S1, S1, S1
	003 Add S0, S0, S1
	004 Multiply S1, S2, S2
	005 Add S0, S1, S0
	006 Return V0

Method: System.Single get_sqrMagnitude()

Disassembly:
	0x03C2AAFC FADD S0, S2, S0
	0x03C2AB00 FMUL S2, S3, S7
	0x03C2AB04 FADD S0, S2, S0
	0x03C2AB08 FCMP S0, S1
	0x03C2AB0C CSET W0, LE
	0x03C2AB10 RET
	0x03C2AB14 FMUL S0, S0, S4
	0x03C2AB18 FMUL S1, S1, S5

ISIL:
	001 Move S0, [X0]
	002 Move S1, [X0+4]
	003 Move V2, [X0+8]
	004 Multiply S0, S0, S0
	005 Multiply S1, S1, S1
	006 Add S0, S0, S1
	007 Multiply S1, S2, S2
	008 Add S0, S0, S1
	009 Return V0

Method: UnityEngine.Vector3 Min(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)

Disassembly:
	0x03C2AB1C FMUL S2, S2, S6
	0x03C2AB20 FADD S0, S0, S1
	0x03C2AB24 FADD S0, S2, S0
	0x03C2AB28 FMUL S1, S3, S7
	0x03C2AB2C FADD S0, S1, S0
	0x03C2AB30 RET
	0x03C2AB34 STR X30, [X31 - 0x10]!

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction FCSEL not yet implemented."
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FCSEL not yet implemented."
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Return X0

Method: UnityEngine.Vector3 Max(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)

Disassembly:
	0x03C2AB38 FMUL S0, S0, S4
	0x03C2AB3C FMUL S1, S1, S5
	0x03C2AB40 FMUL S2, S2, S6
	0x03C2AB44 ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AB48 FADD S0, S0, S1
	0x03C2AB4C FMUL S3, S3, S7
	0x03C2AB50 LDR V4, [X8 + 0x1B4]

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction FCSEL not yet implemented."
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FCSEL not yet implemented."
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Return X0

Method: UnityEngine.Vector3 get_zero()

Disassembly:
	0x03C2AB54 FADD S0, S2, S0
	0x03C2AB58 FADD S0, S3, S0
	0x03C2AB5C FABS S0, S0
	0x03C2AB60 FMOV S1, 1
	0x03C2AB64 FMINNM S1, S0, S1
	0x03C2AB68 FCMP S1, S4
	0x03C2AB6C FMOV S0, W31
	0x03C2AB70 B.GT 0x3C2AB8C
	0x03C2AB74 MOV V0.16B, V1.16B
	0x03C2AB78 BL 0x3EB1BB0
	0x03C2AB7C ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AB80 LDR V1, [X8 + 0x448]
	0x03C2AB84 FADD S0, S0, S0
	0x03C2AB88 FMUL S0, S0, S1
	0x03C2AB8C LDR X30, [X31], #0x10
	0x03C2AB90 RET
	0x03C2AB94 ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AB98 LDR V3, [X8 + 0x408]
	0x03C2AB9C ADRP X8, 0xFFFFFFFFFCEC0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+73]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+73], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8]
	022 Move S1, [X8+4]
	023 Move V2, [X8+8]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 get_one()

Disassembly:
	0x03C2ABA0 FCMP S0, S3
	0x03C2ABA4 B.PL 0x3C2ABB0
	0x03C2ABA8 MOVZ W9, 0x43B40000
	0x03C2ABAC B 0x3C2ABC0
	0x03C2ABB0 LDR V4, [X8 + 0x100]
	0x03C2ABB4 FCMP S0, S4
	0x03C2ABB8 B.LE 0x3C2ABC8
	0x03C2ABBC MOVZ W9, 0xC3B40000
	0x03C2ABC0 FMOV S4, W9
	0x03C2ABC4 FADD S0, S0, S4
	0x03C2ABC8 FCMP S1, S3
	0x03C2ABCC B.PL 0x3C2ABD8
	0x03C2ABD0 MOVZ W9, 0x43B40000
	0x03C2ABD4 B 0x3C2ABE8
	0x03C2ABD8 LDR V4, [X8 + 0x100]
	0x03C2ABDC FCMP S1, S4
	0x03C2ABE0 B.LE 0x3C2ABF0
	0x03C2ABE4 MOVZ W9, 0xC3B40000
	0x03C2ABE8 FMOV S4, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+74]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+74], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+12]
	022 Move S1, [X8+16]
	023 Move V2, [X8+20]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 get_forward()

Disassembly:
	0x03C2ABEC FADD S1, S1, S4
	0x03C2ABF0 FCMP S2, S3
	0x03C2ABF4 B.PL 0x3C2AC00
	0x03C2ABF8 MOVZ W8, 0x43B40000
	0x03C2ABFC B 0x3C2AC10
	0x03C2AC00 LDR V3, [X8 + 0x100]
	0x03C2AC04 FCMP S2, S3
	0x03C2AC08 B.LE 0x3C2AC18
	0x03C2AC0C MOVZ W8, 0xC3B40000
	0x03C2AC10 FMOV S3, W8
	0x03C2AC14 FADD S2, S2, S3
	0x03C2AC18 RET
	0x03C2AC1C STR X30, [X31 - 0x10]!
	0x03C2AC20 LDP S0, S1, [X0]
	0x03C2AC24 LDP S2, S3, [X0 + 0x8]
	0x03C2AC28 BL 0x3C2A60C
	0x03C2AC2C ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AC30 LDR V3, [X8 + 0x448]
	0x03C2AC34 FMUL S0, S0, S3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+75]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+75], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+72]
	022 Move S1, [X8+76]
	023 Move V2, [X8+80]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 get_back()

Disassembly:
	0x03C2AC38 FMUL S1, S1, S3
	0x03C2AC3C FMUL S2, S2, S3
	0x03C2AC40 LDR X30, [X31], #0x10
	0x03C2AC44 B 0x3C2AB94
	0x03C2AC48 ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AC4C LDR V3, [X8 + 0x104]
	0x03C2AC50 FMUL S0, S0, S3
	0x03C2AC54 FMUL S1, S1, S3
	0x03C2AC58 FMUL S2, S2, S3
	0x03C2AC5C B 0x3C2A574
	0x03C2AC60 ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AC64 LDR V3, [X8 + 0x104]
	0x03C2AC68 FMUL S0, S0, S3
	0x03C2AC6C FMUL S1, S1, S3
	0x03C2AC70 FMUL S2, S2, S3
	0x03C2AC74 B 0x3C2A574
	0x03C2AC78 STP X30, X19, [X31 - 0x10]!
	0x03C2AC7C LDP S0, S1, [X0]
	0x03C2AC80 LDP S2, S3, [X0 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+76]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+76], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+84]
	022 Move S1, [X8+88]
	023 Move V2, [X8+92]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 get_up()

Disassembly:
	0x03C2AC84 MOV X0, X2
	0x03C2AC88 MOV X19, X1
	0x03C2AC8C BL 0x3C2A6A8
	0x03C2AC90 ADRP X8, 0xFFFFFFFFFCEC0000
	0x03C2AC94 LDR V0, [X19]
	0x03C2AC98 LDR V1, [X8 + 0x448]
	0x03C2AC9C FMUL S0, S0, S1
	0x03C2ACA0 STR S0, [X19]
	0x03C2ACA4 LDP X30, X19, [X31], #0x10
	0x03C2ACA8 RET
	0x03C2ACAC STP D11, D10, [X31 - 0x40]!
	0x03C2ACB0 STP D9, D8, [X31 + 0x10]
	0x03C2ACB4 STR X30, [X31 + 0x20]
	0x03C2ACB8 STP X20, X19, [X31 + 0x30]
	0x03C2ACBC ADRP X20, 0x7BB000
	0x03C2ACC0 ADRP X19, 0x4D0000
	0x03C2ACC4 LDRB W8, [X20 + 0x61]
	0x03C2ACC8 LDR X19, [X19 + 0x4B8]
	0x03C2ACCC MOV V8.16B, V3.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+77]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+77], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+24]
	022 Move S1, [X8+28]
	023 Move V2, [X8+32]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 get_down()

Disassembly:
	0x03C2ACD0 MOV V9.16B, V2.16B
	0x03C2ACD4 MOV V10.16B, V1.16B
	0x03C2ACD8 MOV V11.16B, V0.16B
	0x03C2ACDC TBNZ X8, 0x0, 0x3C2ACF4
	0x03C2ACE0 ADRP X0, 0x4D0000
	0x03C2ACE4 LDR X0, [X0 + 0x4B8]
	0x03C2ACE8 BL 0x1C16CF4
	0x03C2ACEC MOVZ W8, 0x1
	0x03C2ACF0 STRB W8, [X20 + 0x61]
	0x03C2ACF4 LDR X8, [X19]
	0x03C2ACF8 FMUL S0, S11, S11
	0x03C2ACFC FMUL S1, S10, S10
	0x03C2AD00 FADD S0, S0, S1
	0x03C2AD04 LDR X8, [X8 + 0xB8]
	0x03C2AD08 FMUL S1, S9, S9
	0x03C2AD0C FADD S0, S1, S0
	0x03C2AD10 FMUL S2, S8, S8
	0x03C2AD14 LDR V1, [X8]
	0x03C2AD18 FADD S0, S2, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+78]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+78], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+36]
	022 Move S1, [X8+40]
	023 Move V2, [X8+44]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 get_left()

Disassembly:
	0x03C2AD1C FSQRT S3, S0
	0x03C2AD20 FCMP S3, S1
	0x03C2AD24 B.PL 0x3C2AD64
	0x03C2AD28 ADRP X19, 0x7AE000
	0x03C2AD2C LDRB W8, [X19 + 0x793]
	0x03C2AD30 CBNZ W8, 0x3C2AD48
	0x03C2AD34 ADRP X0, 0x4CA000
	0x03C2AD38 LDR X0, [X0 + 0x5A8]
	0x03C2AD3C BL 0x1C16CF4
	0x03C2AD40 MOVZ W8, 0x1
	0x03C2AD44 STRB W8, [X19 + 0x793]
	0x03C2AD48 ADRP X8, 0x4CA000
	0x03C2AD4C LDR X8, [X8 + 0x5A8]
	0x03C2AD50 LDR X8, [X8]
	0x03C2AD54 LDR X8, [X8 + 0xB8]
	0x03C2AD58 LDP S0, S1, [X8]
	0x03C2AD5C LDP S2, S3, [X8 + 0x8]
	0x03C2AD60 B 0x3C2AD74
	0x03C2AD64 FDIV S0, S11, S3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+79]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+79], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+48]
	022 Move S1, [X8+52]
	023 Move V2, [X8+56]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 get_right()

Disassembly:
	0x03C2AD68 FDIV S1, S10, S3
	0x03C2AD6C FDIV S2, S9, S3
	0x03C2AD70 FDIV S3, S8, S3
	0x03C2AD74 LDP X20, X19, [X31 + 0x30]
	0x03C2AD78 LDR X30, [X31 + 0x20]
	0x03C2AD7C LDP D9, D8, [X31 + 0x10]
	0x03C2AD80 LDP D11, D10, [X31], #0x40
	0x03C2AD84 RET
	0x03C2AD88 SUB X31, X31, 0x30
	0x03C2AD8C STR X30, [X31 + 0x10]
	0x03C2AD90 STP X20, X19, [X31 + 0x20]
	0x03C2AD94 ADRP X20, 0x7AF000
	0x03C2AD98 LDRB W8, [X20 + 0x2F3]
	0x03C2AD9C LDR V4, [X0]
	0x03C2ADA0 MOV X19, X0
	0x03C2ADA4 CBNZ W8, 0x3C2ADC4
	0x03C2ADA8 ADRP X0, 0x4D0000
	0x03C2ADAC LDR X0, [X0 + 0x4B8]
	0x03C2ADB0 STR V4, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+80]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+80], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+60]
	022 Move S1, [X8+64]
	023 Move V2, [X8+68]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 get_positiveInfinity()

Disassembly:
	0x03C2ADB4 BL 0x1C16CF4
	0x03C2ADB8 LDR V4, [X31]
	0x03C2ADBC MOVZ W8, 0x1
	0x03C2ADC0 STRB W8, [X20 + 0x2F3]
	0x03C2ADC4 ADRP X8, 0x4D0000
	0x03C2ADC8 LDR X8, [X8 + 0x4B8]
	0x00000000 INVALID
	0x03C2ADD0 UNIMPLEMENTED
	0x03C2ADD4 FADD V1.2S, V0.2S, V1.2S
	0x03C2ADD8 LDR X8, [X8]
	0x03C2ADDC UNIMPLEMENTED
	0x03C2ADE0 UNIMPLEMENTED
	0x03C2ADE4 FADD V0.2S, V0.2S, V1.2S
	0x03C2ADE8 LDR X8, [X8 + 0xB8]
	0x03C2ADEC FADD V0.2S, V2.2S, V0.2S
	0x03C2ADF0 FSQRT S0, S0
	0x03C2ADF4 LDR V3, [X8]
	0x03C2ADF8 FCMP S0, S3
	0x03C2ADFC B.PL 0x3C2AE38

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BC000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+81]
	007 Move X20, [X20+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+81], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+96]
	022 Move S1, [X8+100]
	023 Move V2, [X8+104]
	024 Move X30, [X31+32]
	025 Return X0

Method: UnityEngine.Vector3 op_Addition(UnityEngine.Vector3 a, UnityEngine.Vector3 b)

Disassembly:
	0x03C2AE00 ADRP X20, 0x7AE000
	0x03C2AE04 LDRB W8, [X20 + 0x793]
	0x03C2AE08 CBNZ W8, 0x3C2AE20
	0x03C2AE0C ADRP X0, 0x4CA000

ISIL:
	001 Add S0, S0, S3
	002 Add S1, S1, S4
	003 Add S2, S2, S5
	004 Return X0

Method: UnityEngine.Vector3 op_Subtraction(UnityEngine.Vector3 a, UnityEngine.Vector3 b)

Disassembly:
	0x03C2AE10 LDR X0, [X0 + 0x5A8]
	0x03C2AE14 BL 0x1C16CF4
	0x03C2AE18 MOVZ W8, 0x1
	0x03C2AE1C STRB W8, [X20 + 0x793]

ISIL:
	001 Subtract S0, S0, S3
	002 Subtract S1, S1, S4
	003 Subtract S2, S2, S5
	004 Return X0

Method: UnityEngine.Vector3 op_UnaryNegation(UnityEngine.Vector3 a)

Disassembly:
	0x03C2AE20 ADRP X8, 0x4CA000
	0x03C2AE24 LDR X8, [X8 + 0x5A8]
	0x03C2AE28 LDR X8, [X8]
	0x03C2AE2C LDR X8, [X8 + 0xB8]

ISIL:
	001 NotImplemented "Instruction FNEG not yet implemented."
	002 NotImplemented "Instruction FNEG not yet implemented."
	003 NotImplemented "Instruction FNEG not yet implemented."
	004 Return X0

Method: UnityEngine.Vector3 op_Multiply(UnityEngine.Vector3 a, System.Single d)

Disassembly:
	0x03C2AE30 LDR V0, [X8]
	0x03C2AE34 B 0x3C2AE40
	0x03C2AE38 UNIMPLEMENTED
	0x00000000 INVALID

ISIL:
	001 Multiply S0, S0, S3
	002 Multiply S1, S1, S3
	003 Multiply S2, S2, S3
	004 Return X0

Method: UnityEngine.Vector3 op_Multiply(System.Single d, UnityEngine.Vector3 a)

Disassembly:
	0x03C2AE40 STR V0, [X19]
	0x03C2AE44 LDP X20, X19, [X31 + 0x20]
	0x03C2AE48 LDR X30, [X31 + 0x10]
	0x03C2AE4C ADD X31, X31, 0x30
	0x03C2AE50 RET

ISIL:
	001 Multiply S4, S1, S0
	002 Multiply S1, S2, S0
	003 Multiply S2, S3, S0
	004 Move V0, V4
	005 Return X0

Method: UnityEngine.Vector3 op_Division(UnityEngine.Vector3 a, System.Single d)

Disassembly:
	0x03C2AE54 STP D11, D10, [X31 - 0x30]!
	0x03C2AE58 STP D9, D8, [X31 + 0x10]
	0x03C2AE5C STP X30, X19, [X31 + 0x20]
	0x03C2AE60 ADRP X19, 0x7AF000

ISIL:
	001 NotImplemented "Instruction FDIV not yet implemented."
	002 NotImplemented "Instruction FDIV not yet implemented."
	003 NotImplemented "Instruction FDIV not yet implemented."
	004 Return X0

Method: System.Boolean op_Equality(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)

Disassembly:
	0x03C2AE64 LDP S8, S9, [X0]
	0x03C2AE68 LDRB W8, [X19 + 0x2F3]
	0x03C2AE6C LDP S11, S10, [X0 + 0x8]
	0x03C2AE70 CBNZ W8, 0x3C2AE88
	0x03C2AE74 ADRP X0, 0x4D0000
	0x03C2AE78 LDR X0, [X0 + 0x4B8]
	0x03C2AE7C BL 0x1C16CF4
	0x03C2AE80 MOVZ W8, 0x1
	0x03C2AE84 STRB W8, [X19 + 0x2F3]
	0x03C2AE88 ADRP X8, 0x4D0000
	0x03C2AE8C LDR X8, [X8 + 0x4B8]
	0x03C2AE90 FMUL S0, S8, S8
	0x03C2AE94 FMUL S1, S9, S9

ISIL:
	001 Move X8, -51642368
	002 Subtract S0, S0, S3
	003 Subtract S1, S1, S4
	004 Move V3, [X8+3872]
	005 Subtract S2, S2, S5
	006 Multiply S0, S0, S0
	007 Multiply S1, S1, S1
	008 Add S0, S0, S1
	009 Multiply S1, S2, S2
	010 Add S0, S1, S0
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Return X0

Method: System.Boolean op_Inequality(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)

Disassembly:
	0x03C2AE98 FADD S0, S0, S1
	0x03C2AE9C LDR X8, [X8]
	0x03C2AEA0 FMUL S1, S11, S11
	0x03C2AEA4 FADD S0, S1, S0
	0x03C2AEA8 FMUL S2, S10, S10
	0x03C2AEAC LDR X8, [X8 + 0xB8]
	0x03C2AEB0 FADD S0, S2, S0
	0x03C2AEB4 FSQRT S3, S0
	0x03C2AEB8 LDR V1, [X8]
	0x03C2AEBC FCMP S3, S1
	0x03C2AEC0 B.PL 0x3C2AF00
	0x03C2AEC4 ADRP X19, 0x7AE000
	0x03C2AEC8 LDRB W8, [X19 + 0x793]

ISIL:
	001 Move X8, -51642368
	002 Subtract S0, S0, S3
	003 Subtract S1, S1, S4
	004 Move V3, [X8+3872]
	005 Subtract S2, S2, S5
	006 Multiply S0, S0, S0
	007 Multiply S1, S1, S1
	008 Add S0, S0, S1
	009 Multiply S1, S2, S2
	010 Add S0, S1, S0
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Return X0

Method: System.String ToString()

Disassembly:
	0x03C2AECC CBNZ W8, 0x3C2AEE4
	0x03C2AED0 ADRP X0, 0x4CA000
	0x03C2AED4 LDR X0, [X0 + 0x5A8]
	0x03C2AED8 BL 0x1C16CF4

ISIL:
	001 Move X1, X31
	002 Move X2, X31
	003 Move X3, X31
	004 Call 0x2431694
	005 Return X0

Method: System.String ToString(System.String format)

Disassembly:
	0x03C2AEDC MOVZ W8, 0x1
	0x03C2AEE0 STRB W8, [X19 + 0x793]
	0x03C2AEE4 ADRP X8, 0x4CA000

ISIL:
	001 Move X2, X31
	002 Move X3, X31
	003 Call 0x2431694
	004 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider formatProvider)

Disassembly:
	0x03C2AEE8 LDR X8, [X8 + 0x5A8]
	0x03C2AEEC LDR X8, [X8]
	0x03C2AEF0 LDR X8, [X8 + 0xB8]
	0x03C2AEF4 LDP S0, S1, [X8]
	0x03C2AEF8 LDP S2, S3, [X8 + 0x8]
	0x03C2AEFC B 0x3C2AF10
	0x03C2AF00 FDIV S0, S8, S3
	0x03C2AF04 FDIV S1, S9, S3
	0x03C2AF08 FDIV S2, S11, S3
	0x03C2AF0C FDIV S3, S10, S3
	0x03C2AF10 LDP X30, X19, [X31 + 0x20]
	0x03C2AF14 LDP D9, D8, [X31 + 0x10]
	0x03C2AF18 LDP D11, D10, [X31], #0x30
	0x03C2AF1C RET
	0x03C2AF20 STR X30, [X31 - 0x30]!
	0x03C2AF24 STP X22, X21, [X31 + 0x10]
	0x03C2AF28 STP X20, X19, [X31 + 0x20]
	0x03C2AF2C MOV X1, X31
	0x03C2AF30 MOV X19, X0
	0x03C2AF34 BL 0x338FE0C
	0x03C2AF38 MOV W20, W0
	0x03C2AF3C ADD X0, X19, 0x4
	0x03C2AF40 MOV X1, X31
	0x03C2AF44 BL 0x338FE0C
	0x03C2AF48 MOV W21, W0
	0x03C2AF4C ADD X0, X19, 0x8
	0x03C2AF50 MOV X1, X31
	0x03C2AF54 BL 0x338FE0C
	0x03C2AF58 MOV W22, W0
	0x03C2AF5C ADD X0, X19, 0xC
	0x03C2AF60 MOV X1, X31
	0x03C2AF64 BL 0x338FE0C
	0x03C2AF68 EOR W8, W20, W21, 0x2
	0x03C2AF6C EOR W8, W8, W22, 0x2
	0x03C2AF70 LDP X20, X19, [X31 + 0x20]
	0x03C2AF74 LDP X22, X21, [X31 + 0x10]
	0x03C2AF78 EOR W0, W8, W0, 0x1
	0x03C2AF7C LDR X30, [X31], #0x30
	0x03C2AF80 RET
	0x03C2AF84 STR D10, [X31 - 0x40]!
	0x03C2AF88 STP D9, D8, [X31 + 0x10]
	0x03C2AF8C STP X30, X21, [X31 + 0x20]
	0x03C2AF90 STP X20, X19, [X31 + 0x30]
	0x03C2AF94 ADRP X21, 0x7BB000
	0x03C2AF98 LDRB W8, [X21 + 0x62]
	0x03C2AF9C MOV X20, X1
	0x03C2AFA0 MOV X19, X0
	0x03C2AFA4 TBNZ X8, 0x0, 0x3C2AFBC
	0x03C2AFA8 ADRP X0, 0x4CA000
	0x03C2AFAC LDR X0, [X0 + 0x5A8]
	0x03C2AFB0 BL 0x1C16CF4
	0x03C2AFB4 MOVZ W8, 0x1
	0x03C2AFB8 STRB W8, [X21 + 0x62]
	0x03C2AFBC CBZ X20, 0x3C2B040
	0x03C2AFC0 ADRP X8, 0x4CA000
	0x03C2AFC4 LDR X8, [X8 + 0x5A8]
	0x03C2AFC8 LDR X9, [X20]
	0x03C2AFCC LDR X8, [X8]
	0x03C2AFD0 CMP X9, X8
	0x03C2AFD4 B.NE 0x3C2B040
	0x03C2AFD8 MOV X0, X20
	0x03C2AFDC BL 0x1C16E08
	0x03C2AFE0 LDP S0, S10, [X0]
	0x03C2AFE4 LDP S9, S8, [X0 + 0x8]
	0x03C2AFE8 MOV X0, X19
	0x03C2AFEC MOV X1, X31
	0x03C2AFF0 BL 0x338FDC0
	0x03C2AFF4 TBZ X0, 0x0, 0x3C2B040
	0x03C2AFF8 ADD X0, X19, 0x4
	0x03C2AFFC MOV V0.16B, V10.16B
	0x03C2B000 MOV X1, X31
	0x03C2B004 BL 0x338FDC0
	0x03C2B008 TBZ X0, 0x0, 0x3C2B040
	0x03C2B00C ADD X0, X19, 0x8
	0x03C2B010 MOV V0.16B, V9.16B
	0x03C2B014 MOV X1, X31
	0x03C2B018 BL 0x338FDC0
	0x03C2B01C TBZ X0, 0x0, 0x3C2B040
	0x03C2B020 ADD X0, X19, 0xC
	0x03C2B024 MOV V0.16B, V8.16B
	0x03C2B028 LDP X20, X19, [X31 + 0x30]
	0x03C2B02C LDP X30, X21, [X31 + 0x20]
	0x03C2B030 LDP D9, D8, [X31 + 0x10]
	0x03C2B034 MOV X1, X31
	0x03C2B038 LDR V10, [X31], #0x40
	0x03C2B03C B 0x338FDC0
	0x03C2B040 LDP X20, X19, [X31 + 0x30]
	0x03C2B044 LDP X30, X21, [X31 + 0x20]
	0x03C2B048 LDP D9, D8, [X31 + 0x10]
	0x03C2B04C MOV W0, W31
	0x03C2B050 LDR V10, [X31], #0x40
	0x03C2B054 RET
	0x03C2B058 STR D10, [X31 - 0x30]!
	0x03C2B05C STP D9, D8, [X31 + 0x10]
	0x03C2B060 STP X30, X19, [X31 + 0x20]
	0x03C2B064 MOV X1, X31
	0x03C2B068 MOV V8.16B, V3.16B
	0x03C2B06C MOV V9.16B, V2.16B
	0x03C2B070 MOV V10.16B, V1.16B
	0x03C2B074 MOV X19, X0
	0x03C2B078 BL 0x338FDC0
	0x03C2B07C TBZ X0, 0x0, 0x3C2B0C4
	0x03C2B080 ADD X0, X19, 0x4
	0x03C2B084 MOV V0.16B, V10.16B
	0x03C2B088 MOV X1, X31
	0x03C2B08C BL 0x338FDC0
	0x03C2B090 TBZ X0, 0x0, 0x3C2B0C4
	0x03C2B094 ADD X0, X19, 0x8
	0x03C2B098 MOV V0.16B, V9.16B
	0x03C2B09C MOV X1, X31
	0x03C2B0A0 BL 0x338FDC0
	0x03C2B0A4 TBZ X0, 0x0, 0x3C2B0C4
	0x03C2B0A8 ADD X0, X19, 0xC
	0x03C2B0AC MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7BC000
	008 Move X22, 0x4D1000
	009 Move W8, [X23+82]
	010 Move X22, [X22+3704]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x4CC000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0x4CA000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0x4D1000
	025 Move X0, [X0+3704]
	026 Call 0x1C17CF4
	027 Move X0, 0x4F3000
	028 Move X0, [X0+3352]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+82], W8
	032 Move X0, X21
	033 Move X1, X31
	034 Call String.IsNullOrEmpty, X0
	035 Move X8, [X22]
	036 And W31, W0, 1
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Compare X20, 0
	039 JumpIfNotEqual {56}
	040 Move X8, 0x4CC000
	041 Move X8, [X8+3144]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X31
	048 Call CultureInfo.get_InvariantCulture
	049 Compare X0, 0
	050 JumpIfEqual {133}
	051 Move X8, [X0]
	052 Move X9, [X8+536]
	053 Move X1, [X8+544]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X20, X0
	056 Move X8, 0x4CA000
	057 Move X8, [X8+2512]
	058 Move W1, 3
	059 Move X0, [X8]
	060 Call 0x1C17D6C
	061 Move X22, X0
	062 Move X0, X19
	063 Move X1, X21
	064 Move X2, X20
	065 Move X3, X31
	066 Call Single.ToString, X0, X1, X2
	067 Compare X22, 0
	068 JumpIfEqual {133}
	069 Move X23, X0
	070 Compare X0, 0
	071 JumpIfEqual {78}
	072 Move X8, [X22]
	073 Move X0, X23
	074 Move X1, [X8+64]
	075 Call 0x1C17E00
	076 Compare X0, 0
	077 JumpIfEqual {130}
	078 Move W8, [X22+24]
	079 Compare W8, 0
	080 JumpIfEqual {129}
	081 Add X0, X19, 4
	082 Move X1, X21
	083 Move X2, X20
	084 Move X3, X31
	085 Move [X22+32], X23
	086 Call Single.ToString, X0, X1, X2
	087 Move X23, X0
	088 Compare X0, 0
	089 JumpIfEqual {96}
	090 Move X8, [X22]
	091 Move X0, X23
	092 Move X1, [X8+64]
	093 Call 0x1C17E00
	094 Compare X0, 0
	095 JumpIfEqual {130}
	096 Move W8, [X22+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Add X0, X19, 8
	099 Move X1, X21
	100 Move X2, X20
	101 Move X3, X31
	102 Move [X22+40], X23
	103 Call Single.ToString, X0, X1, X2
	104 Move X19, X0
	105 Compare X0, 0
	106 JumpIfEqual {113}
	107 Move X8, [X22]
	108 Move X0, X19
	109 Move X1, [X8+64]
	110 Call 0x1C17E00
	111 Compare X0, 0
	112 JumpIfEqual {130}
	113 Move W8, [X22+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X8, 0x4F2000
	116 Move X8, [X8+3352]
	117 Move [X22+48], X19
	118 Move X1, X22
	119 Move X20, [X31+32]
	120 Move X19, [X31+40]
	121 Move X0, [X8]
	122 Move X22, [X31+16]
	123 Move X21, [X31+24]
	124 Move X2, X31
	125 Move X30, [X31+48]
	126 Move X23, [X31+56]
	127 Call UnityString.Format, X0, X1
	128 Return X0
	129 Call 0x1C17F28
	130 Call 0x1C17F44
	131 Move X1, X31
	132 Call 0x1C17DEC
	133 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03C2B0B0 LDP X30, X19, [X31 + 0x20]
	0x03C2B0B4 LDP D9, D8, [X31 + 0x10]
	0x03C2B0B8 MOV X1, X31
	0x03C2B0BC LDR V10, [X31], #0x30
	0x03C2B0C0 B 0x338FDC0
	0x03C2B0C4 LDP X30, X19, [X31 + 0x20]
	0x03C2B0C8 LDP D9, D8, [X31 + 0x10]
	0x03C2B0CC MOV W0, W31
	0x03C2B0D0 LDR V10, [X31], #0x30
	0x03C2B0D4 RET
	0x03C2B0D8 MOV X1, X31
	0x03C2B0DC MOV X2, X31
	0x03C2B0E0 MOV X3, X31
	0x03C2B0E4 B 0x2454360
	0x03C2B0E8 STP X30, X23, [X31 - 0x30]!
	0x03C2B0EC STP X22, X21, [X31 + 0x10]
	0x03C2B0F0 STP X20, X19, [X31 + 0x20]
	0x03C2B0F4 ADRP X23, 0x7BA000
	0x03C2B0F8 ADRP X22, 0x4D0000
	0x03C2B0FC LDRB W8, [X23 + 0x63]
	0x03C2B100 LDR X22, [X22 + 0x320]
	0x03C2B104 MOV X20, X2
	0x03C2B108 MOV X21, X1
	0x03C2B10C MOV X19, X0
	0x03C2B110 TBNZ X8, 0x0, 0x3C2B14C
	0x03C2B114 ADRP X0, 0x4CA000
	0x03C2B118 LDR X0, [X0 + 0xC48]
	0x03C2B11C BL 0x1C16CF4
	0x03C2B120 ADRP X0, 0x4C8000
	0x03C2B124 LDR X0, [X0 + 0x9D0]
	0x03C2B128 BL 0x1C16CF4
	0x03C2B12C ADRP X0, 0x4F1000
	0x03C2B130 LDR X0, [X0 + 0xD38]
	0x03C2B134 BL 0x1C16CF4
	0x03C2B138 ADRP X0, 0x4D0000
	0x03C2B13C LDR X0, [X0 + 0x320]
	0x03C2B140 BL 0x1C16CF4
	0x03C2B144 MOVZ W8, 0x1
	0x03C2B148 STRB W8, [X23 + 0x63]
	0x03C2B14C MOV X0, X21
	0x03C2B150 MOV X1, X31
	0x03C2B154 BL 0x32277A8
	0x03C2B158 LDR X8, [X22]
	0x03C2B15C ANDS W31, W0, 0x1
	0x03C2B160 CSEL X21, X8, X21, NE
	0x03C2B164 CBNZ X20, 0x3C2B1A0
	0x03C2B168 ADRP X8, 0x4CA000
	0x03C2B16C LDR X8, [X8 + 0xC48]
	0x03C2B170 LDR X0, [X8]
	0x03C2B174 LDR W8, [X0 + 0xE0]
	0x03C2B178 CBNZ W8, 0x3C2B180
	0x03C2B17C BL 0x1C16DFC
	0x03C2B180 MOV X0, X31
	0x03C2B184 BL 0x3338524
	0x03C2B188 CBZ X0, 0x3C2B2EC
	0x03C2B18C LDR X8, [X0]
	0x03C2B190 LDR X9, [X8 + 0x218]
	0x03C2B194 LDR X1, [X8 + 0x220]
	0x03C2B198 BLR X9
	0x03C2B19C MOV X20, X0
	0x03C2B1A0 ADRP X8, 0x4C8000
	0x03C2B1A4 LDR X8, [X8 + 0x9D0]
	0x03C2B1A8 MOVZ W1, 0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7BB000
	005 Move X19, 0x4C9000
	006 Move W8, [X20+83]
	007 Move X19, [X19+1440]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4C9000
	013 Move X0, [X0+1440]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+83], W8
	017 Move X8, [X19]
	018 NotImplemented "Instruction MOVI not yet implemented."
	019 Move V1, 0
	020 Move W10, 0x3F800000
	021 Move X8, [X8+184]
	022 Move X11, -51625984
	023 Move [X8], D0
	024 Move [X8+8], W31
	025 Move X8, [X19]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X9, [X8+184]
	029 Move [X9+12], D1
	030 Move [X9+20], W10
	031 Move V1, [X11]
	032 Move X9, [X8+184]
	033 Move X11, -51625984
	034 Move [X9+24], D1
	035 Move [X9+32], W31
	036 Move V1, [X11+632]
	037 Move X9, [X8+184]
	038 Move X11, -51625984
	039 Move [X9+36], D1
	040 Move [X9+44], W31
	041 Move V1, [X11+888]
	042 Move X9, [X8+184]
	043 Move X11, -51630080
	044 Move [X9+48], D1
	045 Move [X9+56], W31
	046 Move V1, [X11+1608]
	047 Move X9, [X8+184]
	048 Move [X9+60], D1
	049 Move [X9+68], W31
	050 Move X9, [X8+184]
	051 Move [X9+72], D0
	052 Move [X9+80], W10
	053 Move X9, [X8+184]
	054 Move W10, 0xBF800000
	055 Move [X9+84], D0
	056 Move [X9+92], W10
	057 Move X9, [X8+184]
	058 Move W10, 0x7F800000
	059 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	060 Move [X9+96], D0
	061 Move [X9+104], W10
	062 Move X8, [X8+184]
	063 NotImplemented "Instruction MVNI not yet implemented."
	064 Move W9, 0xFF800000
	065 Move [X8+108], D0
	066 Move [X8+116], W9
	067 Move X30, [X31+32]
	068 Return 

Method: System.Void Slerp_Injected(ref UnityEngine.Vector3 a, ref UnityEngine.Vector3 b, System.Single t, out UnityEngine.Vector3 ret)

Disassembly:
	0x03C29ACC LDP X30, X21, [X31 + 0x20]
	0x03C29AD0 LDP D9, D8, [X31 + 0x10]
	0x03C29AD4 FADD S0, S0, S1
	0x03C29AD8 FSQRT S0, S0
	0x03C29ADC LDR V10, [X31], #0x40
	0x03C29AE0 RET
	0x03C29AE4 FMUL S0, S0, S0
	0x03C29AE8 FMUL S1, S1, S1
	0x03C29AEC FADD S0, S0, S1
	0x03C29AF0 FMUL S1, S2, S2
	0x03C29AF4 FADD S0, S1, S0
	0x03C29AF8 RET
	0x03C29AFC LDP S0, S1, [X0]
	0x03C29B00 LDR V2, [X0 + 0x8]
	0x03C29B04 FMUL S0, S0, S0
	0x03C29B08 FMUL S1, S1, S1
	0x03C29B0C FADD S0, S0, S1
	0x03C29B10 FMUL S1, S2, S2
	0x03C29B14 FADD S0, S0, S1
	0x03C29B18 RET
	0x03C29B1C FCMP S0, S3
	0x03C29B20 FCSEL S0, S0, S3, MI
	0x03C29B24 FCMP S1, S4
	0x03C29B28 FCSEL S1, S1, S4, MI
	0x03C29B2C FCMP S2, S5

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7BD000
	008 Move X3, [X22+88]
	009 Move X19, X2
	010 Move V8, V0
	011 Move X20, X1
	012 Move X21, X0
	013 Compare X3, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51425280
	016 Add X0, X0, 96
	017 Call 0x1C17CB8
	018 Move X3, X0
	019 Move [X22+88], X0
	020 Move X0, X21
	021 Move X1, X20
	022 Move X2, X19
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+8]
	028 Move V0, V8
	029 Move V8, [X31+48]
	030 CallNoReturn X3

