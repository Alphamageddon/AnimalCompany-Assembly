Type: UnityEngine.Display

Method: System.Void .ctor()

Disassembly:
	0x03C0E66C MOV X3, X0
	0x03C0E670 STR X0, [X22 + 0x3F8]
	0x03C0E674 MOV X0, X21
	0x03C0E678 MOV W1, W20
	0x03C0E67C MOV X2, X19
	0x03C0E680 LDP X20, X19, [X31 + 0x20]
	0x03C0E684 LDP X22, X21, [X31 + 0x10]
	0x03C0E688 LDP X30, X23, [X31], #0x30
	0x03C0E68C BR X3
	0x03C0E690 STR X30, [X31 - 0x30]!
	0x03C0E694 STP X22, X21, [X31 + 0x10]
	0x03C0E698 STP X20, X19, [X31 + 0x20]
	0x03C0E69C ADRP X22, 0x7D6000
	0x03C0E6A0 LDR X3, [X22 + 0x3F8]
	0x03C0E6A4 MOV X19, X2

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call Object..ctor, X0
	007 Add X0, X31, 8
	008 Move W1, W31
	009 Move X2, X31
	010 Move [X31+8], X31
	011 Call IntPtr..ctor, X0, X1
	012 Move X8, [X31+8]
	013 Move [X19+16], X8
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Add X31, X31, 32
	017 Return 

Method: System.Void .ctor(System.IntPtr nativeDisplay)

Disassembly:
	0x03C0E6A8 MOV W20, W1
	0x03C0E6AC MOV X21, X0
	0x03C0E6B0 CBNZ X3, 0x3C0E6C8
	0x03C0E6B4 ADRP X0, 0xFFFFFFFFFCEF6000
	0x03C0E6B8 ADD X0, X0, 0xFAD
	0x03C0E6BC BL 0x1C16CB8
	0x03C0E6C0 MOV X3, X0
	0x03C0E6C4 STR X0, [X22 + 0x3F8]
	0x03C0E6C8 MOV X0, X21
	0x03C0E6CC MOV W1, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, X31
	006 Move X20, X0
	007 Call Object..ctor, X0
	008 Move [X20+16], X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.Int32 get_renderingWidth()

Disassembly:
	0x03C0E6D0 MOV X2, X19
	0x03C0E6D4 LDP X20, X19, [X31 + 0x20]
	0x03C0E6D8 LDP X22, X21, [X31 + 0x10]
	0x03C0E6DC LDR X30, [X31], #0x30
	0x03C0E6E0 BR X3
	0x03C0E6E4 STR X30, [X31 - 0x20]!
	0x03C0E6E8 STP X20, X19, [X31 + 0x10]
	0x03C0E6EC ADRP X20, 0x7D6000
	0x03C0E6F0 LDR X1, [X20 + 0x3A8]
	0x03C0E6F4 MOV X19, X0
	0x03C0E6F8 CBNZ X1, 0x3C0E710
	0x03C0E6FC ADRP X0, 0xFFFFFFFFFCEF2000
	0x03C0E700 ADD X0, X0, 0xD68
	0x03C0E704 BL 0x1C16CB8
	0x03C0E708 MOV X1, X0
	0x03C0E70C STR X0, [X20 + 0x3A8]
	0x03C0E710 MOV X0, X19
	0x03C0E714 LDP X20, X19, [X31 + 0x10]
	0x03C0E718 LDR X30, [X31], #0x20
	0x03C0E71C BR X1
	0x03C0E720 SUB X31, X31, 0x80
	0x03C0E724 STP X29, X30, [X31 + 0x20]
	0x03C0E728 STP X28, X27, [X31 + 0x30]
	0x03C0E72C STP X26, X25, [X31 + 0x40]
	0x03C0E730 STP X24, X23, [X31 + 0x50]
	0x03C0E734 STP X22, X21, [X31 + 0x60]
	0x03C0E738 STP X20, X19, [X31 + 0x70]
	0x03C0E73C STR W7, [X31 + 0x1C]
	0x03C0E740 STP X5, X6, [X31 + 0x8]
	0x03C0E744 ADRP X20, 0x7D6000
	0x03C0E748 ADRP X21, 0x4E9000
	0x03C0E74C LDR X27, [X31 + 0x98]
	0x03C0E750 LDR W28, [X31 + 0x90]
	0x03C0E754 LDR X29, [X31 + 0x88]
	0x03C0E758 LDRB W8, [X20 + 0x3B0]
	0x03C0E75C LDRB W19, [X31 + 0x80]
	0x03C0E760 LDR X21, [X21 + 0x2C8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7D7000
	007 Move X20, 0x54A000
	008 Move W8, [X21+744]
	009 Move X20, [X20+1096]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x54A000
	016 Move X0, [X0+1096]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+744], W8
	020 Move X0, [X20]
	021 Move [X31+8], X31
	022 Move X19, [X19+16]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0x7D7000
	028 Move X8, [X20+768]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51499008
	032 Add X0, X0, 3161
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X20+768], X0
	036 Add X1, X31, 12
	037 Add X2, X31, 8
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move W0, [X31+12]
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move X21, [X31+24]
	045 Add X31, X31, 48
	046 Return X0

Method: System.Int32 get_renderingHeight()

Disassembly:
	0x03C0E7B8 MOV X8, X0
	0x03C0E7BC STR X0, [X20 + 0x400]
	0x03C0E7C0 STR X27, [X31 + 0x98]
	0x03C0E7C4 STR W28, [X31 + 0x90]
	0x03C0E7C8 STR X29, [X31 + 0x88]
	0x03C0E7CC AND W9, W19, 0x1
	0x03C0E7D0 MOV X0, X26
	0x03C0E7D4 MOV W1, W25
	0x03C0E7D8 MOV X2, X24
	0x03C0E7DC MOV X3, X23
	0x03C0E7E0 MOV W4, W22
	0x03C0E7E4 LDP X5, X6, [X31 + 0x8]
	0x03C0E7E8 LDR W7, [X31 + 0x1C]
	0x03C0E7EC LDP X20, X19, [X31 + 0x70]
	0x03C0E7F0 LDP X22, X21, [X31 + 0x60]
	0x03C0E7F4 LDP X24, X23, [X31 + 0x50]
	0x03C0E7F8 LDP X26, X25, [X31 + 0x40]
	0x03C0E7FC LDP X28, X27, [X31 + 0x30]
	0x03C0E800 LDP X29, X30, [X31 + 0x20]
	0x03C0E804 STRB W9, [X31 + 0x80]
	0x03C0E808 ADD X31, X31, 0x80
	0x03C0E80C BR X8
	0x03C0E810 SUB X31, X31, 0x70
	0x03C0E814 STP X29, X30, [X31 + 0x10]
	0x03C0E818 STP X28, X27, [X31 + 0x20]
	0x03C0E81C STP X26, X25, [X31 + 0x30]
	0x03C0E820 STP X24, X23, [X31 + 0x40]
	0x03C0E824 STP X22, X21, [X31 + 0x50]
	0x03C0E828 STP X20, X19, [X31 + 0x60]
	0x03C0E82C ADRP X20, 0x7D6000
	0x03C0E830 LDR X27, [X31 + 0x88]
	0x03C0E834 LDR W28, [X31 + 0x80]
	0x03C0E838 LDR X29, [X31 + 0x78]
	0x03C0E83C LDR X8, [X20 + 0x400]
	0x03C0E840 LDRB W19, [X31 + 0x70]
	0x03C0E844 MOV X21, X5
	0x03C0E848 MOV W22, W4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7D7000
	007 Move X20, 0x54A000
	008 Move W8, [X21+745]
	009 Move X20, [X20+1096]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x54A000
	016 Move X0, [X0+1096]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+745], W8
	020 Move X0, [X20]
	021 Move [X31+8], X31
	022 Move X19, [X19+16]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0x7D7000
	028 Move X8, [X20+768]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51499008
	032 Add X0, X0, 3161
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X20+768], X0
	036 Add X1, X31, 12
	037 Add X2, X31, 8
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move W0, [X31+8]
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move X21, [X31+24]
	045 Add X31, X31, 48
	046 Return X0

Method: System.Int32 get_systemWidth()

Disassembly:
	0x03C0E84C MOV X23, X3
	0x03C0E850 MOV X24, X2
	0x03C0E854 MOV W25, W1
	0x03C0E858 MOV X26, X0
	0x03C0E85C CBNZ X8, 0x3C0E884
	0x03C0E860 ADRP X0, 0xFFFFFFFFFCF06000
	0x03C0E864 ADD X0, X0, 0x674
	0x03C0E868 STR W7, [X31 + 0xC]
	0x03C0E86C STR X6, [X31]
	0x03C0E870 BL 0x1C16CB8
	0x03C0E874 LDR X6, [X31]
	0x03C0E878 LDR W7, [X31 + 0xC]
	0x03C0E87C MOV X8, X0
	0x03C0E880 STR X0, [X20 + 0x400]
	0x03C0E884 STR X27, [X31 + 0x88]
	0x03C0E888 STR W28, [X31 + 0x80]
	0x03C0E88C STR X29, [X31 + 0x78]
	0x03C0E890 AND W9, W19, 0x1
	0x03C0E894 MOV X0, X26
	0x03C0E898 MOV W1, W25
	0x03C0E89C MOV X2, X24
	0x03C0E8A0 MOV X3, X23
	0x03C0E8A4 MOV W4, W22
	0x03C0E8A8 MOV X5, X21
	0x03C0E8AC LDP X20, X19, [X31 + 0x60]
	0x03C0E8B0 LDP X22, X21, [X31 + 0x50]
	0x03C0E8B4 LDP X24, X23, [X31 + 0x40]
	0x03C0E8B8 LDP X26, X25, [X31 + 0x30]
	0x03C0E8BC LDP X28, X27, [X31 + 0x20]
	0x03C0E8C0 LDP X29, X30, [X31 + 0x10]
	0x03C0E8C4 STRB W9, [X31 + 0x70]
	0x03C0E8C8 ADD X31, X31, 0x70
	0x03C0E8CC BR X8
	0x03C0E8D0 SUB X31, X31, 0x70
	0x03C0E8D4 STP X29, X30, [X31 + 0x10]
	0x03C0E8D8 STP X28, X27, [X31 + 0x20]
	0x03C0E8DC STP X26, X25, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7D7000
	007 Move X20, 0x54A000
	008 Move W8, [X21+746]
	009 Move X20, [X20+1096]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x54A000
	016 Move X0, [X0+1096]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+746], W8
	020 Move X0, [X20]
	021 Move [X31+8], X31
	022 Move X19, [X19+16]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0x7D7000
	028 Move X8, [X20+760]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51445760
	032 Add X0, X0, 436
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X20+760], X0
	036 Add X1, X31, 12
	037 Add X2, X31, 8
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move W0, [X31+12]
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move X21, [X31+24]
	045 Add X31, X31, 48
	046 Return X0

Method: System.Int32 get_systemHeight()

Disassembly:
	0x03C0E934 LDR W6, [X31 + 0xC]
	0x03C0E938 MOV X8, X0
	0x03C0E93C ADRP X9, 0x7D6000
	0x03C0E940 STR X0, [X9 + 0x3B8]
	0x03C0E944 STR X27, [X31 + 0x88]
	0x03C0E948 STR W28, [X31 + 0x80]
	0x03C0E94C STR X29, [X31 + 0x78]
	0x03C0E950 AND W7, W23, 0x1
	0x03C0E954 STR W19, [X31 + 0x70]
	0x03C0E958 MOV X0, X26
	0x03C0E95C MOV W1, W25
	0x03C0E960 MOV X2, X24
	0x03C0E964 MOV X3, X22
	0x03C0E968 MOV W4, W21
	0x03C0E96C MOV X5, X20
	0x03C0E970 LDP X20, X19, [X31 + 0x60]
	0x03C0E974 LDP X22, X21, [X31 + 0x50]
	0x03C0E978 LDP X24, X23, [X31 + 0x40]
	0x03C0E97C LDP X26, X25, [X31 + 0x30]
	0x03C0E980 LDP X28, X27, [X31 + 0x20]
	0x03C0E984 LDP X29, X30, [X31 + 0x10]
	0x03C0E988 ADD X31, X31, 0x70
	0x03C0E98C BR X8
	0x03C0E990 STR X30, [X31 - 0x40]!
	0x03C0E994 STP X24, X23, [X31 + 0x10]
	0x03C0E998 STP X22, X21, [X31 + 0x20]
	0x03C0E99C STP X20, X19, [X31 + 0x30]
	0x03C0E9A0 ADRP X24, 0x7D6000
	0x03C0E9A4 LDR X5, [X24 + 0x3C0]
	0x03C0E9A8 MOV W21, W4
	0x03C0E9AC MOV W19, W3
	0x03C0E9B0 MOV X20, X2
	0x03C0E9B4 MOV X22, X1
	0x03C0E9B8 MOV X23, X0
	0x03C0E9BC CBNZ X5, 0x3C0E9D4
	0x03C0E9C0 ADRP X0, 0xFFFFFFFFFCF0E000
	0x03C0E9C4 ADD X0, X0, 0xD52

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7D7000
	007 Move X20, 0x54A000
	008 Move W8, [X21+747]
	009 Move X20, [X20+1096]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x54A000
	016 Move X0, [X0+1096]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+747], W8
	020 Move X0, [X20]
	021 Move [X31+8], X31
	022 Move X19, [X19+16]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0x7D7000
	028 Move X8, [X20+760]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51445760
	032 Add X0, X0, 436
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X20+760], X0
	036 Add X1, X31, 12
	037 Add X2, X31, 8
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move W0, [X31+8]
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move X21, [X31+24]
	045 Add X31, X31, 48
	046 Return X0

Method: System.Boolean get_requiresSrgbBlitToBackbuffer()

Disassembly:
	0x03C0E9C8 BL 0x1C16CB8
	0x03C0E9CC MOV X5, X0
	0x03C0E9D0 STR X0, [X24 + 0x3C0]
	0x03C0E9D4 AND W4, W21, 0x1
	0x03C0E9D8 MOV X0, X23
	0x03C0E9DC MOV X1, X22
	0x03C0E9E0 MOV X2, X20
	0x03C0E9E4 MOV W3, W19
	0x03C0E9E8 LDP X20, X19, [X31 + 0x30]
	0x03C0E9EC LDP X22, X21, [X31 + 0x20]
	0x03C0E9F0 LDP X24, X23, [X31 + 0x10]
	0x03C0E9F4 LDR X30, [X31], #0x40
	0x03C0E9F8 BR X5
	0x03C0E9FC SUB X31, X31, 0x40
	0x03C0EA00 STR X30, [X31 + 0x10]
	0x03C0EA04 STP X22, X21, [X31 + 0x20]
	0x03C0EA08 STP X20, X19, [X31 + 0x30]
	0x03C0EA0C ADRP X21, 0x7D6000
	0x03C0EA10 STP S0, S1, [X31 + 0x18]
	0x03C0EA14 STP S2, S3, [X31 + 0x8]
	0x03C0EA18 ADRP X22, 0x4E9000
	0x03C0EA1C LDRB W8, [X21 + 0x3C8]
	0x03C0EA20 LDR X22, [X22 + 0x2C8]
	0x03C0EA24 MOV X19, X1
	0x03C0EA28 MOV X20, X0
	0x03C0EA2C TBNZ X8, 0x0, 0x3C0EA44
	0x03C0EA30 ADRP X0, 0x4E9000
	0x03C0EA34 LDR X0, [X0 + 0x2C8]
	0x03C0EA38 BL 0x1C16CF4
	0x03C0EA3C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D7000
	006 Move X20, 0x54A000
	007 Move W8, [X21+748]
	008 Move X20, [X20+1096]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x54A000
	015 Move X0, [X0+1096]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+748], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X20, 0x7D7000
	026 Move X1, [X20+784]
	027 Compare X1, 0
	028 JumpIfNotEqual {34}
	029 Move X0, -51253248
	030 Add X0, X0, 1643
	031 Call 0x1C17CB8
	032 Move X1, X0
	033 Move [X20+784], X0
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 CallNoReturn X1

Method: UnityEngine.Vector3 RelativeMouseAt(UnityEngine.Vector3 inputMouseCoordinates)

Disassembly:
	0x03C0EA7C MOV X0, X20
	0x03C0EA80 MOV X1, X19
	0x03C0EA84 BLR X8
	0x03C0EA88 LDP X20, X19, [X31 + 0x30]
	0x03C0EA8C LDP X22, X21, [X31 + 0x20]
	0x03C0EA90 LDR X30, [X31 + 0x10]
	0x03C0EA94 ADD X31, X31, 0x40
	0x03C0EA98 RET
	0x03C0EA9C STP X30, X23, [X31 - 0x30]!
	0x03C0EAA0 STP X22, X21, [X31 + 0x10]
	0x03C0EAA4 STP X20, X19, [X31 + 0x20]
	0x03C0EAA8 ADRP X23, 0x7D6000
	0x03C0EAAC LDR X4, [X23 + 0x408]
	0x03C0EAB0 MOV X19, X3
	0x03C0EAB4 MOV X20, X2
	0x03C0EAB8 MOV X21, X1
	0x03C0EABC MOV X22, X0
	0x03C0EAC0 CBNZ X4, 0x3C0EAD8
	0x03C0EAC4 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C0EAC8 ADD X0, X0, 0xECE
	0x03C0EACC BL 0x1C16CB8
	0x03C0EAD0 MOV X4, X0
	0x03C0EAD4 STR X0, [X23 + 0x408]
	0x03C0EAD8 MOV X0, X22
	0x03C0EADC MOV X1, X21
	0x03C0EAE0 MOV X2, X20
	0x03C0EAE4 MOV X3, X19
	0x03C0EAE8 LDP X20, X19, [X31 + 0x20]
	0x03C0EAEC LDP X22, X21, [X31 + 0x10]
	0x03C0EAF0 LDP X30, X23, [X31], #0x30
	0x03C0EAF4 BR X4
	0x03C0EAF8 STR X30, [X31 - 0x20]!
	0x03C0EAFC STP X20, X19, [X31 + 0x10]
	0x03C0EB00 ADRP X20, 0x7D6000
	0x03C0EB04 LDR X1, [X20 + 0x3D0]
	0x03C0EB08 MOV X19, X0
	0x03C0EB0C CBNZ X1, 0x3C0EB24
	0x03C0EB10 ADRP X0, 0xFFFFFFFFFCEE7000
	0x03C0EB14 ADD X0, X0, 0x117
	0x03C0EB18 BL 0x1C16CB8
	0x03C0EB1C MOV X1, X0
	0x03C0EB20 STR X0, [X20 + 0x3D0]
	0x03C0EB24 MOV X0, X19
	0x03C0EB28 LDP X20, X19, [X31 + 0x10]
	0x03C0EB2C LDR X30, [X31], #0x20
	0x03C0EB30 BR X1
	0x03C0EB34 STP X30, X27, [X31 - 0x50]!
	0x03C0EB38 STP X26, X25, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7D7000
	007 Move X19, 0x54A000
	008 Move W8, [X20+749]
	009 Move X19, [X19+1096]
	010 Move V9, V1
	011 Move V8, V0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x54A000
	017 Move X0, [X0+1096]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+749], W8
	021 Move X0, [X19]
	022 Move [X31+24], X31
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X19, 0x7D7000
	028 Move X8, [X19+776]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51376128
	032 Add X0, X0, 3786
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X19+776], X0
	036 Move W10, 0x7F800000
	037 Move S0, W10
	038 NotImplemented "Instruction FCVTZS not yet implemented."
	039 Move W11, 0x80000000
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 NotImplemented "Instruction FCVTZS not yet implemented."
	042 NotImplemented "Instruction CSEL not yet implemented."
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 NotImplemented "Instruction CSEL not yet implemented."
	045 Add X2, X31, 28
	046 Add X3, X31, 24
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move S0, [X31+24]
	049 Move S2, [X31+28]
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X30, [X31+16]
	053 NotImplemented "Instruction SCVTF not yet implemented."
	054 NotImplemented "Instruction SCVTF not yet implemented."
	055 NotImplemented "Instruction SCVTF not yet implemented."
	056 Move D9, [X31+48]
	057 Move D8, [X31+56]
	058 Return X0

Method: UnityEngine.Display get_main()

Disassembly:
	0x03C0EB98 BL 0x1C16DFC
	0x03C0EB9C MOV X0, X25
	0x03C0EBA0 MOV X1, X24
	0x03C0EBA4 MOV X2, X23
	0x03C0EBA8 MOV X3, X22
	0x03C0EBAC MOV W4, W21
	0x03C0EBB0 MOV W5, W20
	0x03C0EBB4 MOV W6, W19
	0x03C0EBB8 LDP X20, X19, [X31 + 0x40]
	0x03C0EBBC LDP X22, X21, [X31 + 0x30]
	0x03C0EBC0 LDP X24, X23, [X31 + 0x20]
	0x03C0EBC4 LDP X26, X25, [X31 + 0x10]
	0x03C0EBC8 LDP X30, X27, [X31], #0x50
	0x03C0EBCC B 0x3C0E3BC
	0x03C0EBD0 STP X30, X25, [X31 - 0x40]!
	0x03C0EBD4 STP X24, X23, [X31 + 0x10]
	0x03C0EBD8 STP X22, X21, [X31 + 0x20]
	0x03C0EBDC STP X20, X19, [X31 + 0x30]
	0x03C0EBE0 ADRP X23, 0x7D6000
	0x03C0EBE4 ADRP X24, 0x4E5000
	0x03C0EBE8 LDRB W8, [X23 + 0x3D9]
	0x03C0EBEC LDR X24, [X24 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D7000
	005 Move X19, 0x54A000
	006 Move W8, [X20+750]
	007 Move X19, [X19+1096]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x54A000
	013 Move X0, [X0+1096]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+750], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void RecreateDisplayList(System.IntPtr[] nativeDisplay)

Disassembly:
	0x03C0EBF0 MOV W19, W3
	0x03C0EBF4 MOV W20, W2
	0x03C0EBF8 MOV W21, W1
	0x03C0EBFC MOV X22, X0
	0x03C0EC00 TBNZ X8, 0x0, 0x3C0EC24
	0x03C0EC04 ADRP X0, 0x4E9000
	0x03C0EC08 LDR X0, [X0 + 0x2C8]
	0x03C0EC0C BL 0x1C16CF4
	0x03C0EC10 ADRP X0, 0x4E5000
	0x03C0EC14 LDR X0, [X0 + 0x598]
	0x03C0EC18 BL 0x1C16CF4
	0x03C0EC1C MOVZ W8, 0x1
	0x03C0EC20 STRB W8, [X23 + 0x3D9]
	0x03C0EC24 LDR X0, [X24]
	0x03C0EC28 LDR W8, [X0 + 0xE0]
	0x03C0EC2C CBNZ W8, 0x3C0EC34
	0x03C0EC30 BL 0x1C16DFC
	0x03C0EC34 MOV X0, X22
	0x03C0EC38 MOV X1, X31
	0x03C0EC3C BL 0x3C38948
	0x03C0EC40 TBZ X0, 0x0, 0x3C0ECB8
	0x03C0EC44 CBZ X22, 0x3C0ED00
	0x03C0EC48 MOV X0, X22
	0x03C0EC4C MOV X1, X31
	0x03C0EC50 BL 0x3C20A0C
	0x03C0EC54 MOV X23, X0
	0x03C0EC58 MOV X24, X1
	0x03C0EC5C MOV X0, X22
	0x03C0EC60 MOV X1, X31
	0x03C0EC64 BL 0x3C20A10
	0x03C0EC68 ADRP X8, 0x4E9000
	0x03C0EC6C LDR X8, [X8 + 0x2C8]
	0x03C0EC70 MOV X22, X0
	0x03C0EC74 MOV X25, X1
	0x03C0EC78 LDR X0, [X8]
	0x03C0EC7C LDR W8, [X0 + 0xE0]
	0x03C0EC80 CBNZ W8, 0x3C0EC88
	0x03C0EC84 BL 0x1C16DFC
	0x03C0EC88 MOV X0, X23
	0x03C0EC8C MOV X1, X24
	0x03C0EC90 MOV X2, X22
	0x03C0EC94 MOV W4, W21
	0x03C0EC98 MOV W5, W20
	0x03C0EC9C MOV W6, W19
	0x03C0ECA0 LDP X20, X19, [X31 + 0x30]
	0x03C0ECA4 LDP X22, X21, [X31 + 0x20]
	0x03C0ECA8 LDP X24, X23, [X31 + 0x10]
	0x03C0ECAC MOV X3, X25
	0x03C0ECB0 LDP X30, X25, [X31], #0x40
	0x03C0ECB4 B 0x3C0EB34
	0x03C0ECB8 ADRP X8, 0x4E9000
	0x03C0ECBC LDR X8, [X8 + 0x2C8]
	0x03C0ECC0 LDR X0, [X8]
	0x03C0ECC4 LDR W8, [X0 + 0xE0]
	0x03C0ECC8 CBNZ W8, 0x3C0ECD0
	0x03C0ECCC BL 0x1C16DFC
	0x03C0ECD0 ADRP X19, 0x7D6000
	0x03C0ECD4 LDR X0, [X19 + 0x380]
	0x03C0ECD8 CBNZ X0, 0x3C0ECEC
	0x03C0ECDC ADRP X0, 0xFFFFFFFFFCF1A000
	0x03C0ECE0 ADD X0, X0, 0x420
	0x03C0ECE4 BL 0x1C16CB8
	0x03C0ECE8 STR X0, [X19 + 0x380]
	0x03C0ECEC LDP X20, X19, [X31 + 0x30]
	0x03C0ECF0 LDP X22, X21, [X31 + 0x20]
	0x03C0ECF4 LDP X24, X23, [X31 + 0x10]
	0x03C0ECF8 LDP X30, X25, [X31], #0x40
	0x03C0ECFC BR X0
	0x03C0ED00 BL 0x1C16F20
	0x03C0ED04 STR X30, [X31 - 0x40]!
	0x03C0ED08 STP X24, X23, [X31 + 0x10]
	0x03C0ED0C STP X22, X21, [X31 + 0x20]
	0x03C0ED10 STP X20, X19, [X31 + 0x30]
	0x03C0ED14 ADRP X23, 0x7D6000
	0x03C0ED18 ADRP X24, 0x4E9000
	0x03C0ED1C LDRB W8, [X23 + 0x3DA]
	0x03C0ED20 LDR X24, [X24 + 0x2C8]
	0x03C0ED24 MOV W19, W3
	0x03C0ED28 MOV W20, W2
	0x03C0ED2C MOV W21, W1
	0x03C0ED30 MOV X22, X0
	0x03C0ED34 TBNZ X8, 0x0, 0x3C0ED4C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x7D7000
	010 Move W8, [X20+751]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x551000
	017 Move X0, [X0+3304]
	018 Call 0x1C17CF4
	019 Move X0, 0x54A000
	020 Move X0, [X0+1096]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+751], W8
	024 Compare X19, 0
	025 JumpIfEqual {97}
	026 Move W1, [X19+24]
	027 Compare W1, 0
	028 JumpIfEqual {84}
	029 Move X8, 0x551000
	030 Move X8, [X8+3304]
	031 Move X21, 0x54A000
	032 Move X0, [X8]
	033 Move X21, [X21+1096]
	034 Call 0x1C17D6C
	035 Move X8, [X21]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {43}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X8, [X21]
	043 Move X8, [X8+184]
	044 Move W22, 4
	045 Move [X8], X20
	046 Move X0, [X21]
	047 NotImplemented "Instruction LDRSW not yet implemented."
	048 Subtract X23, X22, 4
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X21]
	054 Move X8, [X0+184]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move X24, [X8]
	057 Move W8, [X19+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X25, [X19]
	060 Call 0x1C17F10
	061 Move X1, X31
	062 Move X20, X0
	063 Call Object..ctor, X0
	064 Move [X20+16], X25
	065 Compare X24, 0
	066 JumpIfEqual {97}
	067 Move X8, [X24]
	068 Move X0, X20
	069 Move X1, [X8+64]
	070 Call 0x1C17E00
	071 Compare X0, 0
	072 JumpIfEqual {94}
	073 Move W8, [X24+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move [X24], X20
	076 Add X22, X22, 1
	077 Compare X24, 0
	078 JumpIfEqual {97}
	079 Move W9, [X24+24]
	080 Compare W9, 0
	081 JumpIfEqual {93}
	082 Move X9, [X24+32]
	083 Move [X8+8], X9
	084 Move X20, [X31+48]
	085 Move X19, [X31+56]
	086 Move X22, [X31+32]
	087 Move X21, [X31+40]
	088 Move X24, [X31+16]
	089 Move X23, [X31+24]
	090 Move X30, [X31+64]
	091 Move X25, [X31+72]
	092 Return 
	093 Call 0x1C17F28
	094 Call 0x1C17F44
	095 Move X1, X31
	096 Call 0x1C17DEC
	097 Call 0x1C17F20

Method: System.Void FireDisplaysUpdated()

Disassembly:
	0x03C0ED38 ADRP X0, 0x4E9000
	0x03C0ED3C LDR X0, [X0 + 0x2C8]
	0x03C0ED40 BL 0x1C16CF4
	0x03C0ED44 MOVZ W8, 0x1
	0x03C0ED48 STRB W8, [X23 + 0x3DA]
	0x03C0ED4C LDR X0, [X24]
	0x03C0ED50 LDR W8, [X0 + 0xE0]
	0x03C0ED54 CBNZ W8, 0x3C0ED5C
	0x03C0ED58 BL 0x1C16DFC
	0x03C0ED5C MOV X0, X22
	0x03C0ED60 MOV W1, W21
	0x03C0ED64 MOV W2, W20
	0x03C0ED68 MOV W3, W19
	0x03C0ED6C LDP X20, X19, [X31 + 0x30]
	0x03C0ED70 LDP X22, X21, [X31 + 0x20]
	0x03C0ED74 LDP X24, X23, [X31 + 0x10]
	0x03C0ED78 LDR X30, [X31], #0x40
	0x03C0ED7C B 0x3C0EBD0
	0x03C0ED80 STR X30, [X31 - 0x50]!
	0x03C0ED84 STP X26, X25, [X31 + 0x10]
	0x03C0ED88 STP X24, X23, [X31 + 0x20]
	0x03C0ED8C STP X22, X21, [X31 + 0x30]
	0x03C0ED90 STP X20, X19, [X31 + 0x40]
	0x03C0ED94 ADRP X25, 0x7D6000
	0x03C0ED98 ADRP X26, 0x4E9000
	0x03C0ED9C LDRB W8, [X25 + 0x3DB]
	0x03C0EDA0 LDR X26, [X26 + 0x2C8]
	0x03C0EDA4 MOV W19, W5
	0x03C0EDA8 MOV W20, W4
	0x03C0EDAC MOV X21, X3
	0x03C0EDB0 MOV W22, W2
	0x03C0EDB4 MOV W23, W1
	0x03C0EDB8 MOV X24, X0
	0x03C0EDBC TBNZ X8, 0x0, 0x3C0EDD4
	0x03C0EDC0 ADRP X0, 0x4E9000
	0x03C0EDC4 LDR X0, [X0 + 0x2C8]
	0x03C0EDC8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D7000
	005 Move X19, 0x54A000
	006 Move W8, [X20+752]
	007 Move X19, [X19+1096]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x54A000
	013 Move X0, [X0+1096]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+752], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X9, [X8+24]
	025 Compare X9, 0
	026 JumpIfEqual {43}
	027 Move W9, [X0+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {33}
	030 Call 0x1C17DFC
	031 Move X8, [X19]
	032 Move X8, [X8+184]
	033 Move X8, [X8+24]
	034 Compare X8, 0
	035 JumpIfEqual {47}
	036 Move X2, [X8+24]
	037 Move X0, [X8+64]
	038 Move X1, [X8+40]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 CallNoReturn X2
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return 
	047 Call 0x1C17F20

Method: System.Void GetSystemExtImpl(System.IntPtr nativeDisplay, out System.Int32 w, out System.Int32 h)

Disassembly:
	0x03C0E8E0 STP X24, X23, [X31 + 0x40]
	0x03C0E8E4 STP X22, X21, [X31 + 0x50]
	0x03C0E8E8 STP X20, X19, [X31 + 0x60]
	0x03C0E8EC ADRP X8, 0x7D6000
	0x03C0E8F0 LDR X27, [X31 + 0x88]
	0x03C0E8F4 LDR W28, [X31 + 0x80]
	0x03C0E8F8 LDR X29, [X31 + 0x78]
	0x03C0E8FC LDR X8, [X8 + 0x3B8]
	0x03C0E900 LDR W19, [X31 + 0x70]
	0x03C0E904 MOV W23, W7
	0x03C0E908 MOV X20, X5
	0x03C0E90C MOV W21, W4
	0x03C0E910 MOV X22, X3
	0x03C0E914 MOV X24, X2
	0x03C0E918 MOV W25, W1
	0x03C0E91C MOV X26, X0
	0x03C0E920 CBNZ X8, 0x3C0E944
	0x03C0E924 ADRP X0, 0xFFFFFFFFFCF00000
	0x03C0E928 ADD X0, X0, 0xF2A
	0x03C0E92C STR W6, [X31 + 0xC]
	0x03C0E930 BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D7000
	007 Move X3, [X22+760]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51445760
	014 Add X0, X0, 436
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+760], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void GetRenderingExtImpl(System.IntPtr nativeDisplay, out System.Int32 w, out System.Int32 h)

Disassembly:
	0x03C0E764 MOV W22, W4
	0x03C0E768 MOV X23, X3
	0x03C0E76C MOV X24, X2
	0x03C0E770 MOV W25, W1
	0x03C0E774 MOV X26, X0
	0x03C0E778 TBNZ X8, 0x0, 0x3C0E790
	0x03C0E77C ADRP X0, 0x4E9000
	0x03C0E780 LDR X0, [X0 + 0x2C8]
	0x03C0E784 BL 0x1C16CF4
	0x03C0E788 MOVZ W8, 0x1
	0x03C0E78C STRB W8, [X20 + 0x3B0]
	0x03C0E790 LDR X0, [X21]
	0x03C0E794 LDR W8, [X0 + 0xE0]
	0x03C0E798 CBNZ W8, 0x3C0E7A0
	0x03C0E79C BL 0x1C16DFC
	0x03C0E7A0 ADRP X20, 0x7D6000
	0x03C0E7A4 LDR X8, [X20 + 0x400]
	0x03C0E7A8 CBNZ X8, 0x3C0E7C0
	0x03C0E7AC ADRP X0, 0xFFFFFFFFFCF06000
	0x03C0E7B0 ADD X0, X0, 0x674
	0x03C0E7B4 BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D7000
	007 Move X3, [X22+768]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51499008
	014 Add X0, X0, 3161
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+768], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int32 RelativeMouseAtImpl(System.Int32 x, System.Int32 y, out System.Int32 rx, out System.Int32 ry)

Disassembly:
	0x03C0EB3C STP X24, X23, [X31 + 0x20]
	0x03C0EB40 STP X22, X21, [X31 + 0x30]
	0x03C0EB44 STP X20, X19, [X31 + 0x40]
	0x03C0EB48 ADRP X27, 0x7D6000
	0x03C0EB4C ADRP X26, 0x4E9000
	0x03C0EB50 LDRB W8, [X27 + 0x3D8]
	0x03C0EB54 LDR X26, [X26 + 0x2C8]
	0x03C0EB58 MOV W19, W6
	0x03C0EB5C MOV W20, W5
	0x03C0EB60 MOV W21, W4
	0x03C0EB64 MOV X22, X3
	0x03C0EB68 MOV X23, X2
	0x03C0EB6C MOV X24, X1
	0x03C0EB70 MOV X25, X0
	0x03C0EB74 TBNZ X8, 0x0, 0x3C0EB8C
	0x03C0EB78 ADRP X0, 0x4E9000
	0x03C0EB7C LDR X0, [X0 + 0x2C8]
	0x03C0EB80 BL 0x1C16CF4
	0x03C0EB84 MOVZ W8, 0x1
	0x03C0EB88 STRB W8, [X27 + 0x3D8]
	0x03C0EB8C LDR X0, [X26]
	0x03C0EB90 LDR W8, [X0 + 0xE0]
	0x03C0EB94 CBNZ W8, 0x3C0EB9C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7D7000
	008 Move X4, [X23+776]
	009 Move X19, X3
	010 Move X20, X2
	011 Move W21, W1
	012 Move W22, W0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51376128
	016 Add X0, X0, 3786
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+776], X0
	020 Move W0, W22
	021 Move W1, W21
	022 Move X2, X20
	023 Move X3, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Boolean RequiresSrgbBlitToBackbufferImpl(System.IntPtr nativeDisplay)

Disassembly:
	0x03C0EA40 STRB W8, [X21 + 0x3C8]
	0x03C0EA44 LDR X0, [X22]
	0x03C0EA48 LDR W8, [X0 + 0xE0]
	0x03C0EA4C CBNZ W8, 0x3C0EA54
	0x03C0EA50 BL 0x1C16DFC
	0x03C0EA54 ADRP X21, 0x7D6000
	0x03C0EA58 LDR X8, [X21 + 0x408]
	0x03C0EA5C CBNZ X8, 0x3C0EA74
	0x03C0EA60 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C0EA64 ADD X0, X0, 0xECE
	0x03C0EA68 BL 0x1C16CB8
	0x03C0EA6C MOV X8, X0
	0x03C0EA70 STR X0, [X21 + 0x408]
	0x03C0EA74 ADD X2, X31, 0x18
	0x03C0EA78 ADD X3, X31, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D7000
	005 Move X1, [X20+784]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51253248
	010 Add X0, X0, 1643
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+784], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void .cctor()

Disassembly:
	0x03C0EDCC MOVZ W8, 0x1
	0x03C0EDD0 STRB W8, [X25 + 0x3DB]
	0x03C0EDD4 LDR X0, [X26]
	0x03C0EDD8 LDR W8, [X0 + 0xE0]
	0x03C0EDDC CBNZ W8, 0x3C0EDE4
	0x03C0EDE0 BL 0x1C16DFC
	0x03C0EDE4 ADRP X25, 0x7D6000
	0x03C0EDE8 LDR X6, [X25 + 0x390]
	0x03C0EDEC CBNZ X6, 0x3C0EE04
	0x03C0EDF0 ADRP X0, 0xFFFFFFFFFCEE0000
	0x03C0EDF4 ADD X0, X0, 0xCF4
	0x03C0EDF8 BL 0x1C16CB8
	0x03C0EDFC MOV X6, X0
	0x03C0EE00 STR X0, [X25 + 0x390]
	0x03C0EE04 MOV X0, X24
	0x03C0EE08 MOV W1, W23
	0x03C0EE0C MOV W2, W22
	0x03C0EE10 MOV X3, X21
	0x03C0EE14 MOV W4, W20
	0x03C0EE18 MOV W5, W19
	0x03C0EE1C LDP X20, X19, [X31 + 0x40]
	0x03C0EE20 LDP X22, X21, [X31 + 0x30]
	0x03C0EE24 LDP X24, X23, [X31 + 0x20]
	0x03C0EE28 LDP X26, X25, [X31 + 0x10]
	0x03C0EE2C LDR X30, [X31], #0x50
	0x03C0EE30 BR X6
	0x03C0EE34 SUB X31, X31, 0x70
	0x03C0EE38 STP X29, X30, [X31 + 0x10]
	0x03C0EE3C STP X28, X27, [X31 + 0x20]
	0x03C0EE40 STP X26, X25, [X31 + 0x30]
	0x03C0EE44 STP X24, X23, [X31 + 0x40]
	0x03C0EE48 STP X22, X21, [X31 + 0x50]
	0x03C0EE4C STP X20, X19, [X31 + 0x60]
	0x03C0EE50 STR X7, [X31 + 0x8]
	0x03C0EE54 STP W5, W6, [X31]
	0x03C0EE58 ADRP X20, 0x7D6000
	0x03C0EE5C ADRP X21, 0x4E9000
	0x03C0EE60 LDR W27, [X31 + 0x88]
	0x03C0EE64 LDR W28, [X31 + 0x80]
	0x03C0EE68 LDR W29, [X31 + 0x78]
	0x03C0EE6C LDRB W8, [X20 + 0x3DC]
	0x03C0EE70 LDR W19, [X31 + 0x70]
	0x03C0EE74 LDR X21, [X21 + 0x2C8]
	0x03C0EE78 MOV W22, W4
	0x03C0EE7C MOV W23, W3
	0x03C0EE80 MOV W24, W2
	0x03C0EE84 MOV W25, W1
	0x03C0EE88 MOV X26, X0
	0x03C0EE8C TBNZ X8, 0x0, 0x3C0EEA4
	0x03C0EE90 ADRP X0, 0x4E9000
	0x03C0EE94 LDR X0, [X0 + 0x2C8]
	0x03C0EE98 BL 0x1C16CF4
	0x03C0EE9C MOVZ W8, 0x1
	0x03C0EEA0 STRB W8, [X20 + 0x3DC]
	0x03C0EEA4 LDR X0, [X21]
	0x03C0EEA8 LDR W8, [X0 + 0xE0]
	0x03C0EEAC CBNZ W8, 0x3C0EEB4
	0x03C0EEB0 BL 0x1C16DFC
	0x03C0EEB4 ADRP X20, 0x7D6000
	0x03C0EEB8 LDR X8, [X20 + 0x398]
	0x03C0EEBC CBNZ X8, 0x3C0EED4
	0x03C0EEC0 ADRP X0, 0xFFFFFFFFFCF08000
	0x03C0EEC4 ADD X0, X0, 0x5EB
	0x03C0EEC8 BL 0x1C16CB8
	0x03C0EECC MOV X8, X0
	0x03C0EED0 STR X0, [X20 + 0x398]
	0x03C0EED4 STR W27, [X31 + 0x88]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x7D7000
	007 Move X20, 0x551000
	008 Move X21, 0x54A000
	009 Move W8, [X19+792]
	010 Move X20, [X20+3304]
	011 Move X21, [X21+1096]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x551000
	017 Move X0, [X0+3304]
	018 Call 0x1C17CF4
	019 Move X0, 0x54A000
	020 Move X0, [X0+1096]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X19+792], W8
	024 Move X0, [X20]
	025 Move W1, 1
	026 Call 0x1C17D6C
	027 Move X8, [X21]
	028 Move X19, X0
	029 Move X0, X8
	030 Call 0x1C17F10
	031 Move X1, X31
	032 Move X20, X0
	033 Call Object..ctor, X0
	034 Add X0, X31, 8
	035 Move W1, W31
	036 Move X2, X31
	037 Move [X31+8], X31
	038 Call IntPtr..ctor, X0, X1
	039 Move X8, [X31+8]
	040 Move [X20+16], X8
	041 Compare X19, 0
	042 JumpIfEqual {77}
	043 Move X8, [X19]
	044 Move X0, X20
	045 Move X1, [X8+64]
	046 Call 0x1C17E00
	047 Compare X0, 0
	048 JumpIfEqual {79}
	049 Move W8, [X19+24]
	050 Compare W8, 0
	051 JumpIfEqual {78}
	052 Move [X19+32], X20
	053 Move X8, [X21]
	054 Move X8, [X8+184]
	055 Move [X8], X19
	056 Move X8, [X21]
	057 Move X8, [X8+184]
	058 Move X9, [X8]
	059 Compare X9, 0
	060 JumpIfEqual {77}
	061 Move W10, [X9+24]
	062 Compare W10, 0
	063 JumpIfEqual {78}
	064 Move X9, [X9+32]
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X30, [X31+16]
	068 Move X21, [X31+24]
	069 Move TEMP, 0
	070 Not TEMP
	071 Move W10, TEMP
	072 Move [X8+16], W10
	073 Move [X8+8], X9
	074 Move [X8+24], X31
	075 Add X31, X31, 48
	076 Return 
	077 Call 0x1C17F20
	078 Call 0x1C17F28
	079 Call 0x1C17F44
	080 Move X1, X31
	081 Call 0x1C17DEC

