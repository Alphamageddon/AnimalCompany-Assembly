Type: UnityEngine.Playables.Playable

Method: UnityEngine.Playables.Playable get_Null()

Disassembly:
	0x03C5E98C ADD X0, X0, 0x11C
	0x03C5E990 BL 0x1C16CB8
	0x03C5E994 MOV X1, X0
	0x03C5E998 STR X0, [X20 + 0x298]
	0x03C5E99C MOV X0, X19
	0x03C5E9A0 LDP X20, X19, [X31 + 0x10]
	0x03C5E9A4 LDP X30, X21, [X31], #0x20
	0x03C5E9A8 BR X1
	0x03C5E9AC STR X30, [X31 - 0x20]!
	0x03C5E9B0 STP X20, X19, [X31 + 0x10]
	0x03C5E9B4 ADRP X20, 0x788000
	0x03C5E9B8 LDR X1, [X20 + 0x298]
	0x03C5E9BC MOV X19, X0
	0x03C5E9C0 CBNZ X1, 0x3C5E9D8
	0x03C5E9C4 ADRP X0, 0xFFFFFFFFFCEBD000
	0x03C5E9C8 ADD X0, X0, 0x11C
	0x03C5E9CC BL 0x1C16CB8
	0x03C5E9D0 MOV X1, X0
	0x03C5E9D4 STR X0, [X20 + 0x298]
	0x03C5E9D8 MOV X0, X19
	0x03C5E9DC LDP X20, X19, [X31 + 0x10]
	0x03C5E9E0 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x789000
	005 Move X19, 0x4BF000
	006 Move W8, [X20+571]
	007 Move X19, [X19+568]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4BF000
	013 Move X0, [X0+568]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+571], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X1, [X8+8]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Void .ctor(UnityEngine.Playables.PlayableHandle handle)

Disassembly:
	0x03C5E9E4 BR X1
	0x03C5E9E8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X0], X1
	002 Move [X0+8], X2
	003 Return 

Method: UnityEngine.Playables.PlayableHandle GetHandle()

Disassembly:
	0x03C5E9EC STP X20, X19, [X31 + 0x10]
	0x03C5E9F0 ADRP X20, 0x788000
	0x03C5E9F4 ADRP X21, 0x4BE000

ISIL:
	001 Move X8, [X0]
	002 Move X1, [X0+8]
	003 Move X0, X8
	004 Return X0

Method: System.Boolean Equals(UnityEngine.Playables.Playable other)

Disassembly:
	0x03C5E9F8 LDRB W8, [X20 + 0x289]
	0x03C5E9FC LDR X21, [X21 + 0x230]
	0x03C5EA00 MOV X19, X0
	0x03C5EA04 TBNZ X8, 0x0, 0x3C5EA1C
	0x03C5EA08 ADRP X0, 0x4BE000
	0x03C5EA0C LDR X0, [X0 + 0x230]
	0x03C5EA10 BL 0x1C16CF4
	0x03C5EA14 MOVZ W8, 0x1
	0x03C5EA18 STRB W8, [X20 + 0x289]
	0x03C5EA1C LDR X0, [X21]
	0x03C5EA20 LDR W8, [X0 + 0xE0]
	0x03C5EA24 CBNZ W8, 0x3C5EA2C
	0x03C5EA28 BL 0x1C16DFC
	0x03C5EA2C ADRP X20, 0x788000
	0x03C5EA30 LDR X1, [X20 + 0x2A0]
	0x03C5EA34 CBNZ X1, 0x3C5EA4C
	0x03C5EA38 ADRP X0, 0xFFFFFFFFFCEBF000
	0x03C5EA3C ADD X0, X0, 0x4D0
	0x03C5EA40 BL 0x1C16CB8
	0x03C5EA44 MOV X1, X0
	0x03C5EA48 STR X0, [X20 + 0x2A0]
	0x03C5EA4C MOV X0, X19
	0x03C5EA50 LDP X20, X19, [X31 + 0x10]
	0x03C5EA54 LDP X30, X21, [X31], #0x20
	0x03C5EA58 BR X1
	0x03C5EA5C STR X30, [X31 - 0x20]!
	0x03C5EA60 STP X20, X19, [X31 + 0x10]
	0x03C5EA64 ADRP X20, 0x788000
	0x03C5EA68 LDR X1, [X20 + 0x2A0]
	0x03C5EA6C MOV X19, X0
	0x03C5EA70 CBNZ X1, 0x3C5EA88
	0x03C5EA74 ADRP X0, 0xFFFFFFFFFCEBF000
	0x03C5EA78 ADD X0, X0, 0x4D0
	0x03C5EA7C BL 0x1C16CB8
	0x03C5EA80 MOV X1, X0
	0x03C5EA84 STR X0, [X20 + 0x2A0]
	0x03C5EA88 MOV X0, X19
	0x03C5EA8C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x789000
	008 Move X22, 0x4BF000
	009 Move W8, [X23+572]
	010 Move X22, [X22+568]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x4BF000
	019 Move X0, [X0+560]
	020 Call 0x1C17CF4
	021 Move X0, 0x4BF000
	022 Move X0, [X0+568]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+572], W8
	026 Move X0, [X22]
	027 Move X22, 0x4BF000
	028 Move W8, [X0+224]
	029 Move X22, [X22+560]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, [X22]
	034 Move X22, [X21]
	035 Move X21, [X21+8]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X22
	041 Move X1, X21
	042 Move X2, X20
	043 Move X3, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]

Method: System.Void .cctor()

Disassembly:
	0x03C5EB18 LDP X30, X21, [X31 + 0x10]
	0x03C5EB1C ADD X31, X31, 0x30
	0x03C5EB20 RET
	0x03C5EB24 STP X30, X21, [X31 - 0x20]!
	0x03C5EB28 STP X20, X19, [X31 + 0x10]
	0x03C5EB2C ADRP X21, 0x788000
	0x03C5EB30 LDR X2, [X21 + 0x2A8]
	0x03C5EB34 MOV X19, X1
	0x03C5EB38 MOV X20, X0
	0x03C5EB3C CBNZ X2, 0x3C5EB54
	0x03C5EB40 ADRP X0, 0xFFFFFFFFFCECA000
	0x03C5EB44 ADD X0, X0, 0xDB2
	0x03C5EB48 BL 0x1C16CB8
	0x03C5EB4C MOV X2, X0
	0x03C5EB50 STR X0, [X21 + 0x2A8]
	0x03C5EB54 MOV X0, X20
	0x03C5EB58 MOV X1, X19
	0x03C5EB5C LDP X20, X19, [X31 + 0x10]
	0x03C5EB60 LDP X30, X21, [X31], #0x20
	0x03C5EB64 BR X2
	0x03C5EB68 STR X30, [X31 - 0x20]!
	0x03C5EB6C STP X20, X19, [X31 + 0x10]
	0x03C5EB70 ADRP X20, 0x788000
	0x03C5EB74 LDR X1, [X20 + 0x2B0]
	0x03C5EB78 MOV X19, X0
	0x03C5EB7C CBNZ X1, 0x3C5EB94
	0x03C5EB80 ADRP X0, 0xFFFFFFFFFCE9D000
	0x03C5EB84 ADD X0, X0, 0x7CC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x789000
	005 Move X19, 0x4BF000
	006 Move W8, [X20+573]
	007 Move X19, [X19+560]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x4BF000
	013 Move X0, [X0+560]
	014 Call 0x1C17CF4
	015 Move X0, 0x4BF000
	016 Move X0, [X0+568]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+573], W8
	020 Move X0, [X19]
	021 Move X19, 0x4BF000
	022 Move W8, [X0+224]
	023 Move X19, [X19+568]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Call PlayableHandle.get_Null
	028 Move X8, [X19]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X8, [X8+184]
	032 Move [X8], X0
	033 Move [X8+8], X1
	034 Move X30, [X31+32]
	035 Return 

