Type: UnityEngine.Playables.PlayableHandle

Method: System.Boolean IsPlayableOfType()

Disassembly:
	0x022319E8 ADD X31, X22, 0x0
	0x022319EC ADRP X25, 0x1EC5000
	0x022319F0 LDR X25, [X25 + 0xE40]
	0x022319F4 LDR X0, [X25]
	0x022319F8 LDR W8, [X0 + 0xE0]
	0x022319FC CBNZ W8, 0x2231A04
	0x02231A00 BL 0x1C16DFC
	0x02231A04 LDR X8, [X20 + 0x38]
	0x02231A08 LDR X0, [X8 + 0x8]
	0x02231A0C LDRB W9, [X0 + 0x135]
	0x02231A10 TBNZ X9, 0x0, 0x2231A1C
	0x02231A14 BL 0x1C5C684
	0x02231A18 LDR X8, [X20 + 0x38]
	0x02231A1C LDR X1, [X8 + 0x10]
	0x02231A20 CMP W21, 0x0
	0x02231A24 CSET W8, GT
	0x02231A28 STURB W8, [X29 - 0x10]
	0x02231A2C SUB X8, X29, 0x10
	0x02231A30 SUB X4, X29, 0x18
	0x02231A34 SUB X5, X29, 0xC
	0x02231A38 MOV X2, X23
	0x02231A3C MOV X3, X19
	0x02231A40 STUR X8, [X29 - 0x18]
	0x02231A44 BL 0x1C17728
	0x02231A48 LDURB W8, [X29 - 0xC]
	0x02231A4C CBZ W8, 0x2231AB8
	0x02231A50 LDR X0, [X25]
	0x02231A54 LDR W8, [X0 + 0xE0]
	0x02231A58 CBNZ W8, 0x2231A60
	0x02231A5C BL 0x1C16DFC
	0x02231A60 SUB X0, X29, 0x20
	0x02231A64 MOV X1, X31
	0x02231A68 BL 0x1E8D834
	0x02231A6C LDR X9, [X20 + 0x38]
	0x02231A70 MOV W21, W0
	0x02231A74 LDR X8, [X9 + 0x8]
	0x02231A78 LDRB W10, [X8 + 0x135]
	0x02231A7C TBNZ X10, 0x0, 0x2231A90
	0x02231A80 MOV X0, X8
	0x02231A84 BL 0x1C5C684
	0x02231A88 LDR X9, [X20 + 0x38]
	0x02231A8C MOV X8, X0
	0x02231A90 LDR X1, [X9 + 0x18]
	0x02231A94 SUB X9, X29, 0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {20}
	009 Move X0, 0x1EEC000
	010 Move X0, [X0+560]
	011 Call 0x1C17CF4
	012 Move X0, 0x1EC3000
	013 Move X0, [X0+1728]
	014 Call 0x1C17CF4
	015 Move X8, [X19+56]
	016 Compare X8, 0
	017 JumpIfNotEqual {20}
	018 Move X0, X19
	019 Call 0x1C5D6E0
	020 Move X8, 0x1EEC000
	021 Move X8, [X8+560]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Call PlayableHandle.GetPlayableType, X0
	030 Move X8, 0x1EC3000
	031 Move X8, [X8+1728]
	032 Move X9, [X19+56]
	033 Move X19, X0
	034 Move X8, [X8]
	035 Move X20, [X9]
	036 Move W10, [X8+224]
	037 Compare W10, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X20
	042 Move X1, X31
	043 Call Type.GetTypeFromHandle, X0
	044 Move X1, X0
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X2, X31
	049 Move X30, [X31+32]
	050 Call Type.op_Equality, X0, X1
	051 Return X0

Method: UnityEngine.Playables.PlayableHandle get_Null()

Disassembly:
	0x03C5EB88 BL 0x1C16CB8
	0x03C5EB8C MOV X1, X0
	0x03C5EB90 STR X0, [X20 + 0x2B0]
	0x03C5EB94 MOV X0, X19
	0x03C5EB98 LDP X20, X19, [X31 + 0x10]
	0x03C5EB9C LDR X30, [X31], #0x20
	0x03C5EBA0 BR X1
	0x03C5EBA4 STR X30, [X31 - 0x30]!
	0x03C5EBA8 STP X22, X21, [X31 + 0x10]
	0x03C5EBAC STP X20, X19, [X31 + 0x20]
	0x03C5EBB0 ADRP X21, 0x788000
	0x03C5EBB4 ADRP X22, 0x4BE000
	0x03C5EBB8 LDRB W8, [X21 + 0x28C]
	0x03C5EBBC LDR X22, [X22 + 0x230]
	0x03C5EBC0 MOV W19, W1
	0x03C5EBC4 MOV X20, X0
	0x03C5EBC8 TBNZ X8, 0x0, 0x3C5EBE0
	0x03C5EBCC ADRP X0, 0x4BE000
	0x03C5EBD0 LDR X0, [X0 + 0x230]
	0x03C5EBD4 BL 0x1C16CF4
	0x03C5EBD8 MOVZ W8, 0x1
	0x03C5EBDC STRB W8, [X21 + 0x28C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x789000
	005 Move X19, 0x4BF000
	006 Move W8, [X20+640]
	007 Move X19, [X19+560]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4BF000
	013 Move X0, [X0+560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+640], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X1, [X8+8]
	028 Move X30, [X31+32]
	029 Return X0

Method: System.Boolean SetInputWeight(System.Int32 inputIndex, System.Single weight)

Disassembly:
	0x03C5F2E0 MOVZ W8, 0x1
	0x03C5F2E4 STRB W8, [X21 + 0x2D8]
	0x03C5F2E8 LDR X0, [X22]
	0x03C5F2EC LDR W8, [X0 + 0xE0]
	0x03C5F2F0 CBNZ W8, 0x3C5F2F8
	0x03C5F2F4 BL 0x1C16DFC
	0x03C5F2F8 ADRP X21, 0x787000
	0x03C5F2FC LDR X8, [X21 + 0x2F0]
	0x03C5F300 CBNZ X8, 0x3C5F318
	0x03C5F304 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C5F308 ADD X0, X0, 0x1FA
	0x03C5F30C BL 0x1C16CB8
	0x03C5F310 MOV X8, X0
	0x03C5F314 STR X0, [X21 + 0x2F0]
	0x03C5F318 ADD X1, X31, 0x0
	0x03C5F31C MOV X0, X20
	0x03C5F320 MOV W2, W19
	0x03C5F324 BLR X8
	0x03C5F328 LDP X20, X19, [X31 + 0x30]
	0x03C5F32C LDP X22, X21, [X31 + 0x20]
	0x03C5F330 LDR X30, [X31 + 0x10]
	0x03C5F334 ADD X31, X31, 0x40
	0x03C5F338 RET
	0x03C5F33C STR X30, [X31 - 0x30]!
	0x03C5F340 STP X22, X21, [X31 + 0x10]
	0x03C5F344 STP X20, X19, [X31 + 0x20]
	0x03C5F348 ADRP X22, 0x787000
	0x03C5F34C LDR X3, [X22 + 0x2F0]
	0x03C5F350 MOV W19, W2
	0x03C5F354 MOV X20, X1
	0x03C5F358 MOV X21, X0
	0x03C5F35C CBNZ X3, 0x3C5F374
	0x03C5F360 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C5F364 ADD X0, X0, 0x1FA
	0x03C5F368 BL 0x1C16CB8
	0x03C5F36C MOV X3, X0
	0x03C5F370 STR X0, [X22 + 0x2F0]
	0x03C5F374 MOV X0, X21

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x788000
	008 Move X21, 0x4BE000
	009 Move W8, [X22+641]
	010 Move X21, [X21+560]
	011 Move V8, V0
	012 Move W19, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x4BE000
	019 Move X0, [X0+560]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+641], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move W1, W19
	030 Call PlayableHandle.CheckInputBounds, X0, X1
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move W1, W19
	038 Move V0, V8
	039 Call PlayableHandle.SetInputWeightFromIndex, X0, X1, V0
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+8]
	045 Move W0, 1
	046 Move V8, [X31+48]
	047 Return X0

Method: System.Boolean op_Equality(UnityEngine.Playables.PlayableHandle x, UnityEngine.Playables.PlayableHandle y)

Disassembly:
	0x03C5EA90 LDR X30, [X31], #0x20
	0x03C5EA94 BR X1
	0x03C5EA98 SUB X31, X31, 0x30
	0x03C5EA9C STP X30, X21, [X31 + 0x10]
	0x03C5EAA0 STP X20, X19, [X31 + 0x20]
	0x03C5EAA4 ADRP X21, 0x788000
	0x03C5EAA8 ADRP X20, 0x4BE000
	0x03C5EAAC LDRB W8, [X21 + 0x28A]
	0x03C5EAB0 LDR X20, [X20 + 0x230]
	0x03C5EAB4 MOV X19, X0
	0x03C5EAB8 TBNZ X8, 0x0, 0x3C5EAD0
	0x03C5EABC ADRP X0, 0x4BE000
	0x03C5EAC0 LDR X0, [X0 + 0x230]
	0x03C5EAC4 BL 0x1C16CF4
	0x03C5EAC8 MOVZ W8, 0x1
	0x03C5EACC STRB W8, [X21 + 0x28A]
	0x03C5EAD0 LDR X0, [X20]
	0x03C5EAD4 STP X31, X31, [X31]
	0x03C5EAD8 LDR W8, [X0 + 0xE0]
	0x03C5EADC CBNZ W8, 0x3C5EAE4
	0x03C5EAE0 BL 0x1C16DFC
	0x03C5EAE4 ADRP X20, 0x788000
	0x03C5EAE8 LDR X8, [X20 + 0x2A8]
	0x03C5EAEC CBNZ X8, 0x3C5EB04
	0x03C5EAF0 ADRP X0, 0xFFFFFFFFFCECA000
	0x03C5EAF4 ADD X0, X0, 0xDB2
	0x03C5EAF8 BL 0x1C16CB8
	0x03C5EAFC MOV X8, X0
	0x03C5EB00 STR X0, [X20 + 0x2A8]
	0x03C5EB04 ADD X1, X31, 0x0
	0x03C5EB08 MOV X0, X19
	0x03C5EB0C BLR X8
	0x03C5EB10 LDP X0, X1, [X31]
	0x03C5EB14 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x789000
	009 Move X23, 0x4BF000
	010 Move W8, [X24+642]
	011 Move X23, [X23+560]
	012 Move X19, X3
	013 Move X21, X2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x4BF000
	021 Move X0, [X0+560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X24+642], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X22
	031 Move X1, X21
	032 Move X2, X31
	033 Call IntPtr.op_Equality, X0, X1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X22, [X31+32]
	038 Move X21, [X31+40]
	039 Move X24, [X31+16]
	040 Move X23, [X31+24]
	041 NotImplemented "Instruction CSET not yet implemented."
	042 And W0, W8, W0
	043 Move X30, [X31+64]
	044 Return X0

Method: System.Boolean Equals(System.Object p)

Disassembly:
	0x03C5F4B0 FMOV S1, 1
	0x03C5F4B4 FCMP S0, S1
	0x03C5F4B8 B.GT 0x3C5F4CC
	0x03C5F4BC LDP X20, X19, [X31 + 0x10]
	0x03C5F4C0 STR S0, [X0]
	0x03C5F4C4 LDR X30, [X31], #0x20
	0x03C5F4C8 RET
	0x03C5F4CC ADD X0, X31, 0xC
	0x03C5F4D0 MOV X1, X31
	0x03C5F4D4 BL 0x338FE24
	0x03C5F4D8 MOV X19, X0
	0x03C5F4DC ADRP X0, 0x500000
	0x03C5F4E0 LDR X0, [X0 + 0xFE0]
	0x03C5F4E4 BL 0x1C16D08
	0x03C5F4E8 MOV X20, X0
	0x03C5F4EC ADRP X0, 0x500000
	0x03C5F4F0 LDR X0, [X0 + 0xFE8]
	0x03C5F4F4 BL 0x1C16D08
	0x03C5F4F8 MOV X2, X0
	0x03C5F4FC MOV X0, X20
	0x03C5F500 MOV X1, X19
	0x03C5F504 MOV X3, X31
	0x03C5F508 BL 0x32274B8
	0x03C5F50C MOV X19, X0
	0x03C5F510 ADRP X0, 0x49C000
	0x03C5F514 LDR X0, [X0 + 0x760]
	0x03C5F518 BL 0x1C16D08
	0x03C5F51C BL 0x1C16F10
	0x03C5F520 MOV X1, X19
	0x03C5F524 MOV X2, X31
	0x03C5F528 MOV X20, X0
	0x03C5F52C BL 0x3316014
	0x03C5F530 ADRP X0, 0x500000
	0x03C5F534 LDR X0, [X0 + 0xFF0]
	0x03C5F538 BL 0x1C16D08
	0x03C5F53C MOV X1, X0
	0x03C5F540 MOV X0, X20
	0x03C5F544 BL 0x1C16DEC
	0x03C5F548 LDR V0, [X0 + 0x4]
	0x03C5F54C RET
	0x03C5F550 STR X30, [X31 - 0x20]!
	0x03C5F554 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x788000
	006 Move W8, [X21+643]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x4BE000
	014 Move X0, [X0+560]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+643], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X21, 0x4BE000
	021 Move X21, [X21+560]
	022 Move X8, [X20]
	023 Move X0, [X21]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfEqual {35}
	034 Move X1, X0
	035 Call 0x1C17DFC
	036 Move X1, [X21]
	037 Move X0, [X20]
	038 Move X8, [X0+64]
	039 Move X9, [X1+64]
	040 Move X0, X20
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Call 0x1C17E08
	043 Move X1, [X0]
	044 Move X2, [X0+8]
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call 0x1C181E0

Method: System.Boolean Equals(UnityEngine.Playables.PlayableHandle other)

Disassembly:
	0x03C5F558 FCMP S0, 0x0
	0x03C5F55C STR S0, [X31 + 0xC]
	0x03C5F560 B.MI 0x3C5F580
	0x03C5F564 FMOV S1, 1
	0x03C5F568 FCMP S0, S1
	0x03C5F56C B.GT 0x3C5F580
	0x03C5F570 LDP X20, X19, [X31 + 0x10]
	0x03C5F574 STR S0, [X0 + 0x4]
	0x03C5F578 LDR X30, [X31], #0x20
	0x03C5F57C RET
	0x03C5F580 ADD X0, X31, 0xC
	0x03C5F584 MOV X1, X31
	0x03C5F588 BL 0x338FE24
	0x03C5F58C MOV X19, X0
	0x03C5F590 ADRP X0, 0x500000
	0x03C5F594 LDR X0, [X0 + 0xFF8]
	0x03C5F598 BL 0x1C16D08
	0x03C5F59C MOV X20, X0
	0x03C5F5A0 ADRP X0, 0x500000
	0x03C5F5A4 LDR X0, [X0 + 0xFE8]
	0x03C5F5A8 BL 0x1C16D08
	0x03C5F5AC MOV X2, X0
	0x03C5F5B0 MOV X0, X20
	0x03C5F5B4 MOV X1, X19
	0x03C5F5B8 MOV X3, X31
	0x03C5F5BC BL 0x32274B8
	0x03C5F5C0 MOV X19, X0
	0x03C5F5C4 ADRP X0, 0x49C000
	0x03C5F5C8 LDR X0, [X0 + 0x760]
	0x03C5F5CC BL 0x1C16D08
	0x03C5F5D0 BL 0x1C16F10
	0x03C5F5D4 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x788000
	008 Move X22, 0x4BE000
	009 Move W8, [X23+644]
	010 Move X22, [X22+560]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x4BE000
	019 Move X0, [X0+560]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+644], W8
	023 Move X0, [X22]
	024 Move X22, [X21]
	025 Move X21, [X21+8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X22
	031 Move X1, X20
	032 Move X2, X31
	033 Call IntPtr.op_Equality, X0, X1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 NotImplemented "Instruction CSET not yet implemented."
	040 And W0, W8, W0
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C5F5D8 MOV X2, X31
	0x03C5F5DC MOV X20, X0
	0x03C5F5E0 BL 0x3316014
	0x03C5F5E4 ADRP X0, 0x501000
	0x03C5F5E8 LDR X0, [X0]
	0x03C5F5EC BL 0x1C16D08
	0x03C5F5F0 MOV X1, X0
	0x03C5F5F4 MOV X0, X20
	0x03C5F5F8 BL 0x1C16DEC
	0x03C5F5FC LDR V0, [X0 + 0x8]
	0x03C5F600 RET
	0x03C5F604 STR X30, [X31 - 0x20]!
	0x03C5F608 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call IntPtr.GetHashCode, X0
	007 Move W20, W0
	008 Add X0, X19, 8
	009 Move X1, X31
	010 Call UInt32.GetHashCode, X0
	011 Xor W0, W0, W20
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return X0

Method: System.Boolean CompareVersion(UnityEngine.Playables.PlayableHandle lhs, UnityEngine.Playables.PlayableHandle rhs)

Disassembly:
	0x03C5F47C STP X31, X31, [X8]
	0x03C5F480 LDR X30, [X31], #0x20
	0x03C5F484 RET
	0x03C5F488 LDP X8, X1, [X0]
	0x03C5F48C MOV X0, X8
	0x03C5F490 RET
	0x03C5F494 LDR V0, [X0]
	0x03C5F498 RET
	0x03C5F49C STR X30, [X31 - 0x20]!
	0x03C5F4A0 STP X20, X19, [X31 + 0x10]
	0x03C5F4A4 FCMP S0, 0x0
	0x03C5F4A8 STR S0, [X31 + 0xC]
	0x03C5F4AC B.MI 0x3C5F4CC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X1, X2
	006 Move X2, X31
	007 Move X19, X3
	008 Call IntPtr.op_Equality, X0, X1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 NotImplemented "Instruction CSET not yet implemented."
	013 And W0, W8, W0
	014 Move X30, [X31+32]
	015 Return X0

Method: System.Boolean CheckInputBounds(System.Int32 inputIndex)

Disassembly:
	0x03C5F378 MOV X1, X20
	0x03C5F37C MOV W2, W19
	0x03C5F380 LDP X20, X19, [X31 + 0x20]
	0x03C5F384 LDP X22, X21, [X31 + 0x10]
	0x03C5F388 LDR X30, [X31], #0x30
	0x03C5F38C BR X3
	0x03C5F390 STP X30, X21, [X31 - 0x20]!
	0x03C5F394 STP X20, X19, [X31 + 0x10]
	0x03C5F398 ADRP X20, 0x787000
	0x03C5F39C ADRP X21, 0x4BD000
	0x03C5F3A0 LDRB W8, [X20 + 0x2D9]
	0x03C5F3A4 LDR X21, [X21 + 0x240]
	0x03C5F3A8 MOV X19, X0
	0x03C5F3AC TBNZ X8, 0x0, 0x3C5F3C4
	0x03C5F3B0 ADRP X0, 0x4BD000
	0x03C5F3B4 LDR X0, [X0 + 0x240]
	0x03C5F3B8 BL 0x1C16CF4
	0x03C5F3BC MOVZ W8, 0x1
	0x03C5F3C0 STRB W8, [X20 + 0x2D9]
	0x03C5F3C4 LDR X0, [X21]
	0x03C5F3C8 LDR W8, [X0 + 0xE0]
	0x03C5F3CC CBNZ W8, 0x3C5F3D4
	0x03C5F3D0 BL 0x1C16DFC
	0x03C5F3D4 ADRP X20, 0x787000
	0x03C5F3D8 LDR X1, [X20 + 0x2F8]
	0x03C5F3DC CBNZ X1, 0x3C5F3F4
	0x03C5F3E0 ADRP X0, 0xFFFFFFFFFCEB0000
	0x03C5F3E4 ADD X0, X0, 0x897

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x788000
	007 Move X22, 0x4BE000
	008 Move W8, [X21+645]
	009 Move X22, [X22+560]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4BE000
	017 Move X0, [X0+560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+645], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move W1, W19
	028 Move W2, W31
	029 Call PlayableHandle.CheckInputBounds, X0, X1, X2
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move W0, 1
	035 Move X30, [X31+48]
	036 Return X0

Method: System.Boolean CheckInputBounds(System.Int32 inputIndex, System.Boolean acceptAny)

Disassembly:
	0x03C5F60C FCMP S0, 0x0
	0x03C5F610 STR S0, [X31 + 0xC]
	0x03C5F614 B.MI 0x3C5F634
	0x03C5F618 FMOV S1, 1
	0x03C5F61C FCMP S0, S1
	0x03C5F620 B.GT 0x3C5F634
	0x03C5F624 LDP X20, X19, [X31 + 0x10]
	0x03C5F628 STR S0, [X0 + 0x8]
	0x03C5F62C LDR X30, [X31], #0x20
	0x03C5F630 RET
	0x03C5F634 ADD X0, X31, 0xC
	0x03C5F638 MOV X1, X31
	0x03C5F63C BL 0x338FE24
	0x03C5F640 MOV X19, X0
	0x03C5F644 ADRP X0, 0x501000
	0x03C5F648 LDR X0, [X0 + 0x8]
	0x03C5F64C BL 0x1C16D08
	0x03C5F650 MOV X20, X0
	0x03C5F654 ADRP X0, 0x500000
	0x03C5F658 LDR X0, [X0 + 0xFE8]
	0x03C5F65C BL 0x1C16D08
	0x03C5F660 MOV X2, X0
	0x03C5F664 MOV X0, X20
	0x03C5F668 MOV X1, X19
	0x03C5F66C MOV X3, X31
	0x03C5F670 BL 0x32274B8
	0x03C5F674 MOV X19, X0
	0x03C5F678 ADRP X0, 0x49C000
	0x03C5F67C LDR X0, [X0 + 0x760]
	0x03C5F680 BL 0x1C16D08
	0x03C5F684 BL 0x1C16F10
	0x03C5F688 MOV X1, X19
	0x03C5F68C MOV X2, X31
	0x03C5F690 MOV X20, X0
	0x03C5F694 BL 0x3316014
	0x03C5F698 ADRP X0, 0x501000
	0x03C5F69C LDR X0, [X0 + 0x10]
	0x03C5F6A0 BL 0x1C16D08
	0x03C5F6A4 MOV X1, X0
	0x03C5F6A8 MOV X0, X20
	0x03C5F6AC BL 0x1C16DEC
	0x03C5F6B0 SUB X31, X31, 0x60
	0x03C5F6B4 STR D12, [X31 + 0x10]
	0x03C5F6B8 STP D11, D10, [X31 + 0x18]
	0x03C5F6BC STP D9, D8, [X31 + 0x28]
	0x03C5F6C0 STR X30, [X31 + 0x38]
	0x03C5F6C4 STP X22, X21, [X31 + 0x40]
	0x03C5F6C8 STP X20, X19, [X31 + 0x50]
	0x03C5F6CC ADRP X19, 0x786000
	0x03C5F6D0 LDR X8, [X19 + 0xD68]
	0x03C5F6D4 MOV V10.16B, V4.16B
	0x03C5F6D8 MOV V8.16B, V3.16B
	0x03C5F6DC MOV V9.16B, V2.16B
	0x03C5F6E0 MOV V11.16B, V1.16B
	0x03C5F6E4 MOV V12.16B, V0.16B
	0x03C5F6E8 CBNZ X8, 0x3C5F700
	0x03C5F6EC ADRP X0, 0xFFFFFFFFFCE9E000
	0x03C5F6F0 ADD X0, X0, 0x71D
	0x03C5F6F4 BL 0x1C16CB8
	0x03C5F6F8 MOV X8, X0
	0x03C5F6FC STR X0, [X19 + 0xD68]
	0x03C5F700 BLR X8
	0x03C5F704 TBZ X0, 0x0, 0x3C5F744
	0x03C5F708 MOV V0.16B, V12.16B
	0x03C5F70C MOV X0, X31
	0x03C5F710 BL 0x3C25A10
	0x03C5F714 MOV V12.16B, V0.16B
	0x03C5F718 MOV V0.16B, V11.16B
	0x03C5F71C MOV X0, X31
	0x03C5F720 BL 0x3C25A10
	0x03C5F724 MOV V11.16B, V0.16B
	0x03C5F728 MOV V0.16B, V9.16B
	0x03C5F72C MOV X0, X31
	0x03C5F730 BL 0x3C25A10
	0x03C5F734 FMUL S9, S12, S10
	0x03C5F738 FMUL S11, S11, S10
	0x03C5F73C FMUL S0, S0, S10
	0x03C5F740 B 0x3C5F778
	0x03C5F744 FMUL S0, S12, S10
	0x03C5F748 MOV X0, X31
	0x03C5F74C FMUL S11, S11, S10
	0x03C5F750 FMUL S10, S9, S10
	0x03C5F754 BL 0x3C25A10
	0x03C5F758 MOV V9.16B, V0.16B
	0x03C5F75C MOV V0.16B, V11.16B
	0x03C5F760 MOV X0, X31
	0x03C5F764 BL 0x3C25A10
	0x03C5F768 MOV V11.16B, V0.16B
	0x03C5F76C MOV V0.16B, V10.16B
	0x03C5F770 MOV X0, X31
	0x03C5F774 BL 0x3C25A10
	0x03C5F778 FCMP S9, S11
	0x03C5F77C FCSEL S1, S9, S11, GT
	0x03C5F780 FCMP S1, S0
	0x03C5F784 FCSEL S5, S1, S0, GT
	0x03C5F788 FCMP S9, 0x0
	0x03C5F78C STP S9, S11, [X31]
	0x03C5F790 STP S0, S8, [X31 + 0x8]
	0x03C5F794 B.MI 0x3C5F804
	0x03C5F798 FCMP S11, 0x0
	0x03C5F79C B.MI 0x3C5F804
	0x03C5F7A0 FCMP S0, 0x0
	0x03C5F7A4 B.MI 0x3C5F804
	0x03C5F7A8 ADRP X8, 0xFFFFFFFFFCE8B000
	0x03C5F7AC LDR V2, [X8 + 0x148]
	0x03C5F7B0 FMOV S4, W31
	0x03C5F7B4 FMOV S1, W31
	0x03C5F7B8 FMOV S3, W31
	0x03C5F7BC FCMP S5, S2
	0x03C5F7C0 FMOV S2, W31
	0x03C5F7C4 B.LS 0x3C5F7E0
	0x03C5F7C8 FMOV S1, 1
	0x03C5F7CC FDIV S2, S1, S5
	0x03C5F7D0 FMUL S4, S9, S2
	0x03C5F7D4 FMUL S1, S11, S2
	0x03C5F7D8 FMUL S2, S0, S2
	0x03C5F7DC MOV V3.16B, V5.16B
	0x03C5F7E0 LDP X20, X19, [X31 + 0x50]
	0x03C5F7E4 LDP X22, X21, [X31 + 0x40]
	0x03C5F7E8 LDR X30, [X31 + 0x38]
	0x03C5F7EC LDP D9, D8, [X31 + 0x28]
	0x03C5F7F0 LDP D11, D10, [X31 + 0x18]
	0x03C5F7F4 LDR V12, [X31 + 0x10]
	0x03C5F7F8 MOV V0.16B, V4.16B
	0x03C5F7FC ADD X31, X31, 0x60
	0x03C5F800 RET
	0x03C5F804 ADRP X0, 0x494000
	0x03C5F808 LDR X0, [X0 + 0xAC8]
	0x03C5F80C ADD X8, X31, 0x0
	0x03C5F810 ORR X21, X8, 0x7

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x788000
	007 Move W8, [X22+646]
	008 Move W21, W2
	009 Move W20, W1
	010 Move X19, X0
	011 Move [X31+12], W1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4BE000
	017 Move X0, [X0+560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+646], W8
	021 Add W31, W20, 1
	022 Move [X31+8], W31
	023 Move TEMP, X21
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {41}
	027 Move TEMP, X20
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {48}
	031 Move X8, 0x4BE000
	032 Move X8, [X8+560]
	033 Move X0, [X8]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Call PlayableHandle.GetInputCount, X0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move W0, 1
	046 Move X30, [X31+48]
	047 Return X0
	048 Move X0, 0x49F000
	049 Move X0, [X0+3960]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X19, X0
	053 Move X0, 0x501000
	054 Move X0, [X0+4024]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Move X2, X31
	059 Call IndexOutOfRangeException..ctor, X0, X1
	060 Move X0, 0x501000
	061 Move X0, [X0+4032]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Call 0x1C17DEC
	066 Move X0, 0x495000
	067 Move X0, [X0+2760]
	068 Call 0x1C17D08
	069 Move W1, 5
	070 Call 0x1C17D6C
	071 Move X20, X0
	072 Call 0x19913C0
	073 Move X0, 0x501000
	074 Move X0, [X0+4040]
	075 Call 0x1C17D08
	076 Move X2, X0
	077 Move X0, X20
	078 Move X1, X31
	079 Call 0x1994444
	080 Add X0, X31, 12
	081 Move X1, X31
	082 Call Int32.ToString, X0
	083 Move X21, X0
	084 Move X0, X20
	085 Call 0x19913C0
	086 Move W1, 1
	087 Move X0, X20
	088 Move X2, X21
	089 Call 0x1994444
	090 Move X0, X20
	091 Call 0x19913C0
	092 Move X0, 0x501000
	093 Move X0, [X0+4048]
	094 Call 0x1C17D08
	095 Move X2, X0
	096 Move W1, 2
	097 Move X0, X20
	098 Call 0x1994444
	099 Move X0, 0x4BE000
	100 Move X0, [X0+560]
	101 Call 0x1C17D08
	102 Call 0x19913D0
	103 Move X0, X19
	104 Call PlayableHandle.GetInputCount, X0
	105 Move [X31+8], W0
	106 Add X0, X31, 8
	107 Move X1, X31
	108 Call Int32.ToString, X0
	109 Move X19, X0
	110 Move X0, X20
	111 Call 0x19913C0
	112 Move W1, 3
	113 Move X0, X20
	114 Move X2, X19
	115 Call 0x1994444
	116 Move X0, X20
	117 Call 0x19913C0
	118 Move X0, 0x4D5000
	119 Move X0, [X0+3928]
	120 Call 0x1C17D08
	121 Move X2, X0
	122 Move W1, 4
	123 Move X0, X20
	124 Call 0x1994444
	125 Move X0, X20
	126 Move X1, X31
	127 Call String.Concat, X0
	128 Move X19, X0
	129 Move X0, 0x49F000
	130 Move X0, [X0+3960]
	131 Call 0x1C17D08
	132 Call 0x1C17F10
	133 Move X1, X19
	134 Move X2, X31
	135 Move X20, X0
	136 Call IndexOutOfRangeException..ctor, X0, X1
	137 Move X0, 0x501000
	138 Move X0, [X0+4032]
	139 Call 0x1C17D08
	140 Move X1, X0
	141 Move X0, X20
	142 Call 0x1C17DEC

Method: System.Boolean IsValid()

Disassembly:
	0x03C5F888 MOVZ W1, 0x2
	0x03C5F88C MOV X0, X19
	0x03C5F890 BL 0x1993444
	0x03C5F894 MOV X0, X21
	0x03C5F898 MOV X1, X31
	0x03C5F89C BL 0x338FE24
	0x03C5F8A0 MOV X21, X0
	0x03C5F8A4 MOV X0, X19
	0x03C5F8A8 BL 0x19903C0
	0x03C5F8AC MOVZ W1, 0x3
	0x03C5F8B0 MOV X0, X19
	0x03C5F8B4 MOV X2, X21
	0x03C5F8B8 BL 0x1993444
	0x03C5F8BC MOV X0, X19
	0x03C5F8C0 BL 0x19903C0
	0x03C5F8C4 ADRP X0, 0x501000
	0x03C5F8C8 LDR X0, [X0 + 0x28]
	0x03C5F8CC BL 0x1C16D08
	0x03C5F8D0 MOV X2, X0
	0x03C5F8D4 MOVZ W1, 0x4
	0x03C5F8D8 MOV X0, X19
	0x03C5F8DC BL 0x1993444
	0x03C5F8E0 MOV X0, X20
	0x03C5F8E4 MOV X1, X31
	0x03C5F8E8 BL 0x338FE24
	0x03C5F8EC MOV X20, X0
	0x03C5F8F0 MOV X0, X19
	0x03C5F8F4 BL 0x19903C0
	0x03C5F8F8 MOVZ W1, 0x5

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x788000
	006 Move X21, 0x4BE000
	007 Move W8, [X20+647]
	008 Move X21, [X21+560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4BE000
	015 Move X0, [X0+560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+647], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, 0x788000
	025 Move X1, [X20+656]
	026 Compare X1, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -51683328
	029 Add X0, X0, 3757
	030 Call 0x1C17CB8
	031 Move X1, X0
	032 Move [X20+656], X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X1

Method: System.Type GetPlayableType()

Disassembly:
	0x03C5F938 MOV X19, X0
	0x03C5F93C ADRP X0, 0x49C000
	0x03C5F940 LDR X0, [X0 + 0x760]
	0x03C5F944 BL 0x1C16D08
	0x03C5F948 BL 0x1C16F10
	0x03C5F94C MOV X1, X19
	0x03C5F950 MOV X2, X31
	0x03C5F954 MOV X20, X0
	0x03C5F958 BL 0x3316014
	0x03C5F95C ADRP X0, 0x501000
	0x03C5F960 LDR X0, [X0 + 0x30]
	0x03C5F964 BL 0x1C16D08
	0x03C5F968 MOV X1, X0
	0x03C5F96C MOV X0, X20
	0x03C5F970 BL 0x1C16DEC
	0x03C5F974 FMOV S0, W31
	0x03C5F978 FMOV S1, W31
	0x03C5F97C FMOV S2, W31
	0x03C5F980 FMOV S3, W31
	0x03C5F984 RET
	0x03C5F988 MOVZ X0, 0x3F800000
	0x03C5F98C ORR X1, X31, 0x3F8000003F800000
	0x03C5F990 RET
	0x03C5F994 LDR W8, [X1]
	0x03C5F998 STR W8, [X0]
	0x03C5F99C LDR W8, [X2]
	0x03C5F9A0 STR W8, [X0 + 0x4]
	0x03C5F9A4 LDR V0, [X2 + 0x4]
	0x03C5F9A8 STR S0, [X0 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x788000
	006 Move X21, 0x4BE000
	007 Move W8, [X20+648]
	008 Move X21, [X21+560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4BE000
	015 Move X0, [X0+560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+648], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, 0x788000
	025 Move X1, [X20+664]
	026 Compare X1, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -51654656
	029 Add X0, X0, 284
	030 Call 0x1C17CB8
	031 Move X1, X0
	032 Move [X20+664], X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X1

Method: System.Type GetJobType()

Disassembly:
	0x03C5F9E8 STRB W31, [X0 + 0x5C]
	0x03C5F9EC STR S0, [X0 + 0x54]
	0x03C5F9F0 LDRB W8, [X1 + 0x5]
	0x03C5F9F4 STRB W8, [X0 + 0x5D]
	0x03C5F9F8 LDRB W8, [X1 + 0x4]
	0x03C5F9FC STRB W9, [X0 + 0x5F]
	0x03C5FA00 STRB W8, [X0 + 0x5E]
	0x03C5FA04 RET
	0x03C5FA08 LDR W8, [X1]
	0x03C5FA0C STR W8, [X0]
	0x03C5FA10 LDR W8, [X2]
	0x03C5FA14 STR W8, [X0 + 0x4]
	0x03C5FA18 LDR V0, [X2 + 0x4]
	0x03C5FA1C STR S0, [X0 + 0x8]
	0x03C5FA20 LDUR V0, [X1 + 0x24]
	0x03C5FA24 STUR V0, [X0 + 0xC]
	0x03C5FA28 LDUR V0, [X1 + 0x34]
	0x03C5FA2C STUR V0, [X0 + 0x1C]
	0x03C5FA30 LDUR V0, [X1 + 0x14]
	0x03C5FA34 STUR V0, [X0 + 0x2C]
	0x03C5FA38 LDR W8, [X1 + 0x10]
	0x03C5FA3C LDR X9, [X1 + 0x8]
	0x03C5FA40 STR W8, [X0 + 0x44]
	0x03C5FA44 STUR X9, [X0 + 0x3C]
	0x03C5FA48 LDR V0, [X1 + 0x44]
	0x03C5FA4C STP W31, W31, [X0 + 0x4C]
	0x03C5FA50 MOVZ W8, 0x1
	0x03C5FA54 STR S0, [X0 + 0x48]
	0x03C5FA58 LDR V0, [X1 + 0x48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x788000
	006 Move X21, 0x4BE000
	007 Move W8, [X20+649]
	008 Move X21, [X21+560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4BE000
	015 Move X0, [X0+560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+649], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, 0x788000
	025 Move X1, [X20+672]
	026 Compare X1, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -51646464
	029 Add X0, X0, 1232
	030 Call 0x1C17CB8
	031 Move X1, X0
	032 Move [X20+672], X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X1

Method: UnityEngine.Playables.PlayableGraph GetGraph()

Disassembly:
	0x03C5FA98 STR S0, [X0 + 0x8]
	0x03C5FA9C LDUR V0, [X1 + 0x24]
	0x03C5FAA0 STUR V0, [X0 + 0xC]
	0x03C5FAA4 LDUR V0, [X1 + 0x34]
	0x03C5FAA8 STUR V0, [X0 + 0x1C]
	0x03C5FAAC LDUR V0, [X1 + 0x14]
	0x03C5FAB0 STUR V0, [X0 + 0x2C]
	0x03C5FAB4 LDR W8, [X1 + 0x10]
	0x03C5FAB8 LDR X9, [X1 + 0x8]
	0x03C5FABC STR W8, [X0 + 0x44]
	0x03C5FAC0 STUR X9, [X0 + 0x3C]
	0x03C5FAC4 LDUR V0, [X1 + 0x44]
	0x03C5FAC8 MOVZ W8, 0x2
	0x03C5FACC UNIMPLEMENTED
	0x03C5FAD0 UNIMPLEMENTED
	0x03C5FAD4 STUR V0, [X0 + 0x48]
	0x03C5FAD8 LDR V0, [X1 + 0x55]
	0x03C5FADC STRB W8, [X0 + 0x5C]
	0x03C5FAE0 UCVTF S0, S0
	0x03C5FAE4 STR S0, [X0 + 0x58]
	0x03C5FAE8 LDRB W8, [X1 + 0x5]
	0x03C5FAEC STRB W8, [X0 + 0x5D]
	0x03C5FAF0 LDRB W8, [X1 + 0x4]
	0x03C5FAF4 STRB W8, [X0 + 0x5E]
	0x03C5FAF8 LDRB W8, [X1 + 0x54]
	0x03C5FAFC STRB W8, [X0 + 0x5F]
	0x03C5FB00 RET
	0x03C5FB04 LDR W8, [X1]
	0x03C5FB08 STR W8, [X0]
	0x03C5FB0C LDR W8, [X2]
	0x03C5FB10 STR W8, [X0 + 0x4]
	0x03C5FB14 LDR V0, [X2 + 0x4]
	0x03C5FB18 STR S0, [X0 + 0x8]
	0x03C5FB1C LDUR V0, [X1 + 0x24]
	0x03C5FB20 STUR V0, [X0 + 0xC]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x788000
	007 Move X20, 0x4BE000
	008 Move W8, [X21+650]
	009 Move X20, [X20+560]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4BE000
	016 Move X0, [X0+560]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+650], W8
	020 Move X0, [X20]
	021 Move [X31], X31
	022 Move [X31+8], X31
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0x788000
	028 Move X8, [X20+680]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51601408
	032 Add X0, X0, 3506
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X20+680], X0
	036 Add X1, X31, 0
	037 Move X0, X19
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X0, [X31]
	040 Move X1, [X31+8]
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move X21, [X31+24]
	045 Add X31, X31, 48
	046 Return X0

Method: System.Int32 GetInputCount()

Disassembly:
	0x03C5F814 ADD X20, X8, 0x8
	0x03C5F818 BL 0x1C16D08
	0x03C5F81C MOVZ W1, 0x7
	0x03C5F820 BL 0x1C16D6C
	0x03C5F824 MOV X19, X0
	0x03C5F828 BL 0x19903C0
	0x03C5F82C ADRP X0, 0x501000
	0x03C5F830 LDR X0, [X0 + 0x18]
	0x03C5F834 BL 0x1C16D08
	0x03C5F838 MOV X2, X0
	0x03C5F83C MOV X0, X19
	0x03C5F840 MOV X1, X31
	0x03C5F844 BL 0x1993444
	0x03C5F848 ADD X0, X31, 0x0
	0x03C5F84C MOV X1, X31
	0x03C5F850 BL 0x338FE24
	0x03C5F854 MOV X22, X0
	0x03C5F858 MOV X0, X19
	0x03C5F85C BL 0x19903C0
	0x03C5F860 MOVZ W1, 0x1
	0x03C5F864 MOV X0, X19
	0x03C5F868 MOV X2, X22
	0x03C5F86C BL 0x1993444
	0x03C5F870 MOV X0, X19
	0x03C5F874 BL 0x19903C0
	0x03C5F878 ADRP X0, 0x501000
	0x03C5F87C LDR X0, [X0 + 0x20]
	0x03C5F880 BL 0x1C16D08
	0x03C5F884 MOV X2, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x788000
	006 Move X21, 0x4BE000
	007 Move W8, [X20+651]
	008 Move X21, [X21+560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4BE000
	015 Move X0, [X0+560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+651], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, 0x788000
	025 Move X1, [X20+688]
	026 Compare X1, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -51785728
	029 Add X0, X0, 1996
	030 Call 0x1C17CB8
	031 Move X1, X0
	032 Move [X20+688], X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X1

Method: System.Void SetInputCount(System.Int32 value)

Disassembly:
	0x03C5FBA4 LDUR V0, [X1 + 0x14]
	0x03C5FBA8 STUR V0, [X0 + 0x2C]
	0x03C5FBAC LDR W8, [X1 + 0x10]
	0x03C5FBB0 LDR X9, [X1 + 0x8]
	0x03C5FBB4 STR W8, [X0 + 0x44]
	0x03C5FBB8 STUR X9, [X0 + 0x3C]
	0x03C5FBBC LDR V0, [X1 + 0x44]
	0x03C5FBC0 STP W31, W31, [X0 + 0x4C]
	0x03C5FBC4 MOVZ W8, 0x4
	0x03C5FBC8 STR S0, [X0 + 0x48]
	0x03C5FBCC LDR V0, [X1 + 0x48]
	0x03C5FBD0 STR W31, [X0 + 0x58]
	0x03C5FBD4 STRB W8, [X0 + 0x5C]
	0x03C5FBD8 STR S0, [X0 + 0x54]
	0x03C5FBDC LDRB W8, [X1 + 0x5]
	0x03C5FBE0 STRB W8, [X0 + 0x5D]
	0x03C5FBE4 LDRB W8, [X1 + 0x4]
	0x03C5FBE8 STRB W8, [X0 + 0x5E]
	0x03C5FBEC LDRB W8, [X1 + 0x4C]
	0x03C5FBF0 STRB W8, [X0 + 0x5F]
	0x03C5FBF4 RET
	0x03C5FBF8 LDR W8, [X1]
	0x03C5FBFC MOVZ X9, 0x3F800000
	0x03C5FC00 STUR X9, [X0 + 0x4]
	0x03C5FC04 MOVZ W9, 0x3F800000
	0x03C5FC08 STR W8, [X0]
	0x03C5FC0C LDUR V0, [X1 + 0x24]
	0x03C5FC10 ADRP X8, 0xFFFFFFFFFCE8F000
	0x03C5FC14 STUR V0, [X0 + 0xC]
	0x03C5FC18 LDUR V0, [X1 + 0x34]
	0x03C5FC1C STUR V0, [X0 + 0x1C]
	0x03C5FC20 LDUR V0, [X1 + 0x14]
	0x03C5FC24 STUR V0, [X0 + 0x2C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x788000
	007 Move X22, 0x4BE000
	008 Move W8, [X21+652]
	009 Move X22, [X22+560]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4BE000
	017 Move X0, [X0+560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+652], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X21, 0x788000
	027 Move X2, [X21+696]
	028 Compare X2, 0
	029 JumpIfNotEqual {35}
	030 Move X0, -51666944
	031 Add X0, X0, 4011
	032 Call 0x1C17CB8
	033 Move X2, X0
	034 Move [X21+696], X0
	035 Move X0, X20
	036 Move W1, W19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 CallNoReturn X2

Method: System.IntPtr GetJobData()

Disassembly:
	0x03C5FC6C RET
	0x03C5FC70 LDR W8, [X1]
	0x03C5FC74 MOVZ X9, 0x3F800000
	0x03C5FC78 STUR X9, [X0 + 0x4]
	0x03C5FC7C STR W8, [X0]
	0x03C5FC80 LDUR V0, [X1 + 0x24]
	0x03C5FC84 STUR V0, [X0 + 0xC]
	0x03C5FC88 LDUR V0, [X1 + 0x34]
	0x03C5FC8C STUR V0, [X0 + 0x1C]
	0x03C5FC90 LDUR V0, [X1 + 0x14]
	0x03C5FC94 STUR V0, [X0 + 0x2C]
	0x03C5FC98 LDR W8, [X1 + 0x10]
	0x03C5FC9C LDR X9, [X1 + 0x8]
	0x03C5FCA0 STR W8, [X0 + 0x44]
	0x03C5FCA4 STUR X9, [X0 + 0x3C]
	0x03C5FCA8 LDR V0, [X1 + 0x44]
	0x03C5FCAC STP W31, W31, [X0 + 0x4C]
	0x03C5FCB0 MOVZ W8, 0x1
	0x03C5FCB4 STR S0, [X0 + 0x48]
	0x03C5FCB8 LDR V0, [X1 + 0x48]
	0x03C5FCBC STR W31, [X0 + 0x58]
	0x03C5FCC0 STRB W8, [X0 + 0x5C]
	0x03C5FCC4 STR S0, [X0 + 0x54]
	0x03C5FCC8 LDRB W8, [X1 + 0x5]
	0x03C5FCCC STRB W8, [X0 + 0x5D]
	0x03C5FCD0 LDRB W8, [X1 + 0x4]
	0x03C5FCD4 STRB W8, [X0 + 0x5E]
	0x03C5FCD8 LDRB W8, [X1 + 0x4C]
	0x03C5FCDC STRB W8, [X0 + 0x5F]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x788000
	006 Move X21, 0x4BE000
	007 Move W8, [X20+653]
	008 Move X21, [X21+560]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4BE000
	015 Move X0, [X0+560]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+653], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, 0x788000
	025 Move X1, [X20+704]
	026 Compare X1, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -51675136
	029 Add X0, X0, 4052
	030 Call 0x1C17CB8
	031 Move X1, X0
	032 Move [X20+704], X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X1

Method: System.Void SetInputWeightFromIndex(System.Int32 index, System.Single weight)

Disassembly:
	0x03C5F3E8 BL 0x1C16CB8
	0x03C5F3EC MOV X1, X0
	0x03C5F3F0 STR X0, [X20 + 0x2F8]
	0x03C5F3F4 MOV X0, X19
	0x03C5F3F8 LDP X20, X19, [X31 + 0x10]
	0x03C5F3FC LDP X30, X21, [X31], #0x20
	0x03C5F400 BR X1
	0x03C5F404 STR X30, [X31 - 0x20]!
	0x03C5F408 STP X20, X19, [X31 + 0x10]
	0x03C5F40C ADRP X20, 0x787000
	0x03C5F410 LDR X1, [X20 + 0x2F8]
	0x03C5F414 MOV X19, X0
	0x03C5F418 CBNZ X1, 0x3C5F430
	0x03C5F41C ADRP X0, 0xFFFFFFFFFCEB0000
	0x03C5F420 ADD X0, X0, 0x897
	0x03C5F424 BL 0x1C16CB8
	0x03C5F428 MOV X1, X0
	0x03C5F42C STR X0, [X20 + 0x2F8]
	0x03C5F430 MOV X0, X19
	0x03C5F434 LDP X20, X19, [X31 + 0x10]
	0x03C5F438 LDR X30, [X31], #0x20
	0x03C5F43C BR X1
	0x03C5F440 STR X30, [X31 - 0x20]!
	0x03C5F444 STP X20, X19, [X31 + 0x10]
	0x03C5F448 ADRP X19, 0x787000
	0x03C5F44C ADRP X20, 0x4BD000
	0x03C5F450 LDRB W8, [X19 + 0x2DA]
	0x03C5F454 LDR X20, [X20 + 0x240]
	0x03C5F458 TBNZ X8, 0x0, 0x3C5F470
	0x03C5F45C ADRP X0, 0x4BD000
	0x03C5F460 LDR X0, [X0 + 0x240]
	0x03C5F464 BL 0x1C16CF4
	0x03C5F468 MOVZ W8, 0x1
	0x03C5F46C STRB W8, [X19 + 0x2DA]
	0x03C5F470 LDR X8, [X20]
	0x03C5F474 LDP X20, X19, [X31 + 0x10]
	0x03C5F478 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x788000
	008 Move X22, 0x4BE000
	009 Move W8, [X21+654]
	010 Move X22, [X22+560]
	011 Move V8, V0
	012 Move W19, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x4BE000
	019 Move X0, [X0+560]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+654], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X21, 0x788000
	029 Move X2, [X21+712]
	030 Compare X2, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51752960
	033 Add X0, X0, 1498
	034 Call 0x1C17CB8
	035 Move X2, X0
	036 Move [X21+712], X0
	037 Move X0, X20
	038 Move W1, W19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+8]
	044 Move V0, V8
	045 Move V8, [X31+48]
	046 CallNoReturn X2

Method: System.Void .cctor()

Disassembly:
	0x03C5FD70 MOV V11.16B, V3.16B
	0x03C5FD74 BL 0x3C168EC
	0x03C5FD78 MOV X0, X19
	0x03C5FD7C MOV X1, X31
	0x03C5FD80 MOV V12.16B, V0.16B
	0x03C5FD84 BL 0x3C16974
	0x03C5FD88 FMUL S4, S12, S0
	0x03C5FD8C MOV V0.16B, V8.16B
	0x03C5FD90 MOV V1.16B, V9.16B
	0x03C5FD94 MOV V2.16B, V10.16B
	0x03C5FD98 MOV V3.16B, V11.16B
	0x03C5FD9C LDP X30, X19, [X31 + 0x30]
	0x03C5FDA0 LDP D9, D8, [X31 + 0x20]
	0x03C5FDA4 LDP D11, D10, [X31 + 0x10]
	0x03C5FDA8 MOV X0, X31
	0x03C5FDAC LDR V12, [X31], #0x40
	0x03C5FDB0 B 0x3C5F6B0
	0x03C5FDB4 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x788000
	005 Move X20, 0x4BE000
	006 Move W8, [X19+655]
	007 Move X20, [X20+560]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4BE000
	013 Move X0, [X0+560]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+655], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move [X8], X31
	022 Move [X8+8], X31
	023 Move X30, [X31+32]
	024 Return 

Method: System.Boolean IsValid_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)

Disassembly:
	0x03C5F8FC MOV X0, X19
	0x03C5F900 MOV X2, X20
	0x03C5F904 BL 0x1993444
	0x03C5F908 MOV X0, X19
	0x03C5F90C BL 0x19903C0
	0x03C5F910 ADRP X0, 0x4D4000
	0x03C5F914 LDR X0, [X0 + 0xF58]
	0x03C5F918 BL 0x1C16D08
	0x03C5F91C MOV X2, X0
	0x03C5F920 MOVZ W1, 0x6
	0x03C5F924 MOV X0, X19
	0x03C5F928 BL 0x1993444
	0x03C5F92C MOV X0, X19
	0x03C5F930 MOV X1, X31
	0x03C5F934 BL 0x32278CC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x788000
	005 Move X1, [X20+656]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51683328
	010 Add X0, X0, 3757
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+656], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Type GetPlayableType_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)

Disassembly:
	0x03C5F9AC LDUR V0, [X1 + 0x24]
	0x03C5F9B0 STUR V0, [X0 + 0xC]
	0x03C5F9B4 LDUR V0, [X1 + 0x34]
	0x03C5F9B8 STUR V0, [X0 + 0x1C]
	0x03C5F9BC LDUR V0, [X1 + 0x14]
	0x03C5F9C0 STUR V0, [X0 + 0x2C]
	0x03C5F9C4 LDR X8, [X1 + 0x8]
	0x03C5F9C8 LDR W9, [X1 + 0x10]
	0x03C5F9CC STUR X8, [X0 + 0x3C]
	0x03C5F9D0 STP W9, W31, [X0 + 0x44]
	0x03C5F9D4 LDR V0, [X2 + 0x8]
	0x03C5F9D8 MOVZ W9, 0x4
	0x03C5F9DC STUR D0, [X0 + 0x4C]
	0x03C5F9E0 LDR V0, [X1 + 0x44]
	0x03C5F9E4 STR W31, [X0 + 0x58]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x788000
	005 Move X1, [X20+664]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51654656
	010 Add X0, X0, 284
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+664], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Type GetJobType_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)

Disassembly:
	0x03C5FA5C STR W31, [X0 + 0x58]
	0x03C5FA60 STRB W8, [X0 + 0x5C]
	0x03C5FA64 STR S0, [X0 + 0x54]
	0x03C5FA68 LDRB W8, [X1 + 0x5]
	0x03C5FA6C STRB W8, [X0 + 0x5D]
	0x03C5FA70 LDRB W8, [X1 + 0x4]
	0x03C5FA74 STRB W8, [X0 + 0x5E]
	0x03C5FA78 LDRB W8, [X1 + 0x4C]
	0x03C5FA7C STRB W8, [X0 + 0x5F]
	0x03C5FA80 RET
	0x03C5FA84 LDR W8, [X1]
	0x03C5FA88 STR W8, [X0]
	0x03C5FA8C LDR W8, [X2]
	0x03C5FA90 STR W8, [X0 + 0x4]
	0x03C5FA94 LDR V0, [X2 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x788000
	005 Move X1, [X20+672]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51646464
	010 Add X0, X0, 1232
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+672], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void GetGraph_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, out UnityEngine.Playables.PlayableGraph ret)

Disassembly:
	0x03C5FB24 LDUR V0, [X1 + 0x34]
	0x03C5FB28 STUR V0, [X0 + 0x1C]
	0x03C5FB2C LDUR V0, [X1 + 0x14]
	0x03C5FB30 STUR V0, [X0 + 0x2C]
	0x03C5FB34 LDR W8, [X1 + 0x10]
	0x03C5FB38 LDR X9, [X1 + 0x8]
	0x03C5FB3C STR W8, [X0 + 0x44]
	0x03C5FB40 STUR X9, [X0 + 0x3C]
	0x03C5FB44 LDR V0, [X1 + 0x44]
	0x03C5FB48 STP W31, W31, [X0 + 0x4C]
	0x03C5FB4C MOVZ W8, 0x3
	0x03C5FB50 STR S0, [X0 + 0x48]
	0x03C5FB54 LDR V0, [X1 + 0x48]
	0x03C5FB58 STRB W8, [X0 + 0x5C]
	0x03C5FB5C STUR D0, [X0 + 0x54]
	0x03C5FB60 LDRB W8, [X1 + 0x5]
	0x03C5FB64 STRB W8, [X0 + 0x5D]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x788000
	006 Move X2, [X21+680]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51601408
	012 Add X0, X0, 3506
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+680], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 GetInputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)

Disassembly:
	0x03C5FB68 LDRB W8, [X1 + 0x4]
	0x03C5FB6C STRB W8, [X0 + 0x5E]
	0x03C5FB70 LDRB W8, [X1 + 0x50]
	0x03C5FB74 STRB W8, [X0 + 0x5F]
	0x03C5FB78 RET
	0x03C5FB7C LDR W8, [X1]
	0x03C5FB80 STR W8, [X0]
	0x03C5FB84 LDR W8, [X2]
	0x03C5FB88 STR W8, [X0 + 0x4]
	0x03C5FB8C LDR V0, [X2 + 0x4]
	0x03C5FB90 STR S0, [X0 + 0x8]
	0x03C5FB94 LDUR V0, [X1 + 0x24]
	0x03C5FB98 STUR V0, [X0 + 0xC]
	0x03C5FB9C LDUR V0, [X1 + 0x34]
	0x03C5FBA0 STUR V0, [X0 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x788000
	005 Move X1, [X20+688]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51785728
	010 Add X0, X0, 1996
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+688], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetInputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 value)

Disassembly:
	0x03C5FC28 LDR V0, [X8]
	0x03C5FC2C LDR W8, [X1 + 0x10]
	0x03C5FC30 LDR X10, [X1 + 0x8]
	0x03C5FC34 STR W9, [X0 + 0x50]
	0x03C5FC38 STR D0, [X0 + 0x48]
	0x03C5FC3C STR W8, [X0 + 0x44]
	0x03C5FC40 STUR X10, [X0 + 0x3C]
	0x03C5FC44 LDR V0, [X1 + 0x44]
	0x03C5FC48 STR W31, [X0 + 0x58]
	0x03C5FC4C STRB W31, [X0 + 0x5C]
	0x03C5FC50 MOVZ W9, 0x4
	0x03C5FC54 STR S0, [X0 + 0x54]
	0x03C5FC58 LDRB W8, [X1 + 0x5]
	0x03C5FC5C STRB W8, [X0 + 0x5D]
	0x03C5FC60 LDRB W8, [X1 + 0x4]
	0x03C5FC64 STRB W9, [X0 + 0x5F]
	0x03C5FC68 STRB W8, [X0 + 0x5E]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x788000
	006 Move X2, [X21+696]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51666944
	012 Add X0, X0, 4011
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+696], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr GetJobData_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)

Disassembly:
	0x03C5FCE0 RET
	0x03C5FCE4 SUB X31, X31, 0x20
	0x03C5FCE8 STR X30, [X31 + 0x10]
	0x03C5FCEC ADRP X8, 0xFFFFFFFFFCE8C000
	0x03C5FCF0 LDR V0, [X8 + 0xD5]
	0x03C5FCF4 ADD X2, X31, 0x0
	0x03C5FCF8 STR V0, [X31]
	0x03C5FCFC BL 0x3C5FA84
	0x03C5FD00 LDR X30, [X31 + 0x10]
	0x03C5FD04 ADD X31, X31, 0x20
	0x03C5FD08 RET
	0x03C5FD0C MOVZ W8, 0x3
	0x03C5FD10 STR W1, [X0]
	0x03C5FD14 STRB W8, [X0 + 0x5D]
	0x03C5FD18 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x788000
	005 Move X1, [X20+704]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51675136
	010 Add X0, X0, 4052
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+704], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetInputWeightFromIndex_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 index, System.Single weight)

Disassembly:
	0x03C5FD1C CMP W0, 0x4
	0x03C5FD20 B.NE 0x3C5FD2C
	0x03C5FD24 MOV W0, W31
	0x03C5FD28 RET
	0x03C5FD2C CMP W0, 0x1
	0x03C5FD30 MOVZ W8, 0x1
	0x03C5FD34 CINC W0, W8, NE
	0x03C5FD38 RET
	0x03C5FD3C STR D12, [X31 - 0x40]!
	0x03C5FD40 STP D11, D10, [X31 + 0x10]
	0x03C5FD44 STP D9, D8, [X31 + 0x20]
	0x03C5FD48 STP X30, X19, [X31 + 0x30]
	0x03C5FD4C CBZ X0, 0x3C5FDB4
	0x03C5FD50 MOV X1, X31
	0x03C5FD54 MOV X19, X0
	0x03C5FD58 BL 0x3C16740
	0x03C5FD5C MOV X0, X19
	0x03C5FD60 MOV X1, X31
	0x03C5FD64 MOV V8.16B, V0.16B
	0x03C5FD68 MOV V9.16B, V1.16B
	0x03C5FD6C MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x788000
	007 Move X2, [X21+712]
	008 Move V8, V0
	009 Move W19, W1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51752960
	014 Add X0, X0, 1498
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+712], X0
	018 Move X0, X20
	019 Move W1, W19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

