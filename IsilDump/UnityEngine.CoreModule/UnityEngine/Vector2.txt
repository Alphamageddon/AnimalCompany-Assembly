Type: UnityEngine.Vector2

Method: System.Single get_Item(System.Int32 index)

Disassembly:
	0x03C2D540 MOV X23, X0
	0x03C2D544 CBZ X0, 0x3C2D55C
	0x03C2D548 LDR X8, [X22]
	0x03C2D54C MOV X0, X23
	0x03C2D550 LDR X1, [X8 + 0x40]
	0x03C2D554 BL 0x1C16E00
	0x03C2D558 CBZ X0, 0x3C2D5E4
	0x03C2D55C LDR W8, [X22 + 0x18]
	0x03C2D560 CBZ W8, 0x3C2D5DC
	0x03C2D564 STR X23, [X22 + 0x20]
	0x03C2D568 LDR W8, [X20 + 0x4]
	0x03C2D56C ADD X0, X31, 0xC
	0x03C2D570 MOV X1, X19
	0x03C2D574 MOV X2, X21
	0x03C2D578 MOV X3, X31
	0x03C2D57C STR W8, [X31 + 0xC]
	0x03C2D580 BL 0x337B8BC
	0x03C2D584 MOV X19, X0
	0x03C2D588 CBZ X0, 0x3C2D5A0
	0x03C2D58C LDR X8, [X22]
	0x03C2D590 MOV X0, X19
	0x03C2D594 LDR X1, [X8 + 0x40]
	0x03C2D598 BL 0x1C16E00
	0x03C2D59C CBZ X0, 0x3C2D5E4
	0x03C2D5A0 LDR W8, [X22 + 0x18]
	0x03C2D5A4 CMP W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Compare W1, 0
	005 JumpIfEqual {25}
	006 Move X0, 0x4D1000
	007 Move X0, [X0+3960]
	008 Call 0x1C17D08
	009 Call 0x1C17F10
	010 Move X19, X0
	011 Move X0, 0x519000
	012 Move X0, [X0+4088]
	013 Call 0x1C17D08
	014 Move X1, X0
	015 Move X0, X19
	016 Move X2, X31
	017 Call IndexOutOfRangeException..ctor, X0, X1
	018 Move X0, 0x51A000
	019 Move X0, [X0]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Call 0x1C17DEC
	024 Add X0, X0, 4
	025 Move V0, [X0]
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return V0

Method: System.Void set_Item(System.Int32 index, System.Single value)

Disassembly:
	0x03C2D5A8 B.LS 0x3C2D5DC
	0x03C2D5AC ADRP X8, 0x4D3000
	0x03C2D5B0 LDR X8, [X8 + 0x198]
	0x03C2D5B4 STR X19, [X22 + 0x28]
	0x03C2D5B8 MOV X1, X22
	0x03C2D5BC MOV X2, X31
	0x03C2D5C0 LDR X0, [X8]
	0x03C2D5C4 BL 0x3C96574
	0x03C2D5C8 LDP X20, X19, [X31 + 0x30]
	0x03C2D5CC LDP X22, X21, [X31 + 0x20]
	0x03C2D5D0 LDP X30, X23, [X31 + 0x10]
	0x03C2D5D4 ADD X31, X31, 0x40
	0x03C2D5D8 RET
	0x03C2D5DC BL 0x1C16F28
	0x03C2D5E0 BL 0x1C16F20
	0x03C2D5E4 BL 0x1C16F44
	0x03C2D5E8 MOV X1, X31
	0x03C2D5EC BL 0x1C16DEC
	0x03C2D5F0 STR X30, [X31 - 0x20]!
	0x03C2D5F4 STP X20, X19, [X31 + 0x10]
	0x03C2D5F8 ADRP X19, 0x7B8000
	0x03C2D5FC ADRP X20, 0x4EE000
	0x03C2D600 LDRB W8, [X19 + 0x121]
	0x03C2D604 LDR X20, [X20 + 0x630]
	0x03C2D608 TBNZ X8, 0x0, 0x3C2D620
	0x03C2D60C ADRP X0, 0x4EE000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Compare W1, 0
	005 JumpIfEqual {25}
	006 Move X0, 0x4D1000
	007 Move X0, [X0+3960]
	008 Call 0x1C17D08
	009 Call 0x1C17F10
	010 Move X19, X0
	011 Move X0, 0x519000
	012 Move X0, [X0+4088]
	013 Call 0x1C17D08
	014 Move X1, X0
	015 Move X0, X19
	016 Move X2, X31
	017 Call IndexOutOfRangeException..ctor, X0, X1
	018 Move X0, 0x533000
	019 Move X0, [X0+680]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Call 0x1C17DEC
	024 Add X0, X0, 4
	025 Move [X0], S0
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 

Method: System.Void .ctor(System.Single x, System.Single y)

Disassembly:
	0x03C2D610 LDR X0, [X0 + 0x630]
	0x03C2D614 BL 0x1C16CF4

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Return 

Method: UnityEngine.Vector2 Lerp(UnityEngine.Vector2 a, UnityEngine.Vector2 b, System.Single t)

Disassembly:
	0x03C2D618 MOVZ W8, 0x1
	0x03C2D61C STRB W8, [X19 + 0x121]
	0x03C2D620 LDR X8, [X20]
	0x03C2D624 LDP X20, X19, [X31 + 0x10]
	0x03C2D628 LDR X8, [X8 + 0xB8]
	0x03C2D62C LDR X0, [X8]
	0x03C2D630 LDR X30, [X31], #0x20
	0x03C2D634 RET
	0x03C2D638 STR X30, [X31 - 0x20]!
	0x03C2D63C STP X20, X19, [X31 + 0x10]
	0x03C2D640 ADRP X19, 0x7B8000
	0x03C2D644 ADRP X20, 0x4EE000

ISIL:
	001 Move S5, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction FMIN not yet implemented."
	004 Move S5, W31
	005 Subtract S2, S2, S0
	006 Subtract S3, S3, S1
	007 NotImplemented "Instruction FCSEL not yet implemented."
	008 Multiply S2, S2, S4
	009 Multiply S3, S3, S4
	010 Add S0, S0, S2
	011 Add S1, S1, S3
	012 Return X0

Method: UnityEngine.Vector2 LerpUnclamped(UnityEngine.Vector2 a, UnityEngine.Vector2 b, System.Single t)

Disassembly:
	0x03C2D648 LDRB W8, [X19 + 0x122]
	0x03C2D64C LDR X20, [X20 + 0x630]
	0x03C2D650 TBNZ X8, 0x0, 0x3C2D668
	0x03C2D654 ADRP X0, 0x4EE000
	0x03C2D658 LDR X0, [X0 + 0x630]
	0x03C2D65C BL 0x1C16CF4
	0x03C2D660 MOVZ W8, 0x1

ISIL:
	001 Subtract S2, S2, S0
	002 Subtract S3, S3, S1
	003 Multiply S2, S2, S4
	004 Multiply S3, S3, S4
	005 Add S0, S0, S2
	006 Add S1, S1, S3
	007 Return X0

Method: UnityEngine.Vector2 Scale(UnityEngine.Vector2 a, UnityEngine.Vector2 b)

Disassembly:
	0x03C2D664 STRB W8, [X19 + 0x122]
	0x03C2D668 LDR X8, [X20]
	0x03C2D66C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Multiply S0, S0, S2
	002 Multiply S1, S1, S3
	003 Return X0

Method: System.Void Normalize()

Disassembly:
	0x03C2D670 LDR X8, [X8 + 0xB8]
	0x03C2D674 LDR X0, [X8 + 0x8]
	0x03C2D678 LDR X30, [X31], #0x20
	0x03C2D67C RET
	0x03C2D680 STR X30, [X31 - 0x20]!
	0x03C2D684 STP X20, X19, [X31 + 0x10]
	0x03C2D688 ADRP X20, 0x7B8000
	0x03C2D68C ADRP X19, 0x4EE000
	0x03C2D690 LDRB W8, [X20 + 0x123]
	0x03C2D694 LDR X19, [X19 + 0x630]
	0x03C2D698 TBNZ X8, 0x0, 0x3C2D6B0
	0x03C2D69C ADRP X0, 0x4EE000
	0x03C2D6A0 LDR X0, [X0 + 0x630]
	0x03C2D6A4 BL 0x1C16CF4
	0x03C2D6A8 MOVZ W8, 0x1
	0x03C2D6AC STRB W8, [X20 + 0x123]
	0x03C2D6B0 LDR X8, [X19]
	0x03C2D6B4 ORR X10, X31, 0x100000001
	0x03C2D6B8 LDR X8, [X8 + 0xB8]
	0x03C2D6BC STR X31, [X8]
	0x03C2D6C0 LDR X8, [X19]
	0x03C2D6C4 LDP X20, X19, [X31 + 0x10]
	0x03C2D6C8 LDR X9, [X8 + 0xB8]
	0x03C2D6CC STR X10, [X9 + 0x8]
	0x03C2D6D0 LDR X9, [X8 + 0xB8]
	0x03C2D6D4 MOVZ X10, 0x1
	0x03C2D6D8 STR X10, [X9 + 0x10]
	0x03C2D6DC LDR X9, [X8 + 0xB8]
	0x03C2D6E0 MOV X10, INVALID
	0x03C2D6E4 STR X10, [X9 + 0x18]
	0x03C2D6E8 LDR X9, [X8 + 0xB8]
	0x03C2D6EC MOVN W10, 0x0
	0x03C2D6F0 STR X10, [X9 + 0x20]
	0x03C2D6F4 LDR X8, [X8 + 0xB8]
	0x03C2D6F8 MOVZ W9, 0x1
	0x03C2D6FC STR X9, [X8 + 0x28]
	0x03C2D700 LDR X30, [X31], #0x20
	0x03C2D704 RET
	0x03C2D708 LDR W0, [X0]
	0x03C2D70C RET
	0x03C2D710 STR W1, [X0]
	0x03C2D714 RET
	0x03C2D718 LDR W0, [X0 + 0x4]
	0x03C2D71C RET
	0x03C2D720 STR W1, [X0 + 0x4]
	0x03C2D724 RET
	0x03C2D728 LDR W0, [X0 + 0x8]
	0x03C2D72C RET
	0x03C2D730 STR W1, [X0 + 0x8]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7AD000
	007 Move W8, [X20+2072]
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x4C7000
	012 Move X0, [X0+1448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2072], W8
	016 Move X8, 0x4C7000
	017 Move X8, [X8+1448]
	018 Move S9, [X19]
	019 Move S8, [X19+4]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X8, -51650560
	026 Move V1, [X8+380]
	027 Multiply S0, S9, S9
	028 Multiply S2, S8, S8
	029 Add S0, S0, S2
	030 NotImplemented "Instruction FSQRT not yet implemented."
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move V1, [X19]
	033 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	034 NotImplemented "Instruction INVALID not yet implemented."
	035 Move X20, 0x7AD000
	036 Move W8, [X20+1935]
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x4CF000
	040 Move X0, [X0+3848]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X20+1935], W8
	044 Move X8, 0x4CF000
	045 Move X8, [X8+3848]
	046 Move X8, [X8]
	047 Move X8, [X8+184]
	048 Move V0, [X8]
	049 Move [X19], D0
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X30, [X31+16]
	053 Move D9, [X31+48]
	054 Move D8, [X31+56]
	055 Return 

Method: UnityEngine.Vector2 get_normalized()

Disassembly:
	0x03C2D734 RET
	0x03C2D738 STP W1, W2, [X0]
	0x03C2D73C STR W3, [X0 + 0x8]
	0x03C2D740 RET
	0x03C2D744 UBFM X8, X0, 0x20, 0x3F
	0x03C2D748 UBFM X9, X2, 0x20, 0x3F
	0x03C2D74C CMP W0, W2
	0x03C2D750 CSEL X0, X0, X2, LT
	0x03C2D754 CMP W8, W9
	0x03C2D758 CSEL X8, X8, X9, LT
	0x03C2D75C CMP W1, W3
	0x03C2D760 CSEL X9, X1, X3, LT
	0x03C2D764 BFM X0, X8, 0x20, 0x1F
	0x03C2D768 AND X1, X9, 0x0
	0x03C2D76C RET
	0x03C2D770 UBFM X8, X0, 0x20, 0x3F
	0x03C2D774 UBFM X9, X2, 0x20, 0x3F
	0x03C2D778 CMP W0, W2
	0x03C2D77C CSEL X0, X0, X2, GT
	0x03C2D780 CMP W8, W9
	0x03C2D784 CSEL X8, X8, X9, GT
	0x03C2D788 CMP W1, W3
	0x03C2D78C CSEL X9, X1, X3, GT
	0x03C2D790 BFM X0, X8, 0x20, 0x1F
	0x03C2D794 AND X1, X9, 0x0
	0x03C2D798 RET
	0x03C2D79C UBFM X8, X0, 0x20, 0x3F
	0x03C2D7A0 SCVTF S0, W0
	0x03C2D7A4 SCVTF S1, W8
	0x03C2D7A8 SCVTF S2, W1
	0x03C2D7AC RET
	0x03C2D7B0 AND X8, X2, 0x0
	0x03C2D7B4 ADD X8, X8, X0
	0x03C2D7B8 ADD W9, W2, W0
	0x03C2D7BC AND X8, X8, 0x0
	0x03C2D7C0 ADD W1, W3, W1
	0x03C2D7C4 ORR X0, X8, X9, 0x0
	0x03C2D7C8 RET
	0x03C2D7CC AND X8, X2, 0x0
	0x03C2D7D0 SUB X8, X0, X8
	0x03C2D7D4 SUB W9, W0, W2
	0x03C2D7D8 AND X8, X8, 0x0
	0x03C2D7DC SUB W1, W1, W3
	0x03C2D7E0 ORR X0, X8, X9, 0x0

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move X19, 0x7AD000
	006 Move W8, [X19+2072]
	007 Move S9, [X0]
	008 Move S8, [X0+4]
	009 Compare W8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, 0x4C7000
	012 Move X0, [X0+1448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X19+2072], W8
	016 Move X8, 0x4C7000
	017 Move X8, [X8+1448]
	018 Move X0, [X8]
	019 Move W8, [X0+224]
	020 Compare W8, 0
	021 JumpIfNotEqual {23}
	022 Call 0x1C17DFC
	023 Move X8, -51650560
	024 Move V2, [X8+380]
	025 Multiply S0, S9, S9
	026 Multiply S1, S8, S8
	027 Add S0, S0, S1
	028 NotImplemented "Instruction FSQRT not yet implemented."
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 NotImplemented "Instruction FDIV not yet implemented."
	031 NotImplemented "Instruction FDIV not yet implemented."
	032 Move X19, 0x7AD000
	033 Move W8, [X19+1935]
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0x4CF000
	037 Move X0, [X0+3848]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X19+1935], W8
	041 Move X8, 0x4CF000
	042 Move X8, [X8+3848]
	043 Move X8, [X8]
	044 Move X8, [X8+184]
	045 Move S0, [X8]
	046 Move S1, [X8+4]
	047 Move X30, [X31+16]
	048 Move X19, [X31+24]
	049 Move D9, [X31+32]
	050 Move D8, [X31+40]
	051 Return X0

Method: System.String ToString()

Disassembly:
	0x03C2D7E4 RET
	0x03C2D7E8 UBFM X8, X0, 0x20, 0x3F
	0x03C2D7EC MUL W0, W0, W2
	0x03C2D7F0 MUL W8, W8, W2

ISIL:
	001 Move X1, X31
	002 Move X2, X31
	003 Move X3, X31
	004 Call 0x25F44C4
	005 Return X0

Method: System.String ToString(System.String format)

Disassembly:
	0x03C2D7F4 MUL W1, W1, W2
	0x03C2D7F8 BFM X0, X8, 0x20, 0x1F
	0x03C2D7FC RET

ISIL:
	001 Move X2, X31
	002 Move X3, X31
	003 Call 0x25F44C4
	004 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider formatProvider)

Disassembly:
	0x03C2D800 UBFM X8, X0, 0x20, 0x3F
	0x03C2D804 SDIV W0, W0, W2
	0x03C2D808 SDIV W8, W8, W2
	0x03C2D80C SDIV W1, W1, W2
	0x03C2D810 BFM X0, X8, 0x20, 0x1F
	0x03C2D814 RET
	0x03C2D818 CMP W0, W2
	0x03C2D81C B.NE 0x3C2D840
	0x03C2D820 UBFM X8, X2, 0x20, 0x3F
	0x03C2D824 UBFM X9, X0, 0x20, 0x3F
	0x03C2D828 CMP W9, W8
	0x03C2D82C CSET W8, EQ
	0x03C2D830 CMP W1, W3
	0x03C2D834 CSET W9, EQ
	0x03C2D838 AND W0, W9, W8, 0x0
	0x03C2D83C RET
	0x03C2D840 MOV W0, W31
	0x03C2D844 RET
	0x03C2D848 CMP W0, W2
	0x03C2D84C B.NE 0x3C2D870
	0x03C2D850 UBFM X8, X2, 0x20, 0x3F
	0x03C2D854 UBFM X9, X0, 0x20, 0x3F
	0x03C2D858 CMP W9, W8
	0x03C2D85C CSET W8, NE
	0x03C2D860 CMP W1, W3
	0x03C2D864 CSET W9, NE
	0x03C2D868 ORR W0, W9, W8, 0x0
	0x03C2D86C RET
	0x03C2D870 MOVZ W0, 0x1
	0x03C2D874 RET
	0x03C2D878 STP X30, X21, [X31 - 0x20]!
	0x03C2D87C STP X20, X19, [X31 + 0x10]
	0x03C2D880 ADRP X21, 0x7B8000
	0x03C2D884 LDRB W8, [X21 + 0x124]
	0x03C2D888 MOV X20, X1
	0x03C2D88C MOV X19, X0
	0x03C2D890 TBNZ X8, 0x0, 0x3C2D8A8
	0x03C2D894 ADRP X0, 0x4EE000
	0x03C2D898 LDR X0, [X0 + 0x638]
	0x03C2D89C BL 0x1C16CF4
	0x03C2D8A0 MOVZ W8, 0x1
	0x03C2D8A4 STRB W8, [X21 + 0x124]
	0x03C2D8A8 CBZ X20, 0x3C2D904
	0x03C2D8AC ADRP X8, 0x4EE000
	0x03C2D8B0 LDR X8, [X8 + 0x638]
	0x03C2D8B4 LDR X9, [X20]
	0x03C2D8B8 LDR X8, [X8]
	0x03C2D8BC CMP X9, X8
	0x03C2D8C0 B.NE 0x3C2D904
	0x03C2D8C4 MOV X0, X20
	0x03C2D8C8 BL 0x1C16E08
	0x03C2D8CC LDR X9, [X0]
	0x03C2D8D0 LDR X8, [X19]
	0x03C2D8D4 CMP W8, W9
	0x03C2D8D8 B.NE 0x3C2D904
	0x03C2D8DC LDR W10, [X0 + 0x8]
	0x03C2D8E0 LDR W11, [X19 + 0x8]
	0x03C2D8E4 UBFM X9, X9, 0x20, 0x3F
	0x03C2D8E8 UBFM X8, X8, 0x20, 0x3F
	0x03C2D8EC CMP W8, W9
	0x03C2D8F0 CSET W8, EQ
	0x03C2D8F4 CMP W11, W10
	0x03C2D8F8 CSET W9, EQ
	0x03C2D8FC AND W0, W8, W9, 0x0
	0x03C2D900 B 0x3C2D908
	0x03C2D904 MOV W0, W31
	0x03C2D908 LDP X20, X19, [X31 + 0x10]
	0x03C2D90C LDP X30, X21, [X31], #0x20
	0x03C2D910 RET
	0x03C2D914 LDR X8, [X0]
	0x03C2D918 CMP W8, W1
	0x03C2D91C B.NE 0x3C2D944
	0x03C2D920 LDR W9, [X0 + 0x8]
	0x03C2D924 UBFM X10, X1, 0x20, 0x3F
	0x03C2D928 UBFM X8, X8, 0x20, 0x3F
	0x03C2D92C CMP W8, W10
	0x03C2D930 CSET W8, EQ
	0x03C2D934 CMP W9, W2
	0x03C2D938 CSET W9, EQ
	0x03C2D93C AND W0, W8, W9, 0x0
	0x03C2D940 RET
	0x03C2D944 MOV W0, W31
	0x03C2D948 RET
	0x03C2D94C SUB X31, X31, 0x30
	0x03C2D950 STP X30, X21, [X31 + 0x10]
	0x03C2D954 STP X20, X19, [X31 + 0x20]
	0x03C2D958 LDR W8, [X0 + 0x4]
	0x03C2D95C MOV X19, X0
	0x03C2D960 ADD X0, X31, 0xC
	0x03C2D964 MOV X1, X31
	0x03C2D968 STR W8, [X31 + 0xC]
	0x03C2D96C BL 0x337B6D8
	0x03C2D970 LDR W8, [X19 + 0x8]
	0x03C2D974 MOV W20, W0
	0x03C2D978 ADD X0, X31, 0xC
	0x03C2D97C MOV X1, X31
	0x03C2D980 STR W8, [X31 + 0xC]
	0x03C2D984 BL 0x337B6D8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7B9000
	008 Move X22, 0x4CE000
	009 Move W8, [X23+272]
	010 Move X22, [X22+3704]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x4C9000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0x4C7000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0x4CE000
	025 Move X0, [X0+3704]
	026 Call 0x1C17CF4
	027 Move X0, 0x4D4000
	028 Move X0, [X0+408]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+272], W8
	032 Move X0, X21
	033 Move X1, X31
	034 Call String.IsNullOrEmpty, X0
	035 Move X8, [X22]
	036 And W31, W0, 1
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Compare X20, 0
	039 JumpIfNotEqual {56}
	040 Move X8, 0x4C9000
	041 Move X8, [X8+3144]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X31
	048 Call CultureInfo.get_InvariantCulture
	049 Compare X0, 0
	050 JumpIfEqual {113}
	051 Move X8, [X0]
	052 Move X9, [X8+536]
	053 Move X1, [X8+544]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X20, X0
	056 Move X8, 0x4C7000
	057 Move X8, [X8+2512]
	058 Move W1, 2
	059 Move X0, [X8]
	060 Call 0x1C17D6C
	061 Move X22, X0
	062 Move X0, X19
	063 Move X1, X21
	064 Move X2, X20
	065 Move X3, X31
	066 Call Single.ToString, X0, X1, X2
	067 Compare X22, 0
	068 JumpIfEqual {113}
	069 Move X23, X0
	070 Compare X0, 0
	071 JumpIfEqual {78}
	072 Move X8, [X22]
	073 Move X0, X23
	074 Move X1, [X8+64]
	075 Call 0x1C17E00
	076 Compare X0, 0
	077 JumpIfEqual {114}
	078 Move W8, [X22+24]
	079 Compare W8, 0
	080 JumpIfEqual {112}
	081 Add X0, X19, 4
	082 Move X1, X21
	083 Move X2, X20
	084 Move X3, X31
	085 Move [X22+32], X23
	086 Call Single.ToString, X0, X1, X2
	087 Move X19, X0
	088 Compare X0, 0
	089 JumpIfEqual {96}
	090 Move X8, [X22]
	091 Move X0, X19
	092 Move X1, [X8+64]
	093 Call 0x1C17E00
	094 Compare X0, 0
	095 JumpIfEqual {114}
	096 Move W8, [X22+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X8, 0x4D4000
	099 Move X8, [X8+408]
	100 Move [X22+40], X19
	101 Move X1, X22
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X0, [X8]
	105 Move X22, [X31+16]
	106 Move X21, [X31+24]
	107 Move X2, X31
	108 Move X30, [X31+48]
	109 Move X23, [X31+56]
	110 Call UnityString.Format, X0, X1
	111 Return X0
	112 Call 0x1C17F28
	113 Call 0x1C17F20
	114 Call 0x1C17F44
	115 Move X1, X31
	116 Call 0x1C17DEC

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C2D988 LDR W8, [X19]
	0x03C2D98C MOV W21, W0
	0x03C2D990 ADD X0, X31, 0xC
	0x03C2D994 MOV X1, X31
	0x03C2D998 STR W8, [X31 + 0xC]
	0x03C2D99C BL 0x337B6D8
	0x03C2D9A0 SBFM W8, W20, 0x1C, 0x1F
	0x03C2D9A4 EOR W8, W8, W20, 0x4
	0x03C2D9A8 EOR W8, W8, W21, 0x4
	0x03C2D9AC EOR W8, W8, W21, 0x1C
	0x03C2D9B0 LDP X20, X19, [X31 + 0x20]
	0x03C2D9B4 LDP X30, X21, [X31 + 0x10]
	0x03C2D9B8 EOR W0, W8, W0, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call Single.GetHashCode, X0
	007 Move W20, W0
	008 Add X0, X19, 4
	009 Move X1, X31
	010 Call Single.GetHashCode, X0
	011 Xor W0, W20, W0
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return X0

Method: System.Boolean Equals(System.Object other)

Disassembly:
	0x03C2D9BC ADD X31, X31, 0x30
	0x03C2D9C0 RET
	0x03C2D9C4 MOV X1, X31
	0x03C2D9C8 MOV X2, X31
	0x03C2D9CC MOV X3, X31
	0x03C2D9D0 B 0x3C1E004
	0x03C2D9D4 SUB X31, X31, 0x40
	0x03C2D9D8 STP X30, X23, [X31 + 0x10]
	0x03C2D9DC STP X22, X21, [X31 + 0x20]
	0x03C2D9E0 STP X20, X19, [X31 + 0x30]
	0x03C2D9E4 ADRP X22, 0x7B8000
	0x03C2D9E8 LDRB W8, [X22 + 0x125]
	0x03C2D9EC MOV X21, X2
	0x03C2D9F0 MOV X19, X1
	0x03C2D9F4 MOV X20, X0
	0x03C2D9F8 TBNZ X8, 0x0, 0x3C2DA28
	0x03C2D9FC ADRP X0, 0x4C8000
	0x03C2DA00 LDR X0, [X0 + 0xC48]
	0x03C2DA04 BL 0x1C16CF4
	0x03C2DA08 ADRP X0, 0x4C6000
	0x03C2DA0C LDR X0, [X0 + 0x9D0]
	0x03C2DA10 BL 0x1C16CF4
	0x03C2DA14 ADRP X0, 0x4EF000
	0x03C2DA18 LDR X0, [X0 + 0xD18]
	0x03C2DA1C BL 0x1C16CF4
	0x03C2DA20 MOVZ W8, 0x1
	0x03C2DA24 STRB W8, [X22 + 0x125]
	0x03C2DA28 CBNZ X21, 0x3C2DA64
	0x03C2DA2C ADRP X8, 0x4C8000
	0x03C2DA30 LDR X8, [X8 + 0xC48]
	0x03C2DA34 LDR X0, [X8]
	0x03C2DA38 LDR W8, [X0 + 0xE0]
	0x03C2DA3C CBNZ W8, 0x3C2DA44
	0x03C2DA40 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7B9000
	006 Move W8, [X21+273]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x4CF000
	014 Move X0, [X0+3848]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+273], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x4CF000
	021 Move X8, [X8+3848]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move V0, [X0]
	034 Move V1, [X19]
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move V0, [X0+4]
	037 Move V1, [X19+4]
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 NotImplemented "Instruction CSET not yet implemented."

Method: System.Boolean Equals(UnityEngine.Vector2 other)

Disassembly:
	0x03C2DA44 MOV X0, X31
	0x03C2DA48 BL 0x3338524
	0x03C2DA4C CBZ X0, 0x3C2DB90
	0x03C2DA50 LDR X8, [X0]
	0x03C2DA54 LDR X9, [X8 + 0x218]
	0x03C2DA58 LDR X1, [X8 + 0x220]
	0x03C2DA5C BLR X9
	0x03C2DA60 MOV X21, X0
	0x03C2DA64 ADRP X8, 0x4C6000

ISIL:
	001 Move V2, [X0]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move V0, [X0+4]
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0
	007 Move W0, W31
	008 Return X0

Method: UnityEngine.Vector2 Perpendicular(UnityEngine.Vector2 inDirection)

Disassembly:
	0x03C2DA68 LDR X8, [X8 + 0x9D0]
	0x03C2DA6C MOVZ W1, 0x3
	0x03C2DA70 LDR X0, [X8]
	0x03C2DA74 BL 0x1C16D6C
	0x03C2DA78 LDR W8, [X20]

ISIL:
	001 NotImplemented "Instruction FNEG not yet implemented."
	002 Move V2, V0
	003 Move V0, V1
	004 Move V1, V2
	005 Return X0

Method: System.Single Dot(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs)

Disassembly:
	0x03C2DA7C MOV X22, X0
	0x03C2DA80 ADD X0, X31, 0xC
	0x03C2DA84 MOV X1, X19
	0x03C2DA88 MOV X2, X21

ISIL:
	001 Multiply S0, S0, S2
	002 Multiply S1, S1, S3
	003 Add S0, S0, S1
	004 Return V0

Method: System.Single get_magnitude()

Disassembly:
	0x03C2DA8C MOV X3, X31
	0x03C2DA90 STR W8, [X31 + 0xC]
	0x03C2DA94 BL 0x337B8BC
	0x03C2DA98 CBZ X22, 0x3C2DB90
	0x03C2DA9C MOV X23, X0
	0x03C2DAA0 CBZ X0, 0x3C2DAB8
	0x03C2DAA4 LDR X8, [X22]
	0x03C2DAA8 MOV X0, X23
	0x03C2DAAC LDR X1, [X8 + 0x40]
	0x03C2DAB0 BL 0x1C16E00
	0x03C2DAB4 CBZ X0, 0x3C2DB84
	0x03C2DAB8 LDR W8, [X22 + 0x18]
	0x03C2DABC CBZ W8, 0x3C2DB80
	0x03C2DAC0 STR X23, [X22 + 0x20]
	0x03C2DAC4 LDR W8, [X20 + 0x4]
	0x03C2DAC8 ADD X0, X31, 0xC
	0x03C2DACC MOV X1, X19
	0x03C2DAD0 MOV X2, X21
	0x03C2DAD4 MOV X3, X31
	0x03C2DAD8 STR W8, [X31 + 0xC]
	0x03C2DADC BL 0x337B8BC
	0x03C2DAE0 MOV X23, X0
	0x03C2DAE4 CBZ X0, 0x3C2DAFC
	0x03C2DAE8 LDR X8, [X22]
	0x03C2DAEC MOV X0, X23
	0x03C2DAF0 LDR X1, [X8 + 0x40]
	0x03C2DAF4 BL 0x1C16E00

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x7B9000
	008 Move X20, 0x4C7000
	009 Move W8, [X21+274]
	010 Move X20, [X20+1448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4C7000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+274], W8
	021 Move X0, [X20]
	022 Move S9, [X19]
	023 Move S8, [X19+4]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Multiply S0, S9, S9
	033 Multiply S1, S8, S8
	034 Add S0, S0, S1
	035 NotImplemented "Instruction FSQRT not yet implemented."
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Return V0

Method: System.Single get_sqrMagnitude()

Disassembly:
	0x03C2DAF8 CBZ X0, 0x3C2DB84
	0x03C2DAFC LDR W8, [X22 + 0x18]
	0x03C2DB00 CMP W8, 0x1
	0x03C2DB04 B.LS 0x3C2DB80
	0x03C2DB08 STR X23, [X22 + 0x28]

ISIL:
	001 Move S0, [X0]
	002 Move S1, [X0+4]
	003 Multiply S0, S0, S0
	004 Multiply S1, S1, S1
	005 Add S0, S0, S1
	006 Return V0

Method: System.Single Angle(UnityEngine.Vector2 from, UnityEngine.Vector2 to)

Disassembly:
	0x03C2DB0C LDR W8, [X20 + 0x8]
	0x03C2DB10 ADD X0, X31, 0xC
	0x03C2DB14 MOV X1, X19
	0x03C2DB18 MOV X2, X21
	0x03C2DB1C MOV X3, X31
	0x03C2DB20 STR W8, [X31 + 0xC]
	0x03C2DB24 BL 0x337B8BC
	0x03C2DB28 MOV X19, X0
	0x03C2DB2C CBZ X0, 0x3C2DB44
	0x03C2DB30 LDR X8, [X22]
	0x03C2DB34 MOV X0, X19
	0x03C2DB38 LDR X1, [X8 + 0x40]
	0x03C2DB3C BL 0x1C16E00
	0x03C2DB40 CBZ X0, 0x3C2DB84
	0x03C2DB44 LDR W8, [X22 + 0x18]
	0x03C2DB48 CMP W8, 0x2
	0x03C2DB4C B.LS 0x3C2DB80
	0x03C2DB50 ADRP X8, 0x4EF000
	0x03C2DB54 LDR X8, [X8 + 0xD18]
	0x03C2DB58 STR X19, [X22 + 0x30]
	0x03C2DB5C MOV X1, X22
	0x03C2DB60 MOV X2, X31
	0x03C2DB64 LDR X0, [X8]
	0x03C2DB68 BL 0x3C96574
	0x03C2DB6C LDP X20, X19, [X31 + 0x30]
	0x03C2DB70 LDP X22, X21, [X31 + 0x20]
	0x03C2DB74 LDP X30, X23, [X31 + 0x10]
	0x03C2DB78 ADD X31, X31, 0x40
	0x03C2DB7C RET
	0x03C2DB80 BL 0x1C16F28
	0x03C2DB84 BL 0x1C16F44
	0x03C2DB88 MOV X1, X31
	0x03C2DB8C BL 0x1C16DEC
	0x03C2DB90 BL 0x1C16F20
	0x03C2DB94 STR X30, [X31 - 0x20]!
	0x03C2DB98 STP X20, X19, [X31 + 0x10]
	0x03C2DB9C ADRP X19, 0x7B8000
	0x03C2DBA0 ADRP X20, 0x4EE000
	0x03C2DBA4 LDRB W8, [X19 + 0x126]
	0x03C2DBA8 LDR X20, [X20 + 0x638]
	0x03C2DBAC TBNZ X8, 0x0, 0x3C2DBC4
	0x03C2DBB0 ADRP X0, 0x4EE000
	0x03C2DBB4 LDR X0, [X0 + 0x638]
	0x03C2DBB8 BL 0x1C16CF4
	0x03C2DBBC MOVZ W8, 0x1
	0x03C2DBC0 STRB W8, [X19 + 0x126]
	0x03C2DBC4 LDR X8, [X20]
	0x03C2DBC8 LDP X20, X19, [X31 + 0x10]
	0x03C2DBCC LDR X8, [X8 + 0xB8]
	0x03C2DBD0 LDR X0, [X8]
	0x03C2DBD4 LDR W1, [X8 + 0x8]
	0x03C2DBD8 LDR X30, [X31], #0x20
	0x03C2DBDC RET
	0x03C2DBE0 STR X30, [X31 - 0x20]!
	0x03C2DBE4 STP X20, X19, [X31 + 0x10]
	0x03C2DBE8 ADRP X19, 0x7B8000
	0x03C2DBEC ADRP X20, 0x4EE000
	0x03C2DBF0 LDRB W8, [X19 + 0x127]
	0x03C2DBF4 LDR X20, [X20 + 0x638]
	0x03C2DBF8 TBNZ X8, 0x0, 0x3C2DC10
	0x03C2DBFC ADRP X0, 0x4EE000

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x7B9000
	011 Move X19, 0x4C7000
	012 Move W8, [X20+275]
	013 Move X19, [X19+1448]
	014 Move V8, V3
	015 Move V10, V2
	016 Move V9, V1
	017 Move V11, V0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x4C7000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+275], W8
	027 Move X0, [X19]
	028 Multiply S0, S11, S11
	029 Multiply S1, S9, S9
	030 Add S12, S0, S1
	031 Move W8, [X0+224]
	032 Multiply S0, S10, S10
	033 Multiply S1, S8, S8
	034 Add S13, S0, S1
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X8, -51654656
	039 Move V0, [X8+4072]
	040 Multiply S1, S12, S13
	041 NotImplemented "Instruction FSQRT not yet implemented."
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 Move S0, W31
	044 Move X0, [X19]
	045 Multiply S0, S11, S10
	046 Multiply S2, S9, S8
	047 Add S0, S0, S2
	048 Move W8, [X0+224]
	049 NotImplemented "Instruction FDIV not yet implemented."
	050 Move S1, 1
	051 Move S2, -1
	052 NotImplemented "Instruction FMIN not yet implemented."
	053 NotImplemented "Instruction FCMP not yet implemented."
	054 NotImplemented "Instruction FCSEL not yet implemented."
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 NotImplemented "Instruction FCVT not yet implemented."
	059 Call 0x3EB2B80
	060 Move X8, -51650560
	061 Move V1, [X8+1096]
	062 NotImplemented "Instruction INVALID not yet implemented."
	063 Multiply S0, S0, S1
	064 Move X20, [X31+64]
	065 Move X19, [X31+72]
	066 Move X30, [X31+48]
	067 Move D9, [X31+32]
	068 Move D8, [X31+40]
	069 Move D11, [X31+16]
	070 Move D10, [X31+24]
	071 Move D13, [X31+80]
	072 Move D12, [X31+88]
	073 Return V0

Method: System.Single SignedAngle(UnityEngine.Vector2 from, UnityEngine.Vector2 to)

Disassembly:
	0x03C2DC00 LDR X0, [X0 + 0x638]
	0x03C2DC04 BL 0x1C16CF4
	0x03C2DC08 MOVZ W8, 0x1
	0x03C2DC0C STRB W8, [X19 + 0x127]
	0x03C2DC10 LDR X8, [X20]
	0x03C2DC14 LDP X20, X19, [X31 + 0x10]
	0x03C2DC18 LDR X8, [X8 + 0xB8]
	0x03C2DC1C LDUR X0, [X8 + 0xC]
	0x03C2DC20 LDR W1, [X8 + 0x14]
	0x03C2DC24 LDR X30, [X31], #0x20
	0x03C2DC28 RET
	0x03C2DC2C STR X30, [X31 - 0x20]!
	0x03C2DC30 STP X20, X19, [X31 + 0x10]
	0x03C2DC34 ADRP X20, 0x7B8000
	0x03C2DC38 ADRP X19, 0x4EE000
	0x03C2DC3C LDRB W8, [X20 + 0x128]
	0x03C2DC40 LDR X19, [X19 + 0x638]
	0x03C2DC44 TBNZ X8, 0x0, 0x3C2DC5C
	0x03C2DC48 ADRP X0, 0x4EE000
	0x03C2DC4C LDR X0, [X0 + 0x638]
	0x03C2DC50 BL 0x1C16CF4
	0x03C2DC54 MOVZ W8, 0x1
	0x03C2DC58 STRB W8, [X20 + 0x128]
	0x03C2DC5C LDR X8, [X19]
	0x03C2DC60 MOVI V0.2D, 0x0
	0x03C2DC64 MOVI V1.2S, 0x1
	0x03C2DC68 MOVZ W10, 0x1
	0x03C2DC6C LDR X8, [X8 + 0xB8]
	0x03C2DC70 ADRP X11, 0xFFFFFFFFFCEC0000
	0x03C2DC74 STR D0, [X8]
	0x03C2DC78 STR W31, [X8 + 0x8]
	0x03C2DC7C LDR X8, [X19]
	0x03C2DC80 LDP X20, X19, [X31 + 0x10]
	0x03C2DC84 LDR X9, [X8 + 0xB8]
	0x03C2DC88 STUR D1, [X9 + 0xC]
	0x03C2DC8C STR W10, [X9 + 0x14]
	0x03C2DC90 LDR V1, [X11 + 0x640]
	0x03C2DC94 LDR X9, [X8 + 0xB8]
	0x03C2DC98 ADRP X11, 0xFFFFFFFFFCEC0000
	0x03C2DC9C STR D1, [X9 + 0x18]
	0x03C2DCA0 STR W31, [X9 + 0x20]
	0x03C2DCA4 LDR X9, [X8 + 0xB8]
	0x03C2DCA8 MOVI D1, 0xFFFFFFFF00000000
	0x03C2DCAC STUR D1, [X9 + 0x24]
	0x03C2DCB0 STR W31, [X9 + 0x2C]
	0x03C2DCB4 LDR X9, [X8 + 0xB8]
	0x03C2DCB8 MOVI D1, 0xFFFFFFFF
	0x03C2DCBC STR D1, [X9 + 0x30]
	0x03C2DCC0 STR W31, [X9 + 0x38]
	0x03C2DCC4 LDR V1, [X11 + 0xEC0]
	0x03C2DCC8 LDR X9, [X8 + 0xB8]
	0x03C2DCCC STUR D1, [X9 + 0x3C]
	0x03C2DCD0 STR W31, [X9 + 0x44]
	0x03C2DCD4 LDR X9, [X8 + 0xB8]
	0x03C2DCD8 STR D0, [X9 + 0x48]
	0x03C2DCDC STR W10, [X9 + 0x50]
	0x03C2DCE0 LDR X8, [X8 + 0xB8]
	0x03C2DCE4 MOVN W9, 0x0
	0x03C2DCE8 STUR D0, [X8 + 0x54]
	0x03C2DCEC STR W9, [X8 + 0x5C]
	0x03C2DCF0 LDR X30, [X31], #0x20
	0x03C2DCF4 RET
	0x03C2DCF8 STP X30, X19, [X31 - 0x10]!
	0x03C2DCFC CMP W1, 0x3
	0x03C2DD00 B.HI 0x3C2DD40

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X19
	009 Move X19, 0x7AC000
	010 Move W8, [X19+2590]
	011 Move V9, V3
	012 Move V8, V2
	013 Move V10, V1
	014 Move V11, V0
	015 Compare W8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, 0x4C7000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+2590], W8
	022 Move X19, 0x4C7000
	023 Move X19, [X19+1448]
	024 Multiply S0, S11, S11
	025 Multiply S1, S10, S10
	026 Add S12, S0, S1
	027 Move X0, [X19]
	028 Multiply S0, S8, S8
	029 Multiply S1, S9, S9
	030 Add S13, S0, S1
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X8, -51654656
	036 Move V1, [X8+4072]
	037 Multiply S0, S12, S13
	038 NotImplemented "Instruction FSQRT not yet implemented."
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move S1, W31
	041 Move X0, [X19]
	042 Multiply S1, S11, S8
	043 Multiply S2, S10, S9
	044 Add S1, S1, S2
	045 Move W8, [X0+224]
	046 NotImplemented "Instruction FDIV not yet implemented."
	047 Move S1, 1
	048 Move S2, -1
	049 NotImplemented "Instruction FMIN not yet implemented."
	050 NotImplemented "Instruction FCMP not yet implemented."
	051 NotImplemented "Instruction FCSEL not yet implemented."
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 NotImplemented "Instruction FCVT not yet implemented."
	056 Call 0x3EB2B80
	057 Move X8, -51650560
	058 Move V1, [X8+1096]
	059 NotImplemented "Instruction INVALID not yet implemented."
	060 Multiply S1, S0, S1
	061 Multiply S0, S11, S9
	062 Multiply S2, S10, S8
	063 Move X30, [X31+48]
	064 Move X19, [X31+56]
	065 Move D9, [X31+32]
	066 Move D8, [X31+40]
	067 Move D11, [X31+16]
	068 Move D10, [X31+24]
	069 Subtract S0, S0, S2
	070 NotImplemented "Instruction FNEG not yet implemented."
	071 NotImplemented "Instruction FCMP not yet implemented."
	072 NotImplemented "Instruction FCSEL not yet implemented."
	073 Move D13, [X31+64]
	074 Move D12, [X31+72]
	075 Return V0

Method: System.Single Distance(UnityEngine.Vector2 a, UnityEngine.Vector2 b)

Disassembly:
	0x03C2DD04 ADRP X9, 0xFFFFFFFFFCF69000
	0x03C2DD08 MOV W8, W1
	0x03C2DD0C ADD X9, X9, 0xDBA
	0x03C2DD10 ADR X10, 0x10
	0x03C2DD14 LDRB W11, [X9, X8, LSL]
	0x03C2DD18 ADD X10, X10, X11, 0x2, LSL
	0x03C2DD1C BR X10
	0x03C2DD20 ADD X0, X0, 0x4
	0x03C2DD24 B 0x3C2DD34
	0x03C2DD28 ADD X0, X0, 0x8
	0x03C2DD2C B 0x3C2DD34
	0x03C2DD30 ADD X0, X0, 0xC
	0x03C2DD34 LDR V0, [X0]
	0x03C2DD38 LDP X30, X19, [X31], #0x10
	0x03C2DD3C RET
	0x03C2DD40 ADRP X0, 0x4D0000
	0x03C2DD44 LDR X0, [X0 + 0xF78]
	0x03C2DD48 BL 0x1C16D08
	0x03C2DD4C BL 0x1C16F10
	0x03C2DD50 MOV X19, X0
	0x03C2DD54 ADRP X0, 0x52A000
	0x03C2DD58 LDR X0, [X0 + 0x3A0]
	0x03C2DD5C BL 0x1C16D08
	0x03C2DD60 MOV X1, X0
	0x03C2DD64 MOV X0, X19
	0x03C2DD68 MOV X2, X31
	0x03C2DD6C BL 0x3379B6C
	0x03C2DD70 ADRP X0, 0x532000
	0x03C2DD74 LDR X0, [X0 + 0x2B0]
	0x03C2DD78 BL 0x1C16D08
	0x03C2DD7C MOV X1, X0
	0x03C2DD80 MOV X0, X19
	0x03C2DD84 BL 0x1C16DEC

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x7B9000
	009 Move X19, 0x4C7000
	010 Move W8, [X20+276]
	011 Move X19, [X19+1448]
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x4C7000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+276], W8
	025 Move X0, [X19]
	026 Subtract S9, S11, S9
	027 Subtract S8, S10, S8
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Multiply S0, S9, S9
	033 Multiply S1, S8, S8
	034 Move X20, [X31+48]
	035 Move X19, [X31+56]
	036 Move X30, [X31+32]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Add S0, S0, S1
	040 NotImplemented "Instruction FSQRT not yet implemented."
	041 Move D11, [X31+64]
	042 Move D10, [X31+72]
	043 Return V0

Method: UnityEngine.Vector2 ClampMagnitude(UnityEngine.Vector2 vector, System.Single maxLength)

Disassembly:
	0x03C2DD88 STP X30, X19, [X31 - 0x10]!
	0x03C2DD8C CMP W1, 0x3
	0x03C2DD90 B.HI 0x3C2DDD0
	0x03C2DD94 ADRP X9, 0xFFFFFFFFFCF69000
	0x03C2DD98 MOV W8, W1
	0x03C2DD9C ADD X9, X9, 0xDBA
	0x03C2DDA0 ADR X10, 0x10
	0x03C2DDA4 LDRB W11, [X9, X8, LSL]
	0x03C2DDA8 ADD X10, X10, X11, 0x2, LSL
	0x03C2DDAC BR X10
	0x03C2DDB0 ADD X0, X0, 0x4
	0x03C2DDB4 B 0x3C2DDC4
	0x03C2DDB8 ADD X0, X0, 0x8
	0x03C2DDBC B 0x3C2DDC4
	0x03C2DDC0 ADD X0, X0, 0xC
	0x03C2DDC4 STR S0, [X0]
	0x03C2DDC8 LDP X30, X19, [X31], #0x10
	0x03C2DDCC RET
	0x03C2DDD0 ADRP X0, 0x4D0000
	0x03C2DDD4 LDR X0, [X0 + 0xF78]
	0x03C2DDD8 BL 0x1C16D08
	0x03C2DDDC BL 0x1C16F10
	0x03C2DDE0 MOV X19, X0
	0x03C2DDE4 ADRP X0, 0x52A000
	0x03C2DDE8 LDR X0, [X0 + 0x3A0]
	0x03C2DDEC BL 0x1C16D08
	0x03C2DDF0 MOV X1, X0
	0x03C2DDF4 MOV X0, X19
	0x03C2DDF8 MOV X2, X31
	0x03C2DDFC BL 0x3379B6C
	0x03C2DE00 ADRP X0, 0x52A000
	0x03C2DE04 LDR X0, [X0 + 0x3A8]
	0x03C2DE08 BL 0x1C16D08
	0x03C2DE0C MOV X1, X0
	0x03C2DE10 MOV X0, X19
	0x03C2DE14 BL 0x1C16DEC
	0x03C2DE18 STP S0, S1, [X0]

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, 0x7B9000
	008 Move W8, [X19+277]
	009 Move V10, V2
	010 Move V8, V1
	011 Move V9, V0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4C7000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+277], W8
	021 Multiply S0, S9, S9
	022 Multiply S1, S8, S8
	023 Add S11, S0, S1
	024 Multiply S0, S10, S10
	025 NotImplemented "Instruction FCMP not yet implemented."
	026 Move X8, 0x4C7000
	027 Move X8, [X8+1448]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 NotImplemented "Instruction FSQRT not yet implemented."
	034 NotImplemented "Instruction FDIV not yet implemented."
	035 NotImplemented "Instruction FDIV not yet implemented."
	036 Multiply S9, S1, S10
	037 Multiply S8, S0, S10
	038 Move V0, V9
	039 Move V1, V8
	040 Move X30, [X31+32]
	041 Move X19, [X31+40]
	042 Move D9, [X31+16]
	043 Move D8, [X31+24]
	044 Move D11, [X31+48]
	045 Move D10, [X31+56]
	046 Return X0

Method: UnityEngine.Vector2 Min(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs)

Disassembly:
	0x03C2DE1C STP S2, S3, [X0 + 0x8]
	0x03C2DE20 RET
	0x03C2DE24 STP S0, S1, [X0]
	0x03C2DE28 STR X31, [X0 + 0x8]
	0x03C2DE2C RET

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction FCSEL not yet implemented."
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FCSEL not yet implemented."
	005 Return X0

Method: UnityEngine.Vector2 Max(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs)

Disassembly:
	0x03C2DE30 STP S0, S1, [X0]
	0x03C2DE34 STP S2, S3, [X0 + 0x8]
	0x03C2DE38 RET
	0x03C2DE3C LDR V16, [X31]
	0x03C2DE40 FMOV S17, 1

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction FCSEL not yet implemented."
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FCSEL not yet implemented."
	005 Return X0

Method: UnityEngine.Vector2 op_Addition(UnityEngine.Vector2 a, UnityEngine.Vector2 b)

Disassembly:
	0x03C2DE44 FSUB S4, S4, S0
	0x03C2DE48 FSUB S5, S5, S1
	0x03C2DE4C FMIN S17, S16, S17

ISIL:
	001 Add S0, S0, S2
	002 Add S1, S1, S3
	003 Return X0

Method: UnityEngine.Vector2 op_Subtraction(UnityEngine.Vector2 a, UnityEngine.Vector2 b)

Disassembly:
	0x03C2DE50 FCMP S16, 0x0
	0x03C2DE54 FMOV S16, W31
	0x03C2DE58 FSUB S6, S6, S2

ISIL:
	001 Subtract S0, S0, S2
	002 Subtract S1, S1, S3
	003 Return X0

Method: UnityEngine.Vector2 op_Multiply(UnityEngine.Vector2 a, UnityEngine.Vector2 b)

Disassembly:
	0x03C2DE5C FSUB S7, S7, S3
	0x03C2DE60 FCSEL S16, S17, S16, PL
	0x03C2DE64 FMUL S4, S4, S16

ISIL:
	001 Multiply S0, S0, S2
	002 Multiply S1, S1, S3
	003 Return X0

Method: UnityEngine.Vector2 op_Division(UnityEngine.Vector2 a, UnityEngine.Vector2 b)

Disassembly:
	0x03C2DE68 FMUL S5, S5, S16
	0x03C2DE6C FMUL S6, S6, S16
	0x03C2DE70 FMUL S7, S7, S16

ISIL:
	001 NotImplemented "Instruction FDIV not yet implemented."
	002 NotImplemented "Instruction FDIV not yet implemented."
	003 Return X0

Method: UnityEngine.Vector2 op_UnaryNegation(UnityEngine.Vector2 a)

Disassembly:
	0x03C2DE74 FADD S0, S0, S4
	0x03C2DE78 FADD S1, S1, S5
	0x03C2DE7C FADD S2, S2, S6

ISIL:
	001 NotImplemented "Instruction FNEG not yet implemented."
	002 NotImplemented "Instruction FNEG not yet implemented."
	003 Return X0

Method: UnityEngine.Vector2 op_Multiply(UnityEngine.Vector2 a, System.Single d)

Disassembly:
	0x03C2DE80 FADD S3, S3, S7
	0x03C2DE84 RET
	0x03C2DE88 LDR V4, [X0]

ISIL:
	001 Multiply S0, S0, S2
	002 Multiply S1, S1, S2
	003 Return X0

Method: UnityEngine.Vector2 op_Multiply(System.Single d, UnityEngine.Vector2 a)

Disassembly:
	0x03C2DE8C MOV V0.S[1], V1.S[0]
	0x03C2DE90 MOV V0.S[2], V2.S[0]
	0x03C2DE94 MOV V0.S[3], V3.S[0]
	0x00000000 INVALID

ISIL:
	001 Multiply S3, S1, S0
	002 Multiply S1, S2, S0
	003 Move V0, V3
	004 Return X0

Method: UnityEngine.Vector2 op_Division(UnityEngine.Vector2 a, System.Single d)

Disassembly:
	0x03C2DE9C STR V0, [X0]
	0x03C2DEA0 RET
	0x03C2DEA4 STR X30, [X31 - 0x30]!

ISIL:
	001 NotImplemented "Instruction FDIV not yet implemented."
	002 NotImplemented "Instruction FDIV not yet implemented."
	003 Return X0

Method: System.Boolean op_Equality(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs)

Disassembly:
	0x03C2DEA8 STP X22, X21, [X31 + 0x10]
	0x03C2DEAC STP X20, X19, [X31 + 0x20]
	0x03C2DEB0 MOV X1, X31
	0x03C2DEB4 MOV X19, X0
	0x03C2DEB8 BL 0x338FE0C
	0x03C2DEBC MOV W20, W0
	0x03C2DEC0 ADD X0, X19, 0x4
	0x03C2DEC4 MOV X1, X31
	0x03C2DEC8 BL 0x338FE0C
	0x03C2DECC MOV W21, W0

ISIL:
	001 Move X8, -51654656
	002 Subtract S0, S0, S2
	003 Move V2, [X8+3872]
	004 Subtract S1, S1, S3
	005 Multiply S0, S0, S0
	006 Multiply S1, S1, S1
	007 Add S0, S0, S1
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Return X0

Method: System.Boolean op_Inequality(UnityEngine.Vector2 lhs, UnityEngine.Vector2 rhs)

Disassembly:
	0x03C2DED0 ADD X0, X19, 0x8
	0x03C2DED4 MOV X1, X31
	0x03C2DED8 BL 0x338FE0C
	0x03C2DEDC MOV W22, W0
	0x03C2DEE0 ADD X0, X19, 0xC
	0x03C2DEE4 MOV X1, X31
	0x03C2DEE8 BL 0x338FE0C
	0x03C2DEEC EOR W8, W20, W21, 0x2
	0x03C2DEF0 EOR W8, W8, W22, 0x2
	0x03C2DEF4 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move X8, -51654656
	002 Subtract S0, S0, S2
	003 Move V2, [X8+3872]
	004 Subtract S1, S1, S3
	005 Multiply S0, S0, S0
	006 Multiply S1, S1, S1
	007 Add S0, S0, S1
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 Return X0

Method: UnityEngine.Vector2 op_Implicit(UnityEngine.Vector3 v)

Disassembly:
	0x03C2DEF8 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Return X0

Method: UnityEngine.Vector3 op_Implicit(UnityEngine.Vector2 v)

Disassembly:
	0x03C2DEFC EOR W0, W8, W0, 0x1
	0x03C2DF00 LDR X30, [X31], #0x30

ISIL:
	001 Move S2, W31
	002 Return X0

Method: UnityEngine.Vector2 get_zero()

Disassembly:
	0x03C2DF04 RET
	0x03C2DF08 STP X30, X21, [X31 - 0x20]!
	0x03C2DF0C STP X20, X19, [X31 + 0x10]
	0x03C2DF10 ADRP X21, 0x7B8000
	0x03C2DF14 LDRB W8, [X21 + 0x129]
	0x03C2DF18 MOV X20, X1
	0x03C2DF1C MOV X19, X0
	0x03C2DF20 TBNZ X8, 0x0, 0x3C2DF38
	0x03C2DF24 ADRP X0, 0x4CD000
	0x03C2DF28 LDR X0, [X0 + 0x9A0]
	0x03C2DF2C BL 0x1C16CF4
	0x03C2DF30 MOVZ W8, 0x1
	0x03C2DF34 STRB W8, [X21 + 0x129]
	0x03C2DF38 CBZ X20, 0x3C2DF54
	0x03C2DF3C ADRP X8, 0x4CD000
	0x03C2DF40 LDR X8, [X8 + 0x9A0]
	0x03C2DF44 LDR X9, [X20]
	0x03C2DF48 LDR X8, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7B9000
	005 Move X20, 0x4CF000
	006 Move W8, [X19+278]
	007 Move X20, [X20+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CF000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+278], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8]
	022 Move S1, [X8+4]
	023 Move X30, [X31+32]
	024 Return X0

Method: UnityEngine.Vector2 get_one()

Disassembly:
	0x03C2DF4C CMP X9, X8
	0x03C2DF50 B.EQ 0x3C2DF64
	0x03C2DF54 MOV W0, W31
	0x03C2DF58 LDP X20, X19, [X31 + 0x10]
	0x03C2DF5C LDP X30, X21, [X31], #0x20
	0x03C2DF60 RET
	0x03C2DF64 MOV X0, X20
	0x03C2DF68 BL 0x1C16E08
	0x03C2DF6C LDR V0, [X0]
	0x03C2DF70 LDR V1, [X19]
	0x03C2DF74 FCMP S1, S0
	0x03C2DF78 B.NE 0x3C2DF54
	0x03C2DF7C LDR V0, [X0 + 0x4]
	0x03C2DF80 LDR V1, [X19 + 0x4]
	0x03C2DF84 FCMP S1, S0
	0x03C2DF88 B.NE 0x3C2DF54
	0x03C2DF8C LDR V0, [X0 + 0x8]
	0x03C2DF90 LDR V1, [X19 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7B9000
	005 Move X20, 0x4CF000
	006 Move W8, [X19+279]
	007 Move X20, [X20+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CF000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+279], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+8]
	022 Move S1, [X8+12]
	023 Move X30, [X31+32]
	024 Return X0

Method: UnityEngine.Vector2 get_up()

Disassembly:
	0x03C2DF94 FCMP S1, S0
	0x03C2DF98 B.NE 0x3C2DF54
	0x03C2DF9C LDR V0, [X0 + 0xC]
	0x03C2DFA0 LDR V1, [X19 + 0xC]
	0x03C2DFA4 FCMP S1, S0
	0x03C2DFA8 CSET W0, EQ
	0x03C2DFAC B 0x3C2DF58
	0x03C2DFB0 LDR V4, [X0]
	0x03C2DFB4 FCMP S4, S0
	0x03C2DFB8 B.NE 0x3C2DFE4
	0x03C2DFBC LDR V0, [X0 + 0x4]
	0x03C2DFC0 FCMP S0, S1
	0x03C2DFC4 B.NE 0x3C2DFE4
	0x03C2DFC8 LDR V0, [X0 + 0x8]
	0x03C2DFCC FCMP S0, S2
	0x03C2DFD0 B.NE 0x3C2DFE4
	0x03C2DFD4 LDR V0, [X0 + 0xC]
	0x03C2DFD8 FCMP S0, S3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7B9000
	005 Move X20, 0x4CF000
	006 Move W8, [X19+280]
	007 Move X20, [X20+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CF000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+280], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+16]
	022 Move S1, [X8+20]
	023 Move X30, [X31+32]
	024 Return X0

Method: UnityEngine.Vector2 get_down()

Disassembly:
	0x03C2DFDC CSET W0, EQ
	0x03C2DFE0 RET
	0x03C2DFE4 MOV W0, W31
	0x03C2DFE8 RET
	0x03C2DFEC STP D11, D10, [X31 - 0x30]!
	0x03C2DFF0 STP D9, D8, [X31 + 0x10]
	0x03C2DFF4 STP X30, X19, [X31 + 0x20]
	0x03C2DFF8 ADRP X19, 0x7AB000
	0x03C2DFFC LDRB W8, [X19 + 0xE59]
	0x03C2E000 MOV V8.16B, V3.16B
	0x03C2E004 MOV V9.16B, V2.16B
	0x03C2E008 MOV V10.16B, V1.16B
	0x03C2E00C MOV V11.16B, V0.16B
	0x03C2E010 CBNZ W8, 0x3C2E028
	0x03C2E014 ADRP X0, 0x4C5000
	0x03C2E018 LDR X0, [X0 + 0x5A8]
	0x03C2E01C BL 0x1C16CF4
	0x03C2E020 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7B9000
	005 Move X20, 0x4CF000
	006 Move W8, [X19+281]
	007 Move X20, [X20+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CF000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+281], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+24]
	022 Move S1, [X8+28]
	023 Move X30, [X31+32]
	024 Return X0

Method: UnityEngine.Vector2 get_left()

Disassembly:
	0x03C2E024 STRB W8, [X19 + 0xE59]
	0x03C2E028 ADRP X8, 0x4C5000
	0x03C2E02C LDR X8, [X8 + 0x5A8]
	0x03C2E030 LDR X0, [X8]
	0x03C2E034 LDR W8, [X0 + 0xE0]
	0x03C2E038 CBNZ W8, 0x3C2E040
	0x03C2E03C BL 0x1C16DFC
	0x03C2E040 FMUL S2, S11, S11
	0x03C2E044 FMUL S3, S10, S10
	0x03C2E048 ADRP X8, 0xFFFFFFFFFCEBC000
	0x03C2E04C FMUL S1, S9, S9
	0x03C2E050 FADD S2, S2, S3
	0x03C2E054 LDR V4, [X8 + 0x17C]
	0x03C2E058 FMUL S0, S8, S8
	0x03C2E05C FADD S1, S1, S2
	0x03C2E060 FADD S0, S0, S1
	0x03C2E064 FSQRT S3, S0
	0x03C2E068 FCMP S3, S4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7B8000
	005 Move X20, 0x4CE000
	006 Move W8, [X19+282]
	007 Move X20, [X20+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CE000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+282], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+32]
	022 Move S1, [X8+36]
	023 Move X30, [X31+32]
	024 Return X0

Method: UnityEngine.Vector2 get_right()

Disassembly:
	0x03C2E06C B.LE 0x3C2E084
	0x03C2E070 FDIV S0, S11, S3
	0x03C2E074 FDIV S1, S10, S3
	0x03C2E078 FDIV S2, S9, S3
	0x03C2E07C FDIV S3, S8, S3
	0x03C2E080 B 0x3C2E0BC
	0x03C2E084 ADRP X19, 0x7AA000
	0x03C2E088 LDRB W8, [X19 + 0xE5A]
	0x03C2E08C CBNZ W8, 0x3C2E0A4
	0x03C2E090 ADRP X0, 0x4CC000
	0x03C2E094 LDR X0, [X0 + 0x9A0]
	0x03C2E098 BL 0x1C16CF4
	0x03C2E09C MOVZ W8, 0x1
	0x03C2E0A0 STRB W8, [X19 + 0xE5A]
	0x03C2E0A4 ADRP X8, 0x4CC000
	0x03C2E0A8 LDR X8, [X8 + 0x9A0]
	0x03C2E0AC LDR X8, [X8]
	0x03C2E0B0 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7B8000
	005 Move X20, 0x4CE000
	006 Move W8, [X19+283]
	007 Move X20, [X20+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CE000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+283], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+40]
	022 Move S1, [X8+44]
	023 Move X30, [X31+32]
	024 Return X0

Method: UnityEngine.Vector2 get_positiveInfinity()

Disassembly:
	0x03C2E0B4 LDP S0, S1, [X8]
	0x03C2E0B8 LDP S2, S3, [X8 + 0x8]
	0x03C2E0BC LDP X30, X19, [X31 + 0x20]
	0x03C2E0C0 LDP D9, D8, [X31 + 0x10]
	0x03C2E0C4 LDP D11, D10, [X31], #0x30
	0x03C2E0C8 RET
	0x03C2E0CC STP D11, D10, [X31 - 0x40]!
	0x03C2E0D0 STP D9, D8, [X31 + 0x10]
	0x03C2E0D4 STR X30, [X31 + 0x20]
	0x03C2E0D8 STP X20, X19, [X31 + 0x30]
	0x03C2E0DC ADRP X20, 0x7AA000
	0x03C2E0E0 LDP S8, S9, [X0]
	0x03C2E0E4 LDRB W8, [X20 + 0xE59]
	0x03C2E0E8 LDP S10, S11, [X0 + 0x8]
	0x03C2E0EC MOV X19, X0
	0x03C2E0F0 CBNZ W8, 0x3C2E108
	0x03C2E0F4 ADRP X0, 0x4C5000
	0x03C2E0F8 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7B8000
	005 Move X20, 0x4CE000
	006 Move W8, [X19+284]
	007 Move X20, [X20+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CE000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+284], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+48]
	022 Move S1, [X8+52]
	023 Move X30, [X31+32]
	024 Return X0

Method: UnityEngine.Vector2 get_negativeInfinity()

Disassembly:
	0x03C2E0FC BL 0x1C16CF4
	0x03C2E100 MOVZ W8, 0x1
	0x03C2E104 STRB W8, [X20 + 0xE59]
	0x03C2E108 ADRP X8, 0x4C5000
	0x03C2E10C LDR X8, [X8 + 0x5A8]
	0x03C2E110 LDR X0, [X8]
	0x03C2E114 LDR W8, [X0 + 0xE0]
	0x03C2E118 CBNZ W8, 0x3C2E120
	0x03C2E11C BL 0x1C16DFC
	0x03C2E120 FMUL S2, S8, S8
	0x03C2E124 FMUL S3, S9, S9
	0x03C2E128 ADRP X8, 0xFFFFFFFFFCEBC000
	0x03C2E12C FMUL S1, S10, S10
	0x03C2E130 FADD S2, S2, S3
	0x03C2E134 LDR V3, [X8 + 0x17C]
	0x03C2E138 FMUL S0, S11, S11
	0x03C2E13C FADD S1, S1, S2
	0x03C2E140 FADD S0, S0, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7B8000
	005 Move X20, 0x4CE000
	006 Move W8, [X19+285]
	007 Move X20, [X20+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CE000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+285], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8+56]
	022 Move S1, [X8+60]
	023 Move X30, [X31+32]
	024 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03C2E144 FSQRT S0, S0
	0x03C2E148 FCMP S0, S3
	0x03C2E14C B.LE 0x3C2E160
	0x03C2E150 LDR V1, [X19]
	0x03C2E154 UNIMPLEMENTED
	0x00000000 INVALID
	0x03C2E15C B 0x3C2E194
	0x03C2E160 ADRP X20, 0x7AA000
	0x03C2E164 LDRB W8, [X20 + 0xE5A]
	0x03C2E168 CBNZ W8, 0x3C2E180
	0x03C2E16C ADRP X0, 0x4CC000
	0x03C2E170 LDR X0, [X0 + 0x9A0]
	0x03C2E174 BL 0x1C16CF4
	0x03C2E178 MOVZ W8, 0x1
	0x03C2E17C STRB W8, [X20 + 0xE5A]
	0x03C2E180 ADRP X8, 0x4CC000
	0x03C2E184 LDR X8, [X8 + 0x9A0]
	0x03C2E188 LDR X8, [X8]
	0x03C2E18C LDR X8, [X8 + 0xB8]
	0x03C2E190 LDR V0, [X8]
	0x03C2E194 STR V0, [X19]
	0x03C2E198 LDP X20, X19, [X31 + 0x30]
	0x03C2E19C LDR X30, [X31 + 0x20]
	0x03C2E1A0 LDP D9, D8, [X31 + 0x10]
	0x03C2E1A4 LDP D11, D10, [X31], #0x40
	0x03C2E1A8 RET
	0x03C2E1AC STP D11, D10, [X31 - 0x30]!
	0x03C2E1B0 STP D9, D8, [X31 + 0x10]
	0x03C2E1B4 STP X30, X19, [X31 + 0x20]
	0x03C2E1B8 ADRP X19, 0x7AA000
	0x03C2E1BC LDP S8, S9, [X0]
	0x03C2E1C0 LDRB W8, [X19 + 0xE59]
	0x03C2E1C4 LDP S11, S10, [X0 + 0x8]
	0x03C2E1C8 CBNZ W8, 0x3C2E1E0
	0x03C2E1CC ADRP X0, 0x4C5000
	0x03C2E1D0 LDR X0, [X0 + 0x5A8]
	0x03C2E1D4 BL 0x1C16CF4
	0x03C2E1D8 MOVZ W8, 0x1
	0x03C2E1DC STRB W8, [X19 + 0xE59]
	0x03C2E1E0 ADRP X8, 0x4C5000
	0x03C2E1E4 LDR X8, [X8 + 0x5A8]
	0x03C2E1E8 LDR X0, [X8]
	0x03C2E1EC LDR W8, [X0 + 0xE0]
	0x03C2E1F0 CBNZ W8, 0x3C2E1F8
	0x03C2E1F4 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7B8000
	005 Move X19, 0x4CE000
	006 Move W8, [X20+286]
	007 Move X19, [X19+3848]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CE000
	013 Move X0, [X0+3848]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+286], W8
	017 Move X8, [X19]
	018 Move V0, 0
	019 Move X10, -51638272
	020 Move X8, [X8+184]
	021 Move [X8], X31
	022 Move X8, [X19]
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X9, [X8+184]
	026 Move [X9+8], D0
	027 Move V0, [X10]
	028 Move X9, [X8+184]
	029 Move X10, -51638272
	030 Move [X9+16], D0
	031 Move V0, [X10+632]
	032 Move X9, [X8+184]
	033 Move X10, -51638272
	034 Move [X9+24], D0
	035 Move V0, [X10+888]
	036 Move X9, [X8+184]
	037 Move X10, -51642368
	038 Move [X9+32], D0
	039 Move X9, [X8+184]
	040 Move V0, [X10+1608]
	041 Move W10, 0x7F800000
	042 Move [X9+40], D0
	043 Move X9, [X8+184]
	044 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	045 Move [X9+48], D0
	046 Move X8, [X8+184]
	047 NotImplemented "Instruction MVNI not yet implemented."
	048 Move [X8+56], D0
	049 Move X30, [X31+32]
	050 Return 

