Type: UnityEngine.RectTransform

Method: System.Void add_reapplyDrivenProperties(UnityEngine.RectTransform/ReapplyDrivenProperties value)

Disassembly:
	0x03C3F3AC CSEL X19, X0, X31, EQ
	0x03C3F3B0 B 0x3C3F3B8
	0x03C3F3B4 MOV X19, X31
	0x03C3F3B8 LDR X0, [X20]
	0x03C3F3BC LDR W8, [X0 + 0xE0]
	0x03C3F3C0 CBNZ W8, 0x3C3F3C8
	0x03C3F3C4 BL 0x1C16DFC
	0x03C3F3C8 MOV X0, X19
	0x03C3F3CC BL 0x3C38948
	0x03C3F3D0 TBZ X0, 0x0, 0x3C3F3EC
	0x03C3F3D4 CBZ X19, 0x3C3F42C
	0x03C3F3D8 MOV X0, X19
	0x03C3F3DC BL 0x3C3E51C
	0x03C3F3E0 MOV V0.16B, V2.16B
	0x03C3F3E4 MOV V1.16B, V3.16B
	0x03C3F3E8 B 0x3C3F420
	0x03C3F3EC ADRP X19, 0x79A000
	0x03C3F3F0 LDRB W8, [X19 + 0x78F]
	0x03C3F3F4 CBNZ W8, 0x3C3F40C
	0x03C3F3F8 ADRP X0, 0x4BC000
	0x03C3F3FC LDR X0, [X0 + 0xF08]
	0x03C3F400 BL 0x1C16CF4
	0x03C3F404 MOVZ W8, 0x1
	0x03C3F408 STRB W8, [X19 + 0x78F]
	0x03C3F40C ADRP X8, 0x4BC000
	0x03C3F410 LDR X8, [X8 + 0xF08]
	0x03C3F414 LDR X8, [X8]
	0x03C3F418 LDR X8, [X8 + 0xB8]
	0x03C3F41C LDP S0, S1, [X8]
	0x03C3F420 LDP X20, X19, [X31 + 0x10]
	0x03C3F424 LDR X30, [X31], #0x20
	0x03C3F428 RET
	0x03C3F42C BL 0x1C16F20
	0x03C3F430 STP X30, X21, [X31 - 0x20]!
	0x03C3F434 STP X20, X19, [X31 + 0x10]
	0x03C3F438 ADRP X20, 0x7A6000
	0x03C3F43C ADRP X21, 0x4DB000
	0x03C3F440 LDRB W8, [X20 + 0x8C2]
	0x03C3F444 LDR X21, [X21 + 0xC70]
	0x03C3F448 MOV X19, X0
	0x03C3F44C TBNZ X8, 0x0, 0x3C3F464
	0x03C3F450 ADRP X0, 0x4DB000
	0x03C3F454 LDR X0, [X0 + 0xC70]
	0x03C3F458 BL 0x1C16CF4
	0x03C3F45C MOVZ W8, 0x1
	0x03C3F460 STRB W8, [X20 + 0x8C2]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7A7000
	007 Move X21, 0x4DC000
	008 Move W8, [X20+2230]
	009 Move X21, [X21+3184]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x521000
	016 Move X0, [X0+2040]
	017 Call 0x1C17CF4
	018 Move X0, 0x4DC000
	019 Move X0, [X0+3184]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2230], W8
	023 Move X8, [X21]
	024 Move X22, 0x521000
	025 Move X8, [X8+184]
	026 Move X20, [X8]
	027 Move X22, [X22+2040]
	028 Move X0, X20
	029 Move X1, X19
	030 Move X2, X31
	031 Call Delegate.Combine, X0, X1
	032 Move X8, X0
	033 Compare X0, 0
	034 JumpIfEqual {38}
	035 Move X1, [X22]
	036 Move X9, [X8]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X9, [X21]
	039 Move X1, X8
	040 Move X2, X20
	041 Move X0, [X9+184]
	042 Call 0x1C25138
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X20, X0
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 
	051 Move X0, X8
	052 Call 0x1C181E0

Method: System.Void remove_reapplyDrivenProperties(UnityEngine.RectTransform/ReapplyDrivenProperties value)

Disassembly:
	0x03C3F464 LDR X8, [X21]
	0x03C3F468 LDR X8, [X8 + 0xB8]
	0x03C3F46C LDR X8, [X8]
	0x03C3F470 CBZ X8, 0x3C3F490
	0x03C3F474 LDR X3, [X8 + 0x18]
	0x03C3F478 LDR X0, [X8 + 0x40]
	0x03C3F47C LDR X2, [X8 + 0x28]
	0x03C3F480 MOV X1, X19
	0x03C3F484 LDP X20, X19, [X31 + 0x10]
	0x03C3F488 LDP X30, X21, [X31], #0x20
	0x03C3F48C BR X3
	0x03C3F490 LDP X20, X19, [X31 + 0x10]
	0x03C3F494 LDP X30, X21, [X31], #0x20
	0x03C3F498 RET
	0x03C3F49C STR X30, [X31 - 0x20]!
	0x03C3F4A0 STP X20, X19, [X31 + 0x10]
	0x03C3F4A4 ADRP X20, 0x7A6000
	0x03C3F4A8 LDR X1, [X20 + 0x928]
	0x03C3F4AC MOV X19, X0
	0x03C3F4B0 CBNZ X1, 0x3C3F4C8
	0x03C3F4B4 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C3F4B8 ADD X0, X0, 0x470
	0x03C3F4BC BL 0x1C16CB8
	0x03C3F4C0 MOV X1, X0
	0x03C3F4C4 STR X0, [X20 + 0x928]
	0x03C3F4C8 MOV X0, X19
	0x03C3F4CC LDP X20, X19, [X31 + 0x10]
	0x03C3F4D0 LDR X30, [X31], #0x20
	0x03C3F4D4 BR X1
	0x03C3F4D8 STP X30, X21, [X31 - 0x20]!
	0x03C3F4DC STP X20, X19, [X31 + 0x10]
	0x03C3F4E0 LDR X8, [X2 + 0x8]
	0x03C3F4E4 STP X1, X2, [X0 + 0x20]
	0x03C3F4E8 MOV X19, X0
	0x03C3F4EC MOV X20, X1
	0x03C3F4F0 STR X8, [X0 + 0x10]
	0x03C3F4F4 LDRB W21, [X2 + 0x52]
	0x03C3F4F8 STR X0, [X0 + 0x40]
	0x03C3F4FC MOV X0, X2
	0x03C3F500 BL 0x1C16D84
	0x03C3F504 TBZ X0, 0x0, 0x3C3F51C
	0x03C3F508 CMP W21, 0x1
	0x03C3F50C B.NE 0x3C3F524
	0x03C3F510 ADRP X8, 0xFFFFFFFFFDFC9000
	0x03C3F514 ADD X8, X8, 0x8F0
	0x03C3F518 B 0x3C3F540

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7A7000
	007 Move X21, 0x4DC000
	008 Move W8, [X20+2231]
	009 Move X21, [X21+3184]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x521000
	016 Move X0, [X0+2040]
	017 Call 0x1C17CF4
	018 Move X0, 0x4DC000
	019 Move X0, [X0+3184]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2231], W8
	023 Move X8, [X21]
	024 Move X22, 0x521000
	025 Move X8, [X8+184]
	026 Move X20, [X8]
	027 Move X22, [X22+2040]
	028 Move X0, X20
	029 Move X1, X19
	030 Move X2, X31
	031 Call Delegate.Remove, X0, X1
	032 Move X8, X0
	033 Compare X0, 0
	034 JumpIfEqual {38}
	035 Move X1, [X22]
	036 Move X9, [X8]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X9, [X21]
	039 Move X1, X8
	040 Move X2, X20
	041 Move X0, [X9+184]
	042 Call 0x1C25138
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X20, X0
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return 
	051 Move X0, X8
	052 Call 0x1C181E0

Method: UnityEngine.Rect get_rect()

Disassembly:
	0x03C3F51C CBZ W21, 0x3C3F538
	0x03C3F520 CBZ X20, 0x3C3F55C
	0x03C3F524 LDR X8, [X19 + 0x10]
	0x03C3F528 LDR X9, [X19 + 0x20]
	0x03C3F52C STR X8, [X19 + 0x18]
	0x03C3F530 STR X9, [X19 + 0x40]
	0x03C3F534 B 0x3C3F544
	0x03C3F538 ADRP X8, 0xFFFFFFFFFDFC9000
	0x03C3F53C ADD X8, X8, 0x8D0
	0x03C3F540 STR X8, [X19 + 0x18]
	0x03C3F544 ADRP X8, 0xFFFFFFFFFDFC9000
	0x03C3F548 ADD X8, X8, 0x888
	0x03C3F54C STR X8, [X19 + 0x38]
	0x03C3F550 LDP X20, X19, [X31 + 0x10]
	0x03C3F554 LDP X30, X21, [X31], #0x20
	0x03C3F558 RET
	0x03C3F55C ADRP X1, 0xFFFFFFFFFCEDC000
	0x03C3F560 ADD X1, X1, 0xEE3
	0x03C3F564 MOV X0, X31
	0x03C3F568 BL 0x1C16F3C
	0x03C3F56C MOV X1, X31
	0x03C3F570 BL 0x1C16DEC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7A7000
	007 Move X8, [X20+2248]
	008 Move X19, X0
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51572736
	013 Add X0, X0, 1427
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+2248], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move S2, [X31+8]
	023 Move S3, [X31+12]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 48
	028 Return X0

Method: UnityEngine.Vector2 get_anchorMin()

Disassembly:
	0x03C3F5B8 BL 0x1C16CB8
	0x03C3F5BC MOV X8, X0
	0x03C3F5C0 STR X0, [X20 + 0x9A8]
	0x03C3F5C4 ADD X1, X31, 0x0
	0x03C3F5C8 MOV X0, X19
	0x03C3F5CC BLR X8
	0x03C3F5D0 LDP S0, S1, [X31]
	0x03C3F5D4 LDR V2, [X31 + 0x8]
	0x03C3F5D8 LDP X20, X19, [X31 + 0x20]
	0x03C3F5DC LDR X30, [X31 + 0x10]
	0x03C3F5E0 ADD X31, X31, 0x30
	0x03C3F5E4 RET
	0x03C3F5E8 STP X30, X21, [X31 - 0x20]!
	0x03C3F5EC STP X20, X19, [X31 + 0x10]
	0x03C3F5F0 ADRP X21, 0x7A6000
	0x03C3F5F4 LDR X2, [X21 + 0x9A8]
	0x03C3F5F8 MOV X19, X1
	0x03C3F5FC MOV X20, X0
	0x03C3F600 CBNZ X2, 0x3C3F618

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2256]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51564544
	011 Add X0, X0, 515
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+2256], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_anchorMin(UnityEngine.Vector2 value)

Disassembly:
	0x03C3F648 STR S2, [X31 + 0x8]
	0x03C3F64C CBNZ X8, 0x3C3F664
	0x03C3F650 ADRP X0, 0xFFFFFFFFFCEC8000
	0x03C3F654 ADD X0, X0, 0x389
	0x03C3F658 BL 0x1C16CB8
	0x03C3F65C MOV X8, X0
	0x03C3F660 STR X0, [X20 + 0x9B0]
	0x03C3F664 ADD X1, X31, 0x0
	0x03C3F668 MOV X0, X19
	0x03C3F66C BLR X8
	0x03C3F670 LDP X20, X19, [X31 + 0x20]
	0x03C3F674 LDR X30, [X31 + 0x10]
	0x03C3F678 ADD X31, X31, 0x30
	0x03C3F67C RET
	0x03C3F680 STP X30, X21, [X31 - 0x20]!
	0x03C3F684 STP X20, X19, [X31 + 0x10]
	0x03C3F688 ADRP X21, 0x7A6000
	0x03C3F68C LDR X2, [X21 + 0x9B0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2264]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51560448
	012 Add X0, X0, 3846
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+2264], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: UnityEngine.Vector2 get_anchorMax()

Disassembly:
	0x03C3F6D4 MOV X19, X1
	0x03C3F6D8 MOV X20, X0
	0x03C3F6DC CBNZ X2, 0x3C3F6F4
	0x03C3F6E0 ADRP X0, 0xFFFFFFFFFCEC0000
	0x03C3F6E4 ADD X0, X0, 0x473
	0x03C3F6E8 BL 0x1C16CB8
	0x03C3F6EC MOV X2, X0
	0x03C3F6F0 STR X0, [X21 + 0x9B8]
	0x03C3F6F4 MOV X0, X20
	0x03C3F6F8 MOV X1, X19
	0x03C3F6FC LDP X20, X19, [X31 + 0x10]
	0x03C3F700 LDP X30, X21, [X31], #0x20
	0x03C3F704 BR X2
	0x03C3F708 STP X30, X21, [X31 - 0x20]!
	0x03C3F70C STP X20, X19, [X31 + 0x10]
	0x03C3F710 ADRP X21, 0x7A6000
	0x03C3F714 LDR X2, [X21 + 0x9C0]
	0x03C3F718 MOV X19, X1
	0x03C3F71C MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2272]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51535872
	011 Add X0, X0, 2857
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+2272], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_anchorMax(UnityEngine.Vector2 value)

Disassembly:
	0x03C3F764 MOV X0, X31
	0x03C3F768 FMUL S0, S0, S3
	0x03C3F76C FMUL S1, S1, S3
	0x03C3F770 FMUL S2, S2, S3
	0x03C3F774 LDR X30, [X31], #0x10
	0x03C3F778 B 0x3C2AB94
	0x03C3F77C STP X30, X19, [X31 - 0x10]!
	0x03C3F780 ADRP X8, 0xFFFFFFFFFCEAB000
	0x03C3F784 LDR V3, [X8 + 0x104]
	0x03C3F788 MOV X19, X0
	0x03C3F78C MOV X0, X31
	0x03C3F790 FMUL S0, S0, S3
	0x03C3F794 FMUL S1, S1, S3
	0x03C3F798 FMUL S2, S2, S3
	0x03C3F79C BL 0x3C2A574
	0x03C3F7A0 MOV X0, X19
	0x03C3F7A4 LDP X30, X19, [X31], #0x10
	0x03C3F7A8 B 0x3C3F7AC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2280]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51597312
	012 Add X0, X0, 1042
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+2280], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: UnityEngine.Vector2 get_anchoredPosition()

Disassembly:
	0x03C3F7F0 LDP X20, X19, [X31 + 0x20]
	0x03C3F7F4 LDR X30, [X31 + 0x10]
	0x03C3F7F8 ADD X31, X31, 0x30
	0x03C3F7FC RET
	0x03C3F800 STR X30, [X31 - 0x10]!
	0x03C3F804 BL 0x3C3F830
	0x03C3F808 MOV X0, X31
	0x03C3F80C BL 0x3C2A60C
	0x03C3F810 ADRP X8, 0xFFFFFFFFFCEAB000
	0x03C3F814 LDR V3, [X8 + 0x448]
	0x03C3F818 MOV X0, X31
	0x03C3F81C FMUL S0, S0, S3
	0x03C3F820 FMUL S1, S1, S3
	0x03C3F824 FMUL S2, S2, S3
	0x03C3F828 LDR X30, [X31], #0x10
	0x03C3F82C B 0x3C2AB94
	0x03C3F830 SUB X31, X31, 0x30
	0x03C3F834 STP X31, X30, [X31 + 0x8]
	0x03C3F838 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2288]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51621888
	011 Add X0, X0, 603
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+2288], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_anchoredPosition(UnityEngine.Vector2 value)

Disassembly:
	0x03C3F880 ADD X31, X31, 0x30
	0x03C3F884 RET
	0x03C3F888 STP X30, X19, [X31 - 0x10]!
	0x03C3F88C ADRP X8, 0xFFFFFFFFFCEAB000
	0x03C3F890 LDR V3, [X8 + 0x104]
	0x03C3F894 MOV X19, X0
	0x03C3F898 MOV X0, X31
	0x03C3F89C FMUL S0, S0, S3
	0x03C3F8A0 FMUL S1, S1, S3
	0x03C3F8A4 FMUL S2, S2, S3
	0x03C3F8A8 BL 0x3C2A574
	0x03C3F8AC MOV X0, X19
	0x03C3F8B0 LDP X30, X19, [X31], #0x10
	0x03C3F8B4 B 0x3C3F8B8
	0x03C3F8B8 SUB X31, X31, 0x30
	0x03C3F8BC STR X30, [X31 + 0x10]
	0x03C3F8C0 STP X20, X19, [X31 + 0x20]
	0x03C3F8C4 ADRP X20, 0x7A6000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2296]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51671040
	012 Add X0, X0, 880
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+2296], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: UnityEngine.Vector2 get_sizeDelta()

Disassembly:
	0x03C3F90C STP D11, D10, [X31 - 0x30]!
	0x03C3F910 STP D9, D8, [X31 + 0x10]
	0x03C3F914 STP X30, X19, [X31 + 0x20]
	0x03C3F918 BL 0x3C3DEB4
	0x03C3F91C ADRP X19, 0x799000
	0x03C3F920 LDRB W8, [X19 + 0xB70]
	0x03C3F924 MOV V8.16B, V0.16B
	0x03C3F928 MOV V9.16B, V1.16B
	0x03C3F92C MOV V10.16B, V2.16B
	0x03C3F930 MOV V11.16B, V3.16B
	0x03C3F934 CBNZ W8, 0x3C3F94C
	0x03C3F938 ADRP X0, 0x4B4000
	0x03C3F93C LDR X0, [X0 + 0x5A0]
	0x03C3F940 BL 0x1C16CF4
	0x03C3F944 MOVZ W8, 0x1
	0x03C3F948 STRB W8, [X19 + 0xB70]
	0x03C3F94C ADRP X8, 0x4B4000
	0x03C3F950 LDR X8, [X8 + 0x5A0]
	0x03C3F954 MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2304]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51564544
	011 Add X0, X0, 587
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+2304], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_sizeDelta(UnityEngine.Vector2 value)

Disassembly:
	0x03C3F99C LDRB W8, [X19 + 0x786]
	0x03C3F9A0 MOV V8.16B, V0.16B
	0x03C3F9A4 MOV V9.16B, V1.16B
	0x03C3F9A8 MOV V10.16B, V2.16B
	0x03C3F9AC MOV V11.16B, V3.16B
	0x03C3F9B0 CBNZ W8, 0x3C3F9C8
	0x03C3F9B4 ADRP X0, 0x4B4000
	0x03C3F9B8 LDR X0, [X0 + 0x5A0]
	0x03C3F9BC BL 0x1C16CF4
	0x03C3F9C0 MOVZ W8, 0x1
	0x03C3F9C4 STRB W8, [X19 + 0x786]
	0x03C3F9C8 ADRP X8, 0x4B4000
	0x03C3F9CC LDR X8, [X8 + 0x5A0]
	0x03C3F9D0 MOV V0.16B, V8.16B
	0x03C3F9D4 MOV V1.16B, V9.16B
	0x03C3F9D8 LDP X30, X19, [X31 + 0x20]
	0x03C3F9DC LDR X8, [X8]
	0x03C3F9E0 LDP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2312]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51679232
	012 Add X0, X0, 1288
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+2312], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: UnityEngine.Vector2 get_pivot()

Disassembly:
	0x03C3FA28 MOV V11.16B, V3.16B
	0x03C3FA2C CBNZ W8, 0x3C3FA44
	0x03C3FA30 ADRP X0, 0x4B4000
	0x03C3FA34 LDR X0, [X0 + 0x5A0]
	0x03C3FA38 BL 0x1C16CF4
	0x03C3FA3C MOVZ W8, 0x1
	0x03C3FA40 STRB W8, [X19 + 0xA1F]
	0x03C3FA44 ADRP X8, 0x4B4000
	0x03C3FA48 LDR X8, [X8 + 0x5A0]
	0x03C3FA4C MOV V0.16B, V8.16B
	0x03C3FA50 MOV V1.16B, V9.16B
	0x03C3FA54 LDP X30, X19, [X31 + 0x20]
	0x03C3FA58 LDR X8, [X8]
	0x03C3FA5C LDP D9, D8, [X31 + 0x10]
	0x03C3FA60 MOV V2.16B, V10.16B
	0x03C3FA64 MOV V3.16B, V11.16B
	0x03C3FA68 LDR X8, [X8 + 0xB8]
	0x03C3FA6C MOV X0, X31
	0x03C3FA70 LDP S4, S5, [X8 + 0x48]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2320]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51671040
	011 Add X0, X0, 959
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+2320], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_pivot(UnityEngine.Vector2 value)

Disassembly:
	0x03C3FAB8 ADRP X0, 0xFFFFFFFFFCEE5000
	0x03C3FABC ADD X0, X0, 0xFE2
	0x03C3FAC0 BL 0x1C16CB8
	0x03C3FAC4 MOV X2, X0
	0x03C3FAC8 STR X0, [X21 + 0x9C8]
	0x03C3FACC MOV X0, X20
	0x03C3FAD0 MOV X1, X19
	0x03C3FAD4 LDP X20, X19, [X31 + 0x10]
	0x03C3FAD8 LDP X30, X21, [X31], #0x20
	0x03C3FADC BR X2
	0x03C3FAE0 STP X30, X21, [X31 - 0x20]!
	0x03C3FAE4 STP X20, X19, [X31 + 0x10]
	0x03C3FAE8 ADRP X21, 0x7A6000
	0x03C3FAEC LDR X2, [X21 + 0x9D0]
	0x03C3FAF0 MOV X19, X1
	0x03C3FAF4 MOV X20, X0
	0x03C3FAF8 CBNZ X2, 0x3C3FB10
	0x03C3FAFC ADRP X0, 0xFFFFFFFFFCEEB000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X8, [X20+2328]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51638272
	012 Add X0, X0, 979
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+2328], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: UnityEngine.Vector3 get_anchoredPosition3D()

Disassembly:
	0x03C3FB44 ADD X0, X0, 0xBEA
	0x03C3FB48 BL 0x1C16CB8
	0x03C3FB4C MOV X2, X0
	0x03C3FB50 STR X0, [X21 + 0x9D8]
	0x03C3FB54 MOV X0, X20
	0x03C3FB58 MOV X1, X19
	0x03C3FB5C LDP X20, X19, [X31 + 0x10]
	0x03C3FB60 LDP X30, X21, [X31], #0x20
	0x03C3FB64 BR X2
	0x03C3FB68 STP X30, X21, [X31 - 0x20]!
	0x03C3FB6C STP X20, X19, [X31 + 0x10]
	0x03C3FB70 ADRP X21, 0x7A6000
	0x03C3FB74 LDR X2, [X21 + 0x9E0]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call RectTransform.get_anchoredPosition, X0
	007 Move X0, X19
	008 Move V8, V0
	009 Move V9, V1
	010 Call Transform.get_localPosition, X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Move V0, V8
	014 Move V1, V9
	015 Move D9, [X31+32]
	016 Move D8, [X31+40]
	017 Return X0

Method: System.Void set_anchoredPosition3D(UnityEngine.Vector3 value)

Disassembly:
	0x03C3FBD4 ADD X0, X0, 0xC35
	0x03C3FBD8 BL 0x1C16CB8
	0x03C3FBDC MOV X8, X0
	0x03C3FBE0 STR X0, [X20 + 0x9E8]
	0x03C3FBE4 ADD X1, X31, 0x0
	0x03C3FBE8 MOV X0, X19
	0x03C3FBEC BLR X8
	0x03C3FBF0 LDP S0, S1, [X31]
	0x03C3FBF4 LDR V2, [X31 + 0x8]
	0x03C3FBF8 LDP X20, X19, [X31 + 0x20]
	0x03C3FBFC LDR X30, [X31 + 0x10]
	0x03C3FC00 ADD X31, X31, 0x30

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move V8, V2
	005 Move X19, X0
	006 Call RectTransform.set_anchoredPosition, X0, X1
	007 Move X0, X19
	008 Call Transform.get_localPosition, X0
	009 Move X0, X19
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Move V2, V8
	013 Move V8, [X31+32]

Method: UnityEngine.Vector2 get_offsetMin()

Disassembly:
	0x03C3FC58 ADRP X20, 0x7A6000
	0x03C3FC5C LDR X8, [X20 + 0x9F0]
	0x03C3FC60 MOV X19, X0
	0x03C3FC64 STP S0, S1, [X31]
	0x03C3FC68 STR S2, [X31 + 0x8]
	0x03C3FC6C CBNZ X8, 0x3C3FC84
	0x03C3FC70 ADRP X0, 0xFFFFFFFFFCEE4000
	0x03C3FC74 ADD X0, X0, 0x350
	0x03C3FC78 BL 0x1C16CB8
	0x03C3FC7C MOV X8, X0
	0x03C3FC80 STR X0, [X20 + 0x9F0]
	0x03C3FC84 ADD X1, X31, 0x0
	0x03C3FC88 MOV X0, X19
	0x03C3FC8C BLR X8
	0x03C3FC90 LDP X20, X19, [X31 + 0x20]
	0x03C3FC94 LDR X30, [X31 + 0x10]
	0x03C3FC98 ADD X31, X31, 0x30
	0x03C3FC9C RET
	0x03C3FCA0 STP X30, X21, [X31 - 0x20]!
	0x03C3FCA4 STP X20, X19, [X31 + 0x10]
	0x03C3FCA8 ADRP X21, 0x7A6000

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Call RectTransform.get_anchoredPosition, X0
	009 Move X0, X19
	010 Move V8, V0
	011 Move V9, V1
	012 Call RectTransform.get_sizeDelta, X0
	013 Move X0, X19
	014 Move V10, V0
	015 Move V11, V1
	016 Call RectTransform.get_pivot, X0
	017 Multiply S0, S10, S0
	018 Multiply S1, S11, S1
	019 Subtract S0, S8, S0
	020 Subtract S1, S9, S1
	021 Move X30, [X31+32]
	022 Move X19, [X31+40]
	023 Move D9, [X31+16]
	024 Move D8, [X31+24]
	025 Move D11, [X31+48]
	026 Move D10, [X31+56]
	027 Return X0

Method: System.Void set_offsetMin(UnityEngine.Vector2 value)

Disassembly:
	0x03C3FCAC LDR X2, [X21 + 0x9F0]
	0x03C3FCB0 MOV X19, X1
	0x03C3FCB4 MOV X20, X0
	0x03C3FCB8 CBNZ X2, 0x3C3FCD0
	0x03C3FCBC ADRP X0, 0xFFFFFFFFFCEE4000
	0x03C3FCC0 ADD X0, X0, 0x350
	0x03C3FCC4 BL 0x1C16CB8
	0x03C3FCC8 MOV X2, X0
	0x03C3FCCC STR X0, [X21 + 0x9F0]
	0x03C3FCD0 MOV X0, X20
	0x03C3FCD4 MOV X1, X19
	0x03C3FCD8 LDP X20, X19, [X31 + 0x10]
	0x03C3FCDC LDP X30, X21, [X31], #0x20
	0x03C3FCE0 BR X2
	0x03C3FCE4 STR X30, [X31 - 0x20]!
	0x03C3FCE8 STP X20, X19, [X31 + 0x10]
	0x03C3FCEC ADRP X20, 0x7A6000
	0x03C3FCF0 LDR X1, [X20 + 0x928]
	0x03C3FCF4 MOV X19, X0
	0x03C3FCF8 CBNZ X1, 0x3C3FD10
	0x03C3FCFC ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C3FD00 ADD X0, X0, 0x470
	0x03C3FD04 BL 0x1C16CB8
	0x03C3FD08 MOV X1, X0
	0x03C3FD0C STR X0, [X20 + 0x928]
	0x03C3FD10 MOV X0, X19
	0x03C3FD14 LDP X20, X19, [X31 + 0x10]
	0x03C3FD18 LDR X30, [X31], #0x20
	0x03C3FD1C BR X1
	0x03C3FD20 STP X30, X21, [X31 - 0x20]!
	0x03C3FD24 STP X20, X19, [X31 + 0x10]
	0x03C3FD28 ADRP X21, 0x7A6000
	0x03C3FD2C LDRB W8, [X21 + 0x920]
	0x03C3FD30 MOV X19, X1
	0x03C3FD34 MOV X20, X0
	0x03C3FD38 TBNZ X8, 0x0, 0x3C3FD68
	0x03C3FD3C ADRP X0, 0x4B4000
	0x03C3FD40 LDR X0, [X0 + 0xA28]
	0x03C3FD44 BL 0x1C16CF4
	0x03C3FD48 ADRP X0, 0x4DB000
	0x03C3FD4C LDR X0, [X0 + 0xC70]
	0x03C3FD50 BL 0x1C16CF4
	0x03C3FD54 ADRP X0, 0x520000
	0x03C3FD58 LDR X0, [X0 + 0x810]
	0x03C3FD5C BL 0x1C16CF4
	0x03C3FD60 MOVZ W8, 0x1
	0x03C3FD64 STRB W8, [X21 + 0x920]
	0x03C3FD68 CBZ X20, 0x3C3FDB4
	0x03C3FD6C ADRP X8, 0x4DB000
	0x03C3FD70 LDR X8, [X8 + 0xC70]
	0x03C3FD74 LDR X9, [X20]
	0x03C3FD78 LDR X8, [X8]
	0x03C3FD7C CMP X9, X8
	0x03C3FD80 B.NE 0x3C3FDB4
	0x03C3FD84 ADRP X8, 0x4B4000
	0x03C3FD88 LDR X8, [X8 + 0xA28]
	0x03C3FD8C LDR X0, [X8]
	0x03C3FD90 LDR W8, [X0 + 0xE0]
	0x03C3FD94 CBNZ W8, 0x3C3FD9C
	0x03C3FD98 BL 0x1C16DFC
	0x03C3FD9C ADRP X8, 0x520000

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move V8, V1
	011 Move V9, V0
	012 Move X19, X0
	013 Call RectTransform.get_anchoredPosition, X0
	014 Move X0, X19
	015 Move V10, V0
	016 Move V11, V1
	017 Call RectTransform.get_sizeDelta, X0
	018 Move X0, X19
	019 Move V12, V0
	020 Move V13, V1
	021 Call RectTransform.get_pivot, X0
	022 Multiply S0, S12, S0
	023 Multiply S1, S13, S1
	024 Subtract S0, S10, S0
	025 Subtract S1, S11, S1
	026 Move X0, X19
	027 Subtract S10, S9, S0
	028 Subtract S11, S8, S1
	029 Call RectTransform.get_sizeDelta, X0
	030 Subtract S0, S0, S10
	031 Subtract S1, S1, S11
	032 Move X0, X19
	033 Call RectTransform.set_sizeDelta, X0, X1
	034 Move X0, X19
	035 Call RectTransform.get_anchoredPosition, X0
	036 Move X20, 0x7A3000
	037 Move W8, [X20+2632]
	038 Move V8, V0
	039 Move V9, V1
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x4BD000
	043 Move X0, [X0+3848]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+2632], W8
	047 Move X8, 0x4BD000
	048 Move X8, [X8+3848]
	049 Move X0, X19
	050 Move X8, [X8]
	051 Move X8, [X8+184]
	052 Move S12, [X8+8]
	053 Move S13, [X8+12]
	054 Call RectTransform.get_pivot, X0
	055 Subtract S0, S12, S0
	056 Subtract S1, S13, S1
	057 Multiply S0, S10, S0
	058 Multiply S1, S11, S1
	059 Add S0, S8, S0
	060 Add S1, S9, S1
	061 Move X0, X19
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+48]
	065 Move D9, [X31+32]
	066 Move D8, [X31+40]
	067 Move D11, [X31+16]
	068 Move D10, [X31+24]
	069 Move D13, [X31+80]
	070 Move D12, [X31+88]
	071 Call RectTransform.set_anchoredPosition, X0, X1
	072 Return 

Method: UnityEngine.Vector2 get_offsetMax()

Disassembly:
	0x03C3FDA0 LDR X8, [X8 + 0x810]
	0x03C3FDA4 MOV X1, X20
	0x03C3FDA8 MOV X2, X31
	0x03C3FDAC LDR X0, [X8]
	0x03C3FDB0 BL 0x3C06B0C
	0x03C3FDB4 ADRP X21, 0x7A6000
	0x03C3FDB8 LDR X3, [X21 + 0x930]
	0x03C3FDBC CBNZ X3, 0x3C3FDD4
	0x03C3FDC0 ADRP X0, 0xFFFFFFFFFCEDE000
	0x03C3FDC4 ADD X0, X0, 0x2DF
	0x03C3FDC8 BL 0x1C16CB8
	0x03C3FDCC MOV X3, X0
	0x03C3FDD0 STR X0, [X21 + 0x930]
	0x03C3FDD4 MOV X0, X20
	0x03C3FDD8 MOV X1, X19
	0x03C3FDDC LDP X20, X19, [X31 + 0x10]
	0x03C3FDE0 MOVZ W2, 0x1
	0x03C3FDE4 LDP X30, X21, [X31], #0x20
	0x03C3FDE8 BR X3
	0x03C3FDEC STP X30, X21, [X31 - 0x20]!
	0x03C3FDF0 STP X20, X19, [X31 + 0x10]
	0x03C3FDF4 ADRP X21, 0x7A6000
	0x03C3FDF8 LDR X3, [X21 + 0x930]
	0x03C3FDFC MOV X19, X1
	0x03C3FE00 MOV X20, X0
	0x03C3FE04 CBNZ X3, 0x3C3FE1C
	0x03C3FE08 ADRP X0, 0xFFFFFFFFFCEDE000
	0x03C3FE0C ADD X0, X0, 0x2DF
	0x03C3FE10 BL 0x1C16CB8
	0x03C3FE14 MOV X3, X0
	0x03C3FE18 STR X0, [X21 + 0x930]
	0x03C3FE1C MOV X0, X20
	0x03C3FE20 MOV X1, X19
	0x03C3FE24 LDP X20, X19, [X31 + 0x10]
	0x03C3FE28 MOVZ W2, 0x1
	0x03C3FE2C LDP X30, X21, [X31], #0x20
	0x03C3FE30 BR X3
	0x03C3FE34 STR X30, [X31 - 0x20]!
	0x03C3FE38 STP X20, X19, [X31 + 0x10]
	0x03C3FE3C ADRP X20, 0x7A6000

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, X0
	011 Call RectTransform.get_anchoredPosition, X0
	012 Move X0, X19
	013 Move V8, V0
	014 Move V9, V1
	015 Call RectTransform.get_sizeDelta, X0
	016 Move X20, 0x7A3000
	017 Move W8, [X20+2632]
	018 Move V10, V0
	019 Move V11, V1
	020 Compare W8, 0
	021 JumpIfNotEqual {27}
	022 Move X0, 0x4BD000
	023 Move X0, [X0+3848]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2632], W8
	027 Move X8, 0x4BD000
	028 Move X8, [X8+3848]
	029 Move X0, X19
	030 Move X8, [X8]
	031 Move X8, [X8+184]
	032 Move S12, [X8+8]
	033 Move S13, [X8+12]
	034 Call RectTransform.get_pivot, X0
	035 Subtract S0, S12, S0
	036 Subtract S1, S13, S1
	037 Multiply S0, S10, S0
	038 Multiply S1, S11, S1
	039 Add S0, S8, S0
	040 Add S1, S9, S1
	041 Move X20, [X31+64]
	042 Move X19, [X31+72]
	043 Move X30, [X31+48]
	044 Move D9, [X31+32]
	045 Move D8, [X31+40]
	046 Move D11, [X31+16]
	047 Move D10, [X31+24]
	048 Move D13, [X31+80]
	049 Move D12, [X31+88]
	050 Return X0

Method: System.Void set_offsetMax(UnityEngine.Vector2 value)

Disassembly:
	0x03C3FE40 LDR X1, [X20 + 0x928]
	0x03C3FE44 MOV X19, X0
	0x03C3FE48 CBNZ X1, 0x3C3FE60
	0x03C3FE4C ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C3FE50 ADD X0, X0, 0x470
	0x03C3FE54 BL 0x1C16CB8
	0x03C3FE58 MOV X1, X0
	0x03C3FE5C STR X0, [X20 + 0x928]
	0x03C3FE60 MOV X0, X19
	0x03C3FE64 LDP X20, X19, [X31 + 0x10]
	0x03C3FE68 LDR X30, [X31], #0x20
	0x03C3FE6C BR X1
	0x03C3FE70 STP X30, X21, [X31 - 0x20]!
	0x03C3FE74 STP X20, X19, [X31 + 0x10]
	0x03C3FE78 ADRP X21, 0x7A6000
	0x03C3FE7C LDR X3, [X21 + 0x930]
	0x03C3FE80 MOV X19, X1
	0x03C3FE84 MOV X20, X0
	0x03C3FE88 CBNZ X3, 0x3C3FEA0
	0x03C3FE8C ADRP X0, 0xFFFFFFFFFCEDE000
	0x03C3FE90 ADD X0, X0, 0x2DF
	0x03C3FE94 BL 0x1C16CB8
	0x03C3FE98 MOV X3, X0
	0x03C3FE9C STR X0, [X21 + 0x930]
	0x03C3FEA0 MOV X0, X20
	0x03C3FEA4 MOV X1, X19
	0x03C3FEA8 LDP X20, X19, [X31 + 0x10]
	0x03C3FEAC MOVZ W2, 0x1
	0x03C3FEB0 LDP X30, X21, [X31], #0x20
	0x03C3FEB4 BR X3
	0x03C3FEB8 STR X30, [X31 - 0x30]!
	0x03C3FEBC STP X22, X21, [X31 + 0x10]
	0x03C3FEC0 STP X20, X19, [X31 + 0x20]
	0x03C3FEC4 ADRP X22, 0x7A6000
	0x03C3FEC8 LDR X3, [X22 + 0x930]
	0x03C3FECC MOV W20, W2
	0x03C3FED0 MOV X19, X1
	0x03C3FED4 MOV X21, X0
	0x03C3FED8 CBNZ X3, 0x3C3FEF0
	0x03C3FEDC ADRP X0, 0xFFFFFFFFFCEDE000
	0x03C3FEE0 ADD X0, X0, 0x2DF
	0x03C3FEE4 BL 0x1C16CB8
	0x03C3FEE8 MOV X3, X0
	0x03C3FEEC STR X0, [X22 + 0x930]
	0x03C3FEF0 AND W2, W20, 0x1
	0x03C3FEF4 MOV X0, X21
	0x03C3FEF8 MOV X1, X19
	0x03C3FEFC LDP X20, X19, [X31 + 0x20]
	0x03C3FF00 LDP X22, X21, [X31 + 0x10]
	0x03C3FF04 LDR X30, [X31], #0x30
	0x03C3FF08 BR X3
	0x03C3FF0C SUB X31, X31, 0x60
	0x03C3FF10 STP X30, X21, [X31 + 0x40]
	0x03C3FF14 STP X20, X19, [X31 + 0x50]
	0x03C3FF18 ADRP X21, 0x7A6000
	0x03C3FF1C MOV X19, X8
	0x03C3FF20 LDR X8, [X21 + 0x9F8]
	0x03C3FF24 MOV X20, X0
	0x03C3FF28 MOVI V0.2D, 0x0
	0x03C3FF2C STP V0, V0, [X31 + 0x20]
	0x03C3FF30 STP V0, V0, [X31]
	0x03C3FF34 CBNZ X8, 0x3C3FF4C
	0x03C3FF38 ADRP X0, 0xFFFFFFFFFCEDB000

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move V8, V1
	013 Move V9, V0
	014 Move X19, X0
	015 Call RectTransform.get_anchoredPosition, X0
	016 Move X0, X19
	017 Move V10, V0
	018 Move V11, V1
	019 Call RectTransform.get_sizeDelta, X0
	020 Move X20, 0x7A3000
	021 Move W8, [X20+2632]
	022 Move V12, V0
	023 Move V13, V1
	024 Compare W8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, 0x4BD000
	027 Move X0, [X0+3848]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2632], W8
	031 Move X8, 0x4BD000
	032 Move X8, [X8+3848]
	033 Move X0, X19
	034 Move X8, [X8]
	035 Move X8, [X8+184]
	036 Move S14, [X8+8]
	037 Move S15, [X8+12]
	038 Call RectTransform.get_pivot, X0
	039 Subtract S0, S14, S0
	040 Subtract S1, S15, S1
	041 Multiply S0, S12, S0
	042 Multiply S1, S13, S1
	043 Add S0, S10, S0
	044 Add S1, S11, S1
	045 Move X0, X19
	046 Subtract S10, S9, S0
	047 Subtract S11, S8, S1
	048 Call RectTransform.get_sizeDelta, X0
	049 Add S0, S0, S10
	050 Add S1, S1, S11
	051 Move X0, X19
	052 Call RectTransform.set_sizeDelta, X0, X1
	053 Move X0, X19
	054 Call RectTransform.get_anchoredPosition, X0
	055 Move X0, X19
	056 Move V8, V0
	057 Move V9, V1
	058 Call RectTransform.get_pivot, X0
	059 Multiply S0, S10, S0
	060 Multiply S1, S11, S1
	061 Add S0, S8, S0
	062 Add S1, S9, S1
	063 Move X0, X19
	064 Move X20, [X31+80]
	065 Move X19, [X31+88]
	066 Move X30, [X31+64]
	067 Move D9, [X31+48]
	068 Move D8, [X31+56]
	069 Move D11, [X31+32]
	070 Move D10, [X31+40]
	071 Move D13, [X31+16]
	072 Move D12, [X31+24]
	073 Move D15, [X31+96]
	074 Move D14, [X31+104]
	075 Call RectTransform.set_anchoredPosition, X0, X1
	076 Return 

Method: System.Void ForceUpdateRectTransforms()

Disassembly:
	0x03C3FF3C ADD X0, X0, 0xE5A
	0x03C3FF40 BL 0x1C16CB8
	0x03C3FF44 MOV X8, X0
	0x03C3FF48 STR X0, [X21 + 0x9F8]
	0x03C3FF4C ADD X1, X31, 0x0
	0x03C3FF50 MOV X0, X20
	0x03C3FF54 BLR X8
	0x03C3FF58 LDP V1, V0, [X31 + 0x20]
	0x03C3FF5C LDP V3, V2, [X31]
	0x03C3FF60 LDP X30, X21, [X31 + 0x40]
	0x03C3FF64 STP V1, V0, [X19 + 0x20]
	0x03C3FF68 STP V3, V2, [X19]
	0x03C3FF6C LDP X20, X19, [X31 + 0x50]
	0x03C3FF70 ADD X31, X31, 0x60
	0x03C3FF74 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A7000
	005 Move X1, [X20+2232]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51535872
	010 Add X0, X0, 2802
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2232], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void GetLocalCorners(UnityEngine.Vector3[] fourCornersArray)

Disassembly:
	0x03C3FF78 STP X30, X21, [X31 - 0x20]!
	0x03C3FF7C STP X20, X19, [X31 + 0x10]
	0x03C3FF80 ADRP X21, 0x7A6000
	0x03C3FF84 LDR X2, [X21 + 0x9F8]
	0x03C3FF88 MOV X19, X1
	0x03C3FF8C MOV X20, X0
	0x03C3FF90 CBNZ X2, 0x3C3FFA8
	0x03C3FF94 ADRP X0, 0xFFFFFFFFFCEDB000
	0x03C3FF98 ADD X0, X0, 0xE5A
	0x03C3FF9C BL 0x1C16CB8
	0x03C3FFA0 MOV X2, X0
	0x03C3FFA4 STR X0, [X21 + 0x9F8]
	0x03C3FFA8 MOV X0, X20
	0x03C3FFAC MOV X1, X19
	0x03C3FFB0 LDP X20, X19, [X31 + 0x10]
	0x03C3FFB4 LDP X30, X21, [X31], #0x20
	0x03C3FFB8 BR X2
	0x03C3FFBC STP X30, X21, [X31 - 0x20]!
	0x03C3FFC0 STP X20, X19, [X31 + 0x10]
	0x03C3FFC4 ADRP X21, 0x7A6000
	0x03C3FFC8 LDR X2, [X21 + 0xA00]
	0x03C3FFCC MOV X19, X1
	0x03C3FFD0 MOV X20, X0
	0x03C3FFD4 CBNZ X2, 0x3C3FFEC
	0x03C3FFD8 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C3FFDC ADD X0, X0, 0x2FC
	0x03C3FFE0 BL 0x1C16CB8
	0x03C3FFE4 MOV X2, X0
	0x03C3FFE8 STR X0, [X21 + 0xA00]
	0x03C3FFEC MOV X0, X20
	0x03C3FFF0 MOV X1, X19
	0x03C3FFF4 LDP X20, X19, [X31 + 0x10]
	0x03C3FFF8 LDP X30, X21, [X31], #0x20
	0x03C3FFFC BR X2
	0x03C40000 SUB X31, X31, 0x40
	0x03C40004 STR X30, [X31 + 0x20]
	0x03C40008 STP X20, X19, [X31 + 0x30]
	0x03C4000C ADRP X20, 0x7A5000
	0x03C40010 LDR X8, [X20 + 0xA08]
	0x03C40014 MOV X19, X0
	0x03C40018 STP S0, S1, [X31 + 0x10]
	0x03C4001C STR S2, [X31 + 0x18]
	0x03C40020 STP S3, S4, [X31]
	0x03C40024 STP S5, S6, [X31 + 0x8]
	0x03C40028 CBNZ X8, 0x3C40040
	0x03C4002C ADRP X0, 0xFFFFFFFFFCECD000
	0x03C40030 ADD X0, X0, 0x99
	0x03C40034 BL 0x1C16CB8
	0x03C40038 MOV X8, X0
	0x03C4003C STR X0, [X20 + 0xA08]
	0x03C40040 ADD X1, X31, 0x10
	0x03C40044 ADD X2, X31, 0x0
	0x03C40048 MOV X0, X19
	0x03C4004C BLR X8
	0x03C40050 LDP X20, X19, [X31 + 0x30]
	0x03C40054 LDR X30, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move W8, [X21+2240]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x4B5000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x521000
	017 Move X0, [X0+2048]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2240], W8
	021 Compare X19, 0
	022 JumpIfEqual {52}
	023 Move W8, [X19+24]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X0, X20
	026 Call RectTransform.get_rect, X0
	027 Move W8, [X19+24]
	028 Compare W8, 0
	029 JumpIfEqual {69}
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move [X19+32], S0
	032 Move [X19+40], S1
	033 Move [X19+40], W31
	034 Add S3, S3, S1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move [X19+44], S0
	037 Move [X19+52], S3
	038 Move [X19+52], W31
	039 Add S0, S2, S0
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move [X19+56], S0
	042 Move [X19+64], S3
	043 Move [X19+64], W31
	044 Move [X19+68], S0
	045 Move [X19+76], S1
	046 Move [X19+76], W31
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 
	052 Move X8, 0x4B4000
	053 Move X8, [X8+2600]
	054 Move X19, 0x520000
	055 Move X0, [X8]
	056 Move W8, [X0+224]
	057 Move X19, [X19+2048]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, [X19]
	062 Move X20, [X31+16]
	063 Move X19, [X31+24]
	064 Move X1, X31
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Call Debug.LogError, X0
	068 Return 
	069 Call 0x1C17F28

Method: System.Void GetWorldCorners(UnityEngine.Vector3[] fourCornersArray)

Disassembly:
	0x03C40058 ADD X31, X31, 0x40
	0x03C4005C RET
	0x03C40060 STR X30, [X31 - 0x30]!
	0x03C40064 STP X22, X21, [X31 + 0x10]
	0x03C40068 STP X20, X19, [X31 + 0x20]
	0x03C4006C ADRP X22, 0x7A5000
	0x03C40070 LDR X3, [X22 + 0xA08]
	0x03C40074 MOV X19, X2
	0x03C40078 MOV X20, X1
	0x03C4007C MOV X21, X0
	0x03C40080 CBNZ X3, 0x3C40098
	0x03C40084 ADRP X0, 0xFFFFFFFFFCECD000
	0x03C40088 ADD X0, X0, 0x99
	0x03C4008C BL 0x1C16CB8
	0x03C40090 MOV X3, X0
	0x03C40094 STR X0, [X22 + 0xA08]
	0x03C40098 MOV X0, X21
	0x03C4009C MOV X1, X20
	0x03C400A0 MOV X2, X19
	0x03C400A4 LDP X20, X19, [X31 + 0x20]
	0x03C400A8 LDP X22, X21, [X31 + 0x10]
	0x03C400AC LDR X30, [X31], #0x30
	0x03C400B0 BR X3
	0x03C400B4 SUB X31, X31, 0x40
	0x03C400B8 STR X30, [X31 + 0x20]
	0x03C400BC STP X20, X19, [X31 + 0x30]
	0x03C400C0 ADRP X20, 0x7A5000
	0x03C400C4 LDR X8, [X20 + 0xA10]
	0x03C400C8 MOV X19, X0
	0x03C400CC STP S0, S1, [X31 + 0x10]
	0x03C400D0 STR S2, [X31 + 0x18]
	0x03C400D4 STP S3, S4, [X31]
	0x03C400D8 STP S5, S6, [X31 + 0x8]
	0x03C400DC CBNZ X8, 0x3C400F4
	0x03C400E0 ADRP X0, 0xFFFFFFFFFCEBF000
	0x03C400E4 ADD X0, X0, 0x4BB
	0x03C400E8 BL 0x1C16CB8
	0x03C400EC MOV X8, X0
	0x03C400F0 STR X0, [X20 + 0xA10]
	0x03C400F4 ADD X1, X31, 0x10
	0x03C400F8 ADD X2, X31, 0x0
	0x03C400FC MOV X0, X19
	0x03C40100 BLR X8
	0x03C40104 LDP X20, X19, [X31 + 0x30]
	0x03C40108 LDR X30, [X31 + 0x20]
	0x03C4010C ADD X31, X31, 0x40
	0x03C40110 RET
	0x03C40114 STR X30, [X31 - 0x30]!
	0x03C40118 STP X22, X21, [X31 + 0x10]
	0x03C4011C STP X20, X19, [X31 + 0x20]
	0x03C40120 ADRP X22, 0x7A5000
	0x03C40124 LDR X3, [X22 + 0xA10]
	0x03C40128 MOV X19, X2
	0x03C4012C MOV X20, X1
	0x03C40130 MOV X21, X0
	0x03C40134 CBNZ X3, 0x3C4014C
	0x03C40138 ADRP X0, 0xFFFFFFFFFCEBF000
	0x03C4013C ADD X0, X0, 0x4BB
	0x03C40140 BL 0x1C16CB8
	0x03C40144 MOV X3, X0
	0x03C40148 STR X0, [X22 + 0xA10]
	0x03C4014C MOV X0, X21
	0x03C40150 MOV X1, X20
	0x03C40154 MOV X2, X19
	0x03C40158 LDP X20, X19, [X31 + 0x20]
	0x03C4015C LDP X22, X21, [X31 + 0x10]
	0x03C40160 LDR X30, [X31], #0x30
	0x03C40164 BR X3
	0x03C40168 STR X30, [X31 - 0x30]!
	0x03C4016C STP X22, X21, [X31 + 0x10]
	0x03C40170 STP X20, X19, [X31 + 0x20]
	0x03C40174 ADRP X22, 0x7A5000
	0x03C40178 LDR X3, [X22 + 0x938]
	0x03C4017C MOV X19, X2
	0x03C40180 MOV X20, X1
	0x03C40184 MOV X21, X0
	0x03C40188 CBNZ X3, 0x3C401A0
	0x03C4018C ADRP X0, 0xFFFFFFFFFCEBF000
	0x03C40190 ADD X0, X0, 0x417
	0x03C40194 BL 0x1C16CB8
	0x03C40198 MOV X3, X0
	0x03C4019C STR X0, [X22 + 0x938]
	0x03C401A0 MOV X0, X21
	0x03C401A4 MOV X1, X20
	0x03C401A8 MOV X2, X19
	0x03C401AC LDP X20, X19, [X31 + 0x20]
	0x03C401B0 LDP X22, X21, [X31 + 0x10]
	0x03C401B4 LDR X30, [X31], #0x30
	0x03C401B8 BR X3
	0x03C401BC STR X30, [X31 - 0x30]!
	0x03C401C0 STP X22, X21, [X31 + 0x10]
	0x03C401C4 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+128], X30
	003 Move [X31+136], X21
	004 Move [X31+144], X20
	005 Move [X31+152], X19
	006 Move X21, 0x7A6000
	007 Move W8, [X21+2241]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x4B4000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x520000
	018 Move X0, [X0+2056]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2241], W8
	022 NotImplemented "Instruction MOVI not yet implemented."
	023 Move [X31+32], V0
	024 Move [X31+40], V0
	025 Move [X31], V0
	026 Move [X31+8], V0
	027 Compare X19, 0
	028 JumpIfEqual {90}
	029 Move W8, [X19+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X20
	032 Move X1, X19
	033 Call RectTransform.GetLocalCorners, X0, X1
	034 Move X21, 0x7A6000
	035 Move X8, [X21+728]
	036 Compare X8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, -51466240
	039 Add X0, X0, 2364
	040 Call 0x1C17CB8
	041 Move X8, X0
	042 Move [X21+728], X0
	043 Move X0, X20
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Compare X0, 0
	046 JumpIfEqual {109}
	047 Move X21, 0x7A6000
	048 Move X8, [X21+2560]
	049 Move X20, X0
	050 NotImplemented "Instruction MOVI not yet implemented."
	051 Move [X31+96], V0
	052 Move [X31+104], V0
	053 Move [X31+64], V0
	054 Move [X31+72], V0
	055 Compare X8, 0
	056 JumpIfNotEqual {62}
	057 Move X0, -51699712
	058 Add X0, X0, 764
	059 Call 0x1C17CB8
	060 Move X8, X0
	061 Move [X21+2560], X0
	062 Add X1, X31, 64
	063 Move X0, X20
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move V0, [X31+64]
	066 Move V1, [X31+80]
	067 Move V2, [X31+96]
	068 Move V3, [X31+112]
	069 Move X20, X31
	070 Add X21, X19, 40
	071 Move [X31], V0
	072 Move [X31+8], V1
	073 Move [X31+32], V2
	074 Move [X31+40], V3
	075 Move W8, [X19+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move S0, [X21-8]
	078 Move S1, [X21-4]
	079 Move V2, [X21]
	080 Add X0, X31, 0
	081 Move X1, X31
	082 Call Matrix4x4.MultiplyPoint, X0, X1
	083 Move W8, [X19+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Add X20, X20, 1
	086 Move [X21-8], S0
	087 Move [X21], S1
	088 Move [X21+12], S2
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X8, 0x4B4000
	091 Move X8, [X8+2600]
	092 Move X19, 0x520000
	093 Move X0, [X8]
	094 Move W8, [X0+224]
	095 Move X19, [X19+2056]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, [X19]
	100 Move X1, X31
	101 Call Debug.LogError, X0
	102 Move X20, [X31+144]
	103 Move X19, [X31+152]
	104 Move X30, [X31+128]
	105 Move X21, [X31+136]
	106 Add X31, X31, 160
	107 Return 
	108 Call 0x1C17F28
	109 Call 0x1C17F20

Method: System.Void SetSizeWithCurrentAnchors(UnityEngine.RectTransform/Axis axis, System.Single size)

Disassembly:
	0x03C40234 MOV X0, X31
	0x03C40238 MOV W20, W1
	0x03C4023C FMUL S0, S0, S3
	0x03C40240 FMUL S1, S1, S3
	0x03C40244 FMUL S2, S2, S3
	0x03C40248 BL 0x3C2A574
	0x03C4024C MOV V15.16B, V0.16B
	0x03C40250 MOV V13.16B, V1.16B
	0x03C40254 MOV V12.16B, V2.16B
	0x03C40258 CMP W20, 0x1
	0x03C4025C MOV V14.16B, V3.16B
	0x03C40260 MOV X0, X19
	0x03C40264 B.NE 0x3C402FC
	0x03C40268 BL 0x3C3F830
	0x03C4026C FMUL S4, S15, S3
	0x03C40270 FMUL S5, S14, S0
	0x03C40274 FMUL S6, S12, S1
	0x03C40278 FMUL S7, S13, S2
	0x03C4027C FMUL S16, S13, S3
	0x03C40280 FMUL S17, S14, S1
	0x03C40284 FMUL S19, S12, S0
	0x03C40288 FMUL S20, S13, S0
	0x03C4028C FMUL S0, S15, S0
	0x03C40290 FMUL S21, S15, S1
	0x03C40294 FMUL S1, S13, S1
	0x03C40298 FMUL S22, S12, S3
	0x03C4029C FMUL S3, S14, S3
	0x03C402A0 FMUL S23, S14, S2
	0x03C402A4 FMUL S24, S12, S2
	0x03C402A8 MOV X0, X19
	0x03C402AC LDP X20, X19, [X31 + 0x50]
	0x03C402B0 LDR X30, [X31 + 0x40]
	0x03C402B4 LDP D9, D8, [X31 + 0x30]
	0x03C402B8 LDP D11, D10, [X31 + 0x20]
	0x03C402BC LDP D13, D12, [X31 + 0x10]
	0x03C402C0 FMUL S18, S15, S2
	0x03C402C4 FADD S2, S4, S5
	0x03C402C8 FADD S4, S16, S17
	0x03C402CC FADD S5, S22, S23
	0x03C402D0 FSUB S0, S3, S0
	0x03C402D4 FADD S2, S6, S2
	0x03C402D8 FADD S3, S18, S4
	0x03C402DC FADD S4, S20, S5
	0x03C402E0 FSUB S5, S0, S1
	0x03C402E4 FSUB S0, S2, S7
	0x03C402E8 FSUB S1, S3, S19
	0x03C402EC FSUB S2, S4, S21
	0x03C402F0 FSUB S3, S5, S24
	0x03C402F4 LDP D15, D14, [X31], #0x60
	0x03C402F8 B 0x3C3F8B8
	0x03C402FC BL 0x3C3DEB4
	0x03C40300 MOV X0, X19
	0x03C40304 MOV V10.16B, V0.16B
	0x03C40308 MOV V9.16B, V1.16B
	0x03C4030C MOV V8.16B, V2.16B
	0x03C40310 MOV V11.16B, V3.16B
	0x03C40314 BL 0x3C3DEB4
	0x03C40318 MOV X0, X31
	0x03C4031C BL 0x3C2A260
	0x03C40320 FMUL S4, S15, S3
	0x03C40324 FMUL S5, S14, S0
	0x03C40328 FMUL S16, S13, S3

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move V8, V0
	010 Move W20, W1
	011 Move X19, X0
	012 Call RectTransform.get_sizeDelta, X0
	013 Move X0, X19
	014 Move V9, V0
	015 Move V10, V1
	016 Call RectTransform.GetParentSize, X0
	017 Compare W20, 0
	018 JumpIfEqual {29}
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, X19
	021 Move V11, V1
	022 Call RectTransform.get_anchorMax, X0
	023 Move X0, X19
	024 Move V10, V1
	025 Call RectTransform.get_anchorMin, X0
	026 Subtract S0, S10, S1
	027 Multiply S0, S11, S0
	028 Subtract S10, S8, S0
	029 Move X0, X19
	030 Move V12, V0
	031 Call RectTransform.get_anchorMax, X0
	032 Move X0, X19
	033 Move V9, V0
	034 Call RectTransform.get_anchorMin, X0
	035 Subtract S0, S9, S0
	036 Multiply S0, S12, S0
	037 Subtract S9, S8, S0
	038 Move X0, X19
	039 Move V0, V9
	040 Move V1, V10
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+40]
	044 Move D9, [X31+24]
	045 Move D8, [X31+32]
	046 Move D11, [X31+8]
	047 Move D10, [X31+16]
	048 Move V12, [X31+64]
	049 Call RectTransform.set_sizeDelta, X0, X1
	050 Return 
	051 Move X0, 0x4BE000
	052 Move X0, [X0+3960]
	053 Call 0x1C17D08
	054 Call 0x1C17F10
	055 Move X19, X0
	056 Move X0, 0x506000
	057 Move X0, [X0+4088]
	058 Call 0x1C17D08
	059 Move X1, X0
	060 Move X0, X19
	061 Move X2, X31
	062 Call IndexOutOfRangeException..ctor, X0, X1
	063 Move X0, 0x507000
	064 Move X0, [X0]
	065 Call 0x1C17D08
	066 Move X1, X0
	067 Move X0, X19
	068 Call 0x1C17DEC

Method: System.Void SendReapplyDrivenProperties(UnityEngine.RectTransform driven)

Disassembly:
	0x03C40430 FMUL S4, S9, S4
	0x03C40434 FMUL S5, S9, S5
	0x03C40438 FMUL S22, S11, S0
	0x03C4043C FMUL S23, S11, S1
	0x03C40440 FMUL S1, S8, S1
	0x03C40444 FMUL S24, S8, S0
	0x03C40448 MOV X0, X19
	0x03C4044C LDP X20, X19, [X31 + 0x50]
	0x03C40450 LDR X30, [X31 + 0x40]
	0x03C40454 LDP D9, D8, [X31 + 0x30]
	0x03C40458 LDP D11, D10, [X31 + 0x20]
	0x03C4045C LDP D13, D12, [X31 + 0x10]
	0x03C40460 FADD S0, S2, S3
	0x03C40464 FADD S2, S16, S17
	0x03C40468 FADD S1, S22, S1
	0x03C4046C FSUB S3, S23, S21
	0x03C40470 FADD S0, S6, S0
	0x03C40474 FADD S2, S18, S2
	0x03C40478 FADD S6, S20, S1
	0x03C4047C FSUB S3, S3, S5
	0x03C40480 FSUB S0, S0, S7
	0x03C40484 FSUB S1, S2, S19
	0x03C40488 FSUB S2, S6, S4
	0x03C4048C FSUB S3, S3, S24
	0x03C40490 LDP D15, D14, [X31], #0x60
	0x03C40494 B 0x3C3F7AC
	0x03C40498 MOVZ W1, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7A6000
	006 Move X21, 0x4DB000
	007 Move W8, [X20+2242]
	008 Move X21, [X21+3184]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4DB000
	015 Move X0, [X0+3184]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2242], W8
	019 Move X8, [X21]
	020 Move X8, [X8+184]
	021 Move X8, [X8]
	022 Compare X8, 0
	023 JumpIfEqual {33}
	024 Move X3, [X8+24]
	025 Move X0, [X8+64]
	026 Move X2, [X8+40]
	027 Move X1, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 CallNoReturn X3
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 

Method: UnityEngine.Vector2 GetParentSize()

Disassembly:
	0x03C4032C FMUL S17, S14, S1
	0x03C40330 FMUL S19, S12, S0
	0x03C40334 FMUL S20, S13, S0
	0x03C40338 FMUL S0, S15, S0
	0x03C4033C FMUL S22, S12, S3
	0x03C40340 FMUL S3, S14, S3
	0x03C40344 FMUL S23, S14, S2
	0x03C40348 FMUL S6, S12, S1
	0x03C4034C FMUL S18, S15, S2
	0x03C40350 FMUL S21, S15, S1
	0x03C40354 FMUL S1, S13, S1
	0x03C40358 FADD S4, S4, S5
	0x03C4035C FADD S5, S16, S17
	0x03C40360 FADD S16, S22, S23
	0x03C40364 FSUB S0, S3, S0
	0x03C40368 FMUL S7, S13, S2
	0x03C4036C FMUL S2, S12, S2
	0x03C40370 FADD S3, S6, S4
	0x03C40374 FADD S4, S18, S5
	0x03C40378 FADD S5, S20, S16
	0x03C4037C FSUB S0, S0, S1
	0x03C40380 MOV X0, X19
	0x03C40384 FSUB S12, S3, S7
	0x03C40388 FSUB S13, S4, S19
	0x03C4038C FSUB S14, S5, S21
	0x03C40390 FSUB S15, S0, S2
	0x03C40394 BL 0x3C3DEB4
	0x03C40398 FMUL S4, S0, S15
	0x03C4039C FMUL S5, S3, S12
	0x03C403A0 FMUL S16, S1, S15
	0x03C403A4 FMUL S17, S3, S13
	0x03C403A8 FMUL S21, S0, S12
	0x03C403AC FMUL S22, S2, S15
	0x03C403B0 FMUL S23, S3, S15
	0x03C403B4 FMUL S3, S3, S14
	0x03C403B8 FMUL S6, S2, S13
	0x03C403BC FMUL S7, S1, S14
	0x03C403C0 FMUL S18, S0, S14
	0x03C403C4 FMUL S20, S1, S12
	0x03C403C8 FMUL S1, S1, S13
	0x03C403CC FADD S4, S4, S5
	0x03C403D0 FADD S5, S16, S17
	0x03C403D4 FADD S3, S22, S3
	0x03C403D8 FSUB S16, S23, S21
	0x03C403DC FMUL S19, S2, S12
	0x03C403E0 FMUL S0, S0, S13
	0x03C403E4 FMUL S2, S2, S14
	0x03C403E8 FADD S4, S6, S4
	0x03C403EC FADD S5, S18, S5
	0x03C403F0 FADD S3, S20, S3
	0x03C403F4 FSUB S1, S16, S1
	0x03C403F8 FSUB S4, S4, S7
	0x03C403FC FSUB S5, S5, S19
	0x03C40400 FSUB S0, S3, S0
	0x03C40404 FSUB S1, S1, S2
	0x03C40408 FMUL S2, S11, S4
	0x03C4040C FMUL S3, S10, S1
	0x03C40410 FMUL S6, S9, S0
	0x03C40414 FMUL S7, S8, S5
	0x03C40418 FMUL S16, S11, S5
	0x03C4041C FMUL S17, S9, S1
	0x03C40420 FMUL S18, S8, S4
	0x03C40424 FMUL S19, S10, S0
	0x03C40428 FMUL S20, S10, S5
	0x03C4042C FMUL S21, S10, S4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A6000
	005 Move W8, [X20+2243]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x4B4000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move X0, 0x4DB000
	015 Move X0, [X0+3184]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2243], W8
	019 Move X20, 0x7A6000
	020 Move X8, [X20+2344]
	021 Compare X8, 0
	022 JumpIfNotEqual {28}
	023 Move X0, -51658752
	024 Add X0, X0, 1136
	025 Call 0x1C17CB8
	026 Move X8, X0
	027 Move [X20+2344], X0
	028 Move X20, 0x4B4000
	029 Move X20, [X20+1432]
	030 Move X0, X19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Compare X0, 0
	033 JumpIfEqual {40}
	034 Move X8, 0x4DB000
	035 Move X8, [X8+3184]
	036 Move X9, [X0]
	037 Move X8, [X8]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move X19, X31
	041 Move X0, [X20]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X19
	047 Call Object.op_Implicit, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {58}
	052 Compare X19, 0
	053 JumpIfEqual {77}
	054 Move X0, X19
	055 Call RectTransform.get_rect, X0
	056 Move V0, V2
	057 Move V1, V3
	058 Move X19, 0x79A000
	059 Move W8, [X19+1935]
	060 Compare W8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, 0x4BC000
	063 Move X0, [X0+3848]
	064 Call 0x1C17CF4
	065 Move W8, 1
	066 Move [X19+1935], W8
	067 Move X8, 0x4BC000
	068 Move X8, [X8+3848]
	069 Move X8, [X8]
	070 Move X8, [X8+184]
	071 Move S0, [X8]
	072 Move S1, [X8+4]
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Return X0
	077 Call 0x1C17F20

Method: System.Void get_rect_Injected(out UnityEngine.Rect ret)

Disassembly:
	0x03C3F574 LDR X8, [X0 + 0x40]
	0x03C3F578 LDR X3, [X0 + 0x18]
	0x03C3F57C LDR X2, [X0 + 0x28]
	0x03C3F580 MOV X0, X8
	0x03C3F584 BR X3
	0x03C3F588 B 0x3C32494
	0x03C3F58C SUB X31, X31, 0x30
	0x03C3F590 STR X30, [X31 + 0x10]
	0x03C3F594 STP X20, X19, [X31 + 0x20]
	0x03C3F598 ADRP X20, 0x7A6000
	0x03C3F59C LDR X8, [X20 + 0x9A8]
	0x03C3F5A0 MOV X19, X0
	0x03C3F5A4 STR W31, [X31 + 0x8]
	0x03C3F5A8 STR X31, [X31]
	0x03C3F5AC CBNZ X8, 0x3C3F5C4
	0x03C3F5B0 ADRP X0, 0xFFFFFFFFFCEE9000
	0x03C3F5B4 ADD X0, X0, 0xA57

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2248]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51572736
	012 Add X0, X0, 1427
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2248], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_anchorMin_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C3F604 ADRP X0, 0xFFFFFFFFFCEE9000
	0x03C3F608 ADD X0, X0, 0xA57
	0x03C3F60C BL 0x1C16CB8
	0x03C3F610 MOV X2, X0
	0x03C3F614 STR X0, [X21 + 0x9A8]
	0x03C3F618 MOV X0, X20
	0x03C3F61C MOV X1, X19
	0x03C3F620 LDP X20, X19, [X31 + 0x10]
	0x03C3F624 LDP X30, X21, [X31], #0x20
	0x03C3F628 BR X2
	0x03C3F62C SUB X31, X31, 0x30
	0x03C3F630 STR X30, [X31 + 0x10]
	0x03C3F634 STP X20, X19, [X31 + 0x20]
	0x03C3F638 ADRP X20, 0x7A6000
	0x03C3F63C LDR X8, [X20 + 0x9B0]
	0x03C3F640 MOV X19, X0
	0x03C3F644 STP S0, S1, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2256]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51564544
	012 Add X0, X0, 515
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2256], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_anchorMin_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C3F690 MOV X19, X1
	0x03C3F694 MOV X20, X0
	0x03C3F698 CBNZ X2, 0x3C3F6B0
	0x03C3F69C ADRP X0, 0xFFFFFFFFFCEC8000
	0x03C3F6A0 ADD X0, X0, 0x389
	0x03C3F6A4 BL 0x1C16CB8
	0x03C3F6A8 MOV X2, X0
	0x03C3F6AC STR X0, [X21 + 0x9B0]
	0x03C3F6B0 MOV X0, X20
	0x03C3F6B4 MOV X1, X19
	0x03C3F6B8 LDP X20, X19, [X31 + 0x10]
	0x03C3F6BC LDP X30, X21, [X31], #0x20
	0x03C3F6C0 BR X2
	0x03C3F6C4 STP X30, X21, [X31 - 0x20]!
	0x03C3F6C8 STP X20, X19, [X31 + 0x10]
	0x03C3F6CC ADRP X21, 0x7A6000
	0x03C3F6D0 LDR X2, [X21 + 0x9B8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2264]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51560448
	012 Add X0, X0, 3846
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2264], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_anchorMax_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C3F720 CBNZ X2, 0x3C3F738
	0x03C3F724 ADRP X0, 0xFFFFFFFFFCEC8000
	0x03C3F728 ADD X0, X0, 0x3CC
	0x03C3F72C BL 0x1C16CB8
	0x03C3F730 MOV X2, X0
	0x03C3F734 STR X0, [X21 + 0x9C0]
	0x03C3F738 MOV X0, X20
	0x03C3F73C MOV X1, X19
	0x03C3F740 LDP X20, X19, [X31 + 0x10]
	0x03C3F744 LDP X30, X21, [X31], #0x20
	0x03C3F748 BR X2
	0x03C3F74C STR X30, [X31 - 0x10]!
	0x03C3F750 BL 0x3C3DEB4
	0x03C3F754 MOV X0, X31
	0x03C3F758 BL 0x3C2A60C
	0x03C3F75C ADRP X8, 0xFFFFFFFFFCEAB000
	0x03C3F760 LDR V3, [X8 + 0x448]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2272]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51535872
	012 Add X0, X0, 2857
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2272], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_anchorMax_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C3F7AC SUB X31, X31, 0x30
	0x03C3F7B0 STR X30, [X31 + 0x10]
	0x03C3F7B4 STP X20, X19, [X31 + 0x20]
	0x03C3F7B8 ADRP X20, 0x7A6000
	0x03C3F7BC LDR X8, [X20 + 0x9D0]
	0x03C3F7C0 MOV X19, X0
	0x03C3F7C4 STP S0, S1, [X31]
	0x03C3F7C8 STP S2, S3, [X31 + 0x8]
	0x03C3F7CC CBNZ X8, 0x3C3F7E4
	0x03C3F7D0 ADRP X0, 0xFFFFFFFFFCEEB000
	0x03C3F7D4 ADD X0, X0, 0xB61
	0x03C3F7D8 BL 0x1C16CB8
	0x03C3F7DC MOV X8, X0
	0x03C3F7E0 STR X0, [X20 + 0x9D0]
	0x03C3F7E4 ADD X1, X31, 0x0
	0x03C3F7E8 MOV X0, X19
	0x03C3F7EC BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2280]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51597312
	012 Add X0, X0, 1042
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2280], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_anchoredPosition_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C3F83C ADRP X20, 0x7A6000
	0x03C3F840 LDR X8, [X20 + 0x9D8]
	0x03C3F844 MOV X19, X0
	0x03C3F848 STR X31, [X31]
	0x03C3F84C CBNZ X8, 0x3C3F864
	0x03C3F850 ADRP X0, 0xFFFFFFFFFCED7000
	0x03C3F854 ADD X0, X0, 0xBEA
	0x03C3F858 BL 0x1C16CB8
	0x03C3F85C MOV X8, X0
	0x03C3F860 STR X0, [X20 + 0x9D8]
	0x03C3F864 ADD X1, X31, 0x0
	0x03C3F868 MOV X0, X19
	0x03C3F86C BLR X8
	0x03C3F870 LDP S0, S1, [X31]
	0x03C3F874 LDP S2, S3, [X31 + 0x8]
	0x03C3F878 LDP X20, X19, [X31 + 0x20]
	0x03C3F87C LDR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2288]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51621888
	012 Add X0, X0, 603
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2288], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_anchoredPosition_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C3F8C8 LDR X8, [X20 + 0x9E0]
	0x03C3F8CC MOV X19, X0
	0x03C3F8D0 STP S0, S1, [X31]
	0x03C3F8D4 STP S2, S3, [X31 + 0x8]
	0x03C3F8D8 CBNZ X8, 0x3C3F8F0
	0x03C3F8DC ADRP X0, 0xFFFFFFFFFCED0000
	0x03C3F8E0 ADD X0, X0, 0x601
	0x03C3F8E4 BL 0x1C16CB8
	0x03C3F8E8 MOV X8, X0
	0x03C3F8EC STR X0, [X20 + 0x9E0]
	0x03C3F8F0 ADD X1, X31, 0x0
	0x03C3F8F4 MOV X0, X19
	0x03C3F8F8 BLR X8
	0x03C3F8FC LDP X20, X19, [X31 + 0x20]
	0x03C3F900 LDR X30, [X31 + 0x10]
	0x03C3F904 ADD X31, X31, 0x30
	0x03C3F908 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2296]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51671040
	012 Add X0, X0, 880
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2296], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_sizeDelta_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C3F958 MOV V1.16B, V9.16B
	0x03C3F95C LDP X30, X19, [X31 + 0x20]
	0x03C3F960 LDR X8, [X8]
	0x03C3F964 LDP D9, D8, [X31 + 0x10]
	0x03C3F968 MOV V2.16B, V10.16B
	0x03C3F96C MOV V3.16B, V11.16B
	0x03C3F970 LDR X8, [X8 + 0xB8]
	0x03C3F974 MOV X0, X31
	0x03C3F978 LDP S4, S5, [X8 + 0x3C]
	0x03C3F97C LDR V6, [X8 + 0x44]
	0x03C3F980 LDP D11, D10, [X31], #0x30
	0x03C3F984 B 0x3C2A9FC
	0x03C3F988 STP D11, D10, [X31 - 0x30]!
	0x03C3F98C STP D9, D8, [X31 + 0x10]
	0x03C3F990 STP X30, X19, [X31 + 0x20]
	0x03C3F994 BL 0x3C3DEB4
	0x03C3F998 ADRP X19, 0x799000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2304]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51564544
	012 Add X0, X0, 587
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2304], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_sizeDelta_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C3F9E4 MOV V2.16B, V10.16B
	0x03C3F9E8 MOV V3.16B, V11.16B
	0x03C3F9EC LDR X8, [X8 + 0xB8]
	0x03C3F9F0 MOV X0, X31
	0x03C3F9F4 LDP S4, S5, [X8 + 0x18]
	0x03C3F9F8 LDR V6, [X8 + 0x20]
	0x03C3F9FC LDP D11, D10, [X31], #0x30
	0x03C3FA00 B 0x3C2A9FC
	0x03C3FA04 STP D11, D10, [X31 - 0x30]!
	0x03C3FA08 STP D9, D8, [X31 + 0x10]
	0x03C3FA0C STP X30, X19, [X31 + 0x20]
	0x03C3FA10 BL 0x3C3DEB4
	0x03C3FA14 ADRP X19, 0x799000
	0x03C3FA18 LDRB W8, [X19 + 0xA1F]
	0x03C3FA1C MOV V8.16B, V0.16B
	0x03C3FA20 MOV V9.16B, V1.16B
	0x03C3FA24 MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2312]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51679232
	012 Add X0, X0, 1288
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2312], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_pivot_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C3FA74 LDR V6, [X8 + 0x50]
	0x03C3FA78 LDP D11, D10, [X31], #0x30
	0x03C3FA7C B 0x3C2A9FC
	0x03C3FA80 STP X30, X19, [X31 - 0x10]!
	0x03C3FA84 MOV X19, X0
	0x03C3FA88 MOV X0, X31
	0x03C3FA8C BL 0x3C2A8C4
	0x03C3FA90 MOV X0, X19
	0x03C3FA94 LDP X30, X19, [X31], #0x10
	0x03C3FA98 B 0x3C3F7AC
	0x03C3FA9C STP X30, X21, [X31 - 0x20]!
	0x03C3FAA0 STP X20, X19, [X31 + 0x10]
	0x03C3FAA4 ADRP X21, 0x7A6000
	0x03C3FAA8 LDR X2, [X21 + 0x9C8]
	0x03C3FAAC MOV X19, X1
	0x03C3FAB0 MOV X20, X0
	0x03C3FAB4 CBNZ X2, 0x3C3FACC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2320]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51671040
	012 Add X0, X0, 959
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2320], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_pivot_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C3FB00 ADD X0, X0, 0xB61
	0x03C3FB04 BL 0x1C16CB8
	0x03C3FB08 MOV X2, X0
	0x03C3FB0C STR X0, [X21 + 0x9D0]
	0x03C3FB10 MOV X0, X20
	0x03C3FB14 MOV X1, X19
	0x03C3FB18 LDP X20, X19, [X31 + 0x10]
	0x03C3FB1C LDP X30, X21, [X31], #0x20
	0x03C3FB20 BR X2
	0x03C3FB24 STP X30, X21, [X31 - 0x20]!
	0x03C3FB28 STP X20, X19, [X31 + 0x10]
	0x03C3FB2C ADRP X21, 0x7A6000
	0x03C3FB30 LDR X2, [X21 + 0x9D8]
	0x03C3FB34 MOV X19, X1
	0x03C3FB38 MOV X20, X0
	0x03C3FB3C CBNZ X2, 0x3C3FB54
	0x03C3FB40 ADRP X0, 0xFFFFFFFFFCED7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X2, [X21+2328]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51638272
	012 Add X0, X0, 979
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2328], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

