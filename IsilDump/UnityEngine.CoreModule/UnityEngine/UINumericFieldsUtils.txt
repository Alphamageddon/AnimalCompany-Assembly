Type: UnityEngine.UINumericFieldsUtils

Method: System.Boolean TryConvertStringToDouble(System.String str, out System.Double value, out UnityEngine.ExpressionEvaluator/Expression expr)

Disassembly:
	0x03C3E318 ADRP X0, 0x4B5000
	0x03C3E31C LDR X0, [X0 + 0x5A0]
	0x03C3E320 BL 0x1C16CF4
	0x03C3E324 MOVZ W8, 0x1
	0x03C3E328 STRB W8, [X19 + 0x783]
	0x03C3E32C ADRP X8, 0x4B5000
	0x03C3E330 LDR X8, [X8 + 0x5A0]
	0x03C3E334 ADRP X20, 0x79A000
	0x03C3E338 ADRP X19, 0x4DD000
	0x03C3E33C LDRB W9, [X20 + 0x793]
	0x03C3E340 LDR X8, [X8]
	0x03C3E344 LDR X8, [X8 + 0xB8]
	0x03C3E348 LDR V9, [X8]
	0x03C3E34C LDR V8, [X8 + 0x8]
	0x03C3E350 LDR X19, [X19 + 0x610]
	0x03C3E354 CBNZ W9, 0x3C3E36C
	0x03C3E358 ADRP X0, 0x4B6000
	0x03C3E35C LDR X0, [X0 + 0x5A8]
	0x03C3E360 BL 0x1C16CF4
	0x03C3E364 MOVZ W8, 0x1
	0x03C3E368 STRB W8, [X20 + 0x793]
	0x03C3E36C ADRP X8, 0x4B6000
	0x03C3E370 LDR X8, [X8 + 0x5A8]
	0x03C3E374 LDR X9, [X19]
	0x03C3E378 LDP X20, X19, [X31 + 0x20]
	0x03C3E37C LDR X30, [X31 + 0x10]
	0x03C3E380 LDR X8, [X8]
	0x03C3E384 LDR X9, [X9 + 0xB8]
	0x03C3E388 LDR X8, [X8 + 0xB8]
	0x03C3E38C LDR V0, [X8]
	0x03C3E390 STR D9, [X9]
	0x03C3E394 STR S8, [X9 + 0x8]
	0x03C3E398 STUR V0, [X9 + 0xC]
	0x03C3E39C LDP D9, D8, [X31], #0x30
	0x03C3E3A0 RET
	0x03C3E3A4 RET
	0x03C3E3A8 RET
	0x03C3E3AC STR X30, [X31 - 0x30]!
	0x03C3E3B0 STP X22, X21, [X31 + 0x10]
	0x03C3E3B4 STP X20, X19, [X31 + 0x20]
	0x03C3E3B8 ADRP X20, 0x7A7000
	0x03C3E3BC ADRP X21, 0x4DC000
	0x03C3E3C0 LDRB W8, [X20 + 0x8B6]
	0x03C3E3C4 LDR X21, [X21 + 0xC70]
	0x03C3E3C8 MOV X19, X0
	0x03C3E3CC TBNZ X8, 0x0, 0x3C3E3F0
	0x03C3E3D0 ADRP X0, 0x521000
	0x03C3E3D4 LDR X0, [X0 + 0x7F8]
	0x03C3E3D8 BL 0x1C16CF4
	0x03C3E3DC ADRP X0, 0x4DC000
	0x03C3E3E0 LDR X0, [X0 + 0xC70]
	0x03C3E3E4 BL 0x1C16CF4
	0x03C3E3E8 MOVZ W8, 0x1
	0x03C3E3EC STRB W8, [X20 + 0x8B6]
	0x03C3E3F0 LDR X8, [X21]
	0x03C3E3F4 ADRP X22, 0x521000
	0x03C3E3F8 LDR X8, [X8 + 0xB8]
	0x03C3E3FC LDR X20, [X8]
	0x03C3E400 LDR X22, [X22 + 0x7F8]
	0x03C3E404 MOV X0, X20
	0x03C3E408 MOV X1, X19
	0x03C3E40C MOV X2, X31
	0x03C3E410 BL 0x33C0DE4
	0x03C3E414 MOV X8, X0
	0x03C3E418 CBZ X0, 0x3C3E42C
	0x03C3E41C LDR X1, [X22]
	0x03C3E420 LDR X9, [X8]
	0x03C3E424 CMP X9, X1
	0x03C3E428 B.NE 0x3C3E45C
	0x03C3E42C LDR X9, [X21]
	0x03C3E430 MOV X1, X8
	0x03C3E434 MOV X2, X20
	0x03C3E438 LDR X0, [X9 + 0xB8]
	0x03C3E43C BL 0x1C24138
	0x03C3E440 CMP X20, X0
	0x03C3E444 MOV X20, X0
	0x03C3E448 B.NE 0x3C3E404
	0x03C3E44C LDP X20, X19, [X31 + 0x20]
	0x03C3E450 LDP X22, X21, [X31 + 0x10]
	0x03C3E454 LDR X30, [X31], #0x30
	0x03C3E458 RET
	0x03C3E45C MOV X0, X8
	0x03C3E460 BL 0x1C171E0
	0x03C3E464 STR X30, [X31 - 0x30]!
	0x03C3E468 STP X22, X21, [X31 + 0x10]
	0x03C3E46C STP X20, X19, [X31 + 0x20]
	0x03C3E470 ADRP X20, 0x7A7000
	0x03C3E474 ADRP X21, 0x4DC000
	0x03C3E478 LDRB W8, [X20 + 0x8B7]
	0x03C3E47C LDR X21, [X21 + 0xC70]
	0x03C3E480 MOV X19, X0
	0x03C3E484 TBNZ X8, 0x0, 0x3C3E4A8
	0x03C3E488 ADRP X0, 0x521000
	0x03C3E48C LDR X0, [X0 + 0x7F8]
	0x03C3E490 BL 0x1C16CF4
	0x03C3E494 ADRP X0, 0x4DC000
	0x03C3E498 LDR X0, [X0 + 0xC70]
	0x03C3E49C BL 0x1C16CF4
	0x03C3E4A0 MOVZ W8, 0x1
	0x03C3E4A4 STRB W8, [X20 + 0x8B7]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A8000
	007 Move W8, [X22+2216]
	008 Move X20, X2
	009 Move X19, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {38}
	015 Move X0, 0x522000
	016 Move X0, [X0+1920]
	017 Call 0x1C17CF4
	018 Move X0, 0x4DE000
	019 Move X0, [X0+2664]
	020 Call 0x1C17CF4
	021 Move X0, 0x522000
	022 Move X0, [X0+1928]
	023 Call 0x1C17CF4
	024 Move X0, 0x509000
	025 Move X0, [X0+1096]
	026 Call 0x1C17CF4
	027 Move X0, 0x522000
	028 Move X0, [X0+1936]
	029 Call 0x1C17CF4
	030 Move X0, 0x522000
	031 Move X0, [X0+1944]
	032 Call 0x1C17CF4
	033 Move X0, 0x522000
	034 Move X0, [X0+1952]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+2216], W8
	038 Move [X20], X31
	039 Compare X21, 0
	040 JumpIfEqual {125}
	041 Move X22, 0x522000
	042 Move X22, [X22+1928]
	043 Move X0, X21
	044 Move X1, X31
	045 Call String.ToLower, X0
	046 Move X1, [X22]
	047 Move X2, X31
	048 Move X22, X0
	049 Call String.op_Equality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfEqual {64}
	054 Move X8, 0x509000
	055 Move X8, [X8+1096]
	056 Move X0, X22
	057 Move X2, X31
	058 Move X1, [X8]
	059 Call String.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {65}
	064 Move X8, 0x7FF00000
	065 Move X8, 0x522000
	066 Move X8, [X8+1944]
	067 Move X0, X22
	068 Move X2, X31
	069 Move X1, [X8]
	070 Call String.op_Equality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {85}
	075 Move X8, 0x522000
	076 Move X8, [X8+1952]
	077 Move X0, X22
	078 Move X2, X31
	079 Move X1, [X8]
	080 Call String.op_Equality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {94}
	085 Move X8, 0xFFF00000
	086 Move [X19], X8
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move W0, 1
	092 Move X30, [X31+48]
	093 Return X0
	094 Move X8, 0x522000
	095 Move X8, [X8+1936]
	096 Move X0, X22
	097 Move X2, X31
	098 Move X1, [X8]
	099 Call String.op_Equality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {105}
	104 Move X8, 0x7FF80000
	105 Move X8, 0x4DE000
	106 Move X8, [X8+2664]
	107 Move X0, [X8]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X8, 0x522000
	113 Move X8, [X8+1920]
	114 Move X0, X21
	115 Move X1, X19
	116 Move X2, X20
	117 Move X3, [X8]
	118 Move X20, [X31+32]
	119 Move X19, [X31+40]
	120 Move X22, [X31+16]
	121 Move X21, [X31+24]
	122 Move X30, [X31+48]
	123 Call 0x21DF730, X0, X1, X2
	124 Return X0
	125 Call 0x1C17F20

Method: System.Boolean TryConvertStringToDouble(System.String str, System.String initialValueAsString, out System.Double value)

Disassembly:
	0x03C3E4A8 LDR X8, [X21]
	0x03C3E4AC ADRP X22, 0x521000
	0x03C3E4B0 LDR X8, [X8 + 0xB8]
	0x03C3E4B4 LDR X20, [X8]
	0x03C3E4B8 LDR X22, [X22 + 0x7F8]
	0x03C3E4BC MOV X0, X20
	0x03C3E4C0 MOV X1, X19
	0x03C3E4C4 MOV X2, X31
	0x03C3E4C8 BL 0x33C0FDC
	0x03C3E4CC MOV X8, X0
	0x03C3E4D0 CBZ X0, 0x3C3E4E4
	0x03C3E4D4 LDR X1, [X22]
	0x03C3E4D8 LDR X9, [X8]
	0x03C3E4DC CMP X9, X1
	0x03C3E4E0 B.NE 0x3C3E514
	0x03C3E4E4 LDR X9, [X21]
	0x03C3E4E8 MOV X1, X8
	0x03C3E4EC MOV X2, X20
	0x03C3E4F0 LDR X0, [X9 + 0xB8]
	0x03C3E4F4 BL 0x1C24138
	0x03C3E4F8 CMP X20, X0
	0x03C3E4FC MOV X20, X0
	0x03C3E500 B.NE 0x3C3E4BC
	0x03C3E504 LDP X20, X19, [X31 + 0x20]
	0x03C3E508 LDP X22, X21, [X31 + 0x10]
	0x03C3E50C LDR X30, [X31], #0x30
	0x03C3E510 RET
	0x03C3E514 MOV X0, X8
	0x03C3E518 BL 0x1C171E0
	0x03C3E51C SUB X31, X31, 0x30
	0x03C3E520 STP X31, X30, [X31 + 0x8]
	0x03C3E524 STP X20, X19, [X31 + 0x20]
	0x03C3E528 ADRP X20, 0x7A7000
	0x03C3E52C LDR X8, [X20 + 0x8C8]
	0x03C3E530 MOV X19, X0
	0x03C3E534 STR X31, [X31]
	0x03C3E538 CBNZ X8, 0x3C3E550
	0x03C3E53C ADRP X0, 0xFFFFFFFFFCED1000
	0x03C3E540 ADD X0, X0, 0x593
	0x03C3E544 BL 0x1C16CB8
	0x03C3E548 MOV X8, X0
	0x03C3E54C STR X0, [X20 + 0x8C8]
	0x03C3E550 ADD X1, X31, 0x0
	0x03C3E554 MOV X0, X19
	0x03C3E558 BLR X8
	0x03C3E55C LDP S0, S1, [X31]
	0x03C3E560 LDP S2, S3, [X31 + 0x8]
	0x03C3E564 LDP X20, X19, [X31 + 0x20]
	0x03C3E568 LDR X30, [X31 + 0x10]
	0x03C3E56C ADD X31, X31, 0x30
	0x03C3E570 RET
	0x03C3E574 STP X30, X21, [X31 - 0x20]!
	0x03C3E578 STP X20, X19, [X31 + 0x10]
	0x03C3E57C ADRP X21, 0x7A7000
	0x03C3E580 LDR X2, [X21 + 0x8C8]
	0x03C3E584 MOV X19, X1
	0x03C3E588 MOV X20, X0
	0x03C3E58C CBNZ X2, 0x3C3E5A4
	0x03C3E590 ADRP X0, 0xFFFFFFFFFCED1000
	0x03C3E594 ADD X0, X0, 0x593
	0x03C3E598 BL 0x1C16CB8
	0x03C3E59C MOV X2, X0
	0x03C3E5A0 STR X0, [X21 + 0x8C8]
	0x03C3E5A4 MOV X0, X20
	0x03C3E5A8 MOV X1, X19
	0x03C3E5AC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0x7A8000
	009 Move X22, 0x522000
	010 Move W8, [X23+2217]
	011 Move X22, [X22+1960]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x522000
	020 Move X0, [X0+1968]
	021 Call 0x1C17CF4
	022 Move X0, 0x522000
	023 Move X0, [X0+1960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+2217], W8
	027 Move X0, [X22]
	028 Move [X31+16], X31
	029 Move [X31+24], X31
	030 Move [X31+8], X31
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Add X2, X31, 24
	036 Move X0, X21
	037 Move X1, X19
	038 Call UINumericFieldsUtils.TryConvertStringToDouble, X0, X1, X2
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {79}
	043 Move X8, [X31+24]
	044 Compare X8, 0
	045 JumpIfEqual {79}
	046 Move X0, X20
	047 Move X1, X31
	048 Call String.IsNullOrEmpty, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {78}
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Add X1, X31, 16
	059 Add X2, X31, 8
	060 Move X0, X20
	061 Call UINumericFieldsUtils.TryConvertStringToDouble, X0, X1, X2
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {78}
	066 Move V0, [X31+16]
	067 Move [X19], D0
	068 Move X0, [X31+24]
	069 Compare X0, 0
	070 JumpIfEqual {88}
	071 Move X8, 0x522000
	072 Move X8, [X8+1968]
	073 Move W3, 1
	074 Move X1, X19
	075 Move W2, W31
	076 Move X4, [X8]
	077 Call 0x22B5848, X0, X1, X2, X3
	078 Move W0, W31
	079 Move X20, [X31+64]
	080 Move X19, [X31+72]
	081 Move X22, [X31+48]
	082 Move X21, [X31+56]
	083 Move X30, [X31+32]
	084 Move X23, [X31+40]
	085 And W0, W0, 1
	086 Add X31, X31, 80
	087 Return X0
	088 Call 0x1C17F20

Method: System.Boolean TryConvertStringToFloat(System.String str, System.String initialValueAsString, out System.Single value)

Disassembly:
	0x03C3E5B0 LDP X30, X21, [X31], #0x20
	0x03C3E5B4 BR X2
	0x03C3E5B8 STR X30, [X31 - 0x20]!
	0x03C3E5BC STP X20, X19, [X31 + 0x10]
	0x03C3E5C0 ADRP X20, 0x7A7000
	0x03C3E5C4 LDR X8, [X20 + 0x8D0]
	0x03C3E5C8 MOV X19, X0
	0x03C3E5CC STR X31, [X31 + 0x8]
	0x03C3E5D0 CBNZ X8, 0x3C3E5E8
	0x03C3E5D4 ADRP X0, 0xFFFFFFFFFCED3000
	0x03C3E5D8 ADD X0, X0, 0x203
	0x03C3E5DC BL 0x1C16CB8
	0x03C3E5E0 MOV X8, X0
	0x03C3E5E4 STR X0, [X20 + 0x8D0]
	0x03C3E5E8 ADD X1, X31, 0x8
	0x03C3E5EC MOV X0, X19
	0x03C3E5F0 BLR X8
	0x03C3E5F4 LDP S0, S1, [X31 + 0x8]
	0x03C3E5F8 LDP X20, X19, [X31 + 0x10]
	0x03C3E5FC LDR X30, [X31], #0x20
	0x03C3E600 RET
	0x03C3E604 STP X30, X21, [X31 - 0x20]!
	0x03C3E608 STP X20, X19, [X31 + 0x10]
	0x03C3E60C ADRP X21, 0x7A7000
	0x03C3E610 LDR X2, [X21 + 0x8D0]
	0x03C3E614 MOV X19, X1
	0x03C3E618 MOV X20, X0
	0x03C3E61C CBNZ X2, 0x3C3E634
	0x03C3E620 ADRP X0, 0xFFFFFFFFFCED3000
	0x03C3E624 ADD X0, X0, 0x203
	0x03C3E628 BL 0x1C16CB8
	0x03C3E62C MOV X2, X0
	0x03C3E630 STR X0, [X21 + 0x8D0]
	0x03C3E634 MOV X0, X20
	0x03C3E638 MOV X1, X19
	0x03C3E63C LDP X20, X19, [X31 + 0x10]
	0x03C3E640 LDP X30, X21, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x7A8000
	009 Move X22, 0x522000
	010 Move W8, [X23+2218]
	011 Move X22, [X22+1960]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x522000
	020 Move X0, [X0+1960]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+2218], W8
	024 Move X0, [X22]
	025 Move [X31+8], X31
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Add X2, X31, 8
	031 Move X0, X21
	032 Move X1, X20
	033 Call UINumericFieldsUtils.TryConvertStringToDouble, X0, X1, X2
	034 Move V0, [X31+8]
	035 Move W20, W0
	036 Move X0, X31
	037 Call Mathf.ClampToFloat, V0
	038 And W0, W20, 1
	039 Move [X19], S0
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X30, [X31+16]
	045 Move X23, [X31+24]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Boolean TryConvertStringToLong(System.String str, out System.Int64 value, out UnityEngine.ExpressionEvaluator/Expression expr)

Disassembly:
	0x03C3E644 BR X2
	0x03C3E648 STR X30, [X31 - 0x20]!
	0x03C3E64C STP X20, X19, [X31 + 0x10]
	0x03C3E650 ADRP X20, 0x7A7000
	0x03C3E654 LDR X8, [X20 + 0x8D8]
	0x03C3E658 MOV X19, X0
	0x03C3E65C STP S0, S1, [X31 + 0x8]
	0x03C3E660 CBNZ X8, 0x3C3E678
	0x03C3E664 ADRP X0, 0xFFFFFFFFFCED4000
	0x03C3E668 ADD X0, X0, 0xF06
	0x03C3E66C BL 0x1C16CB8
	0x03C3E670 MOV X8, X0
	0x03C3E674 STR X0, [X20 + 0x8D8]
	0x03C3E678 ADD X1, X31, 0x8
	0x03C3E67C MOV X0, X19
	0x03C3E680 BLR X8
	0x03C3E684 LDP X20, X19, [X31 + 0x10]
	0x03C3E688 LDR X30, [X31], #0x20
	0x03C3E68C RET
	0x03C3E690 STP X30, X21, [X31 - 0x20]!
	0x03C3E694 STP X20, X19, [X31 + 0x10]
	0x03C3E698 ADRP X21, 0x7A7000
	0x03C3E69C LDR X2, [X21 + 0x8D8]
	0x03C3E6A0 MOV X19, X1
	0x03C3E6A4 MOV X20, X0
	0x03C3E6A8 CBNZ X2, 0x3C3E6C0
	0x03C3E6AC ADRP X0, 0xFFFFFFFFFCED4000
	0x03C3E6B0 ADD X0, X0, 0xF06
	0x03C3E6B4 BL 0x1C16CB8
	0x03C3E6B8 MOV X2, X0
	0x03C3E6BC STR X0, [X21 + 0x8D8]
	0x03C3E6C0 MOV X0, X20
	0x03C3E6C4 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7A8000
	008 Move X22, 0x4DE000
	009 Move W8, [X23+2219]
	010 Move X22, [X22+2664]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x522000
	019 Move X0, [X0+1976]
	020 Call 0x1C17CF4
	021 Move X0, 0x4DE000
	022 Move X0, [X0+2664]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+2219], W8
	026 Move X0, [X22]
	027 Move X22, 0x522000
	028 Move W8, [X0+224]
	029 Move X22, [X22+1976]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X3, [X22]
	034 Move X0, X21
	035 Move X1, X20
	036 Move X2, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call ExpressionEvaluator.Evaluate, X0, X1, X2
	044 Return X0

Method: System.Boolean TryConvertStringToLong(System.String str, System.String initialValueAsString, out System.Int64 value)

Disassembly:
	0x03C3E6C8 LDP X20, X19, [X31 + 0x10]
	0x03C3E6CC LDP X30, X21, [X31], #0x20
	0x03C3E6D0 BR X2
	0x03C3E6D4 STR X30, [X31 - 0x20]!
	0x03C3E6D8 STP X20, X19, [X31 + 0x10]
	0x03C3E6DC ADRP X20, 0x7A7000
	0x03C3E6E0 LDR X8, [X20 + 0x8E0]
	0x03C3E6E4 MOV X19, X0
	0x03C3E6E8 STR X31, [X31 + 0x8]
	0x03C3E6EC CBNZ X8, 0x3C3E704
	0x03C3E6F0 ADRP X0, 0xFFFFFFFFFCEDA000
	0x03C3E6F4 ADD X0, X0, 0xB29
	0x03C3E6F8 BL 0x1C16CB8
	0x03C3E6FC MOV X8, X0
	0x03C3E700 STR X0, [X20 + 0x8E0]
	0x03C3E704 ADD X1, X31, 0x8
	0x03C3E708 MOV X0, X19
	0x03C3E70C BLR X8
	0x03C3E710 LDP S0, S1, [X31 + 0x8]
	0x03C3E714 LDP X20, X19, [X31 + 0x10]
	0x03C3E718 LDR X30, [X31], #0x20
	0x03C3E71C RET
	0x03C3E720 STP X30, X21, [X31 - 0x20]!
	0x03C3E724 STP X20, X19, [X31 + 0x10]
	0x03C3E728 ADRP X21, 0x7A7000
	0x03C3E72C LDR X2, [X21 + 0x8E0]
	0x03C3E730 MOV X19, X1
	0x03C3E734 MOV X20, X0
	0x03C3E738 CBNZ X2, 0x3C3E750
	0x03C3E73C ADRP X0, 0xFFFFFFFFFCEDA000
	0x03C3E740 ADD X0, X0, 0xB29
	0x03C3E744 BL 0x1C16CB8
	0x03C3E748 MOV X2, X0
	0x03C3E74C STR X0, [X21 + 0x8E0]
	0x03C3E750 MOV X0, X20
	0x03C3E754 MOV X1, X19
	0x03C3E758 LDP X20, X19, [X31 + 0x10]
	0x03C3E75C LDP X30, X21, [X31], #0x20
	0x03C3E760 BR X2
	0x03C3E764 STR X30, [X31 - 0x20]!
	0x03C3E768 STP X20, X19, [X31 + 0x10]
	0x03C3E76C ADRP X20, 0x7A7000
	0x03C3E770 LDR X8, [X20 + 0x8E8]
	0x03C3E774 MOV X19, X0
	0x03C3E778 STP S0, S1, [X31 + 0x8]
	0x03C3E77C CBNZ X8, 0x3C3E794
	0x03C3E780 ADRP X0, 0xFFFFFFFFFCECB000
	0x03C3E784 ADD X0, X0, 0x412
	0x03C3E788 BL 0x1C16CB8
	0x03C3E78C MOV X8, X0
	0x03C3E790 STR X0, [X20 + 0x8E8]
	0x03C3E794 ADD X1, X31, 0x8
	0x03C3E798 MOV X0, X19
	0x03C3E79C BLR X8
	0x03C3E7A0 LDP X20, X19, [X31 + 0x10]
	0x03C3E7A4 LDR X30, [X31], #0x20
	0x03C3E7A8 RET
	0x03C3E7AC STP X30, X21, [X31 - 0x20]!
	0x03C3E7B0 STP X20, X19, [X31 + 0x10]
	0x03C3E7B4 ADRP X21, 0x7A7000
	0x03C3E7B8 LDR X2, [X21 + 0x8E8]
	0x03C3E7BC MOV X19, X1
	0x03C3E7C0 MOV X20, X0
	0x03C3E7C4 CBNZ X2, 0x3C3E7DC
	0x03C3E7C8 ADRP X0, 0xFFFFFFFFFCECB000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0x7A8000
	009 Move X22, 0x522000
	010 Move W8, [X23+2220]
	011 Move X22, [X22+1960]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x522000
	020 Move X0, [X0+1984]
	021 Call 0x1C17CF4
	022 Move X0, 0x522000
	023 Move X0, [X0+1960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+2220], W8
	027 Move X0, [X22]
	028 Move [X31+16], X31
	029 Move [X31+24], X31
	030 Move [X31+8], X31
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Add X2, X31, 24
	036 Move X0, X21
	037 Move X1, X19
	038 Call UINumericFieldsUtils.TryConvertStringToLong, X0, X1, X2
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {79}
	043 Move X8, [X31+24]
	044 Compare X8, 0
	045 JumpIfEqual {79}
	046 Move X0, X20
	047 Move X1, X31
	048 Call String.IsNullOrEmpty, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {78}
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Add X1, X31, 16
	059 Add X2, X31, 8
	060 Move X0, X20
	061 Call UINumericFieldsUtils.TryConvertStringToLong, X0, X1, X2
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {78}
	066 Move X8, [X31+16]
	067 Move X0, [X31+24]
	068 Move [X19], X8
	069 Compare X0, 0
	070 JumpIfEqual {88}
	071 Move X8, 0x522000
	072 Move X8, [X8+1984]
	073 Move W3, 1
	074 Move X1, X19
	075 Move W2, W31
	076 Move X4, [X8]
	077 Call Expression.Evaluate, X0, X1, X2, X3
	078 Move W0, W31
	079 Move X20, [X31+64]
	080 Move X19, [X31+72]
	081 Move X22, [X31+48]
	082 Move X21, [X31+56]
	083 Move X30, [X31+32]
	084 Move X23, [X31+40]
	085 And W0, W0, 1
	086 Add X31, X31, 80
	087 Return X0
	088 Call 0x1C17F20

Method: System.Boolean TryConvertStringToULong(System.String str, out System.UInt64 value, out UnityEngine.ExpressionEvaluator/Expression expr)

Disassembly:
	0x03C3E7CC ADD X0, X0, 0x412
	0x03C3E7D0 BL 0x1C16CB8
	0x03C3E7D4 MOV X2, X0
	0x03C3E7D8 STR X0, [X21 + 0x8E8]
	0x03C3E7DC MOV X0, X20
	0x03C3E7E0 MOV X1, X19
	0x03C3E7E4 LDP X20, X19, [X31 + 0x10]
	0x03C3E7E8 LDP X30, X21, [X31], #0x20
	0x03C3E7EC BR X2
	0x03C3E7F0 STR X30, [X31 - 0x20]!
	0x03C3E7F4 STP X20, X19, [X31 + 0x10]
	0x03C3E7F8 ADRP X20, 0x7A7000
	0x03C3E7FC LDR X8, [X20 + 0x8F0]
	0x03C3E800 MOV X19, X0
	0x03C3E804 STR X31, [X31 + 0x8]
	0x03C3E808 CBNZ X8, 0x3C3E820
	0x03C3E80C ADRP X0, 0xFFFFFFFFFCEC5000
	0x03C3E810 ADD X0, X0, 0x25B
	0x03C3E814 BL 0x1C16CB8
	0x03C3E818 MOV X8, X0
	0x03C3E81C STR X0, [X20 + 0x8F0]
	0x03C3E820 ADD X1, X31, 0x8
	0x03C3E824 MOV X0, X19
	0x03C3E828 BLR X8
	0x03C3E82C LDP S0, S1, [X31 + 0x8]
	0x03C3E830 LDP X20, X19, [X31 + 0x10]
	0x03C3E834 LDR X30, [X31], #0x20
	0x03C3E838 RET
	0x03C3E83C STP X30, X21, [X31 - 0x20]!
	0x03C3E840 STP X20, X19, [X31 + 0x10]
	0x03C3E844 ADRP X21, 0x7A7000
	0x03C3E848 LDR X2, [X21 + 0x8F0]
	0x03C3E84C MOV X19, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7A8000
	008 Move X22, 0x4DE000
	009 Move W8, [X23+2221]
	010 Move X22, [X22+2664]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x522000
	019 Move X0, [X0+1992]
	020 Call 0x1C17CF4
	021 Move X0, 0x4DE000
	022 Move X0, [X0+2664]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+2221], W8
	026 Move X0, [X22]
	027 Move X22, 0x522000
	028 Move W8, [X0+224]
	029 Move X22, [X22+1992]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X3, [X22]
	034 Move X0, X21
	035 Move X1, X20
	036 Move X2, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call ExpressionEvaluator.Evaluate, X0, X1, X2
	044 Return X0

Method: System.Boolean TryConvertStringToULong(System.String str, System.String initialValueAsString, out System.UInt64 value)

Disassembly:
	0x03C3E850 MOV X20, X0
	0x03C3E854 CBNZ X2, 0x3C3E86C
	0x03C3E858 ADRP X0, 0xFFFFFFFFFCEC5000
	0x03C3E85C ADD X0, X0, 0x25B
	0x03C3E860 BL 0x1C16CB8
	0x03C3E864 MOV X2, X0
	0x03C3E868 STR X0, [X21 + 0x8F0]
	0x03C3E86C MOV X0, X20
	0x03C3E870 MOV X1, X19
	0x03C3E874 LDP X20, X19, [X31 + 0x10]
	0x03C3E878 LDP X30, X21, [X31], #0x20
	0x03C3E87C BR X2
	0x03C3E880 STR X30, [X31 - 0x20]!
	0x03C3E884 STP X20, X19, [X31 + 0x10]
	0x03C3E888 ADRP X20, 0x7A7000
	0x03C3E88C LDR X8, [X20 + 0x8F8]
	0x03C3E890 MOV X19, X0
	0x03C3E894 STP S0, S1, [X31 + 0x8]
	0x03C3E898 CBNZ X8, 0x3C3E8B0
	0x03C3E89C ADRP X0, 0xFFFFFFFFFCEB9000
	0x03C3E8A0 ADD X0, X0, 0x370
	0x03C3E8A4 BL 0x1C16CB8
	0x03C3E8A8 MOV X8, X0
	0x03C3E8AC STR X0, [X20 + 0x8F8]
	0x03C3E8B0 ADD X1, X31, 0x8
	0x03C3E8B4 MOV X0, X19
	0x03C3E8B8 BLR X8
	0x03C3E8BC LDP X20, X19, [X31 + 0x10]
	0x03C3E8C0 LDR X30, [X31], #0x20
	0x03C3E8C4 RET
	0x03C3E8C8 STP X30, X21, [X31 - 0x20]!
	0x03C3E8CC STP X20, X19, [X31 + 0x10]
	0x03C3E8D0 ADRP X21, 0x7A7000
	0x03C3E8D4 LDR X2, [X21 + 0x8F8]
	0x03C3E8D8 MOV X19, X1
	0x03C3E8DC MOV X20, X0
	0x03C3E8E0 CBNZ X2, 0x3C3E8F8
	0x03C3E8E4 ADRP X0, 0xFFFFFFFFFCEB9000
	0x03C3E8E8 ADD X0, X0, 0x370
	0x03C3E8EC BL 0x1C16CB8
	0x03C3E8F0 MOV X2, X0
	0x03C3E8F4 STR X0, [X21 + 0x8F8]
	0x03C3E8F8 MOV X0, X20
	0x03C3E8FC MOV X1, X19
	0x03C3E900 LDP X20, X19, [X31 + 0x10]
	0x03C3E904 LDP X30, X21, [X31], #0x20
	0x03C3E908 BR X2
	0x03C3E90C STR X30, [X31 - 0x20]!
	0x03C3E910 STP X20, X19, [X31 + 0x10]
	0x03C3E914 ADRP X20, 0x7A7000
	0x03C3E918 LDR X8, [X20 + 0x900]
	0x03C3E91C MOV X19, X0
	0x03C3E920 STR X31, [X31 + 0x8]
	0x03C3E924 CBNZ X8, 0x3C3E93C
	0x03C3E928 ADRP X0, 0xFFFFFFFFFCED3000
	0x03C3E92C ADD X0, X0, 0x24B
	0x03C3E930 BL 0x1C16CB8
	0x03C3E934 MOV X8, X0
	0x03C3E938 STR X0, [X20 + 0x900]
	0x03C3E93C ADD X1, X31, 0x8
	0x03C3E940 MOV X0, X19
	0x03C3E944 BLR X8
	0x03C3E948 LDP S0, S1, [X31 + 0x8]
	0x03C3E94C LDP X20, X19, [X31 + 0x10]
	0x03C3E950 LDR X30, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0x7A8000
	009 Move X22, 0x522000
	010 Move W8, [X23+2222]
	011 Move X22, [X22+1960]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x522000
	020 Move X0, [X0+2000]
	021 Call 0x1C17CF4
	022 Move X0, 0x522000
	023 Move X0, [X0+1960]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+2222], W8
	027 Move X0, [X22]
	028 Move [X31+16], X31
	029 Move [X31+24], X31
	030 Move [X31+8], X31
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Add X2, X31, 24
	036 Move X0, X21
	037 Move X1, X19
	038 Call UINumericFieldsUtils.TryConvertStringToULong, X0, X1, X2
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfEqual {79}
	043 Move X8, [X31+24]
	044 Compare X8, 0
	045 JumpIfEqual {79}
	046 Move X0, X20
	047 Move X1, X31
	048 Call String.IsNullOrEmpty, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {78}
	053 Move X0, [X22]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Add X1, X31, 16
	059 Add X2, X31, 8
	060 Move X0, X20
	061 Call UINumericFieldsUtils.TryConvertStringToULong, X0, X1, X2
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {78}
	066 Move X8, [X31+16]
	067 Move X0, [X31+24]
	068 Move [X19], X8
	069 Compare X0, 0
	070 JumpIfEqual {88}
	071 Move X8, 0x522000
	072 Move X8, [X8+2000]
	073 Move W3, 1
	074 Move X1, X19
	075 Move W2, W31
	076 Move X4, [X8]
	077 Call Expression.Evaluate, X0, X1, X2, X3
	078 Move W0, W31
	079 Move X20, [X31+64]
	080 Move X19, [X31+72]
	081 Move X22, [X31+48]
	082 Move X21, [X31+56]
	083 Move X30, [X31+32]
	084 Move X23, [X31+40]
	085 And W0, W0, 1
	086 Add X31, X31, 80
	087 Return X0
	088 Call 0x1C17F20

Method: System.Boolean TryConvertStringToInt(System.String str, System.String initialValueAsString, out System.Int32 value)

Disassembly:
	0x03C3E954 RET
	0x03C3E958 STP X30, X21, [X31 - 0x20]!
	0x03C3E95C STP X20, X19, [X31 + 0x10]
	0x03C3E960 ADRP X21, 0x7A7000
	0x03C3E964 LDR X2, [X21 + 0x900]
	0x03C3E968 MOV X19, X1
	0x03C3E96C MOV X20, X0
	0x03C3E970 CBNZ X2, 0x3C3E988
	0x03C3E974 ADRP X0, 0xFFFFFFFFFCED3000
	0x03C3E978 ADD X0, X0, 0x24B
	0x03C3E97C BL 0x1C16CB8
	0x03C3E980 MOV X2, X0
	0x03C3E984 STR X0, [X21 + 0x900]
	0x03C3E988 MOV X0, X20
	0x03C3E98C MOV X1, X19
	0x03C3E990 LDP X20, X19, [X31 + 0x10]
	0x03C3E994 LDP X30, X21, [X31], #0x20
	0x03C3E998 BR X2
	0x03C3E99C STR X30, [X31 - 0x20]!
	0x03C3E9A0 STP X20, X19, [X31 + 0x10]
	0x03C3E9A4 ADRP X20, 0x7A7000
	0x03C3E9A8 LDR X8, [X20 + 0x908]
	0x03C3E9AC MOV X19, X0
	0x03C3E9B0 STP S0, S1, [X31 + 0x8]
	0x03C3E9B4 CBNZ X8, 0x3C3E9CC
	0x03C3E9B8 ADRP X0, 0xFFFFFFFFFCEB7000
	0x03C3E9BC ADD X0, X0, 0x508
	0x03C3E9C0 BL 0x1C16CB8
	0x03C3E9C4 MOV X8, X0
	0x03C3E9C8 STR X0, [X20 + 0x908]
	0x03C3E9CC ADD X1, X31, 0x8
	0x03C3E9D0 MOV X0, X19
	0x03C3E9D4 BLR X8
	0x03C3E9D8 LDP X20, X19, [X31 + 0x10]
	0x03C3E9DC LDR X30, [X31], #0x20
	0x03C3E9E0 RET
	0x03C3E9E4 STP X30, X21, [X31 - 0x20]!
	0x03C3E9E8 STP X20, X19, [X31 + 0x10]
	0x03C3E9EC ADRP X21, 0x7A7000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x7A8000
	009 Move X22, 0x522000
	010 Move W8, [X23+2223]
	011 Move X22, [X22+1960]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x522000
	020 Move X0, [X0+1960]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+2223], W8
	024 Move X0, [X22]
	025 Move [X31+8], X31
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Add X2, X31, 8
	031 Move X0, X21
	032 Move X1, X20
	033 Call UINumericFieldsUtils.TryConvertStringToLong, X0, X1, X2
	034 Move X8, [X31+8]
	035 Move W20, W0
	036 Move X1, X31
	037 Move X0, X8
	038 Call Mathf.ClampToInt, X0
	039 And W8, W20, 1
	040 Move [X19], W0
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Move X23, [X31+24]
	047 Move W0, W8
	048 Add X31, X31, 64
	049 Return X0

Method: System.Boolean TryConvertStringToUInt(System.String str, System.String initialValueAsString, out System.UInt32 value)

Disassembly:
	0x03C3E9F0 LDR X2, [X21 + 0x908]
	0x03C3E9F4 MOV X19, X1
	0x03C3E9F8 MOV X20, X0
	0x03C3E9FC CBNZ X2, 0x3C3EA14
	0x03C3EA00 ADRP X0, 0xFFFFFFFFFCEB7000
	0x03C3EA04 ADD X0, X0, 0x508
	0x03C3EA08 BL 0x1C16CB8
	0x03C3EA0C MOV X2, X0
	0x03C3EA10 STR X0, [X21 + 0x908]
	0x03C3EA14 MOV X0, X20
	0x03C3EA18 MOV X1, X19
	0x03C3EA1C LDP X20, X19, [X31 + 0x10]
	0x03C3EA20 LDP X30, X21, [X31], #0x20
	0x03C3EA24 BR X2
	0x03C3EA28 STR X30, [X31 - 0x20]!
	0x03C3EA2C STP X20, X19, [X31 + 0x10]
	0x03C3EA30 ADRP X20, 0x7A7000
	0x03C3EA34 LDR X8, [X20 + 0x910]
	0x03C3EA38 MOV X19, X0
	0x03C3EA3C STR X31, [X31 + 0x8]
	0x03C3EA40 CBNZ X8, 0x3C3EA58
	0x03C3EA44 ADRP X0, 0xFFFFFFFFFCEB9000
	0x03C3EA48 ADD X0, X0, 0x3BF
	0x03C3EA4C BL 0x1C16CB8
	0x03C3EA50 MOV X8, X0
	0x03C3EA54 STR X0, [X20 + 0x910]
	0x03C3EA58 ADD X1, X31, 0x8
	0x03C3EA5C MOV X0, X19
	0x03C3EA60 BLR X8
	0x03C3EA64 LDP S0, S1, [X31 + 0x8]
	0x03C3EA68 LDP X20, X19, [X31 + 0x10]
	0x03C3EA6C LDR X30, [X31], #0x20
	0x03C3EA70 RET
	0x03C3EA74 STP X30, X21, [X31 - 0x20]!
	0x03C3EA78 STP X20, X19, [X31 + 0x10]
	0x03C3EA7C ADRP X21, 0x7A7000
	0x03C3EA80 LDR X2, [X21 + 0x910]
	0x03C3EA84 MOV X19, X1
	0x03C3EA88 MOV X20, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x7A8000
	009 Move X22, 0x522000
	010 Move W8, [X23+2224]
	011 Move X22, [X22+1960]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x522000
	020 Move X0, [X0+1960]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+2224], W8
	024 Move X0, [X22]
	025 Move [X31+8], X31
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Add X2, X31, 8
	031 Move X0, X21
	032 Move X1, X20
	033 Call UINumericFieldsUtils.TryConvertStringToLong, X0, X1, X2
	034 Move X8, [X31+8]
	035 Move W20, W0
	036 Move X1, X31
	037 Move X0, X8
	038 Call Mathf.ClampToUInt, X0
	039 And W8, W20, 1
	040 Move [X19], W0
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Move X23, [X31+24]
	047 Move W0, W8
	048 Add X31, X31, 64
	049 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03C3EA8C CBNZ X2, 0x3C3EAA4
	0x03C3EA90 ADRP X0, 0xFFFFFFFFFCEB9000
	0x03C3EA94 ADD X0, X0, 0x3BF
	0x03C3EA98 BL 0x1C16CB8
	0x03C3EA9C MOV X2, X0
	0x03C3EAA0 STR X0, [X21 + 0x910]
	0x03C3EAA4 MOV X0, X20
	0x03C3EAA8 MOV X1, X19
	0x03C3EAAC LDP X20, X19, [X31 + 0x10]
	0x03C3EAB0 LDP X30, X21, [X31], #0x20
	0x03C3EAB4 BR X2
	0x03C3EAB8 STR X30, [X31 - 0x20]!
	0x03C3EABC STP X20, X19, [X31 + 0x10]
	0x03C3EAC0 ADRP X20, 0x7A7000
	0x03C3EAC4 LDR X8, [X20 + 0x918]
	0x03C3EAC8 MOV X19, X0
	0x03C3EACC STP S0, S1, [X31 + 0x8]
	0x03C3EAD0 CBNZ X8, 0x3C3EAE8
	0x03C3EAD4 ADRP X0, 0xFFFFFFFFFCEC1000
	0x03C3EAD8 ADD X0, X0, 0x3D3
	0x03C3EADC BL 0x1C16CB8
	0x03C3EAE0 MOV X8, X0
	0x03C3EAE4 STR X0, [X20 + 0x918]
	0x03C3EAE8 ADD X1, X31, 0x8
	0x03C3EAEC MOV X0, X19
	0x03C3EAF0 BLR X8
	0x03C3EAF4 LDP X20, X19, [X31 + 0x10]
	0x03C3EAF8 LDR X30, [X31], #0x20
	0x03C3EAFC RET
	0x03C3EB00 STP X30, X21, [X31 - 0x20]!
	0x03C3EB04 STP X20, X19, [X31 + 0x10]
	0x03C3EB08 ADRP X21, 0x7A7000
	0x03C3EB0C LDR X2, [X21 + 0x918]
	0x03C3EB10 MOV X19, X1
	0x03C3EB14 MOV X20, X0
	0x03C3EB18 CBNZ X2, 0x3C3EB30
	0x03C3EB1C ADRP X0, 0xFFFFFFFFFCEC1000
	0x03C3EB20 ADD X0, X0, 0x3D3
	0x03C3EB24 BL 0x1C16CB8
	0x03C3EB28 MOV X2, X0
	0x03C3EB2C STR X0, [X21 + 0x918]
	0x03C3EB30 MOV X0, X20
	0x03C3EB34 MOV X1, X19
	0x03C3EB38 LDP X20, X19, [X31 + 0x10]
	0x03C3EB3C LDP X30, X21, [X31], #0x20
	0x03C3EB40 BR X2
	0x03C3EB44 STP D9, D8, [X31 - 0x20]!
	0x03C3EB48 STP X30, X19, [X31 + 0x10]
	0x03C3EB4C MOV X19, X0
	0x03C3EB50 BL 0x3C3E7F0
	0x03C3EB54 MOV X0, X19
	0x03C3EB58 MOV V8.16B, V0.16B
	0x03C3EB5C MOV V9.16B, V1.16B
	0x03C3EB60 BL 0x3C3EB78
	0x03C3EB64 LDP X30, X19, [X31 + 0x10]
	0x03C3EB68 MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x7A8000
	010 Move X24, 0x522000
	011 Move X23, 0x522000
	012 Move X22, 0x522000
	013 Move X21, 0x4EB000
	014 Move X20, 0x522000
	015 Move X19, 0x522000
	016 Move X24, [X24+2008]
	017 Move W8, [X25+2225]
	018 Move X23, [X23+1960]
	019 Move X22, [X22+2016]
	020 Move X21, [X21+2544]
	021 Move X20, [X20+2024]
	022 Move X19, [X19+2032]
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0x522000
	028 Move X0, [X0+1960]
	029 Call 0x1C17CF4
	030 Move X0, 0x522000
	031 Move X0, [X0+2008]
	032 Call 0x1C17CF4
	033 Move X0, 0x4EB000
	034 Move X0, [X0+2544]
	035 Call 0x1C17CF4
	036 Move X0, 0x522000
	037 Move X0, [X0+2032]
	038 Call 0x1C17CF4
	039 Move X0, 0x522000
	040 Move X0, [X0+2024]
	041 Call 0x1C17CF4
	042 Move X0, 0x522000
	043 Move X0, [X0+2016]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X25+2225], W8
	047 Move X8, [X23]
	048 Move X9, [X24]
	049 Move X8, [X8+184]
	050 Move [X8], X9
	051 Move X8, [X23]
	052 Move X10, [X22]
	053 Move X9, [X21]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X8, [X8+184]
	057 Move X24, [X31+16]
	058 Move X23, [X31+24]
	059 Move [X8+8], X10
	060 Move [X8+16], X9
	061 Move X10, [X20]
	062 Move X9, [X19]
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move [X8+24], X10
	066 Move [X8+32], X9
	067 Move X30, [X31+64]
	068 Move X25, [X31+72]
	069 Return 

