Type: UnityEngine.Rect

Method: System.Void .ctor(System.Single x, System.Single y, System.Single width, System.Single height)

Disassembly:
	0x03C0C374 MOV X0, X20
	0x03C0C378 BL 0x1C16F18
	0x03C0C37C BL 0x1990590

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Return 

Method: System.Void .ctor(UnityEngine.Vector2 position, UnityEngine.Vector2 size)

Disassembly:
	0x03C0C380 STP X30, X21, [X31 - 0x20]!
	0x03C0C384 STP X20, X19, [X31 + 0x10]
	0x03C0C388 MOV X19, X0

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Return 

Method: System.Void .ctor(UnityEngine.Rect source)

Disassembly:
	0x03C0C38C LDR X0, [X0 + 0x10]
	0x03C0C390 MOV X1, X31
	0x03C0C394 MOV X2, X31

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Return 

Method: UnityEngine.Rect get_zero()

Disassembly:
	0x03C0C398 BL 0x33C5D2C
	0x03C0C39C TBZ X0, 0x0, 0x3C0C3D0
	0x03C0C3A0 ADRP X21, 0x7D8000
	0x03C0C3A4 LDR X8, [X21 + 0x228]
	0x03C0C3A8 LDR X20, [X19 + 0x10]

ISIL:
	001 Move S0, W31
	002 Move S1, W31
	003 Move S2, W31
	004 Move S3, W31
	005 Return X0

Method: UnityEngine.Rect MinMaxRect(System.Single xmin, System.Single ymin, System.Single xmax, System.Single ymax)

Disassembly:
	0x03C0C3AC CBNZ X8, 0x3C0C3C4
	0x03C0C3B0 ADRP X0, 0xFFFFFFFFFCF1A000
	0x03C0C3B4 ADD X0, X0, 0xAC8

ISIL:
	001 Subtract S2, S2, S0
	002 Subtract S3, S3, S1
	003 Return X0

Method: System.Single get_x()

Disassembly:
	0x03C0C3B8 BL 0x1C16CB8
	0x03C0C3BC MOV X8, X0

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Void set_x(System.Single value)

Disassembly:
	0x03C0C3C0 STR X0, [X21 + 0x228]
	0x03C0C3C4 MOV X0, X20

ISIL:
	001 Move [X0], S0
	002 Return 

Method: System.Single get_y()

Disassembly:
	0x03C0C3C8 BLR X8
	0x03C0C3CC STR X31, [X19 + 0x10]

ISIL:
	001 Move V0, [X0+4]
	002 Return V0

Method: System.Void set_y(System.Single value)

Disassembly:
	0x03C0C3D0 LDP X20, X19, [X31 + 0x10]
	0x03C0C3D4 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X0+4], S0
	002 Return 

Method: UnityEngine.Vector2 get_position()

Disassembly:
	0x03C0C3D8 RET
	0x03C0C3DC STR X30, [X31 - 0x40]!

ISIL:
	001 Move S0, [X0]
	002 Move S1, [X0+4]
	003 Return X0

Method: System.Void set_position(UnityEngine.Vector2 value)

Disassembly:
	0x03C0C3E0 STP X24, X23, [X31 + 0x10]
	0x03C0C3E4 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Return 

Method: UnityEngine.Vector2 get_center()

Disassembly:
	0x03C0C3E8 STP X20, X19, [X31 + 0x30]
	0x03C0C3EC MOV W23, W1
	0x03C0C3F0 MOV X1, X31
	0x03C0C3F4 MOV W19, W4
	0x03C0C3F8 MOV W21, W3
	0x03C0C3FC MOV W22, W2

ISIL:
	001 Move D1, [X0]
	002 Move D0, [X0+8]
	003 NotImplemented "Instruction MOVI not yet implemented."
	004 NotImplemented "Instruction INVALID not yet implemented."
	005 Add V0, V1, V0
	006 Move S1, V0.S[1]
	007 Return X0

Method: System.Void set_center(UnityEngine.Vector2 value)

Disassembly:
	0x03C0C400 MOV X20, X0
	0x03C0C404 BL 0x33BDD8C
	0x03C0C408 ADRP X24, 0x7D8000
	0x03C0C40C LDR X8, [X24 + 0x220]
	0x03C0C410 CBNZ X8, 0x3C0C428
	0x03C0C414 ADRP X0, 0xFFFFFFFFFCF02000
	0x03C0C418 ADD X0, X0, 0xE2C

ISIL:
	001 Move V2, [X0+8]
	002 NotImplemented "Instruction MOVI not yet implemented."
	003 Move V0.S[1], V1.S[0]
	004 NotImplemented "Instruction INVALID not yet implemented."
	005 Add V0, V0, V2
	006 Move [X0], D0
	007 Return 

Method: UnityEngine.Vector2 get_min()

Disassembly:
	0x03C0C41C BL 0x1C16CB8
	0x03C0C420 MOV X8, X0

ISIL:
	001 Move S0, [X0]
	002 Move S1, [X0+4]
	003 Return X0

Method: System.Void set_min(UnityEngine.Vector2 value)

Disassembly:
	0x03C0C424 STR X0, [X24 + 0x220]
	0x03C0C428 BLR X8
	0x03C0C42C STR X0, [X20 + 0x10]
	0x03C0C430 ADRP X24, 0x7D8000
	0x03C0C434 LDR X8, [X24 + 0x238]
	0x03C0C438 CBNZ X8, 0x3C0C450
	0x03C0C43C ADRP X0, 0xFFFFFFFFFCF14000

ISIL:
	001 Move D2, [X0]
	002 Move D3, [X0+8]
	003 Move [X0], S0
	004 Move [X0+8], S1
	005 Move V0.S[1], V1.S[0]
	006 Add V2, V3, V2
	007 Subtract V0, V2, V0
	008 Move [X0+8], D0
	009 Return 

Method: UnityEngine.Vector2 get_max()

Disassembly:
	0x03C0C440 ADD X0, X0, 0x7F4
	0x03C0C444 BL 0x1C16CB8
	0x03C0C448 MOV X8, X0
	0x03C0C44C STR X0, [X24 + 0x238]

ISIL:
	001 Move D1, [X0]
	002 Move D0, [X0+8]
	003 Add V0, V0, V1
	004 Move S1, V0.S[1]
	005 Return X0

Method: System.Void set_max(UnityEngine.Vector2 value)

Disassembly:
	0x03C0C450 MOV X0, X20
	0x03C0C454 MOV W1, W23
	0x03C0C458 BLR X8
	0x03C0C45C ADRP X23, 0x7D8000
	0x03C0C460 LDR X8, [X23 + 0x248]

ISIL:
	001 Move V2, [X0]
	002 Move V0.S[1], V1.S[0]
	003 Subtract V0, V0, V2
	004 Move [X0+8], D0
	005 Return 

Method: System.Single get_width()

Disassembly:
	0x03C0C464 CBNZ X8, 0x3C0C47C
	0x03C0C468 ADRP X0, 0xFFFFFFFFFCF06000

ISIL:
	001 Move V0, [X0+8]
	002 Return V0

Method: System.Void set_width(System.Single value)

Disassembly:
	0x03C0C46C ADD X0, X0, 0x99F
	0x03C0C470 BL 0x1C16CB8

ISIL:
	001 Move [X0+8], S0
	002 Return 

Method: System.Single get_height()

Disassembly:
	0x03C0C474 MOV X8, X0
	0x03C0C478 STR X0, [X23 + 0x248]

ISIL:
	001 Move V0, [X0+12]
	002 Return V0

Method: System.Void set_height(System.Single value)

Disassembly:
	0x03C0C47C MOV X0, X20
	0x03C0C480 MOV W1, W22

ISIL:
	001 Move [X0+12], S0
	002 Return 

Method: UnityEngine.Vector2 get_size()

Disassembly:
	0x03C0C484 BLR X8
	0x03C0C488 ADRP X22, 0x7D8000

ISIL:
	001 Move S0, [X0+8]
	002 Move S1, [X0+12]
	003 Return X0

Method: System.Void set_size(UnityEngine.Vector2 value)

Disassembly:
	0x03C0C48C LDR X8, [X22 + 0x258]
	0x03C0C490 CBNZ X8, 0x3C0C4A8

ISIL:
	001 Move [X0+8], S0
	002 Move [X0+16], S1
	003 Return 

Method: System.Single get_xMin()

Disassembly:
	0x03C0C494 ADRP X0, 0xFFFFFFFFFCF0E000
	0x03C0C498 ADD X0, X0, 0x914

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Void set_xMin(System.Single value)

Disassembly:
	0x03C0C49C BL 0x1C16CB8
	0x03C0C4A0 MOV X8, X0
	0x03C0C4A4 STR X0, [X22 + 0x258]
	0x03C0C4A8 MOV X0, X20
	0x03C0C4AC MOV W1, W21
	0x03C0C4B0 BLR X8
	0x03C0C4B4 ADRP X21, 0x7D8000

ISIL:
	001 Move V1, [X0+8]
	002 Move V2, [X0]
	003 Move [X0], S0
	004 Add S1, S1, S2
	005 Subtract S0, S1, S0
	006 Move [X0+8], S0
	007 Return 

Method: System.Single get_yMin()

Disassembly:
	0x03C0C4B8 LDR X2, [X21 + 0x268]
	0x03C0C4BC CBNZ X2, 0x3C0C4D4

ISIL:
	001 Move V0, [X0+4]
	002 Return V0

Method: System.Void set_yMin(System.Single value)

Disassembly:
	0x03C0C4C0 ADRP X0, 0xFFFFFFFFFCF00000
	0x03C0C4C4 ADD X0, X0, 0xD21
	0x03C0C4C8 BL 0x1C16CB8
	0x03C0C4CC MOV X2, X0
	0x03C0C4D0 STR X0, [X21 + 0x268]
	0x03C0C4D4 MOV X0, X20
	0x03C0C4D8 MOV W1, W19

ISIL:
	001 Move V1, [X0+12]
	002 Move V2, [X0+4]
	003 Move [X0+4], S0
	004 Add S1, S1, S2
	005 Subtract S0, S1, S0
	006 Move [X0+12], S0
	007 Return 

Method: System.Single get_xMax()

Disassembly:
	0x03C0C4DC LDP X20, X19, [X31 + 0x30]
	0x03C0C4E0 LDP X22, X21, [X31 + 0x20]
	0x03C0C4E4 LDP X24, X23, [X31 + 0x10]
	0x03C0C4E8 LDR X30, [X31], #0x40

ISIL:
	001 Move V0, [X0+8]
	002 Move V1, [X0]
	003 Add S0, S0, S1
	004 Return V0

Method: System.Void set_xMax(System.Single value)

Disassembly:
	0x03C0C4EC BR X2
	0x03C0C4F0 STP X30, X21, [X31 - 0x20]!
	0x03C0C4F4 STP X20, X19, [X31 + 0x10]
	0x03C0C4F8 ADRP X21, 0x7D8000

ISIL:
	001 Move V1, [X0]
	002 Subtract S0, S0, S1
	003 Move [X0+8], S0
	004 Return 

Method: System.Single get_yMax()

Disassembly:
	0x03C0C4FC LDR X2, [X21 + 0x238]
	0x03C0C500 MOV W19, W1
	0x03C0C504 MOV X20, X0
	0x03C0C508 CBNZ X2, 0x3C0C520

ISIL:
	001 Move V0, [X0+12]
	002 Move V1, [X0+4]
	003 Add S0, S0, S1
	004 Return V0

Method: System.Void set_yMax(System.Single value)

Disassembly:
	0x03C0C50C ADRP X0, 0xFFFFFFFFFCF14000
	0x03C0C510 ADD X0, X0, 0x7F4
	0x03C0C514 BL 0x1C16CB8
	0x03C0C518 MOV X2, X0

ISIL:
	001 Move V1, [X0+4]
	002 Subtract S0, S0, S1
	003 Move [X0+12], S0
	004 Return 

Method: System.Boolean Contains(UnityEngine.Vector2 point)

Disassembly:
	0x03C0C51C STR X0, [X21 + 0x238]
	0x03C0C520 MOV X0, X20
	0x03C0C524 MOV W1, W19
	0x03C0C528 LDP X20, X19, [X31 + 0x10]
	0x03C0C52C LDP X30, X21, [X31], #0x20
	0x03C0C530 BR X2
	0x03C0C534 STP X30, X21, [X31 - 0x20]!
	0x03C0C538 STP X20, X19, [X31 + 0x10]
	0x03C0C53C ADRP X21, 0x7D8000
	0x03C0C540 LDR X2, [X21 + 0x248]
	0x03C0C544 MOV W19, W1
	0x03C0C548 MOV X20, X0
	0x03C0C54C CBNZ X2, 0x3C0C564
	0x03C0C550 ADRP X0, 0xFFFFFFFFFCF06000
	0x03C0C554 ADD X0, X0, 0x99F
	0x03C0C558 BL 0x1C16CB8
	0x03C0C55C MOV X2, X0

ISIL:
	001 Move V2, [X0]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move V3, [X0+8]
	004 Add S2, S2, S3
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move V0, [X0+4]
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move W0, W31
	009 Return X0
	010 Move V2, [X0+12]
	011 Add S0, S0, S2
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Return X0

Method: System.Boolean Contains(UnityEngine.Vector3 point)

Disassembly:
	0x03C0C560 STR X0, [X21 + 0x248]
	0x03C0C564 MOV X0, X20
	0x03C0C568 MOV W1, W19
	0x03C0C56C LDP X20, X19, [X31 + 0x10]
	0x03C0C570 LDP X30, X21, [X31], #0x20
	0x03C0C574 BR X2
	0x03C0C578 STP X30, X21, [X31 - 0x20]!
	0x03C0C57C STP X20, X19, [X31 + 0x10]
	0x03C0C580 ADRP X21, 0x7D8000
	0x03C0C584 LDR X2, [X21 + 0x258]
	0x03C0C588 MOV W19, W1
	0x03C0C58C MOV X20, X0
	0x03C0C590 CBNZ X2, 0x3C0C5A8
	0x03C0C594 ADRP X0, 0xFFFFFFFFFCF0E000
	0x03C0C598 ADD X0, X0, 0x914
	0x03C0C59C BL 0x1C16CB8
	0x03C0C5A0 MOV X2, X0

ISIL:
	001 Move V2, [X0]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move V3, [X0+8]
	004 Add S2, S2, S3
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move V0, [X0+4]
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move W0, W31
	009 Return X0
	010 Move V2, [X0+12]
	011 Add S0, S0, S2
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Return X0

Method: UnityEngine.Rect OrderMinMax(UnityEngine.Rect rect)

Disassembly:
	0x03C0C5A4 STR X0, [X21 + 0x258]
	0x03C0C5A8 MOV X0, X20
	0x03C0C5AC MOV W1, W19
	0x03C0C5B0 LDP X20, X19, [X31 + 0x10]
	0x03C0C5B4 LDP X30, X21, [X31], #0x20
	0x03C0C5B8 BR X2
	0x03C0C5BC STP X30, X21, [X31 - 0x20]!
	0x03C0C5C0 STP X20, X19, [X31 + 0x10]
	0x03C0C5C4 ADRP X21, 0x7D8000
	0x03C0C5C8 LDR X2, [X21 + 0x268]
	0x03C0C5CC MOV W19, W1

ISIL:
	001 Add S4, S2, S0
	002 Subtract S5, S0, S4
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FCSEL not yet implemented."
	005 Add S5, S3, S1
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Subtract S4, S1, S5
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 NotImplemented "Instruction FCSEL not yet implemented."
	010 NotImplemented "Instruction FCSEL not yet implemented."
	011 Return X0

Method: System.Boolean Overlaps(UnityEngine.Rect other)

Disassembly:
	0x03C0C5D0 MOV X20, X0
	0x03C0C5D4 CBNZ X2, 0x3C0C5EC
	0x03C0C5D8 ADRP X0, 0xFFFFFFFFFCF00000
	0x03C0C5DC ADD X0, X0, 0xD21
	0x03C0C5E0 BL 0x1C16CB8
	0x03C0C5E4 MOV X2, X0
	0x03C0C5E8 STR X0, [X21 + 0x268]
	0x03C0C5EC MOV X0, X20
	0x03C0C5F0 MOV W1, W19
	0x03C0C5F4 LDP X20, X19, [X31 + 0x10]
	0x03C0C5F8 LDP X30, X21, [X31], #0x20
	0x03C0C5FC BR X2
	0x03C0C600 MOV X1, X31
	0x03C0C604 MOV X2, X31
	0x03C0C608 MOV X3, X31
	0x03C0C60C B 0x3C1E804
	0x03C0C610 SUB X31, X31, 0x40
	0x03C0C614 STP X30, X23, [X31 + 0x10]
	0x03C0C618 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move V4, [X0]
	002 Add S2, S2, S0
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move V2, [X0+8]
	005 Add S2, S4, S2
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Move V0, [X0+4]
	008 Add S2, S3, S1
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move V2, [X0+12]
	011 Add S0, S0, S2
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 NotImplemented "Instruction CSET not yet implemented."
	014 Return X0
	015 Move W0, W31
	016 Return X0

Method: System.Boolean Overlaps(UnityEngine.Rect other, System.Boolean allowInverse)

Disassembly:
	0x03C0C61C STP X20, X19, [X31 + 0x30]
	0x03C0C620 ADRP X22, 0x7D8000
	0x03C0C624 LDRB W8, [X22 + 0x21A]
	0x03C0C628 MOV X21, X2
	0x03C0C62C MOV X19, X1
	0x03C0C630 MOV X20, X0
	0x03C0C634 TBNZ X8, 0x0, 0x3C0C664
	0x03C0C638 ADRP X0, 0x4E9000
	0x03C0C63C LDR X0, [X0 + 0xC48]
	0x03C0C640 BL 0x1C16CF4
	0x03C0C644 ADRP X0, 0x4E7000
	0x03C0C648 LDR X0, [X0 + 0x9D0]
	0x03C0C64C BL 0x1C16CF4
	0x03C0C650 ADRP X0, 0x552000
	0x03C0C654 LDR X0, [X0 + 0xCB8]
	0x03C0C658 BL 0x1C16CF4
	0x03C0C65C MOVZ W8, 0x1
	0x03C0C660 STRB W8, [X22 + 0x21A]
	0x03C0C664 CBNZ X21, 0x3C0C6A0
	0x03C0C668 ADRP X8, 0x4E9000
	0x03C0C66C LDR X8, [X8 + 0xC48]
	0x03C0C670 LDR X0, [X8]
	0x03C0C674 LDR W8, [X0 + 0xE0]
	0x03C0C678 CBNZ W8, 0x3C0C680
	0x03C0C67C BL 0x1C16DFC
	0x03C0C680 MOV X0, X31
	0x03C0C684 BL 0x3338524
	0x03C0C688 CBZ X0, 0x3C0C8A4
	0x03C0C68C LDR X8, [X0]
	0x03C0C690 LDR X9, [X8 + 0x218]
	0x03C0C694 LDR X1, [X8 + 0x220]
	0x03C0C698 BLR X9
	0x03C0C69C MOV X21, X0
	0x03C0C6A0 ADRP X8, 0x4E7000
	0x03C0C6A4 LDR X8, [X8 + 0x9D0]
	0x03C0C6A8 MOVZ W1, 0x4
	0x03C0C6AC LDR X0, [X8]

ISIL:
	001 Move S6, [X0]
	002 Move S4, [X0+4]
	003 Move S7, [X0+8]
	004 Move S5, [X0+12]
	005 Move TEMP, X1
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {29}
	009 Add S16, S6, S7
	010 Subtract S17, S6, S16
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 NotImplemented "Instruction FCSEL not yet implemented."
	013 Add S17, S4, S5
	014 NotImplemented "Instruction FCSEL not yet implemented."
	015 Subtract S16, S4, S17
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 NotImplemented "Instruction FCSEL not yet implemented."
	018 Add S16, S2, S0
	019 NotImplemented "Instruction FCSEL not yet implemented."
	020 Subtract S17, S0, S16
	021 NotImplemented "Instruction FCMP not yet implemented."
	022 NotImplemented "Instruction FCSEL not yet implemented."
	023 Add S17, S3, S1
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 Subtract S16, S1, S17
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 NotImplemented "Instruction FCSEL not yet implemented."
	028 NotImplemented "Instruction FCSEL not yet implemented."
	029 Add S7, S6, S7
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 Move W0, W31
	032 Add S0, S0, S2
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Add S0, S1, S3
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Add S0, S4, S5
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Return X0

Method: System.Boolean op_Inequality(UnityEngine.Rect lhs, UnityEngine.Rect rhs)

Disassembly:
	0x03C0C6B0 BL 0x1C16D6C
	0x03C0C6B4 ADRP X23, 0x7D8000
	0x03C0C6B8 LDR X8, [X23 + 0x230]
	0x03C0C6BC MOV X22, X0
	0x03C0C6C0 CBNZ X8, 0x3C0C6D8
	0x03C0C6C4 ADRP X0, 0xFFFFFFFFFCEF6000
	0x03C0C6C8 ADD X0, X0, 0xD29
	0x03C0C6CC BL 0x1C16CB8
	0x03C0C6D0 MOV X8, X0
	0x03C0C6D4 STR X0, [X23 + 0x230]
	0x03C0C6D8 MOV X0, X20
	0x03C0C6DC BLR X8
	0x03C0C6E0 STR W0, [X31 + 0xC]

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 Or W8, W8, W9
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Or W0, W9, W8
	010 Return X0
	011 Move W0, 1
	012 Return X0

Method: System.Boolean op_Equality(UnityEngine.Rect lhs, UnityEngine.Rect rhs)

Disassembly:
	0x03C0C6E4 ADD X0, X31, 0xC
	0x03C0C6E8 MOV X1, X19
	0x03C0C6EC MOV X2, X21
	0x03C0C6F0 MOV X3, X31
	0x03C0C6F4 BL 0x337B8BC
	0x03C0C6F8 CBZ X22, 0x3C0C8A4
	0x03C0C6FC MOV X23, X0
	0x03C0C700 CBZ X0, 0x3C0C718
	0x03C0C704 LDR X8, [X22]
	0x03C0C708 MOV X0, X23
	0x03C0C70C LDR X1, [X8 + 0x40]
	0x03C0C710 BL 0x1C16E00
	0x03C0C714 CBZ X0, 0x3C0C898

ISIL:
	001 NotImplemented "Instruction FCMP not yet implemented."
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 And W8, W8, W9
	008 NotImplemented "Instruction CSET not yet implemented."
	009 And W0, W8, W9
	010 Return X0
	011 Move W0, W31
	012 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C0C718 LDR W8, [X22 + 0x18]
	0x03C0C71C CBZ W8, 0x3C0C894
	0x03C0C720 STR X23, [X22 + 0x20]
	0x03C0C724 ADRP X23, 0x7D8000
	0x03C0C728 LDR X8, [X23 + 0x240]
	0x03C0C72C CBNZ X8, 0x3C0C744
	0x03C0C730 ADRP X0, 0xFFFFFFFFFCF10000
	0x03C0C734 ADD X0, X0, 0xD05
	0x03C0C738 BL 0x1C16CB8
	0x03C0C73C MOV X8, X0
	0x03C0C740 STR X0, [X23 + 0x240]
	0x03C0C744 MOV X0, X20
	0x03C0C748 BLR X8
	0x03C0C74C STR W0, [X31 + 0xC]
	0x03C0C750 ADD X0, X31, 0xC
	0x03C0C754 MOV X1, X19
	0x03C0C758 MOV X2, X21
	0x03C0C75C MOV X3, X31
	0x03C0C760 BL 0x337B8BC
	0x03C0C764 MOV X23, X0
	0x03C0C768 CBZ X0, 0x3C0C780
	0x03C0C76C LDR X8, [X22]
	0x03C0C770 MOV X0, X23
	0x03C0C774 LDR X1, [X8 + 0x40]
	0x03C0C778 BL 0x1C16E00
	0x03C0C77C CBZ X0, 0x3C0C898
	0x03C0C780 LDR W8, [X22 + 0x18]
	0x03C0C784 CMP W8, 0x1
	0x03C0C788 B.LS 0x3C0C894
	0x03C0C78C STR X23, [X22 + 0x28]
	0x03C0C790 ADRP X23, 0x7D8000
	0x03C0C794 LDR X8, [X23 + 0x250]
	0x03C0C798 CBNZ X8, 0x3C0C7B0
	0x03C0C79C ADRP X0, 0xFFFFFFFFFCF1C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move V0, [X0]
	007 Move X19, X0
	008 Add X0, X31, 12
	009 Move X1, X31
	010 Move [X31+12], S0
	011 Call Single.GetHashCode, X0
	012 Move V0, [X19+8]
	013 Move W20, W0
	014 Add X0, X31, 12
	015 Move X1, X31
	016 Move [X31+12], S0
	017 Call Single.GetHashCode, X0
	018 Move V0, [X19+4]
	019 Move W21, W0
	020 Add X0, X31, 12
	021 Move X1, X31
	022 Move [X31+12], S0
	023 Call Single.GetHashCode, X0
	024 Move V0, [X19+12]
	025 Move W22, W0
	026 Add X0, X31, 12
	027 Move X1, X31
	028 Move [X31+12], S0
	029 Call Single.GetHashCode, X0
	030 Xor W8, W20, W21
	031 Xor W8, W8, W22
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Xor W0, W8, W0
	037 Move X30, [X31+48]
	038 Return X0

Method: System.Boolean Equals(System.Object other)

Disassembly:
	0x03C0C7A0 ADD X0, X0, 0x3FE
	0x03C0C7A4 BL 0x1C16CB8
	0x03C0C7A8 MOV X8, X0
	0x03C0C7AC STR X0, [X23 + 0x250]
	0x03C0C7B0 MOV X0, X20
	0x03C0C7B4 BLR X8
	0x03C0C7B8 STR W0, [X31 + 0xC]
	0x03C0C7BC ADD X0, X31, 0xC
	0x03C0C7C0 MOV X1, X19
	0x03C0C7C4 MOV X2, X21
	0x03C0C7C8 MOV X3, X31
	0x03C0C7CC BL 0x337B8BC
	0x03C0C7D0 MOV X23, X0
	0x03C0C7D4 CBZ X0, 0x3C0C7EC
	0x03C0C7D8 LDR X8, [X22]
	0x03C0C7DC MOV X0, X23
	0x03C0C7E0 LDR X1, [X8 + 0x40]
	0x03C0C7E4 BL 0x1C16E00
	0x03C0C7E8 CBZ X0, 0x3C0C898
	0x03C0C7EC LDR W8, [X22 + 0x18]
	0x03C0C7F0 CMP W8, 0x2
	0x03C0C7F4 B.LS 0x3C0C894
	0x03C0C7F8 STR X23, [X22 + 0x30]
	0x03C0C7FC ADRP X23, 0x7D8000
	0x03C0C800 LDR X8, [X23 + 0x260]
	0x03C0C804 CBNZ X8, 0x3C0C81C
	0x03C0C808 ADRP X0, 0xFFFFFFFFFCF02000
	0x03C0C80C ADD X0, X0, 0xE55
	0x03C0C810 BL 0x1C16CB8
	0x03C0C814 MOV X8, X0
	0x03C0C818 STR X0, [X23 + 0x260]
	0x03C0C81C MOV X0, X20
	0x03C0C820 BLR X8
	0x03C0C824 STR W0, [X31 + 0xC]
	0x03C0C828 ADD X0, X31, 0xC
	0x03C0C82C MOV X1, X19
	0x03C0C830 MOV X2, X21
	0x03C0C834 MOV X3, X31
	0x03C0C838 BL 0x337B8BC
	0x03C0C83C MOV X19, X0
	0x03C0C840 CBZ X0, 0x3C0C858
	0x03C0C844 LDR X8, [X22]
	0x03C0C848 MOV X0, X19
	0x03C0C84C LDR X1, [X8 + 0x40]
	0x03C0C850 BL 0x1C16E00
	0x03C0C854 CBZ X0, 0x3C0C898
	0x03C0C858 LDR W8, [X22 + 0x18]
	0x03C0C85C CMP W8, 0x3
	0x03C0C860 B.LS 0x3C0C894
	0x03C0C864 ADRP X8, 0x552000
	0x03C0C868 LDR X8, [X8 + 0xCB8]
	0x03C0C86C STR X19, [X22 + 0x38]
	0x03C0C870 MOV X1, X22
	0x03C0C874 MOV X2, X31
	0x03C0C878 LDR X0, [X8]
	0x03C0C87C BL 0x3C96574
	0x03C0C880 LDP X20, X19, [X31 + 0x30]
	0x03C0C884 LDP X22, X21, [X31 + 0x20]
	0x03C0C888 LDP X30, X23, [X31 + 0x10]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7D9000
	009 Move W8, [X21+530]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x510000
	017 Move X0, [X0+1560]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+530], W8
	021 Compare X20, 0
	022 JumpIfEqual {69}
	023 Move X8, 0x510000
	024 Move X8, [X8+1560]
	025 Move X9, [X20]
	026 Move X8, [X8]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X20
	029 Call 0x1C17E08
	030 Move S0, [X0]
	031 Move S10, [X0+4]
	032 Move V1, [X19]
	033 Move S9, [X0+8]
	034 Move S8, [X0+12]
	035 Add X0, X31, 12
	036 Move X1, X31
	037 Move [X31+12], S1
	038 Call Single.Equals, X0, V0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {69}
	043 Move V0, [X19+4]
	044 Add X0, X31, 12
	045 Move X1, X31
	046 Move [X31+12], S0
	047 Move V0, V10
	048 Call Single.Equals, X0, V0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {69}
	053 Move V0, [X19+8]
	054 Add X0, X31, 12
	055 Move X1, X31
	056 Move [X31+12], S0
	057 Move V0, V9
	058 Call Single.Equals, X0, V0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {69}
	063 Move V0, [X19+12]
	064 Add X0, X31, 12
	065 Move X1, X31
	066 Move [X31+12], S0
	067 Move V0, V8
	068 Call Single.Equals, X0, V0
	069 Move W0, W31
	070 Move X20, [X31+48]
	071 Move X19, [X31+56]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Move D9, [X31+16]
	075 Move D8, [X31+24]
	076 And W0, W0, 1
	077 Move V10, [X31+64]
	078 Return X0

Method: System.Boolean Equals(UnityEngine.Rect other)

Disassembly:
	0x03C0C88C ADD X31, X31, 0x40
	0x03C0C890 RET
	0x03C0C894 BL 0x1C16F28
	0x03C0C898 BL 0x1C16F44
	0x03C0C89C MOV X1, X31
	0x03C0C8A0 BL 0x1C16DEC
	0x03C0C8A4 BL 0x1C16F20
	0x03C0C8A8 STR X30, [X31 - 0x20]!
	0x03C0C8AC STP X20, X19, [X31 + 0x10]
	0x03C0C8B0 ADRP X20, 0x7D8000
	0x03C0C8B4 LDR X1, [X20 + 0x230]
	0x03C0C8B8 MOV X19, X0
	0x03C0C8BC CBNZ X1, 0x3C0C8D4
	0x03C0C8C0 ADRP X0, 0xFFFFFFFFFCEF6000
	0x03C0C8C4 ADD X0, X0, 0xD29
	0x03C0C8C8 BL 0x1C16CB8
	0x03C0C8CC MOV X1, X0
	0x03C0C8D0 STR X0, [X20 + 0x230]
	0x03C0C8D4 MOV X0, X19
	0x03C0C8D8 LDP X20, X19, [X31 + 0x10]
	0x03C0C8DC LDR X30, [X31], #0x20
	0x03C0C8E0 BR X1
	0x03C0C8E4 STR X30, [X31 - 0x20]!
	0x03C0C8E8 STP X20, X19, [X31 + 0x10]
	0x03C0C8EC ADRP X20, 0x7D8000
	0x03C0C8F0 LDR X1, [X20 + 0x240]
	0x03C0C8F4 MOV X19, X0
	0x03C0C8F8 CBNZ X1, 0x3C0C910
	0x03C0C8FC ADRP X0, 0xFFFFFFFFFCF10000
	0x03C0C900 ADD X0, X0, 0xD05
	0x03C0C904 BL 0x1C16CB8
	0x03C0C908 MOV X1, X0
	0x03C0C90C STR X0, [X20 + 0x240]
	0x03C0C910 MOV X0, X19
	0x03C0C914 LDP X20, X19, [X31 + 0x10]
	0x03C0C918 LDR X30, [X31], #0x20
	0x03C0C91C BR X1
	0x03C0C920 STR X30, [X31 - 0x20]!
	0x03C0C924 STP X20, X19, [X31 + 0x10]
	0x03C0C928 ADRP X20, 0x7D8000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V10, V1
	007 Move V1, [X0]
	008 Move X19, X0
	009 Add X0, X31, 12
	010 Move X1, X31
	011 Move V8, V3
	012 Move V9, V2
	013 Move [X31+12], S1
	014 Call Single.Equals, X0, V0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {45}
	019 Move V0, [X19+4]
	020 Add X0, X31, 12
	021 Move X1, X31
	022 Move [X31+12], S0
	023 Move V0, V10
	024 Call Single.Equals, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {45}
	029 Move V0, [X19+8]
	030 Add X0, X31, 12
	031 Move X1, X31
	032 Move [X31+12], S0
	033 Move V0, V9
	034 Call Single.Equals, X0, V0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {45}
	039 Move V0, [X19+12]
	040 Add X0, X31, 12
	041 Move X1, X31
	042 Move [X31+12], S0
	043 Move V0, V8
	044 Call Single.Equals, X0, V0
	045 Move W0, W31
	046 Move X30, [X31+32]
	047 Move X19, [X31+40]
	048 Move D9, [X31+16]
	049 Move D8, [X31+24]
	050 And W0, W0, 1
	051 Move V10, [X31+48]
	052 Return X0

Method: System.String ToString()

Disassembly:
	0x03C0C92C LDR X1, [X20 + 0x250]
	0x03C0C930 MOV X19, X0
	0x03C0C934 CBNZ X1, 0x3C0C94C

ISIL:
	001 Move X1, X31
	002 Move X2, X31

Method: System.String ToString(System.String format, System.IFormatProvider formatProvider)

Disassembly:
	0x03C0C938 ADRP X0, 0xFFFFFFFFFCF1C000
	0x03C0C93C ADD X0, X0, 0x3FE
	0x03C0C940 BL 0x1C16CB8
	0x03C0C944 MOV X1, X0
	0x03C0C948 STR X0, [X20 + 0x250]
	0x03C0C94C MOV X0, X19
	0x03C0C950 LDP X20, X19, [X31 + 0x10]
	0x03C0C954 LDR X30, [X31], #0x20
	0x03C0C958 BR X1
	0x03C0C95C STR X30, [X31 - 0x20]!
	0x03C0C960 STP X20, X19, [X31 + 0x10]
	0x03C0C964 ADRP X20, 0x7D8000
	0x03C0C968 LDR X1, [X20 + 0x260]
	0x03C0C96C MOV X19, X0
	0x03C0C970 CBNZ X1, 0x3C0C988
	0x03C0C974 ADRP X0, 0xFFFFFFFFFCF02000
	0x03C0C978 ADD X0, X0, 0xE55
	0x03C0C97C BL 0x1C16CB8
	0x03C0C980 MOV X1, X0
	0x03C0C984 STR X0, [X20 + 0x260]
	0x03C0C988 MOV X0, X19
	0x03C0C98C LDP X20, X19, [X31 + 0x10]
	0x03C0C990 LDR X30, [X31], #0x20
	0x03C0C994 BR X1
	0x03C0C998 STR X30, [X31 - 0x20]!
	0x03C0C99C STP X20, X19, [X31 + 0x10]
	0x03C0C9A0 ADRP X20, 0x7D8000
	0x03C0C9A4 LDR X1, [X20 + 0x228]
	0x03C0C9A8 MOV X19, X0
	0x03C0C9AC CBNZ X1, 0x3C0C9C4
	0x03C0C9B0 ADRP X0, 0xFFFFFFFFFCF1A000
	0x03C0C9B4 ADD X0, X0, 0xAC8
	0x03C0C9B8 BL 0x1C16CB8
	0x03C0C9BC MOV X1, X0
	0x03C0C9C0 STR X0, [X20 + 0x228]
	0x03C0C9C4 MOV X0, X19
	0x03C0C9C8 LDP X20, X19, [X31 + 0x10]
	0x03C0C9CC LDR X30, [X31], #0x20
	0x03C0C9D0 BR X1
	0x03C0C9D4 STR X30, [X31 - 0x20]!
	0x03C0C9D8 STP X20, X19, [X31 + 0x10]
	0x03C0C9DC ADRP X20, 0x7D8000
	0x03C0C9E0 LDR X1, [X20 + 0x270]
	0x03C0C9E4 MOV X19, X0
	0x03C0C9E8 CBNZ X1, 0x3C0CA00
	0x03C0C9EC ADRP X0, 0xFFFFFFFFFCF10000
	0x03C0C9F0 ADD X0, X0, 0xD29
	0x03C0C9F4 BL 0x1C16CB8
	0x03C0C9F8 MOV X1, X0
	0x03C0C9FC STR X0, [X20 + 0x270]
	0x03C0CA00 MOV X0, X19
	0x03C0CA04 LDP X20, X19, [X31 + 0x10]
	0x03C0CA08 LDR X30, [X31], #0x20
	0x03C0CA0C BR X1
	0x03C0CA10 STR X30, [X31 - 0x20]!
	0x03C0CA14 STP X20, X19, [X31 + 0x10]
	0x03C0CA18 ADRP X20, 0x7D8000
	0x03C0CA1C LDR X1, [X20 + 0x278]
	0x03C0CA20 MOV X19, X0
	0x03C0CA24 CBNZ X1, 0x3C0CA3C
	0x03C0CA28 ADRP X0, 0xFFFFFFFFFCF06000
	0x03C0CA2C ADD X0, X0, 0x9CF
	0x03C0CA30 BL 0x1C16CB8
	0x03C0CA34 MOV X1, X0
	0x03C0CA38 STR X0, [X20 + 0x278]
	0x03C0CA3C MOV X0, X19
	0x03C0CA40 LDP X20, X19, [X31 + 0x10]
	0x03C0CA44 LDR X30, [X31], #0x20
	0x03C0CA48 BR X1
	0x03C0CA4C SUB X31, X31, 0x40
	0x03C0CA50 STR X30, [X31 + 0x20]
	0x03C0CA54 STP X20, X19, [X31 + 0x30]
	0x03C0CA58 ADRP X20, 0x7D8000
	0x03C0CA5C LDR X8, [X20 + 0x280]
	0x03C0CA60 MOV X19, X0
	0x03C0CA64 STP S0, S1, [X31 + 0x10]
	0x03C0CA68 STP S2, S3, [X31 + 0x18]
	0x03C0CA6C STP X31, X31, [X31]
	0x03C0CA70 CBNZ X8, 0x3C0CA88
	0x03C0CA74 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C0CA78 ADD X0, X0, 0x517
	0x03C0CA7C BL 0x1C16CB8
	0x03C0CA80 MOV X8, X0
	0x03C0CA84 STR X0, [X20 + 0x280]
	0x03C0CA88 ADD X1, X31, 0x10
	0x03C0CA8C ADD X2, X31, 0x0
	0x03C0CA90 MOV X0, X19
	0x03C0CA94 BLR X8
	0x03C0CA98 LDP S0, S1, [X31]
	0x03C0CA9C LDP S2, S3, [X31 + 0x8]
	0x03C0CAA0 LDP X20, X19, [X31 + 0x30]
	0x03C0CAA4 LDR X30, [X31 + 0x20]
	0x03C0CAA8 ADD X31, X31, 0x40
	0x03C0CAAC RET
	0x03C0CAB0 STR X30, [X31 - 0x30]!
	0x03C0CAB4 STP X22, X21, [X31 + 0x10]
	0x03C0CAB8 STP X20, X19, [X31 + 0x20]
	0x03C0CABC ADRP X22, 0x7D8000
	0x03C0CAC0 LDR X3, [X22 + 0x280]
	0x03C0CAC4 MOV X19, X2
	0x03C0CAC8 MOV X20, X1
	0x03C0CACC MOV X21, X0
	0x03C0CAD0 CBNZ X3, 0x3C0CAE8
	0x03C0CAD4 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C0CAD8 ADD X0, X0, 0x517
	0x03C0CADC BL 0x1C16CB8
	0x03C0CAE0 MOV X3, X0
	0x03C0CAE4 STR X0, [X22 + 0x280]
	0x03C0CAE8 MOV X0, X21
	0x03C0CAEC MOV X1, X20
	0x03C0CAF0 MOV X2, X19
	0x03C0CAF4 LDP X20, X19, [X31 + 0x20]
	0x03C0CAF8 LDP X22, X21, [X31 + 0x10]
	0x03C0CAFC LDR X30, [X31], #0x30
	0x03C0CB00 BR X3
	0x03C0CB04 SUB X31, X31, 0x30
	0x03C0CB08 STP X30, X19, [X31 + 0x20]
	0x03C0CB0C ADRP X19, 0x7D8000
	0x03C0CB10 LDR X8, [X19 + 0x288]
	0x03C0CB14 STP S0, S1, [X31 + 0x10]
	0x03C0CB18 STR S2, [X31 + 0x18]
	0x03C0CB1C STP S3, S4, [X31]
	0x03C0CB20 STR S5, [X31 + 0x8]
	0x03C0CB24 CBNZ X8, 0x3C0CB3C
	0x03C0CB28 ADRP X0, 0xFFFFFFFFFCEE2000
	0x03C0CB2C ADD X0, X0, 0xC68
	0x03C0CB30 BL 0x1C16CB8
	0x03C0CB34 MOV X8, X0
	0x03C0CB38 STR X0, [X19 + 0x288]
	0x03C0CB3C ADD X0, X31, 0x10
	0x03C0CB40 ADD X1, X31, 0x0
	0x03C0CB44 BLR X8
	0x03C0CB48 LDP X30, X19, [X31 + 0x20]
	0x03C0CB4C ADD X31, X31, 0x30
	0x03C0CB50 RET
	0x03C0CB54 STP X30, X21, [X31 - 0x20]!
	0x03C0CB58 STP X20, X19, [X31 + 0x10]
	0x03C0CB5C ADRP X21, 0x7D8000
	0x03C0CB60 LDR X2, [X21 + 0x288]
	0x03C0CB64 MOV X19, X1
	0x03C0CB68 MOV X20, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x7D9000
	009 Move X22, 0x4EF000
	010 Move W8, [X23+531]
	011 Move X22, [X22+3704]
	012 Move X20, X2
	013 Move X21, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {33}
	019 Move X0, 0x4EA000
	020 Move X0, [X0+3144]
	021 Call 0x1C17CF4
	022 Move X0, 0x4E8000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0x553000
	026 Move X0, [X0+3248]
	027 Call 0x1C17CF4
	028 Move X0, 0x4EF000
	029 Move X0, [X0+3704]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X23+531], W8
	033 Move X0, X21
	034 Move X1, X31
	035 Call String.IsNullOrEmpty, X0
	036 Move X8, [X22]
	037 And W31, W0, 1
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 Compare X20, 0
	040 JumpIfNotEqual {57}
	041 Move X8, 0x4EA000
	042 Move X8, [X8+3144]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X31
	049 Call CultureInfo.get_InvariantCulture
	050 Compare X0, 0
	051 JumpIfEqual {160}
	052 Move X8, [X0]
	053 Move X9, [X8+536]
	054 Move X1, [X8+544]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move X20, X0
	057 Move X8, 0x4E8000
	058 Move X8, [X8+2512]
	059 Move W1, 4
	060 Move X0, [X8]
	061 Call 0x1C17D6C
	062 Move V0, [X19]
	063 Move X22, X0
	064 Add X0, X31, 12
	065 Move X1, X21
	066 Move X2, X20
	067 Move X3, X31
	068 Move [X31+12], S0
	069 Call Single.ToString, X0, X1, X2
	070 Compare X22, 0
	071 JumpIfEqual {160}
	072 Move X23, X0
	073 Compare X0, 0
	074 JumpIfEqual {81}
	075 Move X8, [X22]
	076 Move X0, X23
	077 Move X1, [X8+64]
	078 Call 0x1C17E00
	079 Compare X0, 0
	080 JumpIfEqual {157}
	081 Move W8, [X22+24]
	082 Compare W8, 0
	083 JumpIfEqual {156}
	084 Move [X22+32], X23
	085 Move V0, [X19+4]
	086 Add X0, X31, 12
	087 Move X1, X21
	088 Move X2, X20
	089 Move X3, X31
	090 Move [X31+12], S0
	091 Call Single.ToString, X0, X1, X2
	092 Move X23, X0
	093 Compare X0, 0
	094 JumpIfEqual {101}
	095 Move X8, [X22]
	096 Move X0, X23
	097 Move X1, [X8+64]
	098 Call 0x1C17E00
	099 Compare X0, 0
	100 JumpIfEqual {157}
	101 Move W8, [X22+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move [X22+40], X23
	104 Move V0, [X19+8]
	105 Add X0, X31, 12
	106 Move X1, X21
	107 Move X2, X20
	108 Move X3, X31
	109 Move [X31+12], S0
	110 Call Single.ToString, X0, X1, X2
	111 Move X23, X0
	112 Compare X0, 0
	113 JumpIfEqual {120}
	114 Move X8, [X22]
	115 Move X0, X23
	116 Move X1, [X8+64]
	117 Call 0x1C17E00
	118 Compare X0, 0
	119 JumpIfEqual {157}
	120 Move W8, [X22+24]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move [X22+48], X23
	123 Move V0, [X19+12]
	124 Add X0, X31, 12
	125 Move X1, X21
	126 Move X2, X20
	127 Move X3, X31
	128 Move [X31+12], S0
	129 Call Single.ToString, X0, X1, X2
	130 Move X19, X0
	131 Compare X0, 0
	132 JumpIfEqual {139}
	133 Move X8, [X22]
	134 Move X0, X19
	135 Move X1, [X8+64]
	136 Call 0x1C17E00
	137 Compare X0, 0
	138 JumpIfEqual {157}
	139 Move W8, [X22+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X8, 0x553000
	142 Move X8, [X8+3248]
	143 Move [X22+56], X19
	144 Move X1, X22
	145 Move X2, X31
	146 Move X0, [X8]
	147 Call UnityString.Format, X0, X1
	148 Move X20, [X31+48]
	149 Move X19, [X31+56]
	150 Move X22, [X31+32]
	151 Move X21, [X31+40]
	152 Move X30, [X31+16]
	153 Move X23, [X31+24]
	154 Add X31, X31, 64
	155 Return X0
	156 Call 0x1C17F28
	157 Call 0x1C17F44
	158 Move X1, X31
	159 Call 0x1C17DEC
	160 Call 0x1C17F20

