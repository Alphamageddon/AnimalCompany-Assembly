Type: UnityEngine.LineRenderer

Method: System.Void set_startWidth(System.Single value)

Disassembly:
	0x03C123D8 LDRB W8, [X20 + 0x658]
	0x03C123DC MOV X19, X0
	0x03C123E0 TBNZ X8, 0x0, 0x3C123F8
	0x03C123E4 ADRP X0, 0x4E8000
	0x03C123E8 LDR X0, [X0 + 0xC10]
	0x03C123EC BL 0x1C16CF4
	0x03C123F0 MOVZ W8, 0x1
	0x03C123F4 STRB W8, [X20 + 0x658]
	0x03C123F8 LDR X0, [X19 + 0x10]
	0x03C123FC ADRP X21, 0x4E8000
	0x03C12400 LDR X21, [X21 + 0xC10]
	0x03C12404 MOV X1, X31
	0x03C12408 MOV X2, X31
	0x03C1240C BL 0x33C5D2C
	0x03C12410 TBZ X0, 0x0, 0x3C12444
	0x03C12414 ADRP X22, 0x7D2000
	0x03C12418 LDR X8, [X22 + 0x648]
	0x03C1241C LDR X20, [X19 + 0x10]
	0x03C12420 CBNZ X8, 0x3C12438

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7D3000
	006 Move X1, [X20+1416]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51310592
	012 Add X0, X0, 3434
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+1416], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_endWidth(System.Single value)

Disassembly:
	0x03C12424 ADRP X0, 0xFFFFFFFFFCF16000
	0x03C12428 ADD X0, X0, 0x50A
	0x03C1242C BL 0x1C16CB8
	0x03C12430 MOV X8, X0
	0x03C12434 STR X0, [X22 + 0x648]
	0x03C12438 MOV X0, X20
	0x03C1243C BLR X8
	0x03C12440 STR X31, [X19 + 0x10]
	0x03C12444 LDR X0, [X21]
	0x03C12448 LDR W8, [X0 + 0xE0]
	0x03C1244C CBNZ W8, 0x3C12454
	0x03C12450 BL 0x1C16DFC
	0x03C12454 MOV X0, X19
	0x03C12458 LDP X20, X19, [X31 + 0x20]
	0x03C1245C LDP X22, X21, [X31 + 0x10]
	0x03C12460 MOV X1, X31
	0x03C12464 LDR X30, [X31], #0x30
	0x03C12468 B 0x33B3E9C
	0x03C1246C STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7D3000
	006 Move X1, [X20+1424]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51294208
	012 Add X0, X0, 3000
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+1424], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_widthMultiplier(System.Single value)

Disassembly:
	0x03C12470 STP X22, X21, [X31 + 0x10]
	0x03C12474 STP X20, X19, [X31 + 0x20]
	0x03C12478 ADRP X22, 0x7D2000
	0x03C1247C LDR X8, [X22 + 0x810]
	0x03C12480 MOV W19, W2
	0x03C12484 MOV X21, X1
	0x03C12488 MOV X20, X0
	0x03C1248C CBNZ X8, 0x3C124A4
	0x03C12490 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C12494 ADD X0, X0, 0xE80
	0x03C12498 BL 0x1C16CB8
	0x03C1249C MOV X8, X0
	0x03C124A0 STR X0, [X22 + 0x810]
	0x03C124A4 MOV X0, X21
	0x03C124A8 BLR X8
	0x03C124AC ADRP X22, 0x7D2000
	0x03C124B0 LDR X2, [X22 + 0x610]
	0x03C124B4 MOV W21, W0
	0x03C124B8 CBNZ X2, 0x3C124D0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7D3000
	006 Move X1, [X20+1432]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51388416
	012 Add X0, X0, 192
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+1432], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: System.Void set_numCapVertices(System.Int32 value)

Disassembly:
	0x03C124BC ADRP X0, 0xFFFFFFFFFCF08000
	0x03C124C0 ADD X0, X0, 0x9E9
	0x03C124C4 BL 0x1C16CB8
	0x03C124C8 MOV X2, X0
	0x03C124CC STR X0, [X22 + 0x610]
	0x03C124D0 SCVTF S0, W19
	0x03C124D4 MOV X0, X20
	0x03C124D8 MOV W1, W21
	0x03C124DC LDP X20, X19, [X31 + 0x20]
	0x03C124E0 LDP X22, X21, [X31 + 0x10]
	0x03C124E4 LDR X30, [X31], #0x30
	0x03C124E8 BR X2
	0x03C124EC STR X30, [X31 - 0x20]!
	0x03C124F0 STP X20, X19, [X31 + 0x10]
	0x03C124F4 ADRP X20, 0x7D2000
	0x03C124F8 LDR X1, [X20 + 0x810]
	0x03C124FC MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1440]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51359744
	012 Add X0, X0, 1933
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1440], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean get_useWorldSpace()

Disassembly:
	0x03C12500 CBNZ X1, 0x3C12518
	0x03C12504 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C12508 ADD X0, X0, 0xE80
	0x03C1250C BL 0x1C16CB8
	0x03C12510 MOV X1, X0
	0x03C12514 STR X0, [X20 + 0x810]
	0x03C12518 MOV X0, X19
	0x03C1251C LDP X20, X19, [X31 + 0x10]
	0x03C12520 LDR X30, [X31], #0x20
	0x03C12524 BR X1
	0x03C12528 STR X30, [X31 - 0x30]!
	0x03C1252C STP X22, X21, [X31 + 0x10]
	0x03C12530 STP X20, X19, [X31 + 0x20]
	0x03C12534 ADRP X22, 0x7D2000
	0x03C12538 MOV W20, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D3000
	005 Move X1, [X20+1448]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51482624
	010 Add X0, X0, 3902
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1448], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_useWorldSpace(System.Boolean value)

Disassembly:
	0x03C1253C LDR X2, [X22 + 0x610]
	0x03C12540 MOV W19, W1
	0x03C12544 MOV X21, X0
	0x03C12548 CBNZ X2, 0x3C12560
	0x03C1254C ADRP X0, 0xFFFFFFFFFCF08000
	0x03C12550 ADD X0, X0, 0x9E9
	0x03C12554 BL 0x1C16CB8
	0x03C12558 MOV X2, X0
	0x03C1255C STR X0, [X22 + 0x610]
	0x03C12560 SCVTF S0, W20
	0x03C12564 MOV X0, X21
	0x03C12568 MOV W1, W19
	0x03C1256C LDP X20, X19, [X31 + 0x20]
	0x03C12570 LDP X22, X21, [X31 + 0x10]
	0x03C12574 LDR X30, [X31], #0x30
	0x03C12578 BR X2
	0x03C1257C STR D8, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1456]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51523584
	012 Add X0, X0, 3449
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1456], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Color get_startColor()

Disassembly:
	0x03C12580 STP X30, X21, [X31 + 0x10]
	0x03C12584 STP X20, X19, [X31 + 0x20]
	0x03C12588 ADRP X21, 0x7D2000
	0x03C1258C LDR X8, [X21 + 0x810]
	0x03C12590 MOV V8.16B, V0.16B
	0x03C12594 MOV X20, X1
	0x03C12598 MOV X19, X0
	0x03C1259C CBNZ X8, 0x3C125B4
	0x03C125A0 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C125A4 ADD X0, X0, 0xE80
	0x03C125A8 BL 0x1C16CB8
	0x03C125AC MOV X8, X0
	0x03C125B0 STR X0, [X21 + 0x810]
	0x03C125B4 MOV X0, X20
	0x03C125B8 BLR X8
	0x03C125BC ADRP X21, 0x7D2000
	0x03C125C0 LDR X2, [X21 + 0x610]
	0x03C125C4 MOV W20, W0
	0x03C125C8 CBNZ X2, 0x3C125E0
	0x03C125CC ADRP X0, 0xFFFFFFFFFCF08000
	0x03C125D0 ADD X0, X0, 0x9E9
	0x03C125D4 BL 0x1C16CB8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7D3000
	007 Move X8, [X20+1512]
	008 Move X19, X0
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51326976
	013 Add X0, X0, 2552
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+1512], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move S2, [X31+8]
	023 Move S3, [X31+12]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 48
	028 Return X0

Method: System.Void set_startColor(UnityEngine.Color value)

Disassembly:
	0x03C1261C CBNZ X2, 0x3C12634
	0x03C12620 ADRP X0, 0xFFFFFFFFFCF08000
	0x03C12624 ADD X0, X0, 0x9E9
	0x03C12628 BL 0x1C16CB8
	0x03C1262C MOV X2, X0
	0x03C12630 STR X0, [X21 + 0x610]
	0x03C12634 MOV X0, X20
	0x03C12638 MOV W1, W19
	0x03C1263C LDP X20, X19, [X31 + 0x20]
	0x03C12640 LDP X30, X21, [X31 + 0x10]
	0x03C12644 MOV V0.16B, V8.16B
	0x03C12648 LDR V8, [X31], #0x30
	0x03C1264C BR X2
	0x03C12650 STR X30, [X31 - 0x30]!
	0x03C12654 STP X22, X21, [X31 + 0x10]
	0x03C12658 STP X20, X19, [X31 + 0x20]
	0x03C1265C ADRP X22, 0x7D2000
	0x03C12660 LDR X3, [X22 + 0x608]
	0x03C12664 MOV W19, W2
	0x03C12668 MOV W20, W1
	0x03C1266C MOV X21, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7D3000
	006 Move X8, [X20+1520]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Move [X31+16], S3
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51286016
	015 Add X0, X0, 1220
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X20+1520], X0
	019 Add X1, X31, 0
	020 Move X0, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+16]
	025 Add X31, X31, 48
	026 Return 

Method: UnityEngine.Color get_endColor()

Disassembly:
	0x03C126B4 ADRP X21, 0x7D2000
	0x03C126B8 LDR X8, [X21 + 0x810]
	0x03C126BC MOV V8.16B, V3.16B
	0x03C126C0 MOV V9.16B, V2.16B
	0x03C126C4 MOV V10.16B, V1.16B
	0x03C126C8 MOV V11.16B, V0.16B
	0x03C126CC MOV X19, X1
	0x03C126D0 MOV X20, X0
	0x03C126D4 CBNZ X8, 0x3C126EC
	0x03C126D8 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C126DC ADD X0, X0, 0xE80
	0x03C126E0 BL 0x1C16CB8
	0x03C126E4 MOV X8, X0
	0x03C126E8 STR X0, [X21 + 0x810]
	0x03C126EC MOV X0, X19
	0x03C126F0 BLR X8
	0x03C126F4 MOV W1, W0
	0x03C126F8 MOV X0, X20
	0x03C126FC MOV V2.16B, V9.16B
	0x03C12700 MOV V3.16B, V8.16B
	0x03C12704 LDP X20, X19, [X31 + 0x30]
	0x03C12708 LDP X30, X21, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7D3000
	007 Move X8, [X20+1528]
	008 Move X19, X0
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51318784
	013 Add X0, X0, 2168
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+1528], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move S2, [X31+8]
	023 Move S3, [X31+12]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 48
	028 Return X0

Method: System.Void set_endColor(UnityEngine.Color value)

Disassembly:
	0x03C12750 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C12754 ADD X0, X0, 0xE80
	0x03C12758 BL 0x1C16CB8
	0x03C1275C MOV X8, X0
	0x03C12760 STR X0, [X22 + 0x810]
	0x03C12764 MOV X0, X20
	0x03C12768 BLR X8
	0x03C1276C LDP V0, V1, [X21 + 0x20]
	0x03C12770 LDP V3, V2, [X21]
	0x03C12774 ADRP X21, 0x7D2000
	0x03C12778 LDR X8, [X21 + 0x670]
	0x03C1277C MOV W20, W0
	0x03C12780 STP V0, V1, [X31 + 0x20]
	0x03C12784 STP V3, V2, [X31]
	0x03C12788 CBNZ X8, 0x3C127A0
	0x03C1278C ADRP X0, 0xFFFFFFFFFCF02000
	0x03C12790 ADD X0, X0, 0x866
	0x03C12794 BL 0x1C16CB8
	0x03C12798 MOV X8, X0
	0x03C1279C STR X0, [X21 + 0x670]
	0x03C127A0 ADD X2, X31, 0x0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7D3000
	006 Move X8, [X20+1536]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Move [X31+16], S3
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51388416
	015 Add X0, X0, 321
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X20+1536], X0
	019 Add X1, X31, 0
	020 Move X0, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+16]
	025 Add X31, X31, 48
	026 Return 

Method: System.Void set_positionCount(System.Int32 value)

Disassembly:
	0x03C127E8 STP V0, V1, [X31 + 0x20]
	0x03C127EC STP V2, V3, [X31]
	0x03C127F0 CBNZ X8, 0x3C12808
	0x03C127F4 ADRP X0, 0xFFFFFFFFFCF02000
	0x03C127F8 ADD X0, X0, 0x866
	0x03C127FC BL 0x1C16CB8
	0x03C12800 MOV X8, X0
	0x03C12804 STR X0, [X21 + 0x670]
	0x03C12808 ADD X2, X31, 0x0
	0x03C1280C MOV X0, X20
	0x03C12810 MOV W1, W19
	0x03C12814 BLR X8
	0x03C12818 LDP X20, X19, [X31 + 0x50]
	0x03C1281C LDP X30, X21, [X31 + 0x40]
	0x03C12820 ADD X31, X31, 0x60
	0x03C12824 RET
	0x03C12828 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1464]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51494912
	012 Add X0, X0, 393
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1464], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_widthCurve(UnityEngine.AnimationCurve value)

Disassembly:
	0x03C1282C STP X22, X21, [X31 + 0x10]
	0x03C12830 STP X20, X19, [X31 + 0x20]
	0x03C12834 ADRP X22, 0x7D2000
	0x03C12838 LDR X3, [X22 + 0x618]
	0x03C1283C MOV X19, X2
	0x03C12840 MOV W20, W1
	0x03C12844 MOV X21, X0
	0x03C12848 CBNZ X3, 0x3C12860
	0x03C1284C ADRP X0, 0xFFFFFFFFFCF1A000
	0x03C12850 ADD X0, X0, 0x6D1
	0x03C12854 BL 0x1C16CB8
	0x03C12858 MOV X3, X0
	0x03C1285C STR X0, [X22 + 0x618]
	0x03C12860 MOV X0, X21
	0x03C12864 MOV W1, W20
	0x03C12868 MOV X2, X19
	0x03C1286C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1472]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51388416
	012 Add X0, X0, 253
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1472], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_colorGradient(UnityEngine.Gradient value)

Disassembly:
	0x03C128B4 STR X0, [X23 + 0x620]
	0x03C128B8 MOV X0, X22
	0x03C128BC MOV W1, W21
	0x03C128C0 MOV X2, X20
	0x03C128C4 MOV W3, W19
	0x03C128C8 LDP X20, X19, [X31 + 0x20]
	0x03C128CC LDP X22, X21, [X31 + 0x10]
	0x03C128D0 LDP X30, X23, [X31], #0x30
	0x03C128D4 BR X4
	0x03C128D8 STR X30, [X31 - 0x30]!
	0x03C128DC STP X22, X21, [X31 + 0x10]
	0x03C128E0 STP X20, X19, [X31 + 0x20]
	0x03C128E4 ADRP X22, 0x7D2000
	0x03C128E8 LDR X8, [X22 + 0x810]
	0x03C128EC MOV X19, X2
	0x03C128F0 MOV X21, X1
	0x03C128F4 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1480]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51507200
	012 Add X0, X0, 3888
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1480], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetWidthCurve(UnityEngine.AnimationCurve curve)

Disassembly:
	0x03C12870 LDP X22, X21, [X31 + 0x10]
	0x03C12874 LDR X30, [X31], #0x30
	0x03C12878 BR X3
	0x03C1287C STP X30, X23, [X31 - 0x30]!
	0x03C12880 STP X22, X21, [X31 + 0x10]
	0x03C12884 STP X20, X19, [X31 + 0x20]
	0x03C12888 ADRP X23, 0x7D2000
	0x03C1288C LDR X4, [X23 + 0x620]
	0x03C12890 MOV W19, W3
	0x03C12894 MOV X20, X2
	0x03C12898 MOV W21, W1
	0x03C1289C MOV X22, X0
	0x03C128A0 CBNZ X4, 0x3C128B8
	0x03C128A4 ADRP X0, 0xFFFFFFFFFCEF8000
	0x03C128A8 ADD X0, X0, 0xFD6
	0x03C128AC BL 0x1C16CB8
	0x03C128B0 MOV X4, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1472]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51388416
	012 Add X0, X0, 253
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1472], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetColorGradient(UnityEngine.Gradient curve)

Disassembly:
	0x03C128F8 CBNZ X8, 0x3C12910
	0x03C128FC ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C12900 ADD X0, X0, 0xE80
	0x03C12904 BL 0x1C16CB8
	0x03C12908 MOV X8, X0
	0x03C1290C STR X0, [X22 + 0x810]
	0x03C12910 MOV X0, X21
	0x03C12914 BLR X8
	0x03C12918 CBZ X19, 0x3C1293C
	0x03C1291C MOV W1, W0
	0x03C12920 LDR W3, [X19 + 0x18]
	0x03C12924 MOV X0, X20
	0x03C12928 MOV X2, X19
	0x03C1292C LDP X20, X19, [X31 + 0x20]
	0x03C12930 LDP X22, X21, [X31 + 0x10]
	0x03C12934 LDR X30, [X31], #0x30
	0x03C12938 B 0x3C11FC8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1480]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51507200
	012 Add X0, X0, 3888
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1480], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetPositions(UnityEngine.Vector3[] positions)

Disassembly:
	0x03C1293C BL 0x1C16F20
	0x03C12940 STR X30, [X31 - 0x30]!
	0x03C12944 STP X22, X21, [X31 + 0x10]
	0x03C12948 STP X20, X19, [X31 + 0x20]
	0x03C1294C ADRP X22, 0x7D2000
	0x03C12950 LDR X8, [X22 + 0x810]
	0x03C12954 MOV X19, X2
	0x03C12958 MOV X21, X1
	0x03C1295C MOV X20, X0
	0x03C12960 CBNZ X8, 0x3C12978
	0x03C12964 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C12968 ADD X0, X0, 0xE80
	0x03C1296C BL 0x1C16CB8
	0x03C12970 MOV X8, X0
	0x03C12974 STR X0, [X22 + 0x810]
	0x03C12978 MOV X0, X21
	0x03C1297C BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1488]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51343360
	012 Add X0, X0, 2475
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1488], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetPositions(Unity.Collections.NativeArray`1<UnityEngine.Vector3> positions)

Disassembly:
	0x03C12980 CBZ X19, 0x3C129A4
	0x03C12984 MOV W1, W0
	0x03C12988 LDR W3, [X19 + 0x18]
	0x03C1298C MOV X0, X20
	0x03C12990 MOV X2, X19
	0x03C12994 LDP X20, X19, [X31 + 0x20]
	0x03C12998 LDP X22, X21, [X31 + 0x10]
	0x03C1299C LDR X30, [X31], #0x30
	0x03C129A0 B 0x3C120D4
	0x03C129A4 BL 0x1C16F20
	0x03C129A8 STR X30, [X31 - 0x10]!
	0x03C129AC CBZ X2, 0x3C129BC
	0x03C129B0 LDR W3, [X2 + 0x18]
	0x03C129B4 LDR X30, [X31], #0x10
	0x03C129B8 B 0x3C120D4
	0x03C129BC BL 0x1C16F20
	0x03C129C0 STR X30, [X31 - 0x30]!
	0x03C129C4 STP X22, X21, [X31 + 0x10]
	0x03C129C8 STP X20, X19, [X31 + 0x20]
	0x03C129CC ADRP X22, 0x7D2000
	0x03C129D0 LDR X8, [X22 + 0x810]
	0x03C129D4 MOV X19, X2
	0x03C129D8 MOV X21, X1
	0x03C129DC MOV X20, X0
	0x03C129E0 CBNZ X8, 0x3C129F8
	0x03C129E4 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C129E8 ADD X0, X0, 0xE80
	0x03C129EC BL 0x1C16CB8
	0x03C129F0 MOV X8, X0
	0x03C129F4 STR X0, [X22 + 0x810]
	0x03C129F8 MOV X0, X21
	0x03C129FC BLR X8
	0x03C12A00 CBZ X19, 0x3C12A24
	0x03C12A04 MOV W1, W0
	0x03C12A08 LDR W3, [X19 + 0x18]
	0x03C12A0C MOV X0, X20
	0x03C12A10 MOV X2, X19
	0x03C12A14 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7D3000
	008 Move X23, 0x54D000
	009 Move W8, [X22+1496]
	010 Move X23, [X23+3472]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x54D000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+1496], W8
	023 Move X2, [X23]
	024 Move X0, X21
	025 Move X1, X19
	026 Call NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	027 Move X1, X31
	028 Call IntPtr.op_Explicit, X0
	029 Move X22, 0x7D3000
	030 Move X3, [X22+1504]
	031 Move X21, X0
	032 Compare X3, 0
	033 JumpIfNotEqual {39}
	034 Move X0, -51408896
	035 Add X0, X0, 3968
	036 Call 0x1C17CB8
	037 Move X3, X0
	038 Move [X22+1504], X0
	039 Move X0, X20
	040 Move X1, X21
	041 Move W2, W19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Move X23, [X31+56]
	048 CallNoReturn X3

Method: System.Void SetPositionsWithNativeContainer(System.IntPtr positions, System.Int32 count)

Disassembly:
	0x03C12A18 LDP X22, X21, [X31 + 0x10]
	0x03C12A1C LDR X30, [X31], #0x30
	0x03C12A20 B 0x3C121E0
	0x03C12A24 BL 0x1C16F20
	0x03C12A28 SUB X31, X31, 0x40
	0x03C12A2C STP X30, X21, [X31 + 0x20]
	0x03C12A30 STP X20, X19, [X31 + 0x30]
	0x03C12A34 ADRP X21, 0x7D2000
	0x03C12A38 MOV X19, X8
	0x03C12A3C LDR X8, [X21 + 0x740]
	0x03C12A40 MOV X20, X0
	0x03C12A44 STP X31, X31, [X31 + 0x8]
	0x03C12A48 STR X31, [X31 + 0x18]
	0x03C12A4C CBNZ X8, 0x3C12A64
	0x03C12A50 ADRP X0, 0xFFFFFFFFFCEEB000
	0x03C12A54 ADD X0, X0, 0x2A3
	0x03C12A58 BL 0x1C16CB8
	0x03C12A5C MOV X8, X0
	0x03C12A60 STR X0, [X21 + 0x740]
	0x03C12A64 ADD X1, X31, 0x8
	0x03C12A68 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D3000
	007 Move X3, [X22+1504]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51408896
	014 Add X0, X0, 3968
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1504], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void get_startColor_Injected(out UnityEngine.Color ret)

Disassembly:
	0x03C125D8 MOV X2, X0
	0x03C125DC STR X0, [X21 + 0x610]
	0x03C125E0 MOV X0, X19
	0x03C125E4 MOV W1, W20
	0x03C125E8 LDP X20, X19, [X31 + 0x20]
	0x03C125EC LDP X30, X21, [X31 + 0x10]
	0x03C125F0 MOV V0.16B, V8.16B
	0x03C125F4 LDR V8, [X31], #0x30
	0x03C125F8 BR X2
	0x03C125FC STR D8, [X31 - 0x30]!
	0x03C12600 STP X30, X21, [X31 + 0x10]
	0x03C12604 STP X20, X19, [X31 + 0x20]
	0x03C12608 ADRP X21, 0x7D2000
	0x03C1260C LDR X2, [X21 + 0x610]
	0x03C12610 MOV V8.16B, V0.16B
	0x03C12614 MOV W19, W1
	0x03C12618 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1512]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51326976
	012 Add X0, X0, 2552
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1512], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_startColor_Injected(ref UnityEngine.Color value)

Disassembly:
	0x03C12670 CBNZ X3, 0x3C12688
	0x03C12674 ADRP X0, 0xFFFFFFFFFCF0C000
	0x03C12678 ADD X0, X0, 0xA3E
	0x03C1267C BL 0x1C16CB8
	0x03C12680 MOV X3, X0
	0x03C12684 STR X0, [X22 + 0x608]
	0x03C12688 MOV X0, X21
	0x03C1268C MOV W1, W20
	0x03C12690 MOV W2, W19
	0x03C12694 LDP X20, X19, [X31 + 0x20]
	0x03C12698 LDP X22, X21, [X31 + 0x10]
	0x03C1269C LDR X30, [X31], #0x30
	0x03C126A0 BR X3
	0x03C126A4 STP D11, D10, [X31 - 0x40]!
	0x03C126A8 STP D9, D8, [X31 + 0x10]
	0x03C126AC STP X30, X21, [X31 + 0x20]
	0x03C126B0 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1520]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51286016
	012 Add X0, X0, 1220
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1520], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_endColor_Injected(out UnityEngine.Color ret)

Disassembly:
	0x03C1270C LDP D9, D8, [X31 + 0x10]
	0x03C12710 MOV V0.16B, V11.16B
	0x03C12714 MOV V1.16B, V10.16B
	0x03C12718 LDP D11, D10, [X31], #0x40
	0x03C1271C B 0x3C11B14
	0x03C12720 B 0x3C11B14
	0x03C12724 B 0x3C11BC4
	0x03C12728 SUB X31, X31, 0x70
	0x03C1272C STR X30, [X31 + 0x40]
	0x03C12730 STP X22, X21, [X31 + 0x50]
	0x03C12734 STP X20, X19, [X31 + 0x60]
	0x03C12738 ADRP X22, 0x7D2000
	0x03C1273C LDR X8, [X22 + 0x810]
	0x03C12740 MOV X21, X2
	0x03C12744 MOV X20, X1
	0x03C12748 MOV X19, X0
	0x03C1274C CBNZ X8, 0x3C12764

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1528]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51318784
	012 Add X0, X0, 2168
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1528], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_endColor_Injected(ref UnityEngine.Color value)

Disassembly:
	0x03C127A4 MOV X0, X19
	0x03C127A8 MOV W1, W20
	0x03C127AC BLR X8
	0x03C127B0 LDP X20, X19, [X31 + 0x60]
	0x03C127B4 LDP X22, X21, [X31 + 0x50]
	0x03C127B8 LDR X30, [X31 + 0x40]
	0x03C127BC ADD X31, X31, 0x70
	0x03C127C0 RET
	0x03C127C4 SUB X31, X31, 0x60
	0x03C127C8 STP X30, X21, [X31 + 0x40]
	0x03C127CC STP X20, X19, [X31 + 0x50]
	0x03C127D0 ADRP X21, 0x7D2000
	0x03C127D4 LDP V0, V1, [X2 + 0x20]
	0x03C127D8 LDP V2, V3, [X2]
	0x03C127DC LDR X8, [X21 + 0x670]
	0x03C127E0 MOV W19, W1
	0x03C127E4 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D3000
	006 Move X2, [X21+1536]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51388416
	012 Add X0, X0, 321
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1536], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

