Type: UnityEngine.SystemInfo

Method: System.String get_operatingSystem()

Disassembly:
	0x03C3C84C ADRP X0, 0xFFFFFFFFFCEC3000
	0x03C3C850 ADD X0, X0, 0x3AB
	0x03C3C854 BL 0x1C16CB8
	0x03C3C858 STR X0, [X19 + 0x7F0]
	0x03C3C85C LDP X30, X19, [X31], #0x10
	0x03C3C860 BR X0
	0x03C3C864 STP X30, X19, [X31 - 0x10]!
	0x03C3C868 ADRP X19, 0x7A9000
	0x03C3C86C LDR X0, [X19 + 0x7F8]
	0x03C3C870 CBNZ X0, 0x3C3C884

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1648]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51691520
	008 Add X0, X0, 202
	009 Call 0x1C17CB8
	010 Move [X19+1648], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.OperatingSystemFamily get_operatingSystemFamily()

Disassembly:
	0x03C3C89C ADRP X0, 0xFFFFFFFFFCEE1000
	0x03C3C8A0 ADD X0, X0, 0x2BC
	0x03C3C8A4 BL 0x1C16CB8
	0x03C3C8A8 STR X0, [X19 + 0x800]
	0x03C3C8AC LDP X30, X19, [X31], #0x10
	0x03C3C8B0 BR X0
	0x03C3C8B4 STP X30, X19, [X31 - 0x10]!
	0x03C3C8B8 ADRP X19, 0x7A9000
	0x03C3C8BC LDR X0, [X19 + 0x808]
	0x03C3C8C0 CBNZ X0, 0x3C3C8D4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1656]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51625984
	008 Add X0, X0, 888
	009 Call 0x1C17CB8
	010 Move [X19+1656], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String get_processorType()

Disassembly:
	0x03C3C8EC MOV X19, X0
	0x03C3C8F0 CBNZ X1, 0x3C3C908
	0x03C3C8F4 ADRP X0, 0xFFFFFFFFFCEF0000
	0x03C3C8F8 ADD X0, X0, 0x9F1
	0x03C3C8FC BL 0x1C16CB8
	0x03C3C900 MOV X1, X0
	0x03C3C904 STR X0, [X20 + 0x818]
	0x03C3C908 MOV X0, X19
	0x03C3C90C LDP X20, X19, [X31 + 0x10]
	0x03C3C910 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1664]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51515392
	008 Add X0, X0, 3574
	009 Call 0x1C17CB8
	010 Move [X19+1664], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String get_deviceUniqueIdentifier()

Disassembly:
	0x03C3C93C BL 0x1C16CF4
	0x03C3C940 MOVZ W8, 0x1
	0x03C3C944 STRB W8, [X20 + 0x820]
	0x03C3C948 LDR X0, [X19 + 0x10]
	0x03C3C94C ADRP X21, 0x4BE000
	0x03C3C950 LDR X21, [X21 + 0xC10]
	0x03C3C954 MOV X1, X31
	0x03C3C958 MOV X2, X31
	0x03C3C95C BL 0x33C5D2C
	0x03C3C960 TBZ X0, 0x0, 0x3C3C994

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1672]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51568640
	008 Add X0, X0, 59
	009 Call 0x1C17CB8
	010 Move [X19+1672], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String get_deviceModel()

Disassembly:
	0x03C3C98C BLR X8
	0x03C3C990 STR X31, [X19 + 0x10]
	0x03C3C994 LDR X0, [X21]
	0x03C3C998 LDR W8, [X0 + 0xE0]
	0x03C3C99C CBNZ W8, 0x3C3C9A4
	0x03C3C9A0 BL 0x1C16DFC
	0x03C3C9A4 MOV X0, X19
	0x03C3C9A8 LDP X20, X19, [X31 + 0x20]
	0x03C3C9AC LDP X22, X21, [X31 + 0x10]
	0x03C3C9B0 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1680]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51658752
	008 Add X0, X0, 839
	009 Call 0x1C17CB8
	010 Move [X19+1680], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.DeviceType get_deviceType()

Disassembly:
	0x03C3C9DC B 0x33CB4DC
	0x03C3C9E0 CMP W1, 0x1
	0x03C3C9E4 MOV X21, X0
	0x03C3C9E8 B.NE 0x3C3CA18
	0x03C3C9EC MOV X0, X21
	0x03C3C9F0 BL 0x3EB1AD0
	0x03C3C9F4 LDR X20, [X0]
	0x03C3C9F8 BL 0x3EB1AE0
	0x03C3C9FC MOV X0, X19
	0x03C3CA00 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1688]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51474432
	008 Add X0, X0, 3686
	009 Call 0x1C17CB8
	010 Move [X19+1688], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String get_graphicsDeviceName()

Disassembly:
	0x03C3CA2C MOV X0, X19
	0x03C3CA30 MOV X1, X31
	0x03C3CA34 BL 0x33CB4DC
	0x03C3CA38 CBNZ X20, 0x3C3CA44
	0x03C3CA3C MOV X0, X21
	0x03C3CA40 BL 0x1D2C690
	0x03C3CA44 MOV X0, X20
	0x03C3CA48 BL 0x1C16F18
	0x03C3CA4C BL 0x1990590
	0x03C3CA50 SUB X31, X31, 0x80

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1696]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51548160
	008 Add X0, X0, 3798
	009 Call 0x1C17CB8
	010 Move [X19+1696], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String get_graphicsDeviceVendor()

Disassembly:
	0x03C3CA7C LDR X29, [X29 + 0x758]
	0x03C3CA80 LDR X28, [X28 + 0x9E8]
	0x03C3CA84 MOV X19, X7
	0x03C3CA88 MOV W22, W6
	0x03C3CA8C MOV W23, W5
	0x03C3CA90 MOV W24, W4
	0x03C3CA94 MOV W25, W3
	0x03C3CA98 MOV W26, W2
	0x03C3CA9C MOV X21, X1
	0x03C3CAA0 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1704]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51593216
	008 Add X0, X0, 667
	009 Call 0x1C17CB8
	010 Move [X19+1704], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Rendering.GraphicsDeviceType get_graphicsDeviceType()

Disassembly:
	0x03C3CACC MOV X0, X20
	0x03C3CAD0 MOV X1, X31
	0x03C3CAD4 BL 0x33BDD8C
	0x03C3CAD8 LDR X0, [X29]
	0x03C3CADC ADD X1, X31, 0x4
	0x03C3CAE0 STP X31, X31, [X31 + 0x8]
	0x03C3CAE4 STR X31, [X31 + 0x18]
	0x03C3CAE8 STR W26, [X31 + 0x4]
	0x03C3CAEC BL 0x1C16E04
	0x03C3CAF0 LDR X8, [X28]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1712]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51458048
	008 Add X0, X0, 2493
	009 Call 0x1C17CB8
	010 Move [X19+1712], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_graphicsUVStartsAtTop()

Disassembly:
	0x03C3CB1C MOV X1, X31
	0x03C3CB20 BL 0x3318370
	0x03C3CB24 STR W0, [X31 + 0xC]
	0x03C3CB28 AND W0, W24, 0x1
	0x03C3CB2C MOV X1, X31
	0x03C3CB30 BL 0x3318370
	0x03C3CB34 STR W0, [X31 + 0x10]
	0x03C3CB38 AND W0, W23, 0x1
	0x03C3CB3C MOV X1, X31
	0x03C3CB40 BL 0x3318370

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1720]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51466240
	008 Add X0, X0, 3745
	009 Call 0x1C17CB8
	010 Move [X19+1720], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 get_graphicsShaderLevel()

Disassembly:
	0x03C3CB6C BL 0x1C16CB8
	0x03C3CB70 MOV X8, X0
	0x03C3CB74 STR X0, [X22 + 0x828]
	0x03C3CB78 ADD X0, X31, 0x8
	0x03C3CB7C MOV X1, X21
	0x03C3CB80 MOV X2, X19
	0x03C3CB84 BLR X8
	0x03C3CB88 STR X0, [X20 + 0x10]
	0x03C3CB8C LDP X20, X19, [X31 + 0x70]
	0x03C3CB90 LDP X22, X21, [X31 + 0x60]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1728]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51593216
	008 Add X0, X0, 717
	009 Call 0x1C17CB8
	010 Move [X19+1728], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Rendering.FoveatedRenderingCaps get_foveatedRenderingCaps()

Disassembly:
	0x03C3CBBC LDR X3, [X22 + 0x828]
	0x03C3CBC0 MOV X19, X2
	0x03C3CBC4 MOV X20, X1
	0x03C3CBC8 MOV X21, X0
	0x03C3CBCC CBNZ X3, 0x3C3CBE4
	0x03C3CBD0 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C3CBD4 ADD X0, X0, 0xEE7
	0x03C3CBD8 BL 0x1C16CB8
	0x03C3CBDC MOV X3, X0
	0x03C3CBE0 STR X0, [X22 + 0x828]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1736]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51490816
	008 Add X0, X0, 2906
	009 Call 0x1C17CB8
	010 Move [X19+1736], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_hasHiddenSurfaceRemovalOnGPU()

Disassembly:
	0x03C3CC0C ADRP X20, 0x4B7000
	0x03C3CC10 LDRB W8, [X19 + 0x830]
	0x03C3CC14 LDR X20, [X20 + 0x970]
	0x03C3CC18 TBNZ X8, 0x0, 0x3C3CC30
	0x03C3CC1C ADRP X0, 0x4B7000
	0x03C3CC20 LDR X0, [X0 + 0x970]
	0x03C3CC24 BL 0x1C16CF4
	0x03C3CC28 MOVZ W8, 0x1
	0x03C3CC2C STRB W8, [X19 + 0x830]
	0x03C3CC30 LDR X0, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1744]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51601408
	008 Add X0, X0, 745
	009 Call 0x1C17CB8
	010 Move [X19+1744], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsShadows()

Disassembly:
	0x03C3CC5C B.CS 0x3C3CC94
	0x03C3CC60 MOVZ W9, 0x3AC1
	0x03C3CC64 MOVK W9, 0x2000000
	0x03C3CC68 LSRV W8, W9, W8
	0x03C3CC6C AND W0, W8, 0x1
	0x03C3CC70 B 0x3C3CCA0
	0x03C3CC74 CMP W8, 0x8
	0x03C3CC78 MOVZ W0, 0x1
	0x03C3CC7C B.EQ 0x3C3CCA0
	0x03C3CC80 CMP W8, 0xB

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1752]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51449856
	008 Add X0, X0, 2650
	009 Call 0x1C17CB8
	010 Move [X19+1752], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Rendering.CopyTextureSupport get_copyTextureSupport()

Disassembly:
	0x03C3CCAC STR X30, [X31 - 0x20]!
	0x03C3CCB0 STP X20, X19, [X31 + 0x10]
	0x03C3CCB4 ADRP X19, 0x7A9000
	0x03C3CCB8 ADRP X20, 0x523000
	0x03C3CCBC LDRB W8, [X19 + 0x831]
	0x03C3CCC0 LDR X20, [X20 + 0x760]
	0x03C3CCC4 TBNZ X8, 0x0, 0x3C3CCDC
	0x03C3CCC8 ADRP X0, 0x523000
	0x03C3CCCC LDR X0, [X0 + 0x760]
	0x03C3CCD0 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1760]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51539968
	008 Add X0, X0, 2885
	009 Call 0x1C17CB8
	010 Move [X19+1760], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsComputeShaders()

Disassembly:
	0x03C3CCFC LDRB W8, [X19 + 0xD49]
	0x03C3CD00 CBNZ W8, 0x3C3CD18
	0x03C3CD04 ADRP X0, 0x523000
	0x03C3CD08 LDR X0, [X0 + 0x760]
	0x03C3CD0C BL 0x1C16CF4
	0x03C3CD10 MOVZ W8, 0x1
	0x03C3CD14 STRB W8, [X19 + 0xD49]
	0x03C3CD18 ADRP X8, 0x523000
	0x03C3CD1C LDR X8, [X8 + 0x760]
	0x03C3CD20 LDR X8, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1768]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51458048
	008 Add X0, X0, 2541
	009 Call 0x1C17CB8
	010 Move [X19+1768], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsRenderTargetArrayIndexFromVertexShader()

Disassembly:
	0x03C3CD4C ADD X0, X0, 0x176
	0x03C3CD50 BL 0x1C16CB8
	0x03C3CD54 STR X0, [X19 + 0x838]
	0x03C3CD58 LDP X30, X19, [X31], #0x10
	0x03C3CD5C BR X0
	0x03C3CD60 STP X30, X19, [X31 - 0x10]!
	0x03C3CD64 ADRP X19, 0x7A9000
	0x03C3CD68 LDR X0, [X19 + 0x838]
	0x03C3CD6C CBNZ X0, 0x3C3CD80
	0x03C3CD70 ADRP X0, 0xFFFFFFFFFCEC5000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1776]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51634176
	008 Add X0, X0, 1683
	009 Call 0x1C17CB8
	010 Move [X19+1776], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsInstancing()

Disassembly:
	0x03C3CD9C ADD X0, X0, 0x498
	0x03C3CDA0 BL 0x1C16CB8
	0x03C3CDA4 STR X0, [X19 + 0x840]
	0x03C3CDA8 LDP X30, X19, [X31], #0x10
	0x03C3CDAC BR X0
	0x03C3CDB0 STP X30, X19, [X31 - 0x10]!
	0x03C3CDB4 ADRP X19, 0x7A9000
	0x03C3CDB8 LDR X0, [X19 + 0x840]
	0x03C3CDBC CBNZ X0, 0x3C3CDD0
	0x03C3CDC0 ADRP X0, 0xFFFFFFFFFCEB7000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1784]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51593216
	008 Add X0, X0, 766
	009 Call 0x1C17CB8
	010 Move [X19+1784], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 get_supportedRenderTargetCount()

Disassembly:
	0x03C3CDEC STP X22, X21, [X31 + 0x50]
	0x03C3CDF0 STP X20, X19, [X31 + 0x60]
	0x03C3CDF4 ADRP X27, 0x7A9000
	0x03C3CDF8 ADRP X28, 0x523000
	0x03C3CDFC LDRB W8, [X27 + 0x848]
	0x03C3CE00 LDR X28, [X28 + 0x760]
	0x03C3CE04 MOV W20, W7
	0x03C3CE08 MOV X19, X6
	0x03C3CE0C MOV W21, W5
	0x03C3CE10 MOV W23, W4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1792]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51499008
	008 Add X0, X0, 3580
	009 Call 0x1C17CB8
	010 Move [X19+1792], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 get_supportsMultisampledTextures()

Disassembly:
	0x03C3CE3C LDR X0, [X28]
	0x03C3CE40 BL 0x1C16F10
	0x03C3CE44 AND W3, W26, 0x1
	0x03C3CE48 AND W4, W25, 0x1
	0x03C3CE4C AND W5, W23, 0x1
	0x03C3CE50 AND W6, W21, 0x1
	0x03C3CE54 MOV X1, X24
	0x03C3CE58 MOV W2, W22
	0x03C3CE5C MOV X7, X19
	0x03C3CE60 MOV X27, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1800]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51576832
	008 Add X0, X0, 1410
	009 Call 0x1C17CB8
	010 Move [X19+1800], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsMultisampleAutoResolve()

Disassembly:
	0x03C3CE8C RET
	0x03C3CE90 SUB X31, X31, 0x50
	0x03C3CE94 STP X30, X25, [X31 + 0x10]
	0x03C3CE98 STP X24, X23, [X31 + 0x20]
	0x03C3CE9C STP X22, X21, [X31 + 0x30]
	0x03C3CEA0 STP X20, X19, [X31 + 0x40]
	0x03C3CEA4 ADRP X24, 0x7A9000
	0x03C3CEA8 ADRP X25, 0x4B7000
	0x03C3CEAC LDRB W8, [X24 + 0x849]
	0x03C3CEB0 LDR X25, [X25 + 0x988]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1808]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51458048
	008 Add X0, X0, 2590
	009 Call 0x1C17CB8
	010 Move [X19+1808], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_usesReversedZBuffer()

Disassembly:
	0x03C3CEDC STRB W8, [X24 + 0x849]
	0x03C3CEE0 LDR X6, [X25]
	0x03C3CEE4 AND W2, W23, 0x1
	0x03C3CEE8 AND W3, W22, 0x1
	0x03C3CEEC AND W4, W20, 0x1
	0x03C3CEF0 MOV X0, X21
	0x03C3CEF4 MOV W1, W19
	0x03C3CEF8 MOV W5, W31
	0x03C3CEFC MOV W7, W31
	0x03C3CF00 BL 0x3C3CDD8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1816]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51474432
	008 Add X0, X0, 3726
	009 Call 0x1C17CB8
	010 Move [X19+1816], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean IsValidEnumValue(System.Enum value)

Disassembly:
	0x03C3CF2C MOV X19, X0
	0x03C3CF30 CBNZ X1, 0x3C3CF48
	0x03C3CF34 ADRP X0, 0xFFFFFFFFFCEDC000
	0x03C3CF38 ADD X0, X0, 0xA87
	0x03C3CF3C BL 0x1C16CB8
	0x03C3CF40 MOV X1, X0
	0x03C3CF44 STR X0, [X20 + 0x850]
	0x03C3CF48 MOV X0, X19
	0x03C3CF4C LDP X20, X19, [X31 + 0x10]
	0x03C3CF50 LDR X30, [X31], #0x20
	0x03C3CF54 BR X1
	0x03C3CF58 STP X30, X21, [X31 - 0x20]!
	0x03C3CF5C STP X20, X19, [X31 + 0x10]
	0x03C3CF60 ADRP X21, 0x7A9000
	0x03C3CF64 LDR X2, [X21 + 0x858]
	0x03C3CF68 MOV X19, X1
	0x03C3CF6C MOV X20, X0
	0x03C3CF70 CBNZ X2, 0x3C3CF88
	0x03C3CF74 ADRP X0, 0xFFFFFFFFFCEDE000
	0x03C3CF78 ADD X0, X0, 0xE21
	0x03C3CF7C BL 0x1C16CB8
	0x03C3CF80 MOV X2, X0
	0x03C3CF84 STR X0, [X21 + 0x858]
	0x03C3CF88 MOV X0, X20
	0x03C3CF8C MOV X1, X19
	0x03C3CF90 LDP X20, X19, [X31 + 0x10]
	0x03C3CF94 LDP X30, X21, [X31], #0x20
	0x03C3CF98 BR X2
	0x03C3CF9C STR X30, [X31 - 0x20]!
	0x03C3CFA0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7AA000
	005 Move W8, [X20+1640]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x4B8000
	012 Move X0, [X0+3576]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1640], W8
	016 Compare X19, 0
	017 JumpIfEqual {38}
	018 Move X20, 0x4B8000
	019 Move X20, [X20+3576]
	020 Move X0, X19
	021 Move X1, X31
	022 Call "il2cpp_vm_object_is_inst", X0
	023 Move X8, [X20]
	024 Move X20, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, X31
	035 Move X30, [X31+32]
	036 Call Enum.IsDefined, X0, X1
	037 Return X0
	038 Call 0x1C17F20

Method: System.Boolean SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat format)

Disassembly:
	0x03C3CFA4 ADRP X20, 0x7A9000
	0x03C3CFA8 LDR X1, [X20 + 0x860]
	0x03C3CFAC MOV W19, W0
	0x03C3CFB0 CBNZ X1, 0x3C3CFC8
	0x03C3CFB4 ADRP X0, 0xFFFFFFFFFCEDC000
	0x03C3CFB8 ADD X0, X0, 0xAB3
	0x03C3CFBC BL 0x1C16CB8
	0x03C3CFC0 MOV X1, X0
	0x03C3CFC4 STR X0, [X20 + 0x860]
	0x03C3CFC8 AND W0, W19, 0x1
	0x03C3CFCC LDP X20, X19, [X31 + 0x10]
	0x03C3CFD0 LDR X30, [X31], #0x20
	0x03C3CFD4 BR X1
	0x03C3CFD8 STR X30, [X31 - 0x20]!
	0x03C3CFDC STP X20, X19, [X31 + 0x10]
	0x03C3CFE0 ADRP X20, 0x7A9000
	0x03C3CFE4 LDR X1, [X20 + 0x868]
	0x03C3CFE8 MOV X19, X0
	0x03C3CFEC CBNZ X1, 0x3C3D004
	0x03C3CFF0 ADRP X0, 0xFFFFFFFFFCEC5000
	0x03C3CFF4 ADD X0, X0, 0x1B1
	0x03C3CFF8 BL 0x1C16CB8
	0x03C3CFFC MOV X1, X0
	0x03C3D000 STR X0, [X20 + 0x868]
	0x03C3D004 MOV X0, X19
	0x03C3D008 LDP X20, X19, [X31 + 0x10]
	0x03C3D00C LDR X30, [X31], #0x20
	0x03C3D010 BR X1
	0x03C3D014 STP X30, X21, [X31 - 0x20]!
	0x03C3D018 STP X20, X19, [X31 + 0x10]
	0x03C3D01C ADRP X21, 0x7A8000
	0x03C3D020 LDR X2, [X21 + 0x870]
	0x03C3D024 MOV W19, W1
	0x03C3D028 MOV X20, X0
	0x03C3D02C CBNZ X2, 0x3C3D044
	0x03C3D030 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C3D034 ADD X0, X0, 0x548
	0x03C3D038 BL 0x1C16CB8
	0x03C3D03C MOV X2, X0
	0x03C3D040 STR X0, [X21 + 0x870]
	0x03C3D044 AND W1, W19, 0x1
	0x03C3D048 MOV X0, X20
	0x03C3D04C LDP X20, X19, [X31 + 0x10]
	0x03C3D050 LDP X30, X21, [X31], #0x20
	0x03C3D054 BR X2
	0x03C3D058 STR X30, [X31 - 0x20]!
	0x03C3D05C STP X20, X19, [X31 + 0x10]
	0x03C3D060 ADRP X20, 0x7A8000
	0x03C3D064 LDR X1, [X20 + 0x878]
	0x03C3D068 MOV X19, X0
	0x03C3D06C CBNZ X1, 0x3C3D084
	0x03C3D070 ADRP X0, 0xFFFFFFFFFCECA000
	0x03C3D074 ADD X0, X0, 0x35B

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7AA000
	007 Move X20, 0x518000
	008 Move W8, [X21+1641]
	009 Move X20, [X20+312]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x518000
	016 Move X0, [X0+312]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1641], W8
	020 Move X0, [X20]
	021 Add X1, X31, 12
	022 Move [X31+12], W19
	023 Call 0x1C17E04
	024 Call SystemInfo.IsValidEnumValue, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {47}
	029 Move X20, 0x7AA000
	030 Move X8, [X20+1824]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -51544064
	034 Add X0, X0, 2933
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X20+1824], X0
	038 Move W0, W19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+16]
	043 Move X21, [X31+24]
	044 And W0, W0, 1
	045 Add X31, X31, 48
	046 Return X0
	047 Move X0, 0x4BF000
	048 Move X0, [X0+1400]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0x523000
	053 Move X0, [X0+1840]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call ArgumentException..ctor, X0, X1
	059 Move X0, 0x523000
	060 Move X0, [X0+1848]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC

Method: System.Boolean SupportsTextureFormat(UnityEngine.TextureFormat format)

Disassembly:
	0x03C3D0B4 ADD X0, X0, 0x30E
	0x03C3D0B8 BL 0x1C16CB8
	0x03C3D0BC MOV X2, X0
	0x03C3D0C0 STR X0, [X21 + 0x880]
	0x03C3D0C4 MOV X0, X20
	0x03C3D0C8 MOV W1, W19
	0x03C3D0CC LDP X20, X19, [X31 + 0x10]
	0x03C3D0D0 LDP X30, X21, [X31], #0x20
	0x03C3D0D4 BR X2
	0x03C3D0D8 STR X30, [X31 - 0x20]!
	0x03C3D0DC STP X20, X19, [X31 + 0x10]
	0x03C3D0E0 ADRP X20, 0x7A8000
	0x03C3D0E4 LDR X1, [X20 + 0x888]
	0x03C3D0E8 MOV X19, X0
	0x03C3D0EC CBNZ X1, 0x3C3D104
	0x03C3D0F0 ADRP X0, 0xFFFFFFFFFCED4000
	0x03C3D0F4 ADD X0, X0, 0x1CC
	0x03C3D0F8 BL 0x1C16CB8
	0x03C3D0FC MOV X1, X0
	0x03C3D100 STR X0, [X20 + 0x888]
	0x03C3D104 MOV X0, X19
	0x03C3D108 LDP X20, X19, [X31 + 0x10]
	0x03C3D10C LDR X30, [X31], #0x20
	0x03C3D110 BR X1
	0x03C3D114 STR X30, [X31 - 0x20]!
	0x03C3D118 STP X20, X19, [X31 + 0x10]
	0x03C3D11C ADRP X20, 0x7A8000
	0x03C3D120 LDR X1, [X20 + 0x890]
	0x03C3D124 MOV X19, X0
	0x03C3D128 CBNZ X1, 0x3C3D140
	0x03C3D12C ADRP X0, 0xFFFFFFFFFCEC6000
	0x03C3D130 ADD X0, X0, 0x224
	0x03C3D134 BL 0x1C16CB8
	0x03C3D138 MOV X1, X0
	0x03C3D13C STR X0, [X20 + 0x890]
	0x03C3D140 MOV X0, X19
	0x03C3D144 LDP X20, X19, [X31 + 0x10]
	0x03C3D148 LDR X30, [X31], #0x20
	0x03C3D14C BR X1
	0x03C3D150 SUB X31, X31, 0x20
	0x03C3D154 STP X30, X19, [X31 + 0x10]
	0x03C3D158 ADRP X19, 0x7A8000
	0x03C3D15C LDR X8, [X19 + 0x898]
	0x03C3D160 STR X31, [X31 + 0x8]
	0x03C3D164 CBNZ X8, 0x3C3D17C
	0x03C3D168 ADRP X0, 0xFFFFFFFFFCEE7000
	0x03C3D16C ADD X0, X0, 0xF97
	0x03C3D170 BL 0x1C16CB8
	0x03C3D174 MOV X8, X0
	0x03C3D178 STR X0, [X19 + 0x898]
	0x03C3D17C ADD X9, X31, 0x8
	0x03C3D180 ORR X1, X9, 0x7
	0x03C3D184 ADD X0, X31, 0x8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7A9000
	007 Move X20, 0x517000
	008 Move W8, [X21+1642]
	009 Move X20, [X20+1216]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x517000
	016 Move X0, [X0+1216]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1642], W8
	020 Move X0, [X20]
	021 Add X1, X31, 12
	022 Move [X31+12], W19
	023 Call 0x1C17E04
	024 Call SystemInfo.IsValidEnumValue, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {47}
	029 Move X20, 0x7A9000
	030 Move X8, [X20+1832]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -51527680
	034 Add X0, X0, 2616
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X20+1832], X0
	038 Move W0, W19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+16]
	043 Move X21, [X31+24]
	044 And W0, W0, 1
	045 Add X31, X31, 48
	046 Return X0
	047 Move X0, 0x4BF000
	048 Move X0, [X0+1400]
	049 Call 0x1C17D08
	050 Call 0x1C17F10
	051 Move X19, X0
	052 Move X0, 0x523000
	053 Move X0, [X0+1856]
	054 Call 0x1C17D08
	055 Move X1, X0
	056 Move X0, X19
	057 Move X2, X31
	058 Call ArgumentException..ctor, X0, X1
	059 Move X0, 0x523000
	060 Move X0, [X0+1864]
	061 Call 0x1C17D08
	062 Move X1, X0
	063 Move X0, X19
	064 Call 0x1C17DEC

Method: System.Int32 get_maxTextureSize()

Disassembly:
	0x03C3D1C4 MOV X2, X0
	0x03C3D1C8 STR X0, [X21 + 0x898]
	0x03C3D1CC MOV X0, X20
	0x03C3D1D0 MOV X1, X19
	0x03C3D1D4 LDP X20, X19, [X31 + 0x10]
	0x03C3D1D8 LDP X30, X21, [X31], #0x20
	0x03C3D1DC BR X2
	0x03C3D1E0 STR X30, [X31 - 0x30]!
	0x03C3D1E4 STP X22, X21, [X31 + 0x10]
	0x03C3D1E8 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1840]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51679232
	008 Add X0, X0, 1069
	009 Call 0x1C17CB8
	010 Move [X19+1840], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 get_maxRenderTextureSize()

Disassembly:
	0x03C3D214 BL 0x1C16CB8
	0x03C3D218 MOV X8, X0
	0x03C3D21C STR X0, [X22 + 0x850]
	0x03C3D220 MOV X0, X21
	0x03C3D224 BLR X8
	0x03C3D228 CBZ X0, 0x3C3D2D0
	0x03C3D22C LDR W8, [X0 + 0x10]
	0x03C3D230 ADD W9, W20, W19
	0x03C3D234 CMP W9, W8
	0x03C3D238 B.GT 0x3C3D274

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1848]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51613696
	008 Add X0, X0, 461
	009 Call 0x1C17CB8
	010 Move [X19+1848], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsGraphicsFence()

Disassembly:
	0x03C3D264 LDP X20, X19, [X31 + 0x20]
	0x03C3D268 LDP X22, X21, [X31 + 0x10]
	0x03C3D26C LDR X30, [X31], #0x30
	0x03C3D270 BR X2
	0x03C3D274 ADRP X0, 0x4BE000
	0x03C3D278 LDR X0, [X0 + 0x760]
	0x03C3D27C BL 0x1C16D08
	0x03C3D280 BL 0x1C16F10
	0x03C3D284 MOV X19, X0
	0x03C3D288 ADRP X0, 0x522000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1856]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51478528
	008 Add X0, X0, 3772
	009 Call 0x1C17CB8
	010 Move [X19+1856], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int64 get_maxGraphicsBufferSize()

Disassembly:
	0x03C3BC20 ADD X0, X0, 0x2E9
	0x03C3BC24 BL 0x1C16CB8
	0x03C3BC28 STR X0, [X19 + 0x6D0]
	0x03C3BC2C LDP X30, X19, [X31], #0x10
	0x03C3BC30 BR X0
	0x03C3BC34 STP X30, X19, [X31 - 0x10]!
	0x03C3BC38 ADRP X19, 0x7AA000
	0x03C3BC3C LDR X0, [X19 + 0x6D0]
	0x03C3BC40 CBNZ X0, 0x3C3BC54
	0x03C3BC44 ADRP X0, 0xFFFFFFFFFCECA000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AB000
	004 Move X0, [X19+1864]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51589120
	008 Add X0, X0, 811
	009 Call 0x1C17CB8
	010 Move [X19+1864], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_usesLoadStoreActions()

Disassembly:
	0x03C3D2DC ADRP X21, 0x7A8000
	0x03C3D2E0 LDR X2, [X21 + 0x8A0]
	0x03C3D2E4 MOV W19, W1
	0x03C3D2E8 MOV W20, W0
	0x03C3D2EC CBNZ X2, 0x3C3D304
	0x03C3D2F0 ADRP X0, 0xFFFFFFFFFCEBE000
	0x03C3D2F4 ADD X0, X0, 0x427
	0x03C3D2F8 BL 0x1C16CB8
	0x03C3D2FC MOV X2, X0
	0x03C3D300 STR X0, [X21 + 0x8A0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1896]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51580928
	008 Add X0, X0, 1465
	009 Call 0x1C17CB8
	010 Move [X19+1896], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.HDRDisplaySupportFlags get_hdrDisplaySupportFlags()

Disassembly:
	0x03C3D32C MOV X20, X2
	0x03C3D330 MOV X19, X1
	0x03C3D334 MOV X21, X0
	0x03C3D338 TBNZ X8, 0x0, 0x3C3D398
	0x03C3D33C ADRP X0, 0x522000
	0x03C3D340 LDR X0, [X0 + 0x780]
	0x03C3D344 BL 0x1C16CF4
	0x03C3D348 ADRP X0, 0x4DE000
	0x03C3D34C LDR X0, [X0 + 0xA68]
	0x03C3D350 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1904]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51482624
	008 Add X0, X0, 628
	009 Call 0x1C17CB8
	010 Move [X19+1904], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsMultiview()

Disassembly:
	0x03C3D37C LDR X0, [X0 + 0x798]
	0x03C3D380 BL 0x1C16CF4
	0x03C3D384 ADRP X0, 0x522000
	0x03C3D388 LDR X0, [X0 + 0x7A0]
	0x03C3D38C BL 0x1C16CF4
	0x03C3D390 MOVZ W8, 0x1
	0x03C3D394 STRB W8, [X22 + 0x8A8]
	0x03C3D398 STR X31, [X20]
	0x03C3D39C CBZ X21, 0x3C3D4A4
	0x03C3D3A0 ADRP X22, 0x522000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1912]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51453952
	008 Add X0, X0, 2832
	009 Call 0x1C17CB8
	010 Move [X19+1912], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsStoreAndResolveAction()

Disassembly:
	0x03C3D3CC LDR X8, [X8 + 0x448]
	0x03C3D3D0 MOV X0, X22
	0x03C3D3D4 MOV X2, X31
	0x03C3D3D8 LDR X1, [X8]
	0x03C3D3DC BL 0x321BA08
	0x03C3D3E0 TBZ X0, 0x0, 0x3C3D3EC
	0x03C3D3E4 MOVZ X8, 0x7FF00000
	0x03C3D3E8 B 0x3C3D428
	0x03C3D3EC ADRP X8, 0x522000
	0x03C3D3F0 LDR X8, [X8 + 0x798]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1920]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51621888
	008 Add X0, X0, 318
	009 Call 0x1C17CB8
	010 Move [X19+1920], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsMultisampleResolveDepth()

Disassembly:
	0x03C3D41C BL 0x321BA08
	0x03C3D420 TBZ X0, 0x0, 0x3C3D440
	0x03C3D424 MOVZ X8, 0xFFF00000
	0x03C3D428 STR X8, [X19]
	0x03C3D42C LDP X20, X19, [X31 + 0x20]
	0x03C3D430 LDP X22, X21, [X31 + 0x10]
	0x03C3D434 MOVZ W0, 0x1
	0x03C3D438 LDR X30, [X31], #0x30
	0x03C3D43C RET
	0x03C3D440 ADRP X8, 0x522000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1928]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51589120
	008 Add X0, X0, 941
	009 Call 0x1C17CB8
	010 Move [X19+1928], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_supportsMultisampleResolveStencil()

Disassembly:
	0x03C3D46C LDR X0, [X8]
	0x03C3D470 LDR W8, [X0 + 0xE0]
	0x03C3D474 CBNZ W8, 0x3C3D47C
	0x03C3D478 BL 0x1C16DFC
	0x03C3D47C ADRP X8, 0x522000
	0x03C3D480 LDR X8, [X8 + 0x780]
	0x03C3D484 MOV X0, X21
	0x03C3D488 MOV X1, X19
	0x03C3D48C MOV X2, X20
	0x03C3D490 LDR X3, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1936]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51482624
	008 Add X0, X0, 680
	009 Call 0x1C17CB8
	010 Move [X19+1936], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String GetOperatingSystem()

Disassembly:
	0x03C3C874 ADRP X0, 0xFFFFFFFFFCEB7000
	0x03C3C878 ADD X0, X0, 0x476
	0x03C3C87C BL 0x1C16CB8
	0x03C3C880 STR X0, [X19 + 0x7F8]
	0x03C3C884 LDP X30, X19, [X31], #0x10
	0x03C3C888 BR X0
	0x03C3C88C STP X30, X19, [X31 - 0x10]!
	0x03C3C890 ADRP X19, 0x7A9000
	0x03C3C894 LDR X0, [X19 + 0x800]
	0x03C3C898 CBNZ X0, 0x3C3C8AC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1648]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51691520
	008 Add X0, X0, 202
	009 Call 0x1C17CB8
	010 Move [X19+1648], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.OperatingSystemFamily GetOperatingSystemFamily()

Disassembly:
	0x03C3C8C4 ADRP X0, 0xFFFFFFFFFCECD000
	0x03C3C8C8 ADD X0, X0, 0x3E7
	0x03C3C8CC BL 0x1C16CB8
	0x03C3C8D0 STR X0, [X19 + 0x808]
	0x03C3C8D4 LDP X30, X19, [X31], #0x10
	0x03C3C8D8 BR X0
	0x03C3C8DC STR X30, [X31 - 0x20]!
	0x03C3C8E0 STP X20, X19, [X31 + 0x10]
	0x03C3C8E4 ADRP X20, 0x7A9000
	0x03C3C8E8 LDR X1, [X20 + 0x818]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1656]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51625984
	008 Add X0, X0, 888
	009 Call 0x1C17CB8
	010 Move [X19+1656], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String GetProcessorType()

Disassembly:
	0x03C3C914 BR X1
	0x03C3C918 STR X30, [X31 - 0x30]!
	0x03C3C91C STP X22, X21, [X31 + 0x10]
	0x03C3C920 STP X20, X19, [X31 + 0x20]
	0x03C3C924 ADRP X20, 0x7A9000
	0x03C3C928 LDRB W8, [X20 + 0x820]
	0x03C3C92C MOV X19, X0
	0x03C3C930 TBNZ X8, 0x0, 0x3C3C948
	0x03C3C934 ADRP X0, 0x4BE000
	0x03C3C938 LDR X0, [X0 + 0xC10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1664]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51515392
	008 Add X0, X0, 3574
	009 Call 0x1C17CB8
	010 Move [X19+1664], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String GetDeviceUniqueIdentifier()

Disassembly:
	0x03C3C964 ADRP X22, 0x7A9000
	0x03C3C968 LDR X8, [X22 + 0x818]
	0x03C3C96C LDR X20, [X19 + 0x10]
	0x03C3C970 CBNZ X8, 0x3C3C988
	0x03C3C974 ADRP X0, 0xFFFFFFFFFCEF0000
	0x03C3C978 ADD X0, X0, 0x9F1
	0x03C3C97C BL 0x1C16CB8
	0x03C3C980 MOV X8, X0
	0x03C3C984 STR X0, [X22 + 0x818]
	0x03C3C988 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1672]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51568640
	008 Add X0, X0, 59
	009 Call 0x1C17CB8
	010 Move [X19+1672], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String GetDeviceModel()

Disassembly:
	0x03C3C9B4 LDR X30, [X31], #0x30
	0x03C3C9B8 B 0x33B3E9C
	0x03C3C9BC STP X30, X21, [X31 - 0x20]!
	0x03C3C9C0 STP X20, X19, [X31 + 0x10]
	0x03C3C9C4 MOV X19, X0
	0x03C3C9C8 BL 0x3C3C918
	0x03C3C9CC MOV X0, X19
	0x03C3C9D0 LDP X20, X19, [X31 + 0x10]
	0x03C3C9D4 MOV X1, X31
	0x03C3C9D8 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1680]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51658752
	008 Add X0, X0, 839
	009 Call 0x1C17CB8
	010 Move [X19+1680], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.DeviceType GetDeviceType()

Disassembly:
	0x03C3CA04 BL 0x33CB4DC
	0x03C3CA08 CBNZ X20, 0x3C3CA20
	0x03C3CA0C LDP X20, X19, [X31 + 0x10]
	0x03C3CA10 LDP X30, X21, [X31], #0x20
	0x03C3CA14 RET
	0x03C3CA18 MOV X20, X31
	0x03C3CA1C B 0x3C3CA2C
	0x03C3CA20 MOV X0, X20
	0x03C3CA24 BL 0x1C16F18
	0x03C3CA28 MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1688]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51474432
	008 Add X0, X0, 3686
	009 Call 0x1C17CB8
	010 Move [X19+1688], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String GetGraphicsDeviceName()

Disassembly:
	0x03C3CA54 STP X29, X30, [X31 + 0x20]
	0x03C3CA58 STP X28, X27, [X31 + 0x30]
	0x03C3CA5C STP X26, X25, [X31 + 0x40]
	0x03C3CA60 STP X24, X23, [X31 + 0x50]
	0x03C3CA64 STP X22, X21, [X31 + 0x60]
	0x03C3CA68 STP X20, X19, [X31 + 0x70]
	0x03C3CA6C ADRP X27, 0x7A9000
	0x03C3CA70 ADRP X29, 0x523000
	0x03C3CA74 ADRP X28, 0x4C0000
	0x03C3CA78 LDRB W8, [X27 + 0x821]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1696]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51548160
	008 Add X0, X0, 3798
	009 Call 0x1C17CB8
	010 Move [X19+1696], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.String GetGraphicsDeviceVendor()

Disassembly:
	0x03C3CAA4 TBNZ X8, 0x0, 0x3C3CAC8
	0x03C3CAA8 ADRP X0, 0x4C0000
	0x03C3CAAC LDR X0, [X0 + 0x9E8]
	0x03C3CAB0 BL 0x1C16CF4
	0x03C3CAB4 ADRP X0, 0x523000
	0x03C3CAB8 LDR X0, [X0 + 0x758]
	0x03C3CABC BL 0x1C16CF4
	0x03C3CAC0 MOVZ W8, 0x1
	0x03C3CAC4 STRB W8, [X27 + 0x821]
	0x03C3CAC8 LDR W27, [X31 + 0x80]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1704]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51593216
	008 Add X0, X0, 667
	009 Call 0x1C17CB8
	010 Move [X19+1704], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Rendering.GraphicsDeviceType GetGraphicsDeviceType()

Disassembly:
	0x03C3CAF4 MOV X26, X0
	0x03C3CAF8 LDR W9, [X8 + 0xE0]
	0x03C3CAFC CBNZ W9, 0x3C3CB08
	0x03C3CB00 MOV X0, X8
	0x03C3CB04 BL 0x1C16DFC
	0x03C3CB08 MOV X0, X26
	0x03C3CB0C MOV X1, X31
	0x03C3CB10 BL 0x33205FC
	0x03C3CB14 STR W0, [X31 + 0x8]
	0x03C3CB18 AND W0, W25, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1712]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51458048
	008 Add X0, X0, 2493
	009 Call 0x1C17CB8
	010 Move [X19+1712], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean GetGraphicsUVStartsAtTop()

Disassembly:
	0x03C3CB44 STR W0, [X31 + 0x14]
	0x03C3CB48 AND W0, W22, 0x1
	0x03C3CB4C MOV X1, X31
	0x03C3CB50 BL 0x3318370
	0x03C3CB54 ADRP X22, 0x7A9000
	0x03C3CB58 LDR X8, [X22 + 0x828]
	0x03C3CB5C STP W0, W27, [X31 + 0x18]
	0x03C3CB60 CBNZ X8, 0x3C3CB78
	0x03C3CB64 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C3CB68 ADD X0, X0, 0xEE7

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1720]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51466240
	008 Add X0, X0, 3745
	009 Call 0x1C17CB8
	010 Move [X19+1720], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 GetGraphicsShaderLevel()

Disassembly:
	0x03C3CB94 LDP X24, X23, [X31 + 0x50]
	0x03C3CB98 LDP X26, X25, [X31 + 0x40]
	0x03C3CB9C LDP X28, X27, [X31 + 0x30]
	0x03C3CBA0 LDP X29, X30, [X31 + 0x20]
	0x03C3CBA4 ADD X31, X31, 0x80
	0x03C3CBA8 RET
	0x03C3CBAC STR X30, [X31 - 0x30]!
	0x03C3CBB0 STP X22, X21, [X31 + 0x10]
	0x03C3CBB4 STP X20, X19, [X31 + 0x20]
	0x03C3CBB8 ADRP X22, 0x7A9000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1728]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51593216
	008 Add X0, X0, 717
	009 Call 0x1C17CB8
	010 Move [X19+1728], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Rendering.FoveatedRenderingCaps GetFoveatedRenderingCaps()

Disassembly:
	0x03C3CBE4 MOV X0, X21
	0x03C3CBE8 MOV X1, X20
	0x03C3CBEC MOV X2, X19
	0x03C3CBF0 LDP X20, X19, [X31 + 0x20]
	0x03C3CBF4 LDP X22, X21, [X31 + 0x10]
	0x03C3CBF8 LDR X30, [X31], #0x30
	0x03C3CBFC BR X3
	0x03C3CC00 STR X30, [X31 - 0x20]!
	0x03C3CC04 STP X20, X19, [X31 + 0x10]
	0x03C3CC08 ADRP X19, 0x7A9000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1736]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51490816
	008 Add X0, X0, 2906
	009 Call 0x1C17CB8
	010 Move [X19+1736], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean HasHiddenSurfaceRemovalOnGPU()

Disassembly:
	0x03C3CC34 LDR W8, [X0 + 0xE0]
	0x03C3CC38 CBNZ W8, 0x3C3CC40
	0x03C3CC3C BL 0x1C16DFC
	0x03C3CC40 MOV X0, X31
	0x03C3CC44 BL 0x3C01AB0
	0x03C3CC48 MOV W8, W0
	0x03C3CC4C CMP W0, 0x14
	0x03C3CC50 B.LE 0x3C3CC74
	0x03C3CC54 SUB W8, W8, 0x19
	0x03C3CC58 CMP W8, 0x1A

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1744]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51601408
	008 Add X0, X0, 745
	009 Call 0x1C17CB8
	010 Move [X19+1744], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsShadows()

Disassembly:
	0x03C3CC84 B.EQ 0x3C3CCA0
	0x03C3CC88 SUB W8, W8, 0x11
	0x03C3CC8C CMP W8, 0x3
	0x03C3CC90 B.LS 0x3C3CC9C
	0x03C3CC94 MOV W0, W31
	0x03C3CC98 B 0x3C3CCA0
	0x03C3CC9C MOVZ W0, 0x1
	0x03C3CCA0 LDP X20, X19, [X31 + 0x10]
	0x03C3CCA4 LDR X30, [X31], #0x20
	0x03C3CCA8 RET

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1752]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51449856
	008 Add X0, X0, 2650
	009 Call 0x1C17CB8
	010 Move [X19+1752], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Rendering.CopyTextureSupport GetCopyTextureSupport()

Disassembly:
	0x03C3CCD4 MOVZ W8, 0x1
	0x03C3CCD8 STRB W8, [X19 + 0x831]
	0x03C3CCDC LDR X8, [X20]
	0x03C3CCE0 LDP X20, X19, [X31 + 0x10]
	0x03C3CCE4 LDR X8, [X8 + 0xB8]
	0x03C3CCE8 LDRB W0, [X8]
	0x03C3CCEC LDR X30, [X31], #0x20
	0x03C3CCF0 RET
	0x03C3CCF4 STP X30, X19, [X31 - 0x10]!
	0x03C3CCF8 ADRP X19, 0x7A9000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1760]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51539968
	008 Add X0, X0, 2885
	009 Call 0x1C17CB8
	010 Move [X19+1760], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsComputeShaders()

Disassembly:
	0x03C3CD24 LDR X8, [X8 + 0xB8]
	0x03C3CD28 LDRB W8, [X8]
	0x03C3CD2C CBZ W8, 0x3C3CD3C
	0x03C3CD30 MOV W0, W31
	0x03C3CD34 LDP X30, X19, [X31], #0x10
	0x03C3CD38 RET
	0x03C3CD3C ADRP X19, 0x7A9000
	0x03C3CD40 LDR X0, [X19 + 0x838]
	0x03C3CD44 CBNZ X0, 0x3C3CD58
	0x03C3CD48 ADRP X0, 0xFFFFFFFFFCEC5000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1768]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51458048
	008 Add X0, X0, 2541
	009 Call 0x1C17CB8
	010 Move [X19+1768], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsRenderTargetArrayIndexFromVertexShader()

Disassembly:
	0x03C3CD74 ADD X0, X0, 0x176
	0x03C3CD78 BL 0x1C16CB8
	0x03C3CD7C STR X0, [X19 + 0x838]
	0x03C3CD80 LDP X30, X19, [X31], #0x10
	0x03C3CD84 BR X0
	0x03C3CD88 STP X30, X19, [X31 - 0x10]!
	0x03C3CD8C ADRP X19, 0x7A9000
	0x03C3CD90 LDR X0, [X19 + 0x840]
	0x03C3CD94 CBNZ X0, 0x3C3CDA8
	0x03C3CD98 ADRP X0, 0xFFFFFFFFFCEB7000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1776]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51634176
	008 Add X0, X0, 1683
	009 Call 0x1C17CB8
	010 Move [X19+1776], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsInstancing()

Disassembly:
	0x03C3CDC4 ADD X0, X0, 0x498
	0x03C3CDC8 BL 0x1C16CB8
	0x03C3CDCC STR X0, [X19 + 0x840]
	0x03C3CDD0 LDP X30, X19, [X31], #0x10
	0x03C3CDD4 BR X0
	0x03C3CDD8 SUB X31, X31, 0x70
	0x03C3CDDC STR X30, [X31 + 0x10]
	0x03C3CDE0 STP X28, X27, [X31 + 0x20]
	0x03C3CDE4 STP X26, X25, [X31 + 0x30]
	0x03C3CDE8 STP X24, X23, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1784]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51593216
	008 Add X0, X0, 766
	009 Call 0x1C17CB8
	010 Move [X19+1784], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 SupportedRenderTargetCount()

Disassembly:
	0x03C3CE14 MOV W25, W3
	0x03C3CE18 MOV W26, W2
	0x03C3CE1C MOV W22, W1
	0x03C3CE20 MOV X24, X0
	0x03C3CE24 TBNZ X8, 0x0, 0x3C3CE3C
	0x03C3CE28 ADRP X0, 0x523000
	0x03C3CE2C LDR X0, [X0 + 0x760]
	0x03C3CE30 BL 0x1C16CF4
	0x03C3CE34 MOVZ W8, 0x1
	0x03C3CE38 STRB W8, [X27 + 0x848]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1792]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51499008
	008 Add X0, X0, 3580
	009 Call 0x1C17CB8
	010 Move [X19+1792], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 SupportsMultisampledTextures()

Disassembly:
	0x03C3CE64 STR W20, [X31]
	0x03C3CE68 BL 0x3C3CA50
	0x03C3CE6C MOV X0, X27
	0x03C3CE70 LDP X20, X19, [X31 + 0x60]
	0x03C3CE74 LDP X22, X21, [X31 + 0x50]
	0x03C3CE78 LDP X24, X23, [X31 + 0x40]
	0x03C3CE7C LDP X26, X25, [X31 + 0x30]
	0x03C3CE80 LDP X28, X27, [X31 + 0x20]
	0x03C3CE84 LDR X30, [X31 + 0x10]
	0x03C3CE88 ADD X31, X31, 0x70

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1800]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51576832
	008 Add X0, X0, 1410
	009 Call 0x1C17CB8
	010 Move [X19+1800], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsMultisampleAutoResolve()

Disassembly:
	0x03C3CEB4 MOV W20, W4
	0x03C3CEB8 MOV W22, W3
	0x03C3CEBC MOV W23, W2
	0x03C3CEC0 MOV W19, W1
	0x03C3CEC4 MOV X21, X0
	0x03C3CEC8 TBNZ X8, 0x0, 0x3C3CEE0
	0x03C3CECC ADRP X0, 0x4B7000
	0x03C3CED0 LDR X0, [X0 + 0x988]
	0x03C3CED4 BL 0x1C16CF4
	0x03C3CED8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1808]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51458048
	008 Add X0, X0, 2590
	009 Call 0x1C17CB8
	010 Move [X19+1808], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean UsesReversedZBuffer()

Disassembly:
	0x03C3CF04 LDP X20, X19, [X31 + 0x40]
	0x03C3CF08 LDP X22, X21, [X31 + 0x30]
	0x03C3CF0C LDP X24, X23, [X31 + 0x20]
	0x03C3CF10 LDP X30, X25, [X31 + 0x10]
	0x03C3CF14 ADD X31, X31, 0x50
	0x03C3CF18 RET
	0x03C3CF1C STR X30, [X31 - 0x20]!
	0x03C3CF20 STP X20, X19, [X31 + 0x10]
	0x03C3CF24 ADRP X20, 0x7A9000
	0x03C3CF28 LDR X1, [X20 + 0x850]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7AA000
	004 Move X0, [X19+1816]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51474432
	008 Add X0, X0, 3726
	009 Call 0x1C17CB8
	010 Move [X19+1816], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean HasRenderTextureNative(UnityEngine.RenderTextureFormat format)

Disassembly:
	0x03C3D078 BL 0x1C16CB8
	0x03C3D07C MOV X1, X0
	0x03C3D080 STR X0, [X20 + 0x878]
	0x03C3D084 MOV X0, X19
	0x03C3D088 LDP X20, X19, [X31 + 0x10]
	0x03C3D08C LDR X30, [X31], #0x20
	0x03C3D090 BR X1
	0x03C3D094 STP X30, X21, [X31 - 0x20]!
	0x03C3D098 STP X20, X19, [X31 + 0x10]
	0x03C3D09C ADRP X21, 0x7A8000
	0x03C3D0A0 LDR X2, [X21 + 0x880]
	0x03C3D0A4 MOV W19, W1
	0x03C3D0A8 MOV X20, X0
	0x03C3D0AC CBNZ X2, 0x3C3D0C4
	0x03C3D0B0 ADRP X0, 0xFFFFFFFFFCEE6000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+1824]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51544064
	010 Add X0, X0, 2933
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1824], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean SupportsTextureFormatNative(UnityEngine.TextureFormat format)

Disassembly:
	0x03C3D188 BLR X8
	0x03C3D18C LDR X0, [X31 + 0x8]
	0x03C3D190 LDP X30, X19, [X31 + 0x10]
	0x03C3D194 ADD X31, X31, 0x20
	0x03C3D198 RET
	0x03C3D19C STP X30, X21, [X31 - 0x20]!
	0x03C3D1A0 STP X20, X19, [X31 + 0x10]
	0x03C3D1A4 ADRP X21, 0x7A8000
	0x03C3D1A8 LDR X2, [X21 + 0x898]
	0x03C3D1AC MOV X19, X1
	0x03C3D1B0 MOV X20, X0
	0x03C3D1B4 CBNZ X2, 0x3C3D1CC
	0x03C3D1B8 ADRP X0, 0xFFFFFFFFFCEE7000
	0x03C3D1BC ADD X0, X0, 0xF97
	0x03C3D1C0 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+1832]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51527680
	010 Add X0, X0, 2616
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1832], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetMaxTextureSize()

Disassembly:
	0x03C3D1EC MOV X19, X1
	0x03C3D1F0 UBFM X20, X1, 0x20, 0x3F
	0x03C3D1F4 ORR W8, W20, W19, 0x0
	0x03C3D1F8 TBNZ X8, 0x1F, 0x3C3D274
	0x03C3D1FC ADRP X22, 0x7A8000
	0x03C3D200 LDR X8, [X22 + 0x850]
	0x03C3D204 MOV X21, X0
	0x03C3D208 CBNZ X8, 0x3C3D220
	0x03C3D20C ADRP X0, 0xFFFFFFFFFCEDB000
	0x03C3D210 ADD X0, X0, 0xA87

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1840]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51679232
	008 Add X0, X0, 1069
	009 Call 0x1C17CB8
	010 Move [X19+1840], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 GetMaxRenderTextureSize()

Disassembly:
	0x03C3D23C ADRP X21, 0x7A8000
	0x03C3D240 LDR X2, [X21 + 0x8A0]
	0x03C3D244 CBNZ X2, 0x3C3D25C
	0x03C3D248 ADRP X0, 0xFFFFFFFFFCEBE000
	0x03C3D24C ADD X0, X0, 0x427
	0x03C3D250 BL 0x1C16CB8
	0x03C3D254 MOV X2, X0
	0x03C3D258 STR X0, [X21 + 0x8A0]
	0x03C3D25C MOV W0, W19
	0x03C3D260 MOV W1, W20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1848]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51613696
	008 Add X0, X0, 461
	009 Call 0x1C17CB8
	010 Move [X19+1848], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsGPUFence()

Disassembly:
	0x03C3D28C LDR X0, [X0 + 0x768]
	0x03C3D290 BL 0x1C16D08
	0x03C3D294 MOV X20, X0
	0x03C3D298 ADRP X0, 0x522000
	0x03C3D29C LDR X0, [X0 + 0x770]
	0x03C3D2A0 BL 0x1C16D08
	0x03C3D2A4 MOV X2, X0
	0x03C3D2A8 MOV X0, X19
	0x03C3D2AC MOV X1, X20
	0x03C3D2B0 MOV X3, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1856]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51478528
	008 Add X0, X0, 3772
	009 Call 0x1C17CB8
	010 Move [X19+1856], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int64 MaxGraphicsBufferSize()

Disassembly:
	0x03C3D2B4 BL 0x3311888
	0x03C3D2B8 ADRP X0, 0x522000
	0x03C3D2BC LDR X0, [X0 + 0x778]
	0x03C3D2C0 BL 0x1C16D08
	0x03C3D2C4 MOV X1, X0
	0x03C3D2C8 MOV X0, X19
	0x03C3D2CC BL 0x1C16DEC
	0x03C3D2D0 BL 0x1C16F20
	0x03C3D2D4 STP X30, X21, [X31 - 0x20]!
	0x03C3D2D8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1864]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51597312
	008 Add X0, X0, 811
	009 Call 0x1C17CB8
	010 Move [X19+1864], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean IsFormatSupported(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)

Disassembly:
	0x03C3D4BC ADRP X22, 0x522000
	0x03C3D4C0 LDRB W8, [X23 + 0x8A9]
	0x03C3D4C4 LDR X22, [X22 + 0x7A8]
	0x03C3D4C8 MOV X19, X2
	0x03C3D4CC MOV X20, X1
	0x03C3D4D0 MOV X21, X0
	0x03C3D4D4 TBNZ X8, 0x0, 0x3C3D4F8
	0x03C3D4D8 ADRP X0, 0x522000
	0x03C3D4DC LDR X0, [X0 + 0x7B0]
	0x03C3D4E0 BL 0x1C16CF4
	0x03C3D4E4 ADRP X0, 0x522000
	0x03C3D4E8 LDR X0, [X0 + 0x7A8]
	0x03C3D4EC BL 0x1C16CF4
	0x03C3D4F0 MOVZ W8, 0x1
	0x03C3D4F4 STRB W8, [X23 + 0x8A9]
	0x03C3D4F8 LDR X0, [X22]
	0x03C3D4FC STP X31, X31, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A9000
	006 Move X2, [X21+1872]
	007 Move W19, W1
	008 Move W20, W0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51453952
	012 Add X0, X0, 2692
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1872], X0
	016 Move W0, W20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Experimental.Rendering.GraphicsFormat GetCompatibleFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)

Disassembly:
	0x03C3D500 STR X31, [X31 + 0x8]
	0x03C3D504 LDR W8, [X0 + 0xE0]
	0x03C3D508 CBNZ W8, 0x3C3D510
	0x03C3D50C BL 0x1C16DFC
	0x03C3D510 ADD X2, X31, 0x18
	0x03C3D514 MOV X0, X21
	0x03C3D518 MOV X1, X19
	0x03C3D51C BL 0x3C3D318
	0x03C3D520 TBNZ X0, 0x0, 0x3C3D594
	0x03C3D524 LDR X8, [X31 + 0x18]
	0x03C3D528 CBZ X8, 0x3C3D594
	0x03C3D52C MOV X0, X20
	0x03C3D530 MOV X1, X31
	0x03C3D534 BL 0x32277A8
	0x03C3D538 TBNZ X0, 0x0, 0x3C3D590
	0x03C3D53C LDR X0, [X22]
	0x03C3D540 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A9000
	006 Move X2, [X21+1880]
	007 Move W19, W1
	008 Move W20, W0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51687424
	012 Add X0, X0, 582
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1880], X0
	016 Move W0, W20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat(UnityEngine.Experimental.Rendering.DefaultFormat format)

Disassembly:
	0x03C3D544 CBNZ W8, 0x3C3D54C
	0x03C3D548 BL 0x1C16DFC
	0x03C3D54C ADD X1, X31, 0x10
	0x03C3D550 ADD X2, X31, 0x8
	0x03C3D554 MOV X0, X20
	0x03C3D558 BL 0x3C3D318
	0x03C3D55C TBZ X0, 0x0, 0x3C3D590
	0x03C3D560 LDR V0, [X31 + 0x10]
	0x03C3D564 STR D0, [X19]
	0x03C3D568 LDR X0, [X31 + 0x18]
	0x03C3D56C CBZ X0, 0x3C3D5AC
	0x03C3D570 ADRP X8, 0x522000
	0x03C3D574 LDR X8, [X8 + 0x7B0]
	0x03C3D578 MOVZ W3, 0x1
	0x03C3D57C MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+1888]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51470336
	010 Add X0, X0, 3796
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1888], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetRenderTextureSupportedMSAASampleCount(UnityEngine.RenderTextureDescriptor desc)

Disassembly:
	0x03C3D580 MOV W2, W31
	0x03C3D584 LDR X4, [X8]
	0x03C3D588 BL 0x22B4848
	0x03C3D58C B 0x3C3D594
	0x03C3D590 MOV W0, W31
	0x03C3D594 LDP X20, X19, [X31 + 0x40]
	0x03C3D598 LDP X22, X21, [X31 + 0x30]
	0x03C3D59C LDP X30, X23, [X31 + 0x20]
	0x03C3D5A0 AND W0, W0, 0x1
	0x03C3D5A4 ADD X31, X31, 0x50
	0x03C3D5A8 RET
	0x03C3D5AC BL 0x1C16F20
	0x03C3D5B0 SUB X31, X31, 0x40
	0x03C3D5B4 STP X30, X23, [X31 + 0x10]
	0x03C3D5B8 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+1944]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51671040
	010 Add X0, X0, 1176
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1944], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean UsesLoadStoreActions()

Disassembly:
	0x03C3D304 MOV W0, W20
	0x03C3D308 MOV W1, W19
	0x03C3D30C LDP X20, X19, [X31 + 0x10]
	0x03C3D310 LDP X30, X21, [X31], #0x20
	0x03C3D314 BR X2
	0x03C3D318 STR X30, [X31 - 0x30]!
	0x03C3D31C STP X22, X21, [X31 + 0x10]
	0x03C3D320 STP X20, X19, [X31 + 0x20]
	0x03C3D324 ADRP X22, 0x7A8000
	0x03C3D328 LDRB W8, [X22 + 0x8A8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1896]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51580928
	008 Add X0, X0, 1465
	009 Call 0x1C17CB8
	010 Move [X19+1896], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.HDRDisplaySupportFlags GetHDRDisplaySupportFlags()

Disassembly:
	0x03C3D354 ADRP X0, 0x522000
	0x03C3D358 LDR X0, [X0 + 0x788]
	0x03C3D35C BL 0x1C16CF4
	0x03C3D360 ADRP X0, 0x509000
	0x03C3D364 LDR X0, [X0 + 0x448]
	0x03C3D368 BL 0x1C16CF4
	0x03C3D36C ADRP X0, 0x522000
	0x03C3D370 LDR X0, [X0 + 0x790]
	0x03C3D374 BL 0x1C16CF4
	0x03C3D378 ADRP X0, 0x522000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1904]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51482624
	008 Add X0, X0, 628
	009 Call 0x1C17CB8
	010 Move [X19+1904], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsMultiview()

Disassembly:
	0x03C3D3A4 LDR X22, [X22 + 0x788]
	0x03C3D3A8 MOV X0, X21
	0x03C3D3AC MOV X1, X31
	0x03C3D3B0 BL 0x322B5E4
	0x03C3D3B4 LDR X1, [X22]
	0x03C3D3B8 MOV X2, X31
	0x03C3D3BC MOV X22, X0
	0x03C3D3C0 BL 0x321BA08
	0x03C3D3C4 TBNZ X0, 0x0, 0x3C3D3E4
	0x03C3D3C8 ADRP X8, 0x509000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1912]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51453952
	008 Add X0, X0, 2832
	009 Call 0x1C17CB8
	010 Move [X19+1912], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsStoreAndResolveAction()

Disassembly:
	0x03C3D3F4 MOV X0, X22
	0x03C3D3F8 MOV X2, X31
	0x03C3D3FC LDR X1, [X8]
	0x03C3D400 BL 0x321BA08
	0x03C3D404 TBNZ X0, 0x0, 0x3C3D424
	0x03C3D408 ADRP X8, 0x522000
	0x03C3D40C LDR X8, [X8 + 0x7A0]
	0x03C3D410 MOV X0, X22
	0x03C3D414 MOV X2, X31
	0x03C3D418 LDR X1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1920]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51621888
	008 Add X0, X0, 318
	009 Call 0x1C17CB8
	010 Move [X19+1920], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsMultisampleResolveDepth()

Disassembly:
	0x03C3D444 LDR X8, [X8 + 0x790]
	0x03C3D448 MOV X0, X22
	0x03C3D44C MOV X2, X31
	0x03C3D450 LDR X1, [X8]
	0x03C3D454 BL 0x321BA08
	0x03C3D458 TBZ X0, 0x0, 0x3C3D464
	0x03C3D45C MOVZ X8, 0x7FF80000
	0x03C3D460 B 0x3C3D428
	0x03C3D464 ADRP X8, 0x4DE000
	0x03C3D468 LDR X8, [X8 + 0xA68]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1928]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51589120
	008 Add X0, X0, 941
	009 Call 0x1C17CB8
	010 Move [X19+1928], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean SupportsMultisampleResolveStencil()

Disassembly:
	0x03C3D494 LDP X20, X19, [X31 + 0x20]
	0x03C3D498 LDP X22, X21, [X31 + 0x10]
	0x03C3D49C LDR X30, [X31], #0x30
	0x03C3D4A0 B 0x21DE730
	0x03C3D4A4 BL 0x1C16F20
	0x03C3D4A8 SUB X31, X31, 0x50
	0x03C3D4AC STP X30, X23, [X31 + 0x20]
	0x03C3D4B0 STP X22, X21, [X31 + 0x30]
	0x03C3D4B4 STP X20, X19, [X31 + 0x40]
	0x03C3D4B8 ADRP X23, 0x7A8000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+1936]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51482624
	008 Add X0, X0, 680
	009 Call 0x1C17CB8
	010 Move [X19+1936], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 GetRenderTextureSupportedMSAASampleCount_Injected(ref UnityEngine.RenderTextureDescriptor desc)

Disassembly:
	0x03C3D5BC STP X20, X19, [X31 + 0x30]
	0x03C3D5C0 ADRP X23, 0x7A8000
	0x03C3D5C4 ADRP X22, 0x522000
	0x03C3D5C8 LDRB W8, [X23 + 0x8AA]
	0x03C3D5CC LDR X22, [X22 + 0x7A8]
	0x03C3D5D0 MOV X19, X2
	0x03C3D5D4 MOV X20, X1
	0x03C3D5D8 MOV X21, X0
	0x03C3D5DC TBNZ X8, 0x0, 0x3C3D5F4
	0x03C3D5E0 ADRP X0, 0x522000
	0x03C3D5E4 LDR X0, [X0 + 0x7A8]
	0x03C3D5E8 BL 0x1C16CF4
	0x03C3D5EC MOVZ W8, 0x1
	0x03C3D5F0 STRB W8, [X23 + 0x8AA]
	0x03C3D5F4 LDR X0, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+1944]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51671040
	010 Add X0, X0, 1176
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1944], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

