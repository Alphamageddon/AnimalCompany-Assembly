Type: UnityEngine.Mesh

Method: System.Void Internal_Create(UnityEngine.Mesh mono)

Disassembly:
	0x03C17FEC STRB W8, [X21 + 0xBAB]
	0x03C17FF0 LDR X4, [X22]
	0x03C17FF4 MOV X0, X20
	0x03C17FF8 MOV X2, X19
	0x03C17FFC LDP X20, X19, [X31 + 0x20]
	0x03C18000 LDP X22, X21, [X31 + 0x10]
	0x03C18004 MOVZ W1, 0x1
	0x03C18008 MOV W3, W31
	0x03C1800C LDR X30, [X31], #0x30
	0x03C18010 B 0x2219ECC
	0x03C18014 STP X30, X21, [X31 - 0x20]!
	0x03C18018 STP X20, X19, [X31 + 0x10]
	0x03C1801C ADRP X20, 0x7CC000
	0x03C18020 ADRP X21, 0x546000
	0x03C18024 LDRB W8, [X20 + 0xBAC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CE000
	005 Move X1, [X20+2760]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51294208
	010 Add X0, X0, 1900
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2760], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void .ctor()

Disassembly:
	0x03C18028 LDR X21, [X21 + 0xEC8]
	0x03C1802C MOV X19, X0
	0x03C18030 TBNZ X8, 0x0, 0x3C18048
	0x03C18034 ADRP X0, 0x546000
	0x03C18038 LDR X0, [X0 + 0xEC8]
	0x03C1803C BL 0x1C16CF4
	0x03C18040 MOVZ W8, 0x1
	0x03C18044 STRB W8, [X20 + 0xBAC]
	0x03C18048 LDR X2, [X21]
	0x03C1804C MOV X0, X19
	0x03C18050 LDP X20, X19, [X31 + 0x10]
	0x03C18054 MOVZ W1, 0x2
	0x03C18058 LDP X30, X21, [X31], #0x20
	0x03C1805C B 0x2219264
	0x03C18060 STR X30, [X31 - 0x30]!
	0x03C18064 STP X22, X21, [X31 + 0x10]
	0x03C18068 STP X20, X19, [X31 + 0x20]
	0x03C1806C ADRP X21, 0x7CC000
	0x03C18070 ADRP X22, 0x546000
	0x03C18074 LDRB W8, [X21 + 0xBAD]
	0x03C18078 LDR X22, [X22 + 0xED0]
	0x03C1807C MOV X19, X1
	0x03C18080 MOV X20, X0
	0x03C18084 TBNZ X8, 0x0, 0x3C1809C
	0x03C18088 ADRP X0, 0x546000
	0x03C1808C LDR X0, [X0 + 0xED0]
	0x03C18090 BL 0x1C16CF4
	0x03C18094 MOVZ W8, 0x1
	0x03C18098 STRB W8, [X21 + 0xBAD]
	0x03C1809C LDR X4, [X22]
	0x03C180A0 MOV X0, X20
	0x03C180A4 MOV X2, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CD000
	006 Move X21, 0x4DC000
	007 Move W8, [X20+2768]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4DC000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2768], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Call Object..ctor, X0
	027 Move X20, 0x7CD000
	028 Move X1, [X20+2760]
	029 Compare X1, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51294208
	032 Add X0, X0, 1900
	033 Call 0x1C17CB8
	034 Move X1, X0
	035 Move [X20+2760], X0
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 CallNoReturn X1

Method: System.Void set_indexFormat(UnityEngine.Rendering.IndexFormat value)

Disassembly:
	0x03C180A8 LDP X20, X19, [X31 + 0x20]
	0x03C180AC LDP X22, X21, [X31 + 0x10]
	0x03C180B0 MOVZ W1, 0x2
	0x03C180B4 MOV W3, W31
	0x03C180B8 LDR X30, [X31], #0x30
	0x03C180BC B 0x2219F48
	0x03C180C0 STP X30, X21, [X31 - 0x20]!
	0x03C180C4 STP X20, X19, [X31 + 0x10]
	0x03C180C8 ADRP X20, 0x7CC000
	0x03C180CC ADRP X21, 0x546000
	0x03C180D0 LDRB W8, [X20 + 0xBAE]
	0x03C180D4 LDR X21, [X21 + 0xED8]
	0x03C180D8 MOV X19, X0
	0x03C180DC TBNZ X8, 0x0, 0x3C180F4
	0x03C180E0 ADRP X0, 0x546000
	0x03C180E4 LDR X0, [X0 + 0xED8]
	0x03C180E8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2776]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51412992
	012 Add X0, X0, 448
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2776], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetVertexBufferParamsFromArray(System.Int32 vertexCount, UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)

Disassembly:
	0x03C180EC MOVZ W8, 0x1
	0x03C180F0 STRB W8, [X20 + 0xBAE]
	0x03C180F4 LDR X2, [X21]
	0x03C180F8 MOV X0, X19
	0x03C180FC LDP X20, X19, [X31 + 0x10]
	0x03C18100 MOVZ W1, 0x4
	0x03C18104 LDP X30, X21, [X31], #0x20
	0x03C18108 B 0x22191BC
	0x03C1810C STR X30, [X31 - 0x30]!
	0x03C18110 STP X22, X21, [X31 + 0x10]
	0x03C18114 STP X20, X19, [X31 + 0x20]
	0x03C18118 ADRP X21, 0x7CC000
	0x03C1811C ADRP X22, 0x546000
	0x03C18120 LDRB W8, [X21 + 0xBAF]
	0x03C18124 LDR X22, [X22 + 0xEE0]
	0x03C18128 MOV X19, X1
	0x03C1812C MOV X20, X0
	0x03C18130 TBNZ X8, 0x0, 0x3C18148
	0x03C18134 ADRP X0, 0x546000
	0x03C18138 LDR X0, [X0 + 0xEE0]
	0x03C1813C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CD000
	007 Move X3, [X22+2784]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51335168
	014 Add X0, X0, 3781
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2784], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void InternalSetVertexBufferData(System.Int32 stream, System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C18140 MOVZ W8, 0x1
	0x03C18144 STRB W8, [X21 + 0xBAF]
	0x03C18148 LDR X4, [X22]
	0x03C1814C MOV X0, X20
	0x03C18150 MOV X2, X19
	0x03C18154 LDP X20, X19, [X31 + 0x20]
	0x03C18158 LDP X22, X21, [X31 + 0x10]
	0x03C1815C MOVZ W1, 0x4
	0x03C18160 MOV W3, W31
	0x03C18164 LDR X30, [X31], #0x30
	0x03C18168 B 0x2219E50
	0x03C1816C STP X30, X21, [X31 - 0x20]!
	0x03C18170 STP X20, X19, [X31 + 0x10]
	0x03C18174 ADRP X20, 0x7CC000
	0x03C18178 ADRP X21, 0x546000
	0x03C1817C LDRB W8, [X20 + 0xBB0]
	0x03C18180 LDR X21, [X21 + 0xED8]
	0x03C18184 MOV X19, X0
	0x03C18188 TBNZ X8, 0x0, 0x3C181A0
	0x03C1818C ADRP X0, 0x546000
	0x03C18190 LDR X0, [X0 + 0xED8]
	0x03C18194 BL 0x1C16CF4
	0x03C18198 MOVZ W8, 0x1
	0x03C1819C STRB W8, [X20 + 0xBB0]
	0x03C181A0 LDR X2, [X21]
	0x03C181A4 MOV X0, X19
	0x03C181A8 LDP X20, X19, [X31 + 0x10]
	0x03C181AC MOVZ W1, 0x5
	0x03C181B0 LDP X30, X21, [X31], #0x20
	0x03C181B4 B 0x22191BC
	0x03C181B8 STR X30, [X31 - 0x30]!
	0x03C181BC STP X22, X21, [X31 + 0x10]
	0x03C181C0 STP X20, X19, [X31 + 0x20]
	0x03C181C4 ADRP X21, 0x7CC000
	0x03C181C8 ADRP X22, 0x546000

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X27, 0x7CD000
	012 Move X8, [X27+2792]
	013 Move W19, W7
	014 Move W20, W6
	015 Move W21, W5
	016 Move W22, W4
	017 Move W23, W3
	018 Move X24, X2
	019 Move W25, W1
	020 Move X26, X0
	021 Compare X8, 0
	022 JumpIfNotEqual {28}
	023 Move X0, -51384320
	024 Add X0, X0, 2282
	025 Call 0x1C17CB8
	026 Move X8, X0
	027 Move [X27+2792], X0
	028 Move X0, X26
	029 Move W1, W25
	030 Move X2, X24
	031 Move W3, W23
	032 Move W4, W22
	033 Move W5, W21
	034 Move W6, W20
	035 Move W7, W19
	036 Move X20, [X31+64]
	037 Move X19, [X31+72]
	038 Move X22, [X31+48]
	039 Move X21, [X31+56]
	040 Move X24, [X31+32]
	041 Move X23, [X31+40]
	042 Move X26, [X31+16]
	043 Move X25, [X31+24]
	044 Move X30, [X31+80]
	045 Move X27, [X31+88]
	046 CallNoReturn X8

Method: System.UInt32 GetIndexCountImpl(System.Int32 submesh)

Disassembly:
	0x03C181CC LDRB W8, [X21 + 0xBB1]
	0x03C181D0 LDR X22, [X22 + 0xEE0]
	0x03C181D4 MOV X19, X1
	0x03C181D8 MOV X20, X0
	0x03C181DC TBNZ X8, 0x0, 0x3C181F4
	0x03C181E0 ADRP X0, 0x546000
	0x03C181E4 LDR X0, [X0 + 0xEE0]
	0x03C181E8 BL 0x1C16CF4
	0x03C181EC MOVZ W8, 0x1
	0x03C181F0 STRB W8, [X21 + 0xBB1]
	0x03C181F4 LDR X4, [X22]
	0x03C181F8 MOV X0, X20
	0x03C181FC MOV X2, X19
	0x03C18200 LDP X20, X19, [X31 + 0x20]
	0x03C18204 LDP X22, X21, [X31 + 0x10]
	0x03C18208 MOVZ W1, 0x5
	0x03C1820C MOV W3, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2800]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51437568
	012 Add X0, X0, 87
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2800], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32[] GetTrianglesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)

Disassembly:
	0x03C18210 LDR X30, [X31], #0x30
	0x03C18214 B 0x2219E50
	0x03C18218 STP X30, X21, [X31 - 0x20]!
	0x03C1821C STP X20, X19, [X31 + 0x10]
	0x03C18220 ADRP X20, 0x7CC000
	0x03C18224 ADRP X21, 0x546000
	0x03C18228 LDRB W8, [X20 + 0xBB2]
	0x03C1822C LDR X21, [X21 + 0xEE8]
	0x03C18230 MOV X19, X0
	0x03C18234 TBNZ X8, 0x0, 0x3C1824C
	0x03C18238 ADRP X0, 0x546000
	0x03C1823C LDR X0, [X0 + 0xEE8]
	0x03C18240 BL 0x1C16CF4
	0x03C18244 MOVZ W8, 0x1
	0x03C18248 STRB W8, [X20 + 0xBB2]
	0x03C1824C LDR X2, [X21]
	0x03C18250 MOV X0, X19
	0x03C18254 LDP X20, X19, [X31 + 0x10]
	0x03C18258 MOVZ W1, 0x3
	0x03C1825C LDP X30, X21, [X31], #0x20
	0x03C18260 B 0x2219168

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CD000
	007 Move X3, [X22+2808]
	008 Move W20, W2
	009 Move W19, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51466240
	014 Add X0, X0, 3790
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2808], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move W1, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int32[] GetIndicesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)

Disassembly:
	0x03C18264 STR X30, [X31 - 0x30]!
	0x03C18268 STP X22, X21, [X31 + 0x10]
	0x03C1826C STP X20, X19, [X31 + 0x20]
	0x03C18270 ADRP X21, 0x7CC000
	0x03C18274 ADRP X22, 0x546000
	0x03C18278 LDRB W8, [X21 + 0xBB3]
	0x03C1827C LDR X22, [X22 + 0xEF0]
	0x03C18280 MOV X19, X1
	0x03C18284 MOV X20, X0
	0x03C18288 TBNZ X8, 0x0, 0x3C182A0
	0x03C1828C ADRP X0, 0x546000
	0x03C18290 LDR X0, [X0 + 0xEF0]
	0x03C18294 BL 0x1C16CF4
	0x03C18298 MOVZ W8, 0x1
	0x03C1829C STRB W8, [X21 + 0xBB3]
	0x03C182A0 LDR X4, [X22]
	0x03C182A4 MOV X0, X20
	0x03C182A8 MOV X2, X19
	0x03C182AC LDP X20, X19, [X31 + 0x20]
	0x03C182B0 LDP X22, X21, [X31 + 0x10]
	0x03C182B4 MOVZ W1, 0x3

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CD000
	007 Move X3, [X22+2816]
	008 Move W20, W2
	009 Move W19, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51359744
	014 Add X0, X0, 4048
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2816], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move W1, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetIndicesImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)

Disassembly:
	0x03C182B8 MOV W3, W31
	0x03C182BC LDR X30, [X31], #0x30
	0x03C182C0 B 0x2219DD4
	0x03C182C4 STP X30, X21, [X31 - 0x20]!
	0x03C182C8 STP X20, X19, [X31 + 0x10]
	0x03C182CC ADRP X20, 0x7CC000
	0x03C182D0 ADRP X21, 0x546000
	0x03C182D4 LDRB W8, [X20 + 0xBB4]
	0x03C182D8 LDR X21, [X21 + 0xEF8]
	0x03C182DC MOV X19, X0
	0x03C182E0 TBNZ X8, 0x0, 0x3C182F8
	0x03C182E4 ADRP X0, 0x546000
	0x03C182E8 LDR X0, [X0 + 0xEF8]
	0x03C182EC BL 0x1C16CF4
	0x03C182F0 MOVZ W8, 0x1
	0x03C182F4 STRB W8, [X20 + 0xBB4]
	0x03C182F8 LDR X4, [X21]
	0x03C182FC MOV X0, X19
	0x03C18300 LDP X20, X19, [X31 + 0x10]
	0x03C18304 MOVZ W1, 0x3
	0x03C18308 MOVZ W2, 0x2
	0x03C1830C MOVZ W3, 0x4
	0x03C18310 LDP X30, X21, [X31], #0x20
	0x03C18314 B 0x2219408
	0x03C18318 STR X30, [X31 - 0x30]!
	0x03C1831C STP X22, X21, [X31 + 0x10]
	0x03C18320 STP X20, X19, [X31 + 0x20]
	0x03C18324 ADRP X21, 0x7CC000
	0x03C18328 ADRP X22, 0x546000
	0x03C1832C LDRB W8, [X21 + 0xBB5]
	0x03C18330 LDR X22, [X22 + 0xF00]
	0x03C18334 MOV X19, X1
	0x03C18338 MOV X20, X0
	0x03C1833C TBNZ X8, 0x0, 0x3C18354
	0x03C18340 ADRP X0, 0x546000
	0x03C18344 LDR X0, [X0 + 0xF00]
	0x03C18348 BL 0x1C16CF4
	0x03C1834C MOVZ W8, 0x1
	0x03C18350 STRB W8, [X21 + 0xBB5]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X28, 0x7CD000
	013 Move X8, [X28+2824]
	014 Move W27, [X31+96]
	015 Move W23, W7
	016 Move W19, W6
	017 Move W20, W5
	018 Move X21, X4
	019 Move W22, W3
	020 Move W24, W2
	021 Move W25, W1
	022 Move X26, X0
	023 Compare X8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, -51335168
	026 Add X0, X0, 3894
	027 Call 0x1C17CB8
	028 Move X8, X0
	029 Move [X28+2824], X0
	030 And W7, W23, 1
	031 Move [X31+96], W27
	032 Move X0, X26
	033 Move W1, W25
	034 Move W2, W24
	035 Move W3, W22
	036 Move X4, X21
	037 Move W5, W20
	038 Move W6, W19
	039 Move X20, [X31+80]
	040 Move X19, [X31+88]
	041 Move X22, [X31+64]
	042 Move X21, [X31+72]
	043 Move X24, [X31+48]
	044 Move X23, [X31+56]
	045 Move X26, [X31+32]
	046 Move X25, [X31+40]
	047 Move X28, [X31+16]
	048 Move X27, [X31+24]
	049 Move X30, [X31+96]
	050 CallNoReturn X8

Method: System.Void SetIndicesNativeArrayImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.IntPtr indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)

Disassembly:
	0x03C18354 LDR X6, [X22]
	0x03C18358 MOV X0, X20
	0x03C1835C MOV X4, X19
	0x03C18360 LDP X20, X19, [X31 + 0x20]
	0x03C18364 LDP X22, X21, [X31 + 0x10]
	0x03C18368 MOVZ W1, 0x3
	0x03C1836C MOVZ W2, 0x2
	0x03C18370 MOVZ W3, 0x4
	0x03C18374 MOV W5, W31
	0x03C18378 LDR X30, [X31], #0x30
	0x03C1837C B 0x221A040
	0x03C18380 STR X30, [X31 - 0x30]!
	0x03C18384 STP X22, X21, [X31 + 0x10]
	0x03C18388 STP X20, X19, [X31 + 0x20]
	0x03C1838C ADRP X21, 0x7CC000
	0x03C18390 ADRP X22, 0x546000
	0x03C18394 LDRB W8, [X21 + 0xBB6]
	0x03C18398 LDR X22, [X22 + 0xF08]
	0x03C1839C MOV X19, X1
	0x03C183A0 MOV X20, X0
	0x03C183A4 TBNZ X8, 0x0, 0x3C183BC
	0x03C183A8 ADRP X0, 0x546000
	0x03C183AC LDR X0, [X0 + 0xF08]
	0x03C183B0 BL 0x1C16CF4
	0x03C183B4 MOVZ W8, 0x1
	0x03C183B8 STRB W8, [X21 + 0xBB6]
	0x03C183BC LDR X1, [X22]
	0x03C183C0 MOV X0, X19
	0x03C183C4 BL 0x222CDC4
	0x03C183C8 MOV W3, W0
	0x03C183CC MOV X0, X20
	0x03C183D0 MOV X1, X19
	0x03C183D4 LDP X20, X19, [X31 + 0x20]
	0x03C183D8 LDP X22, X21, [X31 + 0x10]
	0x03C183DC MOV W2, W31
	0x03C183E0 MOV W4, W31
	0x03C183E4 LDR X30, [X31], #0x30
	0x03C183E8 B 0x3C183F4
	0x03C183EC MOV W4, W31

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X28, 0x7CD000
	013 Move X8, [X28+2832]
	014 Move W27, [X31+96]
	015 Move W23, W7
	016 Move W19, W6
	017 Move W20, W5
	018 Move X21, X4
	019 Move W22, W3
	020 Move W24, W2
	021 Move W25, W1
	022 Move X26, X0
	023 Compare X8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, -51437568
	026 Add X0, X0, 137
	027 Call 0x1C17CB8
	028 Move X8, X0
	029 Move [X28+2832], X0
	030 And W7, W23, 1
	031 Move [X31+96], W27
	032 Move X0, X26
	033 Move W1, W25
	034 Move W2, W24
	035 Move W3, W22
	036 Move X4, X21
	037 Move W5, W20
	038 Move W6, W19
	039 Move X20, [X31+80]
	040 Move X19, [X31+88]
	041 Move X22, [X31+64]
	042 Move X21, [X31+72]
	043 Move X24, [X31+48]
	044 Move X23, [X31+56]
	045 Move X26, [X31+32]
	046 Move X25, [X31+40]
	047 Move X28, [X31+16]
	048 Move X27, [X31+24]
	049 Move X30, [X31+96]
	050 CallNoReturn X8

Method: System.Void PrintErrorCantAccessChannel(UnityEngine.Rendering.VertexAttribute ch)

Disassembly:
	0x03C183F0 B 0x3C183F4
	0x03C183F4 STP X30, X25, [X31 - 0x40]!
	0x03C183F8 STP X24, X23, [X31 + 0x10]
	0x03C183FC STP X22, X21, [X31 + 0x20]
	0x03C18400 STP X20, X19, [X31 + 0x30]
	0x03C18404 ADRP X24, 0x7CC000
	0x03C18408 ADRP X25, 0x546000
	0x03C1840C LDRB W8, [X24 + 0xBB7]
	0x03C18410 LDR X25, [X25 + 0xF10]
	0x03C18414 MOV W19, W4
	0x03C18418 MOV W20, W3
	0x03C1841C MOV W21, W2
	0x03C18420 MOV X22, X1
	0x03C18424 MOV X23, X0
	0x03C18428 TBNZ X8, 0x0, 0x3C18440
	0x03C1842C ADRP X0, 0x546000
	0x03C18430 LDR X0, [X0 + 0xF10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2840]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51408896
	012 Add X0, X0, 4087
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2840], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean HasVertexAttribute(UnityEngine.Rendering.VertexAttribute attr)

Disassembly:
	0x03C18434 BL 0x1C16CF4
	0x03C18438 MOVZ W8, 0x1
	0x03C1843C STRB W8, [X24 + 0xBB7]
	0x03C18440 LDR X6, [X25]
	0x03C18444 MOV X0, X23
	0x03C18448 MOV X2, X22
	0x03C1844C MOV W3, W21
	0x03C18450 MOV W4, W20
	0x03C18454 MOV W5, W19
	0x03C18458 LDP X20, X19, [X31 + 0x30]
	0x03C1845C LDP X22, X21, [X31 + 0x20]
	0x03C18460 LDP X24, X23, [X31 + 0x10]
	0x03C18464 MOV W1, W31
	0x03C18468 LDP X30, X25, [X31], #0x40
	0x03C1846C B 0x221A580
	0x03C18470 SUB X31, X31, 0x30
	0x03C18474 STP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2848]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51343360
	012 Add X0, X0, 2300
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2848], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C18478 STP X20, X19, [X31 + 0x20]
	0x03C1847C MOV X19, X1
	0x03C18480 MOV X20, X0
	0x03C18484 MOV X0, X1
	0x03C18488 MOV X1, X31
	0x03C1848C BL 0x3C36C34
	0x03C18490 MOV W21, W0
	0x03C18494 MOV X0, X19
	0x03C18498 MOV X1, X31
	0x03C1849C BL 0x3C36C34
	0x03C184A0 MOV W5, W0
	0x03C184A4 MOVZ W3, 0x3
	0x03C184A8 MOV X0, X20
	0x03C184AC MOV W1, W31
	0x03C184B0 MOV W2, W31
	0x03C184B4 MOV X4, X19
	0x03C184B8 MOV W6, W31
	0x03C184BC MOV W7, W21
	0x03C184C0 STR W31, [X31]
	0x03C184C4 BL 0x3C17C28
	0x03C184C8 LDP X20, X19, [X31 + 0x20]
	0x03C184CC LDP X30, X21, [X31 + 0x10]
	0x03C184D0 ADD X31, X31, 0x30
	0x03C184D4 RET
	0x03C184D8 SUB X31, X31, 0x40
	0x03C184DC STR X30, [X31 + 0x10]
	0x03C184E0 STP X22, X21, [X31 + 0x20]
	0x03C184E4 STP X20, X19, [X31 + 0x30]
	0x03C184E8 MOV X21, X1
	0x03C184EC MOV X22, X0
	0x03C184F0 MOV X0, X1
	0x03C184F4 MOV X1, X31
	0x03C184F8 MOV W19, W3
	0x03C184FC MOV W20, W2
	0x03C18500 BL 0x3C36C34
	0x03C18504 MOV W5, W0
	0x03C18508 MOVZ W3, 0x3
	0x03C1850C MOV X0, X22
	0x03C18510 MOV W1, W31

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X28, 0x7CD000
	013 Move X8, [X28+2856]
	014 Move W27, [X31+96]
	015 Move W19, W7
	016 Move W20, W6
	017 Move W21, W5
	018 Move X22, X4
	019 Move W23, W3
	020 Move W24, W2
	021 Move W25, W1
	022 Move X26, X0
	023 Compare X8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, -51445760
	026 Add X0, X0, 100
	027 Call 0x1C17CB8
	028 Move X8, X0
	029 Move [X28+2856], X0
	030 Move [X31+96], W27
	031 Move X0, X26
	032 Move W1, W25
	033 Move W2, W24
	034 Move W3, W23
	035 Move X4, X22
	036 Move W5, W21
	037 Move W6, W20
	038 Move W7, W19
	039 Move X20, [X31+80]
	040 Move X19, [X31+88]
	041 Move X22, [X31+64]
	042 Move X21, [X31+72]
	043 Move X24, [X31+48]
	044 Move X23, [X31+56]
	045 Move X26, [X31+32]
	046 Move X25, [X31+40]
	047 Move X28, [X31+16]
	048 Move X27, [X31+24]
	049 Move X30, [X31+96]
	050 CallNoReturn X8

Method: System.Array GetAllocArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)

Disassembly:
	0x03C18514 MOV W2, W31
	0x03C18518 MOV X4, X21
	0x03C1851C MOV W6, W20
	0x03C18520 MOV W7, W19
	0x03C18524 STR W31, [X31]
	0x03C18528 BL 0x3C17C28
	0x03C1852C LDP X20, X19, [X31 + 0x30]
	0x03C18530 LDP X22, X21, [X31 + 0x20]
	0x03C18534 LDR X30, [X31 + 0x10]
	0x03C18538 ADD X31, X31, 0x40
	0x03C1853C RET
	0x03C18540 SUB X31, X31, 0x40
	0x03C18544 STP X30, X23, [X31 + 0x10]
	0x03C18548 STP X22, X21, [X31 + 0x20]
	0x03C1854C STP X20, X19, [X31 + 0x30]
	0x03C18550 MOV X22, X1
	0x03C18554 MOV X23, X0
	0x03C18558 MOV X0, X1
	0x03C1855C MOV X1, X31
	0x03C18560 MOV W19, W4
	0x03C18564 MOV W20, W3
	0x03C18568 MOV W21, W2
	0x03C1856C BL 0x3C36C34

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7CD000
	008 Move X4, [X23+2864]
	009 Move W19, W3
	010 Move W20, W2
	011 Move W21, W1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51511296
	016 Add X0, X0, 89
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+2864], X0
	020 Move X0, X22
	021 Move W1, W21
	022 Move W2, W20
	023 Move W3, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Void GetArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values)

Disassembly:
	0x03C18570 MOV W5, W0
	0x03C18574 MOVZ W3, 0x3
	0x03C18578 MOV X0, X23
	0x03C1857C MOV W1, W31
	0x03C18580 MOV W2, W31
	0x03C18584 MOV X4, X22
	0x03C18588 MOV W6, W21
	0x03C1858C MOV W7, W20
	0x03C18590 STR W19, [X31]
	0x03C18594 BL 0x3C17C28
	0x03C18598 LDP X20, X19, [X31 + 0x30]
	0x03C1859C LDP X22, X21, [X31 + 0x20]
	0x03C185A0 LDP X30, X23, [X31 + 0x10]
	0x03C185A4 ADD X31, X31, 0x40
	0x03C185A8 RET
	0x03C185AC STR X30, [X31 - 0x30]!
	0x03C185B0 STP X22, X21, [X31 + 0x10]
	0x03C185B4 STP X20, X19, [X31 + 0x20]
	0x03C185B8 ADRP X21, 0x7CC000
	0x03C185BC ADRP X22, 0x546000
	0x03C185C0 LDRB W8, [X21 + 0xBB8]
	0x03C185C4 LDR X22, [X22 + 0xF08]
	0x03C185C8 MOV X19, X1
	0x03C185CC MOV X20, X0
	0x03C185D0 TBNZ X8, 0x0, 0x3C185E8
	0x03C185D4 ADRP X0, 0x546000
	0x03C185D8 LDR X0, [X0 + 0xF08]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x7CD000
	009 Move X5, [X24+2872]
	010 Move X19, X4
	011 Move W20, W3
	012 Move W21, W2
	013 Move W22, W1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51466240
	018 Add X0, X0, 3854
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+2872], X0
	022 Move X0, X23
	023 Move W1, W22
	024 Move W2, W21
	025 Move W3, W20
	026 Move X4, X19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Boolean get_canAccess()

Disassembly:
	0x03C185DC BL 0x1C16CF4
	0x03C185E0 MOVZ W8, 0x1
	0x03C185E4 STRB W8, [X21 + 0xBB8]
	0x03C185E8 LDR X1, [X22]
	0x03C185EC MOV X0, X19
	0x03C185F0 BL 0x222CDC4
	0x03C185F4 MOV W3, W0
	0x03C185F8 MOV X0, X20
	0x03C185FC MOV X1, X19
	0x03C18600 LDP X20, X19, [X31 + 0x20]
	0x03C18604 LDP X22, X21, [X31 + 0x10]
	0x03C18608 MOV W2, W31
	0x03C1860C MOV W4, W31
	0x03C18610 LDR X30, [X31], #0x30
	0x03C18614 B 0x3C18620

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CD000
	005 Move X1, [X20+2880]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51453952
	010 Add X0, X0, 581
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2880], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_vertexCount()

Disassembly:
	0x03C18618 MOV W4, W31
	0x03C1861C B 0x3C18620
	0x03C18620 STP X30, X25, [X31 - 0x40]!
	0x03C18624 STP X24, X23, [X31 + 0x10]
	0x03C18628 STP X22, X21, [X31 + 0x20]
	0x03C1862C STP X20, X19, [X31 + 0x30]
	0x03C18630 ADRP X24, 0x7CC000
	0x03C18634 ADRP X25, 0x546000
	0x03C18638 LDRB W8, [X24 + 0xBB9]
	0x03C1863C LDR X25, [X25 + 0xF10]
	0x03C18640 MOV W19, W4
	0x03C18644 MOV W20, W3
	0x03C18648 MOV W21, W2
	0x03C1864C MOV X22, X1
	0x03C18650 MOV X23, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CD000
	005 Move X1, [X20+2888]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51310592
	010 Add X0, X0, 1777
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2888], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_subMeshCount()

Disassembly:
	0x03C10650 LDR X0, [X8 + 0x40]
	0x03C10654 LDR X1, [X8 + 0x28]
	0x03C10658 LDP X20, X19, [X31 + 0x10]
	0x03C1065C LDR X30, [X31], #0x20
	0x03C10660 BR X2
	0x03C10664 LDP X20, X19, [X31 + 0x10]
	0x03C10668 LDR X30, [X31], #0x20
	0x03C1066C RET
	0x03C10670 STR X30, [X31 - 0x20]!
	0x03C10674 STP X20, X19, [X31 + 0x10]
	0x03C10678 ADRP X19, 0x7D4000
	0x03C1067C ADRP X20, 0x54E000
	0x03C10680 LDRB W8, [X19 + 0x4C2]
	0x03C10684 LDR X20, [X20 + 0xD60]
	0x03C10688 TBNZ X8, 0x0, 0x3C106A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D5000
	005 Move X1, [X20+2896]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51396608
	010 Add X0, X0, 373
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2896], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_subMeshCount(System.Int32 value)

Disassembly:
	0x03C18654 TBNZ X8, 0x0, 0x3C1866C
	0x03C18658 ADRP X0, 0x546000
	0x03C1865C LDR X0, [X0 + 0xF10]
	0x03C18660 BL 0x1C16CF4
	0x03C18664 MOVZ W8, 0x1
	0x03C18668 STRB W8, [X24 + 0xBB9]
	0x03C1866C LDR X6, [X25]
	0x03C18670 MOV X0, X23
	0x03C18674 MOV X2, X22
	0x03C18678 MOV W3, W21
	0x03C1867C MOV W4, W20
	0x03C18680 MOV W5, W19
	0x03C18684 LDP X20, X19, [X31 + 0x30]
	0x03C18688 LDP X22, X21, [X31 + 0x20]
	0x03C1868C LDP X24, X23, [X31 + 0x10]
	0x03C18690 MOVZ W1, 0x1
	0x03C18694 LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2904]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51429376
	012 Add X0, X0, 410
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2904], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Rendering.SubMeshDescriptor GetSubMesh(System.Int32 index)

Disassembly:
	0x03C18698 B 0x221A580
	0x03C1869C STR X30, [X31 - 0x30]!
	0x03C186A0 STP X22, X21, [X31 + 0x10]
	0x03C186A4 STP X20, X19, [X31 + 0x20]
	0x03C186A8 ADRP X21, 0x7CC000
	0x03C186AC ADRP X22, 0x546000
	0x03C186B0 LDRB W8, [X21 + 0xBBA]
	0x03C186B4 LDR X22, [X22 + 0xF18]
	0x03C186B8 MOV X19, X1
	0x03C186BC MOV X20, X0
	0x03C186C0 TBNZ X8, 0x0, 0x3C186D8
	0x03C186C4 ADRP X0, 0x546000
	0x03C186C8 LDR X0, [X0 + 0xF18]
	0x03C186CC BL 0x1C16CF4
	0x03C186D0 MOVZ W8, 0x1
	0x03C186D4 STRB W8, [X21 + 0xBBA]
	0x03C186D8 LDR X1, [X22]
	0x03C186DC MOV X0, X19
	0x03C186E0 BL 0x222CDF8
	0x03C186E4 MOV W3, W0
	0x03C186E8 MOV X0, X20
	0x03C186EC MOV X1, X19
	0x03C186F0 LDP X20, X19, [X31 + 0x20]
	0x03C186F4 LDP X22, X21, [X31 + 0x10]
	0x03C186F8 MOV W2, W31
	0x03C186FC MOV W4, W31
	0x03C18700 LDR X30, [X31], #0x30
	0x03C18704 B 0x3C18710
	0x03C18708 MOV W4, W31
	0x03C1870C B 0x3C18710
	0x03C18710 STP X30, X25, [X31 - 0x40]!

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0x7CD000
	008 Move X19, X8
	009 Move X8, [X22+3032]
	010 Move W20, W1
	011 Move X21, X0
	012 NotImplemented "Instruction MOVI not yet implemented."
	013 Move [X31+16], V0
	014 Move [X31+24], V0
	015 Move [X31], V0
	016 Compare X8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, -51474432
	019 Add X0, X0, 3774
	020 Call 0x1C17CB8
	021 Move X8, X0
	022 Move [X22+3032], X0
	023 Add X2, X31, 0
	024 Move X0, X21
	025 Move W1, W20
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move V1, [X31+16]
	028 Move V0, [X31+32]
	029 Move V2, [X31]
	030 Move X22, [X31+64]
	031 Move X21, [X31+72]
	032 Move X30, [X31+48]
	033 Move [X19+16], V1
	034 Move [X19+24], V0
	035 Move [X19], V2
	036 Move X20, [X31+80]
	037 Move X19, [X31+88]
	038 Add X31, X31, 96
	039 Return X0

Method: UnityEngine.Bounds get_bounds()

Disassembly:
	0x03C18768 MOV W3, W21
	0x03C1876C MOV W4, W20
	0x03C18770 MOV W5, W19
	0x03C18774 LDP X20, X19, [X31 + 0x30]
	0x03C18778 LDP X22, X21, [X31 + 0x20]
	0x03C1877C LDP X24, X23, [X31 + 0x10]
	0x03C18780 MOVZ W1, 0x2
	0x03C18784 LDP X30, X25, [X31], #0x40
	0x03C18788 B 0x221A63C
	0x03C1878C STR X30, [X31 - 0x30]!
	0x03C18790 STP X22, X21, [X31 + 0x10]
	0x03C18794 STP X20, X19, [X31 + 0x20]
	0x03C18798 ADRP X21, 0x7CC000
	0x03C1879C ADRP X22, 0x546000
	0x03C187A0 LDRB W8, [X21 + 0xBBC]
	0x03C187A4 LDR X22, [X22 + 0xF28]
	0x03C187A8 MOV X19, X1
	0x03C187AC MOV X20, X0
	0x03C187B0 TBNZ X8, 0x0, 0x3C187C8
	0x03C187B4 ADRP X0, 0x546000
	0x03C187B8 LDR X0, [X0 + 0xF28]
	0x03C187BC BL 0x1C16CF4
	0x03C187C0 MOVZ W8, 0x1
	0x03C187C4 STRB W8, [X21 + 0xBBC]
	0x03C187C8 LDR X1, [X22]
	0x03C187CC MOV X0, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x7CD000
	007 Move X19, X8
	008 Move X8, [X21+3040]
	009 Move X20, X0
	010 Move [X31+8], X31
	011 Move [X31+16], X31
	012 Move [X31+24], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51494912
	016 Add X0, X0, 507
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X21+3040], X0
	020 Add X1, X31, 8
	021 Move X0, X20
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move X8, [X31+24]
	024 NotImplemented "Instruction LDUR not yet implemented."
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Move [X19+16], X8
	028 Move [X19], V0
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Add X31, X31, 64
	032 Return X0

Method: System.Void set_bounds(UnityEngine.Bounds value)

Disassembly:
	0x03C18814 ADRP X25, 0x546000
	0x03C18818 LDRB W8, [X24 + 0xBBD]
	0x03C1881C LDR X25, [X25 + 0xF30]
	0x03C18820 MOV W19, W4
	0x03C18824 MOV W20, W3
	0x03C18828 MOV W21, W2
	0x03C1882C MOV X22, X1
	0x03C18830 MOV X23, X0
	0x03C18834 TBNZ X8, 0x0, 0x3C1884C
	0x03C18838 ADRP X0, 0x546000
	0x03C1883C LDR X0, [X0 + 0xF30]
	0x03C18840 BL 0x1C16CF4
	0x03C18844 MOVZ W8, 0x1
	0x03C18848 STRB W8, [X24 + 0xBBD]
	0x03C1884C LDR X6, [X25]
	0x03C18850 MOV X0, X23
	0x03C18854 MOV X2, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+3048]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51474432
	012 Add X0, X0, 3867
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3048], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void ClearImpl(System.Boolean keepVertexLayout)

Disassembly:
	0x03C1889C MOV X20, X0
	0x03C188A0 TBNZ X8, 0x0, 0x3C188B8
	0x03C188A4 ADRP X0, 0x546000
	0x03C188A8 LDR X0, [X0 + 0xF38]
	0x03C188AC BL 0x1C16CF4
	0x03C188B0 MOVZ W8, 0x1
	0x03C188B4 STRB W8, [X21 + 0xBBE]
	0x03C188B8 LDR X1, [X22]
	0x03C188BC MOV X0, X19
	0x03C188C0 BL 0x222CD28
	0x03C188C4 MOV W3, W0
	0x03C188C8 MOV X0, X20
	0x03C188CC MOV X1, X19
	0x03C188D0 LDP X20, X19, [X31 + 0x20]
	0x03C188D4 LDP X22, X21, [X31 + 0x10]
	0x03C188D8 MOV W2, W31
	0x03C188DC MOV W4, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2912]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51466240
	012 Add X0, X0, 4005
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2912], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void RecalculateBoundsImpl(UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C188E0 LDR X30, [X31], #0x30
	0x03C188E4 B 0x3C188F0
	0x03C188E8 MOV W4, W31
	0x03C188EC B 0x3C188F0
	0x03C188F0 SUB X31, X31, 0x50
	0x03C188F4 STP X30, X25, [X31 + 0x10]
	0x03C188F8 STP X24, X23, [X31 + 0x20]
	0x03C188FC STP X22, X21, [X31 + 0x30]
	0x03C18900 STP X20, X19, [X31 + 0x40]
	0x03C18904 ADRP X24, 0x7CC000
	0x03C18908 ADRP X25, 0x546000
	0x03C1890C LDRB W8, [X24 + 0xBBF]
	0x03C18910 LDR X25, [X25 + 0xF40]
	0x03C18914 MOV W19, W4
	0x03C18918 MOV W20, W3
	0x03C1891C MOV W21, W2
	0x03C18920 MOV X22, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2920]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51519488
	012 Add X0, X0, 581
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2920], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void RecalculateNormalsImpl(UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C18924 MOV X23, X0
	0x03C18928 TBNZ X8, 0x0, 0x3C18940
	0x03C1892C ADRP X0, 0x546000
	0x03C18930 LDR X0, [X0 + 0xF40]
	0x03C18934 BL 0x1C16CF4
	0x03C18938 MOVZ W8, 0x1
	0x03C1893C STRB W8, [X24 + 0xBBF]
	0x03C18940 LDR X8, [X25]
	0x03C18944 MOVZ W1, 0x3
	0x03C18948 MOVZ W2, 0x2
	0x03C1894C MOVZ W3, 0x4
	0x03C18950 MOV X0, X23
	0x03C18954 MOV X4, X22
	0x03C18958 MOV W5, W21
	0x03C1895C MOV W6, W20
	0x03C18960 MOV W7, W19
	0x03C18964 STR X8, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2928]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51478528
	012 Add X0, X0, 221
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2928], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void RecalculateTangentsImpl(UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C18968 BL 0x221A7B8
	0x03C1896C LDP X20, X19, [X31 + 0x40]
	0x03C18970 LDP X22, X21, [X31 + 0x30]
	0x03C18974 LDP X24, X23, [X31 + 0x20]
	0x03C18978 LDP X30, X25, [X31 + 0x10]
	0x03C1897C ADD X31, X31, 0x50
	0x03C18980 RET
	0x03C18984 STP X30, X23, [X31 - 0x30]!
	0x03C18988 STP X22, X21, [X31 + 0x10]
	0x03C1898C STP X20, X19, [X31 + 0x20]
	0x03C18990 ADRP X22, 0x7CC000
	0x03C18994 ADRP X23, 0x546000
	0x03C18998 LDRB W8, [X22 + 0xBC0]
	0x03C1899C LDR X23, [X23 + 0xF48]
	0x03C189A0 MOV X19, X2
	0x03C189A4 MOV W20, W1
	0x03C189A8 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2936]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51429376
	012 Add X0, X0, 459
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2936], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void MarkDynamicImpl()

Disassembly:
	0x03C189AC TBNZ X8, 0x0, 0x3C189C4
	0x03C189B0 ADRP X0, 0x546000
	0x03C189B4 LDR X0, [X0 + 0xF48]
	0x03C189B8 BL 0x1C16CF4
	0x03C189BC MOVZ W8, 0x1
	0x03C189C0 STRB W8, [X22 + 0xBC0]
	0x03C189C4 LDR X1, [X23]
	0x03C189C8 MOV X0, X19
	0x03C189CC BL 0x222CD90
	0x03C189D0 MOV W4, W0
	0x03C189D4 MOV X0, X21
	0x03C189D8 MOV W1, W20
	0x03C189DC MOV X2, X19
	0x03C189E0 LDP X20, X19, [X31 + 0x20]
	0x03C189E4 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CD000
	005 Move X1, [X20+2944]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51425280
	010 Add X0, X0, 3635
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2944], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void UploadMeshDataImpl(System.Boolean markNoLongerReadable)

Disassembly:
	0x03C189E8 MOV W3, W31
	0x03C189EC MOV W5, W31
	0x03C189F0 LDP X30, X23, [X31], #0x30
	0x03C189F4 B 0x3C18AF8
	0x03C189F8 MOV W5, W31
	0x03C189FC B 0x3C18AF8
	0x03C18A00 STP X30, X23, [X31 - 0x30]!
	0x03C18A04 STP X22, X21, [X31 + 0x10]
	0x03C18A08 STP X20, X19, [X31 + 0x20]
	0x03C18A0C ADRP X22, 0x7CC000
	0x03C18A10 ADRP X23, 0x546000
	0x03C18A14 LDRB W8, [X22 + 0xBC1]
	0x03C18A18 LDR X23, [X23 + 0xF08]
	0x03C18A1C MOV X19, X2
	0x03C18A20 MOV W20, W1
	0x03C18A24 MOV X21, X0
	0x03C18A28 TBNZ X8, 0x0, 0x3C18A40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2952]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51326976
	012 Add X0, X0, 2991
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2952], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.MeshTopology GetTopologyImpl(System.Int32 submesh)

Disassembly:
	0x03C18A2C ADRP X0, 0x546000
	0x03C18A30 LDR X0, [X0 + 0xF08]
	0x03C18A34 BL 0x1C16CF4
	0x03C18A38 MOVZ W8, 0x1
	0x03C18A3C STRB W8, [X22 + 0xBC1]
	0x03C18A40 LDR X1, [X23]
	0x03C18A44 MOV X0, X19
	0x03C18A48 BL 0x222CDC4
	0x03C18A4C MOV W4, W0
	0x03C18A50 MOV X0, X21
	0x03C18A54 MOV W1, W20
	0x03C18A58 MOV X2, X19
	0x03C18A5C LDP X20, X19, [X31 + 0x20]
	0x03C18A60 LDP X22, X21, [X31 + 0x10]
	0x03C18A64 MOV W3, W31
	0x03C18A68 MOV W5, W31
	0x03C18A6C LDP X30, X23, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+2960]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51503104
	012 Add X0, X0, 194
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2960], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void CombineMeshesImpl(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)

Disassembly:
	0x03C18A70 B 0x3C18B84
	0x03C18A74 MOV W5, W31
	0x03C18A78 B 0x3C18B84
	0x03C18A7C STP X30, X23, [X31 - 0x30]!
	0x03C18A80 STP X22, X21, [X31 + 0x10]
	0x03C18A84 STP X20, X19, [X31 + 0x20]
	0x03C18A88 ADRP X22, 0x7CC000
	0x03C18A8C ADRP X23, 0x546000
	0x03C18A90 LDRB W8, [X22 + 0xBC2]
	0x03C18A94 LDR X23, [X23 + 0xF18]
	0x03C18A98 MOV X19, X2
	0x03C18A9C MOV W20, W1
	0x03C18AA0 MOV X21, X0
	0x03C18AA4 TBNZ X8, 0x0, 0x3C18ABC
	0x03C18AA8 ADRP X0, 0x546000
	0x03C18AAC LDR X0, [X0 + 0xF18]
	0x03C18AB0 BL 0x1C16CF4
	0x03C18AB4 MOVZ W8, 0x1
	0x03C18AB8 STRB W8, [X22 + 0xBC2]
	0x03C18ABC LDR X1, [X23]
	0x03C18AC0 MOV X0, X19
	0x03C18AC4 BL 0x222CDF8
	0x03C18AC8 MOV W4, W0
	0x03C18ACC MOV X0, X21
	0x03C18AD0 MOV W1, W20
	0x03C18AD4 MOV X2, X19
	0x03C18AD8 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x7CD000
	009 Move X5, [X24+2968]
	010 Move W19, W4
	011 Move W21, W3
	012 Move W22, W2
	013 Move X20, X1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51429376
	018 Add X0, X0, 540
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+2968], X0
	022 And W2, W22, 1
	023 And W3, W21, 1
	024 And W4, W19, 1
	025 Move X0, X23
	026 Move X1, X20
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Void OptimizeImpl()

Disassembly:
	0x03C18ADC LDP X22, X21, [X31 + 0x10]
	0x03C18AE0 MOV W3, W31
	0x03C18AE4 MOV W5, W31
	0x03C18AE8 LDP X30, X23, [X31], #0x30
	0x03C18AEC B 0x3C18C10
	0x03C18AF0 MOV W5, W31
	0x03C18AF4 B 0x3C18C10
	0x03C18AF8 STR X30, [X31 - 0x50]!
	0x03C18AFC STP X26, X25, [X31 + 0x10]
	0x03C18B00 STP X24, X23, [X31 + 0x20]
	0x03C18B04 STP X22, X21, [X31 + 0x30]
	0x03C18B08 STP X20, X19, [X31 + 0x40]
	0x03C18B0C ADRP X25, 0x7CC000
	0x03C18B10 ADRP X26, 0x546000
	0x03C18B14 LDRB W8, [X25 + 0xBC3]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CD000
	005 Move X1, [X20+2976]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51445760
	010 Add X0, X0, 327
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2976], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Rendering.VertexAttribute GetUVChannel(System.Int32 uvIndex)

Disassembly:
	0x03C18B18 LDR X26, [X26 + 0xF50]
	0x03C18B1C MOV W19, W5
	0x03C18B20 MOV W20, W4
	0x03C18B24 MOV W21, W3
	0x03C18B28 MOV X22, X2
	0x03C18B2C MOV W23, W1
	0x03C18B30 MOV X24, X0
	0x03C18B34 TBNZ X8, 0x0, 0x3C18B4C
	0x03C18B38 ADRP X0, 0x546000
	0x03C18B3C LDR X0, [X0 + 0xF50]
	0x03C18B40 BL 0x1C16CF4
	0x03C18B44 MOVZ W8, 0x1
	0x03C18B48 STRB W8, [X25 + 0xBC3]
	0x03C18B4C LDR X7, [X26]
	0x03C18B50 MOV X0, X24
	0x03C18B54 MOV W1, W23
	0x03C18B58 MOV X3, X22
	0x03C18B5C MOV W4, W21
	0x03C18B60 MOV W5, W20
	0x03C18B64 MOV W6, W19
	0x03C18B68 LDP X20, X19, [X31 + 0x40]
	0x03C18B6C LDP X22, X21, [X31 + 0x30]
	0x03C18B70 LDP X24, X23, [X31 + 0x20]
	0x03C18B74 LDP X26, X25, [X31 + 0x10]
	0x03C18B78 MOVZ W2, 0x2
	0x03C18B7C LDR X30, [X31], #0x50
	0x03C18B80 B 0x221AB40
	0x03C18B84 STR X30, [X31 - 0x50]!
	0x03C18B88 STP X26, X25, [X31 + 0x10]

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Add W0, W0, 4
	003 Return X0
	004 Move [X31-32], X30
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move X0, 0x4E4000
	008 Move X0, [X0+1400]
	009 Call 0x1C17D08
	010 Call 0x1C17F10
	011 Move X19, X0
	012 Move X0, 0x547000
	013 Move X0, [X0+3672]
	014 Call 0x1C17D08
	015 Move X20, X0
	016 Move X0, 0x547000
	017 Move X0, [X0+3680]
	018 Call 0x1C17D08
	019 Move X2, X0
	020 Move X0, X19
	021 Move X1, X20
	022 Move X3, X31
	023 Call ArgumentException..ctor, X0, X1, X2
	024 Move X0, 0x547000
	025 Move X0, [X0+3688]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Int32 DefaultDimensionForChannel(UnityEngine.Rendering.VertexAttribute channel)

Disassembly:
	0x03C18B8C STP X24, X23, [X31 + 0x20]
	0x03C18B90 STP X22, X21, [X31 + 0x30]
	0x03C18B94 STP X20, X19, [X31 + 0x40]
	0x03C18B98 ADRP X25, 0x7CC000
	0x03C18B9C ADRP X26, 0x546000
	0x03C18BA0 LDRB W8, [X25 + 0xBC4]
	0x03C18BA4 LDR X26, [X26 + 0xF58]
	0x03C18BA8 MOV W19, W5
	0x03C18BAC MOV W20, W4
	0x03C18BB0 MOV W21, W3
	0x03C18BB4 MOV X22, X2
	0x03C18BB8 MOV W23, W1
	0x03C18BBC MOV X24, X0
	0x03C18BC0 TBNZ X8, 0x0, 0x3C18BD8
	0x03C18BC4 ADRP X0, 0x546000
	0x03C18BC8 LDR X0, [X0 + 0xF58]
	0x03C18BCC BL 0x1C16CF4
	0x03C18BD0 MOVZ W8, 0x1
	0x03C18BD4 STRB W8, [X25 + 0xBC4]
	0x03C18BD8 LDR X7, [X26]
	0x03C18BDC MOV X0, X24
	0x03C18BE0 MOV W1, W23
	0x03C18BE4 MOV X3, X22
	0x03C18BE8 MOV W4, W21
	0x03C18BEC MOV W5, W20
	0x03C18BF0 MOV W6, W19
	0x03C18BF4 LDP X20, X19, [X31 + 0x40]
	0x03C18BF8 LDP X22, X21, [X31 + 0x30]
	0x03C18BFC LDP X24, X23, [X31 + 0x20]
	0x03C18C00 LDP X26, X25, [X31 + 0x10]
	0x03C18C04 MOVZ W2, 0x3
	0x03C18C08 LDR X30, [X31], #0x50
	0x03C18C0C B 0x221AC4C
	0x03C18C10 STR X30, [X31 - 0x50]!
	0x03C18C14 STP X26, X25, [X31 + 0x10]
	0x03C18C18 STP X24, X23, [X31 + 0x20]
	0x03C18C1C STP X22, X21, [X31 + 0x30]
	0x03C18C20 STP X20, X19, [X31 + 0x40]
	0x03C18C24 ADRP X25, 0x7CC000

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move W0, 3
	003 Return X0
	004 Subtract W8, W0, 4
	005 NotImplemented "Instruction CMP not yet implemented."
	006 And W8, W0, 0xFFFFFFFE
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W0, 4
	009 Return X0
	010 Move W0, 2
	011 Return X0
	012 Move [X31-32], X30
	013 Move [X31+16], X20
	014 Move [X31+24], X19
	015 Move X0, 0x4E4000
	016 Move X0, [X0+1400]
	017 Call 0x1C17D08
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Move X0, 0x547000
	021 Move X0, [X0+3696]
	022 Call 0x1C17D08
	023 Move X20, X0
	024 Move X0, 0x50D000
	025 Move X0, [X0+56]
	026 Call 0x1C17D08
	027 Move X2, X0
	028 Move X0, X19
	029 Move X1, X20
	030 Move X3, X31
	031 Call ArgumentException..ctor, X0, X1, X2
	032 Move X0, 0x547000
	033 Move X0, [X0+3704]
	034 Call 0x1C17D08
	035 Move X1, X0
	036 Move X0, X19
	037 Call 0x1C17DEC

Method: T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)

Disassembly:
	0x0221A310 AND W7, W23, 0x1
	0x0221A314 MOV X0, X24
	0x0221A318 MOV W1, W22
	0x0221A31C MOV W2, W21
	0x0221A320 MOV W5, W20
	0x0221A324 MOV W6, W19
	0x0221A328 LDP X20, X19, [X31 + 0x40]
	0x0221A32C LDP X22, X21, [X31 + 0x30]
	0x0221A330 LDP X24, X23, [X31 + 0x20]
	0x0221A334 LDP X26, X25, [X31 + 0x10]
	0x0221A338 STR X31, [X31 + 0x58]
	0x0221A33C STR W27, [X31 + 0x50]
	0x0221A340 MOV W3, W31
	0x0221A344 LDP X30, X27, [X31], #0x50
	0x0221A348 B 0x3C17354
	0x0221A34C LDP X20, X19, [X31 + 0x40]
	0x0221A350 LDP X22, X21, [X31 + 0x30]
	0x0221A354 LDP X24, X23, [X31 + 0x20]
	0x0221A358 LDP X26, X25, [X31 + 0x10]
	0x0221A35C LDP X30, X27, [X31], #0x50
	0x0221A360 RET
	0x0221A364 BL 0x1C16F20
	0x0221A368 SUB X31, X31, 0x70
	0x0221A36C STP X2, X30, [X31 + 0x18]
	0x0221A370 STP X26, X25, [X31 + 0x30]
	0x0221A374 STP X24, X23, [X31 + 0x40]
	0x0221A378 STP X22, X21, [X31 + 0x50]
	0x0221A37C STP X20, X19, [X31 + 0x60]
	0x0221A380 LDR X24, [X31 + 0x78]
	0x0221A384 STR X1, [X31 + 0x10]
	0x0221A388 MOV W23, W7
	0x0221A38C MOV W22, W6
	0x0221A390 LDR X8, [X24 + 0x38]
	0x0221A394 MOV W21, W5
	0x0221A398 MOV W19, W4
	0x0221A39C MOV W20, W3
	0x0221A3A0 MOV X25, X0
	0x0221A3A4 CBNZ X8, 0x221A3B0
	0x0221A3A8 MOV X0, X24
	0x0221A3AC BL 0x1C5C6E0
	0x0221A3B0 MOV X0, X25
	0x0221A3B4 MOV W1, W22
	0x0221A3B8 MOV X2, X31
	0x0221A3BC BL 0x3C18F34
	0x0221A3C0 TBZ X0, 0x0, 0x221A468
	0x0221A3C4 LDR X8, [X24 + 0x38]
	0x0221A3C8 LDR X0, [X8]
	0x0221A3CC LDR X8, [X0]
	0x0221A3D0 BLR X8
	0x0221A3D4 MOV W26, W0
	0x0221A3D8 CMP W0, 0x2
	0x0221A3DC B.EQ 0x221A3E8
	0x0221A3E0 CMP W26, 0x4
	0x0221A3E4 B.NE 0x221A488
	0x0221A3E8 LDR X8, [X24 + 0x38]
	0x0221A3EC ADD X0, X31, 0x10
	0x0221A3F0 LDR X1, [X8 + 0x10]
	0x0221A3F4 LDR X8, [X1]
	0x0221A3F8 BLR X8
	0x0221A3FC MOV W1, W0
	0x0221A400 MOV X0, X25
	0x0221A404 MOV W2, W20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+56]
	008 Move X19, X4
	009 Move W21, W3
	010 Move W22, W2
	011 Move W20, W1
	012 Move X23, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {17}
	015 Move X0, X19
	016 Call 0x1C5D6E0
	017 Move X0, X23
	018 Move X1, X31
	019 Call Mesh.get_canAccess, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {59}
	024 Move X0, X23
	025 Move W1, W20
	026 Move X2, X31
	027 Call Mesh.HasVertexAttribute, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {63}
	032 Move X0, X23
	033 Move W1, W20
	034 Move W2, W22
	035 Move W3, W21
	036 Move X4, X31
	037 Call Mesh.GetAllocArrayFromChannelImpl, X0, X1, X2, X3
	038 Move X8, [X19+56]
	039 Move X20, X0
	040 Move X19, [X8]
	041 Move W8, [X19+309]
	042 Move TEMP, X8
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {49}
	046 Move X0, X19
	047 Call 0x1C5D684
	048 Move X19, X0
	049 Compare X20, 0
	050 JumpIfEqual {80}
	051 Move X0, X20
	052 Move X1, X19
	053 Call 0x1C17E00
	054 Compare X0, 0
	055 JumpIfNotEqual {81}
	056 Move X0, X20
	057 Move X1, X19
	058 Call 0x1C181E0
	059 Move X0, X23
	060 Move W1, W20
	061 Move X2, X31
	062 Call Mesh.PrintErrorCantAccessChannel, X0, X1
	063 Move X8, [X19+56]
	064 Move X0, [X8+8]
	065 Move W8, [X0+309]
	066 Move TEMP, X8
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {71}
	070 Call 0x1C5D684
	071 Move X20, [X31+32]
	072 Move X19, [X31+40]
	073 Move X22, [X31+16]
	074 Move X21, [X31+24]
	075 Move W1, W31
	076 Move X30, [X31+48]
	077 Move X23, [X31+56]
	078 Call 0x1C17D6C
	079 Return X0
	080 Move X0, X31
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Move X23, [X31+56]
	087 Return X0

Method: T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel)

Disassembly:
	0x0221A168 MOV X24, X1
	0x0221A16C MOV X25, X0
	0x0221A170 CBNZ X8, 0x221A184
	0x0221A174 MOV X0, X7
	0x0221A178 MOV X26, X7
	0x0221A17C BL 0x1C5C6E0
	0x0221A180 LDR X8, [X26 + 0x38]
	0x0221A184 LDR X8, [X8 + 0x18]
	0x0221A188 AND W7, W23, 0x1
	0x0221A18C MOV X0, X25
	0x0221A190 MOV X1, X24
	0x0221A194 MOV X2, X21
	0x0221A198 MOV W3, W31
	0x0221A19C MOV W4, W21
	0x0221A1A0 MOV W5, W20
	0x0221A1A4 MOV W6, W19
	0x0221A1A8 STR X8, [X31 + 0x8]
	0x0221A1AC STR W22, [X31]
	0x0221A1B0 BL 0x221A284
	0x0221A1B4 LDP X20, X19, [X31 + 0x50]
	0x0221A1B8 LDP X22, X21, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X20, X2
	007 Move W19, W1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X20
	012 Call 0x1C5D6E0
	013 Move W0, W19
	014 Move X1, X31
	015 Call Mesh.DefaultDimensionForChannel, X0
	016 Move X8, [X20+56]
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W3, W0
	021 Move X4, [X8]
	022 Move X0, X21
	023 Move W2, W31
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call 0x221A310, X0, X1, X2, X3
	027 Return X0

Method: System.Void SetSizedArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C18C28 ADRP X26, 0x546000
	0x03C18C2C LDRB W8, [X25 + 0xBC5]
	0x03C18C30 LDR X26, [X26 + 0xF60]
	0x03C18C34 MOV W19, W5
	0x03C18C38 MOV W20, W4
	0x03C18C3C MOV W21, W3
	0x03C18C40 MOV X22, X2
	0x03C18C44 MOV W23, W1
	0x03C18C48 MOV X24, X0
	0x03C18C4C TBNZ X8, 0x0, 0x3C18C64
	0x03C18C50 ADRP X0, 0x546000
	0x03C18C54 LDR X0, [X0 + 0xF60]
	0x03C18C58 BL 0x1C16CF4
	0x03C18C5C MOVZ W8, 0x1
	0x03C18C60 STRB W8, [X25 + 0xBC5]
	0x03C18C64 LDR X7, [X26]
	0x03C18C68 MOV X0, X24
	0x03C18C6C MOV W1, W23
	0x03C18C70 MOV X3, X22
	0x03C18C74 MOV W4, W21
	0x03C18C78 MOV W5, W20
	0x03C18C7C MOV W6, W19
	0x03C18C80 LDP X20, X19, [X31 + 0x40]
	0x03C18C84 LDP X22, X21, [X31 + 0x30]
	0x03C18C88 LDP X24, X23, [X31 + 0x20]
	0x03C18C8C LDP X26, X25, [X31 + 0x10]
	0x03C18C90 MOVZ W2, 0x4
	0x03C18C94 LDR X30, [X31], #0x50
	0x03C18C98 B 0x221AD58
	0x03C18C9C STP X30, X23, [X31 - 0x30]!
	0x03C18CA0 STP X22, X21, [X31 + 0x10]
	0x03C18CA4 STP X20, X19, [X31 + 0x20]
	0x03C18CA8 ADRP X22, 0x7CC000
	0x03C18CAC ADRP X23, 0x546000
	0x03C18CB0 LDRB W8, [X22 + 0xBC6]
	0x03C18CB4 LDR X23, [X23 + 0xF68]
	0x03C18CB8 MOV X19, X2
	0x03C18CBC MOV W20, W1
	0x03C18CC0 MOV X21, X0
	0x03C18CC4 TBNZ X8, 0x0, 0x3C18CDC
	0x03C18CC8 ADRP X0, 0x546000
	0x03C18CCC LDR X0, [X0 + 0xF68]
	0x03C18CD0 BL 0x1C16CF4
	0x03C18CD4 MOVZ W8, 0x1
	0x03C18CD8 STRB W8, [X22 + 0xBC6]
	0x03C18CDC LDR X4, [X23]
	0x03C18CE0 MOV X0, X21
	0x03C18CE4 MOV W1, W20
	0x03C18CE8 MOV X2, X19
	0x03C18CEC LDP X20, X19, [X31 + 0x20]
	0x03C18CF0 LDP X22, X21, [X31 + 0x10]
	0x03C18CF4 MOVZ W3, 0x4
	0x03C18CF8 LDP X30, X23, [X31], #0x30
	0x03C18CFC B 0x2219BB0
	0x03C18D00 STR X30, [X31 - 0x30]!
	0x03C18D04 STP X22, X21, [X31 + 0x10]
	0x03C18D08 STP X20, X19, [X31 + 0x20]
	0x03C18D0C ADRP X22, 0x7CC000
	0x03C18D10 LDR X3, [X22 + 0xAE0]
	0x03C18D14 MOV X19, X2
	0x03C18D18 MOV W20, W1
	0x03C18D1C MOV X21, X0
	0x03C18D20 CBNZ X3, 0x3C18D38
	0x03C18D24 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C18D28 ADD X0, X0, 0xEC5
	0x03C18D2C BL 0x1C16CB8
	0x03C18D30 MOV X3, X0
	0x03C18D34 STR X0, [X22 + 0xAE0]
	0x03C18D38 MOV X0, X21
	0x03C18D3C MOV W1, W20
	0x03C18D40 MOV X2, X19
	0x03C18D44 LDP X20, X19, [X31 + 0x20]
	0x03C18D48 LDP X22, X21, [X31 + 0x10]
	0x03C18D4C LDR X30, [X31], #0x30
	0x03C18D50 BR X3
	0x03C18D54 STR X30, [X31 - 0x30]!
	0x03C18D58 STP X22, X21, [X31 + 0x10]
	0x03C18D5C STP X20, X19, [X31 + 0x20]
	0x03C18D60 ADRP X22, 0x7CC000
	0x03C18D64 ADRP X21, 0x546000
	0x03C18D68 ADRP X20, 0x4DB000
	0x03C18D6C LDRB W8, [X22 + 0xBC7]
	0x03C18D70 LDR X21, [X21 + 0xF70]
	0x03C18D74 LDR X20, [X20 + 0xA28]
	0x03C18D78 MOV X19, X0
	0x03C18D7C TBNZ X8, 0x0, 0x3C18DA0
	0x03C18D80 ADRP X0, 0x4DB000
	0x03C18D84 LDR X0, [X0 + 0xA28]
	0x03C18D88 BL 0x1C16CF4
	0x03C18D8C ADRP X0, 0x546000
	0x03C18D90 LDR X0, [X0 + 0xF70]
	0x03C18D94 BL 0x1C16CF4
	0x03C18D98 MOVZ W8, 0x1
	0x03C18D9C STRB W8, [X22 + 0xBC7]
	0x03C18DA0 MOV X0, X19
	0x03C18DA4 MOV X1, X31
	0x03C18DA8 BL 0x3C389D4
	0x03C18DAC LDR X8, [X21]
	0x03C18DB0 MOV X1, X0
	0x03C18DB4 MOV X2, X31
	0x03C18DB8 MOV X0, X8
	0x03C18DBC BL 0x321EFD0
	0x03C18DC0 LDR X8, [X20]
	0x03C18DC4 MOV X19, X0
	0x03C18DC8 LDR W9, [X8 + 0xE0]
	0x03C18DCC CBNZ W9, 0x3C18DD8
	0x03C18DD0 MOV X0, X8
	0x03C18DD4 BL 0x1C16DFC
	0x03C18DD8 MOV X0, X19
	0x03C18DDC LDP X20, X19, [X31 + 0x20]
	0x03C18DE0 LDP X22, X21, [X31 + 0x10]
	0x03C18DE4 LDR X30, [X31], #0x30
	0x03C18DE8 B 0x3C0649C
	0x03C18DEC STR X30, [X31 - 0x30]!
	0x03C18DF0 STP X22, X21, [X31 + 0x10]
	0x03C18DF4 STP X20, X19, [X31 + 0x20]
	0x03C18DF8 ADRP X22, 0x7CC000
	0x03C18DFC LDRB W8, [X22 + 0xBC8]
	0x03C18E00 MOV W20, W2
	0x03C18E04 MOV W21, W1
	0x03C18E08 MOV X19, X0
	0x03C18E0C TBNZ X8, 0x0, 0x3C18E48
	0x03C18E10 ADRP X0, 0x4DB000
	0x03C18E14 LDR X0, [X0 + 0xA28]
	0x03C18E18 BL 0x1C16CF4
	0x03C18E1C ADRP X0, 0x50C000
	0x03C18E20 LDR X0, [X0 + 0xE88]
	0x03C18E24 BL 0x1C16CF4
	0x03C18E28 ADRP X0, 0x546000
	0x03C18E2C LDR X0, [X0 + 0xF78]
	0x03C18E30 BL 0x1C16CF4
	0x03C18E34 ADRP X0, 0x546000
	0x03C18E38 LDR X0, [X0 + 0xF80]
	0x03C18E3C BL 0x1C16CF4
	0x03C18E40 MOVZ W8, 0x1
	0x03C18E44 STRB W8, [X22 + 0xBC8]
	0x03C18E48 ADRP X22, 0x7CC000
	0x03C18E4C LDR X8, [X22 + 0xB40]
	0x03C18E50 CBNZ X8, 0x3C18E68
	0x03C18E54 ADRP X0, 0xFFFFFFFFFCEED000
	0x03C18E58 ADD X0, X0, 0x245
	0x03C18E5C BL 0x1C16CB8
	0x03C18E60 MOV X8, X0
	0x03C18E64 STR X0, [X22 + 0xB40]
	0x03C18E68 MOV X0, X19
	0x03C18E6C BLR X8
	0x03C18E70 TBZ X0, 0x0, 0x3C18EB0
	0x03C18E74 TBNZ X21, 0x1F, 0x3C18EBC
	0x03C18E78 ADRP X22, 0x7CC000
	0x03C18E7C LDR X8, [X22 + 0xB50]
	0x03C18E80 CBNZ X8, 0x3C18E98
	0x03C18E84 ADRP X0, 0xFFFFFFFFFCEF3000
	0x03C18E88 ADD X0, X0, 0x175
	0x03C18E8C BL 0x1C16CB8
	0x03C18E90 MOV X8, X0
	0x03C18E94 STR X0, [X22 + 0xB50]
	0x03C18E98 MOV X0, X19
	0x03C18E9C BLR X8
	0x03C18EA0 CMP W0, W21
	0x03C18EA4 B.LE 0x3C18EBC
	0x03C18EA8 MOVZ W0, 0x1
	0x03C18EAC B 0x3C18F1C
	0x03C18EB0 MOV X0, X19
	0x03C18EB4 BL 0x3C18D54
	0x03C18EB8 B 0x3C18F18

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X28, 0x7CD000
	013 Move X8, [X28+2880]
	014 Move W27, [X31+96]
	015 Move W21, W7
	016 Move W26, W6
	017 Move W22, W5
	018 Move X23, X4
	019 Move W24, W3
	020 Move W25, W2
	021 Move W19, W1
	022 Move X20, X0
	023 Compare X8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, -51453952
	026 Add X0, X0, 581
	027 Call 0x1C17CB8
	028 Move X8, X0
	029 Move [X28+2880], X0
	030 Move X0, X20
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {81}
	036 Move TEMP, X26
	037 And TEMP, TEMP, -2147483648
	038 Compare TEMP, -2147483648
	039 JumpIfEqual {104}
	040 Move TEMP, X21
	041 And TEMP, TEMP, -2147483648
	042 Compare TEMP, -2147483648
	043 JumpIfEqual {122}
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Compare W21, 0
	046 JumpIfNotEqual {140}
	047 Add W8, W21, W26
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X28, 0x7CD000
	050 Move X8, [X28+2856]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CSEL not yet implemented."
	053 Compare X8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, -51445760
	056 Add X0, X0, 100
	057 Call 0x1C17CB8
	058 Move X8, X0
	059 Move [X28+2856], X0
	060 Move [X31+96], W27
	061 Move X0, X20
	062 Move W1, W19
	063 Move W2, W25
	064 Move W3, W24
	065 Move X4, X23
	066 Move W5, W22
	067 Move W6, W26
	068 Move W7, W21
	069 Move X20, [X31+80]
	070 Move X19, [X31+88]
	071 Move X22, [X31+64]
	072 Move X21, [X31+72]
	073 Move X24, [X31+48]
	074 Move X23, [X31+56]
	075 Move X26, [X31+32]
	076 Move X25, [X31+40]
	077 Move X28, [X31+16]
	078 Move X27, [X31+24]
	079 Move X30, [X31+96]
	080 CallNoReturn X8
	081 Move X21, 0x7CD000
	082 Move X2, [X21+2840]
	083 Compare X2, 0
	084 JumpIfNotEqual {90}
	085 Move X0, -51408896
	086 Add X0, X0, 4087
	087 Call 0x1C17CB8
	088 Move X2, X0
	089 Move [X21+2840], X0
	090 Move X0, X20
	091 Move W1, W19
	092 Move X20, [X31+80]
	093 Move X19, [X31+88]
	094 Move X22, [X31+64]
	095 Move X21, [X31+72]
	096 Move X24, [X31+48]
	097 Move X23, [X31+56]
	098 Move X26, [X31+32]
	099 Move X25, [X31+40]
	100 Move X28, [X31+16]
	101 Move X27, [X31+24]
	102 Move X30, [X31+96]
	103 CallNoReturn X2
	104 Move [X31+12], W26
	105 Move X0, 0x4DC000
	106 Move X0, [X0+1880]
	107 Call 0x1C17D08
	108 Add X1, X31, 12
	109 Call 0x1C17E04
	110 Move X19, X0
	111 Move X0, 0x4E4000
	112 Move X0, [X0+1888]
	113 Call 0x1C17D08
	114 Call 0x1C17F10
	115 Move X20, X0
	116 Move X0, 0x547000
	117 Move X0, [X0+3712]
	118 Call 0x1C17D08
	119 Move X21, X0
	120 Move X0, 0x547000
	121 Move X0, [X0+3720]
	122 Move [X31+12], W21
	123 Move X0, 0x4DC000
	124 Move X0, [X0+1880]
	125 Call 0x1C17D08
	126 Add X1, X31, 12
	127 Call 0x1C17E04
	128 Move X19, X0
	129 Move X0, 0x4E4000
	130 Move X0, [X0+1888]
	131 Call 0x1C17D08
	132 Call 0x1C17F10
	133 Move X20, X0
	134 Move X0, 0x547000
	135 Move X0, [X0+3728]
	136 Call 0x1C17D08
	137 Move X21, X0
	138 Move X0, 0x547000
	139 Move X0, [X0+3736]
	140 Move [X31+12], W26
	141 Move X0, 0x4DC000
	142 Move X0, [X0+1880]
	143 Call 0x1C17D08
	144 Add X1, X31, 12
	145 Call 0x1C17E04
	146 Move X19, X0
	147 Move X0, 0x4E4000
	148 Move X0, [X0+1888]
	149 Call 0x1C17D08
	150 Call 0x1C17F10
	151 Move X20, X0
	152 Move X0, 0x547000
	153 Move X0, [X0+3712]
	154 Call 0x1C17D08
	155 Move X21, X0
	156 Move X0, 0x547000
	157 Move X0, [X0+3744]
	158 Move [X31+12], W8
	159 Move X0, 0x4DC000
	160 Move X0, [X0+1880]
	161 Call 0x1C17D08
	162 Add X1, X31, 12
	163 Call 0x1C17E04
	164 Move X19, X0
	165 Move X0, 0x4E4000
	166 Move X0, [X0+1888]
	167 Call 0x1C17D08
	168 Call 0x1C17F10
	169 Move X20, X0
	170 Move X0, 0x547000
	171 Move X0, [X0+3728]
	172 Call 0x1C17D08
	173 Move X21, X0
	174 Move X0, 0x547000
	175 Move X0, [X0+3752]
	176 Call 0x1C17D08
	177 Move X3, X0
	178 Move X0, X20
	179 Move X1, X21
	180 Move X2, X19
	181 Move X4, X31
	182 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	183 Move X0, 0x547000
	184 Move X0, [X0+3760]
	185 Call 0x1C17D08
	186 Move X1, X0
	187 Move X0, X20
	188 Call 0x1C17DEC

Method: System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, T[] values, UnityEngine.Rendering.MeshUpdateFlags flags = 0)

Disassembly:
	0x0221B040 MOV W5, W20
	0x0221B044 MOV W7, W22
	0x0221B048 STR X31, [X31]
	0x0221B04C BL 0x3C17140
	0x0221B050 LDP X20, X19, [X31 + 0x60]
	0x0221B054 LDP X22, X21, [X31 + 0x50]
	0x0221B058 LDP X24, X23, [X31 + 0x40]
	0x0221B05C LDP X30, X25, [X31 + 0x30]
	0x0221B060 ADD X31, X31, 0x70
	0x0221B064 RET
	0x0221B068 STR W23, [X31 + 0x1C]
	0x0221B06C ADRP X22, 0x1ED8000
	0x0221B070 LDR X22, [X22 + 0x758]
	0x0221B074 MOV X0, X22
	0x0221B078 BL 0x1C16D08
	0x0221B07C ADD X1, X31, 0x1C
	0x0221B080 BL 0x1C16E04
	0x0221B084 MOV X23, X0
	0x0221B088 MOV X0, X22
	0x0221B08C STR W21, [X31 + 0x18]
	0x0221B090 BL 0x1C16D08
	0x0221B094 ADD X1, X31, 0x18
	0x0221B098 BL 0x1C16E04
	0x0221B09C MOV X21, X0
	0x0221B0A0 MOV X0, X22
	0x0221B0A4 STR W20, [X31 + 0x14]
	0x0221B0A8 BL 0x1C16D08
	0x0221B0AC ADD X1, X31, 0x14
	0x0221B0B0 BL 0x1C16E04
	0x0221B0B4 MOV X20, X0
	0x0221B0B8 ADRP X0, 0x1F01000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move W23, W1
	010 Move X24, X0
	011 Move X0, X4
	012 Move X1, X31
	013 Move W19, W5
	014 Move X20, X4
	015 Move W21, W3
	016 Move W22, W2
	017 Call NoAllocHelpers.SafeLength, X0
	018 Move W5, W0
	019 Move X0, X24
	020 Move W1, W23
	021 Move W2, W22
	022 Move W3, W21
	023 Move X4, X20
	024 Move W6, W31
	025 Move W7, W5
	026 Move [X31+8], X31
	027 Move [X31], W19
	028 Call Mesh.SetSizedArrayForChannel, X0, X1, X2, X3, X4, X5, X6, X7, X8
	029 Move X20, [X31+64]
	030 Move X19, [X31+72]
	031 Move X22, [X31+48]
	032 Move X21, [X31+56]
	033 Move X24, [X31+32]
	034 Move X23, [X31+40]
	035 Move X30, [X31+16]
	036 Add X31, X31, 80
	037 Return 

Method: System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, T[] values, UnityEngine.Rendering.MeshUpdateFlags flags = 0)

Disassembly:
	0x0221ADD4 LDR X8, [X24 + 0x38]
	0x0221ADD8 MOV W1, W0
	0x0221ADDC MOV X0, X25
	0x0221ADE0 MOV W2, W31
	0x0221ADE4 LDR X8, [X8 + 0x8]
	0x0221ADE8 MOV W3, W23
	0x0221ADEC MOV X4, X22
	0x0221ADF0 MOV W5, W21
	0x0221ADF4 MOV W6, W20
	0x0221ADF8 MOV W7, W19
	0x0221ADFC STR X8, [X31]
	0x0221AE00 BL 0x221A9D4
	0x0221AE04 LDP X20, X19, [X31 + 0x50]
	0x0221AE08 LDP X22, X21, [X31 + 0x40]
	0x0221AE0C LDP X24, X23, [X31 + 0x30]
	0x0221AE10 LDP X26, X25, [X31 + 0x20]
	0x0221AE14 LDR X30, [X31 + 0x10]
	0x0221AE18 ADD X31, X31, 0x60
	0x0221AE1C RET
	0x0221AE20 ADRP X8, 0x1ED9000
	0x0221AE24 LDR X8, [X8 + 0xA28]
	0x0221AE28 LDR X0, [X8]
	0x0221AE2C LDR W8, [X0 + 0xE0]
	0x0221AE30 CBNZ W8, 0x221AE38
	0x0221AE34 BL 0x1C16DFC
	0x0221AE38 ADRP X8, 0x1F02000
	0x0221AE3C LDR X8, [X8 + 0x88]
	0x0221AE40 LDP X20, X19, [X31 + 0x50]
	0x0221AE44 LDP X22, X21, [X31 + 0x40]
	0x0221AE48 LDP X24, X23, [X31 + 0x30]
	0x0221AE4C LDR X0, [X8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W21, W1
	009 Move X22, X0
	010 Move X0, X2
	011 Move X1, X31
	012 Move W19, W3
	013 Move X20, X2
	014 Call NoAllocHelpers.SafeLength, X0
	015 Move W23, W0
	016 Move W0, W21
	017 Move X1, X31
	018 Call Mesh.DefaultDimensionForChannel, X0
	019 Move W3, W0
	020 Move X0, X22
	021 Move W1, W21
	022 Move W2, W31
	023 Move X4, X20
	024 Move W5, W23
	025 Move W6, W31
	026 Move W7, W23
	027 Move [X31+8], X31
	028 Move [X31], W19
	029 Call Mesh.SetSizedArrayForChannel, X0, X1, X2, X3, X4, X5, X6, X7, X8
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X30, [X31+16]
	035 Move X23, [X31+24]
	036 Add X31, X31, 64
	037 Return 

Method: System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x0221B7B8 ADD X31, X26, 0x0
	0x0221B7BC MOV X0, X26
	0x0221B7C0 MOV W1, W31
	0x0221B7C4 MOV X2, X21
	0x0221B7C8 BL 0x3EB1B10
	0x0221B7CC ADRP X28, 0x1ED8000
	0x0221B7D0 LDR X28, [X28 + 0x598]
	0x0221B7D4 LDR X0, [X28]
	0x0221B7D8 LDR W8, [X0 + 0xE0]
	0x0221B7DC CBNZ W8, 0x221B7E4
	0x0221B7E0 BL 0x1C16DFC
	0x0221B7E4 MOV X0, X20
	0x0221B7E8 MOV X1, X31
	0x0221B7EC MOV X2, X31
	0x0221B7F0 BL 0x3C3883C
	0x0221B7F4 TBNZ X0, 0x0, 0x221BAC8
	0x0221B7F8 LDUR X8, [X29 - 0x20]
	0x0221B7FC CBZ X8, 0x221BAE8
	0x0221B800 CBZ X20, 0x221BAC4
	0x0221B804 STUR X25, [X29 - 0x30]
	0x0221B808 ADRP X8, 0x1EDA000
	0x0221B80C LDR X8, [X8 + 0x168]
	0x0221B810 MOV X0, X20
	0x0221B814 LDR X1, [X8]
	0x0221B818 BL 0x21E52E4
	0x0221B81C LDR X8, [X28]
	0x0221B820 MOV X22, X0
	0x0221B824 LDR W9, [X8 + 0xE0]
	0x0221B828 CBNZ W9, 0x221B834
	0x0221B82C MOV X0, X8
	0x0221B830 BL 0x1C16DFC
	0x0221B834 MOV X0, X22
	0x0221B838 MOV X1, X31
	0x0221B83C MOV X2, X31
	0x0221B840 BL 0x3C354F8
	0x0221B844 MOV X25, X31
	0x0221B848 TBZ X0, 0x0, 0x221B860
	0x0221B84C CBZ X22, 0x221BAC4
	0x0221B850 MOV X0, X22
	0x0221B854 MOV X1, X31
	0x0221B858 BL 0x3C16D04
	0x0221B85C MOV X25, X0
	0x0221B860 MOV X0, X24
	0x0221B864 MOV W1, W31
	0x0221B868 MOV X2, X21

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X27, [X31+96]
	013 Move W22, W7
	014 Move W19, W6
	015 Move W20, W5
	016 Move X8, [X27+56]
	017 Move X26, X4
	018 Move W21, W3
	019 Move W23, W2
	020 Move W24, W1
	021 Move X25, X0
	022 Compare X8, 0
	023 JumpIfNotEqual {26}
	024 Move X0, X27
	025 Call 0x1C5D6E0
	026 Move X0, X26
	027 Move X1, X31
	028 Call NoAllocHelpers.ExtractArrayFromList, X0
	029 Move X8, [X27+56]
	030 Move X27, X0
	031 Move X0, X26
	032 Move X1, [X8+8]
	033 Call NoAllocHelpers.SafeLength, X0
	034 Move W5, W0
	035 Move X0, X25
	036 Move W1, W24
	037 Move W2, W23
	038 Move W3, W21
	039 Move X4, X27
	040 Move W6, W20
	041 Move W7, W19
	042 Move [X31+8], X31
	043 Move [X31], W22
	044 Call Mesh.SetSizedArrayForChannel, X0, X1, X2, X3, X4, X5, X6, X7, X8
	045 Move X20, [X31+80]
	046 Move X19, [X31+88]
	047 Move X22, [X31+64]
	048 Move X21, [X31+72]
	049 Move X24, [X31+48]
	050 Move X23, [X31+56]
	051 Move X26, [X31+32]
	052 Move X25, [X31+40]
	053 Move X30, [X31+16]
	054 Move X27, [X31+24]
	055 Add X31, X31, 96
	056 Return 

Method: System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x0221B4C4 BL 0x3C16FA8
	0x0221B4C8 MOV X22, X0
	0x0221B4CC LDR X0, [X24]
	0x0221B4D0 LDR W8, [X0 + 0xE0]
	0x0221B4D4 CBNZ W8, 0x221B4DC
	0x0221B4D8 BL 0x1C16DFC
	0x0221B4DC MOV X0, X22
	0x0221B4E0 MOV X1, X31
	0x0221B4E4 MOV X2, X31
	0x0221B4E8 BL 0x3C354F8
	0x0221B4EC TBZ X0, 0x0, 0x221B578
	0x0221B4F0 LDR X8, [X19 + 0x18]
	0x0221B4F4 LDR X0, [X19 + 0x40]
	0x0221B4F8 LDR X2, [X19 + 0x28]
	0x0221B4FC MOV X1, X22
	0x0221B500 BLR X8
	0x0221B504 CBZ X0, 0x221B578
	0x0221B508 ADRP X10, 0x1EDF000
	0x0221B50C LDR X8, [X0]
	0x0221B510 LDR X10, [X10 + 0x2F0]
	0x0221B514 MOV X23, X0
	0x0221B518 LDRH W9, [X8 + 0x12E]
	0x0221B51C LDR X1, [X10]
	0x0221B520 CBZ X9, 0x221B544
	0x0221B524 LDR X10, [X8 + 0xB0]
	0x0221B528 ADD X10, X10, 0x8
	0x0221B52C LDUR X11, [X10 - 0x8]
	0x0221B530 CMP X11, X1
	0x0221B534 B.EQ 0x221B554
	0x0221B538 SUBS X9, X9, 0x1
	0x0221B53C ADD X10, X10, 0x10
	0x0221B540 B.NE 0x221B52C
	0x0221B544 MOVZ W2, 0x1
	0x0221B548 MOV X0, X23
	0x0221B54C BL 0x1C5C788
	0x0221B550 B 0x221B564
	0x0221B554 LDR W9, [X10]
	0x0221B558 ADD W9, W9, 0x1
	0x0221B55C ADD X8, X8, W9, 0x4, SXTW
	0x0221B560 ADD X0, X8, 0x138
	0x0221B564 LDP X8, X1, [X0]
	0x0221B568 MOV X0, X23
	0x0221B56C BLR X8
	0x0221B570 CMP W0, W20
	0x0221B574 B.EQ 0x221B5E0
	0x0221B578 LDR X8, [X19 + 0x18]
	0x0221B57C LDR X0, [X19 + 0x40]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X8, [X6+56]
	012 Move X24, X6
	013 Move W21, W5
	014 Move W19, W4
	015 Move W20, W3
	016 Move X25, X2
	017 Move W22, W1
	018 Move X23, X0
	019 Compare X8, 0
	020 JumpIfNotEqual {23}
	021 Move X0, X24
	022 Call 0x1C5D6E0
	023 Move W0, W22
	024 Move X1, X31
	025 Call Mesh.DefaultDimensionForChannel, X0
	026 Move W26, W0
	027 Move X0, X25
	028 Move X1, X31
	029 Call NoAllocHelpers.ExtractArrayFromList, X0
	030 Move X8, [X24+56]
	031 Move X24, X0
	032 Move X0, X25
	033 Move X1, [X8+8]
	034 Call 0x222DCF4, X0
	035 Move W5, W0
	036 Move X0, X23
	037 Move W1, W22
	038 Move W2, W31
	039 Move W3, W26
	040 Move X4, X24
	041 Move W6, W20
	042 Move W7, W19
	043 Move [X31+8], X31
	044 Move [X31], W21
	045 Call Mesh.SetSizedArrayForChannel, X0, X1, X2, X3, X4, X5, X6, X7, X8
	046 Move X20, [X31+80]
	047 Move X19, [X31+88]
	048 Move X22, [X31+64]
	049 Move X21, [X31+72]
	050 Move X24, [X31+48]
	051 Move X23, [X31+56]
	052 Move X26, [X31+32]
	053 Move X25, [X31+40]
	054 Move X30, [X31+16]
	055 Add X31, X31, 96
	056 Return 

Method: System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim)

Disassembly:
	0x0221A8E0 MOV W1, W24
	0x0221A8E4 MOV W2, W23
	0x0221A8E8 MOV W3, W21
	0x0221A8EC MOV X4, X27
	0x0221A8F0 MOV W6, W20
	0x0221A8F4 MOV W7, W19
	0x0221A8F8 STR X31, [X31 + 0x8]
	0x0221A8FC STR W22, [X31]
	0x0221A900 BL 0x3C17C28
	0x0221A904 LDP X20, X19, [X31 + 0x50]
	0x0221A908 LDP X22, X21, [X31 + 0x40]
	0x0221A90C LDP X24, X23, [X31 + 0x30]
	0x0221A910 LDP X26, X25, [X31 + 0x20]
	0x0221A914 LDP X30, X27, [X31 + 0x10]
	0x0221A918 ADD X31, X31, 0x60
	0x0221A91C RET
	0x0221A920 SUB X31, X31, 0x60
	0x0221A924 STP X30, X27, [X31 + 0x10]
	0x0221A928 STP X26, X25, [X31 + 0x20]
	0x0221A92C STP X24, X23, [X31 + 0x30]
	0x0221A930 STP X22, X21, [X31 + 0x40]
	0x0221A934 STP X20, X19, [X31 + 0x50]
	0x0221A938 LDR X27, [X31 + 0x60]
	0x0221A93C MOV W22, W7
	0x0221A940 MOV W19, W6
	0x0221A944 MOV W20, W5
	0x0221A948 LDR X8, [X27 + 0x38]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X5+56]
	009 Move W19, W4
	010 Move W20, W3
	011 Move W21, W2
	012 Move X22, X1
	013 Move X23, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {20}
	016 Move X0, X5
	017 Move X24, X5
	018 Call 0x1C5D6E0
	019 Move X8, [X24+56]
	020 Move X6, [X8+8]
	021 Move X0, X23
	022 Move X1, X22
	023 Move W2, W21
	024 Move W3, W20
	025 Move W4, W19
	026 Move X20, [X31+48]
	027 Move X19, [X31+56]
	028 Move X22, [X31+32]
	029 Move X21, [X31+40]
	030 Move X24, [X31+16]
	031 Move X23, [X31+24]
	032 Move W5, W31
	033 Move X30, [X31+64]
	034 Call 0x221A9BC, X0, X1, X2, X3, X4, X5
	035 Return 

Method: System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim, UnityEngine.Rendering.VertexAttributeFormat channelType)

Disassembly:
	0x0221A9BC LDP X22, X21, [X31 + 0x40]
	0x0221A9C0 LDP X24, X23, [X31 + 0x30]
	0x0221A9C4 LDP X26, X25, [X31 + 0x20]
	0x0221A9C8 LDP X30, X27, [X31 + 0x10]
	0x0221A9CC ADD X31, X31, 0x60
	0x0221A9D0 RET
	0x0221A9D4 SUB X31, X31, 0x60
	0x0221A9D8 STP X30, X27, [X31 + 0x10]
	0x0221A9DC STP X26, X25, [X31 + 0x20]
	0x0221A9E0 STP X24, X23, [X31 + 0x30]
	0x0221A9E4 STP X22, X21, [X31 + 0x40]
	0x0221A9E8 STP X20, X19, [X31 + 0x50]
	0x0221A9EC LDR X27, [X31 + 0x60]
	0x0221A9F0 MOV W22, W7
	0x0221A9F4 MOV W19, W6
	0x0221A9F8 MOV W20, W5
	0x0221A9FC LDR X8, [X27 + 0x38]
	0x0221AA00 MOV X26, X4
	0x0221AA04 MOV W21, W3
	0x0221AA08 MOV W23, W2
	0x0221AA0C MOV W24, W1
	0x0221AA10 MOV X25, X0
	0x0221AA14 CBNZ X8, 0x221AA20
	0x0221AA18 MOV X0, X27
	0x0221AA1C BL 0x1C5C6E0
	0x0221AA20 MOV X0, X26
	0x0221AA24 MOV X1, X31
	0x0221AA28 BL 0x3C36C88
	0x0221AA2C LDR X8, [X27 + 0x38]
	0x0221AA30 MOV X27, X0
	0x0221AA34 MOV X0, X26
	0x0221AA38 LDR X1, [X8 + 0x8]
	0x0221AA3C BL 0x222CDF8
	0x0221AA40 MOV W5, W0
	0x0221AA44 MOV X0, X25
	0x0221AA48 MOV W1, W24
	0x0221AA4C MOV W2, W23
	0x0221AA50 MOV W3, W21
	0x0221AA54 MOV X4, X27
	0x0221AA58 MOV W6, W20
	0x0221AA5C MOV W7, W19
	0x0221AA60 STR X31, [X31 + 0x8]
	0x0221AA64 STR W22, [X31]
	0x0221AA68 BL 0x3C17C28
	0x0221AA6C LDP X20, X19, [X31 + 0x50]
	0x0221AA70 LDP X22, X21, [X31 + 0x40]
	0x0221AA74 LDP X24, X23, [X31 + 0x30]
	0x0221AA78 LDP X26, X25, [X31 + 0x20]
	0x0221AA7C LDP X30, X27, [X31 + 0x10]
	0x0221AA80 ADD X31, X31, 0x60
	0x0221AA84 RET
	0x0221AA88 SUB X31, X31, 0x60
	0x0221AA8C STP X30, X27, [X31 + 0x10]
	0x0221AA90 STP X26, X25, [X31 + 0x20]
	0x0221AA94 STP X24, X23, [X31 + 0x30]
	0x0221AA98 STP X22, X21, [X31 + 0x40]
	0x0221AA9C STP X20, X19, [X31 + 0x50]
	0x0221AAA0 LDR X27, [X31 + 0x60]
	0x0221AAA4 MOV W22, W7
	0x0221AAA8 MOV W19, W6
	0x0221AAAC MOV W20, W5

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X6+56]
	010 Move X25, X6
	011 Move W21, W5
	012 Move W20, W4
	013 Move W19, W3
	014 Move W24, W2
	015 Move X23, X1
	016 Move X22, X0
	017 Compare X8, 0
	018 JumpIfNotEqual {21}
	019 Move X0, X25
	020 Call 0x1C5D6E0
	021 Compare X23, 0
	022 JumpIfEqual {88}
	023 Move W8, [X23+28]
	024 Move X0, X22
	025 Move X1, X31
	026 Add W8, W8, 1
	027 Move [X23+24], W31
	028 Move [X23+28], W8
	029 Call Mesh.get_canAccess, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {66}
	034 Move X0, X22
	035 Move W1, W19
	036 Move X2, X31
	037 Call Mesh.HasVertexAttribute, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {79}
	042 Move X8, [X25+56]
	043 Move X0, X23
	044 Move W1, W24
	045 Move X2, [X8+16]
	046 Call NoAllocHelpers.EnsureListElemCount, X0, X1
	047 Move X0, X23
	048 Move X1, X31
	049 Call NoAllocHelpers.ExtractArrayFromList, X0
	050 Move X4, X0
	051 Move X0, X22
	052 Move W1, W19
	053 Move W2, W21
	054 Move W3, W20
	055 Move X20, [X31+48]
	056 Move X19, [X31+56]
	057 Move X22, [X31+32]
	058 Move X21, [X31+40]
	059 Move X24, [X31+16]
	060 Move X23, [X31+24]
	061 Move X5, X31
	062 Move X30, [X31+64]
	063 Move X25, [X31+72]
	064 Call Mesh.GetArrayFromChannelImpl, X0, X1, X2, X3, X4
	065 Return 
	066 Move X0, X22
	067 Move W1, W19
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Move X2, X31
	075 Move X30, [X31+64]
	076 Move X25, [X31+72]
	077 Call Mesh.PrintErrorCantAccessChannel, X0, X1
	078 Return 
	079 Move X20, [X31+48]
	080 Move X19, [X31+56]
	081 Move X22, [X31+32]
	082 Move X21, [X31+40]
	083 Move X24, [X31+16]
	084 Move X23, [X31+24]
	085 Move X30, [X31+64]
	086 Move X25, [X31+72]
	087 Return 
	088 Call 0x1C17F20

Method: UnityEngine.Vector3[] get_vertices()

Disassembly:
	0x03C18EBC ADRP X8, 0x546000
	0x03C18EC0 ADRP X9, 0x546000
	0x03C18EC4 ADRP X10, 0x50C000
	0x03C18EC8 LDR X8, [X8 + 0xF80]
	0x03C18ECC LDR X9, [X9 + 0xF78]
	0x03C18ED0 LDR X10, [X10 + 0xE88]
	0x03C18ED4 ANDS W31, W20, 0x1
	0x03C18ED8 LDR X0, [X8]
	0x03C18EDC MOV X2, X31
	0x03C18EE0 CSEL X8, X9, X10, NE
	0x03C18EE4 LDR X1, [X8]
	0x03C18EE8 BL 0x321EFD0
	0x03C18EEC ADRP X8, 0x4DB000
	0x03C18EF0 LDR X8, [X8 + 0xA28]
	0x03C18EF4 MOV X20, X0
	0x03C18EF8 LDR X8, [X8]
	0x03C18EFC LDR W9, [X8 + 0xE0]
	0x03C18F00 CBNZ W9, 0x3C18F0C
	0x03C18F04 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CD000
	006 Move X21, 0x547000
	007 Move W8, [X20+2984]
	008 Move X21, [X21+3768]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x547000
	015 Move X0, [X0+3768]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2984], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, W31
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call Mesh.GetAllocArrayFromChannel, X0, X1
	027 Return X0

Method: System.Void set_vertices(UnityEngine.Vector3[] value)

Disassembly:
	0x03C18F08 BL 0x1C16DFC
	0x03C18F0C MOV X0, X20
	0x03C18F10 MOV X1, X19
	0x03C18F14 BL 0x3C065A4
	0x03C18F18 MOV W0, W31
	0x03C18F1C LDP X20, X19, [X31 + 0x20]
	0x03C18F20 LDP X22, X21, [X31 + 0x10]
	0x03C18F24 LDR X30, [X31], #0x30
	0x03C18F28 RET
	0x03C18F2C MOVZ W2, 0x1
	0x03C18F30 B 0x3C18DEC
	0x03C18F34 MOV W2, W31
	0x03C18F38 B 0x3C18DEC
	0x03C18F3C STR X30, [X31 - 0x20]!
	0x03C18F40 STP X20, X19, [X31 + 0x10]
	0x03C18F44 ADRP X20, 0x7CC000
	0x03C18F48 LDRB W8, [X20 + 0xBC9]
	0x03C18F4C MOV X19, X0
	0x03C18F50 TBNZ X8, 0x0, 0x3C18F68
	0x03C18F54 ADRP X0, 0x4DC000
	0x03C18F58 LDR X0, [X0 + 0xE58]
	0x03C18F5C BL 0x1C16CF4
	0x03C18F60 MOVZ W8, 0x1
	0x03C18F64 STRB W8, [X20 + 0xBC9]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CD000
	007 Move X22, 0x547000
	008 Move W8, [X21+2985]
	009 Move X22, [X22+3776]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x547000
	017 Move X0, [X0+3776]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2985], W8
	021 Move X4, [X22]
	022 Move X0, X20
	023 Move X2, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W1, W31
	029 Move W3, W31
	030 Move X30, [X31+48]
	031 Call Mesh.SetArrayForChannel, X0, X1, X2, X3
	032 Return 

Method: UnityEngine.Vector3[] get_normals()

Disassembly:
	0x03C18F68 ADRP X20, 0x7CC000
	0x03C18F6C LDR X8, [X20 + 0xB40]
	0x03C18F70 CBNZ X8, 0x3C18F88
	0x03C18F74 ADRP X0, 0xFFFFFFFFFCEED000
	0x03C18F78 ADD X0, X0, 0x245
	0x03C18F7C BL 0x1C16CB8
	0x03C18F80 MOV X8, X0
	0x03C18F84 STR X0, [X20 + 0xB40]
	0x03C18F88 MOV X0, X19
	0x03C18F8C BLR X8
	0x03C18F90 TBZ X0, 0x0, 0x3C18FCC
	0x03C18F94 ADRP X20, 0x7CC000
	0x03C18F98 LDR X3, [X20 + 0xAF8]
	0x03C18F9C CBNZ X3, 0x3C18FB4
	0x03C18FA0 ADRP X0, 0xFFFFFFFFFCEEA000
	0x03C18FA4 ADD X0, X0, 0xECE
	0x03C18FA8 BL 0x1C16CB8
	0x03C18FAC MOV X3, X0
	0x03C18FB0 STR X0, [X20 + 0xAF8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CD000
	006 Move X21, 0x547000
	007 Move W8, [X20+2986]
	008 Move X21, [X21+3768]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x547000
	015 Move X0, [X0+3768]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2986], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 1
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call Mesh.GetAllocArrayFromChannel, X0, X1
	027 Return X0

Method: System.Void set_normals(UnityEngine.Vector3[] value)

Disassembly:
	0x03C18FB4 MOV X0, X19
	0x03C18FB8 LDP X20, X19, [X31 + 0x10]
	0x03C18FBC MOVN W1, 0x0
	0x03C18FC0 MOVZ W2, 0x1
	0x03C18FC4 LDR X30, [X31], #0x20
	0x03C18FC8 BR X3
	0x03C18FCC ADRP X20, 0x4DC000
	0x03C18FD0 LDR X20, [X20 + 0xE58]
	0x03C18FD4 MOV X0, X19
	0x03C18FD8 BL 0x3C18D54
	0x03C18FDC LDR X0, [X20]
	0x03C18FE0 LDP X20, X19, [X31 + 0x10]
	0x03C18FE4 MOV W1, W31
	0x03C18FE8 LDR X30, [X31], #0x20
	0x03C18FEC B 0x1C16D6C
	0x03C18FF0 SUB X31, X31, 0x30
	0x03C18FF4 STP X30, X21, [X31 + 0x10]
	0x03C18FF8 STP X20, X19, [X31 + 0x20]
	0x03C18FFC ADRP X21, 0x7CC000
	0x03C19000 LDR X8, [X21 + 0xB40]
	0x03C19004 MOV X19, X1
	0x03C19008 MOV X20, X0
	0x03C1900C CBNZ X8, 0x3C19024
	0x03C19010 ADRP X0, 0xFFFFFFFFFCEEC000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CD000
	007 Move X22, 0x547000
	008 Move W8, [X21+2987]
	009 Move X22, [X22+3776]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x547000
	017 Move X0, [X0+3776]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2987], W8
	021 Move X4, [X22]
	022 Move X0, X20
	023 Move X2, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W1, 1
	029 Move W3, W31
	030 Move X30, [X31+48]
	031 Call Mesh.SetArrayForChannel, X0, X1, X2, X3
	032 Return 

Method: UnityEngine.Vector4[] get_tangents()

Disassembly:
	0x03C19014 ADD X0, X0, 0x245
	0x03C19018 BL 0x1C16CB8
	0x03C1901C MOV X8, X0
	0x03C19020 STR X0, [X21 + 0xB40]
	0x03C19024 MOV X0, X20
	0x03C19028 BLR X8
	0x03C1902C TBZ X0, 0x0, 0x3C19084
	0x03C19030 MOV X0, X19
	0x03C19034 MOV X1, X31
	0x03C19038 BL 0x3C36C34
	0x03C1903C MOV W21, W0
	0x03C19040 MOV X0, X19
	0x03C19044 MOV X1, X31
	0x03C19048 BL 0x3C36C34
	0x03C1904C MOV W6, W0
	0x03C19050 MOVN W1, 0x0
	0x03C19054 MOVZ W2, 0x1
	0x03C19058 MOVZ W7, 0x1
	0x03C1905C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CC000
	006 Move X21, 0x546000
	007 Move W8, [X20+2988]
	008 Move X21, [X21+3784]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x546000
	015 Move X0, [X0+3784]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2988], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 2
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call Mesh.GetAllocArrayFromChannel, X0, X1
	027 Return X0

Method: System.Void set_tangents(UnityEngine.Vector4[] value)

Disassembly:
	0x03C19060 MOV X3, X19
	0x03C19064 MOV W4, W21
	0x03C19068 MOV W5, W31
	0x03C1906C STR W31, [X31]
	0x03C19070 BL 0x3C19098
	0x03C19074 LDP X20, X19, [X31 + 0x20]
	0x03C19078 LDP X30, X21, [X31 + 0x10]
	0x03C1907C ADD X31, X31, 0x30
	0x03C19080 RET
	0x03C19084 MOV X0, X20
	0x03C19088 LDP X20, X19, [X31 + 0x20]
	0x03C1908C LDP X30, X21, [X31 + 0x10]
	0x03C19090 ADD X31, X31, 0x30
	0x03C19094 B 0x3C18D54
	0x03C19098 STP X30, X27, [X31 - 0x50]!
	0x03C1909C STP X26, X25, [X31 + 0x10]
	0x03C190A0 STP X24, X23, [X31 + 0x20]
	0x03C190A4 STP X22, X21, [X31 + 0x30]
	0x03C190A8 STP X20, X19, [X31 + 0x40]
	0x03C190AC LDR W26, [X31 + 0x50]
	0x03C190B0 MOV X21, X3
	0x03C190B4 MOV W22, W2
	0x03C190B8 MOV W24, W1
	0x03C190BC MOV W1, W4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+2989]
	009 Move X22, [X22+3792]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3792]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2989], W8
	021 Move X4, [X22]
	022 Move X0, X20
	023 Move X2, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W1, 2
	029 Move W3, W31
	030 Move X30, [X31+48]
	031 Call Mesh.SetArrayForChannel, X0, X1, X2, X3
	032 Return 

Method: UnityEngine.Vector2[] get_uv()

Disassembly:
	0x03C190C0 MOV W2, W5
	0x03C190C4 MOV W3, W6
	0x03C190C8 MOV W23, W7
	0x03C190CC MOV W19, W6
	0x03C190D0 MOV W20, W5
	0x03C190D4 MOV X25, X0
	0x03C190D8 BL 0x3C19358
	0x03C190DC ADRP X27, 0x7CB000
	0x03C190E0 LDR X8, [X27 + 0xB08]
	0x03C190E4 CBNZ X8, 0x3C190FC
	0x03C190E8 ADRP X0, 0xFFFFFFFFFCF09000
	0x03C190EC ADD X0, X0, 0xF36
	0x03C190F0 BL 0x1C16CB8
	0x03C190F4 MOV X8, X0
	0x03C190F8 STR X0, [X27 + 0xB08]
	0x03C190FC AND W7, W23, 0x1
	0x03C19100 STR W26, [X31 + 0x50]
	0x03C19104 MOV X0, X25
	0x03C19108 MOV W1, W24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CC000
	006 Move X21, 0x546000
	007 Move W8, [X20+2990]
	008 Move X21, [X21+3800]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x546000
	015 Move X0, [X0+3800]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2990], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 4
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call Mesh.GetAllocArrayFromChannel, X0, X1
	027 Return X0

Method: System.Void set_uv(UnityEngine.Vector2[] value)

Disassembly:
	0x03C1910C MOV W3, W22
	0x03C19110 MOV X4, X21
	0x03C19114 MOV W5, W20
	0x03C19118 MOV W6, W19
	0x03C1911C LDP X20, X19, [X31 + 0x40]
	0x03C19120 LDP X22, X21, [X31 + 0x30]
	0x03C19124 LDP X24, X23, [X31 + 0x20]
	0x03C19128 LDP X26, X25, [X31 + 0x10]
	0x03C1912C MOV W2, W31
	0x03C19130 LDP X30, X27, [X31], #0x50
	0x03C19134 BR X8
	0x03C19138 MOVZ W2, 0x1
	0x03C1913C B 0x3C19140
	0x03C19140 STR X30, [X31 - 0x30]!
	0x03C19144 STP X22, X21, [X31 + 0x10]
	0x03C19148 STP X20, X19, [X31 + 0x20]
	0x03C1914C ADRP X22, 0x7CB000
	0x03C19150 LDRB W8, [X22 + 0xBCA]
	0x03C19154 MOV W20, W2
	0x03C19158 MOV W19, W1
	0x03C1915C MOV X21, X0
	0x03C19160 TBNZ X8, 0x0, 0x3C19178
	0x03C19164 ADRP X0, 0x4DB000
	0x03C19168 LDR X0, [X0 + 0xE58]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+2991]
	009 Move X22, [X22+3808]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3808]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2991], W8
	021 Move X4, [X22]
	022 Move X0, X20
	023 Move X2, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W1, 4
	029 Move W3, W31
	030 Move X30, [X31+48]
	031 Call Mesh.SetArrayForChannel, X0, X1, X2, X3
	032 Return 

Method: UnityEngine.Vector2[] get_uv2()

Disassembly:
	0x03C1916C BL 0x1C16CF4
	0x03C19170 MOVZ W8, 0x1
	0x03C19174 STRB W8, [X22 + 0xBCA]
	0x03C19178 MOVZ W2, 0x1
	0x03C1917C MOV X0, X21
	0x03C19180 MOV W1, W19
	0x03C19184 BL 0x3C18DEC
	0x03C19188 TBZ X0, 0x0, 0x3C191C8
	0x03C1918C ADRP X22, 0x7CB000
	0x03C19190 LDR X3, [X22 + 0xAF8]
	0x03C19194 CBNZ X3, 0x3C191AC
	0x03C19198 ADRP X0, 0xFFFFFFFFFCEE9000
	0x03C1919C ADD X0, X0, 0xECE
	0x03C191A0 BL 0x1C16CB8
	0x03C191A4 MOV X3, X0
	0x03C191A8 STR X0, [X22 + 0xAF8]
	0x03C191AC AND W2, W20, 0x1
	0x03C191B0 MOV X0, X21
	0x03C191B4 MOV W1, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CC000
	006 Move X21, 0x546000
	007 Move W8, [X20+2992]
	008 Move X21, [X21+3800]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x546000
	015 Move X0, [X0+3800]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2992], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 5
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call Mesh.GetAllocArrayFromChannel, X0, X1
	027 Return X0

Method: System.Void set_uv2(UnityEngine.Vector2[] value)

Disassembly:
	0x03C191B8 LDP X20, X19, [X31 + 0x20]
	0x03C191BC LDP X22, X21, [X31 + 0x10]
	0x03C191C0 LDR X30, [X31], #0x30
	0x03C191C4 BR X3
	0x03C191C8 ADRP X8, 0x4DB000
	0x03C191CC LDR X8, [X8 + 0xE58]
	0x03C191D0 LDP X20, X19, [X31 + 0x20]
	0x03C191D4 LDP X22, X21, [X31 + 0x10]
	0x03C191D8 MOV W1, W31
	0x03C191DC LDR X0, [X8]
	0x03C191E0 LDR X30, [X31], #0x30
	0x03C191E4 B 0x1C16D6C
	0x03C191E8 MOVZ W2, 0x1
	0x03C191EC B 0x3C191F0
	0x03C191F0 STR X30, [X31 - 0x30]!
	0x03C191F4 STP X22, X21, [X31 + 0x10]
	0x03C191F8 STP X20, X19, [X31 + 0x20]
	0x03C191FC ADRP X22, 0x7CB000
	0x03C19200 LDRB W8, [X22 + 0xBCB]
	0x03C19204 MOV W20, W2
	0x03C19208 MOV W19, W1
	0x03C1920C MOV X21, X0
	0x03C19210 TBNZ X8, 0x0, 0x3C19228
	0x03C19214 ADRP X0, 0x4DB000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+2993]
	009 Move X22, [X22+3808]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3808]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2993], W8
	021 Move X4, [X22]
	022 Move X0, X20
	023 Move X2, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W1, 5
	029 Move W3, W31
	030 Move X30, [X31+48]
	031 Call Mesh.SetArrayForChannel, X0, X1, X2, X3
	032 Return 

Method: UnityEngine.Color[] get_colors()

Disassembly:
	0x03C19218 LDR X0, [X0 + 0xE58]
	0x03C1921C BL 0x1C16CF4
	0x03C19220 MOVZ W8, 0x1
	0x03C19224 STRB W8, [X22 + 0xBCB]
	0x03C19228 MOV X0, X21
	0x03C1922C MOV W1, W19
	0x03C19230 MOV W2, W31
	0x03C19234 BL 0x3C18DEC
	0x03C19238 TBZ X0, 0x0, 0x3C19278
	0x03C1923C ADRP X22, 0x7CB000
	0x03C19240 LDR X3, [X22 + 0xB00]
	0x03C19244 CBNZ X3, 0x3C1925C
	0x03C19248 ADRP X0, 0xFFFFFFFFFCF03000
	0x03C1924C ADD X0, X0, 0xFD0
	0x03C19250 BL 0x1C16CB8
	0x03C19254 MOV X3, X0
	0x03C19258 STR X0, [X22 + 0xB00]
	0x03C1925C AND W2, W20, 0x1
	0x03C19260 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CC000
	006 Move X21, 0x546000
	007 Move W8, [X20+2994]
	008 Move X21, [X21+3816]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x546000
	015 Move X0, [X0+3816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2994], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 3
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call 0x221A168, X0, X1
	027 Return X0

Method: System.Void set_colors(UnityEngine.Color[] value)

Disassembly:
	0x03C19264 MOV W1, W19
	0x03C19268 LDP X20, X19, [X31 + 0x20]
	0x03C1926C LDP X22, X21, [X31 + 0x10]
	0x03C19270 LDR X30, [X31], #0x30
	0x03C19274 BR X3
	0x03C19278 ADRP X8, 0x4DB000
	0x03C1927C LDR X8, [X8 + 0xE58]
	0x03C19280 LDP X20, X19, [X31 + 0x20]
	0x03C19284 LDP X22, X21, [X31 + 0x10]
	0x03C19288 MOV W1, W31
	0x03C1928C LDR X0, [X8]
	0x03C19290 LDR X30, [X31], #0x30
	0x03C19294 B 0x1C16D6C
	0x03C19298 STP X30, X21, [X31 - 0x20]!
	0x03C1929C STP X20, X19, [X31 + 0x10]
	0x03C192A0 TBNZ X1, 0x1F, 0x3C19310
	0x03C192A4 ADRP X21, 0x7CB000
	0x03C192A8 LDR X8, [X21 + 0xB50]
	0x03C192AC MOV W19, W1
	0x03C192B0 MOV X20, X0
	0x03C192B4 CBNZ X8, 0x3C192CC
	0x03C192B8 ADRP X0, 0xFFFFFFFFFCEF2000
	0x03C192BC ADD X0, X0, 0x175
	0x03C192C0 BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+2995]
	009 Move X22, [X22+3824]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3824]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2995], W8
	021 Move X4, [X22]
	022 Move X0, X20
	023 Move X2, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W1, 3
	029 Move W3, W31
	030 Move X30, [X31+48]
	031 Call 0x221ADD4, X0, X1, X2, X3
	032 Return 

Method: UnityEngine.Color32[] get_colors32()

Disassembly:
	0x03C192C4 MOV X8, X0
	0x03C192C8 STR X0, [X21 + 0xB50]
	0x03C192CC MOV X0, X20
	0x03C192D0 BLR X8
	0x03C192D4 CMP W0, W19
	0x03C192D8 B.LE 0x3C19310
	0x03C192DC ADRP X21, 0x7CB000
	0x03C192E0 LDR X2, [X21 + 0xAF0]
	0x03C192E4 CBNZ X2, 0x3C192FC
	0x03C192E8 ADRP X0, 0xFFFFFFFFFCEF0000
	0x03C192EC ADD X0, X0, 0x57
	0x03C192F0 BL 0x1C16CB8
	0x03C192F4 MOV X2, X0
	0x03C192F8 STR X0, [X21 + 0xAF0]
	0x03C192FC MOV X0, X20
	0x03C19300 MOV W1, W19
	0x03C19304 LDP X20, X19, [X31 + 0x10]
	0x03C19308 LDP X30, X21, [X31], #0x20
	0x03C1930C BR X2
	0x03C19310 ADRP X0, 0x4E4000
	0x03C19314 LDR X0, [X0 + 0xF78]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CC000
	006 Move X21, 0x546000
	007 Move W8, [X20+2996]
	008 Move X21, [X21+3832]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x546000
	015 Move X0, [X0+3832]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2996], W8
	019 Move X4, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, 3
	024 Move W2, 2
	025 Move W3, 4
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Call Mesh.GetAllocArrayFromChannel, X0, X1, X2, X3
	029 Return X0

Method: System.Void set_colors32(UnityEngine.Color32[] value)

Disassembly:
	0x03C19318 BL 0x1C16D08
	0x03C1931C BL 0x1C16F10
	0x03C19320 MOV X19, X0
	0x03C19324 ADRP X0, 0x545000
	0x03C19328 LDR X0, [X0 + 0xF88]
	0x03C1932C BL 0x1C16D08
	0x03C19330 MOV X1, X0
	0x03C19334 MOV X0, X19
	0x03C19338 MOV X2, X31
	0x03C1933C BL 0x3379B6C
	0x03C19340 ADRP X0, 0x545000
	0x03C19344 LDR X0, [X0 + 0xF90]
	0x03C19348 BL 0x1C16D08
	0x03C1934C MOV X1, X0
	0x03C19350 MOV X0, X19
	0x03C19354 BL 0x1C16DEC
	0x03C19358 SUB X31, X31, 0x30
	0x03C1935C STP X30, X21, [X31 + 0x10]
	0x03C19360 STP X20, X19, [X31 + 0x20]
	0x03C19364 TBNZ X2, 0x1F, 0x3C19394
	0x03C19368 TBNZ X3, 0x1F, 0x3C193E0
	0x03C1936C CMP W2, W1
	0x03C19370 B.LT 0x3C19378
	0x03C19374 CBNZ W3, 0x3C1942C
	0x03C19378 ADD W8, W3, W2
	0x03C1937C CMP W8, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+2997]
	009 Move X22, [X22+3840]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3840]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2997], W8
	021 Move X6, [X22]
	022 Move X0, X20
	023 Move X4, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W1, 3
	029 Move W2, 2
	030 Move W3, 4
	031 Move W5, W31
	032 Move X30, [X31+48]
	033 Call 0x221B040, X0, X1, X2, X3, X4, X5
	034 Return 

Method: System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices)

Disassembly:
	0x03C19380 B.GT 0x3C19478
	0x03C19384 LDP X20, X19, [X31 + 0x20]
	0x03C19388 LDP X30, X21, [X31 + 0x10]
	0x03C1938C ADD X31, X31, 0x30
	0x03C19390 RET
	0x03C19394 STR W2, [X31 + 0xC]
	0x03C19398 ADRP X0, 0x4DA000
	0x03C1939C LDR X0, [X0 + 0x758]
	0x03C193A0 BL 0x1C16D08
	0x03C193A4 ADD X1, X31, 0xC
	0x03C193A8 BL 0x1C16E04
	0x03C193AC MOV X19, X0
	0x03C193B0 ADRP X0, 0x4E2000
	0x03C193B4 LDR X0, [X0 + 0x760]
	0x03C193B8 BL 0x1C16D08
	0x03C193BC BL 0x1C16F10
	0x03C193C0 MOV X20, X0
	0x03C193C4 ADRP X0, 0x514000
	0x03C193C8 LDR X0, [X0 + 0x3D0]
	0x03C193CC BL 0x1C16D08
	0x03C193D0 MOV X21, X0
	0x03C193D4 ADRP X0, 0x545000
	0x03C193D8 LDR X0, [X0 + 0xF98]
	0x03C193DC B 0x3C194C0
	0x03C193E0 STR W3, [X31 + 0xC]
	0x03C193E4 ADRP X0, 0x4DA000
	0x03C193E8 LDR X0, [X0 + 0x758]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+2998]
	009 Move X22, [X22+3848]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3848]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2998], W8
	021 Move X1, [X22]
	022 Move X0, X19
	023 Call NoAllocHelpers.SafeLength, X0
	024 Move W3, W0
	025 Move X0, X20
	026 Move X1, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move W2, W31
	032 Move W4, W31
	033 Move X30, [X31+48]
	034 Call Mesh.SetVertices, X0, X1, X2, X3, X4
	035 Return 

Method: System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C193EC BL 0x1C16D08
	0x03C193F0 ADD X1, X31, 0xC

ISIL:
	001 Move W4, W31

Method: System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C193F4 BL 0x1C16E04
	0x03C193F8 MOV X19, X0
	0x03C193FC ADRP X0, 0x4E2000
	0x03C19400 LDR X0, [X0 + 0x760]
	0x03C19404 BL 0x1C16D08
	0x03C19408 BL 0x1C16F10
	0x03C1940C MOV X20, X0
	0x03C19410 ADRP X0, 0x4E2000
	0x03C19414 LDR X0, [X0 + 0x768]
	0x03C19418 BL 0x1C16D08
	0x03C1941C MOV X21, X0
	0x03C19420 ADRP X0, 0x545000
	0x03C19424 LDR X0, [X0 + 0xFA0]
	0x03C19428 B 0x3C194C0
	0x03C1942C STR W2, [X31 + 0xC]
	0x03C19430 ADRP X0, 0x4DA000
	0x03C19434 LDR X0, [X0 + 0x758]
	0x03C19438 BL 0x1C16D08
	0x03C1943C ADD X1, X31, 0xC
	0x03C19440 BL 0x1C16E04
	0x03C19444 MOV X19, X0
	0x03C19448 ADRP X0, 0x4E2000
	0x03C1944C LDR X0, [X0 + 0x760]
	0x03C19450 BL 0x1C16D08
	0x03C19454 BL 0x1C16F10
	0x03C19458 MOV X20, X0
	0x03C1945C ADRP X0, 0x514000
	0x03C19460 LDR X0, [X0 + 0x3D0]
	0x03C19464 BL 0x1C16D08
	0x03C19468 MOV X21, X0
	0x03C1946C ADRP X0, 0x545000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x7CC000
	010 Move X25, 0x546000
	011 Move W8, [X24+2999]
	012 Move X25, [X25+3856]
	013 Move W19, W4
	014 Move W20, W3
	015 Move W21, W2
	016 Move X22, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x546000
	023 Move X0, [X0+3856]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+2999], W8
	027 Move X6, [X25]
	028 Move X0, X23
	029 Move X2, X22
	030 Move W3, W21
	031 Move W4, W20
	032 Move W5, W19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 Move W1, W31
	040 Move X30, [X31+64]
	041 Move X25, [X31+72]
	042 Call Mesh.SetListForChannel, X0, X1, X2, X3, X4, X5
	043 Return 

Method: System.Void SetVertices(UnityEngine.Vector3[] inVertices)

Disassembly:
	0x03C19470 LDR X0, [X0 + 0xFA8]
	0x03C19474 B 0x3C194C0
	0x03C19478 STR W8, [X31 + 0xC]
	0x03C1947C ADRP X0, 0x4DA000
	0x03C19480 LDR X0, [X0 + 0x758]
	0x03C19484 BL 0x1C16D08
	0x03C19488 ADD X1, X31, 0xC
	0x03C1948C BL 0x1C16E04
	0x03C19490 MOV X19, X0
	0x03C19494 ADRP X0, 0x4E2000
	0x03C19498 LDR X0, [X0 + 0x760]
	0x03C1949C BL 0x1C16D08
	0x03C194A0 BL 0x1C16F10
	0x03C194A4 MOV X20, X0
	0x03C194A8 ADRP X0, 0x4E2000
	0x03C194AC LDR X0, [X0 + 0x768]
	0x03C194B0 BL 0x1C16D08
	0x03C194B4 MOV X21, X0
	0x03C194B8 ADRP X0, 0x545000
	0x03C194BC LDR X0, [X0 + 0xFB0]
	0x03C194C0 BL 0x1C16D08
	0x03C194C4 MOV X3, X0
	0x03C194C8 MOV X0, X20
	0x03C194CC MOV X1, X21
	0x03C194D0 MOV X2, X19
	0x03C194D4 MOV X4, X31

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X1
	007 Move X20, X0
	008 Move X0, X1
	009 Move X1, X31
	010 Call NoAllocHelpers.SafeLength, X0
	011 Move W21, W0
	012 Move X0, X19
	013 Move X1, X31
	014 Call NoAllocHelpers.SafeLength, X0
	015 Move W5, W0
	016 Move W3, 3
	017 Move X0, X20
	018 Move W1, W31
	019 Move W2, W31
	020 Move X4, X19
	021 Move W6, W31
	022 Move W7, W21
	023 Move [X31], W31
	024 Call Mesh.SetSizedArrayForChannel, X0, X1, X2, X3, X4, X5, X6, X7, X8
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X30, [X31+16]
	028 Move X21, [X31+24]
	029 Add X31, X31, 48
	030 Return 

Method: System.Void SetVertices(UnityEngine.Vector3[] inVertices, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C194D8 BL 0x3312C8C
	0x03C194DC ADRP X0, 0x545000
	0x03C194E0 LDR X0, [X0 + 0xFB8]
	0x03C194E4 BL 0x1C16D08
	0x03C194E8 MOV X1, X0
	0x03C194EC MOV X0, X20
	0x03C194F0 BL 0x1C16DEC
	0x03C194F4 STP X30, X21, [X31 - 0x20]!
	0x03C194F8 STP X20, X19, [X31 + 0x10]
	0x03C194FC MOV X20, X1
	0x03C19500 MOV X21, X0
	0x03C19504 MOV X0, X1
	0x03C19508 MOV X1, X31
	0x03C1950C MOV W19, W2
	0x03C19510 BL 0x3C36C34
	0x03C19514 MOV X1, X20
	0x03C19518 MOV W4, W19
	0x03C1951C LDP X20, X19, [X31 + 0x10]
	0x03C19520 MOVZ W5, 0x1
	0x03C19524 MOV W3, W0
	0x03C19528 MOV X0, X21
	0x03C1952C MOV W2, W31
	0x03C19530 MOV W6, W31
	0x03C19534 LDP X30, X21, [X31], #0x20
	0x03C19538 B 0x3C19594
	0x03C1953C STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, X1
	008 Move X22, X0
	009 Move X0, X1
	010 Move X1, X31
	011 Move W19, W3
	012 Move W20, W2
	013 Call NoAllocHelpers.SafeLength, X0
	014 Move W5, W0
	015 Move W3, 3
	016 Move X0, X22
	017 Move W1, W31
	018 Move W2, W31
	019 Move X4, X21
	020 Move W6, W20
	021 Move W7, W19
	022 Move [X31], W31
	023 Call Mesh.SetSizedArrayForChannel, X0, X1, X2, X3, X4, X5, X6, X7, X8
	024 Move X20, [X31+48]
	025 Move X19, [X31+56]
	026 Move X22, [X31+32]
	027 Move X21, [X31+40]
	028 Move X30, [X31+16]
	029 Add X31, X31, 64
	030 Return 

Method: System.Void SetVertices(UnityEngine.Vector3[] inVertices, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C19540 STP X22, X21, [X31 + 0x10]
	0x03C19544 STP X20, X19, [X31 + 0x20]
	0x03C19548 MOV X22, X1
	0x03C1954C MOV X23, X0
	0x03C19550 MOV X0, X1
	0x03C19554 MOV X1, X31
	0x03C19558 MOV W19, W4
	0x03C1955C MOV W20, W3
	0x03C19560 MOV W21, W2
	0x03C19564 BL 0x3C36C34
	0x03C19568 AND W5, W20, 0x1
	0x03C1956C MOV X1, X22
	0x03C19570 MOV W4, W21
	0x03C19574 MOV W6, W19
	0x03C19578 LDP X20, X19, [X31 + 0x20]
	0x03C1957C LDP X22, X21, [X31 + 0x10]
	0x03C19580 MOV W3, W0
	0x03C19584 MOV X0, X23
	0x03C19588 MOV W2, W31
	0x03C1958C LDP X30, X23, [X31], #0x30
	0x03C19590 B 0x3C19594
	0x03C19594 SUB X31, X31, 0x50
	0x03C19598 STP X30, X25, [X31 + 0x10]
	0x03C1959C STP X24, X23, [X31 + 0x20]
	0x03C195A0 STP X22, X21, [X31 + 0x30]
	0x03C195A4 STP X20, X19, [X31 + 0x40]
	0x03C195A8 MOV W22, W2

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, X1
	009 Move X23, X0
	010 Move X0, X1
	011 Move X1, X31
	012 Move W19, W4
	013 Move W20, W3
	014 Move W21, W2
	015 Call NoAllocHelpers.SafeLength, X0
	016 Move W5, W0
	017 Move W3, 3
	018 Move X0, X23
	019 Move W1, W31
	020 Move W2, W31
	021 Move X4, X22
	022 Move W6, W21
	023 Move W7, W20
	024 Move [X31], W19
	025 Call Mesh.SetSizedArrayForChannel, X0, X1, X2, X3, X4, X5, X6, X7, X8
	026 Move X20, [X31+48]
	027 Move X19, [X31+56]
	028 Move X22, [X31+32]
	029 Move X21, [X31+40]
	030 Move X30, [X31+16]
	031 Move X23, [X31+24]
	032 Add X31, X31, 64
	033 Return 

Method: System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals)

Disassembly:
	0x03C195AC MOV X23, X1
	0x03C195B0 MOVZ W2, 0x1
	0x03C195B4 MOV W1, W4
	0x03C195B8 MOV W20, W6
	0x03C195BC MOV W25, W5
	0x03C195C0 MOV W21, W4
	0x03C195C4 MOV W19, W3
	0x03C195C8 MOV X24, X0
	0x03C195CC BL 0x3C18DEC
	0x03C195D0 TBZ X0, 0x0, 0x3C19608
	0x03C195D4 MOV X0, X23
	0x03C195D8 MOV X1, X31
	0x03C195DC BL 0x3C36C34
	0x03C195E0 MOV W4, W0
	0x03C195E4 AND W7, W25, 0x1
	0x03C195E8 MOVZ W2, 0x1
	0x03C195EC MOV X0, X24
	0x03C195F0 MOV W1, W21
	0x03C195F4 MOV X3, X23
	0x03C195F8 MOV W5, W22
	0x03C195FC MOV W6, W19
	0x03C19600 STR W20, [X31]
	0x03C19604 BL 0x3C19098
	0x03C19608 LDP X20, X19, [X31 + 0x40]
	0x03C1960C LDP X22, X21, [X31 + 0x30]
	0x03C19610 LDP X24, X23, [X31 + 0x20]
	0x03C19614 LDP X30, X25, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+3000]
	009 Move X22, [X22+3848]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3848]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3000], W8
	021 Move X1, [X22]
	022 Move X0, X19
	023 Call NoAllocHelpers.SafeLength, X0
	024 Move W3, W0
	025 Move X0, X20
	026 Move X1, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move W2, W31
	032 Move W4, W31
	033 Move X30, [X31+48]
	034 Call Mesh.SetNormals, X0, X1, X2, X3, X4
	035 Return 

Method: System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C19618 ADD X31, X31, 0x50
	0x03C1961C RET

ISIL:
	001 Move W4, W31

Method: System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C19620 MOVZ W3, 0x1
	0x03C19624 MOV W4, W31
	0x03C19628 B 0x3C1962C
	0x03C1962C STP X30, X25, [X31 - 0x40]!
	0x03C19630 STP X24, X23, [X31 + 0x10]
	0x03C19634 STP X22, X21, [X31 + 0x20]
	0x03C19638 STP X20, X19, [X31 + 0x30]
	0x03C1963C ADRP X24, 0x7CB000
	0x03C19640 ADRP X25, 0x545000
	0x03C19644 LDRB W8, [X24 + 0xBCC]
	0x03C19648 LDR X25, [X25 + 0xFC0]
	0x03C1964C MOV W19, W4
	0x03C19650 MOV W22, W3
	0x03C19654 MOV W20, W2
	0x03C19658 MOV X21, X1
	0x03C1965C MOV X23, X0
	0x03C19660 TBNZ X8, 0x0, 0x3C19678
	0x03C19664 ADRP X0, 0x545000
	0x03C19668 LDR X0, [X0 + 0xFC0]
	0x03C1966C BL 0x1C16CF4
	0x03C19670 MOVZ W8, 0x1
	0x03C19674 STRB W8, [X24 + 0xBCC]
	0x03C19678 LDR X1, [X25]
	0x03C1967C MOV X0, X21
	0x03C19680 BL 0x222CD5C
	0x03C19684 AND W5, W22, 0x1
	0x03C19688 MOV W3, W0
	0x03C1968C MOV X0, X23
	0x03C19690 MOV X1, X21
	0x03C19694 MOV W4, W20
	0x03C19698 MOV W6, W19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x7CC000
	010 Move X25, 0x546000
	011 Move W8, [X24+3001]
	012 Move X25, [X25+3856]
	013 Move W19, W4
	014 Move W20, W3
	015 Move W21, W2
	016 Move X22, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x546000
	023 Move X0, [X0+3856]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3001], W8
	027 Move X6, [X25]
	028 Move X0, X23
	029 Move X2, X22
	030 Move W3, W21
	031 Move W4, W20
	032 Move W5, W19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 Move W1, 1
	040 Move X30, [X31+64]
	041 Move X25, [X31+72]
	042 Call Mesh.SetListForChannel, X0, X1, X2, X3, X4, X5
	043 Return 

Method: System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents)

Disassembly:
	0x03C1969C LDP X20, X19, [X31 + 0x30]
	0x03C196A0 LDP X22, X21, [X31 + 0x20]
	0x03C196A4 LDP X24, X23, [X31 + 0x10]
	0x03C196A8 MOV W2, W31
	0x03C196AC LDP X30, X25, [X31], #0x40
	0x03C196B0 B 0x3C196B4
	0x03C196B4 SUB X31, X31, 0x60
	0x03C196B8 STR X30, [X31 + 0x10]
	0x03C196BC STP X26, X25, [X31 + 0x20]
	0x03C196C0 STP X24, X23, [X31 + 0x30]
	0x03C196C4 STP X22, X21, [X31 + 0x40]
	0x03C196C8 STP X20, X19, [X31 + 0x50]
	0x03C196CC ADRP X26, 0x7CB000
	0x03C196D0 LDRB W8, [X26 + 0xBCD]
	0x03C196D4 MOV W20, W6
	0x03C196D8 MOV W23, W5
	0x03C196DC MOV W21, W4
	0x03C196E0 MOV W19, W3
	0x03C196E4 MOV W22, W2
	0x03C196E8 MOV X25, X1
	0x03C196EC MOV X24, X0
	0x03C196F0 TBNZ X8, 0x0, 0x3C19708
	0x03C196F4 ADRP X0, 0x545000
	0x03C196F8 LDR X0, [X0 + 0xFC0]
	0x03C196FC BL 0x1C16CF4
	0x03C19700 MOVZ W8, 0x1
	0x03C19704 STRB W8, [X26 + 0xBCD]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+3002]
	009 Move X22, [X22+3864]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3864]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3002], W8
	021 Move X1, [X22]
	022 Move X0, X19
	023 Call NoAllocHelpers.SafeLength, X0
	024 Move W3, W0
	025 Move X0, X20
	026 Move X1, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move W2, W31
	032 Move W4, W31
	033 Move X30, [X31+48]
	034 Call Mesh.SetTangents, X0, X1, X2, X3, X4
	035 Return 

Method: System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C19708 MOVZ W2, 0x1
	0x03C1970C MOV X0, X24

ISIL:
	001 Move W4, W31

Method: System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C19710 MOV W1, W21
	0x03C19714 BL 0x3C18DEC
	0x03C19718 TBZ X0, 0x0, 0x3C19768
	0x03C1971C ADRP X26, 0x545000
	0x03C19720 LDR X26, [X26 + 0xFC0]
	0x03C19724 MOV X0, X25
	0x03C19728 MOV X1, X31
	0x03C1972C BL 0x3C36C88
	0x03C19730 LDR X1, [X26]
	0x03C19734 MOV X26, X0
	0x03C19738 MOV X0, X25
	0x03C1973C BL 0x222CD5C
	0x03C19740 MOV W4, W0
	0x03C19744 AND W7, W23, 0x1
	0x03C19748 MOVZ W2, 0x1
	0x03C1974C MOV X0, X24
	0x03C19750 MOV W1, W21
	0x03C19754 MOV X3, X26
	0x03C19758 MOV W5, W22
	0x03C1975C MOV W6, W19
	0x03C19760 STR W20, [X31]
	0x03C19764 BL 0x3C19098
	0x03C19768 LDP X20, X19, [X31 + 0x50]
	0x03C1976C LDP X22, X21, [X31 + 0x40]
	0x03C19770 LDP X24, X23, [X31 + 0x30]
	0x03C19774 LDP X26, X25, [X31 + 0x20]
	0x03C19778 LDR X30, [X31 + 0x10]
	0x03C1977C ADD X31, X31, 0x60
	0x03C19780 RET
	0x03C19784 SUB X31, X31, 0x40
	0x03C19788 STR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x7CC000
	010 Move X25, 0x546000
	011 Move W8, [X24+3003]
	012 Move X25, [X25+3872]
	013 Move W19, W4
	014 Move W20, W3
	015 Move W21, W2
	016 Move X22, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x546000
	023 Move X0, [X0+3872]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3003], W8
	027 Move X6, [X25]
	028 Move X0, X23
	029 Move X2, X22
	030 Move W3, W21
	031 Move W4, W20
	032 Move W5, W19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 Move W1, 2
	040 Move X30, [X31+64]
	041 Move X25, [X31+72]
	042 Call Mesh.SetListForChannel, X0, X1, X2, X3, X4, X5
	043 Return 

Method: System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors)

Disassembly:
	0x03C1978C STP X22, X21, [X31 + 0x20]
	0x03C19790 STP X20, X19, [X31 + 0x30]
	0x03C19794 MOV X21, X1
	0x03C19798 MOV X22, X0
	0x03C1979C MOV X0, X1
	0x03C197A0 MOV X1, X31
	0x03C197A4 MOV W19, W3
	0x03C197A8 MOV W20, W2
	0x03C197AC BL 0x3C36C34
	0x03C197B0 MOV W3, W0
	0x03C197B4 MOVZ W6, 0x1
	0x03C197B8 MOV X0, X22
	0x03C197BC MOV X1, X21
	0x03C197C0 MOV W2, W31
	0x03C197C4 MOV W4, W20
	0x03C197C8 MOV W5, W19
	0x03C197CC MOV W7, W31
	0x03C197D0 BL 0x3C198C4
	0x03C197D4 LDP X20, X19, [X31 + 0x30]
	0x03C197D8 LDP X22, X21, [X31 + 0x20]
	0x03C197DC LDR X30, [X31 + 0x10]
	0x03C197E0 ADD X31, X31, 0x40
	0x03C197E4 RET
	0x03C197E8 SUB X31, X31, 0x50
	0x03C197EC STR X30, [X31 + 0x10]
	0x03C197F0 STP X24, X23, [X31 + 0x20]
	0x03C197F4 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+3004]
	009 Move X22, [X22+3880]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3880]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3004], W8
	021 Move X1, [X22]
	022 Move X0, X19
	023 Call 0x222DCF4, X0
	024 Move W3, W0
	025 Move X0, X20
	026 Move X1, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move W2, W31
	032 Move W4, W31
	033 Move X30, [X31+48]
	034 Call Mesh.SetColors, X0, X1, X2, X3, X4
	035 Return 

Method: System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C197F8 STP X20, X19, [X31 + 0x40]
	0x03C197FC MOV X23, X1

ISIL:
	001 Move W4, W31

Method: System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C19800 MOV X24, X0
	0x03C19804 MOV X0, X1
	0x03C19808 MOV X1, X31
	0x03C1980C MOV W19, W5
	0x03C19810 MOV W20, W4
	0x03C19814 MOV W21, W3
	0x03C19818 MOV W22, W2
	0x03C1981C BL 0x3C36C34
	0x03C19820 MOV W3, W0
	0x03C19824 AND W6, W20, 0x1
	0x03C19828 MOV X0, X24
	0x03C1982C MOV X1, X23
	0x03C19830 MOV W2, W31
	0x03C19834 MOV W4, W22
	0x03C19838 MOV W5, W21
	0x03C1983C MOV W7, W19
	0x03C19840 BL 0x3C198C4
	0x03C19844 LDP X20, X19, [X31 + 0x40]
	0x03C19848 LDP X22, X21, [X31 + 0x30]
	0x03C1984C LDP X24, X23, [X31 + 0x20]
	0x03C19850 LDR X30, [X31 + 0x10]
	0x03C19854 ADD X31, X31, 0x50
	0x03C19858 RET
	0x03C1985C SUB X31, X31, 0x40
	0x03C19860 STP X30, X23, [X31 + 0x10]
	0x03C19864 STP X22, X21, [X31 + 0x20]
	0x03C19868 STP X20, X19, [X31 + 0x30]
	0x03C1986C MOV X22, X1
	0x03C19870 MOV X23, X0
	0x03C19874 MOV X0, X1
	0x03C19878 MOV X1, X31

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x7CC000
	010 Move X25, 0x546000
	011 Move W8, [X24+3005]
	012 Move X25, [X25+3888]
	013 Move W19, W4
	014 Move W20, W3
	015 Move W21, W2
	016 Move X22, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x546000
	023 Move X0, [X0+3888]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3005], W8
	027 Move X6, [X25]
	028 Move X0, X23
	029 Move X2, X22
	030 Move W3, W21
	031 Move W4, W20
	032 Move W5, W19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 Move W1, 3
	040 Move X30, [X31+64]
	041 Move X25, [X31+72]
	042 Call 0x221B4C4, X0, X1, X2, X3, X4, X5
	043 Return 

Method: System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors)

Disassembly:
	0x03C1987C MOV W19, W4
	0x03C19880 MOV W20, W3
	0x03C19884 MOV W21, W2
	0x03C19888 BL 0x3C36C34
	0x03C1988C MOV W3, W0
	0x03C19890 AND W6, W19, 0x1
	0x03C19894 MOV X0, X23
	0x03C19898 MOV X1, X22
	0x03C1989C MOV W2, W31
	0x03C198A0 MOV W4, W21
	0x03C198A4 MOV W5, W20
	0x03C198A8 MOV W7, W31
	0x03C198AC BL 0x3C198C4
	0x03C198B0 LDP X20, X19, [X31 + 0x30]
	0x03C198B4 LDP X22, X21, [X31 + 0x20]
	0x03C198B8 LDP X30, X23, [X31 + 0x10]
	0x03C198BC ADD X31, X31, 0x40
	0x03C198C0 RET
	0x03C198C4 STP X30, X27, [X31 - 0x50]!
	0x03C198C8 STP X26, X25, [X31 + 0x10]
	0x03C198CC STP X24, X23, [X31 + 0x20]
	0x03C198D0 STP X22, X21, [X31 + 0x30]
	0x03C198D4 STP X20, X19, [X31 + 0x40]
	0x03C198D8 MOV W23, W2
	0x03C198DC MOV X24, X1
	0x03C198E0 MOV W1, W5
	0x03C198E4 MOV W2, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X22, 0x546000
	008 Move W8, [X21+3006]
	009 Move X22, [X22+3896]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x546000
	017 Move X0, [X0+3896]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3006], W8
	021 Move X1, [X22]
	022 Move X0, X19
	023 Call NoAllocHelpers.SafeLength, X0
	024 Move W3, W0
	025 Move X0, X20
	026 Move X1, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move W2, W31
	032 Move W4, W31
	033 Move X30, [X31+48]
	034 Call Mesh.SetColors, X0, X1, X2, X3, X4
	035 Return 

Method: System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C198E8 MOV W19, W7
	0x03C198EC MOV W25, W6

ISIL:
	001 Move W4, W31

Method: System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C198F0 MOV W21, W5
	0x03C198F4 MOV W22, W4
	0x03C198F8 MOV W20, W3
	0x03C198FC MOV X26, X0
	0x03C19900 BL 0x3C18DEC
	0x03C19904 TBZ X0, 0x0, 0x3C19980
	0x03C19908 MOV X0, X24
	0x03C1990C MOV X1, X31
	0x03C19910 BL 0x3C36C34
	0x03C19914 MOV W1, W0
	0x03C19918 MOV W2, W23
	0x03C1991C MOV W3, W20
	0x03C19920 BL 0x3C19358
	0x03C19924 ADRP X27, 0x7CB000
	0x03C19928 LDR X8, [X27 + 0xB08]
	0x03C1992C CBNZ X8, 0x3C19944
	0x03C19930 ADRP X0, 0xFFFFFFFFFCF09000
	0x03C19934 ADD X0, X0, 0xF36
	0x03C19938 BL 0x1C16CB8
	0x03C1993C MOV X8, X0
	0x03C19940 STR X0, [X27 + 0xB08]
	0x03C19944 AND W7, W25, 0x1
	0x03C19948 STR W19, [X31 + 0x50]
	0x03C1994C MOV X0, X26
	0x03C19950 MOV W1, W21
	0x03C19954 MOV W2, W22
	0x03C19958 MOV X4, X24
	0x03C1995C MOV W5, W23
	0x03C19960 MOV W6, W20
	0x03C19964 LDP X20, X19, [X31 + 0x40]
	0x03C19968 LDP X22, X21, [X31 + 0x30]
	0x03C1996C LDP X24, X23, [X31 + 0x20]
	0x03C19970 LDP X26, X25, [X31 + 0x10]
	0x03C19974 MOVZ W3, 0x1
	0x03C19978 LDP X30, X27, [X31], #0x50
	0x03C1997C BR X8
	0x03C19980 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x7CC000
	011 Move X25, 0x546000
	012 Move W8, [X24+3007]
	013 Move X25, [X25+3904]
	014 Move W19, W4
	015 Move W20, W3
	016 Move W21, W2
	017 Move X22, X1
	018 Move X23, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x546000
	024 Move X0, [X0+3904]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+3007], W8
	028 Move X8, [X25]
	029 Move W1, 3
	030 Move W2, 2
	031 Move W3, 4
	032 Move X0, X23
	033 Move X4, X22
	034 Move W5, W21
	035 Move W6, W20
	036 Move W7, W19
	037 Move [X31], X8
	038 Call 0x221B7B8, X0, X1, X2, X3, X4, X5, X6, X7
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X22, [X31+48]
	042 Move X21, [X31+56]
	043 Move X24, [X31+32]
	044 Move X23, [X31+40]
	045 Move X30, [X31+16]
	046 Move X25, [X31+24]
	047 Add X31, X31, 80
	048 Return 

Method: System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Collections.Generic.List`1<T> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x0221BB40 STP X20, X19, [X31 + 0x60]
	0x0221BB44 LDR X8, [X4 + 0x38]
	0x0221BB48 MOV X21, X4
	0x0221BB4C MOV X22, X3
	0x0221BB50 MOV X20, X2
	0x0221BB54 MOV X23, X1
	0x0221BB58 MOV X19, X0
	0x0221BB5C CBNZ X8, 0x221BBAC
	0x0221BB60 ADRP X0, 0x1ED8000
	0x0221BB64 LDR X0, [X0 + 0xE00]
	0x0221BB68 BL 0x1C16CF4
	0x0221BB6C ADRP X0, 0x1ED8000
	0x0221BB70 LDR X0, [X0 + 0xE18]
	0x0221BB74 BL 0x1C16CF4
	0x0221BB78 ADRP X0, 0x1F01000
	0x0221BB7C LDR X0, [X0 + 0xC0]
	0x0221BB80 BL 0x1C16CF4
	0x0221BB84 ADRP X0, 0x1F01000
	0x0221BB88 LDR X0, [X0 + 0xC8]
	0x0221BB8C BL 0x1C16CF4
	0x0221BB90 ADRP X0, 0x1F01000
	0x0221BB94 LDR X0, [X0 + 0xD0]
	0x0221BB98 BL 0x1C16CF4
	0x0221BB9C LDR X8, [X21 + 0x38]
	0x0221BBA0 CBNZ X8, 0x221BBAC
	0x0221BBA4 MOV X0, X21
	0x0221BBA8 BL 0x1C5C6E0
	0x0221BBAC ADRP X8, 0x1F01000
	0x0221BBB0 LDR X8, [X8 + 0xC8]
	0x0221BBB4 MOV X1, X23
	0x0221BBB8 MOV X2, X31
	0x0221BBBC LDR X0, [X8]
	0x0221BBC0 BL 0x321B938
	0x0221BBC4 CBZ X19, 0x221BE50
	0x0221BBC8 MOV X1, X0
	0x0221BBCC MOV X0, X19
	0x0221BBD0 MOV X2, X31
	0x0221BBD4 BL 0x32338A8
	0x0221BBD8 CBZ X20, 0x221BE18
	0x0221BBDC LDR X8, [X21 + 0x38]
	0x0221BBE0 MOV X0, X20
	0x0221BBE4 LDR X1, [X8 + 0x8]
	0x0221BBE8 BL 0x21B2148
	0x0221BBEC TBZ X0, 0x0, 0x221BE18
	0x0221BBF0 LDR X8, [X21 + 0x38]
	0x0221BBF4 LDR X1, [X8]
	0x0221BBF8 LDRB W8, [X1 + 0x135]
	0x0221BBFC TBNZ X8, 0x0, 0x221BC0C
	0x0221BC00 MOV X0, X1
	0x0221BC04 BL 0x1C5C684
	0x0221BC08 MOV X1, X0
	0x0221BC0C LDR X8, [X20]
	0x0221BC10 LDRH W9, [X8 + 0x12E]
	0x0221BC14 CBZ X9, 0x221BC38
	0x0221BC18 LDR X10, [X8 + 0xB0]
	0x0221BC1C ADD X10, X10, 0x8
	0x0221BC20 LDUR X11, [X10 - 0x8]
	0x0221BC24 CMP X11, X1
	0x0221BC28 B.EQ 0x221BC48
	0x0221BC2C SUBS X9, X9, 0x1
	0x0221BC30 ADD X10, X10, 0x10
	0x0221BC34 B.NE 0x221BC20
	0x0221BC38 MOV X0, X20
	0x0221BC3C MOV W2, W31
	0x0221BC40 BL 0x1C5C788
	0x0221BC44 B 0x221BC54
	0x0221BC48 LDRSW X9, [X10]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X8, [X7+56]
	012 Move X24, X7
	013 Move W19, W6
	014 Move W20, W5
	015 Move W21, W4
	016 Move X22, X3
	017 Move W23, W2
	018 Move W26, W1
	019 Move X25, X0
	020 Compare X8, 0
	021 JumpIfNotEqual {33}
	022 Move X0, 0x1ED9000
	023 Move X0, [X0+2600]
	024 Call 0x1C17CF4
	025 Move X0, 0x1F02000
	026 Move X0, [X0+136]
	027 Call 0x1C17CF4
	028 Move X8, [X24+56]
	029 Compare X8, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X24
	032 Call 0x1C5D6E0
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W0, W26
	035 Move X1, X31
	036 Call Mesh.GetUVChannel, X0
	037 Move X8, [X24+56]
	038 Move W1, W0
	039 Move X0, X25
	040 Move W2, W31
	041 Move X8, [X8+8]
	042 Move W3, W23
	043 Move X4, X22
	044 Move W5, W21
	045 Move W6, W20
	046 Move W7, W19
	047 Move [X31], X8
	048 Call Mesh.SetListForChannel, X0, X1, X2, X3, X4, X5, X6, X7
	049 Move X20, [X31+80]
	050 Move X19, [X31+88]
	051 Move X22, [X31+64]
	052 Move X21, [X31+72]
	053 Move X24, [X31+48]
	054 Move X23, [X31+56]
	055 Move X26, [X31+32]
	056 Move X25, [X31+40]
	057 Move X30, [X31+16]
	058 Add X31, X31, 96
	059 Return 
	060 Move X8, 0x1ED9000
	061 Move X8, [X8+2600]
	062 Move X0, [X8]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X8, 0x1F02000
	068 Move X8, [X8+136]
	069 Move X20, [X31+80]
	070 Move X19, [X31+88]
	071 Move X22, [X31+64]
	072 Move X21, [X31+72]
	073 Move X24, [X31+48]
	074 Move X23, [X31+56]
	075 Move X0, [X8]
	076 Move X26, [X31+32]
	077 Move X25, [X31+40]
	078 Move X30, [X31+16]
	079 Move X1, X31
	080 Add X31, X31, 96
	081 Call Debug.LogError, X0
	082 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)

Disassembly:
	0x03C19984 LDP X22, X21, [X31 + 0x30]
	0x03C19988 LDP X24, X23, [X31 + 0x20]
	0x03C1998C LDP X26, X25, [X31 + 0x10]
	0x03C19990 LDP X30, X27, [X31], #0x50
	0x03C19994 RET
	0x03C19998 SUB X31, X31, 0x50
	0x03C1999C STR X30, [X31 + 0x10]
	0x03C199A0 STP X24, X23, [X31 + 0x20]
	0x03C199A4 STP X22, X21, [X31 + 0x30]
	0x03C199A8 STP X20, X19, [X31 + 0x40]
	0x03C199AC MOV X23, X1
	0x03C199B0 MOV X24, X0
	0x03C199B4 MOV X0, X1
	0x03C199B8 MOV X1, X31
	0x03C199BC MOV W19, W5
	0x03C199C0 MOV W20, W4
	0x03C199C4 MOV W21, W3
	0x03C199C8 MOV W22, W2
	0x03C199CC BL 0x3C36C34
	0x03C199D0 MOV W3, W0
	0x03C199D4 AND W6, W20, 0x1
	0x03C199D8 MOV X0, X24
	0x03C199DC MOV X1, X23
	0x03C199E0 MOV W2, W31
	0x03C199E4 MOV W4, W22
	0x03C199E8 MOV W5, W21
	0x03C199EC MOV W7, W19
	0x03C199F0 BL 0x3C19A0C
	0x03C199F4 LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7CC000
	008 Move X23, 0x546000
	009 Move W8, [X22+3008]
	010 Move X23, [X23+3912]
	011 Move X19, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x546000
	019 Move X0, [X0+3912]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3008], W8
	023 Move X1, [X23]
	024 Move X0, X19
	025 Call NoAllocHelpers.SafeLength, X0
	026 Move W4, W0
	027 Move X0, X21
	028 Move W1, W20
	029 Move X2, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move W3, W31
	035 Move W5, W31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call Mesh.SetUVs, X0, X1, X2, X3, X4, X5
	039 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)

Disassembly:
	0x03C19A00 LDR X30, [X31 + 0x10]
	0x03C19A04 ADD X31, X31, 0x50
	0x03C19A08 RET
	0x03C19A0C STP X30, X27, [X31 - 0x50]!
	0x03C19A10 STP X26, X25, [X31 + 0x10]
	0x03C19A14 STP X24, X23, [X31 + 0x20]
	0x03C19A18 STP X22, X21, [X31 + 0x30]
	0x03C19A1C STP X20, X19, [X31 + 0x40]
	0x03C19A20 MOV W20, W2
	0x03C19A24 MOV X24, X1
	0x03C19A28 MOV W1, W5
	0x03C19A2C MOV W2, W31
	0x03C19A30 MOV W23, W7
	0x03C19A34 MOV W25, W6
	0x03C19A38 MOV W22, W5
	0x03C19A3C MOV W21, W4
	0x03C19A40 MOV W19, W3
	0x03C19A44 MOV X26, X0
	0x03C19A48 BL 0x3C18DEC
	0x03C19A4C TBZ X0, 0x0, 0x3C19AC8
	0x03C19A50 MOV X0, X24
	0x03C19A54 MOV X1, X31
	0x03C19A58 BL 0x3C36C34
	0x03C19A5C MOV W1, W0
	0x03C19A60 MOV W2, W20
	0x03C19A64 MOV W3, W19
	0x03C19A68 BL 0x3C19358
	0x03C19A6C ADRP X27, 0x7CB000
	0x03C19A70 LDR X8, [X27 + 0xB08]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7CC000
	008 Move X23, 0x546000
	009 Move W8, [X22+3009]
	010 Move X23, [X23+3848]
	011 Move X19, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x546000
	019 Move X0, [X0+3848]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3009], W8
	023 Move X1, [X23]
	024 Move X0, X19
	025 Call NoAllocHelpers.SafeLength, X0
	026 Move W4, W0
	027 Move X0, X21
	028 Move W1, W20
	029 Move X2, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move W3, W31
	035 Move W5, W31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call Mesh.SetUVs, X0, X1, X2, X3, X4, X5
	039 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)

Disassembly:
	0x03C19A7C ADD X0, X0, 0xF36
	0x03C19A80 BL 0x1C16CB8
	0x03C19A84 MOV X8, X0
	0x03C19A88 STR X0, [X27 + 0xB08]
	0x03C19A8C AND W7, W25, 0x1
	0x03C19A90 STR W23, [X31 + 0x50]
	0x03C19A94 MOV X0, X26
	0x03C19A98 MOV W1, W22
	0x03C19A9C MOV W2, W21
	0x03C19AA0 MOV X4, X24
	0x03C19AA4 MOV W5, W20
	0x03C19AA8 MOV W6, W19
	0x03C19AAC LDP X20, X19, [X31 + 0x40]
	0x03C19AB0 LDP X22, X21, [X31 + 0x30]
	0x03C19AB4 LDP X24, X23, [X31 + 0x20]
	0x03C19AB8 LDP X26, X25, [X31 + 0x10]
	0x03C19ABC MOV W3, W31
	0x03C19AC0 LDP X30, X27, [X31], #0x50
	0x03C19AC4 BR X8
	0x03C19AC8 LDP X20, X19, [X31 + 0x40]
	0x03C19ACC LDP X22, X21, [X31 + 0x30]
	0x03C19AD0 LDP X24, X23, [X31 + 0x20]
	0x03C19AD4 LDP X26, X25, [X31 + 0x10]
	0x03C19AD8 LDP X30, X27, [X31], #0x50
	0x03C19ADC RET
	0x03C19AE0 SUB X31, X31, 0x60
	0x03C19AE4 STR X30, [X31 + 0x10]
	0x03C19AE8 STP X26, X25, [X31 + 0x20]
	0x03C19AEC STP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7CC000
	008 Move X23, 0x546000
	009 Move W8, [X22+3010]
	010 Move X23, [X23+3864]
	011 Move X19, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x546000
	019 Move X0, [X0+3864]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3010], W8
	023 Move X1, [X23]
	024 Move X0, X19
	025 Call NoAllocHelpers.SafeLength, X0
	026 Move W4, W0
	027 Move X0, X21
	028 Move W1, W20
	029 Move X2, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move W3, W31
	035 Move W5, W31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call Mesh.SetUVs, X0, X1, X2, X3, X4, X5
	039 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C199F8 LDP X22, X21, [X31 + 0x30]
	0x03C199FC LDP X24, X23, [X31 + 0x20]

ISIL:
	001 Move W5, W31
	002 Call Mesh.SetUVs, X0, X1, X2, X3, X4, X5
	003 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C19AF8 ADRP X25, 0x7CB000
	0x03C19AFC ADRP X26, 0x545000
	0x03C19B00 LDRB W8, [X25 + 0xBCE]
	0x03C19B04 LDR X26, [X26 + 0xFC0]
	0x03C19B08 MOV W19, W5
	0x03C19B0C MOV W23, W4
	0x03C19B10 MOV W20, W3
	0x03C19B14 MOV W21, W2
	0x03C19B18 MOV X22, X1
	0x03C19B1C MOV X24, X0
	0x03C19B20 TBNZ X8, 0x0, 0x3C19B38
	0x03C19B24 ADRP X0, 0x545000
	0x03C19B28 LDR X0, [X0 + 0xFC0]
	0x03C19B2C BL 0x1C16CF4
	0x03C19B30 MOVZ W8, 0x1
	0x03C19B34 STRB W8, [X25 + 0xBCE]
	0x03C19B38 LDR X1, [X26]
	0x03C19B3C MOV X0, X22
	0x03C19B40 BL 0x222CD5C
	0x03C19B44 MOV W3, W0
	0x03C19B48 AND W6, W23, 0x1
	0x03C19B4C MOV X0, X24
	0x03C19B50 MOV X1, X22
	0x03C19B54 MOV W2, W31
	0x03C19B58 MOV W4, W21
	0x03C19B5C MOV W5, W20
	0x03C19B60 MOV W7, W19
	0x03C19B64 BL 0x3C19B84
	0x03C19B68 LDP X20, X19, [X31 + 0x50]
	0x03C19B6C LDP X22, X21, [X31 + 0x40]
	0x03C19B70 LDP X24, X23, [X31 + 0x30]
	0x03C19B74 LDP X26, X25, [X31 + 0x20]
	0x03C19B78 LDR X30, [X31 + 0x10]
	0x03C19B7C ADD X31, X31, 0x60
	0x03C19B80 RET

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x7CC000
	011 Move X26, 0x546000
	012 Move W8, [X25+3011]
	013 Move X26, [X26+3920]
	014 Move W19, W5
	015 Move W20, W4
	016 Move W21, W3
	017 Move X22, X2
	018 Move W23, W1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x546000
	025 Move X0, [X0+3920]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+3011], W8
	029 Move X7, [X26]
	030 Move X0, X24
	031 Move W1, W23
	032 Move X3, X22
	033 Move W4, W21
	034 Move W5, W20
	035 Move W6, W19
	036 Move X20, [X31+64]
	037 Move X19, [X31+72]
	038 Move X22, [X31+48]
	039 Move X21, [X31+56]
	040 Move X24, [X31+32]
	041 Move X23, [X31+40]
	042 Move X26, [X31+16]
	043 Move X25, [X31+24]
	044 Move W2, 2
	045 Move X30, [X31+80]
	046 Call 0x221BB40, X0, X1, X2, X3, X4, X5, X6
	047 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C19A74 CBNZ X8, 0x3C19A8C
	0x03C19A78 ADRP X0, 0xFFFFFFFFFCF09000

ISIL:
	001 Move W5, W31
	002 Call Mesh.SetUVs, X0, X1, X2, X3, X4, X5
	003 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C19B84 STP X30, X27, [X31 - 0x50]!
	0x03C19B88 STP X26, X25, [X31 + 0x10]
	0x03C19B8C STP X24, X23, [X31 + 0x20]
	0x03C19B90 STP X22, X21, [X31 + 0x30]
	0x03C19B94 STP X20, X19, [X31 + 0x40]
	0x03C19B98 ADRP X26, 0x7CB000
	0x03C19B9C LDRB W8, [X26 + 0xBCF]
	0x03C19BA0 MOV W19, W7
	0x03C19BA4 MOV W24, W6
	0x03C19BA8 MOV W21, W5
	0x03C19BAC MOV W22, W4
	0x03C19BB0 MOV W20, W3
	0x03C19BB4 MOV W23, W2
	0x03C19BB8 MOV X27, X1
	0x03C19BBC MOV X25, X0
	0x03C19BC0 TBNZ X8, 0x0, 0x3C19BD8
	0x03C19BC4 ADRP X0, 0x545000
	0x03C19BC8 LDR X0, [X0 + 0xFC0]
	0x03C19BCC BL 0x1C16CF4
	0x03C19BD0 MOVZ W8, 0x1
	0x03C19BD4 STRB W8, [X26 + 0xBCF]
	0x03C19BD8 MOV X0, X25
	0x03C19BDC MOV W1, W21
	0x03C19BE0 MOV W2, W31
	0x03C19BE4 BL 0x3C18DEC
	0x03C19BE8 TBZ X0, 0x0, 0x3C19C7C
	0x03C19BEC ADRP X26, 0x545000
	0x03C19BF0 LDR X26, [X26 + 0xFC0]
	0x03C19BF4 MOV X0, X27
	0x03C19BF8 MOV X1, X31
	0x03C19BFC BL 0x3C36C88
	0x03C19C00 LDR X1, [X26]
	0x03C19C04 MOV X26, X0
	0x03C19C08 MOV X0, X27
	0x03C19C0C BL 0x222CD5C

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x7CC000
	011 Move X26, 0x546000
	012 Move W8, [X25+3012]
	013 Move X26, [X26+3928]
	014 Move W19, W5
	015 Move W20, W4
	016 Move W21, W3
	017 Move X22, X2
	018 Move W23, W1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x546000
	025 Move X0, [X0+3928]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+3012], W8
	029 Move X7, [X26]
	030 Move X0, X24
	031 Move W1, W23
	032 Move X3, X22
	033 Move W4, W21
	034 Move W5, W20
	035 Move W6, W19
	036 Move X20, [X31+64]
	037 Move X19, [X31+72]
	038 Move X22, [X31+48]
	039 Move X21, [X31+56]
	040 Move X24, [X31+32]
	041 Move X23, [X31+40]
	042 Move X26, [X31+16]
	043 Move X25, [X31+24]
	044 Move W2, 3
	045 Move X30, [X31+80]
	046 Call Mesh.SetUvsImpl, X0, X1, X2, X3, X4, X5, X6
	047 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C19AF0 STP X22, X21, [X31 + 0x40]
	0x03C19AF4 STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move W5, W31
	002 Call Mesh.SetUVs, X0, X1, X2, X3, X4, X5
	003 Return 

Method: System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs, System.Int32 start, System.Int32 length, UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C19C10 MOV W1, W0
	0x03C19C14 MOV W2, W23
	0x03C19C18 MOV W3, W20
	0x03C19C1C BL 0x3C19358
	0x03C19C20 ADRP X27, 0x7CB000
	0x03C19C24 LDR X8, [X27 + 0xB08]
	0x03C19C28 CBNZ X8, 0x3C19C40
	0x03C19C2C ADRP X0, 0xFFFFFFFFFCF09000
	0x03C19C30 ADD X0, X0, 0xF36
	0x03C19C34 BL 0x1C16CB8
	0x03C19C38 MOV X8, X0
	0x03C19C3C STR X0, [X27 + 0xB08]
	0x03C19C40 AND W7, W24, 0x1
	0x03C19C44 STR W19, [X31 + 0x50]
	0x03C19C48 MOV X0, X25
	0x03C19C4C MOV W1, W21
	0x03C19C50 MOV W2, W22
	0x03C19C54 MOV X4, X26
	0x03C19C58 MOV W5, W23
	0x03C19C5C MOV W6, W20
	0x03C19C60 LDP X20, X19, [X31 + 0x40]
	0x03C19C64 LDP X22, X21, [X31 + 0x30]
	0x03C19C68 LDP X24, X23, [X31 + 0x20]
	0x03C19C6C LDP X26, X25, [X31 + 0x10]
	0x03C19C70 MOVZ W3, 0x1
	0x03C19C74 LDP X30, X27, [X31], #0x50
	0x03C19C78 BR X8
	0x03C19C7C LDP X20, X19, [X31 + 0x40]
	0x03C19C80 LDP X22, X21, [X31 + 0x30]
	0x03C19C84 LDP X24, X23, [X31 + 0x20]
	0x03C19C88 LDP X26, X25, [X31 + 0x10]
	0x03C19C8C LDP X30, X27, [X31], #0x50
	0x03C19C90 RET
	0x03C19C94 STR X30, [X31 - 0x20]!
	0x03C19C98 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x7CC000
	011 Move X26, 0x546000
	012 Move W8, [X25+3013]
	013 Move X26, [X26+3936]
	014 Move W19, W5
	015 Move W20, W4
	016 Move W21, W3
	017 Move X22, X2
	018 Move W23, W1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x546000
	025 Move X0, [X0+3936]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X25+3013], W8
	029 Move X7, [X26]
	030 Move X0, X24
	031 Move W1, W23
	032 Move X3, X22
	033 Move W4, W21
	034 Move W5, W20
	035 Move W6, W19
	036 Move X20, [X31+64]
	037 Move X19, [X31+72]
	038 Move X22, [X31+48]
	039 Move X21, [X31+56]
	040 Move X24, [X31+32]
	041 Move X23, [X31+40]
	042 Move X26, [X31+16]
	043 Move X25, [X31+24]
	044 Move W2, 4
	045 Move X30, [X31+80]
	046 Call Mesh.SetUvsImpl, X0, X1, X2, X3, X4, X5, X6
	047 Return 

Method: System.Void GetUVsImpl(System.Int32 uvIndex, System.Collections.Generic.List`1<T> uvs, System.Int32 dim)

Disassembly:
	0x0221ABB0 MOV W0, W26
	0x0221ABB4 MOV X1, X31
	0x0221ABB8 BL 0x3C17B18
	0x0221ABBC LDR X8, [X24 + 0x38]
	0x0221ABC0 MOV W1, W0
	0x0221ABC4 MOV X0, X25
	0x0221ABC8 MOV W2, W31
	0x0221ABCC LDR X8, [X8 + 0x8]
	0x0221ABD0 MOV W3, W23
	0x0221ABD4 MOV X4, X22
	0x0221ABD8 MOV W5, W21
	0x0221ABDC MOV W6, W20
	0x0221ABE0 MOV W7, W19
	0x0221ABE4 STR X8, [X31]
	0x0221ABE8 BL 0x221A86C
	0x0221ABEC LDP X20, X19, [X31 + 0x50]
	0x0221ABF0 LDP X22, X21, [X31 + 0x40]
	0x0221ABF4 LDP X24, X23, [X31 + 0x30]
	0x0221ABF8 LDP X26, X25, [X31 + 0x20]
	0x0221ABFC LDR X30, [X31 + 0x10]
	0x0221AC00 ADD X31, X31, 0x60
	0x0221AC04 RET
	0x0221AC08 ADRP X8, 0x1ED9000
	0x0221AC0C LDR X8, [X8 + 0xA28]
	0x0221AC10 LDR X0, [X8]
	0x0221AC14 LDR W8, [X0 + 0xE0]
	0x0221AC18 CBNZ W8, 0x221AC20
	0x0221AC1C BL 0x1C16DFC
	0x0221AC20 ADRP X8, 0x1F02000
	0x0221AC24 LDR X8, [X8 + 0x88]
	0x0221AC28 LDP X20, X19, [X31 + 0x50]
	0x0221AC2C LDP X22, X21, [X31 + 0x40]
	0x0221AC30 LDP X24, X23, [X31 + 0x30]
	0x0221AC34 LDR X0, [X8]
	0x0221AC38 LDP X26, X25, [X31 + 0x20]
	0x0221AC3C LDR X30, [X31 + 0x10]
	0x0221AC40 MOV X1, X31
	0x0221AC44 ADD X31, X31, 0x60
	0x0221AC48 B 0x3C0649C
	0x0221AC4C SUB X31, X31, 0x60
	0x0221AC50 STR X30, [X31 + 0x10]
	0x0221AC54 STP X26, X25, [X31 + 0x20]
	0x0221AC58 STP X24, X23, [X31 + 0x30]
	0x0221AC5C STP X22, X21, [X31 + 0x40]
	0x0221AC60 STP X20, X19, [X31 + 0x50]
	0x0221AC64 LDR X8, [X7 + 0x38]
	0x0221AC68 MOV X24, X7
	0x0221AC6C MOV W19, W6
	0x0221AC70 MOV W20, W5
	0x0221AC74 MOV W21, W4
	0x0221AC78 MOV X22, X3
	0x0221AC7C MOV W23, W2
	0x0221AC80 MOV W26, W1
	0x0221AC84 MOV X25, X0
	0x0221AC88 CBNZ X8, 0x221ACB4
	0x0221AC8C ADRP X0, 0x1ED9000
	0x0221AC90 LDR X0, [X0 + 0xA28]
	0x0221AC94 BL 0x1C16CF4
	0x0221AC98 ADRP X0, 0x1F02000
	0x0221AC9C LDR X0, [X0 + 0x88]
	0x0221ACA0 BL 0x1C16CF4
	0x0221ACA4 LDR X8, [X24 + 0x38]
	0x0221ACA8 CBNZ X8, 0x221ACB4
	0x0221ACAC MOV X0, X24
	0x0221ACB0 BL 0x1C5C6E0
	0x0221ACB4 CMP W26, 0x8
	0x0221ACB8 B.CS 0x221AD14
	0x0221ACBC MOV W0, W26

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move X19, X4
	010 Move W20, W3
	011 Move X21, X2
	012 Move W23, W1
	013 Move X22, X0
	014 Compare X8, 0
	015 JumpIfNotEqual {18}
	016 Move X0, X19
	017 Call 0x1C5D6E0
	018 Compare X21, 0
	019 JumpIfEqual {44}
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X0, X22
	022 Move X1, X31
	023 Call Mesh.get_vertexCount, X0
	024 Move W24, W0
	025 Move W0, W23
	026 Move X1, X31
	027 Call Mesh.GetUVChannel, X0
	028 Move X8, [X19+56]
	029 Move W3, W0
	030 Move X0, X22
	031 Move X1, X21
	032 Move X5, [X8+8]
	033 Move W2, W24
	034 Move W4, W20
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X22, [X31+32]
	038 Move X21, [X31+40]
	039 Move X24, [X31+16]
	040 Move X23, [X31+24]
	041 Move X30, [X31+64]
	042 Call 0x221A8E0, X0, X1, X2, X3, X4
	043 Return 
	044 Move X0, 0x1EDF000
	045 Move X0, [X0+1320]
	046 Call 0x1C17D08
	047 Call 0x1C17F10
	048 Move X20, X0
	049 Move X0, 0x1F03000
	050 Move X0, [X0+120]
	051 Call 0x1C17D08
	052 Move X21, X0
	053 Move X0, 0x1F03000
	054 Move X0, [X0+128]
	055 Call 0x1C17D08
	056 Move X2, X0
	057 Move X0, X20
	058 Move X1, X21
	059 Move X3, X31
	060 Call ArgumentNullException..ctor, X0, X1, X2
	061 Move X0, 0x1EE4000
	062 Move X0, [X0+3960]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X20, X0
	066 Move X0, 0x1F03000
	067 Move X0, [X0+136]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X20
	071 Move X2, X31
	072 Call IndexOutOfRangeException..ctor, X0, X1
	073 Move X0, X20
	074 Move X1, X19
	075 Call 0x1C17DEC

Method: System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)

Disassembly:
	0x03C19C9C ADRP X20, 0x7CB000
	0x03C19CA0 LDR X2, [X20 + 0xB60]
	0x03C19CA4 MOV X19, X0
	0x03C19CA8 CBNZ X2, 0x3C19CC0
	0x03C19CAC ADRP X0, 0xFFFFFFFFFCEE9000
	0x03C19CB0 ADD X0, X0, 0xFA5
	0x03C19CB4 BL 0x1C16CB8
	0x03C19CB8 MOV X2, X0
	0x03C19CBC STR X0, [X20 + 0xB60]
	0x03C19CC0 MOV X0, X19
	0x03C19CC4 LDP X20, X19, [X31 + 0x10]
	0x03C19CC8 MOVZ W1, 0x1
	0x03C19CCC LDR X30, [X31], #0x20
	0x03C19CD0 BR X2
	0x03C19CD4 MOV W1, W31
	0x03C19CD8 B 0x3C19CDC
	0x03C19CDC STP X30, X21, [X31 - 0x20]!
	0x03C19CE0 STP X20, X19, [X31 + 0x10]
	0x03C19CE4 ADRP X21, 0x7CB000
	0x03C19CE8 LDRB W8, [X21 + 0xBD0]
	0x03C19CEC MOV W20, W1
	0x03C19CF0 MOV X19, X0
	0x03C19CF4 TBNZ X8, 0x0, 0x3C19D18
	0x03C19CF8 ADRP X0, 0x4DA000
	0x03C19CFC LDR X0, [X0 + 0xA28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7CC000
	008 Move X23, 0x546000
	009 Move W8, [X22+3014]
	010 Move X23, [X23+3944]
	011 Move X19, X2
	012 Move W20, W1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x546000
	019 Move X0, [X0+3944]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3014], W8
	023 Move X4, [X23]
	024 Move X0, X21
	025 Move W1, W20
	026 Move X2, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move W3, 4
	032 Move X30, [X31+48]
	033 Move X23, [X31+56]
	034 Call 0x221ABB0, X0, X1, X2, X3
	035 Return 

Method: System.Void SetVertexBufferParams(System.Int32 vertexCount, UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)

Disassembly:
	0x03C19D00 BL 0x1C16CF4
	0x03C19D04 ADRP X0, 0x545000
	0x03C19D08 LDR X0, [X0 + 0xFC8]
	0x03C19D0C BL 0x1C16CF4
	0x03C19D10 MOVZ W8, 0x1
	0x03C19D14 STRB W8, [X21 + 0xBD0]
	0x03C19D18 ADRP X21, 0x7CB000
	0x03C19D1C LDR X8, [X21 + 0xB40]
	0x03C19D20 CBNZ X8, 0x3C19D38
	0x03C19D24 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C19D28 ADD X0, X0, 0x245
	0x03C19D2C BL 0x1C16CB8
	0x03C19D30 MOV X8, X0
	0x03C19D34 STR X0, [X21 + 0xB40]
	0x03C19D38 MOV X0, X19
	0x03C19D3C BLR X8
	0x03C19D40 TBZ X0, 0x0, 0x3C19D78
	0x03C19D44 ADRP X21, 0x7CB000
	0x03C19D48 LDR X2, [X21 + 0xB68]
	0x03C19D4C CBNZ X2, 0x3C19D64
	0x03C19D50 ADRP X0, 0xFFFFFFFFFCEDC000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CC000
	007 Move X3, [X22+2784]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51339264
	014 Add X0, X0, 3781
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2784], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetVertexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream = 0, UnityEngine.Rendering.MeshUpdateFlags flags = 0)

Disassembly:
	0x0221BF74 ADRP X0, 0x1F01000
	0x0221BF78 LDR X0, [X0 + 0xC0]
	0x0221BF7C BL 0x1C16CF4
	0x0221BF80 ADRP X0, 0x1F01000
	0x0221BF84 LDR X0, [X0 + 0xC8]
	0x0221BF88 BL 0x1C16CF4
	0x0221BF8C ADRP X0, 0x1F01000
	0x0221BF90 LDR X0, [X0 + 0xD0]
	0x0221BF94 BL 0x1C16CF4
	0x0221BF98 LDR X8, [X21 + 0x38]
	0x0221BF9C CBNZ X8, 0x221BFA8
	0x0221BFA0 MOV X0, X21
	0x0221BFA4 BL 0x1C5C6E0
	0x0221BFA8 ADRP X8, 0x1F01000
	0x0221BFAC LDR X8, [X8 + 0xC8]
	0x0221BFB0 MOV X1, X23
	0x0221BFB4 MOV X2, X31
	0x0221BFB8 LDR X0, [X8]
	0x0221BFBC BL 0x321B938
	0x0221BFC0 CBZ X19, 0x221C23C
	0x0221BFC4 MOV X1, X0
	0x0221BFC8 MOV X0, X19
	0x0221BFCC MOV X2, X31
	0x0221BFD0 BL 0x32338A8
	0x0221BFD4 CBZ X20, 0x221C208
	0x0221BFD8 LDR X8, [X21 + 0x38]
	0x0221BFDC MOV X0, X20
	0x0221BFE0 LDR X1, [X8 + 0x8]
	0x0221BFE4 BL 0x21B2910
	0x0221BFE8 TBZ X0, 0x0, 0x221C208
	0x0221BFEC LDR X8, [X21 + 0x38]
	0x0221BFF0 LDR X1, [X8]
	0x0221BFF4 LDRB W8, [X1 + 0x135]
	0x0221BFF8 TBNZ X8, 0x0, 0x221C008
	0x0221BFFC MOV X0, X1
	0x0221C000 BL 0x1C5C684
	0x0221C004 MOV X1, X0
	0x0221C008 LDR X8, [X20]
	0x0221C00C LDRH W9, [X8 + 0x12E]
	0x0221C010 CBZ X9, 0x221C034
	0x0221C014 LDR X10, [X8 + 0xB0]
	0x0221C018 ADD X10, X10, 0x8
	0x0221C01C LDUR X11, [X10 - 0x8]
	0x0221C020 CMP X11, X1
	0x0221C024 B.EQ 0x221C044
	0x0221C028 SUBS X9, X9, 0x1
	0x0221C02C ADD X10, X10, 0x10
	0x0221C030 B.NE 0x221C01C
	0x0221C034 MOV X0, X20
	0x0221C038 MOV W2, W31
	0x0221C03C BL 0x1C5C788
	0x0221C040 B 0x221C050
	0x0221C044 LDRSW X9, [X10]
	0x0221C048 ADD X8, X8, X9, 0x4, LSL
	0x0221C04C ADD X0, X8, 0x138
	0x0221C050 LDP X8, X1, [X0]
	0x0221C054 MOV X0, X20
	0x0221C058 BLR X8
	0x0221C05C MOV X20, X0
	0x0221C060 CBZ X0, 0x221C240
	0x0221C064 ADRP X24, 0x1ED7000
	0x0221C068 ADRP X25, 0x1F00000
	0x0221C06C LDR X24, [X24 + 0xE18]
	0x0221C070 LDR X25, [X25 + 0xC0]
	0x0221C074 LDR X8, [X20]
	0x0221C078 LDR X1, [X24]
	0x0221C07C LDRH W9, [X8 + 0x12E]
	0x0221C080 CBZ X9, 0x221C0A4
	0x0221C084 LDR X10, [X8 + 0xB0]
	0x0221C088 ADD X10, X10, 0x8
	0x0221C08C LDUR X11, [X10 - 0x8]
	0x0221C090 CMP X11, X1
	0x0221C094 B.EQ 0x221C0B4
	0x0221C098 SUBS X9, X9, 0x1
	0x0221C09C ADD X10, X10, 0x10
	0x0221C0A0 B.NE 0x221C08C
	0x0221C0A4 MOV X0, X20
	0x0221C0A8 MOV W2, W31
	0x0221C0AC BL 0x1C5C788
	0x0221C0B0 B 0x221C0C0
	0x0221C0B4 LDRSW X9, [X10]
	0x0221C0B8 ADD X8, X8, X9, 0x4, LSL
	0x0221C0BC ADD X0, X8, 0x138
	0x0221C0C0 LDP X8, X1, [X0]
	0x0221C0C4 MOV X0, X20
	0x0221C0C8 BLR X8
	0x0221C0CC TBZ X0, 0x0, 0x221C194
	0x0221C0D0 LDR X8, [X21 + 0x38]
	0x0221C0D4 LDR X1, [X8 + 0x18]
	0x0221C0D8 LDRB W8, [X1 + 0x135]
	0x0221C0DC TBNZ X8, 0x0, 0x221C0EC
	0x0221C0E0 MOV X0, X1
	0x0221C0E4 BL 0x1C5C684
	0x0221C0E8 MOV X1, X0
	0x0221C0EC LDR X8, [X20]
	0x0221C0F0 LDRH W9, [X8 + 0x12E]
	0x0221C0F4 CBZ X9, 0x221C118
	0x0221C0F8 LDR X10, [X8 + 0xB0]
	0x0221C0FC ADD X10, X10, 0x8
	0x0221C100 LDUR X11, [X10 - 0x8]
	0x0221C104 CMP X11, X1
	0x0221C108 B.EQ 0x221C128
	0x0221C10C SUBS X9, X9, 0x1
	0x0221C110 ADD X10, X10, 0x10
	0x0221C114 B.NE 0x221C100
	0x0221C118 MOV X0, X20
	0x0221C11C MOV W2, W31
	0x0221C120 BL 0x1C5C788
	0x0221C124 B 0x221C134
	0x0221C128 LDRSW X9, [X10]
	0x0221C12C ADD X8, X8, X9, 0x4, LSL
	0x0221C130 ADD X0, X8, 0x138
	0x0221C134 LDP X8, X1, [X0]
	0x0221C138 MOV X0, X20
	0x0221C13C BLR X8
	0x0221C140 LDR X0, [X25]
	0x0221C144 MOV V8.16B, V0.16B
	0x0221C148 MOV V9.16B, V1.16B
	0x0221C14C MOV X1, X22
	0x0221C150 MOV X2, X31
	0x0221C154 BL 0x321B938
	0x0221C158 STP S8, S9, [X31 + 0x8]
	0x0221C15C LDR X8, [X21 + 0x38]
	0x0221C160 MOV X23, X0
	0x0221C164 LDR X0, [X8 + 0x28]
	0x0221C168 ADD X1, X31, 0x8
	0x0221C16C BL 0x1C16E04
	0x0221C170 MOV X1, X0
	0x0221C174 MOV X0, X23

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+48], X30
	003 Move [X31+56], X25
	004 Move [X31+64], X24
	005 Move [X31+72], X23
	006 Move [X31+80], X22
	007 Move [X31+88], X21
	008 Move [X31+96], X20
	009 Move [X31+104], X19
	010 Move X19, [X31+112]
	011 Move [X31+32], X1
	012 Move [X31+40], X2
	013 Move W22, W7
	014 Move W24, W6
	015 Move X8, [X19+56]
	016 Move W20, W5
	017 Move W21, W4
	018 Move W23, W3
	019 Move X25, X0
	020 Compare X8, 0
	021 JumpIfNotEqual {24}
	022 Move X0, X19
	023 Call 0x1C5D6E0
	024 Move X0, X25
	025 Move X1, X31
	026 Call Mesh.get_canAccess, X0
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {115}
	031 Or W8, W21, W23
	032 Or W8, W8, W20
	033 Move TEMP, X8
	034 And TEMP, TEMP, -2147483648
	035 Compare TEMP, -2147483648
	036 JumpIfEqual {78}
	037 Move X8, [X19+56]
	038 Add X0, X31, 32
	039 Move X1, [X8+8]
	040 Move X8, [X1]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Add W8, W20, W23
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X8, [X19+56]
	045 Move X0, [X31+32]
	046 Move X1, [X31+40]
	047 Move X2, [X8+24]
	048 Move X8, [X2]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X1, X31
	051 Call IntPtr.op_Explicit, X0
	052 Move X8, [X19+56]
	053 Move X19, X0
	054 Move X8, [X8+32]
	055 Move X9, [X8]
	056 Move X0, X8
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move W6, W0
	059 Move X0, X25
	060 Move W1, W24
	061 Move X2, X19
	062 Move W3, W23
	063 Move W4, W21
	064 Move W5, W20
	065 Move W7, W22
	066 Move [X31], X31
	067 Call Mesh.InternalSetVertexBufferData, X0, X1, X2, X3, X4, X5, X6, X7
	068 Move X20, [X31+96]
	069 Move X19, [X31+104]
	070 Move X22, [X31+80]
	071 Move X21, [X31+88]
	072 Move X24, [X31+64]
	073 Move X23, [X31+72]
	074 Move X30, [X31+48]
	075 Move X25, [X31+56]
	076 Add X31, X31, 112
	077 Return 
	078 Move [X31+28], W23
	079 Move X22, 0x1ED8000
	080 Move X22, [X22+1880]
	081 Move X0, X22
	082 Call 0x1C17D08
	083 Add X1, X31, 28
	084 Call 0x1C17E04
	085 Move X23, X0
	086 Move X0, X22
	087 Move [X31+24], W21
	088 Call 0x1C17D08
	089 Add X1, X31, 24
	090 Call 0x1C17E04
	091 Move X21, X0
	092 Move X0, X22
	093 Move [X31+20], W20
	094 Call 0x1C17D08
	095 Add X1, X31, 20
	096 Call 0x1C17E04
	097 Move X20, X0
	098 Move X0, 0x1F01000
	099 Move X0, [X0+152]
	100 Call 0x1C17D08
	101 Move X1, X23
	102 Move X2, X21
	103 Move X3, X20
	104 Move X4, X31
	105 Call String.Format, X0, X1, X2, X3
	106 Move X20, X0
	107 Move X0, 0x1EE0000
	108 Move X0, [X0+1888]
	109 Call 0x1C17D08
	110 Call 0x1C17F10
	111 Move X1, X20
	112 Move X2, X31
	113 Move X21, X0
	114 Call ArgumentOutOfRangeException..ctor, X0, X1
	115 Move X0, X25
	116 Call 0x19913C0
	117 Move X0, X25
	118 Move X1, X31
	119 Call Object.get_name, X0
	120 Move X20, X0
	121 Move X0, 0x1F01000
	122 Move X0, [X0+160]
	123 Call 0x1C17D08
	124 Move X21, X0
	125 Move X0, 0x1F01000
	126 Move X0, [X0+168]
	127 Call 0x1C17D08
	128 Move X2, X0
	129 Move X0, X21
	130 Move X1, X20
	131 Move X3, X31
	132 Call String.Concat, X0, X1, X2
	133 Move X20, X0
	134 Move X0, 0x1ED8000
	135 Move X0, [X0+1456]
	136 Call 0x1C17D08
	137 Call 0x1C17F10
	138 Move X1, X20
	139 Move X2, X31
	140 Move X21, X0
	141 Call InvalidOperationException..ctor, X0, X1
	142 Move X0, X21
	143 Move X1, X19
	144 Call 0x1C17DEC

Method: System.Void PrintErrorCantAccessIndices()

Disassembly:
	0x03C19D54 ADD X0, X0, 0x245
	0x03C19D58 BL 0x1C16CB8
	0x03C19D5C MOV X2, X0
	0x03C19D60 STR X0, [X21 + 0xB68]
	0x03C19D64 MOV X0, X19
	0x03C19D68 MOV W1, W20
	0x03C19D6C LDP X20, X19, [X31 + 0x10]
	0x03C19D70 LDP X30, X21, [X31], #0x20
	0x03C19D74 BR X2
	0x03C19D78 ADRP X20, 0x545000
	0x03C19D7C ADRP X21, 0x4DA000
	0x03C19D80 LDR X20, [X20 + 0xFC8]
	0x03C19D84 LDR X21, [X21 + 0xA28]
	0x03C19D88 MOV X0, X19
	0x03C19D8C MOV X1, X31
	0x03C19D90 BL 0x3C389D4
	0x03C19D94 LDR X8, [X20]
	0x03C19D98 MOV X1, X0
	0x03C19D9C MOV X2, X31
	0x03C19DA0 MOV X0, X8
	0x03C19DA4 BL 0x321EFD0
	0x03C19DA8 LDR X8, [X21]
	0x03C19DAC MOV X19, X0
	0x03C19DB0 LDR W9, [X8 + 0xE0]
	0x03C19DB4 CBNZ W9, 0x3C19DC0
	0x03C19DB8 MOV X0, X8
	0x03C19DBC BL 0x1C16DFC
	0x03C19DC0 MOV X0, X19
	0x03C19DC4 LDP X20, X19, [X31 + 0x10]
	0x03C19DC8 LDP X30, X21, [X31], #0x20
	0x03C19DCC B 0x3C0649C
	0x03C19DD0 MOV W1, W31
	0x03C19DD4 B 0x3C19DD8
	0x03C19DD8 STP X30, X21, [X31 - 0x20]!
	0x03C19DDC STP X20, X19, [X31 + 0x10]
	0x03C19DE0 ADRP X21, 0x7CB000
	0x03C19DE4 LDRB W8, [X21 + 0xBD1]
	0x03C19DE8 MOV W20, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CC000
	007 Move X21, 0x546000
	008 Move X20, 0x4DB000
	009 Move W8, [X22+3015]
	010 Move X21, [X21+3952]
	011 Move X20, [X20+2600]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x4DB000
	018 Move X0, [X0+2600]
	019 Call 0x1C17CF4
	020 Move X0, 0x546000
	021 Move X0, [X0+3952]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3015], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.get_name, X0
	028 Move X8, [X21]
	029 Move X1, X0
	030 Move X2, X31
	031 Move X0, X8
	032 Call String.Format, X0, X1
	033 Move X8, [X20]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Call Debug.LogError, X0
	047 Return 

Method: System.Boolean CheckCanAccessSubmesh(System.Int32 submesh, System.Boolean errorAboutTriangles)

Disassembly:
	0x03C19DEC MOV X19, X0
	0x03C19DF0 TBNZ X8, 0x0, 0x3C19E14
	0x03C19DF4 ADRP X0, 0x4DA000
	0x03C19DF8 LDR X0, [X0 + 0xA28]
	0x03C19DFC BL 0x1C16CF4
	0x03C19E00 ADRP X0, 0x545000
	0x03C19E04 LDR X0, [X0 + 0xFD0]
	0x03C19E08 BL 0x1C16CF4
	0x03C19E0C MOVZ W8, 0x1
	0x03C19E10 STRB W8, [X21 + 0xBD1]
	0x03C19E14 ADRP X21, 0x7CB000
	0x03C19E18 LDR X8, [X21 + 0xB40]
	0x03C19E1C CBNZ X8, 0x3C19E34
	0x03C19E20 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C19E24 ADD X0, X0, 0x245
	0x03C19E28 BL 0x1C16CB8
	0x03C19E2C MOV X8, X0
	0x03C19E30 STR X0, [X21 + 0xB40]
	0x03C19E34 MOV X0, X19
	0x03C19E38 BLR X8
	0x03C19E3C TBZ X0, 0x0, 0x3C19E74
	0x03C19E40 ADRP X21, 0x7CB000
	0x03C19E44 LDR X2, [X21 + 0xB70]
	0x03C19E48 CBNZ X2, 0x3C19E60
	0x03C19E4C ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C19E50 ADD X0, X0, 0xDD
	0x03C19E54 BL 0x1C16CB8
	0x03C19E58 MOV X2, X0
	0x03C19E5C STR X0, [X21 + 0xB70]
	0x03C19E60 MOV X0, X19
	0x03C19E64 MOV W1, W20
	0x03C19E68 LDP X20, X19, [X31 + 0x10]
	0x03C19E6C LDP X30, X21, [X31], #0x20
	0x03C19E70 BR X2
	0x03C19E74 ADRP X20, 0x545000
	0x03C19E78 ADRP X21, 0x4DA000
	0x03C19E7C LDR X20, [X20 + 0xFD0]
	0x03C19E80 LDR X21, [X21 + 0xA28]
	0x03C19E84 MOV X0, X19
	0x03C19E88 MOV X1, X31
	0x03C19E8C BL 0x3C389D4
	0x03C19E90 LDR X8, [X20]
	0x03C19E94 MOV X1, X0
	0x03C19E98 MOV X2, X31
	0x03C19E9C MOV X0, X8
	0x03C19EA0 BL 0x321EFD0
	0x03C19EA4 LDR X8, [X21]
	0x03C19EA8 MOV X19, X0
	0x03C19EAC LDR W9, [X8 + 0xE0]
	0x03C19EB0 CBNZ W9, 0x3C19EBC
	0x03C19EB4 MOV X0, X8
	0x03C19EB8 BL 0x1C16DFC
	0x03C19EBC MOV X0, X19
	0x03C19EC0 LDP X20, X19, [X31 + 0x10]
	0x03C19EC4 LDP X30, X21, [X31], #0x20
	0x03C19EC8 B 0x3C0649C
	0x03C19ECC MOV W1, W31
	0x03C19ED0 B 0x3C19ED4
	0x03C19ED4 STP X30, X21, [X31 - 0x20]!
	0x03C19ED8 STP X20, X19, [X31 + 0x10]
	0x03C19EDC ADRP X21, 0x7CB000
	0x03C19EE0 LDRB W8, [X21 + 0xBD2]
	0x03C19EE4 MOV W20, W1
	0x03C19EE8 MOV X19, X0
	0x03C19EEC TBNZ X8, 0x0, 0x3C19F10
	0x03C19EF0 ADRP X0, 0x4DA000
	0x03C19EF4 LDR X0, [X0 + 0xA28]
	0x03C19EF8 BL 0x1C16CF4
	0x03C19EFC ADRP X0, 0x545000
	0x03C19F00 LDR X0, [X0 + 0xFD8]
	0x03C19F04 BL 0x1C16CF4
	0x03C19F08 MOVZ W8, 0x1
	0x03C19F0C STRB W8, [X21 + 0xBD2]
	0x03C19F10 ADRP X21, 0x7CB000
	0x03C19F14 LDR X8, [X21 + 0xB40]
	0x03C19F18 CBNZ X8, 0x3C19F30
	0x03C19F1C ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C19F20 ADD X0, X0, 0x245
	0x03C19F24 BL 0x1C16CB8
	0x03C19F28 MOV X8, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CC000
	007 Move W8, [X22+3016]
	008 Move W20, W2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x4DB000
	016 Move X0, [X0+2600]
	017 Call 0x1C17CF4
	018 Move X0, 0x50C000
	019 Move X0, [X0+3720]
	020 Call 0x1C17CF4
	021 Move X0, 0x546000
	022 Move X0, [X0+3960]
	023 Call 0x1C17CF4
	024 Move X0, 0x546000
	025 Move X0, [X0+3968]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+3016], W8
	029 Move X22, 0x7CC000
	030 Move X8, [X22+2880]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -51458048
	034 Add X0, X0, 581
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X22+2880], X0
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {61}
	044 Move TEMP, X21
	045 And TEMP, TEMP, -2147483648
	046 Compare TEMP, -2147483648
	047 JumpIfEqual {63}
	048 Move X22, 0x7CC000
	049 Move X8, [X22+2896]
	050 Compare X8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, -51433472
	053 Add X0, X0, 373
	054 Call 0x1C17CB8
	055 Move X8, X0
	056 Move [X22+2896], X0
	057 Move X0, X19
	058 NotImplemented "Instruction BLR not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W0, 1
	061 Move X0, X19
	062 Call Mesh.PrintErrorCantAccessIndices, X0
	063 Move X8, 0x546000
	064 Move X9, 0x546000
	065 Move X10, 0x50C000
	066 Move X8, [X8+3968]
	067 Move X9, [X9+3960]
	068 Move X10, [X10+3720]
	069 And W31, W20, 1
	070 Move X0, [X8]
	071 Move X2, X31
	072 NotImplemented "Instruction CSEL not yet implemented."
	073 Move X1, [X8]
	074 Call String.Format, X0, X1
	075 Move X8, 0x4DB000
	076 Move X8, [X8+2600]
	077 Move X20, X0
	078 Move X8, [X8]
	079 Move W9, [X8+224]
	080 Compare W9, 0
	081 JumpIfNotEqual {84}
	082 Move X0, X8
	083 Call 0x1C17DFC
	084 Move X0, X20
	085 Move X1, X19
	086 Call Debug.LogError, X0, X1
	087 Move W0, W31
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X30, [X31+48]
	093 Return X0

Method: System.Boolean CheckCanAccessSubmeshTriangles(System.Int32 submesh)

Disassembly:
	0x03C19F2C STR X0, [X21 + 0xB40]
	0x03C19F30 MOV X0, X19

ISIL:
	001 Move W2, 1
	002 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	003 Return X0

Method: System.Boolean CheckCanAccessSubmeshIndices(System.Int32 submesh)

Disassembly:
	0x03C19F34 BLR X8
	0x03C19F38 TBZ X0, 0x0, 0x3C19F70

ISIL:
	001 Move W2, W31
	002 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	003 Return X0

Method: System.Int32[] get_triangles()

Disassembly:
	0x03C19F3C ADRP X21, 0x7CB000
	0x03C19F40 LDR X2, [X21 + 0xB78]
	0x03C19F44 CBNZ X2, 0x3C19F5C
	0x03C19F48 ADRP X0, 0xFFFFFFFFFCEF2000
	0x03C19F4C ADD X0, X0, 0x1CB
	0x03C19F50 BL 0x1C16CB8
	0x03C19F54 MOV X2, X0
	0x03C19F58 STR X0, [X21 + 0xB78]
	0x03C19F5C MOV X0, X19
	0x03C19F60 MOV W1, W20
	0x03C19F64 LDP X20, X19, [X31 + 0x10]
	0x03C19F68 LDP X30, X21, [X31], #0x20
	0x03C19F6C BR X2
	0x03C19F70 ADRP X20, 0x545000
	0x03C19F74 ADRP X21, 0x4DA000
	0x03C19F78 LDR X20, [X20 + 0xFD8]
	0x03C19F7C LDR X21, [X21 + 0xA28]
	0x03C19F80 MOV X0, X19
	0x03C19F84 MOV X1, X31
	0x03C19F88 BL 0x3C389D4
	0x03C19F8C LDR X8, [X20]
	0x03C19F90 MOV X1, X0
	0x03C19F94 MOV X2, X31
	0x03C19F98 MOV X0, X8
	0x03C19F9C BL 0x321EFD0
	0x03C19FA0 LDR X8, [X21]
	0x03C19FA4 MOV X19, X0
	0x03C19FA8 LDR W9, [X8 + 0xE0]
	0x03C19FAC CBNZ W9, 0x3C19FB8
	0x03C19FB0 MOV X0, X8
	0x03C19FB4 BL 0x1C16DFC
	0x03C19FB8 MOV X0, X19
	0x03C19FBC LDP X20, X19, [X31 + 0x10]
	0x03C19FC0 LDP X30, X21, [X31], #0x20
	0x03C19FC4 B 0x3C0649C
	0x03C19FC8 STR X30, [X31 - 0x20]!
	0x03C19FCC STP X20, X19, [X31 + 0x10]
	0x03C19FD0 ADRP X20, 0x7CB000
	0x03C19FD4 LDR X8, [X20 + 0xB40]
	0x03C19FD8 MOV X19, X0
	0x03C19FDC CBNZ X8, 0x3C19FF4
	0x03C19FE0 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C19FE4 ADD X0, X0, 0x245
	0x03C19FE8 BL 0x1C16CB8
	0x03C19FEC MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CC000
	005 Move W8, [X20+3017]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x4DC000
	012 Move X0, [X0+3672]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3017], W8
	016 Move X20, 0x7CC000
	017 Move X8, [X20+2880]
	018 Compare X8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, -51458048
	021 Add X0, X0, 581
	022 Call 0x1C17CB8
	023 Move X8, X0
	024 Move [X20+2880], X0
	025 Move X0, X19
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {49}
	031 Move X20, 0x7CC000
	032 Move X3, [X20+2808]
	033 Compare X3, 0
	034 JumpIfNotEqual {40}
	035 Move X0, -51470336
	036 Add X0, X0, 3790
	037 Call 0x1C17CB8
	038 Move X3, X0
	039 Move [X20+2808], X0
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move TEMP, 0
	044 Not TEMP
	045 Move W1, TEMP
	046 Move W2, 1
	047 Move X30, [X31+32]
	048 CallNoReturn X3
	049 Move X20, 0x4DC000
	050 Move X20, [X20+3672]
	051 Move X0, X19
	052 Call Mesh.PrintErrorCantAccessIndices, X0
	053 Move X0, [X20]
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move W1, W31
	057 Move X30, [X31+32]
	058 Call 0x1C17D6C
	059 Return X0

Method: System.Void set_triangles(System.Int32[] value)

Disassembly:
	0x03C19FF0 STR X0, [X20 + 0xB40]
	0x03C19FF4 MOV X0, X19
	0x03C19FF8 BLR X8
	0x03C19FFC TBZ X0, 0x0, 0x3C1A030
	0x03C1A000 ADRP X20, 0x7CA000
	0x03C1A004 LDR X1, [X20 + 0xB80]
	0x03C1A008 CBNZ X1, 0x3C1A020
	0x03C1A00C ADRP X0, 0xFFFFFFFFFCEF2000
	0x03C1A010 ADD X0, X0, 0xE33
	0x03C1A014 BL 0x1C16CB8
	0x03C1A018 MOV X1, X0
	0x03C1A01C STR X0, [X20 + 0xB80]
	0x03C1A020 MOV X0, X19
	0x03C1A024 LDP X20, X19, [X31 + 0x10]
	0x03C1A028 LDR X30, [X31], #0x20
	0x03C1A02C BR X1
	0x03C1A030 LDP X20, X19, [X31 + 0x10]
	0x03C1A034 LDR X30, [X31], #0x20
	0x03C1A038 RET
	0x03C1A03C STP X30, X21, [X31 - 0x20]!
	0x03C1A040 STP X20, X19, [X31 + 0x10]
	0x03C1A044 ADRP X21, 0x7CA000
	0x03C1A048 LDR X8, [X21 + 0xB40]
	0x03C1A04C MOV W19, W1
	0x03C1A050 MOV X20, X0
	0x03C1A054 CBNZ X8, 0x3C1A06C
	0x03C1A058 ADRP X0, 0xFFFFFFFFFCEEB000
	0x03C1A05C ADD X0, X0, 0x245
	0x03C1A060 BL 0x1C16CB8
	0x03C1A064 MOV X8, X0
	0x03C1A068 STR X0, [X21 + 0xB40]
	0x03C1A06C MOV X0, X20
	0x03C1A070 BLR X8
	0x03C1A074 TBZ X0, 0x0, 0x3C1A0AC
	0x03C1A078 ADRP X21, 0x7CA000
	0x03C1A07C LDR X2, [X21 + 0xB88]
	0x03C1A080 CBNZ X2, 0x3C1A098
	0x03C1A084 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C1A088 ADD X0, X0, 0xBAF
	0x03C1A08C BL 0x1C16CB8
	0x03C1A090 MOV X2, X0
	0x03C1A094 STR X0, [X21 + 0xB88]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7CC000
	007 Move X8, [X21+2880]
	008 Move X19, X1
	009 Move X20, X0
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51462144
	013 Add X0, X0, 581
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X21+2880], X0
	017 Move X0, X20
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {48}
	023 Move X0, X19
	024 Move X1, X31
	025 Call NoAllocHelpers.SafeLength, X0
	026 Move W21, W0
	027 Move X0, X19
	028 Move X1, X31
	029 Call NoAllocHelpers.SafeLength, X0
	030 Move W6, W0
	031 Move TEMP, 0
	032 Not TEMP
	033 Move W1, TEMP
	034 Move W2, 1
	035 Move W7, 1
	036 Move X0, X20
	037 Move X3, X19
	038 Move W4, W21
	039 Move W5, W31
	040 Move [X31], W31
	041 Call Mesh.SetTrianglesImpl, X0, X1, X2, X3, X4, X5, X6, X7, X8
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+16]
	045 Move X21, [X31+24]
	046 Add X31, X31, 48
	047 Return 
	048 Move X0, X20
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+16]
	052 Move X21, [X31+24]
	053 Add X31, X31, 48
	054 Call Mesh.PrintErrorCantAccessIndices, X0
	055 Return 

Method: System.Int32[] GetTriangles(System.Int32 submesh)

Disassembly:
	0x03C1A138 STR X0, [X20 + 0xBA0]
	0x03C1A13C MOV X0, X19

ISIL:
	001 Move W2, 1

Method: System.Int32[] GetTriangles(System.Int32 submesh, System.Boolean applyBaseVertex)

Disassembly:
	0x03C1A140 LDP X20, X19, [X31 + 0x10]
	0x03C1A144 LDP X30, X21, [X31], #0x20
	0x03C1A148 BR X1
	0x03C1A14C ADRP X20, 0x544000
	0x03C1A150 ADRP X21, 0x4D9000
	0x03C1A154 LDR X20, [X20 + 0xFE0]
	0x03C1A158 LDR X21, [X21 + 0xA28]
	0x03C1A15C MOV X0, X19
	0x03C1A160 MOV X1, X31
	0x03C1A164 BL 0x3C389D4
	0x03C1A168 LDR X8, [X20]
	0x03C1A16C MOV X1, X0
	0x03C1A170 MOV X2, X31
	0x03C1A174 MOV X0, X8
	0x03C1A178 BL 0x321EFD0
	0x03C1A17C LDR X8, [X21]
	0x03C1A180 MOV X19, X0
	0x03C1A184 LDR W9, [X8 + 0xE0]
	0x03C1A188 CBNZ W9, 0x3C1A194
	0x03C1A18C MOV X0, X8
	0x03C1A190 BL 0x1C16DFC
	0x03C1A194 MOV X0, X19
	0x03C1A198 LDP X20, X19, [X31 + 0x10]
	0x03C1A19C LDP X30, X21, [X31], #0x20
	0x03C1A1A0 B 0x3C0649C
	0x03C1A1A4 STP X30, X21, [X31 - 0x20]!
	0x03C1A1A8 STP X20, X19, [X31 + 0x10]
	0x03C1A1AC ADRP X21, 0x7CA000
	0x03C1A1B0 LDRB W8, [X21 + 0xBD4]
	0x03C1A1B4 MOV W20, W1
	0x03C1A1B8 MOV X19, X0
	0x03C1A1BC TBNZ X8, 0x0, 0x3C1A1E0
	0x03C1A1C0 ADRP X0, 0x4D9000
	0x03C1A1C4 LDR X0, [X0 + 0xA28]
	0x03C1A1C8 BL 0x1C16CF4
	0x03C1A1CC ADRP X0, 0x544000
	0x03C1A1D0 LDR X0, [X0 + 0xFE8]
	0x03C1A1D4 BL 0x1C16CF4
	0x03C1A1D8 MOVZ W8, 0x1
	0x03C1A1DC STRB W8, [X21 + 0xBD4]
	0x03C1A1E0 TBNZ X20, 0x1F, 0x3C1A248
	0x03C1A1E4 ADRP X21, 0x7CA000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CB000
	007 Move W8, [X22+3018]
	008 Move W20, W2
	009 Move W19, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4DB000
	016 Move X0, [X0+3672]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3018], W8
	020 Move W2, 1
	021 Move X0, X21
	022 Move W1, W19
	023 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {46}
	028 Move X22, 0x7CB000
	029 Move X3, [X22+2808]
	030 Compare X3, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51474432
	033 Add X0, X0, 3790
	034 Call 0x1C17CB8
	035 Move X3, X0
	036 Move [X22+2808], X0
	037 And W2, W20, 1
	038 Move X0, X21
	039 Move W1, W19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 CallNoReturn X3
	046 Move X8, 0x4DB000
	047 Move X8, [X8+3672]
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move W1, W31
	053 Move X0, [X8]
	054 Move X30, [X31+48]
	055 Call 0x1C17D6C
	056 Return X0

Method: System.Int32[] GetIndices(System.Int32 submesh)

Disassembly:
	0x03C1A1E8 LDR X8, [X21 + 0xB50]
	0x03C1A1EC CBNZ X8, 0x3C1A204

ISIL:
	001 Move W2, 1

Method: System.Int32[] GetIndices(System.Int32 submesh, System.Boolean applyBaseVertex)

Disassembly:
	0x03C1A1F0 ADRP X0, 0xFFFFFFFFFCEF1000
	0x03C1A1F4 ADD X0, X0, 0x175
	0x03C1A1F8 BL 0x1C16CB8
	0x03C1A1FC MOV X8, X0
	0x03C1A200 STR X0, [X21 + 0xB50]
	0x03C1A204 MOV X0, X19
	0x03C1A208 BLR X8
	0x03C1A20C CMP W0, W20
	0x03C1A210 B.LE 0x3C1A248
	0x03C1A214 ADRP X21, 0x7CA000
	0x03C1A218 LDR X2, [X21 + 0xB90]
	0x03C1A21C CBNZ X2, 0x3C1A234
	0x03C1A220 ADRP X0, 0xFFFFFFFFFCEDF000
	0x03C1A224 ADD X0, X0, 0xC2
	0x03C1A228 BL 0x1C16CB8
	0x03C1A22C MOV X2, X0
	0x03C1A230 STR X0, [X21 + 0xB90]
	0x03C1A234 MOV X0, X19
	0x03C1A238 MOV W1, W20
	0x03C1A23C LDP X20, X19, [X31 + 0x10]
	0x03C1A240 LDP X30, X21, [X31], #0x20
	0x03C1A244 BR X2
	0x03C1A248 ADRP X8, 0x4D9000
	0x03C1A24C LDR X8, [X8 + 0xA28]
	0x03C1A250 ADRP X20, 0x544000
	0x03C1A254 LDR X0, [X8]
	0x03C1A258 LDR W8, [X0 + 0xE0]
	0x03C1A25C LDR X20, [X20 + 0xFE8]
	0x03C1A260 CBNZ W8, 0x3C1A268
	0x03C1A264 BL 0x1C16DFC
	0x03C1A268 LDR X0, [X20]
	0x03C1A26C MOV X1, X19
	0x03C1A270 BL 0x3C065A4
	0x03C1A274 LDP X20, X19, [X31 + 0x10]
	0x03C1A278 MOV W0, W31
	0x03C1A27C LDP X30, X21, [X31], #0x20
	0x03C1A280 RET
	0x03C1A284 STP X30, X23, [X31 - 0x30]!
	0x03C1A288 STP X22, X21, [X31 + 0x10]
	0x03C1A28C STP X20, X19, [X31 + 0x20]
	0x03C1A290 ADRP X23, 0x7CA000
	0x03C1A294 LDR X5, [X23 + 0xB98]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CB000
	007 Move W8, [X22+3019]
	008 Move W20, W2
	009 Move W19, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4DB000
	016 Move X0, [X0+3672]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3019], W8
	020 Move X0, X21
	021 Move W1, W19
	022 Move W2, W31
	023 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {46}
	028 Move X22, 0x7CB000
	029 Move X3, [X22+2816]
	030 Compare X3, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51367936
	033 Add X0, X0, 4048
	034 Call 0x1C17CB8
	035 Move X3, X0
	036 Move [X22+2816], X0
	037 And W2, W20, 1
	038 Move X0, X21
	039 Move W1, W19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 CallNoReturn X3
	046 Move X8, 0x4DB000
	047 Move X8, [X8+3672]
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move W1, W31
	053 Move X0, [X8]
	054 Move X30, [X31+48]
	055 Call 0x1C17D6C
	056 Return X0

Method: System.UInt32 GetIndexCount(System.Int32 submesh)

Disassembly:
	0x03C1A298 MOV W20, W3
	0x03C1A29C MOV W21, W2
	0x03C1A2A0 MOV X19, X1
	0x03C1A2A4 MOV X22, X0
	0x03C1A2A8 CBNZ X5, 0x3C1A2C0
	0x03C1A2AC ADRP X0, 0xFFFFFFFFFCEF1000
	0x03C1A2B0 ADD X0, X0, 0x21C
	0x03C1A2B4 BL 0x1C16CB8
	0x03C1A2B8 MOV X5, X0
	0x03C1A2BC STR X0, [X23 + 0xB98]
	0x03C1A2C0 AND W2, W21, 0x1
	0x03C1A2C4 AND W3, W20, 0x1
	0x03C1A2C8 MOV X0, X22
	0x03C1A2CC MOV X1, X19
	0x03C1A2D0 LDP X20, X19, [X31 + 0x20]
	0x03C1A2D4 LDP X22, X21, [X31 + 0x10]
	0x03C1A2D8 MOV W4, W31
	0x03C1A2DC LDP X30, X23, [X31], #0x30
	0x03C1A2E0 BR X5
	0x03C1A2E4 STR X30, [X31 - 0x30]!
	0x03C1A2E8 STP X22, X21, [X31 + 0x10]
	0x03C1A2EC STP X20, X19, [X31 + 0x20]
	0x03C1A2F0 ADRP X22, 0x7CA000
	0x03C1A2F4 LDR X5, [X22 + 0xB98]
	0x03C1A2F8 MOV W21, W2
	0x03C1A2FC MOV X19, X1
	0x03C1A300 MOV X20, X0
	0x03C1A304 CBNZ X5, 0x3C1A31C
	0x03C1A308 ADRP X0, 0xFFFFFFFFFCEF1000
	0x03C1A30C ADD X0, X0, 0x21C
	0x03C1A310 BL 0x1C16CB8
	0x03C1A314 MOV X5, X0
	0x03C1A318 STR X0, [X22 + 0xB98]
	0x03C1A31C AND W2, W21, 0x1
	0x03C1A320 MOV X0, X20
	0x03C1A324 MOV X1, X19
	0x03C1A328 LDP X20, X19, [X31 + 0x20]
	0x03C1A32C LDP X22, X21, [X31 + 0x10]
	0x03C1A330 MOVZ W3, 0x1
	0x03C1A334 MOV W4, W31
	0x03C1A338 LDR X30, [X31], #0x30
	0x03C1A33C BR X5
	0x03C1A340 LDR V0, [X0]
	0x03C1A344 RET
	0x03C1A348 LDR V0, [X0 + 0x4]
	0x03C1A34C RET
	0x03C1A350 LDR V0, [X0 + 0x8]
	0x03C1A354 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move TEMP, X1
	006 And TEMP, TEMP, -2147483648
	007 Compare TEMP, -2147483648
	008 JumpIfEqual {39}
	009 Move X21, 0x7CB000
	010 Move X8, [X21+2896]
	011 Move W19, W1
	012 Move X20, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51437568
	016 Add X0, X0, 373
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X21+2896], X0
	020 Move X0, X20
	021 NotImplemented "Instruction BLR not yet implemented."
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X21, 0x7CB000
	024 Move X2, [X21+2800]
	025 Compare X2, 0
	026 JumpIfNotEqual {32}
	027 Move X0, -51445760
	028 Add X0, X0, 87
	029 Call 0x1C17CB8
	030 Move X2, X0
	031 Move [X21+2800], X0
	032 Move X0, X20
	033 Move W1, W19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X2
	039 Move X0, 0x4E4000
	040 Move X0, [X0+3960]
	041 Call 0x1C17D08
	042 Call 0x1C17F10
	043 Move X19, X0
	044 Move X0, 0x545000
	045 Move X0, [X0+3976]
	046 Call 0x1C17D08
	047 Move X1, X0
	048 Move X0, X19
	049 Move X2, X31
	050 Call IndexOutOfRangeException..ctor, X0, X1
	051 Move X0, 0x545000
	052 Move X0, [X0+3984]
	053 Call 0x1C17D08
	054 Move X1, X0
	055 Move X0, X19
	056 Call 0x1C17DEC

Method: System.Void CheckIndicesArrayRange(System.Int32 valuesLength, System.Int32 start, System.Int32 length)

Disassembly:
	0x03C1A358 LDR V0, [X0 + 0xC]
	0x03C1A35C RET
	0x03C1A360 LDR W0, [X0 + 0x10]
	0x03C1A364 RET
	0x03C1A368 LDR W0, [X0 + 0x14]
	0x03C1A36C RET
	0x03C1A370 LDR W0, [X0 + 0x18]
	0x03C1A374 RET
	0x03C1A378 LDR W0, [X0 + 0x1C]
	0x03C1A37C RET
	0x03C1A380 STR X30, [X31 - 0x50]!
	0x03C1A384 STP X26, X25, [X31 + 0x10]
	0x03C1A388 STP X24, X23, [X31 + 0x20]
	0x03C1A38C STP X22, X21, [X31 + 0x30]
	0x03C1A390 STP X20, X19, [X31 + 0x40]
	0x03C1A394 LDR W8, [X0 + 0x10]
	0x03C1A398 MOV X19, X0
	0x03C1A39C ADD X0, X31, 0xC
	0x03C1A3A0 MOV X1, X31
	0x03C1A3A4 STP W31, W8, [X31 + 0x8]
	0x03C1A3A8 BL 0x337B6D8
	0x03C1A3AC LDR W8, [X19 + 0x14]
	0x03C1A3B0 MOV W20, W0
	0x03C1A3B4 ADD X0, X31, 0xC
	0x03C1A3B8 MOV X1, X31
	0x03C1A3BC STR W8, [X31 + 0xC]
	0x03C1A3C0 BL 0x337B6D8
	0x03C1A3C4 LDR W8, [X19 + 0x18]
	0x03C1A3C8 MOV W21, W0
	0x03C1A3CC ADD X0, X31, 0xC
	0x03C1A3D0 MOV X1, X31
	0x03C1A3D4 STR W8, [X31 + 0xC]
	0x03C1A3D8 BL 0x337B6D8
	0x03C1A3DC LDR W8, [X19 + 0x1C]
	0x03C1A3E0 MOV W22, W0
	0x03C1A3E4 ADD X0, X31, 0xC
	0x03C1A3E8 MOV X1, X31
	0x03C1A3EC STR W8, [X31 + 0xC]
	0x03C1A3F0 BL 0x337B6D8
	0x03C1A3F4 LDR V0, [X19]
	0x03C1A3F8 MOV W23, W0
	0x03C1A3FC ADD X0, X31, 0x8
	0x03C1A400 MOV X1, X31
	0x03C1A404 STR S0, [X31 + 0x8]
	0x03C1A408 BL 0x338FE0C
	0x03C1A40C LDR V0, [X19 + 0x4]
	0x03C1A410 MOV W24, W0
	0x03C1A414 ADD X0, X31, 0x8
	0x03C1A418 MOV X1, X31
	0x03C1A41C STR S0, [X31 + 0x8]
	0x03C1A420 BL 0x338FE0C
	0x03C1A424 LDR V0, [X19 + 0x8]
	0x03C1A428 MOV W25, W0
	0x03C1A42C ADD X0, X31, 0x8
	0x03C1A430 MOV X1, X31
	0x03C1A434 STR S0, [X31 + 0x8]
	0x03C1A438 BL 0x338FE0C
	0x03C1A43C LDR V0, [X19 + 0xC]
	0x03C1A440 MOV W26, W0
	0x03C1A444 ADD X0, X31, 0x8
	0x03C1A448 MOV X1, X31
	0x03C1A44C STR S0, [X31 + 0x8]
	0x03C1A450 BL 0x338FE0C
	0x03C1A454 EOR W8, W20, W21, 0x2
	0x03C1A458 EOR W8, W8, W22, 0x2
	0x03C1A45C EOR W8, W8, W23, 0x1
	0x03C1A460 EOR W8, W8, W24, 0x5
	0x03C1A464 EOR W8, W8, W25, 0x4
	0x03C1A468 EOR W8, W8, W26, 0x4
	0x03C1A46C LDP X20, X19, [X31 + 0x40]
	0x03C1A470 LDP X22, X21, [X31 + 0x30]
	0x03C1A474 LDP X24, X23, [X31 + 0x20]
	0x03C1A478 LDP X26, X25, [X31 + 0x10]
	0x03C1A47C EOR W0, W8, W0, 0x3
	0x03C1A480 LDR X30, [X31], #0x50
	0x03C1A484 RET
	0x03C1A488 SUB X31, X31, 0x40
	0x03C1A48C STP X30, X21, [X31 + 0x20]
	0x03C1A490 STP X20, X19, [X31 + 0x30]
	0x03C1A494 ADRP X21, 0x7CA000
	0x03C1A498 LDRB W8, [X21 + 0xBF0]
	0x03C1A49C MOV X20, X1
	0x03C1A4A0 MOV X19, X0
	0x03C1A4A4 TBNZ X8, 0x0, 0x3C1A4BC
	0x03C1A4A8 ADRP X0, 0x544000
	0x03C1A4AC LDR X0, [X0 + 0xFF0]
	0x03C1A4B0 BL 0x1C16CF4
	0x03C1A4B4 MOVZ W8, 0x1
	0x03C1A4B8 STRB W8, [X21 + 0xBF0]
	0x03C1A4BC CBZ X20, 0x3C1A4D8
	0x03C1A4C0 ADRP X8, 0x544000
	0x03C1A4C4 LDR X8, [X8 + 0xFF0]
	0x03C1A4C8 LDR X9, [X20]
	0x03C1A4CC LDR X8, [X8]
	0x03C1A4D0 CMP X9, X8
	0x03C1A4D4 B.EQ 0x3C1A4E0
	0x03C1A4D8 MOV W0, W31
	0x03C1A4DC B 0x3C1A4FC
	0x03C1A4E0 MOV X0, X20
	0x03C1A4E4 BL 0x1C16E08
	0x03C1A4E8 LDP V0, V1, [X0]
	0x03C1A4EC ADD X1, X31, 0x0
	0x03C1A4F0 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, X2
	007 And TEMP, TEMP, -2147483648
	008 Compare TEMP, -2147483648
	009 JumpIfEqual {25}
	010 Move TEMP, X3
	011 And TEMP, TEMP, -2147483648
	012 Compare TEMP, -2147483648
	013 JumpIfEqual {43}
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Compare W3, 0
	016 JumpIfNotEqual {61}
	017 Add W8, W3, W2
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X20, [X31+32]
	020 Move X19, [X31+40]
	021 Move X30, [X31+16]
	022 Move X21, [X31+24]
	023 Add X31, X31, 48
	024 Return 
	025 Move [X31+12], W2
	026 Move X0, 0x4DA000
	027 Move X0, [X0+1880]
	028 Call 0x1C17D08
	029 Add X1, X31, 12
	030 Call 0x1C17E04
	031 Move X19, X0
	032 Move X0, 0x4E2000
	033 Move X0, [X0+1888]
	034 Call 0x1C17D08
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Move X0, 0x514000
	038 Move X0, [X0+976]
	039 Call 0x1C17D08
	040 Move X21, X0
	041 Move X0, 0x545000
	042 Move X0, [X0+3992]
	043 Move [X31+12], W3
	044 Move X0, 0x4DA000
	045 Move X0, [X0+1880]
	046 Call 0x1C17D08
	047 Add X1, X31, 12
	048 Call 0x1C17E04
	049 Move X19, X0
	050 Move X0, 0x4E2000
	051 Move X0, [X0+1888]
	052 Call 0x1C17D08
	053 Call 0x1C17F10
	054 Move X20, X0
	055 Move X0, 0x4E2000
	056 Move X0, [X0+1896]
	057 Call 0x1C17D08
	058 Move X21, X0
	059 Move X0, 0x545000
	060 Move X0, [X0+4000]
	061 Move [X31+12], W2
	062 Move X0, 0x4DA000
	063 Move X0, [X0+1880]
	064 Call 0x1C17D08
	065 Add X1, X31, 12
	066 Call 0x1C17E04
	067 Move X19, X0
	068 Move X0, 0x4E2000
	069 Move X0, [X0+1888]
	070 Call 0x1C17D08
	071 Call 0x1C17F10
	072 Move X20, X0
	073 Move X0, 0x514000
	074 Move X0, [X0+976]
	075 Call 0x1C17D08
	076 Move X21, X0
	077 Move X0, 0x545000
	078 Move X0, [X0+4008]
	079 Move [X31+12], W8
	080 Move X0, 0x4DA000
	081 Move X0, [X0+1880]
	082 Call 0x1C17D08
	083 Add X1, X31, 12
	084 Call 0x1C17E04
	085 Move X19, X0
	086 Move X0, 0x4E2000
	087 Move X0, [X0+1888]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X20, X0
	091 Move X0, 0x4E2000
	092 Move X0, [X0+1896]
	093 Call 0x1C17D08
	094 Move X21, X0
	095 Move X0, 0x545000
	096 Move X0, [X0+4016]
	097 Call 0x1C17D08
	098 Move X3, X0
	099 Move X0, X20
	100 Move X1, X21
	101 Move X2, X19
	102 Move X4, X31
	103 Call ArgumentOutOfRangeException..ctor, X0, X1, X2, X3
	104 Move X0, 0x545000
	105 Move X0, [X0+4024]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X20
	109 Call 0x1C17DEC

Method: System.Void SetTrianglesImpl(System.Int32 submesh, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array triangles, System.Int32 trianglesArrayLength, System.Int32 start, System.Int32 length, System.Boolean calculateBounds, System.Int32 baseVertex)

Disassembly:
	0x03C1A098 AND W1, W19, 0x1
	0x03C1A09C MOV X0, X20
	0x03C1A0A0 LDP X20, X19, [X31 + 0x10]
	0x03C1A0A4 LDP X30, X21, [X31], #0x20
	0x03C1A0A8 BR X2
	0x03C1A0AC LDP X20, X19, [X31 + 0x10]
	0x03C1A0B0 LDP X30, X21, [X31], #0x20
	0x03C1A0B4 RET
	0x03C1A0B8 STP X30, X21, [X31 - 0x20]!
	0x03C1A0BC STP X20, X19, [X31 + 0x10]
	0x03C1A0C0 ADRP X20, 0x7CA000
	0x03C1A0C4 LDRB W8, [X20 + 0xBD3]
	0x03C1A0C8 MOV X19, X0
	0x03C1A0CC TBNZ X8, 0x0, 0x3C1A0F0
	0x03C1A0D0 ADRP X0, 0x4D9000
	0x03C1A0D4 LDR X0, [X0 + 0xA28]
	0x03C1A0D8 BL 0x1C16CF4
	0x03C1A0DC ADRP X0, 0x544000
	0x03C1A0E0 LDR X0, [X0 + 0xFE0]
	0x03C1A0E4 BL 0x1C16CF4
	0x03C1A0E8 MOVZ W8, 0x1
	0x03C1A0EC STRB W8, [X20 + 0xBD3]
	0x03C1A0F0 ADRP X20, 0x7CA000
	0x03C1A0F4 LDR X8, [X20 + 0xB40]
	0x03C1A0F8 CBNZ X8, 0x3C1A110
	0x03C1A0FC ADRP X0, 0xFFFFFFFFFCEEB000
	0x03C1A100 ADD X0, X0, 0x245
	0x03C1A104 BL 0x1C16CB8
	0x03C1A108 MOV X8, X0
	0x03C1A10C STR X0, [X20 + 0xB40]
	0x03C1A110 MOV X0, X19
	0x03C1A114 BLR X8
	0x03C1A118 TBZ X0, 0x0, 0x3C1A14C
	0x03C1A11C ADRP X20, 0x7CA000
	0x03C1A120 LDR X1, [X20 + 0xBA0]
	0x03C1A124 CBNZ X1, 0x3C1A13C
	0x03C1A128 ADRP X0, 0xFFFFFFFFFCEED000
	0x03C1A12C ADD X0, X0, 0x147
	0x03C1A130 BL 0x1C16CB8
	0x03C1A134 MOV X1, X0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move W26, [X31+80]
	012 Move X21, X3
	013 Move W22, W2
	014 Move W24, W1
	015 Move W1, W4
	016 Move W2, W5
	017 Move W3, W6
	018 Move W23, W7
	019 Move W19, W6
	020 Move W20, W5
	021 Move X25, X0
	022 Call Mesh.CheckIndicesArrayRange, X0, X1, X2, X3
	023 Move X27, 0x7CB000
	024 Move X8, [X27+2824]
	025 Compare X8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, -51343360
	028 Add X0, X0, 3894
	029 Call 0x1C17CB8
	030 Move X8, X0
	031 Move [X27+2824], X0
	032 And W7, W23, 1
	033 Move [X31+80], W26
	034 Move X0, X25
	035 Move W1, W24
	036 Move W3, W22
	037 Move X4, X21
	038 Move W5, W20
	039 Move W6, W19
	040 Move X20, [X31+64]
	041 Move X19, [X31+72]
	042 Move X22, [X31+48]
	043 Move X21, [X31+56]
	044 Move X24, [X31+32]
	045 Move X23, [X31+40]
	046 Move X26, [X31+16]
	047 Move X25, [X31+24]
	048 Move W2, W31
	049 Move X30, [X31+80]
	050 Move X27, [X31+88]
	051 CallNoReturn X8

Method: System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh)

Disassembly:
	0x03C1A4F4 STP V0, V1, [X31]
	0x03C1A4F8 BL 0x3C1A510
	0x03C1A4FC LDP X20, X19, [X31 + 0x30]
	0x03C1A500 LDP X30, X21, [X31 + 0x20]
	0x03C1A504 AND W0, W0, 0x1
	0x03C1A508 ADD X31, X31, 0x40
	0x03C1A50C RET
	0x03C1A510 STR X30, [X31 - 0x20]!
	0x03C1A514 STP X20, X19, [X31 + 0x10]
	0x03C1A518 LDR W8, [X0 + 0x10]
	0x03C1A51C MOV X20, X1
	0x03C1A520 MOV X19, X0
	0x03C1A524 ADD X0, X31, 0xC
	0x03C1A528 STR W8, [X31 + 0xC]
	0x03C1A52C LDR W1, [X1 + 0x10]
	0x03C1A530 MOV X2, X31
	0x03C1A534 BL 0x337B6C8
	0x03C1A538 TBZ X0, 0x0, 0x3C1A5D8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X21, X0
	007 Move X0, X1
	008 Move X1, X31
	009 Move W19, W2
	010 Call NoAllocHelpers.SafeLength, X0
	011 Move X1, X20
	012 Move W4, W19
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move W5, 1
	016 Move W3, W0
	017 Move X0, X21
	018 Move W2, W31
	019 Move W6, W31
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Call Mesh.SetTriangles, X0, X1, X2, X3, X4, X5, X6
	023 Return 

Method: System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)

Disassembly:
	0x03C1A53C LDR W8, [X19 + 0x14]
	0x03C1A540 ADD X0, X31, 0xC
	0x03C1A544 MOV X2, X31
	0x03C1A548 STR W8, [X31 + 0xC]
	0x03C1A54C LDR W1, [X20 + 0x14]
	0x03C1A550 BL 0x337B6C8
	0x03C1A554 TBZ X0, 0x0, 0x3C1A5D8
	0x03C1A558 LDR W8, [X19 + 0x18]
	0x03C1A55C ADD X0, X31, 0xC
	0x03C1A560 MOV X2, X31
	0x03C1A564 STR W8, [X31 + 0xC]
	0x03C1A568 LDR W1, [X20 + 0x18]
	0x03C1A56C BL 0x337B6C8
	0x03C1A570 TBZ X0, 0x0, 0x3C1A5D8
	0x03C1A574 LDR W8, [X19 + 0x1C]
	0x03C1A578 ADD X0, X31, 0xC
	0x03C1A57C MOV X2, X31
	0x03C1A580 STR W8, [X31 + 0xC]
	0x03C1A584 LDR W1, [X20 + 0x1C]
	0x03C1A588 BL 0x337B6C8
	0x03C1A58C TBZ X0, 0x0, 0x3C1A5D8
	0x03C1A590 LDR V0, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, X1
	008 Move X23, X0
	009 Move X0, X1
	010 Move X1, X31
	011 Move W19, W4
	012 Move W20, W3
	013 Move W21, W2
	014 Call NoAllocHelpers.SafeLength, X0
	015 And W5, W20, 1
	016 Move X1, X22
	017 Move W4, W21
	018 Move W6, W19
	019 Move X20, [X31+32]
	020 Move X19, [X31+40]
	021 Move X22, [X31+16]
	022 Move X21, [X31+24]
	023 Move W3, W0
	024 Move X0, X23
	025 Move W2, W31
	026 Move X30, [X31+48]
	027 Move X23, [X31+56]

Method: System.Void SetTriangles(System.Int32[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x03C1A594 LDR V1, [X20]
	0x03C1A598 MOV W0, W31
	0x03C1A59C FCMP S0, S1
	0x03C1A5A0 B.NE 0x3C1A5DC
	0x03C1A5A4 LDR V0, [X19 + 0x4]
	0x03C1A5A8 LDR V1, [X20 + 0x4]
	0x03C1A5AC FCMP S0, S1
	0x03C1A5B0 B.NE 0x3C1A5DC
	0x03C1A5B4 LDR V0, [X19 + 0x8]
	0x03C1A5B8 LDR V1, [X20 + 0x8]
	0x03C1A5BC FCMP S0, S1
	0x03C1A5C0 B.NE 0x3C1A5DC
	0x03C1A5C4 LDR V0, [X20 + 0xC]
	0x03C1A5C8 LDR V1, [X19 + 0xC]
	0x03C1A5CC FCMP S1, S0
	0x03C1A5D0 CSET W0, EQ
	0x03C1A5D4 B 0x3C1A5DC
	0x03C1A5D8 MOV W0, W31
	0x03C1A5DC LDP X20, X19, [X31 + 0x10]
	0x03C1A5E0 LDR X30, [X31], #0x20
	0x03C1A5E4 RET
	0x03C1A5E8 STR X30, [X31 - 0x30]!
	0x03C1A5EC STP X22, X21, [X31 + 0x10]
	0x03C1A5F0 STP X20, X19, [X31 + 0x20]
	0x03C1A5F4 ADRP X21, 0x7CA000
	0x03C1A5F8 ADRP X22, 0x4D9000
	0x03C1A5FC LDRB W8, [X21 + 0xBF1]
	0x03C1A600 LDR X22, [X22 + 0x598]
	0x03C1A604 MOV X20, X1
	0x03C1A608 MOV X19, X0
	0x03C1A60C TBNZ X8, 0x0, 0x3C1A624
	0x03C1A610 ADRP X0, 0x4D9000
	0x03C1A614 LDR X0, [X0 + 0x598]
	0x03C1A618 BL 0x1C16CF4
	0x03C1A61C MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move W22, W2
	011 Move X23, X1
	012 Move W2, 1
	013 Move W1, W4
	014 Move W20, W6
	015 Move W25, W5
	016 Move W21, W4
	017 Move W19, W3
	018 Move X24, X0
	019 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {37}
	024 Move X0, X23
	025 Move X1, X31
	026 Call NoAllocHelpers.SafeLength, X0
	027 Move W4, W0
	028 And W7, W25, 1
	029 Move W2, 1
	030 Move X0, X24
	031 Move W1, W21
	032 Move X3, X23
	033 Move W5, W22
	034 Move W6, W19
	035 Move [X31], W20
	036 Call Mesh.SetTrianglesImpl, X0, X1, X2, X3, X4, X5, X6, X7, X8
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X22, [X31+48]
	040 Move X21, [X31+56]
	041 Move X24, [X31+32]
	042 Move X23, [X31+40]
	043 Move X30, [X31+16]
	044 Move X25, [X31+24]
	045 Add X31, X31, 80
	046 Return 

Method: System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)

Disassembly:
	0x03C1A620 STRB W8, [X21 + 0xBF1]
	0x03C1A624 LDR X0, [X22]
	0x03C1A628 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W3, 1
	002 Move W4, W31

Method: System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)

Disassembly:
	0x03C1A62C CBNZ W8, 0x3C1A634
	0x03C1A630 BL 0x1C16DFC
	0x03C1A634 MOV X0, X20
	0x03C1A638 MOV X1, X31
	0x03C1A63C MOV X2, X31
	0x03C1A640 BL 0x3C354F8
	0x03C1A644 TBZ X0, 0x0, 0x3C1A65C
	0x03C1A648 CBZ X20, 0x3C1A674
	0x03C1A64C MOV X0, X20
	0x03C1A650 MOV X1, X31
	0x03C1A654 BL 0x3C385F8
	0x03C1A658 B 0x3C1A660
	0x03C1A65C MOV W0, W31
	0x03C1A660 STR W0, [X19]
	0x03C1A664 LDP X20, X19, [X31 + 0x20]
	0x03C1A668 LDP X22, X21, [X31 + 0x10]
	0x03C1A66C LDR X30, [X31], #0x30
	0x03C1A670 RET
	0x03C1A674 BL 0x1C16F20
	0x03C1A678 STR W1, [X0 + 0x4]
	0x03C1A67C RET
	0x03C1A680 LDP V1, V0, [X1 + 0x20]
	0x03C1A684 LDP V3, V2, [X1]
	0x03C1A688 STUR V0, [X0 + 0x38]
	0x03C1A68C STUR V1, [X0 + 0x28]
	0x03C1A690 STUR V2, [X0 + 0x18]
	0x03C1A694 STUR V3, [X0 + 0x8]
	0x03C1A698 RET
	0x03C1A69C STP X30, X21, [X31 - 0x20]!
	0x03C1A6A0 STP X20, X19, [X31 + 0x10]
	0x03C1A6A4 ADRP X20, 0x7CA000
	0x03C1A6A8 ADRP X21, 0x4D9000
	0x03C1A6AC LDRB W8, [X20 + 0xBF2]
	0x03C1A6B0 LDR X21, [X21 + 0x598]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X24, 0x7CB000
	010 Move X25, 0x545000
	011 Move W8, [X24+3020]
	012 Move X25, [X25+4032]
	013 Move W19, W4
	014 Move W22, W3
	015 Move W20, W2
	016 Move X21, X1
	017 Move X23, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x545000
	023 Move X0, [X0+4032]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X24+3020], W8
	027 Move X1, [X25]
	028 Move X0, X21
	029 Call NoAllocHelpers.SafeLength, X0
	030 And W5, W22, 1
	031 Move W3, W0
	032 Move X0, X23
	033 Move X1, X21
	034 Move W4, W20
	035 Move W6, W19
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X24, [X31+16]
	041 Move X23, [X31+24]
	042 Move W2, W31
	043 Move X30, [X31+64]
	044 Move X25, [X31+72]

Method: System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x03C1A6B4 MOV X19, X0
	0x03C1A6B8 TBNZ X8, 0x0, 0x3C1A6D0
	0x03C1A6BC ADRP X0, 0x4D9000
	0x03C1A6C0 LDR X0, [X0 + 0x598]
	0x03C1A6C4 BL 0x1C16CF4
	0x03C1A6C8 MOVZ W8, 0x1
	0x03C1A6CC STRB W8, [X20 + 0xBF2]
	0x03C1A6D0 LDR X0, [X21]
	0x03C1A6D4 LDR W8, [X0 + 0xE0]
	0x03C1A6D8 CBNZ W8, 0x3C1A6E0
	0x03C1A6DC BL 0x1C16DFC
	0x03C1A6E0 MOV X0, X19
	0x03C1A6E4 LDP X20, X19, [X31 + 0x10]
	0x03C1A6E8 MOV X1, X31
	0x03C1A6EC LDP X30, X21, [X31], #0x20
	0x03C1A6F0 B 0x3C33594
	0x03C1A6F4 STR X30, [X31 - 0x20]!
	0x03C1A6F8 STP X20, X19, [X31 + 0x10]
	0x03C1A6FC ADRP X20, 0x7CA000
	0x03C1A700 LDR X1, [X20 + 0xBF8]
	0x03C1A704 MOV X19, X0
	0x03C1A708 CBNZ X1, 0x3C1A720
	0x03C1A70C ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C1A710 ADD X0, X0, 0xBE4
	0x03C1A714 BL 0x1C16CB8
	0x03C1A718 MOV X1, X0
	0x03C1A71C STR X0, [X20 + 0xBF8]
	0x03C1A720 MOV X0, X19
	0x03C1A724 LDP X20, X19, [X31 + 0x10]
	0x03C1A728 LDR X30, [X31], #0x20
	0x03C1A72C BR X1
	0x03C1A730 STP X30, X21, [X31 - 0x20]!
	0x03C1A734 STP X20, X19, [X31 + 0x10]
	0x03C1A738 ADRP X20, 0x7CA000
	0x03C1A73C ADRP X21, 0x539000
	0x03C1A740 LDRB W8, [X20 + 0xC00]
	0x03C1A744 LDR X21, [X21 + 0x90]
	0x03C1A748 MOV X19, X0
	0x03C1A74C TBNZ X8, 0x0, 0x3C1A764
	0x03C1A750 ADRP X0, 0x539000
	0x03C1A754 LDR X0, [X0 + 0x90]
	0x03C1A758 BL 0x1C16CF4
	0x03C1A75C MOVZ W8, 0x1
	0x03C1A760 STRB W8, [X20 + 0xC00]
	0x03C1A764 LDR X0, [X21]
	0x03C1A768 LDR W8, [X0 + 0xE0]
	0x03C1A76C CBNZ W8, 0x3C1A774
	0x03C1A770 BL 0x1C16DFC
	0x03C1A774 MOV X0, X19
	0x03C1A778 LDP X20, X19, [X31 + 0x10]
	0x03C1A77C MOV X1, X31
	0x03C1A780 LDP X30, X21, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X26, 0x7CB000
	012 Move W8, [X26+3021]
	013 Move W20, W6
	014 Move W23, W5
	015 Move W21, W4
	016 Move W19, W3
	017 Move W22, W2
	018 Move X25, X1
	019 Move X24, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x545000
	025 Move X0, [X0+4032]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X26+3021], W8
	029 Move W2, 1
	030 Move X0, X24
	031 Move W1, W21
	032 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {56}
	037 Move X26, 0x545000
	038 Move X26, [X26+4032]
	039 Move X0, X25
	040 Move X1, X31
	041 Call NoAllocHelpers.ExtractArrayFromList, X0
	042 Move X1, [X26]
	043 Move X26, X0
	044 Move X0, X25
	045 Call NoAllocHelpers.SafeLength, X0
	046 Move W4, W0
	047 And W7, W23, 1
	048 Move W2, 1
	049 Move X0, X24
	050 Move W1, W21
	051 Move X3, X26
	052 Move W5, W22
	053 Move W6, W19
	054 Move [X31], W20
	055 Call Mesh.SetTrianglesImpl, X0, X1, X2, X3, X4, X5, X6, X7, X8
	056 Move X20, [X31+80]
	057 Move X19, [X31+88]
	058 Move X22, [X31+64]
	059 Move X21, [X31+72]
	060 Move X24, [X31+48]
	061 Move X23, [X31+56]
	062 Move X26, [X31+32]
	063 Move X25, [X31+40]
	064 Move X30, [X31+16]
	065 Add X31, X31, 96
	066 Return 

Method: System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh)

Disassembly:
	0x03C1A784 B 0x3C6142C
	0x03C1A788 STR X30, [X31 - 0x20]!
	0x03C1A78C STP X20, X19, [X31 + 0x10]
	0x03C1A790 ADRP X20, 0x7CA000
	0x03C1A794 LDR X1, [X20 + 0xC08]
	0x03C1A798 MOV X19, X0
	0x03C1A79C CBNZ X1, 0x3C1A7B4
	0x03C1A7A0 ADRP X0, 0xFFFFFFFFFCF0C000
	0x03C1A7A4 ADD X0, X0, 0xC61
	0x03C1A7A8 BL 0x1C16CB8
	0x03C1A7AC MOV X1, X0
	0x03C1A7B0 STR X0, [X20 + 0xC08]
	0x03C1A7B4 MOV X0, X19
	0x03C1A7B8 LDP X20, X19, [X31 + 0x10]
	0x03C1A7BC LDR X30, [X31], #0x20
	0x03C1A7C0 BR X1
	0x03C1A7C4 STR X30, [X31 - 0x20]!
	0x03C1A7C8 STP X20, X19, [X31 + 0x10]
	0x03C1A7CC ADRP X20, 0x7CA000
	0x03C1A7D0 LDR X1, [X20 + 0xC10]
	0x03C1A7D4 MOV X19, X0
	0x03C1A7D8 CBNZ X1, 0x3C1A7F0
	0x03C1A7DC ADRP X0, 0xFFFFFFFFFCF08000
	0x03C1A7E0 ADD X0, X0, 0xFE3
	0x03C1A7E4 BL 0x1C16CB8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, X1
	008 Move X22, X0
	009 Move X0, X1
	010 Move X1, X31
	011 Move W19, W3
	012 Move W20, W2
	013 Call NoAllocHelpers.SafeLength, X0
	014 Move W3, W0
	015 Move W6, 1
	016 Move X0, X22
	017 Move X1, X21
	018 Move W2, W31
	019 Move W4, W20
	020 Move W5, W19
	021 Move W7, W31
	022 Call Mesh.SetIndices, X0, X1, X2, X3, X4, X5, X6, X7
	023 Move X20, [X31+48]
	024 Move X19, [X31+56]
	025 Move X22, [X31+32]
	026 Move X21, [X31+40]
	027 Move X30, [X31+16]
	028 Add X31, X31, 64
	029 Return 

Method: System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds)

Disassembly:
	0x03C1A85C BL 0x1C16CB8
	0x03C1A860 MOV X1, X0
	0x03C1A864 STR X0, [X20 + 0xC08]
	0x03C1A868 MOV X0, X19
	0x03C1A86C LDP X20, X19, [X31 + 0x10]
	0x03C1A870 LDR X30, [X31], #0x20
	0x03C1A874 BR X1
	0x03C1A878 STP X30, X19, [X31 - 0x10]!
	0x03C1A87C ADRP X0, 0x4E2000
	0x03C1A880 LDR X0, [X0 + 0x758]
	0x03C1A884 BL 0x1C16D08
	0x03C1A888 BL 0x1C16F10
	0x03C1A88C MOV X1, X31
	0x03C1A890 MOV X19, X0
	0x03C1A894 BL 0x3380288
	0x03C1A898 ADRP X0, 0x544000
	0x03C1A89C LDR X0, [X0 + 0xFF8]
	0x03C1A8A0 BL 0x1C16D08
	0x03C1A8A4 MOV X1, X0
	0x03C1A8A8 MOV X0, X19
	0x03C1A8AC BL 0x1C16DEC
	0x03C1A8B0 STR X30, [X31 - 0x20]!
	0x03C1A8B4 STP X20, X19, [X31 + 0x10]
	0x03C1A8B8 ADRP X20, 0x7CA000
	0x03C1A8BC LDR X1, [X20 + 0xC10]
	0x03C1A8C0 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, X1
	009 Move X23, X0
	010 Move X0, X1
	011 Move X1, X31
	012 Move W19, W4
	013 Move W20, W3
	014 Move W21, W2
	015 Call NoAllocHelpers.SafeLength, X0
	016 Move W3, W0
	017 And W6, W19, 1
	018 Move X0, X23
	019 Move X1, X22
	020 Move W2, W31
	021 Move W4, W21
	022 Move W5, W20
	023 Move W7, W31
	024 Call Mesh.SetIndices, X0, X1, X2, X3, X4, X5, X6, X7
	025 Move X20, [X31+48]
	026 Move X19, [X31+56]
	027 Move X22, [X31+32]
	028 Move X21, [X31+40]
	029 Move X30, [X31+16]
	030 Move X23, [X31+24]
	031 Add X31, X31, 64
	032 Return 

Method: System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)

Disassembly:
	0x03C1A7E8 MOV X1, X0
	0x03C1A7EC STR X0, [X20 + 0xC10]
	0x03C1A7F0 MOV X0, X19
	0x03C1A7F4 LDP X20, X19, [X31 + 0x10]
	0x03C1A7F8 LDR X30, [X31], #0x20
	0x03C1A7FC BR X1
	0x03C1A800 STR X30, [X31 - 0x20]!
	0x03C1A804 STP X20, X19, [X31 + 0x10]
	0x03C1A808 ADRP X20, 0x7CA000
	0x03C1A80C LDR X1, [X20 + 0xC18]
	0x03C1A810 MOV X19, X0
	0x03C1A814 CBNZ X1, 0x3C1A82C
	0x03C1A818 ADRP X0, 0xFFFFFFFFFCF06000
	0x03C1A81C ADD X0, X0, 0x948
	0x03C1A820 BL 0x1C16CB8
	0x03C1A824 MOV X1, X0
	0x03C1A828 STR X0, [X20 + 0xC18]
	0x03C1A82C MOV X0, X19
	0x03C1A830 LDP X20, X19, [X31 + 0x10]
	0x03C1A834 LDR X30, [X31], #0x20
	0x03C1A838 BR X1
	0x03C1A83C STR X30, [X31 - 0x20]!
	0x03C1A840 STP X20, X19, [X31 + 0x10]
	0x03C1A844 ADRP X20, 0x7CA000
	0x03C1A848 LDR X1, [X20 + 0xC08]
	0x03C1A84C MOV X19, X0
	0x03C1A850 CBNZ X1, 0x3C1A868
	0x03C1A854 ADRP X0, 0xFFFFFFFFFCF0C000
	0x03C1A858 ADD X0, X0, 0xC61

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X23, X1
	010 Move X24, X0
	011 Move X0, X1
	012 Move X1, X31
	013 Move W19, W5
	014 Move W20, W4
	015 Move W21, W3
	016 Move W22, W2
	017 Call NoAllocHelpers.SafeLength, X0
	018 Move W3, W0
	019 And W6, W20, 1
	020 Move X0, X24
	021 Move X1, X23
	022 Move W2, W31
	023 Move W4, W22
	024 Move W5, W21
	025 Move W7, W19
	026 Call Mesh.SetIndices, X0, X1, X2, X3, X4, X5, X6, X7
	027 Move X20, [X31+64]
	028 Move X19, [X31+72]
	029 Move X22, [X31+48]
	030 Move X21, [X31+56]
	031 Move X24, [X31+32]
	032 Move X23, [X31+40]
	033 Move X30, [X31+16]
	034 Add X31, X31, 80
	035 Return 

Method: System.Void SetIndices(System.Int32[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x03C1A8C4 CBNZ X1, 0x3C1A8DC
	0x03C1A8C8 ADRP X0, 0xFFFFFFFFFCF08000
	0x03C1A8CC ADD X0, X0, 0xFE3
	0x03C1A8D0 BL 0x1C16CB8
	0x03C1A8D4 MOV X1, X0
	0x03C1A8D8 STR X0, [X20 + 0xC10]
	0x03C1A8DC MOV X0, X19
	0x03C1A8E0 LDP X20, X19, [X31 + 0x10]
	0x03C1A8E4 LDR X30, [X31], #0x20
	0x03C1A8E8 BR X1
	0x03C1A8EC STP X30, X19, [X31 - 0x10]!
	0x03C1A8F0 ADRP X0, 0x4E2000
	0x03C1A8F4 LDR X0, [X0 + 0x758]
	0x03C1A8F8 BL 0x1C16D08
	0x03C1A8FC BL 0x1C16F10
	0x03C1A900 MOV X1, X31
	0x03C1A904 MOV X19, X0
	0x03C1A908 BL 0x3380288
	0x03C1A90C ADRP X0, 0x545000
	0x03C1A910 LDR X0, [X0]
	0x03C1A914 BL 0x1C16D08
	0x03C1A918 MOV X1, X0
	0x03C1A91C MOV X0, X19
	0x03C1A920 BL 0x1C16DEC
	0x03C1A924 STR X30, [X31 - 0x20]!
	0x03C1A928 STP X20, X19, [X31 + 0x10]
	0x03C1A92C ADRP X20, 0x7CA000
	0x03C1A930 LDR X1, [X20 + 0xC18]
	0x03C1A934 MOV X19, X0
	0x03C1A938 CBNZ X1, 0x3C1A950
	0x03C1A93C ADRP X0, 0xFFFFFFFFFCF06000
	0x03C1A940 ADD X0, X0, 0x948
	0x03C1A944 BL 0x1C16CB8
	0x03C1A948 MOV X1, X0
	0x03C1A94C STR X0, [X20 + 0xC18]
	0x03C1A950 MOV X0, X19
	0x03C1A954 LDP X20, X19, [X31 + 0x10]
	0x03C1A958 LDR X30, [X31], #0x20
	0x03C1A95C BR X1
	0x03C1A960 STP X30, X19, [X31 - 0x10]!
	0x03C1A964 ADRP X0, 0x4E2000
	0x03C1A968 LDR X0, [X0 + 0x758]
	0x03C1A96C BL 0x1C16D08
	0x03C1A970 BL 0x1C16F10
	0x03C1A974 MOV X1, X31
	0x03C1A978 MOV X19, X0
	0x03C1A97C BL 0x3380288
	0x03C1A980 ADRP X0, 0x545000
	0x03C1A984 LDR X0, [X0 + 0x8]
	0x03C1A988 BL 0x1C16D08
	0x03C1A98C MOV X1, X0
	0x03C1A990 MOV X0, X19
	0x03C1A994 BL 0x1C16DEC

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move W23, W2
	012 Move X24, X1
	013 Move W1, W5
	014 Move W2, W31
	015 Move W19, W7
	016 Move W25, W6
	017 Move W21, W5
	018 Move W22, W4
	019 Move W20, W3
	020 Move X26, X0
	021 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {62}
	026 Move X0, X24
	027 Move X1, X31
	028 Call NoAllocHelpers.SafeLength, X0
	029 Move W1, W0
	030 Move W2, W23
	031 Move W3, W20
	032 Call Mesh.CheckIndicesArrayRange, X0, X1, X2, X3
	033 Move X27, 0x7CB000
	034 Move X8, [X27+2824]
	035 Compare X8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, -51343360
	038 Add X0, X0, 3894
	039 Call 0x1C17CB8
	040 Move X8, X0
	041 Move [X27+2824], X0
	042 And W7, W25, 1
	043 Move [X31+80], W19
	044 Move X0, X26
	045 Move W1, W21
	046 Move W2, W22
	047 Move X4, X24
	048 Move W5, W23
	049 Move W6, W20
	050 Move X20, [X31+64]
	051 Move X19, [X31+72]
	052 Move X22, [X31+48]
	053 Move X21, [X31+56]
	054 Move X24, [X31+32]
	055 Move X23, [X31+40]
	056 Move X26, [X31+16]
	057 Move X25, [X31+24]
	058 Move W3, 1
	059 Move X30, [X31+80]
	060 Move X27, [X31+88]
	061 CallNoReturn X8
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X22, [X31+48]
	065 Move X21, [X31+56]
	066 Move X24, [X31+32]
	067 Move X23, [X31+40]
	068 Move X26, [X31+16]
	069 Move X25, [X31+24]
	070 Move X30, [X31+80]
	071 Move X27, [X31+88]
	072 Return 

Method: System.Void SetIndices(System.UInt16[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x03C1A998 STR X30, [X31 - 0x20]!
	0x03C1A99C STP X20, X19, [X31 + 0x10]
	0x03C1A9A0 ADRP X20, 0x7CA000
	0x03C1A9A4 LDR X1, [X20 + 0xC20]
	0x03C1A9A8 MOV X19, X0
	0x03C1A9AC CBNZ X1, 0x3C1A9C4
	0x03C1A9B0 ADRP X0, 0xFFFFFFFFFCEEF000
	0x03C1A9B4 ADD X0, X0, 0x142
	0x03C1A9B8 BL 0x1C16CB8
	0x03C1A9BC MOV X1, X0
	0x03C1A9C0 STR X0, [X20 + 0xC20]
	0x03C1A9C4 MOV X0, X19
	0x03C1A9C8 LDP X20, X19, [X31 + 0x10]
	0x03C1A9CC LDR X30, [X31], #0x20
	0x03C1A9D0 BR X1
	0x03C1A9D4 STR X30, [X31 - 0x20]!
	0x03C1A9D8 STP X20, X19, [X31 + 0x10]
	0x03C1A9DC ADRP X20, 0x7CA000
	0x03C1A9E0 LDR X1, [X20 + 0xC28]
	0x03C1A9E4 MOV X19, X0
	0x03C1A9E8 CBNZ X1, 0x3C1AA00
	0x03C1A9EC ADRP X0, 0xFFFFFFFFFCED4000
	0x03C1A9F0 ADD X0, X0, 0xE79
	0x03C1A9F4 BL 0x1C16CB8
	0x03C1A9F8 MOV X1, X0
	0x03C1A9FC STR X0, [X20 + 0xC28]
	0x03C1AA00 MOV X0, X19
	0x03C1AA04 LDP X20, X19, [X31 + 0x10]
	0x03C1AA08 LDR X30, [X31], #0x20

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X23, X1
	010 Move X24, X0
	011 Move X0, X1
	012 Move X1, X31
	013 Move W19, W5
	014 Move W20, W4
	015 Move W21, W3
	016 Move W22, W2
	017 Call NoAllocHelpers.SafeLength, X0
	018 Move W3, W0
	019 And W6, W20, 1
	020 Move X0, X24
	021 Move X1, X23
	022 Move W2, W31
	023 Move W4, W22
	024 Move W5, W21
	025 Move W7, W19
	026 Call Mesh.SetIndices, X0, X1, X2, X3, X4, X5, X6, X7
	027 Move X20, [X31+64]
	028 Move X19, [X31+72]
	029 Move X22, [X31+48]
	030 Move X21, [X31+56]
	031 Move X24, [X31+32]
	032 Move X23, [X31+40]
	033 Move X30, [X31+16]
	034 Add X31, X31, 80
	035 Return 

Method: System.Void SetIndices(System.UInt16[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x03C1AA0C BR X1
	0x03C1AA10 STP X30, X21, [X31 - 0x20]!
	0x03C1AA14 STP X20, X19, [X31 + 0x10]
	0x03C1AA18 ADRP X21, 0x7CA000
	0x03C1AA1C LDR X2, [X21 + 0xC30]
	0x03C1AA20 MOV W19, W1
	0x03C1AA24 MOV X20, X0
	0x03C1AA28 CBNZ X2, 0x3C1AA40
	0x03C1AA2C ADRP X0, 0xFFFFFFFFFCEE5000
	0x03C1AA30 ADD X0, X0, 0x12D
	0x03C1AA34 BL 0x1C16CB8
	0x03C1AA38 MOV X2, X0
	0x03C1AA3C STR X0, [X21 + 0xC30]
	0x03C1AA40 MOV X0, X20
	0x03C1AA44 MOV W1, W19
	0x03C1AA48 LDP X20, X19, [X31 + 0x10]
	0x03C1AA4C LDP X30, X21, [X31], #0x20
	0x03C1AA50 BR X2
	0x03C1AA54 STP X30, X21, [X31 - 0x20]!
	0x03C1AA58 STP X20, X19, [X31 + 0x10]
	0x03C1AA5C ADRP X21, 0x7CA000
	0x03C1AA60 LDR X2, [X21 + 0xC38]
	0x03C1AA64 MOV W19, W1
	0x03C1AA68 MOV X20, X0
	0x03C1AA6C CBNZ X2, 0x3C1AA84
	0x03C1AA70 ADRP X0, 0xFFFFFFFFFCEDD000
	0x03C1AA74 ADD X0, X0, 0xE8
	0x03C1AA78 BL 0x1C16CB8
	0x03C1AA7C MOV X2, X0
	0x03C1AA80 STR X0, [X21 + 0xC38]
	0x03C1AA84 MOV X0, X20
	0x03C1AA88 MOV W1, W19
	0x03C1AA8C LDP X20, X19, [X31 + 0x10]
	0x03C1AA90 LDP X30, X21, [X31], #0x20
	0x03C1AA94 BR X2
	0x03C1AA98 STP X30, X21, [X31 - 0x20]!
	0x03C1AA9C STP X20, X19, [X31 + 0x10]
	0x03C1AAA0 ADRP X21, 0x7CA000
	0x03C1AAA4 LDR X2, [X21 + 0xC40]
	0x03C1AAA8 MOV W19, W1
	0x03C1AAAC MOV X20, X0
	0x03C1AAB0 CBNZ X2, 0x3C1AAC8
	0x03C1AAB4 ADRP X0, 0xFFFFFFFFFCED6000
	0x03C1AAB8 ADD X0, X0, 0xEAA
	0x03C1AABC BL 0x1C16CB8
	0x03C1AAC0 MOV X2, X0
	0x03C1AAC4 STR X0, [X21 + 0xC40]
	0x03C1AAC8 MOV X0, X20
	0x03C1AACC MOV W1, W19
	0x03C1AAD0 LDP X20, X19, [X31 + 0x10]
	0x03C1AAD4 LDP X30, X21, [X31], #0x20
	0x03C1AAD8 BR X2
	0x03C1AADC STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move W20, W2
	012 Move X24, X1
	013 Move W1, W5
	014 Move W2, W31
	015 Move W23, W7
	016 Move W25, W6
	017 Move W22, W5
	018 Move W21, W4
	019 Move W19, W3
	020 Move X26, X0
	021 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {62}
	026 Move X0, X24
	027 Move X1, X31
	028 Call NoAllocHelpers.SafeLength, X0
	029 Move W1, W0
	030 Move W2, W20
	031 Move W3, W19
	032 Call Mesh.CheckIndicesArrayRange, X0, X1, X2, X3
	033 Move X27, 0x7CB000
	034 Move X8, [X27+2824]
	035 Compare X8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, -51343360
	038 Add X0, X0, 3894
	039 Call 0x1C17CB8
	040 Move X8, X0
	041 Move [X27+2824], X0
	042 And W7, W25, 1
	043 Move [X31+80], W23
	044 Move X0, X26
	045 Move W1, W22
	046 Move W2, W21
	047 Move X4, X24
	048 Move W5, W20
	049 Move W6, W19
	050 Move X20, [X31+64]
	051 Move X19, [X31+72]
	052 Move X22, [X31+48]
	053 Move X21, [X31+56]
	054 Move X24, [X31+32]
	055 Move X23, [X31+40]
	056 Move X26, [X31+16]
	057 Move X25, [X31+24]
	058 Move W3, W31
	059 Move X30, [X31+80]
	060 Move X27, [X31+88]
	061 CallNoReturn X8
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X22, [X31+48]
	065 Move X21, [X31+56]
	066 Move X24, [X31+32]
	067 Move X23, [X31+40]
	068 Move X26, [X31+16]
	069 Move X25, [X31+24]
	070 Move X30, [X31+80]
	071 Move X27, [X31+88]
	072 Return 

Method: System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x0221B138 MOV X0, X21
	0x0221B13C MOV X1, X20
	0x0221B140 MOV X3, X31
	0x0221B144 BL 0x32274B8
	0x0221B148 MOV X20, X0
	0x0221B14C ADRP X0, 0x1ED8000
	0x0221B150 LDR X0, [X0 + 0x5B0]
	0x0221B154 BL 0x1C16D08
	0x0221B158 BL 0x1C16F10
	0x0221B15C MOV X1, X20
	0x0221B160 MOV X2, X31
	0x0221B164 MOV X21, X0
	0x0221B168 BL 0x337DF1C
	0x0221B16C MOV X0, X21
	0x0221B170 MOV X1, X19
	0x0221B174 BL 0x1C16DEC
	0x0221B178 SUB X31, X31, 0x60
	0x0221B17C STP X30, X27, [X31 + 0x10]
	0x0221B180 STP X26, X25, [X31 + 0x20]
	0x0221B184 STP X24, X23, [X31 + 0x30]
	0x0221B188 STP X22, X21, [X31 + 0x40]
	0x0221B18C STP X20, X19, [X31 + 0x50]
	0x0221B190 LDR X19, [X31 + 0x60]
	0x0221B194 MOV W22, W7
	0x0221B198 MOV W23, W6
	0x0221B19C MOV W20, W5
	0x0221B1A0 LDR X8, [X19 + 0x38]
	0x0221B1A4 MOV W21, W4
	0x0221B1A8 MOV W24, W3
	0x0221B1AC MOV X27, X2
	0x0221B1B0 MOV X26, X1
	0x0221B1B4 MOV X25, X0
	0x0221B1B8 CBNZ X8, 0x221B1C4
	0x0221B1BC MOV X0, X19
	0x0221B1C0 BL 0x1C5C6E0
	0x0221B1C4 MOV X0, X25
	0x0221B1C8 MOV X1, X31
	0x0221B1CC BL 0x3C175DC

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X8, [X7+56]
	012 Move W22, W6
	013 Move W23, W5
	014 Move W19, W4
	015 Move W20, W3
	016 Move X21, X2
	017 Move X24, X1
	018 Move X25, X0
	019 Compare X8, 0
	020 JumpIfNotEqual {25}
	021 Move X0, X7
	022 Move X26, X7
	023 Call 0x1C5D6E0
	024 Move X8, [X26+56]
	025 Move X8, [X8+24]
	026 And W7, W23, 1
	027 Move X0, X25
	028 Move X1, X24
	029 Move X2, X21
	030 Move W3, W31
	031 Move W4, W21
	032 Move W5, W20
	033 Move W6, W19
	034 Move [X31+8], X8
	035 Move [X31], W22
	036 Call 0x221B284, X0, X1, X2, X3, X4, X5, X6, X7
	037 Move X20, [X31+80]
	038 Move X19, [X31+88]
	039 Move X22, [X31+64]
	040 Move X21, [X31+72]
	041 Move X24, [X31+48]
	042 Move X23, [X31+56]
	043 Move X26, [X31+32]
	044 Move X25, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 96
	047 Return 

Method: System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x0221B284 ADRP X0, 0x1ED8000
	0x0221B288 LDR X0, [X0 + 0x5B0]
	0x0221B28C BL 0x1C16D08
	0x0221B290 BL 0x1C16F10
	0x0221B294 MOV X1, X20
	0x0221B298 MOV X2, X31
	0x0221B29C MOV X21, X0
	0x0221B2A0 BL 0x337DF1C
	0x0221B2A4 B 0x221B33C
	0x0221B2A8 STR W24, [X31 + 0xC]
	0x0221B2AC ADRP X22, 0x1ED8000
	0x0221B2B0 LDR X22, [X22 + 0x758]
	0x0221B2B4 MOV X0, X22
	0x0221B2B8 BL 0x1C16D08
	0x0221B2BC ADD X1, X31, 0xC
	0x0221B2C0 BL 0x1C16E04
	0x0221B2C4 MOV X23, X0
	0x0221B2C8 MOV X0, X22
	0x0221B2CC STR W21, [X31 + 0x8]
	0x0221B2D0 BL 0x1C16D08
	0x0221B2D4 ADD X1, X31, 0x8
	0x0221B2D8 BL 0x1C16E04
	0x0221B2DC MOV X21, X0
	0x0221B2E0 MOV X0, X22
	0x0221B2E4 STR W20, [X31 + 0x4]
	0x0221B2E8 BL 0x1C16D08
	0x0221B2EC ADD X1, X31, 0x4
	0x0221B2F0 BL 0x1C16E04
	0x0221B2F4 MOV X20, X0
	0x0221B2F8 ADRP X0, 0x1F01000
	0x0221B2FC LDR X0, [X0 + 0x98]
	0x0221B300 BL 0x1C16D08
	0x0221B304 MOV X1, X23
	0x0221B308 MOV X2, X21
	0x0221B30C MOV X3, X20
	0x0221B310 MOV X4, X31
	0x0221B314 BL 0x3227C18
	0x0221B318 MOV X20, X0
	0x0221B31C ADRP X0, 0x1EE0000
	0x0221B320 LDR X0, [X0 + 0x760]
	0x0221B324 BL 0x1C16D08
	0x0221B328 BL 0x1C16F10
	0x0221B32C MOV X1, X20
	0x0221B330 MOV X2, X31
	0x0221B334 MOV X21, X0
	0x0221B338 BL 0x3316014
	0x0221B33C MOV X0, X21
	0x0221B340 MOV X1, X19
	0x0221B344 BL 0x1C16DEC
	0x0221B348 STR X30, [X31 - 0x40]!
	0x0221B34C STP X24, X23, [X31 + 0x10]
	0x0221B350 STP X22, X21, [X31 + 0x20]
	0x0221B354 STP X20, X19, [X31 + 0x30]
	0x0221B358 LDR X8, [X2 + 0x38]
	0x0221B35C MOV X20, X2
	0x0221B360 MOV X19, X1
	0x0221B364 MOV X22, X0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X8, [X31+88]
	012 Move W27, [X31+80]
	013 Move W23, W7
	014 Move W22, W6
	015 Move X9, [X8+56]
	016 Move W21, W5
	017 Move W19, W4
	018 Move W20, W3
	019 Move X26, X2
	020 Move X25, X1
	021 Move X24, X0
	022 Compare X9, 0
	023 JumpIfNotEqual {26}
	024 Move X0, X8
	025 Call 0x1C5D6E0
	026 Move X0, X24
	027 Move W1, W22
	028 Move X2, X31
	029 Call Mesh.CheckCanAccessSubmeshIndices, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {67}
	034 Move X0, X24
	035 Move W1, W26
	036 Move W2, W20
	037 Move W3, W19
	038 Move X4, X31
	039 Call Mesh.CheckIndicesArrayRange, X0, X1, X2, X3
	040 Move X0, X25
	041 Move X1, X31
	042 Call IntPtr.op_Explicit, X0
	043 Compare X24, 0
	044 JumpIfEqual {78}
	045 Move X4, X0
	046 And W7, W23, 1
	047 Move X0, X24
	048 Move W1, W22
	049 Move W2, W21
	050 Move W5, W20
	051 Move W6, W19
	052 Move X20, [X31+64]
	053 Move X19, [X31+72]
	054 Move X22, [X31+48]
	055 Move X21, [X31+56]
	056 Move X24, [X31+32]
	057 Move X23, [X31+40]
	058 Move X26, [X31+16]
	059 Move X25, [X31+24]
	060 Move [X31+88], X31
	061 Move [X31+80], W27
	062 Move W3, W31
	063 Move X30, [X31+80]
	064 Move X27, [X31+88]
	065 Call Mesh.SetIndicesNativeArrayImpl, X0, X1, X2, X3, X4, X5, X6, X7, X8
	066 Return 
	067 Move X20, [X31+64]
	068 Move X19, [X31+72]
	069 Move X22, [X31+48]
	070 Move X21, [X31+56]
	071 Move X24, [X31+32]
	072 Move X23, [X31+40]
	073 Move X26, [X31+16]
	074 Move X25, [X31+24]
	075 Move X30, [X31+80]
	076 Move X27, [X31+88]
	077 Return 
	078 Call 0x1C17F20

Method: System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x03C1AAE0 STP X20, X19, [X31 + 0x10]
	0x03C1AAE4 ADRP X21, 0x7CA000
	0x03C1AAE8 LDR X2, [X21 + 0xC48]
	0x03C1AAEC MOV W19, W1
	0x03C1AAF0 MOV X20, X0
	0x03C1AAF4 CBNZ X2, 0x3C1AB0C
	0x03C1AAF8 ADRP X0, 0xFFFFFFFFFCEEF000
	0x03C1AAFC ADD X0, X0, 0x168
	0x03C1AB00 BL 0x1C16CB8
	0x03C1AB04 MOV X2, X0
	0x03C1AB08 STR X0, [X21 + 0xC48]
	0x03C1AB0C MOV X0, X20
	0x03C1AB10 MOV W1, W19
	0x03C1AB14 LDP X20, X19, [X31 + 0x10]
	0x03C1AB18 LDP X30, X21, [X31], #0x20
	0x03C1AB1C BR X2
	0x03C1AB20 STR X30, [X31 - 0x20]!
	0x03C1AB24 STP X20, X19, [X31 + 0x10]
	0x03C1AB28 ADRP X20, 0x7CA000
	0x03C1AB2C LDR X1, [X20 + 0xC50]
	0x03C1AB30 MOV X19, X0
	0x03C1AB34 CBNZ X1, 0x3C1AB4C
	0x03C1AB38 ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C1AB3C ADD X0, X0, 0xF56
	0x03C1AB40 BL 0x1C16CB8
	0x03C1AB44 MOV X1, X0
	0x03C1AB48 STR X0, [X20 + 0xC50]
	0x03C1AB4C MOV X0, X19
	0x03C1AB50 LDP X20, X19, [X31 + 0x10]
	0x03C1AB54 LDR X30, [X31], #0x20
	0x03C1AB58 BR X1
	0x03C1AB5C STP X30, X21, [X31 - 0x20]!
	0x03C1AB60 STP X20, X19, [X31 + 0x10]
	0x03C1AB64 ADRP X21, 0x7CA000
	0x03C1AB68 LDR X2, [X21 + 0xC58]
	0x03C1AB6C MOV W19, W1
	0x03C1AB70 MOV X20, X0
	0x03C1AB74 CBNZ X2, 0x3C1AB8C
	0x03C1AB78 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C1AB7C ADD X0, X0, 0xC0B
	0x03C1AB80 BL 0x1C16CB8

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X25, 0x7CB000
	012 Move X26, 0x545000
	013 Move W8, [X25+3022]
	014 Move X26, [X26+4032]
	015 Move W19, W5
	016 Move W23, W4
	017 Move W20, W3
	018 Move W21, W2
	019 Move X22, X1
	020 Move X24, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x545000
	026 Move X0, [X0+4032]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X25+3022], W8
	030 Move X1, [X26]
	031 Move X0, X22
	032 Call NoAllocHelpers.SafeLength, X0
	033 Move W3, W0
	034 And W6, W23, 1
	035 Move X0, X24
	036 Move X1, X22
	037 Move W2, W31
	038 Move W4, W21
	039 Move W5, W20
	040 Move W7, W19
	041 Call Mesh.SetIndices, X0, X1, X2, X3, X4, X5, X6, X7
	042 Move X20, [X31+80]
	043 Move X19, [X31+88]
	044 Move X22, [X31+64]
	045 Move X21, [X31+72]
	046 Move X24, [X31+48]
	047 Move X23, [X31+56]
	048 Move X26, [X31+32]
	049 Move X25, [X31+40]
	050 Move X30, [X31+16]
	051 Add X31, X31, 96
	052 Return 

Method: System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds = True, System.Int32 baseVertex = 0)

Disassembly:
	0x03C1AB84 MOV X2, X0
	0x03C1AB88 STR X0, [X21 + 0xC58]
	0x03C1AB8C MOV X0, X20
	0x03C1AB90 MOV W1, W19
	0x03C1AB94 LDP X20, X19, [X31 + 0x10]
	0x03C1AB98 LDP X30, X21, [X31], #0x20
	0x03C1AB9C BR X2
	0x03C1ABA0 STR X30, [X31 - 0x20]!
	0x03C1ABA4 STP X20, X19, [X31 + 0x10]
	0x03C1ABA8 ADRP X20, 0x7CA000
	0x03C1ABAC LDR X1, [X20 + 0xC60]
	0x03C1ABB0 MOV X19, X0
	0x03C1ABB4 CBNZ X1, 0x3C1ABCC
	0x03C1ABB8 ADRP X0, 0xFFFFFFFFFCEF1000
	0x03C1ABBC ADD X0, X0, 0x28C
	0x03C1ABC0 BL 0x1C16CB8
	0x03C1ABC4 MOV X1, X0
	0x03C1ABC8 STR X0, [X20 + 0xC60]
	0x03C1ABCC MOV X0, X19
	0x03C1ABD0 LDP X20, X19, [X31 + 0x10]
	0x03C1ABD4 LDR X30, [X31], #0x20
	0x03C1ABD8 BR X1
	0x03C1ABDC STP X30, X21, [X31 - 0x20]!
	0x03C1ABE0 STP X20, X19, [X31 + 0x10]
	0x03C1ABE4 ADRP X21, 0x7CA000
	0x03C1ABE8 LDR X2, [X21 + 0xC68]
	0x03C1ABEC MOV W19, W1
	0x03C1ABF0 MOV X20, X0
	0x03C1ABF4 CBNZ X2, 0x3C1AC0C
	0x03C1ABF8 ADRP X0, 0xFFFFFFFFFCEFC000
	0x03C1ABFC ADD X0, X0, 0x98E
	0x03C1AC00 BL 0x1C16CB8
	0x03C1AC04 MOV X2, X0
	0x03C1AC08 STR X0, [X21 + 0xC68]
	0x03C1AC0C MOV X0, X20
	0x03C1AC10 MOV W1, W19
	0x03C1AC14 LDP X20, X19, [X31 + 0x10]
	0x03C1AC18 LDP X30, X21, [X31], #0x20
	0x03C1AC1C BR X2
	0x03C1AC20 STR X30, [X31 - 0x20]!
	0x03C1AC24 STP X20, X19, [X31 + 0x10]
	0x03C1AC28 ADRP X20, 0x7CA000
	0x03C1AC2C LDR X1, [X20 + 0xC70]
	0x03C1AC30 MOV X19, X0
	0x03C1AC34 CBNZ X1, 0x3C1AC4C
	0x03C1AC38 ADRP X0, 0xFFFFFFFFFCEEB000
	0x03C1AC3C ADD X0, X0, 0x267
	0x03C1AC40 BL 0x1C16CB8
	0x03C1AC44 MOV X1, X0
	0x03C1AC48 STR X0, [X20 + 0xC70]
	0x03C1AC4C MOV X0, X19
	0x03C1AC50 LDP X20, X19, [X31 + 0x10]
	0x03C1AC54 LDR X30, [X31], #0x20
	0x03C1AC58 BR X1
	0x03C1AC5C STR D8, [X31 - 0x20]!
	0x03C1AC60 STR X30, [X31 + 0x8]
	0x03C1AC64 STP X20, X19, [X31 + 0x10]
	0x03C1AC68 ADRP X20, 0x7CA000
	0x03C1AC6C LDR X1, [X20 + 0xC78]
	0x03C1AC70 MOV V8.16B, V0.16B
	0x03C1AC74 MOV X19, X0
	0x03C1AC78 CBNZ X1, 0x3C1AC90
	0x03C1AC7C ADRP X0, 0xFFFFFFFFFCEF5000
	0x03C1AC80 ADD X0, X0, 0x205
	0x03C1AC84 BL 0x1C16CB8
	0x03C1AC88 MOV X1, X0
	0x03C1AC8C STR X0, [X20 + 0xC78]
	0x03C1AC90 MOV X0, X19

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X26, 0x7CB000
	012 Move W8, [X26+3023]
	013 Move W19, W7
	014 Move W24, W6
	015 Move W21, W5
	016 Move W22, W4
	017 Move W20, W3
	018 Move W23, W2
	019 Move X27, X1
	020 Move X25, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x545000
	026 Move X0, [X0+4032]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X26+3023], W8
	030 Move X0, X25
	031 Move W1, W21
	032 Move W2, W31
	033 Call Mesh.CheckCanAccessSubmesh, X0, X1, X2
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {80}
	038 Move X26, 0x545000
	039 Move X26, [X26+4032]
	040 Move X0, X27
	041 Move X1, X31
	042 Call NoAllocHelpers.ExtractArrayFromList, X0
	043 Move X1, [X26]
	044 Move X26, X0
	045 Move X0, X27
	046 Call NoAllocHelpers.SafeLength, X0
	047 Move W1, W0
	048 Move W2, W23
	049 Move W3, W20
	050 Call Mesh.CheckIndicesArrayRange, X0, X1, X2, X3
	051 Move X27, 0x7CB000
	052 Move X8, [X27+2824]
	053 Compare X8, 0
	054 JumpIfNotEqual {60}
	055 Move X0, -51343360
	056 Add X0, X0, 3894
	057 Call 0x1C17CB8
	058 Move X8, X0
	059 Move [X27+2824], X0
	060 And W7, W24, 1
	061 Move [X31+80], W19
	062 Move X0, X25
	063 Move W1, W21
	064 Move W2, W22
	065 Move X4, X26
	066 Move W5, W23
	067 Move W6, W20
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X22, [X31+48]
	071 Move X21, [X31+56]
	072 Move X24, [X31+32]
	073 Move X23, [X31+40]
	074 Move X26, [X31+16]
	075 Move X25, [X31+24]
	076 Move W3, 1
	077 Move X30, [X31+80]
	078 Move X27, [X31+88]
	079 CallNoReturn X8
	080 Move X20, [X31+64]
	081 Move X19, [X31+72]
	082 Move X22, [X31+48]
	083 Move X21, [X31+56]
	084 Move X24, [X31+32]
	085 Move X23, [X31+40]
	086 Move X26, [X31+16]
	087 Move X25, [X31+24]
	088 Move X30, [X31+80]
	089 Move X27, [X31+88]
	090 Return 

Method: System.Void Clear()

Disassembly:
	0x03C1AC94 LDP X20, X19, [X31 + 0x10]
	0x03C1AC98 LDR X30, [X31 + 0x8]
	0x03C1AC9C MOV V0.16B, V8.16B
	0x03C1ACA0 LDR V8, [X31], #0x20
	0x03C1ACA4 BR X1
	0x03C1ACA8 STR X30, [X31 - 0x20]!
	0x03C1ACAC STP X20, X19, [X31 + 0x10]
	0x03C1ACB0 ADRP X20, 0x7CA000
	0x03C1ACB4 LDR X8, [X20 + 0xC98]
	0x03C1ACB8 MOV X19, X0
	0x03C1ACBC STR X31, [X31 + 0x8]
	0x03C1ACC0 CBNZ X8, 0x3C1ACD8
	0x03C1ACC4 ADRP X0, 0xFFFFFFFFFCEDD000
	0x03C1ACC8 ADD X0, X0, 0x128
	0x03C1ACCC BL 0x1C16CB8
	0x03C1ACD0 MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CB000
	005 Move X2, [X20+2912]
	006 Move X19, X0
	007 Compare X2, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51474432
	010 Add X0, X0, 4005
	011 Call 0x1C17CB8
	012 Move X2, X0
	013 Move [X20+2912], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move W1, 1
	018 Move X30, [X31+32]
	019 CallNoReturn X2

Method: System.Void RecalculateBounds()

Disassembly:
	0x03C1ACD4 STR X0, [X20 + 0xC98]
	0x03C1ACD8 ADD X1, X31, 0x8

ISIL:
	001 Move W1, W31

Method: System.Void RecalculateNormals()

Disassembly:
	0x03C1ADD0 BL 0x1C16CB8
	0x03C1ADD4 MOV X8, X0

ISIL:
	001 Move W1, W31

Method: System.Void RecalculateTangents()

Disassembly:
	0x03C1AECC MOV X1, X31
	0x03C1AED0 BL 0x3C3C0B4

ISIL:
	001 Move W1, W31

Method: System.Void RecalculateBounds(UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C1ACDC MOV X0, X19
	0x03C1ACE0 BLR X8
	0x03C1ACE4 LDP S0, S1, [X31 + 0x8]
	0x03C1ACE8 LDP X20, X19, [X31 + 0x10]
	0x03C1ACEC LDR X30, [X31], #0x20
	0x03C1ACF0 RET
	0x03C1ACF4 STP X30, X21, [X31 - 0x20]!
	0x03C1ACF8 STP X20, X19, [X31 + 0x10]
	0x03C1ACFC ADRP X21, 0x7CA000
	0x03C1AD00 LDR X2, [X21 + 0xC98]
	0x03C1AD04 MOV X19, X1
	0x03C1AD08 MOV X20, X0
	0x03C1AD0C CBNZ X2, 0x3C1AD24
	0x03C1AD10 ADRP X0, 0xFFFFFFFFFCEDD000
	0x03C1AD14 ADD X0, X0, 0x128
	0x03C1AD18 BL 0x1C16CB8
	0x03C1AD1C MOV X2, X0
	0x03C1AD20 STR X0, [X21 + 0xC98]
	0x03C1AD24 MOV X0, X20
	0x03C1AD28 MOV X1, X19
	0x03C1AD2C LDP X20, X19, [X31 + 0x10]
	0x03C1AD30 LDP X30, X21, [X31], #0x20
	0x03C1AD34 BR X2
	0x03C1AD38 STR X30, [X31 - 0x20]!
	0x03C1AD3C STP X20, X19, [X31 + 0x10]
	0x03C1AD40 ADRP X20, 0x7CA000
	0x03C1AD44 LDR X1, [X20 + 0xC80]
	0x03C1AD48 MOV X19, X0
	0x03C1AD4C CBNZ X1, 0x3C1AD64
	0x03C1AD50 ADRP X0, 0xFFFFFFFFFCEE5000
	0x03C1AD54 ADD X0, X0, 0x16C
	0x03C1AD58 BL 0x1C16CB8
	0x03C1AD5C MOV X1, X0
	0x03C1AD60 STR X0, [X20 + 0xC80]
	0x03C1AD64 MOV X0, X19
	0x03C1AD68 LDP X20, X19, [X31 + 0x10]
	0x03C1AD6C LDR X30, [X31], #0x20
	0x03C1AD70 BR X1
	0x03C1AD74 STR X30, [X31 - 0x20]!
	0x03C1AD78 STP X20, X19, [X31 + 0x10]
	0x03C1AD7C ADRP X20, 0x7CA000
	0x03C1AD80 LDR X1, [X20 + 0xC88]
	0x03C1AD84 MOV X19, X0
	0x03C1AD88 CBNZ X1, 0x3C1ADA0
	0x03C1AD8C ADRP X0, 0xFFFFFFFFFCEFC000
	0x03C1AD90 ADD X0, X0, 0x9C0
	0x03C1AD94 BL 0x1C16CB8
	0x03C1AD98 MOV X1, X0
	0x03C1AD9C STR X0, [X20 + 0xC88]
	0x03C1ADA0 MOV X0, X19
	0x03C1ADA4 LDP X20, X19, [X31 + 0x10]
	0x03C1ADA8 LDR X30, [X31], #0x20
	0x03C1ADAC BR X1
	0x03C1ADB0 STR X30, [X31 - 0x20]!
	0x03C1ADB4 STP X20, X19, [X31 + 0x10]
	0x03C1ADB8 ADRP X20, 0x7CA000
	0x03C1ADBC LDR X8, [X20 + 0xC88]
	0x03C1ADC0 MOV X19, X0
	0x03C1ADC4 CBNZ X8, 0x3C1ADDC
	0x03C1ADC8 ADRP X0, 0xFFFFFFFFFCEFC000
	0x03C1ADCC ADD X0, X0, 0x9C0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CB000
	006 Move W8, [X21+3024]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x4DA000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x545000
	017 Move X0, [X0+4040]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3024], W8
	021 Move X21, 0x7CB000
	022 Move X8, [X21+2880]
	023 Compare X8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, -51462144
	026 Add X0, X0, 581
	027 Call 0x1C17CB8
	028 Move X8, X0
	029 Move [X21+2880], X0
	030 Move X0, X19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {52}
	036 Move X21, 0x7CB000
	037 Move X2, [X21+2920]
	038 Compare X2, 0
	039 JumpIfNotEqual {45}
	040 Move X0, -51527680
	041 Add X0, X0, 581
	042 Call 0x1C17CB8
	043 Move X2, X0
	044 Move [X21+2920], X0
	045 Move X0, X19
	046 Move W1, W20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 CallNoReturn X2
	052 Move X20, 0x545000
	053 Move X21, 0x4DA000
	054 Move X20, [X20+4040]
	055 Move X21, [X21+2600]
	056 Move X0, X19
	057 Move X1, X31
	058 Call Object.get_name, X0
	059 Move X8, [X20]
	060 Move X1, X0
	061 Move X2, X31
	062 Move X0, X8
	063 Call String.Format, X0, X1
	064 Move X8, [X21]
	065 Move X19, X0
	066 Move W9, [X8+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X8
	070 Call 0x1C17DFC
	071 Move X0, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Call Debug.LogError, X0
	077 Return 

Method: System.Void RecalculateNormals(UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C1ADD8 STR X0, [X20 + 0xC88]
	0x03C1ADDC MOV X0, X19
	0x03C1ADE0 BLR X8
	0x03C1ADE4 LDP X20, X19, [X31 + 0x10]
	0x03C1ADE8 CMP W0, 0x0
	0x03C1ADEC CSET W0, EQ
	0x03C1ADF0 LDR X30, [X31], #0x20
	0x03C1ADF4 RET
	0x03C1ADF8 ORN W8, W31, W1, 0x0
	0x03C1ADFC AND W0, W8, 0x1
	0x03C1AE00 RET
	0x03C1AE04 STP X30, X21, [X31 - 0x20]!
	0x03C1AE08 STP X20, X19, [X31 + 0x10]
	0x03C1AE0C ADRP X20, 0x7CA000
	0x03C1AE10 ADRP X21, 0x539000
	0x03C1AE14 LDRB W8, [X20 + 0xC90]
	0x03C1AE18 LDR X21, [X21 + 0x90]
	0x03C1AE1C MOV W19, W1
	0x03C1AE20 TBNZ X8, 0x0, 0x3C1AE38
	0x03C1AE24 ADRP X0, 0x539000
	0x03C1AE28 LDR X0, [X0 + 0x90]
	0x03C1AE2C BL 0x1C16CF4
	0x03C1AE30 MOVZ W8, 0x1
	0x03C1AE34 STRB W8, [X20 + 0xC90]
	0x03C1AE38 LDR X0, [X21]
	0x03C1AE3C LDR W8, [X0 + 0xE0]
	0x03C1AE40 CBNZ W8, 0x3C1AE48
	0x03C1AE44 BL 0x1C16DFC
	0x03C1AE48 MOV W0, W19
	0x03C1AE4C MOV X1, X31
	0x03C1AE50 BL 0x3C61964
	0x03C1AE54 LDP X20, X19, [X31 + 0x10]
	0x03C1AE58 AND W0, W0, 0x1
	0x03C1AE5C LDP X30, X21, [X31], #0x20
	0x03C1AE60 RET
	0x03C1AE64 SUB X31, X31, 0x40
	0x03C1AE68 STP X30, X21, [X31 + 0x20]
	0x03C1AE6C STP X20, X19, [X31 + 0x30]
	0x03C1AE70 ADRP X21, 0x7CA000
	0x03C1AE74 LDRB W8, [X21 + 0xC91]
	0x03C1AE78 MOV W20, W1
	0x03C1AE7C MOV X19, X0
	0x03C1AE80 TBNZ X8, 0x0, 0x3C1AEC8
	0x03C1AE84 ADRP X0, 0x4D9000
	0x03C1AE88 LDR X0, [X0 + 0xA28]
	0x03C1AE8C BL 0x1C16CF4
	0x03C1AE90 ADRP X0, 0x539000
	0x03C1AE94 LDR X0, [X0 + 0x90]
	0x03C1AE98 BL 0x1C16CF4
	0x03C1AE9C ADRP X0, 0x539000
	0x03C1AEA0 LDR X0, [X0 + 0x4C0]
	0x03C1AEA4 BL 0x1C16CF4
	0x03C1AEA8 ADRP X0, 0x545000
	0x03C1AEAC LDR X0, [X0 + 0x10]
	0x03C1AEB0 BL 0x1C16CF4
	0x03C1AEB4 ADRP X0, 0x545000
	0x03C1AEB8 LDR X0, [X0 + 0x18]
	0x03C1AEBC BL 0x1C16CF4
	0x03C1AEC0 MOVZ W8, 0x1
	0x03C1AEC4 STRB W8, [X21 + 0xC91]
	0x03C1AEC8 MOV W0, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CB000
	006 Move W8, [X21+3025]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x4DA000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x545000
	017 Move X0, [X0+4048]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3025], W8
	021 Move X21, 0x7CB000
	022 Move X8, [X21+2880]
	023 Compare X8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, -51462144
	026 Add X0, X0, 581
	027 Call 0x1C17CB8
	028 Move X8, X0
	029 Move [X21+2880], X0
	030 Move X0, X19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {52}
	036 Move X21, 0x7CB000
	037 Move X2, [X21+2928]
	038 Compare X2, 0
	039 JumpIfNotEqual {45}
	040 Move X0, -51486720
	041 Add X0, X0, 221
	042 Call 0x1C17CB8
	043 Move X2, X0
	044 Move [X21+2928], X0
	045 Move X0, X19
	046 Move W1, W20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 CallNoReturn X2
	052 Move X20, 0x545000
	053 Move X21, 0x4DA000
	054 Move X20, [X20+4048]
	055 Move X21, [X21+2600]
	056 Move X0, X19
	057 Move X1, X31
	058 Call Object.get_name, X0
	059 Move X8, [X20]
	060 Move X1, X0
	061 Move X2, X31
	062 Move X0, X8
	063 Call String.Format, X0, X1
	064 Move X8, [X21]
	065 Move X19, X0
	066 Move W9, [X8+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X8
	070 Call 0x1C17DFC
	071 Move X0, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Call Debug.LogError, X0
	077 Return 

Method: System.Void RecalculateTangents(UnityEngine.Rendering.MeshUpdateFlags flags)

Disassembly:
	0x03C1AED4 TBZ X0, 0x0, 0x3C1AEE0
	0x03C1AED8 MOVZ W0, 0x1
	0x03C1AEDC B 0x3C1B014
	0x03C1AEE0 ADRP X21, 0x539000
	0x03C1AEE4 LDR X21, [X21 + 0x90]
	0x03C1AEE8 LDR X0, [X21]
	0x03C1AEEC LDR W8, [X0 + 0xE0]
	0x03C1AEF0 CBNZ W8, 0x3C1AEF8
	0x03C1AEF4 BL 0x1C16DFC
	0x03C1AEF8 MOV W0, W20
	0x03C1AEFC MOV X1, X31
	0x03C1AF00 BL 0x3C61B08
	0x03C1AF04 TBZ X0, 0x0, 0x3C1AFA4
	0x03C1AF08 LDR X0, [X21]
	0x03C1AF0C LDR W8, [X0 + 0xE0]
	0x03C1AF10 CBNZ W8, 0x3C1AF18
	0x03C1AF14 BL 0x1C16DFC
	0x03C1AF18 MOV W0, W20
	0x03C1AF1C MOV W1, W31
	0x03C1AF20 MOV X2, X31
	0x03C1AF24 BL 0x3C61468
	0x03C1AF28 MOV X1, X31
	0x03C1AF2C BL 0x3C61BC0
	0x03C1AF30 TBZ X0, 0x0, 0x3C1AFA4
	0x03C1AF34 ADRP X8, 0x539000
	0x03C1AF38 LDR X8, [X8 + 0x4C0]
	0x03C1AF3C MOVN X9, 0x0
	0x03C1AF40 ADD X0, X31, 0x8
	0x03C1AF44 MOV X1, X31
	0x03C1AF48 LDR X8, [X8]
	0x03C1AF4C STR W20, [X31 + 0x18]
	0x03C1AF50 STP X8, X9, [X31 + 0x8]
	0x03C1AF54 BL 0x33B162C
	0x03C1AF58 ADRP X8, 0x545000
	0x03C1AF5C LDR X8, [X8 + 0x18]
	0x03C1AF60 MOV X1, X0
	0x03C1AF64 MOV X2, X31
	0x03C1AF68 LDR X8, [X8]
	0x03C1AF6C MOV X0, X8
	0x03C1AF70 BL 0x321EFD0
	0x03C1AF74 ADRP X8, 0x4D9000
	0x03C1AF78 LDR X8, [X8 + 0xA28]
	0x03C1AF7C MOV X20, X0
	0x03C1AF80 LDR X8, [X8]
	0x03C1AF84 LDR W9, [X8 + 0xE0]
	0x03C1AF88 CBNZ W9, 0x3C1AF94
	0x03C1AF8C MOV X0, X8
	0x03C1AF90 BL 0x1C16DFC
	0x03C1AF94 MOV X0, X20
	0x03C1AF98 MOV X1, X19
	0x03C1AF9C BL 0x3C06B0C
	0x03C1AFA0 B 0x3C1AED8
	0x03C1AFA4 ADRP X8, 0x539000
	0x03C1AFA8 LDR X8, [X8 + 0x4C0]
	0x03C1AFAC MOVN X9, 0x0
	0x03C1AFB0 ADD X0, X31, 0x8
	0x03C1AFB4 MOV X1, X31
	0x03C1AFB8 LDR X8, [X8]
	0x03C1AFBC STR W20, [X31 + 0x18]
	0x03C1AFC0 STP X8, X9, [X31 + 0x8]
	0x03C1AFC4 BL 0x33B162C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CB000
	006 Move W8, [X21+3026]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x4DA000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x545000
	017 Move X0, [X0+4056]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3026], W8
	021 Move X21, 0x7CB000
	022 Move X8, [X21+2880]
	023 Compare X8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, -51462144
	026 Add X0, X0, 581
	027 Call 0x1C17CB8
	028 Move X8, X0
	029 Move [X21+2880], X0
	030 Move X0, X19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {52}
	036 Move X21, 0x7CB000
	037 Move X2, [X21+2936]
	038 Compare X2, 0
	039 JumpIfNotEqual {45}
	040 Move X0, -51437568
	041 Add X0, X0, 459
	042 Call 0x1C17CB8
	043 Move X2, X0
	044 Move [X21+2936], X0
	045 Move X0, X19
	046 Move W1, W20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 CallNoReturn X2
	052 Move X20, 0x545000
	053 Move X21, 0x4DA000
	054 Move X20, [X20+4056]
	055 Move X21, [X21+2600]
	056 Move X0, X19
	057 Move X1, X31
	058 Call Object.get_name, X0
	059 Move X8, [X20]
	060 Move X1, X0
	061 Move X2, X31
	062 Move X0, X8
	063 Call String.Format, X0, X1
	064 Move X8, [X21]
	065 Move X19, X0
	066 Move W9, [X8+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X8
	070 Call 0x1C17DFC
	071 Move X0, X19
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Call Debug.LogError, X0
	077 Return 

Method: System.Void MarkDynamic()

Disassembly:
	0x03C1AFC8 ADRP X8, 0x545000
	0x03C1AFCC LDR X8, [X8 + 0x10]
	0x03C1AFD0 MOV X1, X0
	0x03C1AFD4 MOV X2, X31
	0x03C1AFD8 LDR X8, [X8]
	0x03C1AFDC MOV X0, X8
	0x03C1AFE0 BL 0x321EFD0
	0x03C1AFE4 ADRP X8, 0x4D9000
	0x03C1AFE8 LDR X8, [X8 + 0xA28]
	0x03C1AFEC MOV X20, X0
	0x03C1AFF0 LDR X8, [X8]
	0x03C1AFF4 LDR W9, [X8 + 0xE0]
	0x03C1AFF8 CBNZ W9, 0x3C1B004
	0x03C1AFFC MOV X0, X8
	0x03C1B000 BL 0x1C16DFC
	0x03C1B004 MOV X0, X20
	0x03C1B008 MOV X1, X19
	0x03C1B00C BL 0x3C065A4
	0x03C1B010 MOV W0, W31
	0x03C1B014 LDP X20, X19, [X31 + 0x30]
	0x03C1B018 LDP X30, X21, [X31 + 0x20]
	0x03C1B01C ADD X31, X31, 0x40
	0x03C1B020 RET
	0x03C1B024 SUB X31, X31, 0x60
	0x03C1B028 STR X30, [X31 + 0x30]
	0x03C1B02C STP X22, X21, [X31 + 0x40]
	0x03C1B030 STP X20, X19, [X31 + 0x50]
	0x03C1B034 ADRP X22, 0x7C9000
	0x03C1B038 LDRB W8, [X22 + 0xC92]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CB000
	005 Move X8, [X20+2880]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51462144
	010 Add X0, X0, 581
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+2880], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {34}
	020 Move X20, 0x7CA000
	021 Move X1, [X20+2944]
	022 Compare X1, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -51437568
	025 Add X0, X0, 3635
	026 Call 0x1C17CB8
	027 Move X1, X0
	028 Move [X20+2944], X0
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 CallNoReturn X1
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 

Method: System.Void UploadMeshData(System.Boolean markNoLongerReadable)

Disassembly:
	0x03C1B03C MOV W20, W2
	0x03C1B040 MOV W21, W1
	0x03C1B044 MOV X19, X0
	0x03C1B048 TBNZ X8, 0x0, 0x3C1B090
	0x03C1B04C ADRP X0, 0x4D8000
	0x03C1B050 LDR X0, [X0 + 0xA28]
	0x03C1B054 BL 0x1C16CF4
	0x03C1B058 ADRP X0, 0x544000
	0x03C1B05C LDR X0, [X0 + 0x20]
	0x03C1B060 BL 0x1C16CF4
	0x03C1B064 ADRP X0, 0x538000
	0x03C1B068 LDR X0, [X0 + 0x4B8]
	0x03C1B06C BL 0x1C16CF4
	0x03C1B070 ADRP X0, 0x544000
	0x03C1B074 LDR X0, [X0 + 0x28]
	0x03C1B078 BL 0x1C16CF4
	0x03C1B07C ADRP X0, 0x544000
	0x03C1B080 LDR X0, [X0 + 0x30]
	0x03C1B084 BL 0x1C16CF4
	0x03C1B088 MOVZ W8, 0x1
	0x03C1B08C STRB W8, [X22 + 0xC92]
	0x03C1B090 CMP W20, 0x4
	0x03C1B094 B.EQ 0x3C1B114
	0x03C1B098 AND W8, W21, 0xFFFFFFFE
	0x03C1B09C CMP W8, 0x8E
	0x03C1B0A0 B.NE 0x3C1B114
	0x03C1B0A4 ADRP X8, 0x538000
	0x03C1B0A8 LDR X8, [X8 + 0x4B8]
	0x03C1B0AC MOVN X9, 0x0
	0x03C1B0B0 ADD X0, X31, 0x18
	0x03C1B0B4 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move X8, [X21+2880]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51466240
	012 Add X0, X0, 581
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X21+2880], X0
	016 Move X0, X20
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {38}
	022 Move X21, 0x7CA000
	023 Move X2, [X21+2952]
	024 Compare X2, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -51339264
	027 Add X0, X0, 2991
	028 Call 0x1C17CB8
	029 Move X2, X0
	030 Move [X21+2952], X0
	031 And W1, W19, 1
	032 Move X0, X20
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 CallNoReturn X2
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return 

Method: System.Void Optimize()

Disassembly:
	0x03C1B0B8 LDR X8, [X8]
	0x03C1B0BC STR W21, [X31 + 0x28]
	0x03C1B0C0 STP X8, X9, [X31 + 0x18]
	0x03C1B0C4 BL 0x33B162C
	0x03C1B0C8 ADRP X8, 0x544000
	0x03C1B0CC LDR X8, [X8 + 0x28]
	0x03C1B0D0 MOV X1, X0
	0x03C1B0D4 MOV X2, X31
	0x03C1B0D8 LDR X8, [X8]
	0x03C1B0DC MOV X0, X8
	0x03C1B0E0 BL 0x321EFD0
	0x03C1B0E4 ADRP X8, 0x4D8000
	0x03C1B0E8 LDR X8, [X8 + 0xA28]
	0x03C1B0EC MOV X20, X0
	0x03C1B0F0 LDR X8, [X8]
	0x03C1B0F4 LDR W9, [X8 + 0xE0]
	0x03C1B0F8 CBNZ W9, 0x3C1B104
	0x03C1B0FC MOV X0, X8
	0x03C1B100 BL 0x1C16DFC
	0x03C1B104 MOV X0, X20
	0x03C1B108 MOV X1, X19
	0x03C1B10C BL 0x3C06B0C
	0x03C1B110 B 0x3C1B1C4
	0x03C1B114 MOV W0, W21
	0x03C1B118 MOV W1, W20
	0x03C1B11C MOV X2, X31
	0x03C1B120 BL 0x3C3C4BC
	0x03C1B124 TBZ X0, 0x0, 0x3C1B130
	0x03C1B128 MOVZ W0, 0x1
	0x03C1B12C B 0x3C1B1C8
	0x03C1B130 ADRP X8, 0x538000
	0x03C1B134 LDR X8, [X8 + 0x4B8]
	0x03C1B138 MOVN X22, 0x0
	0x03C1B13C ADD X0, X31, 0x18
	0x03C1B140 MOV X1, X31
	0x03C1B144 LDR X8, [X8]
	0x03C1B148 STR W21, [X31 + 0x28]
	0x03C1B14C STP X8, X22, [X31 + 0x18]
	0x03C1B150 BL 0x33B162C
	0x03C1B154 ADRP X8, 0x544000
	0x03C1B158 LDR X8, [X8 + 0x20]
	0x03C1B15C MOV X21, X0
	0x03C1B160 ADD X0, X31, 0x0
	0x03C1B164 MOV X1, X31
	0x03C1B168 LDR X8, [X8]
	0x03C1B16C STR W20, [X31 + 0x10]
	0x03C1B170 STP X8, X22, [X31]
	0x03C1B174 BL 0x33B162C
	0x03C1B178 ADRP X8, 0x544000
	0x03C1B17C LDR X8, [X8 + 0x30]
	0x03C1B180 MOV X2, X0
	0x03C1B184 MOV X1, X21
	0x03C1B188 MOV X3, X31
	0x03C1B18C LDR X8, [X8]
	0x03C1B190 MOV X0, X8
	0x03C1B194 BL 0x3227BD4
	0x03C1B198 ADRP X8, 0x4D8000
	0x03C1B19C LDR X8, [X8 + 0xA28]
	0x03C1B1A0 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CA000
	006 Move W8, [X20+3027]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x4D9000
	013 Move X0, [X0+2600]
	014 Call 0x1C17CF4
	015 Move X0, 0x544000
	016 Move X0, [X0+4064]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3027], W8
	020 Move X20, 0x7CA000
	021 Move X8, [X20+2880]
	022 Compare X8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -51466240
	025 Add X0, X0, 581
	026 Call 0x1C17CB8
	027 Move X8, X0
	028 Move [X20+2880], X0
	029 Move X0, X19
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {50}
	035 Move X20, 0x7CA000
	036 Move X1, [X20+2976]
	037 Compare X1, 0
	038 JumpIfNotEqual {44}
	039 Move X0, -51458048
	040 Add X0, X0, 327
	041 Call 0x1C17CB8
	042 Move X1, X0
	043 Move [X20+2976], X0
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 CallNoReturn X1
	050 Move X20, 0x544000
	051 Move X21, 0x4D9000
	052 Move X20, [X20+4064]
	053 Move X21, [X21+2600]
	054 Move X0, X19
	055 Move X1, X31
	056 Call Object.get_name, X0
	057 Move X8, [X20]
	058 Move X1, X0
	059 Move X2, X31
	060 Move X0, X8
	061 Call String.Format, X0, X1
	062 Move X8, [X21]
	063 Move X19, X0
	064 Move W9, [X8+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {69}
	067 Move X0, X8
	068 Call 0x1C17DFC
	069 Move X0, X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Call Debug.LogError, X0
	075 Return 

Method: UnityEngine.MeshTopology GetTopology(System.Int32 submesh)

Disassembly:
	0x03C1B1A4 LDR X8, [X8]
	0x03C1B1A8 LDR W9, [X8 + 0xE0]
	0x03C1B1AC CBNZ W9, 0x3C1B1B8
	0x03C1B1B0 MOV X0, X8
	0x03C1B1B4 BL 0x1C16DFC
	0x03C1B1B8 MOV X0, X20
	0x03C1B1BC MOV X1, X19
	0x03C1B1C0 BL 0x3C065A4
	0x03C1B1C4 MOV W0, W31
	0x03C1B1C8 LDP X20, X19, [X31 + 0x50]
	0x03C1B1CC LDP X22, X21, [X31 + 0x40]
	0x03C1B1D0 LDR X30, [X31 + 0x30]
	0x03C1B1D4 ADD X31, X31, 0x60
	0x03C1B1D8 RET
	0x03C1B1DC STP X30, X21, [X31 - 0x20]!
	0x03C1B1E0 STP X20, X19, [X31 + 0x10]
	0x03C1B1E4 ADRP X20, 0x7C9000
	0x03C1B1E8 LDRB W8, [X20 + 0xC93]
	0x03C1B1EC MOV X19, X1
	0x03C1B1F0 TBNZ X8, 0x0, 0x3C1B214
	0x03C1B1F4 ADRP X0, 0x501000
	0x03C1B1F8 LDR X0, [X0 + 0x1D0]
	0x03C1B1FC BL 0x1C16CF4
	0x03C1B200 ADRP X0, 0x544000
	0x03C1B204 LDR X0, [X0 + 0x38]
	0x03C1B208 BL 0x1C16CF4
	0x03C1B20C MOVZ W8, 0x1
	0x03C1B210 STRB W8, [X20 + 0xC93]
	0x03C1B214 CBZ X19, 0x3C1B278
	0x03C1B218 ADRP X20, 0x544000
	0x03C1B21C ADRP X21, 0x501000
	0x03C1B220 LDR X20, [X20 + 0x38]
	0x03C1B224 LDR X21, [X21 + 0x1D0]
	0x03C1B228 MOV X0, X19
	0x03C1B22C MOV X1, X31
	0x03C1B230 BL 0x3C389D4
	0x03C1B234 LDR X8, [X20]
	0x03C1B238 MOV X1, X0
	0x03C1B23C MOV X2, X31
	0x03C1B240 MOV X0, X8
	0x03C1B244 BL 0x321EFD0
	0x03C1B248 LDR X8, [X21]
	0x03C1B24C MOV X19, X0
	0x03C1B250 MOV X0, X8
	0x03C1B254 BL 0x1C16F10
	0x03C1B258 MOV X1, X19
	0x03C1B25C MOV X2, X31
	0x03C1B260 MOV X20, X0
	0x03C1B264 BL 0x3C363D0
	0x03C1B268 MOV X0, X20
	0x03C1B26C LDP X20, X19, [X31 + 0x10]
	0x03C1B270 LDP X30, X21, [X31], #0x20
	0x03C1B274 RET
	0x03C1B278 BL 0x1C16F20
	0x03C1B27C STP X30, X21, [X31 - 0x20]!
	0x03C1B280 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move W8, [X21+3028]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x4D9000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x544000
	017 Move X0, [X0+4072]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3028], W8
	021 Move TEMP, X20
	022 And TEMP, TEMP, -2147483648
	023 Compare TEMP, -2147483648
	024 JumpIfEqual {53}
	025 Move X21, 0x7CA000
	026 Move X8, [X21+2896]
	027 Compare X8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, -51441664
	030 Add X0, X0, 373
	031 Call 0x1C17CB8
	032 Move X8, X0
	033 Move [X21+2896], X0
	034 Move X0, X19
	035 NotImplemented "Instruction BLR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X21, 0x7CA000
	038 Move X2, [X21+2960]
	039 Compare X2, 0
	040 JumpIfNotEqual {46}
	041 Move X0, -51515392
	042 Add X0, X0, 194
	043 Call 0x1C17CB8
	044 Move X2, X0
	045 Move [X21+2960], X0
	046 Move X0, X19
	047 Move W1, W20
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 CallNoReturn X2
	053 Move X8, 0x4D9000
	054 Move X8, [X8+2600]
	055 Move X20, 0x544000
	056 Move X0, [X8]
	057 Move W8, [X0+224]
	058 Move X20, [X20+4072]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, [X20]
	063 Move X1, X19
	064 Call Debug.LogError, X0, X1
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move W0, W31
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Return X0

Method: System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices)

Disassembly:
	0x03C1B284 ADRP X20, 0x7C9000
	0x03C1B288 ADRP X21, 0x501000
	0x03C1B28C ADRP X19, 0x544000
	0x03C1B290 LDRB W8, [X20 + 0xC94]
	0x03C1B294 LDR X21, [X21 + 0x1D0]
	0x03C1B298 LDR X19, [X19 + 0x40]
	0x03C1B29C TBNZ X8, 0x0, 0x3C1B2C0
	0x03C1B2A0 ADRP X0, 0x501000
	0x03C1B2A4 LDR X0, [X0 + 0x1D0]
	0x03C1B2A8 BL 0x1C16CF4
	0x03C1B2AC ADRP X0, 0x544000
	0x03C1B2B0 LDR X0, [X0 + 0x40]
	0x03C1B2B4 BL 0x1C16CF4
	0x03C1B2B8 MOVZ W8, 0x1
	0x03C1B2BC STRB W8, [X20 + 0xC94]
	0x03C1B2C0 LDR X0, [X21]
	0x03C1B2C4 BL 0x1C16F10
	0x03C1B2C8 LDR X1, [X19]
	0x03C1B2CC MOV X2, X31
	0x03C1B2D0 MOV X19, X0
	0x03C1B2D4 BL 0x3C363D0
	0x03C1B2D8 MOV X0, X19
	0x03C1B2DC LDP X20, X19, [X31 + 0x10]
	0x03C1B2E0 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7CA000
	008 Move X5, [X23+2968]
	009 Move W20, W3
	010 Move W21, W2
	011 Move X19, X1
	012 Move X22, X0
	013 Compare X5, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51441664
	016 Add X0, X0, 540
	017 Call 0x1C17CB8
	018 Move X5, X0
	019 Move [X23+2968], X0
	020 And W2, W21, 1
	021 And W3, W20, 1
	022 Move X0, X22
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move W4, W31
	029 Move X30, [X31+48]
	030 Move X23, [X31+56]
	031 CallNoReturn X5

Method: System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes)

Disassembly:
	0x03C1B2E4 RET
	0x03C1B2E8 STR X30, [X31 - 0x20]!
	0x03C1B2EC STP X20, X19, [X31 + 0x10]
	0x03C1B2F0 ADRP X19, 0x7C9000
	0x03C1B2F4 ADRP X20, 0x544000
	0x03C1B2F8 LDRB W8, [X19 + 0xC95]
	0x03C1B2FC LDR X20, [X20 + 0x48]
	0x03C1B300 TBNZ X8, 0x0, 0x3C1B318
	0x03C1B304 ADRP X0, 0x544000
	0x03C1B308 LDR X0, [X0 + 0x48]
	0x03C1B30C BL 0x1C16CF4
	0x03C1B310 MOVZ W8, 0x1
	0x03C1B314 STRB W8, [X19 + 0xC95]
	0x03C1B318 LDR X8, [X20]
	0x03C1B31C LDP X20, X19, [X31 + 0x10]
	0x03C1B320 MOVN W9, 0x0
	0x03C1B324 LDR X8, [X8 + 0xB8]
	0x03C1B328 STR W9, [X8]
	0x03C1B32C LDR X30, [X31], #0x20
	0x03C1B330 RET
	0x03C1B334 STR X30, [X31 - 0x20]!
	0x03C1B338 STP X20, X19, [X31 + 0x10]
	0x03C1B33C ADRP X20, 0x7C9000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CA000
	007 Move X5, [X22+2968]
	008 Move W21, W2
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X5, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51441664
	014 Add X0, X0, 540
	015 Call 0x1C17CB8
	016 Move X5, X0
	017 Move [X22+2968], X0
	018 And W2, W21, 1
	019 Move X0, X20
	020 Move X1, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move W3, 1
	026 Move W4, W31
	027 Move X30, [X31+48]
	028 CallNoReturn X5

Method: System.Void GetSubMesh_Injected(System.Int32 index, out UnityEngine.Rendering.SubMeshDescriptor ret)

Disassembly:
	0x03C18714 STP X24, X23, [X31 + 0x10]
	0x03C18718 STP X22, X21, [X31 + 0x20]
	0x03C1871C STP X20, X19, [X31 + 0x30]
	0x03C18720 ADRP X24, 0x7CC000
	0x03C18724 ADRP X25, 0x546000
	0x03C18728 LDRB W8, [X24 + 0xBBB]
	0x03C1872C LDR X25, [X25 + 0xF20]
	0x03C18730 MOV W19, W4
	0x03C18734 MOV W20, W3
	0x03C18738 MOV W21, W2
	0x03C1873C MOV X22, X1
	0x03C18740 MOV X23, X0
	0x03C18744 TBNZ X8, 0x0, 0x3C1875C
	0x03C18748 ADRP X0, 0x546000
	0x03C1874C LDR X0, [X0 + 0xF20]
	0x03C18750 BL 0x1C16CF4
	0x03C18754 MOVZ W8, 0x1
	0x03C18758 STRB W8, [X24 + 0xBBB]
	0x03C1875C LDR X6, [X25]
	0x03C18760 MOV X0, X23
	0x03C18764 MOV X2, X22

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7CD000
	007 Move X3, [X22+3032]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51474432
	014 Add X0, X0, 3774
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3032], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void get_bounds_Injected(out UnityEngine.Bounds ret)

Disassembly:
	0x03C187D0 BL 0x222CCF4
	0x03C187D4 MOV W3, W0
	0x03C187D8 MOV X0, X20
	0x03C187DC MOV X1, X19
	0x03C187E0 LDP X20, X19, [X31 + 0x20]
	0x03C187E4 LDP X22, X21, [X31 + 0x10]
	0x03C187E8 MOV W2, W31
	0x03C187EC MOV W4, W31
	0x03C187F0 LDR X30, [X31], #0x30
	0x03C187F4 B 0x3C18800
	0x03C187F8 MOV W4, W31
	0x03C187FC B 0x3C18800
	0x03C18800 STP X30, X25, [X31 - 0x40]!
	0x03C18804 STP X24, X23, [X31 + 0x10]
	0x03C18808 STP X22, X21, [X31 + 0x20]
	0x03C1880C STP X20, X19, [X31 + 0x30]
	0x03C18810 ADRP X24, 0x7CC000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+3040]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51494912
	012 Add X0, X0, 507
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3040], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_bounds_Injected(ref UnityEngine.Bounds value)

Disassembly:
	0x03C18858 MOV W3, W21
	0x03C1885C MOV W4, W20
	0x03C18860 MOV W5, W19
	0x03C18864 LDP X20, X19, [X31 + 0x30]
	0x03C18868 LDP X22, X21, [X31 + 0x20]
	0x03C1886C LDP X24, X23, [X31 + 0x10]
	0x03C18870 MOVZ W1, 0x3
	0x03C18874 LDP X30, X25, [X31], #0x40
	0x03C18878 B 0x221A4C4
	0x03C1887C STR X30, [X31 - 0x30]!
	0x03C18880 STP X22, X21, [X31 + 0x10]
	0x03C18884 STP X20, X19, [X31 + 0x20]
	0x03C18888 ADRP X21, 0x7CC000
	0x03C1888C ADRP X22, 0x546000
	0x03C18890 LDRB W8, [X21 + 0xBBE]
	0x03C18894 LDR X22, [X22 + 0xF38]
	0x03C18898 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CD000
	006 Move X2, [X21+3048]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51474432
	012 Add X0, X0, 3867
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3048], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

