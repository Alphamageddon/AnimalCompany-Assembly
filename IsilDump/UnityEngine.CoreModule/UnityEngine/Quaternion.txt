Type: UnityEngine.Quaternion

Method: UnityEngine.Quaternion FromToRotation(UnityEngine.Vector3 fromDirection, UnityEngine.Vector3 toDirection)

Disassembly:
	0x03C2B1AC LDR X0, [X8]
	0x03C2B1B0 BL 0x1C16D6C
	0x03C2B1B4 MOV X22, X0
	0x03C2B1B8 MOV X0, X19
	0x03C2B1BC MOV X1, X21
	0x03C2B1C0 MOV X2, X20
	0x03C2B1C4 MOV X3, X31
	0x03C2B1C8 BL 0x338FFB4
	0x03C2B1CC CBZ X22, 0x3C2B2EC
	0x03C2B1D0 MOV X23, X0
	0x03C2B1D4 CBZ X0, 0x3C2B1EC
	0x03C2B1D8 LDR X8, [X22]
	0x03C2B1DC MOV X0, X23
	0x03C2B1E0 LDR X1, [X8 + 0x40]
	0x03C2B1E4 BL 0x1C16E00
	0x03C2B1E8 CBZ X0, 0x3C2B2E0
	0x03C2B1EC LDR W8, [X22 + 0x18]
	0x03C2B1F0 CBZ W8, 0x3C2B2DC
	0x03C2B1F4 ADD X0, X19, 0x4
	0x03C2B1F8 MOV X1, X21
	0x03C2B1FC MOV X2, X20
	0x03C2B200 MOV X3, X31
	0x03C2B204 STR X23, [X22 + 0x20]
	0x03C2B208 BL 0x338FFB4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 Move X19, 0x7BB000
	005 Move X8, [X19+104]
	006 Move [X31+32], S0
	007 Move [X31+40], S1
	008 Move [X31+40], S2
	009 Move [X31+16], S3
	010 Move [X31+24], S4
	011 Move [X31+24], S5
	012 Move [X31], X31
	013 Move [X31+8], X31
	014 Compare X8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, -51564544
	017 Add X0, X0, 1275
	018 Call 0x1C17CB8
	019 Move X8, X0
	020 Move [X19+104], X0
	021 Add X0, X31, 32
	022 Add X1, X31, 16
	023 Add X2, X31, 0
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move S0, [X31]
	026 Move S1, [X31+4]
	027 Move S2, [X31+8]
	028 Move S3, [X31+12]
	029 Move X30, [X31+48]
	030 Move X19, [X31+56]
	031 Add X31, X31, 64
	032 Return X0

Method: UnityEngine.Quaternion Inverse(UnityEngine.Quaternion rotation)

Disassembly:
	0x03C2B260 BL 0x1C16E00
	0x03C2B264 CBZ X0, 0x3C2B2E0
	0x03C2B268 LDR W8, [X22 + 0x18]
	0x03C2B26C CMP W8, 0x2
	0x03C2B270 B.LS 0x3C2B2DC
	0x03C2B274 ADD X0, X19, 0xC
	0x03C2B278 MOV X1, X21
	0x03C2B27C MOV X2, X20
	0x03C2B280 MOV X3, X31
	0x03C2B284 STR X23, [X22 + 0x30]
	0x03C2B288 BL 0x338FFB4
	0x03C2B28C MOV X19, X0
	0x03C2B290 CBZ X0, 0x3C2B2A8
	0x03C2B294 LDR X8, [X22]
	0x03C2B298 MOV X0, X19
	0x03C2B29C LDR X1, [X8 + 0x40]
	0x03C2B2A0 BL 0x1C16E00
	0x03C2B2A4 CBZ X0, 0x3C2B2E0
	0x03C2B2A8 LDR W8, [X22 + 0x18]
	0x03C2B2AC CMP W8, 0x3
	0x03C2B2B0 B.LS 0x3C2B2DC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X19, 0x7BB000
	005 Move X8, [X19+112]
	006 Move [X31+16], S0
	007 Move [X31+24], S1
	008 Move [X31+24], S2
	009 Move [X31+32], S3
	010 Move [X31], X31
	011 Move [X31+8], X31
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51421184
	015 Add X0, X0, 2618
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X19+112], X0
	019 Add X0, X31, 16
	020 Add X1, X31, 0
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move S0, [X31]
	023 Move S1, [X31+4]
	024 Move S2, [X31+8]
	025 Move S3, [X31+12]
	026 Move X30, [X31+32]
	027 Move X19, [X31+40]
	028 Add X31, X31, 48
	029 Return X0

Method: UnityEngine.Quaternion Slerp(UnityEngine.Quaternion a, UnityEngine.Quaternion b, System.Single t)

Disassembly:
	0x03C2B2F8 ADRP X19, 0x7BA000
	0x03C2B2FC ADRP X20, 0x4C9000
	0x03C2B300 LDRB W8, [X19 + 0x64]
	0x03C2B304 LDR X20, [X20 + 0x5A8]
	0x03C2B308 TBNZ X8, 0x0, 0x3C2B320
	0x03C2B30C ADRP X0, 0x4C9000
	0x03C2B310 LDR X0, [X0 + 0x5A8]
	0x03C2B314 BL 0x1C16CF4
	0x03C2B318 MOVZ W8, 0x1
	0x03C2B31C STRB W8, [X19 + 0x64]
	0x03C2B320 LDR X8, [X20]
	0x03C2B324 ADRP X9, 0xFFFFFFFFFCEC1000
	0x03C2B328 LDR V0, [X9 + 0xBB]
	0x03C2B32C LDP X20, X19, [X31 + 0x10]
	0x03C2B330 LDR X8, [X8 + 0xB8]
	0x03C2B334 STR V0, [X8]
	0x03C2B338 LDR X30, [X31], #0x20
	0x03C2B33C RET
	0x03C2B340 STR X30, [X31 - 0x20]!
	0x03C2B344 STP X20, X19, [X31 + 0x10]
	0x03C2B348 ADRP X20, 0x7BA000
	0x03C2B34C LDR X1, [X20 + 0xC0]
	0x03C2B350 MOV W19, W0
	0x03C2B354 CBNZ X1, 0x3C2B36C
	0x03C2B358 ADRP X0, 0xFFFFFFFFFCEC6000
	0x03C2B35C ADD X0, X0, 0xA0
	0x03C2B360 BL 0x1C16CB8
	0x03C2B364 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], D8
	003 Move [X31+64], X30
	004 Move [X31+72], X19
	005 Move X19, 0x7BB000
	006 Move V8, [X31+80]
	007 Move X8, [X19+120]
	008 Move [X31+32], S0
	009 Move [X31+40], S1
	010 Move [X31+40], S2
	011 Move [X31+48], S3
	012 Move [X31+16], S4
	013 Move [X31+24], S5
	014 Move [X31+24], S6
	015 Move [X31+32], S7
	016 Move [X31], X31
	017 Move [X31+8], X31
	018 Compare X8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, -51478528
	021 Add X0, X0, 3140
	022 Call 0x1C17CB8
	023 Move X8, X0
	024 Move [X19+120], X0
	025 Add X0, X31, 32
	026 Add X1, X31, 16
	027 Add X2, X31, 0
	028 Move V0, V8
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move S0, [X31]
	031 Move S1, [X31+4]
	032 Move S2, [X31+8]
	033 Move S3, [X31+12]
	034 Move X30, [X31+64]
	035 Move X19, [X31+72]
	036 Move V8, [X31+48]
	037 Add X31, X31, 80
	038 Return X0

Method: UnityEngine.Quaternion SlerpUnclamped(UnityEngine.Quaternion a, UnityEngine.Quaternion b, System.Single t)

Disassembly:
	0x03C2B3CC ADD X31, X31, 0x30
	0x03C2B3D0 RET
	0x03C2B3D4 STR D8, [X31 - 0x20]!
	0x03C2B3D8 STR X30, [X31 + 0x8]
	0x03C2B3DC STP X20, X19, [X31 + 0x10]
	0x03C2B3E0 ADRP X20, 0x7BA000
	0x03C2B3E4 LDR X1, [X20 + 0x108]
	0x03C2B3E8 MOV X19, X0
	0x03C2B3EC MOV V8.16B, V0.16B
	0x03C2B3F0 CBNZ X1, 0x3C2B408
	0x03C2B3F4 ADRP X0, 0xFFFFFFFFFCEC8000
	0x03C2B3F8 ADD X0, X0, 0x186
	0x03C2B3FC BL 0x1C16CB8
	0x03C2B400 MOV X1, X0
	0x03C2B404 STR X0, [X20 + 0x108]
	0x03C2B408 MOV X0, X19
	0x03C2B40C LDP X20, X19, [X31 + 0x10]
	0x03C2B410 LDR X30, [X31 + 0x8]
	0x03C2B414 MOV V0.16B, V8.16B
	0x03C2B418 LDR V8, [X31], #0x20
	0x03C2B41C BR X1
	0x03C2B420 STR D8, [X31 - 0x20]!
	0x03C2B424 STP X30, X19, [X31 + 0x10]
	0x03C2B428 ADRP X19, 0x7BA000
	0x03C2B42C LDR X0, [X19 + 0xD8]
	0x03C2B430 MOV V8.16B, V0.16B
	0x03C2B434 CBNZ X0, 0x3C2B448
	0x03C2B438 ADRP X0, 0xFFFFFFFFFCEE0000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], D8
	003 Move [X31+64], X30
	004 Move [X31+72], X19
	005 Move X19, 0x7BB000
	006 Move V8, [X31+80]
	007 Move X8, [X19+128]
	008 Move [X31+32], S0
	009 Move [X31+40], S1
	010 Move [X31+40], S2
	011 Move [X31+48], S3
	012 Move [X31+16], S4
	013 Move [X31+24], S5
	014 Move [X31+24], S6
	015 Move [X31+32], S7
	016 Move [X31], X31
	017 Move [X31+8], X31
	018 Compare X8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, -51613696
	021 Add X0, X0, 25
	022 Call 0x1C17CB8
	023 Move X8, X0
	024 Move [X19+128], X0
	025 Add X0, X31, 32
	026 Add X1, X31, 16
	027 Add X2, X31, 0
	028 Move V0, V8
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move S0, [X31]
	031 Move S1, [X31+4]
	032 Move S2, [X31+8]
	033 Move S3, [X31+12]
	034 Move X30, [X31+64]
	035 Move X19, [X31+72]
	036 Move V8, [X31+48]
	037 Add X31, X31, 80
	038 Return X0

Method: UnityEngine.Quaternion Lerp(UnityEngine.Quaternion a, UnityEngine.Quaternion b, System.Single t)

Disassembly:
	0x03C2B4A0 STP X20, X19, [X31 + 0x10]
	0x03C2B4A4 ADRP X19, 0x7BA000
	0x03C2B4A8 ADRP X20, 0x4C8000
	0x03C2B4AC LDRB W8, [X19 + 0xE8]
	0x03C2B4B0 LDR X20, [X20 + 0x5A8]
	0x03C2B4B4 MOV V8.16B, V0.16B
	0x03C2B4B8 TBNZ X8, 0x0, 0x3C2B4D0
	0x03C2B4BC ADRP X0, 0x4C8000
	0x03C2B4C0 LDR X0, [X0 + 0x5A8]
	0x03C2B4C4 BL 0x1C16CF4
	0x03C2B4C8 MOVZ W8, 0x1
	0x03C2B4CC STRB W8, [X19 + 0xE8]
	0x03C2B4D0 LDR X0, [X20]
	0x03C2B4D4 LDR W8, [X0 + 0xE0]
	0x03C2B4D8 CBNZ W8, 0x3C2B4E0
	0x03C2B4DC BL 0x1C16DFC
	0x03C2B4E0 FCVT S0, S8
	0x03C2B4E4 BL 0x3EB1C30
	0x03C2B4E8 LDP X20, X19, [X31 + 0x10]
	0x03C2B4EC LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2B4F4 LDR V8, [X31], #0x20
	0x03C2B4F8 RET
	0x03C2B4FC STR D8, [X31 - 0x20]!
	0x03C2B500 STR X30, [X31 + 0x8]
	0x03C2B504 STP X20, X19, [X31 + 0x10]
	0x03C2B508 ADRP X19, 0x7BA000
	0x03C2B50C ADRP X20, 0x4C8000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], D8
	003 Move [X31+64], X30
	004 Move [X31+72], X19
	005 Move X19, 0x7BB000
	006 Move V8, [X31+80]
	007 Move X8, [X19+136]
	008 Move [X31+32], S0
	009 Move [X31+40], S1
	010 Move [X31+40], S2
	011 Move [X31+48], S3
	012 Move [X31+16], S4
	013 Move [X31+24], S5
	014 Move [X31+24], S6
	015 Move [X31+32], S7
	016 Move [X31], X31
	017 Move [X31+8], X31
	018 Compare X8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, -51404800
	021 Add X0, X0, 3315
	022 Call 0x1C17CB8
	023 Move X8, X0
	024 Move [X19+136], X0
	025 Add X0, X31, 32
	026 Add X1, X31, 16
	027 Add X2, X31, 0
	028 Move V0, V8
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move S0, [X31]
	031 Move S1, [X31+4]
	032 Move S2, [X31+8]
	033 Move S3, [X31+12]
	034 Move X30, [X31+64]
	035 Move X19, [X31+72]
	036 Move V8, [X31+48]
	037 Add X31, X31, 80
	038 Return X0

Method: UnityEngine.Quaternion Internal_FromEulerRad(UnityEngine.Vector3 euler)

Disassembly:
	0x03C2B574 LDRB W8, [X19 + 0xEA]
	0x03C2B578 LDR X20, [X20 + 0x5A8]
	0x03C2B57C MOV V8.16B, V0.16B
	0x03C2B580 TBNZ X8, 0x0, 0x3C2B598
	0x03C2B584 ADRP X0, 0x4C8000
	0x03C2B588 LDR X0, [X0 + 0x5A8]
	0x03C2B58C BL 0x1C16CF4
	0x03C2B590 MOVZ W8, 0x1
	0x03C2B594 STRB W8, [X19 + 0xEA]
	0x03C2B598 LDR X0, [X20]
	0x03C2B59C LDR W8, [X0 + 0xE0]
	0x03C2B5A0 CBNZ W8, 0x3C2B5A8
	0x03C2B5A4 BL 0x1C16DFC
	0x03C2B5A8 FCVT S0, S8
	0x03C2B5AC BL 0x3EB1DD0
	0x03C2B5B0 LDP X20, X19, [X31 + 0x10]
	0x03C2B5B4 LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2B5BC LDR V8, [X31], #0x20
	0x03C2B5C0 RET
	0x03C2B5C4 STR D8, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X19, 0x7BB000
	005 Move X8, [X19+144]
	006 Move [X31+16], S0
	007 Move [X31+24], S1
	008 Move [X31+24], S2
	009 Move [X31], X31
	010 Move [X31+8], X31
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51396608
	014 Add X0, X0, 3456
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X19+144], X0
	018 Add X0, X31, 16
	019 Add X1, X31, 0
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move S0, [X31]
	022 Move S1, [X31+4]
	023 Move S2, [X31+8]
	024 Move S3, [X31+12]
	025 Move X30, [X31+32]
	026 Move X19, [X31+40]
	027 Add X31, X31, 48
	028 Return X0

Method: UnityEngine.Vector3 Internal_ToEulerRad(UnityEngine.Quaternion rotation)

Disassembly:
	0x03C2B60C FCVT S0, S8
	0x03C2B610 BL 0x3EB1D60
	0x03C2B614 LDP X20, X19, [X31 + 0x10]
	0x03C2B618 LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2B620 LDR V8, [X31], #0x20
	0x03C2B624 RET
	0x03C2B628 STR D8, [X31 - 0x20]!
	0x03C2B62C STR X30, [X31 + 0x8]
	0x03C2B630 STP X20, X19, [X31 + 0x10]
	0x03C2B634 ADRP X19, 0x7BA000
	0x03C2B638 ADRP X20, 0x4C8000
	0x03C2B63C LDRB W8, [X19 + 0xEC]
	0x03C2B640 LDR X20, [X20 + 0x5A8]
	0x03C2B644 MOV V8.16B, V0.16B
	0x03C2B648 TBNZ X8, 0x0, 0x3C2B660
	0x03C2B64C ADRP X0, 0x4C8000
	0x03C2B650 LDR X0, [X0 + 0x5A8]
	0x03C2B654 BL 0x1C16CF4
	0x03C2B658 MOVZ W8, 0x1
	0x03C2B65C STRB W8, [X19 + 0xEC]
	0x03C2B660 LDR X0, [X20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move [X31+40], X19
	004 Move X19, 0x7BB000
	005 Move X8, [X19+152]
	006 Move [X31+16], S0
	007 Move [X31+24], S1
	008 Move [X31+24], S2
	009 Move [X31+32], S3
	010 Move [X31+8], W31
	011 Move [X31], X31
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51478528
	015 Add X0, X0, 3266
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X19+152], X0
	019 Add X0, X31, 16
	020 Add X1, X31, 0
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move S0, [X31]
	023 Move S1, [X31+4]
	024 Move V2, [X31+8]
	025 Move X30, [X31+32]
	026 Move X19, [X31+40]
	027 Add X31, X31, 48
	028 Return X0

Method: System.Void Internal_ToAxisAngleRad(UnityEngine.Quaternion q, out UnityEngine.Vector3 axis, out System.Single angle)

Disassembly:
	0x03C2B6A8 MOV V8.16B, V0.16B
	0x03C2B6AC TBNZ X8, 0x0, 0x3C2B6C4
	0x03C2B6B0 ADRP X0, 0x4C8000
	0x03C2B6B4 LDR X0, [X0 + 0x5A8]
	0x03C2B6B8 BL 0x1C16CF4
	0x03C2B6BC MOVZ W8, 0x1
	0x03C2B6C0 STRB W8, [X19 + 0xED]
	0x03C2B6C4 LDR X0, [X20]
	0x03C2B6C8 LDR W8, [X0 + 0xE0]
	0x03C2B6CC CBNZ W8, 0x3C2B6D4
	0x03C2B6D0 BL 0x1C16DFC
	0x03C2B6D4 FCVT S0, S8
	0x03C2B6D8 BL 0x3EB1D70
	0x03C2B6DC LDP X20, X19, [X31 + 0x10]
	0x03C2B6E0 LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2B6E8 LDR V8, [X31], #0x20
	0x03C2B6EC RET
	0x03C2B6F0 STP D9, D8, [X31 - 0x30]!
	0x03C2B6F4 STR X30, [X31 + 0x10]
	0x03C2B6F8 STP X20, X19, [X31 + 0x20]
	0x03C2B6FC ADRP X19, 0x7BA000
	0x03C2B700 ADRP X20, 0x4C8000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7BB000
	007 Move X8, [X21+160]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31], S0
	011 Move [X31+8], S1
	012 Move [X31+8], S2
	013 Move [X31+16], S3
	014 Compare X8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, -51429376
	017 Add X0, X0, 3155
	018 Call 0x1C17CB8
	019 Move X8, X0
	020 Move [X21+160], X0
	021 Add X0, X31, 0
	022 Move X1, X20
	023 Move X2, X19
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X30, [X31+16]
	028 Move X21, [X31+24]
	029 Add X31, X31, 48
	030 Return 

Method: UnityEngine.Quaternion AngleAxis(System.Single angle, UnityEngine.Vector3 axis)

Disassembly:
	0x03C2B758 RET
	0x03C2B75C STR D8, [X31 - 0x20]!
	0x03C2B760 STR X30, [X31 + 0x8]
	0x03C2B764 STP X20, X19, [X31 + 0x10]
	0x03C2B768 ADRP X19, 0x7BA000
	0x03C2B76C ADRP X20, 0x4C8000
	0x03C2B770 LDRB W8, [X19 + 0xEF]
	0x03C2B774 LDR X20, [X20 + 0x5A8]
	0x03C2B778 MOV V8.16B, V0.16B
	0x03C2B77C TBNZ X8, 0x0, 0x3C2B794
	0x03C2B780 ADRP X0, 0x4C8000
	0x03C2B784 LDR X0, [X0 + 0x5A8]
	0x03C2B788 BL 0x1C16CF4
	0x03C2B78C MOVZ W8, 0x1
	0x03C2B790 STRB W8, [X19 + 0xEF]
	0x03C2B794 LDR X0, [X20]
	0x03C2B798 LDR W8, [X0 + 0xE0]
	0x03C2B79C CBNZ W8, 0x3C2B7A4
	0x03C2B7A0 BL 0x1C16DFC
	0x03C2B7A4 LDP X20, X19, [X31 + 0x10]
	0x03C2B7A8 LDR X30, [X31 + 0x8]
	0x03C2B7AC FSQRT S0, S8
	0x03C2B7B0 LDR V8, [X31], #0x20
	0x03C2B7B4 RET
	0x03C2B7B8 STR D8, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], D8
	003 Move [X31+48], X30
	004 Move [X31+56], X19
	005 Move X19, 0x7BB000
	006 Move X8, [X19+168]
	007 Move V8, V0
	008 Move [X31+16], S1
	009 Move [X31+24], S2
	010 Move [X31+24], S3
	011 Move [X31], X31
	012 Move [X31+8], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51515392
	016 Add X0, X0, 674
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X19+168], X0
	020 Add X0, X31, 16
	021 Add X1, X31, 0
	022 Move V0, V8
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move S0, [X31]
	025 Move S1, [X31+4]
	026 Move S2, [X31+8]
	027 Move S3, [X31+12]
	028 Move X30, [X31+48]
	029 Move X19, [X31+56]
	030 Move V8, [X31+32]
	031 Add X31, X31, 64
	032 Return X0

Method: UnityEngine.Quaternion LookRotation(UnityEngine.Vector3 forward, UnityEngine.Vector3 upwards)

Disassembly:
	0x03C2B810 RET
	0x03C2B814 STP X30, X21, [X31 - 0x20]!
	0x03C2B818 STP X20, X19, [X31 + 0x10]
	0x03C2B81C ADRP X20, 0x7BA000
	0x03C2B820 ADRP X21, 0x4C8000
	0x03C2B824 LDRB W8, [X20 + 0xF1]
	0x03C2B828 LDR X21, [X21 + 0x5A8]
	0x03C2B82C MOV W19, W0
	0x03C2B830 TBNZ X8, 0x0, 0x3C2B848
	0x03C2B834 ADRP X0, 0x4C8000
	0x03C2B838 LDR X0, [X0 + 0x5A8]
	0x03C2B83C BL 0x1C16CF4
	0x03C2B840 MOVZ W8, 0x1
	0x03C2B844 STRB W8, [X20 + 0xF1]
	0x03C2B848 LDR X0, [X21]
	0x03C2B84C LDR W8, [X0 + 0xE0]
	0x03C2B850 CBNZ W8, 0x3C2B858
	0x03C2B854 BL 0x1C16DFC
	0x03C2B858 CMP W19, 0x0
	0x03C2B85C CSNEG W0, W19, W19, PL
	0x03C2B860 LDP X20, X19, [X31 + 0x10]
	0x03C2B864 LDP X30, X21, [X31], #0x20
	0x03C2B868 RET
	0x03C2B86C FCMP S0, S1

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+48], X30
	003 Move [X31+56], X19
	004 Move X19, 0x7BB000
	005 Move X8, [X19+176]
	006 Move [X31+32], S0
	007 Move [X31+40], S1
	008 Move [X31+40], S2
	009 Move [X31+16], S3
	010 Move [X31+24], S4
	011 Move [X31+24], S5
	012 Move [X31], X31
	013 Move [X31+8], X31
	014 Compare X8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, -51433472
	017 Add X0, X0, 210
	018 Call 0x1C17CB8
	019 Move X8, X0
	020 Move [X19+176], X0
	021 Add X0, X31, 32
	022 Add X1, X31, 16
	023 Add X2, X31, 0
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move S0, [X31]
	026 Move S1, [X31+4]
	027 Move S2, [X31+8]
	028 Move S3, [X31+12]
	029 Move X30, [X31+48]
	030 Move X19, [X31+56]
	031 Add X31, X31, 64
	032 Return X0

Method: UnityEngine.Quaternion LookRotation(UnityEngine.Vector3 forward)

Disassembly:
	0x03C2B8C4 SUBS X9, X9, 0x1
	0x03C2B8C8 B.NE 0x3C2B8B8
	0x03C2B8CC B 0x3C2B8D4
	0x03C2B8D0 FMOV S0, W31
	0x03C2B8D4 LDR X30, [X31], #0x10
	0x03C2B8D8 RET
	0x03C2B8DC BL 0x1C16F20
	0x03C2B8E0 CMP W0, W1
	0x03C2B8E4 CSEL W0, W0, W1, GT
	0x03C2B8E8 RET
	0x03C2B8EC STP D9, D8, [X31 - 0x30]!
	0x03C2B8F0 STR X30, [X31 + 0x10]
	0x03C2B8F4 STP X20, X19, [X31 + 0x20]
	0x03C2B8F8 ADRP X19, 0x7BA000
	0x03C2B8FC ADRP X20, 0x4C8000
	0x03C2B900 LDRB W8, [X19 + 0xF2]
	0x03C2B904 LDR X20, [X20 + 0x5A8]
	0x03C2B908 MOV V8.16B, V1.16B
	0x03C2B90C MOV V9.16B, V0.16B
	0x03C2B910 TBNZ X8, 0x0, 0x3C2B928
	0x03C2B914 ADRP X0, 0x4C8000
	0x03C2B918 LDR X0, [X0 + 0x5A8]
	0x03C2B91C BL 0x1C16CF4
	0x03C2B920 MOVZ W8, 0x1
	0x03C2B924 STRB W8, [X19 + 0xF2]
	0x03C2B928 LDR X0, [X20]
	0x03C2B92C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X19, 0x7AE000
	007 Move W8, [X19+1926]
	008 Move V8, V2
	009 Move V9, V1
	010 Move V10, V0
	011 Compare W8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, 0x4C9000
	014 Move X0, [X0+1440]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+1926], W8
	018 Move X8, 0x4C9000
	019 Move X8, [X8+1440]
	020 Move V1, V9
	021 Move V2, V8
	022 Move X30, [X31+32]
	023 Move X19, [X31+40]
	024 Move X8, [X8]
	025 Move D9, [X31+16]
	026 Move D8, [X31+24]
	027 Move V0, V10
	028 Move X8, [X8+184]
	029 Move S3, [X8+24]
	030 Move S4, [X8+28]
	031 Move V5, [X8+32]
	032 Move V10, [X31+48]
	033 Call Quaternion.LookRotation, X0, X1
	034 Return X0

Method: System.Void .ctor(System.Single x, System.Single y, System.Single z, System.Single w)

Disassembly:
	0x03C2B930 CBNZ W8, 0x3C2B938
	0x03C2B934 BL 0x1C16DFC
	0x03C2B938 FCVT S0, S9

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Return 

Method: UnityEngine.Quaternion get_identity()

Disassembly:
	0x03C2B93C FCVT S1, S8
	0x03C2B940 MOV X0, X31
	0x03C2B944 BL 0x337F438
	0x03C2B948 LDP X20, X19, [X31 + 0x20]
	0x03C2B94C LDR X30, [X31 + 0x10]
	0x00000000 INVALID
	0x03C2B954 LDP D9, D8, [X31], #0x30
	0x03C2B958 RET
	0x03C2B95C STR D8, [X31 - 0x20]!
	0x03C2B960 STR X30, [X31 + 0x8]
	0x03C2B964 STP X20, X19, [X31 + 0x10]
	0x03C2B968 ADRP X19, 0x7BA000
	0x03C2B96C ADRP X20, 0x4C8000
	0x03C2B970 LDRB W8, [X19 + 0xF3]
	0x03C2B974 LDR X20, [X20 + 0x5A8]
	0x03C2B978 MOV V8.16B, V0.16B
	0x03C2B97C TBNZ X8, 0x0, 0x3C2B994
	0x03C2B980 ADRP X0, 0x4C8000
	0x03C2B984 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BB000
	005 Move X20, 0x4CA000
	006 Move W8, [X19+96]
	007 Move X20, [X20+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4CA000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+96], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move S0, [X8]
	022 Move S1, [X8+4]
	023 Move S2, [X8+8]
	024 Move S3, [X8+12]
	025 Move X30, [X31+32]
	026 Return X0

Method: UnityEngine.Quaternion op_Multiply(UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs)

Disassembly:
	0x03C2B988 BL 0x1C16CF4
	0x03C2B98C MOVZ W8, 0x1
	0x03C2B990 STRB W8, [X19 + 0xF3]
	0x03C2B994 LDR X0, [X20]
	0x03C2B998 LDR W8, [X0 + 0xE0]
	0x03C2B99C CBNZ W8, 0x3C2B9A4
	0x03C2B9A0 BL 0x1C16DFC
	0x03C2B9A4 FCVT S0, S8
	0x03C2B9A8 BL 0x3EB1DA0
	0x03C2B9AC LDP X20, X19, [X31 + 0x10]
	0x03C2B9B0 LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2B9B8 LDR V8, [X31], #0x20
	0x03C2B9BC RET
	0x03C2B9C0 STP D9, D8, [X31 - 0x30]!
	0x03C2B9C4 STR X30, [X31 + 0x10]
	0x03C2B9C8 STP X20, X19, [X31 + 0x20]
	0x03C2B9CC ADRP X19, 0x7BA000
	0x03C2B9D0 ADRP X20, 0x4C8000
	0x03C2B9D4 LDRB W8, [X19 + 0xF4]
	0x03C2B9D8 LDR X20, [X20 + 0x5A8]
	0x03C2B9DC MOV V8.16B, V1.16B
	0x03C2B9E0 MOV V9.16B, V0.16B
	0x03C2B9E4 TBNZ X8, 0x0, 0x3C2B9FC
	0x03C2B9E8 ADRP X0, 0x4C8000
	0x03C2B9EC LDR X0, [X0 + 0x5A8]
	0x03C2B9F0 BL 0x1C16CF4
	0x03C2B9F4 MOVZ W8, 0x1
	0x03C2B9F8 STRB W8, [X19 + 0xF4]

ISIL:
	001 Multiply S16, S3, S4
	002 Multiply S17, S0, S7
	003 Multiply S18, S1, S6
	004 Multiply S19, S2, S5
	005 Multiply S20, S3, S5
	006 Multiply S21, S1, S7
	007 Multiply S22, S2, S4
	008 Multiply S23, S0, S6
	009 Multiply S24, S0, S5
	010 Multiply S0, S0, S4
	011 Multiply S4, S1, S4
	012 Multiply S1, S1, S5
	013 Multiply S5, S3, S6
	014 Multiply S3, S3, S7
	015 Multiply S7, S2, S7
	016 Multiply S6, S2, S6
	017 Add S2, S16, S17
	018 Add S16, S20, S21
	019 Add S5, S5, S7
	020 Subtract S0, S3, S0
	021 Add S2, S18, S2
	022 Add S3, S22, S16
	023 Add S5, S24, S5
	024 Subtract S7, S0, S1
	025 Subtract S0, S2, S19
	026 Subtract S1, S3, S23
	027 Subtract S2, S5, S4
	028 Subtract S3, S7, S6
	029 Return X0

Method: UnityEngine.Vector3 op_Multiply(UnityEngine.Quaternion rotation, UnityEngine.Vector3 point)

Disassembly:
	0x03C2B9FC LDR X0, [X20]
	0x03C2BA00 LDR W8, [X0 + 0xE0]
	0x03C2BA04 CBNZ W8, 0x3C2BA0C
	0x03C2BA08 BL 0x1C16DFC
	0x03C2BA0C FCVT S0, S9
	0x03C2BA10 FCVT S1, S8
	0x03C2BA14 MOV X0, X31
	0x03C2BA18 BL 0x337ECD0
	0x03C2BA1C LDP X20, X19, [X31 + 0x20]
	0x03C2BA20 LDR X30, [X31 + 0x10]
	0x00000000 INVALID
	0x03C2BA28 LDP D9, D8, [X31], #0x30
	0x03C2BA2C RET
	0x03C2BA30 STR D8, [X31 - 0x20]!
	0x03C2BA34 STR X30, [X31 + 0x8]
	0x03C2BA38 STP X20, X19, [X31 + 0x10]
	0x03C2BA3C ADRP X19, 0x7BA000
	0x03C2BA40 ADRP X20, 0x4C8000
	0x03C2BA44 LDRB W8, [X19 + 0xF5]
	0x03C2BA48 LDR X20, [X20 + 0x5A8]
	0x03C2BA4C MOV V8.16B, V0.16B
	0x03C2BA50 TBNZ X8, 0x0, 0x3C2BA68
	0x03C2BA54 ADRP X0, 0x4C8000
	0x03C2BA58 LDR X0, [X0 + 0x5A8]
	0x03C2BA5C BL 0x1C16CF4
	0x03C2BA60 MOVZ W8, 0x1
	0x03C2BA64 STRB W8, [X19 + 0xF5]
	0x03C2BA68 LDR X0, [X20]
	0x03C2BA6C LDR W8, [X0 + 0xE0]
	0x03C2BA70 CBNZ W8, 0x3C2BA78
	0x03C2BA74 BL 0x1C16DFC
	0x03C2BA78 FCVT S0, S8
	0x03C2BA7C BL 0x3EB1C20
	0x03C2BA80 LDP X20, X19, [X31 + 0x10]
	0x03C2BA84 LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2BA8C LDR V8, [X31], #0x20
	0x03C2BA90 RET
	0x03C2BA94 STR D8, [X31 - 0x20]!
	0x03C2BA98 STR X30, [X31 + 0x8]
	0x03C2BA9C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Add S7, S0, S0
	002 Add S16, S1, S1
	003 Add S17, S2, S2
	004 Multiply S19, S0, S7
	005 Multiply S20, S1, S16
	006 Multiply S2, S2, S17
	007 Move S18, 1
	008 Multiply S21, S0, S16
	009 Multiply S0, S0, S17
	010 Multiply S1, S1, S17
	011 Multiply S7, S3, S7
	012 Multiply S16, S3, S16
	013 Multiply S3, S3, S17
	014 Add S17, S20, S2
	015 Add S2, S19, S2
	016 Subtract S22, S21, S3
	017 Add S3, S21, S3
	018 Add S21, S0, S16
	019 Subtract S0, S0, S16
	020 Subtract S16, S1, S7
	021 Add S1, S1, S7
	022 Add S7, S19, S20
	023 Subtract S17, S18, S17
	024 Subtract S2, S18, S2
	025 Multiply S19, S5, S22
	026 Multiply S3, S4, S3
	027 Multiply S0, S4, S0
	028 Multiply S1, S5, S1
	029 Subtract S7, S18, S7
	030 Multiply S4, S4, S17
	031 Multiply S2, S5, S2
	032 Multiply S20, S6, S21
	033 Multiply S16, S6, S16
	034 Add S5, S0, S1
	035 Multiply S6, S6, S7
	036 Add S0, S19, S4
	037 Add S1, S3, S2
	038 Add S0, S20, S0
	039 Add S1, S16, S1
	040 Add S2, S5, S6
	041 Return X0

Method: System.Boolean IsEqualUsingDot(System.Single dot)

Disassembly:
	0x03C2BAA0 ADRP X19, 0x7BA000
	0x03C2BAA4 ADRP X20, 0x4C8000
	0x03C2BAA8 LDRB W8, [X19 + 0xF6]
	0x03C2BAAC LDR X20, [X20 + 0x5A8]
	0x03C2BAB0 MOV V8.16B, V0.16B

ISIL:
	001 Move X8, -51642368
	002 Move V1, [X8+436]
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Boolean op_Equality(UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs)

Disassembly:
	0x03C2BAB4 TBNZ X8, 0x0, 0x3C2BACC
	0x03C2BAB8 ADRP X0, 0x4C8000
	0x03C2BABC LDR X0, [X0 + 0x5A8]
	0x03C2BAC0 BL 0x1C16CF4
	0x03C2BAC4 MOVZ W8, 0x1
	0x03C2BAC8 STRB W8, [X19 + 0xF6]
	0x03C2BACC LDR X0, [X20]
	0x03C2BAD0 LDR W8, [X0 + 0xE0]
	0x03C2BAD4 CBNZ W8, 0x3C2BADC
	0x03C2BAD8 BL 0x1C16DFC
	0x03C2BADC FCVT S0, S8
	0x03C2BAE0 BL 0x3EB1DB0

ISIL:
	001 Multiply S0, S0, S4
	002 Multiply S1, S1, S5
	003 Move X8, -51642368
	004 Add S0, S0, S1
	005 Move V1, [X8+436]
	006 Multiply S2, S2, S6
	007 Add S0, S2, S0
	008 Multiply S2, S3, S7
	009 Add S0, S2, S0
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Return X0

Method: System.Boolean op_Inequality(UnityEngine.Quaternion lhs, UnityEngine.Quaternion rhs)

Disassembly:
	0x03C2BAE4 LDP X20, X19, [X31 + 0x10]
	0x03C2BAE8 LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2BAF0 LDR V8, [X31], #0x20
	0x03C2BAF4 RET
	0x03C2BAF8 STR D8, [X31 - 0x20]!
	0x03C2BAFC STR X30, [X31 + 0x8]
	0x03C2BB00 STP X20, X19, [X31 + 0x10]
	0x03C2BB04 ADRP X19, 0x7BA000
	0x03C2BB08 ADRP X20, 0x4C8000
	0x03C2BB0C LDRB W8, [X19 + 0xF7]
	0x03C2BB10 LDR X20, [X20 + 0x5A8]

ISIL:
	001 Multiply S0, S0, S4
	002 Multiply S1, S1, S5
	003 Move X8, -51642368
	004 Add S0, S0, S1
	005 Move V1, [X8+436]
	006 Multiply S2, S2, S6
	007 Add S0, S2, S0
	008 Multiply S2, S3, S7
	009 Add S0, S2, S0
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Return X0

Method: System.Single Dot(UnityEngine.Quaternion a, UnityEngine.Quaternion b)

Disassembly:
	0x03C2BB14 MOV V8.16B, V0.16B
	0x03C2BB18 TBNZ X8, 0x0, 0x3C2BB30
	0x03C2BB1C ADRP X0, 0x4C8000
	0x03C2BB20 LDR X0, [X0 + 0x5A8]
	0x03C2BB24 BL 0x1C16CF4
	0x03C2BB28 MOVZ W8, 0x1
	0x03C2BB2C STRB W8, [X19 + 0xF7]
	0x03C2BB30 LDR X0, [X20]

ISIL:
	001 Multiply S0, S0, S4
	002 Multiply S1, S1, S5
	003 Multiply S2, S2, S6
	004 Add S0, S0, S1
	005 Add S0, S2, S0
	006 Multiply S1, S3, S7
	007 Add S0, S1, S0
	008 Return V0

Method: System.Single Angle(UnityEngine.Quaternion a, UnityEngine.Quaternion b)

Disassembly:
	0x03C2BB34 LDR W8, [X0 + 0xE0]
	0x03C2BB38 CBNZ W8, 0x3C2BB40
	0x03C2BB3C BL 0x1C16DFC
	0x03C2BB40 LDP X20, X19, [X31 + 0x10]
	0x03C2BB44 LDR X30, [X31 + 0x8]
	0x03C2BB48 FRINTP S0, S8
	0x03C2BB4C LDR V8, [X31], #0x20
	0x03C2BB50 RET
	0x03C2BB54 STR D8, [X31 - 0x20]!
	0x03C2BB58 STR X30, [X31 + 0x8]
	0x03C2BB5C STP X20, X19, [X31 + 0x10]
	0x03C2BB60 ADRP X19, 0x7BA000
	0x03C2BB64 ADRP X20, 0x4C8000
	0x03C2BB68 LDRB W8, [X19 + 0xF8]
	0x03C2BB6C LDR X20, [X20 + 0x5A8]
	0x03C2BB70 MOV V8.16B, V0.16B
	0x03C2BB74 TBNZ X8, 0x0, 0x3C2BB8C
	0x03C2BB78 ADRP X0, 0x4C8000
	0x03C2BB7C LDR X0, [X0 + 0x5A8]
	0x03C2BB80 BL 0x1C16CF4
	0x03C2BB84 MOVZ W8, 0x1
	0x03C2BB88 STRB W8, [X19 + 0xF8]
	0x03C2BB8C LDR X0, [X20]
	0x03C2BB90 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Multiply S0, S0, S4
	003 Multiply S1, S1, S5
	004 Multiply S2, S2, S6
	005 Move X8, -51642368
	006 Add S0, S0, S1
	007 Multiply S3, S3, S7
	008 Move V4, [X8+436]
	009 Add S0, S2, S0
	010 Add S0, S3, S0
	011 NotImplemented "Instruction FABS not yet implemented."
	012 Move S1, 1
	013 NotImplemented "Instruction FMINNM not yet implemented."
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move S0, W31
	016 Move V0, V1
	017 Call 0x3EB2BB0
	018 Move X8, -51642368
	019 Move V1, [X8+1096]
	020 Add S0, S0, S0
	021 Multiply S0, S0, S1
	022 Move X30, [X31+16]
	023 Return V0

Method: UnityEngine.Vector3 Internal_MakePositive(UnityEngine.Vector3 euler)

Disassembly:
	0x03C2BB94 CBNZ W8, 0x3C2BB9C
	0x03C2BB98 BL 0x1C16DFC
	0x03C2BB9C LDP X20, X19, [X31 + 0x10]
	0x03C2BBA0 LDR X30, [X31 + 0x8]
	0x03C2BBA4 FRINTM S0, S8
	0x03C2BBA8 LDR V8, [X31], #0x20
	0x03C2BBAC RET
	0x03C2BBB0 STP D9, D8, [X31 - 0x30]!
	0x03C2BBB4 STR X30, [X31 + 0x10]
	0x03C2BBB8 STP X20, X19, [X31 + 0x20]
	0x03C2BBBC ADRP X19, 0x7BA000
	0x03C2BBC0 ADRP X20, 0x4C8000
	0x03C2BBC4 LDRB W8, [X19 + 0xF9]
	0x03C2BBC8 LDR X20, [X20 + 0x5A8]
	0x03C2BBCC MOV V8.16B, V0.16B
	0x03C2BBD0 TBNZ X8, 0x0, 0x3C2BBE8
	0x03C2BBD4 ADRP X0, 0x4C8000
	0x03C2BBD8 LDR X0, [X0 + 0x5A8]
	0x03C2BBDC BL 0x1C16CF4
	0x03C2BBE0 MOVZ W8, 0x1
	0x03C2BBE4 STRB W8, [X19 + 0xF9]
	0x03C2BBE8 LDR X0, [X20]
	0x03C2BBEC LDR W8, [X0 + 0xE0]
	0x03C2BBF0 CBNZ W8, 0x3C2BBF8
	0x03C2BBF4 BL 0x1C16DFC
	0x03C2BBF8 FCVT S9, S8
	0x03C2BBFC ADD X0, X31, 0x18
	0x03C2BC00 MOV V0.16B, V9.16B
	0x03C2BC04 BL 0x3EB1C00
	0x03C2BC08 FCMP S8, 0x0
	0x03C2BC0C B.GE 0x3C2BC28
	0x03C2BC10 FMOV D1, -0.5
	0x03C2BC14 FCMP D0, D1
	0x03C2BC18 B.NE 0x3C2BC50

ISIL:
	001 Move X8, -51642368
	002 Move V3, [X8+1032]
	003 Move X8, -51642368
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move W9, 0x43B40000
	006 Move V4, [X8+256]
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move W9, 0xC3B40000
	009 Move S4, W9
	010 Add S0, S0, S4
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move W9, 0x43B40000
	013 Move V4, [X8+256]
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move W9, 0xC3B40000
	016 Move S4, W9
	017 Add S1, S1, S4
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move W8, 0x43B40000
	020 Move V3, [X8+256]
	021 NotImplemented "Instruction FCMP not yet implemented."
	022 Move W8, 0xC3B40000
	023 Move S3, W8
	024 Add S2, S2, S3
	025 Return X0

Method: UnityEngine.Vector3 get_eulerAngles()

Disassembly:
	0x03C2BC1C LDR V0, [X31 + 0x18]
	0x03C2BC20 FMOV D1, -1
	0x03C2BC24 B 0x3C2BC3C
	0x03C2BC28 FMOV D1, 0.5
	0x03C2BC2C FCMP D0, D1
	0x03C2BC30 B.NE 0x3C2BC5C
	0x03C2BC34 LDR V0, [X31 + 0x18]
	0x03C2BC38 FMOV D1, 1
	0x03C2BC3C FCVTZS X8, D0
	0x03C2BC40 FADD D1, D0, D1
	0x03C2BC44 ANDS X31, X8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move S0, [X0]
	003 Move S1, [X0+4]
	004 Move S2, [X0+8]
	005 Move S3, [X0+12]
	006 Call Quaternion.Internal_ToEulerRad, X0
	007 Move X8, -51642368
	008 Move V3, [X8+1096]
	009 Multiply S0, S0, S3
	010 Multiply S1, S1, S3
	011 Multiply S2, S2, S3
	012 Move X30, [X31+16]
	013 Call Quaternion.Internal_MakePositive, X0
	014 Return X0

Method: UnityEngine.Quaternion Euler(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x03C2BC48 FCSEL D0, D0, D1, EQ
	0x03C2BC4C B 0x3C2BC64
	0x03C2BC50 FADD D0, D9, D1
	0x03C2BC54 FRINTP D0, D0
	0x03C2BC58 B 0x3C2BC64
	0x03C2BC5C FADD D0, D9, D1

ISIL:
	001 Move X8, -51642368
	002 Move V3, [X8+260]
	003 Multiply S0, S0, S3
	004 Multiply S1, S1, S3
	005 Multiply S2, S2, S3
	006 Call Quaternion.Internal_FromEulerRad, X0
	007 Return X0

Method: UnityEngine.Quaternion Euler(UnityEngine.Vector3 euler)

Disassembly:
	0x03C2BC60 FRINTM D0, D0
	0x03C2BC64 LDP X20, X19, [X31 + 0x20]
	0x03C2BC68 LDR X30, [X31 + 0x10]
	0x00000000 INVALID
	0x03C2BC70 LDP D9, D8, [X31], #0x30
	0x03C2BC74 RET

ISIL:
	001 Move X8, -51642368
	002 Move V3, [X8+260]
	003 Multiply S0, S0, S3
	004 Multiply S1, S1, S3
	005 Multiply S2, S2, S3
	006 Call Quaternion.Internal_FromEulerRad, X0
	007 Return X0

Method: System.Void ToAngleAxis(out System.Single angle, out UnityEngine.Vector3 axis)

Disassembly:
	0x03C2BC78 STR D8, [X31 - 0x20]!
	0x03C2BC7C STR X30, [X31 + 0x8]
	0x03C2BC80 STP X20, X19, [X31 + 0x10]
	0x03C2BC84 ADRP X19, 0x7BA000
	0x03C2BC88 ADRP X20, 0x4C8000
	0x03C2BC8C LDRB W8, [X19 + 0xFA]
	0x03C2BC90 LDR X20, [X20 + 0x5A8]
	0x03C2BC94 MOV V8.16B, V0.16B
	0x03C2BC98 TBNZ X8, 0x0, 0x3C2BCB0
	0x03C2BC9C ADRP X0, 0x4C8000
	0x03C2BCA0 LDR X0, [X0 + 0x5A8]
	0x03C2BCA4 BL 0x1C16CF4
	0x03C2BCA8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move S0, [X0]
	004 Move S1, [X0+4]
	005 Move S2, [X0+8]
	006 Move S3, [X0+12]
	007 Move X0, X2
	008 Move X19, X1
	009 Call Quaternion.Internal_ToAxisAngleRad, X0, X1, X2
	010 Move X8, -51642368
	011 Move V0, [X19]
	012 Move V1, [X8+1096]
	013 Multiply S0, S0, S1
	014 Move [X19], S0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: UnityEngine.Quaternion Normalize(UnityEngine.Quaternion q)

Disassembly:
	0x03C2BCAC STRB W8, [X19 + 0xFA]
	0x03C2BCB0 LDR X0, [X20]
	0x03C2BCB4 LDR W8, [X0 + 0xE0]
	0x03C2BCB8 CBNZ W8, 0x3C2BCC0
	0x03C2BCBC BL 0x1C16DFC
	0x03C2BCC0 MOVZ W8, 0x7F800000
	0x03C2BCC4 LDP X20, X19, [X31 + 0x10]
	0x03C2BCC8 LDR X30, [X31 + 0x8]
	0x03C2BCCC FRINTP S0, S8
	0x03C2BCD0 FMOV S1, W8
	0x03C2BCD4 FCVTPS W9, S8
	0x03C2BCD8 FCMP S0, S1
	0x03C2BCDC MOVZ W8, 0x80000000
	0x03C2BCE0 CSEL W0, W8, W9, EQ
	0x03C2BCE4 LDR V8, [X31], #0x20
	0x03C2BCE8 RET
	0x03C2BCEC STR D8, [X31 - 0x20]!
	0x03C2BCF0 STR X30, [X31 + 0x8]
	0x03C2BCF4 STP X20, X19, [X31 + 0x10]
	0x03C2BCF8 ADRP X19, 0x7BA000
	0x03C2BCFC ADRP X20, 0x4C8000
	0x03C2BD00 LDRB W8, [X19 + 0xFB]
	0x03C2BD04 LDR X20, [X20 + 0x5A8]
	0x03C2BD08 MOV V8.16B, V0.16B
	0x03C2BD0C TBNZ X8, 0x0, 0x3C2BD24
	0x03C2BD10 ADRP X0, 0x4C8000
	0x03C2BD14 LDR X0, [X0 + 0x5A8]
	0x03C2BD18 BL 0x1C16CF4
	0x03C2BD1C MOVZ W8, 0x1
	0x03C2BD20 STRB W8, [X19 + 0xFB]
	0x03C2BD24 LDR X0, [X20]
	0x03C2BD28 LDR W8, [X0 + 0xE0]
	0x03C2BD2C CBNZ W8, 0x3C2BD34
	0x03C2BD30 BL 0x1C16DFC
	0x03C2BD34 MOVZ W8, 0x7F800000
	0x03C2BD38 LDP X20, X19, [X31 + 0x10]
	0x03C2BD3C LDR X30, [X31 + 0x8]
	0x03C2BD40 FRINTM S0, S8
	0x03C2BD44 FMOV S1, W8
	0x03C2BD48 FCVTMS W9, S8
	0x03C2BD4C FCMP S0, S1
	0x03C2BD50 MOVZ W8, 0x80000000
	0x03C2BD54 CSEL W0, W8, W9, EQ
	0x03C2BD58 LDR V8, [X31], #0x20
	0x03C2BD5C RET
	0x03C2BD60 STP D9, D8, [X31 - 0x30]!
	0x03C2BD64 STR X30, [X31 + 0x10]
	0x03C2BD68 STP X20, X19, [X31 + 0x20]
	0x03C2BD6C ADRP X19, 0x7BA000
	0x03C2BD70 ADRP X20, 0x4C8000
	0x03C2BD74 LDRB W8, [X19 + 0xFC]
	0x03C2BD78 LDR X20, [X20 + 0x5A8]
	0x03C2BD7C MOV V8.16B, V0.16B
	0x03C2BD80 TBNZ X8, 0x0, 0x3C2BD98
	0x03C2BD84 ADRP X0, 0x4C8000

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x7BB000
	009 Move X19, 0x4D0000
	010 Move W8, [X20+97]
	011 Move X19, [X19+1208]
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x4D0000
	021 Move X0, [X0+1208]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+97], W8
	025 Move X8, [X19]
	026 Multiply S0, S11, S11
	027 Multiply S1, S10, S10
	028 Add S0, S0, S1
	029 Move X8, [X8+184]
	030 Multiply S1, S9, S9
	031 Add S0, S1, S0
	032 Multiply S2, S8, S8
	033 Move V1, [X8]
	034 Add S0, S2, S0
	035 NotImplemented "Instruction FSQRT not yet implemented."
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move X19, 0x7AE000
	038 Move W8, [X19+1939]
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x4CA000
	042 Move X0, [X0+1448]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X19+1939], W8
	046 Move X8, 0x4CA000
	047 Move X8, [X8+1448]
	048 Move X8, [X8]
	049 Move X8, [X8+184]
	050 Move S0, [X8]
	051 Move S1, [X8+4]
	052 Move S2, [X8+8]
	053 Move S3, [X8+12]
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 NotImplemented "Instruction FDIV not yet implemented."
	056 NotImplemented "Instruction FDIV not yet implemented."
	057 NotImplemented "Instruction FDIV not yet implemented."
	058 Move X20, [X31+48]
	059 Move X19, [X31+56]
	060 Move X30, [X31+32]
	061 Move D9, [X31+16]
	062 Move D8, [X31+24]
	063 Move D11, [X31+64]
	064 Move D10, [X31+72]
	065 Return X0

Method: System.Void Normalize()

Disassembly:
	0x03C2BD88 LDR X0, [X0 + 0x5A8]
	0x03C2BD8C BL 0x1C16CF4
	0x03C2BD90 MOVZ W8, 0x1
	0x03C2BD94 STRB W8, [X19 + 0xFC]
	0x03C2BD98 LDR X0, [X20]
	0x03C2BD9C LDR W8, [X0 + 0xE0]
	0x03C2BDA0 CBNZ W8, 0x3C2BDA8
	0x03C2BDA4 BL 0x1C16DFC
	0x03C2BDA8 FCVT S9, S8
	0x03C2BDAC ADD X0, X31, 0x18
	0x03C2BDB0 MOV V0.16B, V9.16B
	0x03C2BDB4 BL 0x3EB1C00
	0x03C2BDB8 FCMP S8, 0x0
	0x03C2BDBC B.GE 0x3C2BDD8
	0x03C2BDC0 FMOV D1, -0.5
	0x03C2BDC4 FCMP D0, D1
	0x03C2BDC8 B.NE 0x3C2BE00
	0x03C2BDCC LDR V0, [X31 + 0x18]
	0x03C2BDD0 FMOV D1, -1
	0x03C2BDD4 B 0x3C2BDEC
	0x03C2BDD8 FMOV D1, 0.5
	0x03C2BDDC FCMP D0, D1
	0x03C2BDE0 B.NE 0x3C2BE0C
	0x03C2BDE4 LDR V0, [X31 + 0x18]
	0x03C2BDE8 FMOV D1, 1
	0x03C2BDEC FCVTZS X8, D0
	0x03C2BDF0 FADD D1, D0, D1
	0x03C2BDF4 ANDS X31, X8, 0x1
	0x03C2BDF8 FCSEL D0, D0, D1, EQ
	0x03C2BDFC B 0x3C2BE14
	0x03C2BE00 FADD D0, D9, D1
	0x03C2BE04 FRINTP D0, D0
	0x03C2BE08 B 0x3C2BE14
	0x03C2BE0C FADD D0, D9, D1
	0x03C2BE10 FRINTM D0, D0
	0x03C2BE14 MOVZ X8, 0x7FF00000
	0x03C2BE18 LDP X20, X19, [X31 + 0x20]
	0x03C2BE1C LDR X30, [X31 + 0x10]
	0x03C2BE20 FMOV D1, X8
	0x03C2BE24 FCVTZS W9, D0
	0x03C2BE28 FCMP D0, D1
	0x03C2BE2C MOVZ W8, 0x80000000
	0x03C2BE30 CSEL W0, W8, W9, EQ
	0x03C2BE34 LDP D9, D8, [X31], #0x30
	0x03C2BE38 RET
	0x03C2BE3C FCMP S0, 0x0
	0x03C2BE40 FMOV S0, -1
	0x03C2BE44 FMOV S1, 1
	0x03C2BE48 FCSEL S0, S1, S0, GE
	0x03C2BE4C RET
	0x03C2BE50 FCMP S0, S1

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7AF000
	006 Move W8, [X20+755]
	007 Move V4, [X0]
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfNotEqual {18}
	011 Move X0, 0x4D0000
	012 Move X0, [X0+1208]
	013 Move [X31], V4
	014 Call 0x1C17CF4
	015 Move V4, [X31]
	016 Move W8, 1
	017 Move [X20+755], W8
	018 Move X8, 0x4D0000
	019 Move X8, [X8+1208]
	020 NotImplemented "Instruction INVALID not yet implemented."
	021 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	022 Add V1, V0, V1
	023 Move X8, [X8]
	024 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	025 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	026 Add V0, V0, V1
	027 Move X8, [X8+184]
	028 Add V0, V2, V0
	029 NotImplemented "Instruction FSQRT not yet implemented."
	030 Move V3, [X8]
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move X20, 0x7AE000
	033 Move W8, [X20+1939]
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0x4CA000
	037 Move X0, [X0+1448]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+1939], W8
	041 Move X8, 0x4CA000
	042 Move X8, [X8+1448]
	043 Move X8, [X8]
	044 Move X8, [X8+184]
	045 Move V0, [X8]
	046 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 Move [X19], V0
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+16]
	052 Add X31, X31, 48
	053 Return 

Method: UnityEngine.Quaternion get_normalized()

Disassembly:
	0x03C2BE54 B.MI 0x3C2BE64
	0x03C2BE58 FCMP S0, S2
	0x03C2BE5C FCSEL S0, S2, S0, GT
	0x03C2BE60 RET
	0x03C2BE64 MOV V0.16B, V1.16B
	0x03C2BE68 RET
	0x03C2BE6C CMP W0, W1
	0x03C2BE70 B.GE 0x3C2BE7C
	0x03C2BE74 MOV W0, W1
	0x03C2BE78 RET
	0x03C2BE7C CMP W0, W2
	0x03C2BE80 CSEL W0, W2, W0, GT
	0x03C2BE84 RET
	0x03C2BE88 FCMP S0, 0x0
	0x03C2BE8C B.MI 0x3C2BE9C
	0x03C2BE90 FMOV S1, 1
	0x03C2BE94 FMIN S0, S0, S1
	0x03C2BE98 RET
	0x03C2BE9C FMOV S0, W31
	0x03C2BEA0 RET
	0x03C2BEA4 FMOV S3, 1
	0x03C2BEA8 FCMP S2, 0x0
	0x03C2BEAC FMOV S4, W31
	0x03C2BEB0 FMIN S2, S2, S3
	0x03C2BEB4 FCSEL S2, S2, S4, PL
	0x03C2BEB8 FSUB S1, S1, S0
	0x03C2BEBC FMUL S1, S1, S2
	0x03C2BEC0 FADD S0, S1, S0
	0x03C2BEC4 RET
	0x03C2BEC8 FSUB S1, S1, S0
	0x03C2BECC FMUL S1, S1, S2
	0x03C2BED0 FADD S0, S1, S0
	0x03C2BED4 RET
	0x03C2BED8 MOVZ W8, 0x43B40000
	0x03C2BEDC FSUB S1, S1, S0
	0x03C2BEE0 FMOV S3, W8
	0x03C2BEE4 MOVZ W8, 0xC3B40000
	0x03C2BEE8 FDIV S4, S1, S3
	0x03C2BEEC FMOV S5, W8
	0x03C2BEF0 FRINTM S4, S4
	0x03C2BEF4 FMUL S4, S4, S5
	0x03C2BEF8 FADD S1, S1, S4
	0x03C2BEFC FMOV S4, W31
	0x03C2BF00 MOVZ W8, 0x43340000
	0x03C2BF04 FMIN S3, S1, S3
	0x03C2BF08 FCMP S1, 0x0
	0x03C2BF0C FMOV S1, W8
	0x03C2BF10 FCSEL S3, S3, S4, PL
	0x03C2BF14 FCMP S3, S1
	0x03C2BF18 FMOV S1, 1
	0x03C2BF1C FADD S5, S3, S5

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, 0x7AF000
	008 Move S8, [X0]
	009 Move S9, [X0+4]
	010 Move W8, [X19+755]
	011 Move S11, [X0+8]
	012 Move S10, [X0+12]
	013 Compare W8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, 0x4D0000
	016 Move X0, [X0+1208]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+755], W8
	020 Move X8, 0x4D0000
	021 Move X8, [X8+1208]
	022 Multiply S0, S8, S8
	023 Multiply S1, S9, S9
	024 Add S0, S0, S1
	025 Move X8, [X8]
	026 Multiply S1, S11, S11
	027 Add S0, S1, S0
	028 Multiply S2, S10, S10
	029 Move X8, [X8+184]
	030 Add S0, S2, S0
	031 NotImplemented "Instruction FSQRT not yet implemented."
	032 Move V1, [X8]
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move X19, 0x7AE000
	035 Move W8, [X19+1939]
	036 Compare W8, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x4CA000
	039 Move X0, [X0+1448]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X19+1939], W8
	043 Move X8, 0x4CA000
	044 Move X8, [X8+1448]
	045 Move X8, [X8]
	046 Move X8, [X8+184]
	047 Move S0, [X8]
	048 Move S1, [X8+4]
	049 Move S2, [X8+8]
	050 Move S3, [X8+12]
	051 NotImplemented "Instruction FDIV not yet implemented."
	052 NotImplemented "Instruction FDIV not yet implemented."
	053 NotImplemented "Instruction FDIV not yet implemented."
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 Move X30, [X31+32]
	056 Move X19, [X31+40]
	057 Move D9, [X31+16]
	058 Move D8, [X31+24]
	059 Move D11, [X31+48]
	060 Move D10, [X31+56]
	061 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C2BF20 FMIN S1, S2, S1
	0x03C2BF24 FCSEL S3, S5, S3, GT
	0x03C2BF28 FCMP S2, 0x0
	0x03C2BF2C FCSEL S1, S1, S4, PL
	0x03C2BF30 FMUL S1, S1, S3
	0x03C2BF34 FADD S0, S1, S0
	0x03C2BF38 RET
	0x03C2BF3C FSUB S3, S1, S0
	0x03C2BF40 FNEG S5, S2
	0x03C2BF44 FCMP S3, 0x0
	0x03C2BF48 FABD S4, S1, S1
	0x03C2BF4C FCSEL S3, S2, S5, GE
	0x03C2BF50 FADD S0, S3, S0
	0x03C2BF54 FCMP S4, S2
	0x03C2BF58 FCSEL S0, S0, S1, HI
	0x03C2BF5C RET
	0x03C2BF60 STP D9, D8, [X31 - 0x30]!
	0x03C2BF64 STR X30, [X31 + 0x10]
	0x03C2BF68 STP X20, X19, [X31 + 0x20]
	0x03C2BF6C ADRP X20, 0x7BA000
	0x03C2BF70 ADRP X19, 0x4CF000
	0x03C2BF74 LDRB W8, [X20 + 0xFD]
	0x03C2BF78 LDR X19, [X19 + 0x4B8]
	0x03C2BF7C MOV V8.16B, V1.16B
	0x03C2BF80 MOV V9.16B, V0.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move X19, X0
	008 Call Single.GetHashCode, X0
	009 Move W20, W0
	010 Add X0, X19, 4
	011 Move X1, X31
	012 Call Single.GetHashCode, X0
	013 Move W21, W0
	014 Add X0, X19, 8
	015 Move X1, X31
	016 Call Single.GetHashCode, X0
	017 Move W22, W0
	018 Add X0, X19, 12
	019 Move X1, X31
	020 Call Single.GetHashCode, X0
	021 Xor W8, W20, W21
	022 Xor W8, W8, W22
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Xor W0, W8, W0
	028 Move X30, [X31+48]
	029 Return X0

Method: System.Boolean Equals(System.Object other)

Disassembly:
	0x03C2BF84 TBNZ X8, 0x0, 0x3C2BF9C
	0x03C2BF88 ADRP X0, 0x4CF000
	0x03C2BF8C LDR X0, [X0 + 0x4B8]
	0x03C2BF90 BL 0x1C16CF4
	0x03C2BF94 MOVZ W8, 0x1
	0x03C2BF98 STRB W8, [X20 + 0xFD]
	0x03C2BF9C LDR X8, [X19]
	0x03C2BFA0 ADRP X9, 0xFFFFFFFFFCEBF000
	0x03C2BFA4 LDR V0, [X9 + 0x240]
	0x03C2BFA8 FABS S1, S9
	0x03C2BFAC LDR X8, [X8 + 0xB8]
	0x03C2BFB0 FABS S2, S8
	0x03C2BFB4 FCMP S1, S2
	0x03C2BFB8 FCSEL S1, S1, S2, GT
	0x03C2BFBC LDR V3, [X8]
	0x03C2BFC0 FMUL S0, S1, S0
	0x03C2BFC4 FMOV S1, 8
	0x03C2BFC8 LDP X20, X19, [X31 + 0x20]
	0x03C2BFCC FMUL S1, S3, S1
	0x03C2BFD0 FCMP S0, S1
	0x03C2BFD4 LDR X30, [X31 + 0x10]
	0x03C2BFD8 FCSEL S0, S0, S1, GT
	0x03C2BFDC FABD S1, S8, S8
	0x03C2BFE0 FCMP S1, S0
	0x03C2BFE4 CSET W0, MI
	0x03C2BFE8 LDP D9, D8, [X31], #0x30
	0x03C2BFEC RET
	0x03C2BFF0 ADRP X8, 0xFFFFFFFFFCEBE000
	0x03C2BFF4 LDR V7, [X8 + 0xF28]
	0x03C2BFF8 FMOV S5, 2
	0x03C2BFFC ADRP X9, 0xFFFFFFFFFCEBF000
	0x03C2C000 FSUB S16, S0, S1
	0x03C2C004 FMAX S7, S2, S7
	0x03C2C008 FDIV S2, S5, S7
	0x03C2C00C FMUL S5, S7, S3
	0x03C2C010 FNMUL S3, S7, S3
	0x03C2C014 LDR V7, [X9 + 0x368]
	0x03C2C018 FCMP S16, S5
	0x03C2C01C ADRP X8, 0xFFFFFFFFFCEBE000
	0x03C2C020 FCSEL S5, S5, S16, GT
	0x03C2C024 FCMP S16, S3
	0x03C2C028 LDR V16, [X8 + 0x120]
	0x03C2C02C FCSEL S18, S5, S3, PL
	0x03C2C030 FMUL S5, S2, S4
	0x03C2C034 FMOV S6, 1
	0x03C2C038 FMUL S7, S5, S7
	0x03C2C03C FADD S3, S5, S6
	0x03C2C040 FMUL S7, S5, S7
	0x03C2C044 FADD S7, S3, S7
	0x03C2C048 LDR V3, [X0]
	0x03C2C04C FMUL S16, S5, S16
	0x03C2C050 FMUL S16, S5, S16
	0x03C2C054 FMUL S5, S5, S16

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7BB000
	009 Move W8, [X21+98]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4CA000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+98], W8
	021 Compare X20, 0
	022 JumpIfEqual {69}
	023 Move X8, 0x4CA000
	024 Move X8, [X8+1448]
	025 Move X9, [X20]
	026 Move X8, [X8]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X20
	029 Call 0x1C17E08
	030 Move S0, [X0]
	031 Move S10, [X0+4]
	032 Move S9, [X0+8]
	033 Move S8, [X0+12]
	034 Move X0, X19
	035 Move X1, X31
	036 Call Single.Equals, X0, V0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {69}
	041 Add X0, X19, 4
	042 Move V0, V10
	043 Move X1, X31
	044 Call Single.Equals, X0, V0
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {69}
	049 Add X0, X19, 8
	050 Move V0, V9
	051 Move X1, X31
	052 Call Single.Equals, X0, V0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {69}
	057 Add X0, X19, 12
	058 Move V0, V8
	059 Move X20, [X31+48]
	060 Move X19, [X31+56]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Move D9, [X31+16]
	064 Move D8, [X31+24]
	065 Move X1, X31
	066 Move V10, [X31+64]
	067 Call Single.Equals, X0, V0
	068 Return X0
	069 Move X20, [X31+48]
	070 Move X19, [X31+56]
	071 Move X30, [X31+32]
	072 Move X21, [X31+40]
	073 Move D9, [X31+16]
	074 Move D8, [X31+24]
	075 Move W0, W31
	076 Move V10, [X31+64]
	077 Return X0

Method: System.Boolean Equals(UnityEngine.Quaternion other)

Disassembly:
	0x03C2C058 FMUL S16, S2, S18
	0x03C2C05C FADD S5, S7, S5
	0x03C2C060 FADD S7, S16, S3
	0x03C2C064 FDIV S5, S6, S5
	0x03C2C068 FMUL S6, S7, S4
	0x03C2C06C FADD S7, S18, S6
	0x03C2C070 FSUB S17, S1, S0
	0x03C2C074 FSUB S0, S0, S18
	0x03C2C078 FMUL S7, S5, S7
	0x03C2C07C FCMP S17, 0x0
	0x03C2C080 FADD S0, S0, S7
	0x03C2C084 CSET W8, LE
	0x03C2C088 FCMP S0, S1
	0x03C2C08C CSET W9, GT
	0x03C2C090 CMP W8, W9
	0x03C2C094 B.EQ 0x3C2C0A8
	0x03C2C098 FSUB S0, S1, S1
	0x03C2C09C FDIV S2, S0, S4
	0x03C2C0A0 MOV V0.16B, V1.16B
	0x03C2C0A4 B 0x3C2C0B4
	0x03C2C0A8 FMUL S1, S2, S6
	0x03C2C0AC FSUB S1, S3, S1
	0x03C2C0B0 FMUL S2, S5, S1
	0x03C2C0B4 STR S2, [X0]
	0x03C2C0B8 RET
	0x03C2C0BC FDIV S2, S0, S1
	0x03C2C0C0 FRINTM S2, S2
	0x03C2C0C4 FMUL S2, S2, S1
	0x03C2C0C8 FSUB S0, S0, S2
	0x03C2C0CC FCMP S0, S1
	0x03C2C0D0 FCSEL S1, S1, S0, GT
	0x03C2C0D4 FCMP S0, 0x0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move X1, X31
	007 Move V8, V3
	008 Move V9, V2
	009 Move V10, V1
	010 Move X19, X0
	011 Call Single.Equals, X0, V0
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {42}
	016 Add X0, X19, 4
	017 Move V0, V10
	018 Move X1, X31
	019 Call Single.Equals, X0, V0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {42}
	024 Add X0, X19, 8
	025 Move V0, V9
	026 Move X1, X31
	027 Call Single.Equals, X0, V0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {42}
	032 Add X0, X19, 12
	033 Move V0, V8
	034 Move X30, [X31+32]
	035 Move X19, [X31+40]
	036 Move D9, [X31+16]
	037 Move D8, [X31+24]
	038 Move X1, X31
	039 Move V10, [X31+48]
	040 Call Single.Equals, X0, V0
	041 Return X0
	042 Move X30, [X31+32]
	043 Move X19, [X31+40]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 Move W0, W31
	047 Move V10, [X31+48]
	048 Return X0

Method: System.String ToString()

Disassembly:
	0x03C2C0D8 FMOV S0, W31
	0x03C2C0DC FCSEL S0, S1, S0, PL
	0x03C2C0E0 RET
	0x03C2C0E4 FADD S2, S1, S1

ISIL:
	001 Move X1, X31
	002 Move X2, X31
	003 Move X3, X31
	004 Call 0x2455360
	005 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider formatProvider)

Disassembly:
	0x03C2C0E8 FDIV S3, S0, S2
	0x03C2C0EC FRINTM S3, S3
	0x03C2C0F0 FMUL S3, S2, S3
	0x03C2C0F4 FSUB S0, S0, S3
	0x03C2C0F8 FCMP S0, S2
	0x03C2C0FC FCSEL S2, S2, S0, GT
	0x03C2C100 FCMP S0, 0x0
	0x03C2C104 FMOV S0, W31
	0x03C2C108 FCSEL S0, S2, S0, PL
	0x03C2C10C FABD S0, S0, S0
	0x03C2C110 FSUB S0, S1, S0
	0x03C2C114 RET
	0x03C2C118 MOV V3.16B, V0.16B
	0x03C2C11C FCMP S0, S1
	0x03C2C120 FMOV S0, W31
	0x03C2C124 B.EQ 0x3C2C144
	0x03C2C128 FSUB S2, S2, S3
	0x03C2C12C FSUB S1, S1, S3
	0x03C2C130 FDIV S1, S2, S1
	0x03C2C134 FCMP S1, 0x0
	0x03C2C138 B.MI 0x3C2C144
	0x03C2C13C FMOV S0, 1
	0x03C2C140 FMIN S0, S1, S0
	0x03C2C144 RET
	0x03C2C148 MOVZ W8, 0x43B40000
	0x03C2C14C FSUB S0, S1, S0
	0x03C2C150 FMOV S1, W8
	0x03C2C154 MOVZ W8, 0xC3B40000
	0x03C2C158 FDIV S2, S0, S1
	0x03C2C15C FMOV S3, W8
	0x03C2C160 FRINTM S2, S2
	0x03C2C164 FMUL S2, S2, S3
	0x03C2C168 FADD S0, S0, S2
	0x03C2C16C FMOV S2, W31
	0x03C2C170 MOVZ W8, 0x43340000
	0x03C2C174 FMIN S1, S0, S1
	0x03C2C178 FCMP S0, 0x0
	0x03C2C17C FMOV S0, W8
	0x03C2C180 FCSEL S1, S1, S2, PL
	0x03C2C184 FADD S2, S1, S3
	0x03C2C188 FCMP S1, S0
	0x03C2C18C FCSEL S0, S2, S1, GT
	0x03C2C190 RET
	0x03C2C194 MOVZ X8, 0x7FF00000
	0x03C2C198 FMOV D1, X8
	0x03C2C19C FCMP D0, D1
	0x03C2C1A0 B.NE 0x3C2C1AC
	0x03C2C1A4 MOVZ W8, 0x7F800000
	0x03C2C1A8 B 0x3C2C1F0
	0x03C2C1AC MOVZ X8, 0xFFF00000
	0x03C2C1B0 FMOV D1, X8
	0x03C2C1B4 FCMP D0, D1
	0x03C2C1B8 B.NE 0x3C2C1C4
	0x03C2C1BC MOVZ W8, 0xFF800000
	0x03C2C1C0 B 0x3C2C1F0
	0x03C2C1C4 ADRP X8, 0xFFFFFFFFFCEC1000
	0x03C2C1C8 LDR V1, [X8 + 0xD90]
	0x03C2C1CC FCMP D0, D1
	0x03C2C1D0 B.PL 0x3C2C1DC
	0x03C2C1D4 MOVN W8, 0x800000
	0x03C2C1D8 B 0x3C2C1F0
	0x03C2C1DC ADRP X8, 0xFFFFFFFFFCEC1000
	0x03C2C1E0 LDR V1, [X8 + 0x6A8]
	0x03C2C1E4 FCMP D0, D1
	0x03C2C1E8 B.LE 0x3C2C1F8
	0x03C2C1EC MOVN W8, 0x80800000
	0x03C2C1F0 FMOV S0, W8
	0x03C2C1F4 RET
	0x00000000 INVALID
	0x03C2C1FC RET
	0x03C2C200 ORR X8, X31, 0xFFFFFFFF
	0x03C2C204 CMP X0, X8
	0x03C2C208 B.LT 0x3C2C220
	0x03C2C20C MOVZ W8, 0x80000000
	0x03C2C210 CMP X0, X8
	0x03C2C214 MOVN W8, 0x80000000
	0x03C2C218 CSEL W0, W0, W8, LT
	0x03C2C21C RET
	0x03C2C220 MOVZ W0, 0x80000000
	0x03C2C224 RET
	0x03C2C228 TBNZ X0, 0x0, 0x3C2C23C
	0x03C2C22C MOVZ X8, 0x1
	0x03C2C230 CMP X0, X8
	0x03C2C234 CSINV W0, W0, W31, LT
	0x03C2C238 RET
	0x03C2C23C MOV W0, W31
	0x03C2C240 RET
	0x03C2C244 STR D8, [X31 - 0x20]!
	0x03C2C248 STR X30, [X31 + 0x8]
	0x03C2C24C STP X20, X19, [X31 + 0x10]
	0x03C2C250 ADRP X19, 0x7B9000
	0x03C2C254 ADRP X20, 0x4C7000
	0x03C2C258 LDRB W8, [X19 + 0xFE]
	0x03C2C25C LDR X20, [X20 + 0x5A8]
	0x03C2C260 MOV V8.16B, V0.16B
	0x03C2C264 TBNZ X8, 0x0, 0x3C2C27C
	0x03C2C268 ADRP X0, 0x4C7000
	0x03C2C26C LDR X0, [X0 + 0x5A8]
	0x03C2C270 BL 0x1C16CF4
	0x03C2C274 MOVZ W8, 0x1
	0x03C2C278 STRB W8, [X19 + 0xFE]
	0x03C2C27C LDR X0, [X20]
	0x03C2C280 LDR W8, [X0 + 0xE0]
	0x03C2C284 CBNZ W8, 0x3C2C28C
	0x03C2C288 BL 0x1C16DFC
	0x03C2C28C FABS D0, D8
	0x03C2C290 BL 0x3EB1DB0
	0x03C2C294 FRINTM D0, D0
	0x03C2C298 FNEG D1, D0
	0x03C2C29C FMOV D0, X31
	0x03C2C2A0 MOV X0, X31
	0x03C2C2A4 BL 0x337EDC0
	0x03C2C2A8 MOVZ X8, 0x7FF00000
	0x03C2C2AC LDP X20, X19, [X31 + 0x10]
	0x03C2C2B0 LDR X30, [X31 + 0x8]
	0x03C2C2B4 FMOV D1, X8
	0x03C2C2B8 FCVTZS W9, D0
	0x03C2C2BC FCMP D0, D1
	0x03C2C2C0 MOVZ W8, 0x80000000
	0x03C2C2C4 CSEL W0, W8, W9, EQ
	0x03C2C2C8 LDR V8, [X31], #0x20
	0x03C2C2CC RET
	0x03C2C2D0 STP D9, D8, [X31 - 0x20]!
	0x03C2C2D4 STP X30, X19, [X31 + 0x10]
	0x03C2C2D8 ADRP X19, 0x7B9000
	0x03C2C2DC LDRB W8, [X19 + 0xFF]
	0x03C2C2E0 MOV V9.16B, V1.16B
	0x03C2C2E4 MOV V8.16B, V0.16B
	0x03C2C2E8 TBNZ X8, 0x0, 0x3C2C300
	0x03C2C2EC ADRP X0, 0x4C7000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7BA000
	008 Move X22, 0x4D0000
	009 Move W8, [X23+99]
	010 Move X22, [X22+800]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {32}
	018 Move X0, 0x4CA000
	019 Move X0, [X0+3144]
	020 Call 0x1C17CF4
	021 Move X0, 0x4C8000
	022 Move X0, [X0+2512]
	023 Call 0x1C17CF4
	024 Move X0, 0x4F1000
	025 Move X0, [X0+3384]
	026 Call 0x1C17CF4
	027 Move X0, 0x4D0000
	028 Move X0, [X0+800]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+99], W8
	032 Move X0, X21
	033 Move X1, X31
	034 Call String.IsNullOrEmpty, X0
	035 Move X8, [X22]
	036 And W31, W0, 1
	037 NotImplemented "Instruction CSEL not yet implemented."
	038 Compare X20, 0
	039 JumpIfNotEqual {56}
	040 Move X8, 0x4CA000
	041 Move X8, [X8+3144]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X31
	048 Call CultureInfo.get_InvariantCulture
	049 Compare X0, 0
	050 JumpIfEqual {150}
	051 Move X8, [X0]
	052 Move X9, [X8+536]
	053 Move X1, [X8+544]
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X20, X0
	056 Move X8, 0x4C8000
	057 Move X8, [X8+2512]
	058 Move W1, 4
	059 Move X0, [X8]
	060 Call 0x1C17D6C
	061 Move X22, X0
	062 Move X0, X19
	063 Move X1, X21
	064 Move X2, X20
	065 Move X3, X31
	066 Call Single.ToString, X0, X1, X2
	067 Compare X22, 0
	068 JumpIfEqual {150}
	069 Move X23, X0
	070 Compare X0, 0
	071 JumpIfEqual {78}
	072 Move X8, [X22]
	073 Move X0, X23
	074 Move X1, [X8+64]
	075 Call 0x1C17E00
	076 Compare X0, 0
	077 JumpIfEqual {147}
	078 Move W8, [X22+24]
	079 Compare W8, 0
	080 JumpIfEqual {146}
	081 Add X0, X19, 4
	082 Move X1, X21
	083 Move X2, X20
	084 Move X3, X31
	085 Move [X22+32], X23
	086 Call Single.ToString, X0, X1, X2
	087 Move X23, X0
	088 Compare X0, 0
	089 JumpIfEqual {96}
	090 Move X8, [X22]
	091 Move X0, X23
	092 Move X1, [X8+64]
	093 Call 0x1C17E00
	094 Compare X0, 0
	095 JumpIfEqual {147}
	096 Move W8, [X22+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Add X0, X19, 8
	099 Move X1, X21
	100 Move X2, X20
	101 Move X3, X31
	102 Move [X22+40], X23
	103 Call Single.ToString, X0, X1, X2
	104 Move X23, X0
	105 Compare X0, 0
	106 JumpIfEqual {113}
	107 Move X8, [X22]
	108 Move X0, X23
	109 Move X1, [X8+64]
	110 Call 0x1C17E00
	111 Compare X0, 0
	112 JumpIfEqual {147}
	113 Move W8, [X22+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Add X0, X19, 12
	116 Move X1, X21
	117 Move X2, X20
	118 Move X3, X31
	119 Move [X22+48], X23
	120 Call Single.ToString, X0, X1, X2
	121 Move X19, X0
	122 Compare X0, 0
	123 JumpIfEqual {130}
	124 Move X8, [X22]
	125 Move X0, X19
	126 Move X1, [X8+64]
	127 Call 0x1C17E00
	128 Compare X0, 0
	129 JumpIfEqual {147}
	130 Move W8, [X22+24]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X8, 0x4F1000
	133 Move X8, [X8+3384]
	134 Move [X22+56], X19
	135 Move X1, X22
	136 Move X20, [X31+32]
	137 Move X19, [X31+40]
	138 Move X0, [X8]
	139 Move X22, [X31+16]
	140 Move X21, [X31+24]
	141 Move X2, X31
	142 Move X30, [X31+48]
	143 Move X23, [X31+56]
	144 Call UnityString.Format, X0, X1
	145 Return X0
	146 Call 0x1C17F28
	147 Call 0x1C17F44
	148 Move X1, X31
	149 Call 0x1C17DEC
	150 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03C2C2F0 LDR X0, [X0 + 0x5A8]
	0x03C2C2F4 BL 0x1C16CF4
	0x03C2C2F8 MOVZ W8, 0x1
	0x03C2C2FC STRB W8, [X19 + 0xFF]
	0x03C2C300 FCMP D9, 0x0
	0x03C2C304 B.NE 0x3C2C318
	0x03C2C308 LDP X30, X19, [X31 + 0x10]
	0x03C2C30C MOV V0.16B, V8.16B
	0x03C2C310 LDP D9, D8, [X31], #0x20
	0x03C2C314 B 0x3C2C35C
	0x03C2C318 MOV V0.16B, V9.16B
	0x03C2C31C BL 0x3C2C244
	0x03C2C320 ADRP X8, 0x4C7000
	0x03C2C324 LDR X8, [X8 + 0x5A8]
	0x03C2C328 MOV W19, W0
	0x03C2C32C LDR X8, [X8]
	0x03C2C330 LDR W9, [X8 + 0xE0]
	0x03C2C334 CBNZ W9, 0x3C2C340
	0x03C2C338 MOV X0, X8
	0x03C2C33C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7BA000
	005 Move X20, 0x4C9000
	006 Move W8, [X19+100]
	007 Move X20, [X20+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4C9000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+100], W8
	017 Move X8, [X20]
	018 Move X9, -51638272
	019 Move V0, [X9+187]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move [X8], V0
	024 Move X30, [X31+32]
	025 Return 

Method: System.Void FromToRotation_Injected(ref UnityEngine.Vector3 fromDirection, ref UnityEngine.Vector3 toDirection, out UnityEngine.Quaternion ret)

Disassembly:
	0x03C2B20C MOV X23, X0
	0x03C2B210 CBZ X0, 0x3C2B228
	0x03C2B214 LDR X8, [X22]
	0x03C2B218 MOV X0, X23
	0x03C2B21C LDR X1, [X8 + 0x40]
	0x03C2B220 BL 0x1C16E00
	0x03C2B224 CBZ X0, 0x3C2B2E0
	0x03C2B228 LDR W8, [X22 + 0x18]
	0x03C2B22C CMP W8, 0x1
	0x03C2B230 B.LS 0x3C2B2DC
	0x03C2B234 ADD X0, X19, 0x8
	0x03C2B238 MOV X1, X21
	0x03C2B23C MOV X2, X20
	0x03C2B240 MOV X3, X31
	0x03C2B244 STR X23, [X22 + 0x28]
	0x03C2B248 BL 0x338FFB4
	0x03C2B24C MOV X23, X0
	0x03C2B250 CBZ X0, 0x3C2B268
	0x03C2B254 LDR X8, [X22]
	0x03C2B258 MOV X0, X23
	0x03C2B25C LDR X1, [X8 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7BB000
	007 Move X3, [X22+104]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51564544
	014 Add X0, X0, 1275
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+104], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void Inverse_Injected(ref UnityEngine.Quaternion rotation, out UnityEngine.Quaternion ret)

Disassembly:
	0x03C2B2B4 ADRP X8, 0x4F1000
	0x03C2B2B8 LDR X8, [X8 + 0xD38]
	0x03C2B2BC STR X19, [X22 + 0x38]
	0x03C2B2C0 MOV X1, X22
	0x03C2B2C4 LDP X20, X19, [X31 + 0x20]
	0x03C2B2C8 LDR X0, [X8]
	0x03C2B2CC LDP X22, X21, [X31 + 0x10]
	0x03C2B2D0 MOV X2, X31
	0x03C2B2D4 LDP X30, X23, [X31], #0x30
	0x03C2B2D8 B 0x3C96574
	0x03C2B2DC BL 0x1C16F28
	0x03C2B2E0 BL 0x1C16F44
	0x03C2B2E4 MOV X1, X31
	0x03C2B2E8 BL 0x1C16DEC
	0x03C2B2EC BL 0x1C16F20
	0x03C2B2F0 STR X30, [X31 - 0x20]!
	0x03C2B2F4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7BB000
	006 Move X2, [X21+112]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51421184
	012 Add X0, X0, 2618
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+112], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Slerp_Injected(ref UnityEngine.Quaternion a, ref UnityEngine.Quaternion b, System.Single t, out UnityEngine.Quaternion ret)

Disassembly:
	0x03C2B368 STR X0, [X20 + 0xC0]
	0x03C2B36C MOV W0, W19
	0x03C2B370 LDP X20, X19, [X31 + 0x10]
	0x03C2B374 LDR X30, [X31], #0x20
	0x03C2B378 BR X1
	0x03C2B37C SUB X31, X31, 0x30
	0x03C2B380 STR D8, [X31 + 0x10]
	0x03C2B384 STP X30, X19, [X31 + 0x20]
	0x03C2B388 ADRP X19, 0x7BA000
	0x03C2B38C LDR X8, [X19 + 0x108]
	0x03C2B390 MOV V8.16B, V0.16B
	0x03C2B394 STP X31, X31, [X31]
	0x03C2B398 CBNZ X8, 0x3C2B3B0
	0x03C2B39C ADRP X0, 0xFFFFFFFFFCEC8000
	0x03C2B3A0 ADD X0, X0, 0x186
	0x03C2B3A4 BL 0x1C16CB8
	0x03C2B3A8 MOV X8, X0
	0x03C2B3AC STR X0, [X19 + 0x108]
	0x03C2B3B0 ADD X0, X31, 0x0
	0x03C2B3B4 MOV V0.16B, V8.16B
	0x03C2B3B8 BLR X8
	0x03C2B3BC LDP S0, S1, [X31]
	0x03C2B3C0 LDP S2, S3, [X31 + 0x8]
	0x03C2B3C4 LDP X30, X19, [X31 + 0x20]
	0x03C2B3C8 LDR V8, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7BB000
	008 Move X3, [X22+120]
	009 Move X19, X2
	010 Move V8, V0
	011 Move X20, X1
	012 Move X21, X0
	013 Compare X3, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51478528
	016 Add X0, X0, 3140
	017 Call 0x1C17CB8
	018 Move X3, X0
	019 Move [X22+120], X0
	020 Move X0, X21
	021 Move X1, X20
	022 Move X2, X19
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+8]
	028 Move V0, V8
	029 Move V8, [X31+48]
	030 CallNoReturn X3

Method: System.Void SlerpUnclamped_Injected(ref UnityEngine.Quaternion a, ref UnityEngine.Quaternion b, System.Single t, out UnityEngine.Quaternion ret)

Disassembly:
	0x03C2B43C ADD X0, X0, 0x40D
	0x03C2B440 BL 0x1C16CB8
	0x03C2B444 STR X0, [X19 + 0xD8]
	0x03C2B448 LDP X30, X19, [X31 + 0x10]
	0x03C2B44C MOV V0.16B, V8.16B
	0x03C2B450 LDR V8, [X31], #0x20
	0x03C2B454 BR X0
	0x03C2B458 STP D9, D8, [X31 - 0x20]!
	0x03C2B45C STP X30, X19, [X31 + 0x10]
	0x03C2B460 ADRP X19, 0x7BA000
	0x03C2B464 LDR X0, [X19 + 0xE0]
	0x03C2B468 MOV V8.16B, V1.16B
	0x03C2B46C MOV V9.16B, V0.16B
	0x03C2B470 CBNZ X0, 0x3C2B484
	0x03C2B474 ADRP X0, 0xFFFFFFFFFCEEF000
	0x03C2B478 ADD X0, X0, 0xC6C
	0x03C2B47C BL 0x1C16CB8
	0x03C2B480 STR X0, [X19 + 0xE0]
	0x03C2B484 LDP X30, X19, [X31 + 0x10]
	0x03C2B488 MOV V0.16B, V9.16B
	0x03C2B48C MOV V1.16B, V8.16B
	0x03C2B490 LDP D9, D8, [X31], #0x20
	0x03C2B494 BR X0
	0x03C2B498 STR D8, [X31 - 0x20]!
	0x03C2B49C STR X30, [X31 + 0x8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7BB000
	008 Move X3, [X22+128]
	009 Move X19, X2
	010 Move V8, V0
	011 Move X20, X1
	012 Move X21, X0
	013 Compare X3, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51613696
	016 Add X0, X0, 25
	017 Call 0x1C17CB8
	018 Move X3, X0
	019 Move [X22+128], X0
	020 Move X0, X21
	021 Move X1, X20
	022 Move X2, X19
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+8]
	028 Move V0, V8
	029 Move V8, [X31+48]
	030 CallNoReturn X3

Method: System.Void Lerp_Injected(ref UnityEngine.Quaternion a, ref UnityEngine.Quaternion b, System.Single t, out UnityEngine.Quaternion ret)

Disassembly:
	0x03C2B510 LDRB W8, [X19 + 0xE9]
	0x03C2B514 LDR X20, [X20 + 0x5A8]
	0x03C2B518 MOV V8.16B, V0.16B
	0x03C2B51C TBNZ X8, 0x0, 0x3C2B534
	0x03C2B520 ADRP X0, 0x4C8000
	0x03C2B524 LDR X0, [X0 + 0x5A8]
	0x03C2B528 BL 0x1C16CF4
	0x03C2B52C MOVZ W8, 0x1
	0x03C2B530 STRB W8, [X19 + 0xE9]
	0x03C2B534 LDR X0, [X20]
	0x03C2B538 LDR W8, [X0 + 0xE0]
	0x03C2B53C CBNZ W8, 0x3C2B544
	0x03C2B540 BL 0x1C16DFC
	0x03C2B544 FCVT S0, S8
	0x03C2B548 BL 0x3EB1BF0
	0x03C2B54C LDP X20, X19, [X31 + 0x10]
	0x03C2B550 LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2B558 LDR V8, [X31], #0x20
	0x03C2B55C RET
	0x03C2B560 STR D8, [X31 - 0x20]!
	0x03C2B564 STR X30, [X31 + 0x8]
	0x03C2B568 STP X20, X19, [X31 + 0x10]
	0x03C2B56C ADRP X19, 0x7BA000
	0x03C2B570 ADRP X20, 0x4C8000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x7BB000
	008 Move X3, [X22+136]
	009 Move X19, X2
	010 Move V8, V0
	011 Move X20, X1
	012 Move X21, X0
	013 Compare X3, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51404800
	016 Add X0, X0, 3315
	017 Call 0x1C17CB8
	018 Move X3, X0
	019 Move [X22+136], X0
	020 Move X0, X21
	021 Move X1, X20
	022 Move X2, X19
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X22, [X31+16]
	026 Move X21, [X31+24]
	027 Move X30, [X31+8]
	028 Move V0, V8
	029 Move V8, [X31+48]
	030 CallNoReturn X3

Method: System.Void Internal_FromEulerRad_Injected(ref UnityEngine.Vector3 euler, out UnityEngine.Quaternion ret)

Disassembly:
	0x03C2B5C8 STR X30, [X31 + 0x8]
	0x03C2B5CC STP X20, X19, [X31 + 0x10]
	0x03C2B5D0 ADRP X19, 0x7BA000
	0x03C2B5D4 ADRP X20, 0x4C8000
	0x03C2B5D8 LDRB W8, [X19 + 0xEB]
	0x03C2B5DC LDR X20, [X20 + 0x5A8]
	0x03C2B5E0 MOV V8.16B, V0.16B
	0x03C2B5E4 TBNZ X8, 0x0, 0x3C2B5FC
	0x03C2B5E8 ADRP X0, 0x4C8000
	0x03C2B5EC LDR X0, [X0 + 0x5A8]
	0x03C2B5F0 BL 0x1C16CF4
	0x03C2B5F4 MOVZ W8, 0x1
	0x03C2B5F8 STRB W8, [X19 + 0xEB]
	0x03C2B5FC LDR X0, [X20]
	0x03C2B600 LDR W8, [X0 + 0xE0]
	0x03C2B604 CBNZ W8, 0x3C2B60C
	0x03C2B608 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7BB000
	006 Move X2, [X21+144]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51396608
	012 Add X0, X0, 3456
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+144], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Internal_ToEulerRad_Injected(ref UnityEngine.Quaternion rotation, out UnityEngine.Vector3 ret)

Disassembly:
	0x03C2B664 LDR W8, [X0 + 0xE0]
	0x03C2B668 CBNZ W8, 0x3C2B670
	0x03C2B66C BL 0x1C16DFC
	0x03C2B670 FCVT S0, S8
	0x03C2B674 BL 0x3EB1B80
	0x03C2B678 LDP X20, X19, [X31 + 0x10]
	0x03C2B67C LDR X30, [X31 + 0x8]
	0x00000000 INVALID
	0x03C2B684 LDR V8, [X31], #0x20
	0x03C2B688 RET
	0x03C2B68C STR D8, [X31 - 0x20]!
	0x03C2B690 STR X30, [X31 + 0x8]
	0x03C2B694 STP X20, X19, [X31 + 0x10]
	0x03C2B698 ADRP X19, 0x7BA000
	0x03C2B69C ADRP X20, 0x4C8000
	0x03C2B6A0 LDRB W8, [X19 + 0xED]
	0x03C2B6A4 LDR X20, [X20 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7BB000
	006 Move X2, [X21+152]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51478528
	012 Add X0, X0, 3266
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+152], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Internal_ToAxisAngleRad_Injected(ref UnityEngine.Quaternion q, out UnityEngine.Vector3 axis, out System.Single angle)

Disassembly:
	0x03C2B704 LDRB W8, [X19 + 0xEE]
	0x03C2B708 LDR X20, [X20 + 0x5A8]
	0x03C2B70C MOV V8.16B, V1.16B
	0x03C2B710 MOV V9.16B, V0.16B
	0x03C2B714 TBNZ X8, 0x0, 0x3C2B72C
	0x03C2B718 ADRP X0, 0x4C8000
	0x03C2B71C LDR X0, [X0 + 0x5A8]
	0x03C2B720 BL 0x1C16CF4
	0x03C2B724 MOVZ W8, 0x1
	0x03C2B728 STRB W8, [X19 + 0xEE]
	0x03C2B72C LDR X0, [X20]
	0x03C2B730 LDR W8, [X0 + 0xE0]
	0x03C2B734 CBNZ W8, 0x3C2B73C
	0x03C2B738 BL 0x1C16DFC
	0x03C2B73C FCVT S0, S9
	0x03C2B740 FCVT S1, S8
	0x03C2B744 BL 0x3EB1D80
	0x03C2B748 LDP X20, X19, [X31 + 0x20]
	0x03C2B74C LDR X30, [X31 + 0x10]
	0x00000000 INVALID
	0x03C2B754 LDP D9, D8, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7BB000
	007 Move X3, [X22+160]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51429376
	014 Add X0, X0, 3155
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+160], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void AngleAxis_Injected(System.Single angle, ref UnityEngine.Vector3 axis, out UnityEngine.Quaternion ret)

Disassembly:
	0x03C2B7BC STR X30, [X31 + 0x8]
	0x03C2B7C0 STP X20, X19, [X31 + 0x10]
	0x03C2B7C4 ADRP X19, 0x7BA000
	0x03C2B7C8 ADRP X20, 0x4C8000
	0x03C2B7CC LDRB W8, [X19 + 0xF0]
	0x03C2B7D0 LDR X20, [X20 + 0x5A8]
	0x03C2B7D4 MOV V8.16B, V0.16B
	0x03C2B7D8 TBNZ X8, 0x0, 0x3C2B7F0
	0x03C2B7DC ADRP X0, 0x4C8000
	0x03C2B7E0 LDR X0, [X0 + 0x5A8]
	0x03C2B7E4 BL 0x1C16CF4
	0x03C2B7E8 MOVZ W8, 0x1
	0x03C2B7EC STRB W8, [X19 + 0xF0]
	0x03C2B7F0 LDR X0, [X20]
	0x03C2B7F4 LDR W8, [X0 + 0xE0]
	0x03C2B7F8 CBNZ W8, 0x3C2B800
	0x03C2B7FC BL 0x1C16DFC
	0x03C2B800 LDP X20, X19, [X31 + 0x10]
	0x03C2B804 LDR X30, [X31 + 0x8]
	0x03C2B808 FABS S0, S8
	0x03C2B80C LDR V8, [X31], #0x20

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7BB000
	007 Move X2, [X21+168]
	008 Move X19, X1
	009 Move X20, X0
	010 Move V8, V0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51515392
	014 Add X0, X0, 674
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+168], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.Void LookRotation_Injected(ref UnityEngine.Vector3 forward, ref UnityEngine.Vector3 upwards, out UnityEngine.Quaternion ret)

Disassembly:
	0x03C2B870 FCSEL S0, S0, S1, MI
	0x03C2B874 RET
	0x03C2B878 CMP W0, W1
	0x03C2B87C CSEL W0, W0, W1, LT
	0x03C2B880 RET
	0x03C2B884 FCMP S0, S1
	0x03C2B888 FCSEL S0, S0, S1, GT
	0x03C2B88C RET
	0x03C2B890 STR X30, [X31 - 0x10]!
	0x03C2B894 CBZ X0, 0x3C2B8DC
	0x03C2B898 LDR X8, [X0 + 0x18]
	0x03C2B89C CBZ W8, 0x3C2B8D0
	0x03C2B8A0 LDR V0, [X0 + 0x20]
	0x03C2B8A4 CMP W8, 0x2
	0x03C2B8A8 B.LT 0x3C2B8D4
	0x03C2B8AC AND X9, X8, 0x0
	0x03C2B8B0 ADD X8, X0, 0x24
	0x03C2B8B4 SUB X9, X9, 0x1
	0x03C2B8B8 LDR V1, [X8], #0x4
	0x03C2B8BC FCMP S1, S0
	0x03C2B8C0 FCSEL S0, S1, S0, GT

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7BB000
	007 Move X3, [X22+176]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51433472
	014 Add X0, X0, 210
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+176], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

