Type: UnityEngine.RectInt

Method: System.Int32 get_x()

Disassembly:
	0x03C0CB6C CBNZ X2, 0x3C0CB84
	0x03C0CB70 ADRP X0, 0xFFFFFFFFFCEE2000

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Void set_x(System.Int32 value)

Disassembly:
	0x03C0CB74 ADD X0, X0, 0xC68
	0x03C0CB78 BL 0x1C16CB8

ISIL:
	001 Move [X0], W1
	002 Return 

Method: System.Int32 get_y()

Disassembly:
	0x03C0CB7C MOV X2, X0
	0x03C0CB80 STR X0, [X21 + 0x288]

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Void set_y(System.Int32 value)

Disassembly:
	0x03C0CB84 MOV X0, X20
	0x03C0CB88 MOV X1, X19

ISIL:
	001 Move [X0+4], W1
	002 Return 

Method: System.Int32 get_width()

Disassembly:
	0x03C0CB8C LDP X20, X19, [X31 + 0x10]
	0x03C0CB90 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.Void set_width(System.Int32 value)

Disassembly:
	0x03C0CB94 BR X2
	0x03C0CB98 SUB X31, X31, 0x30

ISIL:
	001 Move [X0+8], W1
	002 Return 

Method: System.Int32 get_height()

Disassembly:
	0x03C0CB9C STR D8, [X31 + 0x10]
	0x03C0CBA0 STP X30, X19, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: System.Void set_height(System.Int32 value)

Disassembly:
	0x03C0CBA4 ADRP X19, 0x7D8000
	0x03C0CBA8 LDR X8, [X19 + 0x290]

ISIL:
	001 Move [X0+12], W1
	002 Return 

Method: System.Int32 get_xMin()

Disassembly:
	0x03C0CBAC MOV V8.16B, V3.16B
	0x03C0CBB0 STP S0, S1, [X31]
	0x03C0CBB4 STR S2, [X31 + 0x8]
	0x03C0CBB8 CBNZ X8, 0x3C0CBD0
	0x03C0CBBC ADRP X0, 0xFFFFFFFFFCF02000
	0x03C0CBC0 ADD X0, X0, 0xE7A
	0x03C0CBC4 BL 0x1C16CB8
	0x03C0CBC8 MOV X8, X0
	0x03C0CBCC STR X0, [X19 + 0x290]
	0x03C0CBD0 ADD X0, X31, 0x0
	0x03C0CBD4 MOV V0.16B, V8.16B
	0x03C0CBD8 BLR X8
	0x03C0CBDC LDP X30, X19, [X31 + 0x20]
	0x03C0CBE0 LDR V8, [X31 + 0x10]
	0x03C0CBE4 ADD X31, X31, 0x30
	0x03C0CBE8 RET
	0x03C0CBEC STR D8, [X31 - 0x20]!
	0x03C0CBF0 STR X30, [X31 + 0x8]
	0x03C0CBF4 STP X20, X19, [X31 + 0x10]
	0x03C0CBF8 ADRP X20, 0x7D8000
	0x03C0CBFC LDR X1, [X20 + 0x290]
	0x03C0CC00 MOV V8.16B, V0.16B
	0x03C0CC04 MOV X19, X0
	0x03C0CC08 CBNZ X1, 0x3C0CC20
	0x03C0CC0C ADRP X0, 0xFFFFFFFFFCF02000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D9000
	006 Move X20, 0x4E8000
	007 Move W8, [X21+532]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4E8000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+532], W8
	019 Move X0, [X20]
	020 Move W20, [X19]
	021 Move W19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add W1, W19, W20
	027 Move W0, W20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Math.Min, X0, X1
	034 Return X0

Method: System.Int32 get_yMin()

Disassembly:
	0x03C0CC10 ADD X0, X0, 0xE7A
	0x03C0CC14 BL 0x1C16CB8
	0x03C0CC18 MOV X1, X0
	0x03C0CC1C STR X0, [X20 + 0x290]
	0x03C0CC20 MOV X0, X19
	0x03C0CC24 LDP X20, X19, [X31 + 0x10]
	0x03C0CC28 LDR X30, [X31 + 0x8]
	0x03C0CC2C MOV V0.16B, V8.16B
	0x03C0CC30 LDR V8, [X31], #0x20
	0x03C0CC34 BR X1
	0x03C0CC38 SUB X31, X31, 0x30
	0x03C0CC3C STR D8, [X31 + 0x10]
	0x03C0CC40 STP X30, X19, [X31 + 0x20]
	0x03C0CC44 ADRP X19, 0x7D8000
	0x03C0CC48 LDR X8, [X19 + 0x298]
	0x03C0CC4C MOV V8.16B, V3.16B
	0x03C0CC50 STP S0, S1, [X31]
	0x03C0CC54 STR S2, [X31 + 0x8]
	0x03C0CC58 CBNZ X8, 0x3C0CC70
	0x03C0CC5C ADRP X0, 0xFFFFFFFFFCF12000
	0x03C0CC60 ADD X0, X0, 0x814
	0x03C0CC64 BL 0x1C16CB8
	0x03C0CC68 MOV X8, X0
	0x03C0CC6C STR X0, [X19 + 0x298]
	0x03C0CC70 ADD X0, X31, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D9000
	006 Move X20, 0x4E8000
	007 Move W8, [X21+533]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4E8000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+533], W8
	019 Move X0, [X20]
	020 Move W20, [X19+4]
	021 Move W19, [X19+12]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add W1, W19, W20
	027 Move W0, W20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Math.Min, X0, X1
	034 Return X0

Method: System.Int32 get_xMax()

Disassembly:
	0x03C0CC74 MOV V0.16B, V8.16B
	0x03C0CC78 BLR X8
	0x03C0CC7C LDP X30, X19, [X31 + 0x20]
	0x03C0CC80 LDR V8, [X31 + 0x10]
	0x03C0CC84 ADD X31, X31, 0x30
	0x03C0CC88 RET
	0x03C0CC8C STR D8, [X31 - 0x20]!
	0x03C0CC90 STR X30, [X31 + 0x8]
	0x03C0CC94 STP X20, X19, [X31 + 0x10]
	0x03C0CC98 ADRP X20, 0x7D8000
	0x03C0CC9C LDR X1, [X20 + 0x298]
	0x03C0CCA0 MOV V8.16B, V0.16B
	0x03C0CCA4 MOV X19, X0
	0x03C0CCA8 CBNZ X1, 0x3C0CCC0
	0x03C0CCAC ADRP X0, 0xFFFFFFFFFCF12000
	0x03C0CCB0 ADD X0, X0, 0x814
	0x03C0CCB4 BL 0x1C16CB8
	0x03C0CCB8 MOV X1, X0
	0x03C0CCBC STR X0, [X20 + 0x298]
	0x03C0CCC0 MOV X0, X19
	0x03C0CCC4 LDP X20, X19, [X31 + 0x10]
	0x03C0CCC8 LDR X30, [X31 + 0x8]
	0x03C0CCCC MOV V0.16B, V8.16B
	0x03C0CCD0 LDR V8, [X31], #0x20
	0x03C0CCD4 BR X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D9000
	006 Move X20, 0x4E8000
	007 Move W8, [X21+534]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4E8000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+534], W8
	019 Move X0, [X20]
	020 Move W20, [X19]
	021 Move W19, [X19+8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add W1, W19, W20
	027 Move W0, W20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Math.Max, X0, X1
	034 Return X0

Method: System.Int32 get_yMax()

Disassembly:
	0x03C0CCD8 SUB X31, X31, 0x30
	0x03C0CCDC STP X30, X19, [X31 + 0x20]
	0x03C0CCE0 ADRP X19, 0x7D8000
	0x03C0CCE4 LDR X8, [X19 + 0x2A0]
	0x03C0CCE8 STP S0, S1, [X31 + 0x10]
	0x03C0CCEC STR S2, [X31 + 0x18]
	0x03C0CCF0 STP S3, S4, [X31]
	0x03C0CCF4 STR S5, [X31 + 0x8]
	0x03C0CCF8 CBNZ X8, 0x3C0CD10
	0x03C0CCFC ADRP X0, 0xFFFFFFFFFCF14000
	0x03C0CD00 ADD X0, X0, 0x823
	0x03C0CD04 BL 0x1C16CB8
	0x03C0CD08 MOV X8, X0
	0x03C0CD0C STR X0, [X19 + 0x2A0]
	0x03C0CD10 ADD X0, X31, 0x10
	0x03C0CD14 ADD X1, X31, 0x0
	0x03C0CD18 BLR X8
	0x03C0CD1C LDP X30, X19, [X31 + 0x20]
	0x03C0CD20 ADD X31, X31, 0x30
	0x03C0CD24 RET
	0x03C0CD28 STP X30, X21, [X31 - 0x20]!
	0x03C0CD2C STP X20, X19, [X31 + 0x10]
	0x03C0CD30 ADRP X21, 0x7D8000
	0x03C0CD34 LDR X2, [X21 + 0x2A0]
	0x03C0CD38 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D9000
	006 Move X20, 0x4E8000
	007 Move W8, [X21+535]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4E8000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+535], W8
	019 Move X0, [X20]
	020 Move W20, [X19+4]
	021 Move W19, [X19+12]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add W1, W19, W20
	027 Move W0, W20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X2, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Math.Max, X0, X1
	034 Return X0

Method: System.Void .ctor(System.Int32 xMin, System.Int32 yMin, System.Int32 width, System.Int32 height)

Disassembly:
	0x03C0CD3C MOV X20, X0
	0x03C0CD40 CBNZ X2, 0x3C0CD58
	0x03C0CD44 ADRP X0, 0xFFFFFFFFFCF14000

ISIL:
	001 Move [X0], W1
	002 Move [X0+4], W2
	003 Move [X0+8], W3
	004 Move [X0+12], W4
	005 Return 

Method: System.Boolean Overlaps(UnityEngine.RectInt other)

Disassembly:
	0x03C0CD48 ADD X0, X0, 0x823
	0x03C0CD4C BL 0x1C16CB8
	0x03C0CD50 MOV X2, X0
	0x03C0CD54 STR X0, [X21 + 0x2A0]
	0x03C0CD58 MOV X0, X20
	0x03C0CD5C MOV X1, X19
	0x03C0CD60 LDP X20, X19, [X31 + 0x10]
	0x03C0CD64 LDP X30, X21, [X31], #0x20
	0x03C0CD68 BR X2
	0x03C0CD6C SUB X31, X31, 0x30
	0x03C0CD70 STP X30, X19, [X31 + 0x20]
	0x03C0CD74 ADRP X19, 0x7D8000
	0x03C0CD78 LDR X8, [X19 + 0x2A8]
	0x03C0CD7C STP S0, S1, [X31 + 0x10]
	0x03C0CD80 STR S2, [X31 + 0x18]
	0x03C0CD84 STP S3, S4, [X31]
	0x03C0CD88 STR S5, [X31 + 0x8]
	0x03C0CD8C CBNZ X8, 0x3C0CDA4
	0x03C0CD90 ADRP X0, 0xFFFFFFFFFCF1A000
	0x03C0CD94 ADD X0, X0, 0xAFF
	0x03C0CD98 BL 0x1C16CB8
	0x03C0CD9C MOV X8, X0
	0x03C0CDA0 STR X0, [X19 + 0x2A8]
	0x03C0CDA4 ADD X0, X31, 0x10
	0x03C0CDA8 ADD X1, X31, 0x0
	0x03C0CDAC BLR X8
	0x03C0CDB0 LDP X30, X19, [X31 + 0x20]
	0x03C0CDB4 ADD X31, X31, 0x30
	0x03C0CDB8 RET
	0x03C0CDBC STP X30, X21, [X31 - 0x20]!
	0x03C0CDC0 STP X20, X19, [X31 + 0x10]
	0x03C0CDC4 ADRP X21, 0x7D8000
	0x03C0CDC8 LDR X2, [X21 + 0x2A8]
	0x03C0CDCC MOV X19, X1
	0x03C0CDD0 MOV X20, X0
	0x03C0CDD4 CBNZ X2, 0x3C0CDEC
	0x03C0CDD8 ADRP X0, 0xFFFFFFFFFCF1A000
	0x03C0CDDC ADD X0, X0, 0xAFF
	0x03C0CDE0 BL 0x1C16CB8
	0x03C0CDE4 MOV X2, X0
	0x03C0CDE8 STR X0, [X21 + 0x2A8]
	0x03C0CDEC MOV X0, X20
	0x03C0CDF0 MOV X1, X19
	0x03C0CDF4 LDP X20, X19, [X31 + 0x10]
	0x03C0CDF8 LDP X30, X21, [X31], #0x20
	0x03C0CDFC BR X2
	0x03C0CE00 SUB X31, X31, 0x50
	0x03C0CE04 STP X30, X21, [X31 + 0x30]
	0x03C0CE08 STP X20, X19, [X31 + 0x40]
	0x03C0CE0C LDR X8, [X31 + 0x50]
	0x03C0CE10 ADRP X21, 0x7D8000
	0x03C0CE14 LDR V7, [X31 + 0x58]
	0x03C0CE18 MOV W19, W1
	0x03C0CE1C STR X8, [X31]
	0x03C0CE20 LDR X8, [X21 + 0x2B0]
	0x03C0CE24 MOV X20, X0
	0x03C0CE28 STP S0, S1, [X31 + 0x20]
	0x03C0CE2C STR S2, [X31 + 0x28]
	0x03C0CE30 STP S3, S4, [X31 + 0x10]
	0x03C0CE34 STP S5, S6, [X31 + 0x18]
	0x03C0CE38 STR S7, [X31 + 0x8]
	0x03C0CE3C CBNZ X8, 0x3C0CE54
	0x03C0CE40 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C0CE44 ADD X0, X0, 0x564
	0x03C0CE48 BL 0x1C16CB8
	0x03C0CE4C MOV X8, X0
	0x03C0CE50 STR X0, [X21 + 0x2B0]
	0x03C0CE54 ADD X2, X31, 0x20
	0x03C0CE58 ADD X3, X31, 0x10
	0x03C0CE5C ADD X4, X31, 0x0
	0x03C0CE60 MOV X0, X20
	0x03C0CE64 MOV W1, W19
	0x03C0CE68 BLR X8
	0x03C0CE6C LDP X20, X19, [X31 + 0x40]
	0x03C0CE70 LDP X30, X21, [X31 + 0x30]
	0x03C0CE74 ADD X31, X31, 0x50
	0x03C0CE78 RET
	0x03C0CE7C STR X30, [X31 - 0x40]!
	0x03C0CE80 STP X24, X23, [X31 + 0x10]
	0x03C0CE84 STP X22, X21, [X31 + 0x20]
	0x03C0CE88 STP X20, X19, [X31 + 0x30]
	0x03C0CE8C ADRP X24, 0x7D8000
	0x03C0CE90 LDR X5, [X24 + 0x2B0]
	0x03C0CE94 MOV X19, X4
	0x03C0CE98 MOV X20, X3
	0x03C0CE9C MOV X21, X2
	0x03C0CEA0 MOV W22, W1
	0x03C0CEA4 MOV X23, X0
	0x03C0CEA8 CBNZ X5, 0x3C0CEC0
	0x03C0CEAC ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C0CEB0 ADD X0, X0, 0x564
	0x03C0CEB4 BL 0x1C16CB8
	0x03C0CEB8 MOV X5, X0
	0x03C0CEBC STR X0, [X24 + 0x2B0]
	0x03C0CEC0 MOV X0, X23
	0x03C0CEC4 MOV W1, W22
	0x03C0CEC8 MOV X2, X21
	0x03C0CECC MOV X3, X20
	0x03C0CED0 MOV X4, X19
	0x03C0CED4 LDP X20, X19, [X31 + 0x30]
	0x03C0CED8 LDP X22, X21, [X31 + 0x20]
	0x03C0CEDC LDP X24, X23, [X31 + 0x10]
	0x03C0CEE0 LDR X30, [X31], #0x40
	0x03C0CEE4 BR X5
	0x03C0CEE8 SUB X31, X31, 0x40
	0x03C0CEEC STP X30, X21, [X31 + 0x20]
	0x03C0CEF0 STP X20, X19, [X31 + 0x30]
	0x03C0CEF4 ADRP X21, 0x7D8000
	0x03C0CEF8 LDR X8, [X21 + 0x2B8]
	0x03C0CEFC MOV W20, W1
	0x03C0CF00 MOV X19, X0
	0x03C0CF04 STP S0, S1, [X31 + 0x10]
	0x03C0CF08 STR S2, [X31 + 0x18]
	0x03C0CF0C STP S3, S4, [X31]
	0x03C0CF10 STP S5, S6, [X31 + 0x8]
	0x03C0CF14 CBNZ X8, 0x3C0CF2C
	0x03C0CF18 ADRP X0, 0xFFFFFFFFFCF12000
	0x03C0CF1C ADD X0, X0, 0x860
	0x03C0CF20 BL 0x1C16CB8
	0x03C0CF24 MOV X8, X0
	0x03C0CF28 STR X0, [X21 + 0x2B8]
	0x03C0CF2C AND W2, W20, 0x1
	0x03C0CF30 ADD X0, X31, 0x10
	0x03C0CF34 ADD X3, X31, 0x0
	0x03C0CF38 MOV X1, X19
	0x03C0CF3C BLR X8
	0x03C0CF40 LDP X20, X19, [X31 + 0x30]
	0x03C0CF44 LDP X30, X21, [X31 + 0x20]
	0x03C0CF48 ADD X31, X31, 0x40
	0x03C0CF4C RET
	0x03C0CF50 STP X30, X23, [X31 - 0x30]!
	0x03C0CF54 STP X22, X21, [X31 + 0x10]
	0x03C0CF58 STP X20, X19, [X31 + 0x20]
	0x03C0CF5C ADRP X23, 0x7D8000
	0x03C0CF60 LDR X4, [X23 + 0x2B8]
	0x03C0CF64 MOV X19, X3
	0x03C0CF68 MOV W21, W2
	0x03C0CF6C MOV X20, X1
	0x03C0CF70 MOV X22, X0
	0x03C0CF74 CBNZ X4, 0x3C0CF8C
	0x03C0CF78 ADRP X0, 0xFFFFFFFFFCF12000
	0x03C0CF7C ADD X0, X0, 0x860
	0x03C0CF80 BL 0x1C16CB8
	0x03C0CF84 MOV X4, X0
	0x03C0CF88 STR X0, [X23 + 0x2B8]
	0x03C0CF8C AND W2, W21, 0x1
	0x03C0CF90 MOV X0, X22
	0x03C0CF94 MOV X1, X20
	0x03C0CF98 MOV X3, X19
	0x03C0CF9C LDP X20, X19, [X31 + 0x20]
	0x03C0CFA0 LDP X22, X21, [X31 + 0x10]
	0x03C0CFA4 LDP X30, X23, [X31], #0x30
	0x03C0CFA8 BR X4
	0x03C0CFAC SUB X31, X31, 0x20
	0x03C0CFB0 STP X30, X19, [X31 + 0x10]
	0x03C0CFB4 ADRP X19, 0x7D8000
	0x03C0CFB8 LDR X8, [X19 + 0x2C0]
	0x03C0CFBC STP X31, X31, [X31]
	0x03C0CFC0 CBNZ X8, 0x3C0CFD8
	0x03C0CFC4 ADRP X0, 0xFFFFFFFFFCF00000
	0x03C0CFC8 ADD X0, X0, 0xD52
	0x03C0CFCC BL 0x1C16CB8
	0x03C0CFD0 MOV X8, X0
	0x03C0CFD4 STR X0, [X19 + 0x2C0]
	0x03C0CFD8 ADD X0, X31, 0x0
	0x03C0CFDC BLR X8
	0x03C0CFE0 LDP S0, S1, [X31]
	0x03C0CFE4 LDP S2, S3, [X31 + 0x8]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X26, 0x7D9000
	013 Move W8, [X26+3467]
	014 Move X20, X2
	015 Move X21, X1
	016 Move X19, X0
	017 Compare W8, 0
	018 JumpIfNotEqual {24}
	019 Move X0, 0x4E8000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X26+3467], W8
	024 Move X25, 0x4E8000
	025 Move X25, [X25+1448]
	026 Move X0, [X25]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add W22, W20, W21
	032 Move W0, W21
	033 Move W1, W22
	034 Move X2, X31
	035 Call Math.Min, X0, X1
	036 Move X27, 0x7D9000
	037 Move W8, [X27+3469]
	038 Move W23, W0
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x4E8000
	042 Move X0, [X0+1448]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X27+3469], W8
	046 Move X0, [X25]
	047 Move W24, [X19]
	048 Move W28, [X19+8]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Add W1, W28, W24
	054 Move W0, W24
	055 Move X2, X31
	056 Call Math.Max, X0, X1
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move W8, [X27+3469]
	059 Compare W8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, 0x4E8000
	062 Move X0, [X0+1448]
	063 Call 0x1C17CF4
	064 Move W8, 1
	065 Move [X27+3469], W8
	066 Move X0, [X25]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move W0, W21
	072 Move W1, W22
	073 Move X2, X31
	074 Call Math.Max, X0, X1
	075 Move W8, [X26+3467]
	076 Move W22, W0
	077 Compare W8, 0
	078 JumpIfNotEqual {84}
	079 Move X0, 0x4E8000
	080 Move X0, [X0+1448]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X26+3467], W8
	084 Move X0, [X25]
	085 Move W23, [X19]
	086 Move W24, [X19+8]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {91}
	090 Call 0x1C17DFC
	091 Add W1, W24, W23
	092 Move W0, W23
	093 Move X2, X31
	094 Call Math.Min, X0, X1
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move X24, 0x7D9000
	097 Move W8, [X24+3468]
	098 Move X21, X21
	099 ShiftRight X21, 32
	100 And X21, X21, 0x7FFFFFFF
	101 Move X20, X20
	102 ShiftRight X20, 32
	103 And X20, X20, 0x7FFFFFFF
	104 Compare W8, 0
	105 JumpIfNotEqual {111}
	106 Move X0, 0x4E8000
	107 Move X0, [X0+1448]
	108 Call 0x1C17CF4
	109 Move W8, 1
	110 Move [X24+3468], W8
	111 Move X0, [X25]
	112 Move W8, [X0+224]
	113 Compare W8, 0
	114 JumpIfNotEqual {116}
	115 Call 0x1C17DFC
	116 Add W20, W20, W21
	117 Move W0, W21
	118 Move W1, W20
	119 Move X2, X31
	120 Call Math.Min, X0, X1
	121 Move X26, 0x7D9000
	122 Move W8, [X26+3470]
	123 Move W22, W0
	124 Compare W8, 0
	125 JumpIfNotEqual {131}
	126 Move X0, 0x4E8000
	127 Move X0, [X0+1448]
	128 Call 0x1C17CF4
	129 Move W8, 1
	130 Move [X26+3470], W8
	131 Move X0, [X25]
	132 Move W23, [X19+4]
	133 Move W27, [X19+12]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Add W1, W27, W23
	139 Move W0, W23
	140 Move X2, X31
	141 Call Math.Max, X0, X1
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move W8, [X26+3470]
	144 Compare W8, 0
	145 JumpIfNotEqual {151}
	146 Move X0, 0x4E8000
	147 Move X0, [X0+1448]
	148 Call 0x1C17CF4
	149 Move W8, 1
	150 Move [X26+3470], W8
	151 Move X0, [X25]
	152 Move W8, [X0+224]
	153 Compare W8, 0
	154 JumpIfNotEqual {156}
	155 Call 0x1C17DFC
	156 Move W0, W21
	157 Move W1, W20
	158 Move X2, X31
	159 Call Math.Max, X0, X1
	160 Move W8, [X24+3468]
	161 Move W20, W0
	162 Compare W8, 0
	163 JumpIfNotEqual {169}
	164 Move X0, 0x4E8000
	165 Move X0, [X0+1448]
	166 Call 0x1C17CF4
	167 Move W8, 1
	168 Move [X24+3468], W8
	169 Move X0, [X25]
	170 Move W21, [X19+4]
	171 Move W19, [X19+12]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {176}
	175 Call 0x1C17DFC
	176 Add W1, W19, W21
	177 Move W0, W21
	178 Move X2, X31
	179 Call Math.Min, X0, X1
	180 NotImplemented "Instruction CMP not yet implemented."
	181 NotImplemented "Instruction CSET not yet implemented."
	182 Move W0, W31
	183 Move X20, [X31+80]
	184 Move X19, [X31+88]
	185 Move X22, [X31+64]
	186 Move X21, [X31+72]
	187 Move X24, [X31+48]
	188 Move X23, [X31+56]
	189 Move X26, [X31+32]
	190 Move X25, [X31+40]
	191 Move X28, [X31+16]
	192 Move X27, [X31+24]
	193 Move X30, [X31+96]
	194 Return X0

Method: System.String ToString()

Disassembly:
	0x03C0CFE8 LDP X30, X19, [X31 + 0x10]
	0x03C0CFEC ADD X31, X31, 0x20
	0x03C0CFF0 RET
	0x03C0CFF4 STR X30, [X31 - 0x20]!

ISIL:
	001 Move X1, X31
	002 Move X2, X31
	003 Move X3, X31
	004 Call 0x3C1F5F4
	005 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider formatProvider)

Disassembly:
	0x03C0CFF8 STP X20, X19, [X31 + 0x10]
	0x03C0CFFC ADRP X20, 0x7D8000
	0x03C0D000 LDR X1, [X20 + 0x2C0]
	0x03C0D004 MOV X19, X0
	0x03C0D008 CBNZ X1, 0x3C0D020
	0x03C0D00C ADRP X0, 0xFFFFFFFFFCEFF000
	0x03C0D010 ADD X0, X0, 0xD52
	0x03C0D014 BL 0x1C16CB8
	0x03C0D018 MOV X1, X0
	0x03C0D01C STR X0, [X20 + 0x2C0]
	0x03C0D020 MOV X0, X19
	0x03C0D024 LDP X20, X19, [X31 + 0x10]
	0x03C0D028 LDR X30, [X31], #0x20
	0x03C0D02C BR X1
	0x03C0D030 SUB X31, X31, 0x20
	0x03C0D034 STP X30, X19, [X31 + 0x10]
	0x03C0D038 ADRP X19, 0x7D7000
	0x03C0D03C LDR X8, [X19 + 0x2C8]
	0x03C0D040 STP S0, S1, [X31]
	0x03C0D044 STP S2, S3, [X31 + 0x8]
	0x03C0D048 CBNZ X8, 0x3C0D060
	0x03C0D04C ADRP X0, 0xFFFFFFFFFCEE1000
	0x03C0D050 ADD X0, X0, 0xCB9
	0x03C0D054 BL 0x1C16CB8
	0x03C0D058 MOV X8, X0
	0x03C0D05C STR X0, [X19 + 0x2C8]
	0x03C0D060 ADD X0, X31, 0x0
	0x03C0D064 BLR X8
	0x03C0D068 LDP X30, X19, [X31 + 0x10]
	0x03C0D06C ADD X31, X31, 0x20
	0x03C0D070 RET
	0x03C0D074 STR X30, [X31 - 0x20]!
	0x03C0D078 STP X20, X19, [X31 + 0x10]
	0x03C0D07C ADRP X20, 0x7D7000
	0x03C0D080 LDR X1, [X20 + 0x2C8]
	0x03C0D084 MOV X19, X0
	0x03C0D088 CBNZ X1, 0x3C0D0A0
	0x03C0D08C ADRP X0, 0xFFFFFFFFFCEE1000
	0x03C0D090 ADD X0, X0, 0xCB9
	0x03C0D094 BL 0x1C16CB8
	0x03C0D098 MOV X1, X0
	0x03C0D09C STR X0, [X20 + 0x2C8]
	0x03C0D0A0 MOV X0, X19
	0x03C0D0A4 LDP X20, X19, [X31 + 0x10]
	0x03C0D0A8 LDR X30, [X31], #0x20
	0x03C0D0AC BR X1
	0x03C0D0B0 SUB X31, X31, 0x60
	0x03C0D0B4 STR X30, [X31 + 0x40]
	0x03C0D0B8 STP X20, X19, [X31 + 0x50]
	0x03C0D0BC ADRP X20, 0x7D7000
	0x03C0D0C0 MOV X19, X8
	0x03C0D0C4 LDR X8, [X20 + 0x2D0]
	0x03C0D0C8 MOVI V0.2D, 0x0
	0x03C0D0CC STP V0, V0, [X31 + 0x20]
	0x03C0D0D0 STP V0, V0, [X31]
	0x03C0D0D4 CBNZ X8, 0x3C0D0EC
	0x03C0D0D8 ADRP X0, 0xFFFFFFFFFCEF0000
	0x03C0D0DC ADD X0, X0, 0x174
	0x03C0D0E0 BL 0x1C16CB8
	0x03C0D0E4 MOV X8, X0
	0x03C0D0E8 STR X0, [X20 + 0x2D0]
	0x03C0D0EC ADD X0, X31, 0x0
	0x03C0D0F0 BLR X8
	0x03C0D0F4 LDP V1, V0, [X31 + 0x20]
	0x03C0D0F8 LDP V3, V2, [X31]
	0x03C0D0FC LDR X30, [X31 + 0x40]
	0x03C0D100 STP V1, V0, [X19 + 0x20]
	0x03C0D104 STP V3, V2, [X19]
	0x03C0D108 LDP X20, X19, [X31 + 0x50]
	0x03C0D10C ADD X31, X31, 0x60
	0x03C0D110 RET
	0x03C0D114 STR X30, [X31 - 0x20]!
	0x03C0D118 STP X20, X19, [X31 + 0x10]
	0x03C0D11C ADRP X20, 0x7D7000
	0x03C0D120 LDR X1, [X20 + 0x2D0]
	0x03C0D124 MOV X19, X0
	0x03C0D128 CBNZ X1, 0x3C0D140
	0x03C0D12C ADRP X0, 0xFFFFFFFFFCEF0000
	0x03C0D130 ADD X0, X0, 0x174
	0x03C0D134 BL 0x1C16CB8
	0x03C0D138 MOV X1, X0
	0x03C0D13C STR X0, [X20 + 0x2D0]
	0x03C0D140 MOV X0, X19
	0x03C0D144 LDP X20, X19, [X31 + 0x10]
	0x03C0D148 LDR X30, [X31], #0x20
	0x03C0D14C BR X1
	0x03C0D150 STR X30, [X31 - 0x20]!
	0x03C0D154 STP X20, X19, [X31 + 0x10]
	0x03C0D158 ADRP X20, 0x7D7000
	0x03C0D15C LDR X1, [X20 + 0x2D8]
	0x03C0D160 MOV X19, X0
	0x03C0D164 CBNZ X1, 0x3C0D17C
	0x03C0D168 ADRP X0, 0xFFFFFFFFFCEF3000
	0x03C0D16C ADD X0, X0, 0xD28
	0x03C0D170 BL 0x1C16CB8
	0x03C0D174 MOV X1, X0
	0x03C0D178 STR X0, [X20 + 0x2D8]
	0x03C0D17C MOV X0, X19
	0x03C0D180 LDP X20, X19, [X31 + 0x10]
	0x03C0D184 LDR X30, [X31], #0x20
	0x03C0D188 BR X1
	0x03C0D18C STR X30, [X31 - 0x20]!
	0x03C0D190 STP X20, X19, [X31 + 0x10]
	0x03C0D194 ADRP X20, 0x7D7000
	0x03C0D198 LDR X1, [X20 + 0x2D8]
	0x03C0D19C MOV X19, X0
	0x03C0D1A0 CBNZ X1, 0x3C0D1B8
	0x03C0D1A4 ADRP X0, 0xFFFFFFFFFCEF3000
	0x03C0D1A8 ADD X0, X0, 0xD28
	0x03C0D1AC BL 0x1C16CB8
	0x03C0D1B0 MOV X1, X0
	0x03C0D1B4 STR X0, [X20 + 0x2D8]
	0x03C0D1B8 MOV X0, X19
	0x03C0D1BC LDP X20, X19, [X31 + 0x10]
	0x03C0D1C0 LDR X30, [X31], #0x20
	0x03C0D1C4 BR X1
	0x03C0D1C8 FADD S3, S0, S3
	0x03C0D1CC FADD S4, S1, S4
	0x03C0D1D0 FADD S5, S2, S5
	0x03C0D1D4 B 0x3C0CB04
	0x03C0D1D8 SUB X31, X31, 0x60
	0x03C0D1DC STR D14, [X31 + 0x10]
	0x03C0D1E0 STP D13, D12, [X31 + 0x18]
	0x03C0D1E4 STP D11, D10, [X31 + 0x28]
	0x03C0D1E8 STP D9, D8, [X31 + 0x38]
	0x03C0D1EC STR X30, [X31 + 0x48]
	0x03C0D1F0 STP X20, X19, [X31 + 0x50]
	0x03C0D1F4 ADRP X20, 0x7CB000
	0x03C0D1F8 LDRB W8, [X20 + 0x85B]
	0x03C0D1FC MOV V8.16B, V6.16B

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x7D8000
	009 Move W8, [X22+536]
	010 Move X21, X2
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x4E9000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move X0, 0x4E7000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0x552000
	024 Move X0, [X0+3248]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+536], W8
	028 Compare X21, 0
	029 JumpIfNotEqual {46}
	030 Move X8, 0x4E9000
	031 Move X8, [X8+3144]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X31
	038 Call CultureInfo.get_InvariantCulture
	039 Compare X0, 0
	040 JumpIfEqual {149}
	041 Move X8, [X0]
	042 Move X9, [X8+536]
	043 Move X1, [X8+544]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X21, X0
	046 Move X8, 0x4E7000
	047 Move X8, [X8+2512]
	048 Move W1, 4
	049 Move X0, [X8]
	050 Call 0x1C17D6C
	051 Move W8, [X20]
	052 Move X22, X0
	053 Add X0, X31, 12
	054 Move X1, X19
	055 Move X2, X21
	056 Move X3, X31
	057 Move [X31+12], W8
	058 Call Int32.ToString, X0, X1, X2
	059 Compare X22, 0
	060 JumpIfEqual {149}
	061 Move X23, X0
	062 Compare X0, 0
	063 JumpIfEqual {70}
	064 Move X8, [X22]
	065 Move X0, X23
	066 Move X1, [X8+64]
	067 Call 0x1C17E00
	068 Compare X0, 0
	069 JumpIfEqual {146}
	070 Move W8, [X22+24]
	071 Compare W8, 0
	072 JumpIfEqual {145}
	073 Move [X22+32], X23
	074 Move W8, [X20+4]
	075 Add X0, X31, 12
	076 Move X1, X19
	077 Move X2, X21
	078 Move X3, X31
	079 Move [X31+12], W8
	080 Call Int32.ToString, X0, X1, X2
	081 Move X23, X0
	082 Compare X0, 0
	083 JumpIfEqual {90}
	084 Move X8, [X22]
	085 Move X0, X23
	086 Move X1, [X8+64]
	087 Call 0x1C17E00
	088 Compare X0, 0
	089 JumpIfEqual {146}
	090 Move W8, [X22+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move [X22+40], X23
	093 Move W8, [X20+8]
	094 Add X0, X31, 12
	095 Move X1, X19
	096 Move X2, X21
	097 Move X3, X31
	098 Move [X31+12], W8
	099 Call Int32.ToString, X0, X1, X2
	100 Move X23, X0
	101 Compare X0, 0
	102 JumpIfEqual {109}
	103 Move X8, [X22]
	104 Move X0, X23
	105 Move X1, [X8+64]
	106 Call 0x1C17E00
	107 Compare X0, 0
	108 JumpIfEqual {146}
	109 Move W8, [X22+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move [X22+48], X23
	112 Move W8, [X20+12]
	113 Add X0, X31, 12
	114 Move X1, X19
	115 Move X2, X21
	116 Move X3, X31
	117 Move [X31+12], W8
	118 Call Int32.ToString, X0, X1, X2
	119 Move X19, X0
	120 Compare X0, 0
	121 JumpIfEqual {128}
	122 Move X8, [X22]
	123 Move X0, X19
	124 Move X1, [X8+64]
	125 Call 0x1C17E00
	126 Compare X0, 0
	127 JumpIfEqual {146}
	128 Move W8, [X22+24]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X8, 0x552000
	131 Move X8, [X8+3248]
	132 Move [X22+56], X19
	133 Move X1, X22
	134 Move X2, X31
	135 Move X0, [X8]
	136 Call UnityString.Format, X0, X1
	137 Move X20, [X31+48]
	138 Move X19, [X31+56]
	139 Move X22, [X31+32]
	140 Move X21, [X31+40]
	141 Move X30, [X31+16]
	142 Move X23, [X31+24]
	143 Add X31, X31, 64
	144 Return X0
	145 Call 0x1C17F28
	146 Call 0x1C17F44
	147 Move X1, X31
	148 Call 0x1C17DEC
	149 Call 0x1C17F20

Method: System.Boolean Equals(UnityEngine.RectInt other)

Disassembly:
	0x03C0D200 MOV V9.16B, V5.16B
	0x03C0D204 MOV V10.16B, V4.16B
	0x03C0D208 MOV V11.16B, V3.16B
	0x03C0D20C MOV V12.16B, V2.16B
	0x03C0D210 MOV V13.16B, V1.16B
	0x03C0D214 MOV V14.16B, V0.16B
	0x03C0D218 MOV X19, X0
	0x03C0D21C CBNZ W8, 0x3C0D234
	0x03C0D220 ADRP X0, 0x4E6000
	0x03C0D224 LDR X0, [X0 + 0x5A0]
	0x03C0D228 BL 0x1C16CF4
	0x03C0D22C MOVZ W8, 0x1
	0x03C0D230 STRB W8, [X20 + 0x85B]
	0x03C0D234 ADRP X8, 0x4E6000
	0x03C0D238 LDR X8, [X8 + 0x5A0]
	0x03C0D23C MOVN W1, 0x0
	0x03C0D240 MOV X0, X19

ISIL:
	001 Move W8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+4]
	004 Move X9, X1
	005 ShiftRight X9, 32
	006 And X9, X9, 0x7FFFFFFF
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W8, [X0+8]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W8, [X0+12]
	011 Move X9, X2
	012 ShiftRight X9, 32
	013 And X9, X9, 0x7FFFFFFF
	014 NotImplemented "Instruction CMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Return X0
	017 Move W0, W31
	018 Return X0

