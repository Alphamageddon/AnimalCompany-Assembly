Type: UnityEngine.TouchScreenKeyboard

Method: System.Void Internal_Destroy(System.IntPtr ptr)

Disassembly:
	0x03C3D8DC BL 0x32277A8
	0x03C3D8E0 TBNZ X0, 0x0, 0x3C3D934
	0x03C3D8E4 LDR X0, [X22]
	0x03C3D8E8 LDR W8, [X0 + 0xE0]
	0x03C3D8EC CBNZ W8, 0x3C3D8F4
	0x03C3D8F0 BL 0x1C16DFC
	0x03C3D8F4 ADD X1, X31, 0x10
	0x03C3D8F8 ADD X2, X31, 0x8
	0x03C3D8FC MOV X0, X20
	0x03C3D900 BL 0x3C3D7CC
	0x03C3D904 TBZ X0, 0x0, 0x3C3D934
	0x03C3D908 LDP X8, X0, [X31 + 0x10]
	0x03C3D90C STR X8, [X19]
	0x03C3D910 CBZ X0, 0x3C3D950
	0x03C3D914 ADRP X8, 0x522000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+2072]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51445760
	010 Add X0, X0, 2545
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2072], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Destroy()

Disassembly:
	0x03C3D918 LDR X8, [X8 + 0x7D0]
	0x03C3D91C MOVZ W3, 0x1
	0x03C3D920 MOV X1, X19
	0x03C3D924 MOV W2, W31
	0x03C3D928 LDR X4, [X8]
	0x03C3D92C BL 0x22B4958
	0x03C3D930 B 0x3C3D938
	0x03C3D934 MOV W0, W31
	0x03C3D938 LDP X20, X19, [X31 + 0x40]
	0x03C3D93C LDP X22, X21, [X31 + 0x30]
	0x03C3D940 LDP X30, X23, [X31 + 0x20]
	0x03C3D944 AND W0, W0, 0x1
	0x03C3D948 ADD X31, X31, 0x50
	0x03C3D94C RET
	0x03C3D950 BL 0x1C16F20
	0x03C3D954 SUB X31, X31, 0x40
	0x03C3D958 STP X30, X23, [X31 + 0x10]
	0x03C3D95C STP X22, X21, [X31 + 0x20]
	0x03C3D960 STP X20, X19, [X31 + 0x30]
	0x03C3D964 ADRP X23, 0x7A8000
	0x03C3D968 ADRP X22, 0x522000
	0x03C3D96C LDRB W8, [X23 + 0x8AF]
	0x03C3D970 LDR X22, [X22 + 0x7A8]
	0x03C3D974 MOV X19, X2
	0x03C3D978 MOV X20, X1
	0x03C3D97C MOV X21, X0
	0x03C3D980 TBNZ X8, 0x0, 0x3C3D998
	0x03C3D984 ADRP X0, 0x522000
	0x03C3D988 LDR X0, [X0 + 0x7A8]
	0x03C3D98C BL 0x1C16CF4
	0x03C3D990 MOVZ W8, 0x1
	0x03C3D994 STRB W8, [X23 + 0x8AF]
	0x03C3D998 LDR X0, [X22]
	0x03C3D99C STR X31, [X31 + 0x8]
	0x03C3D9A0 LDR W8, [X0 + 0xE0]
	0x03C3D9A4 CBNZ W8, 0x3C3D9AC
	0x03C3D9A8 BL 0x1C16DFC
	0x03C3D9AC ADD X2, X31, 0x8
	0x03C3D9B0 MOV X0, X21
	0x03C3D9B4 MOV X1, X20
	0x03C3D9B8 BL 0x3C3D6C8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7A9000
	007 Move W8, [X20+2080]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x4BE000
	014 Move X0, [X0+3088]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+2080], W8
	018 Move X0, [X19+16]
	019 Move X21, 0x4BE000
	020 Move X21, [X21+3088]
	021 Move X1, X31
	022 Move X2, X31
	023 Call IntPtr.op_Inequality, X0, X1
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {41}
	028 Move X22, 0x7A9000
	029 Move X8, [X22+2072]
	030 Move X20, [X19+16]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -51445760
	034 Add X0, X0, 2545
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X22+2072], X0
	038 Move X0, X20
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move [X19+16], X31
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X1, X31
	052 Move X30, [X31+48]
	053 Call GC.SuppressFinalize, X0
	054 Return 

Method: System.Void Finalize()

Disassembly:
	0x03C3D9BC LDR X8, [X31 + 0x8]
	0x03C3D9C0 MOV W20, W0
	0x03C3D9C4 MOV X1, X31
	0x03C3D9C8 MOV X0, X8
	0x03C3D9CC BL 0x3C2C200
	0x03C3D9D0 AND W8, W20, 0x1
	0x03C3D9D4 STR W0, [X19]
	0x03C3D9D8 LDP X20, X19, [X31 + 0x30]
	0x03C3D9DC LDP X22, X21, [X31 + 0x20]
	0x03C3D9E0 LDP X30, X23, [X31 + 0x10]
	0x03C3D9E4 MOV W0, W8
	0x03C3D9E8 ADD X31, X31, 0x40
	0x03C3D9EC RET
	0x03C3D9F0 SUB X31, X31, 0x40
	0x03C3D9F4 STP X30, X23, [X31 + 0x10]
	0x03C3D9F8 STP X22, X21, [X31 + 0x20]
	0x03C3D9FC STP X20, X19, [X31 + 0x30]
	0x03C3DA00 ADRP X23, 0x7A8000
	0x03C3DA04 ADRP X22, 0x522000
	0x03C3DA08 LDRB W8, [X23 + 0x8B0]
	0x03C3DA0C LDR X22, [X22 + 0x7A8]
	0x03C3DA10 MOV X19, X2
	0x03C3DA14 MOV X20, X1
	0x03C3DA18 MOV X21, X0
	0x03C3DA1C TBNZ X8, 0x0, 0x3C3DA34
	0x03C3DA20 ADRP X0, 0x522000
	0x03C3DA24 LDR X0, [X0 + 0x7A8]
	0x03C3DA28 BL 0x1C16CF4
	0x03C3DA2C MOVZ W8, 0x1
	0x03C3DA30 STRB W8, [X23 + 0x8B0]
	0x03C3DA34 LDR X0, [X22]
	0x03C3DA38 STR X31, [X31 + 0x8]
	0x03C3DA3C LDR W8, [X0 + 0xE0]
	0x03C3DA40 CBNZ W8, 0x3C3DA48
	0x03C3DA44 BL 0x1C16DFC
	0x03C3DA48 ADD X2, X31, 0x8
	0x03C3DA4C MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call TouchScreenKeyboard.Destroy, X0
	007 Move X0, X19
	008 Move X20, [X31+16]
	009 Move X19, [X31+24]
	010 Move X1, X31
	011 Move X30, [X31+32]
	012 Move X21, [X31+40]
	013 Call Object.Finalize, X0
	014 Return 
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X21, X0
	017 Move X0, X21
	018 Call 0x3EB2AD0
	019 Move X20, [X0]
	020 Call 0x3EB2AE0
	021 Move X0, X19
	022 Move X1, X31
	023 Call Object.Finalize, X0
	024 Compare X20, 0
	025 JumpIfNotEqual {32}
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return 
	031 Move X20, X31
	032 Move X0, X20
	033 Call 0x1C17F18
	034 Move X21, X0
	035 Move X0, X19
	036 Move X1, X31
	037 Call Object.Finalize, X0
	038 Compare X20, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X21
	041 Call 0x1D2D690
	042 Move X0, X20
	043 Call 0x1C17F18
	044 Call 0x1991590

Method: System.Void .ctor(System.String text, UnityEngine.TouchScreenKeyboardType keyboardType, System.Boolean autocorrection, System.Boolean multiline, System.Boolean secure, System.Boolean alert, System.String textPlaceholder, System.Int32 characterLimit)

Disassembly:
	0x03C3DA50 MOV X1, X20
	0x03C3DA54 BL 0x3C3D6C8
	0x03C3DA58 LDR X8, [X31 + 0x8]
	0x03C3DA5C MOV W20, W0
	0x03C3DA60 MOV X1, X31
	0x03C3DA64 MOV X0, X8
	0x03C3DA68 BL 0x3C2C228
	0x03C3DA6C AND W8, W20, 0x1
	0x03C3DA70 STR W0, [X19]
	0x03C3DA74 LDP X20, X19, [X31 + 0x30]
	0x03C3DA78 LDP X22, X21, [X31 + 0x20]
	0x03C3DA7C LDP X30, X23, [X31 + 0x10]
	0x03C3DA80 MOV W0, W8
	0x03C3DA84 ADD X31, X31, 0x40
	0x03C3DA88 RET
	0x03C3DA8C STP X30, X25, [X31 - 0x40]!
	0x03C3DA90 STP X24, X23, [X31 + 0x10]
	0x03C3DA94 STP X22, X21, [X31 + 0x20]
	0x03C3DA98 STP X20, X19, [X31 + 0x30]
	0x03C3DA9C ADRP X25, 0x7A8000
	0x03C3DAA0 ADRP X24, 0x522000
	0x03C3DAA4 ADRP X23, 0x522000
	0x03C3DAA8 ADRP X22, 0x522000
	0x03C3DAAC ADRP X21, 0x4EB000
	0x03C3DAB0 ADRP X20, 0x522000
	0x03C3DAB4 ADRP X19, 0x522000
	0x03C3DAB8 LDR X24, [X24 + 0x7D8]
	0x03C3DABC LDRB W8, [X25 + 0x8B1]
	0x03C3DAC0 LDR X23, [X23 + 0x7A8]
	0x03C3DAC4 LDR X22, [X22 + 0x7E0]
	0x03C3DAC8 LDR X21, [X21 + 0x9F0]
	0x03C3DACC LDR X20, [X20 + 0x7E8]
	0x03C3DAD0 LDR X19, [X19 + 0x7F0]
	0x03C3DAD4 TBNZ X8, 0x0, 0x3C3DB28
	0x03C3DAD8 ADRP X0, 0x522000
	0x03C3DADC LDR X0, [X0 + 0x7A8]
	0x03C3DAE0 BL 0x1C16CF4
	0x03C3DAE4 ADRP X0, 0x522000
	0x03C3DAE8 LDR X0, [X0 + 0x7D8]
	0x03C3DAEC BL 0x1C16CF4
	0x03C3DAF0 ADRP X0, 0x4EB000
	0x03C3DAF4 LDR X0, [X0 + 0x9F0]
	0x03C3DAF8 BL 0x1C16CF4
	0x03C3DAFC ADRP X0, 0x522000
	0x03C3DB00 LDR X0, [X0 + 0x7F0]
	0x03C3DB04 BL 0x1C16CF4
	0x03C3DB08 ADRP X0, 0x522000
	0x03C3DB0C LDR X0, [X0 + 0x7E8]
	0x03C3DB10 BL 0x1C16CF4
	0x03C3DB14 ADRP X0, 0x522000
	0x03C3DB18 LDR X0, [X0 + 0x7E0]
	0x03C3DB1C BL 0x1C16CF4
	0x03C3DB20 MOVZ W8, 0x1
	0x03C3DB24 STRB W8, [X25 + 0x8B1]
	0x03C3DB28 LDR X8, [X23]
	0x03C3DB2C LDR X9, [X24]
	0x03C3DB30 LDR X8, [X8 + 0xB8]
	0x03C3DB34 STR X9, [X8]
	0x03C3DB38 LDR X8, [X23]
	0x03C3DB3C LDR X10, [X22]
	0x03C3DB40 LDR X9, [X21]
	0x03C3DB44 LDP X22, X21, [X31 + 0x20]
	0x03C3DB48 LDR X8, [X8 + 0xB8]
	0x03C3DB4C LDP X24, X23, [X31 + 0x10]
	0x03C3DB50 STP X10, X9, [X8 + 0x8]
	0x03C3DB54 LDR X10, [X20]
	0x03C3DB58 LDR X9, [X19]
	0x03C3DB5C LDP X20, X19, [X31 + 0x30]
	0x03C3DB60 STP X10, X9, [X8 + 0x18]
	0x03C3DB64 LDP X30, X25, [X31], #0x40
	0x03C3DB68 RET
	0x03C3DB6C STP S0, S1, [X0]
	0x03C3DB70 STP S2, S3, [X0 + 0x8]
	0x03C3DB74 STP S4, S5, [X0 + 0x10]
	0x03C3DB78 STR S6, [X0 + 0x18]
	0x03C3DB7C RET
	0x03C3DB80 STP X30, X21, [X31 - 0x20]!
	0x03C3DB84 STP X20, X19, [X31 + 0x10]
	0x03C3DB88 ADRP X19, 0x7A8000
	0x03C3DB8C ADRP X21, 0x4B6000
	0x03C3DB90 LDRB W8, [X19 + 0x8B2]
	0x03C3DB94 LDR X21, [X21 + 0x9D0]
	0x03C3DB98 MOV X20, X0
	0x03C3DB9C TBNZ X8, 0x0, 0x3C3DBC0
	0x03C3DBA0 ADRP X0, 0x4B6000
	0x03C3DBA4 LDR X0, [X0 + 0x9D0]
	0x03C3DBA8 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X27, 0x7A9000
	015 Move X29, 0x523000
	016 Move X28, 0x4C0000
	017 Move W8, [X27+2081]
	018 Move X29, [X29+1880]
	019 Move X28, [X28+2536]
	020 Move X19, X7
	021 Move W22, W6
	022 Move W23, W5
	023 Move W24, W4
	024 Move W25, W3
	025 Move W26, W2
	026 Move X21, X1
	027 Move X20, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {40}
	032 Move X0, 0x4C0000
	033 Move X0, [X0+2536]
	034 Call 0x1C17CF4
	035 Move X0, 0x523000
	036 Move X0, [X0+1880]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X27+2081], W8
	040 Move W27, [X31+128]
	041 Move X0, X20
	042 Move X1, X31
	043 Call Object..ctor, X0
	044 Move X0, [X29]
	045 Add X1, X31, 4
	046 Move [X31+8], X31
	047 Move [X31+16], X31
	048 Move [X31+24], X31
	049 Move [X31+4], W26
	050 Call 0x1C17E04
	051 Move X8, [X28]
	052 Move X26, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X26
	059 Move X1, X31
	060 Call Convert.ToUInt32, X0
	061 Move [X31+8], W0
	062 And W0, W25, 1
	063 Move X1, X31
	064 Call Convert.ToUInt32, X0
	065 Move [X31+12], W0
	066 And W0, W24, 1
	067 Move X1, X31
	068 Call Convert.ToUInt32, X0
	069 Move [X31+16], W0
	070 And W0, W23, 1
	071 Move X1, X31
	072 Call Convert.ToUInt32, X0
	073 Move [X31+20], W0
	074 And W0, W22, 1
	075 Move X1, X31
	076 Call Convert.ToUInt32, X0
	077 Move X22, 0x7A9000
	078 Move X8, [X22+2088]
	079 Move [X31+24], W0
	080 Move [X31+28], W27
	081 Compare X8, 0
	082 JumpIfNotEqual {88}
	083 Move X0, -51478528
	084 Add X0, X0, 3815
	085 Call 0x1C17CB8
	086 Move X8, X0
	087 Move [X22+2088], X0
	088 Add X0, X31, 8
	089 Move X1, X21
	090 Move X2, X19
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Move [X20+16], X0
	093 Move X20, [X31+112]
	094 Move X19, [X31+120]
	095 Move X22, [X31+96]
	096 Move X21, [X31+104]
	097 Move X24, [X31+80]
	098 Move X23, [X31+88]
	099 Move X26, [X31+64]
	100 Move X25, [X31+72]
	101 Move X28, [X31+48]
	102 Move X27, [X31+56]
	103 Move X29, [X31+32]
	104 Move X30, [X31+40]
	105 Add X31, X31, 128
	106 Return 

Method: System.IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref UnityEngine.TouchScreenKeyboard_InternalConstructorHelperArguments arguments, System.String text, System.String textPlaceholder)

Disassembly:
	0x03C3DBAC ADRP X0, 0x4C3000
	0x03C3DBB0 LDR X0, [X0 + 0x198]
	0x03C3DBB4 BL 0x1C16CF4
	0x03C3DBB8 MOVZ W8, 0x1
	0x03C3DBBC STRB W8, [X19 + 0x8B2]
	0x03C3DBC0 LDR X0, [X21]
	0x03C3DBC4 MOVZ W1, 0x2
	0x03C3DBC8 BL 0x1C16D6C
	0x03C3DBCC MOV X19, X0
	0x03C3DBD0 MOV X0, X20
	0x03C3DBD4 MOV X1, X31
	0x03C3DBD8 MOV X2, X31
	0x03C3DBDC MOV X3, X31
	0x03C3DBE0 BL 0x2430694
	0x03C3DBE4 CBZ X19, 0x3C3DC80
	0x03C3DBE8 MOV X21, X0
	0x03C3DBEC CBZ X0, 0x3C3DC04
	0x03C3DBF0 LDR X8, [X19]
	0x03C3DBF4 MOV X0, X21
	0x03C3DBF8 LDR X1, [X8 + 0x40]
	0x03C3DBFC BL 0x1C16E00

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A9000
	007 Move X3, [X22+2088]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51478528
	014 Add X0, X0, 3815
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2088], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean get_isSupported()

Disassembly:
	0x03C3DC00 CBZ X0, 0x3C3DC74
	0x03C3DC04 LDR W8, [X19 + 0x18]
	0x03C3DC08 CBZ W8, 0x3C3DC70
	0x03C3DC0C ADD X0, X20, 0xC
	0x03C3DC10 MOV X1, X31
	0x03C3DC14 MOV X2, X31
	0x03C3DC18 MOV X3, X31
	0x03C3DC1C STR X21, [X19 + 0x20]
	0x03C3DC20 BL 0x2454360
	0x03C3DC24 MOV X20, X0
	0x03C3DC28 CBZ X0, 0x3C3DC40
	0x03C3DC2C LDR X8, [X19]
	0x03C3DC30 MOV X0, X20
	0x03C3DC34 LDR X1, [X8 + 0x40]
	0x03C3DC38 BL 0x1C16E00
	0x03C3DC3C CBZ X0, 0x3C3DC74
	0x03C3DC40 LDR W8, [X19 + 0x18]
	0x03C3DC44 CMP W8, 0x1
	0x03C3DC48 B.LS 0x3C3DC70
	0x03C3DC4C ADRP X8, 0x4C3000
	0x03C3DC50 LDR X8, [X8 + 0x198]
	0x03C3DC54 STR X20, [X19 + 0x28]
	0x03C3DC58 MOV X1, X19
	0x03C3DC5C LDP X20, X19, [X31 + 0x10]
	0x03C3DC60 LDR X0, [X8]
	0x03C3DC64 MOV X2, X31
	0x03C3DC68 LDP X30, X21, [X31], #0x20
	0x03C3DC6C B 0x3C96574
	0x03C3DC70 BL 0x1C16F28
	0x03C3DC74 BL 0x1C16F44
	0x03C3DC78 MOV X1, X31
	0x03C3DC7C BL 0x1C16DEC
	0x03C3DC80 BL 0x1C16F20
	0x03C3DC84 STP D9, D8, [X31 - 0x30]!
	0x03C3DC88 STP X30, X21, [X31 + 0x10]
	0x03C3DC8C STP X20, X19, [X31 + 0x20]
	0x03C3DC90 LDP S9, S0, [X1 + 0x8]
	0x03C3DC94 LDP S1, S2, [X1 + 0x10]
	0x03C3DC98 LDR V3, [X1 + 0x18]
	0x03C3DC9C LDP S4, S5, [X0]
	0x03C3DCA0 LDR V6, [X0 + 0x8]
	0x03C3DCA4 LDR V8, [X1]
	0x03C3DCA8 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7A9000
	005 Move X20, 0x4B7000
	006 Move W8, [X19+2096]
	007 Move X20, [X20+2416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4B7000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2096], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X0, X31
	023 Call Application.get_platform
	024 Move W8, W0
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Subtract W8, W8, 25
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W9, 0x3AC1
	029 NotImplemented "Instruction MOVK not yet implemented."
	030 NotImplemented "Instruction LSRV not yet implemented."
	031 And W0, W8, 1
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W0, 1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Subtract W8, W8, 17
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W0, W31
	038 Move W0, 1
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0

Method: System.Boolean get_disableInPlaceEditing()

Disassembly:
	0x03C3DCAC MOV X0, X31
	0x03C3DCB0 MOV X20, X1
	0x03C3DCB4 MOV X19, X8
	0x03C3DCB8 BL 0x3C2A9FC
	0x03C3DCBC LDP S3, S4, [X20 + 0xC]
	0x03C3DCC0 LDP S5, S6, [X20 + 0x14]
	0x03C3DCC4 LDP S7, S16, [X21 + 0xC]
	0x03C3DCC8 LDP S17, S18, [X21 + 0x14]
	0x03C3DCCC FADD S2, S9, S2
	0x03C3DCD0 MOV V0.S[1], V1.S[0]
	0x03C3DCD4 FADD V0.2S, V8.2S, V0.2S
	0x03C3DCD8 STR D0, [X19]
	0x03C3DCDC FMUL S0, S6, S7
	0x03C3DCE0 FMUL S1, S3, S18
	0x03C3DCE4 FMUL S19, S4, S17
	0x03C3DCE8 FMUL S20, S5, S16
	0x03C3DCEC FMUL S21, S6, S16
	0x03C3DCF0 FMUL S22, S4, S18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7A9000
	005 Move X20, 0x523000
	006 Move W8, [X19+2097]
	007 Move X20, [X20+1888]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x523000
	013 Move X0, [X0+1888]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2097], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move W0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Boolean get_isInPlaceEditingAllowed()

Disassembly:
	0x03C3DCF4 FMUL S23, S5, S7
	0x03C3DCF8 FMUL S24, S3, S17
	0x03C3DCFC FMUL S25, S3, S16
	0x03C3DD00 FMUL S3, S3, S7
	0x03C3DD04 FMUL S7, S4, S7
	0x03C3DD08 FMUL S4, S4, S16
	0x03C3DD0C FMUL S16, S6, S17
	0x03C3DD10 FMUL S6, S6, S18
	0x03C3DD14 FMUL S18, S5, S18
	0x03C3DD18 FADD S0, S0, S1
	0x03C3DD1C FADD S1, S21, S22
	0x03C3DD20 FADD S16, S16, S18
	0x03C3DD24 FSUB S3, S6, S3
	0x03C3DD28 FMUL S5, S5, S17
	0x03C3DD2C FADD S0, S19, S0
	0x03C3DD30 FADD S1, S23, S1
	0x03C3DD34 FADD S6, S25, S16
	0x03C3DD38 FSUB S3, S3, S4
	0x03C3DD3C FSUB S0, S0, S20
	0x03C3DD40 FSUB S1, S1, S24
	0x03C3DD44 FSUB S4, S6, S7
	0x03C3DD48 FSUB S3, S3, S5
	0x03C3DD4C STP S2, S0, [X19 + 0x8]
	0x03C3DD50 STP S1, S4, [X19 + 0x10]
	0x03C3DD54 STR S3, [X19 + 0x18]
	0x03C3DD58 LDP X20, X19, [X31 + 0x20]
	0x03C3DD5C LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move W8, [X19+3401]
	005 Compare W8, 0
	006 JumpIfNotEqual {12}
	007 Move X0, 0x523000
	008 Move X0, [X0+1888]
	009 Call 0x1C17CF4
	010 Move W8, 1
	011 Move [X19+3401], W8
	012 Move X8, 0x523000
	013 Move X8, [X8+1888]
	014 Move X8, [X8]
	015 Move X8, [X8+184]
	016 Move W8, [X8]
	017 Compare W8, 0
	018 JumpIfEqual {23}
	019 Move W0, W31
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return X0
	023 Move X19, 0x7A9000
	024 Move X0, [X19+2104]
	025 Compare X0, 0
	026 JumpIfNotEqual {31}
	027 Move X0, -51621888
	028 Add X0, X0, 374
	029 Call 0x1C17CB8
	030 Move [X19+2104], X0
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 CallNoReturn X0

Method: System.Boolean IsInPlaceEditingAllowed()

Disassembly:
	0x03C3DD60 LDP D9, D8, [X31], #0x30
	0x03C3DD64 RET
	0x03C3DD68 STR D10, [X31 - 0x40]!
	0x03C3DD6C STP D9, D8, [X31 + 0x10]
	0x03C3DD70 STP X30, X21, [X31 + 0x20]
	0x03C3DD74 STP X20, X19, [X31 + 0x30]
	0x03C3DD78 CBZ X1, 0x3C3DE48
	0x03C3DD7C LDP S1, S2, [X0 + 0x4]
	0x03C3DD80 LDR V0, [X0]
	0x03C3DD84 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+2104]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51621888
	008 Add X0, X0, 374
	009 Call 0x1C17CB8
	010 Move [X19+2104], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_isRequiredToForceOpen()

Disassembly:
	0x03C3DD88 MOV X0, X1
	0x03C3DD8C MOV X21, X1
	0x03C3DD90 MOV X19, X8
	0x03C3DD94 BL 0x3C3DE4C
	0x03C3DD98 MOV X0, X21
	0x03C3DD9C MOV V8.16B, V0.16B
	0x03C3DDA0 MOV V9.16B, V1.16B
	0x03C3DDA4 MOV V10.16B, V2.16B
	0x03C3DDA8 BL 0x3C3DEB4
	0x03C3DDAC LDP S4, S5, [X20 + 0xC]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+2112]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51679232
	008 Add X0, X0, 1176
	009 Call 0x1C17CB8
	010 Move [X19+2112], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean IsRequiredToForceOpen()

Disassembly:
	0x03C3DDB0 LDP S6, S7, [X20 + 0x14]
	0x03C3DDB4 STP S8, S9, [X19]
	0x03C3DDB8 LDP X30, X21, [X31 + 0x20]
	0x03C3DDBC FMUL S16, S3, S4
	0x03C3DDC0 FMUL S17, S0, S7
	0x03C3DDC4 FMUL S18, S1, S6
	0x03C3DDC8 FMUL S19, S2, S5
	0x03C3DDCC FMUL S20, S3, S5
	0x03C3DDD0 FMUL S21, S1, S7
	0x03C3DDD4 FMUL S22, S2, S4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7A9000
	004 Move X0, [X19+2112]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51679232
	008 Add X0, X0, 1176
	009 Call 0x1C17CB8
	010 Move [X19+2112], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.TouchScreenKeyboard Open(System.String text, UnityEngine.TouchScreenKeyboardType keyboardType, System.Boolean autocorrection, System.Boolean multiline, System.Boolean secure, System.Boolean alert, System.String textPlaceholder, System.Int32 characterLimit)

Disassembly:
	0x03C3DDD8 FMUL S23, S0, S6
	0x03C3DDDC FMUL S24, S0, S5
	0x03C3DDE0 FMUL S0, S0, S4
	0x03C3DDE4 FMUL S4, S1, S4
	0x03C3DDE8 FMUL S1, S1, S5
	0x03C3DDEC FMUL S5, S3, S6
	0x03C3DDF0 FMUL S3, S3, S7
	0x03C3DDF4 FMUL S7, S2, S7
	0x03C3DDF8 FMUL S2, S2, S6
	0x03C3DDFC FADD S6, S16, S17
	0x03C3DE00 FADD S16, S20, S21
	0x03C3DE04 FADD S5, S5, S7
	0x03C3DE08 FSUB S0, S3, S0
	0x03C3DE0C FADD S3, S18, S6
	0x03C3DE10 FADD S6, S22, S16
	0x03C3DE14 FADD S5, S24, S5
	0x03C3DE18 FSUB S0, S0, S1
	0x03C3DE1C FSUB S1, S3, S19
	0x03C3DE20 FSUB S3, S6, S23
	0x03C3DE24 FSUB S4, S5, S4
	0x03C3DE28 FSUB S0, S0, S2
	0x03C3DE2C STP S10, S1, [X19 + 0x8]
	0x03C3DE30 STP S3, S4, [X19 + 0x10]
	0x03C3DE34 STR S0, [X19 + 0x18]
	0x03C3DE38 LDP X20, X19, [X31 + 0x30]
	0x03C3DE3C LDP D9, D8, [X31 + 0x10]
	0x03C3DE40 LDR V10, [X31], #0x40
	0x03C3DE44 RET
	0x03C3DE48 BL 0x1C16F20
	0x03C3DE4C SUB X31, X31, 0x40
	0x03C3DE50 STR X30, [X31 + 0x20]
	0x03C3DE54 STP X20, X19, [X31 + 0x30]
	0x03C3DE58 ADRP X20, 0x7A8000
	0x03C3DE5C LDR X8, [X20 + 0xA48]
	0x03C3DE60 MOV X19, X0
	0x03C3DE64 STP S0, S1, [X31 + 0x10]
	0x03C3DE68 STR S2, [X31 + 0x18]
	0x03C3DE6C STR W31, [X31 + 0x8]
	0x03C3DE70 STR X31, [X31]
	0x03C3DE74 CBNZ X8, 0x3C3DE8C
	0x03C3DE78 ADRP X0, 0xFFFFFFFFFCED2000
	0x03C3DE7C ADD X0, X0, 0x64C
	0x03C3DE80 BL 0x1C16CB8
	0x03C3DE84 MOV X8, X0
	0x03C3DE88 STR X0, [X20 + 0xA48]
	0x03C3DE8C ADD X1, X31, 0x10

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X30
	003 Move [X31+32], X28
	004 Move [X31+40], X27
	005 Move [X31+48], X26
	006 Move [X31+56], X25
	007 Move [X31+64], X24
	008 Move [X31+72], X23
	009 Move [X31+80], X22
	010 Move [X31+88], X21
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X27, 0x7A9000
	014 Move X28, 0x523000
	015 Move W8, [X27+2120]
	016 Move X28, [X28+1888]
	017 Move W20, W7
	018 Move X19, X6
	019 Move W21, W5
	020 Move W23, W4
	021 Move W25, W3
	022 Move W26, W2
	023 Move W22, W1
	024 Move X24, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {34}
	029 Move X0, 0x523000
	030 Move X0, [X0+1888]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X27+2120], W8
	034 Move X0, [X28]
	035 Call 0x1C17F10
	036 And W3, W26, 1
	037 And W4, W25, 1
	038 And W5, W23, 1
	039 And W6, W21, 1
	040 Move X1, X24
	041 Move W2, W22
	042 Move X7, X19
	043 Move X27, X0
	044 Move [X31], W20
	045 Call TouchScreenKeyboard..ctor, X0, X1, X2, X3, X4, X5, X6, X7, X8
	046 Move X0, X27
	047 Move X20, [X31+96]
	048 Move X19, [X31+104]
	049 Move X22, [X31+80]
	050 Move X21, [X31+88]
	051 Move X24, [X31+64]
	052 Move X23, [X31+72]
	053 Move X26, [X31+48]
	054 Move X25, [X31+56]
	055 Move X28, [X31+32]
	056 Move X27, [X31+40]
	057 Move X30, [X31+16]
	058 Add X31, X31, 112
	059 Return X0

Method: UnityEngine.TouchScreenKeyboard Open(System.String text, UnityEngine.TouchScreenKeyboardType keyboardType, System.Boolean autocorrection, System.Boolean multiline, System.Boolean secure)

Disassembly:
	0x03C3DE90 ADD X2, X31, 0x0
	0x03C3DE94 MOV X0, X19
	0x03C3DE98 BLR X8
	0x03C3DE9C LDP S0, S1, [X31]
	0x03C3DEA0 LDR V2, [X31 + 0x8]
	0x03C3DEA4 LDP X20, X19, [X31 + 0x30]
	0x03C3DEA8 LDR X30, [X31 + 0x20]
	0x03C3DEAC ADD X31, X31, 0x40
	0x03C3DEB0 RET
	0x03C3DEB4 SUB X31, X31, 0x30
	0x03C3DEB8 STP X31, X30, [X31 + 0x8]
	0x03C3DEBC STP X20, X19, [X31 + 0x20]
	0x03C3DEC0 ADRP X20, 0x7A8000
	0x03C3DEC4 LDR X8, [X20 + 0x9C8]
	0x03C3DEC8 MOV X19, X0
	0x03C3DECC STR X31, [X31]
	0x03C3DED0 CBNZ X8, 0x3C3DEE8
	0x03C3DED4 ADRP X0, 0xFFFFFFFFFCEE7000
	0x03C3DED8 ADD X0, X0, 0xFE2
	0x03C3DEDC BL 0x1C16CB8
	0x03C3DEE0 MOV X8, X0
	0x03C3DEE4 STR X0, [X20 + 0x9C8]
	0x03C3DEE8 ADD X1, X31, 0x0
	0x03C3DEEC MOV X0, X19
	0x03C3DEF0 BLR X8
	0x03C3DEF4 LDP S0, S1, [X31]
	0x03C3DEF8 LDP S2, S3, [X31 + 0x8]
	0x03C3DEFC LDP X20, X19, [X31 + 0x20]
	0x03C3DF00 LDR X30, [X31 + 0x10]
	0x03C3DF04 ADD X31, X31, 0x30
	0x03C3DF08 RET
	0x03C3DF0C STP D11, D10, [X31 - 0x30]!
	0x03C3DF10 STP D9, D8, [X31 + 0x10]
	0x03C3DF14 STP X30, X19, [X31 + 0x20]
	0x03C3DF18 ADRP X19, 0x79B000

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X24, 0x7A9000
	011 Move X25, 0x4B7000
	012 Move W8, [X24+2121]
	013 Move X25, [X25+2440]
	014 Move W20, W4
	015 Move W22, W3
	016 Move W23, W2
	017 Move W19, W1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x4B7000
	024 Move X0, [X0+2440]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X24+2121], W8
	028 Move X6, [X25]
	029 And W2, W23, 1
	030 And W3, W22, 1
	031 And W4, W20, 1
	032 Move X0, X21
	033 Move W1, W19
	034 Move W5, W31
	035 Move W7, W31
	036 Call TouchScreenKeyboard.Open, X0, X1, X2, X3, X4, X5, X6, X7
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X22, [X31+48]
	040 Move X21, [X31+56]
	041 Move X24, [X31+32]
	042 Move X23, [X31+40]
	043 Move X30, [X31+16]
	044 Move X25, [X31+24]
	045 Add X31, X31, 80
	046 Return X0

Method: System.String get_text()

Disassembly:
	0x03C3DF1C LDP S8, S9, [X0 + 0xC]
	0x03C3DF20 LDRB W8, [X19 + 0xA1F]
	0x03C3DF24 LDP S11, S10, [X0 + 0x14]
	0x03C3DF28 CBNZ W8, 0x3C3DF40
	0x03C3DF2C ADRP X0, 0x4B6000
	0x03C3DF30 LDR X0, [X0 + 0x5A0]
	0x03C3DF34 BL 0x1C16CF4
	0x03C3DF38 MOVZ W8, 0x1
	0x03C3DF3C STRB W8, [X19 + 0xA1F]
	0x03C3DF40 ADRP X8, 0x4B6000
	0x03C3DF44 LDR X8, [X8 + 0x5A0]
	0x03C3DF48 MOV V0.16B, V8.16B
	0x03C3DF4C MOV V1.16B, V9.16B
	0x03C3DF50 LDP X30, X19, [X31 + 0x20]
	0x03C3DF54 LDR X8, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+2128]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51527680
	010 Add X0, X0, 2695
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2128], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_text(System.String value)

Disassembly:
	0x03C3DF58 LDP D9, D8, [X31 + 0x10]
	0x03C3DF5C MOV V2.16B, V11.16B
	0x03C3DF60 MOV V3.16B, V10.16B
	0x03C3DF64 LDR X8, [X8 + 0xB8]
	0x03C3DF68 MOV X0, X31
	0x03C3DF6C LDP S4, S5, [X8 + 0x48]
	0x03C3DF70 LDR V6, [X8 + 0x50]
	0x03C3DF74 LDP D11, D10, [X31], #0x30
	0x03C3DF78 B 0x3C2A9FC
	0x03C3DF7C STP D11, D10, [X31 - 0x30]!
	0x03C3DF80 STP D9, D8, [X31 + 0x10]
	0x03C3DF84 STP X30, X19, [X31 + 0x20]
	0x03C3DF88 ADRP X19, 0x79B000
	0x03C3DF8C LDP S8, S9, [X0 + 0xC]
	0x03C3DF90 LDRB W8, [X19 + 0xB70]
	0x03C3DF94 LDP S11, S10, [X0 + 0x14]
	0x03C3DF98 CBNZ W8, 0x3C3DFB0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A9000
	006 Move X2, [X21+2136]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51519488
	012 Add X0, X0, 3617
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2136], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_hideInput(System.Boolean value)

Disassembly:
	0x03C3DF9C ADRP X0, 0x4B6000
	0x03C3DFA0 LDR X0, [X0 + 0x5A0]
	0x03C3DFA4 BL 0x1C16CF4
	0x03C3DFA8 MOVZ W8, 0x1
	0x03C3DFAC STRB W8, [X19 + 0xB70]
	0x03C3DFB0 ADRP X8, 0x4B6000
	0x03C3DFB4 LDR X8, [X8 + 0x5A0]
	0x03C3DFB8 MOV V0.16B, V8.16B
	0x03C3DFBC MOV V1.16B, V9.16B
	0x03C3DFC0 LDP X30, X19, [X31 + 0x20]
	0x03C3DFC4 LDR X8, [X8]
	0x03C3DFC8 LDP D9, D8, [X31 + 0x10]
	0x03C3DFCC MOV V2.16B, V11.16B
	0x03C3DFD0 MOV V3.16B, V10.16B
	0x03C3DFD4 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+2144]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51527680
	010 Add X0, X0, 2739
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2144], X0
	014 And W0, W19, 1
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_active()

Disassembly:
	0x03C3DFD8 MOV X0, X31
	0x03C3DFDC LDP S4, S5, [X8 + 0x3C]
	0x03C3DFE0 LDR V6, [X8 + 0x44]
	0x03C3DFE4 LDP D11, D10, [X31], #0x30
	0x03C3DFE8 B 0x3C2A9FC
	0x03C3DFEC STP D11, D10, [X31 - 0x30]!
	0x03C3DFF0 STP D9, D8, [X31 + 0x10]
	0x03C3DFF4 STP X30, X19, [X31 + 0x20]
	0x03C3DFF8 ADRP X19, 0x79B000
	0x03C3DFFC LDP S8, S9, [X0 + 0xC]
	0x03C3E000 LDRB W8, [X19 + 0x786]
	0x03C3E004 LDP S11, S10, [X0 + 0x14]
	0x03C3E008 CBNZ W8, 0x3C3E020
	0x03C3E00C ADRP X0, 0x4B5000
	0x03C3E010 LDR X0, [X0 + 0x5A0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A9000
	005 Move X1, [X20+2152]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51621888
	010 Add X0, X0, 433
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2152], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_active(System.Boolean value)

Disassembly:
	0x03C3E014 BL 0x1C16CF4
	0x03C3E018 MOVZ W8, 0x1
	0x03C3E01C STRB W8, [X19 + 0x786]
	0x03C3E020 ADRP X8, 0x4B5000
	0x03C3E024 LDR X8, [X8 + 0x5A0]
	0x03C3E028 MOV V0.16B, V8.16B
	0x03C3E02C MOV V1.16B, V9.16B
	0x03C3E030 LDP X30, X19, [X31 + 0x20]
	0x03C3E034 LDR X8, [X8]
	0x03C3E038 LDP D9, D8, [X31 + 0x10]
	0x03C3E03C MOV V2.16B, V11.16B
	0x03C3E040 MOV V3.16B, V10.16B
	0x03C3E044 LDR X8, [X8 + 0xB8]
	0x03C3E048 MOV X0, X31
	0x03C3E04C LDP S4, S5, [X8 + 0x18]
	0x03C3E050 LDR V6, [X8 + 0x20]
	0x03C3E054 LDP D11, D10, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A8000
	006 Move X2, [X21+2160]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51658752
	012 Add X0, X0, 1352
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2160], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.TouchScreenKeyboard/Status get_status()

Disassembly:
	0x03C3E058 B 0x3C2A9FC
	0x03C3E05C STP X30, X21, [X31 - 0x20]!
	0x03C3E060 STP X20, X19, [X31 + 0x10]
	0x03C3E064 ADRP X21, 0x7A7000
	0x03C3E068 ADRP X20, 0x4DD000
	0x03C3E06C MOV X19, X8
	0x03C3E070 LDRB W8, [X21 + 0x8B3]
	0x03C3E074 LDR X20, [X20 + 0x610]
	0x03C3E078 TBNZ X8, 0x0, 0x3C3E090
	0x03C3E07C ADRP X0, 0x4DD000
	0x03C3E080 LDR X0, [X0 + 0x610]
	0x03C3E084 BL 0x1C16CF4
	0x03C3E088 MOVZ W8, 0x1
	0x03C3E08C STRB W8, [X21 + 0x8B3]
	0x03C3E090 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A8000
	005 Move X1, [X20+2168]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51601408
	010 Add X0, X0, 859
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2168], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_characterLimit(System.Int32 value)

Disassembly:
	0x03C3E094 LDR W8, [X0 + 0xE0]
	0x03C3E098 CBNZ W8, 0x3C3E0A4
	0x03C3E09C BL 0x1C16DFC
	0x03C3E0A0 LDR X0, [X20]
	0x03C3E0A4 LDR X8, [X0 + 0xB8]
	0x03C3E0A8 LDUR V0, [X8 + 0xC]
	0x03C3E0AC LDR V1, [X8]
	0x03C3E0B0 STUR V0, [X19 + 0xC]
	0x03C3E0B4 STR V1, [X19]
	0x03C3E0B8 LDP X20, X19, [X31 + 0x10]
	0x03C3E0BC LDP X30, X21, [X31], #0x20
	0x03C3E0C0 RET
	0x03C3E0C4 SUB X31, X31, 0x40
	0x03C3E0C8 STP X30, X21, [X31 + 0x20]
	0x03C3E0CC STP X20, X19, [X31 + 0x30]
	0x03C3E0D0 ADRP X21, 0x7A7000
	0x03C3E0D4 LDRB W8, [X21 + 0x8B4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A8000
	006 Move X2, [X21+2176]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51486720
	012 Add X0, X0, 782
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2176], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean get_canGetSelection()

Disassembly:
	0x03C3E0D8 MOV X20, X1
	0x03C3E0DC MOV X19, X0
	0x03C3E0E0 TBNZ X8, 0x0, 0x3C3E0F8
	0x03C3E0E4 ADRP X0, 0x4DD000
	0x03C3E0E8 LDR X0, [X0 + 0x610]
	0x03C3E0EC BL 0x1C16CF4
	0x03C3E0F0 MOVZ W8, 0x1
	0x03C3E0F4 STRB W8, [X21 + 0x8B4]
	0x03C3E0F8 CBZ X20, 0x3C3E114
	0x03C3E0FC ADRP X21, 0x4DD000
	0x03C3E100 LDR X21, [X21 + 0x610]
	0x03C3E104 LDR X8, [X20]
	0x03C3E108 LDR X0, [X21]
	0x03C3E10C CMP X8, X0
	0x03C3E110 B.EQ 0x3C3E11C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A8000
	005 Move X1, [X20+2184]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51560448
	010 Add X0, X0, 460
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2184], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_canSetSelection()

Disassembly:
	0x03C3E114 MOV W0, W31
	0x03C3E118 B 0x3C3E16C
	0x03C3E11C LDR W8, [X0 + 0xE0]
	0x03C3E120 CBZ W8, 0x3C3E12C
	0x03C3E124 MOV X1, X0
	0x03C3E128 B 0x3C3E138
	0x03C3E12C BL 0x1C16DFC
	0x03C3E130 LDR X1, [X21]
	0x03C3E134 LDR X0, [X20]
	0x03C3E138 LDR X8, [X0 + 0x40]
	0x03C3E13C LDR X9, [X1 + 0x40]
	0x03C3E140 MOV X0, X20
	0x03C3E144 CMP X8, X9
	0x03C3E148 B.NE 0x3C3E180
	0x03C3E14C BL 0x1C16E08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A8000
	005 Move X1, [X20+2192]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51617792
	010 Add X0, X0, 548
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2192], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.RangeInt get_selection()

Disassembly:
	0x03C3E150 LDR V0, [X0]
	0x03C3E154 LDUR V1, [X0 + 0xC]
	0x03C3E158 ADD X1, X31, 0x0
	0x03C3E15C MOV X0, X19
	0x03C3E160 STR V0, [X31]
	0x03C3E164 STUR V1, [X31 + 0xC]
	0x03C3E168 BL 0x3C3E184
	0x03C3E16C LDP X20, X19, [X31 + 0x30]
	0x03C3E170 LDP X30, X21, [X31 + 0x20]
	0x03C3E174 AND W0, W0, 0x1
	0x03C3E178 ADD X31, X31, 0x40
	0x03C3E17C RET
	0x03C3E180 BL 0x1C171E0
	0x03C3E184 STR D10, [X31 - 0x30]!
	0x03C3E188 STP D9, D8, [X31 + 0x10]
	0x03C3E18C STP X30, X19, [X31 + 0x20]
	0x03C3E190 LDR V0, [X1]
	0x03C3E194 LDR V1, [X0]
	0x03C3E198 FCMP S1, S0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x7A8000
	005 Move X8, [X19+2200]
	006 Move [X31+8], X31
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51482624
	010 Add X0, X0, 3991
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X19+2200], X0
	014 Add X9, X31, 8
	015 Or X1, X9, 7
	016 Add X0, X31, 8
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X0, [X31+8]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Add X31, X31, 32
	022 Return X0

Method: System.Void set_selection(UnityEngine.RangeInt value)

Disassembly:
	0x03C3E1E0 MOV V0.16B, V10.16B
	0x03C3E1E4 MOV X1, X31
	0x03C3E1E8 BL 0x338FDC0
	0x03C3E1EC TBZ X0, 0x0, 0x3C3E220
	0x03C3E1F0 ADD X0, X19, 0x14
	0x03C3E1F4 MOV V0.16B, V9.16B
	0x03C3E1F8 MOV X1, X31
	0x03C3E1FC BL 0x338FDC0
	0x03C3E200 TBZ X0, 0x0, 0x3C3E220
	0x03C3E204 ADD X0, X19, 0x18
	0x03C3E208 MOV V0.16B, V8.16B
	0x03C3E20C LDP X30, X19, [X31 + 0x20]
	0x03C3E210 LDP D9, D8, [X31 + 0x10]
	0x03C3E214 MOV X1, X31
	0x03C3E218 LDR V10, [X31], #0x30
	0x03C3E21C B 0x338FDC0
	0x03C3E220 LDP X30, X19, [X31 + 0x20]
	0x03C3E224 LDP D9, D8, [X31 + 0x10]
	0x03C3E228 MOV W0, W31
	0x03C3E22C LDR V10, [X31], #0x30
	0x03C3E230 RET
	0x03C3E234 STP X30, X25, [X31 - 0x40]!
	0x03C3E238 STP X24, X23, [X31 + 0x10]
	0x03C3E23C STP X22, X21, [X31 + 0x20]
	0x03C3E240 STP X20, X19, [X31 + 0x30]
	0x03C3E244 MOV X1, X31
	0x03C3E248 MOV X19, X0
	0x03C3E24C BL 0x338FE0C
	0x03C3E250 MOV W20, W0
	0x03C3E254 ADD X0, X19, 0x4
	0x03C3E258 MOV X1, X31
	0x03C3E25C BL 0x338FE0C
	0x03C3E260 MOV W21, W0
	0x03C3E264 ADD X0, X19, 0x8
	0x03C3E268 MOV X1, X31
	0x03C3E26C BL 0x338FE0C
	0x03C3E270 MOV W22, W0
	0x03C3E274 ADD X0, X19, 0xC
	0x03C3E278 MOV X1, X31
	0x03C3E27C BL 0x338FE0C
	0x03C3E280 MOV W23, W0
	0x03C3E284 ADD X0, X19, 0x10
	0x03C3E288 MOV X1, X31
	0x03C3E28C BL 0x338FE0C
	0x03C3E290 MOV W24, W0
	0x03C3E294 ADD X0, X19, 0x14
	0x03C3E298 MOV X1, X31
	0x03C3E29C BL 0x338FE0C
	0x03C3E2A0 MOV W25, W0
	0x03C3E2A4 ADD X0, X19, 0x18
	0x03C3E2A8 MOV X1, X31
	0x03C3E2AC BL 0x338FE0C
	0x03C3E2B0 EOR W10, W20, W21, 0x2
	0x03C3E2B4 EOR W8, W23, W24, 0x2
	0x03C3E2B8 EOR W10, W10, W22, 0x2
	0x03C3E2BC LDP X20, X19, [X31 + 0x30]
	0x03C3E2C0 LDP X22, X21, [X31 + 0x20]
	0x03C3E2C4 LDP X24, X23, [X31 + 0x10]
	0x03C3E2C8 AND W9, W0, 0xFFFFFFFE
	0x03C3E2CC EOR W8, W8, W25, 0x2
	0x03C3E2D0 EOR W9, W10, W9, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X1
	007 Move X20, X1
	008 ShiftRight X20, 32
	009 And X20, X20, 0x7FFFFFFF
	010 Or W8, W20, W19
	011 Move TEMP, X8
	012 And TEMP, TEMP, -2147483648
	013 Compare TEMP, -2147483648
	014 JumpIfEqual {49}
	015 Move X22, 0x7A8000
	016 Move X8, [X22+2128]
	017 Move X21, X0
	018 Compare X8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, -51531776
	021 Add X0, X0, 2695
	022 Call 0x1C17CB8
	023 Move X8, X0
	024 Move [X22+2128], X0
	025 Move X0, X21
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Compare X0, 0
	028 JumpIfEqual {72}
	029 Move W8, [X0+16]
	030 Add W9, W20, W19
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X21, 0x7A8000
	033 Move X2, [X21+2208]
	034 Compare X2, 0
	035 JumpIfNotEqual {41}
	036 Move X0, -51650560
	037 Add X0, X0, 1063
	038 Call 0x1C17CB8
	039 Move X2, X0
	040 Move [X21+2208], X0
	041 Move W0, W19
	042 Move W1, W20
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 CallNoReturn X2
	049 Move X0, 0x4BE000
	050 Move X0, [X0+1888]
	051 Call 0x1C17D08
	052 Call 0x1C17F10
	053 Move X19, X0
	054 Move X0, 0x522000
	055 Move X0, [X0+1896]
	056 Call 0x1C17D08
	057 Move X20, X0
	058 Move X0, 0x522000
	059 Move X0, [X0+1904]
	060 Call 0x1C17D08
	061 Move X2, X0
	062 Move X0, X19
	063 Move X1, X20
	064 Move X3, X31
	065 Call ArgumentOutOfRangeException..ctor, X0, X1, X2
	066 Move X0, 0x522000
	067 Move X0, [X0+1912]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Call 0x1C17DEC
	072 Call 0x1C17F20

Method: System.Void GetSelection(out System.Int32 start, out System.Int32 length)

Disassembly:
	0x03C3E19C B.NE 0x3C3E220
	0x03C3E1A0 LDR V0, [X1 + 0x4]
	0x03C3E1A4 LDR V1, [X0 + 0x4]
	0x03C3E1A8 MOV X19, X0
	0x03C3E1AC FCMP S1, S0
	0x03C3E1B0 B.NE 0x3C3E220
	0x03C3E1B4 LDR V0, [X1 + 0x8]
	0x03C3E1B8 LDR V1, [X19 + 0x8]
	0x03C3E1BC FCMP S1, S0
	0x03C3E1C0 B.NE 0x3C3E220
	0x03C3E1C4 LDP S0, S10, [X1 + 0xC]
	0x03C3E1C8 LDP S9, S8, [X1 + 0x14]
	0x03C3E1CC ADD X0, X19, 0xC
	0x03C3E1D0 MOV X1, X31
	0x03C3E1D4 BL 0x338FDC0
	0x03C3E1D8 TBZ X0, 0x0, 0x3C3E220
	0x03C3E1DC ADD X0, X19, 0x10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A8000
	006 Move X2, [X21+2200]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51482624
	012 Add X0, X0, 3991
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2200], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetSelection(System.Int32 start, System.Int32 length)

Disassembly:
	0x03C3E2D4 EOR W0, W9, W8, 0x1
	0x03C3E2D8 LDP X30, X25, [X31], #0x40
	0x03C3E2DC RET
	0x03C3E2E0 STP D9, D8, [X31 - 0x30]!
	0x03C3E2E4 STR X30, [X31 + 0x10]
	0x03C3E2E8 STP X20, X19, [X31 + 0x20]
	0x03C3E2EC ADRP X19, 0x7A7000
	0x03C3E2F0 LDRB W8, [X19 + 0x8B5]
	0x03C3E2F4 TBNZ X8, 0x0, 0x3C3E30C
	0x03C3E2F8 ADRP X0, 0x4DD000
	0x03C3E2FC LDR X0, [X0 + 0x610]
	0x03C3E300 BL 0x1C16CF4
	0x03C3E304 MOVZ W8, 0x1
	0x03C3E308 STRB W8, [X19 + 0x8B5]
	0x03C3E30C ADRP X19, 0x79A000
	0x03C3E310 LDRB W8, [X19 + 0x783]
	0x03C3E314 CBNZ W8, 0x3C3E32C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A8000
	006 Move X2, [X21+2208]
	007 Move W19, W1
	008 Move W20, W0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51650560
	012 Add X0, X0, 1063
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2208], X0
	016 Move W0, W20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

