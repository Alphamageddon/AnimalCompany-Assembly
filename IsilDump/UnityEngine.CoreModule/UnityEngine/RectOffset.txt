Type: UnityEngine.RectOffset

Method: System.Void .ctor()

Disassembly:
	0x03C0D244 MOV V1.16B, V13.16B
	0x03C0D248 LDR X8, [X8]
	0x03C0D24C MOV V2.16B, V12.16B
	0x03C0D250 MOV V3.16B, V11.16B
	0x03C0D254 MOV V4.16B, V10.16B
	0x03C0D258 LDR X8, [X8 + 0xB8]
	0x03C0D25C MOV V5.16B, V9.16B
	0x03C0D260 MOV V6.16B, V8.16B
	0x03C0D264 LDR V0, [X8 + 0x14]
	0x03C0D268 LDUR X9, [X8 + 0xC]
	0x03C0D26C STR S0, [X31 + 0x8]
	0x03C0D270 MOV V0.16B, V14.16B
	0x03C0D274 STR X9, [X31]
	0x03C0D278 BL 0x3C0CE00
	0x03C0D27C LDP X20, X19, [X31 + 0x50]
	0x03C0D280 LDR X30, [X31 + 0x48]
	0x03C0D284 LDP D9, D8, [X31 + 0x38]
	0x03C0D288 LDP D11, D10, [X31 + 0x28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call Object..ctor, X0
	007 Move X20, 0x7D8000
	008 Move X8, [X20+544]
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51372032
	012 Add X0, X0, 3628
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+544], X0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move [X19+16], X0
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return 

Method: System.Void .ctor(System.Object sourceStyle, System.IntPtr source)

Disassembly:
	0x03C0D2B4 SUB X31, X31, 0x70
	0x03C0D2B8 STR D14, [X31 + 0x10]
	0x03C0D2BC STP D13, D12, [X31 + 0x20]
	0x03C0D2C0 STP D11, D10, [X31 + 0x30]
	0x03C0D2C4 STP D9, D8, [X31 + 0x40]
	0x03C0D2C8 STP X30, X21, [X31 + 0x50]
	0x03C0D2CC STP X20, X19, [X31 + 0x60]
	0x03C0D2D0 ADRP X20, 0x7CB000
	0x03C0D2D4 LDRB W8, [X20 + 0x85B]
	0x03C0D2D8 MOV X19, X0
	0x03C0D2DC CBNZ W8, 0x3C0D2F4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move [X21+16], X19
	011 Move [X21+24], X20
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Move X21, [X31+40]
	016 Return 

Method: System.Void Finalize()

Disassembly:
	0x03C0D2E0 ADRP X0, 0x4E6000
	0x03C0D2E4 LDR X0, [X0 + 0x5A0]
	0x03C0D2E8 BL 0x1C16CF4
	0x03C0D2EC MOVZ W8, 0x1
	0x03C0D2F0 STRB W8, [X20 + 0x85B]
	0x03C0D2F4 ADRP X20, 0x4E6000
	0x03C0D2F8 LDR X20, [X20 + 0x5A0]
	0x03C0D2FC ADRP X21, 0x7CB000
	0x03C0D300 LDRB W9, [X21 + 0x793]
	0x03C0D304 LDR X8, [X20]
	0x03C0D308 LDR X8, [X8 + 0xB8]
	0x03C0D30C LDP S12, S13, [X8 + 0xC]
	0x03C0D310 LDR V14, [X8 + 0x14]
	0x03C0D314 CBNZ W9, 0x3C0D32C
	0x03C0D318 ADRP X0, 0x4E7000
	0x03C0D31C LDR X0, [X0 + 0x5A8]
	0x03C0D320 BL 0x1C16CF4
	0x03C0D324 MOVZ W8, 0x1
	0x03C0D328 STRB W8, [X21 + 0x793]
	0x03C0D32C ADRP X8, 0x4E7000
	0x03C0D330 LDR X8, [X8 + 0x5A8]
	0x03C0D334 ADRP X21, 0x7CB000
	0x03C0D338 LDRB W9, [X21 + 0x783]
	0x03C0D33C LDR X8, [X8]
	0x03C0D340 LDR X8, [X8 + 0xB8]
	0x03C0D344 LDP S11, S10, [X8]
	0x03C0D348 LDP S9, S8, [X8 + 0x8]
	0x03C0D34C CBNZ W9, 0x3C0D364
	0x03C0D350 ADRP X0, 0x4E6000
	0x03C0D354 LDR X0, [X0 + 0x5A0]
	0x03C0D358 BL 0x1C16CF4
	0x03C0D35C MOVZ W8, 0x1
	0x03C0D360 STRB W8, [X21 + 0x783]
	0x03C0D364 LDR X8, [X20]
	0x03C0D368 MOVN W1, 0x0
	0x03C0D36C MOV X0, X19
	0x03C0D370 MOV V3.16B, V11.16B
	0x03C0D374 LDR X8, [X8 + 0xB8]
	0x03C0D378 MOV V4.16B, V10.16B
	0x03C0D37C MOV V5.16B, V9.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X0+24]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call RectOffset.Destroy, X0
	011 Move X0, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X1, X31
	015 Move X30, [X31+32]
	016 Move X21, [X31+40]
	017 Call Object.Finalize, X0
	018 Return 
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, X0
	021 Move X0, X21
	022 Call 0x3EB2AD0
	023 Move X20, [X0]
	024 Call 0x3EB2AE0
	025 Move X0, X19
	026 Move X1, X31
	027 Call Object.Finalize, X0
	028 Compare X20, 0
	029 JumpIfNotEqual {36}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return 
	035 Move X20, X31
	036 Move X0, X20
	037 Call 0x1C17F18
	038 Move X21, X0
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.Finalize, X0
	042 Compare X20, 0
	043 JumpIfNotEqual {46}
	044 Move X0, X21
	045 Call 0x1D2D690
	046 Move X0, X20
	047 Call 0x1C17F18
	048 Call 0x1991590

Method: System.Void .ctor(System.Int32 left, System.Int32 right, System.Int32 top, System.Int32 bottom)

Disassembly:
	0x03C0D3DC BL 0x33A51F0
	0x03C0D3E0 STR W19, [X20 + 0x10]
	0x03C0D3E4 LDP X20, X19, [X31 + 0x10]
	0x03C0D3E8 LDR X30, [X31], #0x20
	0x03C0D3EC RET
	0x03C0D3F0 STP X30, X21, [X31 - 0x20]!
	0x03C0D3F4 STP X20, X19, [X31 + 0x10]
	0x03C0D3F8 ADRP X20, 0x7D7000
	0x03C0D3FC LDRB W8, [X20 + 0x2E0]
	0x03C0D400 MOV X19, X0
	0x03C0D404 TBNZ X8, 0x0, 0x3C0D434
	0x03C0D408 ADRP X0, 0x551000
	0x03C0D40C LDR X0, [X0 + 0xCC0]
	0x03C0D410 BL 0x1C16CF4
	0x03C0D414 ADRP X0, 0x551000
	0x03C0D418 LDR X0, [X0 + 0xCC8]
	0x03C0D41C BL 0x1C16CF4
	0x03C0D420 ADRP X0, 0x4E6000
	0x03C0D424 LDR X0, [X0 + 0x6C0]
	0x03C0D428 BL 0x1C16CF4
	0x03C0D42C MOVZ W8, 0x1
	0x03C0D430 STRB W8, [X20 + 0x2E0]
	0x03C0D434 CBZ X19, 0x3C0D500
	0x03C0D438 ADRP X20, 0x551000
	0x03C0D43C ADRP X21, 0x4E6000
	0x03C0D440 LDR X20, [X20 + 0xCC0]
	0x03C0D444 LDR X21, [X21 + 0x6C0]
	0x03C0D448 MOV X0, X19
	0x03C0D44C MOV X1, X31
	0x03C0D450 BL 0x33C4268
	0x03C0D454 LDR X8, [X21]
	0x03C0D458 LDR X20, [X20]
	0x03C0D45C MOV X19, X0
	0x03C0D460 LDR W9, [X8 + 0xE0]
	0x03C0D464 CBNZ W9, 0x3C0D470
	0x03C0D468 MOV X0, X8
	0x03C0D46C BL 0x1C16DFC
	0x03C0D470 MOV X0, X20
	0x03C0D474 MOV X1, X31
	0x03C0D478 BL 0x338C698
	0x03C0D47C CBZ X19, 0x3C0D500
	0x03C0D480 LDR X8, [X19]
	0x03C0D484 MOV X1, X0
	0x03C0D488 MOVZ W2, 0x1
	0x03C0D48C MOV X0, X19
	0x03C0D490 LDR X9, [X8 + 0x208]
	0x03C0D494 LDR X3, [X8 + 0x210]
	0x03C0D498 BLR X9
	0x03C0D49C CBZ X0, 0x3C0D4EC
	0x03C0D4A0 LDR X8, [X0 + 0x18]
	0x03C0D4A4 CBZ X8, 0x3C0D4E8
	0x03C0D4A8 CBZ W8, 0x3C0D504
	0x03C0D4AC LDR X8, [X0 + 0x20]
	0x03C0D4B0 CBZ X8, 0x3C0D4E8
	0x03C0D4B4 ADRP X9, 0x551000
	0x03C0D4B8 LDR X9, [X9 + 0xCC8]
	0x03C0D4BC LDR X10, [X8]
	0x03C0D4C0 LDR X9, [X9]
	0x03C0D4C4 LDRB W12, [X10 + 0x130]
	0x03C0D4C8 LDRB W11, [X9 + 0x130]
	0x03C0D4CC CMP W12, W11
	0x03C0D4D0 B.CC 0x3C0D4E8
	0x03C0D4D4 LDR X10, [X10 + 0xC8]
	0x03C0D4D8 ADD X10, X10, X11, 0x3, LSL
	0x03C0D4DC LDUR X10, [X10 - 0x8]
	0x03C0D4E0 CMP X10, X9
	0x03C0D4E4 B.EQ 0x3C0D4F8
	0x03C0D4E8 MOV W0, W31
	0x03C0D4EC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W23, W1
	009 Move X1, X31
	010 Move W19, W4
	011 Move W21, W3
	012 Move W22, W2
	013 Move X20, X0
	014 Call Object..ctor, X0
	015 Move X24, 0x7D8000
	016 Move X8, [X24+544]
	017 Compare X8, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -51372032
	020 Add X0, X0, 3628
	021 Call 0x1C17CB8
	022 Move X8, X0
	023 Move [X24+544], X0
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move [X20+16], X0
	026 Move X24, 0x7D8000
	027 Move X8, [X24+568]
	028 Compare X8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, -51298304
	031 Add X0, X0, 2036
	032 Call 0x1C17CB8
	033 Move X8, X0
	034 Move [X24+568], X0
	035 Move X0, X20
	036 Move W1, W23
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move X23, 0x7D8000
	039 Move X8, [X23+584]
	040 Compare X8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, -51355648
	043 Add X0, X0, 2463
	044 Call 0x1C17CB8
	045 Move X8, X0
	046 Move [X23+584], X0
	047 Move X0, X20
	048 Move W1, W22
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X22, 0x7D8000
	051 Move X8, [X22+600]
	052 Compare X8, 0
	053 JumpIfNotEqual {59}
	054 Move X0, -51322880
	055 Add X0, X0, 2324
	056 Call 0x1C17CB8
	057 Move X8, X0
	058 Move [X22+600], X0
	059 Move X0, X20
	060 Move W1, W21
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move X21, 0x7D8000
	063 Move X2, [X21+616]
	064 Compare X2, 0
	065 JumpIfNotEqual {71}
	066 Move X0, -51380224
	067 Add X0, X0, 3361
	068 Call 0x1C17CB8
	069 Move X2, X0
	070 Move [X21+616], X0
	071 Move X0, X20
	072 Move W1, W19
	073 Move X20, [X31+48]
	074 Move X19, [X31+56]
	075 Move X22, [X31+32]
	076 Move X21, [X31+40]
	077 Move X24, [X31+16]
	078 Move X23, [X31+24]
	079 Move X30, [X31+64]
	080 CallNoReturn X2

Method: System.String ToString()

Disassembly:
	0x03C0D600 STP X30, X21, [X31 - 0x20]!
	0x03C0D604 STP X20, X19, [X31 + 0x10]
	0x03C0D608 ADRP X20, 0x7D7000
	0x03C0D60C ADRP X21, 0x551000

ISIL:
	001 Move X1, X31
	002 Move X2, X31
	003 Move X3, X31
	004 Call 0x3C1F804
	005 Return X0

Method: System.String ToString(System.String format, System.IFormatProvider formatProvider)

Disassembly:
	0x03C0D610 LDRB W8, [X20 + 0x2E7]
	0x03C0D614 LDR X21, [X21 + 0xCE0]
	0x03C0D618 MOV X19, X0
	0x03C0D61C TBNZ X8, 0x0, 0x3C0D634
	0x03C0D620 ADRP X0, 0x551000
	0x03C0D624 LDR X0, [X0 + 0xCE0]
	0x03C0D628 BL 0x1C16CF4
	0x03C0D62C MOVZ W8, 0x1
	0x03C0D630 STRB W8, [X20 + 0x2E7]
	0x03C0D634 LDR X8, [X21]
	0x03C0D638 LDR X8, [X8 + 0xB8]
	0x03C0D63C LDR X8, [X8 + 0x8]
	0x03C0D640 CBZ X8, 0x3C0D660
	0x03C0D644 LDR X3, [X8 + 0x18]
	0x03C0D648 LDR X0, [X8 + 0x40]
	0x03C0D64C LDR X2, [X8 + 0x28]
	0x03C0D650 MOV X1, X19
	0x03C0D654 LDP X20, X19, [X31 + 0x10]
	0x03C0D658 LDP X30, X21, [X31], #0x20
	0x03C0D65C BR X3
	0x03C0D660 LDP X20, X19, [X31 + 0x10]
	0x03C0D664 LDP X30, X21, [X31], #0x20
	0x03C0D668 RET
	0x03C0D66C SUB X31, X31, 0x20
	0x03C0D670 STP X30, X19, [X31 + 0x10]
	0x03C0D674 MOV X1, X31
	0x03C0D678 MOV X19, X0
	0x03C0D67C BL 0x33BDD8C
	0x03C0D680 ADD X0, X31, 0x8
	0x03C0D684 MOV W1, W31
	0x03C0D688 MOV X2, X31
	0x03C0D68C STR X31, [X31 + 0x8]
	0x03C0D690 BL 0x33C6730
	0x03C0D694 LDR X8, [X31 + 0x8]
	0x03C0D698 STR X8, [X19 + 0x10]
	0x03C0D69C LDP X30, X19, [X31 + 0x10]
	0x03C0D6A0 ADD X31, X31, 0x20
	0x03C0D6A4 RET
	0x03C0D6A8 STR X30, [X31 - 0x20]!
	0x03C0D6AC STP X20, X19, [X31 + 0x10]
	0x03C0D6B0 MOV X19, X1
	0x03C0D6B4 MOV X1, X31
	0x03C0D6B8 MOV X20, X0
	0x03C0D6BC BL 0x33BDD8C
	0x03C0D6C0 STR X19, [X20 + 0x10]
	0x03C0D6C4 LDP X20, X19, [X31 + 0x10]
	0x03C0D6C8 LDR X30, [X31], #0x20
	0x03C0D6CC RET
	0x03C0D6D0 SUB X31, X31, 0x30
	0x03C0D6D4 STP X30, X21, [X31 + 0x10]
	0x03C0D6D8 STP X20, X19, [X31 + 0x20]
	0x03C0D6DC ADRP X21, 0x7D7000
	0x03C0D6E0 ADRP X20, 0x54A000
	0x03C0D6E4 LDRB W8, [X21 + 0x2E8]
	0x03C0D6E8 LDR X20, [X20 + 0x448]
	0x03C0D6EC MOV X19, X0
	0x03C0D6F0 TBNZ X8, 0x0, 0x3C0D708
	0x03C0D6F4 ADRP X0, 0x54A000
	0x03C0D6F8 LDR X0, [X0 + 0x448]
	0x03C0D6FC BL 0x1C16CF4
	0x03C0D700 MOVZ W8, 0x1
	0x03C0D704 STRB W8, [X21 + 0x2E8]
	0x03C0D708 LDR X0, [X20]
	0x03C0D70C STR X31, [X31 + 0x8]
	0x03C0D710 LDR X19, [X19 + 0x10]
	0x03C0D714 LDR W8, [X0 + 0xE0]
	0x03C0D718 CBNZ W8, 0x3C0D720
	0x03C0D71C BL 0x1C16DFC
	0x03C0D720 ADRP X20, 0x7D7000
	0x03C0D724 LDR X8, [X20 + 0x300]
	0x03C0D728 CBNZ X8, 0x3C0D740
	0x03C0D72C ADRP X0, 0xFFFFFFFFFCEE3000
	0x03C0D730 ADD X0, X0, 0xC59
	0x03C0D734 BL 0x1C16CB8
	0x03C0D738 MOV X8, X0
	0x03C0D73C STR X0, [X20 + 0x300]
	0x03C0D740 ADD X1, X31, 0xC
	0x03C0D744 ADD X2, X31, 0x8
	0x03C0D748 MOV X0, X19
	0x03C0D74C BLR X8
	0x03C0D750 LDR W0, [X31 + 0xC]
	0x03C0D754 LDP X20, X19, [X31 + 0x20]
	0x03C0D758 LDP X30, X21, [X31 + 0x10]
	0x03C0D75C ADD X31, X31, 0x30
	0x03C0D760 RET
	0x03C0D764 STR X30, [X31 - 0x30]!
	0x03C0D768 STP X22, X21, [X31 + 0x10]
	0x03C0D76C STP X20, X19, [X31 + 0x20]
	0x03C0D770 ADRP X22, 0x7D7000
	0x03C0D774 LDR X3, [X22 + 0x300]
	0x03C0D778 MOV X19, X2
	0x03C0D77C MOV X20, X1
	0x03C0D780 MOV X21, X0
	0x03C0D784 CBNZ X3, 0x3C0D79C
	0x03C0D788 ADRP X0, 0xFFFFFFFFFCEE3000
	0x03C0D78C ADD X0, X0, 0xC59
	0x03C0D790 BL 0x1C16CB8
	0x03C0D794 MOV X3, X0
	0x03C0D798 STR X0, [X22 + 0x300]
	0x03C0D79C MOV X0, X21
	0x03C0D7A0 MOV X1, X20
	0x03C0D7A4 MOV X2, X19
	0x03C0D7A8 LDP X20, X19, [X31 + 0x20]
	0x03C0D7AC LDP X22, X21, [X31 + 0x10]
	0x03C0D7B0 LDR X30, [X31], #0x30
	0x03C0D7B4 BR X3
	0x03C0D7B8 SUB X31, X31, 0x30
	0x03C0D7BC STP X30, X21, [X31 + 0x10]
	0x03C0D7C0 STP X20, X19, [X31 + 0x20]
	0x03C0D7C4 ADRP X21, 0x7D7000
	0x03C0D7C8 ADRP X20, 0x54A000
	0x03C0D7CC LDRB W8, [X21 + 0x2E9]
	0x03C0D7D0 LDR X20, [X20 + 0x448]
	0x03C0D7D4 MOV X19, X0
	0x03C0D7D8 TBNZ X8, 0x0, 0x3C0D7F0
	0x03C0D7DC ADRP X0, 0x54A000
	0x03C0D7E0 LDR X0, [X0 + 0x448]
	0x03C0D7E4 BL 0x1C16CF4
	0x03C0D7E8 MOVZ W8, 0x1
	0x03C0D7EC STRB W8, [X21 + 0x2E9]
	0x03C0D7F0 LDR X0, [X20]
	0x03C0D7F4 STR X31, [X31 + 0x8]
	0x03C0D7F8 LDR X19, [X19 + 0x10]
	0x03C0D7FC LDR W8, [X0 + 0xE0]
	0x03C0D800 CBNZ W8, 0x3C0D808
	0x03C0D804 BL 0x1C16DFC
	0x03C0D808 ADRP X20, 0x7D7000
	0x03C0D80C LDR X8, [X20 + 0x300]
	0x03C0D810 CBNZ X8, 0x3C0D828
	0x03C0D814 ADRP X0, 0xFFFFFFFFFCEE3000
	0x03C0D818 ADD X0, X0, 0xC59
	0x03C0D81C BL 0x1C16CB8
	0x03C0D820 MOV X8, X0
	0x03C0D824 STR X0, [X20 + 0x300]
	0x03C0D828 ADD X1, X31, 0xC
	0x03C0D82C ADD X2, X31, 0x8
	0x03C0D830 MOV X0, X19
	0x03C0D834 BLR X8
	0x03C0D838 LDR W0, [X31 + 0x8]
	0x03C0D83C LDP X20, X19, [X31 + 0x20]
	0x03C0D840 LDP X30, X21, [X31 + 0x10]
	0x03C0D844 ADD X31, X31, 0x30
	0x03C0D848 RET
	0x03C0D84C SUB X31, X31, 0x30
	0x03C0D850 STP X30, X21, [X31 + 0x10]
	0x03C0D854 STP X20, X19, [X31 + 0x20]
	0x03C0D858 ADRP X21, 0x7D7000
	0x03C0D85C ADRP X20, 0x54A000
	0x03C0D860 LDRB W8, [X21 + 0x2EA]
	0x03C0D864 LDR X20, [X20 + 0x448]
	0x03C0D868 MOV X19, X0
	0x03C0D86C TBNZ X8, 0x0, 0x3C0D884
	0x03C0D870 ADRP X0, 0x54A000
	0x03C0D874 LDR X0, [X0 + 0x448]
	0x03C0D878 BL 0x1C16CF4
	0x03C0D87C MOVZ W8, 0x1
	0x03C0D880 STRB W8, [X21 + 0x2EA]
	0x03C0D884 LDR X0, [X20]
	0x03C0D888 STR X31, [X31 + 0x8]
	0x03C0D88C LDR X19, [X19 + 0x10]
	0x03C0D890 LDR W8, [X0 + 0xE0]
	0x03C0D894 CBNZ W8, 0x3C0D89C
	0x03C0D898 BL 0x1C16DFC
	0x03C0D89C ADRP X20, 0x7D7000
	0x03C0D8A0 LDR X8, [X20 + 0x2F8]
	0x03C0D8A4 CBNZ X8, 0x3C0D8BC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x7D8000
	009 Move W8, [X22+538]
	010 Move X21, X2
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x4E9000
	018 Move X0, [X0+3144]
	019 Call 0x1C17CF4
	020 Move X0, 0x4E7000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0x552000
	024 Move X0, [X0+3256]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+538], W8
	028 Compare X21, 0
	029 JumpIfNotEqual {46}
	030 Move X8, 0x4E9000
	031 Move X8, [X8+3144]
	032 Move X0, [X8]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X31
	038 Call CultureInfo.get_InvariantCulture
	039 Compare X0, 0
	040 JumpIfEqual {189}
	041 Move X8, [X0]
	042 Move X9, [X8+536]
	043 Move X1, [X8+544]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X21, X0
	046 Move X8, 0x4E7000
	047 Move X8, [X8+2512]
	048 Move W1, 4
	049 Move X0, [X8]
	050 Call 0x1C17D6C
	051 Move X23, 0x7D8000
	052 Move X8, [X23+560]
	053 Move X22, X0
	054 Compare X8, 0
	055 JumpIfNotEqual {61}
	056 Move X0, -51421184
	057 Add X0, X0, 3369
	058 Call 0x1C17CB8
	059 Move X8, X0
	060 Move [X23+560], X0
	061 Move X0, X20
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move [X31+12], W0
	064 Add X0, X31, 12
	065 Move X1, X19
	066 Move X2, X21
	067 Move X3, X31
	068 Call Int32.ToString, X0, X1, X2
	069 Compare X22, 0
	070 JumpIfEqual {189}
	071 Move X23, X0
	072 Compare X0, 0
	073 JumpIfEqual {80}
	074 Move X8, [X22]
	075 Move X0, X23
	076 Move X1, [X8+64]
	077 Call 0x1C17E00
	078 Compare X0, 0
	079 JumpIfEqual {186}
	080 Move W8, [X22+24]
	081 Compare W8, 0
	082 JumpIfEqual {185}
	083 Move [X22+32], X23
	084 Move X23, 0x7D8000
	085 Move X8, [X23+576]
	086 Compare X8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, -51314688
	089 Add X0, X0, 3333
	090 Call 0x1C17CB8
	091 Move X8, X0
	092 Move [X23+576], X0
	093 Move X0, X20
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move [X31+12], W0
	096 Add X0, X31, 12
	097 Move X1, X19
	098 Move X2, X21
	099 Move X3, X31
	100 Call Int32.ToString, X0, X1, X2
	101 Move X23, X0
	102 Compare X0, 0
	103 JumpIfEqual {110}
	104 Move X8, [X22]
	105 Move X0, X23
	106 Move X1, [X8+64]
	107 Call 0x1C17E00
	108 Compare X0, 0
	109 JumpIfEqual {186}
	110 Move W8, [X22+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move [X22+40], X23
	113 Move X23, 0x7D8000
	114 Move X8, [X23+592]
	115 Compare X8, 0
	116 JumpIfNotEqual {122}
	117 Move X0, -51265536
	118 Add X0, X0, 1022
	119 Call 0x1C17CB8
	120 Move X8, X0
	121 Move [X23+592], X0
	122 Move X0, X20
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move [X31+12], W0
	125 Add X0, X31, 12
	126 Move X1, X19
	127 Move X2, X21
	128 Move X3, X31
	129 Call Int32.ToString, X0, X1, X2
	130 Move X23, X0
	131 Compare X0, 0
	132 JumpIfEqual {139}
	133 Move X8, [X22]
	134 Move X0, X23
	135 Move X1, [X8+64]
	136 Call 0x1C17E00
	137 Compare X0, 0
	138 JumpIfEqual {186}
	139 Move W8, [X22+24]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move [X22+48], X23
	142 Move X23, 0x7D8000
	143 Move X8, [X23+608]
	144 Compare X8, 0
	145 JumpIfNotEqual {151}
	146 Move X0, -51372032
	147 Add X0, X0, 3669
	148 Call 0x1C17CB8
	149 Move X8, X0
	150 Move [X23+608], X0
	151 Move X0, X20
	152 NotImplemented "Instruction BLR not yet implemented."
	153 Move [X31+12], W0
	154 Add X0, X31, 12
	155 Move X1, X19
	156 Move X2, X21
	157 Move X3, X31
	158 Call Int32.ToString, X0, X1, X2
	159 Move X19, X0
	160 Compare X0, 0
	161 JumpIfEqual {168}
	162 Move X8, [X22]
	163 Move X0, X19
	164 Move X1, [X8+64]
	165 Call 0x1C17E00
	166 Compare X0, 0
	167 JumpIfEqual {186}
	168 Move W8, [X22+24]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Move X8, 0x552000
	171 Move X8, [X8+3256]
	172 Move [X22+56], X19
	173 Move X1, X22
	174 Move X2, X31
	175 Move X0, [X8]
	176 Call UnityString.Format, X0, X1
	177 Move X20, [X31+48]
	178 Move X19, [X31+56]
	179 Move X22, [X31+32]
	180 Move X21, [X31+40]
	181 Move X30, [X31+16]
	182 Move X23, [X31+24]
	183 Add X31, X31, 64
	184 Return X0
	185 Call 0x1C17F28
	186 Call 0x1C17F44
	187 Move X1, X31
	188 Call 0x1C17DEC
	189 Call 0x1C17F20

Method: System.Void Destroy()

Disassembly:
	0x03C0D380 MOV V6.16B, V8.16B
	0x03C0D384 LDP S0, S1, [X8]
	0x03C0D388 LDR V2, [X8 + 0x8]
	0x03C0D38C STP S13, S14, [X31 + 0x4]
	0x03C0D390 STR S12, [X31]
	0x03C0D394 BL 0x3C0CE00
	0x03C0D398 LDP X20, X19, [X31 + 0x60]
	0x03C0D39C LDP X30, X21, [X31 + 0x50]
	0x03C0D3A0 LDP D9, D8, [X31 + 0x40]
	0x03C0D3A4 LDP D11, D10, [X31 + 0x30]
	0x03C0D3A8 LDP D13, D12, [X31 + 0x20]
	0x03C0D3AC LDR V14, [X31 + 0x10]
	0x03C0D3B0 ADD X31, X31, 0x70
	0x03C0D3B4 RET
	0x03C0D3B8 LDR W0, [X0 + 0x10]
	0x03C0D3BC RET
	0x03C0D3C0 STR W1, [X0 + 0x10]
	0x03C0D3C4 RET
	0x03C0D3C8 STR X30, [X31 - 0x20]!
	0x03C0D3CC STP X20, X19, [X31 + 0x10]
	0x03C0D3D0 MOV W19, W1
	0x03C0D3D4 MOV X1, X31
	0x03C0D3D8 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+16]
	007 Move X1, X31
	008 Move X2, X31
	009 Call IntPtr.op_Inequality, X0, X1
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {27}
	014 Move X21, 0x7D8000
	015 Move X8, [X21+552]
	016 Move X20, [X19+16]
	017 Compare X8, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -51273728
	020 Add X0, X0, 2760
	021 Call 0x1C17CB8
	022 Move X8, X0
	023 Move [X21+552], X0
	024 Move X0, X20
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move [X19+16], X31
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

Method: System.IntPtr InternalCreate()

Disassembly:
	0x03C0D28C LDP D13, D12, [X31 + 0x18]
	0x03C0D290 LDR V14, [X31 + 0x10]
	0x03C0D294 ADD X31, X31, 0x60
	0x03C0D298 RET
	0x03C0D29C LDR V7, [X31 + 0x8]
	0x03C0D2A0 LDR X8, [X31]
	0x03C0D2A4 MOVN W1, 0x0
	0x03C0D2A8 STR S7, [X31 + 0x8]
	0x03C0D2AC STR X8, [X31]
	0x03C0D2B0 B 0x3C0CE00

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7D8000
	004 Move X0, [X19+544]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51372032
	008 Add X0, X0, 3628
	009 Call 0x1C17CB8
	010 Move [X19+544], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void InternalDestroy(System.IntPtr ptr)

Disassembly:
	0x03C0D998 BL 0x1C16CB8
	0x03C0D99C MOV X8, X0
	0x03C0D9A0 STR X0, [X20 + 0x2F8]
	0x03C0D9A4 ADD X1, X31, 0xC
	0x03C0D9A8 ADD X2, X31, 0x8
	0x03C0D9AC MOV X0, X19
	0x03C0D9B0 BLR X8
	0x03C0D9B4 LDR W0, [X31 + 0x8]
	0x03C0D9B8 LDP X20, X19, [X31 + 0x20]
	0x03C0D9BC LDP X30, X21, [X31 + 0x10]
	0x03C0D9C0 ADD X31, X31, 0x30
	0x03C0D9C4 RET
	0x03C0D9C8 STP X30, X21, [X31 - 0x20]!
	0x03C0D9CC STP X20, X19, [X31 + 0x10]
	0x03C0D9D0 ADRP X21, 0x7D7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D8000
	005 Move X1, [X20+552]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51273728
	010 Add X0, X0, 2760
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+552], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_left()

Disassembly:
	0x03C0D8A8 ADRP X0, 0xFFFFFFFFFCEF0000
	0x03C0D8AC ADD X0, X0, 0x1B4
	0x03C0D8B0 BL 0x1C16CB8
	0x03C0D8B4 MOV X8, X0
	0x03C0D8B8 STR X0, [X20 + 0x2F8]
	0x03C0D8BC ADD X1, X31, 0xC
	0x03C0D8C0 ADD X2, X31, 0x8
	0x03C0D8C4 MOV X0, X19
	0x03C0D8C8 BLR X8
	0x03C0D8CC LDR W0, [X31 + 0xC]
	0x03C0D8D0 LDP X20, X19, [X31 + 0x20]
	0x03C0D8D4 LDP X30, X21, [X31 + 0x10]
	0x03C0D8D8 ADD X31, X31, 0x30
	0x03C0D8DC RET
	0x03C0D8E0 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D8000
	005 Move X1, [X20+560]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51421184
	010 Add X0, X0, 3369
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+560], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_left(System.Int32 value)

Disassembly:
	0x03C0D4F0 LDP X30, X21, [X31], #0x20
	0x03C0D4F4 RET
	0x03C0D4F8 LDR W0, [X8 + 0x10]
	0x03C0D4FC B 0x3C0D4EC
	0x03C0D500 BL 0x1C16F20
	0x03C0D504 BL 0x1C16F28
	0x03C0D508 STR X30, [X31 - 0x30]!
	0x03C0D50C STP X22, X21, [X31 + 0x10]
	0x03C0D510 STP X20, X19, [X31 + 0x20]
	0x03C0D514 ADRP X21, 0x7D7000
	0x03C0D518 ADRP X22, 0x551000
	0x03C0D51C ADRP X19, 0x551000
	0x03C0D520 ADRP X20, 0x551000
	0x03C0D524 LDRB W8, [X21 + 0x2E4]
	0x03C0D528 LDR X22, [X22 + 0xCD0]
	0x03C0D52C LDR X19, [X19 + 0xCD8]
	0x03C0D530 LDR X20, [X20 + 0xAE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D8000
	006 Move X2, [X21+568]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51298304
	012 Add X0, X0, 2036
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+568], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_right()

Disassembly:
	0x03C0D8E4 STP X22, X21, [X31 + 0x10]
	0x03C0D8E8 STP X20, X19, [X31 + 0x20]
	0x03C0D8EC ADRP X22, 0x7D7000
	0x03C0D8F0 LDR X3, [X22 + 0x2F8]
	0x03C0D8F4 MOV X19, X2
	0x03C0D8F8 MOV X20, X1
	0x03C0D8FC MOV X21, X0
	0x03C0D900 CBNZ X3, 0x3C0D918
	0x03C0D904 ADRP X0, 0xFFFFFFFFFCEF0000
	0x03C0D908 ADD X0, X0, 0x1B4
	0x03C0D90C BL 0x1C16CB8
	0x03C0D910 MOV X3, X0
	0x03C0D914 STR X0, [X22 + 0x2F8]
	0x03C0D918 MOV X0, X21
	0x03C0D91C MOV X1, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D8000
	005 Move X1, [X20+576]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51314688
	010 Add X0, X0, 3333
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+576], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_right(System.Int32 value)

Disassembly:
	0x03C0D534 TBNZ X8, 0x0, 0x3C0D564
	0x03C0D538 ADRP X0, 0x551000
	0x03C0D53C LDR X0, [X0 + 0xAE0]
	0x03C0D540 BL 0x1C16CF4
	0x03C0D544 ADRP X0, 0x551000
	0x03C0D548 LDR X0, [X0 + 0xCD8]
	0x03C0D54C BL 0x1C16CF4
	0x03C0D550 ADRP X0, 0x551000
	0x03C0D554 LDR X0, [X0 + 0xCD0]
	0x03C0D558 BL 0x1C16CF4
	0x03C0D55C MOVZ W8, 0x1
	0x03C0D560 STRB W8, [X21 + 0x2E4]
	0x03C0D564 LDR X0, [X22]
	0x03C0D568 BL 0x1C16F10
	0x03C0D56C LDR X1, [X19]
	0x03C0D570 MOV X19, X0
	0x03C0D574 BL 0x30EA3B0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D8000
	006 Move X2, [X21+584]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51355648
	012 Add X0, X0, 2463
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+584], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_top()

Disassembly:
	0x03C0D920 MOV X2, X19
	0x03C0D924 LDP X20, X19, [X31 + 0x20]
	0x03C0D928 LDP X22, X21, [X31 + 0x10]
	0x03C0D92C LDR X30, [X31], #0x30
	0x03C0D930 BR X3
	0x03C0D934 SUB X31, X31, 0x30
	0x03C0D938 STP X30, X21, [X31 + 0x10]
	0x03C0D93C STP X20, X19, [X31 + 0x20]
	0x03C0D940 ADRP X21, 0x7D7000
	0x03C0D944 ADRP X20, 0x54A000
	0x03C0D948 LDRB W8, [X21 + 0x2EB]
	0x03C0D94C LDR X20, [X20 + 0x448]
	0x03C0D950 MOV X19, X0
	0x03C0D954 TBNZ X8, 0x0, 0x3C0D96C
	0x03C0D958 ADRP X0, 0x54A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D8000
	005 Move X1, [X20+592]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51265536
	010 Add X0, X0, 1022
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+592], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_top(System.Int32 value)

Disassembly:
	0x03C0D578 LDR X8, [X20]
	0x03C0D57C LDP X22, X21, [X31 + 0x10]
	0x03C0D580 LDR X8, [X8 + 0xB8]
	0x03C0D584 STR X19, [X8]
	0x03C0D588 LDP X20, X19, [X31 + 0x20]
	0x03C0D58C LDR X30, [X31], #0x30
	0x03C0D590 RET
	0x03C0D594 STP X30, X21, [X31 - 0x20]!
	0x03C0D598 STP X20, X19, [X31 + 0x10]
	0x03C0D59C ADRP X20, 0x7D7000
	0x03C0D5A0 ADRP X21, 0x551000
	0x03C0D5A4 LDRB W8, [X20 + 0x2E6]
	0x03C0D5A8 LDR X21, [X21 + 0xCE0]
	0x03C0D5AC MOV X19, X0
	0x03C0D5B0 TBNZ X8, 0x0, 0x3C0D5C8
	0x03C0D5B4 ADRP X0, 0x551000
	0x03C0D5B8 LDR X0, [X0 + 0xCE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D8000
	006 Move X2, [X21+600]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51322880
	012 Add X0, X0, 2324
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+600], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_bottom()

Disassembly:
	0x03C0D95C LDR X0, [X0 + 0x448]
	0x03C0D960 BL 0x1C16CF4
	0x03C0D964 MOVZ W8, 0x1
	0x03C0D968 STRB W8, [X21 + 0x2EB]
	0x03C0D96C LDR X0, [X20]
	0x03C0D970 STR X31, [X31 + 0x8]
	0x03C0D974 LDR X19, [X19 + 0x10]
	0x03C0D978 LDR W8, [X0 + 0xE0]
	0x03C0D97C CBNZ W8, 0x3C0D984
	0x03C0D980 BL 0x1C16DFC
	0x03C0D984 ADRP X20, 0x7D7000
	0x03C0D988 LDR X8, [X20 + 0x2F8]
	0x03C0D98C CBNZ X8, 0x3C0D9A4
	0x03C0D990 ADRP X0, 0xFFFFFFFFFCEF0000
	0x03C0D994 ADD X0, X0, 0x1B4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D8000
	005 Move X1, [X20+608]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51372032
	010 Add X0, X0, 3669
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+608], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_bottom(System.Int32 value)

Disassembly:
	0x03C0D5BC BL 0x1C16CF4
	0x03C0D5C0 MOVZ W8, 0x1
	0x03C0D5C4 STRB W8, [X20 + 0x2E6]
	0x03C0D5C8 LDR X8, [X21]
	0x03C0D5CC LDR X8, [X8 + 0xB8]
	0x03C0D5D0 LDR X8, [X8]
	0x03C0D5D4 CBZ X8, 0x3C0D5F4
	0x03C0D5D8 LDR X3, [X8 + 0x18]
	0x03C0D5DC LDR X0, [X8 + 0x40]
	0x03C0D5E0 LDR X2, [X8 + 0x28]
	0x03C0D5E4 MOV X1, X19
	0x03C0D5E8 LDP X20, X19, [X31 + 0x10]
	0x03C0D5EC LDP X30, X21, [X31], #0x20
	0x03C0D5F0 BR X3
	0x03C0D5F4 LDP X20, X19, [X31 + 0x10]
	0x03C0D5F8 LDP X30, X21, [X31], #0x20
	0x03C0D5FC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D8000
	006 Move X2, [X21+616]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51380224
	012 Add X0, X0, 3361
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+616], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_horizontal()

Disassembly:
	0x03C0D9D4 ADRP X20, 0x54A000
	0x03C0D9D8 LDRB W8, [X21 + 0x2EC]
	0x03C0D9DC LDR X20, [X20 + 0x448]
	0x03C0D9E0 MOV X19, X0
	0x03C0D9E4 TBNZ X8, 0x0, 0x3C0D9FC
	0x03C0D9E8 ADRP X0, 0x54A000
	0x03C0D9EC LDR X0, [X0 + 0x448]
	0x03C0D9F0 BL 0x1C16CF4
	0x03C0D9F4 MOVZ W8, 0x1
	0x03C0D9F8 STRB W8, [X21 + 0x2EC]
	0x03C0D9FC LDR X0, [X20]
	0x03C0DA00 LDR X19, [X19 + 0x10]
	0x03C0DA04 LDR W8, [X0 + 0xE0]
	0x03C0DA08 CBNZ W8, 0x3C0DA10
	0x03C0DA0C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D8000
	005 Move X1, [X20+624]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51314688
	010 Add X0, X0, 3369
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+624], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_vertical()

Disassembly:
	0x03C0DA10 ADRP X20, 0x7D7000
	0x03C0DA14 LDR X1, [X20 + 0x310]
	0x03C0DA18 CBNZ X1, 0x3C0DA30
	0x03C0DA1C ADRP X0, 0xFFFFFFFFFCF1F000
	0x03C0DA20 ADD X0, X0, 0x66B
	0x03C0DA24 BL 0x1C16CB8
	0x03C0DA28 MOV X1, X0
	0x03C0DA2C STR X0, [X20 + 0x310]
	0x03C0DA30 MOV X0, X19
	0x03C0DA34 LDP X20, X19, [X31 + 0x10]
	0x03C0DA38 LDP X30, X21, [X31], #0x20
	0x03C0DA3C BR X1
	0x03C0DA40 STR X30, [X31 - 0x20]!
	0x03C0DA44 STP X20, X19, [X31 + 0x10]
	0x03C0DA48 ADRP X20, 0x7D7000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D8000
	005 Move X1, [X20+632]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51355648
	010 Add X0, X0, 2511
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+632], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Rect Remove(UnityEngine.Rect rect)

Disassembly:
	0x03C0DA4C LDR X1, [X20 + 0x310]
	0x03C0DA50 MOV X19, X0
	0x03C0DA54 CBNZ X1, 0x3C0DA6C
	0x03C0DA58 ADRP X0, 0xFFFFFFFFFCF1F000
	0x03C0DA5C ADD X0, X0, 0x66B
	0x03C0DA60 BL 0x1C16CB8
	0x03C0DA64 MOV X1, X0
	0x03C0DA68 STR X0, [X20 + 0x310]
	0x03C0DA6C MOV X0, X19
	0x03C0DA70 LDP X20, X19, [X31 + 0x10]
	0x03C0DA74 LDR X30, [X31], #0x20
	0x03C0DA78 BR X1
	0x03C0DA7C STP D9, D8, [X31 - 0x30]!
	0x03C0DA80 STR X30, [X31 + 0x10]
	0x03C0DA84 STP X20, X19, [X31 + 0x20]
	0x03C0DA88 ADRP X20, 0x7D7000
	0x03C0DA8C ADRP X19, 0x54A000
	0x03C0DA90 LDRB W8, [X20 + 0x2ED]
	0x03C0DA94 LDR X19, [X19 + 0x448]
	0x03C0DA98 MOV V9.16B, V1.16B
	0x03C0DA9C MOV V8.16B, V0.16B
	0x03C0DAA0 TBNZ X8, 0x0, 0x3C0DAB8
	0x03C0DAA4 ADRP X0, 0x54A000
	0x03C0DAA8 LDR X0, [X0 + 0x448]
	0x03C0DAAC BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7D8000
	006 Move X8, [X20+640]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+32], S3
	012 Move [X31], X31
	013 Move [X31+8], X31
	014 Compare X8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, -51339264
	017 Add X0, X0, 1303
	018 Call 0x1C17CB8
	019 Move X8, X0
	020 Move [X20+640], X0
	021 Add X1, X31, 16
	022 Add X2, X31, 0
	023 Move X0, X19
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move S0, [X31]
	026 Move S1, [X31+4]
	027 Move S2, [X31+8]
	028 Move S3, [X31+12]
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Move X30, [X31+32]
	032 Add X31, X31, 64
	033 Return X0

Method: System.Void Remove_Injected(ref UnityEngine.Rect rect, out UnityEngine.Rect ret)

Disassembly:
	0x03C0DAB0 MOVZ W8, 0x1
	0x03C0DAB4 STRB W8, [X20 + 0x2ED]
	0x03C0DAB8 LDR X0, [X19]
	0x03C0DABC STR X31, [X31 + 0x18]
	0x03C0DAC0 LDR W8, [X0 + 0xE0]
	0x03C0DAC4 CBNZ W8, 0x3C0DACC
	0x03C0DAC8 BL 0x1C16DFC
	0x03C0DACC ADRP X19, 0x7D7000
	0x03C0DAD0 LDR X8, [X19 + 0x308]
	0x03C0DAD4 CBNZ X8, 0x3C0DAEC
	0x03C0DAD8 ADRP X0, 0xFFFFFFFFFCF01000
	0x03C0DADC ADD X0, X0, 0xECA
	0x03C0DAE0 BL 0x1C16CB8
	0x03C0DAE4 MOV X8, X0
	0x03C0DAE8 STR X0, [X19 + 0x308]
	0x03C0DAEC MOVZ W10, 0x7F800000
	0x03C0DAF0 FMOV S0, W10
	0x03C0DAF4 FCVTZS W9, S9
	0x03C0DAF8 MOVZ W11, 0x80000000
	0x03C0DAFC FCMP S9, S0
	0x03C0DB00 FCVTZS W12, S8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D8000
	007 Move X3, [X22+640]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51339264
	014 Add X0, X0, 1303
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+640], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

