Type: UnityEngine.Texture

Method: System.Void .ctor()

Disassembly:
	0x03C1B69C BLR X8
	0x03C1B6A0 LDP X20, X19, [X31 + 0x40]
	0x03C1B6A4 LDP X22, X21, [X31 + 0x30]
	0x03C1B6A8 LDP X24, X23, [X31 + 0x20]
	0x03C1B6AC LDR X30, [X31 + 0x10]
	0x03C1B6B0 ADD X31, X31, 0x50
	0x03C1B6B4 RET
	0x03C1B6B8 STP X30, X25, [X31 - 0x40]!
	0x03C1B6BC STP X24, X23, [X31 + 0x10]
	0x03C1B6C0 STP X22, X21, [X31 + 0x20]
	0x03C1B6C4 STP X20, X19, [X31 + 0x30]
	0x03C1B6C8 ADRP X25, 0x7C9000
	0x03C1B6CC LDR X6, [X25 + 0xD10]
	0x03C1B6D0 MOV X19, X5
	0x03C1B6D4 MOV W20, W4
	0x03C1B6D8 MOV W21, W3
	0x03C1B6DC MOV W22, W2
	0x03C1B6E0 MOV W23, W1
	0x03C1B6E4 MOV X24, X0
	0x03C1B6E8 CBNZ X6, 0x3C1B700
	0x03C1B6EC ADRP X0, 0xFFFFFFFFFCF08000
	0x03C1B6F0 ADD X0, X0, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CA000
	006 Move X21, 0x4D9000
	007 Move W8, [X20+3058]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4D9000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3058], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Object..ctor, X0
	031 Return 

Method: System.Int32 get_mipmapCount()

Disassembly:
	0x03C1B6F4 BL 0x1C16CB8
	0x03C1B6F8 MOV X6, X0
	0x03C1B6FC STR X0, [X25 + 0xD10]
	0x03C1B700 MOV X0, X24
	0x03C1B704 MOV W1, W23
	0x03C1B708 MOV W2, W22
	0x03C1B70C MOV W3, W21
	0x03C1B710 MOV W4, W20
	0x03C1B714 MOV X5, X19
	0x03C1B718 LDP X20, X19, [X31 + 0x30]
	0x03C1B71C LDP X22, X21, [X31 + 0x20]
	0x03C1B720 LDP X24, X23, [X31 + 0x10]
	0x03C1B724 LDP X30, X25, [X31], #0x40
	0x03C1B728 BR X6
	0x03C1B72C SUB X31, X31, 0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3064]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51339264
	010 Add X0, X0, 3044
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3064], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Experimental.Rendering.GraphicsFormat get_graphicsFormat()

Disassembly:
	0x03C1B730 STP D9, D8, [X31 + 0x10]
	0x03C1B734 STR X30, [X31 + 0x20]
	0x03C1B738 STP X22, X21, [X31 + 0x30]
	0x03C1B73C STP X20, X19, [X31 + 0x40]
	0x03C1B740 ADRP X22, 0x7C9000
	0x03C1B744 LDR X8, [X22 + 0xD18]
	0x03C1B748 MOV V8.16B, V1.16B
	0x03C1B74C MOV V9.16B, V0.16B
	0x03C1B750 MOV W19, W2
	0x03C1B754 MOV W20, W1
	0x03C1B758 MOV X21, X0
	0x03C1B75C STP X31, X31, [X31]
	0x03C1B760 CBNZ X8, 0x3C1B778
	0x03C1B764 ADRP X0, 0xFFFFFFFFFCF05000
	0x03C1B768 ADD X0, X0, 0x990
	0x03C1B76C BL 0x1C16CB8
	0x03C1B770 MOV X8, X0
	0x03C1B774 STR X0, [X22 + 0xD18]
	0x03C1B778 ADD X3, X31, 0x0
	0x03C1B77C MOV X0, X21
	0x03C1B780 MOV W1, W20
	0x03C1B784 MOV W2, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CA000
	006 Move X21, 0x539000
	007 Move W8, [X20+3072]
	008 Move X21, [X21+144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x539000
	015 Move X0, [X0+144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3072], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call GraphicsFormatUtility.GetFormat, X0
	031 Return X0

Method: System.Int32 GetDataWidth()

Disassembly:
	0x03C1B788 MOV V0.16B, V9.16B
	0x03C1B78C MOV V1.16B, V8.16B
	0x03C1B790 BLR X8
	0x03C1B794 LDP S0, S1, [X31]
	0x03C1B798 LDP S2, S3, [X31 + 0x8]
	0x03C1B79C LDP X20, X19, [X31 + 0x40]
	0x03C1B7A0 LDP X22, X21, [X31 + 0x30]
	0x03C1B7A4 LDR X30, [X31 + 0x20]
	0x03C1B7A8 LDP D9, D8, [X31 + 0x10]
	0x03C1B7AC ADD X31, X31, 0x50
	0x03C1B7B0 RET
	0x03C1B7B4 STP D9, D8, [X31 - 0x40]!
	0x03C1B7B8 STP X30, X23, [X31 + 0x10]
	0x03C1B7BC STP X22, X21, [X31 + 0x20]
	0x03C1B7C0 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3080]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51331072
	010 Add X0, X0, 3169
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3080], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetDataHeight()

Disassembly:
	0x03C1B7C4 ADRP X23, 0x7C9000
	0x03C1B7C8 LDR X4, [X23 + 0xD18]
	0x03C1B7CC MOV X19, X3
	0x03C1B7D0 MOV V8.16B, V1.16B
	0x03C1B7D4 MOV V9.16B, V0.16B
	0x03C1B7D8 MOV W20, W2
	0x03C1B7DC MOV W21, W1
	0x03C1B7E0 MOV X22, X0
	0x03C1B7E4 CBNZ X4, 0x3C1B7FC
	0x03C1B7E8 ADRP X0, 0xFFFFFFFFFCF05000
	0x03C1B7EC ADD X0, X0, 0x990
	0x03C1B7F0 BL 0x1C16CB8
	0x03C1B7F4 MOV X4, X0
	0x03C1B7F8 STR X0, [X23 + 0xD18]
	0x03C1B7FC MOV X0, X22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3088]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51347456
	010 Add X0, X0, 4067
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3088], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Rendering.TextureDimension GetDimension()

Disassembly:
	0x03C1B800 MOV W1, W21
	0x03C1B804 MOV W2, W20
	0x03C1B808 MOV X3, X19
	0x03C1B80C LDP X20, X19, [X31 + 0x30]
	0x03C1B810 LDP X22, X21, [X31 + 0x20]
	0x03C1B814 LDP X30, X23, [X31 + 0x10]
	0x03C1B818 MOV V0.16B, V9.16B
	0x03C1B81C MOV V1.16B, V8.16B
	0x03C1B820 LDP D9, D8, [X31], #0x40
	0x03C1B824 BR X4
	0x03C1B828 STR X30, [X31 - 0x40]!
	0x03C1B82C STP X24, X23, [X31 + 0x10]
	0x03C1B830 STP X22, X21, [X31 + 0x20]
	0x03C1B834 STP X20, X19, [X31 + 0x30]
	0x03C1B838 ADRP X24, 0x7C9000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3096]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51355648
	010 Add X0, X0, 2376
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3096], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_width()

Disassembly:
	0x03C1B83C LDR X5, [X24 + 0xCD8]
	0x03C1B840 MOV W21, W4
	0x03C1B844 MOV W19, W3
	0x03C1B848 MOV W20, W2
	0x03C1B84C MOV W22, W1
	0x03C1B850 MOV X23, X0
	0x03C1B854 CBNZ X5, 0x3C1B86C
	0x03C1B858 ADRP X0, 0xFFFFFFFFFCEE2000
	0x03C1B85C ADD X0, X0, 0x381
	0x03C1B860 BL 0x1C16CB8
	0x03C1B864 MOV X5, X0
	0x03C1B868 STR X0, [X24 + 0xCD8]
	0x03C1B86C AND W4, W21, 0x1
	0x03C1B870 MOV X0, X23
	0x03C1B874 MOV W1, W22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3080]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51331072
	010 Add X0, X0, 3169
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3080], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_width(System.Int32 value)

Disassembly:
	0x03C1B878 MOV W2, W20
	0x03C1B87C MOV W3, W19
	0x03C1B880 LDP X20, X19, [X31 + 0x30]
	0x03C1B884 LDP X22, X21, [X31 + 0x20]
	0x03C1B888 LDP X24, X23, [X31 + 0x10]
	0x03C1B88C LDR X30, [X31], #0x40
	0x03C1B890 BR X5
	0x03C1B894 SUB X31, X31, 0x40
	0x03C1B898 STP X30, X23, [X31 + 0x10]
	0x03C1B89C STP X22, X21, [X31 + 0x20]
	0x03C1B8A0 STP X20, X19, [X31 + 0x30]
	0x03C1B8A4 ADRP X23, 0x7C9000
	0x03C1B8A8 LDR X8, [X23 + 0xD20]
	0x03C1B8AC MOV W21, W3

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x4E2000
	004 Move X0, [X0+1880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotImplementedException..ctor, X0
	010 Move X0, 0x544000
	011 Move X0, [X0+4088]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Int32 get_height()

Disassembly:
	0x03C1B8B0 MOV W19, W2
	0x03C1B8B4 MOV W20, W1
	0x03C1B8B8 MOV X22, X0
	0x03C1B8BC STP S0, S1, [X31]
	0x03C1B8C0 STP S2, S3, [X31 + 0x8]
	0x03C1B8C4 CBNZ X8, 0x3C1B8DC
	0x03C1B8C8 ADRP X0, 0xFFFFFFFFFCEFF000
	0x03C1B8CC ADD X0, X0, 0xB3F
	0x03C1B8D0 BL 0x1C16CB8
	0x03C1B8D4 MOV X8, X0
	0x03C1B8D8 STR X0, [X23 + 0xD20]
	0x03C1B8DC AND W4, W21, 0x1
	0x03C1B8E0 ADD X1, X31, 0x0
	0x03C1B8E4 MOV X0, X22
	0x03C1B8E8 MOV W2, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3088]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51347456
	010 Add X0, X0, 4067
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3088], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_height(System.Int32 value)

Disassembly:
	0x03C1B8EC MOV W3, W19
	0x03C1B8F0 BLR X8
	0x03C1B8F4 LDP X20, X19, [X31 + 0x30]
	0x03C1B8F8 LDP X22, X21, [X31 + 0x20]
	0x03C1B8FC LDP X30, X23, [X31 + 0x10]
	0x03C1B900 ADD X31, X31, 0x40
	0x03C1B904 RET
	0x03C1B908 STR X30, [X31 - 0x40]!
	0x03C1B90C STP X24, X23, [X31 + 0x10]
	0x03C1B910 STP X22, X21, [X31 + 0x20]
	0x03C1B914 STP X20, X19, [X31 + 0x30]
	0x03C1B918 ADRP X24, 0x7C9000
	0x03C1B91C LDR X5, [X24 + 0xD20]
	0x03C1B920 MOV W21, W4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x4E2000
	004 Move X0, [X0+1880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotImplementedException..ctor, X0
	010 Move X0, 0x545000
	011 Move X0, [X0]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: UnityEngine.Rendering.TextureDimension get_dimension()

Disassembly:
	0x03C1B924 MOV W19, W3
	0x03C1B928 MOV W20, W2
	0x03C1B92C MOV X22, X1
	0x03C1B930 MOV X23, X0
	0x03C1B934 CBNZ X5, 0x3C1B94C
	0x03C1B938 ADRP X0, 0xFFFFFFFFFCEFF000
	0x03C1B93C ADD X0, X0, 0xB3F
	0x03C1B940 BL 0x1C16CB8
	0x03C1B944 MOV X5, X0
	0x03C1B948 STR X0, [X24 + 0xD20]
	0x03C1B94C AND W4, W21, 0x1
	0x03C1B950 MOV X0, X23
	0x03C1B954 MOV X1, X22
	0x03C1B958 MOV W2, W20
	0x03C1B95C MOV W3, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3096]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51355648
	010 Add X0, X0, 2376
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3096], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_dimension(UnityEngine.Rendering.TextureDimension value)

Disassembly:
	0x03C1B960 LDP X20, X19, [X31 + 0x30]
	0x03C1B964 LDP X22, X21, [X31 + 0x20]
	0x03C1B968 LDP X24, X23, [X31 + 0x10]
	0x03C1B96C LDR X30, [X31], #0x40
	0x03C1B970 BR X5
	0x03C1B974 STP X30, X27, [X31 - 0x50]!
	0x03C1B978 STP X26, X25, [X31 + 0x10]
	0x03C1B97C STP X24, X23, [X31 + 0x20]
	0x03C1B980 STP X22, X21, [X31 + 0x30]
	0x03C1B984 STP X20, X19, [X31 + 0x40]
	0x03C1B988 ADRP X27, 0x7C9000
	0x03C1B98C LDR X8, [X27 + 0xCE0]
	0x03C1B990 MOV W19, W7
	0x03C1B994 MOV W20, W6

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x4E2000
	004 Move X0, [X0+1880]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X1, X31
	008 Move X19, X0
	009 Call NotImplementedException..ctor, X0
	010 Move X0, 0x545000
	011 Move X0, [X0+8]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X19
	015 Call 0x1C17DEC

Method: System.Boolean get_isReadable()

Disassembly:
	0x03C1B998 MOV X21, X5
	0x03C1B99C MOV W22, W4
	0x03C1B9A0 MOV W23, W3
	0x03C1B9A4 MOV W24, W2
	0x03C1B9A8 MOV W25, W1
	0x03C1B9AC MOV X26, X0
	0x03C1B9B0 CBNZ X8, 0x3C1B9C8
	0x03C1B9B4 ADRP X0, 0xFFFFFFFFFCF0D000
	0x03C1B9B8 ADD X0, X0, 0x822
	0x03C1B9BC BL 0x1C16CB8
	0x03C1B9C0 MOV X8, X0
	0x03C1B9C4 STR X0, [X27 + 0xCE0]
	0x03C1B9C8 MOV X0, X26
	0x03C1B9CC MOV W1, W25
	0x03C1B9D0 MOV W2, W24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3104]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51449856
	010 Add X0, X0, 322
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3104], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.TextureWrapMode get_wrapMode()

Disassembly:
	0x03C1B9D4 MOV W3, W23
	0x03C1B9D8 MOV W4, W22
	0x03C1B9DC MOV X5, X21
	0x03C1B9E0 MOV W6, W20
	0x03C1B9E4 MOV W7, W19
	0x03C1B9E8 LDP X20, X19, [X31 + 0x40]
	0x03C1B9EC LDP X22, X21, [X31 + 0x30]
	0x03C1B9F0 LDP X24, X23, [X31 + 0x20]
	0x03C1B9F4 LDP X26, X25, [X31 + 0x10]
	0x03C1B9F8 LDP X30, X27, [X31], #0x50
	0x03C1B9FC BR X8
	0x03C1BA00 STP X30, X21, [X31 - 0x20]!
	0x03C1BA04 STP X20, X19, [X31 + 0x10]
	0x03C1BA08 ADRP X21, 0x7C9000
	0x03C1BA0C LDR X2, [X21 + 0xCE8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3112]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51560448
	010 Add X0, X0, 3705
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3112], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_wrapMode(UnityEngine.TextureWrapMode value)

Disassembly:
	0x03C1BA10 MOV W19, W1
	0x03C1BA14 MOV X20, X0
	0x03C1BA18 CBNZ X2, 0x3C1BA30
	0x03C1BA1C ADRP X0, 0xFFFFFFFFFCEDC000
	0x03C1BA20 ADD X0, X0, 0x16A
	0x03C1BA24 BL 0x1C16CB8
	0x03C1BA28 MOV X2, X0
	0x03C1BA2C STR X0, [X21 + 0xCE8]
	0x03C1BA30 MOV X0, X20
	0x03C1BA34 MOV W1, W19
	0x03C1BA38 LDP X20, X19, [X31 + 0x10]
	0x03C1BA3C LDP X30, X21, [X31], #0x20
	0x03C1BA40 BR X2
	0x03C1BA44 STR X30, [X31 - 0x20]!
	0x03C1BA48 STP X20, X19, [X31 + 0x10]
	0x03C1BA4C ADRP X20, 0x7C9000
	0x03C1BA50 LDR X1, [X20 + 0xCF0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move X2, [X21+3120]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51490816
	012 Add X0, X0, 301
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3120], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_wrapModeU(UnityEngine.TextureWrapMode value)

Disassembly:
	0x03C1BA54 MOV X19, X0
	0x03C1BA58 CBNZ X1, 0x3C1BA70
	0x03C1BA5C ADRP X0, 0xFFFFFFFFFCEE4000
	0x03C1BA60 ADD X0, X0, 0x193
	0x03C1BA64 BL 0x1C16CB8
	0x03C1BA68 MOV X1, X0
	0x03C1BA6C STR X0, [X20 + 0xCF0]
	0x03C1BA70 MOV X0, X19
	0x03C1BA74 LDP X20, X19, [X31 + 0x10]
	0x03C1BA78 LDR X30, [X31], #0x20
	0x03C1BA7C BR X1
	0x03C1BA80 STR X30, [X31 - 0x30]!
	0x03C1BA84 STP X22, X21, [X31 + 0x10]
	0x03C1BA88 STP X20, X19, [X31 + 0x20]
	0x03C1BA8C ADRP X22, 0x7C9000
	0x03C1BA90 LDR X3, [X22 + 0xCF8]
	0x03C1BA94 MOV W19, W2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move X2, [X21+3128]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51523584
	012 Add X0, X0, 232
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3128], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_wrapModeV(UnityEngine.TextureWrapMode value)

Disassembly:
	0x03C1BA98 MOV X20, X1
	0x03C1BA9C MOV X21, X0
	0x03C1BAA0 CBNZ X3, 0x3C1BAB8
	0x03C1BAA4 ADRP X0, 0xFFFFFFFFFCEF4000
	0x03C1BAA8 ADD X0, X0, 0x238
	0x03C1BAAC BL 0x1C16CB8
	0x03C1BAB0 MOV X3, X0
	0x03C1BAB4 STR X0, [X22 + 0xCF8]
	0x03C1BAB8 MOV X0, X21
	0x03C1BABC MOV X1, X20
	0x03C1BAC0 MOV W2, W19
	0x03C1BAC4 LDP X20, X19, [X31 + 0x20]
	0x03C1BAC8 LDP X22, X21, [X31 + 0x10]
	0x03C1BACC LDR X30, [X31], #0x30
	0x03C1BAD0 BR X3
	0x03C1BAD4 STP X30, X21, [X31 - 0x20]!
	0x03C1BAD8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move X2, [X21+3136]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51552256
	012 Add X0, X0, 3754
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3136], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_wrapModeW(UnityEngine.TextureWrapMode value)

Disassembly:
	0x03C1BADC ADRP X21, 0x7C9000
	0x03C1BAE0 LDR X2, [X21 + 0xD00]
	0x03C1BAE4 MOV W19, W1
	0x03C1BAE8 MOV X20, X0
	0x03C1BAEC CBNZ X2, 0x3C1BB04
	0x03C1BAF0 ADRP X0, 0xFFFFFFFFFCEDA000
	0x03C1BAF4 ADD X0, X0, 0x2E8
	0x03C1BAF8 BL 0x1C16CB8
	0x03C1BAFC MOV X2, X0
	0x03C1BB00 STR X0, [X21 + 0xD00]
	0x03C1BB04 MOV X0, X20
	0x03C1BB08 MOV W1, W19
	0x03C1BB0C LDP X20, X19, [X31 + 0x10]
	0x03C1BB10 LDP X30, X21, [X31], #0x20
	0x03C1BB14 BR X2
	0x03C1BB18 STR X30, [X31 - 0x20]!
	0x03C1BB1C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move X2, [X21+3144]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51449856
	012 Add X0, X0, 360
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3144], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.FilterMode get_filterMode()

Disassembly:
	0x03C1BB20 ADRP X20, 0x7C9000
	0x03C1BB24 LDR X2, [X20 + 0xD00]
	0x03C1BB28 MOV X19, X0
	0x03C1BB2C CBNZ X2, 0x3C1BB44
	0x03C1BB30 ADRP X0, 0xFFFFFFFFFCEDA000
	0x03C1BB34 ADD X0, X0, 0x2E8
	0x03C1BB38 BL 0x1C16CB8
	0x03C1BB3C MOV X2, X0
	0x03C1BB40 STR X0, [X20 + 0xD00]
	0x03C1BB44 MOV X0, X19
	0x03C1BB48 LDP X20, X19, [X31 + 0x10]
	0x03C1BB4C MOV W1, W31
	0x03C1BB50 LDR X30, [X31], #0x20
	0x03C1BB54 BR X2
	0x03C1BB58 SUB X31, X31, 0x50

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3152]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51486720
	010 Add X0, X0, 3926
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3152], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_filterMode(UnityEngine.FilterMode value)

Disassembly:
	0x03C1BB5C STR X30, [X31 + 0x20]
	0x03C1BB60 STP X22, X21, [X31 + 0x30]
	0x03C1BB64 STP X20, X19, [X31 + 0x40]
	0x03C1BB68 MOV W22, W3
	0x03C1BB6C MOV W20, W2
	0x03C1BB70 MOV W19, W1
	0x03C1BB74 BL 0x3C1AE64
	0x03C1BB78 SUB W8, W19, 0x1E
	0x03C1BB7C CMP W8, 0x3
	0x03C1BB80 MOV W21, W0
	0x03C1BB84 B.HI 0x3C1BBA4
	0x03C1BB88 TBZ X21, 0x0, 0x3C1BBA4
	0x03C1BB8C CMP W20, W22
	0x03C1BB90 B.NE 0x3C1BBBC
	0x03C1BB94 MOV W0, W20
	0x03C1BB98 MOV X1, X31
	0x03C1BB9C BL 0x3C1ED70

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move X2, [X21+3160]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51339264
	012 Add X0, X0, 3083
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3160], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_anisoLevel()

Disassembly:
	0x03C1BBA0 TBZ X0, 0x0, 0x3C1BBBC
	0x03C1BBA4 AND W0, W21, 0x1
	0x03C1BBA8 LDP X20, X19, [X31 + 0x40]
	0x03C1BBAC LDP X22, X21, [X31 + 0x30]
	0x03C1BBB0 LDR X30, [X31 + 0x20]
	0x03C1BBB4 ADD X31, X31, 0x50
	0x03C1BBB8 RET
	0x03C1BBBC ADRP X0, 0x538000
	0x03C1BBC0 LDR X0, [X0 + 0x4C0]
	0x03C1BBC4 BL 0x1C16D08
	0x03C1BBC8 MOVN X8, 0x0
	0x03C1BBCC STP X0, X8, [X31 + 0x8]
	0x03C1BBD0 ADD X0, X31, 0x8
	0x03C1BBD4 MOV X1, X31
	0x03C1BBD8 STR W19, [X31 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3168]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51441664
	010 Add X0, X0, 652
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3168], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_anisoLevel(System.Int32 value)

Disassembly:
	0x03C1BBDC BL 0x33B162C
	0x03C1BBE0 MOV X19, X0
	0x03C1BBE4 ADRP X0, 0x544000
	0x03C1BBE8 LDR X0, [X0 + 0x60]
	0x03C1BBEC BL 0x1C16D08
	0x03C1BBF0 MOV X1, X19
	0x03C1BBF4 MOV X2, X31
	0x03C1BBF8 BL 0x321EFD0
	0x03C1BBFC MOV X19, X0
	0x03C1BC00 ADRP X0, 0x501000
	0x03C1BC04 LDR X0, [X0 + 0x1D0]
	0x03C1BC08 BL 0x1C16D08
	0x03C1BC0C BL 0x1C16F10
	0x03C1BC10 MOV X1, X19
	0x03C1BC14 MOV X2, X31
	0x03C1BC18 MOV X20, X0
	0x03C1BC1C BL 0x3C363D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move X2, [X21+3176]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51396608
	012 Add X0, X0, 2446
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3176], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Single get_mipMapBias()

Disassembly:
	0x03C1BC20 ADRP X0, 0x544000
	0x03C1BC24 LDR X0, [X0 + 0x68]
	0x03C1BC28 BL 0x1C16D08
	0x03C1BC2C MOV X1, X0
	0x03C1BC30 MOV X0, X20
	0x03C1BC34 BL 0x1C16DEC
	0x03C1BC38 SUB X31, X31, 0x50
	0x03C1BC3C STP X30, X23, [X31 + 0x20]
	0x03C1BC40 STP X22, X21, [X31 + 0x30]
	0x03C1BC44 STP X20, X19, [X31 + 0x40]
	0x03C1BC48 ADRP X23, 0x7C9000
	0x03C1BC4C LDRB W8, [X23 + 0xD08]
	0x03C1BC50 MOV W21, W3
	0x03C1BC54 MOV W20, W2
	0x03C1BC58 MOV W19, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3184]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51466240
	010 Add X0, X0, 615
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3184], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_mipMapBias(System.Single value)

Disassembly:
	0x03C1BC5C MOV X22, X0
	0x03C1BC60 TBNZ X8, 0x0, 0x3C1BC78
	0x03C1BC64 ADRP X0, 0x538000
	0x03C1BC68 LDR X0, [X0 + 0x90]
	0x03C1BC6C BL 0x1C16CF4
	0x03C1BC70 MOVZ W8, 0x1
	0x03C1BC74 STRB W8, [X23 + 0xD08]
	0x03C1BC78 MOV X0, X22
	0x03C1BC7C MOV W1, W19
	0x03C1BC80 MOV W2, W31
	0x03C1BC84 BL 0x3C1B024
	0x03C1BC88 MOV W22, W0
	0x03C1BC8C TBZ X0, 0x0, 0x3C1BCD0
	0x03C1BC90 ADRP X8, 0x538000
	0x03C1BC94 LDR X8, [X8 + 0x90]
	0x03C1BC98 LDR X0, [X8]
	0x03C1BC9C LDR W8, [X0 + 0xE0]
	0x03C1BCA0 CBNZ W8, 0x3C1BCA8
	0x03C1BCA4 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CA000
	006 Move X1, [X20+3192]
	007 Move V8, V0
	008 Move X19, X0
	009 Compare X1, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51425280
	012 Add X0, X0, 517
	013 Call 0x1C17CB8
	014 Move X1, X0
	015 Move [X20+3192], X0
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+8]
	020 Move V0, V8
	021 Move V8, [X31+32]
	022 CallNoReturn X1

Method: UnityEngine.Vector2 get_texelSize()

Disassembly:
	0x03C1BCA8 MOV W0, W19
	0x03C1BCAC MOV X1, X31
	0x03C1BCB0 BL 0x3C61CB0
	0x03C1BCB4 TBZ X0, 0x0, 0x3C1BCD0
	0x03C1BCB8 CMP W20, W21
	0x03C1BCBC B.NE 0x3C1BCE8
	0x03C1BCC0 MOV W0, W20
	0x03C1BCC4 MOV X1, X31
	0x03C1BCC8 BL 0x3C1ED70
	0x03C1BCCC TBZ X0, 0x0, 0x3C1BCE8
	0x03C1BCD0 AND W0, W22, 0x1
	0x03C1BCD4 LDP X20, X19, [X31 + 0x40]
	0x03C1BCD8 LDP X22, X21, [X31 + 0x30]
	0x03C1BCDC LDP X30, X23, [X31 + 0x20]
	0x03C1BCE0 ADD X31, X31, 0x50
	0x03C1BCE4 RET
	0x03C1BCE8 ADRP X0, 0x538000
	0x03C1BCEC LDR X0, [X0 + 0x4B8]
	0x03C1BCF0 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X8, [X20+3224]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51523584
	011 Add X0, X0, 296
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+3224], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.UInt32 get_updateCount()

Disassembly:
	0x03C1BD38 BL 0x1C16F10
	0x03C1BD3C MOV X1, X19
	0x03C1BD40 MOV X2, X31
	0x03C1BD44 MOV X20, X0
	0x03C1BD48 BL 0x3C363D0
	0x03C1BD4C ADRP X0, 0x544000
	0x03C1BD50 LDR X0, [X0 + 0x70]
	0x03C1BD54 BL 0x1C16D08
	0x03C1BD58 MOV X1, X0
	0x03C1BD5C MOV X0, X20
	0x03C1BD60 BL 0x1C16DEC
	0x03C1BD64 SUB X31, X31, 0x70
	0x03C1BD68 STR X30, [X31 + 0x10]
	0x03C1BD6C STP X28, X27, [X31 + 0x20]
	0x03C1BD70 STP X26, X25, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3200]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51490816
	010 Add X0, X0, 364
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3200], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 Internal_GetActiveTextureColorSpace()

Disassembly:
	0x03C1BD74 STP X24, X23, [X31 + 0x40]
	0x03C1BD78 STP X22, X21, [X31 + 0x50]
	0x03C1BD7C STP X20, X19, [X31 + 0x60]
	0x03C1BD80 ADRP X28, 0x7C9000
	0x03C1BD84 ADRP X27, 0x544000
	0x03C1BD88 LDRB W8, [X28 + 0xD09]
	0x03C1BD8C LDR X27, [X27 + 0x48]
	0x03C1BD90 MOV X23, X7
	0x03C1BD94 MOV X19, X6
	0x03C1BD98 MOV W21, W5
	0x03C1BD9C MOV W20, W4
	0x03C1BDA0 MOV W22, W3
	0x03C1BDA4 MOV W24, W2
	0x03C1BDA8 MOV W25, W1
	0x03C1BDAC MOV X26, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X1, [X20+3208]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51396608
	010 Add X0, X0, 2496
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3208], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.ColorSpace get_activeTextureColorSpace()

Disassembly:
	0x03C1BDB0 TBNZ X8, 0x0, 0x3C1BDC8
	0x03C1BDB4 ADRP X0, 0x544000
	0x03C1BDB8 LDR X0, [X0 + 0x48]
	0x03C1BDBC BL 0x1C16CF4
	0x03C1BDC0 MOVZ W8, 0x1
	0x03C1BDC4 STRB W8, [X28 + 0xD09]
	0x03C1BDC8 LDR X0, [X27]
	0x03C1BDCC LDR W8, [X0 + 0xE0]
	0x03C1BDD0 CBNZ W8, 0x3C1BDD8
	0x03C1BDD4 BL 0x1C16DFC
	0x03C1BDD8 MOV X0, X26
	0x03C1BDDC BL 0x3C1A69C
	0x03C1BDE0 MOV X0, X26
	0x03C1BDE4 MOV W1, W22
	0x03C1BDE8 MOV W2, W25
	0x03C1BDEC MOV W3, W24
	0x03C1BDF0 BL 0x3C1BC38
	0x03C1BDF4 TBZ X0, 0x0, 0x3C1BE38

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7CA000
	005 Move X8, [X20+3208]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51396608
	010 Add X0, X0, 2496
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+3208], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSET not yet implemented."
	020 Move X30, [X31+32]
	021 Return X0

Method: UnityEngine.TextureColorSpace GetTextureColorSpace(System.Boolean linear)

Disassembly:
	0x03C1BDF8 LDR X0, [X27]
	0x03C1BDFC LDR W8, [X0 + 0xE0]
	0x03C1BE00 CBNZ W8, 0x3C1BE08

ISIL:
	001 NotImplemented "Instruction ORN not yet implemented."
	002 And W0, W8, 1
	003 Return X0

Method: UnityEngine.TextureColorSpace GetTextureColorSpace(UnityEngine.Experimental.Rendering.GraphicsFormat format)

Disassembly:
	0x03C1BE04 BL 0x1C16DFC
	0x03C1BE08 MOV W1, W22
	0x03C1BE0C BL 0x3C1AE04
	0x03C1BE10 MOV W5, W0
	0x03C1BE14 MOV X0, X26
	0x03C1BE18 MOV W1, W25
	0x03C1BE1C MOV W2, W24
	0x03C1BE20 MOV W3, W21
	0x03C1BE24 MOV W4, W22
	0x03C1BE28 MOV W6, W20
	0x03C1BE2C MOV X7, X19
	0x03C1BE30 STR X23, [X31]
	0x03C1BE34 BL 0x3C1B45C
	0x03C1BE38 LDP X20, X19, [X31 + 0x60]
	0x03C1BE3C LDP X22, X21, [X31 + 0x50]
	0x03C1BE40 LDP X24, X23, [X31 + 0x40]
	0x03C1BE44 LDP X26, X25, [X31 + 0x30]
	0x03C1BE48 LDP X28, X27, [X31 + 0x20]
	0x03C1BE4C LDR X30, [X31 + 0x10]
	0x03C1BE50 ADD X31, X31, 0x70
	0x03C1BE54 RET
	0x03C1BE58 STR X30, [X31 - 0x30]!
	0x03C1BE5C STP X22, X21, [X31 + 0x10]
	0x03C1BE60 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7CA000
	006 Move X21, 0x539000
	007 Move W8, [X20+3216]
	008 Move X21, [X21+144]
	009 Move W19, W1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x539000
	015 Move X0, [X0+144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3216], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X1, X31
	026 Call GraphicsFormatUtility.IsSRGBFormat, X0
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 And W0, W0, 1
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return X0

Method: System.Boolean ValidateFormat(UnityEngine.TextureFormat format)

Disassembly:
	0x03C1BE64 MOV W21, W1
	0x03C1BE68 MOV X22, X0
	0x03C1BE6C MOV W0, W3
	0x03C1BE70 MOV X1, X31
	0x03C1BE74 MOV W19, W4
	0x03C1BE78 MOV W20, W2
	0x03C1BE7C BL 0x3C3C544
	0x03C1BE80 MOV W3, W0
	0x03C1BE84 MOV X0, X22
	0x03C1BE88 MOV W1, W21
	0x03C1BE8C MOV W2, W20
	0x03C1BE90 MOV W4, W19
	0x03C1BE94 LDP X20, X19, [X31 + 0x20]
	0x03C1BE98 LDP X22, X21, [X31 + 0x10]
	0x03C1BE9C LDR X30, [X31], #0x30
	0x03C1BEA0 B 0x3C1BEA4
	0x03C1BEA4 SUB X31, X31, 0x50
	0x03C1BEA8 STP X30, X25, [X31 + 0x10]
	0x03C1BEAC STP X24, X23, [X31 + 0x20]
	0x03C1BEB0 STP X22, X21, [X31 + 0x30]
	0x03C1BEB4 STP X20, X19, [X31 + 0x40]
	0x03C1BEB8 ADRP X25, 0x7C9000
	0x03C1BEBC ADRP X24, 0x544000
	0x03C1BEC0 LDRB W8, [X25 + 0xD0A]
	0x03C1BEC4 LDR X24, [X24 + 0x48]
	0x03C1BEC8 MOV W19, W4
	0x03C1BECC MOV W20, W3
	0x03C1BED0 MOV W21, W2
	0x03C1BED4 MOV W22, W1
	0x03C1BED8 MOV X23, X0
	0x03C1BEDC TBNZ X8, 0x0, 0x3C1BEF4
	0x03C1BEE0 ADRP X0, 0x544000
	0x03C1BEE4 LDR X0, [X0 + 0x48]
	0x03C1BEE8 BL 0x1C16CF4
	0x03C1BEEC MOVZ W8, 0x1
	0x03C1BEF0 STRB W8, [X25 + 0xD0A]
	0x03C1BEF4 LDR X0, [X24]
	0x03C1BEF8 LDR W8, [X0 + 0xE0]
	0x03C1BEFC CBNZ W8, 0x3C1BF08
	0x03C1BF00 BL 0x1C16DFC
	0x03C1BF04 LDR X0, [X24]
	0x03C1BF08 LDR X8, [X0 + 0xB8]
	0x03C1BF0C MOV X0, X23
	0x03C1BF10 MOV W1, W22
	0x03C1BF14 MOV W2, W21
	0x03C1BF18 LDR W5, [X8]
	0x03C1BF1C MOV W3, W20
	0x03C1BF20 MOV W4, W19
	0x03C1BF24 MOV X6, X31
	0x03C1BF28 MOV X7, X31
	0x03C1BF2C BL 0x3C1BD64
	0x03C1BF30 LDP X20, X19, [X31 + 0x40]
	0x03C1BF34 LDP X22, X21, [X31 + 0x30]
	0x03C1BF38 LDP X24, X23, [X31 + 0x20]
	0x03C1BF3C LDP X30, X25, [X31 + 0x10]
	0x03C1BF40 ADD X31, X31, 0x50
	0x03C1BF44 RET
	0x03C1BF48 SUB X31, X31, 0x70
	0x03C1BF4C STP X29, X30, [X31 + 0x10]
	0x03C1BF50 STP X28, X27, [X31 + 0x20]
	0x03C1BF54 STP X26, X25, [X31 + 0x30]
	0x03C1BF58 STP X24, X23, [X31 + 0x40]
	0x03C1BF5C STP X22, X21, [X31 + 0x50]
	0x03C1BF60 STP X20, X19, [X31 + 0x60]
	0x03C1BF64 ADRP X19, 0x7C9000
	0x03C1BF68 LDR X27, [X31 + 0x78]
	0x03C1BF6C LDRB W8, [X19 + 0xD0B]
	0x03C1BF70 LDRB W28, [X31 + 0x70]
	0x03C1BF74 MOV W24, W7
	0x03C1BF78 MOV X29, X6
	0x03C1BF7C MOV W26, W5
	0x03C1BF80 MOV W20, W4
	0x03C1BF84 MOV W25, W3
	0x03C1BF88 MOV W21, W2
	0x03C1BF8C MOV W22, W1
	0x03C1BF90 MOV X23, X0
	0x03C1BF94 TBNZ X8, 0x0, 0x3C1BFB8
	0x03C1BF98 ADRP X0, 0x538000
	0x03C1BF9C LDR X0, [X0 + 0x90]
	0x03C1BFA0 BL 0x1C16CF4
	0x03C1BFA4 ADRP X0, 0x544000
	0x03C1BFA8 LDR X0, [X0 + 0x48]
	0x03C1BFAC BL 0x1C16CF4
	0x03C1BFB0 MOVZ W8, 0x1
	0x03C1BFB4 STRB W8, [X19 + 0xD0B]
	0x03C1BFB8 ADRP X8, 0x544000
	0x03C1BFBC LDR X8, [X8 + 0x48]
	0x03C1BFC0 LDR X0, [X8]
	0x03C1BFC4 LDR W8, [X0 + 0xE0]
	0x03C1BFC8 CBNZ W8, 0x3C1BFD0
	0x03C1BFCC BL 0x1C16DFC
	0x03C1BFD0 MOV X0, X23
	0x03C1BFD4 BL 0x3C1A69C
	0x03C1BFD8 MOV X0, X23
	0x03C1BFDC MOV W1, W25
	0x03C1BFE0 MOV W2, W22
	0x03C1BFE4 MOV W3, W21
	0x03C1BFE8 BL 0x3C1BB58
	0x03C1BFEC TBZ X0, 0x0, 0x3C1C0CC
	0x03C1BFF0 STR X29, [X31 + 0x8]
	0x03C1BFF4 ADRP X29, 0x538000
	0x03C1BFF8 LDR X29, [X29 + 0x90]
	0x03C1BFFC LDR X0, [X29]
	0x03C1C000 LDR W8, [X0 + 0xE0]
	0x03C1C004 CBNZ W8, 0x3C1C00C
	0x03C1C008 BL 0x1C16DFC
	0x03C1C00C EOR W19, W26, 0x1
	0x03C1C010 AND W1, W19, 0x1
	0x03C1C014 MOV W0, W25
	0x03C1C018 MOV X2, X31
	0x03C1C01C BL 0x3C61468
	0x03C1C020 MOV W26, W0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x7CA000
	007 Move W8, [X21+3217]
	008 Move W20, W1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x4D9000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x539000
	018 Move X0, [X0+144]
	019 Call 0x1C17CF4
	020 Move X0, 0x539000
	021 Move X0, [X0+1216]
	022 Call 0x1C17CF4
	023 Move X0, 0x545000
	024 Move X0, [X0+16]
	025 Call 0x1C17CF4
	026 Move X0, 0x545000
	027 Move X0, [X0+24]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3217], W8
	031 Move W0, W20
	032 Move X1, X31
	033 Call SystemInfo.SupportsTextureFormat, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {39}
	038 Move W0, 1
	039 Move X21, 0x539000
	040 Move X21, [X21+144]
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move W0, W20
	047 Move X1, X31
	048 Call GraphicsFormatUtility.IsCompressedFormat, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {99}
	053 Move X0, [X21]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move W0, W20
	059 Move W1, W31
	060 Move X2, X31
	061 Call GraphicsFormatUtility.GetGraphicsFormat, X0, X1
	062 Move X1, X31
	063 Call GraphicsFormatUtility.CanDecompressFormat, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {99}
	068 Move X8, 0x539000
	069 Move X8, [X8+1216]
	070 Move TEMP, 0
	071 Not TEMP
	072 Move X9, TEMP
	073 Add X0, X31, 8
	074 Move X1, X31
	075 Move X8, [X8]
	076 Move [X31+24], W20
	077 Move [X31+8], X8
	078 Move [X31+16], X9
	079 Call Enum.ToString, X0
	080 Move X8, 0x545000
	081 Move X8, [X8+24]
	082 Move X1, X0
	083 Move X2, X31
	084 Move X8, [X8]
	085 Move X0, X8
	086 Call String.Format, X0, X1
	087 Move X8, 0x4D9000
	088 Move X8, [X8+2600]
	089 Move X20, X0
	090 Move X8, [X8]
	091 Move W9, [X8+224]
	092 Compare W9, 0
	093 JumpIfNotEqual {96}
	094 Move X0, X8
	095 Call 0x1C17DFC
	096 Move X0, X20
	097 Move X1, X19
	098 Call Debug.LogWarning, X0, X1
	099 Move X8, 0x539000
	100 Move X8, [X8+1216]
	101 Move TEMP, 0
	102 Not TEMP
	103 Move X9, TEMP
	104 Add X0, X31, 8
	105 Move X1, X31
	106 Move X8, [X8]
	107 Move [X31+24], W20
	108 Move [X31+8], X8
	109 Move [X31+16], X9
	110 Call Enum.ToString, X0
	111 Move X8, 0x545000
	112 Move X8, [X8+16]
	113 Move X1, X0
	114 Move X2, X31
	115 Move X8, [X8]
	116 Move X0, X8
	117 Call String.Format, X0, X1
	118 Move X8, 0x4D9000
	119 Move X8, [X8+2600]
	120 Move X20, X0
	121 Move X8, [X8]
	122 Move W9, [X8+224]
	123 Compare W9, 0
	124 JumpIfNotEqual {127}
	125 Move X0, X8
	126 Call 0x1C17DFC
	127 Move X0, X20
	128 Move X1, X19
	129 Call Debug.LogError, X0, X1
	130 Move W0, W31
	131 Move X20, [X31+48]
	132 Move X19, [X31+56]
	133 Move X30, [X31+32]
	134 Move X21, [X31+40]
	135 Add X31, X31, 64
	136 Return X0

Method: System.Boolean ValidateFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)

Disassembly:
	0x03C1C024 LDR X0, [X29]
	0x03C1C028 CMP W20, 0x1
	0x03C1C02C CSET W29, NE
	0x03C1C030 LDR W8, [X0 + 0xE0]
	0x03C1C034 CBNZ W8, 0x3C1C03C
	0x03C1C038 BL 0x1C16DFC
	0x03C1C03C MOV W0, W25
	0x03C1C040 MOV X1, X31
	0x03C1C044 BL 0x3C61CEC
	0x03C1C048 ADRP X9, 0x543000
	0x03C1C04C LDR X9, [X9 + 0x48]
	0x03C1C050 ANDS W31, W0, 0x1
	0x03C1C054 ORR W8, W29, 0x40
	0x03C1C058 CSEL W8, W8, W29, NE
	0x03C1C05C LDR X0, [X9]
	0x03C1C060 MOVZ W9, 0x404
	0x03C1C064 ORR W9, W8, W9, 0x0
	0x03C1C068 ANDS W31, W24, 0x1
	0x03C1C06C LDR W10, [X0 + 0xE0]
	0x03C1C070 CSEL W8, W9, W8, NE
	0x03C1C074 ORR W9, W8, 0x800
	0x03C1C078 ANDS W31, W28, 0x1
	0x03C1C07C CSEL W24, W9, W8, NE
	0x03C1C080 CBNZ W10, 0x3C1C088
	0x03C1C084 BL 0x1C16DFC
	0x03C1C088 AND W5, W19, 0x1
	0x03C1C08C STR X27, [X31 + 0x70]
	0x03C1C090 MOV X0, X23
	0x03C1C094 MOV W1, W22
	0x03C1C098 MOV W2, W21
	0x03C1C09C MOV W3, W20
	0x03C1C0A0 MOV W4, W26
	0x03C1C0A4 MOV W6, W24
	0x03C1C0A8 LDR X7, [X31 + 0x8]
	0x03C1C0AC LDP X20, X19, [X31 + 0x60]
	0x03C1C0B0 LDP X22, X21, [X31 + 0x50]
	0x03C1C0B4 LDP X24, X23, [X31 + 0x40]
	0x03C1C0B8 LDP X26, X25, [X31 + 0x30]
	0x03C1C0BC LDP X28, X27, [X31 + 0x20]
	0x03C1C0C0 LDP X29, X30, [X31 + 0x10]
	0x03C1C0C4 ADD X31, X31, 0x70
	0x03C1C0C8 B 0x3C1B45C
	0x03C1C0CC LDP X20, X19, [X31 + 0x60]
	0x03C1C0D0 LDP X22, X21, [X31 + 0x50]
	0x03C1C0D4 LDP X24, X23, [X31 + 0x40]
	0x03C1C0D8 LDP X26, X25, [X31 + 0x30]
	0x03C1C0DC LDP X28, X27, [X31 + 0x20]
	0x03C1C0E0 LDP X29, X30, [X31 + 0x10]
	0x03C1C0E4 ADD X31, X31, 0x70
	0x03C1C0E8 RET
	0x03C1C0EC SUB X31, X31, 0x30
	0x03C1C0F0 STR X30, [X31 + 0x20]
	0x03C1C0F4 AND W5, W5, 0x1
	0x03C1C0F8 MOV X6, X31
	0x03C1C0FC MOV W7, W31
	0x03C1C100 STR X31, [X31 + 0x8]
	0x03C1C104 STRB W31, [X31]
	0x03C1C108 BL 0x3C1BF48
	0x03C1C10C LDR X30, [X31 + 0x20]
	0x03C1C110 ADD X31, X31, 0x30
	0x03C1C114 RET
	0x03C1C118 SUB X31, X31, 0x60
	0x03C1C11C STP X30, X25, [X31 + 0x20]
	0x03C1C120 STP X24, X23, [X31 + 0x30]
	0x03C1C124 STP X22, X21, [X31 + 0x40]
	0x03C1C128 STP X20, X19, [X31 + 0x50]
	0x03C1C12C ADRP X25, 0x7C8000
	0x03C1C130 LDRB W8, [X25 + 0xD0C]
	0x03C1C134 MOV W21, W5
	0x03C1C138 MOV W24, W4
	0x03C1C13C MOV W19, W3
	0x03C1C140 MOV W20, W2
	0x03C1C144 MOV W22, W1
	0x03C1C148 MOV X23, X0
	0x03C1C14C TBZ X8, 0x0, 0x3C1C17C
	0x03C1C150 TBZ X24, 0x0, 0x3C1C194
	0x03C1C154 ADRP X24, 0x543000
	0x03C1C158 LDR X24, [X24 + 0x48]
	0x03C1C15C LDR X0, [X24]
	0x03C1C160 LDR W8, [X0 + 0xE0]
	0x03C1C164 CBNZ W8, 0x3C1C170
	0x03C1C168 BL 0x1C16DFC
	0x03C1C16C LDR X0, [X24]
	0x03C1C170 LDR X8, [X0 + 0xB8]
	0x03C1C174 LDR W4, [X8]
	0x03C1C178 B 0x3C1C198
	0x03C1C17C ADRP X0, 0x543000
	0x03C1C180 LDR X0, [X0 + 0x48]
	0x03C1C184 BL 0x1C16CF4
	0x03C1C188 MOVZ W8, 0x1
	0x03C1C18C STRB W8, [X25 + 0xD0C]
	0x03C1C190 TBNZ X24, 0x0, 0x3C1C154
	0x03C1C194 MOVZ W4, 0x1
	0x03C1C198 AND W5, W21, 0x1
	0x03C1C19C MOV X0, X23
	0x03C1C1A0 MOV W1, W22
	0x03C1C1A4 MOV W2, W20
	0x03C1C1A8 MOV W3, W19
	0x03C1C1AC MOV X6, X31
	0x03C1C1B0 MOV W7, W31
	0x03C1C1B4 STR X31, [X31 + 0x8]
	0x03C1C1B8 STRB W31, [X31]
	0x03C1C1BC BL 0x3C1BF48
	0x03C1C1C0 LDP X20, X19, [X31 + 0x50]
	0x03C1C1C4 LDP X22, X21, [X31 + 0x40]
	0x03C1C1C8 LDP X24, X23, [X31 + 0x30]
	0x03C1C1CC LDP X30, X25, [X31 + 0x20]
	0x03C1C1D0 ADD X31, X31, 0x60
	0x03C1C1D4 RET
	0x03C1C1D8 SUB X31, X31, 0x60

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X22, 0x7C9000
	008 Move W8, [X22+3218]
	009 Move W20, W2
	010 Move W21, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0x4D8000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x544000
	020 Move X0, [X0+32]
	021 Call 0x1C17CF4
	022 Move X0, 0x538000
	023 Move X0, [X0+1208]
	024 Call 0x1C17CF4
	025 Move X0, 0x544000
	026 Move X0, [X0+40]
	027 Call 0x1C17CF4
	028 Move X0, 0x544000
	029 Move X0, [X0+48]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+3218], W8
	033 NotImplemented "Instruction CMP not yet implemented."
	034 And W8, W21, 0xFFFFFFFE
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, 0x538000
	037 Move X8, [X8+1208]
	038 Move TEMP, 0
	039 Not TEMP
	040 Move X9, TEMP
	041 Add X0, X31, 24
	042 Move X1, X31
	043 Move X8, [X8]
	044 Move [X31+40], W21
	045 Move [X31+24], X8
	046 Move [X31+32], X9
	047 Call Enum.ToString, X0
	048 Move X8, 0x544000
	049 Move X8, [X8+40]
	050 Move X1, X0
	051 Move X2, X31
	052 Move X8, [X8]
	053 Move X0, X8
	054 Call String.Format, X0, X1
	055 Move X8, 0x4D8000
	056 Move X8, [X8+2600]
	057 Move X20, X0
	058 Move X8, [X8]
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X20
	065 Move X1, X19
	066 Call Debug.LogWarning, X0, X1
	067 Move W0, W21
	068 Move W1, W20
	069 Move X2, X31
	070 Call SystemInfo.IsFormatSupported, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {76}
	075 Move W0, 1
	076 Move X8, 0x538000
	077 Move X8, [X8+1208]
	078 Move TEMP, 0
	079 Not TEMP
	080 Move X22, TEMP
	081 Add X0, X31, 24
	082 Move X1, X31
	083 Move X8, [X8]
	084 Move [X31+40], W21
	085 Move [X31+24], X8
	086 Move [X31+32], X22
	087 Call Enum.ToString, X0
	088 Move X8, 0x544000
	089 Move X8, [X8+32]
	090 Move X21, X0
	091 Add X0, X31, 0
	092 Move X1, X31
	093 Move X8, [X8]
	094 Move [X31+16], W20
	095 Move [X31], X8
	096 Move [X31+8], X22
	097 Call Enum.ToString, X0
	098 Move X8, 0x544000
	099 Move X8, [X8+48]
	100 Move X2, X0
	101 Move X1, X21
	102 Move X3, X31
	103 Move X8, [X8]
	104 Move X0, X8
	105 Call String.Format, X0, X1, X2
	106 Move X8, 0x4D8000
	107 Move X8, [X8+2600]
	108 Move X20, X0
	109 Move X8, [X8]
	110 Move W9, [X8+224]
	111 Compare W9, 0
	112 JumpIfNotEqual {115}
	113 Move X0, X8
	114 Call 0x1C17DFC
	115 Move X0, X20
	116 Move X1, X19
	117 Call Debug.LogError, X0, X1
	118 Move W0, W31
	119 Move X20, [X31+80]
	120 Move X19, [X31+88]
	121 Move X22, [X31+64]
	122 Move X21, [X31+72]
	123 Move X30, [X31+48]
	124 Add X31, X31, 96
	125 Return X0

Method: UnityEngine.UnityException CreateNonReadableException(UnityEngine.Texture t)

Disassembly:
	0x03C1C1DC STR X30, [X31 + 0x20]
	0x03C1C1E0 STP X24, X23, [X31 + 0x30]
	0x03C1C1E4 STP X22, X21, [X31 + 0x40]
	0x03C1C1E8 STP X20, X19, [X31 + 0x50]
	0x03C1C1EC ADRP X24, 0x7C8000
	0x03C1C1F0 LDRB W8, [X24 + 0xD0D]
	0x03C1C1F4 MOV W23, W4
	0x03C1C1F8 MOV W19, W3
	0x03C1C1FC MOV W20, W2
	0x03C1C200 MOV W21, W1
	0x03C1C204 MOV X22, X0
	0x03C1C208 TBZ X8, 0x0, 0x3C1C238
	0x03C1C20C TBZ X23, 0x0, 0x3C1C250
	0x03C1C210 ADRP X23, 0x543000
	0x03C1C214 LDR X23, [X23 + 0x48]
	0x03C1C218 LDR X0, [X23]
	0x03C1C21C LDR W8, [X0 + 0xE0]
	0x03C1C220 CBNZ W8, 0x3C1C22C
	0x03C1C224 BL 0x1C16DFC
	0x03C1C228 LDR X0, [X23]
	0x03C1C22C LDR X8, [X0 + 0xB8]
	0x03C1C230 LDR W4, [X8]
	0x03C1C234 B 0x3C1C254
	0x03C1C238 ADRP X0, 0x543000
	0x03C1C23C LDR X0, [X0 + 0x48]
	0x03C1C240 BL 0x1C16CF4
	0x03C1C244 MOVZ W8, 0x1
	0x03C1C248 STRB W8, [X24 + 0xD0D]
	0x03C1C24C TBNZ X23, 0x0, 0x3C1C210
	0x03C1C250 MOVZ W4, 0x1
	0x03C1C254 MOV X0, X22
	0x03C1C258 MOV W1, W21
	0x03C1C25C MOV W2, W20
	0x03C1C260 MOV W3, W19
	0x03C1C264 MOV W5, W31
	0x03C1C268 MOV X6, X31
	0x03C1C26C MOV W7, W31
	0x03C1C270 STR X31, [X31 + 0x8]
	0x03C1C274 STRB W31, [X31]
	0x03C1C278 BL 0x3C1BF48

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7C9000
	006 Move W8, [X20+3219]
	007 Move X19, X1
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x501000
	013 Move X0, [X0+464]
	014 Call 0x1C17CF4
	015 Move X0, 0x544000
	016 Move X0, [X0+56]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3219], W8
	020 Compare X19, 0
	021 JumpIfEqual {48}
	022 Move X20, 0x544000
	023 Move X21, 0x501000
	024 Move X20, [X20+56]
	025 Move X21, [X21+464]
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object.get_name, X0
	029 Move X8, [X20]
	030 Move X1, X0
	031 Move X2, X31
	032 Move X0, X8
	033 Call String.Format, X0, X1
	034 Move X8, [X21]
	035 Move X19, X0
	036 Move X0, X8
	037 Call 0x1C17F10
	038 Move X1, X19
	039 Move X2, X31
	040 Move X20, X0
	041 Call UnityException..ctor, X0, X1
	042 Move X0, X20
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0
	048 Call 0x1C17F20

Method: UnityEngine.UnityException CreateNativeArrayLengthOverflowException()

Disassembly:
	0x03C1C27C LDP X20, X19, [X31 + 0x50]
	0x03C1C280 LDP X22, X21, [X31 + 0x40]
	0x03C1C284 LDP X24, X23, [X31 + 0x30]
	0x03C1C288 LDR X30, [X31 + 0x20]
	0x03C1C28C ADD X31, X31, 0x60
	0x03C1C290 RET
	0x03C1C294 STP D11, D10, [X31 - 0x40]!
	0x03C1C298 STP D9, D8, [X31 + 0x10]
	0x03C1C29C STP X30, X21, [X31 + 0x20]
	0x03C1C2A0 STP X20, X19, [X31 + 0x30]
	0x03C1C2A4 LDR X8, [X0]
	0x03C1C2A8 MOV W21, W1
	0x03C1C2AC MOV V8.16B, V3.16B
	0x03C1C2B0 MOV V9.16B, V2.16B
	0x03C1C2B4 LDP X9, X8, [X8 + 0x1E8]
	0x03C1C2B8 MOV V10.16B, V1.16B
	0x03C1C2BC MOV V11.16B, V0.16B
	0x03C1C2C0 MOV W19, W2
	0x03C1C2C4 MOV X1, X8
	0x03C1C2C8 MOV X20, X0
	0x03C1C2CC BLR X9
	0x03C1C2D0 TBZ X0, 0x0, 0x3C1C30C
	0x03C1C2D4 MOV X0, X20
	0x03C1C2D8 MOV W3, W21
	0x03C1C2DC MOV W4, W19
	0x03C1C2E0 MOV V2.16B, V9.16B
	0x03C1C2E4 MOV V3.16B, V8.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7C9000
	006 Move X21, 0x501000
	007 Move X19, 0x544000
	008 Move W8, [X20+3220]
	009 Move X21, [X21+464]
	010 Move X19, [X19+64]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x501000
	016 Move X0, [X0+464]
	017 Call 0x1C17CF4
	018 Move X0, 0x544000
	019 Move X0, [X0+64]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3220], W8
	023 Move X0, [X21]
	024 Call 0x1C17F10
	025 Move X1, [X19]
	026 Move X2, X31
	027 Move X19, X0
	028 Call UnityException..ctor, X0, X1
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03C1C2E8 LDP X20, X19, [X31 + 0x30]
	0x03C1C2EC LDP X30, X21, [X31 + 0x20]
	0x03C1C2F0 LDP D9, D8, [X31 + 0x10]
	0x03C1C2F4 MOV W1, W31
	0x03C1C2F8 MOV W2, W31
	0x03C1C2FC MOV V0.16B, V11.16B
	0x03C1C300 MOV V1.16B, V10.16B
	0x03C1C304 LDP D11, D10, [X31], #0x40
	0x03C1C308 B 0x3C1B634
	0x03C1C30C MOV X1, X20
	0x03C1C310 BL 0x3C1B1DC
	0x03C1C314 MOV X19, X0
	0x03C1C318 ADRP X0, 0x543000
	0x03C1C31C LDR X0, [X0 + 0x78]
	0x03C1C320 BL 0x1C16D08
	0x03C1C324 MOV X1, X0
	0x03C1C328 MOV X0, X19
	0x03C1C32C BL 0x1C16DEC
	0x03C1C330 STR X30, [X31 - 0x50]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x7C9000
	005 Move X20, 0x544000
	006 Move W8, [X19+3221]
	007 Move X20, [X20+72]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x544000
	013 Move X0, [X0+72]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3221], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move TEMP, 0
	021 Not TEMP
	022 Move W9, TEMP
	023 Move X8, [X8+184]
	024 Move [X8], W9
	025 Move X30, [X31+32]
	026 Return 

Method: System.Void get_texelSize_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C1BCF4 MOVN X8, 0x0
	0x03C1BCF8 STP X0, X8, [X31 + 0x8]
	0x03C1BCFC ADD X0, X31, 0x8
	0x03C1BD00 MOV X1, X31
	0x03C1BD04 STR W19, [X31 + 0x18]
	0x03C1BD08 BL 0x33B162C
	0x03C1BD0C MOV X19, X0
	0x03C1BD10 ADRP X0, 0x544000
	0x03C1BD14 LDR X0, [X0 + 0x60]
	0x03C1BD18 BL 0x1C16D08
	0x03C1BD1C MOV X1, X19
	0x03C1BD20 MOV X2, X31
	0x03C1BD24 BL 0x321EFD0
	0x03C1BD28 MOV X19, X0
	0x03C1BD2C ADRP X0, 0x501000
	0x03C1BD30 LDR X0, [X0 + 0x1D0]
	0x03C1BD34 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7CA000
	006 Move X2, [X21+3224]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51523584
	012 Add X0, X0, 296
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3224], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

