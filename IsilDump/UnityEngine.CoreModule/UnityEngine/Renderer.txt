Type: UnityEngine.Renderer

Method: UnityEngine.Bounds get_bounds()

Disassembly:
	0x03C13A28 LDR X1, [X20 + 0x7A8]
	0x03C13A2C MOV X19, X0
	0x03C13A30 CBNZ X1, 0x3C13A48
	0x03C13A34 ADRP X0, 0xFFFFFFFFFCEE8000
	0x03C13A38 ADD X0, X0, 0xD1
	0x03C13A3C BL 0x1C16CB8
	0x03C13A40 MOV X1, X0
	0x03C13A44 STR X0, [X20 + 0x7A8]
	0x03C13A48 MOV X0, X19
	0x03C13A4C LDP X20, X19, [X31 + 0x10]
	0x03C13A50 LDR X30, [X31], #0x20
	0x03C13A54 BR X1
	0x03C13A58 SUB X31, X31, 0x20
	0x03C13A5C STP X30, X19, [X31 + 0x10]
	0x03C13A60 ADRP X19, 0x7D1000
	0x03C13A64 LDR X8, [X19 + 0x7B0]
	0x03C13A68 STP X31, X31, [X31]
	0x03C13A6C CBNZ X8, 0x3C13A84
	0x03C13A70 ADRP X0, 0xFFFFFFFFFCEF8000
	0x03C13A74 ADD X0, X0, 0xFD
	0x03C13A78 BL 0x1C16CB8
	0x03C13A7C MOV X8, X0
	0x03C13A80 STR X0, [X19 + 0x7B0]
	0x03C13A84 ADD X0, X31, 0x0
	0x03C13A88 BLR X8
	0x03C13A8C LDP S0, S1, [X31]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x7D2000
	007 Move X19, X8
	008 Move X8, [X21+1856]
	009 Move X20, X0
	010 Move [X31+8], X31
	011 Move [X31+16], X31
	012 Move [X31+24], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51466240
	016 Add X0, X0, 675
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X21+1856], X0
	020 Add X1, X31, 8
	021 Move X0, X20
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move X8, [X31+24]
	024 NotImplemented "Instruction LDUR not yet implemented."
	025 Move X30, [X31+32]
	026 Move X21, [X31+40]
	027 Move [X19+16], X8
	028 Move [X19], V0
	029 Move X20, [X31+48]
	030 Move X19, [X31+56]
	031 Add X31, X31, 64
	032 Return X0

Method: System.Void set_localBounds(UnityEngine.Bounds value)

Disassembly:
	0x03C13AD4 LDR X30, [X31], #0x20
	0x03C13AD8 BR X1
	0x03C13ADC SUB X31, X31, 0x20
	0x03C13AE0 STP X30, X19, [X31 + 0x10]
	0x03C13AE4 ADRP X19, 0x7D1000
	0x03C13AE8 LDR X8, [X19 + 0x7B8]
	0x03C13AEC STP X31, X31, [X31]
	0x03C13AF0 CBNZ X8, 0x3C13B08
	0x03C13AF4 ADRP X0, 0xFFFFFFFFFCEF3000
	0x03C13AF8 ADD X0, X0, 0xEF7
	0x03C13AFC BL 0x1C16CB8
	0x03C13B00 MOV X8, X0
	0x03C13B04 STR X0, [X19 + 0x7B8]
	0x03C13B08 ADD X0, X31, 0x0
	0x03C13B0C BLR X8
	0x03C13B10 LDP S0, S1, [X31]
	0x03C13B14 LDP S2, S3, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1864]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51363840
	012 Add X0, X0, 1992
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1864], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Material GetMaterial()

Disassembly:
	0x03C13B5C BR X1
	0x03C13B60 SUB X31, X31, 0x20
	0x03C13B64 STP X30, X19, [X31 + 0x10]
	0x03C13B68 ADRP X19, 0x7D1000
	0x03C13B6C LDR X8, [X19 + 0x7C0]
	0x03C13B70 STP S0, S1, [X31]
	0x03C13B74 STP S2, S3, [X31 + 0x8]
	0x03C13B78 CBNZ X8, 0x3C13B90
	0x03C13B7C ADRP X0, 0xFFFFFFFFFCF09000
	0x03C13B80 ADD X0, X0, 0xE36
	0x03C13B84 BL 0x1C16CB8
	0x03C13B88 MOV X8, X0
	0x03C13B8C STR X0, [X19 + 0x7C0]
	0x03C13B90 ADD X0, X31, 0x0
	0x03C13B94 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D2000
	005 Move X1, [X20+1656]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51466240
	010 Add X0, X0, 569
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1656], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Material GetSharedMaterial()

Disassembly:
	0x03C13B98 LDP X30, X19, [X31 + 0x10]
	0x03C13B9C ADD X31, X31, 0x20
	0x03C13BA0 RET
	0x03C13BA4 STR X30, [X31 - 0x20]!
	0x03C13BA8 STP X20, X19, [X31 + 0x10]
	0x03C13BAC ADRP X20, 0x7D1000
	0x03C13BB0 LDR X1, [X20 + 0x7C0]
	0x03C13BB4 MOV X19, X0
	0x03C13BB8 CBNZ X1, 0x3C13BD0
	0x03C13BBC ADRP X0, 0xFFFFFFFFFCF09000
	0x03C13BC0 ADD X0, X0, 0xE36
	0x03C13BC4 BL 0x1C16CB8
	0x03C13BC8 MOV X1, X0
	0x03C13BCC STR X0, [X20 + 0x7C0]
	0x03C13BD0 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D2000
	005 Move X1, [X20+1664]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51474432
	010 Add X0, X0, 84
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1664], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetMaterial(UnityEngine.Material m)

Disassembly:
	0x03C13BD4 LDP X20, X19, [X31 + 0x10]
	0x03C13BD8 LDR X30, [X31], #0x20
	0x03C13BDC BR X1
	0x03C13BE0 SUB X31, X31, 0x20
	0x03C13BE4 STP X30, X19, [X31 + 0x10]
	0x03C13BE8 ADRP X19, 0x7D1000
	0x03C13BEC LDR X8, [X19 + 0x7C8]
	0x03C13BF0 STP X31, X31, [X31]
	0x03C13BF4 CBNZ X8, 0x3C13C0C
	0x03C13BF8 ADRP X0, 0xFFFFFFFFFCF0B000
	0x03C13BFC ADD X0, X0, 0xAEE
	0x03C13C00 BL 0x1C16CB8
	0x03C13C04 MOV X8, X0
	0x03C13C08 STR X0, [X19 + 0x7C8]
	0x03C13C0C ADD X0, X31, 0x0
	0x03C13C10 BLR X8
	0x03C13C14 LDP S0, S1, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1672]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51527680
	012 Add X0, X0, 3509
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1672], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Material[] GetMaterialArray()

Disassembly:
	0x03C13C18 LDP S2, S3, [X31 + 0x8]
	0x03C13C1C LDP X30, X19, [X31 + 0x10]
	0x03C13C20 ADD X31, X31, 0x20
	0x03C13C24 RET
	0x03C13C28 STR X30, [X31 - 0x20]!
	0x03C13C2C STP X20, X19, [X31 + 0x10]
	0x03C13C30 ADRP X20, 0x7D1000
	0x03C13C34 LDR X1, [X20 + 0x7C8]
	0x03C13C38 MOV X19, X0
	0x03C13C3C CBNZ X1, 0x3C13C54
	0x03C13C40 ADRP X0, 0xFFFFFFFFFCF0B000
	0x03C13C44 ADD X0, X0, 0xAEE
	0x03C13C48 BL 0x1C16CB8
	0x03C13C4C MOV X1, X0
	0x03C13C50 STR X0, [X20 + 0x7C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D2000
	005 Move X1, [X20+1680]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51355648
	010 Add X0, X0, 1914
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1680], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void CopyMaterialArray(out UnityEngine.Material[] m)

Disassembly:
	0x03C13C54 MOV X0, X19
	0x03C13C58 LDP X20, X19, [X31 + 0x10]
	0x03C13C5C LDR X30, [X31], #0x20
	0x03C13C60 BR X1
	0x03C13C64 SUB X31, X31, 0x20
	0x03C13C68 STP X30, X19, [X31 + 0x10]
	0x03C13C6C ADRP X19, 0x7D1000
	0x03C13C70 LDR X8, [X19 + 0x7D0]
	0x03C13C74 STP S0, S1, [X31]
	0x03C13C78 STP S2, S3, [X31 + 0x8]
	0x03C13C7C CBNZ X8, 0x3C13C94
	0x03C13C80 ADRP X0, 0xFFFFFFFFFCEEB000
	0x03C13C84 ADD X0, X0, 0xFAE
	0x03C13C88 BL 0x1C16CB8
	0x03C13C8C MOV X8, X0
	0x03C13C90 STR X0, [X19 + 0x7D0]
	0x03C13C94 ADD X0, X31, 0x0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1688]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51322880
	012 Add X0, X0, 2236
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1688], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void CopySharedMaterialArray(out UnityEngine.Material[] m)

Disassembly:
	0x03C13C98 BLR X8
	0x03C13C9C LDP X30, X19, [X31 + 0x10]
	0x03C13CA0 ADD X31, X31, 0x20
	0x03C13CA4 RET
	0x03C13CA8 STR X30, [X31 - 0x20]!
	0x03C13CAC STP X20, X19, [X31 + 0x10]
	0x03C13CB0 ADRP X20, 0x7D1000
	0x03C13CB4 LDR X1, [X20 + 0x7D0]
	0x03C13CB8 MOV X19, X0
	0x03C13CBC CBNZ X1, 0x3C13CD4
	0x03C13CC0 ADRP X0, 0xFFFFFFFFFCEEB000
	0x03C13CC4 ADD X0, X0, 0xFAE
	0x03C13CC8 BL 0x1C16CB8
	0x03C13CCC MOV X1, X0
	0x03C13CD0 STR X0, [X20 + 0x7D0]
	0x03C13CD4 MOV X0, X19
	0x03C13CD8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1696]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51466240
	012 Add X0, X0, 605
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1696], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetMaterialArray(UnityEngine.Material[] m, System.Int32 length)

Disassembly:
	0x03C13CDC LDR X30, [X31], #0x20
	0x03C13CE0 BR X1
	0x03C13CE4 STP X30, X19, [X31 - 0x10]!
	0x03C13CE8 ADRP X19, 0x7D1000
	0x03C13CEC LDR X0, [X19 + 0x770]
	0x03C13CF0 CBNZ X0, 0x3C13D04
	0x03C13CF4 ADRP X0, 0xFFFFFFFFFCEF5000
	0x03C13CF8 ADD X0, X0, 0xF93
	0x03C13CFC BL 0x1C16CB8
	0x03C13D00 STR X0, [X19 + 0x770]
	0x03C13D04 LDP X30, X19, [X31], #0x10
	0x03C13D08 BR X0
	0x03C13D0C STR X30, [X31 - 0x20]!
	0x03C13D10 STP X20, X19, [X31 + 0x10]
	0x03C13D14 ADRP X20, 0x7D1000
	0x03C13D18 LDR X1, [X20 + 0x778]
	0x03C13D1C MOV X19, X0
	0x03C13D20 CBNZ X1, 0x3C13D38
	0x03C13D24 ADRP X0, 0xFFFFFFFFFCEDB000
	0x03C13D28 ADD X0, X0, 0xDED
	0x03C13D2C BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D2000
	007 Move X3, [X22+1704]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51290112
	014 Add X0, X0, 1352
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1704], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetMaterialArray(UnityEngine.Material[] m)

Disassembly:
	0x03C13D30 MOV X1, X0
	0x03C13D34 STR X0, [X20 + 0x778]
	0x03C13D38 MOV X0, X19
	0x03C13D3C LDP X20, X19, [X31 + 0x10]
	0x03C13D40 LDR X30, [X31], #0x20
	0x03C13D44 BR X1
	0x03C13D48 STP X30, X19, [X31 - 0x10]!
	0x03C13D4C ADRP X19, 0x7D1000
	0x03C13D50 LDR X0, [X19 + 0x780]
	0x03C13D54 CBNZ X0, 0x3C13D68
	0x03C13D58 ADRP X0, 0xFFFFFFFFFCF03000
	0x03C13D5C ADD X0, X0, 0x80C
	0x03C13D60 BL 0x1C16CB8
	0x03C13D64 STR X0, [X19 + 0x780]
	0x03C13D68 LDP X30, X19, [X31], #0x10
	0x03C13D6C BR X0
	0x03C13D70 SUB X31, X31, 0x90
	0x03C13D74 STR X30, [X31 + 0x70]
	0x03C13D78 STP X20, X19, [X31 + 0x80]
	0x03C13D7C ADRP X20, 0x7D1000
	0x03C13D80 MOV X19, X8
	0x03C13D84 LDR X8, [X20 + 0x7D8]
	0x03C13D88 MOVI V0.2D, 0x0
	0x03C13D8C STUR V0, [X31 + 0x5C]
	0x03C13D90 STP V0, V0, [X31 + 0x40]
	0x03C13D94 STP V0, V0, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X1
	007 Move X20, X0
	008 Compare X1, 0
	009 JumpIfEqual {31}
	010 Move W21, [X19+24]
	011 Compare X20, 0
	012 JumpIfEqual {34}
	013 Move X22, 0x7D2000
	014 Move X3, [X22+1704]
	015 Compare X3, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51290112
	018 Add X0, X0, 1352
	019 Call 0x1C17CB8
	020 Move X3, X0
	021 Move [X22+1704], X0
	022 Move X0, X20
	023 Move X1, X19
	024 Move W2, W21
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 CallNoReturn X3
	031 Move W21, W31
	032 Compare X20, 0
	033 JumpIfNotEqual {13}
	034 Call 0x1C17F20

Method: System.Void Internal_SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties)

Disassembly:
	0x03C13D98 STP V0, V0, [X31]
	0x03C13D9C CBNZ X8, 0x3C13DB4
	0x03C13DA0 ADRP X0, 0xFFFFFFFFFCEFF000
	0x03C13DA4 ADD X0, X0, 0xA9D
	0x03C13DA8 BL 0x1C16CB8
	0x03C13DAC MOV X8, X0
	0x03C13DB0 STR X0, [X20 + 0x7D8]
	0x03C13DB4 ADD X0, X31, 0x0
	0x03C13DB8 BLR X8
	0x03C13DBC ADD X1, X31, 0x0
	0x03C13DC0 MOVZ W2, 0x6C
	0x03C13DC4 MOV X0, X19
	0x03C13DC8 BL 0x3EB1AC0
	0x03C13DCC LDP X20, X19, [X31 + 0x80]
	0x03C13DD0 LDR X30, [X31 + 0x70]
	0x03C13DD4 ADD X31, X31, 0x90
	0x03C13DD8 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1712]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51474432
	012 Add X0, X0, 126
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1712], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Internal_GetPropertyBlock(UnityEngine.MaterialPropertyBlock dest)

Disassembly:
	0x03C13DDC STR X30, [X31 - 0x20]!
	0x03C13DE0 STP X20, X19, [X31 + 0x10]
	0x03C13DE4 ADRP X20, 0x7D1000
	0x03C13DE8 LDR X1, [X20 + 0x7D8]
	0x03C13DEC MOV X19, X0
	0x03C13DF0 CBNZ X1, 0x3C13E08
	0x03C13DF4 ADRP X0, 0xFFFFFFFFFCEFF000
	0x03C13DF8 ADD X0, X0, 0xA9D
	0x03C13DFC BL 0x1C16CB8
	0x03C13E00 MOV X1, X0
	0x03C13E04 STR X0, [X20 + 0x7D8]
	0x03C13E08 MOV X0, X19
	0x03C13E0C LDP X20, X19, [X31 + 0x10]
	0x03C13E10 LDR X30, [X31], #0x20
	0x03C13E14 BR X1
	0x03C13E18 STP X30, X19, [X31 - 0x10]!
	0x03C13E1C ADRP X19, 0x7D1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1720]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51519488
	012 Add X0, X0, 3507
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1720], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Internal_SetPropertyBlockMaterialIndex(UnityEngine.MaterialPropertyBlock properties, System.Int32 materialIndex)

Disassembly:
	0x03C13E20 LDR X0, [X19 + 0x788]
	0x03C13E24 CBNZ X0, 0x3C13E38
	0x03C13E28 ADRP X0, 0xFFFFFFFFFCEFF000
	0x03C13E2C ADD X0, X0, 0xA67
	0x03C13E30 BL 0x1C16CB8
	0x03C13E34 STR X0, [X19 + 0x788]
	0x03C13E38 LDP X30, X19, [X31], #0x10
	0x03C13E3C BR X0
	0x03C13E40 STP X30, X21, [X31 - 0x20]!
	0x03C13E44 STP X20, X19, [X31 + 0x10]
	0x03C13E48 ADRP X20, 0x7D1000
	0x03C13E4C ADRP X21, 0x54B000
	0x03C13E50 LDRB W8, [X20 + 0x7E0]
	0x03C13E54 LDR X21, [X21 + 0xDE8]
	0x03C13E58 MOV X19, X0
	0x03C13E5C TBNZ X8, 0x0, 0x3C13E74
	0x03C13E60 ADRP X0, 0x54B000
	0x03C13E64 LDR X0, [X0 + 0xDE8]
	0x03C13E68 BL 0x1C16CF4
	0x03C13E6C MOVZ W8, 0x1
	0x03C13E70 STRB W8, [X20 + 0x7E0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D2000
	007 Move X3, [X22+1728]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51486720
	014 Add X0, X0, 3948
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1728], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void Internal_GetPropertyBlockMaterialIndex(UnityEngine.MaterialPropertyBlock dest, System.Int32 materialIndex)

Disassembly:
	0x03C13E74 LDR X0, [X21]
	0x03C13E78 LDR W8, [X0 + 0xE0]
	0x03C13E7C CBNZ W8, 0x3C13E84
	0x03C13E80 BL 0x1C16DFC
	0x03C13E84 MOV X0, X31
	0x03C13E88 BL 0x3C30EFC
	0x03C13E8C CBZ X0, 0x3C13EA8
	0x03C13E90 LDR X8, [X0]
	0x03C13E94 MOV X1, X19
	0x03C13E98 LDP X20, X19, [X31 + 0x10]
	0x03C13E9C LDP X3, X2, [X8 + 0x188]
	0x03C13EA0 LDP X30, X21, [X31], #0x20
	0x03C13EA4 BR X3
	0x03C13EA8 BL 0x1C16F20
	0x03C13EAC STR X30, [X31 - 0x20]!
	0x03C13EB0 STP X20, X19, [X31 + 0x10]
	0x03C13EB4 ADRP X20, 0x7D1000
	0x03C13EB8 LDR X1, [X20 + 0x7E8]
	0x03C13EBC MOV X19, X0
	0x03C13EC0 CBNZ X1, 0x3C13ED8
	0x03C13EC4 ADRP X0, 0xFFFFFFFFFCEF5000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D2000
	007 Move X3, [X22+1736]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51511296
	014 Add X0, X0, 4001
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1736], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties)

Disassembly:
	0x03C13EC8 ADD X0, X0, 0xFBC
	0x03C13ECC BL 0x1C16CB8
	0x03C13ED0 MOV X1, X0
	0x03C13ED4 STR X0, [X20 + 0x7E8]
	0x03C13ED8 MOV X0, X19
	0x03C13EDC LDP X20, X19, [X31 + 0x10]
	0x03C13EE0 LDR X30, [X31], #0x20
	0x03C13EE4 BR X1
	0x03C13EE8 STR X30, [X31 - 0x20]!
	0x03C13EEC STP X20, X19, [X31 + 0x10]
	0x03C13EF0 ADRP X20, 0x7D1000
	0x03C13EF4 LDR X1, [X20 + 0x7F0]
	0x03C13EF8 MOV X19, X0
	0x03C13EFC CBNZ X1, 0x3C13F14
	0x03C13F00 ADRP X0, 0xFFFFFFFFFCF15000
	0x03C13F04 ADD X0, X0, 0x594
	0x03C13F08 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1712]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51474432
	012 Add X0, X0, 126
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1712], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties, System.Int32 materialIndex)

Disassembly:
	0x03C13F0C MOV X1, X0
	0x03C13F10 STR X0, [X20 + 0x7F0]
	0x03C13F14 MOV X0, X19
	0x03C13F18 LDP X20, X19, [X31 + 0x10]
	0x03C13F1C LDR X30, [X31], #0x20
	0x03C13F20 BR X1
	0x03C13F24 STR X30, [X31 - 0x20]!
	0x03C13F28 STP X20, X19, [X31 + 0x10]
	0x03C13F2C ADRP X20, 0x7D1000
	0x03C13F30 LDR X8, [X20 + 0x840]
	0x03C13F34 MOV X19, X0
	0x03C13F38 STR X31, [X31 + 0x8]
	0x03C13F3C CBNZ X8, 0x3C13F54
	0x03C13F40 ADRP X0, 0xFFFFFFFFFCF07000
	0x03C13F44 ADD X0, X0, 0xA35
	0x03C13F48 BL 0x1C16CB8
	0x03C13F4C MOV X8, X0
	0x03C13F50 STR X0, [X20 + 0x840]
	0x03C13F54 ADD X1, X31, 0x8
	0x03C13F58 MOV X0, X19
	0x03C13F5C BLR X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D2000
	007 Move X3, [X22+1728]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51486720
	014 Add X0, X0, 3948
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1728], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void GetPropertyBlock(UnityEngine.MaterialPropertyBlock properties)

Disassembly:
	0x03C13F60 LDR X0, [X31 + 0x8]
	0x03C13F64 LDP X20, X19, [X31 + 0x10]
	0x03C13F68 LDR X30, [X31], #0x20
	0x03C13F6C RET
	0x03C13F70 STP X30, X21, [X31 - 0x20]!
	0x03C13F74 STP X20, X19, [X31 + 0x10]
	0x03C13F78 ADRP X21, 0x7D1000
	0x03C13F7C LDR X2, [X21 + 0x840]
	0x03C13F80 MOV X19, X1
	0x03C13F84 MOV X20, X0
	0x03C13F88 CBNZ X2, 0x3C13FA0
	0x03C13F8C ADRP X0, 0xFFFFFFFFFCF07000
	0x03C13F90 ADD X0, X0, 0xA35
	0x03C13F94 BL 0x1C16CB8
	0x03C13F98 MOV X2, X0
	0x03C13F9C STR X0, [X21 + 0x840]
	0x03C13FA0 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1720]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51519488
	012 Add X0, X0, 3507
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1720], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void GetPropertyBlock(UnityEngine.MaterialPropertyBlock properties, System.Int32 materialIndex)

Disassembly:
	0x03C13FA4 MOV X1, X19
	0x03C13FA8 LDP X20, X19, [X31 + 0x10]
	0x03C13FAC LDP X30, X21, [X31], #0x20
	0x03C13FB0 BR X2
	0x03C13FB4 STR X30, [X31 - 0x20]!
	0x03C13FB8 STP X20, X19, [X31 + 0x10]
	0x03C13FBC ADRP X20, 0x7D1000
	0x03C13FC0 LDR X1, [X20 + 0x7F8]
	0x03C13FC4 MOV X19, X0
	0x03C13FC8 CBNZ X1, 0x3C13FE0
	0x03C13FCC ADRP X0, 0xFFFFFFFFFCEE5000
	0x03C13FD0 ADD X0, X0, 0xFD9
	0x03C13FD4 BL 0x1C16CB8
	0x03C13FD8 MOV X1, X0
	0x03C13FDC STR X0, [X20 + 0x7F8]
	0x03C13FE0 MOV X0, X19
	0x03C13FE4 LDP X20, X19, [X31 + 0x10]
	0x03C13FE8 LDR X30, [X31], #0x20
	0x03C13FEC BR X1
	0x03C13FF0 STR X30, [X31 - 0x20]!
	0x03C13FF4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7D2000
	007 Move X3, [X22+1736]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51511296
	014 Add X0, X0, 4001
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1736], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean get_enabled()

Disassembly:
	0x03C13FF8 ADRP X20, 0x7D1000
	0x03C13FFC LDR X1, [X20 + 0x800]
	0x03C14000 MOV X19, X0
	0x03C14004 CBNZ X1, 0x3C1401C
	0x03C14008 ADRP X0, 0xFFFFFFFFFCEE2000
	0x03C1400C ADD X0, X0, 0xFC2
	0x03C14010 BL 0x1C16CB8
	0x03C14014 MOV X1, X0
	0x03C14018 STR X0, [X20 + 0x800]
	0x03C1401C MOV X0, X19
	0x03C14020 LDP X20, X19, [X31 + 0x10]
	0x03C14024 LDR X30, [X31], #0x20
	0x03C14028 BR X1
	0x03C1402C SUB X31, X31, 0x30
	0x03C14030 STP X1, X30, [X31 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1744]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51277824
	010 Add X0, X0, 1829
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1744], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_enabled(System.Boolean value)

Disassembly:
	0x03C14034 STP X20, X19, [X31 + 0x20]
	0x03C14038 ADRP X20, 0x7D0000
	0x03C1403C LDR X8, [X20 + 0x848]
	0x03C14040 MOV W19, W2
	0x03C14044 STR X0, [X31]
	0x03C14048 CBNZ X8, 0x3C14060
	0x03C1404C ADRP X0, 0xFFFFFFFFFCEDF000
	0x03C14050 ADD X0, X0, 0xE
	0x03C14054 BL 0x1C16CB8
	0x03C14058 MOV X8, X0
	0x03C1405C STR X0, [X20 + 0x848]
	0x03C14060 AND W1, W19, 0x1
	0x03C14064 ADD X0, X31, 0x0
	0x03C14068 BLR X8
	0x03C1406C LDP X20, X19, [X31 + 0x20]
	0x03C14070 LDR X30, [X31 + 0x10]
	0x03C14074 ADD X31, X31, 0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D1000
	006 Move X2, [X21+1752]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51408896
	012 Add X0, X0, 3469
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1752], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_shadowCastingMode(UnityEngine.Rendering.ShadowCastingMode value)

Disassembly:
	0x03C14078 RET
	0x03C1407C STP X30, X21, [X31 - 0x20]!
	0x03C14080 STP X20, X19, [X31 + 0x10]
	0x03C14084 ADRP X21, 0x7D0000
	0x03C14088 LDR X2, [X21 + 0x848]
	0x03C1408C MOV W19, W1
	0x03C14090 MOV X20, X0
	0x03C14094 CBNZ X2, 0x3C140AC
	0x03C14098 ADRP X0, 0xFFFFFFFFFCEDF000
	0x03C1409C ADD X0, X0, 0xE
	0x03C140A0 BL 0x1C16CB8
	0x03C140A4 MOV X2, X0
	0x03C140A8 STR X0, [X21 + 0x848]
	0x03C140AC AND W1, W19, 0x1
	0x03C140B0 MOV X0, X20
	0x03C140B4 LDP X20, X19, [X31 + 0x10]
	0x03C140B8 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D1000
	006 Move X2, [X21+1760]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51449856
	012 Add X0, X0, 3464
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1760], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_receiveShadows(System.Boolean value)

Disassembly:
	0x03C140BC BR X2
	0x03C140C0 LDP X8, X9, [X0]
	0x03C140C4 AND W2, W1, 0x1
	0x03C140C8 MOV X0, X8
	0x03C140CC MOV X1, X9
	0x03C140D0 B 0x3C1402C
	0x03C140D4 STR X30, [X31 - 0x20]!
	0x03C140D8 STP X20, X19, [X31 + 0x10]
	0x03C140DC ADRP X20, 0x7D0000
	0x03C140E0 LDR X1, [X20 + 0x808]
	0x03C140E4 MOV X19, X0
	0x03C140E8 CBNZ X1, 0x3C14100
	0x03C140EC ADRP X0, 0xFFFFFFFFFCEE7000
	0x03C140F0 ADD X0, X0, 0x122
	0x03C140F4 BL 0x1C16CB8
	0x03C140F8 MOV X1, X0
	0x03C140FC STR X0, [X20 + 0x808]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D1000
	006 Move X2, [X21+1768]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51412992
	012 Add X0, X0, 100
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1768], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_sortingLayerID()

Disassembly:
	0x03C14100 MOV X0, X19
	0x03C14104 LDP X20, X19, [X31 + 0x10]
	0x03C14108 LDR X30, [X31], #0x20
	0x03C1410C BR X1
	0x03C14110 STR X30, [X31 - 0x20]!
	0x03C14114 STP X20, X19, [X31 + 0x10]
	0x03C14118 ADRP X20, 0x7D0000
	0x03C1411C LDR X1, [X20 + 0x818]
	0x03C14120 MOV X19, X0
	0x03C14124 CBNZ X1, 0x3C1413C
	0x03C14128 ADRP X0, 0xFFFFFFFFFCF14000
	0x03C1412C ADD X0, X0, 0x5D0
	0x03C14130 BL 0x1C16CB8
	0x03C14134 MOV X1, X0
	0x03C14138 STR X0, [X20 + 0x818]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1776]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51412992
	010 Add X0, X0, 157
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1776], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_sortingLayerID(System.Int32 value)

Disassembly:
	0x03C1413C MOV X0, X19
	0x03C14140 LDP X20, X19, [X31 + 0x10]
	0x03C14144 LDR X30, [X31], #0x20
	0x03C14148 BR X1
	0x03C1414C STR D8, [X31 - 0x20]!
	0x03C14150 STR X30, [X31 + 0x8]
	0x03C14154 STP X20, X19, [X31 + 0x10]
	0x03C14158 ADRP X20, 0x7D0000
	0x03C1415C LDR X1, [X20 + 0x820]
	0x03C14160 MOV V8.16B, V0.16B
	0x03C14164 MOV W19, W0
	0x03C14168 CBNZ X1, 0x3C14180
	0x03C1416C ADRP X0, 0xFFFFFFFFFCF02000
	0x03C14170 ADD X0, X0, 0x832
	0x03C14174 BL 0x1C16CB8
	0x03C14178 MOV X1, X0
	0x03C1417C STR X0, [X20 + 0x820]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D1000
	006 Move X2, [X21+1784]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51376128
	012 Add X0, X0, 2245
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1784], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_sortingOrder()

Disassembly:
	0x03C14180 MOV W0, W19
	0x03C14184 LDP X20, X19, [X31 + 0x10]
	0x03C14188 LDR X30, [X31 + 0x8]
	0x03C1418C MOV V0.16B, V8.16B
	0x03C14190 LDR V8, [X31], #0x20
	0x03C14194 BR X1
	0x03C14198 SUB X31, X31, 0x30
	0x03C1419C STR X30, [X31 + 0x10]
	0x03C141A0 STP X20, X19, [X31 + 0x20]
	0x03C141A4 ADRP X20, 0x7D0000
	0x03C141A8 LDR X8, [X20 + 0x850]
	0x03C141AC MOV W19, W0
	0x03C141B0 STP S0, S1, [X31]
	0x03C141B4 STP S2, S3, [X31 + 0x8]
	0x03C141B8 CBNZ X8, 0x3C141D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1792]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51466240
	010 Add X0, X0, 3973
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1792], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_sortingOrder(System.Int32 value)

Disassembly:
	0x03C141BC ADRP X0, 0xFFFFFFFFFCEEE000
	0x03C141C0 ADD X0, X0, 0xDDD
	0x03C141C4 BL 0x1C16CB8
	0x03C141C8 MOV X8, X0
	0x03C141CC STR X0, [X20 + 0x850]
	0x03C141D0 ADD X1, X31, 0x0
	0x03C141D4 MOV W0, W19
	0x03C141D8 BLR X8
	0x03C141DC LDP X20, X19, [X31 + 0x20]
	0x03C141E0 LDR X30, [X31 + 0x10]
	0x03C141E4 ADD X31, X31, 0x30
	0x03C141E8 RET
	0x03C141EC STP X30, X21, [X31 - 0x20]!
	0x03C141F0 STP X20, X19, [X31 + 0x10]
	0x03C141F4 ADRP X21, 0x7D0000
	0x03C141F8 LDR X2, [X21 + 0x850]
	0x03C141FC MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D1000
	006 Move X2, [X21+1800]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51412992
	012 Add X0, X0, 200
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1800], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_sortingGroupID()

Disassembly:
	0x03C14200 MOV W20, W0
	0x03C14204 CBNZ X2, 0x3C1421C
	0x03C14208 ADRP X0, 0xFFFFFFFFFCEEE000
	0x03C1420C ADD X0, X0, 0xDDD
	0x03C14210 BL 0x1C16CB8
	0x03C14214 MOV X2, X0
	0x03C14218 STR X0, [X21 + 0x850]
	0x03C1421C MOV W0, W20
	0x03C14220 MOV X1, X19
	0x03C14224 LDP X20, X19, [X31 + 0x10]
	0x03C14228 LDP X30, X21, [X31], #0x20
	0x03C1422C BR X2
	0x03C14230 STP X30, X21, [X31 - 0x20]!
	0x03C14234 STP X20, X19, [X31 + 0x10]
	0x03C14238 ADRP X21, 0x7D0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1808]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51286016
	010 Add X0, X0, 1660
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1808], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_sortingGroupOrder()

Disassembly:
	0x03C1423C LDR X2, [X21 + 0x828]
	0x03C14240 MOV X19, X1
	0x03C14244 MOV W20, W0
	0x03C14248 CBNZ X2, 0x3C14260
	0x03C1424C ADRP X0, 0xFFFFFFFFFCEF8000
	0x03C14250 ADD X0, X0, 0xDE8
	0x03C14254 BL 0x1C16CB8
	0x03C14258 MOV X2, X0
	0x03C1425C STR X0, [X21 + 0x828]
	0x03C14260 MOV W0, W20
	0x03C14264 MOV X1, X19
	0x03C14268 LDP X20, X19, [X31 + 0x10]
	0x03C1426C LDP X30, X21, [X31], #0x20
	0x03C14270 BR X2
	0x03C14274 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1816]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51335168
	010 Add X0, X0, 2752
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1816], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_isPartOfStaticBatch()

Disassembly:
	0x03C14278 STP X22, X21, [X31 + 0x10]
	0x03C1427C STP X20, X19, [X31 + 0x20]
	0x03C14280 ADRP X23, 0x7D0000
	0x03C14284 LDR X4, [X23 + 0x830]
	0x03C14288 MOV W19, W3
	0x03C1428C MOV W20, W2
	0x03C14290 MOV X21, X1
	0x03C14294 MOV W22, W0
	0x03C14298 CBNZ X4, 0x3C142B0
	0x03C1429C ADRP X0, 0xFFFFFFFFFCF08000
	0x03C142A0 ADD X0, X0, 0xEB0
	0x03C142A4 BL 0x1C16CB8
	0x03C142A8 MOV X4, X0
	0x03C142AC STR X0, [X23 + 0x830]
	0x03C142B0 MOV W0, W22

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1824]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51499008
	010 Add X0, X0, 3986
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1824], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Matrix4x4 get_worldToLocalMatrix()

Disassembly:
	0x03C142B4 MOV X1, X21
	0x03C142B8 MOV W2, W20
	0x03C142BC MOV W3, W19
	0x03C142C0 LDP X20, X19, [X31 + 0x20]
	0x03C142C4 LDP X22, X21, [X31 + 0x10]
	0x03C142C8 LDP X30, X23, [X31], #0x30
	0x03C142CC BR X4
	0x03C142D0 STR D8, [X31 - 0x20]!
	0x03C142D4 STR X30, [X31 + 0x8]
	0x03C142D8 STP X20, X19, [X31 + 0x10]
	0x03C142DC ADRP X20, 0x7D0000
	0x03C142E0 LDR X1, [X20 + 0x820]
	0x03C142E4 MOV V8.16B, V0.16B
	0x03C142E8 MOV W19, W0
	0x03C142EC CBNZ X1, 0x3C14304
	0x03C142F0 ADRP X0, 0xFFFFFFFFFCF02000
	0x03C142F4 ADD X0, X0, 0x832
	0x03C142F8 BL 0x1C16CB8
	0x03C142FC MOV X1, X0
	0x03C14300 STR X0, [X20 + 0x820]
	0x03C14304 MOV W0, W19
	0x03C14308 LDP X20, X19, [X31 + 0x10]
	0x03C1430C LDR X30, [X31 + 0x8]
	0x03C14310 MOV V0.16B, V8.16B
	0x03C14314 LDR V8, [X31], #0x20
	0x03C14318 BR X1
	0x03C1431C B 0x3C14198

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x7D1000
	007 Move X19, X8
	008 Move X8, [X21+1872]
	009 Move X20, X0
	010 NotImplemented "Instruction MOVI not yet implemented."
	011 Move [X31+32], V0
	012 Move [X31+40], V0
	013 Move [X31], V0
	014 Move [X31+8], V0
	015 Compare X8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51433472
	018 Add X0, X0, 3753
	019 Call 0x1C17CB8
	020 Move X8, X0
	021 Move [X21+1872], X0
	022 Add X1, X31, 0
	023 Move X0, X20
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move V1, [X31+32]
	026 Move V0, [X31+48]
	027 Move V3, [X31]
	028 Move V2, [X31+16]
	029 Move X30, [X31+64]
	030 Move X21, [X31+72]
	031 Move [X19+32], V1
	032 Move [X19+40], V0
	033 Move [X19], V3
	034 Move [X19+8], V2
	035 Move X20, [X31+80]
	036 Move X19, [X31+88]
	037 Add X31, X31, 96
	038 Return X0

Method: System.Int32 GetMaterialCount()

Disassembly:
	0x03C14364 CBNZ X2, 0x3C1437C
	0x03C14368 ADRP X0, 0xFFFFFFFFFCEF8000
	0x03C1436C ADD X0, X0, 0xDE8
	0x03C14370 BL 0x1C16CB8
	0x03C14374 MOV X2, X0
	0x03C14378 STR X0, [X21 + 0x828]
	0x03C1437C MOV W0, W20
	0x03C14380 MOV X1, X19
	0x03C14384 LDP X20, X19, [X31 + 0x10]
	0x03C14388 LDP X30, X21, [X31], #0x20
	0x03C1438C BR X2
	0x03C14390 STP X30, X21, [X31 - 0x20]!
	0x03C14394 STP X20, X19, [X31 + 0x10]
	0x03C14398 ADRP X21, 0x7D0000
	0x03C1439C LDR X2, [X21 + 0x828]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1832]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51408896
	010 Add X0, X0, 3519
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1832], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Material[] GetSharedMaterialArray()

Disassembly:
	0x03C143A0 MOV X19, X1
	0x03C143A4 MOV W20, W0
	0x03C143A8 CBNZ X2, 0x3C143C0
	0x03C143AC ADRP X0, 0xFFFFFFFFFCEF8000
	0x03C143B0 ADD X0, X0, 0xDE8
	0x03C143B4 BL 0x1C16CB8
	0x03C143B8 MOV X2, X0
	0x03C143BC STR X0, [X21 + 0x828]
	0x03C143C0 MOV W0, W20
	0x03C143C4 MOV X1, X19
	0x03C143C8 LDP X20, X19, [X31 + 0x10]
	0x03C143CC LDP X30, X21, [X31], #0x20
	0x03C143D0 BR X2
	0x03C143D4 STP X30, X23, [X31 - 0x30]!
	0x03C143D8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1840]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51503104
	010 Add X0, X0, 451
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1840], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Material[] get_materials()

Disassembly:
	0x03C143DC STP X20, X19, [X31 + 0x20]
	0x03C143E0 ADRP X23, 0x7D0000
	0x03C143E4 LDR X4, [X23 + 0x830]
	0x03C143E8 MOV W19, W3
	0x03C143EC MOV W20, W2
	0x03C143F0 MOV X21, X1
	0x03C143F4 MOV W22, W0
	0x03C143F8 CBNZ X4, 0x3C14410
	0x03C143FC ADRP X0, 0xFFFFFFFFFCF08000
	0x03C14400 ADD X0, X0, 0xEB0
	0x03C14404 BL 0x1C16CB8
	0x03C14408 MOV X4, X0
	0x03C1440C STR X0, [X23 + 0x830]
	0x03C14410 MOV W0, W22
	0x03C14414 MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1680]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51359744
	010 Add X0, X0, 1914
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1680], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_materials(UnityEngine.Material[] value)

Disassembly:
	0x03C14418 MOV W2, W20

ISIL:
	001 Call Renderer.SetMaterialArray, X0, X1
	002 Return 

Method: UnityEngine.Material get_material()

Disassembly:
	0x03C1441C MOV W3, W19
	0x03C14420 LDP X20, X19, [X31 + 0x20]
	0x03C14424 LDP X22, X21, [X31 + 0x10]
	0x03C14428 LDP X30, X23, [X31], #0x30
	0x03C1442C BR X4
	0x03C14430 STP X30, X21, [X31 - 0x20]!
	0x03C14434 STP X20, X19, [X31 + 0x10]
	0x03C14438 ADRP X20, 0x7D0000
	0x03C1443C ADRP X21, 0x4DF000
	0x03C14440 LDRB W8, [X20 + 0x838]
	0x03C14444 LDR X21, [X21 + 0x598]
	0x03C14448 MOV X19, X0
	0x03C1444C TBNZ X8, 0x0, 0x3C14464
	0x03C14450 ADRP X0, 0x4DF000
	0x03C14454 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1656]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51470336
	010 Add X0, X0, 569
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1656], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_material(UnityEngine.Material value)

Disassembly:
	0x03C14458 BL 0x1C16CF4
	0x03C1445C MOVZ W8, 0x1
	0x03C14460 STRB W8, [X20 + 0x838]
	0x03C14464 LDR X0, [X21]
	0x03C14468 LDR W8, [X0 + 0xE0]
	0x03C1446C CBNZ W8, 0x3C14474
	0x03C14470 BL 0x1C16DFC
	0x03C14474 MOV X0, X19
	0x03C14478 LDP X20, X19, [X31 + 0x10]
	0x03C1447C MOV X1, X31
	0x03C14480 LDP X30, X21, [X31], #0x20
	0x03C14484 B 0x3C33594
	0x03C14488 STP X30, X21, [X31 - 0x20]!
	0x03C1448C STP X20, X19, [X31 + 0x10]
	0x03C14490 ADRP X21, 0x7D0000
	0x03C14494 LDR X2, [X21 + 0x858]
	0x03C14498 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D1000
	006 Move X2, [X21+1672]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51531776
	012 Add X0, X0, 3509
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1672], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Material get_sharedMaterial()

Disassembly:
	0x03C1449C MOV X20, X0
	0x03C144A0 CBNZ X2, 0x3C144B8
	0x03C144A4 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C144A8 ADD X0, X0, 0xB42
	0x03C144AC BL 0x1C16CB8
	0x03C144B0 MOV X2, X0
	0x03C144B4 STR X0, [X21 + 0x858]
	0x03C144B8 MOV X0, X20
	0x03C144BC MOV X1, X19
	0x03C144C0 LDP X20, X19, [X31 + 0x10]
	0x03C144C4 LDP X30, X21, [X31], #0x20
	0x03C144C8 BR X2
	0x03C144CC STP X30, X21, [X31 - 0x20]!
	0x03C144D0 STP X20, X19, [X31 + 0x10]
	0x03C144D4 ADRP X21, 0x7D0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1664]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51478528
	010 Add X0, X0, 84
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1664], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_sharedMaterial(UnityEngine.Material value)

Disassembly:
	0x03C144D8 LDR X2, [X21 + 0x860]
	0x03C144DC MOV X19, X1
	0x03C144E0 MOV X20, X0
	0x03C144E4 CBNZ X2, 0x3C144FC
	0x03C144E8 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C144EC ADD X0, X0, 0xDFA
	0x03C144F0 BL 0x1C16CB8
	0x03C144F4 MOV X2, X0
	0x03C144F8 STR X0, [X21 + 0x860]
	0x03C144FC MOV X0, X20
	0x03C14500 MOV X1, X19
	0x03C14504 LDP X20, X19, [X31 + 0x10]
	0x03C14508 LDP X30, X21, [X31], #0x20
	0x03C1450C BR X2
	0x03C14510 STR X30, [X31 - 0x20]!
	0x03C14514 STP X20, X19, [X31 + 0x10]
	0x03C14518 ADRP X20, 0x7D0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D1000
	006 Move X2, [X21+1672]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51531776
	012 Add X0, X0, 3509
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1672], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Material[] get_sharedMaterials()

Disassembly:
	0x03C1451C LDR X1, [X20 + 0x868]
	0x03C14520 MOV X19, X0
	0x03C14524 CBNZ X1, 0x3C1453C
	0x03C14528 ADRP X0, 0xFFFFFFFFFCF02000
	0x03C1452C ADD X0, X0, 0x875
	0x03C14530 BL 0x1C16CB8
	0x03C14534 MOV X1, X0
	0x03C14538 STR X0, [X20 + 0x868]
	0x03C1453C MOV X0, X19
	0x03C14540 LDP X20, X19, [X31 + 0x10]
	0x03C14544 LDR X30, [X31], #0x20
	0x03C14548 BR X1
	0x03C1454C STR X30, [X31 - 0x30]!
	0x03C14550 STP X22, X21, [X31 + 0x10]
	0x03C14554 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7D1000
	005 Move X1, [X20+1840]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51503104
	010 Add X0, X0, 451
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1840], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_sharedMaterials(UnityEngine.Material[] value)

Disassembly:
	0x03C14558 ADRP X21, 0x7D0000

ISIL:
	001 Call Renderer.SetMaterialArray, X0, X1
	002 Return 

Method: System.Void GetMaterials(System.Collections.Generic.List`1<UnityEngine.Material> m)

Disassembly:
	0x03C1455C ADRP X22, 0x4DF000
	0x03C14560 LDRB W8, [X21 + 0x870]
	0x03C14564 LDR X22, [X22 + 0x598]
	0x03C14568 MOV X19, X1
	0x03C1456C MOV X20, X0
	0x03C14570 TBNZ X8, 0x0, 0x3C14588
	0x03C14574 ADRP X0, 0x4DF000
	0x03C14578 LDR X0, [X0 + 0x598]
	0x03C1457C BL 0x1C16CF4
	0x03C14580 MOVZ W8, 0x1
	0x03C14584 STRB W8, [X21 + 0x870]
	0x03C14588 LDR X0, [X22]
	0x03C1458C LDR W8, [X0 + 0xE0]
	0x03C14590 CBNZ W8, 0x3C14598
	0x03C14594 BL 0x1C16DFC
	0x03C14598 MOV X0, X20
	0x03C1459C MOV X1, X31
	0x03C145A0 BL 0x3C33594
	0x03C145A4 ADRP X21, 0x7D0000
	0x03C145A8 LDR X2, [X21 + 0x858]
	0x03C145AC CBNZ X2, 0x3C145C4
	0x03C145B0 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C145B4 ADD X0, X0, 0xB42
	0x03C145B8 BL 0x1C16CB8
	0x03C145BC MOV X2, X0
	0x03C145C0 STR X0, [X21 + 0x858]
	0x03C145C4 MOV X0, X20
	0x03C145C8 MOV X1, X19
	0x03C145CC LDP X20, X19, [X31 + 0x20]
	0x03C145D0 LDP X22, X21, [X31 + 0x10]
	0x03C145D4 LDR X30, [X31], #0x30
	0x03C145D8 BR X2
	0x03C145DC STR X30, [X31 - 0x30]!
	0x03C145E0 STP X22, X21, [X31 + 0x10]
	0x03C145E4 STP X20, X19, [X31 + 0x20]
	0x03C145E8 ADRP X21, 0x7D0000
	0x03C145EC ADRP X22, 0x4DF000
	0x03C145F0 LDRB W8, [X21 + 0x871]
	0x03C145F4 LDR X22, [X22 + 0x598]
	0x03C145F8 MOV X19, X1
	0x03C145FC MOV X20, X0
	0x03C14600 TBNZ X8, 0x0, 0x3C14618
	0x03C14604 ADRP X0, 0x4DF000
	0x03C14608 LDR X0, [X0 + 0x598]
	0x03C1460C BL 0x1C16CF4
	0x03C14610 MOVZ W8, 0x1
	0x03C14614 STRB W8, [X21 + 0x871]
	0x03C14618 LDR X0, [X22]
	0x03C1461C LDR W8, [X0 + 0xE0]
	0x03C14620 CBNZ W8, 0x3C14628
	0x03C14624 BL 0x1C16DFC
	0x03C14628 MOV X0, X20
	0x03C1462C MOV X1, X31
	0x03C14630 BL 0x3C33594
	0x03C14634 ADRP X21, 0x7D0000
	0x03C14638 LDR X2, [X21 + 0x860]
	0x03C1463C CBNZ X2, 0x3C14654
	0x03C14640 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C14644 ADD X0, X0, 0xDFA
	0x03C14648 BL 0x1C16CB8
	0x03C1464C MOV X2, X0
	0x03C14650 STR X0, [X21 + 0x860]
	0x03C14654 MOV X0, X20
	0x03C14658 MOV X1, X19
	0x03C1465C LDP X20, X19, [X31 + 0x20]
	0x03C14660 LDP X22, X21, [X31 + 0x10]
	0x03C14664 LDR X30, [X31], #0x30
	0x03C14668 BR X2
	0x03C1466C STP X30, X21, [X31 - 0x20]!
	0x03C14670 STP X20, X19, [X31 + 0x10]
	0x03C14674 ADRP X20, 0x7D0000
	0x03C14678 ADRP X21, 0x4DF000
	0x03C1467C LDRB W8, [X20 + 0x872]
	0x03C14680 LDR X21, [X21 + 0x598]
	0x03C14684 MOV X19, X0
	0x03C14688 TBNZ X8, 0x0, 0x3C146A0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x7D1000
	008 Move W8, [X21+1848]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x54B000
	016 Move X0, [X0+3520]
	017 Call 0x1C17CF4
	018 Move X0, 0x54B000
	019 Move X0, [X0+3528]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1848], W8
	023 Compare X20, 0
	024 JumpIfEqual {66}
	025 Move X23, 0x7D1000
	026 Move X22, 0x54B000
	027 Move X21, 0x54B000
	028 Move X8, [X23+1832]
	029 Move X22, [X22+3520]
	030 Move X21, [X21+3528]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -51408896
	034 Add X0, X0, 3519
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X23+1832], X0
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X2, [X22]
	041 Move W1, W0
	042 Move X0, X20
	043 Call 0x222D754, X0, X1
	044 Move X1, [X21]
	045 Move X0, X20
	046 Call 0x222D900, X0
	047 Move X21, 0x7D1000
	048 Move X2, [X21+1688]
	049 Move X20, X0
	050 Compare X2, 0
	051 JumpIfNotEqual {57}
	052 Move X0, -51326976
	053 Add X0, X0, 2236
	054 Call 0x1C17CB8
	055 Move X2, X0
	056 Move [X21+1688], X0
	057 Move X0, X19
	058 Move X1, X20
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Move X23, [X31+56]
	065 CallNoReturn X2
	066 Move X0, 0x4E5000
	067 Move X0, [X0+1320]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X19, X0
	071 Move X0, 0x54B000
	072 Move X0, [X0+3536]
	073 Call 0x1C17D08
	074 Move X20, X0
	075 Move X0, 0x534000
	076 Move X0, [X0+736]
	077 Call 0x1C17D08
	078 Move X2, X0
	079 Move X0, X19
	080 Move X1, X20
	081 Move X3, X31
	082 Call ArgumentNullException..ctor, X0, X1, X2
	083 Move X0, 0x54B000
	084 Move X0, [X0+3544]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Call 0x1C17DEC

Method: System.Void GetSharedMaterials(System.Collections.Generic.List`1<UnityEngine.Material> m)

Disassembly:
	0x03C1468C ADRP X0, 0x4DF000
	0x03C14690 LDR X0, [X0 + 0x598]
	0x03C14694 BL 0x1C16CF4
	0x03C14698 MOVZ W8, 0x1
	0x03C1469C STRB W8, [X20 + 0x872]
	0x03C146A0 LDR X0, [X21]
	0x03C146A4 LDR W8, [X0 + 0xE0]
	0x03C146A8 CBNZ W8, 0x3C146B0
	0x03C146AC BL 0x1C16DFC
	0x03C146B0 MOV X0, X19
	0x03C146B4 MOV X1, X31
	0x03C146B8 BL 0x3C33594
	0x03C146BC ADRP X20, 0x7D0000
	0x03C146C0 LDR X1, [X20 + 0x868]
	0x03C146C4 CBNZ X1, 0x3C146DC
	0x03C146C8 ADRP X0, 0xFFFFFFFFFCF02000
	0x03C146CC ADD X0, X0, 0x875
	0x03C146D0 BL 0x1C16CB8
	0x03C146D4 MOV X1, X0
	0x03C146D8 STR X0, [X20 + 0x868]
	0x03C146DC MOV X0, X19
	0x03C146E0 LDP X20, X19, [X31 + 0x10]
	0x03C146E4 LDP X30, X21, [X31], #0x20
	0x03C146E8 BR X1
	0x03C146EC STP X30, X19, [X31 - 0x10]!
	0x03C146F0 ADRP X19, 0x7D0000
	0x03C146F4 LDR X0, [X19 + 0x878]
	0x03C146F8 CBNZ X0, 0x3C1470C
	0x03C146FC ADRP X0, 0xFFFFFFFFFCEE2000
	0x03C14700 ADD X0, X0, 0xFF4
	0x03C14704 BL 0x1C16CB8
	0x03C14708 STR X0, [X19 + 0x878]
	0x03C1470C LDP X30, X19, [X31], #0x10
	0x03C14710 BR X0
	0x03C14714 STR X30, [X31 - 0x20]!
	0x03C14718 STP X20, X19, [X31 + 0x10]
	0x03C1471C ADRP X20, 0x7D0000
	0x03C14720 LDR X1, [X20 + 0x880]
	0x03C14724 MOV X19, X0
	0x03C14728 CBNZ X1, 0x3C14740
	0x03C1472C ADRP X0, 0xFFFFFFFFFCEEE000
	0x03C14730 ADD X0, X0, 0xE31
	0x03C14734 BL 0x1C16CB8
	0x03C14738 MOV X1, X0
	0x03C1473C STR X0, [X20 + 0x880]
	0x03C14740 MOV X0, X19
	0x03C14744 LDP X20, X19, [X31 + 0x10]
	0x03C14748 LDR X30, [X31], #0x20
	0x03C1474C BR X1
	0x03C14750 STP X30, X21, [X31 - 0x20]!
	0x03C14754 STP X20, X19, [X31 + 0x10]
	0x03C14758 ADRP X21, 0x7D0000
	0x03C1475C LDR X2, [X21 + 0x888]
	0x03C14760 MOV X19, X1
	0x03C14764 MOV X20, X0
	0x03C14768 CBNZ X2, 0x3C14780
	0x03C1476C ADRP X0, 0xFFFFFFFFFCF08000
	0x03C14770 ADD X0, X0, 0xF22
	0x03C14774 BL 0x1C16CB8
	0x03C14778 MOV X2, X0
	0x03C1477C STR X0, [X21 + 0x888]
	0x03C14780 MOV X0, X20
	0x03C14784 MOV X1, X19
	0x03C14788 LDP X20, X19, [X31 + 0x10]
	0x03C1478C LDP X30, X21, [X31], #0x20
	0x03C14790 BR X2
	0x03C14794 STR X30, [X31 - 0x20]!
	0x03C14798 STP X20, X19, [X31 + 0x10]
	0x03C1479C ADRP X20, 0x7D0000
	0x03C147A0 LDRB W8, [X20 + 0x890]
	0x03C147A4 MOV X19, X0
	0x03C147A8 TBNZ X8, 0x0, 0x3C147C0
	0x03C147AC ADRP X0, 0x507000
	0x03C147B0 LDR X0, [X0 + 0x2E0]
	0x03C147B4 BL 0x1C16CF4
	0x03C147B8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x7D1000
	008 Move W8, [X21+1849]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x54B000
	016 Move X0, [X0+3520]
	017 Call 0x1C17CF4
	018 Move X0, 0x54B000
	019 Move X0, [X0+3528]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1849], W8
	023 Compare X20, 0
	024 JumpIfEqual {66}
	025 Move X23, 0x7D1000
	026 Move X22, 0x54B000
	027 Move X21, 0x54B000
	028 Move X8, [X23+1832]
	029 Move X22, [X22+3520]
	030 Move X21, [X21+3528]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -51408896
	034 Add X0, X0, 3519
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X23+1832], X0
	038 Move X0, X19
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X2, [X22]
	041 Move W1, W0
	042 Move X0, X20
	043 Call 0x222D754, X0, X1
	044 Move X1, [X21]
	045 Move X0, X20
	046 Call 0x222D900, X0
	047 Move X21, 0x7D1000
	048 Move X2, [X21+1696]
	049 Move X20, X0
	050 Compare X2, 0
	051 JumpIfNotEqual {57}
	052 Move X0, -51470336
	053 Add X0, X0, 605
	054 Call 0x1C17CB8
	055 Move X2, X0
	056 Move [X21+1696], X0
	057 Move X0, X19
	058 Move X1, X20
	059 Move X20, [X31+32]
	060 Move X19, [X31+40]
	061 Move X22, [X31+16]
	062 Move X21, [X31+24]
	063 Move X30, [X31+48]
	064 Move X23, [X31+56]
	065 CallNoReturn X2
	066 Move X0, 0x4E5000
	067 Move X0, [X0+1320]
	068 Call 0x1C17D08
	069 Call 0x1C17F10
	070 Move X19, X0
	071 Move X0, 0x54B000
	072 Move X0, [X0+3536]
	073 Call 0x1C17D08
	074 Move X20, X0
	075 Move X0, 0x534000
	076 Move X0, [X0+736]
	077 Call 0x1C17D08
	078 Move X2, X0
	079 Move X0, X19
	080 Move X1, X20
	081 Move X3, X31
	082 Call ArgumentNullException..ctor, X0, X1, X2
	083 Move X0, 0x54B000
	084 Move X0, [X0+3552]
	085 Call 0x1C17D08
	086 Move X1, X0
	087 Move X0, X19
	088 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x03C147BC STRB W8, [X20 + 0x890]
	0x03C147C0 ADRP X20, 0x7D0000

ISIL:
	001 Move X1, X31
	002 Call Component..ctor, X0
	003 Return 

Method: System.Void get_bounds_Injected(out UnityEngine.Bounds ret)

Disassembly:
	0x03C13A90 LDP S2, S3, [X31 + 0x8]
	0x03C13A94 LDP X30, X19, [X31 + 0x10]
	0x03C13A98 ADD X31, X31, 0x20
	0x03C13A9C RET
	0x03C13AA0 STR X30, [X31 - 0x20]!
	0x03C13AA4 STP X20, X19, [X31 + 0x10]
	0x03C13AA8 ADRP X20, 0x7D1000
	0x03C13AAC LDR X1, [X20 + 0x7B0]
	0x03C13AB0 MOV X19, X0
	0x03C13AB4 CBNZ X1, 0x3C13ACC
	0x03C13AB8 ADRP X0, 0xFFFFFFFFFCEF8000
	0x03C13ABC ADD X0, X0, 0xFD
	0x03C13AC0 BL 0x1C16CB8
	0x03C13AC4 MOV X1, X0
	0x03C13AC8 STR X0, [X20 + 0x7B0]
	0x03C13ACC MOV X0, X19
	0x03C13AD0 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1856]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51466240
	012 Add X0, X0, 675
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1856], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_localBounds_Injected(ref UnityEngine.Bounds value)

Disassembly:
	0x03C13B18 LDP X30, X19, [X31 + 0x10]
	0x03C13B1C ADD X31, X31, 0x20
	0x03C13B20 RET
	0x03C13B24 STR X30, [X31 - 0x20]!
	0x03C13B28 STP X20, X19, [X31 + 0x10]
	0x03C13B2C ADRP X20, 0x7D1000
	0x03C13B30 LDR X1, [X20 + 0x7B8]
	0x03C13B34 MOV X19, X0
	0x03C13B38 CBNZ X1, 0x3C13B50
	0x03C13B3C ADRP X0, 0xFFFFFFFFFCEF3000
	0x03C13B40 ADD X0, X0, 0xEF7
	0x03C13B44 BL 0x1C16CB8
	0x03C13B48 MOV X1, X0
	0x03C13B4C STR X0, [X20 + 0x7B8]
	0x03C13B50 MOV X0, X19
	0x03C13B54 LDP X20, X19, [X31 + 0x10]
	0x03C13B58 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D2000
	006 Move X2, [X21+1864]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51363840
	012 Add X0, X0, 1992
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1864], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_worldToLocalMatrix_Injected(out UnityEngine.Matrix4x4 ret)

Disassembly:
	0x03C14320 STP X30, X21, [X31 - 0x20]!
	0x03C14324 STP X20, X19, [X31 + 0x10]
	0x03C14328 ADRP X21, 0x7D0000
	0x03C1432C LDR X8, [X21 + 0x810]
	0x03C14330 MOV X19, X1
	0x03C14334 MOV X20, X0
	0x03C14338 CBNZ X8, 0x3C14350
	0x03C1433C ADRP X0, 0xFFFFFFFFFCF08000
	0x03C14340 ADD X0, X0, 0xE80
	0x03C14344 BL 0x1C16CB8
	0x03C14348 MOV X8, X0
	0x03C1434C STR X0, [X21 + 0x810]
	0x03C14350 MOV X0, X20
	0x03C14354 BLR X8
	0x03C14358 ADRP X21, 0x7D0000
	0x03C1435C LDR X2, [X21 + 0x828]
	0x03C14360 MOV W20, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7D1000
	006 Move X2, [X21+1872]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51433472
	012 Add X0, X0, 3753
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1872], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

