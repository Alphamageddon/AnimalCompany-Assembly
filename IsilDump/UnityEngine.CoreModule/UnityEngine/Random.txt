Type: UnityEngine.Random

Method: System.Void InitState(System.Int32 seed)

Disassembly:
	0x03C31830 RET
	0x03C31834 MOV X0, X20
	0x03C31838 MOV X1, X21
	0x03C3183C BL 0x1C171E0
	0x03C31840 MOV X1, X31
	0x03C31844 B 0x33BDD8C
	0x03C31848 STR X30, [X31 - 0x40]!
	0x03C3184C STP X24, X23, [X31 + 0x10]
	0x03C31850 STP X22, X21, [X31 + 0x20]
	0x03C31854 STP X20, X19, [X31 + 0x30]
	0x03C31858 ADRP X20, 0x7B4000
	0x03C3185C LDRB W8, [X20 + 0x2A2]
	0x03C31860 MOV X19, X0
	0x03C31864 TBNZ X8, 0x0, 0x3C31894
	0x03C31868 ADRP X0, 0x52E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7B5000
	005 Move X1, [X20+488]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51445760
	010 Add X0, X0, 2708
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+488], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Random/State get_state()

Disassembly:
	0x03C3186C LDR X0, [X0 + 0x360]
	0x03C31870 BL 0x1C16CF4
	0x03C31874 ADRP X0, 0x52E000
	0x03C31878 LDR X0, [X0 + 0x368]
	0x03C3187C BL 0x1C16CF4
	0x03C31880 ADRP X0, 0x4C2000
	0x03C31884 LDR X0, [X0 + 0x6C0]
	0x03C31888 BL 0x1C16CF4
	0x03C3188C MOVZ W8, 0x1
	0x03C31890 STRB W8, [X20 + 0x2A2]
	0x03C31894 ADRP X22, 0x4C2000
	0x03C31898 ADRP X23, 0x52E000
	0x03C3189C ADRP X24, 0x52E000
	0x03C318A0 LDR X22, [X22 + 0x6C0]
	0x03C318A4 LDR X23, [X23 + 0x368]
	0x03C318A8 LDR X24, [X24 + 0x360]
	0x03C318AC MOV X20, X31

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x7B5000
	005 Move X8, [X19+520]
	006 Move [X31], X31
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51630080
	011 Add X0, X0, 484
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X19+520], X0
	015 Add X0, X31, 0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X0, [X31]
	018 Move X1, [X31+8]
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Add X31, X31, 32
	022 Return X0

Method: System.Void set_state(UnityEngine.Random/State value)

Disassembly:
	0x03C318EC MOV X1, X31
	0x03C318F0 BL 0x338C698
	0x03C318F4 MOV X1, X0
	0x03C318F8 MOV X0, X19
	0x03C318FC MOV X2, X31
	0x03C31900 BL 0x3395F0C
	0x03C31904 TBZ X0, 0x0, 0x3C31960
	0x03C31908 LDR X0, [X22]
	0x03C3190C LDR X21, [X24]
	0x03C31910 LDR W8, [X0 + 0xE0]
	0x03C31914 CBNZ W8, 0x3C3191C
	0x03C31918 BL 0x1C16DFC
	0x03C3191C MOV X0, X21
	0x03C31920 MOV X1, X31
	0x03C31924 BL 0x338C698
	0x03C31928 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x7B5000
	005 Move X8, [X19+528]
	006 Move [X31], X0
	007 Move [X31+8], X1
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51470336
	011 Add X0, X0, 3240
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X19+528], X0
	015 Add X0, X31, 0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Add X31, X31, 32
	020 Return 

Method: System.Single Range(System.Single minInclusive, System.Single maxInclusive)

Disassembly:
	0x03C31968 LDP X22, X21, [X31 + 0x20]
	0x03C3196C LDP X24, X23, [X31 + 0x10]
	0x03C31970 LDR X30, [X31], #0x40
	0x03C31974 RET
	0x03C31978 BL 0x1C16F20
	0x03C3197C STP X29, X30, [X31 - 0x60]!
	0x03C31980 STP X28, X27, [X31 + 0x10]
	0x03C31984 STP X26, X25, [X31 + 0x20]
	0x03C31988 STP X24, X23, [X31 + 0x30]
	0x03C3198C STP X22, X21, [X31 + 0x40]
	0x03C31990 STP X20, X19, [X31 + 0x50]
	0x03C31994 ADRP X20, 0x7B4000
	0x03C31998 LDRB W8, [X20 + 0x2A3]
	0x03C3199C MOV X19, X0
	0x03C319A0 TBNZ X8, 0x0, 0x3C31A18
	0x03C319A4 ADRP X0, 0x4CC000

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move X19, 0x7B5000
	006 Move X0, [X19+496]
	007 Move V8, V1
	008 Move V9, V0
	009 Compare X0, 0
	010 JumpIfNotEqual {15}
	011 Move X0, -51531776
	012 Add X0, X0, 1083
	013 Call 0x1C17CB8
	014 Move [X19+496], X0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Move V0, V9
	018 Move V1, V8
	019 Move D9, [X31+32]
	020 Move D8, [X31+40]
	021 CallNoReturn X0

Method: System.Int32 Range(System.Int32 minInclusive, System.Int32 maxExclusive)

Disassembly:
	0x03C319A8 LDR X0, [X0 + 0x938]
	0x03C319AC BL 0x1C16CF4
	0x03C319B0 ADRP X0, 0x4CC000
	0x03C319B4 LDR X0, [X0 + 0xAC0]
	0x03C319B8 BL 0x1C16CF4
	0x03C319BC ADRP X0, 0x4CC000
	0x03C319C0 LDR X0, [X0 + 0x928]
	0x03C319C4 BL 0x1C16CF4
	0x03C319C8 ADRP X0, 0x4CC000
	0x03C319CC LDR X0, [X0 + 0x920]
	0x03C319D0 BL 0x1C16CF4
	0x03C319D4 ADRP X0, 0x52E000
	0x03C319D8 LDR X0, [X0 + 0x368]
	0x03C319DC BL 0x1C16CF4
	0x03C319E0 ADRP X0, 0x52E000
	0x03C319E4 LDR X0, [X0 + 0x370]
	0x03C319E8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7B5000
	006 Move X2, [X21+504]
	007 Move W19, W1
	008 Move W20, W0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51580928
	012 Add X0, X0, 587
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+504], X0
	016 Move W0, W20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 RandomRangeInt(System.Int32 minInclusive, System.Int32 maxExclusive)

Disassembly:
	0x03C319EC ADRP X0, 0x52E000
	0x03C319F0 LDR X0, [X0 + 0x378]
	0x03C319F4 BL 0x1C16CF4
	0x03C319F8 ADRP X0, 0x4CA000
	0x03C319FC LDR X0, [X0 + 0xC60]
	0x03C31A00 BL 0x1C16CF4
	0x03C31A04 ADRP X0, 0x4C2000
	0x03C31A08 LDR X0, [X0 + 0x6C0]
	0x03C31A0C BL 0x1C16CF4
	0x03C31A10 MOVZ W8, 0x1
	0x03C31A14 STRB W8, [X20 + 0x2A3]
	0x03C31A18 ADRP X24, 0x4C2000
	0x03C31A1C ADRP X25, 0x52E000
	0x03C31A20 ADRP X26, 0x52E000
	0x03C31A24 ADRP X27, 0x52E000
	0x03C31A28 ADRP X29, 0x4CC000
	0x03C31A2C LDR X24, [X24 + 0x6C0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7B5000
	006 Move X2, [X21+504]
	007 Move W19, W1
	008 Move W20, W0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51580928
	012 Add X0, X0, 587
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+504], X0
	016 Move W0, W20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Single get_value()

Disassembly:
	0x03C31A30 LDR X25, [X25 + 0x368]
	0x03C31A34 LDR X26, [X26 + 0x378]
	0x03C31A38 LDR X27, [X27 + 0x370]
	0x03C31A3C LDR X29, [X29 + 0x938]
	0x03C31A40 MOV X20, X31
	0x03C31A44 ADRP X28, 0x4CC000
	0x03C31A48 LDR X28, [X28 + 0xAC0]
	0x03C31A4C LDR X0, [X24]
	0x03C31A50 LDR W8, [X0 + 0xE0]
	0x03C31A54 CBNZ W8, 0x3C31A5C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7B5000
	004 Move X0, [X19+512]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51445760
	008 Add X0, X0, 2752
	009 Call 0x1C17CB8
	010 Move [X19+512], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Vector3 get_insideUnitSphere()

Disassembly:
	0x03C31A58 BL 0x1C16DFC
	0x03C31A5C MOV X0, X19
	0x03C31A60 MOV X1, X31
	0x03C31A64 MOV X2, X31
	0x03C31A68 BL 0x3395F0C
	0x03C31A6C TBZ X0, 0x0, 0x3C31D40
	0x03C31A70 LDR X0, [X24]
	0x03C31A74 LDR X21, [X25]
	0x03C31A78 LDR W8, [X0 + 0xE0]
	0x03C31A7C CBNZ W8, 0x3C31A84
	0x03C31A80 BL 0x1C16DFC
	0x03C31A84 MOV X0, X21
	0x03C31A88 MOV X1, X31
	0x03C31A8C BL 0x338C698
	0x03C31A90 MOV X1, X0
	0x03C31A94 MOV X0, X19
	0x03C31A98 MOV X2, X31
	0x03C31A9C BL 0x3395F0C
	0x03C31AA0 TBZ X0, 0x0, 0x3C31D40

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x7B5000
	005 Move X8, [X19+536]
	006 Move [X31+8], W31
	007 Move [X31], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51597312
	011 Add X0, X0, 617
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X19+536], X0
	015 Add X0, X31, 0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move S0, [X31]
	018 Move S1, [X31+4]
	019 Move V2, [X31+8]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Add X31, X31, 32
	023 Return X0

Method: UnityEngine.Vector3 get_onUnitSphere()

Disassembly:
	0x03C31AE0 BLR X9
	0x03C31AE4 CBZ X0, 0x3C31B04
	0x03C31AE8 LDR X23, [X27]
	0x03C31AEC MOV X22, X0
	0x03C31AF0 MOV X1, X23
	0x03C31AF4 BL 0x1C16E00
	0x03C31AF8 MOV X21, X0
	0x03C31AFC CBNZ X0, 0x3C31B08
	0x03C31B00 B 0x3C31E38
	0x03C31B04 MOV X21, X31
	0x03C31B08 LDR X8, [X19]
	0x03C31B0C MOV X0, X19
	0x03C31B10 LDR X9, [X8 + 0x818]
	0x03C31B14 LDR X1, [X8 + 0x820]
	0x03C31B18 BLR X9
	0x03C31B1C CBZ X21, 0x3C31E30
	0x03C31B20 LDR X8, [X21 + 0x18]
	0x03C31B24 MOV X19, X0
	0x03C31B28 CMP W8, 0x1

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x7B5000
	005 Move X8, [X19+544]
	006 Move [X31+8], W31
	007 Move [X31], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51470336
	011 Add X0, X0, 3306
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X19+544], X0
	015 Add X0, X31, 0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move S0, [X31]
	018 Move S1, [X31+4]
	019 Move V2, [X31+8]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Add X31, X31, 32
	023 Return X0

Method: UnityEngine.Color ColorHSV(System.Single hueMin, System.Single hueMax, System.Single saturationMin, System.Single saturationMax, System.Single valueMin, System.Single valueMax)

Disassembly:
	0x03C31B68 MOV X1, X31
	0x03C31B6C BL 0x338C698
	0x03C31B70 MOV X1, X0

ISIL:
	001 Move S6, 1
	002 Move S7, 1

Method: UnityEngine.Color ColorHSV(System.Single hueMin, System.Single hueMax, System.Single saturationMin, System.Single saturationMax, System.Single valueMin, System.Single valueMax, System.Single alphaMin, System.Single alphaMax)

Disassembly:
	0x03C31B74 MOV X0, X19
	0x03C31B78 MOV X2, X31
	0x03C31B7C BL 0x3395194
	0x03C31B80 TBNZ X0, 0x0, 0x3C31D8C
	0x03C31B84 ADRP X8, 0x4CC000
	0x03C31B88 LDR X8, [X8 + 0x920]
	0x03C31B8C LDR X0, [X8]
	0x03C31B90 BL 0x1C16F10
	0x03C31B94 ADRP X8, 0x4CC000
	0x03C31B98 LDR X8, [X8 + 0x928]
	0x03C31B9C MOV X20, X0
	0x03C31BA0 LDR X1, [X8]
	0x03C31BA4 BL 0x301B7C4
	0x03C31BA8 CBZ X23, 0x3C31E30
	0x03C31BAC LDR X0, [X24]
	0x03C31BB0 LDR X22, [X23 + 0x10]
	0x03C31BB4 LDR W8, [X0 + 0xE0]
	0x03C31BB8 CBNZ W8, 0x3C31BC0
	0x03C31BBC BL 0x1C16DFC
	0x03C31BC0 MOV X0, X22
	0x03C31BC4 MOV X1, X31
	0x03C31BC8 MOV X2, X31
	0x03C31BCC BL 0x3395F0C
	0x03C31BD0 TBZ X0, 0x0, 0x3C31C2C
	0x03C31BD4 CBZ X20, 0x3C31E30
	0x03C31BD8 LDR W10, [X20 + 0x1C]
	0x03C31BDC LDR X1, [X23 + 0x10]
	0x03C31BE0 LDR X8, [X20 + 0x10]
	0x03C31BE4 LDR X9, [X29]
	0x03C31BE8 ADD W10, W10, 0x1
	0x03C31BEC STR W10, [X20 + 0x1C]
	0x03C31BF0 CBZ X8, 0x3C31E30
	0x03C31BF4 LDRSW X10, [X20 + 0x18]
	0x03C31BF8 LDR W11, [X8 + 0x18]
	0x03C31BFC CMP W10, W11
	0x03C31C00 B.CS 0x3C31C18
	0x03C31C04 ADD W9, W10, 0x1
	0x03C31C08 ADD X8, X8, X10, 0x3, LSL
	0x03C31C0C STR W9, [X20 + 0x18]
	0x03C31C10 STR X1, [X8 + 0x20]
	0x03C31C14 B 0x3C31C2C
	0x03C31C18 LDR X8, [X9 + 0x20]
	0x03C31C1C MOV X0, X20
	0x03C31C20 LDR X8, [X8 + 0xC0]
	0x03C31C24 LDR X2, [X8 + 0x70]
	0x03C31C28 BL 0x301BF90
	0x03C31C2C LDR X0, [X24]
	0x03C31C30 LDR X22, [X23 + 0x18]
	0x03C31C34 LDR W8, [X0 + 0xE0]
	0x03C31C38 CBNZ W8, 0x3C31C40
	0x03C31C3C BL 0x1C16DFC
	0x03C31C40 MOV X0, X22
	0x03C31C44 MOV X1, X31
	0x03C31C48 MOV X2, X31
	0x03C31C4C BL 0x3395F0C
	0x03C31C50 TBZ X0, 0x0, 0x3C31CAC
	0x03C31C54 CBZ X20, 0x3C31E30
	0x03C31C58 LDR W10, [X20 + 0x1C]
	0x03C31C5C LDR X1, [X23 + 0x18]
	0x03C31C60 LDR X8, [X20 + 0x10]
	0x03C31C64 LDR X9, [X29]
	0x03C31C68 ADD W10, W10, 0x1
	0x03C31C6C STR W10, [X20 + 0x1C]
	0x03C31C70 CBZ X8, 0x3C31E30
	0x03C31C74 LDRSW X10, [X20 + 0x18]
	0x03C31C78 LDR W11, [X8 + 0x18]
	0x03C31C7C CMP W10, W11
	0x03C31C80 B.CS 0x3C31C98
	0x03C31C84 ADD W9, W10, 0x1
	0x03C31C88 ADD X8, X8, X10, 0x3, LSL
	0x03C31C8C STR W9, [X20 + 0x18]
	0x03C31C90 STR X1, [X8 + 0x20]
	0x03C31C94 B 0x3C31CAC
	0x03C31C98 LDR X8, [X9 + 0x20]
	0x03C31C9C MOV X0, X20
	0x03C31CA0 LDR X8, [X8 + 0xC0]
	0x03C31CA4 LDR X2, [X8 + 0x70]
	0x03C31CA8 BL 0x301BF90
	0x03C31CAC LDR X0, [X24]
	0x03C31CB0 LDR X22, [X23 + 0x20]
	0x03C31CB4 LDR W8, [X0 + 0xE0]
	0x03C31CB8 CBNZ W8, 0x3C31CC0
	0x03C31CBC BL 0x1C16DFC
	0x03C31CC0 MOV X0, X22
	0x03C31CC4 MOV X1, X31
	0x03C31CC8 MOV X2, X31
	0x03C31CCC BL 0x3395F0C
	0x03C31CD0 TBZ X0, 0x0, 0x3C31D2C
	0x03C31CD4 CBZ X20, 0x3C31E30
	0x03C31CD8 LDR W10, [X20 + 0x1C]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X19
	012 Move X19, 0x7B5000
	013 Move X0, [X19+512]
	014 Move V8, V6
	015 Move V10, V4
	016 Move V13, V3
	017 Move V12, V2
	018 Move V15, V1
	019 Move V14, V0
	020 Move [X31+8], S5
	021 Move [X31+16], S7
	022 Compare X0, 0
	023 JumpIfNotEqual {28}
	024 Move X0, -51445760
	025 Add X0, X0, 2752
	026 Call 0x1C17CB8
	027 Move [X19+512], X0
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move S9, 1
	030 Move X0, [X19+512]
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 NotImplemented "Instruction FMIN not yet implemented."
	033 Move S11, W31
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Subtract S1, S15, S14
	036 Multiply S15, S1, S0
	037 Compare X0, 0
	038 JumpIfNotEqual {43}
	039 Move X0, -51445760
	040 Add X0, X0, 2752
	041 Call 0x1C17CB8
	042 Move [X19+512], X0
	043 Add S14, S15, S14
	044 NotImplemented "Instruction BLR not yet implemented."
	045 NotImplemented "Instruction FMIN not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Move X0, [X19+512]
	048 NotImplemented "Instruction FCSEL not yet implemented."
	049 Subtract S1, S13, S12
	050 Multiply S0, S1, S0
	051 Add S12, S0, S12
	052 Compare X0, 0
	053 JumpIfNotEqual {58}
	054 Move X0, -51445760
	055 Add X0, X0, 2752
	056 Call 0x1C17CB8
	057 Move [X19+512], X0
	058 NotImplemented "Instruction BLR not yet implemented."
	059 Move V1, [X31+8]
	060 Move S13, 1
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move S15, W31
	063 NotImplemented "Instruction FMIN not yet implemented."
	064 NotImplemented "Instruction FCSEL not yet implemented."
	065 Subtract S1, S1, S10
	066 Multiply S0, S1, S0
	067 Add S2, S0, S10
	068 Move W0, 1
	069 Move V0, V14
	070 Move V1, V12
	071 Move X1, X31
	072 Call Color.HSVToRGB, V0, V1, V2, X0
	073 Move X0, [X19+512]
	074 Move V10, V0
	075 Move V11, V1
	076 Move V12, V2
	077 Compare X0, 0
	078 JumpIfNotEqual {83}
	079 Move X0, -51445760
	080 Add X0, X0, 2752
	081 Call 0x1C17CB8
	082 Move [X19+512], X0
	083 NotImplemented "Instruction BLR not yet implemented."
	084 NotImplemented "Instruction FMIN not yet implemented."
	085 NotImplemented "Instruction FCMP not yet implemented."
	086 NotImplemented "Instruction FCSEL not yet implemented."
	087 Move V1, [X31+12]
	088 Move V2, V12
	089 Move X30, [X31+80]
	090 Move X19, [X31+88]
	091 Move D13, [X31+32]
	092 Move D12, [X31+40]
	093 Subtract S1, S1, S8
	094 Multiply S0, S1, S0
	095 Add S3, S0, S8
	096 Move V0, V10
	097 Move V1, V11
	098 Move D9, [X31+64]
	099 Move D8, [X31+72]
	100 Move D11, [X31+48]
	101 Move D10, [X31+56]
	102 Move D15, [X31+16]
	103 Move D14, [X31+24]
	104 Add X31, X31, 96
	105 Return X0

Method: System.Void get_state_Injected(out UnityEngine.Random/State ret)

Disassembly:
	0x03C318B0 LDR X0, [X22]
	0x03C318B4 LDR W8, [X0 + 0xE0]
	0x03C318B8 CBNZ W8, 0x3C318C0
	0x03C318BC BL 0x1C16DFC
	0x03C318C0 MOV X0, X19
	0x03C318C4 MOV X1, X31
	0x03C318C8 MOV X2, X31
	0x03C318CC BL 0x3395F0C
	0x03C318D0 TBZ X0, 0x0, 0x3C31960
	0x03C318D4 LDR X0, [X22]
	0x03C318D8 LDR X21, [X23]
	0x03C318DC LDR W8, [X0 + 0xE0]
	0x03C318E0 CBNZ W8, 0x3C318E8
	0x03C318E4 BL 0x1C16DFC
	0x03C318E8 MOV X0, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7B5000
	005 Move X1, [X20+520]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51630080
	010 Add X0, X0, 484
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+520], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_state_Injected(ref UnityEngine.Random/State value)

Disassembly:
	0x03C3192C MOV X0, X19
	0x03C31930 MOV X2, X31
	0x03C31934 BL 0x33A7A6C
	0x03C31938 CBZ X19, 0x3C31978
	0x03C3193C LDR X8, [X19]
	0x03C31940 ANDS W31, W0, 0x1
	0x03C31944 MOV X0, X19
	0x03C31948 CSEL X20, X19, X20, NE
	0x03C3194C LDR X9, [X8 + 0x818]
	0x03C31950 LDR X1, [X8 + 0x820]
	0x03C31954 BLR X9
	0x03C31958 MOV X19, X0
	0x03C3195C B 0x3C318B0
	0x03C31960 MOV X0, X20
	0x03C31964 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7B5000
	005 Move X1, [X20+528]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51470336
	010 Add X0, X0, 3240
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+528], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void get_insideUnitSphere_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C31AA4 LDR X0, [X24]
	0x03C31AA8 LDR X21, [X26]
	0x03C31AAC LDR W8, [X0 + 0xE0]
	0x03C31AB0 CBNZ W8, 0x3C31AB8
	0x03C31AB4 BL 0x1C16DFC
	0x03C31AB8 MOV X0, X21
	0x03C31ABC MOV X1, X31
	0x03C31AC0 BL 0x338C698
	0x03C31AC4 CBZ X19, 0x3C31E30
	0x03C31AC8 LDR X8, [X19]
	0x03C31ACC MOV X1, X0
	0x03C31AD0 MOV X0, X19
	0x03C31AD4 MOV W2, W31
	0x03C31AD8 LDR X9, [X8 + 0x208]
	0x03C31ADC LDR X3, [X8 + 0x210]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7B5000
	005 Move X1, [X20+536]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51597312
	010 Add X0, X0, 617
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+536], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void get_onUnitSphere_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C31B2C B.LT 0x3C31A4C
	0x03C31B30 MOV W28, W31
	0x03C31B34 CMP W28, W8
	0x03C31B38 B.CS 0x3C31E34
	0x03C31B3C ADD X9, X21, W28, 0x3, SXTW
	0x03C31B40 LDR X23, [X9 + 0x20]
	0x03C31B44 CBNZ X20, 0x3C31BA8
	0x03C31B48 CMP W8, 0x1
	0x03C31B4C B.NE 0x3C31B84
	0x03C31B50 LDR X0, [X24]
	0x03C31B54 LDR X20, [X25]
	0x03C31B58 LDR W8, [X0 + 0xE0]
	0x03C31B5C CBNZ W8, 0x3C31B64
	0x03C31B60 BL 0x1C16DFC
	0x03C31B64 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7B5000
	005 Move X1, [X20+544]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51470336
	010 Add X0, X0, 3306
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+544], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

