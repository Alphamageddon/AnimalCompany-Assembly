Type: UnityEngine.Transform

Method: System.Void .ctor()

Disassembly:
	0x03C40588 B.NE 0x3C405DC

ISIL:
	001 Call Component..ctor, X0
	002 Return 

Method: UnityEngine.Vector3 get_position()

Disassembly:
	0x03C4058C ADRP X20, 0x7A5000
	0x03C40590 LDR X8, [X20 + 0x2D8]
	0x03C40594 CBNZ X8, 0x3C405AC
	0x03C40598 ADRP X0, 0xFFFFFFFFFCEEA000
	0x03C4059C ADD X0, X0, 0x93C
	0x03C405A0 BL 0x1C16CB8
	0x03C405A4 MOV X8, X0
	0x03C405A8 STR X0, [X20 + 0x2D8]
	0x03C405AC MOV X0, X19
	0x03C405B0 BLR X8
	0x03C405B4 CBZ X0, 0x3C4060C
	0x03C405B8 MOV V0.16B, V11.16B
	0x03C405BC MOV V1.16B, V10.16B
	0x03C405C0 MOV V2.16B, V9.16B
	0x03C405C4 BL 0x3C40610
	0x03C405C8 ADRP X8, 0xFFFFFFFFFCEAA000
	0x03C405CC LDR V3, [X8 + 0x104]
	0x03C405D0 MOV X0, X19
	0x03C405D4 FMUL S3, S8, S3
	0x03C405D8 B 0x3C405F8
	0x03C405DC ADRP X8, 0xFFFFFFFFFCEAA000
	0x03C405E0 LDR V0, [X8 + 0x104]
	0x03C405E4 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A6000
	006 Move X8, [X20+2472]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51474432
	013 Add X0, X0, 2647
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+2472], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void set_position(UnityEngine.Vector3 value)

Disassembly:
	0x03C4062C STR S2, [X31 + 0x18]
	0x03C40630 STR W31, [X31 + 0x8]
	0x03C40634 STR X31, [X31]
	0x03C40638 CBNZ X8, 0x3C40650
	0x03C4063C ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C40640 ADD X0, X0, 0xF64
	0x03C40644 BL 0x1C16CB8
	0x03C40648 MOV X8, X0
	0x03C4064C STR X0, [X20 + 0xA28]
	0x03C40650 ADD X1, X31, 0x10
	0x03C40654 ADD X2, X31, 0x0
	0x03C40658 MOV X0, X19
	0x03C4065C BLR X8
	0x03C40660 LDP S0, S1, [X31]
	0x03C40664 LDR V2, [X31 + 0x8]
	0x03C40668 LDP X20, X19, [X31 + 0x30]
	0x03C4066C LDR X30, [X31 + 0x20]
	0x03C40670 ADD X31, X31, 0x40
	0x03C40674 RET
	0x03C40678 MOVZ W1, 0x1
	0x03C4067C B 0x3C40560

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A6000
	006 Move X8, [X20+2480]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51609600
	014 Add X0, X0, 905
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+2480], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: UnityEngine.Vector3 get_localPosition()

Disassembly:
	0x03C3FB78 MOV X19, X1
	0x03C3FB7C MOV X20, X0
	0x03C3FB80 CBNZ X2, 0x3C3FB98
	0x03C3FB84 ADRP X0, 0xFFFFFFFFFCED0000
	0x03C3FB88 ADD X0, X0, 0x601
	0x03C3FB8C BL 0x1C16CB8
	0x03C3FB90 MOV X2, X0
	0x03C3FB94 STR X0, [X21 + 0x9E0]
	0x03C3FB98 MOV X0, X20
	0x03C3FB9C MOV X1, X19
	0x03C3FBA0 LDP X20, X19, [X31 + 0x10]
	0x03C3FBA4 LDP X30, X21, [X31], #0x20
	0x03C3FBA8 BR X2
	0x03C3FBAC SUB X31, X31, 0x30
	0x03C3FBB0 STR X30, [X31 + 0x10]
	0x03C3FBB4 STP X20, X19, [X31 + 0x20]
	0x03C3FBB8 ADRP X20, 0x7A6000
	0x03C3FBBC LDR X8, [X20 + 0x9E8]
	0x03C3FBC0 MOV X19, X0
	0x03C3FBC4 STR W31, [X31 + 0x8]
	0x03C3FBC8 STR X31, [X31]
	0x03C3FBCC CBNZ X8, 0x3C3FBE4
	0x03C3FBD0 ADRP X0, 0xFFFFFFFFFCED7000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A7000
	006 Move X8, [X20+2488]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51638272
	013 Add X0, X0, 1139
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+2488], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void set_localPosition(UnityEngine.Vector3 value)

Disassembly:
	0x03C3FC04 RET
	0x03C3FC08 STP X30, X21, [X31 - 0x20]!
	0x03C3FC0C STP X20, X19, [X31 + 0x10]
	0x03C3FC10 ADRP X21, 0x7A6000
	0x03C3FC14 LDR X2, [X21 + 0x9E8]
	0x03C3FC18 MOV X19, X1
	0x03C3FC1C MOV X20, X0
	0x03C3FC20 CBNZ X2, 0x3C3FC38
	0x03C3FC24 ADRP X0, 0xFFFFFFFFFCED7000
	0x03C3FC28 ADD X0, X0, 0xC35
	0x03C3FC2C BL 0x1C16CB8
	0x03C3FC30 MOV X2, X0
	0x03C3FC34 STR X0, [X21 + 0x9E8]
	0x03C3FC38 MOV X0, X20
	0x03C3FC3C MOV X1, X19
	0x03C3FC40 LDP X20, X19, [X31 + 0x10]
	0x03C3FC44 LDP X30, X21, [X31], #0x20
	0x03C3FC48 BR X2
	0x03C3FC4C SUB X31, X31, 0x30
	0x03C3FC50 STR X30, [X31 + 0x10]
	0x03C3FC54 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A7000
	006 Move X8, [X20+2496]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51605504
	014 Add X0, X0, 972
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+2496], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: UnityEngine.Vector3 get_eulerAngles()

Disassembly:
	0x03C4074C STR X30, [X31 + 0x20]
	0x03C40750 STP X20, X19, [X31 + 0x30]
	0x03C40754 ADRP X20, 0x7A5000
	0x03C40758 LDR X8, [X20 + 0xA20]
	0x03C4075C MOV X19, X0
	0x03C40760 STP S0, S1, [X31 + 0x10]
	0x03C40764 STR S2, [X31 + 0x18]
	0x03C40768 STP S3, S4, [X31]
	0x03C4076C STR S5, [X31 + 0x8]
	0x03C40770 CBNZ X8, 0x3C40788
	0x03C40774 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C40778 ADD X0, X0, 0xABB

ISIL:
	001 Move [X31-16], X30
	002 Call Transform.get_rotation, X0
	003 Move X0, X31
	004 Call Quaternion.Internal_ToEulerRad, X0
	005 Move X8, -51728384
	006 Move V3, [X8+1096]
	007 Move X0, X31
	008 Multiply S0, S0, S3
	009 Multiply S1, S1, S3
	010 Multiply S2, S2, S3
	011 Move X30, [X31+16]
	012 Call Quaternion.Internal_MakePositive, X0
	013 Return X0

Method: System.Void set_eulerAngles(UnityEngine.Vector3 value)

Disassembly:
	0x03C4077C BL 0x1C16CB8
	0x03C40780 MOV X8, X0
	0x03C40784 STR X0, [X20 + 0xA20]
	0x03C40788 ADD X1, X31, 0x10
	0x03C4078C ADD X2, X31, 0x0
	0x03C40790 MOV X0, X19
	0x03C40794 BLR X8
	0x03C40798 LDP X20, X19, [X31 + 0x30]
	0x03C4079C LDR X30, [X31 + 0x20]
	0x03C407A0 ADD X31, X31, 0x40
	0x03C407A4 RET
	0x03C407A8 STR D10, [X31 - 0x30]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, -51728384
	004 Move V3, [X8+260]
	005 Move X19, X0
	006 Move X0, X31
	007 Multiply S0, S0, S3
	008 Multiply S1, S1, S3
	009 Multiply S2, S2, S3
	010 Call Quaternion.Internal_FromEulerRad, X0
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]

Method: UnityEngine.Vector3 get_localEulerAngles()

Disassembly:
	0x03C40800 LDP X20, X19, [X31 + 0x20]
	0x03C40804 LDR X30, [X31 + 0x18]
	0x03C40808 LDP D9, D8, [X31 + 0x8]
	0x03C4080C LDR X8, [X8 + 0xB8]
	0x03C40810 MOV V0.16B, V10.16B
	0x03C40814 LDP S3, S4, [X8 + 0x18]
	0x03C40818 LDR V5, [X8 + 0x20]
	0x03C4081C LDR V10, [X31], #0x30
	0x03C40820 B 0x3C40748
	0x03C40824 STR X30, [X31 - 0x30]!
	0x03C40828 STP X22, X21, [X31 + 0x10]
	0x03C4082C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Call Transform.get_localRotation, X0
	003 Move X0, X31
	004 Call Quaternion.Internal_ToEulerRad, X0
	005 Move X8, -51728384
	006 Move V3, [X8+1096]
	007 Move X0, X31
	008 Multiply S0, S0, S3
	009 Multiply S1, S1, S3
	010 Multiply S2, S2, S3
	011 Move X30, [X31+16]
	012 Call Quaternion.Internal_MakePositive, X0
	013 Return X0

Method: System.Void set_localEulerAngles(UnityEngine.Vector3 value)

Disassembly:
	0x03C40888 LDR X3, [X22 + 0xA28]
	0x03C4088C MOV X19, X2
	0x03C40890 MOV X20, X1
	0x03C40894 MOV X21, X0
	0x03C40898 CBNZ X3, 0x3C408B0
	0x03C4089C ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C408A0 ADD X0, X0, 0xF64
	0x03C408A4 BL 0x1C16CB8
	0x03C408A8 MOV X3, X0
	0x03C408AC STR X0, [X22 + 0xA28]
	0x03C408B0 MOV X0, X21
	0x03C408B4 MOV X1, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, -51728384
	004 Move V3, [X8+260]
	005 Move X19, X0
	006 Move X0, X31
	007 Multiply S0, S0, S3
	008 Multiply S1, S1, S3
	009 Multiply S2, S2, S3
	010 Call Quaternion.Internal_FromEulerRad, X0
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]

Method: UnityEngine.Vector3 get_right()

Disassembly:
	0x03C4090C ADD X1, X31, 0x10
	0x03C40910 ADD X2, X31, 0x0
	0x03C40914 MOV X0, X19
	0x03C40918 BLR X8
	0x03C4091C LDP S0, S1, [X31]
	0x03C40920 LDR V2, [X31 + 0x8]
	0x03C40924 LDP X20, X19, [X31 + 0x30]
	0x03C40928 LDR X30, [X31 + 0x20]
	0x03C4092C ADD X31, X31, 0x40
	0x03C40930 RET
	0x03C40934 STR X30, [X31 - 0x30]!
	0x03C40938 STP X22, X21, [X31 + 0x10]
	0x03C4093C STP X20, X19, [X31 + 0x20]
	0x03C40940 ADRP X22, 0x7A5000
	0x03C40944 LDR X3, [X22 + 0xA30]
	0x03C40948 MOV X19, X2
	0x03C4094C MOV X20, X1
	0x03C40950 MOV X21, X0
	0x03C40954 CBNZ X3, 0x3C4096C
	0x03C40958 ADRP X0, 0xFFFFFFFFFCEC7000
	0x03C4095C ADD X0, X0, 0x414
	0x03C40960 BL 0x1C16CB8
	0x03C40964 MOV X3, X0
	0x03C40968 STR X0, [X22 + 0xA30]
	0x03C4096C MOV X0, X21
	0x03C40970 MOV X1, X20
	0x03C40974 MOV X2, X19
	0x03C40978 LDP X20, X19, [X31 + 0x20]
	0x03C4097C LDP X22, X21, [X31 + 0x10]
	0x03C40980 LDR X30, [X31], #0x30
	0x03C40984 BR X3

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Call Transform.get_rotation, X0
	008 Move X19, 0x799000
	009 Move W8, [X19+2928]
	010 Move V8, V0
	011 Move V9, V1
	012 Move V10, V2
	013 Move V11, V3
	014 Compare W8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, 0x4B4000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2928], W8
	021 Move X8, 0x4B4000
	022 Move X8, [X8+1440]
	023 Move V0, V8
	024 Move V1, V9
	025 Move X30, [X31+32]
	026 Move X19, [X31+40]
	027 Move X8, [X8]
	028 Move D9, [X31+16]
	029 Move D8, [X31+24]
	030 Move V2, V10
	031 Move V3, V11
	032 Move X8, [X8+184]
	033 Move X0, X31
	034 Move S4, [X8+60]
	035 Move S5, [X8+64]
	036 Move V6, [X8+68]
	037 Move D11, [X31+48]
	038 Move D10, [X31+56]
	039 Call Quaternion.op_Multiply, X0, X1
	040 Return X0

Method: UnityEngine.Vector3 get_up()

Disassembly:
	0x03C40988 SUB X31, X31, 0x40
	0x03C4098C STR X30, [X31 + 0x20]
	0x03C40990 STP X20, X19, [X31 + 0x30]
	0x03C40994 ADRP X20, 0x7A5000
	0x03C40998 LDR X8, [X20 + 0xA38]
	0x03C4099C MOV X19, X0
	0x03C409A0 STP S0, S1, [X31 + 0x10]
	0x03C409A4 STR S2, [X31 + 0x18]
	0x03C409A8 STR W31, [X31 + 0x8]
	0x03C409AC STR X31, [X31]
	0x03C409B0 CBNZ X8, 0x3C409C8
	0x03C409B4 ADRP X0, 0xFFFFFFFFFCEC9000
	0x03C409B8 ADD X0, X0, 0x45A
	0x03C409BC BL 0x1C16CB8
	0x03C409C0 MOV X8, X0
	0x03C409C4 STR X0, [X20 + 0xA38]
	0x03C409C8 ADD X1, X31, 0x10
	0x03C409CC ADD X2, X31, 0x0
	0x03C409D0 MOV X0, X19
	0x03C409D4 BLR X8
	0x03C409D8 LDP S0, S1, [X31]
	0x03C409DC LDR V2, [X31 + 0x8]
	0x03C409E0 LDP X20, X19, [X31 + 0x30]
	0x03C409E4 LDR X30, [X31 + 0x20]
	0x03C409E8 ADD X31, X31, 0x40
	0x03C409EC RET
	0x03C409F0 STR X30, [X31 - 0x30]!
	0x03C409F4 STP X22, X21, [X31 + 0x10]
	0x03C409F8 STP X20, X19, [X31 + 0x20]
	0x03C409FC ADRP X22, 0x7A5000
	0x03C40A00 LDR X3, [X22 + 0xA38]

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Call Transform.get_rotation, X0
	008 Move X19, 0x799000
	009 Move W8, [X19+1926]
	010 Move V8, V0
	011 Move V9, V1
	012 Move V10, V2
	013 Move V11, V3
	014 Compare W8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, 0x4B4000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+1926], W8
	021 Move X8, 0x4B4000
	022 Move X8, [X8+1440]
	023 Move V0, V8
	024 Move V1, V9
	025 Move X30, [X31+32]
	026 Move X19, [X31+40]
	027 Move X8, [X8]
	028 Move D9, [X31+16]
	029 Move D8, [X31+24]
	030 Move V2, V10
	031 Move V3, V11
	032 Move X8, [X8+184]
	033 Move X0, X31
	034 Move S4, [X8+24]
	035 Move S5, [X8+28]
	036 Move V6, [X8+32]
	037 Move D11, [X31+48]
	038 Move D10, [X31+56]
	039 Call Quaternion.op_Multiply, X0, X1
	040 Return X0

Method: UnityEngine.Vector3 get_forward()

Disassembly:
	0x03C40A04 MOV X19, X2
	0x03C40A08 MOV X20, X1
	0x03C40A0C MOV X21, X0
	0x03C40A10 CBNZ X3, 0x3C40A28
	0x03C40A14 ADRP X0, 0xFFFFFFFFFCEC9000
	0x03C40A18 ADD X0, X0, 0x45A
	0x03C40A1C BL 0x1C16CB8
	0x03C40A20 MOV X3, X0
	0x03C40A24 STR X0, [X22 + 0xA38]
	0x03C40A28 MOV X0, X21
	0x03C40A2C MOV X1, X20
	0x03C40A30 MOV X2, X19
	0x03C40A34 LDP X20, X19, [X31 + 0x20]
	0x03C40A38 LDP X22, X21, [X31 + 0x10]
	0x03C40A3C LDR X30, [X31], #0x30
	0x03C40A40 BR X3
	0x03C40A44 B 0x3C40988
	0x03C40A48 SUB X31, X31, 0x40
	0x03C40A4C STR X30, [X31 + 0x20]
	0x03C40A50 STP X20, X19, [X31 + 0x30]
	0x03C40A54 ADRP X20, 0x7A5000
	0x03C40A58 LDR X8, [X20 + 0xA40]
	0x03C40A5C MOV X19, X0
	0x03C40A60 STP S0, S1, [X31 + 0x10]
	0x03C40A64 STR S2, [X31 + 0x18]
	0x03C40A68 STR W31, [X31 + 0x8]
	0x03C40A6C STR X31, [X31]
	0x03C40A70 CBNZ X8, 0x3C40A88
	0x03C40A74 ADRP X0, 0xFFFFFFFFFCEC1000
	0x03C40A78 ADD X0, X0, 0x1DF
	0x03C40A7C BL 0x1C16CB8

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Call Transform.get_rotation, X0
	008 Move X19, 0x799000
	009 Move W8, [X19+2591]
	010 Move V8, V0
	011 Move V9, V1
	012 Move V10, V2
	013 Move V11, V3
	014 Compare W8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, 0x4B4000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2591], W8
	021 Move X8, 0x4B4000
	022 Move X8, [X8+1440]
	023 Move V0, V8
	024 Move V1, V9
	025 Move X30, [X31+32]
	026 Move X19, [X31+40]
	027 Move X8, [X8]
	028 Move D9, [X31+16]
	029 Move D8, [X31+24]
	030 Move V2, V10
	031 Move V3, V11
	032 Move X8, [X8+184]
	033 Move X0, X31
	034 Move S4, [X8+72]
	035 Move S5, [X8+76]
	036 Move V6, [X8+80]
	037 Move D11, [X31+48]
	038 Move D10, [X31+56]
	039 Call Quaternion.op_Multiply, X0, X1
	040 Return X0

Method: System.Void set_forward(UnityEngine.Vector3 value)

Disassembly:
	0x03C40A80 MOV X8, X0
	0x03C40A84 STR X0, [X20 + 0xA40]
	0x03C40A88 ADD X1, X31, 0x10
	0x03C40A8C ADD X2, X31, 0x0
	0x03C40A90 MOV X0, X19
	0x03C40A94 BLR X8
	0x03C40A98 LDP S0, S1, [X31]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call Quaternion.LookRotation, X0
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Call Transform.set_rotation, X0, X1
	010 Return 

Method: UnityEngine.Quaternion get_rotation()

Disassembly:
	0x03C3EEB4 LDP S14, S15, [X8 + 0x8]
	0x03C3EEB8 BL 0x3C3EA28
	0x03C3EEBC FSUB S0, S14, S0
	0x03C3EEC0 FSUB S1, S15, S1
	0x03C3EEC4 FMUL S0, S12, S0
	0x03C3EEC8 FMUL S1, S13, S1
	0x03C3EECC FADD S0, S10, S0
	0x03C3EED0 FADD S1, S11, S1
	0x03C3EED4 MOV X0, X19
	0x03C3EED8 FSUB S10, S9, S0
	0x03C3EEDC FSUB S11, S8, S1
	0x03C3EEE0 BL 0x3C3E90C
	0x03C3EEE4 FADD S0, S0, S10
	0x03C3EEE8 FADD S1, S1, S11
	0x03C3EEEC MOV X0, X19
	0x03C3EEF0 BL 0x3C3E99C
	0x03C3EEF4 MOV X0, X19
	0x03C3EEF8 BL 0x3C3E7F0
	0x03C3EEFC MOV X0, X19
	0x03C3EF00 MOV V8.16B, V0.16B
	0x03C3EF04 MOV V9.16B, V1.16B
	0x03C3EF08 BL 0x3C3EA28

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7A8000
	007 Move X8, [X20+2504]
	008 Move X19, X0
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51482624
	013 Add X0, X0, 4066
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+2504], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move S2, [X31+8]
	023 Move S3, [X31+12]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 48
	028 Return X0

Method: System.Void set_rotation(UnityEngine.Quaternion value)

Disassembly:
	0x03C407AC STP D9, D8, [X31 + 0x8]
	0x03C407B0 STR X30, [X31 + 0x18]
	0x03C407B4 STP X20, X19, [X31 + 0x20]
	0x03C407B8 ADRP X20, 0x798000
	0x03C407BC LDRB W8, [X20 + 0x786]
	0x03C407C0 MOV V8.16B, V2.16B
	0x03C407C4 MOV V9.16B, V1.16B
	0x03C407C8 MOV V10.16B, V0.16B
	0x03C407CC MOV X19, X0
	0x03C407D0 CBNZ W8, 0x3C407E8
	0x03C407D4 ADRP X0, 0x4B3000
	0x03C407D8 LDR X0, [X0 + 0x5A0]
	0x03C407DC BL 0x1C16CF4
	0x03C407E0 MOVZ W8, 0x1
	0x03C407E4 STRB W8, [X20 + 0x786]
	0x03C407E8 ADRP X8, 0x4B3000
	0x03C407EC LDR X8, [X8 + 0x5A0]
	0x03C407F0 MOV X0, X19
	0x03C407F4 MOV V1.16B, V9.16B
	0x03C407F8 MOV V2.16B, V8.16B
	0x03C407FC LDR X8, [X8]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A6000
	006 Move X8, [X20+2512]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Move [X31+16], S3
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51466240
	015 Add X0, X0, 2913
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X20+2512], X0
	019 Add X1, X31, 0
	020 Move X0, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+16]
	025 Add X31, X31, 48
	026 Return 

Method: UnityEngine.Quaternion get_localRotation()

Disassembly:
	0x03C40830 ADRP X22, 0x7A5000
	0x03C40834 LDR X3, [X22 + 0xA20]
	0x03C40838 MOV X19, X2
	0x03C4083C MOV X20, X1
	0x03C40840 MOV X21, X0
	0x03C40844 CBNZ X3, 0x3C4085C
	0x03C40848 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C4084C ADD X0, X0, 0xABB
	0x03C40850 BL 0x1C16CB8
	0x03C40854 MOV X3, X0
	0x03C40858 STR X0, [X22 + 0xA20]
	0x03C4085C MOV X0, X21
	0x03C40860 MOV X1, X20
	0x03C40864 MOV X2, X19
	0x03C40868 LDP X20, X19, [X31 + 0x20]
	0x03C4086C LDP X22, X21, [X31 + 0x10]
	0x03C40870 LDR X30, [X31], #0x30
	0x03C40874 BR X3
	0x03C40878 STR X30, [X31 - 0x30]!
	0x03C4087C STP X22, X21, [X31 + 0x10]
	0x03C40880 STP X20, X19, [X31 + 0x20]
	0x03C40884 ADRP X22, 0x7A5000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7A6000
	007 Move X8, [X20+2520]
	008 Move X19, X0
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51548160
	013 Add X0, X0, 3050
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+2520], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move S2, [X31+8]
	023 Move S3, [X31+12]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 48
	028 Return X0

Method: System.Void set_localRotation(UnityEngine.Quaternion value)

Disassembly:
	0x03C408B8 MOV X2, X19
	0x03C408BC LDP X20, X19, [X31 + 0x20]
	0x03C408C0 LDP X22, X21, [X31 + 0x10]
	0x03C408C4 LDR X30, [X31], #0x30
	0x03C408C8 BR X3
	0x03C408CC SUB X31, X31, 0x40
	0x03C408D0 STR X30, [X31 + 0x20]
	0x03C408D4 STP X20, X19, [X31 + 0x30]
	0x03C408D8 ADRP X20, 0x7A5000
	0x03C408DC LDR X8, [X20 + 0xA30]
	0x03C408E0 MOV X19, X0
	0x03C408E4 STP S0, S1, [X31 + 0x10]
	0x03C408E8 STR S2, [X31 + 0x18]
	0x03C408EC STR W31, [X31 + 0x8]
	0x03C408F0 STR X31, [X31]
	0x03C408F4 CBNZ X8, 0x3C4090C
	0x03C408F8 ADRP X0, 0xFFFFFFFFFCEC7000
	0x03C408FC ADD X0, X0, 0x414
	0x03C40900 BL 0x1C16CB8
	0x03C40904 MOV X8, X0
	0x03C40908 STR X0, [X20 + 0xA30]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A6000
	006 Move X8, [X20+2528]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Move [X31+16], S3
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51576832
	015 Add X0, X0, 1537
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X20+2528], X0
	019 Add X1, X31, 0
	020 Move X0, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X20, [X31+32]
	023 Move X19, [X31+40]
	024 Move X30, [X31+16]
	025 Add X31, X31, 48
	026 Return 

Method: UnityEngine.Vector3 get_localScale()

Disassembly:
	0x03C40BAC LDR V2, [X31 + 0x8]
	0x03C40BB0 LDP X20, X19, [X31 + 0x30]
	0x03C40BB4 LDR X30, [X31 + 0x20]
	0x03C40BB8 ADD X31, X31, 0x40
	0x03C40BBC RET
	0x03C40BC0 STR X30, [X31 - 0x30]!
	0x03C40BC4 STP X22, X21, [X31 + 0x10]
	0x03C40BC8 STP X20, X19, [X31 + 0x20]
	0x03C40BCC ADRP X22, 0x7A5000
	0x03C40BD0 LDR X3, [X22 + 0xA50]
	0x03C40BD4 MOV X19, X2
	0x03C40BD8 MOV X20, X1
	0x03C40BDC MOV X21, X0
	0x03C40BE0 CBNZ X3, 0x3C40BF8
	0x03C40BE4 ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C40BE8 ADD X0, X0, 0xFC2
	0x03C40BEC BL 0x1C16CB8
	0x03C40BF0 MOV X3, X0
	0x03C40BF4 STR X0, [X22 + 0xA50]
	0x03C40BF8 MOV X0, X21
	0x03C40BFC MOV X1, X20
	0x03C40C00 MOV X2, X19
	0x03C40C04 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A6000
	006 Move X8, [X20+2536]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51548160
	013 Add X0, X0, 3125
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+2536], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Void set_localScale(UnityEngine.Vector3 value)

Disassembly:
	0x03C40C4C BR X1
	0x03C40C50 STR X30, [X31 - 0x20]!
	0x03C40C54 STP X20, X19, [X31 + 0x10]
	0x03C40C58 ADRP X20, 0x7A5000
	0x03C40C5C LDR X1, [X20 + 0x948]
	0x03C40C60 MOV X19, X0
	0x03C40C64 CBNZ X1, 0x3C40C7C
	0x03C40C68 ADRP X0, 0xFFFFFFFFFCEC3000
	0x03C40C6C ADD X0, X0, 0x2AA
	0x03C40C70 BL 0x1C16CB8
	0x03C40C74 MOV X1, X0
	0x03C40C78 STR X0, [X20 + 0x948]
	0x03C40C7C MOV X0, X19
	0x03C40C80 LDP X20, X19, [X31 + 0x10]
	0x03C40C84 LDR X30, [X31], #0x20
	0x03C40C88 BR X1
	0x03C40C8C STR X30, [X31 - 0x20]!
	0x03C40C90 STP X20, X19, [X31 + 0x10]
	0x03C40C94 ADRP X20, 0x7A5000
	0x03C40C98 LDR X1, [X20 + 0x950]
	0x03C40C9C MOV X19, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A6000
	006 Move X8, [X20+2544]
	007 Move X19, X0
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51494912
	014 Add X0, X0, 848
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X20+2544], X0
	018 Add X1, X31, 0
	019 Move X0, X19
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X30, [X31+16]
	024 Add X31, X31, 48
	025 Return 

Method: UnityEngine.Transform get_parent()

Disassembly:
	0x03C4049C B 0x3C40210
	0x03C404A0 MOVZ W1, 0x1
	0x03C404A4 B 0x3C40210
	0x03C404A8 SUB X31, X31, 0x30
	0x03C404AC STR D8, [X31 + 0x10]
	0x03C404B0 STR X30, [X31 + 0x18]
	0x03C404B4 STP X20, X19, [X31 + 0x20]
	0x03C404B8 ADRP X20, 0x7A5000
	0x03C404BC LDR X8, [X20 + 0xA18]
	0x03C404C0 MOV V8.16B, V3.16B
	0x03C404C4 MOV X19, X0
	0x03C404C8 STP S0, S1, [X31]
	0x03C404CC STR S2, [X31 + 0x8]
	0x03C404D0 CBNZ X8, 0x3C404E8
	0x03C404D4 ADRP X0, 0xFFFFFFFFFCED1000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A6000
	005 Move X1, [X20+2344]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51658752
	010 Add X0, X0, 1136
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2344], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_parent(UnityEngine.Transform value)

Disassembly:
	0x03C40D20 ADD X0, X0, 0xB71
	0x03C40D24 BL 0x1C16CB8
	0x03C40D28 MOV X1, X0
	0x03C40D2C STR X0, [X20 + 0x960]
	0x03C40D30 MOV X0, X19
	0x03C40D34 LDP X20, X19, [X31 + 0x10]
	0x03C40D38 LDR X30, [X31], #0x20
	0x03C40D3C BR X1
	0x03C40D40 STP X30, X21, [X31 - 0x20]!
	0x03C40D44 STP X20, X19, [X31 + 0x10]
	0x03C40D48 ADRP X21, 0x7A5000
	0x03C40D4C LDR X2, [X21 + 0x968]
	0x03C40D50 MOV W19, W1
	0x03C40D54 MOV X20, X0
	0x03C40D58 CBNZ X2, 0x3C40D70
	0x03C40D5C ADRP X0, 0xFFFFFFFFFCED4000
	0x03C40D60 ADD X0, X0, 0xBC5
	0x03C40D64 BL 0x1C16CB8
	0x03C40D68 MOV X2, X0
	0x03C40D6C STR X0, [X21 + 0x968]
	0x03C40D70 MOV X0, X20
	0x03C40D74 MOV W1, W19
	0x03C40D78 LDP X20, X19, [X31 + 0x10]
	0x03C40D7C LDP X30, X21, [X31], #0x20
	0x03C40D80 BR X2
	0x03C40D84 STR X30, [X31 - 0x20]!
	0x03C40D88 STP X20, X19, [X31 + 0x10]
	0x03C40D8C ADRP X20, 0x7A5000
	0x03C40D90 LDR X1, [X20 + 0x970]
	0x03C40D94 MOV X19, X0
	0x03C40D98 CBNZ X1, 0x3C40DB0
	0x03C40D9C ADRP X0, 0xFFFFFFFFFCED6000
	0x03C40DA0 ADD X0, X0, 0xBC1
	0x03C40DA4 BL 0x1C16CB8
	0x03C40DA8 MOV X1, X0
	0x03C40DAC STR X0, [X20 + 0x970]
	0x03C40DB0 MOV X0, X19
	0x03C40DB4 LDP X20, X19, [X31 + 0x10]
	0x03C40DB8 LDR X30, [X31], #0x20
	0x03C40DBC BR X1
	0x03C40DC0 STR X30, [X31 - 0x30]!
	0x03C40DC4 STP X22, X21, [X31 + 0x10]
	0x03C40DC8 STP X20, X19, [X31 + 0x20]
	0x03C40DCC ADRP X22, 0x7A5000
	0x03C40DD0 LDR X3, [X22 + 0x978]
	0x03C40DD4 MOV W20, W2
	0x03C40DD8 MOV X19, X1
	0x03C40DDC MOV X21, X0
	0x03C40DE0 CBNZ X3, 0x3C40DF8
	0x03C40DE4 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C40DE8 ADD X0, X0, 0x4D1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move W8, [X21+2336]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x4B4000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x4DB000
	017 Move X0, [X0+3184]
	018 Call 0x1C17CF4
	019 Move X0, 0x520000
	020 Move X0, [X0+2064]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2336], W8
	024 Compare X20, 0
	025 JumpIfEqual {44}
	026 Move X8, 0x4DB000
	027 Move X8, [X8+3184]
	028 Move X9, [X20]
	029 Move X8, [X8]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X8, 0x4B4000
	032 Move X8, [X8+2600]
	033 Move X0, [X8]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X8, 0x520000
	039 Move X8, [X8+2064]
	040 Move X1, X20
	041 Move X2, X31
	042 Move X0, [X8]
	043 Call Debug.LogWarning, X0, X1
	044 Move X21, 0x7A6000
	045 Move X3, [X21+2352]
	046 Compare X3, 0
	047 JumpIfNotEqual {53}
	048 Move X0, -51519488
	049 Add X0, X0, 735
	050 Call 0x1C17CB8
	051 Move X3, X0
	052 Move [X21+2352], X0
	053 Move X0, X20
	054 Move X1, X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move W2, 1
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 CallNoReturn X3

Method: UnityEngine.Transform get_parentInternal()

Disassembly:
	0x03C40CE4 ADD X0, X0, 0x326
	0x03C40CE8 BL 0x1C16CB8
	0x03C40CEC MOV X1, X0
	0x03C40CF0 STR X0, [X20 + 0x958]
	0x03C40CF4 MOV X0, X19
	0x03C40CF8 LDP X20, X19, [X31 + 0x10]
	0x03C40CFC LDR X30, [X31], #0x20
	0x03C40D00 BR X1
	0x03C40D04 STR X30, [X31 - 0x20]!
	0x03C40D08 STP X20, X19, [X31 + 0x10]
	0x03C40D0C ADRP X20, 0x7A5000
	0x03C40D10 LDR X1, [X20 + 0x960]
	0x03C40D14 MOV X19, X0
	0x03C40D18 CBNZ X1, 0x3C40D30
	0x03C40D1C ADRP X0, 0xFFFFFFFFFCED8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A6000
	005 Move X1, [X20+2344]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51658752
	010 Add X0, X0, 1136
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2344], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_parentInternal(UnityEngine.Transform value)

Disassembly:
	0x03C40DEC BL 0x1C16CB8
	0x03C40DF0 MOV X3, X0
	0x03C40DF4 STR X0, [X22 + 0x978]
	0x03C40DF8 AND W2, W20, 0x1
	0x03C40DFC MOV X0, X21
	0x03C40E00 MOV X1, X19
	0x03C40E04 LDP X20, X19, [X31 + 0x20]
	0x03C40E08 LDP X22, X21, [X31 + 0x10]
	0x03C40E0C LDR X30, [X31], #0x30
	0x03C40E10 BR X3
	0x03C40E14 STP X30, X21, [X31 - 0x20]!
	0x03C40E18 STP X20, X19, [X31 + 0x10]
	0x03C40E1C CBZ X1, 0x3C40E60
	0x03C40E20 ADRP X21, 0x7A5000
	0x03C40E24 LDR X3, [X21 + 0x978]
	0x03C40E28 MOV X19, X1
	0x03C40E2C MOV X20, X0
	0x03C40E30 CBNZ X3, 0x3C40E48

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X3, [X21+2352]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X3, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51519488
	012 Add X0, X0, 735
	013 Call 0x1C17CB8
	014 Move X3, X0
	015 Move [X21+2352], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W2, 1
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 CallNoReturn X3

Method: UnityEngine.Transform GetParent()

Disassembly:
	0x03C40E34 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C40E38 ADD X0, X0, 0x4D1
	0x03C40E3C BL 0x1C16CB8
	0x03C40E40 MOV X3, X0
	0x03C40E44 STR X0, [X21 + 0x978]
	0x03C40E48 MOV X0, X20
	0x03C40E4C MOV X1, X19
	0x03C40E50 LDP X20, X19, [X31 + 0x10]
	0x03C40E54 MOV W2, W31
	0x03C40E58 LDP X30, X21, [X31], #0x20
	0x03C40E5C BR X3
	0x03C40E60 ADRP X0, 0x4B8000
	0x03C40E64 LDR X0, [X0 + 0x528]
	0x03C40E68 BL 0x1C16D08
	0x03C40E6C BL 0x1C16F10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A6000
	005 Move X1, [X20+2344]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51658752
	010 Add X0, X0, 1136
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2344], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetParent(UnityEngine.Transform p)

Disassembly:
	0x03C40E70 MOV X19, X0
	0x03C40E74 ADRP X0, 0x51F000
	0x03C40E78 LDR X0, [X0 + 0x818]
	0x03C40E7C BL 0x1C16D08
	0x03C40E80 MOV X1, X0
	0x03C40E84 MOV X0, X19
	0x03C40E88 MOV X2, X31
	0x03C40E8C BL 0x330E100
	0x03C40E90 ADRP X0, 0x51F000
	0x03C40E94 LDR X0, [X0 + 0x820]
	0x03C40E98 BL 0x1C16D08
	0x03C40E9C MOV X1, X0
	0x03C40EA0 MOV X0, X19
	0x03C40EA4 BL 0x1C16DEC
	0x03C40EA8 SUB X31, X31, 0x30
	0x03C40EAC STR X30, [X31 + 0x10]
	0x03C40EB0 STP X20, X19, [X31 + 0x20]
	0x03C40EB4 ADRP X20, 0x7A5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X3, [X21+2352]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X3, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51519488
	012 Add X0, X0, 735
	013 Call 0x1C17CB8
	014 Move X3, X0
	015 Move [X21+2352], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W2, 1
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 CallNoReturn X3

Method: System.Void SetParent(UnityEngine.Transform parent, System.Boolean worldPositionStays)

Disassembly:
	0x03C40EB8 LDR X8, [X20 + 0xA58]
	0x03C40EBC MOV X19, X0
	0x03C40EC0 STR W31, [X31 + 0x8]
	0x03C40EC4 STR X31, [X31]
	0x03C40EC8 CBNZ X8, 0x3C40EE0
	0x03C40ECC ADRP X0, 0xFFFFFFFFFCED1000
	0x03C40ED0 ADD X0, X0, 0x2EC
	0x03C40ED4 BL 0x1C16CB8
	0x03C40ED8 MOV X8, X0
	0x03C40EDC STR X0, [X20 + 0xA58]
	0x03C40EE0 ADD X1, X31, 0x0
	0x03C40EE4 MOV X0, X19
	0x03C40EE8 BLR X8
	0x03C40EEC LDP S0, S1, [X31]
	0x03C40EF0 LDR V2, [X31 + 0x8]
	0x03C40EF4 LDP X20, X19, [X31 + 0x20]
	0x03C40EF8 LDR X30, [X31 + 0x10]
	0x03C40EFC ADD X31, X31, 0x30
	0x03C40F00 RET
	0x03C40F04 STP X30, X21, [X31 - 0x20]!
	0x03C40F08 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A6000
	007 Move X3, [X22+2352]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51519488
	014 Add X0, X0, 735
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2352], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move X1, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: UnityEngine.Matrix4x4 get_worldToLocalMatrix()

Disassembly:
	0x03C40F0C ADRP X21, 0x7A5000
	0x03C40F10 LDR X2, [X21 + 0xA58]
	0x03C40F14 MOV X19, X1
	0x03C40F18 MOV X20, X0
	0x03C40F1C CBNZ X2, 0x3C40F34
	0x03C40F20 ADRP X0, 0xFFFFFFFFFCED1000
	0x03C40F24 ADD X0, X0, 0x2EC
	0x03C40F28 BL 0x1C16CB8
	0x03C40F2C MOV X2, X0
	0x03C40F30 STR X0, [X21 + 0xA58]
	0x03C40F34 MOV X0, X20
	0x03C40F38 MOV X1, X19
	0x03C40F3C LDP X20, X19, [X31 + 0x10]
	0x03C40F40 LDP X30, X21, [X31], #0x20
	0x03C40F44 BR X2
	0x03C40F48 STP X30, X21, [X31 - 0x20]!
	0x03C40F4C STP X20, X19, [X31 + 0x10]
	0x03C40F50 ADRP X21, 0x7A5000
	0x03C40F54 LDR X2, [X21 + 0x980]
	0x03C40F58 MOV X19, X1
	0x03C40F5C MOV X20, X0
	0x03C40F60 CBNZ X2, 0x3C40F78
	0x03C40F64 ADRP X0, 0xFFFFFFFFFCEBB000
	0x03C40F68 ADD X0, X0, 0x493
	0x03C40F6C BL 0x1C16CB8
	0x03C40F70 MOV X2, X0
	0x03C40F74 STR X0, [X21 + 0x980]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x7A6000
	007 Move X19, X8
	008 Move X8, [X21+2552]
	009 Move X20, X0
	010 NotImplemented "Instruction MOVI not yet implemented."
	011 Move [X31+32], V0
	012 Move [X31+40], V0
	013 Move [X31], V0
	014 Move [X31+8], V0
	015 Compare X8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51531776
	018 Add X0, X0, 3674
	019 Call 0x1C17CB8
	020 Move X8, X0
	021 Move [X21+2552], X0
	022 Add X1, X31, 0
	023 Move X0, X20
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move V1, [X31+32]
	026 Move V0, [X31+48]
	027 Move V3, [X31]
	028 Move V2, [X31+16]
	029 Move X30, [X31+64]
	030 Move X21, [X31+72]
	031 Move [X19+32], V1
	032 Move [X19+40], V0
	033 Move [X19], V3
	034 Move [X19+8], V2
	035 Move X20, [X31+80]
	036 Move X19, [X31+88]
	037 Add X31, X31, 96
	038 Return X0

Method: UnityEngine.Matrix4x4 get_localToWorldMatrix()

Disassembly:
	0x03C401C8 ADRP X22, 0x7A5000
	0x03C401CC LDR X3, [X22 + 0x940]
	0x03C401D0 MOV X19, X2
	0x03C401D4 MOV X20, X1
	0x03C401D8 MOV X21, X0
	0x03C401DC CBNZ X3, 0x3C401F4
	0x03C401E0 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C401E4 ADD X0, X0, 0xA32
	0x03C401E8 BL 0x1C16CB8
	0x03C401EC MOV X3, X0
	0x03C401F0 STR X0, [X22 + 0x940]
	0x03C401F4 MOV X0, X21
	0x03C401F8 MOV X1, X20
	0x03C401FC MOV X2, X19
	0x03C40200 LDP X20, X19, [X31 + 0x20]
	0x03C40204 LDP X22, X21, [X31 + 0x10]
	0x03C40208 LDR X30, [X31], #0x30
	0x03C4020C BR X3
	0x03C40210 STP D15, D14, [X31 - 0x60]!
	0x03C40214 STP D13, D12, [X31 + 0x10]
	0x03C40218 STP D11, D10, [X31 + 0x20]
	0x03C4021C STP D9, D8, [X31 + 0x30]
	0x03C40220 STR X30, [X31 + 0x40]
	0x03C40224 STP X20, X19, [X31 + 0x50]
	0x03C40228 ADRP X8, 0xFFFFFFFFFCEAA000
	0x03C4022C LDR V3, [X8 + 0x104]
	0x03C40230 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x7A6000
	007 Move X19, X8
	008 Move X8, [X21+2560]
	009 Move X20, X0
	010 NotImplemented "Instruction MOVI not yet implemented."
	011 Move [X31+32], V0
	012 Move [X31+40], V0
	013 Move [X31], V0
	014 Move [X31+8], V0
	015 Compare X8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51699712
	018 Add X0, X0, 764
	019 Call 0x1C17CB8
	020 Move X8, X0
	021 Move [X21+2560], X0
	022 Add X1, X31, 0
	023 Move X0, X20
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move V1, [X31+32]
	026 Move V0, [X31+48]
	027 Move V3, [X31]
	028 Move V2, [X31+16]
	029 Move X30, [X31+64]
	030 Move X21, [X31+72]
	031 Move [X19+32], V1
	032 Move [X19+40], V0
	033 Move [X19], V3
	034 Move [X19+8], V2
	035 Move X20, [X31+80]
	036 Move X19, [X31+88]
	037 Add X31, X31, 96
	038 Return X0

Method: System.Void SetPositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)

Disassembly:
	0x03C41000 LDP X20, X19, [X31 + 0x10]
	0x03C41004 LDP X30, X21, [X31], #0x20
	0x03C41008 BR X2
	0x03C4100C STP X30, X21, [X31 - 0x20]!
	0x03C41010 STP X20, X19, [X31 + 0x10]
	0x03C41014 ADRP X20, 0x7A4000
	0x03C41018 ADRP X21, 0x51E000
	0x03C4101C LDRB W8, [X20 + 0x998]
	0x03C41020 LDR X21, [X21 + 0x828]
	0x03C41024 MOV X19, X0
	0x03C41028 TBNZ X8, 0x0, 0x3C41040
	0x03C4102C ADRP X0, 0x51E000
	0x03C41030 LDR X0, [X0 + 0x828]
	0x03C41034 BL 0x1C16CF4
	0x03C41038 MOVZ W8, 0x1
	0x03C4103C STRB W8, [X20 + 0x998]
	0x03C41040 LDR X0, [X21]
	0x03C41044 BL 0x1C16F10
	0x03C41048 MOVN W8, 0x0
	0x03C4104C MOV X1, X31
	0x03C41050 MOV X20, X0
	0x03C41054 STR W8, [X0 + 0x18]
	0x03C41058 BL 0x33BDD8C
	0x03C4105C STR X19, [X20 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2568]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31], S3
	012 Move [X31+8], S4
	013 Move [X31+8], S5
	014 Move [X31+16], S6
	015 Compare X8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51589120
	018 Add X0, X0, 153
	019 Call 0x1C17CB8
	020 Move X8, X0
	021 Move [X20+2568], X0
	022 Add X1, X31, 16
	023 Add X2, X31, 0
	024 Move X0, X19
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X20, [X31+48]
	027 Move X19, [X31+56]
	028 Move X30, [X31+32]
	029 Add X31, X31, 64
	030 Return 

Method: System.Void SetLocalPositionAndRotation(UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation)

Disassembly:
	0x03C410B4 MOV X20, X0
	0x03C410B8 CBNZ X2, 0x3C410D0
	0x03C410BC ADRP X0, 0xFFFFFFFFFCECE000
	0x03C410C0 ADD X0, X0, 0x5D3
	0x03C410C4 BL 0x1C16CB8
	0x03C410C8 MOV X2, X0
	0x03C410CC STR X0, [X21 + 0x9A0]
	0x03C410D0 MOV X0, X20
	0x03C410D4 MOV W1, W19
	0x03C410D8 LDP X20, X19, [X31 + 0x10]
	0x03C410DC LDP X30, X21, [X31], #0x20
	0x03C410E0 BR X2
	0x03C410E4 STP X30, X21, [X31 - 0x20]!
	0x03C410E8 STP X20, X19, [X31 + 0x10]
	0x03C410EC LDR X19, [X0 + 0x10]
	0x03C410F0 CBZ X19, 0x3C4112C
	0x03C410F4 ADRP X21, 0x7A4000
	0x03C410F8 LDR X2, [X21 + 0x9A0]
	0x03C410FC LDR W20, [X0 + 0x18]
	0x03C41100 CBNZ X2, 0x3C41118
	0x03C41104 ADRP X0, 0xFFFFFFFFFCECE000
	0x03C41108 ADD X0, X0, 0x5D3
	0x03C4110C BL 0x1C16CB8
	0x03C41110 MOV X2, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2576]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31], S3
	012 Move [X31+8], S4
	013 Move [X31+8], S5
	014 Move [X31+16], S6
	015 Compare X8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51646464
	018 Add X0, X0, 1211
	019 Call 0x1C17CB8
	020 Move X8, X0
	021 Move [X20+2576], X0
	022 Add X1, X31, 16
	023 Add X2, X31, 0
	024 Move X0, X19
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X20, [X31+48]
	027 Move X19, [X31+56]
	028 Move X30, [X31+32]
	029 Add X31, X31, 64
	030 Return 

Method: System.Void GetPositionAndRotation(out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation)

Disassembly:
	0x03C41168 BLR X8
	0x03C4116C LDR W8, [X19 + 0x18]
	0x03C41170 ADD W8, W8, 0x1
	0x03C41174 STR W8, [X19 + 0x18]
	0x03C41178 LDP X20, X19, [X31 + 0x10]
	0x03C4117C CMP W8, W0
	0x03C41180 CSET W0, LT
	0x03C41184 LDP X30, X21, [X31], #0x20
	0x03C41188 RET
	0x03C4118C BL 0x1C16F20
	0x03C41190 MOVN W8, 0x0
	0x03C41194 STR W8, [X0 + 0x18]
	0x03C41198 RET
	0x03C4119C STR X30, [X31 - 0x20]!
	0x03C411A0 STP X20, X19, [X31 + 0x10]
	0x03C411A4 ADRP X20, 0x7A4000
	0x03C411A8 LDRB W8, [X20 + 0xA60]
	0x03C411AC MOV X19, X0
	0x03C411B0 TBNZ X8, 0x0, 0x3C411C8
	0x03C411B4 ADRP X0, 0x51E000
	0x03C411B8 LDR X0, [X0 + 0x830]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2360]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51646464
	014 Add X0, X0, 1047
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2360], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void GetLocalPositionAndRotation(out UnityEngine.Vector3 localPosition, out UnityEngine.Quaternion localRotation)

Disassembly:
	0x03C411BC BL 0x1C16CF4
	0x03C411C0 MOVZ W8, 0x1
	0x03C411C4 STRB W8, [X20 + 0xA60]
	0x03C411C8 LDR X0, [X19 + 0x18]
	0x03C411CC CBZ X0, 0x3C411E4
	0x03C411D0 ADRP X8, 0x51E000
	0x03C411D4 LDR X8, [X8 + 0x830]
	0x03C411D8 LDR X2, [X8]
	0x03C411DC MOV X1, X19
	0x03C411E0 BL 0x2729DBC
	0x03C411E4 LDP X20, X19, [X31 + 0x10]
	0x03C411E8 LDR X30, [X31], #0x20
	0x03C411EC RET
	0x03C411F0 CMP W1, 0x1
	0x03C411F4 MOV X20, X0
	0x03C411F8 B.NE 0x3C41284
	0x03C411FC MOV X0, X20
	0x03C41200 BL 0x3EB1AD0
	0x03C41204 MOV X20, X0
	0x03C41208 ADRP X0, 0x4B2000
	0x03C4120C LDR X0, [X0 + 0x7D0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2368]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51462144
	014 Add X0, X0, 2610
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2368], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void Rotate(UnityEngine.Vector3 eulers, UnityEngine.Space relativeTo)

Disassembly:
	0x03C41210 BL 0x1C16D08
	0x03C41214 LDR X8, [X20]
	0x03C41218 LDR X1, [X8]
	0x03C4121C BL 0x1C17270
	0x03C41220 TBZ X0, 0x0, 0x3C4125C
	0x03C41224 LDR X20, [X20]
	0x03C41228 BL 0x3EB1AE0
	0x03C4122C ADRP X0, 0x4B2000
	0x03C41230 LDR X0, [X0 + 0xA28]
	0x03C41234 BL 0x1C16D08
	0x03C41238 LDR W8, [X0 + 0xE0]
	0x03C4123C CBNZ W8, 0x3C41244
	0x03C41240 BL 0x1C16DFC
	0x03C41244 MOV X0, X20
	0x03C41248 MOV X1, X19
	0x03C4124C LDP X20, X19, [X31 + 0x10]
	0x03C41250 MOV X2, X31
	0x03C41254 LDR X30, [X31], #0x20
	0x03C41258 B 0x3C068F0
	0x03C4125C MOVZ W0, 0x8
	0x03C41260 BL 0x3EB1AF0
	0x03C41264 LDR X8, [X20]
	0x03C41268 STR X8, [X0]
	0x03C4126C ADRP X1, 0x273000
	0x03C41270 ADD X1, X1, 0xE58
	0x03C41274 MOV X2, X31
	0x03C41278 BL 0x3EB1B00
	0x03C4127C MOV X20, X0
	0x03C41280 BL 0x3EB1AE0
	0x03C41284 MOV X0, X20
	0x03C41288 BL 0x1D2C690
	0x03C4128C BL 0x1990590
	0x03C41290 SUB X31, X31, 0x30
	0x03C41294 STP X31, X30, [X31 + 0x8]
	0x03C41298 STP X20, X19, [X31 + 0x20]
	0x03C4129C ADRP X20, 0x7A4000
	0x03C412A0 LDR X8, [X20 + 0xA68]
	0x03C412A4 MOV X19, X0
	0x03C412A8 STR X31, [X31]
	0x03C412AC CBNZ X8, 0x3C412C4
	0x03C412B0 ADRP X0, 0xFFFFFFFFFCEB6000
	0x03C412B4 ADD X0, X0, 0x403
	0x03C412B8 BL 0x1C16CB8
	0x03C412BC MOV X8, X0
	0x03C412C0 STR X0, [X20 + 0xA68]
	0x03C412C4 ADD X1, X31, 0x0
	0x03C412C8 MOV X0, X19
	0x03C412CC BLR X8
	0x03C412D0 LDP S0, S1, [X31]
	0x03C412D4 LDP S2, S3, [X31 + 0x8]
	0x03C412D8 LDP X20, X19, [X31 + 0x20]
	0x03C412DC LDR X30, [X31 + 0x10]
	0x03C412E0 ADD X31, X31, 0x30
	0x03C412E4 RET
	0x03C412E8 STP X30, X21, [X31 - 0x20]!
	0x03C412EC STP X20, X19, [X31 + 0x10]
	0x03C412F0 ADRP X21, 0x7A4000
	0x03C412F4 LDR X2, [X21 + 0xA68]
	0x03C412F8 MOV X19, X1
	0x03C412FC MOV X20, X0
	0x03C41300 CBNZ X2, 0x3C41318
	0x03C41304 ADRP X0, 0xFFFFFFFFFCEB6000
	0x03C41308 ADD X0, X0, 0x403
	0x03C4130C BL 0x1C16CB8
	0x03C41310 MOV X2, X0
	0x03C41314 STR X0, [X21 + 0xA68]
	0x03C41318 MOV X0, X20
	0x03C4131C MOV X1, X19
	0x03C41320 LDP X20, X19, [X31 + 0x10]
	0x03C41324 LDP X30, X21, [X31], #0x20
	0x03C41328 BR X2
	0x03C4132C SUB X31, X31, 0x30
	0x03C41330 STR X30, [X31 + 0x10]
	0x03C41334 STP X20, X19, [X31 + 0x20]
	0x03C41338 ADRP X20, 0x7A4000
	0x03C4133C LDR X8, [X20 + 0xA70]
	0x03C41340 MOV X19, X0
	0x03C41344 STP S0, S1, [X31]
	0x03C41348 STP S2, S3, [X31 + 0x8]
	0x03C4134C CBNZ X8, 0x3C41364
	0x03C41350 ADRP X0, 0xFFFFFFFFFCED1000
	0x03C41354 ADD X0, X0, 0xF4E
	0x03C41358 BL 0x1C16CB8
	0x03C4135C MOV X8, X0
	0x03C41360 STR X0, [X20 + 0xA70]
	0x03C41364 ADD X1, X31, 0x0
	0x03C41368 MOV X0, X19
	0x03C4136C BLR X8
	0x03C41370 LDP X20, X19, [X31 + 0x20]
	0x03C41374 LDR X30, [X31 + 0x10]
	0x03C41378 ADD X31, X31, 0x30
	0x03C4137C RET
	0x03C41380 STP X30, X21, [X31 - 0x20]!
	0x03C41384 STP X20, X19, [X31 + 0x10]
	0x03C41388 ADRP X21, 0x7A4000
	0x03C4138C LDR X2, [X21 + 0xA70]
	0x03C41390 MOV X19, X1
	0x03C41394 MOV X20, X0
	0x03C41398 CBNZ X2, 0x3C413B0
	0x03C4139C ADRP X0, 0xFFFFFFFFFCED1000
	0x03C413A0 ADD X0, X0, 0xF4E
	0x03C413A4 BL 0x1C16CB8
	0x03C413A8 MOV X2, X0
	0x03C413AC STR X0, [X21 + 0xA70]
	0x03C413B0 MOV X0, X20
	0x03C413B4 MOV X1, X19
	0x03C413B8 LDP X20, X19, [X31 + 0x10]
	0x03C413BC LDP X30, X21, [X31], #0x20
	0x03C413C0 BR X2
	0x03C413C4 STP X30, X21, [X31 - 0x20]!
	0x03C413C8 STP X20, X19, [X31 + 0x10]
	0x03C413CC ADRP X20, 0x7A4000
	0x03C413D0 ADRP X21, 0x4B2000
	0x03C413D4 LDRB W8, [X20 + 0xA78]
	0x03C413D8 LDR X21, [X21 + 0x598]
	0x03C413DC MOV X19, X0
	0x03C413E0 TBNZ X8, 0x0, 0x3C413F8
	0x03C413E4 ADRP X0, 0x4B2000
	0x03C413E8 LDR X0, [X0 + 0x598]
	0x03C413EC BL 0x1C16CF4
	0x03C413F0 MOVZ W8, 0x1
	0x03C413F4 STRB W8, [X20 + 0xA78]
	0x03C413F8 LDR X0, [X21]
	0x03C413FC LDR W8, [X0 + 0xE0]
	0x03C41400 CBNZ W8, 0x3C41408
	0x03C41404 BL 0x1C16DFC
	0x03C41408 MOV X0, X19
	0x03C4140C LDP X20, X19, [X31 + 0x10]
	0x03C41410 MOV X1, X31
	0x03C41414 LDP X30, X21, [X31], #0x20
	0x03C41418 B 0x33BDD8C
	0x03C4141C STR X30, [X31 - 0x20]!
	0x03C41420 STP X20, X19, [X31 + 0x10]
	0x03C41424 ADRP X20, 0x7A4000
	0x03C41428 LDR X1, [X20 + 0xA80]
	0x03C4142C MOV X19, X0
	0x03C41430 CBNZ X1, 0x3C41448
	0x03C41434 ADRP X0, 0xFFFFFFFFFCECC000
	0x03C41438 ADD X0, X0, 0xFE
	0x03C4143C BL 0x1C16CB8
	0x03C41440 MOV X1, X0
	0x03C41444 STR X0, [X20 + 0xA80]
	0x03C41448 MOV X0, X19
	0x03C4144C LDP X20, X19, [X31 + 0x10]
	0x03C41450 LDR X30, [X31], #0x20
	0x03C41454 BR X1
	0x03C41458 STR X30, [X31 - 0x20]!
	0x03C4145C STP X20, X19, [X31 + 0x10]
	0x03C41460 ADRP X20, 0x7A4000
	0x03C41464 LDR X1, [X20 + 0xA88]
	0x03C41468 MOV X19, X0
	0x03C4146C CBNZ X1, 0x3C41484
	0x03C41470 ADRP X0, 0xFFFFFFFFFCEE4000
	0x03C41474 ADD X0, X0, 0x28
	0x03C41478 BL 0x1C16CB8
	0x03C4147C MOV X1, X0
	0x03C41480 STR X0, [X20 + 0xA88]
	0x03C41484 MOV X0, X19
	0x03C41488 LDP X20, X19, [X31 + 0x10]
	0x03C4148C LDR X30, [X31], #0x20
	0x03C41490 BR X1
	0x03C41494 SUB X31, X31, 0x30

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X8, -51732480
	013 Move V3, [X8+260]
	014 Move X19, X0
	015 Move X0, X31
	016 Move W20, W1
	017 Multiply S0, S0, S3
	018 Multiply S1, S1, S3
	019 Multiply S2, S2, S3
	020 Call Quaternion.Internal_FromEulerRad, X0
	021 Move V15, V0
	022 Move V13, V1
	023 Move V12, V2
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move V14, V3
	026 Move X0, X19
	027 Call Transform.get_localRotation, X0
	028 Multiply S4, S15, S3
	029 Multiply S5, S14, S0
	030 Multiply S6, S12, S1
	031 Multiply S7, S13, S2
	032 Multiply S16, S13, S3
	033 Multiply S17, S14, S1
	034 Multiply S19, S12, S0
	035 Multiply S20, S13, S0
	036 Multiply S0, S15, S0
	037 Multiply S21, S15, S1
	038 Multiply S1, S13, S1
	039 Multiply S22, S12, S3
	040 Multiply S3, S14, S3
	041 Multiply S23, S14, S2
	042 Multiply S24, S12, S2
	043 Move X0, X19
	044 Move X20, [X31+80]
	045 Move X19, [X31+88]
	046 Move X30, [X31+64]
	047 Move D9, [X31+48]
	048 Move D8, [X31+56]
	049 Move D11, [X31+32]
	050 Move D10, [X31+40]
	051 Move D13, [X31+16]
	052 Move D12, [X31+24]
	053 Multiply S18, S15, S2
	054 Add S2, S4, S5
	055 Add S4, S16, S17
	056 Add S5, S22, S23
	057 Subtract S0, S3, S0
	058 Add S2, S6, S2
	059 Add S3, S18, S4
	060 Add S4, S20, S5
	061 Subtract S5, S0, S1
	062 Subtract S0, S2, S7
	063 Subtract S1, S3, S19
	064 Subtract S2, S4, S21
	065 Subtract S3, S5, S24
	066 Move D15, [X31+96]
	067 Move D14, [X31+104]
	068 Call Transform.set_localRotation, X0, X1
	069 Return 
	070 Call Transform.get_rotation, X0
	071 Move X0, X19
	072 Move V10, V0
	073 Move V9, V1
	074 Move V8, V2
	075 Move V11, V3
	076 Call Transform.get_rotation, X0
	077 Move X0, X31
	078 Call Quaternion.Inverse, X0
	079 Multiply S4, S15, S3
	080 Multiply S5, S14, S0
	081 Multiply S16, S13, S3
	082 Multiply S17, S14, S1
	083 Multiply S19, S12, S0
	084 Multiply S20, S13, S0
	085 Multiply S0, S15, S0
	086 Multiply S22, S12, S3
	087 Multiply S3, S14, S3
	088 Multiply S23, S14, S2
	089 Multiply S6, S12, S1
	090 Multiply S18, S15, S2
	091 Multiply S21, S15, S1
	092 Multiply S1, S13, S1
	093 Add S4, S4, S5
	094 Add S5, S16, S17
	095 Add S16, S22, S23
	096 Subtract S0, S3, S0
	097 Multiply S7, S13, S2
	098 Multiply S2, S12, S2
	099 Add S3, S6, S4
	100 Add S4, S18, S5
	101 Add S5, S20, S16
	102 Subtract S0, S0, S1
	103 Move X0, X19
	104 Subtract S12, S3, S7
	105 Subtract S13, S4, S19
	106 Subtract S14, S5, S21
	107 Subtract S15, S0, S2
	108 Call Transform.get_rotation, X0
	109 Multiply S4, S0, S15
	110 Multiply S5, S3, S12
	111 Multiply S16, S1, S15
	112 Multiply S17, S3, S13
	113 Multiply S21, S0, S12
	114 Multiply S22, S2, S15
	115 Multiply S23, S3, S15
	116 Multiply S3, S3, S14
	117 Multiply S6, S2, S13
	118 Multiply S7, S1, S14
	119 Multiply S18, S0, S14
	120 Multiply S20, S1, S12
	121 Multiply S1, S1, S13
	122 Add S4, S4, S5
	123 Add S5, S16, S17
	124 Add S3, S22, S3
	125 Subtract S16, S23, S21
	126 Multiply S19, S2, S12
	127 Multiply S0, S0, S13
	128 Multiply S2, S2, S14
	129 Add S4, S6, S4
	130 Add S5, S18, S5
	131 Add S3, S20, S3
	132 Subtract S1, S16, S1
	133 Subtract S4, S4, S7
	134 Subtract S5, S5, S19
	135 Subtract S0, S3, S0
	136 Subtract S1, S1, S2
	137 Multiply S2, S11, S4
	138 Multiply S3, S10, S1
	139 Multiply S6, S9, S0
	140 Multiply S7, S8, S5
	141 Multiply S16, S11, S5
	142 Multiply S17, S9, S1
	143 Multiply S18, S8, S4
	144 Multiply S19, S10, S0
	145 Multiply S20, S10, S5
	146 Multiply S21, S10, S4
	147 Multiply S4, S9, S4
	148 Multiply S5, S9, S5
	149 Multiply S22, S11, S0
	150 Multiply S23, S11, S1
	151 Multiply S1, S8, S1
	152 Multiply S24, S8, S0
	153 Move X0, X19
	154 Move X20, [X31+80]
	155 Move X19, [X31+88]
	156 Move X30, [X31+64]
	157 Move D9, [X31+48]
	158 Move D8, [X31+56]
	159 Move D11, [X31+32]
	160 Move D10, [X31+40]
	161 Move D13, [X31+16]
	162 Move D12, [X31+24]
	163 Add S0, S2, S3
	164 Add S2, S16, S17
	165 Add S1, S22, S1
	166 Subtract S3, S23, S21
	167 Add S0, S6, S0
	168 Add S2, S18, S2
	169 Add S6, S20, S1
	170 Subtract S3, S3, S5
	171 Subtract S0, S0, S7
	172 Subtract S1, S2, S19
	173 Subtract S2, S6, S4
	174 Subtract S3, S3, S24
	175 Move D15, [X31+96]
	176 Move D14, [X31+104]
	177 Call Transform.set_rotation, X0, X1
	178 Return 

Method: System.Void Rotate(UnityEngine.Vector3 eulers)

Disassembly:
	0x03C41498 STP X31, X30, [X31 + 0x8]
	0x03C4149C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W1, 1
	002 Call Transform.Rotate, X0, X1, X2
	003 Return 

Method: System.Void Rotate(System.Single xAngle, System.Single yAngle, System.Single zAngle)

Disassembly:
	0x03C414A0 ADRP X20, 0x7A4000
	0x03C414A4 LDR X8, [X20 + 0xAC8]

ISIL:
	001 Move W1, 1
	002 Call Transform.Rotate, X0, X1, X2
	003 Return 

Method: System.Void RotateAroundInternal(UnityEngine.Vector3 axis, System.Single angle)

Disassembly:
	0x03C414A8 MOV X19, X0
	0x03C414AC STR X31, [X31]
	0x03C414B0 CBNZ X8, 0x3C414C8
	0x03C414B4 ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C414B8 ADD X0, X0, 0x96
	0x03C414BC BL 0x1C16CB8
	0x03C414C0 MOV X8, X0
	0x03C414C4 STR X0, [X20 + 0xAC8]
	0x03C414C8 ADD X1, X31, 0x0
	0x03C414CC MOV X0, X19
	0x03C414D0 BLR X8
	0x03C414D4 LDP S0, S1, [X31]
	0x03C414D8 LDP S2, S3, [X31 + 0x8]
	0x03C414DC LDP X20, X19, [X31 + 0x20]
	0x03C414E0 LDR X30, [X31 + 0x10]
	0x03C414E4 ADD X31, X31, 0x30
	0x03C414E8 RET
	0x03C414EC STP X30, X21, [X31 - 0x20]!
	0x03C414F0 STP X20, X19, [X31 + 0x10]
	0x03C414F4 ADRP X21, 0x7A4000
	0x03C414F8 LDR X2, [X21 + 0xAC8]
	0x03C414FC MOV X19, X1
	0x03C41500 MOV X20, X0
	0x03C41504 CBNZ X2, 0x3C4151C
	0x03C41508 ADRP X0, 0xFFFFFFFFFCEE6000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x7A5000
	007 Move X8, [X20+2584]
	008 Move V8, V3
	009 Move X19, X0
	010 Move [X31], S0
	011 Move [X31+8], S1
	012 Move [X31+8], S2
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51572736
	016 Add X0, X0, 659
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X20+2584], X0
	020 Add X1, X31, 0
	021 Move X0, X19
	022 Move V0, V8
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+24]
	027 Move V8, [X31+16]
	028 Add X31, X31, 48
	029 Return 

Method: System.Void Rotate(UnityEngine.Vector3 axis, System.Single angle, UnityEngine.Space relativeTo)

Disassembly:
	0x03C41560 STR X0, [X20 + 0xAD0]
	0x03C41564 ADD X1, X31, 0x0
	0x03C41568 MOV X0, X19
	0x03C4156C BLR X8
	0x03C41570 LDP S0, S1, [X31]
	0x03C41574 LDP S2, S3, [X31 + 0x8]
	0x03C41578 LDP X20, X19, [X31 + 0x20]
	0x03C4157C LDR X30, [X31 + 0x10]
	0x03C41580 ADD X31, X31, 0x30
	0x03C41584 RET
	0x03C41588 STP X30, X21, [X31 - 0x20]!
	0x03C4158C STP X20, X19, [X31 + 0x10]
	0x03C41590 ADRP X21, 0x7A4000
	0x03C41594 LDR X2, [X21 + 0xAD0]
	0x03C41598 MOV X19, X1
	0x03C4159C MOV X20, X0
	0x03C415A0 CBNZ X2, 0x3C415B8
	0x03C415A4 ADRP X0, 0xFFFFFFFFFCEB8000
	0x03C415A8 ADD X0, X0, 0x584
	0x03C415AC BL 0x1C16CB8
	0x03C415B0 MOV X2, X0
	0x03C415B4 STR X0, [X21 + 0xAD0]
	0x03C415B8 MOV X0, X20
	0x03C415BC MOV X1, X19
	0x03C415C0 LDP X20, X19, [X31 + 0x10]
	0x03C415C4 LDP X30, X21, [X31], #0x20
	0x03C415C8 BR X2
	0x03C415CC SUB X31, X31, 0x30
	0x03C415D0 STP X31, X30, [X31 + 0x8]
	0x03C415D4 STP X20, X19, [X31 + 0x20]
	0x03C415D8 ADRP X20, 0x7A4000
	0x03C415DC LDR X8, [X20 + 0xAD8]
	0x03C415E0 MOV X19, X0
	0x03C415E4 STR X31, [X31]
	0x03C415E8 CBNZ X8, 0x3C41600
	0x03C415EC ADRP X0, 0xFFFFFFFFFCEB4000
	0x03C415F0 ADD X0, X0, 0x550
	0x03C415F4 BL 0x1C16CB8
	0x03C415F8 MOV X8, X0
	0x03C415FC STR X0, [X20 + 0xAD8]
	0x03C41600 ADD X1, X31, 0x0
	0x03C41604 MOV X0, X19
	0x03C41608 BLR X8
	0x03C4160C LDP S0, S1, [X31]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move V8, V3
	009 Move V9, V2
	010 Move V10, V1
	011 Move V11, V0
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X19, X0
	014 Move X20, 0x7A5000
	015 Move X8, [X20+728]
	016 Compare X8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, -51470336
	019 Add X0, X0, 2364
	020 Call 0x1C17CB8
	021 Move X8, X0
	022 Move [X20+728], X0
	023 Move X0, X19
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Compare X0, 0
	026 JumpIfEqual {51}
	027 Move V0, V11
	028 Move V1, V10
	029 Move V2, V9
	030 Call Transform.TransformDirection, X0, X1
	031 Move X8, -51732480
	032 Move V3, [X8+260]
	033 Move X0, X19
	034 Multiply S3, S8, S3
	035 Move X8, -51732480
	036 Move V0, [X8+260]
	037 Move X0, X19
	038 Move V1, V10
	039 Move V2, V9
	040 Multiply S3, S8, S0
	041 Move V0, V11
	042 Move X20, [X31+48]
	043 Move X19, [X31+56]
	044 Move X30, [X31+32]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move D11, [X31+64]
	048 Move D10, [X31+72]
	049 Call Transform.RotateAroundInternal, X0, X1, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void Rotate(UnityEngine.Vector3 axis, System.Single angle)

Disassembly:
	0x03C41678 STP X22, X21, [X31 + 0x50]
	0x03C4167C STP X20, X19, [X31 + 0x60]

ISIL:
	001 Move W1, 1
	002 Call Transform.Rotate, X0, X1, V0, X2
	003 Return 

Method: System.Void RotateAround(UnityEngine.Vector3 point, UnityEngine.Vector3 axis, System.Single angle)

Disassembly:
	0x03C41680 ADRP X24, 0x7A4000
	0x03C41684 MOV V8.16B, V6.16B
	0x03C41688 LDR V6, [X31 + 0x7]
	0x03C4168C LDR X8, [X24 + 0xAE0]
	0x03C41690 MOV X19, X4
	0x03C41694 MOV W23, W3
	0x03C41698 MOV W20, W2
	0x03C4169C MOV W21, W1
	0x03C416A0 MOV X22, X0
	0x03C416A4 STP S0, S1, [X31 + 0x20]
	0x03C416A8 STP S2, S3, [X31 + 0x28]
	0x03C416AC STP S4, S5, [X31 + 0x18]
	0x03C416B0 STUR V6, [X31 + 0x8]
	0x03C416B4 CBNZ X8, 0x3C416CC
	0x03C416B8 ADRP X0, 0xFFFFFFFFFCEDD000
	0x03C416BC ADD X0, X0, 0xE31
	0x03C416C0 BL 0x1C16CB8
	0x03C416C4 MOV X8, X0
	0x03C416C8 STR X0, [X24 + 0xAE0]
	0x03C416CC AND W6, W23, 0x1
	0x03C416D0 ADD X1, X31, 0x20
	0x03C416D4 ADD X2, X31, 0x18
	0x03C416D8 ADD X5, X31, 0x8
	0x03C416DC MOV X0, X22
	0x03C416E0 MOV V0.16B, V8.16B
	0x03C416E4 MOV W3, W21
	0x03C416E8 MOV W4, W20
	0x03C416EC MOV X7, X19
	0x03C416F0 BLR X8
	0x03C416F4 LDP X20, X19, [X31 + 0x60]
	0x03C416F8 LDP X22, X21, [X31 + 0x50]
	0x03C416FC LDP X24, X23, [X31 + 0x40]
	0x03C41700 LDR X30, [X31 + 0x38]
	0x03C41704 LDR V8, [X31 + 0x30]
	0x03C41708 ADD X31, X31, 0x70
	0x03C4170C RET
	0x03C41710 STR D8, [X31 - 0x60]!
	0x03C41714 STP X30, X27, [X31 + 0x10]
	0x03C41718 STP X26, X25, [X31 + 0x20]
	0x03C4171C STP X24, X23, [X31 + 0x30]
	0x03C41720 STP X22, X21, [X31 + 0x40]
	0x03C41724 STP X20, X19, [X31 + 0x50]
	0x03C41728 ADRP X27, 0x7A4000
	0x03C4172C LDR X8, [X27 + 0xAE0]
	0x03C41730 MOV X19, X7
	0x03C41734 MOV W23, W6
	0x03C41738 MOV X20, X5
	0x03C4173C MOV W21, W4
	0x03C41740 MOV W22, W3

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X19
	012 Move V12, V6
	013 Move V8, V5
	014 Move V11, V4
	015 Move V13, V3
	016 Move [X31+8], S1
	017 Move [X31+16], S2
	018 Move V14, V0
	019 Move X19, X0
	020 Call Transform.get_position, X0
	021 Move V15, V0
	022 Move V9, V1
	023 Move V10, V2
	024 Move V0, V12
	025 Move V1, V13
	026 Move V2, V11
	027 Move V3, V8
	028 Move X0, X31
	029 Call Quaternion.AngleAxis, V0, X0
	030 Subtract S4, S15, S14
	031 Move V15, [X31+8]
	032 Move X0, X31
	033 Subtract S5, S9, S15
	034 Move V9, [X31+12]
	035 Subtract S6, S10, S9
	036 Call Quaternion.op_Multiply, X0, X1
	037 Add S0, S14, S0
	038 Add S1, S15, S1
	039 Add S2, S9, S2
	040 Move X0, X19
	041 Call Transform.set_position, X0, X1
	042 Move X8, -51732480
	043 Move V0, [X8+260]
	044 Move X0, X19
	045 Move V1, V11
	046 Move V2, V8
	047 Multiply S3, S12, S0
	048 Move V0, V13
	049 Move X30, [X31+80]
	050 Move X19, [X31+88]
	051 Move D9, [X31+64]
	052 Move D8, [X31+72]
	053 Move D11, [X31+48]
	054 Move D10, [X31+56]
	055 Move D13, [X31+32]
	056 Move D12, [X31+40]
	057 Move D15, [X31+16]
	058 Move D14, [X31+24]
	059 Add X31, X31, 96
	060 Call Transform.RotateAroundInternal, X0, X1, V0
	061 Return 

Method: System.Void LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp)

Disassembly:
	0x03C41744 MOV V8.16B, V0.16B

ISIL:
No ISIL was generated
Method: System.Void LookAt(UnityEngine.Vector3 worldPosition)

Disassembly:
	0x03C417A8 BR X8
	0x03C417AC SUB X31, X31, 0x40
	0x03C417B0 STP X30, X21, [X31 + 0x20]
	0x03C417B4 STP X20, X19, [X31 + 0x30]
	0x03C417B8 ADRP X21, 0x7A4000
	0x03C417BC MOV X19, X8
	0x03C417C0 LDR X8, [X21 + 0xAE8]
	0x03C417C4 MOV X20, X0
	0x03C417C8 STP X31, X31, [X31 + 0x8]
	0x03C417CC STR X31, [X31 + 0x18]
	0x03C417D0 CBNZ X8, 0x3C417E8
	0x03C417D4 ADRP X0, 0xFFFFFFFFFCEBE000
	0x03C417D8 ADD X0, X0, 0x525
	0x03C417DC BL 0x1C16CB8
	0x03C417E0 MOV X8, X0
	0x03C417E4 STR X0, [X21 + 0xAE8]
	0x03C417E8 ADD X1, X31, 0x8
	0x03C417EC MOV X0, X20
	0x03C417F0 BLR X8
	0x03C417F4 LDR X8, [X31 + 0x18]
	0x03C417F8 LDUR V0, [X31 + 0x8]
	0x03C417FC LDP X30, X21, [X31 + 0x20]
	0x03C41800 STR X8, [X19 + 0x10]
	0x03C41804 STR V0, [X19]
	0x03C41808 LDP X20, X19, [X31 + 0x30]
	0x03C4180C ADD X31, X31, 0x40
	0x03C41810 RET
	0x03C41814 STP X30, X21, [X31 - 0x20]!
	0x03C41818 STP X20, X19, [X31 + 0x10]
	0x03C4181C ADRP X21, 0x7A4000
	0x03C41820 LDR X2, [X21 + 0xAE8]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x798000
	008 Move W8, [X20+1926]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Compare W8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, 0x4B3000
	016 Move X0, [X0+1440]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1926], W8
	020 Move X8, 0x4B3000
	021 Move X8, [X8+1440]
	022 Move X0, X19
	023 Move V1, V9
	024 Move V2, V8
	025 Move X8, [X8]
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+24]
	029 Move D9, [X31+8]
	030 Move D8, [X31+16]
	031 Move X8, [X8+184]
	032 Move V0, V10
	033 Move S3, [X8+24]
	034 Move S4, [X8+28]
	035 Move V5, [X8+32]
	036 Move V10, [X31+48]
	037 Call Transform.Internal_LookAt, X0, X1, X2
	038 Return 

Method: System.Void Internal_LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp)

Disassembly:
	0x03C41748 MOV X24, X2
	0x03C4174C MOV X25, X1
	0x03C41750 MOV X26, X0
	0x03C41754 CBNZ X8, 0x3C4176C
	0x03C41758 ADRP X0, 0xFFFFFFFFFCEDD000
	0x03C4175C ADD X0, X0, 0xE31
	0x03C41760 BL 0x1C16CB8
	0x03C41764 MOV X8, X0
	0x03C41768 STR X0, [X27 + 0xAE0]
	0x03C4176C AND W6, W23, 0x1
	0x03C41770 MOV X0, X26
	0x03C41774 MOV X1, X25
	0x03C41778 MOV X2, X24
	0x03C4177C MOV W3, W22
	0x03C41780 MOV W4, W21
	0x03C41784 MOV X5, X20
	0x03C41788 MOV X7, X19
	0x03C4178C LDP X20, X19, [X31 + 0x50]
	0x03C41790 LDP X22, X21, [X31 + 0x40]
	0x03C41794 LDP X24, X23, [X31 + 0x30]
	0x03C41798 LDP X26, X25, [X31 + 0x20]
	0x03C4179C LDP X30, X27, [X31 + 0x10]
	0x03C417A0 MOV V0.16B, V8.16B
	0x03C417A4 LDR V8, [X31], #0x60

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2592]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31], S3
	012 Move [X31+8], S4
	013 Move [X31+8], S5
	014 Compare X8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, -51462144
	017 Add X0, X0, 2747
	018 Call 0x1C17CB8
	019 Move X8, X0
	020 Move [X20+2592], X0
	021 Add X1, X31, 16
	022 Add X2, X31, 0
	023 Move X0, X19
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X20, [X31+48]
	026 Move X19, [X31+56]
	027 Move X30, [X31+32]
	028 Add X31, X31, 64
	029 Return 

Method: UnityEngine.Vector3 TransformDirection(UnityEngine.Vector3 direction)

Disassembly:
	0x03C41610 LDP S2, S3, [X31 + 0x8]
	0x03C41614 LDP X20, X19, [X31 + 0x20]
	0x03C41618 LDR X30, [X31 + 0x10]
	0x03C4161C ADD X31, X31, 0x30
	0x03C41620 RET
	0x03C41624 STP X30, X21, [X31 - 0x20]!
	0x03C41628 STP X20, X19, [X31 + 0x10]
	0x03C4162C ADRP X21, 0x7A4000
	0x03C41630 LDR X2, [X21 + 0xAD8]
	0x03C41634 MOV X19, X1
	0x03C41638 MOV X20, X0
	0x03C4163C CBNZ X2, 0x3C41654
	0x03C41640 ADRP X0, 0xFFFFFFFFFCEB4000
	0x03C41644 ADD X0, X0, 0x550
	0x03C41648 BL 0x1C16CB8
	0x03C4164C MOV X2, X0
	0x03C41650 STR X0, [X21 + 0xAD8]
	0x03C41654 MOV X0, X20
	0x03C41658 MOV X1, X19
	0x03C4165C LDP X20, X19, [X31 + 0x10]
	0x03C41660 LDP X30, X21, [X31], #0x20
	0x03C41664 BR X2
	0x03C41668 SUB X31, X31, 0x70
	0x03C4166C STR D8, [X31 + 0x30]
	0x03C41670 STR X30, [X31 + 0x38]
	0x03C41674 STP X24, X23, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2600]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+8], W31
	012 Move [X31], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51486720
	016 Add X0, X0, 3940
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X20+2600], X0
	020 Add X1, X31, 16
	021 Add X2, X31, 0
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move S0, [X31]
	025 Move S1, [X31+4]
	026 Move V2, [X31+8]
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X30, [X31+32]
	030 Add X31, X31, 64
	031 Return X0

Method: UnityEngine.Vector3 InverseTransformDirection(UnityEngine.Vector3 direction)

Disassembly:
	0x03C418CC ADRP X0, 0xFFFFFFFFFCEC8000
	0x03C418D0 ADD X0, X0, 0x4B5
	0x03C418D4 BL 0x1C16CB8
	0x03C418D8 MOV X2, X0
	0x03C418DC STR X0, [X21 + 0xAF0]
	0x03C418E0 MOV X0, X20
	0x03C418E4 MOV X1, X19
	0x03C418E8 LDP X20, X19, [X31 + 0x10]
	0x03C418EC LDP X30, X21, [X31], #0x20
	0x03C418F0 BR X2
	0x03C418F4 SUB X31, X31, 0x30
	0x03C418F8 STP X31, X30, [X31 + 0x8]
	0x03C418FC STP X20, X19, [X31 + 0x20]
	0x03C41900 ADRP X20, 0x7A4000
	0x03C41904 LDR X8, [X20 + 0xAF8]
	0x03C41908 MOV X19, X0
	0x03C4190C STR X31, [X31]
	0x03C41910 CBNZ X8, 0x3C41928
	0x03C41914 ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C41918 ADD X0, X0, 0xD5
	0x03C4191C BL 0x1C16CB8
	0x03C41920 MOV X8, X0
	0x03C41924 STR X0, [X20 + 0xAF8]
	0x03C41928 ADD X1, X31, 0x0
	0x03C4192C MOV X0, X19
	0x03C41930 BLR X8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2608]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+8], W31
	012 Move [X31], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51613696
	016 Add X0, X0, 1044
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X20+2608], X0
	020 Add X1, X31, 16
	021 Add X2, X31, 0
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move S0, [X31]
	025 Move S1, [X31+4]
	026 Move V2, [X31+8]
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X30, [X31+32]
	030 Add X31, X31, 64
	031 Return X0

Method: UnityEngine.Vector3 TransformVector(UnityEngine.Vector3 vector)

Disassembly:
	0x03C41988 LDP X30, X21, [X31], #0x20
	0x03C4198C BR X2
	0x03C41990 STR X30, [X31 - 0x20]!
	0x03C41994 STP X20, X19, [X31 + 0x10]
	0x03C41998 ADRP X20, 0x7A4000
	0x03C4199C LDR X1, [X20 + 0xA90]
	0x03C419A0 MOV X19, X0
	0x03C419A4 CBNZ X1, 0x3C419BC
	0x03C419A8 ADRP X0, 0xFFFFFFFFFCEC4000
	0x03C419AC ADD X0, X0, 0x320
	0x03C419B0 BL 0x1C16CB8
	0x03C419B4 MOV X1, X0
	0x03C419B8 STR X0, [X20 + 0xA90]
	0x03C419BC MOV X0, X19
	0x03C419C0 LDP X20, X19, [X31 + 0x10]
	0x03C419C4 LDR X30, [X31], #0x20
	0x03C419C8 BR X1
	0x03C419CC STR X30, [X31 - 0x20]!
	0x03C419D0 STP X20, X19, [X31 + 0x10]
	0x03C419D4 ADRP X20, 0x7A4000
	0x03C419D8 LDR X1, [X20 + 0xA98]
	0x03C419DC MOV X19, X0
	0x03C419E0 CBNZ X1, 0x3C419F8
	0x03C419E4 ADRP X0, 0xFFFFFFFFFCED7000
	0x03C419E8 ADD X0, X0, 0xB9B
	0x03C419EC BL 0x1C16CB8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2616]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+8], W31
	012 Move [X31], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51605504
	016 Add X0, X0, 1114
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X20+2616], X0
	020 Add X1, X31, 16
	021 Add X2, X31, 0
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move S0, [X31]
	025 Move S1, [X31+4]
	026 Move V2, [X31+8]
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X30, [X31+32]
	030 Add X31, X31, 64
	031 Return X0

Method: UnityEngine.Vector3 TransformVector(System.Single x, System.Single y, System.Single z)

Disassembly:
	0x03C41A44 STR X30, [X31 - 0x20]!

ISIL:
	001 Call Transform.TransformVector, X0, X1
	002 Return X0

Method: UnityEngine.Vector3 InverseTransformVector(UnityEngine.Vector3 vector)

Disassembly:
	0x03C41A48 STP X20, X19, [X31 + 0x10]
	0x03C41A4C ADRP X20, 0x7A4000
	0x03C41A50 LDR X8, [X20 + 0xB00]
	0x03C41A54 MOV X19, X0
	0x03C41A58 STR X31, [X31 + 0x8]
	0x03C41A5C CBNZ X8, 0x3C41A74
	0x03C41A60 ADRP X0, 0xFFFFFFFFFCEC6000
	0x03C41A64 ADD X0, X0, 0x479
	0x03C41A68 BL 0x1C16CB8
	0x03C41A6C MOV X8, X0
	0x03C41A70 STR X0, [X20 + 0xB00]
	0x03C41A74 ADD X1, X31, 0x8
	0x03C41A78 MOV X0, X19
	0x03C41A7C BLR X8
	0x03C41A80 LDP S0, S1, [X31 + 0x8]
	0x03C41A84 LDP X20, X19, [X31 + 0x10]
	0x03C41A88 LDR X30, [X31], #0x20
	0x03C41A8C RET
	0x03C41A90 STP X30, X21, [X31 - 0x20]!
	0x03C41A94 STP X20, X19, [X31 + 0x10]
	0x03C41A98 ADRP X21, 0x7A4000
	0x03C41A9C LDR X2, [X21 + 0xB00]
	0x03C41AA0 MOV X19, X1
	0x03C41AA4 MOV X20, X0
	0x03C41AA8 CBNZ X2, 0x3C41AC0
	0x03C41AAC ADRP X0, 0xFFFFFFFFFCEC6000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2624]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+8], W31
	012 Move [X31], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51638272
	016 Add X0, X0, 479
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X20+2624], X0
	020 Add X1, X31, 16
	021 Add X2, X31, 0
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move S0, [X31]
	025 Move S1, [X31+4]
	026 Move V2, [X31+8]
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X30, [X31+32]
	030 Add X31, X31, 64
	031 Return X0

Method: UnityEngine.Vector3 TransformPoint(UnityEngine.Vector3 position)

Disassembly:
	0x03C3EE4C STP D9, D8, [X31 + 0x30]
	0x03C3EE50 STR X30, [X31 + 0x40]
	0x03C3EE54 STP X20, X19, [X31 + 0x50]
	0x03C3EE58 MOV V8.16B, V1.16B
	0x03C3EE5C MOV V9.16B, V0.16B
	0x03C3EE60 MOV X19, X0
	0x03C3EE64 BL 0x3C3E7F0
	0x03C3EE68 MOV X0, X19
	0x03C3EE6C MOV V10.16B, V0.16B
	0x03C3EE70 MOV V11.16B, V1.16B
	0x03C3EE74 BL 0x3C3E90C
	0x03C3EE78 ADRP X20, 0x7A3000
	0x03C3EE7C LDRB W8, [X20 + 0xA48]
	0x03C3EE80 MOV V12.16B, V0.16B
	0x03C3EE84 MOV V13.16B, V1.16B
	0x03C3EE88 CBNZ W8, 0x3C3EEA0
	0x03C3EE8C ADRP X0, 0x4BD000
	0x03C3EE90 LDR X0, [X0 + 0xF08]
	0x03C3EE94 BL 0x1C16CF4
	0x03C3EE98 MOVZ W8, 0x1
	0x03C3EE9C STRB W8, [X20 + 0xA48]
	0x03C3EEA0 ADRP X8, 0x4BD000
	0x03C3EEA4 LDR X8, [X8 + 0xF08]
	0x03C3EEA8 MOV X0, X19
	0x03C3EEAC LDR X8, [X8]
	0x03C3EEB0 LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A8000
	006 Move X8, [X20+2632]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+8], W31
	012 Move [X31], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51568640
	016 Add X0, X0, 1612
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X20+2632], X0
	020 Add X1, X31, 16
	021 Add X2, X31, 0
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move S0, [X31]
	025 Move S1, [X31+4]
	026 Move V2, [X31+8]
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X30, [X31+32]
	030 Add X31, X31, 64
	031 Return X0

Method: UnityEngine.Vector3 InverseTransformPoint(UnityEngine.Vector3 position)

Disassembly:
	0x03C41B58 STR X30, [X31 - 0x20]!
	0x03C41B5C STP X20, X19, [X31 + 0x10]
	0x03C41B60 ADRP X20, 0x7A4000
	0x03C41B64 LDR X1, [X20 + 0xAA8]
	0x03C41B68 MOV X19, X0
	0x03C41B6C CBNZ X1, 0x3C41B84
	0x03C41B70 ADRP X0, 0xFFFFFFFFFCECE000
	0x03C41B74 ADD X0, X0, 0x6A6
	0x03C41B78 BL 0x1C16CB8
	0x03C41B7C MOV X1, X0
	0x03C41B80 STR X0, [X20 + 0xAA8]
	0x03C41B84 MOV X0, X19
	0x03C41B88 LDP X20, X19, [X31 + 0x10]
	0x03C41B8C LDR X30, [X31], #0x20
	0x03C41B90 BR X1
	0x03C41B94 STR X30, [X31 - 0x20]!
	0x03C41B98 STP X20, X19, [X31 + 0x10]
	0x03C41B9C ADRP X20, 0x7A4000
	0x03C41BA0 LDR X1, [X20 + 0xAB0]
	0x03C41BA4 MOV X19, X0
	0x03C41BA8 CBNZ X1, 0x3C41BC0
	0x03C41BAC ADRP X0, 0xFFFFFFFFFCECC000
	0x03C41BB0 ADD X0, X0, 0x127
	0x03C41BB4 BL 0x1C16CB8
	0x03C41BB8 MOV X1, X0
	0x03C41BBC STR X0, [X20 + 0xAB0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2640]
	007 Move X19, X0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+8], W31
	012 Move [X31], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51486720
	016 Add X0, X0, 4034
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X20+2640], X0
	020 Add X1, X31, 16
	021 Add X2, X31, 0
	022 Move X0, X19
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move S0, [X31]
	025 Move S1, [X31+4]
	026 Move V2, [X31+8]
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X30, [X31+32]
	030 Add X31, X31, 64
	031 Return X0

Method: UnityEngine.Transform get_root()

Disassembly:
	0x03C41C14 MOV X4, X31
	0x03C41C18 STR V7, [X31]
	0x03C41C1C B 0x3C41C20
	0x03C41C20 SUB X31, X31, 0xC0
	0x03C41C24 STP D15, D14, [X31 + 0x20]
	0x03C41C28 STP D13, D12, [X31 + 0x30]
	0x03C41C2C STP D11, D10, [X31 + 0x40]
	0x03C41C30 STP D9, D8, [X31 + 0x50]
	0x03C41C34 STR X30, [X31 + 0x60]
	0x03C41C38 STP X28, X27, [X31 + 0x70]
	0x03C41C3C STP X26, X25, [X31 + 0x80]
	0x03C41C40 STP X24, X23, [X31 + 0x90]
	0x03C41C44 STP X22, X21, [X31 + 0xA0]
	0x03C41C48 STP X20, X19, [X31 + 0xB0]
	0x03C41C4C STP S4, S5, [X31 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A5000
	005 Move X1, [X20+2376]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51630080
	010 Add X0, X0, 682
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2376], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Transform GetRoot()

Disassembly:
	0x03C41C50 STR S3, [X31 + 0xC]
	0x03C41C54 ADRP X24, 0x7A4000
	0x03C41C58 ADRP X26, 0x4B2000
	0x03C41C5C LDP S8, S15, [X31 + 0xC8]
	0x03C41C60 LDRB W8, [X24 + 0xAC0]
	0x03C41C64 LDP S13, S9, [X31 + 0xC0]
	0x03C41C68 LDR X26, [X26 + 0x598]
	0x03C41C6C MOV X20, X4
	0x03C41C70 MOV W23, W3
	0x03C41C74 MOV W21, W2
	0x03C41C78 MOV W22, W1
	0x03C41C7C MOV V12.16B, V6.16B
	0x03C41C80 MOV V14.16B, V2.16B
	0x03C41C84 MOV V10.16B, V1.16B
	0x03C41C88 MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A5000
	005 Move X1, [X20+2376]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51630080
	010 Add X0, X0, 682
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2376], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_childCount()

Disassembly:
	0x03C41C8C MOV X19, X0
	0x03C41C90 TBNZ X8, 0x0, 0x3C41CA8
	0x03C41C94 ADRP X0, 0x4B2000
	0x03C41C98 LDR X0, [X0 + 0x598]
	0x03C41C9C BL 0x1C16CF4
	0x03C41CA0 MOVZ W8, 0x1
	0x03C41CA4 STRB W8, [X24 + 0xAC0]
	0x03C41CA8 LDR X0, [X26]
	0x03C41CAC LDR W8, [X0 + 0xE0]
	0x03C41CB0 CBNZ W8, 0x3C41CB8
	0x03C41CB4 BL 0x1C16DFC
	0x03C41CB8 MOV X0, X19
	0x03C41CBC MOV X1, X31
	0x03C41CC0 BL 0x3C3883C
	0x03C41CC4 TBZ X0, 0x0, 0x3C41CFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A5000
	005 Move X1, [X20+2384]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51703808
	010 Add X0, X0, 724
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2384], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetAsFirstSibling()

Disassembly:
	0x03C41CC8 LDP X20, X19, [X31 + 0xB0]
	0x03C41CCC LDP X22, X21, [X31 + 0xA0]
	0x03C41CD0 LDP X24, X23, [X31 + 0x90]
	0x03C41CD4 LDP X26, X25, [X31 + 0x80]
	0x03C41CD8 LDP X28, X27, [X31 + 0x70]
	0x03C41CDC LDR X30, [X31 + 0x60]
	0x03C41CE0 LDP D9, D8, [X31 + 0x50]
	0x03C41CE4 LDP D11, D10, [X31 + 0x40]
	0x03C41CE8 LDP D13, D12, [X31 + 0x30]
	0x03C41CEC LDP D15, D14, [X31 + 0x20]
	0x03C41CF0 MOV X0, X31
	0x03C41CF4 ADD X31, X31, 0xC0
	0x03C41CF8 RET
	0x03C41CFC CBZ X19, 0x3C42050
	0x03C41D00 LDR X8, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A5000
	005 Move X1, [X20+2392]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51523584
	010 Add X0, X0, 806
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2392], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetAsLastSibling()

Disassembly:
	0x03C41D04 MOV X0, X19
	0x03C41D08 STR S14, [X31]
	0x03C41D0C FADD S14, S14, S11
	0x03C41D10 LDP X9, X1, [X8 + 0x188]
	0x03C41D14 BLR X9
	0x03C41D18 SCVTF S0, W0
	0x03C41D1C FCMP S14, S0
	0x03C41D20 B.GT 0x3C41E6C
	0x03C41D24 LDR X8, [X19]
	0x03C41D28 LDR V0, [X31 + 0xC]
	0x03C41D2C MOV X0, X19
	0x03C41D30 LDP X9, X1, [X8 + 0x1A8]
	0x03C41D34 FADD S14, S0, S10
	0x03C41D38 BLR X9
	0x03C41D3C SCVTF S0, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A5000
	005 Move X1, [X20+2400]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51544064
	010 Add X0, X0, 2929
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2400], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetSiblingIndex(System.Int32 index)

Disassembly:
	0x03C41D40 FCMP S14, S0
	0x03C41D44 B.GT 0x3C41E6C
	0x03C41D48 FCMP S12, 0x0
	0x03C41D4C B.LS 0x3C42054
	0x03C41D50 LDR V14, [X31]
	0x03C41D54 CBZ X20, 0x3C41DB0
	0x03C41D58 LDR X8, [X20 + 0x18]
	0x03C41D5C CMP W8, 0x1
	0x03C41D60 B.LT 0x3C41DB0
	0x03C41D64 MOV X27, X31
	0x03C41D68 AND X8, X8, 0x0
	0x03C41D6C ADD X28, X20, 0x28
	0x03C41D70 CMP X27, W8, UXTW
	0x03C41D74 B.CS 0x3C41E14
	0x03C41D78 LDR X0, [X26]
	0x03C41D7C LDP X24, X25, [X28 - 0x8]
	0x03C41D80 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A5000
	006 Move X2, [X21+2408]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51560448
	012 Add X0, X0, 3013
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2408], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 GetSiblingIndex()

Disassembly:
	0x03C41D84 CBNZ W8, 0x3C41D8C
	0x03C41D88 BL 0x1C16DFC
	0x03C41D8C MOV X0, X25
	0x03C41D90 MOV X1, X19
	0x03C41D94 BL 0x3C3883C
	0x03C41D98 TBNZ X0, 0x0, 0x3C41E18
	0x03C41D9C LDR W8, [X20 + 0x18]
	0x03C41DA0 ADD X27, X27, 0x1
	0x03C41DA4 ADD X28, X28, 0x10
	0x03C41DA8 CMP X27, W8, SXTW
	0x03C41DAC B.LT 0x3C41D70
	0x03C41DB0 STP S13, S9, [X31 + 0xC0]
	0x03C41DB4 STP S8, S15, [X31 + 0xC8]
	0x03C41DB8 AND W3, W23, 0x1
	0x03C41DBC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A5000
	005 Move X1, [X20+2416]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51552256
	010 Add X0, X0, 3009
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2416], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Transform FindRelativeTransformWithPath(UnityEngine.Transform transform, System.String path, System.Boolean isActiveOnly)

Disassembly:
	0x03C41DC0 MOV V0.16B, V11.16B
	0x03C41DC4 MOV V1.16B, V10.16B
	0x03C41DC8 MOV V2.16B, V14.16B
	0x03C41DCC LDP S5, S3, [X31 + 0x8]
	0x03C41DD0 LDR V4, [X31 + 0x4]
	0x03C41DD4 MOV V6.16B, V12.16B
	0x03C41DD8 MOV W1, W22
	0x03C41DDC MOV W2, W21
	0x03C41DE0 MOV X4, X20
	0x03C41DE4 LDP X20, X19, [X31 + 0xB0]
	0x03C41DE8 LDP X22, X21, [X31 + 0xA0]
	0x03C41DEC LDP X24, X23, [X31 + 0x90]
	0x03C41DF0 LDP X26, X25, [X31 + 0x80]
	0x03C41DF4 LDP X28, X27, [X31 + 0x70]
	0x03C41DF8 LDR X30, [X31 + 0x60]
	0x03C41DFC LDP D9, D8, [X31 + 0x50]
	0x03C41E00 LDP D11, D10, [X31 + 0x40]
	0x03C41E04 LDP D13, D12, [X31 + 0x30]
	0x03C41E08 LDP D15, D14, [X31 + 0x20]
	0x03C41E0C ADD X31, X31, 0xC0
	0x03C41E10 B 0x3C41668

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2424]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51695616
	014 Add X0, X0, 1233
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2424], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move X1, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: UnityEngine.Transform Find(System.String n)

Disassembly:
	0x03C41E14 BL 0x1C16F28
	0x03C41E18 ADRP X0, 0x51E000
	0x03C41E1C LDR X0, [X0 + 0x838]
	0x03C41E20 BL 0x1C16D08
	0x03C41E24 MOV X1, X24
	0x03C41E28 MOV X2, X31
	0x03C41E2C BL 0x321EFD0
	0x03C41E30 MOV X19, X0
	0x03C41E34 ADRP X0, 0x4BA000
	0x03C41E38 LDR X0, [X0 + 0x578]
	0x03C41E3C BL 0x1C16D08
	0x03C41E40 BL 0x1C16F10
	0x03C41E44 MOV X1, X19
	0x03C41E48 MOV X2, X31
	0x03C41E4C MOV X20, X0
	0x03C41E50 BL 0x3314A68
	0x03C41E54 ADRP X0, 0x51E000
	0x03C41E58 LDR X0, [X0 + 0x840]
	0x03C41E5C BL 0x1C16D08
	0x03C41E60 MOV X1, X0
	0x03C41E64 MOV X0, X20
	0x03C41E68 BL 0x1C16DEC
	0x03C41E6C ADRP X0, 0x4B2000
	0x03C41E70 LDR X0, [X0 + 0x9D0]
	0x03C41E74 BL 0x1C16D08
	0x03C41E78 MOVZ W1, 0x6
	0x03C41E7C BL 0x1C16D6C
	0x03C41E80 STR S11, [X31 + 0x6C]
	0x03C41E84 ADRP X21, 0x4B2000
	0x03C41E88 LDR X21, [X21 + 0xA90]
	0x03C41E8C MOV X20, X0
	0x03C41E90 MOV X0, X21
	0x03C41E94 BL 0x1C16D08
	0x03C41E98 ADD X1, X31, 0x6C
	0x03C41E9C BL 0x1C16E04
	0x03C41EA0 MOV X22, X0
	0x03C41EA4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {26}
	007 Move X21, 0x7A5000
	008 Move X3, [X21+2424]
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51695616
	014 Add X0, X0, 1233
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X21+2424], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move W2, W31
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 CallNoReturn X3
	026 Move X0, 0x4B8000
	027 Move X0, [X0+1320]
	028 Call 0x1C17D08
	029 Call 0x1C17F10
	030 Move X19, X0
	031 Move X0, 0x51F000
	032 Move X0, [X0+2072]
	033 Call 0x1C17D08
	034 Move X1, X0
	035 Move X0, X19
	036 Move X2, X31
	037 Call ArgumentNullException..ctor, X0, X1
	038 Move X0, 0x51F000
	039 Move X0, [X0+2080]
	040 Call 0x1C17D08
	041 Move X1, X0
	042 Move X0, X19
	043 Call 0x1C17DEC

Method: UnityEngine.Vector3 get_lossyScale()

Disassembly:
	0x03C41EA8 BL 0x19903C0
	0x03C41EAC MOV X0, X20
	0x03C41EB0 MOV X1, X22
	0x03C41EB4 BL 0x19980B4
	0x03C41EB8 MOV X0, X20
	0x03C41EBC MOV X1, X31
	0x03C41EC0 MOV X2, X22
	0x03C41EC4 BL 0x1993444
	0x03C41EC8 MOV X0, X21
	0x03C41ECC STR S10, [X31 + 0x68]
	0x03C41ED0 BL 0x1C16D08
	0x03C41ED4 ADD X1, X31, 0x68
	0x03C41ED8 BL 0x1C16E04
	0x03C41EDC MOV X22, X0
	0x03C41EE0 MOV X0, X20
	0x03C41EE4 BL 0x19903C0
	0x03C41EE8 MOV X0, X20
	0x03C41EEC MOV X1, X22
	0x03C41EF0 BL 0x19980B4
	0x03C41EF4 MOVZ W1, 0x1
	0x03C41EF8 MOV X0, X20
	0x03C41EFC MOV X2, X22
	0x03C41F00 BL 0x1993444

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0x7A5000
	006 Move X8, [X20+2648]
	007 Move X19, X0
	008 Move [X31+8], W31
	009 Move [X31], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51572736
	013 Add X0, X0, 748
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+2648], X0
	017 Add X1, X31, 0
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move S0, [X31]
	021 Move S1, [X31+4]
	022 Move V2, [X31+8]
	023 Move X20, [X31+32]
	024 Move X19, [X31+40]
	025 Move X30, [X31+16]
	026 Add X31, X31, 48
	027 Return X0

Method: System.Boolean IsChildOf(UnityEngine.Transform parent)

Disassembly:
	0x03C41F48 MOV X0, X21
	0x03C41F4C STR S0, [X31 + 0x18]
	0x03C41F50 BL 0x1C16D08
	0x03C41F54 ADD X1, X31, 0x18
	0x03C41F58 BL 0x1C16E04
	0x03C41F5C MOV X21, X0
	0x03C41F60 MOV X0, X20
	0x03C41F64 BL 0x19903C0
	0x03C41F68 MOV X0, X20
	0x03C41F6C MOV X1, X21
	0x03C41F70 BL 0x19980B4
	0x03C41F74 MOVZ W1, 0x3
	0x03C41F78 MOV X0, X20
	0x03C41F7C MOV X2, X21
	0x03C41F80 BL 0x1993444
	0x03C41F84 MOV X0, X19
	0x03C41F88 BL 0x19903C0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A5000
	006 Move X2, [X21+2432]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51662848
	012 Add X0, X0, 1171
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2432], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean get_hasChanged()

Disassembly:
	0x03C41F8C LDR X8, [X19]
	0x03C41F90 MOV X0, X19
	0x03C41F94 LDP X9, X1, [X8 + 0x188]
	0x03C41F98 BLR X9
	0x03C41F9C STR W0, [X31 + 0x14]
	0x03C41FA0 ADRP X21, 0x4B2000
	0x03C41FA4 LDR X21, [X21 + 0x758]
	0x03C41FA8 MOV X0, X21
	0x03C41FAC BL 0x1C16D08
	0x03C41FB0 ADD X1, X31, 0x14
	0x03C41FB4 BL 0x1C16E04
	0x03C41FB8 MOV X22, X0
	0x03C41FBC MOV X0, X20
	0x03C41FC0 BL 0x19903C0
	0x03C41FC4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7A5000
	005 Move X1, [X20+2440]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51462144
	010 Add X0, X0, 2707
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2440], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_hasChanged(System.Boolean value)

Disassembly:
	0x03C41FC8 MOV X1, X22
	0x03C41FCC BL 0x19980B4
	0x03C41FD0 MOVZ W1, 0x4
	0x03C41FD4 MOV X0, X20
	0x03C41FD8 MOV X2, X22
	0x03C41FDC BL 0x1993444
	0x03C41FE0 MOV X0, X19
	0x03C41FE4 BL 0x19903C0
	0x03C41FE8 LDR X8, [X19]
	0x03C41FEC MOV X0, X19
	0x03C41FF0 LDP X9, X1, [X8 + 0x1A8]
	0x03C41FF4 BLR X9
	0x03C41FF8 STR W0, [X31 + 0x10]
	0x03C41FFC MOV X0, X21
	0x03C42000 BL 0x1C16D08
	0x03C42004 ADD X1, X31, 0x10
	0x03C42008 BL 0x1C16E04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A5000
	006 Move X2, [X21+2448]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51712000
	012 Add X0, X0, 247
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2448], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Collections.IEnumerator GetEnumerator()

Disassembly:
	0x03C4200C MOV X19, X0
	0x03C42010 MOV X0, X20
	0x03C42014 BL 0x19903C0
	0x03C42018 MOV X0, X20
	0x03C4201C MOV X1, X19
	0x03C42020 BL 0x19980B4
	0x03C42024 MOVZ W1, 0x5
	0x03C42028 MOV X0, X20
	0x03C4202C MOV X2, X19
	0x03C42030 BL 0x1993444
	0x03C42034 ADRP X0, 0x51D000
	0x03C42038 LDR X0, [X0 + 0x848]
	0x03C4203C BL 0x1C16D08
	0x03C42040 MOV X1, X20
	0x03C42044 MOV X2, X31
	0x03C42048 BL 0x3227C5C
	0x03C4204C B 0x3C41E30
	0x03C42050 BL 0x1C16F20
	0x03C42054 ADRP X0, 0x4B9000
	0x03C42058 LDR X0, [X0 + 0x578]
	0x03C4205C BL 0x1C16D08
	0x03C42060 BL 0x1C16F10
	0x03C42064 MOV X19, X0
	0x03C42068 ADRP X0, 0x51D000
	0x03C4206C LDR X0, [X0 + 0x850]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7A4000
	006 Move X21, 0x51E000
	007 Move W8, [X20+2456]
	008 Move X21, [X21+2088]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x51E000
	015 Move X0, [X0+2088]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2456], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move TEMP, 0
	022 Not TEMP
	023 Move W8, TEMP
	024 Move X1, X31
	025 Move X20, X0
	026 Move [X0+24], W8
	027 Call Object..ctor, X0
	028 Move [X20+16], X19
	029 Move X0, X20
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: UnityEngine.Transform GetChild(System.Int32 index)

Disassembly:
	0x03C420A0 MOV W3, W31
	0x03C420A4 MOV X4, X31
	0x03C420A8 STR V7, [X31]
	0x03C420AC B 0x3C41C20
	0x03C420B0 SUB X31, X31, 0x70
	0x03C420B4 STR D14, [X31 + 0x10]
	0x03C420B8 STP D13, D12, [X31 + 0x18]
	0x03C420BC STP D11, D10, [X31 + 0x28]
	0x03C420C0 STP D9, D8, [X31 + 0x38]
	0x03C420C4 STR X30, [X31 + 0x48]
	0x03C420C8 STP X22, X21, [X31 + 0x50]
	0x03C420CC STP X20, X19, [X31 + 0x60]
	0x03C420D0 ADRP X22, 0x796000
	0x03C420D4 LDRB W8, [X22 + 0xE5A]
	0x03C420D8 MOV W19, W2
	0x03C420DC MOV W20, W1
	0x03C420E0 MOV V8.16B, V6.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A4000
	006 Move X2, [X21+2464]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51585024
	012 Add X0, X0, 1491
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2464], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_position_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C405E8 MOV V1.16B, V10.16B
	0x03C405EC MOV V2.16B, V9.16B
	0x03C405F0 FMUL S3, S8, S0
	0x03C405F4 MOV V0.16B, V11.16B
	0x03C405F8 LDP X20, X19, [X31 + 0x30]
	0x03C405FC LDR X30, [X31 + 0x20]
	0x03C40600 LDP D9, D8, [X31 + 0x10]
	0x03C40604 LDP D11, D10, [X31], #0x40
	0x03C40608 B 0x3C404A8
	0x03C4060C BL 0x1C16F20
	0x03C40610 SUB X31, X31, 0x40
	0x03C40614 STR X30, [X31 + 0x20]
	0x03C40618 STP X20, X19, [X31 + 0x30]
	0x03C4061C ADRP X20, 0x7A5000
	0x03C40620 LDR X8, [X20 + 0xA28]
	0x03C40624 MOV X19, X0
	0x03C40628 STP S0, S1, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2472]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51474432
	012 Add X0, X0, 2647
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2472], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_position_Injected(ref UnityEngine.Vector3 value)

Disassembly:
	0x03C40680 SUB X31, X31, 0x60
	0x03C40684 STP D15, D14, [X31 + 0x10]
	0x03C40688 STP D13, D12, [X31 + 0x20]
	0x03C4068C STP D11, D10, [X31 + 0x30]
	0x03C40690 STP D9, D8, [X31 + 0x40]
	0x03C40694 STP X30, X19, [X31 + 0x50]
	0x03C40698 MOV V12.16B, V6.16B
	0x03C4069C MOV V8.16B, V5.16B
	0x03C406A0 MOV V11.16B, V4.16B
	0x03C406A4 MOV V13.16B, V3.16B
	0x03C406A8 STP S1, S2, [X31 + 0x8]
	0x03C406AC MOV V14.16B, V0.16B
	0x03C406B0 MOV X19, X0
	0x03C406B4 BL 0x3C3F58C
	0x03C406B8 MOV V15.16B, V0.16B
	0x03C406BC MOV V9.16B, V1.16B
	0x03C406C0 MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2480]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51609600
	012 Add X0, X0, 905
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2480], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_localPosition_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C406C4 MOV V0.16B, V12.16B
	0x03C406C8 MOV V1.16B, V13.16B
	0x03C406CC MOV V2.16B, V11.16B
	0x03C406D0 MOV V3.16B, V8.16B
	0x03C406D4 MOV X0, X31
	0x03C406D8 BL 0x3C2A758
	0x03C406DC FSUB S4, S15, S14
	0x03C406E0 LDR V15, [X31 + 0x8]
	0x03C406E4 MOV X0, X31
	0x03C406E8 FSUB S5, S9, S15
	0x03C406EC LDR V9, [X31 + 0xC]
	0x03C406F0 FSUB S6, S10, S9
	0x03C406F4 BL 0x3C2A9FC
	0x03C406F8 FADD S0, S14, S0
	0x03C406FC FADD S1, S15, S1
	0x03C40700 FADD S2, S9, S2
	0x03C40704 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2488]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51642368
	012 Add X0, X0, 1139
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2488], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_localPosition_Injected(ref UnityEngine.Vector3 value)

Disassembly:
	0x03C40708 BL 0x3C3F62C
	0x03C4070C ADRP X8, 0xFFFFFFFFFCEAA000
	0x03C40710 LDR V0, [X8 + 0x104]
	0x03C40714 MOV X0, X19
	0x03C40718 MOV V1.16B, V11.16B
	0x03C4071C MOV V2.16B, V8.16B
	0x03C40720 FMUL S3, S12, S0
	0x03C40724 MOV V0.16B, V13.16B
	0x03C40728 LDP X30, X19, [X31 + 0x50]
	0x03C4072C LDP D9, D8, [X31 + 0x40]
	0x03C40730 LDP D11, D10, [X31 + 0x30]
	0x03C40734 LDP D13, D12, [X31 + 0x20]
	0x03C40738 LDP D15, D14, [X31 + 0x10]
	0x03C4073C ADD X31, X31, 0x60
	0x03C40740 B 0x3C404A8
	0x03C40744 B 0x3C40748
	0x03C40748 SUB X31, X31, 0x40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2496]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51609600
	012 Add X0, X0, 972
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2496], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_rotation_Injected(out UnityEngine.Quaternion ret)

Disassembly:
	0x03C40A9C LDR V2, [X31 + 0x8]
	0x03C40AA0 LDP X20, X19, [X31 + 0x30]
	0x03C40AA4 LDR X30, [X31 + 0x20]
	0x03C40AA8 ADD X31, X31, 0x40
	0x03C40AAC RET
	0x03C40AB0 STR X30, [X31 - 0x30]!
	0x03C40AB4 STP X22, X21, [X31 + 0x10]
	0x03C40AB8 STP X20, X19, [X31 + 0x20]
	0x03C40ABC ADRP X22, 0x7A5000
	0x03C40AC0 LDR X3, [X22 + 0xA40]
	0x03C40AC4 MOV X19, X2
	0x03C40AC8 MOV X20, X1
	0x03C40ACC MOV X21, X0
	0x03C40AD0 CBNZ X3, 0x3C40AE8
	0x03C40AD4 ADRP X0, 0xFFFFFFFFFCEC1000
	0x03C40AD8 ADD X0, X0, 0x1DF
	0x03C40ADC BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2504]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51490816
	012 Add X0, X0, 4066
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2504], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)

Disassembly:
	0x03C40AE0 MOV X3, X0
	0x03C40AE4 STR X0, [X22 + 0xA40]
	0x03C40AE8 MOV X0, X21
	0x03C40AEC MOV X1, X20
	0x03C40AF0 MOV X2, X19
	0x03C40AF4 LDP X20, X19, [X31 + 0x20]
	0x03C40AF8 LDP X22, X21, [X31 + 0x10]
	0x03C40AFC LDR X30, [X31], #0x30
	0x03C40B00 BR X3
	0x03C40B04 STR X30, [X31 - 0x30]!
	0x03C40B08 STP X22, X21, [X31 + 0x10]
	0x03C40B0C STP X20, X19, [X31 + 0x20]
	0x03C40B10 ADRP X22, 0x7A5000
	0x03C40B14 LDR X3, [X22 + 0xA48]
	0x03C40B18 MOV X19, X2
	0x03C40B1C MOV X20, X1
	0x03C40B20 MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2512]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51466240
	012 Add X0, X0, 2913
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2512], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_localRotation_Injected(out UnityEngine.Quaternion ret)

Disassembly:
	0x03C40B24 CBNZ X3, 0x3C40B3C
	0x03C40B28 ADRP X0, 0xFFFFFFFFFCECF000
	0x03C40B2C ADD X0, X0, 0x64C
	0x03C40B30 BL 0x1C16CB8
	0x03C40B34 MOV X3, X0
	0x03C40B38 STR X0, [X22 + 0xA48]
	0x03C40B3C MOV X0, X21
	0x03C40B40 MOV X1, X20
	0x03C40B44 MOV X2, X19
	0x03C40B48 LDP X20, X19, [X31 + 0x20]
	0x03C40B4C LDP X22, X21, [X31 + 0x10]
	0x03C40B50 LDR X30, [X31], #0x30
	0x03C40B54 BR X3
	0x03C40B58 SUB X31, X31, 0x40
	0x03C40B5C STR X30, [X31 + 0x20]
	0x03C40B60 STP X20, X19, [X31 + 0x30]
	0x03C40B64 ADRP X20, 0x7A5000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2520]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51548160
	012 Add X0, X0, 3050
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2520], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_localRotation_Injected(ref UnityEngine.Quaternion value)

Disassembly:
	0x03C40B68 LDR X8, [X20 + 0xA50]
	0x03C40B6C MOV X19, X0
	0x03C40B70 STP S0, S1, [X31 + 0x10]
	0x03C40B74 STR S2, [X31 + 0x18]
	0x03C40B78 STR W31, [X31 + 0x8]
	0x03C40B7C STR X31, [X31]
	0x03C40B80 CBNZ X8, 0x3C40B98
	0x03C40B84 ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C40B88 ADD X0, X0, 0xFC2
	0x03C40B8C BL 0x1C16CB8
	0x03C40B90 MOV X8, X0
	0x03C40B94 STR X0, [X20 + 0xA50]
	0x03C40B98 ADD X1, X31, 0x10
	0x03C40B9C ADD X2, X31, 0x0
	0x03C40BA0 MOV X0, X19
	0x03C40BA4 BLR X8
	0x03C40BA8 LDP S0, S1, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2528]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51576832
	012 Add X0, X0, 1537
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2528], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_localScale_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C40C08 LDP X22, X21, [X31 + 0x10]
	0x03C40C0C LDR X30, [X31], #0x30
	0x03C40C10 BR X3
	0x03C40C14 STR X30, [X31 - 0x20]!
	0x03C40C18 STP X20, X19, [X31 + 0x10]
	0x03C40C1C ADRP X20, 0x7A5000
	0x03C40C20 LDR X1, [X20 + 0x948]
	0x03C40C24 MOV X19, X0
	0x03C40C28 CBNZ X1, 0x3C40C40
	0x03C40C2C ADRP X0, 0xFFFFFFFFFCEC3000
	0x03C40C30 ADD X0, X0, 0x2AA
	0x03C40C34 BL 0x1C16CB8
	0x03C40C38 MOV X1, X0
	0x03C40C3C STR X0, [X20 + 0x948]
	0x03C40C40 MOV X0, X19
	0x03C40C44 LDP X20, X19, [X31 + 0x10]
	0x03C40C48 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2536]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51548160
	012 Add X0, X0, 3125
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2536], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_localScale_Injected(ref UnityEngine.Vector3 value)

Disassembly:
	0x03C40CA0 CBNZ X1, 0x3C40CB8
	0x03C40CA4 ADRP X0, 0xFFFFFFFFFCEB1000
	0x03C40CA8 ADD X0, X0, 0x2D4
	0x03C40CAC BL 0x1C16CB8
	0x03C40CB0 MOV X1, X0
	0x03C40CB4 STR X0, [X20 + 0x950]
	0x03C40CB8 MOV X0, X19
	0x03C40CBC LDP X20, X19, [X31 + 0x10]
	0x03C40CC0 LDR X30, [X31], #0x20
	0x03C40CC4 BR X1
	0x03C40CC8 STR X30, [X31 - 0x20]!
	0x03C40CCC STP X20, X19, [X31 + 0x10]
	0x03C40CD0 ADRP X20, 0x7A5000
	0x03C40CD4 LDR X1, [X20 + 0x958]
	0x03C40CD8 MOV X19, X0
	0x03C40CDC CBNZ X1, 0x3C40CF4
	0x03C40CE0 ADRP X0, 0xFFFFFFFFFCEDD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2544]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51494912
	012 Add X0, X0, 848
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2544], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_worldToLocalMatrix_Injected(out UnityEngine.Matrix4x4 ret)

Disassembly:
	0x03C40F78 MOV X0, X20
	0x03C40F7C MOV X1, X19
	0x03C40F80 LDP X20, X19, [X31 + 0x10]
	0x03C40F84 LDP X30, X21, [X31], #0x20
	0x03C40F88 BR X2
	0x03C40F8C STR X30, [X31 - 0x20]!
	0x03C40F90 STP X20, X19, [X31 + 0x10]
	0x03C40F94 ADRP X20, 0x7A5000
	0x03C40F98 LDR X1, [X20 + 0x988]
	0x03C40F9C MOV X19, X0
	0x03C40FA0 CBNZ X1, 0x3C40FB8
	0x03C40FA4 ADRP X0, 0xFFFFFFFFFCEEC000
	0x03C40FA8 ADD X0, X0, 0xA93
	0x03C40FAC BL 0x1C16CB8
	0x03C40FB0 MOV X1, X0
	0x03C40FB4 STR X0, [X20 + 0x988]
	0x03C40FB8 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2552]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51531776
	012 Add X0, X0, 3674
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2552], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_localToWorldMatrix_Injected(out UnityEngine.Matrix4x4 ret)

Disassembly:
	0x03C40FBC LDP X20, X19, [X31 + 0x10]
	0x03C40FC0 LDR X30, [X31], #0x20
	0x03C40FC4 BR X1
	0x03C40FC8 STP X30, X21, [X31 - 0x20]!
	0x03C40FCC STP X20, X19, [X31 + 0x10]
	0x03C40FD0 ADRP X21, 0x7A5000
	0x03C40FD4 LDR X2, [X21 + 0x990]
	0x03C40FD8 MOV W19, W1
	0x03C40FDC MOV X20, X0
	0x03C40FE0 CBNZ X2, 0x3C40FF8
	0x03C40FE4 ADRP X0, 0xFFFFFFFFFCEAF000
	0x03C40FE8 ADD X0, X0, 0xF7
	0x03C40FEC BL 0x1C16CB8
	0x03C40FF0 MOV X2, X0
	0x03C40FF4 STR X0, [X21 + 0x990]
	0x03C40FF8 AND W1, W19, 0x1
	0x03C40FFC MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A6000
	006 Move X2, [X21+2560]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51699712
	012 Add X0, X0, 764
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2560], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetPositionAndRotation_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation)

Disassembly:
	0x03C41060 MOV X0, X20
	0x03C41064 LDP X20, X19, [X31 + 0x10]
	0x03C41068 LDP X30, X21, [X31], #0x20
	0x03C4106C RET
	0x03C41070 STR X30, [X31 - 0x20]!
	0x03C41074 STP X20, X19, [X31 + 0x10]
	0x03C41078 MOV X19, X1
	0x03C4107C MOVN W8, 0x0
	0x03C41080 MOV X1, X31
	0x03C41084 MOV X20, X0
	0x03C41088 STR W8, [X0 + 0x18]
	0x03C4108C BL 0x33BDD8C
	0x03C41090 STR X19, [X20 + 0x10]
	0x03C41094 LDP X20, X19, [X31 + 0x10]
	0x03C41098 LDR X30, [X31], #0x20
	0x03C4109C RET
	0x03C410A0 STP X30, X21, [X31 - 0x20]!
	0x03C410A4 STP X20, X19, [X31 + 0x10]
	0x03C410A8 ADRP X21, 0x7A4000
	0x03C410AC LDR X2, [X21 + 0x9A0]
	0x03C410B0 MOV W19, W1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2568]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51589120
	014 Add X0, X0, 153
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2568], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetLocalPositionAndRotation_Injected(ref UnityEngine.Vector3 localPosition, ref UnityEngine.Quaternion localRotation)

Disassembly:
	0x03C41114 STR X0, [X21 + 0x9A0]
	0x03C41118 MOV X0, X19
	0x03C4111C MOV W1, W20
	0x03C41120 LDP X20, X19, [X31 + 0x10]
	0x03C41124 LDP X30, X21, [X31], #0x20
	0x03C41128 BR X2
	0x03C4112C BL 0x1C16F20
	0x03C41130 STP X30, X21, [X31 - 0x20]!
	0x03C41134 STP X20, X19, [X31 + 0x10]
	0x03C41138 LDR X20, [X0 + 0x10]
	0x03C4113C CBZ X20, 0x3C4118C
	0x03C41140 ADRP X21, 0x7A4000
	0x03C41144 LDR X8, [X21 + 0x950]
	0x03C41148 MOV X19, X0
	0x03C4114C CBNZ X8, 0x3C41164
	0x03C41150 ADRP X0, 0xFFFFFFFFFCEB0000
	0x03C41154 ADD X0, X0, 0x2D4
	0x03C41158 BL 0x1C16CB8
	0x03C4115C MOV X8, X0
	0x03C41160 STR X0, [X21 + 0x950]
	0x03C41164 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2576]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51646464
	014 Add X0, X0, 1211
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2576], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void RotateAroundInternal_Injected(ref UnityEngine.Vector3 axis, System.Single angle)

Disassembly:
	0x03C4150C ADD X0, X0, 0x96
	0x03C41510 BL 0x1C16CB8
	0x03C41514 MOV X2, X0
	0x03C41518 STR X0, [X21 + 0xAC8]
	0x03C4151C MOV X0, X20
	0x03C41520 MOV X1, X19
	0x03C41524 LDP X20, X19, [X31 + 0x10]
	0x03C41528 LDP X30, X21, [X31], #0x20
	0x03C4152C BR X2
	0x03C41530 SUB X31, X31, 0x30
	0x03C41534 STP X31, X30, [X31 + 0x8]
	0x03C41538 STP X20, X19, [X31 + 0x20]
	0x03C4153C ADRP X20, 0x7A4000
	0x03C41540 LDR X8, [X20 + 0xAD0]
	0x03C41544 MOV X19, X0
	0x03C41548 STR X31, [X31]
	0x03C4154C CBNZ X8, 0x3C41564
	0x03C41550 ADRP X0, 0xFFFFFFFFFCEB8000
	0x03C41554 ADD X0, X0, 0x584
	0x03C41558 BL 0x1C16CB8
	0x03C4155C MOV X8, X0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7A5000
	007 Move X2, [X21+2584]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51572736
	014 Add X0, X0, 659
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+2584], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.Void Internal_LookAt_Injected(ref UnityEngine.Vector3 worldPosition, ref UnityEngine.Vector3 worldUp)

Disassembly:
	0x03C41824 MOV X19, X1
	0x03C41828 MOV X20, X0
	0x03C4182C CBNZ X2, 0x3C41844
	0x03C41830 ADRP X0, 0xFFFFFFFFFCEBE000
	0x03C41834 ADD X0, X0, 0x525
	0x03C41838 BL 0x1C16CB8
	0x03C4183C MOV X2, X0
	0x03C41840 STR X0, [X21 + 0xAE8]
	0x03C41844 MOV X0, X20
	0x03C41848 MOV X1, X19
	0x03C4184C LDP X20, X19, [X31 + 0x10]
	0x03C41850 LDP X30, X21, [X31], #0x20
	0x03C41854 BR X2
	0x03C41858 SUB X31, X31, 0x30
	0x03C4185C STP X31, X30, [X31 + 0x8]
	0x03C41860 STP X20, X19, [X31 + 0x20]
	0x03C41864 ADRP X20, 0x7A4000
	0x03C41868 LDR X8, [X20 + 0xAF0]
	0x03C4186C MOV X19, X0
	0x03C41870 STR X31, [X31]
	0x03C41874 CBNZ X8, 0x3C4188C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2592]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51462144
	014 Add X0, X0, 2747
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2592], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void TransformDirection_Injected(ref UnityEngine.Vector3 direction, out UnityEngine.Vector3 ret)

Disassembly:
	0x03C41878 ADRP X0, 0xFFFFFFFFFCEC8000
	0x03C4187C ADD X0, X0, 0x4B5
	0x03C41880 BL 0x1C16CB8
	0x03C41884 MOV X8, X0
	0x03C41888 STR X0, [X20 + 0xAF0]
	0x03C4188C ADD X1, X31, 0x0
	0x03C41890 MOV X0, X19
	0x03C41894 BLR X8
	0x03C41898 LDP S0, S1, [X31]
	0x03C4189C LDP S2, S3, [X31 + 0x8]
	0x03C418A0 LDP X20, X19, [X31 + 0x20]
	0x03C418A4 LDR X30, [X31 + 0x10]
	0x03C418A8 ADD X31, X31, 0x30
	0x03C418AC RET
	0x03C418B0 STP X30, X21, [X31 - 0x20]!
	0x03C418B4 STP X20, X19, [X31 + 0x10]
	0x03C418B8 ADRP X21, 0x7A4000
	0x03C418BC LDR X2, [X21 + 0xAF0]
	0x03C418C0 MOV X19, X1
	0x03C418C4 MOV X20, X0
	0x03C418C8 CBNZ X2, 0x3C418E0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2600]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51486720
	014 Add X0, X0, 3940
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2600], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void InverseTransformDirection_Injected(ref UnityEngine.Vector3 direction, out UnityEngine.Vector3 ret)

Disassembly:
	0x03C41934 LDP S0, S1, [X31]
	0x03C41938 LDP S2, S3, [X31 + 0x8]
	0x03C4193C LDP X20, X19, [X31 + 0x20]
	0x03C41940 LDR X30, [X31 + 0x10]
	0x03C41944 ADD X31, X31, 0x30
	0x03C41948 RET
	0x03C4194C STP X30, X21, [X31 - 0x20]!
	0x03C41950 STP X20, X19, [X31 + 0x10]
	0x03C41954 ADRP X21, 0x7A4000
	0x03C41958 LDR X2, [X21 + 0xAF8]
	0x03C4195C MOV X19, X1
	0x03C41960 MOV X20, X0
	0x03C41964 CBNZ X2, 0x3C4197C
	0x03C41968 ADRP X0, 0xFFFFFFFFFCEE6000
	0x03C4196C ADD X0, X0, 0xD5
	0x03C41970 BL 0x1C16CB8
	0x03C41974 MOV X2, X0
	0x03C41978 STR X0, [X21 + 0xAF8]
	0x03C4197C MOV X0, X20
	0x03C41980 MOV X1, X19
	0x03C41984 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2608]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51613696
	014 Add X0, X0, 1044
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2608], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void TransformVector_Injected(ref UnityEngine.Vector3 vector, out UnityEngine.Vector3 ret)

Disassembly:
	0x03C419F0 MOV X1, X0
	0x03C419F4 STR X0, [X20 + 0xA98]
	0x03C419F8 MOV X0, X19
	0x03C419FC LDP X20, X19, [X31 + 0x10]
	0x03C41A00 LDR X30, [X31], #0x20
	0x03C41A04 BR X1
	0x03C41A08 STR X30, [X31 - 0x20]!
	0x03C41A0C STP X20, X19, [X31 + 0x10]
	0x03C41A10 ADRP X20, 0x7A4000
	0x03C41A14 LDR X1, [X20 + 0xAA0]
	0x03C41A18 MOV X19, X0
	0x03C41A1C CBNZ X1, 0x3C41A34
	0x03C41A20 ADRP X0, 0xFFFFFFFFFCED3000
	0x03C41A24 ADD X0, X0, 0xBFA
	0x03C41A28 BL 0x1C16CB8
	0x03C41A2C MOV X1, X0
	0x03C41A30 STR X0, [X20 + 0xAA0]
	0x03C41A34 MOV X0, X19
	0x03C41A38 LDP X20, X19, [X31 + 0x10]
	0x03C41A3C LDR X30, [X31], #0x20
	0x03C41A40 BR X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2616]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51605504
	014 Add X0, X0, 1114
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2616], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void InverseTransformVector_Injected(ref UnityEngine.Vector3 vector, out UnityEngine.Vector3 ret)

Disassembly:
	0x03C41AB0 ADD X0, X0, 0x479
	0x03C41AB4 BL 0x1C16CB8
	0x03C41AB8 MOV X2, X0
	0x03C41ABC STR X0, [X21 + 0xB00]
	0x03C41AC0 MOV X0, X20
	0x03C41AC4 MOV X1, X19
	0x03C41AC8 LDP X20, X19, [X31 + 0x10]
	0x03C41ACC LDP X30, X21, [X31], #0x20
	0x03C41AD0 BR X2
	0x03C41AD4 STR X30, [X31 - 0x20]!
	0x03C41AD8 STP X20, X19, [X31 + 0x10]
	0x03C41ADC ADRP X20, 0x7A4000
	0x03C41AE0 LDR X8, [X20 + 0xA88]
	0x03C41AE4 MOV X19, X0
	0x03C41AE8 CBNZ X8, 0x3C41B00
	0x03C41AEC ADRP X0, 0xFFFFFFFFFCEE4000
	0x03C41AF0 ADD X0, X0, 0x28
	0x03C41AF4 BL 0x1C16CB8
	0x03C41AF8 MOV X8, X0
	0x03C41AFC STR X0, [X20 + 0xA88]
	0x03C41B00 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2624]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51638272
	014 Add X0, X0, 479
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2624], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void TransformPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)

Disassembly:
	0x03C41B04 BLR X8
	0x03C41B08 LDP X20, X19, [X31 + 0x10]
	0x03C41B0C CMP W0, 0x1
	0x03C41B10 CSET W0, EQ
	0x03C41B14 LDR X30, [X31], #0x20
	0x03C41B18 RET
	0x03C41B1C STR X30, [X31 - 0x20]!
	0x03C41B20 STP X20, X19, [X31 + 0x10]
	0x03C41B24 ADRP X20, 0x7A4000
	0x03C41B28 LDR X1, [X20 + 0xA80]
	0x03C41B2C MOV X19, X0
	0x03C41B30 CBNZ X1, 0x3C41B48
	0x03C41B34 ADRP X0, 0xFFFFFFFFFCECC000
	0x03C41B38 ADD X0, X0, 0xFE
	0x03C41B3C BL 0x1C16CB8
	0x03C41B40 MOV X1, X0
	0x03C41B44 STR X0, [X20 + 0xA80]
	0x03C41B48 MOV X0, X19
	0x03C41B4C LDP X20, X19, [X31 + 0x10]
	0x03C41B50 LDR X30, [X31], #0x20
	0x03C41B54 BR X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2632]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51580928
	014 Add X0, X0, 1612
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2632], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void InverseTransformPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)

Disassembly:
	0x03C41BC0 MOV X0, X19
	0x03C41BC4 LDP X20, X19, [X31 + 0x10]
	0x03C41BC8 LDR X30, [X31], #0x20
	0x03C41BCC BR X1
	0x03C41BD0 STR X30, [X31 - 0x20]!
	0x03C41BD4 STP X20, X19, [X31 + 0x10]
	0x03C41BD8 ADRP X20, 0x7A4000
	0x03C41BDC LDR X1, [X20 + 0xAB8]
	0x03C41BE0 MOV X19, X0
	0x03C41BE4 CBNZ X1, 0x3C41BFC
	0x03C41BE8 ADRP X0, 0xFFFFFFFFFCED0000
	0x03C41BEC ADD X0, X0, 0x331
	0x03C41BF0 BL 0x1C16CB8
	0x03C41BF4 MOV X1, X0
	0x03C41BF8 STR X0, [X20 + 0xAB8]
	0x03C41BFC MOV X0, X19
	0x03C41C00 LDP X20, X19, [X31 + 0x10]
	0x03C41C04 LDR X30, [X31], #0x20
	0x03C41C08 BR X1
	0x03C41C0C LDR V7, [X31]
	0x03C41C10 AND W3, W3, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7A5000
	007 Move X3, [X22+2640]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51486720
	014 Add X0, X0, 4034
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2640], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void get_lossyScale_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C41F04 LDR V0, [X31]
	0x03C41F08 MOV X0, X21
	0x03C41F0C STR S0, [X31 + 0x1C]
	0x03C41F10 BL 0x1C16D08
	0x03C41F14 ADD X1, X31, 0x1C
	0x03C41F18 BL 0x1C16E04
	0x03C41F1C MOV X22, X0
	0x03C41F20 MOV X0, X20
	0x03C41F24 BL 0x19903C0
	0x03C41F28 MOV X0, X20
	0x03C41F2C MOV X1, X22
	0x03C41F30 BL 0x19980B4
	0x03C41F34 MOVZ W1, 0x2
	0x03C41F38 MOV X0, X20
	0x03C41F3C MOV X2, X22
	0x03C41F40 BL 0x1993444
	0x03C41F44 LDR V0, [X31 + 0xC]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A5000
	006 Move X2, [X21+2648]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51572736
	012 Add X0, X0, 748
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2648], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

