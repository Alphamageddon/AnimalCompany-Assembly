Type: UnityEngine.Pose

Method: System.Void .ctor(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)

Disassembly:
	0x03C3EB6C MOV V1.16B, V9.16B
	0x03C3EB70 LDP D9, D8, [X31], #0x20
	0x03C3EB74 RET
	0x03C3EB78 SUB X31, X31, 0x30
	0x03C3EB7C STR X30, [X31 + 0x10]

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Move [X0+16], S4
	006 Move [X0+24], S5
	007 Move [X0+24], S6
	008 Return 

Method: System.String ToString()

Disassembly:
	0x03C3EB80 STP X20, X19, [X31 + 0x20]
	0x03C3EB84 ADRP X20, 0x7A7000
	0x03C3EB88 LDR X8, [X20 + 0x9B8]
	0x03C3EB8C MOV X19, X0
	0x03C3EB90 STR W31, [X31 + 0x8]
	0x03C3EB94 STR X31, [X31]
	0x03C3EB98 CBNZ X8, 0x3C3EBB0
	0x03C3EB9C ADRP X0, 0xFFFFFFFFFCEC1000
	0x03C3EBA0 ADD X0, X0, 0x473
	0x03C3EBA4 BL 0x1C16CB8
	0x03C3EBA8 MOV X8, X0
	0x03C3EBAC STR X0, [X20 + 0x9B8]
	0x03C3EBB0 ADD X1, X31, 0x0
	0x03C3EBB4 MOV X0, X19
	0x03C3EBB8 BLR X8
	0x03C3EBBC LDP S0, S1, [X31]
	0x03C3EBC0 LDR V2, [X31 + 0x8]
	0x03C3EBC4 LDP X20, X19, [X31 + 0x20]
	0x03C3EBC8 LDR X30, [X31 + 0x10]
	0x03C3EBCC ADD X31, X31, 0x30
	0x03C3EBD0 RET
	0x03C3EBD4 STR D8, [X31 - 0x20]!
	0x03C3EBD8 STP X30, X19, [X31 + 0x10]
	0x03C3EBDC MOV V8.16B, V2.16B
	0x03C3EBE0 MOV X19, X0
	0x03C3EBE4 BL 0x3C3E880
	0x03C3EBE8 MOV X0, X19
	0x03C3EBEC BL 0x3C3EB78
	0x03C3EBF0 MOV X0, X19
	0x03C3EBF4 LDP X30, X19, [X31 + 0x10]
	0x03C3EBF8 MOV V2.16B, V8.16B
	0x03C3EBFC LDR V8, [X31], #0x20
	0x03C3EC00 B 0x3C3EC04
	0x03C3EC04 SUB X31, X31, 0x30
	0x03C3EC08 STR X30, [X31 + 0x10]
	0x03C3EC0C STP X20, X19, [X31 + 0x20]
	0x03C3EC10 ADRP X20, 0x7A7000
	0x03C3EC14 LDR X8, [X20 + 0x9C0]
	0x03C3EC18 MOV X19, X0
	0x03C3EC1C STP S0, S1, [X31]
	0x03C3EC20 STR S2, [X31 + 0x8]
	0x03C3EC24 CBNZ X8, 0x3C3EC3C
	0x03C3EC28 ADRP X0, 0xFFFFFFFFFCEC9000
	0x03C3EC2C ADD X0, X0, 0x3CC
	0x03C3EC30 BL 0x1C16CB8
	0x03C3EC34 MOV X8, X0
	0x03C3EC38 STR X0, [X20 + 0x9C0]
	0x03C3EC3C ADD X1, X31, 0x0
	0x03C3EC40 MOV X0, X19
	0x03C3EC44 BLR X8
	0x03C3EC48 LDP X20, X19, [X31 + 0x20]
	0x03C3EC4C LDR X30, [X31 + 0x10]
	0x03C3EC50 ADD X31, X31, 0x30
	0x03C3EC54 RET
	0x03C3EC58 STP D11, D10, [X31 - 0x30]!
	0x03C3EC5C STP D9, D8, [X31 + 0x10]
	0x03C3EC60 STP X30, X19, [X31 + 0x20]
	0x03C3EC64 MOV X19, X0
	0x03C3EC68 BL 0x3C3E7F0
	0x03C3EC6C MOV X0, X19
	0x03C3EC70 MOV V8.16B, V0.16B
	0x03C3EC74 MOV V9.16B, V1.16B
	0x03C3EC78 BL 0x3C3E90C
	0x03C3EC7C MOV X0, X19
	0x03C3EC80 MOV V10.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x7A8000
	006 Move X21, 0x4B6000
	007 Move W8, [X19+2226]
	008 Move X21, [X21+2512]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x4B6000
	015 Move X0, [X0+2512]
	016 Call 0x1C17CF4
	017 Move X0, 0x4C3000
	018 Move X0, [X0+408]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+2226], W8
	022 Move X0, [X21]
	023 Move W1, 2
	024 Call 0x1C17D6C
	025 Move X19, X0
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Move X3, X31
	030 Call 0x2431694
	031 Compare X19, 0
	032 JumpIfEqual {78}
	033 Move X21, X0
	034 Compare X0, 0
	035 JumpIfEqual {42}
	036 Move X8, [X19]
	037 Move X0, X21
	038 Move X1, [X8+64]
	039 Call 0x1C17E00
	040 Compare X0, 0
	041 JumpIfEqual {75}
	042 Move W8, [X19+24]
	043 Compare W8, 0
	044 JumpIfEqual {74}
	045 Add X0, X20, 12
	046 Move X1, X31
	047 Move X2, X31
	048 Move X3, X31
	049 Move [X19+32], X21
	050 Call 0x2455360
	051 Move X20, X0
	052 Compare X0, 0
	053 JumpIfEqual {60}
	054 Move X8, [X19]
	055 Move X0, X20
	056 Move X1, [X8+64]
	057 Call 0x1C17E00
	058 Compare X0, 0
	059 JumpIfEqual {75}
	060 Move W8, [X19+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X8, 0x4C3000
	063 Move X8, [X8+408]
	064 Move [X19+40], X20
	065 Move X1, X19
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X0, [X8]
	069 Move X2, X31
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Call UnityString.Format, X0, X1
	073 Return X0
	074 Call 0x1C17F28
	075 Call 0x1C17F44
	076 Move X1, X31
	077 Call 0x1C17DEC
	078 Call 0x1C17F20

Method: UnityEngine.Pose GetTransformedBy(UnityEngine.Pose lhs)

Disassembly:
	0x03C3EC84 MOV V11.16B, V1.16B
	0x03C3EC88 BL 0x3C3EA28
	0x03C3EC8C FMUL S0, S10, S0
	0x03C3EC90 FMUL S1, S11, S1
	0x03C3EC94 FSUB S0, S8, S0
	0x03C3EC98 FSUB S1, S9, S1
	0x03C3EC9C LDP X30, X19, [X31 + 0x20]
	0x03C3ECA0 LDP D9, D8, [X31 + 0x10]
	0x03C3ECA4 LDP D11, D10, [X31], #0x30
	0x03C3ECA8 RET
	0x03C3ECAC STP D13, D12, [X31 - 0x50]!
	0x03C3ECB0 STP D11, D10, [X31 + 0x10]
	0x03C3ECB4 STP D9, D8, [X31 + 0x20]
	0x03C3ECB8 STR X30, [X31 + 0x30]
	0x03C3ECBC STP X20, X19, [X31 + 0x40]
	0x03C3ECC0 MOV V8.16B, V1.16B
	0x03C3ECC4 MOV V9.16B, V0.16B
	0x03C3ECC8 MOV X19, X0
	0x03C3ECCC BL 0x3C3E7F0
	0x03C3ECD0 MOV X0, X19
	0x03C3ECD4 MOV V10.16B, V0.16B
	0x03C3ECD8 MOV V11.16B, V1.16B
	0x03C3ECDC BL 0x3C3E90C
	0x03C3ECE0 MOV X0, X19
	0x03C3ECE4 MOV V12.16B, V0.16B
	0x03C3ECE8 MOV V13.16B, V1.16B
	0x03C3ECEC BL 0x3C3EA28
	0x03C3ECF0 FMUL S0, S12, S0
	0x03C3ECF4 FMUL S1, S13, S1
	0x03C3ECF8 FSUB S0, S10, S0
	0x03C3ECFC FSUB S1, S11, S1
	0x03C3ED00 MOV X0, X19
	0x03C3ED04 FSUB S10, S9, S0
	0x03C3ED08 FSUB S11, S8, S1
	0x03C3ED0C BL 0x3C3E90C
	0x03C3ED10 FSUB S0, S0, S10
	0x03C3ED14 FSUB S1, S1, S11
	0x03C3ED18 MOV X0, X19
	0x03C3ED1C BL 0x3C3E99C
	0x03C3ED20 MOV X0, X19
	0x03C3ED24 BL 0x3C3E7F0
	0x03C3ED28 ADRP X20, 0x7A3000
	0x03C3ED2C LDRB W8, [X20 + 0xA48]
	0x03C3ED30 MOV V8.16B, V0.16B
	0x03C3ED34 MOV V9.16B, V1.16B
	0x03C3ED38 CBNZ W8, 0x3C3ED50
	0x03C3ED3C ADRP X0, 0x4BD000
	0x03C3ED40 LDR X0, [X0 + 0xF08]
	0x03C3ED44 BL 0x1C16CF4
	0x03C3ED48 MOVZ W8, 0x1
	0x03C3ED4C STRB W8, [X20 + 0xA48]
	0x03C3ED50 ADRP X8, 0x4BD000
	0x03C3ED54 LDR X8, [X8 + 0xF08]
	0x03C3ED58 MOV X0, X19
	0x03C3ED5C LDR X8, [X8]
	0x03C3ED60 LDR X8, [X8 + 0xB8]
	0x03C3ED64 LDP S12, S13, [X8 + 0x8]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move S9, [X1+8]
	008 Move S0, [X1+12]
	009 Move S1, [X1+16]
	010 Move S2, [X1+20]
	011 Move V3, [X1+24]
	012 Move S4, [X0]
	013 Move S5, [X0+4]
	014 Move V6, [X0+8]
	015 Move V8, [X1]
	016 Move X21, X0
	017 Move X0, X31
	018 Move X20, X1
	019 Move X19, X8
	020 Call Quaternion.op_Multiply, X0, X1
	021 Move S3, [X20+12]
	022 Move S4, [X20+16]
	023 Move S5, [X20+20]
	024 Move S6, [X20+24]
	025 Move S7, [X21+12]
	026 Move S16, [X21+16]
	027 Move S17, [X21+20]
	028 Move S18, [X21+24]
	029 Add S2, S9, S2
	030 Move V0.S[1], V1.S[0]
	031 Add V0, V8, V0
	032 Move [X19], D0
	033 Multiply S0, S6, S7
	034 Multiply S1, S3, S18
	035 Multiply S19, S4, S17
	036 Multiply S20, S5, S16
	037 Multiply S21, S6, S16
	038 Multiply S22, S4, S18
	039 Multiply S23, S5, S7
	040 Multiply S24, S3, S17
	041 Multiply S25, S3, S16
	042 Multiply S3, S3, S7
	043 Multiply S7, S4, S7
	044 Multiply S4, S4, S16
	045 Multiply S16, S6, S17
	046 Multiply S6, S6, S18
	047 Multiply S18, S5, S18
	048 Add S0, S0, S1
	049 Add S1, S21, S22
	050 Add S16, S16, S18
	051 Subtract S3, S6, S3
	052 Multiply S5, S5, S17
	053 Add S0, S19, S0
	054 Add S1, S23, S1
	055 Add S6, S25, S16
	056 Subtract S3, S3, S4
	057 Subtract S0, S0, S20
	058 Subtract S1, S1, S24
	059 Subtract S4, S6, S7
	060 Subtract S3, S3, S5
	061 Move [X19+8], S2
	062 Move [X19+16], S0
	063 Move [X19+16], S1
	064 Move [X19+24], S4
	065 Move [X19+24], S3
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X30, [X31+16]
	069 Move X21, [X31+24]
	070 Move D9, [X31+48]
	071 Move D8, [X31+56]
	072 Return X0

Method: UnityEngine.Pose GetTransformedBy(UnityEngine.Transform lhs)

Disassembly:
	0x03C3ED68 BL 0x3C3EA28
	0x03C3ED6C FSUB S0, S12, S0
	0x03C3ED70 FSUB S1, S13, S1
	0x03C3ED74 FMUL S0, S10, S0
	0x03C3ED78 FMUL S1, S11, S1
	0x03C3ED7C FADD S0, S8, S0
	0x03C3ED80 FADD S1, S9, S1
	0x03C3ED84 MOV X0, X19
	0x03C3ED88 LDP X20, X19, [X31 + 0x40]
	0x03C3ED8C LDR X30, [X31 + 0x30]
	0x03C3ED90 LDP D9, D8, [X31 + 0x20]
	0x03C3ED94 LDP D11, D10, [X31 + 0x10]
	0x03C3ED98 LDP D13, D12, [X31], #0x50
	0x03C3ED9C B 0x3C3E880
	0x03C3EDA0 STP D13, D12, [X31 - 0x50]!
	0x03C3EDA4 STP D11, D10, [X31 + 0x10]
	0x03C3EDA8 STP D9, D8, [X31 + 0x20]
	0x03C3EDAC STR X30, [X31 + 0x30]
	0x03C3EDB0 STP X20, X19, [X31 + 0x40]
	0x03C3EDB4 MOV X19, X0
	0x03C3EDB8 BL 0x3C3E7F0
	0x03C3EDBC MOV X0, X19
	0x03C3EDC0 MOV V8.16B, V0.16B
	0x03C3EDC4 MOV V9.16B, V1.16B
	0x03C3EDC8 BL 0x3C3E90C
	0x03C3EDCC ADRP X20, 0x7A3000
	0x03C3EDD0 LDRB W8, [X20 + 0xA48]
	0x03C3EDD4 MOV V10.16B, V0.16B
	0x03C3EDD8 MOV V11.16B, V1.16B
	0x03C3EDDC CBNZ W8, 0x3C3EDF4
	0x03C3EDE0 ADRP X0, 0x4BD000
	0x03C3EDE4 LDR X0, [X0 + 0xF08]
	0x03C3EDE8 BL 0x1C16CF4
	0x03C3EDEC MOVZ W8, 0x1
	0x03C3EDF0 STRB W8, [X20 + 0xA48]
	0x03C3EDF4 ADRP X8, 0x4BD000
	0x03C3EDF8 LDR X8, [X8 + 0xF08]
	0x03C3EDFC MOV X0, X19
	0x03C3EE00 LDR X8, [X8]
	0x03C3EE04 LDR X8, [X8 + 0xB8]
	0x03C3EE08 LDP S12, S13, [X8 + 0x8]
	0x03C3EE0C BL 0x3C3EA28
	0x03C3EE10 FSUB S0, S12, S0
	0x03C3EE14 FSUB S1, S13, S1
	0x03C3EE18 FMUL S0, S10, S0
	0x03C3EE1C FMUL S1, S11, S1
	0x03C3EE20 FADD S0, S8, S0
	0x03C3EE24 FADD S1, S9, S1
	0x03C3EE28 LDP X20, X19, [X31 + 0x40]
	0x03C3EE2C LDR X30, [X31 + 0x30]
	0x03C3EE30 LDP D9, D8, [X31 + 0x20]
	0x03C3EE34 LDP D11, D10, [X31 + 0x10]
	0x03C3EE38 LDP D13, D12, [X31], #0x50
	0x03C3EE3C RET
	0x03C3EE40 STP D15, D14, [X31 - 0x60]!
	0x03C3EE44 STP D13, D12, [X31 + 0x10]
	0x03C3EE48 STP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Compare X1, 0
	009 JumpIfEqual {70}
	010 Move S1, [X0+4]
	011 Move S2, [X0+8]
	012 Move V0, [X0]
	013 Move X20, X0
	014 Move X0, X1
	015 Move X21, X1
	016 Move X19, X8
	017 Call Transform.TransformPoint, X0, X1
	018 Move X0, X21
	019 Move V8, V0
	020 Move V9, V1
	021 Move V10, V2
	022 Call Transform.get_rotation, X0
	023 Move S4, [X20+12]
	024 Move S5, [X20+16]
	025 Move S6, [X20+20]
	026 Move S7, [X20+24]
	027 Move [X19], S8
	028 Move [X19+8], S9
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Multiply S16, S3, S4
	032 Multiply S17, S0, S7
	033 Multiply S18, S1, S6
	034 Multiply S19, S2, S5
	035 Multiply S20, S3, S5
	036 Multiply S21, S1, S7
	037 Multiply S22, S2, S4
	038 Multiply S23, S0, S6
	039 Multiply S24, S0, S5
	040 Multiply S0, S0, S4
	041 Multiply S4, S1, S4
	042 Multiply S1, S1, S5
	043 Multiply S5, S3, S6
	044 Multiply S3, S3, S7
	045 Multiply S7, S2, S7
	046 Multiply S2, S2, S6
	047 Add S6, S16, S17
	048 Add S16, S20, S21
	049 Add S5, S5, S7
	050 Subtract S0, S3, S0
	051 Add S3, S18, S6
	052 Add S6, S22, S16
	053 Add S5, S24, S5
	054 Subtract S0, S0, S1
	055 Subtract S1, S3, S19
	056 Subtract S3, S6, S23
	057 Subtract S4, S5, S4
	058 Subtract S0, S0, S2
	059 Move [X19+8], S10
	060 Move [X19+16], S1
	061 Move [X19+16], S3
	062 Move [X19+24], S4
	063 Move [X19+24], S0
	064 Move X20, [X31+48]
	065 Move X19, [X31+56]
	066 Move D9, [X31+16]
	067 Move D8, [X31+24]
	068 Move V10, [X31+64]
	069 Return X0
	070 Call 0x1C17F20

Method: UnityEngine.Vector3 get_forward()

Disassembly:
	0x03C3EF0C FMUL S0, S10, S0
	0x03C3EF10 FMUL S1, S11, S1
	0x03C3EF14 FADD S0, S8, S0
	0x03C3EF18 FADD S1, S9, S1
	0x03C3EF1C MOV X0, X19
	0x03C3EF20 LDP X20, X19, [X31 + 0x50]
	0x03C3EF24 LDR X30, [X31 + 0x40]
	0x03C3EF28 LDP D9, D8, [X31 + 0x30]
	0x03C3EF2C LDP D11, D10, [X31 + 0x20]
	0x03C3EF30 LDP D13, D12, [X31 + 0x10]
	0x03C3EF34 LDP D15, D14, [X31], #0x60
	0x03C3EF38 B 0x3C3E880
	0x03C3EF3C STR X30, [X31 - 0x20]!
	0x03C3EF40 STP X20, X19, [X31 + 0x10]
	0x03C3EF44 ADRP X20, 0x7A7000
	0x03C3EF48 LDR X1, [X20 + 0x8B8]
	0x03C3EF4C MOV X19, X0
	0x03C3EF50 CBNZ X1, 0x3C3EF68
	0x03C3EF54 ADRP X0, 0xFFFFFFFFFCEDA000
	0x03C3EF58 ADD X0, X0, 0xAF2
	0x03C3EF5C BL 0x1C16CB8
	0x03C3EF60 MOV X1, X0
	0x03C3EF64 STR X0, [X20 + 0x8B8]
	0x03C3EF68 MOV X0, X19
	0x03C3EF6C LDP X20, X19, [X31 + 0x10]
	0x03C3EF70 LDR X30, [X31], #0x20
	0x03C3EF74 BR X1
	0x03C3EF78 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, 0x79B000
	008 Move S8, [X0+12]
	009 Move S9, [X0+16]
	010 Move W8, [X19+2591]
	011 Move S11, [X0+20]
	012 Move S10, [X0+24]
	013 Compare W8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, 0x4B6000
	016 Move X0, [X0+1440]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+2591], W8
	020 Move X8, 0x4B6000
	021 Move X8, [X8+1440]
	022 Move V0, V8
	023 Move V1, V9
	024 Move X30, [X31+32]
	025 Move X19, [X31+40]
	026 Move X8, [X8]
	027 Move D9, [X31+16]
	028 Move D8, [X31+24]
	029 Move V2, V11
	030 Move V3, V10
	031 Move X8, [X8+184]
	032 Move X0, X31
	033 Move S4, [X8+72]
	034 Move S5, [X8+76]
	035 Move V6, [X8+80]
	036 Move D11, [X31+48]
	037 Move D10, [X31+56]
	038 Call Quaternion.op_Multiply, X0, X1
	039 Return X0

Method: UnityEngine.Vector3 get_right()

Disassembly:
	0x03C3EF7C STP X20, X19, [X31 + 0x10]
	0x03C3EF80 ADRP X21, 0x7A7000
	0x03C3EF84 LDRB W8, [X21 + 0x8C0]
	0x03C3EF88 MOV X19, X1
	0x03C3EF8C MOV X20, X0
	0x03C3EF90 TBNZ X8, 0x0, 0x3C3EFB4
	0x03C3EF94 ADRP X0, 0x4B5000
	0x03C3EF98 LDR X0, [X0 + 0xA28]
	0x03C3EF9C BL 0x1C16CF4
	0x03C3EFA0 ADRP X0, 0x521000
	0x03C3EFA4 LDR X0, [X0 + 0x800]
	0x03C3EFA8 BL 0x1C16CF4
	0x03C3EFAC MOVZ W8, 0x1
	0x03C3EFB0 STRB W8, [X21 + 0x8C0]
	0x03C3EFB4 CBZ X19, 0x3C3F020
	0x03C3EFB8 LDR W8, [X19 + 0x18]
	0x03C3EFBC CMP W8, 0x3
	0x03C3EFC0 B.LE 0x3C3F020
	0x03C3EFC4 MOV X0, X20
	0x03C3EFC8 BL 0x3C3E51C
	0x03C3EFCC LDR W8, [X19 + 0x18]
	0x03C3EFD0 CBZ W8, 0x3C3F054
	0x03C3EFD4 CMP W8, 0x1
	0x03C3EFD8 STP S0, S1, [X19 + 0x20]
	0x03C3EFDC STR W31, [X19 + 0x28]
	0x03C3EFE0 B.EQ 0x3C3F054
	0x03C3EFE4 FADD S3, S3, S1
	0x03C3EFE8 CMP W8, 0x2

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, 0x79B000
	008 Move S8, [X0+12]
	009 Move S9, [X0+16]
	010 Move W8, [X19+2928]
	011 Move S11, [X0+20]
	012 Move S10, [X0+24]
	013 Compare W8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, 0x4B6000
	016 Move X0, [X0+1440]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+2928], W8
	020 Move X8, 0x4B6000
	021 Move X8, [X8+1440]
	022 Move V0, V8
	023 Move V1, V9
	024 Move X30, [X31+32]
	025 Move X19, [X31+40]
	026 Move X8, [X8]
	027 Move D9, [X31+16]
	028 Move D8, [X31+24]
	029 Move V2, V11
	030 Move V3, V10
	031 Move X8, [X8+184]
	032 Move X0, X31
	033 Move S4, [X8+60]
	034 Move S5, [X8+64]
	035 Move V6, [X8+68]
	036 Move D11, [X31+48]
	037 Move D10, [X31+56]
	038 Call Quaternion.op_Multiply, X0, X1
	039 Return X0

Method: UnityEngine.Vector3 get_up()

Disassembly:
	0x03C3EFEC STP S0, S3, [X19 + 0x2C]
	0x03C3EFF0 STR W31, [X19 + 0x34]
	0x03C3EFF4 B.LS 0x3C3F054
	0x03C3EFF8 FADD S0, S2, S0
	0x03C3EFFC CMP W8, 0x3
	0x03C3F000 STP S0, S3, [X19 + 0x38]
	0x03C3F004 STR W31, [X19 + 0x40]
	0x03C3F008 B.EQ 0x3C3F054
	0x03C3F00C STP S0, S1, [X19 + 0x44]
	0x03C3F010 STR W31, [X19 + 0x4C]
	0x03C3F014 LDP X20, X19, [X31 + 0x10]
	0x03C3F018 LDP X30, X21, [X31], #0x20
	0x03C3F01C RET
	0x03C3F020 ADRP X8, 0x4B4000
	0x03C3F024 LDR X8, [X8 + 0xA28]
	0x03C3F028 ADRP X19, 0x520000
	0x03C3F02C LDR X0, [X8]
	0x03C3F030 LDR W8, [X0 + 0xE0]
	0x03C3F034 LDR X19, [X19 + 0x800]
	0x03C3F038 CBNZ W8, 0x3C3F040
	0x03C3F03C BL 0x1C16DFC
	0x03C3F040 LDR X0, [X19]
	0x03C3F044 LDP X20, X19, [X31 + 0x10]
	0x03C3F048 MOV X1, X31
	0x03C3F04C LDP X30, X21, [X31], #0x20
	0x03C3F050 B 0x3C0649C
	0x03C3F054 BL 0x1C16F28
	0x03C3F058 SUB X31, X31, 0xA0

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, 0x79B000
	008 Move S8, [X0+12]
	009 Move S9, [X0+16]
	010 Move W8, [X19+1926]
	011 Move S11, [X0+20]
	012 Move S10, [X0+24]
	013 Compare W8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, 0x4B5000
	016 Move X0, [X0+1440]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1926], W8
	020 Move X8, 0x4B5000
	021 Move X8, [X8+1440]
	022 Move V0, V8
	023 Move V1, V9
	024 Move X30, [X31+32]
	025 Move X19, [X31+40]
	026 Move X8, [X8]
	027 Move D9, [X31+16]
	028 Move D8, [X31+24]
	029 Move V2, V11
	030 Move V3, V10
	031 Move X8, [X8+184]
	032 Move X0, X31
	033 Move S4, [X8+24]
	034 Move S5, [X8+28]
	035 Move V6, [X8+32]
	036 Move D11, [X31+48]
	037 Move D10, [X31+56]
	038 Call Quaternion.op_Multiply, X0, X1
	039 Return X0

Method: UnityEngine.Pose get_identity()

Disassembly:
	0x03C3F05C STP X30, X21, [X31 + 0x80]
	0x03C3F060 STP X20, X19, [X31 + 0x90]
	0x03C3F064 ADRP X21, 0x7A6000
	0x03C3F068 LDRB W8, [X21 + 0x8C1]
	0x03C3F06C MOV X19, X1
	0x03C3F070 MOV X20, X0
	0x03C3F074 TBNZ X8, 0x0, 0x3C3F098
	0x03C3F078 ADRP X0, 0x4B4000
	0x03C3F07C LDR X0, [X0 + 0xA28]
	0x03C3F080 BL 0x1C16CF4
	0x03C3F084 ADRP X0, 0x520000
	0x03C3F088 LDR X0, [X0 + 0x808]
	0x03C3F08C BL 0x1C16CF4
	0x03C3F090 MOVZ W8, 0x1
	0x03C3F094 STRB W8, [X21 + 0x8C1]
	0x03C3F098 MOVI V0.2D, 0x0
	0x03C3F09C STP V0, V0, [X31 + 0x20]
	0x03C3F0A0 STP V0, V0, [X31]
	0x03C3F0A4 CBZ X19, 0x3C3F184
	0x03C3F0A8 LDR W8, [X19 + 0x18]
	0x03C3F0AC CMP W8, 0x3
	0x03C3F0B0 B.LE 0x3C3F184
	0x03C3F0B4 MOV X0, X20
	0x03C3F0B8 MOV X1, X19
	0x03C3F0BC BL 0x3C3EF78
	0x03C3F0C0 ADRP X21, 0x7A6000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7A7000
	006 Move X20, 0x4DD000
	007 Move X19, X8
	008 Move W8, [X21+2227]
	009 Move X20, [X20+1552]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4DD000
	015 Move X0, [X0+1552]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2227], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 NotImplemented "Instruction LDUR not yet implemented."
	027 Move V1, [X8]
	028 Move [X19+12], V0
	029 Move [X19], V1
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C3F0C4 LDR X8, [X21 + 0x2D8]
	0x03C3F0C8 CBNZ X8, 0x3C3F0E0
	0x03C3F0CC ADRP X0, 0xFFFFFFFFFCEEB000
	0x03C3F0D0 ADD X0, X0, 0x93C
	0x03C3F0D4 BL 0x1C16CB8
	0x03C3F0D8 MOV X8, X0
	0x03C3F0DC STR X0, [X21 + 0x2D8]
	0x03C3F0E0 MOV X0, X20
	0x03C3F0E4 BLR X8
	0x03C3F0E8 CBZ X0, 0x3C3F1C4
	0x03C3F0EC ADRP X21, 0x7A6000
	0x03C3F0F0 LDR X8, [X21 + 0xA00]
	0x03C3F0F4 MOV X20, X0
	0x03C3F0F8 MOVI V0.2D, 0x0
	0x03C3F0FC STP V0, V0, [X31 + 0x60]
	0x03C3F100 STP V0, V0, [X31 + 0x40]
	0x03C3F104 CBNZ X8, 0x3C3F11C
	0x03C3F108 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C3F10C ADD X0, X0, 0x2FC
	0x03C3F110 BL 0x1C16CB8
	0x03C3F114 MOV X8, X0
	0x03C3F118 STR X0, [X21 + 0xA00]
	0x03C3F11C ADD X1, X31, 0x40
	0x03C3F120 MOV X0, X20
	0x03C3F124 BLR X8
	0x03C3F128 LDP V0, V1, [X31 + 0x40]
	0x03C3F12C LDP V2, V3, [X31 + 0x60]
	0x03C3F130 MOV X20, X31
	0x03C3F134 ADD X21, X19, 0x28
	0x03C3F138 STP V0, V1, [X31]
	0x03C3F13C STP V2, V3, [X31 + 0x20]
	0x03C3F140 LDR W8, [X19 + 0x18]
	0x03C3F144 CMP X20, W8, UXTW
	0x03C3F148 B.CS 0x3C3F1C0
	0x03C3F14C LDP S0, S1, [X21 - 0x8]
	0x03C3F150 LDR V2, [X21]
	0x03C3F154 ADD X0, X31, 0x0
	0x03C3F158 MOV X1, X31
	0x03C3F15C BL 0x3C281F8
	0x03C3F160 LDR W8, [X19 + 0x18]
	0x03C3F164 CMP X20, X8
	0x03C3F168 B.CS 0x3C3F1C0
	0x03C3F16C ADD X20, X20, 0x1
	0x03C3F170 STP S0, S1, [X21 - 0x8]
	0x03C3F174 STR S2, [X21], #0xC
	0x03C3F178 CMP X20, 0x4
	0x03C3F17C B.NE 0x3C3F144
	0x03C3F180 B 0x3C3F1B0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x7A7000
	007 Move W8, [X21+2228]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4DD000
	015 Move X0, [X0+1552]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2228], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X21, 0x4DD000
	022 Move X21, [X21+1552]
	023 Move X8, [X20]
	024 Move X0, [X21]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfEqual {31}
	030 Move X1, X0
	031 Call 0x1C17DFC
	032 Move X1, [X21]
	033 Move X0, [X20]
	034 Move X8, [X0+64]
	035 Move X9, [X1+64]
	036 Move X0, X20
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Call 0x1C17E08
	039 Move V0, [X0]
	040 NotImplemented "Instruction LDUR not yet implemented."
	041 Add X1, X31, 0
	042 Move X0, X19
	043 Move [X31], V0
	044 Move [X31+12], V1
	045 Call Pose.Equals, X0, X1
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 And W0, W0, 1
	051 Add X31, X31, 64
	052 Return X0
	053 Call 0x1C181E0

Method: System.Boolean Equals(UnityEngine.Pose other)

Disassembly:
	0x03C3F184 ADRP X8, 0x4B4000
	0x03C3F188 LDR X8, [X8 + 0xA28]
	0x03C3F18C ADRP X19, 0x520000
	0x03C3F190 LDR X0, [X8]
	0x03C3F194 LDR W8, [X0 + 0xE0]
	0x03C3F198 LDR X19, [X19 + 0x808]
	0x03C3F19C CBNZ W8, 0x3C3F1A4
	0x03C3F1A0 BL 0x1C16DFC
	0x03C3F1A4 LDR X0, [X19]
	0x03C3F1A8 MOV X1, X31
	0x03C3F1AC BL 0x3C0649C
	0x03C3F1B0 LDP X20, X19, [X31 + 0x90]
	0x03C3F1B4 LDP X30, X21, [X31 + 0x80]
	0x03C3F1B8 ADD X31, X31, 0xA0
	0x03C3F1BC RET
	0x03C3F1C0 BL 0x1C16F28
	0x03C3F1C4 BL 0x1C16F20
	0x03C3F1C8 SUB X31, X31, 0x60
	0x03C3F1CC STP X30, X21, [X31 + 0x40]
	0x03C3F1D0 STP X20, X19, [X31 + 0x50]
	0x03C3F1D4 ADRP X21, 0x7A6000
	0x03C3F1D8 MOV X19, X8
	0x03C3F1DC LDR X8, [X21 + 0xA00]
	0x03C3F1E0 MOV X20, X0
	0x03C3F1E4 MOVI V0.2D, 0x0
	0x03C3F1E8 STP V0, V0, [X31 + 0x20]
	0x03C3F1EC STP V0, V0, [X31]
	0x03C3F1F0 CBNZ X8, 0x3C3F208
	0x03C3F1F4 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C3F1F8 ADD X0, X0, 0x2FC
	0x03C3F1FC BL 0x1C16CB8
	0x03C3F200 MOV X8, X0
	0x03C3F204 STR X0, [X21 + 0xA00]
	0x03C3F208 ADD X1, X31, 0x0
	0x03C3F20C MOV X0, X20
	0x03C3F210 BLR X8
	0x03C3F214 LDP V1, V0, [X31 + 0x20]
	0x03C3F218 LDP V3, V2, [X31]
	0x03C3F21C LDP X30, X21, [X31 + 0x40]
	0x03C3F220 STP V1, V0, [X19 + 0x20]
	0x03C3F224 STP V3, V2, [X19]
	0x03C3F228 LDP X20, X19, [X31 + 0x50]
	0x03C3F22C ADD X31, X31, 0x60
	0x03C3F230 RET

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V0, [X1]
	007 Move V1, [X0]
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move V0, [X1+4]
	010 Move V1, [X0+4]
	011 Move X19, X0
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 Move V0, [X1+8]
	014 Move V1, [X19+8]
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move S0, [X1+12]
	017 Move S10, [X1+16]
	018 Move S9, [X1+20]
	019 Move S8, [X1+24]
	020 Add X0, X19, 12
	021 Move X1, X31
	022 Call Single.Equals, X0, V0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {53}
	027 Add X0, X19, 16
	028 Move V0, V10
	029 Move X1, X31
	030 Call Single.Equals, X0, V0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {53}
	035 Add X0, X19, 20
	036 Move V0, V9
	037 Move X1, X31
	038 Call Single.Equals, X0, V0
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {53}
	043 Add X0, X19, 24
	044 Move V0, V8
	045 Move X30, [X31+32]
	046 Move X19, [X31+40]
	047 Move D9, [X31+16]
	048 Move D8, [X31+24]
	049 Move X1, X31
	050 Move V10, [X31+48]
	051 Call Single.Equals, X0, V0
	052 Return X0
	053 Move X30, [X31+32]
	054 Move X19, [X31+40]
	055 Move D9, [X31+16]
	056 Move D8, [X31+24]
	057 Move W0, W31
	058 Move V10, [X31+48]
	059 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C3F234 STR D12, [X31 - 0x40]!
	0x03C3F238 STP D11, D10, [X31 + 0x8]
	0x03C3F23C STP D9, D8, [X31 + 0x18]
	0x03C3F240 STR X30, [X31 + 0x28]
	0x03C3F244 STP X20, X19, [X31 + 0x30]
	0x03C3F248 MOV V8.16B, V0.16B
	0x03C3F24C MOV W20, W1
	0x03C3F250 MOV X19, X0
	0x03C3F254 BL 0x3C3E90C
	0x03C3F258 MOV X0, X19
	0x03C3F25C MOV V9.16B, V0.16B
	0x03C3F260 MOV V10.16B, V1.16B
	0x03C3F264 BL 0x3C3F32C
	0x03C3F268 CBZ W20, 0x3C3F29C
	0x03C3F26C CMP W20, 0x1
	0x03C3F270 B.NE 0x3C3F2E4
	0x03C3F274 MOV X0, X19
	0x03C3F278 MOV V11.16B, V1.16B
	0x03C3F27C BL 0x3C3E6D4
	0x03C3F280 MOV X0, X19
	0x03C3F284 MOV V10.16B, V1.16B
	0x03C3F288 BL 0x3C3E5B8
	0x03C3F28C FSUB S0, S10, S1
	0x03C3F290 FMUL S0, S11, S0
	0x03C3F294 FSUB S10, S8, S0
	0x03C3F298 B 0x3C3F2C0
	0x03C3F29C MOV X0, X19
	0x03C3F2A0 MOV V12.16B, V0.16B
	0x03C3F2A4 BL 0x3C3E6D4
	0x03C3F2A8 MOV X0, X19
	0x03C3F2AC MOV V9.16B, V0.16B
	0x03C3F2B0 BL 0x3C3E5B8
	0x03C3F2B4 FSUB S0, S9, S0
	0x03C3F2B8 FMUL S0, S12, S0
	0x03C3F2BC FSUB S9, S8, S0
	0x03C3F2C0 MOV X0, X19
	0x03C3F2C4 MOV V0.16B, V9.16B
	0x03C3F2C8 MOV V1.16B, V10.16B
	0x03C3F2CC LDP X20, X19, [X31 + 0x30]
	0x03C3F2D0 LDR X30, [X31 + 0x28]
	0x03C3F2D4 LDP D9, D8, [X31 + 0x18]
	0x03C3F2D8 LDP D11, D10, [X31 + 0x8]
	0x03C3F2DC LDR V12, [X31], #0x40

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X1, X31
	010 Move X19, X0
	011 Call Single.GetHashCode, X0
	012 Move W20, W0
	013 Add X0, X19, 4
	014 Move X1, X31
	015 Call Single.GetHashCode, X0
	016 Move W21, W0
	017 Add X0, X19, 8
	018 Move X1, X31
	019 Call Single.GetHashCode, X0
	020 Move W22, W0
	021 Add X0, X19, 12
	022 Move X1, X31
	023 Call Single.GetHashCode, X0
	024 Move W23, W0
	025 Add X0, X19, 16
	026 Move X1, X31
	027 Call Single.GetHashCode, X0
	028 Move W24, W0
	029 Add X0, X19, 20
	030 Move X1, X31
	031 Call Single.GetHashCode, X0
	032 Move W25, W0
	033 Add X0, X19, 24
	034 Move X1, X31
	035 Call Single.GetHashCode, X0
	036 Xor W10, W20, W21
	037 Xor W8, W23, W24
	038 Xor W10, W10, W22
	039 Move X20, [X31+48]
	040 Move X19, [X31+56]
	041 Move X22, [X31+32]
	042 Move X21, [X31+40]
	043 Move X24, [X31+16]
	044 Move X23, [X31+24]
	045 And W9, W0, 0xFFFFFFFE
	046 Xor W8, W8, W25
	047 Xor W9, W10, W9
	048 Xor W0, W9, W8
	049 Move X30, [X31+64]
	050 Move X25, [X31+72]
	051 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03C3F2E0 B 0x3C3E99C
	0x03C3F2E4 ADRP X0, 0x4BE000
	0x03C3F2E8 LDR X0, [X0 + 0xF78]
	0x03C3F2EC BL 0x1C16D08
	0x03C3F2F0 BL 0x1C16F10
	0x03C3F2F4 MOV X19, X0
	0x03C3F2F8 ADRP X0, 0x506000
	0x03C3F2FC LDR X0, [X0 + 0xFF8]
	0x03C3F300 BL 0x1C16D08
	0x03C3F304 MOV X1, X0
	0x03C3F308 MOV X0, X19
	0x03C3F30C MOV X2, X31
	0x03C3F310 BL 0x3379B6C
	0x03C3F314 ADRP X0, 0x507000
	0x03C3F318 LDR X0, [X0]
	0x03C3F31C BL 0x1C16D08
	0x03C3F320 MOV X1, X0
	0x03C3F324 MOV X0, X19
	0x03C3F328 BL 0x1C16DEC
	0x03C3F32C STR X30, [X31 - 0x20]!
	0x03C3F330 STP X20, X19, [X31 + 0x10]
	0x03C3F334 ADRP X20, 0x7A6000
	0x03C3F338 LDRB W8, [X20 + 0x8C3]
	0x03C3F33C MOV X19, X0
	0x03C3F340 TBNZ X8, 0x0, 0x3C3F364
	0x03C3F344 ADRP X0, 0x4B4000
	0x03C3F348 LDR X0, [X0 + 0x598]
	0x03C3F34C BL 0x1C16CF4
	0x03C3F350 ADRP X0, 0x4DB000
	0x03C3F354 LDR X0, [X0 + 0xC70]
	0x03C3F358 BL 0x1C16CF4
	0x03C3F35C MOVZ W8, 0x1
	0x03C3F360 STRB W8, [X20 + 0x8C3]
	0x03C3F364 ADRP X20, 0x7A6000
	0x03C3F368 LDR X8, [X20 + 0x928]
	0x03C3F36C CBNZ X8, 0x3C3F384
	0x03C3F370 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C3F374 ADD X0, X0, 0x470
	0x03C3F378 BL 0x1C16CB8
	0x03C3F37C MOV X8, X0
	0x03C3F380 STR X0, [X20 + 0x928]
	0x03C3F384 ADRP X20, 0x4B4000
	0x03C3F388 LDR X20, [X20 + 0x598]
	0x03C3F38C MOV X0, X19
	0x03C3F390 BLR X8
	0x03C3F394 CBZ X0, 0x3C3F3B4
	0x03C3F398 ADRP X8, 0x4DB000
	0x03C3F39C LDR X8, [X8 + 0xC70]
	0x03C3F3A0 LDR X9, [X0]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x7A7000
	007 Move W8, [X19+2229]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4DD000
	013 Move X0, [X0+1552]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2229], W8
	017 Move X19, 0x79A000
	018 Move W8, [X19+1923]
	019 Compare W8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, 0x4B5000
	022 Move X0, [X0+1440]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+1923], W8
	026 Move X8, 0x4B5000
	027 Move X8, [X8+1440]
	028 Move X20, 0x79A000
	029 Move X19, 0x4DD000
	030 Move W9, [X20+1939]
	031 Move X8, [X8]
	032 Move X8, [X8+184]
	033 Move V9, [X8]
	034 Move V8, [X8+8]
	035 Move X19, [X19+1552]
	036 Compare W9, 0
	037 JumpIfNotEqual {43}
	038 Move X0, 0x4B6000
	039 Move X0, [X0+1448]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+1939], W8
	043 Move X8, 0x4B6000
	044 Move X8, [X8+1448]
	045 Move X9, [X19]
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move X8, [X8]
	050 Move X9, [X9+184]
	051 Move X8, [X8+184]
	052 Move V0, [X8]
	053 Move [X9], D9
	054 Move [X9+8], S8
	055 Move [X9+12], V0
	056 Move D9, [X31+48]
	057 Move D8, [X31+56]
	058 Return 

