Type: UnityEngine.BoneWeight

Method: System.Single get_weight0()

Disassembly:
	0x03C1B340 LDR X1, [X20 + 0xCA0]
	0x03C1B344 MOV X19, X0

ISIL:
	001 Move V0, [X0]
	002 Return V0

Method: System.Single get_weight1()

Disassembly:
	0x03C1B348 CBNZ X1, 0x3C1B360
	0x03C1B34C ADRP X0, 0xFFFFFFFFFCF05000

ISIL:
	001 Move V0, [X0+4]
	002 Return V0

Method: System.Single get_weight2()

Disassembly:
	0x03C1B350 ADD X0, X0, 0x96C
	0x03C1B354 BL 0x1C16CB8

ISIL:
	001 Move V0, [X0+8]
	002 Return V0

Method: System.Single get_weight3()

Disassembly:
	0x03C1B358 MOV X1, X0
	0x03C1B35C STR X0, [X20 + 0xCA0]

ISIL:
	001 Move V0, [X0+12]
	002 Return V0

Method: System.Int32 get_boneIndex0()

Disassembly:
	0x03C1B360 MOV X0, X19
	0x03C1B364 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Int32 get_boneIndex1()

Disassembly:
	0x03C1B368 LDR X30, [X31], #0x20
	0x03C1B36C BR X1

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: System.Int32 get_boneIndex2()

Disassembly:
	0x03C1B370 STP X30, X19, [X31 - 0x10]!
	0x03C1B374 ADRP X19, 0x7C9000

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Int32 get_boneIndex3()

Disassembly:
	0x03C1B378 LDR X0, [X19 + 0xCA8]
	0x03C1B37C CBNZ X0, 0x3C1B390

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C1B380 ADRP X0, 0xFFFFFFFFFCEDA000
	0x03C1B384 ADD X0, X0, 0x294
	0x03C1B388 BL 0x1C16CB8
	0x03C1B38C STR X0, [X19 + 0xCA8]
	0x03C1B390 LDP X30, X19, [X31], #0x10
	0x03C1B394 BR X0
	0x03C1B398 STP X30, X19, [X31 - 0x10]!
	0x03C1B39C ADRP X19, 0x7C9000
	0x03C1B3A0 LDR X0, [X19 + 0xCB0]
	0x03C1B3A4 CBNZ X0, 0x3C1B3B8
	0x03C1B3A8 ADRP X0, 0xFFFFFFFFFCEDA000
	0x03C1B3AC ADD X0, X0, 0x2BE
	0x03C1B3B0 BL 0x1C16CB8
	0x03C1B3B4 STR X0, [X19 + 0xCB0]
	0x03C1B3B8 LDP X30, X19, [X31], #0x10
	0x03C1B3BC BR X0
	0x03C1B3C0 STR X30, [X31 - 0x60]!
	0x03C1B3C4 STP X28, X27, [X31 + 0x10]
	0x03C1B3C8 STP X26, X25, [X31 + 0x20]
	0x03C1B3CC STP X24, X23, [X31 + 0x30]
	0x03C1B3D0 STP X22, X21, [X31 + 0x40]
	0x03C1B3D4 STP X20, X19, [X31 + 0x50]
	0x03C1B3D8 ADRP X28, 0x7C9000
	0x03C1B3DC LDR X8, [X28 + 0xCB8]
	0x03C1B3E0 LDR X27, [X31 + 0x60]
	0x03C1B3E4 MOV X19, X7
	0x03C1B3E8 MOV W20, W6
	0x03C1B3EC MOV W21, W5
	0x03C1B3F0 MOV W22, W4
	0x03C1B3F4 MOV W23, W3
	0x03C1B3F8 MOV W24, W2
	0x03C1B3FC MOV W25, W1
	0x03C1B400 MOV X26, X0
	0x03C1B404 CBNZ X8, 0x3C1B41C
	0x03C1B408 ADRP X0, 0xFFFFFFFFFCF0D000
	0x03C1B40C ADD X0, X0, 0x715
	0x03C1B410 BL 0x1C16CB8
	0x03C1B414 MOV X8, X0
	0x03C1B418 STR X0, [X28 + 0xCB8]
	0x03C1B41C STR X27, [X31 + 0x60]
	0x03C1B420 MOV X0, X26
	0x03C1B424 MOV W1, W25
	0x03C1B428 MOV W2, W24
	0x03C1B42C MOV W3, W23
	0x03C1B430 MOV W4, W22
	0x03C1B434 MOV W5, W21
	0x03C1B438 MOV W6, W20
	0x03C1B43C MOV X7, X19
	0x03C1B440 LDP X20, X19, [X31 + 0x50]
	0x03C1B444 LDP X22, X21, [X31 + 0x40]
	0x03C1B448 LDP X24, X23, [X31 + 0x30]
	0x03C1B44C LDP X26, X25, [X31 + 0x20]
	0x03C1B450 LDP X28, X27, [X31 + 0x10]
	0x03C1B454 LDR X30, [X31], #0x60
	0x03C1B458 BR X8
	0x03C1B45C SUB X31, X31, 0x70
	0x03C1B460 STR X30, [X31 + 0x10]
	0x03C1B464 STP X28, X27, [X31 + 0x20]
	0x03C1B468 STP X26, X25, [X31 + 0x30]
	0x03C1B46C STP X24, X23, [X31 + 0x40]
	0x03C1B470 STP X22, X21, [X31 + 0x50]
	0x03C1B474 STP X20, X19, [X31 + 0x60]
	0x03C1B478 ADRP X28, 0x7C9000
	0x03C1B47C LDR X8, [X28 + 0xCB8]
	0x03C1B480 LDR X27, [X31 + 0x70]
	0x03C1B484 MOV X19, X7

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move W8, [X0+16]
	011 Move X19, X0
	012 Add X0, X31, 12
	013 Move X1, X31
	014 Move [X31+8], W31
	015 Move [X31+12], W8
	016 Call Int32.GetHashCode, X0
	017 Move W8, [X19+20]
	018 Move W20, W0
	019 Add X0, X31, 12
	020 Move X1, X31
	021 Move [X31+12], W8
	022 Call Int32.GetHashCode, X0
	023 Move W8, [X19+24]
	024 Move W21, W0
	025 Add X0, X31, 12
	026 Move X1, X31
	027 Move [X31+12], W8
	028 Call Int32.GetHashCode, X0
	029 Move W8, [X19+28]
	030 Move W22, W0
	031 Add X0, X31, 12
	032 Move X1, X31
	033 Move [X31+12], W8
	034 Call Int32.GetHashCode, X0
	035 Move V0, [X19]
	036 Move W23, W0
	037 Add X0, X31, 8
	038 Move X1, X31
	039 Move [X31+8], S0
	040 Call Single.GetHashCode, X0
	041 Move V0, [X19+4]
	042 Move W24, W0
	043 Add X0, X31, 8
	044 Move X1, X31
	045 Move [X31+8], S0
	046 Call Single.GetHashCode, X0
	047 Move V0, [X19+8]
	048 Move W25, W0
	049 Add X0, X31, 8
	050 Move X1, X31
	051 Move [X31+8], S0
	052 Call Single.GetHashCode, X0
	053 Move V0, [X19+12]
	054 Move W26, W0
	055 Add X0, X31, 8
	056 Move X1, X31
	057 Move [X31+8], S0
	058 Call Single.GetHashCode, X0
	059 Xor W8, W20, W21
	060 Xor W8, W8, W22
	061 Xor W8, W8, W23
	062 Xor W8, W8, W24
	063 Xor W8, W8, W25
	064 Xor W8, W8, W26
	065 Move X20, [X31+64]
	066 Move X19, [X31+72]
	067 Move X22, [X31+48]
	068 Move X21, [X31+56]
	069 Move X24, [X31+32]
	070 Move X23, [X31+40]
	071 Move X26, [X31+16]
	072 Move X25, [X31+24]
	073 Xor W0, W8, W0
	074 Move X30, [X31+80]
	075 Return X0

Method: System.Boolean Equals(System.Object other)

Disassembly:
	0x03C1B488 MOV W20, W6
	0x03C1B48C MOV W21, W5
	0x03C1B490 MOV W22, W4
	0x03C1B494 MOV W23, W3
	0x03C1B498 MOV W24, W2
	0x03C1B49C MOV W25, W1
	0x03C1B4A0 MOV X26, X0
	0x03C1B4A4 CBNZ X8, 0x3C1B4BC
	0x03C1B4A8 ADRP X0, 0xFFFFFFFFFCF0D000
	0x03C1B4AC ADD X0, X0, 0x715
	0x03C1B4B0 BL 0x1C16CB8
	0x03C1B4B4 MOV X8, X0
	0x03C1B4B8 STR X0, [X28 + 0xCB8]
	0x03C1B4BC MOV X0, X26
	0x03C1B4C0 MOV W1, W25
	0x03C1B4C4 MOV W2, W24
	0x03C1B4C8 MOV W3, W23
	0x03C1B4CC MOV W4, W22
	0x03C1B4D0 MOV W5, W21
	0x03C1B4D4 MOV W6, W20
	0x03C1B4D8 MOV X7, X19
	0x03C1B4DC STR X27, [X31]
	0x03C1B4E0 BLR X8
	0x03C1B4E4 TBZ X0, 0x0, 0x3C1B508
	0x03C1B4E8 LDP X20, X19, [X31 + 0x60]
	0x03C1B4EC LDP X22, X21, [X31 + 0x50]
	0x03C1B4F0 LDP X24, X23, [X31 + 0x40]
	0x03C1B4F4 LDP X26, X25, [X31 + 0x30]
	0x03C1B4F8 LDP X28, X27, [X31 + 0x20]
	0x03C1B4FC LDR X30, [X31 + 0x10]
	0x03C1B500 ADD X31, X31, 0x70
	0x03C1B504 RET
	0x03C1B508 ADRP X0, 0x501000
	0x03C1B50C LDR X0, [X0 + 0x1D0]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x7CA000
	007 Move W8, [X21+3056]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x544000
	015 Move X0, [X0+4080]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3056], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x544000
	022 Move X8, [X8+4080]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move V0, [X0]
	030 Move V1, [X0+16]
	031 Add X1, X31, 0
	032 Move X0, X19
	033 Move [X31], V0
	034 Move [X31+8], V1
	035 Call BoneWeight.Equals, X0, X1
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 And W0, W0, 1
	041 Add X31, X31, 64
	042 Return X0

Method: System.Boolean Equals(UnityEngine.BoneWeight other)

Disassembly:
	0x03C1B510 BL 0x1C16D08
	0x03C1B514 BL 0x1C16F10
	0x03C1B518 MOV X19, X0
	0x03C1B51C ADRP X0, 0x544000
	0x03C1B520 LDR X0, [X0 + 0x50]
	0x03C1B524 BL 0x1C16D08
	0x03C1B528 MOV X1, X0
	0x03C1B52C MOV X0, X19
	0x03C1B530 MOV X2, X31
	0x03C1B534 BL 0x3C363D0
	0x03C1B538 ADRP X0, 0x544000
	0x03C1B53C LDR X0, [X0 + 0x58]
	0x03C1B540 BL 0x1C16D08
	0x03C1B544 MOV X1, X0
	0x03C1B548 MOV X0, X19
	0x03C1B54C BL 0x1C16DEC
	0x03C1B550 STR X30, [X31 - 0x20]!
	0x03C1B554 STP X20, X19, [X31 + 0x10]
	0x03C1B558 ADRP X20, 0x7C9000
	0x03C1B55C LDR X1, [X20 + 0xCC0]
	0x03C1B560 MOV X19, X0
	0x03C1B564 CBNZ X1, 0x3C1B57C
	0x03C1B568 ADRP X0, 0xFFFFFFFFFCF0F000
	0x03C1B56C ADD X0, X0, 0x767
	0x03C1B570 BL 0x1C16CB8
	0x03C1B574 MOV X1, X0
	0x03C1B578 STR X0, [X20 + 0xCC0]
	0x03C1B57C MOV X0, X19
	0x03C1B580 LDP X20, X19, [X31 + 0x10]
	0x03C1B584 LDR X30, [X31], #0x20
	0x03C1B588 BR X1
	0x03C1B58C STR X30, [X31 - 0x30]!
	0x03C1B590 STP X22, X21, [X31 + 0x10]
	0x03C1B594 STP X20, X19, [X31 + 0x20]
	0x03C1B598 ADRP X22, 0x7C9000
	0x03C1B59C LDR X3, [X22 + 0xCC8]
	0x03C1B5A0 MOV W19, W2
	0x03C1B5A4 MOV W20, W1
	0x03C1B5A8 MOV X21, X0
	0x03C1B5AC CBNZ X3, 0x3C1B5C4
	0x03C1B5B0 ADRP X0, 0xFFFFFFFFFCF0F000
	0x03C1B5B4 ADD X0, X0, 0x78F
	0x03C1B5B8 BL 0x1C16CB8
	0x03C1B5BC MOV X3, X0
	0x03C1B5C0 STR X0, [X22 + 0xCC8]
	0x03C1B5C4 AND W1, W20, 0x1
	0x03C1B5C8 AND W2, W19, 0x1
	0x03C1B5CC MOV X0, X21
	0x03C1B5D0 LDP X20, X19, [X31 + 0x20]
	0x03C1B5D4 LDP X22, X21, [X31 + 0x10]
	0x03C1B5D8 LDR X30, [X31], #0x30
	0x03C1B5DC BR X3
	0x03C1B5E0 STR X30, [X31 - 0x30]!
	0x03C1B5E4 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+16]
	005 Move X20, X1
	006 Move X19, X0
	007 Add X0, X31, 12
	008 Move [X31+12], W8
	009 Move W1, [X1+16]
	010 Move X2, X31
	011 Call Int32.Equals, X0, X1
	012 Move TEMP, X0
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfNotEqual {60}
	016 Move W8, [X19+20]
	017 Add X0, X31, 12
	018 Move X2, X31
	019 Move [X31+12], W8
	020 Move W1, [X20+20]
	021 Call Int32.Equals, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {60}
	026 Move W8, [X19+24]
	027 Add X0, X31, 12
	028 Move X2, X31
	029 Move [X31+12], W8
	030 Move W1, [X20+24]
	031 Call Int32.Equals, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {60}
	036 Move W8, [X19+28]
	037 Add X0, X31, 12
	038 Move X2, X31
	039 Move [X31+12], W8
	040 Move W1, [X20+28]
	041 Call Int32.Equals, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {60}
	046 Move V0, [X19]
	047 Move V1, [X20]
	048 Move W0, W31
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 Move V0, [X19+4]
	051 Move V1, [X20+4]
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Move V0, [X19+8]
	054 Move V1, [X20+8]
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move V0, [X20+12]
	057 Move V1, [X19+12]
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 NotImplemented "Instruction CSET not yet implemented."
	060 Move W0, W31
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Return X0

