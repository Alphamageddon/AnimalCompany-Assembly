Type: UnityEngine.Rendering.RendererListParams

Method: System.Int32 get_numStateBlocks()

Disassembly:
	0x03C57994 BL 0x1C16CF4
	0x03C57998 MOVZ W8, 0x1
	0x03C5799C STRB W8, [X22 + 0xD2]
	0x03C579A0 LDR X0, [X23]
	0x03C579A4 LDR W8, [X0 + 0xE0]
	0x03C579A8 CBNZ W8, 0x3C579B0
	0x03C579AC BL 0x1C16DFC
	0x03C579B0 ADRP X22, 0x78F000
	0x03C579B4 LDR X3, [X22 + 0x120]
	0x03C579B8 CBNZ X3, 0x3C579D0
	0x03C579BC ADRP X0, 0xFFFFFFFFFCEA0000
	0x03C579C0 ADD X0, X0, 0x781
	0x03C579C4 BL 0x1C16CB8
	0x03C579C8 MOV X3, X0
	0x03C579CC STR X0, [X22 + 0x120]
	0x03C579D0 MOV X0, X21
	0x03C579D4 MOV X1, X20
	0x03C579D8 MOV X2, X19
	0x03C579DC LDP X20, X19, [X31 + 0x20]
	0x03C579E0 LDP X22, X21, [X31 + 0x10]
	0x03C579E4 LDP X30, X23, [X31], #0x30
	0x03C579E8 BR X3
	0x03C579EC STR X30, [X31 - 0x30]!
	0x03C579F0 STP X22, X21, [X31 + 0x10]
	0x03C579F4 STP X20, X19, [X31 + 0x20]
	0x03C579F8 ADRP X22, 0x78F000
	0x03C579FC LDR X3, [X22 + 0x120]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x790000
	005 Move W8, [X20+144]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x509000
	012 Move X0, [X0+3568]
	013 Call 0x1C17CF4
	014 Move X0, 0x509000
	015 Move X0, [X0+3576]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+144], W8
	019 Add X19, X19, 248
	020 Move W8, [X19]
	021 Compare W8, 0
	022 JumpIfEqual {29}
	023 Move X8, 0x509000
	024 Move X8, [X8+3576]
	025 Move X0, X19
	026 Move X1, [X8]
	027 Call Nullable`1<NativeArray`1<ShaderTagId>>.get_Value, X0
	028 Move X0, X1
	029 Move W0, W31
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return X0

Method: System.IntPtr get_stateBlocksPtr()

Disassembly:
	0x03C57A00 MOV X19, X2
	0x03C57A04 MOV X20, X1
	0x03C57A08 MOV X21, X0
	0x03C57A0C CBNZ X3, 0x3C57A24
	0x03C57A10 ADRP X0, 0xFFFFFFFFFCEA0000
	0x03C57A14 ADD X0, X0, 0x781
	0x03C57A18 BL 0x1C16CB8
	0x03C57A1C MOV X3, X0
	0x03C57A20 STR X0, [X22 + 0x120]
	0x03C57A24 MOV X0, X21
	0x03C57A28 MOV X1, X20
	0x03C57A2C MOV X2, X19
	0x03C57A30 LDP X20, X19, [X31 + 0x20]
	0x03C57A34 LDP X22, X21, [X31 + 0x10]
	0x03C57A38 LDR X30, [X31], #0x30
	0x03C57A3C BR X3
	0x03C57A40 SUB X31, X31, 0x60
	0x03C57A44 STP X30, X27, [X31 + 0x10]
	0x03C57A48 STP X26, X25, [X31 + 0x20]
	0x03C57A4C STP X24, X23, [X31 + 0x30]
	0x03C57A50 STP X22, X21, [X31 + 0x40]
	0x03C57A54 STP X20, X19, [X31 + 0x50]
	0x03C57A58 ADRP X26, 0x78F000
	0x03C57A5C STR W4, [X31 + 0x8]
	0x03C57A60 ADRP X27, 0x4F9000
	0x03C57A64 LDRB W8, [X26 + 0xD3]
	0x03C57A68 LDR X27, [X27 + 0xC80]
	0x03C57A6C MOV X19, X7
	0x03C57A70 MOV X20, X6
	0x03C57A74 MOV W25, W5
	0x03C57A78 MOV X21, X3
	0x03C57A7C MOV X22, X2
	0x03C57A80 MOV X23, X1
	0x03C57A84 MOV X24, X0
	0x03C57A88 TBNZ X8, 0x0, 0x3C57AA0
	0x03C57A8C ADRP X0, 0x4F9000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x790000
	005 Move W8, [X20+145]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x509000
	012 Move X0, [X0+3584]
	013 Call 0x1C17CF4
	014 Move X0, 0x509000
	015 Move X0, [X0+3592]
	016 Call 0x1C17CF4
	017 Move X0, 0x509000
	018 Move X0, [X0+3600]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+145], W8
	022 Move W8, [X19+272]
	023 Compare W8, 0
	024 JumpIfEqual {40}
	025 Move X8, 0x509000
	026 Move X8, [X8+3600]
	027 Move X20, 0x509000
	028 Add X0, X19, 272
	029 Move X1, [X8]
	030 Move X20, [X20+3584]
	031 Call Nullable`1<NativeArray`1<RenderStateBlock>>.get_Value, X0
	032 Move X2, [X20]
	033 Call NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+32]
	038 Call IntPtr.op_Explicit, X0
	039 Return X0
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X0, X31
	043 Move X30, [X31+32]
	044 Return X0

Method: System.IntPtr get_tagsValuePtr()

Disassembly:
	0x03C57A90 LDR X0, [X0 + 0xC80]
	0x03C57A94 BL 0x1C16CF4
	0x03C57A98 MOVZ W8, 0x1
	0x03C57A9C STRB W8, [X26 + 0xD3]
	0x03C57AA0 LDR X0, [X27]
	0x03C57AA4 LDR W8, [X0 + 0xE0]
	0x03C57AA8 CBNZ W8, 0x3C57AB0
	0x03C57AAC BL 0x1C16DFC
	0x03C57AB0 ADRP X27, 0x78F000
	0x03C57AB4 LDR X8, [X27 + 0x128]
	0x03C57AB8 LDR W26, [X31 + 0x60]
	0x03C57ABC CBNZ X8, 0x3C57AD4
	0x03C57AC0 ADRP X0, 0xFFFFFFFFFCE98000
	0x03C57AC4 ADD X0, X0, 0x419
	0x03C57AC8 BL 0x1C16CB8
	0x03C57ACC MOV X8, X0
	0x03C57AD0 STR X0, [X27 + 0x128]
	0x03C57AD4 AND W5, W25, 0x1
	0x03C57AD8 ADD X4, X31, 0x8
	0x03C57ADC MOV X0, X24
	0x03C57AE0 MOV X1, X23
	0x03C57AE4 MOV X2, X22
	0x03C57AE8 MOV X3, X21
	0x03C57AEC MOV X6, X20
	0x03C57AF0 MOV X7, X19
	0x03C57AF4 STR W26, [X31]
	0x03C57AF8 BLR X8
	0x03C57AFC LDP X20, X19, [X31 + 0x50]
	0x03C57B00 LDP X22, X21, [X31 + 0x40]
	0x03C57B04 LDP X24, X23, [X31 + 0x30]
	0x03C57B08 LDP X26, X25, [X31 + 0x20]
	0x03C57B0C LDP X30, X27, [X31 + 0x10]
	0x03C57B10 ADD X31, X31, 0x60
	0x03C57B14 RET
	0x03C57B18 STR X30, [X31 - 0x60]!
	0x03C57B1C STP X28, X27, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x790000
	005 Move W8, [X20+146]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x509000
	012 Move X0, [X0+3608]
	013 Call 0x1C17CF4
	014 Move X0, 0x509000
	015 Move X0, [X0+3568]
	016 Call 0x1C17CF4
	017 Move X0, 0x509000
	018 Move X0, [X0+3576]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+146], W8
	022 Add X19, X19, 248
	023 Move W8, [X19]
	024 Compare W8, 0
	025 JumpIfEqual {41}
	026 Move X8, 0x509000
	027 Move X8, [X8+3576]
	028 Move X20, 0x509000
	029 Move X0, X19
	030 Move X1, [X8]
	031 Move X20, [X20+3608]
	032 Call Nullable`1<NativeArray`1<ShaderTagId>>.get_Value, X0
	033 Move X2, [X20]
	034 Call NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Call IntPtr.op_Explicit, X0
	040 Return X0
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X0, X31
	044 Move X30, [X31+32]
	045 Return X0

Method: System.Void Dispose()

Disassembly:
	0x03C57B20 STP X26, X25, [X31 + 0x20]
	0x03C57B24 STP X24, X23, [X31 + 0x30]
	0x03C57B28 STP X22, X21, [X31 + 0x40]
	0x03C57B2C STP X20, X19, [X31 + 0x50]
	0x03C57B30 ADRP X28, 0x78F000
	0x03C57B34 LDR X8, [X28 + 0x128]
	0x03C57B38 LDR W27, [X31 + 0x60]
	0x03C57B3C MOV X19, X7
	0x03C57B40 MOV X20, X6
	0x03C57B44 MOV W24, W5
	0x03C57B48 MOV X21, X4
	0x03C57B4C MOV X22, X3
	0x03C57B50 MOV X23, X2
	0x03C57B54 MOV X25, X1
	0x03C57B58 MOV X26, X0
	0x03C57B5C CBNZ X8, 0x3C57B74
	0x03C57B60 ADRP X0, 0xFFFFFFFFFCE98000
	0x03C57B64 ADD X0, X0, 0x419
	0x03C57B68 BL 0x1C16CB8
	0x03C57B6C MOV X8, X0
	0x03C57B70 STR X0, [X28 + 0x128]
	0x03C57B74 AND W5, W24, 0x1
	0x03C57B78 STR W27, [X31 + 0x60]
	0x03C57B7C MOV X0, X26
	0x03C57B80 MOV X1, X25
	0x03C57B84 MOV X2, X23
	0x03C57B88 MOV X3, X22
	0x03C57B8C MOV X4, X21
	0x03C57B90 MOV X6, X20
	0x03C57B94 MOV X7, X19
	0x03C57B98 LDP X20, X19, [X31 + 0x50]
	0x03C57B9C LDP X22, X21, [X31 + 0x40]
	0x03C57BA0 LDP X24, X23, [X31 + 0x30]
	0x03C57BA4 LDP X26, X25, [X31 + 0x20]
	0x03C57BA8 LDP X28, X27, [X31 + 0x10]
	0x03C57BAC LDR X30, [X31], #0x60
	0x03C57BB0 BR X8
	0x03C57BB4 STR X30, [X31 - 0x30]!
	0x03C57BB8 STP X22, X21, [X31 + 0x10]
	0x03C57BBC STP X20, X19, [X31 + 0x20]
	0x03C57BC0 ADRP X21, 0x78F000
	0x03C57BC4 ADRP X22, 0x4F9000
	0x03C57BC8 LDRB W8, [X21 + 0xD4]
	0x03C57BCC LDR X22, [X22 + 0xC80]
	0x03C57BD0 MOV X19, X1
	0x03C57BD4 MOV X20, X0
	0x03C57BD8 TBNZ X8, 0x0, 0x3C57BF0
	0x03C57BDC ADRP X0, 0x4F9000
	0x03C57BE0 LDR X0, [X0 + 0xC80]
	0x03C57BE4 BL 0x1C16CF4
	0x03C57BE8 MOVZ W8, 0x1
	0x03C57BEC STRB W8, [X21 + 0xD4]
	0x03C57BF0 LDR X0, [X22]
	0x03C57BF4 LDR W8, [X0 + 0xE0]
	0x03C57BF8 CBNZ W8, 0x3C57C00
	0x03C57BFC BL 0x1C16DFC
	0x03C57C00 ADRP X21, 0x78F000
	0x03C57C04 LDR X2, [X21 + 0x130]
	0x03C57C08 CBNZ X2, 0x3C57C20
	0x03C57C0C ADRP X0, 0xFFFFFFFFFCED5000
	0x03C57C10 ADD X0, X0, 0xB82
	0x03C57C14 BL 0x1C16CB8
	0x03C57C18 MOV X2, X0
	0x03C57C1C STR X0, [X21 + 0x130]
	0x03C57C20 MOV X0, X20
	0x03C57C24 MOV X1, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X20, 0x790000
	007 Move W8, [X20+147]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0x502000
	014 Move X0, [X0+120]
	015 Call 0x1C17CF4
	016 Move X0, 0x502000
	017 Move X0, [X0+128]
	018 Call 0x1C17CF4
	019 Move X0, 0x509000
	020 Move X0, [X0+3568]
	021 Call 0x1C17CF4
	022 Move X0, 0x509000
	023 Move X0, [X0+3592]
	024 Call 0x1C17CF4
	025 Move X0, 0x509000
	026 Move X0, [X0+3600]
	027 Call 0x1C17CF4
	028 Move X0, 0x509000
	029 Move X0, [X0+3576]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+147], W8
	033 Move [X31+16], X31
	034 Move [X31+24], X31
	035 Move [X31], X31
	036 Move [X31+8], X31
	037 Move W8, [X19+272]
	038 Compare W8, 0
	039 JumpIfEqual {57}
	040 Move X8, 0x509000
	041 Move X8, [X8+3600]
	042 Move X21, 0x502000
	043 Add X20, X19, 272
	044 Move X0, X20
	045 Move X1, [X8]
	046 Move X21, [X21+120]
	047 Call Nullable`1<NativeArray`1<RenderStateBlock>>.get_Value, X0
	048 Move X8, [X21]
	049 Move [X31+16], X0
	050 Move [X31+24], X1
	051 Add X0, X31, 16
	052 Move X1, X8
	053 Call NativeArray`1<RenderStateBlock>.Dispose, X0
	054 Move [X20], X31
	055 Move [X20+8], X31
	056 Move [X20+16], X31
	057 Add X19, X19, 248
	058 Move W8, [X19]
	059 Compare W8, 0
	060 JumpIfEqual {77}
	061 Move X8, 0x509000
	062 Move X8, [X8+3576]
	063 Move X20, 0x502000
	064 Move X0, X19
	065 Move X1, [X8]
	066 Move X20, [X20+128]
	067 Call Nullable`1<NativeArray`1<ShaderTagId>>.get_Value, X0
	068 Move X8, [X20]
	069 Move [X31], X0
	070 Move [X31+8], X1
	071 Add X0, X31, 0
	072 Move X1, X8
	073 Call NativeArray`1<ShaderTagId>.Dispose, X0
	074 Move [X19], X31
	075 Move [X19+8], X31
	076 Move [X19+16], X31
	077 Move X20, [X31+48]
	078 Move X19, [X31+56]
	079 Move X30, [X31+32]
	080 Move X21, [X31+40]
	081 Add X31, X31, 64
	082 Return 

Method: System.Void Validate()

Disassembly:
	0x03C57C28 LDP X20, X19, [X31 + 0x20]
	0x03C57C2C LDP X22, X21, [X31 + 0x10]
	0x03C57C30 LDR X30, [X31], #0x30
	0x03C57C34 BR X2
	0x03C57C38 STP X30, X21, [X31 - 0x20]!
	0x03C57C3C STP X20, X19, [X31 + 0x10]
	0x03C57C40 ADRP X21, 0x78F000
	0x03C57C44 LDR X2, [X21 + 0x130]
	0x03C57C48 MOV X19, X1
	0x03C57C4C MOV X20, X0
	0x03C57C50 CBNZ X2, 0x3C57C68
	0x03C57C54 ADRP X0, 0xFFFFFFFFFCED5000
	0x03C57C58 ADD X0, X0, 0xB82
	0x03C57C5C BL 0x1C16CB8
	0x03C57C60 MOV X2, X0
	0x03C57C64 STR X0, [X21 + 0x130]
	0x03C57C68 MOV X0, X20
	0x03C57C6C MOV X1, X19
	0x03C57C70 LDP X20, X19, [X31 + 0x10]
	0x03C57C74 LDP X30, X21, [X31], #0x20
	0x03C57C78 BR X2
	0x03C57C7C STR X30, [X31 - 0x20]!
	0x03C57C80 STP X20, X19, [X31 + 0x10]
	0x03C57C84 ADRP X20, 0x78F000
	0x03C57C88 LDR X1, [X20 + 0xD8]
	0x03C57C8C MOV X19, X0
	0x03C57C90 CBNZ X1, 0x3C57CA8
	0x03C57C94 ADRP X0, 0xFFFFFFFFFCE9E000
	0x03C57C98 ADD X0, X0, 0x695
	0x03C57C9C BL 0x1C16CB8
	0x03C57CA0 MOV X1, X0
	0x03C57CA4 STR X0, [X20 + 0xD8]
	0x03C57CA8 MOV X0, X19
	0x03C57CAC LDP X20, X19, [X31 + 0x10]
	0x03C57CB0 LDR X30, [X31], #0x20
	0x03C57CB4 BR X1
	0x03C57CB8 STR X30, [X31 - 0x30]!
	0x03C57CBC STP X22, X21, [X31 + 0x10]
	0x03C57CC0 STP X20, X19, [X31 + 0x20]
	0x03C57CC4 ADRP X21, 0x78F000
	0x03C57CC8 ADRP X22, 0x4F9000
	0x03C57CCC LDRB W8, [X21 + 0xE0]
	0x03C57CD0 LDR X22, [X22 + 0xC80]
	0x03C57CD4 MOV X19, X1
	0x03C57CD8 MOV X20, X0
	0x03C57CDC TBNZ X8, 0x0, 0x3C57CF4
	0x03C57CE0 ADRP X0, 0x4F9000
	0x03C57CE4 LDR X0, [X0 + 0xC80]
	0x03C57CE8 BL 0x1C16CF4
	0x03C57CEC MOVZ W8, 0x1
	0x03C57CF0 STRB W8, [X21 + 0xE0]
	0x03C57CF4 LDR X0, [X22]
	0x03C57CF8 LDR W8, [X0 + 0xE0]
	0x03C57CFC CBNZ W8, 0x3C57D04
	0x03C57D00 BL 0x1C16DFC
	0x03C57D04 ADRP X21, 0x78F000
	0x03C57D08 LDR X2, [X21 + 0x138]
	0x03C57D0C CBNZ X2, 0x3C57D24
	0x03C57D10 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C57D14 ADD X0, X0, 0x1C6
	0x03C57D18 BL 0x1C16CB8
	0x03C57D1C MOV X2, X0
	0x03C57D20 STR X0, [X21 + 0x138]
	0x03C57D24 MOV X0, X20
	0x03C57D28 MOV X1, X19
	0x03C57D2C LDP X20, X19, [X31 + 0x20]
	0x03C57D30 LDP X22, X21, [X31 + 0x10]
	0x03C57D34 LDR X30, [X31], #0x30
	0x03C57D38 BR X2
	0x03C57D3C STP X30, X21, [X31 - 0x20]!
	0x03C57D40 STP X20, X19, [X31 + 0x10]
	0x03C57D44 ADRP X21, 0x78F000
	0x03C57D48 LDR X2, [X21 + 0x138]
	0x03C57D4C MOV X19, X1
	0x03C57D50 MOV X20, X0
	0x03C57D54 CBNZ X2, 0x3C57D6C
	0x03C57D58 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C57D5C ADD X0, X0, 0x1C6
	0x03C57D60 BL 0x1C16CB8
	0x03C57D64 MOV X2, X0
	0x03C57D68 STR X0, [X21 + 0x138]
	0x03C57D6C MOV X0, X20
	0x03C57D70 MOV X1, X19
	0x03C57D74 LDP X20, X19, [X31 + 0x10]
	0x03C57D78 LDP X30, X21, [X31], #0x20
	0x03C57D7C BR X2
	0x03C57D80 STP X30, X23, [X31 - 0x30]!
	0x03C57D84 STP X22, X21, [X31 + 0x10]
	0x03C57D88 STP X20, X19, [X31 + 0x20]
	0x03C57D8C ADRP X22, 0x78F000
	0x03C57D90 ADRP X23, 0x4F9000
	0x03C57D94 LDRB W8, [X22 + 0xE1]
	0x03C57D98 LDR X23, [X23 + 0xC80]
	0x03C57D9C MOV W19, W2
	0x03C57DA0 MOV X20, X1
	0x03C57DA4 MOV X21, X0
	0x03C57DA8 TBNZ X8, 0x0, 0x3C57DC0
	0x03C57DAC ADRP X0, 0x4F9000
	0x03C57DB0 LDR X0, [X0 + 0xC80]
	0x03C57DB4 BL 0x1C16CF4
	0x03C57DB8 MOVZ W8, 0x1
	0x03C57DBC STRB W8, [X22 + 0xE1]
	0x03C57DC0 LDR X0, [X23]
	0x03C57DC4 LDR W8, [X0 + 0xE0]
	0x03C57DC8 CBNZ W8, 0x3C57DD0
	0x03C57DCC BL 0x1C16DFC
	0x03C57DD0 ADRP X22, 0x78F000
	0x03C57DD4 LDR X3, [X22 + 0x140]
	0x03C57DD8 CBNZ X3, 0x3C57DF0
	0x03C57DDC ADRP X0, 0xFFFFFFFFFCEAA000
	0x03C57DE0 ADD X0, X0, 0x3CE
	0x03C57DE4 BL 0x1C16CB8
	0x03C57DE8 MOV X3, X0
	0x03C57DEC STR X0, [X22 + 0x140]
	0x03C57DF0 MOV X0, X21
	0x03C57DF4 MOV X1, X20
	0x03C57DF8 MOV W2, W19
	0x03C57DFC LDP X20, X19, [X31 + 0x20]
	0x03C57E00 LDP X22, X21, [X31 + 0x10]
	0x03C57E04 LDP X30, X23, [X31], #0x30
	0x03C57E08 BR X3
	0x03C57E0C STR X30, [X31 - 0x30]!
	0x03C57E10 STP X22, X21, [X31 + 0x10]
	0x03C57E14 STP X20, X19, [X31 + 0x20]
	0x03C57E18 ADRP X22, 0x78F000
	0x03C57E1C LDR X3, [X22 + 0x140]
	0x03C57E20 MOV W19, W2
	0x03C57E24 MOV X20, X1
	0x03C57E28 MOV X21, X0
	0x03C57E2C CBNZ X3, 0x3C57E44
	0x03C57E30 ADRP X0, 0xFFFFFFFFFCEAA000
	0x03C57E34 ADD X0, X0, 0x3CE
	0x03C57E38 BL 0x1C16CB8
	0x03C57E3C MOV X3, X0
	0x03C57E40 STR X0, [X22 + 0x140]
	0x03C57E44 MOV X0, X21
	0x03C57E48 MOV X1, X20
	0x03C57E4C MOV W2, W19
	0x03C57E50 LDP X20, X19, [X31 + 0x20]
	0x03C57E54 LDP X22, X21, [X31 + 0x10]
	0x03C57E58 LDR X30, [X31], #0x30
	0x03C57E5C BR X3
	0x03C57E60 STR X30, [X31 - 0x40]!
	0x03C57E64 STP X24, X23, [X31 + 0x10]
	0x03C57E68 STP X22, X21, [X31 + 0x20]
	0x03C57E6C STP X20, X19, [X31 + 0x30]
	0x03C57E70 ADRP X23, 0x78F000
	0x03C57E74 ADRP X24, 0x4F9000
	0x03C57E78 LDRB W8, [X23 + 0xE2]
	0x03C57E7C LDR X24, [X24 + 0xC80]
	0x03C57E80 MOV W19, W3
	0x03C57E84 MOV W21, W2
	0x03C57E88 MOV X20, X1
	0x03C57E8C MOV X22, X0
	0x03C57E90 TBNZ X8, 0x0, 0x3C57EA8
	0x03C57E94 ADRP X0, 0x4F9000
	0x03C57E98 LDR X0, [X0 + 0xC80]
	0x03C57E9C BL 0x1C16CF4
	0x03C57EA0 MOVZ W8, 0x1
	0x03C57EA4 STRB W8, [X23 + 0xE2]
	0x03C57EA8 LDR X0, [X24]
	0x03C57EAC LDR W8, [X0 + 0xE0]
	0x03C57EB0 CBNZ W8, 0x3C57EB8
	0x03C57EB4 BL 0x1C16DFC
	0x03C57EB8 ADRP X23, 0x78F000
	0x03C57EBC LDR X4, [X23 + 0x148]
	0x03C57EC0 CBNZ X4, 0x3C57ED8
	0x03C57EC4 ADRP X0, 0xFFFFFFFFFCEA0000
	0x03C57EC8 ADD X0, X0, 0x817
	0x03C57ECC BL 0x1C16CB8
	0x03C57ED0 MOV X4, X0
	0x03C57ED4 STR X0, [X23 + 0x148]
	0x03C57ED8 AND W2, W21, 0x1
	0x03C57EDC MOV X0, X22
	0x03C57EE0 MOV X1, X20
	0x03C57EE4 MOV W3, W19
	0x03C57EE8 LDP X20, X19, [X31 + 0x30]
	0x03C57EEC LDP X22, X21, [X31 + 0x20]
	0x03C57EF0 LDP X24, X23, [X31 + 0x10]
	0x03C57EF4 LDR X30, [X31], #0x40
	0x03C57EF8 BR X4
	0x03C57EFC STP X30, X23, [X31 - 0x30]!
	0x03C57F00 STP X22, X21, [X31 + 0x10]
	0x03C57F04 STP X20, X19, [X31 + 0x20]
	0x03C57F08 ADRP X23, 0x78F000
	0x03C57F0C LDR X4, [X23 + 0x148]
	0x03C57F10 MOV W19, W3
	0x03C57F14 MOV W21, W2
	0x03C57F18 MOV X20, X1
	0x03C57F1C MOV X22, X0
	0x03C57F20 CBNZ X4, 0x3C57F38
	0x03C57F24 ADRP X0, 0xFFFFFFFFFCEA0000
	0x03C57F28 ADD X0, X0, 0x817
	0x03C57F2C BL 0x1C16CB8
	0x03C57F30 MOV X4, X0
	0x03C57F34 STR X0, [X23 + 0x148]
	0x03C57F38 AND W2, W21, 0x1
	0x03C57F3C MOV X0, X22
	0x03C57F40 MOV X1, X20
	0x03C57F44 MOV W3, W19
	0x03C57F48 LDP X20, X19, [X31 + 0x20]
	0x03C57F4C LDP X22, X21, [X31 + 0x10]
	0x03C57F50 LDP X30, X23, [X31], #0x30
	0x03C57F54 BR X4
	0x03C57F58 STP X30, X21, [X31 - 0x20]!
	0x03C57F5C STP X20, X19, [X31 + 0x10]
	0x03C57F60 ADRP X20, 0x78F000
	0x03C57F64 ADRP X21, 0x4F9000
	0x03C57F68 LDRB W8, [X20 + 0xE3]
	0x03C57F6C LDR X21, [X21 + 0xC80]
	0x03C57F70 MOV X19, X0
	0x03C57F74 TBNZ X8, 0x0, 0x3C57F8C
	0x03C57F78 ADRP X0, 0x4F9000
	0x03C57F7C LDR X0, [X0 + 0xC80]
	0x03C57F80 BL 0x1C16CF4
	0x03C57F84 MOVZ W8, 0x1
	0x03C57F88 STRB W8, [X20 + 0xE3]
	0x03C57F8C LDR X0, [X21]
	0x03C57F90 LDR W8, [X0 + 0xE0]
	0x03C57F94 CBNZ W8, 0x3C57F9C
	0x03C57F98 BL 0x1C16DFC
	0x03C57F9C ADRP X20, 0x78F000
	0x03C57FA0 LDR X1, [X20 + 0x150]
	0x03C57FA4 CBNZ X1, 0x3C57FBC
	0x03C57FA8 ADRP X0, 0xFFFFFFFFFCEB4000
	0x03C57FAC ADD X0, X0, 0x766
	0x03C57FB0 BL 0x1C16CB8
	0x03C57FB4 MOV X1, X0
	0x03C57FB8 STR X0, [X20 + 0x150]
	0x03C57FBC MOV X0, X19
	0x03C57FC0 LDP X20, X19, [X31 + 0x10]
	0x03C57FC4 LDP X30, X21, [X31], #0x20
	0x03C57FC8 BR X1
	0x03C57FCC STR X30, [X31 - 0x20]!
	0x03C57FD0 STP X20, X19, [X31 + 0x10]
	0x03C57FD4 ADRP X20, 0x78F000
	0x03C57FD8 LDR X1, [X20 + 0x150]
	0x03C57FDC MOV X19, X0
	0x03C57FE0 CBNZ X1, 0x3C57FF8
	0x03C57FE4 ADRP X0, 0xFFFFFFFFFCEB4000
	0x03C57FE8 ADD X0, X0, 0x766
	0x03C57FEC BL 0x1C16CB8
	0x03C57FF0 MOV X1, X0
	0x03C57FF4 STR X0, [X20 + 0x150]
	0x03C57FF8 MOV X0, X19
	0x03C57FFC LDP X20, X19, [X31 + 0x10]
	0x03C58000 LDR X30, [X31], #0x20
	0x03C58004 BR X1
	0x03C58008 STR X30, [X31 - 0x30]!
	0x03C5800C STP X22, X21, [X31 + 0x10]
	0x03C58010 STP X20, X19, [X31 + 0x20]
	0x03C58014 ADRP X21, 0x78E000
	0x03C58018 ADRP X22, 0x4F8000
	0x03C5801C LDRB W8, [X21 + 0xE4]
	0x03C58020 LDR X22, [X22 + 0xC80]
	0x03C58024 MOV X19, X1
	0x03C58028 MOV X20, X0
	0x03C5802C TBNZ X8, 0x0, 0x3C58044
	0x03C58030 ADRP X0, 0x4F8000
	0x03C58034 LDR X0, [X0 + 0xC80]
	0x03C58038 BL 0x1C16CF4
	0x03C5803C MOVZ W8, 0x1
	0x03C58040 STRB W8, [X21 + 0xE4]
	0x03C58044 LDR X0, [X22]
	0x03C58048 LDR W8, [X0 + 0xE0]
	0x03C5804C CBNZ W8, 0x3C58054
	0x03C58050 BL 0x1C16DFC
	0x03C58054 ADRP X21, 0x78E000
	0x03C58058 LDR X2, [X21 + 0x158]
	0x03C5805C CBNZ X2, 0x3C58074
	0x03C58060 ADRP X0, 0xFFFFFFFFFCE9F000
	0x03C58064 ADD X0, X0, 0x8CD
	0x03C58068 BL 0x1C16CB8
	0x03C5806C MOV X2, X0
	0x03C58070 STR X0, [X21 + 0x158]
	0x03C58074 MOV X0, X20
	0x03C58078 MOV X1, X19
	0x03C5807C LDP X20, X19, [X31 + 0x20]
	0x03C58080 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x790000
	009 Move W8, [X20+148]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x509000
	016 Move X0, [X0+3568]
	017 Call 0x1C17CF4
	018 Move X0, 0x509000
	019 Move X0, [X0+3592]
	020 Call 0x1C17CF4
	021 Move X0, 0x509000
	022 Move X0, [X0+3600]
	023 Call 0x1C17CF4
	024 Move X0, 0x509000
	025 Move X0, [X0+3576]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+148], W8
	029 Move X21, X19
	030 Add X21, X21, 248
	031 Move W9, [X21]
	032 Move W8, [X21+24]
	033 Compare W9, 0
	034 JumpIfEqual {159}
	035 Compare W8, 0
	036 JumpIfEqual {169}
	037 Move X8, 0x509000
	038 Move X8, [X8+3576]
	039 Move X20, 0x509000
	040 Move X0, X21
	041 Move X1, [X8]
	042 Move X20, [X20+3600]
	043 Call Nullable`1<NativeArray`1<ShaderTagId>>.get_Value, X0
	044 Move X22, X1
	045 Move X1, [X20]
	046 Add X20, X19, 272
	047 Move X0, X20
	048 Call Nullable`1<NativeArray`1<RenderStateBlock>>.get_Value, X0
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X0, 0x49D000
	051 Move X0, [X0+2512]
	052 Call 0x1C17D08
	053 Move W1, 6
	054 Call 0x1C17D6C
	055 Move X19, X0
	056 Call 0x19913C0
	057 Move X23, 0x509000
	058 Move X23, [X23+3616]
	059 Move X0, X23
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X19
	063 Call 0x19990B4
	064 Move X0, X23
	065 Call 0x1C17D08
	066 Move X2, X0
	067 Move X0, X19
	068 Move X1, X31
	069 Call 0x1994444
	070 Move X0, X19
	071 Call 0x19913C0
	072 Move X22, 0x509000
	073 Move X22, [X22+3624]
	074 Move X0, X22
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Call 0x19990B4
	079 Move X0, X22
	080 Call 0x1C17D08
	081 Move X2, X0
	082 Move W1, 1
	083 Move X0, X19
	084 Call 0x1994444
	085 Move X0, X19
	086 Call 0x19913C0
	087 Move X0, X23
	088 Call 0x1C17D08
	089 Move X1, X0
	090 Move X0, X19
	091 Call 0x19990B4
	092 Move X0, X23
	093 Call 0x1C17D08
	094 Move X2, X0
	095 Move W1, 2
	096 Move X0, X19
	097 Call 0x1994444
	098 Move X0, 0x509000
	099 Move X0, [X0+3576]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X21
	103 Call 0x1C0B348
	104 Move [X31+12], W1
	105 Move X21, 0x49D000
	106 Move X21, [X21+1880]
	107 Move X0, X21
	108 Call 0x1C17D08
	109 Add X1, X31, 12
	110 Call 0x1C17E04
	111 Move X23, X0
	112 Move X0, X19
	113 Call 0x19913C0
	114 Move X0, X19
	115 Move X1, X23
	116 Call 0x19990B4
	117 Move W1, 3
	118 Move X0, X19
	119 Move X2, X23
	120 Call 0x1994444
	121 Move X0, X19
	122 Call 0x19913C0
	123 Move X0, X22
	124 Call 0x1C17D08
	125 Move X1, X0
	126 Move X0, X19
	127 Call 0x19990B4
	128 Move X0, X22
	129 Call 0x1C17D08
	130 Move X2, X0
	131 Move W1, 4
	132 Move X0, X19
	133 Call 0x1994444
	134 Move X0, 0x509000
	135 Move X0, [X0+3600]
	136 Call 0x1C17D08
	137 Move X1, X0
	138 Move X0, X20
	139 Call 0x1C0B354
	140 Move X0, X21
	141 Move [X31+8], W1
	142 Call 0x1C17D08
	143 Add X1, X31, 8
	144 Call 0x1C17E04
	145 Move X20, X0
	146 Move X0, X19
	147 Call 0x19913C0
	148 Move X0, X19
	149 Move X1, X20
	150 Call 0x19990B4
	151 Move W1, 5
	152 Move X0, X19
	153 Move X2, X20
	154 Call 0x1994444
	155 Move X0, 0x509000
	156 Move X0, [X0+3632]
	157 Call 0x1C17D08
	158 Move X1, X19
	159 Compare W8, 0
	160 JumpIfNotEqual {169}
	161 Move X20, [X31+48]
	162 Move X19, [X31+56]
	163 Move X22, [X31+32]
	164 Move X21, [X31+40]
	165 Move X30, [X31+16]
	166 Move X23, [X31+24]
	167 Add X31, X31, 64
	168 Return 
	169 Move X0, 0x49D000
	170 Move X0, [X0+2512]
	171 Call 0x1C17D08
	172 Move W1, 6
	173 Call 0x1C17D6C
	174 Move X20, X0
	175 Call 0x19913C0
	176 Move X22, 0x509000
	177 Move X22, [X22+3616]
	178 Move X0, X22
	179 Call 0x1C17D08
	180 Move X1, X0
	181 Move X0, X20
	182 Call 0x19990B4
	183 Move X0, X22
	184 Call 0x1C17D08
	185 Move X2, X0
	186 Move X0, X20
	187 Move X1, X31
	188 Call 0x1994444
	189 Move X0, X20
	190 Call 0x19913C0
	191 Move X21, 0x509000
	192 Move X21, [X21+3624]
	193 Move X0, X21
	194 Call 0x1C17D08
	195 Move X1, X0
	196 Move X0, X20
	197 Call 0x19990B4
	198 Move X0, X21
	199 Call 0x1C17D08
	200 Move X2, X0
	201 Move W1, 1
	202 Move X0, X20
	203 Call 0x1994444
	204 Move X0, X20
	205 Call 0x19913C0
	206 Move X0, X22
	207 Call 0x1C17D08
	208 Move X1, X0
	209 Move X0, X20
	210 Call 0x19990B4
	211 Move X0, X22
	212 Call 0x1C17D08
	213 Move X2, X0
	214 Move W1, 2
	215 Move X0, X20
	216 Call 0x1994444
	217 Move X0, 0x509000
	218 Move X0, [X0+3568]
	219 Call 0x1C17D08
	220 Move W8, [X19+248]
	221 Move X22, 0x49D000
	222 Move [X31+4], W8
	223 Move X22, [X22+2904]
	224 Move X0, X22
	225 Call 0x1C17D08
	226 Add X1, X31, 4
	227 Call 0x1C17E04
	228 Move X23, X0
	229 Move X0, X20
	230 Call 0x19913C0
	231 Move X0, X20
	232 Move X1, X23
	233 Call 0x19990B4
	234 Move W1, 3
	235 Move X0, X20
	236 Move X2, X23
	237 Call 0x1994444
	238 Move X0, X20
	239 Call 0x19913C0
	240 Move X0, X21
	241 Call 0x1C17D08
	242 Move X1, X0
	243 Move X0, X20
	244 Call 0x19990B4
	245 Move X0, X21
	246 Call 0x1C17D08
	247 Move X2, X0
	248 Move W1, 4
	249 Move X0, X20
	250 Call 0x1994444
	251 Move X0, 0x509000
	252 Move X0, [X0+3592]
	253 Call 0x1C17D08
	254 Move W8, [X19+272]
	255 Move X0, X22
	256 Move [X31], W8
	257 Call 0x1C17D08
	258 Add X1, X31, 0
	259 Call 0x1C17E04
	260 Move X19, X0
	261 Move X0, X20
	262 Call 0x19913C0
	263 Move X0, X20
	264 Move X1, X19
	265 Call 0x19990B4
	266 Move W1, 5
	267 Move X0, X20
	268 Move X2, X19
	269 Call 0x1994444
	270 Move X0, 0x508000
	271 Move X0, [X0+3640]
	272 Call 0x1C17D08
	273 Move X1, X20
	274 Move X2, X31
	275 Call String.Format, X0, X1
	276 Move X19, X0
	277 Move X0, 0x4A4000
	278 Move X0, [X0+1400]
	279 Call 0x1C17D08
	280 Call 0x1C17F10
	281 Move X1, X19
	282 Move X2, X31
	283 Move X20, X0
	284 Call ArgumentException..ctor, X0, X1
	285 Move X0, 0x508000
	286 Move X0, [X0+3648]
	287 Call 0x1C17D08
	288 Move X1, X0
	289 Move X0, X20
	290 Call 0x1C17DEC

Method: System.Boolean Equals(UnityEngine.Rendering.RendererListParams other)

Disassembly:
	0x03C58084 LDR X30, [X31], #0x30
	0x03C58088 BR X2
	0x03C5808C STP X30, X21, [X31 - 0x20]!
	0x03C58090 STP X20, X19, [X31 + 0x10]
	0x03C58094 ADRP X21, 0x78E000
	0x03C58098 LDR X2, [X21 + 0x158]
	0x03C5809C MOV X19, X1
	0x03C580A0 MOV X20, X0
	0x03C580A4 CBNZ X2, 0x3C580BC
	0x03C580A8 ADRP X0, 0xFFFFFFFFFCE9F000
	0x03C580AC ADD X0, X0, 0x8CD
	0x03C580B0 BL 0x1C16CB8
	0x03C580B4 MOV X2, X0
	0x03C580B8 STR X0, [X21 + 0x158]
	0x03C580BC MOV X0, X20
	0x03C580C0 MOV X1, X19
	0x03C580C4 LDP X20, X19, [X31 + 0x10]
	0x03C580C8 LDP X30, X21, [X31], #0x20
	0x03C580CC BR X2
	0x03C580D0 STR X30, [X31 - 0x30]!
	0x03C580D4 STP X22, X21, [X31 + 0x10]
	0x03C580D8 STP X20, X19, [X31 + 0x20]
	0x03C580DC ADRP X21, 0x78E000
	0x03C580E0 ADRP X22, 0x4F8000
	0x03C580E4 LDRB W8, [X21 + 0xE5]
	0x03C580E8 LDR X22, [X22 + 0xC80]
	0x03C580EC MOV X19, X1
	0x03C580F0 MOV X20, X0
	0x03C580F4 TBNZ X8, 0x0, 0x3C5810C
	0x03C580F8 ADRP X0, 0x4F8000
	0x03C580FC LDR X0, [X0 + 0xC80]
	0x03C58100 BL 0x1C16CF4
	0x03C58104 MOVZ W8, 0x1
	0x03C58108 STRB W8, [X21 + 0xE5]
	0x03C5810C LDR X0, [X22]
	0x03C58110 LDR W8, [X0 + 0xE0]
	0x03C58114 CBNZ W8, 0x3C5811C
	0x03C58118 BL 0x1C16DFC
	0x03C5811C ADRP X21, 0x78E000
	0x03C58120 LDR X2, [X21 + 0x160]
	0x03C58124 CBNZ X2, 0x3C5813C
	0x03C58128 ADRP X0, 0xFFFFFFFFFCEB5000
	0x03C5812C ADD X0, X0, 0x3CC
	0x03C58130 BL 0x1C16CB8
	0x03C58134 MOV X2, X0
	0x03C58138 STR X0, [X21 + 0x160]
	0x03C5813C MOV X0, X20
	0x03C58140 MOV X1, X19
	0x03C58144 LDP X20, X19, [X31 + 0x20]
	0x03C58148 LDP X22, X21, [X31 + 0x10]
	0x03C5814C LDR X30, [X31], #0x30
	0x03C58150 BR X2
	0x03C58154 STP X30, X21, [X31 - 0x20]!
	0x03C58158 STP X20, X19, [X31 + 0x10]
	0x03C5815C ADRP X21, 0x78E000
	0x03C58160 LDR X2, [X21 + 0x160]
	0x03C58164 MOV X19, X1
	0x03C58168 MOV X20, X0
	0x03C5816C CBNZ X2, 0x3C58184
	0x03C58170 ADRP X0, 0xFFFFFFFFFCEB5000
	0x03C58174 ADD X0, X0, 0x3CC
	0x03C58178 BL 0x1C16CB8
	0x03C5817C MOV X2, X0
	0x03C58180 STR X0, [X21 + 0x160]
	0x03C58184 MOV X0, X20
	0x03C58188 MOV X1, X19
	0x03C5818C LDP X20, X19, [X31 + 0x10]
	0x03C58190 LDP X30, X21, [X31], #0x20
	0x03C58194 BR X2
	0x03C58198 SUB X31, X31, 0x90
	0x03C5819C STR X30, [X31 + 0x30]
	0x03C581A0 STP X28, X27, [X31 + 0x40]
	0x03C581A4 STP X26, X25, [X31 + 0x50]
	0x03C581A8 STP X24, X23, [X31 + 0x60]
	0x03C581AC STP X22, X21, [X31 + 0x70]
	0x03C581B0 STP X20, X19, [X31 + 0x80]
	0x03C581B4 ADRP X28, 0x78E000
	0x03C581B8 STR W4, [X31 + 0x38]
	0x03C581BC ADRP X27, 0x4F8000
	0x03C581C0 MOV X21, X8
	0x03C581C4 LDRB W8, [X28 + 0xE6]
	0x03C581C8 LDR X27, [X27 + 0xC80]
	0x03C581CC MOV X19, X7
	0x03C581D0 MOV X20, X6
	0x03C581D4 MOV W26, W5
	0x03C581D8 MOV X22, X3
	0x03C581DC MOV X23, X2
	0x03C581E0 MOV X24, X1
	0x03C581E4 MOV X25, X0
	0x03C581E8 TBNZ X8, 0x0, 0x3C58200
	0x03C581EC ADRP X0, 0x4F8000
	0x03C581F0 LDR X0, [X0 + 0xC80]
	0x03C581F4 BL 0x1C16CF4
	0x03C581F8 MOVZ W8, 0x1
	0x03C581FC STRB W8, [X28 + 0xE6]
	0x03C58200 LDR X0, [X27]
	0x03C58204 STP X31, X31, [X31 + 0x18]
	0x03C58208 STR X31, [X31 + 0x28]
	0x03C5820C LDR W8, [X0 + 0xE0]
	0x03C58210 CBNZ W8, 0x3C58218
	0x03C58214 BL 0x1C16DFC
	0x03C58218 ADRP X28, 0x78E000
	0x03C5821C LDR X8, [X28 + 0x168]
	0x03C58220 LDR W27, [X31 + 0x90]
	0x03C58224 CBNZ X8, 0x3C5823C
	0x03C58228 ADRP X0, 0xFFFFFFFFFCE9B000
	0x03C5822C ADD X0, X0, 0x6A6
	0x03C58230 BL 0x1C16CB8
	0x03C58234 MOV X8, X0
	0x03C58238 STR X0, [X28 + 0x168]
	0x03C5823C ADD X9, X31, 0x18
	0x03C58240 AND W5, W26, 0x1
	0x03C58244 ADD X4, X31, 0x38
	0x03C58248 MOV X0, X25
	0x03C5824C MOV X1, X24
	0x03C58250 MOV X2, X23
	0x03C58254 MOV X3, X22
	0x03C58258 MOV X6, X20
	0x03C5825C MOV X7, X19
	0x03C58260 STR X9, [X31 + 0x8]
	0x03C58264 STR W27, [X31]
	0x03C58268 BLR X8
	0x03C5826C LDP X8, X30, [X31 + 0x28]
	0x03C58270 LDUR V0, [X31 + 0x18]
	0x03C58274 LDP X20, X19, [X31 + 0x80]
	0x03C58278 LDP X24, X23, [X31 + 0x60]
	0x03C5827C STR X8, [X21 + 0x10]
	0x03C58280 STR V0, [X21]
	0x03C58284 LDP X22, X21, [X31 + 0x70]
	0x03C58288 LDP X26, X25, [X31 + 0x50]
	0x03C5828C LDP X28, X27, [X31 + 0x40]
	0x03C58290 ADD X31, X31, 0x90
	0x03C58294 RET
	0x03C58298 STP X29, X30, [X31 - 0x60]!
	0x03C5829C STP X28, X27, [X31 + 0x10]
	0x03C582A0 STP X26, X25, [X31 + 0x20]
	0x03C582A4 STP X24, X23, [X31 + 0x30]
	0x03C582A8 STP X22, X21, [X31 + 0x40]
	0x03C582AC STP X20, X19, [X31 + 0x50]
	0x03C582B0 ADRP X29, 0x78E000
	0x03C582B4 LDR X27, [X31 + 0x68]
	0x03C582B8 LDR X8, [X29 + 0x168]
	0x03C582BC LDR W28, [X31 + 0x60]
	0x03C582C0 MOV X19, X7
	0x03C582C4 MOV X20, X6
	0x03C582C8 MOV W24, W5

ISIL:
	001 Move [X31-64], X29
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Subtract X31, X31, 1136
	009 NotImplemented "Instruction MRS not yet implemented."
	010 Move X8, [X21+40]
	011 Move X22, 0x78F000
	012 Move X19, X1
	013 Move X20, X0
	014 Move [X31+1128], X8
	015 Move W8, [X22+149]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {43}
	020 Move X0, 0x4FD000
	021 Move X0, [X0+184]
	022 Call 0x1C17CF4
	023 Move X0, 0x508000
	024 Move X0, [X0+3656]
	025 Call 0x1C17CF4
	026 Move X0, 0x508000
	027 Move X0, [X0+3664]
	028 Call 0x1C17CF4
	029 Move X0, 0x508000
	030 Move X0, [X0+3672]
	031 Call 0x1C17CF4
	032 Move X0, 0x508000
	033 Move X0, [X0+3680]
	034 Call 0x1C17CF4
	035 Move X0, 0x508000
	036 Move X0, [X0+3568]
	037 Call 0x1C17CF4
	038 Move X0, 0x508000
	039 Move X0, [X0+3592]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X22+149], W8
	043 Move X8, [X20]
	044 Move X9, [X20+8]
	045 Move X1, [X19]
	046 Move X2, [X19+8]
	047 Add X0, X31, 632
	048 Add X22, X31, 632
	049 Move [X31+632], X8
	050 Move [X31+640], X9
	051 Call CullingResults.Equals, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {164}
	056 Move X23, 0x4FD000
	057 Move X23, [X23+184]
	058 Add X1, X20, 16
	059 Add X0, X31, 928
	060 Move W2, 196
	061 Call 0x3EB2AC0
	062 Add X0, X31, 632
	063 Move W2, 296
	064 Move X1, X19
	065 Call 0x3EB2AC0
	066 Add X1, X22, 16
	067 Add X0, X31, 432
	068 Move W2, 196
	069 Call 0x3EB2AC0
	070 Move X0, [X23]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Add X0, X31, 232
	076 Add X1, X31, 928
	077 Move W2, 196
	078 Call 0x3EB2AC0
	079 Add X0, X31, 32
	080 Add X1, X31, 432
	081 Move W2, 196
	082 Call 0x3EB2AC0
	083 Add X0, X31, 232
	084 Add X1, X31, 32
	085 Call DrawingSettings.op_Equality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {164}
	090 NotImplemented "Instruction LDUR not yet implemented."
	091 NotImplemented "Instruction LDUR not yet implemented."
	092 Add X0, X31, 632
	093 Move W2, 296
	094 Move X1, X19
	095 Add X22, X31, 632
	096 Move [X31+16], X8
	097 Move [X31], V0
	098 Call 0x3EB2AC0
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 Add X0, X31, 0
	102 Add X1, X31, 928
	103 Move [X31+58], V0
	104 Move [X31+944], X8
	105 Call FilteringSettings.Equals, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {164}
	110 Move W8, [X20+236]
	111 Move W9, [X19+236]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move W8, [X19+240]
	114 Move W9, [X20+240]
	115 And W8, W8, 1
	116 NotImplemented "Instruction CMP not yet implemented."
	117 Move W8, [X20+248]
	118 Move W9, [X19+248]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 NotImplemented "Instruction CSET not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction CSET not yet implemented."
	123 Xor W9, W10, W9
	124 Move TEMP, X9
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfEqual {164}
	128 Compare W8, 0
	129 JumpIfEqual {142}
	130 Move X8, 0x508000
	131 Move X0, [X20+256]
	132 Move X1, [X20+264]
	133 Move X2, [X19+256]
	134 Move X3, [X19+264]
	135 Move X8, [X8+3656]
	136 Move X4, [X8]
	137 Call NativeArray`1<ShaderTagId>.op_Equality, X0, X1
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {164}
	142 Move W8, [X20+272]
	143 Move W9, [X19+272]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 NotImplemented "Instruction CSET not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 NotImplemented "Instruction CSET not yet implemented."
	148 Xor W9, W10, W9
	149 Xor W0, W9, 1
	150 Move TEMP, X9
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfEqual {165}
	154 Compare W8, 0
	155 JumpIfEqual {165}
	156 Move X8, 0x508000
	157 Move X2, [X19+280]
	158 Move X3, [X19+288]
	159 Move X0, [X20+280]
	160 Move X1, [X20+288]
	161 Move X8, [X8+3664]
	162 Move X4, [X8]
	163 Call NativeArray`1<RenderStateBlock>.op_Equality, X0, X1
	164 Move W0, W31
	165 Move X8, [X21+40]
	166 Move X9, [X31+1128]
	167 NotImplemented "Instruction CMP not yet implemented."
	168 And W0, W0, 1
	169 Add X31, X31, 1136
	170 Move X20, [X31+48]
	171 Move X19, [X31+56]
	172 Move X22, [X31+32]
	173 Move X21, [X31+40]
	174 Move X30, [X31+16]
	175 Move X23, [X31+24]
	176 Move X29, [X31+64]
	177 Return X0
	178 Call 0x3EB2B20

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C582D8 MOV X25, X1
	0x03C582DC MOV X26, X0
	0x03C582E0 CBNZ X8, 0x3C582F8
	0x03C582E4 ADRP X0, 0xFFFFFFFFFCE9B000
	0x03C582E8 ADD X0, X0, 0x6A6
	0x03C582EC BL 0x1C16CB8
	0x03C582F0 MOV X8, X0
	0x03C582F4 STR X0, [X29 + 0x168]
	0x03C582F8 STR X27, [X31 + 0x68]
	0x03C582FC AND W5, W24, 0x1
	0x03C58300 STR W28, [X31 + 0x60]
	0x03C58304 MOV X0, X26
	0x03C58308 MOV X1, X25
	0x03C5830C MOV X2, X23
	0x03C58310 MOV X3, X22
	0x03C58314 MOV X4, X21
	0x03C58318 MOV X6, X20
	0x03C5831C MOV X7, X19
	0x03C58320 LDP X20, X19, [X31 + 0x50]
	0x03C58324 LDP X22, X21, [X31 + 0x40]
	0x03C58328 LDP X24, X23, [X31 + 0x30]
	0x03C5832C LDP X26, X25, [X31 + 0x20]
	0x03C58330 LDP X28, X27, [X31 + 0x10]
	0x03C58334 LDP X29, X30, [X31], #0x60
	0x03C58338 BR X8
	0x03C5833C SUB X31, X31, 0x80
	0x03C58340 STR X30, [X31 + 0x20]
	0x03C58344 STP X28, X27, [X31 + 0x30]
	0x03C58348 STP X26, X25, [X31 + 0x40]
	0x03C5834C STP X24, X23, [X31 + 0x50]
	0x03C58350 STP X22, X21, [X31 + 0x60]
	0x03C58354 STP X20, X19, [X31 + 0x70]
	0x03C58358 ADRP X28, 0x78E000
	0x03C5835C ADRP X27, 0x4F8000
	0x03C58360 MOV X22, X8
	0x03C58364 LDRB W8, [X28 + 0xE7]
	0x03C58368 LDR X27, [X27 + 0xC80]
	0x03C5836C MOV X19, X6
	0x03C58370 MOV X20, X5
	0x03C58374 MOV X21, X4
	0x03C58378 MOV X23, X3
	0x03C5837C MOV W24, W2
	0x03C58380 MOV X25, X1
	0x03C58384 MOV X26, X0
	0x03C58388 TBNZ X8, 0x0, 0x3C583A0
	0x03C5838C ADRP X0, 0x4F8000
	0x03C58390 LDR X0, [X0 + 0xC80]
	0x03C58394 BL 0x1C16CF4
	0x03C58398 MOVZ W8, 0x1
	0x03C5839C STRB W8, [X28 + 0xE7]
	0x03C583A0 LDR X0, [X27]
	0x03C583A4 STP X31, X31, [X31 + 0x8]
	0x03C583A8 STR X31, [X31 + 0x18]
	0x03C583AC LDR W8, [X0 + 0xE0]
	0x03C583B0 CBNZ W8, 0x3C583B8
	0x03C583B4 BL 0x1C16DFC
	0x03C583B8 ADRP X27, 0x78E000
	0x03C583BC LDR X8, [X27 + 0x170]

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+304], X29
	003 Move [X31+312], X30
	004 Move [X31+320], X22
	005 Move [X31+328], X21
	006 Move [X31+336], X20
	007 Move [X31+344], X19
	008 NotImplemented "Instruction MRS not yet implemented."
	009 Move X8, [X21+40]
	010 Move X22, 0x78F000
	011 Move X20, X1
	012 Move X19, X0
	013 Move [X31+296], X8
	014 Move W8, [X22+150]
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x508000
	020 Move X0, [X0+3688]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+150], W8
	024 Compare X20, 0
	025 JumpIfEqual {31}
	026 Move X22, 0x508000
	027 Move X22, [X22+3688]
	028 Move X8, [X20]
	029 Move X0, [X22]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W0, W31
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfEqual {36}
	035 Move X1, X0
	036 Call 0x1C17DFC
	037 Move X1, [X22]
	038 Move X0, [X20]
	039 Move X8, [X0+64]
	040 Move X9, [X1+64]
	041 Move X0, X20
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Call 0x1C17E08
	044 Move X1, X0
	045 Add X0, X31, 0
	046 Move W2, 296
	047 Call 0x3EB2AC0
	048 Add X1, X31, 0
	049 Move X0, X19
	050 Call RendererListParams.Equals, X0, X1
	051 Move X8, [X21+40]
	052 Move X9, [X31+296]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, [X31+336]
	055 Move X19, [X31+344]
	056 Move X22, [X31+320]
	057 Move X21, [X31+328]
	058 Move X29, [X31+304]
	059 Move X30, [X31+312]
	060 And W0, W0, 1
	061 Add X31, X31, 352
	062 Return X0
	063 Call 0x1C181E0
	064 Call 0x3EB2B20

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C583C0 CBNZ X8, 0x3C583D8
	0x03C583C4 ADRP X0, 0xFFFFFFFFFCEAF000
	0x03C583C8 ADD X0, X0, 0x708
	0x03C583CC BL 0x1C16CB8
	0x03C583D0 MOV X8, X0
	0x03C583D4 STR X0, [X27 + 0x170]
	0x03C583D8 ADD X7, X31, 0x8
	0x03C583DC MOV X0, X26
	0x03C583E0 MOV X1, X25
	0x03C583E4 MOV W2, W24
	0x03C583E8 MOV X3, X23
	0x03C583EC MOV X4, X21
	0x03C583F0 MOV X5, X20
	0x03C583F4 MOV X6, X19
	0x03C583F8 BLR X8
	0x03C583FC LDP X8, X30, [X31 + 0x18]
	0x03C58400 LDUR V0, [X31 + 0x8]
	0x03C58404 LDP X20, X19, [X31 + 0x70]
	0x03C58408 LDP X24, X23, [X31 + 0x50]
	0x03C5840C STR X8, [X22 + 0x10]
	0x03C58410 STR V0, [X22]
	0x03C58414 LDP X22, X21, [X31 + 0x60]
	0x03C58418 LDP X26, X25, [X31 + 0x40]
	0x03C5841C LDP X28, X27, [X31 + 0x30]
	0x03C58420 ADD X31, X31, 0x80
	0x03C58424 RET
	0x03C58428 STP X30, X27, [X31 - 0x50]!
	0x03C5842C STP X26, X25, [X31 + 0x10]
	0x03C58430 STP X24, X23, [X31 + 0x20]
	0x03C58434 STP X22, X21, [X31 + 0x30]
	0x03C58438 STP X20, X19, [X31 + 0x40]
	0x03C5843C ADRP X27, 0x78E000
	0x03C58440 LDR X8, [X27 + 0x170]
	0x03C58444 MOV X19, X7
	0x03C58448 MOV X20, X6
	0x03C5844C MOV X21, X5
	0x03C58450 MOV X22, X4
	0x03C58454 MOV X23, X3
	0x03C58458 MOV W24, W2
	0x03C5845C MOV X25, X1
	0x03C58460 MOV X26, X0
	0x03C58464 CBNZ X8, 0x3C5847C
	0x03C58468 ADRP X0, 0xFFFFFFFFFCEAF000
	0x03C5846C ADD X0, X0, 0x708
	0x03C58470 BL 0x1C16CB8
	0x03C58474 MOV X8, X0
	0x03C58478 STR X0, [X27 + 0x170]
	0x03C5847C MOV X0, X26
	0x03C58480 MOV X1, X25
	0x03C58484 MOV W2, W24
	0x03C58488 MOV X3, X23
	0x03C5848C MOV X4, X22
	0x03C58490 MOV X5, X21
	0x03C58494 MOV X6, X20
	0x03C58498 MOV X7, X19
	0x03C5849C LDP X20, X19, [X31 + 0x40]
	0x03C584A0 LDP X22, X21, [X31 + 0x30]
	0x03C584A4 LDP X24, X23, [X31 + 0x20]
	0x03C584A8 LDP X26, X25, [X31 + 0x10]
	0x03C584AC LDP X30, X27, [X31], #0x50
	0x03C584B0 BR X8
	0x03C584B4 STR X30, [X31 - 0x30]!
	0x03C584B8 STP X22, X21, [X31 + 0x10]
	0x03C584BC STP X20, X19, [X31 + 0x20]
	0x03C584C0 ADRP X21, 0x78E000
	0x03C584C4 ADRP X22, 0x4F8000
	0x03C584C8 LDRB W8, [X21 + 0xE8]
	0x03C584CC LDR X22, [X22 + 0xC80]
	0x03C584D0 MOV X19, X1
	0x03C584D4 MOV X20, X0
	0x03C584D8 TBNZ X8, 0x0, 0x3C584F0
	0x03C584DC ADRP X0, 0x4F8000
	0x03C584E0 LDR X0, [X0 + 0xC80]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x78F000
	009 Move X20, 0x4FD000
	010 Move W8, [X21+151]
	011 Move X20, [X20+184]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x4FD000
	018 Move X0, [X0+184]
	019 Call 0x1C17CF4
	020 Move X0, 0x508000
	021 Move X0, [X0+3696]
	022 Call 0x1C17CF4
	023 Move X0, 0x508000
	024 Move X0, [X0+3704]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+151], W8
	028 Move X22, 0x508000
	029 Move X21, 0x508000
	030 Move X22, [X22+3704]
	031 Move X21, [X21+3696]
	032 Move X0, X19
	033 Move X1, X31
	034 Call IntPtr.GetHashCode, X0
	035 Move X8, [X20]
	036 Move X23, [X19+8]
	037 Move W20, W0
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move W24, 397
	044 Add X0, X19, 16
	045 Multiply W8, W20, W24
	046 Xor W20, W8, W23
	047 Call DrawingSettings.GetHashCode, X0
	048 Multiply W8, W20, W24
	049 Xor W20, W0, W8
	050 Add X0, X19, 212
	051 Call FilteringSettings.GetHashCode, X0
	052 Multiply W8, W20, W24
	053 Xor W20, W8, W0
	054 Add X0, X19, 236
	055 Move X1, X31
	056 Call Int32.GetHashCode, X0
	057 Move W8, 0x6916
	058 NotImplemented "Instruction MOVK not yet implemented."
	059 Move W10, [X19+240]
	060 Multiply W9, W20, W24
	061 Move X1, [X22]
	062 Add W8, W0, W8
	063 Xor W8, W9, W8
	064 Multiply W8, W8, W24
	065 Xor W8, W10, W8
	066 Add X0, X19, 248
	067 Xor W20, W8, 1
	068 Call Nullable`1<NativeArray`1<ShaderTagId>>.GetHashCode, X0
	069 Move X1, [X21]
	070 Multiply W8, W20, W24
	071 Xor W20, W8, W0
	072 Add X0, X19, 272
	073 Call Nullable`1<NativeArray`1<RenderStateBlock>>.GetHashCode, X0
	074 Multiply W8, W20, W24
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X22, [X31+32]
	078 Move X21, [X31+40]
	079 Move X24, [X31+16]
	080 Move X23, [X31+24]
	081 Xor W0, W8, W0
	082 Move X30, [X31+64]
	083 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03C58504 LDR X2, [X21 + 0x178]
	0x03C58508 CBNZ X2, 0x3C58520
	0x03C5850C ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C58510 ADD X0, X0, 0xDCA
	0x03C58514 BL 0x1C16CB8
	0x03C58518 MOV X2, X0
	0x03C5851C STR X0, [X21 + 0x178]
	0x03C58520 MOV X0, X20
	0x03C58524 MOV X1, X19
	0x03C58528 LDP X20, X19, [X31 + 0x20]
	0x03C5852C LDP X22, X21, [X31 + 0x10]
	0x03C58530 LDR X30, [X31], #0x30
	0x03C58534 BR X2
	0x03C58538 STP X30, X21, [X31 - 0x20]!
	0x03C5853C STP X20, X19, [X31 + 0x10]
	0x03C58540 ADRP X21, 0x78E000
	0x03C58544 LDR X2, [X21 + 0x178]
	0x03C58548 MOV X19, X1
	0x03C5854C MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x78F000
	005 Move X20, 0x508000
	006 Move W8, [X19+152]
	007 Move X20, [X20+3688]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x508000
	013 Move X0, [X0+3688]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+152], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W2, 296
	021 Move W1, W31
	022 Move X0, [X8+184]
	023 Move X30, [X31+32]
	024 Call 0x3EB2B10
	025 Return 

