Type: UnityEngine.Rendering.SupportedRenderingFeatures

Method: UnityEngine.Rendering.SupportedRenderingFeatures get_active()

Disassembly:
	0x03C5C374 SUB X31, X31, 0xB0
	0x03C5C378 STP X30, X21, [X31 + 0x90]
	0x03C5C37C STP X20, X19, [X31 + 0xA0]
	0x03C5C380 ADRP X21, 0x78A000
	0x03C5C384 LDRB W8, [X21 + 0x1AC]
	0x03C5C388 MOV X20, X1
	0x03C5C38C MOV X19, X0
	0x03C5C390 TBNZ X8, 0x0, 0x3C5C3A8
	0x03C5C394 ADRP X0, 0x503000
	0x03C5C398 LDR X0, [X0 + 0xF38]
	0x03C5C39C BL 0x1C16CF4
	0x03C5C3A0 MOVZ W8, 0x1
	0x03C5C3A4 STRB W8, [X21 + 0x1AC]
	0x03C5C3A8 CBZ X20, 0x3C5C3C4
	0x03C5C3AC ADRP X8, 0x503000
	0x03C5C3B0 LDR X8, [X8 + 0xF38]
	0x03C5C3B4 LDR X9, [X20]
	0x03C5C3B8 LDR X8, [X8]
	0x03C5C3BC CMP X9, X8
	0x03C5C3C0 B.EQ 0x3C5C3CC
	0x03C5C3C4 MOV W0, W31
	0x03C5C3C8 B 0x3C5C3F0
	0x03C5C3CC MOV X0, X20
	0x03C5C3D0 BL 0x1C16E08
	0x03C5C3D4 MOV X1, X0
	0x03C5C3D8 ADD X0, X31, 0x8
	0x03C5C3DC MOVZ W2, 0x88
	0x03C5C3E0 BL 0x3EB1AC0
	0x03C5C3E4 ADD X1, X31, 0x8
	0x03C5C3E8 MOV X0, X19
	0x03C5C3EC BL 0x3C5C1D4
	0x03C5C3F0 LDP X20, X19, [X31 + 0xA0]
	0x03C5C3F4 LDP X30, X21, [X31 + 0x90]
	0x03C5C3F8 AND W0, W0, 0x1
	0x03C5C3FC ADD X31, X31, 0xB0
	0x03C5C400 RET
	0x03C5C404 SUB X31, X31, 0x50
	0x03C5C408 STP X30, X25, [X31 + 0x10]
	0x03C5C40C STP X24, X23, [X31 + 0x20]
	0x03C5C410 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x78B000
	005 Move X20, 0x4FC000
	006 Move W8, [X19+408]
	007 Move X20, [X20+544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4FC000
	013 Move X0, [X0+544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+408], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X20]
	023 Move X8, [X0+184]
	024 Move X8, [X8]
	025 Compare X8, 0
	026 JumpIfNotEqual {39}
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Call SupportedRenderingFeatures..ctor, X0
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Move X8, [X0+184]
	037 Move [X8], X19
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X20]
	044 Move X8, [X0+184]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X0, [X8]
	048 Move X30, [X31+32]
	049 Return X0

Method: System.Void set_active(UnityEngine.Rendering.SupportedRenderingFeatures value)

Disassembly:
	0x03C56ABC BL 0x1C16CF4
	0x03C56AC0 ADRP X0, 0x509000
	0x03C56AC4 LDR X0, [X0 + 0xDF8]
	0x03C56AC8 BL 0x1C16CF4
	0x03C56ACC MOVZ W8, 0x1
	0x03C56AD0 STRB W8, [X20 + 0x92]
	0x03C56AD4 LDRB W8, [X19 + 0xF8]!
	0x03C56AD8 CBZ W8, 0x3C56B10
	0x03C56ADC ADRP X8, 0x509000
	0x03C56AE0 LDR X8, [X8 + 0xDF8]
	0x03C56AE4 ADRP X20, 0x509000
	0x03C56AE8 MOV X0, X19
	0x03C56AEC LDR X1, [X8]
	0x03C56AF0 LDR X20, [X20 + 0xE18]
	0x03C56AF4 BL 0x242C804
	0x03C56AF8 LDR X2, [X20]
	0x03C56AFC BL 0x22226C8
	0x03C56B00 LDP X20, X19, [X31 + 0x10]
	0x03C56B04 MOV X1, X31
	0x03C56B08 LDR X30, [X31], #0x20
	0x03C56B0C B 0x33C693C
	0x03C56B10 LDP X20, X19, [X31 + 0x10]
	0x03C56B14 MOV X0, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x791000
	006 Move X20, 0x502000
	007 Move W8, [X21+409]
	008 Move X20, [X20+544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x502000
	015 Move X0, [X0+544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+409], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move [X8], X19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return 

Method: UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes get_defaultMixedLightingModes()

Disassembly:
	0x03C5C414 STP X20, X19, [X31 + 0x40]
	0x03C5C418 LDR V0, [X0]

ISIL:
	001 Move W0, [X0+20]
	002 Return X0

Method: UnityEngine.Rendering.SupportedRenderingFeatures/LightmapMixedBakeModes get_mixedLightingModes()

Disassembly:
	0x03C5C41C LDR V1, [X0 + 0x8]
	0x03C5C420 MOV X19, X0

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: UnityEngine.LightmapBakeType get_lightmapBakeTypes()

Disassembly:
	0x03C5C424 ADD X8, X31, 0x0
	0x03C5C428 ADD X0, X31, 0x0

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: UnityEngine.LightmapsMode get_lightmapsModes()

Disassembly:
	0x03C5C42C MOV X1, X31
	0x03C5C430 ORR X20, X8, 0x7

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Boolean get_enlightenLightmapper()

Disassembly:
	0x03C5C434 ADD X21, X8, 0x8
	0x03C5C438 STR D0, [X31]

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Boolean get_enlighten()

Disassembly:
	0x03C5C43C STR S1, [X31 + 0x8]
	0x03C5C440 BL 0x338FE0C

ISIL:
	001 Move W0, [X0+37]
	002 Return X0

Method: System.Void set_motionVectors(System.Boolean value)

Disassembly:
	0x03C5C444 MOV W22, W0
	0x03C5C448 MOV X0, X20
	0x03C5C44C MOV X1, X31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+39], W8
	003 Return 

Method: System.Boolean get_rendersUIOverlay()

Disassembly:
	0x03C5C450 BL 0x338FE0C
	0x03C5C454 MOV W23, W0

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_rendersUIOverlay(System.Boolean value)

Disassembly:
	0x03C5C458 MOV X0, X21
	0x03C5C45C MOV X1, X31
	0x03C5C460 BL 0x338FE0C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+44], W8
	003 Return 

Method: System.Boolean get_autoAmbientProbeBaking()

Disassembly:
	0x03C5C464 LDUR V0, [X19 + 0xC]
	0x03C5C468 LDR V1, [X19 + 0x14]

ISIL:
	001 Move W0, [X0+55]
	002 Return X0

Method: System.Boolean get_autoDefaultReflectionProbeBaking()

Disassembly:
	0x03C5C46C MOV W24, W0
	0x03C5C470 ADD X0, X31, 0x0

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Boolean get_overridesLightProbeSystem()

Disassembly:
	0x03C5C474 MOV X1, X31
	0x03C5C478 STR D0, [X31]

ISIL:
	001 Move W0, [X0+58]
	002 Return X0

Method: System.Void set_supportsHDR(System.Boolean value)

Disassembly:
	0x03C5C47C STR S1, [X31 + 0x8]
	0x03C5C480 BL 0x338FE0C
	0x03C5C484 MOV W25, W0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+59], W8
	003 Return 

Method: System.Void FallbackMixedLightingModeByRef(System.IntPtr fallbackModePtr)

Disassembly:
	0x03C5C488 MOV X0, X20
	0x03C5C48C MOV X1, X31
	0x03C5C490 BL 0x338FE0C
	0x03C5C494 MOV W20, W0
	0x03C5C498 MOV X0, X21
	0x03C5C49C MOV X1, X31
	0x03C5C4A0 BL 0x338FE0C
	0x03C5C4A4 EOR W9, W22, W23, 0x2
	0x03C5C4A8 EOR W9, W9, W24, 0x2
	0x03C5C4AC EOR W9, W9, W25, 0x2
	0x03C5C4B0 AND W8, W0, 0xFFFFFFFC
	0x03C5C4B4 EOR W9, W9, W20, 0x4
	0x03C5C4B8 ADD X0, X19, 0x18
	0x03C5C4BC MOV X1, X31
	0x03C5C4C0 EOR W20, W9, W8, 0x0
	0x03C5C4C4 BL 0x2477824
	0x03C5C4C8 MOVZ W23, 0x18D
	0x03C5C4CC MUL W8, W20, W23
	0x03C5C4D0 EOR W24, W8, W0, 0x0
	0x03C5C4D4 ADD X0, X19, 0x58
	0x03C5C4D8 MOV X1, X31
	0x03C5C4DC BL 0x338FE0C
	0x03C5C4E0 MOV W20, W0
	0x03C5C4E4 ADD X0, X19, 0x5C
	0x03C5C4E8 MOV X1, X31
	0x03C5C4EC BL 0x338FE0C
	0x03C5C4F0 MOV W21, W0
	0x03C5C4F4 ADD X0, X19, 0x60
	0x03C5C4F8 MOV X1, X31
	0x03C5C4FC BL 0x338FE0C
	0x03C5C500 MOV W22, W0
	0x03C5C504 ADD X0, X19, 0x64
	0x03C5C508 MOV X1, X31
	0x03C5C50C BL 0x338FE0C
	0x03C5C510 EOR W8, W20, W21, 0x2
	0x03C5C514 MUL W9, W24, W23
	0x03C5C518 EOR W8, W8, W9, 0x0
	0x03C5C51C EOR W8, W8, W22, 0x2
	0x03C5C520 EOR W22, W8, W0, 0x1
	0x03C5C524 ADD X0, X19, 0x68
	0x03C5C528 MOV X1, X31
	0x03C5C52C BL 0x338FE0C
	0x03C5C530 MOV W20, W0
	0x03C5C534 ADD X0, X19, 0x6C
	0x03C5C538 MOV X1, X31
	0x03C5C53C BL 0x338FE0C
	0x03C5C540 MOV W21, W0
	0x03C5C544 ADD X0, X19, 0x70
	0x03C5C548 MOV X1, X31
	0x03C5C54C BL 0x338FE0C
	0x03C5C550 EOR W8, W20, W21, 0x2
	0x03C5C554 MUL W9, W22, W23
	0x03C5C558 EOR W8, W8, W0, 0x2
	0x03C5C55C ADD X0, X19, 0x74
	0x03C5C560 MOV X1, X31
	0x03C5C564 EOR W20, W8, W9, 0x0
	0x03C5C568 BL 0x338FE0C
	0x03C5C56C LDP W9, W10, [X19 + 0x78]
	0x03C5C570 MUL W8, W20, W23
	0x03C5C574 EOR W8, W8, W0, 0x0
	0x03C5C578 MUL W8, W8, W23
	0x03C5C57C EOR W8, W8, W9, 0x0
	0x03C5C580 MUL W8, W8, W23
	0x03C5C584 EOR W8, W8, W10, 0x0
	0x03C5C588 LDP W9, W10, [X19 + 0x80]
	0x03C5C58C MUL W8, W8, W23
	0x03C5C590 LDP X20, X19, [X31 + 0x40]
	0x03C5C594 LDP X22, X21, [X31 + 0x30]
	0x03C5C598 EOR W8, W8, W9, 0x0
	0x03C5C59C MUL W8, W8, W23
	0x03C5C5A0 LDP X24, X23, [X31 + 0x20]
	0x03C5C5A4 LDP X30, X25, [X31 + 0x10]
	0x03C5C5A8 EOR W0, W8, W10, 0x0
	0x03C5C5AC ADD X31, X31, 0x50
	0x03C5C5B0 RET
	0x03C5C5B4 MOV X1, X31
	0x03C5C5B8 B 0x3399AF8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x78B000
	008 Move X20, 0x4FC000
	009 Move W8, [X21+410]
	010 Move X20, [X20+544]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4FC000
	017 Move X0, [X0+544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+410], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call IntPtr.op_Explicit, X0
	024 Move X8, [X20]
	025 Move X19, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Call SupportedRenderingFeatures.get_active
	032 Compare X0, 0
	033 JumpIfEqual {99}
	034 Move X8, [X20]
	035 Move W21, [X0+20]
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfEqual {41}
	039 Compare W21, 0
	040 JumpIfNotEqual {45}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Compare W21, 0
	044 JumpIfEqual {76}
	045 Call SupportedRenderingFeatures.get_active
	046 Compare X0, 0
	047 JumpIfEqual {99}
	048 Move W21, [X0+24]
	049 Call SupportedRenderingFeatures.get_active
	050 Compare X0, 0
	051 JumpIfEqual {99}
	052 Move W22, [X0+20]
	053 Call SupportedRenderingFeatures.get_active
	054 Compare X0, 0
	055 JumpIfEqual {99}
	056 Move X8, [X20]
	057 Move W23, [X0+20]
	058 And W21, W22, W21
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Call SupportedRenderingFeatures.get_active
	066 Compare X0, 0
	067 JumpIfEqual {99}
	068 Move W8, [X0+20]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CSET not yet implemented."
	071 Move W9, W9
	072 ShiftRight W9, 31
	073 And W9, W9, 0x3FFFFFFF
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSINC not yet implemented."
	076 Move W0, 2
	077 Move W21, 2
	078 Call SupportedRenderingFeatures.IsMixedLightingModeSupported, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {91}
	083 Move X0, [X20]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move W0, 1
	089 Call SupportedRenderingFeatures.IsMixedLightingModeSupported, X0
	090 And W21, W0, 1
	091 Move [X19], W21
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 Move X30, [X31+48]
	097 Move X23, [X31+56]
	098 Return 
	099 Call 0x1C17F20

Method: System.Boolean IsMixedLightingModeSupported(UnityEngine.MixedLightingMode mixedMode)

Disassembly:
	0x03C5C5BC STP X30, X21, [X31 - 0x20]!
	0x03C5C5C0 STP X20, X19, [X31 + 0x10]
	0x03C5C5C4 ADRP X21, 0x78A000
	0x03C5C5C8 LDRB W8, [X21 + 0x1AD]
	0x03C5C5CC MOV X19, X1
	0x03C5C5D0 MOV X20, X0
	0x03C5C5D4 TBNZ X8, 0x0, 0x3C5C5EC
	0x03C5C5D8 ADRP X0, 0x503000
	0x03C5C5DC LDR X0, [X0 + 0xF40]
	0x03C5C5E0 BL 0x1C16CF4
	0x03C5C5E4 MOVZ W8, 0x1
	0x03C5C5E8 STRB W8, [X21 + 0x1AD]
	0x03C5C5EC CBZ X19, 0x3C5C608
	0x03C5C5F0 ADRP X21, 0x503000
	0x03C5C5F4 LDR X21, [X21 + 0xF40]
	0x03C5C5F8 LDR X8, [X19]
	0x03C5C5FC LDR X0, [X21]
	0x03C5C600 CMP X8, X0
	0x03C5C604 B.EQ 0x3C5C610
	0x03C5C608 MOV W0, W31
	0x03C5C60C B 0x3C5C654
	0x03C5C610 LDR W8, [X0 + 0xE0]
	0x03C5C614 CBZ W8, 0x3C5C620
	0x03C5C618 MOV X1, X0
	0x03C5C61C B 0x3C5C62C
	0x03C5C620 BL 0x1C16DFC
	0x03C5C624 LDR X1, [X21]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x78B000
	007 Move X20, 0x4FC000
	008 Move W8, [X21+411]
	009 Move X20, [X20+544]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4FC000
	016 Move X0, [X0+544]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+411], W8
	020 Move X0, [X20]
	021 Move [X31+12], W31
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X1, X31, 12
	027 Move W0, W19
	028 Call SupportedRenderingFeatures.IsMixedLightingModeSupportedByRef, X0, X1
	029 Move W0, [X31+12]
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Add X31, X31, 48
	035 Return X0

Method: System.Void IsMixedLightingModeSupportedByRef(UnityEngine.MixedLightingMode mixedMode, System.IntPtr isSupportedPtr)

Disassembly:
	0x03C5C628 LDR X0, [X19]
	0x03C5C62C LDR X8, [X0 + 0x40]
	0x03C5C630 LDR X9, [X1 + 0x40]
	0x03C5C634 MOV X0, X19
	0x03C5C638 CMP X8, X9
	0x03C5C63C B.NE 0x3C5C660
	0x03C5C640 BL 0x1C16E08
	0x03C5C644 LDR W8, [X0]
	0x03C5C648 LDR W9, [X20]
	0x03C5C64C CMP W9, W8
	0x03C5C650 CSET W0, EQ
	0x03C5C654 LDP X20, X19, [X31 + 0x10]
	0x03C5C658 LDP X30, X21, [X31], #0x20
	0x03C5C65C RET
	0x03C5C660 BL 0x1C171E0
	0x03C5C664 LDR W8, [X0]
	0x03C5C668 CMP W8, W1
	0x03C5C66C CSET W0, EQ
	0x03C5C670 RET
	0x03C5C674 STR X30, [X31 - 0x20]!
	0x03C5C678 STP X20, X19, [X31 + 0x10]
	0x03C5C67C ADRP X19, 0x78A000
	0x03C5C680 ADRP X20, 0x503000
	0x03C5C684 LDRB W8, [X19 + 0x1AE]
	0x03C5C688 LDR X20, [X20 + 0xF40]
	0x03C5C68C TBNZ X8, 0x0, 0x3C5C6A4
	0x03C5C690 ADRP X0, 0x503000
	0x03C5C694 LDR X0, [X0 + 0xF40]
	0x03C5C698 BL 0x1C16CF4
	0x03C5C69C MOVZ W8, 0x1
	0x03C5C6A0 STRB W8, [X19 + 0x1AE]
	0x03C5C6A4 LDR X8, [X20]
	0x03C5C6A8 LDP X20, X19, [X31 + 0x10]
	0x03C5C6AC LDR X8, [X8 + 0xB8]
	0x03C5C6B0 STR W31, [X8]
	0x03C5C6B4 LDR X30, [X31], #0x20
	0x03C5C6B8 RET
	0x03C5C6BC MOV X1, X31
	0x03C5C6C0 B 0x3399AF8
	0x03C5C6C4 STP X30, X21, [X31 - 0x20]!
	0x03C5C6C8 STP X20, X19, [X31 + 0x10]
	0x03C5C6CC ADRP X21, 0x78A000
	0x03C5C6D0 LDRB W8, [X21 + 0x1AF]
	0x03C5C6D4 MOV X19, X1
	0x03C5C6D8 MOV X20, X0
	0x03C5C6DC TBNZ X8, 0x0, 0x3C5C6F4
	0x03C5C6E0 ADRP X0, 0x503000
	0x03C5C6E4 LDR X0, [X0 + 0xF48]
	0x03C5C6E8 BL 0x1C16CF4
	0x03C5C6EC MOVZ W8, 0x1
	0x03C5C6F0 STRB W8, [X21 + 0x1AF]
	0x03C5C6F4 CBZ X19, 0x3C5C710
	0x03C5C6F8 ADRP X21, 0x503000
	0x03C5C6FC LDR X21, [X21 + 0xF48]
	0x03C5C700 LDR X8, [X19]
	0x03C5C704 LDR X0, [X21]
	0x03C5C708 CMP X8, X0
	0x03C5C70C B.EQ 0x3C5C718
	0x03C5C710 MOV W0, W31
	0x03C5C714 B 0x3C5C75C
	0x03C5C718 LDR W8, [X0 + 0xE0]
	0x03C5C71C CBZ W8, 0x3C5C728
	0x03C5C720 MOV X1, X0
	0x03C5C724 B 0x3C5C734
	0x03C5C728 BL 0x1C16DFC
	0x03C5C72C LDR X1, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x78B000
	007 Move X21, 0x4FC000
	008 Move W8, [X22+412]
	009 Move X21, [X21+544]
	010 Move X19, X1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4FC000
	017 Move X0, [X0+544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+412], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call IntPtr.op_Explicit, X0
	024 Move X8, [X21]
	025 Move X19, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move W0, 1
	032 Call SupportedRenderingFeatures.IsLightmapBakeTypeSupported, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {80}
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Compare W20, 0
	040 JumpIfNotEqual {80}
	041 Move X0, [X21]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Call SupportedRenderingFeatures.get_active
	047 Compare X0, 0
	048 JumpIfEqual {88}
	049 Move W8, [X0+24]
	050 Move TEMP, X8
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {80}
	054 Move W8, 1
	055 Move X0, [X21]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Call SupportedRenderingFeatures.get_active
	061 Compare X0, 0
	062 JumpIfEqual {88}
	063 Move W8, [X0+24]
	064 Move W8, W8
	065 ShiftRight W8, 2
	066 And W8, W8, 3
	067 Move X0, [X21]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Call SupportedRenderingFeatures.get_active
	073 Compare X0, 0
	074 JumpIfEqual {88}
	075 Move W8, [X0+24]
	076 Move TEMP, X8
	077 And TEMP, TEMP, 2
	078 Compare TEMP, 2
	079 JumpIfEqual {54}
	080 Move W8, W31
	081 Move [X19], W8
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Return 
	088 Call 0x1C17F20

Method: System.Boolean IsLightmapBakeTypeSupported(UnityEngine.LightmapBakeType bakeType)

Disassembly:
	0x03C5C730 LDR X0, [X19]
	0x03C5C734 LDR X8, [X0 + 0x40]
	0x03C5C738 LDR X9, [X1 + 0x40]
	0x03C5C73C MOV X0, X19
	0x03C5C740 CMP X8, X9
	0x03C5C744 B.NE 0x3C5C768
	0x03C5C748 BL 0x1C16E08
	0x03C5C74C LDR W8, [X0]
	0x03C5C750 LDR W9, [X20]
	0x03C5C754 CMP W9, W8
	0x03C5C758 CSET W0, EQ
	0x03C5C75C LDP X20, X19, [X31 + 0x10]
	0x03C5C760 LDP X30, X21, [X31], #0x20
	0x03C5C764 RET
	0x03C5C768 BL 0x1C171E0
	0x03C5C76C LDR W8, [X0]
	0x03C5C770 CMP W8, W1
	0x03C5C774 CSET W0, EQ
	0x03C5C778 RET
	0x03C5C77C STR X30, [X31 - 0x20]!
	0x03C5C780 STP X20, X19, [X31 + 0x10]
	0x03C5C784 ADRP X19, 0x78A000
	0x03C5C788 ADRP X20, 0x503000
	0x03C5C78C LDRB W8, [X19 + 0x1B0]
	0x03C5C790 LDR X20, [X20 + 0xF48]
	0x03C5C794 TBNZ X8, 0x0, 0x3C5C7AC
	0x03C5C798 ADRP X0, 0x503000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x78B000
	007 Move X20, 0x4FC000
	008 Move W8, [X21+413]
	009 Move X20, [X20+544]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4FC000
	016 Move X0, [X0+544]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+413], W8
	020 Move X0, [X20]
	021 Move [X31+12], W31
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Add X1, X31, 12
	027 Move W0, W19
	028 Call SupportedRenderingFeatures.IsLightmapBakeTypeSupportedByRef, X0, X1
	029 Move W0, [X31+12]
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Add X31, X31, 48
	035 Return X0

Method: System.Void IsLightmapBakeTypeSupportedByRef(UnityEngine.LightmapBakeType bakeType, System.IntPtr isSupportedPtr)

Disassembly:
	0x03C5C79C LDR X0, [X0 + 0xF48]
	0x03C5C7A0 BL 0x1C16CF4
	0x03C5C7A4 MOVZ W8, 0x1
	0x03C5C7A8 STRB W8, [X19 + 0x1B0]
	0x03C5C7AC LDR X8, [X20]
	0x03C5C7B0 LDP X20, X19, [X31 + 0x10]
	0x03C5C7B4 LDR X8, [X8 + 0xB8]
	0x03C5C7B8 STR W31, [X8]
	0x03C5C7BC LDR X30, [X31], #0x20
	0x03C5C7C0 RET
	0x03C5C7C4 MOV X1, X31
	0x03C5C7C8 B 0x3399AF8
	0x03C5C7CC STP X30, X21, [X31 - 0x20]!
	0x03C5C7D0 STP X20, X19, [X31 + 0x10]
	0x03C5C7D4 ADRP X21, 0x78A000
	0x03C5C7D8 LDRB W8, [X21 + 0x1B1]
	0x03C5C7DC MOV X19, X1
	0x03C5C7E0 MOV X20, X0
	0x03C5C7E4 TBNZ X8, 0x0, 0x3C5C7FC
	0x03C5C7E8 ADRP X0, 0x503000
	0x03C5C7EC LDR X0, [X0 + 0xF50]
	0x03C5C7F0 BL 0x1C16CF4
	0x03C5C7F4 MOVZ W8, 0x1
	0x03C5C7F8 STRB W8, [X21 + 0x1B1]
	0x03C5C7FC CBZ X19, 0x3C5C818
	0x03C5C800 ADRP X21, 0x503000
	0x03C5C804 LDR X21, [X21 + 0xF50]
	0x03C5C808 LDR X8, [X19]
	0x03C5C80C LDR X0, [X21]
	0x03C5C810 CMP X8, X0
	0x03C5C814 B.EQ 0x3C5C820
	0x03C5C818 MOV W0, W31
	0x03C5C81C B 0x3C5C864
	0x03C5C820 LDR W8, [X0 + 0xE0]
	0x03C5C824 CBZ W8, 0x3C5C830
	0x03C5C828 MOV X1, X0
	0x03C5C82C B 0x3C5C83C
	0x03C5C830 BL 0x1C16DFC
	0x03C5C834 LDR X1, [X21]
	0x03C5C838 LDR X0, [X19]
	0x03C5C83C LDR X8, [X0 + 0x40]
	0x03C5C840 LDR X9, [X1 + 0x40]
	0x03C5C844 MOV X0, X19
	0x03C5C848 CMP X8, X9
	0x03C5C84C B.NE 0x3C5C870
	0x03C5C850 BL 0x1C16E08
	0x03C5C854 LDR W8, [X0]
	0x03C5C858 LDR W9, [X20]
	0x03C5C85C CMP W9, W8
	0x03C5C860 CSET W0, EQ
	0x03C5C864 LDP X20, X19, [X31 + 0x10]
	0x03C5C868 LDP X30, X21, [X31], #0x20
	0x03C5C86C RET
	0x03C5C870 BL 0x1C171E0
	0x03C5C874 LDR W8, [X0]
	0x03C5C878 CMP W8, W1
	0x03C5C87C CSET W0, EQ
	0x03C5C880 RET
	0x03C5C884 STR X30, [X31 - 0x20]!
	0x03C5C888 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x78B000
	006 Move W8, [X21+414]
	007 Move X19, X1
	008 Move W20, W0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x4FC000
	014 Move X0, [X0+544]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+414], W8
	018 Move X21, 0x4FC000
	019 Move X21, [X21+544]
	020 Move X0, X19
	021 Move X1, X31
	022 Call IntPtr.op_Explicit, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X19, X0
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move W0, 2
	031 Call SupportedRenderingFeatures.IsLightmapBakeTypeSupported, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {71}
	036 Move X0, [X21]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Call SupportedRenderingFeatures.get_active
	042 Compare X0, 0
	043 JumpIfEqual {77}
	044 Move W8, [X0+24]
	045 Compare W8, 0
	046 JumpIfEqual {71}
	047 Move X0, [X21]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Call SupportedRenderingFeatures.get_active
	053 Compare X0, 0
	054 JumpIfEqual {77}
	055 Move W8, [X0+28]
	056 NotImplemented "Instruction BICS not yet implemented."
	057 NotImplemented "Instruction CSET not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move [X19], W8
	060 Move X0, [X21]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Call SupportedRenderingFeatures.get_active
	066 Compare X0, 0
	067 JumpIfEqual {77}
	068 Move W8, [X0+37]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Move [X19], W31
	072 Move X20, [X31+16]
	073 Move X19, [X31+24]
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Return 
	077 Call 0x1C17F20

Method: System.Void IsLightmapsModeSupportedByRef(UnityEngine.LightmapsMode mode, System.IntPtr isSupportedPtr)

Disassembly:
	0x03C5C88C ADRP X19, 0x78A000
	0x03C5C890 ADRP X20, 0x503000
	0x03C5C894 LDRB W8, [X19 + 0x1B2]
	0x03C5C898 LDR X20, [X20 + 0xF50]
	0x03C5C89C TBNZ X8, 0x0, 0x3C5C8B4
	0x03C5C8A0 ADRP X0, 0x503000
	0x03C5C8A4 LDR X0, [X0 + 0xF50]
	0x03C5C8A8 BL 0x1C16CF4
	0x03C5C8AC MOVZ W8, 0x1
	0x03C5C8B0 STRB W8, [X19 + 0x1B2]
	0x03C5C8B4 LDR X8, [X20]
	0x03C5C8B8 LDP X20, X19, [X31 + 0x10]
	0x03C5C8BC LDR X8, [X8 + 0xB8]
	0x03C5C8C0 STR W31, [X8]
	0x03C5C8C4 LDR X30, [X31], #0x20
	0x03C5C8C8 RET
	0x03C5C8CC MOV X1, X31
	0x03C5C8D0 B 0x339A95C
	0x03C5C8D4 LDR X8, [X0]
	0x03C5C8D8 CMP X8, X1
	0x03C5C8DC CSET W0, EQ
	0x03C5C8E0 RET
	0x03C5C8E4 STP X30, X21, [X31 - 0x20]!
	0x03C5C8E8 STP X20, X19, [X31 + 0x10]
	0x03C5C8EC ADRP X21, 0x78A000
	0x03C5C8F0 LDRB W8, [X21 + 0x1B3]
	0x03C5C8F4 MOV X20, X1
	0x03C5C8F8 MOV X19, X0
	0x03C5C8FC TBNZ X8, 0x0, 0x3C5C914
	0x03C5C900 ADRP X0, 0x503000
	0x03C5C904 LDR X0, [X0 + 0xF58]
	0x03C5C908 BL 0x1C16CF4
	0x03C5C90C MOVZ W8, 0x1
	0x03C5C910 STRB W8, [X21 + 0x1B3]
	0x03C5C914 CBZ X20, 0x3C5C930

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x78B000
	007 Move X21, 0x4FC000
	008 Move W8, [X22+415]
	009 Move X21, [X21+544]
	010 Move X20, X1
	011 Move W19, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4FC000
	017 Move X0, [X0+544]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+415], W8
	021 Move X0, X20
	022 Move X1, X31
	023 Call IntPtr.op_Explicit, X0
	024 Move X8, [X21]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Call SupportedRenderingFeatures.get_active
	032 Compare X0, 0
	033 JumpIfEqual {44}
	034 Move W8, [X0+32]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 NotImplemented "Instruction BICS not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move [X20], W8
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+48]
	043 Return 
	044 Call 0x1C17F20

Method: System.Void IsLightmapperSupportedByRef(System.Int32 lightmapper, System.IntPtr isSupportedPtr)

Disassembly:
	0x03C5C918 ADRP X8, 0x503000
	0x03C5C91C LDR X8, [X8 + 0xF58]
	0x03C5C920 LDR X9, [X20]
	0x03C5C924 LDR X8, [X8]
	0x03C5C928 CMP X9, X8
	0x03C5C92C B.EQ 0x3C5C938
	0x03C5C930 MOV W0, W31
	0x03C5C934 B 0x3C5C950
	0x03C5C938 MOV X0, X20
	0x03C5C93C BL 0x1C16E08
	0x03C5C940 LDR X8, [X0]
	0x03C5C944 LDR X9, [X19]
	0x03C5C948 CMP X9, X8
	0x03C5C94C CSET W0, EQ
	0x03C5C950 LDP X20, X19, [X31 + 0x10]
	0x03C5C954 LDP X30, X21, [X31], #0x20
	0x03C5C958 RET
	0x03C5C95C STP X1, X2, [X0]
	0x03C5C960 STP X3, X4, [X0 + 0x10]
	0x03C5C964 LDR W14, [X5 + 0x18]
	0x03C5C968 LDR X15, [X5 + 0x10]
	0x03C5C96C LDR V0, [X5]
	0x03C5C970 LDR W8, [X31 + 0x30]
	0x03C5C974 STR W14, [X0 + 0x38]
	0x03C5C978 STR X15, [X0 + 0x30]
	0x03C5C97C STR V0, [X0 + 0x2]
	0x03C5C980 LDR W9, [X31 + 0x28]
	0x03C5C984 LDR X10, [X31 + 0x20]
	0x03C5C988 LDR W11, [X31 + 0x18]
	0x03C5C98C LDR X12, [X31 + 0x10]
	0x03C5C990 LDR W13, [X31 + 0x8]
	0x03C5C994 LDR W16, [X31]
	0x03C5C998 LDP V0, V1, [X6]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x78B000
	006 Move W8, [X21+416]
	007 Move X19, X1
	008 Move W20, W0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x4FC000
	014 Move X0, [X0+544]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+416], W8
	018 Move X0, X19
	019 Move X1, X31
	020 Call IntPtr.op_Explicit, X0
	021 Move X19, X0
	022 Compare W20, 0
	023 JumpIfEqual {25}
	024 Move W8, 1
	025 Move X8, 0x4FC000
	026 Move X8, [X8+544]
	027 Move X0, [X8]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call SupportedRenderingFeatures.get_active
	033 Compare X0, 0
	034 JumpIfEqual {42}
	035 Move W8, [X0+36]
	036 Move [X19], W8
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 
	042 Call 0x1C17F20

Method: System.Void IsUIOverlayRenderedBySRP(System.IntPtr isSupportedPtr)

Disassembly:
	0x03C5C99C LDP V2, V3, [X6 + 0x20]
	0x03C5C9A0 STR W13, [X0 + 0x84]
	0x03C5C9A4 STP W7, W16, [X0 + 0x7C]
	0x03C5C9A8 STR X12, [X0 + 0x88]
	0x03C5C9AC STR W11, [X0 + 0x90]
	0x03C5C9B0 STR X10, [X0 + 0x98]
	0x03C5C9B4 STP W9, W8, [X0 + 0xA4]
	0x03C5C9B8 STUR V3, [X0 + 0x6C]
	0x03C5C9BC STUR V2, [X0 + 0x5C]
	0x03C5C9C0 STUR V1, [X0 + 0x4C]
	0x03C5C9C4 STUR V0, [X0 + 0x3C]
	0x03C5C9C8 STRB W31, [X0 + 0xA0]
	0x03C5C9CC RET
	0x03C5C9D0 SUB X31, X31, 0x180
	0x03C5C9D4 STP X29, X30, [X31 + 0x130]
	0x03C5C9D8 STP X26, X25, [X31 + 0x140]
	0x03C5C9DC STP X24, X23, [X31 + 0x150]
	0x03C5C9E0 STP X22, X21, [X31 + 0x160]
	0x03C5C9E4 STP X20, X19, [X31 + 0x170]
	0x03C5C9E8 ADRP X25, 0x78A000
	0x03C5C9EC ADRP X23, 0x503000
	0x03C5C9F0 ADRP X24, 0x503000
	0x03C5C9F4 ADRP X26, 0x503000
	0x03C5C9F8 LDRB W8, [X25 + 0x1B4]
	0x03C5C9FC LDR X23, [X23 + 0xF60]
	0x03C5CA00 LDR X24, [X24 + 0xF68]
	0x03C5CA04 LDR X26, [X26 + 0xF70]
	0x03C5CA08 MOV X20, X3
	0x03C5CA0C MOV X22, X2
	0x03C5CA10 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x78B000
	006 Move X20, 0x4FC000
	007 Move W8, [X21+417]
	008 Move X20, [X20+544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4FC000
	015 Move X0, [X0+544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+417], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call IntPtr.op_Explicit, X0
	022 Move X8, [X20]
	023 Move X19, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Call SupportedRenderingFeatures.get_active
	030 Compare X0, 0
	031 JumpIfEqual {39}
	032 Move W8, [X0+44]
	033 Move [X19], W8
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void IsAutoAmbientProbeBakingSupported(System.IntPtr isSupportedPtr)

Disassembly:
	0x03C5CA14 MOV X21, X0
	0x03C5CA18 TBNZ X8, 0x0, 0x3C5CA48
	0x03C5CA1C ADRP X0, 0x503000
	0x03C5CA20 LDR X0, [X0 + 0xF70]
	0x03C5CA24 BL 0x1C16CF4
	0x03C5CA28 ADRP X0, 0x503000
	0x03C5CA2C LDR X0, [X0 + 0xF68]
	0x03C5CA30 BL 0x1C16CF4
	0x03C5CA34 ADRP X0, 0x503000
	0x03C5CA38 LDR X0, [X0 + 0xF60]
	0x03C5CA3C BL 0x1C16CF4
	0x03C5CA40 MOVZ W8, 0x1
	0x03C5CA44 STRB W8, [X25 + 0x1B4]
	0x03C5CA48 LDR X0, [X19 + 0x50]
	0x03C5CA4C LDR W1, [X19 + 0x58]
	0x03C5CA50 LDR X3, [X23]
	0x03C5CA54 MOV W2, W31
	0x03C5CA58 BL 0x2222490
	0x03C5CA5C LDR W8, [X19 + 0x70]
	0x03C5CA60 MOV X23, X0
	0x03C5CA64 LDR X0, [X19 + 0x68]
	0x03C5CA68 LDR X3, [X24]
	0x03C5CA6C MOV X24, X1
	0x03C5CA70 MOV W1, W8
	0x03C5CA74 MOV W2, W31
	0x03C5CA78 BL 0x22223DC
	0x03C5CA7C MOV X25, X0
	0x03C5CA80 LDR X0, [X19 + 0x98]
	0x03C5CA84 LDR X3, [X26]
	0x03C5CA88 MOV X26, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x78B000
	006 Move X20, 0x4FC000
	007 Move W8, [X21+418]
	008 Move X20, [X20+544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4FC000
	015 Move X0, [X0+544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+418], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call IntPtr.op_Explicit, X0
	022 Move X8, [X20]
	023 Move X19, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Call SupportedRenderingFeatures.get_active
	030 Compare X0, 0
	031 JumpIfEqual {39}
	032 Move W8, [X0+55]
	033 Move [X19], W8
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void IsAutoDefaultReflectionProbeBakingSupported(System.IntPtr isSupportedPtr)

Disassembly:
	0x03C5CA8C MOVZ W1, 0x1
	0x03C5CA90 MOV W2, W31
	0x03C5CA94 BL 0x2222370
	0x03C5CA98 CBZ X21, 0x3C5CBA8
	0x03C5CA9C LDUR V0, [X22 + 0xC]
	0x03C5CAA0 LDR V1, [X22]
	0x03C5CAA4 LDR X8, [X21 + 0x18]
	0x03C5CAA8 STUR V0, [X31 + 0xC]
	0x03C5CAAC STR V1, [X31]
	0x03C5CAB0 LDR V2, [X31]
	0x03C5CAB4 LDUR V3, [X31 + 0xC]
	0x03C5CAB8 LDUR V0, [X19 + 0x74]
	0x03C5CABC LDR W9, [X19 + 0x7C]
	0x03C5CAC0 LDR X10, [X19 + 0x80]
	0x03C5CAC4 LDR W11, [X19 + 0x88]
	0x03C5CAC8 LDR X12, [X19 + 0x90]
	0x03C5CACC LDUR V1, [X19 + 0x5C]
	0x03C5CAD0 STRB W31, [X31 + 0x1E]
	0x03C5CAD4 STRH W31, [X31 + 0x1C]
	0x03C5CAD8 STR V2, [X31 + 0x6]
	0x03C5CADC STUR V3, [X31 + 0x6C]
	0x03C5CAE0 LDP V3, V2, [X19 + 0x30]
	0x03C5CAE4 LDP V4, V5, [X19 + 0x10]
	0x03C5CAE8 STP V3, V2, [X31 + 0x40]
	0x03C5CAEC STP V4, V5, [X31 + 0x20]
	0x03C5CAF0 CBZ X8, 0x3C5CBAC
	0x03C5CAF4 LDR V2, [X31 + 0x6]
	0x03C5CAF8 MOV X3, X0
	0x03C5CAFC LDR X14, [X8 + 0x18]
	0x03C5CB00 LDR X0, [X8 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x78B000
	006 Move X20, 0x4FC000
	007 Move W8, [X21+419]
	008 Move X20, [X20+544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4FC000
	015 Move X0, [X0+544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+419], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call IntPtr.op_Explicit, X0
	022 Move X8, [X20]
	023 Move X19, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Call SupportedRenderingFeatures.get_active
	030 Compare X0, 0
	031 JumpIfEqual {39}
	032 Move W8, [X0+56]
	033 Move [X19], W8
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void OverridesLightProbeSystem(System.IntPtr overridesPtr)

Disassembly:
	0x03C5CB04 LDUR V3, [X31 + 0x6C]
	0x03C5CB08 STR V2, [X31 + 0xA]
	0x03C5CB0C LDP V2, V4, [X31 + 0x20]
	0x03C5CB10 ADD X13, X31, 0x80
	0x03C5CB14 STP X23, X24, [X31 + 0x80]
	0x03C5CB18 STP X25, X26, [X31 + 0x90]
	0x03C5CB1C STUR V3, [X13 + 0x2C]
	0x03C5CB20 STUR V2, [X13 + 0x3C]
	0x03C5CB24 LDP V3, V2, [X31 + 0x40]
	0x03C5CB28 LDRH W15, [X31 + 0x1C]
	0x03C5CB2C LDRB W16, [X31 + 0x1E]
	0x03C5CB30 STUR V4, [X13 + 0x4C]
	0x03C5CB34 STUR V3, [X13 + 0x5C]
	0x03C5CB38 STUR V2, [X13 + 0x6C]
	0x03C5CB3C STUR D0, [X13 + 0x7C]
	0x03C5CB40 STR W9, [X31 + 0x104]
	0x03C5CB44 STR X10, [X31 + 0x108]
	0x03C5CB48 STR W11, [X31 + 0x110]
	0x03C5CB4C STR W31, [X31 + 0x114]
	0x03C5CB50 STR X12, [X31 + 0x118]
	0x03C5CB54 STRB W31, [X31 + 0x120]
	0x03C5CB58 STURH W15, [X13 + 0xA1]
	0x03C5CB5C STRB W16, [X31 + 0x123]
	0x03C5CB60 STUR D1, [X13 + 0xA4]
	0x03C5CB64 STR W31, [X31 + 0x12C]
	0x03C5CB68 LDR X6, [X8 + 0x28]
	0x03C5CB6C MOV X4, X1
	0x03C5CB70 ADD X2, X31, 0x80
	0x03C5CB74 MOV X1, X21
	0x03C5CB78 MOV X5, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x78B000
	006 Move X20, 0x4FC000
	007 Move W8, [X21+420]
	008 Move X20, [X20+544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4FC000
	015 Move X0, [X0+544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+420], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call IntPtr.op_Explicit, X0
	022 Move X8, [X20]
	023 Move X19, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Call SupportedRenderingFeatures.get_active
	030 Compare X0, 0
	031 JumpIfEqual {39}
	032 Move W8, [X0+58]
	033 Move [X19], W8
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Call 0x1C17F20

Method: System.Void FallbackLightmapperByRef(System.IntPtr lightmapperPtr)

Disassembly:
	0x03C5CB7C BLR X14
	0x03C5CB80 STP X0, X1, [X19]
	0x03C5CB84 MOV X0, X31
	0x03C5CB88 BL 0x3BFDDB0
	0x03C5CB8C LDP X20, X19, [X31 + 0x170]
	0x03C5CB90 LDP X22, X21, [X31 + 0x160]
	0x03C5CB94 LDP X24, X23, [X31 + 0x150]

ISIL:
	001 Move [X31-16], X30
	002 Move X1, X31
	003 Call IntPtr.op_Explicit, X0
	004 Move W8, 1
	005 Move [X0], W8
	006 Move X30, [X31+16]
	007 Return 

Method: System.Void .ctor()

Disassembly:
	0x03C56A38 BL 0x1C16CF4
	0x03C56A3C MOVZ W8, 0x1
	0x03C56A40 STRB W8, [X20 + 0x91]
	0x03C56A44 LDRB W8, [X19 + 0x110]
	0x03C56A48 CBZ W8, 0x3C56A80
	0x03C56A4C ADRP X8, 0x509000
	0x03C56A50 LDR X8, [X8 + 0xE10]
	0x03C56A54 ADRP X20, 0x509000
	0x03C56A58 ADD X0, X19, 0x110
	0x03C56A5C LDR X1, [X8]
	0x03C56A60 LDR X20, [X20 + 0xE00]
	0x03C56A64 BL 0x242C3C0
	0x03C56A68 LDR X2, [X20]
	0x03C56A6C BL 0x22226C4
	0x03C56A70 LDP X20, X19, [X31 + 0x10]
	0x03C56A74 MOV X1, X31
	0x03C56A78 LDR X30, [X31], #0x20
	0x03C56A7C B 0x33C693C
	0x03C56A80 LDP X20, X19, [X31 + 0x10]
	0x03C56A84 MOV X0, X31
	0x03C56A88 LDR X30, [X31], #0x20
	0x03C56A8C RET
	0x03C56A90 STR X30, [X31 - 0x20]!
	0x03C56A94 STP X20, X19, [X31 + 0x10]
	0x03C56A98 ADRP X20, 0x790000
	0x03C56A9C LDRB W8, [X20 + 0x92]
	0x03C56AA0 MOV X19, X0
	0x03C56AA4 TBNZ X8, 0x0, 0x3C56AD4
	0x03C56AA8 ADRP X0, 0x509000
	0x03C56AAC LDR X0, [X0 + 0xE18]
	0x03C56AB0 BL 0x1C16CF4
	0x03C56AB4 ADRP X0, 0x509000
	0x03C56AB8 LDR X0, [X0 + 0xDF0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x791000
	006 Move X20, 0x50A000
	007 Move W8, [X21+421]
	008 Move X20, [X20+3544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x50A000
	015 Move X0, [X0+3544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+421], W8
	019 Move X8, -51814400
	020 Move V0, [X8+146]
	021 Move X9, 1
	022 NotImplemented "Instruction MOVK not yet implemented."
	023 NotImplemented "Instruction MOVK not yet implemented."
	024 Or W10, W31, 0x1010101
	025 NotImplemented "Instruction STURH not yet implemented."
	026 NotImplemented "Instruction STURH not yet implemented."
	027 Move [X19+32], X9
	028 Move [X19+39], X10
	029 Move [X19+49], X9
	030 Move [X19+1], V0
	031 Move [X19+59], W31
	032 Move X8, [X20]
	033 Move X0, X19
	034 Move X1, X31
	035 Move [X19+64], X8
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call Object..ctor, X0
	041 Return 

Method: System.Void .cctor()

Disassembly:
	0x03C5CB98 LDP X26, X25, [X31 + 0x140]
	0x03C5CB9C LDP X29, X30, [X31 + 0x130]
	0x03C5CBA0 ADD X31, X31, 0x180
	0x03C5CBA4 RET
	0x03C5CBA8 BL 0x1C16F20
	0x03C5CBAC BL 0x1C16F20
	0x03C5CBB0 B 0x3C5CBB8
	0x03C5CBB4 B 0x3C5CBB8
	0x03C5CBB8 MOV X19, X0
	0x03C5CBBC CMP W1, 0x1
	0x03C5CBC0 B.NE 0x3C5CBE8
	0x03C5CBC4 MOV X0, X19
	0x03C5CBC8 BL 0x3EB1AD0
	0x03C5CBCC LDR X20, [X0]
	0x03C5CBD0 BL 0x3EB1AE0
	0x03C5CBD4 MOV X0, X31
	0x03C5CBD8 BL 0x3BFDDB0
	0x03C5CBDC CBZ X20, 0x3C5CB8C
	0x03C5CBE0 MOV X0, X20
	0x03C5CBE4 BL 0x1C16F18
	0x03C5CBE8 MOV X20, X31
	0x03C5CBEC B 0x3C5CBF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x78B000
	005 Move X20, 0x4FC000
	006 Move W8, [X19+422]
	007 Move X20, [X20+544]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4FC000
	013 Move X0, [X0+544]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+422], W8
	017 Move X0, [X20]
	018 Call 0x1C17F10
	019 Move X19, X0
	020 Call SupportedRenderingFeatures..ctor, X0
	021 Move X8, [X20]
	022 Move X8, [X8+184]
	023 Move [X8], X19
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return 

