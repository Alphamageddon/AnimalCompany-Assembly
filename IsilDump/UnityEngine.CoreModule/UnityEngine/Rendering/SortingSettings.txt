Type: UnityEngine.Rendering.SortingSettings

Method: System.Void .ctor(UnityEngine.Camera camera)

Disassembly:
	0x03C5BF18 ADD X0, X31, 0x0
	0x03C5BF1C MOV X1, X31
	0x03C5BF20 ORR X20, X8, 0x7
	0x03C5BF24 ORR X21, X8, 0xF
	0x03C5BF28 ORR X22, X8, 0xF
	0x03C5BF2C STR V0, [X31]
	0x03C5BF30 BL 0x338FE0C
	0x03C5BF34 MOV W23, W0
	0x03C5BF38 MOV X0, X20
	0x03C5BF3C MOV X1, X31
	0x03C5BF40 BL 0x338FE0C
	0x03C5BF44 MOV W20, W0
	0x03C5BF48 MOV X0, X21
	0x03C5BF4C MOV X1, X31
	0x03C5BF50 BL 0x338FE0C
	0x03C5BF54 MOV W21, W0
	0x03C5BF58 MOV X0, X22
	0x03C5BF5C MOV X1, X31
	0x03C5BF60 BL 0x338FE0C
	0x03C5BF64 MOVZ W22, 0x18D
	0x03C5BF68 MUL W8, W24, W22
	0x03C5BF6C EOR W8, W23, W8, 0x0
	0x03C5BF70 EOR W8, W8, W20, 0x2
	0x03C5BF74 EOR W8, W8, W21, 0x2
	0x03C5BF78 EOR W20, W8, W0, 0x1
	0x03C5BF7C ADD X0, X19, 0x14
	0x03C5BF80 MOV X1, X31
	0x03C5BF84 BL 0x3C0B718
	0x03C5BF88 MUL W8, W20, W22
	0x03C5BF8C EOR W20, W8, W0, 0x0
	0x03C5BF90 ADD X0, X19, 0x24
	0x03C5BF94 MOV X1, X31
	0x03C5BF98 BL 0x2477824

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x78C000
	007 Move X22, 0x4F6000
	008 Move W8, [X21+402]
	009 Move X22, [X22+3200]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4F6000
	017 Move X0, [X0+3200]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+402], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X21, 0x78C000
	027 Move X2, [X21+200]
	028 Compare X2, 0
	029 JumpIfNotEqual {35}
	030 Move X0, -51621888
	031 Add X0, X0, 440
	032 Call 0x1C17CB8
	033 Move X2, X0
	034 Move [X21+200], X0
	035 Move X0, X20
	036 Move X1, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 CallNoReturn X2

Method: System.Void set_customAxis(UnityEngine.Vector3 value)

Disassembly:
	0x03C5BFA4 ADD X0, X19, 0x64
	0x03C5BFA8 MOV X1, X31
	0x03C5BFAC BL 0x338FE0C

ISIL:
	001 Move [X0+76], S0
	002 Move [X0+84], S1
	003 Move [X0+84], S2
	004 Return 

Method: UnityEngine.Rendering.SortingCriteria get_criteria()

Disassembly:
	0x03C5BF9C MUL W8, W20, W22
	0x03C5BFA0 EOR W20, W8, W0, 0x0

ISIL:
	001 Move W0, [X0+88]
	002 Return X0

Method: System.Void set_criteria(UnityEngine.Rendering.SortingCriteria value)

Disassembly:
	0x03C5BFB0 MUL W8, W20, W22
	0x03C5BFB4 EOR W20, W8, W0, 0x0

ISIL:
	001 Move [X0+88], W1
	002 Return 

Method: System.Void set_distanceMetric(UnityEngine.Rendering.DistanceMetric value)

Disassembly:
	0x03C5BFB8 ADD X0, X19, 0x68
	0x03C5BFBC MOV X1, X31

ISIL:
	001 Move [X0+92], W1
	002 Return 

Method: System.Boolean Equals(UnityEngine.Rendering.SortingSettings other)

Disassembly:
	0x03C54B70 STRB W8, [X21 + 0x66]
	0x03C54B74 LDR X8, [X19]
	0x03C54B78 MOVZ W1, 0x1
	0x03C54B7C MOV X0, X19
	0x03C54B80 MOVZ W21, 0x1
	0x03C54B84 LDP X9, X2, [X8 + 0x1B8]
	0x03C54B88 BLR X9
	0x03C54B8C LDR X0, [X20]
	0x03C54B90 LDR W8, [X0 + 0xE0]
	0x03C54B94 CBNZ W8, 0x3C54B9C
	0x03C54B98 BL 0x1C16DFC
	0x03C54B9C MOV X0, X19
	0x03C54BA0 MOV X1, X31
	0x03C54BA4 BL 0x33B3E9C
	0x03C54BA8 STRB W21, [X19 + 0x10]
	0x03C54BAC LDP X20, X19, [X31 + 0x10]
	0x03C54BB0 LDP X30, X21, [X31], #0x20
	0x03C54BB4 RET
	0x03C54BB8 RET
	0x03C54BBC MOV X0, X31
	0x03C54BC0 RET
	0x03C54BC4 MOV X1, X31
	0x03C54BC8 B 0x33BDD8C
	0x03C54BCC STR X30, [X31 - 0x30]!
	0x03C54BD0 STP X22, X21, [X31 + 0x10]
	0x03C54BD4 STP X20, X19, [X31 + 0x20]
	0x03C54BD8 LDR X8, [X0]
	0x03C54BDC LDR X1, [X8 + 0x2D0]
	0x03C54BE0 LDR X9, [X8 + 0x2C8]
	0x03C54BE4 BLR X9
	0x03C54BE8 LDP X20, X19, [X31 + 0x20]
	0x03C54BEC LDP X22, X21, [X31 + 0x10]
	0x03C54BF0 LDR X30, [X31], #0x30
	0x03C54BF4 RET
	0x03C54BF8 CMP W1, 0x1
	0x03C54BFC MOV X19, X0
	0x03C54C00 B.NE 0x3C54EB8
	0x03C54C04 MOV X0, X19
	0x03C54C08 BL 0x3EB1AD0
	0x03C54C0C MOV X19, X0
	0x03C54C10 ADRP X0, 0x49F000
	0x03C54C14 LDR X0, [X0 + 0x7D0]
	0x03C54C18 BL 0x1C16D08
	0x03C54C1C LDR X8, [X19]
	0x03C54C20 LDR X1, [X8]
	0x03C54C24 BL 0x1C17270
	0x03C54C28 TBZ X0, 0x0, 0x3C54E8C
	0x03C54C2C LDR X19, [X19]
	0x03C54C30 BL 0x3EB1AE0
	0x03C54C34 CBZ X19, 0x3C54E88
	0x03C54C38 LDR X8, [X19]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move V1, [X1+32]
	006 Move V0, [X1+48]
	007 Move V3, [X1]
	008 Move V2, [X1+16]
	009 Move X19, X1
	010 Add X1, X31, 0
	011 Move X2, X31
	012 Move X20, X0
	013 Move [X31+32], V1
	014 Move [X31+40], V0
	015 Move [X31], V3
	016 Move [X31+8], V2
	017 Call 0x2079B9C
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {47}
	022 Move V0, [X19+64]
	023 Move V1, [X20+64]
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move V0, [X19+68]
	026 Move V1, [X20+68]
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 Move V0, [X19+72]
	029 Move V1, [X20+72]
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 Move V0, [X19+76]
	032 Move V1, [X20+76]
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move V0, [X19+80]
	035 Move V1, [X20+80]
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move V0, [X19+84]
	038 Move V1, [X20+84]
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move W8, [X20+88]
	041 Move W9, [X19+88]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W8, [X20+92]
	044 Move W9, [X19+92]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move W0, W31
	048 Move X20, [X31+80]
	049 Move X19, [X31+88]
	050 Move X30, [X31+64]
	051 Add X31, X31, 96
	052 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C5BFC0 BL 0x338FE0C
	0x03C5BFC4 LDP W9, W10, [X19 + 0x6C]
	0x03C5BFC8 MUL W8, W20, W22
	0x03C5BFCC EOR W8, W8, W0, 0x0
	0x03C5BFD0 MUL W8, W8, W22
	0x03C5BFD4 EOR W8, W8, W9, 0x0
	0x03C5BFD8 MUL W8, W8, W22
	0x03C5BFDC LDP X20, X19, [X31 + 0x40]
	0x03C5BFE0 LDP X22, X21, [X31 + 0x30]
	0x03C5BFE4 LDP X24, X23, [X31 + 0x20]
	0x03C5BFE8 LDR X30, [X31 + 0x10]
	0x03C5BFEC EOR W0, W8, W10, 0x0
	0x03C5BFF0 ADD X31, X31, 0x50
	0x03C5BFF4 RET
	0x03C5BFF8 STP X30, X21, [X31 - 0x20]!
	0x03C5BFFC STP X20, X19, [X31 + 0x10]
	0x03C5C000 ADRP X21, 0x78A000
	0x03C5C004 ADRP X20, 0x497000
	0x03C5C008 LDRB W8, [X21 + 0x1A9]
	0x03C5C00C B 0x3EB175C
	0x03C5C010 MOV X19, X0
	0x03C5C014 TBNZ X8, 0x0, 0x3C5C038
	0x03C5C018 ADRP X0, 0x497000
	0x03C5C01C LDR X0, [X0 + 0x598]
	0x03C5C020 BL 0x1C16CF4
	0x03C5C024 ADRP X0, 0x503000
	0x03C5C028 LDR X0, [X0 + 0x48]
	0x03C5C02C BL 0x1C16CF4
	0x03C5C030 MOVZ W8, 0x1
	0x03C5C034 STRB W8, [X21 + 0x1A9]
	0x03C5C038 LDR X0, [X20]
	0x03C5C03C LDR W19, [X19 + 0x84]
	0x03C5C040 LDR W8, [X0 + 0xE0]
	0x03C5C044 CBNZ W8, 0x3C5C04C
	0x03C5C048 BL 0x1C16DFC
	0x03C5C04C MOV W0, W19

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+104], X21
	004 Move [X31+112], X20
	005 Move [X31+120], X19
	006 Move X21, 0x78C000
	007 Move W8, [X21+403]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x505000
	015 Move X0, [X0+3864]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+403], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x505000
	022 Move X8, [X8+3864]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X1, X0
	030 Add X0, X31, 0
	031 Move W2, 96
	032 Call 0x3EB2AC0
	033 Add X1, X31, 0
	034 Move X0, X19
	035 Call SortingSettings.Equals, X0, X1
	036 Move X20, [X31+112]
	037 Move X19, [X31+120]
	038 Move X30, [X31+96]
	039 Move X21, [X31+104]
	040 And W0, W0, 1
	041 Add X31, X31, 128
	042 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C54D7C LDR X8, [X20]
	0x03C54D80 CMP X8, X0
	0x03C54D84 B.NE 0x3C54E5C
	0x03C54D88 LDR X8, [X19]
	0x03C54D8C MOV X0, X19
	0x03C54D90 LDP X9, X1, [X8 + 0x198]
	0x03C54D94 BLR X9
	0x03C54D98 CBZ X0, 0x3C54E88
	0x03C54D9C MOV X20, X0
	0x03C54DA0 ADRP X0, 0x49F000
	0x03C54DA4 LDR X0, [X0 + 0x818]
	0x03C54DA8 BL 0x1C16D08
	0x03C54DAC MOV X22, X0
	0x03C54DB0 ADRP X0, 0x50B000
	0x03C54DB4 LDR X0, [X0 + 0xDC0]
	0x03C54DB8 BL 0x1C16D08
	0x03C54DBC LDR X8, [X20]
	0x03C54DC0 MOV X21, X0
	0x03C54DC4 LDRH W9, [X8 + 0x12E]
	0x03C54DC8 CBZ X9, 0x3C54DEC
	0x03C54DCC LDR X10, [X8 + 0xB0]
	0x03C54DD0 ADD X10, X10, 0x8
	0x03C54DD4 LDUR X11, [X10 - 0x8]
	0x03C54DD8 CMP X11, X22
	0x03C54DDC B.EQ 0x3C54E00
	0x03C54DE0 SUBS X9, X9, 0x1
	0x03C54DE4 ADD X10, X10, 0x10
	0x03C54DE8 B.NE 0x3C54DD4
	0x03C54DEC MOV X0, X20
	0x03C54DF0 MOV X1, X22
	0x03C54DF4 MOV W2, W31
	0x03C54DF8 BL 0x1C5C788
	0x03C54DFC B 0x3C54E0C
	0x03C54E00 LDRSW X9, [X10]
	0x03C54E04 ADD X8, X8, X9, 0x4, LSL
	0x03C54E08 ADD X0, X8, 0x138
	0x03C54E0C LDP X8, X2, [X0]
	0x03C54E10 MOV X0, X20
	0x03C54E14 MOV X1, X21
	0x03C54E18 BLR X8
	0x03C54E1C MOV X20, X0
	0x03C54E20 ADRP X0, 0x49F000
	0x03C54E24 LDR X0, [X0 + 0x758]
	0x03C54E28 BL 0x1C16D08
	0x03C54E2C CBZ X20, 0x3C54E88
	0x03C54E30 LDR X8, [X20]
	0x03C54E34 LDR X9, [X0 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X1, X31
	008 Move X19, X0
	009 Call 0x2478824
	010 Move W20, W0
	011 Add X0, X19, 64
	012 Move X1, X31
	013 Call Single.GetHashCode, X0
	014 Move W21, W0
	015 Add X0, X19, 68
	016 Move X1, X31
	017 Call Single.GetHashCode, X0
	018 Move W22, W0
	019 Add X0, X19, 72
	020 Move X1, X31
	021 Call Single.GetHashCode, X0
	022 Move W23, 397
	023 Multiply W8, W20, W23
	024 Xor W8, W8, W21
	025 Xor W8, W8, W22
	026 Xor W22, W8, W0
	027 Add X0, X19, 76
	028 Move X1, X31
	029 Call Single.GetHashCode, X0
	030 Move W20, W0
	031 Add X0, X19, 80
	032 Move X1, X31
	033 Call Single.GetHashCode, X0
	034 Move W21, W0
	035 Add X0, X19, 84
	036 Move X1, X31
	037 Call Single.GetHashCode, X0
	038 Xor W8, W20, W21
	039 Multiply W9, W22, W23
	040 Xor W8, W8, W0
	041 Xor W8, W8, W9
	042 Move W10, [X19+88]
	043 Move W9, [X19+92]
	044 Multiply W8, W8, W23
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Xor W8, W8, W10
	050 Multiply W8, W8, W23
	051 Xor W0, W8, W9
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

