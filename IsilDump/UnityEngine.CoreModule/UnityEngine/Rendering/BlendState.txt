Type: UnityEngine.Rendering.BlendState

Method: UnityEngine.Rendering.BlendState get_defaultValue()

Disassembly:
	0x03C51BC4 ADD X0, X19, 0x248
	0x03C51BC8 MOV X1, X31
	0x03C51BCC EOR W22, W8, W9, 0x0
	0x03C51BD0 BL 0x338FE0C
	0x03C51BD4 MOV W20, W0
	0x03C51BD8 ADD X0, X19, 0x24C
	0x03C51BDC MOV X1, X31
	0x03C51BE0 BL 0x338FE0C
	0x03C51BE4 MOV W21, W0
	0x03C51BE8 ADD X0, X19, 0x250
	0x03C51BEC MOV X1, X31
	0x03C51BF0 BL 0x338FE0C
	0x03C51BF4 EOR W8, W20, W21, 0x2
	0x03C51BF8 MUL W9, W22, W24
	0x03C51BFC EOR W8, W8, W0, 0x2
	0x03C51C00 ADD X0, X19, 0x254
	0x03C51C04 MOV X1, X31
	0x03C51C08 EOR W22, W8, W9, 0x0
	0x03C51C0C BL 0x338FE0C
	0x03C51C10 MOV W20, W0
	0x03C51C14 ADD X0, X19, 0x258
	0x03C51C18 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+144], X30
	003 Move [X31+152], X19
	004 NotImplemented "Instruction MOVI not yet implemented."
	005 Add X0, X31, 0
	006 Move W1, W31
	007 Move W2, W31
	008 Move X19, X8
	009 Move [X31+64], W31
	010 Move [X31+32], V0
	011 Move [X31+40], V0
	012 Move [X31], V0
	013 Move [X31+8], V0
	014 Call BlendState..ctor, X0, X1, X2
	015 Add X0, X31, 72
	016 Add X1, X31, 0
	017 Move W2, 68
	018 Call 0x3EB2AC0
	019 Add X1, X31, 72
	020 Move W2, 68
	021 Move X0, X19
	022 Call 0x3EB2AC0
	023 Move X30, [X31+144]
	024 Move X19, [X31+152]
	025 Add X31, X31, 160
	026 Return X0

Method: System.Void .ctor(System.Boolean separateMRTBlend = False, System.Boolean alphaToMask = False)

Disassembly:
	0x03C51C1C BL 0x338FE0C
	0x03C51C20 MOV W21, W0
	0x03C51C24 ADD X0, X19, 0x25C
	0x03C51C28 MOV X1, X31
	0x03C51C2C BL 0x338FE0C
	0x03C51C30 EOR W8, W20, W21, 0x2
	0x03C51C34 MUL W9, W22, W24
	0x03C51C38 EOR W8, W8, W0, 0x2
	0x03C51C3C ADD X0, X19, 0x260
	0x03C51C40 MOV X1, X31
	0x03C51C44 EOR W22, W8, W9, 0x0
	0x03C51C48 BL 0x338FE0C
	0x03C51C4C MOV W20, W0
	0x03C51C50 ADD X0, X19, 0x264
	0x03C51C54 MOV X1, X31
	0x03C51C58 BL 0x338FE0C
	0x03C51C5C MOV W21, W0
	0x03C51C60 ADD X0, X19, 0x268
	0x03C51C64 MOV X1, X31
	0x03C51C68 BL 0x338FE0C
	0x03C51C6C EOR W8, W20, W21, 0x2
	0x03C51C70 MUL W9, W22, W24
	0x03C51C74 EOR W8, W8, W0, 0x2
	0x03C51C78 ADD X0, X19, 0x26C
	0x03C51C7C MOV X1, X31
	0x03C51C80 EOR W21, W8, W9, 0x0
	0x03C51C84 BL 0x338FE0C
	0x03C51C88 LDR W8, [X19 + 0x270]
	0x03C51C8C MUL W9, W21, W24
	0x03C51C90 EOR W9, W9, W0, 0x0
	0x03C51C94 MUL W9, W9, W24
	0x03C51C98 MOV W20, W31
	0x03C51C9C EOR W21, W9, W8, 0x0
	0x03C51CA0 MOVN X22, 0x0
	0x03C51CA4 MOV X0, X19
	0x03C51CA8 MOV W1, W20
	0x03C51CAC BL 0x3C510D4
	0x03C51CB0 LDR X8, [X23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x795000
	008 Move X22, 0x4AC000
	009 Move W8, [X23+4074]
	010 Move X22, [X22+2536]
	011 Move W20, W2
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x4AC000
	019 Move X0, [X0+2536]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+4074], W8
	023 Move W8, 271
	024 NotImplemented "Instruction MOVK not yet implemented."
	025 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	026 Move [X19], V0
	027 Move [X19+8], V0
	028 Move [X19+32], V0
	029 Move [X19+40], V0
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 And W0, W21, 1
	036 Move X1, X31
	037 Call Convert.ToByte, X0
	038 Move [X19+64], W0
	039 And W0, W20, 1
	040 Move X1, X31
	041 Call Convert.ToByte, X0
	042 Move [X19+65], W0
	043 NotImplemented "Instruction STRH not yet implemented."
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Return 

Method: System.Void set_blendState0(UnityEngine.Rendering.RenderTargetBlendState value)

Disassembly:
	0x03C51CC0 STP X8, X22, [X31]
	0x03C51CC4 STP S2, S3, [X31 + 0x18]

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Boolean Equals(UnityEngine.Rendering.BlendState other)

Disassembly:
	0x03C51CC8 BL 0x33D55D8
	0x03C51CCC MUL W8, W21, W24
	0x03C51CD0 ADD W20, W20, 0x1
	0x03C51CD4 CMP W20, 0x6
	0x03C51CD8 EOR W21, W0, W8, 0x0
	0x03C51CDC B.NE 0x3C51CA4
	0x03C51CE0 MOV W20, W31
	0x03C51CE4 MOVN X22, 0x0
	0x03C51CE8 MOVZ W24, 0x18D
	0x03C51CEC MOV X0, X19
	0x03C51CF0 MOV W1, W20
	0x03C51CF4 BL 0x3C511B8
	0x03C51CF8 LDR X8, [X23]
	0x03C51CFC ADD X0, X31, 0x0
	0x03C51D00 MOV X1, X31
	0x03C51D04 STP S0, S1, [X31 + 0x10]
	0x03C51D08 STP X8, X22, [X31]
	0x03C51D0C STP S2, S3, [X31 + 0x18]
	0x03C51D10 BL 0x33D55D8
	0x03C51D14 MUL W8, W21, W24
	0x03C51D18 ADD W20, W20, 0x1
	0x03C51D1C CMP W20, 0x6
	0x03C51D20 EOR W21, W0, W8, 0x0
	0x03C51D24 B.NE 0x3C51CEC
	0x03C51D28 ADD X0, X19, 0x334
	0x03C51D2C MOV X1, X31
	0x03C51D30 BL 0x338FE0C
	0x03C51D34 MOVZ W22, 0x18D
	0x03C51D38 MUL W8, W21, W22
	0x03C51D3C EOR W24, W0, W8, 0x0
	0x03C51D40 ADD X0, X19, 0x338
	0x03C51D44 MOV X1, X31
	0x03C51D48 BL 0x338FE0C
	0x03C51D4C MOV W20, W0
	0x03C51D50 ADD X0, X19, 0x33C
	0x03C51D54 MOV X1, X31
	0x03C51D58 BL 0x338FE0C
	0x03C51D5C MOV W21, W0
	0x03C51D60 ADD X0, X19, 0x340
	0x03C51D64 MOV X1, X31
	0x03C51D68 BL 0x338FE0C
	0x03C51D6C MUL W8, W24, W22
	0x03C51D70 EOR W8, W8, W20, 0x0
	0x03C51D74 EOR W8, W8, W21, 0x2
	0x03C51D78 MOV X23, X31
	0x03C51D7C EOR W20, W8, W0, 0x2
	0x03C51D80 ADD X21, X19, 0x344
	0x03C51D84 ADD X0, X21, X23

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X1, [X1]
	006 Move X20, X0
	007 Call RenderTargetBlendState.Equals, X0, X1
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {68}
	012 Move X1, [X19+8]
	013 Add X0, X20, 8
	014 Call RenderTargetBlendState.Equals, X0, X1
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {68}
	019 Move X1, [X19+16]
	020 Add X0, X20, 16
	021 Call RenderTargetBlendState.Equals, X0, X1
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {68}
	026 Move X1, [X19+24]
	027 Add X0, X20, 24
	028 Call RenderTargetBlendState.Equals, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {68}
	033 Move X1, [X19+32]
	034 Add X0, X20, 32
	035 Call RenderTargetBlendState.Equals, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {68}
	040 Move X1, [X19+40]
	041 Add X0, X20, 40
	042 Call RenderTargetBlendState.Equals, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {68}
	047 Move X1, [X19+48]
	048 Add X0, X20, 48
	049 Call RenderTargetBlendState.Equals, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {68}
	054 Move X1, [X19+56]
	055 Add X0, X20, 56
	056 Call RenderTargetBlendState.Equals, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {68}
	061 Move W8, [X20+64]
	062 Move W9, [X19+64]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, [X20+65]
	065 Move W9, [X19+65]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 NotImplemented "Instruction CSET not yet implemented."
	068 Move W0, W31
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X30, [X31+32]
	072 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C51DFC LDR X30, [X31 + 0x20]
	0x03C51E00 EOR W8, W8, W10, 0x0
	0x03C51E04 MUL W8, W8, W9
	0x03C51E08 EOR W0, W8, W11, 0x0
	0x03C51E0C ADD X31, X31, 0x60
	0x03C51E10 RET
	0x03C51E14 STR W1, [X0 + 0x624]
	0x03C51E18 RET
	0x03C51E1C AND W8, W1, 0x1
	0x03C51E20 STRB W8, [X0 + 0x628]
	0x03C51E24 RET
	0x03C51E28 STR W1, [X0 + 0x62C]
	0x03C51E2C RET
	0x03C51E30 LDR W0, [X0 + 0xC0]
	0x03C51E34 RET
	0x03C51E38 STR X30, [X31 - 0x30]!
	0x03C51E3C STP X22, X21, [X31 + 0x10]
	0x03C51E40 STP X20, X19, [X31 + 0x20]
	0x03C51E44 ADRP X21, 0x794000
	0x03C51E48 ADRP X22, 0x4AB000
	0x03C51E4C LDRB W8, [X21 + 0xFF0]
	0x03C51E50 LDR X22, [X22 + 0x9E8]
	0x03C51E54 MOV W20, W1
	0x03C51E58 MOV X19, X0
	0x03C51E5C TBNZ X8, 0x0, 0x3C51E74
	0x03C51E60 ADRP X0, 0x4AB000
	0x03C51E64 LDR X0, [X0 + 0x9E8]
	0x03C51E68 BL 0x1C16CF4
	0x03C51E6C MOVZ W8, 0x1
	0x03C51E70 STRB W8, [X21 + 0xFF0]
	0x03C51E74 LDR X0, [X22]
	0x03C51E78 LDR W8, [X0 + 0xE0]
	0x03C51E7C CBNZ W8, 0x3C51E84
	0x03C51E80 BL 0x1C16DFC
	0x03C51E84 AND W0, W20, 0x1
	0x03C51E88 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+88], X21
	004 Move [X31+96], X20
	005 Move [X31+104], X19
	006 Move X21, 0x795000
	007 Move W8, [X21+4075]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x50F000
	015 Move X0, [X0+3328]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4075], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x50F000
	022 Move X8, [X8+3328]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X1, X0
	030 Add X0, X31, 8
	031 Move W2, 68
	032 Call 0x3EB2AC0
	033 Add X1, X31, 8
	034 Move X0, X19
	035 Call BlendState.Equals, X0, X1
	036 Move X20, [X31+96]
	037 Move X19, [X31+104]
	038 Move X30, [X31+80]
	039 Move X21, [X31+88]
	040 And W0, W0, 1
	041 Add X31, X31, 112
	042 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C51E8C BL 0x331830C
	0x03C51E90 STR W0, [X19]
	0x03C51E94 LDP X20, X19, [X31 + 0x20]
	0x03C51E98 LDP X22, X21, [X31 + 0x10]
	0x03C51E9C LDR X30, [X31], #0x30
	0x03C51EA0 RET
	0x03C51EA4 STR S0, [X0 + 0x1A8]
	0x03C51EA8 RET
	0x03C51EAC LDR W0, [X0 + 0x1B0]
	0x03C51EB0 RET
	0x03C51EB4 STR W1, [X0 + 0x1B0]
	0x03C51EB8 RET
	0x03C51EBC STR W1, [X0 + 0x1B4]
	0x03C51EC0 RET
	0x03C51EC4 LDP V1, V0, [X1 + 0x20]
	0x03C51EC8 LDP V3, V2, [X1]
	0x03C51ECC STR V0, [X0 + 0x5D]
	0x03C51ED0 STR V1, [X0 + 0x5C]
	0x03C51ED4 STR V2, [X0 + 0x5B]
	0x03C51ED8 STR V3, [X0 + 0x5A]
	0x03C51EDC RET
	0x03C51EE0 LDR V0, [X0 + 0x61]
	0x03C51EE4 LDR V1, [X0 + 0x60]
	0x03C51EE8 LDR V2, [X0 + 0x5F]
	0x03C51EEC LDR V3, [X0 + 0x5E]
	0x03C51EF0 STP V1, V0, [X8 + 0x20]
	0x03C51EF4 STP V3, V2, [X8]
	0x03C51EF8 RET
	0x03C51EFC LDP V1, V0, [X1 + 0x20]
	0x03C51F00 LDP V3, V2, [X1]
	0x03C51F04 STR V0, [X0 + 0x61]
	0x03C51F08 STR V1, [X0 + 0x60]
	0x03C51F0C STR V2, [X0 + 0x5F]
	0x03C51F10 STR V3, [X0 + 0x5E]
	0x03C51F14 RET
	0x03C51F18 STR S0, [X0 + 0x620]
	0x03C51F1C RET
	0x03C51F20 SUB X31, X31, 0x30
	0x03C51F24 STP X30, X21, [X31 + 0x10]
	0x03C51F28 STP X20, X19, [X31 + 0x20]
	0x03C51F2C CMP W1, 0x20
	0x03C51F30 B.CS 0x3C51F4C
	0x03C51F34 ADD X8, X0, W1, 0x2, UXTW
	0x03C51F38 LDR V0, [X8 + 0xD8]
	0x03C51F3C LDP X20, X19, [X31 + 0x20]
	0x03C51F40 LDP X30, X21, [X31 + 0x10]
	0x03C51F44 ADD X31, X31, 0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Call RenderTargetBlendState.GetHashCode, X0
	007 Move W20, W0
	008 Add X0, X19, 8
	009 Call RenderTargetBlendState.GetHashCode, X0
	010 Move W21, 397
	011 Multiply W8, W20, W21
	012 Xor W20, W8, W0
	013 Add X0, X19, 16
	014 Call RenderTargetBlendState.GetHashCode, X0
	015 Multiply W8, W20, W21
	016 Xor W20, W8, W0
	017 Add X0, X19, 24
	018 Call RenderTargetBlendState.GetHashCode, X0
	019 Multiply W8, W20, W21
	020 Xor W20, W8, W0
	021 Add X0, X19, 32
	022 Call RenderTargetBlendState.GetHashCode, X0
	023 Multiply W8, W20, W21
	024 Xor W20, W8, W0
	025 Add X0, X19, 40
	026 Call RenderTargetBlendState.GetHashCode, X0
	027 Multiply W8, W20, W21
	028 Xor W20, W8, W0
	029 Add X0, X19, 48
	030 Call RenderTargetBlendState.GetHashCode, X0
	031 Multiply W8, W20, W21
	032 Xor W20, W8, W0
	033 Add X0, X19, 56
	034 Call RenderTargetBlendState.GetHashCode, X0
	035 Multiply W8, W20, W21
	036 Xor W20, W8, W0
	037 Add X0, X19, 64
	038 Move X1, X31
	039 Call Byte.GetHashCode, X0
	040 Multiply W8, W20, W21
	041 Xor W20, W8, W0
	042 Add X0, X19, 65
	043 Move X1, X31
	044 Call Byte.GetHashCode, X0
	045 Multiply W8, W20, W21
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Xor W0, W8, W0
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0

