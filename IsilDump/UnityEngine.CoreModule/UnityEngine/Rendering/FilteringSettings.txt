Type: UnityEngine.Rendering.FilteringSettings

Method: System.Void .ctor(System.Nullable`1<UnityEngine.Rendering.RenderQueueRange> renderQueueRange = null, System.Int32 layerMask = -1, System.UInt32 renderingLayerMask = 4294967295, System.Int32 excludeMotionVectorObjects = 0)

Disassembly:
	0x03C54F40 RET
	0x03C54F44 MOV X0, X31
	0x03C54F48 RET
	0x03C54F4C MOV X0, X31
	0x03C54F50 RET
	0x03C54F54 MOV X0, X31
	0x03C54F58 RET
	0x03C54F5C MOV X0, X31
	0x03C54F60 RET
	0x03C54F64 STR X30, [X31 - 0x20]!
	0x03C54F68 STP X20, X19, [X31 + 0x10]
	0x03C54F6C ADRP X20, 0x792000
	0x03C54F70 ADRP X19, 0x49F000
	0x03C54F74 LDRB W8, [X20 + 0x67]
	0x03C54F78 LDR X19, [X19 + 0xA28]
	0x03C54F7C TBNZ X8, 0x0, 0x3C54FAC
	0x03C54F80 ADRP X0, 0x49F000
	0x03C54F84 LDR X0, [X0 + 0xA28]
	0x03C54F88 BL 0x1C16CF4
	0x03C54F8C ADRP X0, 0x4A1000
	0x03C54F90 LDR X0, [X0 + 0x278]
	0x03C54F94 BL 0x1C16CF4
	0x03C54F98 ADRP X0, 0x50B000
	0x03C54F9C LDR X0, [X0 + 0xDC8]
	0x03C54FA0 BL 0x1C16CF4
	0x03C54FA4 MOVZ W8, 0x1
	0x03C54FA8 STRB W8, [X20 + 0x67]
	0x03C54FAC LDR X0, [X19]
	0x03C54FB0 ADRP X20, 0x50B000
	0x03C54FB4 ADRP X19, 0x4A1000
	0x03C54FB8 LDR W8, [X0 + 0xE0]
	0x03C54FBC LDR X20, [X20 + 0xDC8]
	0x03C54FC0 LDR X19, [X19 + 0x278]
	0x03C54FC4 CBNZ W8, 0x3C54FCC
	0x03C54FC8 BL 0x1C16DFC
	0x03C54FCC LDR X0, [X20]
	0x03C54FD0 MOV X1, X31
	0x03C54FD4 BL 0x3C06A04
	0x03C54FD8 LDR X8, [X19]
	0x03C54FDC LDP X20, X19, [X31 + 0x10]
	0x03C54FE0 LDR X8, [X8 + 0xB8]
	0x03C54FE4 LDR X0, [X8]
	0x03C54FE8 LDR X30, [X31], #0x20
	0x03C54FEC RET
	0x03C54FF0 STP X30, X21, [X31 - 0x20]!
	0x03C54FF4 STP X20, X19, [X31 + 0x10]
	0x03C54FF8 ADRP X20, 0x792000
	0x03C54FFC ADRP X21, 0x500000
	0x03C55000 LDRB W8, [X20 + 0x68]
	0x03C55004 B 0x3EB19DC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x793000
	011 Move W8, [X25+89]
	012 Move W19, W5
	013 Move W20, W4
	014 Move W21, W3
	015 Move X23, X2
	016 Move X24, X1
	017 Move X22, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {33}
	022 Move X0, 0x50C000
	023 Move X0, [X0+3480]
	024 Call 0x1C17CF4
	025 Move X0, 0x50C000
	026 Move X0, [X0+3488]
	027 Call 0x1C17CF4
	028 Move X0, 0x4C9000
	029 Move X0, [X0+3368]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X25+89], W8
	033 And W31, W24, 255
	034 Move [X22], X31
	035 Move [X22+8], X31
	036 Move [X22+16], X31
	037 Move [X31], X24
	038 Move [X31+8], W23
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 Move X8, 0x4C9000
	041 Move X8, [X8+3368]
	042 Move X0, [X8]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X8, 0x1388
	048 Move [X22], X8
	049 Or W8, W31, 0x7FFF8000
	050 Move [X22+8], W21
	051 Move [X22+12], W20
	052 Move [X22+16], W19
	053 Move [X22+20], W8
	054 Move X20, [X31+64]
	055 Move X19, [X31+72]
	056 Move X22, [X31+48]
	057 Move X21, [X31+56]
	058 Move X24, [X31+32]
	059 Move X23, [X31+40]
	060 Move X30, [X31+16]
	061 Move X25, [X31+24]
	062 Add X31, X31, 80
	063 Return 

Method: UnityEngine.Rendering.RenderQueueRange get_renderQueueRange()

Disassembly:
	0x03C55018 BL 0x1C16CF4
	0x03C5501C ADRP X0, 0x4FF000

ISIL:
	001 Move X0, [X0]
	002 Return X0

Method: System.Void set_renderQueueRange(UnityEngine.Rendering.RenderQueueRange value)

Disassembly:
	0x03C55020 LDR X0, [X0 + 0x50]
	0x03C55024 BL 0x1C16CF4

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Void set_layerMask(System.Int32 value)

Disassembly:
	0x03C55028 MOVZ W8, 0x1
	0x03C5502C STRB W8, [X20 + 0x68]

ISIL:
	001 Move [X0+8], W1
	002 Return 

Method: System.Void set_renderingLayerMask(System.UInt32 value)

Disassembly:
	0x03C55030 LDR X0, [X21]
	0x03C55034 ADRP X20, 0x49E000

ISIL:
	001 Move [X0+12], W1
	002 Return 

Method: System.Void set_excludeMotionVectorObjects(System.Boolean value)

Disassembly:
	0x03C55038 LDR W8, [X0 + 0xE0]
	0x03C5503C LDR X20, [X20 + 0x598]
	0x03C55040 CBNZ W8, 0x3C5504C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Void set_sortingLayerRange(UnityEngine.Rendering.SortingLayerRange value)

Disassembly:
	0x03C55044 BL 0x1C16DFC
	0x03C55048 LDR X0, [X21]

ISIL:
	001 Move [X0+20], W1
	002 Return 

Method: System.Boolean Equals(UnityEngine.Rendering.FilteringSettings other)

Disassembly:
	0x03C5504C LDR X8, [X20]
	0x03C55050 LDR X9, [X0 + 0xB8]
	0x03C55054 LDR W10, [X8 + 0xE0]
	0x03C55058 LDR X20, [X9]
	0x03C5505C CBNZ W10, 0x3C55068
	0x03C55060 MOV X0, X8
	0x03C55064 BL 0x1C16DFC
	0x03C55068 MOV X0, X20
	0x03C5506C MOV X1, X19
	0x03C55070 MOV X2, X31
	0x03C55074 BL 0x3C3883C
	0x03C55078 TBZ X0, 0x0, 0x3C550A0
	0x03C5507C LDR X0, [X21]
	0x03C55080 LDR W8, [X0 + 0xE0]
	0x03C55084 CBNZ W8, 0x3C5508C
	0x03C55088 BL 0x1C16DFC
	0x03C5508C BL 0x3C550AC
	0x03C55090 MOV X0, X19
	0x03C55094 LDP X20, X19, [X31 + 0x10]
	0x03C55098 LDP X30, X21, [X31], #0x20
	0x03C5509C B 0x3C55260
	0x03C550A0 LDP X20, X19, [X31 + 0x10]
	0x03C550A4 LDP X30, X21, [X31], #0x20
	0x03C550A8 RET
	0x03C550AC STR X30, [X31 - 0x20]!
	0x03C550B0 STP X20, X19, [X31 + 0x10]
	0x03C550B4 ADRP X20, 0x791000
	0x03C550B8 ADRP X19, 0x4FF000
	0x03C550BC LDRB W8, [X20 + 0x77]
	0x03C550C0 LDR X19, [X19 + 0x50]
	0x03C550C4 TBNZ X8, 0x0, 0x3C550E8
	0x03C550C8 ADRP X0, 0x4FF000
	0x03C550CC LDR X0, [X0 + 0x50]
	0x03C550D0 BL 0x1C16CF4
	0x03C550D4 ADRP X0, 0x502000
	0x03C550D8 LDR X0, [X0 + 0x220]
	0x03C550DC BL 0x1C16CF4
	0x03C550E0 MOVZ W8, 0x1
	0x03C550E4 STRB W8, [X20 + 0x77]
	0x03C550E8 LDR X0, [X19]
	0x03C550EC LDR W8, [X0 + 0xE0]
	0x03C550F0 CBNZ W8, 0x3C550F8
	0x03C550F4 BL 0x1C16DFC
	0x03C550F8 ADRP X20, 0x791000
	0x03C550FC LDRB W8, [X20 + 0x300]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x792000
	007 Move X21, 0x4C8000
	008 Move W8, [X22+90]
	009 Move X21, [X21+3368]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4C8000
	017 Move X0, [X0+3368]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+90], W8
	021 Move X0, [X21]
	022 Move X21, [X19]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move W8, [X20]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W8, [X20+4]
	030 Move X9, X21
	031 ShiftRight X9, 32
	032 And X9, X9, 0x7FFFFFFF
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W8, [X20+8]
	035 Move W9, [X19+8]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W8, [X20+12]
	038 Move W9, [X19+12]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, [X20+16]
	041 Move W9, [X19+16]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSET not yet implemented."
	044 Move W0, W31
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 Move X30, [X31+48]
	050 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C55128 LDR X0, [X19]
	0x03C5512C LDR X8, [X0 + 0xB8]
	0x03C55130 LDR X8, [X8 + 0x18]
	0x03C55134 CBZ X8, 0x3C55188
	0x03C55138 LDR W8, [X0 + 0xE0]
	0x03C5513C CBNZ W8, 0x3C55144
	0x03C55140 BL 0x1C16DFC
	0x03C55144 LDRB W8, [X20 + 0x300]
	0x03C55148 CBNZ W8, 0x3C55160
	0x03C5514C ADRP X0, 0x4FF000
	0x03C55150 LDR X0, [X0 + 0x50]
	0x03C55154 BL 0x1C16CF4
	0x03C55158 MOVZ W8, 0x1
	0x03C5515C STRB W8, [X20 + 0x300]
	0x03C55160 LDR X0, [X19]
	0x03C55164 LDR W8, [X0 + 0xE0]
	0x03C55168 CBNZ W8, 0x3C55174
	0x03C5516C BL 0x1C16DFC
	0x03C55170 LDR X0, [X19]
	0x03C55174 LDR X8, [X0 + 0xB8]
	0x03C55178 LDR X9, [X8 + 0x18]
	0x03C5517C CBZ X9, 0x3C5525C
	0x03C55180 LDRB W9, [X9 + 0x10]
	0x03C55184 CBZ W9, 0x3C55194
	0x03C55188 LDP X20, X19, [X31 + 0x10]
	0x03C5518C LDR X30, [X31], #0x20
	0x03C55190 RET
	0x03C55194 LDR W9, [X0 + 0xE0]
	0x03C55198 CBNZ W9, 0x3C551A8
	0x03C5519C BL 0x1C16DFC
	0x03C551A0 LDR X0, [X19]
	0x03C551A4 LDR X8, [X0 + 0xB8]
	0x03C551A8 LDR X8, [X8 + 0x68]
	0x03C551AC CBZ X8, 0x3C551C4
	0x03C551B0 LDR X9, [X8 + 0x18]
	0x03C551B4 LDR X0, [X8 + 0x40]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x792000
	007 Move W8, [X21+91]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x501000
	015 Move X0, [X0+1504]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+91], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x501000
	022 Move X8, [X8+1504]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move V0, [X0]
	030 Move X8, [X0+16]
	031 Add X1, X31, 0
	032 Move X0, X19
	033 Move [X31], V0
	034 Move [X31+16], X8
	035 Call FilteringSettings.Equals, X0, X1
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 And W0, W0, 1
	041 Add X31, X31, 64
	042 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C551B8 LDR X1, [X8 + 0x28]
	0x03C551BC BLR X9
	0x03C551C0 LDR X0, [X19]
	0x03C551C4 LDR W8, [X0 + 0xE0]
	0x03C551C8 CBNZ W8, 0x3C551D0
	0x03C551CC BL 0x1C16DFC
	0x03C551D0 LDRB W8, [X20 + 0x300]
	0x03C551D4 CBNZ W8, 0x3C551EC
	0x03C551D8 ADRP X0, 0x4FF000
	0x03C551DC LDR X0, [X0 + 0x50]
	0x03C551E0 BL 0x1C16CF4
	0x03C551E4 MOVZ W8, 0x1
	0x03C551E8 STRB W8, [X20 + 0x300]
	0x03C551EC LDR X0, [X19]
	0x03C551F0 LDR W8, [X0 + 0xE0]
	0x03C551F4 CBNZ W8, 0x3C55200
	0x03C551F8 BL 0x1C16DFC
	0x03C551FC LDR X0, [X19]
	0x03C55200 LDR X8, [X0 + 0xB8]
	0x03C55204 LDR X0, [X8 + 0x18]
	0x03C55208 CBZ X0, 0x3C5525C
	0x03C5520C BL 0x3C54B40
	0x03C55210 LDR X8, [X19]
	0x03C55214 MOV X0, X31
	0x03C55218 LDR X8, [X8 + 0xB8]
	0x03C5521C STR X31, [X8]
	0x03C55220 BL 0x3C553C8
	0x03C55224 ADRP X20, 0x502000
	0x03C55228 LDR X20, [X20 + 0x220]
	0x03C5522C LDR X0, [X20]
	0x03C55230 BL 0x1C16F10
	0x03C55234 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x792000
	006 Move X21, 0x4C8000
	007 Move W8, [X20+92]
	008 Move X21, [X21+3368]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4C8000
	015 Move X0, [X0+3368]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+92], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W8, [X19]
	025 Move W9, [X19+4]
	026 Move W10, 397
	027 Move W11, [X19+8]
	028 Move W12, [X19+12]
	029 Multiply W8, W8, W10
	030 Xor W8, W8, W9
	031 Multiply W8, W8, W10
	032 Xor W8, W8, W11
	033 Move W9, [X19+16]
	034 Multiply W8, W8, W10
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Xor W8, W8, W12
	038 Multiply W8, W8, W10
	039 Xor W0, W8, W9
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0

Method: System.Boolean op_Equality(UnityEngine.Rendering.FilteringSettings left, UnityEngine.Rendering.FilteringSettings right)

Disassembly:
	0x03C5524C MOV X0, X19
	0x03C55250 LDP X20, X19, [X31 + 0x10]
	0x03C55254 LDR X30, [X31], #0x20
	0x03C55258 B 0x3C55ABC
	0x03C5525C BL 0x1C16F20
	0x03C55260 STP X30, X21, [X31 - 0x20]!
	0x03C55264 STP X20, X19, [X31 + 0x10]
	0x03C55268 ADRP X21, 0x791000
	0x03C5526C ADRP X20, 0x4FF000
	0x03C55270 LDRB W8, [X21 + 0x7A]
	0x03C55274 LDR X20, [X20 + 0x50]
	0x03C55278 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X31, 0
	006 Move [X31+16], X8
	007 Move [X31], V0
	008 Call FilteringSettings.Equals, X0, X1
	009 Move X30, [X31+32]
	010 And W0, W0, 1
	011 Add X31, X31, 48
	012 Return X0

