Type: UnityEngine.Rendering.SubMeshDescriptor

Method: UnityEngine.Bounds get_bounds()

Disassembly:
	0x03C4B9F0 MOV X1, X0
	0x03C4B9F4 STR X0, [X20 + 0xD80]
	0x03C4B9F8 MOV W0, W19
	0x03C4B9FC LDP X20, X19, [X31 + 0x10]
	0x03C4BA00 LDR X30, [X31], #0x20

ISIL:
	001 Move X9, [X0+16]
	002 Move V0, [X0]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: UnityEngine.MeshTopology get_topology()

Disassembly:
	0x03C4BA04 BR X1
	0x03C4BA08 STR X30, [X31 - 0x20]!

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Int32 get_indexStart()

Disassembly:
	0x03C4BA0C STP X20, X19, [X31 + 0x10]
	0x03C4BA10 ADRP X20, 0x79A000

ISIL:
	001 Move W0, [X0+28]
	002 Return X0

Method: System.Int32 get_indexCount()

Disassembly:
	0x03C4BA14 LDR X1, [X20 + 0xD88]
	0x03C4BA18 MOV W19, W0

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Int32 get_baseVertex()

Disassembly:
	0x03C4BA1C CBNZ X1, 0x3C4BA34
	0x03C4BA20 ADRP X0, 0xFFFFFFFFFCED2000

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Int32 get_firstVertex()

Disassembly:
	0x03C4BA24 ADD X0, X0, 0x351
	0x03C4BA28 BL 0x1C16CB8

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Int32 get_vertexCount()

Disassembly:
	0x03C4BA2C MOV X1, X0
	0x03C4BA30 STR X0, [X20 + 0xD88]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.String ToString()

Disassembly:
	0x03C4BA34 AND W0, W19, 0x1
	0x03C4BA38 LDP X20, X19, [X31 + 0x10]
	0x03C4BA3C LDR X30, [X31], #0x20
	0x03C4BA40 BR X1
	0x03C4BA44 STP X30, X21, [X31 - 0x20]!
	0x03C4BA48 STP X20, X19, [X31 + 0x10]
	0x03C4BA4C ADRP X21, 0x79A000
	0x03C4BA50 LDR X2, [X21 + 0xD90]
	0x03C4BA54 MOV W19, W1
	0x03C4BA58 MOV W20, W0
	0x03C4BA5C CBNZ X2, 0x3C4BA74
	0x03C4BA60 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C4BA64 ADD X0, X0, 0x4B6
	0x03C4BA68 BL 0x1C16CB8
	0x03C4BA6C MOV X2, X0
	0x03C4BA70 STR X0, [X21 + 0xD90]
	0x03C4BA74 MOV W0, W20
	0x03C4BA78 MOV W1, W19
	0x03C4BA7C LDP X20, X19, [X31 + 0x10]
	0x03C4BA80 LDP X30, X21, [X31], #0x20
	0x03C4BA84 BR X2
	0x03C4BA88 STP X30, X21, [X31 - 0x20]!
	0x03C4BA8C STP X20, X19, [X31 + 0x10]
	0x03C4BA90 ADRP X20, 0x79A000
	0x03C4BA94 ADRP X21, 0x4AC000
	0x03C4BA98 LDRB W8, [X20 + 0xD98]
	0x03C4BA9C LDR X21, [X21 + 0x2C8]
	0x03C4BAA0 MOV W19, W0
	0x03C4BAA4 TBNZ X8, 0x0, 0x3C4BABC
	0x03C4BAA8 ADRP X0, 0x4AC000
	0x03C4BAAC LDR X0, [X0 + 0x2C8]
	0x03C4BAB0 BL 0x1C16CF4
	0x03C4BAB4 MOVZ W8, 0x1
	0x03C4BAB8 STRB W8, [X20 + 0xD98]
	0x03C4BABC LDR X0, [X21]
	0x03C4BAC0 LDR W8, [X0 + 0xE0]
	0x03C4BAC4 CBNZ W8, 0x3C4BACC
	0x03C4BAC8 BL 0x1C16DFC
	0x03C4BACC MOV X0, X31
	0x03C4BAD0 BL 0x3C0E24C
	0x03C4BAD4 ADRP X21, 0x79A000
	0x03C4BAD8 LDR X2, [X21 + 0xD90]
	0x03C4BADC MOV W20, W0
	0x03C4BAE0 CBNZ X2, 0x3C4BAF8
	0x03C4BAE4 ADRP X0, 0xFFFFFFFFFCEBC000
	0x03C4BAE8 ADD X0, X0, 0x4B6
	0x03C4BAEC BL 0x1C16CB8
	0x03C4BAF0 MOV X2, X0
	0x03C4BAF4 STR X0, [X21 + 0xD90]
	0x03C4BAF8 MOV W0, W20
	0x03C4BAFC MOV W1, W19
	0x03C4BB00 LDP X20, X19, [X31 + 0x10]
	0x03C4BB04 LDP X30, X21, [X31], #0x20
	0x03C4BB08 BR X2
	0x03C4BB0C STP X30, X19, [X31 - 0x10]!
	0x03C4BB10 ADRP X19, 0x79A000
	0x03C4BB14 LDR X0, [X19 + 0xDA0]
	0x03C4BB18 CBNZ X0, 0x3C4BB2C
	0x03C4BB1C ADRP X0, 0xFFFFFFFFFCECB000
	0x03C4BB20 ADD X0, X0, 0xD9C
	0x03C4BB24 BL 0x1C16CB8
	0x03C4BB28 STR X0, [X19 + 0xDA0]
	0x03C4BB2C LDP X30, X19, [X31], #0x10
	0x03C4BB30 BR X0
	0x03C4BB34 STP X30, X19, [X31 - 0x10]!
	0x03C4BB38 ADRP X19, 0x79A000
	0x03C4BB3C LDRB W8, [X19 + 0xDA8]
	0x03C4BB40 TBNZ X8, 0x0, 0x3C4BB58
	0x03C4BB44 ADRP X0, 0x513000
	0x03C4BB48 LDR X0, [X0 + 0xD88]
	0x03C4BB4C BL 0x1C16CF4
	0x03C4BB50 MOVZ W8, 0x1
	0x03C4BB54 STRB W8, [X19 + 0xDA8]
	0x03C4BB58 ADRP X19, 0x79A000
	0x03C4BB5C LDR X8, [X19 + 0xDA0]
	0x03C4BB60 CBNZ X8, 0x3C4BB78
	0x03C4BB64 ADRP X0, 0xFFFFFFFFFCECB000
	0x03C4BB68 ADD X0, X0, 0xD9C
	0x03C4BB6C BL 0x1C16CB8
	0x03C4BB70 MOV X8, X0
	0x03C4BB74 STR X0, [X19 + 0xDA0]
	0x03C4BB78 BLR X8
	0x03C4BB7C CBZ X0, 0x3C4BBBC
	0x03C4BB80 ADRP X8, 0x513000
	0x03C4BB84 LDR X8, [X8 + 0xD88]
	0x03C4BB88 LDR X9, [X0]
	0x03C4BB8C LDR X8, [X8]
	0x03C4BB90 LDRB W11, [X9 + 0x130]
	0x03C4BB94 LDRB W10, [X8 + 0x130]
	0x03C4BB98 CMP W11, W10
	0x03C4BB9C B.CS 0x3C4BBA8
	0x03C4BBA0 MOV X0, X31
	0x03C4BBA4 B 0x3C4BBBC
	0x03C4BBA8 LDR X9, [X9 + 0xC8]
	0x03C4BBAC ADD X9, X9, X10, 0x3, LSL
	0x03C4BBB0 LDUR X9, [X9 - 0x8]
	0x03C4BBB4 CMP X9, X8
	0x03C4BBB8 CSEL X0, X0, X31, EQ
	0x03C4BBBC LDP X30, X19, [X31], #0x10
	0x03C4BBC0 RET
	0x03C4BBC4 B 0x3C4BBC8
	0x03C4BBC8 STP X30, X19, [X31 - 0x10]!
	0x03C4BBCC ADRP X19, 0x79A000
	0x03C4BBD0 LDRB W8, [X19 + 0xDC0]
	0x03C4BBD4 TBNZ X8, 0x0, 0x3C4BBEC
	0x03C4BBD8 ADRP X0, 0x513000
	0x03C4BBDC LDR X0, [X0 + 0xD88]
	0x03C4BBE0 BL 0x1C16CF4
	0x03C4BBE4 MOVZ W8, 0x1
	0x03C4BBE8 STRB W8, [X19 + 0xDC0]
	0x03C4BBEC ADRP X19, 0x79A000
	0x03C4BBF0 LDR X8, [X19 + 0xDB0]
	0x03C4BBF4 CBNZ X8, 0x3C4BC0C
	0x03C4BBF8 ADRP X0, 0xFFFFFFFFFCED5000
	0x03C4BBFC ADD X0, X0, 0xBCD
	0x03C4BC00 BL 0x1C16CB8
	0x03C4BC04 MOV X8, X0
	0x03C4BC08 STR X0, [X19 + 0xDB0]
	0x03C4BC0C BLR X8
	0x03C4BC10 CBZ X0, 0x3C4BC50
	0x03C4BC14 ADRP X8, 0x513000
	0x03C4BC18 LDR X8, [X8 + 0xD88]
	0x03C4BC1C LDR X9, [X0]
	0x03C4BC20 LDR X8, [X8]
	0x03C4BC24 LDRB W11, [X9 + 0x130]
	0x03C4BC28 LDRB W10, [X8 + 0x130]
	0x03C4BC2C CMP W11, W10
	0x03C4BC30 B.CS 0x3C4BC3C
	0x03C4BC34 MOV X0, X31
	0x03C4BC38 B 0x3C4BC50
	0x03C4BC3C LDR X9, [X9 + 0xC8]
	0x03C4BC40 ADD X9, X9, X10, 0x3, LSL
	0x03C4BC44 LDUR X9, [X9 - 0x8]
	0x03C4BC48 CMP X9, X8
	0x03C4BC4C CSEL X0, X0, X31, EQ
	0x03C4BC50 LDP X30, X19, [X31], #0x10
	0x03C4BC54 RET
	0x03C4BC58 STR X30, [X31 - 0x20]!
	0x03C4BC5C STP X20, X19, [X31 + 0x10]
	0x03C4BC60 ADRP X20, 0x79A000
	0x03C4BC64 LDR X1, [X20 + 0xDB8]
	0x03C4BC68 MOV X19, X0
	0x03C4BC6C CBNZ X1, 0x3C4BC84
	0x03C4BC70 ADRP X0, 0xFFFFFFFFFCED5000
	0x03C4BC74 ADD X0, X0, 0xC1A
	0x03C4BC78 BL 0x1C16CB8
	0x03C4BC7C MOV X1, X0
	0x03C4BC80 STR X0, [X20 + 0xDB8]
	0x03C4BC84 MOV X0, X19
	0x03C4BC88 LDP X20, X19, [X31 + 0x10]
	0x03C4BC8C LDR X30, [X31], #0x20
	0x03C4BC90 BR X1
	0x03C4BC94 STR X30, [X31 - 0x20]!
	0x03C4BC98 STP X20, X19, [X31 + 0x10]
	0x03C4BC9C ADRP X20, 0x79A000
	0x03C4BCA0 LDR X1, [X20 + 0xDB8]
	0x03C4BCA4 MOV X19, X0
	0x03C4BCA8 CBNZ X1, 0x3C4BCC0
	0x03C4BCAC ADRP X0, 0xFFFFFFFFFCED5000
	0x03C4BCB0 ADD X0, X0, 0xC1A
	0x03C4BCB4 BL 0x1C16CB8
	0x03C4BCB8 MOV X1, X0
	0x03C4BCBC STR X0, [X20 + 0xDB8]
	0x03C4BCC0 MOV X0, X19
	0x03C4BCC4 LDP X20, X19, [X31 + 0x10]
	0x03C4BCC8 LDR X30, [X31], #0x20
	0x03C4BCCC BR X1

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+48], X30
	003 Move [X31+64], X22
	004 Move [X31+72], X21
	005 Move [X31+80], X20
	006 Move [X31+88], X19
	007 Move X20, 0x79B000
	008 Move X22, 0x4A9000
	009 Move X21, 0x504000
	010 Move W8, [X20+3416]
	011 Move X22, [X22+2512]
	012 Move X21, [X21+88]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {35}
	018 Move X0, 0x4D1000
	019 Move X0, [X0+1488]
	020 Call 0x1C17CF4
	021 Move X0, 0x4A9000
	022 Move X0, [X0+1880]
	023 Call 0x1C17CF4
	024 Move X0, 0x504000
	025 Move X0, [X0+88]
	026 Call 0x1C17CF4
	027 Move X0, 0x4A9000
	028 Move X0, [X0+2512]
	029 Call 0x1C17CF4
	030 Move X0, 0x515000
	031 Move X0, [X0+3000]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+3416], W8
	035 Move X0, [X22]
	036 Move W1, 7
	037 Call 0x1C17D6C
	038 Move X20, X0
	039 Move W8, [X19+24]
	040 Move X0, [X21]
	041 Add X1, X31, 60
	042 Move [X31+60], W8
	043 Call 0x1C17E04
	044 Compare X20, 0
	045 JumpIfEqual {184}
	046 Move X21, X0
	047 Compare X0, 0
	048 JumpIfEqual {55}
	049 Move X8, [X20]
	050 Move X0, X21
	051 Move X1, [X8+64]
	052 Call 0x1C17E00
	053 Compare X0, 0
	054 JumpIfEqual {181}
	055 Move W8, [X20+24]
	056 Compare W8, 0
	057 JumpIfEqual {180}
	058 Move X22, 0x4A9000
	059 Move X22, [X22+1880]
	060 Move [X20+32], X21
	061 Move W8, [X19+28]
	062 Add X1, X31, 56
	063 Move X0, [X22]
	064 Move [X31+56], W8
	065 Call 0x1C17E04
	066 Move X21, X0
	067 Compare X0, 0
	068 JumpIfEqual {75}
	069 Move X8, [X20]
	070 Move X0, X21
	071 Move X1, [X8+64]
	072 Call 0x1C17E00
	073 Compare X0, 0
	074 JumpIfEqual {181}
	075 Move W8, [X20+24]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move [X20+40], X21
	078 Move W8, [X19+32]
	079 Move X0, [X22]
	080 Add X1, X31, 44
	081 Move [X31+44], W8
	082 Call 0x1C17E04
	083 Move X21, X0
	084 Compare X0, 0
	085 JumpIfEqual {92}
	086 Move X8, [X20]
	087 Move X0, X21
	088 Move X1, [X8+64]
	089 Call 0x1C17E00
	090 Compare X0, 0
	091 JumpIfEqual {181}
	092 Move W8, [X20+24]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move [X20+48], X21
	095 Move W8, [X19+40]
	096 Move X0, [X22]
	097 Add X1, X31, 40
	098 Move [X31+40], W8
	099 Call 0x1C17E04
	100 Move X21, X0
	101 Compare X0, 0
	102 JumpIfEqual {109}
	103 Move X8, [X20]
	104 Move X0, X21
	105 Move X1, [X8+64]
	106 Call 0x1C17E00
	107 Compare X0, 0
	108 JumpIfEqual {181}
	109 Move W8, [X20+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move [X20+56], X21
	112 Move W8, [X19+44]
	113 Move X0, [X22]
	114 Add X1, X31, 36
	115 Move [X31+36], W8
	116 Call 0x1C17E04
	117 Move X21, X0
	118 Compare X0, 0
	119 JumpIfEqual {126}
	120 Move X8, [X20]
	121 Move X0, X21
	122 Move X1, [X8+64]
	123 Call 0x1C17E00
	124 Compare X0, 0
	125 JumpIfEqual {181}
	126 Move W8, [X20+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move [X20+64], X21
	129 Move W8, [X19+36]
	130 Move X0, [X22]
	131 Add X1, X31, 32
	132 Move [X31+32], W8
	133 Call 0x1C17E04
	134 Move X21, X0
	135 Compare X0, 0
	136 JumpIfEqual {143}
	137 Move X8, [X20]
	138 Move X0, X21
	139 Move X1, [X8+64]
	140 Call 0x1C17E00
	141 Compare X0, 0
	142 JumpIfEqual {181}
	143 Move W8, [X20+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X8, 0x4D1000
	146 Move X8, [X8+1488]
	147 Move [X20+72], X21
	148 Move X9, [X19+16]
	149 Move V0, [X19]
	150 Move X0, [X8]
	151 Add X1, X31, 0
	152 Move [X31+16], X9
	153 Move [X31], V0
	154 Call 0x1C17E04
	155 Move X19, X0
	156 Compare X0, 0
	157 JumpIfEqual {164}
	158 Move X8, [X20]
	159 Move X0, X19
	160 Move X1, [X8+64]
	161 Call 0x1C17E00
	162 Compare X0, 0
	163 JumpIfEqual {181}
	164 Move W8, [X20+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move X8, 0x515000
	167 Move X8, [X8+3000]
	168 Move [X20+80], X19
	169 Move X1, X20
	170 Move X2, X31
	171 Move X0, [X8]
	172 Call String.Format, X0, X1
	173 Move X20, [X31+80]
	174 Move X19, [X31+88]
	175 Move X22, [X31+64]
	176 Move X21, [X31+72]
	177 Move X30, [X31+48]
	178 Add X31, X31, 96
	179 Return X0
	180 Call 0x1C17F28
	181 Call 0x1C17F44
	182 Move X1, X31
	183 Call 0x1C17DEC
	184 Call 0x1C17F20

