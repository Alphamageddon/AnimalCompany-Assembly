Type: UnityEngine.Rendering.CullingResults

Method: System.Int32 GetLightIndexCount(System.IntPtr cullingResultsPtr)

Disassembly:
	0x03C53A28 STP X30, X23, [X31 + 0x60]
	0x03C53A2C STP X22, X21, [X31 + 0x70]
	0x03C53A30 STP X20, X19, [X31 + 0x80]
	0x03C53A34 ADRP X21, 0x793000
	0x03C53A38 LDRB W8, [X21 + 0x55]
	0x03C53A3C MOV X19, X1
	0x03C53A40 MOV X20, X0
	0x03C53A44 TBNZ X8, 0x0, 0x3C53A5C
	0x03C53A48 ADRP X0, 0x501000
	0x03C53A4C LDR X0, [X0 + 0xB8]
	0x03C53A50 BL 0x1C16CF4
	0x03C53A54 MOVZ W8, 0x1
	0x03C53A58 STRB W8, [X21 + 0x55]
	0x03C53A5C ADRP X23, 0x501000
	0x03C53A60 LDR X23, [X23 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x793000
	005 Move X1, [X20+4088]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51646464
	010 Add X0, X0, 920
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+4088], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetReflectionProbeIndexCount(System.IntPtr cullingResultsPtr)

Disassembly:
	0x03C53A64 MOV W21, W31
	0x03C53A68 LDR X0, [X23]
	0x03C53A6C LDR W8, [X0 + 0xE0]
	0x03C53A70 CBNZ W8, 0x3C53A7C
	0x03C53A74 BL 0x1C16DFC
	0x03C53A78 LDR X0, [X23]
	0x03C53A7C LDR X8, [X0 + 0xB8]
	0x03C53A80 LDR W8, [X8]
	0x03C53A84 CMP W21, W8
	0x03C53A88 B.GE 0x3C53AC4
	0x03C53A8C LDR W8, [X0 + 0xE0]
	0x03C53A90 CBNZ W8, 0x3C53A98
	0x03C53A94 BL 0x1C16DFC
	0x03C53A98 MOV X0, X20
	0x03C53A9C MOV W1, W21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x794000
	005 Move X1, [X20]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51736576
	010 Add X0, X0, 1601
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void FillLightAndReflectionProbeIndices(System.IntPtr cullingResultsPtr, UnityEngine.ComputeBuffer computeBuffer)

Disassembly:
	0x03C53AA0 BL 0x3C53788
	0x03C53AA4 MOV X22, X0
	0x03C53AA8 MOV X0, X19
	0x03C53AAC MOV W1, W21
	0x03C53AB0 BL 0x3C53788
	0x03C53AB4 CMP W22, W0
	0x03C53AB8 ADD W21, W21, 0x1
	0x03C53ABC B.EQ 0x3C53A68
	0x03C53AC0 B 0x3C53B48
	0x03C53AC4 ADD X0, X31, 0x0
	0x03C53AC8 MOVZ W2, 0x60
	0x03C53ACC MOV X1, X19
	0x03C53AD0 BL 0x3EB1AC0
	0x03C53AD4 ADD X1, X31, 0x0
	0x03C53AD8 MOV X0, X20
	0x03C53ADC BL 0x3C53B70
	0x03C53AE0 TBZ X0, 0x0, 0x3C53B48

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x794000
	006 Move X2, [X21+8]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51634176
	012 Add X0, X0, 3416
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+8], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 GetLightIndexMapSize(System.IntPtr cullingResultsPtr)

Disassembly:
	0x03C53AE4 LDR W8, [X20 + 0xA0]
	0x03C53AE8 LDR W9, [X19 + 0xA0]
	0x03C53AEC CMP W8, W9
	0x03C53AF0 B.NE 0x3C53B48
	0x03C53AF4 LDR W8, [X20 + 0xA4]
	0x03C53AF8 LDR W9, [X19 + 0xA4]
	0x03C53AFC CMP W8, W9
	0x03C53B00 B.NE 0x3C53B48
	0x03C53B04 LDR W8, [X20 + 0xB0]
	0x03C53B08 LDR W9, [X19 + 0xB0]
	0x03C53B0C CMP W8, W9
	0x03C53B10 B.NE 0x3C53B48
	0x03C53B14 LDR W8, [X20 + 0xB4]
	0x03C53B18 LDR W9, [X19 + 0xB4]
	0x03C53B1C CMP W8, W9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x794000
	005 Move X1, [X20+16]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51597312
	010 Add X0, X0, 1080
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+16], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void FillLightIndexMap(System.IntPtr cullingResultsPtr, System.IntPtr indexMapPtr, System.Int32 indexMapSize)

Disassembly:
	0x03C53B20 B.NE 0x3C53B48
	0x03C53B24 LDR W8, [X20 + 0xB8]
	0x03C53B28 LDR W9, [X19 + 0xB8]
	0x03C53B2C CMP W8, W9
	0x03C53B30 B.NE 0x3C53B48
	0x03C53B34 LDR W8, [X20 + 0xC0]
	0x03C53B38 LDR W9, [X19 + 0xC0]
	0x03C53B3C CMP W8, W9
	0x03C53B40 CSET W0, EQ
	0x03C53B44 B 0x3C53B4C
	0x03C53B48 MOV W0, W31
	0x03C53B4C LDP X20, X19, [X31 + 0x80]
	0x03C53B50 LDP X22, X21, [X31 + 0x70]
	0x03C53B54 LDP X30, X23, [X31 + 0x60]
	0x03C53B58 ADD X31, X31, 0x90
	0x03C53B5C RET
	0x03C53B60 LDR W8, [X0]
	0x03C53B64 CMP W8, W1
	0x03C53B68 CSET W0, EQ
	0x03C53B6C RET
	0x03C53B70 SUB X31, X31, 0x60

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x794000
	007 Move X3, [X22+24]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51617792
	014 Add X0, X0, 3698
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+24], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetLightIndexMap(System.IntPtr cullingResultsPtr, System.IntPtr indexMapPtr, System.Int32 indexMapSize)

Disassembly:
	0x03C53B74 STR X30, [X31 + 0x40]
	0x03C53B78 STP X20, X19, [X31 + 0x50]
	0x03C53B7C LDP V1, V0, [X1 + 0x20]
	0x03C53B80 LDP V3, V2, [X1]
	0x03C53B84 MOV X19, X1
	0x03C53B88 ADD X1, X31, 0x0
	0x03C53B8C MOV X2, X31
	0x03C53B90 MOV X20, X0
	0x03C53B94 STP V1, V0, [X31 + 0x20]
	0x03C53B98 STP V3, V2, [X31]
	0x03C53B9C BL 0x2078B9C
	0x03C53BA0 TBZ X0, 0x0, 0x3C53C28
	0x03C53BA4 LDR V0, [X19 + 0x40]
	0x03C53BA8 LDR V1, [X20 + 0x40]
	0x03C53BAC FCMP S1, S0
	0x03C53BB0 B.NE 0x3C53C28
	0x03C53BB4 LDR V0, [X19 + 0x44]
	0x03C53BB8 LDR V1, [X20 + 0x44]
	0x03C53BBC FCMP S1, S0
	0x03C53BC0 B.NE 0x3C53C28
	0x03C53BC4 LDR V0, [X19 + 0x48]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x794000
	007 Move X3, [X22+32]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51703808
	014 Add X0, X0, 1258
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+32], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean GetShadowCasterBounds(System.IntPtr cullingResultsPtr, System.Int32 lightIndex, out UnityEngine.Bounds bounds)

Disassembly:
	0x03C53BC8 LDR V1, [X20 + 0x48]
	0x03C53BCC FCMP S1, S0
	0x03C53BD0 B.NE 0x3C53C28
	0x03C53BD4 LDR V0, [X19 + 0x4C]
	0x03C53BD8 LDR V1, [X20 + 0x4C]
	0x03C53BDC FCMP S1, S0
	0x03C53BE0 B.NE 0x3C53C28
	0x03C53BE4 LDR V0, [X19 + 0x50]
	0x03C53BE8 LDR V1, [X20 + 0x50]
	0x03C53BEC FCMP S1, S0
	0x03C53BF0 B.NE 0x3C53C28
	0x03C53BF4 LDR V0, [X19 + 0x54]
	0x03C53BF8 LDR V1, [X20 + 0x54]
	0x03C53BFC FCMP S1, S0
	0x03C53C00 B.NE 0x3C53C28
	0x03C53C04 LDR W8, [X20 + 0x58]
	0x03C53C08 LDR W9, [X19 + 0x58]
	0x03C53C0C CMP W8, W9
	0x03C53C10 B.NE 0x3C53C28
	0x03C53C14 LDR W8, [X20 + 0x5C]
	0x03C53C18 LDR W9, [X19 + 0x5C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x794000
	007 Move X3, [X22+40]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51638272
	014 Add X0, X0, 346
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+40], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean ComputeSpotShadowMatricesAndCullingPrimitives(System.IntPtr cullingResultsPtr, System.Int32 activeLightIndex, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData shadowSplitData)

Disassembly:
	0x03C53C1C CMP W8, W9
	0x03C53C20 CSET W0, EQ
	0x03C53C24 B 0x3C53C2C
	0x03C53C28 MOV W0, W31
	0x03C53C2C LDP X20, X19, [X31 + 0x50]
	0x03C53C30 LDR X30, [X31 + 0x40]
	0x03C53C34 ADD X31, X31, 0x60
	0x03C53C38 RET
	0x03C53C3C SUB X31, X31, 0x100
	0x03C53C40 STR X30, [X31 + 0xD0]
	0x03C53C44 STP X22, X21, [X31 + 0xE0]
	0x03C53C48 STP X20, X19, [X31 + 0xF0]
	0x03C53C4C MRS X21, 0xC000
	0x03C53C50 LDR X8, [X21 + 0x28]
	0x03C53C54 ADRP X22, 0x793000
	0x03C53C58 MOV X20, X1
	0x03C53C5C MOV X19, X0
	0x03C53C60 STR X8, [X31 + 0xC8]
	0x03C53C64 LDRB W8, [X22 + 0x56]
	0x03C53C68 TBNZ X8, 0x0, 0x3C53C80
	0x03C53C6C ADRP X0, 0x501000
	0x03C53C70 LDR X0, [X0 + 0xB8]
	0x03C53C74 BL 0x1C16CF4
	0x03C53C78 MOVZ W8, 0x1
	0x03C53C7C STRB W8, [X22 + 0x56]
	0x03C53C80 CBZ X20, 0x3C53C9C
	0x03C53C84 ADRP X22, 0x501000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x794000
	009 Move X5, [X24+48]
	010 Move X19, X4
	011 Move X20, X3
	012 Move X21, X2
	013 Move W22, W1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51736576
	018 Add X0, X0, 1683
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+48], X0
	022 Move X0, X23
	023 Move W1, W22
	024 Move X2, X21
	025 Move X3, X20
	026 Move X4, X19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Boolean ComputePointShadowMatricesAndCullingPrimitives(System.IntPtr cullingResultsPtr, System.Int32 activeLightIndex, UnityEngine.CubemapFace cubemapFace, System.Single fovBias, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData shadowSplitData)

Disassembly:
	0x03C53C88 LDR X22, [X22 + 0xB8]
	0x03C53C8C LDR X8, [X20]
	0x03C53C90 LDR X0, [X22]
	0x03C53C94 CMP X8, X0
	0x03C53C98 B.EQ 0x3C53CA4
	0x03C53C9C MOV W0, W31
	0x03C53CA0 B 0x3C53CF4
	0x03C53CA4 LDR W8, [X0 + 0xE0]
	0x03C53CA8 CBZ W8, 0x3C53CB4
	0x03C53CAC MOV X1, X0
	0x03C53CB0 B 0x3C53CC0
	0x03C53CB4 BL 0x1C16DFC
	0x03C53CB8 LDR X1, [X22]
	0x03C53CBC LDR X0, [X20]
	0x03C53CC0 LDR X8, [X0 + 0x40]
	0x03C53CC4 LDR X9, [X1 + 0x40]
	0x03C53CC8 MOV X0, X20
	0x03C53CCC CMP X8, X9
	0x03C53CD0 B.NE 0x3C53D1C
	0x03C53CD4 BL 0x1C16E08
	0x03C53CD8 MOV X1, X0
	0x03C53CDC ADD X0, X31, 0x0
	0x03C53CE0 MOVZ W2, 0xC4
	0x03C53CE4 BL 0x3EB1AC0
	0x03C53CE8 ADD X1, X31, 0x0
	0x03C53CEC MOV X0, X19
	0x03C53CF0 BL 0x3C53A24
	0x03C53CF4 LDR X8, [X21 + 0x28]
	0x03C53CF8 LDR X9, [X31 + 0xC8]
	0x03C53CFC CMP X8, X9
	0x03C53D00 B.NE 0x3C53D20
	0x03C53D04 LDP X20, X19, [X31 + 0xF0]
	0x03C53D08 LDP X22, X21, [X31 + 0xE0]

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x794000
	011 Move X6, [X25+56]
	012 Move X19, X5
	013 Move X20, X4
	014 Move X21, X3
	015 Move V8, V0
	016 Move W22, W2
	017 Move W23, W1
	018 Move X24, X0
	019 Compare X6, 0
	020 JumpIfNotEqual {26}
	021 Move X0, -51752960
	022 Add X0, X0, 1685
	023 Call 0x1C17CB8
	024 Move X6, X0
	025 Move [X25+56], X0
	026 Move X0, X24
	027 Move W1, W23
	028 Move W2, W22
	029 Move X3, X21
	030 Move X4, X20
	031 Move X5, X19
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X22, [X31+48]
	035 Move X21, [X31+56]
	036 Move X24, [X31+32]
	037 Move X23, [X31+40]
	038 Move X30, [X31+16]
	039 Move X25, [X31+24]
	040 Move V0, V8
	041 Move V8, [X31+80]
	042 CallNoReturn X6

Method: System.Boolean ComputeDirectionalShadowMatricesAndCullingPrimitives(System.IntPtr cullingResultsPtr, System.Int32 activeLightIndex, System.Int32 splitIndex, System.Int32 splitCount, UnityEngine.Vector3 splitRatio, System.Int32 shadowResolution, System.Single shadowNearPlaneOffset, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData shadowSplitData)

Disassembly:
	0x03C53D0C LDR X30, [X31 + 0xD0]
	0x03C53D10 AND W0, W0, 0x1
	0x03C53D14 ADD X31, X31, 0x100
	0x03C53D18 RET
	0x03C53D1C BL 0x1C171E0
	0x03C53D20 BL 0x3EB1B20
	0x03C53D24 STP X30, X19, [X31 - 0x10]!
	0x03C53D28 MOV X19, X0
	0x03C53D2C BL 0x3C53D7C
	0x03C53D30 LDP W8, W10, [X19 + 0xA0]
	0x03C53D34 MOVZ W9, 0x18D
	0x03C53D38 MUL W11, W0, W9
	0x03C53D3C EOR W8, W11, W8, 0x0
	0x03C53D40 MUL W8, W8, W9
	0x03C53D44 EOR W8, W8, W10, 0x0
	0x03C53D48 LDP W11, W10, [X19 + 0xB0]
	0x03C53D4C MUL W8, W8, W9
	0x03C53D50 EOR W8, W8, W11, 0x0
	0x03C53D54 LDR W11, [X19 + 0xB8]
	0x03C53D58 MUL W8, W8, W9
	0x03C53D5C EOR W8, W8, W10, 0x0
	0x03C53D60 LDR W10, [X19 + 0xC0]
	0x03C53D64 MUL W8, W8, W9
	0x03C53D68 EOR W8, W8, W11, 0x0
	0x03C53D6C MUL W8, W8, W9
	0x03C53D70 EOR W0, W8, W10, 0x0
	0x03C53D74 LDP X30, X19, [X31], #0x10
	0x03C53D78 RET
	0x03C53D7C STP X30, X23, [X31 - 0x30]!
	0x03C53D80 STP X22, X21, [X31 + 0x10]
	0x03C53D84 STP X20, X19, [X31 + 0x20]
	0x03C53D88 MOV X1, X31
	0x03C53D8C MOV X19, X0
	0x03C53D90 BL 0x2477824
	0x03C53D94 MOV W20, W0
	0x03C53D98 ADD X0, X19, 0x40
	0x03C53D9C MOV X1, X31
	0x03C53DA0 BL 0x338FE0C
	0x03C53DA4 MOV W21, W0
	0x03C53DA8 ADD X0, X19, 0x44
	0x03C53DAC MOV X1, X31
	0x03C53DB0 BL 0x338FE0C
	0x03C53DB4 MOV W22, W0
	0x03C53DB8 ADD X0, X19, 0x48
	0x03C53DBC MOV X1, X31
	0x03C53DC0 BL 0x338FE0C

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D8
	003 Move [X31+48], X30
	004 Move [X31+56], X27
	005 Move [X31+64], X26
	006 Move [X31+72], X25
	007 Move [X31+80], X24
	008 Move [X31+88], X23
	009 Move [X31+96], X22
	010 Move [X31+104], X21
	011 Move [X31+112], X20
	012 Move [X31+120], X19
	013 Move X27, 0x794000
	014 Move X8, [X27+72]
	015 Move X21, X7
	016 Move X19, X6
	017 Move X20, X5
	018 Move V8, V3
	019 Move W22, W4
	020 Move W23, W3
	021 Move W24, W2
	022 Move W25, W1
	023 Move X26, X0
	024 Move [X31+16], S0
	025 Move [X31+24], S1
	026 Move [X31+24], S2
	027 Compare X8, 0
	028 JumpIfNotEqual {34}
	029 Move X0, -51687424
	030 Add X0, X0, 1513
	031 Call 0x1C17CB8
	032 Move X8, X0
	033 Move [X27+72], X0
	034 Add X4, X31, 16
	035 Move X0, X26
	036 Move W1, W25
	037 Move W2, W24
	038 Move W3, W23
	039 Move W5, W22
	040 Move V0, V8
	041 Move X6, X20
	042 Move X7, X19
	043 Move [X31], X21
	044 NotImplemented "Instruction BLR not yet implemented."
	045 Move X20, [X31+112]
	046 Move X19, [X31+120]
	047 Move X22, [X31+96]
	048 Move X21, [X31+104]
	049 Move X24, [X31+80]
	050 Move X23, [X31+88]
	051 Move X26, [X31+64]
	052 Move X25, [X31+72]
	053 Move X30, [X31+48]
	054 Move X27, [X31+56]
	055 Move V8, [X31+32]
	056 And W0, W0, 1
	057 Add X31, X31, 128
	058 Return X0

Method: Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleLight> get_visibleLights()

Disassembly:
	0x03C53E70 TBNZ X8, 0x0, 0x3C53E88
	0x03C53E74 ADRP X0, 0x501000
	0x03C53E78 LDR X0, [X0 + 0xB8]
	0x03C53E7C BL 0x1C16CF4
	0x03C53E80 MOVZ W8, 0x1
	0x03C53E84 STRB W8, [X23 + 0x57]
	0x03C53E88 ADD X0, X31, 0xD0
	0x03C53E8C MOVZ W2, 0xC4
	0x03C53E90 MOV X1, X20
	0x03C53E94 BL 0x3EB1AC0
	0x03C53E98 LDR X0, [X22]
	0x03C53E9C LDR W8, [X0 + 0xE0]
	0x03C53EA0 CBNZ W8, 0x3C53EA8
	0x03C53EA4 BL 0x1C16DFC
	0x03C53EA8 ADD X0, X31, 0x8
	0x03C53EAC ADD X1, X31, 0xD0
	0x03C53EB0 MOVZ W2, 0xC4
	0x03C53EB4 BL 0x3EB1AC0
	0x03C53EB8 ADD X1, X31, 0x8
	0x03C53EBC MOV X0, X19
	0x03C53EC0 BL 0x3C53A24
	0x03C53EC4 LDR X8, [X21 + 0x28]
	0x03C53EC8 LDR X9, [X31 + 0x198]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x794000
	005 Move W8, [X20+64]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x50D000
	012 Move X0, [X0+3408]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+64], W8
	016 Move X8, [X19+8]
	017 Compare X8, 0
	018 JumpIfEqual {30}
	019 Move X9, 0x50D000
	020 Move X9, [X9+3408]
	021 Move X1, [X8]
	022 Move W2, [X8+24]
	023 Move X0, X19
	024 Move X3, [X9]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Call 0x21A940C, X0, X1, X2
	029 Return X0
	030 Call 0x1C17F20

Method: Unity.Collections.NativeArray`1<UnityEngine.Rendering.VisibleReflectionProbe> get_visibleReflectionProbes()

Disassembly:
	0x03C53ECC CMP X8, X9
	0x03C53ED0 B.NE 0x3C53EF0
	0x03C53ED4 LDP X20, X19, [X31 + 0x1D0]
	0x03C53ED8 LDP X22, X21, [X31 + 0x1C0]
	0x03C53EDC LDP X30, X23, [X31 + 0x1B0]
	0x03C53EE0 LDR X29, [X31 + 0x1A0]
	0x03C53EE4 AND W0, W0, 0x1
	0x03C53EE8 ADD X31, X31, 0x1E0
	0x03C53EEC RET
	0x03C53EF0 BL 0x3EB1B20
	0x03C53EF4 STR X30, [X31 - 0x20]!
	0x03C53EF8 STP X20, X19, [X31 + 0x10]
	0x03C53EFC ADRP X19, 0x793000
	0x03C53F00 ADRP X20, 0x501000
	0x03C53F04 LDRB W8, [X19 + 0x58]
	0x03C53F08 LDR X20, [X20 + 0xB8]
	0x03C53F0C TBNZ X8, 0x0, 0x3C53F24
	0x03C53F10 ADRP X0, 0x501000
	0x03C53F14 LDR X0, [X0 + 0xB8]
	0x03C53F18 BL 0x1C16CF4
	0x03C53F1C MOVZ W8, 0x1
	0x03C53F20 STRB W8, [X19 + 0x58]
	0x03C53F24 LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x794000
	005 Move W8, [X20+65]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x50D000
	012 Move X0, [X0+3416]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+65], W8
	016 Move X8, [X19+8]
	017 Compare X8, 0
	018 JumpIfEqual {30}
	019 Move X9, 0x50D000
	020 Move X9, [X9+3416]
	021 Move X1, [X8+16]
	022 Move W2, [X8+32]
	023 Move X0, X19
	024 Move X3, [X9]
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Call CullingResults.GetNativeArray, X0, X1, X2
	029 Return X0
	030 Call 0x1C17F20

Method: Unity.Collections.NativeArray`1<T> GetNativeArray(System.Void* dataPointer, System.Int32 length)

Disassembly:
	0x021A940C ADD X10, X10, 0x10
	0x021A9410 B.NE 0x21A93FC
	0x021A9414 MOV X0, X23
	0x021A9418 MOV W2, W31
	0x021A941C BL 0x1C5C788
	0x021A9420 B 0x21A9430
	0x021A9424 LDRSW X9, [X10]
	0x021A9428 ADD X8, X8, X9, 0x4, LSL
	0x021A942C ADD X0, X8, 0x138
	0x021A9430 LDP X8, X1, [X0]
	0x021A9434 MOV X0, X23
	0x021A9438 BLR X8
	0x021A943C CBNZ X24, 0x21A9698
	0x021A9440 CBZ W25, 0x21A9670
	0x021A9444 ADRP X8, 0x1F72000
	0x021A9448 LDR X8, [X8 + 0x930]
	0x021A944C LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+56]
	006 Move W19, W2
	007 Move X20, X1
	008 Compare X8, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X3
	011 Move X21, X3
	012 Call 0x1C5D6E0
	013 Move X8, [X21+56]
	014 Move X3, [X8]
	015 Move X0, X20
	016 Move W1, W19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move W2, W31
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Call NativeArrayUnsafeUtility.ConvertExistingDataToNativeArray, X0, X1, X2
	023 Return X0

Method: System.Int32 get_lightAndReflectionProbeIndexCount()

Disassembly:
	0x03C53F28 LDP X20, X19, [X31 + 0x10]
	0x03C53F2C MOVZ W9, 0x10
	0x03C53F30 LDR X8, [X8 + 0xB8]
	0x03C53F34 STR W9, [X8]
	0x03C53F38 LDR X30, [X31], #0x20
	0x03C53F3C RET
	0x03C53F40 SUB X31, X31, 0x50
	0x03C53F44 STP X30, X25, [X31 + 0x10]
	0x03C53F48 STP X24, X23, [X31 + 0x20]
	0x03C53F4C STP X22, X21, [X31 + 0x30]
	0x03C53F50 STP X20, X19, [X31 + 0x40]
	0x03C53F54 ADRP X25, 0x793000
	0x03C53F58 LDRB W8, [X25 + 0x59]
	0x03C53F5C MOV W19, W5
	0x03C53F60 MOV W20, W4
	0x03C53F64 MOV W21, W3
	0x03C53F68 MOV X23, X2
	0x03C53F6C MOV X24, X1
	0x03C53F70 MOV X22, X0
	0x03C53F74 TBNZ X8, 0x0, 0x3C53FA4
	0x03C53F78 ADRP X0, 0x50C000
	0x03C53F7C LDR X0, [X0 + 0xD98]
	0x03C53F80 BL 0x1C16CF4
	0x03C53F84 ADRP X0, 0x50C000
	0x03C53F88 LDR X0, [X0 + 0xDA0]
	0x03C53F8C BL 0x1C16CF4
	0x03C53F90 ADRP X0, 0x4C9000
	0x03C53F94 LDR X0, [X0 + 0xD28]
	0x03C53F98 BL 0x1C16CF4
	0x03C53F9C MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x793000
	006 Move X8, [X21+4088]
	007 Move X20, [X0]
	008 Move X19, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51646464
	012 Add X0, X0, 920
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X21+4088], X0
	016 Move X0, X20
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move X21, 0x794000
	019 Move X8, [X21]
	020 Move X20, [X19]
	021 Move W19, W0
	022 Compare X8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -51736576
	025 Add X0, X0, 1601
	026 Call 0x1C17CB8
	027 Move X8, X0
	028 Move [X21], X0
	029 Move X0, X20
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Add W0, W0, W19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Void FillLightAndReflectionProbeIndices(UnityEngine.ComputeBuffer computeBuffer)

Disassembly:
	0x03C53FA0 STRB W8, [X25 + 0x59]
	0x03C53FA4 ANDS W31, W24, 0xFF
	0x03C53FA8 STP X31, X31, [X22]
	0x03C53FAC STR X31, [X22 + 0x10]
	0x03C53FB0 STR X24, [X31]
	0x03C53FB4 STR W23, [X31 + 0x8]
	0x03C53FB8 B.EQ 0x3C53FC4
	0x03C53FBC LDUR X8, [X31 + 0x4]
	0x03C53FC0 B 0x3C53FE0
	0x03C53FC4 ADRP X8, 0x4C9000
	0x03C53FC8 LDR X8, [X8 + 0xD28]
	0x03C53FCC LDR X0, [X8]
	0x03C53FD0 LDR W8, [X0 + 0xE0]
	0x03C53FD4 CBNZ W8, 0x3C53FDC
	0x03C53FD8 BL 0x1C16DFC
	0x03C53FDC MOVZ X8, 0x1388
	0x03C53FE0 STR X8, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x794000
	006 Move X2, [X21+8]
	007 Move X20, [X0]
	008 Move X19, X1
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51634176
	012 Add X0, X0, 3416
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+8], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: Unity.Collections.NativeArray`1<System.Int32> GetLightIndexMap(Unity.Collections.Allocator allocator)

Disassembly:
	0x03C53FE4 ORR W8, W31, 0x7FFF8000
	0x03C53FE8 STP W21, W20, [X22 + 0x8]
	0x03C53FEC STP W19, W8, [X22 + 0x10]
	0x03C53FF0 LDP X20, X19, [X31 + 0x40]
	0x03C53FF4 LDP X22, X21, [X31 + 0x30]
	0x03C53FF8 LDP X24, X23, [X31 + 0x20]
	0x03C53FFC LDP X30, X25, [X31 + 0x10]
	0x03C54000 ADD X31, X31, 0x50
	0x03C54004 RET
	0x03C54008 MOVZ X0, 0x1388
	0x03C5400C RET
	0x03C54010 ORR W0, W31, 0x7FFF8000
	0x03C54014 RET
	0x03C54018 LDR X0, [X0]
	0x03C5401C RET
	0x03C54020 STR X1, [X0]
	0x03C54024 RET
	0x03C54028 STR W1, [X0 + 0x8]
	0x03C5402C RET
	0x03C54030 STR W1, [X0 + 0xC]
	0x03C54034 RET
	0x03C54038 AND W8, W1, 0x1
	0x03C5403C STR W8, [X0 + 0x10]
	0x03C54040 RET
	0x03C54044 STR W1, [X0 + 0x14]
	0x03C54048 RET
	0x03C5404C STR X30, [X31 - 0x30]!
	0x03C54050 STP X22, X21, [X31 + 0x10]
	0x03C54054 STP X20, X19, [X31 + 0x20]
	0x03C54058 ADRP X22, 0x792000
	0x03C5405C ADRP X21, 0x4C8000
	0x03C54060 LDRB W8, [X22 + 0x5A]
	0x03C54064 LDR X21, [X21 + 0xD28]
	0x03C54068 MOV X19, X1
	0x03C5406C MOV X20, X0
	0x03C54070 TBNZ X8, 0x0, 0x3C54088
	0x03C54074 ADRP X0, 0x4C8000
	0x03C54078 LDR X0, [X0 + 0xD28]
	0x03C5407C BL 0x1C16CF4
	0x03C54080 MOVZ W8, 0x1
	0x03C54084 STRB W8, [X22 + 0x5A]
	0x03C54088 LDR X0, [X21]
	0x03C5408C LDR X21, [X19]
	0x03C54090 LDR W8, [X0 + 0xE0]
	0x03C54094 CBNZ W8, 0x3C5409C
	0x03C54098 BL 0x1C16DFC
	0x03C5409C LDR W8, [X20]
	0x03C540A0 CMP W8, W21
	0x03C540A4 B.NE 0x3C540EC
	0x03C540A8 LDR W8, [X20 + 0x4]
	0x03C540AC UBFM X9, X21, 0x20, 0x3F
	0x03C540B0 CMP W8, W9
	0x03C540B4 B.NE 0x3C540EC
	0x03C540B8 LDR W8, [X20 + 0x8]
	0x03C540BC LDR W9, [X19 + 0x8]
	0x03C540C0 CMP W8, W9
	0x03C540C4 B.NE 0x3C540EC
	0x03C540C8 LDR W8, [X20 + 0xC]
	0x03C540CC LDR W9, [X19 + 0xC]
	0x03C540D0 CMP W8, W9
	0x03C540D4 B.NE 0x3C540EC
	0x03C540D8 LDR W8, [X20 + 0x10]
	0x03C540DC LDR W9, [X19 + 0x10]
	0x03C540E0 CMP W8, W9
	0x03C540E4 CSET W0, EQ
	0x03C540E8 B 0x3C540F0
	0x03C540EC MOV W0, W31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+32], X24
	004 Move [X31+40], X23
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0x794000
	010 Move W8, [X21+66]
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x50C000
	018 Move X0, [X0+3424]
	019 Call 0x1C17CF4
	020 Move X0, 0x4CA000
	021 Move X0, [X0+312]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+66], W8
	025 Move [X31], X31
	026 Move [X31+8], X31
	027 Move X24, 0x793000
	028 Move X23, 0x4CA000
	029 Move X22, 0x50C000
	030 Move X8, [X24+16]
	031 Move X21, [X19]
	032 Move X23, [X23+312]
	033 Move X22, [X22+3424]
	034 Compare X8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, -51601408
	037 Add X0, X0, 1080
	038 Call 0x1C17CB8
	039 Move X8, X0
	040 Move [X24+16], X0
	041 Move X0, X21
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Move X4, [X23]
	044 Move W21, W0
	045 Add X0, X31, 0
	046 Move W1, W21
	047 Move W2, W20
	048 Move W3, W31
	049 Call NativeArray`1<Int32>..ctor, X0, X1, X2, X3
	050 Move X0, [X31]
	051 Move X1, [X31+8]
	052 Move X2, [X22]
	053 Move X19, [X19]
	054 Call NativeArrayUnsafeUtility.GetUnsafePtr, X0
	055 Move X1, X31
	056 Call IntPtr.op_Explicit, X0
	057 Move X22, 0x793000
	058 Move X8, [X22+24]
	059 Move X20, X0
	060 Compare X8, 0
	061 JumpIfNotEqual {67}
	062 Move X0, -51621888
	063 Add X0, X0, 3698
	064 Call 0x1C17CB8
	065 Move X8, X0
	066 Move [X22+24], X0
	067 Move X0, X19
	068 Move X1, X20
	069 Move W2, W21
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move X0, [X31]
	072 Move X1, [X31+8]
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X22, [X31+48]
	076 Move X21, [X31+56]
	077 Move X24, [X31+32]
	078 Move X23, [X31+40]
	079 Move X30, [X31+16]
	080 Add X31, X31, 80
	081 Return X0

Method: System.Void SetLightIndexMap(Unity.Collections.NativeArray`1<System.Int32> lightIndexMap)

Disassembly:
	0x03C540F0 LDP X20, X19, [X31 + 0x20]
	0x03C540F4 LDP X22, X21, [X31 + 0x10]
	0x03C540F8 LDR X30, [X31], #0x30
	0x03C540FC RET
	0x03C54100 LDR W8, [X0]
	0x03C54104 CMP W8, W1
	0x03C54108 B.NE 0x3C54120
	0x03C5410C LDR W8, [X0 + 0x4]
	0x03C54110 UBFM X9, X1, 0x20, 0x3F
	0x03C54114 CMP W8, W9
	0x03C54118 CSET W0, EQ
	0x03C5411C RET
	0x03C54120 MOV W0, W31
	0x03C54124 RET
	0x03C54128 SUB X31, X31, 0x40
	0x03C5412C STP X30, X21, [X31 + 0x20]
	0x03C54130 STP X20, X19, [X31 + 0x30]
	0x03C54134 ADRP X21, 0x792000
	0x03C54138 LDRB W8, [X21 + 0x5B]
	0x03C5413C MOV X20, X1
	0x03C54140 MOV X19, X0
	0x03C54144 TBNZ X8, 0x0, 0x3C5415C
	0x03C54148 ADRP X0, 0x501000
	0x03C5414C LDR X0, [X0 + 0x5E0]
	0x03C54150 BL 0x1C16CF4
	0x03C54154 MOVZ W8, 0x1
	0x03C54158 STRB W8, [X21 + 0x5B]
	0x03C5415C CBZ X20, 0x3C54178
	0x03C54160 ADRP X8, 0x501000
	0x03C54164 LDR X8, [X8 + 0x5E0]
	0x03C54168 LDR X9, [X20]
	0x03C5416C LDR X8, [X8]
	0x03C54170 CMP X9, X8
	0x03C54174 B.EQ 0x3C54180
	0x03C54178 MOV W0, W31
	0x03C5417C B 0x3C541A4
	0x03C54180 MOV X0, X20
	0x03C54184 BL 0x1C16E08
	0x03C54188 LDR V0, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x793000
	008 Move X22, 0x50C000
	009 Move W8, [X23+67]
	010 Move X22, [X22+3432]
	011 Move X19, X2
	012 Move X21, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x50C000
	019 Move X0, [X0+3432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+67], W8
	023 Move X2, [X22]
	024 Move X20, [X20]
	025 Move X0, X21
	026 Move X1, X19
	027 Call NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr, X0
	028 Move X1, X31
	029 Call IntPtr.op_Explicit, X0
	030 Move X22, 0x793000
	031 Move X3, [X22+32]
	032 Move X21, X0
	033 Compare X3, 0
	034 JumpIfNotEqual {40}
	035 Move X0, -51707904
	036 Add X0, X0, 1258
	037 Call 0x1C17CB8
	038 Move X3, X0
	039 Move [X22+32], X0
	040 Move X0, X20
	041 Move X1, X21
	042 Move W2, W19
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X22, [X31+16]
	046 Move X21, [X31+24]
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 CallNoReturn X3

Method: System.Boolean GetShadowCasterBounds(System.Int32 lightIndex, out UnityEngine.Bounds outBounds)

Disassembly:
	0x03C5418C LDR X8, [X0 + 0x10]
	0x03C54190 ADD X1, X31, 0x0
	0x03C54194 MOV X0, X19
	0x03C54198 STR V0, [X31]
	0x03C5419C STR X8, [X31 + 0x10]
	0x03C541A0 BL 0x3C5404C
	0x03C541A4 LDP X20, X19, [X31 + 0x30]
	0x03C541A8 LDP X30, X21, [X31 + 0x20]
	0x03C541AC AND W0, W0, 0x1
	0x03C541B0 ADD X31, X31, 0x40
	0x03C541B4 RET
	0x03C541B8 STP X30, X21, [X31 - 0x20]!
	0x03C541BC STP X20, X19, [X31 + 0x10]
	0x03C541C0 ADRP X20, 0x792000
	0x03C541C4 ADRP X21, 0x4C8000
	0x03C541C8 LDRB W8, [X20 + 0x5C]
	0x03C541CC LDR X21, [X21 + 0xD28]
	0x03C541D0 MOV X19, X0
	0x03C541D4 TBNZ X8, 0x0, 0x3C541EC
	0x03C541D8 ADRP X0, 0x4C8000
	0x03C541DC LDR X0, [X0 + 0xD28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x793000
	007 Move X3, [X22+40]
	008 Move X21, [X0]
	009 Move X19, X2
	010 Move W20, W1
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51642368
	014 Add X0, X0, 346
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+40], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean ComputeSpotShadowMatricesAndCullingPrimitives(System.Int32 activeLightIndex, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData shadowSplitData)

Disassembly:
	0x03C541E0 BL 0x1C16CF4
	0x03C541E4 MOVZ W8, 0x1
	0x03C541E8 STRB W8, [X20 + 0x5C]
	0x03C541EC LDR X0, [X21]
	0x03C541F0 LDR W8, [X0 + 0xE0]
	0x03C541F4 CBNZ W8, 0x3C541FC
	0x03C541F8 BL 0x1C16DFC
	0x03C541FC LDP W8, W9, [X19]
	0x03C54200 MOVZ W10, 0x18D
	0x03C54204 LDP W11, W12, [X19 + 0x8]
	0x03C54208 MUL W8, W8, W10
	0x03C5420C EOR W8, W8, W9, 0x0
	0x03C54210 MUL W8, W8, W10
	0x03C54214 EOR W8, W8, W11, 0x0
	0x03C54218 LDR W9, [X19 + 0x10]
	0x03C5421C MUL W8, W8, W10
	0x03C54220 LDP X20, X19, [X31 + 0x10]
	0x03C54224 EOR W8, W8, W12, 0x0
	0x03C54228 MUL W8, W8, W10
	0x03C5422C EOR W0, W8, W9, 0x0
	0x03C54230 LDP X30, X21, [X31], #0x20
	0x03C54234 RET
	0x03C54238 LDP W8, W9, [X0]
	0x03C5423C MOVZ W10, 0x18D
	0x03C54240 MUL W8, W8, W10
	0x03C54244 EOR W0, W8, W9, 0x0
	0x03C54248 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x793000
	009 Move X5, [X24+48]
	010 Move X23, [X0]
	011 Move X19, X4
	012 Move X20, X3
	013 Move X21, X2
	014 Move W22, W1
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51740672
	018 Add X0, X0, 1683
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+48], X0
	022 Move X0, X23
	023 Move W1, W22
	024 Move X2, X21
	025 Move X3, X20
	026 Move X4, X19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Boolean ComputePointShadowMatricesAndCullingPrimitives(System.Int32 activeLightIndex, UnityEngine.CubemapFace cubemapFace, System.Single fovBias, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData shadowSplitData)

Disassembly:
	0x03C5424C SUB X31, X31, 0x30
	0x03C54250 STR X30, [X31 + 0x20]
	0x03C54254 LDR X8, [X1 + 0x10]
	0x03C54258 LDR V0, [X1]
	0x03C5425C ADD X1, X31, 0x0
	0x03C54260 STR X8, [X31 + 0x10]
	0x03C54264 STR V0, [X31]
	0x03C54268 BL 0x3C5404C
	0x03C5426C LDR X30, [X31 + 0x20]
	0x03C54270 AND W0, W0, 0x1
	0x03C54274 ADD X31, X31, 0x30
	0x03C54278 RET
	0x03C5427C SUB X31, X31, 0x40
	0x03C54280 STP X30, X21, [X31 + 0x20]
	0x03C54284 STP X20, X19, [X31 + 0x30]
	0x03C54288 ADRP X21, 0x792000
	0x03C5428C LDRB W8, [X21 + 0x5D]
	0x03C54290 MOV X20, X1
	0x03C54294 MOV X19, X0
	0x03C54298 TBNZ X8, 0x0, 0x3C542B0
	0x03C5429C ADRP X0, 0x50B000
	0x03C542A0 LDR X0, [X0 + 0xDA8]
	0x03C542A4 BL 0x1C16CF4
	0x03C542A8 MOVZ W8, 0x1
	0x03C542AC STRB W8, [X21 + 0x5D]
	0x03C542B0 CBZ X20, 0x3C542CC
	0x03C542B4 ADRP X8, 0x50B000
	0x03C542B8 LDR X8, [X8 + 0xDA8]
	0x03C542BC LDR X9, [X20]
	0x03C542C0 LDR X8, [X8]
	0x03C542C4 CMP X9, X8
	0x03C542C8 B.EQ 0x3C542D4
	0x03C542CC MOV W0, W31

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x793000
	011 Move X6, [X25+56]
	012 Move X24, [X0]
	013 Move X19, X5
	014 Move X20, X4
	015 Move X21, X3
	016 Move V8, V0
	017 Move W22, W2
	018 Move W23, W1
	019 Compare X6, 0
	020 JumpIfNotEqual {26}
	021 Move X0, -51757056
	022 Add X0, X0, 1685
	023 Call 0x1C17CB8
	024 Move X6, X0
	025 Move [X25+56], X0
	026 Move X0, X24
	027 Move W1, W23
	028 Move W2, W22
	029 Move X3, X21
	030 Move X4, X20
	031 Move X5, X19
	032 Move X20, [X31+64]
	033 Move X19, [X31+72]
	034 Move X22, [X31+48]
	035 Move X21, [X31+56]
	036 Move X24, [X31+32]
	037 Move X23, [X31+40]
	038 Move X30, [X31+16]
	039 Move X25, [X31+24]
	040 Move V0, V8
	041 Move V8, [X31+80]
	042 CallNoReturn X6

Method: System.Boolean ComputeDirectionalShadowMatricesAndCullingPrimitives(System.Int32 activeLightIndex, System.Int32 splitIndex, System.Int32 splitCount, UnityEngine.Vector3 splitRatio, System.Int32 shadowResolution, System.Single shadowNearPlaneOffset, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData shadowSplitData)

Disassembly:
	0x03C542D0 B 0x3C542F8
	0x03C542D4 MOV X0, X20

ISIL:
	001 Move X0, [X0]
	002 Call CullingResults.ComputeDirectionalShadowMatricesAndCullingPrimitives, X0, X1, X2, X3, X4, X5, V0, X6, X7, X8
	003 Return X0

Method: System.Boolean Equals(UnityEngine.Rendering.CullingResults other)

Disassembly:
	0x03C542D8 BL 0x1C16E08
	0x03C542DC LDR V0, [X0]
	0x03C542E0 LDUR V1, [X0 + 0xC]
	0x03C542E4 ADD X1, X31, 0x0
	0x03C542E8 MOV X0, X19
	0x03C542EC STR V0, [X31]
	0x03C542F0 STUR V1, [X31 + 0xC]
	0x03C542F4 BL 0x3C52538
	0x03C542F8 LDP X20, X19, [X31 + 0x30]
	0x03C542FC LDP X30, X21, [X31 + 0x20]
	0x03C54300 AND W0, W0, 0x1
	0x03C54304 ADD X31, X31, 0x40
	0x03C54308 RET
	0x03C5430C STR D8, [X31 - 0x40]!
	0x03C54310 STR X30, [X31 + 0x8]
	0x03C54314 STP X24, X23, [X31 + 0x10]
	0x03C54318 STP X22, X21, [X31 + 0x20]
	0x03C5431C STP X20, X19, [X31 + 0x30]
	0x03C54320 ADRP X24, 0x792000
	0x03C54324 ADRP X23, 0x4A8000
	0x03C54328 LDRB W8, [X24 + 0x5E]
	0x03C5432C LDR X23, [X23 + 0x9E8]
	0x03C54330 MOV W20, W3
	0x03C54334 MOV V8.16B, V0.16B
	0x03C54338 MOV W21, W2
	0x03C5433C MOV W22, W1
	0x03C54340 MOV X19, X0
	0x03C54344 TBNZ X8, 0x0, 0x3C5435C
	0x03C54348 ADRP X0, 0x4A8000
	0x03C5434C LDR X0, [X0 + 0x9E8]
	0x03C54350 BL 0x1C16CF4
	0x03C54354 MOVZ W8, 0x1
	0x03C54358 STRB W8, [X24 + 0x5E]
	0x03C5435C STP W22, W21, [X19]
	0x03C54360 STR S8, [X19 + 0x8]
	0x03C54364 LDR X0, [X23]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x793000
	009 Move X22, 0x4C9000
	010 Move W8, [X23+68]
	011 Move X22, [X22+3872]
	012 Move X19, X2
	013 Move X21, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x4C9000
	020 Move X0, [X0+3872]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+68], W8
	024 Move X0, [X22]
	025 Add X1, X31, 8
	026 Move [X31+8], X21
	027 Call 0x1C17E04
	028 Move X1, X0
	029 Move X0, X20
	030 Move X2, X31
	031 Call IntPtr.Equals, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {39}
	036 Move X8, [X20+8]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move W0, W31
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X30, [X31+16]
	045 Move X23, [X31+24]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C54368 LDR W8, [X0 + 0xE0]
	0x03C5436C CBNZ W8, 0x3C54374
	0x03C54370 BL 0x1C16DFC
	0x03C54374 AND W0, W20, 0x1
	0x03C54378 MOV X1, X31
	0x03C5437C BL 0x33181E0
	0x03C54380 STRB W0, [X19 + 0xC]
	0x03C54384 MOV W0, W31
	0x03C54388 MOV X1, X31
	0x03C5438C BL 0x33181E0
	0x03C54390 STRB W0, [X19 + 0xD]
	0x03C54394 STRH W31, [X19 + 0xE]
	0x03C54398 LDP X20, X19, [X31 + 0x30]
	0x03C5439C LDP X22, X21, [X31 + 0x20]
	0x03C543A0 LDP X24, X23, [X31 + 0x10]
	0x03C543A4 LDR X30, [X31 + 0x8]
	0x03C543A8 LDR V8, [X31], #0x40
	0x03C543AC RET
	0x03C543B0 STR X30, [X31 - 0x20]!
	0x03C543B4 STP X20, X19, [X31 + 0x10]
	0x03C543B8 LDR W8, [X0]
	0x03C543BC CMP W8, W1
	0x03C543C0 B.NE 0x3C54414
	0x03C543C4 LDR W8, [X0 + 0x4]
	0x03C543C8 UBFM X9, X1, 0x20, 0x3F
	0x03C543CC MOV X19, X0
	0x03C543D0 CMP W8, W9
	0x03C543D4 B.NE 0x3C54414
	0x03C543D8 MOV X20, X2
	0x03C543DC ADD X0, X19, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x793000
	006 Move W8, [X21+69]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x50C000
	014 Move X0, [X0+3440]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+69], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x50C000
	021 Move X8, [X8+3440]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0
	031 Move X0, X20
	032 Call 0x1C17E08
	033 Move X1, [X0]
	034 Move X2, [X0+8]
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call CullingResults.Equals, X0, X1
	041 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C543E0 FMOV S0, W20
	0x03C543E4 MOV X1, X31
	0x03C543E8 BL 0x338FDC0
	0x03C543EC TBZ X0, 0x0, 0x3C54414
	0x03C543F0 LDRB W8, [X19 + 0xC]
	0x03C543F4 UBFM X9, X20, 0x20, 0x3F
	0x03C543F8 CMP W8, W9, UXTB
	0x03C543FC B.NE 0x3C54414
	0x03C54400 LDRB W8, [X19 + 0xD]
	0x03C54404 UBFM X9, X20, 0x28, 0x3F

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call IntPtr.GetHashCode, X0
	006 Move W8, [X19+8]
	007 Move W9, 397
	008 Multiply W9, W0, W9
	009 Xor W0, W9, W8
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Boolean op_Equality(UnityEngine.Rendering.CullingResults left, UnityEngine.Rendering.CullingResults right)

Disassembly:
	0x03C54408 CMP W8, W9, UXTB
	0x03C5440C CSET W0, EQ
	0x03C54410 B 0x3C54418
	0x03C54414 MOV W0, W31
	0x03C54418 LDP X20, X19, [X31 + 0x10]
	0x03C5441C LDR X30, [X31], #0x20
	0x03C54420 RET
	0x03C54424 STP X30, X21, [X31 - 0x20]!
	0x03C54428 STP X20, X19, [X31 + 0x10]
	0x03C5442C ADRP X21, 0x792000
	0x03C54430 LDRB W8, [X21 + 0x5F]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+8], X1
	003 Move [X31+16], X30
	004 Move [X31], X0
	005 Add X0, X31, 0
	006 Move X1, X2
	007 Move X2, X3
	008 Call CullingResults.Equals, X0, X1
	009 Move X30, [X31+16]
	010 And W0, W0, 1
	011 Add X31, X31, 32
	012 Return X0

Method: System.Boolean ComputeDirectionalShadowMatricesAndCullingPrimitives_Injected(System.IntPtr cullingResultsPtr, System.Int32 activeLightIndex, System.Int32 splitIndex, System.Int32 splitCount, ref UnityEngine.Vector3 splitRatio, System.Int32 shadowResolution, System.Single shadowNearPlaneOffset, out UnityEngine.Matrix4x4 viewMatrix, out UnityEngine.Matrix4x4 projMatrix, out UnityEngine.Rendering.ShadowSplitData shadowSplitData)

Disassembly:
	0x03C53DC4 MOVZ W23, 0x18D
	0x03C53DC8 MUL W8, W20, W23
	0x03C53DCC EOR W8, W8, W21, 0x0
	0x03C53DD0 EOR W8, W8, W22, 0x2
	0x03C53DD4 EOR W22, W8, W0, 0x2
	0x03C53DD8 ADD X0, X19, 0x4C
	0x03C53DDC MOV X1, X31
	0x03C53DE0 BL 0x338FE0C
	0x03C53DE4 MOV W20, W0
	0x03C53DE8 ADD X0, X19, 0x50
	0x03C53DEC MOV X1, X31
	0x03C53DF0 BL 0x338FE0C
	0x03C53DF4 MOV W21, W0
	0x03C53DF8 ADD X0, X19, 0x54
	0x03C53DFC MOV X1, X31
	0x03C53E00 BL 0x338FE0C
	0x03C53E04 EOR W8, W20, W21, 0x2
	0x03C53E08 MUL W9, W22, W23
	0x03C53E0C EOR W8, W8, W0, 0x2
	0x03C53E10 EOR W8, W8, W9, 0x0
	0x03C53E14 LDP W10, W9, [X19 + 0x58]
	0x03C53E18 MUL W8, W8, W23
	0x03C53E1C LDP X20, X19, [X31 + 0x20]
	0x03C53E20 LDP X22, X21, [X31 + 0x10]
	0x03C53E24 EOR W8, W8, W10, 0x0
	0x03C53E28 MUL W8, W8, W23
	0x03C53E2C EOR W0, W8, W9, 0x0
	0x03C53E30 LDP X30, X23, [X31], #0x30
	0x03C53E34 RET
	0x03C53E38 SUB X31, X31, 0x1E0
	0x03C53E3C STR X29, [X31 + 0x1A0]
	0x03C53E40 STP X30, X23, [X31 + 0x1B0]
	0x03C53E44 STP X22, X21, [X31 + 0x1C0]
	0x03C53E48 STP X20, X19, [X31 + 0x1D0]
	0x03C53E4C MRS X21, 0xC000
	0x03C53E50 LDR X8, [X21 + 0x28]
	0x03C53E54 ADRP X23, 0x793000
	0x03C53E58 ADRP X22, 0x501000
	0x03C53E5C MOV X20, X1
	0x03C53E60 STR X8, [X31 + 0x198]
	0x03C53E64 LDRB W8, [X23 + 0x57]
	0x03C53E68 LDR X22, [X22 + 0xB8]
	0x03C53E6C MOV X19, X0

ISIL:
	001 Move [X31-96], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X28, 0x794000
	014 Move X8, [X28+72]
	015 Move X27, [X31+96]
	016 Move X19, X7
	017 Move X20, X6
	018 Move V8, V0
	019 Move W21, W5
	020 Move X22, X4
	021 Move W23, W3
	022 Move W24, W2
	023 Move W25, W1
	024 Move X26, X0
	025 Compare X8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, -51687424
	028 Add X0, X0, 1513
	029 Call 0x1C17CB8
	030 Move X8, X0
	031 Move [X28+72], X0
	032 Move [X31+96], X27
	033 Move X0, X26
	034 Move W1, W25
	035 Move W2, W24
	036 Move W3, W23
	037 Move X4, X22
	038 Move W5, W21
	039 Move X6, X20
	040 Move X7, X19
	041 Move X20, [X31+80]
	042 Move X19, [X31+88]
	043 Move X22, [X31+64]
	044 Move X21, [X31+72]
	045 Move X24, [X31+48]
	046 Move X23, [X31+56]
	047 Move X26, [X31+32]
	048 Move X25, [X31+40]
	049 Move X28, [X31+16]
	050 Move X27, [X31+24]
	051 Move X30, [X31+8]
	052 Move V0, V8
	053 Move V8, [X31+96]
	054 CallNoReturn X8

