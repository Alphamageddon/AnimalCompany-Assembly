Type: Unity.Collections.NativeSliceExtensions

Method: Unity.Collections.NativeSlice`1<T> Slice(Unity.Collections.NativeArray`1<T> thisArray, System.Int32 start, System.Int32 length)

Disassembly:
	0x022237B0 RET
	0x022237B4 BL 0x1C16F28
	0x022237B8 BL 0x1C16F20
	0x022237BC STR X30, [X31 - 0x60]!
	0x022237C0 STP X28, X27, [X31 + 0x10]
	0x022237C4 STP X26, X25, [X31 + 0x20]
	0x022237C8 STP X24, X23, [X31 + 0x30]
	0x022237CC STP X22, X21, [X31 + 0x40]
	0x022237D0 STP X20, X19, [X31 + 0x50]
	0x022237D4 STR W0, [X31 + 0x8]
	0x022237D8 LDR X8, [X3 + 0x38]
	0x022237DC MOV X19, X3
	0x022237E0 MOV W22, W2
	0x022237E4 MOV X20, X1
	0x022237E8 CBNZ X8, 0x22237F4
	0x022237EC MOV X0, X19
	0x022237F0 BL 0x1C5C6E0
	0x022237F4 CBZ X20, 0x2223984
	0x022237F8 LDP W2, W8, [X20 + 0x18]
	0x022237FC ADD W8, W8, 0x1
	0x02223800 CMP W2, 0x1
	0x02223804 STP W31, W8, [X20 + 0x18]
	0x02223808 B.LT 0x222381C
	0x0222380C LDR X0, [X20 + 0x10]
	0x02223810 MOV W1, W31
	0x02223814 MOV X3, X31
	0x02223818 BL 0x339FA34
	0x0222381C ADD X0, X31, 0x8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move W19, W3
	010 Move W20, W2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {19}
	015 Move X0, X4
	016 Move X23, X4
	017 Call 0x1C5D6E0
	018 Move X8, [X23+56]
	019 Move [X31], X31
	020 Move [X31+8], X31
	021 Move X5, [X8+16]
	022 Add X0, X31, 0
	023 Move X1, X22
	024 Move X2, X21
	025 Move W3, W20
	026 Move W4, W19
	027 Call 0x2405054, X0, X1, X2, X3
	028 Move X0, [X31]
	029 Move X1, [X31+8]
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X30, [X31+16]
	035 Move X23, [X31+24]
	036 Add X31, X31, 64
	037 Return X0

Method: Unity.Collections.NativeSlice`1<T> Slice(Unity.Collections.NativeSlice`1<T> thisSlice, System.Int32 start, System.Int32 length)

Disassembly:
	0x02223A50 LDR X0, [X25]
	0x02223A54 LDR X8, [X0 + 0xB8]
	0x02223A58 LDR X0, [X8]
	0x02223A5C CBZ X0, 0x2223BE4
	0x02223A60 ADRP X8, 0x1EF9000
	0x02223A64 LDR X8, [X8 + 0x158]
	0x02223A68 LDR X1, [X8]
	0x02223A6C BL 0x24F1410
	0x02223A70 LDR X8, [X25]
	0x02223A74 LDR X8, [X8 + 0xB8]
	0x02223A78 LDR X0, [X8]
	0x02223A7C CBZ X0, 0x2223BE4
	0x02223A80 ADRP X26, 0x1EF9000
	0x02223A84 LDR X26, [X26 + 0x168]
	0x02223A88 MOV X1, X21
	0x02223A8C LDR X2, [X26]
	0x02223A90 BL 0x24F1750
	0x02223A94 ADRP X27, 0x1EF9000
	0x02223A98 LDR X27, [X27 + 0x160]
	0x02223A9C LDR X0, [X25]
	0x02223AA0 LDR W8, [X0 + 0xE0]
	0x02223AA4 CBNZ W8, 0x2223AB0
	0x02223AA8 BL 0x1C16DFC
	0x02223AAC LDR X0, [X25]
	0x02223AB0 LDR X8, [X0 + 0xB8]
	0x02223AB4 LDR X8, [X8]
	0x02223AB8 CBZ X8, 0x2223BE4
	0x02223ABC LDR W9, [X8 + 0x20]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X4+56]
	009 Move W19, W3
	010 Move W20, W2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X8, 0
	014 JumpIfNotEqual {19}
	015 Move X0, X4
	016 Move X23, X4
	017 Call 0x1C5D6E0
	018 Move X8, [X23+56]
	019 Move [X31], X31
	020 Move [X31+8], X31
	021 Move X5, [X8+8]
	022 Add X0, X31, 0
	023 Move X1, X22
	024 Move X2, X21
	025 Move W3, W20
	026 Move W4, W19
	027 Call NativeSlice`1<UInt16>..ctor, X0, X1, X2, X3
	028 Move X0, [X31]
	029 Move X1, [X31+8]
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X30, [X31+16]
	035 Move X23, [X31+24]
	036 Add X31, X31, 64
	037 Return X0

