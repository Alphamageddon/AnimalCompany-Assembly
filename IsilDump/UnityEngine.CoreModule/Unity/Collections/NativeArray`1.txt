Type: Unity.Collections.NativeArray`1

Method: System.Void .ctor(System.Int32 length, Unity.Collections.Allocator allocator, Unity.Collections.NativeArrayOptions options = 1)

Disassembly:
	0x031A7760 MOV X1, X22
	0x031A7764 MOV X2, X20
	0x031A7768 LDR X3, [X8 + 0x38]
	0x031A776C LDP X20, X19, [X31 + 0x20]
	0x031A7770 LDP X22, X21, [X31 + 0x10]
	0x031A7774 LDP X30, X23, [X31], #0x30
	0x031A7778 B 0x31A7F68
	0x031A777C BL 0x1C16F20
	0x031A7780 STR X30, [X31 - 0x30]!
	0x031A7784 STP X22, X21, [X31 + 0x10]
	0x031A7788 STP X20, X19, [X31 + 0x20]
	0x031A778C LDR X8, [X3 + 0x20]
	0x031A7790 MOV X22, X3
	0x031A7794 MOV X19, X2
	0x031A7798 MOV W20, W1
	0x031A779C LDRB W9, [X8 + 0x135]
	0x031A77A0 MOV W21, W0
	0x031A77A4 TBNZ X9, 0x0, 0x31A77B0
	0x031A77A8 MOV X0, X8
	0x031A77AC BL 0x1C5C684
	0x031A77B0 STP X31, X31, [X19]
	0x031A77B4 LDR X0, [X22 + 0x20]
	0x031A77B8 LDRB W8, [X0 + 0x135]
	0x031A77BC TBNZ X8, 0x0, 0x31A77C4
	0x031A77C0 BL 0x1C5C684
	0x031A77C4 LDR X8, [X0 + 0xC0]
	0x031A77C8 LDR X0, [X8 + 0x40]
	0x031A77CC MOVZ W8, 0x78
	0x031A77D0 SMADDL X22, X21, X8, X31
	0x031A77D4 BL 0x22A65DC
	0x031A77D8 MOV W1, W0
	0x031A77DC MOV X0, X22
	0x031A77E0 MOV W2, W20
	0x031A77E4 MOV W3, W31
	0x031A77E8 MOV X4, X31
	0x031A77EC BL 0x3BFFFA4
	0x031A77F0 STR X0, [X19]
	0x031A77F4 STP W21, W20, [X19 + 0x8]
	0x031A77F8 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X4+32]
	008 Move X19, X4
	009 Move W21, W3
	010 Move W22, W2
	011 Move W9, [X8+309]
	012 Move W23, W1
	013 Move X20, X0
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {21}
	018 Move X0, X8
	019 Call 0x1C5D684
	020 Move X8, X0
	021 Move X8, [X8+192]
	022 Move W0, W23
	023 Move W1, W22
	024 Move X2, X20
	025 Move X3, [X8]
	026 Call 0x31A7884, X0, X1, X2
	027 Move TEMP, X21
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {38}
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Move X23, [X31+56]
	037 Return 
	038 Move X0, [X19+32]
	039 Move X19, [X20]
	040 NotImplemented "Instruction LDRSW not yet implemented."
	041 Move W8, [X0+309]
	042 Move TEMP, X8
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {47}
	046 Call 0x1C5D684
	047 Move W8, 28
	048 Multiply X1, X20, X8
	049 Move X0, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X2, X31
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Call UnsafeUtility.MemClear, X0, X1
	058 Return 

Method: System.Void .ctor(T[] array, Unity.Collections.Allocator allocator)

Disassembly:
	0x031A77FC LDP X22, X21, [X31 + 0x10]
	0x031A7800 LDR X30, [X31], #0x30
	0x031A7804 RET
	0x031A7808 LDR W0, [X0 + 0x8]
	0x031A780C RET
	0x031A7810 SUB X31, X31, 0x130
	0x031A7814 STR X29, [X31 + 0x100]
	0x031A7818 STP X30, X21, [X31 + 0x110]
	0x031A781C STP X20, X19, [X31 + 0x120]
	0x031A7820 ADD X10, X31, 0x80
	0x031A7824 MOVI V0.2D, 0x0
	0x031A7828 STR X31, [X31 + 0xF0]
	0x031A782C STP V0, V0, [X10 + 0x50]
	0x031A7830 STP V0, V0, [X10 + 0x30]
	0x031A7834 STP V0, V0, [X10 + 0x10]
	0x031A7838 STR V0, [X31 + 0x8]
	0x031A783C MOV X9, X0
	0x031A7840 LDR X0, [X2 + 0x20]
	0x031A7844 LDR X21, [X9]
	0x031A7848 MOV W20, W1
	0x031A784C MOV X19, X8
	0x031A7850 LDRB W10, [X0 + 0x135]
	0x031A7854 TBNZ X10, 0x0, 0x31A785C
	0x031A7858 BL 0x1C5C684
	0x031A785C MOVZ W8, 0x78
	0x031A7860 SMADDL X1, X20, X8, X21
	0x031A7864 ADD X0, X31, 0x8
	0x031A7868 MOVZ W2, 0x78
	0x031A786C BL 0x3EB1B30
	0x031A7870 ADD X0, X31, 0x80
	0x031A7874 ADD X1, X31, 0x8
	0x031A7878 MOVZ W2, 0x78
	0x031A787C BL 0x3EB1AC0
	0x031A7880 ADD X1, X31, 0x80

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Compare X1, 0
	008 JumpIfEqual {49}
	009 Move X21, X0
	010 Move X0, [X3+32]
	011 Move W23, [X1+24]
	012 Move X20, X3
	013 Move W22, W2
	014 Move W8, [X0+309]
	015 Move X19, X1
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move X8, [X0+192]
	022 Move W0, W23
	023 Move W1, W22
	024 Move X2, X21
	025 Move X3, [X8]
	026 Call 0x31A7884, X0, X1, X2
	027 Move X0, [X20+32]
	028 Move X22, [X21]
	029 Move X20, [X21+8]
	030 Move W8, [X0+309]
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {36}
	035 Call 0x1C5D684
	036 Move X8, [X0+192]
	037 Move X0, X19
	038 Move X1, X22
	039 Move X2, X20
	040 Move X3, [X8+56]
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Move X23, [X31+56]
	047 Call 0x31A8044, X0, X1
	048 Return 
	049 Call 0x1C17F20

Method: System.Void Allocate(System.Int32 length, Unity.Collections.Allocator allocator, out Unity.Collections.NativeArray`1<T> array)

Disassembly:
	0x031A7884 MOVZ W2, 0x78
	0x031A7888 MOV X0, X19
	0x031A788C BL 0x3EB1AC0
	0x031A7890 LDP X20, X19, [X31 + 0x120]
	0x031A7894 LDP X30, X21, [X31 + 0x110]
	0x031A7898 LDR X29, [X31 + 0x100]
	0x031A789C ADD X31, X31, 0x130
	0x031A78A0 RET
	0x031A78A4 SUB X31, X31, 0x120
	0x031A78A8 STP X29, X30, [X31 + 0xF0]
	0x031A78AC STP X22, X21, [X31 + 0x100]
	0x031A78B0 STP X20, X19, [X31 + 0x110]
	0x031A78B4 LDR X21, [X0]
	0x031A78B8 MOV X8, X2
	0x031A78BC MOV W19, W1
	0x031A78C0 ADD X0, X31, 0x0
	0x031A78C4 MOVZ W2, 0x78
	0x031A78C8 MOV X1, X8
	0x031A78CC MOV X20, X3
	0x031A78D0 MOVZ W22, 0x78
	0x031A78D4 BL 0x3EB1AC0
	0x031A78D8 LDR X0, [X20 + 0x20]
	0x031A78DC LDRB W8, [X0 + 0x135]
	0x031A78E0 TBNZ X8, 0x0, 0x31A78E8
	0x031A78E4 BL 0x1C5C684
	0x031A78E8 ADD X0, X31, 0x78
	0x031A78EC ADD X1, X31, 0x0
	0x031A78F0 MOVZ W2, 0x78
	0x031A78F4 BL 0x3EB1AC0
	0x031A78F8 SMADDL X0, X19, X22, X21
	0x031A78FC ADD X1, X31, 0x78
	0x031A7900 MOVZ W2, 0x78
	0x031A7904 BL 0x3EB1B30
	0x031A7908 LDP X20, X19, [X31 + 0x110]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X3+32]
	007 Move X22, X3
	008 Move X19, X2
	009 Move W20, W1
	010 Move W9, [X8+309]
	011 Move W21, W0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {18}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move [X19], X31
	019 Move [X19+8], X31
	020 Move X0, [X22+32]
	021 Move W8, [X0+309]
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move X8, [X0+192]
	028 Move X0, [X8+64]
	029 Move W8, 28
	030 NotImplemented "Instruction SMADDL not yet implemented."
	031 Call 0x22A75C0
	032 Move W1, W0
	033 Move X0, X22
	034 Move W2, W20
	035 Move W3, W31
	036 Move X4, X31
	037 Call UnsafeUtility.MallocTracked, X0, X1, X2, X3
	038 Move [X19], X0
	039 Move [X19+8], W21
	040 Move [X19+12], W20
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return 

Method: System.Int32 get_Length()

Disassembly:
	0x031A790C LDP X22, X21, [X31 + 0x100]
	0x031A7910 LDP X29, X30, [X31 + 0xF0]

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: T get_Item(System.Int32 index)

Disassembly:
	0x031A7914 ADD X31, X31, 0x120
	0x031A7918 RET
	0x031A791C LDR X8, [X0]
	0x031A7920 CMP X8, 0x0
	0x031A7924 CSET W0, NE
	0x031A7928 RET
	0x031A792C STR X30, [X31 - 0x20]!
	0x031A7930 STP X20, X19, [X31 + 0x10]
	0x031A7934 LDR X8, [X1 + 0x20]
	0x031A7938 MOV X19, X1
	0x031A793C MOV X20, X0
	0x031A7940 LDRB W9, [X8 + 0x135]
	0x031A7944 TBNZ X9, 0x0, 0x31A7950
	0x031A7948 MOV X0, X8
	0x031A794C BL 0x1C5C684
	0x031A7950 LDR X0, [X20]
	0x031A7954 CBZ X0, 0x31A7978
	0x031A7958 LDR W1, [X20 + 0xC]
	0x031A795C CBZ W1, 0x31A7984
	0x031A7960 CMP W1, 0x2
	0x031A7964 B.LT 0x31A7974
	0x031A7968 MOV X2, X31
	0x031A796C BL 0x3BFFB84
	0x031A7970 STR W31, [X20 + 0xC]
	0x031A7974 STR X31, [X20]
	0x031A7978 LDP X20, X19, [X31 + 0x10]
	0x031A797C LDR X30, [X31], #0x20
	0x031A7980 RET
	0x031A7984 ADRP X0, 0xF4C000
	0x031A7988 LDR X0, [X0 + 0x5B0]
	0x031A798C BL 0x1C16D08
	0x031A7990 BL 0x1C16F10
	0x031A7994 MOV X20, X0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move [X31+32], X31
	007 Move [X31+40], X31
	008 Move [X31+56], W31
	009 Move [X31+48], X31
	010 Move X9, X0
	011 Move X0, [X2+32]
	012 Move X21, [X9]
	013 Move W20, W1
	014 Move X19, X8
	015 Move W10, [X0+309]
	016 Move TEMP, X10
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {21}
	020 Call 0x1C5D684
	021 Move W8, 28
	022 NotImplemented "Instruction SMADDL not yet implemented."
	023 Move W9, [X8+24]
	024 Move X10, [X8+16]
	025 Move V0, [X8]
	026 Move X30, [X31+64]
	027 Move X21, [X31+72]
	028 Move [X31+24], W9
	029 Move [X31+16], X10
	030 Move [X31], V0
	031 NotImplemented "Instruction LDUR not yet implemented."
	032 Move [X31+2], V0
	033 Move [X31+44], V1
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 Move V1, [X31+2]
	036 Move [X19+12], V0
	037 Move [X19], V1
	038 Move X20, [X31+80]
	039 Move X19, [X31+88]
	040 Add X31, X31, 96
	041 Return X0

Method: System.Void set_Item(System.Int32 index, T value)

Disassembly:
	0x031A7998 ADRP X0, 0xF75000
	0x031A799C LDR X0, [X0 + 0xBC8]
	0x031A79A0 BL 0x1C16D08
	0x031A79A4 MOV X1, X0
	0x031A79A8 MOV X0, X20
	0x031A79AC MOV X2, X31
	0x031A79B0 BL 0x337DF1C
	0x031A79B4 MOV X0, X20
	0x031A79B8 MOV X1, X19
	0x031A79BC BL 0x1C16DEC
	0x031A79C0 STP X30, X23, [X31 - 0x30]!
	0x031A79C4 STP X22, X21, [X31 + 0x10]
	0x031A79C8 STP X20, X19, [X31 + 0x20]
	0x031A79CC ADRP X23, 0x1234000
	0x031A79D0 LDRB W8, [X23 + 0xE2C]
	0x031A79D4 MOV X19, X3
	0x031A79D8 MOV X21, X2
	0x031A79DC MOV X22, X1
	0x031A79E0 MOV X20, X0
	0x031A79E4 TBNZ X8, 0x0, 0x31A79FC
	0x031A79E8 ADRP X0, 0xF75000
	0x031A79EC LDR X0, [X0 + 0xBD0]
	0x031A79F0 BL 0x1C16CF4
	0x031A79F4 MOVZ W8, 0x1
	0x031A79F8 STRB W8, [X23 + 0xE2C]
	0x031A79FC LDR X0, [X19 + 0x20]
	0x031A7A00 LDRB W8, [X0 + 0x135]
	0x031A7A04 TBNZ X8, 0x0, 0x31A7A0C
	0x031A7A08 BL 0x1C5C684

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 NotImplemented "Instruction LDUR not yet implemented."
	006 Move V1, [X2]
	007 Move X20, [X0]
	008 Move W19, W1
	009 Move [X31+12], V0
	010 Move [X31], V1
	011 Move X0, [X3+32]
	012 Move W8, [X0+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move V0, [X31]
	019 NotImplemented "Instruction LDUR not yet implemented."
	020 Move W8, 28
	021 NotImplemented "Instruction SMADDL not yet implemented."
	022 Move [X31+2], V0
	023 Move [X31+44], V1
	024 Move W9, [X31+56]
	025 Move X10, [X31+48]
	026 Move V0, [X31+2]
	027 Move X20, [X31+80]
	028 Move X19, [X31+88]
	029 Move X30, [X31+64]
	030 Move [X8+24], W9
	031 Move [X8+16], X10
	032 Move [X8], V0
	033 Add X31, X31, 96
	034 Return 

Method: System.Boolean get_IsCreated()

Disassembly:
	0x031A7A0C LDR X0, [X20]
	0x031A7A10 CBZ X0, 0x31A7A50
	0x031A7A14 LDR W1, [X20 + 0xC]
	0x031A7A18 CMP W1, 0x40

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Void Dispose()

Disassembly:
	0x031A7A1C B.GE 0x31A7A68
	0x031A7A20 CMP W1, 0x2
	0x031A7A24 B.LT 0x31A7A4C
	0x031A7A28 ADRP X8, 0xF75000
	0x031A7A2C LDR X8, [X8 + 0xBD0]
	0x031A7A30 MOV X2, X22
	0x031A7A34 MOV X3, X21
	0x031A7A38 LDR X4, [X8]
	0x031A7A3C BL 0x21EE34C
	0x031A7A40 STR X31, [X20]
	0x031A7A44 STR W31, [X20 + 0xC]
	0x031A7A48 B 0x31A7A58
	0x031A7A4C STR X31, [X20]
	0x031A7A50 MOV X0, X22
	0x031A7A54 MOV X1, X21
	0x031A7A58 LDP X20, X19, [X31 + 0x20]
	0x031A7A5C LDP X22, X21, [X31 + 0x10]
	0x031A7A60 LDP X30, X23, [X31], #0x30
	0x031A7A64 RET
	0x031A7A68 ADRP X0, 0xF4C000
	0x031A7A6C LDR X0, [X0 + 0x5B0]
	0x031A7A70 BL 0x1C16D08
	0x031A7A74 BL 0x1C16F10
	0x031A7A78 MOV X20, X0
	0x031A7A7C ADRP X0, 0xF75000
	0x031A7A80 LDR X0, [X0 + 0xBD8]
	0x031A7A84 BL 0x1C16D08
	0x031A7A88 MOV X1, X0
	0x031A7A8C MOV X0, X20
	0x031A7A90 MOV X2, X31
	0x031A7A94 BL 0x337DF1C
	0x031A7A98 MOV X0, X20
	0x031A7A9C MOV X1, X19
	0x031A7AA0 BL 0x1C16DEC
	0x031A7AA4 STP X30, X21, [X31 - 0x20]!
	0x031A7AA8 STP X20, X19, [X31 + 0x10]
	0x031A7AAC MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+32]
	005 Move X19, X1
	006 Move X20, X0
	007 Move W9, [X8+309]
	008 Move TEMP, X9
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {14}
	012 Move X0, X8
	013 Call 0x1C5D684
	014 Move X0, [X20]
	015 Compare X0, 0
	016 JumpIfEqual {25}
	017 Move W1, [X20+12]
	018 Compare W1, 0
	019 JumpIfEqual {29}
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X2, X31
	022 Call UnsafeUtility.FreeTracked, X0, X1
	023 Move [X20+12], W31
	024 Move [X20], X31
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Move X0, 0xF4D000
	030 Move X0, [X0+1456]
	031 Call 0x1C17D08
	032 Call 0x1C17F10
	033 Move X20, X0
	034 Move X0, 0xF76000
	035 Move X0, [X0+3016]
	036 Call 0x1C17D08
	037 Move X1, X0
	038 Move X0, X20
	039 Move X2, X31
	040 Call InvalidOperationException..ctor, X0, X1
	041 Move X0, X20
	042 Move X1, X19
	043 Call 0x1C17DEC

Method: Unity.Jobs.JobHandle Dispose(Unity.Jobs.JobHandle inputDeps)

Disassembly:
	0x031A7AB0 LDR X0, [X2 + 0x20]
	0x031A7AB4 LDP X20, X19, [X8]
	0x031A7AB8 MOV X21, X1
	0x031A7ABC LDRB W9, [X0 + 0x135]
	0x031A7AC0 TBNZ X9, 0x0, 0x31A7AC8
	0x031A7AC4 BL 0x1C5C684
	0x031A7AC8 LDR X8, [X0 + 0xC0]
	0x031A7ACC MOV X1, X20
	0x031A7AD0 MOV X2, X19
	0x031A7AD4 LDP X20, X19, [X31 + 0x10]
	0x031A7AD8 LDR X3, [X8 + 0x38]
	0x031A7ADC MOV X0, X21
	0x031A7AE0 LDP X30, X21, [X31], #0x20
	0x031A7AE4 B 0x31A7F68
	0x031A7AE8 STR X30, [X31 - 0x30]!
	0x031A7AEC STP X22, X21, [X31 + 0x10]
	0x031A7AF0 STP X20, X19, [X31 + 0x20]
	0x031A7AF4 MOV X8, X0
	0x031A7AF8 LDR X0, [X3 + 0x20]
	0x031A7AFC LDP X21, X20, [X8]
	0x031A7B00 MOV X19, X2
	0x031A7B04 MOV X22, X1
	0x031A7B08 LDRB W9, [X0 + 0x135]
	0x031A7B0C TBNZ X9, 0x0, 0x31A7B14
	0x031A7B10 BL 0x1C5C684
	0x031A7B14 LDR X8, [X0 + 0xC0]
	0x031A7B18 MOV X0, X22
	0x031A7B1C MOV X1, X19
	0x031A7B20 MOV X2, X21
	0x031A7B24 LDR X4, [X8 + 0x68]
	0x031A7B28 MOV X3, X20
	0x031A7B2C LDP X20, X19, [X31 + 0x20]
	0x031A7B30 LDP X22, X21, [X31 + 0x10]
	0x031A7B34 LDR X30, [X31], #0x30
	0x031A7B38 B 0x31A7F00
	0x031A7B3C STP X30, X21, [X31 - 0x20]!
	0x031A7B40 STP X20, X19, [X31 + 0x10]
	0x031A7B44 MOV X8, X0
	0x031A7B48 LDR X0, [X2 + 0x20]
	0x031A7B4C LDP X21, X20, [X8]
	0x031A7B50 MOV X19, X1
	0x031A7B54 LDRB W9, [X0 + 0x135]
	0x031A7B58 TBNZ X9, 0x0, 0x31A7B60
	0x031A7B5C BL 0x1C5C684
	0x031A7B60 LDR X8, [X0 + 0xC0]
	0x031A7B64 MOV X1, X20
	0x031A7B68 MOV X2, X19
	0x031A7B6C LDP X20, X19, [X31 + 0x10]
	0x031A7B70 LDR X3, [X8 + 0x70]
	0x031A7B74 MOV X0, X21
	0x031A7B78 LDP X30, X21, [X31], #0x20
	0x031A7B7C B 0x31A7FCC
	0x031A7B80 STP X30, X21, [X31 - 0x20]!
	0x031A7B84 STP X20, X19, [X31 + 0x10]
	0x031A7B88 MOV X19, X0
	0x031A7B8C LDR X0, [X1 + 0x20]
	0x031A7B90 LDR W21, [X19 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1235000
	008 Move W8, [X23+3627]
	009 Move X19, X3
	010 Move X21, X2
	011 Move X22, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xF76000
	018 Move X0, [X0+3024]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X23+3627], W8
	022 Move X0, [X19+32]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X0, [X20]
	030 Compare X0, 0
	031 JumpIfEqual {44}
	032 Move W1, [X20+12]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X8, 0xF76000
	036 Move X8, [X8+3024]
	037 Move X2, X22
	038 Move X3, X21
	039 Move X4, [X8]
	040 Call IJobExtensions.Schedule, X0, X1
	041 Move [X20], X31
	042 Move [X20+12], W31
	043 Move [X20], X31
	044 Move X0, X22
	045 Move X1, X21
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Move X23, [X31+56]
	052 Return X0
	053 Move X0, 0xF4D000
	054 Move X0, [X0+1456]
	055 Call 0x1C17D08
	056 Call 0x1C17F10
	057 Move X20, X0
	058 Move X0, 0xF76000
	059 Move X0, [X0+3032]
	060 Call 0x1C17D08
	061 Move X1, X0
	062 Move X0, X20
	063 Move X2, X31
	064 Call InvalidOperationException..ctor, X0, X1
	065 Move X0, X20
	066 Move X1, X19
	067 Call 0x1C17DEC

Method: System.Void CopyFrom(T[] array)

Disassembly:
	0x031A7B94 MOV X20, X1
	0x031A7B98 LDRB W8, [X0 + 0x135]
	0x031A7B9C TBNZ X8, 0x0, 0x31A7BA4
	0x031A7BA0 BL 0x1C5C684
	0x031A7BA4 LDR X8, [X0 + 0xC0]
	0x031A7BA8 LDR X0, [X8 + 0x78]
	0x031A7BAC LDRB W8, [X0 + 0x135]
	0x031A7BB0 TBNZ X8, 0x0, 0x31A7BB8
	0x031A7BB4 BL 0x1C5C684
	0x031A7BB8 MOV W1, W21
	0x031A7BBC BL 0x1C16D6C
	0x031A7BC0 LDR X8, [X20 + 0x20]
	0x031A7BC4 LDP X21, X20, [X19]
	0x031A7BC8 MOV X19, X0
	0x031A7BCC LDRB W9, [X8 + 0x135]
	0x031A7BD0 TBNZ X9, 0x0, 0x31A7BE0
	0x031A7BD4 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, X0
	006 Move X0, [X2+32]
	007 Move X20, [X8]
	008 Move X19, [X8+8]
	009 Move X21, X1
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Move X8, [X0+192]
	017 Move X1, X20
	018 Move X2, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X3, [X8+56]
	022 Move X0, X21
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x31A8044, X0, X1
	026 Return 

Method: System.Void CopyFrom(Unity.Collections.NativeArray`1<T> array)

Disassembly:
	0x031A7BD8 BL 0x1C5C684
	0x031A7BDC MOV X8, X0
	0x031A7BE0 LDR X8, [X8 + 0xC0]
	0x031A7BE4 MOV X0, X21
	0x031A7BE8 MOV X1, X20
	0x031A7BEC MOV X2, X19
	0x031A7BF0 LDR X4, [X8 + 0x80]
	0x031A7BF4 MOV W3, W20
	0x031A7BF8 BL 0x31A80F4
	0x031A7BFC MOV X0, X19
	0x031A7C00 LDP X20, X19, [X31 + 0x10]
	0x031A7C04 LDP X30, X21, [X31], #0x20
	0x031A7C08 RET
	0x031A7C0C SUB X31, X31, 0x150
	0x031A7C10 STR X29, [X31 + 0x120]
	0x031A7C14 STP X30, X21, [X31 + 0x130]
	0x031A7C18 STP X20, X19, [X31 + 0x140]
	0x031A7C1C MOV X21, X1
	0x031A7C20 MOV X20, X0
	0x031A7C24 ADD X0, X31, 0x0
	0x031A7C28 MOVZ W2, 0x90

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, X0
	007 Move X0, [X3+32]
	008 Move X21, [X8]
	009 Move X20, [X8+8]
	010 Move X19, X2
	011 Move X22, X1
	012 Move W9, [X0+309]
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move X8, [X0+192]
	019 Move X0, X22
	020 Move X1, X19
	021 Move X2, X21
	022 Move X4, [X8+104]
	023 Move X3, X20
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x31A7FDC, X0, X1
	030 Return 

Method: System.Void CopyTo(T[] array)

Disassembly:
	0x031A7C2C MOV W1, W31
	0x031A7C30 MOV X19, X8
	0x031A7C34 BL 0x3EB1B10
	0x031A7C38 LDR X0, [X21 + 0x20]
	0x031A7C3C LDRB W8, [X0 + 0x135]
	0x031A7C40 TBNZ X8, 0x0, 0x31A7C48
	0x031A7C44 BL 0x1C5C684
	0x031A7C48 LDR X8, [X0 + 0xC0]
	0x031A7C4C ADD X0, X31, 0x0
	0x031A7C50 MOV X1, X20
	0x031A7C54 LDR X2, [X8 + 0x90]
	0x031A7C58 BL 0x2BB5364
	0x031A7C5C ADD X0, X31, 0x90
	0x031A7C60 ADD X1, X31, 0x0
	0x031A7C64 MOVZ W2, 0x90
	0x031A7C68 BL 0x3EB1AC0
	0x031A7C6C ADD X1, X31, 0x90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, X0
	006 Move X0, [X2+32]
	007 Move X21, [X8]
	008 Move X20, [X8+8]
	009 Move X19, X1
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Move X8, [X0+192]
	017 Move X1, X20
	018 Move X2, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X3, [X8+112]
	022 Move X0, X21
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x31A80A8, X0, X1
	026 Return 

Method: T[] ToArray()

Disassembly:
	0x031A7C70 MOVZ W2, 0x90
	0x031A7C74 MOV X0, X19
	0x031A7C78 BL 0x3EB1AC0
	0x031A7C7C LDP X20, X19, [X31 + 0x140]
	0x031A7C80 LDP X30, X21, [X31 + 0x130]
	0x031A7C84 LDR X29, [X31 + 0x120]
	0x031A7C88 ADD X31, X31, 0x150
	0x031A7C8C RET
	0x031A7C90 SUB X31, X31, 0x140
	0x031A7C94 STP X29, X30, [X31 + 0x120]
	0x031A7C98 STP X20, X19, [X31 + 0x130]
	0x031A7C9C MOV X19, X1
	0x031A7CA0 MOV X20, X0
	0x031A7CA4 ADD X0, X31, 0x90
	0x031A7CA8 MOVZ W2, 0x90
	0x031A7CAC MOV W1, W31
	0x031A7CB0 BL 0x3EB1B10
	0x031A7CB4 LDR X0, [X19 + 0x20]
	0x031A7CB8 LDRB W8, [X0 + 0x135]
	0x031A7CBC TBNZ X8, 0x0, 0x31A7CC4
	0x031A7CC0 BL 0x1C5C684
	0x031A7CC4 LDR X8, [X0 + 0xC0]
	0x031A7CC8 ADD X0, X31, 0x90
	0x031A7CCC MOV X1, X20
	0x031A7CD0 LDR X2, [X8 + 0x90]
	0x031A7CD4 BL 0x2BB5364
	0x031A7CD8 ADD X0, X31, 0x0
	0x031A7CDC ADD X1, X31, 0x90
	0x031A7CE0 MOVZ W2, 0x90
	0x031A7CE4 BL 0x3EB1AC0
	0x031A7CE8 LDR X0, [X19 + 0x20]
	0x031A7CEC LDRB W8, [X0 + 0x135]
	0x031A7CF0 TBNZ X8, 0x0, 0x31A7CF8
	0x031A7CF4 BL 0x1C5C684
	0x031A7CF8 LDR X8, [X0 + 0xC0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X1+32]
	007 Move W21, [X19+8]
	008 Move X20, X1
	009 Move W8, [X0+309]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {15}
	014 Call 0x1C5D684
	015 Move X8, [X0+192]
	016 Move X0, [X8+120]
	017 Move W8, [X0+309]
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {23}
	022 Call 0x1C5D684
	023 Move W1, W21
	024 Call 0x1C17D6C
	025 Move X8, [X20+32]
	026 Move X21, [X19]
	027 Move X20, [X19+8]
	028 Move X19, X0
	029 Move W9, [X8+309]
	030 Move TEMP, X9
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {37}
	034 Move X0, X8
	035 Call 0x1C5D684
	036 Move X8, X0
	037 Move X8, [X8+192]
	038 Move X0, X21
	039 Move X1, X20
	040 Move X2, X19
	041 Move X4, [X8+128]
	042 Move W3, W20
	043 Call 0x31A81D0, X0, X1, X2
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: Unity.Collections.NativeArray`1/Enumerator<T> GetEnumerator()

Disassembly:
	0x031A7CFC ADD X1, X31, 0x0
	0x031A7D00 LDR X0, [X8 + 0x88]
	0x031A7D04 BL 0x1C16E04
	0x031A7D08 LDP X20, X19, [X31 + 0x130]
	0x031A7D0C LDP X29, X30, [X31 + 0x120]
	0x031A7D10 ADD X31, X31, 0x140
	0x031A7D14 RET
	0x031A7D18 SUB X31, X31, 0x140
	0x031A7D1C STP X29, X30, [X31 + 0x120]
	0x031A7D20 STP X20, X19, [X31 + 0x130]
	0x031A7D24 LDR X8, [X1 + 0x20]
	0x031A7D28 MOV X19, X1
	0x031A7D2C MOV X20, X0
	0x031A7D30 LDRB W9, [X8 + 0x135]
	0x031A7D34 TBNZ X9, 0x0, 0x31A7D44
	0x031A7D38 MOV X0, X8
	0x031A7D3C BL 0x1C5C684
	0x031A7D40 MOV X8, X0
	0x031A7D44 LDR X8, [X8 + 0xC0]
	0x031A7D48 MOV X0, X20
	0x031A7D4C LDR X1, [X8 + 0xA0]
	0x031A7D50 ADD X8, X31, 0x90
	0x031A7D54 BL 0x31A7C0C
	0x031A7D58 ADD X0, X31, 0x0
	0x031A7D5C ADD X1, X31, 0x90
	0x031A7D60 MOVZ W2, 0x90
	0x031A7D64 BL 0x3EB1AC0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Move [X31+16], V0
	007 Move [X31+24], V0
	008 Move [X31], V0
	009 Move X20, X0
	010 Move X0, [X1+32]
	011 Move X19, X8
	012 Move W9, [X0+309]
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move X8, [X0+192]
	019 Add X0, X31, 0
	020 Move X1, X20
	021 Move X2, [X8+144]
	022 Call 0x2BB5848, X0, X1
	023 Move V1, [X31+16]
	024 Move V0, [X31+32]
	025 Move V2, [X31]
	026 Move X30, [X31+96]
	027 Move [X19+16], V1
	028 Move [X19+24], V0
	029 Move [X19], V2
	030 Move X20, [X31+112]
	031 Move X19, [X31+120]
	032 Move [X31+64], V1
	033 Move [X31+72], V0
	034 Move [X31+3], V2
	035 Add X31, X31, 128
	036 Return X0

Method: System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()

Disassembly:
	0x031A7D68 LDR X0, [X19 + 0x20]
	0x031A7D6C LDRB W8, [X0 + 0x135]
	0x031A7D70 TBNZ X8, 0x0, 0x31A7D78
	0x031A7D74 BL 0x1C5C684
	0x031A7D78 LDR X8, [X0 + 0xC0]
	0x031A7D7C ADD X1, X31, 0x0
	0x031A7D80 LDR X0, [X8 + 0x88]
	0x031A7D84 BL 0x1C16E04
	0x031A7D88 LDP X20, X19, [X31 + 0x130]
	0x031A7D8C LDP X29, X30, [X31 + 0x120]
	0x031A7D90 ADD X31, X31, 0x140
	0x031A7D94 RET
	0x031A7D98 LDR X8, [X0]
	0x031A7D9C CMP X1, X8
	0x031A7DA0 B.NE 0x31A7DB4
	0x031A7DA4 LDR W8, [X0 + 0x8]
	0x031A7DA8 CMP W8, W2
	0x031A7DAC CSET W0, EQ
	0x031A7DB0 RET
	0x031A7DB4 MOV W0, W31
	0x031A7DB8 RET
	0x031A7DBC STP X30, X21, [X31 - 0x20]!
	0x031A7DC0 STP X20, X19, [X31 + 0x10]
	0x031A7DC4 CBZ X1, 0x31A7E80
	0x031A7DC8 MOV X19, X0
	0x031A7DCC LDR X0, [X2 + 0x20]
	0x031A7DD0 MOV X20, X2
	0x031A7DD4 MOV X21, X1
	0x031A7DD8 LDRB W8, [X0 + 0x135]
	0x031A7DDC TBNZ X8, 0x0, 0x31A7DE4
	0x031A7DE0 BL 0x1C5C684
	0x031A7DE4 LDR X8, [X0 + 0xC0]
	0x031A7DE8 LDR X0, [X8 + 0x18]
	0x031A7DEC LDRB W8, [X0 + 0x135]
	0x031A7DF0 TBNZ X8, 0x0, 0x31A7DF8

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 NotImplemented "Instruction MOVI not yet implemented."
	006 Move [X31+64], V0
	007 Move [X31+72], V0
	008 Move [X31+3], V0
	009 Move X8, [X1+32]
	010 Move X19, X1
	011 Move X20, X0
	012 Move W9, [X8+309]
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {20}
	017 Move X0, X8
	018 Call 0x1C5D684
	019 Move X8, X0
	020 Move X8, [X8+192]
	021 Add X0, X31, 48
	022 Move X1, X20
	023 Move X2, [X8+144]
	024 Call 0x2BB5848, X0, X1
	025 Move V1, [X31+64]
	026 Move V0, [X31+80]
	027 Move V2, [X31+3]
	028 Move [X31+16], V1
	029 Move [X31+24], V0
	030 Move [X31], V2
	031 Move X0, [X19+32]
	032 Move W8, [X0+309]
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {38}
	037 Call 0x1C5D684
	038 Move X8, [X0+192]
	039 Add X1, X31, 0
	040 Move X0, [X8+136]
	041 Call 0x1C17E04
	042 Move X20, [X31+112]
	043 Move X19, [X31+120]
	044 Move X30, [X31+96]
	045 Add X31, X31, 128
	046 Return X0

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x031A7DF4 BL 0x1C5C684
	0x031A7DF8 LDR X8, [X21]
	0x031A7DFC CMP X8, X0
	0x031A7E00 B.NE 0x31A7E80
	0x031A7E04 LDR X0, [X20 + 0x20]
	0x031A7E08 LDRB W8, [X0 + 0x135]
	0x031A7E0C TBNZ X8, 0x0, 0x31A7E14
	0x031A7E10 BL 0x1C5C684
	0x031A7E14 LDR X8, [X0 + 0xC0]
	0x031A7E18 LDR X1, [X8 + 0x18]
	0x031A7E1C LDRB W8, [X1 + 0x135]
	0x031A7E20 TBNZ X8, 0x0, 0x31A7E30
	0x031A7E24 MOV X0, X1
	0x031A7E28 BL 0x1C5C684
	0x031A7E2C MOV X1, X0
	0x031A7E30 LDR X8, [X21]
	0x031A7E34 LDR X9, [X1 + 0x40]
	0x031A7E38 MOV X0, X21
	0x031A7E3C LDR X8, [X8 + 0x40]
	0x031A7E40 CMP X8, X9
	0x031A7E44 B.NE 0x31A7E90
	0x031A7E48 BL 0x1C16E08
	0x031A7E4C MOV X8, X0
	0x031A7E50 LDR X0, [X20 + 0x20]
	0x031A7E54 LDP X21, X20, [X8]
	0x031A7E58 LDRB W9, [X0 + 0x135]
	0x031A7E5C TBNZ X9, 0x0, 0x31A7E64
	0x031A7E60 BL 0x1C5C684
	0x031A7E64 LDR X8, [X19]
	0x031A7E68 CMP X21, X8
	0x031A7E6C B.NE 0x31A7E80
	0x031A7E70 LDR W8, [X19 + 0x8]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+112], X20
	004 Move [X31+120], X19
	005 Move X8, [X1+32]
	006 Move X19, X1
	007 Move X20, X0
	008 Move W9, [X8+309]
	009 Move TEMP, X9
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {16}
	013 Move X0, X8
	014 Call 0x1C5D684
	015 Move X8, X0
	016 Move X8, [X8+192]
	017 Move X0, X20
	018 Move X1, [X8+160]
	019 Add X8, X31, 48
	020 Call 0x31A7CFC, X0
	021 Move V1, [X31+64]
	022 Move V0, [X31+80]
	023 Move V2, [X31+3]
	024 Move [X31+16], V1
	025 Move [X31+24], V0
	026 Move [X31], V2
	027 Move X0, [X19+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Add X1, X31, 0
	036 Move X0, [X8+136]
	037 Call 0x1C17E04
	038 Move X20, [X31+112]
	039 Move X19, [X31+120]
	040 Move X30, [X31+96]
	041 Add X31, X31, 128
	042 Return X0

Method: System.Boolean Equals(Unity.Collections.NativeArray`1<T> other)

Disassembly:
	0x031A7E74 CMP W8, W20
	0x031A7E78 CSET W0, EQ
	0x031A7E7C B 0x31A7E84
	0x031A7E80 MOV W0, W31
	0x031A7E84 LDP X20, X19, [X31 + 0x10]
	0x031A7E88 LDP X30, X21, [X31], #0x20
	0x031A7E8C RET
	0x031A7E90 BL 0x1C171E0
	0x031A7E94 LDR W8, [X0]

ISIL:
	001 Move X8, [X0]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+8]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Return X0
	007 Move W0, W31
	008 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x031A7E98 LDR W9, [X0 + 0x8]
	0x031A7E9C MOVZ W10, 0x18D
	0x031A7EA0 MUL W8, W8, W10
	0x031A7EA4 EOR W0, W8, W9, 0x0
	0x031A7EA8 RET
	0x031A7EAC STR X30, [X31 - 0x30]!
	0x031A7EB0 STP X22, X21, [X31 + 0x10]
	0x031A7EB4 STP X20, X19, [X31 + 0x20]
	0x031A7EB8 LDR X8, [X4 + 0x20]
	0x031A7EBC MOV X19, X3
	0x031A7EC0 MOV X21, X2
	0x031A7EC4 MOV X20, X1
	0x031A7EC8 LDRB W9, [X8 + 0x135]
	0x031A7ECC MOV X22, X0
	0x031A7ED0 TBNZ X9, 0x0, 0x31A7EDC
	0x031A7ED4 MOV X0, X8
	0x031A7ED8 BL 0x1C5C684
	0x031A7EDC CMP X21, X22
	0x031A7EE0 CSET W8, EQ
	0x031A7EE4 CMP W20, W19
	0x031A7EE8 LDP X20, X19, [X31 + 0x20]
	0x031A7EEC LDP X22, X21, [X31 + 0x10]
	0x031A7EF0 CSET W9, EQ
	0x031A7EF4 AND W0, W8, W9, 0x0
	0x031A7EF8 LDR X30, [X31], #0x30
	0x031A7EFC RET
	0x031A7F00 STR X30, [X31 - 0x30]!
	0x031A7F04 STP X22, X21, [X31 + 0x10]
	0x031A7F08 STP X20, X19, [X31 + 0x20]
	0x031A7F0C LDR X8, [X4 + 0x20]
	0x031A7F10 MOV X20, X3
	0x031A7F14 MOV X21, X2
	0x031A7F18 MOV X19, X1
	0x031A7F1C LDRB W9, [X8 + 0x135]
	0x031A7F20 MOV X22, X0
	0x031A7F24 TBNZ X9, 0x0, 0x31A7F34
	0x031A7F28 MOV X0, X8
	0x031A7F2C BL 0x1C5C684
	0x031A7F30 MOV X8, X0
	0x031A7F34 LDR X8, [X8 + 0xC0]
	0x031A7F38 MOV X0, X22
	0x031A7F3C MOV X1, X19
	0x031A7F40 MOV X3, X21
	0x031A7F44 LDR X7, [X8 + 0xB0]
	0x031A7F48 MOV X4, X20
	0x031A7F4C MOV W6, W19
	0x031A7F50 LDP X20, X19, [X31 + 0x20]
	0x031A7F54 LDP X22, X21, [X31 + 0x10]
	0x031A7F58 MOV W2, W31
	0x031A7F5C MOV W5, W31
	0x031A7F60 LDR X30, [X31], #0x30
	0x031A7F64 B 0x31A8248
	0x031A7F68 STR X30, [X31 - 0x30]!
	0x031A7F6C STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {65}
	007 Move X19, X0
	008 Move X0, [X2+32]
	009 Move X20, X2
	010 Move X21, X1
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move X8, [X0+192]
	018 Move X0, [X8+24]
	019 Move W8, [X0+309]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {25}
	024 Call 0x1C5D684
	025 Move X8, [X21]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20+32]
	028 Move W8, [X0+309]
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {34}
	033 Call 0x1C5D684
	034 Move X8, [X0+192]
	035 Move X1, [X8+24]
	036 Move W8, [X1+309]
	037 Move TEMP, X8
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfEqual {44}
	041 Move X0, X1
	042 Call 0x1C5D684
	043 Move X1, X0
	044 Move X8, [X21]
	045 Move X9, [X1+64]
	046 Move X0, X21
	047 Move X8, [X8+64]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Call 0x1C17E08
	050 Move X8, X0
	051 Move X0, [X20+32]
	052 Move X21, [X8]
	053 Move X20, [X8+8]
	054 Move W9, [X0+309]
	055 Move TEMP, X9
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {60}
	059 Call 0x1C5D684
	060 Move X8, [X19]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W8, [X19+8]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSET not yet implemented."
	065 Move W0, W31
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Return X0
	071 Call 0x1C181E0

Method: System.Int32 GetHashCode()

Disassembly:
	0x031A7F70 STP X20, X19, [X31 + 0x20]
	0x031A7F74 CBZ X0, 0x31A7FC8
	0x031A7F78 MOV X21, X0
	0x031A7F7C LDR X0, [X3 + 0x20]
	0x031A7F80 LDR X22, [X21 + 0x18]
	0x031A7F84 MOV X19, X2

ISIL:
	001 Move W8, [X0]
	002 Move W9, [X0+8]
	003 Move W10, 397
	004 Multiply W8, W8, W10
	005 Xor W0, W8, W9
	006 Return X0

Method: System.Boolean op_Equality(Unity.Collections.NativeArray`1<T> left, Unity.Collections.NativeArray`1<T> right)

Disassembly:
	0x031A7F88 MOV X20, X1
	0x031A7F8C LDRB W8, [X0 + 0x135]
	0x031A7F90 TBNZ X8, 0x0, 0x31A7F98
	0x031A7F94 BL 0x1C5C684
	0x031A7F98 LDR X8, [X0 + 0xC0]
	0x031A7F9C MOV X0, X21
	0x031A7FA0 MOV X2, X20
	0x031A7FA4 MOV X3, X19
	0x031A7FA8 LDR X6, [X8 + 0xB8]
	0x031A7FAC MOV W5, W22
	0x031A7FB0 LDP X20, X19, [X31 + 0x20]
	0x031A7FB4 LDP X22, X21, [X31 + 0x10]
	0x031A7FB8 MOV W1, W31
	0x031A7FBC MOV W4, W31
	0x031A7FC0 LDR X30, [X31], #0x30
	0x031A7FC4 B 0x31A82F8
	0x031A7FC8 BL 0x1C16F20
	0x031A7FCC STP X30, X21, [X31 - 0x20]!
	0x031A7FD0 STP X20, X19, [X31 + 0x10]
	0x031A7FD4 LDR X8, [X3 + 0x20]
	0x031A7FD8 MOV X20, X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X4+32]
	007 Move X19, X3
	008 Move X21, X2
	009 Move X20, X1
	010 Move W9, [X8+309]
	011 Move X22, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {18}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 NotImplemented "Instruction CMP not yet implemented."
	019 NotImplemented "Instruction CSET not yet implemented."
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 NotImplemented "Instruction CSET not yet implemented."
	026 And W0, W8, W9
	027 Move X30, [X31+48]
	028 Return X0

Method: System.Void Copy(Unity.Collections.NativeArray`1<T> src, Unity.Collections.NativeArray`1<T> dst)

Disassembly:
	0x031A7FDC MOV X19, X1
	0x031A7FE0 MOV X21, X0
	0x031A7FE4 LDRB W9, [X8 + 0x135]
	0x031A7FE8 TBNZ X9, 0x0, 0x31A7FF8
	0x031A7FEC MOV X0, X8
	0x031A7FF0 BL 0x1C5C684
	0x031A7FF4 MOV X8, X0
	0x031A7FF8 LDR X8, [X8 + 0xC0]
	0x031A7FFC MOV X1, X19
	0x031A8000 MOV X3, X20
	0x031A8004 MOV W5, W19
	0x031A8008 LDR X6, [X8 + 0xC0]
	0x031A800C LDP X20, X19, [X31 + 0x10]
	0x031A8010 MOV X0, X21
	0x031A8014 MOV W2, W31
	0x031A8018 MOV W4, W31
	0x031A801C LDP X30, X21, [X31], #0x20
	0x031A8020 B 0x31A83D4
	0x031A8024 STP X30, X23, [X31 - 0x30]!
	0x031A8028 STP X22, X21, [X31 + 0x10]
	0x031A802C STP X20, X19, [X31 + 0x20]
	0x031A8030 LDR X8, [X5 + 0x20]
	0x031A8034 MOV W19, W4
	0x031A8038 MOV X20, X3
	0x031A803C MOV X21, X2
	0x031A8040 LDRB W9, [X8 + 0x135]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X4+32]
	007 Move X20, X3
	008 Move X21, X2
	009 Move X19, X1
	010 Move W9, [X8+309]
	011 Move X22, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X0, X22
	021 Move X1, X19
	022 Move X3, X21
	023 Move X7, [X8+176]
	024 Move X4, X20
	025 Move W6, W19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X22, [X31+16]
	029 Move X21, [X31+24]
	030 Move W2, W31
	031 Move W5, W31
	032 Move X30, [X31+48]
	033 Call 0x31A8324, X0, X1, X2, X3, X4
	034 Return 

Method: System.Void Copy(T[] src, Unity.Collections.NativeArray`1<T> dst)

Disassembly:
	0x031A8044 MOV X22, X1
	0x031A8048 MOV X23, X0
	0x031A804C TBNZ X9, 0x0, 0x31A805C
	0x031A8050 MOV X0, X8
	0x031A8054 BL 0x1C5C684
	0x031A8058 MOV X8, X0
	0x031A805C LDR X8, [X8 + 0xC0]
	0x031A8060 MOV X1, X22
	0x031A8064 MOV X3, X21
	0x031A8068 MOV X4, X20
	0x031A806C LDR X7, [X8 + 0xB0]
	0x031A8070 MOV W6, W19
	0x031A8074 LDP X20, X19, [X31 + 0x20]
	0x031A8078 LDP X22, X21, [X31 + 0x10]
	0x031A807C MOV X0, X23
	0x031A8080 MOV W2, W31
	0x031A8084 MOV W5, W31
	0x031A8088 LDP X30, X23, [X31], #0x30
	0x031A808C B 0x31A8248
	0x031A8090 STR X30, [X31 - 0x30]!
	0x031A8094 STP X22, X21, [X31 + 0x10]
	0x031A8098 STP X20, X19, [X31 + 0x20]
	0x031A809C LDR X8, [X4 + 0x20]
	0x031A80A0 MOV W19, W3
	0x031A80A4 MOV X20, X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {34}
	008 Move X21, X0
	009 Move X0, [X3+32]
	010 Move X22, [X21+24]
	011 Move X19, X2
	012 Move X20, X1
	013 Move W8, [X0+309]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {19}
	018 Call 0x1C5D684
	019 Move X8, [X0+192]
	020 Move X0, X21
	021 Move X2, X20
	022 Move X3, X19
	023 Move X6, [X8+184]
	024 Move W5, W22
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move W1, W31
	030 Move W4, W31
	031 Move X30, [X31+48]
	032 Call 0x31A83D4, X0, X1, X2, X3, X4
	033 Return 
	034 Call 0x1C17F20

Method: System.Void Copy(Unity.Collections.NativeArray`1<T> src, T[] dst)

Disassembly:
	0x031A80A8 MOV X21, X1
	0x031A80AC LDRB W9, [X8 + 0x135]
	0x031A80B0 MOV X22, X0
	0x031A80B4 TBNZ X9, 0x0, 0x31A80C4
	0x031A80B8 MOV X0, X8
	0x031A80BC BL 0x1C5C684
	0x031A80C0 MOV X8, X0
	0x031A80C4 LDR X8, [X8 + 0xC0]
	0x031A80C8 MOV X0, X22
	0x031A80CC MOV X2, X21
	0x031A80D0 MOV X3, X20
	0x031A80D4 LDR X6, [X8 + 0xB8]
	0x031A80D8 MOV W5, W19
	0x031A80DC LDP X20, X19, [X31 + 0x20]
	0x031A80E0 LDP X22, X21, [X31 + 0x10]
	0x031A80E4 MOV W1, W31
	0x031A80E8 MOV W4, W31
	0x031A80EC LDR X30, [X31], #0x30
	0x031A80F0 B 0x31A82F8
	0x031A80F4 STR X30, [X31 - 0x30]!
	0x031A80F8 STP X22, X21, [X31 + 0x10]
	0x031A80FC STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X3+32]
	006 Move X20, X2
	007 Move X19, X1
	008 Move X21, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X1, X19
	019 Move X3, X20
	020 Move W5, W19
	021 Move X6, [X8+192]
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X21
	025 Move W2, W31
	026 Move W4, W31
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call 0x31A84B0, X0, X1, X2, X3, X4
	030 Return 

Method: System.Void Copy(Unity.Collections.NativeArray`1<T> src, Unity.Collections.NativeArray`1<T> dst, System.Int32 length)

Disassembly:
	0x031A8100 LDR X8, [X4 + 0x20]
	0x031A8104 MOV W19, W3
	0x031A8108 MOV X20, X2
	0x031A810C MOV X21, X1
	0x031A8110 LDRB W9, [X8 + 0x135]
	0x031A8114 MOV X22, X0
	0x031A8118 TBNZ X9, 0x0, 0x31A8128
	0x031A811C MOV X0, X8
	0x031A8120 BL 0x1C5C684
	0x031A8124 MOV X8, X0
	0x031A8128 LDR X8, [X8 + 0xC0]
	0x031A812C MOV X0, X22
	0x031A8130 MOV X1, X21
	0x031A8134 MOV X3, X20
	0x031A8138 LDR X6, [X8 + 0xC0]
	0x031A813C MOV W5, W19
	0x031A8140 LDP X20, X19, [X31 + 0x20]
	0x031A8144 LDP X22, X21, [X31 + 0x10]
	0x031A8148 MOV W2, W31
	0x031A814C MOV W4, W31
	0x031A8150 LDR X30, [X31], #0x30
	0x031A8154 B 0x31A83D4
	0x031A8158 STP X30, X25, [X31 - 0x40]!
	0x031A815C STP X24, X23, [X31 + 0x10]
	0x031A8160 STP X22, X21, [X31 + 0x20]
	0x031A8164 STP X20, X19, [X31 + 0x30]
	0x031A8168 LDR X8, [X7 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X5+32]
	008 Move W19, W4
	009 Move X20, X3
	010 Move X21, X2
	011 Move W9, [X8+309]
	012 Move X22, X1
	013 Move X23, X0
	014 Move TEMP, X9
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {21}
	018 Move X0, X8
	019 Call 0x1C5D684
	020 Move X8, X0
	021 Move X8, [X8+192]
	022 Move X1, X22
	023 Move X3, X21
	024 Move X4, X20
	025 Move X7, [X8+176]
	026 Move W6, W19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X22, [X31+16]
	030 Move X21, [X31+24]
	031 Move X0, X23
	032 Move W2, W31
	033 Move W5, W31
	034 Move X30, [X31+48]
	035 Move X23, [X31+56]
	036 Call 0x31A8324, X0, X1, X2, X3, X4
	037 Return 

Method: System.Void Copy(T[] src, Unity.Collections.NativeArray`1<T> dst, System.Int32 length)

Disassembly:
	0x031A816C MOV W19, W6
	0x031A8170 MOV W20, W5
	0x031A8174 MOV X21, X4
	0x031A8178 LDRB W9, [X8 + 0x135]
	0x031A817C MOV X22, X3
	0x031A8180 MOV W23, W2
	0x031A8184 MOV X24, X1
	0x031A8188 MOV X25, X0
	0x031A818C TBNZ X9, 0x0, 0x31A819C
	0x031A8190 MOV X0, X8
	0x031A8194 BL 0x1C5C684
	0x031A8198 MOV X8, X0
	0x031A819C LDR X8, [X8 + 0xC0]
	0x031A81A0 MOV X1, X24
	0x031A81A4 MOV W2, W23
	0x031A81A8 MOV X3, X22
	0x031A81AC LDR X7, [X8 + 0xB0]
	0x031A81B0 MOV X4, X21
	0x031A81B4 MOV W5, W20
	0x031A81B8 MOV W6, W19
	0x031A81BC LDP X20, X19, [X31 + 0x30]
	0x031A81C0 LDP X22, X21, [X31 + 0x20]
	0x031A81C4 LDP X24, X23, [X31 + 0x10]
	0x031A81C8 MOV X0, X25
	0x031A81CC LDP X30, X25, [X31], #0x40

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X4+32]
	007 Move W19, W3
	008 Move X20, X2
	009 Move X21, X1
	010 Move W9, [X8+309]
	011 Move X22, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X0, X22
	021 Move X2, X21
	022 Move X3, X20
	023 Move X6, [X8+184]
	024 Move W5, W19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move W1, W31
	030 Move W4, W31
	031 Move X30, [X31+48]
	032 Call 0x31A83D4, X0, X1, X2, X3, X4
	033 Return 

Method: System.Void Copy(Unity.Collections.NativeArray`1<T> src, T[] dst, System.Int32 length)

Disassembly:
	0x031A81D0 B 0x31A8248
	0x031A81D4 STR X30, [X31 - 0x40]!
	0x031A81D8 STP X24, X23, [X31 + 0x10]
	0x031A81DC STP X22, X21, [X31 + 0x20]
	0x031A81E0 STP X20, X19, [X31 + 0x30]
	0x031A81E4 LDR X8, [X6 + 0x20]
	0x031A81E8 MOV W19, W5
	0x031A81EC MOV W20, W4
	0x031A81F0 MOV X21, X3
	0x031A81F4 LDRB W9, [X8 + 0x135]
	0x031A81F8 MOV W22, W2
	0x031A81FC MOV X23, X1
	0x031A8200 MOV X24, X0
	0x031A8204 TBNZ X9, 0x0, 0x31A8214
	0x031A8208 MOV X0, X8
	0x031A820C BL 0x1C5C684
	0x031A8210 MOV X8, X0
	0x031A8214 LDR X8, [X8 + 0xC0]
	0x031A8218 MOV X0, X24
	0x031A821C MOV X1, X23
	0x031A8220 MOV W2, W22
	0x031A8224 LDR X6, [X8 + 0xC0]
	0x031A8228 MOV X3, X21
	0x031A822C MOV W4, W20
	0x031A8230 MOV W5, W19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X4+32]
	007 Move W19, W3
	008 Move X20, X2
	009 Move X21, X1
	010 Move W9, [X8+309]
	011 Move X22, X0
	012 Move TEMP, X9
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {19}
	016 Move X0, X8
	017 Call 0x1C5D684
	018 Move X8, X0
	019 Move X8, [X8+192]
	020 Move X0, X22
	021 Move X1, X21
	022 Move X3, X20
	023 Move X6, [X8+192]
	024 Move W5, W19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move W2, W31
	030 Move W4, W31
	031 Move X30, [X31+48]
	032 Call 0x31A84B0, X0, X1, X2, X3, X4
	033 Return 

Method: System.Void Copy(Unity.Collections.NativeArray`1<T> src, System.Int32 srcIndex, Unity.Collections.NativeArray`1<T> dst, System.Int32 dstIndex, System.Int32 length)

Disassembly:
	0x031A8234 LDP X20, X19, [X31 + 0x30]
	0x031A8238 LDP X22, X21, [X31 + 0x20]
	0x031A823C LDP X24, X23, [X31 + 0x10]
	0x031A8240 LDR X30, [X31], #0x40
	0x031A8244 B 0x31A83D4
	0x031A8248 STR X30, [X31 - 0x40]!
	0x031A824C STP X24, X23, [X31 + 0x10]
	0x031A8250 STP X22, X21, [X31 + 0x20]
	0x031A8254 STP X20, X19, [X31 + 0x30]
	0x031A8258 LDR X8, [X7 + 0x20]
	0x031A825C MOV X24, X7
	0x031A8260 MOV W19, W6
	0x031A8264 MOV W22, W5
	0x031A8268 ADD X9, X8, 0x135
	0x031A826C LDRH W9, [X9]
	0x031A8270 MOV X20, X3
	0x031A8274 MOV W21, W2
	0x031A8278 MOV X23, X0
	0x031A827C TBZ X9, 0x0, 0x31A82C4
	0x031A8280 TBZ X9, 0x0, 0x31A82DC
	0x031A8284 TBNZ X9, 0x0, 0x31A8290
	0x031A8288 MOV X0, X8
	0x031A828C BL 0x1C5C684
	0x031A8290 MOVZ W8, 0x78
	0x031A8294 MUL W9, W22, W8
	0x031A8298 MUL W10, W21, W8
	0x031A829C MUL W8, W19, W8
	0x031A82A0 ADD X0, X20, W9, SXTW
	0x031A82A4 ADD X1, X23, W10, SXTW
	0x031A82A8 LDP X20, X19, [X31 + 0x30]
	0x031A82AC LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X7+32]
	010 Move W19, W6
	011 Move W20, W5
	012 Move X21, X4
	013 Move W9, [X8+309]
	014 Move X22, X3
	015 Move W23, W2
	016 Move X24, X1
	017 Move X25, X0
	018 Move TEMP, X9
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {25}
	022 Move X0, X8
	023 Call 0x1C5D684
	024 Move X8, X0
	025 Move X8, [X8+192]
	026 Move X1, X24
	027 Move W2, W23
	028 Move X3, X22
	029 Move X7, [X8+176]
	030 Move X4, X21
	031 Move W5, W20
	032 Move W6, W19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X22, [X31+32]
	036 Move X21, [X31+40]
	037 Move X24, [X31+16]
	038 Move X23, [X31+24]
	039 Move X0, X25
	040 Move X30, [X31+64]
	041 Move X25, [X31+72]
	042 Call 0x31A8324, X0, X1, X2, X3, X4
	043 Return 

Method: System.Void Copy(Unity.Collections.NativeArray`1<T> src, System.Int32 srcIndex, T[] dst, System.Int32 dstIndex, System.Int32 length)

Disassembly:
	0x031A82B0 LDP X24, X23, [X31 + 0x10]
	0x031A82B4 SXTW X2, W8
	0x031A82B8 MOV X3, X31
	0x031A82BC LDR X30, [X31], #0x40
	0x031A82C0 B 0x3BFF954
	0x031A82C4 MOV X0, X8
	0x031A82C8 BL 0x1C5C684
	0x031A82CC LDR X8, [X24 + 0x20]
	0x031A82D0 ADD X9, X8, 0x135
	0x031A82D4 LDRH W9, [X9]
	0x031A82D8 TBNZ X9, 0x0, 0x31A8284
	0x031A82DC MOV X0, X8
	0x031A82E0 BL 0x1C5C684
	0x031A82E4 LDR X8, [X24 + 0x20]
	0x031A82E8 ADD X9, X8, 0x135
	0x031A82EC LDRH W9, [X9]
	0x031A82F0 TBZ X9, 0x0, 0x31A8288
	0x031A82F4 B 0x31A8290
	0x031A82F8 STR X30, [X31 - 0x40]!
	0x031A82FC STP X24, X23, [X31 + 0x10]
	0x031A8300 STP X22, X21, [X31 + 0x20]
	0x031A8304 STP X20, X19, [X31 + 0x30]
	0x031A8308 MOV X20, X2
	0x031A830C MOV W21, W1
	0x031A8310 MOVZ W1, 0x3
	0x031A8314 MOV X2, X31
	0x031A8318 MOV X23, X6
	0x031A831C MOV W19, W5
	0x031A8320 MOV W22, W4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X6+32]
	009 Move W19, W5
	010 Move W20, W4
	011 Move X21, X3
	012 Move W9, [X8+309]
	013 Move W22, W2
	014 Move X23, X1
	015 Move X24, X0
	016 Move TEMP, X9
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {23}
	020 Move X0, X8
	021 Call 0x1C5D684
	022 Move X8, X0
	023 Move X8, [X8+192]
	024 Move X0, X24
	025 Move X1, X23
	026 Move W2, W22
	027 Move X6, [X8+192]
	028 Move X3, X21
	029 Move W4, W20
	030 Move W5, W19
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X22, [X31+32]
	034 Move X21, [X31+40]
	035 Move X24, [X31+16]
	036 Move X23, [X31+24]
	037 Move X30, [X31+64]
	038 Call 0x31A84B0, X0, X1, X2, X3, X4
	039 Return 

Method: System.Void CopySafe(Unity.Collections.NativeArray`1<T> src, System.Int32 srcIndex, Unity.Collections.NativeArray`1<T> dst, System.Int32 dstIndex, System.Int32 length)

Disassembly:
	0x031A8324 BL 0x32C0780
	0x031A8328 STR X0, [X31 + 0x8]
	0x031A832C ADD X0, X31, 0x8
	0x031A8330 MOV X1, X31
	0x031A8334 BL 0x32C0690
	0x031A8338 LDR X8, [X23 + 0x20]
	0x031A833C MOV X24, X0
	0x031A8340 LDRB W9, [X8 + 0x135]
	0x031A8344 TBNZ X9, 0x0, 0x31A8350
	0x031A8348 MOV X0, X8
	0x031A834C BL 0x1C5C684
	0x031A8350 MOV X0, X24
	0x031A8354 MOV X1, X31
	0x031A8358 BL 0x33C6948
	0x031A835C LDR X8, [X23 + 0x20]
	0x031A8360 MOV X24, X0
	0x031A8364 ADD X9, X8, 0x135
	0x031A8368 LDRH W9, [X9]
	0x031A836C TBNZ X9, 0x0, 0x31A8384
	0x031A8370 MOV X0, X8
	0x031A8374 BL 0x1C5C684
	0x031A8378 LDR X8, [X23 + 0x20]
	0x031A837C ADD X9, X8, 0x135
	0x031A8380 LDRH W9, [X9]
	0x031A8384 TBNZ X9, 0x0, 0x31A8390
	0x031A8388 MOV X0, X8
	0x031A838C BL 0x1C5C684
	0x031A8390 MOVZ W8, 0x78
	0x031A8394 MUL W9, W22, W8
	0x031A8398 MUL W10, W21, W8
	0x031A839C MUL W8, W19, W8
	0x031A83A0 ADD X0, X20, W9, SXTW
	0x031A83A4 ADD X1, X24, W10, SXTW
	0x031A83A8 SXTW X2, W8
	0x031A83AC MOV X3, X31
	0x031A83B0 BL 0x3BFF954
	0x031A83B4 ADD X0, X31, 0x8
	0x031A83B8 MOV X1, X31
	0x031A83BC BL 0x32C0794
	0x031A83C0 LDP X20, X19, [X31 + 0x30]
	0x031A83C4 LDP X22, X21, [X31 + 0x20]
	0x031A83C8 LDP X24, X23, [X31 + 0x10]
	0x031A83CC LDR X30, [X31], #0x40
	0x031A83D0 RET

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X7+32]
	009 Move X24, X7
	010 Move W19, W6
	011 Move W22, W5
	012 Add X9, X8, 309
	013 NotImplemented "Instruction LDRH not yet implemented."
	014 Move X20, X3
	015 Move W21, W2
	016 Move X23, X0
	017 Move TEMP, X9
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {48}
	021 Move TEMP, X9
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {57}
	025 Move TEMP, X9
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {31}
	029 Move X0, X8
	030 Call 0x1C5D684
	031 Move W8, 28
	032 Multiply W9, W22, W8
	033 Multiply W10, W21, W8
	034 Multiply W8, W19, W8
	035 Add X0, X20, W9
	036 Add X1, X23, W10
	037 Move X20, [X31+48]
	038 Move X19, [X31+56]
	039 Move X22, [X31+32]
	040 Move X21, [X31+40]
	041 Move X24, [X31+16]
	042 Move X23, [X31+24]
	043 Move X2, W8
	044 Move X3, X31
	045 Move X30, [X31+64]
	046 Call UnsafeUtility.MemCpy, X0, X1, X2
	047 Return 
	048 Move X0, X8
	049 Call 0x1C5D684
	050 Move X8, [X24+32]
	051 Add X9, X8, 309
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 Move TEMP, X9
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfEqual {25}
	057 Move X0, X8
	058 Call 0x1C5D684
	059 Move X8, [X24+32]
	060 Add X9, X8, 309
	061 NotImplemented "Instruction LDRH not yet implemented."
	062 Move TEMP, X9
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {29}

Method: System.Void CopySafe(T[] src, System.Int32 srcIndex, Unity.Collections.NativeArray`1<T> dst, System.Int32 dstIndex, System.Int32 length)

Disassembly:
	0x031A83D4 STR X30, [X31 - 0x40]!
	0x031A83D8 STP X24, X23, [X31 + 0x10]
	0x031A83DC STP X22, X21, [X31 + 0x20]
	0x031A83E0 STP X20, X19, [X31 + 0x30]
	0x031A83E4 MOV W21, W2
	0x031A83E8 MOV X20, X0
	0x031A83EC MOVZ W1, 0x3
	0x031A83F0 MOV X0, X3
	0x031A83F4 MOV X2, X31
	0x031A83F8 MOV X23, X6
	0x031A83FC MOV W19, W5
	0x031A8400 MOV W22, W4
	0x031A8404 BL 0x32C0780
	0x031A8408 STR X0, [X31 + 0x8]
	0x031A840C ADD X0, X31, 0x8
	0x031A8410 MOV X1, X31
	0x031A8414 BL 0x32C0690
	0x031A8418 MOV X1, X31
	0x031A841C BL 0x33C6948
	0x031A8420 LDR X8, [X23 + 0x20]
	0x031A8424 MOV X24, X0
	0x031A8428 ADD X9, X8, 0x135
	0x031A842C LDRH W9, [X9]
	0x031A8430 TBZ X9, 0x0, 0x31A8488
	0x031A8434 TBZ X9, 0x0, 0x31A84A0
	0x031A8438 TBNZ X9, 0x0, 0x31A8444
	0x031A843C MOV X0, X8
	0x031A8440 BL 0x1C5C684
	0x031A8444 MOVZ W8, 0x78
	0x031A8448 MUL W9, W22, W8
	0x031A844C MUL W10, W21, W8
	0x031A8450 MUL W8, W19, W8
	0x031A8454 ADD X0, X24, W9, SXTW
	0x031A8458 ADD X1, X20, W10, SXTW
	0x031A845C SXTW X2, W8
	0x031A8460 MOV X3, X31
	0x031A8464 BL 0x3BFF954
	0x031A8468 ADD X0, X31, 0x8
	0x031A846C MOV X1, X31
	0x031A8470 BL 0x32C0794
	0x031A8474 LDP X20, X19, [X31 + 0x30]
	0x031A8478 LDP X22, X21, [X31 + 0x20]
	0x031A847C LDP X24, X23, [X31 + 0x10]
	0x031A8480 LDR X30, [X31], #0x40
	0x031A8484 RET
	0x031A8488 MOV X0, X8
	0x031A848C BL 0x1C5C684
	0x031A8490 LDR X8, [X23 + 0x20]
	0x031A8494 ADD X9, X8, 0x135
	0x031A8498 LDRH W9, [X9]
	0x031A849C TBNZ X9, 0x0, 0x31A8438
	0x031A84A0 MOV X0, X8
	0x031A84A4 BL 0x1C5C684
	0x031A84A8 LDR X8, [X23 + 0x20]
	0x031A84AC ADD X9, X8, 0x135

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, X2
	009 Move W21, W1
	010 Move W1, 3
	011 Move X2, X31
	012 Move X23, X6
	013 Move W19, W5
	014 Move W22, W4
	015 Call GCHandle.Alloc, X0, X1
	016 Move [X31+8], X0
	017 Add X0, X31, 8
	018 Move X1, X31
	019 Call GCHandle.AddrOfPinnedObject, X0
	020 Move X8, [X23+32]
	021 Move X24, X0
	022 Move W9, [X8+309]
	023 Move TEMP, X9
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {29}
	027 Move X0, X8
	028 Call 0x1C5D684
	029 Move X0, X24
	030 Move X1, X31
	031 Call IntPtr.op_Explicit, X0
	032 Move X8, [X23+32]
	033 Move X24, X0
	034 Add X9, X8, 309
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Move TEMP, X9
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {45}
	040 Move X0, X8
	041 Call 0x1C5D684
	042 Move X8, [X23+32]
	043 Add X9, X8, 309
	044 NotImplemented "Instruction LDRH not yet implemented."
	045 Move TEMP, X9
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {51}
	049 Move X0, X8
	050 Call 0x1C5D684
	051 Move W8, 28
	052 Multiply W9, W22, W8
	053 Multiply W10, W21, W8
	054 Multiply W8, W19, W8
	055 Add X0, X20, W9
	056 Add X1, X24, W10
	057 Move X2, W8
	058 Move X3, X31
	059 Call UnsafeUtility.MemCpy, X0, X1, X2
	060 Add X0, X31, 8
	061 Move X1, X31
	062 Call GCHandle.Free, X0
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move X22, [X31+32]
	066 Move X21, [X31+40]
	067 Move X24, [X31+16]
	068 Move X23, [X31+24]
	069 Move X30, [X31+64]
	070 Return 

Method: System.Void CopySafe(Unity.Collections.NativeArray`1<T> src, System.Int32 srcIndex, T[] dst, System.Int32 dstIndex, System.Int32 length)

Disassembly:
	0x031A84B0 LDRH W9, [X9]
	0x031A84B4 TBZ X9, 0x0, 0x31A843C
	0x031A84B8 B 0x31A8444
	0x031A84BC STR X30, [X31 - 0x30]!
	0x031A84C0 STP X22, X21, [X31 + 0x10]
	0x031A84C4 STP X20, X19, [X31 + 0x20]
	0x031A84C8 MOV X8, X0
	0x031A84CC LDR X0, [X3 + 0x20]
	0x031A84D0 LDR X22, [X8]
	0x031A84D4 MOV W19, W2
	0x031A84D8 MOV W20, W1
	0x031A84DC ADD X9, X0, 0x135
	0x031A84E0 LDRH W9, [X9]
	0x031A84E4 TBNZ X9, 0x0, 0x31A84FC
	0x031A84E8 MOV X21, X3
	0x031A84EC BL 0x1C5C684
	0x031A84F0 LDR X0, [X21 + 0x20]
	0x031A84F4 ADD X8, X0, 0x135
	0x031A84F8 LDRH W9, [X8]
	0x031A84FC TBNZ X9, 0x0, 0x31A8504
	0x031A8500 BL 0x1C5C684
	0x031A8504 LDR X8, [X0 + 0xC0]
	0x031A8508 MOV W1, W19
	0x031A850C MOVZ W2, 0x1
	0x031A8510 LDR X3, [X8 + 0xC8]
	0x031A8514 MOVZ W8, 0x78
	0x031A8518 SMADDL X0, X20, X8, X22
	0x031A851C LDP X20, X19, [X31 + 0x20]
	0x031A8520 LDP X22, X21, [X31 + 0x10]
	0x031A8524 LDR X30, [X31], #0x30
	0x031A8528 B 0x2222364
	0x031A852C SUB X31, X31, 0x30
	0x031A8530 STP X31, X30, [X31 + 0x8]
	0x031A8534 STP X20, X19, [X31 + 0x20]
	0x031A8538 LDR X19, [X0]
	0x031A853C LDR W20, [X0 + 0x8]
	0x031A8540 STR X31, [X31]
	0x031A8544 LDR X0, [X1 + 0x20]
	0x031A8548 LDRB W8, [X0 + 0x135]
	0x031A854C TBNZ X8, 0x0, 0x31A8554
	0x031A8550 BL 0x1C5C684
	0x031A8554 LDR X8, [X0 + 0xC0]
	0x031A8558 ADD X0, X31, 0x0
	0x031A855C MOV X1, X19
	0x031A8560 MOV W2, W20
	0x031A8564 LDR X3, [X8 + 0xD8]
	0x031A8568 BL 0x24F44E8
	0x031A856C LDP X0, X1, [X31]
	0x031A8570 LDP X20, X19, [X31 + 0x20]
	0x031A8574 LDR X30, [X31 + 0x10]
	0x031A8578 ADD X31, X31, 0x30
	0x031A857C RET
	0x031A8580 STR X30, [X31 - 0x30]!
	0x031A8584 STP X22, X21, [X31 + 0x10]
	0x031A8588 STP X20, X19, [X31 + 0x20]
	0x031A858C MOV X19, X0
	0x031A8590 LDR X0, [X1 + 0x20]
	0x031A8594 LDR W21, [X19 + 0x8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W21, W2
	009 Move X20, X0
	010 Move W1, 3
	011 Move X0, X3
	012 Move X2, X31
	013 Move X23, X6
	014 Move W19, W5
	015 Move W22, W4
	016 Call GCHandle.Alloc, X0, X1
	017 Move [X31+8], X0
	018 Add X0, X31, 8
	019 Move X1, X31
	020 Call GCHandle.AddrOfPinnedObject, X0
	021 Move X1, X31
	022 Call IntPtr.op_Explicit, X0
	023 Move X8, [X23+32]
	024 Move X24, X0
	025 Add X9, X8, 309
	026 NotImplemented "Instruction LDRH not yet implemented."
	027 Move TEMP, X9
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {61}
	031 Move TEMP, X9
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {70}
	035 Move TEMP, X9
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {41}
	039 Move X0, X8
	040 Call 0x1C5D684
	041 Move W8, 28
	042 Multiply W9, W22, W8
	043 Multiply W10, W21, W8
	044 Multiply W8, W19, W8
	045 Add X0, X24, W9
	046 Add X1, X20, W10
	047 Move X2, W8
	048 Move X3, X31
	049 Call UnsafeUtility.MemCpy, X0, X1, X2
	050 Add X0, X31, 8
	051 Move X1, X31
	052 Call GCHandle.Free, X0
	053 Move X20, [X31+48]
	054 Move X19, [X31+56]
	055 Move X22, [X31+32]
	056 Move X21, [X31+40]
	057 Move X24, [X31+16]
	058 Move X23, [X31+24]
	059 Move X30, [X31+64]
	060 Return 
	061 Move X0, X8
	062 Call 0x1C5D684
	063 Move X8, [X23+32]
	064 Add X9, X8, 309
	065 NotImplemented "Instruction LDRH not yet implemented."
	066 Move TEMP, X9
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfEqual {35}
	070 Move X0, X8
	071 Call 0x1C5D684
	072 Move X8, [X23+32]
	073 Add X9, X8, 309
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 Move TEMP, X9
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {39}

Method: Unity.Collections.NativeArray`1<U> InternalReinterpret(System.Int32 length)

Disassembly:
	0x02134100 CBNZ X8, 0x2134110
	0x02134104 MOV X0, X23
	0x02134108 BL 0x1C5C6E0
	0x0213410C LDR X8, [X23 + 0x38]
	0x02134110 LDR X0, [X8 + 0x10]
	0x02134114 LDR X24, [X19 + 0x10]
	0x02134118 LDRB W8, [X0 + 0x135]
	0x0213411C TBNZ X8, 0x0, 0x2134124
	0x02134120 BL 0x1C5C684
	0x02134124 BL 0x1C16F10
	0x02134128 LDR X8, [X23 + 0x38]
	0x0213412C AND W4, W22, 0x1
	0x02134130 MOV X1, X24
	0x02134134 MOV X2, X21
	0x02134138 LDR X5, [X8 + 0x18]
	0x0213413C MOV X3, X20
	0x02134140 MOV X23, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move W19, W1
	007 Move X20, X0
	008 Compare X8, 0
	009 JumpIfNotEqual {14}
	010 Move X0, X2
	011 Move X21, X2
	012 Call 0x1C5D6E0
	013 Move X8, [X21+56]
	014 Move X0, [X20]
	015 Move W2, [X20+12]
	016 Move X3, [X8]
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 Call NativeArrayUnsafeUtility.ConvertExistingDataToNativeArray, X0, X1, X2
	023 Return X0

Method: Unity.Collections.NativeArray`1<U> Reinterpret()

Disassembly:
	0x02134458 STP X20, X19, [X31 + 0x10]
	0x0213445C LDR X8, [X4 + 0x38]
	0x02134460 MOV X20, X3
	0x02134464 MOV X19, X2
	0x02134468 MOV X21, X1
	0x0213446C CBNZ X8, 0x2134478
	0x02134470 MOV X0, X4
	0x02134474 BL 0x1C5C6E0
	0x02134478 CBZ X21, 0x213449C
	0x0213447C LDR X0, [X21 + 0x40]
	0x02134480 LDR X8, [X21 + 0x18]
	0x02134484 LDR X2, [X21 + 0x28]
	0x02134488 MOV X1, X20
	0x0213448C BLR X8
	0x02134490 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X0
	006 Compare X8, 0
	007 JumpIfNotEqual {12}
	008 Move X0, X1
	009 Move X20, X1
	010 Call 0x1C5D6E0
	011 Move X8, [X20+56]
	012 Move W1, [X19+8]
	013 Move X2, [X8]
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Call NativeArray`1<Single>.InternalReinterpret, X0, X1
	019 Return X0

Method: Unity.Collections.NativeArray`1<U> Reinterpret(System.Int32 expectedTypeSize)

Disassembly:
	0x02134254 AND W4, W22, 0x1
	0x02134258 MOV X1, X24
	0x0213425C MOV X2, X21
	0x02134260 LDR X5, [X8 + 0x18]
	0x02134264 MOV X3, X20
	0x02134268 MOV X23, X0
	0x0213426C BL 0x249DB0C
	0x02134270 CBZ X23, 0x2134290
	0x02134274 STR X19, [X23 + 0x18]
	0x02134278 MOV X0, X23
	0x0213427C LDP X20, X19, [X31 + 0x30]
	0x02134280 LDP X22, X21, [X31 + 0x20]
	0x02134284 LDP X24, X23, [X31 + 0x10]
	0x02134288 LDR X30, [X31], #0x40
	0x0213428C RET
	0x02134290 BL 0x1C16F20
	0x02134294 STR X30, [X31 - 0x40]!
	0x02134298 STP X24, X23, [X31 + 0x10]
	0x0213429C STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+56]
	005 Move X20, X2
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X20
	010 Call 0x1C5D6E0
	011 Move X0, [X20+32]
	012 Move W8, [X0+309]
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {18}
	017 Call 0x1C5D684
	018 Move X8, [X20+56]
	019 Move W1, [X19+8]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X2, [X8+8]
	024 Move X30, [X31+32]
	025 Call 0x2134100, X0, X1
	026 Return X0

Method: Unity.Collections.NativeArray`1<T> GetSubArray(System.Int32 start, System.Int32 length)

Disassembly:
	0x031A8598 ADD X8, X0, 0x135
	0x031A859C LDRH W8, [X8]
	0x031A85A0 CBZ W21, 0x31A860C
	0x031A85A4 MOV X20, X1
	0x031A85A8 TBNZ X8, 0x0, 0x31A85B0
	0x031A85AC BL 0x1C5C684
	0x031A85B0 LDR X8, [X0 + 0xC0]
	0x031A85B4 LDR X0, [X8 + 0xA0]
	0x031A85B8 LDRB W8, [X0 + 0x135]
	0x031A85BC TBNZ X8, 0x0, 0x31A85C4
	0x031A85C0 BL 0x1C5C684
	0x031A85C4 MOV W1, W21
	0x031A85C8 BL 0x1C16D6C
	0x031A85CC CBZ X0, 0x31A867C
	0x031A85D0 MOV X21, X0
	0x031A85D4 LDR X0, [X20 + 0x20]
	0x031A85D8 LDR X20, [X19]
	0x031A85DC LDRSW X19, [X19 + 0x8]
	0x031A85E0 ADD X22, X21, 0x20
	0x031A85E4 LDRB W8, [X0 + 0x135]
	0x031A85E8 TBNZ X8, 0x0, 0x31A85F0
	0x031A85EC BL 0x1C5C684
	0x031A85F0 LDR X8, [X0 + 0xC0]
	0x031A85F4 MOV X0, X22
	0x031A85F8 MOV X1, X20
	0x031A85FC MOV X2, X19
	0x031A8600 LDR X3, [X8 + 0x78]
	0x031A8604 BL 0x21A0720

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, X0
	007 Move X0, [X3+32]
	008 Move X22, [X8]
	009 Move W19, W2
	010 Move W20, W1
	011 Add X9, X0, 309
	012 NotImplemented "Instruction LDRH not yet implemented."
	013 Move TEMP, X9
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X21, X3
	018 Call 0x1C5D684
	019 Move X0, [X21+32]
	020 Add X8, X0, 309
	021 NotImplemented "Instruction LDRH not yet implemented."
	022 Move TEMP, X9
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {27}
	026 Call 0x1C5D684
	027 Move X8, [X0+192]
	028 Move W1, W19
	029 Move W2, 1
	030 Move X3, [X8+200]
	031 Move W8, 28
	032 NotImplemented "Instruction SMADDL not yet implemented."
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Call 0x2223358, X0, X1, X2
	039 Return X0

Method: Unity.Collections.NativeArray`1/ReadOnly<T> AsReadOnly()

Disassembly:
	0x031A8608 B 0x31A8668
	0x031A860C TBNZ X8, 0x0, 0x31A8614
	0x031A8610 BL 0x1C5C684
	0x031A8614 LDR X8, [X0 + 0xC0]
	0x031A8618 LDR X19, [X8 + 0x98]
	0x031A861C LDR X8, [X19 + 0x38]
	0x031A8620 CBNZ X8, 0x31A8630
	0x031A8624 MOV X0, X19
	0x031A8628 BL 0x1C5C6E0
	0x031A862C LDR X8, [X19 + 0x38]
	0x031A8630 LDR X0, [X8 + 0x10]
	0x031A8634 LDRB W8, [X0 + 0x135]
	0x031A8638 TBNZ X8, 0x0, 0x31A8640
	0x031A863C BL 0x1C5C684
	0x031A8640 LDR W8, [X0 + 0xE0]
	0x031A8644 CBNZ W8, 0x31A864C
	0x031A8648 BL 0x1C16DFC
	0x031A864C LDR X8, [X19 + 0x38]
	0x031A8650 LDR X0, [X8 + 0x10]
	0x031A8654 LDRB W8, [X0 + 0x135]
	0x031A8658 TBNZ X8, 0x0, 0x31A8660

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+8], X31
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0]
	007 Move W20, [X0+8]
	008 Move [X31], X31
	009 Move X0, [X1+32]
	010 Move W8, [X0+309]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Move X8, [X0+192]
	017 Add X0, X31, 0
	018 Move X1, X19
	019 Move W2, W20
	020 Move X3, [X8+216]
	021 Call 0x24F52E4, X0, X1, X2
	022 Move X0, [X31]
	023 Move X1, [X31+8]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Add X31, X31, 48
	028 Return X0

