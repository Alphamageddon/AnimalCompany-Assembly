Type: Unity.Collections.LowLevel.Unsafe.BurstRuntime

Method: System.Int64 GetHashCode64()

Disassembly:
	0x021A1C54 ADD X9, X22, 0xF
	0x021A1C58 ADD X8, X31, 0x0
	0x021A1C5C AND X9, X9, 0x1FFFFFFFF
	0x021A1C60 SUB X24, X8, X9
	0x021A1C64 ADD X31, X24, 0x0
	0x021A1C68 ADD X8, X31, 0x0
	0x021A1C6C SUB X25, X8, X9
	0x021A1C70 ADD X31, X25, 0x0
	0x021A1C74 MOV X0, X25
	0x021A1C78 MOV W1, W31
	0x021A1C7C MOV X2, X22
	0x021A1C80 BL 0x3EB1B10
	0x021A1C84 CBZ X23, 0x21A1DB4
	0x021A1C88 LDR X8, [X21 + 0x8]
	0x021A1C8C MOV X0, X26
	0x021A1C90 MOV X2, X28
	0x021A1C94 LDR W8, [X8 + 0x28]
	0x021A1C98 CMP W8, 0x0
	0x021A1C9C SUB X8, X29, 0x28
	0x021A1CA0 CSEL X1, X27, X8, LT
	0x021A1CA4 BL 0x3EB1AC0
	0x021A1CA8 LDR X1, [X21]
	0x021A1CAC LDRB W8, [X1 + 0x135]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call 0x1C5D6E0
	009 Move X8, [X19+56]
	010 Move X0, [X8+8]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move W8, [X0+224]
	018 Compare W8, 0
	019 JumpIfNotEqual {21}
	020 Call 0x1C17DFC
	021 Move X8, [X19+56]
	022 Move X0, [X8+8]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+184]
	030 Move X0, [X8]
	031 Move X30, [X31+16]
	032 Move X19, [X31+24]
	033 Return X0

Method: System.Int64 HashStringWithFNV1A64(System.String text)

Disassembly:
	0x03C00D14 STP X20, X19, [X31 + 0x10]
	0x03C00D18 ADRP X20, 0x7E3000
	0x03C00D1C LDR X1, [X20 + 0xE38]
	0x03C00D20 MOV X19, X0
	0x03C00D24 CBNZ X1, 0x3C00D3C
	0x03C00D28 ADRP X0, 0xFFFFFFFFFCF16000
	0x03C00D2C ADD X0, X0, 0x40D
	0x03C00D30 BL 0x1C16CB8
	0x03C00D34 MOV X1, X0
	0x03C00D38 STR X0, [X20 + 0xE38]
	0x03C00D3C MOV X0, X19
	0x03C00D40 LDP X20, X19, [X31 + 0x10]
	0x03C00D44 LDR X30, [X31], #0x20
	0x03C00D48 BR X1
	0x03C00D4C STR X30, [X31 - 0x20]!
	0x03C00D50 STP X20, X19, [X31 + 0x10]
	0x03C00D54 ADRP X20, 0x7E3000
	0x03C00D58 LDR X1, [X20 + 0xE38]
	0x03C00D5C MOV X19, X0
	0x03C00D60 CBNZ X1, 0x3C00D78
	0x03C00D64 ADRP X0, 0xFFFFFFFFFCF16000
	0x03C00D68 ADD X0, X0, 0x40D
	0x03C00D6C BL 0x1C16CB8
	0x03C00D70 MOV X1, X0
	0x03C00D74 STR X0, [X20 + 0xE38]
	0x03C00D78 MOV X0, X19
	0x03C00D7C LDP X20, X19, [X31 + 0x10]
	0x03C00D80 LDR X30, [X31], #0x20
	0x03C00D84 BR X1
	0x03C00D88 STP X30, X21, [X31 - 0x20]!
	0x03C00D8C STP X20, X19, [X31 + 0x10]
	0x03C00D90 ADRP X21, 0x7E3000
	0x03C00D94 LDR X2, [X21 + 0xE30]
	0x03C00D98 MOV X19, X1
	0x03C00D9C MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Compare X0, 0
	007 JumpIfEqual {40}
	008 Move W8, [X0+16]
	009 Move X20, 0x2325
	010 NotImplemented "Instruction MOVK not yet implemented."
	011 NotImplemented "Instruction MOVK not yet implemented."
	012 Move X19, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction MOVK not yet implemented."
	015 Move X22, 435
	016 Move W21, W31
	017 NotImplemented "Instruction MOVK not yet implemented."
	018 Move X0, X19
	019 Move W1, W21
	020 Move X2, X31
	021 Call String.get_Chars, X0, X1
	022 And X8, X0, 255
	023 Move W10, [X19+16]
	024 Xor X8, X20, X8
	025 Move W9, W0
	026 ShiftRight W9, 8
	027 And W9, W9, 0x7FFF
	028 Multiply X8, X8, X22
	029 Xor X8, X8, X9
	030 Add W21, W21, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Multiply X20, X8, X22
	033 Move X0, X20
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Return X0
	040 Call 0x1C17F20

