Type: Unity.Collections.LowLevel.Unsafe.UnsafeUtility

Method: System.Int32 GetFieldOffsetInStruct(System.Reflection.FieldInfo field)

Disassembly:
	0x03C00DE0 MOV X20, X0
	0x03C00DE4 CBNZ X2, 0x3C00DFC
	0x03C00DE8 ADRP X0, 0xFFFFFFFFFCF04000
	0x03C00DEC ADD X0, X0, 0xEA9
	0x03C00DF0 BL 0x1C16CB8
	0x03C00DF4 MOV X2, X0
	0x03C00DF8 STR X0, [X21 + 0xE30]
	0x03C00DFC MOV X0, X20
	0x03C00E00 MOV X1, X19
	0x03C00E04 LDP X20, X19, [X31 + 0x10]
	0x03C00E08 LDP X30, X21, [X31], #0x20
	0x03C00E0C BR X2
	0x03C00E10 STP D9, D8, [X31 - 0x30]!
	0x03C00E14 STR X30, [X31 + 0x10]
	0x03C00E18 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E4000
	005 Move X1, [X20+3312]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51195904
	010 Add X0, X0, 1178
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3312], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetFieldOffsetInClass(System.Reflection.FieldInfo field)

Disassembly:
	0x03C00E1C ADRP X20, 0x7E3000
	0x03C00E20 LDR X1, [X20 + 0xE10]
	0x03C00E24 MOV V8.16B, V1.16B
	0x03C00E28 MOV V9.16B, V0.16B
	0x03C00E2C MOV X19, X0
	0x03C00E30 CBNZ X1, 0x3C00E48
	0x03C00E34 ADRP X0, 0xFFFFFFFFFCF24000
	0x03C00E38 ADD X0, X0, 0xA13
	0x03C00E3C BL 0x1C16CB8
	0x03C00E40 MOV X1, X0
	0x03C00E44 STR X0, [X20 + 0xE10]
	0x03C00E48 MOV X0, X19
	0x03C00E4C LDP X20, X19, [X31 + 0x20]
	0x03C00E50 LDR X30, [X31 + 0x10]
	0x03C00E54 MOV V0.16B, V9.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E4000
	005 Move X1, [X20+3320]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51261440
	010 Add X0, X0, 2965
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3320], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetFieldOffset(System.Reflection.FieldInfo field)

Disassembly:
	0x03C00E58 MOV V1.16B, V8.16B
	0x03C00E5C LDP D9, D8, [X31], #0x30
	0x03C00E60 BR X1
	0x03C00E64 SUB X31, X31, 0x40
	0x03C00E68 STR X30, [X31 + 0x20]
	0x03C00E6C STP X20, X19, [X31 + 0x30]
	0x03C00E70 ADRP X20, 0x7E3000
	0x03C00E74 LDR V0, [X1]
	0x03C00E78 LDUR V1, [X1 + 0xC]
	0x03C00E7C LDR X8, [X20 + 0xE70]
	0x03C00E80 MOV X19, X0
	0x03C00E84 STUR V1, [X31 + 0xC]
	0x03C00E88 STR V0, [X31]
	0x03C00E8C CBNZ X8, 0x3C00EA4
	0x03C00E90 ADRP X0, 0xFFFFFFFFFCF1E000
	0x03C00E94 ADD X0, X0, 0x712
	0x03C00E98 BL 0x1C16CB8
	0x03C00E9C MOV X8, X0
	0x03C00EA0 STR X0, [X20 + 0xE70]
	0x03C00EA4 ADD X1, X31, 0x0
	0x03C00EA8 MOV X0, X19
	0x03C00EAC BLR X8
	0x03C00EB0 LDP X20, X19, [X31 + 0x30]
	0x03C00EB4 LDR X30, [X31 + 0x20]
	0x03C00EB8 ADD X31, X31, 0x40
	0x03C00EBC RET
	0x03C00EC0 STP X30, X21, [X31 - 0x20]!
	0x03C00EC4 STP X20, X19, [X31 + 0x10]
	0x03C00EC8 ADRP X21, 0x7E3000
	0x03C00ECC LDR X2, [X21 + 0xE70]
	0x03C00ED0 MOV X19, X1
	0x03C00ED4 MOV X20, X0
	0x03C00ED8 CBNZ X2, 0x3C00EF0
	0x03C00EDC ADRP X0, 0xFFFFFFFFFCF1E000
	0x03C00EE0 ADD X0, X0, 0x712
	0x03C00EE4 BL 0x1C16CB8
	0x03C00EE8 MOV X2, X0
	0x03C00EEC STR X0, [X21 + 0xE70]
	0x03C00EF0 MOV X0, X20
	0x03C00EF4 MOV X1, X19
	0x03C00EF8 LDP X20, X19, [X31 + 0x10]
	0x03C00EFC LDP X30, X21, [X31], #0x20
	0x03C00F00 BR X2
	0x03C00F04 STP X30, X21, [X31 - 0x20]!
	0x03C00F08 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {62}
	006 Move X8, [X0]
	007 Move X19, X0
	008 Move X9, [X8+440]
	009 Move X1, [X8+448]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Compare X0, 0
	012 JumpIfEqual {62}
	013 Move X1, X31
	014 Call Type.get_IsValueType, X0
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {28}
	019 Move X20, 0x7E4000
	020 Move X1, [X20+3312]
	021 Compare X1, 0
	022 JumpIfNotEqual {50}
	023 Move X0, -51195904
	024 Add X0, X0, 1178
	025 Call 0x1C17CB8
	026 Move X1, X0
	027 Move [X20+3312], X0
	028 Move X8, [X19]
	029 Move X0, X19
	030 Move X9, [X8+440]
	031 Move X1, [X8+448]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Compare X0, 0
	034 JumpIfEqual {62}
	035 Move X1, X31
	036 Call Type.get_IsClass, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {55}
	041 Move X20, 0x7E4000
	042 Move X1, [X20+3320]
	043 Compare X1, 0
	044 JumpIfNotEqual {50}
	045 Move X0, -51261440
	046 Add X0, X0, 2965
	047 Call 0x1C17CB8
	048 Move X1, X0
	049 Move [X20+3320], X0
	050 Move X0, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 CallNoReturn X1
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move TEMP, 0
	058 Not TEMP
	059 Move W0, TEMP
	060 Move X30, [X31+32]
	061 Return X0
	062 Call 0x1C17F20

Method: System.Int32 LeakRecord(System.IntPtr handle, Unity.Collections.LeakCategory category, System.Int32 callstacksToSkip)

Disassembly:
	0x03C00F0C ADRP X21, 0x7E3000
	0x03C00F10 LDR X2, [X21 + 0xE70]
	0x03C00F14 MOV X19, X1
	0x03C00F18 MOV X20, X0
	0x03C00F1C CBNZ X2, 0x3C00F34
	0x03C00F20 ADRP X0, 0xFFFFFFFFFCF1E000
	0x03C00F24 ADD X0, X0, 0x712
	0x03C00F28 BL 0x1C16CB8
	0x03C00F2C MOV X2, X0
	0x03C00F30 STR X0, [X21 + 0xE70]
	0x03C00F34 MOV X0, X20
	0x03C00F38 MOV X1, X19
	0x03C00F3C LDP X20, X19, [X31 + 0x10]
	0x03C00F40 LDP X30, X21, [X31], #0x20
	0x03C00F44 BR X2
	0x03C00F48 STR X30, [X31 - 0x30]!
	0x03C00F4C STP X22, X21, [X31 + 0x10]
	0x03C00F50 STP X20, X19, [X31 + 0x20]
	0x03C00F54 ADRP X22, 0x7E3000
	0x03C00F58 LDR X3, [X22 + 0xE78]
	0x03C00F5C MOV X19, X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7E4000
	007 Move X3, [X22+3328]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51310592
	014 Add X0, X0, 3387
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3328], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int32 LeakErase(System.IntPtr handle, Unity.Collections.LeakCategory category)

Disassembly:
	0x03C00F60 MOV W20, W1
	0x03C00F64 MOV X21, X0
	0x03C00F68 CBNZ X3, 0x3C00F80
	0x03C00F6C ADRP X0, 0xFFFFFFFFFCEFA000
	0x03C00F70 ADD X0, X0, 0xE8A
	0x03C00F74 BL 0x1C16CB8
	0x03C00F78 MOV X3, X0
	0x03C00F7C STR X0, [X22 + 0xE78]
	0x03C00F80 MOV X0, X21
	0x03C00F84 MOV W1, W20
	0x03C00F88 MOV X2, X19
	0x03C00F8C LDP X20, X19, [X31 + 0x20]
	0x03C00F90 LDP X22, X21, [X31 + 0x10]
	0x03C00F94 LDR X30, [X31], #0x30
	0x03C00F98 BR X3
	0x03C00F9C STR X30, [X31 - 0x30]!
	0x03C00FA0 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E4000
	006 Move X2, [X21+3336]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51228672
	012 Add X0, X0, 2474
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3336], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void* MallocTracked(System.Int64 size, System.Int32 alignment, Unity.Collections.Allocator allocator, System.Int32 callstacksToSkip)

Disassembly:
	0x03C00FA4 STP X20, X19, [X31 + 0x20]
	0x03C00FA8 ADRP X22, 0x7E3000
	0x03C00FAC LDR X3, [X22 + 0xE78]
	0x03C00FB0 MOV X19, X2
	0x03C00FB4 MOV W20, W1
	0x03C00FB8 MOV X21, X0
	0x03C00FBC CBNZ X3, 0x3C00FD4
	0x03C00FC0 ADRP X0, 0xFFFFFFFFFCEFA000
	0x03C00FC4 ADD X0, X0, 0xE8A
	0x03C00FC8 BL 0x1C16CB8
	0x03C00FCC MOV X3, X0
	0x03C00FD0 STR X0, [X22 + 0xE78]
	0x03C00FD4 MOV X0, X21
	0x03C00FD8 MOV W1, W20
	0x03C00FDC MOV X2, X19
	0x03C00FE0 LDP X20, X19, [X31 + 0x20]
	0x03C00FE4 LDP X22, X21, [X31 + 0x10]
	0x03C00FE8 LDR X30, [X31], #0x30
	0x03C00FEC BR X3
	0x03C00FF0 STR X30, [X31 - 0x20]!
	0x03C00FF4 STP X20, X19, [X31 + 0x10]
	0x03C00FF8 ADRP X20, 0x7E3000
	0x03C00FFC LDR X1, [X20 + 0xE18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x7E4000
	008 Move X4, [X23+3344]
	009 Move W19, W3
	010 Move W20, W2
	011 Move W21, W1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51392512
	016 Add X0, X0, 3985
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+3344], X0
	020 Move X0, X22
	021 Move W1, W21
	022 Move W2, W20
	023 Move W3, W19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Void FreeTracked(System.Void* memory, Unity.Collections.Allocator allocator)

Disassembly:
	0x03C00B84 STP X20, X19, [X31 + 0x10]
	0x03C00B88 ADRP X21, 0x7E3000
	0x03C00B8C LDR X2, [X21 + 0xDF8]
	0x03C00B90 MOV X19, X1
	0x03C00B94 MOV X20, X0
	0x03C00B98 CBNZ X2, 0x3C00BB0
	0x03C00B9C ADRP X0, 0xFFFFFFFFFCEF8000
	0x03C00BA0 ADD X0, X0, 0xD69
	0x03C00BA4 BL 0x1C16CB8
	0x03C00BA8 MOV X2, X0
	0x03C00BAC STR X0, [X21 + 0xDF8]
	0x03C00BB0 MOV X0, X20
	0x03C00BB4 MOV X1, X19
	0x03C00BB8 LDP X20, X19, [X31 + 0x10]
	0x03C00BBC LDP X30, X21, [X31], #0x20
	0x03C00BC0 BR X2
	0x03C00BC4 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E4000
	006 Move X2, [X21+3352]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51302400
	012 Add X0, X0, 2360
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3352], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void* Malloc(System.Int64 size, System.Int32 alignment, Unity.Collections.Allocator allocator)

Disassembly:
	0x03C01000 MOV X19, X0
	0x03C01004 CBNZ X1, 0x3C0101C
	0x03C01008 ADRP X0, 0xFFFFFFFFFCF07000
	0x03C0100C ADD X0, X0, 0xD70
	0x03C01010 BL 0x1C16CB8
	0x03C01014 MOV X1, X0
	0x03C01018 STR X0, [X20 + 0xE18]
	0x03C0101C MOV X0, X19
	0x03C01020 LDP X20, X19, [X31 + 0x10]
	0x03C01024 LDR X30, [X31], #0x20
	0x03C01028 BR X1
	0x03C0102C STP X30, X21, [X31 - 0x20]!
	0x03C01030 STP X20, X19, [X31 + 0x10]
	0x03C01034 ADRP X21, 0x7E2000
	0x03C01038 LDR X2, [X21 + 0xE20]
	0x03C0103C MOV W19, W1
	0x03C01040 MOV X20, X0
	0x03C01044 CBNZ X2, 0x3C0105C
	0x03C01048 ADRP X0, 0xFFFFFFFFFCEFC000
	0x03C0104C ADD X0, X0, 0x14
	0x03C01050 BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7E3000
	007 Move X3, [X22+3360]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51200000
	014 Add X0, X0, 1279
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3360], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void Free(System.Void* memory, Unity.Collections.Allocator allocator)

Disassembly:
	0x03C01054 MOV X2, X0
	0x03C01058 STR X0, [X21 + 0xE20]
	0x03C0105C MOV X0, X20
	0x03C01060 MOV W1, W19
	0x03C01064 LDP X20, X19, [X31 + 0x10]
	0x03C01068 LDP X30, X21, [X31], #0x20
	0x03C0106C BR X2
	0x03C01070 SUB X31, X31, 0x70
	0x03C01074 STR X30, [X31 + 0x40]
	0x03C01078 STP X22, X21, [X31 + 0x50]
	0x03C0107C STP X20, X19, [X31 + 0x60]
	0x03C01080 ADRP X22, 0x7E2000
	0x03C01084 MOV X19, X8
	0x03C01088 LDR X8, [X22 + 0xE80]
	0x03C0108C MOV W20, W1
	0x03C01090 MOV X21, X0
	0x03C01094 STP X31, X31, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E3000
	006 Move X2, [X21+3368]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51240960
	012 Add X0, X0, 3011
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+3368], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void MemCpy(System.Void* destination, System.Void* source, System.Int64 size)

Disassembly:
	0x03C00954 ADRP X19, 0x7E3000
	0x03C00958 LDRB W8, [X19 + 0xDC8]
	0x03C0095C TBNZ X8, 0x0, 0x3C00974
	0x03C00960 ADRP X0, 0x55E000
	0x03C00964 LDR X0, [X0 + 0xAC0]
	0x03C00968 BL 0x1C16CF4
	0x03C0096C MOVZ W8, 0x1
	0x03C00970 STRB W8, [X19 + 0xDC8]
	0x03C00974 ADRP X19, 0x7E3000
	0x03C00978 LDR X8, [X19 + 0xDD0]
	0x03C0097C CBNZ X8, 0x3C00994
	0x03C00980 ADRP X0, 0xFFFFFFFFFCF0A000
	0x03C00984 ADD X0, X0, 0xDED
	0x03C00988 BL 0x1C16CB8
	0x03C0098C MOV X8, X0
	0x03C00990 STR X0, [X19 + 0xDD0]
	0x03C00994 BLR X8
	0x03C00998 CBZ X0, 0x3C00A0C
	0x03C0099C ADRP X8, 0x55E000
	0x03C009A0 LDR X8, [X8 + 0xAC0]
	0x03C009A4 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7E4000
	007 Move X3, [X22+3376]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51449856
	014 Add X0, X0, 3080
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3376], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void MemCpyStride(System.Void* destination, System.Int32 destinationStride, System.Void* source, System.Int32 sourceStride, System.Int32 elementSize, System.Int32 count)

Disassembly:
	0x03C01098 STR W31, [X31 + 0x38]
	0x03C0109C STR X31, [X31 + 0x30]
	0x03C010A0 CBNZ X8, 0x3C010B8
	0x03C010A4 ADRP X0, 0xFFFFFFFFFCF0B000
	0x03C010A8 ADD X0, X0, 0xC22
	0x03C010AC BL 0x1C16CB8
	0x03C010B0 MOV X8, X0
	0x03C010B4 STR X0, [X22 + 0xE80]
	0x03C010B8 ADD X2, X31, 0x20
	0x03C010BC MOV X0, X21
	0x03C010C0 MOV W1, W20
	0x03C010C4 BLR X8
	0x03C010C8 LDUR V0, [X31 + 0x2C]
	0x03C010CC LDR V1, [X31 + 0x2]
	0x03C010D0 LDP X22, X21, [X31 + 0x50]
	0x03C010D4 LDR X30, [X31 + 0x40]
	0x03C010D8 STUR V0, [X31 + 0xC]
	0x03C010DC STR V1, [X31]
	0x03C010E0 LDR V0, [X31]
	0x03C010E4 LDUR V1, [X31 + 0xC]
	0x03C010E8 STR V0, [X19]
	0x03C010EC STUR V1, [X19 + 0xC]
	0x03C010F0 LDP X20, X19, [X31 + 0x60]
	0x03C010F4 ADD X31, X31, 0x70
	0x03C010F8 RET
	0x03C010FC SUB X31, X31, 0x50
	0x03C01100 STR X30, [X31 + 0x20]
	0x03C01104 STP X22, X21, [X31 + 0x30]
	0x03C01108 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x7E3000
	010 Move X6, [X25+3384]
	011 Move W19, W5
	012 Move W20, W4
	013 Move W21, W3
	014 Move X22, X2
	015 Move W23, W1
	016 Move X24, X0
	017 Compare X6, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -51429376
	020 Add X0, X0, 3834
	021 Call 0x1C17CB8
	022 Move X6, X0
	023 Move [X25+3384], X0
	024 Move X0, X24
	025 Move W1, W23
	026 Move X2, X22
	027 Move W3, W21
	028 Move W4, W20
	029 Move W5, W19
	030 Move X20, [X31+48]
	031 Move X19, [X31+56]
	032 Move X22, [X31+32]
	033 Move X21, [X31+40]
	034 Move X24, [X31+16]
	035 Move X23, [X31+24]
	036 Move X30, [X31+64]
	037 Move X25, [X31+72]
	038 CallNoReturn X6

Method: System.Void MemMove(System.Void* destination, System.Void* source, System.Int64 size)

Disassembly:
	0x03C0110C ADRP X22, 0x7E2000
	0x03C01110 MOV X19, X8
	0x03C01114 LDR X8, [X22 + 0xE80]
	0x03C01118 MOV W20, W1
	0x03C0111C MOV X21, X0
	0x03C01120 STP X31, X31, [X31]
	0x03C01124 STR W31, [X31 + 0x18]
	0x03C01128 STR X31, [X31 + 0x10]
	0x03C0112C CBNZ X8, 0x3C01144
	0x03C01130 ADRP X0, 0xFFFFFFFFFCF0B000
	0x03C01134 ADD X0, X0, 0xC22
	0x03C01138 BL 0x1C16CB8
	0x03C0113C MOV X8, X0
	0x03C01140 STR X0, [X22 + 0xE80]
	0x03C01144 ADD X2, X31, 0x0
	0x03C01148 MOV X0, X21
	0x03C0114C MOV W1, W20
	0x03C01150 BLR X8
	0x03C01154 LDUR V0, [X31 + 0xC]
	0x03C01158 LDR V1, [X31]
	0x03C0115C LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7E3000
	007 Move X3, [X22+3392]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51404800
	014 Add X0, X0, 3454
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3392], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void MemSet(System.Void* destination, System.Byte value, System.Int64 size)

Disassembly:
	0x03C01160 LDR X30, [X31 + 0x20]
	0x03C01164 STUR V0, [X19 + 0xC]
	0x03C01168 STR V1, [X19]
	0x03C0116C LDP X20, X19, [X31 + 0x40]
	0x03C01170 ADD X31, X31, 0x50
	0x03C01174 RET
	0x03C01178 STR X30, [X31 - 0x20]!
	0x03C0117C STP X20, X19, [X31 + 0x10]
	0x03C01180 ADRP X20, 0x7E2000
	0x03C01184 LDR X1, [X20 + 0xE28]
	0x03C01188 MOV X19, X0
	0x03C0118C CBNZ X1, 0x3C011A4
	0x03C01190 ADRP X0, 0xFFFFFFFFFCF1B000
	0x03C01194 ADD X0, X0, 0xC58
	0x03C01198 BL 0x1C16CB8
	0x03C0119C MOV X1, X0
	0x03C011A0 STR X0, [X20 + 0xE28]
	0x03C011A4 MOV X0, X19
	0x03C011A8 LDP X20, X19, [X31 + 0x10]
	0x03C011AC LDR X30, [X31], #0x20
	0x03C011B0 BR X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7E3000
	007 Move X3, [X22+3400]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51265536
	014 Add X0, X0, 3065
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3400], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void MemClear(System.Void* destination, System.Int64 size)

Disassembly:
	0x03C011B4 STR X30, [X31 - 0x30]!
	0x03C011B8 STP X22, X21, [X31 + 0x10]
	0x03C011BC STP X20, X19, [X31 + 0x20]
	0x03C011C0 ADRP X22, 0x7E2000
	0x03C011C4 LDR X3, [X22 + 0xE80]
	0x03C011C8 MOV X19, X2
	0x03C011CC MOV W20, W1
	0x03C011D0 MOV X21, X0
	0x03C011D4 CBNZ X3, 0x3C011EC
	0x03C011D8 ADRP X0, 0xFFFFFFFFFCF0B000
	0x03C011DC ADD X0, X0, 0xC22
	0x03C011E0 BL 0x1C16CB8
	0x03C011E4 MOV X3, X0
	0x03C011E8 STR X0, [X22 + 0xE80]
	0x03C011EC MOV X0, X21
	0x03C011F0 MOV W1, W20
	0x03C011F4 MOV X2, X19
	0x03C011F8 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7E3000
	006 Move X3, [X21+3400]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X3, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51265536
	012 Add X0, X0, 3065
	013 Call 0x1C17CB8
	014 Move X3, X0
	015 Move [X21+3400], X0
	016 Move X0, X20
	017 Move X2, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W1, W31
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 CallNoReturn X3

Method: System.Int32 MemCmp(System.Void* ptr1, System.Void* ptr2, System.Int64 size)

Disassembly:
	0x03C011FC LDP X22, X21, [X31 + 0x10]
	0x03C01200 LDR X30, [X31], #0x30
	0x03C01204 BR X3
	0x03C01208 STR X30, [X31 - 0x20]!
	0x03C0120C STP X20, X19, [X31 + 0x10]
	0x03C01210 ADRP X20, 0x7E2000
	0x03C01214 LDR X1, [X20 + 0xE40]
	0x03C01218 MOV X19, X0
	0x03C0121C CBNZ X1, 0x3C01234
	0x03C01220 ADRP X0, 0xFFFFFFFFFCEF4000
	0x03C01224 ADD X0, X0, 0x30
	0x03C01228 BL 0x1C16CB8
	0x03C0122C MOV X1, X0
	0x03C01230 STR X0, [X20 + 0xE40]
	0x03C01234 MOV X0, X19
	0x03C01238 LDP X20, X19, [X31 + 0x10]
	0x03C0123C LDR X30, [X31], #0x20
	0x03C01240 BR X1
	0x03C01244 STR D8, [X31 - 0x30]!
	0x03C01248 STP X30, X21, [X31 + 0x10]
	0x03C0124C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7E3000
	007 Move X3, [X22+3408]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51363840
	014 Add X0, X0, 3657
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+3408], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int32 SizeOf(System.Type type)

Disassembly:
	0x03C01250 ADRP X21, 0x7E2000
	0x03C01254 LDR X2, [X21 + 0xE48]
	0x03C01258 MOV V8.16B, V0.16B
	0x03C0125C MOV W19, W1
	0x03C01260 MOV X20, X0
	0x03C01264 CBNZ X2, 0x3C0127C
	0x03C01268 ADRP X0, 0xFFFFFFFFFCF27000
	0x03C0126C ADD X0, X0, 0x355
	0x03C01270 BL 0x1C16CB8
	0x03C01274 MOV X2, X0
	0x03C01278 STR X0, [X21 + 0xE48]
	0x03C0127C MOV X0, X20
	0x03C01280 MOV W1, W19
	0x03C01284 LDP X20, X19, [X31 + 0x20]
	0x03C01288 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E3000
	005 Move X1, [X20+3416]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51216384
	010 Add X0, X0, 784
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3416], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean IsBlittable(System.Type type)

Disassembly:
	0x03C0128C MOV V0.16B, V8.16B
	0x03C01290 LDR V8, [X31], #0x30
	0x03C01294 BR X2
	0x03C01298 SUB X31, X31, 0x70
	0x03C0129C STP D11, D10, [X31 + 0x30]
	0x03C012A0 STP D9, D8, [X31 + 0x40]
	0x03C012A4 STR X30, [X31 + 0x50]
	0x03C012A8 STP X20, X19, [X31 + 0x60]
	0x03C012AC ADRP X19, 0x7E2000
	0x03C012B0 LDRB W8, [X19 + 0xE50]
	0x03C012B4 MOV V10.16B, V3.16B
	0x03C012B8 MOV V11.16B, V2.16B
	0x03C012BC MOV V8.16B, V1.16B
	0x03C012C0 MOV V9.16B, V0.16B
	0x03C012C4 TBNZ X8, 0x0, 0x3C012E8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E3000
	005 Move X1, [X20+3424]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51355648
	010 Add X0, X0, 3504
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3424], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean IsUnmanaged(System.Type type)

Disassembly:
	0x03C012C8 ADRP X0, 0x4F9000
	0x03C012CC LDR X0, [X0 + 0x730]
	0x03C012D0 BL 0x1C16CF4
	0x03C012D4 ADRP X0, 0x4F9000
	0x03C012D8 LDR X0, [X0 + 0x790]
	0x03C012DC BL 0x1C16CF4
	0x03C012E0 MOVZ W8, 0x1
	0x03C012E4 STRB W8, [X19 + 0xE50]
	0x03C012E8 ADRP X8, 0x4F9000
	0x03C012EC ADRP X20, 0x4F9000
	0x03C012F0 LDR X8, [X8 + 0x790]
	0x03C012F4 LDR X20, [X20 + 0x730]
	0x03C012F8 FCMP S9, S11
	0x03C012FC B.NE 0x3C0134C
	0x03C01300 LDR X0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E3000
	005 Move X1, [X20+3432]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51331072
	010 Add X0, X0, 2933
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3432], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetScriptingTypeFlags(System.Type type)

Disassembly:
	0x03C01304 MOVZ W1, 0x1
	0x03C01308 BL 0x1C16D6C
	0x03C0130C STP X31, X31, [X31 + 0x18]
	0x03C01310 STR W31, [X31 + 0x28]
	0x03C01314 CBZ X0, 0x3C013D0
	0x03C01318 LDUR V0, [X31 + 0x18]
	0x03C0131C LDR W8, [X31 + 0x28]
	0x03C01320 MOV X19, X0
	0x03C01324 STR V0, [X31]
	0x03C01328 STR W8, [X31 + 0x10]
	0x03C0132C LDR W8, [X0 + 0x18]
	0x03C01330 CBZ W8, 0x3C013CC
	0x03C01334 STP S9, S8, [X19 + 0x20]
	0x03C01338 LDR W8, [X31 + 0x10]
	0x03C0133C LDR V0, [X31]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7E3000
	005 Move X1, [X20+3440]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51347456
	010 Add X0, X0, 3356
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+3440], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean IsBlittableValueType(System.Type t)

Disassembly:
	0x03C01340 STR W8, [X19 + 0x38]
	0x03C01344 STUR V0, [X19 + 0x28]
	0x03C01348 B 0x3C0139C
	0x03C0134C LDR X0, [X8]
	0x03C01350 MOVZ W1, 0x2
	0x03C01354 BL 0x1C16D6C
	0x03C01358 CBZ X0, 0x3C013D0
	0x03C0135C LDR W8, [X0 + 0x18]
	0x03C01360 MOV X19, X0
	0x03C01364 CBZ W8, 0x3C013CC
	0x03C01368 FSUB S0, S10, S8
	0x03C0136C FSUB S1, S11, S9
	0x03C01370 CMP W8, 0x1
	0x03C01374 FDIV S0, S0, S1
	0x03C01378 STP S9, S8, [X19 + 0x20]
	0x03C0137C STR W31, [X19 + 0x28]
	0x03C01380 STR W31, [X19 + 0x38]
	0x03C01384 STR S0, [X19 + 0x2C]
	0x03C01388 STR X31, [X19 + 0x30]
	0x03C0138C B.EQ 0x3C013CC
	0x03C01390 STP S11, S10, [X19 + 0x3C]
	0x03C01394 STR S0, [X19 + 0x44]
	0x03C01398 STP X31, X31, [X19 + 0x48]
	0x03C0139C LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X0, 0
	005 JumpIfEqual {32}
	006 Move X1, X31
	007 Move X19, X0
	008 Call Type.get_IsValueType, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {27}
	013 Move X20, 0x7E3000
	014 Move X1, [X20+3424]
	015 Compare X1, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51355648
	018 Add X0, X0, 3504
	019 Call 0x1C17CB8
	020 Move X1, X0
	021 Move [X20+3424], X0
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X30, [X31+32]
	026 CallNoReturn X1
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W0, W31
	030 Move X30, [X31+32]
	031 Return X0
	032 Call 0x1C17F20

Method: System.String GetReasonForTypeNonBlittableImpl(System.Type t, System.String name)

Disassembly:
	0x03C013A0 BL 0x1C16F10
	0x03C013A4 MOV X1, X19
	0x03C013A8 MOV X20, X0
	0x03C013AC BL 0x3C013D4
	0x03C013B0 MOV X0, X20
	0x03C013B4 LDP X20, X19, [X31 + 0x60]
	0x03C013B8 LDR X30, [X31 + 0x50]
	0x03C013BC LDP D9, D8, [X31 + 0x40]
	0x03C013C0 LDP D11, D10, [X31 + 0x30]
	0x03C013C4 ADD X31, X31, 0x70
	0x03C013C8 RET
	0x03C013CC BL 0x1C16F28
	0x03C013D0 BL 0x1C16F20
	0x03C013D4 STP X30, X21, [X31 - 0x20]!
	0x03C013D8 STP X20, X19, [X31 + 0x10]
	0x03C013DC MOV X20, X1
	0x03C013E0 MOV X1, X31
	0x03C013E4 MOV X19, X0
	0x03C013E8 BL 0x33BDD8C
	0x03C013EC ADRP X21, 0x7E2000
	0x03C013F0 LDR X8, [X21 + 0xDF0]
	0x03C013F4 CBNZ X8, 0x3C0140C
	0x03C013F8 ADRP X0, 0xFFFFFFFFFCF15000
	0x03C013FC ADD X0, X0, 0x3C9
	0x03C01400 BL 0x1C16CB8
	0x03C01404 MOV X8, X0
	0x03C01408 STR X0, [X21 + 0xDF0]
	0x03C0140C MOV X0, X20
	0x03C01410 BLR X8
	0x03C01414 STR X0, [X19 + 0x10]
	0x03C01418 LDP X20, X19, [X31 + 0x10]
	0x03C0141C LDP X30, X21, [X31], #0x20
	0x03C01420 RET
	0x03C01424 SUB X31, X31, 0x70
	0x03C01428 STP D11, D10, [X31 + 0x30]
	0x03C0142C STP D9, D8, [X31 + 0x40]
	0x03C01430 STR X30, [X31 + 0x50]
	0x03C01434 STP X20, X19, [X31 + 0x60]
	0x03C01438 ADRP X20, 0x7E2000
	0x03C0143C ADRP X19, 0x4F9000
	0x03C01440 LDRB W8, [X20 + 0xE51]
	0x03C01444 LDR X19, [X19 + 0x790]
	0x03C01448 MOV V10.16B, V3.16B
	0x03C0144C MOV V11.16B, V2.16B
	0x03C01450 MOV V8.16B, V1.16B
	0x03C01454 MOV V9.16B, V0.16B
	0x03C01458 TBNZ X8, 0x0, 0x3C0147C
	0x03C0145C ADRP X0, 0x4F9000
	0x03C01460 LDR X0, [X0 + 0x730]
	0x03C01464 BL 0x1C16CF4
	0x03C01468 ADRP X0, 0x4F9000
	0x03C0146C LDR X0, [X0 + 0x790]
	0x03C01470 BL 0x1C16CF4
	0x03C01474 MOVZ W8, 0x1
	0x03C01478 STRB W8, [X20 + 0xE51]
	0x03C0147C ADRP X20, 0x4F9000
	0x03C01480 LDR X0, [X19]
	0x03C01484 LDR X20, [X20 + 0x730]
	0x03C01488 FCMP S9, S11
	0x03C0148C B.NE 0x3C014D8
	0x03C01490 MOVZ W1, 0x1
	0x03C01494 BL 0x1C16D6C
	0x03C01498 STP X31, X31, [X31 + 0x18]
	0x03C0149C STR W31, [X31 + 0x28]
	0x03C014A0 CBZ X0, 0x3C01550
	0x03C014A4 LDUR V0, [X31 + 0x18]
	0x03C014A8 LDR W8, [X31 + 0x28]
	0x03C014AC MOV X19, X0
	0x03C014B0 STR V0, [X31]
	0x03C014B4 STR W8, [X31 + 0x10]
	0x03C014B8 LDR W8, [X0 + 0x18]
	0x03C014BC CBZ W8, 0x3C0154C
	0x03C014C0 STP S9, S8, [X19 + 0x20]
	0x03C014C4 LDR W8, [X31 + 0x10]
	0x03C014C8 LDR V0, [X31]
	0x03C014CC STR W8, [X19 + 0x38]
	0x03C014D0 STUR V0, [X19 + 0x28]
	0x03C014D4 B 0x3C0151C
	0x03C014D8 MOVZ W1, 0x2
	0x03C014DC BL 0x1C16D6C
	0x03C014E0 CBZ X0, 0x3C01550
	0x03C014E4 LDR W8, [X0 + 0x18]
	0x03C014E8 MOV X19, X0
	0x03C014EC CBZ W8, 0x3C0154C
	0x03C014F0 MOVI D0, 0x0
	0x03C014F4 CMP W8, 0x1
	0x03C014F8 STP S9, S8, [X19 + 0x20]
	0x03C014FC STR W31, [X19 + 0x30]
	0x03C01500 STR D0, [X19 + 0x28]
	0x03C01504 STUR D0, [X19 + 0x34]
	0x03C01508 B.EQ 0x3C0154C
	0x03C0150C STP S11, S10, [X19 + 0x3C]
	0x03C01510 STUR D0, [X19 + 0x44]
	0x03C01514 STR W31, [X19 + 0x4C]
	0x03C01518 STR D0, [X19 + 0x50]
	0x03C0151C LDR X0, [X20]
	0x03C01520 BL 0x1C16F10
	0x03C01524 MOV X1, X19
	0x03C01528 MOV X20, X0
	0x03C0152C BL 0x3C013D4
	0x03C01530 MOV X0, X20
	0x03C01534 LDP X20, X19, [X31 + 0x60]
	0x03C01538 LDR X30, [X31 + 0x50]
	0x03C0153C LDP D9, D8, [X31 + 0x40]
	0x03C01540 LDP D11, D10, [X31 + 0x30]
	0x03C01544 ADD X31, X31, 0x70
	0x03C01548 RET
	0x03C0154C BL 0x1C16F28
	0x03C01550 BL 0x1C16F20
	0x03C01554 STR X30, [X31 - 0x20]!
	0x03C01558 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x7E3000
	010 Move W8, [X20+3448]
	011 Move X19, X1
	012 Move X21, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x55E000
	018 Move X0, [X0+2728]
	019 Call 0x1C17CF4
	020 Move X0, 0x55E000
	021 Move X0, [X0+2736]
	022 Call 0x1C17CF4
	023 Move X0, 0x55E000
	024 Move X0, [X0+2744]
	025 Call 0x1C17CF4
	026 Move X0, 0x4F3000
	027 Move X0, [X0+2440]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3448], W8
	031 Compare X21, 0
	032 JumpIfEqual {135}
	033 Move X0, X21
	034 Move X1, X31
	035 Call Type.get_IsValueType, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {49}
	040 Move X0, X21
	041 Move X1, X31
	042 Call Type.get_IsPrimitive, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {65}
	047 Move X8, 0x55E000
	048 Move X8, [X8+2736]
	049 Move X8, 0x55E000
	050 Move X8, [X8+2744]
	051 Move X0, [X8]
	052 Move X1, X19
	053 Move X2, X21
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X3, X31
	061 Move X30, [X31+64]
	062 Move X25, [X31+72]
	063 Call String.Format, X0, X1, X2
	064 Return X0
	065 Move X9, 0x4F3000
	066 Move X8, [X21]
	067 Move X9, [X9+2440]
	068 Move W1, 52
	069 Move X0, X21
	070 Move X2, [X8+1680]
	071 Move X20, [X9]
	072 Move X9, [X8+1672]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Compare X0, 0
	075 JumpIfEqual {135}
	076 Move W8, [X0+24]
	077 Move X21, X0
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move X25, 0x55E000
	080 Move X25, [X25+2728]
	081 Move W24, W31
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add X8, X21, W24
	084 Move X22, [X8+32]
	085 Compare X22, 0
	086 JumpIfEqual {135}
	087 Move X8, [X22]
	088 Move X0, X22
	089 Move X9, [X8+600]
	090 Move X1, [X8+608]
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Call UnsafeUtility.IsBlittableValueType, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfEqual {122}
	097 Move X8, [X22]
	098 Move X0, X22
	099 Move X9, [X8+600]
	100 Move X1, [X8+608]
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Move X8, [X22]
	103 Move X23, X0
	104 Move X0, X22
	105 Move X9, [X8+424]
	106 Move X1, [X8+432]
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X8, [X25]
	109 Move X2, X0
	110 Move X1, X19
	111 Move X3, X31
	112 Move X0, X8
	113 Call String.Format, X0, X1, X2
	114 Move X1, X0
	115 Move X0, X23
	116 Call UnsafeUtility.GetReasonForTypeNonBlittableImpl, X0, X1
	117 Move X1, X0
	118 Move X0, X20
	119 Move X2, X31
	120 Call String.Concat, X0, X1
	121 Move X20, X0
	122 Move W8, [X21+24]
	123 Add W24, W24, 1
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X0, X20
	126 Move X20, [X31+48]
	127 Move X19, [X31+56]
	128 Move X22, [X31+32]
	129 Move X21, [X31+40]
	130 Move X24, [X31+16]
	131 Move X23, [X31+24]
	132 Move X30, [X31+64]
	133 Move X25, [X31+72]
	134 Return X0
	135 Call 0x1C17F20
	136 Call 0x1C17F28

Method: System.Boolean IsArrayBlittable(System.Array arr)

Disassembly:
	0x03C0155C ADRP X20, 0x7E2000
	0x03C01560 LDR X1, [X20 + 0xE58]
	0x03C01564 MOV X19, X0
	0x03C01568 CBNZ X1, 0x3C01580
	0x03C0156C ADRP X0, 0xFFFFFFFFFCF15000
	0x03C01570 ADD X0, X0, 0x433
	0x03C01574 BL 0x1C16CB8
	0x03C01578 MOV X1, X0
	0x03C0157C STR X0, [X20 + 0xE58]
	0x03C01580 MOV X0, X19
	0x03C01584 LDP X20, X19, [X31 + 0x10]
	0x03C01588 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {15}
	004 Move X1, X31
	005 Call "il2cpp_vm_object_is_inst", X0
	006 Compare X0, 0
	007 JumpIfEqual {15}
	008 Move X8, [X0]
	009 Move X9, [X8+1064]
	010 Move X1, [X8+1072]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Move X30, [X31+16]
	013 Call UnsafeUtility.IsBlittableValueType, X0
	014 Return X0
	015 Call 0x1C17F20

Method: System.String GetReasonForArrayNonBlittable(System.Array arr)

Disassembly:
	0x03C0158C BR X1
	0x03C01590 STR X30, [X31 - 0x20]!
	0x03C01594 STP X20, X19, [X31 + 0x10]
	0x03C01598 ADRP X20, 0x7E2000
	0x03C0159C LDR X1, [X20 + 0xE60]
	0x03C015A0 MOV X19, X0
	0x03C015A4 CBNZ X1, 0x3C015BC
	0x03C015A8 ADRP X0, 0xFFFFFFFFFCF23000
	0x03C015AC ADD X0, X0, 0xA53
	0x03C015B0 BL 0x1C16CB8
	0x03C015B4 MOV X1, X0
	0x03C015B8 STR X0, [X20 + 0xE60]
	0x03C015BC MOV X0, X19
	0x03C015C0 LDP X20, X19, [X31 + 0x10]
	0x03C015C4 LDR X30, [X31], #0x20
	0x03C015C8 BR X1
	0x03C015CC STR X30, [X31 - 0x20]!
	0x03C015D0 STP X20, X19, [X31 + 0x10]
	0x03C015D4 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X0, 0
	004 JumpIfEqual {26}
	005 Move X1, X31
	006 Call "il2cpp_vm_object_is_inst", X0
	007 Compare X0, 0
	008 JumpIfEqual {26}
	009 Move X8, [X0]
	010 Move X9, [X8+1064]
	011 Move X1, [X8+1072]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Compare X0, 0
	014 JumpIfEqual {26}
	015 Move X8, [X0]
	016 Move X19, X0
	017 Move X9, [X8+424]
	018 Move X1, [X8+432]
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X1, X0
	021 Move X0, X19
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call UnsafeUtility.GetReasonForTypeNonBlittableImpl, X0, X1
	025 Return X0
	026 Call 0x1C17F20

Method: System.Boolean IsUnmanaged()

Disassembly:
	0x022A86A8 SMADDL X0, X1, X9, X0
	0x022A86AC MOVZ W2, 0x74
	0x022A86B0 MOV X1, X8
	0x022A86B4 BL 0x3EB1B30
	0x022A86B8 LDR X30, [X31], #0x10
	0x022A86BC RET
	0x022A86C0 STR X30, [X31 - 0x10]!
	0x022A86C4 MOV X8, X2
	0x022A86C8 MOVZ W9, 0x88
	0x022A86CC SMADDL X0, X1, X9, X0
	0x022A86D0 MOVZ W2, 0x88
	0x022A86D4 MOV X1, X8
	0x022A86D8 BL 0x3EB1B30
	0x022A86DC LDR X30, [X31], #0x10
	0x022A86E0 RET
	0x022A86E4 STP X29, X30, [X31 - 0x50]!
	0x022A86E8 STP X26, X25, [X31 + 0x10]
	0x022A86EC STP X24, X23, [X31 + 0x20]
	0x022A86F0 STP X22, X21, [X31 + 0x30]
	0x022A86F4 STP X20, X19, [X31 + 0x40]
	0x022A86F8 ADD X29, X31, 0x0
	0x022A86FC SUB X31, X31, 0x10
	0x022A8700 MRS X25, 0xC000
	0x022A8704 LDR X8, [X25 + 0x28]
	0x022A8708 MOV X19, X3

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+56]
	004 Move X19, X0
	005 Compare X8, 0
	006 JumpIfNotEqual {10}
	007 Move X0, X19
	008 Call 0x1C5D6E0
	009 Move X8, [X19+56]
	010 Move X0, [X8+8]
	011 Move W8, [X0+309]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {17}
	016 Call 0x1C5D684
	017 Move W8, [X0+224]
	018 Compare W8, 0
	019 JumpIfNotEqual {21}
	020 Call 0x1C17DFC
	021 Move X8, [X19+56]
	022 Move X0, [X8+8]
	023 Move W8, [X0+309]
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {29}
	028 Call 0x1C5D684
	029 Move X8, [X0+184]
	030 Move W8, [X8]
	031 And W31, W8, 1
	032 NotImplemented "Instruction CSET not yet implemented."
	033 Move X30, [X31+16]
	034 Move X19, [X31+24]
	035 Return X0

Method: System.Int32 AlignOf()

Disassembly:
	0x022A75C0 MOV X1, X8
	0x022A75C4 BL 0x3EB1B30
	0x022A75C8 LDR X30, [X31], #0x10
	0x022A75CC RET
	0x022A75D0 STP X29, X30, [X31 - 0x40]!
	0x022A75D4 STP X24, X23, [X31 + 0x10]
	0x022A75D8 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+56]
	003 Compare X8, 0
	004 JumpIfNotEqual {6}
	005 Call 0x1C5D6E0
	006 Move W0, 4
	007 Move X30, [X31+16]
	008 Return X0

Method: System.Void CopyPtrToStructure(System.Void* ptr, out T output)

Disassembly:
	0x022A7DE0 RET
	0x022A7DE4 MOVZ W0, 0x14
	0x022A7DE8 RET
	0x022A7DEC MOVZ W0, 0x2
	0x022A7DF0 RET
	0x022A7DF4 MOVZ W0, 0x14
	0x022A7DF8 RET
	0x022A7DFC MOVZ W0, 0x8
	0x022A7E00 RET
	0x022A7E04 MOVZ W0, 0x30
	0x022A7E08 RET
	0x022A7E0C MOVZ W0, 0xA0
	0x022A7E10 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X2
	010 Call 0x1C5D6E0
	011 Move V0, [X20]
	012 Move [X19], V0
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+32]
	016 Return 

Method: System.Void InternalCopyPtrToStructure(System.Void* ptr, out T output)

Disassembly:
	0x022A8348 SMADDL X9, X1, X9, X0
	0x022A834C STR X8, [X9 + 0x20]
	0x022A8350 STP V0, V1, [X9]

ISIL:
	001 Move V0, [X0]
	002 Move [X1], V0
	003 Return 

Method: System.Void CopyStructureToPtr(ref T input, System.Void* ptr)

Disassembly:
	0x022A7E9C MOVZ W0, 0xC
	0x022A7EA0 RET
	0x022A7EA4 MOVZ W0, 0x14
	0x022A7EA8 RET
	0x022A7EAC MOVZ W0, 0x14
	0x022A7EB0 RET
	0x022A7EB4 MOVZ W0, 0x1C
	0x022A7EB8 RET
	0x022A7EBC MOVZ W0, 0x10
	0x022A7EC0 RET
	0x022A7EC4 MOVZ W0, 0x70
	0x022A7EC8 RET
	0x022A7ECC MOVZ W0, 0x2
	0x022A7ED0 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X2+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X2
	010 Call 0x1C5D6E0
	011 Move X0, X19
	012 Move X1, X20
	013 Move X20, [X31+16]
	014 Move X19, [X31+24]
	015 Move W2, 196
	016 Move X30, [X31+32]
	017 Call 0x3EB2B30
	018 Return 

Method: System.Void InternalCopyStructureToPtr(ref T input, System.Void* ptr)

Disassembly:
	0x022A8430 STR X10, [X8 + 0x10]
	0x022A8434 STR V0, [X8]
	0x022A8438 RET
	0x022A843C STR X30, [X31 - 0x10]!
	0x022A8440 MOV X8, X2
	0x022A8444 MOVZ W9, 0x60
	0x022A8448 SMADDL X0, X1, X9, X0
	0x022A844C MOVZ W2, 0x60

ISIL:
	001 Move [X31-16], X30
	002 Move X8, X0
	003 Move W2, 196
	004 Move X0, X1
	005 Move X1, X8
	006 Call 0x3EB2B30
	007 Move X30, [X31+16]
	008 Return 

Method: T ReadArrayElement(System.Void* source, System.Int32 index)

Disassembly:
	0x022A870C MOV X22, X2
	0x022A8710 MOV W20, W1
	0x022A8714 STUR X8, [X29 - 0x8]
	0x022A8718 STUR X2, [X29 - 0x10]
	0x022A871C LDR X8, [X3 + 0x38]
	0x022A8720 MOV X21, X0
	0x022A8724 CBNZ X8, 0x22A8734

ISIL:
	001 Move W9, 28
	002 NotImplemented "Instruction SMADDL not yet implemented."
	003 NotImplemented "Instruction LDUR not yet implemented."
	004 Move V1, [X9]
	005 Move [X8+12], V0
	006 Move [X8], V1
	007 Return X0

Method: T ReadArrayElementWithStride(System.Void* source, System.Int32 index, System.Int32 stride)

Disassembly:
	0x022A8C38 MOV X20, X0
	0x022A8C3C CBNZ X8, 0x22A8C60
	0x022A8C40 ADRP X0, 0x1E74000
	0x022A8C44 LDR X0, [X0 + 0x820]

ISIL:
	001 NotImplemented "Instruction SMADDL not yet implemented."
	002 Move W2, 152
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void WriteArrayElement(System.Void* destination, System.Int32 index, T value)

Disassembly:
	0x022A9294 STP V1, V0, [X31]
	0x022A9298 BL 0x3E1AEA0
	0x022A929C TBZ X0, 0x0, 0x22A92BC
	0x022A92A0 LDR X1, [X31 + 0x28]
	0x022A92A4 LDR X8, [X21 + 0x18]
	0x022A92A8 LDR X0, [X21 + 0x40]
	0x022A92AC LDR X3, [X21 + 0x28]
	0x022A92B0 MOV X2, X19
	0x022A92B4 BLR X8

ISIL:
	001 Move W9, [X2+24]
	002 Move X10, [X2+16]
	003 Move V0, [X2]
	004 Move W8, 28
	005 NotImplemented "Instruction SMADDL not yet implemented."
	006 Move [X8+24], W9
	007 Move [X8+16], X10
	008 Move [X8], V0
	009 Return 

Method: System.Void WriteArrayElementWithStride(System.Void* destination, System.Int32 index, System.Int32 stride, T value)

Disassembly:
	0x022A98A4 STP V1, V0, [X31]
	0x022A98A8 BL 0x3E1AEA0
	0x022A98AC MOV W22, W0
	0x022A98B0 TBZ X0, 0x0, 0x22A98D8
	0x022A98B4 CBZ X21, 0x22A98D4
	0x022A98B8 LDR X1, [X31 + 0x28]
	0x022A98BC LDR X8, [X21 + 0x18]
	0x022A98C0 LDR X0, [X21 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction NOP not yet implemented."
	003 NotImplemented "Instruction SMADDL not yet implemented."
	004 Move W2, 152
	005 Move X1, X3
	006 Call 0x3EB2B30
	007 Move X30, [X31+16]
	008 Return 

Method: System.Void* AddressOf(ref T output)

Disassembly:
	0x022A74CC RET

ISIL:
	001 Return X0

Method: System.Int32 SizeOf()

Disassembly:
	0x022A8DC4 MOV X0, X19
	0x022A8DC8 MOV X2, X31

ISIL:
	001 Move W0, 32
	002 Return X0

Method: T As(ref U from)

Disassembly:
	0x022A7D7C MOV X2, X23

ISIL:
	001 Return X0

Method: T AsRef(System.Void* ptr)

Disassembly:
	0x022A7DD4 MOVZ W0, 0x40

ISIL:
	001 Return X0

Method: T ArrayElementAsRef(System.Void* ptr, System.Int32 index)

Disassembly:
	0x022A7D28 LDR X8, [X25 + 0x28]
	0x022A7D2C MOV X19, X3
	0x022A7D30 MOV W20, W2

ISIL:
	001 Move W8, 116
	002 NotImplemented "Instruction SMADDL not yet implemented."
	003 Return X0

Method: System.Int32 EnumToInt(T enumValue)

Disassembly:
	0x022A82D8 RET
	0x022A82DC LDP V2, V0, [X2 + 0x10]
	0x022A82E0 LDR X9, [X2 + 0x30]
	0x022A82E4 LDR V1, [X2]
	0x022A82E8 MOVZ W8, 0x38
	0x022A82EC SMADDL X8, X1, X8, X0
	0x022A82F0 STR X9, [X8 + 0x30]
	0x022A82F4 STP V2, V0, [X8 + 0x10]
	0x022A82F8 STR V1, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X1+56]
	004 Move W19, W0
	005 Compare X8, 0
	006 JumpIfNotEqual {9}
	007 Move X0, X1
	008 Call 0x1C5D6E0
	009 Move W0, W19
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return X0

Method: System.Void InternalEnumToInt(ref T enumValue, ref System.Int32 intValue)

Disassembly:
	0x022A8690 STP V0, V1, [X8 + 0x20]
	0x022A8694 STP V2, V3, [X8]
	0x022A8698 RET

ISIL:
	001 Move W8, [X0]
	002 Move [X1], W8
	003 Return 

Method: System.Boolean EnumEquals(T lhs, T rhs)

Disassembly:
	0x022A81B8 RET
	0x022A81BC MOVZ W0, 0x74
	0x022A81C0 RET

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 NotImplemented "Instruction CSET not yet implemented."
	003 Return X0

