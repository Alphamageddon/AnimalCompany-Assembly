Type: Unity.Collections.NativeSlice`1/Enumerator

Method: System.Void .ctor(ref Unity.Collections.NativeSlice`1<T> array)

Disassembly:
	0x02BB9D1C B 0x2BB9D24
	0x02BB9D20 STUR X31, [X19 + 0x14]
	0x02BB9D24 CMP W21, W20
	0x02BB9D28 LDP X20, X19, [X31 + 0x20]
	0x02BB9D2C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move V0, [X1]
	002 Move TEMP, 0
	003 Not TEMP
	004 Move W8, TEMP
	005 Move [X0+16], W8
	006 Move [X0], V0
	007 Return 

Method: System.Void Dispose()

Disassembly:
	0x02BB9D30 CSET W0, LT

ISIL:
	001 Return 

Method: System.Boolean MoveNext()

Disassembly:
	0x02BB9D34 LDR X30, [X31], #0x30
	0x02BB9D38 RET
	0x02BB9D3C MOVN W8, 0x0
	0x02BB9D40 STR W8, [X0 + 0x10]
	0x02BB9D44 RET
	0x02BB9D48 LDUR X0, [X0 + 0x14]
	0x02BB9D4C RET
	0x02BB9D50 STR X30, [X31 - 0x20]!
	0x02BB9D54 STP X20, X19, [X31 + 0x10]
	0x02BB9D58 LDR X8, [X1 + 0x20]
	0x02BB9D5C MOV X19, X0
	0x02BB9D60 ADD X9, X8, 0x135
	0x02BB9D64 LDRH W9, [X9]
	0x02BB9D68 TBNZ X9, 0x0, 0x2BB9D84
	0x02BB9D6C MOV X0, X8
	0x02BB9D70 MOV X20, X1
	0x02BB9D74 BL 0x1C5C684
	0x02BB9D78 LDR X8, [X20 + 0x20]
	0x02BB9D7C ADD X9, X8, 0x135

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+16]
	005 Move X19, X0
	006 Add W20, W8, 1
	007 Move [X0+16], W20
	008 Move X0, [X1+32]
	009 Move W8, [X0+309]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {15}
	014 Call 0x1C5D684
	015 Move X8, [X0+192]
	016 Move X0, X19
	017 Move X1, [X8+24]
	018 Call 0x24053AC, X0
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 NotImplemented "Instruction CSET not yet implemented."
	023 Move X30, [X31+32]
	024 Return X0

Method: System.Void Reset()

Disassembly:
	0x02BB9D80 LDRH W9, [X9]
	0x02BB9D84 LDUR X10, [X19 + 0x14]
	0x02BB9D88 STR X10, [X31 + 0x8]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W8, TEMP
	004 Move [X0+16], W8
	005 Return 

Method: T get_Current()

Disassembly:
	0x02BB9D8C TBNZ X9, 0x0, 0x2BB9D9C
	0x02BB9D90 MOV X0, X8
	0x02BB9D94 BL 0x1C5C684
	0x02BB9D98 MOV X8, X0
	0x02BB9D9C LDR X8, [X8 + 0xC0]
	0x02BB9DA0 ADD X1, X31, 0x8
	0x02BB9DA4 LDR X0, [X8 + 0x18]
	0x02BB9DA8 BL 0x1C16E04
	0x02BB9DAC LDP X20, X19, [X31 + 0x10]
	0x02BB9DB0 LDR X30, [X31], #0x20
	0x02BB9DB4 RET
	0x02BB9DB8 LDR V0, [X1]
	0x02BB9DBC MOVN W8, 0x0
	0x02BB9DC0 STR W8, [X0 + 0x10]
	0x02BB9DC4 STUR X31, [X0 + 0x14]
	0x02BB9DC8 STR V0, [X0]
	0x02BB9DCC RET
	0x02BB9DD0 RET
	0x02BB9DD4 STR X30, [X31 - 0x30]!
	0x02BB9DD8 STP X22, X21, [X31 + 0x10]
	0x02BB9DDC STP X20, X19, [X31 + 0x20]
	0x02BB9DE0 LDR W8, [X0 + 0x10]
	0x02BB9DE4 LDR W20, [X0 + 0x8]
	0x02BB9DE8 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+160], X30
	003 Move [X31+168], X21
	004 Move [X31+176], X20
	005 Move [X31+184], X19
	006 Move X20, X0
	007 Move X0, [X1+32]
	008 Move W21, [X20+16]
	009 Move X19, X8
	010 Move W9, [X0+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {16}
	015 Call 0x1C5D684
	016 Move X8, [X0+192]
	017 Move X0, X20
	018 Move W1, W21
	019 Move X2, [X8+40]
	020 Add X8, X31, 8
	021 Call 0x24050A8, X0, X1
	022 Add X1, X31, 8
	023 Move W2, 152
	024 Move X0, X19
	025 Call 0x3EB2AC0
	026 Move X20, [X31+176]
	027 Move X19, [X31+184]
	028 Move X30, [X31+160]
	029 Move X21, [X31+168]
	030 Add X31, X31, 192
	031 Return X0

Method: System.Object System.Collections.IEnumerator.get_Current()

Disassembly:
	0x02BB9DEC ADD W21, W8, 0x1
	0x02BB9DF0 CMP W21, W20
	0x02BB9DF4 STR W21, [X0 + 0x10]
	0x02BB9DF8 B.GE 0x2BB9E1C
	0x02BB9DFC LDR X0, [X1 + 0x20]
	0x02BB9E00 LDR X22, [X19]
	0x02BB9E04 LDRB W8, [X0 + 0x135]
	0x02BB9E08 TBNZ X8, 0x0, 0x2BB9E10
	0x02BB9E0C BL 0x1C5C684
	0x02BB9E10 LDR X8, [X22, W21, SXTW]
	0x02BB9E14 STUR X8, [X19 + 0x14]
	0x02BB9E18 B 0x2BB9E20
	0x02BB9E1C STUR X31, [X19 + 0x14]
	0x02BB9E20 CMP W21, W20
	0x02BB9E24 LDP X20, X19, [X31 + 0x20]
	0x02BB9E28 LDP X22, X21, [X31 + 0x10]
	0x02BB9E2C CSET W0, LT
	0x02BB9E30 LDR X30, [X31], #0x30
	0x02BB9E34 RET
	0x02BB9E38 MOVN W8, 0x0
	0x02BB9E3C STR W8, [X0 + 0x10]
	0x02BB9E40 RET
	0x02BB9E44 LDUR X0, [X0 + 0x14]
	0x02BB9E48 RET
	0x02BB9E4C STR X30, [X31 - 0x20]!
	0x02BB9E50 STP X20, X19, [X31 + 0x10]
	0x02BB9E54 LDR X8, [X1 + 0x20]
	0x02BB9E58 MOV X19, X0
	0x02BB9E5C ADD X9, X8, 0x135
	0x02BB9E60 LDRH W9, [X9]
	0x02BB9E64 TBNZ X9, 0x0, 0x2BB9E80
	0x02BB9E68 MOV X0, X8

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+304], X29
	003 Move [X31+312], X30
	004 Move [X31+320], X20
	005 Move [X31+328], X19
	006 Move X8, [X1+32]
	007 Move X19, X1
	008 Move X20, X0
	009 Move W9, [X8+309]
	010 Move TEMP, X9
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {17}
	014 Move X0, X8
	015 Call 0x1C5D684
	016 Move X8, X0
	017 Move X8, [X8+192]
	018 Move X0, X20
	019 Move X1, [X8+56]
	020 Add X8, X31, 152
	021 Call 0x2BB9D8C, X0
	022 Add X0, X31, 0
	023 Add X1, X31, 152
	024 Move W2, 152
	025 Call 0x3EB2AC0
	026 Move X0, [X19+32]
	027 Move W8, [X0+309]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {33}
	032 Call 0x1C5D684
	033 Move X8, [X0+192]
	034 Add X1, X31, 0
	035 Move X0, [X8+48]
	036 Call 0x1C17E04
	037 Move X20, [X31+320]
	038 Move X19, [X31+328]
	039 Move X29, [X31+304]
	040 Move X30, [X31+312]
	041 Add X31, X31, 336
	042 Return X0

