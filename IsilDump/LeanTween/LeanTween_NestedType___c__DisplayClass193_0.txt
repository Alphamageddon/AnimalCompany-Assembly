Type: LeanTween/<>c__DisplayClass193_0

Method: System.Void .ctor()

Disassembly:
	0x031B5B0C LDR X0, [X23]
	0x031B5B10 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <followDamp>b__0()

Disassembly:
	0x031B7474 ADRP X8, 0xF68000
	0x031B7478 LDR X8, [X8 + 0x5A0]
	0x031B747C MOV V8.16B, V0.16B
	0x031B7480 MOV V9.16B, V1.16B
	0x031B7484 MOV V10.16B, V2.16B
	0x031B7488 LDR X1, [X8]
	0x031B748C MOV V11.16B, V3.16B
	0x031B7490 BL 0x21A3894
	0x031B7494 CBZ X0, 0x31B74D8
	0x031B7498 MOV X1, X31
	0x031B749C BL 0x3C1341C
	0x031B74A0 CBZ X0, 0x31B74D8
	0x031B74A4 MOV V0.16B, V8.16B
	0x031B74A8 MOV V1.16B, V9.16B
	0x031B74AC MOV V2.16B, V10.16B
	0x031B74B0 MOV V3.16B, V11.16B
	0x031B74B4 LDP X20, X19, [X31 + 0x80]
	0x031B74B8 LDR X30, [X31 + 0x70]
	0x031B74BC LDP D9, D8, [X31 + 0x60]
	0x031B74C0 LDP D11, D10, [X31 + 0x50]
	0x031B74C4 LDP D13, D12, [X31 + 0x40]
	0x031B74C8 LDP D15, D14, [X31 + 0x30]
	0x031B74CC MOV X1, X31
	0x031B74D0 ADD X31, X31, 0x90
	0x031B74D4 B 0x3C148B4
	0x031B74D8 BL 0x1C16F20
	0x031B74DC SUB X31, X31, 0x80
	0x031B74E0 STP D15, D14, [X31 + 0x20]
	0x031B74E4 STP D13, D12, [X31 + 0x30]
	0x031B74E8 STP D11, D10, [X31 + 0x40]
	0x031B74EC STP D9, D8, [X31 + 0x50]
	0x031B74F0 STP X30, X21, [X31 + 0x60]
	0x031B74F4 STP X20, X19, [X31 + 0x70]
	0x031B74F8 MOV X19, X0
	0x031B74FC LDR X0, [X0 + 0x10]
	0x031B7500 CBZ X0, 0x31B75EC
	0x031B7504 LDR X21, [X0 + 0xE8]
	0x031B7508 CBZ X21, 0x31B75EC
	0x031B750C LDP S8, S9, [X21 + 0x24]
	0x031B7510 LDR V10, [X21 + 0x2C]
	0x031B7514 MOV X1, X31
	0x031B7518 BL 0x31BF678
	0x031B751C CBZ X0, 0x31B75EC
	0x031B7520 MOV X1, X31
	0x031B7524 BL 0x3C3EB78
	0x031B7528 LDR X8, [X19 + 0x10]
	0x031B752C CBZ X8, 0x31B75EC
	0x031B7530 LDP S14, S15, [X19 + 0x18]
	0x031B7534 MOV X0, X31
	0x031B7538 MOV V11.16B, V0.16B
	0x031B753C MOV V12.16B, V1.16B
	0x031B7540 MOV V13.16B, V2.16B
	0x031B7544 ADD X20, X8, 0x60
	0x031B7548 BL 0x3C3C714
	0x031B754C LDP S1, S2, [X19 + 0x20]
	0x031B7550 LDR V3, [X19 + 0x28]
	0x031B7554 STR S0, [X31]
	0x031B7558 MOV V0.16B, V8.16B
	0x031B755C STR S2, [X31 + 0x10]
	0x031B7560 STR S3, [X31 + 0x18]
	0x031B7564 STR S1, [X31 + 0x8]
	0x031B7568 MOV V1.16B, V9.16B
	0x031B756C MOV V2.16B, V10.16B
	0x031B7570 MOV V3.16B, V11.16B

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, X0
	015 Move X0, [X0+16]
	016 Compare X0, 0
	017 JumpIfEqual {87}
	018 Move X21, [X0+232]
	019 Compare X21, 0
	020 JumpIfEqual {87}
	021 Move S8, [X21+36]
	022 Move S9, [X21+40]
	023 Move V10, [X21+44]
	024 Move X1, X31
	025 Call LTDescr.get_toTrans, X0
	026 Compare X0, 0
	027 JumpIfEqual {87}
	028 Move X1, X31
	029 Call Transform.get_localPosition, X0
	030 Move X8, [X19+16]
	031 Compare X8, 0
	032 JumpIfEqual {87}
	033 Move S14, [X19+24]
	034 Move S15, [X19+28]
	035 Move X0, X31
	036 Move V11, V0
	037 Move V12, V1
	038 Move V13, V2
	039 Add X20, X8, 96
	040 Call Time.get_deltaTime
	041 Move [X31], S0
	042 Move V0, V8
	043 Move V1, V9
	044 Move V2, V10
	045 Move V3, V11
	046 Move V4, V12
	047 Move V5, V13
	048 Move X0, X20
	049 Move V6, V14
	050 Move V7, V15
	051 Call LeanSmooth.damp, X0, X1, X2, V0, V1, V2
	052 Move [X21+36], S0
	053 Move [X21+44], S1
	054 Move [X21+44], S2
	055 Move X8, [X19+16]
	056 Compare X8, 0
	057 JumpIfEqual {87}
	058 Move X9, [X8+232]
	059 Compare X9, 0
	060 JumpIfEqual {87}
	061 Move X0, [X8+88]
	062 Compare X0, 0
	063 JumpIfEqual {87}
	064 Move V0, [X9+44]
	065 Move V1, [X8+116]
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 Move X20, [X31+96]
	069 Move X19, [X31+104]
	070 Move X30, [X31+80]
	071 Move X21, [X31+88]
	072 Move D9, [X31+64]
	073 Move D8, [X31+72]
	074 Move D11, [X31+48]
	075 Move D10, [X31+56]
	076 Move D13, [X31+32]
	077 Move D12, [X31+40]
	078 Move D15, [X31+16]
	079 Move D14, [X31+24]
	080 Add S2, S0, S1
	081 Add V0, V3, V4
	082 Move S1, V0.S[1]
	083 Move X1, X31
	084 Add X31, X31, 112
	085 Call Transform.set_localPosition, X0, X1
	086 Return 
	087 Call 0x1C17F20

Method: System.Void <followDamp>b__1()

Disassembly:
	0x031B7574 MOV V4.16B, V12.16B
	0x031B7578 MOV V5.16B, V13.16B
	0x031B757C MOV X0, X20
	0x031B7580 MOV V6.16B, V14.16B
	0x031B7584 MOV V7.16B, V15.16B
	0x031B7588 BL 0x31AA984
	0x031B758C STP S0, S1, [X21 + 0x24]
	0x031B7590 STR S2, [X21 + 0x2C]
	0x031B7594 LDR X8, [X19 + 0x10]
	0x031B7598 CBZ X8, 0x31B75EC
	0x031B759C LDR X9, [X8 + 0xE8]
	0x031B75A0 CBZ X9, 0x31B75EC
	0x031B75A4 LDR X0, [X8 + 0x58]
	0x031B75A8 CBZ X0, 0x31B75EC
	0x031B75AC LDR V0, [X9 + 0x2C]
	0x031B75B0 LDR V1, [X8 + 0x74]
	0x031B75B4 LDUR V3, [X9 + 0x24]
	0x031B75B8 LDUR V4, [X8 + 0x6C]
	0x031B75BC LDP X20, X19, [X31 + 0x70]
	0x031B75C0 LDP X30, X21, [X31 + 0x60]
	0x031B75C4 LDP D9, D8, [X31 + 0x50]
	0x031B75C8 LDP D11, D10, [X31 + 0x40]
	0x031B75CC LDP D13, D12, [X31 + 0x30]
	0x031B75D0 LDP D15, D14, [X31 + 0x20]
	0x031B75D4 FADD S2, S0, S1
	0x031B75D8 FADD V0.2S, V3.2S, V4.2S
	0x031B75DC MOV S1, V0.S[1]
	0x031B75E0 MOV X1, X31
	0x031B75E4 ADD X31, X31, 0x80
	0x031B75E8 B 0x3C3EC04
	0x031B75EC BL 0x1C16F20
	0x031B75F0 SUB X31, X31, 0x80
	0x031B75F4 STP D15, D14, [X31 + 0x20]
	0x031B75F8 STP D13, D12, [X31 + 0x30]
	0x031B75FC STP D11, D10, [X31 + 0x40]
	0x031B7600 STP D9, D8, [X31 + 0x50]
	0x031B7604 STP X30, X21, [X31 + 0x60]
	0x031B7608 STP X20, X19, [X31 + 0x70]
	0x031B760C MOV X19, X0
	0x031B7610 LDR X0, [X0 + 0x10]
	0x031B7614 CBZ X0, 0x31B7700
	0x031B7618 LDR X21, [X0 + 0xE8]
	0x031B761C CBZ X21, 0x31B7700
	0x031B7620 LDP S8, S9, [X21 + 0x24]
	0x031B7624 LDR V10, [X21 + 0x2C]
	0x031B7628 MOV X1, X31
	0x031B762C BL 0x31BF678
	0x031B7630 CBZ X0, 0x31B7700
	0x031B7634 MOV X1, X31
	0x031B7638 BL 0x3C3F58C
	0x031B763C LDR X8, [X19 + 0x10]
	0x031B7640 CBZ X8, 0x31B7700
	0x031B7644 LDP S14, S15, [X19 + 0x18]
	0x031B7648 MOV X0, X31
	0x031B764C MOV V11.16B, V0.16B
	0x031B7650 MOV V12.16B, V1.16B
	0x031B7654 MOV V13.16B, V2.16B
	0x031B7658 ADD X20, X8, 0x60
	0x031B765C BL 0x3C3C714
	0x031B7660 LDP S1, S2, [X19 + 0x20]
	0x031B7664 LDR V3, [X19 + 0x28]
	0x031B7668 STR S0, [X31]
	0x031B766C MOV V0.16B, V8.16B
	0x031B7670 STR S2, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X19, X0
	015 Move X0, [X0+16]
	016 Compare X0, 0
	017 JumpIfEqual {87}
	018 Move X21, [X0+232]
	019 Compare X21, 0
	020 JumpIfEqual {87}
	021 Move S8, [X21+36]
	022 Move S9, [X21+40]
	023 Move V10, [X21+44]
	024 Move X1, X31
	025 Call LTDescr.get_toTrans, X0
	026 Compare X0, 0
	027 JumpIfEqual {87}
	028 Move X1, X31
	029 Call Transform.get_position, X0
	030 Move X8, [X19+16]
	031 Compare X8, 0
	032 JumpIfEqual {87}
	033 Move S14, [X19+24]
	034 Move S15, [X19+28]
	035 Move X0, X31
	036 Move V11, V0
	037 Move V12, V1
	038 Move V13, V2
	039 Add X20, X8, 96
	040 Call Time.get_deltaTime
	041 Move [X31], S0
	042 Move V0, V8
	043 Move V1, V9
	044 Move V2, V10
	045 Move V3, V11
	046 Move V4, V12
	047 Move V5, V13
	048 Move X0, X20
	049 Move V6, V14
	050 Move V7, V15
	051 Call LeanSmooth.damp, X0, X1, X2, V0, V1, V2
	052 Move [X21+36], S0
	053 Move [X21+44], S1
	054 Move [X21+44], S2
	055 Move X8, [X19+16]
	056 Compare X8, 0
	057 JumpIfEqual {87}
	058 Move X9, [X8+232]
	059 Compare X9, 0
	060 JumpIfEqual {87}
	061 Move X0, [X8+88]
	062 Compare X0, 0
	063 JumpIfEqual {87}
	064 Move V0, [X9+44]
	065 Move V1, [X8+116]
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 Move X20, [X31+96]
	069 Move X19, [X31+104]
	070 Move X30, [X31+80]
	071 Move X21, [X31+88]
	072 Move D9, [X31+64]
	073 Move D8, [X31+72]
	074 Move D11, [X31+48]
	075 Move D10, [X31+56]
	076 Move D13, [X31+32]
	077 Move D12, [X31+40]
	078 Move D15, [X31+16]
	079 Move D14, [X31+24]
	080 Add S2, S0, S1
	081 Add V0, V3, V4
	082 Move S1, V0.S[1]
	083 Move X1, X31
	084 Add X31, X31, 112
	085 Call Transform.set_position, X0, X1
	086 Return 
	087 Call 0x1C17F20

Method: System.Void <followDamp>b__2()

Disassembly:
	0x031B7674 STR S3, [X31 + 0x18]
	0x031B7678 STR S1, [X31 + 0x8]
	0x031B767C MOV V1.16B, V9.16B
	0x031B7680 MOV V2.16B, V10.16B
	0x031B7684 MOV V3.16B, V11.16B
	0x031B7688 MOV V4.16B, V12.16B
	0x031B768C MOV V5.16B, V13.16B
	0x031B7690 MOV X0, X20
	0x031B7694 MOV V6.16B, V14.16B
	0x031B7698 MOV V7.16B, V15.16B
	0x031B769C BL 0x31AA984
	0x031B76A0 STP S0, S1, [X21 + 0x24]
	0x031B76A4 STR S2, [X21 + 0x2C]
	0x031B76A8 LDR X8, [X19 + 0x10]
	0x031B76AC CBZ X8, 0x31B7700
	0x031B76B0 LDR X9, [X8 + 0xE8]
	0x031B76B4 CBZ X9, 0x31B7700
	0x031B76B8 LDR X0, [X8 + 0x58]
	0x031B76BC CBZ X0, 0x31B7700
	0x031B76C0 LDR V0, [X9 + 0x2C]
	0x031B76C4 LDR V1, [X8 + 0x74]
	0x031B76C8 LDUR V3, [X9 + 0x24]
	0x031B76CC LDUR V4, [X8 + 0x6C]
	0x031B76D0 LDP X20, X19, [X31 + 0x70]
	0x031B76D4 LDP X30, X21, [X31 + 0x60]
	0x031B76D8 LDP D9, D8, [X31 + 0x50]
	0x031B76DC LDP D11, D10, [X31 + 0x40]
	0x031B76E0 LDP D13, D12, [X31 + 0x30]
	0x031B76E4 LDP D15, D14, [X31 + 0x20]
	0x031B76E8 FADD S2, S0, S1
	0x031B76EC FADD V0.2S, V3.2S, V4.2S
	0x031B76F0 MOV S1, V0.S[1]
	0x031B76F4 MOV X1, X31
	0x031B76F8 ADD X31, X31, 0x80
	0x031B76FC B 0x3C3F62C
	0x031B7700 BL 0x1C16F20
	0x031B7704 STP D11, D10, [X31 - 0x40]!
	0x031B7708 STP D9, D8, [X31 + 0x10]
	0x031B770C STP X30, X21, [X31 + 0x20]
	0x031B7710 STP X20, X19, [X31 + 0x30]
	0x031B7714 LDR X8, [X0 + 0x10]
	0x031B7718 CBZ X8, 0x31B77B0

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0+16]
	009 Compare X8, 0
	010 JumpIfEqual {55}
	011 Move X19, [X8+88]
	012 Compare X19, 0
	013 JumpIfEqual {55}
	014 Move X20, X0
	015 Move X0, X19
	016 Move X1, X31
	017 Call Transform.get_localPosition, X0
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {55}
	021 Move X1, X31
	022 Move V8, V0
	023 Call LTDescr.get_toTrans, X0
	024 Compare X0, 0
	025 JumpIfEqual {55}
	026 Move X1, X31
	027 Call Transform.get_localPosition, X0
	028 Move X8, [X20+16]
	029 Compare X8, 0
	030 JumpIfEqual {55}
	031 Move S10, [X20+24]
	032 Move S11, [X20+28]
	033 Move X0, X31
	034 Move V9, V0
	035 Add X20, X8, 96
	036 Call Time.get_deltaTime
	037 Move V4, V0
	038 Move V0, V8
	039 Move V1, V9
	040 Move X0, X20
	041 Move V2, V10
	042 Move V3, V11
	043 Call LeanSmooth.damp, V0, V1, X0, V2, V3, V4
	044 Move X0, X19
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X30, [X31+32]
	048 Move D9, [X31+16]
	049 Move D8, [X31+24]
	050 Move X1, X31
	051 Move D11, [X31+64]
	052 Move D10, [X31+72]
	053 Call LeanTweenExt.LeanSetLocalPosX, X0, V0
	054 Return 
	055 Call 0x1C17F20

Method: System.Void <followDamp>b__3()

Disassembly:
	0x031B771C LDR X19, [X8 + 0x58]
	0x031B7720 CBZ X19, 0x31B77B0
	0x031B7724 MOV X20, X0
	0x031B7728 MOV X0, X19
	0x031B772C MOV X1, X31
	0x031B7730 BL 0x3C3EB78
	0x031B7734 LDR X0, [X20 + 0x10]
	0x031B7738 CBZ X0, 0x31B77B0
	0x031B773C MOV X1, X31
	0x031B7740 MOV V8.16B, V0.16B
	0x031B7744 BL 0x31BF678
	0x031B7748 CBZ X0, 0x31B77B0
	0x031B774C MOV X1, X31
	0x031B7750 BL 0x3C3EB78
	0x031B7754 LDR X8, [X20 + 0x10]
	0x031B7758 CBZ X8, 0x31B77B0
	0x031B775C LDP S10, S11, [X20 + 0x18]
	0x031B7760 MOV X0, X31
	0x031B7764 MOV V9.16B, V0.16B
	0x031B7768 ADD X21, X8, 0x60
	0x031B776C BL 0x3C3C714
	0x031B7770 LDP S5, S6, [X20 + 0x20]
	0x031B7774 LDR V7, [X20 + 0x28]
	0x031B7778 MOV V4.16B, V0.16B
	0x031B777C MOV V0.16B, V8.16B
	0x031B7780 MOV V1.16B, V9.16B
	0x031B7784 MOV X0, X21
	0x031B7788 MOV V2.16B, V10.16B
	0x031B778C MOV V3.16B, V11.16B
	0x031B7790 BL 0x31AA8A0
	0x031B7794 MOV X0, X19
	0x031B7798 LDP X20, X19, [X31 + 0x30]
	0x031B779C LDP X30, X21, [X31 + 0x20]
	0x031B77A0 LDP D9, D8, [X31 + 0x10]
	0x031B77A4 MOV X1, X31
	0x031B77A8 LDP D11, D10, [X31], #0x40
	0x031B77AC B 0x31BF4DC
	0x031B77B0 BL 0x1C16F20
	0x031B77B4 STP D11, D10, [X31 - 0x40]!
	0x031B77B8 STP D9, D8, [X31 + 0x10]
	0x031B77BC STP X30, X21, [X31 + 0x20]
	0x031B77C0 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0+16]
	009 Compare X8, 0
	010 JumpIfEqual {55}
	011 Move X19, [X8+88]
	012 Compare X19, 0
	013 JumpIfEqual {55}
	014 Move X20, X0
	015 Move X0, X19
	016 Move X1, X31
	017 Call Transform.get_localPosition, X0
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {55}
	021 Move X1, X31
	022 Move V8, V1
	023 Call LTDescr.get_toTrans, X0
	024 Compare X0, 0
	025 JumpIfEqual {55}
	026 Move X1, X31
	027 Call Transform.get_localPosition, X0
	028 Move X8, [X20+16]
	029 Compare X8, 0
	030 JumpIfEqual {55}
	031 Move S10, [X20+24]
	032 Move S11, [X20+28]
	033 Move X0, X31
	034 Move V9, V1
	035 Add X20, X8, 100
	036 Call Time.get_deltaTime
	037 Move V4, V0
	038 Move V0, V8
	039 Move V1, V9
	040 Move X0, X20
	041 Move V2, V10
	042 Move V3, V11
	043 Call LeanSmooth.damp, V0, V1, X0, V2, V3, V4
	044 Move X0, X19
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X30, [X31+32]
	048 Move D9, [X31+16]
	049 Move D8, [X31+24]
	050 Move X1, X31
	051 Move D11, [X31+64]
	052 Move D10, [X31+72]
	053 Call LeanTweenExt.LeanSetLocalPosY, X0, V0
	054 Return 
	055 Call 0x1C17F20

Method: System.Void <followDamp>b__4()

Disassembly:
	0x031B77C4 LDR X8, [X0 + 0x10]
	0x031B77C8 CBZ X8, 0x31B7860
	0x031B77CC LDR X19, [X8 + 0x58]
	0x031B77D0 CBZ X19, 0x31B7860
	0x031B77D4 MOV X20, X0
	0x031B77D8 MOV X0, X19
	0x031B77DC MOV X1, X31
	0x031B77E0 BL 0x3C3EB78
	0x031B77E4 LDR X0, [X20 + 0x10]
	0x031B77E8 CBZ X0, 0x31B7860
	0x031B77EC MOV X1, X31
	0x031B77F0 MOV V8.16B, V1.16B
	0x031B77F4 BL 0x31BF678
	0x031B77F8 CBZ X0, 0x31B7860
	0x031B77FC MOV X1, X31
	0x031B7800 BL 0x3C3EB78
	0x031B7804 LDR X8, [X20 + 0x10]
	0x031B7808 CBZ X8, 0x31B7860
	0x031B780C LDP S10, S11, [X20 + 0x18]
	0x031B7810 MOV X0, X31
	0x031B7814 MOV V9.16B, V1.16B
	0x031B7818 ADD X21, X8, 0x64
	0x031B781C BL 0x3C3C714
	0x031B7820 LDP S5, S6, [X20 + 0x20]
	0x031B7824 LDR V7, [X20 + 0x28]
	0x031B7828 MOV V4.16B, V0.16B
	0x031B782C MOV V0.16B, V8.16B
	0x031B7830 MOV V1.16B, V9.16B
	0x031B7834 MOV X0, X21
	0x031B7838 MOV V2.16B, V10.16B
	0x031B783C MOV V3.16B, V11.16B
	0x031B7840 BL 0x31AA8A0
	0x031B7844 MOV X0, X19
	0x031B7848 LDP X20, X19, [X31 + 0x30]
	0x031B784C LDP X30, X21, [X31 + 0x20]
	0x031B7850 LDP D9, D8, [X31 + 0x10]
	0x031B7854 MOV X1, X31
	0x031B7858 LDP D11, D10, [X31], #0x40
	0x031B785C B 0x31BF528
	0x031B7860 BL 0x1C16F20
	0x031B7864 STP D11, D10, [X31 - 0x40]!
	0x031B7868 STP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0+16]
	009 Compare X8, 0
	010 JumpIfEqual {55}
	011 Move X19, [X8+88]
	012 Compare X19, 0
	013 JumpIfEqual {55}
	014 Move X20, X0
	015 Move X0, X19
	016 Move X1, X31
	017 Call Transform.get_localPosition, X0
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {55}
	021 Move X1, X31
	022 Move V8, V2
	023 Call LTDescr.get_toTrans, X0
	024 Compare X0, 0
	025 JumpIfEqual {55}
	026 Move X1, X31
	027 Call Transform.get_localPosition, X0
	028 Move X8, [X20+16]
	029 Compare X8, 0
	030 JumpIfEqual {55}
	031 Move S10, [X20+24]
	032 Move S11, [X20+28]
	033 Move X0, X31
	034 Move V9, V2
	035 Add X20, X8, 104
	036 Call Time.get_deltaTime
	037 Move V4, V0
	038 Move V0, V8
	039 Move V1, V9
	040 Move X0, X20
	041 Move V2, V10
	042 Move V3, V11
	043 Call LeanSmooth.damp, V0, V1, X0, V2, V3, V4
	044 Move X0, X19
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X30, [X31+32]
	048 Move D9, [X31+16]
	049 Move D8, [X31+24]
	050 Move X1, X31
	051 Move D11, [X31+64]
	052 Move D10, [X31+72]
	053 Call LeanTweenExt.LeanSetLocalPosZ, X0, V0
	054 Return 
	055 Call 0x1C17F20

Method: System.Void <followDamp>b__5()

Disassembly:
	0x031B786C STP X30, X21, [X31 + 0x20]
	0x031B7870 STP X20, X19, [X31 + 0x30]
	0x031B7874 LDR X8, [X0 + 0x10]
	0x031B7878 CBZ X8, 0x31B7910
	0x031B787C LDR X19, [X8 + 0x58]
	0x031B7880 CBZ X19, 0x31B7910
	0x031B7884 MOV X20, X0
	0x031B7888 MOV X0, X19
	0x031B788C MOV X1, X31
	0x031B7890 BL 0x3C3EB78
	0x031B7894 LDR X0, [X20 + 0x10]
	0x031B7898 CBZ X0, 0x31B7910
	0x031B789C MOV X1, X31
	0x031B78A0 MOV V8.16B, V2.16B
	0x031B78A4 BL 0x31BF678
	0x031B78A8 CBZ X0, 0x31B7910
	0x031B78AC MOV X1, X31
	0x031B78B0 BL 0x3C3EB78
	0x031B78B4 LDR X8, [X20 + 0x10]
	0x031B78B8 CBZ X8, 0x31B7910
	0x031B78BC LDP S10, S11, [X20 + 0x18]
	0x031B78C0 MOV X0, X31
	0x031B78C4 MOV V9.16B, V2.16B
	0x031B78C8 ADD X21, X8, 0x68
	0x031B78CC BL 0x3C3C714
	0x031B78D0 LDP S5, S6, [X20 + 0x20]
	0x031B78D4 LDR V7, [X20 + 0x28]
	0x031B78D8 MOV V4.16B, V0.16B
	0x031B78DC MOV V0.16B, V8.16B
	0x031B78E0 MOV V1.16B, V9.16B
	0x031B78E4 MOV X0, X21
	0x031B78E8 MOV V2.16B, V10.16B
	0x031B78EC MOV V3.16B, V11.16B
	0x031B78F0 BL 0x31AA8A0
	0x031B78F4 MOV X0, X19
	0x031B78F8 LDP X20, X19, [X31 + 0x30]
	0x031B78FC LDP X30, X21, [X31 + 0x20]
	0x031B7900 LDP D9, D8, [X31 + 0x10]
	0x031B7904 MOV X1, X31
	0x031B7908 LDP D11, D10, [X31], #0x40
	0x031B790C B 0x31BF574
	0x031B7910 BL 0x1C16F20

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0+16]
	009 Compare X8, 0
	010 JumpIfEqual {55}
	011 Move X19, [X8+88]
	012 Compare X19, 0
	013 JumpIfEqual {55}
	014 Move X20, X0
	015 Move X0, X19
	016 Move X1, X31
	017 Call Transform.get_position, X0
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {55}
	021 Move X1, X31
	022 Move V8, V0
	023 Call LTDescr.get_toTrans, X0
	024 Compare X0, 0
	025 JumpIfEqual {55}
	026 Move X1, X31
	027 Call Transform.get_position, X0
	028 Move X8, [X20+16]
	029 Compare X8, 0
	030 JumpIfEqual {55}
	031 Move S10, [X20+24]
	032 Move S11, [X20+28]
	033 Move X0, X31
	034 Move V9, V0
	035 Add X20, X8, 96
	036 Call Time.get_deltaTime
	037 Move V4, V0
	038 Move V0, V8
	039 Move V1, V9
	040 Move X0, X20
	041 Move V2, V10
	042 Move V3, V11
	043 Call LeanSmooth.damp, V0, V1, X0, V2, V3, V4
	044 Move X0, X19
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X30, [X31+32]
	048 Move D9, [X31+16]
	049 Move D8, [X31+24]
	050 Move X1, X31
	051 Move D11, [X31+64]
	052 Move D10, [X31+72]
	053 Call LeanTweenExt.LeanSetPosX, X0, V0
	054 Return 
	055 Call 0x1C17F20

Method: System.Void <followDamp>b__6()

Disassembly:
	0x031B7914 STP D11, D10, [X31 - 0x40]!
	0x031B7918 STP D9, D8, [X31 + 0x10]
	0x031B791C STP X30, X21, [X31 + 0x20]
	0x031B7920 STP X20, X19, [X31 + 0x30]
	0x031B7924 LDR X8, [X0 + 0x10]
	0x031B7928 CBZ X8, 0x31B79C0
	0x031B792C LDR X19, [X8 + 0x58]
	0x031B7930 CBZ X19, 0x31B79C0
	0x031B7934 MOV X20, X0
	0x031B7938 MOV X0, X19
	0x031B793C MOV X1, X31
	0x031B7940 BL 0x3C3F58C
	0x031B7944 LDR X0, [X20 + 0x10]
	0x031B7948 CBZ X0, 0x31B79C0
	0x031B794C MOV X1, X31
	0x031B7950 MOV V8.16B, V0.16B
	0x031B7954 BL 0x31BF678
	0x031B7958 CBZ X0, 0x31B79C0
	0x031B795C MOV X1, X31
	0x031B7960 BL 0x3C3F58C
	0x031B7964 LDR X8, [X20 + 0x10]
	0x031B7968 CBZ X8, 0x31B79C0
	0x031B796C LDP S10, S11, [X20 + 0x18]
	0x031B7970 MOV X0, X31
	0x031B7974 MOV V9.16B, V0.16B
	0x031B7978 ADD X21, X8, 0x60
	0x031B797C BL 0x3C3C714
	0x031B7980 LDP S5, S6, [X20 + 0x20]
	0x031B7984 LDR V7, [X20 + 0x28]
	0x031B7988 MOV V4.16B, V0.16B
	0x031B798C MOV V0.16B, V8.16B
	0x031B7990 MOV V1.16B, V9.16B
	0x031B7994 MOV X0, X21
	0x031B7998 MOV V2.16B, V10.16B
	0x031B799C MOV V3.16B, V11.16B
	0x031B79A0 BL 0x31AA8A0
	0x031B79A4 MOV X0, X19
	0x031B79A8 LDP X20, X19, [X31 + 0x30]
	0x031B79AC LDP X30, X21, [X31 + 0x20]
	0x031B79B0 LDP D9, D8, [X31 + 0x10]
	0x031B79B4 MOV X1, X31
	0x031B79B8 LDP D11, D10, [X31], #0x40

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0+16]
	009 Compare X8, 0
	010 JumpIfEqual {55}
	011 Move X19, [X8+88]
	012 Compare X19, 0
	013 JumpIfEqual {55}
	014 Move X20, X0
	015 Move X0, X19
	016 Move X1, X31
	017 Call Transform.get_position, X0
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {55}
	021 Move X1, X31
	022 Move V8, V1
	023 Call LTDescr.get_toTrans, X0
	024 Compare X0, 0
	025 JumpIfEqual {55}
	026 Move X1, X31
	027 Call Transform.get_position, X0
	028 Move X8, [X20+16]
	029 Compare X8, 0
	030 JumpIfEqual {55}
	031 Move S10, [X20+24]
	032 Move S11, [X20+28]
	033 Move X0, X31
	034 Move V9, V1
	035 Add X20, X8, 100
	036 Call Time.get_deltaTime
	037 Move V4, V0
	038 Move V0, V8
	039 Move V1, V9
	040 Move X0, X20
	041 Move V2, V10
	042 Move V3, V11
	043 Call LeanSmooth.damp, V0, V1, X0, V2, V3, V4
	044 Move X0, X19
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X30, [X31+32]
	048 Move D9, [X31+16]
	049 Move D8, [X31+24]
	050 Move X1, X31
	051 Move D11, [X31+64]
	052 Move D10, [X31+72]
	053 Call LeanTweenExt.LeanSetPosY, X0, V0
	054 Return 
	055 Call 0x1C17F20

Method: System.Void <followDamp>b__7()

Disassembly:
	0x031B79BC B 0x31BF3F8
	0x031B79C0 BL 0x1C16F20
	0x031B79C4 STP D11, D10, [X31 - 0x40]!
	0x031B79C8 STP D9, D8, [X31 + 0x10]
	0x031B79CC STP X30, X21, [X31 + 0x20]
	0x031B79D0 STP X20, X19, [X31 + 0x30]
	0x031B79D4 LDR X8, [X0 + 0x10]
	0x031B79D8 CBZ X8, 0x31B7A70
	0x031B79DC LDR X19, [X8 + 0x58]
	0x031B79E0 CBZ X19, 0x31B7A70
	0x031B79E4 MOV X20, X0
	0x031B79E8 MOV X0, X19
	0x031B79EC MOV X1, X31
	0x031B79F0 BL 0x3C3F58C
	0x031B79F4 LDR X0, [X20 + 0x10]
	0x031B79F8 CBZ X0, 0x31B7A70
	0x031B79FC MOV X1, X31
	0x031B7A00 MOV V8.16B, V1.16B
	0x031B7A04 BL 0x31BF678
	0x031B7A08 CBZ X0, 0x31B7A70
	0x031B7A0C MOV X1, X31
	0x031B7A10 BL 0x3C3F58C
	0x031B7A14 LDR X8, [X20 + 0x10]
	0x031B7A18 CBZ X8, 0x31B7A70
	0x031B7A1C LDP S10, S11, [X20 + 0x18]
	0x031B7A20 MOV X0, X31
	0x031B7A24 MOV V9.16B, V1.16B
	0x031B7A28 ADD X21, X8, 0x64
	0x031B7A2C BL 0x3C3C714
	0x031B7A30 LDP S5, S6, [X20 + 0x20]
	0x031B7A34 LDR V7, [X20 + 0x28]
	0x031B7A38 MOV V4.16B, V0.16B
	0x031B7A3C MOV V0.16B, V8.16B
	0x031B7A40 MOV V1.16B, V9.16B
	0x031B7A44 MOV X0, X21
	0x031B7A48 MOV V2.16B, V10.16B
	0x031B7A4C MOV V3.16B, V11.16B
	0x031B7A50 BL 0x31AA8A0
	0x031B7A54 MOV X0, X19
	0x031B7A58 LDP X20, X19, [X31 + 0x30]
	0x031B7A5C LDP X30, X21, [X31 + 0x20]
	0x031B7A60 LDP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X0+16]
	009 Compare X8, 0
	010 JumpIfEqual {55}
	011 Move X19, [X8+88]
	012 Compare X19, 0
	013 JumpIfEqual {55}
	014 Move X20, X0
	015 Move X0, X19
	016 Move X1, X31
	017 Call Transform.get_position, X0
	018 Move X0, [X20+16]
	019 Compare X0, 0
	020 JumpIfEqual {55}
	021 Move X1, X31
	022 Move V8, V2
	023 Call LTDescr.get_toTrans, X0
	024 Compare X0, 0
	025 JumpIfEqual {55}
	026 Move X1, X31
	027 Call Transform.get_position, X0
	028 Move X8, [X20+16]
	029 Compare X8, 0
	030 JumpIfEqual {55}
	031 Move S10, [X20+24]
	032 Move S11, [X20+28]
	033 Move X0, X31
	034 Move V9, V2
	035 Add X20, X8, 104
	036 Call Time.get_deltaTime
	037 Move V4, V0
	038 Move V0, V8
	039 Move V1, V9
	040 Move X0, X20
	041 Move V2, V10
	042 Move V3, V11
	043 Call LeanSmooth.damp, V0, V1, X0, V2, V3, V4
	044 Move X0, X19
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X30, [X31+32]
	048 Move D9, [X31+16]
	049 Move D8, [X31+24]
	050 Move X1, X31
	051 Move D11, [X31+64]
	052 Move D10, [X31+72]
	053 Call LeanTweenExt.LeanSetPosZ, X0, V0
	054 Return 
	055 Call 0x1C17F20

Method: System.Void <followDamp>b__8()

Disassembly:
	0x031B7A64 MOV X1, X31
	0x031B7A68 LDP D11, D10, [X31], #0x40
	0x031B7A6C B 0x31BF444
	0x031B7A70 BL 0x1C16F20
	0x031B7A74 STP D11, D10, [X31 - 0x40]!
	0x031B7A78 STP D9, D8, [X31 + 0x10]
	0x031B7A7C STP X30, X21, [X31 + 0x20]
	0x031B7A80 STP X20, X19, [X31 + 0x30]
	0x031B7A84 LDR X8, [X0 + 0x10]
	0x031B7A88 CBZ X8, 0x31B7B20
	0x031B7A8C LDR X19, [X8 + 0x58]
	0x031B7A90 CBZ X19, 0x31B7B20
	0x031B7A94 MOV X20, X0
	0x031B7A98 MOV X0, X19
	0x031B7A9C MOV X1, X31
	0x031B7AA0 BL 0x3C3F58C
	0x031B7AA4 LDR X0, [X20 + 0x10]
	0x031B7AA8 CBZ X0, 0x31B7B20
	0x031B7AAC MOV X1, X31
	0x031B7AB0 MOV V8.16B, V2.16B
	0x031B7AB4 BL 0x31BF678
	0x031B7AB8 CBZ X0, 0x31B7B20
	0x031B7ABC MOV X1, X31
	0x031B7AC0 BL 0x3C3F58C
	0x031B7AC4 LDR X8, [X20 + 0x10]
	0x031B7AC8 CBZ X8, 0x31B7B20
	0x031B7ACC LDP S10, S11, [X20 + 0x18]
	0x031B7AD0 MOV X0, X31
	0x031B7AD4 MOV V9.16B, V2.16B
	0x031B7AD8 ADD X21, X8, 0x68
	0x031B7ADC BL 0x3C3C714
	0x031B7AE0 LDP S5, S6, [X20 + 0x20]
	0x031B7AE4 LDR V7, [X20 + 0x28]
	0x031B7AE8 MOV V4.16B, V0.16B
	0x031B7AEC MOV V0.16B, V8.16B
	0x031B7AF0 MOV V1.16B, V9.16B
	0x031B7AF4 MOV X0, X21
	0x031B7AF8 MOV V2.16B, V10.16B
	0x031B7AFC MOV V3.16B, V11.16B
	0x031B7B00 BL 0x31AA8A0
	0x031B7B04 MOV X0, X19
	0x031B7B08 LDP X20, X19, [X31 + 0x30]
	0x031B7B0C LDP X30, X21, [X31 + 0x20]
	0x031B7B10 LDP D9, D8, [X31 + 0x10]
	0x031B7B14 MOV X1, X31
	0x031B7B18 LDP D11, D10, [X31], #0x40
	0x031B7B1C B 0x31BF490
	0x031B7B20 BL 0x1C16F20
	0x031B7B24 SUB X31, X31, 0x80
	0x031B7B28 STP D15, D14, [X31 + 0x20]
	0x031B7B2C STP D13, D12, [X31 + 0x30]
	0x031B7B30 STP D11, D10, [X31 + 0x40]
	0x031B7B34 STP D9, D8, [X31 + 0x50]
	0x031B7B38 STP X30, X21, [X31 + 0x60]
	0x031B7B3C STP X20, X19, [X31 + 0x70]
	0x031B7B40 LDR X8, [X0 + 0x10]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X20
	012 Move [X31+104], X19
	013 Move X8, [X0+16]
	014 Compare X8, 0
	015 JumpIfEqual {73}
	016 Move X19, [X8+88]
	017 Compare X19, 0
	018 JumpIfEqual {73}
	019 Move X20, X0
	020 Move X0, X19
	021 Move X1, X31
	022 Call Transform.get_localScale, X0
	023 Move X0, [X20+16]
	024 Compare X0, 0
	025 JumpIfEqual {73}
	026 Move X1, X31
	027 Move V8, V0
	028 Move V9, V1
	029 Move V10, V2
	030 Call LTDescr.get_toTrans, X0
	031 Compare X0, 0
	032 JumpIfEqual {73}
	033 Move X1, X31
	034 Call Transform.get_localScale, X0
	035 Move X8, [X20+16]
	036 Compare X8, 0
	037 JumpIfEqual {73}
	038 Move S14, [X20+24]
	039 Move S15, [X20+28]
	040 Move X0, X31
	041 Move V11, V0
	042 Move V12, V1
	043 Move V13, V2
	044 Add X20, X8, 96
	045 Call Time.get_deltaTime
	046 Move [X31], S0
	047 Move V0, V8
	048 Move V1, V9
	049 Move V2, V10
	050 Move V3, V11
	051 Move V4, V12
	052 Move V5, V13
	053 Move X0, X20
	054 Move V6, V14
	055 Move V7, V15
	056 Call LeanSmooth.damp, X0, X1, X2, V0, V1, V2
	057 Move X0, X19
	058 Move X20, [X31+96]
	059 Move X19, [X31+104]
	060 Move X30, [X31+80]
	061 Move D9, [X31+64]
	062 Move D8, [X31+72]
	063 Move D11, [X31+48]
	064 Move D10, [X31+56]
	065 Move D13, [X31+32]
	066 Move D12, [X31+40]
	067 Move D15, [X31+16]
	068 Move D14, [X31+24]
	069 Move X1, X31
	070 Add X31, X31, 112
	071 Call Transform.set_localScale, X0, X1
	072 Return 
	073 Call 0x1C17F20

Method: System.Void <followDamp>b__9()

Disassembly:
	0x031B7B44 CBZ X8, 0x31B7C14
	0x031B7B48 LDR X19, [X8 + 0x58]
	0x031B7B4C CBZ X19, 0x31B7C14
	0x031B7B50 MOV X20, X0
	0x031B7B54 MOV X0, X19
	0x031B7B58 MOV X1, X31
	0x031B7B5C BL 0x3C3FBAC
	0x031B7B60 LDR X0, [X20 + 0x10]
	0x031B7B64 CBZ X0, 0x31B7C14
	0x031B7B68 MOV X1, X31
	0x031B7B6C MOV V8.16B, V0.16B
	0x031B7B70 MOV V9.16B, V1.16B
	0x031B7B74 MOV V10.16B, V2.16B
	0x031B7B78 BL 0x31BF678
	0x031B7B7C CBZ X0, 0x31B7C14
	0x031B7B80 MOV X1, X31
	0x031B7B84 BL 0x3C3FBAC
	0x031B7B88 LDR X8, [X20 + 0x10]
	0x031B7B8C CBZ X8, 0x31B7C14
	0x031B7B90 LDP S14, S15, [X20 + 0x18]
	0x031B7B94 MOV X0, X31
	0x031B7B98 MOV V11.16B, V0.16B
	0x031B7B9C MOV V12.16B, V1.16B
	0x031B7BA0 MOV V13.16B, V2.16B
	0x031B7BA4 ADD X21, X8, 0x60
	0x031B7BA8 BL 0x3C3C714
	0x031B7BAC LDP S1, S2, [X20 + 0x20]
	0x031B7BB0 LDR V3, [X20 + 0x28]
	0x031B7BB4 STR S0, [X31]
	0x031B7BB8 MOV V0.16B, V8.16B
	0x031B7BBC STR S2, [X31 + 0x10]
	0x031B7BC0 STR S3, [X31 + 0x18]
	0x031B7BC4 STR S1, [X31 + 0x8]
	0x031B7BC8 MOV V1.16B, V9.16B
	0x031B7BCC MOV V2.16B, V10.16B
	0x031B7BD0 MOV V3.16B, V11.16B
	0x031B7BD4 MOV V4.16B, V12.16B
	0x031B7BD8 MOV V5.16B, V13.16B
	0x031B7BDC MOV X0, X21
	0x031B7BE0 MOV V6.16B, V14.16B
	0x031B7BE4 MOV V7.16B, V15.16B
	0x031B7BE8 BL 0x31AA984
	0x031B7BEC MOV X0, X19
	0x031B7BF0 LDP X20, X19, [X31 + 0x70]
	0x031B7BF4 LDP X30, X21, [X31 + 0x60]
	0x031B7BF8 LDP D9, D8, [X31 + 0x50]
	0x031B7BFC LDP D11, D10, [X31 + 0x40]
	0x031B7C00 LDP D13, D12, [X31 + 0x30]
	0x031B7C04 LDP D15, D14, [X31 + 0x20]
	0x031B7C08 MOV X1, X31
	0x031B7C0C ADD X31, X31, 0x80
	0x031B7C10 B 0x3C3FC4C
	0x031B7C14 BL 0x1C16F20
	0x031B7C18 SUB X31, X31, 0x90
	0x031B7C1C STP D15, D14, [X31 + 0x30]
	0x031B7C20 STP D13, D12, [X31 + 0x40]
	0x031B7C24 STP D11, D10, [X31 + 0x50]
	0x031B7C28 STP D9, D8, [X31 + 0x60]
	0x031B7C2C STR X30, [X31 + 0x70]
	0x031B7C30 STP X20, X19, [X31 + 0x80]
	0x031B7C34 ADRP X20, 0x1224000
	0x031B7C38 LDRB W8, [X20 + 0xED2]
	0x031B7C3C MOV X19, X0
	0x031B7C40 TBNZ X8, 0x0, 0x31B7C58
	0x031B7C44 ADRP X0, 0xF68000
	0x031B7C48 LDR X0, [X0 + 0x5A0]
	0x031B7C4C BL 0x1C16CF4
	0x031B7C50 MOVZ W8, 0x1
	0x031B7C54 STRB W8, [X20 + 0xED2]
	0x031B7C58 LDR X8, [X19 + 0x10]
	0x031B7C5C CBZ X8, 0x31B7D78
	0x031B7C60 LDR X0, [X8 + 0x58]
	0x031B7C64 MOV X1, X31
	0x031B7C68 BL 0x31BF5C0
	0x031B7C6C LDR X0, [X19 + 0x10]
	0x031B7C70 CBZ X0, 0x31B7D78
	0x031B7C74 MOV X1, X31
	0x031B7C78 MOV V10.16B, V0.16B
	0x031B7C7C MOV V11.16B, V1.16B
	0x031B7C80 MOV V12.16B, V2.16B
	0x031B7C84 MOV V13.16B, V3.16B
	0x031B7C88 BL 0x31BF678
	0x031B7C8C MOV X1, X31
	0x031B7C90 BL 0x31BF5C0

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+112], X20
	012 Move [X31+120], X19
	013 Move X20, 0x1225000
	014 Move W8, [X20+3792]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF69000
	021 Move X0, [X0+1440]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3792], W8
	025 Move X8, [X19+16]
	026 Compare X8, 0
	027 JumpIfEqual {109}
	028 Move X0, [X8+88]
	029 Move X1, X31
	030 Call LeanTweenExt.LeanColor, X0
	031 Move X0, [X19+16]
	032 Compare X0, 0
	033 JumpIfEqual {109}
	034 Move X1, X31
	035 Move V10, V0
	036 Move V11, V1
	037 Move V12, V2
	038 Move V13, V3
	039 Call LTDescr.get_toTrans, X0
	040 Move X1, X31
	041 Call LeanTweenExt.LeanColor, X0
	042 Move X8, [X19+16]
	043 Compare X8, 0
	044 JumpIfEqual {109}
	045 Move X8, [X8+232]
	046 Move [X31+104], S3
	047 Move [X31+112], S2
	048 Compare X8, 0
	049 JumpIfEqual {109}
	050 Move S8, [X19+24]
	051 Move S9, [X19+28]
	052 Move X0, X31
	053 Move V15, V1
	054 Move V14, V0
	055 Add X20, X8, 100
	056 Call Time.get_deltaTime
	057 Move S7, [X31+104]
	058 Move S6, [X31+108]
	059 Move [X31+16], S0
	060 Move V0, V10
	061 Move V1, V11
	062 Move V2, V12
	063 Move V3, V13
	064 Move V4, V14
	065 Move V5, V15
	066 Move X0, X20
	067 Move [X31+8], S9
	068 Move [X31], S8
	069 Call LeanSmooth.damp, X0, X1, X2, V0, V1, V2
	070 Move X8, [X19+16]
	071 Compare X8, 0
	072 JumpIfEqual {109}
	073 Move X0, [X8+88]
	074 Compare X0, 0
	075 JumpIfEqual {109}
	076 Move X8, 0xF69000
	077 Move X8, [X8+1440]
	078 Move V8, V0
	079 Move V9, V1
	080 Move V10, V2
	081 Move X1, [X8]
	082 Move V11, V3
	083 Call 0x21A4894, X0
	084 Compare X0, 0
	085 JumpIfEqual {109}
	086 Move X1, X31
	087 Call Renderer.get_material, X0
	088 Compare X0, 0
	089 JumpIfEqual {109}
	090 Move V0, V8
	091 Move V1, V9
	092 Move V2, V10
	093 Move V3, V11
	094 Move X20, [X31+112]
	095 Move X19, [X31+120]
	096 Move X30, [X31+96]
	097 Move D9, [X31+80]
	098 Move D8, [X31+88]
	099 Move D11, [X31+64]
	100 Move D10, [X31+72]
	101 Move D13, [X31+48]
	102 Move D12, [X31+56]
	103 Move D15, [X31+32]
	104 Move D14, [X31+40]
	105 Move X1, X31
	106 Add X31, X31, 128
	107 Call Material.set_color, X0, X1
	108 Return 
	109 Call 0x1C17F20

