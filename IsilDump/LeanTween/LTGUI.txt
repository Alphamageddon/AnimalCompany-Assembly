Type: LTGUI

Method: System.Void init()

Disassembly:
	0x031BBEDC STR W31, [X20 + 0x58]
	0x031BBEE0 STR X21, [X20 + 0x80]
	0x031BBEE4 LDR X0, [X8]
	0x031BBEE8 LDR W8, [X0 + 0xE0]
	0x031BBEEC CBNZ W8, 0x31BBEF4
	0x031BBEF0 BL 0x1C16DFC
	0x031BBEF4 MOV X0, X20
	0x031BBEF8 MOV W1, W19
	0x031BBEFC LDP X20, X19, [X31 + 0x20]
	0x031BBF00 LDP X22, X21, [X31 + 0x10]
	0x031BBF04 LDR X30, [X31], #0x30
	0x031BBF08 B 0x31BBAD4
	0x031BBF0C BL 0x1C16F20
	0x031BBF10 STP D11, D10, [X31 - 0x70]!
	0x031BBF14 STP D9, D8, [X31 + 0x10]
	0x031BBF18 STP X30, X27, [X31 + 0x20]
	0x031BBF1C STP X26, X25, [X31 + 0x30]
	0x031BBF20 STP X24, X23, [X31 + 0x40]
	0x031BBF24 STP X22, X21, [X31 + 0x50]
	0x031BBF28 STP X20, X19, [X31 + 0x60]
	0x031BBF2C ADRP X20, 0x1220000
	0x031BBF30 ADRP X21, 0xF64000
	0x031BBF34 LDRB W8, [X20 + 0xEE9]
	0x031BBF38 LDR X21, [X21 + 0x3A0]
	0x031BBF3C MOV W19, W0
	0x031BBF40 MOV V8.16B, V3.16B
	0x031BBF44 MOV V9.16B, V2.16B
	0x031BBF48 MOV V10.16B, V1.16B
	0x031BBF4C MOV V11.16B, V0.16B
	0x031BBF50 TBNZ X8, 0x0, 0x31BBF68
	0x031BBF54 ADRP X0, 0xF64000
	0x031BBF58 LDR X0, [X0 + 0x3A0]
	0x031BBF5C BL 0x1C16CF4
	0x031BBF60 MOVZ W8, 0x1
	0x031BBF64 STRB W8, [X20 + 0xEE9]
	0x031BBF68 LDR X0, [X21]
	0x031BBF6C LDR W8, [X0 + 0xE0]
	0x031BBF70 CBNZ W8, 0x31BBF78
	0x031BBF74 BL 0x1C16DFC
	0x031BBF78 BL 0x31BAFA8
	0x031BBF7C MOV X22, X31
	0x031BBF80 MOV W26, W31
	0x031BBF84 MOVZ W23, 0x1
	0x031BBF88 MOVZ W24, 0x20
	0x031BBF8C MOVN W25, 0x0
	0x031BBF90 LDR X0, [X21]
	0x031BBF94 LDR W8, [X0 + 0xE0]
	0x031BBF98 CBNZ W8, 0x31BBFA4
	0x031BBF9C BL 0x1C16DFC
	0x031BBFA0 LDR X0, [X21]
	0x031BBFA4 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1221000
	005 Move X19, 0xF65000
	006 Move W8, [X20+3806]
	007 Move X19, [X19+928]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xF3A000
	013 Move X0, [X0+3672]
	014 Call 0x1C17CF4
	015 Move X0, 0xF65000
	016 Move X0, [X0+928]
	017 Call 0x1C17CF4
	018 Move X0, 0xF65000
	019 Move X0, [X0+1520]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3806], W8
	023 Move X0, [X19]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X19]
	029 Move X8, [X0+184]
	030 Move X9, [X8+16]
	031 Compare X9, 0
	032 JumpIfNotEqual {57}
	033 Move W9, [X0+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {39}
	036 Call 0x1C17DFC
	037 Move X8, [X19]
	038 Move X8, [X8+184]
	039 Move X10, 0xF65000
	040 Move W9, [X8]
	041 Move W8, [X8+4]
	042 Move X10, [X10+1520]
	043 Multiply W1, W8, W9
	044 Move X0, [X10]
	045 Call 0x1C17D6C
	046 Move X8, [X19]
	047 Move X8, [X8+184]
	048 Move [X8+16], X0
	049 Move W1, [X8]
	050 Move X8, 0xF3A000
	051 Move X8, [X8+3672]
	052 Move X0, [X8]
	053 Call 0x1C17D6C
	054 Move X8, [X19]
	055 Move X8, [X8+184]
	056 Move [X8+24], X0
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Return 

Method: System.Void initRectCheck()

Disassembly:
	0x031BBFA8 LDR X9, [X8 + 0x28]
	0x031BBFAC CBZ X9, 0x31BC1C4
	0x031BBFB0 LDRSW X10, [X9 + 0x18]
	0x031BBFB4 CMP X22, X10
	0x031BBFB8 B.GE 0x31BC1A0
	0x031BBFBC LDR W10, [X0 + 0xE0]
	0x031BBFC0 CBNZ W10, 0x31BBFD8
	0x031BBFC4 BL 0x1C16DFC
	0x031BBFC8 LDR X0, [X21]
	0x031BBFCC LDR X8, [X0 + 0xB8]
	0x031BBFD0 LDR X9, [X8 + 0x28]
	0x031BBFD4 CBZ X9, 0x31BC1C4
	0x031BBFD8 LDR W10, [X9 + 0x18]
	0x031BBFDC CMP X22, X10
	0x031BBFE0 B.CS 0x31BC1C8
	0x031BBFE4 ADD X9, X9, X22, 0x2, LSL
	0x031BBFE8 LDR W9, [X9 + 0x20]
	0x031BBFEC TBNZ X9, 0x1F, 0x31BC0D0
	0x031BBFF0 LDR W9, [X0 + 0xE0]
	0x031BBFF4 CBNZ W9, 0x31BC004
	0x031BBFF8 BL 0x1C16DFC
	0x031BBFFC LDR X8, [X21]
	0x031BC000 LDR X8, [X8 + 0xB8]
	0x031BC004 LDR X8, [X8 + 0x30]
	0x031BC008 CBZ X8, 0x31BC1C4
	0x031BC00C LDR W9, [X8 + 0x18]
	0x031BC010 CMP X22, X9
	0x031BC014 B.CS 0x31BC1C8
	0x031BC018 ADD X8, X8, X22, 0x2, LSL
	0x031BC01C LDR W27, [X8 + 0x20]
	0x031BC020 MOV X0, X31
	0x031BC024 BL 0x3C3C88C
	0x031BC028 LDR X8, [X21]
	0x031BC02C MOV W20, W0
	0x031BC030 LDR W9, [X8 + 0xE0]
	0x031BC034 CBNZ W9, 0x31BC044
	0x031BC038 MOV X0, X8
	0x031BC03C BL 0x1C16DFC
	0x031BC040 LDR X8, [X21]
	0x031BC044 LDR X9, [X8 + 0xB8]
	0x031BC048 LDR X10, [X9 + 0x28]
	0x031BC04C CBZ X10, 0x31BC1C4
	0x031BC050 LDR W11, [X10 + 0x18]
	0x031BC054 ADD W12, W27, 0x1
	0x031BC058 CMP W12, W20
	0x031BC05C B.GE 0x31BC074
	0x031BC060 CMP X22, X11
	0x031BC064 B.CS 0x31BC1C8
	0x031BC068 ADD X8, X10, X22, 0x2, LSL
	0x031BC06C STR W25, [X8 + 0x20]
	0x031BC070 B 0x31BC0D0
	0x031BC074 CMP X22, X11
	0x031BC078 B.CS 0x31BC1C8
	0x031BC07C ADD X10, X10, X22, 0x2, LSL
	0x031BC080 LDR W10, [X10 + 0x20]
	0x031BC084 CMP W10, W19
	0x031BC088 B.LE 0x31BC0D0
	0x031BC08C LDR W10, [X8 + 0xE0]
	0x031BC090 CBNZ W10, 0x31BC0A4
	0x031BC094 MOV X0, X8
	0x031BC098 BL 0x1C16DFC
	0x031BC09C LDR X8, [X21]
	0x031BC0A0 LDR X9, [X8 + 0xB8]
	0x031BC0A4 LDR X8, [X9 + 0x20]
	0x031BC0A8 CBZ X8, 0x31BC1C4
	0x031BC0AC LDR W9, [X8 + 0x18]
	0x031BC0B0 CMP X22, X9
	0x031BC0B4 B.CS 0x31BC1C8
	0x031BC0B8 ADD X8, X8, X24
	0x031BC0BC LDP S0, S1, [X8]
	0x031BC0C0 LDP S2, S3, [X8 + 0x8]
	0x031BC0C4 BL 0x31BC1CC
	0x031BC0C8 EOR W8, W0, 0x1
	0x031BC0CC AND W23, W23, W8, 0x0
	0x031BC0D0 TBNZ X26, 0x0, 0x31BC190
	0x031BC0D4 LDR X0, [X21]
	0x031BC0D8 LDR W8, [X0 + 0xE0]
	0x031BC0DC CBNZ W8, 0x31BC0E8
	0x031BC0E0 BL 0x1C16DFC
	0x031BC0E4 LDR X0, [X21]
	0x031BC0E8 LDR X8, [X0 + 0xB8]
	0x031BC0EC LDR X9, [X8 + 0x28]
	0x031BC0F0 CBZ X9, 0x31BC1C4
	0x031BC0F4 LDR W10, [X9 + 0x18]
	0x031BC0F8 CMP X22, X10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1221000
	006 Move X19, 0xF65000
	007 Move W8, [X20+3807]
	008 Move X19, [X19+928]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xF3A000
	014 Move X0, [X0+3672]
	015 Call 0x1C17CF4
	016 Move X0, 0xF65000
	017 Move X0, [X0+928]
	018 Call 0x1C17CF4
	019 Move X0, 0xF65000
	020 Move X0, [X0+1528]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3807], W8
	024 Move X0, [X19]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X19]
	030 Move X8, [X0+184]
	031 Move X9, [X8+32]
	032 Compare X9, 0
	033 JumpIfEqual {39}
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Move W9, [X0+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {45}
	042 Call 0x1C17DFC
	043 Move X8, [X19]
	044 Move X8, [X8+184]
	045 Move W1, [X8+8]
	046 Move X8, 0xF64000
	047 Move X8, [X8+1528]
	048 Move X0, [X8]
	049 Call 0x1C17D6C
	050 Move X8, [X19]
	051 Move X20, 0xF39000
	052 Move X8, [X8+184]
	053 Move [X8+32], X0
	054 Move W1, [X8+8]
	055 Move X20, [X20+3672]
	056 Move X0, [X20]
	057 Call 0x1C17D6C
	058 Move X8, [X19]
	059 Move X8, [X8+184]
	060 Move [X8+40], X0
	061 Move W1, [X8+8]
	062 Move X0, [X20]
	063 Call 0x1C17D6C
	064 Move X8, X0
	065 Move X0, [X19]
	066 Move X20, X31
	067 Move TEMP, 0
	068 Not TEMP
	069 Move W21, TEMP
	070 Move X9, [X0+184]
	071 Move [X9+48], X8
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {77}
	075 Call 0x1C17DFC
	076 Move X0, [X19]
	077 Move X8, [X0+184]
	078 Move X8, [X8+40]
	079 Compare X8, 0
	080 JumpIfEqual {97}
	081 NotImplemented "Instruction LDRSW not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {88}
	086 Call 0x1C17DFC
	087 Move X0, [X19]
	088 Move X8, [X0+184]
	089 Move X8, [X8+40]
	090 Compare X8, 0
	091 JumpIfEqual {97}
	092 Move W9, [X8+24]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add X8, X8, X20
	095 Add X20, X20, 1
	096 Move [X8+32], W21
	097 Call 0x1C17F20
	098 Call 0x1C17F28

Method: System.Void reset()

Disassembly:
	0x031AD674 STP X20, X19, [X31 + 0x10]
	0x031AD678 ADRP X20, 0x122E000
	0x031AD67C ADRP X21, 0xF48000
	0x031AD680 LDRB W8, [X20 + 0xE5D]
	0x031AD684 LDR X21, [X21 + 0x5A8]
	0x031AD688 MOV W19, W0
	0x031AD68C TBNZ X8, 0x0, 0x31AD6A4
	0x031AD690 ADRP X0, 0xF48000
	0x031AD694 LDR X0, [X0 + 0x5A8]
	0x031AD698 BL 0x1C16CF4
	0x031AD69C MOVZ W8, 0x1
	0x031AD6A0 STRB W8, [X20 + 0xE5D]
	0x031AD6A4 LDR X0, [X21]
	0x031AD6A8 LDR W8, [X0 + 0xE0]
	0x031AD6AC CBNZ W8, 0x31AD6B4
	0x031AD6B0 BL 0x1C16DFC
	0x031AD6B4 MOV W0, W19
	0x031AD6B8 LDP X20, X19, [X31 + 0x10]
	0x031AD6BC MOV W1, W31
	0x031AD6C0 LDP X30, X21, [X31], #0x20
	0x031AD6C4 B 0x31AD6C8
	0x031AD6C8 STP X30, X23, [X31 - 0x30]!
	0x031AD6CC STP X22, X21, [X31 + 0x10]
	0x031AD6D0 STP X20, X19, [X31 + 0x20]
	0x031AD6D4 ADRP X19, 0x122E000
	0x031AD6D8 LDRB W8, [X19 + 0xE5E]
	0x031AD6DC MOV W20, W1
	0x031AD6E0 MOV W21, W0
	0x031AD6E4 TBNZ X8, 0x0, 0x31AD6FC
	0x031AD6E8 ADRP X0, 0xF48000
	0x031AD6EC LDR X0, [X0 + 0x5A8]
	0x031AD6F0 BL 0x1C16CF4
	0x031AD6F4 MOVZ W8, 0x1
	0x031AD6F8 STRB W8, [X19 + 0xE5E]
	0x031AD6FC TBNZ X21, 0x1F, 0x31AD8EC
	0x031AD700 ADRP X22, 0xF48000
	0x031AD704 LDR X22, [X22 + 0x5A8]
	0x031AD708 LDR X0, [X22]
	0x031AD70C LDR W8, [X0 + 0xE0]
	0x031AD710 CBNZ W8, 0x31AD718
	0x031AD714 BL 0x1C16DFC
	0x031AD718 BL 0x31AB9B0
	0x031AD71C LDR X0, [X22]
	0x031AD720 LDR X9, [X0 + 0xB8]
	0x031AD724 LDR X8, [X9 + 0x18]
	0x031AD728 CBZ X8, 0x31AD8FC
	0x031AD72C LDR W10, [X0 + 0xE0]
	0x031AD730 LDR W23, [X8 + 0x18]
	0x031AD734 CBNZ W10, 0x31AD74C
	0x031AD738 BL 0x1C16DFC
	0x031AD73C LDR X0, [X22]
	0x031AD740 LDR X9, [X0 + 0xB8]
	0x031AD744 LDR X8, [X9 + 0x18]
	0x031AD748 CBZ X8, 0x31AD8FC
	0x031AD74C AND W19, W21, 0xFFFF
	0x031AD750 SUB W10, W23, 0x1
	0x031AD754 CMP W19, W10
	0x031AD758 B.LE 0x31AD800
	0x031AD75C LDR X9, [X9 + 0x10]
	0x031AD760 CBZ X9, 0x31AD8FC
	0x031AD764 LDR W8, [X8 + 0x18]
	0x031AD768 LDR W10, [X9 + 0x18]
	0x031AD76C SUB W8, W19, W8
	0x031AD770 CMP W8, W10
	0x031AD774 B.CS 0x31AD900
	0x031AD778 ADD X8, X9, W8, 0x3, SXTW
	0x031AD77C LDR X20, [X8 + 0x20]
	0x031AD780 MOV W21, W31
	0x031AD784 LDR W8, [X0 + 0xE0]
	0x031AD788 CBNZ W8, 0x31AD794
	0x031AD78C BL 0x1C16DFC
	0x031AD790 LDR X0, [X22]
	0x031AD794 LDR X8, [X0 + 0xB8]
	0x031AD798 LDR W8, [X8 + 0x40]
	0x031AD79C CMP W21, W8
	0x031AD7A0 B.GE 0x31AD8EC
	0x031AD7A4 CBZ X20, 0x31AD8FC
	0x031AD7A8 LDR X8, [X20 + 0x18]
	0x031AD7AC CBZ X8, 0x31AD8FC
	0x031AD7B0 LDR X0, [X8 + 0x20]
	0x031AD7B4 CBZ X0, 0x31AD7E8
	0x031AD7B8 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122F000
	005 Move X19, 0xF73000
	006 Move W8, [X20+3808]
	007 Move X19, [X19+928]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF73000
	013 Move X0, [X0+928]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3808], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move W9, [X8+80]
	025 Compare W9, 0
	026 JumpIfEqual {87}
	027 Move W9, [X0+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {33}
	030 Call 0x1C17DFC
	031 Move X0, [X19]
	032 Move X8, [X0+184]
	033 Move X20, X31
	034 Move [X8+80], W31
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X19]
	040 Move X8, [X0+184]
	041 Move X8, [X8+16]
	042 Compare X8, 0
	043 JumpIfEqual {91}
	044 NotImplemented "Instruction LDRSW not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W9, [X0+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {55}
	049 Call 0x1C17DFC
	050 Move X8, [X19]
	051 Move X8, [X8+184]
	052 Move X8, [X8+16]
	053 Compare X8, 0
	054 JumpIfEqual {91}
	055 Move W9, [X8+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Add X8, X8, X20
	058 Move [X8+32], X31
	059 Move X0, [X19]
	060 Add X20, X20, 1
	061 Move X20, X31
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {67}
	065 Call 0x1C17DFC
	066 Move X0, [X19]
	067 Move X8, [X0+184]
	068 Move X8, [X8+24]
	069 Compare X8, 0
	070 JumpIfEqual {91}
	071 NotImplemented "Instruction LDRSW not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {78}
	076 Call 0x1C17DFC
	077 Move X0, [X19]
	078 Move X8, [X0+184]
	079 Move X8, [X8+24]
	080 Compare X8, 0
	081 JumpIfEqual {91}
	082 Move W9, [X8+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add X8, X8, X20
	085 Add X20, X20, 1
	086 Move [X8+32], W31
	087 Move X20, [X31+16]
	088 Move X19, [X31+24]
	089 Move X30, [X31+32]
	090 Return 
	091 Call 0x1C17F20
	092 Call 0x1C17F28

Method: System.Void update(System.Int32 updateLevel)

Disassembly:
	0x031BC0FC B.CS 0x31BC1C8
	0x031BC100 ADD X10, X9, X22, 0x2, LSL
	0x031BC104 LDR W10, [X10 + 0x20]
	0x031BC108 TBNZ X10, 0x1F, 0x31BC114
	0x031BC10C MOV W26, W31
	0x031BC110 B 0x31BC194
	0x031BC114 LDR W10, [X0 + 0xE0]
	0x031BC118 CBNZ W10, 0x31BC130
	0x031BC11C BL 0x1C16DFC
	0x031BC120 LDR X8, [X21]
	0x031BC124 LDR X8, [X8 + 0xB8]
	0x031BC128 LDR X9, [X8 + 0x28]
	0x031BC12C CBZ X9, 0x31BC1C4
	0x031BC130 LDR W10, [X9 + 0x18]
	0x031BC134 CMP X22, X10
	0x031BC138 B.CS 0x31BC1C8
	0x031BC13C ADD X9, X9, X22, 0x2, LSL
	0x031BC140 STR W19, [X9 + 0x20]
	0x031BC144 LDR X8, [X8 + 0x20]
	0x031BC148 CBZ X8, 0x31BC1C4
	0x031BC14C LDR W9, [X8 + 0x18]
	0x031BC150 CMP X22, X9
	0x031BC154 B.CS 0x31BC1C8
	0x031BC158 ADD X8, X8, X24
	0x031BC15C STP S11, S10, [X8]
	0x031BC160 STP S9, S8, [X8 + 0x8]
	0x031BC164 LDR X8, [X21]
	0x031BC168 MOV X0, X31
	0x031BC16C LDR X8, [X8 + 0xB8]
	0x031BC170 LDR X20, [X8 + 0x30]
	0x031BC174 BL 0x3C3C88C
	0x031BC178 CBZ X20, 0x31BC1C4
	0x031BC17C LDR W8, [X20 + 0x18]
	0x031BC180 CMP X22, X8
	0x031BC184 B.CS 0x31BC1C8
	0x031BC188 ADD X8, X20, X22, 0x2, LSL
	0x031BC18C STR W0, [X8 + 0x20]
	0x031BC190 MOVZ W26, 0x1
	0x031BC194 ADD X22, X22, 0x1
	0x031BC198 ADD X24, X24, 0x10
	0x031BC19C B 0x31BBF90
	0x031BC1A0 AND W0, W23, 0x1
	0x031BC1A4 LDP X20, X19, [X31 + 0x60]
	0x031BC1A8 LDP X22, X21, [X31 + 0x50]
	0x031BC1AC LDP X24, X23, [X31 + 0x40]
	0x031BC1B0 LDP X26, X25, [X31 + 0x30]
	0x031BC1B4 LDP X30, X27, [X31 + 0x20]
	0x031BC1B8 LDP D9, D8, [X31 + 0x10]
	0x031BC1BC LDP D11, D10, [X31], #0x70
	0x031BC1C0 RET
	0x031BC1C4 BL 0x1C16F20
	0x031BC1C8 BL 0x1C16F28
	0x031BC1CC STP D13, D12, [X31 - 0x50]!
	0x031BC1D0 STP D11, D10, [X31 + 0x10]
	0x031BC1D4 STP D9, D8, [X31 + 0x20]
	0x031BC1D8 STR X30, [X31 + 0x30]
	0x031BC1DC STP X20, X19, [X31 + 0x40]
	0x031BC1E0 ADRP X19, 0x121F000
	0x031BC1E4 ADRP X20, 0xF63000
	0x031BC1E8 LDRB W8, [X19 + 0xEEA]
	0x031BC1EC LDR X20, [X20 + 0x3A0]
	0x031BC1F0 MOV V8.16B, V3.16B
	0x031BC1F4 MOV V10.16B, V2.16B
	0x031BC1F8 MOV V9.16B, V1.16B
	0x031BC1FC MOV V11.16B, V0.16B
	0x031BC200 TBNZ X8, 0x0, 0x31BC218
	0x031BC204 ADRP X0, 0xF63000
	0x031BC208 LDR X0, [X0 + 0x3A0]
	0x031BC20C BL 0x1C16CF4
	0x031BC210 MOVZ W8, 0x1
	0x031BC214 STRB W8, [X19 + 0xEEA]
	0x031BC218 LDR X0, [X20]
	0x031BC21C LDR W8, [X0 + 0xE0]
	0x031BC220 CBNZ W8, 0x31BC228
	0x031BC224 BL 0x1C16DFC
	0x031BC228 BL 0x31BC29C
	0x031BC22C FCMP S0, 0x0
	0x031BC230 B.MI 0x31BC280
	0x031BC234 MOV X0, X31
	0x031BC238 MOV V13.16B, V0.16B
	0x031BC23C MOV V12.16B, V1.16B
	0x031BC240 BL 0x3C0E0D8
	0x031BC244 MOV W8, W0
	0x031BC248 FCMP S13, S11
	0x031BC24C MOV W0, W31
	0x031BC250 B.LE 0x31BC284
	0x031BC254 FADD S0, S11, S10
	0x031BC258 FCMP S13, S0
	0x031BC25C B.PL 0x31BC284
	0x031BC260 SCVTF S0, W8
	0x031BC264 FSUB S0, S0, S12
	0x031BC268 FCMP S0, S9
	0x031BC26C B.LE 0x31BC284
	0x031BC270 FADD S1, S9, S8
	0x031BC274 FCMP S0, S1
	0x031BC278 CSET W0, MI
	0x031BC27C B 0x31BC284
	0x031BC280 MOV W0, W31
	0x031BC284 LDP X20, X19, [X31 + 0x40]
	0x031BC288 LDR X30, [X31 + 0x30]
	0x031BC28C LDP D9, D8, [X31 + 0x20]
	0x031BC290 LDP D11, D10, [X31 + 0x10]
	0x031BC294 LDP D13, D12, [X31], #0x50
	0x031BC298 RET
	0x031BC29C STR X30, [X31 - 0x10]!
	0x031BC2A0 MOV X0, X31
	0x031BC2A4 BL 0x3C85040
	0x031BC2A8 CMP W0, 0x1
	0x031BC2AC B.LT 0x31BC2D4
	0x031BC2B0 MOV X0, X31
	0x031BC2B4 BL 0x3C85090
	0x031BC2B8 CBZ X0, 0x31BC304
	0x031BC2BC LDR W8, [X0 + 0x18]
	0x031BC2C0 CBZ W8, 0x31BC308
	0x031BC2C4 ADD X0, X0, 0x20
	0x031BC2C8 MOV X1, X31
	0x031BC2CC BL 0x3C845B0
	0x031BC2D0 B 0x31BC2FC
	0x031BC2D4 MOV W0, W31
	0x031BC2D8 MOV X1, X31
	0x031BC2DC BL 0x3C84A54
	0x031BC2E0 TBZ X0, 0x0, 0x31BC2F0
	0x031BC2E4 MOV X0, X31
	0x031BC2E8 BL 0x3C84D88
	0x031BC2EC B 0x31BC2FC
	0x031BC2F0 MOVZ W8, 0xFF800000
	0x031BC2F4 FMOV S1, W8
	0x031BC2F8 MOV V0.16B, V1.16B
	0x031BC2FC LDR X30, [X31], #0x10
	0x031BC300 RET
	0x031BC304 BL 0x1C16F20
	0x031BC308 BL 0x1C16F28
	0x031BC30C STP D13, D12, [X31 - 0x40]!
	0x031BC310 STP D11, D10, [X31 + 0x10]
	0x031BC314 STP D9, D8, [X31 + 0x20]
	0x031BC318 STR X30, [X31 + 0x30]
	0x031BC31C MOV X0, X31
	0x031BC320 MOV V8.16B, V5.16B
	0x031BC324 MOV V11.16B, V4.16B
	0x031BC328 MOV V9.16B, V3.16B
	0x031BC32C MOV V12.16B, V2.16B
	0x031BC330 MOV V10.16B, V1.16B
	0x031BC334 MOV V13.16B, V0.16B
	0x031BC338 BL 0x3C0E0D8
	0x031BC33C MOV W8, W0
	0x031BC340 FCMP S13, S12
	0x031BC344 MOV W0, W31
	0x031BC348 B.LE 0x31BC374
	0x031BC34C FADD S0, S12, S11
	0x031BC350 FCMP S13, S0
	0x031BC354 B.PL 0x31BC374
	0x031BC358 SCVTF S0, W8
	0x031BC35C FSUB S0, S0, S10
	0x031BC360 FCMP S0, S9
	0x031BC364 B.LE 0x31BC374
	0x031BC368 FADD S1, S9, S8
	0x031BC36C FCMP S0, S1
	0x031BC370 CSET W0, MI
	0x031BC374 LDR X30, [X31 + 0x30]
	0x031BC378 LDP D9, D8, [X31 + 0x20]
	0x031BC37C LDP D11, D10, [X31 + 0x10]
	0x031BC380 LDP D13, D12, [X31], #0x40
	0x031BC384 RET
	0x031BC388 MOV X1, X31
	0x031BC38C B 0x33BDD8C
	0x031BC390 STR X30, [X31 - 0x20]!
	0x031BC394 STP X20, X19, [X31 + 0x10]
	0x031BC398 ADRP X19, 0x121F000
	0x031BC39C ADRP X20, 0xF63000
	0x031BC3A0 LDRB W8, [X19 + 0xEEB]
	0x031BC3A4 LDR X20, [X20 + 0x3A0]
	0x031BC3A8 TBNZ X8, 0x0, 0x31BC3C0
	0x031BC3AC ADRP X0, 0xF63000
	0x031BC3B0 LDR X0, [X0 + 0x3A0]
	0x031BC3B4 BL 0x1C16CF4
	0x031BC3B8 MOVZ W8, 0x1
	0x031BC3BC STRB W8, [X19 + 0xEEB]
	0x031BC3C0 LDR X8, [X20]
	0x031BC3C4 ADRP X9, 0xFFFFFFFFFD931000
	0x031BC3C8 LDR V0, [X9 + 0xCB0]
	0x031BC3CC MOVZ W10, 0x18
	0x031BC3D0 LDR X9, [X8 + 0xB8]
	0x031BC3D4 FMOV V1.4S, 0x0
	0x031BC3D8 LDP X20, X19, [X31 + 0x10]
	0x031BC3DC STR D0, [X9]
	0x031BC3E0 STR W10, [X9 + 0x8]
	0x031BC3E4 STR V1, [X9 + 0x4]
	0x031BC3E8 LDR X8, [X8 + 0xB8]
	0x031BC3EC STRB W31, [X8 + 0x50]
	0x031BC3F0 STR W31, [X8 + 0x54]
	0x031BC3F4 LDR X30, [X31], #0x20
	0x031BC3F8 RET
	0x031BC3FC STP D9, D8, [X31 - 0x30]!
	0x031BC400 STP X30, X21, [X31 + 0x10]
	0x031BC404 STP X20, X19, [X31 + 0x20]
	0x031BC408 ADRP X20, 0x121F000
	0x031BC40C ADRP X21, 0xF39000
	0x031BC410 LDRB W8, [X20 + 0xEEC]
	0x031BC414 LDR X21, [X21 + 0x5A8]
	0x031BC418 MOV V8.16B, V1.16B
	0x031BC41C MOV V9.16B, V0.16B
	0x031BC420 MOV X19, X0
	0x031BC424 TBNZ X8, 0x0, 0x31BC43C
	0x031BC428 ADRP X0, 0xF39000
	0x031BC42C LDR X0, [X0 + 0x5A8]
	0x031BC430 BL 0x1C16CF4
	0x031BC434 MOVZ W8, 0x1
	0x031BC438 STRB W8, [X20 + 0xEEC]
	0x031BC43C LDR X0, [X21]
	0x031BC440 LDR W8, [X0 + 0xE0]
	0x031BC444 CBNZ W8, 0x31BC44C
	0x031BC448 BL 0x1C16DFC
	0x031BC44C MOV X0, X19
	0x031BC450 LDP X20, X19, [X31 + 0x20]
	0x031BC454 LDP X30, X21, [X31 + 0x10]
	0x031BC458 MOV V0.16B, V9.16B
	0x031BC45C MOV V1.16B, V8.16B
	0x031BC460 MOV X1, X31
	0x031BC464 LDP D9, D8, [X31], #0x30
	0x031BC468 B 0x31AFC3C
	0x031BC46C STP D9, D8, [X31 - 0x30]!
	0x031BC470 STP X30, X21, [X31 + 0x10]
	0x031BC474 STP X20, X19, [X31 + 0x20]
	0x031BC478 ADRP X20, 0x121F000
	0x031BC47C ADRP X21, 0xF39000
	0x031BC480 LDRB W8, [X20 + 0xEED]
	0x031BC484 LDR X21, [X21 + 0x5A8]
	0x031BC488 MOV V8.16B, V1.16B
	0x031BC48C MOV V9.16B, V0.16B
	0x031BC490 MOV X19, X0
	0x031BC494 TBNZ X8, 0x0, 0x31BC4AC
	0x031BC498 ADRP X0, 0xF39000
	0x031BC49C LDR X0, [X0 + 0x5A8]
	0x031BC4A0 BL 0x1C16CF4
	0x031BC4A4 MOVZ W8, 0x1
	0x031BC4A8 STRB W8, [X20 + 0xEED]
	0x031BC4AC LDR X0, [X21]
	0x031BC4B0 LDR W8, [X0 + 0xE0]
	0x031BC4B4 CBNZ W8, 0x31BC4BC
	0x031BC4B8 BL 0x1C16DFC
	0x031BC4BC MOV X0, X19
	0x031BC4C0 LDP X20, X19, [X31 + 0x20]
	0x031BC4C4 LDP X30, X21, [X31 + 0x10]
	0x031BC4C8 MOV V0.16B, V9.16B
	0x031BC4CC MOV V1.16B, V8.16B
	0x031BC4D0 MOV X1, X31
	0x031BC4D4 LDP D9, D8, [X31], #0x30
	0x031BC4D8 B 0x31AFF9C
	0x031BC4DC STP D9, D8, [X31 - 0x30]!
	0x031BC4E0 STP X30, X21, [X31 + 0x10]
	0x031BC4E4 STP X20, X19, [X31 + 0x20]
	0x031BC4E8 ADRP X20, 0x121F000
	0x031BC4EC ADRP X21, 0xF39000
	0x031BC4F0 LDRB W8, [X20 + 0xEEE]
	0x031BC4F4 LDR X21, [X21 + 0x5A8]
	0x031BC4F8 MOV V8.16B, V1.16B
	0x031BC4FC MOV V9.16B, V0.16B
	0x031BC500 MOV X19, X0
	0x031BC504 TBNZ X8, 0x0, 0x31BC51C
	0x031BC508 ADRP X0, 0xF39000
	0x031BC50C LDR X0, [X0 + 0x5A8]
	0x031BC510 BL 0x1C16CF4
	0x031BC514 MOVZ W8, 0x1
	0x031BC518 STRB W8, [X20 + 0xEEE]
	0x031BC51C LDR X0, [X21]
	0x031BC520 LDR W8, [X0 + 0xE0]
	0x031BC524 CBNZ W8, 0x31BC52C
	0x031BC528 BL 0x1C16DFC
	0x031BC52C MOV X0, X19
	0x031BC530 LDP X20, X19, [X31 + 0x20]
	0x031BC534 LDP X30, X21, [X31 + 0x10]
	0x031BC538 MOV V0.16B, V9.16B
	0x031BC53C MOV V1.16B, V8.16B
	0x031BC540 MOV X1, X31
	0x031BC544 LDP D9, D8, [X31], #0x30
	0x031BC548 B 0x31B37A4
	0x031BC54C STP D9, D8, [X31 - 0x30]!
	0x031BC550 STP X30, X21, [X31 + 0x10]
	0x031BC554 STP X20, X19, [X31 + 0x20]
	0x031BC558 ADRP X20, 0x121F000
	0x031BC55C ADRP X21, 0xF39000
	0x031BC560 LDRB W8, [X20 + 0xEEF]
	0x031BC564 LDR X21, [X21 + 0x5A8]
	0x031BC568 MOV V8.16B, V1.16B
	0x031BC56C MOV V9.16B, V0.16B
	0x031BC570 MOV X19, X0
	0x031BC574 TBNZ X8, 0x0, 0x31BC58C
	0x031BC578 ADRP X0, 0xF39000
	0x031BC57C LDR X0, [X0 + 0x5A8]
	0x031BC580 BL 0x1C16CF4
	0x031BC584 MOVZ W8, 0x1
	0x031BC588 STRB W8, [X20 + 0xEEF]
	0x031BC58C LDR X0, [X21]
	0x031BC590 LDR W8, [X0 + 0xE0]
	0x031BC594 CBNZ W8, 0x31BC59C
	0x031BC598 BL 0x1C16DFC
	0x031BC59C MOV X0, X19
	0x031BC5A0 LDP X20, X19, [X31 + 0x20]
	0x031BC5A4 LDP X30, X21, [X31 + 0x10]
	0x031BC5A8 MOV V0.16B, V9.16B
	0x031BC5AC MOV V1.16B, V8.16B
	0x031BC5B0 MOV X1, X31
	0x031BC5B4 LDP D9, D8, [X31], #0x30
	0x031BC5B8 B 0x31AFEF8
	0x031BC5BC STP D9, D8, [X31 - 0x30]!
	0x031BC5C0 STP X30, X21, [X31 + 0x10]
	0x031BC5C4 STP X20, X19, [X31 + 0x20]
	0x031BC5C8 ADRP X20, 0x121F000
	0x031BC5CC ADRP X21, 0xF39000
	0x031BC5D0 LDRB W8, [X20 + 0xEF0]
	0x031BC5D4 LDR X21, [X21 + 0x5A8]
	0x031BC5D8 MOV V8.16B, V1.16B
	0x031BC5DC MOV V9.16B, V0.16B
	0x031BC5E0 MOV X19, X0
	0x031BC5E4 TBNZ X8, 0x0, 0x31BC5FC
	0x031BC5E8 ADRP X0, 0xF39000
	0x031BC5EC LDR X0, [X0 + 0x5A8]
	0x031BC5F0 BL 0x1C16CF4
	0x031BC5F4 MOVZ W8, 0x1
	0x031BC5F8 STRB W8, [X20 + 0xEF0]
	0x031BC5FC LDR X0, [X21]
	0x031BC600 LDR W8, [X0 + 0xE0]
	0x031BC604 CBNZ W8, 0x31BC60C
	0x031BC608 BL 0x1C16DFC
	0x031BC60C MOV X0, X19
	0x031BC610 LDP X20, X19, [X31 + 0x20]
	0x031BC614 LDP X30, X21, [X31 + 0x10]
	0x031BC618 MOV V0.16B, V9.16B
	0x031BC61C MOV V1.16B, V8.16B
	0x031BC620 MOV X1, X31
	0x031BC624 LDP D9, D8, [X31], #0x30
	0x031BC628 B 0x31AFE54
	0x031BC62C STP X30, X21, [X31 - 0x20]!
	0x031BC630 STP X20, X19, [X31 + 0x10]
	0x031BC634 ADRP X20, 0x121F000
	0x031BC638 ADRP X21, 0xF39000
	0x031BC63C LDRB W8, [X20 + 0xEF1]
	0x031BC640 LDR X21, [X21 + 0x5A8]
	0x031BC644 MOV X19, X0
	0x031BC648 TBNZ X8, 0x0, 0x31BC660
	0x031BC64C ADRP X0, 0xF39000
	0x031BC650 LDR X0, [X0 + 0x5A8]
	0x031BC654 BL 0x1C16CF4
	0x031BC658 MOVZ W8, 0x1
	0x031BC65C STRB W8, [X20 + 0xEF1]
	0x031BC660 LDR X0, [X21]
	0x031BC664 LDR W8, [X0 + 0xE0]
	0x031BC668 CBNZ W8, 0x31BC670
	0x031BC66C BL 0x1C16DFC
	0x031BC670 MOV X0, X19
	0x031BC674 LDP X20, X19, [X31 + 0x10]
	0x031BC678 MOV X1, X31
	0x031BC67C LDP X30, X21, [X31], #0x20
	0x031BC680 B 0x31AD0B4
	0x031BC684 STR X30, [X31 - 0x30]!
	0x031BC688 STP X22, X21, [X31 + 0x10]
	0x031BC68C STP X20, X19, [X31 + 0x20]
	0x031BC690 ADRP X21, 0x121F000
	0x031BC694 ADRP X22, 0xF39000
	0x031BC698 LDRB W8, [X21 + 0xEF2]
	0x031BC69C LDR X22, [X22 + 0x5A8]
	0x031BC6A0 MOV W20, W1
	0x031BC6A4 MOV X19, X0
	0x031BC6A8 TBNZ X8, 0x0, 0x31BC6C0
	0x031BC6AC ADRP X0, 0xF39000
	0x031BC6B0 LDR X0, [X0 + 0x5A8]
	0x031BC6B4 BL 0x1C16CF4
	0x031BC6B8 MOVZ W8, 0x1
	0x031BC6BC STRB W8, [X21 + 0xEF2]
	0x031BC6C0 LDR X0, [X22]
	0x031BC6C4 LDR W8, [X0 + 0xE0]
	0x031BC6C8 CBNZ W8, 0x31BC6D0
	0x031BC6CC BL 0x1C16DFC
	0x031BC6D0 AND W1, W20, 0x1
	0x031BC6D4 MOV X0, X19
	0x031BC6D8 LDP X20, X19, [X31 + 0x20]
	0x031BC6DC LDP X22, X21, [X31 + 0x10]
	0x031BC6E0 MOV X2, X31
	0x031BC6E4 LDR X30, [X31], #0x30
	0x031BC6E8 B 0x31AD10C
	0x031BC6EC STP X30, X23, [X31 - 0x30]!
	0x031BC6F0 STP X22, X21, [X31 + 0x10]
	0x031BC6F4 STP X20, X19, [X31 + 0x20]
	0x031BC6F8 ADRP X22, 0x121F000
	0x031BC6FC ADRP X23, 0xF39000
	0x031BC700 LDRB W8, [X22 + 0xEF3]
	0x031BC704 LDR X23, [X23 + 0x5A8]
	0x031BC708 MOV W21, W2
	0x031BC70C MOV W19, W1
	0x031BC710 MOV X20, X0
	0x031BC714 TBNZ X8, 0x0, 0x31BC72C
	0x031BC718 ADRP X0, 0xF39000
	0x031BC71C LDR X0, [X0 + 0x5A8]
	0x031BC720 BL 0x1C16CF4
	0x031BC724 MOVZ W8, 0x1
	0x031BC728 STRB W8, [X22 + 0xEF3]
	0x031BC72C LDR X0, [X23]
	0x031BC730 LDR W8, [X0 + 0xE0]
	0x031BC734 CBNZ W8, 0x31BC73C
	0x031BC738 BL 0x1C16DFC
	0x031BC73C AND W2, W21, 0x1
	0x031BC740 MOV X0, X20
	0x031BC744 MOV W1, W19
	0x031BC748 LDP X20, X19, [X31 + 0x20]
	0x031BC74C LDP X22, X21, [X31 + 0x10]
	0x031BC750 MOV X3, X31
	0x031BC754 LDP X30, X23, [X31], #0x30
	0x031BC758 B 0x31AD2E8
	0x031BC75C STP X30, X21, [X31 - 0x20]!
	0x031BC760 STP X20, X19, [X31 + 0x10]
	0x031BC764 ADRP X20, 0x121F000
	0x031BC768 ADRP X21, 0xF39000
	0x031BC76C LDRB W8, [X20 + 0xEF4]
	0x031BC770 LDR X21, [X21 + 0x5A8]
	0x031BC774 MOV X19, X0
	0x031BC778 TBNZ X8, 0x0, 0x31BC790
	0x031BC77C ADRP X0, 0xF39000
	0x031BC780 LDR X0, [X0 + 0x5A8]
	0x031BC784 BL 0x1C16CF4
	0x031BC788 MOVZ W8, 0x1
	0x031BC78C STRB W8, [X20 + 0xEF4]
	0x031BC790 LDR X0, [X21]
	0x031BC794 LDR W8, [X0 + 0xE0]
	0x031BC798 CBNZ W8, 0x31BC7A0
	0x031BC79C BL 0x1C16DFC
	0x031BC7A0 MOV X0, X19
	0x031BC7A4 LDP X20, X19, [X31 + 0x10]
	0x031BC7A8 MOV X1, X31
	0x031BC7AC LDP X30, X21, [X31], #0x20
	0x031BC7B0 B 0x31AD274
	0x031BC7B4 STR D12, [X31 - 0x50]!
	0x031BC7B8 STP D11, D10, [X31 + 0x10]
	0x031BC7BC STP D9, D8, [X31 + 0x20]
	0x031BC7C0 STP X30, X21, [X31 + 0x30]
	0x031BC7C4 STP X20, X19, [X31 + 0x40]
	0x031BC7C8 ADRP X21, 0x121F000
	0x031BC7CC ADRP X20, 0xF39000
	0x031BC7D0 LDRB W8, [X21 + 0xEF5]
	0x031BC7D4 LDR X20, [X20 + 0x5A8]
	0x031BC7D8 MOV V8.16B, V4.16B
	0x031BC7DC MOV V9.16B, V3.16B
	0x031BC7E0 MOV V10.16B, V2.16B
	0x031BC7E4 MOV V11.16B, V1.16B
	0x031BC7E8 MOV V12.16B, V0.16B
	0x031BC7EC MOV X19, X0
	0x031BC7F0 TBNZ X8, 0x0, 0x31BC808
	0x031BC7F4 ADRP X0, 0xF39000
	0x031BC7F8 LDR X0, [X0 + 0x5A8]
	0x031BC7FC BL 0x1C16CF4
	0x031BC800 MOVZ W8, 0x1
	0x031BC804 STRB W8, [X21 + 0xEF5]
	0x031BC808 LDR X0, [X20]
	0x031BC80C LDR W8, [X0 + 0xE0]
	0x031BC810 CBNZ W8, 0x31BC818
	0x031BC814 BL 0x1C16DFC
	0x031BC818 MOV X0, X19
	0x031BC81C MOV V1.16B, V11.16B
	0x031BC820 MOV V2.16B, V10.16B
	0x031BC824 MOV V3.16B, V9.16B
	0x031BC828 MOV V4.16B, V8.16B
	0x031BC82C LDP X20, X19, [X31 + 0x40]
	0x031BC830 LDP X30, X21, [X31 + 0x30]
	0x031BC834 LDP D9, D8, [X31 + 0x20]
	0x031BC838 LDP D11, D10, [X31 + 0x10]
	0x031BC83C MOV V0.16B, V12.16B
	0x031BC840 MOV X1, X31
	0x031BC844 LDR V12, [X31], #0x50

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Move X21, 0x1220000
	019 Move X20, 0xF64000
	020 Move W8, [X21+3809]
	021 Move X20, [X20+928]
	022 Move W19, W0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {38}
	027 Move X0, 0xF5F000
	028 Move X0, [X0+1216]
	029 Call 0x1C17CF4
	030 Move X0, 0xF64000
	031 Move X0, [X0+928]
	032 Call 0x1C17CF4
	033 Move X0, 0xF38000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+3809], W8
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {44}
	042 Call 0x1C17DFC
	043 Move X0, [X20]
	044 Move X8, [X0+184]
	045 Move W8, [X8+80]
	046 Compare W8, 0
	047 JumpIfEqual {515}
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Call LTGUI.init
	053 Move X8, [X20]
	054 Move X8, [X8+184]
	055 Move X8, [X8+24]
	056 Compare X8, 0
	057 JumpIfEqual {566}
	058 Move W9, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X22, W19
	061 Add X8, X8, X22
	062 Move W8, [X8+32]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X21, 0xF5F000
	065 Move X21, [X21+1216]
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X31
	072 Call GUI.get_color
	073 Move X0, [X20]
	074 Move V8, V0
	075 Move V9, V1
	076 Move V10, V2
	077 Move W8, [X0+224]
	078 Move V11, V3
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X20]
	083 Move X8, [X0+184]
	084 Move [X8+64], S8
	085 Move [X8+72], S9
	086 Move [X8+72], S10
	087 Move [X8+80], S11
	088 Move X9, [X0+184]
	089 Move X8, [X9+24]
	090 Compare X8, 0
	091 JumpIfEqual {566}
	092 Move W10, [X8+24]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Move W9, [X9+4]
	095 Add X8, X8, X22
	096 Move W8, [X8+32]
	097 Move X25, 0xF38000
	098 Move X25, [X25+1432]
	099 Multiply W22, W9, W19
	100 Add W23, W8, W22
	101 NotImplemented "Instruction SBFM not yet implemented."
	102 Add X24, X8, 32
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {108}
	106 Call 0x1C17DFC
	107 Move X0, [X20]
	108 Move X9, [X0+184]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move X8, [X9+16]
	111 Compare X8, 0
	112 JumpIfEqual {566}
	113 Move W10, [X8+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X8, [X8]
	116 Move [X9+56], X8
	117 Compare X8, 0
	118 JumpIfEqual {379}
	119 Move W9, [X0+224]
	120 Compare W9, 0
	121 JumpIfNotEqual {128}
	122 Call 0x1C17DFC
	123 Move X0, [X20]
	124 Move X8, [X0+184]
	125 Move X8, [X8+56]
	126 Compare X8, 0
	127 JumpIfEqual {566}
	128 Move W9, [X8+104]
	129 Compare W9, 0
	130 JumpIfEqual {156}
	131 Move W9, [X0+224]
	132 Compare W9, 0
	133 JumpIfNotEqual {140}
	134 Call 0x1C17DFC
	135 Move X8, [X20]
	136 Move X8, [X8+184]
	137 Move X8, [X8+56]
	138 Compare X8, 0
	139 JumpIfEqual {566}
	140 Move X0, [X21]
	141 Move S11, [X8+108]
	142 Move S10, [X8+112]
	143 Move S9, [X8+116]
	144 Move S8, [X8+120]
	145 Move W9, [X0+224]
	146 Compare W9, 0
	147 JumpIfNotEqual {149}
	148 Call 0x1C17DFC
	149 Move V0, V11
	150 Move V1, V10
	151 Move V2, V9
	152 Move V3, V8
	153 Move X0, X31
	154 Call GUI.set_color, X0
	155 Move X0, [X20]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {161}
	159 Call 0x1C17DFC
	160 Move X0, [X20]
	161 Move X8, [X0+184]
	162 Move X8, [X8+56]
	163 Compare X8, 0
	164 JumpIfEqual {566}
	165 Move W9, [X0+224]
	166 Move W19, [X8+88]
	167 Compare W9, 0
	168 JumpIfNotEqual {175}
	169 Call 0x1C17DFC
	170 Move X0, [X20]
	171 Move X8, [X0+184]
	172 Move X8, [X8+56]
	173 Compare X8, 0
	174 JumpIfEqual {566}
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Move X8, [X8+96]
	177 Compare X8, 0
	178 JumpIfEqual {205}
	179 Move X0, [X21]
	180 Move W8, [X0+224]
	181 Compare W8, 0
	182 JumpIfNotEqual {184}
	183 Call 0x1C17DFC
	184 Move X0, X31
	185 Call GUI.get_skin
	186 Move X8, [X20]
	187 Move X19, X0
	188 Move W9, [X8+224]
	189 Compare W9, 0
	190 JumpIfNotEqual {194}
	191 Move X0, X8
	192 Call 0x1C17DFC
	193 Move X8, [X20]
	194 Move X8, [X8+184]
	195 Move X8, [X8+56]
	196 Compare X8, 0
	197 JumpIfEqual {566}
	198 Compare X19, 0
	199 JumpIfEqual {566}
	200 Move X1, [X8+96]
	201 Move X0, X19
	202 Move X2, X31
	203 Call GUISkin.set_label, X0, X1
	204 Move X0, [X20]
	205 Move W8, [X0+224]
	206 Compare W8, 0
	207 JumpIfNotEqual {210}
	208 Call 0x1C17DFC
	209 Move X0, [X20]
	210 Move X8, [X0+184]
	211 Move X8, [X8+56]
	212 Compare X8, 0
	213 JumpIfEqual {566}
	214 Move W9, [X0+224]
	215 Move W19, [X8+125]
	216 Compare W9, 0
	217 JumpIfNotEqual {224}
	218 Call 0x1C17DFC
	219 Move X8, [X20]
	220 Move X8, [X8+184]
	221 Move X8, [X8+56]
	222 Compare X8, 0
	223 JumpIfEqual {566}
	224 Move X0, X8
	225 Call LTRect.get_rect, X0
	226 Move X8, [X20]
	227 Move X8, [X8+184]
	228 Move X0, [X8+56]
	229 Compare X0, 0
	230 JumpIfEqual {566}
	231 Move V13, [X0+48]
	232 Move V12, V0
	233 Compare W19, 0
	234 JumpIfEqual {344}
	235 Move V8, [X0+56]
	236 Move V9, [X0+64]
	237 Call LTRect.get_rect, X0
	238 Move X8, [X20]
	239 Move X8, [X8+184]
	240 Move X0, [X8+56]
	241 Compare X0, 0
	242 JumpIfEqual {566}
	243 Move V0, [X0+68]
	244 Move [X31+8], S9
	245 Move [X31+16], S8
	246 Move V8, [X0+52]
	247 Move V15, [X0+60]
	248 Move V14, V1
	249 Move V9, V13
	250 Move [X31+4], S0
	251 Call LTRect.get_rect, X0
	252 Move X8, [X20]
	253 Move X8, [X8+184]
	254 Move X0, [X8+56]
	255 Compare X0, 0
	256 JumpIfEqual {566}
	257 Move V13, [X0+64]
	258 Move V10, V2
	259 Call LTRect.get_rect, X0
	260 Move X8, [X20]
	261 Move X8, [X8+184]
	262 Move X8, [X8+56]
	263 Compare X8, 0
	264 JumpIfEqual {566}
	265 Move X0, [X21]
	266 Move V4, [X8+68]
	267 Move X19, [X8+80]
	268 Move V11, V3
	269 Move W9, [X0+224]
	270 Compare W9, 0
	271 JumpIfNotEqual {275}
	272 Move [X31], S4
	273 Call 0x1C17DFC
	274 Move V4, [X31]
	275 Move V3, [X31+12]
	276 Add S0, S12, S9
	277 Add S1, S14, S8
	278 Add S1, S1, S15
	279 Add S0, S0, S3
	280 Move V3, [X31+8]
	281 Multiply S2, S10, S13
	282 Multiply S0, S0, S3
	283 Move V3, [X31+4]
	284 Multiply S1, S1, S3
	285 Multiply S3, S11, S4
	286 Move W9, [X8+88]
	287 Compare W9, 0
	288 JumpIfNotEqual {379}
	289 Move W9, [X0+224]
	290 Compare W9, 0
	291 JumpIfNotEqual {298}
	292 Call 0x1C17DFC
	293 Move X8, [X20]
	294 Move X8, [X8+184]
	295 Move X8, [X8+56]
	296 Compare X8, 0
	297 JumpIfEqual {566}
	298 Move X0, [X25]
	299 Move X19, [X8+128]
	300 Move W9, [X0+224]
	301 Compare W9, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Move X0, X19
	305 Move X1, X31
	306 Move X2, X31
	307 Call Object.op_Inequality, X0, X1
	308 Move TEMP, X0
	309 And TEMP, TEMP, 1
	310 Compare TEMP, 1
	311 JumpIfNotEqual {379}
	312 Move X0, [X20]
	313 Move W8, [X0+224]
	314 Compare W8, 0
	315 JumpIfNotEqual {318}
	316 Call 0x1C17DFC
	317 Move X0, [X20]
	318 Move X8, [X0+184]
	319 Move X8, [X8+56]
	320 Compare X8, 0
	321 JumpIfEqual {566}
	322 Move W9, [X0+224]
	323 Move W19, [X8+125]
	324 Compare W9, 0
	325 JumpIfNotEqual {332}
	326 Call 0x1C17DFC
	327 Move X8, [X20]
	328 Move X8, [X8+184]
	329 Move X8, [X8+56]
	330 Compare X8, 0
	331 JumpIfEqual {566}
	332 Move X0, X8
	333 Call LTRect.get_rect, X0
	334 Move X0, [X20]
	335 Move X8, [X0+184]
	336 Move X8, [X8+56]
	337 Compare W19, 0
	338 JumpIfEqual {382}
	339 Compare X8, 0
	340 JumpIfEqual {566}
	341 Move V0, [X8+68]
	342 Move S12, W31
	343 Multiply S9, S3, S0
	344 Call LTRect.get_rect, X0
	345 Move X8, [X20]
	346 Move X8, [X8+184]
	347 Move X0, [X8+56]
	348 Compare X0, 0
	349 JumpIfEqual {566}
	350 Move V8, [X0+52]
	351 Move V9, V1
	352 Call LTRect.get_rect, X0
	353 Move X8, [X20]
	354 Move X8, [X8+184]
	355 Move X0, [X8+56]
	356 Compare X0, 0
	357 JumpIfEqual {566}
	358 Move V10, V2
	359 Call LTRect.get_rect, X0
	360 Move X8, [X20]
	361 Move X8, [X8+184]
	362 Move X8, [X8+56]
	363 Compare X8, 0
	364 JumpIfEqual {566}
	365 Move X0, [X21]
	366 Move X19, [X8+80]
	367 Move V11, V3
	368 Move W9, [X0+224]
	369 Compare W9, 0
	370 JumpIfNotEqual {372}
	371 Call 0x1C17DFC
	372 Add S0, S12, S13
	373 Add S1, S9, S8
	374 Move V2, V10
	375 Move V3, V11
	376 Move X0, X19
	377 Move X1, X31
	378 Call GUI.Label, X0, X1
	379 Move X0, [X20]
	380 Add W22, W22, 1
	381 Add X24, X24, 8
	382 Compare X8, 0
	383 JumpIfEqual {566}
	384 Move X0, X8
	385 Move V12, V2
	386 Call LTRect.get_rect, X0
	387 Move X0, [X20]
	388 Move V9, V3
	389 Move W8, [X0+224]
	390 Compare W8, 0
	391 JumpIfNotEqual {394}
	392 Call 0x1C17DFC
	393 Move X0, [X20]
	394 Move X8, [X0+184]
	395 Move X8, [X8+56]
	396 Compare X8, 0
	397 JumpIfEqual {566}
	398 Move W9, [X8+126]
	399 Compare W9, 0
	400 JumpIfEqual {436}
	401 Move W9, [X0+224]
	402 Compare W9, 0
	403 JumpIfNotEqual {410}
	404 Call 0x1C17DFC
	405 Move X8, [X20]
	406 Move X8, [X8+184]
	407 Move X8, [X8+56]
	408 Compare X8, 0
	409 JumpIfEqual {566}
	410 Move X0, [X8+128]
	411 Compare X0, 0
	412 JumpIfEqual {566}
	413 Move X8, [X0]
	414 Move X9, [X8+392]
	415 Move X1, [X8+400]
	416 NotImplemented "Instruction BLR not yet implemented."
	417 Move X8, [X20]
	418 Move X8, [X8+184]
	419 Move X8, [X8+56]
	420 Compare X8, 0
	421 JumpIfEqual {566}
	422 Move W19, W0
	423 Move X0, [X8+128]
	424 Compare X0, 0
	425 JumpIfEqual {566}
	426 Move X8, [X0]
	427 Move X9, [X8+424]
	428 Move X1, [X8+432]
	429 NotImplemented "Instruction BLR not yet implemented."
	430 Move W8, W0
	431 Move X0, [X20]
	432 NotImplemented "Instruction SCVTF not yet implemented."
	433 NotImplemented "Instruction SCVTF not yet implemented."
	434 NotImplemented "Instruction FDIV not yet implemented."
	435 Multiply S12, S9, S0
	436 Move W8, [X0+224]
	437 Compare W8, 0
	438 JumpIfNotEqual {441}
	439 Call 0x1C17DFC
	440 Move X0, [X20]
	441 Move X8, [X0+184]
	442 Move X8, [X8+56]
	443 Compare X8, 0
	444 JumpIfEqual {566}
	445 Move W9, [X0+224]
	446 Move W19, [X8+125]
	447 Compare W9, 0
	448 JumpIfNotEqual {455}
	449 Call 0x1C17DFC
	450 Move X8, [X20]
	451 Move X8, [X8+184]
	452 Move X8, [X8+56]
	453 Compare X8, 0
	454 JumpIfEqual {566}
	455 Move X0, X8
	456 Call LTRect.get_rect, X0
	457 Move X8, [X20]
	458 Move X8, [X8+184]
	459 Move X0, [X8+56]
	460 Compare X0, 0
	461 JumpIfEqual {566}
	462 Move V13, [X0+48]
	463 Move V10, V0
	464 Compare W19, 0
	465 JumpIfEqual {494}
	466 Move V8, [X0+56]
	467 Move V14, [X0+64]
	468 Call LTRect.get_rect, X0
	469 Move X8, [X20]
	470 Move X8, [X8+184]
	471 Move X8, [X8+56]
	472 Compare X8, 0
	473 JumpIfEqual {566}
	474 Move X0, [X21]
	475 Move V15, [X8+52]
	476 Move V3, [X8+60]
	477 Move V2, [X8+68]
	478 Move W9, [X0+224]
	479 Move X19, [X8+128]
	480 Move V11, V1
	481 Compare W9, 0
	482 JumpIfNotEqual {488}
	483 Move [X31+8], S3
	484 Move [X31+16], S2
	485 Call 0x1C17DFC
	486 Move S3, [X31+8]
	487 Move S2, [X31+12]
	488 Add S0, S10, S13
	489 Add S1, S11, S15
	490 Add S0, S0, S8
	491 Add S1, S1, S3
	492 Multiply S0, S0, S14
	493 Multiply S1, S1, S2
	494 Call LTRect.get_rect, X0
	495 Move X8, [X20]
	496 Move X8, [X8+184]
	497 Move X8, [X8+56]
	498 Compare X8, 0
	499 JumpIfEqual {566}
	500 Move X0, [X21]
	501 Move V8, [X8+52]
	502 Move X19, [X8+128]
	503 Move V11, V1
	504 Move W9, [X0+224]
	505 Compare W9, 0
	506 JumpIfNotEqual {508}
	507 Call 0x1C17DFC
	508 Add S0, S10, S13
	509 Add S1, S11, S8
	510 Move V2, V12
	511 Move V3, V9
	512 Move X0, X19
	513 Move X1, X31
	514 Call GUI.DrawTexture, X0, X1
	515 Move X20, [X31+128]
	516 Move X19, [X31+136]
	517 Move X22, [X31+112]
	518 Move X21, [X31+120]
	519 Move X24, [X31+96]
	520 Move X23, [X31+104]
	521 Move X30, [X31+80]
	522 Move X25, [X31+88]
	523 Move D9, [X31+64]
	524 Move D8, [X31+72]
	525 Move D11, [X31+48]
	526 Move D10, [X31+56]
	527 Move D13, [X31+32]
	528 Move D12, [X31+40]
	529 Move D15, [X31+16]
	530 Move D14, [X31+24]
	531 Add X31, X31, 144
	532 Return 
	533 Move X0, [X21]
	534 Move S11, [X9+64]
	535 Move S10, [X9+68]
	536 Move S9, [X9+72]
	537 Move S8, [X9+76]
	538 Move W8, [X0+224]
	539 Compare W8, 0
	540 JumpIfNotEqual {542}
	541 Call 0x1C17DFC
	542 Move V0, V11
	543 Move V1, V10
	544 Move V2, V9
	545 Move V3, V8
	546 Move X20, [X31+128]
	547 Move X19, [X31+136]
	548 Move X22, [X31+112]
	549 Move X21, [X31+120]
	550 Move X24, [X31+96]
	551 Move X23, [X31+104]
	552 Move X30, [X31+80]
	553 Move X25, [X31+88]
	554 Move D9, [X31+64]
	555 Move D8, [X31+72]
	556 Move D11, [X31+48]
	557 Move D10, [X31+56]
	558 Move D13, [X31+32]
	559 Move D12, [X31+40]
	560 Move D15, [X31+16]
	561 Move D14, [X31+24]
	562 Move X0, X31
	563 Add X31, X31, 144
	564 Call GUI.set_color, X0
	565 Return 
	566 Call 0x1C17F20
	567 Call 0x1C17F28

Method: System.Boolean checkOnScreen(UnityEngine.Rect rect)

Disassembly:
	0x031BC848 B 0x31B0028
	0x031BC84C STR D12, [X31 - 0x50]!
	0x031BC850 STP D11, D10, [X31 + 0x10]
	0x031BC854 STP D9, D8, [X31 + 0x20]
	0x031BC858 STP X30, X21, [X31 + 0x30]
	0x031BC85C STP X20, X19, [X31 + 0x40]
	0x031BC860 ADRP X21, 0x121F000
	0x031BC864 ADRP X20, 0xF39000
	0x031BC868 LDRB W8, [X21 + 0xEF6]
	0x031BC86C LDR X20, [X20 + 0x5A8]
	0x031BC870 MOV V8.16B, V4.16B
	0x031BC874 MOV V9.16B, V3.16B
	0x031BC878 MOV V10.16B, V2.16B
	0x031BC87C MOV V11.16B, V1.16B
	0x031BC880 MOV V12.16B, V0.16B
	0x031BC884 MOV X19, X0
	0x031BC888 TBNZ X8, 0x0, 0x31BC8A0
	0x031BC88C ADRP X0, 0xF39000
	0x031BC890 LDR X0, [X0 + 0x5A8]
	0x031BC894 BL 0x1C16CF4
	0x031BC898 MOVZ W8, 0x1
	0x031BC89C STRB W8, [X21 + 0xEF6]
	0x031BC8A0 LDR X0, [X20]
	0x031BC8A4 LDR W8, [X0 + 0xE0]
	0x031BC8A8 CBNZ W8, 0x31BC8B0
	0x031BC8AC BL 0x1C16DFC
	0x031BC8B0 MOV X0, X19
	0x031BC8B4 MOV V1.16B, V11.16B
	0x031BC8B8 MOV V2.16B, V10.16B
	0x031BC8BC MOV V3.16B, V9.16B

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X0, X31
	008 Move V8, V3
	009 Move V9, V2
	010 Move V10, V1
	011 Move V11, V0
	012 Call Screen.get_width
	013 NotImplemented "Instruction SCVTF not yet implemented."
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move X0, X31
	016 NotImplemented "Instruction CSET not yet implemented."
	017 Call Screen.get_height
	018 NotImplemented "Instruction SCVTF not yet implemented."
	019 Add S1, S10, S8
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Add S2, S11, S9
	022 NotImplemented "Instruction CSET not yet implemented."
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 NotImplemented "Instruction FCMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 And W10, W10, W19
	028 Move X30, [X31+32]
	029 Move X19, [X31+40]
	030 Move D9, [X31+16]
	031 Move D8, [X31+24]
	032 And W8, W10, W8
	033 And W0, W9, W8
	034 Move D11, [X31+48]
	035 Move D10, [X31+56]
	036 Return X0

Method: System.Void destroy(System.Int32 id)

Disassembly:
	0x031ADB98 LDP X30, X21, [X31], #0x20
	0x031ADB9C B 0x31AD904
	0x031ADBA0 STR X30, [X31 - 0x50]!
	0x031ADBA4 STP X26, X25, [X31 + 0x10]
	0x031ADBA8 STP X24, X23, [X31 + 0x20]
	0x031ADBAC STP X22, X21, [X31 + 0x30]
	0x031ADBB0 STP X20, X19, [X31 + 0x40]
	0x031ADBB4 ADRP X19, 0x122E000
	0x031ADBB8 ADRP X22, 0xF46000
	0x031ADBBC LDRB W8, [X19 + 0xE61]
	0x031ADBC0 LDR X22, [X22 + 0x598]
	0x031ADBC4 MOV X20, X0
	0x031ADBC8 TBNZ X8, 0x0, 0x31ADC1C
	0x031ADBCC ADRP X0, 0xF48000
	0x031ADBD0 LDR X0, [X0 + 0x5A8]
	0x031ADBD4 BL 0x1C16CF4
	0x031ADBD8 ADRP X0, 0xF72000
	0x031ADBDC LDR X0, [X0 + 0x3A8]
	0x031ADBE0 BL 0x1C16CF4
	0x031ADBE4 ADRP X0, 0xF72000
	0x031ADBE8 LDR X0, [X0 + 0x3B0]
	0x031ADBEC BL 0x1C16CF4
	0x031ADBF0 ADRP X0, 0xF72000
	0x031ADBF4 LDR X0, [X0 + 0x3B8]
	0x031ADBF8 BL 0x1C16CF4
	0x031ADBFC ADRP X0, 0xF72000
	0x031ADC00 LDR X0, [X0 + 0x3C0]
	0x031ADC04 BL 0x1C16CF4
	0x031ADC08 ADRP X0, 0xF46000
	0x031ADC0C LDR X0, [X0 + 0x598]
	0x031ADC10 BL 0x1C16CF4
	0x031ADC14 MOVZ W8, 0x1
	0x031ADC18 STRB W8, [X19 + 0xE61]
	0x031ADC1C LDR X0, [X22]
	0x031ADC20 LDR W8, [X0 + 0xE0]
	0x031ADC24 CBNZ W8, 0x31ADC2C
	0x031ADC28 BL 0x1C16DFC
	0x031ADC2C MOV X0, X20
	0x031ADC30 MOV X1, X31
	0x031ADC34 MOV X2, X31
	0x031ADC38 BL 0x3C3883C
	0x031ADC3C TBZ X0, 0x0, 0x31ADC5C
	0x031ADC40 LDP X20, X19, [X31 + 0x40]
	0x031ADC44 LDP X22, X21, [X31 + 0x30]
	0x031ADC48 LDP X24, X23, [X31 + 0x20]
	0x031ADC4C LDP X26, X25, [X31 + 0x10]
	0x031ADC50 MOV X0, X31
	0x031ADC54 LDR X30, [X31], #0x50
	0x031ADC58 RET
	0x031ADC5C ADRP X8, 0xF72000
	0x031ADC60 LDR X8, [X8 + 0x3C0]
	0x031ADC64 ADRP X19, 0xF72000
	0x031ADC68 LDR X0, [X8]
	0x031ADC6C LDR X19, [X19 + 0x3B8]
	0x031ADC70 BL 0x1C16F10
	0x031ADC74 LDR X1, [X19]
	0x031ADC78 MOV X19, X0
	0x031ADC7C BL 0x301B7C4
	0x031ADC80 CBZ X20, 0x31ADE24
	0x031ADC84 MOV X0, X20
	0x031ADC88 MOV X1, X31
	0x031ADC8C BL 0x3C356F8
	0x031ADC90 ADRP X24, 0xF48000
	0x031ADC94 ADRP X25, 0xF72000
	0x031ADC98 LDR X24, [X24 + 0x5A8]
	0x031ADC9C LDR X25, [X25 + 0x3A8]
	0x031ADCA0 MOV X20, X0
	0x031ADCA4 MOV W23, W31
	0x031ADCA8 LDR X0, [X24]
	0x031ADCAC LDR W8, [X0 + 0xE0]
	0x031ADCB0 CBNZ W8, 0x31ADCBC
	0x031ADCB4 BL 0x1C16DFC
	0x031ADCB8 LDR X0, [X24]
	0x031ADCBC LDR X8, [X0 + 0xB8]
	0x031ADCC0 LDR W9, [X8 + 0x38]
	0x031ADCC4 CMP W23, W9
	0x031ADCC8 B.GT 0x31ADDF8
	0x031ADCCC LDR W9, [X0 + 0xE0]
	0x031ADCD0 CBNZ W9, 0x31ADCE0
	0x031ADCD4 BL 0x1C16DFC
	0x031ADCD8 LDR X0, [X24]
	0x031ADCDC LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x122F000
	007 Move W8, [X20+3810]
	008 Move W19, W0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF73000
	014 Move X0, [X0+928]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3810], W8
	018 Move TEMP, X19
	019 And TEMP, TEMP, -2147483648
	020 Compare TEMP, -2147483648
	021 JumpIfEqual {90}
	022 Move X20, 0xF73000
	023 Move X20, [X20+928]
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X0+184]
	031 Move X8, [X8+16]
	032 Compare X8, 0
	033 JumpIfEqual {96}
	034 Move W9, [X8+24]
	035 And W21, W19, 0xFFFF
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move W22, W21
	038 Add X9, X8, X22
	039 Move X9, [X9+32]
	040 Compare X9, 0
	041 JumpIfEqual {90}
	042 Move W9, [X0+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {51}
	045 Call 0x1C17DFC
	046 Move X0, [X20]
	047 Move X8, [X0+184]
	048 Move X8, [X8+16]
	049 Compare X8, 0
	050 JumpIfEqual {96}
	051 Move W9, [X8+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Add X9, X8, X22
	054 Move X9, [X9+32]
	055 Compare X9, 0
	056 JumpIfEqual {96}
	057 Move W9, [X9+136]
	058 Add W31, W9, 1
	059 Move W9, [X0+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {68}
	062 Call 0x1C17DFC
	063 Move X0, [X20]
	064 Move X8, [X0+184]
	065 Move X8, [X8+16]
	066 Compare X8, 0
	067 JumpIfEqual {96}
	068 Move W9, [X8+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add X9, X8, X22
	071 Move X9, [X9+32]
	072 Compare X9, 0
	073 JumpIfEqual {96}
	074 Move W9, [X9+140]
	075 NotImplemented "Instruction SBFM not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W9, [X0+224]
	078 Compare W9, 0
	079 JumpIfNotEqual {86}
	080 Call 0x1C17DFC
	081 Move X8, [X20]
	082 Move X8, [X8+184]
	083 Move X8, [X8+16]
	084 Compare X8, 0
	085 JumpIfEqual {96}
	086 Move W9, [X8+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add X8, X8, X22
	089 Move [X8+32], X31
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X30, [X31+48]
	095 Return 
	096 Call 0x1C17F20
	097 Call 0x1C17F28

Method: System.Void destroyAll(System.Int32 depth)

Disassembly:
	0x031BC8C0 MOV V4.16B, V8.16B
	0x031BC8C4 LDP X20, X19, [X31 + 0x40]
	0x031BC8C8 LDP X30, X21, [X31 + 0x30]
	0x031BC8CC LDP D9, D8, [X31 + 0x20]
	0x031BC8D0 LDP D11, D10, [X31 + 0x10]
	0x031BC8D4 MOV V0.16B, V12.16B
	0x031BC8D8 MOV X1, X31
	0x031BC8DC LDR V12, [X31], #0x50
	0x031BC8E0 B 0x31B01F8
	0x031BC8E4 STR D8, [X31 - 0x30]!
	0x031BC8E8 STR X30, [X31 + 0x8]
	0x031BC8EC STP X22, X21, [X31 + 0x10]
	0x031BC8F0 STP X20, X19, [X31 + 0x20]
	0x031BC8F4 ADRP X21, 0x121F000
	0x031BC8F8 ADRP X22, 0xF39000
	0x031BC8FC LDRB W8, [X21 + 0xEF7]
	0x031BC900 LDR X22, [X22 + 0x5A8]
	0x031BC904 MOV X19, X1
	0x031BC908 MOV V8.16B, V0.16B
	0x031BC90C MOV X20, X0
	0x031BC910 TBNZ X8, 0x0, 0x31BC928
	0x031BC914 ADRP X0, 0xF39000
	0x031BC918 LDR X0, [X0 + 0x5A8]
	0x031BC91C BL 0x1C16CF4
	0x031BC920 MOVZ W8, 0x1
	0x031BC924 STRB W8, [X21 + 0xEF7]
	0x031BC928 LDR X0, [X22]
	0x031BC92C LDR W8, [X0 + 0xE0]
	0x031BC930 CBNZ W8, 0x31BC938
	0x031BC934 BL 0x1C16DFC
	0x031BC938 MOV X0, X20
	0x031BC93C MOV X1, X19
	0x031BC940 LDP X20, X19, [X31 + 0x20]
	0x031BC944 LDP X22, X21, [X31 + 0x10]
	0x031BC948 LDR X30, [X31 + 0x8]
	0x031BC94C MOV V0.16B, V8.16B
	0x031BC950 MOV X2, X31
	0x031BC954 LDR V8, [X31], #0x30
	0x031BC958 B 0x31B0490
	0x031BC95C STR D8, [X31 - 0x30]!
	0x031BC960 STR X30, [X31 + 0x8]
	0x031BC964 STP X22, X21, [X31 + 0x10]
	0x031BC968 STP X20, X19, [X31 + 0x20]
	0x031BC96C ADRP X21, 0x121F000
	0x031BC970 ADRP X22, 0xF39000
	0x031BC974 LDRB W8, [X21 + 0xEF8]
	0x031BC978 LDR X22, [X22 + 0x5A8]
	0x031BC97C MOV X19, X1
	0x031BC980 MOV V8.16B, V0.16B
	0x031BC984 MOV X20, X0
	0x031BC988 TBNZ X8, 0x0, 0x31BC9A0
	0x031BC98C ADRP X0, 0xF39000
	0x031BC990 LDR X0, [X0 + 0x5A8]
	0x031BC994 BL 0x1C16CF4
	0x031BC998 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1220000
	007 Move X20, 0xF64000
	008 Move W8, [X21+3811]
	009 Move X20, [X20+928]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF64000
	016 Move X0, [X0+928]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3811], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Move X8, [X0+184]
	027 Move W8, [X8+4]
	028 Multiply W19, W8, W19
	029 Add W21, W19, W8
	030 NotImplemented "Instruction SBFM not yet implemented."
	031 Add X22, X8, 32
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X20]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, [X0+184]
	039 Move X8, [X8+16]
	040 Compare X8, 0
	041 JumpIfEqual {57}
	042 Move W9, [X0+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {51}
	045 Call 0x1C17DFC
	046 Move X8, [X20]
	047 Move X8, [X8+184]
	048 Move X8, [X8+16]
	049 Compare X8, 0
	050 JumpIfEqual {64}
	051 Move W9, [X8+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move [X8], X31
	054 Move X0, [X20]
	055 Add W19, W19, 1
	056 Add X22, X22, 8
	057 Move X20, [X31+32]
	058 Move X19, [X31+40]
	059 Move X22, [X31+16]
	060 Move X21, [X31+24]
	061 Move X30, [X31+48]
	062 Return 
	063 Call 0x1C17F28
	064 Call 0x1C17F20

Method: LTRect label(UnityEngine.Rect rect, System.String label, System.Int32 depth)

Disassembly:
	0x031BC99C STRB W8, [X21 + 0xEF8]
	0x031BC9A0 LDR X0, [X22]
	0x031BC9A4 LDR W8, [X0 + 0xE0]
	0x031BC9A8 CBNZ W8, 0x31BC9B0
	0x031BC9AC BL 0x1C16DFC
	0x031BC9B0 MOV X0, X20
	0x031BC9B4 MOV X1, X19
	0x031BC9B8 LDP X20, X19, [X31 + 0x20]
	0x031BC9BC LDP X22, X21, [X31 + 0x10]
	0x031BC9C0 LDR X30, [X31 + 0x8]
	0x031BC9C4 MOV V0.16B, V8.16B
	0x031BC9C8 MOV X2, X31
	0x031BC9CC LDR V8, [X31], #0x30
	0x031BC9D0 B 0x31B0574
	0x031BC9D4 STP X30, X21, [X31 - 0x20]!
	0x031BC9D8 STP X20, X19, [X31 + 0x10]
	0x031BC9DC ADRP X20, 0x121F000
	0x031BC9E0 ADRP X21, 0xF39000
	0x031BC9E4 LDRB W8, [X20 + 0xEF9]
	0x031BC9E8 LDR X21, [X21 + 0x5A8]
	0x031BC9EC MOV X19, X0
	0x031BC9F0 TBNZ X8, 0x0, 0x31BCA08
	0x031BC9F4 ADRP X0, 0xF39000
	0x031BC9F8 LDR X0, [X0 + 0x5A8]
	0x031BC9FC BL 0x1C16CF4
	0x031BCA00 MOVZ W8, 0x1
	0x031BCA04 STRB W8, [X20 + 0xEF9]
	0x031BCA08 LDR X0, [X21]
	0x031BCA0C LDR W8, [X0 + 0xE0]
	0x031BCA10 CBNZ W8, 0x31BCA18
	0x031BCA14 BL 0x1C16DFC
	0x031BCA18 MOV X0, X19
	0x031BCA1C LDP X20, X19, [X31 + 0x10]
	0x031BCA20 MOV X1, X31
	0x031BCA24 LDP X30, X21, [X31], #0x20
	0x031BCA28 B 0x31AE4CC
	0x031BCA2C STP X30, X21, [X31 - 0x20]!
	0x031BCA30 STP X20, X19, [X31 + 0x10]
	0x031BCA34 ADRP X20, 0x121F000
	0x031BCA38 ADRP X21, 0xF39000
	0x031BCA3C LDRB W8, [X20 + 0xEFA]
	0x031BCA40 LDR X21, [X21 + 0x5A8]
	0x031BCA44 MOV X19, X0
	0x031BCA48 TBNZ X8, 0x0, 0x31BCA60
	0x031BCA4C ADRP X0, 0xF39000
	0x031BCA50 LDR X0, [X0 + 0x5A8]
	0x031BCA54 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x1220000
	012 Move X23, 0xF64000
	013 Move X22, 0xF64000
	014 Move W8, [X21+3812]
	015 Move X23, [X23+1472]
	016 Move X22, [X22+928]
	017 Move W19, W1
	018 Move X20, X0
	019 Move V8, V3
	020 Move V9, V2
	021 Move V10, V1
	022 Move V11, V0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {35}
	027 Move X0, 0xF64000
	028 Move X0, [X0+928]
	029 Call 0x1C17CF4
	030 Move X0, 0xF64000
	031 Move X0, [X0+1472]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3812], W8
	035 Move X0, [X23]
	036 Call 0x1C17F10
	037 Move V0, V11
	038 Move V1, V10
	039 Move V2, V9
	040 Move V3, V8
	041 Move X21, X0
	042 Call LTRect..ctor, X0, X1
	043 Move X0, [X22]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X20
	050 Move W2, W19
	051 Move X20, [X31+64]
	052 Move X19, [X31+72]
	053 Move X22, [X31+48]
	054 Move X21, [X31+56]
	055 Move X30, [X31+32]
	056 Move X23, [X31+40]
	057 Move D9, [X31+16]
	058 Move D8, [X31+24]
	059 Move D11, [X31+80]
	060 Move D10, [X31+88]

Method: LTRect label(LTRect rect, System.String label, System.Int32 depth)

Disassembly:
	0x031BCA58 MOVZ W8, 0x1
	0x031BCA5C STRB W8, [X20 + 0xEFA]
	0x031BCA60 LDR X0, [X21]
	0x031BCA64 LDR W8, [X0 + 0xE0]
	0x031BCA68 CBNZ W8, 0x31BCA70
	0x031BCA6C BL 0x1C16DFC
	0x031BCA70 MOV X0, X19
	0x031BCA74 LDP X20, X19, [X31 + 0x10]
	0x031BCA78 MOV X1, X31
	0x031BCA7C LDP X30, X21, [X31], #0x20
	0x031BCA80 B 0x31AE748
	0x031BCA84 STP X30, X21, [X31 - 0x20]!
	0x031BCA88 STP X20, X19, [X31 + 0x10]
	0x031BCA8C ADRP X20, 0x121F000
	0x031BCA90 ADRP X21, 0xF39000
	0x031BCA94 LDRB W8, [X20 + 0xEFB]
	0x031BCA98 LDR X21, [X21 + 0x5A8]
	0x031BCA9C MOV X19, X0
	0x031BCAA0 TBNZ X8, 0x0, 0x31BCAB8
	0x031BCAA4 ADRP X0, 0xF39000
	0x031BCAA8 LDR X0, [X0 + 0x5A8]
	0x031BCAAC BL 0x1C16CF4
	0x031BCAB0 MOVZ W8, 0x1
	0x031BCAB4 STRB W8, [X20 + 0xEFB]
	0x031BCAB8 LDR X0, [X21]
	0x031BCABC LDR W8, [X0 + 0xE0]
	0x031BCAC0 CBNZ W8, 0x31BCAC8
	0x031BCAC4 BL 0x1C16DFC
	0x031BCAC8 MOV X0, X19
	0x031BCACC LDP X20, X19, [X31 + 0x10]
	0x031BCAD0 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1220000
	007 Move W8, [X22+3813]
	008 Move W19, W2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF64000
	016 Move X0, [X0+928]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3813], W8
	020 Compare X20, 0
	021 JumpIfEqual {39}
	022 Move X8, 0xF64000
	023 Move X8, [X8+928]
	024 Move W9, 1
	025 Move [X20+88], W9
	026 Move [X20+80], X21
	027 Move X0, [X8]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move W1, W19
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 Call 0x1C17F20

Method: LTRect texture(UnityEngine.Rect rect, UnityEngine.Texture texture, System.Int32 depth)

Disassembly:
	0x031BCDDC ADRP X0, 0xF39000
	0x031BCDE0 LDR X0, [X0 + 0x5A8]
	0x031BCDE4 BL 0x1C16CF4
	0x031BCDE8 MOVZ W8, 0x1
	0x031BCDEC STRB W8, [X21 + 0xF01]
	0x031BCDF0 LDR X0, [X22]
	0x031BCDF4 LDR W8, [X0 + 0xE0]
	0x031BCDF8 CBNZ W8, 0x31BCE00
	0x031BCDFC BL 0x1C16DFC
	0x031BCE00 MOV X0, X20
	0x031BCE04 MOV X1, X19
	0x031BCE08 LDP X20, X19, [X31 + 0x20]
	0x031BCE0C LDP X22, X21, [X31 + 0x10]
	0x031BCE10 LDR X30, [X31 + 0x8]
	0x031BCE14 MOV V0.16B, V8.16B
	0x031BCE18 MOV X2, X31
	0x031BCE1C LDR V8, [X31], #0x30
	0x031BCE20 B 0x31B089C
	0x031BCE24 STR D8, [X31 - 0x30]!
	0x031BCE28 STR X30, [X31 + 0x8]
	0x031BCE2C STP X22, X21, [X31 + 0x10]
	0x031BCE30 STP X20, X19, [X31 + 0x20]
	0x031BCE34 ADRP X21, 0x121F000
	0x031BCE38 ADRP X22, 0xF39000
	0x031BCE3C LDRB W8, [X21 + 0xF02]
	0x031BCE40 LDR X22, [X22 + 0x5A8]
	0x031BCE44 MOV V8.16B, V0.16B
	0x031BCE48 MOV X19, X1
	0x031BCE4C MOV X20, X0
	0x031BCE50 TBNZ X8, 0x0, 0x31BCE68
	0x031BCE54 ADRP X0, 0xF39000
	0x031BCE58 LDR X0, [X0 + 0x5A8]
	0x031BCE5C BL 0x1C16CF4
	0x031BCE60 MOVZ W8, 0x1
	0x031BCE64 STRB W8, [X21 + 0xF02]
	0x031BCE68 LDR X0, [X22]
	0x031BCE6C LDR W8, [X0 + 0xE0]
	0x031BCE70 CBNZ W8, 0x31BCE78
	0x031BCE74 BL 0x1C16DFC
	0x031BCE78 MOV X0, X20
	0x031BCE7C MOV X1, X19
	0x031BCE80 LDP X20, X19, [X31 + 0x20]
	0x031BCE84 LDP X22, X21, [X31 + 0x10]
	0x031BCE88 LDR X30, [X31 + 0x8]
	0x031BCE8C MOV V0.16B, V8.16B
	0x031BCE90 MOV X2, X31
	0x031BCE94 LDR V8, [X31], #0x30

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x1220000
	012 Move X23, 0xF64000
	013 Move X22, 0xF64000
	014 Move W8, [X21+3814]
	015 Move X23, [X23+1472]
	016 Move X22, [X22+928]
	017 Move W19, W1
	018 Move X20, X0
	019 Move V8, V3
	020 Move V9, V2
	021 Move V10, V1
	022 Move V11, V0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {35}
	027 Move X0, 0xF64000
	028 Move X0, [X0+928]
	029 Call 0x1C17CF4
	030 Move X0, 0xF64000
	031 Move X0, [X0+1472]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3814], W8
	035 Move X0, [X23]
	036 Call 0x1C17F10
	037 Move V0, V11
	038 Move V1, V10
	039 Move V2, V9
	040 Move V3, V8
	041 Move X21, X0
	042 Call LTRect..ctor, X0, X1
	043 Move X0, [X22]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X20
	050 Move W2, W19
	051 Move X20, [X31+64]
	052 Move X19, [X31+72]
	053 Move X22, [X31+48]
	054 Move X21, [X31+56]
	055 Move X30, [X31+32]
	056 Move X23, [X31+40]
	057 Move D9, [X31+16]
	058 Move D8, [X31+24]
	059 Move D11, [X31+80]
	060 Move D10, [X31+88]

Method: LTRect texture(LTRect rect, UnityEngine.Texture texture, System.Int32 depth)

Disassembly:
	0x031BCE98 B 0x31B0D48
	0x031BCE9C STR D8, [X31 - 0x30]!
	0x031BCEA0 STR X30, [X31 + 0x8]
	0x031BCEA4 STP X22, X21, [X31 + 0x10]
	0x031BCEA8 STP X20, X19, [X31 + 0x20]
	0x031BCEAC ADRP X21, 0x121F000
	0x031BCEB0 ADRP X22, 0xF39000
	0x031BCEB4 LDRB W8, [X21 + 0xF03]
	0x031BCEB8 LDR X22, [X22 + 0x5A8]
	0x031BCEBC MOV V8.16B, V0.16B
	0x031BCEC0 MOV X19, X1
	0x031BCEC4 MOV X20, X0
	0x031BCEC8 TBNZ X8, 0x0, 0x31BCEE0
	0x031BCECC ADRP X0, 0xF39000
	0x031BCED0 LDR X0, [X0 + 0x5A8]
	0x031BCED4 BL 0x1C16CF4
	0x031BCED8 MOVZ W8, 0x1
	0x031BCEDC STRB W8, [X21 + 0xF03]
	0x031BCEE0 LDR X0, [X22]
	0x031BCEE4 LDR W8, [X0 + 0xE0]
	0x031BCEE8 CBNZ W8, 0x31BCEF0
	0x031BCEEC BL 0x1C16DFC
	0x031BCEF0 MOV X0, X20
	0x031BCEF4 MOV X1, X19
	0x031BCEF8 LDP X20, X19, [X31 + 0x20]
	0x031BCEFC LDP X22, X21, [X31 + 0x10]
	0x031BCF00 LDR X30, [X31 + 0x8]
	0x031BCF04 MOV V0.16B, V8.16B
	0x031BCF08 MOV X2, X31
	0x031BCF0C LDR V8, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1220000
	007 Move W8, [X22+3815]
	008 Move W19, W2
	009 Move X21, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF64000
	016 Move X0, [X0+928]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3815], W8
	020 Compare X20, 0
	021 JumpIfEqual {40}
	022 Move X8, 0xF64000
	023 Move X8, [X8+928]
	024 Move [X20+88], W31
	025 Move [X20+128], X21
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move W1, W19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X30, [X31+48]
	038 Call LTGUI.element, X0, X1
	039 Return X0
	040 Call 0x1C17F20

Method: LTRect element(LTRect rect, System.Int32 depth)

Disassembly:
	0x031BCAD4 LDP X30, X21, [X31], #0x20
	0x031BCAD8 B 0x31AE7B8
	0x031BCADC STP D11, D10, [X31 - 0x40]!
	0x031BCAE0 STP D9, D8, [X31 + 0x10]
	0x031BCAE4 STP X30, X21, [X31 + 0x20]
	0x031BCAE8 STP X20, X19, [X31 + 0x30]
	0x031BCAEC ADRP X21, 0x121F000
	0x031BCAF0 ADRP X20, 0xF39000
	0x031BCAF4 LDRB W8, [X21 + 0xEFC]
	0x031BCAF8 LDR X20, [X20 + 0x5A8]
	0x031BCAFC MOV V8.16B, V3.16B
	0x031BCB00 MOV V9.16B, V2.16B
	0x031BCB04 MOV V10.16B, V1.16B
	0x031BCB08 MOV V11.16B, V0.16B
	0x031BCB0C MOV X19, X0
	0x031BCB10 TBNZ X8, 0x0, 0x31BCB28
	0x031BCB14 ADRP X0, 0xF39000
	0x031BCB18 LDR X0, [X0 + 0x5A8]
	0x031BCB1C BL 0x1C16CF4
	0x031BCB20 MOVZ W8, 0x1
	0x031BCB24 STRB W8, [X21 + 0xEFC]
	0x031BCB28 LDR X0, [X20]
	0x031BCB2C LDR W8, [X0 + 0xE0]
	0x031BCB30 CBNZ W8, 0x31BCB38
	0x031BCB34 BL 0x1C16DFC
	0x031BCB38 MOV X0, X19
	0x031BCB3C MOV V2.16B, V9.16B
	0x031BCB40 MOV V3.16B, V8.16B
	0x031BCB44 LDP X20, X19, [X31 + 0x30]
	0x031BCB48 LDP X30, X21, [X31 + 0x20]
	0x031BCB4C LDP D9, D8, [X31 + 0x10]
	0x031BCB50 MOV V0.16B, V11.16B
	0x031BCB54 MOV V1.16B, V10.16B
	0x031BCB58 MOV X1, X31
	0x031BCB5C LDP D11, D10, [X31], #0x40
	0x031BCB60 B 0x31B0748
	0x031BCB64 STP D11, D10, [X31 - 0x40]!
	0x031BCB68 STP D9, D8, [X31 + 0x10]
	0x031BCB6C STR X30, [X31 + 0x20]
	0x031BCB70 STP X20, X19, [X31 + 0x30]
	0x031BCB74 ADRP X20, 0x121F000
	0x031BCB78 LDRB W8, [X20 + 0xEFD]
	0x031BCB7C MOV V8.16B, V3.16B
	0x031BCB80 MOV V9.16B, V2.16B
	0x031BCB84 MOV V10.16B, V1.16B
	0x031BCB88 MOV V11.16B, V0.16B
	0x031BCB8C MOV X19, X0
	0x031BCB90 TBNZ X8, 0x0, 0x31BCBA8
	0x031BCB94 ADRP X0, 0xF39000
	0x031BCB98 LDR X0, [X0 + 0x5A8]
	0x031BCB9C BL 0x1C16CF4
	0x031BCBA0 MOVZ W8, 0x1
	0x031BCBA4 STRB W8, [X20 + 0xEFD]
	0x031BCBA8 CBZ X19, 0x31BCC04
	0x031BCBAC ADRP X20, 0xF39000
	0x031BCBB0 LDR X20, [X20 + 0x5A8]
	0x031BCBB4 MOV X0, X19
	0x031BCBB8 MOV X1, X31
	0x031BCBBC BL 0x3C32ECC
	0x031BCBC0 LDR X8, [X20]
	0x031BCBC4 MOV X19, X0
	0x031BCBC8 LDR W9, [X8 + 0xE0]
	0x031BCBCC CBNZ W9, 0x31BCBD8
	0x031BCBD0 MOV X0, X8
	0x031BCBD4 BL 0x1C16DFC
	0x031BCBD8 MOV X0, X19
	0x031BCBDC MOV V2.16B, V9.16B
	0x031BCBE0 MOV V3.16B, V8.16B
	0x031BCBE4 LDP X20, X19, [X31 + 0x30]
	0x031BCBE8 LDR X30, [X31 + 0x20]
	0x031BCBEC LDP D9, D8, [X31 + 0x10]
	0x031BCBF0 MOV V0.16B, V11.16B
	0x031BCBF4 MOV V1.16B, V10.16B
	0x031BCBF8 MOV X1, X31
	0x031BCBFC LDP D11, D10, [X31], #0x40
	0x031BCC00 B 0x31B0748
	0x031BCC04 BL 0x1C16F20
	0x031BCC08 STP D11, D10, [X31 - 0x40]!
	0x031BCC0C STP D9, D8, [X31 + 0x10]
	0x031BCC10 STP X30, X21, [X31 + 0x20]
	0x031BCC14 STP X20, X19, [X31 + 0x30]
	0x031BCC18 ADRP X21, 0x121F000
	0x031BCC1C ADRP X20, 0xF39000
	0x031BCC20 LDRB W8, [X21 + 0xEFE]
	0x031BCC24 LDR X20, [X20 + 0x5A8]
	0x031BCC28 MOV V8.16B, V3.16B
	0x031BCC2C MOV V9.16B, V2.16B
	0x031BCC30 MOV V10.16B, V1.16B
	0x031BCC34 MOV V11.16B, V0.16B
	0x031BCC38 MOV X19, X0
	0x031BCC3C TBNZ X8, 0x0, 0x31BCC54
	0x031BCC40 ADRP X0, 0xF39000
	0x031BCC44 LDR X0, [X0 + 0x5A8]
	0x031BCC48 BL 0x1C16CF4
	0x031BCC4C MOVZ W8, 0x1
	0x031BCC50 STRB W8, [X21 + 0xEFE]
	0x031BCC54 LDR X0, [X20]
	0x031BCC58 LDR W8, [X0 + 0xE0]
	0x031BCC5C CBNZ W8, 0x31BCC64
	0x031BCC60 BL 0x1C16DFC
	0x031BCC64 MOV X0, X19
	0x031BCC68 MOV V2.16B, V9.16B
	0x031BCC6C MOV V3.16B, V8.16B
	0x031BCC70 LDP X20, X19, [X31 + 0x30]
	0x031BCC74 LDP X30, X21, [X31 + 0x20]
	0x031BCC78 LDP D9, D8, [X31 + 0x10]
	0x031BCC7C MOV V0.16B, V11.16B
	0x031BCC80 MOV V1.16B, V10.16B
	0x031BCC84 MOV X1, X31
	0x031BCC88 LDP D11, D10, [X31], #0x40
	0x031BCC8C B 0x31B2F60
	0x031BCC90 STR D10, [X31 - 0x40]!
	0x031BCC94 STP D9, D8, [X31 + 0x10]
	0x031BCC98 STP X30, X21, [X31 + 0x20]
	0x031BCC9C STP X20, X19, [X31 + 0x30]
	0x031BCCA0 ADRP X21, 0x121F000
	0x031BCCA4 ADRP X20, 0xF39000
	0x031BCCA8 LDRB W8, [X21 + 0xEFF]
	0x031BCCAC LDR X20, [X20 + 0x5A8]
	0x031BCCB0 MOV V8.16B, V2.16B
	0x031BCCB4 MOV V9.16B, V1.16B
	0x031BCCB8 MOV V10.16B, V0.16B
	0x031BCCBC MOV X19, X0
	0x031BCCC0 TBNZ X8, 0x0, 0x31BCCD8
	0x031BCCC4 ADRP X0, 0xF39000
	0x031BCCC8 LDR X0, [X0 + 0x5A8]
	0x031BCCCC BL 0x1C16CF4
	0x031BCCD0 MOVZ W8, 0x1
	0x031BCCD4 STRB W8, [X21 + 0xEFF]
	0x031BCCD8 LDR X0, [X20]
	0x031BCCDC LDR W8, [X0 + 0xE0]
	0x031BCCE0 CBNZ W8, 0x31BCCE8
	0x031BCCE4 BL 0x1C16DFC
	0x031BCCE8 MOV X0, X19
	0x031BCCEC MOV V1.16B, V9.16B
	0x031BCCF0 MOV V2.16B, V8.16B
	0x031BCCF4 LDP X20, X19, [X31 + 0x30]
	0x031BCCF8 LDP X30, X21, [X31 + 0x20]
	0x031BCCFC LDP D9, D8, [X31 + 0x10]
	0x031BCD00 MOV V0.16B, V10.16B
	0x031BCD04 MOV X1, X31
	0x031BCD08 LDR V10, [X31], #0x40
	0x031BCD0C B 0x31B07E4
	0x031BCD10 STR D10, [X31 - 0x30]!
	0x031BCD14 STP D9, D8, [X31 + 0x8]
	0x031BCD18 STR X30, [X31 + 0x18]
	0x031BCD1C STP X20, X19, [X31 + 0x20]
	0x031BCD20 ADRP X20, 0x121F000
	0x031BCD24 LDRB W8, [X20 + 0xF00]
	0x031BCD28 MOV V8.16B, V2.16B
	0x031BCD2C MOV V9.16B, V1.16B
	0x031BCD30 MOV V10.16B, V0.16B
	0x031BCD34 MOV X19, X0
	0x031BCD38 TBNZ X8, 0x0, 0x31BCD50
	0x031BCD3C ADRP X0, 0xF39000
	0x031BCD40 LDR X0, [X0 + 0x5A8]
	0x031BCD44 BL 0x1C16CF4
	0x031BCD48 MOVZ W8, 0x1
	0x031BCD4C STRB W8, [X20 + 0xF00]
	0x031BCD50 CBZ X19, 0x31BCDA8
	0x031BCD54 ADRP X20, 0xF39000
	0x031BCD58 LDR X20, [X20 + 0x5A8]
	0x031BCD5C MOV X0, X19
	0x031BCD60 MOV X1, X31
	0x031BCD64 BL 0x3C32ECC
	0x031BCD68 LDR X8, [X20]
	0x031BCD6C MOV X19, X0
	0x031BCD70 LDR W9, [X8 + 0xE0]
	0x031BCD74 CBNZ W9, 0x31BCD80
	0x031BCD78 MOV X0, X8
	0x031BCD7C BL 0x1C16DFC
	0x031BCD80 MOV X0, X19
	0x031BCD84 MOV V1.16B, V9.16B
	0x031BCD88 MOV V2.16B, V8.16B
	0x031BCD8C LDP X20, X19, [X31 + 0x20]
	0x031BCD90 LDR X30, [X31 + 0x18]
	0x031BCD94 LDP D9, D8, [X31 + 0x8]
	0x031BCD98 MOV V0.16B, V10.16B
	0x031BCD9C MOV X1, X31
	0x031BCDA0 LDR V10, [X31], #0x30
	0x031BCDA4 B 0x31B07E4
	0x031BCDA8 BL 0x1C16F20
	0x031BCDAC STR D8, [X31 - 0x30]!
	0x031BCDB0 STR X30, [X31 + 0x8]
	0x031BCDB4 STP X22, X21, [X31 + 0x10]
	0x031BCDB8 STP X20, X19, [X31 + 0x20]
	0x031BCDBC ADRP X21, 0x121F000
	0x031BCDC0 ADRP X22, 0xF39000
	0x031BCDC4 LDRB W8, [X21 + 0xF01]
	0x031BCDC8 LDR X22, [X22 + 0x5A8]
	0x031BCDCC MOV V8.16B, V0.16B
	0x031BCDD0 MOV X19, X1
	0x031BCDD4 MOV X20, X0
	0x031BCDD8 TBNZ X8, 0x0, 0x31BCDF0

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x1220000
	012 Move X22, 0xF64000
	013 Move W8, [X21+3816]
	014 Move X22, [X22+928]
	015 Move W19, W1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {35}
	021 Move X0, 0xF38000
	022 Move X0, [X0+2600]
	023 Call 0x1C17CF4
	024 Move X0, 0xF64000
	025 Move X0, [X0+928]
	026 Call 0x1C17CF4
	027 Move X0, 0xF64000
	028 Move X0, [X0+1536]
	029 Call 0x1C17CF4
	030 Move X0, 0xF64000
	031 Move X0, [X0+1544]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3816], W8
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X22]
	041 Move X8, [X0+184]
	042 Move W9, 1
	043 Move [X8+80], W9
	044 Call LTGUI.init
	045 Compare X20, 0
	046 JumpIfEqual {213}
	047 Move X0, [X22]
	048 Move W9, [X20+136]
	049 Move W10, [X20+140]
	050 Move X8, [X0+184]
	051 Move W11, [X0+224]
	052 Or W21, W9, W10
	053 Move W24, [X8+4]
	054 Compare W11, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X23, 0xF38000
	058 Move X23, [X23+2600]
	059 Move W0, W21
	060 Call LTGUI.destroy, X0
	061 Move W8, [X20+88]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, [X20+96]
	064 Compare X0, 0
	065 JumpIfEqual {83}
	066 Move X1, X31
	067 Call GUIStyle.get_normal, X0
	068 Compare X0, 0
	069 JumpIfEqual {213}
	070 Move X1, X31
	071 Call GUIStyleState.get_textColor, X0
	072 NotImplemented "Instruction FCMP not yet implemented."
	073 Move X0, [X23]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {78}
	077 Call 0x1C17DFC
	078 Move X8, 0xF64000
	079 Move X8, [X8+1544]
	080 Move X1, X31
	081 Move X0, [X8]
	082 Call Debug.LogWarning, X0
	083 Move V0, [X20+64]
	084 Move W8, 0x7F800000
	085 Move S1, W8
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 Move X0, X31
	088 Call Screen.get_width
	089 Move W21, W0
	090 Move X0, X31
	091 Call Screen.get_height
	092 NotImplemented "Instruction SCVTF not yet implemented."
	093 NotImplemented "Instruction SCVTF not yet implemented."
	094 Move [X20+56], X31
	095 Move [X20+64], S0
	096 Move [X20+72], S1
	097 Move X0, [X22]
	098 NotImplemented "Instruction MADD not yet implemented."
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {104}
	102 Call 0x1C17DFC
	103 Move X0, [X22]
	104 Move X8, [X0+184]
	105 Move W8, [X8+4]
	106 Multiply W25, W8, W19
	107 Subtract W27, W21, W25
	108 Move W21, W31
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {114}
	112 Call 0x1C17DFC
	113 Move X0, [X22]
	114 Move X8, [X0+184]
	115 Move X24, [X8+16]
	116 Compare X24, 0
	117 JumpIfEqual {213}
	118 Move W10, [X24+24]
	119 Add W9, W25, W21
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X26, W9
	122 Add X9, X24, X26
	123 Move X9, [X9+32]
	124 Move [X8+56], X9
	125 Compare X9, 0
	126 JumpIfEqual {140}
	127 Add W21, W21, 1
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move X0, [X23]
	130 Move X19, 0xF64000
	131 Move W8, [X0+224]
	132 Move X19, [X19+1536]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Move X0, [X19]
	137 Move X1, X31
	138 Call Debug.LogError, X0
	139 Move X0, X31
	140 Move W9, [X0+224]
	141 Add W23, W25, W21
	142 Compare W9, 0
	143 JumpIfNotEqual {148}
	144 Call 0x1C17DFC
	145 Move X8, [X22]
	146 Move X8, [X8+184]
	147 Move X24, [X8+16]
	148 Move W9, 1
	149 Move [X8+56], X20
	150 Move [X20+72], W9
	151 Move [X20+74], W9
	152 Move W8, [X8+84]
	153 Move [X20+136], W23
	154 Move [X20+140], W8
	155 Compare X24, 0
	156 JumpIfEqual {213}
	157 Move X8, [X24]
	158 Move X0, X20
	159 Move X1, [X8+64]
	160 Call 0x1C17E00
	161 Compare X0, 0
	162 JumpIfEqual {215}
	163 Move W8, [X24+24]
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Add X8, X24, X26
	166 Move [X8+32], X20
	167 Move X0, [X22]
	168 Move X8, [X0+184]
	169 Move X8, [X8+24]
	170 Compare X8, 0
	171 JumpIfEqual {213}
	172 Move W9, [X8+24]
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move X20, W19
	175 Add X9, X8, X20
	176 Move W9, [X9+32]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move W9, [X0+224]
	179 Compare W9, 0
	180 JumpIfNotEqual {187}
	181 Call 0x1C17DFC
	182 Move X0, [X22]
	183 Move X8, [X0+184]
	184 Move X8, [X8+24]
	185 Compare X8, 0
	186 JumpIfEqual {213}
	187 Move W9, [X8+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Add W9, W21, 1
	190 Add X8, X8, X20
	191 Move [X8+32], W9
	192 Move W8, [X0+224]
	193 Compare W8, 0
	194 JumpIfNotEqual {197}
	195 Call 0x1C17DFC
	196 Move X0, [X22]
	197 Move X8, [X0+184]
	198 Move W9, [X8+84]
	199 Move X0, [X8+56]
	200 Add W9, W9, 1
	201 Move [X8+84], W9
	202 Move X20, [X31+64]
	203 Move X19, [X31+72]
	204 Move X22, [X31+48]
	205 Move X21, [X31+56]
	206 Move X24, [X31+32]
	207 Move X23, [X31+40]
	208 Move X26, [X31+16]
	209 Move X25, [X31+24]
	210 Move X30, [X31+80]
	211 Move X27, [X31+88]
	212 Return X0
	213 Call 0x1C17F20
	214 Call 0x1C17F28
	215 Call 0x1C17F44
	216 Move X1, X31
	217 Call 0x1C17DEC

Method: System.Boolean hasNoOverlap(UnityEngine.Rect rect, System.Int32 depth)

Disassembly:
	0x031BCF10 B 0x31B0DF8
	0x031BCF14 STR D8, [X31 - 0x30]!
	0x031BCF18 STP X30, X21, [X31 + 0x10]
	0x031BCF1C STP X20, X19, [X31 + 0x20]
	0x031BCF20 ADRP X21, 0x121F000
	0x031BCF24 LDRB W8, [X21 + 0xF04]
	0x031BCF28 MOV V8.16B, V0.16B
	0x031BCF2C MOV X19, X1
	0x031BCF30 MOV X20, X0
	0x031BCF34 TBNZ X8, 0x0, 0x31BCF4C
	0x031BCF38 ADRP X0, 0xF39000
	0x031BCF3C LDR X0, [X0 + 0x5A8]
	0x031BCF40 BL 0x1C16CF4
	0x031BCF44 MOVZ W8, 0x1
	0x031BCF48 STRB W8, [X21 + 0xF04]
	0x031BCF4C CBZ X20, 0x31BCF9C
	0x031BCF50 ADRP X21, 0xF39000
	0x031BCF54 LDR X21, [X21 + 0x5A8]
	0x031BCF58 MOV X0, X20
	0x031BCF5C MOV X1, X31
	0x031BCF60 BL 0x3C32ECC
	0x031BCF64 LDR X8, [X21]
	0x031BCF68 MOV X20, X0
	0x031BCF6C LDR W9, [X8 + 0xE0]
	0x031BCF70 CBNZ W9, 0x31BCF7C
	0x031BCF74 MOV X0, X8
	0x031BCF78 BL 0x1C16DFC
	0x031BCF7C MOV X0, X20
	0x031BCF80 MOV X1, X19
	0x031BCF84 LDP X20, X19, [X31 + 0x20]
	0x031BCF88 LDP X30, X21, [X31 + 0x10]
	0x031BCF8C MOV V0.16B, V8.16B
	0x031BCF90 MOV X2, X31
	0x031BCF94 LDR V8, [X31], #0x30
	0x031BCF98 B 0x31B089C
	0x031BCF9C BL 0x1C16F20
	0x031BCFA0 STR D8, [X31 - 0x30]!
	0x031BCFA4 STP X30, X21, [X31 + 0x10]
	0x031BCFA8 STP X20, X19, [X31 + 0x20]
	0x031BCFAC ADRP X21, 0x121F000
	0x031BCFB0 LDRB W8, [X21 + 0xF05]
	0x031BCFB4 MOV V8.16B, V0.16B
	0x031BCFB8 MOV X19, X1
	0x031BCFBC MOV X20, X0
	0x031BCFC0 TBNZ X8, 0x0, 0x31BCFD8
	0x031BCFC4 ADRP X0, 0xF39000
	0x031BCFC8 LDR X0, [X0 + 0x5A8]
	0x031BCFCC BL 0x1C16CF4
	0x031BCFD0 MOVZ W8, 0x1
	0x031BCFD4 STRB W8, [X21 + 0xF05]
	0x031BCFD8 CBZ X20, 0x31BD028
	0x031BCFDC ADRP X21, 0xF39000
	0x031BCFE0 LDR X21, [X21 + 0x5A8]
	0x031BCFE4 MOV X0, X20
	0x031BCFE8 MOV X1, X31
	0x031BCFEC BL 0x3C32ECC
	0x031BCFF0 LDR X8, [X21]
	0x031BCFF4 MOV X20, X0
	0x031BCFF8 LDR W9, [X8 + 0xE0]
	0x031BCFFC CBNZ W9, 0x31BD008
	0x031BD000 MOV X0, X8
	0x031BD004 BL 0x1C16DFC
	0x031BD008 MOV X0, X20
	0x031BD00C MOV X1, X19
	0x031BD010 LDP X20, X19, [X31 + 0x20]
	0x031BD014 LDP X30, X21, [X31 + 0x10]
	0x031BD018 MOV V0.16B, V8.16B
	0x031BD01C MOV X2, X31
	0x031BD020 LDR V8, [X31], #0x30
	0x031BD024 B 0x31B0D48
	0x031BD028 BL 0x1C16F20
	0x031BD02C STR D8, [X31 - 0x30]!
	0x031BD030 STP X30, X21, [X31 + 0x10]
	0x031BD034 STP X20, X19, [X31 + 0x20]
	0x031BD038 ADRP X21, 0x121E000
	0x031BD03C LDRB W8, [X21 + 0xF06]
	0x031BD040 MOV V8.16B, V0.16B
	0x031BD044 MOV X19, X1
	0x031BD048 MOV X20, X0
	0x031BD04C TBNZ X8, 0x0, 0x31BD064
	0x031BD050 ADRP X0, 0xF38000
	0x031BD054 LDR X0, [X0 + 0x5A8]
	0x031BD058 BL 0x1C16CF4
	0x031BD05C MOVZ W8, 0x1
	0x031BD060 STRB W8, [X21 + 0xF06]
	0x031BD064 CBZ X20, 0x31BD0B4
	0x031BD068 ADRP X21, 0xF38000
	0x031BD06C LDR X21, [X21 + 0x5A8]
	0x031BD070 MOV X0, X20
	0x031BD074 MOV X1, X31
	0x031BD078 BL 0x3C32ECC
	0x031BD07C LDR X8, [X21]
	0x031BD080 MOV X20, X0
	0x031BD084 LDR W9, [X8 + 0xE0]
	0x031BD088 CBNZ W9, 0x31BD094
	0x031BD08C MOV X0, X8
	0x031BD090 BL 0x1C16DFC
	0x031BD094 MOV X0, X20
	0x031BD098 MOV X1, X19
	0x031BD09C LDP X20, X19, [X31 + 0x20]
	0x031BD0A0 LDP X30, X21, [X31 + 0x10]
	0x031BD0A4 MOV V0.16B, V8.16B
	0x031BD0A8 MOV X2, X31
	0x031BD0AC LDR V8, [X31], #0x30
	0x031BD0B0 B 0x31B0DF8
	0x031BD0B4 BL 0x1C16F20
	0x031BD0B8 STP D11, D10, [X31 - 0x40]!
	0x031BD0BC STP D9, D8, [X31 + 0x10]
	0x031BD0C0 STP X30, X21, [X31 + 0x20]
	0x031BD0C4 STP X20, X19, [X31 + 0x30]
	0x031BD0C8 ADRP X21, 0x121E000
	0x031BD0CC ADRP X20, 0xF38000
	0x031BD0D0 LDRB W8, [X21 + 0xF07]
	0x031BD0D4 LDR X20, [X20 + 0x5A8]
	0x031BD0D8 MOV V8.16B, V3.16B
	0x031BD0DC MOV V9.16B, V2.16B
	0x031BD0E0 MOV V10.16B, V1.16B
	0x031BD0E4 MOV V11.16B, V0.16B
	0x031BD0E8 MOV X19, X0
	0x031BD0EC TBNZ X8, 0x0, 0x31BD104
	0x031BD0F0 ADRP X0, 0xF38000
	0x031BD0F4 LDR X0, [X0 + 0x5A8]
	0x031BD0F8 BL 0x1C16CF4
	0x031BD0FC MOVZ W8, 0x1
	0x031BD100 STRB W8, [X21 + 0xF07]
	0x031BD104 LDR X0, [X20]
	0x031BD108 LDR W8, [X0 + 0xE0]
	0x031BD10C CBNZ W8, 0x31BD114
	0x031BD110 BL 0x1C16DFC
	0x031BD114 MOV X0, X19
	0x031BD118 MOV V2.16B, V9.16B
	0x031BD11C MOV V3.16B, V8.16B
	0x031BD120 LDP X20, X19, [X31 + 0x30]
	0x031BD124 LDP X30, X21, [X31 + 0x20]
	0x031BD128 LDP D9, D8, [X31 + 0x10]
	0x031BD12C MOV V0.16B, V11.16B
	0x031BD130 MOV V1.16B, V10.16B
	0x031BD134 MOV X1, X31
	0x031BD138 LDP D11, D10, [X31], #0x40
	0x031BD13C B 0x31B1484
	0x031BD140 STR D8, [X31 - 0x30]!
	0x031BD144 STR X30, [X31 + 0x8]
	0x031BD148 STP X22, X21, [X31 + 0x10]
	0x031BD14C STP X20, X19, [X31 + 0x20]
	0x031BD150 ADRP X21, 0x121E000
	0x031BD154 ADRP X22, 0xF38000
	0x031BD158 LDRB W8, [X21 + 0xF08]
	0x031BD15C LDR X22, [X22 + 0x5A8]
	0x031BD160 MOV V8.16B, V0.16B
	0x031BD164 MOV X19, X1
	0x031BD168 MOV X20, X0
	0x031BD16C TBNZ X8, 0x0, 0x31BD184
	0x031BD170 ADRP X0, 0xF38000
	0x031BD174 LDR X0, [X0 + 0x5A8]
	0x031BD178 BL 0x1C16CF4
	0x031BD17C MOVZ W8, 0x1
	0x031BD180 STRB W8, [X21 + 0xF08]
	0x031BD184 LDR X0, [X22]
	0x031BD188 LDR W8, [X0 + 0xE0]
	0x031BD18C CBNZ W8, 0x31BD194
	0x031BD190 BL 0x1C16DFC
	0x031BD194 MOV X0, X20
	0x031BD198 MOV X1, X19
	0x031BD19C LDP X20, X19, [X31 + 0x20]
	0x031BD1A0 LDP X22, X21, [X31 + 0x10]
	0x031BD1A4 LDR X30, [X31 + 0x8]
	0x031BD1A8 MOV V0.16B, V8.16B
	0x031BD1AC MOV X2, X31
	0x031BD1B0 LDR V8, [X31], #0x30
	0x031BD1B4 B 0x31B1808
	0x031BD1B8 STR D8, [X31 - 0x30]!
	0x031BD1BC STR X30, [X31 + 0x8]
	0x031BD1C0 STP X22, X21, [X31 + 0x10]
	0x031BD1C4 STP X20, X19, [X31 + 0x20]
	0x031BD1C8 ADRP X21, 0x121E000

ISIL:
	001 Move [X31-112], D11
	002 Move [X31-104], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X27
	007 Move [X31+48], X26
	008 Move [X31+56], X25
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X20, 0x1220000
	016 Move X21, 0xF64000
	017 Move W8, [X20+3817]
	018 Move X21, [X21+928]
	019 Move W19, W0
	020 Move V8, V3
	021 Move V9, V2
	022 Move V10, V1
	023 Move V11, V0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0xF64000
	029 Move X0, [X0+928]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+3817], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Call LTGUI.initRectCheck
	039 Move X22, X31
	040 Move W26, W31
	041 Move W23, 1
	042 Move W24, 32
	043 Move TEMP, 0
	044 Not TEMP
	045 Move W25, TEMP
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X21]
	052 Move X8, [X0+184]
	053 Move X9, [X8+40]
	054 Compare X9, 0
	055 JumpIfEqual {208}
	056 NotImplemented "Instruction LDRSW not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move W10, [X0+224]
	059 Compare W10, 0
	060 JumpIfNotEqual {67}
	061 Call 0x1C17DFC
	062 Move X0, [X21]
	063 Move X8, [X0+184]
	064 Move X9, [X8+40]
	065 Compare X9, 0
	066 JumpIfEqual {208}
	067 Move W10, [X9+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X9, X9, X22
	070 Move W9, [X9+32]
	071 Move TEMP, X9
	072 And TEMP, TEMP, -2147483648
	073 Compare TEMP, -2147483648
	074 JumpIfEqual {132}
	075 Move W9, [X0+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {81}
	078 Call 0x1C17DFC
	079 Move X8, [X21]
	080 Move X8, [X8+184]
	081 Move X8, [X8+48]
	082 Compare X8, 0
	083 JumpIfEqual {208}
	084 Move W9, [X8+24]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Add X8, X8, X22
	087 Move W27, [X8+32]
	088 Move X0, X31
	089 Call Time.get_frameCount
	090 Move X8, [X21]
	091 Move W20, W0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {98}
	095 Move X0, X8
	096 Call 0x1C17DFC
	097 Move X8, [X21]
	098 Move X9, [X8+184]
	099 Move X10, [X9+40]
	100 Compare X10, 0
	101 JumpIfEqual {208}
	102 Move W11, [X10+24]
	103 Add W12, W27, 1
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Add X8, X10, X22
	107 Move [X8+32], W25
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Add X10, X10, X22
	110 Move W10, [X10+32]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move W10, [X8+224]
	113 Compare W10, 0
	114 JumpIfNotEqual {119}
	115 Move X0, X8
	116 Call 0x1C17DFC
	117 Move X8, [X21]
	118 Move X9, [X8+184]
	119 Move X8, [X9+32]
	120 Compare X8, 0
	121 JumpIfEqual {208}
	122 Move W9, [X8+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Add X8, X8, X24
	125 Move S0, [X8]
	126 Move S1, [X8+4]
	127 Move S2, [X8+8]
	128 Move S3, [X8+12]
	129 Call LTGUI.pressedWithinRect, X0
	130 Xor W8, W0, 1
	131 And W23, W23, W8
	132 Move TEMP, X26
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfEqual {189}
	136 Move X0, [X21]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {142}
	140 Call 0x1C17DFC
	141 Move X0, [X21]
	142 Move X8, [X0+184]
	143 Move X9, [X8+40]
	144 Compare X9, 0
	145 JumpIfEqual {208}
	146 Move W10, [X9+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Add X10, X9, X22
	149 Move W10, [X10+32]
	150 Move TEMP, X10
	151 And TEMP, TEMP, -2147483648
	152 Compare TEMP, -2147483648
	153 JumpIfEqual {155}
	154 Move W26, W31
	155 Move W10, [X0+224]
	156 Compare W10, 0
	157 JumpIfNotEqual {164}
	158 Call 0x1C17DFC
	159 Move X8, [X21]
	160 Move X8, [X8+184]
	161 Move X9, [X8+40]
	162 Compare X9, 0
	163 JumpIfEqual {208}
	164 Move W10, [X9+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Add X9, X9, X22
	167 Move [X9+32], W19
	168 Move X8, [X8+32]
	169 Compare X8, 0
	170 JumpIfEqual {208}
	171 Move W9, [X8+24]
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Add X8, X8, X24
	174 Move [X8], S11
	175 Move [X8+8], S10
	176 Move [X8+8], S9
	177 Move [X8+16], S8
	178 Move X8, [X21]
	179 Move X0, X31
	180 Move X8, [X8+184]
	181 Move X20, [X8+48]
	182 Call Time.get_frameCount
	183 Compare X20, 0
	184 JumpIfEqual {208}
	185 Move W8, [X20+24]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Add X8, X20, X22
	188 Move [X8+32], W0
	189 Move W26, 1
	190 Add X22, X22, 1
	191 Add X24, X24, 16
	192 And W0, W23, 1
	193 Move X20, [X31+96]
	194 Move X19, [X31+104]
	195 Move X22, [X31+80]
	196 Move X21, [X31+88]
	197 Move X24, [X31+64]
	198 Move X23, [X31+72]
	199 Move X26, [X31+48]
	200 Move X25, [X31+56]
	201 Move X30, [X31+32]
	202 Move X27, [X31+40]
	203 Move D9, [X31+16]
	204 Move D8, [X31+24]
	205 Move D11, [X31+112]
	206 Move D10, [X31+120]
	207 Return X0
	208 Call 0x1C17F20
	209 Call 0x1C17F28

Method: System.Boolean pressedWithinRect(UnityEngine.Rect rect)

Disassembly:
	0x031BD1CC ADRP X22, 0xF38000
	0x031BD1D0 LDRB W8, [X21 + 0xF09]
	0x031BD1D4 LDR X22, [X22 + 0x5A8]
	0x031BD1D8 MOV V8.16B, V0.16B
	0x031BD1DC MOV X19, X1
	0x031BD1E0 MOV X20, X0
	0x031BD1E4 TBNZ X8, 0x0, 0x31BD1FC
	0x031BD1E8 ADRP X0, 0xF38000
	0x031BD1EC LDR X0, [X0 + 0x5A8]
	0x031BD1F0 BL 0x1C16CF4
	0x031BD1F4 MOVZ W8, 0x1
	0x031BD1F8 STRB W8, [X21 + 0xF09]
	0x031BD1FC LDR X0, [X22]
	0x031BD200 LDR W8, [X0 + 0xE0]
	0x031BD204 CBNZ W8, 0x31BD20C
	0x031BD208 BL 0x1C16DFC
	0x031BD20C MOV X0, X20
	0x031BD210 MOV X1, X19
	0x031BD214 LDP X20, X19, [X31 + 0x20]
	0x031BD218 LDP X22, X21, [X31 + 0x10]
	0x031BD21C LDR X30, [X31 + 0x8]
	0x031BD220 MOV V0.16B, V8.16B
	0x031BD224 MOV X2, X31
	0x031BD228 LDR V8, [X31], #0x30
	0x031BD22C B 0x31B18B8
	0x031BD230 STP D11, D10, [X31 - 0x40]!
	0x031BD234 STP D9, D8, [X31 + 0x10]
	0x031BD238 STR X30, [X31 + 0x20]
	0x031BD23C STP X20, X19, [X31 + 0x30]
	0x031BD240 ADRP X20, 0x121E000
	0x031BD244 LDRB W8, [X20 + 0xF0A]
	0x031BD248 MOV V8.16B, V3.16B
	0x031BD24C MOV V9.16B, V2.16B
	0x031BD250 MOV V10.16B, V1.16B
	0x031BD254 MOV V11.16B, V0.16B
	0x031BD258 MOV X19, X0
	0x031BD25C TBNZ X8, 0x0, 0x31BD274
	0x031BD260 ADRP X0, 0xF38000
	0x031BD264 LDR X0, [X0 + 0x5A8]
	0x031BD268 BL 0x1C16CF4
	0x031BD26C MOVZ W8, 0x1
	0x031BD270 STRB W8, [X20 + 0xF0A]
	0x031BD274 CBZ X19, 0x31BD2D0
	0x031BD278 ADRP X20, 0xF38000
	0x031BD27C LDR X20, [X20 + 0x5A8]
	0x031BD280 MOV X0, X19
	0x031BD284 MOV X1, X31
	0x031BD288 BL 0x3C32ECC
	0x031BD28C LDR X8, [X20]
	0x031BD290 MOV X19, X0
	0x031BD294 LDR W9, [X8 + 0xE0]
	0x031BD298 CBNZ W9, 0x31BD2A4

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0x121F000
	011 Move X20, 0xF63000
	012 Move W8, [X19+3818]
	013 Move X20, [X20+928]
	014 Move V8, V3
	015 Move V10, V2
	016 Move V9, V1
	017 Move V11, V0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF63000
	023 Move X0, [X0+928]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+3818], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LTGUI.firstTouch
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move X0, X31
	035 Move V13, V0
	036 Move V12, V1
	037 Call Screen.get_height
	038 Move W8, W0
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move W0, W31
	041 Add S0, S11, S10
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 NotImplemented "Instruction SCVTF not yet implemented."
	044 Subtract S0, S0, S12
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Add S1, S9, S8
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Move W0, W31
	050 Move X20, [X31+64]
	051 Move X19, [X31+72]
	052 Move X30, [X31+48]
	053 Move D9, [X31+32]
	054 Move D8, [X31+40]
	055 Move D11, [X31+16]
	056 Move D10, [X31+24]
	057 Move D13, [X31+80]
	058 Move D12, [X31+88]
	059 Return X0

Method: System.Boolean checkWithinRect(UnityEngine.Vector2 vec2, UnityEngine.Rect rect)

Disassembly:
	0x031BD30C CBZ X20, 0x31BD35C
	0x031BD310 ADRP X21, 0xF38000
	0x031BD314 LDR X21, [X21 + 0x5A8]
	0x031BD318 MOV X0, X20
	0x031BD31C MOV X1, X31
	0x031BD320 BL 0x3C32ECC
	0x031BD324 LDR X8, [X21]
	0x031BD328 MOV X20, X0
	0x031BD32C LDR W9, [X8 + 0xE0]
	0x031BD330 CBNZ W9, 0x31BD33C
	0x031BD334 MOV X0, X8
	0x031BD338 BL 0x1C16DFC
	0x031BD33C MOV X0, X20
	0x031BD340 MOV X1, X19
	0x031BD344 LDP X20, X19, [X31 + 0x20]
	0x031BD348 LDP X30, X21, [X31 + 0x10]
	0x031BD34C MOV V0.16B, V8.16B
	0x031BD350 MOV X2, X31
	0x031BD354 LDR V8, [X31], #0x30
	0x031BD358 B 0x31B1808
	0x031BD35C BL 0x1C16F20
	0x031BD360 STR D8, [X31 - 0x30]!
	0x031BD364 STP X30, X21, [X31 + 0x10]
	0x031BD368 STP X20, X19, [X31 + 0x20]
	0x031BD36C ADRP X21, 0x121E000
	0x031BD370 LDRB W8, [X21 + 0xF0C]
	0x031BD374 MOV V8.16B, V0.16B
	0x031BD378 MOV X19, X1
	0x031BD37C MOV X20, X0
	0x031BD380 TBNZ X8, 0x0, 0x31BD398
	0x031BD384 ADRP X0, 0xF38000

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move X0, X31
	009 Move V8, V5
	010 Move V11, V4
	011 Move V9, V3
	012 Move V12, V2
	013 Move V10, V1
	014 Move V13, V0
	015 Call Screen.get_height
	016 Move W8, W0
	017 NotImplemented "Instruction FCMP not yet implemented."
	018 Move W0, W31
	019 Add S0, S12, S11
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 NotImplemented "Instruction SCVTF not yet implemented."
	022 Subtract S0, S0, S10
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Add S1, S9, S8
	025 NotImplemented "Instruction FCMP not yet implemented."
	026 NotImplemented "Instruction CSET not yet implemented."
	027 Move X30, [X31+48]
	028 Move D9, [X31+32]
	029 Move D8, [X31+40]
	030 Move D11, [X31+16]
	031 Move D10, [X31+24]
	032 Move D13, [X31+64]
	033 Move D12, [X31+72]
	034 Return X0

Method: UnityEngine.Vector2 firstTouch()

Disassembly:
	0x031BD29C MOV X0, X8
	0x031BD2A0 BL 0x1C16DFC
	0x031BD2A4 MOV X0, X19
	0x031BD2A8 MOV V2.16B, V9.16B
	0x031BD2AC MOV V3.16B, V8.16B
	0x031BD2B0 LDP X20, X19, [X31 + 0x30]
	0x031BD2B4 LDR X30, [X31 + 0x20]
	0x031BD2B8 LDP D9, D8, [X31 + 0x10]
	0x031BD2BC MOV V0.16B, V11.16B
	0x031BD2C0 MOV V1.16B, V10.16B
	0x031BD2C4 MOV X1, X31
	0x031BD2C8 LDP D11, D10, [X31], #0x40
	0x031BD2CC B 0x31B1484
	0x031BD2D0 BL 0x1C16F20
	0x031BD2D4 STR D8, [X31 - 0x30]!
	0x031BD2D8 STP X30, X21, [X31 + 0x10]
	0x031BD2DC STP X20, X19, [X31 + 0x20]
	0x031BD2E0 ADRP X21, 0x121E000
	0x031BD2E4 LDRB W8, [X21 + 0xF0B]
	0x031BD2E8 MOV V8.16B, V0.16B
	0x031BD2EC MOV X19, X1
	0x031BD2F0 MOV X20, X0
	0x031BD2F4 TBNZ X8, 0x0, 0x31BD30C
	0x031BD2F8 ADRP X0, 0xF38000
	0x031BD2FC LDR X0, [X0 + 0x5A8]
	0x031BD300 BL 0x1C16CF4
	0x031BD304 MOVZ W8, 0x1
	0x031BD308 STRB W8, [X21 + 0xF0B]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, X31
	003 Call Input.get_touchCount
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X0, X31
	006 Call Input.get_touches
	007 Compare X0, 0
	008 JumpIfEqual {29}
	009 Move W8, [X0+24]
	010 Compare W8, 0
	011 JumpIfEqual {30}
	012 Add X0, X0, 32
	013 Move X1, X31
	014 Call Touch.get_position, X0
	015 Move W0, W31
	016 Move X1, X31
	017 Call Input.GetMouseButton, X0
	018 Move TEMP, X0
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfNotEqual {24}
	022 Move X0, X31
	023 Call Input.get_mousePosition
	024 Move W8, 0xFF800000
	025 Move S1, W8
	026 Move V0, V1
	027 Move X30, [X31+16]
	028 Return X0
	029 Call 0x1C17F20
	030 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x031BD388 LDR X0, [X0 + 0x5A8]
	0x031BD38C BL 0x1C16CF4

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x031BD390 MOVZ W8, 0x1
	0x031BD394 STRB W8, [X21 + 0xF0C]
	0x031BD398 CBZ X20, 0x31BD3E8
	0x031BD39C ADRP X21, 0xF38000
	0x031BD3A0 LDR X21, [X21 + 0x5A8]
	0x031BD3A4 MOV X0, X20
	0x031BD3A8 MOV X1, X31
	0x031BD3AC BL 0x3C32ECC
	0x031BD3B0 LDR X8, [X21]
	0x031BD3B4 MOV X20, X0
	0x031BD3B8 LDR W9, [X8 + 0xE0]
	0x031BD3BC CBNZ W9, 0x31BD3C8
	0x031BD3C0 MOV X0, X8
	0x031BD3C4 BL 0x1C16DFC
	0x031BD3C8 MOV X0, X20
	0x031BD3CC MOV X1, X19
	0x031BD3D0 LDP X20, X19, [X31 + 0x20]
	0x031BD3D4 LDP X30, X21, [X31 + 0x10]
	0x031BD3D8 MOV V0.16B, V8.16B
	0x031BD3DC MOV X2, X31
	0x031BD3E0 LDR V8, [X31], #0x30
	0x031BD3E4 B 0x31B18B8
	0x031BD3E8 BL 0x1C16F20
	0x031BD3EC STP D9, D8, [X31 - 0x30]!
	0x031BD3F0 STP X30, X21, [X31 + 0x10]
	0x031BD3F4 STP X20, X19, [X31 + 0x20]
	0x031BD3F8 ADRP X20, 0x121E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x121F000
	005 Move X20, 0xF63000
	006 Move W8, [X19+3819]
	007 Move X20, [X20+928]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF63000
	013 Move X0, [X0+928]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3819], W8
	017 Move X8, [X20]
	018 Move X9, -40693760
	019 Move V0, [X9+3248]
	020 Move W10, 24
	021 Move X9, [X8+184]
	022 Move V1, 0
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move [X9], D0
	026 Move [X9+8], W10
	027 Move [X9+4], V1
	028 Move X8, [X8+184]
	029 Move [X8+80], W31
	030 Move [X8+84], W31
	031 Move X30, [X31+32]
	032 Return 

