Type: LeanTween/<>c__DisplayClass196_0

Method: System.Void .ctor()

Disassembly:
	0x031B654C LDP D11, D10, [X31 + 0x30]
	0x031B6550 LDP D13, D12, [X31 + 0x20]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <followLinear>b__0()

Disassembly:
	0x031B8D7C ADRP X8, 0xFFFFFFFFFD932000
	0x031B8D80 LDR V0, [X8 + 0x410]
	0x031B8D84 FADD S0, S12, S0
	0x031B8D88 FCMP S0, 0x0
	0x031B8D8C B.MI 0x31B8DC4
	0x031B8D90 FMOV S11, 1
	0x031B8D94 FCMP S0, S11
	0x031B8D98 B.GT 0x31B8DC4
	0x031B8D9C FMOV S1, 1
	0x031B8DA0 FCMP S0, S1
	0x031B8DA4 MOV V11.16B, V0.16B
	0x031B8DA8 B.LS 0x31B8DC4
	0x031B8DAC LDP X20, X19, [X31 + 0x40]
	0x031B8DB0 LDP X30, X21, [X31 + 0x30]
	0x031B8DB4 LDP D9, D8, [X31 + 0x20]
	0x031B8DB8 LDP D11, D10, [X31 + 0x10]
	0x031B8DBC LDR V12, [X31], #0x50
	0x031B8DC0 RET
	0x031B8DC4 MOV X0, X19
	0x031B8DC8 MOV X1, X31
	0x031B8DCC BL 0x3C3F49C
	0x031B8DD0 MOV X21, X0
	0x031B8DD4 MOV X0, X20
	0x031B8DD8 MOV V0.16B, V11.16B
	0x031B8DDC BL 0x31B8988
	0x031B8DE0 CBZ X21, 0x31B8E1C
	0x031B8DE4 MOV X0, X21
	0x031B8DE8 MOV X1, X31
	0x031B8DEC BL 0x3C3DE4C
	0x031B8DF0 MOV X0, X19
	0x031B8DF4 MOV V3.16B, V10.16B
	0x031B8DF8 MOV V4.16B, V9.16B
	0x031B8DFC MOV V5.16B, V8.16B
	0x031B8E00 LDP X20, X19, [X31 + 0x40]
	0x031B8E04 LDP X30, X21, [X31 + 0x30]
	0x031B8E08 LDP D9, D8, [X31 + 0x20]
	0x031B8E0C LDP D11, D10, [X31 + 0x10]
	0x031B8E10 MOV X1, X31
	0x031B8E14 LDR V12, [X31], #0x50
	0x031B8E18 B 0x3C40744
	0x031B8E1C BL 0x1C16F20
	0x031B8E20 STP D15, D14, [X31 - 0x60]!
	0x031B8E24 STP D13, D12, [X31 + 0x10]
	0x031B8E28 STP D11, D10, [X31 + 0x20]
	0x031B8E2C STP D9, D8, [X31 + 0x30]
	0x031B8E30 STP X30, X21, [X31 + 0x40]
	0x031B8E34 STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+16]
	009 Compare X0, 0
	010 JumpIfEqual {60}
	011 Move X20, [X0+232]
	012 Compare X20, 0
	013 JumpIfEqual {60}
	014 Move S8, [X20+36]
	015 Move S9, [X20+40]
	016 Move V10, [X20+44]
	017 Move X1, X31
	018 Call LTDescr.get_toTrans, X0
	019 Compare X0, 0
	020 JumpIfEqual {60}
	021 Move X1, X31
	022 Call Transform.get_localPosition, X0
	023 Move V6, [X19+24]
	024 Move V3, V0
	025 Move V4, V1
	026 Move V5, V2
	027 Move S7, -1
	028 Move V0, V8
	029 Move V1, V9
	030 Move V2, V10
	031 Call LeanSmooth.linear, X0, X1, V0, V1
	032 Move [X20+36], S0
	033 Move [X20+44], S1
	034 Move [X20+44], S2
	035 Move X8, [X19+16]
	036 Compare X8, 0
	037 JumpIfEqual {60}
	038 Move X9, [X8+232]
	039 Compare X9, 0
	040 JumpIfEqual {60}
	041 Move X0, [X8+88]
	042 Compare X0, 0
	043 JumpIfEqual {60}
	044 Move V0, [X9+44]
	045 Move V1, [X8+116]
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X30, [X31+24]
	051 Move D9, [X31+8]
	052 Move D8, [X31+16]
	053 Add S2, S0, S1
	054 Add V0, V3, V4
	055 Move S1, V0.S[1]
	056 Move X1, X31
	057 Move V10, [X31+48]
	058 Call Transform.set_localPosition, X0, X1
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <followLinear>b__1()

Disassembly:
	0x031B8E38 FMOV S0, W31
	0x031B8E3C MOV X19, X0
	0x031B8E40 BL 0x31B8988
	0x031B8E44 MOV V8.16B, V0.16B
	0x031B8E48 MOV V9.16B, V1.16B
	0x031B8E4C MOV V10.16B, V2.16B
	0x031B8E50 MOVZ W20, 0x1
	0x031B8E54 MOVZ W21, 0x42F00000
	0x031B8E58 FMOV S15, 0.5
	0x031B8E5C FMOV S14, 1
	0x031B8E60 SCVTF S0, W20
	0x031B8E64 FMOV S1, W21
	0x031B8E68 FDIV S0, S0, S1
	0x031B8E6C MOV X0, X19
	0x031B8E70 BL 0x31B8988
	0x031B8E74 LDP W9, W8, [X19 + 0x30]
	0x031B8E78 MOV V11.16B, V0.16B
	0x031B8E7C FMOV S0, W31
	0x031B8E80 MOV V12.16B, V1.16B
	0x031B8E84 CMP W8, W9
	0x031B8E88 FCSEL S1, S0, S15, EQ
	0x031B8E8C FCSEL S0, S14, S15, EQ
	0x031B8E90 MOV V13.16B, V2.16B
	0x031B8E94 FMOV S3, 1
	0x031B8E98 MOV V2.16B, V0.16B
	0x031B8E9C MOV X0, X31
	0x031B8EA0 BL 0x3C0D030
	0x031B8EA4 MOV V0.16B, V11.16B
	0x031B8EA8 MOV V1.16B, V12.16B
	0x031B8EAC MOV V2.16B, V13.16B
	0x031B8EB0 MOV V3.16B, V8.16B
	0x031B8EB4 MOV V4.16B, V9.16B
	0x031B8EB8 MOV V5.16B, V10.16B
	0x031B8EBC MOV X0, X31
	0x031B8EC0 BL 0x3C0CB04
	0x031B8EC4 LDR W8, [X19 + 0x30]
	0x031B8EC8 ADD W20, W20, 0x1
	0x031B8ECC CMP W20, 0x79
	0x031B8ED0 MOV V8.16B, V11.16B

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {48}
	010 Move X19, [X8+88]
	011 Compare X19, 0
	012 JumpIfEqual {48}
	013 Move X20, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move X0, [X20+16]
	018 Compare X0, 0
	019 JumpIfEqual {48}
	020 Move X1, X31
	021 Move V8, V0
	022 Move V9, V1
	023 Move V10, V2
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {48}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move V6, [X20+24]
	030 Move V3, V0
	031 Move V4, V1
	032 Move V5, V2
	033 Move S7, -1
	034 Move V0, V8
	035 Move V1, V9
	036 Move V2, V10
	037 Call LeanSmooth.linear, X0, X1, V0, V1
	038 Move X0, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+24]
	042 Move D9, [X31+8]
	043 Move D8, [X31+16]
	044 Move X1, X31
	045 Move V10, [X31+48]
	046 Call Transform.set_position, X0, X1
	047 Return 
	048 Call 0x1C17F20

Method: System.Void <followLinear>b__2()

Disassembly:
	0x031B8ED4 MOV V9.16B, V12.16B
	0x031B8ED8 MOV V10.16B, V13.16B
	0x031B8EDC STR W8, [X19 + 0x34]
	0x031B8EE0 B.NE 0x31B8E60
	0x031B8EE4 LDP X20, X19, [X31 + 0x50]
	0x031B8EE8 LDP X30, X21, [X31 + 0x40]
	0x031B8EEC LDP D9, D8, [X31 + 0x30]
	0x031B8EF0 LDP D11, D10, [X31 + 0x20]
	0x031B8EF4 LDP D13, D12, [X31 + 0x10]
	0x031B8EF8 LDP D15, D14, [X31], #0x60
	0x031B8EFC RET
	0x031B8F00 SUB X31, X31, 0x90
	0x031B8F04 STP D15, D14, [X31 + 0x10]
	0x031B8F08 STP D13, D12, [X31 + 0x20]
	0x031B8F0C STP D11, D10, [X31 + 0x30]
	0x031B8F10 STP D9, D8, [X31 + 0x40]
	0x031B8F14 STP X30, X25, [X31 + 0x50]
	0x031B8F18 STP X24, X23, [X31 + 0x60]
	0x031B8F1C STP X22, X21, [X31 + 0x70]
	0x031B8F20 STP X20, X19, [X31 + 0x80]
	0x031B8F24 ADRP X20, 0x1221000
	0x031B8F28 LDRB W8, [X20 + 0x5D7]
	0x031B8F2C MOV V11.16B, V3.16B
	0x031B8F30 MOV V8.16B, V2.16B
	0x031B8F34 MOV V9.16B, V1.16B
	0x031B8F38 MOV V10.16B, V0.16B
	0x031B8F3C MOV X19, X0
	0x031B8F40 FMOV S12, 1
	0x031B8F44 CBNZ W8, 0x31B8F5C
	0x031B8F48 ADRP X0, 0xF3B000
	0x031B8F4C LDR X0, [X0 + 0x5A8]
	0x031B8F50 BL 0x1C16CF4
	0x031B8F54 MOVZ W8, 0x1
	0x031B8F58 STRB W8, [X20 + 0x5D7]
	0x031B8F5C ADRP X20, 0xF3B000
	0x031B8F60 LDR X20, [X20 + 0x5A8]
	0x031B8F64 FDIV S12, S12, S11
	0x031B8F68 LDR X0, [X20]
	0x031B8F6C LDR W8, [X0 + 0xE0]
	0x031B8F70 CBNZ W8, 0x31B8F78
	0x031B8F74 BL 0x1C16DFC
	0x031B8F78 FCVT S11, S12
	0x031B8F7C ADD X0, X31, 0x8
	0x031B8F80 MOV V0.16B, V11.16B
	0x031B8F84 BL 0x3EB1C00
	0x031B8F88 FCMP S12, 0x0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {51}
	010 Move X19, [X8+88]
	011 Compare X19, 0
	012 JumpIfEqual {51}
	013 Move X20, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call Transform.get_localPosition, X0
	017 Move X0, [X20+16]
	018 Compare X0, 0
	019 JumpIfEqual {51}
	020 Move X1, X31
	021 Move V8, V0
	022 Call LTDescr.get_toTrans, X0
	023 Compare X0, 0
	024 JumpIfEqual {51}
	025 Move X1, X31
	026 Call Transform.get_localPosition, X0
	027 Move V10, [X20+24]
	028 Move X0, X31
	029 Move V9, V0
	030 Call Time.get_deltaTime
	031 Multiply S1, S10, S0
	032 NotImplemented "Instruction FNMUL not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Add S0, S8, S0
	036 Subtract S1, S0, S9
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V9, V0
	040 Move X0, X19
	041 Move V0, V9
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+24]
	045 Move D9, [X31+8]
	046 Move D8, [X31+16]
	047 Move X1, X31
	048 Move V10, [X31+48]
	049 Call LeanTweenExt.LeanSetLocalPosX, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void <followLinear>b__3()

Disassembly:
	0x031B8F8C B.GE 0x31B8FA8
	0x031B8F90 FMOV D1, -0.5
	0x031B8F94 FCMP D0, D1
	0x031B8F98 B.NE 0x31B8FD0
	0x031B8F9C LDR V0, [X31 + 0x8]
	0x031B8FA0 FMOV D1, -1
	0x031B8FA4 B 0x31B8FBC
	0x031B8FA8 FMOV D1, 0.5
	0x031B8FAC FCMP D0, D1
	0x031B8FB0 B.NE 0x31B8FDC
	0x031B8FB4 LDR V0, [X31 + 0x8]
	0x031B8FB8 FMOV D1, 1
	0x031B8FBC FCVTZS X8, D0
	0x031B8FC0 FADD D1, D0, D1
	0x031B8FC4 ANDS X31, X8, 0x1
	0x031B8FC8 FCSEL D0, D0, D1, EQ
	0x031B8FCC B 0x31B8FE4
	0x031B8FD0 FADD D0, D11, D1
	0x031B8FD4 FRINTP D0, D0
	0x031B8FD8 B 0x31B8FE4
	0x031B8FDC FADD D0, D11, D1
	0x031B8FE0 FRINTM D0, D0
	0x031B8FE4 MOVZ X8, 0x7FF00000
	0x031B8FE8 FMOV D1, X8
	0x031B8FEC FCVTZS W9, D0
	0x031B8FF0 FCMP D0, D1
	0x031B8FF4 MOVZ W8, 0x80000000
	0x031B8FF8 CSEL W21, W8, W9, EQ
	0x031B8FFC CMP W21, 0x1
	0x031B9000 SCVTF S14, W21
	0x031B9004 B.LT 0x31B90A4
	0x031B9008 MOVN W8, 0x80800000
	0x031B900C MOV W22, W31
	0x031B9010 MOV W23, W31
	0x031B9014 ADRP X24, 0x121F000
	0x031B9018 FMOV S15, W8
	0x031B901C MOVZ W25, 0x1
	0x031B9020 SCVTF S0, W23
	0x031B9024 FDIV S0, S0, S14
	0x031B9028 MOV X0, X19
	0x031B902C BL 0x31B8988
	0x031B9030 LDRB W8, [X24 + 0x85C]
	0x031B9034 MOV V11.16B, V0.16B
	0x031B9038 MOV V12.16B, V1.16B
	0x031B903C MOV V13.16B, V2.16B
	0x031B9040 CBNZ W8, 0x31B9050

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {51}
	010 Move X19, [X8+88]
	011 Compare X19, 0
	012 JumpIfEqual {51}
	013 Move X20, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call Transform.get_localPosition, X0
	017 Move X0, [X20+16]
	018 Compare X0, 0
	019 JumpIfEqual {51}
	020 Move X1, X31
	021 Move V8, V1
	022 Call LTDescr.get_toTrans, X0
	023 Compare X0, 0
	024 JumpIfEqual {51}
	025 Move X1, X31
	026 Call Transform.get_localPosition, X0
	027 Move V10, [X20+24]
	028 Move X0, X31
	029 Move V9, V1
	030 Call Time.get_deltaTime
	031 Multiply S1, S10, S0
	032 NotImplemented "Instruction FNMUL not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Add S0, S8, S0
	036 Subtract S1, S0, S9
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V9, V0
	040 Move X0, X19
	041 Move V0, V9
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+24]
	045 Move D9, [X31+8]
	046 Move D8, [X31+16]
	047 Move X1, X31
	048 Move V10, [X31+48]
	049 Call LeanTweenExt.LeanSetLocalPosY, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void <followLinear>b__4()

Disassembly:
	0x031B9044 MOV X0, X20
	0x031B9048 BL 0x1C16CF4
	0x031B904C STRB W25, [X24 + 0x85C]
	0x031B9050 LDR X0, [X20]
	0x031B9054 LDR W8, [X0 + 0xE0]
	0x031B9058 CBNZ W8, 0x31B9060
	0x031B905C BL 0x1C16DFC
	0x031B9060 FSUB S0, S10, S11
	0x031B9064 FSUB S1, S9, S12
	0x031B9068 FSUB S2, S8, S13
	0x031B906C FMUL S0, S0, S0
	0x031B9070 FMUL S1, S1, S1
	0x031B9074 FMUL S2, S2, S2
	0x031B9078 FADD S0, S0, S1
	0x031B907C FADD S0, S2, S0
	0x031B9080 FSQRT S0, S0
	0x031B9084 FCMP S0, S15
	0x031B9088 CSEL W22, W23, W22, MI
	0x031B908C ADD W23, W23, 0x1
	0x031B9090 FCSEL S15, S0, S15, MI
	0x031B9094 CMP W21, W23
	0x031B9098 B.NE 0x31B9020
	0x031B909C SCVTF S0, W22
	0x031B90A0 B 0x31B90A8
	0x031B90A4 FMOV S0, W31
	0x031B90A8 FDIV S0, S0, S14
	0x031B90AC LDP X20, X19, [X31 + 0x80]
	0x031B90B0 LDP X22, X21, [X31 + 0x70]
	0x031B90B4 LDP X24, X23, [X31 + 0x60]
	0x031B90B8 LDP X30, X25, [X31 + 0x50]
	0x031B90BC LDP D9, D8, [X31 + 0x40]
	0x031B90C0 LDP D11, D10, [X31 + 0x30]
	0x031B90C4 LDP D13, D12, [X31 + 0x20]
	0x031B90C8 LDP D15, D14, [X31 + 0x10]
	0x031B90CC ADD X31, X31, 0x90
	0x031B90D0 RET
	0x031B90D4 STP D15, D14, [X31 - 0x90]!
	0x031B90D8 STP D13, D12, [X31 + 0x10]
	0x031B90DC STP D11, D10, [X31 + 0x20]
	0x031B90E0 STP D9, D8, [X31 + 0x30]
	0x031B90E4 STR X30, [X31 + 0x40]
	0x031B90E8 STP X26, X25, [X31 + 0x50]
	0x031B90EC STP X24, X23, [X31 + 0x60]
	0x031B90F0 STP X22, X21, [X31 + 0x70]
	0x031B90F4 STP X20, X19, [X31 + 0x80]
	0x031B90F8 ADRP X22, 0x1222000

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {51}
	010 Move X19, [X8+88]
	011 Compare X19, 0
	012 JumpIfEqual {51}
	013 Move X20, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call Transform.get_localPosition, X0
	017 Move X0, [X20+16]
	018 Compare X0, 0
	019 JumpIfEqual {51}
	020 Move X1, X31
	021 Move V8, V2
	022 Call LTDescr.get_toTrans, X0
	023 Compare X0, 0
	024 JumpIfEqual {51}
	025 Move X1, X31
	026 Call Transform.get_localPosition, X0
	027 Move V10, [X20+24]
	028 Move X0, X31
	029 Move V9, V2
	030 Call Time.get_deltaTime
	031 Multiply S1, S10, S0
	032 NotImplemented "Instruction FNMUL not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Add S0, S8, S0
	036 Subtract S1, S0, S9
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V9, V0
	040 Move X0, X19
	041 Move V0, V9
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+24]
	045 Move D9, [X31+8]
	046 Move D8, [X31+16]
	047 Move X1, X31
	048 Move V10, [X31+48]
	049 Call LeanTweenExt.LeanSetLocalPosZ, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void <followLinear>b__5()

Disassembly:
	0x031B90FC LDRB W8, [X22 + 0xED6]
	0x031B9100 MOV W20, W2
	0x031B9104 MOV X21, X1
	0x031B9108 MOV X19, X0
	0x031B910C TBNZ X8, 0x0, 0x31B9148
	0x031B9110 ADRP X0, 0xF66000
	0x031B9114 LDR X0, [X0 + 0x418]
	0x031B9118 BL 0x1C16CF4
	0x031B911C ADRP X0, 0xF3C000
	0x031B9120 LDR X0, [X0 + 0x5A8]
	0x031B9124 BL 0x1C16CF4
	0x031B9128 ADRP X0, 0xF3C000
	0x031B912C LDR X0, [X0 + 0x9B0]
	0x031B9130 BL 0x1C16CF4
	0x031B9134 ADRP X0, 0xF66000
	0x031B9138 LDR X0, [X0 + 0x5A8]
	0x031B913C BL 0x1C16CF4
	0x031B9140 MOVZ W8, 0x1
	0x031B9144 STRB W8, [X22 + 0xED6]
	0x031B9148 CBZ X21, 0x31B9490
	0x031B914C LDR W1, [X21 + 0x18]
	0x031B9150 CMP W1, 0x3
	0x031B9154 B.LE 0x31B9414
	0x031B9158 ADRP X22, 0xF3C000
	0x031B915C LDR X22, [X22 + 0x9B0]
	0x031B9160 LDR X0, [X22]
	0x031B9164 BL 0x1C16D6C
	0x031B9168 STR X0, [X19 + 0x18]
	0x031B916C LDR W2, [X21 + 0x18]
	0x031B9170 MOV X1, X0
	0x031B9174 MOV X0, X21
	0x031B9178 MOV X3, X31
	0x031B917C BL 0x33A0C7C
	0x031B9180 LDR W9, [X21 + 0x18]
	0x031B9184 LDR X8, [X19 + 0x18]
	0x031B9188 SUB W9, W9, 0x3
	0x031B918C STR W9, [X19 + 0x30]
	0x031B9190 CBZ X8, 0x31B9490
	0x031B9194 LDR X9, [X8 + 0x18]
	0x031B9198 CMP W9, 0x1
	0x031B919C B.LS 0x31B9494
	0x031B91A0 AND X9, X9, 0x0
	0x031B91A4 MOV X10, INVALID
	0x031B91A8 ADD X10, X10, X9, 0x20, LSL
	0x031B91AC ORR X11, X31, 0x100000001
	0x031B91B0 CMP X10, X11

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {51}
	010 Move X19, [X8+88]
	011 Compare X19, 0
	012 JumpIfEqual {51}
	013 Move X20, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move X0, [X20+16]
	018 Compare X0, 0
	019 JumpIfEqual {51}
	020 Move X1, X31
	021 Move V8, V0
	022 Call LTDescr.get_toTrans, X0
	023 Compare X0, 0
	024 JumpIfEqual {51}
	025 Move X1, X31
	026 Call Transform.get_position, X0
	027 Move V10, [X20+24]
	028 Move X0, X31
	029 Move V9, V0
	030 Call Time.get_deltaTime
	031 Multiply S1, S10, S0
	032 NotImplemented "Instruction FNMUL not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Add S0, S8, S0
	036 Subtract S1, S0, S9
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V9, V0
	040 Move X0, X19
	041 Move V0, V9
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+24]
	045 Move D9, [X31+8]
	046 Move D8, [X31+16]
	047 Move X1, X31
	048 Move V10, [X31+48]
	049 Call LeanTweenExt.LeanSetPosX, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void <followLinear>b__6()

Disassembly:
	0x031B91B4 FMOV S8, W31
	0x031B91B8 B.LT 0x31B9260
	0x031B91BC ADRP X21, 0xF3A000
	0x031B91C0 LDR V9, [X8 + 0x2C]
	0x031B91C4 LDR V10, [X8 + 0x30]
	0x031B91C8 LDR X21, [X21 + 0x5A8]
	0x031B91CC MOV X23, X31
	0x031B91D0 FMOV S8, W31
	0x031B91D4 MOVZ W24, 0x1
	0x031B91D8 ADRP X25, 0x121F000
	0x031B91DC MOVZ W26, 0x1
	0x031B91E0 CMP X26, W9, UXTW
	0x031B91E4 B.CS 0x31B9494
	0x031B91E8 ADD X8, X8, X23
	0x031B91EC LDRB W9, [X25 + 0x85C]
	0x031B91F0 LDR V12, [X8 + 0x2C]
	0x031B91F4 LDR V11, [X8 + 0x30]
	0x031B91F8 CBNZ W9, 0x31B9208
	0x031B91FC MOV X0, X21
	0x031B9200 BL 0x1C16CF4
	0x031B9204 STRB W24, [X25 + 0x85C]
	0x031B9208 LDR X0, [X21]
	0x031B920C LDR W8, [X0 + 0xE0]
	0x031B9210 CBNZ W8, 0x31B9218
	0x031B9214 BL 0x1C16DFC
	0x031B9218 LDR X8, [X19 + 0x18]
	0x031B921C CBZ X8, 0x31B9490
	0x031B9220 FSUB S0, S12, S9
	0x031B9224 FSUB V1.2S, V11.2S, V10.2S
	0x031B9228 LDR X10, [X8 + 0x18]
	0x031B922C FMUL S0, S0, S0
	0x00000000 INVALID
	0x031B9234 FADD S0, S0, S1
	0x031B9238 MOV S1, V1.S[1]
	0x031B923C FADD S0, S1, S0
	0x031B9240 ADD X26, X26, 0x1
	0x031B9244 FSQRT S0, S0
	0x031B9248 AND X9, X10, 0x0
	0x031B924C SUB W10, W10, 0x1
	0x031B9250 FADD S8, S8, S0
	0x031B9254 CMP X26, W10, SXTW
	0x031B9258 ADD X23, X23, 0xC
	0x031B925C B.LT 0x31B91E0
	0x031B9260 TBZ X20, 0x0, 0x31B9468
	0x031B9264 ADRP X21, 0xF66000
	0x031B9268 LDR X21, [X21 + 0x418]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {51}
	010 Move X19, [X8+88]
	011 Compare X19, 0
	012 JumpIfEqual {51}
	013 Move X20, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move X0, [X20+16]
	018 Compare X0, 0
	019 JumpIfEqual {51}
	020 Move X1, X31
	021 Move V8, V1
	022 Call LTDescr.get_toTrans, X0
	023 Compare X0, 0
	024 JumpIfEqual {51}
	025 Move X1, X31
	026 Call Transform.get_position, X0
	027 Move V10, [X20+24]
	028 Move X0, X31
	029 Move V9, V1
	030 Call Time.get_deltaTime
	031 Multiply S1, S10, S0
	032 NotImplemented "Instruction FNMUL not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Add S0, S8, S0
	036 Subtract S1, S0, S9
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V9, V0
	040 Move X0, X19
	041 Move V0, V9
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+24]
	045 Move D9, [X31+8]
	046 Move D8, [X31+16]
	047 Move X1, X31
	048 Move V10, [X31+48]
	049 Call LeanTweenExt.LeanSetPosY, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void <followLinear>b__7()

Disassembly:
	0x031B926C LDR W20, [X19 + 0x30]
	0x031B9270 LDR X0, [X21]
	0x031B9274 LDR W8, [X0 + 0xE0]
	0x031B9278 CBNZ W8, 0x31B9284
	0x031B927C BL 0x1C16DFC
	0x031B9280 LDR X0, [X21]
	0x031B9284 LDR X8, [X0 + 0xB8]
	0x031B9288 LDR X0, [X22]
	0x031B928C LDP W8, W9, [X8]
	0x031B9290 MUL W10, W9, W20
	0x031B9294 SCVTF S1, W10
	0x031B9298 SCVTF S0, W9
	0x031B929C FDIV S1, S8, S1
	0x031B92A0 FDIV S1, S1, S0
	0x031B92A4 MOVZ W9, 0x7F800000
	0x031B92A8 STR S1, [X31 + 0x4C]
	0x031B92AC FDIV S1, S8, S1
	0x031B92B0 FMOV S0, W9
	0x031B92B4 FCVTPS W9, S1
	0x031B92B8 FRINTP S1, S1
	0x031B92BC MOVZ W10, 0x80000000
	0x031B92C0 FCMP S1, S0
	0x031B92C4 CSEL W9, W10, W9, EQ
	0x031B92C8 MUL W8, W9, W8
	0x031B92CC CMP W8, 0x2
	0x031B92D0 MOVZ W9, 0x2
	0x031B92D4 CSEL W20, W8, W9, GT
	0x031B92D8 MOV W1, W20
	0x031B92DC BL 0x1C16D6C
	0x031B92E0 STR X0, [X19 + 0x20]
	0x031B92E4 FMOV S0, W31
	0x031B92E8 MOV X0, X19
	0x031B92EC BL 0x31B94D8
	0x031B92F0 LDR X8, [X19 + 0x20]
	0x031B92F4 CBZ X8, 0x31B9490
	0x031B92F8 LDR W9, [X8 + 0x18]
	0x031B92FC CBZ W9, 0x31B9494
	0x031B9300 ADD W21, W20, 0x1
	0x031B9304 MOV V9.16B, V0.16B
	0x031B9308 MOV V8.16B, V1.16B
	0x031B930C MOV V10.16B, V2.16B
	0x031B9310 CMP W21, 0x1
	0x031B9314 MOVZ W22, 0x1
	0x031B9318 STP S0, S1, [X8 + 0x20]
	0x031B931C STR S2, [X8 + 0x28]
	0x031B9320 STR W31, [X19 + 0x10]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {51}
	010 Move X19, [X8+88]
	011 Compare X19, 0
	012 JumpIfEqual {51}
	013 Move X20, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call Transform.get_position, X0
	017 Move X0, [X20+16]
	018 Compare X0, 0
	019 JumpIfEqual {51}
	020 Move X1, X31
	021 Move V8, V2
	022 Call LTDescr.get_toTrans, X0
	023 Compare X0, 0
	024 JumpIfEqual {51}
	025 Move X1, X31
	026 Call Transform.get_position, X0
	027 Move V10, [X20+24]
	028 Move X0, X31
	029 Move V9, V2
	030 Call Time.get_deltaTime
	031 Multiply S1, S10, S0
	032 NotImplemented "Instruction FNMUL not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 Add S0, S8, S0
	036 Subtract S1, S0, S9
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move V9, V0
	040 Move X0, X19
	041 Move V0, V9
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+24]
	045 Move D9, [X31+8]
	046 Move D8, [X31+16]
	047 Move X1, X31
	048 Move V10, [X31+48]
	049 Call LeanTweenExt.LeanSetPosZ, X0, V0
	050 Return 
	051 Call 0x1C17F20

Method: System.Void <followLinear>b__8()

Disassembly:
	0x031B9324 B.LT 0x31B9460
	0x031B9328 SCVTF S15, W20
	0x031B932C ADRP X20, 0xF3A000
	0x031B9330 LDR X20, [X20 + 0x5A8]
	0x031B9334 MOV W23, W31
	0x031B9338 ADRP X24, 0x121F000
	0x031B933C MOVZ W25, 0xC
	0x031B9340 MOVZ W26, 0x1
	0x031B9344 SCVTF S0, W23
	0x031B9348 FDIV S14, S0, S15
	0x031B934C MOV X0, X19
	0x031B9350 MOV V0.16B, V14.16B
	0x031B9354 BL 0x31B94D8
	0x031B9358 LDRB W8, [X24 + 0x85C]
	0x031B935C MOV V11.16B, V0.16B
	0x031B9360 MOV V12.16B, V1.16B
	0x031B9364 MOV V13.16B, V2.16B
	0x031B9368 CBNZ W8, 0x31B9378
	0x031B936C MOV X0, X20
	0x031B9370 BL 0x1C16CF4
	0x031B9374 STRB W22, [X24 + 0x85C]
	0x031B9378 LDR X0, [X20]
	0x031B937C LDR W8, [X0 + 0xE0]
	0x031B9380 CBNZ W8, 0x31B9388
	0x031B9384 BL 0x1C16DFC
	0x031B9388 FSUB S0, S11, S9
	0x031B938C FSUB S1, S12, S8
	0x031B9390 FSUB S2, S13, S10
	0x031B9394 FMUL S0, S0, S0
	0x031B9398 FMUL S1, S1, S1
	0x031B939C FMUL S2, S2, S2
	0x031B93A0 FADD S0, S0, S1
	0x031B93A4 FADD S0, S2, S0
	0x031B93A8 FMOV S1, 1
	0x031B93AC FCMP S14, S1
	0x031B93B0 FSQRT S0, S0
	0x031B93B4 B.GE 0x31B93C4
	0x031B93B8 LDR V1, [X31 + 0x4C]
	0x031B93BC FCMP S0, S1

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+16]
	008 Compare X8, 0
	009 JumpIfEqual {48}
	010 Move X19, [X8+88]
	011 Compare X19, 0
	012 JumpIfEqual {48}
	013 Move X20, X0
	014 Move X0, X19
	015 Move X1, X31
	016 Call Transform.get_localScale, X0
	017 Move X0, [X20+16]
	018 Compare X0, 0
	019 JumpIfEqual {48}
	020 Move X1, X31
	021 Move V8, V0
	022 Move V9, V1
	023 Move V10, V2
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {48}
	027 Move X1, X31
	028 Call Transform.get_localScale, X0
	029 Move V6, [X20+24]
	030 Move V3, V0
	031 Move V4, V1
	032 Move V5, V2
	033 Move S7, -1
	034 Move V0, V8
	035 Move V1, V9
	036 Move V2, V10
	037 Call LeanSmooth.linear, X0, X1, V0, V1
	038 Move X0, X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+24]
	042 Move D9, [X31+8]
	043 Move D8, [X31+16]
	044 Move X1, X31
	045 Move V10, [X31+48]
	046 Call Transform.set_localScale, X0, X1
	047 Return 
	048 Call 0x1C17F20

Method: System.Void <followLinear>b__9()

Disassembly:
	0x031B93C0 B.LT 0x31B9404
	0x031B93C4 LDR X8, [X19 + 0x20]
	0x031B93C8 CBZ X8, 0x31B9490
	0x031B93CC LDR W9, [X8 + 0x18]
	0x031B93D0 CMP W26, W9
	0x031B93D4 B.CS 0x31B9494
	0x031B93D8 SXTW X9, W26
	0x031B93DC MADD X8, X9, X25, X8
	0x031B93E0 STP S11, S12, [X8 + 0x20]
	0x031B93E4 STR S13, [X8 + 0x28]
	0x031B93E8 LDR V1, [X19 + 0x10]
	0x031B93EC ADD W26, W26, 0x1
	0x031B93F0 MOV V10.16B, V13.16B
	0x031B93F4 MOV V8.16B, V12.16B
	0x031B93F8 FADD S0, S0, S1
	0x031B93FC MOV V9.16B, V11.16B
	0x031B9400 STR S0, [X19 + 0x10]
	0x031B9404 ADD W23, W23, 0x1
	0x031B9408 CMP W21, W23
	0x031B940C B.NE 0x31B9344
	0x031B9410 B 0x31B9464
	0x031B9414 ADRP X8, 0xF3C000
	0x031B9418 LDR X8, [X8 + 0x5A8]
	0x031B941C LDR X0, [X8]
	0x031B9420 LDR W8, [X0 + 0xE0]
	0x031B9424 CBNZ W8, 0x31B942C
	0x031B9428 BL 0x1C16DFC
	0x031B942C ADRP X8, 0xF66000
	0x031B9430 LDR X8, [X8 + 0x5A8]
	0x031B9434 LDP X20, X19, [X31 + 0x80]
	0x031B9438 LDP X22, X21, [X31 + 0x70]
	0x031B943C LDP X24, X23, [X31 + 0x60]
	0x031B9440 LDR X0, [X8]
	0x031B9444 LDP X26, X25, [X31 + 0x50]
	0x031B9448 LDR X30, [X31 + 0x40]
	0x031B944C LDP D9, D8, [X31 + 0x30]
	0x031B9450 LDP D11, D10, [X31 + 0x20]
	0x031B9454 LDP D13, D12, [X31 + 0x10]
	0x031B9458 LDP D15, D14, [X31], #0x90
	0x031B945C B 0x31AF344
	0x031B9460 MOVZ W26, 0x1
	0x031B9464 STR W26, [X19 + 0x28]
	0x031B9468 LDP X20, X19, [X31 + 0x80]
	0x031B946C LDP X22, X21, [X31 + 0x70]
	0x031B9470 LDP X24, X23, [X31 + 0x60]
	0x031B9474 LDP X26, X25, [X31 + 0x50]
	0x031B9478 LDR X30, [X31 + 0x40]
	0x031B947C LDP D9, D8, [X31 + 0x30]
	0x031B9480 LDP D11, D10, [X31 + 0x20]
	0x031B9484 LDP D13, D12, [X31 + 0x10]
	0x031B9488 LDP D15, D14, [X31], #0x90
	0x031B948C RET
	0x031B9490 BL 0x1C16F20
	0x031B9494 BL 0x1C16F28
	0x031B9498 STP X30, X21, [X31 - 0x20]!
	0x031B949C STP X20, X19, [X31 + 0x10]
	0x031B94A0 MOV X20, X1
	0x031B94A4 MOVZ W8, 0x1
	0x031B94A8 MOV X1, X31
	0x031B94AC MOV W19, W2
	0x031B94B0 MOV X21, X0
	0x031B94B4 STRB W8, [X0 + 0x14]
	0x031B94B8 BL 0x33BDD8C
	0x031B94BC AND W2, W19, 0x1
	0x031B94C0 MOV X1, X20
	0x031B94C4 LDP X20, X19, [X31 + 0x10]
	0x031B94C8 STRB W2, [X21 + 0x14]
	0x031B94CC MOV X0, X21

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X20, 0x1223000
	010 Move W8, [X20+3795]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF67000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3795], W8
	021 Move X8, [X19+16]
	022 Compare X8, 0
	023 JumpIfEqual {84}
	024 Move X0, [X8+88]
	025 Move X1, X31
	026 Call LeanTweenExt.LeanColor, X0
	027 Move X0, [X19+16]
	028 Compare X0, 0
	029 JumpIfEqual {84}
	030 Move X1, X31
	031 Move V8, V0
	032 Move V9, V1
	033 Move V10, V2
	034 Move V11, V3
	035 Call LTDescr.get_toTrans, X0
	036 Move X1, X31
	037 Call LeanTweenExt.LeanColor, X0
	038 Move V4, V0
	039 Move V0, [X19+24]
	040 Move V5, V1
	041 Move V6, V2
	042 Move V7, V3
	043 Move [X31], S0
	044 Move V0, V8
	045 Move V1, V9
	046 Move V2, V10
	047 Move V3, V11
	048 Call LeanSmooth.linear, X0, X1, V0
	049 Move X8, [X19+16]
	050 Compare X8, 0
	051 JumpIfEqual {84}
	052 Move X0, [X8+88]
	053 Compare X0, 0
	054 JumpIfEqual {84}
	055 Move X8, 0xF67000
	056 Move X8, [X8+1440]
	057 Move V8, V0
	058 Move V9, V1
	059 Move V10, V2
	060 Move X1, [X8]
	061 Move V11, V3
	062 Call 0x21A4894, X0
	063 Compare X0, 0
	064 JumpIfEqual {84}
	065 Move X1, X31
	066 Call Renderer.get_material, X0
	067 Compare X0, 0
	068 JumpIfEqual {84}
	069 Move V0, V8
	070 Move V1, V9
	071 Move V2, V10
	072 Move V3, V11
	073 Move X20, [X31+64]
	074 Move X19, [X31+72]
	075 Move X30, [X31+48]
	076 Move D9, [X31+32]
	077 Move D8, [X31+40]
	078 Move D11, [X31+16]
	079 Move D10, [X31+24]
	080 Move X1, X31
	081 Add X31, X31, 80
	082 Call Material.set_color, X0, X1
	083 Return 
	084 Call 0x1C17F20

