Type: LeanTween/<>c__DisplayClass195_0

Method: System.Void .ctor()

Disassembly:
	0x031B61FC LDUR V0, [X20 + 0xC]
	0x031B6200 LDR V1, [X31 + 0x18]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <followBounceOut>b__0()

Disassembly:
	0x031B84DC SUB W11, W10, 0x1
	0x031B84E0 CMP W11, 0x1
	0x031B84E4 B.LT 0x31B8560
	0x031B84E8 AND X13, X10, 0x0
	0x031B84EC CBZ X13, 0x31B855C
	0x031B84F0 MOVZ W12, 0xC
	0x031B84F4 MOV W9, W11
	0x031B84F8 UMADDL X11, X11, X12, X0
	0x031B84FC MOV X8, X31
	0x031B8500 SUB W10, W10, 0x2
	0x031B8504 ADD X11, X11, 0x28
	0x031B8508 ADD X12, X0, 0x28
	0x031B850C CMP X9, X13
	0x031B8510 B.CS 0x31B855C
	0x031B8514 LDR V0, [X12]
	0x031B8518 LDUR V1, [X12 - 0x8]
	0x031B851C LDUR V2, [X11 - 0x8]
	0x031B8520 LDR V3, [X11]
	0x031B8524 ADD X8, X8, 0x1
	0x031B8528 CMP X8, W10, SXTW
	0x031B852C STUR D2, [X12 - 0x8]
	0x031B8530 STR S3, [X12]
	0x031B8534 STUR D1, [X11 - 0x8]
	0x031B8538 STR S0, [X11]
	0x031B853C B.GE 0x31B8560
	0x031B8540 LDR W13, [X0 + 0x18]
	0x031B8544 SUB X9, X9, 0x1
	0x031B8548 SUB W10, W10, 0x1
	0x031B854C SUB X11, X11, 0xC
	0x031B8550 CMP X8, X13
	0x031B8554 ADD X12, X12, 0xC
	0x031B8558 B.CC 0x31B850C
	0x031B855C BL 0x1C16F28
	0x031B8560 LDR X30, [X31], #0x10
	0x031B8564 RET
	0x031B8568 BL 0x1C16F20
	0x031B856C MOV X1, X31
	0x031B8570 B 0x33BDD8C
	0x031B8574 SUB X31, X31, 0x90
	0x031B8578 STP D15, D14, [X31 + 0x20]
	0x031B857C STP D13, D12, [X31 + 0x30]
	0x031B8580 STP D11, D10, [X31 + 0x40]
	0x031B8584 STP D9, D8, [X31 + 0x50]
	0x031B8588 STP X30, X23, [X31 + 0x60]
	0x031B858C STP X22, X21, [X31 + 0x70]
	0x031B8590 STP X20, X19, [X31 + 0x80]
	0x031B8594 MOV V10.16B, V0.16B
	0x031B8598 LDR V6, [X31 + 0xA8]
	0x031B859C LDR V0, [X31 + 0xA4]
	0x031B85A0 ADRP X21, 0x1223000
	0x031B85A4 ADRP X20, 0xF3B000
	0x031B85A8 LDR V15, [X31 + 0x90]
	0x031B85AC STP S0, S6, [X31 + 0x18]
	0x031B85B0 LDR V0, [X31 + 0xA0]
	0x031B85B4 LDRB W8, [X21 + 0xED4]
	0x031B85B8 LDR V14, [X31 + 0xB0]
	0x031B85BC MOV V12.16B, V4.16B
	0x031B85C0 STP S5, S0, [X31 + 0x10]
	0x031B85C4 LDP S11, S0, [X31 + 0x94]
	0x031B85C8 MOV V13.16B, V3.16B
	0x031B85CC MOV V8.16B, V2.16B
	0x031B85D0 MOV V9.16B, V1.16B
	0x031B85D4 STR S0, [X31 + 0xC]
	0x031B85D8 LDR X20, [X20 + 0x638]
	0x031B85DC MOV X19, X0
	0x031B85E0 TBNZ X8, 0x0, 0x31B85F8
	0x031B85E4 ADRP X0, 0xF3B000
	0x031B85E8 LDR X0, [X0 + 0x638]
	0x031B85EC BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, X0
	015 Move X0, [X0+16]
	016 Compare X0, 0
	017 JumpIfEqual {93}
	018 Move X21, [X0+232]
	019 Compare X21, 0
	020 JumpIfEqual {93}
	021 Move S8, [X21+36]
	022 Move S9, [X21+40]
	023 Move V10, [X21+44]
	024 Move X1, X31
	025 Call LTDescr.get_toTrans, X0
	026 Compare X0, 0
	027 JumpIfEqual {93}
	028 Move X1, X31
	029 Call Transform.get_localPosition, X0
	030 Move X8, [X19+16]
	031 Compare X8, 0
	032 JumpIfEqual {93}
	033 Move S14, [X19+24]
	034 Move S15, [X19+28]
	035 Move X0, X31
	036 Move V11, V0
	037 Move V12, V1
	038 Move V13, V2
	039 Add X20, X8, 96
	040 Call Time.get_deltaTime
	041 Move S1, [X19+32]
	042 Move S2, [X19+36]
	043 Move V3, [X19+40]
	044 Move [X31], S0
	045 Move V0, V8
	046 Move [X31+16], S2
	047 Move [X31+24], S3
	048 Move [X31+8], S1
	049 Move V1, V9
	050 Move V2, V10
	051 Move V3, V11
	052 Move V4, V12
	053 Move V5, V13
	054 Move X0, X20
	055 Move V6, V14
	056 Move V7, V15
	057 Call LeanSmooth.bounceOut, X0, X1, X2, V0, V1, V2, V3, V4, V5
	058 Move [X21+36], S0
	059 Move [X21+44], S1
	060 Move [X21+44], S2
	061 Move X8, [X19+16]
	062 Compare X8, 0
	063 JumpIfEqual {93}
	064 Move X9, [X8+232]
	065 Compare X9, 0
	066 JumpIfEqual {93}
	067 Move X0, [X8+88]
	068 Compare X0, 0
	069 JumpIfEqual {93}
	070 Move V0, [X9+44]
	071 Move V1, [X8+116]
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 Move X20, [X31+112]
	075 Move X19, [X31+120]
	076 Move X30, [X31+96]
	077 Move X21, [X31+104]
	078 Move D9, [X31+80]
	079 Move D8, [X31+88]
	080 Move D11, [X31+64]
	081 Move D10, [X31+72]
	082 Move D13, [X31+48]
	083 Move D12, [X31+56]
	084 Move D15, [X31+32]
	085 Move D14, [X31+40]
	086 Add S2, S0, S1
	087 Add V0, V3, V4
	088 Move S1, V0.S[1]
	089 Move X1, X31
	090 Add X31, X31, 128
	091 Call Transform.set_localPosition, X0, X1
	092 Return 
	093 Call 0x1C17F20

Method: System.Void <followBounceOut>b__1()

Disassembly:
	0x031B85F0 MOVZ W8, 0x1
	0x031B85F4 STRB W8, [X21 + 0xED4]
	0x031B85F8 MOV X0, X19
	0x031B85FC MOV X1, X31
	0x031B8600 BL 0x33BDD8C
	0x031B8604 LDP S6, S20, [X31 + 0xC]
	0x031B8608 FMOV S7, 6
	0x031B860C FSUB S0, S13, S15
	0x031B8610 FSUB S1, S12, S11
	0x031B8614 FSUB S2, S20, S6
	0x031B8618 FMOV S3, 3
	0x031B861C FADD S4, S10, S15
	0x031B8620 FADD S5, S9, S11
	0x031B8624 FADD S6, S8, S6
	0x031B8628 FSUB S16, S13, S10
	0x031B862C FSUB S17, S12, S9
	0x031B8630 FMUL S18, S13, S7
	0x031B8634 FMUL S19, S12, S7
	0x031B8638 FMUL S7, S20, S7
	0x031B863C FSUB S20, S20, S8
	0x031B8640 FMUL S0, S0, S3
	0x031B8644 FMUL S1, S1, S3
	0x031B8648 FMUL S2, S2, S3
	0x031B864C FMUL S4, S4, S3
	0x031B8650 FMUL S5, S5, S3
	0x031B8654 FMUL S6, S6, S3
	0x031B8658 FMUL S16, S16, S3
	0x031B865C FMUL S17, S17, S3
	0x031B8660 FMUL S3, S20, S3
	0x031B8664 STP S17, S3, [X19 + 0x3C]
	0x031B8668 LDR V3, [X31 + 0x14]
	0x031B866C FSUB S0, S0, S10
	0x031B8670 FSUB S1, S1, S9
	0x031B8674 FSUB S6, S6, S7
	0x031B8678 FADD S0, S3, S0
	0x031B867C LDR V3, [X31 + 0x18]
	0x031B8680 FMOV S7, 1
	0x031B8684 FSUB S2, S2, S8
	0x031B8688 FSUB S4, S4, S18
	0x031B868C FADD S1, S3, S1
	0x031B8690 LDR V3, [X31 + 0x1C]
	0x031B8694 FSUB S5, S5, S19
	0x031B8698 FDIV S7, S7, S14
	0x031B869C STP S10, S9, [X19 + 0x14]
	0x031B86A0 FADD S2, S3, S2
	0x031B86A4 STR S7, [X19 + 0x44]
	0x031B86A8 STP S4, S5, [X19 + 0x2C]
	0x031B86AC STP S6, S16, [X19 + 0x34]
	0x031B86B0 STP S8, S0, [X19 + 0x1C]
	0x031B86B4 STP S1, S2, [X19 + 0x24]
	0x031B86B8 MOVZ W8, 0x7F800000
	0x031B86BC LDR X0, [X20]
	0x031B86C0 FMOV S0, W8
	0x031B86C4 FCVTZS W9, S7
	0x031B86C8 FCMP S7, S0
	0x031B86CC ORR W8, W31, 0x80000001
	0x031B86D0 CSINC W1, W8, W9, EQ
	0x031B86D4 BL 0x1C16D6C
	0x031B86D8 STR X0, [X19 + 0x48]
	0x031B86DC CBZ X0, 0x31B87E0
	0x031B86E0 LDR W8, [X0 + 0x18]
	0x031B86E4 CBZ W8, 0x31B87E4
	0x031B86E8 STR W31, [X0 + 0x20]
	0x031B86EC LDR V1, [X19 + 0x44]
	0x031B86F0 FMOV S0, 1
	0x031B86F4 FMOV S15, W31
	0x031B86F8 FCMP S1, S0
	0x031B86FC B.LT 0x31B87B8
	0x031B8700 ADRP X20, 0xF3B000

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, X0
	015 Move X0, [X0+16]
	016 Compare X0, 0
	017 JumpIfEqual {93}
	018 Move X21, [X0+232]
	019 Compare X21, 0
	020 JumpIfEqual {93}
	021 Move S8, [X21+36]
	022 Move S9, [X21+40]
	023 Move V10, [X21+44]
	024 Move X1, X31
	025 Call LTDescr.get_toTrans, X0
	026 Compare X0, 0
	027 JumpIfEqual {93}
	028 Move X1, X31
	029 Call Transform.get_position, X0
	030 Move X8, [X19+16]
	031 Compare X8, 0
	032 JumpIfEqual {93}
	033 Move S14, [X19+24]
	034 Move S15, [X19+28]
	035 Move X0, X31
	036 Move V11, V0
	037 Move V12, V1
	038 Move V13, V2
	039 Add X20, X8, 96
	040 Call Time.get_deltaTime
	041 Move S1, [X19+32]
	042 Move S2, [X19+36]
	043 Move V3, [X19+40]
	044 Move [X31], S0
	045 Move V0, V8
	046 Move [X31+16], S2
	047 Move [X31+24], S3
	048 Move [X31+8], S1
	049 Move V1, V9
	050 Move V2, V10
	051 Move V3, V11
	052 Move V4, V12
	053 Move V5, V13
	054 Move X0, X20
	055 Move V6, V14
	056 Move V7, V15
	057 Call LeanSmooth.bounceOut, X0, X1, X2, V0, V1, V2, V3, V4, V5
	058 Move [X21+36], S0
	059 Move [X21+44], S1
	060 Move [X21+44], S2
	061 Move X8, [X19+16]
	062 Compare X8, 0
	063 JumpIfEqual {93}
	064 Move X9, [X8+232]
	065 Compare X9, 0
	066 JumpIfEqual {93}
	067 Move X0, [X8+88]
	068 Compare X0, 0
	069 JumpIfEqual {93}
	070 Move V0, [X9+44]
	071 Move V1, [X8+116]
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction LDUR not yet implemented."
	074 Move X20, [X31+112]
	075 Move X19, [X31+120]
	076 Move X30, [X31+96]
	077 Move X21, [X31+104]
	078 Move D9, [X31+80]
	079 Move D8, [X31+88]
	080 Move D11, [X31+64]
	081 Move D10, [X31+72]
	082 Move D13, [X31+48]
	083 Move D12, [X31+56]
	084 Move D15, [X31+32]
	085 Move D14, [X31+40]
	086 Add S2, S0, S1
	087 Add V0, V3, V4
	088 Move S1, V0.S[1]
	089 Move X1, X31
	090 Add X31, X31, 128
	091 Call Transform.set_position, X0, X1
	092 Return 
	093 Call 0x1C17F20

Method: System.Void <followBounceOut>b__2()

Disassembly:
	0x031B8704 LDR X20, [X20 + 0x5A8]
	0x031B8708 MOVZ W21, 0x1
	0x031B870C FMOV S15, W31
	0x031B8710 ADRP X22, 0x1220000
	0x031B8714 MOVZ W23, 0x1
	0x031B8718 FMUL S0, S0, S14
	0x031B871C MOV X0, X19
	0x031B8720 BL 0x31B87E8
	0x031B8724 LDRB W8, [X22 + 0x784]
	0x031B8728 MOV V11.16B, V0.16B
	0x031B872C MOV V12.16B, V1.16B
	0x031B8730 MOV V13.16B, V2.16B
	0x031B8734 CBNZ W8, 0x31B8744
	0x031B8738 MOV X0, X20
	0x031B873C BL 0x1C16CF4
	0x031B8740 STRB W21, [X22 + 0x784]
	0x031B8744 LDR X0, [X20]
	0x031B8748 LDR W8, [X0 + 0xE0]
	0x031B874C CBNZ W8, 0x31B8754
	0x031B8750 BL 0x1C16DFC
	0x031B8754 LDR X8, [X19 + 0x48]
	0x031B8758 CBZ X8, 0x31B87E0
	0x031B875C LDR W9, [X8 + 0x18]
	0x031B8760 CMP W23, W9
	0x031B8764 B.CS 0x31B87E4
	0x031B8768 FSUB S0, S10, S11
	0x031B876C FSUB S1, S9, S12
	0x031B8770 FSUB S2, S8, S13
	0x031B8774 FMUL S0, S0, S0
	0x031B8778 FMUL S1, S1, S1
	0x031B877C FMUL S2, S2, S2
	0x031B8780 FADD S0, S0, S1
	0x031B8784 FADD S0, S2, S0
	0x031B8788 FSQRT S0, S0
	0x031B878C FADD S15, S15, S0
	0x031B8790 ADD X8, X8, W23, 0x2, SXTW
	0x031B8794 STR S15, [X8 + 0x20]
	0x031B8798 LDR V1, [X19 + 0x44]
	0x031B879C ADD W23, W23, 0x1
	0x031B87A0 SCVTF S0, W23
	0x031B87A4 MOV V10.16B, V11.16B
	0x031B87A8 FCMP S1, S0
	0x031B87AC MOV V9.16B, V12.16B
	0x031B87B0 MOV V8.16B, V13.16B

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {60}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {60}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_localPosition, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {60}
	022 Move X1, X31
	023 Move V8, V0
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {60}
	027 Move X1, X31
	028 Call Transform.get_localPosition, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {60}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V0
	036 Add X21, X8, 96
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V7, [X20+40]
	041 Move V4, V0
	042 Move V0, V8
	043 Move V1, V9
	044 Move X0, X21
	045 Move V2, V10
	046 Move V3, V11
	047 Call LeanSmooth.bounceOut, V0, V1, X0, V2, V3, V4, V5, V6, V7
	048 Move X0, X19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Move D9, [X31+16]
	054 Move D8, [X31+24]
	055 Move X1, X31
	056 Move D11, [X31+64]
	057 Move D10, [X31+72]
	058 Call LeanTweenExt.LeanSetLocalPosX, X0, V0
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <followBounceOut>b__3()

Disassembly:
	0x031B87B4 B.GE 0x31B8718
	0x031B87B8 STR S15, [X19 + 0x10]
	0x031B87BC LDP X20, X19, [X31 + 0x80]
	0x031B87C0 LDP X22, X21, [X31 + 0x70]
	0x031B87C4 LDP X30, X23, [X31 + 0x60]
	0x031B87C8 LDP D9, D8, [X31 + 0x50]
	0x031B87CC LDP D11, D10, [X31 + 0x40]
	0x031B87D0 LDP D13, D12, [X31 + 0x30]
	0x031B87D4 LDP D15, D14, [X31 + 0x20]
	0x031B87D8 ADD X31, X31, 0x90
	0x031B87DC RET
	0x031B87E0 BL 0x1C16F20
	0x031B87E4 BL 0x1C16F28
	0x031B87E8 LDR V1, [X0 + 0x20]
	0x031B87EC LDUR V2, [X0 + 0x2C]
	0x031B87F0 LDR V3, [X0 + 0x28]
	0x031B87F4 LDR V4, [X0 + 0x34]
	0x00000000 INVALID
	0x031B87FC FADD V1.2S, V1.2S, V2.2S
	0x031B8800 LDR V2, [X0 + 0x38]
	0x031B8804 FMUL S3, S3, S0
	0x031B8808 FADD S3, S3, S4
	0x031B880C LDR V4, [X0 + 0x40]
	0x00000000 INVALID
	0x031B8814 FADD V1.2S, V1.2S, V2.2S
	0x031B8818 LDUR V2, [X0 + 0x14]
	0x031B881C FMUL S3, S3, S0
	0x031B8820 FADD S3, S3, S4
	0x031B8824 LDR V4, [X0 + 0x1C]
	0x00000000 INVALID
	0x031B882C FMUL S3, S3, S0
	0x031B8830 FADD V0.2S, V1.2S, V2.2S
	0x031B8834 FADD S2, S3, S4
	0x031B8838 MOV S1, V0.S[1]
	0x031B883C RET
	0x031B8840 STR X30, [X31 - 0x10]!
	0x031B8844 LDR X8, [X0 + 0x48]
	0x031B8848 CBZ X8, 0x31B895C
	0x031B884C LDR V1, [X0 + 0x44]
	0x031B8850 MOVZ W10, 0x7F800000
	0x031B8854 LDR W9, [X8 + 0x18]
	0x031B8858 FMOV S2, W10
	0x031B885C FCVTZS W10, S1
	0x031B8860 FCMP S1, S2

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {60}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {60}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_localPosition, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {60}
	022 Move X1, X31
	023 Move V8, V1
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {60}
	027 Move X1, X31
	028 Call Transform.get_localPosition, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {60}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V1
	036 Add X21, X8, 100
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V7, [X20+40]
	041 Move V4, V0
	042 Move V0, V8
	043 Move V1, V9
	044 Move X0, X21
	045 Move V2, V10
	046 Move V3, V11
	047 Call LeanSmooth.bounceOut, V0, V1, X0, V2, V3, V4, V5, V6, V7
	048 Move X0, X19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Move D9, [X31+16]
	054 Move D8, [X31+24]
	055 Move X1, X31
	056 Move D11, [X31+64]
	057 Move D10, [X31+72]
	058 Call LeanTweenExt.LeanSetLocalPosY, X0, V0
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <followBounceOut>b__4()

Disassembly:
	0x031B8864 MOVZ W11, 0x80000000
	0x031B8868 CSEL W10, W11, W10, EQ
	0x031B886C CMP W10, W9
	0x031B8870 B.CS 0x31B8958
	0x031B8874 ADD X11, X8, W10, 0x2, SXTW
	0x031B8878 LDR V2, [X11 + 0x20]
	0x031B887C CMP W10, 0x1
	0x031B8880 FMUL S0, S2, S0
	0x031B8884 B.LT 0x31B88F0
	0x031B8888 MOV W11, W31
	0x031B888C FMOV S2, 0.5
	0x031B8890 MOVZ W12, 0x7F800000
	0x031B8894 MOVZ W13, 0x80000000
	0x031B8898 MOV W14, W10
	0x031B889C SUB W10, W14, W11
	0x031B88A0 SCVTF S4, W10
	0x031B88A4 FMOV S3, W12
	0x031B88A8 FMUL S4, S4, S2
	0x031B88AC FCVTZS W10, S4
	0x031B88B0 FCMP S4, S3
	0x031B88B4 CSEL W10, W13, W10, EQ
	0x031B88B8 ADD W10, W10, W11
	0x031B88BC CMP W10, W9
	0x031B88C0 B.CS 0x31B8958
	0x031B88C4 ADD X15, X8, W10, 0x2, SXTW
	0x031B88C8 LDR V3, [X15 + 0x20]
	0x031B88CC FCMP S3, S0
	0x031B88D0 B.PL 0x31B88E4
	0x031B88D4 ADD W11, W10, 0x1
	0x031B88D8 CMP W14, W11
	0x031B88DC B.GT 0x31B889C
	0x031B88E0 B 0x31B88F4
	0x031B88E4 CMP W10, W11
	0x031B88E8 B.GT 0x31B8898
	0x031B88EC B 0x31B88F4
	0x031B88F0 MOV W10, W31
	0x031B88F4 CMP W10, W9
	0x031B88F8 B.CS 0x31B8958
	0x031B88FC ADD X11, X8, W10, 0x2, SXTW
	0x031B8900 LDR V2, [X11 + 0x20]
	0x031B8904 FCMP S2, S0
	0x031B8908 CSET W11, GT
	0x031B890C SUB W10, W10, W11
	0x031B8910 BIC W10, W10, W10, 0x1F

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {60}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {60}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_localPosition, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {60}
	022 Move X1, X31
	023 Move V8, V2
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {60}
	027 Move X1, X31
	028 Call Transform.get_localPosition, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {60}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V2
	036 Add X21, X8, 104
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V7, [X20+40]
	041 Move V4, V0
	042 Move V0, V8
	043 Move V1, V9
	044 Move X0, X21
	045 Move V2, V10
	046 Move V3, V11
	047 Call LeanSmooth.bounceOut, V0, V1, X0, V2, V3, V4, V5, V6, V7
	048 Move X0, X19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Move D9, [X31+16]
	054 Move D8, [X31+24]
	055 Move X1, X31
	056 Move D11, [X31+64]
	057 Move D10, [X31+72]
	058 Call LeanTweenExt.LeanSetLocalPosZ, X0, V0
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <followBounceOut>b__5()

Disassembly:
	0x031B8914 CMP W10, W9
	0x031B8918 B.CS 0x31B8958
	0x031B891C ADD W11, W10, 0x1
	0x031B8920 CMP W11, W9
	0x031B8924 B.CS 0x31B8958
	0x031B8928 ADD X9, X8, W10, 0x2, UXTW
	0x031B892C ADD X8, X8, W11, 0x2, SXTW
	0x031B8930 LDR V2, [X9 + 0x20]
	0x031B8934 LDR V3, [X8 + 0x20]
	0x031B8938 SCVTF S4, W10
	0x031B893C FSUB S0, S0, S2
	0x031B8940 FSUB S2, S3, S2
	0x031B8944 FDIV S0, S0, S2
	0x031B8948 FADD S0, S0, S4
	0x031B894C FDIV S0, S0, S1
	0x031B8950 LDR X30, [X31], #0x10
	0x031B8954 RET
	0x031B8958 BL 0x1C16F28
	0x031B895C BL 0x1C16F20
	0x031B8960 STP X30, X19, [X31 - 0x10]!
	0x031B8964 MOV X19, X0
	0x031B8968 BL 0x31B8840
	0x031B896C MOV X0, X19
	0x031B8970 LDP X30, X19, [X31], #0x10
	0x031B8974 B 0x31B87E8
	0x031B8978 MOV X1, X31
	0x031B897C B 0x33BDD8C
	0x031B8980 LDR V0, [X0 + 0x18]
	0x031B8984 RET
	0x031B8988 STP X30, X19, [X31 - 0x10]!
	0x031B898C LDR X11, [X0 + 0x28]
	0x031B8990 CBZ X11, 0x31B8A48
	0x031B8994 LDR W8, [X11 + 0x18]
	0x031B8998 UBFM X9, X8, 0x20, 0x1F
	0x031B899C CMP X9, 0x1
	0x031B89A0 B.LT 0x31B89D8
	0x031B89A4 MOV X9, X31
	0x031B89A8 SXTW X10, W8
	0x031B89AC ADD X11, X11, 0x20
	0x031B89B0 FMOV S1, W31
	0x031B89B4 CMP X9, X8
	0x031B89B8 B.CS 0x31B8A44
	0x031B89BC LDR V2, [X11, X9, LSL #2]
	0x031B89C0 FADD S1, S1, S2

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {60}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {60}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_position, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {60}
	022 Move X1, X31
	023 Move V8, V0
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {60}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {60}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V0
	036 Add X21, X8, 96
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V7, [X20+40]
	041 Move V4, V0
	042 Move V0, V8
	043 Move V1, V9
	044 Move X0, X21
	045 Move V2, V10
	046 Move V3, V11
	047 Call LeanSmooth.bounceOut, V0, V1, X0, V2, V3, V4, V5, V6, V7
	048 Move X0, X19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Move D9, [X31+16]
	054 Move D8, [X31+24]
	055 Move X1, X31
	056 Move D11, [X31+64]
	057 Move D10, [X31+72]
	058 Call LeanTweenExt.LeanSetPosX, X0, V0
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <followBounceOut>b__6()

Disassembly:
	0x031B89C4 FCMP S1, S0
	0x031B89C8 B.GE 0x31B8A04
	0x031B89CC ADD X9, X9, 0x1
	0x031B89D0 CMP X9, X10
	0x031B89D4 B.LT 0x31B89B4
	0x031B89D8 LDR X9, [X0 + 0x20]
	0x031B89DC CBZ X9, 0x31B8A48
	0x031B89E0 LDR W10, [X9 + 0x18]
	0x031B89E4 SUB W8, W8, 0x1
	0x031B89E8 CMP W8, W10
	0x031B89EC B.CS 0x31B8A44
	0x031B89F0 ADD X8, X9, W8, 0x3, SXTW
	0x031B89F4 LDR X19, [X8 + 0x20]
	0x031B89F8 CBZ X19, 0x31B8A48
	0x031B89FC FMOV S0, 1
	0x031B8A00 B 0x31B8A30
	0x031B8A04 LDR X8, [X0 + 0x20]
	0x031B8A08 CBZ X8, 0x31B8A48
	0x031B8A0C LDR W10, [X8 + 0x18]
	0x031B8A10 CMP W9, W10
	0x031B8A14 B.CS 0x31B8A44
	0x031B8A18 ADD X8, X8, X9, 0x3, LSL
	0x031B8A1C LDR X19, [X8 + 0x20]
	0x031B8A20 CBZ X19, 0x31B8A48
	0x031B8A24 FSUB S1, S1, S2
	0x031B8A28 FSUB S0, S0, S1
	0x031B8A2C FDIV S0, S0, S2
	0x031B8A30 MOV X0, X19
	0x031B8A34 BL 0x31B8840
	0x031B8A38 MOV X0, X19
	0x031B8A3C LDP X30, X19, [X31], #0x10
	0x031B8A40 B 0x31B87E8
	0x031B8A44 BL 0x1C16F28
	0x031B8A48 BL 0x1C16F20
	0x031B8A4C STP D9, D8, [X31 - 0x30]!
	0x031B8A50 STR X30, [X31 + 0x10]
	0x031B8A54 STP X20, X19, [X31 + 0x20]
	0x031B8A58 MOV V8.16B, V0.16B
	0x031B8A5C MOV X19, X1
	0x031B8A60 MOV X20, X0
	0x031B8A64 BL 0x31B8988
	0x031B8A68 CBZ X19, 0x31B8AFC
	0x031B8A6C MOV X0, X19
	0x031B8A70 MOV X1, X31

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {60}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {60}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_position, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {60}
	022 Move X1, X31
	023 Move V8, V1
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {60}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {60}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V1
	036 Add X21, X8, 100
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V7, [X20+40]
	041 Move V4, V0
	042 Move V0, V8
	043 Move V1, V9
	044 Move X0, X21
	045 Move V2, V10
	046 Move V3, V11
	047 Call LeanSmooth.bounceOut, V0, V1, X0, V2, V3, V4, V5, V6, V7
	048 Move X0, X19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Move D9, [X31+16]
	054 Move D8, [X31+24]
	055 Move X1, X31
	056 Move D11, [X31+64]
	057 Move D10, [X31+72]
	058 Call LeanTweenExt.LeanSetPosY, X0, V0
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <followBounceOut>b__7()

Disassembly:
	0x031B8A74 BL 0x3C3F62C
	0x031B8A78 ADRP X8, 0xFFFFFFFFFD932000
	0x031B8A7C LDR V0, [X8 + 0x410]
	0x031B8A80 FMOV S1, 1
	0x031B8A84 FADD S0, S8, S0
	0x031B8A88 FCMP S0, S1
	0x031B8A8C B.LS 0x31B8AA0
	0x031B8A90 LDP X20, X19, [X31 + 0x20]
	0x031B8A94 LDR X30, [X31 + 0x10]
	0x031B8A98 LDP D9, D8, [X31], #0x30
	0x031B8A9C RET
	0x031B8AA0 MOV X0, X20
	0x031B8AA4 BL 0x31B8988
	0x031B8AA8 MOV X0, X19
	0x031B8AAC MOV X1, X31
	0x031B8AB0 MOV V8.16B, V0.16B
	0x031B8AB4 MOV V9.16B, V1.16B
	0x031B8AB8 BL 0x3C3F58C
	0x031B8ABC FSUB S2, S8, S0
	0x031B8AC0 FSUB S0, S9, S1
	0x031B8AC4 MOV V1.16B, V2.16B
	0x031B8AC8 BL 0x3EB1C40
	0x031B8ACC ADRP X8, 0xFFFFFFFFFD932000
	0x031B8AD0 LDR V2, [X8 + 0x448]
	0x031B8AD4 MOV X0, X19
	0x031B8AD8 LDP X20, X19, [X31 + 0x20]
	0x031B8ADC LDR X30, [X31 + 0x10]
	0x031B8AE0 MOV V1.16B, V0.16B
	0x031B8AE4 FMOV S0, W31
	0x031B8AE8 FMUL S2, S1, S2
	0x031B8AEC FMOV S1, W31
	0x031B8AF0 MOV X1, X31
	0x031B8AF4 LDP D9, D8, [X31], #0x30
	0x031B8AF8 B 0x3C3F77C
	0x031B8AFC BL 0x1C16F20
	0x031B8B00 STP D9, D8, [X31 - 0x30]!
	0x031B8B04 STR X30, [X31 + 0x10]
	0x031B8B08 STP X20, X19, [X31 + 0x20]
	0x031B8B0C MOV V8.16B, V0.16B
	0x031B8B10 MOV X19, X1
	0x031B8B14 MOV X20, X0
	0x031B8B18 BL 0x31B8988
	0x031B8B1C CBZ X19, 0x31B8BB0
	0x031B8B20 MOV X0, X19

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {60}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {60}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_position, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {60}
	022 Move X1, X31
	023 Move V8, V2
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {60}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {60}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V2
	036 Add X21, X8, 104
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V7, [X20+40]
	041 Move V4, V0
	042 Move V0, V8
	043 Move V1, V9
	044 Move X0, X21
	045 Move V2, V10
	046 Move V3, V11
	047 Call LeanSmooth.bounceOut, V0, V1, X0, V2, V3, V4, V5, V6, V7
	048 Move X0, X19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Move D9, [X31+16]
	054 Move D8, [X31+24]
	055 Move X1, X31
	056 Move D11, [X31+64]
	057 Move D10, [X31+72]
	058 Call LeanTweenExt.LeanSetPosZ, X0, V0
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <followBounceOut>b__8()

Disassembly:
	0x031B8B24 MOV X1, X31
	0x031B8B28 BL 0x3C3EC04
	0x031B8B2C ADRP X8, 0xFFFFFFFFFD932000
	0x031B8B30 LDR V0, [X8 + 0x410]
	0x031B8B34 FMOV S1, 1
	0x031B8B38 FADD S0, S8, S0
	0x031B8B3C FCMP S0, S1
	0x031B8B40 B.LS 0x31B8B54
	0x031B8B44 LDP X20, X19, [X31 + 0x20]
	0x031B8B48 LDR X30, [X31 + 0x10]
	0x031B8B4C LDP D9, D8, [X31], #0x30
	0x031B8B50 RET
	0x031B8B54 MOV X0, X20
	0x031B8B58 BL 0x31B8988
	0x031B8B5C MOV X0, X19
	0x031B8B60 MOV X1, X31
	0x031B8B64 MOV V8.16B, V0.16B
	0x031B8B68 MOV V9.16B, V1.16B
	0x031B8B6C BL 0x3C3EB78
	0x031B8B70 FSUB S2, S8, S0
	0x031B8B74 FSUB S0, S9, S1
	0x031B8B78 MOV V1.16B, V2.16B
	0x031B8B7C BL 0x3EB1C40
	0x031B8B80 ADRP X8, 0xFFFFFFFFFD932000
	0x031B8B84 LDR V2, [X8 + 0x448]
	0x031B8B88 MOV X0, X19
	0x031B8B8C LDP X20, X19, [X31 + 0x20]
	0x031B8B90 LDR X30, [X31 + 0x10]
	0x031B8B94 MOV V1.16B, V0.16B
	0x031B8B98 FMOV S0, W31
	0x031B8B9C FMUL S2, S1, S2
	0x031B8BA0 FMOV S1, W31
	0x031B8BA4 MOV X1, X31
	0x031B8BA8 LDP D9, D8, [X31], #0x30
	0x031B8BAC B 0x3C3F888
	0x031B8BB0 BL 0x1C16F20
	0x031B8BB4 STR D8, [X31 - 0x30]!
	0x031B8BB8 STP X30, X21, [X31 + 0x10]
	0x031B8BBC STP X20, X19, [X31 + 0x20]
	0x031B8BC0 ADRP X21, 0x1220000
	0x031B8BC4 LDRB W8, [X21 + 0x786]
	0x031B8BC8 MOV V8.16B, V0.16B
	0x031B8BCC MOV X19, X1
	0x031B8BD0 MOV X20, X0
	0x031B8BD4 CBNZ W8, 0x31B8BEC
	0x031B8BD8 ADRP X0, 0xF3B000
	0x031B8BDC LDR X0, [X0 + 0x5A0]
	0x031B8BE0 BL 0x1C16CF4
	0x031B8BE4 MOVZ W8, 0x1
	0x031B8BE8 STRB W8, [X21 + 0x786]
	0x031B8BEC ADRP X8, 0xF3B000
	0x031B8BF0 LDR X8, [X8 + 0x5A0]
	0x031B8BF4 MOV X0, X20
	0x031B8BF8 MOV X1, X19
	0x031B8BFC LDP X20, X19, [X31 + 0x20]
	0x031B8C00 LDR X8, [X8]
	0x031B8C04 LDP X30, X21, [X31 + 0x10]
	0x031B8C08 MOV V0.16B, V8.16B
	0x031B8C0C LDR X8, [X8 + 0xB8]
	0x031B8C10 LDP S1, S2, [X8 + 0x18]
	0x031B8C14 LDR V3, [X8 + 0x20]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X8, [X0+16]
	015 Compare X8, 0
	016 JumpIfEqual {81}
	017 Move X19, [X8+88]
	018 Compare X19, 0
	019 JumpIfEqual {81}
	020 Move X20, X0
	021 Move X0, X19
	022 Move X1, X31
	023 Call Transform.get_localScale, X0
	024 Move X0, [X20+16]
	025 Compare X0, 0
	026 JumpIfEqual {81}
	027 Move X1, X31
	028 Move V8, V0
	029 Move V9, V1
	030 Move V10, V2
	031 Call LTDescr.get_toTrans, X0
	032 Compare X0, 0
	033 JumpIfEqual {81}
	034 Move X1, X31
	035 Call Transform.get_localScale, X0
	036 Move X8, [X20+16]
	037 Compare X8, 0
	038 JumpIfEqual {81}
	039 Move S14, [X20+24]
	040 Move S15, [X20+28]
	041 Move X0, X31
	042 Move V11, V0
	043 Move V12, V1
	044 Move V13, V2
	045 Add X21, X8, 96
	046 Call Time.get_deltaTime
	047 Move S1, [X20+32]
	048 Move S2, [X20+36]
	049 Move V3, [X20+40]
	050 Move [X31], S0
	051 Move V0, V8
	052 Move [X31+16], S2
	053 Move [X31+24], S3
	054 Move [X31+8], S1
	055 Move V1, V9
	056 Move V2, V10
	057 Move V3, V11
	058 Move V4, V12
	059 Move V5, V13
	060 Move X0, X21
	061 Move V6, V14
	062 Move V7, V15
	063 Call LeanSmooth.bounceOut, X0, X1, X2, V0, V1, V2, V3, V4, V5
	064 Move X0, X19
	065 Move X20, [X31+112]
	066 Move X19, [X31+120]
	067 Move X30, [X31+96]
	068 Move X21, [X31+104]
	069 Move D9, [X31+80]
	070 Move D8, [X31+88]
	071 Move D11, [X31+64]
	072 Move D10, [X31+72]
	073 Move D13, [X31+48]
	074 Move D12, [X31+56]
	075 Move D15, [X31+32]
	076 Move D14, [X31+40]
	077 Move X1, X31
	078 Add X31, X31, 128
	079 Call Transform.set_localScale, X0, X1
	080 Return 
	081 Call 0x1C17F20

Method: System.Void <followBounceOut>b__9()

Disassembly:
	0x031B8C18 LDR V8, [X31], #0x30
	0x031B8C1C B 0x31B8C20
	0x031B8C20 STP D11, D10, [X31 - 0x40]!
	0x031B8C24 STP D9, D8, [X31 + 0x10]
	0x031B8C28 STR X30, [X31 + 0x20]
	0x031B8C2C STP X20, X19, [X31 + 0x30]
	0x031B8C30 MOV V8.16B, V3.16B
	0x031B8C34 MOV V9.16B, V2.16B
	0x031B8C38 MOV V10.16B, V1.16B
	0x031B8C3C MOV V11.16B, V0.16B
	0x031B8C40 MOV X19, X1
	0x031B8C44 MOV X20, X0
	0x031B8C48 BL 0x31B8988
	0x031B8C4C CBZ X19, 0x31B8CB8
	0x031B8C50 MOV X0, X19
	0x031B8C54 MOV X1, X31
	0x031B8C58 BL 0x3C3F62C
	0x031B8C5C ADRP X8, 0xFFFFFFFFFD932000
	0x031B8C60 LDR V0, [X8 + 0x410]
	0x031B8C64 FMOV S1, 1
	0x031B8C68 FADD S0, S11, S0
	0x031B8C6C FCMP S0, S1
	0x031B8C70 B.LS 0x31B8C88
	0x031B8C74 LDP X20, X19, [X31 + 0x30]
	0x031B8C78 LDR X30, [X31 + 0x20]
	0x031B8C7C LDP D9, D8, [X31 + 0x10]
	0x031B8C80 LDP D11, D10, [X31], #0x40
	0x031B8C84 RET
	0x031B8C88 MOV X0, X20
	0x031B8C8C BL 0x31B8988
	0x031B8C90 MOV X0, X19
	0x031B8C94 MOV V4.16B, V9.16B
	0x031B8C98 MOV V5.16B, V8.16B
	0x031B8C9C LDP X20, X19, [X31 + 0x30]
	0x031B8CA0 LDR X30, [X31 + 0x20]
	0x031B8CA4 LDP D9, D8, [X31 + 0x10]
	0x031B8CA8 MOV V3.16B, V10.16B
	0x031B8CAC MOV X1, X31
	0x031B8CB0 LDP D11, D10, [X31], #0x40
	0x031B8CB4 B 0x3C40744
	0x031B8CB8 BL 0x1C16F20
	0x031B8CBC STR D8, [X31 - 0x30]!
	0x031B8CC0 STP X30, X21, [X31 + 0x10]
	0x031B8CC4 STP X20, X19, [X31 + 0x20]
	0x031B8CC8 ADRP X21, 0x1220000
	0x031B8CCC LDRB W8, [X21 + 0x786]
	0x031B8CD0 MOV V8.16B, V0.16B
	0x031B8CD4 MOV X19, X1
	0x031B8CD8 MOV X20, X0
	0x031B8CDC CBNZ W8, 0x31B8CF4
	0x031B8CE0 ADRP X0, 0xF3B000
	0x031B8CE4 LDR X0, [X0 + 0x5A0]
	0x031B8CE8 BL 0x1C16CF4
	0x031B8CEC MOVZ W8, 0x1
	0x031B8CF0 STRB W8, [X21 + 0x786]
	0x031B8CF4 ADRP X8, 0xF3B000
	0x031B8CF8 LDR X8, [X8 + 0x5A0]
	0x031B8CFC MOV X0, X20
	0x031B8D00 MOV X1, X19
	0x031B8D04 LDP X20, X19, [X31 + 0x20]
	0x031B8D08 LDR X8, [X8]
	0x031B8D0C LDP X30, X21, [X31 + 0x10]
	0x031B8D10 MOV V0.16B, V8.16B
	0x031B8D14 LDR X8, [X8 + 0xB8]
	0x031B8D18 LDP S1, S2, [X8 + 0x18]
	0x031B8D1C LDR V3, [X8 + 0x20]
	0x031B8D20 LDR V8, [X31], #0x30
	0x031B8D24 B 0x31B8D28
	0x031B8D28 STR D12, [X31 - 0x50]!
	0x031B8D2C STP D11, D10, [X31 + 0x10]
	0x031B8D30 STP D9, D8, [X31 + 0x20]
	0x031B8D34 STP X30, X21, [X31 + 0x30]
	0x031B8D38 STP X20, X19, [X31 + 0x40]
	0x031B8D3C MOV V10.16B, V1.16B
	0x031B8D40 FMOV S1, 1
	0x031B8D44 FCMP S0, 0x0
	0x031B8D48 FMIN S0, S0, S1
	0x031B8D4C FMOV S11, W31
	0x031B8D50 FCSEL S12, S0, S11, PL
	0x031B8D54 MOV V0.16B, V12.16B
	0x031B8D58 MOV V8.16B, V3.16B
	0x031B8D5C MOV V9.16B, V2.16B
	0x031B8D60 MOV X19, X1
	0x031B8D64 MOV X20, X0
	0x031B8D68 BL 0x31B8988
	0x031B8D6C CBZ X19, 0x31B8E1C
	0x031B8D70 MOV X0, X19
	0x031B8D74 MOV X1, X31
	0x031B8D78 BL 0x3C3EC04

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X20
	012 Move [X31+136], X19
	013 Move X20, 0x1224000
	014 Move W8, [X20+3794]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF68000
	021 Move X0, [X0+1440]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3794], W8
	025 Move X8, [X19+16]
	026 Compare X8, 0
	027 JumpIfEqual {115}
	028 Move X0, [X8+88]
	029 Move X1, X31
	030 Call LeanTweenExt.LeanColor, X0
	031 Move X0, [X19+16]
	032 Compare X0, 0
	033 JumpIfEqual {115}
	034 Move X1, X31
	035 Move V10, V0
	036 Move V11, V1
	037 Move V12, V2
	038 Move V13, V3
	039 Call LTDescr.get_toTrans, X0
	040 Move X1, X31
	041 Call LeanTweenExt.LeanColor, X0
	042 Move X8, [X19+16]
	043 Compare X8, 0
	044 JumpIfEqual {115}
	045 Move X8, [X8+232]
	046 Move [X31+120], S3
	047 Move [X31+128], S2
	048 Compare X8, 0
	049 JumpIfEqual {115}
	050 Move S8, [X19+24]
	051 Move S9, [X19+28]
	052 Move X0, X31
	053 Move V15, V1
	054 Move V14, V0
	055 Add X20, X8, 100
	056 Call Time.get_deltaTime
	057 Move S1, [X19+32]
	058 Move S2, [X19+36]
	059 Move V3, [X19+40]
	060 Move S7, [X31+120]
	061 Move S6, [X31+124]
	062 Move [X31+16], S0
	063 Move [X31+32], S2
	064 Move [X31+40], S3
	065 Move [X31+24], S1
	066 Move V0, V10
	067 Move V1, V11
	068 Move V2, V12
	069 Move V3, V13
	070 Move V4, V14
	071 Move V5, V15
	072 Move X0, X20
	073 Move [X31+8], S9
	074 Move [X31], S8
	075 Call LeanSmooth.bounceOut, X0, X1, X2, V0, V1, V2, V3, V4, V5
	076 Move X8, [X19+16]
	077 Compare X8, 0
	078 JumpIfEqual {115}
	079 Move X0, [X8+88]
	080 Compare X0, 0
	081 JumpIfEqual {115}
	082 Move X8, 0xF68000
	083 Move X8, [X8+1440]
	084 Move V8, V0
	085 Move V9, V1
	086 Move V10, V2
	087 Move X1, [X8]
	088 Move V11, V3
	089 Call 0x21A4894, X0
	090 Compare X0, 0
	091 JumpIfEqual {115}
	092 Move X1, X31
	093 Call Renderer.get_material, X0
	094 Compare X0, 0
	095 JumpIfEqual {115}
	096 Move V0, V8
	097 Move V1, V9
	098 Move V2, V10
	099 Move V3, V11
	100 Move X20, [X31+128]
	101 Move X19, [X31+136]
	102 Move X30, [X31+112]
	103 Move D9, [X31+96]
	104 Move D8, [X31+104]
	105 Move D11, [X31+80]
	106 Move D10, [X31+88]
	107 Move D13, [X31+64]
	108 Move D12, [X31+72]
	109 Move D15, [X31+48]
	110 Move D14, [X31+56]
	111 Move X1, X31
	112 Add X31, X31, 144
	113 Call Material.set_color, X0, X1
	114 Return 
	115 Call 0x1C17F20

