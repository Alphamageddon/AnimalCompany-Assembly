Type: LTRect

Method: System.Void .ctor()

Disassembly:
	0x031BB568 LDR V0, [X8 + 0x44]
	0x031BB56C FMOV S12, W31
	0x031BB570 FMUL S9, S3, S0
	0x031BB574 B 0x31BB61C
	0x031BB578 BL 0x31BAA98
	0x031BB57C LDR X8, [X20]
	0x031BB580 LDR X8, [X8 + 0xB8]
	0x031BB584 LDR X0, [X8 + 0x38]
	0x031BB588 CBZ X0, 0x31BB840
	0x031BB58C LDR V8, [X0 + 0x34]
	0x031BB590 MOV V9.16B, V1.16B
	0x031BB594 BL 0x31BAA98
	0x031BB598 LDR X8, [X20]
	0x031BB59C LDR X8, [X8 + 0xB8]
	0x031BB5A0 LDR X0, [X8 + 0x38]
	0x031BB5A4 CBZ X0, 0x31BB840
	0x031BB5A8 MOV V10.16B, V2.16B
	0x031BB5AC BL 0x31BAA98
	0x031BB5B0 LDR X8, [X20]
	0x031BB5B4 LDR X8, [X8 + 0xB8]
	0x031BB5B8 LDR X8, [X8 + 0x38]
	0x031BB5BC CBZ X8, 0x31BB840
	0x031BB5C0 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X9, -40693760
	004 Move V1, [X9+67]
	005 Move W8, 0x3F800000
	006 Move V0, 0
	007 Move TEMP, 0
	008 Not TEMP
	009 Move W9, TEMP
	010 Move X1, X31
	011 Move X19, X0
	012 Move [X0+32], W8
	013 Move [X0+108], V0
	014 Move [X0+56], V1
	015 Move [X0+136], W9
	016 Call Object..ctor, X0
	017 Move X0, X19
	018 Call LTRect.reset, X0
	019 Move X8, -40697856
	020 Move V0, [X8+188]
	021 Move W8, 1
	022 Move [X19+74], W8
	023 Move [X19+72], W8
	024 Move [X19+1], V0
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 

Method: System.Void .ctor(UnityEngine.Rect rect)

Disassembly:
	0x031BB630 LDR X8, [X8 + 0x38]
	0x031BB634 CBZ X8, 0x31BB840
	0x031BB638 LDRB W9, [X8 + 0x7E]
	0x031BB63C CBZ W9, 0x31BB6B0
	0x031BB640 LDR W9, [X0 + 0xE0]
	0x031BB644 CBNZ W9, 0x31BB65C
	0x031BB648 BL 0x1C16DFC
	0x031BB64C LDR X8, [X20]
	0x031BB650 LDR X8, [X8 + 0xB8]
	0x031BB654 LDR X8, [X8 + 0x38]
	0x031BB658 CBZ X8, 0x31BB840
	0x031BB65C LDR X0, [X8 + 0x80]
	0x031BB660 CBZ X0, 0x31BB840
	0x031BB664 LDR X8, [X0]
	0x031BB668 LDP X9, X1, [X8 + 0x188]
	0x031BB66C BLR X9
	0x031BB670 LDR X8, [X20]
	0x031BB674 LDR X8, [X8 + 0xB8]
	0x031BB678 LDR X8, [X8 + 0x38]
	0x031BB67C CBZ X8, 0x31BB840
	0x031BB680 MOV W19, W0
	0x031BB684 LDR X0, [X8 + 0x80]
	0x031BB688 CBZ X0, 0x31BB840
	0x031BB68C LDR X8, [X0]
	0x031BB690 LDP X9, X1, [X8 + 0x1A8]
	0x031BB694 BLR X9

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X9, -40693760
	008 Move V10, V1
	009 Move V1, [X9+67]
	010 Move V11, V0
	011 Move W8, 0x3F800000
	012 Move V0, 0
	013 Move TEMP, 0
	014 Not TEMP
	015 Move W9, TEMP
	016 Move X1, X31
	017 Move V8, V3
	018 Move V9, V2
	019 Move X19, X0
	020 Move [X0+32], W8
	021 Move [X0+108], V0
	022 Move [X0+56], V1
	023 Move [X0+136], W9
	024 Call Object..ctor, X0
	025 Move [X19+16], S11
	026 Move [X19+24], S10
	027 Move [X19+24], S9
	028 Move [X19+32], S8
	029 Move X0, X19
	030 Move X30, [X31+32]
	031 Move X19, [X31+40]
	032 Move D9, [X31+16]
	033 Move D8, [X31+24]
	034 Move D11, [X31+48]
	035 Move D10, [X31+56]
	036 Call LTRect.reset, X0
	037 Return 

Method: System.Void .ctor(System.Single x, System.Single y, System.Single width, System.Single height)

Disassembly:
	0x031BB698 MOV W8, W0
	0x031BB69C LDR X0, [X20]
	0x031BB6A0 SCVTF S0, W19
	0x031BB6A4 SCVTF S1, W8
	0x031BB6A8 FDIV S0, S0, S1
	0x031BB6AC FMUL S12, S9, S0
	0x031BB6B0 LDR W8, [X0 + 0xE0]
	0x031BB6B4 CBNZ W8, 0x31BB6C0
	0x031BB6B8 BL 0x1C16DFC
	0x031BB6BC LDR X0, [X20]
	0x031BB6C0 LDR X8, [X0 + 0xB8]
	0x031BB6C4 LDR X8, [X8 + 0x38]
	0x031BB6C8 CBZ X8, 0x31BB840
	0x031BB6CC LDR W9, [X0 + 0xE0]
	0x031BB6D0 LDRB W19, [X8 + 0x7D]
	0x031BB6D4 CBNZ W9, 0x31BB6EC
	0x031BB6D8 BL 0x1C16DFC
	0x031BB6DC LDR X8, [X20]
	0x031BB6E0 LDR X8, [X8 + 0xB8]
	0x031BB6E4 LDR X8, [X8 + 0x38]
	0x031BB6E8 CBZ X8, 0x31BB840
	0x031BB6EC MOV X0, X8
	0x031BB6F0 BL 0x31BAA98
	0x031BB6F4 LDR X8, [X20]
	0x031BB6F8 LDR X8, [X8 + 0xB8]
	0x031BB6FC LDR X0, [X8 + 0x38]
	0x031BB700 CBZ X0, 0x31BB840
	0x031BB704 LDR V13, [X0 + 0x30]
	0x031BB708 MOV V10.16B, V0.16B
	0x031BB70C CBZ W19, 0x31BB774

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, -40693760
	009 Move V10, V1
	010 Move V1, [X8+67]
	011 Move V11, V0
	012 Move W20, 0x3F800000
	013 Move V0, 0
	014 Move TEMP, 0
	015 Not TEMP
	016 Move W8, TEMP
	017 Move X1, X31
	018 Move V8, V3
	019 Move V9, V2
	020 Move X19, X0
	021 Move [X0+32], W20
	022 Move [X0+108], V0
	023 Move [X0+56], V1
	024 Move [X0+136], W8
	025 Call Object..ctor, X0
	026 Move [X19+16], S11
	027 Move [X19+24], S10
	028 Move [X19+24], S9
	029 Move [X19+32], S8
	030 Move [X19+32], X20
	031 Move [X19+74], W31
	032 Move [X19+72], W31
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X30, [X31+32]
	036 Move D9, [X31+16]
	037 Move D8, [X31+24]
	038 Move D11, [X31+64]
	039 Move D10, [X31+72]
	040 Return 

Method: System.Void .ctor(System.Single x, System.Single y, System.Single width, System.Single height, System.Single alpha)

Disassembly:
	0x031BB710 LDR V8, [X0 + 0x38]
	0x031BB714 LDR V14, [X0 + 0x40]
	0x031BB718 BL 0x31BAA98
	0x031BB71C LDR X8, [X20]
	0x031BB720 LDR X8, [X8 + 0xB8]
	0x031BB724 LDR X8, [X8 + 0x38]
	0x031BB728 CBZ X8, 0x31BB840
	0x031BB72C LDR X0, [X21]
	0x031BB730 LDR V15, [X8 + 0x34]
	0x031BB734 LDR V3, [X8 + 0x3C]
	0x031BB738 LDR V2, [X8 + 0x44]
	0x031BB73C LDR W9, [X0 + 0xE0]
	0x031BB740 LDR X19, [X8 + 0x80]
	0x031BB744 MOV V11.16B, V1.16B
	0x031BB748 CBNZ W9, 0x31BB758
	0x031BB74C STP S3, S2, [X31 + 0x8]
	0x031BB750 BL 0x1C16DFC
	0x031BB754 LDP S3, S2, [X31 + 0x8]
	0x031BB758 FADD S0, S10, S13
	0x031BB75C FADD S1, S11, S15
	0x031BB760 FADD S0, S0, S8
	0x031BB764 FADD S1, S1, S3
	0x031BB768 FMUL S0, S0, S14
	0x031BB76C FMUL S1, S1, S2
	0x031BB770 B 0x31BB7AC
	0x031BB774 BL 0x31BAA98
	0x031BB778 LDR X8, [X20]
	0x031BB77C LDR X8, [X8 + 0xB8]
	0x031BB780 LDR X8, [X8 + 0x38]
	0x031BB784 CBZ X8, 0x31BB840
	0x031BB788 LDR X0, [X21]
	0x031BB78C LDR V8, [X8 + 0x34]

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X19
	008 Move X9, -40693760
	009 Move V11, V1
	010 Move V1, [X9+67]
	011 Move V12, V0
	012 Move W8, 0x3F800000
	013 Move V0, 0
	014 Move TEMP, 0
	015 Not TEMP
	016 Move W9, TEMP
	017 Move X1, X31
	018 Move V8, V4
	019 Move V9, V3
	020 Move V10, V2
	021 Move X19, X0
	022 Move [X0+32], W8
	023 Move [X0+108], V0
	024 Move [X0+56], V1
	025 Move [X0+136], W9
	026 Call Object..ctor, X0
	027 Move [X19+16], S12
	028 Move [X19+24], S11
	029 Move [X19+24], S10
	030 Move [X19+32], S9
	031 Move [X19+32], S8
	032 Move [X19+36], W31
	033 Move [X19+74], W31
	034 Move [X19+72], W31
	035 Move X30, [X31+48]
	036 Move X19, [X31+56]
	037 Move D9, [X31+32]
	038 Move D8, [X31+40]
	039 Move D11, [X31+16]
	040 Move D10, [X31+24]
	041 Move V12, [X31+64]
	042 Return 

Method: System.Void .ctor(System.Single x, System.Single y, System.Single width, System.Single height, System.Single alpha, System.Single rotation)

Disassembly:
	0x031BB790 LDR X19, [X8 + 0x80]
	0x031BB794 MOV V11.16B, V1.16B
	0x031BB798 LDR W9, [X0 + 0xE0]
	0x031BB79C CBNZ W9, 0x31BB7A4
	0x031BB7A0 BL 0x1C16DFC
	0x031BB7A4 FADD S0, S10, S13
	0x031BB7A8 FADD S1, S11, S8
	0x031BB7AC MOV V2.16B, V12.16B
	0x031BB7B0 MOV V3.16B, V9.16B
	0x031BB7B4 MOV X0, X19
	0x031BB7B8 MOV X1, X31
	0x031BB7BC BL 0x3C67CC8
	0x031BB7C0 B 0x31BB5F4
	0x031BB7C4 LDP X20, X19, [X31 + 0x80]
	0x031BB7C8 LDP X22, X21, [X31 + 0x70]
	0x031BB7CC LDP X24, X23, [X31 + 0x60]
	0x031BB7D0 LDP X30, X25, [X31 + 0x50]
	0x031BB7D4 LDP D9, D8, [X31 + 0x40]
	0x031BB7D8 LDP D11, D10, [X31 + 0x30]
	0x031BB7DC LDP D13, D12, [X31 + 0x20]
	0x031BB7E0 LDP D15, D14, [X31 + 0x10]
	0x031BB7E4 ADD X31, X31, 0x90
	0x031BB7E8 RET
	0x031BB7EC LDR X0, [X21]
	0x031BB7F0 LDP S11, S10, [X9 + 0x40]
	0x031BB7F4 LDP S9, S8, [X9 + 0x48]
	0x031BB7F8 LDR W8, [X0 + 0xE0]
	0x031BB7FC CBNZ W8, 0x31BB804
	0x031BB800 BL 0x1C16DFC
	0x031BB804 MOV V0.16B, V11.16B
	0x031BB808 MOV V1.16B, V10.16B
	0x031BB80C MOV V2.16B, V9.16B
	0x031BB810 MOV V3.16B, V8.16B
	0x031BB814 LDP X20, X19, [X31 + 0x80]
	0x031BB818 LDP X22, X21, [X31 + 0x70]
	0x031BB81C LDP X24, X23, [X31 + 0x60]
	0x031BB820 LDP X30, X25, [X31 + 0x50]
	0x031BB824 LDP D9, D8, [X31 + 0x40]
	0x031BB828 LDP D11, D10, [X31 + 0x30]
	0x031BB82C LDP D13, D12, [X31 + 0x20]
	0x031BB830 LDP D15, D14, [X31 + 0x10]
	0x031BB834 MOV X0, X31

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X19
	009 Move V13, V0
	010 Move X8, -40693760
	011 Move V0, 0
	012 Move [X0+108], V0
	013 Move V0, [X8+67]
	014 Move W8, 0x3F800000
	015 Move [X0+32], W8
	016 Move TEMP, 0
	017 Not TEMP
	018 Move W8, TEMP
	019 Move X1, X31
	020 Move V8, V5
	021 Move V9, V4
	022 Move V10, V3
	023 Move V11, V2
	024 Move V12, V1
	025 Move X19, X0
	026 Move [X0+56], V0
	027 Move [X0+136], W8
	028 Call Object..ctor, X0
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move [X19+16], S13
	031 Move [X19+24], S12
	032 Move [X19+24], S11
	033 Move [X19+32], S10
	034 Move [X19+32], S9
	035 Move [X19+40], S8
	036 Move [X19+74], W31
	037 Move [X19+72], W31
	038 Move W8, 1
	039 Move [X19+72], W8
	040 Move X0, X19
	041 Move X30, [X31+48]
	042 Move X19, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move D13, [X31+64]
	048 Move D12, [X31+72]
	049 Move X30, [X31+48]
	050 Move X19, [X31+56]
	051 Move D9, [X31+32]
	052 Move D8, [X31+40]
	053 Move D11, [X31+16]
	054 Move D10, [X31+24]
	055 Move D13, [X31+64]
	056 Move D12, [X31+72]
	057 Return 

Method: System.Boolean get_hasInitiliazed()

Disassembly:
	0x031BBA40 LDP X20, X19, [X31 + 0x40]
	0x031BBA44 LDP X22, X21, [X31 + 0x30]
	0x031BBA48 LDP X30, X23, [X31 + 0x20]
	0x031BBA4C LDP D9, D8, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+136]
	002 Add W31, W8, 1
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Int32 get_id()

Disassembly:
	0x031ADB8C BL 0x1C16DFC
	0x031ADB90 MOV W0, W19
	0x031ADB94 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W8, [X0+136]
	002 Move W9, [X0+140]
	003 Or W0, W8, W9
	004 Return X0

Method: System.Void setId(System.Int32 id, System.Int32 counter)

Disassembly:
	0x031BBA50 LDP D11, D10, [X31], #0x50
	0x031BBA54 B 0x31BBA58

ISIL:
	001 Move [X0+136], W1
	002 Move [X0+140], W2
	003 Return 

Method: System.Void reset()

Disassembly:
	0x031BB5C4 LDR X19, [X8 + 0x50]
	0x031BB5C8 MOV V11.16B, V3.16B
	0x031BB5CC LDR W9, [X0 + 0xE0]
	0x031BB5D0 CBNZ W9, 0x31BB5D8
	0x031BB5D4 BL 0x1C16DFC
	0x031BB5D8 FADD S0, S12, S13
	0x031BB5DC FADD S1, S9, S8
	0x031BB5E0 MOV V2.16B, V10.16B
	0x031BB5E4 MOV V3.16B, V11.16B
	0x031BB5E8 MOV X0, X19
	0x031BB5EC MOV X1, X31
	0x031BB5F0 BL 0x3C677DC
	0x031BB5F4 LDR X0, [X20]
	0x031BB5F8 ADD W22, W22, 0x1
	0x031BB5FC ADD X24, X24, 0x8
	0x031BB600 B 0x31BB250
	0x031BB604 CBZ X8, 0x31BB840
	0x031BB608 MOV X0, X8
	0x031BB60C MOV V12.16B, V2.16B
	0x031BB610 BL 0x31BAA98
	0x031BB614 LDR X0, [X20]
	0x031BB618 MOV V9.16B, V3.16B
	0x031BB61C LDR W8, [X0 + 0xE0]
	0x031BB620 CBNZ W8, 0x31BB62C
	0x031BB624 BL 0x1C16DFC
	0x031BB628 LDR X0, [X20]
	0x031BB62C LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, -40685568
	005 Move V0, [X8+1608]
	006 Move [X0+74], W31
	007 Move [X0+72], W31
	008 Move X20, 0x121F000
	009 Move [X0+32], D0
	010 Move W8, [X20+1935]
	011 Move X19, X0
	012 Compare W8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, 0xF41000
	015 Move X0, [X0+3848]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1935], W8
	019 Move X8, 0xF41000
	020 Move X8, [X8+3848]
	021 Move X8, [X8]
	022 Move X8, [X8+184]
	023 Move V0, [X8]
	024 Move [X19+126], W31
	025 Move [X19+104], W31
	026 Move [X19+48], D0
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return 

Method: System.Void resetForRotation()

Disassembly:
	0x031BB838 ADD X31, X31, 0x90
	0x031BB83C B 0x3C6662C
	0x031BB840 BL 0x1C16F20
	0x031BB844 BL 0x1C16F28
	0x031BB848 STP D11, D10, [X31 - 0x30]!
	0x031BB84C STP D9, D8, [X31 + 0x10]
	0x031BB850 STP X30, X19, [X31 + 0x20]
	0x031BB854 MOV X0, X31
	0x031BB858 MOV V8.16B, V3.16B
	0x031BB85C MOV V9.16B, V2.16B
	0x031BB860 MOV V10.16B, V1.16B
	0x031BB864 MOV V11.16B, V0.16B
	0x031BB868 BL 0x3C0E0B0
	0x031BB86C SCVTF S0, W0
	0x031BB870 FCMP S11, S0
	0x031BB874 MOV X0, X31
	0x031BB878 CSET W19, LE
	0x031BB87C BL 0x3C0E0D8
	0x031BB880 SCVTF S0, W0
	0x031BB884 FADD S1, S10, S8
	0x031BB888 FCMP S10, S0
	0x031BB88C FADD S2, S11, S9
	0x031BB890 CSET W8, LE
	0x031BB894 FCMP S1, 0x0
	0x031BB898 CSET W9, PL
	0x031BB89C FCMP S2, 0x0
	0x031BB8A0 CSET W10, PL
	0x031BB8A4 AND W10, W10, W19, 0x0
	0x031BB8A8 LDP X30, X19, [X31 + 0x20]
	0x031BB8AC LDP D9, D8, [X31 + 0x10]
	0x031BB8B0 AND W8, W10, W8, 0x0
	0x031BB8B4 AND W0, W9, W8, 0x0
	0x031BB8B8 LDP D11, D10, [X31], #0x30
	0x031BB8BC RET
	0x031BB8C0 STR X30, [X31 - 0x30]!
	0x031BB8C4 STP X22, X21, [X31 + 0x10]
	0x031BB8C8 STP X20, X19, [X31 + 0x20]
	0x031BB8CC ADRP X21, 0x1220000
	0x031BB8D0 ADRP X20, 0xF64000
	0x031BB8D4 LDRB W8, [X21 + 0xEE3]
	0x031BB8D8 LDR X20, [X20 + 0x3A0]
	0x031BB8DC MOV W19, W0
	0x031BB8E0 TBNZ X8, 0x0, 0x31BB8F8
	0x031BB8E4 ADRP X0, 0xF64000
	0x031BB8E8 LDR X0, [X0 + 0x3A0]
	0x031BB8EC BL 0x1C16CF4
	0x031BB8F0 MOVZ W8, 0x1
	0x031BB8F4 STRB W8, [X21 + 0xEE3]
	0x031BB8F8 LDR X0, [X20]
	0x031BB8FC LDR W8, [X0 + 0xE0]
	0x031BB900 CBNZ W8, 0x31BB90C
	0x031BB904 BL 0x1C16DFC
	0x031BB908 LDR X0, [X20]
	0x031BB90C LDR X8, [X0 + 0xB8]
	0x031BB910 LDR W8, [X8 + 0x4]
	0x031BB914 MUL W19, W8, W19
	0x031BB918 ADD W21, W19, W8
	0x031BB91C SBFM X8, X19, 0x3D, 0x1F
	0x031BB920 ADD X22, X8, 0x20
	0x031BB924 LDR W8, [X0 + 0xE0]
	0x031BB928 CBNZ W8, 0x31BB934
	0x031BB92C BL 0x1C16DFC
	0x031BB930 LDR X0, [X20]
	0x031BB934 CMP W19, W21
	0x031BB938 B.GE 0x31BB984
	0x031BB93C LDR X8, [X0 + 0xB8]
	0x031BB940 LDR X8, [X8 + 0x10]
	0x031BB944 CBZ X8, 0x31BB984
	0x031BB948 LDR W9, [X0 + 0xE0]
	0x031BB94C CBNZ W9, 0x31BB964
	0x031BB950 BL 0x1C16DFC
	0x031BB954 LDR X8, [X20]
	0x031BB958 LDR X8, [X8 + 0xB8]
	0x031BB95C LDR X8, [X8 + 0x10]
	0x031BB960 CBZ X8, 0x31BB998
	0x031BB964 LDR W9, [X8 + 0x18]
	0x031BB968 CMP W19, W9
	0x031BB96C B.CS 0x31BB994
	0x031BB970 STR X31, [X8, X22, LSL]
	0x031BB974 LDR X0, [X20]
	0x031BB978 ADD W19, W19, 0x1
	0x031BB97C ADD X22, X22, 0x8
	0x031BB980 B 0x31BB924
	0x031BB984 LDP X20, X19, [X31 + 0x20]
	0x031BB988 LDP X22, X21, [X31 + 0x10]
	0x031BB98C LDR X30, [X31], #0x30
	0x031BB990 RET
	0x031BB994 BL 0x1C16F28
	0x031BB998 BL 0x1C16F20
	0x031BB99C STP D11, D10, [X31 - 0x50]!
	0x031BB9A0 STP D9, D8, [X31 + 0x10]
	0x031BB9A4 STP X30, X23, [X31 + 0x20]
	0x031BB9A8 STP X22, X21, [X31 + 0x30]
	0x031BB9AC STP X20, X19, [X31 + 0x40]
	0x031BB9B0 ADRP X21, 0x1220000
	0x031BB9B4 ADRP X23, 0xF64000
	0x031BB9B8 ADRP X22, 0xF64000
	0x031BB9BC LDRB W8, [X21 + 0xEE4]
	0x031BB9C0 LDR X23, [X23 + 0x5C0]
	0x031BB9C4 LDR X22, [X22 + 0x3A0]
	0x031BB9C8 MOV W19, W1
	0x031BB9CC MOV X20, X0
	0x031BB9D0 MOV V8.16B, V3.16B
	0x031BB9D4 MOV V9.16B, V2.16B
	0x031BB9D8 MOV V10.16B, V1.16B
	0x031BB9DC MOV V11.16B, V0.16B
	0x031BB9E0 TBNZ X8, 0x0, 0x31BBA04
	0x031BB9E4 ADRP X0, 0xF64000
	0x031BB9E8 LDR X0, [X0 + 0x3A0]
	0x031BB9EC BL 0x1C16CF4
	0x031BB9F0 ADRP X0, 0xF64000
	0x031BB9F4 LDR X0, [X0 + 0x5C0]
	0x031BB9F8 BL 0x1C16CF4
	0x031BB9FC MOVZ W8, 0x1
	0x031BBA00 STRB W8, [X21 + 0xEE4]
	0x031BBA04 LDR X0, [X23]
	0x031BBA08 BL 0x1C16F10
	0x031BBA0C MOV V0.16B, V11.16B
	0x031BBA10 MOV V1.16B, V10.16B
	0x031BBA14 MOV V2.16B, V9.16B
	0x031BBA18 MOV V3.16B, V8.16B
	0x031BBA1C MOV X21, X0
	0x031BBA20 BL 0x31BA630
	0x031BBA24 LDR X0, [X22]
	0x031BBA28 LDR W8, [X0 + 0xE0]
	0x031BBA2C CBNZ W8, 0x31BBA34
	0x031BBA30 BL 0x1C16DFC
	0x031BBA34 MOV X0, X21
	0x031BBA38 MOV X1, X20
	0x031BBA3C MOV W2, W19

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], D14
	003 Move [X31+144], D13
	004 Move [X31+152], D12
	005 Move [X31+160], D11
	006 Move [X31+168], D10
	007 Move [X31+176], D9
	008 Move [X31+184], D8
	009 Move [X31+192], X30
	010 Move [X31+200], X21
	011 Move [X31+208], X20
	012 Move [X31+216], X19
	013 Move X21, 0x1221000
	014 Move X20, 0xF60000
	015 Move W8, [X21+3803]
	016 Move X20, [X20+1216]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF60000
	023 Move X0, [X0+1216]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3803], W8
	027 Move X0, [X20]
	028 NotImplemented "Instruction MOVI not yet implemented."
	029 Move [X31+96], V0
	030 Move [X31+104], V0
	031 Move [X31+64], V0
	032 Move [X31+72], V0
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Add X8, X31, 0
	038 Move X0, X31
	039 Call GUI.get_matrix
	040 Move V0, [X31]
	041 Move V1, [X31+16]
	042 Move V2, [X31+32]
	043 Move V3, [X31+48]
	044 Add X0, X31, 64
	045 Move W1, W31
	046 Move X2, X31
	047 Move [X31+64], V0
	048 Move [X31+72], V1
	049 Move [X31+96], V2
	050 Move [X31+104], V3
	051 Call Matrix4x4.get_Item, X0, X1
	052 Add X8, X31, 0
	053 Move X0, X31
	054 Move V8, V0
	055 Call GUI.get_matrix
	056 Move V0, [X31]
	057 Move V1, [X31+16]
	058 Move V2, [X31+32]
	059 Move V3, [X31+48]
	060 Add X0, X31, 64
	061 Move W1, 5
	062 Move X2, X31
	063 Move [X31+64], V0
	064 Move [X31+72], V1
	065 Move [X31+96], V2
	066 Move [X31+104], V3
	067 Call Matrix4x4.get_Item, X0, X1
	068 Add X8, X31, 0
	069 Move X0, X31
	070 Move V9, V0
	071 Call GUI.get_matrix
	072 Move V0, [X31]
	073 Move V1, [X31+16]
	074 Move V2, [X31+32]
	075 Move V3, [X31+48]
	076 Add X0, X31, 64
	077 Move W1, 10
	078 Move X2, X31
	079 Move [X31+64], V0
	080 Move [X31+72], V1
	081 Move [X31+96], V2
	082 Move [X31+104], V3
	083 Call Matrix4x4.get_Item, X0, X1
	084 Move X21, 0x121F000
	085 Move W8, [X21+1935]
	086 Move V10, [X19+40]
	087 Compare W8, 0
	088 JumpIfNotEqual {94}
	089 Move X0, 0xF41000
	090 Move X0, [X0+3848]
	091 Call 0x1C17CF4
	092 Move W8, 1
	093 Move [X21+1935], W8
	094 Move X8, 0xF41000
	095 Move X8, [X8+3848]
	096 Move X8, [X8]
	097 Move X8, [X8+184]
	098 Move V0, [X8]
	099 Move X8, -40701952
	100 Move V1, [X8+3872]
	101 Subtract V0, V10, V0
	102 NotImplemented "Instruction INVALID not yet implemented."
	103 NotImplemented "Instruction FADDP not yet implemented."
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 Move X0, [X20]
	106 Move V11, [X19+16]
	107 Move V12, [X19+24]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Add X8, X31, 0
	113 Move X0, X31
	114 Call GUI.get_matrix
	115 Move V0, [X31]
	116 Move V1, [X31+16]
	117 Move V2, [X31+32]
	118 Move V3, [X31+48]
	119 Add X0, X31, 64
	120 Move W1, 12
	121 Move X2, X31
	122 Move [X31+64], V0
	123 Move [X31+72], V1
	124 Move [X31+96], V2
	125 Move [X31+104], V3
	126 Call Matrix4x4.get_Item, X0, X1
	127 Move V13, [X19+20]
	128 Move V14, [X19+28]
	129 Add X8, X31, 0
	130 Move X0, X31
	131 Move V10, V0
	132 Call GUI.get_matrix
	133 Move V0, [X31]
	134 Move V1, [X31+16]
	135 Move V2, [X31+32]
	136 Move V3, [X31+48]
	137 Add X0, X31, 64
	138 Move W1, 13
	139 Move X2, X31
	140 Move [X31+64], V0
	141 Move [X31+72], V1
	142 Move [X31+96], V2
	143 Move [X31+104], V3
	144 Call Matrix4x4.get_Item, X0, X1
	145 Move S1, 0.5
	146 Multiply S2, S12, S1
	147 Multiply S1, S14, S1
	148 Add S2, S11, S2
	149 Add S1, S13, S1
	150 Multiply S2, S8, S2
	151 Multiply S1, S9, S1
	152 Add S2, S2, S10
	153 Add S0, S1, S0
	154 Move [X19+40], S2
	155 Move [X19+48], S0
	156 Move X20, [X31+208]
	157 Move X19, [X31+216]
	158 Move X30, [X31+192]
	159 Move X21, [X31+200]
	160 Move D9, [X31+176]
	161 Move D8, [X31+184]
	162 Move D11, [X31+160]
	163 Move D10, [X31+168]
	164 Move D13, [X31+144]
	165 Move D12, [X31+152]
	166 Move V14, [X31+128]
	167 Add X31, X31, 224
	168 Return 

Method: System.Single get_x()

Disassembly:
	0x031BBA58 STR X30, [X31 - 0x30]!
	0x031BBA5C STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move V0, [X0+16]
	002 Return V0

Method: System.Void set_x(System.Single value)

Disassembly:
	0x031BBA60 STP X20, X19, [X31 + 0x20]
	0x031BBA64 ADRP X22, 0x1220000

ISIL:
	001 Move [X0+16], S0
	002 Return 

Method: System.Single get_y()

Disassembly:
	0x031BBA68 LDRB W8, [X22 + 0xEE5]
	0x031BBA6C MOV W19, W2

ISIL:
	001 Move V0, [X0+20]
	002 Return V0

Method: System.Void set_y(System.Single value)

Disassembly:
	0x031BBA70 MOV X21, X1
	0x031BBA74 MOV X20, X0

ISIL:
	001 Move [X0+20], S0
	002 Return 

Method: System.Single get_width()

Disassembly:
	0x031BBA78 TBNZ X8, 0x0, 0x31BBA90
	0x031BBA7C ADRP X0, 0xF64000

ISIL:
	001 Move V0, [X0+24]
	002 Return V0

Method: System.Void set_width(System.Single value)

Disassembly:
	0x031BBA80 LDR X0, [X0 + 0x3A0]
	0x031BBA84 BL 0x1C16CF4

ISIL:
	001 Move [X0+24], S0
	002 Return 

Method: System.Single get_height()

Disassembly:
	0x031BBA88 MOVZ W8, 0x1
	0x031BBA8C STRB W8, [X22 + 0xEE5]

ISIL:
	001 Move V0, [X0+28]
	002 Return V0

Method: System.Void set_height(System.Single value)

Disassembly:
	0x031BBA90 CBZ X20, 0x31BBAD0
	0x031BBA94 ADRP X8, 0xF64000

ISIL:
	001 Move [X0+28], S0
	002 Return 

Method: UnityEngine.Rect get_rect()

Disassembly:
	0x031BBA98 LDR X8, [X8 + 0x3A0]
	0x031BBA9C MOVZ W9, 0x1
	0x031BBAA0 STR W9, [X20 + 0x58]
	0x031BBAA4 STR X21, [X20 + 0x50]
	0x031BBAA8 LDR X0, [X8]
	0x031BBAAC LDR W8, [X0 + 0xE0]
	0x031BBAB0 CBNZ W8, 0x31BBAB8
	0x031BBAB4 BL 0x1C16DFC
	0x031BBAB8 MOV X0, X20
	0x031BBABC MOV W1, W19
	0x031BBAC0 LDP X20, X19, [X31 + 0x20]
	0x031BBAC4 LDP X22, X21, [X31 + 0x10]
	0x031BBAC8 LDR X30, [X31], #0x30
	0x031BBACC B 0x31BBAD4
	0x031BBAD0 BL 0x1C16F20
	0x031BBAD4 STP X30, X27, [X31 - 0x50]!
	0x031BBAD8 STP X26, X25, [X31 + 0x10]
	0x031BBADC STP X24, X23, [X31 + 0x20]
	0x031BBAE0 STP X22, X21, [X31 + 0x30]
	0x031BBAE4 STP X20, X19, [X31 + 0x40]
	0x031BBAE8 ADRP X21, 0x1220000
	0x031BBAEC ADRP X22, 0xF64000
	0x031BBAF0 LDRB W8, [X21 + 0xEE8]
	0x031BBAF4 LDR X22, [X22 + 0x3A0]
	0x031BBAF8 MOV W19, W1
	0x031BBAFC MOV X20, X0
	0x031BBB00 TBNZ X8, 0x0, 0x31BBB3C
	0x031BBB04 ADRP X0, 0xF38000
	0x031BBB08 LDR X0, [X0 + 0xA28]
	0x031BBB0C BL 0x1C16CF4
	0x031BBB10 ADRP X0, 0xF64000
	0x031BBB14 LDR X0, [X0 + 0x3A0]
	0x031BBB18 BL 0x1C16CF4
	0x031BBB1C ADRP X0, 0xF64000
	0x031BBB20 LDR X0, [X0 + 0x600]
	0x031BBB24 BL 0x1C16CF4
	0x031BBB28 ADRP X0, 0xF64000
	0x031BBB2C LDR X0, [X0 + 0x608]
	0x031BBB30 BL 0x1C16CF4
	0x031BBB34 MOVZ W8, 0x1
	0x031BBB38 STRB W8, [X21 + 0xEE8]
	0x031BBB3C LDR X0, [X22]
	0x031BBB40 LDR W8, [X0 + 0xE0]
	0x031BBB44 CBNZ W8, 0x31BBB50
	0x031BBB48 BL 0x1C16DFC
	0x031BBB4C LDR X0, [X22]
	0x031BBB50 LDR X8, [X0 + 0xB8]
	0x031BBB54 MOVZ W9, 0x1
	0x031BBB58 STRB W9, [X8 + 0x50]
	0x031BBB5C BL 0x31BAEDC
	0x031BBB60 CBZ X20, 0x31BBDC8
	0x031BBB64 LDR X0, [X22]
	0x031BBB68 LDP W9, W10, [X20 + 0x88]
	0x031BBB6C LDR X8, [X0 + 0xB8]
	0x031BBB70 LDR W11, [X0 + 0xE0]
	0x031BBB74 ORR W21, W9, W10, 0x10
	0x031BBB78 LDR W24, [X8 + 0x4]
	0x031BBB7C CBNZ W11, 0x31BBB84
	0x031BBB80 BL 0x1C16DFC
	0x031BBB84 ADRP X23, 0xF38000
	0x031BBB88 LDR X23, [X23 + 0xA28]
	0x031BBB8C MOV W0, W21
	0x031BBB90 BL 0x31ACB98
	0x031BBB94 LDR W8, [X20 + 0x58]
	0x031BBB98 CMP W8, 0x1
	0x031BBB9C B.NE 0x31BBBE8
	0x031BBBA0 LDR X0, [X20 + 0x60]
	0x031BBBA4 CBZ X0, 0x31BBBE8
	0x031BBBA8 MOV X1, X31
	0x031BBBAC BL 0x3C729A4
	0x031BBBB0 CBZ X0, 0x31BBDC8
	0x031BBBB4 MOV X1, X31
	0x031BBBB8 BL 0x3C7309C
	0x031BBBBC FCMP S3, 0x0
	0x031BBBC0 B.HI 0x31BBBE8
	0x031BBBC4 LDR X0, [X23]
	0x031BBBC8 LDR W8, [X0 + 0xE0]
	0x031BBBCC CBNZ W8, 0x31BBBD4
	0x031BBBD0 BL 0x1C16DFC
	0x031BBBD4 ADRP X8, 0xF64000
	0x031BBBD8 LDR X8, [X8 + 0x608]
	0x031BBBDC MOV X1, X31
	0x031BBBE0 LDR X0, [X8]
	0x031BBBE4 BL 0x3C06A04
	0x031BBBE8 LDR V0, [X20 + 0x40]
	0x031BBBEC MOVZ W8, 0x7F800000
	0x031BBBF0 FMOV S1, W8
	0x031BBBF4 FCMP S0, S1
	0x031BBBF8 B.NE 0x31BBC20
	0x031BBBFC MOV X0, X31
	0x031BBC00 BL 0x3C0E0B0
	0x031BBC04 MOV W21, W0
	0x031BBC08 MOV X0, X31
	0x031BBC0C BL 0x3C0E0D8
	0x031BBC10 SCVTF S0, W21
	0x031BBC14 SCVTF S1, W0
	0x031BBC18 STR X31, [X20 + 0x38]
	0x031BBC1C STP S0, S1, [X20 + 0x40]
	0x031BBC20 LDR X0, [X22]
	0x031BBC24 MADD W21, W24, W19, W24
	0x031BBC28 LDR W8, [X0 + 0xE0]
	0x031BBC2C CBNZ W8, 0x31BBC38
	0x031BBC30 BL 0x1C16DFC
	0x031BBC34 LDR X0, [X22]
	0x031BBC38 LDR X8, [X0 + 0xB8]
	0x031BBC3C LDR W8, [X8 + 0x4]
	0x031BBC40 MUL W25, W8, W19
	0x031BBC44 SUBS W27, W21, W25
	0x031BBC48 B.LE 0x31BBC9C
	0x031BBC4C MOV W21, W31
	0x031BBC50 LDR W8, [X0 + 0xE0]
	0x031BBC54 CBNZ W8, 0x31BBC60
	0x031BBC58 BL 0x1C16DFC
	0x031BBC5C LDR X0, [X22]
	0x031BBC60 LDR X8, [X0 + 0xB8]
	0x031BBC64 LDR X24, [X8 + 0x10]
	0x031BBC68 CBZ X24, 0x31BBDC8
	0x031BBC6C LDR W10, [X24 + 0x18]
	0x031BBC70 ADD W9, W25, W21
	0x031BBC74 CMP W9, W10
	0x031BBC78 B.CS 0x31BBDCC
	0x031BBC7C SXTW X26, W9
	0x031BBC80 ADD X9, X24, X26, 0x3, LSL
	0x031BBC84 LDR X9, [X9 + 0x20]
	0x031BBC88 STR X9, [X8 + 0x38]
	0x031BBC8C CBZ X9, 0x31BBCC8
	0x031BBC90 ADD W21, W21, 0x1
	0x031BBC94 CMP W27, W21
	0x031BBC98 B.NE 0x31BBC50
	0x031BBC9C LDR X0, [X23]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x1221000
	010 Move X20, 0xF65000
	011 Move W8, [X21+3804]
	012 Move X20, [X20+1472]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0xF65000
	019 Move X0, [X0+1480]
	020 Call 0x1C17CF4
	021 Move X0, 0xF60000
	022 Move X0, [X0+1216]
	023 Call 0x1C17CF4
	024 Move X0, 0xF65000
	025 Move X0, [X0+1472]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3804], W8
	029 Move X8, [X20]
	030 Move X21, 0xF60000
	031 Move X8, [X8+184]
	032 Move W9, [X8]
	033 Move X21, [X21+1216]
	034 Compare W9, 0
	035 JumpIfEqual {55}
	036 Move [X8], W31
	037 Move X0, [X21]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X31
	043 Call GUI.get_color
	044 Move X0, X31
	045 Move V8, V0
	046 Call GUI.get_color
	047 Move X0, X31
	048 Move V9, V1
	049 Call GUI.get_color
	050 Move S3, 1
	051 Move V0, V8
	052 Move V1, V9
	053 Move X0, X31
	054 Call GUI.set_color, X0
	055 Move W8, [X19+72]
	056 Compare W8, 0
	057 JumpIfEqual {92}
	058 Move W8, [X19+73]
	059 Compare W8, 0
	060 JumpIfEqual {77}
	061 NotImplemented "Instruction STRH not yet implemented."
	062 Move X22, 0x121F000
	063 Move W8, [X22+1935]
	064 Compare W8, 0
	065 JumpIfNotEqual {71}
	066 Move X0, 0xF41000
	067 Move X0, [X0+3848]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X22+1935], W8
	071 Move X8, 0xF41000
	072 Move X8, [X8+3848]
	073 Move X8, [X8]
	074 Move X8, [X8+184]
	075 Move V0, [X8]
	076 Move [X19+40], D0
	077 Move X8, 0xF65000
	078 Move X8, [X8+1480]
	079 Move S10, [X19+36]
	080 Move S8, [X19+40]
	081 Move V9, [X19+44]
	082 Move X0, [X8]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move V0, V10
	088 Move V1, V8
	089 Move V2, V9
	090 Move X0, X31
	091 Call GUIUtility.RotateAroundPivot, V0, X0
	092 Move W8, [X19+74]
	093 Compare W8, 0
	094 JumpIfEqual {117}
	095 Move X0, [X21]
	096 Move W8, [X0+224]
	097 Compare W8, 0
	098 JumpIfNotEqual {100}
	099 Call 0x1C17DFC
	100 Move X0, X31
	101 Call GUI.get_color
	102 Move X0, X31
	103 Move V8, V0
	104 Call GUI.get_color
	105 Move X0, X31
	106 Move V9, V1
	107 Call GUI.get_color
	108 Move V3, [X19+32]
	109 Move V0, V8
	110 Move V1, V9
	111 Move X0, X31
	112 Call GUI.set_color, X0
	113 Move X8, [X20]
	114 Move W9, 1
	115 Move X8, [X8+184]
	116 Move [X8], W9
	117 Move W8, [X19+124]
	118 Compare W8, 0
	119 JumpIfEqual {139}
	120 Move W8, [X19+125]
	121 Move X0, [X19+96]
	122 Move V0, [X19+28]
	123 Compare W8, 0
	124 JumpIfEqual {129}
	125 Compare X0, 0
	126 JumpIfEqual {152}
	127 Move V1, [X19+68]
	128 Multiply S0, S0, S1
	129 Compare X0, 0
	130 JumpIfEqual {152}
	131 Move W8, 0x7F800000
	132 Move S1, W8
	133 NotImplemented "Instruction FCVTZS not yet implemented."
	134 NotImplemented "Instruction FCMP not yet implemented."
	135 Move W8, 0x80000000
	136 NotImplemented "Instruction CSEL not yet implemented."
	137 Move X2, X31
	138 Call GUIStyle.set_fontSize, X0, X1
	139 Move S0, [X19+16]
	140 Move S1, [X19+20]
	141 Move S2, [X19+24]
	142 Move S3, [X19+28]
	143 Move X20, [X31+48]
	144 Move X19, [X31+56]
	145 Move X22, [X31+32]
	146 Move X21, [X31+40]
	147 Move X30, [X31+24]
	148 Move D9, [X31+8]
	149 Move D8, [X31+16]
	150 Move V10, [X31+64]
	151 Return X0
	152 Call 0x1C17F20

Method: System.Void set_rect(UnityEngine.Rect value)

Disassembly:
	0x031BBCA0 ADRP X19, 0xF64000
	0x031BBCA4 LDR W8, [X0 + 0xE0]
	0x031BBCA8 LDR X19, [X19 + 0x600]

ISIL:
	001 Move [X0+16], S0
	002 Move [X0+24], S1
	003 Move [X0+24], S2
	004 Move [X0+32], S3
	005 Return 

Method: LTRect setStyle(UnityEngine.GUIStyle style)

Disassembly:
	0x031BBCAC CBNZ W8, 0x31BBCB4
	0x031BBCB0 BL 0x1C16DFC

ISIL:
	001 Move [X0+96], X1
	002 Return X0

Method: LTRect setFontScaleToFit(System.Boolean fontScaleToFit)

Disassembly:
	0x031BBCB4 LDR X0, [X19]
	0x031BBCB8 MOV X1, X31
	0x031BBCBC BL 0x3C0649C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+124], W8
	003 Return X0

Method: LTRect setColor(UnityEngine.Color color)

Disassembly:
	0x031BBCC0 MOV X0, X31
	0x031BBCC4 B 0x31BBDB0
	0x031BBCC8 LDR W9, [X0 + 0xE0]
	0x031BBCCC ADD W23, W25, W21
	0x031BBCD0 CBNZ W9, 0x31BBCE4

ISIL:
	001 Move W8, 1
	002 Move [X0+108], S0
	003 Move [X0+116], S1
	004 Move [X0+116], S2
	005 Move [X0+124], S3
	006 Move [X0+104], W8
	007 Return X0

Method: LTRect setAlpha(System.Single alpha)

Disassembly:
	0x031BBCD4 BL 0x1C16DFC
	0x031BBCD8 LDR X8, [X22]

ISIL:
	001 Move [X0+32], S0
	002 Return X0

Method: LTRect setLabel(System.String str)

Disassembly:
	0x031BBCDC LDR X8, [X8 + 0xB8]
	0x031BBCE0 LDR X24, [X8 + 0x10]

ISIL:
	001 Move [X0+80], X1
	002 Return X0

Method: LTRect setUseSimpleScale(System.Boolean useSimpleScale, UnityEngine.Rect relativeRect)

Disassembly:
	0x031BBCE4 MOVZ W9, 0x1
	0x031BBCE8 STR X20, [X8 + 0x38]
	0x031BBCEC STRB W9, [X20 + 0x48]
	0x031BBCF0 STRB W9, [X20 + 0x4A]
	0x031BBCF4 LDR W8, [X8 + 0x54]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+56], S0
	003 Move [X0+64], S1
	004 Move [X0+125], W8
	005 Move [X0+64], S2
	006 Move [X0+72], S3
	007 Return X0

Method: LTRect setUseSimpleScale(System.Boolean useSimpleScale)

Disassembly:
	0x031BBCF8 STP W23, W8, [X20 + 0x88]
	0x031BBCFC CBZ X24, 0x31BBDC8
	0x031BBD00 LDR X8, [X24]
	0x031BBD04 MOV X0, X20
	0x031BBD08 LDR X1, [X8 + 0x40]
	0x031BBD0C BL 0x1C16E00
	0x031BBD10 CBZ X0, 0x31BBDD0
	0x031BBD14 LDR W8, [X24 + 0x18]
	0x031BBD18 CMP W23, W8
	0x031BBD1C B.CS 0x31BBDCC
	0x031BBD20 ADD X8, X24, X26, 0x3, LSL
	0x031BBD24 STR X20, [X8 + 0x20]
	0x031BBD28 LDR X0, [X22]
	0x031BBD2C LDR X8, [X0 + 0xB8]
	0x031BBD30 LDR X8, [X8 + 0x18]
	0x031BBD34 CBZ X8, 0x31BBDC8
	0x031BBD38 LDR W9, [X8 + 0x18]
	0x031BBD3C CMP W9, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 And W8, W1, 1
	005 Move X19, X0
	006 Move [X0+125], W8
	007 Move X0, X31
	008 Call Screen.get_width
	009 Move W20, W0
	010 Move X0, X31
	011 Call Screen.get_height
	012 NotImplemented "Instruction SCVTF not yet implemented."
	013 NotImplemented "Instruction SCVTF not yet implemented."
	014 Move [X19+56], X31
	015 Move [X19+64], S0
	016 Move [X19+72], S1
	017 Move X0, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Return X0

Method: LTRect setSizeByHeight(System.Boolean sizeByHeight)

Disassembly:
	0x031BBD40 B.LS 0x31BBDCC
	0x031BBD44 SXTW X20, W19
	0x031BBD48 ADD X9, X8, X20, 0x2, LSL

ISIL:
	001 And W8, W1, 1
	002 Move [X0+126], W8
	003 Return X0

Method: System.String ToString()

Disassembly:
	0x031BBD4C LDR W9, [X9 + 0x20]
	0x031BBD50 CMP W21, W9
	0x031BBD54 B.LT 0x31BBD8C
	0x031BBD58 LDR W9, [X0 + 0xE0]
	0x031BBD5C CBNZ W9, 0x31BBD74
	0x031BBD60 BL 0x1C16DFC
	0x031BBD64 LDR X0, [X22]
	0x031BBD68 LDR X8, [X0 + 0xB8]
	0x031BBD6C LDR X8, [X8 + 0x18]
	0x031BBD70 CBZ X8, 0x31BBDC8
	0x031BBD74 LDR W9, [X8 + 0x18]
	0x031BBD78 CMP W9, W19
	0x031BBD7C B.LS 0x31BBDCC
	0x031BBD80 ADD W9, W21, 0x1
	0x031BBD84 ADD X8, X8, X20, 0x2, LSL
	0x031BBD88 STR W9, [X8 + 0x20]
	0x031BBD8C LDR W8, [X0 + 0xE0]
	0x031BBD90 CBNZ W8, 0x31BBD9C
	0x031BBD94 BL 0x1C16DFC
	0x031BBD98 LDR X0, [X22]
	0x031BBD9C LDR X8, [X0 + 0xB8]
	0x031BBDA0 LDR W9, [X8 + 0x54]
	0x031BBDA4 LDR X0, [X8 + 0x38]
	0x031BBDA8 ADD W9, W9, 0x1
	0x031BBDAC STR W9, [X8 + 0x54]
	0x031BBDB0 LDP X20, X19, [X31 + 0x40]
	0x031BBDB4 LDP X22, X21, [X31 + 0x30]
	0x031BBDB8 LDP X24, X23, [X31 + 0x20]
	0x031BBDBC LDP X26, X25, [X31 + 0x10]
	0x031BBDC0 LDP X30, X27, [X31], #0x50
	0x031BBDC4 RET
	0x031BBDC8 BL 0x1C16F20
	0x031BBDCC BL 0x1C16F28
	0x031BBDD0 BL 0x1C16F44
	0x031BBDD4 MOV X1, X31
	0x031BBDD8 BL 0x1C16DEC
	0x031BBDDC STP D11, D10, [X31 - 0x50]!
	0x031BBDE0 STP D9, D8, [X31 + 0x10]
	0x031BBDE4 STP X30, X23, [X31 + 0x20]
	0x031BBDE8 STP X22, X21, [X31 + 0x30]
	0x031BBDEC STP X20, X19, [X31 + 0x40]
	0x031BBDF0 ADRP X21, 0x1220000
	0x031BBDF4 ADRP X23, 0xF64000
	0x031BBDF8 ADRP X22, 0xF64000
	0x031BBDFC LDRB W8, [X21 + 0xEE6]
	0x031BBE00 LDR X23, [X23 + 0x5C0]
	0x031BBE04 LDR X22, [X22 + 0x3A0]
	0x031BBE08 MOV W19, W1
	0x031BBE0C MOV X20, X0
	0x031BBE10 MOV V8.16B, V3.16B
	0x031BBE14 MOV V9.16B, V2.16B
	0x031BBE18 MOV V10.16B, V1.16B
	0x031BBE1C MOV V11.16B, V0.16B
	0x031BBE20 TBNZ X8, 0x0, 0x31BBE44
	0x031BBE24 ADRP X0, 0xF64000
	0x031BBE28 LDR X0, [X0 + 0x3A0]
	0x031BBE2C BL 0x1C16CF4
	0x031BBE30 ADRP X0, 0xF64000
	0x031BBE34 LDR X0, [X0 + 0x5C0]
	0x031BBE38 BL 0x1C16CF4
	0x031BBE3C MOVZ W8, 0x1
	0x031BBE40 STRB W8, [X21 + 0xEE6]
	0x031BBE44 LDR X0, [X23]
	0x031BBE48 BL 0x1C16F10
	0x031BBE4C MOV V0.16B, V11.16B
	0x031BBE50 MOV V1.16B, V10.16B
	0x031BBE54 MOV V2.16B, V9.16B
	0x031BBE58 MOV V3.16B, V8.16B
	0x031BBE5C MOV X21, X0
	0x031BBE60 BL 0x31BA630
	0x031BBE64 LDR X0, [X22]
	0x031BBE68 LDR W8, [X0 + 0xE0]
	0x031BBE6C CBNZ W8, 0x31BBE74
	0x031BBE70 BL 0x1C16DFC
	0x031BBE74 MOV X0, X21
	0x031BBE78 MOV X1, X20
	0x031BBE7C MOV W2, W19
	0x031BBE80 LDP X20, X19, [X31 + 0x40]
	0x031BBE84 LDP X22, X21, [X31 + 0x30]
	0x031BBE88 LDP X30, X23, [X31 + 0x20]
	0x031BBE8C LDP D9, D8, [X31 + 0x10]
	0x031BBE90 LDP D11, D10, [X31], #0x50
	0x031BBE94 B 0x31BBE98
	0x031BBE98 STR X30, [X31 - 0x30]!
	0x031BBE9C STP X22, X21, [X31 + 0x10]
	0x031BBEA0 STP X20, X19, [X31 + 0x20]
	0x031BBEA4 ADRP X22, 0x1220000
	0x031BBEA8 LDRB W8, [X22 + 0xEE7]
	0x031BBEAC MOV W19, W2
	0x031BBEB0 MOV X21, X1
	0x031BBEB4 MOV X20, X0
	0x031BBEB8 TBNZ X8, 0x0, 0x31BBED0
	0x031BBEBC ADRP X0, 0xF64000
	0x031BBEC0 LDR X0, [X0 + 0x3A0]
	0x031BBEC4 BL 0x1C16CF4
	0x031BBEC8 MOVZ W8, 0x1
	0x031BBECC STRB W8, [X22 + 0xEE7]
	0x031BBED0 CBZ X20, 0x31BBF0C
	0x031BBED4 ADRP X8, 0xF64000
	0x031BBED8 LDR X8, [X8 + 0x3A0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1221000
	007 Move X21, 0xF39000
	008 Move W8, [X20+3805]
	009 Move X21, [X21+2760]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {32}
	015 Move X0, 0xF39000
	016 Move X0, [X0+2760]
	017 Call 0x1C17CF4
	018 Move X0, 0xF65000
	019 Move X0, [X0+1488]
	020 Call 0x1C17CF4
	021 Move X0, 0xF65000
	022 Move X0, [X0+1496]
	023 Call 0x1C17CF4
	024 Move X0, 0xF65000
	025 Move X0, [X0+1504]
	026 Call 0x1C17CF4
	027 Move X0, 0xF65000
	028 Move X0, [X0+1512]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3805], W8
	032 Move X0, [X21]
	033 Move W1, 8
	034 Call 0x1C17D6C
	035 Compare X0, 0
	036 JumpIfEqual {102}
	037 Move W8, [X0+24]
	038 Move X20, X0
	039 Compare W8, 0
	040 JumpIfEqual {101}
	041 Move X8, 0xF65000
	042 Move X8, [X8+1496]
	043 Add X0, X31, 12
	044 Move X1, X31
	045 Move X8, [X8]
	046 Move [X20+32], X8
	047 Move V0, [X19+16]
	048 Move [X31+12], S0
	049 Call Single.ToString, X0
	050 Move W8, [X20+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move [X20+40], X0
	054 Move X8, 0xF65000
	055 Move X8, [X8+1488]
	056 Add X0, X31, 12
	057 Move X1, X31
	058 Move X8, [X8]
	059 Move [X20+48], X8
	060 Move V0, [X19+20]
	061 Move [X31+12], S0
	062 Call Single.ToString, X0
	063 Move W8, [X20+24]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X20+56], X0
	067 Move X8, 0xF65000
	068 Move X8, [X8+1504]
	069 Add X0, X31, 12
	070 Move X1, X31
	071 Move X8, [X8]
	072 Move [X20+64], X8
	073 Move V0, [X19+24]
	074 Move [X31+12], S0
	075 Call Single.ToString, X0
	076 Move W8, [X20+24]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X20+72], X0
	080 Move X8, 0xF65000
	081 Move X8, [X8+1512]
	082 Add X0, X31, 12
	083 Move X1, X31
	084 Move X8, [X8]
	085 Move [X20+80], X8
	086 Move V0, [X19+28]
	087 Move [X31+12], S0
	088 Call Single.ToString, X0
	089 Move W8, [X20+24]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move [X20+88], X0
	092 Move X0, X20
	093 Move X1, X31
	094 Call String.Concat, X0
	095 Move X20, [X31+32]
	096 Move X19, [X31+40]
	097 Move X30, [X31+16]
	098 Move X21, [X31+24]
	099 Add X31, X31, 48
	100 Return X0
	101 Call 0x1C17F28
	102 Call 0x1C17F20

