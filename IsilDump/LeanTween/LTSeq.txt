Type: LTSeq

Method: System.Int32 get_id()

Disassembly:
	0x031CD7D8 STP X26, X25, [X31 + 0x90]
	0x031CD7DC STP X24, X23, [X31 + 0xA0]
	0x031CD7E0 STP X22, X21, [X31 + 0xB0]
	0x031CD7E4 STP X20, X19, [X31 + 0xC0]

ISIL:
	001 Move W8, [X0+60]
	002 Move W9, [X0+52]
	003 Or W0, W8, W9
	004 Return X0

Method: System.Void reset()

Disassembly:
	0x031CD7E8 ADRP X23, 0x120F000
	0x031CD7EC ADRP X22, 0xF52000
	0x031CD7F0 ADRP X21, 0xF52000
	0x031CD7F4 LDRB W8, [X23 + 0xB]

ISIL:
	001 Move [X0+16], X31
	002 Move [X0+32], X31
	003 Move [X0+40], W31
	004 Return 

Method: System.Void init(System.UInt32 id, System.UInt32 global_counter)

Disassembly:
	0x031CD7F8 LDR X22, [X22 + 0xC00]
	0x031CD7FC LDR X21, [X21 + 0xC08]
	0x031CD800 MOV X19, X1
	0x031CD804 MOV X20, X0
	0x031CD808 TBNZ X8, 0x0, 0x31CD868
	0x031CD80C ADRP X0, 0xF52000

ISIL:
	001 Move [X0+24], X0
	002 Move [X0+32], X31
	003 Move [X0+40], W31
	004 Move [X0+60], W1
	005 Move [X0+52], W2
	006 Move [X0+16], X31
	007 Return 

Method: LTSeq addOn()

Disassembly:
	0x031CD810 LDR X0, [X0 + 0xC10]
	0x031CD814 BL 0x1C16CF4
	0x031CD818 ADRP X0, 0xF52000
	0x031CD81C LDR X0, [X0 + 0xC18]
	0x031CD820 BL 0x1C16CF4
	0x031CD824 ADRP X0, 0xF52000
	0x031CD828 LDR X0, [X0 + 0xC20]
	0x031CD82C BL 0x1C16CF4
	0x031CD830 ADRP X0, 0xF52000
	0x031CD834 LDR X0, [X0 + 0xC28]
	0x031CD838 BL 0x1C16CF4
	0x031CD83C ADRP X0, 0xF52000
	0x031CD840 LDR X0, [X0 + 0xC30]
	0x031CD844 BL 0x1C16CF4
	0x031CD848 ADRP X0, 0xF52000
	0x031CD84C LDR X0, [X0 + 0xC08]
	0x031CD850 BL 0x1C16CF4
	0x031CD854 ADRP X0, 0xF52000
	0x031CD858 LDR X0, [X0 + 0xC00]
	0x031CD85C BL 0x1C16CF4
	0x031CD860 MOVZ W8, 0x1
	0x031CD864 STRB W8, [X23 + 0xB]
	0x031CD868 LDR X0, [X22]
	0x031CD86C STP X31, X31, [X31 + 0x20]
	0x031CD870 STR X31, [X31 + 0x30]
	0x031CD874 BL 0x1C16F10
	0x031CD878 LDR X1, [X21]
	0x031CD87C MOV X21, X0
	0x031CD880 BL 0x301B7C4
	0x031CD884 LDR X0, [X20 + 0x280]
	0x031CD888 CBZ X0, 0x31CDABC
	0x031CD88C ADRP X27, 0xF52000
	0x031CD890 LDR X27, [X27 + 0xC30]
	0x031CD894 ADRP X26, 0xF52000
	0x031CD898 ADRP X25, 0xF52000
	0x031CD89C ADRP X24, 0xF52000
	0x031CD8A0 LDR X1, [X27]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x120F000
	005 Move W8, [X20+4091]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF29000
	012 Move X0, [X0+1448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4091], W8
	016 Move X20, [X19+24]
	017 Compare X20, 0
	018 JumpIfEqual {45}
	019 Move X8, 0xF29000
	020 Move X8, [X8+1448]
	021 Move W9, 1
	022 Move [X20+56], W9
	023 Move X0, [X8]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move W0, 1
	029 Move X1, X31
	030 Call LeanTween.sequence, X0
	031 Move [X19+24], X0
	032 Compare X0, 0
	033 JumpIfEqual {45}
	034 Move [X0+16], X20
	035 Move V0, [X20+40]
	036 Move [X20+56], W31
	037 Move [X0+40], S0
	038 Move W8, [X20+48]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Add W8, W8, 1
	042 Move [X0+48], W8
	043 Move X30, [X31+32]
	044 Return X0
	045 Call 0x1C17F20

Method: System.Single addPreviousDelays()

Disassembly:
	0x031CD8A4 LDR X26, [X26 + 0xC18]
	0x031CD8A8 LDR X25, [X25 + 0xC28]
	0x031CD8AC LDR X24, [X24 + 0xC10]
	0x031CD8B0 ADD X8, X31, 0x8
	0x031CD8B4 BL 0x301CB58
	0x031CD8B8 LDUR V0, [X31 + 0x8]
	0x031CD8BC LDR X8, [X31 + 0x18]
	0x031CD8C0 ADRP X22, 0xF26000
	0x031CD8C4 LDR X22, [X22 + 0x5A8]
	0x031CD8C8 ADRP X28, 0x120B000
	0x031CD8CC MOVZ W29, 0x1
	0x031CD8D0 STR V0, [X31 + 0x2]
	0x031CD8D4 STR X8, [X31 + 0x30]
	0x031CD8D8 FMOV S8, 2
	0x031CD8DC LDR X1, [X26]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+24]
	003 Compare X8, 0
	004 JumpIfEqual {17}
	005 Move X9, [X8+16]
	006 Compare X9, 0
	007 JumpIfEqual {14}
	008 Move X9, [X9+32]
	009 Compare X9, 0
	010 JumpIfEqual {14}
	011 Move V0, [X8+40]
	012 Move V1, [X9+40]
	013 Add S0, S0, S1
	014 Move V0, [X8+40]
	015 Move X30, [X31+16]
	016 Return V0
	017 Call 0x1C17F20

Method: LTSeq append(System.Single delay)

Disassembly:
	0x031CD8E0 ADD X0, X31, 0x20
	0x031CD8E4 BL 0x2BC4350
	0x031CD8E8 TBZ X0, 0x0, 0x31CD9B0
	0x031CD8EC LDR X23, [X31 + 0x30]
	0x031CD8F0 CBZ X23, 0x31CDAA8
	0x031CD8F4 CBZ X19, 0x31CDAAC
	0x031CD8F8 LDR V9, [X23 + 0x18]
	0x031CD8FC LDUR V10, [X23 + 0x1C]
	0x031CD900 LDR V11, [X19 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move V1, [X0+40]
	006 Add S0, S1, S0
	007 Move [X0+40], S0
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTSeq append(System.Action callback)

Disassembly:
	0x031CD904 LDRB W8, [X28 + 0x85C]
	0x031CD908 LDUR V12, [X19 + 0x1C]
	0x031CD90C CBNZ W8, 0x31CD91C
	0x031CD910 MOV X0, X22
	0x031CD914 BL 0x1C16CF4
	0x031CD918 STRB W29, [X28 + 0x85C]
	0x031CD91C LDR X0, [X22]
	0x031CD920 LDR W8, [X0 + 0xE0]
	0x031CD924 CBNZ W8, 0x31CD92C
	0x031CD928 BL 0x1C16DFC
	0x031CD92C FSUB S0, S9, S11
	0x031CD930 FSUB V1.2S, V10.2S, V12.2S
	0x031CD934 FMUL S0, S0, S0
	0x00000000 INVALID
	0x031CD93C FADD S0, S0, S1
	0x031CD940 MOV S1, V1.S[1]
	0x031CD944 FADD S0, S1, S0
	0x031CD948 FSQRT S0, S0
	0x031CD94C FCMP S0, S8
	0x031CD950 B.HI 0x31CD8DC
	0x031CD954 CBZ X21, 0x31CDAB4
	0x031CD958 LDR W10, [X21 + 0x1C]
	0x031CD95C LDR X8, [X21 + 0x10]
	0x031CD960 LDR X9, [X25]
	0x031CD964 ADD W10, W10, 0x1
	0x031CD968 STR W10, [X21 + 0x1C]
	0x031CD96C CBZ X8, 0x31CDAB8
	0x031CD970 LDRSW X10, [X21 + 0x18]
	0x031CD974 LDR W11, [X8 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x120F000
	007 Move X22, 0xF29000
	008 Move W8, [X21+4092]
	009 Move X22, [X22+1448]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF29000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+4092], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move S0, W31
	027 Move X0, X20
	028 Move X1, X31
	029 Call LeanTween.delayedCall, V0, X0
	030 Move X1, X0
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]

Method: LTSeq append(System.Action`1<System.Object> callback, System.Object obj)

Disassembly:
	0x031CD9C4 ADD X8, X31, 0x8
	0x031CD9C8 MOV X0, X21
	0x031CD9CC BL 0x301CB58
	0x031CD9D0 LDUR V0, [X31 + 0x8]
	0x031CD9D4 LDR X8, [X31 + 0x18]
	0x031CD9D8 STR V0, [X31 + 0x2]
	0x031CD9DC STR X8, [X31 + 0x30]
	0x031CD9E0 LDR X1, [X26]
	0x031CD9E4 ADD X0, X31, 0x20
	0x031CD9E8 BL 0x2BC4350
	0x031CD9EC TBZ X0, 0x0, 0x31CDA18
	0x031CD9F0 LDR X8, [X31 + 0x30]
	0x031CD9F4 CBZ X8, 0x31CDAB0
	0x031CD9F8 LDRB W9, [X8 + 0x54]
	0x031CD9FC CBNZ W9, 0x31CD9E0
	0x031CDA00 LDRB W8, [X8 + 0x56]
	0x031CDA04 CBNZ W8, 0x31CD9E0
	0x031CDA08 LDR X1, [X24]
	0x031CDA0C ADD X0, X31, 0x20
	0x031CDA10 BL 0x2BC434C
	0x031CDA14 B 0x31CDA7C
	0x031CDA18 LDR X1, [X24]
	0x031CDA1C ADD X0, X31, 0x20
	0x031CDA20 BL 0x2BC434C
	0x031CDA24 LDR X0, [X20 + 0x280]
	0x031CDA28 CBZ X0, 0x31CDABC
	0x031CDA2C LDR W10, [X0 + 0x1C]
	0x031CDA30 LDR X8, [X0 + 0x10]
	0x031CDA34 LDR X9, [X25]
	0x031CDA38 ADD W10, W10, 0x1
	0x031CDA3C STR W10, [X0 + 0x1C]
	0x031CDA40 CBZ X8, 0x31CDABC
	0x031CDA44 LDRSW X10, [X0 + 0x18]
	0x031CDA48 LDR W11, [X8 + 0x18]
	0x031CDA4C CMP W10, W11
	0x031CDA50 B.CS 0x31CDA68
	0x031CDA54 ADD W9, W10, 0x1
	0x031CDA58 ADD X8, X8, X10, 0x3, LSL
	0x031CDA5C STR W9, [X0 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x120F000
	008 Move X23, 0xF29000
	009 Move W8, [X22+4093]
	010 Move X23, [X23+1448]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF29000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+4093], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move S0, W31
	029 Move X0, X21
	030 Move X1, X31
	031 Call LeanTween.delayedCall, V0, X0
	032 Compare X0, 0
	033 JumpIfEqual {52}
	034 Move X8, [X0+232]
	035 Move X1, X0
	036 Compare X8, 0
	037 JumpIfEqual {52}
	038 Move [X8+208], X20
	039 Move W8, 1
	040 Move X0, X19
	041 Move [X1+22], W8
	042 Call LTSeq.append, X0, X1
	043 Move X0, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Call LTSeq.addOn, X0
	051 Return X0
	052 Call 0x1C17F20

Method: LTSeq append(UnityEngine.GameObject gameObject, System.Action callback)

Disassembly:
	0x031CDA60 STR X19, [X8 + 0x20]
	0x031CDA64 B 0x31CDA7C
	0x031CDA68 LDR X8, [X9 + 0x20]
	0x031CDA6C MOV X1, X19
	0x031CDA70 LDR X8, [X8 + 0xC0]
	0x031CDA74 LDR X2, [X8 + 0x70]
	0x031CDA78 BL 0x301BF90
	0x031CDA7C LDP X20, X19, [X31 + 0xC0]
	0x031CDA80 LDP X22, X21, [X31 + 0xB0]
	0x031CDA84 LDP X24, X23, [X31 + 0xA0]
	0x031CDA88 LDP X26, X25, [X31 + 0x90]
	0x031CDA8C LDP X28, X27, [X31 + 0x80]
	0x031CDA90 LDP X29, X30, [X31 + 0x70]
	0x031CDA94 LDP D9, D8, [X31 + 0x60]
	0x031CDA98 LDP D11, D10, [X31 + 0x50]
	0x031CDA9C LDR V12, [X31 + 0x40]
	0x031CDAA0 ADD X31, X31, 0xD0
	0x031CDAA4 RET
	0x031CDAA8 BL 0x1C16F20
	0x031CDAAC BL 0x1C16F20
	0x031CDAB0 BL 0x1C16F20
	0x031CDAB4 BL 0x1C16F20
	0x031CDAB8 BL 0x1C16F20
	0x031CDABC BL 0x1C16F20
	0x031CDAC0 B 0x31CDB2C
	0x031CDAC4 B 0x31CDACC
	0x031CDAC8 B 0x31CDB2C
	0x031CDACC MOV X21, X0
	0x031CDAD0 CMP W1, 0x1
	0x031CDAD4 B.NE 0x31CDAFC
	0x031CDAD8 MOV X0, X21
	0x031CDADC BL 0x3EB1AD0
	0x031CDAE0 LDR X22, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x120F000
	008 Move X23, 0xF29000
	009 Move W8, [X22+4094]
	010 Move X23, [X23+1448]
	011 Move X20, X2
	012 Move X21, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF29000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+4094], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move S0, W31
	029 Move X0, X21
	030 Move X1, X20
	031 Move X2, X31
	032 Call LeanTween.delayedCall, X0, V0, X1
	033 Move X1, X0
	034 Move X0, X19
	035 Call LTSeq.append, X0, X1
	036 Move X0, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Move X23, [X31+56]
	043 Call LTSeq.addOn, X0
	044 Return X0

Method: LTSeq append(UnityEngine.GameObject gameObject, System.Action`1<System.Object> callback, System.Object obj)

Disassembly:
	0x031CDAE4 BL 0x3EB1AE0
	0x031CDAE8 LDR X1, [X24]
	0x031CDAEC ADD X0, X31, 0x20
	0x031CDAF0 BL 0x2BC434C
	0x031CDAF4 CBZ X22, 0x31CDA24
	0x031CDAF8 B 0x31CDB50
	0x031CDAFC MOV X22, X31
	0x031CDB00 B 0x31CDB08
	0x031CDB04 MOV X21, X0
	0x031CDB08 LDR X1, [X24]
	0x031CDB0C ADD X0, X31, 0x20
	0x031CDB10 BL 0x2BC434C
	0x031CDB14 CBZ X22, 0x31CDB78
	0x031CDB18 MOV X0, X22
	0x031CDB1C BL 0x1C16F18
	0x031CDB20 B 0x31CDB2C
	0x031CDB24 B 0x31CDB2C
	0x031CDB28 B 0x31CDB2C
	0x031CDB2C CMP W1, 0x1
	0x031CDB30 B.NE 0x31CDB58
	0x031CDB34 BL 0x3EB1AD0
	0x031CDB38 LDR X22, [X0]
	0x031CDB3C BL 0x3EB1AE0
	0x031CDB40 LDR X1, [X24]
	0x031CDB44 ADD X0, X31, 0x20
	0x031CDB48 BL 0x2BC434C
	0x031CDB4C CBZ X22, 0x31CD9BC
	0x031CDB50 MOV X0, X22
	0x031CDB54 BL 0x1C16F18
	0x031CDB58 MOV X21, X0
	0x031CDB5C MOV X22, X31
	0x031CDB60 B 0x31CDB68
	0x031CDB64 MOV X21, X0
	0x031CDB68 LDR X1, [X24]
	0x031CDB6C ADD X0, X31, 0x20
	0x031CDB70 BL 0x2BC434C
	0x031CDB74 CBNZ X22, 0x31CDB80
	0x031CDB78 MOV X0, X21
	0x031CDB7C BL 0x1D2C690
	0x031CDB80 MOV X0, X22
	0x031CDB84 BL 0x1C16F18
	0x031CDB88 BL 0x1990590
	0x031CDB8C LDR W8, [X0 + 0x370]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x120F000
	009 Move X24, 0xF29000
	010 Move W8, [X23+4095]
	011 Move X24, [X24+1448]
	012 Move X20, X3
	013 Move X21, X2
	014 Move X22, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF29000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+4095], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move S0, W31
	031 Move X0, X22
	032 Move X1, X21
	033 Move X2, X31
	034 Call LeanTween.delayedCall, X0, V0, X1
	035 Compare X0, 0
	036 JumpIfEqual {56}
	037 Move X8, [X0+232]
	038 Move X1, X0
	039 Compare X8, 0
	040 JumpIfEqual {56}
	041 Move [X8+208], X20
	042 Move W8, 1
	043 Move X0, X19
	044 Move [X1+22], W8
	045 Call LTSeq.append, X0, X1
	046 Move X0, X19
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X22, [X31+32]
	050 Move X21, [X31+40]
	051 Move X24, [X31+16]
	052 Move X23, [X31+24]
	053 Move X30, [X31+64]
	054 Call LTSeq.addOn, X0
	055 Return X0
	056 Call 0x1C17F20

Method: LTSeq append(LTDescr tween)

Disassembly:
	0x031CD978 CMP W10, W11
	0x031CD97C B.CS 0x31CD994
	0x031CD980 ADD W9, W10, 0x1
	0x031CD984 ADD X8, X8, X10, 0x3, LSL
	0x031CD988 STR W9, [X21 + 0x18]
	0x031CD98C STR X23, [X8 + 0x20]
	0x031CD990 B 0x31CD8DC
	0x031CD994 LDR X8, [X9 + 0x20]
	0x031CD998 LDR X8, [X8 + 0xC0]
	0x031CD99C LDR X2, [X8 + 0x70]
	0x031CD9A0 MOV X0, X21
	0x031CD9A4 MOV X1, X23
	0x031CD9A8 BL 0x301BF90
	0x031CD9AC B 0x31CD8DC
	0x031CD9B0 LDR X1, [X24]
	0x031CD9B4 ADD X0, X31, 0x20
	0x031CD9B8 BL 0x2BC434C
	0x031CD9BC CBZ X21, 0x31CDABC
	0x031CD9C0 LDR X1, [X27]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, [X0+24]
	006 Compare X21, 0
	007 JumpIfEqual {27}
	008 Move X19, X0
	009 Move X20, X1
	010 Move [X21+32], X1
	011 Call LTSeq.addPreviousDelays, X0
	012 Move [X21+40], S0
	013 Move X8, [X19+24]
	014 Compare X8, 0
	015 JumpIfEqual {27}
	016 Compare X20, 0
	017 JumpIfEqual {27}
	018 Move V0, [X8+40]
	019 Move X0, X19
	020 Move [X20+36], S0
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call LTSeq.addOn, X0
	026 Return X0
	027 Call 0x1C17F20

Method: LTSeq insert(LTDescr tween)

Disassembly:
	0x031CDB90 LDR W10, [X0 + 0x374]
	0x031CDB94 SCVTF S0, W1
	0x031CDB98 MOVZ W9, 0x42C80000
	0x031CDB9C SCVTF S1, W8
	0x031CDBA0 ADD W8, W8, 0x1
	0x031CDBA4 STR W8, [X0 + 0x370]
	0x031CDBA8 ADD W8, W10, 0x1
	0x031CDBAC FDIV S0, S1, S0
	0x031CDBB0 FMOV S1, W9
	0x031CDBB4 CMP W8, W2
	0x031CDBB8 FMUL S0, S0, S1
	0x031CDBBC CSET W8, EQ
	0x031CDBC0 CSINC W9, W31, W10, EQ
	0x031CDBC4 STR S0, [X0 + 0x37C]
	0x031CDBC8 STR W9, [X0 + 0x374]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+24]
	005 Compare X8, 0
	006 JumpIfEqual {20}
	007 Move X19, X0
	008 Move X20, X1
	009 Move [X8+32], X1
	010 Call LTSeq.addPreviousDelays, X0
	011 Compare X20, 0
	012 JumpIfEqual {20}
	013 Move [X20+36], S0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Call LTSeq.addOn, X0
	019 Return X0
	020 Call 0x1C17F20

Method: LTSeq setScale(System.Single timeScale)

Disassembly:
	0x031CDBCC MOV W0, W8
	0x031CDBD0 RET
	0x031CDBD4 LDR W8, [X0 + 0x3CC]
	0x031CDBD8 LDR W10, [X0 + 0x3D0]
	0x031CDBDC SCVTF S0, W1
	0x031CDBE0 MOVZ W9, 0x42C80000
	0x031CDBE4 SCVTF S1, W8
	0x031CDBE8 ADD W8, W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+24]
	004 Move W2, 500
	005 Move X19, X0
	006 Call LTSeq.setScaleRecursive, X0, X1, V0, X2
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call LTSeq.addOn, X0
	011 Return X0

Method: System.Void setScaleRecursive(LTSeq seq, System.Single timeScale, System.Int32 count)

Disassembly:
	0x031CDBEC STR W8, [X0 + 0x3CC]
	0x031CDBF0 ADD W8, W10, 0x1
	0x031CDBF4 FDIV S0, S1, S0
	0x031CDBF8 FMOV S1, W9
	0x031CDBFC CMP W8, W2
	0x031CDC00 FMUL S0, S0, S1
	0x031CDC04 CSET W8, EQ
	0x031CDC08 CSINC W9, W31, W10, EQ
	0x031CDC0C STR S0, [X0 + 0x378]
	0x031CDC10 STR W9, [X0 + 0x3D0]
	0x031CDC14 MOV W0, W8
	0x031CDC18 RET
	0x031CDC1C STP X29, X30, [X31 - 0x60]!
	0x031CDC20 STP X28, X27, [X31 + 0x10]
	0x031CDC24 STP X26, X25, [X31 + 0x20]
	0x031CDC28 STP X24, X23, [X31 + 0x30]
	0x031CDC2C STP X22, X21, [X31 + 0x40]
	0x031CDC30 STP X20, X19, [X31 + 0x50]
	0x031CDC34 ADRP X20, 0x120F000
	0x031CDC38 ADRP X27, 0xF27000
	0x031CDC3C ADRP X26, 0xF27000
	0x031CDC40 ADRP X21, 0xF52000
	0x031CDC44 ADRP X28, 0xF52000
	0x031CDC48 ADRP X22, 0xF52000
	0x031CDC4C ADRP X25, 0xF52000
	0x031CDC50 ADRP X24, 0xF52000
	0x031CDC54 ADRP X23, 0xF2C000
	0x031CDC58 ADRP X29, 0xF2C000
	0x031CDC5C LDR X27, [X27 + 0x1D0]
	0x031CDC60 LDR X26, [X26 + 0x1C0]

ISIL:
	001 Move [X31-16], X30
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Compare X1, 0
	004 JumpIfEqual {29}
	005 Move V1, [X1+40]
	006 Move X8, [X1+32]
	007 Multiply S1, S1, S0
	008 Move [X1+40], S1
	009 Compare X8, 0
	010 JumpIfEqual {22}
	011 Move V1, [X8+40]
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 Move V2, [X8+32]
	014 Multiply S3, S1, S0
	015 Move [X8+40], S3
	016 NotImplemented "Instruction FDIV not yet implemented."
	017 Multiply S1, S3, S1
	018 Move [X8+32], S1
	019 Move V1, [X8+36]
	020 Multiply S1, S1, S0
	021 Move [X8+36], S1
	022 Move X1, [X1+16]
	023 Subtract W2, W2, 1
	024 Compare X1, 0
	025 JumpIfEqual {26}
	026 Move [X0+44], S0
	027 Move X30, [X31+16]
	028 Return 
	029 Move [X0+44], S0
	030 Call 0x1C17F20

Method: LTSeq reverse()

Disassembly:
	0x031CDC64 LDR X21, [X21 + 0xC38]

ISIL:
	001 Call LTSeq.addOn, X0
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x031CDC68 LDR X28, [X28 + 0xC40]
	0x031CDC6C LDR X22, [X22 + 0xC48]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

