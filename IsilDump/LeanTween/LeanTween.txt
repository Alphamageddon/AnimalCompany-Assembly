Type: LeanTween

Method: System.Void init()

Disassembly:
	0x031AC9B0 LDR X8, [X8 + 0x20]
	0x031AC9B4 CBZ X8, 0x31ACAC4
	0x031AC9B8 LDR X0, [X8 + 0x58]
	0x031AC9BC CBZ X0, 0x31ACAC4
	0x031AC9C0 MOV X1, X31
	0x031AC9C4 BL 0x3C32ECC
	0x031AC9C8 LDR X9, [X22]
	0x031AC9CC LDR X8, [X24]
	0x031AC9D0 MOV X21, X0
	0x031AC9D4 LDR X9, [X9 + 0xB8]
	0x031AC9D8 LDR W10, [X8 + 0xE0]
	0x031AC9DC LDR X20, [X9 + 0x48]
	0x031AC9E0 CBNZ W10, 0x31AC9EC
	0x031AC9E4 MOV X0, X8
	0x031AC9E8 BL 0x1C16DFC
	0x031AC9EC MOV X0, X21
	0x031AC9F0 MOV X1, X20
	0x031AC9F4 MOV X2, X31
	0x031AC9F8 BL 0x3C354F8
	0x031AC9FC TBZ X0, 0x0, 0x31ACA6C
	0x031ACA00 LDR X0, [X22]
	0x031ACA04 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1230000
	005 Move X19, 0xF4A000
	006 Move W8, [X20+3656]
	007 Move X19, [X19+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF4A000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3656], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W0, [X8+60]
	027 Move X30, [X31+32]

Method: System.Int32 get_maxSearch()

Disassembly:
	0x031ACA68 BL 0x3C394A8
	0x031ACA6C LDR X0, [X22]
	0x031ACA70 LDR W8, [X0 + 0xE0]
	0x031ACA74 CBNZ W8, 0x31ACA80
	0x031ACA78 BL 0x1C16DFC
	0x031ACA7C LDR X0, [X22]
	0x031ACA80 LDR X8, [X0 + 0xB8]
	0x031ACA84 ADD W10, W19, 0x1
	0x031ACA88 LDR W9, [X8 + 0x38]
	0x031ACA8C STR W19, [X8 + 0x84]
	0x031ACA90 CMP W10, W9
	0x031ACA94 B.LT 0x31ACAB0
	0x031ACA98 LDR W9, [X0 + 0xE0]
	0x031ACA9C CBNZ W9, 0x31ACAAC
	0x031ACAA0 BL 0x1C16DFC
	0x031ACAA4 LDR X8, [X22]
	0x031ACAA8 LDR X8, [X8 + 0xB8]
	0x031ACAAC STR W31, [X8 + 0x84]
	0x031ACAB0 LDP X20, X19, [X31 + 0x30]
	0x031ACAB4 LDP X22, X21, [X31 + 0x20]
	0x031ACAB8 LDP X24, X23, [X31 + 0x10]
	0x031ACABC LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1230000
	005 Move X19, 0xF4A000
	006 Move W8, [X20+3657]
	007 Move X19, [X19+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF4A000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3657], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W0, [X8+56]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Int32 get_maxSimulataneousTweens()

Disassembly:
	0x031ACAC0 RET
	0x031ACAC4 BL 0x1C16F20
	0x031ACAC8 BL 0x1C16F28
	0x031ACACC STR X30, [X31 - 0x30]!
	0x031ACAD0 STP X22, X21, [X31 + 0x10]
	0x031ACAD4 STP X20, X19, [X31 + 0x20]
	0x031ACAD8 ADRP X22, 0x122F000
	0x031ACADC ADRP X21, 0xF49000
	0x031ACAE0 LDRB W8, [X22 + 0xE53]
	0x031ACAE4 LDR X21, [X21 + 0x5A8]
	0x031ACAE8 MOV W20, W1
	0x031ACAEC MOV W19, W0
	0x031ACAF0 TBNZ X8, 0x0, 0x31ACB08
	0x031ACAF4 ADRP X0, 0xF49000
	0x031ACAF8 LDR X0, [X0 + 0x5A8]
	0x031ACAFC BL 0x1C16CF4
	0x031ACB00 MOVZ W8, 0x1
	0x031ACB04 STRB W8, [X22 + 0xE53]
	0x031ACB08 LDR X0, [X21]
	0x031ACB0C LDR W8, [X0 + 0xE0]
	0x031ACB10 CBNZ W8, 0x31ACB1C
	0x031ACB14 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1230000
	005 Move X19, 0xF4A000
	006 Move W8, [X20+3658]
	007 Move X19, [X19+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF4A000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3658], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move W0, [X8+60]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Int32 get_tweensRunning()

Disassembly:
	0x031ACB18 LDR X0, [X21]
	0x031ACB1C LDR X8, [X0 + 0xB8]
	0x031ACB20 LDR X8, [X8 + 0x18]
	0x031ACB24 CBZ X8, 0x31ACB84
	0x031ACB28 LDR W9, [X8 + 0x18]
	0x031ACB2C CMP W9, W19
	0x031ACB30 B.LS 0x31ACB88
	0x031ACB34 ADD X8, X8, W19, 0x3, SXTW
	0x031ACB38 LDR X0, [X8 + 0x20]
	0x031ACB3C CBZ X0, 0x31ACB84
	0x031ACB40 MOV X1, X31
	0x031ACB44 BL 0x31BFD1C
	0x031ACB48 CMP W0, W20
	0x031ACB4C B.NE 0x31ACB74
	0x031ACB50 LDR X0, [X21]
	0x031ACB54 LDR W8, [X0 + 0xE0]
	0x031ACB58 CBNZ W8, 0x31ACB60
	0x031ACB5C BL 0x1C16DFC
	0x031ACB60 MOV W0, W19
	0x031ACB64 LDP X20, X19, [X31 + 0x20]
	0x031ACB68 LDP X22, X21, [X31 + 0x10]
	0x031ACB6C LDR X30, [X31], #0x30
	0x031ACB70 B 0x31AC7BC
	0x031ACB74 LDP X20, X19, [X31 + 0x20]
	0x031ACB78 LDP X22, X21, [X31 + 0x10]
	0x031ACB7C LDR X30, [X31], #0x30
	0x031ACB80 RET
	0x031ACB84 BL 0x1C16F20
	0x031ACB88 BL 0x1C16F28
	0x031ACB8C LDP W8, W9, [X0 + 0x88]
	0x031ACB90 ORR W0, W8, W9, 0x10
	0x031ACB94 RET
	0x031ACB98 STR X30, [X31 - 0x30]!
	0x031ACB9C STP X22, X21, [X31 + 0x10]
	0x031ACBA0 STP X20, X19, [X31 + 0x20]
	0x031ACBA4 ADRP X20, 0x122F000
	0x031ACBA8 LDRB W8, [X20 + 0xEE2]
	0x031ACBAC MOV W19, W0
	0x031ACBB0 TBNZ X8, 0x0, 0x31ACBC8
	0x031ACBB4 ADRP X0, 0xF73000
	0x031ACBB8 LDR X0, [X0 + 0x3A0]
	0x031ACBBC BL 0x1C16CF4
	0x031ACBC0 MOVZ W8, 0x1
	0x031ACBC4 STRB W8, [X20 + 0xEE2]
	0x031ACBC8 TBNZ X19, 0x1F, 0x31ACCC8
	0x031ACBCC ADRP X20, 0xF73000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x1230000
	006 Move X20, 0xF4A000
	007 Move W8, [X19+3659]
	008 Move X20, [X20+1448]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF4A000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+3659], W8
	018 Move X0, [X20]
	019 Move W21, W31
	020 Move W19, W31
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Move X8, [X0+184]
	027 Move W8, [X8+56]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move X8, [X0+184]
	035 Move X8, [X8+24]
	036 Compare X8, 0
	037 JumpIfEqual {53}
	038 Move W9, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Add X8, X8, W21
	041 Move X8, [X8+32]
	042 Compare X8, 0
	043 JumpIfEqual {53}
	044 Move W8, [X8+16]
	045 Add W21, W21, 1
	046 Add W19, W19, W8
	047 Move W0, W19
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Call 0x1C17F20
	054 Call 0x1C17F28

Method: System.Void init(System.Int32 maxSimultaneousTweens)

Disassembly:
	0x031ACA08 CBNZ W8, 0x31ACA14
	0x031ACA0C BL 0x1C16DFC
	0x031ACA10 LDR X0, [X22]
	0x031ACA14 LDR X8, [X0 + 0xB8]
	0x031ACA18 LDR X8, [X8 + 0x18]
	0x031ACA1C CBZ X8, 0x31ACAC4
	0x031ACA20 LDR W9, [X8 + 0x18]
	0x031ACA24 CMP W9, W19
	0x031ACA28 B.LS 0x31ACAC8
	0x031ACA2C ADD X8, X8, X23, 0x3, LSL
	0x031ACA30 LDR X8, [X8 + 0x20]
	0x031ACA34 CBZ X8, 0x31ACAC4
	0x031ACA38 LDR X0, [X8 + 0x58]
	0x031ACA3C CBZ X0, 0x31ACAC4
	0x031ACA40 MOV X1, X31
	0x031ACA44 BL 0x3C32ECC
	0x031ACA48 LDR X8, [X24]
	0x031ACA4C MOV X20, X0
	0x031ACA50 LDR W9, [X8 + 0xE0]
	0x031ACA54 CBNZ W9, 0x31ACA60
	0x031ACA58 MOV X0, X8
	0x031ACA5C BL 0x1C16DFC
	0x031ACA60 MOV X0, X20
	0x031ACA64 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1230000
	006 Move X20, 0xF4A000
	007 Move W8, [X21+3660]
	008 Move X20, [X20+1448]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF4A000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3660], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move W0, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move W1, [X8+64]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call LeanTween.init, X0, X1
	033 Return 

Method: System.Void init(System.Int32 maxSimultaneousTweens, System.Int32 maxSimultaneousSequences)

Disassembly:
	0x031ACBD0 LDR X20, [X20 + 0x3A0]
	0x031ACBD4 LDR X0, [X20]
	0x031ACBD8 LDR W8, [X0 + 0xE0]
	0x031ACBDC CBNZ W8, 0x31ACBE8
	0x031ACBE0 BL 0x1C16DFC
	0x031ACBE4 LDR X0, [X20]
	0x031ACBE8 LDR X8, [X0 + 0xB8]
	0x031ACBEC LDR X8, [X8 + 0x10]
	0x031ACBF0 CBZ X8, 0x31ACCD8
	0x031ACBF4 LDR W9, [X8 + 0x18]
	0x031ACBF8 AND W21, W19, 0xFFFF
	0x031ACBFC CMP W21, W9
	0x031ACC00 B.CS 0x31ACCDC
	0x031ACC04 MOV W22, W21
	0x031ACC08 ADD X9, X8, X22, 0x3, LSL
	0x031ACC0C LDR X9, [X9 + 0x20]
	0x031ACC10 CBZ X9, 0x31ACCC8
	0x031ACC14 LDR W9, [X0 + 0xE0]
	0x031ACC18 CBNZ W9, 0x31ACC30
	0x031ACC1C BL 0x1C16DFC
	0x031ACC20 LDR X0, [X20]
	0x031ACC24 LDR X8, [X0 + 0xB8]
	0x031ACC28 LDR X8, [X8 + 0x10]
	0x031ACC2C CBZ X8, 0x31ACCD8
	0x031ACC30 LDR W9, [X8 + 0x18]
	0x031ACC34 CMP W21, W9
	0x031ACC38 B.CS 0x31ACCDC
	0x031ACC3C ADD X9, X8, X22, 0x3, LSL
	0x031ACC40 LDR X9, [X9 + 0x20]
	0x031ACC44 CBZ X9, 0x31ACCD8
	0x031ACC48 LDR W9, [X9 + 0x88]
	0x031ACC4C ADDS W31, W9, 0x1
	0x031ACC50 B.EQ 0x31ACCC8
	0x031ACC54 LDR W9, [X0 + 0xE0]
	0x031ACC58 CBNZ W9, 0x31ACC70
	0x031ACC5C BL 0x1C16DFC
	0x031ACC60 LDR X0, [X20]
	0x031ACC64 LDR X8, [X0 + 0xB8]
	0x031ACC68 LDR X8, [X8 + 0x10]
	0x031ACC6C CBZ X8, 0x31ACCD8
	0x031ACC70 LDR W9, [X8 + 0x18]
	0x031ACC74 CMP W21, W9
	0x031ACC78 B.CS 0x31ACCDC
	0x031ACC7C ADD X9, X8, X22, 0x3, LSL
	0x031ACC80 LDR X9, [X9 + 0x20]
	0x031ACC84 CBZ X9, 0x31ACCD8
	0x031ACC88 LDR W9, [X9 + 0x8C]
	0x031ACC8C SBFM W10, W19, 0x10, 0x1F
	0x031ACC90 CMP W9, W10
	0x031ACC94 B.NE 0x31ACCC8
	0x031ACC98 LDR W9, [X0 + 0xE0]
	0x031ACC9C CBNZ W9, 0x31ACCB4
	0x031ACCA0 BL 0x1C16DFC
	0x031ACCA4 LDR X8, [X20]
	0x031ACCA8 LDR X8, [X8 + 0xB8]
	0x031ACCAC LDR X8, [X8 + 0x10]
	0x031ACCB0 CBZ X8, 0x31ACCD8
	0x031ACCB4 LDR W9, [X8 + 0x18]
	0x031ACCB8 CMP W21, W9
	0x031ACCBC B.CS 0x31ACCDC
	0x031ACCC0 ADD X8, X8, X22, 0x3, LSL
	0x031ACCC4 STR X31, [X8 + 0x20]
	0x031ACCC8 LDP X20, X19, [X31 + 0x20]
	0x031ACCCC LDP X22, X21, [X31 + 0x10]
	0x031ACCD0 LDR X30, [X31], #0x30
	0x031ACCD4 RET
	0x031ACCD8 BL 0x1C16F20
	0x031ACCDC BL 0x1C16F28
	0x031ACCE0 SUB X31, X31, 0x50
	0x031ACCE4 STR D8, [X31 + 0x20]
	0x031ACCE8 STR X30, [X31 + 0x28]
	0x031ACCEC STP X22, X21, [X31 + 0x30]
	0x031ACCF0 STP X20, X19, [X31 + 0x40]
	0x031ACCF4 ADRP X20, 0x122F000
	0x031ACCF8 LDRB W8, [X20 + 0xE55]
	0x031ACCFC MOV V8.16B, V2.16B
	0x031ACD00 MOV X19, X0
	0x031ACD04 STR D1, [X31]
	0x031ACD08 STR D0, [X31 + 0x10]
	0x031ACD0C TBNZ X8, 0x0, 0x31ACD30
	0x031ACD10 ADRP X0, 0xF49000
	0x031ACD14 LDR X0, [X0 + 0x5A8]
	0x031ACD18 BL 0x1C16CF4
	0x031ACD1C ADRP X0, 0xF49000
	0x031ACD20 LDR X0, [X0 + 0x9B0]
	0x031ACD24 BL 0x1C16CF4
	0x031ACD28 MOVZ W8, 0x1
	0x031ACD2C STRB W8, [X20 + 0xE55]
	0x031ACD30 CBZ X19, 0x31ACE48
	0x031ACD34 ADRP X8, 0xF49000
	0x031ACD38 LDR X8, [X8 + 0x9B0]
	0x031ACD3C LDR W1, [X19 + 0x18]
	0x031ACD40 ADRP X21, 0xF49000
	0x031ACD44 LDR X0, [X8]
	0x031ACD48 LDR X21, [X21 + 0x5A8]
	0x031ACD4C BL 0x1C16D6C
	0x031ACD50 LDR X8, [X21]
	0x031ACD54 MOV X20, X0
	0x031ACD58 LDR W9, [X8 + 0xE0]
	0x031ACD5C CBNZ W9, 0x31ACD6C
	0x031ACD60 MOV X0, X8
	0x031ACD64 BL 0x1C16DFC
	0x031ACD68 LDR X8, [X21]
	0x031ACD6C LDP V1, V0, [X31]
	0x031ACD70 LDR X9, [X8 + 0xB8]
	0x031ACD74 MOVZ W22, 0xC
	0x031ACD78 MOV V0.S[1], V1.S[0]
	0x031ACD7C STR V0, [X31 + 0x1]
	0x031ACD80 STR W31, [X9 + 0x60]
	0x031ACD84 LDR W9, [X8 + 0xE0]
	0x031ACD88 CBNZ W9, 0x31ACD98
	0x031ACD8C MOV X0, X8
	0x031ACD90 BL 0x1C16DFC
	0x031ACD94 LDR X8, [X21]
	0x031ACD98 LDR X9, [X8 + 0xB8]
	0x031ACD9C LDR W10, [X19 + 0x18]
	0x031ACDA0 LDR W9, [X9 + 0x60]
	0x031ACDA4 CMP W9, W10
	0x031ACDA8 B.GE 0x31ACE28
	0x031ACDAC LDR W11, [X8 + 0xE0]
	0x031ACDB0 CBNZ W11, 0x31ACDCC
	0x031ACDB4 MOV X0, X8
	0x031ACDB8 BL 0x1C16DFC
	0x031ACDBC LDR X8, [X21]
	0x031ACDC0 LDR W10, [X19 + 0x18]
	0x031ACDC4 LDR X8, [X8 + 0xB8]
	0x031ACDC8 LDR W9, [X8 + 0x60]
	0x031ACDCC CMP W9, W10
	0x031ACDD0 B.CS 0x31ACE44
	0x031ACDD4 CBZ X20, 0x31ACE48
	0x031ACDD8 LDR W10, [X20 + 0x18]
	0x031ACDDC SXTW X8, W9
	0x031ACDE0 CMP W8, W10
	0x031ACDE4 B.CS 0x31ACE44
	0x031ACDE8 MADD X9, X8, X22, X19
	0x031ACDEC LDR V0, [X9 + 0x20]
	0x031ACDF0 LDR V1, [X9 + 0x28]
	0x031ACDF4 LDR V2, [X31 + 0x1]
	0x031ACDF8 NOP
	0x031ACDFC MADD X8, X8, X22, X20
	0x031ACE00 FADD S1, S8, S1
	0x031ACE04 FADD V0.2S, V2.2S, V0.2S
	0x031ACE08 STR D0, [X8 + 0x20]
	0x031ACE0C STR S1, [X8 + 0x28]
	0x031ACE10 LDR X8, [X21]
	0x031ACE14 LDR X9, [X8 + 0xB8]
	0x031ACE18 LDR W10, [X9 + 0x60]
	0x031ACE1C ADD W10, W10, 0x1
	0x031ACE20 STR W10, [X9 + 0x60]
	0x031ACE24 B 0x31ACD84
	0x031ACE28 MOV X0, X20
	0x031ACE2C LDP X20, X19, [X31 + 0x40]
	0x031ACE30 LDP X22, X21, [X31 + 0x30]
	0x031ACE34 LDR X30, [X31 + 0x28]
	0x031ACE38 LDR V8, [X31 + 0x20]
	0x031ACE3C ADD X31, X31, 0x50
	0x031ACE40 RET
	0x031ACE44 BL 0x1C16F28
	0x031ACE48 BL 0x1C16F20
	0x031ACE4C MOVZ W8, 0xC3B40000
	0x031ACE50 MOVZ W9, 0x43B40000
	0x031ACE54 FMOV S2, W8
	0x031ACE58 FADD S4, S1, S2
	0x031ACE5C FMOV S2, W9
	0x031ACE60 FMOV S3, W31
	0x031ACE64 FADD S2, S1, S2
	0x031ACE68 FABD S5, S1, S1
	0x031ACE6C FADD S3, S4, S3
	0x031ACE70 FABD S4, S2, S2
	0x031ACE74 FCMP S5, S4
	0x031ACE78 FABD S0, S3, S3
	0x031ACE7C B.PL 0x31ACE90
	0x031ACE80 FCMP S5, S0
	0x031ACE84 B.PL 0x31ACE90
	0x031ACE88 MOV V0.16B, V1.16B
	0x031ACE8C RET
	0x031ACE90 FCMP S0, S4
	0x031ACE94 FCSEL S0, S2, S3, PL
	0x031ACE98 RET
	0x031ACE9C STR X30, [X31 - 0x20]!
	0x031ACEA0 STP X20, X19, [X31 + 0x10]
	0x031ACEA4 ADRP X19, 0x122F000
	0x031ACEA8 ADRP X20, 0xF49000
	0x031ACEAC LDRB W8, [X19 + 0xE56]
	0x031ACEB0 LDR X20, [X20 + 0x5A8]
	0x031ACEB4 TBNZ X8, 0x0, 0x31ACECC
	0x031ACEB8 ADRP X0, 0xF49000
	0x031ACEBC LDR X0, [X0 + 0x5A8]
	0x031ACEC0 BL 0x1C16CF4
	0x031ACEC4 MOVZ W8, 0x1
	0x031ACEC8 STRB W8, [X19 + 0xE56]
	0x031ACECC LDR X0, [X20]
	0x031ACED0 LDR W8, [X0 + 0xE0]
	0x031ACED4 CBNZ W8, 0x31ACEDC
	0x031ACED8 BL 0x1C16DFC
	0x031ACEDC LDP X20, X19, [X31 + 0x10]
	0x031ACEE0 MOV W0, W31
	0x031ACEE4 LDR X30, [X31], #0x20
	0x031ACEE8 B 0x31ACEEC
	0x031ACEEC STR X30, [X31 - 0x40]!
	0x031ACEF0 STP X24, X23, [X31 + 0x10]
	0x031ACEF4 STP X22, X21, [X31 + 0x20]
	0x031ACEF8 STP X20, X19, [X31 + 0x30]
	0x031ACEFC ADRP X20, 0x122F000
	0x031ACF00 ADRP X22, 0xF49000
	0x031ACF04 LDRB W8, [X20 + 0xE57]
	0x031ACF08 LDR X22, [X22 + 0x5A8]
	0x031ACF0C MOV W19, W0
	0x031ACF10 TBNZ X8, 0x0, 0x31ACF34
	0x031ACF14 ADRP X0, 0xF49000
	0x031ACF18 LDR X0, [X0 + 0x5A8]
	0x031ACF1C BL 0x1C16CF4
	0x031ACF20 ADRP X0, 0xF47000
	0x031ACF24 LDR X0, [X0 + 0x598]
	0x031ACF28 BL 0x1C16CF4
	0x031ACF2C MOVZ W8, 0x1
	0x031ACF30 STRB W8, [X20 + 0xE57]
	0x031ACF34 LDR X0, [X22]
	0x031ACF38 LDR W8, [X0 + 0xE0]
	0x031ACF3C CBNZ W8, 0x31ACF44
	0x031ACF40 BL 0x1C16DFC
	0x031ACF44 ADRP X23, 0xF47000
	0x031ACF48 LDR X23, [X23 + 0x598]
	0x031ACF4C BL 0x31AB9B0
	0x031ACF50 MOV W20, W31
	0x031ACF54 LDR X0, [X22]
	0x031ACF58 LDR W8, [X0 + 0xE0]
	0x031ACF5C CBNZ W8, 0x31ACF68
	0x031ACF60 BL 0x1C16DFC
	0x031ACF64 LDR X0, [X22]
	0x031ACF68 LDR X8, [X0 + 0xB8]
	0x031ACF6C LDR W9, [X8 + 0x38]
	0x031ACF70 CMP W20, W9
	0x031ACF74 B.GT 0x31AD098
	0x031ACF78 LDR W9, [X0 + 0xE0]
	0x031ACF7C CBNZ W9, 0x31ACF8C
	0x031ACF80 BL 0x1C16DFC
	0x031ACF84 LDR X8, [X22]
	0x031ACF88 LDR X8, [X8 + 0xB8]
	0x031ACF8C LDR X8, [X8 + 0x18]
	0x031ACF90 CBZ X8, 0x31AD0AC
	0x031ACF94 LDR W9, [X8 + 0x18]
	0x031ACF98 CMP W20, W9
	0x031ACF9C B.CS 0x31AD0B0
	0x031ACFA0 SXTW X24, W20
	0x031ACFA4 ADD X8, X8, X24, 0x3, LSL
	0x031ACFA8 LDR X8, [X8 + 0x20]
	0x031ACFAC CBZ X8, 0x31AD0AC
	0x031ACFB0 LDR X0, [X23]
	0x031ACFB4 LDR X21, [X8 + 0x58]
	0x031ACFB8 LDR W9, [X0 + 0xE0]
	0x031ACFBC CBNZ W9, 0x31ACFC4
	0x031ACFC0 BL 0x1C16DFC
	0x031ACFC4 MOV X0, X21
	0x031ACFC8 MOV X1, X31
	0x031ACFCC MOV X2, X31
	0x031ACFD0 BL 0x3C354F8
	0x031ACFD4 TBZ X0, 0x0, 0x31AD090
	0x031ACFD8 TBZ X19, 0x0, 0x31AD078
	0x031ACFDC LDR X0, [X22]
	0x031ACFE0 LDR W8, [X0 + 0xE0]
	0x031ACFE4 CBNZ W8, 0x31ACFF0
	0x031ACFE8 BL 0x1C16DFC
	0x031ACFEC LDR X0, [X22]
	0x031ACFF0 LDR X8, [X0 + 0xB8]
	0x031ACFF4 LDR X8, [X8 + 0x18]
	0x031ACFF8 CBZ X8, 0x31AD0AC
	0x031ACFFC LDR W9, [X8 + 0x18]
	0x031AD000 CMP W20, W9
	0x031AD004 B.CS 0x31AD0B0
	0x031AD008 ADD X9, X8, X24, 0x3, LSL

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1230000
	009 Move X22, 0xF4A000
	010 Move W8, [X21+3661]
	011 Move X22, [X22+1448]
	012 Move W19, W1
	013 Move W20, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {62}
	018 Move X0, 0xF48000
	019 Move X0, [X0+2648]
	020 Call 0x1C17CF4
	021 Move X0, 0xF49000
	022 Move X0, [X0+3672]
	023 Call 0x1C17CF4
	024 Move X0, 0xF74000
	025 Move X0, [X0+864]
	026 Call 0x1C17CF4
	027 Move X0, 0xF74000
	028 Move X0, [X0+872]
	029 Call 0x1C17CF4
	030 Move X0, 0xF74000
	031 Move X0, [X0+880]
	032 Call 0x1C17CF4
	033 Move X0, 0xF74000
	034 Move X0, [X0+888]
	035 Call 0x1C17CF4
	036 Move X0, 0xF74000
	037 Move X0, [X0+896]
	038 Call 0x1C17CF4
	039 Move X0, 0xF74000
	040 Move X0, [X0+904]
	041 Call 0x1C17CF4
	042 Move X0, 0xF4A000
	043 Move X0, [X0+1448]
	044 Call 0x1C17CF4
	045 Move X0, 0xF48000
	046 Move X0, [X0+1432]
	047 Call 0x1C17CF4
	048 Move X0, 0xF48000
	049 Move X0, [X0+3216]
	050 Call 0x1C17CF4
	051 Move X0, 0xF48000
	052 Move X0, [X0+1728]
	053 Call 0x1C17CF4
	054 Move X0, 0xF74000
	055 Move X0, [X0+912]
	056 Call 0x1C17CF4
	057 Move X0, 0xF74000
	058 Move X0, [X0+920]
	059 Call 0x1C17CF4
	060 Move W8, 1
	061 Move [X21+3661], W8
	062 Move X0, [X22]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X22]
	068 Move X8, [X0+184]
	069 Move X9, [X8+24]
	070 Compare X9, 0
	071 JumpIfEqual {80}
	072 Move X20, [X31+48]
	073 Move X19, [X31+56]
	074 Move X22, [X31+32]
	075 Move X21, [X31+40]
	076 Move X24, [X31+16]
	077 Move X23, [X31+24]
	078 Move X30, [X31+64]
	079 Return 
	080 Move W9, [X0+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {86}
	083 Call 0x1C17DFC
	084 Move X8, [X22]
	085 Move X8, [X8+184]
	086 Move [X8+60], W20
	087 Move X8, 0xF74000
	088 Move X8, [X8+864]
	089 Move W1, W20
	090 Move X0, [X8]
	091 Call 0x1C17D6C
	092 Move X8, [X22]
	093 Move X20, 0xF49000
	094 Move X8, [X8+184]
	095 Move [X8+24], X0
	096 Move W1, [X8+60]
	097 Move X20, [X20+3672]
	098 Move X0, [X20]
	099 Call 0x1C17D6C
	100 Move X8, [X22]
	101 Move X8, [X8+184]
	102 Move [X8+32], X0
	103 Move W1, [X8+60]
	104 Move X0, [X20]
	105 Call 0x1C17D6C
	106 Move X8, [X22]
	107 Move X8, [X8+184]
	108 Move [X8+40], X0
	109 Move X8, 0xF48000
	110 Move X8, [X8+2648]
	111 Move X0, [X8]
	112 Call 0x1C17F10
	113 Move X1, X31
	114 Move X20, X0
	115 Call GameObject..ctor, X0
	116 Move X8, [X22]
	117 Move X8, [X8+184]
	118 Move [X8+72], X20
	119 Compare X20, 0
	120 JumpIfEqual {289}
	121 Move X8, 0xF74000
	122 Move X8, [X8+920]
	123 Move X0, X20
	124 Move X2, X31
	125 Move X1, [X8]
	126 Call Object.set_name, X0, X1
	127 Move X9, 0xF48000
	128 Move X8, [X22]
	129 Move X9, [X9+1728]
	130 Move X8, [X8+184]
	131 Move X0, [X9]
	132 Move X9, 0xF74000
	133 Move X9, [X9+904]
	134 Move X20, [X8+72]
	135 Move W10, [X0+224]
	136 Move X21, [X9]
	137 Compare W10, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move X0, X21
	141 Move X1, X31
	142 Call Type.GetTypeFromHandle, X0
	143 Compare X20, 0
	144 JumpIfEqual {289}
	145 Move X1, X0
	146 Move X0, X20
	147 Move X2, X31
	148 Call GameObject.AddComponent, X0, X1
	149 Move X8, [X22]
	150 Move X8, [X8+184]
	151 Move X0, [X8+72]
	152 Compare X0, 0
	153 JumpIfEqual {289}
	154 Move W1, 1
	155 Move X2, X31
	156 Call GameObject.set_isStatic, X0, X1
	157 Move X8, [X22]
	158 Move X8, [X8+184]
	159 Move X0, [X8+72]
	160 Compare X0, 0
	161 JumpIfEqual {289}
	162 Move W1, 61
	163 Move X2, X31
	164 Call Object.set_hideFlags, X0, X1
	165 Move X9, 0xF48000
	166 Move X8, [X22]
	167 Move X9, [X9+1432]
	168 Move X8, [X8+184]
	169 Move X0, [X9]
	170 Move X20, [X8+72]
	171 Move W9, [X0+224]
	172 Compare W9, 0
	173 JumpIfNotEqual {175}
	174 Call 0x1C17DFC
	175 Move X0, X20
	176 Move X1, X31
	177 Call Object.DontDestroyOnLoad, X0
	178 Move X23, 0xF74000
	179 Move X23, [X23+872]
	180 Move X21, X31
	181 Move X0, [X22]
	182 Move W8, [X0+224]
	183 Compare W8, 0
	184 JumpIfNotEqual {187}
	185 Call 0x1C17DFC
	186 Move X0, [X22]
	187 Move X8, [X0+184]
	188 NotImplemented "Instruction LDRSW not yet implemented."
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move W9, [X0+224]
	191 Compare W9, 0
	192 JumpIfNotEqual {196}
	193 Call 0x1C17DFC
	194 Move X8, [X22]
	195 Move X8, [X8+184]
	196 Move X0, [X23]
	197 Move X24, [X8+24]
	198 Call 0x1C17F10
	199 Move X1, X31
	200 Move X20, X0
	201 Call LTDescr..ctor, X0
	202 Compare X24, 0
	203 JumpIfEqual {289}
	204 Compare X20, 0
	205 JumpIfEqual {212}
	206 Move X8, [X24]
	207 Move X0, X20
	208 Move X1, [X8+64]
	209 Call 0x1C17E00
	210 Compare X0, 0
	211 JumpIfEqual {291}
	212 Move W8, [X24+24]
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Add X8, X24, X21
	215 Add X21, X21, 1
	216 Move [X8+32], X20
	217 Move X8, 0xF74000
	218 Move X8, [X8+912]
	219 Move X0, [X8]
	220 Call 0x1C17F10
	221 Move X8, 0xF74000
	222 Move X8, [X8+896]
	223 Move X1, X31
	224 Move X3, X31
	225 Move X20, X0
	226 Move X2, [X8]
	227 Call UnityAction`2<Scene, Int32Enum>..ctor, X0, X1, X2
	228 Move X8, 0xF48000
	229 Move X8, [X8+3216]
	230 Move X0, [X8]
	231 Move W8, [X0+224]
	232 Compare W8, 0
	233 JumpIfNotEqual {235}
	234 Call 0x1C17DFC
	235 Move X0, X20
	236 Move X1, X31
	237 Call SceneManager.add_sceneLoaded, X0
	238 Move X8, 0xF74000
	239 Move X8, [X8+880]
	240 Move W1, W19
	241 Move X0, [X8]
	242 Call 0x1C17D6C
	243 Move X8, [X22]
	244 Move X20, X0
	245 Move W9, [X8+224]
	246 Compare W9, 0
	247 JumpIfNotEqual {251}
	248 Move X0, X8
	249 Call 0x1C17DFC
	250 Move X8, [X22]
	251 Move X9, [X8+184]
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Move [X9+16], X20
	254 Move X23, 0xF74000
	255 Move X23, [X23+888]
	256 Move W9, W19
	257 Move X20, X31
	258 Subtract X21, X9, 1
	259 Move W9, [X8+224]
	260 Compare W9, 0
	261 JumpIfNotEqual {265}
	262 Move X0, X8
	263 Call 0x1C17DFC
	264 Move X8, [X22]
	265 Move X8, [X8+184]
	266 Move X0, [X23]
	267 Move X24, [X8+16]
	268 Call 0x1C17F10
	269 Move X1, X31
	270 Move X19, X0
	271 Call LTSeq..ctor, X0
	272 Compare X24, 0
	273 JumpIfEqual {289}
	274 Compare X19, 0
	275 JumpIfEqual {282}
	276 Move X8, [X24]
	277 Move X0, X19
	278 Move X1, [X8+64]
	279 Call 0x1C17E00
	280 Compare X0, 0
	281 JumpIfEqual {291}
	282 Move W8, [X24+24]
	283 NotImplemented "Instruction CMP not yet implemented."
	284 Add X8, X24, X20
	285 NotImplemented "Instruction CMP not yet implemented."
	286 Move [X8+32], X19
	287 Move X8, [X22]
	288 Add X20, X20, 1
	289 Call 0x1C17F20
	290 Call 0x1C17F28
	291 Call 0x1C17F44
	292 Move X1, X31
	293 Call 0x1C17DEC

Method: System.Void reset()

Disassembly:
	0x031AD00C LDR X9, [X9 + 0x20]
	0x031AD010 CBZ X9, 0x31AD0AC
	0x031AD014 LDR X9, [X9 + 0xE8]
	0x031AD018 CBZ X9, 0x31AD0AC
	0x031AD01C LDR X9, [X9 + 0xC0]
	0x031AD020 CBZ X9, 0x31AD078
	0x031AD024 LDR W9, [X0 + 0xE0]
	0x031AD028 CBNZ W9, 0x31AD040
	0x031AD02C BL 0x1C16DFC
	0x031AD030 LDR X8, [X22]
	0x031AD034 LDR X8, [X8 + 0xB8]
	0x031AD038 LDR X8, [X8 + 0x18]
	0x031AD03C CBZ X8, 0x31AD0AC
	0x031AD040 LDR W9, [X8 + 0x18]
	0x031AD044 CMP W20, W9
	0x031AD048 B.CS 0x31AD0B0
	0x031AD04C ADD X8, X8, X24, 0x3, LSL
	0x031AD050 LDR X8, [X8 + 0x20]
	0x031AD054 CBZ X8, 0x31AD0AC
	0x031AD058 LDR X8, [X8 + 0xE8]
	0x031AD05C CBZ X8, 0x31AD0AC
	0x031AD060 LDR X8, [X8 + 0xC0]
	0x031AD064 CBZ X8, 0x31AD0AC
	0x031AD068 LDR X9, [X8 + 0x18]
	0x031AD06C LDR X0, [X8 + 0x40]
	0x031AD070 LDR X1, [X8 + 0x28]
	0x031AD074 BLR X9
	0x031AD078 LDR X0, [X22]
	0x031AD07C LDR W8, [X0 + 0xE0]
	0x031AD080 CBNZ W8, 0x31AD088
	0x031AD084 BL 0x1C16DFC
	0x031AD088 MOV W0, W20
	0x031AD08C BL 0x31AC7BC
	0x031AD090 ADD W20, W20, 0x1
	0x031AD094 B 0x31ACF54
	0x031AD098 LDP X20, X19, [X31 + 0x30]
	0x031AD09C LDP X22, X21, [X31 + 0x20]
	0x031AD0A0 LDP X24, X23, [X31 + 0x10]
	0x031AD0A4 LDR X30, [X31], #0x40
	0x031AD0A8 RET
	0x031AD0AC BL 0x1C16F20
	0x031AD0B0 BL 0x1C16F28
	0x031AD0B4 STP X30, X21, [X31 - 0x20]!
	0x031AD0B8 STP X20, X19, [X31 + 0x10]
	0x031AD0BC ADRP X20, 0x122E000
	0x031AD0C0 ADRP X21, 0xF48000
	0x031AD0C4 LDRB W8, [X20 + 0xE58]
	0x031AD0C8 LDR X21, [X21 + 0x5A8]
	0x031AD0CC MOV X19, X0
	0x031AD0D0 TBNZ X8, 0x0, 0x31AD0E8
	0x031AD0D4 ADRP X0, 0xF48000
	0x031AD0D8 LDR X0, [X0 + 0x5A8]
	0x031AD0DC BL 0x1C16CF4
	0x031AD0E0 MOVZ W8, 0x1
	0x031AD0E4 STRB W8, [X20 + 0xE58]
	0x031AD0E8 LDR X0, [X21]
	0x031AD0EC LDR W8, [X0 + 0xE0]
	0x031AD0F0 CBNZ W8, 0x31AD0F8
	0x031AD0F4 BL 0x1C16DFC
	0x031AD0F8 MOV X0, X19
	0x031AD0FC LDP X20, X19, [X31 + 0x10]
	0x031AD100 MOV W1, W31
	0x031AD104 LDP X30, X21, [X31], #0x20
	0x031AD108 B 0x31AD10C
	0x031AD10C STP X30, X25, [X31 - 0x40]!
	0x031AD110 STP X24, X23, [X31 + 0x10]
	0x031AD114 STP X22, X21, [X31 + 0x20]
	0x031AD118 STP X20, X19, [X31 + 0x30]
	0x031AD11C ADRP X21, 0x122E000
	0x031AD120 ADRP X23, 0xF48000
	0x031AD124 LDRB W8, [X21 + 0xE59]
	0x031AD128 LDR X23, [X23 + 0x5A8]
	0x031AD12C MOV W19, W1
	0x031AD130 MOV X20, X0
	0x031AD134 TBNZ X8, 0x0, 0x31AD158
	0x031AD138 ADRP X0, 0xF48000
	0x031AD13C LDR X0, [X0 + 0x5A8]
	0x031AD140 BL 0x1C16CF4
	0x031AD144 ADRP X0, 0xF46000
	0x031AD148 LDR X0, [X0 + 0x598]
	0x031AD14C BL 0x1C16CF4
	0x031AD150 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x122F000
	006 Move X19, 0xF49000
	007 Move W8, [X20+3662]
	008 Move X19, [X19+1448]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xF49000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move X0, 0xF47000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+3662], W8
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X19]
	027 Move X8, [X0+184]
	028 Move X8, [X8+24]
	029 Compare X8, 0
	030 JumpIfEqual {73}
	031 Move W20, W31
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X19]
	037 Move X8, [X0+184]
	038 Move W8, [X8+56]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {45}
	043 Call 0x1C17DFC
	044 Move X0, [X19]
	045 Move X8, [X0+184]
	046 Move X8, [X8+24]
	047 Compare X8, 0
	048 JumpIfEqual {96}
	049 Move W9, [X8+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X21, W20
	052 Add X8, X8, X21
	053 Move X8, [X8+32]
	054 Compare X8, 0
	055 JumpIfEqual {72}
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X19]
	061 Move X8, [X0+184]
	062 Move X8, [X8+24]
	063 Compare X8, 0
	064 JumpIfEqual {96}
	065 Move W9, [X8+24]
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Add X8, X8, X21
	068 Move X8, [X8+32]
	069 Compare X8, 0
	070 JumpIfEqual {96}
	071 Move [X8+16], W31
	072 Add W20, W20, 1
	073 Move X20, 0xF47000
	074 Move W8, [X0+224]
	075 Move X20, [X20+1432]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1C17DFC
	079 Move X0, [X19]
	080 Move X8, [X0+184]
	081 Move [X8+24], X31
	082 Move X0, [X20]
	083 Move X19, [X8+72]
	084 Move W9, [X0+224]
	085 Compare W9, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X0, X19
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X1, X31
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Call Object.Destroy, X0
	095 Return 
	096 Call 0x1C17F20
	097 Call 0x1C17F28

Method: System.Void Update()

Disassembly:
	0x031AD154 STRB W8, [X21 + 0xE59]
	0x031AD158 LDR X0, [X23]
	0x031AD15C LDR W8, [X0 + 0xE0]
	0x031AD160 CBNZ W8, 0x31AD168
	0x031AD164 BL 0x1C16DFC
	0x031AD168 BL 0x31AB9B0
	0x031AD16C CBZ X20, 0x31AD26C
	0x031AD170 ADRP X24, 0xF46000
	0x031AD174 LDR X24, [X24 + 0x598]
	0x031AD178 MOV X0, X20
	0x031AD17C MOV X1, X31
	0x031AD180 BL 0x3C356F8
	0x031AD184 MOV X20, X0
	0x031AD188 MOV W21, W31
	0x031AD18C LDR X0, [X23]
	0x031AD190 LDR W8, [X0 + 0xE0]
	0x031AD194 CBNZ W8, 0x31AD1A0
	0x031AD198 BL 0x1C16DFC
	0x031AD19C LDR X0, [X23]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x122F000
	005 Move X20, 0xF49000
	006 Move W8, [X19+3663]
	007 Move X20, [X20+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF49000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3663], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]

Method: System.Void onLevelWasLoaded54(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode mode)

Disassembly:
	0x031AD5C8 CMP W20, W9
	0x031AD5CC B.CS 0x31AD66C
	0x031AD5D0 MOV W23, W20
	0x031AD5D4 ADD X9, X8, X23, 0x3, LSL
	0x031AD5D8 LDR X9, [X9 + 0x20]
	0x031AD5DC CBZ X9, 0x31AD668
	0x031AD5E0 LDR X9, [X9 + 0xE8]
	0x031AD5E4 CBZ X9, 0x31AD668
	0x031AD5E8 LDR X9, [X9 + 0x78]
	0x031AD5EC CMP X9, X21
	0x031AD5F0 B.NE 0x31AD658
	0x031AD5F4 LDR W9, [X0 + 0xE0]
	0x031AD5F8 CBNZ W9, 0x31AD610
	0x031AD5FC BL 0x1C16DFC
	0x031AD600 LDR X0, [X22]
	0x031AD604 LDR X8, [X0 + 0xB8]
	0x031AD608 LDR X8, [X8 + 0x18]
	0x031AD60C CBZ X8, 0x31AD668
	0x031AD610 LDR W9, [X8 + 0x18]
	0x031AD614 CMP W20, W9
	0x031AD618 B.CS 0x31AD66C
	0x031AD61C ADD X8, X8, X23, 0x3, LSL
	0x031AD620 LDR X8, [X8 + 0x20]
	0x031AD624 CBZ X8, 0x31AD668

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122F000
	005 Move [X31+8], W0
	006 Move X19, 0xF49000
	007 Move W8, [X20+3664]
	008 Move X19, [X19+1448]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF49000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+3664], W8
	018 Add X0, X31, 8
	019 Move X1, X31
	020 Call Scene.get_buildIndex, X0
	021 Move X0, [X19]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call LeanTween.internalOnLevelWasLoaded, X0
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return 

Method: System.Void internalOnLevelWasLoaded(System.Int32 lvl)

Disassembly:
	0x031AD628 LDR W8, [X8 + 0x3C]
	0x031AD62C UBFM W9, W19, 0x10, 0x1F
	0x031AD630 CMP W8, W9
	0x031AD634 B.NE 0x31AD658
	0x031AD638 LDR W8, [X0 + 0xE0]
	0x031AD63C CBNZ W8, 0x31AD644
	0x031AD640 BL 0x1C16DFC
	0x031AD644 MOV W0, W20
	0x031AD648 LDP X20, X19, [X31 + 0x20]
	0x031AD64C LDP X22, X21, [X31 + 0x10]
	0x031AD650 LDP X30, X23, [X31], #0x30
	0x031AD654 B 0x31AC7BC
	0x031AD658 LDP X20, X19, [X31 + 0x20]
	0x031AD65C LDP X22, X21, [X31 + 0x10]
	0x031AD660 LDP X30, X23, [X31], #0x30
	0x031AD664 RET
	0x031AD668 BL 0x1C16F20
	0x031AD66C BL 0x1C16F28
	0x031AD670 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x122F000
	005 Move X20, 0xF73000
	006 Move W8, [X19+3665]
	007 Move X20, [X20+928]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF73000
	013 Move X0, [X0+928]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3665], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]

Method: System.Void update()

Disassembly:
	0x031AD1A0 LDR X8, [X0 + 0xB8]
	0x031AD1A4 LDR W9, [X8 + 0x38]
	0x031AD1A8 CMP W21, W9
	0x031AD1AC B.GT 0x31AD258
	0x031AD1B0 LDR W9, [X0 + 0xE0]
	0x031AD1B4 CBNZ W9, 0x31AD1C4
	0x031AD1B8 BL 0x1C16DFC
	0x031AD1BC LDR X8, [X23]
	0x031AD1C0 LDR X8, [X8 + 0xB8]
	0x031AD1C4 LDR X8, [X8 + 0x18]
	0x031AD1C8 CBZ X8, 0x31AD26C
	0x031AD1CC LDR W9, [X8 + 0x18]
	0x031AD1D0 CMP W21, W9
	0x031AD1D4 B.CS 0x31AD270
	0x031AD1D8 ADD X8, X8, W21, 0x3, SXTW
	0x031AD1DC LDR X25, [X8 + 0x20]
	0x031AD1E0 CBZ X25, 0x31AD250
	0x031AD1E4 LDRB W8, [X25 + 0x10]
	0x031AD1E8 CBZ W8, 0x31AD250
	0x031AD1EC LDR X0, [X24]
	0x031AD1F0 LDR X22, [X25 + 0x58]
	0x031AD1F4 LDR W8, [X0 + 0xE0]
	0x031AD1F8 CBNZ W8, 0x31AD200
	0x031AD1FC BL 0x1C16DFC
	0x031AD200 MOV X0, X22
	0x031AD204 MOV X1, X20
	0x031AD208 MOV X2, X31
	0x031AD20C BL 0x3C3883C
	0x031AD210 TBZ X0, 0x0, 0x31AD250
	0x031AD214 TBZ X19, 0x0, 0x31AD238
	0x031AD218 LDR X8, [X25 + 0xE8]
	0x031AD21C CBZ X8, 0x31AD26C
	0x031AD220 LDR X8, [X8 + 0xC0]
	0x031AD224 CBZ X8, 0x31AD238
	0x031AD228 LDR X9, [X8 + 0x18]
	0x031AD22C LDR X0, [X8 + 0x40]
	0x031AD230 LDR X1, [X8 + 0x28]
	0x031AD234 BLR X9
	0x031AD238 LDR X0, [X23]
	0x031AD23C LDR W8, [X0 + 0xE0]
	0x031AD240 CBNZ W8, 0x31AD248
	0x031AD244 BL 0x1C16DFC
	0x031AD248 MOV W0, W21
	0x031AD24C BL 0x31AC7BC
	0x031AD250 ADD W21, W21, 0x1
	0x031AD254 B 0x31AD18C
	0x031AD258 LDP X20, X19, [X31 + 0x30]
	0x031AD25C LDP X22, X21, [X31 + 0x20]
	0x031AD260 LDP X24, X23, [X31 + 0x10]
	0x031AD264 LDP X30, X25, [X31], #0x40
	0x031AD268 RET
	0x031AD26C BL 0x1C16F20
	0x031AD270 BL 0x1C16F28
	0x031AD274 STR X30, [X31 - 0x20]!
	0x031AD278 STP X20, X19, [X31 + 0x10]
	0x031AD27C ADRP X20, 0x122E000
	0x031AD280 LDRB W8, [X20 + 0xE5A]
	0x031AD284 MOV X19, X0
	0x031AD288 TBNZ X8, 0x0, 0x31AD2A0
	0x031AD28C ADRP X0, 0xF48000
	0x031AD290 LDR X0, [X0 + 0x5A8]
	0x031AD294 BL 0x1C16CF4
	0x031AD298 MOVZ W8, 0x1
	0x031AD29C STRB W8, [X20 + 0xE5A]
	0x031AD2A0 CBZ X19, 0x31AD2E4
	0x031AD2A4 ADRP X20, 0xF48000
	0x031AD2A8 LDR X20, [X20 + 0x5A8]
	0x031AD2AC MOV X0, X19
	0x031AD2B0 MOV X1, X31
	0x031AD2B4 BL 0x3C32ECC
	0x031AD2B8 LDR X8, [X20]
	0x031AD2BC MOV X19, X0
	0x031AD2C0 LDR W9, [X8 + 0xE0]
	0x031AD2C4 CBNZ W9, 0x31AD2D0
	0x031AD2C8 MOV X0, X8
	0x031AD2CC BL 0x1C16DFC
	0x031AD2D0 MOV X0, X19
	0x031AD2D4 LDP X20, X19, [X31 + 0x10]
	0x031AD2D8 MOV W1, W31
	0x031AD2DC LDR X30, [X31], #0x20
	0x031AD2E0 B 0x31AD10C
	0x031AD2E4 BL 0x1C16F20
	0x031AD2E8 STR X30, [X31 - 0x50]!
	0x031AD2EC STP X26, X25, [X31 + 0x10]
	0x031AD2F0 STP X24, X23, [X31 + 0x20]
	0x031AD2F4 STP X22, X21, [X31 + 0x30]
	0x031AD2F8 STP X20, X19, [X31 + 0x40]
	0x031AD2FC ADRP X19, 0x122E000
	0x031AD300 LDRB W8, [X19 + 0xE5B]
	0x031AD304 MOV W20, W2
	0x031AD308 MOV W21, W1
	0x031AD30C MOV X22, X0
	0x031AD310 TBNZ X8, 0x0, 0x31AD334
	0x031AD314 ADRP X0, 0xF48000
	0x031AD318 LDR X0, [X0 + 0x5A8]
	0x031AD31C BL 0x1C16CF4
	0x031AD320 ADRP X0, 0xF46000
	0x031AD324 LDR X0, [X0 + 0x598]
	0x031AD328 BL 0x1C16CF4
	0x031AD32C MOVZ W8, 0x1
	0x031AD330 STRB W8, [X19 + 0xE5B]
	0x031AD334 TBNZ X21, 0x1F, 0x31AD53C
	0x031AD338 ADRP X24, 0xF48000
	0x031AD33C LDR X24, [X24 + 0x5A8]
	0x031AD340 LDR X0, [X24]
	0x031AD344 LDR W8, [X0 + 0xE0]
	0x031AD348 CBNZ W8, 0x31AD350
	0x031AD34C BL 0x1C16DFC
	0x031AD350 BL 0x31AB9B0
	0x031AD354 LDR X8, [X24]
	0x031AD358 LDR X8, [X8 + 0xB8]
	0x031AD35C LDR X8, [X8 + 0x18]
	0x031AD360 CBZ X8, 0x31AD554
	0x031AD364 LDR W9, [X8 + 0x18]
	0x031AD368 AND W19, W21, 0xFFFF
	0x031AD36C CMP W19, W9
	0x031AD370 B.CS 0x31AD558
	0x031AD374 MOV W25, W19
	0x031AD378 ADD X8, X8, X25, 0x3, LSL
	0x031AD37C LDR X8, [X8 + 0x20]
	0x031AD380 CBZ X8, 0x31AD554
	0x031AD384 ADRP X26, 0xF46000
	0x031AD388 LDR X26, [X26 + 0x598]
	0x031AD38C LDR X23, [X8 + 0x58]
	0x031AD390 LDR X0, [X26]
	0x031AD394 LDR W9, [X0 + 0xE0]
	0x031AD398 CBNZ W9, 0x31AD3A0
	0x031AD39C BL 0x1C16DFC
	0x031AD3A0 MOV X0, X23
	0x031AD3A4 MOV X1, X31
	0x031AD3A8 MOV X2, X31
	0x031AD3AC BL 0x3C3883C
	0x031AD3B0 TBZ X0, 0x0, 0x31AD480
	0x031AD3B4 TBZ X20, 0x0, 0x31AD454
	0x031AD3B8 LDR X0, [X24]
	0x031AD3BC LDR W8, [X0 + 0xE0]
	0x031AD3C0 CBNZ W8, 0x31AD3CC
	0x031AD3C4 BL 0x1C16DFC
	0x031AD3C8 LDR X0, [X24]
	0x031AD3CC LDR X8, [X0 + 0xB8]
	0x031AD3D0 LDR X8, [X8 + 0x18]
	0x031AD3D4 CBZ X8, 0x31AD554
	0x031AD3D8 LDR W9, [X8 + 0x18]
	0x031AD3DC CMP W19, W9
	0x031AD3E0 B.CS 0x31AD558
	0x031AD3E4 ADD X9, X8, X25, 0x3, LSL
	0x031AD3E8 LDR X9, [X9 + 0x20]
	0x031AD3EC CBZ X9, 0x31AD554
	0x031AD3F0 LDR X9, [X9 + 0xE8]
	0x031AD3F4 CBZ X9, 0x31AD554
	0x031AD3F8 LDR X9, [X9 + 0xC0]
	0x031AD3FC CBZ X9, 0x31AD454
	0x031AD400 LDR W9, [X0 + 0xE0]
	0x031AD404 CBNZ W9, 0x31AD41C
	0x031AD408 BL 0x1C16DFC
	0x031AD40C LDR X8, [X24]
	0x031AD410 LDR X8, [X8 + 0xB8]
	0x031AD414 LDR X8, [X8 + 0x18]
	0x031AD418 CBZ X8, 0x31AD554
	0x031AD41C LDR W9, [X8 + 0x18]
	0x031AD420 CMP W19, W9
	0x031AD424 B.CS 0x31AD558
	0x031AD428 ADD X8, X8, X25, 0x3, LSL
	0x031AD42C LDR X8, [X8 + 0x20]
	0x031AD430 CBZ X8, 0x31AD554
	0x031AD434 LDR X8, [X8 + 0xE8]
	0x031AD438 CBZ X8, 0x31AD554
	0x031AD43C LDR X8, [X8 + 0xC0]
	0x031AD440 CBZ X8, 0x31AD554
	0x031AD444 LDR X9, [X8 + 0x18]
	0x031AD448 LDR X0, [X8 + 0x40]
	0x031AD44C LDR X1, [X8 + 0x28]
	0x031AD450 BLR X9
	0x031AD454 LDR X0, [X24]
	0x031AD458 LDR W8, [X0 + 0xE0]
	0x031AD45C CBNZ W8, 0x31AD464
	0x031AD460 BL 0x1C16DFC
	0x031AD464 MOV W0, W19
	0x031AD468 LDP X20, X19, [X31 + 0x40]
	0x031AD46C LDP X22, X21, [X31 + 0x30]
	0x031AD470 LDP X24, X23, [X31 + 0x20]
	0x031AD474 LDP X26, X25, [X31 + 0x10]
	0x031AD478 LDR X30, [X31], #0x50
	0x031AD47C B 0x31AC7BC
	0x031AD480 LDR X0, [X24]
	0x031AD484 LDR W8, [X0 + 0xE0]
	0x031AD488 CBNZ W8, 0x31AD494
	0x031AD48C BL 0x1C16DFC
	0x031AD490 LDR X0, [X24]
	0x031AD494 LDR X8, [X0 + 0xB8]
	0x031AD498 LDR X8, [X8 + 0x18]
	0x031AD49C CBZ X8, 0x31AD554
	0x031AD4A0 LDR W9, [X8 + 0x18]
	0x031AD4A4 CMP W19, W9
	0x031AD4A8 B.CS 0x31AD558
	0x031AD4AC ADD X8, X8, X25, 0x3, LSL
	0x031AD4B0 LDR X8, [X8 + 0x20]
	0x031AD4B4 CBZ X8, 0x31AD554
	0x031AD4B8 LDR X0, [X8 + 0x58]
	0x031AD4BC CBZ X0, 0x31AD554
	0x031AD4C0 MOV X1, X31
	0x031AD4C4 BL 0x3C32ECC
	0x031AD4C8 LDR X8, [X26]
	0x031AD4CC MOV X23, X0
	0x031AD4D0 LDR W9, [X8 + 0xE0]
	0x031AD4D4 CBNZ W9, 0x31AD4E0
	0x031AD4D8 MOV X0, X8
	0x031AD4DC BL 0x1C16DFC
	0x031AD4E0 MOV X0, X23
	0x031AD4E4 MOV X1, X22
	0x031AD4E8 MOV X2, X31
	0x031AD4EC BL 0x3C3883C
	0x031AD4F0 TBZ X0, 0x0, 0x31AD53C
	0x031AD4F4 LDR X0, [X24]
	0x031AD4F8 LDR W8, [X0 + 0xE0]
	0x031AD4FC CBNZ W8, 0x31AD508
	0x031AD500 BL 0x1C16DFC
	0x031AD504 LDR X0, [X24]
	0x031AD508 LDR X8, [X0 + 0xB8]
	0x031AD50C LDR X8, [X8 + 0x18]
	0x031AD510 CBZ X8, 0x31AD554
	0x031AD514 LDR W9, [X8 + 0x18]
	0x031AD518 CMP W19, W9
	0x031AD51C B.CS 0x31AD558
	0x031AD520 ADD X8, X8, X25, 0x3, LSL
	0x031AD524 LDR X8, [X8 + 0x20]
	0x031AD528 CBZ X8, 0x31AD554
	0x031AD52C LDR W8, [X8 + 0x3C]
	0x031AD530 UBFM W9, W21, 0x10, 0x1F
	0x031AD534 CMP W8, W9
	0x031AD538 B.EQ 0x31AD3B4
	0x031AD53C LDP X20, X19, [X31 + 0x40]
	0x031AD540 LDP X22, X21, [X31 + 0x30]
	0x031AD544 LDP X24, X23, [X31 + 0x20]
	0x031AD548 LDP X26, X25, [X31 + 0x10]
	0x031AD54C LDR X30, [X31], #0x50
	0x031AD550 RET
	0x031AD554 BL 0x1C16F20
	0x031AD558 BL 0x1C16F28
	0x031AD55C STP X30, X23, [X31 - 0x30]!
	0x031AD560 STP X22, X21, [X31 + 0x10]
	0x031AD564 STP X20, X19, [X31 + 0x20]
	0x031AD568 ADRP X20, 0x122E000
	0x031AD56C LDRB W8, [X20 + 0xE5C]
	0x031AD570 MOV W19, W1
	0x031AD574 MOV X21, X0
	0x031AD578 TBNZ X8, 0x0, 0x31AD590
	0x031AD57C ADRP X0, 0xF48000
	0x031AD580 LDR X0, [X0 + 0x5A8]
	0x031AD584 BL 0x1C16CF4
	0x031AD588 MOVZ W8, 0x1
	0x031AD58C STRB W8, [X20 + 0xE5C]
	0x031AD590 TBNZ X19, 0x1F, 0x31AD658
	0x031AD594 ADRP X22, 0xF48000
	0x031AD598 LDR X22, [X22 + 0x5A8]
	0x031AD59C LDR X0, [X22]
	0x031AD5A0 LDR W8, [X0 + 0xE0]
	0x031AD5A4 CBNZ W8, 0x31AD5AC
	0x031AD5A8 BL 0x1C16DFC
	0x031AD5AC BL 0x31AB9B0
	0x031AD5B0 LDR X0, [X22]
	0x031AD5B4 LDR X8, [X0 + 0xB8]
	0x031AD5B8 LDR X8, [X8 + 0x18]
	0x031AD5BC CBZ X8, 0x31AD668
	0x031AD5C0 LDR W9, [X8 + 0x18]
	0x031AD5C4 AND W20, W19, 0xFFFF

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x122F000
	008 Move X20, 0xF49000
	009 Move W8, [X19+3666]
	010 Move X20, [X20+1448]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF49000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X0, 0xF47000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+3666], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X20]
	029 Move X8, [X0+184]
	030 Move X0, X31
	031 Move W19, [X8+68]
	032 Call Time.get_frameCount
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X20, [X31+32]
	035 Move X19, [X31+40]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+8]
	039 Move V8, [X31+48]
	040 Return 
	041 Move X0, [X20]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Call LeanTween.init
	047 Move X0, [X20]
	048 Move X8, [X0+184]
	049 Move V0, [X8+80]
	050 NotImplemented "Instruction FCMP not yet implemented."
	051 Move S8, W31
	052 Move X0, X31
	053 Call Time.get_unscaledDeltaTime
	054 Move X0, [X20]
	055 Move V8, V0
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X20]
	061 Move X8, [X0+184]
	062 Move [X8+80], S8
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X20]
	068 Move X8, [X0+184]
	069 Move X0, X31
	070 Move [X8+80], S8
	071 Call Time.get_deltaTime
	072 Move X8, [X20]
	073 Move W19, W31
	074 Move X9, [X8+184]
	075 Move [X9+88], S0
	076 Move [X9+128], W31
	077 Move [X9+104], W31
	078 Move W9, [X8+224]
	079 Compare W9, 0
	080 JumpIfNotEqual {84}
	081 Move X0, X8
	082 Call 0x1C17DFC
	083 Move X8, [X20]
	084 Move X9, [X8+184]
	085 Move W10, [X9+56]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Move W10, [X8+224]
	088 Compare W10, 0
	089 JumpIfNotEqual {94}
	090 Move X0, X8
	091 Call 0x1C17DFC
	092 Move X8, [X20]
	093 Move X9, [X8+184]
	094 Move W10, [X9+60]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move W10, [X8+224]
	097 Compare W10, 0
	098 JumpIfNotEqual {103}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move X8, [X20]
	102 Move X9, [X8+184]
	103 Move X10, [X9+24]
	104 Compare X10, 0
	105 JumpIfEqual {293}
	106 Move W11, [X10+24]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X21, W19
	109 Add X10, X10, X21
	110 Move X0, [X10+32]
	111 Move [X9+48], X0
	112 Compare X0, 0
	113 JumpIfEqual {293}
	114 Move W10, [X0+16]
	115 Compare W10, 0
	116 JumpIfEqual {175}
	117 Move W10, [X8+224]
	118 Compare W10, 0
	119 JumpIfEqual {121}
	120 Move [X9+128], W19
	121 Move X0, X8
	122 Call 0x1C17DFC
	123 Move X8, [X20]
	124 Move X8, [X8+184]
	125 Move X0, [X8+48]
	126 Move [X8+128], W19
	127 Compare X0, 0
	128 JumpIfEqual {293}
	129 Move X1, X31
	130 Call LTDescr.updateInternal, X0
	131 Move X8, [X20]
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {175}
	136 Move W9, [X8+224]
	137 Compare W9, 0
	138 JumpIfNotEqual {142}
	139 Move X0, X8
	140 Call 0x1C17DFC
	141 Move X8, [X20]
	142 Move X8, [X8+184]
	143 Move X9, [X8+32]
	144 Compare X9, 0
	145 JumpIfEqual {293}
	146 NotImplemented "Instruction LDRSW not yet implemented."
	147 Move W11, [X9+24]
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Add X9, X9, X10
	150 Move [X9+32], W19
	151 Move X9, [X8+24]
	152 Compare X9, 0
	153 JumpIfEqual {293}
	154 Move W10, [X9+24]
	155 NotImplemented "Instruction CMP not yet implemented."
	156 Add X9, X9, X21
	157 Move X0, [X9+32]
	158 Compare X0, 0
	159 JumpIfEqual {293}
	160 Move X21, [X8+40]
	161 NotImplemented "Instruction LDRSW not yet implemented."
	162 Move X1, X31
	163 Call LTDescr.get_id, X0
	164 Compare X21, 0
	165 JumpIfEqual {293}
	166 Move W8, [X21+24]
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Add X8, X21, X22
	169 Move [X8+32], W0
	170 Move X8, [X20]
	171 Move X9, [X8+184]
	172 Move W10, [X9+104]
	173 Add W10, W10, 1
	174 Move [X9+104], W10
	175 Add W19, W19, 1
	176 Move W9, [X8+224]
	177 Compare W9, 0
	178 JumpIfNotEqual {182}
	179 Move X0, X8
	180 Call 0x1C17DFC
	181 Move X8, [X20]
	182 Move X8, [X8+184]
	183 Move X0, X31
	184 Move W9, [X8+128]
	185 Move [X8+56], W9
	186 Call Time.get_frameCount
	187 Move W8, W0
	188 Move X0, [X20]
	189 Move X22, 0xF47000
	190 Move W21, W31
	191 Move X9, [X0+184]
	192 Move [X9+68], W8
	193 Move X22, [X22+1432]
	194 Move W8, [X0+224]
	195 Compare W8, 0
	196 JumpIfNotEqual {199}
	197 Call 0x1C17DFC
	198 Move X0, [X20]
	199 Move X8, [X0+184]
	200 Move W9, [X8+104]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move W9, [X0+224]
	203 Compare W9, 0
	204 JumpIfNotEqual {208}
	205 Call 0x1C17DFC
	206 Move X8, [X20]
	207 Move X8, [X8+184]
	208 Move X9, [X8+32]
	209 Compare X9, 0
	210 JumpIfEqual {293}
	211 Move W10, [X9+24]
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X19, W21
	214 Add X9, X9, X19
	215 NotImplemented "Instruction LDRSW not yet implemented."
	216 Move X10, [X8+24]
	217 Move [X8+100], W9
	218 Compare X10, 0
	219 JumpIfEqual {293}
	220 Move W11, [X10+24]
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Add X9, X10, X9
	223 Move X0, [X9+32]
	224 Move [X8+48], X0
	225 Compare X0, 0
	226 JumpIfEqual {293}
	227 Move X1, X31
	228 Call LTDescr.get_id, X0
	229 Move X8, [X20]
	230 Move X9, [X8+184]
	231 Move X10, [X9+40]
	232 Compare X10, 0
	233 JumpIfEqual {293}
	234 Move W11, [X10+24]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Add X10, X10, X19
	237 Move W10, [X10+32]
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Move W10, [X8+224]
	240 Compare W10, 0
	241 JumpIfNotEqual {246}
	242 Move X0, X8
	243 Call 0x1C17DFC
	244 Move X8, [X20]
	245 Move X9, [X8+184]
	246 Move W0, [X9+100]
	247 Call LeanTween.removeTween, X0
	248 Move X0, [X20]
	249 Move X8, [X0+184]
	250 Move X8, [X8+48]
	251 Compare X8, 0
	252 JumpIfEqual {293}
	253 Move W9, [X8+22]
	254 Compare W9, 0
	255 JumpIfEqual {291}
	256 Move W9, [X0+224]
	257 Compare W9, 0
	258 JumpIfNotEqual {265}
	259 Call 0x1C17DFC
	260 Move X8, [X20]
	261 Move X8, [X8+184]
	262 Move X8, [X8+48]
	263 Compare X8, 0
	264 JumpIfEqual {293}
	265 Move X0, [X22]
	266 Move X19, [X8+88]
	267 Move W9, [X0+224]
	268 Compare W9, 0
	269 JumpIfNotEqual {271}
	270 Call 0x1C17DFC
	271 Move X0, X19
	272 Move X1, X31
	273 Move X2, X31
	274 Call Object.op_Inequality, X0, X1
	275 Move TEMP, X0
	276 And TEMP, TEMP, 1
	277 Compare TEMP, 1
	278 JumpIfNotEqual {291}
	279 Move X0, [X20]
	280 Move W8, [X0+224]
	281 Compare W8, 0
	282 JumpIfNotEqual {285}
	283 Call 0x1C17DFC
	284 Move X0, [X20]
	285 Move X8, [X0+184]
	286 Move X0, [X8+48]
	287 Compare X0, 0
	288 JumpIfEqual {293}
	289 Move X1, X31
	290 Call LTDescr.callOnCompletes, X0
	291 Move X0, [X20]
	292 Add W21, W21, 1
	293 Call 0x1C17F20
	294 Call 0x1C17F28

Method: System.Void removeTween(System.Int32 i, System.Int32 uniqueId)

Disassembly:
	0x031ADACC CBZ X8, 0x31ADB44
	0x031ADAD0 LDR W9, [X8 + 0x18]
	0x031ADAD4 CMP W21, W9
	0x031ADAD8 B.CS 0x31ADB48
	0x031ADADC ADD X9, X8, X23, 0x3, LSL
	0x031ADAE0 LDR X9, [X9 + 0x20]
	0x031ADAE4 CBZ X9, 0x31ADB44
	0x031ADAE8 LDR W9, [X9 + 0x3C]
	0x031ADAEC CMP X9, X22
	0x031ADAF0 B.EQ 0x31ADB04
	0x031ADAF4 ADD W21, W21, 0x1
	0x031ADAF8 B 0x31ADA44
	0x031ADAFC MOV X0, X31
	0x031ADB00 B 0x31ADB34
	0x031ADB04 LDR W9, [X0 + 0xE0]
	0x031ADB08 CBNZ W9, 0x31ADB20
	0x031ADB0C BL 0x1C16DFC
	0x031ADB10 LDR X8, [X20]
	0x031ADB14 LDR X8, [X8 + 0xB8]
	0x031ADB18 LDR X8, [X8 + 0x18]
	0x031ADB1C CBZ X8, 0x31ADB44
	0x031ADB20 LDR W9, [X8 + 0x18]
	0x031ADB24 CMP W21, W9
	0x031ADB28 B.CS 0x31ADB48
	0x031ADB2C ADD X8, X8, X23, 0x3, LSL
	0x031ADB30 LDR X0, [X8 + 0x20]!
	0x031ADB34 LDP X20, X19, [X31 + 0x20]
	0x031ADB38 LDP X22, X21, [X31 + 0x10]
	0x031ADB3C LDP X30, X23, [X31], #0x30
	0x031ADB40 RET
	0x031ADB44 BL 0x1C16F20
	0x031ADB48 BL 0x1C16F28
	0x031ADB4C STP X30, X21, [X31 - 0x20]!
	0x031ADB50 STP X20, X19, [X31 + 0x10]
	0x031ADB54 ADRP X20, 0x122E000
	0x031ADB58 ADRP X21, 0xF48000
	0x031ADB5C LDRB W8, [X20 + 0xE60]
	0x031ADB60 LDR X21, [X21 + 0x5A8]
	0x031ADB64 MOV W19, W0
	0x031ADB68 TBNZ X8, 0x0, 0x31ADB80
	0x031ADB6C ADRP X0, 0xF48000
	0x031ADB70 LDR X0, [X0 + 0x5A8]
	0x031ADB74 BL 0x1C16CF4
	0x031ADB78 MOVZ W8, 0x1
	0x031ADB7C STRB W8, [X20 + 0xE60]
	0x031ADB80 LDR X0, [X21]
	0x031ADB84 LDR W8, [X0 + 0xE0]
	0x031ADB88 CBNZ W8, 0x31ADB90

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x122F000
	007 Move X21, 0xF49000
	008 Move W8, [X22+3667]
	009 Move X21, [X21+1448]
	010 Move W20, W1
	011 Move W19, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF49000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+3667], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X8, [X8+24]
	029 Compare X8, 0
	030 JumpIfEqual {59}
	031 Move W9, [X8+24]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Add X8, X8, W19
	034 Move X0, [X8+32]
	035 Compare X0, 0
	036 JumpIfEqual {59}
	037 Move X1, X31
	038 Call LTDescr.get_uniqueId, X0
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X0, [X21]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move W0, W19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Call LeanTween.removeTween, X0
	052 Return 
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X22, [X31+16]
	056 Move X21, [X31+24]
	057 Move X30, [X31+48]
	058 Return 
	059 Call 0x1C17F20
	060 Call 0x1C17F28

Method: System.Void removeTween(System.Int32 i)

Disassembly:
	0x031AD7BC BL 0x31BFD1C
	0x031AD7C0 LDR X8, [X22]
	0x031AD7C4 MOV W19, W0
	0x031AD7C8 LDR W9, [X8 + 0xE0]
	0x031AD7CC CBNZ W9, 0x31AD7D8
	0x031AD7D0 MOV X0, X8
	0x031AD7D4 BL 0x1C16DFC
	0x031AD7D8 AND W0, W19, 0xFFFF
	0x031AD7DC BL 0x31AC7BC
	0x031AD7E0 LDR X8, [X20 + 0x18]
	0x031AD7E4 CBZ X8, 0x31AD8FC
	0x031AD7E8 LDR X8, [X8 + 0x10]
	0x031AD7EC CBZ X8, 0x31AD8EC
	0x031AD7F0 STR X8, [X20 + 0x18]
	0x031AD7F4 LDR X0, [X22]
	0x031AD7F8 ADD W21, W21, 0x1
	0x031AD7FC B 0x31AD784
	0x031AD800 LDR W9, [X8 + 0x18]
	0x031AD804 CMP W19, W9
	0x031AD808 B.CS 0x31AD900
	0x031AD80C MOV W23, W19
	0x031AD810 ADD X9, X8, X23, 0x3, LSL
	0x031AD814 LDR X9, [X9 + 0x20]
	0x031AD818 CBZ X9, 0x31AD8FC
	0x031AD81C LDR W9, [X9 + 0x3C]
	0x031AD820 UBFM W10, W21, 0x10, 0x1F
	0x031AD824 CMP W9, W10
	0x031AD828 B.NE 0x31AD8EC
	0x031AD82C TBZ X20, 0x0, 0x31AD8CC
	0x031AD830 LDR W9, [X0 + 0xE0]
	0x031AD834 CBNZ W9, 0x31AD84C
	0x031AD838 BL 0x1C16DFC
	0x031AD83C LDR X0, [X22]
	0x031AD840 LDR X8, [X0 + 0xB8]
	0x031AD844 LDR X8, [X8 + 0x18]
	0x031AD848 CBZ X8, 0x31AD8FC
	0x031AD84C LDR W9, [X8 + 0x18]
	0x031AD850 CMP W19, W9
	0x031AD854 B.CS 0x31AD900
	0x031AD858 ADD X9, X8, X23, 0x3, LSL
	0x031AD85C LDR X9, [X9 + 0x20]
	0x031AD860 CBZ X9, 0x31AD8FC
	0x031AD864 LDR X9, [X9 + 0xE8]
	0x031AD868 CBZ X9, 0x31AD8FC
	0x031AD86C LDR X9, [X9 + 0xC0]
	0x031AD870 CBZ X9, 0x31AD8CC
	0x031AD874 LDR W9, [X0 + 0xE0]
	0x031AD878 CBNZ W9, 0x31AD890
	0x031AD87C BL 0x1C16DFC
	0x031AD880 LDR X8, [X22]
	0x031AD884 LDR X8, [X8 + 0xB8]
	0x031AD888 LDR X8, [X8 + 0x18]
	0x031AD88C CBZ X8, 0x31AD8FC
	0x031AD890 LDR W9, [X8 + 0x18]
	0x031AD894 CMP W19, W9
	0x031AD898 B.CS 0x31AD900
	0x031AD89C ADD X8, X8, X23, 0x3, LSL
	0x031AD8A0 LDR X8, [X8 + 0x20]
	0x031AD8A4 CBZ X8, 0x31AD8FC
	0x031AD8A8 LDR X8, [X8 + 0xE8]
	0x031AD8AC CBZ X8, 0x31AD8FC
	0x031AD8B0 LDR X8, [X8 + 0xC0]
	0x031AD8B4 CBZ X8, 0x31AD8FC
	0x031AD8B8 LDR X9, [X8 + 0x18]
	0x031AD8BC LDR X0, [X8 + 0x40]
	0x031AD8C0 LDR X1, [X8 + 0x28]
	0x031AD8C4 BLR X9
	0x031AD8C8 LDR X0, [X22]
	0x031AD8CC LDR W8, [X0 + 0xE0]
	0x031AD8D0 CBNZ W8, 0x31AD8D8
	0x031AD8D4 BL 0x1C16DFC
	0x031AD8D8 MOV W0, W19
	0x031AD8DC LDP X20, X19, [X31 + 0x20]
	0x031AD8E0 LDP X22, X21, [X31 + 0x10]
	0x031AD8E4 LDP X30, X23, [X31], #0x30
	0x031AD8E8 B 0x31AC7BC
	0x031AD8EC LDP X20, X19, [X31 + 0x20]
	0x031AD8F0 LDP X22, X21, [X31 + 0x10]
	0x031AD8F4 LDP X30, X23, [X31], #0x30
	0x031AD8F8 RET
	0x031AD8FC BL 0x1C16F20
	0x031AD900 BL 0x1C16F28
	0x031AD904 STP X30, X23, [X31 - 0x30]!
	0x031AD908 STP X22, X21, [X31 + 0x10]
	0x031AD90C STP X20, X19, [X31 + 0x20]
	0x031AD910 ADRP X21, 0x122E000
	0x031AD914 ADRP X20, 0xF48000
	0x031AD918 LDRB W8, [X21 + 0xE5F]
	0x031AD91C LDR X20, [X20 + 0x5A8]
	0x031AD920 MOV W19, W0
	0x031AD924 TBNZ X8, 0x0, 0x31AD93C
	0x031AD928 ADRP X0, 0xF48000
	0x031AD92C LDR X0, [X0 + 0x5A8]
	0x031AD930 BL 0x1C16CF4
	0x031AD934 MOVZ W8, 0x1
	0x031AD938 STRB W8, [X21 + 0xE5F]
	0x031AD93C LDR X0, [X20]
	0x031AD940 LDR W8, [X0 + 0xE0]
	0x031AD944 CBNZ W8, 0x31AD94C
	0x031AD948 BL 0x1C16DFC
	0x031AD94C BL 0x31AB9B0
	0x031AD950 LDR X0, [X20]
	0x031AD954 LDR X8, [X0 + 0xB8]
	0x031AD958 LDR X8, [X8 + 0x18]
	0x031AD95C CBZ X8, 0x31ADB44
	0x031AD960 LDR W9, [X8 + 0x18]
	0x031AD964 AND W21, W19, 0xFFFF
	0x031AD968 CMP W21, W9
	0x031AD96C B.CS 0x31ADB48
	0x031AD970 MOV W22, W21
	0x031AD974 ADD X9, X8, X22, 0x3, LSL
	0x031AD978 LDR X9, [X9 + 0x20]
	0x031AD97C SBFM W23, W19, 0x10, 0x1F
	0x031AD980 CBZ X9, 0x31ADA3C
	0x031AD984 LDR W9, [X0 + 0xE0]
	0x031AD988 CBNZ W9, 0x31AD9A0
	0x031AD98C BL 0x1C16DFC
	0x031AD990 LDR X8, [X20]
	0x031AD994 LDR X8, [X8 + 0xB8]
	0x031AD998 LDR X8, [X8 + 0x18]
	0x031AD99C CBZ X8, 0x31ADB44
	0x031AD9A0 LDR W9, [X8 + 0x18]
	0x031AD9A4 CMP W21, W9
	0x031AD9A8 B.CS 0x31ADB48
	0x031AD9AC ADD X8, X8, X22, 0x3, LSL
	0x031AD9B0 LDR X0, [X8 + 0x20]
	0x031AD9B4 CBZ X0, 0x31ADB44
	0x031AD9B8 MOV X1, X31
	0x031AD9BC BL 0x31BFD1C
	0x031AD9C0 CMP W0, W19
	0x031AD9C4 B.NE 0x31ADA3C
	0x031AD9C8 LDR X0, [X20]
	0x031AD9CC LDR W8, [X0 + 0xE0]
	0x031AD9D0 CBNZ W8, 0x31AD9DC
	0x031AD9D4 BL 0x1C16DFC
	0x031AD9D8 LDR X0, [X20]
	0x031AD9DC LDR X8, [X0 + 0xB8]
	0x031AD9E0 LDR X8, [X8 + 0x18]
	0x031AD9E4 CBZ X8, 0x31ADB44
	0x031AD9E8 LDR W9, [X8 + 0x18]
	0x031AD9EC CMP W21, W9
	0x031AD9F0 B.CS 0x31ADB48
	0x031AD9F4 ADD X9, X8, X22, 0x3, LSL
	0x031AD9F8 LDR X9, [X9 + 0x20]
	0x031AD9FC CBZ X9, 0x31ADB44
	0x031ADA00 LDR W9, [X9 + 0x3C]
	0x031ADA04 CMP X9, W23, SXTW
	0x031ADA08 B.NE 0x31ADA3C
	0x031ADA0C LDR W9, [X0 + 0xE0]
	0x031ADA10 CBNZ W9, 0x31ADA28
	0x031ADA14 BL 0x1C16DFC
	0x031ADA18 LDR X8, [X20]
	0x031ADA1C LDR X8, [X8 + 0xB8]
	0x031ADA20 LDR X8, [X8 + 0x18]
	0x031ADA24 CBZ X8, 0x31ADB44
	0x031ADA28 LDR W9, [X8 + 0x18]
	0x031ADA2C CMP W21, W9
	0x031ADA30 B.CS 0x31ADB48
	0x031ADA34 ADD X8, X8, X22, 0x3, LSL
	0x031ADA38 B 0x31ADB30
	0x031ADA3C MOV W21, W31
	0x031ADA40 SXTW X22, W23
	0x031ADA44 LDR X0, [X20]
	0x031ADA48 LDR W8, [X0 + 0xE0]
	0x031ADA4C CBNZ W8, 0x31ADA58
	0x031ADA50 BL 0x1C16DFC
	0x031ADA54 LDR X0, [X20]
	0x031ADA58 LDR X8, [X0 + 0xB8]
	0x031ADA5C LDR W9, [X8 + 0x38]
	0x031ADA60 CMP W21, W9
	0x031ADA64 B.GT 0x31ADAFC
	0x031ADA68 LDR W9, [X0 + 0xE0]
	0x031ADA6C CBNZ W9, 0x31ADA7C
	0x031ADA70 BL 0x1C16DFC
	0x031ADA74 LDR X8, [X20]
	0x031ADA78 LDR X8, [X8 + 0xB8]
	0x031ADA7C LDR X8, [X8 + 0x18]
	0x031ADA80 CBZ X8, 0x31ADB44
	0x031ADA84 LDR W9, [X8 + 0x18]
	0x031ADA88 CMP W21, W9
	0x031ADA8C B.CS 0x31ADB48
	0x031ADA90 SXTW X23, W21
	0x031ADA94 ADD X8, X8, X23, 0x3, LSL
	0x031ADA98 LDR X0, [X8 + 0x20]
	0x031ADA9C CBZ X0, 0x31ADB44
	0x031ADAA0 MOV X1, X31
	0x031ADAA4 BL 0x31BFD1C
	0x031ADAA8 CMP W0, W19
	0x031ADAAC B.NE 0x31ADAF4
	0x031ADAB0 LDR X0, [X20]
	0x031ADAB4 LDR W8, [X0 + 0xE0]
	0x031ADAB8 CBNZ W8, 0x31ADAC4
	0x031ADABC BL 0x1C16DFC
	0x031ADAC0 LDR X0, [X20]
	0x031ADAC4 LDR X8, [X0 + 0xB8]
	0x031ADAC8 LDR X8, [X8 + 0x18]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122F000
	009 Move X22, 0xF49000
	010 Move W8, [X20+3668]
	011 Move X22, [X22+1448]
	012 Move W19, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0xF73000
	018 Move X0, [X0+928]
	019 Call 0x1C17CF4
	020 Move X0, 0xF49000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move X0, 0xF47000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+3668], W8
	028 Move X0, [X22]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X22]
	034 Move X8, [X0+184]
	035 Move X8, [X8+24]
	036 Compare X8, 0
	037 JumpIfEqual {237}
	038 Move W9, [X8+24]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X23, W19
	041 Add X9, X8, X23
	042 Move X9, [X9+32]
	043 Compare X9, 0
	044 JumpIfEqual {237}
	045 Move W9, [X9+16]
	046 Compare W9, 0
	047 JumpIfEqual {229}
	048 Move W9, [X0+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {57}
	051 Call 0x1C17DFC
	052 Move X0, [X22]
	053 Move X8, [X0+184]
	054 Move X8, [X8+24]
	055 Compare X8, 0
	056 JumpIfEqual {237}
	057 Move W9, [X8+24]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X9, X8, X23
	060 Move X9, [X9+32]
	061 Compare X9, 0
	062 JumpIfEqual {237}
	063 Move W10, [X9+84]
	064 Move TEMP, 0
	065 Not TEMP
	066 Move W11, TEMP
	067 Move [X9+16], W31
	068 Move [X9+60], W11
	069 Compare W10, 0
	070 JumpIfEqual {211}
	071 Move W9, [X0+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {80}
	074 Call 0x1C17DFC
	075 Move X0, [X22]
	076 Move X8, [X0+184]
	077 Move X8, [X8+24]
	078 Compare X8, 0
	079 JumpIfEqual {237}
	080 Move W9, [X8+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add X9, X8, X23
	083 Move X9, [X9+32]
	084 Compare X9, 0
	085 JumpIfEqual {237}
	086 Move X9, [X9+232]
	087 Compare X9, 0
	088 JumpIfEqual {237}
	089 Move W10, [X0+224]
	090 Move X20, [X9+120]
	091 Compare W10, 0
	092 JumpIfNotEqual {99}
	093 Call 0x1C17DFC
	094 Move X8, [X22]
	095 Move X8, [X8+184]
	096 Move X8, [X8+24]
	097 Compare X8, 0
	098 JumpIfEqual {237}
	099 Move W9, [X8+24]
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Add X8, X8, X23
	102 Move X8, [X8+32]
	103 Compare X8, 0
	104 JumpIfEqual {237}
	105 Compare X20, 0
	106 JumpIfEqual {125}
	107 Move X8, [X8+232]
	108 Compare X8, 0
	109 JumpIfEqual {237}
	110 Move X8, [X8+120]
	111 Compare X8, 0
	112 JumpIfEqual {237}
	113 Move X9, 0xF73000
	114 Move X9, [X9+928]
	115 Move X0, [X9]
	116 Move W9, [X8+136]
	117 Move W8, [X8+140]
	118 Move W10, [X0+224]
	119 Or W20, W9, W8
	120 Compare W10, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Move W0, W20
	124 Call LTGUI.destroy, X0
	125 Move X24, 0xF47000
	126 Move X24, [X24+1432]
	127 Move X20, [X8+88]
	128 Move X0, [X24]
	129 Move W9, [X0+224]
	130 Compare W9, 0
	131 JumpIfNotEqual {133}
	132 Call 0x1C17DFC
	133 Move X0, X20
	134 Move X1, X31
	135 Move X2, X31
	136 Call Object.op_Inequality, X0, X1
	137 Move TEMP, X0
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {211}
	141 Move X0, [X22]
	142 Move W8, [X0+224]
	143 Compare W8, 0
	144 JumpIfNotEqual {147}
	145 Call 0x1C17DFC
	146 Move X0, [X22]
	147 Move X8, [X0+184]
	148 Move X8, [X8+24]
	149 Compare X8, 0
	150 JumpIfEqual {237}
	151 Move W9, [X8+24]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Add X8, X8, X23
	154 Move X8, [X8+32]
	155 Compare X8, 0
	156 JumpIfEqual {237}
	157 Move X0, [X8+88]
	158 Compare X0, 0
	159 JumpIfEqual {237}
	160 Move X1, X31
	161 Call Component.get_gameObject, X0
	162 Move X9, [X22]
	163 Move X8, [X24]
	164 Move X21, X0
	165 Move X9, [X9+184]
	166 Move W10, [X8+224]
	167 Move X20, [X9+72]
	168 Compare W10, 0
	169 JumpIfNotEqual {172}
	170 Move X0, X8
	171 Call 0x1C17DFC
	172 Move X0, X21
	173 Move X1, X20
	174 Move X2, X31
	175 Call Object.op_Inequality, X0, X1
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfNotEqual {211}
	180 Move X0, [X22]
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {186}
	184 Call 0x1C17DFC
	185 Move X0, [X22]
	186 Move X8, [X0+184]
	187 Move X8, [X8+24]
	188 Compare X8, 0
	189 JumpIfEqual {237}
	190 Move W9, [X8+24]
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Add X8, X8, X23
	193 Move X8, [X8+32]
	194 Compare X8, 0
	195 JumpIfEqual {237}
	196 Move X0, [X8+88]
	197 Compare X0, 0
	198 JumpIfEqual {237}
	199 Move X1, X31
	200 Call Component.get_gameObject, X0
	201 Move X8, [X24]
	202 Move X20, X0
	203 Move W9, [X8+224]
	204 Compare W9, 0
	205 JumpIfNotEqual {208}
	206 Move X0, X8
	207 Call 0x1C17DFC
	208 Move X0, X20
	209 Move X1, X31
	210 Call Object.Destroy, X0
	211 Move X0, [X22]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {217}
	215 Call 0x1C17DFC
	216 Move X0, [X22]
	217 Move X8, [X0+184]
	218 Add W10, W19, 1
	219 Move W9, [X8+56]
	220 Move [X8+132], W19
	221 NotImplemented "Instruction CMP not yet implemented."
	222 Move W9, [X0+224]
	223 Compare W9, 0
	224 JumpIfNotEqual {228}
	225 Call 0x1C17DFC
	226 Move X8, [X22]
	227 Move X8, [X8+184]
	228 Move [X8+132], W31
	229 Move X20, [X31+48]
	230 Move X19, [X31+56]
	231 Move X22, [X31+32]
	232 Move X21, [X31+40]
	233 Move X24, [X31+16]
	234 Move X23, [X31+24]
	235 Move X30, [X31+64]
	236 Return 
	237 Call 0x1C17F20
	238 Call 0x1C17F28

Method: UnityEngine.Vector3[] add(UnityEngine.Vector3[] a, UnityEngine.Vector3 b)

Disassembly:
	0x031ADCE0 LDR X8, [X8 + 0x18]
	0x031ADCE4 CBZ X8, 0x31ADE24
	0x031ADCE8 LDR W9, [X8 + 0x18]
	0x031ADCEC CMP W23, W9
	0x031ADCF0 B.CS 0x31ADE28
	0x031ADCF4 SXTW X26, W23
	0x031ADCF8 ADD X9, X8, X26, 0x3, LSL
	0x031ADCFC LDR X9, [X9 + 0x20]
	0x031ADD00 CBZ X9, 0x31ADE24
	0x031ADD04 LDRB W9, [X9 + 0x10]
	0x031ADD08 CBZ W9, 0x31ADDF0
	0x031ADD0C LDR W9, [X0 + 0xE0]
	0x031ADD10 CBNZ W9, 0x31ADD28
	0x031ADD14 BL 0x1C16DFC
	0x031ADD18 LDR X8, [X24]
	0x031ADD1C LDR X8, [X8 + 0xB8]
	0x031ADD20 LDR X8, [X8 + 0x18]
	0x031ADD24 CBZ X8, 0x31ADE24
	0x031ADD28 LDR W9, [X8 + 0x18]
	0x031ADD2C CMP W23, W9
	0x031ADD30 B.CS 0x31ADE28
	0x031ADD34 ADD X8, X8, X26, 0x3, LSL
	0x031ADD38 LDR X8, [X8 + 0x20]
	0x031ADD3C CBZ X8, 0x31ADE24
	0x031ADD40 LDR X0, [X22]
	0x031ADD44 LDR X21, [X8 + 0x58]
	0x031ADD48 LDR W9, [X0 + 0xE0]
	0x031ADD4C CBNZ W9, 0x31ADD54
	0x031ADD50 BL 0x1C16DFC
	0x031ADD54 MOV X0, X21
	0x031ADD58 MOV X1, X20
	0x031ADD5C MOV X2, X31
	0x031ADD60 BL 0x3C3883C
	0x031ADD64 TBZ X0, 0x0, 0x31ADDF0
	0x031ADD68 LDR X0, [X24]
	0x031ADD6C LDR W8, [X0 + 0xE0]
	0x031ADD70 CBNZ W8, 0x31ADD7C
	0x031ADD74 BL 0x1C16DFC
	0x031ADD78 LDR X0, [X24]
	0x031ADD7C LDR X8, [X0 + 0xB8]
	0x031ADD80 LDR X8, [X8 + 0x18]
	0x031ADD84 CBZ X8, 0x31ADE24
	0x031ADD88 LDR W9, [X8 + 0x18]
	0x031ADD8C CMP W23, W9
	0x031ADD90 B.CS 0x31ADE28
	0x031ADD94 CBZ X19, 0x31ADE24
	0x031ADD98 ADD X8, X8, X26, 0x3, LSL
	0x031ADD9C LDR W10, [X19 + 0x1C]
	0x031ADDA0 LDR X1, [X8 + 0x20]
	0x031ADDA4 LDR X8, [X19 + 0x10]
	0x031ADDA8 LDR X9, [X25]
	0x031ADDAC ADD W10, W10, 0x1
	0x031ADDB0 STR W10, [X19 + 0x1C]
	0x031ADDB4 CBZ X8, 0x31ADE24
	0x031ADDB8 LDRSW X10, [X19 + 0x18]
	0x031ADDBC LDR W11, [X8 + 0x18]
	0x031ADDC0 CMP W10, W11
	0x031ADDC4 B.CS 0x31ADDDC
	0x031ADDC8 ADD W9, W10, 0x1
	0x031ADDCC ADD X8, X8, X10, 0x3, LSL
	0x031ADDD0 STR W9, [X19 + 0x18]
	0x031ADDD4 STR X1, [X8 + 0x20]
	0x031ADDD8 B 0x31ADDF0
	0x031ADDDC LDR X8, [X9 + 0x20]
	0x031ADDE0 MOV X0, X19
	0x031ADDE4 LDR X8, [X8 + 0xC0]
	0x031ADDE8 LDR X2, [X8 + 0x70]
	0x031ADDEC BL 0x301BF90
	0x031ADDF0 ADD W23, W23, 0x1
	0x031ADDF4 B 0x31ADCA8
	0x031ADDF8 CBZ X19, 0x31ADE24
	0x031ADDFC ADRP X8, 0xF72000
	0x031ADE00 LDR X8, [X8 + 0x3B0]
	0x031ADE04 MOV X0, X19
	0x031ADE08 LDP X20, X19, [X31 + 0x40]
	0x031ADE0C LDP X22, X21, [X31 + 0x30]
	0x031ADE10 LDR X1, [X8]
	0x031ADE14 LDP X24, X23, [X31 + 0x20]
	0x031ADE18 LDP X26, X25, [X31 + 0x10]
	0x031ADE1C LDR X30, [X31], #0x50
	0x031ADE20 B 0x301DDC4
	0x031ADE24 BL 0x1C16F20
	0x031ADE28 BL 0x1C16F28
	0x031ADE2C STP X30, X21, [X31 - 0x20]!
	0x031ADE30 STP X20, X19, [X31 + 0x10]
	0x031ADE34 ADRP X20, 0x122E000
	0x031ADE38 ADRP X21, 0xF48000
	0x031ADE3C LDRB W8, [X20 + 0xE62]
	0x031ADE40 LDR X21, [X21 + 0x5A8]
	0x031ADE44 MOV W19, W1
	0x031ADE48 TBNZ X8, 0x0, 0x31ADE60

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D8
	003 Move [X31+40], X30
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X20, 0x122F000
	009 Move W8, [X20+3669]
	010 Move V8, V2
	011 Move X19, X0
	012 Move [X31], D1
	013 Move [X31+16], D0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xF49000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0xF49000
	022 Move X0, [X0+2480]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3669], W8
	026 Compare X19, 0
	027 JumpIfEqual {100}
	028 Move X8, 0xF49000
	029 Move X8, [X8+2480]
	030 Move W1, [X19+24]
	031 Move X21, 0xF49000
	032 Move X0, [X8]
	033 Move X21, [X21+1448]
	034 Call 0x1C17D6C
	035 Move X8, [X21]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {43}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X8, [X21]
	043 Move V1, [X31]
	044 Move V0, [X31+16]
	045 Move X9, [X8+184]
	046 Move W22, 12
	047 Move V0.S[1], V1.S[0]
	048 Move [X31+1], V0
	049 Move [X9+96], W31
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {56}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 Move X8, [X21]
	056 Move X9, [X8+184]
	057 Move W10, [X19+24]
	058 Move W9, [X9+96]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move W11, [X8+224]
	061 Compare W11, 0
	062 JumpIfNotEqual {69}
	063 Move X0, X8
	064 Call 0x1C17DFC
	065 Move X8, [X21]
	066 Move W10, [X19+24]
	067 Move X8, [X8+184]
	068 Move W9, [X8+96]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Compare X20, 0
	071 JumpIfEqual {100}
	072 Move W10, [X20+24]
	073 Move X8, W9
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction MADD not yet implemented."
	076 Move V0, [X9+32]
	077 Move V1, [X9+40]
	078 Move V2, [X31+1]
	079 NotImplemented "Instruction NOP not yet implemented."
	080 NotImplemented "Instruction MADD not yet implemented."
	081 Add S1, S8, S1
	082 Add V0, V2, V0
	083 Move [X8+32], D0
	084 Move [X8+40], S1
	085 Move X8, [X21]
	086 Move X9, [X8+184]
	087 Move W10, [X9+96]
	088 Add W10, W10, 1
	089 Move [X9+96], W10
	090 Move X0, X20
	091 Move X20, [X31+64]
	092 Move X19, [X31+72]
	093 Move X22, [X31+48]
	094 Move X21, [X31+56]
	095 Move X30, [X31+40]
	096 Move V8, [X31+32]
	097 Add X31, X31, 80
	098 Return X0
	099 Call 0x1C17F28
	100 Call 0x1C17F20

Method: System.Single closestRot(System.Single from, System.Single to)

Disassembly:
	0x031ADE4C ADRP X0, 0xF48000
	0x031ADE50 LDR X0, [X0 + 0x5A8]
	0x031ADE54 BL 0x1C16CF4
	0x031ADE58 MOVZ W8, 0x1
	0x031ADE5C STRB W8, [X20 + 0xE62]
	0x031ADE60 LDR X0, [X21]
	0x031ADE64 LDR W8, [X0 + 0xE0]
	0x031ADE68 CBNZ W8, 0x31ADE70
	0x031ADE6C BL 0x1C16DFC
	0x031ADE70 MOV W0, W19
	0x031ADE74 LDP X20, X19, [X31 + 0x10]
	0x031ADE78 LDP X30, X21, [X31], #0x20
	0x031ADE7C B 0x31ADE80
	0x031ADE80 STR X30, [X31 - 0x30]!
	0x031ADE84 STP X22, X21, [X31 + 0x10]
	0x031ADE88 STP X20, X19, [X31 + 0x20]
	0x031ADE8C ADRP X21, 0x122E000
	0x031ADE90 ADRP X20, 0xF48000
	0x031ADE94 LDRB W8, [X21 + 0xE63]
	0x031ADE98 LDR X20, [X20 + 0x5A8]

ISIL:
	001 Move W8, 0xC3B40000
	002 Move W9, 0x43B40000
	003 Move S2, W8
	004 Add S4, S1, S2
	005 Move S2, W9
	006 Move S3, W31
	007 Add S2, S1, S2
	008 NotImplemented "Instruction FABD not yet implemented."
	009 Add S3, S4, S3
	010 NotImplemented "Instruction FABD not yet implemented."
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 NotImplemented "Instruction FABD not yet implemented."
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Move V0, V1
	015 Return V0
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 NotImplemented "Instruction FCSEL not yet implemented."
	018 Return V0

Method: System.Void cancelAll()

Disassembly:
	0x031ADE9C MOV W19, W0
	0x031ADEA0 TBNZ X8, 0x0, 0x31ADEB8
	0x031ADEA4 ADRP X0, 0xF48000
	0x031ADEA8 LDR X0, [X0 + 0x5A8]
	0x031ADEAC BL 0x1C16CF4
	0x031ADEB0 MOVZ W8, 0x1
	0x031ADEB4 STRB W8, [X21 + 0xE63]
	0x031ADEB8 LDR X0, [X20]
	0x031ADEBC LDR W8, [X0 + 0xE0]
	0x031ADEC0 CBNZ W8, 0x31ADECC
	0x031ADEC4 BL 0x1C16DFC
	0x031ADEC8 LDR X0, [X20]
	0x031ADECC LDR X8, [X0 + 0xB8]
	0x031ADED0 LDR X8, [X8 + 0x18]
	0x031ADED4 CBZ X8, 0x31ADF60
	0x031ADED8 LDR W9, [X8 + 0x18]
	0x031ADEDC AND W21, W19, 0xFFFF
	0x031ADEE0 CMP W21, W9
	0x031ADEE4 B.CS 0x31ADF64
	0x031ADEE8 MOV W22, W21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x122F000
	005 Move X20, 0xF49000
	006 Move W8, [X19+3670]
	007 Move X20, [X20+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF49000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+3670], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move W0, W31
	025 Move X30, [X31+32]

Method: System.Void cancelAll(System.Boolean callComplete)

Disassembly:
	0x031ADEEC ADD X9, X8, X22, 0x3, LSL
	0x031ADEF0 LDR X9, [X9 + 0x20]
	0x031ADEF4 CBZ X9, 0x31ADF60
	0x031ADEF8 LDR W9, [X9 + 0x3C]
	0x031ADEFC SBFM W10, W19, 0x10, 0x1F
	0x031ADF00 CMP X9, W10, SXTW
	0x031ADF04 B.NE 0x31ADF50
	0x031ADF08 LDR W9, [X0 + 0xE0]
	0x031ADF0C CBNZ W9, 0x31ADF24
	0x031ADF10 BL 0x1C16DFC
	0x031ADF14 LDR X8, [X20]
	0x031ADF18 LDR X8, [X8 + 0xB8]
	0x031ADF1C LDR X8, [X8 + 0x18]
	0x031ADF20 CBZ X8, 0x31ADF60
	0x031ADF24 LDR W9, [X8 + 0x18]
	0x031ADF28 CMP W21, W9
	0x031ADF2C B.CS 0x31ADF64
	0x031ADF30 ADD X8, X8, X22, 0x3, LSL
	0x031ADF34 LDR X0, [X8 + 0x20]
	0x031ADF38 CBZ X0, 0x31ADF60
	0x031ADF3C LDP X20, X19, [X31 + 0x20]
	0x031ADF40 LDP X22, X21, [X31 + 0x10]
	0x031ADF44 MOV X1, X31
	0x031ADF48 LDR X30, [X31], #0x30
	0x031ADF4C B 0x31C5080
	0x031ADF50 LDP X20, X19, [X31 + 0x20]
	0x031ADF54 LDP X22, X21, [X31 + 0x10]
	0x031ADF58 LDR X30, [X31], #0x30
	0x031ADF5C RET
	0x031ADF60 BL 0x1C16F20
	0x031ADF64 BL 0x1C16F28
	0x031ADF68 STR X30, [X31 - 0x40]!
	0x031ADF6C STP X24, X23, [X31 + 0x10]
	0x031ADF70 STP X22, X21, [X31 + 0x20]
	0x031ADF74 STP X20, X19, [X31 + 0x30]
	0x031ADF78 ADRP X20, 0x122E000
	0x031ADF7C LDRB W8, [X20 + 0xE64]
	0x031ADF80 MOV X19, X0
	0x031ADF84 TBNZ X8, 0x0, 0x31ADFA8
	0x031ADF88 ADRP X0, 0xF48000
	0x031ADF8C LDR X0, [X0 + 0x5A8]
	0x031ADF90 BL 0x1C16CF4
	0x031ADF94 ADRP X0, 0xF46000
	0x031ADF98 LDR X0, [X0 + 0x598]
	0x031ADF9C BL 0x1C16CF4
	0x031ADFA0 MOVZ W8, 0x1
	0x031ADFA4 STRB W8, [X20 + 0xE64]
	0x031ADFA8 CBZ X19, 0x31AE0B0
	0x031ADFAC ADRP X21, 0xF48000
	0x031ADFB0 ADRP X22, 0xF46000
	0x031ADFB4 LDR X21, [X21 + 0x5A8]
	0x031ADFB8 LDR X22, [X22 + 0x598]
	0x031ADFBC MOV X0, X19
	0x031ADFC0 MOV X1, X31
	0x031ADFC4 BL 0x3C356F8
	0x031ADFC8 MOV X19, X0
	0x031ADFCC MOV W23, W31
	0x031ADFD0 LDR X0, [X21]
	0x031ADFD4 LDR W8, [X0 + 0xE0]
	0x031ADFD8 CBNZ W8, 0x31ADFE4
	0x031ADFDC BL 0x1C16DFC
	0x031ADFE0 LDR X0, [X21]
	0x031ADFE4 LDR X8, [X0 + 0xB8]
	0x031ADFE8 LDR W9, [X8 + 0x38]
	0x031ADFEC CMP W23, W9
	0x031ADFF0 B.GT 0x31AE09C
	0x031ADFF4 LDR W9, [X0 + 0xE0]
	0x031ADFF8 CBNZ W9, 0x31AE008
	0x031ADFFC BL 0x1C16DFC
	0x031AE000 LDR X8, [X21]
	0x031AE004 LDR X8, [X8 + 0xB8]
	0x031AE008 LDR X8, [X8 + 0x18]
	0x031AE00C CBZ X8, 0x31AE0B0
	0x031AE010 LDR W9, [X8 + 0x18]
	0x031AE014 CMP W23, W9
	0x031AE018 B.CS 0x31AE0B4
	0x031AE01C SXTW X24, W23
	0x031AE020 ADD X8, X8, X24, 0x3, LSL
	0x031AE024 LDR X8, [X8 + 0x20]
	0x031AE028 CBZ X8, 0x31AE0B0
	0x031AE02C LDR X0, [X22]
	0x031AE030 LDR X20, [X8 + 0x58]
	0x031AE034 LDR W9, [X0 + 0xE0]
	0x031AE038 CBNZ W9, 0x31AE040
	0x031AE03C BL 0x1C16DFC
	0x031AE040 MOV X0, X20
	0x031AE044 MOV X1, X19
	0x031AE048 MOV X2, X31
	0x031AE04C BL 0x3C3883C
	0x031AE050 TBZ X0, 0x0, 0x31AE094
	0x031AE054 LDR X0, [X21]
	0x031AE058 LDR W8, [X0 + 0xE0]
	0x031AE05C CBNZ W8, 0x31AE068
	0x031AE060 BL 0x1C16DFC
	0x031AE064 LDR X0, [X21]
	0x031AE068 LDR X8, [X0 + 0xB8]
	0x031AE06C LDR X8, [X8 + 0x18]
	0x031AE070 CBZ X8, 0x31AE0B0
	0x031AE074 LDR W9, [X8 + 0x18]
	0x031AE078 CMP W23, W9
	0x031AE07C B.CS 0x31AE0B4
	0x031AE080 ADD X8, X8, X24, 0x3, LSL
	0x031AE084 LDR X0, [X8 + 0x20]
	0x031AE088 CBZ X0, 0x31AE0B0
	0x031AE08C MOV X1, X31
	0x031AE090 BL 0x31C5080
	0x031AE094 ADD W23, W23, 0x1
	0x031AE098 B 0x31ADFD0
	0x031AE09C LDP X20, X19, [X31 + 0x30]
	0x031AE0A0 LDP X22, X21, [X31 + 0x20]
	0x031AE0A4 LDP X24, X23, [X31 + 0x10]
	0x031AE0A8 LDR X30, [X31], #0x40
	0x031AE0AC RET
	0x031AE0B0 BL 0x1C16F20

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122F000
	009 Move X22, 0xF49000
	010 Move W8, [X20+3671]
	011 Move X22, [X22+1448]
	012 Move W19, W0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF49000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move X0, 0xF47000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3671], W8
	025 Move X0, [X22]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X23, 0xF47000
	031 Move X23, [X23+1432]
	032 Call LeanTween.init
	033 Move W20, W31
	034 Move X0, [X22]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X22]
	040 Move X8, [X0+184]
	041 Move W9, [X8+56]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {49}
	046 Call 0x1C17DFC
	047 Move X8, [X22]
	048 Move X8, [X8+184]
	049 Move X8, [X8+24]
	050 Compare X8, 0
	051 JumpIfEqual {140}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X24, W20
	055 Add X8, X8, X24
	056 Move X8, [X8+32]
	057 Compare X8, 0
	058 JumpIfEqual {140}
	059 Move X0, [X23]
	060 Move X21, [X8+88]
	061 Move W9, [X0+224]
	062 Compare W9, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X21
	066 Move X1, X31
	067 Move X2, X31
	068 Call Object.op_Inequality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {131}
	073 Move TEMP, X19
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {124}
	077 Move X0, [X22]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X22]
	083 Move X8, [X0+184]
	084 Move X8, [X8+24]
	085 Compare X8, 0
	086 JumpIfEqual {140}
	087 Move W9, [X8+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Add X9, X8, X24
	090 Move X9, [X9+32]
	091 Compare X9, 0
	092 JumpIfEqual {140}
	093 Move X9, [X9+232]
	094 Compare X9, 0
	095 JumpIfEqual {140}
	096 Move X9, [X9+192]
	097 Compare X9, 0
	098 JumpIfEqual {124}
	099 Move W9, [X0+224]
	100 Compare W9, 0
	101 JumpIfNotEqual {108}
	102 Call 0x1C17DFC
	103 Move X8, [X22]
	104 Move X8, [X8+184]
	105 Move X8, [X8+24]
	106 Compare X8, 0
	107 JumpIfEqual {140}
	108 Move W9, [X8+24]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Add X8, X8, X24
	111 Move X8, [X8+32]
	112 Compare X8, 0
	113 JumpIfEqual {140}
	114 Move X8, [X8+232]
	115 Compare X8, 0
	116 JumpIfEqual {140}
	117 Move X8, [X8+192]
	118 Compare X8, 0
	119 JumpIfEqual {140}
	120 Move X9, [X8+24]
	121 Move X0, [X8+64]
	122 Move X1, [X8+40]
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move X0, [X22]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move W0, W20
	130 Call LeanTween.removeTween, X0
	131 Add W20, W20, 1
	132 Move X20, [X31+48]
	133 Move X19, [X31+56]
	134 Move X22, [X31+32]
	135 Move X21, [X31+40]
	136 Move X24, [X31+16]
	137 Move X23, [X31+24]
	138 Move X30, [X31+64]
	139 Return 
	140 Call 0x1C17F20
	141 Call 0x1C17F28

Method: System.Void cancel(UnityEngine.GameObject gameObject)

Disassembly:
	0x031AE0B4 BL 0x1C16F28
	0x031AE0B8 STR X30, [X31 - 0x20]!
	0x031AE0BC STP X20, X19, [X31 + 0x10]
	0x031AE0C0 ADRP X20, 0x122D000
	0x031AE0C4 ADRP X19, 0xF47000
	0x031AE0C8 LDRB W8, [X20 + 0xE65]
	0x031AE0CC LDR X19, [X19 + 0x5A8]
	0x031AE0D0 TBNZ X8, 0x0, 0x31AE0E8
	0x031AE0D4 ADRP X0, 0xF47000
	0x031AE0D8 LDR X0, [X0 + 0x5A8]
	0x031AE0DC BL 0x1C16CF4
	0x031AE0E0 MOVZ W8, 0x1
	0x031AE0E4 STRB W8, [X20 + 0xE65]
	0x031AE0E8 LDR X0, [X19]
	0x031AE0EC LDR W8, [X0 + 0xE0]
	0x031AE0F0 CBNZ W8, 0x31AE0F8
	0x031AE0F4 BL 0x1C16DFC
	0x031AE0F8 BL 0x31AB9B0
	0x031AE0FC MOV W20, W31
	0x031AE100 LDR X0, [X19]
	0x031AE104 LDR W8, [X0 + 0xE0]
	0x031AE108 CBNZ W8, 0x31AE114

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x122E000
	006 Move X21, 0xF48000
	007 Move W8, [X20+3672]
	008 Move X21, [X21+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF48000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3672], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W1, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]

Method: System.Void cancel(UnityEngine.GameObject gameObject, System.Boolean callOnComplete)

Disassembly:
	0x031AE10C BL 0x1C16DFC
	0x031AE110 LDR X0, [X19]
	0x031AE114 LDR X8, [X0 + 0xB8]
	0x031AE118 LDR W9, [X8 + 0x38]
	0x031AE11C CMP W20, W9
	0x031AE120 B.GT 0x31AE168
	0x031AE124 LDR W9, [X0 + 0xE0]
	0x031AE128 CBNZ W9, 0x31AE138
	0x031AE12C BL 0x1C16DFC
	0x031AE130 LDR X8, [X19]
	0x031AE134 LDR X8, [X8 + 0xB8]
	0x031AE138 LDR X8, [X8 + 0x18]
	0x031AE13C CBZ X8, 0x31AE174
	0x031AE140 LDR W9, [X8 + 0x18]
	0x031AE144 CMP W20, W9
	0x031AE148 B.CS 0x31AE178
	0x031AE14C ADD X8, X8, W20, 0x3, SXTW
	0x031AE150 LDR X0, [X8 + 0x20]
	0x031AE154 CBZ X0, 0x31AE174
	0x031AE158 MOV X1, X31
	0x031AE15C BL 0x31C5080
	0x031AE160 ADD W20, W20, 0x1
	0x031AE164 B 0x31AE100
	0x031AE168 LDP X20, X19, [X31 + 0x10]
	0x031AE16C LDR X30, [X31], #0x20
	0x031AE170 RET
	0x031AE174 BL 0x1C16F20
	0x031AE178 BL 0x1C16F28
	0x031AE17C STR X30, [X31 - 0x20]!
	0x031AE180 STP X20, X19, [X31 + 0x10]
	0x031AE184 ADRP X20, 0x122D000
	0x031AE188 ADRP X19, 0xF47000
	0x031AE18C LDRB W8, [X20 + 0xE66]
	0x031AE190 LDR X19, [X19 + 0x5A8]
	0x031AE194 TBNZ X8, 0x0, 0x31AE1AC
	0x031AE198 ADRP X0, 0xF47000
	0x031AE19C LDR X0, [X0 + 0x5A8]
	0x031AE1A0 BL 0x1C16CF4
	0x031AE1A4 MOVZ W8, 0x1
	0x031AE1A8 STRB W8, [X20 + 0xE66]
	0x031AE1AC LDR X0, [X19]
	0x031AE1B0 LDR W8, [X0 + 0xE0]
	0x031AE1B4 CBNZ W8, 0x31AE1BC
	0x031AE1B8 BL 0x1C16DFC
	0x031AE1BC BL 0x31AB9B0
	0x031AE1C0 MOV W20, W31
	0x031AE1C4 LDR X0, [X19]
	0x031AE1C8 LDR W8, [X0 + 0xE0]
	0x031AE1CC CBNZ W8, 0x31AE1D8
	0x031AE1D0 BL 0x1C16DFC
	0x031AE1D4 LDR X0, [X19]
	0x031AE1D8 LDR X8, [X0 + 0xB8]
	0x031AE1DC LDR W9, [X8 + 0x38]
	0x031AE1E0 CMP W20, W9
	0x031AE1E4 B.GT 0x31AE22C
	0x031AE1E8 LDR W9, [X0 + 0xE0]
	0x031AE1EC CBNZ W9, 0x31AE1FC
	0x031AE1F0 BL 0x1C16DFC
	0x031AE1F4 LDR X8, [X19]
	0x031AE1F8 LDR X8, [X8 + 0xB8]
	0x031AE1FC LDR X8, [X8 + 0x18]
	0x031AE200 CBZ X8, 0x31AE238
	0x031AE204 LDR W9, [X8 + 0x18]
	0x031AE208 CMP W20, W9
	0x031AE20C B.CS 0x31AE23C
	0x031AE210 ADD X8, X8, W20, 0x3, SXTW
	0x031AE214 LDR X0, [X8 + 0x20]
	0x031AE218 CBZ X0, 0x31AE238
	0x031AE21C MOV X1, X31
	0x031AE220 BL 0x31C509C
	0x031AE224 ADD W20, W20, 0x1
	0x031AE228 B 0x31AE1C4
	0x031AE22C LDP X20, X19, [X31 + 0x10]
	0x031AE230 LDR X30, [X31], #0x20
	0x031AE234 RET
	0x031AE238 BL 0x1C16F20
	0x031AE23C BL 0x1C16F28
	0x031AE240 STP X30, X21, [X31 - 0x20]!
	0x031AE244 STP X20, X19, [X31 + 0x10]
	0x031AE248 ADRP X20, 0x122D000
	0x031AE24C ADRP X21, 0xF47000
	0x031AE250 LDRB W8, [X20 + 0xE67]
	0x031AE254 LDR X21, [X21 + 0x5A8]
	0x031AE258 MOV W19, W1
	0x031AE25C TBNZ X8, 0x0, 0x31AE274
	0x031AE260 ADRP X0, 0xF47000
	0x031AE264 LDR X0, [X0 + 0x5A8]
	0x031AE268 BL 0x1C16CF4
	0x031AE26C MOVZ W8, 0x1
	0x031AE270 STRB W8, [X20 + 0xE67]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x122E000
	010 Move X23, 0xF48000
	011 Move W8, [X21+3673]
	012 Move X23, [X23+1448]
	013 Move W19, W1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF48000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move X0, 0xF46000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3673], W8
	027 Move X0, [X23]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.init
	033 Compare X20, 0
	034 JumpIfEqual {114}
	035 Move X24, 0xF46000
	036 Move X24, [X24+1432]
	037 Move X0, X20
	038 Move X1, X31
	039 Call GameObject.get_transform, X0
	040 Move X20, X0
	041 Move W21, W31
	042 Move X0, [X23]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X23]
	048 Move X8, [X0+184]
	049 Move W9, [X8+56]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move W9, [X0+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {57}
	054 Call 0x1C17DFC
	055 Move X8, [X23]
	056 Move X8, [X8+184]
	057 Move X8, [X8+24]
	058 Compare X8, 0
	059 JumpIfEqual {114}
	060 Move W9, [X8+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add X8, X8, W21
	063 Move X25, [X8+32]
	064 Compare X25, 0
	065 JumpIfEqual {104}
	066 Move W8, [X25+16]
	067 Compare W8, 0
	068 JumpIfEqual {104}
	069 Move X0, [X24]
	070 Move X22, [X25+88]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X22
	076 Move X1, X20
	077 Move X2, X31
	078 Call Object.op_Equality, X0, X1
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {104}
	083 Move TEMP, X19
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {97}
	087 Move X8, [X25+232]
	088 Compare X8, 0
	089 JumpIfEqual {114}
	090 Move X8, [X8+192]
	091 Compare X8, 0
	092 JumpIfEqual {97}
	093 Move X9, [X8+24]
	094 Move X0, [X8+64]
	095 Move X1, [X8+40]
	096 NotImplemented "Instruction BLR not yet implemented."
	097 Move X0, [X23]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move W0, W21
	103 Call LeanTween.removeTween, X0
	104 Add W21, W21, 1
	105 Move X20, [X31+48]
	106 Move X19, [X31+56]
	107 Move X22, [X31+32]
	108 Move X21, [X31+40]
	109 Move X24, [X31+16]
	110 Move X23, [X31+24]
	111 Move X30, [X31+64]
	112 Move X25, [X31+72]
	113 Return 
	114 Call 0x1C17F20
	115 Call 0x1C17F28

Method: System.Void cancel(UnityEngine.RectTransform rect)

Disassembly:
	0x031AE274 LDR X0, [X21]
	0x031AE278 LDR W8, [X0 + 0xE0]
	0x031AE27C CBNZ W8, 0x31AE284
	0x031AE280 BL 0x1C16DFC
	0x031AE284 MOV W0, W19
	0x031AE288 LDP X20, X19, [X31 + 0x10]
	0x031AE28C LDP X30, X21, [X31], #0x20
	0x031AE290 B 0x31AE294
	0x031AE294 STR X30, [X31 - 0x30]!
	0x031AE298 STP X22, X21, [X31 + 0x10]
	0x031AE29C STP X20, X19, [X31 + 0x20]
	0x031AE2A0 ADRP X21, 0x122D000
	0x031AE2A4 ADRP X20, 0xF47000
	0x031AE2A8 LDRB W8, [X21 + 0xE68]
	0x031AE2AC LDR X20, [X20 + 0x5A8]
	0x031AE2B0 MOV W19, W0
	0x031AE2B4 TBNZ X8, 0x0, 0x31AE2CC
	0x031AE2B8 ADRP X0, 0xF47000
	0x031AE2BC LDR X0, [X0 + 0x5A8]
	0x031AE2C0 BL 0x1C16CF4
	0x031AE2C4 MOVZ W8, 0x1
	0x031AE2C8 STRB W8, [X21 + 0xE68]
	0x031AE2CC LDR X0, [X20]
	0x031AE2D0 LDR W8, [X0 + 0xE0]
	0x031AE2D4 CBNZ W8, 0x31AE2E0
	0x031AE2D8 BL 0x1C16DFC
	0x031AE2DC LDR X0, [X20]
	0x031AE2E0 LDR X8, [X0 + 0xB8]
	0x031AE2E4 LDR X8, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122E000
	005 Move W8, [X20+3674]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF48000
	012 Move X0, [X0+1448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3674], W8
	016 Compare X19, 0
	017 JumpIfEqual {37}
	018 Move X20, 0xF48000
	019 Move X20, [X20+1448]
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_gameObject, X0
	023 Move X8, [X20]
	024 Move X19, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move W1, W31
	034 Move X30, [X31+32]
	035 Call LeanTween.cancel, X0, X1
	036 Return 
	037 Call 0x1C17F20

Method: System.Void cancel(UnityEngine.GameObject gameObject, System.Int32 uniqueId, System.Boolean callOnComplete = False)

Disassembly:
	0x031AE2E8 CBZ X8, 0x31AE374
	0x031AE2EC LDR W9, [X8 + 0x18]
	0x031AE2F0 AND W21, W19, 0xFFFF
	0x031AE2F4 CMP W21, W9
	0x031AE2F8 B.CS 0x31AE378
	0x031AE2FC MOV W22, W21
	0x031AE300 ADD X9, X8, X22, 0x3, LSL
	0x031AE304 LDR X9, [X9 + 0x20]
	0x031AE308 CBZ X9, 0x31AE374
	0x031AE30C LDR W9, [X9 + 0x3C]
	0x031AE310 SBFM W10, W19, 0x10, 0x1F
	0x031AE314 CMP X9, W10, SXTW
	0x031AE318 B.NE 0x31AE364
	0x031AE31C LDR W9, [X0 + 0xE0]
	0x031AE320 CBNZ W9, 0x31AE338
	0x031AE324 BL 0x1C16DFC
	0x031AE328 LDR X8, [X20]
	0x031AE32C LDR X8, [X8 + 0xB8]
	0x031AE330 LDR X8, [X8 + 0x18]
	0x031AE334 CBZ X8, 0x31AE374
	0x031AE338 LDR W9, [X8 + 0x18]
	0x031AE33C CMP W21, W9
	0x031AE340 B.CS 0x31AE378
	0x031AE344 ADD X8, X8, X22, 0x3, LSL
	0x031AE348 LDR X0, [X8 + 0x20]
	0x031AE34C CBZ X0, 0x31AE374
	0x031AE350 LDP X20, X19, [X31 + 0x20]
	0x031AE354 LDP X22, X21, [X31 + 0x10]
	0x031AE358 MOV X1, X31
	0x031AE35C LDR X30, [X31], #0x30
	0x031AE360 B 0x31C509C
	0x031AE364 LDP X20, X19, [X31 + 0x20]
	0x031AE368 LDP X22, X21, [X31 + 0x10]
	0x031AE36C LDR X30, [X31], #0x30
	0x031AE370 RET
	0x031AE374 BL 0x1C16F20
	0x031AE378 BL 0x1C16F28
	0x031AE37C STR X30, [X31 - 0x40]!
	0x031AE380 STP X24, X23, [X31 + 0x10]
	0x031AE384 STP X22, X21, [X31 + 0x20]
	0x031AE388 STP X20, X19, [X31 + 0x30]
	0x031AE38C ADRP X20, 0x122D000
	0x031AE390 LDRB W8, [X20 + 0xE69]
	0x031AE394 MOV X19, X0
	0x031AE398 TBNZ X8, 0x0, 0x31AE3BC
	0x031AE39C ADRP X0, 0xF47000
	0x031AE3A0 LDR X0, [X0 + 0x5A8]
	0x031AE3A4 BL 0x1C16CF4
	0x031AE3A8 ADRP X0, 0xF45000
	0x031AE3AC LDR X0, [X0 + 0x598]
	0x031AE3B0 BL 0x1C16CF4
	0x031AE3B4 MOVZ W8, 0x1
	0x031AE3B8 STRB W8, [X20 + 0xE69]
	0x031AE3BC CBZ X19, 0x31AE4C4
	0x031AE3C0 ADRP X21, 0xF47000
	0x031AE3C4 ADRP X22, 0xF45000
	0x031AE3C8 LDR X21, [X21 + 0x5A8]
	0x031AE3CC LDR X22, [X22 + 0x598]
	0x031AE3D0 MOV X0, X19
	0x031AE3D4 MOV X1, X31
	0x031AE3D8 BL 0x3C356F8
	0x031AE3DC MOV X19, X0
	0x031AE3E0 MOV W23, W31
	0x031AE3E4 LDR X0, [X21]
	0x031AE3E8 LDR W8, [X0 + 0xE0]
	0x031AE3EC CBNZ W8, 0x31AE3F8
	0x031AE3F0 BL 0x1C16DFC
	0x031AE3F4 LDR X0, [X21]
	0x031AE3F8 LDR X8, [X0 + 0xB8]
	0x031AE3FC LDR W9, [X8 + 0x38]
	0x031AE400 CMP W23, W9
	0x031AE404 B.GT 0x31AE4B0
	0x031AE408 LDR W9, [X0 + 0xE0]
	0x031AE40C CBNZ W9, 0x31AE41C
	0x031AE410 BL 0x1C16DFC
	0x031AE414 LDR X8, [X21]
	0x031AE418 LDR X8, [X8 + 0xB8]
	0x031AE41C LDR X8, [X8 + 0x18]
	0x031AE420 CBZ X8, 0x31AE4C4
	0x031AE424 LDR W9, [X8 + 0x18]
	0x031AE428 CMP W23, W9
	0x031AE42C B.CS 0x31AE4C8
	0x031AE430 SXTW X24, W23
	0x031AE434 ADD X8, X8, X24, 0x3, LSL
	0x031AE438 LDR X8, [X8 + 0x20]
	0x031AE43C CBZ X8, 0x31AE4C4
	0x031AE440 LDR X0, [X22]
	0x031AE444 LDR X20, [X8 + 0x58]
	0x031AE448 LDR W9, [X0 + 0xE0]
	0x031AE44C CBNZ W9, 0x31AE454
	0x031AE450 BL 0x1C16DFC
	0x031AE454 MOV X0, X20
	0x031AE458 MOV X1, X19
	0x031AE45C MOV X2, X31
	0x031AE460 BL 0x3C3883C
	0x031AE464 TBZ X0, 0x0, 0x31AE4A8
	0x031AE468 LDR X0, [X21]
	0x031AE46C LDR W8, [X0 + 0xE0]
	0x031AE470 CBNZ W8, 0x31AE47C
	0x031AE474 BL 0x1C16DFC
	0x031AE478 LDR X0, [X21]
	0x031AE47C LDR X8, [X0 + 0xB8]
	0x031AE480 LDR X8, [X8 + 0x18]
	0x031AE484 CBZ X8, 0x31AE4C4
	0x031AE488 LDR W9, [X8 + 0x18]
	0x031AE48C CMP W23, W9
	0x031AE490 B.CS 0x31AE4C8
	0x031AE494 ADD X8, X8, X24, 0x3, LSL
	0x031AE498 LDR X0, [X8 + 0x20]
	0x031AE49C CBZ X0, 0x31AE4C4
	0x031AE4A0 MOV X1, X31
	0x031AE4A4 BL 0x31C509C
	0x031AE4A8 ADD W23, W23, 0x1
	0x031AE4AC B 0x31AE3E4
	0x031AE4B0 LDP X20, X19, [X31 + 0x30]
	0x031AE4B4 LDP X22, X21, [X31 + 0x20]
	0x031AE4B8 LDP X24, X23, [X31 + 0x10]
	0x031AE4BC LDR X30, [X31], #0x40
	0x031AE4C0 RET
	0x031AE4C4 BL 0x1C16F20
	0x031AE4C8 BL 0x1C16F28
	0x031AE4CC STR X30, [X31 - 0x50]!
	0x031AE4D0 STP X26, X25, [X31 + 0x10]
	0x031AE4D4 STP X24, X23, [X31 + 0x20]
	0x031AE4D8 STP X22, X21, [X31 + 0x30]
	0x031AE4DC STP X20, X19, [X31 + 0x40]
	0x031AE4E0 ADRP X20, 0x122D000
	0x031AE4E4 ADRP X21, 0xF45000
	0x031AE4E8 LDRB W8, [X20 + 0xE6A]
	0x031AE4EC LDR X21, [X21 + 0x598]
	0x031AE4F0 MOV X19, X0
	0x031AE4F4 TBNZ X8, 0x0, 0x31AE524
	0x031AE4F8 ADRP X0, 0xF47000
	0x031AE4FC LDR X0, [X0 + 0x5A8]
	0x031AE500 BL 0x1C16CF4
	0x031AE504 ADRP X0, 0xF45000
	0x031AE508 LDR X0, [X0 + 0x598]
	0x031AE50C BL 0x1C16CF4
	0x031AE510 ADRP X0, 0xF45000
	0x031AE514 LDR X0, [X0 + 0xA90]
	0x031AE518 BL 0x1C16CF4
	0x031AE51C MOVZ W8, 0x1
	0x031AE520 STRB W8, [X20 + 0xE6A]
	0x031AE524 LDR X0, [X21]
	0x031AE528 LDR W8, [X0 + 0xE0]
	0x031AE52C CBNZ W8, 0x31AE534
	0x031AE530 BL 0x1C16DFC
	0x031AE534 MOV X0, X19
	0x031AE538 MOV X1, X31
	0x031AE53C MOV X2, X31
	0x031AE540 BL 0x3C3883C
	0x031AE544 TBZ X0, 0x0, 0x31AE614
	0x031AE548 ADRP X21, 0xF47000
	0x031AE54C ADRP X23, 0xF45000
	0x031AE550 LDR X21, [X21 + 0x5A8]
	0x031AE554 LDR X23, [X23 + 0xA90]
	0x031AE558 MOV W20, W31

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0x122E000
	011 Move W8, [X19+3675]
	012 Move W20, W2
	013 Move W21, W1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF48000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move X0, 0xF46000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+3675], W8
	027 Move TEMP, X21
	028 And TEMP, TEMP, -2147483648
	029 Compare TEMP, -2147483648
	030 JumpIfEqual {193}
	031 Move X24, 0xF48000
	032 Move X24, [X24+1448]
	033 Move X0, [X24]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Call LeanTween.init
	039 Move X8, [X24]
	040 Move X8, [X8+184]
	041 Move X8, [X8+24]
	042 Compare X8, 0
	043 JumpIfEqual {203}
	044 Move W9, [X8+24]
	045 And W19, W21, 0xFFFF
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W25, W19
	048 Add X8, X8, X25
	049 Move X8, [X8+32]
	050 Compare X8, 0
	051 JumpIfEqual {203}
	052 Move X26, 0xF46000
	053 Move X26, [X26+1432]
	054 Move X23, [X8+88]
	055 Move X0, [X26]
	056 Move W9, [X0+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X23
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Equality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {136}
	068 Move TEMP, X20
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {119}
	072 Move X0, [X24]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {78}
	076 Call 0x1C17DFC
	077 Move X0, [X24]
	078 Move X8, [X0+184]
	079 Move X8, [X8+24]
	080 Compare X8, 0
	081 JumpIfEqual {203}
	082 Move W9, [X8+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Add X9, X8, X25
	085 Move X9, [X9+32]
	086 Compare X9, 0
	087 JumpIfEqual {203}
	088 Move X9, [X9+232]
	089 Compare X9, 0
	090 JumpIfEqual {203}
	091 Move X9, [X9+192]
	092 Compare X9, 0
	093 JumpIfEqual {119}
	094 Move W9, [X0+224]
	095 Compare W9, 0
	096 JumpIfNotEqual {103}
	097 Call 0x1C17DFC
	098 Move X8, [X24]
	099 Move X8, [X8+184]
	100 Move X8, [X8+24]
	101 Compare X8, 0
	102 JumpIfEqual {203}
	103 Move W9, [X8+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Add X8, X8, X25
	106 Move X8, [X8+32]
	107 Compare X8, 0
	108 JumpIfEqual {203}
	109 Move X8, [X8+232]
	110 Compare X8, 0
	111 JumpIfEqual {203}
	112 Move X8, [X8+192]
	113 Compare X8, 0
	114 JumpIfEqual {203}
	115 Move X9, [X8+24]
	116 Move X0, [X8+64]
	117 Move X1, [X8+40]
	118 NotImplemented "Instruction BLR not yet implemented."
	119 Move X0, [X24]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move W0, W19
	125 Move X20, [X31+64]
	126 Move X19, [X31+72]
	127 Move X22, [X31+48]
	128 Move X21, [X31+56]
	129 Move X24, [X31+32]
	130 Move X23, [X31+40]
	131 Move X26, [X31+16]
	132 Move X25, [X31+24]
	133 Move X30, [X31+80]
	134 Call LeanTween.removeTween, X0
	135 Return 
	136 Move X0, [X24]
	137 Move W8, [X0+224]
	138 Compare W8, 0
	139 JumpIfNotEqual {142}
	140 Call 0x1C17DFC
	141 Move X0, [X24]
	142 Move X8, [X0+184]
	143 Move X8, [X8+24]
	144 Compare X8, 0
	145 JumpIfEqual {203}
	146 Move W9, [X8+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Add X8, X8, X25
	149 Move X8, [X8+32]
	150 Compare X8, 0
	151 JumpIfEqual {203}
	152 Move X0, [X8+88]
	153 Compare X0, 0
	154 JumpIfEqual {203}
	155 Move X1, X31
	156 Call Component.get_gameObject, X0
	157 Move X8, [X26]
	158 Move X23, X0
	159 Move W9, [X8+224]
	160 Compare W9, 0
	161 JumpIfNotEqual {164}
	162 Move X0, X8
	163 Call 0x1C17DFC
	164 Move X0, X23
	165 Move X1, X22
	166 Move X2, X31
	167 Call Object.op_Equality, X0, X1
	168 Move TEMP, X0
	169 And TEMP, TEMP, 1
	170 Compare TEMP, 1
	171 JumpIfNotEqual {193}
	172 Move X0, [X24]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {178}
	176 Call 0x1C17DFC
	177 Move X0, [X24]
	178 Move X8, [X0+184]
	179 Move X8, [X8+24]
	180 Compare X8, 0
	181 JumpIfEqual {203}
	182 Move W9, [X8+24]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Add X8, X8, X25
	185 Move X8, [X8+32]
	186 Compare X8, 0
	187 JumpIfEqual {203}
	188 Move W8, [X8+60]
	189 Move W9, W21
	190 ShiftRight W9, 16
	191 And W9, W9, 0x7FFFFFFF
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Move X20, [X31+64]
	194 Move X19, [X31+72]
	195 Move X22, [X31+48]
	196 Move X21, [X31+56]
	197 Move X24, [X31+32]
	198 Move X23, [X31+40]
	199 Move X26, [X31+16]
	200 Move X25, [X31+24]
	201 Move X30, [X31+80]
	202 Return 
	203 Call 0x1C17F20
	204 Call 0x1C17F28

Method: System.Void cancel(LTRect ltRect, System.Int32 uniqueId)

Disassembly:
	0x031AE55C LDR X0, [X21]
	0x031AE560 LDR W8, [X0 + 0xE0]
	0x031AE564 CBNZ W8, 0x31AE570
	0x031AE568 BL 0x1C16DFC
	0x031AE56C LDR X0, [X21]
	0x031AE570 LDR X8, [X0 + 0xB8]
	0x031AE574 LDR W9, [X8 + 0x38]
	0x031AE578 CMP W20, W9
	0x031AE57C CSET W22, GT
	0x031AE580 B.GT 0x31AE5F8
	0x031AE584 LDR W9, [X0 + 0xE0]
	0x031AE588 CBNZ W9, 0x31AE598
	0x031AE58C BL 0x1C16DFC
	0x031AE590 LDR X8, [X21]
	0x031AE594 LDR X8, [X8 + 0xB8]
	0x031AE598 LDR X8, [X8 + 0x18]
	0x031AE59C CBZ X8, 0x31AE740
	0x031AE5A0 LDR W9, [X8 + 0x18]
	0x031AE5A4 CMP W20, W9
	0x031AE5A8 B.CS 0x31AE744
	0x031AE5AC ADD X8, X8, W20, 0x3, SXTW
	0x031AE5B0 LDR X8, [X8 + 0x20]
	0x031AE5B4 CBZ X8, 0x31AE740
	0x031AE5B8 LDR V0, [X8 + 0x40]
	0x031AE5BC LDR X0, [X23]
	0x031AE5C0 ADD X1, X31, 0xC
	0x031AE5C4 STR S0, [X31 + 0xC]
	0x031AE5C8 BL 0x1C16E04
	0x031AE5CC MOV X19, X0
	0x031AE5D0 LDR X0, [X23]
	0x031AE5D4 ADD X1, X31, 0x8
	0x031AE5D8 STR W31, [X31 + 0x8]
	0x031AE5DC BL 0x1C16E04
	0x031AE5E0 MOV X1, X0
	0x031AE5E4 MOV X0, X19
	0x031AE5E8 MOV X2, X31
	0x031AE5EC BL 0x33CB4B0
	0x031AE5F0 ADD W20, W20, 0x1
	0x031AE5F4 TBZ X0, 0x0, 0x31AE55C
	0x031AE5F8 EOR W0, W22, 0x1
	0x031AE5FC LDP X20, X19, [X31 + 0x40]
	0x031AE600 LDP X22, X21, [X31 + 0x30]
	0x031AE604 LDP X24, X23, [X31 + 0x20]
	0x031AE608 LDP X26, X25, [X31 + 0x10]
	0x031AE60C LDR X30, [X31], #0x50
	0x031AE610 RET
	0x031AE614 CBZ X19, 0x31AE740
	0x031AE618 MOV X0, X19
	0x031AE61C MOV X1, X31
	0x031AE620 BL 0x3C356F8
	0x031AE624 ADRP X24, 0xF47000
	0x031AE628 ADRP X25, 0xF45000
	0x031AE62C LDR X24, [X24 + 0x5A8]
	0x031AE630 LDR X25, [X25 + 0xA90]
	0x031AE634 MOV X19, X0
	0x031AE638 MOV W23, W31
	0x031AE63C LDR X0, [X24]
	0x031AE640 LDR W8, [X0 + 0xE0]
	0x031AE644 CBNZ W8, 0x31AE650
	0x031AE648 BL 0x1C16DFC
	0x031AE64C LDR X0, [X24]
	0x031AE650 LDR X8, [X0 + 0xB8]
	0x031AE654 LDR W9, [X8 + 0x38]
	0x031AE658 CMP W23, W9
	0x031AE65C CSET W22, GT
	0x031AE660 B.GT 0x31AE5F8
	0x031AE664 LDR W9, [X0 + 0xE0]
	0x031AE668 CBNZ W9, 0x31AE678
	0x031AE66C BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122E000
	008 Move W8, [X20+3676]
	009 Move W19, W1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF48000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3676], W8
	020 Move TEMP, X19
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {83}
	024 Move X22, 0xF48000
	025 Move X22, [X22+1448]
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Call LeanTween.init
	032 Move X0, [X22]
	033 Move X8, [X0+184]
	034 Move X8, [X8+24]
	035 Compare X8, 0
	036 JumpIfEqual {90}
	037 Move W9, [X8+24]
	038 And W20, W19, 0xFFFF
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W23, W20
	041 Add X9, X8, X23
	042 Move X9, [X9+32]
	043 Compare X9, 0
	044 JumpIfEqual {90}
	045 Move X9, [X9+232]
	046 Compare X9, 0
	047 JumpIfEqual {90}
	048 Move X9, [X9+120]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W9, [X0+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {59}
	053 Call 0x1C17DFC
	054 Move X0, [X22]
	055 Move X8, [X0+184]
	056 Move X8, [X8+24]
	057 Compare X8, 0
	058 JumpIfEqual {90}
	059 Move W9, [X8+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X8, X8, X23
	062 Move X8, [X8+32]
	063 Compare X8, 0
	064 JumpIfEqual {90}
	065 Move W8, [X8+60]
	066 Move W9, W19
	067 ShiftRight W9, 16
	068 And W9, W9, 0x7FFFFFFF
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move W0, W20
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 Call LeanTween.removeTween, X0
	082 Return 
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X30, [X31+48]
	088 Move X23, [X31+56]
	089 Return 
	090 Call 0x1C17F20
	091 Call 0x1C17F28

Method: System.Void cancel(System.Int32 uniqueId)

Disassembly:
	0x031AE670 LDR X8, [X24]
	0x031AE674 LDR X8, [X8 + 0xB8]
	0x031AE678 LDR X8, [X8 + 0x18]
	0x031AE67C CBZ X8, 0x31AE740
	0x031AE680 LDR W9, [X8 + 0x18]
	0x031AE684 CMP W23, W9
	0x031AE688 B.CS 0x31AE744
	0x031AE68C SXTW X26, W23
	0x031AE690 ADD X8, X8, X26, 0x3, LSL
	0x031AE694 LDR X8, [X8 + 0x20]
	0x031AE698 CBZ X8, 0x31AE740
	0x031AE69C LDR V0, [X8 + 0x40]
	0x031AE6A0 LDR X0, [X25]
	0x031AE6A4 ADD X1, X31, 0xC
	0x031AE6A8 STR S0, [X31 + 0xC]
	0x031AE6AC BL 0x1C16E04
	0x031AE6B0 MOV X20, X0
	0x031AE6B4 LDR X0, [X25]
	0x031AE6B8 ADD X1, X31, 0x8
	0x031AE6BC STR W31, [X31 + 0x8]
	0x031AE6C0 BL 0x1C16E04
	0x031AE6C4 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x122E000
	006 Move X21, 0xF48000
	007 Move W8, [X20+3677]
	008 Move X21, [X21+1448]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF48000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3677], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W1, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]

Method: System.Void cancel(System.Int32 uniqueId, System.Boolean callOnComplete)

Disassembly:
	0x031AE6C8 MOV X0, X20
	0x031AE6CC MOV X2, X31
	0x031AE6D0 BL 0x33CB4B0
	0x031AE6D4 TBZ X0, 0x0, 0x31AE738
	0x031AE6D8 LDR X0, [X24]
	0x031AE6DC LDR W8, [X0 + 0xE0]
	0x031AE6E0 CBNZ W8, 0x31AE6EC
	0x031AE6E4 BL 0x1C16DFC
	0x031AE6E8 LDR X0, [X24]
	0x031AE6EC LDR X8, [X0 + 0xB8]
	0x031AE6F0 LDR X8, [X8 + 0x18]
	0x031AE6F4 CBZ X8, 0x31AE740
	0x031AE6F8 LDR W9, [X8 + 0x18]
	0x031AE6FC CMP W23, W9
	0x031AE700 B.CS 0x31AE744
	0x031AE704 ADD X8, X8, X26, 0x3, LSL
	0x031AE708 LDR X8, [X8 + 0x20]
	0x031AE70C CBZ X8, 0x31AE740
	0x031AE710 LDR X0, [X21]
	0x031AE714 LDR X20, [X8 + 0x58]
	0x031AE718 LDR W9, [X0 + 0xE0]
	0x031AE71C CBNZ W9, 0x31AE724
	0x031AE720 BL 0x1C16DFC
	0x031AE724 MOV X0, X20
	0x031AE728 MOV X1, X19
	0x031AE72C MOV X2, X31
	0x031AE730 BL 0x3C3883C
	0x031AE734 TBNZ X0, 0x0, 0x31AE5F8
	0x031AE738 ADD W23, W23, 0x1
	0x031AE73C B 0x31AE63C
	0x031AE740 BL 0x1C16F20
	0x031AE744 BL 0x1C16F28
	0x031AE748 STR X30, [X31 - 0x20]!
	0x031AE74C STP X20, X19, [X31 + 0x10]
	0x031AE750 ADRP X20, 0x122D000
	0x031AE754 LDRB W8, [X20 + 0xE6B]
	0x031AE758 MOV X19, X0
	0x031AE75C TBNZ X8, 0x0, 0x31AE774
	0x031AE760 ADRP X0, 0xF47000
	0x031AE764 LDR X0, [X0 + 0x5A8]
	0x031AE768 BL 0x1C16CF4
	0x031AE76C MOVZ W8, 0x1
	0x031AE770 STRB W8, [X20 + 0xE6B]
	0x031AE774 CBZ X19, 0x31AE7B4
	0x031AE778 ADRP X20, 0xF47000
	0x031AE77C LDR X20, [X20 + 0x5A8]
	0x031AE780 MOV X0, X19
	0x031AE784 MOV X1, X31
	0x031AE788 BL 0x3C32ECC
	0x031AE78C LDR X8, [X20]
	0x031AE790 MOV X19, X0
	0x031AE794 LDR W9, [X8 + 0xE0]
	0x031AE798 CBNZ W9, 0x31AE7A4
	0x031AE79C MOV X0, X8
	0x031AE7A0 BL 0x1C16DFC
	0x031AE7A4 MOV X0, X19
	0x031AE7A8 LDP X20, X19, [X31 + 0x10]
	0x031AE7AC LDR X30, [X31], #0x20
	0x031AE7B0 B 0x31AE7B8
	0x031AE7B4 BL 0x1C16F20
	0x031AE7B8 STR X30, [X31 - 0x40]!
	0x031AE7BC STP X24, X23, [X31 + 0x10]
	0x031AE7C0 STP X22, X21, [X31 + 0x20]
	0x031AE7C4 STP X20, X19, [X31 + 0x30]
	0x031AE7C8 ADRP X20, 0x122D000
	0x031AE7CC ADRP X21, 0xF45000
	0x031AE7D0 LDRB W8, [X20 + 0xE6D]
	0x031AE7D4 LDR X21, [X21 + 0x598]
	0x031AE7D8 MOV X19, X0
	0x031AE7DC TBNZ X8, 0x0, 0x31AE800
	0x031AE7E0 ADRP X0, 0xF47000
	0x031AE7E4 LDR X0, [X0 + 0x5A8]
	0x031AE7E8 BL 0x1C16CF4
	0x031AE7EC ADRP X0, 0xF45000
	0x031AE7F0 LDR X0, [X0 + 0x598]
	0x031AE7F4 BL 0x1C16CF4
	0x031AE7F8 MOVZ W8, 0x1
	0x031AE7FC STRB W8, [X20 + 0xE6D]
	0x031AE800 LDR X0, [X21]
	0x031AE804 LDR W8, [X0 + 0xE0]
	0x031AE808 CBNZ W8, 0x31AE810
	0x031AE80C BL 0x1C16DFC
	0x031AE810 MOV X0, X19
	0x031AE814 MOV X1, X31
	0x031AE818 MOV X2, X31
	0x031AE81C BL 0x3C3883C
	0x031AE820 TBZ X0, 0x0, 0x31AE8B0
	0x031AE824 ADRP X19, 0xF47000
	0x031AE828 LDR X19, [X19 + 0x5A8]
	0x031AE82C MOV W20, W31
	0x031AE830 LDR X0, [X19]
	0x031AE834 LDR W8, [X0 + 0xE0]
	0x031AE838 CBNZ W8, 0x31AE844
	0x031AE83C BL 0x1C16DFC
	0x031AE840 LDR X0, [X19]
	0x031AE844 LDR X8, [X0 + 0xB8]
	0x031AE848 LDR W8, [X8 + 0x38]
	0x031AE84C CMP W20, W8
	0x031AE850 CSET W22, GT
	0x031AE854 B.GT 0x31AE898
	0x031AE858 LDR W8, [X0 + 0xE0]
	0x031AE85C CBNZ W8, 0x31AE868
	0x031AE860 BL 0x1C16DFC
	0x031AE864 LDR X0, [X19]
	0x031AE868 LDR X8, [X0 + 0xB8]
	0x031AE86C LDR X8, [X8 + 0x18]
	0x031AE870 CBZ X8, 0x31AE99C
	0x031AE874 LDR W9, [X8 + 0x18]
	0x031AE878 CMP W20, W9
	0x031AE87C B.CS 0x31AE9A0
	0x031AE880 ADD X8, X8, W20, 0x3, SXTW
	0x031AE884 LDR X8, [X8 + 0x20]
	0x031AE888 CBZ X8, 0x31AE99C
	0x031AE88C LDRB W8, [X8 + 0x10]
	0x031AE890 ADD W20, W20, 0x1
	0x031AE894 CBZ W8, 0x31AE834
	0x031AE898 EOR W0, W22, 0x1
	0x031AE89C LDP X20, X19, [X31 + 0x30]
	0x031AE8A0 LDP X22, X21, [X31 + 0x20]
	0x031AE8A4 LDP X24, X23, [X31 + 0x10]
	0x031AE8A8 LDR X30, [X31], #0x40
	0x031AE8AC RET
	0x031AE8B0 CBZ X19, 0x31AE99C
	0x031AE8B4 MOV X0, X19
	0x031AE8B8 MOV X1, X31
	0x031AE8BC BL 0x3C356F8
	0x031AE8C0 ADRP X24, 0xF47000
	0x031AE8C4 LDR X24, [X24 + 0x5A8]
	0x031AE8C8 MOV X19, X0
	0x031AE8CC MOV W23, W31
	0x031AE8D0 LDR X0, [X24]
	0x031AE8D4 LDR W8, [X0 + 0xE0]
	0x031AE8D8 CBNZ W8, 0x31AE8E4
	0x031AE8DC BL 0x1C16DFC
	0x031AE8E0 LDR X0, [X24]
	0x031AE8E4 LDR X8, [X0 + 0xB8]
	0x031AE8E8 LDR W9, [X8 + 0x38]
	0x031AE8EC CMP W23, W9
	0x031AE8F0 CSET W22, GT
	0x031AE8F4 B.GT 0x31AE898
	0x031AE8F8 LDR W9, [X0 + 0xE0]
	0x031AE8FC CBNZ W9, 0x31AE90C
	0x031AE900 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x122E000
	008 Move W8, [X19+3678]
	009 Move W20, W1
	010 Move W21, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF48000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+3678], W8
	020 Move TEMP, X21
	021 And TEMP, TEMP, -2147483648
	022 Compare TEMP, -2147483648
	023 JumpIfEqual {172}
	024 Move X22, 0xF48000
	025 Move X22, [X22+1448]
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Call LeanTween.init
	032 Move X0, [X22]
	033 Move X9, [X0+184]
	034 Move X8, [X9+24]
	035 Compare X8, 0
	036 JumpIfEqual {179}
	037 Move W10, [X0+224]
	038 Move W23, [X8+24]
	039 Compare W10, 0
	040 JumpIfNotEqual {47}
	041 Call 0x1C17DFC
	042 Move X0, [X22]
	043 Move X9, [X0+184]
	044 Move X8, [X9+24]
	045 Compare X8, 0
	046 JumpIfEqual {179}
	047 And W19, W21, 0xFFFF
	048 Subtract W10, W23, 1
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, [X9+16]
	051 Compare X9, 0
	052 JumpIfEqual {179}
	053 Move W8, [X8+24]
	054 Move W10, [X9+24]
	055 Subtract W8, W19, W8
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Add X8, X9, W8
	058 Move X20, [X8+32]
	059 Move W21, W31
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {65}
	063 Call 0x1C17DFC
	064 Move X0, [X22]
	065 Move X8, [X0+184]
	066 Move W8, [X8+64]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Compare X20, 0
	069 JumpIfEqual {179}
	070 Move X8, [X20+24]
	071 Compare X8, 0
	072 JumpIfEqual {179}
	073 Move X0, [X8+32]
	074 Compare X0, 0
	075 JumpIfEqual {90}
	076 Move X1, X31
	077 Call LTDescr.get_uniqueId, X0
	078 Move X8, [X22]
	079 Move W19, W0
	080 Move W9, [X8+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {85}
	083 Move X0, X8
	084 Call 0x1C17DFC
	085 And W0, W19, 0xFFFF
	086 Call LeanTween.removeTween, X0
	087 Move X8, [X20+24]
	088 Compare X8, 0
	089 JumpIfEqual {179}
	090 Move X8, [X8+16]
	091 Compare X8, 0
	092 JumpIfEqual {172}
	093 Move [X20+24], X8
	094 Move X0, [X22]
	095 Add W21, W21, 1
	096 Move W9, [X8+24]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move W23, W19
	099 Add X9, X8, X23
	100 Move X9, [X9+32]
	101 Compare X9, 0
	102 JumpIfEqual {179}
	103 Move W9, [X9+60]
	104 Move W10, W21
	105 ShiftRight W10, 16
	106 And W10, W10, 0x7FFFFFFF
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move TEMP, X20
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfNotEqual {159}
	112 Move W9, [X0+224]
	113 Compare W9, 0
	114 JumpIfNotEqual {121}
	115 Call 0x1C17DFC
	116 Move X0, [X22]
	117 Move X8, [X0+184]
	118 Move X8, [X8+24]
	119 Compare X8, 0
	120 JumpIfEqual {179}
	121 Move W9, [X8+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Add X9, X8, X23
	124 Move X9, [X9+32]
	125 Compare X9, 0
	126 JumpIfEqual {179}
	127 Move X9, [X9+232]
	128 Compare X9, 0
	129 JumpIfEqual {179}
	130 Move X9, [X9+192]
	131 Compare X9, 0
	132 JumpIfEqual {159}
	133 Move W9, [X0+224]
	134 Compare W9, 0
	135 JumpIfNotEqual {142}
	136 Call 0x1C17DFC
	137 Move X8, [X22]
	138 Move X8, [X8+184]
	139 Move X8, [X8+24]
	140 Compare X8, 0
	141 JumpIfEqual {179}
	142 Move W9, [X8+24]
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Add X8, X8, X23
	145 Move X8, [X8+32]
	146 Compare X8, 0
	147 JumpIfEqual {179}
	148 Move X8, [X8+232]
	149 Compare X8, 0
	150 JumpIfEqual {179}
	151 Move X8, [X8+192]
	152 Compare X8, 0
	153 JumpIfEqual {179}
	154 Move X9, [X8+24]
	155 Move X0, [X8+64]
	156 Move X1, [X8+40]
	157 NotImplemented "Instruction BLR not yet implemented."
	158 Move X0, [X22]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {163}
	162 Call 0x1C17DFC
	163 Move W0, W19
	164 Move X20, [X31+32]
	165 Move X19, [X31+40]
	166 Move X22, [X31+16]
	167 Move X21, [X31+24]
	168 Move X30, [X31+48]
	169 Move X23, [X31+56]
	170 Call LeanTween.removeTween, X0
	171 Return 
	172 Move X20, [X31+32]
	173 Move X19, [X31+40]
	174 Move X22, [X31+16]
	175 Move X21, [X31+24]
	176 Move X30, [X31+48]
	177 Move X23, [X31+56]
	178 Return 
	179 Call 0x1C17F20
	180 Call 0x1C17F28

Method: LTDescr descr(System.Int32 uniqueId)

Disassembly:
	0x031AE904 LDR X0, [X24]
	0x031AE908 LDR X8, [X0 + 0xB8]
	0x031AE90C LDR X8, [X8 + 0x18]
	0x031AE910 CBZ X8, 0x31AE99C
	0x031AE914 LDR W9, [X8 + 0x18]
	0x031AE918 CMP W23, W9
	0x031AE91C B.CS 0x31AE9A0
	0x031AE920 SXTW X20, W23
	0x031AE924 ADD X9, X8, X20, 0x3, LSL
	0x031AE928 LDR X9, [X9 + 0x20]
	0x031AE92C CBZ X9, 0x31AE99C
	0x031AE930 LDRB W9, [X9 + 0x10]
	0x031AE934 CBZ W9, 0x31AE994
	0x031AE938 LDR W9, [X0 + 0xE0]
	0x031AE93C CBNZ W9, 0x31AE954
	0x031AE940 BL 0x1C16DFC
	0x031AE944 LDR X8, [X24]
	0x031AE948 LDR X8, [X8 + 0xB8]
	0x031AE94C LDR X8, [X8 + 0x18]
	0x031AE950 CBZ X8, 0x31AE99C
	0x031AE954 LDR W9, [X8 + 0x18]
	0x031AE958 CMP W23, W9
	0x031AE95C B.CS 0x31AE9A0
	0x031AE960 ADD X8, X8, X20, 0x3, LSL
	0x031AE964 LDR X8, [X8 + 0x20]
	0x031AE968 CBZ X8, 0x31AE99C
	0x031AE96C LDR X0, [X21]
	0x031AE970 LDR X20, [X8 + 0x58]
	0x031AE974 LDR W9, [X0 + 0xE0]
	0x031AE978 CBNZ W9, 0x31AE980
	0x031AE97C BL 0x1C16DFC
	0x031AE980 MOV X0, X20
	0x031AE984 MOV X1, X19
	0x031AE988 MOV X2, X31
	0x031AE98C BL 0x3C3883C
	0x031AE990 TBNZ X0, 0x0, 0x31AE898
	0x031AE994 ADD W23, W23, 0x1
	0x031AE998 B 0x31AE8D0
	0x031AE99C BL 0x1C16F20
	0x031AE9A0 BL 0x1C16F28
	0x031AE9A4 SUB X31, X31, 0x30
	0x031AE9A8 STP X30, X21, [X31 + 0x10]
	0x031AE9AC STP X20, X19, [X31 + 0x20]
	0x031AE9B0 ADRP X21, 0x122D000
	0x031AE9B4 ADRP X20, 0xF47000
	0x031AE9B8 LDRB W8, [X21 + 0xE6C]
	0x031AE9BC LDR X20, [X20 + 0x5A8]
	0x031AE9C0 MOV W19, W0
	0x031AE9C4 TBNZ X8, 0x0, 0x31AE9E8
	0x031AE9C8 ADRP X0, 0xF47000
	0x031AE9CC LDR X0, [X0 + 0x5A8]
	0x031AE9D0 BL 0x1C16CF4
	0x031AE9D4 ADRP X0, 0xF45000
	0x031AE9D8 LDR X0, [X0 + 0xA90]
	0x031AE9DC BL 0x1C16CF4
	0x031AE9E0 MOVZ W8, 0x1
	0x031AE9E4 STRB W8, [X21 + 0xE6C]
	0x031AE9E8 LDR X0, [X20]
	0x031AE9EC AND W21, W19, 0xFFFF
	0x031AE9F0 LDR W8, [X0 + 0xE0]
	0x031AE9F4 CBNZ W8, 0x31AEA00
	0x031AE9F8 BL 0x1C16DFC
	0x031AE9FC LDR X0, [X20]
	0x031AEA00 LDR X8, [X0 + 0xB8]
	0x031AEA04 LDR W9, [X8 + 0x3C]
	0x031AEA08 CMP W21, W9
	0x031AEA0C B.GE 0x31AEAD8
	0x031AEA10 LDR W9, [X0 + 0xE0]
	0x031AEA14 CBNZ W9, 0x31AEA24
	0x031AEA18 BL 0x1C16DFC
	0x031AEA1C LDR X0, [X20]
	0x031AEA20 LDR X8, [X0 + 0xB8]
	0x031AEA24 LDR X9, [X8 + 0x18]
	0x031AEA28 CBZ X9, 0x31AEAEC
	0x031AEA2C LDR W10, [X9 + 0x18]
	0x031AEA30 CMP W21, W10
	0x031AEA34 B.CS 0x31AEAF0
	0x031AEA38 ADD X10, X9, W21, 0x3, UXTW
	0x031AEA3C LDR X10, [X10 + 0x20]
	0x031AEA40 CBZ X10, 0x31AEAEC
	0x031AEA44 LDR W10, [X10 + 0x3C]
	0x031AEA48 SBFM W11, W19, 0x10, 0x1F
	0x031AEA4C CMP X10, W11, SXTW
	0x031AEA50 B.NE 0x31AEAD8
	0x031AEA54 LDR W10, [X0 + 0xE0]
	0x031AEA58 CBNZ W10, 0x31AEA70
	0x031AEA5C BL 0x1C16DFC
	0x031AEA60 LDR X8, [X20]
	0x031AEA64 LDR X8, [X8 + 0xB8]
	0x031AEA68 LDR X9, [X8 + 0x18]
	0x031AEA6C CBZ X9, 0x31AEAEC
	0x031AEA70 LDRSW X8, [X8 + 0x60]
	0x031AEA74 LDR W10, [X9 + 0x18]
	0x031AEA78 CMP W8, W10
	0x031AEA7C B.CS 0x31AEAF0
	0x031AEA80 ADD X8, X9, X8, 0x3, LSL
	0x031AEA84 LDR X8, [X8 + 0x20]
	0x031AEA88 CBZ X8, 0x31AEAEC
	0x031AEA8C ADRP X20, 0xF45000
	0x031AEA90 LDR V0, [X8 + 0x40]
	0x031AEA94 LDR X20, [X20 + 0xA90]
	0x031AEA98 ADD X1, X31, 0xC
	0x031AEA9C STR S0, [X31 + 0xC]
	0x031AEAA0 LDR X0, [X20]
	0x031AEAA4 BL 0x1C16E04
	0x031AEAA8 MOV X19, X0
	0x031AEAAC LDR X0, [X20]
	0x031AEAB0 ADD X1, X31, 0x8
	0x031AEAB4 STR W31, [X31 + 0x8]
	0x031AEAB8 BL 0x1C16E04
	0x031AEABC MOV X1, X0
	0x031AEAC0 MOV X0, X19
	0x031AEAC4 MOV X2, X31
	0x031AEAC8 BL 0x33CB4B0
	0x031AEACC TBZ X0, 0x0, 0x31AEAD8
	0x031AEAD0 MOVZ W0, 0x1
	0x031AEAD4 B 0x31AEADC
	0x031AEAD8 MOV W0, W31
	0x031AEADC LDP X20, X19, [X31 + 0x20]
	0x031AEAE0 LDP X30, X21, [X31 + 0x10]
	0x031AEAE4 ADD X31, X31, 0x30
	0x031AEAE8 RET
	0x031AEAEC BL 0x1C16F20
	0x031AEAF0 BL 0x1C16F28
	0x031AEAF4 STR X30, [X31 - 0x20]!
	0x031AEAF8 STP X20, X19, [X31 + 0x10]
	0x031AEAFC ADRP X20, 0x122D000
	0x031AEB00 LDRB W8, [X20 + 0xE6E]
	0x031AEB04 MOV X19, X0
	0x031AEB08 TBNZ X8, 0x0, 0x31AEB20
	0x031AEB0C ADRP X0, 0xF47000
	0x031AEB10 LDR X0, [X0 + 0x5A8]
	0x031AEB14 BL 0x1C16CF4
	0x031AEB18 MOVZ W8, 0x1
	0x031AEB1C STRB W8, [X20 + 0xE6E]
	0x031AEB20 CBZ X19, 0x31AEB60
	0x031AEB24 ADRP X20, 0xF47000
	0x031AEB28 LDR X20, [X20 + 0x5A8]
	0x031AEB2C MOV X0, X19
	0x031AEB30 MOV X1, X31
	0x031AEB34 BL 0x3C32ECC
	0x031AEB38 LDR X8, [X20]
	0x031AEB3C MOV X19, X0
	0x031AEB40 LDR W9, [X8 + 0xE0]
	0x031AEB44 CBNZ W9, 0x31AEB50
	0x031AEB48 MOV X0, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x122E000
	008 Move X20, 0xF48000
	009 Move W8, [X21+3679]
	010 Move X20, [X20+1448]
	011 Move W19, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF48000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3679], W8
	021 Move X0, [X20]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call LeanTween.init
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X8, [X8+24]
	030 Compare X8, 0
	031 JumpIfEqual {160}
	032 Move W9, [X8+24]
	033 And W21, W19, 0xFFFF
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move W22, W21
	036 Add X9, X8, X22
	037 Move X9, [X9+32]
	038 NotImplemented "Instruction SBFM not yet implemented."
	039 Compare X9, 0
	040 JumpIfEqual {89}
	041 Move W9, [X0+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {50}
	044 Call 0x1C17DFC
	045 Move X8, [X20]
	046 Move X8, [X8+184]
	047 Move X8, [X8+24]
	048 Compare X8, 0
	049 JumpIfEqual {160}
	050 Move W9, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X8, X8, X22
	053 Move X0, [X8+32]
	054 Compare X0, 0
	055 JumpIfEqual {160}
	056 Move X1, X31
	057 Call LTDescr.get_uniqueId, X0
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X0, [X20]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {65}
	063 Call 0x1C17DFC
	064 Move X0, [X20]
	065 Move X8, [X0+184]
	066 Move X8, [X8+24]
	067 Compare X8, 0
	068 JumpIfEqual {160}
	069 Move W9, [X8+24]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add X9, X8, X22
	072 Move X9, [X9+32]
	073 Compare X9, 0
	074 JumpIfEqual {160}
	075 Move W9, [X9+60]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W9, [X0+224]
	078 Compare W9, 0
	079 JumpIfNotEqual {86}
	080 Call 0x1C17DFC
	081 Move X8, [X20]
	082 Move X8, [X8+184]
	083 Move X8, [X8+24]
	084 Compare X8, 0
	085 JumpIfEqual {160}
	086 Move W9, [X8+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add X8, X8, X22
	089 Move W21, W31
	090 Move X22, W23
	091 Move X0, [X20]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {97}
	095 Call 0x1C17DFC
	096 Move X0, [X20]
	097 Move X8, [X0+184]
	098 Move W9, [X8+56]
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move W9, [X0+224]
	101 Compare W9, 0
	102 JumpIfNotEqual {106}
	103 Call 0x1C17DFC
	104 Move X8, [X20]
	105 Move X8, [X8+184]
	106 Move X8, [X8+24]
	107 Compare X8, 0
	108 JumpIfEqual {160}
	109 Move W9, [X8+24]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Move X23, W21
	112 Add X8, X8, X23
	113 Move X0, [X8+32]
	114 Compare X0, 0
	115 JumpIfEqual {160}
	116 Move X1, X31
	117 Call LTDescr.get_uniqueId, X0
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X0, [X20]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {125}
	123 Call 0x1C17DFC
	124 Move X0, [X20]
	125 Move X8, [X0+184]
	126 Move X8, [X8+24]
	127 Compare X8, 0
	128 JumpIfEqual {160}
	129 Move W9, [X8+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Add X9, X8, X23
	132 Move X9, [X9+32]
	133 Compare X9, 0
	134 JumpIfEqual {160}
	135 Move W9, [X9+60]
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Add W21, W21, 1
	138 Move X0, X31
	139 Move W9, [X0+224]
	140 Compare W9, 0
	141 JumpIfNotEqual {148}
	142 Call 0x1C17DFC
	143 Move X8, [X20]
	144 Move X8, [X8+184]
	145 Move X8, [X8+24]
	146 Compare X8, 0
	147 JumpIfEqual {160}
	148 Move W9, [X8+24]
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Add X8, X8, X23
	151 Add X8, X8, 32
	152 Move X0, [X8]
	153 Move X20, [X31+32]
	154 Move X19, [X31+40]
	155 Move X22, [X31+16]
	156 Move X21, [X31+24]
	157 Move X30, [X31+48]
	158 Move X23, [X31+56]
	159 Return X0
	160 Call 0x1C17F20
	161 Call 0x1C17F28

Method: LTDescr description(System.Int32 uniqueId)

Disassembly:
	0x031AEB4C BL 0x1C16DFC
	0x031AEB50 MOV X0, X19
	0x031AEB54 LDP X20, X19, [X31 + 0x10]
	0x031AEB58 LDR X30, [X31], #0x20
	0x031AEB5C B 0x31AE7B8
	0x031AEB60 BL 0x1C16F20
	0x031AEB64 STR X30, [X31 - 0x30]!
	0x031AEB68 STP X22, X21, [X31 + 0x10]
	0x031AEB6C STP X20, X19, [X31 + 0x20]
	0x031AEB70 ADRP X21, 0x122D000
	0x031AEB74 ADRP X20, 0xF47000
	0x031AEB78 LDRB W8, [X21 + 0xE6F]
	0x031AEB7C LDR X20, [X20 + 0x5A8]
	0x031AEB80 MOV W19, W0
	0x031AEB84 TBNZ X8, 0x0, 0x31AEB9C
	0x031AEB88 ADRP X0, 0xF47000
	0x031AEB8C LDR X0, [X0 + 0x5A8]
	0x031AEB90 BL 0x1C16CF4
	0x031AEB94 MOVZ W8, 0x1
	0x031AEB98 STRB W8, [X21 + 0xE6F]
	0x031AEB9C LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x122E000
	006 Move X21, 0xF48000
	007 Move W8, [X20+3680]
	008 Move X21, [X21+1448]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF48000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3680], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call LeanTween.descr, X0
	030 Return X0

Method: LTDescr[] descriptions(UnityEngine.GameObject gameObject = null)

Disassembly:
	0x031AEBA0 AND W21, W19, 0xFFFF
	0x031AEBA4 LDR W8, [X0 + 0xE0]
	0x031AEBA8 CBNZ W8, 0x31AEBB4
	0x031AEBAC BL 0x1C16DFC
	0x031AEBB0 LDR X0, [X20]
	0x031AEBB4 LDR X8, [X0 + 0xB8]
	0x031AEBB8 LDR W9, [X8 + 0x3C]
	0x031AEBBC CMP W21, W9
	0x031AEBC0 B.GE 0x31AEC50
	0x031AEBC4 LDR W9, [X0 + 0xE0]
	0x031AEBC8 CBNZ W9, 0x31AEBD8
	0x031AEBCC BL 0x1C16DFC
	0x031AEBD0 LDR X0, [X20]
	0x031AEBD4 LDR X8, [X0 + 0xB8]
	0x031AEBD8 LDR X8, [X8 + 0x18]
	0x031AEBDC CBZ X8, 0x31AEC64
	0x031AEBE0 LDR W9, [X8 + 0x18]
	0x031AEBE4 CMP W21, W9
	0x031AEBE8 B.CS 0x31AEC68
	0x031AEBEC MOV W22, W21
	0x031AEBF0 ADD X9, X8, X22, 0x3, LSL
	0x031AEBF4 LDR X9, [X9 + 0x20]
	0x031AEBF8 CBZ X9, 0x31AEC64
	0x031AEBFC LDR W9, [X9 + 0x3C]
	0x031AEC00 SBFM W10, W19, 0x10, 0x1F
	0x031AEC04 CMP X9, W10, SXTW
	0x031AEC08 B.NE 0x31AEC50
	0x031AEC0C LDR W9, [X0 + 0xE0]
	0x031AEC10 CBNZ W9, 0x31AEC28
	0x031AEC14 BL 0x1C16DFC
	0x031AEC18 LDR X8, [X20]
	0x031AEC1C LDR X8, [X8 + 0xB8]
	0x031AEC20 LDR X8, [X8 + 0x18]
	0x031AEC24 CBZ X8, 0x31AEC64
	0x031AEC28 LDR W9, [X8 + 0x18]
	0x031AEC2C CMP W21, W9
	0x031AEC30 B.CS 0x31AEC68
	0x031AEC34 ADD X8, X8, X22, 0x3, LSL
	0x031AEC38 LDR X8, [X8 + 0x20]
	0x031AEC3C CBZ X8, 0x31AEC64
	0x031AEC40 LDRB W8, [X8 + 0x10]
	0x031AEC44 CBZ W8, 0x31AEC50
	0x031AEC48 MOVZ W0, 0x1
	0x031AEC4C B 0x31AEC54
	0x031AEC50 MOV W0, W31
	0x031AEC54 LDP X20, X19, [X31 + 0x20]
	0x031AEC58 LDP X22, X21, [X31 + 0x10]
	0x031AEC5C LDR X30, [X31], #0x30
	0x031AEC60 RET
	0x031AEC64 BL 0x1C16F20
	0x031AEC68 BL 0x1C16F28
	0x031AEC6C STP X30, X23, [X31 - 0x30]!
	0x031AEC70 STP X22, X21, [X31 + 0x10]
	0x031AEC74 STP X20, X19, [X31 + 0x20]
	0x031AEC78 ADRP X21, 0x122D000
	0x031AEC7C ADRP X20, 0xF47000
	0x031AEC80 LDRB W8, [X21 + 0xE70]
	0x031AEC84 LDR X20, [X20 + 0x5A8]
	0x031AEC88 MOV X19, X0
	0x031AEC8C TBNZ X8, 0x0, 0x31AECA4
	0x031AEC90 ADRP X0, 0xF47000
	0x031AEC94 LDR X0, [X0 + 0x5A8]
	0x031AEC98 BL 0x1C16CF4
	0x031AEC9C MOVZ W8, 0x1
	0x031AECA0 STRB W8, [X21 + 0xE70]
	0x031AECA4 LDR X0, [X20]
	0x031AECA8 MOV W21, W31
	0x031AECAC LDR W8, [X0 + 0xE0]
	0x031AECB0 CBNZ W8, 0x31AECBC
	0x031AECB4 BL 0x1C16DFC
	0x031AECB8 LDR X0, [X20]
	0x031AECBC LDR X8, [X0 + 0xB8]
	0x031AECC0 LDR W22, [X8 + 0x38]
	0x031AECC4 CMP W21, W22
	0x031AECC8 B.GT 0x31AED5C
	0x031AECCC LDR W8, [X0 + 0xE0]
	0x031AECD0 CBNZ W8, 0x31AECDC
	0x031AECD4 BL 0x1C16DFC
	0x031AECD8 LDR X0, [X20]
	0x031AECDC LDR X8, [X0 + 0xB8]
	0x031AECE0 LDR X8, [X8 + 0x18]
	0x031AECE4 CBZ X8, 0x31AED74
	0x031AECE8 LDR W9, [X8 + 0x18]
	0x031AECEC CMP W21, W9
	0x031AECF0 B.CS 0x31AED78
	0x031AECF4 SXTW X23, W21
	0x031AECF8 ADD X8, X8, X23, 0x3, LSL
	0x031AECFC LDR X8, [X8 + 0x20]
	0x031AED00 CBZ X8, 0x31AED74
	0x031AED04 LDRB W8, [X8 + 0x10]
	0x031AED08 CBZ W8, 0x31AED54
	0x031AED0C LDR W8, [X0 + 0xE0]
	0x031AED10 CBNZ W8, 0x31AED1C
	0x031AED14 BL 0x1C16DFC
	0x031AED18 LDR X0, [X20]
	0x031AED1C LDR X8, [X0 + 0xB8]
	0x031AED20 LDR X8, [X8 + 0x18]
	0x031AED24 CBZ X8, 0x31AED74
	0x031AED28 LDR W9, [X8 + 0x18]
	0x031AED2C CMP W21, W9
	0x031AED30 B.CS 0x31AED78
	0x031AED34 ADD X8, X8, X23, 0x3, LSL
	0x031AED38 LDR X8, [X8 + 0x20]
	0x031AED3C CBZ X8, 0x31AED74
	0x031AED40 LDR X8, [X8 + 0xE8]
	0x031AED44 CBZ X8, 0x31AED74
	0x031AED48 LDR X8, [X8 + 0x78]
	0x031AED4C CMP X8, X19
	0x031AED50 B.EQ 0x31AED5C
	0x031AED54 ADD W21, W21, 0x1
	0x031AED58 B 0x31AECAC
	0x031AED5C CMP W21, W22
	0x031AED60 LDP X20, X19, [X31 + 0x20]
	0x031AED64 LDP X22, X21, [X31 + 0x10]
	0x031AED68 CSET W0, LE
	0x031AED6C LDP X30, X23, [X31], #0x30
	0x031AED70 RET
	0x031AED74 BL 0x1C16F20
	0x031AED78 BL 0x1C16F28
	0x031AED7C SUB X31, X31, 0x110
	0x031AED80 STP D15, D14, [X31 + 0x70]
	0x031AED84 STP D13, D12, [X31 + 0x80]
	0x031AED88 STP D11, D10, [X31 + 0x90]
	0x031AED8C STP D9, D8, [X31 + 0xA0]
	0x031AED90 STP X29, X30, [X31 + 0xB0]
	0x031AED94 STP X28, X27, [X31 + 0xC0]
	0x031AED98 STP X26, X25, [X31 + 0xD0]
	0x031AED9C STP X24, X23, [X31 + 0xE0]
	0x031AEDA0 STP X22, X21, [X31 + 0xF0]
	0x031AEDA4 STP X20, X19, [X31 + 0x100]
	0x031AEDA8 LDR V6, [X31 + 0x110]
	0x031AEDAC MOV V11.16B, V1.16B
	0x031AEDB0 LDR V1, [X31 + 0x118]
	0x031AEDB4 MOV V12.16B, V2.16B
	0x031AEDB8 LDR V2, [X31 + 0x114]
	0x031AEDBC FMOV S7, 3
	0x031AEDC0 FMOV S16, 6
	0x031AEDC4 FADD S19, S0, S6
	0x031AEDC8 FMUL S17, S3, S16
	0x031AEDCC FMUL S19, S19, S7
	0x031AEDD0 FSUB S24, S19, S17
	0x031AEDD4 FADD S17, S12, S1
	0x031AEDD8 FMUL S18, S4, S16
	0x031AEDDC FMUL S16, S5, S16
	0x031AEDE0 FMUL S17, S17, S7
	0x031AEDE4 LDR V21, [X31 + 0x130]
	0x031AEDE8 LDR V23, [X31 + 0x128]
	0x031AEDEC FADD S20, S11, S2
	0x031AEDF0 FSUB S8, S17, S16
	0x031AEDF4 LDR V16, [X31 + 0x124]
	0x031AEDF8 LDR V17, [X31 + 0x120]
	0x031AEDFC FMUL S19, S20, S7
	0x031AEE00 FSUB S6, S3, S6
	0x031AEE04 FSUB S3, S3, S0
	0x031AEE08 FSUB S2, S4, S2
	0x031AEE0C FSUB S1, S5, S1
	0x031AEE10 FSUB S9, S19, S18
	0x031AEE14 FMUL S18, S3, S7
	0x031AEE18 FMUL S3, S6, S7
	0x031AEE1C FMUL S2, S2, S7
	0x031AEE20 FMUL S1, S1, S7
	0x031AEE24 FSUB S4, S4, S11
	0x031AEE28 FSUB S5, S5, S12

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0x122E000
	011 Move X22, 0xF46000
	012 Move W8, [X19+3681]
	013 Move X22, [X22+1432]
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0xF48000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move X0, 0xF72000
	023 Move X0, [X0+936]
	024 Call 0x1C17CF4
	025 Move X0, 0xF72000
	026 Move X0, [X0+944]
	027 Call 0x1C17CF4
	028 Move X0, 0xF72000
	029 Move X0, [X0+952]
	030 Call 0x1C17CF4
	031 Move X0, 0xF72000
	032 Move X0, [X0+960]
	033 Call 0x1C17CF4
	034 Move X0, 0xF46000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X19+3681], W8
	039 Move X0, [X22]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Equality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {63}
	052 Move X20, [X31+64]
	053 Move X19, [X31+72]
	054 Move X22, [X31+48]
	055 Move X21, [X31+56]
	056 Move X24, [X31+32]
	057 Move X23, [X31+40]
	058 Move X26, [X31+16]
	059 Move X25, [X31+24]
	060 Move X0, X31
	061 Move X30, [X31+80]
	062 Return X0
	063 Move X8, 0xF72000
	064 Move X8, [X8+960]
	065 Move X19, 0xF72000
	066 Move X0, [X8]
	067 Move X19, [X19+952]
	068 Call 0x1C17F10
	069 Move X1, [X19]
	070 Move X19, X0
	071 Call List`1<Object>..ctor, X0
	072 Compare X20, 0
	073 JumpIfEqual {193}
	074 Move X0, X20
	075 Move X1, X31
	076 Call GameObject.get_transform, X0
	077 Move X24, 0xF48000
	078 Move X25, 0xF72000
	079 Move X24, [X24+1448]
	080 Move X25, [X25+936]
	081 Move X20, X0
	082 Move W23, W31
	083 Move X0, [X24]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {89}
	087 Call 0x1C17DFC
	088 Move X0, [X24]
	089 Move X8, [X0+184]
	090 Move W9, [X8+56]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move W9, [X0+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {98}
	095 Call 0x1C17DFC
	096 Move X0, [X24]
	097 Move X8, [X0+184]
	098 Move X8, [X8+24]
	099 Compare X8, 0
	100 JumpIfEqual {193}
	101 Move W9, [X8+24]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X26, W23
	104 Add X9, X8, X26
	105 Move X9, [X9+32]
	106 Compare X9, 0
	107 JumpIfEqual {193}
	108 Move W9, [X9+16]
	109 Compare W9, 0
	110 JumpIfEqual {175}
	111 Move W9, [X0+224]
	112 Compare W9, 0
	113 JumpIfNotEqual {120}
	114 Call 0x1C17DFC
	115 Move X8, [X24]
	116 Move X8, [X8+184]
	117 Move X8, [X8+24]
	118 Compare X8, 0
	119 JumpIfEqual {193}
	120 Move W9, [X8+24]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Add X8, X8, X26
	123 Move X8, [X8+32]
	124 Compare X8, 0
	125 JumpIfEqual {193}
	126 Move X0, [X22]
	127 Move X21, [X8+88]
	128 Move W9, [X0+224]
	129 Compare W9, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Move X0, X21
	133 Move X1, X20
	134 Move X2, X31
	135 Call Object.op_Equality, X0, X1
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {175}
	140 Move X0, [X24]
	141 Move W8, [X0+224]
	142 Compare W8, 0
	143 JumpIfNotEqual {146}
	144 Call 0x1C17DFC
	145 Move X0, [X24]
	146 Move X8, [X0+184]
	147 Move X8, [X8+24]
	148 Compare X8, 0
	149 JumpIfEqual {193}
	150 Move W9, [X8+24]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Compare X19, 0
	153 JumpIfEqual {193}
	154 Add X8, X8, X26
	155 Move W10, [X19+28]
	156 Move X1, [X8+32]
	157 Move X8, [X19+16]
	158 Move X9, [X25]
	159 Add W10, W10, 1
	160 Move [X19+28], W10
	161 Compare X8, 0
	162 JumpIfEqual {193}
	163 NotImplemented "Instruction LDRSW not yet implemented."
	164 Move W11, [X8+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Add W9, W10, 1
	167 Add X8, X8, X10
	168 Move [X19+24], W9
	169 Move [X8+32], X1
	170 Move X8, [X9+32]
	171 Move X0, X19
	172 Move X8, [X8+192]
	173 Move X2, [X8+112]
	174 Call List`1<Object>.AddWithResize, X0, X1
	175 Add W23, W23, 1
	176 Compare X19, 0
	177 JumpIfEqual {193}
	178 Move X8, 0xF72000
	179 Move X8, [X8+944]
	180 Move X0, X19
	181 Move X20, [X31+64]
	182 Move X19, [X31+72]
	183 Move X22, [X31+48]
	184 Move X21, [X31+56]
	185 Move X1, [X8]
	186 Move X24, [X31+32]
	187 Move X23, [X31+40]
	188 Move X26, [X31+16]
	189 Move X25, [X31+24]
	190 Move X30, [X31+80]
	191 Call List`1<Object>.ToArray, X0
	192 Return X0
	193 Call 0x1C17F20
	194 Call 0x1C17F28

Method: System.Void pause(UnityEngine.GameObject gameObject, System.Int32 uniqueId)

Disassembly:
	0x031AEE2C FSUB S3, S3, S0
	0x031AEE30 FSUB S2, S2, S11
	0x031AEE34 FSUB S1, S1, S12
	0x031AEE38 FMUL S19, S4, S7
	0x031AEE3C FCMP S21, 0x0
	0x031AEE40 MOV V14.16B, V0.16B
	0x031AEE44 FADD S13, S17, S3
	0x031AEE48 FADD S16, S16, S2
	0x031AEE4C FADD S15, S23, S1
	0x031AEE50 FMUL S7, S5, S7
	0x031AEE54 STR S21, [X31 + 0x34]
	0x031AEE58 STP S9, S15, [X31 + 0x54]
	0x031AEE5C STP S8, S0, [X31 + 0x64]
	0x031AEE60 STR S12, [X31 + 0x6C]
	0x031AEE64 STP S19, S18, [X31 + 0x5C]
	0x031AEE68 B.LE 0x31AF254
	0x031AEE6C MOV X19, X0
	0x031AEE70 STP S7, S16, [X31 + 0x40]
	0x031AEE74 STP S13, S24, [X31 + 0x48]
	0x031AEE78 CBZ X0, 0x31AF340
	0x031AEE7C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x122E000
	006 Move X21, 0xF48000
	007 Move W8, [X20+3682]
	008 Move X21, [X21+1448]
	009 Move W19, W1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF48000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3682], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]

Method: System.Void pause(System.Int32 uniqueId)

Disassembly:
	0x031AEE80 MOV X1, X31
	0x031AEE84 BL 0x3C3F58C
	0x031AEE88 MOV X0, X19
	0x031AEE8C MOV X1, X31
	0x031AEE90 STP S2, S0, [X31 + 0x28]
	0x031AEE94 STR S1, [X31 + 0x24]
	0x031AEE98 BL 0x3C3DEB4
	0x031AEE9C STP S2, S0, [X31 + 0x14]
	0x031AEEA0 STP S3, S1, [X31 + 0x1C]
	0x031AEEA4 ADRP X20, 0xF45000
	0x031AEEA8 ADRP X21, 0xF45000
	0x031AEEAC ADRP X8, 0xFFFFFFFFFD93C000
	0x031AEEB0 LDR X20, [X20 + 0x5A8]
	0x031AEEB4 LDR X21, [X21 + 0x5A0]
	0x031AEEB8 LDR V0, [X8 + 0x17C]
	0x031AEEBC MOVZ W22, 0x1
	0x031AEEC0 FMOV S10, W31
	0x031AEEC4 MOVZ W23, 0x42F00000
	0x031AEEC8 ADRP X24, 0x122A000
	0x031AEECC ADRP X25, 0x122A000
	0x031AEED0 ADRP X26, 0x122A000
	0x031AEED4 ADRP X27, 0x122A000
	0x031AEED8 ADRP X28, 0x122A000
	0x031AEEDC MOV V13.16B, V14.16B
	0x031AEEE0 MOV V5.16B, V11.16B
	0x031AEEE4 MOVZ W29, 0x1
	0x031AEEE8 STR S0, [X31 + 0x30]
	0x031AEEEC STR S11, [X31 + 0x50]
	0x031AEEF0 SCVTF S0, W29
	0x031AEEF4 FMOV S1, W23
	0x031AEEF8 FDIV S0, S0, S1
	0x031AEEFC LDP S2, S1, [X31 + 0x44]
	0x031AEF00 LDR V4, [X31 + 0x4C]
	0x031AEF04 FMUL S3, S15, S0
	0x031AEF08 FADD S3, S8, S3
	0x031AEF0C FMUL S1, S1, S0
	0x031AEF10 FADD S1, S4, S1
	0x031AEF14 LDR V4, [X31 + 0x60]
	0x031AEF18 FMUL S1, S0, S1
	0x031AEF1C FMUL S2, S2, S0
	0x031AEF20 FADD S2, S9, S2
	0x031AEF24 FADD S1, S4, S1
	0x031AEF28 LDR V4, [X31 + 0x5C]
	0x031AEF2C FMUL S2, S0, S2
	0x031AEF30 FMUL S1, S0, S1
	0x031AEF34 FADD S14, S14, S1
	0x031AEF38 FADD S2, S4, S2
	0x031AEF3C LDR V4, [X31 + 0x40]
	0x031AEF40 LDR V1, [X31 + 0x6C]
	0x031AEF44 FMUL S3, S0, S3
	0x031AEF48 FMUL S2, S0, S2
	0x031AEF4C FADD S3, S4, S3
	0x031AEF50 FMUL S0, S0, S3
	0x031AEF54 MOV V15.16B, V5.16B
	0x031AEF58 FADD S15, S5, S2
	0x031AEF5C FADD S8, S1, S0
	0x031AEF60 MOV V0.16B, V13.16B
	0x031AEF64 MOV V1.16B, V11.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x122E000
	007 Move X20, 0xF48000
	008 Move W8, [X21+3683]
	009 Move X20, [X20+1448]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF48000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3683], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Move X8, [X0+184]
	027 Move X8, [X8+24]
	028 Compare X8, 0
	029 JumpIfEqual {70}
	030 Move W9, [X8+24]
	031 And W21, W19, 0xFFFF
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W22, W21
	034 Add X9, X8, X22
	035 Move X9, [X9+32]
	036 Compare X9, 0
	037 JumpIfEqual {70}
	038 Move W9, [X9+60]
	039 NotImplemented "Instruction SBFM not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W9, [X0+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {50}
	044 Call 0x1C17DFC
	045 Move X8, [X20]
	046 Move X8, [X8+184]
	047 Move X8, [X8+24]
	048 Compare X8, 0
	049 JumpIfEqual {70}
	050 Move W9, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X8, X8, X22
	053 Move X0, [X8+32]
	054 Compare X0, 0
	055 JumpIfEqual {70}
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X1, X31
	061 Move X30, [X31+48]
	062 Call LTDescr.pause, X0
	063 Return 
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 
	070 Call 0x1C17F20
	071 Call 0x1C17F28

Method: System.Void pause(UnityEngine.GameObject gameObject)

Disassembly:
	0x031AEF68 MOV V2.16B, V12.16B
	0x031AEF6C MOV V3.16B, V14.16B
	0x031AEF70 MOV V4.16B, V15.16B
	0x031AEF74 MOV V5.16B, V8.16B
	0x031AEF78 MOV X0, X31
	0x031AEF7C BL 0x3C0CB04
	0x031AEF80 LDRB W8, [X24 + 0x784]
	0x031AEF84 CBNZ W8, 0x31AEF94
	0x031AEF88 MOV X0, X20
	0x031AEF8C BL 0x1C16CF4
	0x031AEF90 STRB W22, [X24 + 0x784]
	0x031AEF94 LDR X0, [X20]
	0x031AEF98 LDR W8, [X0 + 0xE0]
	0x031AEF9C CBNZ W8, 0x31AEFA4
	0x031AEFA0 BL 0x1C16DFC
	0x031AEFA4 FSUB S0, S14, S13
	0x031AEFA8 FSUB S1, S15, S11
	0x031AEFAC FSUB S2, S8, S12
	0x031AEFB0 FMUL S0, S0, S0
	0x031AEFB4 FMUL S1, S1, S1
	0x031AEFB8 FADD S0, S0, S1
	0x031AEFBC FMUL S1, S2, S2
	0x031AEFC0 FADD S0, S1, S0
	0x031AEFC4 FSQRT S0, S0
	0x031AEFC8 FADD S10, S10, S0
	0x031AEFCC FMOV S0, 1
	0x031AEFD0 FCMP S10, S0
	0x031AEFD4 B.LE 0x31AF1DC
	0x031AEFD8 MOV X0, X19
	0x031AEFDC MOV V0.16B, V14.16B
	0x031AEFE0 MOV V1.16B, V15.16B
	0x031AEFE4 MOV V2.16B, V8.16B
	0x031AEFE8 MOV X1, X31
	0x031AEFEC BL 0x3C3F62C
	0x031AEFF0 LDRB W8, [X25 + 0xA1F]
	0x031AEFF4 CBNZ W8, 0x31AF004
	0x031AEFF8 MOV X0, X21
	0x031AEFFC BL 0x1C16CF4
	0x031AF000 STRB W22, [X25 + 0xA1F]
	0x031AF004 LDR X8, [X21]
	0x031AF008 MOV X0, X19
	0x031AF00C MOV V0.16B, V13.16B
	0x031AF010 MOV V1.16B, V11.16B
	0x031AF014 LDR X8, [X8 + 0xB8]
	0x031AF018 MOV V2.16B, V12.16B
	0x031AF01C MOV X1, X31
	0x031AF020 LDP S3, S4, [X8 + 0x48]
	0x031AF024 LDR V5, [X8 + 0x50]
	0x031AF028 BL 0x3C40744
	0x031AF02C LDRB W8, [X26 + 0xB70]
	0x031AF030 CBNZ W8, 0x31AF040
	0x031AF034 MOV X0, X21
	0x031AF038 BL 0x1C16CF4
	0x031AF03C STRB W22, [X26 + 0xB70]
	0x031AF040 LDR X8, [X21]
	0x031AF044 MOV X0, X19
	0x031AF048 MOV X1, X31
	0x031AF04C LDR X8, [X8 + 0xB8]
	0x031AF050 LDP S0, S1, [X8 + 0x3C]
	0x031AF054 LDR V2, [X8 + 0x44]
	0x031AF058 BL 0x3C40610
	0x031AF05C LDRB W8, [X27 + 0x785]
	0x031AF060 MOV V9.16B, V1.16B
	0x031AF064 STR S0, [X31 + 0x3C]
	0x031AF068 CBNZ W8, 0x31AF088
	0x031AF06C MOV X0, X20
	0x031AF070 STR S10, [X31 + 0x38]
	0x031AF074 MOV V10.16B, V2.16B
	0x031AF078 BL 0x1C16CF4
	0x031AF07C MOV V2.16B, V10.16B
	0x031AF080 LDR V10, [X31 + 0x38]
	0x031AF084 STRB W22, [X27 + 0x785]
	0x031AF088 LDR X0, [X20]
	0x031AF08C LDR W8, [X0 + 0xE0]
	0x031AF090 CBNZ W8, 0x31AF0A8
	0x031AF094 STR S10, [X31 + 0x38]
	0x031AF098 MOV V10.16B, V2.16B
	0x031AF09C BL 0x1C16DFC
	0x031AF0A0 MOV V2.16B, V10.16B
	0x031AF0A4 LDR V10, [X31 + 0x38]
	0x031AF0A8 FSUB S0, S13, S14
	0x031AF0AC FSUB S5, S11, S15
	0x031AF0B0 FSUB S6, S12, S8
	0x031AF0B4 FMUL S3, S0, S0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122E000
	009 Move W8, [X20+3684]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF48000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X0, 0xF46000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3684], W8
	023 Compare X19, 0
	024 JumpIfEqual {100}
	025 Move X21, 0xF48000
	026 Move X22, 0xF46000
	027 Move X21, [X21+1448]
	028 Move X22, [X22+1432]
	029 Move X0, X19
	030 Move X1, X31
	031 Call GameObject.get_transform, X0
	032 Move X19, X0
	033 Move W23, W31
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X21]
	040 Move X8, [X0+184]
	041 Move W9, [X8+56]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {49}
	046 Call 0x1C17DFC
	047 Move X8, [X21]
	048 Move X8, [X8+184]
	049 Move X8, [X8+24]
	050 Compare X8, 0
	051 JumpIfEqual {100}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X24, W23
	055 Add X8, X8, X24
	056 Move X8, [X8+32]
	057 Compare X8, 0
	058 JumpIfEqual {100}
	059 Move X0, [X22]
	060 Move X20, [X8+88]
	061 Move W9, [X0+224]
	062 Compare W9, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X20
	066 Move X1, X19
	067 Move X2, X31
	068 Call Object.op_Equality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {91}
	073 Move X0, [X21]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move X0, [X21]
	079 Move X8, [X0+184]
	080 Move X8, [X8+24]
	081 Compare X8, 0
	082 JumpIfEqual {100}
	083 Move W9, [X8+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Add X8, X8, X24
	086 Move X0, [X8+32]
	087 Compare X0, 0
	088 JumpIfEqual {100}
	089 Move X1, X31
	090 Call LTDescr.pause, X0
	091 Add W23, W23, 1
	092 Move X20, [X31+48]
	093 Move X19, [X31+56]
	094 Move X22, [X31+32]
	095 Move X21, [X31+40]
	096 Move X24, [X31+16]
	097 Move X23, [X31+24]
	098 Move X30, [X31+64]
	099 Return 
	100 Call 0x1C17F20
	101 Call 0x1C17F28

Method: System.Void pauseAll()

Disassembly:
	0x031AF0B8 FMUL S4, S5, S5
	0x031AF0BC FADD S3, S3, S4
	0x031AF0C0 FMUL S4, S6, S6
	0x031AF0C4 FADD S3, S4, S3
	0x031AF0C8 LDR V4, [X31 + 0x30]
	0x031AF0CC FSQRT S3, S3
	0x031AF0D0 FCMP S3, S4
	0x031AF0D4 B.LE 0x31AF0E8
	0x031AF0D8 FDIV S11, S0, S3
	0x031AF0DC FDIV S12, S5, S3
	0x031AF0E0 FDIV S13, S6, S3
	0x031AF0E4 B 0x31AF11C
	0x031AF0E8 LDRB W8, [X28 + 0x783]
	0x031AF0EC CBNZ W8, 0x31AF10C
	0x031AF0F0 MOV X0, X21
	0x031AF0F4 MOV V11.16B, V10.16B
	0x031AF0F8 MOV V10.16B, V2.16B
	0x031AF0FC BL 0x1C16CF4
	0x031AF100 MOV V2.16B, V10.16B
	0x031AF104 MOV V10.16B, V11.16B
	0x031AF108 STRB W22, [X28 + 0x783]
	0x031AF10C LDR X8, [X21]
	0x031AF110 LDR X8, [X8 + 0xB8]
	0x031AF114 LDP S11, S12, [X8]
	0x031AF118 LDR V13, [X8 + 0x8]
	0x031AF11C LDR V0, [X31 + 0x3C]
	0x031AF120 FADD S1, S9, S12
	0x031AF124 LDR V9, [X31 + 0x34]
	0x031AF128 FADD S2, S2, S13
	0x031AF12C FADD S0, S0, S11
	0x031AF130 MOV X0, X31
	0x031AF134 FMUL S0, S0, S9
	0x031AF138 FMUL S1, S1, S9
	0x031AF13C FMUL S2, S2, S9
	0x031AF140 FADD S3, S14, S0
	0x031AF144 FADD S4, S15, S1
	0x031AF148 FADD S5, S8, S2
	0x031AF14C MOV V0.16B, V14.16B
	0x031AF150 MOV V1.16B, V15.16B
	0x031AF154 MOV V2.16B, V8.16B
	0x031AF158 BL 0x3C0CB04
	0x031AF15C LDRB W8, [X26 + 0xB70]
	0x031AF160 CBNZ W8, 0x31AF170
	0x031AF164 MOV X0, X21
	0x031AF168 BL 0x1C16CF4
	0x031AF16C STRB W22, [X26 + 0xB70]
	0x031AF170 LDR X8, [X21]
	0x031AF174 FMOV S3, -1
	0x031AF178 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122D000
	005 Move X19, 0xF47000
	006 Move W8, [X20+3685]
	007 Move X19, [X19+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF47000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3685], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Call LeanTween.init
	023 Move W20, W31
	024 Move X0, [X19]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X19]
	030 Move X8, [X0+184]
	031 Move W9, [X8+56]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W9, [X0+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {39}
	036 Call 0x1C17DFC
	037 Move X8, [X19]
	038 Move X8, [X8+184]
	039 Move X8, [X8+24]
	040 Compare X8, 0
	041 JumpIfEqual {55}
	042 Move W9, [X8+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X8, X8, W20
	045 Move X0, [X8+32]
	046 Compare X0, 0
	047 JumpIfEqual {55}
	048 Move X1, X31
	049 Call LTDescr.pause, X0
	050 Add W20, W20, 1
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return 
	055 Call 0x1C17F20
	056 Call 0x1C17F28

Method: System.Void resumeAll()

Disassembly:
	0x031AF17C MOV X1, X31
	0x031AF180 LDR X8, [X8 + 0xB8]
	0x031AF184 FADD S10, S10, S3
	0x031AF188 LDP S0, S1, [X8 + 0x3C]
	0x031AF18C LDR V2, [X8 + 0x44]
	0x031AF190 FNEG S0, S0
	0x031AF194 FNEG S1, S1
	0x031AF198 FNEG S2, S2
	0x031AF19C BL 0x3C40610
	0x031AF1A0 FADD S0, S11, S0
	0x031AF1A4 FADD S1, S12, S1
	0x031AF1A8 FADD S2, S13, S2
	0x031AF1AC FMUL S0, S0, S9
	0x031AF1B0 FMUL S1, S1, S9
	0x031AF1B4 FMUL S2, S2, S9
	0x031AF1B8 FADD S3, S14, S0
	0x031AF1BC FADD S4, S15, S1
	0x031AF1C0 FADD S5, S8, S2
	0x031AF1C4 MOV V0.16B, V14.16B
	0x031AF1C8 MOV V1.16B, V15.16B
	0x031AF1CC MOV V2.16B, V8.16B
	0x031AF1D0 MOV X0, X31
	0x031AF1D4 BL 0x3C0CB04
	0x031AF1D8 LDR V9, [X31 + 0x54]
	0x031AF1DC MOV V13.16B, V14.16B
	0x031AF1E0 MOV V11.16B, V15.16B
	0x031AF1E4 MOV V12.16B, V8.16B
	0x031AF1E8 LDR V5, [X31 + 0x50]
	0x031AF1EC LDP S8, S14, [X31 + 0x64]
	0x031AF1F0 LDR V15, [X31 + 0x58]
	0x031AF1F4 ADD W29, W29, 0x1
	0x031AF1F8 CMP W29, 0x79
	0x031AF1FC B.NE 0x31AEEF0
	0x031AF200 LDP S2, S0, [X31 + 0x28]
	0x031AF204 LDR V1, [X31 + 0x24]
	0x031AF208 MOV X0, X19
	0x031AF20C MOV X1, X31
	0x031AF210 BL 0x3C3F62C
	0x031AF214 MOV X0, X19
	0x031AF218 LDP S2, S0, [X31 + 0x14]
	0x031AF21C LDP S3, S1, [X31 + 0x1C]
	0x031AF220 LDP X20, X19, [X31 + 0x100]
	0x031AF224 LDP X22, X21, [X31 + 0xF0]
	0x031AF228 LDP X24, X23, [X31 + 0xE0]
	0x031AF22C LDP X26, X25, [X31 + 0xD0]
	0x031AF230 LDP X28, X27, [X31 + 0xC0]
	0x031AF234 LDP X29, X30, [X31 + 0xB0]
	0x031AF238 LDP D9, D8, [X31 + 0xA0]
	0x031AF23C LDP D11, D10, [X31 + 0x90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122D000
	005 Move X19, 0xF47000
	006 Move W8, [X20+3686]
	007 Move X19, [X19+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF47000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3686], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Call LeanTween.init
	023 Move W20, W31
	024 Move X0, [X19]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X19]
	030 Move X8, [X0+184]
	031 Move W9, [X8+56]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W9, [X0+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {39}
	036 Call 0x1C17DFC
	037 Move X8, [X19]
	038 Move X8, [X8+184]
	039 Move X8, [X8+24]
	040 Compare X8, 0
	041 JumpIfEqual {55}
	042 Move W9, [X8+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X8, X8, W20
	045 Move X0, [X8+32]
	046 Compare X0, 0
	047 JumpIfEqual {55}
	048 Move X1, X31
	049 Call LTDescr.resume, X0
	050 Add W20, W20, 1
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return 
	055 Call 0x1C17F20
	056 Call 0x1C17F28

Method: System.Void resume(UnityEngine.GameObject gameObject, System.Int32 uniqueId)

Disassembly:
	0x031AF240 LDP D13, D12, [X31 + 0x80]
	0x031AF244 LDP D15, D14, [X31 + 0x70]
	0x031AF248 MOV X1, X31
	0x031AF24C ADD X31, X31, 0x110
	0x031AF250 B 0x3C3F7AC
	0x031AF254 MOVZ W19, 0x1
	0x031AF258 MOV V0.16B, V14.16B
	0x031AF25C MOV V1.16B, V11.16B
	0x031AF260 MOV V2.16B, V12.16B
	0x031AF264 SCVTF S3, W19
	0x031AF268 FMOV S4, 30
	0x031AF26C FDIV S3, S3, S4
	0x031AF270 FMUL S4, S13, S3
	0x031AF274 FMUL S5, S16, S3
	0x031AF278 FMUL S6, S15, S3
	0x031AF27C FADD S4, S24, S4
	0x031AF280 FADD S5, S9, S5
	0x031AF284 FADD S6, S8, S6
	0x031AF288 FMUL S4, S3, S4
	0x031AF28C FMUL S5, S3, S5
	0x031AF290 FMUL S6, S3, S6

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x122D000
	006 Move X21, 0xF47000
	007 Move W8, [X20+3687]
	008 Move X21, [X21+1448]
	009 Move W19, W1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF47000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3687], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]

Method: System.Void resume(System.Int32 uniqueId)

Disassembly:
	0x031AF294 FADD S4, S18, S4
	0x031AF298 FADD S5, S19, S5
	0x031AF29C FADD S6, S7, S6
	0x031AF2A0 FMUL S4, S3, S4
	0x031AF2A4 FMUL S5, S3, S5
	0x031AF2A8 FMUL S3, S3, S6
	0x031AF2AC LDR V6, [X31 + 0x68]
	0x031AF2B0 FADD S9, S11, S5
	0x031AF2B4 MOV X0, X31
	0x031AF2B8 MOV V15.16B, V16.16B
	0x031AF2BC FADD S8, S6, S4
	0x031AF2C0 LDR V4, [X31 + 0x6C]
	0x031AF2C4 MOV V14.16B, V7.16B
	0x031AF2C8 MOV V12.16B, V24.16B
	0x031AF2CC FADD S10, S4, S3
	0x031AF2D0 MOV V3.16B, V8.16B
	0x031AF2D4 MOV V4.16B, V9.16B
	0x031AF2D8 MOV V5.16B, V10.16B
	0x031AF2DC BL 0x3C0CB04
	0x031AF2E0 MOV V0.16B, V8.16B
	0x031AF2E4 LDP S18, S8, [X31 + 0x60]
	0x031AF2E8 MOV V1.16B, V9.16B
	0x031AF2EC MOV V16.16B, V15.16B
	0x031AF2F0 LDP S9, S15, [X31 + 0x54]
	0x031AF2F4 LDR V19, [X31 + 0x5C]
	0x031AF2F8 ADD W19, W19, 0x1
	0x031AF2FC CMP W19, 0x1F
	0x031AF300 MOV V2.16B, V10.16B
	0x031AF304 MOV V24.16B, V12.16B
	0x031AF308 MOV V7.16B, V14.16B
	0x031AF30C B.NE 0x31AF264
	0x031AF310 LDP X20, X19, [X31 + 0x100]
	0x031AF314 LDP X22, X21, [X31 + 0xF0]
	0x031AF318 LDP X24, X23, [X31 + 0xE0]
	0x031AF31C LDP X26, X25, [X31 + 0xD0]
	0x031AF320 LDP X28, X27, [X31 + 0xC0]
	0x031AF324 LDP X29, X30, [X31 + 0xB0]
	0x031AF328 LDP D9, D8, [X31 + 0xA0]
	0x031AF32C LDP D11, D10, [X31 + 0x90]
	0x031AF330 LDP D13, D12, [X31 + 0x80]
	0x031AF334 LDP D15, D14, [X31 + 0x70]
	0x031AF338 ADD X31, X31, 0x110
	0x031AF33C RET
	0x031AF340 BL 0x1C16F20
	0x031AF344 STP X30, X21, [X31 - 0x20]!
	0x031AF348 STP X20, X19, [X31 + 0x10]
	0x031AF34C ADRP X21, 0x122C000
	0x031AF350 ADRP X20, 0xF46000
	0x031AF354 LDRB W8, [X21 + 0xE71]
	0x031AF358 LDR X20, [X20 + 0x5A8]
	0x031AF35C MOV X19, X0
	0x031AF360 TBNZ X8, 0x0, 0x31AF384
	0x031AF364 ADRP X0, 0xF44000
	0x031AF368 LDR X0, [X0 + 0xA28]
	0x031AF36C BL 0x1C16CF4
	0x031AF370 ADRP X0, 0xF46000
	0x031AF374 LDR X0, [X0 + 0x5A8]
	0x031AF378 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x122D000
	007 Move X20, 0xF47000
	008 Move W8, [X21+3688]
	009 Move X20, [X20+1448]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF47000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3688], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X20]
	026 Move X8, [X0+184]
	027 Move X8, [X8+24]
	028 Compare X8, 0
	029 JumpIfEqual {70}
	030 Move W9, [X8+24]
	031 And W21, W19, 0xFFFF
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W22, W21
	034 Add X9, X8, X22
	035 Move X9, [X9+32]
	036 Compare X9, 0
	037 JumpIfEqual {70}
	038 Move W9, [X9+60]
	039 NotImplemented "Instruction SBFM not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W9, [X0+224]
	042 Compare W9, 0
	043 JumpIfNotEqual {50}
	044 Call 0x1C17DFC
	045 Move X8, [X20]
	046 Move X8, [X8+184]
	047 Move X8, [X8+24]
	048 Compare X8, 0
	049 JumpIfEqual {70}
	050 Move W9, [X8+24]
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Add X8, X8, X22
	053 Move X0, [X8+32]
	054 Compare X0, 0
	055 JumpIfEqual {70}
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X1, X31
	061 Move X30, [X31+48]
	062 Call LTDescr.resume, X0
	063 Return 
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return 
	070 Call 0x1C17F20
	071 Call 0x1C17F28

Method: System.Void resume(UnityEngine.GameObject gameObject)

Disassembly:
	0x031AF37C MOVZ W8, 0x1
	0x031AF380 STRB W8, [X21 + 0xE71]
	0x031AF384 LDR X0, [X20]
	0x031AF388 ADRP X21, 0xF44000
	0x031AF38C LDR W8, [X0 + 0xE0]
	0x031AF390 LDR X21, [X21 + 0xA28]
	0x031AF394 CBNZ W8, 0x31AF3A0
	0x031AF398 BL 0x1C16DFC
	0x031AF39C LDR X0, [X20]
	0x031AF3A0 LDR X8, [X21]
	0x031AF3A4 LDR X9, [X0 + 0xB8]
	0x031AF3A8 LDR W10, [X8 + 0xE0]
	0x031AF3AC LDRB W20, [X9]
	0x031AF3B0 CBNZ W10, 0x31AF3BC
	0x031AF3B4 MOV X0, X8
	0x031AF3B8 BL 0x1C16DFC
	0x031AF3BC MOV X0, X19
	0x031AF3C0 MOV X1, X31
	0x031AF3C4 CBZ W20, 0x31AF3D0
	0x031AF3C8 BL 0x3C0649C
	0x031AF3CC B 0x31AF3D4
	0x031AF3D0 BL 0x3C06048
	0x031AF3D4 LDP X20, X19, [X31 + 0x10]
	0x031AF3D8 MOV X0, X31
	0x031AF3DC LDP X30, X21, [X31], #0x20
	0x031AF3E0 RET
	0x031AF3E4 STR X30, [X31 - 0x20]!
	0x031AF3E8 STP X20, X19, [X31 + 0x10]
	0x031AF3EC ADRP X20, 0x122C000
	0x031AF3F0 ADRP X19, 0xF44000
	0x031AF3F4 LDRB W8, [X20 + 0xE72]
	0x031AF3F8 LDR X19, [X19 + 0xA28]
	0x031AF3FC TBNZ X8, 0x0, 0x31AF420
	0x031AF400 ADRP X0, 0xF44000
	0x031AF404 LDR X0, [X0 + 0xA28]
	0x031AF408 BL 0x1C16CF4
	0x031AF40C ADRP X0, 0xF70000
	0x031AF410 LDR X0, [X0 + 0x3C8]
	0x031AF414 BL 0x1C16CF4
	0x031AF418 MOVZ W8, 0x1
	0x031AF41C STRB W8, [X20 + 0xE72]
	0x031AF420 LDR X0, [X19]
	0x031AF424 ADRP X19, 0xF70000
	0x031AF428 LDR W8, [X0 + 0xE0]
	0x031AF42C LDR X19, [X19 + 0x3C8]
	0x031AF430 CBNZ W8, 0x31AF438
	0x031AF434 BL 0x1C16DFC
	0x031AF438 LDR X0, [X19]
	0x031AF43C MOV X1, X31
	0x031AF440 BL 0x3C0649C
	0x031AF444 LDP X20, X19, [X31 + 0x10]
	0x031AF448 MOV X0, X31
	0x031AF44C LDR X30, [X31], #0x20
	0x031AF450 RET
	0x031AF454 STR D8, [X31 - 0x30]!
	0x031AF458 STP X30, X21, [X31 + 0x10]
	0x031AF45C STP X20, X19, [X31 + 0x20]
	0x031AF460 ADRP X20, 0x122C000
	0x031AF464 ADRP X19, 0xF46000
	0x031AF468 LDRB W8, [X20 + 0xE73]
	0x031AF46C LDR X19, [X19 + 0x5A8]
	0x031AF470 TBNZ X8, 0x0, 0x31AF4B8
	0x031AF474 ADRP X0, 0xF70000
	0x031AF478 LDR X0, [X0 + 0x368]
	0x031AF47C BL 0x1C16CF4
	0x031AF480 ADRP X0, 0xF46000
	0x031AF484 LDR X0, [X0 + 0x5A8]
	0x031AF488 BL 0x1C16CF4
	0x031AF48C ADRP X0, 0xF70000
	0x031AF490 LDR X0, [X0 + 0x3D0]
	0x031AF494 BL 0x1C16CF4
	0x031AF498 ADRP X0, 0xF70000
	0x031AF49C LDR X0, [X0 + 0x3D8]
	0x031AF4A0 BL 0x1C16CF4
	0x031AF4A4 ADRP X0, 0xF70000
	0x031AF4A8 LDR X0, [X0 + 0x3E0]
	0x031AF4AC BL 0x1C16CF4
	0x031AF4B0 MOVZ W8, 0x1
	0x031AF4B4 STRB W8, [X20 + 0xE73]
	0x031AF4B8 LDR X0, [X19]
	0x031AF4BC LDR W8, [X0 + 0xE0]
	0x031AF4C0 CBNZ W8, 0x31AF4C8
	0x031AF4C4 BL 0x1C16DFC
	0x031AF4C8 BL 0x31AB9B0

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122D000
	009 Move W8, [X20+3689]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF47000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X0, 0xF45000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3689], W8
	023 Compare X19, 0
	024 JumpIfEqual {100}
	025 Move X21, 0xF47000
	026 Move X22, 0xF45000
	027 Move X21, [X21+1448]
	028 Move X22, [X22+1432]
	029 Move X0, X19
	030 Move X1, X31
	031 Call GameObject.get_transform, X0
	032 Move X19, X0
	033 Move W23, W31
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X21]
	040 Move X8, [X0+184]
	041 Move W9, [X8+56]
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {49}
	046 Call 0x1C17DFC
	047 Move X8, [X21]
	048 Move X8, [X8+184]
	049 Move X8, [X8+24]
	050 Compare X8, 0
	051 JumpIfEqual {100}
	052 Move W9, [X8+24]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X24, W23
	055 Add X8, X8, X24
	056 Move X8, [X8+32]
	057 Compare X8, 0
	058 JumpIfEqual {100}
	059 Move X0, [X22]
	060 Move X20, [X8+88]
	061 Move W9, [X0+224]
	062 Compare W9, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X20
	066 Move X1, X19
	067 Move X2, X31
	068 Call Object.op_Equality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {91}
	073 Move X0, [X21]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move X0, [X21]
	079 Move X8, [X0+184]
	080 Move X8, [X8+24]
	081 Compare X8, 0
	082 JumpIfEqual {100}
	083 Move W9, [X8+24]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Add X8, X8, X24
	086 Move X0, [X8+32]
	087 Compare X0, 0
	088 JumpIfEqual {100}
	089 Move X1, X31
	090 Call LTDescr.resume, X0
	091 Add W23, W23, 1
	092 Move X20, [X31+48]
	093 Move X19, [X31+56]
	094 Move X22, [X31+32]
	095 Move X21, [X31+40]
	096 Move X24, [X31+16]
	097 Move X23, [X31+24]
	098 Move X30, [X31+64]
	099 Return 
	100 Call 0x1C17F20
	101 Call 0x1C17F28

Method: System.Boolean isPaused(UnityEngine.GameObject gameObject = null)

Disassembly:
	0x031AF4CC LDR X0, [X19]
	0x031AF4D0 MOVI V8.2S, 0x1
	0x031AF4D4 LDR X8, [X0 + 0xB8]
	0x031AF4D8 LDR W9, [X8 + 0x84]
	0x031AF4DC STP W9, W31, [X8 + 0x60]
	0x031AF4E0 LDR W8, [X0 + 0xE0]
	0x031AF4E4 CBNZ W8, 0x31AF4F0
	0x031AF4E8 BL 0x1C16DFC
	0x031AF4EC LDR X0, [X19]
	0x031AF4F0 LDR X8, [X0 + 0xB8]
	0x031AF4F4 LDR W11, [X0 + 0xE0]
	0x031AF4F8 LDR W9, [X8 + 0x64]
	0x031AF4FC LDR W10, [X8 + 0x3C]
	0x031AF500 CMP W9, W10
	0x031AF504 B.GT 0x31AF5D4
	0x031AF508 CBZ W11, 0x31AF518
	0x031AF50C CMP W9, W10
	0x031AF510 B.LT 0x31AF548
	0x031AF514 B 0x31AF5F4
	0x031AF518 BL 0x1C16DFC
	0x031AF51C LDR X0, [X19]
	0x031AF520 LDR X8, [X0 + 0xB8]
	0x031AF524 LDR W9, [X0 + 0xE0]
	0x031AF528 LDR W20, [X8 + 0x64]
	0x031AF52C LDR W21, [X8 + 0x3C]
	0x031AF530 CBNZ W9, 0x31AF540
	0x031AF534 BL 0x1C16DFC
	0x031AF538 LDR X0, [X19]
	0x031AF53C LDR X8, [X0 + 0xB8]
	0x031AF540 CMP W20, W21
	0x031AF544 B.GE 0x31AF5F4
	0x031AF548 LDR W9, [X8 + 0x60]
	0x031AF54C LDR W10, [X8 + 0x3C]
	0x031AF550 CMP W9, W10
	0x031AF554 B.LT 0x31AF570
	0x031AF558 LDR W9, [X0 + 0xE0]
	0x031AF55C CBNZ W9, 0x31AF56C
	0x031AF560 BL 0x1C16DFC
	0x031AF564 LDR X0, [X19]
	0x031AF568 LDR X8, [X0 + 0xB8]
	0x031AF56C STR W31, [X8 + 0x60]
	0x031AF570 LDR W8, [X0 + 0xE0]
	0x031AF574 CBNZ W8, 0x31AF580
	0x031AF578 BL 0x1C16DFC
	0x031AF57C LDR X0, [X19]
	0x031AF580 LDR X9, [X0 + 0xB8]
	0x031AF584 LDR X8, [X9 + 0x18]
	0x031AF588 CBZ X8, 0x31AF7AC
	0x031AF58C LDRSW X9, [X9 + 0x60]
	0x031AF590 LDR W10, [X8 + 0x18]
	0x031AF594 CMP W9, W10
	0x031AF598 B.CS 0x31AF7B0
	0x031AF59C ADD X8, X8, X9, 0x3, LSL
	0x031AF5A0 LDR X8, [X8 + 0x20]
	0x031AF5A4 CBZ X8, 0x31AF7AC
	0x031AF5A8 LDR W9, [X0 + 0xE0]
	0x031AF5AC LDRB W20, [X8 + 0x10]
	0x031AF5B0 CBNZ W9, 0x31AF5BC
	0x031AF5B4 BL 0x1C16DFC
	0x031AF5B8 LDR X0, [X19]
	0x031AF5BC LDR X8, [X0 + 0xB8]
	0x031AF5C0 CBZ W20, 0x31AF640
	0x031AF5C4 LDR V0, [X8 + 0x60]
	0x031AF5C8 ADD S0.2S, S0.2S, S8.2S
	0x031AF5CC STR D0, [X8 + 0x60]
	0x031AF5D0 B 0x31AF4E0
	0x031AF5D4 CBNZ W11, 0x31AF5DC
	0x031AF5D8 BL 0x1C16DFC
	0x031AF5DC ADRP X8, 0xF70000
	0x031AF5E0 LDR X8, [X8 + 0x3D8]
	0x031AF5E4 LDR X0, [X8]
	0x031AF5E8 BL 0x31AF344
	0x031AF5EC LDR X0, [X19]
	0x031AF5F0 B 0x31AF6BC
	0x031AF5F4 LDR W8, [X8 + 0x3C]
	0x031AF5F8 ADD X0, X31, 0xC
	0x031AF5FC MOV X1, X31
	0x031AF600 UBFM W8, W8, 0x1F, 0x1E
	0x031AF604 STR W8, [X31 + 0xC]
	0x031AF608 BL 0x337B6E0
	0x031AF60C ADRP X8, 0xF70000
	0x031AF610 LDR X8, [X8 + 0x3E0]
	0x031AF614 ADRP X9, 0xF70000
	0x031AF618 LDR X9, [X9 + 0x3D0]
	0x031AF61C MOV X1, X0
	0x031AF620 LDR X8, [X8]
	0x031AF624 MOV X3, X31
	0x031AF628 LDR X2, [X9]
	0x031AF62C MOV X0, X8
	0x031AF630 BL 0x32274B8
	0x031AF634 BL 0x31AF344
	0x031AF638 MOV X0, X31
	0x031AF63C B 0x31AF79C
	0x031AF640 LDR W9, [X8 + 0x60]
	0x031AF644 LDR W10, [X8 + 0x38]
	0x031AF648 ADD W9, W9, 0x1
	0x031AF64C CMP W9, W10
	0x031AF650 B.LE 0x31AF69C
	0x031AF654 LDR W10, [X0 + 0xE0]
	0x031AF658 CBNZ W10, 0x31AF670
	0x031AF65C BL 0x1C16DFC
	0x031AF660 LDR X0, [X19]
	0x031AF664 LDR X8, [X0 + 0xB8]
	0x031AF668 LDR W9, [X8 + 0x60]
	0x031AF66C ADD W9, W9, 0x1
	0x031AF670 LDR W10, [X8 + 0x3C]
	0x031AF674 CMP W9, W10
	0x031AF678 B.GE 0x31AF69C
	0x031AF67C LDR W10, [X0 + 0xE0]
	0x031AF680 CBNZ W10, 0x31AF698
	0x031AF684 BL 0x1C16DFC
	0x031AF688 LDR X0, [X19]
	0x031AF68C LDR X8, [X0 + 0xB8]
	0x031AF690 LDR W9, [X8 + 0x60]
	0x031AF694 ADD W9, W9, 0x1
	0x031AF698 STR W9, [X8 + 0x38]
	0x031AF69C LDR W8, [X0 + 0xE0]
	0x031AF6A0 CBNZ W8, 0x31AF6AC
	0x031AF6A4 BL 0x1C16DFC
	0x031AF6A8 LDR X0, [X19]
	0x031AF6AC LDR X8, [X0 + 0xB8]
	0x031AF6B0 LDR W9, [X8 + 0x60]
	0x031AF6B4 ADD W9, W9, 0x1
	0x031AF6B8 STR W9, [X8 + 0x84]
	0x031AF6BC LDR W8, [X0 + 0xE0]
	0x031AF6C0 CBNZ W8, 0x31AF6CC
	0x031AF6C4 BL 0x1C16DFC
	0x031AF6C8 LDR X0, [X19]
	0x031AF6CC LDR X9, [X0 + 0xB8]
	0x031AF6D0 LDR X8, [X9 + 0x18]
	0x031AF6D4 CBZ X8, 0x31AF7AC
	0x031AF6D8 LDRSW X9, [X9 + 0x60]
	0x031AF6DC LDR W10, [X8 + 0x18]
	0x031AF6E0 CMP W9, W10
	0x031AF6E4 B.CS 0x31AF7B0
	0x031AF6E8 ADD X8, X8, X9, 0x3, LSL
	0x031AF6EC LDR X0, [X8 + 0x20]
	0x031AF6F0 CBZ X0, 0x31AF7AC
	0x031AF6F4 MOV X1, X31
	0x031AF6F8 BL 0x31BFD3C
	0x031AF6FC LDR X0, [X19]
	0x031AF700 LDR X8, [X0 + 0xB8]
	0x031AF704 LDR W9, [X8 + 0x5C]
	0x031AF708 ADD W9, W9, 0x1
	0x031AF70C CMP W9, 0x8000
	0x031AF710 STR W9, [X8 + 0x5C]
	0x031AF714 B.LS 0x31AF730
	0x031AF718 LDR W9, [X0 + 0xE0]
	0x031AF71C CBNZ W9, 0x31AF72C
	0x031AF720 BL 0x1C16DFC
	0x031AF724 LDR X0, [X19]
	0x031AF728 LDR X8, [X0 + 0xB8]
	0x031AF72C STR W31, [X8 + 0x5C]
	0x031AF730 LDR W8, [X0 + 0xE0]
	0x031AF734 CBNZ W8, 0x31AF740
	0x031AF738 BL 0x1C16DFC
	0x031AF73C LDR X0, [X19]
	0x031AF740 LDR X8, [X0 + 0xB8]
	0x031AF744 LDR X9, [X8 + 0x18]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x122D000
	011 Move X21, 0xF45000
	012 Move W8, [X20+3690]
	013 Move X21, [X21+1432]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xF47000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move X0, 0xF45000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move X0, 0xF45000
	026 Move X0, [X0+2704]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+3690], W8
	030 Move X0, [X21]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {103}
	043 Move X21, 0xF47000
	044 Move X23, 0xF45000
	045 Move X21, [X21+1448]
	046 Move X23, [X23+2704]
	047 Move W20, W31
	048 Move X0, [X21]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {54}
	052 Call 0x1C17DFC
	053 Move X0, [X21]
	054 Move X8, [X0+184]
	055 Move W9, [X8+56]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CSET not yet implemented."
	058 Move W9, [X0+224]
	059 Compare W9, 0
	060 JumpIfNotEqual {64}
	061 Call 0x1C17DFC
	062 Move X8, [X21]
	063 Move X8, [X8+184]
	064 Move X8, [X8+24]
	065 Compare X8, 0
	066 JumpIfEqual {189}
	067 Move W9, [X8+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Add X8, X8, W20
	070 Move X8, [X8+32]
	071 Compare X8, 0
	072 JumpIfEqual {189}
	073 Move V0, [X8+64]
	074 Move X0, [X23]
	075 Add X1, X31, 12
	076 Move [X31+12], S0
	077 Call 0x1C17E04
	078 Move X19, X0
	079 Move X0, [X23]
	080 Add X1, X31, 8
	081 Move [X31+8], W31
	082 Call 0x1C17E04
	083 Move X1, X0
	084 Move X0, X19
	085 Move X2, X31
	086 Call Object.Equals, X0, X1
	087 Add W20, W20, 1
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {48}
	092 Xor W0, W22, 1
	093 Move X20, [X31+64]
	094 Move X19, [X31+72]
	095 Move X22, [X31+48]
	096 Move X21, [X31+56]
	097 Move X24, [X31+32]
	098 Move X23, [X31+40]
	099 Move X26, [X31+16]
	100 Move X25, [X31+24]
	101 Move X30, [X31+80]
	102 Return X0
	103 Compare X19, 0
	104 JumpIfEqual {189}
	105 Move X0, X19
	106 Move X1, X31
	107 Call GameObject.get_transform, X0
	108 Move X24, 0xF47000
	109 Move X25, 0xF45000
	110 Move X24, [X24+1448]
	111 Move X25, [X25+2704]
	112 Move X19, X0
	113 Move W23, W31
	114 Move X0, [X24]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {120}
	118 Call 0x1C17DFC
	119 Move X0, [X24]
	120 Move X8, [X0+184]
	121 Move W9, [X8+56]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CSET not yet implemented."
	124 Move W9, [X0+224]
	125 Compare W9, 0
	126 JumpIfNotEqual {130}
	127 Call 0x1C17DFC
	128 Move X8, [X24]
	129 Move X8, [X8+184]
	130 Move X8, [X8+24]
	131 Compare X8, 0
	132 JumpIfEqual {189}
	133 Move W9, [X8+24]
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move X26, W23
	136 Add X8, X8, X26
	137 Move X8, [X8+32]
	138 Compare X8, 0
	139 JumpIfEqual {189}
	140 Move V0, [X8+64]
	141 Move X0, [X25]
	142 Add X1, X31, 12
	143 Move [X31+12], S0
	144 Call 0x1C17E04
	145 Move X20, X0
	146 Move X0, [X25]
	147 Add X1, X31, 8
	148 Move [X31+8], W31
	149 Call 0x1C17E04
	150 Move X1, X0
	151 Move X0, X20
	152 Move X2, X31
	153 Call Object.Equals, X0, X1
	154 Move TEMP, X0
	155 And TEMP, TEMP, 1
	156 Compare TEMP, 1
	157 JumpIfNotEqual {188}
	158 Move X0, [X24]
	159 Move W8, [X0+224]
	160 Compare W8, 0
	161 JumpIfNotEqual {164}
	162 Call 0x1C17DFC
	163 Move X0, [X24]
	164 Move X8, [X0+184]
	165 Move X8, [X8+24]
	166 Compare X8, 0
	167 JumpIfEqual {189}
	168 Move W9, [X8+24]
	169 NotImplemented "Instruction CMP not yet implemented."
	170 Add X8, X8, X26
	171 Move X8, [X8+32]
	172 Compare X8, 0
	173 JumpIfEqual {189}
	174 Move X0, [X21]
	175 Move X20, [X8+88]
	176 Move W9, [X0+224]
	177 Compare W9, 0
	178 JumpIfNotEqual {180}
	179 Call 0x1C17DFC
	180 Move X0, X20
	181 Move X1, X19
	182 Move X2, X31
	183 Call Object.op_Equality, X0, X1
	184 Move TEMP, X0
	185 And TEMP, TEMP, 1
	186 Compare TEMP, 1
	187 JumpIfEqual {92}
	188 Add W23, W23, 1
	189 Call 0x1C17F20
	190 Call 0x1C17F28

Method: System.Boolean isPaused(UnityEngine.RectTransform rect)

Disassembly:
	0x031AF748 CBZ X9, 0x31AF7AC
	0x031AF74C LDRSW X1, [X8 + 0x60]
	0x031AF750 LDR W10, [X9 + 0x18]
	0x031AF754 CMP W1, W10
	0x031AF758 B.CS 0x31AF7B0
	0x031AF75C ADD X9, X9, X1, 0x3, LSL
	0x031AF760 LDR X0, [X9 + 0x20]
	0x031AF764 CBZ X0, 0x31AF7AC
	0x031AF768 LDR W2, [X8 + 0x5C]
	0x031AF76C MOV X3, X31
	0x031AF770 BL 0x31C7E68
	0x031AF774 LDR X8, [X19]
	0x031AF778 LDR X9, [X8 + 0xB8]
	0x031AF77C LDR X8, [X9 + 0x18]
	0x031AF780 CBZ X8, 0x31AF7AC
	0x031AF784 LDRSW X9, [X9 + 0x60]
	0x031AF788 LDR W10, [X8 + 0x18]
	0x031AF78C CMP W9, W10
	0x031AF790 B.CS 0x31AF7B0
	0x031AF794 ADD X8, X8, X9, 0x3, LSL
	0x031AF798 LDR X0, [X8 + 0x20]
	0x031AF79C LDP X20, X19, [X31 + 0x20]
	0x031AF7A0 LDP X30, X21, [X31 + 0x10]
	0x031AF7A4 LDR V8, [X31], #0x30
	0x031AF7A8 RET
	0x031AF7AC BL 0x1C16F20
	0x031AF7B0 BL 0x1C16F28
	0x031AF7B4 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122D000
	005 Move W8, [X20+3691]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF47000
	012 Move X0, [X0+1448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3691], W8
	016 Compare X19, 0
	017 JumpIfEqual {34}
	018 Move X20, 0xF47000
	019 Move X20, [X20+1448]
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_gameObject, X0
	023 Move X8, [X20]
	024 Move X19, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Call 0x1C17F20

Method: System.Boolean isPaused(System.Int32 uniqueId)

Disassembly:
	0x031AF9A4 MOV X1, X31
	0x031AF9A8 BL 0x31C16C8
	0x031AF9AC CBZ X0, 0x31AFA10
	0x031AF9B0 MOV X1, X20
	0x031AF9B4 MOV X2, X31
	0x031AF9B8 BL 0x31C84C4
	0x031AF9BC CBZ X0, 0x31AFA10
	0x031AF9C0 SCVTF S0, W22
	0x031AF9C4 FMOV S1, -1
	0x031AF9C8 SCVTF S2, W21
	0x031AF9CC FMOV S3, 0.25
	0x031AF9D0 MOVN W1, 0x0
	0x031AF9D4 MOV X2, X31
	0x031AF9D8 FADD S8, S0, S1
	0x031AF9DC FMUL S9, S2, S3
	0x031AF9E0 BL 0x31C7EC0
	0x031AF9E4 MOV X1, X0
	0x031AF9E8 MOV X0, X19
	0x031AF9EC LDP X20, X19, [X31 + 0x30]
	0x031AF9F0 LDP X22, X21, [X31 + 0x20]
	0x031AF9F4 LDR X30, [X31 + 0x10]
	0x031AF9F8 FMOV S1, W31
	0x031AF9FC FMOV S2, W31
	0x031AFA00 MOV V0.16B, V8.16B
	0x031AFA04 MOV V3.16B, V9.16B
	0x031AFA08 LDP D9, D8, [X31], #0x40
	0x031AFA0C B 0x31AF81C
	0x031AFA10 BL 0x1C16F20
	0x031AFA14 STR X30, [X31 - 0x30]!
	0x031AFA18 STP X22, X21, [X31 + 0x10]
	0x031AFA1C STP X20, X19, [X31 + 0x20]
	0x031AFA20 ADRP X20, 0x122C000
	0x031AFA24 ADRP X21, 0xF46000
	0x031AFA28 LDRB W8, [X20 + 0xE77]
	0x031AFA2C LDR X21, [X21 + 0x5A8]
	0x031AFA30 MOV W19, W0
	0x031AFA34 TBNZ X8, 0x0, 0x31AFA4C
	0x031AFA38 ADRP X0, 0xF46000
	0x031AFA3C LDR X0, [X0 + 0x5A8]
	0x031AFA40 BL 0x1C16CF4
	0x031AFA44 MOVZ W8, 0x1
	0x031AFA48 STRB W8, [X20 + 0xE77]
	0x031AFA4C LDR X0, [X21]
	0x031AFA50 LDR W8, [X0 + 0xE0]
	0x031AFA54 CBNZ W8, 0x31AFA60
	0x031AFA58 BL 0x1C16DFC
	0x031AFA5C LDR X0, [X21]
	0x031AFA60 LDR X8, [X0 + 0xB8]
	0x031AFA64 LDR W0, [X8 + 0x3C]
	0x031AFA68 BL 0x31ABA08
	0x031AFA6C LDR X0, [X21]
	0x031AFA70 MOV W22, W31
	0x031AFA74 LDR W8, [X0 + 0xE0]
	0x031AFA78 CBNZ W8, 0x31AFA84
	0x031AFA7C BL 0x1C16DFC
	0x031AFA80 LDR X0, [X21]
	0x031AFA84 LDR X8, [X0 + 0xB8]
	0x031AFA88 LDR X8, [X8 + 0x10]
	0x031AFA8C CBZ X8, 0x31AFC34
	0x031AFA90 LDR W9, [X8 + 0x18]
	0x031AFA94 CMP W22, W9
	0x031AFA98 B.GE 0x31AFB64
	0x031AFA9C LDR W9, [X0 + 0xE0]
	0x031AFAA0 CBNZ W9, 0x31AFAB8
	0x031AFAA4 BL 0x1C16DFC
	0x031AFAA8 LDR X0, [X21]
	0x031AFAAC LDR X8, [X0 + 0xB8]
	0x031AFAB0 LDR X8, [X8 + 0x10]
	0x031AFAB4 CBZ X8, 0x31AFC34
	0x031AFAB8 LDR W9, [X8 + 0x18]
	0x031AFABC CMP W22, W9
	0x031AFAC0 B.CS 0x31AFC38
	0x031AFAC4 SXTW X20, W22
	0x031AFAC8 ADD X8, X8, X20, 0x3, LSL
	0x031AFACC LDR X8, [X8 + 0x20]
	0x031AFAD0 CBZ X8, 0x31AFC34
	0x031AFAD4 LDR X8, [X8 + 0x20]
	0x031AFAD8 CBZ X8, 0x31AFB20
	0x031AFADC LDR W8, [X0 + 0xE0]
	0x031AFAE0 CBNZ W8, 0x31AFAEC
	0x031AFAE4 BL 0x1C16DFC
	0x031AFAE8 LDR X0, [X21]
	0x031AFAEC LDR X8, [X0 + 0xB8]
	0x031AFAF0 LDR X8, [X8 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x122D000
	007 Move X20, 0xF47000
	008 Move W8, [X21+3692]
	009 Move X20, [X20+1448]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF47000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move X0, 0xF45000
	019 Move X0, [X0+2704]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3692], W8
	023 Move X0, [X20]
	024 And W21, W19, 0xFFFF
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X0+184]
	031 Move W9, [X8+60]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move W9, [X0+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {39}
	036 Call 0x1C17DFC
	037 Move X0, [X20]
	038 Move X8, [X0+184]
	039 Move X9, [X8+24]
	040 Compare X9, 0
	041 JumpIfEqual {95}
	042 Move W10, [X9+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add X10, X9, W21
	045 Move X10, [X10+32]
	046 Compare X10, 0
	047 JumpIfEqual {95}
	048 Move W10, [X10+60]
	049 NotImplemented "Instruction SBFM not yet implemented."
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move W10, [X0+224]
	052 Compare W10, 0
	053 JumpIfNotEqual {60}
	054 Call 0x1C17DFC
	055 Move X8, [X20]
	056 Move X8, [X8+184]
	057 Move X9, [X8+24]
	058 Compare X9, 0
	059 JumpIfEqual {95}
	060 NotImplemented "Instruction LDRSW not yet implemented."
	061 Move W10, [X9+24]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Add X8, X9, X8
	064 Move X8, [X8+32]
	065 Compare X8, 0
	066 JumpIfEqual {95}
	067 Move X20, 0xF45000
	068 Move V0, [X8+64]
	069 Move X20, [X20+2704]
	070 Add X1, X31, 12
	071 Move [X31+12], S0
	072 Move X0, [X20]
	073 Call 0x1C17E04
	074 Move X19, X0
	075 Move X0, [X20]
	076 Add X1, X31, 8
	077 Move [X31+8], W31
	078 Call 0x1C17E04
	079 Move X1, X0
	080 Move X0, X19
	081 Move X2, X31
	082 Call Object.Equals, X0, X1
	083 Move TEMP, X0
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfNotEqual {88}
	087 Move W0, 1
	088 Move W0, W31
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X30, [X31+16]
	092 Move X21, [X31+24]
	093 Add X31, X31, 48
	094 Return X0
	095 Call 0x1C17F20
	096 Call 0x1C17F28

Method: System.Boolean isTweening(UnityEngine.GameObject gameObject = null)

Disassembly:
	0x031AF7B8 STP X20, X19, [X31 + 0x10]
	0x031AF7BC ADRP X20, 0x122C000
	0x031AF7C0 ADRP X19, 0xF46000
	0x031AF7C4 LDRB W8, [X20 + 0xE74]
	0x031AF7C8 LDR X19, [X19 + 0x5A8]
	0x031AF7CC TBNZ X8, 0x0, 0x31AF7E4
	0x031AF7D0 ADRP X0, 0xF46000
	0x031AF7D4 LDR X0, [X0 + 0x5A8]
	0x031AF7D8 BL 0x1C16CF4
	0x031AF7DC MOVZ W8, 0x1
	0x031AF7E0 STRB W8, [X20 + 0xE74]
	0x031AF7E4 LDR X0, [X19]
	0x031AF7E8 LDR W8, [X0 + 0xE0]
	0x031AF7EC CBNZ W8, 0x31AF7F8
	0x031AF7F0 BL 0x1C16DFC
	0x031AF7F4 LDR X0, [X19]
	0x031AF7F8 LDR X8, [X0 + 0xB8]
	0x031AF7FC LDR W0, [X8 + 0x3C]
	0x031AF800 BL 0x31ABA08
	0x031AF804 LDR X8, [X19]
	0x031AF808 LDP X20, X19, [X31 + 0x10]
	0x031AF80C LDR X8, [X8 + 0xB8]
	0x031AF810 LDR X0, [X8 + 0x48]
	0x031AF814 LDR X30, [X31], #0x20
	0x031AF818 RET
	0x031AF81C STP D11, D10, [X31 - 0x50]!
	0x031AF820 STP D9, D8, [X31 + 0x10]
	0x031AF824 STR X30, [X31 + 0x20]
	0x031AF828 STP X22, X21, [X31 + 0x30]
	0x031AF82C STP X20, X19, [X31 + 0x40]
	0x031AF830 ADRP X22, 0x122C000
	0x031AF834 ADRP X21, 0xF46000
	0x031AF838 LDRB W8, [X22 + 0xE75]
	0x031AF83C LDR X21, [X21 + 0x5A8]
	0x031AF840 MOV X19, X1
	0x031AF844 MOV V8.16B, V3.16B
	0x031AF848 MOV V9.16B, V2.16B
	0x031AF84C MOV V10.16B, V1.16B
	0x031AF850 MOV V11.16B, V0.16B
	0x031AF854 MOV X20, X0
	0x031AF858 TBNZ X8, 0x0, 0x31AF87C
	0x031AF85C ADRP X0, 0xF46000
	0x031AF860 LDR X0, [X0 + 0x5A8]
	0x031AF864 BL 0x1C16CF4
	0x031AF868 ADRP X0, 0xF44000
	0x031AF86C LDR X0, [X0 + 0x598]
	0x031AF870 BL 0x1C16CF4
	0x031AF874 MOVZ W8, 0x1
	0x031AF878 STRB W8, [X22 + 0xE75]
	0x031AF87C LDR X0, [X21]
	0x031AF880 ADRP X22, 0xF44000
	0x031AF884 LDR W8, [X0 + 0xE0]
	0x031AF888 LDR X22, [X22 + 0x598]
	0x031AF88C CBNZ W8, 0x31AF898
	0x031AF890 BL 0x1C16DFC
	0x031AF894 LDR X0, [X21]
	0x031AF898 LDR X8, [X0 + 0xB8]
	0x031AF89C LDR W0, [X8 + 0x3C]
	0x031AF8A0 BL 0x31ABA08
	0x031AF8A4 LDR X0, [X22]
	0x031AF8A8 LDR W8, [X0 + 0xE0]
	0x031AF8AC CBNZ W8, 0x31AF8B4
	0x031AF8B0 BL 0x1C16DFC
	0x031AF8B4 MOV X0, X20
	0x031AF8B8 MOV X1, X31
	0x031AF8BC MOV X2, X31
	0x031AF8C0 BL 0x3C3883C
	0x031AF8C4 MOV W8, W0
	0x031AF8C8 MOV X0, X31
	0x031AF8CC CBZ X19, 0x31AF90C
	0x031AF8D0 TBNZ X8, 0x0, 0x31AF90C
	0x031AF8D4 CBZ X20, 0x31AF924
	0x031AF8D8 MOV X0, X20
	0x031AF8DC MOV X1, X31
	0x031AF8E0 BL 0x3C356F8
	0x031AF8E4 FCMP S8, 0x0
	0x031AF8E8 STR X0, [X19 + 0x58]
	0x031AF8EC STP S11, S10, [X19 + 0x6C]
	0x031AF8F0 STR S9, [X19 + 0x74]
	0x031AF8F4 STR S8, [X19 + 0x28]
	0x031AF8F8 B.HI 0x31AF908
	0x031AF8FC MOV X0, X19
	0x031AF900 MOV X1, X31
	0x031AF904 BL 0x31C2804
	0x031AF908 MOV X0, X19
	0x031AF90C LDP X20, X19, [X31 + 0x40]
	0x031AF910 LDP X22, X21, [X31 + 0x30]
	0x031AF914 LDR X30, [X31 + 0x20]
	0x031AF918 LDP D9, D8, [X31 + 0x10]
	0x031AF91C LDP D11, D10, [X31], #0x50
	0x031AF920 RET
	0x031AF924 BL 0x1C16F20
	0x031AF928 STP D9, D8, [X31 - 0x40]!
	0x031AF92C STR X30, [X31 + 0x10]
	0x031AF930 STP X22, X21, [X31 + 0x20]
	0x031AF934 STP X20, X19, [X31 + 0x30]
	0x031AF938 ADRP X21, 0x122C000
	0x031AF93C LDRB W8, [X21 + 0xE76]
	0x031AF940 MOV X20, X1
	0x031AF944 MOV X19, X0
	0x031AF948 TBNZ X8, 0x0, 0x31AF960
	0x031AF94C ADRP X0, 0xF46000
	0x031AF950 LDR X0, [X0 + 0x5A8]
	0x031AF954 BL 0x1C16CF4
	0x031AF958 MOVZ W8, 0x1
	0x031AF95C STRB W8, [X21 + 0xE76]
	0x031AF960 CBZ X20, 0x31AFA10
	0x031AF964 CBZ X19, 0x31AFA10
	0x031AF968 ADRP X22, 0xF46000
	0x031AF96C LDR X21, [X20 + 0x18]
	0x031AF970 LDR X22, [X22 + 0x5A8]
	0x031AF974 MOV X0, X19
	0x031AF978 MOV X1, X31
	0x031AF97C BL 0x3C32ECC
	0x031AF980 LDR X8, [X22]
	0x031AF984 LDR X22, [X20 + 0x18]
	0x031AF988 MOV X19, X0
	0x031AF98C LDR W9, [X8 + 0xE0]
	0x031AF990 CBNZ W9, 0x31AF99C
	0x031AF994 MOV X0, X8
	0x031AF998 BL 0x1C16DFC
	0x031AF99C BL 0x31AF454
	0x031AF9A0 CBZ X0, 0x31AFA10

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122D000
	009 Move X21, 0xF45000
	010 Move W8, [X20+3693]
	011 Move X21, [X21+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF47000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move X0, 0xF45000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3693], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {79}
	038 Move X19, 0xF47000
	039 Move X19, [X19+1448]
	040 Move W20, W31
	041 Move X0, [X19]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {47}
	045 Call 0x1C17DFC
	046 Move X0, [X19]
	047 Move X8, [X0+184]
	048 Move W8, [X8+56]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {56}
	054 Call 0x1C17DFC
	055 Move X0, [X19]
	056 Move X8, [X0+184]
	057 Move X8, [X8+24]
	058 Compare X8, 0
	059 JumpIfEqual {147}
	060 Move W9, [X8+24]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Add X8, X8, W20
	063 Move X8, [X8+32]
	064 Compare X8, 0
	065 JumpIfEqual {147}
	066 Move W8, [X8+16]
	067 Add W20, W20, 1
	068 Compare W8, 0
	069 JumpIfEqual {42}
	070 Xor W0, W22, 1
	071 Move X20, [X31+48]
	072 Move X19, [X31+56]
	073 Move X22, [X31+32]
	074 Move X21, [X31+40]
	075 Move X24, [X31+16]
	076 Move X23, [X31+24]
	077 Move X30, [X31+64]
	078 Return X0
	079 Compare X19, 0
	080 JumpIfEqual {147}
	081 Move X0, X19
	082 Move X1, X31
	083 Call GameObject.get_transform, X0
	084 Move X24, 0xF47000
	085 Move X24, [X24+1448]
	086 Move X19, X0
	087 Move W23, W31
	088 Move X0, [X24]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {94}
	092 Call 0x1C17DFC
	093 Move X0, [X24]
	094 Move X8, [X0+184]
	095 Move W9, [X8+56]
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CSET not yet implemented."
	098 Move W9, [X0+224]
	099 Compare W9, 0
	100 JumpIfNotEqual {104}
	101 Call 0x1C17DFC
	102 Move X0, [X24]
	103 Move X8, [X0+184]
	104 Move X8, [X8+24]
	105 Compare X8, 0
	106 JumpIfEqual {147}
	107 Move W9, [X8+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 Move X20, W23
	110 Add X9, X8, X20
	111 Move X9, [X9+32]
	112 Compare X9, 0
	113 JumpIfEqual {147}
	114 Move W9, [X9+16]
	115 Compare W9, 0
	116 JumpIfEqual {146}
	117 Move W9, [X0+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {126}
	120 Call 0x1C17DFC
	121 Move X8, [X24]
	122 Move X8, [X8+184]
	123 Move X8, [X8+24]
	124 Compare X8, 0
	125 JumpIfEqual {147}
	126 Move W9, [X8+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Add X8, X8, X20
	129 Move X8, [X8+32]
	130 Compare X8, 0
	131 JumpIfEqual {147}
	132 Move X0, [X21]
	133 Move X20, [X8+88]
	134 Move W9, [X0+224]
	135 Compare W9, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move X0, X20
	139 Move X1, X19
	140 Move X2, X31
	141 Call Object.op_Equality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfEqual {70}
	146 Add W23, W23, 1
	147 Call 0x1C17F20
	148 Call 0x1C17F28

Method: System.Boolean isTweening(UnityEngine.RectTransform rect)

Disassembly:
	0x031AFAF4 CBZ X8, 0x31AFC34
	0x031AFAF8 LDR W9, [X8 + 0x18]
	0x031AFAFC CMP W22, W9
	0x031AFB00 B.CS 0x31AFC38
	0x031AFB04 ADD X8, X8, X20, 0x3, LSL
	0x031AFB08 LDR X8, [X8 + 0x20]
	0x031AFB0C CBZ X8, 0x31AFC34
	0x031AFB10 LDR X8, [X8 + 0x20]
	0x031AFB14 CBZ X8, 0x31AFC34
	0x031AFB18 LDRB W8, [X8 + 0x10]
	0x031AFB1C CBNZ W8, 0x31AFB5C
	0x031AFB20 LDR W8, [X0 + 0xE0]
	0x031AFB24 CBNZ W8, 0x31AFB30
	0x031AFB28 BL 0x1C16DFC
	0x031AFB2C LDR X0, [X21]
	0x031AFB30 LDR X8, [X0 + 0xB8]
	0x031AFB34 LDR X9, [X8 + 0x10]
	0x031AFB38 CBZ X9, 0x31AFC34
	0x031AFB3C LDR W10, [X9 + 0x18]
	0x031AFB40 CMP W22, W10
	0x031AFB44 B.CS 0x31AFC38
	0x031AFB48 ADD X10, X9, X20, 0x3, LSL
	0x031AFB4C LDR X10, [X10 + 0x20]
	0x031AFB50 CBZ X10, 0x31AFC34
	0x031AFB54 LDRB W10, [X10 + 0x38]
	0x031AFB58 CBZ W10, 0x31AFB6C
	0x031AFB5C ADD W22, W22, 0x1
	0x031AFB60 B 0x31AFA74

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122D000
	005 Move W8, [X20+3694]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF47000
	012 Move X0, [X0+1448]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3694], W8
	016 Compare X19, 0
	017 JumpIfEqual {36}
	018 Move X20, 0xF47000
	019 Move X20, [X20+1448]
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_gameObject, X0
	023 Move X8, [X20]
	024 Move X19, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Call LeanTween.isTweening, X0
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean isTweening(System.Int32 uniqueId)

Disassembly:
	0x031AFB64 MOV X20, X31
	0x031AFB68 B 0x31AFC20
	0x031AFB6C LDR W10, [X0 + 0xE0]
	0x031AFB70 CBNZ W10, 0x31AFB88
	0x031AFB74 BL 0x1C16DFC
	0x031AFB78 LDR X0, [X21]
	0x031AFB7C LDR X8, [X0 + 0xB8]
	0x031AFB80 LDR X9, [X8 + 0x10]
	0x031AFB84 CBZ X9, 0x31AFC34
	0x031AFB88 LDR W10, [X9 + 0x18]
	0x031AFB8C CMP W22, W10
	0x031AFB90 B.CS 0x31AFC38
	0x031AFB94 ADD X9, X9, X20, 0x3, LSL
	0x031AFB98 LDR X20, [X9 + 0x20]
	0x031AFB9C TBZ X19, 0x0, 0x31AFC10
	0x031AFBA0 LDR W9, [X0 + 0xE0]
	0x031AFBA4 CBNZ W9, 0x31AFBB4
	0x031AFBA8 BL 0x1C16DFC
	0x031AFBAC LDR X8, [X21]
	0x031AFBB0 LDR X8, [X8 + 0xB8]
	0x031AFBB4 LDR X9, [X8 + 0x18]
	0x031AFBB8 CBZ X9, 0x31AFC34
	0x031AFBBC CBZ X20, 0x31AFC34
	0x031AFBC0 LDR W9, [X9 + 0x18]
	0x031AFBC4 LDR W2, [X8 + 0x5C]
	0x031AFBC8 MOV X0, X20
	0x031AFBCC MOV X3, X31
	0x031AFBD0 ADD W1, W9, W22
	0x031AFBD4 BL 0x31CC7F8
	0x031AFBD8 LDR X0, [X21]
	0x031AFBDC LDR X8, [X0 + 0xB8]
	0x031AFBE0 LDR W9, [X8 + 0x5C]
	0x031AFBE4 ADD W9, W9, 0x1
	0x031AFBE8 CMP W9, 0x8000
	0x031AFBEC STR W9, [X8 + 0x5C]
	0x031AFBF0 B.LS 0x31AFC20
	0x031AFBF4 LDR W9, [X0 + 0xE0]
	0x031AFBF8 CBNZ W9, 0x31AFC08
	0x031AFBFC BL 0x1C16DFC
	0x031AFC00 LDR X8, [X21]
	0x031AFC04 LDR X8, [X8 + 0xB8]
	0x031AFC08 STR W31, [X8 + 0x5C]
	0x031AFC0C B 0x31AFC20
	0x031AFC10 CBZ X20, 0x31AFC34
	0x031AFC14 MOV X0, X20
	0x031AFC18 MOV X1, X31
	0x031AFC1C BL 0x31CC7E8
	0x031AFC20 MOV X0, X20
	0x031AFC24 LDP X20, X19, [X31 + 0x20]
	0x031AFC28 LDP X22, X21, [X31 + 0x10]
	0x031AFC2C LDR X30, [X31], #0x30
	0x031AFC30 RET
	0x031AFC34 BL 0x1C16F20
	0x031AFC38 BL 0x1C16F28
	0x031AFC3C STP D9, D8, [X31 - 0x30]!
	0x031AFC40 STP X30, X21, [X31 + 0x10]
	0x031AFC44 STP X20, X19, [X31 + 0x20]
	0x031AFC48 ADRP X20, 0x122C000
	0x031AFC4C ADRP X21, 0xF46000
	0x031AFC50 LDRB W8, [X20 + 0xE78]
	0x031AFC54 LDR X21, [X21 + 0x5A8]
	0x031AFC58 MOV V8.16B, V1.16B
	0x031AFC5C MOV V9.16B, V0.16B
	0x031AFC60 MOV X19, X0
	0x031AFC64 TBNZ X8, 0x0, 0x31AFC88
	0x031AFC68 ADRP X0, 0xF70000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x122D000
	007 Move X20, 0xF47000
	008 Move W8, [X21+3695]
	009 Move X20, [X20+1448]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF47000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3695], W8
	020 Move X0, [X20]
	021 And W21, W19, 0xFFFF
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X20]
	027 Move X8, [X0+184]
	028 Move W9, [X8+60]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W9, [X0+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {36}
	033 Call 0x1C17DFC
	034 Move X0, [X20]
	035 Move X8, [X0+184]
	036 Move X8, [X8+24]
	037 Compare X8, 0
	038 JumpIfEqual {75}
	039 Move W9, [X8+24]
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W22, W21
	042 Add X9, X8, X22
	043 Move X9, [X9+32]
	044 Compare X9, 0
	045 JumpIfEqual {75}
	046 Move W9, [X9+60]
	047 NotImplemented "Instruction SBFM not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move W9, [X0+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {58}
	052 Call 0x1C17DFC
	053 Move X8, [X20]
	054 Move X8, [X8+184]
	055 Move X8, [X8+24]
	056 Compare X8, 0
	057 JumpIfEqual {75}
	058 Move W9, [X8+24]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Add X8, X8, X22
	061 Move X8, [X8+32]
	062 Compare X8, 0
	063 JumpIfEqual {75}
	064 Move W8, [X8+16]
	065 Compare W8, 0
	066 JumpIfEqual {68}
	067 Move W0, 1
	068 Move W0, W31
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Return X0
	075 Call 0x1C17F20
	076 Call 0x1C17F28

Method: System.Boolean isTweening(LTRect ltRect)

Disassembly:
	0x031AFC6C LDR X0, [X0 + 0x3E8]
	0x031AFC70 BL 0x1C16CF4
	0x031AFC74 ADRP X0, 0xF46000
	0x031AFC78 LDR X0, [X0 + 0x5A8]
	0x031AFC7C BL 0x1C16CF4
	0x031AFC80 MOVZ W8, 0x1
	0x031AFC84 STRB W8, [X20 + 0xE78]
	0x031AFC88 LDR X0, [X21]
	0x031AFC8C LDR W8, [X0 + 0xE0]
	0x031AFC90 CBNZ W8, 0x31AFC98
	0x031AFC94 BL 0x1C16DFC
	0x031AFC98 BL 0x31AF454
	0x031AFC9C CBZ X0, 0x31AFCFC
	0x031AFCA0 MOV X1, X31
	0x031AFCA4 BL 0x31C0CB4
	0x031AFCA8 MOV X1, X0
	0x031AFCAC FMOV S1, W31
	0x031AFCB0 FMOV S2, W31
	0x031AFCB4 MOV X0, X19
	0x031AFCB8 MOV V0.16B, V9.16B
	0x031AFCBC MOV V3.16B, V8.16B
	0x031AFCC0 BL 0x31AF81C
	0x031AFCC4 CBZ X19, 0x31AFCFC
	0x031AFCC8 ADRP X8, 0xF70000
	0x031AFCCC LDR X8, [X8 + 0x3E8]
	0x031AFCD0 MOV X20, X0
	0x031AFCD4 MOV X0, X19
	0x031AFCD8 LDR X1, [X8]
	0x031AFCDC BL 0x21E52E4
	0x031AFCE0 CBZ X20, 0x31AFCFC
	0x031AFCE4 STR X0, [X20 + 0xB8]
	0x031AFCE8 MOV X0, X20
	0x031AFCEC LDP X20, X19, [X31 + 0x20]
	0x031AFCF0 LDP X30, X21, [X31 + 0x10]
	0x031AFCF4 LDP D9, D8, [X31], #0x30
	0x031AFCF8 RET
	0x031AFCFC BL 0x1C16F20
	0x031AFD00 STP D9, D8, [X31 - 0x30]!
	0x031AFD04 STR X30, [X31 + 0x10]
	0x031AFD08 STP X20, X19, [X31 + 0x20]
	0x031AFD0C ADRP X20, 0x122C000
	0x031AFD10 LDRB W8, [X20 + 0xE79]
	0x031AFD14 MOV V8.16B, V1.16B
	0x031AFD18 MOV V9.16B, V0.16B
	0x031AFD1C MOV X19, X0
	0x031AFD20 TBNZ X8, 0x0, 0x31AFD38
	0x031AFD24 ADRP X0, 0xF46000
	0x031AFD28 LDR X0, [X0 + 0x5A8]
	0x031AFD2C BL 0x1C16CF4
	0x031AFD30 MOVZ W8, 0x1
	0x031AFD34 STRB W8, [X20 + 0xE79]
	0x031AFD38 CBZ X19, 0x31AFDAC
	0x031AFD3C ADRP X8, 0xF46000
	0x031AFD40 LDR X8, [X8 + 0x5A8]
	0x031AFD44 MOVZ W9, 0x1
	0x031AFD48 STRB W9, [X19 + 0x4A]
	0x031AFD4C LDR X0, [X8]
	0x031AFD50 LDR W8, [X0 + 0xE0]
	0x031AFD54 CBNZ W8, 0x31AFD5C
	0x031AFD58 BL 0x1C16DFC
	0x031AFD5C BL 0x31AF7B4
	0x031AFD60 MOV X20, X0
	0x031AFD64 BL 0x31AF454
	0x031AFD68 CBZ X0, 0x31AFDAC
	0x031AFD6C MOV X1, X31
	0x031AFD70 BL 0x31C228C
	0x031AFD74 CBZ X0, 0x31AFDAC
	0x031AFD78 MOV X1, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x122D000
	008 Move X20, 0xF47000
	009 Move W8, [X21+3696]
	010 Move X20, [X20+1448]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF47000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3696], W8
	021 Move X0, [X20]
	022 Move W21, W31
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move W22, [X8+56]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Move X8, [X0+184]
	037 Move X8, [X8+24]
	038 Compare X8, 0
	039 JumpIfEqual {80}
	040 Move W9, [X8+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X23, W21
	043 Add X8, X8, X23
	044 Move X8, [X8+32]
	045 Compare X8, 0
	046 JumpIfEqual {80}
	047 Move W8, [X8+16]
	048 Compare W8, 0
	049 JumpIfEqual {70}
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {55}
	053 Call 0x1C17DFC
	054 Move X0, [X20]
	055 Move X8, [X0+184]
	056 Move X8, [X8+24]
	057 Compare X8, 0
	058 JumpIfEqual {80}
	059 Move W9, [X8+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Add X8, X8, X23
	062 Move X8, [X8+32]
	063 Compare X8, 0
	064 JumpIfEqual {80}
	065 Move X8, [X8+232]
	066 Compare X8, 0
	067 JumpIfEqual {80}
	068 Move X8, [X8+120]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Add W21, W21, 1
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X20, [X31+32]
	073 Move X19, [X31+40]
	074 Move X22, [X31+16]
	075 Move X21, [X31+24]
	076 NotImplemented "Instruction CSET not yet implemented."
	077 Move X30, [X31+48]
	078 Move X23, [X31+56]
	079 Return X0
	080 Call 0x1C17F20
	081 Call 0x1C17F28

Method: System.Void drawBezierPath(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 d, System.Single arrowSize = 0, UnityEngine.Transform arrowTransform = null)

Disassembly:
	0x031AFD7C MOV X2, X31
	0x031AFD80 BL 0x31C8398
	0x031AFD84 MOV X1, X0
	0x031AFD88 MOV X0, X20
	0x031AFD8C LDP X20, X19, [X31 + 0x20]
	0x031AFD90 LDR X30, [X31 + 0x10]
	0x031AFD94 FMOV S1, W31
	0x031AFD98 FMOV S2, W31
	0x031AFD9C MOV V0.16B, V9.16B
	0x031AFDA0 MOV V3.16B, V8.16B
	0x031AFDA4 LDP D9, D8, [X31], #0x30
	0x031AFDA8 B 0x31AF81C
	0x031AFDAC BL 0x1C16F20
	0x031AFDB0 STP D9, D8, [X31 - 0x30]!
	0x031AFDB4 STR X30, [X31 + 0x10]
	0x031AFDB8 STP X20, X19, [X31 + 0x20]
	0x031AFDBC ADRP X20, 0x122C000
	0x031AFDC0 LDRB W8, [X20 + 0xE7A]
	0x031AFDC4 MOV V8.16B, V1.16B
	0x031AFDC8 MOV V9.16B, V0.16B
	0x031AFDCC MOV X19, X0
	0x031AFDD0 TBNZ X8, 0x0, 0x31AFDE8
	0x031AFDD4 ADRP X0, 0xF46000
	0x031AFDD8 LDR X0, [X0 + 0x5A8]
	0x031AFDDC BL 0x1C16CF4
	0x031AFDE0 MOVZ W8, 0x1
	0x031AFDE4 STRB W8, [X20 + 0xE7A]
	0x031AFDE8 CBZ X19, 0x31AFE50
	0x031AFDEC ADRP X20, 0xF46000
	0x031AFDF0 LDR X20, [X20 + 0x5A8]
	0x031AFDF4 MOV X0, X19
	0x031AFDF8 MOV X1, X31
	0x031AFDFC BL 0x3C32ECC
	0x031AFE00 LDR X8, [X20]
	0x031AFE04 MOV X19, X0
	0x031AFE08 LDR W9, [X8 + 0xE0]
	0x031AFE0C CBNZ W9, 0x31AFE18
	0x031AFE10 MOV X0, X8
	0x031AFE14 BL 0x1C16DFC
	0x031AFE18 BL 0x31AF454
	0x031AFE1C CBZ X0, 0x31AFE50
	0x031AFE20 MOV X1, X31
	0x031AFE24 BL 0x31C0D68
	0x031AFE28 MOV X1, X0
	0x031AFE2C MOV X0, X19
	0x031AFE30 LDP X20, X19, [X31 + 0x20]
	0x031AFE34 LDR X30, [X31 + 0x10]
	0x031AFE38 FMOV S1, W31
	0x031AFE3C FMOV S2, W31
	0x031AFE40 MOV V0.16B, V9.16B
	0x031AFE44 MOV V3.16B, V8.16B
	0x031AFE48 LDP D9, D8, [X31], #0x30
	0x031AFE4C B 0x31AF81C
	0x031AFE50 BL 0x1C16F20
	0x031AFE54 STP D9, D8, [X31 - 0x30]!
	0x031AFE58 STR X30, [X31 + 0x10]
	0x031AFE5C STP X20, X19, [X31 + 0x20]
	0x031AFE60 ADRP X20, 0x122C000
	0x031AFE64 LDRB W8, [X20 + 0xE7B]
	0x031AFE68 MOV V8.16B, V1.16B
	0x031AFE6C MOV V9.16B, V0.16B
	0x031AFE70 MOV X19, X0
	0x031AFE74 TBNZ X8, 0x0, 0x31AFE8C
	0x031AFE78 ADRP X0, 0xF46000
	0x031AFE7C LDR X0, [X0 + 0x5A8]
	0x031AFE80 BL 0x1C16CF4
	0x031AFE84 MOVZ W8, 0x1
	0x031AFE88 STRB W8, [X20 + 0xE7B]
	0x031AFE8C CBZ X19, 0x31AFEF4
	0x031AFE90 ADRP X20, 0xF46000
	0x031AFE94 LDR X20, [X20 + 0x5A8]
	0x031AFE98 MOV X0, X19
	0x031AFE9C MOV X1, X31
	0x031AFEA0 BL 0x3C32ECC
	0x031AFEA4 LDR X8, [X20]
	0x031AFEA8 MOV X19, X0
	0x031AFEAC LDR W9, [X8 + 0xE0]
	0x031AFEB0 CBNZ W9, 0x31AFEBC
	0x031AFEB4 MOV X0, X8
	0x031AFEB8 BL 0x1C16DFC
	0x031AFEBC BL 0x31AF454
	0x031AFEC0 CBZ X0, 0x31AFEF4
	0x031AFEC4 MOV X1, X31
	0x031AFEC8 BL 0x31C0D68
	0x031AFECC MOV X1, X0
	0x031AFED0 MOV X0, X19
	0x031AFED4 LDP X20, X19, [X31 + 0x20]
	0x031AFED8 LDR X30, [X31 + 0x10]
	0x031AFEDC FMOV S1, W31
	0x031AFEE0 FMOV S2, W31
	0x031AFEE4 MOV V0.16B, V9.16B
	0x031AFEE8 MOV V3.16B, V8.16B
	0x031AFEEC LDP D9, D8, [X31], #0x30
	0x031AFEF0 B 0x31AF81C
	0x031AFEF4 BL 0x1C16F20
	0x031AFEF8 STP D9, D8, [X31 - 0x30]!
	0x031AFEFC STR X30, [X31 + 0x10]
	0x031AFF00 STP X20, X19, [X31 + 0x20]
	0x031AFF04 ADRP X20, 0x122C000
	0x031AFF08 LDRB W8, [X20 + 0xE7C]
	0x031AFF0C MOV V8.16B, V1.16B
	0x031AFF10 MOV V9.16B, V0.16B
	0x031AFF14 MOV X19, X0
	0x031AFF18 TBNZ X8, 0x0, 0x31AFF30
	0x031AFF1C ADRP X0, 0xF46000
	0x031AFF20 LDR X0, [X0 + 0x5A8]
	0x031AFF24 BL 0x1C16CF4
	0x031AFF28 MOVZ W8, 0x1
	0x031AFF2C STRB W8, [X20 + 0xE7C]
	0x031AFF30 CBZ X19, 0x31AFF98
	0x031AFF34 ADRP X20, 0xF46000
	0x031AFF38 LDR X20, [X20 + 0x5A8]
	0x031AFF3C MOV X0, X19
	0x031AFF40 MOV X1, X31
	0x031AFF44 BL 0x3C32ECC
	0x031AFF48 LDR X8, [X20]
	0x031AFF4C MOV X19, X0
	0x031AFF50 LDR W9, [X8 + 0xE0]
	0x031AFF54 CBNZ W9, 0x31AFF60
	0x031AFF58 MOV X0, X8
	0x031AFF5C BL 0x1C16DFC
	0x031AFF60 BL 0x31AF454
	0x031AFF64 CBZ X0, 0x31AFF98
	0x031AFF68 MOV X1, X31
	0x031AFF6C BL 0x31C11A0
	0x031AFF70 MOV X1, X0
	0x031AFF74 MOV X0, X19
	0x031AFF78 LDP X20, X19, [X31 + 0x20]
	0x031AFF7C LDR X30, [X31 + 0x10]
	0x031AFF80 FMOV S1, W31
	0x031AFF84 FMOV S2, W31
	0x031AFF88 MOV V0.16B, V9.16B
	0x031AFF8C MOV V3.16B, V8.16B
	0x031AFF90 LDP D9, D8, [X31], #0x30
	0x031AFF94 B 0x31AF81C
	0x031AFF98 BL 0x1C16F20
	0x031AFF9C STP D9, D8, [X31 - 0x30]!
	0x031AFFA0 STP X30, X21, [X31 + 0x10]
	0x031AFFA4 STP X20, X19, [X31 + 0x20]
	0x031AFFA8 ADRP X20, 0x122C000
	0x031AFFAC ADRP X21, 0xF46000
	0x031AFFB0 LDRB W8, [X20 + 0xE7D]
	0x031AFFB4 LDR X21, [X21 + 0x5A8]
	0x031AFFB8 MOV V8.16B, V1.16B
	0x031AFFBC MOV V9.16B, V0.16B
	0x031AFFC0 MOV X19, X0
	0x031AFFC4 TBNZ X8, 0x0, 0x31AFFDC
	0x031AFFC8 ADRP X0, 0xF46000
	0x031AFFCC LDR X0, [X0 + 0x5A8]
	0x031AFFD0 BL 0x1C16CF4
	0x031AFFD4 MOVZ W8, 0x1
	0x031AFFD8 STRB W8, [X20 + 0xE7D]
	0x031AFFDC LDR X0, [X21]
	0x031AFFE0 LDR W8, [X0 + 0xE0]
	0x031AFFE4 CBNZ W8, 0x31AFFEC
	0x031AFFE8 BL 0x1C16DFC
	0x031AFFEC BL 0x31AF454
	0x031AFFF0 CBZ X0, 0x31B0024
	0x031AFFF4 MOV X1, X31
	0x031AFFF8 BL 0x31C0E1C
	0x031AFFFC MOV X1, X0
	0x031B0000 MOV X0, X19
	0x031B0004 LDP X20, X19, [X31 + 0x20]
	0x031B0008 LDP X30, X21, [X31 + 0x10]
	0x031B000C FMOV S1, W31
	0x031B0010 FMOV S2, W31
	0x031B0014 MOV V0.16B, V9.16B
	0x031B0018 MOV V3.16B, V8.16B
	0x031B001C LDP D9, D8, [X31], #0x30
	0x031B0020 B 0x31AF81C
	0x031B0024 BL 0x1C16F20
	0x031B0028 STR D12, [X31 - 0x50]!
	0x031B002C STP D11, D10, [X31 + 0x10]
	0x031B0030 STP D9, D8, [X31 + 0x20]
	0x031B0034 STP X30, X21, [X31 + 0x30]
	0x031B0038 STP X20, X19, [X31 + 0x40]
	0x031B003C ADRP X20, 0x122B000
	0x031B0040 ADRP X21, 0xF45000
	0x031B0044 LDRB W8, [X20 + 0xE7E]
	0x031B0048 LDR X21, [X21 + 0x5A8]
	0x031B004C MOV V8.16B, V4.16B
	0x031B0050 MOV V9.16B, V3.16B
	0x031B0054 MOV V10.16B, V2.16B
	0x031B0058 MOV V11.16B, V1.16B
	0x031B005C MOV V12.16B, V0.16B
	0x031B0060 MOV X19, X0
	0x031B0064 TBNZ X8, 0x0, 0x31B0088
	0x031B0068 ADRP X0, 0xF6F000
	0x031B006C LDR X0, [X0 + 0x3E8]
	0x031B0070 BL 0x1C16CF4
	0x031B0074 ADRP X0, 0xF45000
	0x031B0078 LDR X0, [X0 + 0x5A8]
	0x031B007C BL 0x1C16CF4
	0x031B0080 MOVZ W8, 0x1
	0x031B0084 STRB W8, [X20 + 0xE7E]
	0x031B0088 LDR X0, [X21]
	0x031B008C LDR W8, [X0 + 0xE0]
	0x031B0090 CBNZ W8, 0x31B0098
	0x031B0094 BL 0x1C16DFC
	0x031B0098 BL 0x31AF454
	0x031B009C CBZ X0, 0x31B011C
	0x031B00A0 MOV X1, X31
	0x031B00A4 BL 0x31C0ED0
	0x031B00A8 CBZ X0, 0x31B011C
	0x031B00AC MOV V0.16B, V12.16B
	0x031B00B0 MOV V1.16B, V11.16B
	0x031B00B4 MOV V2.16B, V10.16B
	0x031B00B8 MOV X1, X31
	0x031B00BC BL 0x31C8468
	0x031B00C0 MOV X1, X0
	0x031B00C4 FMOV S0, 1
	0x031B00C8 FMOV S2, W31
	0x031B00CC MOV X0, X19
	0x031B00D0 MOV V1.16B, V9.16B
	0x031B00D4 MOV V3.16B, V8.16B
	0x031B00D8 BL 0x31AF81C
	0x031B00DC CBZ X19, 0x31B011C
	0x031B00E0 ADRP X8, 0xF6F000
	0x031B00E4 LDR X8, [X8 + 0x3E8]
	0x031B00E8 MOV X20, X0
	0x031B00EC MOV X0, X19
	0x031B00F0 LDR X1, [X8]
	0x031B00F4 BL 0x21E52E4
	0x031B00F8 CBZ X20, 0x31B011C
	0x031B00FC STR X0, [X20 + 0xB8]
	0x031B0100 MOV X0, X20
	0x031B0104 LDP X20, X19, [X31 + 0x40]
	0x031B0108 LDP X30, X21, [X31 + 0x30]
	0x031B010C LDP D9, D8, [X31 + 0x20]
	0x031B0110 LDP D11, D10, [X31 + 0x10]
	0x031B0114 LDR V12, [X31], #0x50
	0x031B0118 RET
	0x031B011C BL 0x1C16F20
	0x031B0120 STR D12, [X31 - 0x40]!
	0x031B0124 STP D11, D10, [X31 + 0x8]
	0x031B0128 STP D9, D8, [X31 + 0x18]
	0x031B012C STR X30, [X31 + 0x28]
	0x031B0130 STP X20, X19, [X31 + 0x30]
	0x031B0134 ADRP X20, 0x122B000
	0x031B0138 LDRB W8, [X20 + 0xE7F]
	0x031B013C MOV V8.16B, V4.16B
	0x031B0140 MOV V9.16B, V3.16B
	0x031B0144 MOV V10.16B, V2.16B
	0x031B0148 MOV V11.16B, V1.16B
	0x031B014C MOV V12.16B, V0.16B
	0x031B0150 MOV X19, X0
	0x031B0154 TBNZ X8, 0x0, 0x31B016C
	0x031B0158 ADRP X0, 0xF45000
	0x031B015C LDR X0, [X0 + 0x5A8]
	0x031B0160 BL 0x1C16CF4
	0x031B0164 MOVZ W8, 0x1
	0x031B0168 STRB W8, [X20 + 0xE7F]
	0x031B016C CBZ X19, 0x31B01F4
	0x031B0170 ADRP X20, 0xF45000
	0x031B0174 LDR X20, [X20 + 0x5A8]
	0x031B0178 MOV X0, X19
	0x031B017C MOV X1, X31
	0x031B0180 BL 0x3C32ECC
	0x031B0184 LDR X8, [X20]
	0x031B0188 MOV X19, X0
	0x031B018C LDR W9, [X8 + 0xE0]
	0x031B0190 CBNZ W9, 0x31B019C
	0x031B0194 MOV X0, X8
	0x031B0198 BL 0x1C16DFC
	0x031B019C BL 0x31AF454
	0x031B01A0 CBZ X0, 0x31B01F4
	0x031B01A4 MOV X1, X31
	0x031B01A8 BL 0x31C1038
	0x031B01AC CBZ X0, 0x31B01F4
	0x031B01B0 MOV V0.16B, V12.16B
	0x031B01B4 MOV V1.16B, V11.16B
	0x031B01B8 MOV V2.16B, V10.16B
	0x031B01BC MOV X1, X31
	0x031B01C0 BL 0x31C8468
	0x031B01C4 MOV X1, X0
	0x031B01C8 MOV X0, X19
	0x031B01CC MOV V1.16B, V9.16B
	0x031B01D0 MOV V3.16B, V8.16B
	0x031B01D4 LDP X20, X19, [X31 + 0x30]
	0x031B01D8 LDR X30, [X31 + 0x28]
	0x031B01DC LDP D9, D8, [X31 + 0x18]
	0x031B01E0 LDP D11, D10, [X31 + 0x8]
	0x031B01E4 FMOV S0, 1
	0x031B01E8 FMOV S2, W31
	0x031B01EC LDR V12, [X31], #0x40
	0x031B01F0 B 0x31AF81C
	0x031B01F4 BL 0x1C16F20
	0x031B01F8 STR D12, [X31 - 0x40]!
	0x031B01FC STP D11, D10, [X31 + 0x8]
	0x031B0200 STP D9, D8, [X31 + 0x18]
	0x031B0204 STR X30, [X31 + 0x28]
	0x031B0208 STP X20, X19, [X31 + 0x30]
	0x031B020C ADRP X20, 0x122B000
	0x031B0210 LDRB W8, [X20 + 0xE80]
	0x031B0214 MOV V8.16B, V4.16B
	0x031B0218 MOV V9.16B, V3.16B
	0x031B021C MOV V10.16B, V2.16B
	0x031B0220 MOV V11.16B, V1.16B
	0x031B0224 MOV V12.16B, V0.16B
	0x031B0228 MOV X19, X0
	0x031B022C TBNZ X8, 0x0, 0x31B0244
	0x031B0230 ADRP X0, 0xF45000
	0x031B0234 LDR X0, [X0 + 0x5A8]
	0x031B0238 BL 0x1C16CF4
	0x031B023C MOVZ W8, 0x1
	0x031B0240 STRB W8, [X20 + 0xE80]
	0x031B0244 CBZ X19, 0x31B02CC
	0x031B0248 ADRP X20, 0xF45000
	0x031B024C LDR X20, [X20 + 0x5A8]
	0x031B0250 MOV X0, X19
	0x031B0254 MOV X1, X31
	0x031B0258 BL 0x3C32ECC
	0x031B025C LDR X8, [X20]
	0x031B0260 MOV X19, X0
	0x031B0264 LDR W9, [X8 + 0xE0]
	0x031B0268 CBNZ W9, 0x31B0274
	0x031B026C MOV X0, X8
	0x031B0270 BL 0x1C16DFC
	0x031B0274 BL 0x31AF454
	0x031B0278 CBZ X0, 0x31B02CC
	0x031B027C MOV X1, X31
	0x031B0280 BL 0x31C1038
	0x031B0284 CBZ X0, 0x31B02CC
	0x031B0288 MOV V0.16B, V12.16B
	0x031B028C MOV V1.16B, V11.16B
	0x031B0290 MOV V2.16B, V10.16B
	0x031B0294 MOV X1, X31
	0x031B0298 BL 0x31C8468
	0x031B029C MOV X1, X0
	0x031B02A0 MOV X0, X19
	0x031B02A4 MOV V1.16B, V9.16B
	0x031B02A8 MOV V3.16B, V8.16B
	0x031B02AC LDP X20, X19, [X31 + 0x30]
	0x031B02B0 LDR X30, [X31 + 0x28]
	0x031B02B4 LDP D9, D8, [X31 + 0x18]
	0x031B02B8 LDP D11, D10, [X31 + 0x8]
	0x031B02BC FMOV S0, 1
	0x031B02C0 FMOV S2, W31
	0x031B02C4 LDR V12, [X31], #0x40
	0x031B02C8 B 0x31AF81C
	0x031B02CC BL 0x1C16F20
	0x031B02D0 STP D11, D10, [X31 - 0x40]!
	0x031B02D4 STP D9, D8, [X31 + 0x10]
	0x031B02D8 STP X30, X21, [X31 + 0x20]
	0x031B02DC STP X20, X19, [X31 + 0x30]
	0x031B02E0 ADRP X20, 0x122B000
	0x031B02E4 ADRP X21, 0xF45000
	0x031B02E8 LDRB W8, [X20 + 0xE81]
	0x031B02EC LDR X21, [X21 + 0x5A8]
	0x031B02F0 MOV X19, X0
	0x031B02F4 MOV V8.16B, V0.16B
	0x031B02F8 TBNZ X8, 0x0, 0x31B0310
	0x031B02FC ADRP X0, 0xF45000
	0x031B0300 LDR X0, [X0 + 0x5A8]
	0x031B0304 BL 0x1C16CF4
	0x031B0308 MOVZ W8, 0x1
	0x031B030C STRB W8, [X20 + 0xE81]
	0x031B0310 LDR X0, [X21]
	0x031B0314 LDR W8, [X0 + 0xE0]
	0x031B0318 CBNZ W8, 0x31B0320
	0x031B031C BL 0x1C16DFC
	0x031B0320 BL 0x31AF7B4
	0x031B0324 ADRP X21, 0x1228000
	0x031B0328 LDRB W8, [X21 + 0x783]
	0x031B032C MOV X20, X0
	0x031B0330 CBNZ W8, 0x31B0348
	0x031B0334 ADRP X0, 0xF43000
	0x031B0338 LDR X0, [X0 + 0x5A0]
	0x031B033C BL 0x1C16CF4
	0x031B0340 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 272
	002 Move [X31+112], D15
	003 Move [X31+120], D14
	004 Move [X31+128], D13
	005 Move [X31+136], D12
	006 Move [X31+144], D11
	007 Move [X31+152], D10
	008 Move [X31+160], D9
	009 Move [X31+168], D8
	010 Move [X31+176], X29
	011 Move [X31+184], X30
	012 Move [X31+192], X28
	013 Move [X31+200], X27
	014 Move [X31+208], X26
	015 Move [X31+216], X25
	016 Move [X31+224], X24
	017 Move [X31+232], X23
	018 Move [X31+240], X22
	019 Move [X31+248], X21
	020 Move [X31+256], X20
	021 Move [X31+264], X19
	022 Move V6, [X31+272]
	023 Move V11, V1
	024 Move V1, [X31+280]
	025 Move V12, V2
	026 Move V2, [X31+276]
	027 Move S7, 3
	028 Move S16, 6
	029 Add S19, S0, S6
	030 Multiply S17, S3, S16
	031 Multiply S19, S19, S7
	032 Subtract S24, S19, S17
	033 Add S17, S12, S1
	034 Multiply S18, S4, S16
	035 Multiply S16, S5, S16
	036 Multiply S17, S17, S7
	037 Move V21, [X31+304]
	038 Move V23, [X31+296]
	039 Add S20, S11, S2
	040 Subtract S8, S17, S16
	041 Move V16, [X31+292]
	042 Move V17, [X31+288]
	043 Multiply S19, S20, S7
	044 Subtract S6, S3, S6
	045 Subtract S3, S3, S0
	046 Subtract S2, S4, S2
	047 Subtract S1, S5, S1
	048 Subtract S9, S19, S18
	049 Multiply S18, S3, S7
	050 Multiply S3, S6, S7
	051 Multiply S2, S2, S7
	052 Multiply S1, S1, S7
	053 Subtract S4, S4, S11
	054 Subtract S5, S5, S12
	055 Subtract S3, S3, S0
	056 Subtract S2, S2, S11
	057 Subtract S1, S1, S12
	058 Multiply S19, S4, S7
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move V14, V0
	061 Add S13, S17, S3
	062 Add S16, S16, S2
	063 Add S15, S23, S1
	064 Multiply S7, S5, S7
	065 Move [X31+52], S21
	066 Move [X31+84], S9
	067 Move [X31+92], S15
	068 Move [X31+100], S8
	069 Move [X31+108], S0
	070 Move [X31+108], S12
	071 Move [X31+92], S19
	072 Move [X31+100], S18
	073 Move X19, X0
	074 Move [X31+64], S7
	075 Move [X31+72], S16
	076 Move [X31+72], S13
	077 Move [X31+80], S24
	078 Compare X0, 0
	079 JumpIfEqual {423}
	080 Move X0, X19
	081 Move X1, X31
	082 Call Transform.get_position, X0
	083 Move X0, X19
	084 Move X1, X31
	085 Move [X31+40], S2
	086 Move [X31+48], S0
	087 Move [X31+36], S1
	088 Call Transform.get_rotation, X0
	089 Move [X31+20], S2
	090 Move [X31+28], S0
	091 Move [X31+28], S3
	092 Move [X31+36], S1
	093 Move X20, 0xF45000
	094 Move X21, 0xF45000
	095 Move X8, -40648704
	096 Move X20, [X20+1448]
	097 Move X21, [X21+1440]
	098 Move V0, [X8+380]
	099 Move W22, 1
	100 Move S10, W31
	101 Move W23, 0x42F00000
	102 Move X24, 0x122A000
	103 Move X25, 0x122A000
	104 Move X26, 0x122A000
	105 Move X27, 0x122A000
	106 Move X28, 0x122A000
	107 Move V13, V14
	108 Move V5, V11
	109 Move W29, 1
	110 Move [X31+48], S0
	111 Move [X31+80], S11
	112 NotImplemented "Instruction SCVTF not yet implemented."
	113 Move S1, W23
	114 NotImplemented "Instruction FDIV not yet implemented."
	115 Move S2, [X31+68]
	116 Move S1, [X31+72]
	117 Move V4, [X31+76]
	118 Multiply S3, S15, S0
	119 Add S3, S8, S3
	120 Multiply S1, S1, S0
	121 Add S1, S4, S1
	122 Move V4, [X31+96]
	123 Multiply S1, S0, S1
	124 Multiply S2, S2, S0
	125 Add S2, S9, S2
	126 Add S1, S4, S1
	127 Move V4, [X31+92]
	128 Multiply S2, S0, S2
	129 Multiply S1, S0, S1
	130 Add S14, S14, S1
	131 Add S2, S4, S2
	132 Move V4, [X31+64]
	133 Move V1, [X31+108]
	134 Multiply S3, S0, S3
	135 Multiply S2, S0, S2
	136 Add S3, S4, S3
	137 Multiply S0, S0, S3
	138 Move V15, V5
	139 Add S15, S5, S2
	140 Add S8, S1, S0
	141 Move V0, V13
	142 Move V1, V11
	143 Move V2, V12
	144 Move V3, V14
	145 Move V4, V15
	146 Move V5, V8
	147 Move X0, X31
	148 Call Gizmos.DrawLine, X0, X1
	149 Move W8, [X24+1924]
	150 Compare W8, 0
	151 JumpIfNotEqual {155}
	152 Move X0, X20
	153 Call 0x1C17CF4
	154 Move [X24+1924], W22
	155 Move X0, [X20]
	156 Move W8, [X0+224]
	157 Compare W8, 0
	158 JumpIfNotEqual {160}
	159 Call 0x1C17DFC
	160 Subtract S0, S14, S13
	161 Subtract S1, S15, S11
	162 Subtract S2, S8, S12
	163 Multiply S0, S0, S0
	164 Multiply S1, S1, S1
	165 Add S0, S0, S1
	166 Multiply S1, S2, S2
	167 Add S0, S1, S0
	168 NotImplemented "Instruction FSQRT not yet implemented."
	169 Add S10, S10, S0
	170 Move S0, 1
	171 NotImplemented "Instruction FCMP not yet implemented."
	172 Move X0, X19
	173 Move V0, V14
	174 Move V1, V15
	175 Move V2, V8
	176 Move X1, X31
	177 Call Transform.set_position, X0, X1
	178 Move W8, [X25+2591]
	179 Compare W8, 0
	180 JumpIfNotEqual {184}
	181 Move X0, X21
	182 Call 0x1C17CF4
	183 Move [X25+2591], W22
	184 Move X8, [X21]
	185 Move X0, X19
	186 Move V0, V13
	187 Move V1, V11
	188 Move X8, [X8+184]
	189 Move V2, V12
	190 Move X1, X31
	191 Move S3, [X8+72]
	192 Move S4, [X8+76]
	193 Move V5, [X8+80]
	194 Call Transform.LookAt, X0, X1, X2
	195 Move W8, [X26+2928]
	196 Compare W8, 0
	197 JumpIfNotEqual {201}
	198 Move X0, X21
	199 Call 0x1C17CF4
	200 Move [X26+2928], W22
	201 Move X8, [X21]
	202 Move X0, X19
	203 Move X1, X31
	204 Move X8, [X8+184]
	205 Move S0, [X8+60]
	206 Move S1, [X8+64]
	207 Move V2, [X8+68]
	208 Call Transform.TransformDirection, X0, X1
	209 Move W8, [X27+1925]
	210 Move V9, V1
	211 Move [X31+60], S0
	212 Compare W8, 0
	213 JumpIfNotEqual {221}
	214 Move X0, X20
	215 Move [X31+56], S10
	216 Move V10, V2
	217 Call 0x1C17CF4
	218 Move V2, V10
	219 Move V10, [X31+56]
	220 Move [X27+1925], W22
	221 Move X0, [X20]
	222 Move W8, [X0+224]
	223 Compare W8, 0
	224 JumpIfNotEqual {230}
	225 Move [X31+56], S10
	226 Move V10, V2
	227 Call 0x1C17DFC
	228 Move V2, V10
	229 Move V10, [X31+56]
	230 Subtract S0, S13, S14
	231 Subtract S5, S11, S15
	232 Subtract S6, S12, S8
	233 Multiply S3, S0, S0
	234 Multiply S4, S5, S5
	235 Add S3, S3, S4
	236 Multiply S4, S6, S6
	237 Add S3, S4, S3
	238 Move V4, [X31+48]
	239 NotImplemented "Instruction FSQRT not yet implemented."
	240 NotImplemented "Instruction FCMP not yet implemented."
	241 NotImplemented "Instruction FDIV not yet implemented."
	242 NotImplemented "Instruction FDIV not yet implemented."
	243 NotImplemented "Instruction FDIV not yet implemented."
	244 Move W8, [X28+1923]
	245 Compare W8, 0
	246 JumpIfNotEqual {254}
	247 Move X0, X21
	248 Move V11, V10
	249 Move V10, V2
	250 Call 0x1C17CF4
	251 Move V2, V10
	252 Move V10, V11
	253 Move [X28+1923], W22
	254 Move X8, [X21]
	255 Move X8, [X8+184]
	256 Move S11, [X8]
	257 Move S12, [X8+4]
	258 Move V13, [X8+8]
	259 Move V0, [X31+60]
	260 Add S1, S9, S12
	261 Move V9, [X31+52]
	262 Add S2, S2, S13
	263 Add S0, S0, S11
	264 Move X0, X31
	265 Multiply S0, S0, S9
	266 Multiply S1, S1, S9
	267 Multiply S2, S2, S9
	268 Add S3, S14, S0
	269 Add S4, S15, S1
	270 Add S5, S8, S2
	271 Move V0, V14
	272 Move V1, V15
	273 Move V2, V8
	274 Call Gizmos.DrawLine, X0, X1
	275 Move W8, [X26+2928]
	276 Compare W8, 0
	277 JumpIfNotEqual {281}
	278 Move X0, X21
	279 Call 0x1C17CF4
	280 Move [X26+2928], W22
	281 Move X8, [X21]
	282 Move S3, -1
	283 Move X0, X19
	284 Move X1, X31
	285 Move X8, [X8+184]
	286 Add S10, S10, S3
	287 Move S0, [X8+60]
	288 Move S1, [X8+64]
	289 Move V2, [X8+68]
	290 NotImplemented "Instruction FNEG not yet implemented."
	291 NotImplemented "Instruction FNEG not yet implemented."
	292 NotImplemented "Instruction FNEG not yet implemented."
	293 Call Transform.TransformDirection, X0, X1
	294 Add S0, S11, S0
	295 Add S1, S12, S1
	296 Add S2, S13, S2
	297 Multiply S0, S0, S9
	298 Multiply S1, S1, S9
	299 Multiply S2, S2, S9
	300 Add S3, S14, S0
	301 Add S4, S15, S1
	302 Add S5, S8, S2
	303 Move V0, V14
	304 Move V1, V15
	305 Move V2, V8
	306 Move X0, X31
	307 Call Gizmos.DrawLine, X0, X1
	308 Move V9, [X31+84]
	309 Move V13, V14
	310 Move V11, V15
	311 Move V12, V8
	312 Move V5, [X31+80]
	313 Move S8, [X31+100]
	314 Move S14, [X31+104]
	315 Move V15, [X31+88]
	316 Add W29, W29, 1
	317 NotImplemented "Instruction CMP not yet implemented."
	318 Move S2, [X31+40]
	319 Move S0, [X31+44]
	320 Move V1, [X31+36]
	321 Move X0, X19
	322 Move X1, X31
	323 Call Transform.set_position, X0, X1
	324 Move X0, X19
	325 Move S2, [X31+20]
	326 Move S0, [X31+24]
	327 Move S3, [X31+28]
	328 Move S1, [X31+32]
	329 Move X20, [X31+256]
	330 Move X19, [X31+264]
	331 Move X22, [X31+240]
	332 Move X21, [X31+248]
	333 Move X24, [X31+224]
	334 Move X23, [X31+232]
	335 Move X26, [X31+208]
	336 Move X25, [X31+216]
	337 Move X28, [X31+192]
	338 Move X27, [X31+200]
	339 Move X29, [X31+176]
	340 Move X30, [X31+184]
	341 Move D9, [X31+160]
	342 Move D8, [X31+168]
	343 Move D11, [X31+144]
	344 Move D10, [X31+152]
	345 Move D13, [X31+128]
	346 Move D12, [X31+136]
	347 Move D15, [X31+112]
	348 Move D14, [X31+120]
	349 Move X1, X31
	350 Add X31, X31, 272
	351 Call Transform.set_rotation, X0, X1
	352 Return 
	353 Move W19, 1
	354 Move V0, V14
	355 Move V1, V11
	356 Move V2, V12
	357 NotImplemented "Instruction SCVTF not yet implemented."
	358 Move S4, 30
	359 NotImplemented "Instruction FDIV not yet implemented."
	360 Multiply S4, S13, S3
	361 Multiply S5, S16, S3
	362 Multiply S6, S15, S3
	363 Add S4, S24, S4
	364 Add S5, S9, S5
	365 Add S6, S8, S6
	366 Multiply S4, S3, S4
	367 Multiply S5, S3, S5
	368 Multiply S6, S3, S6
	369 Add S4, S18, S4
	370 Add S5, S19, S5
	371 Add S6, S7, S6
	372 Multiply S4, S3, S4
	373 Multiply S5, S3, S5
	374 Multiply S3, S3, S6
	375 Move V6, [X31+104]
	376 Add S9, S11, S5
	377 Move X0, X31
	378 Move V15, V16
	379 Add S8, S6, S4
	380 Move V4, [X31+108]
	381 Move V14, V7
	382 Move V12, V24
	383 Add S10, S4, S3
	384 Move V3, V8
	385 Move V4, V9
	386 Move V5, V10
	387 Call Gizmos.DrawLine, X0, X1
	388 Move V0, V8
	389 Move S18, [X31+96]
	390 Move S8, [X31+100]
	391 Move V1, V9
	392 Move V16, V15
	393 Move S9, [X31+84]
	394 Move S15, [X31+88]
	395 Move V19, [X31+92]
	396 Add W19, W19, 1
	397 NotImplemented "Instruction CMP not yet implemented."
	398 Move V2, V10
	399 Move V24, V12
	400 Move V7, V14
	401 Move X20, [X31+256]
	402 Move X19, [X31+264]
	403 Move X22, [X31+240]
	404 Move X21, [X31+248]
	405 Move X24, [X31+224]
	406 Move X23, [X31+232]
	407 Move X26, [X31+208]
	408 Move X25, [X31+216]
	409 Move X28, [X31+192]
	410 Move X27, [X31+200]
	411 Move X29, [X31+176]
	412 Move X30, [X31+184]
	413 Move D9, [X31+160]
	414 Move D8, [X31+168]
	415 Move D11, [X31+144]
	416 Move D10, [X31+152]
	417 Move D13, [X31+128]
	418 Move D12, [X31+136]
	419 Move D15, [X31+112]
	420 Move D14, [X31+120]
	421 Add X31, X31, 272
	422 Return 
	423 Call 0x1C17F20

Method: System.Object logError(System.String error)

Disassembly:
	0x031B0344 STRB W8, [X21 + 0x783]
	0x031B0348 ADRP X8, 0xF43000
	0x031B034C LDR X8, [X8 + 0x5A0]
	0x031B0350 LDR X8, [X8]
	0x031B0354 LDR X8, [X8 + 0xB8]
	0x031B0358 LDP S9, S10, [X8]
	0x031B035C LDR V11, [X8 + 0x8]
	0x031B0360 BL 0x31AF454
	0x031B0364 CBZ X0, 0x31B03AC
	0x031B0368 MOV X1, X31
	0x031B036C BL 0x31C1A10
	0x031B0370 CBZ X0, 0x31B03AC
	0x031B0374 MOV X1, X19
	0x031B0378 MOV X2, X31
	0x031B037C BL 0x31C7FD8
	0x031B0380 MOV X1, X0
	0x031B0384 MOV X0, X20
	0x031B0388 MOV V0.16B, V9.16B
	0x031B038C MOV V3.16B, V8.16B
	0x031B0390 LDP X20, X19, [X31 + 0x30]
	0x031B0394 LDP X30, X21, [X31 + 0x20]
	0x031B0398 LDP D9, D8, [X31 + 0x10]
	0x031B039C MOV V1.16B, V10.16B
	0x031B03A0 MOV V2.16B, V11.16B
	0x031B03A4 LDP D11, D10, [X31], #0x40
	0x031B03A8 B 0x31AF81C
	0x031B03AC BL 0x1C16F20
	0x031B03B0 STP D11, D10, [X31 - 0x40]!
	0x031B03B4 STP D9, D8, [X31 + 0x10]
	0x031B03B8 STP X30, X21, [X31 + 0x20]
	0x031B03BC STP X20, X19, [X31 + 0x30]
	0x031B03C0 ADRP X20, 0x122B000
	0x031B03C4 ADRP X21, 0xF45000
	0x031B03C8 LDRB W8, [X20 + 0xE82]
	0x031B03CC LDR X21, [X21 + 0x5A8]
	0x031B03D0 MOV X19, X0
	0x031B03D4 MOV V8.16B, V0.16B
	0x031B03D8 TBNZ X8, 0x0, 0x31B03F0
	0x031B03DC ADRP X0, 0xF45000
	0x031B03E0 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x122C000
	006 Move X20, 0xF46000
	007 Move W8, [X21+3697]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xF44000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0xF46000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3697], W8
	022 Move X0, [X20]
	023 Move X21, 0xF44000
	024 Move W8, [X0+224]
	025 Move X21, [X21+2600]
	026 Compare W8, 0
	027 JumpIfNotEqual {30}
	028 Call 0x1C17DFC
	029 Move X0, [X20]
	030 Move X8, [X21]
	031 Move X9, [X0+184]
	032 Move W10, [X8+224]
	033 Move W20, [X9]
	034 Compare W10, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move X1, X31
	040 Compare W20, 0
	041 JumpIfEqual {43}
	042 Call Debug.LogError, X0
	043 Call Debug.Log, X0
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X0, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: LTDescr options(LTDescr seed)

Disassembly:
	0x031B03E4 BL 0x1C16CF4
	0x031B03E8 MOVZ W8, 0x1
	0x031B03EC STRB W8, [X20 + 0xE82]
	0x031B03F0 LDR X0, [X21]
	0x031B03F4 LDR W8, [X0 + 0xE0]
	0x031B03F8 CBNZ W8, 0x31B0400
	0x031B03FC BL 0x1C16DFC
	0x031B0400 BL 0x31AF7B4
	0x031B0404 ADRP X21, 0x1228000
	0x031B0408 LDRB W8, [X21 + 0x783]
	0x031B040C MOV X20, X0
	0x031B0410 CBNZ W8, 0x31B0428
	0x031B0414 ADRP X0, 0xF43000
	0x031B0418 LDR X0, [X0 + 0x5A0]
	0x031B041C BL 0x1C16CF4
	0x031B0420 MOVZ W8, 0x1
	0x031B0424 STRB W8, [X21 + 0x783]
	0x031B0428 ADRP X8, 0xF43000
	0x031B042C LDR X8, [X8 + 0x5A0]
	0x031B0430 LDR X8, [X8]
	0x031B0434 LDR X8, [X8 + 0xB8]
	0x031B0438 LDP S9, S10, [X8]
	0x031B043C LDR V11, [X8 + 0x8]
	0x031B0440 BL 0x31AF454
	0x031B0444 CBZ X0, 0x31B048C
	0x031B0448 MOV X1, X31
	0x031B044C BL 0x31C1A10
	0x031B0450 CBZ X0, 0x31B048C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122C000
	005 Move X19, 0xF44000
	006 Move W8, [X20+3698]
	007 Move X19, [X19+2600]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xF44000
	013 Move X0, [X0+2600]
	014 Call 0x1C17CF4
	015 Move X0, 0xF70000
	016 Move X0, [X0+968]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3698], W8
	020 Move X0, [X19]
	021 Move X19, 0xF70000
	022 Move W8, [X0+224]
	023 Move X19, [X19+968]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, [X19]
	028 Move X1, X31
	029 Call Debug.LogError, X0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X0, X31
	033 Move X30, [X31+32]
	034 Return X0

Method: LTDescr options()

Disassembly:
	0x031B0454 MOV X1, X19
	0x031B0458 MOV X2, X31
	0x031B045C BL 0x31C7FFC
	0x031B0460 MOV X1, X0
	0x031B0464 MOV X0, X20
	0x031B0468 MOV V0.16B, V9.16B
	0x031B046C MOV V3.16B, V8.16B
	0x031B0470 LDP X20, X19, [X31 + 0x30]
	0x031B0474 LDP X30, X21, [X31 + 0x20]
	0x031B0478 LDP D9, D8, [X31 + 0x10]
	0x031B047C MOV V1.16B, V10.16B
	0x031B0480 MOV V2.16B, V11.16B
	0x031B0484 LDP D11, D10, [X31], #0x40
	0x031B0488 B 0x31AF81C
	0x031B048C BL 0x1C16F20
	0x031B0490 STP D11, D10, [X31 - 0x50]!
	0x031B0494 STP D9, D8, [X31 + 0x10]
	0x031B0498 STR X30, [X31 + 0x20]
	0x031B049C STP X22, X21, [X31 + 0x30]
	0x031B04A0 STP X20, X19, [X31 + 0x40]
	0x031B04A4 ADRP X21, 0x122B000
	0x031B04A8 LDRB W8, [X21 + 0xE83]
	0x031B04AC MOV X20, X1
	0x031B04B0 MOV V8.16B, V0.16B
	0x031B04B4 MOV X19, X0
	0x031B04B8 TBNZ X8, 0x0, 0x31B04D0
	0x031B04BC ADRP X0, 0xF45000
	0x031B04C0 LDR X0, [X0 + 0x5A8]
	0x031B04C4 BL 0x1C16CF4
	0x031B04C8 MOVZ W8, 0x1
	0x031B04CC STRB W8, [X21 + 0xE83]
	0x031B04D0 ADRP X22, 0x1228000
	0x031B04D4 ADRP X21, 0xF45000
	0x031B04D8 LDRB W8, [X22 + 0x783]
	0x031B04DC LDR X21, [X21 + 0x5A8]
	0x031B04E0 CBNZ W8, 0x31B04F8
	0x031B04E4 ADRP X0, 0xF43000
	0x031B04E8 LDR X0, [X0 + 0x5A0]
	0x031B04EC BL 0x1C16CF4
	0x031B04F0 MOVZ W8, 0x1
	0x031B04F4 STRB W8, [X22 + 0x783]
	0x031B04F8 ADRP X8, 0xF43000
	0x031B04FC LDR X8, [X8 + 0x5A0]
	0x031B0500 LDR X0, [X21]
	0x031B0504 LDR X8, [X8]
	0x031B0508 LDR W9, [X0 + 0xE0]
	0x031B050C LDR X8, [X8 + 0xB8]
	0x031B0510 LDP S11, S10, [X8]
	0x031B0514 LDR V9, [X8 + 0x8]
	0x031B0518 CBNZ W9, 0x31B0520
	0x031B051C BL 0x1C16DFC
	0x031B0520 BL 0x31AF454
	0x031B0524 CBZ X0, 0x31B0570
	0x031B0528 MOV X1, X31
	0x031B052C BL 0x31C1A10
	0x031B0530 CBZ X0, 0x31B0570
	0x031B0534 MOV X1, X20
	0x031B0538 MOV X2, X31
	0x031B053C BL 0x31C7FD8
	0x031B0540 MOV X1, X0
	0x031B0544 MOV X0, X19
	0x031B0548 MOV V2.16B, V9.16B
	0x031B054C MOV V3.16B, V8.16B
	0x031B0550 LDP X20, X19, [X31 + 0x40]
	0x031B0554 LDP X22, X21, [X31 + 0x30]
	0x031B0558 LDR X30, [X31 + 0x20]
	0x031B055C LDP D9, D8, [X31 + 0x10]
	0x031B0560 MOV V0.16B, V11.16B
	0x031B0564 MOV V1.16B, V10.16B
	0x031B0568 LDP D11, D10, [X31], #0x50
	0x031B056C B 0x31AF81C
	0x031B0570 BL 0x1C16F20
	0x031B0574 STP D11, D10, [X31 - 0x50]!
	0x031B0578 STP D9, D8, [X31 + 0x10]
	0x031B057C STR X30, [X31 + 0x20]
	0x031B0580 STP X22, X21, [X31 + 0x30]
	0x031B0584 STP X20, X19, [X31 + 0x40]
	0x031B0588 ADRP X21, 0x122B000
	0x031B058C LDRB W8, [X21 + 0xE84]
	0x031B0590 MOV X20, X1
	0x031B0594 MOV V8.16B, V0.16B
	0x031B0598 MOV X19, X0
	0x031B059C TBNZ X8, 0x0, 0x31B05B4
	0x031B05A0 ADRP X0, 0xF45000
	0x031B05A4 LDR X0, [X0 + 0x5A8]
	0x031B05A8 BL 0x1C16CF4
	0x031B05AC MOVZ W8, 0x1
	0x031B05B0 STRB W8, [X21 + 0xE84]
	0x031B05B4 ADRP X22, 0x1228000
	0x031B05B8 ADRP X21, 0xF45000
	0x031B05BC LDRB W8, [X22 + 0x783]
	0x031B05C0 LDR X21, [X21 + 0x5A8]
	0x031B05C4 CBNZ W8, 0x31B05DC
	0x031B05C8 ADRP X0, 0xF43000
	0x031B05CC LDR X0, [X0 + 0x5A0]
	0x031B05D0 BL 0x1C16CF4
	0x031B05D4 MOVZ W8, 0x1
	0x031B05D8 STRB W8, [X22 + 0x783]
	0x031B05DC ADRP X8, 0xF43000
	0x031B05E0 LDR X8, [X8 + 0x5A0]
	0x031B05E4 LDR X0, [X21]
	0x031B05E8 LDR X8, [X8]
	0x031B05EC LDR W9, [X0 + 0xE0]
	0x031B05F0 LDR X8, [X8 + 0xB8]
	0x031B05F4 LDP S11, S10, [X8]
	0x031B05F8 LDR V9, [X8 + 0x8]
	0x031B05FC CBNZ W9, 0x31B0604
	0x031B0600 BL 0x1C16DFC
	0x031B0604 BL 0x31AF454
	0x031B0608 CBZ X0, 0x31B0654
	0x031B060C MOV X1, X31
	0x031B0610 BL 0x31C1A10
	0x031B0614 CBZ X0, 0x31B0654
	0x031B0618 MOV X1, X20
	0x031B061C MOV X2, X31
	0x031B0620 BL 0x31C7FFC
	0x031B0624 MOV X1, X0
	0x031B0628 MOV X0, X19
	0x031B062C MOV V2.16B, V9.16B
	0x031B0630 MOV V3.16B, V8.16B
	0x031B0634 LDP X20, X19, [X31 + 0x40]
	0x031B0638 LDP X22, X21, [X31 + 0x30]
	0x031B063C LDR X30, [X31 + 0x20]
	0x031B0640 LDP D9, D8, [X31 + 0x10]
	0x031B0644 MOV V0.16B, V11.16B
	0x031B0648 MOV V1.16B, V10.16B
	0x031B064C LDP D11, D10, [X31], #0x50
	0x031B0650 B 0x31AF81C
	0x031B0654 BL 0x1C16F20
	0x031B0658 STP D11, D10, [X31 - 0x40]!
	0x031B065C STP D9, D8, [X31 + 0x10]
	0x031B0660 STP X30, X21, [X31 + 0x20]
	0x031B0664 STP X20, X19, [X31 + 0x30]
	0x031B0668 ADRP X20, 0x122B000
	0x031B066C ADRP X21, 0xF45000
	0x031B0670 LDRB W8, [X20 + 0xE85]
	0x031B0674 LDR X21, [X21 + 0x5A8]
	0x031B0678 MOV V8.16B, V0.16B
	0x031B067C MOV X19, X0
	0x031B0680 TBNZ X8, 0x0, 0x31B0698
	0x031B0684 ADRP X0, 0xF45000
	0x031B0688 LDR X0, [X0 + 0x5A8]
	0x031B068C BL 0x1C16CF4
	0x031B0690 MOVZ W8, 0x1
	0x031B0694 STRB W8, [X20 + 0xE85]
	0x031B0698 LDR X0, [X21]
	0x031B069C LDR W8, [X0 + 0xE0]
	0x031B06A0 CBNZ W8, 0x31B06A8
	0x031B06A4 BL 0x1C16DFC
	0x031B06A8 BL 0x31AF7B4
	0x031B06AC ADRP X21, 0x1228000
	0x031B06B0 LDRB W8, [X21 + 0x783]
	0x031B06B4 MOV X20, X0
	0x031B06B8 CBNZ W8, 0x31B06D0
	0x031B06BC ADRP X0, 0xF43000
	0x031B06C0 LDR X0, [X0 + 0x5A0]
	0x031B06C4 BL 0x1C16CF4
	0x031B06C8 MOVZ W8, 0x1
	0x031B06CC STRB W8, [X21 + 0x783]
	0x031B06D0 ADRP X8, 0xF43000
	0x031B06D4 LDR X8, [X8 + 0x5A0]
	0x031B06D8 LDR X8, [X8]
	0x031B06DC LDR X8, [X8 + 0xB8]
	0x031B06E0 LDP S9, S10, [X8]
	0x031B06E4 LDR V11, [X8 + 0x8]
	0x031B06E8 BL 0x31AF454
	0x031B06EC CBZ X0, 0x31B0744
	0x031B06F0 MOV X1, X31
	0x031B06F4 BL 0x31C1A10
	0x031B06F8 CBZ X0, 0x31B0744
	0x031B06FC MOV X1, X19
	0x031B0700 MOV X2, X31
	0x031B0704 BL 0x31C8398
	0x031B0708 CBZ X0, 0x31B0744
	0x031B070C MOVZ W1, 0x1
	0x031B0710 MOV X2, X31
	0x031B0714 BL 0x31C8488
	0x031B0718 MOV X1, X0
	0x031B071C MOV X0, X20
	0x031B0720 MOV V0.16B, V9.16B
	0x031B0724 MOV V3.16B, V8.16B
	0x031B0728 LDP X20, X19, [X31 + 0x30]
	0x031B072C LDP X30, X21, [X31 + 0x20]
	0x031B0730 LDP D9, D8, [X31 + 0x10]
	0x031B0734 MOV V1.16B, V10.16B
	0x031B0738 MOV V2.16B, V11.16B
	0x031B073C LDP D11, D10, [X31], #0x40
	0x031B0740 B 0x31AF81C
	0x031B0744 BL 0x1C16F20
	0x031B0748 STP D11, D10, [X31 - 0x40]!
	0x031B074C STP D9, D8, [X31 + 0x10]
	0x031B0750 STP X30, X21, [X31 + 0x20]
	0x031B0754 STP X20, X19, [X31 + 0x30]
	0x031B0758 ADRP X20, 0x122B000
	0x031B075C ADRP X21, 0xF45000
	0x031B0760 LDRB W8, [X20 + 0xE86]
	0x031B0764 LDR X21, [X21 + 0x5A8]
	0x031B0768 MOV V8.16B, V3.16B
	0x031B076C MOV V9.16B, V2.16B
	0x031B0770 MOV V10.16B, V1.16B
	0x031B0774 MOV V11.16B, V0.16B
	0x031B0778 MOV X19, X0
	0x031B077C TBNZ X8, 0x0, 0x31B0794
	0x031B0780 ADRP X0, 0xF45000
	0x031B0784 LDR X0, [X0 + 0x5A8]
	0x031B0788 BL 0x1C16CF4
	0x031B078C MOVZ W8, 0x1
	0x031B0790 STRB W8, [X20 + 0xE86]
	0x031B0794 LDR X0, [X21]
	0x031B0798 LDR W8, [X0 + 0xE0]
	0x031B079C CBNZ W8, 0x31B07A4
	0x031B07A0 BL 0x1C16DFC
	0x031B07A4 BL 0x31AF454
	0x031B07A8 CBZ X0, 0x31B07E0
	0x031B07AC MOV X1, X31
	0x031B07B0 BL 0x31C1C38

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x122C000
	007 Move X19, 0xF46000
	008 Move W8, [X20+3699]
	009 Move X19, [X19+1448]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0xF70000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move X0, 0xF46000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move X0, 0xF70000
	021 Move X0, [X0+976]
	022 Call 0x1C17CF4
	023 Move X0, 0xF70000
	024 Move X0, [X0+984]
	025 Call 0x1C17CF4
	026 Move X0, 0xF70000
	027 Move X0, [X0+992]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3699], W8
	031 Move X0, [X19]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Call LeanTween.init
	037 Move X0, [X19]
	038 NotImplemented "Instruction MOVI not yet implemented."
	039 Move X8, [X0+184]
	040 Move W9, [X8+132]
	041 Move [X8+96], W9
	042 Move [X8+100], W31
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {48}
	046 Call 0x1C17DFC
	047 Move X0, [X19]
	048 Move X8, [X0+184]
	049 Move W11, [X0+224]
	050 Move W9, [X8+100]
	051 Move W10, [X8+60]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Compare W11, 0
	054 JumpIfEqual {56}
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Call 0x1C17DFC
	057 Move X0, [X19]
	058 Move X8, [X0+184]
	059 Move W9, [X0+224]
	060 Move W20, [X8+100]
	061 Move W21, [X8+60]
	062 Compare W9, 0
	063 JumpIfNotEqual {67}
	064 Call 0x1C17DFC
	065 Move X0, [X19]
	066 Move X8, [X0+184]
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Move W9, [X8+96]
	069 Move W10, [X8+60]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W9, [X0+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {77}
	074 Call 0x1C17DFC
	075 Move X0, [X19]
	076 Move X8, [X0+184]
	077 Move [X8+96], W31
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {83}
	081 Call 0x1C17DFC
	082 Move X0, [X19]
	083 Move X9, [X0+184]
	084 Move X8, [X9+24]
	085 Compare X8, 0
	086 JumpIfEqual {232}
	087 NotImplemented "Instruction LDRSW not yet implemented."
	088 Move W10, [X8+24]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Add X8, X8, X9
	091 Move X8, [X8+32]
	092 Compare X8, 0
	093 JumpIfEqual {232}
	094 Move W9, [X0+224]
	095 Move W20, [X8+16]
	096 Compare W9, 0
	097 JumpIfNotEqual {100}
	098 Call 0x1C17DFC
	099 Move X0, [X19]
	100 Move X8, [X0+184]
	101 Compare W20, 0
	102 JumpIfEqual {134}
	103 Move V0, [X8+96]
	104 Add S0, S0, S8
	105 Move [X8+96], D0
	106 Compare W11, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 Move X8, 0xF70000
	110 Move X8, [X8+984]
	111 Move X0, [X8]
	112 Call LeanTween.logError, X0
	113 Move X0, [X19]
	114 Move W8, [X8+60]
	115 Add X0, X31, 12
	116 Move X1, X31
	117 Move W8, W8
	118 ShiftRight W8, 31
	119 And W8, W8, 0x3FFFFFFF
	120 Move [X31+12], W8
	121 Call Int32.ToString, X0
	122 Move X8, 0xF70000
	123 Move X8, [X8+992]
	124 Move X9, 0xF70000
	125 Move X9, [X9+976]
	126 Move X1, X0
	127 Move X8, [X8]
	128 Move X3, X31
	129 Move X2, [X9]
	130 Move X0, X8
	131 Call String.Concat, X0, X1, X2
	132 Call LeanTween.logError, X0
	133 Move X0, X31
	134 Move W9, [X8+96]
	135 Move W10, [X8+56]
	136 Add W9, W9, 1
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move W10, [X0+224]
	139 Compare W10, 0
	140 JumpIfNotEqual {146}
	141 Call 0x1C17DFC
	142 Move X0, [X19]
	143 Move X8, [X0+184]
	144 Move W9, [X8+96]
	145 Add W9, W9, 1
	146 Move W10, [X8+60]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Move W10, [X0+224]
	149 Compare W10, 0
	150 JumpIfNotEqual {156}
	151 Call 0x1C17DFC
	152 Move X0, [X19]
	153 Move X8, [X0+184]
	154 Move W9, [X8+96]
	155 Add W9, W9, 1
	156 Move [X8+56], W9
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {162}
	160 Call 0x1C17DFC
	161 Move X0, [X19]
	162 Move X8, [X0+184]
	163 Move W9, [X8+96]
	164 Add W9, W9, 1
	165 Move [X8+132], W9
	166 Move W8, [X0+224]
	167 Compare W8, 0
	168 JumpIfNotEqual {171}
	169 Call 0x1C17DFC
	170 Move X0, [X19]
	171 Move X9, [X0+184]
	172 Move X8, [X9+24]
	173 Compare X8, 0
	174 JumpIfEqual {232}
	175 NotImplemented "Instruction LDRSW not yet implemented."
	176 Move W10, [X8+24]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Add X8, X8, X9
	179 Move X0, [X8+32]
	180 Compare X0, 0
	181 JumpIfEqual {232}
	182 Move X1, X31
	183 Call LTDescr.reset, X0
	184 Move X0, [X19]
	185 Move X8, [X0+184]
	186 Move W9, [X8+92]
	187 Add W9, W9, 1
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move [X8+92], W9
	190 Move W9, [X0+224]
	191 Compare W9, 0
	192 JumpIfNotEqual {196}
	193 Call 0x1C17DFC
	194 Move X0, [X19]
	195 Move X8, [X0+184]
	196 Move [X8+92], W31
	197 Move W8, [X0+224]
	198 Compare W8, 0
	199 JumpIfNotEqual {202}
	200 Call 0x1C17DFC
	201 Move X0, [X19]
	202 Move X8, [X0+184]
	203 Move X9, [X8+24]
	204 Compare X9, 0
	205 JumpIfEqual {232}
	206 NotImplemented "Instruction LDRSW not yet implemented."
	207 Move W10, [X9+24]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Add X9, X9, X1
	210 Move X0, [X9+32]
	211 Compare X0, 0
	212 JumpIfEqual {232}
	213 Move W2, [X8+92]
	214 Move X3, X31
	215 Call LTDescr.setId, X0, X1, X2
	216 Move X8, [X19]
	217 Move X9, [X8+184]
	218 Move X8, [X9+24]
	219 Compare X8, 0
	220 JumpIfEqual {232}
	221 NotImplemented "Instruction LDRSW not yet implemented."
	222 Move W10, [X8+24]
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Add X8, X8, X9
	225 Move X0, [X8+32]
	226 Move X20, [X31+32]
	227 Move X19, [X31+40]
	228 Move X30, [X31+16]
	229 Move X21, [X31+24]
	230 Move V8, [X31+48]
	231 Return X0
	232 Call 0x1C17F20
	233 Call 0x1C17F28

Method: UnityEngine.GameObject get_tweenEmpty()

Disassembly:
	0x031B07B4 MOV X1, X0
	0x031B07B8 MOV X0, X19
	0x031B07BC MOV V2.16B, V9.16B
	0x031B07C0 MOV V3.16B, V8.16B
	0x031B07C4 LDP X20, X19, [X31 + 0x30]
	0x031B07C8 LDP X30, X21, [X31 + 0x20]
	0x031B07CC LDP D9, D8, [X31 + 0x10]
	0x031B07D0 MOV V0.16B, V11.16B
	0x031B07D4 MOV V1.16B, V10.16B
	0x031B07D8 LDP D11, D10, [X31], #0x40
	0x031B07DC B 0x31AF81C
	0x031B07E0 BL 0x1C16F20
	0x031B07E4 STP D11, D10, [X31 - 0x40]!
	0x031B07E8 STP D9, D8, [X31 + 0x10]
	0x031B07EC STR X30, [X31 + 0x20]
	0x031B07F0 STP X20, X19, [X31 + 0x30]
	0x031B07F4 ADRP X20, 0x122B000
	0x031B07F8 LDRB W8, [X20 + 0xE87]
	0x031B07FC MOV V8.16B, V2.16B
	0x031B0800 MOV V9.16B, V1.16B
	0x031B0804 MOV V10.16B, V0.16B
	0x031B0808 MOV X19, X0
	0x031B080C TBNZ X8, 0x0, 0x31B0824
	0x031B0810 ADRP X0, 0xF45000
	0x031B0814 LDR X0, [X0 + 0x5A8]
	0x031B0818 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x122C000
	005 Move X19, 0xF46000
	006 Move W8, [X20+3700]
	007 Move X19, [X19+1448]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xF46000
	013 Move X0, [X0+1448]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3700], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move W0, [X8+60]
	025 Call LeanTween.init, X0
	026 Move X8, [X19]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X8, [X8+184]
	030 Move X0, [X8+72]
	031 Move X30, [X31+32]
	032 Return X0

Method: LTDescr pushNewTween(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time, LTDescr tween)

Disassembly:
	0x031B081C MOVZ W8, 0x1
	0x031B0820 STRB W8, [X20 + 0xE87]
	0x031B0824 CBZ X19, 0x31B0898
	0x031B0828 MOV X0, X19
	0x031B082C MOV X1, X31
	0x031B0830 BL 0x3C356F8
	0x031B0834 CBZ X0, 0x31B0898
	0x031B0838 ADRP X20, 0xF45000
	0x031B083C LDR X20, [X20 + 0x5A8]
	0x031B0840 MOV X1, X31
	0x031B0844 BL 0x3C3F58C
	0x031B0848 LDR X0, [X20]
	0x031B084C MOV V11.16B, V2.16B
	0x031B0850 LDR W8, [X0 + 0xE0]
	0x031B0854 CBNZ W8, 0x31B085C
	0x031B0858 BL 0x1C16DFC
	0x031B085C BL 0x31AF454
	0x031B0860 CBZ X0, 0x31B0898
	0x031B0864 MOV X1, X31
	0x031B0868 BL 0x31C1C38
	0x031B086C MOV X1, X0
	0x031B0870 MOV X0, X19
	0x031B0874 MOV V1.16B, V9.16B
	0x031B0878 MOV V3.16B, V8.16B
	0x031B087C LDP X20, X19, [X31 + 0x30]
	0x031B0880 LDR X30, [X31 + 0x20]
	0x031B0884 LDP D9, D8, [X31 + 0x10]
	0x031B0888 MOV V0.16B, V10.16B
	0x031B088C MOV V2.16B, V11.16B
	0x031B0890 LDP D11, D10, [X31], #0x40
	0x031B0894 B 0x31AF81C
	0x031B0898 BL 0x1C16F20
	0x031B089C STR D8, [X31 - 0x40]!
	0x031B08A0 STP X30, X23, [X31 + 0x10]
	0x031B08A4 STP X22, X21, [X31 + 0x20]
	0x031B08A8 STP X20, X19, [X31 + 0x30]
	0x031B08AC ADRP X21, 0x122B000
	0x031B08B0 ADRP X22, 0xF45000
	0x031B08B4 LDRB W8, [X21 + 0xE88]
	0x031B08B8 LDR X22, [X22 + 0x5A8]
	0x031B08BC MOV V8.16B, V0.16B
	0x031B08C0 MOV X20, X1
	0x031B08C4 MOV X19, X0
	0x031B08C8 TBNZ X8, 0x0, 0x31B08EC
	0x031B08CC ADRP X0, 0xF6F000
	0x031B08D0 LDR X0, [X0 + 0x3F0]
	0x031B08D4 BL 0x1C16CF4
	0x031B08D8 ADRP X0, 0xF45000
	0x031B08DC LDR X0, [X0 + 0x5A8]
	0x031B08E0 BL 0x1C16CF4
	0x031B08E4 MOVZ W8, 0x1
	0x031B08E8 STRB W8, [X21 + 0xE88]
	0x031B08EC LDR X0, [X22]
	0x031B08F0 LDR W8, [X0 + 0xE0]
	0x031B08F4 CBNZ W8, 0x31B08FC
	0x031B08F8 BL 0x1C16DFC
	0x031B08FC BL 0x31AF454
	0x031B0900 CBZ X0, 0x31B09DC
	0x031B0904 MOV X1, X31
	0x031B0908 BL 0x31C0444
	0x031B090C LDR X8, [X22]
	0x031B0910 LDR X9, [X8 + 0xB8]
	0x031B0914 STR X0, [X9 + 0x88]
	0x031B0918 CBZ X0, 0x31B09DC
	0x031B091C LDR X9, [X0 + 0xE8]
	0x031B0920 CBZ X9, 0x31B09DC
	0x031B0924 LDR W10, [X8 + 0xE0]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x122C000
	011 Move X21, 0xF46000
	012 Move W8, [X22+3701]
	013 Move X21, [X21+1448]
	014 Move X19, X1
	015 Move V8, V3
	016 Move V9, V2
	017 Move V10, V1
	018 Move V11, V0
	019 Move X20, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0xF46000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move X0, 0xF44000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X22+3701], W8
	032 Move X0, [X21]
	033 Move X22, 0xF44000
	034 Move W8, [X0+224]
	035 Move X22, [X22+1432]
	036 Compare W8, 0
	037 JumpIfNotEqual {40}
	038 Call 0x1C17DFC
	039 Move X0, [X21]
	040 Move X8, [X0+184]
	041 Move W0, [X8+60]
	042 Call LeanTween.init, X0
	043 Move X0, [X22]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Equality, X0, X1
	052 Move W8, W0
	053 Move X0, X31
	054 Compare X19, 0
	055 JumpIfEqual {75}
	056 Move TEMP, X8
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfEqual {75}
	060 Compare X20, 0
	061 JumpIfEqual {85}
	062 Move X0, X20
	063 Move X1, X31
	064 Call GameObject.get_transform, X0
	065 NotImplemented "Instruction FCMP not yet implemented."
	066 Move [X19+88], X0
	067 Move [X19+108], S11
	068 Move [X19+116], S10
	069 Move [X19+116], S9
	070 Move [X19+40], S8
	071 Move X0, X19
	072 Move X1, X31
	073 Call LTDescr.updateInternal, X0
	074 Move X0, X19
	075 Move X20, [X31+64]
	076 Move X19, [X31+72]
	077 Move X22, [X31+48]
	078 Move X21, [X31+56]
	079 Move X30, [X31+32]
	080 Move D9, [X31+16]
	081 Move D8, [X31+24]
	082 Move D11, [X31+80]
	083 Move D10, [X31+88]
	084 Return X0
	085 Call 0x1C17F20

Method: LTDescr play(UnityEngine.RectTransform rectTransform, UnityEngine.Sprite[] sprites)

Disassembly:
	0x031B0928 LDR X21, [X9 + 0x48]
	0x031B092C CBNZ W10, 0x31B0948
	0x031B0930 MOV X0, X8
	0x031B0934 BL 0x1C16DFC
	0x031B0938 LDR X8, [X22]
	0x031B093C LDR X8, [X8 + 0xB8]
	0x031B0940 LDR X0, [X8 + 0x88]
	0x031B0944 CBZ X0, 0x31B09DC
	0x031B0948 LDR X23, [X0 + 0xE8]
	0x031B094C CBZ X21, 0x31B0968
	0x031B0950 CBZ X23, 0x31B09DC
	0x031B0954 LDR X0, [X23 + 0x48]
	0x031B0958 CBZ X0, 0x31B09DC
	0x031B095C MOV X1, X20
	0x031B0960 BL 0x31B0A0C
	0x031B0964 B 0x31B0998
	0x031B0968 ADRP X8, 0xF6F000
	0x031B096C LDR X8, [X8 + 0x3F0]
	0x031B0970 LDR X0, [X8]
	0x031B0974 BL 0x1C16F10
	0x031B0978 MOV X1, X31
	0x031B097C MOV X21, X0
	0x031B0980 BL 0x33BDD8C
	0x031B0984 MOV X0, X21
	0x031B0988 MOV X1, X20
	0x031B098C BL 0x31B0A0C
	0x031B0990 CBZ X23, 0x31B09DC
	0x031B0994 STR X21, [X23 + 0x48]
	0x031B0998 LDR X0, [X22]
	0x031B099C LDR W8, [X0 + 0xE0]
	0x031B09A0 CBNZ W8, 0x31B09AC
	0x031B09A4 BL 0x1C16DFC
	0x031B09A8 LDR X0, [X22]
	0x031B09AC LDR X8, [X0 + 0xB8]
	0x031B09B0 MOV X0, X19
	0x031B09B4 LDP X20, X19, [X31 + 0x30]
	0x031B09B8 LDP X22, X21, [X31 + 0x20]
	0x031B09BC LDR X1, [X8 + 0x88]
	0x031B09C0 LDP X30, X23, [X31 + 0x10]
	0x031B09C4 FMOV S0, 1
	0x031B09C8 FMOV S1, W31
	0x031B09CC FMOV S2, W31
	0x031B09D0 MOV V3.16B, V8.16B
	0x031B09D4 LDR V8, [X31], #0x40
	0x031B09D8 B 0x31AF81C
	0x031B09DC BL 0x1C16F20
	0x031B09E0 STR X30, [X31 - 0x20]!
	0x031B09E4 STP X20, X19, [X31 + 0x10]
	0x031B09E8 MOV X19, X1
	0x031B09EC MOV X1, X31
	0x031B09F0 MOV X20, X0
	0x031B09F4 BL 0x33BDD8C
	0x031B09F8 MOV X0, X20
	0x031B09FC MOV X1, X19
	0x031B0A00 LDP X20, X19, [X31 + 0x10]
	0x031B0A04 LDR X30, [X31], #0x20
	0x031B0A08 B 0x31B0A0C
	0x031B0A0C SUB X31, X31, 0xD0
	0x031B0A10 STP D15, D14, [X31 + 0x30]

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x122C000
	009 Move W8, [X21+3702]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF46000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3702], W8
	021 Compare X20, 0
	022 JumpIfEqual {77}
	023 Compare X19, 0
	024 JumpIfEqual {77}
	025 Move X22, 0xF46000
	026 Move X21, [X20+24]
	027 Move X22, [X22+1448]
	028 Move X0, X19
	029 Move X1, X31
	030 Call Component.get_gameObject, X0
	031 Move X8, [X22]
	032 Move X22, [X20+24]
	033 Move X19, X0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Call LeanTween.options
	040 Compare X0, 0
	041 JumpIfEqual {77}
	042 Move X1, X31
	043 Call LTDescr.setCanvasPlaySprite, X0
	044 Compare X0, 0
	045 JumpIfEqual {77}
	046 Move X1, X20
	047 Move X2, X31
	048 Call LTDescr.setSprites, X0, X1
	049 Compare X0, 0
	050 JumpIfEqual {77}
	051 NotImplemented "Instruction SCVTF not yet implemented."
	052 Move S1, -1
	053 NotImplemented "Instruction SCVTF not yet implemented."
	054 Move S3, 0.25
	055 Move TEMP, 0
	056 Not TEMP
	057 Move W1, TEMP
	058 Move X2, X31
	059 Add S8, S0, S1
	060 Multiply S9, S2, S3
	061 Call LTDescr.setRepeat, X0, X1
	062 Move X1, X0
	063 Move X0, X19
	064 Move X20, [X31+48]
	065 Move X19, [X31+56]
	066 Move X22, [X31+32]
	067 Move X21, [X31+40]
	068 Move X30, [X31+16]
	069 Move S1, W31
	070 Move S2, W31
	071 Move V0, V8
	072 Move V3, V9
	073 Move D9, [X31+64]
	074 Move D8, [X31+72]
	075 Call LeanTween.pushNewTween, X0, X1, V0, X2
	076 Return X0
	077 Call 0x1C17F20

Method: LTSeq sequence(System.Boolean initSequence = True)

Disassembly:
	0x031B0A14 STP D13, D12, [X31 + 0x40]
	0x031B0A18 STP D11, D10, [X31 + 0x50]
	0x031B0A1C STP D9, D8, [X31 + 0x60]
	0x031B0A20 STR X30, [X31 + 0x70]
	0x031B0A24 STP X28, X27, [X31 + 0x80]
	0x031B0A28 STP X26, X25, [X31 + 0x90]
	0x031B0A2C STP X24, X23, [X31 + 0xA0]
	0x031B0A30 STP X22, X21, [X31 + 0xB0]
	0x031B0A34 STP X20, X19, [X31 + 0xC0]
	0x031B0A38 ADRP X21, 0x122B000
	0x031B0A3C LDRB W8, [X21 + 0xED5]
	0x031B0A40 MOV X20, X1
	0x031B0A44 MOV X19, X0
	0x031B0A48 TBNZ X8, 0x0, 0x31B0A9C
	0x031B0A4C ADRP X0, 0xF6F000
	0x031B0A50 LDR X0, [X0 + 0x3F8]
	0x031B0A54 BL 0x1C16CF4
	0x031B0A58 ADRP X0, 0xF6F000
	0x031B0A5C LDR X0, [X0 + 0x400]
	0x031B0A60 BL 0x1C16CF4
	0x031B0A64 ADRP X0, 0xF45000
	0x031B0A68 LDR X0, [X0 + 0x5A8]
	0x031B0A6C BL 0x1C16CF4
	0x031B0A70 ADRP X0, 0xF43000
	0x031B0A74 LDR X0, [X0 + 0x638]
	0x031B0A78 BL 0x1C16CF4
	0x031B0A7C ADRP X0, 0xF6F000
	0x031B0A80 LDR X0, [X0 + 0x408]
	0x031B0A84 BL 0x1C16CF4
	0x031B0A88 ADRP X0, 0xF6F000
	0x031B0A8C LDR X0, [X0 + 0x410]
	0x031B0A90 BL 0x1C16CF4
	0x031B0A94 MOVZ W8, 0x1
	0x031B0A98 STRB W8, [X21 + 0xED5]
	0x031B0A9C CBZ X20, 0x31B0CA4
	0x031B0AA0 LDR X8, [X20 + 0x18]
	0x031B0AA4 ADRP X21, 0xF45000
	0x031B0AA8 LDR X21, [X21 + 0x5A8]
	0x031B0AAC CMP W8, 0x3
	0x031B0AB0 B.GT 0x31B0AD8
	0x031B0AB4 LDR X0, [X21]
	0x031B0AB8 LDR W8, [X0 + 0xE0]
	0x031B0ABC CBNZ W8, 0x31B0AC4
	0x031B0AC0 BL 0x1C16DFC
	0x031B0AC4 ADRP X8, 0xF6F000
	0x031B0AC8 LDR X8, [X8 + 0x410]
	0x031B0ACC LDR X0, [X8]
	0x031B0AD0 BL 0x31AF344
	0x031B0AD4 LDR X8, [X20 + 0x18]
	0x031B0AD8 ADRP X22, 0xF6F000
	0x031B0ADC LDR X22, [X22 + 0x3F8]
	0x031B0AE0 ANDS X31, X8, 0x3
	0x031B0AE4 B.EQ 0x31B0B0C
	0x031B0AE8 LDR X0, [X21]
	0x031B0AEC ADRP X21, 0xF6F000
	0x031B0AF0 LDR W8, [X0 + 0xE0]
	0x031B0AF4 LDR X21, [X21 + 0x408]
	0x031B0AF8 CBNZ W8, 0x31B0B00
	0x031B0AFC BL 0x1C16DFC
	0x031B0B00 LDR X0, [X21]
	0x031B0B04 BL 0x31AF344
	0x031B0B08 LDR X8, [X20 + 0x18]
	0x031B0B0C STR X20, [X19 + 0x10]
	0x031B0B10 LDR X0, [X22]
	0x031B0B14 ADD W9, W8, 0x3
	0x031B0B18 CMP W8, 0x0
	0x031B0B1C CSEL W8, W9, W8, LT
	0x031B0B20 SBFM W1, W8, 0x2, 0x1F
	0x031B0B24 BL 0x1C16D6C
	0x031B0B28 STR X0, [X19 + 0x20]
	0x031B0B2C CBZ X0, 0x31B0CA4
	0x031B0B30 ADRP X8, 0xF43000
	0x031B0B34 LDR X8, [X8 + 0x638]
	0x031B0B38 LDR W1, [X0 + 0x18]
	0x031B0B3C LDR X8, [X8]
	0x031B0B40 MOV X0, X8
	0x031B0B44 BL 0x1C16D6C
	0x031B0B48 LDR X8, [X19 + 0x10]
	0x031B0B4C STR X0, [X19 + 0x28]
	0x031B0B50 STR W31, [X19 + 0x18]
	0x031B0B54 CBZ X8, 0x31B0CA4
	0x031B0B58 ADRP X23, 0xF6F000
	0x031B0B5C LDR X21, [X19 + 0x20]
	0x031B0B60 LDR X23, [X23 + 0x400]
	0x031B0B64 MOVZ W25, 0xCCCD
	0x031B0B68 MOV W22, W31
	0x031B0B6C MOV W9, W31
	0x031B0B70 MOVZ W24, 0xC
	0x031B0B74 MOVK W25, 0x3D4C0000
	0x031B0B78 LDR W11, [X8 + 0x18]
	0x031B0B7C CMP W9, W11
	0x031B0B80 B.GE 0x31B0CA8
	0x031B0B84 CMP W9, W11
	0x031B0B88 B.CS 0x31B0D38
	0x031B0B8C ADD W10, W9, 0x2
	0x031B0B90 CMP W10, W11
	0x031B0B94 B.CS 0x31B0D38
	0x031B0B98 SXTW X10, W10
	0x031B0B9C ADD W26, W10, 0x1
	0x031B0BA0 CMP W26, W11
	0x031B0BA4 B.CS 0x31B0D38
	0x031B0BA8 SXTW X11, W9
	0x031B0BAC MADD X11, X11, X24, X8
	0x031B0BB0 LDP S8, S9, [X11 + 0x20]
	0x031B0BB4 LDR V10, [X11 + 0x28]
	0x031B0BB8 ADD W11, W9, 0x1
	0x031B0BBC ADD W9, W9, 0x3
	0x031B0BC0 ADD X8, X8, 0x20
	0x031B0BC4 SXTW X11, W11
	0x031B0BC8 SXTW X9, W9
	0x031B0BCC MADD X10, X10, X24, X8
	0x031B0BD0 LDP S12, S11, [X10 + 0x4]
	0x031B0BD4 LDR V13, [X10]
	0x031B0BD8 NOP
	0x031B0BDC MADD X10, X11, X24, X8
	0x031B0BE0 MADD X8, X9, X24, X8
	0x031B0BE4 LDR X0, [X23]
	0x031B0BE8 LDR V14, [X10 + 0x8]
	0x031B0BEC LDR X27, [X10]
	0x031B0BF0 LDR X28, [X8]
	0x031B0BF4 LDR V15, [X8 + 0x8]
	0x031B0BF8 BL 0x1C16F10
	0x031B0BFC MOV V0.16B, V8.16B
	0x031B0C00 MOV V1.16B, V9.16B
	0x031B0C04 MOV V2.16B, V10.16B
	0x031B0C08 MOV V3.16B, V13.16B
	0x031B0C0C MOV V4.16B, V12.16B
	0x031B0C10 MOV V5.16B, V11.16B
	0x031B0C14 MOV X20, X0
	0x031B0C18 STR W25, [X31 + 0x20]
	0x031B0C1C STR S15, [X31 + 0x18]
	0x031B0C20 STR X28, [X31 + 0x10]
	0x031B0C24 STR S14, [X31 + 0x8]
	0x031B0C28 STR X27, [X31]
	0x031B0C2C BL 0x31B8574
	0x031B0C30 CBZ X21, 0x31B0CA4
	0x031B0C34 CBZ X20, 0x31B0C4C
	0x031B0C38 LDR X8, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x122C000
	007 Move X21, 0xF46000
	008 Move W8, [X20+3703]
	009 Move X21, [X21+1448]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF46000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3703], W8
	020 Move X0, [X21]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X21]
	026 Move X8, [X0+184]
	027 Move W0, [X8+60]
	028 Call LeanTween.init, X0
	029 Move X0, [X21]
	030 Move W22, W31
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X21]
	036 Move X8, [X0+184]
	037 Move X8, [X8+16]
	038 Compare X8, 0
	039 JumpIfEqual {161}
	040 Move W9, [X8+24]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W9, [X0+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {51}
	045 Call 0x1C17DFC
	046 Move X0, [X21]
	047 Move X8, [X0+184]
	048 Move X8, [X8+16]
	049 Compare X8, 0
	050 JumpIfEqual {161}
	051 Move W9, [X8+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X20, W22
	054 Add X8, X8, X20
	055 Move X8, [X8+32]
	056 Compare X8, 0
	057 JumpIfEqual {161}
	058 Move X8, [X8+32]
	059 Compare X8, 0
	060 JumpIfEqual {82}
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {66}
	064 Call 0x1C17DFC
	065 Move X0, [X21]
	066 Move X8, [X0+184]
	067 Move X8, [X8+16]
	068 Compare X8, 0
	069 JumpIfEqual {161}
	070 Move W9, [X8+24]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Add X8, X8, X20
	073 Move X8, [X8+32]
	074 Compare X8, 0
	075 JumpIfEqual {161}
	076 Move X8, [X8+32]
	077 Compare X8, 0
	078 JumpIfEqual {161}
	079 Move W8, [X8+16]
	080 Compare W8, 0
	081 JumpIfNotEqual {100}
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {87}
	085 Call 0x1C17DFC
	086 Move X0, [X21]
	087 Move X8, [X0+184]
	088 Move X9, [X8+16]
	089 Compare X9, 0
	090 JumpIfEqual {161}
	091 Move W10, [X9+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add X10, X9, X20
	094 Move X10, [X10+32]
	095 Compare X10, 0
	096 JumpIfEqual {161}
	097 Move W10, [X10+56]
	098 Compare W10, 0
	099 JumpIfEqual {102}
	100 Add W22, W22, 1
	101 Move X20, X31
	102 Move W10, [X0+224]
	103 Compare W10, 0
	104 JumpIfNotEqual {111}
	105 Call 0x1C17DFC
	106 Move X0, [X21]
	107 Move X8, [X0+184]
	108 Move X9, [X8+16]
	109 Compare X9, 0
	110 JumpIfEqual {161}
	111 Move W10, [X9+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Add X9, X9, X20
	114 Move X20, [X9+32]
	115 Move TEMP, X19
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {149}
	119 Move W9, [X0+224]
	120 Compare W9, 0
	121 JumpIfNotEqual {125}
	122 Call 0x1C17DFC
	123 Move X8, [X21]
	124 Move X8, [X8+184]
	125 Move X9, [X8+24]
	126 Compare X9, 0
	127 JumpIfEqual {161}
	128 Compare X20, 0
	129 JumpIfEqual {161}
	130 Move W9, [X9+24]
	131 Move W2, [X8+92]
	132 Move X0, X20
	133 Move X3, X31
	134 Add W1, W9, W22
	135 Call LTSeq.init, X0, X1, X2
	136 Move X0, [X21]
	137 Move X8, [X0+184]
	138 Move W9, [X8+92]
	139 Add W9, W9, 1
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move [X8+92], W9
	142 Move W9, [X0+224]
	143 Compare W9, 0
	144 JumpIfNotEqual {148}
	145 Call 0x1C17DFC
	146 Move X8, [X21]
	147 Move X8, [X8+184]
	148 Move [X8+92], W31
	149 Compare X20, 0
	150 JumpIfEqual {161}
	151 Move X0, X20
	152 Move X1, X31
	153 Call LTSeq.reset, X0
	154 Move X0, X20
	155 Move X20, [X31+32]
	156 Move X19, [X31+40]
	157 Move X22, [X31+16]
	158 Move X21, [X31+24]
	159 Move X30, [X31+48]
	160 Return X0
	161 Call 0x1C17F20
	162 Call 0x1C17F28

Method: LTDescr alpha(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B0C3C MOV X0, X20
	0x031B0C40 LDR X1, [X8 + 0x40]
	0x031B0C44 BL 0x1C16E00
	0x031B0C48 CBZ X0, 0x31B0D3C
	0x031B0C4C LDR W8, [X21 + 0x18]
	0x031B0C50 CMP W22, W8
	0x031B0C54 B.CS 0x31B0D38
	0x031B0C58 SXTW X8, W22
	0x031B0C5C ADD X9, X21, X8, 0x3, LSL
	0x031B0C60 STR X20, [X9 + 0x20]
	0x031B0C64 LDR X21, [X19 + 0x20]
	0x031B0C68 CBZ X21, 0x31B0CA4
	0x031B0C6C LDR W9, [X21 + 0x18]
	0x031B0C70 CMP W22, W9
	0x031B0C74 B.CS 0x31B0D38
	0x031B0C78 ADD X8, X21, X8, 0x3, LSL
	0x031B0C7C LDR X8, [X8 + 0x20]
	0x031B0C80 CBZ X8, 0x31B0CA4
	0x031B0C84 LDR V0, [X19 + 0x18]
	0x031B0C88 LDR V1, [X8 + 0x10]
	0x031B0C8C LDR X8, [X19 + 0x10]
	0x031B0C90 ADD W22, W22, 0x1
	0x031B0C94 ADD W9, W26, 0x1
	0x031B0C98 FADD S0, S0, S1
	0x031B0C9C STR S0, [X19 + 0x18]
	0x031B0CA0 CBNZ X8, 0x31B0B78
	0x031B0CA4 BL 0x1C16F20
	0x031B0CA8 CBZ X21, 0x31B0CA4
	0x031B0CAC LDR W8, [X21 + 0x18]
	0x031B0CB0 CMP W8, 0x1
	0x031B0CB4 B.LT 0x31B0D08
	0x031B0CB8 LDR X9, [X19 + 0x28]
	0x031B0CBC MOV W10, W31
	0x031B0CC0 CMP W10, W8
	0x031B0CC4 B.CS 0x31B0D38
	0x031B0CC8 SXTW X10, W10
	0x031B0CCC ADD X11, X21, X10, 0x3, LSL
	0x031B0CD0 LDR X11, [X11 + 0x20]
	0x031B0CD4 CBZ X11, 0x31B0CA4
	0x031B0CD8 CBZ X9, 0x31B0CA4
	0x031B0CDC LDR W12, [X9 + 0x18]
	0x031B0CE0 CMP W10, W12
	0x031B0CE4 B.CS 0x31B0D38
	0x031B0CE8 LDR V0, [X11 + 0x10]
	0x031B0CEC LDR V1, [X19 + 0x18]
	0x031B0CF0 ADD X11, X9, X10, 0x2, LSL
	0x031B0CF4 ADD W10, W10, 0x1
	0x031B0CF8 CMP W10, W8
	0x031B0CFC FDIV S0, S0, S1

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122C000
	008 Move X21, 0xF46000
	009 Move W8, [X20+3704]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0xF70000
	019 Move X0, [X0+1000]
	020 Call 0x1C17CF4
	021 Move X0, 0xF46000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3704], W8
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Call LeanTween.options
	032 Compare X0, 0
	033 JumpIfEqual {62}
	034 Move X1, X31
	035 Call LTDescr.setAlpha, X0
	036 Move X1, X0
	037 Move S1, W31
	038 Move S2, W31
	039 Move X0, X19
	040 Move V0, V9
	041 Move V3, V8
	042 Call LeanTween.pushNewTween, X0, X1, V0, X2
	043 Compare X19, 0
	044 JumpIfEqual {62}
	045 Move X8, 0xF70000
	046 Move X8, [X8+1000]
	047 Move X20, X0
	048 Move X0, X19
	049 Move X1, [X8]
	050 Call 0x21E62E4, X0
	051 Compare X20, 0
	052 JumpIfEqual {62}
	053 Move [X20+184], X0
	054 Move X0, X20
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X30, [X31+16]
	058 Move X21, [X31+24]
	059 Move D9, [X31+48]
	060 Move D8, [X31+56]
	061 Return X0
	062 Call 0x1C17F20

Method: LTDescr alpha(LTRect ltRect, System.Single to, System.Single time)

Disassembly:
	0x031B0D00 STR S0, [X11 + 0x20]
	0x031B0D04 B.LT 0x31B0CC0
	0x031B0D08 LDP X20, X19, [X31 + 0xC0]
	0x031B0D0C LDP X22, X21, [X31 + 0xB0]
	0x031B0D10 LDP X24, X23, [X31 + 0xA0]
	0x031B0D14 LDP X26, X25, [X31 + 0x90]
	0x031B0D18 LDP X28, X27, [X31 + 0x80]
	0x031B0D1C LDR X30, [X31 + 0x70]
	0x031B0D20 LDP D9, D8, [X31 + 0x60]
	0x031B0D24 LDP D11, D10, [X31 + 0x50]
	0x031B0D28 LDP D13, D12, [X31 + 0x40]
	0x031B0D2C LDP D15, D14, [X31 + 0x30]
	0x031B0D30 ADD X31, X31, 0xD0
	0x031B0D34 RET
	0x031B0D38 BL 0x1C16F28
	0x031B0D3C BL 0x1C16F44
	0x031B0D40 MOV X1, X31
	0x031B0D44 BL 0x1C16DEC
	0x031B0D48 STR D8, [X31 - 0x30]!
	0x031B0D4C STR X30, [X31 + 0x8]
	0x031B0D50 STP X22, X21, [X31 + 0x10]
	0x031B0D54 STP X20, X19, [X31 + 0x20]
	0x031B0D58 ADRP X22, 0x122B000
	0x031B0D5C ADRP X21, 0xF45000
	0x031B0D60 LDRB W8, [X22 + 0xE89]
	0x031B0D64 LDR X21, [X21 + 0x5A8]
	0x031B0D68 MOV V8.16B, V0.16B
	0x031B0D6C MOV X19, X1
	0x031B0D70 MOV X20, X0
	0x031B0D74 TBNZ X8, 0x0, 0x31B0D8C
	0x031B0D78 ADRP X0, 0xF45000
	0x031B0D7C LDR X0, [X0 + 0x5A8]
	0x031B0D80 BL 0x1C16CF4
	0x031B0D84 MOVZ W8, 0x1
	0x031B0D88 STRB W8, [X22 + 0xE89]
	0x031B0D8C LDR X0, [X21]
	0x031B0D90 LDR W8, [X0 + 0xE0]
	0x031B0D94 CBNZ W8, 0x31B0D9C
	0x031B0D98 BL 0x1C16DFC
	0x031B0D9C BL 0x31AF454
	0x031B0DA0 CBZ X0, 0x31B0DF4
	0x031B0DA4 MOV X1, X31
	0x031B0DA8 BL 0x31C0444
	0x031B0DAC LDR X8, [X21]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x122C000
	007 Move W8, [X20+3705]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF46000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3705], W8
	020 Compare X19, 0
	021 JumpIfEqual {56}
	022 Move X8, 0xF46000
	023 Move X8, [X8+1448]
	024 Move W9, 1
	025 Move [X19+74], W9
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Call LeanTween.get_tweenEmpty
	032 Move X20, X0
	033 Call LeanTween.options
	034 Compare X0, 0
	035 JumpIfEqual {56}
	036 Move X1, X31
	037 Call LTDescr.setGUIAlpha, X0
	038 Compare X0, 0
	039 JumpIfEqual {56}
	040 Move X1, X19
	041 Move X2, X31
	042 Call LTDescr.setRect, X0, X1
	043 Move X1, X0
	044 Move X0, X20
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X30, [X31+16]
	048 Move S1, W31
	049 Move S2, W31
	050 Move V0, V9
	051 Move V3, V8
	052 Move D9, [X31+48]
	053 Move D8, [X31+56]
	054 Call LeanTween.pushNewTween, X0, X1, V0, X2
	055 Return X0
	056 Call 0x1C17F20

Method: LTDescr textAlpha(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)

Disassembly:
	0x031B0DB0 LDR X8, [X8 + 0xB8]
	0x031B0DB4 STR X0, [X8 + 0x88]
	0x031B0DB8 CBZ X0, 0x31B0DF4
	0x031B0DBC LDR X8, [X0 + 0xE8]
	0x031B0DC0 MOV X1, X0
	0x031B0DC4 CBZ X8, 0x31B0DF4
	0x031B0DC8 STR X19, [X8 + 0x48]
	0x031B0DCC MOV X0, X20
	0x031B0DD0 LDP X20, X19, [X31 + 0x20]
	0x031B0DD4 LDP X22, X21, [X31 + 0x10]
	0x031B0DD8 LDR X30, [X31 + 0x8]
	0x031B0DDC FMOV S0, 1
	0x031B0DE0 FMOV S1, W31
	0x031B0DE4 FMOV S2, W31
	0x031B0DE8 MOV V3.16B, V8.16B
	0x031B0DEC LDR V8, [X31], #0x30
	0x031B0DF0 B 0x31AF81C
	0x031B0DF4 BL 0x1C16F20
	0x031B0DF8 STR D8, [X31 - 0x30]!
	0x031B0DFC STR X30, [X31 + 0x8]
	0x031B0E00 STP X22, X21, [X31 + 0x10]
	0x031B0E04 STP X20, X19, [X31 + 0x20]
	0x031B0E08 ADRP X22, 0x122B000
	0x031B0E0C ADRP X21, 0xF45000
	0x031B0E10 LDRB W8, [X22 + 0xE8A]
	0x031B0E14 LDR X21, [X21 + 0x5A8]
	0x031B0E18 MOV V8.16B, V0.16B
	0x031B0E1C MOV X19, X1
	0x031B0E20 MOV X20, X0
	0x031B0E24 TBNZ X8, 0x0, 0x31B0E3C
	0x031B0E28 ADRP X0, 0xF45000
	0x031B0E2C LDR X0, [X0 + 0x5A8]
	0x031B0E30 BL 0x1C16CF4
	0x031B0E34 MOVZ W8, 0x1
	0x031B0E38 STRB W8, [X22 + 0xE8A]
	0x031B0E3C LDR X0, [X21]
	0x031B0E40 LDR W8, [X0 + 0xE0]
	0x031B0E44 CBNZ W8, 0x31B0E4C
	0x031B0E48 BL 0x1C16DFC
	0x031B0E4C BL 0x31AF454
	0x031B0E50 CBZ X0, 0x31B0EA4

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x122C000
	007 Move W8, [X20+3706]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF46000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3706], W8
	020 Compare X19, 0
	021 JumpIfEqual {52}
	022 Move X20, 0xF46000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {52}
	037 Move X1, X31
	038 Call LTDescr.setTextAlpha, X0
	039 Move X1, X0
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move S1, W31
	045 Move S2, W31
	046 Move V0, V9
	047 Move V3, V8
	048 Move D9, [X31+48]
	049 Move D8, [X31+56]
	050 Call LeanTween.pushNewTween, X0, X1, V0, X2
	051 Return X0
	052 Call 0x1C17F20

Method: LTDescr alphaText(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)

Disassembly:
	0x031B0E54 MOV X1, X31
	0x031B0E58 BL 0x31C05AC
	0x031B0E5C LDR X8, [X21]
	0x031B0E60 LDR X8, [X8 + 0xB8]
	0x031B0E64 STR X0, [X8 + 0x88]
	0x031B0E68 CBZ X0, 0x31B0EA4
	0x031B0E6C LDR X8, [X0 + 0xE8]
	0x031B0E70 MOV X1, X0
	0x031B0E74 CBZ X8, 0x31B0EA4
	0x031B0E78 STR X19, [X8 + 0x50]
	0x031B0E7C MOV X0, X20
	0x031B0E80 LDP X20, X19, [X31 + 0x20]
	0x031B0E84 LDP X22, X21, [X31 + 0x10]
	0x031B0E88 LDR X30, [X31 + 0x8]
	0x031B0E8C FMOV S0, 1
	0x031B0E90 FMOV S1, W31
	0x031B0E94 FMOV S2, W31
	0x031B0E98 MOV V3.16B, V8.16B
	0x031B0E9C LDR V8, [X31], #0x30
	0x031B0EA0 B 0x31AF81C
	0x031B0EA4 BL 0x1C16F20
	0x031B0EA8 STR D8, [X31 - 0x40]!
	0x031B0EAC STP X30, X23, [X31 + 0x10]
	0x031B0EB0 STP X22, X21, [X31 + 0x20]
	0x031B0EB4 STP X20, X19, [X31 + 0x30]
	0x031B0EB8 ADRP X21, 0x122B000
	0x031B0EBC ADRP X22, 0xF45000
	0x031B0EC0 LDRB W8, [X21 + 0xE8B]
	0x031B0EC4 LDR X22, [X22 + 0x5A8]
	0x031B0EC8 MOV V8.16B, V0.16B
	0x031B0ECC MOV X20, X1
	0x031B0ED0 MOV X19, X0
	0x031B0ED4 TBNZ X8, 0x0, 0x31B0EF8
	0x031B0ED8 ADRP X0, 0xF6F000
	0x031B0EDC LDR X0, [X0 + 0x418]
	0x031B0EE0 BL 0x1C16CF4
	0x031B0EE4 ADRP X0, 0xF45000
	0x031B0EE8 LDR X0, [X0 + 0x5A8]
	0x031B0EEC BL 0x1C16CF4
	0x031B0EF0 MOVZ W8, 0x1
	0x031B0EF4 STRB W8, [X21 + 0xE8B]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x122C000
	007 Move W8, [X20+3707]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF46000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3707], W8
	020 Compare X19, 0
	021 JumpIfEqual {52}
	022 Move X20, 0xF46000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {52}
	037 Move X1, X31
	038 Call LTDescr.setTextAlpha, X0
	039 Move X1, X0
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move S1, W31
	045 Move S2, W31
	046 Move V0, V9
	047 Move V3, V8
	048 Move D9, [X31+48]
	049 Move D8, [X31+56]
	050 Call LeanTween.pushNewTween, X0, X1, V0, X2
	051 Return X0
	052 Call 0x1C17F20

Method: LTDescr alphaCanvas(UnityEngine.CanvasGroup canvasGroup, System.Single to, System.Single time)

Disassembly:
	0x031B0EF8 LDR X0, [X22]
	0x031B0EFC LDR W8, [X0 + 0xE0]
	0x031B0F00 CBNZ W8, 0x31B0F08
	0x031B0F04 BL 0x1C16DFC
	0x031B0F08 BL 0x31AF454
	0x031B0F0C CBZ X0, 0x31B0F9C
	0x031B0F10 MOV X1, X31
	0x031B0F14 BL 0x31C05AC
	0x031B0F18 LDR X8, [X22]
	0x031B0F1C LDR X8, [X8 + 0xB8]
	0x031B0F20 STR X0, [X8 + 0x88]
	0x031B0F24 CBZ X0, 0x31B0F9C
	0x031B0F28 ADRP X8, 0xF6F000
	0x031B0F2C LDR X8, [X8 + 0x418]
	0x031B0F30 LDR X23, [X0 + 0xE8]
	0x031B0F34 LDR X0, [X8]
	0x031B0F38 BL 0x1C16F10
	0x031B0F3C MOVZ W8, 0x1
	0x031B0F40 MOV X1, X31
	0x031B0F44 MOV X21, X0
	0x031B0F48 STRB W8, [X0 + 0x14]
	0x031B0F4C BL 0x33BDD8C
	0x031B0F50 MOVZ W2, 0x1
	0x031B0F54 MOV X0, X21
	0x031B0F58 MOV X1, X20
	0x031B0F5C BL 0x31B90D4
	0x031B0F60 CBZ X23, 0x31B0F9C
	0x031B0F64 STR X21, [X23 + 0x50]
	0x031B0F68 LDR X8, [X22]
	0x031B0F6C MOV X0, X19
	0x031B0F70 LDP X20, X19, [X31 + 0x30]
	0x031B0F74 LDP X22, X21, [X31 + 0x20]
	0x031B0F78 LDR X8, [X8 + 0xB8]
	0x031B0F7C LDP X30, X23, [X31 + 0x10]
	0x031B0F80 FMOV S0, 1
	0x031B0F84 FMOV S1, W31
	0x031B0F88 LDR X1, [X8 + 0x88]
	0x031B0F8C FMOV S2, W31
	0x031B0F90 MOV V3.16B, V8.16B
	0x031B0F94 LDR V8, [X31], #0x40
	0x031B0F98 B 0x31AF81C

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x122C000
	007 Move W8, [X20+3708]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF46000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3708], W8
	020 Compare X19, 0
	021 JumpIfEqual {52}
	022 Move X20, 0xF46000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {52}
	037 Move X1, X31
	038 Call LTDescr.setCanvasGroupAlpha, X0
	039 Move X1, X0
	040 Move X0, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move S1, W31
	045 Move S2, W31
	046 Move V0, V9
	047 Move V3, V8
	048 Move D9, [X31+48]
	049 Move D8, [X31+56]
	050 Call LeanTween.pushNewTween, X0, X1, V0, X2
	051 Return X0
	052 Call 0x1C17F20

Method: LTDescr alphaVertex(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B0F9C BL 0x1C16F20
	0x031B0FA0 STR X30, [X31 - 0x20]!
	0x031B0FA4 STP X20, X19, [X31 + 0x10]
	0x031B0FA8 MOV X19, X1
	0x031B0FAC MOVZ W8, 0x1
	0x031B0FB0 MOV X1, X31
	0x031B0FB4 MOV X20, X0
	0x031B0FB8 STRB W8, [X0 + 0x14]
	0x031B0FBC BL 0x33BDD8C
	0x031B0FC0 MOV X0, X20
	0x031B0FC4 MOV X1, X19
	0x031B0FC8 LDP X20, X19, [X31 + 0x10]
	0x031B0FCC MOVZ W2, 0x1
	0x031B0FD0 LDR X30, [X31], #0x20
	0x031B0FD4 B 0x31B90D4
	0x031B0FD8 STR D8, [X31 - 0x30]!
	0x031B0FDC STR X30, [X31 + 0x8]
	0x031B0FE0 STP X22, X21, [X31 + 0x10]
	0x031B0FE4 STP X20, X19, [X31 + 0x20]
	0x031B0FE8 ADRP X22, 0x122B000
	0x031B0FEC ADRP X21, 0xF45000
	0x031B0FF0 LDRB W8, [X22 + 0xE8C]
	0x031B0FF4 LDR X21, [X21 + 0x5A8]
	0x031B0FF8 MOV V8.16B, V0.16B
	0x031B0FFC MOV X19, X1
	0x031B1000 MOV X20, X0
	0x031B1004 TBNZ X8, 0x0, 0x31B101C
	0x031B1008 ADRP X0, 0xF44000
	0x031B100C LDR X0, [X0 + 0x5A8]
	0x031B1010 BL 0x1C16CF4
	0x031B1014 MOVZ W8, 0x1
	0x031B1018 STRB W8, [X22 + 0xE8C]
	0x031B101C LDR X0, [X21]
	0x031B1020 LDR W8, [X0 + 0xE0]
	0x031B1024 CBNZ W8, 0x31B102C

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122C000
	008 Move X21, 0xF46000
	009 Move W8, [X20+3709]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF46000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3709], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setAlphaVertex, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr color(UnityEngine.GameObject gameObject, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031B1028 BL 0x1C16DFC
	0x031B102C BL 0x31AF454
	0x031B1030 CBZ X0, 0x31B1084
	0x031B1034 MOV X1, X31
	0x031B1038 BL 0x31C05AC
	0x031B103C LDR X8, [X21]
	0x031B1040 LDR X8, [X8 + 0xB8]
	0x031B1044 STR X0, [X8 + 0x88]
	0x031B1048 CBZ X0, 0x31B1084
	0x031B104C LDR X8, [X0 + 0xE8]
	0x031B1050 MOV X1, X0
	0x031B1054 CBZ X8, 0x31B1084
	0x031B1058 STR X19, [X8 + 0x50]
	0x031B105C MOV X0, X20
	0x031B1060 LDP X20, X19, [X31 + 0x20]
	0x031B1064 LDP X22, X21, [X31 + 0x10]
	0x031B1068 LDR X30, [X31 + 0x8]
	0x031B106C FMOV S0, 1
	0x031B1070 FMOV S1, W31
	0x031B1074 FMOV S2, W31
	0x031B1078 MOV V3.16B, V8.16B
	0x031B107C LDR V8, [X31], #0x30
	0x031B1080 B 0x31AF81C
	0x031B1084 BL 0x1C16F20
	0x031B1088 STR D8, [X31 - 0x40]!
	0x031B108C STP X30, X23, [X31 + 0x10]
	0x031B1090 STP X22, X21, [X31 + 0x20]
	0x031B1094 STP X20, X19, [X31 + 0x30]
	0x031B1098 ADRP X21, 0x122A000
	0x031B109C ADRP X22, 0xF44000
	0x031B10A0 LDRB W8, [X21 + 0xE8D]
	0x031B10A4 LDR X22, [X22 + 0x5A8]
	0x031B10A8 MOV V8.16B, V0.16B
	0x031B10AC MOV X20, X1
	0x031B10B0 MOV X19, X0
	0x031B10B4 TBNZ X8, 0x0, 0x31B10D8
	0x031B10B8 ADRP X0, 0xF6E000
	0x031B10BC LDR X0, [X0 + 0x418]
	0x031B10C0 BL 0x1C16CF4
	0x031B10C4 ADRP X0, 0xF44000
	0x031B10C8 LDR X0, [X0 + 0x5A8]
	0x031B10CC BL 0x1C16CF4
	0x031B10D0 MOVZ W8, 0x1
	0x031B10D4 STRB W8, [X21 + 0xE8D]
	0x031B10D8 LDR X0, [X22]
	0x031B10DC LDR W8, [X0 + 0xE0]
	0x031B10E0 CBNZ W8, 0x31B10E8
	0x031B10E4 BL 0x1C16DFC
	0x031B10E8 BL 0x31AF454
	0x031B10EC CBZ X0, 0x31B117C
	0x031B10F0 MOV X1, X31
	0x031B10F4 BL 0x31C0660
	0x031B10F8 LDR X8, [X22]
	0x031B10FC LDR X8, [X8 + 0xB8]
	0x031B1100 STR X0, [X8 + 0x88]
	0x031B1104 CBZ X0, 0x31B117C
	0x031B1108 ADRP X8, 0xF6E000
	0x031B110C LDR X8, [X8 + 0x418]
	0x031B1110 LDR X23, [X0 + 0xE8]
	0x031B1114 LDR X0, [X8]
	0x031B1118 BL 0x1C16F10
	0x031B111C MOVZ W8, 0x1

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x122B000
	011 Move X21, 0xF45000
	012 Move W8, [X20+3710]
	013 Move X21, [X21+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0xF6F000
	025 Move X0, [X0+1000]
	026 Call 0x1C17CF4
	027 Move X0, 0xF45000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+3710], W8
	032 Move X0, [X21]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Call LeanTween.options
	038 Compare X0, 0
	039 JumpIfEqual {78}
	040 Move X1, X31
	041 Call LTDescr.setColor, X0
	042 Compare X0, 0
	043 JumpIfEqual {78}
	044 Move V0, V12
	045 Move V1, V11
	046 Move V2, V10
	047 Move X1, X31
	048 Call LTDescr.setPoint, X0, X1
	049 Move X1, X0
	050 Move S0, 1
	051 Move S2, W31
	052 Move X0, X19
	053 Move V1, V9
	054 Move V3, V8
	055 Call LeanTween.pushNewTween, X0, X1, V0, X2
	056 Compare X19, 0
	057 JumpIfEqual {78}
	058 Move X8, 0xF6F000
	059 Move X8, [X8+1000]
	060 Move X20, X0
	061 Move X0, X19
	062 Move X1, [X8]
	063 Call 0x21E62E4, X0
	064 Compare X20, 0
	065 JumpIfEqual {78}
	066 Move [X20+184], X0
	067 Move X0, X20
	068 Move X20, [X31+64]
	069 Move X19, [X31+72]
	070 Move X30, [X31+48]
	071 Move X21, [X31+56]
	072 Move D9, [X31+32]
	073 Move D8, [X31+40]
	074 Move D11, [X31+16]
	075 Move D10, [X31+24]
	076 Move V12, [X31+80]
	077 Return X0
	078 Call 0x1C17F20

Method: LTDescr textColor(UnityEngine.RectTransform rectTransform, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031B1120 MOV X1, X31
	0x031B1124 MOV X21, X0
	0x031B1128 STRB W8, [X0 + 0x14]
	0x031B112C BL 0x33BDD8C
	0x031B1130 MOVZ W2, 0x1
	0x031B1134 MOV X0, X21
	0x031B1138 MOV X1, X20
	0x031B113C BL 0x31B90D4
	0x031B1140 CBZ X23, 0x31B117C
	0x031B1144 STR X21, [X23 + 0x50]
	0x031B1148 LDR X8, [X22]
	0x031B114C MOV X0, X19
	0x031B1150 LDP X20, X19, [X31 + 0x30]
	0x031B1154 LDP X22, X21, [X31 + 0x20]
	0x031B1158 LDR X8, [X8 + 0xB8]
	0x031B115C LDP X30, X23, [X31 + 0x10]
	0x031B1160 FMOV S0, 1
	0x031B1164 FMOV S1, W31
	0x031B1168 LDR X1, [X8 + 0x88]
	0x031B116C FMOV S2, W31
	0x031B1170 MOV V3.16B, V8.16B
	0x031B1174 LDR V8, [X31], #0x40
	0x031B1178 B 0x31AF81C
	0x031B117C BL 0x1C16F20
	0x031B1180 STR D10, [X31 - 0x40]!
	0x031B1184 STP D9, D8, [X31 + 0x10]
	0x031B1188 STP X30, X21, [X31 + 0x20]
	0x031B118C STP X20, X19, [X31 + 0x30]
	0x031B1190 ADRP X20, 0x122A000
	0x031B1194 ADRP X21, 0xF44000
	0x031B1198 LDRB W8, [X20 + 0xE8E]
	0x031B119C LDR X21, [X21 + 0x5A8]
	0x031B11A0 MOV V8.16B, V2.16B
	0x031B11A4 MOV V9.16B, V1.16B
	0x031B11A8 MOV V10.16B, V0.16B
	0x031B11AC MOV X19, X0
	0x031B11B0 TBNZ X8, 0x0, 0x31B11C8
	0x031B11B4 ADRP X0, 0xF44000
	0x031B11B8 LDR X0, [X0 + 0x5A8]
	0x031B11BC BL 0x1C16CF4
	0x031B11C0 MOVZ W8, 0x1
	0x031B11C4 STRB W8, [X20 + 0xE8E]
	0x031B11C8 LDR X0, [X21]
	0x031B11CC LDR W8, [X0 + 0xE0]
	0x031B11D0 CBNZ W8, 0x31B11D8
	0x031B11D4 BL 0x1C16DFC
	0x031B11D8 BL 0x31AF7B4
	0x031B11DC MOV X20, X0
	0x031B11E0 BL 0x31AF454
	0x031B11E4 CBZ X0, 0x31B122C
	0x031B11E8 MOV X1, X31
	0x031B11EC BL 0x31C2070
	0x031B11F0 CBZ X0, 0x31B122C
	0x031B11F4 MOV X1, X19

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122B000
	010 Move W8, [X20+3711]
	011 Move V8, V4
	012 Move V9, V3
	013 Move V10, V2
	014 Move V11, V1
	015 Move V12, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF45000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3711], W8
	026 Compare X19, 0
	027 JumpIfEqual {68}
	028 Move X20, 0xF45000
	029 Move X20, [X20+1448]
	030 Move X0, X19
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Move X8, [X20]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Call LeanTween.options
	041 Compare X0, 0
	042 JumpIfEqual {68}
	043 Move X1, X31
	044 Call LTDescr.setTextColor, X0
	045 Compare X0, 0
	046 JumpIfEqual {68}
	047 Move V0, V12
	048 Move V1, V11
	049 Move V2, V10
	050 Move X1, X31
	051 Call LTDescr.setPoint, X0, X1
	052 Move X1, X0
	053 Move X0, X19
	054 Move V1, V9
	055 Move V3, V8
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X30, [X31+40]
	059 Move D9, [X31+24]
	060 Move D8, [X31+32]
	061 Move D11, [X31+8]
	062 Move D10, [X31+16]
	063 Move S0, 1
	064 Move S2, W31
	065 Move V12, [X31+64]
	066 Call LeanTween.pushNewTween, X0, X1, V0, X2
	067 Return X0
	068 Call 0x1C17F20

Method: LTDescr colorText(UnityEngine.RectTransform rectTransform, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031B11F8 MOV X2, X31
	0x031B11FC BL 0x31C8398
	0x031B1200 MOV X1, X0
	0x031B1204 MOV X0, X20
	0x031B1208 MOV V1.16B, V9.16B
	0x031B120C MOV V3.16B, V8.16B
	0x031B1210 LDP X20, X19, [X31 + 0x30]
	0x031B1214 LDP X30, X21, [X31 + 0x20]
	0x031B1218 LDP D9, D8, [X31 + 0x10]
	0x031B121C FMOV S2, W31
	0x031B1220 MOV V0.16B, V10.16B
	0x031B1224 LDR V10, [X31], #0x40
	0x031B1228 B 0x31AF81C
	0x031B122C BL 0x1C16F20
	0x031B1230 STR D10, [X31 - 0x40]!
	0x031B1234 STP D9, D8, [X31 + 0x10]
	0x031B1238 STP X30, X21, [X31 + 0x20]
	0x031B123C STP X20, X19, [X31 + 0x30]
	0x031B1240 ADRP X20, 0x122A000
	0x031B1244 ADRP X21, 0xF44000
	0x031B1248 LDRB W8, [X20 + 0xE8F]
	0x031B124C LDR X21, [X21 + 0x5A8]
	0x031B1250 MOV V8.16B, V2.16B
	0x031B1254 MOV V9.16B, V1.16B
	0x031B1258 MOV V10.16B, V0.16B
	0x031B125C MOV X19, X0
	0x031B1260 TBNZ X8, 0x0, 0x31B1278
	0x031B1264 ADRP X0, 0xF44000
	0x031B1268 LDR X0, [X0 + 0x5A8]
	0x031B126C BL 0x1C16CF4
	0x031B1270 MOVZ W8, 0x1
	0x031B1274 STRB W8, [X20 + 0xE8F]
	0x031B1278 LDR X0, [X21]
	0x031B127C LDR W8, [X0 + 0xE0]
	0x031B1280 CBNZ W8, 0x31B1288
	0x031B1284 BL 0x1C16DFC
	0x031B1288 BL 0x31AF7B4
	0x031B128C MOV X20, X0
	0x031B1290 BL 0x31AF454
	0x031B1294 CBZ X0, 0x31B12DC
	0x031B1298 MOV X1, X31
	0x031B129C BL 0x31C2124
	0x031B12A0 CBZ X0, 0x31B12DC
	0x031B12A4 MOV X1, X19
	0x031B12A8 MOV X2, X31
	0x031B12AC BL 0x31C8398
	0x031B12B0 MOV X1, X0
	0x031B12B4 MOV X0, X20
	0x031B12B8 MOV V1.16B, V9.16B
	0x031B12BC MOV V3.16B, V8.16B
	0x031B12C0 LDP X20, X19, [X31 + 0x30]
	0x031B12C4 LDP X30, X21, [X31 + 0x20]
	0x031B12C8 LDP D9, D8, [X31 + 0x10]
	0x031B12CC FMOV S2, W31

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122B000
	010 Move W8, [X20+3712]
	011 Move V8, V4
	012 Move V9, V3
	013 Move V10, V2
	014 Move V11, V1
	015 Move V12, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF45000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3712], W8
	026 Compare X19, 0
	027 JumpIfEqual {68}
	028 Move X20, 0xF45000
	029 Move X20, [X20+1448]
	030 Move X0, X19
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Move X8, [X20]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Call LeanTween.options
	041 Compare X0, 0
	042 JumpIfEqual {68}
	043 Move X1, X31
	044 Call LTDescr.setTextColor, X0
	045 Compare X0, 0
	046 JumpIfEqual {68}
	047 Move V0, V12
	048 Move V1, V11
	049 Move V2, V10
	050 Move X1, X31
	051 Call LTDescr.setPoint, X0, X1
	052 Move X1, X0
	053 Move X0, X19
	054 Move V1, V9
	055 Move V3, V8
	056 Move X20, [X31+48]
	057 Move X19, [X31+56]
	058 Move X30, [X31+40]
	059 Move D9, [X31+24]
	060 Move D8, [X31+32]
	061 Move D11, [X31+8]
	062 Move D10, [X31+16]
	063 Move S0, 1
	064 Move S2, W31
	065 Move V12, [X31+64]
	066 Call LeanTween.pushNewTween, X0, X1, V0, X2
	067 Return X0
	068 Call 0x1C17F20

Method: LTDescr delayedCall(System.Single delayTime, System.Action callback)

Disassembly:
	0x031B12D0 MOV V0.16B, V10.16B
	0x031B12D4 LDR V10, [X31], #0x40
	0x031B12D8 B 0x31AF81C
	0x031B12DC BL 0x1C16F20
	0x031B12E0 STP D9, D8, [X31 - 0x30]!
	0x031B12E4 STP X30, X21, [X31 + 0x10]
	0x031B12E8 STP X20, X19, [X31 + 0x20]
	0x031B12EC ADRP X20, 0x122A000
	0x031B12F0 ADRP X21, 0xF44000
	0x031B12F4 LDRB W8, [X20 + 0xE90]
	0x031B12F8 LDR X21, [X21 + 0x5A8]
	0x031B12FC MOV V8.16B, V1.16B
	0x031B1300 MOV V9.16B, V0.16B
	0x031B1304 MOV X19, X0
	0x031B1308 TBNZ X8, 0x0, 0x31B1320
	0x031B130C ADRP X0, 0xF44000
	0x031B1310 LDR X0, [X0 + 0x5A8]
	0x031B1314 BL 0x1C16CF4
	0x031B1318 MOVZ W8, 0x1
	0x031B131C STRB W8, [X20 + 0xE90]
	0x031B1320 LDR X0, [X21]
	0x031B1324 LDR W8, [X0 + 0xE0]
	0x031B1328 CBNZ W8, 0x31B1330
	0x031B132C BL 0x1C16DFC
	0x031B1330 BL 0x31AF454
	0x031B1334 CBZ X0, 0x31B1368
	0x031B1338 MOV X1, X31
	0x031B133C BL 0x31BFF74
	0x031B1340 MOV X1, X0
	0x031B1344 MOV X0, X19
	0x031B1348 LDP X20, X19, [X31 + 0x20]
	0x031B134C LDP X30, X21, [X31 + 0x10]
	0x031B1350 FMOV S1, W31
	0x031B1354 FMOV S2, W31
	0x031B1358 MOV V0.16B, V9.16B
	0x031B135C MOV V3.16B, V8.16B
	0x031B1360 LDP D9, D8, [X31], #0x30
	0x031B1364 B 0x31AF81C
	0x031B1368 BL 0x1C16F20
	0x031B136C STP D9, D8, [X31 - 0x30]!
	0x031B1370 STP X30, X21, [X31 + 0x10]
	0x031B1374 STP X20, X19, [X31 + 0x20]
	0x031B1378 ADRP X20, 0x122A000
	0x031B137C ADRP X21, 0xF44000
	0x031B1380 LDRB W8, [X20 + 0xE91]
	0x031B1384 LDR X21, [X21 + 0x5A8]
	0x031B1388 MOV V8.16B, V1.16B
	0x031B138C MOV V9.16B, V0.16B
	0x031B1390 MOV X19, X0
	0x031B1394 TBNZ X8, 0x0, 0x31B13AC
	0x031B1398 ADRP X0, 0xF44000
	0x031B139C LDR X0, [X0 + 0x5A8]
	0x031B13A0 BL 0x1C16CF4
	0x031B13A4 MOVZ W8, 0x1
	0x031B13A8 STRB W8, [X20 + 0xE91]
	0x031B13AC LDR X0, [X21]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122B000
	010 Move X21, 0xF45000
	011 Move W8, [X20+3713]
	012 Move X21, [X21+1448]
	013 Move X19, X0
	014 Move V8, V0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF45000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3713], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Call LeanTween.get_tweenEmpty
	030 Move X21, 0x1228000
	031 Move W8, [X21+1923]
	032 Move X20, X0
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0xF43000
	036 Move X0, [X0+1440]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+1923], W8
	040 Move X8, 0xF43000
	041 Move X8, [X8+1440]
	042 Move X8, [X8]
	043 Move X8, [X8+184]
	044 Move S9, [X8]
	045 Move S10, [X8+4]
	046 Move V11, [X8+8]
	047 Call LeanTween.options
	048 Compare X0, 0
	049 JumpIfEqual {73}
	050 Move X1, X31
	051 Call LTDescr.setCallback, X0
	052 Compare X0, 0
	053 JumpIfEqual {73}
	054 Move X1, X19
	055 Move X2, X31
	056 Call LTDescr.setOnComplete, X0, X1
	057 Move X1, X0
	058 Move X0, X20
	059 Move V0, V9
	060 Move V3, V8
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Move D9, [X31+16]
	066 Move D8, [X31+24]
	067 Move V1, V10
	068 Move V2, V11
	069 Move D11, [X31+64]
	070 Move D10, [X31+72]
	071 Call LeanTween.pushNewTween, X0, X1, V0, X2
	072 Return X0
	073 Call 0x1C17F20

Method: LTDescr delayedCall(System.Single delayTime, System.Action`1<System.Object> callback)

Disassembly:
	0x031B13B0 LDR W8, [X0 + 0xE0]
	0x031B13B4 CBNZ W8, 0x31B13BC
	0x031B13B8 BL 0x1C16DFC
	0x031B13BC BL 0x31AF454
	0x031B13C0 CBZ X0, 0x31B13F4
	0x031B13C4 MOV X1, X31
	0x031B13C8 BL 0x31C00AC
	0x031B13CC MOV X1, X0
	0x031B13D0 MOV X0, X19
	0x031B13D4 LDP X20, X19, [X31 + 0x20]
	0x031B13D8 LDP X30, X21, [X31 + 0x10]
	0x031B13DC FMOV S1, W31
	0x031B13E0 FMOV S2, W31
	0x031B13E4 MOV V0.16B, V9.16B
	0x031B13E8 MOV V3.16B, V8.16B
	0x031B13EC LDP D9, D8, [X31], #0x30
	0x031B13F0 B 0x31AF81C
	0x031B13F4 BL 0x1C16F20
	0x031B13F8 STP D9, D8, [X31 - 0x30]!
	0x031B13FC STP X30, X21, [X31 + 0x10]
	0x031B1400 STP X20, X19, [X31 + 0x20]
	0x031B1404 ADRP X20, 0x122A000
	0x031B1408 ADRP X21, 0xF44000
	0x031B140C LDRB W8, [X20 + 0xE92]
	0x031B1410 LDR X21, [X21 + 0x5A8]
	0x031B1414 MOV V8.16B, V1.16B
	0x031B1418 MOV V9.16B, V0.16B
	0x031B141C MOV X19, X0
	0x031B1420 TBNZ X8, 0x0, 0x31B1438
	0x031B1424 ADRP X0, 0xF44000
	0x031B1428 LDR X0, [X0 + 0x5A8]
	0x031B142C BL 0x1C16CF4
	0x031B1430 MOVZ W8, 0x1
	0x031B1434 STRB W8, [X20 + 0xE92]
	0x031B1438 LDR X0, [X21]
	0x031B143C LDR W8, [X0 + 0xE0]
	0x031B1440 CBNZ W8, 0x31B1448
	0x031B1444 BL 0x1C16DFC
	0x031B1448 BL 0x31AF454
	0x031B144C CBZ X0, 0x31B1480
	0x031B1450 MOV X1, X31
	0x031B1454 BL 0x31C0160
	0x031B1458 MOV X1, X0
	0x031B145C MOV X0, X19
	0x031B1460 LDP X20, X19, [X31 + 0x20]
	0x031B1464 LDP X30, X21, [X31 + 0x10]
	0x031B1468 FMOV S1, W31
	0x031B146C FMOV S2, W31
	0x031B1470 MOV V0.16B, V9.16B
	0x031B1474 MOV V3.16B, V8.16B
	0x031B1478 LDP D9, D8, [X31], #0x30
	0x031B147C B 0x31AF81C
	0x031B1480 BL 0x1C16F20
	0x031B1484 STP D11, D10, [X31 - 0x40]!
	0x031B1488 STP D9, D8, [X31 + 0x10]
	0x031B148C STP X30, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122B000
	010 Move X21, 0xF45000
	011 Move W8, [X20+3714]
	012 Move X21, [X21+1448]
	013 Move X19, X0
	014 Move V8, V0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF45000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3714], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Call LeanTween.get_tweenEmpty
	030 Move X21, 0x1228000
	031 Move W8, [X21+1923]
	032 Move X20, X0
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0xF43000
	036 Move X0, [X0+1440]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+1923], W8
	040 Move X8, 0xF43000
	041 Move X8, [X8+1440]
	042 Move X8, [X8]
	043 Move X8, [X8+184]
	044 Move S9, [X8]
	045 Move S10, [X8+4]
	046 Move V11, [X8+8]
	047 Call LeanTween.options
	048 Compare X0, 0
	049 JumpIfEqual {73}
	050 Move X1, X31
	051 Call LTDescr.setCallback, X0
	052 Compare X0, 0
	053 JumpIfEqual {73}
	054 Move X1, X19
	055 Move X2, X31
	056 Call LTDescr.setOnComplete, X0, X1
	057 Move X1, X0
	058 Move X0, X20
	059 Move V0, V9
	060 Move V3, V8
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Move D9, [X31+16]
	066 Move D8, [X31+24]
	067 Move V1, V10
	068 Move V2, V11
	069 Move D11, [X31+64]
	070 Move D10, [X31+72]
	071 Call LeanTween.pushNewTween, X0, X1, V0, X2
	072 Return X0
	073 Call 0x1C17F20

Method: LTDescr delayedCall(UnityEngine.GameObject gameObject, System.Single delayTime, System.Action callback)

Disassembly:
	0x031B1490 STP X20, X19, [X31 + 0x30]
	0x031B1494 ADRP X20, 0x122A000
	0x031B1498 ADRP X21, 0xF44000
	0x031B149C LDRB W8, [X20 + 0xE93]
	0x031B14A0 LDR X21, [X21 + 0x5A8]
	0x031B14A4 MOV V8.16B, V3.16B
	0x031B14A8 MOV V9.16B, V2.16B
	0x031B14AC MOV V10.16B, V1.16B
	0x031B14B0 MOV V11.16B, V0.16B
	0x031B14B4 MOV X19, X0
	0x031B14B8 TBNZ X8, 0x0, 0x31B14D0
	0x031B14BC ADRP X0, 0xF44000
	0x031B14C0 LDR X0, [X0 + 0x5A8]
	0x031B14C4 BL 0x1C16CF4
	0x031B14C8 MOVZ W8, 0x1
	0x031B14CC STRB W8, [X20 + 0xE93]
	0x031B14D0 LDR X0, [X21]
	0x031B14D4 LDR W8, [X0 + 0xE0]
	0x031B14D8 CBNZ W8, 0x31B14E0
	0x031B14DC BL 0x1C16DFC
	0x031B14E0 BL 0x31AF454
	0x031B14E4 CBZ X0, 0x31B151C
	0x031B14E8 MOV X1, X31
	0x031B14EC BL 0x31C1CEC
	0x031B14F0 MOV X1, X0
	0x031B14F4 MOV X0, X19
	0x031B14F8 MOV V2.16B, V9.16B
	0x031B14FC MOV V3.16B, V8.16B
	0x031B1500 LDP X20, X19, [X31 + 0x30]
	0x031B1504 LDP X30, X21, [X31 + 0x20]
	0x031B1508 LDP D9, D8, [X31 + 0x10]
	0x031B150C MOV V0.16B, V11.16B
	0x031B1510 MOV V1.16B, V10.16B
	0x031B1514 LDP D11, D10, [X31], #0x40
	0x031B1518 B 0x31AF81C
	0x031B151C BL 0x1C16F20
	0x031B1520 STR D8, [X31 - 0x40]!
	0x031B1524 STP X30, X23, [X31 + 0x10]
	0x031B1528 STP X22, X21, [X31 + 0x20]
	0x031B152C STP X20, X19, [X31 + 0x30]
	0x031B1530 ADRP X21, 0x122A000
	0x031B1534 ADRP X22, 0xF44000
	0x031B1538 LDRB W8, [X21 + 0xE94]
	0x031B153C LDR X22, [X22 + 0x5A8]
	0x031B1540 MOV V8.16B, V0.16B
	0x031B1544 MOV X20, X1
	0x031B1548 MOV X19, X0
	0x031B154C TBNZ X8, 0x0, 0x31B1570
	0x031B1550 ADRP X0, 0xF6E000
	0x031B1554 LDR X0, [X0 + 0x3F0]
	0x031B1558 BL 0x1C16CF4
	0x031B155C ADRP X0, 0xF44000
	0x031B1560 LDR X0, [X0 + 0x5A8]
	0x031B1564 BL 0x1C16CF4
	0x031B1568 MOVZ W8, 0x1
	0x031B156C STRB W8, [X21 + 0xE94]
	0x031B1570 LDR X0, [X22]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x122B000
	011 Move W8, [X21+3715]
	012 Move X20, X1
	013 Move V8, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF45000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3715], W8
	024 Move X22, 0x1228000
	025 Move X21, 0xF45000
	026 Move W8, [X22+1923]
	027 Move X21, [X21+1448]
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0xF43000
	031 Move X0, [X0+1440]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+1923], W8
	035 Move X8, 0xF43000
	036 Move X8, [X8+1440]
	037 Move X0, [X21]
	038 Move X8, [X8]
	039 Move W9, [X0+224]
	040 Move X8, [X8+184]
	041 Move S11, [X8]
	042 Move S10, [X8+4]
	043 Move V9, [X8+8]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Call LeanTween.options
	048 Compare X0, 0
	049 JumpIfEqual {74}
	050 Move X1, X31
	051 Call LTDescr.setCallback, X0
	052 Compare X0, 0
	053 JumpIfEqual {74}
	054 Move X1, X20
	055 Move X2, X31
	056 Call LTDescr.setOnComplete, X0, X1
	057 Move X1, X0
	058 Move X0, X19
	059 Move V2, V9
	060 Move V3, V8
	061 Move X20, [X31+64]
	062 Move X19, [X31+72]
	063 Move X22, [X31+48]
	064 Move X21, [X31+56]
	065 Move X30, [X31+32]
	066 Move D9, [X31+16]
	067 Move D8, [X31+24]
	068 Move V0, V11
	069 Move V1, V10
	070 Move D11, [X31+80]
	071 Move D10, [X31+88]
	072 Call LeanTween.pushNewTween, X0, X1, V0, X2
	073 Return X0
	074 Call 0x1C17F20

Method: LTDescr delayedCall(UnityEngine.GameObject gameObject, System.Single delayTime, System.Action`1<System.Object> callback)

Disassembly:
	0x031B1574 LDR W8, [X0 + 0xE0]
	0x031B1578 CBNZ W8, 0x31B1580
	0x031B157C BL 0x1C16DFC
	0x031B1580 BL 0x31AF454
	0x031B1584 CBZ X0, 0x31B1660
	0x031B1588 MOV X1, X31
	0x031B158C BL 0x31C04F8
	0x031B1590 LDR X8, [X22]
	0x031B1594 LDR X9, [X8 + 0xB8]
	0x031B1598 STR X0, [X9 + 0x88]
	0x031B159C CBZ X0, 0x31B1660
	0x031B15A0 LDR X9, [X0 + 0xE8]
	0x031B15A4 CBZ X9, 0x31B1660
	0x031B15A8 LDR W10, [X8 + 0xE0]
	0x031B15AC LDR X21, [X9 + 0x48]
	0x031B15B0 CBNZ W10, 0x31B15CC
	0x031B15B4 MOV X0, X8
	0x031B15B8 BL 0x1C16DFC
	0x031B15BC LDR X8, [X22]
	0x031B15C0 LDR X8, [X8 + 0xB8]
	0x031B15C4 LDR X0, [X8 + 0x88]
	0x031B15C8 CBZ X0, 0x31B1660
	0x031B15CC LDR X23, [X0 + 0xE8]
	0x031B15D0 CBZ X21, 0x31B15EC
	0x031B15D4 CBZ X23, 0x31B1660
	0x031B15D8 LDR X0, [X23 + 0x48]
	0x031B15DC CBZ X0, 0x31B1660
	0x031B15E0 MOV X1, X20
	0x031B15E4 BL 0x31B0A0C
	0x031B15E8 B 0x31B161C
	0x031B15EC ADRP X8, 0xF6E000
	0x031B15F0 LDR X8, [X8 + 0x3F0]
	0x031B15F4 LDR X0, [X8]
	0x031B15F8 BL 0x1C16F10
	0x031B15FC MOV X1, X31
	0x031B1600 MOV X21, X0
	0x031B1604 BL 0x33BDD8C
	0x031B1608 MOV X0, X21
	0x031B160C MOV X1, X20
	0x031B1610 BL 0x31B0A0C
	0x031B1614 CBZ X23, 0x31B1660
	0x031B1618 STR X21, [X23 + 0x48]
	0x031B161C LDR X0, [X22]
	0x031B1620 LDR W8, [X0 + 0xE0]
	0x031B1624 CBNZ W8, 0x31B1630
	0x031B1628 BL 0x1C16DFC
	0x031B162C LDR X0, [X22]
	0x031B1630 LDR X8, [X0 + 0xB8]
	0x031B1634 MOV X0, X19
	0x031B1638 LDP X20, X19, [X31 + 0x30]
	0x031B163C LDP X22, X21, [X31 + 0x20]
	0x031B1640 LDR X1, [X8 + 0x88]
	0x031B1644 LDP X30, X23, [X31 + 0x10]
	0x031B1648 FMOV S0, 1
	0x031B164C FMOV S1, W31
	0x031B1650 FMOV S2, W31
	0x031B1654 MOV V3.16B, V8.16B

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x122B000
	011 Move W8, [X21+3716]
	012 Move X20, X1
	013 Move V8, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF45000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3716], W8
	024 Move X22, 0x1228000
	025 Move X21, 0xF45000
	026 Move W8, [X22+1923]
	027 Move X21, [X21+1448]
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0xF43000
	031 Move X0, [X0+1440]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+1923], W8
	035 Move X8, 0xF43000
	036 Move X8, [X8+1440]
	037 Move X0, [X21]
	038 Move X8, [X8]
	039 Move W9, [X0+224]
	040 Move X8, [X8+184]
	041 Move S11, [X8]
	042 Move S10, [X8+4]
	043 Move V9, [X8+8]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Call LeanTween.options
	048 Compare X0, 0
	049 JumpIfEqual {74}
	050 Move X1, X31
	051 Call LTDescr.setCallback, X0
	052 Compare X0, 0
	053 JumpIfEqual {74}
	054 Move X1, X20
	055 Move X2, X31
	056 Call LTDescr.setOnComplete, X0, X1
	057 Move X1, X0
	058 Move X0, X19
	059 Move V2, V9
	060 Move V3, V8
	061 Move X20, [X31+64]
	062 Move X19, [X31+72]
	063 Move X22, [X31+48]
	064 Move X21, [X31+56]
	065 Move X30, [X31+32]
	066 Move D9, [X31+16]
	067 Move D8, [X31+24]
	068 Move V0, V11
	069 Move V1, V10
	070 Move D11, [X31+80]
	071 Move D10, [X31+88]
	072 Call LeanTween.pushNewTween, X0, X1, V0, X2
	073 Return X0
	074 Call 0x1C17F20

Method: LTDescr destroyAfter(LTRect rect, System.Single delayTime)

Disassembly:
	0x031B1658 LDR V8, [X31], #0x40
	0x031B165C B 0x31AF81C
	0x031B1660 BL 0x1C16F20
	0x031B1664 STP D9, D8, [X31 - 0x30]!
	0x031B1668 STP X30, X21, [X31 + 0x10]
	0x031B166C STP X20, X19, [X31 + 0x20]
	0x031B1670 ADRP X20, 0x122A000
	0x031B1674 ADRP X21, 0xF44000
	0x031B1678 LDRB W8, [X20 + 0xE95]
	0x031B167C LDR X21, [X21 + 0x5A8]
	0x031B1680 MOV V8.16B, V1.16B
	0x031B1684 MOV V9.16B, V0.16B
	0x031B1688 MOV X19, X0
	0x031B168C TBNZ X8, 0x0, 0x31B16A4
	0x031B1690 ADRP X0, 0xF44000
	0x031B1694 LDR X0, [X0 + 0x5A8]
	0x031B1698 BL 0x1C16CF4
	0x031B169C MOVZ W8, 0x1
	0x031B16A0 STRB W8, [X20 + 0xE95]
	0x031B16A4 LDR X0, [X21]
	0x031B16A8 LDR W8, [X0 + 0xE0]
	0x031B16AC CBNZ W8, 0x31B16B4
	0x031B16B0 BL 0x1C16DFC
	0x031B16B4 BL 0x31AF454
	0x031B16B8 CBZ X0, 0x31B16EC
	0x031B16BC MOV X1, X31
	0x031B16C0 BL 0x31C0214
	0x031B16C4 MOV X1, X0
	0x031B16C8 MOV X0, X19
	0x031B16CC LDP X20, X19, [X31 + 0x20]
	0x031B16D0 LDP X30, X21, [X31 + 0x10]
	0x031B16D4 FMOV S1, W31
	0x031B16D8 FMOV S2, W31
	0x031B16DC MOV V0.16B, V9.16B
	0x031B16E0 MOV V3.16B, V8.16B
	0x031B16E4 LDP D9, D8, [X31], #0x30
	0x031B16E8 B 0x31AF81C
	0x031B16EC BL 0x1C16F20
	0x031B16F0 STP D9, D8, [X31 - 0x30]!
	0x031B16F4 STP X30, X21, [X31 + 0x10]
	0x031B16F8 STP X20, X19, [X31 + 0x20]
	0x031B16FC ADRP X20, 0x122A000
	0x031B1700 ADRP X21, 0xF44000
	0x031B1704 LDRB W8, [X20 + 0xE96]
	0x031B1708 LDR X21, [X21 + 0x5A8]
	0x031B170C MOV V8.16B, V1.16B
	0x031B1710 MOV V9.16B, V0.16B
	0x031B1714 MOV X19, X0
	0x031B1718 TBNZ X8, 0x0, 0x31B1730
	0x031B171C ADRP X0, 0xF44000
	0x031B1720 LDR X0, [X0 + 0x5A8]
	0x031B1724 BL 0x1C16CF4
	0x031B1728 MOVZ W8, 0x1
	0x031B172C STRB W8, [X20 + 0xE96]
	0x031B1730 LDR X0, [X21]
	0x031B1734 LDR W8, [X0 + 0xE0]
	0x031B1738 CBNZ W8, 0x31B1740
	0x031B173C BL 0x1C16DFC
	0x031B1740 BL 0x31AF454
	0x031B1744 CBZ X0, 0x31B1778

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122B000
	010 Move X21, 0xF45000
	011 Move W8, [X20+3717]
	012 Move X21, [X21+1448]
	013 Move V8, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF45000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3717], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Call LeanTween.get_tweenEmpty
	030 Move X21, 0x1228000
	031 Move W8, [X21+1923]
	032 Move X20, X0
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0xF43000
	036 Move X0, [X0+1440]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+1923], W8
	040 Move X8, 0xF43000
	041 Move X8, [X8+1440]
	042 Move X8, [X8]
	043 Move X8, [X8+184]
	044 Move S9, [X8]
	045 Move S10, [X8+4]
	046 Move V11, [X8+8]
	047 Call LeanTween.options
	048 Compare X0, 0
	049 JumpIfEqual {78}
	050 Move X1, X31
	051 Call LTDescr.setCallback, X0
	052 Compare X0, 0
	053 JumpIfEqual {78}
	054 Move X1, X19
	055 Move X2, X31
	056 Call LTDescr.setRect, X0, X1
	057 Compare X0, 0
	058 JumpIfEqual {78}
	059 Move W1, 1
	060 Move X2, X31
	061 Call LTDescr.setDestroyOnComplete, X0, X1
	062 Move X1, X0
	063 Move X0, X20
	064 Move V0, V9
	065 Move V3, V8
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Move D9, [X31+16]
	071 Move D8, [X31+24]
	072 Move V1, V10
	073 Move V2, V11
	074 Move D11, [X31+64]
	075 Move D10, [X31+72]
	076 Call LeanTween.pushNewTween, X0, X1, V0, X2
	077 Return X0
	078 Call 0x1C17F20

Method: LTDescr move(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B1748 MOV X1, X31
	0x031B174C BL 0x31C02C8
	0x031B1750 MOV X1, X0
	0x031B1754 MOV X0, X19
	0x031B1758 LDP X20, X19, [X31 + 0x20]
	0x031B175C LDP X30, X21, [X31 + 0x10]
	0x031B1760 FMOV S1, W31
	0x031B1764 FMOV S2, W31
	0x031B1768 MOV V0.16B, V9.16B
	0x031B176C MOV V3.16B, V8.16B
	0x031B1770 LDP D9, D8, [X31], #0x30
	0x031B1774 B 0x31AF81C
	0x031B1778 BL 0x1C16F20
	0x031B177C STP D9, D8, [X31 - 0x30]!
	0x031B1780 STP X30, X21, [X31 + 0x10]
	0x031B1784 STP X20, X19, [X31 + 0x20]
	0x031B1788 ADRP X20, 0x122A000
	0x031B178C ADRP X21, 0xF44000
	0x031B1790 LDRB W8, [X20 + 0xE97]
	0x031B1794 LDR X21, [X21 + 0x5A8]
	0x031B1798 MOV V8.16B, V1.16B
	0x031B179C MOV V9.16B, V0.16B
	0x031B17A0 MOV X19, X0
	0x031B17A4 TBNZ X8, 0x0, 0x31B17BC
	0x031B17A8 ADRP X0, 0xF44000
	0x031B17AC LDR X0, [X0 + 0x5A8]
	0x031B17B0 BL 0x1C16CF4
	0x031B17B4 MOVZ W8, 0x1
	0x031B17B8 STRB W8, [X20 + 0xE97]
	0x031B17BC LDR X0, [X21]
	0x031B17C0 LDR W8, [X0 + 0xE0]
	0x031B17C4 CBNZ W8, 0x31B17CC
	0x031B17C8 BL 0x1C16DFC
	0x031B17CC BL 0x31AF454
	0x031B17D0 CBZ X0, 0x31B1804
	0x031B17D4 MOV X1, X31
	0x031B17D8 BL 0x31C037C
	0x031B17DC MOV X1, X0
	0x031B17E0 MOV X0, X19

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122B000
	010 Move X21, 0xF45000
	011 Move W8, [X20+3718]
	012 Move X21, [X21+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF45000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3718], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {53}
	035 Move X1, X31
	036 Call LTDescr.setMove, X0
	037 Move X1, X0
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move V0, V11
	048 Move V1, V10
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.pushNewTween, X0, X1, V0, X2
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr move(UnityEngine.GameObject gameObject, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031B17E4 LDP X20, X19, [X31 + 0x20]
	0x031B17E8 LDP X30, X21, [X31 + 0x10]
	0x031B17EC FMOV S1, W31
	0x031B17F0 FMOV S2, W31
	0x031B17F4 MOV V0.16B, V9.16B
	0x031B17F8 MOV V3.16B, V8.16B
	0x031B17FC LDP D9, D8, [X31], #0x30
	0x031B1800 B 0x31AF81C
	0x031B1804 BL 0x1C16F20
	0x031B1808 STR D8, [X31 - 0x30]!
	0x031B180C STR X30, [X31 + 0x8]
	0x031B1810 STP X22, X21, [X31 + 0x10]
	0x031B1814 STP X20, X19, [X31 + 0x20]
	0x031B1818 ADRP X22, 0x122A000
	0x031B181C ADRP X21, 0xF44000
	0x031B1820 LDRB W8, [X22 + 0xE98]
	0x031B1824 LDR X21, [X21 + 0x5A8]
	0x031B1828 MOV V8.16B, V0.16B
	0x031B182C MOV X19, X1
	0x031B1830 MOV X20, X0
	0x031B1834 TBNZ X8, 0x0, 0x31B184C
	0x031B1838 ADRP X0, 0xF44000
	0x031B183C LDR X0, [X0 + 0x5A8]
	0x031B1840 BL 0x1C16CF4
	0x031B1844 MOVZ W8, 0x1
	0x031B1848 STRB W8, [X22 + 0xE98]
	0x031B184C LDR X0, [X21]
	0x031B1850 LDR W8, [X0 + 0xE0]
	0x031B1854 CBNZ W8, 0x31B185C
	0x031B1858 BL 0x1C16DFC
	0x031B185C BL 0x31AF454
	0x031B1860 CBZ X0, 0x31B18B4
	0x031B1864 MOV X1, X31
	0x031B1868 BL 0x31C04F8
	0x031B186C LDR X8, [X21]
	0x031B1870 LDR X8, [X8 + 0xB8]
	0x031B1874 STR X0, [X8 + 0x88]
	0x031B1878 CBZ X0, 0x31B18B4
	0x031B187C LDR X8, [X0 + 0xE8]
	0x031B1880 MOV X1, X0
	0x031B1884 CBZ X8, 0x31B18B4
	0x031B1888 STR X19, [X8 + 0x48]
	0x031B188C MOV X0, X20
	0x031B1890 LDP X20, X19, [X31 + 0x20]
	0x031B1894 LDP X22, X21, [X31 + 0x10]
	0x031B1898 LDR X30, [X31 + 0x8]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122B000
	009 Move W8, [X20+3719]
	010 Move V8, V2
	011 Move V9, V1
	012 Move V10, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF45000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3719], W8
	023 Compare X19, 0
	024 JumpIfEqual {60}
	025 Move X0, X19
	026 Move X1, X31
	027 Call GameObject.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {60}
	030 Move X20, 0xF45000
	031 Move X20, [X20+1448]
	032 Move X1, X31
	033 Call Transform.get_position, X0
	034 Move X0, [X20]
	035 Move V11, V2
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Call LeanTween.options
	041 Compare X0, 0
	042 JumpIfEqual {60}
	043 Move X1, X31
	044 Call LTDescr.setMove, X0
	045 Move X1, X0
	046 Move X0, X19
	047 Move V1, V9
	048 Move V3, V8
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X30, [X31+32]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move V0, V10
	055 Move V2, V11
	056 Move D11, [X31+64]
	057 Move D10, [X31+72]
	058 Call LeanTween.pushNewTween, X0, X1, V0, X2
	059 Return X0
	060 Call 0x1C17F20

Method: LTDescr move(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031B189C FMOV S0, 1
	0x031B18A0 FMOV S1, W31
	0x031B18A4 FMOV S2, W31
	0x031B18A8 MOV V3.16B, V8.16B
	0x031B18AC LDR V8, [X31], #0x30
	0x031B18B0 B 0x31AF81C
	0x031B18B4 BL 0x1C16F20
	0x031B18B8 STR D8, [X31 - 0x30]!
	0x031B18BC STR X30, [X31 + 0x8]
	0x031B18C0 STP X22, X21, [X31 + 0x10]
	0x031B18C4 STP X20, X19, [X31 + 0x20]
	0x031B18C8 ADRP X22, 0x122A000
	0x031B18CC ADRP X21, 0xF44000
	0x031B18D0 LDRB W8, [X22 + 0xE99]
	0x031B18D4 LDR X21, [X21 + 0x5A8]
	0x031B18D8 MOV V8.16B, V0.16B
	0x031B18DC MOV X19, X1
	0x031B18E0 MOV X20, X0
	0x031B18E4 TBNZ X8, 0x0, 0x31B18FC
	0x031B18E8 ADRP X0, 0xF44000
	0x031B18EC LDR X0, [X0 + 0x5A8]
	0x031B18F0 BL 0x1C16CF4
	0x031B18F4 MOVZ W8, 0x1
	0x031B18F8 STRB W8, [X22 + 0xE99]
	0x031B18FC LDR X0, [X21]
	0x031B1900 LDR W8, [X0 + 0xE0]
	0x031B1904 CBNZ W8, 0x31B190C
	0x031B1908 BL 0x1C16DFC
	0x031B190C BL 0x31AF454
	0x031B1910 CBZ X0, 0x31B1964
	0x031B1914 MOV X1, X31
	0x031B1918 BL 0x31C0660
	0x031B191C LDR X8, [X21]
	0x031B1920 LDR X8, [X8 + 0xB8]
	0x031B1924 STR X0, [X8 + 0x88]
	0x031B1928 CBZ X0, 0x31B1964
	0x031B192C LDR X8, [X0 + 0xE8]
	0x031B1930 MOV X1, X0
	0x031B1934 CBZ X8, 0x31B1964
	0x031B1938 STR X19, [X8 + 0x50]
	0x031B193C MOV X0, X20
	0x031B1940 LDP X20, X19, [X31 + 0x20]
	0x031B1944 LDP X22, X21, [X31 + 0x10]
	0x031B1948 LDR X30, [X31 + 0x8]
	0x031B194C FMOV S0, 1
	0x031B1950 FMOV S1, W31
	0x031B1954 FMOV S2, W31
	0x031B1958 MOV V3.16B, V8.16B
	0x031B195C LDR V8, [X31], #0x30
	0x031B1960 B 0x31AF81C
	0x031B1964 BL 0x1C16F20
	0x031B1968 STP D11, D10, [X31 - 0x50]!
	0x031B196C STP D9, D8, [X31 + 0x10]
	0x031B1970 STR X30, [X31 + 0x20]
	0x031B1974 STP X22, X21, [X31 + 0x30]
	0x031B1978 STP X20, X19, [X31 + 0x40]
	0x031B197C ADRP X21, 0x122A000
	0x031B1980 LDRB W8, [X21 + 0xE9A]
	0x031B1984 MOV V8.16B, V0.16B
	0x031B1988 MOV X20, X1
	0x031B198C MOV X19, X0
	0x031B1990 TBNZ X8, 0x0, 0x31B19A8
	0x031B1994 ADRP X0, 0xF44000
	0x031B1998 LDR X0, [X0 + 0x5A8]
	0x031B199C BL 0x1C16CF4
	0x031B19A0 MOVZ W8, 0x1
	0x031B19A4 STRB W8, [X21 + 0xE9A]
	0x031B19A8 ADRP X22, 0x1227000
	0x031B19AC ADRP X21, 0xF44000
	0x031B19B0 LDRB W8, [X22 + 0x783]
	0x031B19B4 LDR X21, [X21 + 0x5A8]
	0x031B19B8 CBNZ W8, 0x31B19D0
	0x031B19BC ADRP X0, 0xF42000
	0x031B19C0 LDR X0, [X0 + 0x5A0]
	0x031B19C4 BL 0x1C16CF4
	0x031B19C8 MOVZ W8, 0x1
	0x031B19CC STRB W8, [X22 + 0x783]
	0x031B19D0 ADRP X8, 0xF42000
	0x031B19D4 LDR X8, [X8 + 0x5A0]
	0x031B19D8 LDR X0, [X21]
	0x031B19DC LDR X8, [X8]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x122B000
	009 Move X22, 0xF45000
	010 Move W8, [X21+3720]
	011 Move X22, [X22+1448]
	012 Move V8, V0
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF6F000
	020 Move X0, [X0+1008]
	021 Call 0x1C17CF4
	022 Move X0, 0xF45000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3720], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {101}
	035 Move X1, X31
	036 Call LTDescr.setMoveCurved, X0
	037 Move X8, [X22]
	038 Move X9, [X8+184]
	039 Move [X9+136], X0
	040 Compare X0, 0
	041 JumpIfEqual {101}
	042 Move X9, [X0+232]
	043 Compare X9, 0
	044 JumpIfEqual {101}
	045 Move W10, [X8+224]
	046 Move X21, [X9+72]
	047 Compare W10, 0
	048 JumpIfNotEqual {56}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X8, [X8+184]
	053 Move X0, [X8+136]
	054 Compare X0, 0
	055 JumpIfEqual {101}
	056 Move X23, [X0+232]
	057 Compare X21, 0
	058 JumpIfEqual {66}
	059 Compare X23, 0
	060 JumpIfEqual {101}
	061 Move X0, [X23+72]
	062 Compare X0, 0
	063 JumpIfEqual {101}
	064 Move X1, X20
	065 Call LTBezierPath.setPoints, X0, X1
	066 Move X8, 0xF6F000
	067 Move X8, [X8+1008]
	068 Move X0, [X8]
	069 Call 0x1C17F10
	070 Move X1, X31
	071 Move X21, X0
	072 Call Object..ctor, X0
	073 Move X0, X21
	074 Move X1, X20
	075 Call LTBezierPath.setPoints, X0, X1
	076 Compare X23, 0
	077 JumpIfEqual {101}
	078 Move [X23+72], X21
	079 Move X0, [X22]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move X0, [X22]
	085 Move X8, [X0+184]
	086 Move X0, X19
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X22, [X31+32]
	090 Move X21, [X31+40]
	091 Move X1, [X8+136]
	092 Move X30, [X31+16]
	093 Move X23, [X31+24]
	094 Move S0, 1
	095 Move S1, W31
	096 Move S2, W31
	097 Move V3, V8
	098 Move V8, [X31+64]
	099 Call LeanTween.pushNewTween, X0, X1, V0, X2
	100 Return X0
	101 Call 0x1C17F20

Method: LTDescr move(UnityEngine.GameObject gameObject, LTBezierPath to, System.Single time)

Disassembly:
	0x031B1D48 STP X20, X19, [X31 + 0x20]
	0x031B1D4C ADRP X20, 0x122A000
	0x031B1D50 ADRP X21, 0xF44000
	0x031B1D54 LDRB W8, [X20 + 0xEA0]
	0x031B1D58 LDR X21, [X21 + 0x5A8]
	0x031B1D5C MOV V8.16B, V1.16B
	0x031B1D60 MOV V9.16B, V0.16B
	0x031B1D64 MOV X19, X0
	0x031B1D68 TBNZ X8, 0x0, 0x31B1D80
	0x031B1D6C ADRP X0, 0xF44000
	0x031B1D70 LDR X0, [X0 + 0x5A8]
	0x031B1D74 BL 0x1C16CF4
	0x031B1D78 MOVZ W8, 0x1
	0x031B1D7C STRB W8, [X20 + 0xEA0]
	0x031B1D80 LDR X0, [X21]
	0x031B1D84 LDR W8, [X0 + 0xE0]
	0x031B1D88 CBNZ W8, 0x31B1D90
	0x031B1D8C BL 0x1C16DFC
	0x031B1D90 BL 0x31AF454
	0x031B1D94 CBZ X0, 0x31B1DC8
	0x031B1D98 MOV X1, X31
	0x031B1D9C BL 0x31C0A98
	0x031B1DA0 MOV X1, X0
	0x031B1DA4 MOV X0, X19
	0x031B1DA8 LDP X20, X19, [X31 + 0x20]
	0x031B1DAC LDP X30, X21, [X31 + 0x10]
	0x031B1DB0 FMOV S1, W31
	0x031B1DB4 FMOV S2, W31
	0x031B1DB8 MOV V0.16B, V9.16B
	0x031B1DBC MOV V3.16B, V8.16B
	0x031B1DC0 LDP D9, D8, [X31], #0x30
	0x031B1DC4 B 0x31AF81C
	0x031B1DC8 BL 0x1C16F20
	0x031B1DCC STR D12, [X31 - 0x50]!
	0x031B1DD0 STP D11, D10, [X31 + 0x10]
	0x031B1DD4 STP D9, D8, [X31 + 0x20]
	0x031B1DD8 STP X30, X21, [X31 + 0x30]
	0x031B1DDC STP X20, X19, [X31 + 0x40]
	0x031B1DE0 ADRP X20, 0x122A000
	0x031B1DE4 ADRP X21, 0xF44000
	0x031B1DE8 LDRB W8, [X20 + 0xEA1]
	0x031B1DEC LDR X21, [X21 + 0x5A8]
	0x031B1DF0 MOV V8.16B, V4.16B
	0x031B1DF4 MOV V9.16B, V3.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x122B000
	008 Move X21, 0xF45000
	009 Move W8, [X22+3721]
	010 Move X21, [X21+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF45000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3721], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {56}
	031 Move X1, X31
	032 Call LTDescr.setMoveCurved, X0
	033 Move X8, [X21]
	034 Move X8, [X8+184]
	035 Move [X8+136], X0
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Move X8, [X0+232]
	039 Move X1, X0
	040 Compare X8, 0
	041 JumpIfEqual {56}
	042 Move [X8+72], X19
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+8]
	049 Move S0, 1
	050 Move S1, W31
	051 Move S2, W31
	052 Move V3, V8
	053 Move V8, [X31+48]
	054 Call LeanTween.pushNewTween, X0, X1, V0, X2
	055 Return X0
	056 Call 0x1C17F20

Method: LTDescr move(UnityEngine.GameObject gameObject, LTSpline to, System.Single time)

Disassembly:
	0x031B1DF8 MOV V10.16B, V2.16B
	0x031B1DFC MOV V11.16B, V1.16B
	0x031B1E00 MOV V12.16B, V0.16B
	0x031B1E04 MOV X19, X0
	0x031B1E08 TBNZ X8, 0x0, 0x31B1E20
	0x031B1E0C ADRP X0, 0xF44000
	0x031B1E10 LDR X0, [X0 + 0x5A8]
	0x031B1E14 BL 0x1C16CF4
	0x031B1E18 MOVZ W8, 0x1
	0x031B1E1C STRB W8, [X20 + 0xEA1]
	0x031B1E20 LDR X0, [X21]
	0x031B1E24 LDR W8, [X0 + 0xE0]
	0x031B1E28 CBNZ W8, 0x31B1E30
	0x031B1E2C BL 0x1C16DFC
	0x031B1E30 BL 0x31AF454
	0x031B1E34 CBZ X0, 0x31B1E88
	0x031B1E38 MOV V0.16B, V12.16B
	0x031B1E3C MOV V1.16B, V11.16B
	0x031B1E40 MOV V2.16B, V10.16B
	0x031B1E44 MOV X1, X31
	0x031B1E48 BL 0x31C50A8
	0x031B1E4C CBZ X0, 0x31B1E88
	0x031B1E50 MOV X1, X31
	0x031B1E54 BL 0x31C0B4C
	0x031B1E58 MOV X1, X0
	0x031B1E5C MOV X0, X19
	0x031B1E60 MOV V0.16B, V9.16B
	0x031B1E64 MOV V3.16B, V8.16B
	0x031B1E68 LDP X20, X19, [X31 + 0x40]
	0x031B1E6C LDP X30, X21, [X31 + 0x30]
	0x031B1E70 LDP D9, D8, [X31 + 0x20]
	0x031B1E74 LDP D11, D10, [X31 + 0x10]
	0x031B1E78 FMOV S1, W31
	0x031B1E7C FMOV S2, W31
	0x031B1E80 LDR V12, [X31], #0x50
	0x031B1E84 B 0x31AF81C
	0x031B1E88 BL 0x1C16F20
	0x031B1E8C STR D12, [X31 - 0x50]!
	0x031B1E90 STP D11, D10, [X31 + 0x10]
	0x031B1E94 STP D9, D8, [X31 + 0x20]
	0x031B1E98 STP X30, X21, [X31 + 0x30]
	0x031B1E9C STP X20, X19, [X31 + 0x40]
	0x031B1EA0 ADRP X20, 0x122A000
	0x031B1EA4 ADRP X21, 0xF44000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x122B000
	008 Move X21, 0xF45000
	009 Move W8, [X22+3722]
	010 Move X21, [X21+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF45000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3722], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {56}
	031 Move X1, X31
	032 Call LTDescr.setMoveSpline, X0
	033 Move X8, [X21]
	034 Move X8, [X8+184]
	035 Move [X8+136], X0
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Move X8, [X0+232]
	039 Move X1, X0
	040 Compare X8, 0
	041 JumpIfEqual {56}
	042 Move [X8+80], X19
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+8]
	049 Move S0, 1
	050 Move S1, W31
	051 Move S2, W31
	052 Move V3, V8
	053 Move V8, [X31+48]
	054 Call LeanTween.pushNewTween, X0, X1, V0, X2
	055 Return X0
	056 Call 0x1C17F20

Method: LTDescr moveSpline(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031B1EA8 LDRB W8, [X20 + 0xEA2]
	0x031B1EAC LDR X21, [X21 + 0x5A8]
	0x031B1EB0 MOV V8.16B, V4.16B
	0x031B1EB4 MOV V9.16B, V3.16B
	0x031B1EB8 MOV V10.16B, V2.16B
	0x031B1EBC MOV V11.16B, V1.16B
	0x031B1EC0 MOV V12.16B, V0.16B
	0x031B1EC4 MOV X19, X0
	0x031B1EC8 TBNZ X8, 0x0, 0x31B1EE0
	0x031B1ECC ADRP X0, 0xF44000
	0x031B1ED0 LDR X0, [X0 + 0x5A8]
	0x031B1ED4 BL 0x1C16CF4
	0x031B1ED8 MOVZ W8, 0x1
	0x031B1EDC STRB W8, [X20 + 0xEA2]
	0x031B1EE0 LDR X0, [X21]
	0x031B1EE4 LDR W8, [X0 + 0xE0]
	0x031B1EE8 CBNZ W8, 0x31B1EF0
	0x031B1EEC BL 0x1C16DFC
	0x031B1EF0 BL 0x31AF454
	0x031B1EF4 CBZ X0, 0x31B1F48
	0x031B1EF8 MOV X1, X31
	0x031B1EFC BL 0x31C0C00
	0x031B1F00 CBZ X0, 0x31B1F48
	0x031B1F04 MOV V0.16B, V12.16B
	0x031B1F08 MOV V1.16B, V11.16B
	0x031B1F0C MOV V2.16B, V10.16B
	0x031B1F10 MOV X1, X31
	0x031B1F14 BL 0x31C50A8
	0x031B1F18 MOV X1, X0
	0x031B1F1C MOV X0, X19
	0x031B1F20 MOV V0.16B, V9.16B
	0x031B1F24 MOV V3.16B, V8.16B
	0x031B1F28 LDP X20, X19, [X31 + 0x40]
	0x031B1F2C LDP X30, X21, [X31 + 0x30]
	0x031B1F30 LDP D9, D8, [X31 + 0x20]
	0x031B1F34 LDP D11, D10, [X31 + 0x10]
	0x031B1F38 FMOV S1, W31
	0x031B1F3C FMOV S2, W31
	0x031B1F40 LDR V12, [X31], #0x50
	0x031B1F44 B 0x31AF81C
	0x031B1F48 BL 0x1C16F20
	0x031B1F4C STP D11, D10, [X31 - 0x40]!
	0x031B1F50 STP D9, D8, [X31 + 0x10]
	0x031B1F54 STP X30, X21, [X31 + 0x20]
	0x031B1F58 STP X20, X19, [X31 + 0x30]
	0x031B1F5C ADRP X20, 0x122A000
	0x031B1F60 ADRP X21, 0xF44000
	0x031B1F64 LDRB W8, [X20 + 0xEA3]
	0x031B1F68 LDR X21, [X21 + 0x5A8]
	0x031B1F6C MOV V8.16B, V3.16B
	0x031B1F70 MOV V9.16B, V2.16B
	0x031B1F74 MOV V10.16B, V1.16B
	0x031B1F78 MOV V11.16B, V0.16B
	0x031B1F7C MOV X19, X0
	0x031B1F80 TBNZ X8, 0x0, 0x31B1F98
	0x031B1F84 ADRP X0, 0xF44000
	0x031B1F88 LDR X0, [X0 + 0x5A8]
	0x031B1F8C BL 0x1C16CF4
	0x031B1F90 MOVZ W8, 0x1
	0x031B1F94 STRB W8, [X20 + 0xEA3]
	0x031B1F98 LDR X0, [X21]
	0x031B1F9C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x122B000
	009 Move X22, 0xF45000
	010 Move W8, [X21+3723]
	011 Move X22, [X22+1448]
	012 Move V8, V0
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF6F000
	020 Move X0, [X0+1048]
	021 Call 0x1C17CF4
	022 Move X0, 0xF45000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3723], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {76}
	035 Move X1, X31
	036 Call LTDescr.setMoveSpline, X0
	037 Move X8, [X22]
	038 Move X8, [X8+184]
	039 Move [X8+136], X0
	040 Compare X0, 0
	041 JumpIfEqual {76}
	042 Move X8, 0xF6F000
	043 Move X8, [X8+1048]
	044 Move X23, [X0+232]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move W8, 1
	048 Move X1, X31
	049 Move X21, X0
	050 Move [X0+20], W8
	051 Call Object..ctor, X0
	052 Move W2, 1
	053 Move X0, X21
	054 Move X1, X20
	055 Call LTSpline.init, X0, X1, X2
	056 Compare X23, 0
	057 JumpIfEqual {76}
	058 Move [X23+80], X21
	059 Move X8, [X22]
	060 Move X0, X19
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X22, [X31+32]
	064 Move X21, [X31+40]
	065 Move X8, [X8+184]
	066 Move X30, [X31+16]
	067 Move X23, [X31+24]
	068 Move S0, 1
	069 Move S1, W31
	070 Move X1, [X8+136]
	071 Move S2, W31
	072 Move V3, V8
	073 Move V8, [X31+64]
	074 Call LeanTween.pushNewTween, X0, X1, V0, X2
	075 Return X0
	076 Call 0x1C17F20

Method: LTDescr moveSpline(UnityEngine.GameObject gameObject, LTSpline to, System.Single time)

Disassembly:
	0x031B1FD8 MOV V1.16B, V10.16B
	0x031B1FDC LDP D11, D10, [X31], #0x40
	0x031B1FE0 B 0x31AF81C
	0x031B1FE4 BL 0x1C16F20
	0x031B1FE8 STR D10, [X31 - 0x40]!
	0x031B1FEC STP D9, D8, [X31 + 0x10]
	0x031B1FF0 STP X30, X21, [X31 + 0x20]
	0x031B1FF4 STP X20, X19, [X31 + 0x30]
	0x031B1FF8 ADRP X20, 0x122A000
	0x031B1FFC ADRP X21, 0xF44000
	0x031B2000 LDRB W8, [X20 + 0xEA4]
	0x031B2004 B 0x3EB1884
	0x031B2008 MOV V8.16B, V2.16B
	0x031B200C MOV V9.16B, V1.16B
	0x031B2010 MOV V10.16B, V0.16B
	0x031B2014 MOV X19, X0
	0x031B2018 TBNZ X8, 0x0, 0x31B2030
	0x031B201C ADRP X0, 0xF43000
	0x031B2020 LDR X0, [X0 + 0x5A8]
	0x031B2024 BL 0x1C16CF4
	0x031B2028 MOVZ W8, 0x1
	0x031B202C STRB W8, [X20 + 0xEA4]
	0x031B2030 LDR X0, [X21]
	0x031B2034 LDR W8, [X0 + 0xE0]
	0x031B2038 CBNZ W8, 0x31B2040
	0x031B203C BL 0x1C16DFC
	0x031B2040 BL 0x31AF7B4
	0x031B2044 MOV X20, X0
	0x031B2048 BL 0x31AF454
	0x031B204C CBZ X0, 0x31B2094
	0x031B2050 MOV X1, X31
	0x031B2054 BL 0x31C21D8
	0x031B2058 CBZ X0, 0x31B2094
	0x031B205C MOV X1, X19
	0x031B2060 MOV X2, X31
	0x031B2064 BL 0x31C8398
	0x031B2068 MOV X1, X0
	0x031B206C MOV X0, X20
	0x031B2070 MOV V1.16B, V9.16B
	0x031B2074 MOV V3.16B, V8.16B
	0x031B2078 LDP X20, X19, [X31 + 0x30]
	0x031B207C LDP X30, X21, [X31 + 0x20]
	0x031B2080 LDP D9, D8, [X31 + 0x10]
	0x031B2084 FMOV S2, W31

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x122B000
	008 Move X21, 0xF45000
	009 Move W8, [X22+3724]
	010 Move X21, [X21+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3724], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {56}
	031 Move X1, X31
	032 Call LTDescr.setMoveSpline, X0
	033 Move X8, [X21]
	034 Move X8, [X8+184]
	035 Move [X8+136], X0
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Move X8, [X0+232]
	039 Move X1, X0
	040 Compare X8, 0
	041 JumpIfEqual {56}
	042 Move [X8+80], X19
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+8]
	049 Move S0, 1
	050 Move S1, W31
	051 Move S2, W31
	052 Move V3, V8
	053 Move V8, [X31+48]
	054 Call LeanTween.pushNewTween, X0, X1, V0, X2
	055 Return X0
	056 Call 0x1C17F20

Method: LTDescr moveSplineLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031B2088 MOV V0.16B, V10.16B
	0x031B208C LDR V10, [X31], #0x40
	0x031B2090 B 0x31AF81C
	0x031B2094 BL 0x1C16F20
	0x031B2098 STP D9, D8, [X31 - 0x30]!
	0x031B209C STP X30, X21, [X31 + 0x10]
	0x031B20A0 STP X20, X19, [X31 + 0x20]
	0x031B20A4 ADRP X20, 0x1229000
	0x031B20A8 ADRP X21, 0xF43000
	0x031B20AC LDRB W8, [X20 + 0xEA5]
	0x031B20B0 LDR X21, [X21 + 0x5A8]
	0x031B20B4 MOV V8.16B, V1.16B
	0x031B20B8 MOV V9.16B, V0.16B
	0x031B20BC MOV X19, X0
	0x031B20C0 TBNZ X8, 0x0, 0x31B20D8
	0x031B20C4 ADRP X0, 0xF43000
	0x031B20C8 LDR X0, [X0 + 0x5A8]
	0x031B20CC BL 0x1C16CF4
	0x031B20D0 MOVZ W8, 0x1
	0x031B20D4 STRB W8, [X20 + 0xEA5]
	0x031B20D8 LDR X0, [X21]
	0x031B20DC LDR W8, [X0 + 0xE0]
	0x031B20E0 CBNZ W8, 0x31B20E8
	0x031B20E4 BL 0x1C16DFC
	0x031B20E8 BL 0x31AF454
	0x031B20EC CBZ X0, 0x31B2120
	0x031B20F0 MOV X1, X31
	0x031B20F4 BL 0x31C0714
	0x031B20F8 MOV X1, X0
	0x031B20FC MOV X0, X19
	0x031B2100 LDP X20, X19, [X31 + 0x20]
	0x031B2104 LDP X30, X21, [X31 + 0x10]
	0x031B2108 FMOV S1, W31
	0x031B210C FMOV S2, W31
	0x031B2110 MOV V0.16B, V9.16B
	0x031B2114 MOV V3.16B, V8.16B
	0x031B2118 LDP D9, D8, [X31], #0x30
	0x031B211C B 0x31AF81C
	0x031B2120 BL 0x1C16F20
	0x031B2124 STP D9, D8, [X31 - 0x30]!
	0x031B2128 STP X30, X21, [X31 + 0x10]
	0x031B212C STP X20, X19, [X31 + 0x20]
	0x031B2130 ADRP X20, 0x1229000
	0x031B2134 ADRP X21, 0xF43000
	0x031B2138 LDRB W8, [X20 + 0xEA6]
	0x031B213C LDR X21, [X21 + 0x5A8]
	0x031B2140 MOV V8.16B, V1.16B
	0x031B2144 MOV V9.16B, V0.16B
	0x031B2148 MOV X19, X0
	0x031B214C TBNZ X8, 0x0, 0x31B2164
	0x031B2150 ADRP X0, 0xF43000
	0x031B2154 LDR X0, [X0 + 0x5A8]
	0x031B2158 BL 0x1C16CF4
	0x031B215C MOVZ W8, 0x1
	0x031B2160 STRB W8, [X20 + 0xEA6]
	0x031B2164 LDR X0, [X21]
	0x031B2168 LDR W8, [X0 + 0xE0]
	0x031B216C CBNZ W8, 0x31B2174
	0x031B2170 BL 0x1C16DFC
	0x031B2174 BL 0x31AF454
	0x031B2178 CBZ X0, 0x31B21AC
	0x031B217C MOV X1, X31

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x122A000
	009 Move X22, 0xF44000
	010 Move W8, [X21+3725]
	011 Move X22, [X22+1448]
	012 Move V8, V0
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF6E000
	020 Move X0, [X0+1048]
	021 Call 0x1C17CF4
	022 Move X0, 0xF44000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3725], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {76}
	035 Move X1, X31
	036 Call LTDescr.setMoveSplineLocal, X0
	037 Move X8, [X22]
	038 Move X8, [X8+184]
	039 Move [X8+136], X0
	040 Compare X0, 0
	041 JumpIfEqual {76}
	042 Move X8, 0xF6E000
	043 Move X8, [X8+1048]
	044 Move X23, [X0+232]
	045 Move X0, [X8]
	046 Call 0x1C17F10
	047 Move W8, 1
	048 Move X1, X31
	049 Move X21, X0
	050 Move [X0+20], W8
	051 Call Object..ctor, X0
	052 Move W2, 1
	053 Move X0, X21
	054 Move X1, X20
	055 Call LTSpline.init, X0, X1, X2
	056 Compare X23, 0
	057 JumpIfEqual {76}
	058 Move [X23+80], X21
	059 Move X8, [X22]
	060 Move X0, X19
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X22, [X31+32]
	064 Move X21, [X31+40]
	065 Move X8, [X8+184]
	066 Move X30, [X31+16]
	067 Move X23, [X31+24]
	068 Move S0, 1
	069 Move S1, W31
	070 Move X1, [X8+136]
	071 Move S2, W31
	072 Move V3, V8
	073 Move V8, [X31+64]
	074 Call LeanTween.pushNewTween, X0, X1, V0, X2
	075 Return X0
	076 Call 0x1C17F20

Method: LTDescr move(LTRect ltRect, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031B2180 BL 0x31C07C8
	0x031B2184 MOV X1, X0
	0x031B2188 MOV X0, X19
	0x031B218C LDP X20, X19, [X31 + 0x20]
	0x031B2190 LDP X30, X21, [X31 + 0x10]
	0x031B2194 FMOV S1, W31
	0x031B2198 FMOV S2, W31
	0x031B219C MOV V0.16B, V9.16B
	0x031B21A0 MOV V3.16B, V8.16B
	0x031B21A4 LDP D9, D8, [X31], #0x30
	0x031B21A8 B 0x31AF81C
	0x031B21AC BL 0x1C16F20
	0x031B21B0 STP D9, D8, [X31 - 0x30]!
	0x031B21B4 STP X30, X21, [X31 + 0x10]
	0x031B21B8 STP X20, X19, [X31 + 0x20]
	0x031B21BC ADRP X20, 0x1229000
	0x031B21C0 ADRP X21, 0xF43000
	0x031B21C4 LDRB W8, [X20 + 0xEA7]
	0x031B21C8 LDR X21, [X21 + 0x5A8]
	0x031B21CC MOV V8.16B, V1.16B
	0x031B21D0 MOV V9.16B, V0.16B
	0x031B21D4 MOV X19, X0
	0x031B21D8 TBNZ X8, 0x0, 0x31B21F0
	0x031B21DC ADRP X0, 0xF43000
	0x031B21E0 LDR X0, [X0 + 0x5A8]
	0x031B21E4 BL 0x1C16CF4
	0x031B21E8 MOVZ W8, 0x1
	0x031B21EC STRB W8, [X20 + 0xEA7]
	0x031B21F0 LDR X0, [X21]
	0x031B21F4 LDR W8, [X0 + 0xE0]
	0x031B21F8 CBNZ W8, 0x31B2200
	0x031B21FC BL 0x1C16DFC
	0x031B2200 BL 0x31AF454
	0x031B2204 CBZ X0, 0x31B2238
	0x031B2208 MOV X1, X31
	0x031B220C BL 0x31C087C
	0x031B2210 MOV X1, X0
	0x031B2214 MOV X0, X19
	0x031B2218 LDP X20, X19, [X31 + 0x20]
	0x031B221C LDP X30, X21, [X31 + 0x10]
	0x031B2220 FMOV S1, W31
	0x031B2224 FMOV S2, W31
	0x031B2228 MOV V0.16B, V9.16B
	0x031B222C MOV V3.16B, V8.16B

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122A000
	009 Move X21, 0xF44000
	010 Move W8, [X20+3726]
	011 Move X21, [X21+1448]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF44000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3726], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Call LeanTween.get_tweenEmpty
	031 Move X20, X0
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {57}
	035 Move X1, X31
	036 Call LTDescr.setGUIMove, X0
	037 Compare X0, 0
	038 JumpIfEqual {57}
	039 Move X1, X19
	040 Move X2, X31
	041 Call LTDescr.setRect, X0, X1
	042 Move X1, X0
	043 Move X0, X20
	044 Move V1, V9
	045 Move V3, V8
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Move D9, [X31+16]
	051 Move D8, [X31+24]
	052 Move S2, W31
	053 Move V0, V10
	054 Move V10, [X31+64]
	055 Call LeanTween.pushNewTween, X0, X1, V0, X2
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr moveMargin(LTRect ltRect, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031B2230 LDP D9, D8, [X31], #0x30
	0x031B2234 B 0x31AF81C
	0x031B2238 BL 0x1C16F20
	0x031B223C STR D10, [X31 - 0x40]!
	0x031B2240 STP D9, D8, [X31 + 0x10]
	0x031B2244 STP X30, X21, [X31 + 0x20]
	0x031B2248 STP X20, X19, [X31 + 0x30]
	0x031B224C ADRP X20, 0x1229000
	0x031B2250 ADRP X21, 0xF43000
	0x031B2254 LDRB W8, [X20 + 0xEA8]
	0x031B2258 LDR X21, [X21 + 0x5A8]
	0x031B225C MOV V8.16B, V2.16B
	0x031B2260 MOV V9.16B, V1.16B
	0x031B2264 MOV V10.16B, V0.16B
	0x031B2268 MOV X19, X0
	0x031B226C TBNZ X8, 0x0, 0x31B2284
	0x031B2270 ADRP X0, 0xF43000
	0x031B2274 LDR X0, [X0 + 0x5A8]
	0x031B2278 BL 0x1C16CF4
	0x031B227C MOVZ W8, 0x1
	0x031B2280 STRB W8, [X20 + 0xEA8]
	0x031B2284 LDR X0, [X21]
	0x031B2288 LDR W8, [X0 + 0xE0]
	0x031B228C CBNZ W8, 0x31B2294
	0x031B2290 BL 0x1C16DFC
	0x031B2294 BL 0x31AF454
	0x031B2298 CBZ X0, 0x31B22E8
	0x031B229C MOV X1, X31
	0x031B22A0 BL 0x31C1A10
	0x031B22A4 CBZ X0, 0x31B22E8
	0x031B22A8 FMOV S1, W31
	0x031B22AC FMOV S2, W31
	0x031B22B0 MOV V0.16B, V10.16B
	0x031B22B4 MOV X1, X31
	0x031B22B8 BL 0x31C7D80
	0x031B22BC MOV X1, X0
	0x031B22C0 MOV X0, X19
	0x031B22C4 MOV V0.16B, V9.16B
	0x031B22C8 MOV V3.16B, V8.16B
	0x031B22CC LDP X20, X19, [X31 + 0x30]
	0x031B22D0 LDP X30, X21, [X31 + 0x20]
	0x031B22D4 LDP D9, D8, [X31 + 0x10]
	0x031B22D8 FMOV S1, W31
	0x031B22DC FMOV S2, W31

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122A000
	009 Move X21, 0xF44000
	010 Move W8, [X20+3727]
	011 Move X21, [X21+1448]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF44000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3727], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Call LeanTween.get_tweenEmpty
	031 Move X20, X0
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {57}
	035 Move X1, X31
	036 Call LTDescr.setGUIMoveMargin, X0
	037 Compare X0, 0
	038 JumpIfEqual {57}
	039 Move X1, X19
	040 Move X2, X31
	041 Call LTDescr.setRect, X0, X1
	042 Move X1, X0
	043 Move X0, X20
	044 Move V1, V9
	045 Move V3, V8
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Move D9, [X31+16]
	051 Move D8, [X31+24]
	052 Move S2, W31
	053 Move V0, V10
	054 Move V10, [X31+64]
	055 Call LeanTween.pushNewTween, X0, X1, V0, X2
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr moveX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B22E0 LDR V10, [X31], #0x40
	0x031B22E4 B 0x31AF81C
	0x031B22E8 BL 0x1C16F20
	0x031B22EC STR D10, [X31 - 0x30]!
	0x031B22F0 STP D9, D8, [X31 + 0x8]
	0x031B22F4 STR X30, [X31 + 0x18]
	0x031B22F8 STP X20, X19, [X31 + 0x20]
	0x031B22FC ADRP X19, 0x1229000
	0x031B2300 ADRP X20, 0xF43000
	0x031B2304 LDRB W8, [X19 + 0xEA9]
	0x031B2308 LDR X20, [X20 + 0x5A8]
	0x031B230C MOV V8.16B, V2.16B
	0x031B2310 MOV V9.16B, V1.16B
	0x031B2314 MOV V10.16B, V0.16B
	0x031B2318 TBNZ X8, 0x0, 0x31B2330
	0x031B231C ADRP X0, 0xF43000
	0x031B2320 LDR X0, [X0 + 0x5A8]
	0x031B2324 BL 0x1C16CF4
	0x031B2328 MOVZ W8, 0x1
	0x031B232C STRB W8, [X19 + 0xEA9]
	0x031B2330 LDR X0, [X20]
	0x031B2334 LDR W8, [X0 + 0xE0]
	0x031B2338 CBNZ W8, 0x31B2340
	0x031B233C BL 0x1C16DFC
	0x031B2340 BL 0x31AF7B4
	0x031B2344 MOV X19, X0
	0x031B2348 BL 0x31AF454
	0x031B234C CBZ X0, 0x31B239C
	0x031B2350 MOV X1, X31
	0x031B2354 BL 0x31C1A10
	0x031B2358 CBZ X0, 0x31B239C
	0x031B235C FMOV S1, W31
	0x031B2360 FMOV S2, W31
	0x031B2364 MOV V0.16B, V10.16B
	0x031B2368 MOV X1, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3728]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3728], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setMoveX, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr moveY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B236C BL 0x31C7D80
	0x031B2370 MOV X1, X0
	0x031B2374 MOV X0, X19
	0x031B2378 MOV V0.16B, V9.16B
	0x031B237C MOV V3.16B, V8.16B
	0x031B2380 LDP X20, X19, [X31 + 0x20]
	0x031B2384 LDR X30, [X31 + 0x18]
	0x031B2388 LDP D9, D8, [X31 + 0x8]
	0x031B238C FMOV S1, W31
	0x031B2390 FMOV S2, W31
	0x031B2394 LDR V10, [X31], #0x30
	0x031B2398 B 0x31AF81C
	0x031B239C BL 0x1C16F20
	0x031B23A0 STR D12, [X31 - 0x50]!
	0x031B23A4 STP D11, D10, [X31 + 0x10]
	0x031B23A8 STP D9, D8, [X31 + 0x20]
	0x031B23AC STP X30, X21, [X31 + 0x30]
	0x031B23B0 STP X20, X19, [X31 + 0x40]
	0x031B23B4 ADRP X20, 0x1229000
	0x031B23B8 ADRP X21, 0xF43000
	0x031B23BC LDRB W8, [X20 + 0xEAA]
	0x031B23C0 LDR X21, [X21 + 0x5A8]
	0x031B23C4 MOV V8.16B, V4.16B
	0x031B23C8 MOV V9.16B, V3.16B
	0x031B23CC MOV V10.16B, V2.16B
	0x031B23D0 MOV V11.16B, V1.16B
	0x031B23D4 MOV V12.16B, V0.16B
	0x031B23D8 MOV X19, X0
	0x031B23DC TBNZ X8, 0x0, 0x31B23F4
	0x031B23E0 ADRP X0, 0xF43000
	0x031B23E4 LDR X0, [X0 + 0x5A8]
	0x031B23E8 BL 0x1C16CF4
	0x031B23EC MOVZ W8, 0x1
	0x031B23F0 STRB W8, [X20 + 0xEAA]
	0x031B23F4 LDR X0, [X21]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3729]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3729], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setMoveY, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr moveZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B23F8 LDR W8, [X0 + 0xE0]
	0x031B23FC CBNZ W8, 0x31B2404
	0x031B2400 BL 0x1C16DFC
	0x031B2404 BL 0x31AF454
	0x031B2408 CBZ X0, 0x31B2474
	0x031B240C MOV X1, X31
	0x031B2410 BL 0x31C1B24
	0x031B2414 CBZ X0, 0x31B2474
	0x031B2418 FMOV S2, W31
	0x031B241C MOV V0.16B, V10.16B
	0x031B2420 MOV V1.16B, V9.16B
	0x031B2424 MOV X1, X31
	0x031B2428 BL 0x31C7D34
	0x031B242C CBZ X0, 0x31B2474
	0x031B2430 FMOV S2, W31
	0x031B2434 MOV V0.16B, V12.16B
	0x031B2438 MOV V1.16B, V11.16B
	0x031B243C MOV X1, X31
	0x031B2440 BL 0x31C7D80
	0x031B2444 MOV X1, X0
	0x031B2448 MOV X0, X19
	0x031B244C MOV V0.16B, V10.16B
	0x031B2450 MOV V1.16B, V9.16B
	0x031B2454 MOV V3.16B, V8.16B
	0x031B2458 LDP X20, X19, [X31 + 0x40]
	0x031B245C LDP X30, X21, [X31 + 0x30]
	0x031B2460 LDP D9, D8, [X31 + 0x20]
	0x031B2464 LDP D11, D10, [X31 + 0x10]
	0x031B2468 FMOV S2, W31
	0x031B246C LDR V12, [X31], #0x50
	0x031B2470 B 0x31AF81C
	0x031B2474 BL 0x1C16F20
	0x031B2478 STR D14, [X31 - 0x60]!
	0x031B247C STP D13, D12, [X31 + 0x10]
	0x031B2480 STP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3730]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3730], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setMoveZ, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr moveLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B2484 STP D9, D8, [X31 + 0x30]
	0x031B2488 STP X30, X21, [X31 + 0x40]
	0x031B248C STP X20, X19, [X31 + 0x50]
	0x031B2490 ADRP X20, 0x1229000
	0x031B2494 ADRP X21, 0xF43000
	0x031B2498 LDRB W8, [X20 + 0xEAB]
	0x031B249C LDR X21, [X21 + 0x5A8]
	0x031B24A0 MOV V8.16B, V6.16B
	0x031B24A4 MOV V9.16B, V5.16B
	0x031B24A8 MOV V10.16B, V4.16B
	0x031B24AC MOV V11.16B, V3.16B
	0x031B24B0 MOV V12.16B, V2.16B
	0x031B24B4 MOV V13.16B, V1.16B
	0x031B24B8 MOV V14.16B, V0.16B
	0x031B24BC MOV X19, X0
	0x031B24C0 TBNZ X8, 0x0, 0x31B24D8
	0x031B24C4 ADRP X0, 0xF43000
	0x031B24C8 LDR X0, [X0 + 0x5A8]
	0x031B24CC BL 0x1C16CF4
	0x031B24D0 MOVZ W8, 0x1
	0x031B24D4 STRB W8, [X20 + 0xEAB]
	0x031B24D8 LDR X0, [X21]
	0x031B24DC LDR W8, [X0 + 0xE0]
	0x031B24E0 CBNZ W8, 0x31B24E8
	0x031B24E4 BL 0x1C16DFC
	0x031B24E8 BL 0x31AF454
	0x031B24EC CBZ X0, 0x31B2544
	0x031B24F0 MOV X1, X31
	0x031B24F4 BL 0x31C1B24
	0x031B24F8 CBZ X0, 0x31B2544
	0x031B24FC MOV V0.16B, V14.16B
	0x031B2500 MOV V1.16B, V13.16B
	0x031B2504 MOV V2.16B, V12.16B
	0x031B2508 MOV X1, X31
	0x031B250C BL 0x31C7D80
	0x031B2510 MOV X1, X0
	0x031B2514 MOV X0, X19
	0x031B2518 MOV V0.16B, V11.16B
	0x031B251C MOV V1.16B, V10.16B

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122A000
	010 Move X21, 0xF44000
	011 Move W8, [X20+3731]
	012 Move X21, [X21+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF44000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3731], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {53}
	035 Move X1, X31
	036 Call LTDescr.setMoveLocal, X0
	037 Move X1, X0
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move V0, V11
	048 Move V1, V10
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.pushNewTween, X0, X1, V0, X2
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr moveLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031B2520 MOV V2.16B, V9.16B
	0x031B2524 MOV V3.16B, V8.16B
	0x031B2528 LDP X20, X19, [X31 + 0x50]
	0x031B252C LDP X30, X21, [X31 + 0x40]
	0x031B2530 LDP D9, D8, [X31 + 0x30]
	0x031B2534 LDP D11, D10, [X31 + 0x20]
	0x031B2538 LDP D13, D12, [X31 + 0x10]
	0x031B253C LDR V14, [X31], #0x60
	0x031B2540 B 0x31AF81C
	0x031B2544 BL 0x1C16F20
	0x031B2548 STP D15, D14, [X31 - 0x60]!
	0x031B254C STP D13, D12, [X31 + 0x10]
	0x031B2550 STP D11, D10, [X31 + 0x20]
	0x031B2554 STP D9, D8, [X31 + 0x30]
	0x031B2558 STP X30, X21, [X31 + 0x40]
	0x031B255C STP X20, X19, [X31 + 0x50]
	0x031B2560 ADRP X20, 0x1229000
	0x031B2564 ADRP X21, 0xF43000
	0x031B2568 LDRB W8, [X20 + 0xEAC]
	0x031B256C LDR X21, [X21 + 0x5A8]
	0x031B2570 MOV V8.16B, V7.16B
	0x031B2574 MOV V13.16B, V6.16B
	0x031B2578 MOV V14.16B, V5.16B
	0x031B257C MOV V15.16B, V4.16B
	0x031B2580 MOV V9.16B, V3.16B
	0x031B2584 MOV V10.16B, V2.16B
	0x031B2588 MOV V11.16B, V1.16B
	0x031B258C MOV V12.16B, V0.16B
	0x031B2590 MOV X19, X0
	0x031B2594 TBNZ X8, 0x0, 0x31B25B8
	0x031B2598 ADRP X0, 0xF6D000
	0x031B259C LDR X0, [X0 + 0x3E8]
	0x031B25A0 BL 0x1C16CF4
	0x031B25A4 ADRP X0, 0xF43000
	0x031B25A8 LDR X0, [X0 + 0x5A8]
	0x031B25AC BL 0x1C16CF4
	0x031B25B0 MOVZ W8, 0x1
	0x031B25B4 STRB W8, [X20 + 0xEAC]
	0x031B25B8 LDR X0, [X21]
	0x031B25BC LDR W8, [X0 + 0xE0]
	0x031B25C0 CBNZ W8, 0x31B25C8
	0x031B25C4 BL 0x1C16DFC
	0x031B25C8 BL 0x31AF454
	0x031B25CC CBZ X0, 0x31B2680
	0x031B25D0 MOV X1, X31
	0x031B25D4 BL 0x31C0F84
	0x031B25D8 CBZ X0, 0x31B2680
	0x031B25DC MOV V0.16B, V15.16B
	0x031B25E0 MOV V1.16B, V14.16B
	0x031B25E4 MOV V2.16B, V13.16B
	0x031B25E8 MOV X1, X31
	0x031B25EC BL 0x31C8468
	0x031B25F0 CBZ X0, 0x31B2680
	0x031B25F4 MOV V0.16B, V12.16B
	0x031B25F8 MOV V1.16B, V11.16B
	0x031B25FC MOV V2.16B, V10.16B
	0x031B2600 MOV V3.16B, V9.16B
	0x031B2604 MOV X1, X31
	0x031B2608 BL 0x31C2C30
	0x031B260C CBZ X0, 0x31B2680
	0x031B2610 LDR V9, [X31 + 0x60]
	0x031B2614 MOV W1, W31
	0x031B2618 MOV X2, X31
	0x031B261C BL 0x31C7E5C
	0x031B2620 MOV X1, X0
	0x031B2624 FMOV S0, 1
	0x031B2628 FMOV S2, W31
	0x031B262C MOV X0, X19
	0x031B2630 MOV V1.16B, V8.16B
	0x031B2634 MOV V3.16B, V9.16B
	0x031B2638 BL 0x31AF81C
	0x031B263C CBZ X19, 0x31B2680
	0x031B2640 ADRP X8, 0xF6D000
	0x031B2644 LDR X8, [X8 + 0x3E8]
	0x031B2648 MOV X20, X0
	0x031B264C MOV X0, X19
	0x031B2650 LDR X1, [X8]
	0x031B2654 BL 0x21E52E4
	0x031B2658 CBZ X20, 0x31B2680
	0x031B265C STR X0, [X20 + 0xB8]
	0x031B2660 MOV X0, X20

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x122A000
	009 Move X22, 0xF44000
	010 Move W8, [X21+3732]
	011 Move X22, [X22+1448]
	012 Move V8, V0
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0xF6E000
	020 Move X0, [X0+1008]
	021 Call 0x1C17CF4
	022 Move X0, 0xF44000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3732], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {101}
	035 Move X1, X31
	036 Call LTDescr.setMoveCurvedLocal, X0
	037 Move X8, [X22]
	038 Move X9, [X8+184]
	039 Move [X9+136], X0
	040 Compare X0, 0
	041 JumpIfEqual {101}
	042 Move X9, [X0+232]
	043 Compare X9, 0
	044 JumpIfEqual {101}
	045 Move W10, [X8+224]
	046 Move X21, [X9+72]
	047 Compare W10, 0
	048 JumpIfNotEqual {56}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X8, [X22]
	052 Move X8, [X8+184]
	053 Move X0, [X8+136]
	054 Compare X0, 0
	055 JumpIfEqual {101}
	056 Move X23, [X0+232]
	057 Compare X21, 0
	058 JumpIfEqual {66}
	059 Compare X23, 0
	060 JumpIfEqual {101}
	061 Move X0, [X23+72]
	062 Compare X0, 0
	063 JumpIfEqual {101}
	064 Move X1, X20
	065 Call LTBezierPath.setPoints, X0, X1
	066 Move X8, 0xF6E000
	067 Move X8, [X8+1008]
	068 Move X0, [X8]
	069 Call 0x1C17F10
	070 Move X1, X31
	071 Move X21, X0
	072 Call Object..ctor, X0
	073 Move X0, X21
	074 Move X1, X20
	075 Call LTBezierPath.setPoints, X0, X1
	076 Compare X23, 0
	077 JumpIfEqual {101}
	078 Move [X23+72], X21
	079 Move X0, [X22]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {85}
	083 Call 0x1C17DFC
	084 Move X0, [X22]
	085 Move X8, [X0+184]
	086 Move X0, X19
	087 Move X20, [X31+48]
	088 Move X19, [X31+56]
	089 Move X22, [X31+32]
	090 Move X21, [X31+40]
	091 Move X1, [X8+136]
	092 Move X30, [X31+16]
	093 Move X23, [X31+24]
	094 Move S0, 1
	095 Move S1, W31
	096 Move S2, W31
	097 Move V3, V8
	098 Move V8, [X31+64]
	099 Call LeanTween.pushNewTween, X0, X1, V0, X2
	100 Return X0
	101 Call 0x1C17F20

Method: LTDescr moveLocalX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B2664 LDP X20, X19, [X31 + 0x50]
	0x031B2668 LDP X30, X21, [X31 + 0x40]
	0x031B266C LDP D9, D8, [X31 + 0x30]
	0x031B2670 LDP D11, D10, [X31 + 0x20]
	0x031B2674 LDP D13, D12, [X31 + 0x10]
	0x031B2678 LDP D15, D14, [X31], #0x60
	0x031B267C RET
	0x031B2680 BL 0x1C16F20
	0x031B2684 STR D10, [X31 - 0x40]!
	0x031B2688 STP D9, D8, [X31 + 0x8]
	0x031B268C STR X30, [X31 + 0x18]
	0x031B2690 STP X22, X21, [X31 + 0x20]
	0x031B2694 STP X20, X19, [X31 + 0x30]
	0x031B2698 ADRP X21, 0x1229000
	0x031B269C ADRP X22, 0xF43000
	0x031B26A0 LDRB W8, [X21 + 0xEAD]
	0x031B26A4 LDR X22, [X22 + 0x5A8]
	0x031B26A8 MOV V8.16B, V2.16B
	0x031B26AC MOV V9.16B, V1.16B
	0x031B26B0 MOV V10.16B, V0.16B
	0x031B26B4 MOV X20, X1
	0x031B26B8 MOV X19, X0
	0x031B26BC TBNZ X8, 0x0, 0x31B26D4
	0x031B26C0 ADRP X0, 0xF43000
	0x031B26C4 LDR X0, [X0 + 0x5A8]
	0x031B26C8 BL 0x1C16CF4
	0x031B26CC MOVZ W8, 0x1
	0x031B26D0 STRB W8, [X21 + 0xEAD]
	0x031B26D4 LDR X0, [X22]
	0x031B26D8 LDR W8, [X0 + 0xE0]
	0x031B26DC CBNZ W8, 0x31B26E4
	0x031B26E0 BL 0x1C16DFC
	0x031B26E4 BL 0x31AF454
	0x031B26E8 CBZ X0, 0x31B2764
	0x031B26EC MOV X1, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3733]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3733], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setMoveLocalX, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr moveLocalY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B26F0 BL 0x31C1A10
	0x031B26F4 CBZ X0, 0x31B2764
	0x031B26F8 FMOV S1, W31
	0x031B26FC FMOV S2, W31
	0x031B2700 MOV V0.16B, V9.16B
	0x031B2704 MOV X1, X31
	0x031B2708 BL 0x31C7D34
	0x031B270C CBZ X0, 0x31B2764
	0x031B2710 FMOV S1, W31
	0x031B2714 FMOV S2, W31
	0x031B2718 MOV V0.16B, V10.16B
	0x031B271C MOV X1, X31
	0x031B2720 BL 0x31C7D80
	0x031B2724 CBZ X0, 0x31B2764
	0x031B2728 MOV X1, X20
	0x031B272C MOV X2, X31
	0x031B2730 BL 0x31C8070
	0x031B2734 MOV X1, X0
	0x031B2738 MOV X0, X19
	0x031B273C MOV V0.16B, V9.16B
	0x031B2740 MOV V3.16B, V8.16B
	0x031B2744 LDP X20, X19, [X31 + 0x30]
	0x031B2748 LDP X22, X21, [X31 + 0x20]
	0x031B274C LDR X30, [X31 + 0x18]
	0x031B2750 LDP D9, D8, [X31 + 0x8]
	0x031B2754 FMOV S1, W31
	0x031B2758 FMOV S2, W31
	0x031B275C LDR V10, [X31], #0x40
	0x031B2760 B 0x31AF81C
	0x031B2764 BL 0x1C16F20
	0x031B2768 STR D10, [X31 - 0x40]!
	0x031B276C STP D9, D8, [X31 + 0x8]
	0x031B2770 STR X30, [X31 + 0x18]
	0x031B2774 STP X22, X21, [X31 + 0x20]
	0x031B2778 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3734]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3734], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setMoveLocalY, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr moveLocalZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B277C ADRP X21, 0x1229000
	0x031B2780 ADRP X22, 0xF43000
	0x031B2784 LDRB W8, [X21 + 0xEAE]
	0x031B2788 LDR X22, [X22 + 0x5A8]
	0x031B278C MOV V8.16B, V2.16B
	0x031B2790 MOV V9.16B, V1.16B
	0x031B2794 MOV V10.16B, V0.16B
	0x031B2798 MOV X20, X1
	0x031B279C MOV X19, X0
	0x031B27A0 TBNZ X8, 0x0, 0x31B27B8
	0x031B27A4 ADRP X0, 0xF43000
	0x031B27A8 LDR X0, [X0 + 0x5A8]
	0x031B27AC BL 0x1C16CF4
	0x031B27B0 MOVZ W8, 0x1
	0x031B27B4 STRB W8, [X21 + 0xEAE]
	0x031B27B8 LDR X0, [X22]
	0x031B27BC LDR W8, [X0 + 0xE0]
	0x031B27C0 CBNZ W8, 0x31B27C8
	0x031B27C4 BL 0x1C16DFC
	0x031B27C8 BL 0x31AF454
	0x031B27CC CBZ X0, 0x31B2848
	0x031B27D0 MOV X1, X31
	0x031B27D4 BL 0x31C1A10
	0x031B27D8 CBZ X0, 0x31B2848
	0x031B27DC FMOV S1, W31
	0x031B27E0 FMOV S2, W31
	0x031B27E4 MOV V0.16B, V9.16B
	0x031B27E8 MOV X1, X31
	0x031B27EC BL 0x31C7D34
	0x031B27F0 CBZ X0, 0x31B2848
	0x031B27F4 FMOV S1, W31
	0x031B27F8 FMOV S2, W31
	0x031B27FC MOV V0.16B, V10.16B
	0x031B2800 MOV X1, X31
	0x031B2804 BL 0x31C7D80

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3735]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3735], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setMoveLocalZ, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr moveLocal(UnityEngine.GameObject gameObject, LTBezierPath to, System.Single time)

Disassembly:
	0x031B2808 CBZ X0, 0x31B2848
	0x031B280C MOV X1, X20
	0x031B2810 MOV X2, X31
	0x031B2814 BL 0x31C8094
	0x031B2818 MOV X1, X0
	0x031B281C MOV X0, X19
	0x031B2820 MOV V0.16B, V9.16B
	0x031B2824 MOV V3.16B, V8.16B
	0x031B2828 LDP X20, X19, [X31 + 0x30]
	0x031B282C LDP X22, X21, [X31 + 0x20]
	0x031B2830 LDR X30, [X31 + 0x18]
	0x031B2834 LDP D9, D8, [X31 + 0x8]
	0x031B2838 FMOV S1, W31
	0x031B283C FMOV S2, W31
	0x031B2840 LDR V10, [X31], #0x40
	0x031B2844 B 0x31AF81C
	0x031B2848 BL 0x1C16F20
	0x031B284C STP D15, D14, [X31 - 0x70]!
	0x031B2850 STP D13, D12, [X31 + 0x10]
	0x031B2854 STP D11, D10, [X31 + 0x20]
	0x031B2858 STP D9, D8, [X31 + 0x30]
	0x031B285C STR X30, [X31 + 0x40]
	0x031B2860 STP X22, X21, [X31 + 0x50]
	0x031B2864 STP X20, X19, [X31 + 0x60]
	0x031B2868 STR S7, [X31 + 0x4C]
	0x031B286C ADRP X21, 0x1229000
	0x031B2870 ADRP X22, 0xF43000
	0x031B2874 LDRB W8, [X21 + 0xEAF]
	0x031B2878 LDR V9, [X31 + 0x70]
	0x031B287C LDR X22, [X22 + 0x5A8]
	0x031B2880 MOV V14.16B, V6.16B
	0x031B2884 MOV V15.16B, V5.16B
	0x031B2888 MOV V8.16B, V4.16B
	0x031B288C MOV V10.16B, V3.16B
	0x031B2890 MOV V11.16B, V2.16B
	0x031B2894 MOV V12.16B, V1.16B
	0x031B2898 MOV V13.16B, V0.16B
	0x031B289C MOV X20, X1
	0x031B28A0 MOV X19, X0
	0x031B28A4 TBNZ X8, 0x0, 0x31B28BC
	0x031B28A8 ADRP X0, 0xF43000
	0x031B28AC LDR X0, [X0 + 0x5A8]
	0x031B28B0 BL 0x1C16CF4
	0x031B28B4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X22+3736]
	010 Move X21, [X21+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3736], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {56}
	031 Move X1, X31
	032 Call LTDescr.setMoveCurvedLocal, X0
	033 Move X8, [X21]
	034 Move X8, [X8+184]
	035 Move [X8+136], X0
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Move X8, [X0+232]
	039 Move X1, X0
	040 Compare X8, 0
	041 JumpIfEqual {56}
	042 Move [X8+72], X19
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+8]
	049 Move S0, 1
	050 Move S1, W31
	051 Move S2, W31
	052 Move V3, V8
	053 Move V8, [X31+48]
	054 Call LeanTween.pushNewTween, X0, X1, V0, X2
	055 Return X0
	056 Call 0x1C17F20

Method: LTDescr moveLocal(UnityEngine.GameObject gameObject, LTSpline to, System.Single time)

Disassembly:
	0x031B28B8 STRB W8, [X21 + 0xEAF]
	0x031B28BC LDR X0, [X22]
	0x031B28C0 LDR W8, [X0 + 0xE0]
	0x031B28C4 CBNZ W8, 0x31B28CC
	0x031B28C8 BL 0x1C16DFC
	0x031B28CC BL 0x31AF454
	0x031B28D0 CBZ X0, 0x31B297C
	0x031B28D4 MOV X1, X31
	0x031B28D8 BL 0x31C0F84
	0x031B28DC CBZ X0, 0x31B297C
	0x031B28E0 MOV V0.16B, V8.16B
	0x031B28E4 MOV V1.16B, V15.16B
	0x031B28E8 MOV V2.16B, V14.16B
	0x031B28EC MOV X1, X31
	0x031B28F0 BL 0x31C8468
	0x031B28F4 CBZ X0, 0x31B297C
	0x031B28F8 MOV V0.16B, V13.16B
	0x031B28FC MOV V1.16B, V12.16B
	0x031B2900 MOV V2.16B, V11.16B
	0x031B2904 MOV X1, X31
	0x031B2908 BL 0x31C50A8
	0x031B290C CBZ X0, 0x31B297C
	0x031B2910 FMOV S0, W31
	0x031B2914 FMOV S2, W31
	0x031B2918 MOV V1.16B, V10.16B
	0x031B291C MOV X1, X31
	0x031B2920 BL 0x31C7D80
	0x031B2924 CBZ X0, 0x31B297C
	0x031B2928 MOV W1, W31
	0x031B292C MOV X2, X31
	0x031B2930 BL 0x31C7E5C
	0x031B2934 CBZ X0, 0x31B297C
	0x031B2938 MOV X1, X20
	0x031B293C MOV X2, X31
	0x031B2940 BL 0x31C8124
	0x031B2944 MOV X1, X0
	0x031B2948 MOV X0, X19
	0x031B294C LDR V1, [X31 + 0x4C]
	0x031B2950 MOV V3.16B, V9.16B
	0x031B2954 LDP X20, X19, [X31 + 0x60]
	0x031B2958 LDP X22, X21, [X31 + 0x50]
	0x031B295C LDR X30, [X31 + 0x40]
	0x031B2960 LDP D9, D8, [X31 + 0x30]
	0x031B2964 LDP D11, D10, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X22+3737]
	010 Move X21, [X21+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3737], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {56}
	031 Move X1, X31
	032 Call LTDescr.setMoveSplineLocal, X0
	033 Move X8, [X21]
	034 Move X8, [X8+184]
	035 Move [X8+136], X0
	036 Compare X0, 0
	037 JumpIfEqual {56}
	038 Move X8, [X0+232]
	039 Move X1, X0
	040 Compare X8, 0
	041 JumpIfEqual {56}
	042 Move [X8+80], X19
	043 Move X0, X20
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+8]
	049 Move S0, 1
	050 Move S1, W31
	051 Move S2, W31
	052 Move V3, V8
	053 Move V8, [X31+48]
	054 Call LeanTween.pushNewTween, X0, X1, V0, X2
	055 Return X0
	056 Call 0x1C17F20

Method: LTDescr move(UnityEngine.GameObject gameObject, UnityEngine.Transform to, System.Single time)

Disassembly:
	0x031B2968 LDP D13, D12, [X31 + 0x10]
	0x031B296C FMOV S0, 1
	0x031B2970 FMOV S2, W31
	0x031B2974 LDP D15, D14, [X31], #0x70
	0x031B2978 B 0x31AF81C
	0x031B297C BL 0x1C16F20
	0x031B2980 STP D15, D14, [X31 - 0x70]!
	0x031B2984 STP D13, D12, [X31 + 0x10]
	0x031B2988 STP D11, D10, [X31 + 0x20]
	0x031B298C STP D9, D8, [X31 + 0x30]
	0x031B2990 STR X30, [X31 + 0x40]
	0x031B2994 STP X22, X21, [X31 + 0x50]
	0x031B2998 STP X20, X19, [X31 + 0x60]
	0x031B299C STR S7, [X31 + 0x4C]
	0x031B29A0 ADRP X21, 0x1229000
	0x031B29A4 ADRP X22, 0xF43000
	0x031B29A8 LDRB W8, [X21 + 0xEB0]
	0x031B29AC LDR V9, [X31 + 0x70]
	0x031B29B0 LDR X22, [X22 + 0x5A8]
	0x031B29B4 MOV V14.16B, V6.16B
	0x031B29B8 MOV V15.16B, V5.16B
	0x031B29BC MOV V8.16B, V4.16B
	0x031B29C0 MOV V10.16B, V3.16B
	0x031B29C4 MOV V11.16B, V2.16B
	0x031B29C8 MOV V12.16B, V1.16B
	0x031B29CC MOV V13.16B, V0.16B
	0x031B29D0 MOV X20, X1
	0x031B29D4 MOV X19, X0
	0x031B29D8 TBNZ X8, 0x0, 0x31B29F0
	0x031B29DC ADRP X0, 0xF43000
	0x031B29E0 LDR X0, [X0 + 0x5A8]
	0x031B29E4 BL 0x1C16CF4
	0x031B29E8 MOVZ W8, 0x1
	0x031B29EC STRB W8, [X21 + 0xEB0]
	0x031B29F0 LDR X0, [X22]
	0x031B29F4 LDR W8, [X0 + 0xE0]
	0x031B29F8 CBNZ W8, 0x31B2A00
	0x031B29FC BL 0x1C16DFC
	0x031B2A00 BL 0x31AF454
	0x031B2A04 CBZ X0, 0x31B2AB0
	0x031B2A08 MOV X1, X31
	0x031B2A0C BL 0x31C0F84
	0x031B2A10 CBZ X0, 0x31B2AB0
	0x031B2A14 MOV V0.16B, V8.16B
	0x031B2A18 MOV V1.16B, V15.16B
	0x031B2A1C MOV V2.16B, V14.16B
	0x031B2A20 MOV X1, X31
	0x031B2A24 BL 0x31C8468
	0x031B2A28 CBZ X0, 0x31B2AB0
	0x031B2A2C MOV V0.16B, V13.16B
	0x031B2A30 MOV V1.16B, V12.16B
	0x031B2A34 MOV V2.16B, V11.16B
	0x031B2A38 MOV X1, X31
	0x031B2A3C BL 0x31C50A8
	0x031B2A40 CBZ X0, 0x31B2AB0
	0x031B2A44 FMOV S0, W31
	0x031B2A48 FMOV S2, W31

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x122A000
	011 Move W8, [X21+3738]
	012 Move V8, V0
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF44000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3738], W8
	024 Move X22, 0x1227000
	025 Move X21, 0xF44000
	026 Move W8, [X22+1923]
	027 Move X21, [X21+1448]
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0xF42000
	031 Move X0, [X0+1440]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+1923], W8
	035 Move X8, 0xF42000
	036 Move X8, [X8+1440]
	037 Move X0, [X21]
	038 Move X8, [X8]
	039 Move W9, [X0+224]
	040 Move X8, [X8+184]
	041 Move S11, [X8]
	042 Move S10, [X8+4]
	043 Move V9, [X8+8]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Call LeanTween.options
	048 Compare X0, 0
	049 JumpIfEqual {74}
	050 Move X1, X20
	051 Move X2, X31
	052 Call LTDescr.setTo, X0, X1
	053 Compare X0, 0
	054 JumpIfEqual {74}
	055 Move X1, X31
	056 Call LTDescr.setMoveToTransform, X0
	057 Move X1, X0
	058 Move X0, X19
	059 Move V2, V9
	060 Move V3, V8
	061 Move X20, [X31+64]
	062 Move X19, [X31+72]
	063 Move X22, [X31+48]
	064 Move X21, [X31+56]
	065 Move X30, [X31+32]
	066 Move D9, [X31+16]
	067 Move D8, [X31+24]
	068 Move V0, V11
	069 Move V1, V10
	070 Move D11, [X31+80]
	071 Move D10, [X31+88]
	072 Call LeanTween.pushNewTween, X0, X1, V0, X2
	073 Return X0
	074 Call 0x1C17F20

Method: LTDescr rotate(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B2A4C MOV V1.16B, V10.16B
	0x031B2A50 MOV X1, X31
	0x031B2A54 BL 0x31C7D80
	0x031B2A58 CBZ X0, 0x31B2AB0
	0x031B2A5C MOV W1, W31
	0x031B2A60 MOV X2, X31
	0x031B2A64 BL 0x31C7E5C
	0x031B2A68 CBZ X0, 0x31B2AB0
	0x031B2A6C MOV X1, X20
	0x031B2A70 MOV X2, X31
	0x031B2A74 BL 0x31C8148
	0x031B2A78 MOV X1, X0
	0x031B2A7C MOV X0, X19
	0x031B2A80 LDR V1, [X31 + 0x4C]
	0x031B2A84 MOV V3.16B, V9.16B
	0x031B2A88 LDP X20, X19, [X31 + 0x60]
	0x031B2A8C LDP X22, X21, [X31 + 0x50]
	0x031B2A90 LDR X30, [X31 + 0x40]
	0x031B2A94 LDP D9, D8, [X31 + 0x30]
	0x031B2A98 LDP D11, D10, [X31 + 0x20]
	0x031B2A9C LDP D13, D12, [X31 + 0x10]
	0x031B2AA0 FMOV S0, 1
	0x031B2AA4 FMOV S2, W31
	0x031B2AA8 LDP D15, D14, [X31], #0x70
	0x031B2AAC B 0x31AF81C
	0x031B2AB0 BL 0x1C16F20
	0x031B2AB4 STR D12, [X31 - 0x50]!
	0x031B2AB8 STP D11, D10, [X31 + 0x8]
	0x031B2ABC STP D9, D8, [X31 + 0x18]
	0x031B2AC0 STR X30, [X31 + 0x28]
	0x031B2AC4 STP X22, X21, [X31 + 0x30]
	0x031B2AC8 STP X20, X19, [X31 + 0x40]
	0x031B2ACC ADRP X21, 0x1229000
	0x031B2AD0 ADRP X22, 0xF43000
	0x031B2AD4 LDRB W8, [X21 + 0xEB1]
	0x031B2AD8 LDR X22, [X22 + 0x5A8]
	0x031B2ADC MOV V8.16B, V4.16B
	0x031B2AE0 MOV V9.16B, V3.16B
	0x031B2AE4 MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122A000
	010 Move X21, 0xF44000
	011 Move W8, [X20+3739]
	012 Move X21, [X21+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF44000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3739], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {53}
	035 Move X1, X31
	036 Call LTDescr.setRotate, X0
	037 Move X1, X0
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move V0, V11
	048 Move V1, V10
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.pushNewTween, X0, X1, V0, X2
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr rotate(LTRect ltRect, System.Single to, System.Single time)

Disassembly:
	0x031B2AE8 MOV V11.16B, V1.16B
	0x031B2AEC MOV V12.16B, V0.16B
	0x031B2AF0 MOV X20, X1
	0x031B2AF4 MOV X19, X0
	0x031B2AF8 TBNZ X8, 0x0, 0x31B2B10
	0x031B2AFC ADRP X0, 0xF43000
	0x031B2B00 LDR X0, [X0 + 0x5A8]
	0x031B2B04 BL 0x1C16CF4
	0x031B2B08 MOVZ W8, 0x1
	0x031B2B0C STRB W8, [X21 + 0xEB1]
	0x031B2B10 LDR X0, [X22]
	0x031B2B14 LDR W8, [X0 + 0xE0]
	0x031B2B18 CBNZ W8, 0x31B2B20
	0x031B2B1C BL 0x1C16DFC
	0x031B2B20 BL 0x31AF454
	0x031B2B24 CBZ X0, 0x31B2BA4
	0x031B2B28 MOV X1, X31
	0x031B2B2C BL 0x31C1B24
	0x031B2B30 CBZ X0, 0x31B2BA4
	0x031B2B34 FMOV S2, W31
	0x031B2B38 MOV V0.16B, V10.16B
	0x031B2B3C MOV V1.16B, V9.16B
	0x031B2B40 MOV X1, X31
	0x031B2B44 BL 0x31C7D34
	0x031B2B48 CBZ X0, 0x31B2BA4
	0x031B2B4C FMOV S2, W31
	0x031B2B50 MOV V0.16B, V12.16B
	0x031B2B54 MOV V1.16B, V11.16B
	0x031B2B58 MOV X1, X31
	0x031B2B5C BL 0x31C7D80
	0x031B2B60 CBZ X0, 0x31B2BA4
	0x031B2B64 MOV X1, X20
	0x031B2B68 MOV X2, X31
	0x031B2B6C BL 0x31C80DC
	0x031B2B70 MOV X1, X0
	0x031B2B74 MOV X0, X19
	0x031B2B78 MOV V0.16B, V10.16B
	0x031B2B7C MOV V1.16B, V9.16B
	0x031B2B80 MOV V3.16B, V8.16B
	0x031B2B84 LDP X20, X19, [X31 + 0x40]
	0x031B2B88 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3740]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3740], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.get_tweenEmpty
	029 Move X20, X0
	030 Call LeanTween.options
	031 Compare X0, 0
	032 JumpIfEqual {54}
	033 Move X1, X31
	034 Call LTDescr.setGUIRotate, X0
	035 Compare X0, 0
	036 JumpIfEqual {54}
	037 Move X1, X19
	038 Move X2, X31
	039 Call LTDescr.setRect, X0, X1
	040 Move X1, X0
	041 Move X0, X20
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+16]
	045 Move X21, [X31+24]
	046 Move S1, W31
	047 Move S2, W31
	048 Move V0, V9
	049 Move V3, V8
	050 Move D9, [X31+48]
	051 Move D8, [X31+56]
	052 Call LeanTween.pushNewTween, X0, X1, V0, X2
	053 Return X0
	054 Call 0x1C17F20

Method: LTDescr rotateLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B2B8C LDR X30, [X31 + 0x28]
	0x031B2B90 LDP D9, D8, [X31 + 0x18]
	0x031B2B94 LDP D11, D10, [X31 + 0x8]
	0x031B2B98 FMOV S2, W31
	0x031B2B9C LDR V12, [X31], #0x50
	0x031B2BA0 B 0x31AF81C
	0x031B2BA4 BL 0x1C16F20
	0x031B2BA8 STR D14, [X31 - 0x60]!
	0x031B2BAC STP D13, D12, [X31 + 0x8]
	0x031B2BB0 STP D11, D10, [X31 + 0x18]
	0x031B2BB4 STP D9, D8, [X31 + 0x28]
	0x031B2BB8 STR X30, [X31 + 0x38]
	0x031B2BBC STP X22, X21, [X31 + 0x40]
	0x031B2BC0 STP X20, X19, [X31 + 0x50]
	0x031B2BC4 ADRP X21, 0x1229000
	0x031B2BC8 ADRP X22, 0xF43000
	0x031B2BCC LDRB W8, [X21 + 0xEB2]
	0x031B2BD0 LDR X22, [X22 + 0x5A8]
	0x031B2BD4 MOV V8.16B, V6.16B
	0x031B2BD8 MOV V9.16B, V5.16B
	0x031B2BDC MOV V10.16B, V4.16B
	0x031B2BE0 MOV V11.16B, V3.16B
	0x031B2BE4 MOV V12.16B, V2.16B
	0x031B2BE8 MOV V13.16B, V1.16B
	0x031B2BEC MOV V14.16B, V0.16B
	0x031B2BF0 MOV X20, X1
	0x031B2BF4 MOV X19, X0
	0x031B2BF8 TBNZ X8, 0x0, 0x31B2C10
	0x031B2BFC ADRP X0, 0xF43000
	0x031B2C00 LDR X0, [X0 + 0x5A8]
	0x031B2C04 BL 0x1C16CF4
	0x031B2C08 MOVZ W8, 0x1
	0x031B2C0C STRB W8, [X21 + 0xEB2]
	0x031B2C10 LDR X0, [X22]
	0x031B2C14 LDR W8, [X0 + 0xE0]
	0x031B2C18 CBNZ W8, 0x31B2C20
	0x031B2C1C BL 0x1C16DFC
	0x031B2C20 BL 0x31AF454
	0x031B2C24 CBZ X0, 0x31B2CA8

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122A000
	010 Move X21, 0xF44000
	011 Move W8, [X20+3741]
	012 Move X21, [X21+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF44000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3741], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {53}
	035 Move X1, X31
	036 Call LTDescr.setRotateLocal, X0
	037 Move X1, X0
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move V0, V11
	048 Move V1, V10
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.pushNewTween, X0, X1, V0, X2
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr rotateX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B2C28 MOV X1, X31
	0x031B2C2C BL 0x31C1B24
	0x031B2C30 CBZ X0, 0x31B2CA8
	0x031B2C34 MOV V0.16B, V11.16B
	0x031B2C38 MOV V1.16B, V10.16B
	0x031B2C3C MOV V2.16B, V9.16B
	0x031B2C40 MOV X1, X31
	0x031B2C44 BL 0x31C7D34
	0x031B2C48 CBZ X0, 0x31B2CA8
	0x031B2C4C MOV V0.16B, V14.16B
	0x031B2C50 MOV V1.16B, V13.16B
	0x031B2C54 MOV V2.16B, V12.16B
	0x031B2C58 MOV X1, X31
	0x031B2C5C BL 0x31C7D80
	0x031B2C60 CBZ X0, 0x31B2CA8
	0x031B2C64 MOV X1, X20
	0x031B2C68 MOV X2, X31
	0x031B2C6C BL 0x31C8100
	0x031B2C70 MOV X1, X0
	0x031B2C74 MOV X0, X19
	0x031B2C78 MOV V0.16B, V11.16B
	0x031B2C7C MOV V1.16B, V10.16B
	0x031B2C80 MOV V2.16B, V9.16B
	0x031B2C84 MOV V3.16B, V8.16B
	0x031B2C88 LDP X20, X19, [X31 + 0x50]
	0x031B2C8C LDP X22, X21, [X31 + 0x40]
	0x031B2C90 LDR X30, [X31 + 0x38]
	0x031B2C94 LDP D9, D8, [X31 + 0x28]
	0x031B2C98 LDP D11, D10, [X31 + 0x18]
	0x031B2C9C LDP D13, D12, [X31 + 0x8]
	0x031B2CA0 LDR V14, [X31], #0x60
	0x031B2CA4 B 0x31AF81C
	0x031B2CA8 BL 0x1C16F20
	0x031B2CAC STR D10, [X31 - 0x40]!
	0x031B2CB0 STP D9, D8, [X31 + 0x8]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3742]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3742], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setRotateX, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr rotateY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B2CB4 STR X30, [X31 + 0x18]
	0x031B2CB8 STP X22, X21, [X31 + 0x20]
	0x031B2CBC STP X20, X19, [X31 + 0x30]
	0x031B2CC0 ADRP X21, 0x1229000
	0x031B2CC4 ADRP X22, 0xF43000
	0x031B2CC8 LDRB W8, [X21 + 0xEB3]
	0x031B2CCC LDR X22, [X22 + 0x5A8]
	0x031B2CD0 MOV V8.16B, V2.16B
	0x031B2CD4 MOV V9.16B, V1.16B
	0x031B2CD8 MOV V10.16B, V0.16B
	0x031B2CDC MOV X20, X1
	0x031B2CE0 MOV X19, X0
	0x031B2CE4 TBNZ X8, 0x0, 0x31B2CFC
	0x031B2CE8 ADRP X0, 0xF43000
	0x031B2CEC LDR X0, [X0 + 0x5A8]
	0x031B2CF0 BL 0x1C16CF4
	0x031B2CF4 MOVZ W8, 0x1
	0x031B2CF8 STRB W8, [X21 + 0xEB3]
	0x031B2CFC LDR X0, [X22]
	0x031B2D00 LDR W8, [X0 + 0xE0]
	0x031B2D04 CBNZ W8, 0x31B2D0C
	0x031B2D08 BL 0x1C16DFC
	0x031B2D0C BL 0x31AF454
	0x031B2D10 CBZ X0, 0x31B2D90
	0x031B2D14 MOV X1, X31
	0x031B2D18 BL 0x31C1A10
	0x031B2D1C CBZ X0, 0x31B2D90
	0x031B2D20 FMOV S1, W31
	0x031B2D24 FMOV S2, W31
	0x031B2D28 MOV V0.16B, V9.16B
	0x031B2D2C MOV X1, X31
	0x031B2D30 BL 0x31C7D34
	0x031B2D34 CBZ X0, 0x31B2D90
	0x031B2D38 FMOV S1, W31
	0x031B2D3C FMOV S2, W31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3743]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3743], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setRotateY, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr rotateZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B2D40 MOV V0.16B, V10.16B
	0x031B2D44 MOV X1, X31
	0x031B2D48 BL 0x31C7D80
	0x031B2D4C CBZ X0, 0x31B2D90
	0x031B2D50 MOV X1, X20
	0x031B2D54 MOV X2, X19
	0x031B2D58 MOV X3, X31
	0x031B2D5C BL 0x31C81B4
	0x031B2D60 MOV X1, X0
	0x031B2D64 MOV X0, X19
	0x031B2D68 MOV V0.16B, V9.16B
	0x031B2D6C MOV V3.16B, V8.16B
	0x031B2D70 LDP X20, X19, [X31 + 0x30]
	0x031B2D74 LDP X22, X21, [X31 + 0x20]
	0x031B2D78 LDR X30, [X31 + 0x18]
	0x031B2D7C LDP D9, D8, [X31 + 0x8]
	0x031B2D80 FMOV S1, W31
	0x031B2D84 FMOV S2, W31
	0x031B2D88 LDR V10, [X31], #0x40
	0x031B2D8C B 0x31AF81C
	0x031B2D90 BL 0x1C16F20
	0x031B2D94 STP D11, D10, [X31 - 0x40]!
	0x031B2D98 STP D9, D8, [X31 + 0x10]
	0x031B2D9C STP X30, X21, [X31 + 0x20]
	0x031B2DA0 STP X20, X19, [X31 + 0x30]
	0x031B2DA4 ADRP X20, 0x1229000
	0x031B2DA8 ADRP X21, 0xF43000
	0x031B2DAC LDRB W8, [X20 + 0xEB4]
	0x031B2DB0 LDR X21, [X21 + 0x5A8]
	0x031B2DB4 MOV V11.16B, V3.16B
	0x031B2DB8 MOV V8.16B, V2.16B
	0x031B2DBC MOV V9.16B, V1.16B
	0x031B2DC0 MOV V10.16B, V0.16B
	0x031B2DC4 MOV X19, X0
	0x031B2DC8 TBNZ X8, 0x0, 0x31B2DE0

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x122A000
	008 Move X21, 0xF44000
	009 Move W8, [X20+3744]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF44000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3744], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setRotateZ, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr rotateAround(UnityEngine.GameObject gameObject, UnityEngine.Vector3 axis, System.Single add, System.Single time)

Disassembly:
	0x031B2DCC ADRP X0, 0xF43000
	0x031B2DD0 LDR X0, [X0 + 0x5A8]
	0x031B2DD4 BL 0x1C16CF4
	0x031B2DD8 MOVZ W8, 0x1
	0x031B2DDC STRB W8, [X20 + 0xEB4]
	0x031B2DE0 LDR X0, [X21]
	0x031B2DE4 LDR W8, [X0 + 0xE0]
	0x031B2DE8 CBNZ W8, 0x31B2DF0
	0x031B2DEC BL 0x1C16DFC
	0x031B2DF0 BL 0x31AF7B4
	0x031B2DF4 MOV X20, X0
	0x031B2DF8 BL 0x31AF454
	0x031B2DFC CBZ X0, 0x31B2E74
	0x031B2E00 MOV X1, X31
	0x031B2E04 BL 0x31C23F4
	0x031B2E08 CBZ X0, 0x31B2E74
	0x031B2E0C MOV V0.16B, V10.16B
	0x031B2E10 MOV V1.16B, V9.16B
	0x031B2E14 MOV V2.16B, V8.16B
	0x031B2E18 MOV X1, X31
	0x031B2E1C BL 0x31C7D34
	0x031B2E20 CBZ X0, 0x31B2E74
	0x031B2E24 FMOV S1, W31
	0x031B2E28 FMOV S2, W31
	0x031B2E2C MOV V0.16B, V11.16B
	0x031B2E30 MOV X1, X31
	0x031B2E34 BL 0x31C7D80
	0x031B2E38 CBZ X0, 0x31B2E74
	0x031B2E3C MOV X1, X19
	0x031B2E40 MOV X2, X31
	0x031B2E44 BL 0x31C8494
	0x031B2E48 MOV X1, X0
	0x031B2E4C MOV X0, X20
	0x031B2E50 MOV V1.16B, V9.16B
	0x031B2E54 MOV V2.16B, V8.16B
	0x031B2E58 LDP X20, X19, [X31 + 0x30]
	0x031B2E5C LDP X30, X21, [X31 + 0x20]
	0x031B2E60 LDP D9, D8, [X31 + 0x10]
	0x031B2E64 FMOV S3, W31
	0x031B2E68 MOV V0.16B, V10.16B
	0x031B2E6C LDP D11, D10, [X31], #0x40
	0x031B2E70 B 0x31AF81C
	0x031B2E74 BL 0x1C16F20
	0x031B2E78 STP D11, D10, [X31 - 0x50]!
	0x031B2E7C STP D9, D8, [X31 + 0x10]
	0x031B2E80 STR X30, [X31 + 0x20]
	0x031B2E84 STP X22, X21, [X31 + 0x30]
	0x031B2E88 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x122A000
	011 Move X21, 0xF44000
	012 Move W8, [X20+3745]
	013 Move X21, [X21+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF44000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3745], W8
	029 Move X0, [X21]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {63}
	037 Move V0, V12
	038 Move V1, V11
	039 Move V2, V10
	040 Move X1, X31
	041 Call LTDescr.setAxis, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {63}
	044 Move X1, X31
	045 Call LTDescr.setRotateAround, X0
	046 Move X1, X0
	047 Move X0, X19
	048 Move V0, V9
	049 Move V3, V8
	050 Move X20, [X31+64]
	051 Move X19, [X31+72]
	052 Move X30, [X31+48]
	053 Move X21, [X31+56]
	054 Move D9, [X31+32]
	055 Move D8, [X31+40]
	056 Move D11, [X31+16]
	057 Move D10, [X31+24]
	058 Move S1, W31
	059 Move S2, W31
	060 Move V12, [X31+80]
	061 Call LeanTween.pushNewTween, X0, X1, V0, X2
	062 Return X0
	063 Call 0x1C17F20

Method: LTDescr rotateAroundLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3 axis, System.Single add, System.Single time)

Disassembly:
	0x031B2E8C ADRP X21, 0x1229000
	0x031B2E90 ADRP X22, 0xF43000
	0x031B2E94 LDRB W8, [X21 + 0xEB5]
	0x031B2E98 LDR X22, [X22 + 0x5A8]
	0x031B2E9C MOV V11.16B, V3.16B
	0x031B2EA0 MOV V8.16B, V2.16B
	0x031B2EA4 MOV V9.16B, V1.16B
	0x031B2EA8 MOV V10.16B, V0.16B
	0x031B2EAC MOV X20, X1
	0x031B2EB0 MOV X19, X0
	0x031B2EB4 TBNZ X8, 0x0, 0x31B2ECC
	0x031B2EB8 ADRP X0, 0xF43000
	0x031B2EBC LDR X0, [X0 + 0x5A8]
	0x031B2EC0 BL 0x1C16CF4
	0x031B2EC4 MOVZ W8, 0x1
	0x031B2EC8 STRB W8, [X21 + 0xEB5]
	0x031B2ECC LDR X0, [X22]
	0x031B2ED0 LDR W8, [X0 + 0xE0]
	0x031B2ED4 CBNZ W8, 0x31B2EDC
	0x031B2ED8 BL 0x1C16DFC
	0x031B2EDC BL 0x31AF454
	0x031B2EE0 CBZ X0, 0x31B2F5C
	0x031B2EE4 MOV X1, X31
	0x031B2EE8 BL 0x31C23F4
	0x031B2EEC CBZ X0, 0x31B2F5C
	0x031B2EF0 MOV V0.16B, V10.16B
	0x031B2EF4 MOV V1.16B, V9.16B
	0x031B2EF8 MOV V2.16B, V8.16B
	0x031B2EFC MOV X1, X31
	0x031B2F00 BL 0x31C7D34
	0x031B2F04 CBZ X0, 0x31B2F5C
	0x031B2F08 FMOV S1, W31
	0x031B2F0C FMOV S2, W31
	0x031B2F10 MOV V0.16B, V11.16B
	0x031B2F14 MOV X1, X31
	0x031B2F18 BL 0x31C7D80
	0x031B2F1C CBZ X0, 0x31B2F5C
	0x031B2F20 MOV X1, X20
	0x031B2F24 MOV X2, X31
	0x031B2F28 BL 0x31C8494
	0x031B2F2C MOV X1, X0
	0x031B2F30 MOV X0, X19
	0x031B2F34 MOV V1.16B, V9.16B
	0x031B2F38 MOV V2.16B, V8.16B
	0x031B2F3C LDP X20, X19, [X31 + 0x40]
	0x031B2F40 LDP X22, X21, [X31 + 0x30]
	0x031B2F44 LDR X30, [X31 + 0x20]
	0x031B2F48 LDP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x122A000
	011 Move X21, 0xF44000
	012 Move W8, [X20+3746]
	013 Move X21, [X21+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF44000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3746], W8
	029 Move X0, [X21]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {63}
	037 Move X1, X31
	038 Call LTDescr.setRotateAroundLocal, X0
	039 Compare X0, 0
	040 JumpIfEqual {63}
	041 Move V0, V12
	042 Move V1, V11
	043 Move V2, V10
	044 Move X1, X31
	045 Call LTDescr.setAxis, X0, X1
	046 Move X1, X0
	047 Move X0, X19
	048 Move V0, V9
	049 Move V3, V8
	050 Move X20, [X31+64]
	051 Move X19, [X31+72]
	052 Move X30, [X31+48]
	053 Move X21, [X31+56]
	054 Move D9, [X31+32]
	055 Move D8, [X31+40]
	056 Move D11, [X31+16]
	057 Move D10, [X31+24]
	058 Move S1, W31
	059 Move S2, W31
	060 Move V12, [X31+80]
	061 Call LeanTween.pushNewTween, X0, X1, V0, X2
	062 Return X0
	063 Call 0x1C17F20

Method: LTDescr scale(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B2F4C FMOV S3, W31
	0x031B2F50 MOV V0.16B, V10.16B
	0x031B2F54 LDP D11, D10, [X31], #0x50
	0x031B2F58 B 0x31AF81C
	0x031B2F5C BL 0x1C16F20
	0x031B2F60 STP D11, D10, [X31 - 0x40]!
	0x031B2F64 STP D9, D8, [X31 + 0x10]
	0x031B2F68 STR X30, [X31 + 0x20]
	0x031B2F6C STP X20, X19, [X31 + 0x30]
	0x031B2F70 ADRP X20, 0x1229000
	0x031B2F74 LDRB W8, [X20 + 0xEB6]
	0x031B2F78 MOV V8.16B, V3.16B
	0x031B2F7C MOV V9.16B, V2.16B
	0x031B2F80 MOV V10.16B, V1.16B
	0x031B2F84 MOV V11.16B, V0.16B
	0x031B2F88 MOV X19, X0
	0x031B2F8C TBNZ X8, 0x0, 0x31B2FA4
	0x031B2F90 ADRP X0, 0xF43000
	0x031B2F94 LDR X0, [X0 + 0x5A8]
	0x031B2F98 BL 0x1C16CF4
	0x031B2F9C MOVZ W8, 0x1
	0x031B2FA0 STRB W8, [X20 + 0xEB6]
	0x031B2FA4 CBZ X19, 0x31B3020
	0x031B2FA8 ADRP X20, 0xF43000
	0x031B2FAC LDR X20, [X20 + 0x5A8]
	0x031B2FB0 MOV X0, X19
	0x031B2FB4 MOV X1, X31
	0x031B2FB8 BL 0x3C32ECC
	0x031B2FBC LDR X8, [X20]
	0x031B2FC0 MOV X20, X0
	0x031B2FC4 LDR W9, [X8 + 0xE0]
	0x031B2FC8 CBNZ W9, 0x31B2FD4
	0x031B2FCC MOV X0, X8
	0x031B2FD0 BL 0x1C16DFC
	0x031B2FD4 BL 0x31AF454
	0x031B2FD8 CBZ X0, 0x31B3020
	0x031B2FDC MOV X1, X31
	0x031B2FE0 BL 0x31C177C
	0x031B2FE4 CBZ X0, 0x31B3020

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x122A000
	010 Move X21, 0xF44000
	011 Move W8, [X20+3747]
	012 Move X21, [X21+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF44000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3747], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {53}
	035 Move X1, X31
	036 Call LTDescr.setScale, X0
	037 Move X1, X0
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move V0, V11
	048 Move V1, V10
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.pushNewTween, X0, X1, V0, X2
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr scale(LTRect ltRect, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031B2FE8 MOV X1, X19
	0x031B2FEC MOV X2, X31
	0x031B2FF0 BL 0x31C84BC
	0x031B2FF4 MOV X1, X0
	0x031B2FF8 MOV X0, X20
	0x031B2FFC MOV V2.16B, V9.16B
	0x031B3000 MOV V3.16B, V8.16B
	0x031B3004 LDP X20, X19, [X31 + 0x30]
	0x031B3008 LDR X30, [X31 + 0x20]
	0x031B300C LDP D9, D8, [X31 + 0x10]
	0x031B3010 MOV V0.16B, V11.16B
	0x031B3014 MOV V1.16B, V10.16B
	0x031B3018 LDP D11, D10, [X31], #0x40
	0x031B301C B 0x31AF81C
	0x031B3020 BL 0x1C16F20
	0x031B3024 STP D9, D8, [X31 - 0x30]!
	0x031B3028 STR X30, [X31 + 0x10]
	0x031B302C STP X20, X19, [X31 + 0x20]
	0x031B3030 ADRP X20, 0x1228000
	0x031B3034 LDRB W8, [X20 + 0xEB7]
	0x031B3038 MOV V8.16B, V1.16B
	0x031B303C MOV V9.16B, V0.16B
	0x031B3040 MOV X19, X0
	0x031B3044 TBNZ X8, 0x0, 0x31B305C
	0x031B3048 ADRP X0, 0xF42000
	0x031B304C LDR X0, [X0 + 0x5A8]
	0x031B3050 BL 0x1C16CF4
	0x031B3054 MOVZ W8, 0x1
	0x031B3058 STRB W8, [X20 + 0xEB7]
	0x031B305C CBZ X19, 0x31B30D4
	0x031B3060 ADRP X20, 0xF42000
	0x031B3064 LDR X20, [X20 + 0x5A8]
	0x031B3068 MOV X0, X19
	0x031B306C MOV X1, X31
	0x031B3070 BL 0x3C32ECC
	0x031B3074 LDR X8, [X20]
	0x031B3078 MOV X20, X0
	0x031B307C LDR W9, [X8 + 0xE0]
	0x031B3080 CBNZ W9, 0x31B308C
	0x031B3084 MOV X0, X8
	0x031B3088 BL 0x1C16DFC
	0x031B308C BL 0x31AF454
	0x031B3090 CBZ X0, 0x31B30D4
	0x031B3094 MOV X1, X31

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x122A000
	009 Move X21, 0xF44000
	010 Move W8, [X20+3748]
	011 Call 0x3EB2884
	012 Return X0
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF43000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3748], W8
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Call LeanTween.get_tweenEmpty
	032 Move X20, X0
	033 Call LeanTween.options
	034 Compare X0, 0
	035 JumpIfEqual {58}
	036 Move X1, X31
	037 Call LTDescr.setGUIScale, X0
	038 Compare X0, 0
	039 JumpIfEqual {58}
	040 Move X1, X19
	041 Move X2, X31
	042 Call LTDescr.setRect, X0, X1
	043 Move X1, X0
	044 Move X0, X20
	045 Move V1, V9
	046 Move V3, V8
	047 Move X20, [X31+48]
	048 Move X19, [X31+56]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Move D9, [X31+16]
	052 Move D8, [X31+24]
	053 Move S2, W31
	054 Move V0, V10
	055 Move V10, [X31+64]
	056 Call LeanTween.pushNewTween, X0, X1, V0, X2
	057 Return X0
	058 Call 0x1C17F20

Method: LTDescr scaleX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B3098 BL 0x31C1308
	0x031B309C CBZ X0, 0x31B30D4
	0x031B30A0 MOV X1, X19
	0x031B30A4 MOV X2, X31
	0x031B30A8 BL 0x31C84BC
	0x031B30AC MOV X1, X0
	0x031B30B0 MOV X0, X20
	0x031B30B4 LDP X20, X19, [X31 + 0x20]
	0x031B30B8 LDR X30, [X31 + 0x10]
	0x031B30BC FMOV S1, W31
	0x031B30C0 FMOV S2, W31
	0x031B30C4 MOV V0.16B, V9.16B
	0x031B30C8 MOV V3.16B, V8.16B
	0x031B30CC LDP D9, D8, [X31], #0x30
	0x031B30D0 B 0x31AF81C
	0x031B30D4 BL 0x1C16F20
	0x031B30D8 STP D9, D8, [X31 - 0x30]!
	0x031B30DC STR X30, [X31 + 0x10]
	0x031B30E0 STP X20, X19, [X31 + 0x20]
	0x031B30E4 ADRP X20, 0x1228000
	0x031B30E8 LDRB W8, [X20 + 0xEB8]
	0x031B30EC MOV V8.16B, V1.16B
	0x031B30F0 MOV V9.16B, V0.16B
	0x031B30F4 MOV X19, X0
	0x031B30F8 TBNZ X8, 0x0, 0x31B3110
	0x031B30FC ADRP X0, 0xF42000
	0x031B3100 LDR X0, [X0 + 0x5A8]
	0x031B3104 BL 0x1C16CF4
	0x031B3108 MOVZ W8, 0x1
	0x031B310C STRB W8, [X20 + 0xEB8]
	0x031B3110 CBZ X19, 0x31B3188
	0x031B3114 ADRP X20, 0xF42000
	0x031B3118 LDR X20, [X20 + 0x5A8]
	0x031B311C MOV X0, X19
	0x031B3120 MOV X1, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1229000
	008 Move X21, 0xF43000
	009 Move W8, [X20+3749]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF43000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3749], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setScaleX, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr scaleY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B3124 BL 0x3C32ECC
	0x031B3128 LDR X8, [X20]
	0x031B312C MOV X20, X0
	0x031B3130 LDR W9, [X8 + 0xE0]
	0x031B3134 CBNZ W9, 0x31B3140
	0x031B3138 MOV X0, X8
	0x031B313C BL 0x1C16DFC
	0x031B3140 BL 0x31AF454
	0x031B3144 CBZ X0, 0x31B3188
	0x031B3148 MOV X1, X31
	0x031B314C BL 0x31C13BC
	0x031B3150 CBZ X0, 0x31B3188
	0x031B3154 MOV X1, X19
	0x031B3158 MOV X2, X31
	0x031B315C BL 0x31C84BC
	0x031B3160 MOV X1, X0
	0x031B3164 MOV X0, X20
	0x031B3168 LDP X20, X19, [X31 + 0x20]
	0x031B316C LDR X30, [X31 + 0x10]
	0x031B3170 FMOV S1, W31
	0x031B3174 FMOV S2, W31
	0x031B3178 MOV V0.16B, V9.16B
	0x031B317C MOV V3.16B, V8.16B
	0x031B3180 LDP D9, D8, [X31], #0x30
	0x031B3184 B 0x31AF81C
	0x031B3188 BL 0x1C16F20
	0x031B318C STP D9, D8, [X31 - 0x30]!
	0x031B3190 STR X30, [X31 + 0x10]
	0x031B3194 STP X20, X19, [X31 + 0x20]
	0x031B3198 ADRP X20, 0x1228000
	0x031B319C LDRB W8, [X20 + 0xEB9]
	0x031B31A0 MOV V8.16B, V1.16B
	0x031B31A4 MOV V9.16B, V0.16B
	0x031B31A8 MOV X19, X0
	0x031B31AC TBNZ X8, 0x0, 0x31B31C4

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1229000
	008 Move X21, 0xF43000
	009 Move W8, [X20+3750]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF43000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3750], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setScaleY, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr scaleZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031B31B0 ADRP X0, 0xF42000
	0x031B31B4 LDR X0, [X0 + 0x5A8]
	0x031B31B8 BL 0x1C16CF4
	0x031B31BC MOVZ W8, 0x1
	0x031B31C0 STRB W8, [X20 + 0xEB9]
	0x031B31C4 CBZ X19, 0x31B323C
	0x031B31C8 ADRP X20, 0xF42000
	0x031B31CC LDR X20, [X20 + 0x5A8]
	0x031B31D0 MOV X0, X19
	0x031B31D4 MOV X1, X31
	0x031B31D8 BL 0x3C32ECC
	0x031B31DC LDR X8, [X20]
	0x031B31E0 MOV X20, X0
	0x031B31E4 LDR W9, [X8 + 0xE0]
	0x031B31E8 CBNZ W9, 0x31B31F4
	0x031B31EC MOV X0, X8
	0x031B31F0 BL 0x1C16DFC
	0x031B31F4 BL 0x31AF454
	0x031B31F8 CBZ X0, 0x31B323C
	0x031B31FC MOV X1, X31
	0x031B3200 BL 0x31C1470
	0x031B3204 CBZ X0, 0x31B323C
	0x031B3208 MOV X1, X19
	0x031B320C MOV X2, X31
	0x031B3210 BL 0x31C84BC
	0x031B3214 MOV X1, X0
	0x031B3218 MOV X0, X20
	0x031B321C LDP X20, X19, [X31 + 0x20]
	0x031B3220 LDR X30, [X31 + 0x10]
	0x031B3224 FMOV S1, W31
	0x031B3228 FMOV S2, W31
	0x031B322C MOV V0.16B, V9.16B
	0x031B3230 MOV V3.16B, V8.16B
	0x031B3234 LDP D9, D8, [X31], #0x30
	0x031B3238 B 0x31AF81C

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1229000
	008 Move X21, 0xF43000
	009 Move W8, [X20+3751]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF43000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3751], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.options
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call LTDescr.setScaleZ, X0
	033 Move X1, X0
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move V3, V8
	043 Move D9, [X31+48]
	044 Move D8, [X31+56]
	045 Call LeanTween.pushNewTween, X0, X1, V0, X2
	046 Return X0
	047 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031B323C BL 0x1C16F20
	0x031B3240 STP D9, D8, [X31 - 0x30]!
	0x031B3244 STP X30, X21, [X31 + 0x10]
	0x031B3248 STP X20, X19, [X31 + 0x20]
	0x031B324C ADRP X19, 0x1228000
	0x031B3250 LDRB W8, [X19 + 0xEBA]
	0x031B3254 MOV V8.16B, V1.16B
	0x031B3258 MOV V9.16B, V0.16B
	0x031B325C MOV X20, X0
	0x031B3260 TBNZ X8, 0x0, 0x31B3278
	0x031B3264 ADRP X0, 0xF42000
	0x031B3268 LDR X0, [X0 + 0x5A8]
	0x031B326C BL 0x1C16CF4
	0x031B3270 MOVZ W8, 0x1
	0x031B3274 STRB W8, [X19 + 0xEBA]
	0x031B3278 CBZ X20, 0x31B333C
	0x031B327C ADRP X19, 0xF42000
	0x031B3280 LDR X19, [X19 + 0x5A8]
	0x031B3284 MOV X0, X20
	0x031B3288 MOV X1, X31
	0x031B328C BL 0x3C32ECC
	0x031B3290 LDR X8, [X19]
	0x031B3294 MOV X19, X0
	0x031B3298 LDR W9, [X8 + 0xE0]
	0x031B329C CBNZ W9, 0x31B32A8
	0x031B32A0 MOV X0, X8
	0x031B32A4 BL 0x1C16DFC
	0x031B32A8 BL 0x31AF454
	0x031B32AC CBZ X0, 0x31B333C
	0x031B32B0 MOV X1, X31
	0x031B32B4 BL 0x31C1560
	0x031B32B8 CBZ X0, 0x31B333C
	0x031B32BC MOV X1, X20
	0x031B32C0 MOV X2, X31
	0x031B32C4 BL 0x31C84BC
	0x031B32C8 ADRP X21, 0x1225000
	0x031B32CC LDRB W8, [X21 + 0xA1F]
	0x031B32D0 MOV X20, X0
	0x031B32D4 CBNZ W8, 0x31B32EC
	0x031B32D8 ADRP X0, 0xF40000
	0x031B32DC LDR X0, [X0 + 0x5A0]
	0x031B32E0 BL 0x1C16CF4
	0x031B32E4 MOVZ W8, 0x1
	0x031B32E8 STRB W8, [X21 + 0xA1F]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1229000
	009 Move X21, 0xF43000
	010 Move W8, [X20+3752]
	011 Move X21, [X21+1448]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF43000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3752], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Call LeanTween.options
	031 Compare X0, 0
	032 JumpIfEqual {57}
	033 Move X1, X31
	034 Call LTDescr.setCallback, X0
	035 Compare X0, 0
	036 JumpIfEqual {57}
	037 Move S1, W31
	038 Move S2, W31
	039 Move V0, V10
	040 Move X1, X31
	041 Call LTDescr.setFrom, X0, X1
	042 Move X1, X0
	043 Move X0, X19
	044 Move V0, V9
	045 Move V3, V8
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Move D9, [X31+16]
	051 Move D8, [X31+24]
	052 Move S1, W31
	053 Move S2, W31
	054 Move V10, [X31+64]
	055 Call LeanTween.pushNewTween, X0, X1, V0, X2
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr value(System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031B32EC CBZ X20, 0x31B333C
	0x031B32F0 ADRP X8, 0xF40000
	0x031B32F4 LDR X8, [X8 + 0x5A0]
	0x031B32F8 MOV X0, X20
	0x031B32FC MOV X1, X31
	0x031B3300 LDR X8, [X8]
	0x031B3304 LDR X8, [X8 + 0xB8]
	0x031B3308 LDP S1, S2, [X8 + 0x4C]
	0x031B330C LDR V0, [X8 + 0x48]
	0x031B3310 BL 0x31C50A8
	0x031B3314 MOV X1, X0
	0x031B3318 MOV X0, X19
	0x031B331C LDP X20, X19, [X31 + 0x20]
	0x031B3320 LDP X30, X21, [X31 + 0x10]
	0x031B3324 FMOV S1, W31
	0x031B3328 FMOV S2, W31
	0x031B332C MOV V0.16B, V9.16B
	0x031B3330 MOV V3.16B, V8.16B
	0x031B3334 LDP D9, D8, [X31], #0x30
	0x031B3338 B 0x31AF81C
	0x031B333C BL 0x1C16F20
	0x031B3340 STP D11, D10, [X31 - 0x40]!
	0x031B3344 STP D9, D8, [X31 + 0x10]
	0x031B3348 STP X30, X21, [X31 + 0x20]
	0x031B334C STP X20, X19, [X31 + 0x30]
	0x031B3350 ADRP X19, 0x1228000
	0x031B3354 LDRB W8, [X19 + 0xEBB]
	0x031B3358 MOV V8.16B, V3.16B
	0x031B335C MOV V9.16B, V2.16B
	0x031B3360 MOV V10.16B, V1.16B
	0x031B3364 MOV V11.16B, V0.16B
	0x031B3368 MOV X20, X0
	0x031B336C TBNZ X8, 0x0, 0x31B3384
	0x031B3370 ADRP X0, 0xF42000
	0x031B3374 LDR X0, [X0 + 0x5A8]
	0x031B3378 BL 0x1C16CF4
	0x031B337C MOVZ W8, 0x1
	0x031B3380 STRB W8, [X19 + 0xEBB]
	0x031B3384 CBZ X20, 0x31B344C
	0x031B3388 ADRP X19, 0xF42000
	0x031B338C LDR X19, [X19 + 0x5A8]
	0x031B3390 MOV X0, X20
	0x031B3394 MOV X1, X31
	0x031B3398 BL 0x3C32ECC
	0x031B339C LDR X8, [X19]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x1229000
	008 Move X20, 0xF43000
	009 Move W8, [X19+3753]
	010 Move X20, [X20+1448]
	011 Move V8, V2
	012 Move V9, V1
	013 Move V10, V0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF43000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X19+3753], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Call LeanTween.get_tweenEmpty
	029 Move X19, X0
	030 Call LeanTween.options
	031 Compare X0, 0
	032 JumpIfEqual {56}
	033 Move X1, X31
	034 Call LTDescr.setCallback, X0
	035 Compare X0, 0
	036 JumpIfEqual {56}
	037 Move S1, W31
	038 Move S2, W31
	039 Move V0, V10
	040 Move X1, X31
	041 Call LTDescr.setFrom, X0, X1
	042 Move X1, X0
	043 Move X0, X19
	044 Move V0, V9
	045 Move V3, V8
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+24]
	049 Move D9, [X31+8]
	050 Move D8, [X31+16]
	051 Move S1, W31
	052 Move S2, W31
	053 Move V10, [X31+48]
	054 Call LeanTween.pushNewTween, X0, X1, V0, X2
	055 Return X0
	056 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, UnityEngine.Vector2 from, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031B33A0 MOV X19, X0
	0x031B33A4 LDR W9, [X8 + 0xE0]
	0x031B33A8 CBNZ W9, 0x31B33B4
	0x031B33AC MOV X0, X8
	0x031B33B0 BL 0x1C16DFC
	0x031B33B4 BL 0x31AF454
	0x031B33B8 CBZ X0, 0x31B344C
	0x031B33BC MOV X1, X31
	0x031B33C0 BL 0x31C1560
	0x031B33C4 CBZ X0, 0x31B344C
	0x031B33C8 MOV X1, X20
	0x031B33CC MOV X2, X31
	0x031B33D0 BL 0x31C84BC
	0x031B33D4 ADRP X21, 0x1225000
	0x031B33D8 LDRB W8, [X21 + 0xA1F]
	0x031B33DC MOV X20, X0
	0x031B33E0 CBNZ W8, 0x31B33F8
	0x031B33E4 ADRP X0, 0xF40000
	0x031B33E8 LDR X0, [X0 + 0x5A0]
	0x031B33EC BL 0x1C16CF4
	0x031B33F0 MOVZ W8, 0x1
	0x031B33F4 STRB W8, [X21 + 0xA1F]
	0x031B33F8 CBZ X20, 0x31B344C
	0x031B33FC ADRP X8, 0xF40000
	0x031B3400 LDR X8, [X8 + 0x5A0]
	0x031B3404 MOV X0, X20
	0x031B3408 MOV X1, X31
	0x031B340C LDR X8, [X8]
	0x031B3410 LDR X8, [X8 + 0xB8]
	0x031B3414 LDP S1, S2, [X8 + 0x4C]
	0x031B3418 LDR V0, [X8 + 0x48]
	0x031B341C BL 0x31C50A8
	0x031B3420 MOV X1, X0
	0x031B3424 MOV X0, X19
	0x031B3428 MOV V2.16B, V9.16B
	0x031B342C MOV V3.16B, V8.16B
	0x031B3430 LDP X20, X19, [X31 + 0x30]
	0x031B3434 LDP X30, X21, [X31 + 0x20]
	0x031B3438 LDP D9, D8, [X31 + 0x10]
	0x031B343C MOV V0.16B, V11.16B
	0x031B3440 MOV V1.16B, V10.16B
	0x031B3444 LDP D11, D10, [X31], #0x40
	0x031B3448 B 0x31AF81C
	0x031B344C BL 0x1C16F20
	0x031B3450 STR D12, [X31 - 0x40]!
	0x031B3454 STP D11, D10, [X31 + 0x8]
	0x031B3458 STP D9, D8, [X31 + 0x18]
	0x031B345C STR X30, [X31 + 0x28]
	0x031B3460 STP X20, X19, [X31 + 0x30]
	0x031B3464 ADRP X19, 0x1228000
	0x031B3468 LDRB W8, [X19 + 0xEBC]
	0x031B346C MOV V8.16B, V4.16B
	0x031B3470 MOV V9.16B, V3.16B
	0x031B3474 MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x1229000
	011 Move X21, 0xF43000
	012 Move W8, [X20+3754]
	013 Move X21, [X21+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF43000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+3754], W8
	029 Move X0, [X21]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {70}
	037 Move X1, X31
	038 Call LTDescr.setValue3, X0
	039 Compare X0, 0
	040 JumpIfEqual {70}
	041 Move S2, W31
	042 Move V0, V10
	043 Move V1, V9
	044 Move X1, X31
	045 Call LTDescr.setTo, X0, X1
	046 Compare X0, 0
	047 JumpIfEqual {70}
	048 Move S2, W31
	049 Move V0, V12
	050 Move V1, V11
	051 Move X1, X31
	052 Call LTDescr.setFrom, X0, X1
	053 Move X1, X0
	054 Move X0, X19
	055 Move V0, V10
	056 Move V1, V9
	057 Move V3, V8
	058 Move X20, [X31+64]
	059 Move X19, [X31+72]
	060 Move X30, [X31+48]
	061 Move X21, [X31+56]
	062 Move D9, [X31+32]
	063 Move D8, [X31+40]
	064 Move D11, [X31+16]
	065 Move D10, [X31+24]
	066 Move S2, W31
	067 Move V12, [X31+80]
	068 Call LeanTween.pushNewTween, X0, X1, V0, X2
	069 Return X0
	070 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B3478 MOV V11.16B, V1.16B
	0x031B347C MOV V12.16B, V0.16B
	0x031B3480 MOV X20, X0
	0x031B3484 TBNZ X8, 0x0, 0x31B349C
	0x031B3488 ADRP X0, 0xF42000
	0x031B348C LDR X0, [X0 + 0x5A8]
	0x031B3490 BL 0x1C16CF4
	0x031B3494 MOVZ W8, 0x1
	0x031B3498 STRB W8, [X19 + 0xEBC]
	0x031B349C CBZ X20, 0x31B3534
	0x031B34A0 ADRP X19, 0xF42000
	0x031B34A4 LDR X19, [X19 + 0x5A8]
	0x031B34A8 MOV X0, X20
	0x031B34AC MOV X1, X31
	0x031B34B0 BL 0x3C32ECC
	0x031B34B4 LDR X8, [X19]
	0x031B34B8 MOV X19, X0
	0x031B34BC LDR W9, [X8 + 0xE0]
	0x031B34C0 CBNZ W9, 0x31B34CC
	0x031B34C4 MOV X0, X8
	0x031B34C8 BL 0x1C16DFC
	0x031B34CC BL 0x31AF454
	0x031B34D0 CBZ X0, 0x31B3534
	0x031B34D4 MOV X1, X31
	0x031B34D8 BL 0x31C1560
	0x031B34DC CBZ X0, 0x31B3534
	0x031B34E0 MOV X1, X20
	0x031B34E4 MOV X2, X31
	0x031B34E8 BL 0x31C84BC
	0x031B34EC CBZ X0, 0x31B3534
	0x031B34F0 MOV V0.16B, V12.16B
	0x031B34F4 MOV V1.16B, V11.16B
	0x031B34F8 MOV V2.16B, V10.16B
	0x031B34FC MOV X1, X31
	0x031B3500 BL 0x31C50A8
	0x031B3504 MOV X1, X0
	0x031B3508 MOV X0, X19
	0x031B350C MOV V0.16B, V9.16B
	0x031B3510 MOV V3.16B, V8.16B
	0x031B3514 LDP X20, X19, [X31 + 0x30]
	0x031B3518 LDR X30, [X31 + 0x28]
	0x031B351C LDP D9, D8, [X31 + 0x18]
	0x031B3520 LDP D11, D10, [X31 + 0x8]
	0x031B3524 FMOV S1, W31
	0x031B3528 FMOV S2, W31
	0x031B352C LDR V12, [X31], #0x40
	0x031B3530 B 0x31AF81C
	0x031B3534 BL 0x1C16F20
	0x031B3538 STR D12, [X31 - 0x40]!
	0x031B353C STP D11, D10, [X31 + 0x8]
	0x031B3540 STP D9, D8, [X31 + 0x18]
	0x031B3544 STR X30, [X31 + 0x28]

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x1229000
	013 Move X21, 0xF43000
	014 Move W8, [X20+3755]
	015 Move X21, [X21+1448]
	016 Move V8, V6
	017 Move V9, V5
	018 Move V10, V4
	019 Move V11, V3
	020 Move V12, V2
	021 Move V13, V1
	022 Move V14, V0
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0xF43000
	029 Move X0, [X0+1448]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+3755], W8
	033 Move X0, [X21]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Call LeanTween.options
	039 Compare X0, 0
	040 JumpIfEqual {69}
	041 Move X1, X31
	042 Call LTDescr.setValue3, X0
	043 Compare X0, 0
	044 JumpIfEqual {69}
	045 Move V0, V14
	046 Move V1, V13
	047 Move V2, V12
	048 Move X1, X31
	049 Call LTDescr.setFrom, X0, X1
	050 Move X1, X0
	051 Move X0, X19
	052 Move V0, V11
	053 Move V1, V10
	054 Move V2, V9
	055 Move V3, V8
	056 Move X20, [X31+80]
	057 Move X19, [X31+88]
	058 Move X30, [X31+64]
	059 Move X21, [X31+72]
	060 Move D9, [X31+48]
	061 Move D8, [X31+56]
	062 Move D11, [X31+32]
	063 Move D10, [X31+40]
	064 Move D13, [X31+16]
	065 Move D12, [X31+24]
	066 Move V14, [X31+96]
	067 Call LeanTween.pushNewTween, X0, X1, V0, X2
	068 Return X0
	069 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, UnityEngine.Color from, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031B3548 STP X20, X19, [X31 + 0x30]
	0x031B354C ADRP X19, 0x1228000
	0x031B3550 LDRB W8, [X19 + 0xEBD]
	0x031B3554 MOV V8.16B, V4.16B
	0x031B3558 MOV V9.16B, V3.16B
	0x031B355C MOV V10.16B, V2.16B
	0x031B3560 MOV V11.16B, V1.16B
	0x031B3564 MOV V12.16B, V0.16B
	0x031B3568 MOV X20, X0
	0x031B356C TBNZ X8, 0x0, 0x31B3584
	0x031B3570 ADRP X0, 0xF42000
	0x031B3574 LDR X0, [X0 + 0x5A8]
	0x031B3578 BL 0x1C16CF4
	0x031B357C MOVZ W8, 0x1
	0x031B3580 STRB W8, [X19 + 0xEBD]
	0x031B3584 CBZ X20, 0x31B361C
	0x031B3588 ADRP X19, 0xF42000
	0x031B358C LDR X19, [X19 + 0x5A8]
	0x031B3590 MOV X0, X20
	0x031B3594 MOV X1, X31
	0x031B3598 BL 0x3C32ECC
	0x031B359C LDR X8, [X19]
	0x031B35A0 MOV X19, X0
	0x031B35A4 LDR W9, [X8 + 0xE0]
	0x031B35A8 CBNZ W9, 0x31B35B4
	0x031B35AC MOV X0, X8
	0x031B35B0 BL 0x1C16DFC
	0x031B35B4 BL 0x31AF454
	0x031B35B8 CBZ X0, 0x31B361C
	0x031B35BC MOV X1, X31
	0x031B35C0 BL 0x31C1614
	0x031B35C4 CBZ X0, 0x31B361C
	0x031B35C8 MOV X1, X20
	0x031B35CC MOV X2, X31
	0x031B35D0 BL 0x31C84BC
	0x031B35D4 CBZ X0, 0x31B361C
	0x031B35D8 MOV V0.16B, V12.16B
	0x031B35DC MOV V1.16B, V11.16B
	0x031B35E0 MOV V2.16B, V10.16B
	0x031B35E4 MOV X1, X31
	0x031B35E8 BL 0x31C50A8
	0x031B35EC MOV X1, X0
	0x031B35F0 MOV X0, X19
	0x031B35F4 MOV V0.16B, V9.16B
	0x031B35F8 MOV V3.16B, V8.16B
	0x031B35FC LDP X20, X19, [X31 + 0x30]
	0x031B3600 LDR X30, [X31 + 0x28]
	0x031B3604 LDP D9, D8, [X31 + 0x18]
	0x031B3608 LDP D11, D10, [X31 + 0x8]
	0x031B360C FMOV S1, W31
	0x031B3610 FMOV S2, W31
	0x031B3614 LDR V12, [X31], #0x40
	0x031B3618 B 0x31AF81C
	0x031B361C BL 0x1C16F20
	0x031B3620 STP D11, D10, [X31 - 0x40]!
	0x031B3624 STP D9, D8, [X31 + 0x10]
	0x031B3628 STR X30, [X31 + 0x20]
	0x031B362C STP X20, X19, [X31 + 0x30]
	0x031B3630 ADRP X20, 0x1228000
	0x031B3634 LDRB W8, [X20 + 0xEBE]
	0x031B3638 MOV V8.16B, V3.16B
	0x031B363C MOV V9.16B, V2.16B
	0x031B3640 MOV V10.16B, V1.16B
	0x031B3644 MOV V11.16B, V0.16B
	0x031B3648 MOV X19, X0
	0x031B364C TBNZ X8, 0x0, 0x31B3664
	0x031B3650 ADRP X0, 0xF42000
	0x031B3654 LDR X0, [X0 + 0x5A8]
	0x031B3658 BL 0x1C16CF4
	0x031B365C MOVZ W8, 0x1
	0x031B3660 STRB W8, [X20 + 0xEBE]
	0x031B3664 CBZ X19, 0x31B36E0
	0x031B3668 ADRP X20, 0xF42000
	0x031B366C LDR X20, [X20 + 0x5A8]
	0x031B3670 MOV X0, X19
	0x031B3674 MOV X1, X31
	0x031B3678 BL 0x3C32ECC
	0x031B367C LDR X8, [X20]
	0x031B3680 MOV X20, X0

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x1229000
	014 Move X21, 0xF43000
	015 Move W8, [X20+3756]
	016 Move X21, [X21+1448]
	017 Move V8, V7
	018 Move V13, V6
	019 Move V14, V5
	020 Move V15, V4
	021 Move V9, V3
	022 Move V10, V2
	023 Move V11, V1
	024 Move V12, V0
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {38}
	030 Move X0, 0xF6D000
	031 Move X0, [X0+1000]
	032 Call 0x1C17CF4
	033 Move X0, 0xF43000
	034 Move X0, [X0+1448]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+3756], W8
	038 Move X0, [X21]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Call LeanTween.options
	044 Compare X0, 0
	045 JumpIfEqual {101}
	046 Move X1, X31
	047 Call LTDescr.setCallbackColor, X0
	048 Compare X0, 0
	049 JumpIfEqual {101}
	050 Move V0, V15
	051 Move V1, V14
	052 Move V2, V13
	053 Move X1, X31
	054 Call LTDescr.setPoint, X0, X1
	055 Compare X0, 0
	056 JumpIfEqual {101}
	057 Move V0, V12
	058 Move V1, V11
	059 Move V2, V10
	060 Move V3, V9
	061 Move X1, X31
	062 Call LTDescr.setFromColor, X0, X1
	063 Compare X0, 0
	064 JumpIfEqual {101}
	065 Move V9, [X31+96]
	066 Move W1, W31
	067 Move X2, X31
	068 Call LTDescr.setHasInitialized, X0, X1
	069 Move X1, X0
	070 Move S0, 1
	071 Move S2, W31
	072 Move X0, X19
	073 Move V1, V8
	074 Move V3, V9
	075 Call LeanTween.pushNewTween, X0, X1, V0, X2
	076 Compare X19, 0
	077 JumpIfEqual {101}
	078 Move X8, 0xF6D000
	079 Move X8, [X8+1000]
	080 Move X20, X0
	081 Move X0, X19
	082 Move X1, [X8]
	083 Call 0x21E62E4, X0
	084 Compare X20, 0
	085 JumpIfEqual {101}
	086 Move [X20+184], X0
	087 Move X0, X20
	088 Move X20, [X31+80]
	089 Move X19, [X31+88]
	090 Move X30, [X31+64]
	091 Move X21, [X31+72]
	092 Move D9, [X31+48]
	093 Move D8, [X31+56]
	094 Move D11, [X31+32]
	095 Move D10, [X31+40]
	096 Move D13, [X31+16]
	097 Move D12, [X31+24]
	098 Move D15, [X31+96]
	099 Move D14, [X31+104]
	100 Return X0
	101 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, System.Action`1<System.Single> callOnUpdate, System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031B3684 LDR W9, [X8 + 0xE0]
	0x031B3688 CBNZ W9, 0x31B3694
	0x031B368C MOV X0, X8
	0x031B3690 BL 0x1C16DFC
	0x031B3694 BL 0x31AF454
	0x031B3698 CBZ X0, 0x31B36E0
	0x031B369C MOV X1, X31
	0x031B36A0 BL 0x31C1830
	0x031B36A4 CBZ X0, 0x31B36E0
	0x031B36A8 MOV X1, X19
	0x031B36AC MOV X2, X31
	0x031B36B0 BL 0x31C84BC
	0x031B36B4 MOV X1, X0
	0x031B36B8 MOV X0, X20
	0x031B36BC MOV V2.16B, V9.16B
	0x031B36C0 MOV V3.16B, V8.16B
	0x031B36C4 LDP X20, X19, [X31 + 0x30]
	0x031B36C8 LDR X30, [X31 + 0x20]
	0x031B36CC LDP D9, D8, [X31 + 0x10]
	0x031B36D0 MOV V0.16B, V11.16B
	0x031B36D4 MOV V1.16B, V10.16B
	0x031B36D8 LDP D11, D10, [X31], #0x40
	0x031B36DC B 0x31AF81C
	0x031B36E0 BL 0x1C16F20
	0x031B36E4 STR D10, [X31 - 0x30]!
	0x031B36E8 STP D9, D8, [X31 + 0x8]
	0x031B36EC STR X30, [X31 + 0x18]
	0x031B36F0 STP X20, X19, [X31 + 0x20]
	0x031B36F4 ADRP X20, 0x1228000
	0x031B36F8 LDRB W8, [X20 + 0xEBF]
	0x031B36FC MOV V8.16B, V2.16B
	0x031B3700 MOV V9.16B, V1.16B
	0x031B3704 MOV V10.16B, V0.16B
	0x031B3708 MOV X19, X0
	0x031B370C TBNZ X8, 0x0, 0x31B3724
	0x031B3710 ADRP X0, 0xF42000
	0x031B3714 LDR X0, [X0 + 0x5A8]
	0x031B3718 BL 0x1C16CF4
	0x031B371C MOVZ W8, 0x1
	0x031B3720 STRB W8, [X20 + 0xEBF]
	0x031B3724 CBZ X19, 0x31B37A0
	0x031B3728 ADRP X20, 0xF42000
	0x031B372C LDR X20, [X20 + 0x5A8]
	0x031B3730 MOV X0, X19
	0x031B3734 MOV X1, X31
	0x031B3738 BL 0x3C32ECC
	0x031B373C LDR X8, [X20]
	0x031B3740 MOV X20, X0
	0x031B3744 LDR W9, [X8 + 0xE0]
	0x031B3748 CBNZ W9, 0x31B3754
	0x031B374C MOV X0, X8
	0x031B3750 BL 0x1C16DFC
	0x031B3754 BL 0x31AF454
	0x031B3758 CBZ X0, 0x31B37A0
	0x031B375C MOV X1, X31
	0x031B3760 BL 0x31C18E4
	0x031B3764 CBZ X0, 0x31B37A0

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x1229000
	010 Move X22, 0xF43000
	011 Move W8, [X21+3757]
	012 Move X22, [X22+1448]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF43000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3757], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {72}
	035 Move X1, X31
	036 Call LTDescr.setCallback, X0
	037 Compare X0, 0
	038 JumpIfEqual {72}
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move X1, X31
	043 Call LTDescr.setTo, X0, X1
	044 Compare X0, 0
	045 JumpIfEqual {72}
	046 Move S1, W31
	047 Move S2, W31
	048 Move V0, V10
	049 Move X1, X31
	050 Call LTDescr.setFrom, X0, X1
	051 Compare X0, 0
	052 JumpIfEqual {72}
	053 Move X1, X20
	054 Move X2, X31
	055 Call LTDescr.setOnUpdate, X0, X1
	056 Move X1, X0
	057 Move X0, X19
	058 Move V0, V9
	059 Move V3, V8
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X30, [X31+24]
	065 Move D9, [X31+8]
	066 Move D8, [X31+16]
	067 Move S1, W31
	068 Move S2, W31
	069 Move V10, [X31+64]
	070 Call LeanTween.pushNewTween, X0, X1, V0, X2
	071 Return X0
	072 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, System.Action`2<System.Single, System.Single> callOnUpdateRatio, System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031B3768 MOV X1, X19
	0x031B376C MOV X2, X31
	0x031B3770 BL 0x31C84BC
	0x031B3774 MOV X1, X0
	0x031B3778 MOV X0, X20
	0x031B377C MOV V1.16B, V9.16B
	0x031B3780 MOV V3.16B, V8.16B
	0x031B3784 LDP X20, X19, [X31 + 0x20]
	0x031B3788 LDR X30, [X31 + 0x18]
	0x031B378C LDP D9, D8, [X31 + 0x8]
	0x031B3790 FMOV S2, W31
	0x031B3794 MOV V0.16B, V10.16B
	0x031B3798 LDR V10, [X31], #0x30
	0x031B379C B 0x31AF81C
	0x031B37A0 BL 0x1C16F20
	0x031B37A4 STP D9, D8, [X31 - 0x30]!
	0x031B37A8 STR X30, [X31 + 0x10]
	0x031B37AC STP X20, X19, [X31 + 0x20]
	0x031B37B0 ADRP X20, 0x1228000
	0x031B37B4 LDRB W8, [X20 + 0xEC0]
	0x031B37B8 MOV V8.16B, V1.16B
	0x031B37BC MOV V9.16B, V0.16B
	0x031B37C0 MOV X19, X0
	0x031B37C4 TBNZ X8, 0x0, 0x31B37DC
	0x031B37C8 ADRP X0, 0xF42000
	0x031B37CC LDR X0, [X0 + 0x5A8]
	0x031B37D0 BL 0x1C16CF4
	0x031B37D4 MOVZ W8, 0x1
	0x031B37D8 STRB W8, [X20 + 0xEC0]
	0x031B37DC CBZ X19, 0x31B3854
	0x031B37E0 ADRP X20, 0xF42000
	0x031B37E4 LDR X20, [X20 + 0x5A8]
	0x031B37E8 MOV X0, X19
	0x031B37EC MOV X1, X31
	0x031B37F0 BL 0x3C32ECC
	0x031B37F4 LDR X8, [X20]
	0x031B37F8 MOV X20, X0
	0x031B37FC LDR W9, [X8 + 0xE0]
	0x031B3800 CBNZ W9, 0x31B380C
	0x031B3804 MOV X0, X8
	0x031B3808 BL 0x1C16DFC
	0x031B380C BL 0x31AF454
	0x031B3810 CBZ X0, 0x31B3854
	0x031B3814 MOV X1, X31
	0x031B3818 BL 0x31C10EC
	0x031B381C CBZ X0, 0x31B3854
	0x031B3820 MOV X1, X19
	0x031B3824 MOV X2, X31
	0x031B3828 BL 0x31C84BC
	0x031B382C MOV X1, X0
	0x031B3830 MOV X0, X20
	0x031B3834 LDP X20, X19, [X31 + 0x20]
	0x031B3838 LDR X30, [X31 + 0x10]
	0x031B383C FMOV S1, W31
	0x031B3840 FMOV S2, W31
	0x031B3844 MOV V0.16B, V9.16B
	0x031B3848 MOV V3.16B, V8.16B

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x1229000
	010 Move X22, 0xF43000
	011 Move W8, [X21+3758]
	012 Move X22, [X22+1448]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF43000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3758], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {72}
	035 Move X1, X31
	036 Call LTDescr.setCallback, X0
	037 Compare X0, 0
	038 JumpIfEqual {72}
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move X1, X31
	043 Call LTDescr.setTo, X0, X1
	044 Compare X0, 0
	045 JumpIfEqual {72}
	046 Move S1, W31
	047 Move S2, W31
	048 Move V0, V10
	049 Move X1, X31
	050 Call LTDescr.setFrom, X0, X1
	051 Compare X0, 0
	052 JumpIfEqual {72}
	053 Move X1, X20
	054 Move X2, X31
	055 Call LTDescr.setOnUpdateRatio, X0, X1
	056 Move X1, X0
	057 Move X0, X19
	058 Move V0, V9
	059 Move V3, V8
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X30, [X31+24]
	065 Move D9, [X31+8]
	066 Move D8, [X31+16]
	067 Move S1, W31
	068 Move S2, W31
	069 Move V10, [X31+64]
	070 Call LeanTween.pushNewTween, X0, X1, V0, X2
	071 Return X0
	072 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Color> callOnUpdate, UnityEngine.Color from, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031B384C LDP D9, D8, [X31], #0x30
	0x031B3850 B 0x31AF81C
	0x031B3854 BL 0x1C16F20
	0x031B3858 STR D12, [X31 - 0x40]!
	0x031B385C STP D11, D10, [X31 + 0x8]
	0x031B3860 STP D9, D8, [X31 + 0x18]
	0x031B3864 STR X30, [X31 + 0x28]
	0x031B3868 STP X20, X19, [X31 + 0x30]
	0x031B386C ADRP X19, 0x1228000
	0x031B3870 LDRB W8, [X19 + 0xEC1]
	0x031B3874 MOV V8.16B, V4.16B
	0x031B3878 MOV V9.16B, V3.16B
	0x031B387C MOV V10.16B, V2.16B
	0x031B3880 MOV V11.16B, V1.16B
	0x031B3884 MOV V12.16B, V0.16B
	0x031B3888 MOV X20, X0
	0x031B388C TBNZ X8, 0x0, 0x31B38A4
	0x031B3890 ADRP X0, 0xF42000
	0x031B3894 LDR X0, [X0 + 0x5A8]
	0x031B3898 BL 0x1C16CF4
	0x031B389C MOVZ W8, 0x1
	0x031B38A0 STRB W8, [X19 + 0xEC1]
	0x031B38A4 CBZ X20, 0x31B393C
	0x031B38A8 ADRP X19, 0xF42000
	0x031B38AC LDR X19, [X19 + 0x5A8]
	0x031B38B0 MOV X0, X20
	0x031B38B4 MOV X1, X31
	0x031B38B8 BL 0x3C32ECC
	0x031B38BC LDR X8, [X19]
	0x031B38C0 MOV X19, X0
	0x031B38C4 LDR W9, [X8 + 0xE0]
	0x031B38C8 CBNZ W9, 0x31B38D4
	0x031B38CC MOV X0, X8
	0x031B38D0 BL 0x1C16DFC
	0x031B38D4 BL 0x31AF454
	0x031B38D8 CBZ X0, 0x31B393C
	0x031B38DC MOV X1, X31
	0x031B38E0 BL 0x31C1254
	0x031B38E4 CBZ X0, 0x31B393C
	0x031B38E8 MOV X1, X20
	0x031B38EC MOV X2, X31
	0x031B38F0 BL 0x31C84BC
	0x031B38F4 CBZ X0, 0x31B393C
	0x031B38F8 MOV V0.16B, V12.16B
	0x031B38FC MOV V1.16B, V11.16B
	0x031B3900 MOV V2.16B, V10.16B
	0x031B3904 MOV X1, X31
	0x031B3908 BL 0x31C8468
	0x031B390C MOV X1, X0
	0x031B3910 MOV X0, X19
	0x031B3914 MOV V1.16B, V9.16B
	0x031B3918 MOV V3.16B, V8.16B
	0x031B391C LDP X20, X19, [X31 + 0x30]
	0x031B3920 LDR X30, [X31 + 0x28]
	0x031B3924 LDP D9, D8, [X31 + 0x18]
	0x031B3928 LDP D11, D10, [X31 + 0x8]
	0x031B392C FMOV S0, 1
	0x031B3930 FMOV S2, W31
	0x031B3934 LDR V12, [X31], #0x40
	0x031B3938 B 0x31AF81C
	0x031B393C BL 0x1C16F20
	0x031B3940 STP D9, D8, [X31 - 0x20]!
	0x031B3944 STR X30, [X31 + 0x10]
	0x031B3948 CBZ X0, 0x31B3984
	0x031B394C LDR X8, [X0 + 0xE8]
	0x031B3950 CBZ X8, 0x31B3984
	0x031B3954 LDR X8, [X8 + 0x58]
	0x031B3958 CBZ X8, 0x31B3984
	0x031B395C LDR V8, [X0 + 0x60]
	0x031B3960 LDR V9, [X0 + 0x78]
	0x031B3964 MOV X0, X8
	0x031B3968 MOV X1, X31
	0x031B396C BL 0x3C00CC4
	0x031B3970 LDR X30, [X31 + 0x10]
	0x031B3974 FMUL S0, S9, S0
	0x031B3978 FADD S0, S8, S0
	0x031B397C LDP D9, D8, [X31], #0x20

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+76], S7
	015 Move X21, 0x1229000
	016 Move X22, 0xF43000
	017 Move W8, [X21+3759]
	018 Move V9, [X31+112]
	019 Move X22, [X22+1448]
	020 Move V14, V6
	021 Move V15, V5
	022 Move V8, V4
	023 Move V10, V3
	024 Move V11, V2
	025 Move V12, V1
	026 Move V13, V0
	027 Move X20, X1
	028 Move X19, X0
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {38}
	033 Move X0, 0xF43000
	034 Move X0, [X0+1448]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+3759], W8
	038 Move X0, [X22]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Call LeanTween.options
	044 Compare X0, 0
	045 JumpIfEqual {100}
	046 Move X1, X31
	047 Call LTDescr.setCallbackColor, X0
	048 Compare X0, 0
	049 JumpIfEqual {100}
	050 Move V0, V8
	051 Move V1, V15
	052 Move V2, V14
	053 Move X1, X31
	054 Call LTDescr.setPoint, X0, X1
	055 Compare X0, 0
	056 JumpIfEqual {100}
	057 Move V0, V13
	058 Move V1, V12
	059 Move V2, V11
	060 Move X1, X31
	061 Call LTDescr.setAxis, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {100}
	064 Move S0, W31
	065 Move S2, W31
	066 Move V1, V10
	067 Move X1, X31
	068 Call LTDescr.setFrom, X0, X1
	069 Compare X0, 0
	070 JumpIfEqual {100}
	071 Move W1, W31
	072 Move X2, X31
	073 Call LTDescr.setHasInitialized, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {100}
	076 Move X1, X20
	077 Move X2, X31
	078 Call LTDescr.setOnUpdateColor, X0, X1
	079 Move X1, X0
	080 Move X0, X19
	081 Move V1, [X31+76]
	082 Move V3, V9
	083 Move X20, [X31+96]
	084 Move X19, [X31+104]
	085 Move X22, [X31+80]
	086 Move X21, [X31+88]
	087 Move X30, [X31+64]
	088 Move D9, [X31+48]
	089 Move D8, [X31+56]
	090 Move D11, [X31+32]
	091 Move D10, [X31+40]
	092 Move D13, [X31+16]
	093 Move D12, [X31+24]
	094 Move S0, 1
	095 Move S2, W31
	096 Move D15, [X31+112]
	097 Move D14, [X31+120]
	098 Call LeanTween.pushNewTween, X0, X1, V0, X2
	099 Return X0
	100 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, System.Action`2<UnityEngine.Color, System.Object> callOnUpdate, UnityEngine.Color from, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031B3980 RET
	0x031B3984 BL 0x1C16F20
	0x031B3988 SUB X31, X31, 0x60
	0x031B398C STP D15, D14, [X31 + 0x10]
	0x031B3990 STP D13, D12, [X31 + 0x20]
	0x031B3994 STP D11, D10, [X31 + 0x30]
	0x031B3998 STP D9, D8, [X31 + 0x40]
	0x031B399C STP X30, X19, [X31 + 0x50]
	0x031B39A0 CBZ X0, 0x31B3A5C
	0x031B39A4 LDR X8, [X0 + 0xE8]
	0x031B39A8 MOV X19, X0
	0x031B39AC CBZ X8, 0x31B3A5C
	0x031B39B0 LDR X0, [X8 + 0x58]
	0x031B39B4 CBZ X0, 0x31B3A5C
	0x031B39B8 LDR V11, [X19 + 0x60]
	0x031B39BC LDR V12, [X19 + 0x78]
	0x031B39C0 MOV X1, X31
	0x031B39C4 MOV V8.16B, V0.16B
	0x031B39C8 BL 0x3C00CC4
	0x031B39CC LDR X8, [X19 + 0xE8]
	0x031B39D0 CBZ X8, 0x31B3A5C
	0x031B39D4 LDR X0, [X8 + 0x58]
	0x031B39D8 CBZ X0, 0x31B3A5C
	0x031B39DC LDR V14, [X19 + 0x64]
	0x031B39E0 LDR V10, [X19 + 0x7C]
	0x031B39E4 MOV V9.16B, V0.16B
	0x031B39E8 MOV V0.16B, V8.16B
	0x031B39EC MOV X1, X31
	0x031B39F0 BL 0x3C00CC4
	0x031B39F4 LDR X8, [X19 + 0xE8]
	0x031B39F8 CBZ X8, 0x31B3A5C
	0x031B39FC LDR X0, [X8 + 0x58]
	0x031B3A00 STR S14, [X31 + 0xC]
	0x031B3A04 CBZ X0, 0x31B3A5C
	0x031B3A08 MOV V14.16B, V11.16B
	0x031B3A0C LDR V15, [X19 + 0x68]
	0x031B3A10 LDR V11, [X19 + 0x80]
	0x031B3A14 MOV V13.16B, V0.16B
	0x031B3A18 MOV V0.16B, V8.16B
	0x031B3A1C MOV X1, X31
	0x031B3A20 BL 0x3C00CC4
	0x031B3A24 FMUL S1, S12, S9
	0x031B3A28 FMUL S3, S11, S0
	0x031B3A2C FADD S0, S14, S1
	0x031B3A30 LDR V1, [X31 + 0xC]
	0x031B3A34 FMUL S2, S10, S13
	0x031B3A38 LDP X30, X19, [X31 + 0x50]
	0x031B3A3C LDP D9, D8, [X31 + 0x40]
	0x031B3A40 FADD S1, S1, S2
	0x031B3A44 FADD S2, S15, S3
	0x031B3A48 LDP D11, D10, [X31 + 0x30]
	0x031B3A4C LDP D13, D12, [X31 + 0x20]
	0x031B3A50 LDP D15, D14, [X31 + 0x10]
	0x031B3A54 ADD X31, X31, 0x60
	0x031B3A58 RET
	0x031B3A5C BL 0x1C16F20
	0x031B3A60 FMOV S3, -2
	0x031B3A64 FMUL S1, S1, S2
	0x031B3A68 FADD S2, S2, S3
	0x031B3A6C FMUL S1, S1, S2
	0x031B3A70 FSUB S0, S0, S1
	0x031B3A74 RET
	0x031B3A78 FMUL S1, S1, S2
	0x031B3A7C FMUL S1, S1, S2
	0x031B3A80 FADD S0, S1, S0
	0x031B3A84 RET
	0x031B3A88 FADD S2, S2, S2
	0x031B3A8C FMOV S3, 1
	0x031B3A90 FCMP S2, S3
	0x031B3A94 B.PL 0x31B3AAC
	0x031B3A98 FMOV S3, 0.5
	0x031B3A9C FMUL S1, S1, S3
	0x031B3AA0 FMUL S1, S1, S2
	0x031B3AA4 FMUL S1, S2, S1
	0x031B3AA8 B 0x31B3AD0
	0x031B3AAC FMOV S3, -1
	0x031B3AB0 FMOV S4, -0.5

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move [X31+76], S7
	015 Move X21, 0x1229000
	016 Move X22, 0xF43000
	017 Move W8, [X21+3760]
	018 Move V9, [X31+112]
	019 Move X22, [X22+1448]
	020 Move V14, V6
	021 Move V15, V5
	022 Move V8, V4
	023 Move V10, V3
	024 Move V11, V2
	025 Move V12, V1
	026 Move V13, V0
	027 Move X20, X1
	028 Move X19, X0
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {38}
	033 Move X0, 0xF43000
	034 Move X0, [X0+1448]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+3760], W8
	038 Move X0, [X22]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Call LeanTween.options
	044 Compare X0, 0
	045 JumpIfEqual {100}
	046 Move X1, X31
	047 Call LTDescr.setCallbackColor, X0
	048 Compare X0, 0
	049 JumpIfEqual {100}
	050 Move V0, V8
	051 Move V1, V15
	052 Move V2, V14
	053 Move X1, X31
	054 Call LTDescr.setPoint, X0, X1
	055 Compare X0, 0
	056 JumpIfEqual {100}
	057 Move V0, V13
	058 Move V1, V12
	059 Move V2, V11
	060 Move X1, X31
	061 Call LTDescr.setAxis, X0, X1
	062 Compare X0, 0
	063 JumpIfEqual {100}
	064 Move S0, W31
	065 Move S2, W31
	066 Move V1, V10
	067 Move X1, X31
	068 Call LTDescr.setFrom, X0, X1
	069 Compare X0, 0
	070 JumpIfEqual {100}
	071 Move W1, W31
	072 Move X2, X31
	073 Call LTDescr.setHasInitialized, X0, X1
	074 Compare X0, 0
	075 JumpIfEqual {100}
	076 Move X1, X20
	077 Move X2, X31
	078 Call LTDescr.setOnUpdateColor, X0, X1
	079 Move X1, X0
	080 Move X0, X19
	081 Move V1, [X31+76]
	082 Move V3, V9
	083 Move X20, [X31+96]
	084 Move X19, [X31+104]
	085 Move X22, [X31+80]
	086 Move X21, [X31+88]
	087 Move X30, [X31+64]
	088 Move D9, [X31+48]
	089 Move D8, [X31+56]
	090 Move D11, [X31+32]
	091 Move D10, [X31+40]
	092 Move D13, [X31+16]
	093 Move D12, [X31+24]
	094 Move S0, 1
	095 Move S2, W31
	096 Move D15, [X31+112]
	097 Move D14, [X31+120]
	098 Call LeanTween.pushNewTween, X0, X1, V0, X2
	099 Return X0
	100 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Vector2> callOnUpdate, UnityEngine.Vector2 from, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031B3AB4 FADD S2, S2, S3
	0x031B3AB8 FMUL S1, S1, S4
	0x031B3ABC FMOV S4, -2
	0x031B3AC0 FADD S4, S2, S4
	0x031B3AC4 FMUL S2, S2, S4
	0x031B3AC8 FADD S2, S2, S3
	0x031B3ACC FMUL S1, S1, S2
	0x031B3AD0 FADD S0, S1, S0
	0x031B3AD4 RET
	0x031B3AD8 FADD S6, S6, S6
	0x031B3ADC FMOV S7, 1
	0x031B3AE0 FCMP S6, S7
	0x031B3AE4 B.PL 0x31B3B20
	0x031B3AE8 FMOV S7, 0.5
	0x031B3AEC FMUL S3, S3, S7
	0x031B3AF0 FMUL S4, S4, S7
	0x031B3AF4 FMUL S5, S5, S7
	0x031B3AF8 FMUL S3, S3, S6
	0x031B3AFC FMUL S4, S4, S6
	0x031B3B00 FMUL S5, S5, S6
	0x031B3B04 FMUL S3, S6, S3
	0x031B3B08 FMUL S4, S6, S4
	0x031B3B0C FMUL S5, S6, S5
	0x031B3B10 FADD S0, S0, S3
	0x031B3B14 FADD S1, S1, S4
	0x031B3B18 FADD S2, S2, S5
	0x031B3B1C RET
	0x031B3B20 FMOV S7, -1
	0x031B3B24 FMOV S16, 0.5
	0x031B3B28 FMUL S3, S3, S16
	0x031B3B2C FMUL S4, S4, S16
	0x031B3B30 FMUL S5, S5, S16
	0x031B3B34 FMOV S16, -2
	0x031B3B38 FADD S6, S6, S7
	0x031B3B3C FADD S16, S6, S16
	0x031B3B40 FMUL S6, S6, S16
	0x031B3B44 FADD S6, S6, S7
	0x031B3B48 FMUL S3, S3, S6
	0x031B3B4C FMUL S4, S4, S6
	0x031B3B50 FMUL S5, S5, S6
	0x031B3B54 FSUB S0, S0, S3
	0x031B3B58 FSUB S1, S1, S4
	0x031B3B5C FSUB S2, S2, S5
	0x031B3B60 RET
	0x031B3B64 FMOV S3, 1
	0x031B3B68 FCMP S2, 0x0
	0x031B3B6C FMOV S4, W31
	0x031B3B70 FMIN S2, S2, S3
	0x031B3B74 FCSEL S2, S2, S4, PL
	0x031B3B78 FSUB S1, S1, S0
	0x031B3B7C FMUL S1, S1, S2
	0x031B3B80 FADD S0, S1, S0
	0x031B3B84 RET
	0x031B3B88 MOVZ W8, 0xC3340000
	0x031B3B8C FSUB S3, S1, S0
	0x031B3B90 FMOV S4, W8
	0x031B3B94 FCMP S3, S4
	0x031B3B98 B.PL 0x31B3BB4
	0x031B3B9C MOVZ W8, 0x43B40000
	0x031B3BA0 FMOV S3, W8
	0x031B3BA4 FSUB S3, S3, S0

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x1229000
	012 Move X22, 0xF43000
	013 Move W8, [X21+3761]
	014 Move X22, [X22+1448]
	015 Move V8, V4
	016 Move V9, V3
	017 Move V10, V2
	018 Move V11, V1
	019 Move V12, V0
	020 Move X20, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xF43000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+3761], W8
	031 Move X0, [X22]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Call LeanTween.options
	037 Compare X0, 0
	038 JumpIfEqual {78}
	039 Move X1, X31
	040 Call LTDescr.setValue3, X0
	041 Compare X0, 0
	042 JumpIfEqual {78}
	043 Move S2, W31
	044 Move V0, V10
	045 Move V1, V9
	046 Move X1, X31
	047 Call LTDescr.setTo, X0, X1
	048 Compare X0, 0
	049 JumpIfEqual {78}
	050 Move S2, W31
	051 Move V0, V12
	052 Move V1, V11
	053 Move X1, X31
	054 Call LTDescr.setFrom, X0, X1
	055 Compare X0, 0
	056 JumpIfEqual {78}
	057 Move X1, X20
	058 Move X2, X31
	059 Call LTDescr.setOnUpdateVector2, X0, X1
	060 Move X1, X0
	061 Move X0, X19
	062 Move V0, V10
	063 Move V1, V9
	064 Move V3, V8
	065 Move X20, [X31+64]
	066 Move X19, [X31+72]
	067 Move X22, [X31+48]
	068 Move X21, [X31+56]
	069 Move X30, [X31+40]
	070 Move D9, [X31+24]
	071 Move D8, [X31+32]
	072 Move D11, [X31+8]
	073 Move D10, [X31+16]
	074 Move S2, W31
	075 Move V12, [X31+80]
	076 Call LeanTween.pushNewTween, X0, X1, V0, X2
	077 Return X0
	078 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Vector3> callOnUpdate, UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B3BA8 FADD S1, S3, S1
	0x031B3BAC FMUL S1, S1, S2
	0x031B3BB0 B 0x31B3BE4
	0x031B3BB4 MOVZ W8, 0x43340000
	0x031B3BB8 FMOV S4, W8
	0x031B3BBC FCMP S3, S4
	0x031B3BC0 B.LE 0x31B3BE0
	0x031B3BC4 MOVZ W8, 0x43B40000
	0x031B3BC8 FMOV S3, W8
	0x031B3BCC FSUB S1, S3, S1
	0x031B3BD0 FADD S1, S1, S0
	0x031B3BD4 FMUL S1, S1, S2
	0x031B3BD8 FSUB S0, S0, S1
	0x031B3BDC RET
	0x031B3BE0 FMUL S1, S3, S2
	0x031B3BE4 FADD S0, S1, S0
	0x031B3BE8 RET
	0x031B3BEC STP D13, D12, [X31 - 0x40]!
	0x031B3BF0 STP D11, D10, [X31 + 0x10]
	0x031B3BF4 STP D9, D8, [X31 + 0x20]
	0x031B3BF8 STR X30, [X31 + 0x30]
	0x031B3BFC FMOV S12, 1
	0x031B3C00 ADRP X8, 0xFFFFFFFFFD936000
	0x031B3C04 MOV V9.16B, V0.16B
	0x031B3C08 FCMP S2, 0x0
	0x031B3C0C FMOV S0, W31
	0x031B3C10 LDR V3, [X8 + 0xF4C]
	0x031B3C14 ADRP X8, 0xFFFFFFFFFD937000
	0x031B3C18 FMIN S2, S2, S12
	0x031B3C1C MOV V8.16B, V1.16B
	0x031B3C20 FMOV S1, 2.5
	0x031B3C24 FCSEL S13, S2, S0, PL
	0x031B3C28 LDR V0, [X8 + 0x35C]
	0x031B3C2C FMUL S1, S13, S1
	0x031B3C30 FMUL S1, S13, S1
	0x031B3C34 FMUL S1, S13, S1
	0x031B3C38 FMUL S2, S13, S3
	0x031B3C3C FADD S0, S1, S0
	0x031B3C40 FMUL S0, S2, S0
	0x031B3C44 BL 0x3EB1B70
	0x031B3C48 ADRP X8, 0xFFFFFFFFFD937000
	0x031B3C4C LDR V1, [X8 + 0x36C]
	0x031B3C50 FSUB S11, S12, S13
	0x031B3C54 MOV V10.16B, V0.16B
	0x031B3C58 MOV V0.16B, V11.16B
	0x031B3C5C BL 0x3EB1B50
	0x031B3C60 ADRP X8, 0xFFFFFFFFFD937000
	0x031B3C64 LDR V1, [X8 + 0x114]
	0x031B3C68 FMUL S0, S0, S10
	0x031B3C6C FADD S0, S13, S0
	0x031B3C70 LDR X30, [X31 + 0x30]
	0x031B3C74 FMUL S1, S11, S1
	0x031B3C78 FADD S1, S1, S12
	0x031B3C7C FMUL S0, S1, S0
	0x031B3C80 FSUB S1, S8, S9
	0x031B3C84 FMUL S0, S1, S0
	0x031B3C88 FADD S0, S0, S9
	0x031B3C8C LDP D9, D8, [X31 + 0x20]
	0x031B3C90 LDP D11, D10, [X31 + 0x10]
	0x031B3C94 LDP D13, D12, [X31], #0x40
	0x031B3C98 RET
	0x031B3C9C FSUB S1, S1, S0
	0x031B3CA0 FMUL S1, S1, S2
	0x031B3CA4 FMUL S1, S1, S2
	0x031B3CA8 FADD S0, S1, S0

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x1229000
	014 Move X22, 0xF43000
	015 Move W8, [X21+3762]
	016 Move X22, [X22+1448]
	017 Move V8, V6
	018 Move V9, V5
	019 Move V10, V4
	020 Move V11, V3
	021 Move V12, V2
	022 Move V13, V1
	023 Move V14, V0
	024 Move X20, X1
	025 Move X19, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0xF43000
	031 Move X0, [X0+1448]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+3762], W8
	035 Move X0, [X22]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Call LeanTween.options
	041 Compare X0, 0
	042 JumpIfEqual {84}
	043 Move X1, X31
	044 Call LTDescr.setValue3, X0
	045 Compare X0, 0
	046 JumpIfEqual {84}
	047 Move V0, V11
	048 Move V1, V10
	049 Move V2, V9
	050 Move X1, X31
	051 Call LTDescr.setTo, X0, X1
	052 Compare X0, 0
	053 JumpIfEqual {84}
	054 Move V0, V14
	055 Move V1, V13
	056 Move V2, V12
	057 Move X1, X31
	058 Call LTDescr.setFrom, X0, X1
	059 Compare X0, 0
	060 JumpIfEqual {84}
	061 Move X1, X20
	062 Move X2, X31
	063 Call LTDescr.setOnUpdateVector3, X0, X1
	064 Move X1, X0
	065 Move X0, X19
	066 Move V0, V11
	067 Move V1, V10
	068 Move V2, V9
	069 Move V3, V8
	070 Move X20, [X31+80]
	071 Move X19, [X31+88]
	072 Move X22, [X31+64]
	073 Move X21, [X31+72]
	074 Move X30, [X31+56]
	075 Move D9, [X31+40]
	076 Move D8, [X31+48]
	077 Move D11, [X31+24]
	078 Move D10, [X31+32]
	079 Move D13, [X31+8]
	080 Move D12, [X31+16]
	081 Move V14, [X31+96]
	082 Call LeanTween.pushNewTween, X0, X1, V0, X2
	083 Return X0
	084 Call 0x1C17F20

Method: LTDescr value(UnityEngine.GameObject gameObject, System.Action`2<System.Single, System.Object> callOnUpdate, System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031B3CAC RET
	0x031B3CB0 FSUB S1, S1, S0
	0x031B3CB4 FMOV S3, -2
	0x031B3CB8 FMUL S1, S1, S2
	0x031B3CBC FADD S2, S2, S3
	0x031B3CC0 FMUL S1, S1, S2
	0x031B3CC4 FSUB S0, S0, S1
	0x031B3CC8 RET
	0x031B3CCC FADD S2, S2, S2
	0x031B3CD0 FMOV S3, 1
	0x031B3CD4 FCMP S2, S3
	0x031B3CD8 FSUB S1, S1, S0
	0x031B3CDC B.PL 0x31B3CF4
	0x031B3CE0 FMOV S3, 0.5
	0x031B3CE4 FMUL S1, S1, S3
	0x031B3CE8 FMUL S1, S1, S2
	0x031B3CEC FMUL S1, S2, S1
	0x031B3CF0 B 0x31B3D18
	0x031B3CF4 FMOV S3, -1
	0x031B3CF8 FMOV S4, -0.5
	0x031B3CFC FADD S2, S2, S3
	0x031B3D00 FMUL S1, S1, S4
	0x031B3D04 FMOV S4, -2
	0x031B3D08 FADD S4, S2, S4
	0x031B3D0C FMUL S2, S2, S4
	0x031B3D10 FADD S2, S2, S3
	0x031B3D14 FMUL S1, S1, S2
	0x031B3D18 FADD S0, S1, S0
	0x031B3D1C RET
	0x031B3D20 FADD S2, S2, S2
	0x031B3D24 FMOV S4, 1
	0x031B3D28 FCMP S2, S4
	0x031B3D2C B.PL 0x31B3D3C
	0x031B3D30 FMUL S1, S1, S3
	0x031B3D34 FADD S0, S1, S0
	0x031B3D38 RET
	0x031B3D3C FMOV S2, -2
	0x031B3D40 FADD S2, S3, S2
	0x031B3D44 FMOV S3, -1
	0x031B3D48 FADD S2, S2, S3
	0x031B3D4C FMUL S1, S2, S1
	0x031B3D50 FSUB S0, S0, S1
	0x031B3D54 RET
	0x031B3D58 FSUB S1, S1, S0
	0x031B3D5C FMUL S1, S1, S2
	0x031B3D60 FMUL S1, S1, S2
	0x031B3D64 FMUL S1, S1, S2
	0x031B3D68 FADD S0, S1, S0
	0x031B3D6C RET
	0x031B3D70 FMOV S3, -1
	0x031B3D74 FADD S2, S2, S3
	0x031B3D78 FMUL S3, S2, S2
	0x031B3D7C FMUL S2, S2, S3
	0x031B3D80 FMOV S3, 1
	0x031B3D84 FSUB S1, S1, S0
	0x031B3D88 FADD S2, S2, S3
	0x031B3D8C FMUL S1, S1, S2
	0x031B3D90 FADD S0, S1, S0

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x1229000
	010 Move X22, 0xF43000
	011 Move W8, [X21+3763]
	012 Move X22, [X22+1448]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X20, X1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF43000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3763], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.options
	033 Compare X0, 0
	034 JumpIfEqual {73}
	035 Move X1, X31
	036 Call LTDescr.setCallback, X0
	037 Compare X0, 0
	038 JumpIfEqual {73}
	039 Move S1, W31
	040 Move S2, W31
	041 Move V0, V9
	042 Move X1, X31
	043 Call LTDescr.setTo, X0, X1
	044 Compare X0, 0
	045 JumpIfEqual {73}
	046 Move S1, W31
	047 Move S2, W31
	048 Move V0, V10
	049 Move X1, X31
	050 Call LTDescr.setFrom, X0, X1
	051 Compare X0, 0
	052 JumpIfEqual {73}
	053 Move X1, X20
	054 Move X2, X19
	055 Move X3, X31
	056 Call LTDescr.setOnUpdate, X0, X1, X2
	057 Move X1, X0
	058 Move X0, X19
	059 Move V0, V9
	060 Move V3, V8
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X22, [X31+32]
	064 Move X21, [X31+40]
	065 Move X30, [X31+24]
	066 Move D9, [X31+8]
	067 Move D8, [X31+16]
	068 Move S1, W31
	069 Move S2, W31
	070 Move V10, [X31+64]
	071 Call LeanTween.pushNewTween, X0, X1, V0, X2
	072 Return X0
	073 Call 0x1C17F20

Method: LTDescr delayedSound(UnityEngine.AudioClip audio, UnityEngine.Vector3 pos, System.Single volume)

Disassembly:
	0x031B3D94 RET
	0x031B3D98 FADD S2, S2, S2
	0x031B3D9C FMOV S3, 1
	0x031B3DA0 FCMP S2, S3
	0x031B3DA4 FSUB S1, S1, S0
	0x031B3DA8 B.PL 0x31B3DC4
	0x031B3DAC FMOV S3, 0.5
	0x031B3DB0 FMUL S1, S1, S3
	0x031B3DB4 FMUL S1, S1, S2
	0x031B3DB8 FMUL S1, S2, S1
	0x031B3DBC FMUL S1, S2, S1
	0x031B3DC0 B 0x31B3DE8
	0x031B3DC4 FMOV S3, -2
	0x031B3DC8 FADD S2, S2, S3
	0x031B3DCC FMUL S3, S2, S2
	0x031B3DD0 FMOV S4, 0.5
	0x031B3DD4 FMUL S2, S2, S3
	0x031B3DD8 FMOV S3, 2
	0x031B3DDC FMUL S1, S1, S4
	0x031B3DE0 FADD S2, S2, S3
	0x031B3DE4 FMUL S1, S1, S2
	0x031B3DE8 FADD S0, S1, S0
	0x031B3DEC RET
	0x031B3DF0 FSUB S1, S1, S0
	0x031B3DF4 FMUL S1, S1, S2
	0x031B3DF8 FMUL S1, S1, S2
	0x031B3DFC FMUL S1, S1, S2
	0x031B3E00 FMUL S1, S1, S2
	0x031B3E04 FADD S0, S1, S0
	0x031B3E08 RET
	0x031B3E0C FMOV S3, -1
	0x031B3E10 FADD S2, S2, S3
	0x031B3E14 FMUL S4, S2, S2
	0x031B3E18 FMUL S4, S2, S4
	0x031B3E1C FMUL S2, S2, S4
	0x031B3E20 FSUB S1, S1, S0
	0x031B3E24 FADD S2, S2, S3
	0x031B3E28 FMUL S1, S1, S2
	0x031B3E2C FSUB S0, S0, S1
	0x031B3E30 RET
	0x031B3E34 FADD S2, S2, S2
	0x031B3E38 FMOV S3, 1
	0x031B3E3C FCMP S2, S3
	0x031B3E40 FSUB S1, S1, S0
	0x031B3E44 B.PL 0x31B3E64
	0x031B3E48 FMOV S3, 0.5
	0x031B3E4C FMUL S1, S1, S3
	0x031B3E50 FMUL S1, S1, S2
	0x031B3E54 FMUL S1, S2, S1
	0x031B3E58 FMUL S1, S2, S1
	0x031B3E5C FMUL S1, S2, S1
	0x031B3E60 B 0x31B3E88
	0x031B3E64 FMOV S3, -2
	0x031B3E68 FMOV S4, -0.5
	0x031B3E6C FADD S2, S2, S3
	0x031B3E70 FMUL S1, S1, S4
	0x031B3E74 FMUL S4, S2, S2

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x1229000
	010 Move X21, 0xF43000
	011 Move W8, [X20+3764]
	012 Move X21, [X21+1448]
	013 Move V11, V3
	014 Move V8, V2
	015 Move V9, V1
	016 Move V10, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF43000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3764], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Call LeanTween.get_tweenEmpty
	033 Move X20, X0
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {74}
	037 Move X1, X31
	038 Call LTDescr.setDelayedSound, X0
	039 Compare X0, 0
	040 JumpIfEqual {74}
	041 Move V0, V10
	042 Move V1, V9
	043 Move V2, V8
	044 Move X1, X31
	045 Call LTDescr.setTo, X0, X1
	046 Compare X0, 0
	047 JumpIfEqual {74}
	048 Move S1, W31
	049 Move S2, W31
	050 Move V0, V11
	051 Move X1, X31
	052 Call LTDescr.setFrom, X0, X1
	053 Compare X0, 0
	054 JumpIfEqual {74}
	055 Move X1, X19
	056 Move X2, X31
	057 Call LTDescr.setAudio, X0, X1
	058 Move X1, X0
	059 Move X0, X20
	060 Move V1, V9
	061 Move V2, V8
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move X30, [X31+32]
	065 Move X21, [X31+40]
	066 Move D9, [X31+16]
	067 Move D8, [X31+24]
	068 Move S3, W31
	069 Move V0, V10
	070 Move D11, [X31+64]
	071 Move D10, [X31+72]
	072 Call LeanTween.pushNewTween, X0, X1, V0, X2
	073 Return X0
	074 Call 0x1C17F20

Method: LTDescr delayedSound(UnityEngine.GameObject gameObject, UnityEngine.AudioClip audio, UnityEngine.Vector3 pos, System.Single volume)

Disassembly:
	0x031B3E78 FMUL S4, S2, S4
	0x031B3E7C FMUL S2, S2, S4
	0x031B3E80 FADD S2, S2, S3
	0x031B3E84 FMUL S1, S1, S2
	0x031B3E88 FADD S0, S1, S0
	0x031B3E8C RET
	0x031B3E90 FSUB S1, S1, S0
	0x031B3E94 FMUL S1, S1, S2
	0x031B3E98 FMUL S1, S1, S2
	0x031B3E9C FMUL S1, S1, S2
	0x031B3EA0 FMUL S1, S1, S2
	0x031B3EA4 FMUL S1, S1, S2
	0x031B3EA8 FADD S0, S1, S0
	0x031B3EAC RET
	0x031B3EB0 FMOV S3, -1
	0x031B3EB4 FADD S2, S2, S3
	0x031B3EB8 FMUL S3, S2, S2
	0x031B3EBC FMUL S3, S2, S3
	0x031B3EC0 FMUL S3, S2, S3
	0x031B3EC4 FMUL S2, S2, S3
	0x031B3EC8 FMOV S3, 1
	0x031B3ECC FSUB S1, S1, S0
	0x031B3ED0 FADD S2, S2, S3
	0x031B3ED4 FMUL S1, S1, S2
	0x031B3ED8 FADD S0, S1, S0
	0x031B3EDC RET
	0x031B3EE0 FADD S2, S2, S2
	0x031B3EE4 FMOV S3, 1
	0x031B3EE8 FCMP S2, S3
	0x031B3EEC FSUB S1, S1, S0
	0x031B3EF0 B.PL 0x31B3F14
	0x031B3EF4 FMOV S3, 0.5
	0x031B3EF8 FMUL S1, S1, S3
	0x031B3EFC FMUL S1, S1, S2
	0x031B3F00 FMUL S1, S2, S1
	0x031B3F04 FMUL S1, S2, S1
	0x031B3F08 FMUL S1, S2, S1
	0x031B3F0C FMUL S1, S2, S1
	0x031B3F10 B 0x31B3F40
	0x031B3F14 FMOV S3, -2
	0x031B3F18 FADD S2, S2, S3
	0x031B3F1C FMUL S3, S2, S2
	0x031B3F20 FMUL S3, S2, S3
	0x031B3F24 FMUL S3, S2, S3
	0x031B3F28 FMOV S4, 0.5
	0x031B3F2C FMUL S2, S2, S3
	0x031B3F30 FMOV S3, 2
	0x031B3F34 FMUL S1, S1, S4
	0x031B3F38 FADD S2, S2, S3
	0x031B3F3C FMUL S1, S1, S2
	0x031B3F40 FADD S0, S1, S0
	0x031B3F44 RET
	0x031B3F48 STP D9, D8, [X31 - 0x20]!
	0x031B3F4C STR X30, [X31 + 0x10]
	0x031B3F50 ADRP X8, 0xFFFFFFFFFD937000
	0x031B3F54 MOV V8.16B, V0.16B
	0x031B3F58 LDR V0, [X8 + 0x180]
	0x031B3F5C FSUB S9, S1, S8

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x1229000
	011 Move X22, 0xF43000
	012 Move W8, [X21+3765]
	013 Move X22, [X22+1448]
	014 Move V11, V3
	015 Move V8, V2
	016 Move V9, V1
	017 Move V10, V0
	018 Move X20, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF43000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3765], W8
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {75}
	037 Move X1, X31
	038 Call LTDescr.setDelayedSound, X0
	039 Compare X0, 0
	040 JumpIfEqual {75}
	041 Move V0, V10
	042 Move V1, V9
	043 Move V2, V8
	044 Move X1, X31
	045 Call LTDescr.setTo, X0, X1
	046 Compare X0, 0
	047 JumpIfEqual {75}
	048 Move S1, W31
	049 Move S2, W31
	050 Move V0, V11
	051 Move X1, X31
	052 Call LTDescr.setFrom, X0, X1
	053 Compare X0, 0
	054 JumpIfEqual {75}
	055 Move X1, X20
	056 Move X2, X31
	057 Call LTDescr.setAudio, X0, X1
	058 Move X1, X0
	059 Move X0, X19
	060 Move V1, V9
	061 Move V2, V8
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X22, [X31+48]
	065 Move X21, [X31+56]
	066 Move X30, [X31+32]
	067 Move D9, [X31+16]
	068 Move D8, [X31+24]
	069 Move S3, W31
	070 Move V0, V10
	071 Move D11, [X31+80]
	072 Move D10, [X31+88]
	073 Call LeanTween.pushNewTween, X0, X1, V0, X2
	074 Return X0
	075 Call 0x1C17F20

Method: LTDescr move(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B3F60 FMUL S0, S2, S0
	0x031B3F64 BL 0x3EB1BD0
	0x031B3F68 LDR X30, [X31 + 0x10]
	0x031B3F6C FMUL S0, S9, S0
	0x031B3F70 FSUB S0, S9, S0
	0x031B3F74 FADD S0, S0, S8
	0x031B3F78 LDP D9, D8, [X31], #0x20
	0x031B3F7C RET
	0x031B3F80 STP D9, D8, [X31 - 0x20]!
	0x031B3F84 STR X30, [X31 + 0x10]
	0x031B3F88 ADRP X8, 0xFFFFFFFFFD937000
	0x031B3F8C MOV V8.16B, V0.16B
	0x031B3F90 LDR V0, [X8 + 0x180]
	0x031B3F94 FSUB S9, S1, S8
	0x031B3F98 FMUL S0, S2, S0
	0x031B3F9C BL 0x3EB1B70
	0x031B3FA0 LDR X30, [X31 + 0x10]
	0x031B3FA4 FMUL S0, S9, S0
	0x031B3FA8 FADD S0, S0, S8
	0x031B3FAC LDP D9, D8, [X31], #0x20
	0x031B3FB0 RET
	0x031B3FB4 STP D9, D8, [X31 - 0x20]!
	0x031B3FB8 STR X30, [X31 + 0x10]
	0x031B3FBC ADRP X8, 0xFFFFFFFFFD936000
	0x031B3FC0 MOV V8.16B, V0.16B
	0x031B3FC4 LDR V0, [X8 + 0xF4C]
	0x031B3FC8 FSUB S9, S1, S8
	0x031B3FCC FMUL S0, S2, S0
	0x031B3FD0 BL 0x3EB1BD0
	0x031B3FD4 FMOV S1, -0.5
	0x031B3FD8 FMOV S2, -1
	0x031B3FDC LDR X30, [X31 + 0x10]
	0x031B3FE0 FMUL S1, S9, S1
	0x031B3FE4 FADD S0, S0, S2
	0x031B3FE8 FMUL S0, S1, S0
	0x031B3FEC FADD S0, S8, S0
	0x031B3FF0 LDP D9, D8, [X31], #0x20
	0x031B3FF4 RET
	0x031B3FF8 STP D9, D8, [X31 - 0x20]!
	0x031B3FFC STR X30, [X31 + 0x10]
	0x031B4000 MOV V8.16B, V0.16B
	0x031B4004 FSUB S9, S1, S0
	0x031B4008 FMOV S0, -1
	0x031B400C FADD S0, S2, S0
	0x031B4010 FMOV S1, 10
	0x031B4014 FMUL S0, S0, S1
	0x031B4018 BL 0x3EB1B90
	0x031B401C LDR X30, [X31 + 0x10]
	0x031B4020 FMUL S0, S9, S0

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1229000
	009 Move W8, [X20+3766]
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF43000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3766], W8
	024 Compare X19, 0
	025 JumpIfEqual {63}
	026 Move X20, 0xF43000
	027 Move X20, [X20+1448]
	028 Move X0, X19
	029 Move X1, X31
	030 Call Component.get_gameObject, X0
	031 Move X8, [X20]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Call LeanTween.options
	039 Compare X0, 0
	040 JumpIfEqual {63}
	041 Move X1, X31
	042 Call LTDescr.setCanvasMove, X0
	043 Compare X0, 0
	044 JumpIfEqual {63}
	045 Move X1, X19
	046 Move X2, X31
	047 Call LTDescr.setRect, X0, X1
	048 Move X1, X0
	049 Move X0, X20
	050 Move V2, V9
	051 Move V3, V8
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X30, [X31+32]
	055 Move D9, [X31+16]
	056 Move D8, [X31+24]
	057 Move V0, V11
	058 Move V1, V10
	059 Move D11, [X31+64]
	060 Move D10, [X31+72]
	061 Call LeanTween.pushNewTween, X0, X1, V0, X2
	062 Return X0
	063 Call 0x1C17F20

Method: LTDescr moveX(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)

Disassembly:
	0x031B4024 FADD S0, S0, S8
	0x031B4028 LDP D9, D8, [X31], #0x20
	0x031B402C RET
	0x031B4030 STP D9, D8, [X31 - 0x20]!
	0x031B4034 STR X30, [X31 + 0x10]
	0x031B4038 MOV V8.16B, V0.16B
	0x031B403C FSUB S9, S1, S0
	0x031B4040 FMOV S0, -10
	0x031B4044 FMUL S0, S2, S0
	0x031B4048 BL 0x3EB1B90
	0x031B404C FMOV S1, 1
	0x031B4050 LDR X30, [X31 + 0x10]
	0x031B4054 FSUB S0, S1, S0
	0x031B4058 FMUL S0, S9, S0
	0x031B405C FADD S0, S0, S8
	0x031B4060 LDP D9, D8, [X31], #0x20
	0x031B4064 RET
	0x031B4068 STP D9, D8, [X31 - 0x20]!
	0x031B406C STR X30, [X31 + 0x10]
	0x031B4070 MOV V8.16B, V0.16B
	0x031B4074 FADD S0, S2, S2
	0x031B4078 FSUB S9, S1, S8
	0x031B407C FMOV S1, -1
	0x031B4080 FMOV S2, 1
	0x031B4084 FCMP S0, S2
	0x031B4088 FADD S0, S0, S1
	0x031B408C B.PL 0x31B40A8
	0x031B4090 FMOV S1, 10
	0x031B4094 FMUL S0, S0, S1
	0x031B4098 BL 0x3EB1B90
	0x031B409C FMOV S1, 0.5
	0x031B40A0 FMUL S1, S9, S1
	0x031B40A4 B 0x31B40C4
	0x031B40A8 FMOV S1, -10
	0x031B40AC FMUL S0, S0, S1
	0x031B40B0 BL 0x3EB1B90
	0x031B40B4 FMOV S1, 0.5
	0x031B40B8 FMOV S2, 2
	0x031B40BC FMUL S1, S9, S1
	0x031B40C0 FSUB S0, S2, S0
	0x031B40C4 LDR X30, [X31 + 0x10]
	0x031B40C8 FMUL S0, S1, S0
	0x031B40CC FADD S0, S0, S8
	0x031B40D0 LDP D9, D8, [X31], #0x20
	0x031B40D4 RET

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1228000
	007 Move W8, [X20+3767]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3767], W8
	020 Compare X19, 0
	021 JumpIfEqual {57}
	022 Move X20, 0xF42000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {57}
	037 Move X1, X31
	038 Call LTDescr.setCanvasMoveX, X0
	039 Compare X0, 0
	040 JumpIfEqual {57}
	041 Move X1, X19
	042 Move X2, X31
	043 Call LTDescr.setRect, X0, X1
	044 Move X1, X0
	045 Move X0, X20
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move S1, W31
	050 Move S2, W31
	051 Move V0, V9
	052 Move V3, V8
	053 Move D9, [X31+48]
	054 Move D8, [X31+56]
	055 Call LeanTween.pushNewTween, X0, X1, V0, X2
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr moveY(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)

Disassembly:
	0x031B40D8 FMUL S2, S2, S2
	0x031B40DC FMOV S3, 1
	0x031B40E0 FSUB S2, S3, S2
	0x031B40E4 FSQRT S2, S2
	0x031B40E8 FMOV S3, -1
	0x031B40EC FSUB S1, S1, S0
	0x031B40F0 FADD S2, S2, S3
	0x031B40F4 FMUL S1, S1, S2
	0x031B40F8 FSUB S0, S0, S1
	0x031B40FC RET
	0x031B4100 FMOV S3, -1
	0x031B4104 FADD S2, S2, S3
	0x031B4108 FMUL S2, S2, S2
	0x031B410C FMOV S3, 1
	0x031B4110 FSUB S2, S3, S2
	0x031B4114 FSUB S1, S1, S0
	0x031B4118 FSQRT S2, S2
	0x031B411C FMUL S1, S1, S2
	0x031B4120 FADD S0, S1, S0
	0x031B4124 RET
	0x031B4128 FADD S2, S2, S2
	0x031B412C FMOV S3, 1
	0x031B4130 FMOV S4, 0.5
	0x031B4134 FMOV S5, -0.5
	0x031B4138 FCMP S2, S3
	0x031B413C FCSEL S4, S5, S4, MI
	0x031B4140 FMOV S5, -2
	0x031B4144 FADD S5, S2, S5
	0x031B4148 FMUL S2, S2, S2
	0x031B414C FMUL S5, S5, S5
	0x031B4150 FCSEL S2, S2, S5, MI
	0x031B4154 FMOV S5, -1
	0x031B4158 FSUB S2, S3, S2
	0x031B415C FSUB S1, S1, S0
	0x031B4160 FCSEL S5, S5, S3, MI
	0x031B4164 FSQRT S2, S2
	0x031B4168 FMUL S1, S1, S4
	0x031B416C FADD S2, S2, S5
	0x031B4170 FMUL S1, S1, S2
	0x031B4174 FADD S0, S1, S0
	0x031B4178 RET
	0x031B417C STR D10, [X31 - 0x30]!
	0x031B4180 STP D9, D8, [X31 + 0x8]
	0x031B4184 STR X30, [X31 + 0x18]
	0x031B4188 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1228000
	007 Move W8, [X20+3768]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3768], W8
	020 Compare X19, 0
	021 JumpIfEqual {57}
	022 Move X20, 0xF42000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {57}
	037 Move X1, X31
	038 Call LTDescr.setCanvasMoveY, X0
	039 Compare X0, 0
	040 JumpIfEqual {57}
	041 Move X1, X19
	042 Move X2, X31
	043 Call LTDescr.setRect, X0, X1
	044 Move X1, X0
	045 Move X0, X20
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move S1, W31
	050 Move S2, W31
	051 Move V0, V9
	052 Move V3, V8
	053 Move D9, [X31+48]
	054 Move D8, [X31+56]
	055 Call LeanTween.pushNewTween, X0, X1, V0, X2
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr moveZ(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)

Disassembly:
	0x031B418C ADRP X20, 0x1227000
	0x031B4190 ADRP X19, 0xF41000
	0x031B4194 LDRB W8, [X20 + 0xEC2]
	0x031B4198 LDR X19, [X19 + 0x5A8]
	0x031B419C MOV V9.16B, V2.16B
	0x031B41A0 MOV V10.16B, V1.16B
	0x031B41A4 MOV V8.16B, V0.16B
	0x031B41A8 TBNZ X8, 0x0, 0x31B41C0
	0x031B41AC ADRP X0, 0xF41000
	0x031B41B0 LDR X0, [X0 + 0x5A8]
	0x031B41B4 BL 0x1C16CF4
	0x031B41B8 MOVZ W8, 0x1
	0x031B41BC STRB W8, [X20 + 0xEC2]
	0x031B41C0 LDR X0, [X19]
	0x031B41C4 FSUB S10, S10, S8
	0x031B41C8 LDR W8, [X0 + 0xE0]
	0x031B41CC CBNZ W8, 0x31B41D4
	0x031B41D0 BL 0x1C16DFC
	0x031B41D4 FMOV S0, 1
	0x031B41D8 FSUB S2, S0, S9
	0x031B41DC FMOV S0, W31
	0x031B41E0 MOV V1.16B, V10.16B
	0x031B41E4 BL 0x31B4204
	0x031B41E8 FSUB S0, S10, S0
	0x031B41EC FADD S0, S0, S8
	0x031B41F0 LDP X20, X19, [X31 + 0x20]
	0x031B41F4 LDR X30, [X31 + 0x18]
	0x031B41F8 LDP D9, D8, [X31 + 0x8]
	0x031B41FC LDR V10, [X31], #0x30
	0x031B4200 RET
	0x031B4204 ADRP X8, 0xFFFFFFFFFD935000
	0x031B4208 LDR V3, [X8 + 0xF64]
	0x031B420C FCMP S2, S3
	0x031B4210 B.PL 0x31B4228
	0x031B4214 MOVZ W8, 0x40F20000
	0x031B4218 FMOV S3, W8
	0x031B421C FMUL S3, S2, S3
	0x031B4220 FMUL S2, S3, S2
	0x031B4224 B 0x31B42BC
	0x031B4228 ADRP X8, 0xFFFFFFFFFD936000
	0x031B422C LDR V3, [X8 + 0x124]
	0x031B4230 FCMP S2, S3
	0x031B4234 B.PL 0x31B425C
	0x031B4238 ADRP X8, 0xFFFFFFFFFD936000
	0x031B423C LDR V3, [X8 + 0x1C]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1228000
	007 Move W8, [X20+3769]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3769], W8
	020 Compare X19, 0
	021 JumpIfEqual {57}
	022 Move X20, 0xF42000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {57}
	037 Move X1, X31
	038 Call LTDescr.setCanvasMoveZ, X0
	039 Compare X0, 0
	040 JumpIfEqual {57}
	041 Move X1, X19
	042 Move X2, X31
	043 Call LTDescr.setRect, X0, X1
	044 Move X1, X0
	045 Move X0, X20
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move S1, W31
	050 Move S2, W31
	051 Move V0, V9
	052 Move V3, V8
	053 Move D9, [X31+48]
	054 Move D8, [X31+56]
	055 Call LeanTween.pushNewTween, X0, X1, V0, X2
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr rotate(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)

Disassembly:
	0x031B4240 MOVZ W8, 0x40F20000
	0x031B4244 FMOV S4, W8
	0x031B4248 FADD S2, S2, S3
	0x031B424C FMUL S3, S2, S4
	0x031B4250 FMUL S2, S2, S3
	0x031B4254 FMOV S3, 0.75
	0x031B4258 B 0x31B42B8
	0x031B425C ADRP X8, 0xFFFFFFFFFD939000
	0x031B4260 LDR V3, [X8 + 0x4C8]
	0x031B4264 FCVT S4, S2
	0x031B4268 FCMP D4, D3
	0x031B426C B.PL 0x31B4294
	0x031B4270 ADRP X8, 0xFFFFFFFFFD936000
	0x031B4274 LDR V3, [X8 + 0x3A0]
	0x031B4278 MOVZ W8, 0x40F20000
	0x031B427C FMOV S4, W8
	0x031B4280 FADD S2, S2, S3
	0x031B4284 FMUL S3, S2, S4
	0x031B4288 FMUL S2, S2, S3
	0x031B428C FMOV S3, 0.9375
	0x031B4290 B 0x31B42B8
	0x031B4294 ADRP X8, 0xFFFFFFFFFD935000
	0x031B4298 LDR V3, [X8 + 0xFFC]
	0x031B429C MOVZ W8, 0x40F20000
	0x031B42A0 FMOV S4, W8
	0x031B42A4 MOVZ W8, 0x3F7C0000
	0x031B42A8 FADD S2, S2, S3
	0x031B42AC FMUL S3, S2, S4
	0x031B42B0 FMUL S2, S2, S3
	0x031B42B4 FMOV S3, W8
	0x031B42B8 FADD S2, S2, S3
	0x031B42BC FSUB S1, S1, S0
	0x031B42C0 FMUL S1, S1, S2
	0x031B42C4 FADD S0, S1, S0
	0x031B42C8 RET
	0x031B42CC STP D11, D10, [X31 - 0x40]!
	0x031B42D0 STP D9, D8, [X31 + 0x10]
	0x031B42D4 STR X30, [X31 + 0x20]
	0x031B42D8 STP X20, X19, [X31 + 0x30]
	0x031B42DC ADRP X19, 0x1227000
	0x031B42E0 ADRP X20, 0xF41000
	0x031B42E4 LDRB W8, [X19 + 0xEC3]
	0x031B42E8 LDR X20, [X20 + 0x5A8]
	0x031B42EC MOV V9.16B, V2.16B
	0x031B42F0 MOV V10.16B, V1.16B
	0x031B42F4 MOV V8.16B, V0.16B
	0x031B42F8 TBNZ X8, 0x0, 0x31B4310
	0x031B42FC ADRP X0, 0xF41000
	0x031B4300 LDR X0, [X0 + 0x5A8]
	0x031B4304 BL 0x1C16CF4
	0x031B4308 MOVZ W8, 0x1
	0x031B430C STRB W8, [X19 + 0xEC3]
	0x031B4310 LDR X0, [X20]
	0x031B4314 LDR W8, [X0 + 0xE0]
	0x031B4318 CBNZ W8, 0x31B4320
	0x031B431C BL 0x1C16DFC
	0x031B4320 FMOV S11, 0.5
	0x031B4324 FSUB S10, S10, S8
	0x031B4328 FCMP S9, S11
	0x031B432C FADD S2, S9, S9
	0x031B4330 B.PL 0x31B4348
	0x031B4334 FMOV S0, W31
	0x031B4338 MOV V1.16B, V10.16B
	0x031B433C BL 0x31B417C

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, 0x1228000
	008 Move W8, [X19+3770]
	009 Move V8, V1
	010 Move V9, V0
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF42000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+3770], W8
	021 Compare X20, 0
	022 JumpIfEqual {81}
	023 Move X19, 0xF42000
	024 Move X19, [X19+1448]
	025 Move X0, X20
	026 Move X1, X31
	027 Call Component.get_gameObject, X0
	028 Move X8, [X19]
	029 Move X19, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Move X0, X8
	034 Call 0x1C17DFC
	035 Call LeanTween.options
	036 Compare X0, 0
	037 JumpIfEqual {81}
	038 Move X1, X31
	039 Call LTDescr.setCanvasRotateAround, X0
	040 Compare X0, 0
	041 JumpIfEqual {81}
	042 Move X1, X20
	043 Move X2, X31
	044 Call LTDescr.setRect, X0, X1
	045 Move X21, 0x1225000
	046 Move W8, [X21+2591]
	047 Move X20, X0
	048 Compare W8, 0
	049 JumpIfNotEqual {55}
	050 Move X0, 0xF40000
	051 Move X0, [X0+1440]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X21+2591], W8
	055 Compare X20, 0
	056 JumpIfEqual {81}
	057 Move X8, 0xF40000
	058 Move X8, [X8+1440]
	059 Move X0, X20
	060 Move X1, X31
	061 Move X8, [X8]
	062 Move X8, [X8+184]
	063 Move S1, [X8+76]
	064 Move S2, [X8+80]
	065 Move V0, [X8+72]
	066 Call LTDescr.setAxis, X0, X1
	067 Move X1, X0
	068 Move X0, X19
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move X21, [X31+24]
	073 Move S1, W31
	074 Move S2, W31
	075 Move V0, V9
	076 Move V3, V8
	077 Move D9, [X31+48]
	078 Move D8, [X31+56]
	079 Call LeanTween.pushNewTween, X0, X1, V0, X2
	080 Return X0
	081 Call 0x1C17F20

Method: LTDescr rotate(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B4340 FMUL S0, S0, S11
	0x031B4344 B 0x31B4368
	0x031B4348 FMOV S0, -1
	0x031B434C FADD S2, S2, S0
	0x031B4350 FMOV S0, W31
	0x031B4354 MOV V1.16B, V10.16B
	0x031B4358 BL 0x31B4204
	0x031B435C FMUL S0, S0, S11
	0x031B4360 FMUL S1, S10, S11
	0x031B4364 FADD S0, S1, S0
	0x031B4368 FADD S0, S0, S8
	0x031B436C LDP X20, X19, [X31 + 0x30]
	0x031B4370 LDR X30, [X31 + 0x20]
	0x031B4374 LDP D9, D8, [X31 + 0x10]
	0x031B4378 LDP D11, D10, [X31], #0x40
	0x031B437C RET
	0x031B4380 ADRP X8, 0xFFFFFFFFFD935000
	0x031B4384 LDR V4, [X8 + 0xF2C]
	0x031B4388 FSUB S1, S1, S0
	0x031B438C FMUL S1, S1, S2
	0x031B4390 FMUL S1, S1, S2
	0x031B4394 FMUL S3, S3, S4
	0x031B4398 FMOV S4, 1
	0x031B439C FADD S4, S3, S4
	0x031B43A0 FMUL S2, S4, S2
	0x031B43A4 FSUB S2, S2, S3
	0x031B43A8 FMUL S1, S1, S2
	0x031B43AC FADD S0, S1, S0
	0x031B43B0 RET
	0x031B43B4 ADRP X8, 0xFFFFFFFFFD935000
	0x031B43B8 LDR V4, [X8 + 0xF2C]
	0x031B43BC FMOV S5, -1
	0x031B43C0 FADD S2, S2, S5
	0x031B43C4 FMUL S5, S2, S2
	0x031B43C8 FMUL S3, S3, S4
	0x031B43CC FMOV S4, 1
	0x031B43D0 FADD S6, S3, S4
	0x031B43D4 FMUL S2, S2, S6
	0x031B43D8 FADD S2, S3, S2
	0x031B43DC FMUL S2, S5, S2
	0x031B43E0 FSUB S1, S1, S0
	0x031B43E4 FADD S2, S2, S4
	0x031B43E8 FMUL S1, S1, S2
	0x031B43EC FADD S0, S1, S0
	0x031B43F0 RET
	0x031B43F4 ADRP X8, 0xFFFFFFFFFD935000
	0x031B43F8 LDR V4, [X8 + 0xF2C]
	0x031B43FC FADD S5, S2, S2
	0x031B4400 FMOV S2, 1
	0x031B4404 FCMP S5, S2
	0x031B4408 FMUL S4, S3, S4
	0x031B440C FSUB S1, S1, S0
	0x031B4410 B.PL 0x31B4444
	0x031B4414 ADRP X8, 0xFFFFFFFFFD936000
	0x031B4418 LDR V6, [X8 + 0x3D0]
	0x031B441C FMOV S7, 0.5
	0x031B4420 FMUL S1, S1, S7
	0x031B4424 FMUL S3, S3, S6
	0x031B4428 FMUL S3, S4, S3
	0x031B442C FADD S2, S3, S2
	0x031B4430 FMUL S2, S5, S2
	0x031B4434 FMUL S4, S5, S5
	0x031B4438 FSUB S2, S2, S3
	0x031B443C FMUL S2, S4, S2
	0x031B4440 B 0x31B4480
	0x031B4444 ADRP X8, 0xFFFFFFFFFD936000
	0x031B4448 LDR V7, [X8 + 0x3D0]
	0x031B444C FMOV S6, -2

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0x1228000
	010 Move W8, [X19+3771]
	011 Move V8, V3
	012 Move V9, V2
	013 Move V10, V1
	014 Move V11, V0
	015 Move X20, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF42000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X19+3771], W8
	025 Compare X20, 0
	026 JumpIfEqual {87}
	027 Move X19, 0xF42000
	028 Move X19, [X19+1448]
	029 Move X0, X20
	030 Move X1, X31
	031 Call Component.get_gameObject, X0
	032 Move X8, [X19]
	033 Move X19, X0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Call LeanTween.options
	040 Compare X0, 0
	041 JumpIfEqual {87}
	042 Move X1, X31
	043 Call LTDescr.setCanvasRotateAround, X0
	044 Compare X0, 0
	045 JumpIfEqual {87}
	046 Move X1, X20
	047 Move X2, X31
	048 Call LTDescr.setRect, X0, X1
	049 Move X21, 0x1225000
	050 Move W8, [X21+2591]
	051 Move X20, X0
	052 Compare W8, 0
	053 JumpIfNotEqual {59}
	054 Move X0, 0xF40000
	055 Move X0, [X0+1440]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X21+2591], W8
	059 Compare X20, 0
	060 JumpIfEqual {87}
	061 Move X8, 0xF40000
	062 Move X8, [X8+1440]
	063 Move X0, X20
	064 Move X1, X31
	065 Move X8, [X8]
	066 Move X8, [X8+184]
	067 Move S1, [X8+76]
	068 Move S2, [X8+80]
	069 Move V0, [X8+72]
	070 Call LTDescr.setAxis, X0, X1
	071 Move X1, X0
	072 Move X0, X19
	073 Move V2, V9
	074 Move V3, V8
	075 Move X20, [X31+48]
	076 Move X19, [X31+56]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Move D9, [X31+16]
	080 Move D8, [X31+24]
	081 Move V0, V11
	082 Move V1, V10
	083 Move D11, [X31+64]
	084 Move D10, [X31+72]
	085 Call LeanTween.pushNewTween, X0, X1, V0, X2
	086 Return X0
	087 Call 0x1C17F20

Method: LTDescr rotateAround(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 axis, System.Single to, System.Single time)

Disassembly:
	0x031B4450 FADD S5, S5, S6
	0x031B4454 FMOV S6, 0.5
	0x031B4458 FMUL S3, S3, S7
	0x031B445C FMUL S3, S4, S3
	0x031B4460 FADD S2, S3, S2
	0x031B4464 FMUL S2, S5, S2
	0x031B4468 FMUL S1, S1, S6
	0x031B446C FMUL S6, S5, S5
	0x031B4470 FADD S2, S3, S2
	0x031B4474 FMUL S2, S6, S2
	0x031B4478 FMOV S3, 2
	0x031B447C FADD S2, S2, S3
	0x031B4480 FMUL S1, S1, S2
	0x031B4484 FADD S0, S1, S0
	0x031B4488 RET
	0x031B448C STR D14, [X31 - 0x40]!
	0x031B4490 STP D13, D12, [X31 + 0x8]
	0x031B4494 STP D11, D10, [X31 + 0x18]
	0x031B4498 STP D9, D8, [X31 + 0x28]
	0x031B449C STR X30, [X31 + 0x38]
	0x031B44A0 FCMP S2, 0x0
	0x031B44A4 MOV V8.16B, V0.16B
	0x031B44A8 B.EQ 0x31B4550
	0x031B44AC FMOV S0, 1
	0x031B44B0 FCMP S2, S0
	0x031B44B4 FSUB S12, S1, S8
	0x031B44B8 B.NE 0x31B44C4
	0x031B44BC FADD S8, S12, S8
	0x031B44C0 B 0x31B4550
	0x031B44C4 ADRP X8, 0xFFFFFFFFFD936000
	0x031B44C8 LDR V0, [X8 + 0x90]
	0x031B44CC FMOV S1, 0.25
	0x031B44D0 MOV V10.16B, V4.16B
	0x031B44D4 MOV V9.16B, V3.16B
	0x031B44D8 FCMP S2, S0
	0x031B44DC FMUL S13, S4, S1
	0x031B44E0 B.LE 0x31B4510
	0x031B44E4 FMOV S0, 1
	0x031B44E8 FCMP S9, S0
	0x031B44EC B.LE 0x31B4510
	0x031B44F0 ADRP X8, 0xFFFFFFFFFD936000
	0x031B44F4 LDR V1, [X8 + 0x30C]
	0x031B44F8 FSUB S3, S0, S2
	0x031B44FC FMOV S4, -1
	0x031B4500 FDIV S1, S3, S1
	0x031B4504 FADD S3, S9, S4
	0x031B4508 FMUL S1, S1, S3
	0x031B450C FADD S9, S1, S0
	0x031B4510 FMOV S0, -1
	0x031B4514 FADD S14, S2, S0
	0x031B4518 FMOV S0, 10
	0x031B451C FMUL S0, S14, S0
	0x031B4520 BL 0x3EB1B90
	0x031B4524 ADRP X8, 0xFFFFFFFFFD936000
	0x031B4528 MOV V11.16B, V0.16B
	0x031B452C LDR V0, [X8 + 0x3A4]
	0x031B4530 FSUB S1, S14, S13
	0x031B4534 FMUL S0, S1, S0

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0x1228000
	010 Move W8, [X19+3772]
	011 Move V8, V4
	012 Move V9, V3
	013 Move V10, V2
	014 Move V11, V1
	015 Move V12, V0
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF42000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+3772], W8
	026 Compare X20, 0
	027 JumpIfEqual {73}
	028 Move X19, 0xF42000
	029 Move X19, [X19+1448]
	030 Move X0, X20
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Move X8, [X19]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Call LeanTween.options
	041 Compare X0, 0
	042 JumpIfEqual {73}
	043 Move X1, X31
	044 Call LTDescr.setCanvasRotateAround, X0
	045 Compare X0, 0
	046 JumpIfEqual {73}
	047 Move X1, X20
	048 Move X2, X31
	049 Call LTDescr.setRect, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {73}
	052 Move V0, V12
	053 Move V1, V11
	054 Move V2, V10
	055 Move X1, X31
	056 Call LTDescr.setAxis, X0, X1
	057 Move X1, X0
	058 Move X0, X19
	059 Move V0, V9
	060 Move V3, V8
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X30, [X31+40]
	064 Move D9, [X31+24]
	065 Move D8, [X31+32]
	066 Move D11, [X31+8]
	067 Move D10, [X31+16]
	068 Move S1, W31
	069 Move S2, W31
	070 Move V12, [X31+64]
	071 Call LeanTween.pushNewTween, X0, X1, V0, X2
	072 Return X0
	073 Call 0x1C17F20

Method: LTDescr rotateAroundLocal(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 axis, System.Single to, System.Single time)

Disassembly:
	0x031B4538 FDIV S0, S0, S10
	0x031B453C BL 0x3EB1B70
	0x031B4540 FMUL S1, S12, S11
	0x031B4544 FMUL S0, S1, S0
	0x031B4548 FMUL S0, S0, S9
	0x031B454C FADD S8, S8, S0
	0x031B4550 MOV V0.16B, V8.16B
	0x031B4554 LDR X30, [X31 + 0x38]
	0x031B4558 LDP D9, D8, [X31 + 0x28]
	0x031B455C LDP D11, D10, [X31 + 0x18]
	0x031B4560 LDP D13, D12, [X31 + 0x8]
	0x031B4564 LDR V14, [X31], #0x40
	0x031B4568 RET
	0x031B456C STR D14, [X31 - 0x40]!
	0x031B4570 STP D13, D12, [X31 + 0x8]
	0x031B4574 STP D11, D10, [X31 + 0x18]
	0x031B4578 STP D9, D8, [X31 + 0x28]
	0x031B457C STR X30, [X31 + 0x38]
	0x031B4580 FCMP S2, 0x0
	0x031B4584 MOV V8.16B, V0.16B
	0x031B4588 B.EQ 0x31B4624
	0x031B458C FMOV S0, 1
	0x031B4590 MOV V11.16B, V2.16B
	0x031B4594 FCMP S2, S0
	0x031B4598 FSUB S13, S1, S8
	0x031B459C B.NE 0x31B45A8
	0x031B45A0 FADD S8, S13, S8
	0x031B45A4 B 0x31B4624
	0x031B45A8 ADRP X8, 0xFFFFFFFFFD936000
	0x031B45AC LDR V0, [X8 + 0x30C]
	0x031B45B0 FMOV S1, 0.25
	0x031B45B4 MOV V10.16B, V4.16B
	0x031B45B8 MOV V9.16B, V3.16B
	0x031B45BC FCMP S11, S0
	0x031B45C0 FMUL S14, S4, S1
	0x031B45C4 B.PL 0x31B45E8
	0x031B45C8 FMOV S1, 1
	0x031B45CC FCMP S9, S1
	0x031B45D0 B.LE 0x31B45E8
	0x031B45D4 FMOV S2, -1
	0x031B45D8 FDIV S0, S11, S0
	0x031B45DC FADD S2, S9, S2
	0x031B45E0 FMUL S0, S0, S2
	0x031B45E4 FADD S9, S0, S1
	0x031B45E8 FMOV S0, -10
	0x031B45EC FMUL S0, S11, S0
	0x031B45F0 BL 0x3EB1B90
	0x031B45F4 ADRP X8, 0xFFFFFFFFFD936000
	0x031B45F8 MOV V12.16B, V0.16B
	0x031B45FC LDR V0, [X8 + 0x6C]
	0x031B4600 FSUB S1, S11, S14
	0x031B4604 FMUL S0, S1, S0
	0x031B4608 FDIV S0, S0, S10
	0x031B460C BL 0x3EB1B70
	0x031B4610 FMUL S2, S13, S12
	0x031B4614 FMUL S0, S2, S0
	0x031B4618 FADD S1, S13, S8
	0x031B461C FMUL S0, S0, S9

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0x1228000
	010 Move W8, [X19+3773]
	011 Move V8, V4
	012 Move V9, V3
	013 Move V10, V2
	014 Move V11, V1
	015 Move V12, V0
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF42000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+3773], W8
	026 Compare X20, 0
	027 JumpIfEqual {73}
	028 Move X19, 0xF42000
	029 Move X19, [X19+1448]
	030 Move X0, X20
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Move X8, [X19]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Call LeanTween.options
	041 Compare X0, 0
	042 JumpIfEqual {73}
	043 Move X1, X31
	044 Call LTDescr.setCanvasRotateAroundLocal, X0
	045 Compare X0, 0
	046 JumpIfEqual {73}
	047 Move X1, X20
	048 Move X2, X31
	049 Call LTDescr.setRect, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {73}
	052 Move V0, V12
	053 Move V1, V11
	054 Move V2, V10
	055 Move X1, X31
	056 Call LTDescr.setAxis, X0, X1
	057 Move X1, X0
	058 Move X0, X19
	059 Move V0, V9
	060 Move V3, V8
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X30, [X31+40]
	064 Move D9, [X31+24]
	065 Move D8, [X31+32]
	066 Move D11, [X31+8]
	067 Move D10, [X31+16]
	068 Move S1, W31
	069 Move S2, W31
	070 Move V12, [X31+64]
	071 Call LeanTween.pushNewTween, X0, X1, V0, X2
	072 Return X0
	073 Call 0x1C17F20

Method: LTDescr scale(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031B4620 FADD S8, S1, S0
	0x031B4624 MOV V0.16B, V8.16B
	0x031B4628 LDR X30, [X31 + 0x38]
	0x031B462C LDP D9, D8, [X31 + 0x28]
	0x031B4630 LDP D11, D10, [X31 + 0x18]
	0x031B4634 LDP D13, D12, [X31 + 0x8]
	0x031B4638 LDR V14, [X31], #0x40
	0x031B463C RET
	0x031B4640 STR D14, [X31 - 0x40]!
	0x031B4644 STP D13, D12, [X31 + 0x8]
	0x031B4648 STP D11, D10, [X31 + 0x18]
	0x031B464C STP D9, D8, [X31 + 0x28]
	0x031B4650 STR X30, [X31 + 0x38]
	0x031B4654 FCMP S2, 0x0
	0x031B4658 MOV V8.16B, V0.16B
	0x031B465C B.EQ 0x31B4784
	0x031B4660 FADD S0, S2, S2
	0x031B4664 FMOV S2, 2
	0x031B4668 FCMP S0, S2
	0x031B466C FSUB S12, S1, S8
	0x031B4670 B.NE 0x31B467C
	0x031B4674 FADD S8, S12, S8
	0x031B4678 B 0x31B4784
	0x031B467C FMOV S1, 1
	0x031B4680 MOV V10.16B, V4.16B
	0x031B4684 MOV V9.16B, V3.16B
	0x031B4688 FCMP S3, S1
	0x031B468C FMOV S2, 0.25
	0x031B4690 B.LE 0x31B46E8
	0x031B4694 ADRP X8, 0xFFFFFFFFFD936000
	0x031B4698 LDR V3, [X8 + 0x35C]
	0x031B469C FCMP S0, S3
	0x031B46A0 B.PL 0x31B46BC
	0x031B46A4 FMOV S4, -1
	0x031B46A8 FDIV S3, S0, S3
	0x031B46AC FADD S4, S9, S4
	0x031B46B0 FMUL S3, S3, S4
	0x031B46B4 FMOV S4, 1
	0x031B46B8 B 0x31B46E4
	0x031B46BC ADRP X8, 0xFFFFFFFFFD936000
	0x031B46C0 LDR V4, [X8 + 0x5C]
	0x031B46C4 FCMP S0, S4
	0x031B46C8 B.LE 0x31B46E8
	0x031B46CC FMOV S4, 1
	0x031B46D0 FMOV S5, -1
	0x031B46D4 FSUB S6, S4, S0
	0x031B46D8 FDIV S3, S6, S3
	0x031B46DC FADD S5, S9, S5
	0x031B46E0 FMUL S3, S5, S3

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1228000
	009 Move W8, [X20+3774]
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF42000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3774], W8
	024 Compare X19, 0
	025 JumpIfEqual {63}
	026 Move X20, 0xF42000
	027 Move X20, [X20+1448]
	028 Move X0, X19
	029 Move X1, X31
	030 Call Component.get_gameObject, X0
	031 Move X8, [X20]
	032 Move X20, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Call LeanTween.options
	039 Compare X0, 0
	040 JumpIfEqual {63}
	041 Move X1, X31
	042 Call LTDescr.setCanvasScale, X0
	043 Compare X0, 0
	044 JumpIfEqual {63}
	045 Move X1, X19
	046 Move X2, X31
	047 Call LTDescr.setRect, X0, X1
	048 Move X1, X0
	049 Move X0, X20
	050 Move V2, V9
	051 Move V3, V8
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X30, [X31+32]
	055 Move D9, [X31+16]
	056 Move D8, [X31+24]
	057 Move V0, V11
	058 Move V1, V10
	059 Move D11, [X31+64]
	060 Move D10, [X31+72]
	061 Call LeanTween.pushNewTween, X0, X1, V0, X2
	062 Return X0
	063 Call 0x1C17F20

Method: LTDescr size(UnityEngine.RectTransform rectTrans, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031B46E4 FADD S9, S3, S4
	0x031B46E8 FMUL S13, S10, S2
	0x031B46EC FMOV S2, -1
	0x031B46F0 FCMP S0, S1
	0x031B46F4 FADD S14, S0, S2
	0x031B46F8 B.PL 0x31B4740
	0x031B46FC FMOV S0, 10
	0x031B4700 FMUL S0, S14, S0
	0x031B4704 BL 0x3EB1B90
	0x031B4708 ADRP X8, 0xFFFFFFFFFD936000
	0x031B470C MOV V11.16B, V0.16B
	0x031B4710 LDR V0, [X8 + 0x3A4]
	0x031B4714 FSUB S1, S14, S13
	0x031B4718 FMUL S0, S1, S0
	0x031B471C FDIV S0, S0, S10
	0x031B4720 BL 0x3EB1B70
	0x031B4724 FMUL S1, S12, S11
	0x031B4728 FMUL S0, S1, S0
	0x031B472C FMOV S1, 0.5
	0x031B4730 FMUL S0, S0, S1
	0x031B4734 FMUL S0, S0, S9
	0x031B4738 FADD S8, S8, S0
	0x031B473C B 0x31B4784
	0x031B4740 FMOV S0, -10
	0x031B4744 FMUL S0, S14, S0
	0x031B4748 BL 0x3EB1B90
	0x031B474C ADRP X8, 0xFFFFFFFFFD936000
	0x031B4750 MOV V11.16B, V0.16B
	0x031B4754 LDR V0, [X8 + 0x6C]
	0x031B4758 FSUB S1, S14, S13
	0x031B475C FMUL S0, S1, S0
	0x031B4760 FDIV S0, S0, S10
	0x031B4764 BL 0x3EB1B70
	0x031B4768 FMUL S2, S12, S11
	0x031B476C FMUL S0, S2, S0
	0x031B4770 FMOV S2, 0.5
	0x031B4774 FMUL S0, S0, S2
	0x031B4778 FADD S1, S12, S8
	0x031B477C FMUL S0, S0, S9
	0x031B4780 FADD S8, S1, S0
	0x031B4784 MOV V0.16B, V8.16B
	0x031B4788 LDR X30, [X31 + 0x38]
	0x031B478C LDP D9, D8, [X31 + 0x28]
	0x031B4790 LDP D11, D10, [X31 + 0x18]
	0x031B4794 LDP D13, D12, [X31 + 0x8]
	0x031B4798 LDR V14, [X31], #0x40
	0x031B479C RET
	0x031B47A0 STR D10, [X31 - 0x50]!

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1228000
	008 Move W8, [X20+3775]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xF42000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3775], W8
	022 Compare X19, 0
	023 JumpIfEqual {60}
	024 Move X20, 0xF42000
	025 Move X20, [X20+1448]
	026 Move X0, X19
	027 Move X1, X31
	028 Call Component.get_gameObject, X0
	029 Move X8, [X20]
	030 Move X20, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Call LeanTween.options
	037 Compare X0, 0
	038 JumpIfEqual {60}
	039 Move X1, X31
	040 Call LTDescr.setCanvasSizeDelta, X0
	041 Compare X0, 0
	042 JumpIfEqual {60}
	043 Move X1, X19
	044 Move X2, X31
	045 Call LTDescr.setRect, X0, X1
	046 Move X1, X0
	047 Move X0, X20
	048 Move V1, V9
	049 Move V3, V8
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X30, [X31+24]
	053 Move D9, [X31+8]
	054 Move D8, [X31+16]
	055 Move S2, W31
	056 Move V0, V10
	057 Move V10, [X31+48]
	058 Call LeanTween.pushNewTween, X0, X1, V0, X2
	059 Return X0
	060 Call 0x1C17F20

Method: LTDescr alpha(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)

Disassembly:
	0x031B47A4 STP D9, D8, [X31 + 0x8]
	0x031B47A8 STR X30, [X31 + 0x18]
	0x031B47AC STP X24, X23, [X31 + 0x20]
	0x031B47B0 STP X22, X21, [X31 + 0x30]
	0x031B47B4 STP X20, X19, [X31 + 0x40]
	0x031B47B8 ADRP X19, 0x1227000
	0x031B47BC ADRP X23, 0xF6B000
	0x031B47C0 LDRB W8, [X19 + 0xEC4]
	0x031B47C4 LDR X23, [X23 + 0x420]
	0x031B47C8 MOV V8.16B, V1.16B
	0x031B47CC MOV V9.16B, V0.16B
	0x031B47D0 MOV W21, W2
	0x031B47D4 MOV X20, X1
	0x031B47D8 MOV X22, X0
	0x031B47DC TBNZ X8, 0x0, 0x31B4884
	0x031B47E0 ADRP X0, 0xF6B000
	0x031B47E4 LDR X0, [X0 + 0x428]
	0x031B47E8 BL 0x1C16CF4
	0x031B47EC ADRP X0, 0xF41000
	0x031B47F0 LDR X0, [X0 + 0x5A8]
	0x031B47F4 BL 0x1C16CF4
	0x031B47F8 ADRP X0, 0xF6B000
	0x031B47FC LDR X0, [X0 + 0x430]
	0x031B4800 BL 0x1C16CF4
	0x031B4804 ADRP X0, 0xF6B000
	0x031B4808 LDR X0, [X0 + 0x438]
	0x031B480C BL 0x1C16CF4
	0x031B4810 ADRP X0, 0xF6B000
	0x031B4814 LDR X0, [X0 + 0x440]
	0x031B4818 BL 0x1C16CF4
	0x031B481C ADRP X0, 0xF6B000
	0x031B4820 LDR X0, [X0 + 0x448]
	0x031B4824 BL 0x1C16CF4
	0x031B4828 ADRP X0, 0xF6B000
	0x031B482C LDR X0, [X0 + 0x450]
	0x031B4830 BL 0x1C16CF4
	0x031B4834 ADRP X0, 0xF6B000
	0x031B4838 LDR X0, [X0 + 0x458]
	0x031B483C BL 0x1C16CF4
	0x031B4840 ADRP X0, 0xF6B000
	0x031B4844 LDR X0, [X0 + 0x460]
	0x031B4848 BL 0x1C16CF4
	0x031B484C ADRP X0, 0xF6B000
	0x031B4850 LDR X0, [X0 + 0x468]
	0x031B4854 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1228000
	007 Move W8, [X20+3776]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF42000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3776], W8
	020 Compare X19, 0
	021 JumpIfEqual {57}
	022 Move X20, 0xF42000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Call LeanTween.options
	035 Compare X0, 0
	036 JumpIfEqual {57}
	037 Move X1, X31
	038 Call LTDescr.setCanvasAlpha, X0
	039 Compare X0, 0
	040 JumpIfEqual {57}
	041 Move X1, X19
	042 Move X2, X31
	043 Call LTDescr.setRect, X0, X1
	044 Move X1, X0
	045 Move X0, X20
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X30, [X31+16]
	049 Move S1, W31
	050 Move S2, W31
	051 Move V0, V9
	052 Move V3, V8
	053 Move D9, [X31+48]
	054 Move D8, [X31+56]
	055 Call LeanTween.pushNewTween, X0, X1, V0, X2
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr color(UnityEngine.RectTransform rectTrans, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031B4858 ADRP X0, 0xF6B000
	0x031B485C LDR X0, [X0 + 0x470]
	0x031B4860 BL 0x1C16CF4
	0x031B4864 ADRP X0, 0xF6B000
	0x031B4868 LDR X0, [X0 + 0x478]
	0x031B486C BL 0x1C16CF4
	0x031B4870 ADRP X0, 0xF6B000
	0x031B4874 LDR X0, [X0 + 0x420]
	0x031B4878 BL 0x1C16CF4
	0x031B487C MOVZ W8, 0x1
	0x031B4880 STRB W8, [X19 + 0xEC4]
	0x031B4884 LDR X0, [X23]
	0x031B4888 BL 0x1C16F10
	0x031B488C MOV X1, X31
	0x031B4890 MOV X19, X0
	0x031B4894 BL 0x33BDD8C
	0x031B4898 CBZ X19, 0x31B4B08
	0x031B489C STP S9, S8, [X19 + 0x18]
	0x031B48A0 CBZ X22, 0x31B4B08
	0x031B48A4 ADRP X23, 0xF41000
	0x031B48A8 LDR X23, [X23 + 0x5A8]
	0x031B48AC MOV X0, X22
	0x031B48B0 MOV X1, X31
	0x031B48B4 BL 0x3C32ECC
	0x031B48B8 ADRP X24, 0x1224000
	0x031B48BC LDRB W8, [X24 + 0x783]
	0x031B48C0 MOV X22, X0
	0x031B48C4 CBNZ W8, 0x31B48DC
	0x031B48C8 ADRP X0, 0xF3F000
	0x031B48CC LDR X0, [X0 + 0x5A0]
	0x031B48D0 BL 0x1C16CF4
	0x031B48D4 MOVZ W8, 0x1
	0x031B48D8 STRB W8, [X24 + 0x783]
	0x031B48DC ADRP X8, 0xF3F000
	0x031B48E0 LDR X8, [X8 + 0x5A0]
	0x031B48E4 LDR X0, [X23]
	0x031B48E8 LDR X8, [X8]
	0x031B48EC LDR W9, [X0 + 0xE0]
	0x031B48F0 LDR X8, [X8 + 0xB8]
	0x031B48F4 LDP S10, S9, [X8]
	0x031B48F8 LDR V8, [X8 + 0x8]
	0x031B48FC CBNZ W9, 0x31B4904
	0x031B4900 BL 0x1C16DFC
	0x031B4904 BL 0x31AF454
	0x031B4908 CBZ X0, 0x31B4B08
	0x031B490C MOV X1, X31
	0x031B4910 BL 0x31BFF68
	0x031B4914 CBZ X0, 0x31B4B08
	0x031B4918 MOV X1, X20
	0x031B491C MOV X2, X31
	0x031B4920 BL 0x31C24A8
	0x031B4924 MOVN W8, 0x80800000
	0x031B4928 MOV X1, X0
	0x031B492C FMOV S3, W8
	0x031B4930 MOV X0, X22
	0x031B4934 MOV V0.16B, V10.16B
	0x031B4938 MOV V1.16B, V9.16B
	0x031B493C MOV V2.16B, V8.16B

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0x1228000
	010 Move W8, [X19+3777]
	011 Move V8, V4
	012 Move V9, V3
	013 Move V10, V2
	014 Move V11, V1
	015 Move V12, V0
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF42000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+3777], W8
	026 Compare X20, 0
	027 JumpIfEqual {73}
	028 Move X19, 0xF42000
	029 Move X19, [X19+1448]
	030 Move X0, X20
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Move X8, [X19]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Call LeanTween.options
	041 Compare X0, 0
	042 JumpIfEqual {73}
	043 Move X1, X31
	044 Call LTDescr.setCanvasColor, X0
	045 Compare X0, 0
	046 JumpIfEqual {73}
	047 Move X1, X20
	048 Move X2, X31
	049 Call LTDescr.setRect, X0, X1
	050 Compare X0, 0
	051 JumpIfEqual {73}
	052 Move V0, V12
	053 Move V1, V11
	054 Move V2, V10
	055 Move X1, X31
	056 Call LTDescr.setPoint, X0, X1
	057 Move X1, X0
	058 Move X0, X19
	059 Move V1, V9
	060 Move V3, V8
	061 Move X20, [X31+48]
	062 Move X19, [X31+56]
	063 Move X30, [X31+40]
	064 Move D9, [X31+24]
	065 Move D8, [X31+32]
	066 Move D11, [X31+8]
	067 Move D10, [X31+16]
	068 Move S0, 1
	069 Move S2, W31
	070 Move V12, [X31+64]
	071 Call LeanTween.pushNewTween, X0, X1, V0, X2
	072 Return X0
	073 Call 0x1C17F20

Method: System.Single tweenOnCurve(LTDescr tweenDescr, System.Single ratioPassed)

Disassembly:
	0x031B4940 BL 0x31AF81C
	0x031B4944 CMP W21, 0x9
	0x031B4948 STR X0, [X19 + 0x10]
	0x031B494C B.HI 0x31B4AE8
	0x031B4950 ADRP X9, 0xFFFFFFFFFD9E2000
	0x031B4954 MOV W8, W21
	0x031B4958 ADD X9, X9, 0x398
	0x031B495C ADR X10, 0x14
	0x031B4960 LDRB W11, [X9, X8, LSL]
	0x031B4964 ADD X10, X10, X11, 0x2, LSL
	0x031B4968 MOV X20, X0
	0x031B496C BR X10
	0x031B4970 CBZ X20, 0x31B4B08
	0x031B4974 LDR X0, [X20 + 0x58]
	0x031B4978 CBZ X0, 0x31B4B08
	0x031B497C MOV X1, X31
	0x031B4980 BL 0x3C3F58C
	0x031B4984 STP S0, S1, [X20 + 0x78]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Compare X0, 0
	005 JumpIfEqual {23}
	006 Move X8, [X0+232]
	007 Compare X8, 0
	008 JumpIfEqual {23}
	009 Move X8, [X8+88]
	010 Compare X8, 0
	011 JumpIfEqual {23}
	012 Move V8, [X0+96]
	013 Move V9, [X0+120]
	014 Move X0, X8
	015 Move X1, X31
	016 Call AnimationCurve.Evaluate, X0, V0
	017 Move X30, [X31+16]
	018 Multiply S0, S9, S0
	019 Add S0, S8, S0
	020 Move D9, [X31+32]
	021 Move D8, [X31+40]
	022 Return V0
	023 Call 0x1C17F20

Method: UnityEngine.Vector3 tweenOnCurveVector(LTDescr tweenDescr, System.Single ratioPassed)

Disassembly:
	0x031B4988 STR S2, [X20 + 0x80]
	0x031B498C ADRP X8, 0xF6B000
	0x031B4990 LDR X8, [X8 + 0x428]
	0x031B4994 LDR X20, [X19 + 0x10]
	0x031B4998 LDR X0, [X8]
	0x031B499C BL 0x1C16F10
	0x031B49A0 ADRP X8, 0xF6B000
	0x031B49A4 LDR X8, [X8 + 0x438]
	0x031B49A8 B 0x31B4ACC
	0x031B49AC CBZ X20, 0x31B4B08
	0x031B49B0 LDR X0, [X20 + 0x58]
	0x031B49B4 CBZ X0, 0x31B4B08
	0x031B49B8 LDR X20, [X20 + 0xE8]
	0x031B49BC MOV X1, X31
	0x031B49C0 BL 0x3C3EB78
	0x031B49C4 CBZ X20, 0x31B4B08
	0x031B49C8 STP S0, S1, [X20 + 0x24]
	0x031B49CC STR S2, [X20 + 0x2C]
	0x031B49D0 ADRP X8, 0xF6B000
	0x031B49D4 LDR X8, [X8 + 0x428]
	0x031B49D8 LDR X20, [X19 + 0x10]
	0x031B49DC LDR X0, [X8]
	0x031B49E0 BL 0x1C16F10
	0x031B49E4 ADRP X8, 0xF6B000
	0x031B49E8 LDR X8, [X8 + 0x430]
	0x031B49EC B 0x31B4ACC
	0x031B49F0 ADRP X8, 0xF6B000
	0x031B49F4 LDR X8, [X8 + 0x428]
	0x031B49F8 LDR X0, [X8]
	0x031B49FC BL 0x1C16F10
	0x031B4A00 ADRP X8, 0xF6B000
	0x031B4A04 LDR X8, [X8 + 0x458]
	0x031B4A08 B 0x31B4ACC
	0x031B4A0C ADRP X8, 0xF6B000
	0x031B4A10 LDR X8, [X8 + 0x428]
	0x031B4A14 LDR X0, [X8]
	0x031B4A18 BL 0x1C16F10
	0x031B4A1C ADRP X8, 0xF6B000
	0x031B4A20 LDR X8, [X8 + 0x460]
	0x031B4A24 B 0x31B4ACC
	0x031B4A28 ADRP X8, 0xF6B000
	0x031B4A2C LDR X8, [X8 + 0x428]
	0x031B4A30 LDR X0, [X8]
	0x031B4A34 BL 0x1C16F10
	0x031B4A38 ADRP X8, 0xF6B000
	0x031B4A3C LDR X8, [X8 + 0x468]
	0x031B4A40 B 0x31B4ACC
	0x031B4A44 ADRP X8, 0xF6B000
	0x031B4A48 LDR X8, [X8 + 0x428]
	0x031B4A4C LDR X0, [X8]
	0x031B4A50 BL 0x1C16F10
	0x031B4A54 ADRP X8, 0xF6B000
	0x031B4A58 LDR X8, [X8 + 0x440]
	0x031B4A5C B 0x31B4ACC

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X19
	012 Compare X0, 0
	013 JumpIfEqual {71}
	014 Move X8, [X0+232]
	015 Move X19, X0
	016 Compare X8, 0
	017 JumpIfEqual {71}
	018 Move X0, [X8+88]
	019 Compare X0, 0
	020 JumpIfEqual {71}
	021 Move V11, [X19+96]
	022 Move V12, [X19+120]
	023 Move X1, X31
	024 Move V8, V0
	025 Call AnimationCurve.Evaluate, X0, V0
	026 Move X8, [X19+232]
	027 Compare X8, 0
	028 JumpIfEqual {71}
	029 Move X0, [X8+88]
	030 Compare X0, 0
	031 JumpIfEqual {71}
	032 Move V14, [X19+100]
	033 Move V10, [X19+124]
	034 Move V9, V0
	035 Move V0, V8
	036 Move X1, X31
	037 Call AnimationCurve.Evaluate, X0, V0
	038 Move X8, [X19+232]
	039 Compare X8, 0
	040 JumpIfEqual {71}
	041 Move X0, [X8+88]
	042 Move [X31+12], S14
	043 Compare X0, 0
	044 JumpIfEqual {71}
	045 Move V14, V11
	046 Move V15, [X19+104]
	047 Move V11, [X19+128]
	048 Move V13, V0
	049 Move V0, V8
	050 Move X1, X31
	051 Call AnimationCurve.Evaluate, X0, V0
	052 Multiply S1, S12, S9
	053 Multiply S3, S11, S0
	054 Add S0, S14, S1
	055 Move V1, [X31+12]
	056 Multiply S2, S10, S13
	057 Move X30, [X31+80]
	058 Move X19, [X31+88]
	059 Move D9, [X31+64]
	060 Move D8, [X31+72]
	061 Add S1, S1, S2
	062 Add S2, S15, S3
	063 Move D11, [X31+48]
	064 Move D10, [X31+56]
	065 Move D13, [X31+32]
	066 Move D12, [X31+40]
	067 Move D15, [X31+16]
	068 Move D14, [X31+24]
	069 Add X31, X31, 96
	070 Return X0
	071 Call 0x1C17F20

Method: System.Single easeOutQuadOpt(System.Single start, System.Single diff, System.Single ratioPassed)

Disassembly:
	0x031B4A60 ADRP X8, 0xF6B000
	0x031B4A64 LDR X8, [X8 + 0x428]
	0x031B4A68 LDR X0, [X8]
	0x031B4A6C BL 0x1C16F10
	0x031B4A70 ADRP X8, 0xF6B000
	0x031B4A74 LDR X8, [X8 + 0x448]

ISIL:
	001 Move S3, -2
	002 Multiply S1, S1, S2
	003 Add S2, S2, S3
	004 Multiply S1, S1, S2
	005 Subtract S0, S0, S1
	006 Return V0

Method: System.Single easeInQuadOpt(System.Single start, System.Single diff, System.Single ratioPassed)

Disassembly:
	0x031B4A78 B 0x31B4ACC
	0x031B4A7C ADRP X8, 0xF6B000
	0x031B4A80 LDR X8, [X8 + 0x428]
	0x031B4A84 LDR X0, [X8]

ISIL:
	001 Multiply S1, S1, S2
	002 Multiply S1, S1, S2
	003 Add S0, S1, S0
	004 Return V0

Method: System.Single easeInOutQuadOpt(System.Single start, System.Single diff, System.Single ratioPassed)

Disassembly:
	0x031B4A88 BL 0x1C16F10
	0x031B4A8C ADRP X8, 0xF6B000
	0x031B4A90 LDR X8, [X8 + 0x450]
	0x031B4A94 B 0x31B4ACC
	0x031B4A98 ADRP X8, 0xF6B000
	0x031B4A9C LDR X8, [X8 + 0x428]
	0x031B4AA0 LDR X0, [X8]
	0x031B4AA4 BL 0x1C16F10
	0x031B4AA8 ADRP X8, 0xF6B000
	0x031B4AAC LDR X8, [X8 + 0x470]
	0x031B4AB0 B 0x31B4ACC
	0x031B4AB4 ADRP X8, 0xF6B000
	0x031B4AB8 LDR X8, [X8 + 0x428]
	0x031B4ABC LDR X0, [X8]
	0x031B4AC0 BL 0x1C16F10
	0x031B4AC4 ADRP X8, 0xF6B000
	0x031B4AC8 LDR X8, [X8 + 0x478]
	0x031B4ACC LDR X2, [X8]
	0x031B4AD0 MOV X1, X19
	0x031B4AD4 MOV X3, X31

ISIL:
	001 Add S2, S2, S2
	002 Move S3, 1
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move S3, 0.5
	005 Multiply S1, S1, S3
	006 Multiply S1, S1, S2
	007 Multiply S1, S2, S1
	008 Move S3, -1
	009 Move S4, -0.5
	010 Add S2, S2, S3
	011 Multiply S1, S1, S4
	012 Move S4, -2
	013 Add S4, S2, S4
	014 Multiply S2, S2, S4
	015 Add S2, S2, S3
	016 Multiply S1, S1, S2
	017 Add S0, S1, S0
	018 Return V0

Method: UnityEngine.Vector3 easeInOutQuadOpt(UnityEngine.Vector3 start, UnityEngine.Vector3 diff, System.Single ratioPassed)

Disassembly:
	0x031B4AD8 MOV X21, X0
	0x031B4ADC BL 0x31C0024
	0x031B4AE0 CBZ X20, 0x31B4B08
	0x031B4AE4 STR X21, [X20 + 0xA8]
	0x031B4AE8 LDR X0, [X19 + 0x10]
	0x031B4AEC LDP X20, X19, [X31 + 0x40]
	0x031B4AF0 LDP X22, X21, [X31 + 0x30]
	0x031B4AF4 LDP X24, X23, [X31 + 0x20]
	0x031B4AF8 LDR X30, [X31 + 0x18]
	0x031B4AFC LDP D9, D8, [X31 + 0x8]
	0x031B4B00 LDR V10, [X31], #0x50
	0x031B4B04 RET
	0x031B4B08 BL 0x1C16F20
	0x031B4B0C MOV X1, X31
	0x031B4B10 B 0x33BDD8C
	0x031B4B14 STP D11, D10, [X31 - 0x60]!
	0x031B4B18 STP D9, D8, [X31 + 0x10]
	0x031B4B1C STR X30, [X31 + 0x20]
	0x031B4B20 STP X24, X23, [X31 + 0x30]
	0x031B4B24 STP X22, X21, [X31 + 0x40]
	0x031B4B28 STP X20, X19, [X31 + 0x50]
	0x031B4B2C ADRP X19, 0x1227000
	0x031B4B30 ADRP X23, 0xF6B000
	0x031B4B34 LDRB W8, [X19 + 0xEC5]
	0x031B4B38 LDR X23, [X23 + 0x480]
	0x031B4B3C MOV V8.16B, V3.16B
	0x031B4B40 MOV V9.16B, V2.16B
	0x031B4B44 MOV V10.16B, V1.16B
	0x031B4B48 MOV V11.16B, V0.16B
	0x031B4B4C MOV W21, W2
	0x031B4B50 MOV X20, X1
	0x031B4B54 MOV X22, X0
	0x031B4B58 TBNZ X8, 0x0, 0x31B4C00
	0x031B4B5C ADRP X0, 0xF6B000
	0x031B4B60 LDR X0, [X0 + 0x428]

ISIL:
	001 Add S6, S6, S6
	002 Move S7, 1
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move S7, 0.5
	005 Multiply S3, S3, S7
	006 Multiply S4, S4, S7
	007 Multiply S5, S5, S7
	008 Multiply S3, S3, S6
	009 Multiply S4, S4, S6
	010 Multiply S5, S5, S6
	011 Multiply S3, S6, S3
	012 Multiply S4, S6, S4
	013 Multiply S5, S6, S5
	014 Add S0, S0, S3
	015 Add S1, S1, S4
	016 Add S2, S2, S5
	017 Return X0
	018 Move S7, -1
	019 Move S16, 0.5
	020 Multiply S3, S3, S16
	021 Multiply S4, S4, S16
	022 Multiply S5, S5, S16
	023 Move S16, -2
	024 Add S6, S6, S7
	025 Add S16, S6, S16
	026 Multiply S6, S6, S16
	027 Add S6, S6, S7
	028 Multiply S3, S3, S6
	029 Multiply S4, S4, S6
	030 Multiply S5, S5, S6
	031 Subtract S0, S0, S3
	032 Subtract S1, S1, S4
	033 Subtract S2, S2, S5
	034 Return X0

Method: System.Single linear(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4B64 BL 0x1C16CF4
	0x031B4B68 ADRP X0, 0xF41000
	0x031B4B6C LDR X0, [X0 + 0x5A8]
	0x031B4B70 BL 0x1C16CF4
	0x031B4B74 ADRP X0, 0xF6B000
	0x031B4B78 LDR X0, [X0 + 0x488]
	0x031B4B7C BL 0x1C16CF4
	0x031B4B80 ADRP X0, 0xF6B000
	0x031B4B84 LDR X0, [X0 + 0x490]

ISIL:
	001 Move S3, 1
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Move S4, W31
	004 NotImplemented "Instruction FMIN not yet implemented."
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Subtract S1, S1, S0
	007 Multiply S1, S1, S2
	008 Add S0, S1, S0
	009 Return V0

Method: System.Single clerp(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4B88 BL 0x1C16CF4
	0x031B4B8C ADRP X0, 0xF6B000
	0x031B4B90 LDR X0, [X0 + 0x498]
	0x031B4B94 BL 0x1C16CF4
	0x031B4B98 ADRP X0, 0xF6B000
	0x031B4B9C LDR X0, [X0 + 0x4A0]
	0x031B4BA0 BL 0x1C16CF4
	0x031B4BA4 ADRP X0, 0xF6B000
	0x031B4BA8 LDR X0, [X0 + 0x4A8]
	0x031B4BAC BL 0x1C16CF4
	0x031B4BB0 ADRP X0, 0xF6B000
	0x031B4BB4 LDR X0, [X0 + 0x4B0]
	0x031B4BB8 BL 0x1C16CF4
	0x031B4BBC ADRP X0, 0xF6B000
	0x031B4BC0 LDR X0, [X0 + 0x4B8]
	0x031B4BC4 BL 0x1C16CF4
	0x031B4BC8 ADRP X0, 0xF6B000
	0x031B4BCC LDR X0, [X0 + 0x4C0]
	0x031B4BD0 BL 0x1C16CF4
	0x031B4BD4 ADRP X0, 0xF6B000
	0x031B4BD8 LDR X0, [X0 + 0x4C8]
	0x031B4BDC BL 0x1C16CF4
	0x031B4BE0 ADRP X0, 0xF6B000
	0x031B4BE4 LDR X0, [X0 + 0x4D0]
	0x031B4BE8 BL 0x1C16CF4

ISIL:
	001 Move W8, 0xC3340000
	002 Subtract S3, S1, S0
	003 Move S4, W8
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Move W8, 0x43B40000
	006 Move S3, W8
	007 Subtract S3, S3, S0
	008 Add S1, S3, S1
	009 Multiply S1, S1, S2
	010 Move W8, 0x43340000
	011 Move S4, W8
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 Move W8, 0x43B40000
	014 Move S3, W8
	015 Subtract S1, S3, S1
	016 Add S1, S1, S0
	017 Multiply S1, S1, S2
	018 Subtract S0, S0, S1
	019 Return V0
	020 Multiply S1, S3, S2
	021 Add S0, S1, S0
	022 Return V0

Method: System.Single spring(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4BEC ADRP X0, 0xF6B000
	0x031B4BF0 LDR X0, [X0 + 0x480]
	0x031B4BF4 BL 0x1C16CF4
	0x031B4BF8 MOVZ W8, 0x1
	0x031B4BFC STRB W8, [X19 + 0xEC5]
	0x031B4C00 LDR X0, [X23]
	0x031B4C04 BL 0x1C16F10
	0x031B4C08 MOV X1, X31
	0x031B4C0C MOV X19, X0
	0x031B4C10 BL 0x33BDD8C
	0x031B4C14 CBZ X19, 0x31B4E88
	0x031B4C18 STP S11, S10, [X19 + 0x18]
	0x031B4C1C STP S9, S8, [X19 + 0x20]
	0x031B4C20 CBZ X22, 0x31B4E88
	0x031B4C24 ADRP X23, 0xF41000
	0x031B4C28 LDR X23, [X23 + 0x5A8]
	0x031B4C2C MOV X0, X22
	0x031B4C30 MOV X1, X31
	0x031B4C34 BL 0x3C32ECC
	0x031B4C38 ADRP X24, 0x1224000
	0x031B4C3C LDRB W8, [X24 + 0x783]
	0x031B4C40 MOV X22, X0
	0x031B4C44 CBNZ W8, 0x31B4C5C
	0x031B4C48 ADRP X0, 0xF3F000
	0x031B4C4C LDR X0, [X0 + 0x5A0]
	0x031B4C50 BL 0x1C16CF4
	0x031B4C54 MOVZ W8, 0x1
	0x031B4C58 STRB W8, [X24 + 0x783]
	0x031B4C5C ADRP X8, 0xF3F000
	0x031B4C60 LDR X8, [X8 + 0x5A0]
	0x031B4C64 LDR X0, [X23]
	0x031B4C68 LDR X8, [X8]
	0x031B4C6C LDR W9, [X0 + 0xE0]
	0x031B4C70 LDR X8, [X8 + 0xB8]
	0x031B4C74 LDP S10, S9, [X8]
	0x031B4C78 LDR V8, [X8 + 0x8]
	0x031B4C7C CBNZ W9, 0x31B4C84
	0x031B4C80 BL 0x1C16DFC
	0x031B4C84 BL 0x31AF454
	0x031B4C88 CBZ X0, 0x31B4E88
	0x031B4C8C MOV X1, X31
	0x031B4C90 BL 0x31BFF68
	0x031B4C94 CBZ X0, 0x31B4E88
	0x031B4C98 MOV X1, X20

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move S12, 1
	009 Move X8, -40673280
	010 Move V9, V0
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move S0, W31
	013 Move V3, [X8+3916]
	014 Move X8, -40669184
	015 NotImplemented "Instruction FMIN not yet implemented."
	016 Move V8, V1
	017 Move S1, 2.5
	018 NotImplemented "Instruction FCSEL not yet implemented."
	019 Move V0, [X8+860]
	020 Multiply S1, S13, S1
	021 Multiply S1, S13, S1
	022 Multiply S1, S13, S1
	023 Multiply S2, S13, S3
	024 Add S0, S1, S0
	025 Multiply S0, S2, S0
	026 Call 0x3EB2B70
	027 Move X8, -40669184
	028 Move V1, [X8+876]
	029 Subtract S11, S12, S13
	030 Move V10, V0
	031 Move V0, V11
	032 Call 0x3EB2B50
	033 Move X8, -40669184
	034 Move V1, [X8+276]
	035 Multiply S0, S0, S10
	036 Add S0, S13, S0
	037 Move X30, [X31+48]
	038 Multiply S1, S11, S1
	039 Add S1, S1, S12
	040 Multiply S0, S1, S0
	041 Subtract S1, S8, S9
	042 Multiply S0, S1, S0
	043 Add S0, S0, S9
	044 Move D9, [X31+32]
	045 Move D8, [X31+40]
	046 Move D11, [X31+16]
	047 Move D10, [X31+24]
	048 Move D13, [X31+64]
	049 Move D12, [X31+72]
	050 Return V0

Method: System.Single easeInQuad(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4C9C MOV X2, X31
	0x031B4CA0 BL 0x31C24A8
	0x031B4CA4 MOVN W8, 0x80800000
	0x031B4CA8 MOV X1, X0
	0x031B4CAC FMOV S3, W8

ISIL:
	001 Subtract S1, S1, S0
	002 Multiply S1, S1, S2
	003 Multiply S1, S1, S2
	004 Add S0, S1, S0
	005 Return V0

Method: System.Single easeOutQuad(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4CB0 MOV X0, X22
	0x031B4CB4 MOV V0.16B, V10.16B
	0x031B4CB8 MOV V1.16B, V9.16B
	0x031B4CBC MOV V2.16B, V8.16B
	0x031B4CC0 BL 0x31AF81C
	0x031B4CC4 CMP W21, 0x9
	0x031B4CC8 STR X0, [X19 + 0x10]

ISIL:
	001 Subtract S1, S1, S0
	002 Move S3, -2
	003 Multiply S1, S1, S2
	004 Add S2, S2, S3
	005 Multiply S1, S1, S2
	006 Subtract S0, S0, S1
	007 Return V0

Method: System.Single easeInOutQuad(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4CCC B.HI 0x31B4E68
	0x031B4CD0 ADRP X9, 0xFFFFFFFFFD9E2000
	0x031B4CD4 MOV W8, W21
	0x031B4CD8 ADD X9, X9, 0x398
	0x031B4CDC ADR X10, 0x14
	0x031B4CE0 LDRB W11, [X9, X8, LSL]
	0x031B4CE4 ADD X10, X10, X11, 0x2, LSL
	0x031B4CE8 MOV X20, X0
	0x031B4CEC BR X10
	0x031B4CF0 CBZ X20, 0x31B4E88
	0x031B4CF4 LDR X0, [X20 + 0x58]
	0x031B4CF8 CBZ X0, 0x31B4E88
	0x031B4CFC MOV X1, X31
	0x031B4D00 BL 0x3C3F58C
	0x031B4D04 STP S0, S1, [X20 + 0x78]
	0x031B4D08 STR S2, [X20 + 0x80]
	0x031B4D0C ADRP X8, 0xF6B000
	0x031B4D10 LDR X8, [X8 + 0x428]
	0x031B4D14 LDR X20, [X19 + 0x10]
	0x031B4D18 LDR X0, [X8]
	0x031B4D1C BL 0x1C16F10

ISIL:
	001 Add S2, S2, S2
	002 Move S3, 1
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Subtract S1, S1, S0
	005 Move S3, 0.5
	006 Multiply S1, S1, S3
	007 Multiply S1, S1, S2
	008 Multiply S1, S2, S1
	009 Move S3, -1
	010 Move S4, -0.5
	011 Add S2, S2, S3
	012 Multiply S1, S1, S4
	013 Move S4, -2
	014 Add S4, S2, S4
	015 Multiply S2, S2, S4
	016 Add S2, S2, S3
	017 Multiply S1, S1, S2
	018 Add S0, S1, S0
	019 Return V0

Method: System.Single easeInOutQuadOpt2(System.Single start, System.Single diffBy2, System.Single val, System.Single val2)

Disassembly:
	0x031B4D20 ADRP X8, 0xF6B000
	0x031B4D24 LDR X8, [X8 + 0x490]
	0x031B4D28 B 0x31B4E4C
	0x031B4D2C CBZ X20, 0x31B4E88
	0x031B4D30 LDR X0, [X20 + 0x58]
	0x031B4D34 CBZ X0, 0x31B4E88
	0x031B4D38 LDR X20, [X20 + 0xE8]
	0x031B4D3C MOV X1, X31
	0x031B4D40 BL 0x3C3EB78
	0x031B4D44 CBZ X20, 0x31B4E88
	0x031B4D48 STP S0, S1, [X20 + 0x24]
	0x031B4D4C STR S2, [X20 + 0x2C]
	0x031B4D50 ADRP X8, 0xF6B000
	0x031B4D54 LDR X8, [X8 + 0x428]

ISIL:
	001 Add S2, S2, S2
	002 Move S4, 1
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Multiply S1, S1, S3
	005 Add S0, S1, S0
	006 Return V0
	007 Move S2, -2
	008 Add S2, S3, S2
	009 Move S3, -1
	010 Add S2, S2, S3
	011 Multiply S1, S2, S1
	012 Subtract S0, S0, S1
	013 Return V0

Method: System.Single easeInCubic(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4D58 LDR X20, [X19 + 0x10]
	0x031B4D5C LDR X0, [X8]
	0x031B4D60 BL 0x1C16F10
	0x031B4D64 ADRP X8, 0xF6B000
	0x031B4D68 LDR X8, [X8 + 0x488]
	0x031B4D6C B 0x31B4E4C

ISIL:
	001 Subtract S1, S1, S0
	002 Multiply S1, S1, S2
	003 Multiply S1, S1, S2
	004 Multiply S1, S1, S2
	005 Add S0, S1, S0
	006 Return V0

Method: System.Single easeOutCubic(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4D70 ADRP X8, 0xF6B000
	0x031B4D74 LDR X8, [X8 + 0x428]
	0x031B4D78 LDR X0, [X8]
	0x031B4D7C BL 0x1C16F10
	0x031B4D80 ADRP X8, 0xF6B000
	0x031B4D84 LDR X8, [X8 + 0x4B0]
	0x031B4D88 B 0x31B4E4C
	0x031B4D8C ADRP X8, 0xF6B000
	0x031B4D90 LDR X8, [X8 + 0x428]
	0x031B4D94 LDR X0, [X8]

ISIL:
	001 Move S3, -1
	002 Add S2, S2, S3
	003 Multiply S3, S2, S2
	004 Multiply S2, S2, S3
	005 Move S3, 1
	006 Subtract S1, S1, S0
	007 Add S2, S2, S3
	008 Multiply S1, S1, S2
	009 Add S0, S1, S0
	010 Return V0

Method: System.Single easeInOutCubic(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4D98 BL 0x1C16F10
	0x031B4D9C ADRP X8, 0xF6B000
	0x031B4DA0 LDR X8, [X8 + 0x4B8]
	0x031B4DA4 B 0x31B4E4C
	0x031B4DA8 ADRP X8, 0xF6B000
	0x031B4DAC LDR X8, [X8 + 0x428]
	0x031B4DB0 LDR X0, [X8]
	0x031B4DB4 BL 0x1C16F10
	0x031B4DB8 ADRP X8, 0xF6B000
	0x031B4DBC LDR X8, [X8 + 0x4C0]
	0x031B4DC0 B 0x31B4E4C
	0x031B4DC4 ADRP X8, 0xF6B000
	0x031B4DC8 LDR X8, [X8 + 0x428]
	0x031B4DCC LDR X0, [X8]
	0x031B4DD0 BL 0x1C16F10
	0x031B4DD4 ADRP X8, 0xF6B000
	0x031B4DD8 LDR X8, [X8 + 0x498]
	0x031B4DDC B 0x31B4E4C
	0x031B4DE0 ADRP X8, 0xF6B000
	0x031B4DE4 LDR X8, [X8 + 0x428]
	0x031B4DE8 LDR X0, [X8]
	0x031B4DEC BL 0x1C16F10

ISIL:
	001 Add S2, S2, S2
	002 Move S3, 1
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Subtract S1, S1, S0
	005 Move S3, 0.5
	006 Multiply S1, S1, S3
	007 Multiply S1, S1, S2
	008 Multiply S1, S2, S1
	009 Multiply S1, S2, S1
	010 Move S3, -2
	011 Add S2, S2, S3
	012 Multiply S3, S2, S2
	013 Move S4, 0.5
	014 Multiply S2, S2, S3
	015 Move S3, 2
	016 Multiply S1, S1, S4
	017 Add S2, S2, S3
	018 Multiply S1, S1, S2
	019 Add S0, S1, S0
	020 Return V0

Method: System.Single easeInQuart(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4DF0 ADRP X8, 0xF6B000
	0x031B4DF4 LDR X8, [X8 + 0x4A0]
	0x031B4DF8 B 0x31B4E4C
	0x031B4DFC ADRP X8, 0xF6B000
	0x031B4E00 LDR X8, [X8 + 0x428]
	0x031B4E04 LDR X0, [X8]
	0x031B4E08 BL 0x1C16F10

ISIL:
	001 Subtract S1, S1, S0
	002 Multiply S1, S1, S2
	003 Multiply S1, S1, S2
	004 Multiply S1, S1, S2
	005 Multiply S1, S1, S2
	006 Add S0, S1, S0
	007 Return V0

Method: System.Single easeOutQuart(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4E0C ADRP X8, 0xF6B000
	0x031B4E10 LDR X8, [X8 + 0x4A8]
	0x031B4E14 B 0x31B4E4C
	0x031B4E18 ADRP X8, 0xF6B000
	0x031B4E1C LDR X8, [X8 + 0x428]
	0x031B4E20 LDR X0, [X8]
	0x031B4E24 BL 0x1C16F10
	0x031B4E28 ADRP X8, 0xF6B000
	0x031B4E2C LDR X8, [X8 + 0x4C8]
	0x031B4E30 B 0x31B4E4C

ISIL:
	001 Move S3, -1
	002 Add S2, S2, S3
	003 Multiply S4, S2, S2
	004 Multiply S4, S2, S4
	005 Multiply S2, S2, S4
	006 Subtract S1, S1, S0
	007 Add S2, S2, S3
	008 Multiply S1, S1, S2
	009 Subtract S0, S0, S1
	010 Return V0

Method: System.Single easeInOutQuart(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4E34 ADRP X8, 0xF6B000
	0x031B4E38 LDR X8, [X8 + 0x428]
	0x031B4E3C LDR X0, [X8]
	0x031B4E40 BL 0x1C16F10
	0x031B4E44 ADRP X8, 0xF6B000
	0x031B4E48 LDR X8, [X8 + 0x4D0]
	0x031B4E4C LDR X2, [X8]
	0x031B4E50 MOV X1, X19
	0x031B4E54 MOV X3, X31
	0x031B4E58 MOV X21, X0
	0x031B4E5C BL 0x31C0024
	0x031B4E60 CBZ X20, 0x31B4E88
	0x031B4E64 STR X21, [X20 + 0xA8]
	0x031B4E68 LDR X0, [X19 + 0x10]
	0x031B4E6C LDP X20, X19, [X31 + 0x50]
	0x031B4E70 LDP X22, X21, [X31 + 0x40]
	0x031B4E74 LDP X24, X23, [X31 + 0x30]
	0x031B4E78 LDR X30, [X31 + 0x20]
	0x031B4E7C LDP D9, D8, [X31 + 0x10]
	0x031B4E80 LDP D11, D10, [X31], #0x60
	0x031B4E84 RET
	0x031B4E88 BL 0x1C16F20
	0x031B4E8C MOV X1, X31

ISIL:
	001 Add S2, S2, S2
	002 Move S3, 1
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Subtract S1, S1, S0
	005 Move S3, 0.5
	006 Multiply S1, S1, S3
	007 Multiply S1, S1, S2
	008 Multiply S1, S2, S1
	009 Multiply S1, S2, S1
	010 Multiply S1, S2, S1
	011 Move S3, -2
	012 Move S4, -0.5
	013 Add S2, S2, S3
	014 Multiply S1, S1, S4
	015 Multiply S4, S2, S2
	016 Multiply S4, S2, S4
	017 Multiply S2, S2, S4
	018 Add S2, S2, S3
	019 Multiply S1, S1, S2
	020 Add S0, S1, S0
	021 Return V0

Method: System.Single easeInQuint(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4E90 B 0x33BDD8C
	0x031B4E94 STR D12, [X31 - 0x60]!
	0x031B4E98 STP D11, D10, [X31 + 0x8]
	0x031B4E9C STP D9, D8, [X31 + 0x18]
	0x031B4EA0 STR X30, [X31 + 0x28]
	0x031B4EA4 STP X24, X23, [X31 + 0x30]
	0x031B4EA8 STP X22, X21, [X31 + 0x40]
	0x031B4EAC STP X20, X19, [X31 + 0x50]

ISIL:
	001 Subtract S1, S1, S0
	002 Multiply S1, S1, S2
	003 Multiply S1, S1, S2
	004 Multiply S1, S1, S2
	005 Multiply S1, S1, S2
	006 Multiply S1, S1, S2
	007 Add S0, S1, S0
	008 Return V0

Method: System.Single easeOutQuint(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4EB0 ADRP X19, 0x1227000
	0x031B4EB4 ADRP X23, 0xF6B000
	0x031B4EB8 LDRB W8, [X19 + 0xEC6]
	0x031B4EBC LDR X23, [X23 + 0x4D8]
	0x031B4EC0 MOV V8.16B, V4.16B
	0x031B4EC4 MOV V9.16B, V3.16B
	0x031B4EC8 MOV V10.16B, V2.16B
	0x031B4ECC MOV V11.16B, V1.16B
	0x031B4ED0 MOV V12.16B, V0.16B
	0x031B4ED4 MOV W21, W2
	0x031B4ED8 MOV X20, X1
	0x031B4EDC MOV X22, X0

ISIL:
	001 Move S3, -1
	002 Add S2, S2, S3
	003 Multiply S3, S2, S2
	004 Multiply S3, S2, S3
	005 Multiply S3, S2, S3
	006 Multiply S2, S2, S3
	007 Move S3, 1
	008 Subtract S1, S1, S0
	009 Add S2, S2, S3
	010 Multiply S1, S1, S2
	011 Add S0, S1, S0
	012 Return V0

Method: System.Single easeInOutQuint(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4EE0 TBNZ X8, 0x0, 0x31B4F88
	0x031B4EE4 ADRP X0, 0xF6B000
	0x031B4EE8 LDR X0, [X0 + 0x428]
	0x031B4EEC BL 0x1C16CF4
	0x031B4EF0 ADRP X0, 0xF41000
	0x031B4EF4 LDR X0, [X0 + 0x5A8]
	0x031B4EF8 BL 0x1C16CF4
	0x031B4EFC ADRP X0, 0xF6B000
	0x031B4F00 LDR X0, [X0 + 0x4E0]
	0x031B4F04 BL 0x1C16CF4
	0x031B4F08 ADRP X0, 0xF6B000
	0x031B4F0C LDR X0, [X0 + 0x4E8]
	0x031B4F10 BL 0x1C16CF4
	0x031B4F14 ADRP X0, 0xF6B000
	0x031B4F18 LDR X0, [X0 + 0x4F0]
	0x031B4F1C BL 0x1C16CF4
	0x031B4F20 ADRP X0, 0xF6B000
	0x031B4F24 LDR X0, [X0 + 0x4F8]
	0x031B4F28 BL 0x1C16CF4
	0x031B4F2C ADRP X0, 0xF6B000
	0x031B4F30 LDR X0, [X0 + 0x500]
	0x031B4F34 BL 0x1C16CF4
	0x031B4F38 ADRP X0, 0xF6B000
	0x031B4F3C LDR X0, [X0 + 0x508]
	0x031B4F40 BL 0x1C16CF4
	0x031B4F44 ADRP X0, 0xF6B000

ISIL:
	001 Add S2, S2, S2
	002 Move S3, 1
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Subtract S1, S1, S0
	005 Move S3, 0.5
	006 Multiply S1, S1, S3
	007 Multiply S1, S1, S2
	008 Multiply S1, S2, S1
	009 Multiply S1, S2, S1
	010 Multiply S1, S2, S1
	011 Multiply S1, S2, S1
	012 Move S3, -2
	013 Add S2, S2, S3
	014 Multiply S3, S2, S2
	015 Multiply S3, S2, S3
	016 Multiply S3, S2, S3
	017 Move S4, 0.5
	018 Multiply S2, S2, S3
	019 Move S3, 2
	020 Multiply S1, S1, S4
	021 Add S2, S2, S3
	022 Multiply S1, S1, S2
	023 Add S0, S1, S0
	024 Return V0

Method: System.Single easeInSine(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4F48 LDR X0, [X0 + 0x510]
	0x031B4F4C BL 0x1C16CF4
	0x031B4F50 ADRP X0, 0xF6B000
	0x031B4F54 LDR X0, [X0 + 0x518]
	0x031B4F58 BL 0x1C16CF4
	0x031B4F5C ADRP X0, 0xF6B000
	0x031B4F60 LDR X0, [X0 + 0x520]
	0x031B4F64 BL 0x1C16CF4
	0x031B4F68 ADRP X0, 0xF6B000
	0x031B4F6C LDR X0, [X0 + 0x528]
	0x031B4F70 BL 0x1C16CF4
	0x031B4F74 ADRP X0, 0xF6B000
	0x031B4F78 LDR X0, [X0 + 0x4D8]
	0x031B4F7C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move X8, -40669184
	005 Move V8, V0
	006 Move V0, [X8+384]
	007 Subtract S9, S1, S8
	008 Multiply S0, S2, S0
	009 Call 0x3EB2BD0
	010 Move X30, [X31+16]
	011 Multiply S0, S9, S0
	012 Subtract S0, S9, S0
	013 Add S0, S0, S8
	014 Move D9, [X31+32]
	015 Move D8, [X31+40]
	016 Return V0

Method: System.Single easeOutSine(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4F80 MOVZ W8, 0x1
	0x031B4F84 STRB W8, [X19 + 0xEC6]
	0x031B4F88 LDR X0, [X23]
	0x031B4F8C BL 0x1C16F10
	0x031B4F90 MOV X1, X31
	0x031B4F94 MOV X19, X0
	0x031B4F98 BL 0x33BDD8C
	0x031B4F9C CBZ X19, 0x31B51F8
	0x031B4FA0 STP S12, S11, [X19 + 0x18]
	0x031B4FA4 STP S10, S9, [X19 + 0x20]
	0x031B4FA8 STR S8, [X19 + 0x28]
	0x031B4FAC CBZ X22, 0x31B51F8
	0x031B4FB0 ADRP X23, 0xF41000

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move X8, -40669184
	005 Move V8, V0
	006 Move V0, [X8+384]
	007 Subtract S9, S1, S8
	008 Multiply S0, S2, S0
	009 Call 0x3EB2B70
	010 Move X30, [X31+16]
	011 Multiply S0, S9, S0
	012 Add S0, S0, S8
	013 Move D9, [X31+32]
	014 Move D8, [X31+40]
	015 Return V0

Method: System.Single easeInOutSine(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4FB4 LDR X23, [X23 + 0x5A8]
	0x031B4FB8 MOV X0, X22
	0x031B4FBC MOV X1, X31
	0x031B4FC0 BL 0x3C32ECC
	0x031B4FC4 ADRP X24, 0x1224000
	0x031B4FC8 LDRB W8, [X24 + 0x783]
	0x031B4FCC MOV X22, X0
	0x031B4FD0 CBNZ W8, 0x31B4FE8
	0x031B4FD4 ADRP X0, 0xF3F000
	0x031B4FD8 LDR X0, [X0 + 0x5A0]
	0x031B4FDC BL 0x1C16CF4
	0x031B4FE0 MOVZ W8, 0x1
	0x031B4FE4 STRB W8, [X24 + 0x783]
	0x031B4FE8 ADRP X8, 0xF3F000
	0x031B4FEC LDR X8, [X8 + 0x5A0]
	0x031B4FF0 LDR X0, [X23]
	0x031B4FF4 LDR X8, [X8]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move X8, -40673280
	005 Move V8, V0
	006 Move V0, [X8+3916]
	007 Subtract S9, S1, S8
	008 Multiply S0, S2, S0
	009 Call 0x3EB2BD0
	010 Move S1, -0.5
	011 Move S2, -1
	012 Move X30, [X31+16]
	013 Multiply S1, S9, S1
	014 Add S0, S0, S2
	015 Multiply S0, S1, S0
	016 Add S0, S8, S0
	017 Move D9, [X31+32]
	018 Move D8, [X31+40]
	019 Return V0

Method: System.Single easeInExpo(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B4FF8 LDR W9, [X0 + 0xE0]
	0x031B4FFC LDR X8, [X8 + 0xB8]
	0x031B5000 LDP S10, S9, [X8]
	0x031B5004 LDR V8, [X8 + 0x8]
	0x031B5008 CBNZ W9, 0x31B5010
	0x031B500C BL 0x1C16DFC
	0x031B5010 BL 0x31AF454
	0x031B5014 CBZ X0, 0x31B51F8
	0x031B5018 MOV X1, X31
	0x031B501C BL 0x31BFF68
	0x031B5020 CBZ X0, 0x31B51F8
	0x031B5024 MOV X1, X20
	0x031B5028 MOV X2, X31
	0x031B502C BL 0x31C24A8

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move V8, V0
	005 Subtract S9, S1, S0
	006 Move S0, -1
	007 Add S0, S2, S0
	008 Move S1, 10
	009 Multiply S0, S0, S1
	010 Call 0x3EB2B90
	011 Move X30, [X31+16]
	012 Multiply S0, S9, S0
	013 Add S0, S0, S8
	014 Move D9, [X31+32]
	015 Move D8, [X31+40]
	016 Return V0

Method: System.Single easeOutExpo(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B5030 MOVN W8, 0x80800000
	0x031B5034 MOV X1, X0
	0x031B5038 FMOV S3, W8
	0x031B503C MOV X0, X22
	0x031B5040 MOV V0.16B, V10.16B
	0x031B5044 MOV V1.16B, V9.16B
	0x031B5048 MOV V2.16B, V8.16B
	0x031B504C BL 0x31AF81C
	0x031B5050 CMP W21, 0x9
	0x031B5054 STR X0, [X19 + 0x10]
	0x031B5058 B.HI 0x31B51D4
	0x031B505C ADRP X9, 0xFFFFFFFFFD9E1000
	0x031B5060 MOV W8, W21
	0x031B5064 ADD X9, X9, 0x3A2

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move V8, V0
	005 Subtract S9, S1, S0
	006 Move S0, -10
	007 Multiply S0, S2, S0
	008 Call 0x3EB2B90
	009 Move S1, 1
	010 Move X30, [X31+16]
	011 Subtract S0, S1, S0
	012 Multiply S0, S9, S0
	013 Add S0, S0, S8
	014 Move D9, [X31+32]
	015 Move D8, [X31+40]
	016 Return V0

Method: System.Single easeInOutExpo(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B5068 ADR X10, 0x14
	0x031B506C LDRB W11, [X9, X8, LSL]
	0x031B5070 ADD X10, X10, X11, 0x2, LSL
	0x031B5074 MOV X20, X0
	0x031B5078 BR X10
	0x031B507C ADRP X8, 0xF6A000
	0x031B5080 LDR X8, [X8 + 0x428]
	0x031B5084 LDR X0, [X8]
	0x031B5088 BL 0x1C16F10
	0x031B508C ADRP X8, 0xF6A000
	0x031B5090 LDR X8, [X8 + 0x4E8]
	0x031B5094 B 0x31B51B8
	0x031B5098 CBZ X20, 0x31B51F8
	0x031B509C LDR X0, [X20 + 0x58]
	0x031B50A0 CBZ X0, 0x31B51F8
	0x031B50A4 LDR X20, [X20 + 0xE8]
	0x031B50A8 MOV X1, X31
	0x031B50AC BL 0x3C3EB78
	0x031B50B0 CBZ X20, 0x31B51F8
	0x031B50B4 STP S0, S1, [X20 + 0x24]
	0x031B50B8 STR S2, [X20 + 0x2C]
	0x031B50BC ADRP X8, 0xF6A000
	0x031B50C0 LDR X8, [X8 + 0x428]
	0x031B50C4 LDR X20, [X19 + 0x10]
	0x031B50C8 LDR X0, [X8]
	0x031B50CC BL 0x1C16F10
	0x031B50D0 ADRP X8, 0xF6A000
	0x031B50D4 LDR X8, [X8 + 0x4E0]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move V8, V0
	005 Add S0, S2, S2
	006 Subtract S9, S1, S8
	007 Move S1, -1
	008 Move S2, 1
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Add S0, S0, S1
	011 Move S1, 10
	012 Multiply S0, S0, S1
	013 Call 0x3EB2B90
	014 Move S1, 0.5
	015 Multiply S1, S9, S1
	016 Move S1, -10
	017 Multiply S0, S0, S1
	018 Call 0x3EB2B90
	019 Move S1, 0.5
	020 Move S2, 2
	021 Multiply S1, S9, S1
	022 Subtract S0, S2, S0
	023 Move X30, [X31+16]
	024 Multiply S0, S1, S0
	025 Add S0, S0, S8
	026 Move D9, [X31+32]
	027 Move D8, [X31+40]
	028 Return V0

Method: System.Single easeInCirc(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B50D8 B 0x31B51B8
	0x031B50DC ADRP X8, 0xF6A000
	0x031B50E0 LDR X8, [X8 + 0x428]
	0x031B50E4 LDR X0, [X8]
	0x031B50E8 BL 0x1C16F10
	0x031B50EC ADRP X8, 0xF6A000
	0x031B50F0 LDR X8, [X8 + 0x508]
	0x031B50F4 B 0x31B51B8
	0x031B50F8 ADRP X8, 0xF6A000
	0x031B50FC LDR X8, [X8 + 0x428]

ISIL:
	001 Multiply S2, S2, S2
	002 Move S3, 1
	003 Subtract S2, S3, S2
	004 NotImplemented "Instruction FSQRT not yet implemented."
	005 Move S3, -1
	006 Subtract S1, S1, S0
	007 Add S2, S2, S3
	008 Multiply S1, S1, S2
	009 Subtract S0, S0, S1
	010 Return V0

Method: System.Single easeOutCirc(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B5100 LDR X0, [X8]
	0x031B5104 BL 0x1C16F10
	0x031B5108 ADRP X8, 0xF6A000
	0x031B510C LDR X8, [X8 + 0x510]
	0x031B5110 B 0x31B51B8
	0x031B5114 ADRP X8, 0xF6A000
	0x031B5118 LDR X8, [X8 + 0x428]
	0x031B511C LDR X0, [X8]
	0x031B5120 BL 0x1C16F10
	0x031B5124 ADRP X8, 0xF6A000

ISIL:
	001 Move S3, -1
	002 Add S2, S2, S3
	003 Multiply S2, S2, S2
	004 Move S3, 1
	005 Subtract S2, S3, S2
	006 Subtract S1, S1, S0
	007 NotImplemented "Instruction FSQRT not yet implemented."
	008 Multiply S1, S1, S2
	009 Add S0, S1, S0
	010 Return V0

Method: System.Single easeInOutCirc(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B5128 LDR X8, [X8 + 0x518]
	0x031B512C B 0x31B51B8
	0x031B5130 ADRP X8, 0xF6A000
	0x031B5134 LDR X8, [X8 + 0x428]
	0x031B5138 LDR X0, [X8]
	0x031B513C BL 0x1C16F10
	0x031B5140 ADRP X8, 0xF6A000
	0x031B5144 LDR X8, [X8 + 0x4F0]
	0x031B5148 B 0x31B51B8
	0x031B514C ADRP X8, 0xF6A000
	0x031B5150 LDR X8, [X8 + 0x428]
	0x031B5154 LDR X0, [X8]
	0x031B5158 BL 0x1C16F10
	0x031B515C ADRP X8, 0xF6A000
	0x031B5160 LDR X8, [X8 + 0x4F8]
	0x031B5164 B 0x31B51B8
	0x031B5168 ADRP X8, 0xF6A000
	0x031B516C LDR X8, [X8 + 0x428]
	0x031B5170 LDR X0, [X8]
	0x031B5174 BL 0x1C16F10
	0x031B5178 ADRP X8, 0xF6A000

ISIL:
	001 Add S2, S2, S2
	002 Move S3, 1
	003 Move S4, 0.5
	004 Move S5, -0.5
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Move S5, -2
	008 Add S5, S2, S5
	009 Multiply S2, S2, S2
	010 Multiply S5, S5, S5
	011 NotImplemented "Instruction FCSEL not yet implemented."
	012 Move S5, -1
	013 Subtract S2, S3, S2
	014 Subtract S1, S1, S0
	015 NotImplemented "Instruction FCSEL not yet implemented."
	016 NotImplemented "Instruction FSQRT not yet implemented."
	017 Multiply S1, S1, S4
	018 Add S2, S2, S5
	019 Multiply S1, S1, S2
	020 Add S0, S1, S0
	021 Return V0

Method: System.Single easeInBounce(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B517C LDR X8, [X8 + 0x500]
	0x031B5180 B 0x31B51B8
	0x031B5184 ADRP X8, 0xF6A000
	0x031B5188 LDR X8, [X8 + 0x428]
	0x031B518C LDR X0, [X8]
	0x031B5190 BL 0x1C16F10
	0x031B5194 ADRP X8, 0xF6A000
	0x031B5198 LDR X8, [X8 + 0x520]
	0x031B519C B 0x31B51B8
	0x031B51A0 ADRP X8, 0xF6A000
	0x031B51A4 LDR X8, [X8 + 0x428]
	0x031B51A8 LDR X0, [X8]
	0x031B51AC BL 0x1C16F10
	0x031B51B0 ADRP X8, 0xF6A000
	0x031B51B4 LDR X8, [X8 + 0x528]
	0x031B51B8 LDR X2, [X8]
	0x031B51BC MOV X1, X19
	0x031B51C0 MOV X3, X31
	0x031B51C4 MOV X21, X0
	0x031B51C8 BL 0x31C0024
	0x031B51CC CBZ X20, 0x31B51F8
	0x031B51D0 STR X21, [X20 + 0xA8]
	0x031B51D4 LDR X0, [X19 + 0x10]
	0x031B51D8 LDP X20, X19, [X31 + 0x50]
	0x031B51DC LDP X22, X21, [X31 + 0x40]
	0x031B51E0 LDP X24, X23, [X31 + 0x30]
	0x031B51E4 LDR X30, [X31 + 0x28]
	0x031B51E8 LDP D9, D8, [X31 + 0x18]
	0x031B51EC LDP D11, D10, [X31 + 0x8]
	0x031B51F0 LDR V12, [X31], #0x60
	0x031B51F4 RET
	0x031B51F8 BL 0x1C16F20
	0x031B51FC MOV X1, X31
	0x031B5200 B 0x33BDD8C

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1227000
	008 Move X19, 0xF41000
	009 Move W8, [X20+3778]
	010 Move X19, [X19+1448]
	011 Move V9, V2
	012 Move V10, V1
	013 Move V8, V0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF41000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3778], W8
	023 Move X0, [X19]
	024 Subtract S10, S10, S8
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move S0, 1
	030 Subtract S2, S0, S9
	031 Move S0, W31
	032 Move V1, V10
	033 Call LeanTween.easeOutBounce, V0, V1, V2
	034 Subtract S0, S10, S0
	035 Add S0, S0, S8
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+24]
	039 Move D9, [X31+8]
	040 Move D8, [X31+16]
	041 Move V10, [X31+48]
	042 Return V0

Method: System.Single easeOutBounce(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B5204 STR D10, [X31 - 0x50]!
	0x031B5208 STP D9, D8, [X31 + 0x8]
	0x031B520C STR X30, [X31 + 0x18]
	0x031B5210 STP X24, X23, [X31 + 0x20]
	0x031B5214 STP X22, X21, [X31 + 0x30]
	0x031B5218 STP X20, X19, [X31 + 0x40]
	0x031B521C ADRP X19, 0x1226000
	0x031B5220 ADRP X23, 0xF6A000
	0x031B5224 LDRB W8, [X19 + 0xEC7]
	0x031B5228 LDR X23, [X23 + 0x530]
	0x031B522C MOV V8.16B, V0.16B
	0x031B5230 MOV W21, W2
	0x031B5234 MOV X20, X1
	0x031B5238 MOV X22, X0
	0x031B523C TBNZ X8, 0x0, 0x31B52E4
	0x031B5240 ADRP X0, 0xF6A000
	0x031B5244 LDR X0, [X0 + 0x428]
	0x031B5248 BL 0x1C16CF4
	0x031B524C ADRP X0, 0xF40000
	0x031B5250 LDR X0, [X0 + 0x5A8]
	0x031B5254 BL 0x1C16CF4
	0x031B5258 ADRP X0, 0xF6A000
	0x031B525C LDR X0, [X0 + 0x538]
	0x031B5260 BL 0x1C16CF4
	0x031B5264 ADRP X0, 0xF6A000
	0x031B5268 LDR X0, [X0 + 0x540]
	0x031B526C BL 0x1C16CF4
	0x031B5270 ADRP X0, 0xF6A000
	0x031B5274 LDR X0, [X0 + 0x548]
	0x031B5278 BL 0x1C16CF4
	0x031B527C ADRP X0, 0xF6A000
	0x031B5280 LDR X0, [X0 + 0x550]
	0x031B5284 BL 0x1C16CF4
	0x031B5288 ADRP X0, 0xF6A000
	0x031B528C LDR X0, [X0 + 0x558]
	0x031B5290 BL 0x1C16CF4
	0x031B5294 ADRP X0, 0xF6A000
	0x031B5298 LDR X0, [X0 + 0x560]
	0x031B529C BL 0x1C16CF4
	0x031B52A0 ADRP X0, 0xF6A000
	0x031B52A4 LDR X0, [X0 + 0x568]
	0x031B52A8 BL 0x1C16CF4
	0x031B52AC ADRP X0, 0xF6A000
	0x031B52B0 LDR X0, [X0 + 0x570]
	0x031B52B4 BL 0x1C16CF4
	0x031B52B8 ADRP X0, 0xF6A000
	0x031B52BC LDR X0, [X0 + 0x578]
	0x031B52C0 BL 0x1C16CF4
	0x031B52C4 ADRP X0, 0xF6A000
	0x031B52C8 LDR X0, [X0 + 0x580]

ISIL:
	001 Move X8, -40677376
	002 Move V3, [X8+3940]
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move W8, 0x40F20000
	005 Move S3, W8
	006 Multiply S3, S2, S3
	007 Multiply S2, S3, S2
	008 Move X8, -40673280
	009 Move V3, [X8+292]
	010 NotImplemented "Instruction FCMP not yet implemented."
	011 Move X8, -40673280
	012 Move V3, [X8+28]
	013 Move W8, 0x40F20000
	014 Move S4, W8
	015 Add S2, S2, S3
	016 Multiply S3, S2, S4
	017 Multiply S2, S2, S3
	018 Move S3, 0.75
	019 Move X8, -40660992
	020 Move V3, [X8+1224]
	021 NotImplemented "Instruction FCVT not yet implemented."
	022 NotImplemented "Instruction FCMP not yet implemented."
	023 Move X8, -40673280
	024 Move V3, [X8+928]
	025 Move W8, 0x40F20000
	026 Move S4, W8
	027 Add S2, S2, S3
	028 Multiply S3, S2, S4
	029 Multiply S2, S2, S3
	030 Move S3, 0.9375
	031 Move X8, -40677376
	032 Move V3, [X8+4092]
	033 Move W8, 0x40F20000
	034 Move S4, W8
	035 Move W8, 0x3F7C0000
	036 Add S2, S2, S3
	037 Multiply S3, S2, S4
	038 Multiply S2, S2, S3
	039 Move S3, W8
	040 Add S2, S2, S3
	041 Subtract S1, S1, S0
	042 Multiply S1, S1, S2
	043 Add S0, S1, S0
	044 Return V0

Method: System.Single easeInOutBounce(System.Single start, System.Single end, System.Single val)

Disassembly:
	0x031B52CC BL 0x1C16CF4
	0x031B52D0 ADRP X0, 0xF6A000
	0x031B52D4 LDR X0, [X0 + 0x530]
	0x031B52D8 BL 0x1C16CF4
	0x031B52DC MOVZ W8, 0x1
	0x031B52E0 STRB W8, [X19 + 0xEC7]
	0x031B52E4 LDR X0, [X23]
	0x031B52E8 BL 0x1C16F10
	0x031B52EC MOV X1, X31
	0x031B52F0 MOV X19, X0
	0x031B52F4 BL 0x33BDD8C
	0x031B52F8 CBZ X19, 0x31B5548
	0x031B52FC STR S8, [X19 + 0x18]
	0x031B5300 CBZ X22, 0x31B5548
	0x031B5304 ADRP X23, 0xF40000
	0x031B5308 LDR X23, [X23 + 0x5A8]
	0x031B530C MOV X0, X22
	0x031B5310 MOV X1, X31
	0x031B5314 BL 0x3C32ECC
	0x031B5318 ADRP X24, 0x1223000
	0x031B531C LDRB W8, [X24 + 0x783]
	0x031B5320 MOV X22, X0
	0x031B5324 CBNZ W8, 0x31B533C
	0x031B5328 ADRP X0, 0xF3E000
	0x031B532C LDR X0, [X0 + 0x5A0]
	0x031B5330 BL 0x1C16CF4
	0x031B5334 MOVZ W8, 0x1
	0x031B5338 STRB W8, [X24 + 0x783]
	0x031B533C ADRP X8, 0xF3E000
	0x031B5340 LDR X8, [X8 + 0x5A0]
	0x031B5344 LDR X0, [X23]
	0x031B5348 LDR X8, [X8]
	0x031B534C LDR W9, [X0 + 0xE0]
	0x031B5350 LDR X8, [X8 + 0xB8]
	0x031B5354 LDP S10, S9, [X8]
	0x031B5358 LDR V8, [X8 + 0x8]
	0x031B535C CBNZ W9, 0x31B5364
	0x031B5360 BL 0x1C16DFC
	0x031B5364 BL 0x31AF454
	0x031B5368 CBZ X0, 0x31B5548
	0x031B536C MOV X1, X31
	0x031B5370 BL 0x31BFF68
	0x031B5374 CBZ X0, 0x31B5548
	0x031B5378 MOV X1, X20
	0x031B537C MOV X2, X31

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, 0x1227000
	009 Move X20, 0xF41000
	010 Move W8, [X19+3779]
	011 Move X20, [X20+1448]
	012 Move V9, V2
	013 Move V10, V1
	014 Move V8, V0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF41000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X19+3779], W8
	024 Move X0, [X20]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move S11, 0.5
	030 Subtract S10, S10, S8
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Add S2, S9, S9
	033 Move S0, W31
	034 Move V1, V10
	035 Call LeanTween.easeInBounce, V0, V1, V2
	036 Multiply S0, S0, S11
	037 Move S0, -1
	038 Add S2, S2, S0
	039 Move S0, W31
	040 Move V1, V10
	041 Call LeanTween.easeOutBounce, V0, V1, V2
	042 Multiply S0, S0, S11
	043 Multiply S1, S10, S11
	044 Add S0, S1, S0
	045 Add S0, S0, S8
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X30, [X31+32]
	049 Move D9, [X31+16]
	050 Move D8, [X31+24]
	051 Move D11, [X31+64]
	052 Move D10, [X31+72]
	053 Return V0

Method: System.Single easeInBack(System.Single start, System.Single end, System.Single val, System.Single overshoot = 1)

Disassembly:
	0x031B5380 BL 0x31C24A8
	0x031B5384 MOVN W8, 0x80800000
	0x031B5388 MOV X1, X0
	0x031B538C FMOV S3, W8
	0x031B5390 MOV X0, X22
	0x031B5394 MOV V0.16B, V10.16B
	0x031B5398 MOV V1.16B, V9.16B
	0x031B539C MOV V2.16B, V8.16B
	0x031B53A0 BL 0x31AF81C
	0x031B53A4 CMP W21, 0x9
	0x031B53A8 STR X0, [X19 + 0x10]
	0x031B53AC B.HI 0x31B5528
	0x031B53B0 ADRP X9, 0xFFFFFFFFFD9E1000

ISIL:
	001 Move X8, -40677376
	002 Move V4, [X8+3884]
	003 Subtract S1, S1, S0
	004 Multiply S1, S1, S2
	005 Multiply S1, S1, S2
	006 Multiply S3, S3, S4
	007 Move S4, 1
	008 Add S4, S3, S4
	009 Multiply S2, S4, S2
	010 Subtract S2, S2, S3
	011 Multiply S1, S1, S2
	012 Add S0, S1, S0
	013 Return V0

Method: System.Single easeOutBack(System.Single start, System.Single end, System.Single val, System.Single overshoot = 1)

Disassembly:
	0x031B53B4 MOV W8, W21
	0x031B53B8 ADD X9, X9, 0x3A2
	0x031B53BC ADR X10, 0x14
	0x031B53C0 LDRB W11, [X9, X8, LSL]
	0x031B53C4 ADD X10, X10, X11, 0x2, LSL
	0x031B53C8 MOV X20, X0
	0x031B53CC BR X10
	0x031B53D0 ADRP X8, 0xF6A000
	0x031B53D4 LDR X8, [X8 + 0x428]
	0x031B53D8 LDR X0, [X8]
	0x031B53DC BL 0x1C16F10
	0x031B53E0 ADRP X8, 0xF6A000
	0x031B53E4 LDR X8, [X8 + 0x540]
	0x031B53E8 B 0x31B550C
	0x031B53EC CBZ X20, 0x31B5548
	0x031B53F0 LDR X0, [X20 + 0x58]

ISIL:
	001 Move X8, -40677376
	002 Move V4, [X8+3884]
	003 Move S5, -1
	004 Add S2, S2, S5
	005 Multiply S5, S2, S2
	006 Multiply S3, S3, S4
	007 Move S4, 1
	008 Add S6, S3, S4
	009 Multiply S2, S2, S6
	010 Add S2, S3, S2
	011 Multiply S2, S5, S2
	012 Subtract S1, S1, S0
	013 Add S2, S2, S4
	014 Multiply S1, S1, S2
	015 Add S0, S1, S0
	016 Return V0

Method: System.Single easeInOutBack(System.Single start, System.Single end, System.Single val, System.Single overshoot = 1)

Disassembly:
	0x031B53F4 CBZ X0, 0x31B5548
	0x031B53F8 LDR X20, [X20 + 0xE8]
	0x031B53FC MOV X1, X31
	0x031B5400 BL 0x3C3EB78
	0x031B5404 CBZ X20, 0x31B5548
	0x031B5408 STP S0, S1, [X20 + 0x24]
	0x031B540C STR S2, [X20 + 0x2C]
	0x031B5410 ADRP X8, 0xF6A000
	0x031B5414 LDR X8, [X8 + 0x428]
	0x031B5418 LDR X20, [X19 + 0x10]
	0x031B541C LDR X0, [X8]
	0x031B5420 BL 0x1C16F10
	0x031B5424 ADRP X8, 0xF6A000
	0x031B5428 LDR X8, [X8 + 0x538]
	0x031B542C B 0x31B550C
	0x031B5430 ADRP X8, 0xF6A000
	0x031B5434 LDR X8, [X8 + 0x428]
	0x031B5438 LDR X0, [X8]
	0x031B543C BL 0x1C16F10
	0x031B5440 ADRP X8, 0xF6A000
	0x031B5444 LDR X8, [X8 + 0x560]
	0x031B5448 B 0x31B550C
	0x031B544C ADRP X8, 0xF6A000
	0x031B5450 LDR X8, [X8 + 0x428]
	0x031B5454 LDR X0, [X8]
	0x031B5458 BL 0x1C16F10
	0x031B545C ADRP X8, 0xF6A000
	0x031B5460 LDR X8, [X8 + 0x568]
	0x031B5464 B 0x31B550C
	0x031B5468 ADRP X8, 0xF6A000
	0x031B546C LDR X8, [X8 + 0x428]
	0x031B5470 LDR X0, [X8]
	0x031B5474 BL 0x1C16F10
	0x031B5478 ADRP X8, 0xF6A000
	0x031B547C LDR X8, [X8 + 0x570]
	0x031B5480 B 0x31B550C
	0x031B5484 ADRP X8, 0xF6A000
	0x031B5488 LDR X8, [X8 + 0x428]

ISIL:
	001 Move X8, -40677376
	002 Move V4, [X8+3884]
	003 Add S5, S2, S2
	004 Move S2, 1
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Multiply S4, S3, S4
	007 Subtract S1, S1, S0
	008 Move X8, -40673280
	009 Move V6, [X8+976]
	010 Move S7, 0.5
	011 Multiply S1, S1, S7
	012 Multiply S3, S3, S6
	013 Multiply S3, S4, S3
	014 Add S2, S3, S2
	015 Multiply S2, S5, S2
	016 Multiply S4, S5, S5
	017 Subtract S2, S2, S3
	018 Multiply S2, S4, S2
	019 Move X8, -40673280
	020 Move V7, [X8+976]
	021 Move S6, -2
	022 Add S5, S5, S6
	023 Move S6, 0.5
	024 Multiply S3, S3, S7
	025 Multiply S3, S4, S3
	026 Add S2, S3, S2
	027 Multiply S2, S5, S2
	028 Multiply S1, S1, S6
	029 Multiply S6, S5, S5
	030 Add S2, S3, S2
	031 Multiply S2, S6, S2
	032 Move S3, 2
	033 Add S2, S2, S3
	034 Multiply S1, S1, S2
	035 Add S0, S1, S0
	036 Return V0

Method: System.Single easeInElastic(System.Single start, System.Single end, System.Single val, System.Single overshoot = 1, System.Single period = 0.3)

Disassembly:
	0x031B548C LDR X0, [X8]
	0x031B5490 BL 0x1C16F10
	0x031B5494 ADRP X8, 0xF6A000
	0x031B5498 LDR X8, [X8 + 0x548]
	0x031B549C B 0x31B550C
	0x031B54A0 ADRP X8, 0xF6A000
	0x031B54A4 LDR X8, [X8 + 0x428]
	0x031B54A8 LDR X0, [X8]
	0x031B54AC BL 0x1C16F10
	0x031B54B0 ADRP X8, 0xF6A000
	0x031B54B4 LDR X8, [X8 + 0x550]
	0x031B54B8 B 0x31B550C
	0x031B54BC ADRP X8, 0xF6A000
	0x031B54C0 LDR X8, [X8 + 0x428]
	0x031B54C4 LDR X0, [X8]
	0x031B54C8 BL 0x1C16F10
	0x031B54CC ADRP X8, 0xF6A000
	0x031B54D0 LDR X8, [X8 + 0x558]
	0x031B54D4 B 0x31B550C
	0x031B54D8 ADRP X8, 0xF6A000
	0x031B54DC LDR X8, [X8 + 0x428]
	0x031B54E0 LDR X0, [X8]
	0x031B54E4 BL 0x1C16F10
	0x031B54E8 ADRP X8, 0xF6A000
	0x031B54EC LDR X8, [X8 + 0x578]
	0x031B54F0 B 0x31B550C
	0x031B54F4 ADRP X8, 0xF6A000
	0x031B54F8 LDR X8, [X8 + 0x428]
	0x031B54FC LDR X0, [X8]
	0x031B5500 BL 0x1C16F10
	0x031B5504 ADRP X8, 0xF6A000
	0x031B5508 LDR X8, [X8 + 0x580]
	0x031B550C LDR X2, [X8]
	0x031B5510 MOV X1, X19
	0x031B5514 MOV X3, X31
	0x031B5518 MOV X21, X0
	0x031B551C BL 0x31C0024
	0x031B5520 CBZ X20, 0x31B5548
	0x031B5524 STR X21, [X20 + 0xA8]
	0x031B5528 LDR X0, [X19 + 0x10]
	0x031B552C LDP X20, X19, [X31 + 0x40]
	0x031B5530 LDP X22, X21, [X31 + 0x30]
	0x031B5534 LDP X24, X23, [X31 + 0x20]
	0x031B5538 LDR X30, [X31 + 0x18]
	0x031B553C LDP D9, D8, [X31 + 0x8]
	0x031B5540 LDR V10, [X31], #0x50
	0x031B5544 RET
	0x031B5548 BL 0x1C16F20
	0x031B554C MOV X1, X31
	0x031B5550 B 0x33BDD8C
	0x031B5554 STR X30, [X31 - 0x30]!
	0x031B5558 STP X22, X21, [X31 + 0x10]
	0x031B555C STP X20, X19, [X31 + 0x20]
	0x031B5560 ADRP X21, 0x1226000
	0x031B5564 ADRP X22, 0xF40000
	0x031B5568 LDRB W8, [X21 + 0xEC8]

ISIL:
	001 Move [X31-64], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move V8, V0
	011 Move S0, 1
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 Subtract S12, S1, S8
	014 Add S8, S12, S8
	015 Move X8, -40673280
	016 Move V0, [X8+144]
	017 Move S1, 0.25
	018 Move V10, V4
	019 Move V9, V3
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Multiply S13, S4, S1
	022 Move S0, 1
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move X8, -40673280
	025 Move V1, [X8+780]
	026 Subtract S3, S0, S2
	027 Move S4, -1
	028 NotImplemented "Instruction FDIV not yet implemented."
	029 Add S3, S9, S4
	030 Multiply S1, S1, S3
	031 Add S9, S1, S0
	032 Move S0, -1
	033 Add S14, S2, S0
	034 Move S0, 10
	035 Multiply S0, S14, S0
	036 Call 0x3EB2B90
	037 Move X8, -40673280
	038 Move V11, V0
	039 Move V0, [X8+932]
	040 Subtract S1, S14, S13
	041 Multiply S0, S1, S0
	042 NotImplemented "Instruction FDIV not yet implemented."
	043 Call 0x3EB2B70
	044 Multiply S1, S12, S11
	045 Multiply S0, S1, S0
	046 Multiply S0, S0, S9
	047 Add S8, S8, S0
	048 Move V0, V8
	049 Move X30, [X31+56]
	050 Move D9, [X31+40]
	051 Move D8, [X31+48]
	052 Move D11, [X31+24]
	053 Move D10, [X31+32]
	054 Move D13, [X31+8]
	055 Move D12, [X31+16]
	056 Move V14, [X31+64]
	057 Return V0

Method: System.Single easeOutElastic(System.Single start, System.Single end, System.Single val, System.Single overshoot = 1, System.Single period = 0.3)

Disassembly:
	0x031B556C LDR X22, [X22 + 0x5A8]
	0x031B5570 MOV X19, X1
	0x031B5574 MOV W20, W0
	0x031B5578 TBNZ X8, 0x0, 0x31B5590
	0x031B557C ADRP X0, 0xF40000
	0x031B5580 LDR X0, [X0 + 0x5A8]
	0x031B5584 BL 0x1C16CF4
	0x031B5588 MOVZ W8, 0x1
	0x031B558C STRB W8, [X21 + 0xEC8]
	0x031B5590 LDR X0, [X22]
	0x031B5594 LDR W8, [X0 + 0xE0]
	0x031B5598 CBNZ W8, 0x31B55A0
	0x031B559C BL 0x1C16DFC
	0x031B55A0 BL 0x31AF7B4
	0x031B55A4 MOV W1, W20
	0x031B55A8 MOV X2, X19
	0x031B55AC LDP X20, X19, [X31 + 0x20]
	0x031B55B0 LDP X22, X21, [X31 + 0x10]
	0x031B55B4 LDR X30, [X31], #0x30
	0x031B55B8 B 0x31B55BC
	0x031B55BC STR X30, [X31 - 0x50]!
	0x031B55C0 STP X26, X25, [X31 + 0x10]
	0x031B55C4 STP X24, X23, [X31 + 0x20]
	0x031B55C8 STP X22, X21, [X31 + 0x30]
	0x031B55CC STP X20, X19, [X31 + 0x40]
	0x031B55D0 ADRP X22, 0x1226000
	0x031B55D4 ADRP X23, 0xF40000
	0x031B55D8 LDRB W8, [X22 + 0xEC9]
	0x031B55DC LDR X23, [X23 + 0x5A8]
	0x031B55E0 MOV X20, X2
	0x031B55E4 MOV W21, W1
	0x031B55E8 MOV X19, X0
	0x031B55EC TBNZ X8, 0x0, 0x31B5640
	0x031B55F0 ADRP X0, 0xF6A000
	0x031B55F4 LDR X0, [X0 + 0x588]
	0x031B55F8 BL 0x1C16CF4
	0x031B55FC ADRP X0, 0xF3E000
	0x031B5600 LDR X0, [X0 + 0xA28]
	0x031B5604 BL 0x1C16CF4
	0x031B5608 ADRP X0, 0xF40000
	0x031B560C LDR X0, [X0 + 0x7B0]
	0x031B5610 BL 0x1C16CF4
	0x031B5614 ADRP X0, 0xF40000
	0x031B5618 LDR X0, [X0 + 0x5A8]
	0x031B561C BL 0x1C16CF4
	0x031B5620 ADRP X0, 0xF3E000
	0x031B5624 LDR X0, [X0 + 0x598]
	0x031B5628 BL 0x1C16CF4
	0x031B562C ADRP X0, 0xF6A000
	0x031B5630 LDR X0, [X0 + 0x590]
	0x031B5634 BL 0x1C16CF4
	0x031B5638 MOVZ W8, 0x1
	0x031B563C STRB W8, [X22 + 0xEC9]

ISIL:
	001 Move [X31-64], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move V8, V0
	011 Move S0, 1
	012 Move V11, V2
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Subtract S13, S1, S8
	015 Add S8, S13, S8
	016 Move X8, -40673280
	017 Move V0, [X8+780]
	018 Move S1, 0.25
	019 Move V10, V4
	020 Move V9, V3
	021 NotImplemented "Instruction FCMP not yet implemented."
	022 Multiply S14, S4, S1
	023 Move S1, 1
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move S2, -1
	026 NotImplemented "Instruction FDIV not yet implemented."
	027 Add S2, S9, S2
	028 Multiply S0, S0, S2
	029 Add S9, S0, S1
	030 Move S0, -10
	031 Multiply S0, S11, S0
	032 Call 0x3EB2B90
	033 Move X8, -40673280
	034 Move V12, V0
	035 Move V0, [X8+108]
	036 Subtract S1, S11, S14
	037 Multiply S0, S1, S0
	038 NotImplemented "Instruction FDIV not yet implemented."
	039 Call 0x3EB2B70
	040 Multiply S2, S13, S12
	041 Multiply S0, S2, S0
	042 Add S1, S13, S8
	043 Multiply S0, S0, S9
	044 Add S8, S1, S0
	045 Move V0, V8
	046 Move X30, [X31+56]
	047 Move D9, [X31+40]
	048 Move D8, [X31+48]
	049 Move D11, [X31+24]
	050 Move D10, [X31+32]
	051 Move D13, [X31+8]
	052 Move D12, [X31+16]
	053 Move V14, [X31+64]
	054 Return V0

Method: System.Single easeInOutElastic(System.Single start, System.Single end, System.Single val, System.Single overshoot = 1, System.Single period = 0.3)

Disassembly:
	0x031B5640 LDR X8, [X23]
	0x031B5644 STR W31, [X31 + 0xC]
	0x031B5648 LDR W9, [X8 + 0xE0]
	0x031B564C CBNZ W9, 0x31B565C
	0x031B5650 MOV X0, X8
	0x031B5654 BL 0x1C16DFC
	0x031B5658 LDR X8, [X23]
	0x031B565C LDR X9, [X8 + 0xB8]
	0x031B5660 LDR X10, [X9 + 0x90]
	0x031B5664 CBNZ X10, 0x31B56CC
	0x031B5668 LDR W10, [X8 + 0xE0]
	0x031B566C CBNZ W10, 0x31B5680
	0x031B5670 MOV X0, X8
	0x031B5674 BL 0x1C16DFC
	0x031B5678 LDR X8, [X23]
	0x031B567C LDR X9, [X8 + 0xB8]
	0x031B5680 LDP W10, W8, [X9 + 0xA4]
	0x031B5684 STR W8, [X9 + 0xAC]
	0x031B5688 ADRP X9, 0xF6A000
	0x031B568C LDR X9, [X9 + 0x588]
	0x031B5690 MUL W1, W10, W8
	0x031B5694 LDR X0, [X9]
	0x031B5698 BL 0x1C16D6C
	0x031B569C LDR X8, [X23]
	0x031B56A0 ADRP X10, 0xF40000
	0x031B56A4 LDR X8, [X8 + 0xB8]
	0x031B56A8 STR X0, [X8 + 0x90]
	0x031B56AC LDP W9, W8, [X8 + 0xA4]
	0x031B56B0 LDR X10, [X10 + 0x7B0]
	0x031B56B4 MUL W1, W8, W9
	0x031B56B8 LDR X0, [X10]
	0x031B56BC BL 0x1C16D6C
	0x031B56C0 LDR X8, [X23]
	0x031B56C4 LDR X9, [X8 + 0xB8]
	0x031B56C8 STR X0, [X9 + 0x98]
	0x031B56CC LDR W9, [X8 + 0xE0]
	0x031B56D0 CBNZ W9, 0x31B56E0
	0x031B56D4 MOV X0, X8
	0x031B56D8 BL 0x1C16DFC
	0x031B56DC LDR X8, [X23]
	0x031B56E0 LDR X9, [X8 + 0xB8]
	0x031B56E4 ADRP X24, 0xF3E000
	0x031B56E8 LDR X24, [X24 + 0x598]
	0x031B56EC STR W31, [X9 + 0x60]
	0x031B56F0 LDR W10, [X8 + 0xE0]
	0x031B56F4 CBNZ W10, 0x31B5708
	0x031B56F8 MOV X0, X8
	0x031B56FC BL 0x1C16DFC
	0x031B5700 LDR X8, [X23]
	0x031B5704 LDR W10, [X8 + 0xE0]
	0x031B5708 LDR X9, [X8 + 0xB8]
	0x031B570C LDR W22, [X9 + 0x60]
	0x031B5710 LDR W25, [X9 + 0xAC]
	0x031B5714 CBNZ W10, 0x31B5728
	0x031B5718 MOV X0, X8
	0x031B571C BL 0x1C16DFC
	0x031B5720 LDR X8, [X23]
	0x031B5724 LDR X9, [X8 + 0xB8]
	0x031B5728 CMP W22, W25
	0x031B572C B.GE 0x31B5918
	0x031B5730 LDR X8, [X9 + 0x98]
	0x031B5734 CBZ X8, 0x31B5990
	0x031B5738 LDR W10, [X9 + 0xAC]
	0x031B573C LDR W9, [X9 + 0x60]
	0x031B5740 LDR W11, [X8 + 0x18]
	0x031B5744 MADD W25, W10, W21, W9
	0x031B5748 CMP W25, W11
	0x031B574C B.CS 0x31B5994
	0x031B5750 LDR X0, [X24]
	0x031B5754 SXTW X26, W25
	0x031B5758 ADD X8, X8, X26, 0x3, LSL
	0x031B575C LDR X22, [X8 + 0x20]
	0x031B5760 LDR W9, [X0 + 0xE0]
	0x031B5764 CBNZ W9, 0x31B576C
	0x031B5768 BL 0x1C16DFC
	0x031B576C MOV X0, X22
	0x031B5770 MOV X1, X31
	0x031B5774 MOV X2, X31
	0x031B5778 BL 0x3C3883C
	0x031B577C LDR X8, [X23]
	0x031B5780 TBNZ X0, 0x0, 0x31B5884
	0x031B5784 LDR W9, [X8 + 0xE0]
	0x031B5788 CBNZ W9, 0x31B5798
	0x031B578C MOV X0, X8
	0x031B5790 BL 0x1C16DFC
	0x031B5794 LDR X8, [X23]
	0x031B5798 LDR X9, [X8 + 0xB8]
	0x031B579C LDR X10, [X9 + 0x90]

ISIL:
	001 Move [X31-64], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 Move V8, V0
	011 Add S0, S2, S2
	012 Move S2, 2
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Subtract S12, S1, S8
	015 Add S8, S12, S8
	016 Move S1, 1
	017 Move V10, V4
	018 Move V9, V3
	019 NotImplemented "Instruction FCMP not yet implemented."
	020 Move S2, 0.25
	021 Move X8, -40673280
	022 Move V3, [X8+860]
	023 NotImplemented "Instruction FCMP not yet implemented."
	024 Move S4, -1
	025 NotImplemented "Instruction FDIV not yet implemented."
	026 Add S4, S9, S4
	027 Multiply S3, S3, S4
	028 Move S4, 1
	029 Move X8, -40673280
	030 Move V4, [X8+92]
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move S4, 1
	033 Move S5, -1
	034 Subtract S6, S4, S0
	035 NotImplemented "Instruction FDIV not yet implemented."
	036 Add S5, S9, S5
	037 Multiply S3, S5, S3
	038 Add S9, S3, S4
	039 Multiply S13, S10, S2
	040 Move S2, -1
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Add S14, S0, S2
	043 Move S0, 10
	044 Multiply S0, S14, S0
	045 Call 0x3EB2B90
	046 Move X8, -40673280
	047 Move V11, V0
	048 Move V0, [X8+932]
	049 Subtract S1, S14, S13
	050 Multiply S0, S1, S0
	051 NotImplemented "Instruction FDIV not yet implemented."
	052 Call 0x3EB2B70
	053 Multiply S1, S12, S11
	054 Multiply S0, S1, S0
	055 Move S1, 0.5
	056 Multiply S0, S0, S1
	057 Multiply S0, S0, S9
	058 Add S8, S8, S0
	059 Move S0, -10
	060 Multiply S0, S14, S0
	061 Call 0x3EB2B90
	062 Move X8, -40673280
	063 Move V11, V0
	064 Move V0, [X8+108]
	065 Subtract S1, S14, S13
	066 Multiply S0, S1, S0
	067 NotImplemented "Instruction FDIV not yet implemented."
	068 Call 0x3EB2B70
	069 Multiply S2, S12, S11
	070 Multiply S0, S2, S0
	071 Move S2, 0.5
	072 Multiply S0, S0, S2
	073 Add S1, S12, S8
	074 Multiply S0, S0, S9
	075 Add S8, S1, S0
	076 Move V0, V8
	077 Move X30, [X31+56]
	078 Move D9, [X31+40]
	079 Move D8, [X31+48]
	080 Move D11, [X31+24]
	081 Move D10, [X31+32]
	082 Move D13, [X31+8]
	083 Move D12, [X31+16]
	084 Move V14, [X31+64]
	085 Return V0

Method: LTDescr followDamp(UnityEngine.Transform trans, UnityEngine.Transform target, LeanProp prop, System.Single smoothTime, System.Single maxSpeed = -1)

Disassembly:
	0x031B57A0 CBZ X10, 0x31B5990
	0x031B57A4 LDR W11, [X10 + 0x18]
	0x031B57A8 CMP W25, W11
	0x031B57AC B.CS 0x31B5994
	0x031B57B0 ADD X10, X10, X26, 0x3, LSL
	0x031B57B4 LDR X10, [X10 + 0x20]
	0x031B57B8 CBZ X10, 0x31B5884
	0x031B57BC LDR W10, [X8 + 0xE0]
	0x031B57C0 CBNZ W10, 0x31B57D4
	0x031B57C4 MOV X0, X8
	0x031B57C8 BL 0x1C16DFC
	0x031B57CC LDR X8, [X23]
	0x031B57D0 LDR X9, [X8 + 0xB8]
	0x031B57D4 LDR X8, [X9 + 0x98]
	0x031B57D8 CBZ X8, 0x31B5990
	0x031B57DC LDR W9, [X8 + 0x18]
	0x031B57E0 CMP W25, W9
	0x031B57E4 B.CS 0x31B5994
	0x031B57E8 LDR X0, [X24]
	0x031B57EC ADD X8, X8, X26, 0x3, LSL
	0x031B57F0 LDR X22, [X8 + 0x20]
	0x031B57F4 LDR W9, [X0 + 0xE0]
	0x031B57F8 CBNZ W9, 0x31B5800
	0x031B57FC BL 0x1C16DFC
	0x031B5800 MOV X0, X22
	0x031B5804 MOV X1, X19
	0x031B5808 MOV X2, X31
	0x031B580C BL 0x3C3883C
	0x031B5810 TBZ X0, 0x0, 0x31B5858
	0x031B5814 LDR X0, [X23]
	0x031B5818 LDR W8, [X0 + 0xE0]
	0x031B581C CBNZ W8, 0x31B5828
	0x031B5820 BL 0x1C16DFC
	0x031B5824 LDR X0, [X23]
	0x031B5828 LDR X8, [X0 + 0xB8]
	0x031B582C LDR X8, [X8 + 0x90]
	0x031B5830 CBZ X8, 0x31B5990
	0x031B5834 LDR W9, [X8 + 0x18]
	0x031B5838 CMP W25, W9
	0x031B583C B.CS 0x31B5994
	0x031B5840 ADD X8, X8, X26, 0x3, LSL
	0x031B5844 LDR X0, [X8 + 0x20]
	0x031B5848 MOV X1, X20
	0x031B584C MOV X2, X31
	0x031B5850 BL 0x33CB4B0
	0x031B5854 TBNZ X0, 0x0, 0x31B5978
	0x031B5858 LDR X8, [X23]
	0x031B585C LDR W9, [X8 + 0xE0]
	0x031B5860 CBNZ W9, 0x31B5870
	0x031B5864 MOV X0, X8
	0x031B5868 BL 0x1C16DFC
	0x031B586C LDR X8, [X23]
	0x031B5870 LDR X9, [X8 + 0xB8]
	0x031B5874 LDR W10, [X9 + 0x60]
	0x031B5878 ADD W10, W10, 0x1
	0x031B587C STR W10, [X9 + 0x60]
	0x031B5880 B 0x31B56F0
	0x031B5884 LDR W9, [X8 + 0xE0]
	0x031B5888 CBNZ W9, 0x31B5898
	0x031B588C MOV X0, X8
	0x031B5890 BL 0x1C16DFC
	0x031B5894 LDR X8, [X23]
	0x031B5898 LDR X8, [X8 + 0xB8]
	0x031B589C LDR X8, [X8 + 0x90]
	0x031B58A0 CBZ X8, 0x31B5990
	0x031B58A4 LDR W9, [X8 + 0x18]
	0x031B58A8 CMP W25, W9
	0x031B58AC B.CS 0x31B5994
	0x031B58B0 ADD X8, X8, X26, 0x3, LSL
	0x031B58B4 STR X20, [X8 + 0x20]
	0x031B58B8 LDR X8, [X23]
	0x031B58BC LDR X8, [X8 + 0xB8]
	0x031B58C0 LDR X8, [X8 + 0x98]
	0x031B58C4 CBZ X8, 0x31B5990
	0x031B58C8 LDR W9, [X8 + 0x18]
	0x031B58CC CMP W25, W9
	0x031B58D0 B.CS 0x31B5994
	0x031B58D4 ADD X8, X8, X26, 0x3, LSL
	0x031B58D8 STR X19, [X8 + 0x20]
	0x031B58DC LDR X0, [X23]
	0x031B58E0 LDR X8, [X0 + 0xB8]
	0x031B58E4 LDR W9, [X8 + 0x60]
	0x031B58E8 LDR W10, [X8 + 0xA0]
	0x031B58EC CMP W9, W10
	0x031B58F0 B.LT 0x31B5978
	0x031B58F4 LDR W10, [X0 + 0xE0]
	0x031B58F8 CBNZ W10, 0x31B590C
	0x031B58FC BL 0x1C16DFC
	0x031B5900 LDR X8, [X23]
	0x031B5904 LDR X8, [X8 + 0xB8]
	0x031B5908 LDR W9, [X8 + 0x60]
	0x031B590C ADD W9, W9, 0x1
	0x031B5910 STR W9, [X8 + 0xA0]
	0x031B5914 B 0x31B5978
	0x031B5918 LDR W8, [X9 + 0xA8]
	0x031B591C ADD X0, X31, 0xC
	0x031B5920 MOV X1, X31
	0x031B5924 UBFM W8, W8, 0x1F, 0x1E
	0x031B5928 STR W8, [X31 + 0xC]
	0x031B592C BL 0x337B6E0
	0x031B5930 ADRP X8, 0xF6A000
	0x031B5934 LDR X8, [X8 + 0x590]
	0x031B5938 MOV X1, X0
	0x031B593C MOV X2, X31
	0x031B5940 LDR X8, [X8]
	0x031B5944 MOV X0, X8
	0x031B5948 BL 0x321B938
	0x031B594C ADRP X8, 0xF3E000
	0x031B5950 LDR X8, [X8 + 0xA28]
	0x031B5954 MOV X19, X0
	0x031B5958 LDR X8, [X8]
	0x031B595C LDR W9, [X8 + 0xE0]
	0x031B5960 CBNZ W9, 0x31B596C
	0x031B5964 MOV X0, X8
	0x031B5968 BL 0x1C16DFC
	0x031B596C MOV X0, X19
	0x031B5970 MOV X1, X31
	0x031B5974 BL 0x3C0649C
	0x031B5978 LDP X20, X19, [X31 + 0x40]
	0x031B597C LDP X22, X21, [X31 + 0x30]
	0x031B5980 LDP X24, X23, [X31 + 0x20]
	0x031B5984 LDP X26, X25, [X31 + 0x10]
	0x031B5988 LDR X30, [X31], #0x50
	0x031B598C RET
	0x031B5990 BL 0x1C16F20
	0x031B5994 BL 0x1C16F28
	0x031B5998 STR X30, [X31 - 0x30]!
	0x031B599C STP X22, X21, [X31 + 0x10]
	0x031B59A0 STP X20, X19, [X31 + 0x20]
	0x031B59A4 ADRP X21, 0x1226000
	0x031B59A8 ADRP X22, 0xF40000
	0x031B59AC LDRB W8, [X21 + 0xECA]
	0x031B59B0 LDR X22, [X22 + 0x5A8]
	0x031B59B4 MOV X19, X1
	0x031B59B8 MOV W20, W0
	0x031B59BC TBNZ X8, 0x0, 0x31B59D4
	0x031B59C0 ADRP X0, 0xF40000
	0x031B59C4 LDR X0, [X0 + 0x5A8]
	0x031B59C8 BL 0x1C16CF4
	0x031B59CC MOVZ W8, 0x1
	0x031B59D0 STRB W8, [X21 + 0xECA]
	0x031B59D4 LDR X0, [X22]
	0x031B59D8 LDR W8, [X0 + 0xE0]
	0x031B59DC CBNZ W8, 0x31B59E4
	0x031B59E0 BL 0x1C16DFC
	0x031B59E4 BL 0x31AF7B4
	0x031B59E8 MOV W1, W20
	0x031B59EC MOV X2, X19
	0x031B59F0 LDP X20, X19, [X31 + 0x20]
	0x031B59F4 LDP X22, X21, [X31 + 0x10]
	0x031B59F8 LDR X30, [X31], #0x30
	0x031B59FC B 0x31B5A00
	0x031B5A00 STR X30, [X31 - 0x60]!
	0x031B5A04 STP X28, X27, [X31 + 0x10]
	0x031B5A08 STP X26, X25, [X31 + 0x20]
	0x031B5A0C STP X24, X23, [X31 + 0x30]
	0x031B5A10 STP X22, X21, [X31 + 0x40]
	0x031B5A14 STP X20, X19, [X31 + 0x50]
	0x031B5A18 ADRP X22, 0x1226000
	0x031B5A1C ADRP X23, 0xF40000
	0x031B5A20 LDRB W8, [X22 + 0xECC]
	0x031B5A24 LDR X23, [X23 + 0x5A8]
	0x031B5A28 MOV X19, X2
	0x031B5A2C MOV W20, W1
	0x031B5A30 MOV X21, X0
	0x031B5A34 TBNZ X8, 0x0, 0x31B5A58
	0x031B5A38 ADRP X0, 0xF40000
	0x031B5A3C LDR X0, [X0 + 0x5A8]
	0x031B5A40 BL 0x1C16CF4
	0x031B5A44 ADRP X0, 0xF3E000
	0x031B5A48 LDR X0, [X0 + 0x598]
	0x031B5A4C BL 0x1C16CF4
	0x031B5A50 MOVZ W8, 0x1
	0x031B5A54 STRB W8, [X22 + 0xECC]
	0x031B5A58 LDR X0, [X23]
	0x031B5A5C LDR W8, [X0 + 0xE0]
	0x031B5A60 CBNZ W8, 0x31B5A6C
	0x031B5A64 BL 0x1C16DFC
	0x031B5A68 LDR X0, [X23]
	0x031B5A6C LDR X8, [X0 + 0xB8]
	0x031B5A70 ADRP X26, 0xF3E000
	0x031B5A74 LDR X26, [X26 + 0x598]
	0x031B5A78 STR W31, [X8 + 0x60]
	0x031B5A7C LDR W8, [X0 + 0xE0]
	0x031B5A80 CBNZ W8, 0x31B5A8C
	0x031B5A84 BL 0x1C16DFC
	0x031B5A88 LDR X0, [X23]
	0x031B5A8C LDR X8, [X0 + 0xB8]
	0x031B5A90 LDR W24, [X8 + 0x60]
	0x031B5A94 LDR W25, [X8 + 0xA0]
	0x031B5A98 CMP W24, W25
	0x031B5A9C B.GE 0x31B5BD0
	0x031B5AA0 LDR W9, [X0 + 0xE0]
	0x031B5AA4 CBZ W9, 0x31B5AB0
	0x031B5AA8 MOV W9, W24
	0x031B5AAC B 0x31B5AC0
	0x031B5AB0 BL 0x1C16DFC
	0x031B5AB4 LDR X8, [X23]
	0x031B5AB8 LDR X8, [X8 + 0xB8]
	0x031B5ABC LDR W9, [X8 + 0x60]
	0x031B5AC0 LDR X10, [X8 + 0x98]
	0x031B5AC4 CBZ X10, 0x31B5BF4
	0x031B5AC8 LDR W8, [X8 + 0xAC]
	0x031B5ACC LDR W11, [X10 + 0x18]
	0x031B5AD0 MADD W27, W8, W20, W9
	0x031B5AD4 CMP W27, W11
	0x031B5AD8 B.CS 0x31B5BF8
	0x031B5ADC LDR X0, [X26]
	0x031B5AE0 SXTW X28, W27
	0x031B5AE4 ADD X8, X10, X28, 0x3, LSL
	0x031B5AE8 LDR X22, [X8 + 0x20]
	0x031B5AEC LDR W9, [X0 + 0xE0]
	0x031B5AF0 CBNZ W9, 0x31B5AF8
	0x031B5AF4 BL 0x1C16DFC
	0x031B5AF8 MOV X0, X22
	0x031B5AFC MOV X1, X21
	0x031B5B00 MOV X2, X31
	0x031B5B04 BL 0x3C3883C
	0x031B5B08 TBZ X0, 0x0, 0x31B5B50

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, 0x1227000
	012 Move X23, 0xF6B000
	013 Move W8, [X19+3780]
	014 Move X23, [X23+1056]
	015 Move V8, V1
	016 Move V9, V0
	017 Move W21, W2
	018 Move X20, X1
	019 Move X22, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {65}
	024 Move X0, 0xF6B000
	025 Move X0, [X0+1064]
	026 Call 0x1C17CF4
	027 Move X0, 0xF41000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move X0, 0xF6B000
	031 Move X0, [X0+1072]
	032 Call 0x1C17CF4
	033 Move X0, 0xF6B000
	034 Move X0, [X0+1080]
	035 Call 0x1C17CF4
	036 Move X0, 0xF6B000
	037 Move X0, [X0+1088]
	038 Call 0x1C17CF4
	039 Move X0, 0xF6B000
	040 Move X0, [X0+1096]
	041 Call 0x1C17CF4
	042 Move X0, 0xF6B000
	043 Move X0, [X0+1104]
	044 Call 0x1C17CF4
	045 Move X0, 0xF6B000
	046 Move X0, [X0+1112]
	047 Call 0x1C17CF4
	048 Move X0, 0xF6B000
	049 Move X0, [X0+1120]
	050 Call 0x1C17CF4
	051 Move X0, 0xF6B000
	052 Move X0, [X0+1128]
	053 Call 0x1C17CF4
	054 Move X0, 0xF6B000
	055 Move X0, [X0+1136]
	056 Call 0x1C17CF4
	057 Move X0, 0xF6B000
	058 Move X0, [X0+1144]
	059 Call 0x1C17CF4
	060 Move X0, 0xF6B000
	061 Move X0, [X0+1056]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X19+3780], W8
	065 Move X0, [X23]
	066 Call 0x1C17F10
	067 Move X1, X31
	068 Move X19, X0
	069 Call Object..ctor, X0
	070 Compare X19, 0
	071 JumpIfEqual {238}
	072 Move [X19+24], S9
	073 Move [X19+32], S8
	074 Compare X22, 0
	075 JumpIfEqual {238}
	076 Move X23, 0xF41000
	077 Move X23, [X23+1448]
	078 Move X0, X22
	079 Move X1, X31
	080 Call Component.get_gameObject, X0
	081 Move X24, 0x1224000
	082 Move W8, [X24+1923]
	083 Move X22, X0
	084 Compare W8, 0
	085 JumpIfNotEqual {91}
	086 Move X0, 0xF3F000
	087 Move X0, [X0+1440]
	088 Call 0x1C17CF4
	089 Move W8, 1
	090 Move [X24+1923], W8
	091 Move X8, 0xF3F000
	092 Move X8, [X8+1440]
	093 Move X0, [X23]
	094 Move X8, [X8]
	095 Move W9, [X0+224]
	096 Move X8, [X8+184]
	097 Move S10, [X8]
	098 Move S9, [X8+4]
	099 Move V8, [X8+8]
	100 Compare W9, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Call LeanTween.options
	104 Compare X0, 0
	105 JumpIfEqual {238}
	106 Move X1, X31
	107 Call LTDescr.setFollow, X0
	108 Compare X0, 0
	109 JumpIfEqual {238}
	110 Move X1, X20
	111 Move X2, X31
	112 Call LTDescr.setTarget, X0, X1
	113 Move TEMP, 0x80800000
	114 Not TEMP
	115 Move W8, TEMP
	116 Move X1, X0
	117 Move S3, W8
	118 Move X0, X22
	119 Move V0, V10
	120 Move V1, V9
	121 Move V2, V8
	122 Call LeanTween.pushNewTween, X0, X1, V0, X2
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move [X19+16], X0
	125 Move X9, -39968768
	126 Move W8, W21
	127 Add X9, X9, 920
	128 NotImplemented "Instruction ADR not yet implemented."
	129 Move W11, [X9]
	130 Add X10, X10, X11
	131 Move X20, X0
	132 CallNoReturn X10
	133 Compare X20, 0
	134 JumpIfEqual {238}
	135 Move X0, [X20+88]
	136 Compare X0, 0
	137 JumpIfEqual {238}
	138 Move X1, X31
	139 Call Transform.get_position, X0
	140 Move [X20+120], S0
	141 Move [X20+128], S1
	142 Move [X20+128], S2
	143 Move X8, 0xF6B000
	144 Move X8, [X8+1064]
	145 Move X20, [X19+16]
	146 Move X0, [X8]
	147 Call 0x1C17F10
	148 Move X8, 0xF6B000
	149 Move X8, [X8+1080]
	150 Compare X20, 0
	151 JumpIfEqual {238}
	152 Move X0, [X20+88]
	153 Compare X0, 0
	154 JumpIfEqual {238}
	155 Move X20, [X20+232]
	156 Move X1, X31
	157 Call Transform.get_localPosition, X0
	158 Compare X20, 0
	159 JumpIfEqual {238}
	160 Move [X20+36], S0
	161 Move [X20+44], S1
	162 Move [X20+44], S2
	163 Move X8, 0xF6B000
	164 Move X8, [X8+1064]
	165 Move X20, [X19+16]
	166 Move X0, [X8]
	167 Call 0x1C17F10
	168 Move X8, 0xF6B000
	169 Move X8, [X8+1072]
	170 Move X8, 0xF6B000
	171 Move X8, [X8+1064]
	172 Move X0, [X8]
	173 Call 0x1C17F10
	174 Move X8, 0xF6B000
	175 Move X8, [X8+1112]
	176 Move X8, 0xF6B000
	177 Move X8, [X8+1064]
	178 Move X0, [X8]
	179 Call 0x1C17F10
	180 Move X8, 0xF6B000
	181 Move X8, [X8+1120]
	182 Move X8, 0xF6B000
	183 Move X8, [X8+1064]
	184 Move X0, [X8]
	185 Call 0x1C17F10
	186 Move X8, 0xF6B000
	187 Move X8, [X8+1128]
	188 Move X8, 0xF6B000
	189 Move X8, [X8+1064]
	190 Move X0, [X8]
	191 Call 0x1C17F10
	192 Move X8, 0xF6B000
	193 Move X8, [X8+1088]
	194 Move X8, 0xF6B000
	195 Move X8, [X8+1064]
	196 Move X0, [X8]
	197 Call 0x1C17F10
	198 Move X8, 0xF6B000
	199 Move X8, [X8+1096]
	200 Move X8, 0xF6B000
	201 Move X8, [X8+1064]
	202 Move X0, [X8]
	203 Call 0x1C17F10
	204 Move X8, 0xF6B000
	205 Move X8, [X8+1104]
	206 Move X8, 0xF6B000
	207 Move X8, [X8+1064]
	208 Move X0, [X8]
	209 Call 0x1C17F10
	210 Move X8, 0xF6B000
	211 Move X8, [X8+1136]
	212 Move X8, 0xF6B000
	213 Move X8, [X8+1064]
	214 Move X0, [X8]
	215 Call 0x1C17F10
	216 Move X8, 0xF6B000
	217 Move X8, [X8+1144]
	218 Move X2, [X8]
	219 Move X1, X19
	220 Move X3, X31
	221 Move X21, X0
	222 Call ActionMethodDelegate..ctor, X0, X1, X2
	223 Compare X20, 0
	224 JumpIfEqual {238}
	225 Move [X20+168], X21
	226 Move X0, [X19+16]
	227 Move X20, [X31+64]
	228 Move X19, [X31+72]
	229 Move X22, [X31+48]
	230 Move X21, [X31+56]
	231 Move X24, [X31+32]
	232 Move X23, [X31+40]
	233 Move X30, [X31+24]
	234 Move D9, [X31+8]
	235 Move D8, [X31+16]
	236 Move V10, [X31+80]
	237 Return X0
	238 Call 0x1C17F20

Method: LTDescr followSpring(UnityEngine.Transform trans, UnityEngine.Transform target, LeanProp prop, System.Single smoothTime, System.Single maxSpeed = -1, System.Single friction = 2, System.Single accelRate = 0.5)

Disassembly:
	0x031B5B14 CBNZ W8, 0x31B5B20
	0x031B5B18 BL 0x1C16DFC
	0x031B5B1C LDR X0, [X23]
	0x031B5B20 LDR X8, [X0 + 0xB8]
	0x031B5B24 LDR X8, [X8 + 0x90]
	0x031B5B28 CBZ X8, 0x31B5BF4
	0x031B5B2C LDR W9, [X8 + 0x18]
	0x031B5B30 CMP W27, W9
	0x031B5B34 B.CS 0x31B5BF8
	0x031B5B38 ADD X8, X8, X28, 0x3, LSL
	0x031B5B3C LDR X0, [X8 + 0x20]
	0x031B5B40 MOV X1, X19
	0x031B5B44 MOV X2, X31
	0x031B5B48 BL 0x33CB4B0
	0x031B5B4C TBNZ X0, 0x0, 0x31B5B78
	0x031B5B50 LDR X0, [X23]
	0x031B5B54 LDR W8, [X0 + 0xE0]
	0x031B5B58 CBNZ W8, 0x31B5B64
	0x031B5B5C BL 0x1C16DFC
	0x031B5B60 LDR X0, [X23]
	0x031B5B64 LDR X8, [X0 + 0xB8]
	0x031B5B68 LDR W9, [X8 + 0x60]
	0x031B5B6C ADD W9, W9, 0x1
	0x031B5B70 STR W9, [X8 + 0x60]
	0x031B5B74 B 0x31B5A7C
	0x031B5B78 LDR X0, [X23]
	0x031B5B7C LDR W8, [X0 + 0xE0]
	0x031B5B80 CBNZ W8, 0x31B5B8C
	0x031B5B84 BL 0x1C16DFC
	0x031B5B88 LDR X0, [X23]
	0x031B5B8C LDR X8, [X0 + 0xB8]
	0x031B5B90 LDR X8, [X8 + 0x90]
	0x031B5B94 CBZ X8, 0x31B5BF4
	0x031B5B98 LDR W9, [X8 + 0x18]
	0x031B5B9C CMP W27, W9
	0x031B5BA0 B.CS 0x31B5BF8
	0x031B5BA4 ADD X8, X8, X28, 0x3, LSL
	0x031B5BA8 STR X31, [X8 + 0x20]
	0x031B5BAC LDR X8, [X23]
	0x031B5BB0 LDR X8, [X8 + 0xB8]
	0x031B5BB4 LDR X8, [X8 + 0x98]
	0x031B5BB8 CBZ X8, 0x31B5BF4
	0x031B5BBC LDR W9, [X8 + 0x18]
	0x031B5BC0 CMP W27, W9
	0x031B5BC4 B.CS 0x31B5BF8
	0x031B5BC8 ADD X8, X8, X28, 0x3, LSL
	0x031B5BCC STR X31, [X8 + 0x20]
	0x031B5BD0 CMP W24, W25
	0x031B5BD4 LDP X20, X19, [X31 + 0x50]
	0x031B5BD8 LDP X22, X21, [X31 + 0x40]
	0x031B5BDC LDP X24, X23, [X31 + 0x30]
	0x031B5BE0 LDP X26, X25, [X31 + 0x20]
	0x031B5BE4 LDP X28, X27, [X31 + 0x10]
	0x031B5BE8 CSET W0, LT
	0x031B5BEC LDR X30, [X31], #0x60
	0x031B5BF0 RET
	0x031B5BF4 BL 0x1C16F20
	0x031B5BF8 BL 0x1C16F28
	0x031B5BFC STP X30, X21, [X31 - 0x20]!
	0x031B5C00 STP X20, X19, [X31 + 0x10]
	0x031B5C04 ADRP X21, 0x1226000
	0x031B5C08 ADRP X20, 0xF40000
	0x031B5C0C LDRB W8, [X21 + 0xECB]
	0x031B5C10 LDR X20, [X20 + 0x5A8]
	0x031B5C14 MOV W19, W0
	0x031B5C18 TBNZ X8, 0x0, 0x31B5C30
	0x031B5C1C ADRP X0, 0xF40000
	0x031B5C20 LDR X0, [X0 + 0x5A8]
	0x031B5C24 BL 0x1C16CF4
	0x031B5C28 MOVZ W8, 0x1
	0x031B5C2C STRB W8, [X21 + 0xECB]
	0x031B5C30 LDR X0, [X20]
	0x031B5C34 LDR W8, [X0 + 0xE0]
	0x031B5C38 CBNZ W8, 0x31B5C44
	0x031B5C3C BL 0x1C16DFC
	0x031B5C40 LDR X0, [X20]
	0x031B5C44 LDR X8, [X0 + 0xB8]
	0x031B5C48 LDR X10, [X8 + 0x90]
	0x031B5C4C CBZ X10, 0x31B5CA8
	0x031B5C50 LDR W9, [X8 + 0xAC]
	0x031B5C54 LDR W8, [X8 + 0x60]
	0x031B5C58 LDR W11, [X10 + 0x18]
	0x031B5C5C MADD W8, W9, W19, W8
	0x031B5C60 CMP W8, W11
	0x031B5C64 B.CS 0x31B5CAC
	0x031B5C68 SXTW X9, W8
	0x031B5C6C ADD X10, X10, X9, 0x3, LSL
	0x031B5C70 STR X31, [X10 + 0x20]
	0x031B5C74 LDR X10, [X20]
	0x031B5C78 LDR X10, [X10 + 0xB8]
	0x031B5C7C LDR X10, [X10 + 0x98]
	0x031B5C80 CBZ X10, 0x31B5CA8
	0x031B5C84 LDR W11, [X10 + 0x18]
	0x031B5C88 CMP W8, W11
	0x031B5C8C B.CS 0x31B5CAC
	0x031B5C90 LDP X20, X19, [X31 + 0x10]
	0x031B5C94 ADD X8, X10, X9, 0x3, LSL
	0x031B5C98 MOVZ W0, 0x1
	0x031B5C9C STR X31, [X8 + 0x20]
	0x031B5CA0 LDP X30, X21, [X31], #0x20
	0x031B5CA4 RET
	0x031B5CA8 BL 0x1C16F20
	0x031B5CAC BL 0x1C16F28
	0x031B5CB0 STP X30, X21, [X31 - 0x20]!
	0x031B5CB4 STP X20, X19, [X31 + 0x10]
	0x031B5CB8 ADRP X20, 0x1226000
	0x031B5CBC ADRP X21, 0xF40000
	0x031B5CC0 LDRB W8, [X20 + 0xECD]
	0x031B5CC4 LDR X21, [X21 + 0x5A8]
	0x031B5CC8 MOV W19, W0
	0x031B5CCC TBNZ X8, 0x0, 0x31B5CE4
	0x031B5CD0 ADRP X0, 0xF40000
	0x031B5CD4 LDR X0, [X0 + 0x5A8]
	0x031B5CD8 BL 0x1C16CF4
	0x031B5CDC MOVZ W8, 0x1
	0x031B5CE0 STRB W8, [X20 + 0xECD]
	0x031B5CE4 LDR X0, [X21]
	0x031B5CE8 LDR W8, [X0 + 0xE0]
	0x031B5CEC CBNZ W8, 0x31B5CF4
	0x031B5CF0 BL 0x1C16DFC
	0x031B5CF4 MOV W0, W19
	0x031B5CF8 LDP X20, X19, [X31 + 0x10]
	0x031B5CFC MOV X1, X31
	0x031B5D00 LDP X30, X21, [X31], #0x20
	0x031B5D04 B 0x31B5D08
	0x031B5D08 STP X30, X27, [X31 - 0x50]!
	0x031B5D0C STP X26, X25, [X31 + 0x10]
	0x031B5D10 STP X24, X23, [X31 + 0x20]
	0x031B5D14 STP X22, X21, [X31 + 0x30]
	0x031B5D18 STP X20, X19, [X31 + 0x40]
	0x031B5D1C ADRP X21, 0x1226000
	0x031B5D20 LDRB W8, [X21 + 0xECE]
	0x031B5D24 MOV X19, X1
	0x031B5D28 MOV W20, W0
	0x031B5D2C TBNZ X8, 0x0, 0x31B5D5C
	0x031B5D30 ADRP X0, 0xF6A000
	0x031B5D34 LDR X0, [X0 + 0x598]
	0x031B5D38 BL 0x1C16CF4
	0x031B5D3C ADRP X0, 0xF40000
	0x031B5D40 LDR X0, [X0 + 0x5A8]
	0x031B5D44 BL 0x1C16CF4
	0x031B5D48 ADRP X0, 0xF3E000
	0x031B5D4C LDR X0, [X0 + 0x598]
	0x031B5D50 BL 0x1C16CF4
	0x031B5D54 MOVZ W8, 0x1
	0x031B5D58 STRB W8, [X21 + 0xECE]
	0x031B5D5C ADRP X23, 0xF40000
	0x031B5D60 ADRP X24, 0xF3E000
	0x031B5D64 ADRP X25, 0xF6A000
	0x031B5D68 LDR X23, [X23 + 0x5A8]
	0x031B5D6C LDR X24, [X24 + 0x598]
	0x031B5D70 LDR X25, [X25 + 0x598]
	0x031B5D74 MOV W22, W31
	0x031B5D78 LDR X0, [X23]
	0x031B5D7C LDR W8, [X0 + 0xE0]
	0x031B5D80 CBNZ W8, 0x31B5D8C
	0x031B5D84 BL 0x1C16DFC
	0x031B5D88 LDR X0, [X23]
	0x031B5D8C LDR X8, [X0 + 0xB8]
	0x031B5D90 LDR W9, [X8 + 0xA0]
	0x031B5D94 CMP W22, W9
	0x031B5D98 B.GE 0x31B5EB4
	0x031B5D9C LDR W9, [X0 + 0xE0]
	0x031B5DA0 CBNZ W9, 0x31B5DB0
	0x031B5DA4 BL 0x1C16DFC
	0x031B5DA8 LDR X0, [X23]
	0x031B5DAC LDR X8, [X0 + 0xB8]
	0x031B5DB0 LDR X9, [X8 + 0x90]
	0x031B5DB4 CBZ X9, 0x31B5ECC
	0x031B5DB8 LDR W10, [X8 + 0xAC]
	0x031B5DBC LDR W11, [X9 + 0x18]
	0x031B5DC0 MADD W27, W10, W20, W22
	0x031B5DC4 CMP W27, W11
	0x031B5DC8 B.CS 0x31B5ED0
	0x031B5DCC SXTW X26, W27
	0x031B5DD0 ADD X9, X9, X26, 0x3, LSL
	0x031B5DD4 LDR X9, [X9 + 0x20]
	0x031B5DD8 CBZ X9, 0x31B5EAC
	0x031B5DDC LDR W9, [X0 + 0xE0]
	0x031B5DE0 CBNZ W9, 0x31B5DF0
	0x031B5DE4 BL 0x1C16DFC
	0x031B5DE8 LDR X8, [X23]
	0x031B5DEC LDR X8, [X8 + 0xB8]
	0x031B5DF0 LDR X8, [X8 + 0x98]
	0x031B5DF4 CBZ X8, 0x31B5ECC
	0x031B5DF8 LDR W9, [X8 + 0x18]
	0x031B5DFC CMP W27, W9
	0x031B5E00 B.CS 0x31B5ED0
	0x031B5E04 LDR X0, [X24]
	0x031B5E08 ADD X8, X8, X26, 0x3, LSL
	0x031B5E0C LDR X21, [X8 + 0x20]
	0x031B5E10 LDR W9, [X0 + 0xE0]
	0x031B5E14 CBNZ W9, 0x31B5E1C
	0x031B5E18 BL 0x1C16DFC
	0x031B5E1C MOV X0, X21
	0x031B5E20 MOV X1, X31
	0x031B5E24 BL 0x3C38948
	0x031B5E28 LDR X8, [X23]
	0x031B5E2C MOV W21, W0
	0x031B5E30 LDR W9, [X8 + 0xE0]
	0x031B5E34 CBNZ W9, 0x31B5E44
	0x031B5E38 MOV X0, X8
	0x031B5E3C BL 0x1C16DFC
	0x031B5E40 LDR X8, [X23]
	0x031B5E44 LDR X8, [X8 + 0xB8]
	0x031B5E48 LDR X8, [X8 + 0x90]
	0x031B5E4C CBZ X8, 0x31B5ECC
	0x031B5E50 LDR W9, [X8 + 0x18]
	0x031B5E54 CMP W27, W9
	0x031B5E58 TBZ X21, 0x0, 0x31B5EA0
	0x031B5E5C B.CS 0x31B5ED0
	0x031B5E60 ADD X8, X8, X26, 0x3, LSL
	0x031B5E64 LDR X0, [X25]
	0x031B5E68 LDR X26, [X8 + 0x20]
	0x031B5E6C BL 0x1C16F10
	0x031B5E70 MOV X1, X31
	0x031B5E74 MOV X21, X0
	0x031B5E78 BL 0x33BDD8C
	0x031B5E7C STR W20, [X21 + 0x10]
	0x031B5E80 STR X19, [X21 + 0x18]
	0x031B5E84 CBZ X26, 0x31B5ECC
	0x031B5E88 LDR X8, [X26 + 0x18]

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X19, 0x1227000
	013 Move X23, 0xF6B000
	014 Move W8, [X19+3781]
	015 Move X23, [X23+1152]
	016 Move V8, V3
	017 Move V9, V2
	018 Move V10, V1
	019 Move V11, V0
	020 Move W21, W2
	021 Move X20, X1
	022 Move X22, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {68}
	027 Move X0, 0xF6B000
	028 Move X0, [X0+1064]
	029 Call 0x1C17CF4
	030 Move X0, 0xF41000
	031 Move X0, [X0+1448]
	032 Call 0x1C17CF4
	033 Move X0, 0xF6B000
	034 Move X0, [X0+1160]
	035 Call 0x1C17CF4
	036 Move X0, 0xF6B000
	037 Move X0, [X0+1168]
	038 Call 0x1C17CF4
	039 Move X0, 0xF6B000
	040 Move X0, [X0+1176]
	041 Call 0x1C17CF4
	042 Move X0, 0xF6B000
	043 Move X0, [X0+1184]
	044 Call 0x1C17CF4
	045 Move X0, 0xF6B000
	046 Move X0, [X0+1192]
	047 Call 0x1C17CF4
	048 Move X0, 0xF6B000
	049 Move X0, [X0+1200]
	050 Call 0x1C17CF4
	051 Move X0, 0xF6B000
	052 Move X0, [X0+1208]
	053 Call 0x1C17CF4
	054 Move X0, 0xF6B000
	055 Move X0, [X0+1216]
	056 Call 0x1C17CF4
	057 Move X0, 0xF6B000
	058 Move X0, [X0+1224]
	059 Call 0x1C17CF4
	060 Move X0, 0xF6B000
	061 Move X0, [X0+1232]
	062 Call 0x1C17CF4
	063 Move X0, 0xF6B000
	064 Move X0, [X0+1152]
	065 Call 0x1C17CF4
	066 Move W8, 1
	067 Move [X19+3781], W8
	068 Move X0, [X23]
	069 Call 0x1C17F10
	070 Move X1, X31
	071 Move X19, X0
	072 Call Object..ctor, X0
	073 Compare X19, 0
	074 JumpIfEqual {244}
	075 Move [X19+24], S11
	076 Move [X19+32], S10
	077 Move [X19+32], S9
	078 Move [X19+40], S8
	079 Compare X22, 0
	080 JumpIfEqual {244}
	081 Move X23, 0xF41000
	082 Move X23, [X23+1448]
	083 Move X0, X22
	084 Move X1, X31
	085 Call Component.get_gameObject, X0
	086 Move X24, 0x1224000
	087 Move W8, [X24+1923]
	088 Move X22, X0
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0xF3F000
	092 Move X0, [X0+1440]
	093 Call 0x1C17CF4
	094 Move W8, 1
	095 Move [X24+1923], W8
	096 Move X8, 0xF3F000
	097 Move X8, [X8+1440]
	098 Move X0, [X23]
	099 Move X8, [X8]
	100 Move W9, [X0+224]
	101 Move X8, [X8+184]
	102 Move S10, [X8]
	103 Move S9, [X8+4]
	104 Move V8, [X8+8]
	105 Compare W9, 0
	106 JumpIfNotEqual {108}
	107 Call 0x1C17DFC
	108 Call LeanTween.options
	109 Compare X0, 0
	110 JumpIfEqual {244}
	111 Move X1, X31
	112 Call LTDescr.setFollow, X0
	113 Compare X0, 0
	114 JumpIfEqual {244}
	115 Move X1, X20
	116 Move X2, X31
	117 Call LTDescr.setTarget, X0, X1
	118 Move TEMP, 0x80800000
	119 Not TEMP
	120 Move W8, TEMP
	121 Move X1, X0
	122 Move S3, W8
	123 Move X0, X22
	124 Move V0, V10
	125 Move V1, V9
	126 Move V2, V8
	127 Call LeanTween.pushNewTween, X0, X1, V0, X2
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move [X19+16], X0
	130 Move X9, -39968768
	131 Move W8, W21
	132 Add X9, X9, 920
	133 NotImplemented "Instruction ADR not yet implemented."
	134 Move W11, [X9]
	135 Add X10, X10, X11
	136 Move X20, X0
	137 CallNoReturn X10
	138 Compare X20, 0
	139 JumpIfEqual {244}
	140 Move X0, [X20+88]
	141 Compare X0, 0
	142 JumpIfEqual {244}
	143 Move X1, X31
	144 Call Transform.get_position, X0
	145 Move [X20+120], S0
	146 Move [X20+128], S1
	147 Move [X20+128], S2
	148 Move X8, 0xF6B000
	149 Move X8, [X8+1064]
	150 Move X20, [X19+16]
	151 Move X0, [X8]
	152 Call 0x1C17F10
	153 Move X8, 0xF6B000
	154 Move X8, [X8+1168]
	155 Compare X20, 0
	156 JumpIfEqual {244}
	157 Move X0, [X20+88]
	158 Compare X0, 0
	159 JumpIfEqual {244}
	160 Move X20, [X20+232]
	161 Move X1, X31
	162 Call Transform.get_localPosition, X0
	163 Compare X20, 0
	164 JumpIfEqual {244}
	165 Move [X20+36], S0
	166 Move [X20+44], S1
	167 Move [X20+44], S2
	168 Move X8, 0xF6B000
	169 Move X8, [X8+1064]
	170 Move X20, [X19+16]
	171 Move X0, [X8]
	172 Call 0x1C17F10
	173 Move X8, 0xF6B000
	174 Move X8, [X8+1160]
	175 Move X8, 0xF6B000
	176 Move X8, [X8+1064]
	177 Move X0, [X8]
	178 Call 0x1C17F10
	179 Move X8, 0xF6B000
	180 Move X8, [X8+1200]
	181 Move X8, 0xF6B000
	182 Move X8, [X8+1064]
	183 Move X0, [X8]
	184 Call 0x1C17F10
	185 Move X8, 0xF6B000
	186 Move X8, [X8+1208]
	187 Move X8, 0xF6B000
	188 Move X8, [X8+1064]
	189 Move X0, [X8]
	190 Call 0x1C17F10
	191 Move X8, 0xF6B000
	192 Move X8, [X8+1216]
	193 Move X8, 0xF6B000
	194 Move X8, [X8+1064]
	195 Move X0, [X8]
	196 Call 0x1C17F10
	197 Move X8, 0xF6B000
	198 Move X8, [X8+1176]
	199 Move X8, 0xF6B000
	200 Move X8, [X8+1064]
	201 Move X0, [X8]
	202 Call 0x1C17F10
	203 Move X8, 0xF6B000
	204 Move X8, [X8+1184]
	205 Move X8, 0xF6B000
	206 Move X8, [X8+1064]
	207 Move X0, [X8]
	208 Call 0x1C17F10
	209 Move X8, 0xF6B000
	210 Move X8, [X8+1192]
	211 Move X8, 0xF6B000
	212 Move X8, [X8+1064]
	213 Move X0, [X8]
	214 Call 0x1C17F10
	215 Move X8, 0xF6B000
	216 Move X8, [X8+1224]
	217 Move X8, 0xF6B000
	218 Move X8, [X8+1064]
	219 Move X0, [X8]
	220 Call 0x1C17F10
	221 Move X8, 0xF6B000
	222 Move X8, [X8+1232]
	223 Move X2, [X8]
	224 Move X1, X19
	225 Move X3, X31
	226 Move X21, X0
	227 Call ActionMethodDelegate..ctor, X0, X1, X2
	228 Compare X20, 0
	229 JumpIfEqual {244}
	230 Move [X20+168], X21
	231 Move X0, [X19+16]
	232 Move X20, [X31+80]
	233 Move X19, [X31+88]
	234 Move X22, [X31+64]
	235 Move X21, [X31+72]
	236 Move X24, [X31+48]
	237 Move X23, [X31+56]
	238 Move X30, [X31+32]
	239 Move D9, [X31+16]
	240 Move D8, [X31+24]
	241 Move D11, [X31+96]
	242 Move D10, [X31+104]
	243 Return X0
	244 Call 0x1C17F20

Method: LTDescr followBounceOut(UnityEngine.Transform trans, UnityEngine.Transform target, LeanProp prop, System.Single smoothTime, System.Single maxSpeed = -1, System.Single friction = 2, System.Single accelRate = 0.5, System.Single hitDamping = 0.9)

Disassembly:
	0x031B5E94 MOV X1, X21
	0x031B5E98 BLR X8
	0x031B5E9C B 0x31B5EAC
	0x031B5EA0 B.CS 0x31B5ED0
	0x031B5EA4 ADD X8, X8, X26, 0x3, LSL
	0x031B5EA8 STR X31, [X8 + 0x20]
	0x031B5EAC ADD W22, W22, 0x1
	0x031B5EB0 B 0x31B5D78
	0x031B5EB4 LDP X20, X19, [X31 + 0x40]
	0x031B5EB8 LDP X22, X21, [X31 + 0x30]
	0x031B5EBC LDP X24, X23, [X31 + 0x20]
	0x031B5EC0 LDP X26, X25, [X31 + 0x10]
	0x031B5EC4 LDP X30, X27, [X31], #0x50
	0x031B5EC8 RET
	0x031B5ECC BL 0x1C16F20
	0x031B5ED0 BL 0x1C16F28
	0x031B5ED4 STP X30, X21, [X31 - 0x20]!
	0x031B5ED8 STP X20, X19, [X31 + 0x10]
	0x031B5EDC MOV W20, W1
	0x031B5EE0 MOV X1, X31
	0x031B5EE4 MOV X19, X2
	0x031B5EE8 MOV X21, X0
	0x031B5EEC BL 0x33BDD8C
	0x031B5EF0 STR W20, [X21 + 0x10]
	0x031B5EF4 STR X19, [X21 + 0x18]
	0x031B5EF8 LDP X20, X19, [X31 + 0x10]
	0x031B5EFC LDP X30, X21, [X31], #0x20
	0x031B5F00 RET
	0x031B5F04 MOV X1, X31
	0x031B5F08 B 0x3C36C30
	0x031B5F0C STP X29, X30, [X31 - 0x40]!
	0x031B5F10 STP X24, X23, [X31 + 0x10]
	0x031B5F14 STP X22, X21, [X31 + 0x20]
	0x031B5F18 STP X20, X19, [X31 + 0x30]
	0x031B5F1C SUB X31, X31, 0x340
	0x031B5F20 ADRP X19, 0x1226000
	0x031B5F24 ADRP X21, 0xF40000
	0x031B5F28 ADRP X22, 0xF45000
	0x031B5F2C LDRB W8, [X19 + 0xECF]
	0x031B5F30 LDR X21, [X21 + 0x5A8]
	0x031B5F34 LDR X22, [X22 + 0x790]
	0x031B5F38 TBNZ X8, 0x0, 0x31B5F68
	0x031B5F3C ADRP X0, 0xF45000
	0x031B5F40 LDR X0, [X0 + 0x730]
	0x031B5F44 BL 0x1C16CF4
	0x031B5F48 ADRP X0, 0xF45000
	0x031B5F4C LDR X0, [X0 + 0x790]
	0x031B5F50 BL 0x1C16CF4
	0x031B5F54 ADRP X0, 0xF40000
	0x031B5F58 LDR X0, [X0 + 0x5A8]
	0x031B5F5C BL 0x1C16CF4
	0x031B5F60 MOVZ W8, 0x1
	0x031B5F64 STRB W8, [X19 + 0xECF]
	0x031B5F68 LDR X8, [X21]
	0x031B5F6C ADRP X10, 0xFFFFFFFFFD939000
	0x031B5F70 ADRP X11, 0xFFFFFFFFFD935000
	0x031B5F74 LDR V0, [X10 + 0x2D8]
	0x031B5F78 LDR X8, [X8 + 0xB8]
	0x031B5F7C LDR V1, [X11 + 0x93]
	0x031B5F80 MOVZ W9, 0x1
	0x031B5F84 MOVZ W10, 0xBF800000
	0x031B5F88 STRB W9, [X8]
	0x031B5F8C STUR D0, [X8 + 0x4]
	0x031B5F90 STUR V1, [X8 + 0x38]
	0x031B5F94 STR W10, [X8 + 0x50]
	0x031B5F98 STR W31, [X8 + 0x5C]
	0x031B5F9C LDR X0, [X22]
	0x031B5FA0 MOVZ W1, 0x9
	0x031B5FA4 BL 0x1C16D6C
	0x031B5FA8 MOV X19, X0
	0x031B5FAC ADD X0, X31, 0x320
	0x031B5FB0 FMOV S0, W31
	0x031B5FB4 FMOV S1, W31
	0x031B5FB8 MOV X1, X31
	0x031B5FBC STR X31, [X31 + 0x328]
	0x031B5FC0 STR X31, [X31 + 0x320]
	0x031B5FC4 STR W31, [X31 + 0x338]
	0x031B5FC8 STR X31, [X31 + 0x330]
	0x031B5FCC BL 0x3C00A74
	0x031B5FD0 CBZ X19, 0x31B6470
	0x031B5FD4 ADD X20, X31, 0x280
	0x031B5FD8 LDR V0, [X31 + 0x32]
	0x031B5FDC LDUR V1, [X20 + 0xAC]
	0x031B5FE0 STR V0, [X31 + 0x30]
	0x031B5FE4 STUR V1, [X20 + 0x8C]
	0x031B5FE8 LDR W8, [X19 + 0x18]
	0x031B5FEC CBZ W8, 0x31B646C
	0x031B5FF0 LDUR V0, [X20 + 0x8C]
	0x031B5FF4 LDR V1, [X31 + 0x30]
	0x031B5FF8 ADRP X8, 0xFFFFFFFFFD935000
	0x031B5FFC ADRP X9, 0xFFFFFFFFFD934000
	0x031B6000 STUR V0, [X19 + 0x2C]
	0x031B6004 STR V1, [X19 + 0x2]
	0x031B6008 LDR V0, [X8 + 0x98]
	0x031B600C LDR V1, [X9 + 0xF30]
	0x031B6010 ADD X0, X31, 0x2E0
	0x031B6014 MOV X1, X31
	0x031B6018 STR X31, [X31 + 0x2E8]
	0x031B601C STR X31, [X31 + 0x2E0]
	0x031B6020 STR W31, [X31 + 0x2F8]
	0x031B6024 STR X31, [X31 + 0x2F0]
	0x031B6028 BL 0x3C00A74
	0x031B602C LDUR V0, [X20 + 0x6C]
	0x031B6030 LDR V1, [X31 + 0x2E]
	0x031B6034 STUR V0, [X20 + 0x4C]
	0x031B6038 STR V1, [X31 + 0x2C]
	0x031B603C LDR W8, [X19 + 0x18]
	0x031B6040 CMP W8, 0x1
	0x031B6044 B.LS 0x31B646C
	0x031B6048 LDUR V0, [X20 + 0x4C]
	0x031B604C LDR V1, [X31 + 0x2C]
	0x031B6050 ADRP X8, 0xFFFFFFFFFD934000
	0x031B6054 ADRP X9, 0xFFFFFFFFFD933000
	0x031B6058 STUR V0, [X19 + 0x48]
	0x031B605C STUR V1, [X19 + 0x3C]
	0x031B6060 LDR V0, [X8 + 0x3D4]
	0x031B6064 LDR V1, [X9 + 0xF68]
	0x031B6068 ADD X0, X31, 0x2A0
	0x031B606C MOV X1, X31
	0x031B6070 STR X31, [X31 + 0x2A8]
	0x031B6074 STR X31, [X31 + 0x2A0]
	0x031B6078 STR W31, [X31 + 0x2B8]
	0x031B607C STR X31, [X31 + 0x2B0]
	0x031B6080 BL 0x3C00A74
	0x031B6084 LDUR V0, [X20 + 0x2C]
	0x031B6088 LDR V1, [X31 + 0x2A]
	0x031B608C STUR V0, [X20 + 0xC]
	0x031B6090 STR V1, [X31 + 0x28]
	0x031B6094 LDR W8, [X19 + 0x18]
	0x031B6098 CMP W8, 0x2
	0x031B609C B.LS 0x31B646C
	0x031B60A0 LDUR V0, [X20 + 0xC]
	0x031B60A4 LDR V1, [X31 + 0x28]
	0x031B60A8 ADRP X8, 0xFFFFFFFFFD934000
	0x031B60AC ADRP X9, 0xFFFFFFFFFD934000
	0x031B60B0 STUR V0, [X19 + 0x64]
	0x031B60B4 STUR V1, [X19 + 0x58]
	0x031B60B8 LDR V0, [X8 + 0x138]
	0x031B60BC LDR V1, [X9 + 0x21C]
	0x031B60C0 ADD X0, X31, 0x260
	0x031B60C4 MOV X1, X31
	0x031B60C8 ADD X20, X31, 0x180
	0x031B60CC STR X31, [X31 + 0x268]
	0x031B60D0 STR X31, [X31 + 0x260]
	0x031B60D4 STR W31, [X31 + 0x278]
	0x031B60D8 STR X31, [X31 + 0x270]
	0x031B60DC BL 0x3C00A74
	0x031B60E0 LDUR V0, [X20 + 0xEC]
	0x031B60E4 LDR V1, [X31 + 0x26]
	0x031B60E8 STUR V0, [X20 + 0xCC]
	0x031B60EC STR V1, [X31 + 0x24]
	0x031B60F0 LDR W8, [X19 + 0x18]
	0x031B60F4 CMP W8, 0x3
	0x031B60F8 B.LS 0x31B646C
	0x031B60FC LDUR V0, [X20 + 0xCC]
	0x031B6100 LDR V1, [X31 + 0x24]
	0x031B6104 ADRP X8, 0xFFFFFFFFFD933000
	0x031B6108 ADRP X9, 0xFFFFFFFFFD934000
	0x031B610C STR V0, [X19 + 0x8]
	0x031B6110 STUR V1, [X19 + 0x74]
	0x031B6114 LDR V0, [X8 + 0xF34]
	0x031B6118 LDR V1, [X9 + 0x370]
	0x031B611C ADD X0, X31, 0x220
	0x031B6120 MOV X1, X31
	0x031B6124 STR X31, [X31 + 0x228]
	0x031B6128 STR X31, [X31 + 0x220]
	0x031B612C STR W31, [X31 + 0x238]
	0x031B6130 STR X31, [X31 + 0x230]
	0x031B6134 BL 0x3C00A74
	0x031B6138 LDUR V0, [X20 + 0xAC]
	0x031B613C LDR V1, [X31 + 0x22]
	0x031B6140 STUR V0, [X20 + 0x8C]
	0x031B6144 STR V1, [X31 + 0x20]
	0x031B6148 LDR W8, [X19 + 0x18]
	0x031B614C CMP W8, 0x4
	0x031B6150 B.LS 0x31B646C
	0x031B6154 LDUR V0, [X20 + 0x8C]
	0x031B6158 LDR V1, [X31 + 0x20]
	0x031B615C ADRP X8, 0xFFFFFFFFFD934000
	0x031B6160 ADRP X9, 0xFFFFFFFFFD934000
	0x031B6164 STUR V0, [X19 + 0x9C]
	0x031B6168 STR V1, [X19 + 0x9]
	0x031B616C LDR V0, [X8 + 0x220]
	0x031B6170 LDR V1, [X9 + 0x258]
	0x031B6174 ADD X0, X31, 0x1E0
	0x031B6178 MOV X1, X31
	0x031B617C STP X31, X31, [X31 + 0x1E0]
	0x031B6180 STR W31, [X31 + 0x1F8]
	0x031B6184 STR X31, [X31 + 0x1F0]
	0x031B6188 BL 0x3C00A74
	0x031B618C LDUR V0, [X20 + 0x6C]
	0x031B6190 LDR V1, [X31 + 0x1E]
	0x031B6194 STUR V0, [X20 + 0x4C]
	0x031B6198 STR V1, [X31 + 0x1C]
	0x031B619C LDR W8, [X19 + 0x18]
	0x031B61A0 CMP W8, 0x5
	0x031B61A4 B.LS 0x31B646C
	0x031B61A8 LDUR V0, [X20 + 0x4C]
	0x031B61AC LDR V1, [X31 + 0x1C]
	0x031B61B0 ADRP X8, 0xFFFFFFFFFD934000
	0x031B61B4 ADRP X9, 0xFFFFFFFFFD934000
	0x031B61B8 STUR V0, [X19 + 0xB8]
	0x031B61BC STUR V1, [X19 + 0xAC]
	0x031B61C0 LDR V0, [X8 + 0x194]
	0x031B61C4 LDR V1, [X9 + 0x3D8]
	0x031B61C8 ADD X0, X31, 0x1A0
	0x031B61CC MOV X1, X31
	0x031B61D0 STP X31, X31, [X31 + 0x1A0]
	0x031B61D4 STR W31, [X31 + 0x1B8]
	0x031B61D8 STR X31, [X31 + 0x1B0]
	0x031B61DC BL 0x3C00A74
	0x031B61E0 LDUR V0, [X20 + 0x2C]
	0x031B61E4 LDR V1, [X31 + 0x1A]
	0x031B61E8 STUR V0, [X20 + 0xC]
	0x031B61EC STR V1, [X31 + 0x18]
	0x031B61F0 LDR W8, [X19 + 0x18]
	0x031B61F4 CMP W8, 0x6
	0x031B61F8 B.LS 0x31B646C

ISIL:
	001 Move [X31-96], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X19, 0x1227000
	014 Move X23, 0xF6B000
	015 Move W8, [X19+3782]
	016 Move X23, [X23+1240]
	017 Move V8, V4
	018 Move V9, V3
	019 Move V10, V2
	020 Move V11, V1
	021 Move V12, V0
	022 Move W21, W2
	023 Move X20, X1
	024 Move X22, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {70}
	029 Move X0, 0xF6B000
	030 Move X0, [X0+1064]
	031 Call 0x1C17CF4
	032 Move X0, 0xF41000
	033 Move X0, [X0+1448]
	034 Call 0x1C17CF4
	035 Move X0, 0xF6B000
	036 Move X0, [X0+1248]
	037 Call 0x1C17CF4
	038 Move X0, 0xF6B000
	039 Move X0, [X0+1256]
	040 Call 0x1C17CF4
	041 Move X0, 0xF6B000
	042 Move X0, [X0+1264]
	043 Call 0x1C17CF4
	044 Move X0, 0xF6B000
	045 Move X0, [X0+1272]
	046 Call 0x1C17CF4
	047 Move X0, 0xF6B000
	048 Move X0, [X0+1280]
	049 Call 0x1C17CF4
	050 Move X0, 0xF6B000
	051 Move X0, [X0+1288]
	052 Call 0x1C17CF4
	053 Move X0, 0xF6B000
	054 Move X0, [X0+1296]
	055 Call 0x1C17CF4
	056 Move X0, 0xF6B000
	057 Move X0, [X0+1304]
	058 Call 0x1C17CF4
	059 Move X0, 0xF6B000
	060 Move X0, [X0+1312]
	061 Call 0x1C17CF4
	062 Move X0, 0xF6B000
	063 Move X0, [X0+1320]
	064 Call 0x1C17CF4
	065 Move X0, 0xF6B000
	066 Move X0, [X0+1240]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X19+3782], W8
	070 Move X0, [X23]
	071 Call 0x1C17F10
	072 Move X1, X31
	073 Move X19, X0
	074 Call Object..ctor, X0
	075 Compare X19, 0
	076 JumpIfEqual {237}
	077 Move [X19+24], S12
	078 Move [X19+32], S11
	079 Move [X19+32], S10
	080 Move [X19+40], S9
	081 Move [X19+40], S8
	082 Compare X22, 0
	083 JumpIfEqual {237}
	084 Move X23, 0xF41000
	085 Move X23, [X23+1448]
	086 Move X0, X22
	087 Move X1, X31
	088 Call Component.get_gameObject, X0
	089 Move X24, 0x1224000
	090 Move W8, [X24+1923]
	091 Move X22, X0
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0xF3F000
	095 Move X0, [X0+1440]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X24+1923], W8
	099 Move X8, 0xF3F000
	100 Move X8, [X8+1440]
	101 Move X0, [X23]
	102 Move X8, [X8]
	103 Move W9, [X0+224]
	104 Move X8, [X8+184]
	105 Move S10, [X8]
	106 Move S9, [X8+4]
	107 Move V8, [X8+8]
	108 Compare W9, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1C17DFC
	111 Call LeanTween.options
	112 Compare X0, 0
	113 JumpIfEqual {237}
	114 Move X1, X31
	115 Call LTDescr.setFollow, X0
	116 Compare X0, 0
	117 JumpIfEqual {237}
	118 Move X1, X20
	119 Move X2, X31
	120 Call LTDescr.setTarget, X0, X1
	121 Move TEMP, 0x80800000
	122 Not TEMP
	123 Move W8, TEMP
	124 Move X1, X0
	125 Move S3, W8
	126 Move X0, X22
	127 Move V0, V10
	128 Move V1, V9
	129 Move V2, V8
	130 Call LeanTween.pushNewTween, X0, X1, V0, X2
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move [X19+16], X0
	133 Move X9, -39972864
	134 Move W8, W21
	135 Add X9, X9, 930
	136 NotImplemented "Instruction ADR not yet implemented."
	137 Move W11, [X9]
	138 Add X10, X10, X11
	139 Move X20, X0
	140 CallNoReturn X10
	141 Move X8, 0xF6A000
	142 Move X8, [X8+1064]
	143 Move X0, [X8]
	144 Call 0x1C17F10
	145 Move X8, 0xF6A000
	146 Move X8, [X8+1256]
	147 Compare X20, 0
	148 JumpIfEqual {237}
	149 Move X0, [X20+88]
	150 Compare X0, 0
	151 JumpIfEqual {237}
	152 Move X20, [X20+232]
	153 Move X1, X31
	154 Call Transform.get_localPosition, X0
	155 Compare X20, 0
	156 JumpIfEqual {237}
	157 Move [X20+36], S0
	158 Move [X20+44], S1
	159 Move [X20+44], S2
	160 Move X8, 0xF6A000
	161 Move X8, [X8+1064]
	162 Move X20, [X19+16]
	163 Move X0, [X8]
	164 Call 0x1C17F10
	165 Move X8, 0xF6A000
	166 Move X8, [X8+1248]
	167 Move X8, 0xF6A000
	168 Move X8, [X8+1064]
	169 Move X0, [X8]
	170 Call 0x1C17F10
	171 Move X8, 0xF6A000
	172 Move X8, [X8+1288]
	173 Move X8, 0xF6A000
	174 Move X8, [X8+1064]
	175 Move X0, [X8]
	176 Call 0x1C17F10
	177 Move X8, 0xF6A000
	178 Move X8, [X8+1296]
	179 Move X8, 0xF6A000
	180 Move X8, [X8+1064]
	181 Move X0, [X8]
	182 Call 0x1C17F10
	183 Move X8, 0xF6A000
	184 Move X8, [X8+1304]
	185 Move X8, 0xF6A000
	186 Move X8, [X8+1064]
	187 Move X0, [X8]
	188 Call 0x1C17F10
	189 Move X8, 0xF6A000
	190 Move X8, [X8+1264]
	191 Move X8, 0xF6A000
	192 Move X8, [X8+1064]
	193 Move X0, [X8]
	194 Call 0x1C17F10
	195 Move X8, 0xF6A000
	196 Move X8, [X8+1272]
	197 Move X8, 0xF6A000
	198 Move X8, [X8+1064]
	199 Move X0, [X8]
	200 Call 0x1C17F10
	201 Move X8, 0xF6A000
	202 Move X8, [X8+1280]
	203 Move X8, 0xF6A000
	204 Move X8, [X8+1064]
	205 Move X0, [X8]
	206 Call 0x1C17F10
	207 Move X8, 0xF6A000
	208 Move X8, [X8+1312]
	209 Move X8, 0xF6A000
	210 Move X8, [X8+1064]
	211 Move X0, [X8]
	212 Call 0x1C17F10
	213 Move X8, 0xF6A000
	214 Move X8, [X8+1320]
	215 Move X2, [X8]
	216 Move X1, X19
	217 Move X3, X31
	218 Move X21, X0
	219 Call ActionMethodDelegate..ctor, X0, X1, X2
	220 Compare X20, 0
	221 JumpIfEqual {237}
	222 Move [X20+168], X21
	223 Move X0, [X19+16]
	224 Move X20, [X31+80]
	225 Move X19, [X31+88]
	226 Move X22, [X31+64]
	227 Move X21, [X31+72]
	228 Move X24, [X31+48]
	229 Move X23, [X31+56]
	230 Move X30, [X31+40]
	231 Move D9, [X31+24]
	232 Move D8, [X31+32]
	233 Move D11, [X31+8]
	234 Move D10, [X31+16]
	235 Move V12, [X31+96]
	236 Return X0
	237 Call 0x1C17F20

Method: LTDescr followLinear(UnityEngine.Transform trans, UnityEngine.Transform target, LeanProp prop, System.Single moveSpeed)

Disassembly:
	0x031B6204 ADRP X8, 0xFFFFFFFFFD934000
	0x031B6208 ADRP X9, 0xFFFFFFFFFD934000
	0x031B620C STUR V0, [X19 + 0xD4]
	0x031B6210 STUR V1, [X19 + 0xC8]
	0x031B6214 LDR V0, [X8 + 0x428]
	0x031B6218 LDR V1, [X9 + 0x2B4]
	0x031B621C ADD X0, X31, 0x160
	0x031B6220 MOV X1, X31
	0x031B6224 ADD X23, X31, 0x80
	0x031B6228 STP X31, X31, [X31 + 0x160]
	0x031B622C STR W31, [X31 + 0x178]
	0x031B6230 STR X31, [X31 + 0x170]
	0x031B6234 BL 0x3C00A74
	0x031B6238 LDUR V0, [X23 + 0xEC]
	0x031B623C LDR V1, [X31 + 0x16]
	0x031B6240 STUR V0, [X23 + 0xCC]
	0x031B6244 STR V1, [X31 + 0x14]
	0x031B6248 LDR W8, [X19 + 0x18]
	0x031B624C CMP W8, 0x7
	0x031B6250 B.LS 0x31B646C
	0x031B6254 LDUR V0, [X23 + 0xCC]
	0x031B6258 LDR V1, [X31 + 0x14]
	0x031B625C ADD X0, X31, 0x120
	0x031B6260 MOV X1, X31
	0x031B6264 STR V0, [X19 + 0xF]
	0x031B6268 STUR V1, [X19 + 0xE4]
	0x031B626C FMOV S0, 1
	0x031B6270 FMOV S1, W31
	0x031B6274 STP X31, X31, [X31 + 0x120]
	0x031B6278 STR W31, [X31 + 0x138]
	0x031B627C STR X31, [X31 + 0x130]
	0x031B6280 BL 0x3C00A74
	0x031B6284 LDUR V0, [X23 + 0xAC]
	0x031B6288 LDR V1, [X31 + 0x12]
	0x031B628C STUR V0, [X23 + 0x8C]
	0x031B6290 STR V1, [X31 + 0x10]
	0x031B6294 LDR W8, [X19 + 0x18]
	0x031B6298 CMP W8, 0x8
	0x031B629C B.LS 0x31B646C
	0x031B62A0 LDR V0, [X31 + 0x10]
	0x031B62A4 LDUR V1, [X23 + 0x8C]
	0x031B62A8 ADRP X24, 0xF44000
	0x031B62AC LDR X24, [X24 + 0x730]
	0x031B62B0 ADD X8, X19, 0x100
	0x031B62B4 STR V0, [X19 + 0x10]
	0x031B62B8 STUR V1, [X8 + 0xC]
	0x031B62BC LDR X0, [X24]
	0x031B62C0 BL 0x1C16F10
	0x031B62C4 MOV X1, X19
	0x031B62C8 MOV X2, X31
	0x031B62CC MOV X20, X0
	0x031B62D0 BL 0x3C013D4
	0x031B62D4 LDR X8, [X21]
	0x031B62D8 MOVZ W1, 0x4
	0x031B62DC LDR X8, [X8 + 0xB8]
	0x031B62E0 STR X20, [X8 + 0x70]
	0x031B62E4 LDR X0, [X22]
	0x031B62E8 BL 0x1C16D6C
	0x031B62EC MOV X19, X0
	0x031B62F0 ADD X0, X31, 0xE0
	0x031B62F4 FMOV S0, W31
	0x031B62F8 FMOV S1, W31
	0x031B62FC MOV X1, X31
	0x031B6300 STP X31, X31, [X31 + 0xE0]
	0x031B6304 STR W31, [X31 + 0xF8]
	0x031B6308 STR X31, [X31 + 0xF0]
	0x031B630C BL 0x3C00A74
	0x031B6310 CBZ X19, 0x31B6470
	0x031B6314 LDR V0, [X31 + 0xE]
	0x031B6318 LDUR V1, [X23 + 0x6C]
	0x031B631C STR V0, [X31 + 0xC]
	0x031B6320 STUR V1, [X23 + 0x4C]
	0x031B6324 LDR W8, [X19 + 0x18]
	0x031B6328 CBZ W8, 0x31B646C
	0x031B632C LDUR V0, [X23 + 0x4C]
	0x031B6330 LDR V1, [X31 + 0xC]
	0x031B6334 ADD X0, X31, 0xA0
	0x031B6338 MOV X1, X31
	0x031B633C STUR V0, [X19 + 0x2C]
	0x031B6340 STR V1, [X19 + 0x2]
	0x031B6344 FMOV S0, 0.25
	0x031B6348 FMOV S1, 1
	0x031B634C STP X31, X31, [X31 + 0xA0]
	0x031B6350 STR W31, [X31 + 0xB8]
	0x031B6354 STR X31, [X31 + 0xB0]
	0x031B6358 BL 0x3C00A74
	0x031B635C LDUR V0, [X23 + 0x2C]
	0x031B6360 LDR V1, [X31 + 0xA]
	0x031B6364 STUR V0, [X23 + 0xC]
	0x031B6368 STR V1, [X31 + 0x8]
	0x031B636C LDR W8, [X19 + 0x18]
	0x031B6370 CMP W8, 0x1
	0x031B6374 B.LS 0x31B646C
	0x031B6378 LDUR V0, [X23 + 0xC]
	0x031B637C LDR V1, [X31 + 0x8]
	0x031B6380 ADD X0, X31, 0x60
	0x031B6384 MOV X1, X31
	0x031B6388 STUR V0, [X19 + 0x48]
	0x031B638C STUR V1, [X19 + 0x3C]
	0x031B6390 FMOV S0, 0.75
	0x031B6394 FMOV S1, -1
	0x031B6398 STP X31, X31, [X31 + 0x60]
	0x031B639C STR W31, [X31 + 0x78]
	0x031B63A0 STR X31, [X31 + 0x70]
	0x031B63A4 BL 0x3C00A74
	0x031B63A8 LDUR V0, [X31 + 0x6C]
	0x031B63AC LDR V1, [X31 + 0x6]
	0x031B63B0 STUR V0, [X31 + 0x4C]
	0x031B63B4 STR V1, [X31 + 0x4]
	0x031B63B8 LDR W8, [X19 + 0x18]
	0x031B63BC CMP W8, 0x2
	0x031B63C0 B.LS 0x31B646C
	0x031B63C4 LDUR V0, [X31 + 0x4C]
	0x031B63C8 LDR V1, [X31 + 0x4]
	0x031B63CC ADD X0, X31, 0x20
	0x031B63D0 MOV X1, X31
	0x031B63D4 STUR V0, [X19 + 0x64]
	0x031B63D8 STUR V1, [X19 + 0x58]
	0x031B63DC FMOV S0, 1
	0x031B63E0 FMOV S1, W31
	0x031B63E4 STP X31, X31, [X31 + 0x20]
	0x031B63E8 STR W31, [X31 + 0x38]
	0x031B63EC STR X31, [X31 + 0x30]
	0x031B63F0 BL 0x3C00A74
	0x031B63F4 LDUR V0, [X31 + 0x2C]
	0x031B63F8 LDR V1, [X31 + 0x2]
	0x031B63FC STUR V0, [X31 + 0xC]
	0x031B6400 STR V1, [X31]
	0x031B6404 LDR W8, [X19 + 0x18]
	0x031B6408 CMP W8, 0x3
	0x031B640C B.LS 0x31B646C
	0x031B6410 LDUR V0, [X31 + 0xC]
	0x031B6414 LDR V1, [X31]
	0x031B6418 STR V0, [X19 + 0x8]
	0x031B641C STUR V1, [X19 + 0x74]
	0x031B6420 LDR X0, [X24]
	0x031B6424 BL 0x1C16F10
	0x031B6428 MOV X1, X19
	0x031B642C MOV X2, X31
	0x031B6430 MOV X20, X0
	0x031B6434 BL 0x3C013D4
	0x031B6438 LDR X8, [X21]
	0x031B643C ADRP X9, 0xFFFFFFFFFD936000
	0x031B6440 LDR V0, [X9 + 0x53]
	0x031B6444 LDR X8, [X8 + 0xB8]
	0x031B6448 STR X20, [X8 + 0x78]
	0x031B644C STR W31, [X8 + 0x84]
	0x031B6450 STR V0, [X8 + 0xA]
	0x031B6454 ADD X31, X31, 0x340
	0x031B6458 LDP X20, X19, [X31 + 0x30]
	0x031B645C LDP X22, X21, [X31 + 0x20]
	0x031B6460 LDP X24, X23, [X31 + 0x10]
	0x031B6464 LDP X29, X30, [X31], #0x40
	0x031B6468 RET
	0x031B646C BL 0x1C16F28
	0x031B6470 BL 0x1C16F20
	0x031B6474 SUB X31, X31, 0x70
	0x031B6478 STP D15, D14, [X31 + 0x10]
	0x031B647C STP D13, D12, [X31 + 0x20]
	0x031B6480 STP D11, D10, [X31 + 0x30]
	0x031B6484 STP D9, D8, [X31 + 0x40]
	0x031B6488 STP X30, X21, [X31 + 0x50]
	0x031B648C STP X20, X19, [X31 + 0x60]
	0x031B6490 MOV X19, X0
	0x031B6494 LDR X0, [X0 + 0x10]
	0x031B6498 CBZ X0, 0x31B6570
	0x031B649C LDR X21, [X0 + 0xE8]
	0x031B64A0 CBZ X21, 0x31B6570
	0x031B64A4 LDP S8, S9, [X21 + 0x24]
	0x031B64A8 LDR V10, [X21 + 0x2C]
	0x031B64AC MOV X1, X31
	0x031B64B0 BL 0x31BF678
	0x031B64B4 CBZ X0, 0x31B6570
	0x031B64B8 MOV X1, X31
	0x031B64BC BL 0x3C3EB78
	0x031B64C0 LDR X8, [X19 + 0x10]
	0x031B64C4 CBZ X8, 0x31B6570
	0x031B64C8 LDP S14, S15, [X19 + 0x18]
	0x031B64CC MOV X0, X31
	0x031B64D0 MOV V11.16B, V0.16B
	0x031B64D4 MOV V12.16B, V1.16B
	0x031B64D8 MOV V13.16B, V2.16B
	0x031B64DC ADD X20, X8, 0x60
	0x031B64E0 BL 0x3C3C714
	0x031B64E4 STR S0, [X31]
	0x031B64E8 MOV V0.16B, V8.16B
	0x031B64EC MOV V1.16B, V9.16B
	0x031B64F0 MOV V2.16B, V10.16B
	0x031B64F4 MOV V3.16B, V11.16B
	0x031B64F8 MOV V4.16B, V12.16B
	0x031B64FC MOV V5.16B, V13.16B
	0x031B6500 MOV X0, X20
	0x031B6504 MOV V6.16B, V14.16B
	0x031B6508 MOV V7.16B, V15.16B
	0x031B650C BL 0x31AA1B4
	0x031B6510 STP S0, S1, [X21 + 0x24]
	0x031B6514 STR S2, [X21 + 0x2C]
	0x031B6518 LDR X8, [X19 + 0x10]
	0x031B651C CBZ X8, 0x31B6570
	0x031B6520 LDR X9, [X8 + 0xE8]
	0x031B6524 CBZ X9, 0x31B6570
	0x031B6528 LDR X0, [X8 + 0x58]
	0x031B652C CBZ X0, 0x31B6570
	0x031B6530 LDR V0, [X9 + 0x2C]
	0x031B6534 LDR V1, [X8 + 0x74]
	0x031B6538 LDUR V3, [X9 + 0x24]
	0x031B653C LDUR V4, [X8 + 0x6C]
	0x031B6540 LDP X20, X19, [X31 + 0x60]
	0x031B6544 LDP X30, X21, [X31 + 0x50]
	0x031B6548 LDP D9, D8, [X31 + 0x40]

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X19, 0x1226000
	012 Move X23, 0xF6A000
	013 Move W8, [X19+3783]
	014 Move X23, [X23+1328]
	015 Move V8, V0
	016 Move W21, W2
	017 Move X20, X1
	018 Move X22, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {64}
	023 Move X0, 0xF6A000
	024 Move X0, [X0+1064]
	025 Call 0x1C17CF4
	026 Move X0, 0xF40000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move X0, 0xF6A000
	030 Move X0, [X0+1336]
	031 Call 0x1C17CF4
	032 Move X0, 0xF6A000
	033 Move X0, [X0+1344]
	034 Call 0x1C17CF4
	035 Move X0, 0xF6A000
	036 Move X0, [X0+1352]
	037 Call 0x1C17CF4
	038 Move X0, 0xF6A000
	039 Move X0, [X0+1360]
	040 Call 0x1C17CF4
	041 Move X0, 0xF6A000
	042 Move X0, [X0+1368]
	043 Call 0x1C17CF4
	044 Move X0, 0xF6A000
	045 Move X0, [X0+1376]
	046 Call 0x1C17CF4
	047 Move X0, 0xF6A000
	048 Move X0, [X0+1384]
	049 Call 0x1C17CF4
	050 Move X0, 0xF6A000
	051 Move X0, [X0+1392]
	052 Call 0x1C17CF4
	053 Move X0, 0xF6A000
	054 Move X0, [X0+1400]
	055 Call 0x1C17CF4
	056 Move X0, 0xF6A000
	057 Move X0, [X0+1408]
	058 Call 0x1C17CF4
	059 Move X0, 0xF6A000
	060 Move X0, [X0+1328]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X19+3783], W8
	064 Move X0, [X23]
	065 Call 0x1C17F10
	066 Move X1, X31
	067 Move X19, X0
	068 Call Object..ctor, X0
	069 Compare X19, 0
	070 JumpIfEqual {225}
	071 Move [X19+24], S8
	072 Compare X22, 0
	073 JumpIfEqual {225}
	074 Move X23, 0xF40000
	075 Move X23, [X23+1448]
	076 Move X0, X22
	077 Move X1, X31
	078 Call Component.get_gameObject, X0
	079 Move X24, 0x1223000
	080 Move W8, [X24+1923]
	081 Move X22, X0
	082 Compare W8, 0
	083 JumpIfNotEqual {89}
	084 Move X0, 0xF3E000
	085 Move X0, [X0+1440]
	086 Call 0x1C17CF4
	087 Move W8, 1
	088 Move [X24+1923], W8
	089 Move X8, 0xF3E000
	090 Move X8, [X8+1440]
	091 Move X0, [X23]
	092 Move X8, [X8]
	093 Move W9, [X0+224]
	094 Move X8, [X8+184]
	095 Move S10, [X8]
	096 Move S9, [X8+4]
	097 Move V8, [X8+8]
	098 Compare W9, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Call LeanTween.options
	102 Compare X0, 0
	103 JumpIfEqual {225}
	104 Move X1, X31
	105 Call LTDescr.setFollow, X0
	106 Compare X0, 0
	107 JumpIfEqual {225}
	108 Move X1, X20
	109 Move X2, X31
	110 Call LTDescr.setTarget, X0, X1
	111 Move TEMP, 0x80800000
	112 Not TEMP
	113 Move W8, TEMP
	114 Move X1, X0
	115 Move S3, W8
	116 Move X0, X22
	117 Move V0, V10
	118 Move V1, V9
	119 Move V2, V8
	120 Call LeanTween.pushNewTween, X0, X1, V0, X2
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move [X19+16], X0
	123 Move X9, -39972864
	124 Move W8, W21
	125 Add X9, X9, 930
	126 NotImplemented "Instruction ADR not yet implemented."
	127 Move W11, [X9]
	128 Add X10, X10, X11
	129 Move X20, X0
	130 CallNoReturn X10
	131 Move X8, 0xF6A000
	132 Move X8, [X8+1064]
	133 Move X0, [X8]
	134 Call 0x1C17F10
	135 Move X8, 0xF6A000
	136 Move X8, [X8+1344]
	137 Compare X20, 0
	138 JumpIfEqual {225}
	139 Move X0, [X20+88]
	140 Compare X0, 0
	141 JumpIfEqual {225}
	142 Move X20, [X20+232]
	143 Move X1, X31
	144 Call Transform.get_localPosition, X0
	145 Compare X20, 0
	146 JumpIfEqual {225}
	147 Move [X20+36], S0
	148 Move [X20+44], S1
	149 Move [X20+44], S2
	150 Move X8, 0xF6A000
	151 Move X8, [X8+1064]
	152 Move X20, [X19+16]
	153 Move X0, [X8]
	154 Call 0x1C17F10
	155 Move X8, 0xF6A000
	156 Move X8, [X8+1336]
	157 Move X8, 0xF6A000
	158 Move X8, [X8+1064]
	159 Move X0, [X8]
	160 Call 0x1C17F10
	161 Move X8, 0xF6A000
	162 Move X8, [X8+1376]
	163 Move X8, 0xF6A000
	164 Move X8, [X8+1064]
	165 Move X0, [X8]
	166 Call 0x1C17F10
	167 Move X8, 0xF6A000
	168 Move X8, [X8+1384]
	169 Move X8, 0xF6A000
	170 Move X8, [X8+1064]
	171 Move X0, [X8]
	172 Call 0x1C17F10
	173 Move X8, 0xF6A000
	174 Move X8, [X8+1392]
	175 Move X8, 0xF6A000
	176 Move X8, [X8+1064]
	177 Move X0, [X8]
	178 Call 0x1C17F10
	179 Move X8, 0xF6A000
	180 Move X8, [X8+1352]
	181 Move X8, 0xF6A000
	182 Move X8, [X8+1064]
	183 Move X0, [X8]
	184 Call 0x1C17F10
	185 Move X8, 0xF6A000
	186 Move X8, [X8+1360]
	187 Move X8, 0xF6A000
	188 Move X8, [X8+1064]
	189 Move X0, [X8]
	190 Call 0x1C17F10
	191 Move X8, 0xF6A000
	192 Move X8, [X8+1368]
	193 Move X8, 0xF6A000
	194 Move X8, [X8+1064]
	195 Move X0, [X8]
	196 Call 0x1C17F10
	197 Move X8, 0xF6A000
	198 Move X8, [X8+1400]
	199 Move X8, 0xF6A000
	200 Move X8, [X8+1064]
	201 Move X0, [X8]
	202 Call 0x1C17F10
	203 Move X8, 0xF6A000
	204 Move X8, [X8+1408]
	205 Move X2, [X8]
	206 Move X1, X19
	207 Move X3, X31
	208 Move X21, X0
	209 Call ActionMethodDelegate..ctor, X0, X1, X2
	210 Compare X20, 0
	211 JumpIfEqual {225}
	212 Move [X20+168], X21
	213 Move X0, [X19+16]
	214 Move X20, [X31+64]
	215 Move X19, [X31+72]
	216 Move X22, [X31+48]
	217 Move X21, [X31+56]
	218 Move X24, [X31+32]
	219 Move X23, [X31+40]
	220 Move X30, [X31+24]
	221 Move D9, [X31+8]
	222 Move D8, [X31+16]
	223 Move V10, [X31+80]
	224 Return X0
	225 Call 0x1C17F20

Method: System.Void addListener(System.Int32 eventId, System.Action`1<LTEvent> callback)

Disassembly:
	0x031B6554 LDP D15, D14, [X31 + 0x10]
	0x031B6558 FADD S2, S0, S1
	0x031B655C FADD V0.2S, V3.2S, V4.2S
	0x031B6560 MOV S1, V0.S[1]
	0x031B6564 MOV X1, X31
	0x031B6568 ADD X31, X31, 0x70
	0x031B656C B 0x3C3EC04
	0x031B6570 BL 0x1C16F20
	0x031B6574 SUB X31, X31, 0x70
	0x031B6578 STP D15, D14, [X31 + 0x10]
	0x031B657C STP D13, D12, [X31 + 0x20]
	0x031B6580 STP D11, D10, [X31 + 0x30]
	0x031B6584 STP D9, D8, [X31 + 0x40]
	0x031B6588 STP X30, X21, [X31 + 0x50]
	0x031B658C STP X20, X19, [X31 + 0x60]
	0x031B6590 MOV X19, X0
	0x031B6594 LDR X0, [X0 + 0x10]
	0x031B6598 CBZ X0, 0x31B6670
	0x031B659C LDR X21, [X0 + 0xE8]
	0x031B65A0 CBZ X21, 0x31B6670
	0x031B65A4 LDP S8, S9, [X21 + 0x24]
	0x031B65A8 LDR V10, [X21 + 0x2C]
	0x031B65AC MOV X1, X31
	0x031B65B0 BL 0x31BF678
	0x031B65B4 CBZ X0, 0x31B6670
	0x031B65B8 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1226000
	007 Move X22, 0xF40000
	008 Move W8, [X21+3784]
	009 Move X22, [X22+1448]
	010 Move X19, X1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF40000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3784], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call LeanTween.get_tweenEmpty
	027 Move W1, W20
	028 Move X2, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]

Method: System.Void addListener(UnityEngine.GameObject caller, System.Int32 eventId, System.Action`1<LTEvent> callback)

Disassembly:
	0x031B65BC BL 0x3C3F58C
	0x031B65C0 LDR X8, [X19 + 0x10]
	0x031B65C4 CBZ X8, 0x31B6670
	0x031B65C8 LDP S14, S15, [X19 + 0x18]
	0x031B65CC MOV X0, X31
	0x031B65D0 MOV V11.16B, V0.16B
	0x031B65D4 MOV V12.16B, V1.16B
	0x031B65D8 MOV V13.16B, V2.16B
	0x031B65DC ADD X20, X8, 0x60
	0x031B65E0 BL 0x3C3C714
	0x031B65E4 STR S0, [X31]
	0x031B65E8 MOV V0.16B, V8.16B
	0x031B65EC MOV V1.16B, V9.16B
	0x031B65F0 MOV V2.16B, V10.16B
	0x031B65F4 MOV V3.16B, V11.16B
	0x031B65F8 MOV V4.16B, V12.16B
	0x031B65FC MOV V5.16B, V13.16B
	0x031B6600 MOV X0, X20
	0x031B6604 MOV V6.16B, V14.16B
	0x031B6608 MOV V7.16B, V15.16B
	0x031B660C BL 0x31AA1B4
	0x031B6610 STP S0, S1, [X21 + 0x24]
	0x031B6614 STR S2, [X21 + 0x2C]
	0x031B6618 LDR X8, [X19 + 0x10]
	0x031B661C CBZ X8, 0x31B6670
	0x031B6620 LDR X9, [X8 + 0xE8]
	0x031B6624 CBZ X9, 0x31B6670
	0x031B6628 LDR X0, [X8 + 0x58]
	0x031B662C CBZ X0, 0x31B6670
	0x031B6630 LDR V0, [X9 + 0x2C]
	0x031B6634 LDR V1, [X8 + 0x74]
	0x031B6638 LDUR V3, [X9 + 0x24]
	0x031B663C LDUR V4, [X8 + 0x6C]
	0x031B6640 LDP X20, X19, [X31 + 0x60]
	0x031B6644 LDP X30, X21, [X31 + 0x50]
	0x031B6648 LDP D9, D8, [X31 + 0x40]
	0x031B664C LDP D11, D10, [X31 + 0x30]
	0x031B6650 LDP D13, D12, [X31 + 0x20]
	0x031B6654 LDP D15, D14, [X31 + 0x10]
	0x031B6658 FADD S2, S0, S1
	0x031B665C FADD V0.2S, V3.2S, V4.2S
	0x031B6660 MOV S1, V0.S[1]
	0x031B6664 MOV X1, X31
	0x031B6668 ADD X31, X31, 0x70
	0x031B666C B 0x3C3F62C
	0x031B6670 BL 0x1C16F20
	0x031B6674 STP D11, D10, [X31 - 0x40]!
	0x031B6678 STP D9, D8, [X31 + 0x10]
	0x031B667C STR X30, [X31 + 0x20]
	0x031B6680 STP X20, X19, [X31 + 0x30]
	0x031B6684 LDR X8, [X0 + 0x10]
	0x031B6688 CBZ X8, 0x31B6718
	0x031B668C LDR X19, [X8 + 0x58]
	0x031B6690 CBZ X19, 0x31B6718
	0x031B6694 MOV X20, X0
	0x031B6698 MOV X0, X19
	0x031B669C MOV X1, X31
	0x031B66A0 BL 0x3C3EB78
	0x031B66A4 LDR X0, [X20 + 0x10]
	0x031B66A8 CBZ X0, 0x31B6718
	0x031B66AC MOV X1, X31
	0x031B66B0 MOV V8.16B, V0.16B
	0x031B66B4 BL 0x31BF678
	0x031B66B8 CBZ X0, 0x31B6718
	0x031B66BC MOV X1, X31
	0x031B66C0 BL 0x3C3EB78
	0x031B66C4 LDR X8, [X20 + 0x10]
	0x031B66C8 CBZ X8, 0x31B6718
	0x031B66CC LDP S10, S11, [X20 + 0x18]
	0x031B66D0 MOV X0, X31
	0x031B66D4 MOV V9.16B, V0.16B
	0x031B66D8 ADD X20, X8, 0x60
	0x031B66DC BL 0x3C3C714
	0x031B66E0 MOV V4.16B, V0.16B
	0x031B66E4 MOV V0.16B, V8.16B
	0x031B66E8 MOV V1.16B, V9.16B
	0x031B66EC MOV X0, X20
	0x031B66F0 MOV V2.16B, V10.16B
	0x031B66F4 MOV V3.16B, V11.16B
	0x031B66F8 BL 0x31AA098
	0x031B66FC MOV X0, X19
	0x031B6700 LDP X20, X19, [X31 + 0x30]
	0x031B6704 LDR X30, [X31 + 0x20]
	0x031B6708 LDP D9, D8, [X31 + 0x10]
	0x031B670C MOV X1, X31
	0x031B6710 LDP D11, D10, [X31], #0x40
	0x031B6714 B 0x31BF4DC
	0x031B6718 BL 0x1C16F20
	0x031B671C STP D11, D10, [X31 - 0x40]!
	0x031B6720 STP D9, D8, [X31 + 0x10]
	0x031B6724 STR X30, [X31 + 0x20]
	0x031B6728 STP X20, X19, [X31 + 0x30]
	0x031B672C LDR X8, [X0 + 0x10]
	0x031B6730 CBZ X8, 0x31B67C0
	0x031B6734 LDR X19, [X8 + 0x58]
	0x031B6738 CBZ X19, 0x31B67C0
	0x031B673C MOV X20, X0
	0x031B6740 MOV X0, X19
	0x031B6744 MOV X1, X31
	0x031B6748 BL 0x3C3EB78
	0x031B674C LDR X0, [X20 + 0x10]
	0x031B6750 CBZ X0, 0x31B67C0
	0x031B6754 MOV X1, X31
	0x031B6758 MOV V8.16B, V1.16B
	0x031B675C BL 0x31BF678
	0x031B6760 CBZ X0, 0x31B67C0
	0x031B6764 MOV X1, X31
	0x031B6768 BL 0x3C3EB78
	0x031B676C LDR X8, [X20 + 0x10]
	0x031B6770 CBZ X8, 0x31B67C0
	0x031B6774 LDP S10, S11, [X20 + 0x18]
	0x031B6778 MOV X0, X31
	0x031B677C MOV V9.16B, V1.16B
	0x031B6780 ADD X20, X8, 0x64
	0x031B6784 BL 0x3C3C714
	0x031B6788 MOV V4.16B, V0.16B
	0x031B678C MOV V0.16B, V8.16B
	0x031B6790 MOV V1.16B, V9.16B
	0x031B6794 MOV X0, X20
	0x031B6798 MOV V2.16B, V10.16B
	0x031B679C MOV V3.16B, V11.16B
	0x031B67A0 BL 0x31AA098
	0x031B67A4 MOV X0, X19
	0x031B67A8 LDP X20, X19, [X31 + 0x30]
	0x031B67AC LDR X30, [X31 + 0x20]
	0x031B67B0 LDP D9, D8, [X31 + 0x10]
	0x031B67B4 MOV X1, X31
	0x031B67B8 LDP D11, D10, [X31], #0x40
	0x031B67BC B 0x31BF528
	0x031B67C0 BL 0x1C16F20
	0x031B67C4 STP D11, D10, [X31 - 0x40]!
	0x031B67C8 STP D9, D8, [X31 + 0x10]
	0x031B67CC STR X30, [X31 + 0x20]
	0x031B67D0 STP X20, X19, [X31 + 0x30]
	0x031B67D4 LDR X8, [X0 + 0x10]
	0x031B67D8 CBZ X8, 0x31B6868
	0x031B67DC LDR X19, [X8 + 0x58]
	0x031B67E0 CBZ X19, 0x31B6868
	0x031B67E4 MOV X20, X0
	0x031B67E8 MOV X0, X19
	0x031B67EC MOV X1, X31
	0x031B67F0 BL 0x3C3EB78
	0x031B67F4 LDR X0, [X20 + 0x10]
	0x031B67F8 CBZ X0, 0x31B6868
	0x031B67FC MOV X1, X31
	0x031B6800 MOV V8.16B, V2.16B
	0x031B6804 BL 0x31BF678
	0x031B6808 CBZ X0, 0x31B6868
	0x031B680C MOV X1, X31
	0x031B6810 BL 0x3C3EB78
	0x031B6814 LDR X8, [X20 + 0x10]
	0x031B6818 CBZ X8, 0x31B6868
	0x031B681C LDP S10, S11, [X20 + 0x18]
	0x031B6820 MOV X0, X31
	0x031B6824 MOV V9.16B, V2.16B
	0x031B6828 ADD X20, X8, 0x68
	0x031B682C BL 0x3C3C714
	0x031B6830 MOV V4.16B, V0.16B
	0x031B6834 MOV V0.16B, V8.16B
	0x031B6838 MOV V1.16B, V9.16B
	0x031B683C MOV X0, X20
	0x031B6840 MOV V2.16B, V10.16B
	0x031B6844 MOV V3.16B, V11.16B
	0x031B6848 BL 0x31AA098
	0x031B684C MOV X0, X19
	0x031B6850 LDP X20, X19, [X31 + 0x30]
	0x031B6854 LDR X30, [X31 + 0x20]
	0x031B6858 LDP D9, D8, [X31 + 0x10]
	0x031B685C MOV X1, X31
	0x031B6860 LDP D11, D10, [X31], #0x40
	0x031B6864 B 0x31BF574
	0x031B6868 BL 0x1C16F20
	0x031B686C STP D11, D10, [X31 - 0x40]!
	0x031B6870 STP D9, D8, [X31 + 0x10]
	0x031B6874 STR X30, [X31 + 0x20]
	0x031B6878 STP X20, X19, [X31 + 0x30]
	0x031B687C LDR X8, [X0 + 0x10]
	0x031B6880 CBZ X8, 0x31B6910
	0x031B6884 LDR X19, [X8 + 0x58]
	0x031B6888 CBZ X19, 0x31B6910
	0x031B688C MOV X20, X0
	0x031B6890 MOV X0, X19
	0x031B6894 MOV X1, X31
	0x031B6898 BL 0x3C3F58C
	0x031B689C LDR X0, [X20 + 0x10]
	0x031B68A0 CBZ X0, 0x31B6910
	0x031B68A4 MOV X1, X31
	0x031B68A8 MOV V8.16B, V0.16B
	0x031B68AC BL 0x31BF678
	0x031B68B0 CBZ X0, 0x31B6910
	0x031B68B4 MOV X1, X31
	0x031B68B8 BL 0x3C3F58C
	0x031B68BC LDR X8, [X20 + 0x10]
	0x031B68C0 CBZ X8, 0x31B6910
	0x031B68C4 LDP S10, S11, [X20 + 0x18]
	0x031B68C8 MOV X0, X31
	0x031B68CC MOV V9.16B, V0.16B
	0x031B68D0 ADD X20, X8, 0x60
	0x031B68D4 BL 0x3C3C714
	0x031B68D8 MOV V4.16B, V0.16B
	0x031B68DC MOV V0.16B, V8.16B
	0x031B68E0 MOV V1.16B, V9.16B
	0x031B68E4 MOV X0, X20
	0x031B68E8 MOV V2.16B, V10.16B
	0x031B68EC MOV V3.16B, V11.16B
	0x031B68F0 BL 0x31AA098
	0x031B68F4 MOV X0, X19
	0x031B68F8 LDP X20, X19, [X31 + 0x30]
	0x031B68FC LDR X30, [X31 + 0x20]
	0x031B6900 LDP D9, D8, [X31 + 0x10]
	0x031B6904 MOV X1, X31
	0x031B6908 LDP D11, D10, [X31], #0x40
	0x031B690C B 0x31BF3F8
	0x031B6910 BL 0x1C16F20
	0x031B6914 STP D11, D10, [X31 - 0x40]!
	0x031B6918 STP D9, D8, [X31 + 0x10]
	0x031B691C STR X30, [X31 + 0x20]
	0x031B6920 STP X20, X19, [X31 + 0x30]
	0x031B6924 LDR X8, [X0 + 0x10]
	0x031B6928 CBZ X8, 0x31B69B8
	0x031B692C LDR X19, [X8 + 0x58]
	0x031B6930 CBZ X19, 0x31B69B8
	0x031B6934 MOV X20, X0
	0x031B6938 MOV X0, X19
	0x031B693C MOV X1, X31
	0x031B6940 BL 0x3C3F58C
	0x031B6944 LDR X0, [X20 + 0x10]
	0x031B6948 CBZ X0, 0x31B69B8
	0x031B694C MOV X1, X31
	0x031B6950 MOV V8.16B, V1.16B
	0x031B6954 BL 0x31BF678
	0x031B6958 CBZ X0, 0x31B69B8
	0x031B695C MOV X1, X31
	0x031B6960 BL 0x3C3F58C
	0x031B6964 LDR X8, [X20 + 0x10]
	0x031B6968 CBZ X8, 0x31B69B8
	0x031B696C LDP S10, S11, [X20 + 0x18]
	0x031B6970 MOV X0, X31
	0x031B6974 MOV V9.16B, V1.16B
	0x031B6978 ADD X20, X8, 0x64
	0x031B697C BL 0x3C3C714
	0x031B6980 MOV V4.16B, V0.16B
	0x031B6984 MOV V0.16B, V8.16B
	0x031B6988 MOV V1.16B, V9.16B
	0x031B698C MOV X0, X20
	0x031B6990 MOV V2.16B, V10.16B
	0x031B6994 MOV V3.16B, V11.16B

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x1226000
	011 Move X23, 0xF40000
	012 Move W8, [X22+3785]
	013 Move X23, [X23+1448]
	014 Move X20, X2
	015 Move W21, W1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0xF6A000
	022 Move X0, [X0+1416]
	023 Call 0x1C17CF4
	024 Move X0, 0xF3E000
	025 Move X0, [X0+2600]
	026 Call 0x1C17CF4
	027 Move X0, 0xF40000
	028 Move X0, [X0+1968]
	029 Call 0x1C17CF4
	030 Move X0, 0xF40000
	031 Move X0, [X0+1448]
	032 Call 0x1C17CF4
	033 Move X0, 0xF3E000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move X0, 0xF6A000
	037 Move X0, [X0+1424]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X22+3785], W8
	041 Move X8, [X23]
	042 Move [X31+12], W31
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {49}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move X8, [X23]
	049 Move X9, [X8+184]
	050 Move X10, [X9+144]
	051 Compare X10, 0
	052 JumpIfNotEqual {81}
	053 Move W10, [X8+224]
	054 Compare W10, 0
	055 JumpIfNotEqual {60}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X8, [X23]
	059 Move X9, [X8+184]
	060 Move W10, [X9+164]
	061 Move W8, [X9+168]
	062 Move [X9+172], W8
	063 Move X9, 0xF6A000
	064 Move X9, [X9+1416]
	065 Multiply W1, W10, W8
	066 Move X0, [X9]
	067 Call 0x1C17D6C
	068 Move X8, [X23]
	069 Move X10, 0xF40000
	070 Move X8, [X8+184]
	071 Move [X8+144], X0
	072 Move W9, [X8+164]
	073 Move W8, [X8+168]
	074 Move X10, [X10+1968]
	075 Multiply W1, W8, W9
	076 Move X0, [X10]
	077 Call 0x1C17D6C
	078 Move X8, [X23]
	079 Move X9, [X8+184]
	080 Move [X9+152], X0
	081 Move W9, [X8+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {87}
	084 Move X0, X8
	085 Call 0x1C17DFC
	086 Move X8, [X23]
	087 Move X9, [X8+184]
	088 Move X24, 0xF3E000
	089 Move X24, [X24+1432]
	090 Move [X9+96], W31
	091 Move W10, [X8+224]
	092 Compare W10, 0
	093 JumpIfNotEqual {98}
	094 Move X0, X8
	095 Call 0x1C17DFC
	096 Move X8, [X23]
	097 Move W10, [X8+224]
	098 Move X9, [X8+184]
	099 Move W22, [X9+96]
	100 Move W25, [X9+172]
	101 Compare W10, 0
	102 JumpIfNotEqual {107}
	103 Move X0, X8
	104 Call 0x1C17DFC
	105 Move X8, [X23]
	106 Move X9, [X8+184]
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Move X8, [X9+152]
	109 Compare X8, 0
	110 JumpIfEqual {282}
	111 Move W10, [X9+172]
	112 Move W9, [X9+96]
	113 Move W11, [X8+24]
	114 NotImplemented "Instruction MADD not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, [X24]
	117 Move X26, W25
	118 Add X8, X8, X26
	119 Move X22, [X8+32]
	120 Move W9, [X0+224]
	121 Compare W9, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move X0, X22
	125 Move X1, X31
	126 Move X2, X31
	127 Call Object.op_Equality, X0, X1
	128 Move X8, [X23]
	129 Move TEMP, X0
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfEqual {208}
	133 Move W9, [X8+224]
	134 Compare W9, 0
	135 JumpIfNotEqual {139}
	136 Move X0, X8
	137 Call 0x1C17DFC
	138 Move X8, [X23]
	139 Move X9, [X8+184]
	140 Move X10, [X9+144]
	141 Compare X10, 0
	142 JumpIfEqual {282}
	143 Move W11, [X10+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Add X10, X10, X26
	146 Move X10, [X10+32]
	147 Compare X10, 0
	148 JumpIfEqual {208}
	149 Move W10, [X8+224]
	150 Compare W10, 0
	151 JumpIfNotEqual {156}
	152 Move X0, X8
	153 Call 0x1C17DFC
	154 Move X8, [X23]
	155 Move X9, [X8+184]
	156 Move X8, [X9+152]
	157 Compare X8, 0
	158 JumpIfEqual {282}
	159 Move W9, [X8+24]
	160 NotImplemented "Instruction CMP not yet implemented."
	161 Move X0, [X24]
	162 Add X8, X8, X26
	163 Move X22, [X8+32]
	164 Move W9, [X0+224]
	165 Compare W9, 0
	166 JumpIfNotEqual {168}
	167 Call 0x1C17DFC
	168 Move X0, X22
	169 Move X1, X19
	170 Move X2, X31
	171 Call Object.op_Equality, X0, X1
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {197}
	176 Move X0, [X23]
	177 Move W8, [X0+224]
	178 Compare W8, 0
	179 JumpIfNotEqual {182}
	180 Call 0x1C17DFC
	181 Move X0, [X23]
	182 Move X8, [X0+184]
	183 Move X8, [X8+144]
	184 Compare X8, 0
	185 JumpIfEqual {282}
	186 Move W9, [X8+24]
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Add X8, X8, X26
	189 Move X0, [X8+32]
	190 Move X1, X20
	191 Move X2, X31
	192 Call Object.Equals, X0, X1
	193 Move TEMP, X0
	194 And TEMP, TEMP, 1
	195 Compare TEMP, 1
	196 JumpIfEqual {272}
	197 Move X8, [X23]
	198 Move W9, [X8+224]
	199 Compare W9, 0
	200 JumpIfNotEqual {204}
	201 Move X0, X8
	202 Call 0x1C17DFC
	203 Move X8, [X23]
	204 Move X9, [X8+184]
	205 Move W10, [X9+96]
	206 Add W10, W10, 1
	207 Move [X9+96], W10
	208 Move W9, [X8+224]
	209 Compare W9, 0
	210 JumpIfNotEqual {214}
	211 Move X0, X8
	212 Call 0x1C17DFC
	213 Move X8, [X23]
	214 Move X8, [X8+184]
	215 Move X8, [X8+144]
	216 Compare X8, 0
	217 JumpIfEqual {282}
	218 Move W9, [X8+24]
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Add X8, X8, X26
	221 Move [X8+32], X20
	222 Move X8, [X23]
	223 Move X8, [X8+184]
	224 Move X8, [X8+152]
	225 Compare X8, 0
	226 JumpIfEqual {282}
	227 Move W9, [X8+24]
	228 NotImplemented "Instruction CMP not yet implemented."
	229 Add X8, X8, X26
	230 Move [X8+32], X19
	231 Move X0, [X23]
	232 Move X8, [X0+184]
	233 Move W9, [X8+96]
	234 Move W10, [X8+160]
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move W10, [X0+224]
	237 Compare W10, 0
	238 JumpIfNotEqual {243}
	239 Call 0x1C17DFC
	240 Move X8, [X23]
	241 Move X8, [X8+184]
	242 Move W9, [X8+96]
	243 Add W9, W9, 1
	244 Move [X8+160], W9
	245 Move W8, [X9+168]
	246 Add X0, X31, 12
	247 Move X1, X31
	248 Move W8, W8
	249 ShiftRight W8, 31
	250 And W8, W8, 0x3FFFFFFF
	251 Move [X31+12], W8
	252 Call Int32.ToString, X0
	253 Move X8, 0xF6A000
	254 Move X8, [X8+1424]
	255 Move X1, X0
	256 Move X2, X31
	257 Move X8, [X8]
	258 Move X0, X8
	259 Call String.Concat, X0, X1
	260 Move X8, 0xF3E000
	261 Move X8, [X8+2600]
	262 Move X19, X0
	263 Move X8, [X8]
	264 Move W9, [X8+224]
	265 Compare W9, 0
	266 JumpIfNotEqual {269}
	267 Move X0, X8
	268 Call 0x1C17DFC
	269 Move X0, X19
	270 Move X1, X31
	271 Call Debug.LogError, X0
	272 Move X20, [X31+64]
	273 Move X19, [X31+72]
	274 Move X22, [X31+48]
	275 Move X21, [X31+56]
	276 Move X24, [X31+32]
	277 Move X23, [X31+40]
	278 Move X26, [X31+16]
	279 Move X25, [X31+24]
	280 Move X30, [X31+80]
	281 Return 
	282 Call 0x1C17F20
	283 Call 0x1C17F28

Method: System.Boolean removeListener(System.Int32 eventId, System.Action`1<LTEvent> callback)

Disassembly:
	0x031B6998 BL 0x31AA098
	0x031B699C MOV X0, X19
	0x031B69A0 LDP X20, X19, [X31 + 0x30]
	0x031B69A4 LDR X30, [X31 + 0x20]
	0x031B69A8 LDP D9, D8, [X31 + 0x10]
	0x031B69AC MOV X1, X31
	0x031B69B0 LDP D11, D10, [X31], #0x40
	0x031B69B4 B 0x31BF444
	0x031B69B8 BL 0x1C16F20
	0x031B69BC STP D11, D10, [X31 - 0x40]!
	0x031B69C0 STP D9, D8, [X31 + 0x10]
	0x031B69C4 STR X30, [X31 + 0x20]
	0x031B69C8 STP X20, X19, [X31 + 0x30]
	0x031B69CC LDR X8, [X0 + 0x10]
	0x031B69D0 CBZ X8, 0x31B6A60
	0x031B69D4 LDR X19, [X8 + 0x58]
	0x031B69D8 CBZ X19, 0x31B6A60
	0x031B69DC MOV X20, X0
	0x031B69E0 MOV X0, X19
	0x031B69E4 MOV X1, X31
	0x031B69E8 BL 0x3C3F58C
	0x031B69EC LDR X0, [X20 + 0x10]
	0x031B69F0 CBZ X0, 0x31B6A60
	0x031B69F4 MOV X1, X31
	0x031B69F8 MOV V8.16B, V2.16B
	0x031B69FC BL 0x31BF678

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1226000
	007 Move X22, 0xF40000
	008 Move W8, [X21+3786]
	009 Move X22, [X22+1448]
	010 Move X19, X1
	011 Move W20, W0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF40000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3786], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Call LeanTween.get_tweenEmpty
	027 Move W1, W20
	028 Move X2, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]

Method: System.Boolean removeListener(System.Int32 eventId)

Disassembly:
	0x031B6BFC MOV V2.16B, V12.16B
	0x031B6C00 MOV V3.16B, V13.16B
	0x031B6C04 MOV V4.16B, V14.16B
	0x031B6C08 MOV V5.16B, V15.16B
	0x031B6C0C MOV X0, X20
	0x031B6C10 STR S9, [X31 + 0x8]
	0x031B6C14 STR S8, [X31]
	0x031B6C18 BL 0x31AA260
	0x031B6C1C LDR X8, [X19 + 0x10]
	0x031B6C20 CBZ X8, 0x31B6C90
	0x031B6C24 LDR X0, [X8 + 0x58]
	0x031B6C28 CBZ X0, 0x31B6C90
	0x031B6C2C ADRP X8, 0xF69000
	0x031B6C30 LDR X8, [X8 + 0x5A0]
	0x031B6C34 MOV V8.16B, V0.16B
	0x031B6C38 MOV V9.16B, V1.16B
	0x031B6C3C MOV V10.16B, V2.16B
	0x031B6C40 LDR X1, [X8]
	0x031B6C44 MOV V11.16B, V3.16B
	0x031B6C48 BL 0x21A3894
	0x031B6C4C CBZ X0, 0x31B6C90
	0x031B6C50 MOV X1, X31
	0x031B6C54 BL 0x3C1341C
	0x031B6C58 CBZ X0, 0x31B6C90
	0x031B6C5C MOV V0.16B, V8.16B
	0x031B6C60 MOV V1.16B, V9.16B
	0x031B6C64 MOV V2.16B, V10.16B
	0x031B6C68 MOV V3.16B, V11.16B
	0x031B6C6C LDP X20, X19, [X31 + 0x70]
	0x031B6C70 LDR X30, [X31 + 0x60]
	0x031B6C74 LDP D9, D8, [X31 + 0x50]
	0x031B6C78 LDP D11, D10, [X31 + 0x40]
	0x031B6C7C LDP D13, D12, [X31 + 0x30]
	0x031B6C80 LDP D15, D14, [X31 + 0x20]
	0x031B6C84 MOV X1, X31
	0x031B6C88 ADD X31, X31, 0x80
	0x031B6C8C B 0x3C148B4
	0x031B6C90 BL 0x1C16F20
	0x031B6C94 SUB X31, X31, 0x80
	0x031B6C98 STP D15, D14, [X31 + 0x20]
	0x031B6C9C STP D13, D12, [X31 + 0x30]
	0x031B6CA0 STP D11, D10, [X31 + 0x40]
	0x031B6CA4 STP D9, D8, [X31 + 0x50]
	0x031B6CA8 STP X30, X21, [X31 + 0x60]
	0x031B6CAC STP X20, X19, [X31 + 0x70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1226000
	006 Move X20, 0xF40000
	007 Move W8, [X21+3787]
	008 Move X20, [X20+1448]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF40000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3787], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X10, [X8+144]
	027 Compare X10, 0
	028 JumpIfEqual {52}
	029 Move W9, [X8+172]
	030 Move W8, [X8+96]
	031 Move W11, [X10+24]
	032 NotImplemented "Instruction MADD not yet implemented."
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X9, W8
	035 Add X10, X10, X9
	036 Move [X10+32], X31
	037 Move X10, [X20]
	038 Move X10, [X10+184]
	039 Move X10, [X10+152]
	040 Compare X10, 0
	041 JumpIfEqual {52}
	042 Move W11, [X10+24]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Add X8, X10, X9
	047 Move W0, 1
	048 Move [X8+32], X31
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return X0
	052 Call 0x1C17F20
	053 Call 0x1C17F28

Method: System.Boolean removeListener(UnityEngine.GameObject caller, System.Int32 eventId, System.Action`1<LTEvent> callback)

Disassembly:
	0x031B6A00 CBZ X0, 0x31B6A60
	0x031B6A04 MOV X1, X31
	0x031B6A08 BL 0x3C3F58C
	0x031B6A0C LDR X8, [X20 + 0x10]
	0x031B6A10 CBZ X8, 0x31B6A60
	0x031B6A14 LDP S10, S11, [X20 + 0x18]
	0x031B6A18 MOV X0, X31
	0x031B6A1C MOV V9.16B, V2.16B
	0x031B6A20 ADD X20, X8, 0x68
	0x031B6A24 BL 0x3C3C714
	0x031B6A28 MOV V4.16B, V0.16B
	0x031B6A2C MOV V0.16B, V8.16B
	0x031B6A30 MOV V1.16B, V9.16B
	0x031B6A34 MOV X0, X20
	0x031B6A38 MOV V2.16B, V10.16B
	0x031B6A3C MOV V3.16B, V11.16B
	0x031B6A40 BL 0x31AA098
	0x031B6A44 MOV X0, X19
	0x031B6A48 LDP X20, X19, [X31 + 0x30]
	0x031B6A4C LDR X30, [X31 + 0x20]
	0x031B6A50 LDP D9, D8, [X31 + 0x10]
	0x031B6A54 MOV X1, X31
	0x031B6A58 LDP D11, D10, [X31], #0x40
	0x031B6A5C B 0x31BF490
	0x031B6A60 BL 0x1C16F20
	0x031B6A64 SUB X31, X31, 0x70
	0x031B6A68 STP D15, D14, [X31 + 0x10]
	0x031B6A6C STP D13, D12, [X31 + 0x20]
	0x031B6A70 STP D11, D10, [X31 + 0x30]
	0x031B6A74 STP D9, D8, [X31 + 0x40]
	0x031B6A78 STR X30, [X31 + 0x50]
	0x031B6A7C STP X20, X19, [X31 + 0x60]
	0x031B6A80 LDR X8, [X0 + 0x10]
	0x031B6A84 CBZ X8, 0x31B6B40
	0x031B6A88 LDR X19, [X8 + 0x58]
	0x031B6A8C CBZ X19, 0x31B6B40
	0x031B6A90 MOV X20, X0
	0x031B6A94 MOV X0, X19
	0x031B6A98 MOV X1, X31
	0x031B6A9C BL 0x3C3FBAC
	0x031B6AA0 LDR X0, [X20 + 0x10]
	0x031B6AA4 CBZ X0, 0x31B6B40
	0x031B6AA8 MOV X1, X31
	0x031B6AAC MOV V8.16B, V0.16B
	0x031B6AB0 MOV V9.16B, V1.16B
	0x031B6AB4 MOV V10.16B, V2.16B
	0x031B6AB8 BL 0x31BF678
	0x031B6ABC CBZ X0, 0x31B6B40
	0x031B6AC0 MOV X1, X31
	0x031B6AC4 BL 0x3C3FBAC
	0x031B6AC8 LDR X8, [X20 + 0x10]
	0x031B6ACC CBZ X8, 0x31B6B40
	0x031B6AD0 LDP S14, S15, [X20 + 0x18]
	0x031B6AD4 MOV X0, X31
	0x031B6AD8 MOV V11.16B, V0.16B
	0x031B6ADC MOV V12.16B, V1.16B
	0x031B6AE0 MOV V13.16B, V2.16B
	0x031B6AE4 ADD X20, X8, 0x60
	0x031B6AE8 BL 0x3C3C714
	0x031B6AEC STR S0, [X31]
	0x031B6AF0 MOV V0.16B, V8.16B
	0x031B6AF4 MOV V1.16B, V9.16B
	0x031B6AF8 MOV V2.16B, V10.16B
	0x031B6AFC MOV V3.16B, V11.16B
	0x031B6B00 MOV V4.16B, V12.16B
	0x031B6B04 MOV V5.16B, V13.16B
	0x031B6B08 MOV X0, X20
	0x031B6B0C MOV V6.16B, V14.16B
	0x031B6B10 MOV V7.16B, V15.16B
	0x031B6B14 BL 0x31AA1B4
	0x031B6B18 MOV X0, X19
	0x031B6B1C LDP X20, X19, [X31 + 0x60]
	0x031B6B20 LDR X30, [X31 + 0x50]
	0x031B6B24 LDP D9, D8, [X31 + 0x40]
	0x031B6B28 LDP D11, D10, [X31 + 0x30]
	0x031B6B2C LDP D13, D12, [X31 + 0x20]
	0x031B6B30 LDP D15, D14, [X31 + 0x10]
	0x031B6B34 MOV X1, X31
	0x031B6B38 ADD X31, X31, 0x70
	0x031B6B3C B 0x3C3FC4C
	0x031B6B40 BL 0x1C16F20
	0x031B6B44 SUB X31, X31, 0x80
	0x031B6B48 STP D15, D14, [X31 + 0x20]
	0x031B6B4C STP D13, D12, [X31 + 0x30]
	0x031B6B50 STP D11, D10, [X31 + 0x40]
	0x031B6B54 STP D9, D8, [X31 + 0x50]
	0x031B6B58 STR X30, [X31 + 0x60]
	0x031B6B5C STP X20, X19, [X31 + 0x70]
	0x031B6B60 ADRP X20, 0x1225000
	0x031B6B64 LDRB W8, [X20 + 0xED0]
	0x031B6B68 MOV X19, X0
	0x031B6B6C TBNZ X8, 0x0, 0x31B6B84
	0x031B6B70 ADRP X0, 0xF69000
	0x031B6B74 LDR X0, [X0 + 0x5A0]
	0x031B6B78 BL 0x1C16CF4
	0x031B6B7C MOVZ W8, 0x1
	0x031B6B80 STRB W8, [X20 + 0xED0]
	0x031B6B84 LDR X8, [X19 + 0x10]
	0x031B6B88 CBZ X8, 0x31B6C90
	0x031B6B8C LDR X0, [X8 + 0x58]
	0x031B6B90 MOV X1, X31
	0x031B6B94 BL 0x31BF5C0
	0x031B6B98 LDR X0, [X19 + 0x10]
	0x031B6B9C CBZ X0, 0x31B6C90
	0x031B6BA0 MOV X1, X31
	0x031B6BA4 MOV V10.16B, V0.16B
	0x031B6BA8 MOV V11.16B, V1.16B
	0x031B6BAC MOV V12.16B, V2.16B
	0x031B6BB0 MOV V13.16B, V3.16B
	0x031B6BB4 BL 0x31BF678
	0x031B6BB8 MOV X1, X31
	0x031B6BBC BL 0x31BF5C0
	0x031B6BC0 LDR X8, [X19 + 0x10]
	0x031B6BC4 CBZ X8, 0x31B6C90
	0x031B6BC8 LDR X8, [X8 + 0xE8]
	0x031B6BCC STP S3, S2, [X31 + 0x68]
	0x031B6BD0 CBZ X8, 0x31B6C90
	0x031B6BD4 LDP S8, S9, [X19 + 0x18]
	0x031B6BD8 MOV X0, X31
	0x031B6BDC MOV V15.16B, V1.16B
	0x031B6BE0 MOV V14.16B, V0.16B
	0x031B6BE4 ADD X20, X8, 0x64
	0x031B6BE8 BL 0x3C3C714
	0x031B6BEC LDP S7, S6, [X31 + 0x68]
	0x031B6BF0 STR S0, [X31 + 0x10]
	0x031B6BF4 MOV V0.16B, V10.16B
	0x031B6BF8 MOV V1.16B, V11.16B

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x1226000
	013 Move X23, 0xF40000
	014 Move W8, [X22+3788]
	015 Move X23, [X23+1448]
	016 Move X19, X2
	017 Move W20, W1
	018 Move X21, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {31}
	023 Move X0, 0xF40000
	024 Move X0, [X0+1448]
	025 Call 0x1C17CF4
	026 Move X0, 0xF3E000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3788], W8
	031 Move X0, [X23]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X23]
	037 Move X8, [X0+184]
	038 Move X26, 0xF3E000
	039 Move X26, [X26+1432]
	040 Move [X8+96], W31
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {46}
	044 Call 0x1C17DFC
	045 Move X0, [X23]
	046 Move X8, [X0+184]
	047 Move W24, [X8+96]
	048 Move W25, [X8+160]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move W9, [X0+224]
	051 Compare W9, 0
	052 JumpIfEqual {54}
	053 Move W9, W24
	054 Call 0x1C17DFC
	055 Move X8, [X23]
	056 Move X8, [X8+184]
	057 Move W9, [X8+96]
	058 Move X10, [X8+152]
	059 Compare X10, 0
	060 JumpIfEqual {149}
	061 Move W8, [X8+172]
	062 Move W11, [X10+24]
	063 NotImplemented "Instruction MADD not yet implemented."
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X0, [X26]
	066 Move X28, W27
	067 Add X8, X10, X28
	068 Move X22, [X8+32]
	069 Move W9, [X0+224]
	070 Compare W9, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X22
	074 Move X1, X21
	075 Move X2, X31
	076 Call Object.op_Equality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {102}
	081 Move X0, [X23]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {87}
	085 Call 0x1C17DFC
	086 Move X0, [X23]
	087 Move X8, [X0+184]
	088 Move X8, [X8+144]
	089 Compare X8, 0
	090 JumpIfEqual {149}
	091 Move W9, [X8+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Add X8, X8, X28
	094 Move X0, [X8+32]
	095 Move X1, X19
	096 Move X2, X31
	097 Call Object.Equals, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfEqual {112}
	102 Move X0, [X23]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {108}
	106 Call 0x1C17DFC
	107 Move X0, [X23]
	108 Move X8, [X0+184]
	109 Move W9, [X8+96]
	110 Add W9, W9, 1
	111 Move [X8+96], W9
	112 Move X0, [X23]
	113 Move W8, [X0+224]
	114 Compare W8, 0
	115 JumpIfNotEqual {118}
	116 Call 0x1C17DFC
	117 Move X0, [X23]
	118 Move X8, [X0+184]
	119 Move X8, [X8+144]
	120 Compare X8, 0
	121 JumpIfEqual {149}
	122 Move W9, [X8+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Add X8, X8, X28
	125 Move [X8+32], X31
	126 Move X8, [X23]
	127 Move X8, [X8+184]
	128 Move X8, [X8+152]
	129 Compare X8, 0
	130 JumpIfEqual {149}
	131 Move W9, [X8+24]
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Add X8, X8, X28
	134 Move [X8+32], X31
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X20, [X31+80]
	137 Move X19, [X31+88]
	138 Move X22, [X31+64]
	139 Move X21, [X31+72]
	140 Move X24, [X31+48]
	141 Move X23, [X31+56]
	142 Move X26, [X31+32]
	143 Move X25, [X31+40]
	144 Move X28, [X31+16]
	145 Move X27, [X31+24]
	146 NotImplemented "Instruction CSET not yet implemented."
	147 Move X30, [X31+96]
	148 Return X0
	149 Call 0x1C17F20
	150 Call 0x1C17F28

Method: System.Void dispatchEvent(System.Int32 eventId)

Disassembly:
	0x031B6CB0 MOV X19, X0
	0x031B6CB4 LDR X0, [X0 + 0x10]
	0x031B6CB8 CBZ X0, 0x31B6D9C
	0x031B6CBC LDR X21, [X0 + 0xE8]
	0x031B6CC0 CBZ X21, 0x31B6D9C
	0x031B6CC4 LDP S8, S9, [X21 + 0x24]
	0x031B6CC8 LDR V10, [X21 + 0x2C]
	0x031B6CCC MOV X1, X31
	0x031B6CD0 BL 0x31BF678
	0x031B6CD4 CBZ X0, 0x31B6D9C
	0x031B6CD8 MOV X1, X31
	0x031B6CDC BL 0x3C3EB78
	0x031B6CE0 LDR X8, [X19 + 0x10]
	0x031B6CE4 CBZ X8, 0x31B6D9C
	0x031B6CE8 LDP S14, S15, [X19 + 0x18]
	0x031B6CEC MOV X0, X31
	0x031B6CF0 MOV V11.16B, V0.16B
	0x031B6CF4 MOV V12.16B, V1.16B
	0x031B6CF8 MOV V13.16B, V2.16B
	0x031B6CFC ADD X20, X8, 0x60
	0x031B6D00 BL 0x3C3C714
	0x031B6D04 LDP S1, S2, [X19 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1226000
	006 Move X21, 0xF40000
	007 Move W8, [X20+3789]
	008 Move X21, [X21+1448]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF40000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3789], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]

Method: System.Void dispatchEvent(System.Int32 eventId, System.Object data)

Disassembly:
	0x031B6D08 STR S0, [X31]
	0x031B6D0C MOV V0.16B, V8.16B
	0x031B6D10 MOV V3.16B, V11.16B
	0x031B6D14 STR S2, [X31 + 0x10]
	0x031B6D18 STR S1, [X31 + 0x8]
	0x031B6D1C MOV V1.16B, V9.16B
	0x031B6D20 MOV V2.16B, V10.16B
	0x031B6D24 MOV V4.16B, V12.16B
	0x031B6D28 MOV V5.16B, V13.16B
	0x031B6D2C MOV X0, X20
	0x031B6D30 MOV V6.16B, V14.16B
	0x031B6D34 MOV V7.16B, V15.16B
	0x031B6D38 BL 0x31AA3DC
	0x031B6D3C STP S0, S1, [X21 + 0x24]
	0x031B6D40 STR S2, [X21 + 0x2C]
	0x031B6D44 LDR X8, [X19 + 0x10]
	0x031B6D48 CBZ X8, 0x31B6D9C
	0x031B6D4C LDR X9, [X8 + 0xE8]
	0x031B6D50 CBZ X9, 0x31B6D9C
	0x031B6D54 LDR X0, [X8 + 0x58]
	0x031B6D58 CBZ X0, 0x31B6D9C
	0x031B6D5C LDR V0, [X9 + 0x2C]
	0x031B6D60 LDR V1, [X8 + 0x74]
	0x031B6D64 LDUR V3, [X9 + 0x24]
	0x031B6D68 LDUR V4, [X8 + 0x6C]
	0x031B6D6C LDP X20, X19, [X31 + 0x70]
	0x031B6D70 LDP X30, X21, [X31 + 0x60]
	0x031B6D74 LDP D9, D8, [X31 + 0x50]
	0x031B6D78 LDP D11, D10, [X31 + 0x40]
	0x031B6D7C LDP D13, D12, [X31 + 0x30]
	0x031B6D80 LDP D15, D14, [X31 + 0x20]
	0x031B6D84 FADD S2, S0, S1
	0x031B6D88 FADD V0.2S, V3.2S, V4.2S
	0x031B6D8C MOV S1, V0.S[1]
	0x031B6D90 MOV X1, X31
	0x031B6D94 ADD X31, X31, 0x80
	0x031B6D98 B 0x3C3EC04
	0x031B6D9C BL 0x1C16F20
	0x031B6DA0 SUB X31, X31, 0x80
	0x031B6DA4 STP D15, D14, [X31 + 0x20]
	0x031B6DA8 STP D13, D12, [X31 + 0x30]
	0x031B6DAC STP D11, D10, [X31 + 0x40]
	0x031B6DB0 STP D9, D8, [X31 + 0x50]
	0x031B6DB4 STP X30, X21, [X31 + 0x60]
	0x031B6DB8 STP X20, X19, [X31 + 0x70]
	0x031B6DBC LDR X20, [X0 + 0x10]
	0x031B6DC0 CBZ X20, 0x31B6E88
	0x031B6DC4 LDP S8, S9, [X20 + 0x78]
	0x031B6DC8 LDR V10, [X20 + 0x80]
	0x031B6DCC MOV X19, X0
	0x031B6DD0 MOV X0, X20
	0x031B6DD4 MOV X1, X31
	0x031B6DD8 BL 0x31BF678
	0x031B6DDC CBZ X0, 0x31B6E88
	0x031B6DE0 MOV X1, X31
	0x031B6DE4 BL 0x3C3F58C
	0x031B6DE8 LDR X8, [X19 + 0x10]
	0x031B6DEC CBZ X8, 0x31B6E88
	0x031B6DF0 LDP S14, S15, [X19 + 0x18]
	0x031B6DF4 MOV X0, X31
	0x031B6DF8 MOV V11.16B, V0.16B
	0x031B6DFC MOV V12.16B, V1.16B
	0x031B6E00 MOV V13.16B, V2.16B
	0x031B6E04 ADD X21, X8, 0x60
	0x031B6E08 BL 0x3C3C714
	0x031B6E0C LDP S1, S2, [X19 + 0x20]
	0x031B6E10 STR S0, [X31]
	0x031B6E14 MOV V0.16B, V8.16B
	0x031B6E18 MOV V3.16B, V11.16B
	0x031B6E1C STR S2, [X31 + 0x10]
	0x031B6E20 STR S1, [X31 + 0x8]
	0x031B6E24 MOV V1.16B, V9.16B
	0x031B6E28 MOV V2.16B, V10.16B
	0x031B6E2C MOV V4.16B, V12.16B
	0x031B6E30 MOV V5.16B, V13.16B
	0x031B6E34 MOV X0, X21
	0x031B6E38 MOV V6.16B, V14.16B
	0x031B6E3C MOV V7.16B, V15.16B
	0x031B6E40 BL 0x31AA3DC
	0x031B6E44 STP S0, S1, [X20 + 0x78]
	0x031B6E48 STR S2, [X20 + 0x80]
	0x031B6E4C LDR X8, [X19 + 0x10]
	0x031B6E50 CBZ X8, 0x31B6E88
	0x031B6E54 LDR X0, [X8 + 0x58]
	0x031B6E58 CBZ X0, 0x31B6E88
	0x031B6E5C LDP S1, S2, [X8 + 0x7C]
	0x031B6E60 LDR V0, [X8 + 0x78]
	0x031B6E64 LDP X20, X19, [X31 + 0x70]
	0x031B6E68 LDP X30, X21, [X31 + 0x60]
	0x031B6E6C LDP D9, D8, [X31 + 0x50]
	0x031B6E70 LDP D11, D10, [X31 + 0x40]
	0x031B6E74 LDP D13, D12, [X31 + 0x30]
	0x031B6E78 LDP D15, D14, [X31 + 0x20]
	0x031B6E7C MOV X1, X31
	0x031B6E80 ADD X31, X31, 0x80
	0x031B6E84 B 0x3C3F62C
	0x031B6E88 BL 0x1C16F20
	0x031B6E8C STP D11, D10, [X31 - 0x40]!
	0x031B6E90 STP D9, D8, [X31 + 0x10]
	0x031B6E94 STP X30, X21, [X31 + 0x20]
	0x031B6E98 STP X20, X19, [X31 + 0x30]
	0x031B6E9C LDR X8, [X0 + 0x10]
	0x031B6EA0 CBZ X8, 0x31B6F34
	0x031B6EA4 LDR X19, [X8 + 0x58]
	0x031B6EA8 CBZ X19, 0x31B6F34
	0x031B6EAC MOV X20, X0
	0x031B6EB0 MOV X0, X19
	0x031B6EB4 MOV X1, X31
	0x031B6EB8 BL 0x3C3EB78
	0x031B6EBC LDR X0, [X20 + 0x10]
	0x031B6EC0 CBZ X0, 0x31B6F34
	0x031B6EC4 MOV X1, X31
	0x031B6EC8 MOV V8.16B, V0.16B
	0x031B6ECC BL 0x31BF678
	0x031B6ED0 CBZ X0, 0x31B6F34

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x1226000
	012 Move W8, [X21+3790]
	013 Move X19, X1
	014 Move W20, W0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0xF6A000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0xF40000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move X0, 0xF3E000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+3790], W8
	030 Move X23, 0xF40000
	031 Move X24, 0xF3E000
	032 Move X25, 0xF6A000
	033 Move X23, [X23+1448]
	034 Move X24, [X24+1432]
	035 Move X25, [X25+1432]
	036 Move W22, W31
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X23]
	043 Move X8, [X0+184]
	044 Move W9, [X8+160]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W9, [X0+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {52}
	049 Call 0x1C17DFC
	050 Move X0, [X23]
	051 Move X8, [X0+184]
	052 Move X9, [X8+144]
	053 Compare X9, 0
	054 JumpIfEqual {133}
	055 Move W10, [X8+172]
	056 Move W11, [X9+24]
	057 NotImplemented "Instruction MADD not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X26, W27
	060 Add X9, X9, X26
	061 Move X9, [X9+32]
	062 Compare X9, 0
	063 JumpIfEqual {121}
	064 Move W9, [X0+224]
	065 Compare W9, 0
	066 JumpIfNotEqual {70}
	067 Call 0x1C17DFC
	068 Move X8, [X23]
	069 Move X8, [X8+184]
	070 Move X8, [X8+152]
	071 Compare X8, 0
	072 JumpIfEqual {133}
	073 Move W9, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X0, [X24]
	076 Add X8, X8, X26
	077 Move X21, [X8+32]
	078 Move W9, [X0+224]
	079 Compare W9, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move X0, X21
	083 Move X1, X31
	084 Call Object.op_Implicit, X0
	085 Move X8, [X23]
	086 Move W21, W0
	087 Move W9, [X8+224]
	088 Compare W9, 0
	089 JumpIfNotEqual {93}
	090 Move X0, X8
	091 Call 0x1C17DFC
	092 Move X8, [X23]
	093 Move X8, [X8+184]
	094 Move X8, [X8+144]
	095 Compare X8, 0
	096 JumpIfEqual {133}
	097 Move W9, [X8+24]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move TEMP, X21
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 Invalid "Jump target not found in method."
	103 Add X8, X8, X26
	104 Move X0, [X25]
	105 Move X26, [X8+32]
	106 Call 0x1C17F10
	107 Move X1, X31
	108 Move X21, X0
	109 Call Object..ctor, X0
	110 Move [X21+16], W20
	111 Move [X21+24], X19
	112 Compare X26, 0
	113 JumpIfEqual {133}
	114 Move X8, [X26+24]
	115 Move X0, [X26+64]
	116 Move X2, [X26+40]
	117 Move X1, X21
	118 NotImplemented "Instruction BLR not yet implemented."
	119 Add X8, X8, X26
	120 Move [X8+32], X31
	121 Add W22, W22, 1
	122 Move X20, [X31+64]
	123 Move X19, [X31+72]
	124 Move X22, [X31+48]
	125 Move X21, [X31+56]
	126 Move X24, [X31+32]
	127 Move X23, [X31+40]
	128 Move X26, [X31+16]
	129 Move X25, [X31+24]
	130 Move X30, [X31+80]
	131 Move X27, [X31+88]
	132 Return 
	133 Call 0x1C17F20
	134 Call 0x1C17F28

Method: System.Void .ctor()

Disassembly:
	0x031B6F04 MOV V1.16B, V9.16B
	0x031B6F08 MOV X0, X21

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

Method: System.Void .cctor()

Disassembly:
	0x031B6F0C MOV V2.16B, V10.16B
	0x031B6F10 MOV V3.16B, V11.16B
	0x031B6F14 BL 0x31AA338
	0x031B6F18 MOV X0, X19
	0x031B6F1C LDP X20, X19, [X31 + 0x30]
	0x031B6F20 LDP X30, X21, [X31 + 0x20]
	0x031B6F24 LDP D9, D8, [X31 + 0x10]
	0x031B6F28 MOV X1, X31
	0x031B6F2C LDP D11, D10, [X31], #0x40
	0x031B6F30 B 0x31BF4DC
	0x031B6F34 BL 0x1C16F20
	0x031B6F38 STP D11, D10, [X31 - 0x40]!
	0x031B6F3C STP D9, D8, [X31 + 0x10]
	0x031B6F40 STP X30, X21, [X31 + 0x20]
	0x031B6F44 STP X20, X19, [X31 + 0x30]
	0x031B6F48 LDR X8, [X0 + 0x10]
	0x031B6F4C CBZ X8, 0x31B6FE0
	0x031B6F50 LDR X19, [X8 + 0x58]
	0x031B6F54 CBZ X19, 0x31B6FE0
	0x031B6F58 MOV X20, X0
	0x031B6F5C MOV X0, X19
	0x031B6F60 MOV X1, X31
	0x031B6F64 BL 0x3C3EB78
	0x031B6F68 LDR X0, [X20 + 0x10]
	0x031B6F6C CBZ X0, 0x31B6FE0
	0x031B6F70 MOV X1, X31
	0x031B6F74 MOV V8.16B, V1.16B
	0x031B6F78 BL 0x31BF678
	0x031B6F7C CBZ X0, 0x31B6FE0
	0x031B6F80 MOV X1, X31
	0x031B6F84 BL 0x3C3EB78
	0x031B6F88 LDR X8, [X20 + 0x10]
	0x031B6F8C CBZ X8, 0x31B6FE0
	0x031B6F90 LDP S10, S11, [X20 + 0x18]
	0x031B6F94 MOV X0, X31
	0x031B6F98 MOV V9.16B, V1.16B
	0x031B6F9C ADD X21, X8, 0x64
	0x031B6FA0 BL 0x3C3C714
	0x031B6FA4 LDP S5, S6, [X20 + 0x20]
	0x031B6FA8 MOV V4.16B, V0.16B
	0x031B6FAC MOV V0.16B, V8.16B
	0x031B6FB0 MOV V1.16B, V9.16B
	0x031B6FB4 MOV X0, X21
	0x031B6FB8 MOV V2.16B, V10.16B
	0x031B6FBC MOV V3.16B, V11.16B
	0x031B6FC0 BL 0x31AA338
	0x031B6FC4 MOV X0, X19
	0x031B6FC8 LDP X20, X19, [X31 + 0x30]
	0x031B6FCC LDP X30, X21, [X31 + 0x20]
	0x031B6FD0 LDP D9, D8, [X31 + 0x10]
	0x031B6FD4 MOV X1, X31
	0x031B6FD8 LDP D11, D10, [X31], #0x40
	0x031B6FDC B 0x31BF528
	0x031B6FE0 BL 0x1C16F20
	0x031B6FE4 STP D11, D10, [X31 - 0x40]!
	0x031B6FE8 STP D9, D8, [X31 + 0x10]
	0x031B6FEC STP X30, X21, [X31 + 0x20]
	0x031B6FF0 STP X20, X19, [X31 + 0x30]
	0x031B6FF4 LDR X8, [X0 + 0x10]
	0x031B6FF8 CBZ X8, 0x31B708C
	0x031B6FFC LDR X19, [X8 + 0x58]
	0x031B7000 CBZ X19, 0x31B708C
	0x031B7004 MOV X20, X0
	0x031B7008 MOV X0, X19
	0x031B700C MOV X1, X31
	0x031B7010 BL 0x3C3EB78
	0x031B7014 LDR X0, [X20 + 0x10]
	0x031B7018 CBZ X0, 0x31B708C
	0x031B701C MOV X1, X31
	0x031B7020 MOV V8.16B, V2.16B
	0x031B7024 BL 0x31BF678
	0x031B7028 CBZ X0, 0x31B708C
	0x031B702C MOV X1, X31
	0x031B7030 BL 0x3C3EB78
	0x031B7034 LDR X8, [X20 + 0x10]
	0x031B7038 CBZ X8, 0x31B708C
	0x031B703C LDP S10, S11, [X20 + 0x18]
	0x031B7040 MOV X0, X31
	0x031B7044 MOV V9.16B, V2.16B
	0x031B7048 ADD X21, X8, 0x68
	0x031B704C BL 0x3C3C714
	0x031B7050 LDP S5, S6, [X20 + 0x20]
	0x031B7054 MOV V4.16B, V0.16B
	0x031B7058 MOV V0.16B, V8.16B
	0x031B705C MOV V1.16B, V9.16B
	0x031B7060 MOV X0, X21
	0x031B7064 MOV V2.16B, V10.16B
	0x031B7068 MOV V3.16B, V11.16B
	0x031B706C BL 0x31AA338
	0x031B7070 MOV X0, X19
	0x031B7074 LDP X20, X19, [X31 + 0x30]
	0x031B7078 LDP X30, X21, [X31 + 0x20]
	0x031B707C LDP D9, D8, [X31 + 0x10]
	0x031B7080 MOV X1, X31
	0x031B7084 LDP D11, D10, [X31], #0x40
	0x031B7088 B 0x31BF574
	0x031B708C BL 0x1C16F20
	0x031B7090 STP D11, D10, [X31 - 0x40]!
	0x031B7094 STP D9, D8, [X31 + 0x10]
	0x031B7098 STP X30, X21, [X31 + 0x20]
	0x031B709C STP X20, X19, [X31 + 0x30]
	0x031B70A0 LDR X8, [X0 + 0x10]
	0x031B70A4 CBZ X8, 0x31B7138
	0x031B70A8 LDR X19, [X8 + 0x58]
	0x031B70AC CBZ X19, 0x31B7138
	0x031B70B0 MOV X20, X0
	0x031B70B4 MOV X0, X19
	0x031B70B8 MOV X1, X31
	0x031B70BC BL 0x3C3F58C
	0x031B70C0 LDR X0, [X20 + 0x10]
	0x031B70C4 CBZ X0, 0x31B7138
	0x031B70C8 MOV X1, X31
	0x031B70CC MOV V8.16B, V0.16B
	0x031B70D0 BL 0x31BF678
	0x031B70D4 CBZ X0, 0x31B7138
	0x031B70D8 MOV X1, X31
	0x031B70DC BL 0x3C3F58C
	0x031B70E0 LDR X8, [X20 + 0x10]
	0x031B70E4 CBZ X8, 0x31B7138
	0x031B70E8 LDP S10, S11, [X20 + 0x18]
	0x031B70EC MOV X0, X31
	0x031B70F0 MOV V9.16B, V0.16B
	0x031B70F4 ADD X21, X8, 0x60
	0x031B70F8 BL 0x3C3C714
	0x031B70FC LDP S5, S6, [X20 + 0x20]
	0x031B7100 MOV V4.16B, V0.16B
	0x031B7104 MOV V0.16B, V8.16B
	0x031B7108 MOV V1.16B, V9.16B
	0x031B710C MOV X0, X21
	0x031B7110 MOV V2.16B, V10.16B
	0x031B7114 MOV V3.16B, V11.16B
	0x031B7118 BL 0x31AA338
	0x031B711C MOV X0, X19
	0x031B7120 LDP X20, X19, [X31 + 0x30]
	0x031B7124 LDP X30, X21, [X31 + 0x20]
	0x031B7128 LDP D9, D8, [X31 + 0x10]
	0x031B712C MOV X1, X31
	0x031B7130 LDP D11, D10, [X31], #0x40
	0x031B7134 B 0x31BF3F8
	0x031B7138 BL 0x1C16F20
	0x031B713C STP D11, D10, [X31 - 0x40]!
	0x031B7140 STP D9, D8, [X31 + 0x10]
	0x031B7144 STP X30, X21, [X31 + 0x20]
	0x031B7148 STP X20, X19, [X31 + 0x30]
	0x031B714C LDR X8, [X0 + 0x10]
	0x031B7150 CBZ X8, 0x31B71E4
	0x031B7154 LDR X19, [X8 + 0x58]
	0x031B7158 CBZ X19, 0x31B71E4
	0x031B715C MOV X20, X0
	0x031B7160 MOV X0, X19
	0x031B7164 MOV X1, X31
	0x031B7168 BL 0x3C3F58C
	0x031B716C LDR X0, [X20 + 0x10]
	0x031B7170 CBZ X0, 0x31B71E4
	0x031B7174 MOV X1, X31
	0x031B7178 MOV V8.16B, V1.16B
	0x031B717C BL 0x31BF678
	0x031B7180 CBZ X0, 0x31B71E4
	0x031B7184 MOV X1, X31
	0x031B7188 BL 0x3C3F58C
	0x031B718C LDR X8, [X20 + 0x10]
	0x031B7190 CBZ X8, 0x31B71E4
	0x031B7194 LDP S10, S11, [X20 + 0x18]
	0x031B7198 MOV X0, X31
	0x031B719C MOV V9.16B, V1.16B
	0x031B71A0 ADD X21, X8, 0x64
	0x031B71A4 BL 0x3C3C714
	0x031B71A8 LDP S5, S6, [X20 + 0x20]
	0x031B71AC MOV V4.16B, V0.16B
	0x031B71B0 MOV V0.16B, V8.16B
	0x031B71B4 MOV V1.16B, V9.16B
	0x031B71B8 MOV X0, X21
	0x031B71BC MOV V2.16B, V10.16B
	0x031B71C0 MOV V3.16B, V11.16B
	0x031B71C4 BL 0x31AA338
	0x031B71C8 MOV X0, X19
	0x031B71CC LDP X20, X19, [X31 + 0x30]
	0x031B71D0 LDP X30, X21, [X31 + 0x20]
	0x031B71D4 LDP D9, D8, [X31 + 0x10]
	0x031B71D8 MOV X1, X31
	0x031B71DC LDP D11, D10, [X31], #0x40
	0x031B71E0 B 0x31BF444
	0x031B71E4 BL 0x1C16F20
	0x031B71E8 STP D11, D10, [X31 - 0x40]!
	0x031B71EC STP D9, D8, [X31 + 0x10]
	0x031B71F0 STP X30, X21, [X31 + 0x20]
	0x031B71F4 STP X20, X19, [X31 + 0x30]
	0x031B71F8 LDR X8, [X0 + 0x10]
	0x031B71FC CBZ X8, 0x31B7290
	0x031B7200 LDR X19, [X8 + 0x58]
	0x031B7204 CBZ X19, 0x31B7290
	0x031B7208 MOV X20, X0
	0x031B720C MOV X0, X19
	0x031B7210 MOV X1, X31
	0x031B7214 BL 0x3C3F58C
	0x031B7218 LDR X0, [X20 + 0x10]
	0x031B721C CBZ X0, 0x31B7290
	0x031B7220 MOV X1, X31
	0x031B7224 MOV V8.16B, V2.16B
	0x031B7228 BL 0x31BF678
	0x031B722C CBZ X0, 0x31B7290
	0x031B7230 MOV X1, X31
	0x031B7234 BL 0x3C3F58C
	0x031B7238 LDR X8, [X20 + 0x10]
	0x031B723C CBZ X8, 0x31B7290
	0x031B7240 LDP S10, S11, [X20 + 0x18]
	0x031B7244 MOV X0, X31
	0x031B7248 MOV V9.16B, V2.16B
	0x031B724C ADD X21, X8, 0x68
	0x031B7250 BL 0x3C3C714
	0x031B7254 LDP S5, S6, [X20 + 0x20]
	0x031B7258 MOV V4.16B, V0.16B
	0x031B725C MOV V0.16B, V8.16B
	0x031B7260 MOV V1.16B, V9.16B
	0x031B7264 MOV X0, X21
	0x031B7268 MOV V2.16B, V10.16B
	0x031B726C MOV V3.16B, V11.16B
	0x031B7270 BL 0x31AA338
	0x031B7274 MOV X0, X19
	0x031B7278 LDP X20, X19, [X31 + 0x30]
	0x031B727C LDP X30, X21, [X31 + 0x20]
	0x031B7280 LDP D9, D8, [X31 + 0x10]
	0x031B7284 MOV X1, X31
	0x031B7288 LDP D11, D10, [X31], #0x40
	0x031B728C B 0x31BF490
	0x031B7290 BL 0x1C16F20
	0x031B7294 SUB X31, X31, 0x80
	0x031B7298 STP D15, D14, [X31 + 0x20]
	0x031B729C STP D13, D12, [X31 + 0x30]
	0x031B72A0 STP D11, D10, [X31 + 0x40]
	0x031B72A4 STP D9, D8, [X31 + 0x50]
	0x031B72A8 STP X30, X21, [X31 + 0x60]
	0x031B72AC STP X20, X19, [X31 + 0x70]
	0x031B72B0 LDR X8, [X0 + 0x10]
	0x031B72B4 CBZ X8, 0x31B737C
	0x031B72B8 LDR X19, [X8 + 0x58]
	0x031B72BC CBZ X19, 0x31B737C
	0x031B72C0 MOV X20, X0
	0x031B72C4 MOV X0, X19
	0x031B72C8 MOV X1, X31
	0x031B72CC BL 0x3C3FBAC
	0x031B72D0 LDR X0, [X20 + 0x10]
	0x031B72D4 CBZ X0, 0x31B737C
	0x031B72D8 MOV X1, X31
	0x031B72DC MOV V8.16B, V0.16B
	0x031B72E0 MOV V9.16B, V1.16B
	0x031B72E4 MOV V10.16B, V2.16B
	0x031B72E8 BL 0x31BF678
	0x031B72EC CBZ X0, 0x31B737C
	0x031B72F0 MOV X1, X31
	0x031B72F4 BL 0x3C3FBAC
	0x031B72F8 LDR X8, [X20 + 0x10]
	0x031B72FC CBZ X8, 0x31B737C
	0x031B7300 LDP S14, S15, [X20 + 0x18]
	0x031B7304 MOV X0, X31
	0x031B7308 MOV V11.16B, V0.16B
	0x031B730C MOV V12.16B, V1.16B
	0x031B7310 MOV V13.16B, V2.16B
	0x031B7314 ADD X21, X8, 0x60
	0x031B7318 BL 0x3C3C714
	0x031B731C LDP S1, S2, [X20 + 0x20]
	0x031B7320 STR S0, [X31]
	0x031B7324 MOV V0.16B, V8.16B
	0x031B7328 MOV V3.16B, V11.16B
	0x031B732C STR S2, [X31 + 0x10]
	0x031B7330 STR S1, [X31 + 0x8]
	0x031B7334 MOV V1.16B, V9.16B
	0x031B7338 MOV V2.16B, V10.16B
	0x031B733C MOV V4.16B, V12.16B
	0x031B7340 MOV V5.16B, V13.16B
	0x031B7344 MOV X0, X21
	0x031B7348 MOV V6.16B, V14.16B
	0x031B734C MOV V7.16B, V15.16B
	0x031B7350 BL 0x31AA3DC
	0x031B7354 MOV X0, X19
	0x031B7358 LDP X20, X19, [X31 + 0x70]
	0x031B735C LDP X30, X21, [X31 + 0x60]
	0x031B7360 LDP D9, D8, [X31 + 0x50]
	0x031B7364 LDP D11, D10, [X31 + 0x40]
	0x031B7368 LDP D13, D12, [X31 + 0x30]
	0x031B736C LDP D15, D14, [X31 + 0x20]
	0x031B7370 MOV X1, X31
	0x031B7374 ADD X31, X31, 0x80
	0x031B7378 B 0x3C3FC4C
	0x031B737C BL 0x1C16F20
	0x031B7380 SUB X31, X31, 0x90
	0x031B7384 STP D15, D14, [X31 + 0x30]
	0x031B7388 STP D13, D12, [X31 + 0x40]
	0x031B738C STP D11, D10, [X31 + 0x50]
	0x031B7390 STP D9, D8, [X31 + 0x60]
	0x031B7394 STR X30, [X31 + 0x70]
	0x031B7398 STP X20, X19, [X31 + 0x80]
	0x031B739C ADRP X20, 0x1224000
	0x031B73A0 LDRB W8, [X20 + 0xED1]
	0x031B73A4 MOV X19, X0
	0x031B73A8 TBNZ X8, 0x0, 0x31B73C0
	0x031B73AC ADRP X0, 0xF68000
	0x031B73B0 LDR X0, [X0 + 0x5A0]
	0x031B73B4 BL 0x1C16CF4
	0x031B73B8 MOVZ W8, 0x1
	0x031B73BC STRB W8, [X20 + 0xED1]
	0x031B73C0 LDR X8, [X19 + 0x10]
	0x031B73C4 CBZ X8, 0x31B74D8
	0x031B73C8 LDR X0, [X8 + 0x58]
	0x031B73CC MOV X1, X31
	0x031B73D0 BL 0x31BF5C0
	0x031B73D4 LDR X0, [X19 + 0x10]
	0x031B73D8 CBZ X0, 0x31B74D8
	0x031B73DC MOV X1, X31
	0x031B73E0 MOV V10.16B, V0.16B
	0x031B73E4 MOV V11.16B, V1.16B
	0x031B73E8 MOV V12.16B, V2.16B
	0x031B73EC MOV V13.16B, V3.16B
	0x031B73F0 BL 0x31BF678
	0x031B73F4 MOV X1, X31
	0x031B73F8 BL 0x31BF5C0
	0x031B73FC LDR X8, [X19 + 0x10]
	0x031B7400 CBZ X8, 0x31B74D8
	0x031B7404 LDR X8, [X8 + 0xE8]
	0x031B7408 STP S3, S2, [X31 + 0x78]
	0x031B740C CBZ X8, 0x31B74D8
	0x031B7410 LDP S8, S9, [X19 + 0x18]
	0x031B7414 MOV X0, X31
	0x031B7418 MOV V15.16B, V1.16B
	0x031B741C MOV V14.16B, V0.16B
	0x031B7420 ADD X20, X8, 0x64
	0x031B7424 BL 0x3C3C714
	0x031B7428 LDP S1, S2, [X19 + 0x20]
	0x031B742C LDP S7, S6, [X31 + 0x78]
	0x031B7430 STR S0, [X31 + 0x10]
	0x031B7434 MOV V0.16B, V10.16B
	0x031B7438 STR S2, [X31 + 0x20]
	0x031B743C STR S1, [X31 + 0x18]
	0x031B7440 MOV V1.16B, V11.16B
	0x031B7444 MOV V2.16B, V12.16B
	0x031B7448 MOV V3.16B, V13.16B
	0x031B744C MOV V4.16B, V14.16B
	0x031B7450 MOV V5.16B, V15.16B
	0x031B7454 MOV X0, X20
	0x031B7458 STR S9, [X31 + 0x8]
	0x031B745C STR S8, [X31]
	0x031B7460 BL 0x31AA4A8
	0x031B7464 LDR X8, [X19 + 0x10]
	0x031B7468 CBZ X8, 0x31B74D8
	0x031B746C LDR X0, [X8 + 0x58]
	0x031B7470 CBZ X0, 0x31B74D8

ISIL:
	001 Move [X31-64], X29
	002 Move [X31-56], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Subtract X31, X31, 832
	010 Move X19, 0x1226000
	011 Move X21, 0xF40000
	012 Move X22, 0xF45000
	013 Move W8, [X19+3791]
	014 Move X21, [X21+1448]
	015 Move X22, [X22+1936]
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF45000
	021 Move X0, [X0+1840]
	022 Call 0x1C17CF4
	023 Move X0, 0xF45000
	024 Move X0, [X0+1936]
	025 Call 0x1C17CF4
	026 Move X0, 0xF40000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X19+3791], W8
	031 Move X8, [X21]
	032 Move X10, -40660992
	033 Move X11, -40677376
	034 Move V0, [X10+728]
	035 Move X8, [X8+184]
	036 Move V1, [X11+147]
	037 Move W9, 1
	038 Move W10, 0xBF800000
	039 Move [X8], W9
	040 Move [X8+4], D0
	041 Move [X8+56], V1
	042 Move [X8+80], W10
	043 Move [X8+92], W31
	044 Move X0, [X22]
	045 Move W1, 9
	046 Call 0x1C17D6C
	047 Move X19, X0
	048 Add X0, X31, 800
	049 Move S0, W31
	050 Move S1, W31
	051 Move X1, X31
	052 Move [X31+808], X31
	053 Move [X31+800], X31
	054 Move [X31+824], W31
	055 Move [X31+816], X31
	056 Call Keyframe..ctor, X0, V0, V1
	057 Compare X19, 0
	058 JumpIfEqual {358}
	059 Add X20, X31, 640
	060 Move V0, [X31+50]
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 Move [X31+48], V0
	063 Move [X20+140], V1
	064 Move W8, [X19+24]
	065 Compare W8, 0
	066 JumpIfEqual {357}
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 Move V1, [X31+48]
	069 Move X8, -40677376
	070 Move X9, -40681472
	071 Move [X19+44], V0
	072 Move [X19+2], V1
	073 Move V0, [X8+152]
	074 Move V1, [X9+3888]
	075 Add X0, X31, 736
	076 Move X1, X31
	077 Move [X31+744], X31
	078 Move [X31+736], X31
	079 Move [X31+760], W31
	080 Move [X31+752], X31
	081 Call Keyframe..ctor, X0, V0, V1
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 Move V1, [X31+46]
	084 Move [X20+76], V0
	085 Move [X31+44], V1
	086 Move W8, [X19+24]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 Move V1, [X31+44]
	090 Move X8, -40681472
	091 Move X9, -40685568
	092 Move [X19+72], V0
	093 Move [X19+60], V1
	094 Move V0, [X8+980]
	095 Move V1, [X9+3944]
	096 Add X0, X31, 672
	097 Move X1, X31
	098 Move [X31+680], X31
	099 Move [X31+672], X31
	100 Move [X31+696], W31
	101 Move [X31+688], X31
	102 Call Keyframe..ctor, X0, V0, V1
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 Move V1, [X31+42]
	105 Move [X20+12], V0
	106 Move [X31+40], V1
	107 Move W8, [X19+24]
	108 NotImplemented "Instruction CMP not yet implemented."
	109 NotImplemented "Instruction LDUR not yet implemented."
	110 Move V1, [X31+40]
	111 Move X8, -40681472
	112 Move X9, -40681472
	113 Move [X19+100], V0
	114 Move [X19+88], V1
	115 Move V0, [X8+312]
	116 Move V1, [X9+540]
	117 Add X0, X31, 608
	118 Move X1, X31
	119 Add X20, X31, 384
	120 Move [X31+616], X31
	121 Move [X31+608], X31
	122 Move [X31+632], W31
	123 Move [X31+624], X31
	124 Call Keyframe..ctor, X0, V0, V1
	125 NotImplemented "Instruction LDUR not yet implemented."
	126 Move V1, [X31+38]
	127 Move [X20+204], V0
	128 Move [X31+36], V1
	129 Move W8, [X19+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 NotImplemented "Instruction LDUR not yet implemented."
	132 Move V1, [X31+36]
	133 Move X8, -40685568
	134 Move X9, -40681472
	135 Move [X19+8], V0
	136 Move [X19+116], V1
	137 Move V0, [X8+3892]
	138 Move V1, [X9+880]
	139 Add X0, X31, 544
	140 Move X1, X31
	141 Move [X31+552], X31
	142 Move [X31+544], X31
	143 Move [X31+568], W31
	144 Move [X31+560], X31
	145 Call Keyframe..ctor, X0, V0, V1
	146 NotImplemented "Instruction LDUR not yet implemented."
	147 Move V1, [X31+34]
	148 Move [X20+140], V0
	149 Move [X31+32], V1
	150 Move W8, [X19+24]
	151 NotImplemented "Instruction CMP not yet implemented."
	152 NotImplemented "Instruction LDUR not yet implemented."
	153 Move V1, [X31+32]
	154 Move X8, -40681472
	155 Move X9, -40681472
	156 Move [X19+156], V0
	157 Move [X19+9], V1
	158 Move V0, [X8+544]
	159 Move V1, [X9+600]
	160 Add X0, X31, 480
	161 Move X1, X31
	162 Move [X31+480], X31
	163 Move [X31+488], X31
	164 Move [X31+504], W31
	165 Move [X31+496], X31
	166 Call Keyframe..ctor, X0, V0, V1
	167 NotImplemented "Instruction LDUR not yet implemented."
	168 Move V1, [X31+30]
	169 Move [X20+76], V0
	170 Move [X31+28], V1
	171 Move W8, [X19+24]
	172 NotImplemented "Instruction CMP not yet implemented."
	173 NotImplemented "Instruction LDUR not yet implemented."
	174 Move V1, [X31+28]
	175 Move X8, -40681472
	176 Move X9, -40681472
	177 Move [X19+184], V0
	178 Move [X19+172], V1
	179 Move V0, [X8+404]
	180 Move V1, [X9+984]
	181 Add X0, X31, 416
	182 Move X1, X31
	183 Move [X31+416], X31
	184 Move [X31+424], X31
	185 Move [X31+440], W31
	186 Move [X31+432], X31
	187 Call Keyframe..ctor, X0, V0, V1
	188 NotImplemented "Instruction LDUR not yet implemented."
	189 Move V1, [X31+26]
	190 Move [X20+12], V0
	191 Move [X31+24], V1
	192 Move W8, [X19+24]
	193 NotImplemented "Instruction CMP not yet implemented."
	194 NotImplemented "Instruction LDUR not yet implemented."
	195 Move V1, [X31+24]
	196 Move X8, -40681472
	197 Move X9, -40681472
	198 Move [X19+212], V0
	199 Move [X19+200], V1
	200 Move V0, [X8+1064]
	201 Move V1, [X9+692]
	202 Add X0, X31, 352
	203 Move X1, X31
	204 Add X23, X31, 128
	205 Move [X31+352], X31
	206 Move [X31+360], X31
	207 Move [X31+376], W31
	208 Move [X31+368], X31
	209 Call Keyframe..ctor, X0, V0, V1
	210 NotImplemented "Instruction LDUR not yet implemented."
	211 Move V1, [X31+22]
	212 Move [X23+204], V0
	213 Move [X31+20], V1
	214 Move W8, [X19+24]
	215 NotImplemented "Instruction CMP not yet implemented."
	216 NotImplemented "Instruction LDUR not yet implemented."
	217 Move V1, [X31+20]
	218 Add X0, X31, 288
	219 Move X1, X31
	220 Move [X19+15], V0
	221 Move [X19+228], V1
	222 Move S0, 1
	223 Move S1, W31
	224 Move [X31+288], X31
	225 Move [X31+296], X31
	226 Move [X31+312], W31
	227 Move [X31+304], X31
	228 Call Keyframe..ctor, X0, V0, V1
	229 NotImplemented "Instruction LDUR not yet implemented."
	230 Move V1, [X31+18]
	231 Move [X23+140], V0
	232 Move [X31+16], V1
	233 Move W8, [X19+24]
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move V0, [X31+16]
	236 NotImplemented "Instruction LDUR not yet implemented."
	237 Move X24, 0xF44000
	238 Move X24, [X24+1840]
	239 Add X8, X19, 256
	240 Move [X19+16], V0
	241 Move [X8+12], V1
	242 Move X0, [X24]
	243 Call 0x1C17F10
	244 Move X1, X19
	245 Move X2, X31
	246 Move X20, X0
	247 Call AnimationCurve..ctor, X0, X1
	248 Move X8, [X21]
	249 Move W1, 4
	250 Move X8, [X8+184]
	251 Move [X8+112], X20
	252 Move X0, [X22]
	253 Call 0x1C17D6C
	254 Move X19, X0
	255 Add X0, X31, 224
	256 Move S0, W31
	257 Move S1, W31
	258 Move X1, X31
	259 Move [X31+224], X31
	260 Move [X31+232], X31
	261 Move [X31+248], W31
	262 Move [X31+240], X31
	263 Call Keyframe..ctor, X0, V0, V1
	264 Compare X19, 0
	265 JumpIfEqual {358}
	266 Move V0, [X31+14]
	267 NotImplemented "Instruction LDUR not yet implemented."
	268 Move [X31+12], V0
	269 Move [X23+76], V1
	270 Move W8, [X19+24]
	271 Compare W8, 0
	272 JumpIfEqual {357}
	273 NotImplemented "Instruction LDUR not yet implemented."
	274 Move V1, [X31+12]
	275 Add X0, X31, 160
	276 Move X1, X31
	277 Move [X19+44], V0
	278 Move [X19+2], V1
	279 Move S0, 0.25
	280 Move S1, 1
	281 Move [X31+160], X31
	282 Move [X31+168], X31
	283 Move [X31+184], W31
	284 Move [X31+176], X31
	285 Call Keyframe..ctor, X0, V0, V1
	286 NotImplemented "Instruction LDUR not yet implemented."
	287 Move V1, [X31+10]
	288 Move [X23+12], V0
	289 Move [X31+8], V1
	290 Move W8, [X19+24]
	291 NotImplemented "Instruction CMP not yet implemented."
	292 NotImplemented "Instruction LDUR not yet implemented."
	293 Move V1, [X31+8]
	294 Add X0, X31, 96
	295 Move X1, X31
	296 Move [X19+72], V0
	297 Move [X19+60], V1
	298 Move S0, 0.75
	299 Move S1, -1
	300 Move [X31+96], X31
	301 Move [X31+104], X31
	302 Move [X31+120], W31
	303 Move [X31+112], X31
	304 Call Keyframe..ctor, X0, V0, V1
	305 NotImplemented "Instruction LDUR not yet implemented."
	306 Move V1, [X31+6]
	307 Move [X31+76], V0
	308 Move [X31+4], V1
	309 Move W8, [X19+24]
	310 NotImplemented "Instruction CMP not yet implemented."
	311 NotImplemented "Instruction LDUR not yet implemented."
	312 Move V1, [X31+4]
	313 Add X0, X31, 32
	314 Move X1, X31
	315 Move [X19+100], V0
	316 Move [X19+88], V1
	317 Move S0, 1
	318 Move S1, W31
	319 Move [X31+32], X31
	320 Move [X31+40], X31
	321 Move [X31+56], W31
	322 Move [X31+48], X31
	323 Call Keyframe..ctor, X0, V0, V1
	324 NotImplemented "Instruction LDUR not yet implemented."
	325 Move V1, [X31+2]
	326 Move [X31+12], V0
	327 Move [X31], V1
	328 Move W8, [X19+24]
	329 NotImplemented "Instruction CMP not yet implemented."
	330 NotImplemented "Instruction LDUR not yet implemented."
	331 Move V1, [X31]
	332 Move [X19+8], V0
	333 Move [X19+116], V1
	334 Move X0, [X24]
	335 Call 0x1C17F10
	336 Move X1, X19
	337 Move X2, X31
	338 Move X20, X0
	339 Call AnimationCurve..ctor, X0, X1
	340 Move X8, [X21]
	341 Move X9, -40673280
	342 Move V0, [X9+83]
	343 Move X8, [X8+184]
	344 Move [X8+120], X20
	345 Move [X8+132], W31
	346 Move [X8+10], V0
	347 Add X31, X31, 832
	348 Move X20, [X31+48]
	349 Move X19, [X31+56]
	350 Move X22, [X31+32]
	351 Move X21, [X31+40]
	352 Move X24, [X31+16]
	353 Move X23, [X31+24]
	354 Move X29, [X31+64]
	355 Move X30, [X31+72]
	356 Return 
	357 Call 0x1C17F28
	358 Call 0x1C17F20

