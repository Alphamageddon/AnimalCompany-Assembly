Type: LeanTweenExt

Method: LTDescr LeanAlpha(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BD3FC ADRP X21, 0xF38000
	0x031BD400 LDRB W8, [X20 + 0xF0D]
	0x031BD404 LDR X21, [X21 + 0x5A8]
	0x031BD408 MOV V8.16B, V1.16B
	0x031BD40C MOV V9.16B, V0.16B
	0x031BD410 MOV X19, X0
	0x031BD414 TBNZ X8, 0x0, 0x31BD42C
	0x031BD418 ADRP X0, 0xF38000
	0x031BD41C LDR X0, [X0 + 0x5A8]
	0x031BD420 BL 0x1C16CF4
	0x031BD424 MOVZ W8, 0x1
	0x031BD428 STRB W8, [X20 + 0xF0D]
	0x031BD42C LDR X0, [X21]
	0x031BD430 LDR W8, [X0 + 0xE0]
	0x031BD434 CBNZ W8, 0x31BD43C
	0x031BD438 BL 0x1C16DFC
	0x031BD43C MOV X0, X19
	0x031BD440 LDP X20, X19, [X31 + 0x20]
	0x031BD444 LDP X30, X21, [X31 + 0x10]
	0x031BD448 MOV V0.16B, V9.16B
	0x031BD44C MOV V1.16B, V8.16B
	0x031BD450 MOV X1, X31
	0x031BD454 LDP D9, D8, [X31], #0x30
	0x031BD458 B 0x31B1664
	0x031BD45C STP D9, D8, [X31 - 0x30]!
	0x031BD460 STP X30, X21, [X31 + 0x10]
	0x031BD464 STP X20, X19, [X31 + 0x20]
	0x031BD468 ADRP X20, 0x121E000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121F000
	008 Move X21, 0xF39000
	009 Move W8, [X20+3820]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3820], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.alpha, X0, V0, V1
	039 Return X0

Method: LTDescr LeanAlphaVertex(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BD46C ADRP X21, 0xF38000
	0x031BD470 LDRB W8, [X20 + 0xF0E]
	0x031BD474 LDR X21, [X21 + 0x5A8]
	0x031BD478 MOV V8.16B, V1.16B
	0x031BD47C MOV V9.16B, V0.16B
	0x031BD480 MOV X19, X0
	0x031BD484 TBNZ X8, 0x0, 0x31BD49C
	0x031BD488 ADRP X0, 0xF38000
	0x031BD48C LDR X0, [X0 + 0x5A8]
	0x031BD490 BL 0x1C16CF4
	0x031BD494 MOVZ W8, 0x1
	0x031BD498 STRB W8, [X20 + 0xF0E]
	0x031BD49C LDR X0, [X21]
	0x031BD4A0 LDR W8, [X0 + 0xE0]
	0x031BD4A4 CBNZ W8, 0x31BD4AC
	0x031BD4A8 BL 0x1C16DFC
	0x031BD4AC MOV X0, X19
	0x031BD4B0 LDP X20, X19, [X31 + 0x20]
	0x031BD4B4 LDP X30, X21, [X31 + 0x10]
	0x031BD4B8 MOV V0.16B, V9.16B
	0x031BD4BC MOV V1.16B, V8.16B
	0x031BD4C0 MOV X1, X31
	0x031BD4C4 LDP D9, D8, [X31], #0x30
	0x031BD4C8 B 0x31B16F0
	0x031BD4CC STP D9, D8, [X31 - 0x30]!
	0x031BD4D0 STP X30, X21, [X31 + 0x10]
	0x031BD4D4 STP X20, X19, [X31 + 0x20]
	0x031BD4D8 ADRP X20, 0x121E000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121F000
	008 Move X21, 0xF39000
	009 Move W8, [X20+3821]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3821], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.alphaVertex, X0, V0, V1
	039 Return X0

Method: LTDescr LeanAlpha(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)

Disassembly:
	0x031BD4DC ADRP X21, 0xF38000
	0x031BD4E0 LDRB W8, [X20 + 0xF0F]
	0x031BD4E4 LDR X21, [X21 + 0x5A8]
	0x031BD4E8 MOV V8.16B, V1.16B
	0x031BD4EC MOV V9.16B, V0.16B
	0x031BD4F0 MOV X19, X0
	0x031BD4F4 TBNZ X8, 0x0, 0x31BD50C
	0x031BD4F8 ADRP X0, 0xF38000
	0x031BD4FC LDR X0, [X0 + 0x5A8]
	0x031BD500 BL 0x1C16CF4
	0x031BD504 MOVZ W8, 0x1
	0x031BD508 STRB W8, [X20 + 0xF0F]
	0x031BD50C LDR X0, [X21]
	0x031BD510 LDR W8, [X0 + 0xE0]
	0x031BD514 CBNZ W8, 0x31BD51C
	0x031BD518 BL 0x1C16DFC
	0x031BD51C MOV X0, X19
	0x031BD520 LDP X20, X19, [X31 + 0x20]
	0x031BD524 LDP X30, X21, [X31 + 0x10]
	0x031BD528 MOV V0.16B, V9.16B
	0x031BD52C MOV V1.16B, V8.16B
	0x031BD530 MOV X1, X31
	0x031BD534 LDP D9, D8, [X31], #0x30
	0x031BD538 B 0x31B177C
	0x031BD53C STP D9, D8, [X31 - 0x30]!
	0x031BD540 STR X30, [X31 + 0x10]
	0x031BD544 STP X20, X19, [X31 + 0x20]
	0x031BD548 ADRP X20, 0x121E000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121F000
	008 Move X21, 0xF39000
	009 Move W8, [X20+3822]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3822], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.alpha, X0, V0, V1
	039 Return X0

Method: LTDescr LeanAlpha(UnityEngine.CanvasGroup canvas, System.Single to, System.Single time)

Disassembly:
	0x031BD54C LDRB W8, [X20 + 0xF10]
	0x031BD550 MOV V8.16B, V1.16B
	0x031BD554 MOV V9.16B, V0.16B
	0x031BD558 MOV X19, X0
	0x031BD55C TBNZ X8, 0x0, 0x31BD574
	0x031BD560 ADRP X0, 0xF38000
	0x031BD564 LDR X0, [X0 + 0x5A8]
	0x031BD568 BL 0x1C16CF4
	0x031BD56C MOVZ W8, 0x1
	0x031BD570 STRB W8, [X20 + 0xF10]
	0x031BD574 CBZ X19, 0x31BD5C4
	0x031BD578 ADRP X20, 0xF38000
	0x031BD57C LDR X20, [X20 + 0x5A8]
	0x031BD580 MOV X0, X19
	0x031BD584 MOV X1, X31
	0x031BD588 BL 0x3C32ECC
	0x031BD58C LDR X8, [X20]
	0x031BD590 MOV X19, X0
	0x031BD594 LDR W9, [X8 + 0xE0]
	0x031BD598 CBNZ W9, 0x31BD5A4
	0x031BD59C MOV X0, X8
	0x031BD5A0 BL 0x1C16DFC
	0x031BD5A4 MOV X0, X19
	0x031BD5A8 LDP X20, X19, [X31 + 0x20]
	0x031BD5AC LDR X30, [X31 + 0x10]
	0x031BD5B0 MOV V0.16B, V9.16B
	0x031BD5B4 MOV V1.16B, V8.16B
	0x031BD5B8 MOV X1, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121F000
	008 Move X21, 0xF39000
	009 Move W8, [X20+3823]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3823], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.alphaCanvas, X0, V0, V1
	039 Return X0

Method: LTDescr LeanAlphaText(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)

Disassembly:
	0x031BD5BC LDP D9, D8, [X31], #0x30
	0x031BD5C0 B 0x31B1664
	0x031BD5C4 BL 0x1C16F20
	0x031BD5C8 STP D9, D8, [X31 - 0x30]!
	0x031BD5CC STR X30, [X31 + 0x10]
	0x031BD5D0 STP X20, X19, [X31 + 0x20]
	0x031BD5D4 ADRP X20, 0x121E000
	0x031BD5D8 LDRB W8, [X20 + 0xF11]
	0x031BD5DC MOV V8.16B, V1.16B
	0x031BD5E0 MOV V9.16B, V0.16B
	0x031BD5E4 MOV X19, X0
	0x031BD5E8 TBNZ X8, 0x0, 0x31BD600
	0x031BD5EC ADRP X0, 0xF38000
	0x031BD5F0 LDR X0, [X0 + 0x5A8]
	0x031BD5F4 BL 0x1C16CF4
	0x031BD5F8 MOVZ W8, 0x1
	0x031BD5FC STRB W8, [X20 + 0xF11]
	0x031BD600 CBZ X19, 0x31BD650
	0x031BD604 ADRP X20, 0xF38000
	0x031BD608 LDR X20, [X20 + 0x5A8]
	0x031BD60C MOV X0, X19
	0x031BD610 MOV X1, X31
	0x031BD614 BL 0x3C32ECC
	0x031BD618 LDR X8, [X20]
	0x031BD61C MOV X19, X0
	0x031BD620 LDR W9, [X8 + 0xE0]
	0x031BD624 CBNZ W9, 0x31BD630
	0x031BD628 MOV X0, X8

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121F000
	008 Move X21, 0xF39000
	009 Move W8, [X20+3824]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3824], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.alphaText, X0, V0, V1
	039 Return X0

Method: System.Void LeanCancel(UnityEngine.GameObject gameObject)

Disassembly:
	0x031BD62C BL 0x1C16DFC
	0x031BD630 MOV X0, X19
	0x031BD634 LDP X20, X19, [X31 + 0x20]
	0x031BD638 LDR X30, [X31 + 0x10]
	0x031BD63C MOV V0.16B, V9.16B
	0x031BD640 MOV V1.16B, V8.16B
	0x031BD644 MOV X1, X31
	0x031BD648 LDP D9, D8, [X31], #0x30
	0x031BD64C B 0x31B16F0
	0x031BD650 BL 0x1C16F20
	0x031BD654 STP D9, D8, [X31 - 0x30]!
	0x031BD658 STR X30, [X31 + 0x10]
	0x031BD65C STP X20, X19, [X31 + 0x20]
	0x031BD660 ADRP X20, 0x121E000
	0x031BD664 LDRB W8, [X20 + 0xF12]
	0x031BD668 MOV V8.16B, V1.16B
	0x031BD66C MOV V9.16B, V0.16B
	0x031BD670 MOV X19, X0
	0x031BD674 TBNZ X8, 0x0, 0x31BD68C
	0x031BD678 ADRP X0, 0xF38000
	0x031BD67C LDR X0, [X0 + 0x5A8]
	0x031BD680 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x121F000
	006 Move X21, 0xF39000
	007 Move W8, [X20+3825]
	008 Move X21, [X21+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF39000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3825], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call LeanTween.cancel, X0
	031 Return 

Method: System.Void LeanCancel(UnityEngine.GameObject gameObject, System.Boolean callOnComplete)

Disassembly:
	0x031BD684 MOVZ W8, 0x1
	0x031BD688 STRB W8, [X20 + 0xF12]
	0x031BD68C CBZ X19, 0x31BD6DC
	0x031BD690 ADRP X20, 0xF38000
	0x031BD694 LDR X20, [X20 + 0x5A8]
	0x031BD698 MOV X0, X19
	0x031BD69C MOV X1, X31
	0x031BD6A0 BL 0x3C32ECC
	0x031BD6A4 LDR X8, [X20]
	0x031BD6A8 MOV X19, X0
	0x031BD6AC LDR W9, [X8 + 0xE0]
	0x031BD6B0 CBNZ W9, 0x31BD6BC
	0x031BD6B4 MOV X0, X8
	0x031BD6B8 BL 0x1C16DFC
	0x031BD6BC MOV X0, X19
	0x031BD6C0 LDP X20, X19, [X31 + 0x20]
	0x031BD6C4 LDR X30, [X31 + 0x10]
	0x031BD6C8 MOV V0.16B, V9.16B
	0x031BD6CC MOV V1.16B, V8.16B
	0x031BD6D0 MOV X1, X31
	0x031BD6D4 LDP D9, D8, [X31], #0x30
	0x031BD6D8 B 0x31B177C
	0x031BD6DC BL 0x1C16F20
	0x031BD6E0 STR D8, [X31 - 0x30]!
	0x031BD6E4 STR X30, [X31 + 0x8]
	0x031BD6E8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121F000
	007 Move X22, 0xF39000
	008 Move W8, [X21+3826]
	009 Move X22, [X22+1448]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF39000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3826], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 And W1, W20, 1
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call LeanTween.cancel, X0, X1
	035 Return 

Method: System.Void LeanCancel(UnityEngine.GameObject gameObject, System.Int32 uniqueId, System.Boolean callOnComplete = False)

Disassembly:
	0x031BD6EC STP X20, X19, [X31 + 0x20]
	0x031BD6F0 ADRP X21, 0x121E000
	0x031BD6F4 ADRP X22, 0xF38000
	0x031BD6F8 LDRB W8, [X21 + 0xF13]
	0x031BD6FC LDR X22, [X22 + 0x5A8]
	0x031BD700 MOV V8.16B, V0.16B
	0x031BD704 MOV X19, X1
	0x031BD708 MOV X20, X0
	0x031BD70C TBNZ X8, 0x0, 0x31BD724
	0x031BD710 ADRP X0, 0xF38000
	0x031BD714 LDR X0, [X0 + 0x5A8]
	0x031BD718 BL 0x1C16CF4
	0x031BD71C MOVZ W8, 0x1
	0x031BD720 STRB W8, [X21 + 0xF13]
	0x031BD724 LDR X0, [X22]
	0x031BD728 LDR W8, [X0 + 0xE0]
	0x031BD72C CBNZ W8, 0x31BD734
	0x031BD730 BL 0x1C16DFC
	0x031BD734 MOV X0, X20
	0x031BD738 MOV X1, X19
	0x031BD73C LDP X20, X19, [X31 + 0x20]
	0x031BD740 LDP X22, X21, [X31 + 0x10]
	0x031BD744 LDR X30, [X31 + 0x8]
	0x031BD748 MOV V0.16B, V8.16B
	0x031BD74C MOV X2, X31
	0x031BD750 LDR V8, [X31], #0x30
	0x031BD754 B 0x31B0EA8
	0x031BD758 STR D8, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x121F000
	008 Move X23, 0xF39000
	009 Move W8, [X22+3827]
	010 Move X23, [X23+1448]
	011 Move W21, W2
	012 Move W19, W1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+3827], W8
	023 Move X0, [X23]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 And W2, W21, 1
	029 Move X0, X20
	030 Move W1, W19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X3, X31
	036 Move X30, [X31+48]
	037 Move X23, [X31+56]
	038 Call LeanTween.cancel, X0, X1, X2
	039 Return 

Method: System.Void LeanCancel(UnityEngine.RectTransform rectTransform)

Disassembly:
	0x031BD75C STR X30, [X31 + 0x8]
	0x031BD760 STP X22, X21, [X31 + 0x10]
	0x031BD764 STP X20, X19, [X31 + 0x20]
	0x031BD768 ADRP X21, 0x121E000
	0x031BD76C ADRP X22, 0xF38000
	0x031BD770 LDRB W8, [X21 + 0xF14]
	0x031BD774 LDR X22, [X22 + 0x5A8]
	0x031BD778 MOV V8.16B, V0.16B
	0x031BD77C MOV X19, X1
	0x031BD780 MOV X20, X0
	0x031BD784 TBNZ X8, 0x0, 0x31BD79C
	0x031BD788 ADRP X0, 0xF38000
	0x031BD78C LDR X0, [X0 + 0x5A8]
	0x031BD790 BL 0x1C16CF4
	0x031BD794 MOVZ W8, 0x1
	0x031BD798 STRB W8, [X21 + 0xF14]
	0x031BD79C LDR X0, [X22]
	0x031BD7A0 LDR W8, [X0 + 0xE0]
	0x031BD7A4 CBNZ W8, 0x31BD7AC
	0x031BD7A8 BL 0x1C16DFC
	0x031BD7AC MOV X0, X20
	0x031BD7B0 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x121F000
	006 Move X21, 0xF39000
	007 Move W8, [X20+3828]
	008 Move X21, [X21+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF39000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3828], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call LeanTween.cancel, X0
	031 Return 

Method: LTDescr LeanColor(UnityEngine.GameObject gameObject, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031BD7B4 LDP X20, X19, [X31 + 0x20]
	0x031BD7B8 LDP X22, X21, [X31 + 0x10]
	0x031BD7BC LDR X30, [X31 + 0x8]
	0x031BD7C0 MOV V0.16B, V8.16B
	0x031BD7C4 MOV X2, X31
	0x031BD7C8 LDR V8, [X31], #0x30
	0x031BD7CC B 0x31B0FD8
	0x031BD7D0 STR D8, [X31 - 0x30]!
	0x031BD7D4 STP X30, X21, [X31 + 0x10]
	0x031BD7D8 STP X20, X19, [X31 + 0x20]
	0x031BD7DC ADRP X21, 0x121E000
	0x031BD7E0 LDRB W8, [X21 + 0xF15]
	0x031BD7E4 MOV V8.16B, V0.16B
	0x031BD7E8 MOV X19, X1
	0x031BD7EC MOV X20, X0
	0x031BD7F0 TBNZ X8, 0x0, 0x31BD808
	0x031BD7F4 ADRP X0, 0xF38000
	0x031BD7F8 LDR X0, [X0 + 0x5A8]
	0x031BD7FC BL 0x1C16CF4
	0x031BD800 MOVZ W8, 0x1
	0x031BD804 STRB W8, [X21 + 0xF15]
	0x031BD808 CBZ X20, 0x31BD858
	0x031BD80C ADRP X21, 0xF38000
	0x031BD810 LDR X21, [X21 + 0x5A8]
	0x031BD814 MOV X0, X20
	0x031BD818 MOV X1, X31
	0x031BD81C BL 0x3C32ECC
	0x031BD820 LDR X8, [X21]
	0x031BD824 MOV X20, X0
	0x031BD828 LDR W9, [X8 + 0xE0]
	0x031BD82C CBNZ W9, 0x31BD838
	0x031BD830 MOV X0, X8
	0x031BD834 BL 0x1C16DFC
	0x031BD838 MOV X0, X20
	0x031BD83C MOV X1, X19
	0x031BD840 LDP X20, X19, [X31 + 0x20]
	0x031BD844 LDP X30, X21, [X31 + 0x10]
	0x031BD848 MOV V0.16B, V8.16B

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x121F000
	011 Move X20, 0xF39000
	012 Move W8, [X21+3829]
	013 Move X20, [X20+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF39000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3829], W8
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move V1, V11
	036 Move V2, V10
	037 Move V3, V9
	038 Move V4, V8
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move V0, V12
	048 Move X1, X31
	049 Move V12, [X31+80]
	050 Call LeanTween.color, X0, X1, V0
	051 Return X0

Method: LTDescr LeanColorText(UnityEngine.RectTransform rectTransform, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031BD84C MOV X2, X31
	0x031BD850 LDR V8, [X31], #0x30
	0x031BD854 B 0x31B0EA8
	0x031BD858 BL 0x1C16F20
	0x031BD85C STR D8, [X31 - 0x30]!
	0x031BD860 STP X30, X21, [X31 + 0x10]
	0x031BD864 STP X20, X19, [X31 + 0x20]
	0x031BD868 ADRP X21, 0x121E000
	0x031BD86C LDRB W8, [X21 + 0xF16]
	0x031BD870 MOV V8.16B, V0.16B
	0x031BD874 MOV X19, X1
	0x031BD878 MOV X20, X0
	0x031BD87C TBNZ X8, 0x0, 0x31BD894
	0x031BD880 ADRP X0, 0xF38000
	0x031BD884 LDR X0, [X0 + 0x5A8]
	0x031BD888 BL 0x1C16CF4
	0x031BD88C MOVZ W8, 0x1
	0x031BD890 STRB W8, [X21 + 0xF16]
	0x031BD894 CBZ X20, 0x31BD8E4
	0x031BD898 ADRP X21, 0xF38000
	0x031BD89C LDR X21, [X21 + 0x5A8]
	0x031BD8A0 MOV X0, X20
	0x031BD8A4 MOV X1, X31
	0x031BD8A8 BL 0x3C32ECC
	0x031BD8AC LDR X8, [X21]
	0x031BD8B0 MOV X20, X0
	0x031BD8B4 LDR W9, [X8 + 0xE0]
	0x031BD8B8 CBNZ W9, 0x31BD8C4
	0x031BD8BC MOV X0, X8
	0x031BD8C0 BL 0x1C16DFC
	0x031BD8C4 MOV X0, X20
	0x031BD8C8 MOV X1, X19
	0x031BD8CC LDP X20, X19, [X31 + 0x20]
	0x031BD8D0 LDP X30, X21, [X31 + 0x10]
	0x031BD8D4 MOV V0.16B, V8.16B
	0x031BD8D8 MOV X2, X31
	0x031BD8DC LDR V8, [X31], #0x30
	0x031BD8E0 B 0x31B0FD8

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x121F000
	011 Move X20, 0xF39000
	012 Move W8, [X21+3830]
	013 Move X20, [X20+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF39000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3830], W8
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move V1, V11
	036 Move V2, V10
	037 Move V3, V9
	038 Move V4, V8
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move V0, V12
	048 Move X1, X31
	049 Move V12, [X31+80]
	050 Call LeanTween.colorText, X0, X1, V0
	051 Return X0

Method: LTDescr LeanDelayedCall(UnityEngine.GameObject gameObject, System.Single delayTime, System.Action callback)

Disassembly:
	0x031BD8E4 BL 0x1C16F20
	0x031BD8E8 STR D8, [X31 - 0x30]!
	0x031BD8EC STR X30, [X31 + 0x8]
	0x031BD8F0 STP X22, X21, [X31 + 0x10]
	0x031BD8F4 STP X20, X19, [X31 + 0x20]
	0x031BD8F8 ADRP X21, 0x121E000
	0x031BD8FC ADRP X22, 0xF38000
	0x031BD900 LDRB W8, [X21 + 0xF17]
	0x031BD904 LDR X22, [X22 + 0x5A8]
	0x031BD908 MOV V8.16B, V0.16B
	0x031BD90C MOV X19, X1
	0x031BD910 MOV X20, X0
	0x031BD914 TBNZ X8, 0x0, 0x31BD92C
	0x031BD918 ADRP X0, 0xF38000
	0x031BD91C LDR X0, [X0 + 0x5A8]
	0x031BD920 BL 0x1C16CF4
	0x031BD924 MOVZ W8, 0x1
	0x031BD928 STRB W8, [X21 + 0xF17]
	0x031BD92C LDR X0, [X22]
	0x031BD930 LDR W8, [X0 + 0xE0]
	0x031BD934 CBNZ W8, 0x31BD93C
	0x031BD938 BL 0x1C16DFC
	0x031BD93C MOV X0, X20
	0x031BD940 MOV X1, X19
	0x031BD944 LDP X20, X19, [X31 + 0x20]
	0x031BD948 LDP X22, X21, [X31 + 0x10]
	0x031BD94C LDR X30, [X31 + 0x8]
	0x031BD950 MOV V0.16B, V8.16B
	0x031BD954 MOV X2, X31
	0x031BD958 LDR V8, [X31], #0x30

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121F000
	008 Move X22, 0xF39000
	009 Move W8, [X21+3831]
	010 Move X22, [X22+1448]
	011 Move X19, X1
	012 Move V8, V0
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3831], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.delayedCall, X0, V0, X1
	039 Return X0

Method: LTDescr LeanDelayedCall(UnityEngine.GameObject gameObject, System.Single delayTime, System.Action`1<System.Object> callback)

Disassembly:
	0x031BD95C B 0x31B1088
	0x031BD960 STR D8, [X31 - 0x30]!
	0x031BD964 STP X30, X21, [X31 + 0x10]
	0x031BD968 STP X20, X19, [X31 + 0x20]
	0x031BD96C ADRP X21, 0x121E000
	0x031BD970 LDRB W8, [X21 + 0xF18]
	0x031BD974 MOV V8.16B, V0.16B
	0x031BD978 MOV X19, X1
	0x031BD97C MOV X20, X0
	0x031BD980 TBNZ X8, 0x0, 0x31BD998
	0x031BD984 ADRP X0, 0xF38000
	0x031BD988 LDR X0, [X0 + 0x5A8]
	0x031BD98C BL 0x1C16CF4
	0x031BD990 MOVZ W8, 0x1
	0x031BD994 STRB W8, [X21 + 0xF18]
	0x031BD998 CBZ X20, 0x31BD9E8
	0x031BD99C ADRP X21, 0xF38000
	0x031BD9A0 LDR X21, [X21 + 0x5A8]
	0x031BD9A4 MOV X0, X20
	0x031BD9A8 MOV X1, X31
	0x031BD9AC BL 0x3C32ECC
	0x031BD9B0 LDR X8, [X21]
	0x031BD9B4 MOV X20, X0
	0x031BD9B8 LDR W9, [X8 + 0xE0]
	0x031BD9BC CBNZ W9, 0x31BD9C8
	0x031BD9C0 MOV X0, X8
	0x031BD9C4 BL 0x1C16DFC
	0x031BD9C8 MOV X0, X20
	0x031BD9CC MOV X1, X19
	0x031BD9D0 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121F000
	008 Move X22, 0xF39000
	009 Move W8, [X21+3832]
	010 Move X22, [X22+1448]
	011 Move X19, X1
	012 Move V8, V0
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3832], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.delayedCall, X0, V0, X1
	039 Return X0

Method: System.Boolean LeanIsPaused(UnityEngine.GameObject gameObject)

Disassembly:
	0x031BD9D4 LDP X30, X21, [X31 + 0x10]
	0x031BD9D8 MOV V0.16B, V8.16B
	0x031BD9DC MOV X2, X31
	0x031BD9E0 LDR V8, [X31], #0x30
	0x031BD9E4 B 0x31B1088
	0x031BD9E8 BL 0x1C16F20
	0x031BD9EC STP D9, D8, [X31 - 0x30]!
	0x031BD9F0 STP X30, X21, [X31 + 0x10]
	0x031BD9F4 STP X20, X19, [X31 + 0x20]
	0x031BD9F8 ADRP X20, 0x121E000
	0x031BD9FC ADRP X21, 0xF38000
	0x031BDA00 LDRB W8, [X20 + 0xF19]
	0x031BDA04 LDR X21, [X21 + 0x5A8]
	0x031BDA08 MOV V8.16B, V1.16B
	0x031BDA0C MOV V9.16B, V0.16B
	0x031BDA10 MOV X19, X0
	0x031BDA14 TBNZ X8, 0x0, 0x31BDA2C
	0x031BDA18 ADRP X0, 0xF38000
	0x031BDA1C LDR X0, [X0 + 0x5A8]
	0x031BDA20 BL 0x1C16CF4
	0x031BDA24 MOVZ W8, 0x1
	0x031BDA28 STRB W8, [X20 + 0xF19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x121F000
	006 Move X21, 0xF39000
	007 Move W8, [X20+3833]
	008 Move X21, [X21+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF39000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3833], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call LeanTween.isPaused, X0
	031 Return X0

Method: System.Boolean LeanIsPaused(UnityEngine.RectTransform rectTransform)

Disassembly:
	0x031BDA2C LDR X0, [X21]
	0x031BDA30 LDR W8, [X0 + 0xE0]
	0x031BDA34 CBNZ W8, 0x31BDA3C
	0x031BDA38 BL 0x1C16DFC
	0x031BDA3C MOV X0, X19
	0x031BDA40 LDP X20, X19, [X31 + 0x20]
	0x031BDA44 LDP X30, X21, [X31 + 0x10]
	0x031BDA48 MOV V0.16B, V9.16B
	0x031BDA4C MOV V1.16B, V8.16B
	0x031BDA50 MOV X1, X31
	0x031BDA54 LDP D9, D8, [X31], #0x30
	0x031BDA58 B 0x31B12E0
	0x031BDA5C STP D9, D8, [X31 - 0x30]!
	0x031BDA60 STR X30, [X31 + 0x10]
	0x031BDA64 STP X20, X19, [X31 + 0x20]
	0x031BDA68 ADRP X20, 0x121E000
	0x031BDA6C LDRB W8, [X20 + 0xF1A]
	0x031BDA70 MOV V8.16B, V1.16B
	0x031BDA74 MOV V9.16B, V0.16B
	0x031BDA78 MOV X19, X0
	0x031BDA7C TBNZ X8, 0x0, 0x31BDA94
	0x031BDA80 ADRP X0, 0xF38000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x121F000
	006 Move X21, 0xF39000
	007 Move W8, [X20+3834]
	008 Move X21, [X21+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF39000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3834], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call LeanTween.isPaused, X0
	031 Return X0

Method: System.Boolean LeanIsTweening(UnityEngine.GameObject gameObject)

Disassembly:
	0x031BDA84 LDR X0, [X0 + 0x5A8]
	0x031BDA88 BL 0x1C16CF4
	0x031BDA8C MOVZ W8, 0x1
	0x031BDA90 STRB W8, [X20 + 0xF1A]
	0x031BDA94 CBZ X19, 0x31BDAE4
	0x031BDA98 ADRP X20, 0xF38000
	0x031BDA9C LDR X20, [X20 + 0x5A8]
	0x031BDAA0 MOV X0, X19
	0x031BDAA4 MOV X1, X31
	0x031BDAA8 BL 0x3C32ECC
	0x031BDAAC LDR X8, [X20]
	0x031BDAB0 MOV X19, X0
	0x031BDAB4 LDR W9, [X8 + 0xE0]
	0x031BDAB8 CBNZ W9, 0x31BDAC4
	0x031BDABC MOV X0, X8
	0x031BDAC0 BL 0x1C16DFC
	0x031BDAC4 MOV X0, X19
	0x031BDAC8 LDP X20, X19, [X31 + 0x20]
	0x031BDACC LDR X30, [X31 + 0x10]
	0x031BDAD0 MOV V0.16B, V9.16B
	0x031BDAD4 MOV V1.16B, V8.16B
	0x031BDAD8 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x121F000
	006 Move X21, 0xF39000
	007 Move W8, [X20+3835]
	008 Move X21, [X21+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF39000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3835], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call LeanTween.isTweening, X0
	031 Return X0

Method: LTDescr LeanMove(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BDADC LDP D9, D8, [X31], #0x30
	0x031BDAE0 B 0x31B12E0
	0x031BDAE4 BL 0x1C16F20
	0x031BDAE8 STP D9, D8, [X31 - 0x30]!
	0x031BDAEC STP X30, X21, [X31 + 0x10]
	0x031BDAF0 STP X20, X19, [X31 + 0x20]
	0x031BDAF4 ADRP X20, 0x121E000
	0x031BDAF8 ADRP X21, 0xF38000
	0x031BDAFC LDRB W8, [X20 + 0xF1B]
	0x031BDB00 LDR X21, [X21 + 0x5A8]
	0x031BDB04 MOV V8.16B, V1.16B
	0x031BDB08 MOV V9.16B, V0.16B
	0x031BDB0C MOV X19, X0
	0x031BDB10 TBNZ X8, 0x0, 0x31BDB28
	0x031BDB14 ADRP X0, 0xF38000
	0x031BDB18 LDR X0, [X0 + 0x5A8]
	0x031BDB1C BL 0x1C16CF4
	0x031BDB20 MOVZ W8, 0x1
	0x031BDB24 STRB W8, [X20 + 0xF1B]
	0x031BDB28 LDR X0, [X21]
	0x031BDB2C LDR W8, [X0 + 0xE0]
	0x031BDB30 CBNZ W8, 0x31BDB38
	0x031BDB34 BL 0x1C16DFC
	0x031BDB38 MOV X0, X19
	0x031BDB3C LDP X20, X19, [X31 + 0x20]
	0x031BDB40 LDP X30, X21, [X31 + 0x10]
	0x031BDB44 MOV V0.16B, V9.16B
	0x031BDB48 MOV V1.16B, V8.16B
	0x031BDB4C MOV X1, X31
	0x031BDB50 LDP D9, D8, [X31], #0x30
	0x031BDB54 B 0x31B3024
	0x031BDB58 STP D9, D8, [X31 - 0x30]!
	0x031BDB5C STP X30, X21, [X31 + 0x10]
	0x031BDB60 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121F000
	010 Move X20, 0xF39000
	011 Move W8, [X21+3836]
	012 Move X20, [X20+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF39000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3836], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move V2, V9
	034 Move V3, V8
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move V0, V11
	042 Move V1, V10
	043 Move X1, X31
	044 Move D11, [X31+64]
	045 Move D10, [X31+72]
	046 Call LeanTween.move, X0, X1, V0
	047 Return X0

Method: LTDescr LeanMove(UnityEngine.Transform transform, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BDB64 ADRP X20, 0x121E000
	0x031BDB68 ADRP X21, 0xF38000
	0x031BDB6C LDRB W8, [X20 + 0xF1C]
	0x031BDB70 LDR X21, [X21 + 0x5A8]
	0x031BDB74 MOV V8.16B, V1.16B
	0x031BDB78 MOV V9.16B, V0.16B
	0x031BDB7C MOV X19, X0
	0x031BDB80 TBNZ X8, 0x0, 0x31BDB98
	0x031BDB84 ADRP X0, 0xF38000
	0x031BDB88 LDR X0, [X0 + 0x5A8]
	0x031BDB8C BL 0x1C16CF4
	0x031BDB90 MOVZ W8, 0x1
	0x031BDB94 STRB W8, [X20 + 0xF1C]
	0x031BDB98 LDR X0, [X21]
	0x031BDB9C LDR W8, [X0 + 0xE0]
	0x031BDBA0 CBNZ W8, 0x31BDBA8
	0x031BDBA4 BL 0x1C16DFC
	0x031BDBA8 MOV X0, X19
	0x031BDBAC LDP X20, X19, [X31 + 0x20]
	0x031BDBB0 LDP X30, X21, [X31 + 0x10]
	0x031BDBB4 MOV V0.16B, V9.16B
	0x031BDBB8 MOV V1.16B, V8.16B
	0x031BDBBC MOV X1, X31
	0x031BDBC0 LDP D9, D8, [X31], #0x30
	0x031BDBC4 B 0x31B136C
	0x031BDBC8 STP D9, D8, [X31 - 0x30]!
	0x031BDBCC STR X30, [X31 + 0x10]
	0x031BDBD0 STP X20, X19, [X31 + 0x20]
	0x031BDBD4 ADRP X20, 0x121E000
	0x031BDBD8 LDRB W8, [X20 + 0xF1D]
	0x031BDBDC MOV V8.16B, V1.16B
	0x031BDBE0 MOV V9.16B, V0.16B
	0x031BDBE4 MOV X19, X0
	0x031BDBE8 TBNZ X8, 0x0, 0x31BDC00
	0x031BDBEC ADRP X0, 0xF38000
	0x031BDBF0 LDR X0, [X0 + 0x5A8]
	0x031BDBF4 BL 0x1C16CF4
	0x031BDBF8 MOVZ W8, 0x1
	0x031BDBFC STRB W8, [X20 + 0xF1D]
	0x031BDC00 CBZ X19, 0x31BDC50
	0x031BDC04 ADRP X20, 0xF38000

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x121F000
	009 Move W8, [X20+3837]
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF39000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3837], W8
	024 Compare X19, 0
	025 JumpIfEqual {53}
	026 Move X20, 0xF39000
	027 Move X20, [X20+1448]
	028 Move X0, X19
	029 Move X1, X31
	030 Call Component.get_gameObject, X0
	031 Move X8, [X20]
	032 Move X19, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 Move V0, V11
	047 Move V1, V10
	048 Move X1, X31
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.move, X0, X1, V0
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr LeanMove(UnityEngine.RectTransform rectTransform, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BDC08 LDR X20, [X20 + 0x5A8]
	0x031BDC0C MOV X0, X19
	0x031BDC10 MOV X1, X31
	0x031BDC14 BL 0x3C32ECC
	0x031BDC18 LDR X8, [X20]
	0x031BDC1C MOV X19, X0
	0x031BDC20 LDR W9, [X8 + 0xE0]
	0x031BDC24 CBNZ W9, 0x31BDC30
	0x031BDC28 MOV X0, X8
	0x031BDC2C BL 0x1C16DFC
	0x031BDC30 MOV X0, X19
	0x031BDC34 LDP X20, X19, [X31 + 0x20]
	0x031BDC38 LDR X30, [X31 + 0x10]
	0x031BDC3C MOV V0.16B, V9.16B
	0x031BDC40 MOV V1.16B, V8.16B
	0x031BDC44 MOV X1, X31
	0x031BDC48 LDP D9, D8, [X31], #0x30
	0x031BDC4C B 0x31B136C
	0x031BDC50 BL 0x1C16F20
	0x031BDC54 STP D9, D8, [X31 - 0x30]!
	0x031BDC58 STP X30, X21, [X31 + 0x10]
	0x031BDC5C STP X20, X19, [X31 + 0x20]
	0x031BDC60 ADRP X20, 0x121E000
	0x031BDC64 ADRP X21, 0xF38000
	0x031BDC68 LDRB W8, [X20 + 0xF1E]
	0x031BDC6C LDR X21, [X21 + 0x5A8]
	0x031BDC70 MOV V8.16B, V1.16B
	0x031BDC74 MOV V9.16B, V0.16B
	0x031BDC78 MOV X19, X0
	0x031BDC7C TBNZ X8, 0x0, 0x31BDC94
	0x031BDC80 ADRP X0, 0xF38000
	0x031BDC84 LDR X0, [X0 + 0x5A8]
	0x031BDC88 BL 0x1C16CF4
	0x031BDC8C MOVZ W8, 0x1

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121F000
	010 Move X20, 0xF39000
	011 Move W8, [X21+3838]
	012 Move X20, [X20+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF39000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3838], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move V2, V9
	034 Move V3, V8
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move V0, V11
	042 Move V1, V10
	043 Move X1, X31
	044 Move D11, [X31+64]
	045 Move D10, [X31+72]
	046 Call LeanTween.move, X0, X1, V0
	047 Return X0

Method: LTDescr LeanMove(UnityEngine.GameObject gameObject, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031BDC90 STRB W8, [X20 + 0xF1E]
	0x031BDC94 LDR X0, [X21]
	0x031BDC98 LDR W8, [X0 + 0xE0]
	0x031BDC9C CBNZ W8, 0x31BDCA4
	0x031BDCA0 BL 0x1C16DFC
	0x031BDCA4 MOV X0, X19
	0x031BDCA8 LDP X20, X19, [X31 + 0x20]
	0x031BDCAC LDP X30, X21, [X31 + 0x10]
	0x031BDCB0 MOV V0.16B, V9.16B
	0x031BDCB4 MOV V1.16B, V8.16B
	0x031BDCB8 MOV X1, X31
	0x031BDCBC LDP D9, D8, [X31], #0x30
	0x031BDCC0 B 0x31B30D8
	0x031BDCC4 STP D9, D8, [X31 - 0x30]!
	0x031BDCC8 STP X30, X21, [X31 + 0x10]
	0x031BDCCC STP X20, X19, [X31 + 0x20]
	0x031BDCD0 ADRP X20, 0x121E000
	0x031BDCD4 ADRP X21, 0xF38000
	0x031BDCD8 LDRB W8, [X20 + 0xF1F]
	0x031BDCDC LDR X21, [X21 + 0x5A8]
	0x031BDCE0 MOV V8.16B, V1.16B
	0x031BDCE4 MOV V9.16B, V0.16B
	0x031BDCE8 MOV X19, X0
	0x031BDCEC TBNZ X8, 0x0, 0x31BDD04
	0x031BDCF0 ADRP X0, 0xF38000
	0x031BDCF4 LDR X0, [X0 + 0x5A8]
	0x031BDCF8 BL 0x1C16CF4
	0x031BDCFC MOVZ W8, 0x1
	0x031BDD00 STRB W8, [X20 + 0xF1F]
	0x031BDD04 LDR X0, [X21]
	0x031BDD08 LDR W8, [X0 + 0xE0]
	0x031BDD0C CBNZ W8, 0x31BDD14

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x121F000
	009 Move X20, 0xF39000
	010 Move W8, [X21+3839]
	011 Move X20, [X20+1448]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF39000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3839], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move V1, V9
	032 Move V2, V8
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move V0, V10
	040 Move X1, X31
	041 Move V10, [X31+64]
	042 Call LeanTween.move, X0, X1, V0
	043 Return X0

Method: LTDescr LeanMove(UnityEngine.Transform transform, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031BDD10 BL 0x1C16DFC
	0x031BDD14 MOV X0, X19
	0x031BDD18 LDP X20, X19, [X31 + 0x20]
	0x031BDD1C LDP X30, X21, [X31 + 0x10]
	0x031BDD20 MOV V0.16B, V9.16B
	0x031BDD24 MOV V1.16B, V8.16B
	0x031BDD28 MOV X1, X31
	0x031BDD2C LDP D9, D8, [X31], #0x30
	0x031BDD30 B 0x31B13F8
	0x031BDD34 STP D9, D8, [X31 - 0x30]!
	0x031BDD38 STR X30, [X31 + 0x10]
	0x031BDD3C STP X20, X19, [X31 + 0x20]
	0x031BDD40 ADRP X20, 0x121E000
	0x031BDD44 LDRB W8, [X20 + 0xF20]
	0x031BDD48 MOV V8.16B, V1.16B
	0x031BDD4C MOV V9.16B, V0.16B
	0x031BDD50 MOV X19, X0
	0x031BDD54 TBNZ X8, 0x0, 0x31BDD6C
	0x031BDD58 ADRP X0, 0xF38000
	0x031BDD5C LDR X0, [X0 + 0x5A8]
	0x031BDD60 BL 0x1C16CF4
	0x031BDD64 MOVZ W8, 0x1
	0x031BDD68 STRB W8, [X20 + 0xF20]
	0x031BDD6C CBZ X19, 0x31BDDBC
	0x031BDD70 ADRP X20, 0xF38000
	0x031BDD74 LDR X20, [X20 + 0x5A8]
	0x031BDD78 MOV X0, X19
	0x031BDD7C MOV X1, X31
	0x031BDD80 BL 0x3C32ECC
	0x031BDD84 LDR X8, [X20]
	0x031BDD88 MOV X19, X0
	0x031BDD8C LDR W9, [X8 + 0xE0]
	0x031BDD90 CBNZ W9, 0x31BDD9C
	0x031BDD94 MOV X0, X8
	0x031BDD98 BL 0x1C16DFC
	0x031BDD9C MOV X0, X19
	0x031BDDA0 LDP X20, X19, [X31 + 0x20]
	0x031BDDA4 LDR X30, [X31 + 0x10]
	0x031BDDA8 MOV V0.16B, V9.16B

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121F000
	008 Move W8, [X20+3840]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0xF39000
	018 Move X0, [X0+1448]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+3840], W8
	022 Compare X19, 0
	023 JumpIfEqual {49}
	024 Move X20, 0xF39000
	025 Move X20, [X20+1448]
	026 Move X0, X19
	027 Move X1, X31
	028 Call Component.get_gameObject, X0
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move V1, V9
	038 Move V2, V8
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+24]
	042 Move D9, [X31+8]
	043 Move D8, [X31+16]
	044 Move V0, V10
	045 Move X1, X31
	046 Move V10, [X31+48]
	047 Call LeanTween.move, X0, X1, V0
	048 Return X0
	049 Call 0x1C17F20

Method: LTDescr LeanMove(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031BDDAC MOV V1.16B, V8.16B
	0x031BDDB0 MOV X1, X31
	0x031BDDB4 LDP D9, D8, [X31], #0x30
	0x031BDDB8 B 0x31B13F8
	0x031BDDBC BL 0x1C16F20
	0x031BDDC0 STP D9, D8, [X31 - 0x30]!
	0x031BDDC4 STP X30, X21, [X31 + 0x10]
	0x031BDDC8 STP X20, X19, [X31 + 0x20]
	0x031BDDCC ADRP X20, 0x121E000
	0x031BDDD0 ADRP X21, 0xF38000
	0x031BDDD4 LDRB W8, [X20 + 0xF21]
	0x031BDDD8 LDR X21, [X21 + 0x5A8]
	0x031BDDDC MOV V8.16B, V1.16B
	0x031BDDE0 MOV V9.16B, V0.16B
	0x031BDDE4 MOV X19, X0
	0x031BDDE8 TBNZ X8, 0x0, 0x31BDE00
	0x031BDDEC ADRP X0, 0xF38000
	0x031BDDF0 LDR X0, [X0 + 0x5A8]
	0x031BDDF4 BL 0x1C16CF4
	0x031BDDF8 MOVZ W8, 0x1
	0x031BDDFC STRB W8, [X20 + 0xF21]
	0x031BDE00 LDR X0, [X21]
	0x031BDE04 LDR W8, [X0 + 0xE0]
	0x031BDE08 CBNZ W8, 0x31BDE10
	0x031BDE0C BL 0x1C16DFC
	0x031BDE10 MOV X0, X19
	0x031BDE14 LDP X20, X19, [X31 + 0x20]
	0x031BDE18 LDP X30, X21, [X31 + 0x10]
	0x031BDE1C MOV V0.16B, V9.16B
	0x031BDE20 MOV V1.16B, V8.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121F000
	008 Move X22, 0xF39000
	009 Move W8, [X21+3841]
	010 Move X22, [X22+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3841], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.move, X0, X1, V0
	039 Return X0

Method: LTDescr LeanMove(UnityEngine.GameObject gameObject, LTBezierPath to, System.Single time)

Disassembly:
	0x031BDE24 MOV X1, X31
	0x031BDE28 LDP D9, D8, [X31], #0x30
	0x031BDE2C B 0x31B318C
	0x031BDE30 STP X30, X21, [X31 - 0x20]!
	0x031BDE34 STP X20, X19, [X31 + 0x10]
	0x031BDE38 ADRP X20, 0x121E000
	0x031BDE3C ADRP X21, 0xF38000
	0x031BDE40 LDRB W8, [X20 + 0xF22]
	0x031BDE44 LDR X21, [X21 + 0x5A8]
	0x031BDE48 MOV X19, X0
	0x031BDE4C TBNZ X8, 0x0, 0x31BDE64
	0x031BDE50 ADRP X0, 0xF38000
	0x031BDE54 LDR X0, [X0 + 0x5A8]
	0x031BDE58 BL 0x1C16CF4
	0x031BDE5C MOVZ W8, 0x1
	0x031BDE60 STRB W8, [X20 + 0xF22]
	0x031BDE64 LDR X0, [X21]
	0x031BDE68 LDR W8, [X0 + 0xE0]
	0x031BDE6C CBNZ W8, 0x31BDE74
	0x031BDE70 BL 0x1C16DFC
	0x031BDE74 MOV X0, X19
	0x031BDE78 LDP X20, X19, [X31 + 0x10]
	0x031BDE7C MOV X1, X31
	0x031BDE80 LDP X30, X21, [X31], #0x20
	0x031BDE84 B 0x31ADF68
	0x031BDE88 STR X30, [X31 - 0x30]!
	0x031BDE8C STP X22, X21, [X31 + 0x10]
	0x031BDE90 STP X20, X19, [X31 + 0x20]
	0x031BDE94 ADRP X21, 0x121E000
	0x031BDE98 ADRP X22, 0xF38000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121F000
	008 Move X22, 0xF39000
	009 Move W8, [X21+3842]
	010 Move X22, [X22+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3842], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.move, X0, X1, V0
	039 Return X0

Method: LTDescr LeanMove(UnityEngine.GameObject gameObject, LTSpline to, System.Single time)

Disassembly:
	0x031BDE9C LDRB W8, [X21 + 0xF23]
	0x031BDEA0 LDR X22, [X22 + 0x5A8]
	0x031BDEA4 MOV X19, X1
	0x031BDEA8 MOV X20, X0
	0x031BDEAC TBNZ X8, 0x0, 0x31BDEC4
	0x031BDEB0 ADRP X0, 0xF38000
	0x031BDEB4 LDR X0, [X0 + 0x5A8]
	0x031BDEB8 BL 0x1C16CF4
	0x031BDEBC MOVZ W8, 0x1
	0x031BDEC0 STRB W8, [X21 + 0xF23]
	0x031BDEC4 LDR X0, [X22]
	0x031BDEC8 LDR W8, [X0 + 0xE0]
	0x031BDECC CBNZ W8, 0x31BDED4
	0x031BDED0 BL 0x1C16DFC
	0x031BDED4 MOV X0, X20
	0x031BDED8 MOV X1, X19
	0x031BDEDC LDP X20, X19, [X31 + 0x20]
	0x031BDEE0 LDP X22, X21, [X31 + 0x10]
	0x031BDEE4 MOV X2, X31
	0x031BDEE8 LDR X30, [X31], #0x30
	0x031BDEEC B 0x31AF928
	0x031BDEF0 STP X30, X21, [X31 - 0x20]!
	0x031BDEF4 STP X20, X19, [X31 + 0x10]
	0x031BDEF8 ADRP X20, 0x121E000
	0x031BDEFC ADRP X21, 0xF38000
	0x031BDF00 LDRB W8, [X20 + 0xF24]
	0x031BDF04 LDR X21, [X21 + 0x5A8]
	0x031BDF08 MOV X19, X0
	0x031BDF0C TBNZ X8, 0x0, 0x31BDF24
	0x031BDF10 ADRP X0, 0xF38000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121F000
	008 Move X22, 0xF39000
	009 Move W8, [X21+3843]
	010 Move X22, [X22+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF39000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3843], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.move, X0, X1, V0
	039 Return X0

Method: LTDescr LeanMove(UnityEngine.Transform transform, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031BDF14 LDR X0, [X0 + 0x5A8]
	0x031BDF18 BL 0x1C16CF4
	0x031BDF1C MOVZ W8, 0x1
	0x031BDF20 STRB W8, [X20 + 0xF24]
	0x031BDF24 LDR X0, [X21]
	0x031BDF28 LDR W8, [X0 + 0xE0]
	0x031BDF2C CBNZ W8, 0x31BDF34
	0x031BDF30 BL 0x1C16DFC
	0x031BDF34 MOV X0, X19
	0x031BDF38 LDP X20, X19, [X31 + 0x10]
	0x031BDF3C MOV X1, X31
	0x031BDF40 LDP X30, X21, [X31], #0x20
	0x031BDF44 B 0x31AE37C
	0x031BDF48 STP D11, D10, [X31 - 0x40]!
	0x031BDF4C STP D9, D8, [X31 + 0x10]
	0x031BDF50 STP X30, X21, [X31 + 0x20]
	0x031BDF54 STP X20, X19, [X31 + 0x30]
	0x031BDF58 ADRP X21, 0x121E000
	0x031BDF5C ADRP X20, 0xF38000
	0x031BDF60 LDRB W8, [X21 + 0xF25]
	0x031BDF64 LDR X20, [X20 + 0x5A8]
	0x031BDF68 MOV V8.16B, V3.16B
	0x031BDF6C MOV V9.16B, V2.16B
	0x031BDF70 MOV V10.16B, V1.16B
	0x031BDF74 MOV V11.16B, V0.16B
	0x031BDF78 MOV X19, X0
	0x031BDF7C TBNZ X8, 0x0, 0x31BDF94
	0x031BDF80 ADRP X0, 0xF38000
	0x031BDF84 LDR X0, [X0 + 0x5A8]
	0x031BDF88 BL 0x1C16CF4
	0x031BDF8C MOVZ W8, 0x1
	0x031BDF90 STRB W8, [X21 + 0xF25]
	0x031BDF94 LDR X0, [X20]
	0x031BDF98 LDR W8, [X0 + 0xE0]
	0x031BDF9C CBNZ W8, 0x31BDFA4

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121F000
	007 Move W8, [X21+3844]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF39000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3844], W8
	020 Compare X20, 0
	021 JumpIfEqual {45}
	022 Move X21, 0xF39000
	023 Move X21, [X21+1448]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X21]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V0, V8
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call LeanTween.move, X0, X1, V0
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMove(UnityEngine.Transform transform, LTBezierPath to, System.Single time)

Disassembly:
	0x031BDFA0 BL 0x1C16DFC
	0x031BDFA4 MOV X0, X19
	0x031BDFA8 MOV V2.16B, V9.16B
	0x031BDFAC MOV V3.16B, V8.16B
	0x031BDFB0 LDP X20, X19, [X31 + 0x30]
	0x031BDFB4 LDP X30, X21, [X31 + 0x20]
	0x031BDFB8 LDP D9, D8, [X31 + 0x10]
	0x031BDFBC MOV V0.16B, V11.16B
	0x031BDFC0 MOV V1.16B, V10.16B
	0x031BDFC4 MOV X1, X31
	0x031BDFC8 LDP D11, D10, [X31], #0x40
	0x031BDFCC B 0x31B1A4C
	0x031BDFD0 STP D11, D10, [X31 - 0x40]!
	0x031BDFD4 STP D9, D8, [X31 + 0x10]
	0x031BDFD8 STR X30, [X31 + 0x20]
	0x031BDFDC STP X20, X19, [X31 + 0x30]
	0x031BDFE0 ADRP X20, 0x121E000
	0x031BDFE4 LDRB W8, [X20 + 0xF26]
	0x031BDFE8 MOV V8.16B, V3.16B
	0x031BDFEC MOV V9.16B, V2.16B
	0x031BDFF0 MOV V10.16B, V1.16B
	0x031BDFF4 MOV V11.16B, V0.16B
	0x031BDFF8 MOV X19, X0
	0x031BDFFC TBNZ X8, 0x0, 0x31BE014
	0x031BE000 ADRP X0, 0xF37000
	0x031BE004 LDR X0, [X0 + 0x5A8]
	0x031BE008 BL 0x1C16CF4
	0x031BE00C MOVZ W8, 0x1
	0x031BE010 STRB W8, [X20 + 0xF26]
	0x031BE014 CBZ X19, 0x31BE070
	0x031BE018 ADRP X20, 0xF37000
	0x031BE01C LDR X20, [X20 + 0x5A8]
	0x031BE020 MOV X0, X19
	0x031BE024 MOV X1, X31
	0x031BE028 BL 0x3C32ECC

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121F000
	007 Move W8, [X21+3845]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF39000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3845], W8
	020 Compare X20, 0
	021 JumpIfEqual {45}
	022 Move X21, 0xF39000
	023 Move X21, [X21+1448]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X21]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V0, V8
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call LeanTween.move, X0, X1, V0
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMove(UnityEngine.Transform transform, LTSpline to, System.Single time)

Disassembly:
	0x031BE02C LDR X8, [X20]
	0x031BE030 MOV X19, X0
	0x031BE034 LDR W9, [X8 + 0xE0]
	0x031BE038 CBNZ W9, 0x31BE044
	0x031BE03C MOV X0, X8
	0x031BE040 BL 0x1C16DFC
	0x031BE044 MOV X0, X19
	0x031BE048 MOV V2.16B, V9.16B
	0x031BE04C MOV V3.16B, V8.16B
	0x031BE050 LDP X20, X19, [X31 + 0x30]
	0x031BE054 LDR X30, [X31 + 0x20]
	0x031BE058 LDP D9, D8, [X31 + 0x10]
	0x031BE05C MOV V0.16B, V11.16B
	0x031BE060 MOV V1.16B, V10.16B
	0x031BE064 MOV X1, X31
	0x031BE068 LDP D11, D10, [X31], #0x40
	0x031BE06C B 0x31B1A4C
	0x031BE070 BL 0x1C16F20
	0x031BE074 STP D11, D10, [X31 - 0x40]!
	0x031BE078 STP D9, D8, [X31 + 0x10]
	0x031BE07C STP X30, X21, [X31 + 0x20]
	0x031BE080 STP X20, X19, [X31 + 0x30]
	0x031BE084 ADRP X21, 0x121D000
	0x031BE088 ADRP X20, 0xF37000
	0x031BE08C LDRB W8, [X21 + 0xF27]
	0x031BE090 LDR X20, [X20 + 0x5A8]
	0x031BE094 MOV V8.16B, V3.16B
	0x031BE098 MOV V9.16B, V2.16B
	0x031BE09C MOV V10.16B, V1.16B
	0x031BE0A0 MOV V11.16B, V0.16B
	0x031BE0A4 MOV X19, X0
	0x031BE0A8 TBNZ X8, 0x0, 0x31BE0C0
	0x031BE0AC ADRP X0, 0xF37000
	0x031BE0B0 LDR X0, [X0 + 0x5A8]
	0x031BE0B4 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121E000
	007 Move W8, [X21+3846]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3846], W8
	020 Compare X20, 0
	021 JumpIfEqual {45}
	022 Move X21, 0xF38000
	023 Move X21, [X21+1448]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X21]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V0, V8
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call LeanTween.move, X0, X1, V0
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BE0B8 MOVZ W8, 0x1
	0x031BE0BC STRB W8, [X21 + 0xF27]
	0x031BE0C0 LDR X0, [X20]
	0x031BE0C4 LDR W8, [X0 + 0xE0]
	0x031BE0C8 CBNZ W8, 0x31BE0D0
	0x031BE0CC BL 0x1C16DFC
	0x031BE0D0 MOV X0, X19
	0x031BE0D4 MOV V2.16B, V9.16B
	0x031BE0D8 MOV V3.16B, V8.16B
	0x031BE0DC LDP X20, X19, [X31 + 0x30]
	0x031BE0E0 LDP X30, X21, [X31 + 0x20]
	0x031BE0E4 LDP D9, D8, [X31 + 0x10]
	0x031BE0E8 MOV V0.16B, V11.16B
	0x031BE0EC MOV V1.16B, V10.16B
	0x031BE0F0 MOV X1, X31
	0x031BE0F4 LDP D11, D10, [X31], #0x40
	0x031BE0F8 B 0x31B3340
	0x031BE0FC STR D12, [X31 - 0x50]!
	0x031BE100 STP D11, D10, [X31 + 0x10]
	0x031BE104 STP D9, D8, [X31 + 0x20]
	0x031BE108 STP X30, X21, [X31 + 0x30]
	0x031BE10C STP X20, X19, [X31 + 0x40]
	0x031BE110 ADRP X21, 0x121D000
	0x031BE114 ADRP X20, 0xF37000
	0x031BE118 LDRB W8, [X21 + 0xF28]
	0x031BE11C LDR X20, [X20 + 0x5A8]
	0x031BE120 MOV V8.16B, V4.16B
	0x031BE124 MOV V9.16B, V3.16B
	0x031BE128 MOV V10.16B, V2.16B
	0x031BE12C MOV V11.16B, V1.16B
	0x031BE130 MOV V12.16B, V0.16B
	0x031BE134 MOV X19, X0
	0x031BE138 TBNZ X8, 0x0, 0x31BE150
	0x031BE13C ADRP X0, 0xF37000

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121E000
	010 Move X20, 0xF38000
	011 Move W8, [X21+3847]
	012 Move X20, [X20+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF38000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3847], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move V2, V9
	034 Move V3, V8
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move V0, V11
	042 Move V1, V10
	043 Move X1, X31
	044 Move D11, [X31+64]
	045 Move D10, [X31+72]
	046 Call LeanTween.moveLocal, X0, X1, V0
	047 Return X0

Method: LTDescr LeanMoveLocal(UnityEngine.GameObject gameObject, LTBezierPath to, System.Single time)

Disassembly:
	0x031BE140 LDR X0, [X0 + 0x5A8]
	0x031BE144 BL 0x1C16CF4
	0x031BE148 MOVZ W8, 0x1
	0x031BE14C STRB W8, [X21 + 0xF28]
	0x031BE150 LDR X0, [X20]
	0x031BE154 LDR W8, [X0 + 0xE0]
	0x031BE158 CBNZ W8, 0x31BE160
	0x031BE15C BL 0x1C16DFC
	0x031BE160 MOV X0, X19
	0x031BE164 MOV V1.16B, V11.16B
	0x031BE168 MOV V2.16B, V10.16B
	0x031BE16C MOV V3.16B, V9.16B
	0x031BE170 MOV V4.16B, V8.16B
	0x031BE174 LDP X20, X19, [X31 + 0x40]
	0x031BE178 LDP X30, X21, [X31 + 0x30]
	0x031BE17C LDP D9, D8, [X31 + 0x20]
	0x031BE180 LDP D11, D10, [X31 + 0x10]
	0x031BE184 MOV V0.16B, V12.16B
	0x031BE188 MOV X1, X31
	0x031BE18C LDR V12, [X31], #0x50
	0x031BE190 B 0x31B1DCC
	0x031BE194 STR D12, [X31 - 0x40]!
	0x031BE198 STP D11, D10, [X31 + 0x8]
	0x031BE19C STP D9, D8, [X31 + 0x18]
	0x031BE1A0 STR X30, [X31 + 0x28]
	0x031BE1A4 STP X20, X19, [X31 + 0x30]
	0x031BE1A8 ADRP X20, 0x121D000
	0x031BE1AC LDRB W8, [X20 + 0xF29]
	0x031BE1B0 MOV V8.16B, V4.16B
	0x031BE1B4 MOV V9.16B, V3.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121E000
	008 Move X22, 0xF38000
	009 Move W8, [X21+3848]
	010 Move X22, [X22+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3848], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.moveLocal, X0, X1, V0
	039 Return X0

Method: LTDescr LeanMoveLocal(UnityEngine.GameObject gameObject, LTSpline to, System.Single time)

Disassembly:
	0x031BE1B8 MOV V10.16B, V2.16B
	0x031BE1BC MOV V11.16B, V1.16B
	0x031BE1C0 MOV V12.16B, V0.16B
	0x031BE1C4 MOV X19, X0
	0x031BE1C8 TBNZ X8, 0x0, 0x31BE1E0
	0x031BE1CC ADRP X0, 0xF37000
	0x031BE1D0 LDR X0, [X0 + 0x5A8]
	0x031BE1D4 BL 0x1C16CF4
	0x031BE1D8 MOVZ W8, 0x1
	0x031BE1DC STRB W8, [X20 + 0xF29]
	0x031BE1E0 CBZ X19, 0x31BE244
	0x031BE1E4 ADRP X20, 0xF37000
	0x031BE1E8 LDR X20, [X20 + 0x5A8]
	0x031BE1EC MOV X0, X19
	0x031BE1F0 MOV X1, X31
	0x031BE1F4 BL 0x3C32ECC
	0x031BE1F8 LDR X8, [X20]
	0x031BE1FC MOV X19, X0
	0x031BE200 LDR W9, [X8 + 0xE0]
	0x031BE204 CBNZ W9, 0x31BE210
	0x031BE208 MOV X0, X8
	0x031BE20C BL 0x1C16DFC
	0x031BE210 MOV X0, X19
	0x031BE214 MOV V1.16B, V11.16B
	0x031BE218 MOV V2.16B, V10.16B
	0x031BE21C MOV V3.16B, V9.16B
	0x031BE220 MOV V4.16B, V8.16B
	0x031BE224 LDP X20, X19, [X31 + 0x30]
	0x031BE228 LDR X30, [X31 + 0x28]
	0x031BE22C LDP D9, D8, [X31 + 0x18]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121E000
	008 Move X22, 0xF38000
	009 Move W8, [X21+3849]
	010 Move X22, [X22+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3849], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.moveLocal, X0, X1, V0
	039 Return X0

Method: LTDescr LeanMoveLocal(UnityEngine.Transform transform, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BE230 LDP D11, D10, [X31 + 0x8]
	0x031BE234 MOV V0.16B, V12.16B
	0x031BE238 MOV X1, X31
	0x031BE23C LDR V12, [X31], #0x40
	0x031BE240 B 0x31B1DCC
	0x031BE244 BL 0x1C16F20
	0x031BE248 STR D12, [X31 - 0x50]!
	0x031BE24C STP D11, D10, [X31 + 0x10]
	0x031BE250 STP D9, D8, [X31 + 0x20]
	0x031BE254 STP X30, X21, [X31 + 0x30]
	0x031BE258 STP X20, X19, [X31 + 0x40]
	0x031BE25C ADRP X21, 0x121D000
	0x031BE260 ADRP X20, 0xF37000
	0x031BE264 LDRB W8, [X21 + 0xF2A]
	0x031BE268 LDR X20, [X20 + 0x5A8]
	0x031BE26C MOV V8.16B, V4.16B
	0x031BE270 MOV V9.16B, V3.16B
	0x031BE274 MOV V10.16B, V2.16B
	0x031BE278 MOV V11.16B, V1.16B
	0x031BE27C MOV V12.16B, V0.16B
	0x031BE280 MOV X19, X0
	0x031BE284 TBNZ X8, 0x0, 0x31BE29C
	0x031BE288 ADRP X0, 0xF37000
	0x031BE28C LDR X0, [X0 + 0x5A8]
	0x031BE290 BL 0x1C16CF4
	0x031BE294 MOVZ W8, 0x1
	0x031BE298 STRB W8, [X21 + 0xF2A]
	0x031BE29C LDR X0, [X20]
	0x031BE2A0 LDR W8, [X0 + 0xE0]
	0x031BE2A4 CBNZ W8, 0x31BE2AC
	0x031BE2A8 BL 0x1C16DFC
	0x031BE2AC MOV X0, X19
	0x031BE2B0 MOV V1.16B, V11.16B
	0x031BE2B4 MOV V2.16B, V10.16B
	0x031BE2B8 MOV V3.16B, V9.16B
	0x031BE2BC MOV V4.16B, V8.16B
	0x031BE2C0 LDP X20, X19, [X31 + 0x40]
	0x031BE2C4 LDP X30, X21, [X31 + 0x30]
	0x031BE2C8 LDP D9, D8, [X31 + 0x20]
	0x031BE2CC LDP D11, D10, [X31 + 0x10]
	0x031BE2D0 MOV V0.16B, V12.16B

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x121E000
	009 Move W8, [X20+3850]
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF38000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3850], W8
	024 Compare X19, 0
	025 JumpIfEqual {53}
	026 Move X20, 0xF38000
	027 Move X20, [X20+1448]
	028 Move X0, X19
	029 Move X1, X31
	030 Call Component.get_gameObject, X0
	031 Move X8, [X20]
	032 Move X19, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 Move V0, V11
	047 Move V1, V10
	048 Move X1, X31
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.moveLocal, X0, X1, V0
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr LeanMoveLocal(UnityEngine.Transform transform, LTBezierPath to, System.Single time)

Disassembly:
	0x031BE2D4 MOV X1, X31
	0x031BE2D8 LDR V12, [X31], #0x50
	0x031BE2DC B 0x31B3450
	0x031BE2E0 STR D12, [X31 - 0x50]!
	0x031BE2E4 STP D11, D10, [X31 + 0x10]
	0x031BE2E8 STP D9, D8, [X31 + 0x20]
	0x031BE2EC STP X30, X21, [X31 + 0x30]
	0x031BE2F0 STP X20, X19, [X31 + 0x40]
	0x031BE2F4 ADRP X21, 0x121D000
	0x031BE2F8 ADRP X20, 0xF37000
	0x031BE2FC LDRB W8, [X21 + 0xF2B]
	0x031BE300 LDR X20, [X20 + 0x5A8]
	0x031BE304 MOV V8.16B, V4.16B
	0x031BE308 MOV V9.16B, V3.16B
	0x031BE30C MOV V10.16B, V2.16B
	0x031BE310 MOV V11.16B, V1.16B
	0x031BE314 MOV V12.16B, V0.16B
	0x031BE318 MOV X19, X0
	0x031BE31C TBNZ X8, 0x0, 0x31BE334
	0x031BE320 ADRP X0, 0xF37000
	0x031BE324 LDR X0, [X0 + 0x5A8]
	0x031BE328 BL 0x1C16CF4
	0x031BE32C MOVZ W8, 0x1
	0x031BE330 STRB W8, [X21 + 0xF2B]
	0x031BE334 LDR X0, [X20]
	0x031BE338 LDR W8, [X0 + 0xE0]
	0x031BE33C CBNZ W8, 0x31BE344
	0x031BE340 BL 0x1C16DFC
	0x031BE344 MOV X0, X19
	0x031BE348 MOV V1.16B, V11.16B
	0x031BE34C MOV V2.16B, V10.16B
	0x031BE350 MOV V3.16B, V9.16B
	0x031BE354 MOV V4.16B, V8.16B
	0x031BE358 LDP X20, X19, [X31 + 0x40]
	0x031BE35C LDP X30, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121E000
	007 Move W8, [X21+3851]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3851], W8
	020 Compare X20, 0
	021 JumpIfEqual {45}
	022 Move X21, 0xF38000
	023 Move X21, [X21+1448]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X21]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V0, V8
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call LeanTween.moveLocal, X0, X1, V0
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveLocal(UnityEngine.Transform transform, LTSpline to, System.Single time)

Disassembly:
	0x031BE360 LDP D9, D8, [X31 + 0x20]
	0x031BE364 LDP D11, D10, [X31 + 0x10]
	0x031BE368 MOV V0.16B, V12.16B
	0x031BE36C MOV X1, X31
	0x031BE370 LDR V12, [X31], #0x50
	0x031BE374 B 0x31B1E8C
	0x031BE378 STR D12, [X31 - 0x40]!
	0x031BE37C STP D11, D10, [X31 + 0x8]
	0x031BE380 STP D9, D8, [X31 + 0x18]
	0x031BE384 STR X30, [X31 + 0x28]
	0x031BE388 STP X20, X19, [X31 + 0x30]
	0x031BE38C ADRP X20, 0x121D000
	0x031BE390 LDRB W8, [X20 + 0xF2C]
	0x031BE394 MOV V8.16B, V4.16B
	0x031BE398 MOV V9.16B, V3.16B
	0x031BE39C MOV V10.16B, V2.16B
	0x031BE3A0 MOV V11.16B, V1.16B
	0x031BE3A4 MOV V12.16B, V0.16B
	0x031BE3A8 MOV X19, X0
	0x031BE3AC TBNZ X8, 0x0, 0x31BE3C4
	0x031BE3B0 ADRP X0, 0xF37000
	0x031BE3B4 LDR X0, [X0 + 0x5A8]
	0x031BE3B8 BL 0x1C16CF4
	0x031BE3BC MOVZ W8, 0x1
	0x031BE3C0 STRB W8, [X20 + 0xF2C]
	0x031BE3C4 CBZ X19, 0x31BE428
	0x031BE3C8 ADRP X20, 0xF37000
	0x031BE3CC LDR X20, [X20 + 0x5A8]
	0x031BE3D0 MOV X0, X19
	0x031BE3D4 MOV X1, X31
	0x031BE3D8 BL 0x3C32ECC
	0x031BE3DC LDR X8, [X20]
	0x031BE3E0 MOV X19, X0
	0x031BE3E4 LDR W9, [X8 + 0xE0]
	0x031BE3E8 CBNZ W9, 0x31BE3F4

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121E000
	007 Move W8, [X21+3852]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3852], W8
	020 Compare X20, 0
	021 JumpIfEqual {45}
	022 Move X21, 0xF38000
	023 Move X21, [X21+1448]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X21]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V0, V8
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call LeanTween.moveLocal, X0, X1, V0
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveLocalX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BE3EC MOV X0, X8
	0x031BE3F0 BL 0x1C16DFC
	0x031BE3F4 MOV X0, X19
	0x031BE3F8 MOV V1.16B, V11.16B
	0x031BE3FC MOV V2.16B, V10.16B
	0x031BE400 MOV V3.16B, V9.16B
	0x031BE404 MOV V4.16B, V8.16B
	0x031BE408 LDP X20, X19, [X31 + 0x30]
	0x031BE40C LDR X30, [X31 + 0x28]
	0x031BE410 LDP D9, D8, [X31 + 0x18]
	0x031BE414 LDP D11, D10, [X31 + 0x8]
	0x031BE418 MOV V0.16B, V12.16B
	0x031BE41C MOV X1, X31
	0x031BE420 LDR V12, [X31], #0x40
	0x031BE424 B 0x31B1E8C
	0x031BE428 BL 0x1C16F20
	0x031BE42C STR D12, [X31 - 0x50]!
	0x031BE430 STP D11, D10, [X31 + 0x10]
	0x031BE434 STP D9, D8, [X31 + 0x20]
	0x031BE438 STP X30, X21, [X31 + 0x30]
	0x031BE43C STP X20, X19, [X31 + 0x40]
	0x031BE440 ADRP X21, 0x121D000
	0x031BE444 ADRP X20, 0xF37000
	0x031BE448 LDRB W8, [X21 + 0xF2D]
	0x031BE44C LDR X20, [X20 + 0x5A8]
	0x031BE450 MOV V8.16B, V4.16B
	0x031BE454 MOV V9.16B, V3.16B
	0x031BE458 MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3853]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3853], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveLocalX, X0, V0, V1
	039 Return X0

Method: LTDescr LeanMoveLocalY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BE45C MOV V11.16B, V1.16B
	0x031BE460 MOV V12.16B, V0.16B
	0x031BE464 MOV X19, X0
	0x031BE468 TBNZ X8, 0x0, 0x31BE480
	0x031BE46C ADRP X0, 0xF37000
	0x031BE470 LDR X0, [X0 + 0x5A8]
	0x031BE474 BL 0x1C16CF4
	0x031BE478 MOVZ W8, 0x1
	0x031BE47C STRB W8, [X21 + 0xF2D]
	0x031BE480 LDR X0, [X20]
	0x031BE484 LDR W8, [X0 + 0xE0]
	0x031BE488 CBNZ W8, 0x31BE490
	0x031BE48C BL 0x1C16DFC
	0x031BE490 MOV X0, X19
	0x031BE494 MOV V1.16B, V11.16B
	0x031BE498 MOV V2.16B, V10.16B
	0x031BE49C MOV V3.16B, V9.16B
	0x031BE4A0 MOV V4.16B, V8.16B
	0x031BE4A4 LDP X20, X19, [X31 + 0x40]
	0x031BE4A8 LDP X30, X21, [X31 + 0x30]
	0x031BE4AC LDP D9, D8, [X31 + 0x20]
	0x031BE4B0 LDP D11, D10, [X31 + 0x10]
	0x031BE4B4 MOV V0.16B, V12.16B
	0x031BE4B8 MOV X1, X31
	0x031BE4BC LDR V12, [X31], #0x50
	0x031BE4C0 B 0x31B3538
	0x031BE4C4 STP D9, D8, [X31 - 0x30]!
	0x031BE4C8 STP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3854]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3854], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveLocalY, X0, V0, V1
	039 Return X0

Method: LTDescr LeanMoveLocalZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BE4CC STP X20, X19, [X31 + 0x20]
	0x031BE4D0 ADRP X20, 0x121D000
	0x031BE4D4 ADRP X21, 0xF37000
	0x031BE4D8 LDRB W8, [X20 + 0xF2E]
	0x031BE4DC LDR X21, [X21 + 0x5A8]
	0x031BE4E0 MOV V8.16B, V1.16B
	0x031BE4E4 MOV V9.16B, V0.16B
	0x031BE4E8 MOV X19, X0
	0x031BE4EC TBNZ X8, 0x0, 0x31BE504
	0x031BE4F0 ADRP X0, 0xF37000
	0x031BE4F4 LDR X0, [X0 + 0x5A8]
	0x031BE4F8 BL 0x1C16CF4
	0x031BE4FC MOVZ W8, 0x1
	0x031BE500 STRB W8, [X20 + 0xF2E]
	0x031BE504 LDR X0, [X21]
	0x031BE508 LDR W8, [X0 + 0xE0]
	0x031BE50C CBNZ W8, 0x31BE514
	0x031BE510 BL 0x1C16DFC
	0x031BE514 MOV X0, X19
	0x031BE518 LDP X20, X19, [X31 + 0x20]
	0x031BE51C LDP X30, X21, [X31 + 0x10]
	0x031BE520 MOV V0.16B, V9.16B
	0x031BE524 MOV V1.16B, V8.16B
	0x031BE528 MOV X1, X31
	0x031BE52C LDP D9, D8, [X31], #0x30
	0x031BE530 B 0x31B1C28
	0x031BE534 STP D9, D8, [X31 - 0x30]!
	0x031BE538 STR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3855]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3855], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveLocalZ, X0, V0, V1
	039 Return X0

Method: LTDescr LeanMoveLocalX(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BE53C STP X20, X19, [X31 + 0x20]
	0x031BE540 ADRP X20, 0x121D000
	0x031BE544 LDRB W8, [X20 + 0xF2F]
	0x031BE548 MOV V8.16B, V1.16B
	0x031BE54C MOV V9.16B, V0.16B
	0x031BE550 MOV X19, X0
	0x031BE554 TBNZ X8, 0x0, 0x31BE56C
	0x031BE558 ADRP X0, 0xF37000
	0x031BE55C LDR X0, [X0 + 0x5A8]
	0x031BE560 BL 0x1C16CF4
	0x031BE564 MOVZ W8, 0x1
	0x031BE568 STRB W8, [X20 + 0xF2F]
	0x031BE56C CBZ X19, 0x31BE5BC
	0x031BE570 ADRP X20, 0xF37000
	0x031BE574 LDR X20, [X20 + 0x5A8]
	0x031BE578 MOV X0, X19
	0x031BE57C MOV X1, X31
	0x031BE580 BL 0x3C32ECC
	0x031BE584 LDR X8, [X20]
	0x031BE588 MOV X19, X0
	0x031BE58C LDR W9, [X8 + 0xE0]
	0x031BE590 CBNZ W9, 0x31BE59C
	0x031BE594 MOV X0, X8
	0x031BE598 BL 0x1C16DFC
	0x031BE59C MOV X0, X19
	0x031BE5A0 LDP X20, X19, [X31 + 0x20]
	0x031BE5A4 LDR X30, [X31 + 0x10]
	0x031BE5A8 MOV V0.16B, V9.16B
	0x031BE5AC MOV V1.16B, V8.16B
	0x031BE5B0 MOV X1, X31
	0x031BE5B4 LDP D9, D8, [X31], #0x30
	0x031BE5B8 B 0x31B1C28
	0x031BE5BC BL 0x1C16F20
	0x031BE5C0 STP D9, D8, [X31 - 0x30]!
	0x031BE5C4 STP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121E000
	007 Move W8, [X20+3856]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3856], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF38000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.moveLocalX, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveLocalY(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BE5C8 STP X20, X19, [X31 + 0x20]
	0x031BE5CC ADRP X20, 0x121D000
	0x031BE5D0 ADRP X21, 0xF37000
	0x031BE5D4 LDRB W8, [X20 + 0xF30]
	0x031BE5D8 LDR X21, [X21 + 0x5A8]
	0x031BE5DC MOV V8.16B, V1.16B
	0x031BE5E0 MOV V9.16B, V0.16B
	0x031BE5E4 MOV X19, X0
	0x031BE5E8 TBNZ X8, 0x0, 0x31BE600
	0x031BE5EC ADRP X0, 0xF37000
	0x031BE5F0 LDR X0, [X0 + 0x5A8]
	0x031BE5F4 BL 0x1C16CF4
	0x031BE5F8 MOVZ W8, 0x1
	0x031BE5FC STRB W8, [X20 + 0xF30]
	0x031BE600 LDR X0, [X21]
	0x031BE604 LDR W8, [X0 + 0xE0]
	0x031BE608 CBNZ W8, 0x31BE610
	0x031BE60C BL 0x1C16DFC
	0x031BE610 MOV X0, X19
	0x031BE614 LDP X20, X19, [X31 + 0x20]
	0x031BE618 LDP X30, X21, [X31 + 0x10]
	0x031BE61C MOV V0.16B, V9.16B
	0x031BE620 MOV V1.16B, V8.16B
	0x031BE624 MOV X1, X31
	0x031BE628 LDP D9, D8, [X31], #0x30
	0x031BE62C B 0x31B1CB4
	0x031BE630 STP D9, D8, [X31 - 0x30]!
	0x031BE634 STR X30, [X31 + 0x10]
	0x031BE638 STP X20, X19, [X31 + 0x20]
	0x031BE63C ADRP X20, 0x121D000
	0x031BE640 LDRB W8, [X20 + 0xF31]
	0x031BE644 MOV V8.16B, V1.16B
	0x031BE648 MOV V9.16B, V0.16B
	0x031BE64C MOV X19, X0
	0x031BE650 TBNZ X8, 0x0, 0x31BE668

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121E000
	007 Move W8, [X20+3857]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3857], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF38000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.moveLocalY, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveLocalZ(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BE654 ADRP X0, 0xF37000
	0x031BE658 LDR X0, [X0 + 0x5A8]
	0x031BE65C BL 0x1C16CF4
	0x031BE660 MOVZ W8, 0x1
	0x031BE664 STRB W8, [X20 + 0xF31]
	0x031BE668 CBZ X19, 0x31BE6B8
	0x031BE66C ADRP X20, 0xF37000
	0x031BE670 LDR X20, [X20 + 0x5A8]
	0x031BE674 MOV X0, X19
	0x031BE678 MOV X1, X31
	0x031BE67C BL 0x3C32ECC
	0x031BE680 LDR X8, [X20]
	0x031BE684 MOV X19, X0
	0x031BE688 LDR W9, [X8 + 0xE0]
	0x031BE68C CBNZ W9, 0x31BE698
	0x031BE690 MOV X0, X8
	0x031BE694 BL 0x1C16DFC
	0x031BE698 MOV X0, X19
	0x031BE69C LDP X20, X19, [X31 + 0x20]
	0x031BE6A0 LDR X30, [X31 + 0x10]
	0x031BE6A4 MOV V0.16B, V9.16B
	0x031BE6A8 MOV V1.16B, V8.16B
	0x031BE6AC MOV X1, X31
	0x031BE6B0 LDP D9, D8, [X31], #0x30
	0x031BE6B4 B 0x31B1CB4
	0x031BE6B8 BL 0x1C16F20
	0x031BE6BC STP D9, D8, [X31 - 0x30]!
	0x031BE6C0 STP X30, X21, [X31 + 0x10]
	0x031BE6C4 STP X20, X19, [X31 + 0x20]
	0x031BE6C8 ADRP X20, 0x121D000
	0x031BE6CC ADRP X21, 0xF37000
	0x031BE6D0 LDRB W8, [X20 + 0xF32]
	0x031BE6D4 LDR X21, [X21 + 0x5A8]
	0x031BE6D8 MOV V8.16B, V1.16B
	0x031BE6DC MOV V9.16B, V0.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121E000
	007 Move W8, [X20+3858]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3858], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF38000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.moveLocalZ, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveSpline(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031BE6E0 MOV X19, X0
	0x031BE6E4 TBNZ X8, 0x0, 0x31BE6FC
	0x031BE6E8 ADRP X0, 0xF37000
	0x031BE6EC LDR X0, [X0 + 0x5A8]
	0x031BE6F0 BL 0x1C16CF4
	0x031BE6F4 MOVZ W8, 0x1
	0x031BE6F8 STRB W8, [X20 + 0xF32]
	0x031BE6FC LDR X0, [X21]
	0x031BE700 LDR W8, [X0 + 0xE0]
	0x031BE704 CBNZ W8, 0x31BE70C
	0x031BE708 BL 0x1C16DFC
	0x031BE70C MOV X0, X19
	0x031BE710 LDP X20, X19, [X31 + 0x20]
	0x031BE714 LDP X30, X21, [X31 + 0x10]
	0x031BE718 MOV V0.16B, V9.16B
	0x031BE71C MOV V1.16B, V8.16B
	0x031BE720 MOV X1, X31
	0x031BE724 LDP D9, D8, [X31], #0x30
	0x031BE728 B 0x31B1D40
	0x031BE72C STP D9, D8, [X31 - 0x30]!
	0x031BE730 STR X30, [X31 + 0x10]
	0x031BE734 STP X20, X19, [X31 + 0x20]
	0x031BE738 ADRP X20, 0x121D000
	0x031BE73C LDRB W8, [X20 + 0xF33]
	0x031BE740 MOV V8.16B, V1.16B
	0x031BE744 MOV V9.16B, V0.16B
	0x031BE748 MOV X19, X0
	0x031BE74C TBNZ X8, 0x0, 0x31BE764
	0x031BE750 ADRP X0, 0xF37000
	0x031BE754 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121E000
	008 Move X22, 0xF38000
	009 Move W8, [X21+3859]
	010 Move X22, [X22+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3859], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.moveSpline, X0, X1, V0
	039 Return X0

Method: LTDescr LeanMoveSpline(UnityEngine.GameObject gameObject, LTSpline to, System.Single time)

Disassembly:
	0x031BE758 BL 0x1C16CF4
	0x031BE75C MOVZ W8, 0x1
	0x031BE760 STRB W8, [X20 + 0xF33]
	0x031BE764 CBZ X19, 0x31BE7B4
	0x031BE768 ADRP X20, 0xF37000
	0x031BE76C LDR X20, [X20 + 0x5A8]
	0x031BE770 MOV X0, X19
	0x031BE774 MOV X1, X31
	0x031BE778 BL 0x3C32ECC
	0x031BE77C LDR X8, [X20]
	0x031BE780 MOV X19, X0
	0x031BE784 LDR W9, [X8 + 0xE0]
	0x031BE788 CBNZ W9, 0x31BE794
	0x031BE78C MOV X0, X8
	0x031BE790 BL 0x1C16DFC
	0x031BE794 MOV X0, X19
	0x031BE798 LDP X20, X19, [X31 + 0x20]
	0x031BE79C LDR X30, [X31 + 0x10]
	0x031BE7A0 MOV V0.16B, V9.16B
	0x031BE7A4 MOV V1.16B, V8.16B
	0x031BE7A8 MOV X1, X31
	0x031BE7AC LDP D9, D8, [X31], #0x30
	0x031BE7B0 B 0x31B1D40
	0x031BE7B4 BL 0x1C16F20
	0x031BE7B8 STP D11, D10, [X31 - 0x40]!
	0x031BE7BC STP D9, D8, [X31 + 0x10]
	0x031BE7C0 STP X30, X21, [X31 + 0x20]
	0x031BE7C4 STP X20, X19, [X31 + 0x30]
	0x031BE7C8 ADRP X21, 0x121D000
	0x031BE7CC ADRP X20, 0xF37000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121E000
	008 Move X22, 0xF38000
	009 Move W8, [X21+3860]
	010 Move X22, [X22+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3860], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.moveSpline, X0, X1, V0
	039 Return X0

Method: LTDescr LeanMoveSpline(UnityEngine.Transform transform, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031BE7D0 LDRB W8, [X21 + 0xF34]
	0x031BE7D4 LDR X20, [X20 + 0x5A8]
	0x031BE7D8 MOV V8.16B, V3.16B
	0x031BE7DC MOV V9.16B, V2.16B
	0x031BE7E0 MOV V10.16B, V1.16B
	0x031BE7E4 MOV V11.16B, V0.16B
	0x031BE7E8 MOV X19, X0
	0x031BE7EC TBNZ X8, 0x0, 0x31BE804
	0x031BE7F0 ADRP X0, 0xF37000
	0x031BE7F4 LDR X0, [X0 + 0x5A8]
	0x031BE7F8 BL 0x1C16CF4
	0x031BE7FC MOVZ W8, 0x1
	0x031BE800 STRB W8, [X21 + 0xF34]
	0x031BE804 LDR X0, [X20]
	0x031BE808 LDR W8, [X0 + 0xE0]
	0x031BE80C CBNZ W8, 0x31BE814
	0x031BE810 BL 0x1C16DFC
	0x031BE814 MOV X0, X19
	0x031BE818 MOV V2.16B, V9.16B
	0x031BE81C MOV V3.16B, V8.16B
	0x031BE820 LDP X20, X19, [X31 + 0x30]
	0x031BE824 LDP X30, X21, [X31 + 0x20]
	0x031BE828 LDP D9, D8, [X31 + 0x10]
	0x031BE82C MOV V0.16B, V11.16B
	0x031BE830 MOV V1.16B, V10.16B
	0x031BE834 MOV X1, X31
	0x031BE838 LDP D11, D10, [X31], #0x40
	0x031BE83C B 0x31B1F4C
	0x031BE840 STP D11, D10, [X31 - 0x40]!
	0x031BE844 STP D9, D8, [X31 + 0x10]
	0x031BE848 STR X30, [X31 + 0x20]
	0x031BE84C STP X20, X19, [X31 + 0x30]
	0x031BE850 ADRP X20, 0x121D000
	0x031BE854 LDRB W8, [X20 + 0xF35]
	0x031BE858 MOV V8.16B, V3.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121E000
	007 Move W8, [X21+3861]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3861], W8
	020 Compare X20, 0
	021 JumpIfEqual {45}
	022 Move X21, 0xF38000
	023 Move X21, [X21+1448]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X21]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V0, V8
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call LeanTween.moveSpline, X0, X1, V0
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveSpline(UnityEngine.Transform transform, LTSpline to, System.Single time)

Disassembly:
	0x031BE85C MOV V9.16B, V2.16B
	0x031BE860 MOV V10.16B, V1.16B
	0x031BE864 MOV V11.16B, V0.16B
	0x031BE868 MOV X19, X0
	0x031BE86C TBNZ X8, 0x0, 0x31BE884
	0x031BE870 ADRP X0, 0xF37000
	0x031BE874 LDR X0, [X0 + 0x5A8]
	0x031BE878 BL 0x1C16CF4
	0x031BE87C MOVZ W8, 0x1
	0x031BE880 STRB W8, [X20 + 0xF35]
	0x031BE884 CBZ X19, 0x31BE8E0
	0x031BE888 ADRP X20, 0xF37000
	0x031BE88C LDR X20, [X20 + 0x5A8]
	0x031BE890 MOV X0, X19
	0x031BE894 MOV X1, X31
	0x031BE898 BL 0x3C32ECC
	0x031BE89C LDR X8, [X20]
	0x031BE8A0 MOV X19, X0
	0x031BE8A4 LDR W9, [X8 + 0xE0]
	0x031BE8A8 CBNZ W9, 0x31BE8B4
	0x031BE8AC MOV X0, X8
	0x031BE8B0 BL 0x1C16DFC
	0x031BE8B4 MOV X0, X19
	0x031BE8B8 MOV V2.16B, V9.16B
	0x031BE8BC MOV V3.16B, V8.16B
	0x031BE8C0 LDP X20, X19, [X31 + 0x30]
	0x031BE8C4 LDR X30, [X31 + 0x20]
	0x031BE8C8 LDP D9, D8, [X31 + 0x10]
	0x031BE8CC MOV V0.16B, V11.16B
	0x031BE8D0 MOV V1.16B, V10.16B
	0x031BE8D4 MOV X1, X31
	0x031BE8D8 LDP D11, D10, [X31], #0x40
	0x031BE8DC B 0x31B1F4C
	0x031BE8E0 BL 0x1C16F20
	0x031BE8E4 STP D11, D10, [X31 - 0x40]!

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121E000
	007 Move W8, [X21+3862]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3862], W8
	020 Compare X20, 0
	021 JumpIfEqual {45}
	022 Move X21, 0xF38000
	023 Move X21, [X21+1448]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X21]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V0, V8
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call LeanTween.moveSpline, X0, X1, V0
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveSplineLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031BE8E8 STP D9, D8, [X31 + 0x10]
	0x031BE8EC STP X30, X21, [X31 + 0x20]
	0x031BE8F0 STP X20, X19, [X31 + 0x30]
	0x031BE8F4 ADRP X21, 0x121D000
	0x031BE8F8 ADRP X20, 0xF37000
	0x031BE8FC LDRB W8, [X21 + 0xF36]
	0x031BE900 LDR X20, [X20 + 0x5A8]
	0x031BE904 MOV V8.16B, V3.16B
	0x031BE908 MOV V9.16B, V2.16B
	0x031BE90C MOV V10.16B, V1.16B
	0x031BE910 MOV V11.16B, V0.16B
	0x031BE914 MOV X19, X0
	0x031BE918 TBNZ X8, 0x0, 0x31BE930
	0x031BE91C ADRP X0, 0xF37000
	0x031BE920 LDR X0, [X0 + 0x5A8]
	0x031BE924 BL 0x1C16CF4
	0x031BE928 MOVZ W8, 0x1
	0x031BE92C STRB W8, [X21 + 0xF36]
	0x031BE930 LDR X0, [X20]
	0x031BE934 LDR W8, [X0 + 0xE0]
	0x031BE938 CBNZ W8, 0x31BE940
	0x031BE93C BL 0x1C16DFC
	0x031BE940 MOV X0, X19
	0x031BE944 MOV V2.16B, V9.16B
	0x031BE948 MOV V3.16B, V8.16B
	0x031BE94C LDP X20, X19, [X31 + 0x30]
	0x031BE950 LDP X30, X21, [X31 + 0x20]
	0x031BE954 LDP D9, D8, [X31 + 0x10]
	0x031BE958 MOV V0.16B, V11.16B
	0x031BE95C MOV V1.16B, V10.16B

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x121E000
	008 Move X22, 0xF38000
	009 Move W8, [X21+3863]
	010 Move X22, [X22+1448]
	011 Move V8, V0
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+3863], W8
	023 Move X0, [X22]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+8]
	035 Move V0, V8
	036 Move X2, X31
	037 Move V8, [X31+48]
	038 Call LeanTween.moveSplineLocal, X0, X1, V0
	039 Return X0

Method: LTDescr LeanMoveSplineLocal(UnityEngine.Transform transform, UnityEngine.Vector3[] to, System.Single time)

Disassembly:
	0x031BE960 MOV X1, X31
	0x031BE964 LDP D11, D10, [X31], #0x40
	0x031BE968 B 0x31B3620
	0x031BE96C STP D9, D8, [X31 - 0x30]!
	0x031BE970 STP X30, X21, [X31 + 0x10]
	0x031BE974 STP X20, X19, [X31 + 0x20]
	0x031BE978 ADRP X20, 0x121D000
	0x031BE97C ADRP X21, 0xF37000
	0x031BE980 LDRB W8, [X20 + 0xF37]
	0x031BE984 LDR X21, [X21 + 0x5A8]
	0x031BE988 MOV V8.16B, V1.16B
	0x031BE98C MOV V9.16B, V0.16B
	0x031BE990 MOV X19, X0
	0x031BE994 TBNZ X8, 0x0, 0x31BE9AC
	0x031BE998 ADRP X0, 0xF37000
	0x031BE99C LDR X0, [X0 + 0x5A8]
	0x031BE9A0 BL 0x1C16CF4
	0x031BE9A4 MOVZ W8, 0x1
	0x031BE9A8 STRB W8, [X20 + 0xF37]
	0x031BE9AC LDR X0, [X21]
	0x031BE9B0 LDR W8, [X0 + 0xE0]
	0x031BE9B4 CBNZ W8, 0x31BE9BC
	0x031BE9B8 BL 0x1C16DFC
	0x031BE9BC MOV X0, X19
	0x031BE9C0 LDP X20, X19, [X31 + 0x20]
	0x031BE9C4 LDP X30, X21, [X31 + 0x10]
	0x031BE9C8 MOV V0.16B, V9.16B
	0x031BE9CC MOV V1.16B, V8.16B
	0x031BE9D0 MOV X1, X31
	0x031BE9D4 LDP D9, D8, [X31], #0x30
	0x031BE9D8 B 0x31B2098
	0x031BE9DC STP D9, D8, [X31 - 0x30]!
	0x031BE9E0 STR X30, [X31 + 0x10]
	0x031BE9E4 STP X20, X19, [X31 + 0x20]
	0x031BE9E8 ADRP X20, 0x121D000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121E000
	007 Move W8, [X21+3864]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3864], W8
	020 Compare X20, 0
	021 JumpIfEqual {45}
	022 Move X21, 0xF38000
	023 Move X21, [X21+1448]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X21]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X19
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move V0, V8
	041 Move X2, X31
	042 Move V8, [X31+48]
	043 Call LeanTween.moveSplineLocal, X0, X1, V0
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BE9EC LDRB W8, [X20 + 0xF38]
	0x031BE9F0 MOV V8.16B, V1.16B
	0x031BE9F4 MOV V9.16B, V0.16B
	0x031BE9F8 MOV X19, X0
	0x031BE9FC TBNZ X8, 0x0, 0x31BEA14
	0x031BEA00 ADRP X0, 0xF37000
	0x031BEA04 LDR X0, [X0 + 0x5A8]
	0x031BEA08 BL 0x1C16CF4
	0x031BEA0C MOVZ W8, 0x1
	0x031BEA10 STRB W8, [X20 + 0xF38]
	0x031BEA14 CBZ X19, 0x31BEA64
	0x031BEA18 ADRP X20, 0xF37000
	0x031BEA1C LDR X20, [X20 + 0x5A8]
	0x031BEA20 MOV X0, X19
	0x031BEA24 MOV X1, X31
	0x031BEA28 BL 0x3C32ECC
	0x031BEA2C LDR X8, [X20]
	0x031BEA30 MOV X19, X0
	0x031BEA34 LDR W9, [X8 + 0xE0]
	0x031BEA38 CBNZ W9, 0x31BEA44
	0x031BEA3C MOV X0, X8
	0x031BEA40 BL 0x1C16DFC
	0x031BEA44 MOV X0, X19
	0x031BEA48 LDP X20, X19, [X31 + 0x20]
	0x031BEA4C LDR X30, [X31 + 0x10]
	0x031BEA50 MOV V0.16B, V9.16B
	0x031BEA54 MOV V1.16B, V8.16B
	0x031BEA58 MOV X1, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3865]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3865], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveX, X0, V0, V1
	039 Return X0

Method: LTDescr LeanMoveX(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BEA5C LDP D9, D8, [X31], #0x30
	0x031BEA60 B 0x31B2098
	0x031BEA64 BL 0x1C16F20
	0x031BEA68 STP D9, D8, [X31 - 0x30]!
	0x031BEA6C STP X30, X21, [X31 + 0x10]
	0x031BEA70 STP X20, X19, [X31 + 0x20]
	0x031BEA74 ADRP X20, 0x121D000
	0x031BEA78 ADRP X21, 0xF37000
	0x031BEA7C LDRB W8, [X20 + 0xF39]
	0x031BEA80 LDR X21, [X21 + 0x5A8]
	0x031BEA84 MOV V8.16B, V1.16B
	0x031BEA88 MOV V9.16B, V0.16B
	0x031BEA8C MOV X19, X0
	0x031BEA90 TBNZ X8, 0x0, 0x31BEAA8
	0x031BEA94 ADRP X0, 0xF37000
	0x031BEA98 LDR X0, [X0 + 0x5A8]
	0x031BEA9C BL 0x1C16CF4
	0x031BEAA0 MOVZ W8, 0x1
	0x031BEAA4 STRB W8, [X20 + 0xF39]
	0x031BEAA8 LDR X0, [X21]
	0x031BEAAC LDR W8, [X0 + 0xE0]
	0x031BEAB0 CBNZ W8, 0x31BEAB8
	0x031BEAB4 BL 0x1C16DFC
	0x031BEAB8 MOV X0, X19
	0x031BEABC LDP X20, X19, [X31 + 0x20]
	0x031BEAC0 LDP X30, X21, [X31 + 0x10]
	0x031BEAC4 MOV V0.16B, V9.16B
	0x031BEAC8 MOV V1.16B, V8.16B
	0x031BEACC MOV X1, X31
	0x031BEAD0 LDP D9, D8, [X31], #0x30
	0x031BEAD4 B 0x31B2124
	0x031BEAD8 STP D9, D8, [X31 - 0x30]!
	0x031BEADC STR X30, [X31 + 0x10]
	0x031BEAE0 STP X20, X19, [X31 + 0x20]
	0x031BEAE4 ADRP X20, 0x121D000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121E000
	007 Move W8, [X20+3866]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3866], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF38000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.moveX, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveX(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)

Disassembly:
	0x031BEAE8 LDRB W8, [X20 + 0xF3A]
	0x031BEAEC MOV V8.16B, V1.16B
	0x031BEAF0 MOV V9.16B, V0.16B
	0x031BEAF4 MOV X19, X0
	0x031BEAF8 TBNZ X8, 0x0, 0x31BEB10
	0x031BEAFC ADRP X0, 0xF37000
	0x031BEB00 LDR X0, [X0 + 0x5A8]
	0x031BEB04 BL 0x1C16CF4
	0x031BEB08 MOVZ W8, 0x1
	0x031BEB0C STRB W8, [X20 + 0xF3A]
	0x031BEB10 CBZ X19, 0x31BEB60
	0x031BEB14 ADRP X20, 0xF37000
	0x031BEB18 LDR X20, [X20 + 0x5A8]
	0x031BEB1C MOV X0, X19
	0x031BEB20 MOV X1, X31
	0x031BEB24 BL 0x3C32ECC
	0x031BEB28 LDR X8, [X20]
	0x031BEB2C MOV X19, X0
	0x031BEB30 LDR W9, [X8 + 0xE0]
	0x031BEB34 CBNZ W9, 0x31BEB40
	0x031BEB38 MOV X0, X8
	0x031BEB3C BL 0x1C16DFC
	0x031BEB40 MOV X0, X19
	0x031BEB44 LDP X20, X19, [X31 + 0x20]
	0x031BEB48 LDR X30, [X31 + 0x10]
	0x031BEB4C MOV V0.16B, V9.16B
	0x031BEB50 MOV V1.16B, V8.16B
	0x031BEB54 MOV X1, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3867]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3867], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveX, X0, V0, V1
	039 Return X0

Method: LTDescr LeanMoveY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BEB58 LDP D9, D8, [X31], #0x30
	0x031BEB5C B 0x31B2124
	0x031BEB60 BL 0x1C16F20
	0x031BEB64 STP D9, D8, [X31 - 0x30]!
	0x031BEB68 STP X30, X21, [X31 + 0x10]
	0x031BEB6C STP X20, X19, [X31 + 0x20]
	0x031BEB70 ADRP X20, 0x121D000
	0x031BEB74 ADRP X21, 0xF37000
	0x031BEB78 LDRB W8, [X20 + 0xF3B]
	0x031BEB7C LDR X21, [X21 + 0x5A8]
	0x031BEB80 MOV V8.16B, V1.16B
	0x031BEB84 MOV V9.16B, V0.16B
	0x031BEB88 MOV X19, X0
	0x031BEB8C TBNZ X8, 0x0, 0x31BEBA4
	0x031BEB90 ADRP X0, 0xF37000
	0x031BEB94 LDR X0, [X0 + 0x5A8]
	0x031BEB98 BL 0x1C16CF4
	0x031BEB9C MOVZ W8, 0x1
	0x031BEBA0 STRB W8, [X20 + 0xF3B]
	0x031BEBA4 LDR X0, [X21]
	0x031BEBA8 LDR W8, [X0 + 0xE0]
	0x031BEBAC CBNZ W8, 0x31BEBB4
	0x031BEBB0 BL 0x1C16DFC
	0x031BEBB4 MOV X0, X19
	0x031BEBB8 LDP X20, X19, [X31 + 0x20]
	0x031BEBBC LDP X30, X21, [X31 + 0x10]
	0x031BEBC0 MOV V0.16B, V9.16B
	0x031BEBC4 MOV V1.16B, V8.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3868]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3868], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveY, X0, V0, V1
	039 Return X0

Method: LTDescr LeanMoveY(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BEBC8 MOV X1, X31
	0x031BEBCC LDP D9, D8, [X31], #0x30
	0x031BEBD0 B 0x31B21B0
	0x031BEBD4 STP D9, D8, [X31 - 0x30]!
	0x031BEBD8 STR X30, [X31 + 0x10]
	0x031BEBDC STP X20, X19, [X31 + 0x20]
	0x031BEBE0 ADRP X20, 0x121D000
	0x031BEBE4 LDRB W8, [X20 + 0xF3C]
	0x031BEBE8 MOV V8.16B, V1.16B
	0x031BEBEC MOV V9.16B, V0.16B
	0x031BEBF0 MOV X19, X0
	0x031BEBF4 TBNZ X8, 0x0, 0x31BEC0C
	0x031BEBF8 ADRP X0, 0xF37000
	0x031BEBFC LDR X0, [X0 + 0x5A8]
	0x031BEC00 BL 0x1C16CF4
	0x031BEC04 MOVZ W8, 0x1
	0x031BEC08 STRB W8, [X20 + 0xF3C]
	0x031BEC0C CBZ X19, 0x31BEC5C
	0x031BEC10 ADRP X20, 0xF37000
	0x031BEC14 LDR X20, [X20 + 0x5A8]
	0x031BEC18 MOV X0, X19
	0x031BEC1C MOV X1, X31
	0x031BEC20 BL 0x3C32ECC
	0x031BEC24 LDR X8, [X20]
	0x031BEC28 MOV X19, X0
	0x031BEC2C LDR W9, [X8 + 0xE0]
	0x031BEC30 CBNZ W9, 0x31BEC3C
	0x031BEC34 MOV X0, X8
	0x031BEC38 BL 0x1C16DFC
	0x031BEC3C MOV X0, X19
	0x031BEC40 LDP X20, X19, [X31 + 0x20]
	0x031BEC44 LDR X30, [X31 + 0x10]
	0x031BEC48 MOV V0.16B, V9.16B
	0x031BEC4C MOV V1.16B, V8.16B
	0x031BEC50 MOV X1, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121E000
	007 Move W8, [X20+3869]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3869], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF38000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.moveY, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveY(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)

Disassembly:
	0x031BEC54 LDP D9, D8, [X31], #0x30
	0x031BEC58 B 0x31B21B0
	0x031BEC5C BL 0x1C16F20
	0x031BEC60 STR D10, [X31 - 0x40]!
	0x031BEC64 STP D9, D8, [X31 + 0x10]
	0x031BEC68 STP X30, X21, [X31 + 0x20]
	0x031BEC6C STP X20, X19, [X31 + 0x30]
	0x031BEC70 ADRP X21, 0x121D000
	0x031BEC74 ADRP X20, 0xF37000
	0x031BEC78 LDRB W8, [X21 + 0xF3D]
	0x031BEC7C LDR X20, [X20 + 0x5A8]
	0x031BEC80 MOV V8.16B, V2.16B
	0x031BEC84 MOV V9.16B, V1.16B
	0x031BEC88 MOV V10.16B, V0.16B
	0x031BEC8C MOV X19, X0
	0x031BEC90 TBNZ X8, 0x0, 0x31BECA8
	0x031BEC94 ADRP X0, 0xF37000
	0x031BEC98 LDR X0, [X0 + 0x5A8]
	0x031BEC9C BL 0x1C16CF4
	0x031BECA0 MOVZ W8, 0x1
	0x031BECA4 STRB W8, [X21 + 0xF3D]
	0x031BECA8 LDR X0, [X20]
	0x031BECAC LDR W8, [X0 + 0xE0]
	0x031BECB0 CBNZ W8, 0x31BECB8
	0x031BECB4 BL 0x1C16DFC
	0x031BECB8 MOV X0, X19
	0x031BECBC MOV V1.16B, V9.16B
	0x031BECC0 MOV V2.16B, V8.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3870]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3870], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveY, X0, V0, V1
	039 Return X0

Method: LTDescr LeanMoveZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BECC4 LDP X20, X19, [X31 + 0x30]
	0x031BECC8 LDP X30, X21, [X31 + 0x20]
	0x031BECCC LDP D9, D8, [X31 + 0x10]
	0x031BECD0 MOV V0.16B, V10.16B
	0x031BECD4 MOV X1, X31
	0x031BECD8 LDR V10, [X31], #0x40
	0x031BECDC B 0x31B36E4
	0x031BECE0 SUB X31, X31, 0x70
	0x031BECE4 STP D15, D14, [X31 + 0x10]
	0x031BECE8 STP D13, D12, [X31 + 0x20]
	0x031BECEC STP D11, D10, [X31 + 0x30]
	0x031BECF0 STP D9, D8, [X31 + 0x40]
	0x031BECF4 STP X30, X21, [X31 + 0x50]
	0x031BECF8 STP X20, X19, [X31 + 0x60]
	0x031BECFC ADRP X21, 0x121D000
	0x031BED00 ADRP X20, 0xF37000
	0x031BED04 LDRB W8, [X21 + 0xF3E]
	0x031BED08 LDR V16, [X31 + 0x70]
	0x031BED0C LDR X20, [X20 + 0x5A8]
	0x031BED10 MOV X19, X0
	0x031BED14 TBNZ X8, 0x0, 0x31BED74
	0x031BED18 ADRP X0, 0xF37000
	0x031BED1C LDR X0, [X0 + 0x5A8]
	0x031BED20 MOV V9.16B, V7.16B
	0x031BED24 MOV V10.16B, V6.16B
	0x031BED28 MOV V11.16B, V5.16B
	0x031BED2C MOV V12.16B, V4.16B
	0x031BED30 MOV V13.16B, V3.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3871]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3871], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveZ, X0, V0, V1
	039 Return X0

Method: LTDescr LeanMoveZ(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BED34 MOV V14.16B, V2.16B
	0x031BED38 MOV V15.16B, V1.16B
	0x031BED3C MOV V8.16B, V0.16B
	0x031BED40 STR S16, [X31 + 0xC]
	0x031BED44 BL 0x1C16CF4
	0x031BED48 LDR V16, [X31 + 0xC]
	0x031BED4C MOV V0.16B, V8.16B
	0x031BED50 MOV V1.16B, V15.16B
	0x031BED54 MOV V2.16B, V14.16B
	0x031BED58 MOV V3.16B, V13.16B
	0x031BED5C MOV V4.16B, V12.16B
	0x031BED60 MOV V5.16B, V11.16B
	0x031BED64 MOV V6.16B, V10.16B
	0x031BED68 MOV V7.16B, V9.16B
	0x031BED6C MOVZ W8, 0x1
	0x031BED70 STRB W8, [X21 + 0xF3E]
	0x031BED74 LDR X0, [X20]
	0x031BED78 LDR W8, [X0 + 0xE0]
	0x031BED7C CBNZ W8, 0x31BEDCC
	0x031BED80 MOV V9.16B, V7.16B
	0x031BED84 MOV V10.16B, V6.16B
	0x031BED88 MOV V11.16B, V5.16B
	0x031BED8C MOV V12.16B, V4.16B
	0x031BED90 MOV V13.16B, V3.16B
	0x031BED94 MOV V14.16B, V2.16B
	0x031BED98 MOV V15.16B, V1.16B
	0x031BED9C MOV V8.16B, V0.16B
	0x031BEDA0 STR S16, [X31 + 0xC]
	0x031BEDA4 BL 0x1C16DFC
	0x031BEDA8 LDR V16, [X31 + 0xC]
	0x031BEDAC MOV V0.16B, V8.16B
	0x031BEDB0 MOV V1.16B, V15.16B
	0x031BEDB4 MOV V2.16B, V14.16B
	0x031BEDB8 MOV V3.16B, V13.16B
	0x031BEDBC MOV V4.16B, V12.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121E000
	007 Move W8, [X20+3872]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF38000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3872], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF38000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.moveZ, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanMoveZ(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)

Disassembly:
	0x031BEDC0 MOV V5.16B, V11.16B
	0x031BEDC4 MOV V6.16B, V10.16B
	0x031BEDC8 MOV V7.16B, V9.16B
	0x031BEDCC MOV X0, X19
	0x031BEDD0 LDP X20, X19, [X31 + 0x60]
	0x031BEDD4 LDP X30, X21, [X31 + 0x50]
	0x031BEDD8 LDP D9, D8, [X31 + 0x40]
	0x031BEDDC LDP D11, D10, [X31 + 0x30]
	0x031BEDE0 LDP D13, D12, [X31 + 0x20]
	0x031BEDE4 LDP D15, D14, [X31 + 0x10]
	0x031BEDE8 STR S16, [X31 + 0x70]
	0x031BEDEC MOV X1, X31
	0x031BEDF0 ADD X31, X31, 0x70
	0x031BEDF4 B 0x31B2548
	0x031BEDF8 STR D10, [X31 - 0x40]!
	0x031BEDFC STP D9, D8, [X31 + 0x10]
	0x031BEE00 STP X30, X21, [X31 + 0x20]
	0x031BEE04 STP X20, X19, [X31 + 0x30]
	0x031BEE08 ADRP X20, 0x121D000
	0x031BEE0C ADRP X21, 0xF37000
	0x031BEE10 LDRB W8, [X20 + 0xF3F]
	0x031BEE14 LDR X21, [X21 + 0x5A8]
	0x031BEE18 MOV V8.16B, V2.16B
	0x031BEE1C MOV V9.16B, V1.16B
	0x031BEE20 MOV V10.16B, V0.16B
	0x031BEE24 MOV X19, X0
	0x031BEE28 TBNZ X8, 0x0, 0x31BEE40
	0x031BEE2C ADRP X0, 0xF37000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121E000
	008 Move X21, 0xF38000
	009 Move W8, [X20+3873]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF38000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3873], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.moveZ, X0, V0, V1
	039 Return X0

Method: System.Void LeanPause(UnityEngine.GameObject gameObject)

Disassembly:
	0x031BEE30 LDR X0, [X0 + 0x5A8]
	0x031BEE34 BL 0x1C16CF4
	0x031BEE38 MOVZ W8, 0x1
	0x031BEE3C STRB W8, [X20 + 0xF3F]
	0x031BEE40 LDR X0, [X21]
	0x031BEE44 LDR W8, [X0 + 0xE0]
	0x031BEE48 CBNZ W8, 0x31BEE50
	0x031BEE4C BL 0x1C16DFC
	0x031BEE50 MOV X0, X19
	0x031BEE54 MOV V1.16B, V9.16B
	0x031BEE58 MOV V2.16B, V8.16B
	0x031BEE5C LDP X20, X19, [X31 + 0x30]
	0x031BEE60 LDP X30, X21, [X31 + 0x20]
	0x031BEE64 LDP D9, D8, [X31 + 0x10]
	0x031BEE68 MOV V0.16B, V10.16B
	0x031BEE6C MOV X1, X31
	0x031BEE70 LDR V10, [X31], #0x40
	0x031BEE74 B 0x31B223C
	0x031BEE78 STR D12, [X31 - 0x50]!
	0x031BEE7C STP D11, D10, [X31 + 0x10]
	0x031BEE80 STP D9, D8, [X31 + 0x20]
	0x031BEE84 STP X30, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x121E000
	006 Move X21, 0xF38000
	007 Move W8, [X20+3874]
	008 Move X21, [X21+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF38000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3874], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call LeanTween.pause, X0
	031 Return 

Method: LTDescr LeanPlay(UnityEngine.RectTransform rectTransform, UnityEngine.Sprite[] sprites)

Disassembly:
	0x031BEE88 STP X20, X19, [X31 + 0x40]
	0x031BEE8C ADRP X21, 0x121D000
	0x031BEE90 ADRP X20, 0xF37000
	0x031BEE94 LDRB W8, [X21 + 0xF40]
	0x031BEE98 LDR X20, [X20 + 0x5A8]
	0x031BEE9C MOV V8.16B, V4.16B
	0x031BEEA0 MOV V9.16B, V3.16B
	0x031BEEA4 MOV V10.16B, V2.16B
	0x031BEEA8 MOV V11.16B, V1.16B
	0x031BEEAC MOV V12.16B, V0.16B
	0x031BEEB0 MOV X19, X0
	0x031BEEB4 TBNZ X8, 0x0, 0x31BEECC
	0x031BEEB8 ADRP X0, 0xF37000
	0x031BEEBC LDR X0, [X0 + 0x5A8]
	0x031BEEC0 BL 0x1C16CF4
	0x031BEEC4 MOVZ W8, 0x1
	0x031BEEC8 STRB W8, [X21 + 0xF40]
	0x031BEECC LDR X0, [X20]
	0x031BEED0 LDR W8, [X0 + 0xE0]
	0x031BEED4 CBNZ W8, 0x31BEEDC
	0x031BEED8 BL 0x1C16DFC
	0x031BEEDC MOV X0, X19
	0x031BEEE0 MOV V1.16B, V11.16B
	0x031BEEE4 MOV V2.16B, V10.16B
	0x031BEEE8 MOV V3.16B, V9.16B
	0x031BEEEC MOV V4.16B, V8.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121E000
	007 Move X22, 0xF38000
	008 Move W8, [X21+3875]
	009 Move X22, [X22+1448]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF38000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3875], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X2, X31
	033 Move X30, [X31+48]
	034 Call LeanTween.play, X0, X1
	035 Return X0

Method: System.Void LeanResume(UnityEngine.GameObject gameObject)

Disassembly:
	0x031BEEF0 LDP X20, X19, [X31 + 0x40]
	0x031BEEF4 LDP X30, X21, [X31 + 0x30]
	0x031BEEF8 LDP D9, D8, [X31 + 0x20]
	0x031BEEFC LDP D11, D10, [X31 + 0x10]
	0x031BEF00 MOV V0.16B, V12.16B
	0x031BEF04 MOV X1, X31
	0x031BEF08 LDR V12, [X31], #0x50
	0x031BEF0C B 0x31B23A0
	0x031BEF10 STR D14, [X31 - 0x60]!
	0x031BEF14 STP D13, D12, [X31 + 0x10]
	0x031BEF18 STP D11, D10, [X31 + 0x20]
	0x031BEF1C STP D9, D8, [X31 + 0x30]
	0x031BEF20 STP X30, X21, [X31 + 0x40]
	0x031BEF24 STP X20, X19, [X31 + 0x50]
	0x031BEF28 ADRP X21, 0x121D000
	0x031BEF2C ADRP X20, 0xF37000
	0x031BEF30 LDRB W8, [X21 + 0xF41]
	0x031BEF34 LDR X20, [X20 + 0x5A8]
	0x031BEF38 MOV V8.16B, V6.16B
	0x031BEF3C MOV V9.16B, V5.16B
	0x031BEF40 MOV V10.16B, V4.16B
	0x031BEF44 MOV V11.16B, V3.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x121E000
	006 Move X21, 0xF38000
	007 Move W8, [X20+3876]
	008 Move X21, [X21+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF38000
	015 Move X0, [X0+1448]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+3876], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call LeanTween.resume, X0
	031 Return 

Method: LTDescr LeanRotate(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BEF48 MOV V12.16B, V2.16B
	0x031BEF4C MOV V13.16B, V1.16B
	0x031BEF50 MOV V14.16B, V0.16B
	0x031BEF54 MOV X19, X0
	0x031BEF58 TBNZ X8, 0x0, 0x31BEF70
	0x031BEF5C ADRP X0, 0xF37000
	0x031BEF60 LDR X0, [X0 + 0x5A8]
	0x031BEF64 BL 0x1C16CF4
	0x031BEF68 MOVZ W8, 0x1
	0x031BEF6C STRB W8, [X21 + 0xF41]
	0x031BEF70 LDR X0, [X20]
	0x031BEF74 LDR W8, [X0 + 0xE0]
	0x031BEF78 CBNZ W8, 0x31BEF80
	0x031BEF7C BL 0x1C16DFC
	0x031BEF80 MOV X0, X19
	0x031BEF84 MOV V1.16B, V13.16B
	0x031BEF88 MOV V2.16B, V12.16B
	0x031BEF8C MOV V3.16B, V11.16B
	0x031BEF90 MOV V4.16B, V10.16B
	0x031BEF94 MOV V5.16B, V9.16B
	0x031BEF98 MOV V6.16B, V8.16B
	0x031BEF9C LDP X20, X19, [X31 + 0x50]
	0x031BEFA0 LDP X30, X21, [X31 + 0x40]
	0x031BEFA4 LDP D9, D8, [X31 + 0x30]
	0x031BEFA8 LDP D11, D10, [X31 + 0x20]
	0x031BEFAC LDP D13, D12, [X31 + 0x10]
	0x031BEFB0 MOV V0.16B, V14.16B
	0x031BEFB4 MOV X1, X31
	0x031BEFB8 LDR V14, [X31], #0x60
	0x031BEFBC B 0x31B2478
	0x031BEFC0 STR D10, [X31 - 0x40]!
	0x031BEFC4 STP D9, D8, [X31 + 0x8]
	0x031BEFC8 STR X30, [X31 + 0x18]
	0x031BEFCC STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121E000
	010 Move X20, 0xF38000
	011 Move W8, [X21+3877]
	012 Move X20, [X20+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF38000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3877], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move V2, V9
	034 Move V3, V8
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move V0, V11
	042 Move V1, V10
	043 Move X1, X31
	044 Move D11, [X31+64]
	045 Move D10, [X31+72]
	046 Call LeanTween.rotate, X0, X1, V0
	047 Return X0

Method: LTDescr LeanRotate(UnityEngine.Transform transform, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BEFD0 STP X20, X19, [X31 + 0x30]
	0x031BEFD4 ADRP X21, 0x121D000
	0x031BEFD8 ADRP X22, 0xF37000
	0x031BEFDC LDRB W8, [X21 + 0xF42]
	0x031BEFE0 LDR X22, [X22 + 0x5A8]
	0x031BEFE4 MOV V8.16B, V2.16B
	0x031BEFE8 MOV V9.16B, V1.16B
	0x031BEFEC MOV V10.16B, V0.16B
	0x031BEFF0 MOV X19, X1
	0x031BEFF4 MOV X20, X0
	0x031BEFF8 TBNZ X8, 0x0, 0x31BF010
	0x031BEFFC ADRP X0, 0xF37000
	0x031BF000 LDR X0, [X0 + 0x5A8]
	0x031BF004 BL 0x1C16CF4
	0x031BF008 MOVZ W8, 0x1
	0x031BF00C STRB W8, [X21 + 0xF42]
	0x031BF010 LDR X0, [X22]
	0x031BF014 LDR W8, [X0 + 0xE0]
	0x031BF018 CBNZ W8, 0x31BF020
	0x031BF01C BL 0x1C16DFC
	0x031BF020 MOV X0, X20
	0x031BF024 MOV X1, X19
	0x031BF028 MOV V1.16B, V9.16B
	0x031BF02C MOV V2.16B, V8.16B
	0x031BF030 LDP X20, X19, [X31 + 0x30]
	0x031BF034 LDP X22, X21, [X31 + 0x20]
	0x031BF038 LDR X30, [X31 + 0x18]
	0x031BF03C LDP D9, D8, [X31 + 0x8]
	0x031BF040 MOV V0.16B, V10.16B
	0x031BF044 MOV X2, X31
	0x031BF048 LDR V10, [X31], #0x40
	0x031BF04C B 0x31B2684
	0x031BF050 STR D10, [X31 - 0x40]!
	0x031BF054 STP D9, D8, [X31 + 0x8]
	0x031BF058 STR X30, [X31 + 0x18]
	0x031BF05C STP X22, X21, [X31 + 0x20]
	0x031BF060 STP X20, X19, [X31 + 0x30]
	0x031BF064 ADRP X21, 0x121C000
	0x031BF068 ADRP X22, 0xF36000
	0x031BF06C LDRB W8, [X21 + 0xF43]
	0x031BF070 LDR X22, [X22 + 0x5A8]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x121E000
	009 Move W8, [X20+3878]
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF37000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3878], W8
	024 Compare X19, 0
	025 JumpIfEqual {53}
	026 Move X20, 0xF37000
	027 Move X20, [X20+1448]
	028 Move X0, X19
	029 Move X1, X31
	030 Call Component.get_gameObject, X0
	031 Move X8, [X20]
	032 Move X19, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 Move V0, V11
	047 Move V1, V10
	048 Move X1, X31
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.rotate, X0, X1, V0
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr LeanRotate(UnityEngine.RectTransform rectTransform, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BF074 MOV V8.16B, V2.16B
	0x031BF078 MOV V9.16B, V1.16B
	0x031BF07C MOV V10.16B, V0.16B
	0x031BF080 MOV X19, X1
	0x031BF084 MOV X20, X0
	0x031BF088 TBNZ X8, 0x0, 0x31BF0A0
	0x031BF08C ADRP X0, 0xF36000
	0x031BF090 LDR X0, [X0 + 0x5A8]
	0x031BF094 BL 0x1C16CF4
	0x031BF098 MOVZ W8, 0x1
	0x031BF09C STRB W8, [X21 + 0xF43]
	0x031BF0A0 LDR X0, [X22]
	0x031BF0A4 LDR W8, [X0 + 0xE0]
	0x031BF0A8 CBNZ W8, 0x31BF0B0
	0x031BF0AC BL 0x1C16DFC
	0x031BF0B0 MOV X0, X20
	0x031BF0B4 MOV X1, X19
	0x031BF0B8 MOV V1.16B, V9.16B
	0x031BF0BC MOV V2.16B, V8.16B
	0x031BF0C0 LDP X20, X19, [X31 + 0x30]
	0x031BF0C4 LDP X22, X21, [X31 + 0x20]
	0x031BF0C8 LDR X30, [X31 + 0x18]
	0x031BF0CC LDP D9, D8, [X31 + 0x8]
	0x031BF0D0 MOV V0.16B, V10.16B
	0x031BF0D4 MOV X2, X31
	0x031BF0D8 LDR V10, [X31], #0x40
	0x031BF0DC B 0x31B2768
	0x031BF0E0 STR D10, [X31 - 0x40]!
	0x031BF0E4 STP D9, D8, [X31 + 0x8]
	0x031BF0E8 STR X30, [X31 + 0x18]
	0x031BF0EC STP X22, X21, [X31 + 0x20]
	0x031BF0F0 STP X20, X19, [X31 + 0x30]
	0x031BF0F4 ADRP X21, 0x121C000
	0x031BF0F8 ADRP X22, 0xF36000

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121D000
	010 Move X20, 0xF37000
	011 Move W8, [X21+3879]
	012 Move X20, [X20+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF37000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3879], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move V2, V9
	034 Move V3, V8
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move V0, V11
	042 Move V1, V10
	043 Move X1, X31
	044 Move D11, [X31+64]
	045 Move D10, [X31+72]
	046 Call LeanTween.rotate, X0, X1, V0
	047 Return X0

Method: LTDescr LeanRotateAround(UnityEngine.GameObject gameObject, UnityEngine.Vector3 axis, System.Single add, System.Single time)

Disassembly:
	0x031BF0FC LDRB W8, [X21 + 0xF44]
	0x031BF100 LDR X22, [X22 + 0x5A8]
	0x031BF104 MOV V8.16B, V2.16B
	0x031BF108 MOV V9.16B, V1.16B
	0x031BF10C MOV V10.16B, V0.16B
	0x031BF110 MOV X19, X1
	0x031BF114 MOV X20, X0
	0x031BF118 TBNZ X8, 0x0, 0x31BF130
	0x031BF11C ADRP X0, 0xF36000
	0x031BF120 LDR X0, [X0 + 0x5A8]
	0x031BF124 BL 0x1C16CF4
	0x031BF128 MOVZ W8, 0x1
	0x031BF12C STRB W8, [X21 + 0xF44]
	0x031BF130 LDR X0, [X22]
	0x031BF134 LDR W8, [X0 + 0xE0]
	0x031BF138 CBNZ W8, 0x31BF140
	0x031BF13C BL 0x1C16DFC
	0x031BF140 MOV X0, X20
	0x031BF144 MOV X1, X19
	0x031BF148 MOV V1.16B, V9.16B
	0x031BF14C MOV V2.16B, V8.16B
	0x031BF150 LDP X20, X19, [X31 + 0x30]
	0x031BF154 LDP X22, X21, [X31 + 0x20]
	0x031BF158 LDR X30, [X31 + 0x18]
	0x031BF15C LDP D9, D8, [X31 + 0x8]
	0x031BF160 MOV V0.16B, V10.16B
	0x031BF164 MOV X2, X31
	0x031BF168 LDR V10, [X31], #0x40
	0x031BF16C B 0x31B2CAC
	0x031BF170 STP D15, D14, [X31 - 0x70]!
	0x031BF174 STP D13, D12, [X31 + 0x10]
	0x031BF178 STP D11, D10, [X31 + 0x20]
	0x031BF17C STP D9, D8, [X31 + 0x30]
	0x031BF180 STR X30, [X31 + 0x40]
	0x031BF184 STP X22, X21, [X31 + 0x50]
	0x031BF188 STP X20, X19, [X31 + 0x60]
	0x031BF18C ADRP X22, 0x121C000
	0x031BF190 ADRP X21, 0xF36000

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x121D000
	011 Move X20, 0xF37000
	012 Move W8, [X21+3880]
	013 Move X20, [X20+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF37000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3880], W8
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move V1, V11
	036 Move V2, V10
	037 Move V3, V9
	038 Move V4, V8
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move V0, V12
	048 Move X1, X31
	049 Move V12, [X31+80]
	050 Call LeanTween.rotateAround, X0, X1, V0, V1
	051 Return X0

Method: LTDescr LeanRotateAround(UnityEngine.Transform transform, UnityEngine.Vector3 axis, System.Single add, System.Single time)

Disassembly:
	0x031BF194 LDRB W8, [X22 + 0xF45]
	0x031BF198 LDR V16, [X31 + 0x70]
	0x031BF19C LDR X21, [X21 + 0x5A8]
	0x031BF1A0 MOV X19, X1
	0x031BF1A4 MOV X20, X0
	0x031BF1A8 TBNZ X8, 0x0, 0x31BF208
	0x031BF1AC ADRP X0, 0xF36000
	0x031BF1B0 LDR X0, [X0 + 0x5A8]
	0x031BF1B4 MOV V9.16B, V7.16B
	0x031BF1B8 MOV V10.16B, V6.16B
	0x031BF1BC MOV V11.16B, V5.16B
	0x031BF1C0 MOV V12.16B, V4.16B
	0x031BF1C4 MOV V13.16B, V3.16B
	0x031BF1C8 MOV V14.16B, V2.16B
	0x031BF1CC MOV V15.16B, V1.16B
	0x031BF1D0 MOV V8.16B, V0.16B
	0x031BF1D4 STR S16, [X31 + 0x4C]
	0x031BF1D8 BL 0x1C16CF4
	0x031BF1DC LDR V16, [X31 + 0x4C]
	0x031BF1E0 MOV V0.16B, V8.16B
	0x031BF1E4 MOV V1.16B, V15.16B
	0x031BF1E8 MOV V2.16B, V14.16B
	0x031BF1EC MOV V3.16B, V13.16B
	0x031BF1F0 MOV V4.16B, V12.16B
	0x031BF1F4 MOV V5.16B, V11.16B
	0x031BF1F8 MOV V6.16B, V10.16B
	0x031BF1FC MOV V7.16B, V9.16B
	0x031BF200 MOVZ W8, 0x1
	0x031BF204 STRB W8, [X22 + 0xF45]
	0x031BF208 LDR X0, [X21]
	0x031BF20C LDR W8, [X0 + 0xE0]
	0x031BF210 CBNZ W8, 0x31BF260
	0x031BF214 MOV V9.16B, V7.16B
	0x031BF218 MOV V10.16B, V6.16B
	0x031BF21C MOV V11.16B, V5.16B
	0x031BF220 MOV V12.16B, V4.16B
	0x031BF224 MOV V13.16B, V3.16B
	0x031BF228 MOV V14.16B, V2.16B
	0x031BF22C MOV V15.16B, V1.16B
	0x031BF230 MOV V8.16B, V0.16B
	0x031BF234 STR S16, [X31 + 0x4C]
	0x031BF238 BL 0x1C16DFC
	0x031BF23C LDR V16, [X31 + 0x4C]
	0x031BF240 MOV V0.16B, V8.16B
	0x031BF244 MOV V1.16B, V15.16B

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x121D000
	010 Move W8, [X20+3881]
	011 Move V8, V4
	012 Move V9, V3
	013 Move V10, V2
	014 Move V11, V1
	015 Move V12, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF37000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3881], W8
	026 Compare X19, 0
	027 JumpIfEqual {57}
	028 Move X20, 0xF37000
	029 Move X20, [X20+1448]
	030 Move X0, X19
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Move X8, [X20]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move V1, V11
	042 Move V2, V10
	043 Move V3, V9
	044 Move V4, V8
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X30, [X31+40]
	048 Move D9, [X31+24]
	049 Move D8, [X31+32]
	050 Move D11, [X31+8]
	051 Move D10, [X31+16]
	052 Move V0, V12
	053 Move X1, X31
	054 Move V12, [X31+64]
	055 Call LeanTween.rotateAround, X0, X1, V0, V1
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr LeanRotateAround(UnityEngine.RectTransform rectTransform, UnityEngine.Vector3 axis, System.Single add, System.Single time)

Disassembly:
	0x031BF248 MOV V2.16B, V14.16B
	0x031BF24C MOV V3.16B, V13.16B
	0x031BF250 MOV V4.16B, V12.16B
	0x031BF254 MOV V5.16B, V11.16B
	0x031BF258 MOV V6.16B, V10.16B
	0x031BF25C MOV V7.16B, V9.16B
	0x031BF260 MOV X0, X20
	0x031BF264 MOV X1, X19
	0x031BF268 LDP X20, X19, [X31 + 0x60]
	0x031BF26C LDP X22, X21, [X31 + 0x50]
	0x031BF270 LDR X30, [X31 + 0x40]
	0x031BF274 LDP D9, D8, [X31 + 0x30]
	0x031BF278 LDP D11, D10, [X31 + 0x20]
	0x031BF27C LDP D13, D12, [X31 + 0x10]
	0x031BF280 STR S16, [X31 + 0x70]
	0x031BF284 MOV X2, X31
	0x031BF288 LDP D15, D14, [X31], #0x70
	0x031BF28C B 0x31B284C
	0x031BF290 STR D12, [X31 - 0x50]!
	0x031BF294 STP D11, D10, [X31 + 0x8]
	0x031BF298 STP D9, D8, [X31 + 0x18]
	0x031BF29C STR X30, [X31 + 0x28]
	0x031BF2A0 STP X22, X21, [X31 + 0x30]
	0x031BF2A4 STP X20, X19, [X31 + 0x40]
	0x031BF2A8 ADRP X22, 0x121C000
	0x031BF2AC ADRP X21, 0xF36000
	0x031BF2B0 LDRB W8, [X22 + 0xF46]
	0x031BF2B4 LDR X21, [X21 + 0x5A8]
	0x031BF2B8 MOV V8.16B, V4.16B
	0x031BF2BC MOV V9.16B, V3.16B
	0x031BF2C0 MOV V10.16B, V2.16B
	0x031BF2C4 MOV V11.16B, V1.16B
	0x031BF2C8 MOV V12.16B, V0.16B
	0x031BF2CC MOV X19, X1
	0x031BF2D0 MOV X20, X0
	0x031BF2D4 TBNZ X8, 0x0, 0x31BF2EC
	0x031BF2D8 ADRP X0, 0xF36000
	0x031BF2DC LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x121D000
	011 Move X20, 0xF37000
	012 Move W8, [X21+3882]
	013 Move X20, [X20+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF37000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3882], W8
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move V1, V11
	036 Move V2, V10
	037 Move V3, V9
	038 Move V4, V8
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move V0, V12
	048 Move X1, X31
	049 Move V12, [X31+80]
	050 Call LeanTween.rotateAround, X0, X1, V0, V1
	051 Return X0

Method: LTDescr LeanRotateAroundLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3 axis, System.Single add, System.Single time)

Disassembly:
	0x031BF2E0 BL 0x1C16CF4
	0x031BF2E4 MOVZ W8, 0x1
	0x031BF2E8 STRB W8, [X22 + 0xF46]
	0x031BF2EC LDR X0, [X21]
	0x031BF2F0 LDR W8, [X0 + 0xE0]
	0x031BF2F4 CBNZ W8, 0x31BF2FC
	0x031BF2F8 BL 0x1C16DFC
	0x031BF2FC MOV X0, X20
	0x031BF300 MOV X1, X19
	0x031BF304 MOV V1.16B, V11.16B
	0x031BF308 MOV V2.16B, V10.16B
	0x031BF30C MOV V3.16B, V9.16B
	0x031BF310 MOV V4.16B, V8.16B
	0x031BF314 LDP X20, X19, [X31 + 0x40]
	0x031BF318 LDP X22, X21, [X31 + 0x30]
	0x031BF31C LDR X30, [X31 + 0x28]
	0x031BF320 LDP D9, D8, [X31 + 0x18]
	0x031BF324 LDP D11, D10, [X31 + 0x8]
	0x031BF328 MOV V0.16B, V12.16B
	0x031BF32C MOV X2, X31
	0x031BF330 LDR V12, [X31], #0x50
	0x031BF334 B 0x31B2AB4
	0x031BF338 STR D14, [X31 - 0x60]!
	0x031BF33C STP D13, D12, [X31 + 0x8]
	0x031BF340 STP D11, D10, [X31 + 0x18]
	0x031BF344 STP D9, D8, [X31 + 0x28]
	0x031BF348 STR X30, [X31 + 0x38]
	0x031BF34C STP X22, X21, [X31 + 0x40]
	0x031BF350 STP X20, X19, [X31 + 0x50]
	0x031BF354 ADRP X22, 0x121C000
	0x031BF358 ADRP X21, 0xF36000
	0x031BF35C LDRB W8, [X22 + 0xF47]
	0x031BF360 LDR X21, [X21 + 0x5A8]
	0x031BF364 MOV V8.16B, V6.16B
	0x031BF368 MOV V9.16B, V5.16B
	0x031BF36C MOV V10.16B, V4.16B
	0x031BF370 MOV V11.16B, V3.16B
	0x031BF374 MOV V12.16B, V2.16B

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x121D000
	011 Move X20, 0xF37000
	012 Move W8, [X21+3883]
	013 Move X20, [X20+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF37000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3883], W8
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move V1, V11
	036 Move V2, V10
	037 Move V3, V9
	038 Move V4, V8
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move V0, V12
	048 Move X1, X31
	049 Move V12, [X31+80]
	050 Call LeanTween.rotateAroundLocal, X0, X1, V0, V1
	051 Return X0

Method: LTDescr LeanRotateAroundLocal(UnityEngine.Transform transform, UnityEngine.Vector3 axis, System.Single add, System.Single time)

Disassembly:
	0x031BF378 MOV V13.16B, V1.16B
	0x031BF37C MOV V14.16B, V0.16B
	0x031BF380 MOV X19, X1
	0x031BF384 MOV X20, X0
	0x031BF388 TBNZ X8, 0x0, 0x31BF3A0
	0x031BF38C ADRP X0, 0xF36000
	0x031BF390 LDR X0, [X0 + 0x5A8]
	0x031BF394 BL 0x1C16CF4
	0x031BF398 MOVZ W8, 0x1
	0x031BF39C STRB W8, [X22 + 0xF47]
	0x031BF3A0 LDR X0, [X21]
	0x031BF3A4 LDR W8, [X0 + 0xE0]
	0x031BF3A8 CBNZ W8, 0x31BF3B0
	0x031BF3AC BL 0x1C16DFC
	0x031BF3B0 MOV X0, X20
	0x031BF3B4 MOV X1, X19
	0x031BF3B8 MOV V1.16B, V13.16B
	0x031BF3BC MOV V2.16B, V12.16B
	0x031BF3C0 MOV V3.16B, V11.16B
	0x031BF3C4 MOV V4.16B, V10.16B
	0x031BF3C8 MOV V5.16B, V9.16B
	0x031BF3CC MOV V6.16B, V8.16B
	0x031BF3D0 LDP X20, X19, [X31 + 0x50]
	0x031BF3D4 LDP X22, X21, [X31 + 0x40]
	0x031BF3D8 LDR X30, [X31 + 0x38]
	0x031BF3DC LDP D9, D8, [X31 + 0x28]
	0x031BF3E0 LDP D11, D10, [X31 + 0x18]
	0x031BF3E4 LDP D13, D12, [X31 + 0x8]
	0x031BF3E8 MOV V0.16B, V14.16B
	0x031BF3EC MOV X2, X31
	0x031BF3F0 LDR V14, [X31], #0x60
	0x031BF3F4 B 0x31B2BA8
	0x031BF3F8 STP D9, D8, [X31 - 0x20]!
	0x031BF3FC STP X30, X19, [X31 + 0x10]
	0x031BF400 CBZ X0, 0x31BF440
	0x031BF404 MOV X1, X31
	0x031BF408 MOV V8.16B, V0.16B
	0x031BF40C MOV X19, X0
	0x031BF410 BL 0x3C3F58C
	0x031BF414 MOV X0, X19
	0x031BF418 MOV X1, X31
	0x031BF41C MOV V9.16B, V1.16B
	0x031BF420 BL 0x3C3F58C
	0x031BF424 MOV X0, X19
	0x031BF428 LDP X30, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-64], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x121D000
	010 Move W8, [X20+3884]
	011 Move V8, V4
	012 Move V9, V3
	013 Move V10, V2
	014 Move V11, V1
	015 Move V12, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0xF37000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+3884], W8
	026 Compare X19, 0
	027 JumpIfEqual {57}
	028 Move X20, 0xF37000
	029 Move X20, [X20+1448]
	030 Move X0, X19
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Move X8, [X20]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X19
	041 Move V1, V11
	042 Move V2, V10
	043 Move V3, V9
	044 Move V4, V8
	045 Move X20, [X31+48]
	046 Move X19, [X31+56]
	047 Move X30, [X31+40]
	048 Move D9, [X31+24]
	049 Move D8, [X31+32]
	050 Move D11, [X31+8]
	051 Move D10, [X31+16]
	052 Move V0, V12
	053 Move X1, X31
	054 Move V12, [X31+64]
	055 Call LeanTween.rotateAroundLocal, X0, X1, V0, V1
	056 Return X0
	057 Call 0x1C17F20

Method: LTDescr LeanRotateAroundLocal(UnityEngine.RectTransform rectTransform, UnityEngine.Vector3 axis, System.Single add, System.Single time)

Disassembly:
	0x031BF42C MOV V0.16B, V8.16B
	0x031BF430 MOV V1.16B, V9.16B
	0x031BF434 MOV X1, X31
	0x031BF438 LDP D9, D8, [X31], #0x20
	0x031BF43C B 0x3C3F62C
	0x031BF440 BL 0x1C16F20
	0x031BF444 STP D9, D8, [X31 - 0x20]!
	0x031BF448 STP X30, X19, [X31 + 0x10]
	0x031BF44C CBZ X0, 0x31BF48C
	0x031BF450 MOV X1, X31
	0x031BF454 MOV V8.16B, V0.16B
	0x031BF458 MOV X19, X0
	0x031BF45C BL 0x3C3F58C
	0x031BF460 MOV X0, X19
	0x031BF464 MOV X1, X31
	0x031BF468 MOV V9.16B, V0.16B
	0x031BF46C BL 0x3C3F58C
	0x031BF470 MOV X0, X19
	0x031BF474 LDP X30, X19, [X31 + 0x10]
	0x031BF478 MOV V0.16B, V9.16B
	0x031BF47C MOV V1.16B, V8.16B
	0x031BF480 MOV X1, X31
	0x031BF484 LDP D9, D8, [X31], #0x20
	0x031BF488 B 0x3C3F62C
	0x031BF48C BL 0x1C16F20
	0x031BF490 STP D9, D8, [X31 - 0x20]!
	0x031BF494 STP X30, X19, [X31 + 0x10]
	0x031BF498 CBZ X0, 0x31BF4D8
	0x031BF49C MOV X1, X31
	0x031BF4A0 MOV V8.16B, V0.16B
	0x031BF4A4 MOV X19, X0
	0x031BF4A8 BL 0x3C3F58C
	0x031BF4AC MOV X0, X19
	0x031BF4B0 MOV X1, X31
	0x031BF4B4 MOV V9.16B, V0.16B
	0x031BF4B8 BL 0x3C3F58C
	0x031BF4BC MOV X0, X19
	0x031BF4C0 LDP X30, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x121D000
	011 Move X20, 0xF37000
	012 Move W8, [X21+3885]
	013 Move X20, [X20+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF37000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3885], W8
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move V1, V11
	036 Move V2, V10
	037 Move V3, V9
	038 Move V4, V8
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move V0, V12
	048 Move X1, X31
	049 Move V12, [X31+80]
	050 Call LeanTween.rotateAroundLocal, X0, X1, V0, V1
	051 Return X0

Method: LTDescr LeanRotateX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BF4C4 MOV V0.16B, V9.16B
	0x031BF4C8 MOV V2.16B, V8.16B
	0x031BF4CC MOV X1, X31
	0x031BF4D0 LDP D9, D8, [X31], #0x20
	0x031BF4D4 B 0x3C3F62C
	0x031BF4D8 BL 0x1C16F20
	0x031BF4DC STP D9, D8, [X31 - 0x20]!
	0x031BF4E0 STP X30, X19, [X31 + 0x10]
	0x031BF4E4 CBZ X0, 0x31BF524
	0x031BF4E8 MOV X1, X31
	0x031BF4EC MOV V8.16B, V0.16B
	0x031BF4F0 MOV X19, X0
	0x031BF4F4 BL 0x3C3EB78
	0x031BF4F8 MOV X0, X19
	0x031BF4FC MOV X1, X31
	0x031BF500 MOV V9.16B, V1.16B
	0x031BF504 BL 0x3C3EB78
	0x031BF508 MOV X0, X19
	0x031BF50C LDP X30, X19, [X31 + 0x10]
	0x031BF510 MOV V0.16B, V8.16B
	0x031BF514 MOV V1.16B, V9.16B
	0x031BF518 MOV X1, X31
	0x031BF51C LDP D9, D8, [X31], #0x20
	0x031BF520 B 0x3C3EC04
	0x031BF524 BL 0x1C16F20
	0x031BF528 STP D9, D8, [X31 - 0x20]!
	0x031BF52C STP X30, X19, [X31 + 0x10]
	0x031BF530 CBZ X0, 0x31BF570

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121D000
	008 Move X21, 0xF37000
	009 Move W8, [X20+3886]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF37000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3886], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.rotateX, X0, V0, V1
	039 Return X0

Method: LTDescr LeanRotateX(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BF534 MOV X1, X31
	0x031BF538 MOV V8.16B, V0.16B
	0x031BF53C MOV X19, X0
	0x031BF540 BL 0x3C3EB78
	0x031BF544 MOV X0, X19
	0x031BF548 MOV X1, X31
	0x031BF54C MOV V9.16B, V0.16B
	0x031BF550 BL 0x3C3EB78
	0x031BF554 MOV X0, X19
	0x031BF558 LDP X30, X19, [X31 + 0x10]
	0x031BF55C MOV V0.16B, V9.16B
	0x031BF560 MOV V1.16B, V8.16B
	0x031BF564 MOV X1, X31
	0x031BF568 LDP D9, D8, [X31], #0x20
	0x031BF56C B 0x3C3EC04
	0x031BF570 BL 0x1C16F20
	0x031BF574 STP D9, D8, [X31 - 0x20]!
	0x031BF578 STP X30, X19, [X31 + 0x10]
	0x031BF57C CBZ X0, 0x31BF5BC
	0x031BF580 MOV X1, X31
	0x031BF584 MOV V8.16B, V0.16B
	0x031BF588 MOV X19, X0
	0x031BF58C BL 0x3C3EB78
	0x031BF590 MOV X0, X19
	0x031BF594 MOV X1, X31
	0x031BF598 MOV V9.16B, V0.16B
	0x031BF59C BL 0x3C3EB78
	0x031BF5A0 MOV X0, X19
	0x031BF5A4 LDP X30, X19, [X31 + 0x10]
	0x031BF5A8 MOV V0.16B, V9.16B
	0x031BF5AC MOV V2.16B, V8.16B
	0x031BF5B0 MOV X1, X31
	0x031BF5B4 LDP D9, D8, [X31], #0x20
	0x031BF5B8 B 0x3C3EC04
	0x031BF5BC BL 0x1C16F20

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121D000
	007 Move W8, [X20+3887]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF37000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3887], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF37000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.rotateX, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanRotateY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BF5C0 STR X30, [X31 - 0x20]!
	0x031BF5C4 STP X20, X19, [X31 + 0x10]
	0x031BF5C8 ADRP X20, 0x121C000
	0x031BF5CC LDRB W8, [X20 + 0xF48]
	0x031BF5D0 MOV X19, X0
	0x031BF5D4 TBNZ X8, 0x0, 0x31BF5EC
	0x031BF5D8 ADRP X0, 0xF60000
	0x031BF5DC LDR X0, [X0 + 0x5A0]
	0x031BF5E0 BL 0x1C16CF4
	0x031BF5E4 MOVZ W8, 0x1
	0x031BF5E8 STRB W8, [X20 + 0xF48]
	0x031BF5EC CBZ X19, 0x31BF624
	0x031BF5F0 ADRP X8, 0xF60000
	0x031BF5F4 LDR X8, [X8 + 0x5A0]
	0x031BF5F8 MOV X0, X19
	0x031BF5FC LDR X1, [X8]
	0x031BF600 BL 0x21A3894
	0x031BF604 CBZ X0, 0x31BF624
	0x031BF608 MOV X1, X31
	0x031BF60C BL 0x3C1341C
	0x031BF610 CBZ X0, 0x31BF624
	0x031BF614 LDP X20, X19, [X31 + 0x10]
	0x031BF618 MOV X1, X31
	0x031BF61C LDR X30, [X31], #0x20
	0x031BF620 B 0x3C14794
	0x031BF624 BL 0x1C16F20
	0x031BF628 LDP S0, S1, [X0 + 0x60]
	0x031BF62C LDR V2, [X0 + 0x68]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121D000
	008 Move X21, 0xF37000
	009 Move W8, [X20+3888]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF37000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3888], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.rotateY, X0, V0, V1
	039 Return X0

Method: LTDescr LeanRotateY(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BF630 RET
	0x031BF634 STP S0, S1, [X0 + 0x60]
	0x031BF638 STR S2, [X0 + 0x68]
	0x031BF63C RET
	0x031BF640 LDP S0, S1, [X0 + 0x6C]
	0x031BF644 LDR V2, [X0 + 0x74]
	0x031BF648 RET
	0x031BF64C STP S0, S1, [X0 + 0x6C]
	0x031BF650 STR S2, [X0 + 0x74]
	0x031BF654 RET
	0x031BF658 LDR X0, [X0 + 0xA8]
	0x031BF65C RET
	0x031BF660 STR X1, [X0 + 0xA8]
	0x031BF664 RET
	0x031BF668 LDR X0, [X0 + 0xB0]
	0x031BF66C RET
	0x031BF670 STR X1, [X0 + 0xB0]
	0x031BF674 RET
	0x031BF678 STR X30, [X31 - 0x10]!
	0x031BF67C LDR X8, [X0 + 0xE8]
	0x031BF680 CBZ X8, 0x31BF690
	0x031BF684 LDR X0, [X8 + 0x10]
	0x031BF688 LDR X30, [X31], #0x10
	0x031BF68C RET
	0x031BF690 BL 0x1C16F20
	0x031BF694 SUB X31, X31, 0x70
	0x031BF698 STR X30, [X31 + 0x40]
	0x031BF69C STP X22, X21, [X31 + 0x50]
	0x031BF6A0 STP X20, X19, [X31 + 0x60]
	0x031BF6A4 ADRP X22, 0x121C000
	0x031BF6A8 ADRP X21, 0xF34000
	0x031BF6AC ADRP X20, 0xF34000
	0x031BF6B0 LDRB W8, [X22 + 0xF49]
	0x031BF6B4 LDR X21, [X21 + 0xAC8]
	0x031BF6B8 LDR X20, [X20 + 0x598]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121D000
	007 Move W8, [X20+3889]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF37000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3889], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF37000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.rotateY, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanRotateZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BF6BC MOV X19, X0
	0x031BF6C0 TBNZ X8, 0x0, 0x31BF7BC
	0x031BF6C4 ADRP X0, 0xF34000
	0x031BF6C8 LDR X0, [X0 + 0xB58]
	0x031BF6CC BL 0x1C16CF4
	0x031BF6D0 ADRP X0, 0xF60000
	0x031BF6D4 LDR X0, [X0 + 0x610]
	0x031BF6D8 BL 0x1C16CF4
	0x031BF6DC ADRP X0, 0xF34000
	0x031BF6E0 LDR X0, [X0 + 0x598]
	0x031BF6E4 BL 0x1C16CF4
	0x031BF6E8 ADRP X0, 0xF34000
	0x031BF6EC LDR X0, [X0 + 0xAC8]
	0x031BF6F0 BL 0x1C16CF4
	0x031BF6F4 ADRP X0, 0xF60000
	0x031BF6F8 LDR X0, [X0 + 0x618]
	0x031BF6FC BL 0x1C16CF4
	0x031BF700 ADRP X0, 0xF60000
	0x031BF704 LDR X0, [X0 + 0x620]
	0x031BF708 BL 0x1C16CF4
	0x031BF70C ADRP X0, 0xF60000
	0x031BF710 LDR X0, [X0 + 0x628]
	0x031BF714 BL 0x1C16CF4
	0x031BF718 ADRP X0, 0xF60000
	0x031BF71C LDR X0, [X0 + 0x630]
	0x031BF720 BL 0x1C16CF4
	0x031BF724 ADRP X0, 0xF60000
	0x031BF728 LDR X0, [X0 + 0x638]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121D000
	008 Move X21, 0xF37000
	009 Move W8, [X20+3890]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF37000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3890], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.rotateZ, X0, V0, V1
	039 Return X0

Method: LTDescr LeanRotateZ(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BF72C BL 0x1C16CF4
	0x031BF730 ADRP X0, 0xF60000
	0x031BF734 LDR X0, [X0 + 0x640]
	0x031BF738 BL 0x1C16CF4
	0x031BF73C ADRP X0, 0xF60000
	0x031BF740 LDR X0, [X0 + 0x648]
	0x031BF744 BL 0x1C16CF4
	0x031BF748 ADRP X0, 0xF60000
	0x031BF74C LDR X0, [X0 + 0x650]
	0x031BF750 BL 0x1C16CF4
	0x031BF754 ADRP X0, 0xF60000
	0x031BF758 LDR X0, [X0 + 0x658]
	0x031BF75C BL 0x1C16CF4
	0x031BF760 ADRP X0, 0xF60000
	0x031BF764 LDR X0, [X0 + 0x660]
	0x031BF768 BL 0x1C16CF4
	0x031BF76C ADRP X0, 0xF60000
	0x031BF770 LDR X0, [X0 + 0x668]
	0x031BF774 BL 0x1C16CF4
	0x031BF778 ADRP X0, 0xF60000
	0x031BF77C LDR X0, [X0 + 0x670]
	0x031BF780 BL 0x1C16CF4
	0x031BF784 ADRP X0, 0xF60000
	0x031BF788 LDR X0, [X0 + 0x678]
	0x031BF78C BL 0x1C16CF4
	0x031BF790 ADRP X0, 0xF60000
	0x031BF794 LDR X0, [X0 + 0x680]
	0x031BF798 BL 0x1C16CF4
	0x031BF79C ADRP X0, 0xF60000
	0x031BF7A0 LDR X0, [X0 + 0x688]
	0x031BF7A4 BL 0x1C16CF4
	0x031BF7A8 ADRP X0, 0xF60000
	0x031BF7AC LDR X0, [X0 + 0x690]
	0x031BF7B0 BL 0x1C16CF4
	0x031BF7B4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121D000
	007 Move W8, [X20+3891]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF37000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3891], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF37000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.rotateZ, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanScale(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BF7B8 STRB W8, [X22 + 0xF49]
	0x031BF7BC LDR X0, [X21]
	0x031BF7C0 MOVZ W1, 0x1B
	0x031BF7C4 STR W31, [X31 + 0x38]
	0x031BF7C8 STR X31, [X31 + 0x30]
	0x031BF7CC STR W31, [X31 + 0x4C]
	0x031BF7D0 BL 0x1C16D6C
	0x031BF7D4 LDR X8, [X20]
	0x031BF7D8 LDR X21, [X19 + 0x58]
	0x031BF7DC MOV X20, X0
	0x031BF7E0 LDR W9, [X8 + 0xE0]
	0x031BF7E4 CBNZ W9, 0x31BF7F0
	0x031BF7E8 MOV X0, X8
	0x031BF7EC BL 0x1C16DFC
	0x031BF7F0 MOV X0, X21
	0x031BF7F4 MOV X1, X31
	0x031BF7F8 MOV X2, X31
	0x031BF7FC BL 0x3C354F8
	0x031BF800 TBZ X0, 0x0, 0x31BF840
	0x031BF804 LDR X0, [X19 + 0x58]
	0x031BF808 CBZ X0, 0x31BFBD0
	0x031BF80C MOV X1, X31
	0x031BF810 BL 0x3C32ECC
	0x031BF814 CBZ X0, 0x31BFBD0
	0x031BF818 MOV X1, X31
	0x031BF81C BL 0x3C389D4
	0x031BF820 ADRP X8, 0xF60000
	0x031BF824 LDR X8, [X8 + 0x620]
	0x031BF828 MOV X1, X0
	0x031BF82C MOV X2, X31
	0x031BF830 LDR X8, [X8]
	0x031BF834 MOV X0, X8
	0x031BF838 BL 0x321B938
	0x031BF83C B 0x31BF84C

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121D000
	010 Move X20, 0xF37000
	011 Move W8, [X21+3892]
	012 Move X20, [X20+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF37000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3892], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move V2, V9
	034 Move V3, V8
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move V0, V11
	042 Move V1, V10
	043 Move X1, X31
	044 Move D11, [X31+64]
	045 Move D10, [X31+72]
	046 Call LeanTween.scale, X0, X1, V0
	047 Return X0

Method: LTDescr LeanScale(UnityEngine.Transform transform, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BF840 ADRP X8, 0xF60000
	0x031BF844 LDR X8, [X8 + 0x658]
	0x031BF848 LDR X0, [X8]
	0x031BF84C CBZ X20, 0x31BFBD0
	0x031BF850 LDR W8, [X20 + 0x18]
	0x031BF854 CBZ W8, 0x31BFBCC
	0x031BF858 CMP W8, 0x1
	0x031BF85C STR X0, [X20 + 0x20]
	0x031BF860 B.EQ 0x31BFBCC
	0x031BF864 ADRP X8, 0xF60000
	0x031BF868 LDR X8, [X8 + 0x660]
	0x031BF86C ADRP X9, 0xF34000
	0x031BF870 ADD X21, X19, 0x10
	0x031BF874 LDR X8, [X8]
	0x031BF878 LDR X9, [X9 + 0xB58]
	0x031BF87C STR X8, [X20 + 0x28]
	0x031BF880 LDR X0, [X9]
	0x031BF884 LDR W8, [X0 + 0xE0]
	0x031BF888 CBNZ W8, 0x31BF890
	0x031BF88C BL 0x1C16DFC
	0x031BF890 MOV X0, X21
	0x031BF894 MOV X1, X31
	0x031BF898 BL 0x33176C4
	0x031BF89C LDR W8, [X20 + 0x18]
	0x031BF8A0 CMP W8, 0x2
	0x031BF8A4 B.LS 0x31BFBCC
	0x031BF8A8 CMP W8, 0x3
	0x031BF8AC STR X0, [X20 + 0x30]
	0x031BF8B0 B.EQ 0x31BFBCC
	0x031BF8B4 ADRP X8, 0xF60000
	0x031BF8B8 LDR X8, [X8 + 0x680]
	0x031BF8BC ADD X0, X19, 0x20
	0x031BF8C0 MOV X1, X31
	0x031BF8C4 LDR X8, [X8]
	0x031BF8C8 STR X8, [X20 + 0x38]
	0x031BF8CC BL 0x338FE24
	0x031BF8D0 LDR W8, [X20 + 0x18]
	0x031BF8D4 CMP W8, 0x4
	0x031BF8D8 B.LS 0x31BFBCC
	0x031BF8DC CMP W8, 0x5
	0x031BF8E0 STR X0, [X20 + 0x40]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x121D000
	009 Move W8, [X20+3893]
	010 Move V8, V3
	011 Move V9, V2
	012 Move V10, V1
	013 Move V11, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF37000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+3893], W8
	024 Compare X19, 0
	025 JumpIfEqual {53}
	026 Move X20, 0xF37000
	027 Move X20, [X20+1448]
	028 Move X0, X19
	029 Move X1, X31
	030 Call Component.get_gameObject, X0
	031 Move X8, [X20]
	032 Move X19, X0
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move V2, V9
	040 Move V3, V8
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move D9, [X31+16]
	045 Move D8, [X31+24]
	046 Move V0, V11
	047 Move V1, V10
	048 Move X1, X31
	049 Move D11, [X31+64]
	050 Move D10, [X31+72]
	051 Call LeanTween.scale, X0, X1, V0
	052 Return X0
	053 Call 0x1C17F20

Method: LTDescr LeanScale(UnityEngine.RectTransform rectTransform, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BF8E4 B.EQ 0x31BFBCC
	0x031BF8E8 ADRP X8, 0xF60000
	0x031BF8EC LDR X8, [X8 + 0x648]
	0x031BF8F0 ADD X0, X19, 0x28
	0x031BF8F4 MOV X1, X31
	0x031BF8F8 LDR X8, [X8]
	0x031BF8FC STR X8, [X20 + 0x48]
	0x031BF900 BL 0x338FE24
	0x031BF904 LDR W8, [X20 + 0x18]
	0x031BF908 CMP W8, 0x6
	0x031BF90C B.LS 0x31BFBCC
	0x031BF910 CMP W8, 0x7
	0x031BF914 STR X0, [X20 + 0x50]
	0x031BF918 B.EQ 0x31BFBCC
	0x031BF91C ADRP X8, 0xF60000
	0x031BF920 LDR X8, [X8 + 0x650]
	0x031BF924 ADD X0, X19, 0x24
	0x031BF928 MOV X1, X31
	0x031BF92C LDR X8, [X8]
	0x031BF930 STR X8, [X20 + 0x58]
	0x031BF934 BL 0x338FE24
	0x031BF938 LDR W8, [X20 + 0x18]
	0x031BF93C CMP W8, 0x8
	0x031BF940 B.LS 0x31BFBCC
	0x031BF944 CMP W8, 0x9
	0x031BF948 STR X0, [X20 + 0x60]
	0x031BF94C B.EQ 0x31BFBCC
	0x031BF950 ADRP X8, 0xF60000
	0x031BF954 LDR X8, [X8 + 0x668]
	0x031BF958 ADD X0, X19, 0x40
	0x031BF95C MOV X1, X31
	0x031BF960 LDR X8, [X8]
	0x031BF964 STR X8, [X20 + 0x68]
	0x031BF968 BL 0x338FE24

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121D000
	010 Move X20, 0xF37000
	011 Move W8, [X21+3894]
	012 Move X20, [X20+1448]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF37000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3894], W8
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move V2, V9
	034 Move V3, V8
	035 Move X20, [X31+48]
	036 Move X19, [X31+56]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move V0, V11
	042 Move V1, V10
	043 Move X1, X31
	044 Move D11, [X31+64]
	045 Move D10, [X31+72]
	046 Call LeanTween.scale, X0, X1, V0
	047 Return X0

Method: LTDescr LeanScaleX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BF96C LDR W8, [X20 + 0x18]
	0x031BF970 CMP W8, 0xA
	0x031BF974 B.LS 0x31BFBCC
	0x031BF978 CMP W8, 0xB
	0x031BF97C STR X0, [X20 + 0x70]
	0x031BF980 B.EQ 0x31BFBCC
	0x031BF984 ADRP X8, 0xF60000
	0x031BF988 LDR X8, [X8 + 0x678]
	0x031BF98C ADD X0, X31, 0x30
	0x031BF990 MOV X1, X31
	0x031BF994 MOV X2, X31
	0x031BF998 LDR X8, [X8]
	0x031BF99C MOV X3, X31
	0x031BF9A0 STR X8, [X20 + 0x78]
	0x031BF9A4 LDR V0, [X19 + 0x60]
	0x031BF9A8 LDR V1, [X19 + 0x68]
	0x031BF9AC STR D0, [X31 + 0x30]
	0x031BF9B0 STR S1, [X31 + 0x38]
	0x031BF9B4 BL 0x2430694
	0x031BF9B8 LDR W8, [X20 + 0x18]
	0x031BF9BC CMP W8, 0xC
	0x031BF9C0 B.LS 0x31BFBCC
	0x031BF9C4 CMP W8, 0xD
	0x031BF9C8 STR X0, [X20 + 0x80]
	0x031BF9CC B.EQ 0x31BFBCC
	0x031BF9D0 ADRP X8, 0xF60000
	0x031BF9D4 LDR X8, [X8 + 0x640]
	0x031BF9D8 ADD X0, X31, 0x30

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121D000
	008 Move X21, 0xF37000
	009 Move W8, [X20+3895]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF37000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3895], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.scaleX, X0, V0, V1
	039 Return X0

Method: LTDescr LeanScaleX(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BF9DC MOV X1, X31
	0x031BF9E0 MOV X2, X31
	0x031BF9E4 LDR X8, [X8]
	0x031BF9E8 MOV X3, X31
	0x031BF9EC STR X8, [X20 + 0x88]
	0x031BF9F0 LDUR V0, [X19 + 0x6C]
	0x031BF9F4 LDR V1, [X19 + 0x74]
	0x031BF9F8 STR D0, [X31 + 0x30]
	0x031BF9FC STR S1, [X31 + 0x38]
	0x031BFA00 BL 0x2430694
	0x031BFA04 LDR W8, [X20 + 0x18]
	0x031BFA08 CMP W8, 0xE
	0x031BFA0C B.LS 0x31BFBCC
	0x031BFA10 CMP W8, 0xF
	0x031BFA14 STR X0, [X20 + 0x90]
	0x031BFA18 B.EQ 0x31BFBCC
	0x031BFA1C ADRP X8, 0xF60000
	0x031BFA20 LDR X8, [X8 + 0x690]
	0x031BFA24 ADD X0, X31, 0x30
	0x031BFA28 MOV X1, X31
	0x031BFA2C MOV X2, X31
	0x031BFA30 LDR X8, [X8]
	0x031BFA34 MOV X3, X31
	0x031BFA38 STR X8, [X20 + 0x98]
	0x031BFA3C LDR W8, [X19 + 0x80]
	0x031BFA40 LDR X9, [X19 + 0x78]
	0x031BFA44 STR W8, [X31 + 0x38]
	0x031BFA48 STR X9, [X31 + 0x30]
	0x031BFA4C BL 0x2430694
	0x031BFA50 LDR W8, [X20 + 0x18]
	0x031BFA54 CMP W8, 0x10
	0x031BFA58 B.LS 0x31BFBCC
	0x031BFA5C CMP W8, 0x11
	0x031BFA60 STR X0, [X20 + 0xA0]
	0x031BFA64 B.EQ 0x31BFBCC

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121D000
	007 Move W8, [X20+3896]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF37000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3896], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF37000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.scaleX, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanScaleY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BFA68 ADRP X8, 0xF60000
	0x031BFA6C LDR X8, [X8 + 0x638]
	0x031BFA70 ADRP X9, 0xF60000
	0x031BFA74 ADD X0, X31, 0x18
	0x031BFA78 MOV X1, X31
	0x031BFA7C LDR X8, [X8]
	0x031BFA80 LDR X9, [X9 + 0x618]
	0x031BFA84 STR X8, [X20 + 0xA8]
	0x031BFA88 LDR X8, [X9]
	0x031BFA8C MOVN X9, 0x0
	0x031BFA90 STP X8, X9, [X31 + 0x18]
	0x031BFA94 LDR W8, [X19 + 0x90]
	0x031BFA98 STR W8, [X31 + 0x28]
	0x031BFA9C BL 0x33B162C
	0x031BFAA0 LDR W8, [X20 + 0x18]
	0x031BFAA4 CMP W8, 0x12
	0x031BFAA8 B.LS 0x31BFBCC
	0x031BFAAC CMP W8, 0x13
	0x031BFAB0 STR X0, [X20 + 0xB0]
	0x031BFAB4 B.EQ 0x31BFBCC
	0x031BFAB8 ADRP X8, 0xF60000
	0x031BFABC LDR X8, [X8 + 0x688]
	0x031BFAC0 ADRP X9, 0xF60000
	0x031BFAC4 ADD X0, X31, 0x0
	0x031BFAC8 MOV X1, X31
	0x031BFACC LDR X8, [X8]
	0x031BFAD0 LDR X9, [X9 + 0x610]
	0x031BFAD4 STR X8, [X20 + 0xB8]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121D000
	008 Move X21, 0xF37000
	009 Move W8, [X20+3897]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF37000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3897], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.scaleY, X0, V0, V1
	039 Return X0

Method: LTDescr LeanScaleY(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BFAD8 LDR X8, [X9]
	0x031BFADC MOVN X9, 0x0
	0x031BFAE0 STP X8, X9, [X31]
	0x031BFAE4 LDR W8, [X19 + 0x94]
	0x031BFAE8 STR W8, [X31 + 0x10]
	0x031BFAEC BL 0x33B162C
	0x031BFAF0 LDR W8, [X20 + 0x18]
	0x031BFAF4 CMP W8, 0x14
	0x031BFAF8 B.LS 0x31BFBCC
	0x031BFAFC CMP W8, 0x15
	0x031BFB00 STR X0, [X20 + 0xC0]
	0x031BFB04 B.EQ 0x31BFBCC
	0x031BFB08 ADRP X8, 0xF60000
	0x031BFB0C LDR X8, [X8 + 0x628]
	0x031BFB10 ADD X0, X19, 0x11
	0x031BFB14 MOV X1, X31
	0x031BFB18 LDR X8, [X8]
	0x031BFB1C STR X8, [X20 + 0xC8]
	0x031BFB20 BL 0x33176C4
	0x031BFB24 LDR W8, [X20 + 0x18]
	0x031BFB28 CMP W8, 0x16
	0x031BFB2C B.LS 0x31BFBCC
	0x031BFB30 CMP W8, 0x17
	0x031BFB34 STR X0, [X20 + 0xD0]
	0x031BFB38 B.EQ 0x31BFBCC
	0x031BFB3C ADRP X8, 0xF60000
	0x031BFB40 LDR X8, [X8 + 0x670]
	0x031BFB44 ADD X0, X31, 0x4C
	0x031BFB48 MOV X1, X31
	0x031BFB4C LDR X8, [X8]
	0x031BFB50 STR X8, [X20 + 0xD8]
	0x031BFB54 LDR W8, [X19 + 0x34]
	0x031BFB58 LDR W9, [X19 + 0x3C]
	0x031BFB5C ORR W8, W8, W9, 0x10
	0x031BFB60 STR W8, [X31 + 0x4C]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121D000
	007 Move W8, [X20+3898]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF37000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3898], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF37000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.scaleY, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanScaleZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)

Disassembly:
	0x031BFB64 BL 0x337B6E0
	0x031BFB68 LDR W8, [X20 + 0x18]
	0x031BFB6C CMP W8, 0x18
	0x031BFB70 B.LS 0x31BFBCC
	0x031BFB74 CMP W8, 0x19
	0x031BFB78 STR X0, [X20 + 0xE0]
	0x031BFB7C B.EQ 0x31BFBCC
	0x031BFB80 ADRP X8, 0xF60000
	0x031BFB84 LDR X8, [X8 + 0x630]
	0x031BFB88 ADD X0, X19, 0x15
	0x031BFB8C MOV X1, X31
	0x031BFB90 LDR X8, [X8]
	0x031BFB94 STR X8, [X20 + 0xE8]
	0x031BFB98 BL 0x33176C4
	0x031BFB9C LDR W8, [X20 + 0x18]
	0x031BFBA0 CMP W8, 0x1A
	0x031BFBA4 B.LS 0x31BFBCC
	0x031BFBA8 STR X0, [X20 + 0xF0]
	0x031BFBAC MOV X0, X20
	0x031BFBB0 MOV X1, X31
	0x031BFBB4 BL 0x32278CC
	0x031BFBB8 LDP X20, X19, [X31 + 0x60]
	0x031BFBBC LDP X22, X21, [X31 + 0x50]
	0x031BFBC0 LDR X30, [X31 + 0x40]
	0x031BFBC4 ADD X31, X31, 0x70
	0x031BFBC8 RET
	0x031BFBCC BL 0x1C16F28
	0x031BFBD0 BL 0x1C16F20

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x121D000
	008 Move X21, 0xF37000
	009 Move W8, [X20+3899]
	010 Move X21, [X21+1448]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF37000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+3899], W8
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X30, [X31+16]
	032 Move X21, [X31+24]
	033 Move V0, V9
	034 Move V1, V8
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call LeanTween.scaleZ, X0, V0, V1
	039 Return X0

Method: LTDescr LeanScaleZ(UnityEngine.Transform transform, System.Single to, System.Single time)

Disassembly:
	0x031BFBD4 LDR W8, [X0 + 0x34]
	0x031BFBD8 LDR W9, [X0 + 0x3C]
	0x031BFBDC ORR W0, W8, W9, 0x10
	0x031BFBE0 RET
	0x031BFBE4 STP X30, X21, [X31 - 0x20]!
	0x031BFBE8 STP X20, X19, [X31 + 0x10]
	0x031BFBEC ADRP X21, 0x121C000
	0x031BFBF0 ADRP X20, 0xF60000
	0x031BFBF4 LDRB W8, [X21 + 0xF4A]
	0x031BFBF8 LDR X20, [X20 + 0x698]
	0x031BFBFC MOV X19, X0
	0x031BFC00 TBNZ X8, 0x0, 0x31BFC18
	0x031BFC04 ADRP X0, 0xF60000
	0x031BFC08 LDR X0, [X0 + 0x698]
	0x031BFC0C BL 0x1C16CF4
	0x031BFC10 MOVZ W8, 0x1
	0x031BFC14 STRB W8, [X21 + 0xF4A]
	0x031BFC18 MOVN W8, 0x0
	0x031BFC1C STR W8, [X19 + 0x3C]
	0x031BFC20 LDR X0, [X20]
	0x031BFC24 BL 0x1C16F10
	0x031BFC28 MOV X1, X31
	0x031BFC2C MOV X20, X0
	0x031BFC30 BL 0x33BDD8C
	0x031BFC34 STR X20, [X19 + 0xE8]
	0x031BFC38 MOV X0, X19
	0x031BFC3C LDP X20, X19, [X31 + 0x10]
	0x031BFC40 MOV X1, X31
	0x031BFC44 LDP X30, X21, [X31], #0x20
	0x031BFC48 B 0x33BDD8C
	0x031BFC4C MOV X1, X31
	0x031BFC50 B 0x33BDD8C
	0x031BFC54 STP X30, X21, [X31 - 0x20]!
	0x031BFC58 STP X20, X19, [X31 + 0x10]
	0x031BFC5C ADRP X21, 0x121C000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x121D000
	007 Move W8, [X20+3900]
	008 Move V8, V1
	009 Move V9, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF37000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+3900], W8
	020 Compare X19, 0
	021 JumpIfEqual {45}
	022 Move X20, 0xF37000
	023 Move X20, [X20+1448]
	024 Move X0, X19
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Move X8, [X20]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move V0, V9
	039 Move V1, V8
	040 Move X1, X31
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Call LeanTween.scaleZ, X0, V0, V1
	044 Return X0
	045 Call 0x1C17F20

Method: LTDescr LeanSize(UnityEngine.RectTransform rectTransform, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031BFC60 LDRB W8, [X21 + 0xF4B]
	0x031BFC64 MOV X20, X1
	0x031BFC68 MOV X19, X0
	0x031BFC6C TBNZ X8, 0x0, 0x31BFC90
	0x031BFC70 ADRP X0, 0xF36000
	0x031BFC74 LDR X0, [X0 + 0x5A8]
	0x031BFC78 BL 0x1C16CF4
	0x031BFC7C ADRP X0, 0xF34000
	0x031BFC80 LDR X0, [X0 + 0x598]
	0x031BFC84 BL 0x1C16CF4
	0x031BFC88 MOVZ W8, 0x1
	0x031BFC8C STRB W8, [X21 + 0xF4B]
	0x031BFC90 LDR X0, [X19 + 0x58]
	0x031BFC94 CBZ X0, 0x31BFD18
	0x031BFC98 ADRP X21, 0xF34000
	0x031BFC9C LDR X21, [X21 + 0x598]
	0x031BFCA0 MOV X1, X31
	0x031BFCA4 BL 0x3C32ECC
	0x031BFCA8 LDR X8, [X21]
	0x031BFCAC MOV X21, X0
	0x031BFCB0 LDR W9, [X8 + 0xE0]
	0x031BFCB4 CBNZ W9, 0x31BFCC0
	0x031BFCB8 MOV X0, X8
	0x031BFCBC BL 0x1C16DFC
	0x031BFCC0 MOV X0, X20
	0x031BFCC4 MOV X1, X21
	0x031BFCC8 MOV X2, X31
	0x031BFCCC BL 0x3C3883C
	0x031BFCD0 TBZ X0, 0x0, 0x31BFD08
	0x031BFCD4 ADRP X8, 0xF36000
	0x031BFCD8 LDR X8, [X8 + 0x5A8]
	0x031BFCDC LDR W20, [X19 + 0x34]

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x121D000
	009 Move X20, 0xF37000
	010 Move W8, [X21+3901]
	011 Move X20, [X20+1448]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF37000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3901], W8
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move V1, V9
	032 Move V2, V8
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move V0, V10
	040 Move X1, X31
	041 Move V10, [X31+64]
	042 Call LeanTween.size, X0, X1, V0
	043 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, UnityEngine.Color from, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031BFCE0 LDR X0, [X8]
	0x031BFCE4 LDR W8, [X19 + 0x3C]
	0x031BFCE8 LDR W9, [X0 + 0xE0]
	0x031BFCEC ORR W21, W20, W8, 0x10
	0x031BFCF0 CBNZ W9, 0x31BFCF8
	0x031BFCF4 BL 0x1C16DFC
	0x031BFCF8 MOV W0, W20
	0x031BFCFC MOV W1, W21
	0x031BFD00 MOV X2, X31
	0x031BFD04 BL 0x31ACACC
	0x031BFD08 MOV X0, X19
	0x031BFD0C LDP X20, X19, [X31 + 0x10]
	0x031BFD10 LDP X30, X21, [X31], #0x20
	0x031BFD14 RET
	0x031BFD18 BL 0x1C16F20
	0x031BFD1C LDR W8, [X0 + 0x34]
	0x031BFD20 LDR W9, [X0 + 0x3C]
	0x031BFD24 ORR W0, W8, W9, 0x10
	0x031BFD28 RET
	0x031BFD2C LDR X0, [X0 + 0xE8]
	0x031BFD30 RET
	0x031BFD34 STR X1, [X0 + 0xE8]
	0x031BFD38 RET
	0x031BFD3C STR X30, [X31 - 0x30]!
	0x031BFD40 STP X22, X21, [X31 + 0x10]
	0x031BFD44 STP X20, X19, [X31 + 0x20]
	0x031BFD48 ADRP X21, 0x121C000
	0x031BFD4C ADRP X22, 0xF60000
	0x031BFD50 ADRP X20, 0xF60000
	0x031BFD54 LDRB W8, [X21 + 0xF4C]
	0x031BFD58 LDR X22, [X22 + 0x6A0]
	0x031BFD5C LDR X20, [X20 + 0x6A8]
	0x031BFD60 MOV X19, X0
	0x031BFD64 TBNZ X8, 0x0, 0x31BFD88
	0x031BFD68 ADRP X0, 0xF60000
	0x031BFD6C LDR X0, [X0 + 0x6A0]
	0x031BFD70 BL 0x1C16CF4
	0x031BFD74 ADRP X0, 0xF60000
	0x031BFD78 LDR X0, [X0 + 0x6A8]
	0x031BFD7C BL 0x1C16CF4
	0x031BFD80 MOVZ W8, 0x1
	0x031BFD84 STRB W8, [X21 + 0xF4C]
	0x031BFD88 ADRP X8, 0xFFFFFFFFFD92E000
	0x031BFD8C LDR V0, [X8 + 0x830]
	0x031BFD90 ADRP X8, 0xFFFFFFFFFD92C000
	0x031BFD94 MOVZ W21, 0x1
	0x031BFD98 STR X31, [X19 + 0x58]
	0x031BFD9C STUR D0, [X19 + 0x94]
	0x031BFDA0 LDR V0, [X8 + 0x5F]
	0x031BFDA4 ADRP X8, 0xFFFFFFFFFD92F000
	0x031BFDA8 STR X31, [X19 + 0xB8]
	0x031BFDAC STR X31, [X19 + 0x20]
	0x031BFDB0 STR V0, [X19 + 0x4]
	0x031BFDB4 LDR V0, [X8 + 0x378]
	0x031BFDB8 MOVZ W8, 0x3F800000
	0x031BFDBC STRB W31, [X19 + 0x16]
	0x031BFDC0 STRB W31, [X19 + 0x13]
	0x031BFDC4 STRB W31, [X19 + 0x54]
	0x031BFDC8 STRH W31, [X19 + 0x18]
	0x031BFDCC STURH W31, [X19 + 0x11]
	0x031BFDD0 STRB W31, [X19 + 0x9C]
	0x031BFDD4 STR W31, [X19 + 0x38]
	0x031BFDD8 STRH W21, [X19 + 0x14]
	0x031BFDDC STRB W21, [X19 + 0x1A]
	0x031BFDE0 STRB W21, [X19 + 0x10]
	0x031BFDE4 STR W8, [X19 + 0x50]
	0x031BFDE8 STUR D0, [X19 + 0x2C]
	0x031BFDEC LDR X0, [X22]
	0x031BFDF0 BL 0x1C16F10
	0x031BFDF4 LDR X2, [X20]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X21, 0x121D000
	015 Move X20, 0xF37000
	016 Move W8, [X21+3902]
	017 Move V16, [X31+112]
	018 Move X20, [X20+1448]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {47}
	024 Move X0, 0xF37000
	025 Move X0, [X0+1448]
	026 Move V9, V7
	027 Move V10, V6
	028 Move V11, V5
	029 Move V12, V4
	030 Move V13, V3
	031 Move V14, V2
	032 Move V15, V1
	033 Move V8, V0
	034 Move [X31+12], S16
	035 Call 0x1C17CF4
	036 Move V16, [X31+12]
	037 Move V0, V8
	038 Move V1, V15
	039 Move V2, V14
	040 Move V3, V13
	041 Move V4, V12
	042 Move V5, V11
	043 Move V6, V10
	044 Move V7, V9
	045 Move W8, 1
	046 Move [X21+3902], W8
	047 Move X0, [X20]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {70}
	051 Move V9, V7
	052 Move V10, V6
	053 Move V11, V5
	054 Move V12, V4
	055 Move V13, V3
	056 Move V14, V2
	057 Move V15, V1
	058 Move V8, V0
	059 Move [X31+12], S16
	060 Call 0x1C17DFC
	061 Move V16, [X31+12]
	062 Move V0, V8
	063 Move V1, V15
	064 Move V2, V14
	065 Move V3, V13
	066 Move V4, V12
	067 Move V5, V11
	068 Move V6, V10
	069 Move V7, V9
	070 Move X0, X19
	071 Move X20, [X31+96]
	072 Move X19, [X31+104]
	073 Move X30, [X31+80]
	074 Move X21, [X31+88]
	075 Move D9, [X31+64]
	076 Move D8, [X31+72]
	077 Move D11, [X31+48]
	078 Move D10, [X31+56]
	079 Move D13, [X31+32]
	080 Move D12, [X31+40]
	081 Move D15, [X31+16]
	082 Move D14, [X31+24]
	083 Move [X31+112], S16
	084 Move X1, X31
	085 Add X31, X31, 112
	086 Call LeanTween.value, X0, X1, X2, V0
	087 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031BFDF8 MOV X1, X19
	0x031BFDFC MOV X20, X0
	0x031BFE00 BL 0x31BFE64
	0x031BFE04 STR X20, [X19 + 0xA0]
	0x031BFE08 ADRP X20, 0x1219000
	0x031BFE0C LDRB W8, [X20 + 0x783]
	0x031BFE10 CBNZ W8, 0x31BFE24
	0x031BFE14 ADRP X0, 0xF34000
	0x031BFE18 LDR X0, [X0 + 0x5A0]
	0x031BFE1C BL 0x1C16CF4
	0x031BFE20 STRB W21, [X20 + 0x783]
	0x031BFE24 ADRP X8, 0xF34000
	0x031BFE28 LDR X8, [X8 + 0x5A0]
	0x031BFE2C LDR X0, [X19 + 0xE8]
	0x031BFE30 LDR X8, [X8]
	0x031BFE34 LDR X8, [X8 + 0xB8]
	0x031BFE38 LDP S0, S1, [X8 + 0x4]
	0x031BFE3C LDR V2, [X8]
	0x031BFE40 STP S0, S1, [X19 + 0x70]
	0x031BFE44 STP S2, S0, [X19 + 0x60]
	0x031BFE48 STP S1, S2, [X19 + 0x68]
	0x031BFE4C CBZ X0, 0x31BFE60
	0x031BFE50 LDP X20, X19, [X31 + 0x20]
	0x031BFE54 LDP X22, X21, [X31 + 0x10]
	0x031BFE58 LDR X30, [X31], #0x30
	0x031BFE5C B 0x31BFEEC
	0x031BFE60 BL 0x1C16F20
	0x031BFE64 STP X30, X21, [X31 - 0x20]!
	0x031BFE68 STP X20, X19, [X31 + 0x10]
	0x031BFE6C LDR X8, [X2 + 0x8]
	0x031BFE70 STP X1, X2, [X0 + 0x20]
	0x031BFE74 MOV X19, X0

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x121D000
	009 Move X21, 0xF37000
	010 Move W8, [X20+3903]
	011 Move X21, [X21+1448]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF37000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3903], W8
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move V1, V9
	032 Move V2, V8
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Move D9, [X31+16]
	038 Move D8, [X31+24]
	039 Move V0, V10
	040 Move X1, X31
	041 Move V10, [X31+64]
	042 Call LeanTween.value, X0, V0, V1, V2
	043 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, UnityEngine.Vector2 from, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031BFE78 MOV X20, X1
	0x031BFE7C STR X8, [X0 + 0x10]
	0x031BFE80 LDRB W21, [X2 + 0x52]
	0x031BFE84 STR X0, [X0 + 0x40]
	0x031BFE88 MOV X0, X2
	0x031BFE8C BL 0x1C16D84
	0x031BFE90 TBZ X0, 0x0, 0x31BFEA8
	0x031BFE94 CBNZ W21, 0x31BFEAC
	0x031BFE98 ADRP X8, 0xFFFFFFFFFE9F3000
	0x031BFE9C ADD X8, X8, 0xED4
	0x031BFEA0 STR X8, [X19 + 0x18]
	0x031BFEA4 B 0x31BFEBC
	0x031BFEA8 CBZ X20, 0x31BFED4
	0x031BFEAC LDR X8, [X19 + 0x10]
	0x031BFEB0 LDR X9, [X19 + 0x20]
	0x031BFEB4 STR X8, [X19 + 0x18]
	0x031BFEB8 STR X9, [X19 + 0x40]
	0x031BFEBC ADRP X8, 0xFFFFFFFFFE9F3000
	0x031BFEC0 ADD X8, X8, 0xE84
	0x031BFEC4 STR X8, [X19 + 0x38]
	0x031BFEC8 LDP X20, X19, [X31 + 0x10]
	0x031BFECC LDP X30, X21, [X31], #0x20
	0x031BFED0 RET
	0x031BFED4 ADRP X1, 0xFFFFFFFFFD95C000
	0x031BFED8 ADD X1, X1, 0xEE3
	0x031BFEDC MOV X0, X31
	0x031BFEE0 BL 0x1C16F3C
	0x031BFEE4 MOV X1, X31
	0x031BFEE8 BL 0x1C16DEC
	0x031BFEEC STR X30, [X31 - 0x20]!
	0x031BFEF0 STP X20, X19, [X31 + 0x10]
	0x031BFEF4 MOVI V0.2D, 0x0
	0x031BFEF8 STR X31, [X0 + 0x58]
	0x031BFEFC STR X31, [X0 + 0xE0]
	0x031BFF00 STR X31, [X0 + 0xB0]
	0x031BFF04 STP X31, X31, [X0 + 0xC8]
	0x031BFF08 STR X31, [X0 + 0xC0]
	0x031BFF0C STP V0, V0, [X0 + 0x80]

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x121D000
	011 Move X20, 0xF37000
	012 Move W8, [X21+3904]
	013 Move X20, [X20+1448]
	014 Move V8, V4
	015 Move V9, V3
	016 Move V10, V2
	017 Move V11, V1
	018 Move V12, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0xF37000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+3904], W8
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Move V1, V11
	036 Move V2, V10
	037 Move V3, V9
	038 Move V4, V8
	039 Move X20, [X31+64]
	040 Move X19, [X31+72]
	041 Move X30, [X31+48]
	042 Move X21, [X31+56]
	043 Move D9, [X31+32]
	044 Move D8, [X31+40]
	045 Move D11, [X31+16]
	046 Move D10, [X31+24]
	047 Move V0, V12
	048 Move X1, X31
	049 Move V12, [X31+80]
	050 Call LeanTween.value, X0, X1, X2, V0
	051 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031BFF10 STR V0, [X0 + 0xA]
	0x031BFF14 ADRP X20, 0x1219000
	0x031BFF18 LDRB W8, [X20 + 0x783]
	0x031BFF1C MOV X19, X0
	0x031BFF20 CBNZ W8, 0x31BFF38
	0x031BFF24 ADRP X0, 0xF34000
	0x031BFF28 LDR X0, [X0 + 0x5A0]
	0x031BFF2C BL 0x1C16CF4
	0x031BFF30 MOVZ W8, 0x1
	0x031BFF34 STRB W8, [X20 + 0x783]
	0x031BFF38 ADRP X8, 0xF34000
	0x031BFF3C LDR X8, [X8 + 0x5A0]
	0x031BFF40 LDR X8, [X8]
	0x031BFF44 LDR X8, [X8 + 0xB8]
	0x031BFF48 LDR V0, [X8]
	0x031BFF4C LDR V1, [X8 + 0x8]
	0x031BFF50 STR W31, [X19 + 0x60]
	0x031BFF54 STR D0, [X19 + 0x18]
	0x031BFF58 STR S1, [X19 + 0x20]
	0x031BFF5C LDP X20, X19, [X31 + 0x10]
	0x031BFF60 LDR X30, [X31], #0x20
	0x031BFF64 RET
	0x031BFF68 MOVZ W8, 0x32
	0x031BFF6C STR W8, [X0 + 0x90]
	0x031BFF70 RET
	0x031BFF74 STP X30, X23, [X31 - 0x30]!
	0x031BFF78 STP X22, X21, [X31 + 0x10]
	0x031BFF7C STP X20, X19, [X31 + 0x20]
	0x031BFF80 ADRP X23, 0x121C000
	0x031BFF84 ADRP X22, 0xF60000
	0x031BFF88 ADRP X20, 0xF60000
	0x031BFF8C ADRP X21, 0xF60000
	0x031BFF90 LDRB W8, [X23 + 0xF4D]
	0x031BFF94 LDR X22, [X22 + 0x428]
	0x031BFF98 LDR X20, [X20 + 0x6B0]
	0x031BFF9C LDR X21, [X21 + 0x6B8]
	0x031BFFA0 MOV X19, X0
	0x031BFFA4 TBNZ X8, 0x0, 0x31BFFD4
	0x031BFFA8 ADRP X0, 0xF60000
	0x031BFFAC LDR X0, [X0 + 0x428]
	0x031BFFB0 BL 0x1C16CF4
	0x031BFFB4 ADRP X0, 0xF60000
	0x031BFFB8 LDR X0, [X0 + 0x6B0]
	0x031BFFBC BL 0x1C16CF4

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x121D000
	013 Move X20, 0xF37000
	014 Move W8, [X21+3905]
	015 Move X20, [X20+1448]
	016 Move V8, V6
	017 Move V9, V5
	018 Move V10, V4
	019 Move V11, V3
	020 Move V12, V2
	021 Move V13, V1
	022 Move V14, V0
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {33}
	028 Move X0, 0xF37000
	029 Move X0, [X0+1448]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+3905], W8
	033 Move X0, [X20]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X19
	039 Move V1, V13
	040 Move V2, V12
	041 Move V3, V11
	042 Move V4, V10
	043 Move V5, V9
	044 Move V6, V8
	045 Move X20, [X31+80]
	046 Move X19, [X31+88]
	047 Move X30, [X31+64]
	048 Move X21, [X31+72]
	049 Move D9, [X31+48]
	050 Move D8, [X31+56]
	051 Move D11, [X31+32]
	052 Move D10, [X31+40]
	053 Move D13, [X31+16]
	054 Move D12, [X31+24]
	055 Move V0, V14
	056 Move X1, X31
	057 Move V14, [X31+96]
	058 Call LeanTween.value, X0, X1, X2, V0
	059 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, System.Action`1<System.Single> callOnUpdate, System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031BFFC0 ADRP X0, 0xF60000
	0x031BFFC4 LDR X0, [X0 + 0x6B8]
	0x031BFFC8 BL 0x1C16CF4
	0x031BFFCC MOVZ W8, 0x1
	0x031BFFD0 STRB W8, [X23 + 0xF4D]
	0x031BFFD4 STR W31, [X19 + 0x90]
	0x031BFFD8 LDR X0, [X22]
	0x031BFFDC BL 0x1C16F10
	0x031BFFE0 LDR X2, [X20]
	0x031BFFE4 MOV X1, X19
	0x031BFFE8 MOV X20, X0
	0x031BFFEC BL 0x31C0024
	0x031BFFF0 STR X20, [X19 + 0xB0]
	0x031BFFF4 LDR X0, [X22]
	0x031BFFF8 BL 0x1C16F10
	0x031BFFFC LDR X2, [X21]
	0x031C0000 MOV X1, X19
	0x031C0004 MOV X20, X0
	0x031C0008 BL 0x31C0024
	0x031C000C STR X20, [X19 + 0xA8]
	0x031C0010 MOV X0, X19
	0x031C0014 LDP X20, X19, [X31 + 0x20]
	0x031C0018 LDP X22, X21, [X31 + 0x10]
	0x031C001C LDP X30, X23, [X31], #0x30
	0x031C0020 RET
	0x031C0024 STP X30, X21, [X31 - 0x20]!
	0x031C0028 STP X20, X19, [X31 + 0x10]
	0x031C002C LDR X8, [X2 + 0x8]
	0x031C0030 STP X1, X2, [X0 + 0x20]
	0x031C0034 MOV X19, X0
	0x031C0038 MOV X20, X1
	0x031C003C STR X8, [X0 + 0x10]
	0x031C0040 LDRB W21, [X2 + 0x52]
	0x031C0044 STR X0, [X0 + 0x40]
	0x031C0048 MOV X0, X2
	0x031C004C BL 0x1C16D84

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121D000
	010 Move X22, 0xF37000
	011 Move W8, [X21+3906]
	012 Move X22, [X22+1448]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF37000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3906], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X19
	034 Move V1, V9
	035 Move V2, V8
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X30, [X31+24]
	041 Move D9, [X31+8]
	042 Move D8, [X31+16]
	043 Move V0, V10
	044 Move X2, X31
	045 Move V10, [X31+64]
	046 Call LeanTween.value, X0, X1, V0, V1, V2
	047 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, System.Action`2<System.Single, System.Single> callOnUpdate, System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031C0050 TBZ X0, 0x0, 0x31C0068
	0x031C0054 CBNZ W21, 0x31C006C
	0x031C0058 ADRP X8, 0xFFFFFFFFFE9F2000
	0x031C005C ADD X8, X8, 0xF28
	0x031C0060 STR X8, [X19 + 0x18]
	0x031C0064 B 0x31C007C
	0x031C0068 CBZ X20, 0x31C0094
	0x031C006C LDR X8, [X19 + 0x10]
	0x031C0070 LDR X9, [X19 + 0x20]
	0x031C0074 STR X8, [X19 + 0x18]
	0x031C0078 STR X9, [X19 + 0x40]
	0x031C007C ADRP X8, 0xFFFFFFFFFE9F2000
	0x031C0080 ADD X8, X8, 0xEE8
	0x031C0084 STR X8, [X19 + 0x38]
	0x031C0088 LDP X20, X19, [X31 + 0x10]
	0x031C008C LDP X30, X21, [X31], #0x20
	0x031C0090 RET
	0x031C0094 ADRP X1, 0xFFFFFFFFFD95B000
	0x031C0098 ADD X1, X1, 0xEE3
	0x031C009C MOV X0, X31
	0x031C00A0 BL 0x1C16F3C
	0x031C00A4 MOV X1, X31
	0x031C00A8 BL 0x1C16DEC
	0x031C00AC STP X30, X23, [X31 - 0x30]!
	0x031C00B0 STP X22, X21, [X31 + 0x10]
	0x031C00B4 STP X20, X19, [X31 + 0x20]
	0x031C00B8 ADRP X23, 0x121B000
	0x031C00BC ADRP X22, 0xF5F000
	0x031C00C0 ADRP X20, 0xF5F000
	0x031C00C4 ADRP X21, 0xF5F000
	0x031C00C8 LDRB W8, [X23 + 0xF4E]
	0x031C00CC LDR X22, [X22 + 0x428]
	0x031C00D0 LDR X20, [X20 + 0x6C0]
	0x031C00D4 LDR X21, [X21 + 0x6C8]
	0x031C00D8 MOV X19, X0
	0x031C00DC TBNZ X8, 0x0, 0x31C010C

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121C000
	010 Move X22, 0xF36000
	011 Move W8, [X21+3907]
	012 Move X22, [X22+1448]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF36000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3907], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X19
	034 Move V1, V9
	035 Move V2, V8
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X30, [X31+24]
	041 Move D9, [X31+8]
	042 Move D8, [X31+16]
	043 Move V0, V10
	044 Move X2, X31
	045 Move V10, [X31+64]
	046 Call LeanTween.value, X0, X1, V0, V1, V2
	047 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, System.Action`2<System.Single, System.Object> callOnUpdate, System.Single from, System.Single to, System.Single time)

Disassembly:
	0x031C00E0 ADRP X0, 0xF5F000
	0x031C00E4 LDR X0, [X0 + 0x428]
	0x031C00E8 BL 0x1C16CF4
	0x031C00EC ADRP X0, 0xF5F000
	0x031C00F0 LDR X0, [X0 + 0x6C0]
	0x031C00F4 BL 0x1C16CF4
	0x031C00F8 ADRP X0, 0xF5F000
	0x031C00FC LDR X0, [X0 + 0x6C8]
	0x031C0100 BL 0x1C16CF4
	0x031C0104 MOVZ W8, 0x1
	0x031C0108 STRB W8, [X23 + 0xF4E]
	0x031C010C MOVZ W8, 0x1
	0x031C0110 STR W8, [X19 + 0x90]
	0x031C0114 LDR X0, [X22]
	0x031C0118 BL 0x1C16F10
	0x031C011C LDR X2, [X20]
	0x031C0120 MOV X1, X19
	0x031C0124 MOV X20, X0
	0x031C0128 BL 0x31C0024
	0x031C012C STR X20, [X19 + 0xB0]
	0x031C0130 LDR X0, [X22]
	0x031C0134 BL 0x1C16F10
	0x031C0138 LDR X2, [X21]
	0x031C013C MOV X1, X19
	0x031C0140 MOV X20, X0
	0x031C0144 BL 0x31C0024
	0x031C0148 STR X20, [X19 + 0xA8]
	0x031C014C MOV X0, X19
	0x031C0150 LDP X20, X19, [X31 + 0x20]
	0x031C0154 LDP X22, X21, [X31 + 0x10]
	0x031C0158 LDP X30, X23, [X31], #0x30
	0x031C015C RET
	0x031C0160 STP X30, X23, [X31 - 0x30]!
	0x031C0164 STP X22, X21, [X31 + 0x10]
	0x031C0168 STP X20, X19, [X31 + 0x20]
	0x031C016C ADRP X23, 0x121B000

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x121C000
	010 Move X22, 0xF36000
	011 Move W8, [X21+3908]
	012 Move X22, [X22+1448]
	013 Move V8, V2
	014 Move V9, V1
	015 Move V10, V0
	016 Move X19, X1
	017 Move X20, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF36000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+3908], W8
	027 Move X0, [X22]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X19
	034 Move V1, V9
	035 Move V2, V8
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X22, [X31+32]
	039 Move X21, [X31+40]
	040 Move X30, [X31+24]
	041 Move D9, [X31+8]
	042 Move D8, [X31+16]
	043 Move V0, V10
	044 Move X2, X31
	045 Move V10, [X31+64]
	046 Call LeanTween.value, X0, X1, V0, V1, V2
	047 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Color> callOnUpdate, UnityEngine.Color from, UnityEngine.Color to, System.Single time)

Disassembly:
	0x031C0170 ADRP X22, 0xF5F000
	0x031C0174 ADRP X20, 0xF5F000
	0x031C0178 ADRP X21, 0xF5F000
	0x031C017C LDRB W8, [X23 + 0xF4F]
	0x031C0180 LDR X22, [X22 + 0x428]
	0x031C0184 LDR X20, [X20 + 0x6D0]
	0x031C0188 LDR X21, [X21 + 0x6D8]
	0x031C018C MOV X19, X0
	0x031C0190 TBNZ X8, 0x0, 0x31C01C0
	0x031C0194 ADRP X0, 0xF5F000
	0x031C0198 LDR X0, [X0 + 0x428]
	0x031C019C BL 0x1C16CF4
	0x031C01A0 ADRP X0, 0xF5F000
	0x031C01A4 LDR X0, [X0 + 0x6D0]
	0x031C01A8 BL 0x1C16CF4
	0x031C01AC ADRP X0, 0xF5F000
	0x031C01B0 LDR X0, [X0 + 0x6D8]
	0x031C01B4 BL 0x1C16CF4
	0x031C01B8 MOVZ W8, 0x1
	0x031C01BC STRB W8, [X23 + 0xF4F]
	0x031C01C0 MOVZ W8, 0x2
	0x031C01C4 STR W8, [X19 + 0x90]
	0x031C01C8 LDR X0, [X22]
	0x031C01CC BL 0x1C16F10
	0x031C01D0 LDR X2, [X20]
	0x031C01D4 MOV X1, X19
	0x031C01D8 MOV X20, X0
	0x031C01DC BL 0x31C0024
	0x031C01E0 STR X20, [X19 + 0xB0]
	0x031C01E4 LDR X0, [X22]
	0x031C01E8 BL 0x1C16F10
	0x031C01EC LDR X2, [X21]
	0x031C01F0 MOV X1, X19
	0x031C01F4 MOV X20, X0
	0x031C01F8 BL 0x31C0024
	0x031C01FC STR X20, [X19 + 0xA8]
	0x031C0200 MOV X0, X19
	0x031C0204 LDP X20, X19, [X31 + 0x20]
	0x031C0208 LDP X22, X21, [X31 + 0x10]
	0x031C020C LDP X30, X23, [X31], #0x30
	0x031C0210 RET
	0x031C0214 STP X30, X23, [X31 - 0x30]!
	0x031C0218 STP X22, X21, [X31 + 0x10]
	0x031C021C STP X20, X19, [X31 + 0x20]
	0x031C0220 ADRP X23, 0x121B000
	0x031C0224 ADRP X22, 0xF5F000
	0x031C0228 ADRP X20, 0xF5F000
	0x031C022C ADRP X21, 0xF5F000
	0x031C0230 LDRB W8, [X23 + 0xF50]
	0x031C0234 LDR X22, [X22 + 0x428]
	0x031C0238 LDR X20, [X20 + 0x6E0]
	0x031C023C LDR X21, [X21 + 0x6E8]
	0x031C0240 MOV X19, X0
	0x031C0244 TBNZ X8, 0x0, 0x31C0274
	0x031C0248 ADRP X0, 0xF5F000
	0x031C024C LDR X0, [X0 + 0x428]
	0x031C0250 BL 0x1C16CF4
	0x031C0254 ADRP X0, 0xF5F000
	0x031C0258 LDR X0, [X0 + 0x6E0]
	0x031C025C BL 0x1C16CF4
	0x031C0260 ADRP X0, 0xF5F000
	0x031C0264 LDR X0, [X0 + 0x6E8]
	0x031C0268 BL 0x1C16CF4
	0x031C026C MOVZ W8, 0x1
	0x031C0270 STRB W8, [X23 + 0xF50]
	0x031C0274 MOVZ W8, 0x3
	0x031C0278 STR W8, [X19 + 0x90]
	0x031C027C LDR X0, [X22]
	0x031C0280 BL 0x1C16F10
	0x031C0284 LDR X2, [X20]
	0x031C0288 MOV X1, X19
	0x031C028C MOV X20, X0

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X22, 0x121C000
	015 Move X21, 0xF36000
	016 Move W8, [X22+3909]
	017 Move V16, [X31+112]
	018 Move X21, [X21+1448]
	019 Move X19, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {48}
	025 Move X0, 0xF36000
	026 Move X0, [X0+1448]
	027 Move V9, V7
	028 Move V10, V6
	029 Move V11, V5
	030 Move V12, V4
	031 Move V13, V3
	032 Move V14, V2
	033 Move V15, V1
	034 Move V8, V0
	035 Move [X31+76], S16
	036 Call 0x1C17CF4
	037 Move V16, [X31+76]
	038 Move V0, V8
	039 Move V1, V15
	040 Move V2, V14
	041 Move V3, V13
	042 Move V4, V12
	043 Move V5, V11
	044 Move V6, V10
	045 Move V7, V9
	046 Move W8, 1
	047 Move [X22+3909], W8
	048 Move X0, [X21]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {71}
	052 Move V9, V7
	053 Move V10, V6
	054 Move V11, V5
	055 Move V12, V4
	056 Move V13, V3
	057 Move V14, V2
	058 Move V15, V1
	059 Move V8, V0
	060 Move [X31+76], S16
	061 Call 0x1C17DFC
	062 Move V16, [X31+76]
	063 Move V0, V8
	064 Move V1, V15
	065 Move V2, V14
	066 Move V3, V13
	067 Move V4, V12
	068 Move V5, V11
	069 Move V6, V10
	070 Move V7, V9
	071 Move X0, X20
	072 Move X1, X19
	073 Move X20, [X31+96]
	074 Move X19, [X31+104]
	075 Move X22, [X31+80]
	076 Move X21, [X31+88]
	077 Move X30, [X31+64]
	078 Move D9, [X31+48]
	079 Move D8, [X31+56]
	080 Move D11, [X31+32]
	081 Move D10, [X31+40]
	082 Move D13, [X31+16]
	083 Move D12, [X31+24]
	084 Move [X31+112], S16
	085 Move X2, X31
	086 Move D15, [X31+112]
	087 Move D14, [X31+120]
	088 Call LeanTween.value, X0, X1, X2, X3, V0
	089 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Vector2> callOnUpdate, UnityEngine.Vector2 from, UnityEngine.Vector2 to, System.Single time)

Disassembly:
	0x031C0290 BL 0x31C0024
	0x031C0294 STR X20, [X19 + 0xB0]
	0x031C0298 LDR X0, [X22]
	0x031C029C BL 0x1C16F10
	0x031C02A0 LDR X2, [X21]
	0x031C02A4 MOV X1, X19
	0x031C02A8 MOV X20, X0
	0x031C02AC BL 0x31C0024
	0x031C02B0 STR X20, [X19 + 0xA8]
	0x031C02B4 MOV X0, X19
	0x031C02B8 LDP X20, X19, [X31 + 0x20]
	0x031C02BC LDP X22, X21, [X31 + 0x10]
	0x031C02C0 LDP X30, X23, [X31], #0x30
	0x031C02C4 RET
	0x031C02C8 STP X30, X23, [X31 - 0x30]!
	0x031C02CC STP X22, X21, [X31 + 0x10]
	0x031C02D0 STP X20, X19, [X31 + 0x20]
	0x031C02D4 ADRP X23, 0x121B000
	0x031C02D8 ADRP X22, 0xF5F000
	0x031C02DC ADRP X20, 0xF5F000
	0x031C02E0 ADRP X21, 0xF5F000
	0x031C02E4 LDRB W8, [X23 + 0xF51]
	0x031C02E8 LDR X22, [X22 + 0x428]
	0x031C02EC LDR X20, [X20 + 0x6F0]
	0x031C02F0 LDR X21, [X21 + 0x6F8]
	0x031C02F4 MOV X19, X0
	0x031C02F8 TBNZ X8, 0x0, 0x31C0328
	0x031C02FC ADRP X0, 0xF5F000
	0x031C0300 LDR X0, [X0 + 0x428]
	0x031C0304 BL 0x1C16CF4
	0x031C0308 ADRP X0, 0xF5F000
	0x031C030C LDR X0, [X0 + 0x6F0]
	0x031C0310 BL 0x1C16CF4
	0x031C0314 ADRP X0, 0xF5F000
	0x031C0318 LDR X0, [X0 + 0x6F8]
	0x031C031C BL 0x1C16CF4
	0x031C0320 MOVZ W8, 0x1
	0x031C0324 STRB W8, [X23 + 0xF51]
	0x031C0328 MOVZ W8, 0x4
	0x031C032C STR W8, [X19 + 0x90]
	0x031C0330 LDR X0, [X22]
	0x031C0334 BL 0x1C16F10

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+8], D11
	003 Move [X31+16], D10
	004 Move [X31+24], D9
	005 Move [X31+32], D8
	006 Move [X31+40], X30
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X22, 0x121C000
	012 Move X21, 0xF36000
	013 Move W8, [X22+3910]
	014 Move X21, [X21+1448]
	015 Move V8, V4
	016 Move V9, V3
	017 Move V10, V2
	018 Move V11, V1
	019 Move V12, V0
	020 Move X19, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0xF36000
	027 Move X0, [X0+1448]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+3910], W8
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X19
	038 Move V1, V11
	039 Move V2, V10
	040 Move V3, V9
	041 Move V4, V8
	042 Move X20, [X31+64]
	043 Move X19, [X31+72]
	044 Move X22, [X31+48]
	045 Move X21, [X31+56]
	046 Move X30, [X31+40]
	047 Move D9, [X31+24]
	048 Move D8, [X31+32]
	049 Move D11, [X31+8]
	050 Move D10, [X31+16]
	051 Move V0, V12
	052 Move X2, X31
	053 Move V12, [X31+80]
	054 Call LeanTween.value, X0, X1, X2, X3, V0
	055 Return X0

Method: LTDescr LeanValue(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Vector3> callOnUpdate, UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single time)

Disassembly:
	0x031C0338 LDR X2, [X20]
	0x031C033C MOV X1, X19
	0x031C0340 MOV X20, X0
	0x031C0344 BL 0x31C0024
	0x031C0348 STR X20, [X19 + 0xB0]
	0x031C034C LDR X0, [X22]
	0x031C0350 BL 0x1C16F10
	0x031C0354 LDR X2, [X21]
	0x031C0358 MOV X1, X19
	0x031C035C MOV X20, X0
	0x031C0360 BL 0x31C0024
	0x031C0364 STR X20, [X19 + 0xA8]
	0x031C0368 MOV X0, X19
	0x031C036C LDP X20, X19, [X31 + 0x20]
	0x031C0370 LDP X22, X21, [X31 + 0x10]
	0x031C0374 LDP X30, X23, [X31], #0x30
	0x031C0378 RET
	0x031C037C STP X30, X23, [X31 - 0x30]!
	0x031C0380 STP X22, X21, [X31 + 0x10]
	0x031C0384 STP X20, X19, [X31 + 0x20]
	0x031C0388 ADRP X23, 0x121B000
	0x031C038C ADRP X22, 0xF5F000
	0x031C0390 ADRP X20, 0xF5F000
	0x031C0394 ADRP X21, 0xF5F000
	0x031C0398 LDRB W8, [X23 + 0xF52]
	0x031C039C LDR X22, [X22 + 0x428]
	0x031C03A0 LDR X20, [X20 + 0x700]
	0x031C03A4 LDR X21, [X21 + 0x708]
	0x031C03A8 MOV X19, X0
	0x031C03AC TBNZ X8, 0x0, 0x31C03DC
	0x031C03B0 ADRP X0, 0xF5F000
	0x031C03B4 LDR X0, [X0 + 0x428]
	0x031C03B8 BL 0x1C16CF4
	0x031C03BC ADRP X0, 0xF5F000
	0x031C03C0 LDR X0, [X0 + 0x700]
	0x031C03C4 BL 0x1C16CF4
	0x031C03C8 ADRP X0, 0xF5F000
	0x031C03CC LDR X0, [X0 + 0x708]
	0x031C03D0 BL 0x1C16CF4
	0x031C03D4 MOVZ W8, 0x1
	0x031C03D8 STRB W8, [X23 + 0xF52]
	0x031C03DC MOVZ W8, 0x5
	0x031C03E0 STR W8, [X19 + 0x90]
	0x031C03E4 LDR X0, [X22]
	0x031C03E8 BL 0x1C16F10
	0x031C03EC LDR X2, [X20]
	0x031C03F0 MOV X1, X19
	0x031C03F4 MOV X20, X0

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x121C000
	014 Move X21, 0xF36000
	015 Move W8, [X22+3911]
	016 Move X21, [X21+1448]
	017 Move V8, V6
	018 Move V9, V5
	019 Move V10, V4
	020 Move V11, V3
	021 Move V12, V2
	022 Move V13, V1
	023 Move V14, V0
	024 Move X19, X1
	025 Move X20, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0xF36000
	031 Move X0, [X0+1448]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+3911], W8
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X19
	042 Move V1, V13
	043 Move V2, V12
	044 Move V3, V11
	045 Move V4, V10
	046 Move V5, V9
	047 Move V6, V8
	048 Move X20, [X31+80]
	049 Move X19, [X31+88]
	050 Move X22, [X31+64]
	051 Move X21, [X31+72]
	052 Move X30, [X31+56]
	053 Move D9, [X31+40]
	054 Move D8, [X31+48]
	055 Move D11, [X31+24]
	056 Move D10, [X31+32]
	057 Move D13, [X31+8]
	058 Move D12, [X31+16]
	059 Move V0, V14
	060 Move X2, X31
	061 Move V14, [X31+96]
	062 Call LeanTween.value, X0, X1, X2, X3, V0
	063 Return X0

Method: System.Void LeanSetPosX(UnityEngine.Transform transform, System.Single val)

Disassembly:
	0x031C03F8 BL 0x31C0024
	0x031C03FC STR X20, [X19 + 0xB0]
	0x031C0400 LDR X0, [X22]
	0x031C0404 BL 0x1C16F10
	0x031C0408 LDR X2, [X21]
	0x031C040C MOV X1, X19
	0x031C0410 MOV X20, X0
	0x031C0414 BL 0x31C0024
	0x031C0418 STR X20, [X19 + 0xA8]
	0x031C041C MOV X0, X19
	0x031C0420 LDP X20, X19, [X31 + 0x20]
	0x031C0424 LDP X22, X21, [X31 + 0x10]
	0x031C0428 LDP X30, X23, [X31], #0x30
	0x031C042C RET
	0x031C0430 STR W31, [X0 + 0x60]
	0x031C0434 RET
	0x031C0438 STP S0, S1, [X0 + 0x6C]
	0x031C043C STR S2, [X0 + 0x74]
	0x031C0440 RET

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X1, X31
	008 Move V8, V0
	009 Move X19, X0
	010 Call Transform.get_position, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Move V9, V1
	014 Call Transform.get_position, X0
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move V0, V8
	019 Move V1, V9
	020 Move X1, X31
	021 Move D9, [X31+32]
	022 Move D8, [X31+40]
	023 Call Transform.set_position, X0, X1
	024 Return 
	025 Call 0x1C17F20

Method: System.Void LeanSetPosY(UnityEngine.Transform transform, System.Single val)

Disassembly:
	0x031C0444 STP X30, X23, [X31 - 0x30]!
	0x031C0448 STP X22, X21, [X31 + 0x10]
	0x031C044C STP X20, X19, [X31 + 0x20]
	0x031C0450 ADRP X23, 0x121B000
	0x031C0454 ADRP X22, 0xF5F000
	0x031C0458 ADRP X20, 0xF5F000
	0x031C045C ADRP X21, 0xF5F000
	0x031C0460 LDRB W8, [X23 + 0xF53]
	0x031C0464 LDR X22, [X22 + 0x428]
	0x031C0468 LDR X20, [X20 + 0x710]
	0x031C046C LDR X21, [X21 + 0x718]
	0x031C0470 MOV X19, X0
	0x031C0474 TBNZ X8, 0x0, 0x31C04A4
	0x031C0478 ADRP X0, 0xF5F000
	0x031C047C LDR X0, [X0 + 0x428]
	0x031C0480 BL 0x1C16CF4
	0x031C0484 ADRP X0, 0xF5F000
	0x031C0488 LDR X0, [X0 + 0x718]
	0x031C048C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X1, X31
	008 Move V8, V0
	009 Move X19, X0
	010 Call Transform.get_position, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Move V9, V0
	014 Call Transform.get_position, X0
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move V0, V9
	019 Move V1, V8
	020 Move X1, X31
	021 Move D9, [X31+32]
	022 Move D8, [X31+40]
	023 Call Transform.set_position, X0, X1
	024 Return 
	025 Call 0x1C17F20

Method: System.Void LeanSetPosZ(UnityEngine.Transform transform, System.Single val)

Disassembly:
	0x031C0490 ADRP X0, 0xF5F000
	0x031C0494 LDR X0, [X0 + 0x710]
	0x031C0498 BL 0x1C16CF4
	0x031C049C MOVZ W8, 0x1
	0x031C04A0 STRB W8, [X23 + 0xF53]
	0x031C04A4 MOVZ W8, 0x6
	0x031C04A8 STR W8, [X19 + 0x90]
	0x031C04AC LDR X0, [X22]
	0x031C04B0 BL 0x1C16F10
	0x031C04B4 LDR X2, [X20]
	0x031C04B8 MOV X1, X19
	0x031C04BC MOV X20, X0
	0x031C04C0 BL 0x31C0024
	0x031C04C4 STR X20, [X19 + 0xB0]
	0x031C04C8 LDR X0, [X22]
	0x031C04CC BL 0x1C16F10
	0x031C04D0 LDR X2, [X21]
	0x031C04D4 MOV X1, X19
	0x031C04D8 MOV X20, X0

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X1, X31
	008 Move V8, V0
	009 Move X19, X0
	010 Call Transform.get_position, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Move V9, V0
	014 Call Transform.get_position, X0
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move V0, V9
	019 Move V2, V8
	020 Move X1, X31
	021 Move D9, [X31+32]
	022 Move D8, [X31+40]
	023 Call Transform.set_position, X0, X1
	024 Return 
	025 Call 0x1C17F20

Method: System.Void LeanSetLocalPosX(UnityEngine.Transform transform, System.Single val)

Disassembly:
	0x031C04DC BL 0x31C0024
	0x031C04E0 STR X20, [X19 + 0xA8]
	0x031C04E4 MOV X0, X19
	0x031C04E8 LDP X20, X19, [X31 + 0x20]
	0x031C04EC LDP X22, X21, [X31 + 0x10]
	0x031C04F0 LDP X30, X23, [X31], #0x30
	0x031C04F4 RET
	0x031C04F8 STP X30, X23, [X31 - 0x30]!
	0x031C04FC STP X22, X21, [X31 + 0x10]
	0x031C0500 STP X20, X19, [X31 + 0x20]
	0x031C0504 ADRP X23, 0x121B000
	0x031C0508 ADRP X22, 0xF5F000
	0x031C050C ADRP X20, 0xF5F000
	0x031C0510 ADRP X21, 0xF5F000
	0x031C0514 LDRB W8, [X23 + 0xF54]
	0x031C0518 LDR X22, [X22 + 0x428]
	0x031C051C LDR X20, [X20 + 0x710]
	0x031C0520 LDR X21, [X21 + 0x720]
	0x031C0524 MOV X19, X0

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X1, X31
	008 Move V8, V0
	009 Move X19, X0
	010 Call Transform.get_localPosition, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Move V9, V1
	014 Call Transform.get_localPosition, X0
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move V0, V8
	019 Move V1, V9
	020 Move X1, X31
	021 Move D9, [X31+32]
	022 Move D8, [X31+40]
	023 Call Transform.set_localPosition, X0, X1
	024 Return 
	025 Call 0x1C17F20

Method: System.Void LeanSetLocalPosY(UnityEngine.Transform transform, System.Single val)

Disassembly:
	0x031C0528 TBNZ X8, 0x0, 0x31C0558
	0x031C052C ADRP X0, 0xF5F000
	0x031C0530 LDR X0, [X0 + 0x428]
	0x031C0534 BL 0x1C16CF4
	0x031C0538 ADRP X0, 0xF5F000
	0x031C053C LDR X0, [X0 + 0x720]
	0x031C0540 BL 0x1C16CF4
	0x031C0544 ADRP X0, 0xF5F000
	0x031C0548 LDR X0, [X0 + 0x710]
	0x031C054C BL 0x1C16CF4
	0x031C0550 MOVZ W8, 0x1
	0x031C0554 STRB W8, [X23 + 0xF54]
	0x031C0558 MOVZ W8, 0x7
	0x031C055C STR W8, [X19 + 0x90]
	0x031C0560 LDR X0, [X22]
	0x031C0564 BL 0x1C16F10
	0x031C0568 LDR X2, [X20]
	0x031C056C MOV X1, X19
	0x031C0570 MOV X20, X0

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X1, X31
	008 Move V8, V0
	009 Move X19, X0
	010 Call Transform.get_localPosition, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Move V9, V0
	014 Call Transform.get_localPosition, X0
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move V0, V9
	019 Move V1, V8
	020 Move X1, X31
	021 Move D9, [X31+32]
	022 Move D8, [X31+40]
	023 Call Transform.set_localPosition, X0, X1
	024 Return 
	025 Call 0x1C17F20

Method: System.Void LeanSetLocalPosZ(UnityEngine.Transform transform, System.Single val)

Disassembly:
	0x031C0574 BL 0x31C0024
	0x031C0578 STR X20, [X19 + 0xB0]
	0x031C057C LDR X0, [X22]
	0x031C0580 BL 0x1C16F10
	0x031C0584 LDR X2, [X21]
	0x031C0588 MOV X1, X19
	0x031C058C MOV X20, X0
	0x031C0590 BL 0x31C0024
	0x031C0594 STR X20, [X19 + 0xA8]
	0x031C0598 MOV X0, X19
	0x031C059C LDP X20, X19, [X31 + 0x20]
	0x031C05A0 LDP X22, X21, [X31 + 0x10]
	0x031C05A4 LDP X30, X23, [X31], #0x30
	0x031C05A8 RET
	0x031C05AC STP X30, X23, [X31 - 0x30]!
	0x031C05B0 STP X22, X21, [X31 + 0x10]
	0x031C05B4 STP X20, X19, [X31 + 0x20]
	0x031C05B8 ADRP X23, 0x121B000
	0x031C05BC ADRP X22, 0xF5F000

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Compare X0, 0
	006 JumpIfEqual {25}
	007 Move X1, X31
	008 Move V8, V0
	009 Move X19, X0
	010 Call Transform.get_localPosition, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Move V9, V0
	014 Call Transform.get_localPosition, X0
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Move V0, V9
	019 Move V2, V8
	020 Move X1, X31
	021 Move D9, [X31+32]
	022 Move D8, [X31+40]
	023 Call Transform.set_localPosition, X0, X1
	024 Return 
	025 Call 0x1C17F20

Method: UnityEngine.Color LeanColor(UnityEngine.Transform transform)

Disassembly:
	0x031C05C0 ADRP X20, 0xF5F000
	0x031C05C4 ADRP X21, 0xF5F000
	0x031C05C8 LDRB W8, [X23 + 0xF55]
	0x031C05CC LDR X22, [X22 + 0x428]
	0x031C05D0 LDR X20, [X20 + 0x710]
	0x031C05D4 LDR X21, [X21 + 0x728]
	0x031C05D8 MOV X19, X0
	0x031C05DC TBNZ X8, 0x0, 0x31C060C
	0x031C05E0 ADRP X0, 0xF5F000
	0x031C05E4 LDR X0, [X0 + 0x428]
	0x031C05E8 BL 0x1C16CF4
	0x031C05EC ADRP X0, 0xF5F000
	0x031C05F0 LDR X0, [X0 + 0x728]
	0x031C05F4 BL 0x1C16CF4
	0x031C05F8 ADRP X0, 0xF5F000
	0x031C05FC LDR X0, [X0 + 0x710]
	0x031C0600 BL 0x1C16CF4
	0x031C0604 MOVZ W8, 0x1
	0x031C0608 STRB W8, [X23 + 0xF55]
	0x031C060C MOVZ W8, 0x8
	0x031C0610 STR W8, [X19 + 0x90]
	0x031C0614 LDR X0, [X22]
	0x031C0618 BL 0x1C16F10
	0x031C061C LDR X2, [X20]
	0x031C0620 MOV X1, X19
	0x031C0624 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x121C000
	005 Move W8, [X20+3912]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF60000
	012 Move X0, [X0+1440]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3912], W8
	016 Compare X19, 0
	017 JumpIfEqual {35}
	018 Move X8, 0xF60000
	019 Move X8, [X8+1440]
	020 Move X0, X19
	021 Move X1, [X8]
	022 Call 0x21A4894, X0
	023 Compare X0, 0
	024 JumpIfEqual {35}
	025 Move X1, X31
	026 Call Renderer.get_material, X0
	027 Compare X0, 0
	028 JumpIfEqual {35}
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X1, X31
	032 Move X30, [X31+32]
	033 Call Material.get_color, X0
	034 Return X0
	035 Call 0x1C17F20

