Type: LeanTween/<>c__DisplayClass194_0

Method: System.Void .ctor()

Disassembly:
	0x031B5E8C LDR X0, [X26 + 0x40]
	0x031B5E90 LDR X2, [X26 + 0x28]

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

Method: System.Void <followSpring>b__0()

Disassembly:
	0x031B7C94 LDR X8, [X19 + 0x10]
	0x031B7C98 CBZ X8, 0x31B7D78
	0x031B7C9C LDR X8, [X8 + 0xE8]
	0x031B7CA0 STP S3, S2, [X31 + 0x78]
	0x031B7CA4 CBZ X8, 0x31B7D78
	0x031B7CA8 LDP S8, S9, [X19 + 0x18]
	0x031B7CAC MOV X0, X31
	0x031B7CB0 MOV V15.16B, V1.16B
	0x031B7CB4 MOV V14.16B, V0.16B
	0x031B7CB8 ADD X20, X8, 0x64
	0x031B7CBC BL 0x3C3C714
	0x031B7CC0 LDP S1, S2, [X19 + 0x20]
	0x031B7CC4 LDR V3, [X19 + 0x28]
	0x031B7CC8 LDP S7, S6, [X31 + 0x78]
	0x031B7CCC STR S0, [X31 + 0x10]
	0x031B7CD0 STR S2, [X31 + 0x20]
	0x031B7CD4 STR S3, [X31 + 0x28]
	0x031B7CD8 STR S1, [X31 + 0x18]
	0x031B7CDC MOV V0.16B, V10.16B
	0x031B7CE0 MOV V1.16B, V11.16B
	0x031B7CE4 MOV V2.16B, V12.16B
	0x031B7CE8 MOV V3.16B, V13.16B
	0x031B7CEC MOV V4.16B, V14.16B
	0x031B7CF0 MOV V5.16B, V15.16B
	0x031B7CF4 MOV X0, X20
	0x031B7CF8 STR S9, [X31 + 0x8]
	0x031B7CFC STR S8, [X31]
	0x031B7D00 BL 0x31AAA60
	0x031B7D04 LDR X8, [X19 + 0x10]
	0x031B7D08 CBZ X8, 0x31B7D78
	0x031B7D0C LDR X0, [X8 + 0x58]
	0x031B7D10 CBZ X0, 0x31B7D78
	0x031B7D14 ADRP X8, 0xF68000
	0x031B7D18 LDR X8, [X8 + 0x5A0]
	0x031B7D1C MOV V8.16B, V0.16B
	0x031B7D20 MOV V9.16B, V1.16B
	0x031B7D24 MOV V10.16B, V2.16B
	0x031B7D28 LDR X1, [X8]
	0x031B7D2C MOV V11.16B, V3.16B
	0x031B7D30 BL 0x21A3894
	0x031B7D34 CBZ X0, 0x31B7D78
	0x031B7D38 MOV X1, X31
	0x031B7D3C BL 0x3C1341C
	0x031B7D40 CBZ X0, 0x31B7D78
	0x031B7D44 MOV V0.16B, V8.16B
	0x031B7D48 MOV V1.16B, V9.16B
	0x031B7D4C MOV V2.16B, V10.16B
	0x031B7D50 MOV V3.16B, V11.16B
	0x031B7D54 LDP X20, X19, [X31 + 0x80]
	0x031B7D58 LDR X30, [X31 + 0x70]
	0x031B7D5C LDP D9, D8, [X31 + 0x60]
	0x031B7D60 LDP D11, D10, [X31 + 0x50]
	0x031B7D64 LDP D13, D12, [X31 + 0x40]
	0x031B7D68 LDP D15, D14, [X31 + 0x30]
	0x031B7D6C MOV X1, X31
	0x031B7D70 ADD X31, X31, 0x90
	0x031B7D74 B 0x3C148B4
	0x031B7D78 BL 0x1C16F20
	0x031B7D7C STR D10, [X31 - 0x30]!
	0x031B7D80 STP D9, D8, [X31 + 0x8]
	0x031B7D84 STR X30, [X31 + 0x18]
	0x031B7D88 STP X20, X19, [X31 + 0x20]
	0x031B7D8C MOV X19, X0
	0x031B7D90 LDR X0, [X0 + 0x10]
	0x031B7D94 CBZ X0, 0x31B7E34
	0x031B7D98 LDR X20, [X0 + 0xE8]
	0x031B7D9C CBZ X20, 0x31B7E34

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X19, X0
	015 Move X0, [X0+16]
	016 Compare X0, 0
	017 JumpIfEqual {91}
	018 Move X21, [X0+232]
	019 Compare X21, 0
	020 JumpIfEqual {91}
	021 Move S8, [X21+36]
	022 Move S9, [X21+40]
	023 Move V10, [X21+44]
	024 Move X1, X31
	025 Call LTDescr.get_toTrans, X0
	026 Compare X0, 0
	027 JumpIfEqual {91}
	028 Move X1, X31
	029 Call Transform.get_localPosition, X0
	030 Move X8, [X19+16]
	031 Compare X8, 0
	032 JumpIfEqual {91}
	033 Move S14, [X19+24]
	034 Move S15, [X19+28]
	035 Move X0, X31
	036 Move V11, V0
	037 Move V12, V1
	038 Move V13, V2
	039 Add X20, X8, 96
	040 Call Time.get_deltaTime
	041 Move S1, [X19+32]
	042 Move S2, [X19+36]
	043 Move [X31], S0
	044 Move V0, V8
	045 Move V3, V11
	046 Move [X31+16], S2
	047 Move [X31+8], S1
	048 Move V1, V9
	049 Move V2, V10
	050 Move V4, V12
	051 Move V5, V13
	052 Move X0, X20
	053 Move V6, V14
	054 Move V7, V15
	055 Call LeanSmooth.spring, X0, X1, X2, V0, V1, V2, V3, V4
	056 Move [X21+36], S0
	057 Move [X21+44], S1
	058 Move [X21+44], S2
	059 Move X8, [X19+16]
	060 Compare X8, 0
	061 JumpIfEqual {91}
	062 Move X9, [X8+232]
	063 Compare X9, 0
	064 JumpIfEqual {91}
	065 Move X0, [X8+88]
	066 Compare X0, 0
	067 JumpIfEqual {91}
	068 Move V0, [X9+44]
	069 Move V1, [X8+116]
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 Move X20, [X31+112]
	073 Move X19, [X31+120]
	074 Move X30, [X31+96]
	075 Move X21, [X31+104]
	076 Move D9, [X31+80]
	077 Move D8, [X31+88]
	078 Move D11, [X31+64]
	079 Move D10, [X31+72]
	080 Move D13, [X31+48]
	081 Move D12, [X31+56]
	082 Move D15, [X31+32]
	083 Move D14, [X31+40]
	084 Add S2, S0, S1
	085 Add V0, V3, V4
	086 Move S1, V0.S[1]
	087 Move X1, X31
	088 Add X31, X31, 128
	089 Call Transform.set_localPosition, X0, X1
	090 Return 
	091 Call 0x1C17F20

Method: System.Void <followSpring>b__1()

Disassembly:
	0x031B7DA0 LDP S8, S9, [X20 + 0x24]
	0x031B7DA4 LDR V10, [X20 + 0x2C]
	0x031B7DA8 MOV X1, X31
	0x031B7DAC BL 0x31BF678
	0x031B7DB0 CBZ X0, 0x31B7E34
	0x031B7DB4 MOV X1, X31
	0x031B7DB8 BL 0x3C3EB78
	0x031B7DBC LDR V6, [X19 + 0x18]
	0x031B7DC0 MOV V3.16B, V0.16B
	0x031B7DC4 MOV V4.16B, V1.16B
	0x031B7DC8 MOV V5.16B, V2.16B
	0x031B7DCC FMOV S7, -1
	0x031B7DD0 MOV V0.16B, V8.16B
	0x031B7DD4 MOV V1.16B, V9.16B
	0x031B7DD8 MOV V2.16B, V10.16B
	0x031B7DDC BL 0x31AA61C
	0x031B7DE0 STP S0, S1, [X20 + 0x24]
	0x031B7DE4 STR S2, [X20 + 0x2C]
	0x031B7DE8 LDR X8, [X19 + 0x10]
	0x031B7DEC CBZ X8, 0x31B7E34
	0x031B7DF0 LDR X9, [X8 + 0xE8]
	0x031B7DF4 CBZ X9, 0x31B7E34
	0x031B7DF8 LDR X0, [X8 + 0x58]
	0x031B7DFC CBZ X0, 0x31B7E34
	0x031B7E00 LDR V0, [X9 + 0x2C]
	0x031B7E04 LDR V1, [X8 + 0x74]
	0x031B7E08 LDUR V3, [X9 + 0x24]
	0x031B7E0C LDUR V4, [X8 + 0x6C]
	0x031B7E10 LDP X20, X19, [X31 + 0x20]
	0x031B7E14 LDR X30, [X31 + 0x18]
	0x031B7E18 LDP D9, D8, [X31 + 0x8]
	0x031B7E1C FADD S2, S0, S1
	0x031B7E20 FADD V0.2S, V3.2S, V4.2S
	0x031B7E24 MOV S1, V0.S[1]
	0x031B7E28 MOV X1, X31
	0x031B7E2C LDR V10, [X31], #0x30
	0x031B7E30 B 0x3C3EC04
	0x031B7E34 BL 0x1C16F20
	0x031B7E38 STR D10, [X31 - 0x30]!
	0x031B7E3C STP D9, D8, [X31 + 0x8]
	0x031B7E40 STR X30, [X31 + 0x18]
	0x031B7E44 STP X20, X19, [X31 + 0x20]
	0x031B7E48 LDR X8, [X0 + 0x10]
	0x031B7E4C CBZ X8, 0x31B7ED0
	0x031B7E50 LDR X19, [X8 + 0x58]
	0x031B7E54 CBZ X19, 0x31B7ED0
	0x031B7E58 MOV X20, X0
	0x031B7E5C MOV X0, X19
	0x031B7E60 MOV X1, X31
	0x031B7E64 BL 0x3C3F58C
	0x031B7E68 LDR X0, [X20 + 0x10]
	0x031B7E6C CBZ X0, 0x31B7ED0
	0x031B7E70 MOV X1, X31
	0x031B7E74 MOV V8.16B, V0.16B
	0x031B7E78 MOV V9.16B, V1.16B
	0x031B7E7C MOV V10.16B, V2.16B
	0x031B7E80 BL 0x31BF678
	0x031B7E84 CBZ X0, 0x31B7ED0
	0x031B7E88 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X20, [X0+16]
	015 Compare X20, 0
	016 JumpIfEqual {82}
	017 Move S8, [X20+120]
	018 Move S9, [X20+124]
	019 Move V10, [X20+128]
	020 Move X19, X0
	021 Move X0, X20
	022 Move X1, X31
	023 Call LTDescr.get_toTrans, X0
	024 Compare X0, 0
	025 JumpIfEqual {82}
	026 Move X1, X31
	027 Call Transform.get_position, X0
	028 Move X8, [X19+16]
	029 Compare X8, 0
	030 JumpIfEqual {82}
	031 Move S14, [X19+24]
	032 Move S15, [X19+28]
	033 Move X0, X31
	034 Move V11, V0
	035 Move V12, V1
	036 Move V13, V2
	037 Add X21, X8, 96
	038 Call Time.get_deltaTime
	039 Move S1, [X19+32]
	040 Move S2, [X19+36]
	041 Move [X31], S0
	042 Move V0, V8
	043 Move V3, V11
	044 Move [X31+16], S2
	045 Move [X31+8], S1
	046 Move V1, V9
	047 Move V2, V10
	048 Move V4, V12
	049 Move V5, V13
	050 Move X0, X21
	051 Move V6, V14
	052 Move V7, V15
	053 Call LeanSmooth.spring, X0, X1, X2, V0, V1, V2, V3, V4
	054 Move [X20+120], S0
	055 Move [X20+128], S1
	056 Move [X20+128], S2
	057 Move X8, [X19+16]
	058 Compare X8, 0
	059 JumpIfEqual {82}
	060 Move X0, [X8+88]
	061 Compare X0, 0
	062 JumpIfEqual {82}
	063 Move S1, [X8+124]
	064 Move S2, [X8+128]
	065 Move V0, [X8+120]
	066 Move X20, [X31+112]
	067 Move X19, [X31+120]
	068 Move X30, [X31+96]
	069 Move X21, [X31+104]
	070 Move D9, [X31+80]
	071 Move D8, [X31+88]
	072 Move D11, [X31+64]
	073 Move D10, [X31+72]
	074 Move D13, [X31+48]
	075 Move D12, [X31+56]
	076 Move D15, [X31+32]
	077 Move D14, [X31+40]
	078 Move X1, X31
	079 Add X31, X31, 128
	080 Call Transform.set_position, X0, X1
	081 Return 
	082 Call 0x1C17F20

Method: System.Void <followSpring>b__2()

Disassembly:
	0x031B7E8C BL 0x3C3F58C
	0x031B7E90 LDR V6, [X20 + 0x18]
	0x031B7E94 MOV V3.16B, V0.16B
	0x031B7E98 MOV V4.16B, V1.16B
	0x031B7E9C MOV V5.16B, V2.16B
	0x031B7EA0 FMOV S7, -1
	0x031B7EA4 MOV V0.16B, V8.16B
	0x031B7EA8 MOV V1.16B, V9.16B
	0x031B7EAC MOV V2.16B, V10.16B
	0x031B7EB0 BL 0x31AA61C
	0x031B7EB4 MOV X0, X19
	0x031B7EB8 LDP X20, X19, [X31 + 0x20]
	0x031B7EBC LDR X30, [X31 + 0x18]
	0x031B7EC0 LDP D9, D8, [X31 + 0x8]
	0x031B7EC4 MOV X1, X31
	0x031B7EC8 LDR V10, [X31], #0x30
	0x031B7ECC B 0x3C3F62C
	0x031B7ED0 BL 0x1C16F20
	0x031B7ED4 STR D10, [X31 - 0x30]!
	0x031B7ED8 STP D9, D8, [X31 + 0x8]
	0x031B7EDC STR X30, [X31 + 0x18]
	0x031B7EE0 STP X20, X19, [X31 + 0x20]
	0x031B7EE4 LDR X8, [X0 + 0x10]
	0x031B7EE8 CBZ X8, 0x31B7F88
	0x031B7EEC LDR X19, [X8 + 0x58]
	0x031B7EF0 CBZ X19, 0x31B7F88
	0x031B7EF4 MOV X20, X0
	0x031B7EF8 MOV X0, X19
	0x031B7EFC MOV X1, X31
	0x031B7F00 BL 0x3C3EB78
	0x031B7F04 LDR X0, [X20 + 0x10]
	0x031B7F08 CBZ X0, 0x31B7F88
	0x031B7F0C MOV X1, X31
	0x031B7F10 MOV V8.16B, V0.16B
	0x031B7F14 BL 0x31BF678
	0x031B7F18 CBZ X0, 0x31B7F88
	0x031B7F1C MOV X1, X31
	0x031B7F20 BL 0x3C3EB78
	0x031B7F24 LDR V10, [X20 + 0x18]
	0x031B7F28 MOV X0, X31
	0x031B7F2C MOV V9.16B, V0.16B
	0x031B7F30 BL 0x3C3C714
	0x031B7F34 FMUL S1, S10, S0

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {59}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {59}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_localPosition, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {59}
	022 Move X1, X31
	023 Move V8, V0
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {59}
	027 Move X1, X31
	028 Call Transform.get_localPosition, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {59}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V0
	036 Add X21, X8, 96
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V4, V0
	041 Move V0, V8
	042 Move V1, V9
	043 Move X0, X21
	044 Move V2, V10
	045 Move V3, V11
	046 Call LeanSmooth.spring, V0, V1, X0, V2, V3, V4, V5, V6
	047 Move X0, X19
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move X1, X31
	055 Move D11, [X31+64]
	056 Move D10, [X31+72]
	057 Call LeanTweenExt.LeanSetLocalPosX, X0, V0
	058 Return 
	059 Call 0x1C17F20

Method: System.Void <followSpring>b__3()

Disassembly:
	0x031B7F38 FNMUL S0, S10, S0
	0x031B7F3C FCMP S9, S8
	0x031B7F40 FCSEL S0, S1, S0, GT
	0x031B7F44 FADD S0, S8, S0
	0x031B7F48 FSUB S1, S0, S9
	0x031B7F4C B.LE 0x31B7F5C
	0x031B7F50 FCMP S1, 0x0
	0x031B7F54 B.LE 0x31B7F64
	0x031B7F58 B 0x31B7F68
	0x031B7F5C FCMP S1, 0x0
	0x031B7F60 B.MI 0x31B7F68
	0x031B7F64 MOV V9.16B, V0.16B
	0x031B7F68 MOV X0, X19
	0x031B7F6C MOV V0.16B, V9.16B
	0x031B7F70 LDP X20, X19, [X31 + 0x20]
	0x031B7F74 LDR X30, [X31 + 0x18]
	0x031B7F78 LDP D9, D8, [X31 + 0x8]
	0x031B7F7C MOV X1, X31
	0x031B7F80 LDR V10, [X31], #0x30
	0x031B7F84 B 0x31BF4DC
	0x031B7F88 BL 0x1C16F20
	0x031B7F8C STR D10, [X31 - 0x30]!
	0x031B7F90 STP D9, D8, [X31 + 0x8]
	0x031B7F94 STR X30, [X31 + 0x18]
	0x031B7F98 STP X20, X19, [X31 + 0x20]
	0x031B7F9C LDR X8, [X0 + 0x10]
	0x031B7FA0 CBZ X8, 0x31B8040
	0x031B7FA4 LDR X19, [X8 + 0x58]
	0x031B7FA8 CBZ X19, 0x31B8040
	0x031B7FAC MOV X20, X0
	0x031B7FB0 MOV X0, X19
	0x031B7FB4 MOV X1, X31
	0x031B7FB8 BL 0x3C3EB78
	0x031B7FBC LDR X0, [X20 + 0x10]
	0x031B7FC0 CBZ X0, 0x31B8040
	0x031B7FC4 MOV X1, X31
	0x031B7FC8 MOV V8.16B, V1.16B
	0x031B7FCC BL 0x31BF678
	0x031B7FD0 CBZ X0, 0x31B8040
	0x031B7FD4 MOV X1, X31
	0x031B7FD8 BL 0x3C3EB78
	0x031B7FDC LDR V10, [X20 + 0x18]
	0x031B7FE0 MOV X0, X31

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {59}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {59}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_localPosition, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {59}
	022 Move X1, X31
	023 Move V8, V1
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {59}
	027 Move X1, X31
	028 Call Transform.get_localPosition, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {59}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V1
	036 Add X21, X8, 100
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V4, V0
	041 Move V0, V8
	042 Move V1, V9
	043 Move X0, X21
	044 Move V2, V10
	045 Move V3, V11
	046 Call LeanSmooth.spring, V0, V1, X0, V2, V3, V4, V5, V6
	047 Move X0, X19
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move X1, X31
	055 Move D11, [X31+64]
	056 Move D10, [X31+72]
	057 Call LeanTweenExt.LeanSetLocalPosY, X0, V0
	058 Return 
	059 Call 0x1C17F20

Method: System.Void <followSpring>b__4()

Disassembly:
	0x031B7FE4 MOV V9.16B, V1.16B
	0x031B7FE8 BL 0x3C3C714
	0x031B7FEC FMUL S1, S10, S0
	0x031B7FF0 FNMUL S0, S10, S0
	0x031B7FF4 FCMP S9, S8
	0x031B7FF8 FCSEL S0, S1, S0, GT
	0x031B7FFC FADD S0, S8, S0
	0x031B8000 FSUB S1, S0, S9
	0x031B8004 B.LE 0x31B8014
	0x031B8008 FCMP S1, 0x0
	0x031B800C B.LE 0x31B801C
	0x031B8010 B 0x31B8020
	0x031B8014 FCMP S1, 0x0
	0x031B8018 B.MI 0x31B8020
	0x031B801C MOV V9.16B, V0.16B
	0x031B8020 MOV X0, X19
	0x031B8024 MOV V0.16B, V9.16B
	0x031B8028 LDP X20, X19, [X31 + 0x20]
	0x031B802C LDR X30, [X31 + 0x18]
	0x031B8030 LDP D9, D8, [X31 + 0x8]
	0x031B8034 MOV X1, X31
	0x031B8038 LDR V10, [X31], #0x30
	0x031B803C B 0x31BF528
	0x031B8040 BL 0x1C16F20
	0x031B8044 STR D10, [X31 - 0x30]!
	0x031B8048 STP D9, D8, [X31 + 0x8]
	0x031B804C STR X30, [X31 + 0x18]
	0x031B8050 STP X20, X19, [X31 + 0x20]
	0x031B8054 LDR X8, [X0 + 0x10]
	0x031B8058 CBZ X8, 0x31B80F8
	0x031B805C LDR X19, [X8 + 0x58]
	0x031B8060 CBZ X19, 0x31B80F8
	0x031B8064 MOV X20, X0
	0x031B8068 MOV X0, X19
	0x031B806C MOV X1, X31
	0x031B8070 BL 0x3C3EB78
	0x031B8074 LDR X0, [X20 + 0x10]
	0x031B8078 CBZ X0, 0x31B80F8
	0x031B807C MOV X1, X31
	0x031B8080 MOV V8.16B, V2.16B
	0x031B8084 BL 0x31BF678
	0x031B8088 CBZ X0, 0x31B80F8
	0x031B808C MOV X1, X31

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {59}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {59}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_localPosition, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {59}
	022 Move X1, X31
	023 Move V8, V2
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {59}
	027 Move X1, X31
	028 Call Transform.get_localPosition, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {59}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V2
	036 Add X21, X8, 104
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V4, V0
	041 Move V0, V8
	042 Move V1, V9
	043 Move X0, X21
	044 Move V2, V10
	045 Move V3, V11
	046 Call LeanSmooth.spring, V0, V1, X0, V2, V3, V4, V5, V6
	047 Move X0, X19
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move X1, X31
	055 Move D11, [X31+64]
	056 Move D10, [X31+72]
	057 Call LeanTweenExt.LeanSetLocalPosZ, X0, V0
	058 Return 
	059 Call 0x1C17F20

Method: System.Void <followSpring>b__5()

Disassembly:
	0x031B8090 BL 0x3C3EB78
	0x031B8094 LDR V10, [X20 + 0x18]
	0x031B8098 MOV X0, X31
	0x031B809C MOV V9.16B, V2.16B
	0x031B80A0 BL 0x3C3C714
	0x031B80A4 FMUL S1, S10, S0
	0x031B80A8 FNMUL S0, S10, S0
	0x031B80AC FCMP S9, S8
	0x031B80B0 FCSEL S0, S1, S0, GT
	0x031B80B4 FADD S0, S8, S0
	0x031B80B8 FSUB S1, S0, S9
	0x031B80BC B.LE 0x31B80CC
	0x031B80C0 FCMP S1, 0x0
	0x031B80C4 B.LE 0x31B80D4
	0x031B80C8 B 0x31B80D8
	0x031B80CC FCMP S1, 0x0
	0x031B80D0 B.MI 0x31B80D8
	0x031B80D4 MOV V9.16B, V0.16B
	0x031B80D8 MOV X0, X19
	0x031B80DC MOV V0.16B, V9.16B
	0x031B80E0 LDP X20, X19, [X31 + 0x20]
	0x031B80E4 LDR X30, [X31 + 0x18]
	0x031B80E8 LDP D9, D8, [X31 + 0x8]
	0x031B80EC MOV X1, X31
	0x031B80F0 LDR V10, [X31], #0x30
	0x031B80F4 B 0x31BF574
	0x031B80F8 BL 0x1C16F20
	0x031B80FC STR D10, [X31 - 0x30]!
	0x031B8100 STP D9, D8, [X31 + 0x8]
	0x031B8104 STR X30, [X31 + 0x18]
	0x031B8108 STP X20, X19, [X31 + 0x20]
	0x031B810C LDR X8, [X0 + 0x10]
	0x031B8110 CBZ X8, 0x31B81B0
	0x031B8114 LDR X19, [X8 + 0x58]
	0x031B8118 CBZ X19, 0x31B81B0
	0x031B811C MOV X20, X0
	0x031B8120 MOV X0, X19
	0x031B8124 MOV X1, X31
	0x031B8128 BL 0x3C3F58C
	0x031B812C LDR X0, [X20 + 0x10]
	0x031B8130 CBZ X0, 0x31B81B0
	0x031B8134 MOV X1, X31
	0x031B8138 MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {59}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {59}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_position, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {59}
	022 Move X1, X31
	023 Move V8, V0
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {59}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {59}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V0
	036 Add X21, X8, 96
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V4, V0
	041 Move V0, V8
	042 Move V1, V9
	043 Move X0, X21
	044 Move V2, V10
	045 Move V3, V11
	046 Call LeanSmooth.spring, V0, V1, X0, V2, V3, V4, V5, V6
	047 Move X0, X19
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move X1, X31
	055 Move D11, [X31+64]
	056 Move D10, [X31+72]
	057 Call LeanTweenExt.LeanSetPosX, X0, V0
	058 Return 
	059 Call 0x1C17F20

Method: System.Void <followSpring>b__6()

Disassembly:
	0x031B813C BL 0x31BF678
	0x031B8140 CBZ X0, 0x31B81B0
	0x031B8144 MOV X1, X31
	0x031B8148 BL 0x3C3F58C
	0x031B814C LDR V10, [X20 + 0x18]
	0x031B8150 MOV X0, X31
	0x031B8154 MOV V9.16B, V0.16B
	0x031B8158 BL 0x3C3C714
	0x031B815C FMUL S1, S10, S0
	0x031B8160 FNMUL S0, S10, S0
	0x031B8164 FCMP S9, S8
	0x031B8168 FCSEL S0, S1, S0, GT
	0x031B816C FADD S0, S8, S0
	0x031B8170 FSUB S1, S0, S9
	0x031B8174 B.LE 0x31B8184
	0x031B8178 FCMP S1, 0x0
	0x031B817C B.LE 0x31B818C
	0x031B8180 B 0x31B8190
	0x031B8184 FCMP S1, 0x0
	0x031B8188 B.MI 0x31B8190
	0x031B818C MOV V9.16B, V0.16B
	0x031B8190 MOV X0, X19
	0x031B8194 MOV V0.16B, V9.16B
	0x031B8198 LDP X20, X19, [X31 + 0x20]
	0x031B819C LDR X30, [X31 + 0x18]
	0x031B81A0 LDP D9, D8, [X31 + 0x8]
	0x031B81A4 MOV X1, X31
	0x031B81A8 LDR V10, [X31], #0x30
	0x031B81AC B 0x31BF3F8
	0x031B81B0 BL 0x1C16F20
	0x031B81B4 STR D10, [X31 - 0x30]!
	0x031B81B8 STP D9, D8, [X31 + 0x8]
	0x031B81BC STR X30, [X31 + 0x18]
	0x031B81C0 STP X20, X19, [X31 + 0x20]
	0x031B81C4 LDR X8, [X0 + 0x10]
	0x031B81C8 CBZ X8, 0x31B8268
	0x031B81CC LDR X19, [X8 + 0x58]
	0x031B81D0 CBZ X19, 0x31B8268
	0x031B81D4 MOV X20, X0
	0x031B81D8 MOV X0, X19
	0x031B81DC MOV X1, X31
	0x031B81E0 BL 0x3C3F58C
	0x031B81E4 LDR X0, [X20 + 0x10]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {59}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {59}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_position, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {59}
	022 Move X1, X31
	023 Move V8, V1
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {59}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {59}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V1
	036 Add X21, X8, 100
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V4, V0
	041 Move V0, V8
	042 Move V1, V9
	043 Move X0, X21
	044 Move V2, V10
	045 Move V3, V11
	046 Call LeanSmooth.spring, V0, V1, X0, V2, V3, V4, V5, V6
	047 Move X0, X19
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move X1, X31
	055 Move D11, [X31+64]
	056 Move D10, [X31+72]
	057 Call LeanTweenExt.LeanSetPosY, X0, V0
	058 Return 
	059 Call 0x1C17F20

Method: System.Void <followSpring>b__7()

Disassembly:
	0x031B81E8 CBZ X0, 0x31B8268
	0x031B81EC MOV X1, X31
	0x031B81F0 MOV V8.16B, V1.16B
	0x031B81F4 BL 0x31BF678
	0x031B81F8 CBZ X0, 0x31B8268
	0x031B81FC MOV X1, X31
	0x031B8200 BL 0x3C3F58C
	0x031B8204 LDR V10, [X20 + 0x18]
	0x031B8208 MOV X0, X31
	0x031B820C MOV V9.16B, V1.16B
	0x031B8210 BL 0x3C3C714
	0x031B8214 FMUL S1, S10, S0
	0x031B8218 FNMUL S0, S10, S0
	0x031B821C FCMP S9, S8
	0x031B8220 FCSEL S0, S1, S0, GT
	0x031B8224 FADD S0, S8, S0
	0x031B8228 FSUB S1, S0, S9
	0x031B822C B.LE 0x31B823C
	0x031B8230 FCMP S1, 0x0
	0x031B8234 B.LE 0x31B8244
	0x031B8238 B 0x31B8248
	0x031B823C FCMP S1, 0x0
	0x031B8240 B.MI 0x31B8248
	0x031B8244 MOV V9.16B, V0.16B
	0x031B8248 MOV X0, X19
	0x031B824C MOV V0.16B, V9.16B
	0x031B8250 LDP X20, X19, [X31 + 0x20]
	0x031B8254 LDR X30, [X31 + 0x18]
	0x031B8258 LDP D9, D8, [X31 + 0x8]
	0x031B825C MOV X1, X31
	0x031B8260 LDR V10, [X31], #0x30
	0x031B8264 B 0x31BF444
	0x031B8268 BL 0x1C16F20
	0x031B826C STR D10, [X31 - 0x30]!
	0x031B8270 STP D9, D8, [X31 + 0x8]
	0x031B8274 STR X30, [X31 + 0x18]
	0x031B8278 STP X20, X19, [X31 + 0x20]
	0x031B827C LDR X8, [X0 + 0x10]
	0x031B8280 CBZ X8, 0x31B8320
	0x031B8284 LDR X19, [X8 + 0x58]
	0x031B8288 CBZ X19, 0x31B8320
	0x031B828C MOV X20, X0
	0x031B8290 MOV X0, X19

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0+16]
	010 Compare X8, 0
	011 JumpIfEqual {59}
	012 Move X19, [X8+88]
	013 Compare X19, 0
	014 JumpIfEqual {59}
	015 Move X20, X0
	016 Move X0, X19
	017 Move X1, X31
	018 Call Transform.get_position, X0
	019 Move X0, [X20+16]
	020 Compare X0, 0
	021 JumpIfEqual {59}
	022 Move X1, X31
	023 Move V8, V2
	024 Call LTDescr.get_toTrans, X0
	025 Compare X0, 0
	026 JumpIfEqual {59}
	027 Move X1, X31
	028 Call Transform.get_position, X0
	029 Move X8, [X20+16]
	030 Compare X8, 0
	031 JumpIfEqual {59}
	032 Move S10, [X20+24]
	033 Move S11, [X20+28]
	034 Move X0, X31
	035 Move V9, V2
	036 Add X21, X8, 104
	037 Call Time.get_deltaTime
	038 Move S5, [X20+32]
	039 Move S6, [X20+36]
	040 Move V4, V0
	041 Move V0, V8
	042 Move V1, V9
	043 Move X0, X21
	044 Move V2, V10
	045 Move V3, V11
	046 Call LeanSmooth.spring, V0, V1, X0, V2, V3, V4, V5, V6
	047 Move X0, X19
	048 Move X20, [X31+48]
	049 Move X19, [X31+56]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Move D9, [X31+16]
	053 Move D8, [X31+24]
	054 Move X1, X31
	055 Move D11, [X31+64]
	056 Move D10, [X31+72]
	057 Call LeanTweenExt.LeanSetPosZ, X0, V0
	058 Return 
	059 Call 0x1C17F20

Method: System.Void <followSpring>b__8()

Disassembly:
	0x031B8294 MOV X1, X31
	0x031B8298 BL 0x3C3F58C
	0x031B829C LDR X0, [X20 + 0x10]
	0x031B82A0 CBZ X0, 0x31B8320
	0x031B82A4 MOV X1, X31
	0x031B82A8 MOV V8.16B, V2.16B
	0x031B82AC BL 0x31BF678
	0x031B82B0 CBZ X0, 0x31B8320
	0x031B82B4 MOV X1, X31
	0x031B82B8 BL 0x3C3F58C
	0x031B82BC LDR V10, [X20 + 0x18]
	0x031B82C0 MOV X0, X31
	0x031B82C4 MOV V9.16B, V2.16B
	0x031B82C8 BL 0x3C3C714
	0x031B82CC FMUL S1, S10, S0
	0x031B82D0 FNMUL S0, S10, S0
	0x031B82D4 FCMP S9, S8
	0x031B82D8 FCSEL S0, S1, S0, GT
	0x031B82DC FADD S0, S8, S0
	0x031B82E0 FSUB S1, S0, S9
	0x031B82E4 B.LE 0x31B82F4
	0x031B82E8 FCMP S1, 0x0
	0x031B82EC B.LE 0x31B82FC
	0x031B82F0 B 0x31B8300
	0x031B82F4 FCMP S1, 0x0
	0x031B82F8 B.MI 0x31B8300
	0x031B82FC MOV V9.16B, V0.16B
	0x031B8300 MOV X0, X19
	0x031B8304 MOV V0.16B, V9.16B
	0x031B8308 LDP X20, X19, [X31 + 0x20]
	0x031B830C LDR X30, [X31 + 0x18]
	0x031B8310 LDP D9, D8, [X31 + 0x8]
	0x031B8314 MOV X1, X31
	0x031B8318 LDR V10, [X31], #0x30
	0x031B831C B 0x31BF490
	0x031B8320 BL 0x1C16F20
	0x031B8324 STR D10, [X31 - 0x30]!
	0x031B8328 STP D9, D8, [X31 + 0x8]
	0x031B832C STR X30, [X31 + 0x18]
	0x031B8330 STP X20, X19, [X31 + 0x20]
	0x031B8334 LDR X8, [X0 + 0x10]
	0x031B8338 CBZ X8, 0x31B83BC
	0x031B833C LDR X19, [X8 + 0x58]
	0x031B8340 CBZ X19, 0x31B83BC
	0x031B8344 MOV X20, X0
	0x031B8348 MOV X0, X19
	0x031B834C MOV X1, X31
	0x031B8350 BL 0x3C3FBAC
	0x031B8354 LDR X0, [X20 + 0x10]
	0x031B8358 CBZ X0, 0x31B83BC
	0x031B835C MOV X1, X31
	0x031B8360 MOV V8.16B, V0.16B
	0x031B8364 MOV V9.16B, V1.16B
	0x031B8368 MOV V10.16B, V2.16B
	0x031B836C BL 0x31BF678
	0x031B8370 CBZ X0, 0x31B83BC
	0x031B8374 MOV X1, X31
	0x031B8378 BL 0x3C3FBAC
	0x031B837C LDR V6, [X20 + 0x18]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X8, [X0+16]
	015 Compare X8, 0
	016 JumpIfEqual {79}
	017 Move X19, [X8+88]
	018 Compare X19, 0
	019 JumpIfEqual {79}
	020 Move X20, X0
	021 Move X0, X19
	022 Move X1, X31
	023 Call Transform.get_localScale, X0
	024 Move X0, [X20+16]
	025 Compare X0, 0
	026 JumpIfEqual {79}
	027 Move X1, X31
	028 Move V8, V0
	029 Move V9, V1
	030 Move V10, V2
	031 Call LTDescr.get_toTrans, X0
	032 Compare X0, 0
	033 JumpIfEqual {79}
	034 Move X1, X31
	035 Call Transform.get_localScale, X0
	036 Move X8, [X20+16]
	037 Compare X8, 0
	038 JumpIfEqual {79}
	039 Move S14, [X20+24]
	040 Move S15, [X20+28]
	041 Move X0, X31
	042 Move V11, V0
	043 Move V12, V1
	044 Move V13, V2
	045 Add X21, X8, 96
	046 Call Time.get_deltaTime
	047 Move S1, [X20+32]
	048 Move S2, [X20+36]
	049 Move [X31], S0
	050 Move V0, V8
	051 Move V3, V11
	052 Move [X31+16], S2
	053 Move [X31+8], S1
	054 Move V1, V9
	055 Move V2, V10
	056 Move V4, V12
	057 Move V5, V13
	058 Move X0, X21
	059 Move V6, V14
	060 Move V7, V15
	061 Call LeanSmooth.spring, X0, X1, X2, V0, V1, V2, V3, V4
	062 Move X0, X19
	063 Move X20, [X31+112]
	064 Move X19, [X31+120]
	065 Move X30, [X31+96]
	066 Move X21, [X31+104]
	067 Move D9, [X31+80]
	068 Move D8, [X31+88]
	069 Move D11, [X31+64]
	070 Move D10, [X31+72]
	071 Move D13, [X31+48]
	072 Move D12, [X31+56]
	073 Move D15, [X31+32]
	074 Move D14, [X31+40]
	075 Move X1, X31
	076 Add X31, X31, 128
	077 Call Transform.set_localScale, X0, X1
	078 Return 
	079 Call 0x1C17F20

Method: System.Void <followSpring>b__9()

Disassembly:
	0x031B8380 MOV V3.16B, V0.16B
	0x031B8384 MOV V4.16B, V1.16B
	0x031B8388 MOV V5.16B, V2.16B
	0x031B838C FMOV S7, -1
	0x031B8390 MOV V0.16B, V8.16B
	0x031B8394 MOV V1.16B, V9.16B
	0x031B8398 MOV V2.16B, V10.16B
	0x031B839C BL 0x31AA61C
	0x031B83A0 MOV X0, X19
	0x031B83A4 LDP X20, X19, [X31 + 0x20]
	0x031B83A8 LDR X30, [X31 + 0x18]
	0x031B83AC LDP D9, D8, [X31 + 0x8]
	0x031B83B0 MOV X1, X31
	0x031B83B4 LDR V10, [X31], #0x30
	0x031B83B8 B 0x3C3FC4C
	0x031B83BC BL 0x1C16F20
	0x031B83C0 SUB X31, X31, 0x50
	0x031B83C4 STP D11, D10, [X31 + 0x10]
	0x031B83C8 STP D9, D8, [X31 + 0x20]
	0x031B83CC STR X30, [X31 + 0x30]
	0x031B83D0 STP X20, X19, [X31 + 0x40]
	0x031B83D4 ADRP X20, 0x1223000
	0x031B83D8 LDRB W8, [X20 + 0xED3]
	0x031B83DC MOV X19, X0
	0x031B83E0 TBNZ X8, 0x0, 0x31B83F8
	0x031B83E4 ADRP X0, 0xF67000
	0x031B83E8 LDR X0, [X0 + 0x5A0]
	0x031B83EC BL 0x1C16CF4
	0x031B83F0 MOVZ W8, 0x1
	0x031B83F4 STRB W8, [X20 + 0xED3]
	0x031B83F8 LDR X8, [X19 + 0x10]
	0x031B83FC CBZ X8, 0x31B84CC
	0x031B8400 LDR X0, [X8 + 0x58]
	0x031B8404 MOV X1, X31
	0x031B8408 BL 0x31BF5C0
	0x031B840C LDR X0, [X19 + 0x10]
	0x031B8410 CBZ X0, 0x31B84CC
	0x031B8414 MOV X1, X31
	0x031B8418 MOV V8.16B, V0.16B
	0x031B841C MOV V9.16B, V1.16B
	0x031B8420 MOV V10.16B, V2.16B
	0x031B8424 MOV V11.16B, V3.16B
	0x031B8428 BL 0x31BF678
	0x031B842C MOV X1, X31
	0x031B8430 BL 0x31BF5C0
	0x031B8434 MOV V4.16B, V0.16B
	0x031B8438 LDR V0, [X19 + 0x18]
	0x031B843C MOV V5.16B, V1.16B
	0x031B8440 MOV V6.16B, V2.16B
	0x031B8444 MOV V7.16B, V3.16B
	0x031B8448 STR S0, [X31]
	0x031B844C MOV V0.16B, V8.16B
	0x031B8450 MOV V1.16B, V9.16B
	0x031B8454 MOV V2.16B, V10.16B
	0x031B8458 MOV V3.16B, V11.16B
	0x031B845C BL 0x31AA74C
	0x031B8460 LDR X8, [X19 + 0x10]
	0x031B8464 CBZ X8, 0x31B84CC
	0x031B8468 LDR X0, [X8 + 0x58]
	0x031B846C CBZ X0, 0x31B84CC
	0x031B8470 ADRP X8, 0xF67000
	0x031B8474 LDR X8, [X8 + 0x5A0]
	0x031B8478 MOV V8.16B, V0.16B
	0x031B847C MOV V9.16B, V1.16B
	0x031B8480 MOV V10.16B, V2.16B
	0x031B8484 LDR X1, [X8]
	0x031B8488 MOV V11.16B, V3.16B
	0x031B848C BL 0x21A3894
	0x031B8490 CBZ X0, 0x31B84CC
	0x031B8494 MOV X1, X31
	0x031B8498 BL 0x3C1341C
	0x031B849C CBZ X0, 0x31B84CC
	0x031B84A0 MOV V0.16B, V8.16B
	0x031B84A4 MOV V1.16B, V9.16B
	0x031B84A8 MOV V2.16B, V10.16B
	0x031B84AC MOV V3.16B, V11.16B
	0x031B84B0 LDP X20, X19, [X31 + 0x40]
	0x031B84B4 LDR X30, [X31 + 0x30]
	0x031B84B8 LDP D9, D8, [X31 + 0x20]
	0x031B84BC LDP D11, D10, [X31 + 0x10]
	0x031B84C0 MOV X1, X31
	0x031B84C4 ADD X31, X31, 0x50
	0x031B84C8 B 0x3C148B4
	0x031B84CC BL 0x1C16F20
	0x031B84D0 STR X30, [X31 - 0x10]!
	0x031B84D4 CBZ X0, 0x31B8568
	0x031B84D8 LDR X10, [X0 + 0x18]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X20
	012 Move [X31+136], X19
	013 Move X20, 0x1224000
	014 Move W8, [X20+3793]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF68000
	021 Move X0, [X0+1440]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3793], W8
	025 Move X8, [X19+16]
	026 Compare X8, 0
	027 JumpIfEqual {113}
	028 Move X0, [X8+88]
	029 Move X1, X31
	030 Call LeanTweenExt.LeanColor, X0
	031 Move X0, [X19+16]
	032 Compare X0, 0
	033 JumpIfEqual {113}
	034 Move X1, X31
	035 Move V10, V0
	036 Move V11, V1
	037 Move V12, V2
	038 Move V13, V3
	039 Call LTDescr.get_toTrans, X0
	040 Move X1, X31
	041 Call LeanTweenExt.LeanColor, X0
	042 Move X8, [X19+16]
	043 Compare X8, 0
	044 JumpIfEqual {113}
	045 Move X8, [X8+232]
	046 Move [X31+120], S3
	047 Move [X31+128], S2
	048 Compare X8, 0
	049 JumpIfEqual {113}
	050 Move S8, [X19+24]
	051 Move S9, [X19+28]
	052 Move X0, X31
	053 Move V15, V1
	054 Move V14, V0
	055 Add X20, X8, 100
	056 Call Time.get_deltaTime
	057 Move S1, [X19+32]
	058 Move S2, [X19+36]
	059 Move S7, [X31+120]
	060 Move S6, [X31+124]
	061 Move [X31+16], S0
	062 Move V0, V10
	063 Move [X31+32], S2
	064 Move [X31+24], S1
	065 Move V1, V11
	066 Move V2, V12
	067 Move V3, V13
	068 Move V4, V14
	069 Move V5, V15
	070 Move X0, X20
	071 Move [X31+8], S9
	072 Move [X31], S8
	073 Call LeanSmooth.spring, X0, X1, X2, V0, V1, V2, V3, V4
	074 Move X8, [X19+16]
	075 Compare X8, 0
	076 JumpIfEqual {113}
	077 Move X0, [X8+88]
	078 Compare X0, 0
	079 JumpIfEqual {113}
	080 Move X8, 0xF68000
	081 Move X8, [X8+1440]
	082 Move V8, V0
	083 Move V9, V1
	084 Move V10, V2
	085 Move X1, [X8]
	086 Move V11, V3
	087 Call 0x21A4894, X0
	088 Compare X0, 0
	089 JumpIfEqual {113}
	090 Move X1, X31
	091 Call Renderer.get_material, X0
	092 Compare X0, 0
	093 JumpIfEqual {113}
	094 Move V0, V8
	095 Move V1, V9
	096 Move V2, V10
	097 Move V3, V11
	098 Move X20, [X31+128]
	099 Move X19, [X31+136]
	100 Move X30, [X31+112]
	101 Move D9, [X31+96]
	102 Move D8, [X31+104]
	103 Move D11, [X31+80]
	104 Move D10, [X31+88]
	105 Move D13, [X31+64]
	106 Move D12, [X31+72]
	107 Move D15, [X31+48]
	108 Move D14, [X31+56]
	109 Move X1, X31
	110 Add X31, X31, 144
	111 Call Material.set_color, X0, X1
	112 Return 
	113 Call 0x1C17F20

