Type: LTDescr

Method: UnityEngine.Vector3 get_from()

Disassembly:
	0x031C0628 BL 0x31C0024
	0x031C062C STR X20, [X19 + 0xB0]
	0x031C0630 LDR X0, [X22]

ISIL:
	001 Move S0, [X0+96]
	002 Move S1, [X0+100]
	003 Move V2, [X0+104]
	004 Return X0

Method: System.Void set_from(UnityEngine.Vector3 value)

Disassembly:
	0x031C0634 BL 0x1C16F10
	0x031C0638 LDR X2, [X21]
	0x031C063C MOV X1, X19

ISIL:
	001 Move [X0+96], S0
	002 Move [X0+104], S1
	003 Move [X0+104], S2
	004 Return 

Method: UnityEngine.Vector3 get_to()

Disassembly:
	0x031C0640 MOV X20, X0
	0x031C0644 BL 0x31C0024
	0x031C0648 STR X20, [X19 + 0xA8]

ISIL:
	001 Move S0, [X0+108]
	002 Move S1, [X0+112]
	003 Move V2, [X0+116]
	004 Return X0

Method: System.Void set_to(UnityEngine.Vector3 value)

Disassembly:
	0x031C064C MOV X0, X19
	0x031C0650 LDP X20, X19, [X31 + 0x20]
	0x031C0654 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X0+108], S0
	002 Move [X0+116], S1
	003 Move [X0+116], S2
	004 Return 

Method: LTDescr/ActionMethodDelegate get_easeInternal()

Disassembly:
	0x031C0658 LDP X30, X23, [X31], #0x30
	0x031C065C RET

ISIL:
	001 Move X0, [X0+168]
	002 Return X0

Method: System.Void set_easeInternal(LTDescr/ActionMethodDelegate value)

Disassembly:
	0x031C0660 STP X30, X23, [X31 - 0x30]!
	0x031C0664 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X0+168], X1
	002 Return 

Method: LTDescr/ActionMethodDelegate get_initInternal()

Disassembly:
	0x031C0668 STP X20, X19, [X31 + 0x20]
	0x031C066C ADRP X23, 0x121B000

ISIL:
	001 Move X0, [X0+176]
	002 Return X0

Method: System.Void set_initInternal(LTDescr/ActionMethodDelegate value)

Disassembly:
	0x031C0670 ADRP X22, 0xF5F000
	0x031C0674 ADRP X20, 0xF5F000

ISIL:
	001 Move [X0+176], X1
	002 Return 

Method: UnityEngine.Transform get_toTrans()

Disassembly:
	0x031C0678 ADRP X21, 0xF5F000
	0x031C067C LDRB W8, [X23 + 0xF56]
	0x031C0680 LDR X22, [X22 + 0x428]
	0x031C0684 LDR X20, [X20 + 0x710]
	0x031C0688 LDR X21, [X21 + 0x730]
	0x031C068C MOV X19, X0
	0x031C0690 TBNZ X8, 0x0, 0x31C06C0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+16]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.String ToString()

Disassembly:
	0x031C0694 ADRP X0, 0xF5F000
	0x031C0698 LDR X0, [X0 + 0x428]
	0x031C069C BL 0x1C16CF4
	0x031C06A0 ADRP X0, 0xF5F000
	0x031C06A4 LDR X0, [X0 + 0x730]
	0x031C06A8 BL 0x1C16CF4
	0x031C06AC ADRP X0, 0xF5F000
	0x031C06B0 LDR X0, [X0 + 0x710]
	0x031C06B4 BL 0x1C16CF4
	0x031C06B8 MOVZ W8, 0x1
	0x031C06BC STRB W8, [X23 + 0xF56]
	0x031C06C0 MOVZ W8, 0x9
	0x031C06C4 STR W8, [X19 + 0x90]
	0x031C06C8 LDR X0, [X22]
	0x031C06CC BL 0x1C16F10
	0x031C06D0 LDR X2, [X20]
	0x031C06D4 MOV X1, X19
	0x031C06D8 MOV X20, X0
	0x031C06DC BL 0x31C0024
	0x031C06E0 STR X20, [X19 + 0xB0]
	0x031C06E4 LDR X0, [X22]
	0x031C06E8 BL 0x1C16F10
	0x031C06EC LDR X2, [X21]
	0x031C06F0 MOV X1, X19
	0x031C06F4 MOV X20, X0
	0x031C06F8 BL 0x31C0024
	0x031C06FC STR X20, [X19 + 0xA8]
	0x031C0700 MOV X0, X19
	0x031C0704 LDP X20, X19, [X31 + 0x20]
	0x031C0708 LDP X22, X21, [X31 + 0x10]
	0x031C070C LDP X30, X23, [X31], #0x30
	0x031C0710 RET
	0x031C0714 STP X30, X23, [X31 - 0x30]!
	0x031C0718 STP X22, X21, [X31 + 0x10]
	0x031C071C STP X20, X19, [X31 + 0x20]
	0x031C0720 ADRP X23, 0x121B000
	0x031C0724 ADRP X22, 0xF5F000
	0x031C0728 ADRP X20, 0xF5F000
	0x031C072C ADRP X21, 0xF5F000
	0x031C0730 LDRB W8, [X23 + 0xF57]
	0x031C0734 LDR X22, [X22 + 0x428]
	0x031C0738 LDR X20, [X20 + 0x738]
	0x031C073C LDR X21, [X21 + 0x740]
	0x031C0740 MOV X19, X0
	0x031C0744 TBNZ X8, 0x0, 0x31C0774
	0x031C0748 ADRP X0, 0xF5F000
	0x031C074C LDR X0, [X0 + 0x428]
	0x031C0750 BL 0x1C16CF4
	0x031C0754 ADRP X0, 0xF5F000
	0x031C0758 LDR X0, [X0 + 0x738]
	0x031C075C BL 0x1C16CF4
	0x031C0760 ADRP X0, 0xF5F000
	0x031C0764 LDR X0, [X0 + 0x740]
	0x031C0768 BL 0x1C16CF4
	0x031C076C MOVZ W8, 0x1
	0x031C0770 STRB W8, [X23 + 0xF57]
	0x031C0774 MOVZ W8, 0xA
	0x031C0778 STR W8, [X19 + 0x90]
	0x031C077C LDR X0, [X22]
	0x031C0780 BL 0x1C16F10
	0x031C0784 LDR X2, [X20]
	0x031C0788 MOV X1, X19
	0x031C078C MOV X20, X0
	0x031C0790 BL 0x31C0024
	0x031C0794 STR X20, [X19 + 0xB0]
	0x031C0798 LDR X0, [X22]
	0x031C079C BL 0x1C16F10
	0x031C07A0 LDR X2, [X21]
	0x031C07A4 MOV X1, X19
	0x031C07A8 MOV X20, X0
	0x031C07AC BL 0x31C0024
	0x031C07B0 STR X20, [X19 + 0xA8]
	0x031C07B4 MOV X0, X19
	0x031C07B8 LDP X20, X19, [X31 + 0x20]
	0x031C07BC LDP X22, X21, [X31 + 0x10]
	0x031C07C0 LDP X30, X23, [X31], #0x30
	0x031C07C4 RET
	0x031C07C8 STP X30, X23, [X31 - 0x30]!
	0x031C07CC STP X22, X21, [X31 + 0x10]
	0x031C07D0 STP X20, X19, [X31 + 0x20]
	0x031C07D4 ADRP X23, 0x121B000
	0x031C07D8 ADRP X22, 0xF5F000
	0x031C07DC ADRP X20, 0xF5F000
	0x031C07E0 ADRP X21, 0xF5F000
	0x031C07E4 LDRB W8, [X23 + 0xF58]
	0x031C07E8 LDR X22, [X22 + 0x428]
	0x031C07EC LDR X20, [X20 + 0x748]
	0x031C07F0 LDR X21, [X21 + 0x750]
	0x031C07F4 MOV X19, X0
	0x031C07F8 TBNZ X8, 0x0, 0x31C0828
	0x031C07FC ADRP X0, 0xF5F000
	0x031C0800 LDR X0, [X0 + 0x428]
	0x031C0804 BL 0x1C16CF4
	0x031C0808 ADRP X0, 0xF5F000
	0x031C080C LDR X0, [X0 + 0x748]
	0x031C0810 BL 0x1C16CF4
	0x031C0814 ADRP X0, 0xF5F000
	0x031C0818 LDR X0, [X0 + 0x750]
	0x031C081C BL 0x1C16CF4
	0x031C0820 MOVZ W8, 0x1
	0x031C0824 STRB W8, [X23 + 0xF58]
	0x031C0828 MOVZ W8, 0xB
	0x031C082C STR W8, [X19 + 0x90]
	0x031C0830 LDR X0, [X22]
	0x031C0834 BL 0x1C16F10
	0x031C0838 LDR X2, [X20]
	0x031C083C MOV X1, X19
	0x031C0840 MOV X20, X0
	0x031C0844 BL 0x31C0024
	0x031C0848 STR X20, [X19 + 0xB0]
	0x031C084C LDR X0, [X22]
	0x031C0850 BL 0x1C16F10
	0x031C0854 LDR X2, [X21]
	0x031C0858 MOV X1, X19
	0x031C085C MOV X20, X0
	0x031C0860 BL 0x31C0024
	0x031C0864 STR X20, [X19 + 0xA8]
	0x031C0868 MOV X0, X19
	0x031C086C LDP X20, X19, [X31 + 0x20]
	0x031C0870 LDP X22, X21, [X31 + 0x10]
	0x031C0874 LDP X30, X23, [X31], #0x30
	0x031C0878 RET
	0x031C087C STP X30, X23, [X31 - 0x30]!
	0x031C0880 STP X22, X21, [X31 + 0x10]
	0x031C0884 STP X20, X19, [X31 + 0x20]
	0x031C0888 ADRP X23, 0x121B000
	0x031C088C ADRP X22, 0xF5F000
	0x031C0890 ADRP X20, 0xF5F000
	0x031C0894 ADRP X21, 0xF5F000
	0x031C0898 LDRB W8, [X23 + 0xF59]
	0x031C089C LDR X22, [X22 + 0x428]
	0x031C08A0 LDR X20, [X20 + 0x758]
	0x031C08A4 LDR X21, [X21 + 0x760]
	0x031C08A8 MOV X19, X0
	0x031C08AC TBNZ X8, 0x0, 0x31C08DC
	0x031C08B0 ADRP X0, 0xF5F000
	0x031C08B4 LDR X0, [X0 + 0x428]
	0x031C08B8 BL 0x1C16CF4
	0x031C08BC ADRP X0, 0xF5F000
	0x031C08C0 LDR X0, [X0 + 0x758]
	0x031C08C4 BL 0x1C16CF4
	0x031C08C8 ADRP X0, 0xF5F000
	0x031C08CC LDR X0, [X0 + 0x760]
	0x031C08D0 BL 0x1C16CF4
	0x031C08D4 MOVZ W8, 0x1
	0x031C08D8 STRB W8, [X23 + 0xF59]
	0x031C08DC MOVZ W8, 0xC
	0x031C08E0 STR W8, [X19 + 0x90]
	0x031C08E4 LDR X0, [X22]
	0x031C08E8 BL 0x1C16F10
	0x031C08EC LDR X2, [X20]
	0x031C08F0 MOV X1, X19
	0x031C08F4 MOV X20, X0
	0x031C08F8 BL 0x31C0024
	0x031C08FC STR X20, [X19 + 0xB0]
	0x031C0900 LDR X0, [X22]
	0x031C0904 BL 0x1C16F10
	0x031C0908 LDR X2, [X21]
	0x031C090C MOV X1, X19
	0x031C0910 MOV X20, X0
	0x031C0914 BL 0x31C0024
	0x031C0918 STR X20, [X19 + 0xA8]
	0x031C091C MOV X0, X19
	0x031C0920 LDP X20, X19, [X31 + 0x20]
	0x031C0924 LDP X22, X21, [X31 + 0x10]
	0x031C0928 LDP X30, X23, [X31], #0x30
	0x031C092C RET
	0x031C0930 STP X30, X23, [X31 - 0x30]!
	0x031C0934 STP X22, X21, [X31 + 0x10]
	0x031C0938 STP X20, X19, [X31 + 0x20]
	0x031C093C ADRP X23, 0x121B000
	0x031C0940 ADRP X22, 0xF5F000
	0x031C0944 ADRP X20, 0xF5F000
	0x031C0948 ADRP X21, 0xF5F000
	0x031C094C LDRB W8, [X23 + 0xF5A]
	0x031C0950 LDR X22, [X22 + 0x428]
	0x031C0954 LDR X20, [X20 + 0x768]
	0x031C0958 LDR X21, [X21 + 0x770]
	0x031C095C MOV X19, X0
	0x031C0960 TBNZ X8, 0x0, 0x31C0990
	0x031C0964 ADRP X0, 0xF5F000
	0x031C0968 LDR X0, [X0 + 0x428]
	0x031C096C BL 0x1C16CF4
	0x031C0970 ADRP X0, 0xF5F000
	0x031C0974 LDR X0, [X0 + 0x768]
	0x031C0978 BL 0x1C16CF4
	0x031C097C ADRP X0, 0xF5F000
	0x031C0980 LDR X0, [X0 + 0x770]
	0x031C0984 BL 0x1C16CF4
	0x031C0988 MOVZ W8, 0x1
	0x031C098C STRB W8, [X23 + 0xF5A]
	0x031C0990 MOVZ W8, 0xD
	0x031C0994 STR W8, [X19 + 0x90]
	0x031C0998 LDR X0, [X22]
	0x031C099C BL 0x1C16F10
	0x031C09A0 LDR X2, [X20]
	0x031C09A4 MOV X1, X19
	0x031C09A8 MOV X20, X0
	0x031C09AC BL 0x31C0024
	0x031C09B0 STR X20, [X19 + 0xB0]
	0x031C09B4 LDR X0, [X22]
	0x031C09B8 BL 0x1C16F10
	0x031C09BC LDR X2, [X21]
	0x031C09C0 MOV X1, X19
	0x031C09C4 MOV X20, X0
	0x031C09C8 BL 0x31C0024
	0x031C09CC STR X20, [X19 + 0xA8]
	0x031C09D0 MOV X0, X19
	0x031C09D4 LDP X20, X19, [X31 + 0x20]
	0x031C09D8 LDP X22, X21, [X31 + 0x10]
	0x031C09DC LDP X30, X23, [X31], #0x30
	0x031C09E0 RET
	0x031C09E4 STP X30, X23, [X31 - 0x30]!
	0x031C09E8 STP X22, X21, [X31 + 0x10]
	0x031C09EC STP X20, X19, [X31 + 0x20]
	0x031C09F0 ADRP X23, 0x121B000
	0x031C09F4 ADRP X22, 0xF5F000
	0x031C09F8 ADRP X20, 0xF5F000
	0x031C09FC ADRP X21, 0xF5F000
	0x031C0A00 LDRB W8, [X23 + 0xF5B]
	0x031C0A04 LDR X22, [X22 + 0x428]
	0x031C0A08 LDR X20, [X20 + 0x778]
	0x031C0A0C LDR X21, [X21 + 0x780]
	0x031C0A10 MOV X19, X0
	0x031C0A14 TBNZ X8, 0x0, 0x31C0A44
	0x031C0A18 ADRP X0, 0xF5F000
	0x031C0A1C LDR X0, [X0 + 0x428]
	0x031C0A20 BL 0x1C16CF4
	0x031C0A24 ADRP X0, 0xF5F000
	0x031C0A28 LDR X0, [X0 + 0x778]
	0x031C0A2C BL 0x1C16CF4
	0x031C0A30 ADRP X0, 0xF5F000
	0x031C0A34 LDR X0, [X0 + 0x780]
	0x031C0A38 BL 0x1C16CF4
	0x031C0A3C MOVZ W8, 0x1
	0x031C0A40 STRB W8, [X23 + 0xF5B]
	0x031C0A44 MOVZ W8, 0xE
	0x031C0A48 STR W8, [X19 + 0x90]
	0x031C0A4C LDR X0, [X22]
	0x031C0A50 BL 0x1C16F10
	0x031C0A54 LDR X2, [X20]
	0x031C0A58 MOV X1, X19
	0x031C0A5C MOV X20, X0
	0x031C0A60 BL 0x31C0024
	0x031C0A64 STR X20, [X19 + 0xB0]
	0x031C0A68 LDR X0, [X22]
	0x031C0A6C BL 0x1C16F10
	0x031C0A70 LDR X2, [X21]
	0x031C0A74 MOV X1, X19
	0x031C0A78 MOV X20, X0
	0x031C0A7C BL 0x31C0024
	0x031C0A80 STR X20, [X19 + 0xA8]
	0x031C0A84 MOV X0, X19
	0x031C0A88 LDP X20, X19, [X31 + 0x20]
	0x031C0A8C LDP X22, X21, [X31 + 0x10]
	0x031C0A90 LDP X30, X23, [X31], #0x30
	0x031C0A94 RET
	0x031C0A98 STP X30, X23, [X31 - 0x30]!
	0x031C0A9C STP X22, X21, [X31 + 0x10]
	0x031C0AA0 STP X20, X19, [X31 + 0x20]
	0x031C0AA4 ADRP X23, 0x121B000
	0x031C0AA8 ADRP X22, 0xF5F000
	0x031C0AAC ADRP X20, 0xF5F000
	0x031C0AB0 ADRP X21, 0xF5F000
	0x031C0AB4 LDRB W8, [X23 + 0xF5C]
	0x031C0AB8 LDR X22, [X22 + 0x428]
	0x031C0ABC LDR X20, [X20 + 0x788]
	0x031C0AC0 LDR X21, [X21 + 0x790]
	0x031C0AC4 MOV X19, X0
	0x031C0AC8 TBNZ X8, 0x0, 0x31C0AF8
	0x031C0ACC ADRP X0, 0xF5F000
	0x031C0AD0 LDR X0, [X0 + 0x428]
	0x031C0AD4 BL 0x1C16CF4
	0x031C0AD8 ADRP X0, 0xF5F000
	0x031C0ADC LDR X0, [X0 + 0x788]
	0x031C0AE0 BL 0x1C16CF4
	0x031C0AE4 ADRP X0, 0xF5F000
	0x031C0AE8 LDR X0, [X0 + 0x790]
	0x031C0AEC BL 0x1C16CF4
	0x031C0AF0 MOVZ W8, 0x1
	0x031C0AF4 STRB W8, [X23 + 0xF5C]
	0x031C0AF8 MOVZ W8, 0xF
	0x031C0AFC STR W8, [X19 + 0x90]
	0x031C0B00 LDR X0, [X22]
	0x031C0B04 BL 0x1C16F10
	0x031C0B08 LDR X2, [X20]
	0x031C0B0C MOV X1, X19
	0x031C0B10 MOV X20, X0
	0x031C0B14 BL 0x31C0024
	0x031C0B18 STR X20, [X19 + 0xB0]
	0x031C0B1C LDR X0, [X22]
	0x031C0B20 BL 0x1C16F10
	0x031C0B24 LDR X2, [X21]
	0x031C0B28 MOV X1, X19
	0x031C0B2C MOV X20, X0
	0x031C0B30 BL 0x31C0024
	0x031C0B34 STR X20, [X19 + 0xA8]
	0x031C0B38 MOV X0, X19
	0x031C0B3C LDP X20, X19, [X31 + 0x20]
	0x031C0B40 LDP X22, X21, [X31 + 0x10]
	0x031C0B44 LDP X30, X23, [X31], #0x30
	0x031C0B48 RET
	0x031C0B4C STP X30, X23, [X31 - 0x30]!
	0x031C0B50 STP X22, X21, [X31 + 0x10]
	0x031C0B54 STP X20, X19, [X31 + 0x20]
	0x031C0B58 ADRP X23, 0x121B000
	0x031C0B5C ADRP X22, 0xF5F000
	0x031C0B60 ADRP X20, 0xF5F000
	0x031C0B64 ADRP X21, 0xF5F000
	0x031C0B68 LDRB W8, [X23 + 0xF5D]
	0x031C0B6C LDR X22, [X22 + 0x428]
	0x031C0B70 LDR X20, [X20 + 0x798]
	0x031C0B74 LDR X21, [X21 + 0x7A0]
	0x031C0B78 MOV X19, X0
	0x031C0B7C TBNZ X8, 0x0, 0x31C0BAC
	0x031C0B80 ADRP X0, 0xF5F000
	0x031C0B84 LDR X0, [X0 + 0x428]
	0x031C0B88 BL 0x1C16CF4
	0x031C0B8C ADRP X0, 0xF5F000
	0x031C0B90 LDR X0, [X0 + 0x798]
	0x031C0B94 BL 0x1C16CF4
	0x031C0B98 ADRP X0, 0xF5F000
	0x031C0B9C LDR X0, [X0 + 0x7A0]
	0x031C0BA0 BL 0x1C16CF4
	0x031C0BA4 MOVZ W8, 0x1
	0x031C0BA8 STRB W8, [X23 + 0xF5D]
	0x031C0BAC MOVZ W8, 0x10
	0x031C0BB0 STR W8, [X19 + 0x90]
	0x031C0BB4 LDR X0, [X22]
	0x031C0BB8 BL 0x1C16F10
	0x031C0BBC LDR X2, [X20]
	0x031C0BC0 MOV X1, X19
	0x031C0BC4 MOV X20, X0
	0x031C0BC8 BL 0x31C0024
	0x031C0BCC STR X20, [X19 + 0xB0]
	0x031C0BD0 LDR X0, [X22]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+80], X22
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X22, 0x121C000
	008 Move X21, 0xF34000
	009 Move X20, 0xF34000
	010 Move W8, [X22+3913]
	011 Move X21, [X21+2760]
	012 Move X20, [X20+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {80}
	018 Move X0, 0xF34000
	019 Move X0, [X0+2904]
	020 Call 0x1C17CF4
	021 Move X0, 0xF60000
	022 Move X0, [X0+1552]
	023 Call 0x1C17CF4
	024 Move X0, 0xF34000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0xF34000
	028 Move X0, [X0+2760]
	029 Call 0x1C17CF4
	030 Move X0, 0xF60000
	031 Move X0, [X0+1560]
	032 Call 0x1C17CF4
	033 Move X0, 0xF60000
	034 Move X0, [X0+1568]
	035 Call 0x1C17CF4
	036 Move X0, 0xF60000
	037 Move X0, [X0+1576]
	038 Call 0x1C17CF4
	039 Move X0, 0xF60000
	040 Move X0, [X0+1584]
	041 Call 0x1C17CF4
	042 Move X0, 0xF60000
	043 Move X0, [X0+1592]
	044 Call 0x1C17CF4
	045 Move X0, 0xF60000
	046 Move X0, [X0+1600]
	047 Call 0x1C17CF4
	048 Move X0, 0xF60000
	049 Move X0, [X0+1608]
	050 Call 0x1C17CF4
	051 Move X0, 0xF60000
	052 Move X0, [X0+1616]
	053 Call 0x1C17CF4
	054 Move X0, 0xF60000
	055 Move X0, [X0+1624]
	056 Call 0x1C17CF4
	057 Move X0, 0xF60000
	058 Move X0, [X0+1632]
	059 Call 0x1C17CF4
	060 Move X0, 0xF60000
	061 Move X0, [X0+1640]
	062 Call 0x1C17CF4
	063 Move X0, 0xF60000
	064 Move X0, [X0+1648]
	065 Call 0x1C17CF4
	066 Move X0, 0xF60000
	067 Move X0, [X0+1656]
	068 Call 0x1C17CF4
	069 Move X0, 0xF60000
	070 Move X0, [X0+1664]
	071 Call 0x1C17CF4
	072 Move X0, 0xF60000
	073 Move X0, [X0+1672]
	074 Call 0x1C17CF4
	075 Move X0, 0xF60000
	076 Move X0, [X0+1680]
	077 Call 0x1C17CF4
	078 Move W8, 1
	079 Move [X22+3913], W8
	080 Move X0, [X21]
	081 Move W1, 27
	082 Move [X31+56], W31
	083 Move [X31+48], X31
	084 Move [X31+76], W31
	085 Call 0x1C17D6C
	086 Move X8, [X20]
	087 Move X21, [X19+88]
	088 Move X20, X0
	089 Move W9, [X8+224]
	090 Compare W9, 0
	091 JumpIfNotEqual {94}
	092 Move X0, X8
	093 Call 0x1C17DFC
	094 Move X0, X21
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {118}
	102 Move X0, [X19+88]
	103 Compare X0, 0
	104 JumpIfEqual {331}
	105 Move X1, X31
	106 Call Component.get_gameObject, X0
	107 Compare X0, 0
	108 JumpIfEqual {331}
	109 Move X1, X31
	110 Call Object.get_name, X0
	111 Move X8, 0xF60000
	112 Move X8, [X8+1568]
	113 Move X1, X0
	114 Move X2, X31
	115 Move X8, [X8]
	116 Move X0, X8
	117 Call String.Concat, X0, X1
	118 Move X8, 0xF60000
	119 Move X8, [X8+1624]
	120 Move X0, [X8]
	121 Compare X20, 0
	122 JumpIfEqual {331}
	123 Move W8, [X20+24]
	124 Compare W8, 0
	125 JumpIfEqual {330}
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move [X20+32], X0
	128 Move X8, 0xF60000
	129 Move X8, [X8+1632]
	130 Move X9, 0xF34000
	131 Add X21, X19, 16
	132 Move X8, [X8]
	133 Move X9, [X9+2904]
	134 Move [X20+40], X8
	135 Move X0, [X9]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move X0, X21
	141 Move X1, X31
	142 Call Boolean.ToString, X0
	143 Move W8, [X20+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move [X20+48], X0
	147 Move X8, 0xF60000
	148 Move X8, [X8+1664]
	149 Add X0, X19, 32
	150 Move X1, X31
	151 Move X8, [X8]
	152 Move [X20+56], X8
	153 Call Single.ToString, X0
	154 Move W8, [X20+24]
	155 NotImplemented "Instruction CMP not yet implemented."
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Move [X20+64], X0
	158 Move X8, 0xF60000
	159 Move X8, [X8+1608]
	160 Add X0, X19, 40
	161 Move X1, X31
	162 Move X8, [X8]
	163 Move [X20+72], X8
	164 Call Single.ToString, X0
	165 Move W8, [X20+24]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move [X20+80], X0
	169 Move X8, 0xF60000
	170 Move X8, [X8+1616]
	171 Add X0, X19, 36
	172 Move X1, X31
	173 Move X8, [X8]
	174 Move [X20+88], X8
	175 Call Single.ToString, X0
	176 Move W8, [X20+24]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move [X20+96], X0
	180 Move X8, 0xF60000
	181 Move X8, [X8+1640]
	182 Add X0, X19, 64
	183 Move X1, X31
	184 Move X8, [X8]
	185 Move [X20+104], X8
	186 Call Single.ToString, X0
	187 Move W8, [X20+24]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move [X20+112], X0
	191 Move X8, 0xF60000
	192 Move X8, [X8+1656]
	193 Add X0, X31, 48
	194 Move X1, X31
	195 Move X2, X31
	196 Move X8, [X8]
	197 Move X3, X31
	198 Move [X20+120], X8
	199 Move V0, [X19+96]
	200 Move V1, [X19+104]
	201 Move [X31+48], D0
	202 Move [X31+56], S1
	203 Call 0x2431694
	204 Move W8, [X20+24]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move [X20+128], X0
	208 Move X8, 0xF60000
	209 Move X8, [X8+1600]
	210 Add X0, X31, 48
	211 Move X1, X31
	212 Move X2, X31
	213 Move X8, [X8]
	214 Move X3, X31
	215 Move [X20+136], X8
	216 NotImplemented "Instruction LDUR not yet implemented."
	217 Move V1, [X19+116]
	218 Move [X31+48], D0
	219 Move [X31+56], S1
	220 Call 0x2431694
	221 Move W8, [X20+24]
	222 NotImplemented "Instruction CMP not yet implemented."
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move [X20+144], X0
	225 Move X8, 0xF60000
	226 Move X8, [X8+1680]
	227 Add X0, X31, 48
	228 Move X1, X31
	229 Move X2, X31
	230 Move X8, [X8]
	231 Move X3, X31
	232 Move [X20+152], X8
	233 Move W8, [X19+128]
	234 Move X9, [X19+120]
	235 Move [X31+56], W8
	236 Move [X31+48], X9
	237 Call 0x2431694
	238 Move W8, [X20+24]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Move [X20+160], X0
	242 Move X8, 0xF60000
	243 Move X8, [X8+1592]
	244 Move X9, 0xF60000
	245 Add X0, X31, 24
	246 Move X1, X31
	247 Move X8, [X8]
	248 Move X9, [X9+1560]
	249 Move [X20+168], X8
	250 Move X8, [X9]
	251 Move TEMP, 0
	252 Not TEMP
	253 Move X9, TEMP
	254 Move [X31+24], X8
	255 Move [X31+32], X9
	256 Move W8, [X19+144]
	257 Move [X31+40], W8
	258 Call Enum.ToString, X0
	259 Move W8, [X20+24]
	260 NotImplemented "Instruction CMP not yet implemented."
	261 NotImplemented "Instruction CMP not yet implemented."
	262 Move [X20+176], X0
	263 Move X8, 0xF60000
	264 Move X8, [X8+1672]
	265 Move X9, 0xF60000
	266 Add X0, X31, 0
	267 Move X1, X31
	268 Move X8, [X8]
	269 Move X9, [X9+1552]
	270 Move [X20+184], X8
	271 Move X8, [X9]
	272 Move TEMP, 0
	273 Not TEMP
	274 Move X9, TEMP
	275 Move [X31], X8
	276 Move [X31+8], X9
	277 Move W8, [X19+148]
	278 Move [X31+16], W8
	279 Call Enum.ToString, X0
	280 Move W8, [X20+24]
	281 NotImplemented "Instruction CMP not yet implemented."
	282 NotImplemented "Instruction CMP not yet implemented."
	283 Move [X20+192], X0
	284 Move X8, 0xF60000
	285 Move X8, [X8+1576]
	286 Add X0, X19, 17
	287 Move X1, X31
	288 Move X8, [X8]
	289 Move [X20+200], X8
	290 Call Boolean.ToString, X0
	291 Move W8, [X20+24]
	292 NotImplemented "Instruction CMP not yet implemented."
	293 NotImplemented "Instruction CMP not yet implemented."
	294 Move [X20+208], X0
	295 Move X8, 0xF60000
	296 Move X8, [X8+1648]
	297 Add X0, X31, 76
	298 Move X1, X31
	299 Move X8, [X8]
	300 Move [X20+216], X8
	301 Move W8, [X19+52]
	302 Move W9, [X19+60]
	303 Or W8, W8, W9
	304 Move [X31+76], W8
	305 Call Int32.ToString, X0
	306 Move W8, [X20+24]
	307 NotImplemented "Instruction CMP not yet implemented."
	308 NotImplemented "Instruction CMP not yet implemented."
	309 Move [X20+224], X0
	310 Move X8, 0xF60000
	311 Move X8, [X8+1584]
	312 Add X0, X19, 21
	313 Move X1, X31
	314 Move X8, [X8]
	315 Move [X20+232], X8
	316 Call Boolean.ToString, X0
	317 Move W8, [X20+24]
	318 NotImplemented "Instruction CMP not yet implemented."
	319 Move [X20+240], X0
	320 Move X0, X20
	321 Move X1, X31
	322 Call String.Concat, X0
	323 Move X20, [X31+96]
	324 Move X19, [X31+104]
	325 Move X22, [X31+80]
	326 Move X21, [X31+88]
	327 Move X30, [X31+64]
	328 Add X31, X31, 112
	329 Return X0
	330 Call 0x1C17F28
	331 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x031C0BE4 BL 0x31C0024
	0x031C0BE8 STR X20, [X19 + 0xA8]
	0x031C0BEC MOV X0, X19
	0x031C0BF0 LDP X20, X19, [X31 + 0x20]
	0x031C0BF4 LDP X22, X21, [X31 + 0x10]
	0x031C0BF8 LDP X30, X23, [X31], #0x30
	0x031C0BFC RET
	0x031C0C00 STP X30, X23, [X31 - 0x30]!
	0x031C0C04 STP X22, X21, [X31 + 0x10]
	0x031C0C08 STP X20, X19, [X31 + 0x20]
	0x031C0C0C ADRP X23, 0x121B000
	0x031C0C10 ADRP X22, 0xF5F000
	0x031C0C14 ADRP X20, 0xF5F000
	0x031C0C18 ADRP X21, 0xF5F000
	0x031C0C1C LDRB W8, [X23 + 0xF5E]
	0x031C0C20 LDR X22, [X22 + 0x428]
	0x031C0C24 LDR X20, [X20 + 0x7A8]
	0x031C0C28 LDR X21, [X21 + 0x7B0]
	0x031C0C2C MOV X19, X0
	0x031C0C30 TBNZ X8, 0x0, 0x31C0C60
	0x031C0C34 ADRP X0, 0xF5F000
	0x031C0C38 LDR X0, [X0 + 0x428]
	0x031C0C3C BL 0x1C16CF4
	0x031C0C40 ADRP X0, 0xF5F000
	0x031C0C44 LDR X0, [X0 + 0x7A8]
	0x031C0C48 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x121C000
	006 Move X20, 0xF60000
	007 Move W8, [X21+3914]
	008 Move X20, [X20+1688]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF60000
	015 Move X0, [X0+1688]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3914], W8
	019 Move TEMP, 0
	020 Not TEMP
	021 Move W8, TEMP
	022 Move [X19+60], W8
	023 Move X0, [X20]
	024 Call 0x1C17F10
	025 Move X1, X31
	026 Move X20, X0
	027 Call Object..ctor, X0
	028 Move [X19+232], X20
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X1, X31
	033 Move X30, [X31+32]
	034 Move X21, [X31+40]
	035 Call Object..ctor, X0
	036 Return 

Method: LTDescr cancel(UnityEngine.GameObject gameObject)

Disassembly:
	0x031C0C54 BL 0x1C16CF4
	0x031C0C58 MOVZ W8, 0x1
	0x031C0C5C STRB W8, [X23 + 0xF5E]
	0x031C0C60 MOVZ W8, 0x11
	0x031C0C64 STR W8, [X19 + 0x90]
	0x031C0C68 LDR X0, [X22]
	0x031C0C6C BL 0x1C16F10
	0x031C0C70 LDR X2, [X20]
	0x031C0C74 MOV X1, X19
	0x031C0C78 MOV X20, X0
	0x031C0C7C BL 0x31C0024
	0x031C0C80 STR X20, [X19 + 0xB0]
	0x031C0C84 LDR X0, [X22]
	0x031C0C88 BL 0x1C16F10
	0x031C0C8C LDR X2, [X21]
	0x031C0C90 MOV X1, X19
	0x031C0C94 MOV X20, X0
	0x031C0C98 BL 0x31C0024
	0x031C0C9C STR X20, [X19 + 0xA8]
	0x031C0CA0 MOV X0, X19
	0x031C0CA4 LDP X20, X19, [X31 + 0x20]
	0x031C0CA8 LDP X22, X21, [X31 + 0x10]
	0x031C0CAC LDP X30, X23, [X31], #0x30
	0x031C0CB0 RET
	0x031C0CB4 STP X30, X23, [X31 - 0x30]!
	0x031C0CB8 STP X22, X21, [X31 + 0x10]
	0x031C0CBC STP X20, X19, [X31 + 0x20]
	0x031C0CC0 ADRP X23, 0x121B000
	0x031C0CC4 ADRP X22, 0xF5F000
	0x031C0CC8 ADRP X20, 0xF5F000
	0x031C0CCC ADRP X21, 0xF5F000
	0x031C0CD0 LDRB W8, [X23 + 0xF5F]
	0x031C0CD4 LDR X22, [X22 + 0x428]
	0x031C0CD8 LDR X20, [X20 + 0x7B8]
	0x031C0CDC LDR X21, [X21 + 0x7C0]
	0x031C0CE0 MOV X19, X0
	0x031C0CE4 TBNZ X8, 0x0, 0x31C0D14
	0x031C0CE8 ADRP X0, 0xF5F000
	0x031C0CEC LDR X0, [X0 + 0x428]
	0x031C0CF0 BL 0x1C16CF4
	0x031C0CF4 ADRP X0, 0xF5F000
	0x031C0CF8 LDR X0, [X0 + 0x7B8]
	0x031C0CFC BL 0x1C16CF4
	0x031C0D00 ADRP X0, 0xF5F000
	0x031C0D04 LDR X0, [X0 + 0x7C0]
	0x031C0D08 BL 0x1C16CF4
	0x031C0D0C MOVZ W8, 0x1
	0x031C0D10 STRB W8, [X23 + 0xF5F]
	0x031C0D14 MOVZ W8, 0x15
	0x031C0D18 STR W8, [X19 + 0x90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x121C000
	006 Move W8, [X21+3915]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xF36000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move X0, 0xF34000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+3915], W8
	021 Move X0, [X19+88]
	022 Compare X0, 0
	023 JumpIfEqual {63}
	024 Move X21, 0xF34000
	025 Move X21, [X21+1432]
	026 Move X1, X31
	027 Call Component.get_gameObject, X0
	028 Move X8, [X21]
	029 Move X21, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Move X0, X8
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Move X1, X21
	037 Move X2, X31
	038 Call Object.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {57}
	043 Move X8, 0xF36000
	044 Move X8, [X8+1448]
	045 Move W20, [X19+52]
	046 Move X0, [X8]
	047 Move W8, [X19+60]
	048 Move W9, [X0+224]
	049 Or W21, W20, W8
	050 Compare W9, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move W0, W20
	054 Move W1, W21
	055 Move X2, X31
	056 Call LeanTween.removeTween, X0, X1
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Return X0
	063 Call 0x1C17F20

Method: System.Int32 get_uniqueId()

Disassembly:
	0x031C0D1C LDR X0, [X22]
	0x031C0D20 BL 0x1C16F10
	0x031C0D24 LDR X2, [X20]
	0x031C0D28 MOV X1, X19

ISIL:
	001 Move W8, [X0+52]
	002 Move W9, [X0+60]
	003 Or W0, W8, W9
	004 Return X0

Method: System.Int32 get_id()

Disassembly:
	0x031C0BD4 BL 0x1C16F10
	0x031C0BD8 LDR X2, [X21]
	0x031C0BDC MOV X1, X19
	0x031C0BE0 MOV X20, X0

ISIL:
	001 Move W8, [X0+52]
	002 Move W9, [X0+60]
	003 Or W0, W8, W9
	004 Return X0

Method: LTDescrOptional get_optional()

Disassembly:
	0x031C0D2C MOV X20, X0
	0x031C0D30 BL 0x31C0024

ISIL:
	001 Move X0, [X0+232]
	002 Return X0

Method: System.Void set_optional(LTDescrOptional value)

Disassembly:
	0x031C0D34 STR X20, [X19 + 0xB0]
	0x031C0D38 LDR X0, [X22]

ISIL:
	001 Move [X0+232], X1
	002 Return 

Method: System.Void reset()

Disassembly:
	0x031C0D3C BL 0x1C16F10
	0x031C0D40 LDR X2, [X21]
	0x031C0D44 MOV X1, X19
	0x031C0D48 MOV X20, X0
	0x031C0D4C BL 0x31C0024
	0x031C0D50 STR X20, [X19 + 0xA8]
	0x031C0D54 MOV X0, X19
	0x031C0D58 LDP X20, X19, [X31 + 0x20]
	0x031C0D5C LDP X22, X21, [X31 + 0x10]
	0x031C0D60 LDP X30, X23, [X31], #0x30
	0x031C0D64 RET
	0x031C0D68 STP X30, X23, [X31 - 0x30]!
	0x031C0D6C STP X22, X21, [X31 + 0x10]
	0x031C0D70 STP X20, X19, [X31 + 0x20]
	0x031C0D74 ADRP X23, 0x121B000
	0x031C0D78 ADRP X22, 0xF5F000
	0x031C0D7C ADRP X20, 0xF5F000
	0x031C0D80 ADRP X21, 0xF5F000
	0x031C0D84 LDRB W8, [X23 + 0xF60]
	0x031C0D88 LDR X22, [X22 + 0x428]
	0x031C0D8C LDR X20, [X20 + 0x7C8]
	0x031C0D90 LDR X21, [X21 + 0x7D0]
	0x031C0D94 MOV X19, X0
	0x031C0D98 TBNZ X8, 0x0, 0x31C0DC8
	0x031C0D9C ADRP X0, 0xF5F000
	0x031C0DA0 LDR X0, [X0 + 0x428]
	0x031C0DA4 BL 0x1C16CF4
	0x031C0DA8 ADRP X0, 0xF5F000
	0x031C0DAC LDR X0, [X0 + 0x7C8]
	0x031C0DB0 BL 0x1C16CF4
	0x031C0DB4 ADRP X0, 0xF5F000
	0x031C0DB8 LDR X0, [X0 + 0x7D0]
	0x031C0DBC BL 0x1C16CF4
	0x031C0DC0 MOVZ W8, 0x1
	0x031C0DC4 STRB W8, [X23 + 0xF60]
	0x031C0DC8 MOVZ W8, 0x16
	0x031C0DCC STR W8, [X19 + 0x90]
	0x031C0DD0 LDR X0, [X22]
	0x031C0DD4 BL 0x1C16F10
	0x031C0DD8 LDR X2, [X20]
	0x031C0DDC MOV X1, X19
	0x031C0DE0 MOV X20, X0
	0x031C0DE4 BL 0x31C0024
	0x031C0DE8 STR X20, [X19 + 0xB0]
	0x031C0DEC LDR X0, [X22]
	0x031C0DF0 BL 0x1C16F10
	0x031C0DF4 LDR X2, [X21]
	0x031C0DF8 MOV X1, X19
	0x031C0DFC MOV X20, X0
	0x031C0E00 BL 0x31C0024
	0x031C0E04 STR X20, [X19 + 0xA8]
	0x031C0E08 MOV X0, X19
	0x031C0E0C LDP X20, X19, [X31 + 0x20]
	0x031C0E10 LDP X22, X21, [X31 + 0x10]
	0x031C0E14 LDP X30, X23, [X31], #0x30
	0x031C0E18 RET
	0x031C0E1C STP X30, X23, [X31 - 0x30]!
	0x031C0E20 STP X22, X21, [X31 + 0x10]
	0x031C0E24 STP X20, X19, [X31 + 0x20]
	0x031C0E28 ADRP X23, 0x121B000
	0x031C0E2C ADRP X22, 0xF5F000
	0x031C0E30 ADRP X20, 0xF5F000
	0x031C0E34 ADRP X21, 0xF5F000
	0x031C0E38 LDRB W8, [X23 + 0xF61]
	0x031C0E3C LDR X22, [X22 + 0x428]
	0x031C0E40 LDR X20, [X20 + 0x7D8]
	0x031C0E44 LDR X21, [X21 + 0x7E0]
	0x031C0E48 MOV X19, X0
	0x031C0E4C TBNZ X8, 0x0, 0x31C0E7C
	0x031C0E50 ADRP X0, 0xF5F000
	0x031C0E54 LDR X0, [X0 + 0x428]
	0x031C0E58 BL 0x1C16CF4
	0x031C0E5C ADRP X0, 0xF5F000
	0x031C0E60 LDR X0, [X0 + 0x7D8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x121C000
	007 Move X22, 0xF60000
	008 Move X20, 0xF60000
	009 Move W8, [X21+3916]
	010 Move X22, [X22+1696]
	011 Move X20, [X20+1704]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF60000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF60000
	021 Move X0, [X0+1704]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3916], W8
	025 Move X8, -40706048
	026 Move V0, [X8+2096]
	027 Move X8, -40714240
	028 Move W21, 1
	029 Move [X19+88], X31
	030 Move [X19+148], D0
	031 Move V0, [X8+95]
	032 Move X8, -40701952
	033 Move [X19+184], X31
	034 Move [X19+32], X31
	035 Move [X19+4], V0
	036 Move V0, [X8+888]
	037 Move W8, 0x3F800000
	038 Move [X19+22], W31
	039 Move [X19+19], W31
	040 Move [X19+84], W31
	041 NotImplemented "Instruction STRH not yet implemented."
	042 NotImplemented "Instruction STURH not yet implemented."
	043 Move [X19+156], W31
	044 Move [X19+56], W31
	045 NotImplemented "Instruction STRH not yet implemented."
	046 Move [X19+26], W21
	047 Move [X19+16], W21
	048 Move [X19+80], W8
	049 Move [X19+44], D0
	050 Move X0, [X22]
	051 Call 0x1C17F10
	052 Move X2, [X20]
	053 Move X1, X19
	054 Move X20, X0
	055 Call EaseTypeDelegate..ctor, X0, X1, X2
	056 Move [X19+160], X20
	057 Move X20, 0x1219000
	058 Move W8, [X20+1923]
	059 Compare W8, 0
	060 JumpIfNotEqual {65}
	061 Move X0, 0xF34000
	062 Move X0, [X0+1440]
	063 Call 0x1C17CF4
	064 Move [X20+1923], W21
	065 Move X8, 0xF34000
	066 Move X8, [X8+1440]
	067 Move X0, [X19+232]
	068 Move X8, [X8]
	069 Move X8, [X8+184]
	070 Move S0, [X8+4]
	071 Move S1, [X8+8]
	072 Move V2, [X8]
	073 Move [X19+112], S0
	074 Move [X19+120], S1
	075 Move [X19+96], S2
	076 Move [X19+104], S0
	077 Move [X19+104], S1
	078 Move [X19+112], S2
	079 Compare X0, 0
	080 JumpIfEqual {88}
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 Call LTDescrOptional.reset, X0
	087 Return 
	088 Call 0x1C17F20

Method: LTDescr setFollow()

Disassembly:
	0x031C0F68 BL 0x31C0024
	0x031C0F6C STR X20, [X19 + 0xA8]
	0x031C0F70 MOV X0, X19

ISIL:
	001 Move W8, 50
	002 Move [X0+144], W8
	003 Return X0

Method: LTDescr setMoveX()

Disassembly:
	0x031C0F74 LDP X20, X19, [X31 + 0x20]
	0x031C0F78 LDP X22, X21, [X31 + 0x10]
	0x031C0F7C LDP X30, X23, [X31], #0x30
	0x031C0F80 RET
	0x031C0F84 STP X30, X23, [X31 - 0x30]!
	0x031C0F88 STP X22, X21, [X31 + 0x10]
	0x031C0F8C STP X20, X19, [X31 + 0x20]
	0x031C0F90 ADRP X23, 0x121B000
	0x031C0F94 ADRP X22, 0xF5F000
	0x031C0F98 ADRP X20, 0xF5F000
	0x031C0F9C ADRP X21, 0xF5F000
	0x031C0FA0 LDRB W8, [X23 + 0xF63]
	0x031C0FA4 LDR X22, [X22 + 0x428]
	0x031C0FA8 LDR X20, [X20 + 0x7F8]
	0x031C0FAC LDR X21, [X21 + 0x800]
	0x031C0FB0 MOV X19, X0
	0x031C0FB4 TBNZ X8, 0x0, 0x31C0FE4
	0x031C0FB8 ADRP X0, 0xF5F000
	0x031C0FBC LDR X0, [X0 + 0x428]
	0x031C0FC0 BL 0x1C16CF4
	0x031C0FC4 ADRP X0, 0xF5F000
	0x031C0FC8 LDR X0, [X0 + 0x7F8]
	0x031C0FCC BL 0x1C16CF4
	0x031C0FD0 ADRP X0, 0xF5F000
	0x031C0FD4 LDR X0, [X0 + 0x800]
	0x031C0FD8 BL 0x1C16CF4
	0x031C0FDC MOVZ W8, 0x1
	0x031C0FE0 STRB W8, [X23 + 0xF63]
	0x031C0FE4 MOVZ W8, 0x1B
	0x031C0FE8 STR W8, [X19 + 0x90]
	0x031C0FEC LDR X0, [X22]
	0x031C0FF0 BL 0x1C16F10
	0x031C0FF4 LDR X2, [X20]
	0x031C0FF8 MOV X1, X19
	0x031C0FFC MOV X20, X0
	0x031C1000 BL 0x31C0024
	0x031C1004 STR X20, [X19 + 0xB0]
	0x031C1008 LDR X0, [X22]
	0x031C100C BL 0x1C16F10
	0x031C1010 LDR X2, [X21]
	0x031C1014 MOV X1, X19
	0x031C1018 MOV X20, X0
	0x031C101C BL 0x31C0024
	0x031C1020 STR X20, [X19 + 0xA8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121C000
	008 Move X22, 0xF60000
	009 Move X20, 0xF60000
	010 Move X21, 0xF60000
	011 Move W8, [X23+3917]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1712]
	014 Move X21, [X21+1720]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF60000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF60000
	024 Move X0, [X0+1712]
	025 Call 0x1C17CF4
	026 Move X0, 0xF60000
	027 Move X0, [X0+1720]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3917], W8
	031 Move [X19+144], W31
	032 Move X0, [X22]
	033 Call 0x1C17F10
	034 Move X2, [X20]
	035 Move X1, X19
	036 Move X20, X0
	037 Call ActionMethodDelegate..ctor, X0, X1, X2
	038 Move [X19+176], X20
	039 Move X0, [X22]
	040 Call 0x1C17F10
	041 Move X2, [X21]
	042 Move X1, X19
	043 Move X20, X0
	044 Call ActionMethodDelegate..ctor, X0, X1, X2
	045 Move [X19+168], X20
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Return X0

Method: LTDescr setMoveY()

Disassembly:
	0x031C10AC MOV X1, X19
	0x031C10B0 MOV X20, X0
	0x031C10B4 BL 0x31C0024
	0x031C10B8 STR X20, [X19 + 0xB0]
	0x031C10BC LDR X0, [X22]
	0x031C10C0 BL 0x1C16F10
	0x031C10C4 LDR X2, [X21]
	0x031C10C8 MOV X1, X19
	0x031C10CC MOV X20, X0
	0x031C10D0 BL 0x31C0024
	0x031C10D4 STR X20, [X19 + 0xA8]
	0x031C10D8 MOV X0, X19
	0x031C10DC LDP X20, X19, [X31 + 0x20]
	0x031C10E0 LDP X22, X21, [X31 + 0x10]
	0x031C10E4 LDP X30, X23, [X31], #0x30
	0x031C10E8 RET
	0x031C10EC STP X30, X23, [X31 - 0x30]!
	0x031C10F0 STP X22, X21, [X31 + 0x10]
	0x031C10F4 STP X20, X19, [X31 + 0x20]
	0x031C10F8 ADRP X23, 0x121A000
	0x031C10FC ADRP X22, 0xF5E000
	0x031C1100 ADRP X20, 0xF5E000
	0x031C1104 ADRP X21, 0xF5E000
	0x031C1108 LDRB W8, [X23 + 0xF65]
	0x031C110C LDR X22, [X22 + 0x428]
	0x031C1110 LDR X20, [X20 + 0x818]
	0x031C1114 LDR X21, [X21 + 0x820]
	0x031C1118 MOV X19, X0
	0x031C111C TBNZ X8, 0x0, 0x31C114C
	0x031C1120 ADRP X0, 0xF5E000
	0x031C1124 LDR X0, [X0 + 0x428]
	0x031C1128 BL 0x1C16CF4
	0x031C112C ADRP X0, 0xF5E000
	0x031C1130 LDR X0, [X0 + 0x818]
	0x031C1134 BL 0x1C16CF4
	0x031C1138 ADRP X0, 0xF5E000
	0x031C113C LDR X0, [X0 + 0x820]
	0x031C1140 BL 0x1C16CF4
	0x031C1144 MOVZ W8, 0x1
	0x031C1148 STRB W8, [X23 + 0xF65]
	0x031C114C MOVZ W8, 0x17
	0x031C1150 STR W8, [X19 + 0x90]
	0x031C1154 LDR X0, [X22]
	0x031C1158 BL 0x1C16F10
	0x031C115C LDR X2, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3918]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1728]
	014 Move X21, [X21+1736]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1728]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1736]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3918], W8
	031 Move W8, 1
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveZ()

Disassembly:
	0x031C1160 MOV X1, X19
	0x031C1164 MOV X20, X0
	0x031C1168 BL 0x31C0024
	0x031C116C STR X20, [X19 + 0xB0]
	0x031C1170 LDR X0, [X22]
	0x031C1174 BL 0x1C16F10
	0x031C1178 LDR X2, [X21]
	0x031C117C MOV X1, X19
	0x031C1180 MOV X20, X0
	0x031C1184 BL 0x31C0024
	0x031C1188 STR X20, [X19 + 0xA8]
	0x031C118C MOV X0, X19
	0x031C1190 LDP X20, X19, [X31 + 0x20]
	0x031C1194 LDP X22, X21, [X31 + 0x10]
	0x031C1198 LDP X30, X23, [X31], #0x30
	0x031C119C RET
	0x031C11A0 STP X30, X23, [X31 - 0x30]!
	0x031C11A4 STP X22, X21, [X31 + 0x10]
	0x031C11A8 STP X20, X19, [X31 + 0x20]
	0x031C11AC ADRP X23, 0x121A000
	0x031C11B0 ADRP X22, 0xF5E000
	0x031C11B4 ADRP X20, 0xF5E000
	0x031C11B8 ADRP X21, 0xF5E000
	0x031C11BC LDRB W8, [X23 + 0xF66]
	0x031C11C0 LDR X22, [X22 + 0x428]
	0x031C11C4 LDR X20, [X20 + 0x828]
	0x031C11C8 LDR X21, [X21 + 0x830]
	0x031C11CC MOV X19, X0
	0x031C11D0 TBNZ X8, 0x0, 0x31C1200
	0x031C11D4 ADRP X0, 0xF5E000
	0x031C11D8 LDR X0, [X0 + 0x428]
	0x031C11DC BL 0x1C16CF4
	0x031C11E0 ADRP X0, 0xF5E000
	0x031C11E4 LDR X0, [X0 + 0x828]
	0x031C11E8 BL 0x1C16CF4
	0x031C11EC ADRP X0, 0xF5E000
	0x031C11F0 LDR X0, [X0 + 0x830]
	0x031C11F4 BL 0x1C16CF4
	0x031C11F8 MOVZ W8, 0x1
	0x031C11FC STRB W8, [X23 + 0xF66]
	0x031C1200 MOVZ W8, 0x18
	0x031C1204 STR W8, [X19 + 0x90]
	0x031C1208 LDR X0, [X22]
	0x031C120C BL 0x1C16F10
	0x031C1210 LDR X2, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3919]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1744]
	014 Move X21, [X21+1752]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1744]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1752]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3919], W8
	031 Move W8, 2
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveLocalX()

Disassembly:
	0x031C1214 MOV X1, X19
	0x031C1218 MOV X20, X0
	0x031C121C BL 0x31C0024
	0x031C1220 STR X20, [X19 + 0xB0]
	0x031C1224 LDR X0, [X22]
	0x031C1228 BL 0x1C16F10
	0x031C122C LDR X2, [X21]
	0x031C1230 MOV X1, X19
	0x031C1234 MOV X20, X0
	0x031C1238 BL 0x31C0024
	0x031C123C STR X20, [X19 + 0xA8]
	0x031C1240 MOV X0, X19
	0x031C1244 LDP X20, X19, [X31 + 0x20]
	0x031C1248 LDP X22, X21, [X31 + 0x10]
	0x031C124C LDP X30, X23, [X31], #0x30
	0x031C1250 RET
	0x031C1254 STP X30, X23, [X31 - 0x30]!
	0x031C1258 STP X22, X21, [X31 + 0x10]
	0x031C125C STP X20, X19, [X31 + 0x20]
	0x031C1260 ADRP X23, 0x121A000
	0x031C1264 ADRP X22, 0xF5E000
	0x031C1268 ADRP X20, 0xF5E000
	0x031C126C ADRP X21, 0xF5E000
	0x031C1270 LDRB W8, [X23 + 0xF67]
	0x031C1274 LDR X22, [X22 + 0x428]
	0x031C1278 LDR X20, [X20 + 0x838]
	0x031C127C LDR X21, [X21 + 0x840]
	0x031C1280 MOV X19, X0
	0x031C1284 TBNZ X8, 0x0, 0x31C12B4
	0x031C1288 ADRP X0, 0xF5E000
	0x031C128C LDR X0, [X0 + 0x428]
	0x031C1290 BL 0x1C16CF4
	0x031C1294 ADRP X0, 0xF5E000
	0x031C1298 LDR X0, [X0 + 0x838]
	0x031C129C BL 0x1C16CF4
	0x031C12A0 ADRP X0, 0xF5E000
	0x031C12A4 LDR X0, [X0 + 0x840]
	0x031C12A8 BL 0x1C16CF4
	0x031C12AC MOVZ W8, 0x1
	0x031C12B0 STRB W8, [X23 + 0xF67]
	0x031C12B4 MOVZ W8, 0x1D
	0x031C12B8 STR W8, [X19 + 0x90]
	0x031C12BC LDR X0, [X22]
	0x031C12C0 BL 0x1C16F10
	0x031C12C4 LDR X2, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3920]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1760]
	014 Move X21, [X21+1768]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1760]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1768]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3920], W8
	031 Move W8, 3
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveLocalY()

Disassembly:
	0x031C12C8 MOV X1, X19
	0x031C12CC MOV X20, X0
	0x031C12D0 BL 0x31C0024
	0x031C12D4 STR X20, [X19 + 0xB0]
	0x031C12D8 LDR X0, [X22]
	0x031C12DC BL 0x1C16F10
	0x031C12E0 LDR X2, [X21]
	0x031C12E4 MOV X1, X19
	0x031C12E8 MOV X20, X0
	0x031C12EC BL 0x31C0024
	0x031C12F0 STR X20, [X19 + 0xA8]
	0x031C12F4 MOV X0, X19
	0x031C12F8 LDP X20, X19, [X31 + 0x20]
	0x031C12FC LDP X22, X21, [X31 + 0x10]
	0x031C1300 LDP X30, X23, [X31], #0x30
	0x031C1304 RET
	0x031C1308 STP X30, X23, [X31 - 0x30]!
	0x031C130C STP X22, X21, [X31 + 0x10]
	0x031C1310 STP X20, X19, [X31 + 0x20]
	0x031C1314 ADRP X23, 0x121A000
	0x031C1318 ADRP X22, 0xF5E000
	0x031C131C ADRP X20, 0xF5E000
	0x031C1320 ADRP X21, 0xF5E000
	0x031C1324 LDRB W8, [X23 + 0xF68]
	0x031C1328 LDR X22, [X22 + 0x428]
	0x031C132C LDR X20, [X20 + 0x848]
	0x031C1330 LDR X21, [X21 + 0x850]
	0x031C1334 MOV X19, X0
	0x031C1338 TBNZ X8, 0x0, 0x31C1368
	0x031C133C ADRP X0, 0xF5E000
	0x031C1340 LDR X0, [X0 + 0x428]
	0x031C1344 BL 0x1C16CF4
	0x031C1348 ADRP X0, 0xF5E000
	0x031C134C LDR X0, [X0 + 0x848]
	0x031C1350 BL 0x1C16CF4
	0x031C1354 ADRP X0, 0xF5E000
	0x031C1358 LDR X0, [X0 + 0x850]
	0x031C135C BL 0x1C16CF4
	0x031C1360 MOVZ W8, 0x1
	0x031C1364 STRB W8, [X23 + 0xF68]
	0x031C1368 MOVZ W8, 0x1E
	0x031C136C STR W8, [X19 + 0x90]
	0x031C1370 LDR X0, [X22]
	0x031C1374 BL 0x1C16F10
	0x031C1378 LDR X2, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3921]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1776]
	014 Move X21, [X21+1784]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1776]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1784]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3921], W8
	031 Move W8, 4
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveLocalZ()

Disassembly:
	0x031C137C MOV X1, X19
	0x031C1380 MOV X20, X0
	0x031C1384 BL 0x31C0024
	0x031C1388 STR X20, [X19 + 0xB0]
	0x031C138C LDR X0, [X22]
	0x031C1390 BL 0x1C16F10
	0x031C1394 LDR X2, [X21]
	0x031C1398 MOV X1, X19
	0x031C139C MOV X20, X0
	0x031C13A0 BL 0x31C0024
	0x031C13A4 STR X20, [X19 + 0xA8]
	0x031C13A8 MOV X0, X19
	0x031C13AC LDP X20, X19, [X31 + 0x20]
	0x031C13B0 LDP X22, X21, [X31 + 0x10]
	0x031C13B4 LDP X30, X23, [X31], #0x30
	0x031C13B8 RET
	0x031C13BC STP X30, X23, [X31 - 0x30]!
	0x031C13C0 STP X22, X21, [X31 + 0x10]
	0x031C13C4 STP X20, X19, [X31 + 0x20]
	0x031C13C8 ADRP X23, 0x121A000
	0x031C13CC ADRP X22, 0xF5E000
	0x031C13D0 ADRP X20, 0xF5E000
	0x031C13D4 ADRP X21, 0xF5E000
	0x031C13D8 LDRB W8, [X23 + 0xF69]
	0x031C13DC LDR X22, [X22 + 0x428]
	0x031C13E0 LDR X20, [X20 + 0x858]
	0x031C13E4 LDR X21, [X21 + 0x860]
	0x031C13E8 MOV X19, X0
	0x031C13EC TBNZ X8, 0x0, 0x31C141C
	0x031C13F0 ADRP X0, 0xF5E000
	0x031C13F4 LDR X0, [X0 + 0x428]
	0x031C13F8 BL 0x1C16CF4
	0x031C13FC ADRP X0, 0xF5E000
	0x031C1400 LDR X0, [X0 + 0x858]
	0x031C1404 BL 0x1C16CF4
	0x031C1408 ADRP X0, 0xF5E000
	0x031C140C LDR X0, [X0 + 0x860]
	0x031C1410 BL 0x1C16CF4
	0x031C1414 MOVZ W8, 0x1
	0x031C1418 STRB W8, [X23 + 0xF69]
	0x031C141C MOVZ W8, 0x1F
	0x031C1420 STR W8, [X19 + 0x90]
	0x031C1424 LDR X0, [X22]
	0x031C1428 BL 0x1C16F10
	0x031C142C LDR X2, [X20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3922]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1792]
	014 Move X21, [X21+1800]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1792]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1800]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3922], W8
	031 Move W8, 5
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: System.Void initFromInternal()

Disassembly:
	0x031C1430 MOV X1, X19
	0x031C1434 MOV X20, X0

ISIL:
	001 Move [X0+96], W31
	002 Return 

Method: LTDescr setOffset(UnityEngine.Vector3 offset)

Disassembly:
	0x031C1438 BL 0x31C0024
	0x031C143C STR X20, [X19 + 0xB0]
	0x031C1440 LDR X0, [X22]

ISIL:
	001 Move [X0+108], S0
	002 Move [X0+116], S1
	003 Move [X0+116], S2
	004 Return X0

Method: LTDescr setMoveCurved()

Disassembly:
	0x031C1444 BL 0x1C16F10
	0x031C1448 LDR X2, [X21]
	0x031C144C MOV X1, X19
	0x031C1450 MOV X20, X0
	0x031C1454 BL 0x31C0024
	0x031C1458 STR X20, [X19 + 0xA8]
	0x031C145C MOV X0, X19
	0x031C1460 LDP X20, X19, [X31 + 0x20]
	0x031C1464 LDP X22, X21, [X31 + 0x10]
	0x031C1468 LDP X30, X23, [X31], #0x30
	0x031C146C RET
	0x031C1470 STP X30, X23, [X31 - 0x30]!
	0x031C1474 STP X22, X21, [X31 + 0x10]
	0x031C1478 STP X20, X19, [X31 + 0x20]
	0x031C147C ADRP X23, 0x121A000
	0x031C1480 ADRP X22, 0xF5E000
	0x031C1484 ADRP X20, 0xF5E000
	0x031C1488 ADRP X21, 0xF5E000
	0x031C148C LDRB W8, [X23 + 0xF6A]
	0x031C1490 LDR X22, [X22 + 0x428]
	0x031C1494 LDR X20, [X20 + 0x868]
	0x031C1498 LDR X21, [X21 + 0x870]
	0x031C149C MOV X19, X0
	0x031C14A0 TBNZ X8, 0x0, 0x31C14D0
	0x031C14A4 ADRP X0, 0xF5E000
	0x031C14A8 LDR X0, [X0 + 0x428]
	0x031C14AC BL 0x1C16CF4
	0x031C14B0 ADRP X0, 0xF5E000
	0x031C14B4 LDR X0, [X0 + 0x868]
	0x031C14B8 BL 0x1C16CF4
	0x031C14BC ADRP X0, 0xF5E000
	0x031C14C0 LDR X0, [X0 + 0x870]
	0x031C14C4 BL 0x1C16CF4
	0x031C14C8 MOVZ W8, 0x1
	0x031C14CC STRB W8, [X23 + 0xF6A]
	0x031C14D0 MOVZ W8, 0x20
	0x031C14D4 STR W8, [X19 + 0x90]
	0x031C14D8 LDR X0, [X22]
	0x031C14DC BL 0x1C16F10
	0x031C14E0 LDR X2, [X20]
	0x031C14E4 MOV X1, X19
	0x031C14E8 MOV X20, X0
	0x031C14EC BL 0x31C0024
	0x031C14F0 STR X20, [X19 + 0xB0]
	0x031C14F4 LDR X0, [X22]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3923]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1808]
	014 Move X21, [X21+1816]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1816]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1808]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3923], W8
	031 Move W8, 6
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveCurvedLocal()

Disassembly:
	0x031C14F8 BL 0x1C16F10
	0x031C14FC LDR X2, [X21]
	0x031C1500 MOV X1, X19
	0x031C1504 MOV X20, X0
	0x031C1508 BL 0x31C0024
	0x031C150C STR X20, [X19 + 0xA8]
	0x031C1510 MOV X0, X19
	0x031C1514 LDP X20, X19, [X31 + 0x20]
	0x031C1518 LDP X22, X21, [X31 + 0x10]
	0x031C151C LDP X30, X23, [X31], #0x30
	0x031C1520 RET
	0x031C1524 STP X30, X19, [X31 - 0x10]!
	0x031C1528 MOV X8, X0
	0x031C152C LDR X0, [X0 + 0xC0]
	0x031C1530 STR W31, [X8 + 0x30]
	0x031C1534 STR W31, [X8 + 0x60]
	0x031C1538 CBZ X0, 0x31C155C
	0x031C153C LDR X19, [X8 + 0xE8]
	0x031C1540 MOV X1, X31
	0x031C1544 BL 0x3C3DEB4
	0x031C1548 CBZ X19, 0x31C155C
	0x031C154C STP S0, S1, [X19 + 0x34]
	0x031C1550 STP S2, S3, [X19 + 0x3C]
	0x031C1554 LDP X30, X19, [X31], #0x10
	0x031C1558 RET
	0x031C155C BL 0x1C16F20
	0x031C1560 STP X30, X23, [X31 - 0x30]!
	0x031C1564 STP X22, X21, [X31 + 0x10]
	0x031C1568 STP X20, X19, [X31 + 0x20]
	0x031C156C ADRP X23, 0x121A000
	0x031C1570 ADRP X22, 0xF5E000
	0x031C1574 ADRP X20, 0xF5E000
	0x031C1578 ADRP X21, 0xF5E000
	0x031C157C LDRB W8, [X23 + 0xF6B]
	0x031C1580 LDR X22, [X22 + 0x428]
	0x031C1584 LDR X20, [X20 + 0x878]
	0x031C1588 LDR X21, [X21 + 0x880]
	0x031C158C MOV X19, X0
	0x031C1590 TBNZ X8, 0x0, 0x31C15C0
	0x031C1594 ADRP X0, 0xF5E000
	0x031C1598 LDR X0, [X0 + 0x428]
	0x031C159C BL 0x1C16CF4
	0x031C15A0 ADRP X0, 0xF5E000
	0x031C15A4 LDR X0, [X0 + 0x880]
	0x031C15A8 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3924]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1808]
	014 Move X21, [X21+1824]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1824]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1808]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3924], W8
	031 Move W8, 7
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveSpline()

Disassembly:
	0x031C15AC ADRP X0, 0xF5E000
	0x031C15B0 LDR X0, [X0 + 0x878]
	0x031C15B4 BL 0x1C16CF4
	0x031C15B8 MOVZ W8, 0x1
	0x031C15BC STRB W8, [X23 + 0xF6B]
	0x031C15C0 MOVZ W8, 0x12
	0x031C15C4 STR W8, [X19 + 0x90]
	0x031C15C8 LDR X0, [X22]
	0x031C15CC BL 0x1C16F10
	0x031C15D0 LDR X2, [X20]
	0x031C15D4 MOV X1, X19
	0x031C15D8 MOV X20, X0
	0x031C15DC BL 0x31C0024
	0x031C15E0 STR X20, [X19 + 0xB0]
	0x031C15E4 LDR X0, [X22]
	0x031C15E8 BL 0x1C16F10
	0x031C15EC LDR X2, [X21]
	0x031C15F0 MOV X1, X19
	0x031C15F4 MOV X20, X0
	0x031C15F8 BL 0x31C0024
	0x031C15FC STR X20, [X19 + 0xA8]
	0x031C1600 MOV X0, X19
	0x031C1604 LDP X20, X19, [X31 + 0x20]
	0x031C1608 LDP X22, X21, [X31 + 0x10]
	0x031C160C LDP X30, X23, [X31], #0x30
	0x031C1610 RET
	0x031C1614 STP X30, X23, [X31 - 0x30]!
	0x031C1618 STP X22, X21, [X31 + 0x10]
	0x031C161C STP X20, X19, [X31 + 0x20]
	0x031C1620 ADRP X23, 0x121A000
	0x031C1624 ADRP X22, 0xF5E000
	0x031C1628 ADRP X20, 0xF5E000
	0x031C162C ADRP X21, 0xF5E000
	0x031C1630 LDRB W8, [X23 + 0xF6C]
	0x031C1634 LDR X22, [X22 + 0x428]
	0x031C1638 LDR X20, [X20 + 0x878]
	0x031C163C LDR X21, [X21 + 0x888]
	0x031C1640 MOV X19, X0
	0x031C1644 TBNZ X8, 0x0, 0x31C1674
	0x031C1648 ADRP X0, 0xF5E000
	0x031C164C LDR X0, [X0 + 0x428]
	0x031C1650 BL 0x1C16CF4
	0x031C1654 ADRP X0, 0xF5E000
	0x031C1658 LDR X0, [X0 + 0x888]
	0x031C165C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3925]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1808]
	014 Move X21, [X21+1832]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1832]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1808]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3925], W8
	031 Move W8, 8
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveSplineLocal()

Disassembly:
	0x031C1660 ADRP X0, 0xF5E000
	0x031C1664 LDR X0, [X0 + 0x878]
	0x031C1668 BL 0x1C16CF4
	0x031C166C MOVZ W8, 0x1
	0x031C1670 STRB W8, [X23 + 0xF6C]
	0x031C1674 MOVZ W8, 0x13
	0x031C1678 STR W8, [X19 + 0x90]
	0x031C167C LDR X0, [X22]
	0x031C1680 BL 0x1C16F10
	0x031C1684 LDR X2, [X20]
	0x031C1688 MOV X1, X19
	0x031C168C MOV X20, X0
	0x031C1690 BL 0x31C0024
	0x031C1694 STR X20, [X19 + 0xB0]
	0x031C1698 LDR X0, [X22]
	0x031C169C BL 0x1C16F10
	0x031C16A0 LDR X2, [X21]
	0x031C16A4 MOV X1, X19
	0x031C16A8 MOV X20, X0
	0x031C16AC BL 0x31C0024
	0x031C16B0 STR X20, [X19 + 0xA8]
	0x031C16B4 MOV X0, X19
	0x031C16B8 LDP X20, X19, [X31 + 0x20]
	0x031C16BC LDP X22, X21, [X31 + 0x10]
	0x031C16C0 LDP X30, X23, [X31], #0x30
	0x031C16C4 RET
	0x031C16C8 STP X30, X23, [X31 - 0x30]!
	0x031C16CC STP X22, X21, [X31 + 0x10]
	0x031C16D0 STP X20, X19, [X31 + 0x20]
	0x031C16D4 ADRP X23, 0x121A000
	0x031C16D8 ADRP X22, 0xF5E000
	0x031C16DC ADRP X20, 0xF5E000
	0x031C16E0 ADRP X21, 0xF5E000
	0x031C16E4 LDRB W8, [X23 + 0xF6D]
	0x031C16E8 LDR X22, [X22 + 0x428]
	0x031C16EC LDR X20, [X20 + 0x890]
	0x031C16F0 LDR X21, [X21 + 0x898]
	0x031C16F4 MOV X19, X0
	0x031C16F8 TBNZ X8, 0x0, 0x31C1728
	0x031C16FC ADRP X0, 0xF5E000
	0x031C1700 LDR X0, [X0 + 0x428]
	0x031C1704 BL 0x1C16CF4
	0x031C1708 ADRP X0, 0xF5E000
	0x031C170C LDR X0, [X0 + 0x890]
	0x031C1710 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3926]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1808]
	014 Move X21, [X21+1840]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1840]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1808]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3926], W8
	031 Move W8, 9
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setScaleX()

Disassembly:
	0x031C1714 ADRP X0, 0xF5E000
	0x031C1718 LDR X0, [X0 + 0x898]
	0x031C171C BL 0x1C16CF4
	0x031C1720 MOVZ W8, 0x1
	0x031C1724 STRB W8, [X23 + 0xF6D]
	0x031C1728 MOVZ W8, 0x14
	0x031C172C STR W8, [X19 + 0x90]
	0x031C1730 LDR X0, [X22]
	0x031C1734 BL 0x1C16F10
	0x031C1738 LDR X2, [X20]
	0x031C173C MOV X1, X19
	0x031C1740 MOV X20, X0
	0x031C1744 BL 0x31C0024
	0x031C1748 STR X20, [X19 + 0xB0]
	0x031C174C LDR X0, [X22]
	0x031C1750 BL 0x1C16F10
	0x031C1754 LDR X2, [X21]
	0x031C1758 MOV X1, X19
	0x031C175C MOV X20, X0
	0x031C1760 BL 0x31C0024
	0x031C1764 STR X20, [X19 + 0xA8]
	0x031C1768 MOV X0, X19
	0x031C176C LDP X20, X19, [X31 + 0x20]
	0x031C1770 LDP X22, X21, [X31 + 0x10]
	0x031C1774 LDP X30, X23, [X31], #0x30
	0x031C1778 RET
	0x031C177C STP X30, X23, [X31 - 0x30]!
	0x031C1780 STP X22, X21, [X31 + 0x10]
	0x031C1784 STP X20, X19, [X31 + 0x20]
	0x031C1788 ADRP X23, 0x121A000
	0x031C178C ADRP X22, 0xF5E000
	0x031C1790 ADRP X20, 0xF5E000
	0x031C1794 ADRP X21, 0xF5E000
	0x031C1798 LDRB W8, [X23 + 0xF6E]
	0x031C179C LDR X22, [X22 + 0x428]
	0x031C17A0 LDR X20, [X20 + 0x8A0]
	0x031C17A4 LDR X21, [X21 + 0x8A8]
	0x031C17A8 MOV X19, X0
	0x031C17AC TBNZ X8, 0x0, 0x31C17DC
	0x031C17B0 ADRP X0, 0xF5E000
	0x031C17B4 LDR X0, [X0 + 0x428]
	0x031C17B8 BL 0x1C16CF4
	0x031C17BC ADRP X0, 0xF5E000
	0x031C17C0 LDR X0, [X0 + 0x8A0]
	0x031C17C4 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3927]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1848]
	014 Move X21, [X21+1856]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1848]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1856]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3927], W8
	031 Move W8, 10
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setScaleY()

Disassembly:
	0x031C17C8 ADRP X0, 0xF5E000
	0x031C17CC LDR X0, [X0 + 0x8A8]
	0x031C17D0 BL 0x1C16CF4
	0x031C17D4 MOVZ W8, 0x1
	0x031C17D8 STRB W8, [X23 + 0xF6E]
	0x031C17DC MOVZ W8, 0x2F
	0x031C17E0 STR W8, [X19 + 0x90]
	0x031C17E4 LDR X0, [X22]
	0x031C17E8 BL 0x1C16F10
	0x031C17EC LDR X2, [X20]
	0x031C17F0 MOV X1, X19
	0x031C17F4 MOV X20, X0
	0x031C17F8 BL 0x31C0024
	0x031C17FC STR X20, [X19 + 0xB0]
	0x031C1800 LDR X0, [X22]
	0x031C1804 BL 0x1C16F10
	0x031C1808 LDR X2, [X21]
	0x031C180C MOV X1, X19
	0x031C1810 MOV X20, X0
	0x031C1814 BL 0x31C0024
	0x031C1818 STR X20, [X19 + 0xA8]
	0x031C181C MOV X0, X19
	0x031C1820 LDP X20, X19, [X31 + 0x20]
	0x031C1824 LDP X22, X21, [X31 + 0x10]
	0x031C1828 LDP X30, X23, [X31], #0x30
	0x031C182C RET
	0x031C1830 STP X30, X23, [X31 - 0x30]!
	0x031C1834 STP X22, X21, [X31 + 0x10]
	0x031C1838 STP X20, X19, [X31 + 0x20]
	0x031C183C ADRP X23, 0x121A000
	0x031C1840 ADRP X22, 0xF5E000
	0x031C1844 ADRP X20, 0xF5E000
	0x031C1848 ADRP X21, 0xF5E000
	0x031C184C LDRB W8, [X23 + 0xF6F]
	0x031C1850 LDR X22, [X22 + 0x428]
	0x031C1854 LDR X20, [X20 + 0x8B0]
	0x031C1858 LDR X21, [X21 + 0x8B8]
	0x031C185C MOV X19, X0
	0x031C1860 TBNZ X8, 0x0, 0x31C1890
	0x031C1864 ADRP X0, 0xF5E000
	0x031C1868 LDR X0, [X0 + 0x428]
	0x031C186C BL 0x1C16CF4
	0x031C1870 ADRP X0, 0xF5E000
	0x031C1874 LDR X0, [X0 + 0x8B0]
	0x031C1878 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3928]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1864]
	014 Move X21, [X21+1872]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1864]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1872]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3928], W8
	031 Move W8, 11
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setScaleZ()

Disassembly:
	0x031C187C ADRP X0, 0xF5E000
	0x031C1880 LDR X0, [X0 + 0x8B8]
	0x031C1884 BL 0x1C16CF4
	0x031C1888 MOVZ W8, 0x1
	0x031C188C STRB W8, [X23 + 0xF6F]
	0x031C1890 MOVZ W8, 0x30
	0x031C1894 STR W8, [X19 + 0x90]
	0x031C1898 LDR X0, [X22]
	0x031C189C BL 0x1C16F10
	0x031C18A0 LDR X2, [X20]
	0x031C18A4 MOV X1, X19
	0x031C18A8 MOV X20, X0
	0x031C18AC BL 0x31C0024
	0x031C18B0 STR X20, [X19 + 0xB0]
	0x031C18B4 LDR X0, [X22]
	0x031C18B8 BL 0x1C16F10
	0x031C18BC LDR X2, [X21]
	0x031C18C0 MOV X1, X19
	0x031C18C4 MOV X20, X0
	0x031C18C8 BL 0x31C0024
	0x031C18CC STR X20, [X19 + 0xA8]
	0x031C18D0 MOV X0, X19
	0x031C18D4 LDP X20, X19, [X31 + 0x20]
	0x031C18D8 LDP X22, X21, [X31 + 0x10]
	0x031C18DC LDP X30, X23, [X31], #0x30
	0x031C18E0 RET
	0x031C18E4 STP X30, X23, [X31 - 0x30]!
	0x031C18E8 STP X22, X21, [X31 + 0x10]
	0x031C18EC STP X20, X19, [X31 + 0x20]
	0x031C18F0 ADRP X23, 0x121A000
	0x031C18F4 ADRP X22, 0xF5E000
	0x031C18F8 ADRP X20, 0xF5E000
	0x031C18FC ADRP X21, 0xF5E000
	0x031C1900 LDRB W8, [X23 + 0xF70]
	0x031C1904 LDR X22, [X22 + 0x428]
	0x031C1908 LDR X20, [X20 + 0x8C0]
	0x031C190C LDR X21, [X21 + 0x8C8]
	0x031C1910 MOV X19, X0
	0x031C1914 TBNZ X8, 0x0, 0x31C1944
	0x031C1918 ADRP X0, 0xF5E000
	0x031C191C LDR X0, [X0 + 0x428]
	0x031C1920 BL 0x1C16CF4
	0x031C1924 ADRP X0, 0xF5E000
	0x031C1928 LDR X0, [X0 + 0x8C0]
	0x031C192C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3929]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1880]
	014 Move X21, [X21+1888]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1880]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1888]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3929], W8
	031 Move W8, 12
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setRotateX()

Disassembly:
	0x031C1930 ADRP X0, 0xF5E000
	0x031C1934 LDR X0, [X0 + 0x8C8]
	0x031C1938 BL 0x1C16CF4
	0x031C193C MOVZ W8, 0x1
	0x031C1940 STRB W8, [X23 + 0xF70]
	0x031C1944 MOVZ W8, 0x31
	0x031C1948 STR W8, [X19 + 0x90]
	0x031C194C LDR X0, [X22]
	0x031C1950 BL 0x1C16F10
	0x031C1954 LDR X2, [X20]
	0x031C1958 MOV X1, X19
	0x031C195C MOV X20, X0
	0x031C1960 BL 0x31C0024
	0x031C1964 STR X20, [X19 + 0xB0]
	0x031C1968 LDR X0, [X22]
	0x031C196C BL 0x1C16F10
	0x031C1970 LDR X2, [X21]
	0x031C1974 MOV X1, X19
	0x031C1978 MOV X20, X0
	0x031C197C BL 0x31C0024
	0x031C1980 STR X20, [X19 + 0xA8]
	0x031C1984 MOV X0, X19
	0x031C1988 LDP X20, X19, [X31 + 0x20]
	0x031C198C LDP X22, X21, [X31 + 0x10]
	0x031C1990 LDP X30, X23, [X31], #0x30
	0x031C1994 RET
	0x031C1998 STR X30, [X31 - 0x20]!
	0x031C199C STP X20, X19, [X31 + 0x10]
	0x031C19A0 ADRP X20, 0x121A000
	0x031C19A4 LDRB W8, [X20 + 0xF71]
	0x031C19A8 MOV X19, X0
	0x031C19AC TBNZ X8, 0x0, 0x31C19C4
	0x031C19B0 ADRP X0, 0xF5E000
	0x031C19B4 LDR X0, [X0 + 0x368]
	0x031C19B8 BL 0x1C16CF4
	0x031C19BC MOVZ W8, 0x1
	0x031C19C0 STRB W8, [X20 + 0xF71]
	0x031C19C4 LDR X8, [X19 + 0xA0]
	0x031C19C8 CBZ X8, 0x31C1A0C
	0x031C19CC LDR X9, [X8 + 0x18]
	0x031C19D0 LDR X0, [X8 + 0x40]
	0x031C19D4 LDR X1, [X8 + 0x28]
	0x031C19D8 ADRP X19, 0xF5E000
	0x031C19DC LDR X19, [X19 + 0x368]
	0x031C19E0 BLR X9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3930]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1896]
	014 Move X21, [X21+1904]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1896]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1904]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3930], W8
	031 Move W8, 13
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setRotateY()

Disassembly:
	0x031C19E4 LDR X8, [X19]
	0x031C19E8 LDP X20, X19, [X31 + 0x10]
	0x031C19EC LDR X9, [X8 + 0xB8]
	0x031C19F0 STP S0, S1, [X9 + 0x8]
	0x031C19F4 STR S2, [X9 + 0x10]
	0x031C19F8 LDR X8, [X8 + 0xB8]
	0x031C19FC LDR V0, [X8 + 0x8]
	0x031C1A00 STR S0, [X8]
	0x031C1A04 LDR X30, [X31], #0x20
	0x031C1A08 RET
	0x031C1A0C BL 0x1C16F20
	0x031C1A10 STR X30, [X31 - 0x40]!
	0x031C1A14 STP X24, X23, [X31 + 0x10]
	0x031C1A18 STP X22, X21, [X31 + 0x20]
	0x031C1A1C STP X20, X19, [X31 + 0x30]
	0x031C1A20 ADRP X20, 0x121A000
	0x031C1A24 ADRP X22, 0xF5E000
	0x031C1A28 LDRB W8, [X20 + 0xF72]
	0x031C1A2C LDR X22, [X22 + 0x8D0]
	0x031C1A30 MOV X19, X0
	0x031C1A34 TBNZ X8, 0x0, 0x31C1A70
	0x031C1A38 ADRP X0, 0xF5E000
	0x031C1A3C LDR X0, [X0 + 0x428]
	0x031C1A40 BL 0x1C16CF4
	0x031C1A44 ADRP X0, 0xF5E000
	0x031C1A48 LDR X0, [X0 + 0x8D8]
	0x031C1A4C BL 0x1C16CF4
	0x031C1A50 ADRP X0, 0xF5E000
	0x031C1A54 LDR X0, [X0 + 0x8E0]
	0x031C1A58 BL 0x1C16CF4
	0x031C1A5C ADRP X0, 0xF5E000
	0x031C1A60 LDR X0, [X0 + 0x8D0]
	0x031C1A64 BL 0x1C16CF4
	0x031C1A68 MOVZ W8, 0x1
	0x031C1A6C STRB W8, [X20 + 0xF72]
	0x031C1A70 MOVZ W8, 0x21
	0x031C1A74 STR W8, [X19 + 0x90]
	0x031C1A78 LDR X0, [X22]
	0x031C1A7C LDR W8, [X0 + 0xE0]
	0x031C1A80 CBNZ W8, 0x31C1A8C
	0x031C1A84 BL 0x1C16DFC
	0x031C1A88 LDR X0, [X22]
	0x031C1A8C LDR X8, [X0 + 0xB8]
	0x031C1A90 ADRP X24, 0xF5E000
	0x031C1A94 ADRP X23, 0xF5E000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3931]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1912]
	014 Move X21, [X21+1920]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1912]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1920]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3931], W8
	031 Move W8, 14
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setRotateZ()

Disassembly:
	0x031C1A98 LDR X20, [X8 + 0x8]
	0x031C1A9C LDR X24, [X24 + 0x428]
	0x031C1AA0 LDR X23, [X23 + 0x8D8]
	0x031C1AA4 CBNZ X20, 0x31C1AEC
	0x031C1AA8 LDR W8, [X0 + 0xE0]
	0x031C1AAC CBNZ W8, 0x31C1AB8
	0x031C1AB0 BL 0x1C16DFC
	0x031C1AB4 LDR X0, [X22]
	0x031C1AB8 LDR X8, [X0 + 0xB8]
	0x031C1ABC LDR X0, [X24]
	0x031C1AC0 LDR X21, [X8]
	0x031C1AC4 BL 0x1C16F10
	0x031C1AC8 ADRP X8, 0xF5E000
	0x031C1ACC LDR X8, [X8 + 0x8E0]
	0x031C1AD0 MOV X1, X21
	0x031C1AD4 MOV X20, X0
	0x031C1AD8 LDR X2, [X8]
	0x031C1ADC BL 0x31C0024
	0x031C1AE0 LDR X8, [X22]
	0x031C1AE4 LDR X8, [X8 + 0xB8]
	0x031C1AE8 STR X20, [X8 + 0x8]
	0x031C1AEC STR X20, [X19 + 0xB0]
	0x031C1AF0 LDR X0, [X24]
	0x031C1AF4 BL 0x1C16F10
	0x031C1AF8 LDR X2, [X23]
	0x031C1AFC MOV X1, X19
	0x031C1B00 MOV X20, X0
	0x031C1B04 BL 0x31C0024
	0x031C1B08 STR X20, [X19 + 0xA8]
	0x031C1B0C MOV X0, X19
	0x031C1B10 LDP X20, X19, [X31 + 0x30]
	0x031C1B14 LDP X22, X21, [X31 + 0x20]
	0x031C1B18 LDP X24, X23, [X31 + 0x10]
	0x031C1B1C LDR X30, [X31], #0x40
	0x031C1B20 RET
	0x031C1B24 STR X30, [X31 - 0x40]!
	0x031C1B28 STP X24, X23, [X31 + 0x10]
	0x031C1B2C STP X22, X21, [X31 + 0x20]
	0x031C1B30 STP X20, X19, [X31 + 0x30]
	0x031C1B34 ADRP X20, 0x121A000
	0x031C1B38 ADRP X22, 0xF5E000
	0x031C1B3C LDRB W8, [X20 + 0xF73]
	0x031C1B40 LDR X22, [X22 + 0x8D0]
	0x031C1B44 MOV X19, X0
	0x031C1B48 TBNZ X8, 0x0, 0x31C1B84

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3932]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1928]
	014 Move X21, [X21+1936]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1928]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1936]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3932], W8
	031 Move W8, 15
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setRotateAround()

Disassembly:
	0x031C1B4C ADRP X0, 0xF5E000
	0x031C1B50 LDR X0, [X0 + 0x428]
	0x031C1B54 BL 0x1C16CF4
	0x031C1B58 ADRP X0, 0xF5E000
	0x031C1B5C LDR X0, [X0 + 0x8D8]
	0x031C1B60 BL 0x1C16CF4
	0x031C1B64 ADRP X0, 0xF5E000
	0x031C1B68 LDR X0, [X0 + 0x8E8]
	0x031C1B6C BL 0x1C16CF4
	0x031C1B70 ADRP X0, 0xF5E000
	0x031C1B74 LDR X0, [X0 + 0x8D0]
	0x031C1B78 BL 0x1C16CF4
	0x031C1B7C MOVZ W8, 0x1
	0x031C1B80 STRB W8, [X20 + 0xF73]
	0x031C1B84 MOVZ W8, 0x28
	0x031C1B88 STR W8, [X19 + 0x90]
	0x031C1B8C LDR X0, [X22]
	0x031C1B90 LDR W8, [X0 + 0xE0]
	0x031C1B94 CBNZ W8, 0x31C1BA0
	0x031C1B98 BL 0x1C16DFC
	0x031C1B9C LDR X0, [X22]
	0x031C1BA0 LDR X8, [X0 + 0xB8]
	0x031C1BA4 ADRP X24, 0xF5E000
	0x031C1BA8 ADRP X23, 0xF5E000
	0x031C1BAC LDR X20, [X8 + 0x10]
	0x031C1BB0 LDR X24, [X24 + 0x428]
	0x031C1BB4 LDR X23, [X23 + 0x8D8]
	0x031C1BB8 CBNZ X20, 0x31C1C00
	0x031C1BBC LDR W8, [X0 + 0xE0]
	0x031C1BC0 CBNZ W8, 0x31C1BCC
	0x031C1BC4 BL 0x1C16DFC
	0x031C1BC8 LDR X0, [X22]
	0x031C1BCC LDR X8, [X0 + 0xB8]
	0x031C1BD0 LDR X0, [X24]
	0x031C1BD4 LDR X21, [X8]
	0x031C1BD8 BL 0x1C16F10
	0x031C1BDC ADRP X8, 0xF5E000
	0x031C1BE0 LDR X8, [X8 + 0x8E8]
	0x031C1BE4 MOV X1, X21
	0x031C1BE8 MOV X20, X0
	0x031C1BEC LDR X2, [X8]
	0x031C1BF0 BL 0x31C0024
	0x031C1BF4 LDR X8, [X22]
	0x031C1BF8 LDR X8, [X8 + 0xB8]
	0x031C1BFC STR X20, [X8 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3933]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1944]
	014 Move X21, [X21+1952]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1944]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1952]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3933], W8
	031 Move W8, 16
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setRotateAroundLocal()

Disassembly:
	0x031C1C00 STR X20, [X19 + 0xB0]
	0x031C1C04 LDR X0, [X24]
	0x031C1C08 BL 0x1C16F10
	0x031C1C0C LDR X2, [X23]
	0x031C1C10 MOV X1, X19
	0x031C1C14 MOV X20, X0
	0x031C1C18 BL 0x31C0024
	0x031C1C1C STR X20, [X19 + 0xA8]
	0x031C1C20 MOV X0, X19
	0x031C1C24 LDP X20, X19, [X31 + 0x30]
	0x031C1C28 LDP X22, X21, [X31 + 0x20]
	0x031C1C2C LDP X24, X23, [X31 + 0x10]
	0x031C1C30 LDR X30, [X31], #0x40
	0x031C1C34 RET
	0x031C1C38 STP X30, X23, [X31 - 0x30]!
	0x031C1C3C STP X22, X21, [X31 + 0x10]
	0x031C1C40 STP X20, X19, [X31 + 0x20]
	0x031C1C44 ADRP X23, 0x121A000
	0x031C1C48 ADRP X22, 0xF5E000
	0x031C1C4C ADRP X20, 0xF5E000
	0x031C1C50 ADRP X21, 0xF5E000
	0x031C1C54 LDRB W8, [X23 + 0xF74]
	0x031C1C58 LDR X22, [X22 + 0x428]
	0x031C1C5C LDR X20, [X20 + 0x8F0]
	0x031C1C60 LDR X21, [X21 + 0x8F8]
	0x031C1C64 MOV X19, X0
	0x031C1C68 TBNZ X8, 0x0, 0x31C1C98
	0x031C1C6C ADRP X0, 0xF5E000
	0x031C1C70 LDR X0, [X0 + 0x428]
	0x031C1C74 BL 0x1C16CF4
	0x031C1C78 ADRP X0, 0xF5E000
	0x031C1C7C LDR X0, [X0 + 0x8F0]
	0x031C1C80 BL 0x1C16CF4
	0x031C1C84 ADRP X0, 0xF5E000
	0x031C1C88 LDR X0, [X0 + 0x8F8]
	0x031C1C8C BL 0x1C16CF4
	0x031C1C90 MOVZ W8, 0x1
	0x031C1C94 STRB W8, [X23 + 0xF74]
	0x031C1C98 MOVZ W8, 0x22
	0x031C1C9C STR W8, [X19 + 0x90]
	0x031C1CA0 LDR X0, [X22]
	0x031C1CA4 BL 0x1C16F10
	0x031C1CA8 LDR X2, [X20]
	0x031C1CAC MOV X1, X19
	0x031C1CB0 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3934]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1960]
	014 Move X21, [X21+1968]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1960]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1968]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3934], W8
	031 Move W8, 17
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setAlpha()

Disassembly:
	0x031C1CB4 BL 0x31C0024
	0x031C1CB8 STR X20, [X19 + 0xB0]
	0x031C1CBC LDR X0, [X22]
	0x031C1CC0 BL 0x1C16F10
	0x031C1CC4 LDR X2, [X21]
	0x031C1CC8 MOV X1, X19
	0x031C1CCC MOV X20, X0
	0x031C1CD0 BL 0x31C0024
	0x031C1CD4 STR X20, [X19 + 0xA8]
	0x031C1CD8 MOV X0, X19
	0x031C1CDC LDP X20, X19, [X31 + 0x20]
	0x031C1CE0 LDP X22, X21, [X31 + 0x10]
	0x031C1CE4 LDP X30, X23, [X31], #0x30
	0x031C1CE8 RET
	0x031C1CEC STP X30, X23, [X31 - 0x30]!
	0x031C1CF0 STP X22, X21, [X31 + 0x10]
	0x031C1CF4 STP X20, X19, [X31 + 0x20]
	0x031C1CF8 ADRP X23, 0x121A000
	0x031C1CFC ADRP X22, 0xF5E000
	0x031C1D00 ADRP X20, 0xF5E000
	0x031C1D04 ADRP X21, 0xF5E000
	0x031C1D08 LDRB W8, [X23 + 0xF75]
	0x031C1D0C LDR X22, [X22 + 0x428]
	0x031C1D10 LDR X20, [X20 + 0x900]
	0x031C1D14 LDR X21, [X21 + 0x908]
	0x031C1D18 MOV X19, X0
	0x031C1D1C TBNZ X8, 0x0, 0x31C1D4C
	0x031C1D20 ADRP X0, 0xF5E000
	0x031C1D24 LDR X0, [X0 + 0x428]
	0x031C1D28 BL 0x1C16CF4
	0x031C1D2C ADRP X0, 0xF5E000
	0x031C1D30 LDR X0, [X0 + 0x900]
	0x031C1D34 BL 0x1C16CF4
	0x031C1D38 ADRP X0, 0xF5E000
	0x031C1D3C LDR X0, [X0 + 0x908]
	0x031C1D40 BL 0x1C16CF4
	0x031C1D44 MOVZ W8, 0x1
	0x031C1D48 STRB W8, [X23 + 0xF75]
	0x031C1D4C MOVZ W8, 0x23
	0x031C1D50 STR W8, [X19 + 0x90]
	0x031C1D54 LDR X0, [X22]
	0x031C1D58 BL 0x1C16F10
	0x031C1D5C LDR X2, [X20]
	0x031C1D60 MOV X1, X19
	0x031C1D64 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3935]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1976]
	014 Move X21, [X21+1984]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1976]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+1984]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3935], W8
	031 Move W8, 21
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setTextAlpha()

Disassembly:
	0x031C1D68 BL 0x31C0024
	0x031C1D6C STR X20, [X19 + 0xB0]
	0x031C1D70 LDR X0, [X22]
	0x031C1D74 BL 0x1C16F10
	0x031C1D78 LDR X2, [X21]
	0x031C1D7C MOV X1, X19
	0x031C1D80 MOV X20, X0
	0x031C1D84 BL 0x31C0024
	0x031C1D88 STR X20, [X19 + 0xA8]
	0x031C1D8C MOV X0, X19
	0x031C1D90 LDP X20, X19, [X31 + 0x20]
	0x031C1D94 LDP X22, X21, [X31 + 0x10]
	0x031C1D98 LDP X30, X23, [X31], #0x30
	0x031C1D9C RET
	0x031C1DA0 STP X30, X23, [X31 - 0x30]!
	0x031C1DA4 STP X22, X21, [X31 + 0x10]
	0x031C1DA8 STP X20, X19, [X31 + 0x20]
	0x031C1DAC ADRP X23, 0x121A000
	0x031C1DB0 ADRP X22, 0xF5E000
	0x031C1DB4 ADRP X20, 0xF5E000
	0x031C1DB8 ADRP X21, 0xF5E000
	0x031C1DBC LDRB W8, [X23 + 0xF76]
	0x031C1DC0 LDR X22, [X22 + 0x428]
	0x031C1DC4 LDR X20, [X20 + 0x910]
	0x031C1DC8 LDR X21, [X21 + 0x918]
	0x031C1DCC MOV X19, X0
	0x031C1DD0 TBNZ X8, 0x0, 0x31C1E00
	0x031C1DD4 ADRP X0, 0xF5E000
	0x031C1DD8 LDR X0, [X0 + 0x428]
	0x031C1DDC BL 0x1C16CF4
	0x031C1DE0 ADRP X0, 0xF5E000
	0x031C1DE4 LDR X0, [X0 + 0x910]
	0x031C1DE8 BL 0x1C16CF4
	0x031C1DEC ADRP X0, 0xF5E000
	0x031C1DF0 LDR X0, [X0 + 0x918]
	0x031C1DF4 BL 0x1C16CF4
	0x031C1DF8 MOVZ W8, 0x1
	0x031C1DFC STRB W8, [X23 + 0xF76]
	0x031C1E00 MOVZ W8, 0x24
	0x031C1E04 STR W8, [X19 + 0x90]
	0x031C1E08 LDR X0, [X22]
	0x031C1E0C BL 0x1C16F10
	0x031C1E10 LDR X2, [X20]
	0x031C1E14 MOV X1, X19
	0x031C1E18 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3936]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+1992]
	014 Move X21, [X21+2000]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+1992]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+2000]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3936], W8
	031 Move W8, 22
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setAlphaVertex()

Disassembly:
	0x031C1E1C BL 0x31C0024
	0x031C1E20 STR X20, [X19 + 0xB0]
	0x031C1E24 LDR X0, [X22]
	0x031C1E28 BL 0x1C16F10
	0x031C1E2C LDR X2, [X21]
	0x031C1E30 MOV X1, X19
	0x031C1E34 MOV X20, X0
	0x031C1E38 BL 0x31C0024
	0x031C1E3C STR X20, [X19 + 0xA8]
	0x031C1E40 MOV X0, X19
	0x031C1E44 LDP X20, X19, [X31 + 0x20]
	0x031C1E48 LDP X22, X21, [X31 + 0x10]
	0x031C1E4C LDP X30, X23, [X31], #0x30
	0x031C1E50 RET
	0x031C1E54 STP X30, X23, [X31 - 0x30]!
	0x031C1E58 STP X22, X21, [X31 + 0x10]
	0x031C1E5C STP X20, X19, [X31 + 0x20]
	0x031C1E60 ADRP X23, 0x121A000
	0x031C1E64 ADRP X22, 0xF5E000
	0x031C1E68 ADRP X20, 0xF5E000
	0x031C1E6C ADRP X21, 0xF5E000
	0x031C1E70 LDRB W8, [X23 + 0xF77]
	0x031C1E74 LDR X22, [X22 + 0x428]
	0x031C1E78 LDR X20, [X20 + 0x920]
	0x031C1E7C LDR X21, [X21 + 0x928]
	0x031C1E80 MOV X19, X0
	0x031C1E84 TBNZ X8, 0x0, 0x31C1EB4
	0x031C1E88 ADRP X0, 0xF5E000
	0x031C1E8C LDR X0, [X0 + 0x428]
	0x031C1E90 BL 0x1C16CF4
	0x031C1E94 ADRP X0, 0xF5E000
	0x031C1E98 LDR X0, [X0 + 0x920]
	0x031C1E9C BL 0x1C16CF4
	0x031C1EA0 ADRP X0, 0xF5E000
	0x031C1EA4 LDR X0, [X0 + 0x928]
	0x031C1EA8 BL 0x1C16CF4
	0x031C1EAC MOVZ W8, 0x1
	0x031C1EB0 STRB W8, [X23 + 0xF77]
	0x031C1EB4 MOVZ W8, 0x25
	0x031C1EB8 STR W8, [X19 + 0x90]
	0x031C1EBC LDR X0, [X22]
	0x031C1EC0 BL 0x1C16F10
	0x031C1EC4 LDR X2, [X20]
	0x031C1EC8 MOV X1, X19
	0x031C1ECC MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3937]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2008]
	014 Move X21, [X21+2016]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+2008]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+2016]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3937], W8
	031 Move W8, 25
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setColor()

Disassembly:
	0x031C1ED0 BL 0x31C0024
	0x031C1ED4 STR X20, [X19 + 0xB0]
	0x031C1ED8 LDR X0, [X22]
	0x031C1EDC BL 0x1C16F10
	0x031C1EE0 LDR X2, [X21]
	0x031C1EE4 MOV X1, X19
	0x031C1EE8 MOV X20, X0
	0x031C1EEC BL 0x31C0024
	0x031C1EF0 STR X20, [X19 + 0xA8]
	0x031C1EF4 MOV X0, X19
	0x031C1EF8 LDP X20, X19, [X31 + 0x20]
	0x031C1EFC LDP X22, X21, [X31 + 0x10]
	0x031C1F00 LDP X30, X23, [X31], #0x30
	0x031C1F04 RET
	0x031C1F08 STP X30, X23, [X31 - 0x30]!
	0x031C1F0C STP X22, X21, [X31 + 0x10]
	0x031C1F10 STP X20, X19, [X31 + 0x20]
	0x031C1F14 ADRP X23, 0x121A000
	0x031C1F18 ADRP X22, 0xF5E000
	0x031C1F1C ADRP X20, 0xF5E000
	0x031C1F20 ADRP X21, 0xF5E000
	0x031C1F24 LDRB W8, [X23 + 0xF78]
	0x031C1F28 LDR X22, [X22 + 0x428]
	0x031C1F2C LDR X20, [X20 + 0x930]
	0x031C1F30 LDR X21, [X21 + 0x938]
	0x031C1F34 MOV X19, X0
	0x031C1F38 TBNZ X8, 0x0, 0x31C1F68
	0x031C1F3C ADRP X0, 0xF5E000
	0x031C1F40 LDR X0, [X0 + 0x428]
	0x031C1F44 BL 0x1C16CF4
	0x031C1F48 ADRP X0, 0xF5E000
	0x031C1F4C LDR X0, [X0 + 0x930]
	0x031C1F50 BL 0x1C16CF4
	0x031C1F54 ADRP X0, 0xF5E000
	0x031C1F58 LDR X0, [X0 + 0x938]
	0x031C1F5C BL 0x1C16CF4
	0x031C1F60 MOVZ W8, 0x1
	0x031C1F64 STRB W8, [X23 + 0xF78]
	0x031C1F68 MOVZ W8, 0x26
	0x031C1F6C STR W8, [X19 + 0x90]
	0x031C1F70 LDR X0, [X22]
	0x031C1F74 BL 0x1C16F10
	0x031C1F78 LDR X2, [X20]
	0x031C1F7C MOV X1, X19
	0x031C1F80 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3938]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2024]
	014 Move X21, [X21+2032]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+2024]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+2032]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3938], W8
	031 Move W8, 26
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCallbackColor()

Disassembly:
	0x031C1F84 BL 0x31C0024
	0x031C1F88 STR X20, [X19 + 0xB0]
	0x031C1F8C LDR X0, [X22]
	0x031C1F90 BL 0x1C16F10
	0x031C1F94 LDR X2, [X21]
	0x031C1F98 MOV X1, X19
	0x031C1F9C MOV X20, X0
	0x031C1FA0 BL 0x31C0024
	0x031C1FA4 STR X20, [X19 + 0xA8]
	0x031C1FA8 MOV X0, X19
	0x031C1FAC LDP X20, X19, [X31 + 0x20]
	0x031C1FB0 LDP X22, X21, [X31 + 0x10]
	0x031C1FB4 LDP X30, X23, [X31], #0x30
	0x031C1FB8 RET
	0x031C1FBC STP X30, X23, [X31 - 0x30]!
	0x031C1FC0 STP X22, X21, [X31 + 0x10]
	0x031C1FC4 STP X20, X19, [X31 + 0x20]
	0x031C1FC8 ADRP X23, 0x121A000
	0x031C1FCC ADRP X22, 0xF5E000
	0x031C1FD0 ADRP X20, 0xF5E000
	0x031C1FD4 ADRP X21, 0xF5E000
	0x031C1FD8 LDRB W8, [X23 + 0xF79]
	0x031C1FDC LDR X22, [X22 + 0x428]
	0x031C1FE0 LDR X20, [X20 + 0x940]
	0x031C1FE4 LDR X21, [X21 + 0x948]
	0x031C1FE8 MOV X19, X0
	0x031C1FEC TBNZ X8, 0x0, 0x31C201C
	0x031C1FF0 ADRP X0, 0xF5E000
	0x031C1FF4 LDR X0, [X0 + 0x428]
	0x031C1FF8 BL 0x1C16CF4
	0x031C1FFC ADRP X0, 0xF5E000
	0x031C2000 LDR X0, [X0 + 0x940]
	0x031C2004 BL 0x1C16CF4
	0x031C2008 ADRP X0, 0xF5D000
	0x031C200C LDR X0, [X0 + 0x948]
	0x031C2010 BL 0x1C16CF4
	0x031C2014 MOVZ W8, 0x1
	0x031C2018 STRB W8, [X23 + 0xF79]
	0x031C201C MOVZ W8, 0x27
	0x031C2020 STR W8, [X19 + 0x90]
	0x031C2024 LDR X0, [X22]
	0x031C2028 BL 0x1C16F10
	0x031C202C LDR X2, [X20]
	0x031C2030 MOV X1, X19
	0x031C2034 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121B000
	008 Move X22, 0xF5F000
	009 Move X20, 0xF5F000
	010 Move X21, 0xF5F000
	011 Move W8, [X23+3939]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2040]
	014 Move X21, [X21+2048]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5F000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5F000
	024 Move X0, [X0+2040]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5F000
	027 Move X0, [X0+2048]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3939], W8
	031 Move W8, 27
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setTextColor()

Disassembly:
	0x031C2038 BL 0x31C0024
	0x031C203C STR X20, [X19 + 0xB0]
	0x031C2040 LDR X0, [X22]
	0x031C2044 BL 0x1C16F10
	0x031C2048 LDR X2, [X21]
	0x031C204C MOV X1, X19
	0x031C2050 MOV X20, X0
	0x031C2054 BL 0x31C0024
	0x031C2058 STR X20, [X19 + 0xA8]
	0x031C205C MOV X0, X19
	0x031C2060 LDP X20, X19, [X31 + 0x20]
	0x031C2064 LDP X22, X21, [X31 + 0x10]
	0x031C2068 LDP X30, X23, [X31], #0x30
	0x031C206C RET
	0x031C2070 STP X30, X23, [X31 - 0x30]!
	0x031C2074 STP X22, X21, [X31 + 0x10]
	0x031C2078 STP X20, X19, [X31 + 0x20]
	0x031C207C ADRP X23, 0x1219000
	0x031C2080 ADRP X22, 0xF5D000
	0x031C2084 ADRP X20, 0xF5D000
	0x031C2088 ADRP X21, 0xF5D000
	0x031C208C LDRB W8, [X23 + 0xF7A]
	0x031C2090 LDR X22, [X22 + 0x428]
	0x031C2094 LDR X20, [X20 + 0x950]
	0x031C2098 LDR X21, [X21 + 0x958]
	0x031C209C MOV X19, X0
	0x031C20A0 TBNZ X8, 0x0, 0x31C20D0
	0x031C20A4 ADRP X0, 0xF5D000
	0x031C20A8 LDR X0, [X0 + 0x428]
	0x031C20AC BL 0x1C16CF4
	0x031C20B0 ADRP X0, 0xF5D000
	0x031C20B4 LDR X0, [X0 + 0x950]
	0x031C20B8 BL 0x1C16CF4
	0x031C20BC ADRP X0, 0xF5D000
	0x031C20C0 LDR X0, [X0 + 0x958]
	0x031C20C4 BL 0x1C16CF4
	0x031C20C8 MOVZ W8, 0x1
	0x031C20CC STRB W8, [X23 + 0xF7A]
	0x031C20D0 MOVZ W8, 0x29
	0x031C20D4 STR W8, [X19 + 0x90]
	0x031C20D8 LDR X0, [X22]
	0x031C20DC BL 0x1C16F10
	0x031C20E0 LDR X2, [X20]
	0x031C20E4 MOV X1, X19
	0x031C20E8 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3940]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2056]
	014 Move X21, [X21+2064]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2056]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2064]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3940], W8
	031 Move W8, 28
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasAlpha()

Disassembly:
	0x031C20EC BL 0x31C0024
	0x031C20F0 STR X20, [X19 + 0xB0]
	0x031C20F4 LDR X0, [X22]
	0x031C20F8 BL 0x1C16F10
	0x031C20FC LDR X2, [X21]
	0x031C2100 MOV X1, X19
	0x031C2104 MOV X20, X0
	0x031C2108 BL 0x31C0024
	0x031C210C STR X20, [X19 + 0xA8]
	0x031C2110 MOV X0, X19
	0x031C2114 LDP X20, X19, [X31 + 0x20]
	0x031C2118 LDP X22, X21, [X31 + 0x10]
	0x031C211C LDP X30, X23, [X31], #0x30
	0x031C2120 RET
	0x031C2124 STP X30, X23, [X31 - 0x30]!
	0x031C2128 STP X22, X21, [X31 + 0x10]
	0x031C212C STP X20, X19, [X31 + 0x20]
	0x031C2130 ADRP X23, 0x1219000
	0x031C2134 ADRP X22, 0xF5D000
	0x031C2138 ADRP X20, 0xF5D000
	0x031C213C ADRP X21, 0xF5D000
	0x031C2140 LDRB W8, [X23 + 0xF7B]
	0x031C2144 LDR X22, [X22 + 0x428]
	0x031C2148 LDR X20, [X20 + 0x960]
	0x031C214C LDR X21, [X21 + 0x968]
	0x031C2150 MOV X19, X0
	0x031C2154 TBNZ X8, 0x0, 0x31C2184
	0x031C2158 ADRP X0, 0xF5D000
	0x031C215C LDR X0, [X0 + 0x428]
	0x031C2160 BL 0x1C16CF4
	0x031C2164 ADRP X0, 0xF5D000
	0x031C2168 LDR X0, [X0 + 0x960]
	0x031C216C BL 0x1C16CF4
	0x031C2170 ADRP X0, 0xF5D000
	0x031C2174 LDR X0, [X0 + 0x968]
	0x031C2178 BL 0x1C16CF4
	0x031C217C MOVZ W8, 0x1
	0x031C2180 STRB W8, [X23 + 0xF7B]
	0x031C2184 MOVZ W8, 0x2A
	0x031C2188 STR W8, [X19 + 0x90]
	0x031C218C LDR X0, [X22]
	0x031C2190 BL 0x1C16F10
	0x031C2194 LDR X2, [X20]
	0x031C2198 MOV X1, X19
	0x031C219C MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3941]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2072]
	014 Move X21, [X21+2080]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2072]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2080]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3941], W8
	031 Move W8, 23
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasGroupAlpha()

Disassembly:
	0x031C21A0 BL 0x31C0024
	0x031C21A4 STR X20, [X19 + 0xB0]
	0x031C21A8 LDR X0, [X22]
	0x031C21AC BL 0x1C16F10
	0x031C21B0 LDR X2, [X21]
	0x031C21B4 MOV X1, X19
	0x031C21B8 MOV X20, X0
	0x031C21BC BL 0x31C0024
	0x031C21C0 STR X20, [X19 + 0xA8]
	0x031C21C4 MOV X0, X19
	0x031C21C8 LDP X20, X19, [X31 + 0x20]
	0x031C21CC LDP X22, X21, [X31 + 0x10]
	0x031C21D0 LDP X30, X23, [X31], #0x30
	0x031C21D4 RET
	0x031C21D8 STP X30, X23, [X31 - 0x30]!
	0x031C21DC STP X22, X21, [X31 + 0x10]
	0x031C21E0 STP X20, X19, [X31 + 0x20]
	0x031C21E4 ADRP X23, 0x1219000
	0x031C21E8 ADRP X22, 0xF5D000
	0x031C21EC ADRP X20, 0xF5D000
	0x031C21F0 ADRP X21, 0xF5D000
	0x031C21F4 LDRB W8, [X23 + 0xF7C]
	0x031C21F8 LDR X22, [X22 + 0x428]
	0x031C21FC LDR X20, [X20 + 0x970]
	0x031C2200 LDR X21, [X21 + 0x978]
	0x031C2204 MOV X19, X0
	0x031C2208 TBNZ X8, 0x0, 0x31C2238
	0x031C220C ADRP X0, 0xF5D000
	0x031C2210 LDR X0, [X0 + 0x428]
	0x031C2214 BL 0x1C16CF4
	0x031C2218 ADRP X0, 0xF5D000
	0x031C221C LDR X0, [X0 + 0x970]
	0x031C2220 BL 0x1C16CF4
	0x031C2224 ADRP X0, 0xF5D000
	0x031C2228 LDR X0, [X0 + 0x978]
	0x031C222C BL 0x1C16CF4
	0x031C2230 MOVZ W8, 0x1
	0x031C2234 STRB W8, [X23 + 0xF7C]
	0x031C2238 MOVZ W8, 0x2B
	0x031C223C STR W8, [X19 + 0x90]
	0x031C2240 LDR X0, [X22]
	0x031C2244 BL 0x1C16F10
	0x031C2248 LDR X2, [X20]
	0x031C224C MOV X1, X19
	0x031C2250 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3942]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2088]
	014 Move X21, [X21+2096]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2088]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2096]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3942], W8
	031 Move W8, 24
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasColor()

Disassembly:
	0x031C2254 BL 0x31C0024
	0x031C2258 STR X20, [X19 + 0xB0]
	0x031C225C LDR X0, [X22]
	0x031C2260 BL 0x1C16F10
	0x031C2264 LDR X2, [X21]
	0x031C2268 MOV X1, X19
	0x031C226C MOV X20, X0
	0x031C2270 BL 0x31C0024
	0x031C2274 STR X20, [X19 + 0xA8]
	0x031C2278 MOV X0, X19
	0x031C227C LDP X20, X19, [X31 + 0x20]
	0x031C2280 LDP X22, X21, [X31 + 0x10]
	0x031C2284 LDP X30, X23, [X31], #0x30
	0x031C2288 RET
	0x031C228C STP X30, X23, [X31 - 0x30]!
	0x031C2290 STP X22, X21, [X31 + 0x10]
	0x031C2294 STP X20, X19, [X31 + 0x20]
	0x031C2298 ADRP X23, 0x1219000
	0x031C229C ADRP X22, 0xF5D000
	0x031C22A0 ADRP X20, 0xF5D000
	0x031C22A4 ADRP X21, 0xF5D000
	0x031C22A8 LDRB W8, [X23 + 0xF7D]
	0x031C22AC LDR X22, [X22 + 0x428]
	0x031C22B0 LDR X20, [X20 + 0x980]
	0x031C22B4 LDR X21, [X21 + 0x988]
	0x031C22B8 MOV X19, X0
	0x031C22BC TBNZ X8, 0x0, 0x31C22EC
	0x031C22C0 ADRP X0, 0xF5D000
	0x031C22C4 LDR X0, [X0 + 0x428]
	0x031C22C8 BL 0x1C16CF4
	0x031C22CC ADRP X0, 0xF5D000
	0x031C22D0 LDR X0, [X0 + 0x980]
	0x031C22D4 BL 0x1C16CF4
	0x031C22D8 ADRP X0, 0xF5D000
	0x031C22DC LDR X0, [X0 + 0x988]
	0x031C22E0 BL 0x1C16CF4
	0x031C22E4 MOVZ W8, 0x1
	0x031C22E8 STRB W8, [X23 + 0xF7D]
	0x031C22EC MOVZ W8, 0x2C
	0x031C22F0 STR W8, [X19 + 0x90]
	0x031C22F4 LDR X0, [X22]
	0x031C22F8 BL 0x1C16F10
	0x031C22FC LDR X2, [X20]
	0x031C2300 MOV X1, X19
	0x031C2304 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3943]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2104]
	014 Move X21, [X21+2112]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2104]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2112]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3943], W8
	031 Move W8, 29
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasMoveX()

Disassembly:
	0x031C2308 BL 0x31C0024
	0x031C230C STR X20, [X19 + 0xB0]
	0x031C2310 LDR X0, [X22]
	0x031C2314 BL 0x1C16F10
	0x031C2318 LDR X2, [X21]
	0x031C231C MOV X1, X19
	0x031C2320 MOV X20, X0
	0x031C2324 BL 0x31C0024
	0x031C2328 STR X20, [X19 + 0xA8]
	0x031C232C MOV X0, X19
	0x031C2330 LDP X20, X19, [X31 + 0x20]
	0x031C2334 LDP X22, X21, [X31 + 0x10]
	0x031C2338 LDP X30, X23, [X31], #0x30
	0x031C233C RET
	0x031C2340 STP X30, X23, [X31 - 0x30]!
	0x031C2344 STP X22, X21, [X31 + 0x10]
	0x031C2348 STP X20, X19, [X31 + 0x20]
	0x031C234C ADRP X23, 0x1219000
	0x031C2350 ADRP X22, 0xF5D000
	0x031C2354 ADRP X20, 0xF5D000
	0x031C2358 ADRP X21, 0xF5D000
	0x031C235C LDRB W8, [X23 + 0xF7E]
	0x031C2360 LDR X22, [X22 + 0x428]
	0x031C2364 LDR X20, [X20 + 0x990]
	0x031C2368 LDR X21, [X21 + 0x998]
	0x031C236C MOV X19, X0
	0x031C2370 TBNZ X8, 0x0, 0x31C23A0
	0x031C2374 ADRP X0, 0xF5D000
	0x031C2378 LDR X0, [X0 + 0x428]
	0x031C237C BL 0x1C16CF4
	0x031C2380 ADRP X0, 0xF5D000
	0x031C2384 LDR X0, [X0 + 0x990]
	0x031C2388 BL 0x1C16CF4
	0x031C238C ADRP X0, 0xF5D000
	0x031C2390 LDR X0, [X0 + 0x998]
	0x031C2394 BL 0x1C16CF4
	0x031C2398 MOVZ W8, 0x1
	0x031C239C STRB W8, [X23 + 0xF7E]
	0x031C23A0 MOVZ W8, 0x2D
	0x031C23A4 STR W8, [X19 + 0x90]
	0x031C23A8 LDR X0, [X22]
	0x031C23AC BL 0x1C16F10
	0x031C23B0 LDR X2, [X20]
	0x031C23B4 MOV X1, X19
	0x031C23B8 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3944]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2120]
	014 Move X21, [X21+2128]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2120]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2128]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3944], W8
	031 Move W8, 30
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasMoveY()

Disassembly:
	0x031C23BC BL 0x31C0024
	0x031C23C0 STR X20, [X19 + 0xB0]
	0x031C23C4 LDR X0, [X22]
	0x031C23C8 BL 0x1C16F10
	0x031C23CC LDR X2, [X21]
	0x031C23D0 MOV X1, X19
	0x031C23D4 MOV X20, X0
	0x031C23D8 BL 0x31C0024
	0x031C23DC STR X20, [X19 + 0xA8]
	0x031C23E0 MOV X0, X19
	0x031C23E4 LDP X20, X19, [X31 + 0x20]
	0x031C23E8 LDP X22, X21, [X31 + 0x10]
	0x031C23EC LDP X30, X23, [X31], #0x30
	0x031C23F0 RET
	0x031C23F4 STP X30, X23, [X31 - 0x30]!
	0x031C23F8 STP X22, X21, [X31 + 0x10]
	0x031C23FC STP X20, X19, [X31 + 0x20]
	0x031C2400 ADRP X23, 0x1219000
	0x031C2404 ADRP X22, 0xF5D000
	0x031C2408 ADRP X20, 0xF5D000
	0x031C240C ADRP X21, 0xF5D000
	0x031C2410 LDRB W8, [X23 + 0xF7F]
	0x031C2414 LDR X22, [X22 + 0x428]
	0x031C2418 LDR X20, [X20 + 0x9A0]
	0x031C241C LDR X21, [X21 + 0x8D8]
	0x031C2420 MOV X19, X0
	0x031C2424 TBNZ X8, 0x0, 0x31C2454
	0x031C2428 ADRP X0, 0xF5D000
	0x031C242C LDR X0, [X0 + 0x428]
	0x031C2430 BL 0x1C16CF4
	0x031C2434 ADRP X0, 0xF5D000
	0x031C2438 LDR X0, [X0 + 0x9A0]
	0x031C243C BL 0x1C16CF4
	0x031C2440 ADRP X0, 0xF5D000
	0x031C2444 LDR X0, [X0 + 0x8D8]
	0x031C2448 BL 0x1C16CF4
	0x031C244C MOVZ W8, 0x1
	0x031C2450 STRB W8, [X23 + 0xF7F]
	0x031C2454 MOVZ W8, 0x2E
	0x031C2458 STR W8, [X19 + 0x90]
	0x031C245C LDR X0, [X22]
	0x031C2460 BL 0x1C16F10
	0x031C2464 LDR X2, [X20]
	0x031C2468 MOV X1, X19
	0x031C246C MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3945]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2136]
	014 Move X21, [X21+2144]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2136]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2144]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3945], W8
	031 Move W8, 31
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasMoveZ()

Disassembly:
	0x031C2470 BL 0x31C0024
	0x031C2474 STR X20, [X19 + 0xB0]
	0x031C2478 LDR X0, [X22]
	0x031C247C BL 0x1C16F10
	0x031C2480 LDR X2, [X21]
	0x031C2484 MOV X1, X19
	0x031C2488 MOV X20, X0
	0x031C248C BL 0x31C0024
	0x031C2490 STR X20, [X19 + 0xA8]
	0x031C2494 MOV X0, X19
	0x031C2498 LDP X20, X19, [X31 + 0x20]
	0x031C249C LDP X22, X21, [X31 + 0x10]
	0x031C24A0 LDP X30, X23, [X31], #0x30
	0x031C24A4 RET
	0x031C24A8 STR X30, [X31 - 0x10]!
	0x031C24AC LDR X8, [X0 + 0xE8]
	0x031C24B0 CBZ X8, 0x31C24C0
	0x031C24B4 STR X1, [X8 + 0x10]
	0x031C24B8 LDR X30, [X31], #0x10
	0x031C24BC RET
	0x031C24C0 BL 0x1C16F20
	0x031C24C4 STR X30, [X31 - 0x20]!
	0x031C24C8 STP X20, X19, [X31 + 0x10]
	0x031C24CC ADRP X20, 0x1219000
	0x031C24D0 LDRB W8, [X20 + 0xF80]
	0x031C24D4 MOV X19, X0
	0x031C24D8 TBNZ X8, 0x0, 0x31C24F0
	0x031C24DC ADRP X0, 0xF38000
	0x031C24E0 LDR X0, [X0 + 0x4B8]
	0x031C24E4 BL 0x1C16CF4
	0x031C24E8 MOVZ W8, 0x1
	0x031C24EC STRB W8, [X20 + 0xF80]
	0x031C24F0 LDRB W8, [X19 + 0x11]
	0x031C24F4 MOVZ W9, 0x1
	0x031C24F8 STRB W9, [X19 + 0x15]
	0x031C24FC CBNZ W8, 0x31C2508
	0x031C2500 LDRB W8, [X19 + 0x13]
	0x031C2504 CBZ W8, 0x31C25F8
	0x031C2508 MOV W8, W31
	0x031C250C LDRB W9, [X19 + 0x12]
	0x031C2510 STRB W8, [X19 + 0x14]
	0x031C2514 CBZ W9, 0x31C252C
	0x031C2518 LDR X20, [X19 + 0xE8]
	0x031C251C MOV X0, X31
	0x031C2520 BL 0x3C3C88C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3946]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2152]
	014 Move X21, [X21+2160]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2152]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2160]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3946], W8
	031 Move W8, 32
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: System.Void initCanvasRotateAround()

Disassembly:
	0x031C2524 CBZ X20, 0x31C2604
	0x031C2528 STR W0, [X20 + 0x60]
	0x031C252C LDR V0, [X19 + 0x28]
	0x031C2530 FCMP S0, 0x0
	0x031C2534 B.HI 0x31C2550
	0x031C2538 ADRP X8, 0xF38000
	0x031C253C LDR X8, [X8 + 0x4B8]
	0x031C2540 LDR X8, [X8]
	0x031C2544 LDR X8, [X8 + 0xB8]
	0x031C2548 LDR V0, [X8]
	0x031C254C STR S0, [X19 + 0x28]
	0x031C2550 LDR X8, [X19 + 0xB0]
	0x031C2554 CBZ X8, 0x31C2568
	0x031C2558 LDR X9, [X8 + 0x18]
	0x031C255C LDR X0, [X8 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, X0
	004 Move X0, [X0+192]
	005 Move [X8+48], W31
	006 Move [X8+96], W31
	007 Compare X0, 0
	008 JumpIfEqual {21}
	009 Move X19, [X8+232]
	010 Move X1, X31
	011 Call Transform.get_rotation, X0
	012 Compare X19, 0
	013 JumpIfEqual {21}
	014 Move [X19+52], S0
	015 Move [X19+60], S1
	016 Move [X19+60], S2
	017 Move [X19+68], S3
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 
	021 Call 0x1C17F20

Method: LTDescr setCanvasRotateAround()

Disassembly:
	0x031C2560 LDR X1, [X8 + 0x28]
	0x031C2564 BLR X9
	0x031C2568 LDUR V0, [X19 + 0x6C]
	0x031C256C LDR V1, [X19 + 0x74]
	0x031C2570 LDR V2, [X19 + 0x60]
	0x031C2574 LDR V3, [X19 + 0x68]
	0x031C2578 LDR X8, [X19 + 0xE8]
	0x031C257C MOVI V4.2S, 0x3F, 0x18
	0x031C2580 FMOV S5, 0.5
	0x031C2584 FSUB V0.2S, V0.2S, V2.2S
	0x031C2588 FSUB S1, S1, S3
	0x031C258C STR D0, [X19 + 0x78]
	0x031C2590 STR S1, [X19 + 0x80]
	0x00000000 INVALID
	0x031C2598 FMUL S1, S1, S5
	0x031C259C STUR D0, [X19 + 0x84]
	0x031C25A0 STR S1, [X19 + 0x8C]
	0x031C25A4 CBZ X8, 0x31C2604
	0x031C25A8 LDR X8, [X8 + 0xE0]
	0x031C25AC CBZ X8, 0x31C25C0
	0x031C25B0 LDR X9, [X8 + 0x18]
	0x031C25B4 LDR X0, [X8 + 0x40]
	0x031C25B8 LDR X1, [X8 + 0x28]
	0x031C25BC BLR X9
	0x031C25C0 LDRB W8, [X19 + 0x19]
	0x031C25C4 CBZ W8, 0x31C25D0
	0x031C25C8 MOV X0, X19
	0x031C25CC BL 0x31C2608
	0x031C25D0 LDR V0, [X19 + 0x2C]
	0x031C25D4 FCMP S0, 0x0
	0x031C25D8 B.GE 0x31C25E8
	0x031C25DC LDP X20, X19, [X31 + 0x10]
	0x031C25E0 LDR X30, [X31], #0x20
	0x031C25E4 RET
	0x031C25E8 MOV X0, X19
	0x031C25EC LDP X20, X19, [X31 + 0x10]
	0x031C25F0 LDR X30, [X31], #0x20
	0x031C25F4 B 0x31C2700
	0x031C25F8 LDRB W8, [X19 + 0x12]
	0x031C25FC EOR W8, W8, 0x1
	0x031C2600 B 0x31C250C
	0x031C2604 BL 0x1C16F20
	0x031C2608 STR X30, [X31 - 0x20]!
	0x031C260C STP X20, X19, [X31 + 0x10]
	0x031C2610 ADRP X20, 0x1219000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3947]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2168]
	014 Move X21, [X21+2176]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2176]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2168]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3947], W8
	031 Move W8, 18
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasRotateAroundLocal()

Disassembly:
	0x031C2614 LDRB W8, [X20 + 0xF82]
	0x031C2618 MOV X19, X0
	0x031C261C TBNZ X8, 0x0, 0x31C2634
	0x031C2620 ADRP X0, 0xF5D000
	0x031C2624 LDR X0, [X0 + 0x9A8]
	0x031C2628 BL 0x1C16CF4
	0x031C262C MOVZ W8, 0x1
	0x031C2630 STRB W8, [X20 + 0xF82]
	0x031C2634 LDR W8, [X19 + 0x90]
	0x031C2638 CMP W8, 0x2E
	0x031C263C B.EQ 0x31C2664
	0x031C2640 CMP W8, 0x2D
	0x031C2644 B.NE 0x31C26A0
	0x031C2648 LDR X8, [X19 + 0xE8]
	0x031C264C CBZ X8, 0x31C26F8
	0x031C2650 LDR X8, [X8 + 0x78]
	0x031C2654 CBZ X8, 0x31C26F8
	0x031C2658 MOVZ W9, 0x1
	0x031C265C STRB W9, [X8 + 0x49]
	0x031C2660 B 0x31C26A0
	0x031C2664 LDR X8, [X19 + 0xE8]
	0x031C2668 CBZ X8, 0x31C26F8
	0x031C266C LDR X0, [X8 + 0xD0]
	0x031C2670 LDP S0, S1, [X19 + 0x6C]
	0x031C2674 LDR V2, [X19 + 0x74]
	0x031C2678 LDR V3, [X19 + 0x60]
	0x031C267C CBZ X0, 0x31C2698
	0x031C2680 ADRP X8, 0xF5D000
	0x031C2684 LDR X8, [X8 + 0x9A8]
	0x031C2688 LDR X1, [X8]
	0x031C268C LDR X8, [X0]
	0x031C2690 CMP X8, X1
	0x031C2694 B.NE 0x31C26FC
	0x031C2698 MOV X1, X31
	0x031C269C BL 0x3BFCCBC
	0x031C26A0 LDR X8, [X19 + 0xE8]
	0x031C26A4 CBZ X8, 0x31C26F8
	0x031C26A8 LDR X9, [X8 + 0xC0]
	0x031C26AC CBZ X9, 0x31C26C8
	0x031C26B0 LDR X2, [X9 + 0x18]
	0x031C26B4 LDR X0, [X9 + 0x40]
	0x031C26B8 LDR X1, [X9 + 0x28]
	0x031C26BC LDP X20, X19, [X31 + 0x10]
	0x031C26C0 LDR X30, [X31], #0x20
	0x031C26C4 BR X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3948]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2168]
	014 Move X21, [X21+2184]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2184]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2168]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3948], W8
	031 Move W8, 19
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasPlaySprite()

Disassembly:
	0x031C26C8 LDR X9, [X8 + 0xC8]
	0x031C26CC CBZ X9, 0x31C26EC
	0x031C26D0 LDR X1, [X8 + 0xD0]
	0x031C26D4 LDR X3, [X9 + 0x18]
	0x031C26D8 LDR X0, [X9 + 0x40]
	0x031C26DC LDR X2, [X9 + 0x28]
	0x031C26E0 LDP X20, X19, [X31 + 0x10]
	0x031C26E4 LDR X30, [X31], #0x20
	0x031C26E8 BR X3
	0x031C26EC LDP X20, X19, [X31 + 0x10]
	0x031C26F0 LDR X30, [X31], #0x20
	0x031C26F4 RET
	0x031C26F8 BL 0x1C16F20
	0x031C26FC BL 0x1C171E0
	0x031C2700 STP D11, D10, [X31 - 0x40]!
	0x031C2704 STP D9, D8, [X31 + 0x10]
	0x031C2708 STR X30, [X31 + 0x20]
	0x031C270C STP X20, X19, [X31 + 0x30]
	0x031C2710 LDR W8, [X0 + 0x90]
	0x031C2714 MOV X19, X0
	0x031C2718 SUB W9, W8, 0x8
	0x031C271C CMP W9, 0x2
	0x031C2720 B.CC 0x31C2748
	0x031C2724 SUB W8, W8, 0x6
	0x031C2728 CMP W8, 0x1
	0x031C272C B.HI 0x31C2760
	0x031C2730 LDR X8, [X19 + 0xE8]
	0x031C2734 CBZ X8, 0x31C27E8
	0x031C2738 LDR X8, [X8 + 0x48]
	0x031C273C CBZ X8, 0x31C27E8
	0x031C2740 LDR V0, [X8 + 0x18]
	0x031C2744 B 0x31C27C8
	0x031C2748 LDR X8, [X19 + 0xE8]
	0x031C274C CBZ X8, 0x31C27E8
	0x031C2750 LDR X8, [X8 + 0x50]
	0x031C2754 CBZ X8, 0x31C27E8
	0x031C2758 LDR V0, [X8 + 0x10]
	0x031C275C B 0x31C27C8
	0x031C2760 ADRP X20, 0x1216000
	0x031C2764 LDR V8, [X19 + 0x6C]
	0x031C2768 LDR V9, [X19 + 0x70]
	0x031C276C LDR V10, [X19 + 0x60]
	0x031C2770 LDRB W8, [X20 + 0x784]
	0x031C2774 LDUR V11, [X19 + 0x64]
	0x031C2778 CBNZ W8, 0x31C2790

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3949]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2192]
	014 Move X21, [X21+2200]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2192]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2200]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3949], W8
	031 Move W8, 20
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasMove()

Disassembly:
	0x031C277C ADRP X0, 0xF31000
	0x031C2780 LDR X0, [X0 + 0x5A8]
	0x031C2784 BL 0x1C16CF4
	0x031C2788 MOVZ W8, 0x1
	0x031C278C STRB W8, [X20 + 0x784]
	0x031C2790 ADRP X8, 0xF31000
	0x031C2794 LDR X8, [X8 + 0x5A8]
	0x031C2798 FSUB S10, S8, S10
	0x031C279C FSUB V8.2S, V9.2S, V11.2S
	0x031C27A0 LDR X0, [X8]
	0x031C27A4 LDR W8, [X0 + 0xE0]
	0x031C27A8 CBNZ W8, 0x31C27B0
	0x031C27AC BL 0x1C16DFC
	0x031C27B0 FMUL S0, S10, S10
	0x00000000 INVALID
	0x031C27B8 FADD S0, S0, S1
	0x031C27BC MOV S1, V1.S[1]
	0x031C27C0 FADD S0, S0, S1
	0x031C27C4 FSQRT S0, S0
	0x031C27C8 LDR V1, [X19 + 0x2C]
	0x031C27CC LDR X30, [X31 + 0x20]
	0x031C27D0 LDP D9, D8, [X31 + 0x10]
	0x031C27D4 FDIV S0, S0, S1
	0x031C27D8 STR S0, [X19 + 0x28]
	0x031C27DC LDP X20, X19, [X31 + 0x30]
	0x031C27E0 LDP D11, D10, [X31], #0x40
	0x031C27E4 RET
	0x031C27E8 BL 0x1C16F20
	0x031C27EC STP X30, X19, [X31 - 0x10]!
	0x031C27F0 MOV X19, X0
	0x031C27F4 BL 0x31C2804
	0x031C27F8 MOV X0, X19
	0x031C27FC LDP X30, X19, [X31], #0x10
	0x031C2800 RET
	0x031C2804 STR D8, [X31 - 0x30]!
	0x031C2808 STP X30, X21, [X31 + 0x10]
	0x031C280C STP X20, X19, [X31 + 0x20]
	0x031C2810 ADRP X20, 0x1219000
	0x031C2814 LDRB W8, [X20 + 0xF81]
	0x031C2818 MOV X19, X0
	0x031C281C TBNZ X8, 0x0, 0x31C2858
	0x031C2820 ADRP X0, 0xF5D000
	0x031C2824 LDR X0, [X0 + 0x368]
	0x031C2828 BL 0x1C16CF4
	0x031C282C ADRP X0, 0xF33000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3950]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2208]
	014 Move X21, [X21+2216]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2208]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2216]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3950], W8
	031 Move W8, 47
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasScale()

Disassembly:
	0x031C2830 LDR X0, [X0 + 0x5A8]
	0x031C2834 BL 0x1C16CF4
	0x031C2838 ADRP X0, 0xF38000
	0x031C283C LDR X0, [X0 + 0x4B8]
	0x031C2840 BL 0x1C16CF4
	0x031C2844 ADRP X0, 0xF31000
	0x031C2848 LDR X0, [X0 + 0x598]
	0x031C284C BL 0x1C16CF4
	0x031C2850 MOVZ W8, 0x1
	0x031C2854 STRB W8, [X20 + 0xF81]
	0x031C2858 ADRP X20, 0xF33000
	0x031C285C ADRP X21, 0xF5D000
	0x031C2860 LDRB W8, [X19 + 0x14]
	0x031C2864 LDR V8, [X19 + 0x40]
	0x031C2868 LDR X20, [X20 + 0x5A8]
	0x031C286C LDR X21, [X21 + 0x368]
	0x031C2870 CBZ W8, 0x31C2898
	0x031C2874 LDR X0, [X20]
	0x031C2878 LDR W8, [X0 + 0xE0]
	0x031C287C CBNZ W8, 0x31C2888
	0x031C2880 BL 0x1C16DFC
	0x031C2884 LDR X0, [X20]
	0x031C2888 LDR X8, [X0 + 0xB8]
	0x031C288C LDR X9, [X21]
	0x031C2890 LDR V0, [X8 + 0x58]
	0x031C2894 B 0x31C28C0
	0x031C2898 LDRB W8, [X19 + 0x11]
	0x031C289C CBZ W8, 0x31C29D4
	0x031C28A0 LDR X0, [X20]
	0x031C28A4 LDR W8, [X0 + 0xE0]
	0x031C28A8 CBNZ W8, 0x31C28B4
	0x031C28AC BL 0x1C16DFC
	0x031C28B0 LDR X0, [X20]
	0x031C28B4 LDR X8, [X0 + 0xB8]
	0x031C28B8 LDR X9, [X21]
	0x031C28BC LDR V0, [X8 + 0x50]
	0x031C28C0 LDR X8, [X9 + 0xB8]
	0x031C28C4 STR S0, [X8 + 0x4]
	0x031C28C8 LDR V0, [X19 + 0x24]
	0x031C28CC FCMP S8, 0x0
	0x031C28D0 B.EQ 0x31C2914
	0x031C28D4 FCMP S0, 0x0
	0x031C28D8 B.HI 0x31C2914
	0x031C28DC ADRP X8, 0xF31000
	0x031C28E0 LDR X8, [X8 + 0x598]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3951]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2224]
	014 Move X21, [X21+2232]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2224]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2232]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3951], W8
	031 Move W8, 48
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setCanvasSizeDelta()

Disassembly:
	0x031C28E4 LDR X20, [X19 + 0x58]
	0x031C28E8 LDR X0, [X8]
	0x031C28EC LDR W8, [X0 + 0xE0]
	0x031C28F0 CBNZ W8, 0x31C28F8
	0x031C28F4 BL 0x1C16DFC
	0x031C28F8 MOV X0, X20
	0x031C28FC MOV X1, X31
	0x031C2900 MOV X2, X31
	0x031C2904 BL 0x3C3883C
	0x031C2908 TBZ X0, 0x0, 0x31C2930
	0x031C290C MOVZ W0, 0x1
	0x031C2910 B 0x31C2A8C
	0x031C2914 LDR X8, [X21]
	0x031C2918 MOV W0, W31
	0x031C291C LDR X8, [X8 + 0xB8]
	0x031C2920 LDR V1, [X8 + 0x4]
	0x031C2924 FSUB S0, S0, S1
	0x031C2928 STR S0, [X19 + 0x24]
	0x031C292C B 0x31C2A8C
	0x031C2930 LDRB W8, [X19 + 0x15]
	0x031C2934 CBNZ W8, 0x31C2940
	0x031C2938 MOV X0, X19
	0x031C293C BL 0x31C24C4
	0x031C2940 LDR X8, [X21]
	0x031C2944 LDR X8, [X8 + 0xB8]
	0x031C2948 LDR V0, [X8 + 0x4]
	0x031C294C FMUL S0, S8, S0
	0x031C2950 STR S0, [X8 + 0x4]
	0x031C2954 LDR V1, [X19 + 0x20]
	0x031C2958 LDR V2, [X19 + 0x28]
	0x031C295C LDR X8, [X19 + 0xA8]
	0x031C2960 FADD S0, S0, S1
	0x031C2964 FCMP S0, S2
	0x031C2968 FCSEL S1, S2, S0, GT
	0x031C296C FCMP S0, 0x0
	0x031C2970 FMOV S0, W31
	0x031C2974 FCSEL S0, S1, S0, PL
	0x031C2978 FDIV S1, S0, S2
	0x031C297C STP S1, S0, [X19 + 0x1C]
	0x031C2980 CBZ X8, 0x31C2AC8
	0x031C2984 LDR X9, [X8 + 0x18]
	0x031C2988 LDR X0, [X8 + 0x40]
	0x031C298C LDR X1, [X8 + 0x28]
	0x031C2990 BLR X9
	0x031C2994 LDRB W8, [X19 + 0x9C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3952]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2240]
	014 Move X21, [X21+2248]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2240]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2248]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3952], W8
	031 Move W8, 49
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: System.Void callback()

Disassembly:
	0x031C2998 CBZ W8, 0x31C29B8
	0x031C299C LDR X0, [X19 + 0xE8]
	0x031C29A0 CBZ X0, 0x31C2AC8
	0x031C29A4 LDR X8, [X21]
	0x031C29A8 LDR V1, [X19 + 0x1C]
	0x031C29AC LDR X8, [X8 + 0xB8]
	0x031C29B0 LDR V0, [X8]
	0x031C29B4 BL 0x31C2ACC
	0x031C29B8 LDR V0, [X19 + 0x20]
	0x031C29BC FCMP S8, 0x0
	0x031C29C0 B.LE 0x31C2A14
	0x031C29C4 LDR V1, [X19 + 0x28]
	0x031C29C8 FCMP S0, S1
	0x031C29CC B.GE 0x31C2A1C
	0x031C29D0 B 0x31C2A88
	0x031C29D4 LDRB W8, [X19 + 0x12]
	0x031C29D8 CBZ W8, 0x31C2A9C
	0x031C29DC LDR X20, [X19 + 0xE8]
	0x031C29E0 CBZ X20, 0x31C2AC8
	0x031C29E4 LDR W8, [X20 + 0x60]
	0x031C29E8 LDR X9, [X21]
	0x031C29EC FMOV S0, 1
	0x031C29F0 FMOV S1, W31
	0x031C29F4 CMP W8, 0x0
	0x031C29F8 LDR X8, [X9 + 0xB8]
	0x031C29FC FCSEL S0, S1, S0, EQ
	0x031C2A00 MOV X0, X31
	0x031C2A04 STR S0, [X8 + 0x4]
	0x031C2A08 BL 0x3C3C88C
	0x031C2A0C STR W0, [X20 + 0x60]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x121A000
	005 Move W8, [X20+3953]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF5E000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3953], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {37}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X19, 0xF5E000
	023 Move X19, [X19+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X19]
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X9, [X8+184]
	029 Move [X9+8], S0
	030 Move [X9+16], S1
	031 Move [X9+16], S2
	032 Move X8, [X8+184]
	033 Move V0, [X8+8]
	034 Move [X8], S0
	035 Move X30, [X31+32]
	036 Return 
	037 Call 0x1C17F20

Method: LTDescr setCallback()

Disassembly:
	0x031C2A10 B 0x31C28C8
	0x031C2A14 FCMP S0, 0x0
	0x031C2A18 B.HI 0x31C2A88
	0x031C2A1C LDR W8, [X19 + 0x38]
	0x031C2A20 LDR W9, [X19 + 0x98]
	0x031C2A24 SUB W8, W8, 0x1
	0x031C2A28 CMP W9, 0x25
	0x031C2A2C STR W8, [X19 + 0x38]
	0x031C2A30 B.NE 0x31C2A48
	0x031C2A34 FMOV S0, W31
	0x031C2A38 FSUB S0, S0, S8
	0x031C2A3C STR S0, [X19 + 0x40]
	0x031C2A40 CBNZ W8, 0x31C2A70
	0x031C2A44 B 0x31C290C
	0x031C2A48 ADRP X10, 0xF38000
	0x031C2A4C LDR X10, [X10 + 0x4B8]
	0x031C2A50 MOVZ W0, 0x1
	0x031C2A54 LDR X10, [X10]
	0x031C2A58 LDR X10, [X10 + 0xB8]
	0x031C2A5C LDR V0, [X10]
	0x031C2A60 STR S0, [X19 + 0x20]
	0x031C2A64 CBZ W8, 0x31C2A8C
	0x031C2A68 CMP W9, 0x23
	0x031C2A6C B.EQ 0x31C2A8C
	0x031C2A70 LDRB W8, [X19 + 0x18]
	0x031C2A74 CBZ W8, 0x31C2A88
	0x031C2A78 LDRB W8, [X19 + 0x16]
	0x031C2A7C CBZ W8, 0x31C2A88
	0x031C2A80 MOV X0, X19
	0x031C2A84 BL 0x31C2608
	0x031C2A88 MOV W0, W31
	0x031C2A8C LDP X20, X19, [X31 + 0x20]
	0x031C2A90 LDP X30, X21, [X31 + 0x10]
	0x031C2A94 LDR V8, [X31], #0x30
	0x031C2A98 RET
	0x031C2A9C LDRB W8, [X19 + 0x13]
	0x031C2AA0 CBZ W8, 0x31C28C8
	0x031C2AA4 LDR X0, [X20]
	0x031C2AA8 LDR W8, [X0 + 0xE0]
	0x031C2AAC CBNZ W8, 0x31C2AB8
	0x031C2AB0 BL 0x1C16DFC
	0x031C2AB4 LDR X0, [X20]
	0x031C2AB8 LDR X8, [X0 + 0xB8]
	0x031C2ABC LDR X9, [X21]
	0x031C2AC0 LDR V0, [X8 + 0x54]
	0x031C2AC4 B 0x31C28C0
	0x031C2AC8 BL 0x1C16F20
	0x031C2ACC STP D9, D8, [X31 - 0x30]!
	0x031C2AD0 STR X30, [X31 + 0x10]
	0x031C2AD4 STP X20, X19, [X31 + 0x20]
	0x031C2AD8 ADRP X20, 0x1219000
	0x031C2ADC LDRB W8, [X20 + 0xFFA]
	0x031C2AE0 MOV V9.16B, V1.16B
	0x031C2AE4 MOV V8.16B, V0.16B
	0x031C2AE8 MOV X19, X0
	0x031C2AEC TBNZ X8, 0x0, 0x31C2B04
	0x031C2AF0 ADRP X0, 0xF5D000
	0x031C2AF4 LDR X0, [X0 + 0x368]
	0x031C2AF8 BL 0x1C16CF4
	0x031C2AFC MOVZ W8, 0x1
	0x031C2B00 STRB W8, [X20 + 0xFFA]
	0x031C2B04 LDR X8, [X19 + 0x80]
	0x031C2B08 CBZ X8, 0x31C2B20
	0x031C2B0C LDR X9, [X8 + 0x18]
	0x031C2B10 LDR X0, [X8 + 0x40]
	0x031C2B14 LDR X1, [X8 + 0x28]
	0x031C2B18 MOV V0.16B, V8.16B
	0x031C2B1C BLR X9
	0x031C2B20 LDR X8, [X19 + 0x88]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x121A000
	009 Move X22, 0xF5E000
	010 Move W8, [X20+3954]
	011 Move X22, [X22+2256]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF5E000
	018 Move X0, [X0+1064]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5E000
	021 Move X0, [X0+2264]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2272]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2256]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3954], W8
	031 Move W8, 33
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X22]
	039 Move X8, [X0+184]
	040 Move X24, 0xF5E000
	041 Move X23, 0xF5E000
	042 Move X20, [X8+8]
	043 Move X24, [X24+1064]
	044 Move X23, [X23+2264]
	045 Compare X20, 0
	046 JumpIfNotEqual {65}
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X22]
	052 Move X8, [X0+184]
	053 Move X0, [X24]
	054 Move X21, [X8]
	055 Call 0x1C17F10
	056 Move X8, 0xF5E000
	057 Move X8, [X8+2272]
	058 Move X1, X21
	059 Move X20, X0
	060 Move X2, [X8]
	061 Call ActionMethodDelegate..ctor, X0, X1, X2
	062 Move X8, [X22]
	063 Move X8, [X8+184]
	064 Move [X8+8], X20
	065 Move [X19+176], X20
	066 Move X0, [X24]
	067 Call 0x1C17F10
	068 Move X2, [X23]
	069 Move X1, X19
	070 Move X20, X0
	071 Call ActionMethodDelegate..ctor, X0, X1, X2
	072 Move [X19+168], X20
	073 Move X0, X19
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Return X0

Method: LTDescr setValue3()

Disassembly:
	0x031C2B24 CBZ X8, 0x31C2B4C
	0x031C2B28 LDR X2, [X8 + 0x18]
	0x031C2B2C LDR X0, [X8 + 0x40]
	0x031C2B30 LDR X1, [X8 + 0x28]
	0x031C2B34 MOV V0.16B, V8.16B
	0x031C2B38 MOV V1.16B, V9.16B
	0x031C2B3C LDP X20, X19, [X31 + 0x20]
	0x031C2B40 LDR X30, [X31 + 0x10]
	0x031C2B44 LDP D9, D8, [X31], #0x30
	0x031C2B48 BR X2
	0x031C2B4C LDR X8, [X19 + 0x90]
	0x031C2B50 CBZ X8, 0x31C2B78
	0x031C2B54 LDR X1, [X19 + 0xD8]
	0x031C2B58 LDR X3, [X8 + 0x18]
	0x031C2B5C LDR X0, [X8 + 0x40]
	0x031C2B60 LDR X2, [X8 + 0x28]
	0x031C2B64 LDP X20, X19, [X31 + 0x20]
	0x031C2B68 LDR X30, [X31 + 0x10]
	0x031C2B6C MOV V0.16B, V8.16B
	0x031C2B70 LDP D9, D8, [X31], #0x30
	0x031C2B74 BR X3
	0x031C2B78 LDR X8, [X19 + 0xA8]
	0x031C2B7C CBZ X8, 0x31C2BB8
	0x031C2B80 ADRP X9, 0xF5D000
	0x031C2B84 LDR X9, [X9 + 0x368]
	0x031C2B88 LDR X1, [X19 + 0xD8]
	0x031C2B8C LDR X3, [X8 + 0x18]
	0x031C2B90 LDR X0, [X8 + 0x40]
	0x031C2B94 LDR X9, [X9]
	0x031C2B98 LDR X2, [X8 + 0x28]
	0x031C2B9C LDP X20, X19, [X31 + 0x20]
	0x031C2BA0 LDR X30, [X31 + 0x10]
	0x031C2BA4 LDR X9, [X9 + 0xB8]
	0x031C2BA8 LDP S0, S1, [X9 + 0x8]
	0x031C2BAC LDR V2, [X9 + 0x10]
	0x031C2BB0 LDP D9, D8, [X31], #0x30
	0x031C2BB4 BR X3
	0x031C2BB8 LDR X8, [X19 + 0xA0]
	0x031C2BBC CBZ X8, 0x31C2BF4
	0x031C2BC0 ADRP X9, 0xF5D000
	0x031C2BC4 LDR X9, [X9 + 0x368]
	0x031C2BC8 LDR X2, [X8 + 0x18]
	0x031C2BCC LDR X0, [X8 + 0x40]
	0x031C2BD0 LDR X1, [X8 + 0x28]
	0x031C2BD4 LDR X9, [X9]
	0x031C2BD8 LDP X20, X19, [X31 + 0x20]
	0x031C2BDC LDR X30, [X31 + 0x10]
	0x031C2BE0 LDR X9, [X9 + 0xB8]
	0x031C2BE4 LDP S0, S1, [X9 + 0x8]
	0x031C2BE8 LDR V2, [X9 + 0x10]
	0x031C2BEC LDP D9, D8, [X31], #0x30
	0x031C2BF0 BR X2
	0x031C2BF4 LDR X8, [X19 + 0x98]
	0x031C2BF8 CBZ X8, 0x31C2C20
	0x031C2BFC ADRP X9, 0xF5D000
	0x031C2C00 LDR X9, [X9 + 0x368]
	0x031C2C04 LDR X2, [X8 + 0x18]
	0x031C2C08 LDR X0, [X8 + 0x40]
	0x031C2C0C LDR X1, [X8 + 0x28]
	0x031C2C10 LDR X9, [X9]
	0x031C2C14 LDR X9, [X9 + 0xB8]
	0x031C2C18 LDP S0, S1, [X9 + 0x8]
	0x031C2C1C B 0x31C2B3C
	0x031C2C20 LDP X20, X19, [X31 + 0x20]
	0x031C2C24 LDR X30, [X31 + 0x10]
	0x031C2C28 LDP D9, D8, [X31], #0x30
	0x031C2C2C RET
	0x031C2C30 STR X30, [X31 - 0x10]!
	0x031C2C34 ADRP X8, 0xFFFFFFFFFD92B000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x121A000
	009 Move X22, 0xF5E000
	010 Move W8, [X20+3955]
	011 Move X22, [X22+2256]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0xF5E000
	018 Move X0, [X0+1064]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5E000
	021 Move X0, [X0+2264]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2280]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2256]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+3955], W8
	031 Move W8, 40
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {39}
	037 Call 0x1C17DFC
	038 Move X0, [X22]
	039 Move X8, [X0+184]
	040 Move X24, 0xF5E000
	041 Move X23, 0xF5E000
	042 Move X20, [X8+16]
	043 Move X24, [X24+1064]
	044 Move X23, [X23+2264]
	045 Compare X20, 0
	046 JumpIfNotEqual {65}
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {52}
	050 Call 0x1C17DFC
	051 Move X0, [X22]
	052 Move X8, [X0+184]
	053 Move X0, [X24]
	054 Move X21, [X8]
	055 Call 0x1C17F10
	056 Move X8, 0xF5E000
	057 Move X8, [X8+2280]
	058 Move X1, X21
	059 Move X20, X0
	060 Move X2, [X8]
	061 Call ActionMethodDelegate..ctor, X0, X1, X2
	062 Move X8, [X22]
	063 Move X8, [X8+184]
	064 Move [X8+16], X20
	065 Move [X19+176], X20
	066 Move X0, [X24]
	067 Call 0x1C17F10
	068 Move X2, [X23]
	069 Move X1, X19
	070 Move X20, X0
	071 Call ActionMethodDelegate..ctor, X0, X1, X2
	072 Move [X19+168], X20
	073 Move X0, X19
	074 Move X20, [X31+48]
	075 Move X19, [X31+56]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X30, [X31+64]
	081 Return X0

Method: LTDescr setMove()

Disassembly:
	0x031C2C38 LDR V4, [X8 + 0x648]
	0x031C2C3C LDR X8, [X0 + 0xE8]
	0x031C2C40 STR W31, [X0 + 0x60]
	0x031C2C44 STR S3, [X0 + 0x64]
	0x031C2C48 STR W31, [X0 + 0x68]
	0x031C2C4C STR D4, [X0 + 0x78]
	0x031C2C50 STR W31, [X0 + 0x80]
	0x031C2C54 CBZ X8, 0x31C2C68
	0x031C2C58 STP S0, S1, [X8 + 0x24]
	0x031C2C5C STR S2, [X8 + 0x2C]
	0x031C2C60 LDR X30, [X31], #0x10
	0x031C2C64 RET
	0x031C2C68 BL 0x1C16F20
	0x031C2C6C STR D10, [X31 - 0x60]!
	0x031C2C70 STP D9, D8, [X31 + 0x10]
	0x031C2C74 STP X30, X25, [X31 + 0x20]
	0x031C2C78 STP X24, X23, [X31 + 0x30]
	0x031C2C7C STP X22, X21, [X31 + 0x40]
	0x031C2C80 STP X20, X19, [X31 + 0x50]
	0x031C2C84 ADRP X21, 0x1219000
	0x031C2C88 LDRB W8, [X21 + 0xF83]
	0x031C2C8C MOV W20, W1
	0x031C2C90 MOV V8.16B, V0.16B
	0x031C2C94 MOV X19, X0
	0x031C2C98 TBNZ X8, 0x0, 0x31C2CF8
	0x031C2C9C ADRP X0, 0xF5D000
	0x031C2CA0 LDR X0, [X0 + 0x9B0]
	0x031C2CA4 BL 0x1C16CF4
	0x031C2CA8 ADRP X0, 0xF31000
	0x031C2CAC LDR X0, [X0 + 0xE00]
	0x031C2CB0 BL 0x1C16CF4
	0x031C2CB4 ADRP X0, 0xF31000
	0x031C2CB8 LDR X0, [X0 + 0xE18]
	0x031C2CBC BL 0x1C16CF4
	0x031C2CC0 ADRP X0, 0xF31000
	0x031C2CC4 LDR X0, [X0 + 0x598]
	0x031C2CC8 BL 0x1C16CF4
	0x031C2CCC ADRP X0, 0xF33000
	0x031C2CD0 LDR X0, [X0 + 0x638]
	0x031C2CD4 BL 0x1C16CF4
	0x031C2CD8 ADRP X0, 0xF5D000
	0x031C2CDC LDR X0, [X0 + 0x9B8]
	0x031C2CE0 BL 0x1C16CF4
	0x031C2CE4 ADRP X0, 0xF59000
	0x031C2CE8 LDR X0, [X0 + 0x2E0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3956]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2288]
	014 Move X21, [X21+2296]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2288]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2296]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3956], W8
	031 Move W8, 34
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveLocal()

Disassembly:
	0x031C2CEC BL 0x1C16CF4
	0x031C2CF0 MOVZ W8, 0x1
	0x031C2CF4 STRB W8, [X21 + 0xF83]
	0x031C2CF8 CBZ X19, 0x31C300C
	0x031C2CFC MOV X0, X19
	0x031C2D00 MOV X1, X31
	0x031C2D04 BL 0x3C32ECC
	0x031C2D08 CBZ X0, 0x31C300C
	0x031C2D0C ADRP X8, 0xF5D000
	0x031C2D10 LDR X8, [X8 + 0x9B0]
	0x031C2D14 ADRP X21, 0xF31000
	0x031C2D18 LDR X1, [X8]
	0x031C2D1C LDR X21, [X21 + 0x598]
	0x031C2D20 BL 0x21E52E4
	0x031C2D24 LDR X8, [X21]
	0x031C2D28 MOV X21, X0
	0x031C2D2C LDR W9, [X8 + 0xE0]
	0x031C2D30 CBNZ W9, 0x31C2D3C
	0x031C2D34 MOV X0, X8
	0x031C2D38 BL 0x1C16DFC
	0x031C2D3C MOV X0, X21
	0x031C2D40 MOV X1, X31
	0x031C2D44 MOV X2, X31
	0x031C2D48 BL 0x3C354F8
	0x031C2D4C TBZ X0, 0x0, 0x31C2E40
	0x031C2D50 CBZ X21, 0x31C300C
	0x031C2D54 MOV X0, X21
	0x031C2D58 MOV X1, X31
	0x031C2D5C BL 0x3C133DC
	0x031C2D60 CBZ X0, 0x31C300C
	0x031C2D64 LDR W8, [X0 + 0x18]
	0x031C2D68 MOV X21, X0
	0x031C2D6C CMP W8, 0x1
	0x031C2D70 B.LT 0x31C2E40
	0x031C2D74 ADRP X24, 0xF59000
	0x031C2D78 ADRP X25, 0xF5D000
	0x031C2D7C LDR X24, [X24 + 0x2E0]
	0x031C2D80 LDR X25, [X25 + 0x9B8]
	0x031C2D84 MOV W23, W31
	0x031C2D88 CMP W23, W8
	0x031C2D8C B.CS 0x31C3014
	0x031C2D90 ADD X8, X21, W23, 0x3, SXTW
	0x031C2D94 LDR X22, [X8 + 0x20]
	0x031C2D98 CBZ X22, 0x31C300C
	0x031C2D9C LDR X1, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3957]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2304]
	014 Move X21, [X21+2312]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2304]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2312]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3957], W8
	031 Move W8, 35
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setMoveToTransform()

Disassembly:
	0x031C2DA0 MOV X0, X22
	0x031C2DA4 MOV X2, X31
	0x031C2DA8 BL 0x3C14D4C
	0x031C2DAC TBZ X0, 0x0, 0x31C2DF8
	0x031C2DB0 MOV X0, X22
	0x031C2DB4 MOV X1, X31
	0x031C2DB8 BL 0x3C14794
	0x031C2DBC MOV X0, X22
	0x031C2DC0 MOV X1, X31
	0x031C2DC4 MOV V9.16B, V0.16B
	0x031C2DC8 BL 0x3C14794
	0x031C2DCC MOV X0, X22
	0x031C2DD0 MOV X1, X31
	0x031C2DD4 MOV V10.16B, V1.16B
	0x031C2DD8 BL 0x3C14794
	0x031C2DDC MOV X0, X22
	0x031C2DE0 MOV V0.16B, V9.16B
	0x031C2DE4 MOV V1.16B, V10.16B
	0x031C2DE8 MOV V3.16B, V8.16B
	0x031C2DEC MOV X1, X31
	0x031C2DF0 BL 0x3C148B4
	0x031C2DF4 B 0x31C2E30
	0x031C2DF8 LDR X1, [X25]
	0x031C2DFC MOV X0, X22
	0x031C2E00 MOV X2, X31
	0x031C2E04 BL 0x3C14D4C
	0x031C2E08 TBZ X0, 0x0, 0x31C2E30
	0x031C2E0C LDR X1, [X25]
	0x031C2E10 MOV X0, X22
	0x031C2E14 MOV X2, X31
	0x031C2E18 BL 0x3C14868
	0x031C2E1C LDR X1, [X25]
	0x031C2E20 MOV X0, X22
	0x031C2E24 MOV V3.16B, V8.16B
	0x031C2E28 MOV X2, X31
	0x031C2E2C BL 0x3C1498C
	0x031C2E30 LDR W8, [X21 + 0x18]
	0x031C2E34 ADD W23, W23, 0x1
	0x031C2E38 CMP W23, W8
	0x031C2E3C B.LT 0x31C2D88
	0x031C2E40 TBZ X20, 0x0, 0x31C2FF0
	0x031C2E44 MOV X0, X19
	0x031C2E48 MOV X1, X31
	0x031C2E4C BL 0x3C40C8C
	0x031C2E50 CMP W0, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3958]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2320]
	014 Move X21, [X21+2328]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2320]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2328]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3958], W8
	031 Move W8, 36
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setRotate()

Disassembly:
	0x031C2E54 B.LT 0x31C2FF0
	0x031C2E58 MOV X0, X19
	0x031C2E5C MOV X1, X31
	0x031C2E60 BL 0x3C4100C
	0x031C2E64 MOV X19, X0
	0x031C2E68 CBZ X0, 0x31C3018
	0x031C2E6C ADRP X20, 0xF31000
	0x031C2E70 ADRP X21, 0xF33000
	0x031C2E74 LDR X20, [X20 + 0xE18]
	0x031C2E78 LDR X21, [X21 + 0x638]
	0x031C2E7C LDR X8, [X19]
	0x031C2E80 LDR X1, [X20]
	0x031C2E84 LDRH W9, [X8 + 0x12E]
	0x031C2E88 CBZ X9, 0x31C2EAC
	0x031C2E8C LDR X10, [X8 + 0xB0]
	0x031C2E90 ADD X10, X10, 0x8
	0x031C2E94 LDUR X11, [X10 - 0x8]
	0x031C2E98 CMP X11, X1
	0x031C2E9C B.EQ 0x31C2EBC
	0x031C2EA0 SUBS X9, X9, 0x1
	0x031C2EA4 ADD X10, X10, 0x10
	0x031C2EA8 B.NE 0x31C2E94
	0x031C2EAC MOV X0, X19
	0x031C2EB0 MOV W2, W31
	0x031C2EB4 BL 0x1C5C788
	0x031C2EB8 B 0x31C2EC8
	0x031C2EBC LDRSW X9, [X10]
	0x031C2EC0 ADD X8, X8, X9, 0x4, LSL
	0x031C2EC4 ADD X0, X8, 0x138
	0x031C2EC8 LDP X8, X1, [X0]
	0x031C2ECC MOV X0, X19
	0x031C2ED0 BLR X8
	0x031C2ED4 TBZ X0, 0x0, 0x31C2F74
	0x031C2ED8 LDR X8, [X19]
	0x031C2EDC LDR X1, [X20]
	0x031C2EE0 LDRH W9, [X8 + 0x12E]
	0x031C2EE4 CBZ X9, 0x31C2F08
	0x031C2EE8 LDR X10, [X8 + 0xB0]
	0x031C2EEC ADD X10, X10, 0x8
	0x031C2EF0 LDUR X11, [X10 - 0x8]
	0x031C2EF4 CMP X11, X1
	0x031C2EF8 B.EQ 0x31C2F18
	0x031C2EFC SUBS X9, X9, 0x1
	0x031C2F00 ADD X10, X10, 0x10
	0x031C2F04 B.NE 0x31C2EF0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3959]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2336]
	014 Move X21, [X21+2344]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2336]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2344]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3959], W8
	031 Move W8, 37
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setRotateLocal()

Disassembly:
	0x031C2F08 MOVZ W2, 0x1
	0x031C2F0C MOV X0, X19
	0x031C2F10 BL 0x1C5C788
	0x031C2F14 B 0x31C2F28
	0x031C2F18 LDR W9, [X10]
	0x031C2F1C ADD W9, W9, 0x1
	0x031C2F20 ADD X8, X8, W9, 0x4, SXTW
	0x031C2F24 ADD X0, X8, 0x138
	0x031C2F28 LDP X8, X1, [X0]
	0x031C2F2C MOV X0, X19
	0x031C2F30 BLR X8
	0x031C2F34 CBZ X0, 0x31C2F64
	0x031C2F38 LDR X8, [X0]
	0x031C2F3C LDR X1, [X21]
	0x031C2F40 LDRB W10, [X8 + 0x130]
	0x031C2F44 LDRB W9, [X1 + 0x130]
	0x031C2F48 CMP W10, W9
	0x031C2F4C B.CC 0x31C3010
	0x031C2F50 LDR X8, [X8 + 0xC8]
	0x031C2F54 ADD X8, X8, X9, 0x3, LSL
	0x031C2F58 LDUR X8, [X8 - 0x8]
	0x031C2F5C CMP X8, X1
	0x031C2F60 B.NE 0x31C3010
	0x031C2F64 MOVZ W1, 0x1
	0x031C2F68 MOV V0.16B, V8.16B
	0x031C2F6C BL 0x31C2C6C
	0x031C2F70 B 0x31C2E7C
	0x031C2F74 MOV X20, X31
	0x031C2F78 ADRP X21, 0xF31000
	0x031C2F7C LDR X21, [X21 + 0xE00]
	0x031C2F80 MOV X0, X19
	0x031C2F84 LDR X1, [X21]
	0x031C2F88 BL 0x1C16E00
	0x031C2F8C CBZ X0, 0x31C2FEC
	0x031C2F90 LDR X8, [X0]
	0x031C2F94 LDR X1, [X21]
	0x031C2F98 MOV X19, X0
	0x031C2F9C LDRH W9, [X8 + 0x12E]
	0x031C2FA0 CBZ X9, 0x31C2FC4
	0x031C2FA4 LDR X10, [X8 + 0xB0]
	0x031C2FA8 ADD X10, X10, 0x8
	0x031C2FAC LDUR X11, [X10 - 0x8]
	0x031C2FB0 CMP X11, X1
	0x031C2FB4 B.EQ 0x31C2FD4
	0x031C2FB8 SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3960]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2352]
	014 Move X21, [X21+2360]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2352]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5E000
	027 Move X0, [X0+2360]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3960], W8
	031 Move W8, 38
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setScale()

Disassembly:
	0x031C2FBC ADD X10, X10, 0x10
	0x031C2FC0 B.NE 0x31C2FAC
	0x031C2FC4 MOV X0, X19
	0x031C2FC8 MOV W2, W31
	0x031C2FCC BL 0x1C5C788
	0x031C2FD0 B 0x31C2FE0
	0x031C2FD4 LDRSW X9, [X10]
	0x031C2FD8 ADD X8, X8, X9, 0x4, LSL
	0x031C2FDC ADD X0, X8, 0x138
	0x031C2FE0 LDP X8, X1, [X0]
	0x031C2FE4 MOV X0, X19
	0x031C2FE8 BLR X8
	0x031C2FEC CBNZ X20, 0x31C301C
	0x031C2FF0 LDP X20, X19, [X31 + 0x50]
	0x031C2FF4 LDP X22, X21, [X31 + 0x40]
	0x031C2FF8 LDP X24, X23, [X31 + 0x30]
	0x031C2FFC LDP X30, X25, [X31 + 0x20]
	0x031C3000 LDP D9, D8, [X31 + 0x10]
	0x031C3004 LDR V10, [X31], #0x60
	0x031C3008 RET
	0x031C300C BL 0x1C16F20
	0x031C3010 BL 0x1C171E0
	0x031C3014 BL 0x1C16F28
	0x031C3018 BL 0x1C16F20
	0x031C301C MOV X0, X20
	0x031C3020 BL 0x1C16F18
	0x031C3024 B 0x31C3034
	0x031C3028 B 0x31C3034
	0x031C302C B 0x31C3034
	0x031C3030 B 0x31C3034
	0x031C3034 MOV X21, X0
	0x031C3038 CMP W1, 0x1
	0x031C303C B.NE 0x31C3054
	0x031C3040 MOV X0, X21
	0x031C3044 BL 0x3EB1AD0
	0x031C3048 LDR X20, [X0]
	0x031C304C BL 0x3EB1AE0
	0x031C3050 B 0x31C2F78
	0x031C3054 MOV X20, X31
	0x031C3058 B 0x31C3060
	0x031C305C MOV X21, X0
	0x031C3060 ADRP X22, 0xF30000
	0x031C3064 LDR X22, [X22 + 0xE00]
	0x031C3068 LDR X1, [X22]
	0x031C306C MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x121A000
	008 Move X22, 0xF5E000
	009 Move X20, 0xF5E000
	010 Move X21, 0xF5E000
	011 Move W8, [X23+3961]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2368]
	014 Move X21, [X21+2376]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5E000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5E000
	024 Move X0, [X0+2368]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5D000
	027 Move X0, [X0+2376]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3961], W8
	031 Move W8, 39
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setGUIMove()

Disassembly:
	0x031C3070 BL 0x1C16E00
	0x031C3074 MOV X19, X0
	0x031C3078 CBZ X0, 0x31C30D4
	0x031C307C LDR X8, [X19]
	0x031C3080 LDR X1, [X22]
	0x031C3084 LDRH W9, [X8 + 0x12E]
	0x031C3088 CBZ X9, 0x31C30AC
	0x031C308C LDR X10, [X8 + 0xB0]
	0x031C3090 ADD X10, X10, 0x8
	0x031C3094 LDUR X11, [X10 - 0x8]
	0x031C3098 CMP X11, X1
	0x031C309C B.EQ 0x31C30BC
	0x031C30A0 SUBS X9, X9, 0x1
	0x031C30A4 ADD X10, X10, 0x10
	0x031C30A8 B.NE 0x31C3094
	0x031C30AC MOV X0, X19
	0x031C30B0 MOV W2, W31
	0x031C30B4 BL 0x1C5C788
	0x031C30B8 B 0x31C30C8
	0x031C30BC LDRSW X9, [X10]
	0x031C30C0 ADD X8, X8, X9, 0x4, LSL
	0x031C30C4 ADD X0, X8, 0x138
	0x031C30C8 LDP X8, X1, [X0]
	0x031C30CC MOV X0, X19
	0x031C30D0 BLR X8
	0x031C30D4 CBNZ X20, 0x31C30E0
	0x031C30D8 MOV X0, X21
	0x031C30DC BL 0x1D2C690
	0x031C30E0 MOV X0, X20
	0x031C30E4 BL 0x1C16F18
	0x031C30E8 BL 0x1990590
	0x031C30EC STP D11, D10, [X31 - 0x50]!
	0x031C30F0 STP D9, D8, [X31 + 0x10]
	0x031C30F4 STR X30, [X31 + 0x20]
	0x031C30F8 STP X22, X21, [X31 + 0x30]
	0x031C30FC STP X20, X19, [X31 + 0x40]
	0x031C3100 ADRP X21, 0x1218000
	0x031C3104 LDRB W8, [X21 + 0xF84]
	0x031C3108 MOV W20, W1
	0x031C310C MOV V8.16B, V3.16B
	0x031C3110 MOV V9.16B, V2.16B
	0x031C3114 MOV V10.16B, V1.16B
	0x031C3118 MOV V11.16B, V0.16B
	0x031C311C MOV X19, X0
	0x031C3120 TBNZ X8, 0x0, 0x31C3168

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1219000
	008 Move X22, 0xF5D000
	009 Move X20, 0xF5D000
	010 Move X21, 0xF5D000
	011 Move W8, [X23+3962]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2384]
	014 Move X21, [X21+2392]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5D000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5D000
	024 Move X0, [X0+2384]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5D000
	027 Move X0, [X0+2392]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3962], W8
	031 Move W8, 41
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setGUIMoveMargin()

Disassembly:
	0x031C3124 ADRP X0, 0xF5C000
	0x031C3128 LDR X0, [X0 + 0x9B0]
	0x031C312C BL 0x1C16CF4
	0x031C3130 ADRP X0, 0xF30000
	0x031C3134 LDR X0, [X0 + 0xE00]
	0x031C3138 BL 0x1C16CF4
	0x031C313C ADRP X0, 0xF30000
	0x031C3140 LDR X0, [X0 + 0xE18]
	0x031C3144 BL 0x1C16CF4
	0x031C3148 ADRP X0, 0xF30000
	0x031C314C LDR X0, [X0 + 0x598]
	0x031C3150 BL 0x1C16CF4
	0x031C3154 ADRP X0, 0xF32000
	0x031C3158 LDR X0, [X0 + 0x638]
	0x031C315C BL 0x1C16CF4
	0x031C3160 MOVZ W8, 0x1
	0x031C3164 STRB W8, [X21 + 0xF84]
	0x031C3168 CBZ X19, 0x31C33F8
	0x031C316C MOV X0, X19
	0x031C3170 MOV X1, X31
	0x031C3174 BL 0x3C32ECC
	0x031C3178 CBZ X0, 0x31C33F8
	0x031C317C ADRP X8, 0xF5C000
	0x031C3180 LDR X8, [X8 + 0x9B0]
	0x031C3184 ADRP X21, 0xF30000
	0x031C3188 LDR X1, [X8]
	0x031C318C LDR X21, [X21 + 0x598]
	0x031C3190 BL 0x21E52E4
	0x031C3194 LDR X8, [X21]
	0x031C3198 MOV X21, X0
	0x031C319C LDR W9, [X8 + 0xE0]
	0x031C31A0 CBNZ W9, 0x31C31AC
	0x031C31A4 MOV X0, X8
	0x031C31A8 BL 0x1C16DFC
	0x031C31AC MOV X0, X21
	0x031C31B0 MOV X1, X31
	0x031C31B4 MOV X2, X31
	0x031C31B8 BL 0x3C354F8
	0x031C31BC TBZ X0, 0x0, 0x31C3224
	0x031C31C0 CBZ X21, 0x31C33F8
	0x031C31C4 MOV X0, X21
	0x031C31C8 MOV X1, X31
	0x031C31CC BL 0x3C133DC
	0x031C31D0 CBZ X0, 0x31C33F8
	0x031C31D4 LDR W8, [X0 + 0x18]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1219000
	008 Move X22, 0xF5D000
	009 Move X20, 0xF5D000
	010 Move X21, 0xF5D000
	011 Move W8, [X23+3963]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2400]
	014 Move X21, [X21+2408]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5D000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5D000
	024 Move X0, [X0+2400]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5D000
	027 Move X0, [X0+2408]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3963], W8
	031 Move W8, 42
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setGUIScale()

Disassembly:
	0x031C31D8 MOV X21, X0
	0x031C31DC CMP W8, 0x1
	0x031C31E0 B.LT 0x31C3224
	0x031C31E4 MOV W22, W31
	0x031C31E8 CMP W22, W8
	0x031C31EC B.CS 0x31C3400
	0x031C31F0 ADD X8, X21, W22, 0x3, SXTW
	0x031C31F4 LDR X0, [X8 + 0x20]
	0x031C31F8 CBZ X0, 0x31C33F8
	0x031C31FC MOV V0.16B, V11.16B
	0x031C3200 MOV V1.16B, V10.16B
	0x031C3204 MOV V2.16B, V9.16B
	0x031C3208 MOV V3.16B, V8.16B
	0x031C320C MOV X1, X31
	0x031C3210 BL 0x3C148B4
	0x031C3214 LDR W8, [X21 + 0x18]
	0x031C3218 ADD W22, W22, 0x1
	0x031C321C CMP W22, W8
	0x031C3220 B.LT 0x31C31E8
	0x031C3224 TBZ X20, 0x0, 0x31C33E0
	0x031C3228 MOV X0, X19
	0x031C322C MOV X1, X31
	0x031C3230 BL 0x3C40C8C
	0x031C3234 CMP W0, 0x1
	0x031C3238 B.LT 0x31C33E0
	0x031C323C MOV X0, X19
	0x031C3240 MOV X1, X31
	0x031C3244 BL 0x3C4100C
	0x031C3248 MOV X19, X0
	0x031C324C CBZ X0, 0x31C3404
	0x031C3250 ADRP X20, 0xF30000
	0x031C3254 ADRP X21, 0xF32000
	0x031C3258 LDR X20, [X20 + 0xE18]
	0x031C325C LDR X21, [X21 + 0x638]
	0x031C3260 LDR X8, [X19]
	0x031C3264 LDR X1, [X20]
	0x031C3268 LDRH W9, [X8 + 0x12E]
	0x031C326C CBZ X9, 0x31C3290
	0x031C3270 LDR X10, [X8 + 0xB0]
	0x031C3274 ADD X10, X10, 0x8
	0x031C3278 LDUR X11, [X10 - 0x8]
	0x031C327C CMP X11, X1
	0x031C3280 B.EQ 0x31C32A0
	0x031C3284 SUBS X9, X9, 0x1
	0x031C3288 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1219000
	008 Move X22, 0xF5D000
	009 Move X20, 0xF5D000
	010 Move X21, 0xF5D000
	011 Move W8, [X23+3964]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2416]
	014 Move X21, [X21+2424]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5D000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5D000
	024 Move X0, [X0+2416]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5D000
	027 Move X0, [X0+2424]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3964], W8
	031 Move W8, 43
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setGUIAlpha()

Disassembly:
	0x031C328C B.NE 0x31C3278
	0x031C3290 MOV X0, X19
	0x031C3294 MOV W2, W31
	0x031C3298 BL 0x1C5C788
	0x031C329C B 0x31C32AC
	0x031C32A0 LDRSW X9, [X10]
	0x031C32A4 ADD X8, X8, X9, 0x4, LSL
	0x031C32A8 ADD X0, X8, 0x138
	0x031C32AC LDP X8, X1, [X0]
	0x031C32B0 MOV X0, X19
	0x031C32B4 BLR X8
	0x031C32B8 TBZ X0, 0x0, 0x31C3364
	0x031C32BC LDR X8, [X19]
	0x031C32C0 LDR X1, [X20]
	0x031C32C4 LDRH W9, [X8 + 0x12E]
	0x031C32C8 CBZ X9, 0x31C32EC
	0x031C32CC LDR X10, [X8 + 0xB0]
	0x031C32D0 ADD X10, X10, 0x8
	0x031C32D4 LDUR X11, [X10 - 0x8]
	0x031C32D8 CMP X11, X1
	0x031C32DC B.EQ 0x31C32FC
	0x031C32E0 SUBS X9, X9, 0x1
	0x031C32E4 ADD X10, X10, 0x10
	0x031C32E8 B.NE 0x31C32D4
	0x031C32EC MOVZ W2, 0x1
	0x031C32F0 MOV X0, X19
	0x031C32F4 BL 0x1C5C788
	0x031C32F8 B 0x31C330C
	0x031C32FC LDR W9, [X10]
	0x031C3300 ADD W9, W9, 0x1
	0x031C3304 ADD X8, X8, W9, 0x4, SXTW
	0x031C3308 ADD X0, X8, 0x138
	0x031C330C LDP X8, X1, [X0]
	0x031C3310 MOV X0, X19
	0x031C3314 BLR X8
	0x031C3318 CBZ X0, 0x31C3348
	0x031C331C LDR X8, [X0]
	0x031C3320 LDR X1, [X21]
	0x031C3324 LDRB W10, [X8 + 0x130]
	0x031C3328 LDRB W9, [X1 + 0x130]
	0x031C332C CMP W10, W9
	0x031C3330 B.CC 0x31C33FC
	0x031C3334 LDR X8, [X8 + 0xC8]
	0x031C3338 ADD X8, X8, X9, 0x3, LSL
	0x031C333C LDUR X8, [X8 - 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1219000
	008 Move X22, 0xF5D000
	009 Move X20, 0xF5D000
	010 Move X21, 0xF5D000
	011 Move W8, [X23+3965]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2432]
	014 Move X21, [X21+2440]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5D000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5D000
	024 Move X0, [X0+2432]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5D000
	027 Move X0, [X0+2440]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3965], W8
	031 Move W8, 44
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setGUIRotate()

Disassembly:
	0x031C3340 CMP X8, X1
	0x031C3344 B.NE 0x31C33FC
	0x031C3348 MOVZ W1, 0x1
	0x031C334C MOV V0.16B, V11.16B
	0x031C3350 MOV V1.16B, V10.16B
	0x031C3354 MOV V2.16B, V9.16B
	0x031C3358 MOV V3.16B, V8.16B
	0x031C335C BL 0x31C30EC
	0x031C3360 B 0x31C3260
	0x031C3364 MOV X20, X31
	0x031C3368 ADRP X21, 0xF30000
	0x031C336C LDR X21, [X21 + 0xE00]
	0x031C3370 MOV X0, X19
	0x031C3374 LDR X1, [X21]
	0x031C3378 BL 0x1C16E00
	0x031C337C CBZ X0, 0x31C33DC
	0x031C3380 LDR X8, [X0]
	0x031C3384 LDR X1, [X21]
	0x031C3388 MOV X19, X0
	0x031C338C LDRH W9, [X8 + 0x12E]
	0x031C3390 CBZ X9, 0x31C33B4
	0x031C3394 LDR X10, [X8 + 0xB0]
	0x031C3398 ADD X10, X10, 0x8
	0x031C339C LDUR X11, [X10 - 0x8]
	0x031C33A0 CMP X11, X1
	0x031C33A4 B.EQ 0x31C33C4
	0x031C33A8 SUBS X9, X9, 0x1
	0x031C33AC ADD X10, X10, 0x10
	0x031C33B0 B.NE 0x31C339C
	0x031C33B4 MOV X0, X19
	0x031C33B8 MOV W2, W31
	0x031C33BC BL 0x1C5C788
	0x031C33C0 B 0x31C33D0
	0x031C33C4 LDRSW X9, [X10]
	0x031C33C8 ADD X8, X8, X9, 0x4, LSL
	0x031C33CC ADD X0, X8, 0x138
	0x031C33D0 LDP X8, X1, [X0]
	0x031C33D4 MOV X0, X19
	0x031C33D8 BLR X8
	0x031C33DC CBNZ X20, 0x31C3408
	0x031C33E0 LDP X20, X19, [X31 + 0x40]
	0x031C33E4 LDP X22, X21, [X31 + 0x30]
	0x031C33E8 LDR X30, [X31 + 0x20]
	0x031C33EC LDP D9, D8, [X31 + 0x10]
	0x031C33F0 LDP D11, D10, [X31], #0x50

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1219000
	008 Move X22, 0xF5D000
	009 Move X20, 0xF5D000
	010 Move X21, 0xF5D000
	011 Move W8, [X23+3966]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2448]
	014 Move X21, [X21+2456]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5D000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5D000
	024 Move X0, [X0+2448]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5D000
	027 Move X0, [X0+2456]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3966], W8
	031 Move W8, 45
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setDelayedSound()

Disassembly:
	0x031C33F4 RET
	0x031C33F8 BL 0x1C16F20
	0x031C33FC BL 0x1C171E0
	0x031C3400 BL 0x1C16F28
	0x031C3404 BL 0x1C16F20
	0x031C3408 MOV X0, X20
	0x031C340C BL 0x1C16F18
	0x031C3410 B 0x31C3420
	0x031C3414 B 0x31C3420
	0x031C3418 B 0x31C3420
	0x031C341C B 0x31C3420
	0x031C3420 MOV X21, X0
	0x031C3424 CMP W1, 0x1
	0x031C3428 B.NE 0x31C3440
	0x031C342C MOV X0, X21
	0x031C3430 BL 0x3EB1AD0
	0x031C3434 LDR X20, [X0]
	0x031C3438 BL 0x3EB1AE0
	0x031C343C B 0x31C3368
	0x031C3440 MOV X20, X31
	0x031C3444 B 0x31C344C
	0x031C3448 MOV X21, X0
	0x031C344C ADRP X22, 0xF30000
	0x031C3450 LDR X22, [X22 + 0xE00]
	0x031C3454 LDR X1, [X22]
	0x031C3458 MOV X0, X19
	0x031C345C BL 0x1C16E00
	0x031C3460 MOV X19, X0
	0x031C3464 CBZ X0, 0x31C34C0
	0x031C3468 LDR X8, [X19]
	0x031C346C LDR X1, [X22]
	0x031C3470 LDRH W9, [X8 + 0x12E]
	0x031C3474 CBZ X9, 0x31C3498
	0x031C3478 LDR X10, [X8 + 0xB0]
	0x031C347C ADD X10, X10, 0x8
	0x031C3480 LDUR X11, [X10 - 0x8]
	0x031C3484 CMP X11, X1
	0x031C3488 B.EQ 0x31C34A8
	0x031C348C SUBS X9, X9, 0x1
	0x031C3490 ADD X10, X10, 0x10
	0x031C3494 B.NE 0x31C3480
	0x031C3498 MOV X0, X19
	0x031C349C MOV W2, W31
	0x031C34A0 BL 0x1C5C788
	0x031C34A4 B 0x31C34B4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x1219000
	008 Move X22, 0xF5D000
	009 Move X20, 0xF5D000
	010 Move X21, 0xF5D000
	011 Move W8, [X23+3967]
	012 Move X22, [X22+1064]
	013 Move X20, [X20+2464]
	014 Move X21, [X21+2264]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0xF5D000
	021 Move X0, [X0+1064]
	022 Call 0x1C17CF4
	023 Move X0, 0xF5D000
	024 Move X0, [X0+2464]
	025 Call 0x1C17CF4
	026 Move X0, 0xF5D000
	027 Move X0, [X0+2264]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+3967], W8
	031 Move W8, 46
	032 Move [X19+144], W8
	033 Move X0, [X22]
	034 Call 0x1C17F10
	035 Move X2, [X20]
	036 Move X1, X19
	037 Move X20, X0
	038 Call ActionMethodDelegate..ctor, X0, X1, X2
	039 Move [X19+176], X20
	040 Move X0, [X22]
	041 Call 0x1C17F10
	042 Move X2, [X21]
	043 Move X1, X19
	044 Move X20, X0
	045 Call ActionMethodDelegate..ctor, X0, X1, X2
	046 Move [X19+168], X20
	047 Move X0, X19
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Move X23, [X31+56]
	054 Return X0

Method: LTDescr setTarget(UnityEngine.Transform trans)

Disassembly:
	0x031C34A8 LDRSW X9, [X10]
	0x031C34AC ADD X8, X8, X9, 0x4, LSL
	0x031C34B0 ADD X0, X8, 0x138
	0x031C34B4 LDP X8, X1, [X0]
	0x031C34B8 MOV X0, X19
	0x031C34BC BLR X8
	0x031C34C0 CBNZ X20, 0x31C34CC

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move [X8+16], X1
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void init()

Disassembly:
	0x031C34C4 MOV X0, X21
	0x031C34C8 BL 0x1D2C690
	0x031C34CC MOV X0, X20
	0x031C34D0 BL 0x1C16F18
	0x031C34D4 BL 0x1990590
	0x031C34D8 STR D8, [X31 - 0x60]!
	0x031C34DC STR X30, [X31 + 0x8]
	0x031C34E0 STP X28, X27, [X31 + 0x10]
	0x031C34E4 STP X26, X25, [X31 + 0x20]
	0x031C34E8 STP X24, X23, [X31 + 0x30]
	0x031C34EC STP X22, X21, [X31 + 0x40]
	0x031C34F0 STP X20, X19, [X31 + 0x50]
	0x031C34F4 ADRP X21, 0x1218000
	0x031C34F8 LDRB W8, [X21 + 0xF85]
	0x031C34FC MOV W20, W1
	0x031C3500 MOV V8.16B, V0.16B
	0x031C3504 MOV X19, X0
	0x031C3508 TBNZ X8, 0x0, 0x31C355C
	0x031C350C ADRP X0, 0xF5C000
	0x031C3510 LDR X0, [X0 + 0x9C0]
	0x031C3514 BL 0x1C16CF4
	0x031C3518 ADRP X0, 0xF5C000
	0x031C351C LDR X0, [X0 + 0x9C8]
	0x031C3520 BL 0x1C16CF4
	0x031C3524 ADRP X0, 0xF30000
	0x031C3528 LDR X0, [X0 + 0xE00]
	0x031C352C BL 0x1C16CF4
	0x031C3530 ADRP X0, 0xF30000
	0x031C3534 LDR X0, [X0 + 0xE18]
	0x031C3538 BL 0x1C16CF4
	0x031C353C ADRP X0, 0xF30000
	0x031C3540 LDR X0, [X0 + 0x598]
	0x031C3544 BL 0x1C16CF4
	0x031C3548 ADRP X0, 0xF57000
	0x031C354C LDR X0, [X0 + 0xC70]
	0x031C3550 BL 0x1C16CF4
	0x031C3554 MOVZ W8, 0x1
	0x031C3558 STRB W8, [X21 + 0xF85]
	0x031C355C CBZ X19, 0x31C3814
	0x031C3560 MOV X0, X19
	0x031C3564 MOV X1, X31
	0x031C3568 BL 0x3C40C8C
	0x031C356C CMP W0, 0x1
	0x031C3570 B.LT 0x31C37E0
	0x031C3574 ADRP X23, 0xF30000
	0x031C3578 LDR X23, [X23 + 0xE00]
	0x031C357C MOV X0, X19
	0x031C3580 MOV X1, X31
	0x031C3584 BL 0x3C4100C
	0x031C3588 MOV X19, X0
	0x031C358C CBZ X0, 0x31C3818
	0x031C3590 ADRP X24, 0xF30000
	0x031C3594 ADRP X25, 0xF57000
	0x031C3598 ADRP X26, 0xF5C000
	0x031C359C ADRP X27, 0xF30000
	0x031C35A0 ADRP X28, 0xF5C000
	0x031C35A4 LDR X24, [X24 + 0xE18]
	0x031C35A8 LDR X25, [X25 + 0xC70]
	0x031C35AC LDR X26, [X26 + 0x9C0]
	0x031C35B0 LDR X27, [X27 + 0x598]
	0x031C35B4 LDR X28, [X28 + 0x9C8]
	0x031C35B8 ADD W20, W20, 0x1
	0x031C35BC LDR X8, [X19]
	0x031C35C0 LDR X1, [X24]
	0x031C35C4 LDRH W9, [X8 + 0x12E]
	0x031C35C8 CBZ X9, 0x31C35EC
	0x031C35CC LDR X10, [X8 + 0xB0]
	0x031C35D0 ADD X10, X10, 0x8
	0x031C35D4 LDUR X11, [X10 - 0x8]
	0x031C35D8 CMP X11, X1
	0x031C35DC B.EQ 0x31C35FC
	0x031C35E0 SUBS X9, X9, 0x1
	0x031C35E4 ADD X10, X10, 0x10
	0x031C35E8 B.NE 0x31C35D4
	0x031C35EC MOV X0, X19
	0x031C35F0 MOV W2, W31
	0x031C35F4 BL 0x1C5C788
	0x031C35F8 B 0x31C3608
	0x031C35FC LDRSW X9, [X10]
	0x031C3600 ADD X8, X8, X9, 0x4, LSL
	0x031C3604 ADD X0, X8, 0x138

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1219000
	005 Move W8, [X20+3968]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF38000
	012 Move X0, [X0+1208]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3968], W8
	016 Move W8, [X19+17]
	017 Move W9, 1
	018 Move [X19+21], W9
	019 Compare W8, 0
	020 JumpIfNotEqual {24}
	021 Move W8, [X19+19]
	022 Compare W8, 0
	023 JumpIfEqual {91}
	024 Move W8, W31
	025 Move W9, [X19+18]
	026 Move [X19+20], W8
	027 Compare W9, 0
	028 JumpIfEqual {35}
	029 Move X20, [X19+232]
	030 Move X0, X31
	031 Call Time.get_frameCount
	032 Compare X20, 0
	033 JumpIfEqual {93}
	034 Move [X20+96], W0
	035 Move V0, [X19+40]
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move X8, 0xF38000
	038 Move X8, [X8+1208]
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move V0, [X8]
	042 Move [X19+40], S0
	043 Move X8, [X19+176]
	044 Compare X8, 0
	045 JumpIfEqual {50}
	046 Move X9, [X8+24]
	047 Move X0, [X8+64]
	048 Move X1, [X8+40]
	049 NotImplemented "Instruction BLR not yet implemented."
	050 NotImplemented "Instruction LDUR not yet implemented."
	051 Move V1, [X19+116]
	052 Move V2, [X19+96]
	053 Move V3, [X19+104]
	054 Move X8, [X19+232]
	055 NotImplemented "Instruction MOVI not yet implemented."
	056 Move S5, 0.5
	057 Subtract V0, V0, V2
	058 Subtract S1, S1, S3
	059 Move [X19+120], D0
	060 Move [X19+128], S1
	061 NotImplemented "Instruction INVALID not yet implemented."
	062 Multiply S1, S1, S5
	063 Move [X19+132], D0
	064 Move [X19+140], S1
	065 Compare X8, 0
	066 JumpIfEqual {93}
	067 Move X8, [X8+224]
	068 Compare X8, 0
	069 JumpIfEqual {74}
	070 Move X9, [X8+24]
	071 Move X0, [X8+64]
	072 Move X1, [X8+40]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move W8, [X19+25]
	075 Compare W8, 0
	076 JumpIfEqual {79}
	077 Move X0, X19
	078 Call LTDescr.callOnCompletes, X0
	079 Move V0, [X19+44]
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X30, [X31+32]
	084 Return 
	085 Move X0, X19
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+32]
	089 Call LTDescr.initSpeed, X0
	090 Return 
	091 Move W8, [X19+18]
	092 Xor W8, W8, 1
	093 Call 0x1C17F20

Method: System.Void initSpeed()

Disassembly:
	0x031C3700 MOV X22, X0
	0x031C3704 LDR X0, [X27]
	0x031C3708 LDR W8, [X0 + 0xE0]
	0x031C370C CBNZ W8, 0x31C3714
	0x031C3710 BL 0x1C16DFC
	0x031C3714 MOV X0, X22
	0x031C3718 MOV X1, X31
	0x031C371C MOV X2, X31
	0x031C3720 BL 0x3C354F8
	0x031C3724 TBZ X0, 0x0, 0x31C3758
	0x031C3728 CBZ X22, 0x31C3810
	0x031C372C LDR X8, [X22]
	0x031C3730 LDR X1, [X8 + 0x2A0]
	0x031C3734 LDR X9, [X8 + 0x298]
	0x031C3738 MOV X0, X22
	0x031C373C BLR X9
	0x031C3740 LDR X8, [X22]
	0x031C3744 LDR X1, [X8 + 0x2B0]
	0x031C3748 LDR X9, [X8 + 0x2A8]
	0x031C374C MOV X0, X22
	0x031C3750 MOV V3.16B, V8.16B
	0x031C3754 BLR X9
	0x031C3758 MOV X0, X21
	0x031C375C MOV V0.16B, V8.16B
	0x031C3760 MOV W1, W20
	0x031C3764 BL 0x31C34D8
	0x031C3768 B 0x31C35BC
	0x031C376C MOV X21, X31
	0x031C3770 LDR X1, [X23]
	0x031C3774 MOV X0, X19
	0x031C3778 BL 0x1C16E00
	0x031C377C CBZ X0, 0x31C37DC
	0x031C3780 LDR X8, [X0]
	0x031C3784 LDR X1, [X23]
	0x031C3788 MOV X19, X0
	0x031C378C LDRH W9, [X8 + 0x12E]
	0x031C3790 CBZ X9, 0x31C37B4
	0x031C3794 LDR X10, [X8 + 0xB0]
	0x031C3798 ADD X10, X10, 0x8
	0x031C379C LDUR X11, [X10 - 0x8]
	0x031C37A0 CMP X11, X1
	0x031C37A4 B.EQ 0x31C37C4
	0x031C37A8 SUBS X9, X9, 0x1
	0x031C37AC ADD X10, X10, 0x10
	0x031C37B0 B.NE 0x31C379C
	0x031C37B4 MOV X0, X19
	0x031C37B8 MOV W2, W31
	0x031C37BC BL 0x1C5C788
	0x031C37C0 B 0x31C37D0
	0x031C37C4 LDRSW X9, [X10]
	0x031C37C8 ADD X8, X8, X9, 0x4, LSL
	0x031C37CC ADD X0, X8, 0x138
	0x031C37D0 LDP X8, X1, [X0]
	0x031C37D4 MOV X0, X19
	0x031C37D8 BLR X8
	0x031C37DC CBNZ X21, 0x31C381C
	0x031C37E0 LDP X20, X19, [X31 + 0x50]
	0x031C37E4 LDP X22, X21, [X31 + 0x40]
	0x031C37E8 LDP X24, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W8, [X0+144]
	009 Move X19, X0
	010 Subtract W9, W8, 8
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Subtract W8, W8, 6
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move X8, [X19+232]
	015 Compare X8, 0
	016 JumpIfEqual {67}
	017 Move X8, [X8+72]
	018 Compare X8, 0
	019 JumpIfEqual {67}
	020 Move V0, [X8+24]
	021 Move X8, [X19+232]
	022 Compare X8, 0
	023 JumpIfEqual {67}
	024 Move X8, [X8+80]
	025 Compare X8, 0
	026 JumpIfEqual {67}
	027 Move V0, [X8+16]
	028 Move X20, 0x1216000
	029 Move V8, [X19+108]
	030 Move V9, [X19+112]
	031 Move V10, [X19+96]
	032 Move W8, [X20+1924]
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 Compare W8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, 0xF31000
	037 Move X0, [X0+1448]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X20+1924], W8
	041 Move X8, 0xF31000
	042 Move X8, [X8+1448]
	043 Subtract S10, S8, S10
	044 Subtract V8, V9, V11
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Multiply S0, S10, S10
	051 NotImplemented "Instruction INVALID not yet implemented."
	052 Add S0, S0, S1
	053 Move S1, V1.S[1]
	054 Add S0, S0, S1
	055 NotImplemented "Instruction FSQRT not yet implemented."
	056 Move V1, [X19+44]
	057 Move X30, [X31+32]
	058 Move D9, [X31+16]
	059 Move D8, [X31+24]
	060 NotImplemented "Instruction FDIV not yet implemented."
	061 Move [X19+40], S0
	062 Move X20, [X31+48]
	063 Move X19, [X31+56]
	064 Move D11, [X31+64]
	065 Move D10, [X31+72]
	066 Return 
	067 Call 0x1C17F20

Method: LTDescr updateNow()

Disassembly:
	0x031C37EC LDP X26, X25, [X31 + 0x20]
	0x031C37F0 LDP X28, X27, [X31 + 0x10]
	0x031C37F4 LDR X30, [X31 + 0x8]
	0x031C37F8 LDR V8, [X31], #0x60
	0x031C37FC RET
	0x031C3800 MOV X0, X21

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call LTDescr.updateInternal, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Boolean updateInternal()

Disassembly:
	0x031C3804 BL 0x1C171E0
	0x031C3808 BL 0x1C16F20
	0x031C380C BL 0x1C16F20
	0x031C3810 BL 0x1C16F20
	0x031C3814 BL 0x1C16F20
	0x031C3818 BL 0x1C16F20
	0x031C381C MOV X0, X21
	0x031C3820 BL 0x1C16F18
	0x031C3824 B 0x31C3868
	0x031C3828 B 0x31C3868
	0x031C382C B 0x31C3868
	0x031C3830 B 0x31C3868
	0x031C3834 B 0x31C3868
	0x031C3838 B 0x31C3868
	0x031C383C B 0x31C3868
	0x031C3840 B 0x31C3868
	0x031C3844 B 0x31C3868
	0x031C3848 B 0x31C3868
	0x031C384C B 0x31C3868
	0x031C3850 B 0x31C3868
	0x031C3854 B 0x31C3868
	0x031C3858 B 0x31C3868
	0x031C385C B 0x31C3868
	0x031C3860 B 0x31C3868
	0x031C3864 B 0x31C3868
	0x031C3868 MOV X20, X0
	0x031C386C CMP W1, 0x1
	0x031C3870 B.NE 0x31C3888
	0x031C3874 MOV X0, X20
	0x031C3878 BL 0x3EB1AD0
	0x031C387C LDR X21, [X0]
	0x031C3880 BL 0x3EB1AE0
	0x031C3884 B 0x31C3770
	0x031C3888 MOV X21, X31
	0x031C388C B 0x31C3894
	0x031C3890 MOV X20, X0
	0x031C3894 LDR X1, [X23]
	0x031C3898 MOV X0, X19
	0x031C389C BL 0x1C16E00
	0x031C38A0 MOV X19, X0
	0x031C38A4 CBZ X0, 0x31C3900
	0x031C38A8 LDR X8, [X19]
	0x031C38AC LDR X1, [X23]
	0x031C38B0 LDRH W9, [X8 + 0x12E]
	0x031C38B4 CBZ X9, 0x31C38D8
	0x031C38B8 LDR X10, [X8 + 0xB0]
	0x031C38BC ADD X10, X10, 0x8
	0x031C38C0 LDUR X11, [X10 - 0x8]
	0x031C38C4 CMP X11, X1
	0x031C38C8 B.EQ 0x31C38E8
	0x031C38CC SUBS X9, X9, 0x1
	0x031C38D0 ADD X10, X10, 0x10
	0x031C38D4 B.NE 0x31C38C0
	0x031C38D8 MOV X0, X19
	0x031C38DC MOV W2, W31
	0x031C38E0 BL 0x1C5C788
	0x031C38E4 B 0x31C38F4
	0x031C38E8 LDRSW X9, [X10]
	0x031C38EC ADD X8, X8, X9, 0x4, LSL
	0x031C38F0 ADD X0, X8, 0x138
	0x031C38F4 LDP X8, X1, [X0]
	0x031C38F8 MOV X0, X19
	0x031C38FC BLR X8
	0x031C3900 CBNZ X21, 0x31C390C
	0x031C3904 MOV X0, X20
	0x031C3908 BL 0x1D2C690
	0x031C390C MOV X0, X21
	0x031C3910 BL 0x1C16F18
	0x031C3914 BL 0x1990590
	0x031C3918 SUB X31, X31, 0x70
	0x031C391C STR D10, [X31 + 0x10]
	0x031C3920 STP D9, D8, [X31 + 0x18]
	0x031C3924 STR X30, [X31 + 0x28]
	0x031C3928 STP X26, X25, [X31 + 0x30]
	0x031C392C STP X24, X23, [X31 + 0x40]
	0x031C3930 STP X22, X21, [X31 + 0x50]
	0x031C3934 STP X20, X19, [X31 + 0x60]
	0x031C3938 ADRP X20, 0x1218000
	0x031C393C LDRB W8, [X20 + 0xF86]
	0x031C3940 MOV V8.16B, V0.16B
	0x031C3944 MOV X19, X0
	0x031C3948 TBNZ X8, 0x0, 0x31C3990
	0x031C394C ADRP X0, 0xF5C000
	0x031C3950 LDR X0, [X0 + 0x9D0]
	0x031C3954 BL 0x1C16CF4
	0x031C3958 ADRP X0, 0xF30000
	0x031C395C LDR X0, [X0 + 0xE00]
	0x031C3960 BL 0x1C16CF4
	0x031C3964 ADRP X0, 0xF30000
	0x031C3968 LDR X0, [X0 + 0xE18]
	0x031C396C BL 0x1C16CF4
	0x031C3970 ADRP X0, 0xF30000
	0x031C3974 LDR X0, [X0 + 0x598]
	0x031C3978 BL 0x1C16CF4
	0x031C397C ADRP X0, 0xF32000
	0x031C3980 LDR X0, [X0 + 0x638]
	0x031C3984 BL 0x1C16CF4
	0x031C3988 MOVZ W8, 0x1
	0x031C398C STRB W8, [X20 + 0xF86]
	0x031C3990 CBZ X19, 0x31C3C04
	0x031C3994 MOV X0, X19
	0x031C3998 MOV X1, X31
	0x031C399C BL 0x3C40C8C
	0x031C39A0 CMP W0, 0x1
	0x031C39A4 B.LT 0x31C3BD0
	0x031C39A8 ADRP X22, 0xF30000
	0x031C39AC LDR X22, [X22 + 0xE00]
	0x031C39B0 MOV X0, X19
	0x031C39B4 MOV X1, X31
	0x031C39B8 BL 0x3C4100C
	0x031C39BC MOV X19, X0
	0x031C39C0 CBZ X0, 0x31C3C08
	0x031C39C4 ADRP X23, 0xF30000
	0x031C39C8 ADRP X24, 0xF32000
	0x031C39CC ADRP X25, 0xF5C000
	0x031C39D0 ADRP X26, 0xF30000
	0x031C39D4 LDR X23, [X23 + 0xE18]
	0x031C39D8 LDR X24, [X24 + 0x638]
	0x031C39DC LDR X25, [X25 + 0x9D0]
	0x031C39E0 LDR X26, [X26 + 0x598]
	0x031C39E4 LDR X8, [X19]
	0x031C39E8 LDR X1, [X23]
	0x031C39EC LDRH W9, [X8 + 0x12E]
	0x031C39F0 CBZ X9, 0x31C3A14
	0x031C39F4 LDR X10, [X8 + 0xB0]
	0x031C39F8 ADD X10, X10, 0x8
	0x031C39FC LDUR X11, [X10 - 0x8]
	0x031C3A00 CMP X11, X1
	0x031C3A04 B.EQ 0x31C3A24
	0x031C3A08 SUBS X9, X9, 0x1
	0x031C3A0C ADD X10, X10, 0x10
	0x031C3A10 B.NE 0x31C39FC
	0x031C3A14 MOV X0, X19
	0x031C3A18 MOV W2, W31
	0x031C3A1C BL 0x1C5C788
	0x031C3A20 B 0x31C3A30
	0x031C3A24 LDRSW X9, [X10]
	0x031C3A28 ADD X8, X8, X9, 0x4, LSL
	0x031C3A2C ADD X0, X8, 0x138
	0x031C3A30 LDP X8, X1, [X0]
	0x031C3A34 MOV X0, X19
	0x031C3A38 BLR X8
	0x031C3A3C TBZ X0, 0x0, 0x31C3B5C
	0x031C3A40 LDR X8, [X19]
	0x031C3A44 LDR X1, [X23]
	0x031C3A48 LDRH W9, [X8 + 0x12E]
	0x031C3A4C CBZ X9, 0x31C3A70
	0x031C3A50 LDR X10, [X8 + 0xB0]
	0x031C3A54 ADD X10, X10, 0x8
	0x031C3A58 LDUR X11, [X10 - 0x8]
	0x031C3A5C CMP X11, X1
	0x031C3A60 B.EQ 0x31C3A80
	0x031C3A64 SUBS X9, X9, 0x1
	0x031C3A68 ADD X10, X10, 0x10
	0x031C3A6C B.NE 0x31C3A58
	0x031C3A70 MOVZ W2, 0x1
	0x031C3A74 MOV X0, X19
	0x031C3A78 BL 0x1C5C788
	0x031C3A7C B 0x31C3A90
	0x031C3A80 LDR W9, [X10]
	0x031C3A84 ADD W9, W9, 0x1
	0x031C3A88 ADD X8, X8, W9, 0x4, SXTW
	0x031C3A8C ADD X0, X8, 0x138
	0x031C3A90 LDP X8, X1, [X0]
	0x031C3A94 MOV X0, X19
	0x031C3A98 BLR X8
	0x031C3A9C MOV X20, X0
	0x031C3AA0 CBZ X0, 0x31C3BFC
	0x031C3AA4 LDR X8, [X20]
	0x031C3AA8 LDR X1, [X24]
	0x031C3AAC LDRB W10, [X8 + 0x130]
	0x031C3AB0 LDRB W9, [X1 + 0x130]
	0x031C3AB4 CMP W10, W9
	0x031C3AB8 B.CC 0x31C3BF4
	0x031C3ABC LDR X8, [X8 + 0xC8]
	0x031C3AC0 ADD X8, X8, X9, 0x3, LSL
	0x031C3AC4 LDUR X8, [X8 - 0x8]
	0x031C3AC8 CMP X8, X1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1219000
	007 Move W8, [X20+3969]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0xF5D000
	014 Move X0, [X0+872]
	015 Call 0x1C17CF4
	016 Move X0, 0xF33000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0xF38000
	020 Move X0, [X0+1208]
	021 Call 0x1C17CF4
	022 Move X0, 0xF31000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+3969], W8
	027 Move X20, 0xF33000
	028 Move X21, 0xF5D000
	029 Move W8, [X19+20]
	030 Move V8, [X19+64]
	031 Move X20, [X20+1448]
	032 Move X21, [X21+872]
	033 Compare W8, 0
	034 JumpIfEqual {44}
	035 Move X0, [X20]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {41}
	039 Call 0x1C17DFC
	040 Move X0, [X20]
	041 Move X8, [X0+184]
	042 Move X9, [X21]
	043 Move V0, [X8+88]
	044 Move W8, [X19+17]
	045 Compare W8, 0
	046 JumpIfEqual {127}
	047 Move X0, [X20]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X20]
	053 Move X8, [X0+184]
	054 Move X9, [X21]
	055 Move V0, [X8+80]
	056 Move X8, [X9+184]
	057 Move [X8+4], S0
	058 Move V0, [X19+36]
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 NotImplemented "Instruction FCMP not yet implemented."
	061 Move X8, 0xF31000
	062 Move X8, [X8+1432]
	063 Move X20, [X19+88]
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X20
	070 Move X1, X31
	071 Move X2, X31
	072 Call Object.op_Equality, X0, X1
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {84}
	077 Move W0, 1
	078 Move X8, [X21]
	079 Move W0, W31
	080 Move X8, [X8+184]
	081 Move V1, [X8+4]
	082 Subtract S0, S0, S1
	083 Move [X19+36], S0
	084 Move W8, [X19+21]
	085 Compare W8, 0
	086 JumpIfNotEqual {89}
	087 Move X0, X19
	088 Call LTDescr.init, X0
	089 Move X8, [X21]
	090 Move X8, [X8+184]
	091 Move V0, [X8+4]
	092 Multiply S0, S8, S0
	093 Move [X8+4], S0
	094 Move V1, [X19+32]
	095 Move V2, [X19+40]
	096 Move X8, [X19+168]
	097 Add S0, S0, S1
	098 NotImplemented "Instruction FCMP not yet implemented."
	099 NotImplemented "Instruction FCSEL not yet implemented."
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 Move S0, W31
	102 NotImplemented "Instruction FCSEL not yet implemented."
	103 NotImplemented "Instruction FDIV not yet implemented."
	104 Move [X19+28], S1
	105 Move [X19+36], S0
	106 Compare X8, 0
	107 JumpIfEqual {192}
	108 Move X9, [X8+24]
	109 Move X0, [X8+64]
	110 Move X1, [X8+40]
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Move W8, [X19+156]
	113 Compare W8, 0
	114 JumpIfEqual {123}
	115 Move X0, [X19+232]
	116 Compare X0, 0
	117 JumpIfEqual {192}
	118 Move X8, [X21]
	119 Move V1, [X19+28]
	120 Move X8, [X8+184]
	121 Move V0, [X8]
	122 Call LTDescrOptional.callOnUpdate, X0, V0, V1
	123 Move V0, [X19+32]
	124 NotImplemented "Instruction FCMP not yet implemented."
	125 Move V1, [X19+40]
	126 NotImplemented "Instruction FCMP not yet implemented."
	127 Move W8, [X19+18]
	128 Compare W8, 0
	129 JumpIfEqual {180}
	130 Move X20, [X19+232]
	131 Compare X20, 0
	132 JumpIfEqual {192}
	133 Move W8, [X20+96]
	134 Move X9, [X21]
	135 Move S0, 1
	136 Move S1, W31
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X8, [X9+184]
	139 NotImplemented "Instruction FCSEL not yet implemented."
	140 Move X0, X31
	141 Move [X8+4], S0
	142 Call Time.get_frameCount
	143 Move [X20+96], W0
	144 NotImplemented "Instruction FCMP not yet implemented."
	145 Move W8, [X19+56]
	146 Move W9, [X19+152]
	147 Subtract W8, W8, 1
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Move [X19+56], W8
	150 Move S0, W31
	151 Subtract S0, S0, S8
	152 Move [X19+64], S0
	153 Compare W8, 0
	154 JumpIfNotEqual {165}
	155 Move X10, 0xF38000
	156 Move X10, [X10+1208]
	157 Move W0, 1
	158 Move X10, [X10]
	159 Move X10, [X10+184]
	160 Move V0, [X10]
	161 Move [X19+32], S0
	162 Compare W8, 0
	163 JumpIfEqual {174}
	164 NotImplemented "Instruction CMP not yet implemented."
	165 Move W8, [X19+24]
	166 Compare W8, 0
	167 JumpIfEqual {173}
	168 Move W8, [X19+22]
	169 Compare W8, 0
	170 JumpIfEqual {173}
	171 Move X0, X19
	172 Call LTDescr.callOnCompletes, X0
	173 Move W0, W31
	174 Move X20, [X31+32]
	175 Move X19, [X31+40]
	176 Move X30, [X31+16]
	177 Move X21, [X31+24]
	178 Move V8, [X31+48]
	179 Return X0
	180 Move W8, [X19+19]
	181 Compare W8, 0
	182 JumpIfEqual {58}
	183 Move X0, [X20]
	184 Move W8, [X0+224]
	185 Compare W8, 0
	186 JumpIfNotEqual {189}
	187 Call 0x1C17DFC
	188 Move X0, [X20]
	189 Move X8, [X0+184]
	190 Move X9, [X21]
	191 Move V0, [X8+84]
	192 Call 0x1C17F20

Method: System.Void callOnCompletes()

Disassembly:
	0x031C3608 LDP X8, X1, [X0]
	0x031C360C MOV X0, X19
	0x031C3610 BLR X8
	0x031C3614 TBZ X0, 0x0, 0x31C376C
	0x031C3618 LDR X8, [X19]
	0x031C361C LDR X1, [X24]
	0x031C3620 LDRH W9, [X8 + 0x12E]
	0x031C3624 CBZ X9, 0x31C3648
	0x031C3628 LDR X10, [X8 + 0xB0]
	0x031C362C ADD X10, X10, 0x8
	0x031C3630 LDUR X11, [X10 - 0x8]
	0x031C3634 CMP X11, X1
	0x031C3638 B.EQ 0x31C3658
	0x031C363C SUBS X9, X9, 0x1
	0x031C3640 ADD X10, X10, 0x10
	0x031C3644 B.NE 0x31C3630
	0x031C3648 MOVZ W2, 0x1
	0x031C364C MOV X0, X19
	0x031C3650 BL 0x1C5C788
	0x031C3654 B 0x31C3668
	0x031C3658 LDR W9, [X10]
	0x031C365C ADD W9, W9, 0x1
	0x031C3660 ADD X8, X8, W9, 0x4, SXTW
	0x031C3664 ADD X0, X8, 0x138
	0x031C3668 LDP X8, X1, [X0]
	0x031C366C MOV X0, X19
	0x031C3670 BLR X8
	0x031C3674 MOV X21, X0
	0x031C3678 CBZ X0, 0x31C3808
	0x031C367C LDR X1, [X25]
	0x031C3680 LDR X8, [X21]
	0x031C3684 CMP X8, X1
	0x031C3688 B.NE 0x31C3800
	0x031C368C LDR X1, [X26]
	0x031C3690 MOV X0, X21
	0x031C3694 BL 0x21A3894
	0x031C3698 MOV X22, X0
	0x031C369C LDR X0, [X27]
	0x031C36A0 LDR W8, [X0 + 0xE0]
	0x031C36A4 CBNZ W8, 0x31C36AC
	0x031C36A8 BL 0x1C16DFC
	0x031C36AC MOV X0, X22
	0x031C36B0 MOV X1, X31
	0x031C36B4 MOV X2, X31
	0x031C36B8 BL 0x3C354F8
	0x031C36BC TBZ X0, 0x0, 0x31C36F4
	0x031C36C0 CBZ X22, 0x31C380C
	0x031C36C4 LDR X8, [X22]
	0x031C36C8 LDR X1, [X8 + 0x2A0]
	0x031C36CC LDR X9, [X8 + 0x298]
	0x031C36D0 MOV X0, X22
	0x031C36D4 BLR X9
	0x031C36D8 LDR X8, [X22]
	0x031C36DC LDR X1, [X8 + 0x2B0]
	0x031C36E0 LDR X9, [X8 + 0x2A8]
	0x031C36E4 MOV X0, X22
	0x031C36E8 MOV V3.16B, V8.16B
	0x031C36EC BLR X9
	0x031C36F0 B 0x31C3758
	0x031C36F4 LDR X1, [X28]
	0x031C36F8 MOV X0, X21
	0x031C36FC BL 0x21A3894

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1219000
	005 Move W8, [X20+3970]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF5D000
	012 Move X0, [X0+2472]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3970], W8
	016 Move W8, [X19+144]
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Move X8, [X19+232]
	020 Compare X8, 0
	021 JumpIfEqual {72}
	022 Move X8, [X8+120]
	023 Compare X8, 0
	024 JumpIfEqual {72}
	025 Move W9, 1
	026 Move [X8+73], W9
	027 Move X8, [X19+232]
	028 Compare X8, 0
	029 JumpIfEqual {72}
	030 Move X0, [X8+208]
	031 Move S0, [X19+108]
	032 Move S1, [X19+112]
	033 Move V2, [X19+116]
	034 Move V3, [X19+96]
	035 Compare X0, 0
	036 JumpIfEqual {42}
	037 Move X8, 0xF5D000
	038 Move X8, [X8+2472]
	039 Move X1, [X8]
	040 Move X8, [X0]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X1, X31
	043 Call AudioSource.PlayClipAtPoint, X0, X1, V0
	044 Move X8, [X19+232]
	045 Compare X8, 0
	046 JumpIfEqual {72}
	047 Move X9, [X8+192]
	048 Compare X9, 0
	049 JumpIfEqual {57}
	050 Move X2, [X9+24]
	051 Move X0, [X9+64]
	052 Move X1, [X9+40]
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 CallNoReturn X2
	057 Move X9, [X8+200]
	058 Compare X9, 0
	059 JumpIfEqual {68}
	060 Move X1, [X8+208]
	061 Move X3, [X9+24]
	062 Move X0, [X9+64]
	063 Move X2, [X9+40]
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 CallNoReturn X3
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Return 
	072 Call 0x1C17F20
	073 Call 0x1C181E0

Method: LTDescr setFromColor(UnityEngine.Color col)

Disassembly:
	0x031C3C30 B 0x31C3C44
	0x031C3C34 B 0x31C3C44
	0x031C3C38 B 0x31C3C44
	0x031C3C3C B 0x31C3C44
	0x031C3C40 B 0x31C3C44
	0x031C3C44 CMP W1, 0x1
	0x031C3C48 B.NE 0x31C3C5C
	0x031C3C4C BL 0x3EB1AD0
	0x031C3C50 LDR X20, [X0]
	0x031C3C54 BL 0x3EB1AE0
	0x031C3C58 B 0x31C3B60
	0x031C3C5C STR X0, [X31 + 0x8]
	0x031C3C60 MOV X20, X31
	0x031C3C64 B 0x31C3C6C
	0x031C3C68 STR X0, [X31 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, -40718336
	003 Move V4, [X8+1608]
	004 Move X8, [X0+232]
	005 Move [X0+96], W31
	006 Move [X0+100], S3
	007 Move [X0+104], W31
	008 Move [X0+120], D4
	009 Move [X0+128], W31
	010 Compare X8, 0
	011 JumpIfEqual {17}
	012 Move [X8+36], S0
	013 Move [X8+44], S1
	014 Move [X8+44], S2
	015 Move X30, [X31+16]
	016 Return X0
	017 Call 0x1C17F20

Method: System.Void alphaRecursive(UnityEngine.Transform transform, System.Single val, System.Boolean useRecursion = True)

Disassembly:
	0x031C3C6C LDR X1, [X22]
	0x031C3C70 MOV X0, X19
	0x031C3C74 BL 0x1C16E00
	0x031C3C78 MOV X19, X0
	0x031C3C7C CBZ X0, 0x31C3CD8
	0x031C3C80 LDR X8, [X19]
	0x031C3C84 LDR X1, [X22]
	0x031C3C88 LDRH W9, [X8 + 0x12E]
	0x031C3C8C CBZ X9, 0x31C3CB0
	0x031C3C90 LDR X10, [X8 + 0xB0]
	0x031C3C94 ADD X10, X10, 0x8
	0x031C3C98 LDUR X11, [X10 - 0x8]
	0x031C3C9C CMP X11, X1
	0x031C3CA0 B.EQ 0x31C3CC0
	0x031C3CA4 SUBS X9, X9, 0x1
	0x031C3CA8 ADD X10, X10, 0x10
	0x031C3CAC B.NE 0x31C3C98
	0x031C3CB0 MOV X0, X19
	0x031C3CB4 MOV W2, W31
	0x031C3CB8 BL 0x1C5C788
	0x031C3CBC B 0x31C3CCC
	0x031C3CC0 LDRSW X9, [X10]
	0x031C3CC4 ADD X8, X8, X9, 0x4, LSL
	0x031C3CC8 ADD X0, X8, 0x138
	0x031C3CCC LDP X8, X1, [X0]
	0x031C3CD0 MOV X0, X19
	0x031C3CD4 BLR X8
	0x031C3CD8 CBNZ X20, 0x31C3CE4
	0x031C3CDC LDR X0, [X31 + 0x8]
	0x031C3CE0 BL 0x1D2C690
	0x031C3CE4 MOV X0, X20
	0x031C3CE8 BL 0x1C16F18
	0x031C3CEC BL 0x1990590
	0x031C3CF0 STP D11, D10, [X31 - 0x70]!
	0x031C3CF4 STP D9, D8, [X31 + 0x10]
	0x031C3CF8 STP X30, X27, [X31 + 0x20]
	0x031C3CFC STP X26, X25, [X31 + 0x30]
	0x031C3D00 STP X24, X23, [X31 + 0x40]
	0x031C3D04 STP X22, X21, [X31 + 0x50]
	0x031C3D08 STP X20, X19, [X31 + 0x60]
	0x031C3D0C ADRP X19, 0x1218000
	0x031C3D10 LDRB W8, [X19 + 0xF87]
	0x031C3D14 MOV V8.16B, V3.16B
	0x031C3D18 MOV V9.16B, V2.16B
	0x031C3D1C MOV V10.16B, V1.16B
	0x031C3D20 MOV V11.16B, V0.16B
	0x031C3D24 MOV X20, X0
	0x031C3D28 TBNZ X8, 0x0, 0x31C3D70
	0x031C3D2C ADRP X0, 0xF5C000
	0x031C3D30 LDR X0, [X0 + 0x3E8]
	0x031C3D34 BL 0x1C16CF4
	0x031C3D38 ADRP X0, 0xF30000
	0x031C3D3C LDR X0, [X0 + 0xE00]
	0x031C3D40 BL 0x1C16CF4
	0x031C3D44 ADRP X0, 0xF30000
	0x031C3D48 LDR X0, [X0 + 0xE18]
	0x031C3D4C BL 0x1C16CF4
	0x031C3D50 ADRP X0, 0xF30000
	0x031C3D54 LDR X0, [X0 + 0x598]
	0x031C3D58 BL 0x1C16CF4
	0x031C3D5C ADRP X0, 0xF32000
	0x031C3D60 LDR X0, [X0 + 0x638]
	0x031C3D64 BL 0x1C16CF4
	0x031C3D68 MOVZ W8, 0x1
	0x031C3D6C STRB W8, [X19 + 0xF87]
	0x031C3D70 CBZ X20, 0x31C4008
	0x031C3D74 MOV X0, X20
	0x031C3D78 MOV X1, X31
	0x031C3D7C BL 0x3C40C8C
	0x031C3D80 CMP W0, 0x1
	0x031C3D84 B.LT 0x31C3FD0
	0x031C3D88 ADRP X23, 0xF30000
	0x031C3D8C LDR X23, [X23 + 0xE00]
	0x031C3D90 MOV X0, X20
	0x031C3D94 MOV X1, X31
	0x031C3D98 BL 0x3C4100C
	0x031C3D9C MOV X19, X0
	0x031C3DA0 CBZ X0, 0x31C400C
	0x031C3DA4 ADRP X24, 0xF30000
	0x031C3DA8 ADRP X25, 0xF5C000
	0x031C3DAC ADRP X26, 0xF30000
	0x031C3DB0 ADRP X27, 0xF32000
	0x031C3DB4 LDR X24, [X24 + 0xE18]
	0x031C3DB8 LDR X25, [X25 + 0x3E8]
	0x031C3DBC LDR X26, [X26 + 0x598]
	0x031C3DC0 LDR X27, [X27 + 0x638]
	0x031C3DC4 LDR X8, [X19]
	0x031C3DC8 LDR X1, [X24]
	0x031C3DCC LDRH W9, [X8 + 0x12E]
	0x031C3DD0 CBZ X9, 0x31C3DF4
	0x031C3DD4 LDR X10, [X8 + 0xB0]
	0x031C3DD8 ADD X10, X10, 0x8
	0x031C3DDC LDUR X11, [X10 - 0x8]
	0x031C3DE0 CMP X11, X1
	0x031C3DE4 B.EQ 0x31C3E04
	0x031C3DE8 SUBS X9, X9, 0x1
	0x031C3DEC ADD X10, X10, 0x10
	0x031C3DF0 B.NE 0x31C3DDC
	0x031C3DF4 MOV X0, X19
	0x031C3DF8 MOV W2, W31
	0x031C3DFC BL 0x1C5C788
	0x031C3E00 B 0x31C3E10
	0x031C3E04 LDRSW X9, [X10]
	0x031C3E08 ADD X8, X8, X9, 0x4, LSL
	0x031C3E0C ADD X0, X8, 0x138
	0x031C3E10 LDP X8, X1, [X0]
	0x031C3E14 MOV X0, X19
	0x031C3E18 BLR X8
	0x031C3E1C TBZ X0, 0x0, 0x31C3F5C
	0x031C3E20 LDR X8, [X19]
	0x031C3E24 LDR X1, [X24]
	0x031C3E28 LDRH W9, [X8 + 0x12E]
	0x031C3E2C CBZ X9, 0x31C3E50
	0x031C3E30 LDR X10, [X8 + 0xB0]
	0x031C3E34 ADD X10, X10, 0x8
	0x031C3E38 LDUR X11, [X10 - 0x8]
	0x031C3E3C CMP X11, X1
	0x031C3E40 B.EQ 0x31C3E60
	0x031C3E44 SUBS X9, X9, 0x1
	0x031C3E48 ADD X10, X10, 0x10
	0x031C3E4C B.NE 0x31C3E38
	0x031C3E50 MOVZ W2, 0x1
	0x031C3E54 MOV X0, X19
	0x031C3E58 BL 0x1C5C788
	0x031C3E5C B 0x31C3E70
	0x031C3E60 LDR W9, [X10]
	0x031C3E64 ADD W9, W9, 0x1
	0x031C3E68 ADD X8, X8, W9, 0x4, SXTW
	0x031C3E6C ADD X0, X8, 0x138
	0x031C3E70 LDP X8, X1, [X0]
	0x031C3E74 MOV X0, X19
	0x031C3E78 BLR X8
	0x031C3E7C MOV X21, X0
	0x031C3E80 MOV X0, X20
	0x031C3E84 MOV X1, X31
	0x031C3E88 BL 0x3C32ECC
	0x031C3E8C CBZ X0, 0x31C3FF0
	0x031C3E90 LDR X1, [X25]
	0x031C3E94 BL 0x21E52E4
	0x031C3E98 MOV X22, X0
	0x031C3E9C LDR X0, [X26]
	0x031C3EA0 LDR W8, [X0 + 0xE0]
	0x031C3EA4 CBNZ W8, 0x31C3EAC
	0x031C3EA8 BL 0x1C16DFC
	0x031C3EAC MOV X0, X22
	0x031C3EB0 MOV X1, X31
	0x031C3EB4 MOV X2, X31
	0x031C3EB8 BL 0x3C354F8
	0x031C3EBC LDR X1, [X27]
	0x031C3EC0 TBZ X0, 0x0, 0x31C3F14
	0x031C3EC4 CBZ X21, 0x31C3EF0
	0x031C3EC8 LDR X8, [X21]
	0x031C3ECC LDRB W9, [X1 + 0x130]
	0x031C3ED0 LDRB W10, [X8 + 0x130]
	0x031C3ED4 CMP W10, W9
	0x031C3ED8 B.CC 0x31C3FFC
	0x031C3EDC LDR X8, [X8 + 0xC8]
	0x031C3EE0 ADD X8, X8, X9, 0x3, LSL
	0x031C3EE4 LDUR X8, [X8 - 0x8]
	0x031C3EE8 CMP X8, X1
	0x031C3EEC B.NE 0x31C3FFC
	0x031C3EF0 CBZ X22, 0x31C4004
	0x031C3EF4 MOV X0, X22
	0x031C3EF8 MOV V0.16B, V11.16B
	0x031C3EFC MOV V1.16B, V10.16B
	0x031C3F00 MOV V2.16B, V9.16B
	0x031C3F04 MOV V3.16B, V8.16B
	0x031C3F08 MOV X1, X31
	0x031C3F0C BL 0x3C4132C
	0x031C3F10 B 0x31C3F40
	0x031C3F14 CBZ X21, 0x31C3F40
	0x031C3F18 LDR X8, [X21]
	0x031C3F1C LDRB W9, [X1 + 0x130]
	0x031C3F20 LDRB W10, [X8 + 0x130]
	0x031C3F24 CMP W10, W9
	0x031C3F28 B.CC 0x31C3FF4
	0x031C3F2C LDR X8, [X8 + 0xC8]
	0x031C3F30 ADD X8, X8, X9, 0x3, LSL
	0x031C3F34 LDUR X8, [X8 - 0x8]
	0x031C3F38 CMP X8, X1
	0x031C3F3C B.NE 0x31C3FF4
	0x031C3F40 MOV X0, X21
	0x031C3F44 MOV V0.16B, V11.16B
	0x031C3F48 MOV V1.16B, V10.16B
	0x031C3F4C MOV V2.16B, V9.16B
	0x031C3F50 MOV V3.16B, V8.16B
	0x031C3F54 BL 0x31C3CF0
	0x031C3F58 B 0x31C3DC4
	0x031C3F5C MOV X20, X31
	0x031C3F60 LDR X1, [X23]
	0x031C3F64 MOV X0, X19
	0x031C3F68 BL 0x1C16E00
	0x031C3F6C CBZ X0, 0x31C3FCC
	0x031C3F70 LDR X8, [X0]
	0x031C3F74 LDR X1, [X23]
	0x031C3F78 MOV X19, X0
	0x031C3F7C LDRH W9, [X8 + 0x12E]
	0x031C3F80 CBZ X9, 0x31C3FA4
	0x031C3F84 LDR X10, [X8 + 0xB0]
	0x031C3F88 ADD X10, X10, 0x8
	0x031C3F8C LDUR X11, [X10 - 0x8]
	0x031C3F90 CMP X11, X1
	0x031C3F94 B.EQ 0x31C3FB4
	0x031C3F98 SUBS X9, X9, 0x1
	0x031C3F9C ADD X10, X10, 0x10
	0x031C3FA0 B.NE 0x31C3F8C
	0x031C3FA4 MOV X0, X19
	0x031C3FA8 MOV W2, W31
	0x031C3FAC BL 0x1C5C788
	0x031C3FB0 B 0x31C3FC0
	0x031C3FB4 LDRSW X9, [X10]
	0x031C3FB8 ADD X8, X8, X9, 0x4, LSL
	0x031C3FBC ADD X0, X8, 0x138
	0x031C3FC0 LDP X8, X1, [X0]
	0x031C3FC4 MOV X0, X19
	0x031C3FC8 BLR X8
	0x031C3FCC CBNZ X20, 0x31C4010
	0x031C3FD0 LDP X20, X19, [X31 + 0x60]
	0x031C3FD4 LDP X22, X21, [X31 + 0x50]
	0x031C3FD8 LDP X24, X23, [X31 + 0x40]
	0x031C3FDC LDP X26, X25, [X31 + 0x30]
	0x031C3FE0 LDP X30, X27, [X31 + 0x20]
	0x031C3FE4 LDP D9, D8, [X31 + 0x10]
	0x031C3FE8 LDP D11, D10, [X31], #0x70
	0x031C3FEC RET
	0x031C3FF0 BL 0x1C16F20
	0x031C3FF4 MOV X0, X21
	0x031C3FF8 BL 0x1C171E0
	0x031C3FFC MOV X0, X21
	0x031C4000 BL 0x1C171E0
	0x031C4004 BL 0x1C16F20
	0x031C4008 BL 0x1C16F20
	0x031C400C BL 0x1C16F20
	0x031C4010 MOV X0, X20
	0x031C4014 BL 0x1C16F18
	0x031C4018 B 0x31C4044
	0x031C401C B 0x31C4044
	0x031C4020 B 0x31C4044
	0x031C4024 B 0x31C4044
	0x031C4028 B 0x31C4044
	0x031C402C B 0x31C4044
	0x031C4030 B 0x31C4044
	0x031C4034 B 0x31C4044
	0x031C4038 B 0x31C4044
	0x031C403C B 0x31C4044
	0x031C4040 B 0x31C4044
	0x031C4044 CMP W1, 0x1
	0x031C4048 B.NE 0x31C405C
	0x031C404C BL 0x3EB1AD0
	0x031C4050 LDR X20, [X0]
	0x031C4054 BL 0x3EB1AE0
	0x031C4058 B 0x31C3F60
	0x031C405C MOV X21, X0
	0x031C4060 MOV X20, X31
	0x031C4064 B 0x31C406C
	0x031C4068 MOV X21, X0
	0x031C406C LDR X1, [X23]
	0x031C4070 MOV X0, X19
	0x031C4074 BL 0x1C16E00
	0x031C4078 MOV X19, X0
	0x031C407C CBZ X0, 0x31C40D8
	0x031C4080 LDR X8, [X19]
	0x031C4084 LDR X1, [X23]
	0x031C4088 LDRH W9, [X8 + 0x12E]
	0x031C408C CBZ X9, 0x31C40B0
	0x031C4090 LDR X10, [X8 + 0xB0]
	0x031C4094 ADD X10, X10, 0x8
	0x031C4098 LDUR X11, [X10 - 0x8]
	0x031C409C CMP X11, X1
	0x031C40A0 B.EQ 0x31C40C0
	0x031C40A4 SUBS X9, X9, 0x1
	0x031C40A8 ADD X10, X10, 0x10
	0x031C40AC B.NE 0x31C4098
	0x031C40B0 MOV X0, X19
	0x031C40B4 MOV W2, W31
	0x031C40B8 BL 0x1C5C788
	0x031C40BC B 0x31C40CC
	0x031C40C0 LDRSW X9, [X10]
	0x031C40C4 ADD X8, X8, X9, 0x4, LSL
	0x031C40C8 ADD X0, X8, 0x138
	0x031C40CC LDP X8, X1, [X0]
	0x031C40D0 MOV X0, X19
	0x031C40D4 BLR X8
	0x031C40D8 CBNZ X20, 0x31C40E4
	0x031C40DC MOV X0, X21
	0x031C40E0 BL 0x1D2C690
	0x031C40E4 MOV X0, X20
	0x031C40E8 BL 0x1C16F18

ISIL:
	001 Move [X31-96], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x1219000
	013 Move W8, [X21+3971]
	014 Move W20, W1
	015 Move V8, V0
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {44}
	021 Move X0, 0xF5D000
	022 Move X0, [X0+2480]
	023 Call 0x1C17CF4
	024 Move X0, 0xF31000
	025 Move X0, [X0+3584]
	026 Call 0x1C17CF4
	027 Move X0, 0xF31000
	028 Move X0, [X0+3608]
	029 Call 0x1C17CF4
	030 Move X0, 0xF31000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move X0, 0xF33000
	034 Move X0, [X0+1592]
	035 Call 0x1C17CF4
	036 Move X0, 0xF5D000
	037 Move X0, [X0+2488]
	038 Call 0x1C17CF4
	039 Move X0, 0xF59000
	040 Move X0, [X0+736]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+3971], W8
	044 Compare X19, 0
	045 JumpIfEqual {260}
	046 Move X0, X19
	047 Move X1, X31
	048 Call Component.get_gameObject, X0
	049 Compare X0, 0
	050 JumpIfEqual {260}
	051 Move X8, 0xF5D000
	052 Move X8, [X8+2480]
	053 Move X21, 0xF31000
	054 Move X1, [X8]
	055 Move X21, [X21+1432]
	056 Call 0x21E62E4, X0
	057 Move X8, [X21]
	058 Move X21, X0
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X21
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Inequality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {137}
	072 Compare X21, 0
	073 JumpIfEqual {260}
	074 Move X0, X21
	075 Move X1, X31
	076 Call Renderer.get_materials, X0
	077 Compare X0, 0
	078 JumpIfEqual {260}
	079 Move W8, [X0+24]
	080 Move X21, X0
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X24, 0xF59000
	083 Move X25, 0xF5D000
	084 Move X24, [X24+736]
	085 Move X25, [X25+2488]
	086 Move W23, W31
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Add X8, X21, W23
	089 Move X22, [X8+32]
	090 Compare X22, 0
	091 JumpIfEqual {260}
	092 Move X1, [X24]
	093 Move X0, X22
	094 Move X2, X31
	095 Call Material.HasProperty, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {117}
	100 Move X0, X22
	101 Move X1, X31
	102 Call Material.get_color, X0
	103 Move X0, X22
	104 Move X1, X31
	105 Move V9, V0
	106 Call Material.get_color, X0
	107 Move X0, X22
	108 Move X1, X31
	109 Move V10, V1
	110 Call Material.get_color, X0
	111 Move X0, X22
	112 Move V0, V9
	113 Move V1, V10
	114 Move V3, V8
	115 Move X1, X31
	116 Call Material.set_color, X0, X1
	117 Move X1, [X25]
	118 Move X0, X22
	119 Move X2, X31
	120 Call Material.HasProperty, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {134}
	125 Move X1, [X25]
	126 Move X0, X22
	127 Move X2, X31
	128 Call Material.GetColor, X0, X1
	129 Move X1, [X25]
	130 Move X0, X22
	131 Move V3, V8
	132 Move X2, X31
	133 Call Material.SetColor, X0, X1, X2
	134 Move W8, [X21+24]
	135 Add W23, W23, 1
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move TEMP, X20
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {248}
	141 Move X0, X19
	142 Move X1, X31
	143 Call Transform.get_childCount, X0
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move X0, X19
	146 Move X1, X31
	147 Call Transform.GetEnumerator, X0
	148 Move X19, X0
	149 Compare X0, 0
	150 JumpIfEqual {263}
	151 Move X20, 0xF31000
	152 Move X21, 0xF33000
	153 Move X20, [X20+3608]
	154 Move X21, [X21+1592]
	155 Move X8, [X19]
	156 Move X1, [X20]
	157 NotImplemented "Instruction LDRH not yet implemented."
	158 Compare X9, 0
	159 JumpIfEqual {166}
	160 Move X10, [X8+176]
	161 Add X10, X10, 8
	162 NotImplemented "Instruction LDUR not yet implemented."
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Subtract X9, X9, 1
	165 Add X10, X10, 16
	166 Move X0, X19
	167 Move W2, W31
	168 Call 0x1C5D788
	169 NotImplemented "Instruction LDRSW not yet implemented."
	170 Add X8, X8, X9
	171 Add X0, X8, 312
	172 Move X8, [X0]
	173 Move X1, [X0+8]
	174 Move X0, X19
	175 NotImplemented "Instruction BLR not yet implemented."
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfNotEqual {216}
	180 Move X8, [X19]
	181 Move X1, [X20]
	182 NotImplemented "Instruction LDRH not yet implemented."
	183 Compare X9, 0
	184 JumpIfEqual {191}
	185 Move X10, [X8+176]
	186 Add X10, X10, 8
	187 NotImplemented "Instruction LDUR not yet implemented."
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Subtract X9, X9, 1
	190 Add X10, X10, 16
	191 Move W2, 1
	192 Move X0, X19
	193 Call 0x1C5D788
	194 Move W9, [X10]
	195 Add W9, W9, 1
	196 Add X8, X8, W9
	197 Add X0, X8, 312
	198 Move X8, [X0]
	199 Move X1, [X0+8]
	200 Move X0, X19
	201 NotImplemented "Instruction BLR not yet implemented."
	202 Compare X0, 0
	203 JumpIfEqual {213}
	204 Move X8, [X0]
	205 Move X1, [X21]
	206 Move W10, [X8+304]
	207 Move W9, [X1+304]
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move X8, [X8+200]
	210 Add X8, X8, X9
	211 NotImplemented "Instruction LDUR not yet implemented."
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move W1, 1
	214 Move V0, V8
	215 Call LTDescr.alphaRecursive, X0, V0, X1
	216 Move X20, X31
	217 Move X21, 0xF31000
	218 Move X21, [X21+3584]
	219 Move X0, X19
	220 Move X1, [X21]
	221 Call 0x1C17E00
	222 Compare X0, 0
	223 JumpIfEqual {246}
	224 Move X8, [X0]
	225 Move X1, [X21]
	226 Move X19, X0
	227 NotImplemented "Instruction LDRH not yet implemented."
	228 Compare X9, 0
	229 JumpIfEqual {236}
	230 Move X10, [X8+176]
	231 Add X10, X10, 8
	232 NotImplemented "Instruction LDUR not yet implemented."
	233 NotImplemented "Instruction CMP not yet implemented."
	234 Subtract X9, X9, 1
	235 Add X10, X10, 16
	236 Move X0, X19
	237 Move W2, W31
	238 Call 0x1C5D788
	239 NotImplemented "Instruction LDRSW not yet implemented."
	240 Add X8, X8, X9
	241 Add X0, X8, 312
	242 Move X8, [X0]
	243 Move X1, [X0+8]
	244 Move X0, X19
	245 NotImplemented "Instruction BLR not yet implemented."
	246 Compare X20, 0
	247 JumpIfNotEqual {264}
	248 Move X20, [X31+80]
	249 Move X19, [X31+88]
	250 Move X22, [X31+64]
	251 Move X21, [X31+72]
	252 Move X24, [X31+48]
	253 Move X23, [X31+56]
	254 Move X30, [X31+32]
	255 Move X25, [X31+40]
	256 Move D9, [X31+16]
	257 Move D8, [X31+24]
	258 Move V10, [X31+96]
	259 Return 
	260 Call 0x1C17F20
	261 Call 0x1C181E0
	262 Call 0x1C17F28
	263 Call 0x1C17F20
	264 Move X0, X20
	265 Call 0x1C17F18
	266 Move X21, X0
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move X0, X21
	269 Call 0x3EB2AD0
	270 Move X20, [X0]
	271 Call 0x3EB2AE0
	272 Move X20, X31
	273 Move X21, X0
	274 Move X22, 0xF30000
	275 Move X22, [X22+3584]
	276 Move X1, [X22]
	277 Move X0, X19
	278 Call 0x1C17E00
	279 Move X19, X0
	280 Compare X0, 0
	281 JumpIfEqual {303}
	282 Move X8, [X19]
	283 Move X1, [X22]
	284 NotImplemented "Instruction LDRH not yet implemented."
	285 Compare X9, 0
	286 JumpIfEqual {293}
	287 Move X10, [X8+176]
	288 Add X10, X10, 8
	289 NotImplemented "Instruction LDUR not yet implemented."
	290 NotImplemented "Instruction CMP not yet implemented."
	291 Subtract X9, X9, 1
	292 Add X10, X10, 16
	293 Move X0, X19
	294 Move W2, W31
	295 Call 0x1C5D788
	296 NotImplemented "Instruction LDRSW not yet implemented."
	297 Add X8, X8, X9
	298 Add X0, X8, 312
	299 Move X8, [X0]
	300 Move X1, [X0+8]
	301 Move X0, X19
	302 NotImplemented "Instruction BLR not yet implemented."
	303 Compare X20, 0
	304 JumpIfNotEqual {307}
	305 Move X0, X21
	306 Call 0x1D2D690
	307 Move X0, X20
	308 Call 0x1C17F18
	309 Call 0x1991590

Method: System.Void colorRecursive(UnityEngine.Transform transform, UnityEngine.Color toColor, System.Boolean useRecursion = True)

Disassembly:
	0x031C40EC BL 0x1990590
	0x031C40F0 SUB X31, X31, 0x80
	0x031C40F4 STP D11, D10, [X31 + 0x10]
	0x031C40F8 STP D9, D8, [X31 + 0x20]
	0x031C40FC STP X30, X27, [X31 + 0x30]
	0x031C4100 STP X26, X25, [X31 + 0x40]
	0x031C4104 STP X24, X23, [X31 + 0x50]
	0x031C4108 STP X22, X21, [X31 + 0x60]
	0x031C410C STP X20, X19, [X31 + 0x70]
	0x031C4110 ADRP X20, 0x1217000
	0x031C4114 LDRB W8, [X20 + 0xF88]
	0x031C4118 MOV V8.16B, V3.16B
	0x031C411C MOV V9.16B, V2.16B
	0x031C4120 MOV V10.16B, V1.16B
	0x031C4124 MOV V11.16B, V0.16B
	0x031C4128 MOV X19, X0
	0x031C412C TBNZ X8, 0x0, 0x31C4180
	0x031C4130 ADRP X0, 0xF5B000
	0x031C4134 LDR X0, [X0 + 0x9C0]
	0x031C4138 BL 0x1C16CF4
	0x031C413C ADRP X0, 0xF5B000
	0x031C4140 LDR X0, [X0 + 0x9C8]
	0x031C4144 BL 0x1C16CF4
	0x031C4148 ADRP X0, 0xF2F000
	0x031C414C LDR X0, [X0 + 0xE00]
	0x031C4150 BL 0x1C16CF4
	0x031C4154 ADRP X0, 0xF2F000
	0x031C4158 LDR X0, [X0 + 0xE18]
	0x031C415C BL 0x1C16CF4
	0x031C4160 ADRP X0, 0xF2F000
	0x031C4164 LDR X0, [X0 + 0x598]
	0x031C4168 BL 0x1C16CF4
	0x031C416C ADRP X0, 0xF56000
	0x031C4170 LDR X0, [X0 + 0xC70]
	0x031C4174 BL 0x1C16CF4
	0x031C4178 MOVZ W8, 0x1
	0x031C417C STRB W8, [X20 + 0xF88]
	0x031C4180 CBZ X19, 0x31C4430
	0x031C4184 MOV X0, X19
	0x031C4188 MOV X1, X31
	0x031C418C BL 0x3C40C8C
	0x031C4190 CMP W0, 0x1
	0x031C4194 B.LT 0x31C43F8
	0x031C4198 ADRP X22, 0xF2F000
	0x031C419C LDR X22, [X22 + 0xE00]
	0x031C41A0 MOV X0, X19
	0x031C41A4 MOV X1, X31
	0x031C41A8 BL 0x3C4100C
	0x031C41AC MOV X19, X0
	0x031C41B0 CBZ X0, 0x31C4434
	0x031C41B4 ADRP X23, 0xF2F000
	0x031C41B8 ADRP X24, 0xF56000
	0x031C41BC ADRP X25, 0xF5B000
	0x031C41C0 ADRP X26, 0xF2F000
	0x031C41C4 ADRP X27, 0xF5B000
	0x031C41C8 LDR X23, [X23 + 0xE18]
	0x031C41CC LDR X24, [X24 + 0xC70]
	0x031C41D0 LDR X25, [X25 + 0x9C0]
	0x031C41D4 LDR X26, [X26 + 0x598]
	0x031C41D8 LDR X27, [X27 + 0x9C8]
	0x031C41DC LDR X8, [X19]
	0x031C41E0 LDR X1, [X23]
	0x031C41E4 LDRH W9, [X8 + 0x12E]
	0x031C41E8 CBZ X9, 0x31C420C
	0x031C41EC LDR X10, [X8 + 0xB0]
	0x031C41F0 ADD X10, X10, 0x8
	0x031C41F4 LDUR X11, [X10 - 0x8]
	0x031C41F8 CMP X11, X1
	0x031C41FC B.EQ 0x31C421C
	0x031C4200 SUBS X9, X9, 0x1
	0x031C4204 ADD X10, X10, 0x10
	0x031C4208 B.NE 0x31C41F4
	0x031C420C MOV X0, X19
	0x031C4210 MOV W2, W31
	0x031C4214 BL 0x1C5C788
	0x031C4218 B 0x31C4228
	0x031C421C LDRSW X9, [X10]
	0x031C4220 ADD X8, X8, X9, 0x4, LSL
	0x031C4224 ADD X0, X8, 0x138
	0x031C4228 LDP X8, X1, [X0]
	0x031C422C MOV X0, X19
	0x031C4230 BLR X8
	0x031C4234 TBZ X0, 0x0, 0x31C4384
	0x031C4238 LDR X8, [X19]
	0x031C423C LDR X1, [X23]
	0x031C4240 LDRH W9, [X8 + 0x12E]
	0x031C4244 CBZ X9, 0x31C4268
	0x031C4248 LDR X10, [X8 + 0xB0]
	0x031C424C ADD X10, X10, 0x8
	0x031C4250 LDUR X11, [X10 - 0x8]
	0x031C4254 CMP X11, X1
	0x031C4258 B.EQ 0x31C4278
	0x031C425C SUBS X9, X9, 0x1
	0x031C4260 ADD X10, X10, 0x10
	0x031C4264 B.NE 0x31C4250
	0x031C4268 MOVZ W2, 0x1
	0x031C426C MOV X0, X19
	0x031C4270 BL 0x1C5C788
	0x031C4274 B 0x31C4288
	0x031C4278 LDR W9, [X10]
	0x031C427C ADD W9, W9, 0x1
	0x031C4280 ADD X8, X8, W9, 0x4, SXTW
	0x031C4284 ADD X0, X8, 0x138
	0x031C4288 LDP X8, X1, [X0]
	0x031C428C MOV X0, X19
	0x031C4290 BLR X8
	0x031C4294 MOV X20, X0
	0x031C4298 CBZ X0, 0x31C441C
	0x031C429C LDR X1, [X24]
	0x031C42A0 LDR X8, [X20]
	0x031C42A4 CMP X8, X1
	0x031C42A8 B.NE 0x31C4420
	0x031C42AC LDR X1, [X25]
	0x031C42B0 MOV X0, X20
	0x031C42B4 BL 0x21A3894
	0x031C42B8 MOV X21, X0
	0x031C42BC LDR X0, [X26]
	0x031C42C0 LDR W8, [X0 + 0xE0]
	0x031C42C4 CBNZ W8, 0x31C42CC
	0x031C42C8 BL 0x1C16DFC
	0x031C42CC MOV X0, X21
	0x031C42D0 MOV X1, X31
	0x031C42D4 MOV X2, X31
	0x031C42D8 BL 0x3C354F8
	0x031C42DC TBZ X0, 0x0, 0x31C430C
	0x031C42E0 CBZ X21, 0x31C4428
	0x031C42E4 LDR X8, [X21]
	0x031C42E8 LDR X1, [X8 + 0x2B0]
	0x031C42EC LDR X9, [X8 + 0x2A8]
	0x031C42F0 MOV X0, X21
	0x031C42F4 MOV V0.16B, V11.16B
	0x031C42F8 MOV V1.16B, V10.16B
	0x031C42FC MOV V2.16B, V9.16B
	0x031C4300 MOV V3.16B, V8.16B
	0x031C4304 BLR X9
	0x031C4308 B 0x31C4368
	0x031C430C LDR X1, [X27]
	0x031C4310 MOV X0, X20
	0x031C4314 BL 0x21A3894
	0x031C4318 MOV X21, X0
	0x031C431C LDR X0, [X26]
	0x031C4320 LDR W8, [X0 + 0xE0]
	0x031C4324 CBNZ W8, 0x31C432C
	0x031C4328 BL 0x1C16DFC
	0x031C432C MOV X0, X21
	0x031C4330 MOV X1, X31
	0x031C4334 MOV X2, X31
	0x031C4338 BL 0x3C354F8
	0x031C433C TBZ X0, 0x0, 0x31C4368
	0x031C4340 CBZ X21, 0x31C442C
	0x031C4344 LDR X8, [X21]
	0x031C4348 LDR X1, [X8 + 0x2B0]
	0x031C434C LDR X9, [X8 + 0x2A8]
	0x031C4350 MOV X0, X21
	0x031C4354 MOV V0.16B, V11.16B
	0x031C4358 MOV V1.16B, V10.16B
	0x031C435C MOV V2.16B, V9.16B
	0x031C4360 MOV V3.16B, V8.16B
	0x031C4364 BLR X9
	0x031C4368 MOV X0, X20
	0x031C436C MOV V0.16B, V11.16B
	0x031C4370 MOV V1.16B, V10.16B
	0x031C4374 MOV V2.16B, V9.16B
	0x031C4378 MOV V3.16B, V8.16B
	0x031C437C BL 0x31C40F0
	0x031C4380 B 0x31C41DC
	0x031C4384 MOV X20, X31
	0x031C4388 LDR X1, [X22]
	0x031C438C MOV X0, X19
	0x031C4390 BL 0x1C16E00
	0x031C4394 CBZ X0, 0x31C43F4
	0x031C4398 LDR X8, [X0]
	0x031C439C LDR X1, [X22]
	0x031C43A0 MOV X19, X0
	0x031C43A4 LDRH W9, [X8 + 0x12E]
	0x031C43A8 CBZ X9, 0x31C43CC
	0x031C43AC LDR X10, [X8 + 0xB0]
	0x031C43B0 ADD X10, X10, 0x8
	0x031C43B4 LDUR X11, [X10 - 0x8]
	0x031C43B8 CMP X11, X1
	0x031C43BC B.EQ 0x31C43DC
	0x031C43C0 SUBS X9, X9, 0x1
	0x031C43C4 ADD X10, X10, 0x10
	0x031C43C8 B.NE 0x31C43B4
	0x031C43CC MOV X0, X19
	0x031C43D0 MOV W2, W31
	0x031C43D4 BL 0x1C5C788
	0x031C43D8 B 0x31C43E8
	0x031C43DC LDRSW X9, [X10]
	0x031C43E0 ADD X8, X8, X9, 0x4, LSL
	0x031C43E4 ADD X0, X8, 0x138
	0x031C43E8 LDP X8, X1, [X0]
	0x031C43EC MOV X0, X19
	0x031C43F0 BLR X8
	0x031C43F4 CBNZ X20, 0x31C4438
	0x031C43F8 LDP X20, X19, [X31 + 0x70]
	0x031C43FC LDP X22, X21, [X31 + 0x60]
	0x031C4400 LDP X24, X23, [X31 + 0x50]
	0x031C4404 LDP X26, X25, [X31 + 0x40]
	0x031C4408 LDP X30, X27, [X31 + 0x30]
	0x031C440C LDP D9, D8, [X31 + 0x20]
	0x031C4410 LDP D11, D10, [X31 + 0x10]
	0x031C4414 ADD X31, X31, 0x80
	0x031C4418 RET
	0x031C441C BL 0x1C16F20
	0x031C4420 MOV X0, X20
	0x031C4424 BL 0x1C171E0
	0x031C4428 BL 0x1C16F20
	0x031C442C BL 0x1C16F20
	0x031C4430 BL 0x1C16F20
	0x031C4434 BL 0x1C16F20
	0x031C4438 MOV X0, X20
	0x031C443C BL 0x1C16F18
	0x031C4440 B 0x31C447C
	0x031C4444 B 0x31C447C
	0x031C4448 B 0x31C447C
	0x031C444C B 0x31C447C
	0x031C4450 B 0x31C447C
	0x031C4454 B 0x31C447C
	0x031C4458 B 0x31C447C
	0x031C445C B 0x31C447C
	0x031C4460 B 0x31C447C
	0x031C4464 B 0x31C447C
	0x031C4468 B 0x31C447C
	0x031C446C B 0x31C447C
	0x031C4470 B 0x31C447C
	0x031C4474 B 0x31C447C
	0x031C4478 B 0x31C447C
	0x031C447C CMP W1, 0x1
	0x031C4480 B.NE 0x31C4494
	0x031C4484 BL 0x3EB1AD0
	0x031C4488 LDR X20, [X0]
	0x031C448C BL 0x3EB1AE0
	0x031C4490 B 0x31C4388
	0x031C4494 STR X0, [X31 + 0x8]
	0x031C4498 MOV X20, X31
	0x031C449C B 0x31C44A4
	0x031C44A0 STR X0, [X31 + 0x8]
	0x031C44A4 LDR X1, [X22]
	0x031C44A8 MOV X0, X19
	0x031C44AC BL 0x1C16E00
	0x031C44B0 MOV X19, X0
	0x031C44B4 CBZ X0, 0x31C4510
	0x031C44B8 LDR X8, [X19]
	0x031C44BC LDR X1, [X22]
	0x031C44C0 LDRH W9, [X8 + 0x12E]
	0x031C44C4 CBZ X9, 0x31C44E8
	0x031C44C8 LDR X10, [X8 + 0xB0]
	0x031C44CC ADD X10, X10, 0x8
	0x031C44D0 LDUR X11, [X10 - 0x8]
	0x031C44D4 CMP X11, X1

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x1218000
	011 Move W8, [X21+3972]
	012 Move W20, W1
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0xF5C000
	023 Move X0, [X0+2480]
	024 Call 0x1C17CF4
	025 Move X0, 0xF30000
	026 Move X0, [X0+3584]
	027 Call 0x1C17CF4
	028 Move X0, 0xF30000
	029 Move X0, [X0+3608]
	030 Call 0x1C17CF4
	031 Move X0, 0xF30000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0xF32000
	035 Move X0, [X0+1592]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+3972], W8
	039 Compare X19, 0
	040 JumpIfEqual {216}
	041 Move X0, X19
	042 Move X1, X31
	043 Call Component.get_gameObject, X0
	044 Compare X0, 0
	045 JumpIfEqual {216}
	046 Move X8, 0xF5C000
	047 Move X8, [X8+2480]
	048 Move X21, 0xF30000
	049 Move X1, [X8]
	050 Move X21, [X21+1432]
	051 Call 0x21E62E4, X0
	052 Move X8, [X21]
	053 Move X21, X0
	054 Move W9, [X8+224]
	055 Compare W9, 0
	056 JumpIfNotEqual {59}
	057 Move X0, X8
	058 Call 0x1C17DFC
	059 Move X0, X21
	060 Move X1, X31
	061 Move X2, X31
	062 Call Object.op_Inequality, X0, X1
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {92}
	067 Compare X21, 0
	068 JumpIfEqual {216}
	069 Move X0, X21
	070 Move X1, X31
	071 Call Renderer.get_materials, X0
	072 Compare X0, 0
	073 JumpIfEqual {216}
	074 Move W8, [X0+24]
	075 Move X21, X0
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move W22, W31
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Add X8, X21, W22
	080 Move X0, [X8+32]
	081 Compare X0, 0
	082 JumpIfEqual {216}
	083 Move V0, V11
	084 Move V1, V10
	085 Move V2, V9
	086 Move V3, V8
	087 Move X1, X31
	088 Call Material.set_color, X0, X1
	089 Move W8, [X21+24]
	090 Add W22, W22, 1
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move TEMP, X20
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {206}
	096 Move X0, X19
	097 Move X1, X31
	098 Call Transform.get_childCount, X0
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X0, X19
	101 Move X1, X31
	102 Call Transform.GetEnumerator, X0
	103 Move X19, X0
	104 Compare X0, 0
	105 JumpIfEqual {219}
	106 Move X20, 0xF30000
	107 Move X21, 0xF32000
	108 Move X20, [X20+3608]
	109 Move X21, [X21+1592]
	110 Move X8, [X19]
	111 Move X1, [X20]
	112 NotImplemented "Instruction LDRH not yet implemented."
	113 Compare X9, 0
	114 JumpIfEqual {121}
	115 Move X10, [X8+176]
	116 Add X10, X10, 8
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Subtract X9, X9, 1
	120 Add X10, X10, 16
	121 Move X0, X19
	122 Move W2, W31
	123 Call 0x1C5D788
	124 NotImplemented "Instruction LDRSW not yet implemented."
	125 Add X8, X8, X9
	126 Add X0, X8, 312
	127 Move X8, [X0]
	128 Move X1, [X0+8]
	129 Move X0, X19
	130 NotImplemented "Instruction BLR not yet implemented."
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {174}
	135 Move X8, [X19]
	136 Move X1, [X20]
	137 NotImplemented "Instruction LDRH not yet implemented."
	138 Compare X9, 0
	139 JumpIfEqual {146}
	140 Move X10, [X8+176]
	141 Add X10, X10, 8
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Subtract X9, X9, 1
	145 Add X10, X10, 16
	146 Move W2, 1
	147 Move X0, X19
	148 Call 0x1C5D788
	149 Move W9, [X10]
	150 Add W9, W9, 1
	151 Add X8, X8, W9
	152 Add X0, X8, 312
	153 Move X8, [X0]
	154 Move X1, [X0+8]
	155 Move X0, X19
	156 NotImplemented "Instruction BLR not yet implemented."
	157 Compare X0, 0
	158 JumpIfEqual {168}
	159 Move X8, [X0]
	160 Move X1, [X21]
	161 Move W10, [X8+304]
	162 Move W9, [X1+304]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X8, [X8+200]
	165 Add X8, X8, X9
	166 NotImplemented "Instruction LDUR not yet implemented."
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Move W1, 1
	169 Move V0, V11
	170 Move V1, V10
	171 Move V2, V9
	172 Move V3, V8
	173 Call LTDescr.colorRecursive, X0, X1, X2
	174 Move X20, X31
	175 Move X21, 0xF30000
	176 Move X21, [X21+3584]
	177 Move X0, X19
	178 Move X1, [X21]
	179 Call 0x1C17E00
	180 Compare X0, 0
	181 JumpIfEqual {204}
	182 Move X8, [X0]
	183 Move X1, [X21]
	184 Move X19, X0
	185 NotImplemented "Instruction LDRH not yet implemented."
	186 Compare X9, 0
	187 JumpIfEqual {194}
	188 Move X10, [X8+176]
	189 Add X10, X10, 8
	190 NotImplemented "Instruction LDUR not yet implemented."
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Subtract X9, X9, 1
	193 Add X10, X10, 16
	194 Move X0, X19
	195 Move W2, W31
	196 Call 0x1C5D788
	197 NotImplemented "Instruction LDRSW not yet implemented."
	198 Add X8, X8, X9
	199 Add X0, X8, 312
	200 Move X8, [X0]
	201 Move X1, [X0+8]
	202 Move X0, X19
	203 NotImplemented "Instruction BLR not yet implemented."
	204 Compare X20, 0
	205 JumpIfNotEqual {220}
	206 Move X20, [X31+64]
	207 Move X19, [X31+72]
	208 Move X22, [X31+48]
	209 Move X21, [X31+56]
	210 Move X30, [X31+32]
	211 Move D9, [X31+16]
	212 Move D8, [X31+24]
	213 Move D11, [X31+80]
	214 Move D10, [X31+88]
	215 Return 
	216 Call 0x1C17F20
	217 Call 0x1C181E0
	218 Call 0x1C17F28
	219 Call 0x1C17F20
	220 Move X0, X20
	221 Call 0x1C17F18
	222 Move X21, X0
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X0, X21
	225 Call 0x3EB2AD0
	226 Move X20, [X0]
	227 Call 0x3EB2AE0
	228 Move X20, X31
	229 Move X21, X0
	230 Move X22, 0xF30000
	231 Move X22, [X22+3584]
	232 Move X1, [X22]
	233 Move X0, X19
	234 Call 0x1C17E00
	235 Move X19, X0
	236 Compare X0, 0
	237 JumpIfEqual {259}
	238 Move X8, [X19]
	239 Move X1, [X22]
	240 NotImplemented "Instruction LDRH not yet implemented."
	241 Compare X9, 0
	242 JumpIfEqual {249}
	243 Move X10, [X8+176]
	244 Add X10, X10, 8
	245 NotImplemented "Instruction LDUR not yet implemented."
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Subtract X9, X9, 1
	248 Add X10, X10, 16
	249 Move X0, X19
	250 Move W2, W31
	251 Call 0x1C5D788
	252 NotImplemented "Instruction LDRSW not yet implemented."
	253 Add X8, X8, X9
	254 Add X0, X8, 312
	255 Move X8, [X0]
	256 Move X1, [X0+8]
	257 Move X0, X19
	258 NotImplemented "Instruction BLR not yet implemented."
	259 Compare X20, 0
	260 JumpIfNotEqual {263}
	261 Move X0, X21
	262 Call 0x1D2D690
	263 Move X0, X20
	264 Call 0x1C17F18
	265 Call 0x1991590

Method: System.Void alphaRecursive(UnityEngine.RectTransform rectTransform, System.Single val, System.Int32 recursiveLevel = 0)

Disassembly:
	0x031C44D8 B.EQ 0x31C44F8
	0x031C44DC SUBS X9, X9, 0x1
	0x031C44E0 ADD X10, X10, 0x10
	0x031C44E4 B.NE 0x31C44D0
	0x031C44E8 MOV X0, X19
	0x031C44EC MOV W2, W31
	0x031C44F0 BL 0x1C5C788
	0x031C44F4 B 0x31C4504
	0x031C44F8 LDRSW X9, [X10]
	0x031C44FC ADD X8, X8, X9, 0x4, LSL
	0x031C4500 ADD X0, X8, 0x138
	0x031C4504 LDP X8, X1, [X0]
	0x031C4508 MOV X0, X19
	0x031C450C BLR X8
	0x031C4510 CBNZ X20, 0x31C451C
	0x031C4514 LDR X0, [X31 + 0x8]
	0x031C4518 BL 0x1D2C690
	0x031C451C MOV X0, X20
	0x031C4520 BL 0x1C16F18
	0x031C4524 BL 0x1990590
	0x031C4528 STR D8, [X31 - 0x50]!
	0x031C452C STP X30, X25, [X31 + 0x10]
	0x031C4530 STP X24, X23, [X31 + 0x20]
	0x031C4534 STP X22, X21, [X31 + 0x30]
	0x031C4538 STP X20, X19, [X31 + 0x40]
	0x031C453C ADRP X21, 0x1217000
	0x031C4540 LDRB W8, [X21 + 0xF89]
	0x031C4544 MOV W20, W1
	0x031C4548 MOV V8.16B, V0.16B
	0x031C454C MOV X19, X0
	0x031C4550 TBNZ X8, 0x0, 0x31C4598
	0x031C4554 ADRP X0, 0xF5B000
	0x031C4558 LDR X0, [X0 + 0x9D8]
	0x031C455C BL 0x1C16CF4
	0x031C4560 ADRP X0, 0xF2F000
	0x031C4564 LDR X0, [X0 + 0xE00]
	0x031C4568 BL 0x1C16CF4
	0x031C456C ADRP X0, 0xF2F000
	0x031C4570 LDR X0, [X0 + 0xE18]
	0x031C4574 BL 0x1C16CF4
	0x031C4578 ADRP X0, 0xF2F000
	0x031C457C LDR X0, [X0 + 0x598]
	0x031C4580 BL 0x1C16CF4
	0x031C4584 ADRP X0, 0xF31000
	0x031C4588 LDR X0, [X0 + 0x638]
	0x031C458C BL 0x1C16CF4
	0x031C4590 MOVZ W8, 0x1
	0x031C4594 STRB W8, [X21 + 0xF89]
	0x031C4598 TBZ X20, 0x0, 0x31C47C8
	0x031C459C CBZ X19, 0x31C47F0
	0x031C45A0 MOV X0, X19
	0x031C45A4 MOV X1, X31
	0x031C45A8 BL 0x3C40C8C
	0x031C45AC CMP W0, 0x1
	0x031C45B0 B.LT 0x31C47C8
	0x031C45B4 MOV X0, X19
	0x031C45B8 MOV X1, X31
	0x031C45BC BL 0x3C4100C
	0x031C45C0 MOV X19, X0
	0x031C45C4 CBZ X0, 0x31C47F4
	0x031C45C8 ADRP X22, 0xF2F000
	0x031C45CC ADRP X23, 0xF31000
	0x031C45D0 ADRP X24, 0xF5B000
	0x031C45D4 ADRP X25, 0xF2F000
	0x031C45D8 LDR X22, [X22 + 0xE18]
	0x031C45DC LDR X23, [X23 + 0x638]
	0x031C45E0 LDR X24, [X24 + 0x9D8]
	0x031C45E4 LDR X25, [X25 + 0x598]
	0x031C45E8 LDR X8, [X19]
	0x031C45EC LDR X1, [X22]
	0x031C45F0 LDRH W9, [X8 + 0x12E]
	0x031C45F4 CBZ X9, 0x31C4618
	0x031C45F8 LDR X10, [X8 + 0xB0]
	0x031C45FC ADD X10, X10, 0x8
	0x031C4600 LDUR X11, [X10 - 0x8]
	0x031C4604 CMP X11, X1
	0x031C4608 B.EQ 0x31C4628
	0x031C460C SUBS X9, X9, 0x1
	0x031C4610 ADD X10, X10, 0x10
	0x031C4614 B.NE 0x31C4600
	0x031C4618 MOV X0, X19
	0x031C461C MOV W2, W31
	0x031C4620 BL 0x1C5C788
	0x031C4624 B 0x31C4634
	0x031C4628 LDRSW X9, [X10]
	0x031C462C ADD X8, X8, X9, 0x4, LSL
	0x031C4630 ADD X0, X8, 0x138
	0x031C4634 LDP X8, X1, [X0]
	0x031C4638 MOV X0, X19
	0x031C463C BLR X8
	0x031C4640 TBZ X0, 0x0, 0x31C474C
	0x031C4644 LDR X8, [X19]
	0x031C4648 LDR X1, [X22]
	0x031C464C LDRH W9, [X8 + 0x12E]
	0x031C4650 CBZ X9, 0x31C4674
	0x031C4654 LDR X10, [X8 + 0xB0]
	0x031C4658 ADD X10, X10, 0x8
	0x031C465C LDUR X11, [X10 - 0x8]
	0x031C4660 CMP X11, X1
	0x031C4664 B.EQ 0x31C4684
	0x031C4668 SUBS X9, X9, 0x1
	0x031C466C ADD X10, X10, 0x10
	0x031C4670 B.NE 0x31C465C
	0x031C4674 MOVZ W2, 0x1
	0x031C4678 MOV X0, X19
	0x031C467C BL 0x1C5C788
	0x031C4680 B 0x31C4694
	0x031C4684 LDR W9, [X10]
	0x031C4688 ADD W9, W9, 0x1
	0x031C468C ADD X8, X8, W9, 0x4, SXTW
	0x031C4690 ADD X0, X8, 0x138
	0x031C4694 LDP X8, X1, [X0]
	0x031C4698 MOV X0, X19
	0x031C469C BLR X8
	0x031C46A0 MOV X20, X0
	0x031C46A4 CBZ X0, 0x31C47E8
	0x031C46A8 LDR X8, [X20]
	0x031C46AC LDR X1, [X23]
	0x031C46B0 LDRB W10, [X8 + 0x130]
	0x031C46B4 LDRB W9, [X1 + 0x130]
	0x031C46B8 CMP W10, W9
	0x031C46BC B.CC 0x31C47E0
	0x031C46C0 LDR X8, [X8 + 0xC8]
	0x031C46C4 ADD X8, X8, X9, 0x3, LSL
	0x031C46C8 LDUR X8, [X8 - 0x8]
	0x031C46CC CMP X8, X1
	0x031C46D0 B.NE 0x31C47E0
	0x031C46D4 LDR X1, [X24]
	0x031C46D8 MOV X0, X20
	0x031C46DC BL 0x21A3894
	0x031C46E0 MOV X21, X0
	0x031C46E4 LDR X0, [X25]
	0x031C46E8 LDR W8, [X0 + 0xE0]
	0x031C46EC CBNZ W8, 0x31C46F4
	0x031C46F0 BL 0x1C16DFC
	0x031C46F4 MOV X0, X21
	0x031C46F8 MOV X1, X31
	0x031C46FC MOV X2, X31
	0x031C4700 BL 0x3C354F8
	0x031C4704 TBZ X0, 0x0, 0x31C4738
	0x031C4708 CBZ X21, 0x31C47EC
	0x031C470C LDR X8, [X21]
	0x031C4710 LDR X1, [X8 + 0x2A0]
	0x031C4714 LDR X9, [X8 + 0x298]
	0x031C4718 MOV X0, X21
	0x031C471C BLR X9
	0x031C4720 LDR X8, [X21]
	0x031C4724 LDR X1, [X8 + 0x2B0]
	0x031C4728 LDR X9, [X8 + 0x2A8]
	0x031C472C MOV X0, X21
	0x031C4730 MOV V3.16B, V8.16B
	0x031C4734 BLR X9
	0x031C4738 MOVZ W1, 0x1
	0x031C473C MOV X0, X20
	0x031C4740 MOV V0.16B, V8.16B
	0x031C4744 BL 0x31C4528
	0x031C4748 B 0x31C45E8
	0x031C474C MOV X20, X31
	0x031C4750 ADRP X21, 0xF2F000
	0x031C4754 LDR X21, [X21 + 0xE00]
	0x031C4758 MOV X0, X19
	0x031C475C LDR X1, [X21]
	0x031C4760 BL 0x1C16E00
	0x031C4764 CBZ X0, 0x31C47C4
	0x031C4768 LDR X8, [X0]
	0x031C476C LDR X1, [X21]
	0x031C4770 MOV X19, X0
	0x031C4774 LDRH W9, [X8 + 0x12E]
	0x031C4778 CBZ X9, 0x31C479C
	0x031C477C LDR X10, [X8 + 0xB0]
	0x031C4780 ADD X10, X10, 0x8
	0x031C4784 LDUR X11, [X10 - 0x8]
	0x031C4788 CMP X11, X1
	0x031C478C B.EQ 0x31C47AC
	0x031C4790 SUBS X9, X9, 0x1
	0x031C4794 ADD X10, X10, 0x10
	0x031C4798 B.NE 0x31C4784
	0x031C479C MOV X0, X19
	0x031C47A0 MOV W2, W31
	0x031C47A4 BL 0x1C5C788
	0x031C47A8 B 0x31C47B8
	0x031C47AC LDRSW X9, [X10]
	0x031C47B0 ADD X8, X8, X9, 0x4, LSL
	0x031C47B4 ADD X0, X8, 0x138
	0x031C47B8 LDP X8, X1, [X0]
	0x031C47BC MOV X0, X19
	0x031C47C0 BLR X8
	0x031C47C4 CBNZ X20, 0x31C47F8
	0x031C47C8 LDP X20, X19, [X31 + 0x40]
	0x031C47CC LDP X22, X21, [X31 + 0x30]
	0x031C47D0 LDP X24, X23, [X31 + 0x20]
	0x031C47D4 LDP X30, X25, [X31 + 0x10]
	0x031C47D8 LDR V8, [X31], #0x50
	0x031C47DC RET
	0x031C47E0 MOV X0, X20
	0x031C47E4 BL 0x1C171E0
	0x031C47E8 BL 0x1C16F20
	0x031C47EC BL 0x1C16F20
	0x031C47F0 BL 0x1C16F20
	0x031C47F4 BL 0x1C16F20
	0x031C47F8 MOV X0, X20
	0x031C47FC BL 0x1C16F18
	0x031C4800 B 0x31C4828
	0x031C4804 B 0x31C4828
	0x031C4808 B 0x31C4828
	0x031C480C B 0x31C4828
	0x031C4810 B 0x31C4828
	0x031C4814 B 0x31C4828
	0x031C4818 B 0x31C4828
	0x031C481C B 0x31C4828
	0x031C4820 B 0x31C4828
	0x031C4824 B 0x31C4828
	0x031C4828 MOV X21, X0
	0x031C482C CMP W1, 0x1
	0x031C4830 B.NE 0x31C4848
	0x031C4834 MOV X0, X21
	0x031C4838 BL 0x3EB1AD0
	0x031C483C LDR X20, [X0]
	0x031C4840 BL 0x3EB1AE0
	0x031C4844 B 0x31C4750
	0x031C4848 MOV X20, X31
	0x031C484C B 0x31C4854
	0x031C4850 MOV X21, X0
	0x031C4854 ADRP X22, 0xF2F000
	0x031C4858 LDR X22, [X22 + 0xE00]
	0x031C485C LDR X1, [X22]
	0x031C4860 MOV X0, X19
	0x031C4864 BL 0x1C16E00
	0x031C4868 MOV X19, X0
	0x031C486C CBZ X0, 0x31C48C8
	0x031C4870 LDR X8, [X19]
	0x031C4874 LDR X1, [X22]
	0x031C4878 LDRH W9, [X8 + 0x12E]
	0x031C487C CBZ X9, 0x31C48A0
	0x031C4880 LDR X10, [X8 + 0xB0]
	0x031C4884 ADD X10, X10, 0x8
	0x031C4888 LDUR X11, [X10 - 0x8]
	0x031C488C CMP X11, X1
	0x031C4890 B.EQ 0x31C48B0
	0x031C4894 SUBS X9, X9, 0x1
	0x031C4898 ADD X10, X10, 0x10
	0x031C489C B.NE 0x31C4888
	0x031C48A0 MOV X0, X19
	0x031C48A4 MOV W2, W31
	0x031C48A8 BL 0x1C5C788
	0x031C48AC B 0x31C48BC
	0x031C48B0 LDRSW X9, [X10]
	0x031C48B4 ADD X8, X8, X9, 0x4, LSL
	0x031C48B8 ADD X0, X8, 0x138
	0x031C48BC LDP X8, X1, [X0]
	0x031C48C0 MOV X0, X19
	0x031C48C4 BLR X8
	0x031C48C8 CBNZ X20, 0x31C48D4
	0x031C48CC MOV X0, X21
	0x031C48D0 BL 0x1D2C690
	0x031C48D4 MOV X0, X20
	0x031C48D8 BL 0x1C16F18
	0x031C48DC BL 0x1990590
	0x031C48E0 STR D8, [X31 - 0x30]!
	0x031C48E4 STR X30, [X31 + 0x8]
	0x031C48E8 STP X22, X21, [X31 + 0x10]
	0x031C48EC STP X20, X19, [X31 + 0x20]
	0x031C48F0 ADRP X21, 0x1217000
	0x031C48F4 LDRB W8, [X21 + 0xF8A]
	0x031C48F8 MOV W20, W1
	0x031C48FC MOV V8.16B, V0.16B
	0x031C4900 MOV X19, X0
	0x031C4904 TBNZ X8, 0x0, 0x31C494C
	0x031C4908 ADRP X0, 0xF5B000
	0x031C490C LDR X0, [X0 + 0x9D8]
	0x031C4910 BL 0x1C16CF4
	0x031C4914 ADRP X0, 0xF2F000

ISIL:
	001 Move [X31-96], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x1218000
	014 Move W8, [X21+3973]
	015 Move W20, W1
	016 Move V8, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {42}
	022 Move X0, 0xF5C000
	023 Move X0, [X0+2496]
	024 Call 0x1C17CF4
	025 Move X0, 0xF5C000
	026 Move X0, [X0+2504]
	027 Call 0x1C17CF4
	028 Move X0, 0xF30000
	029 Move X0, [X0+3584]
	030 Call 0x1C17CF4
	031 Move X0, 0xF30000
	032 Move X0, [X0+3608]
	033 Call 0x1C17CF4
	034 Move X0, 0xF30000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move X0, 0xF57000
	038 Move X0, [X0+3184]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+3973], W8
	042 Compare X19, 0
	043 JumpIfEqual {232}
	044 Move X0, X19
	045 Move X1, X31
	046 Call Transform.get_childCount, X0
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X23, 0xF30000
	049 Move X23, [X23+3584]
	050 Move X0, X19
	051 Move X1, X31
	052 Call Transform.GetEnumerator, X0
	053 Move X19, X0
	054 Compare X0, 0
	055 JumpIfEqual {233}
	056 Move X24, 0xF30000
	057 Move X25, 0xF57000
	058 Move X26, 0xF5C000
	059 Move X27, 0xF30000
	060 Move X28, 0xF5C000
	061 Move X24, [X24+3608]
	062 Move X25, [X25+3184]
	063 Move X26, [X26+2496]
	064 Move X27, [X27+1432]
	065 Move X28, [X28+2504]
	066 Add W20, W20, 1
	067 Move X8, [X19]
	068 Move X1, [X24]
	069 NotImplemented "Instruction LDRH not yet implemented."
	070 Compare X9, 0
	071 JumpIfEqual {78}
	072 Move X10, [X8+176]
	073 Add X10, X10, 8
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Subtract X9, X9, 1
	077 Add X10, X10, 16
	078 Move X0, X19
	079 Move W2, W31
	080 Call 0x1C5D788
	081 NotImplemented "Instruction LDRSW not yet implemented."
	082 Add X8, X8, X9
	083 Add X0, X8, 312
	084 Move X8, [X0]
	085 Move X1, [X0+8]
	086 Move X0, X19
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {184}
	092 Move X8, [X19]
	093 Move X1, [X24]
	094 NotImplemented "Instruction LDRH not yet implemented."
	095 Compare X9, 0
	096 JumpIfEqual {103}
	097 Move X10, [X8+176]
	098 Add X10, X10, 8
	099 NotImplemented "Instruction LDUR not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Subtract X9, X9, 1
	102 Add X10, X10, 16
	103 Move W2, 1
	104 Move X0, X19
	105 Call 0x1C5D788
	106 Move W9, [X10]
	107 Add W9, W9, 1
	108 Add X8, X8, W9
	109 Add X0, X8, 312
	110 Move X8, [X0]
	111 Move X1, [X0+8]
	112 Move X0, X19
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move X21, X0
	115 Compare X0, 0
	116 JumpIfEqual {229}
	117 Move X1, [X25]
	118 Move X8, [X21]
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X1, [X26]
	121 Move X0, X21
	122 Call 0x21A4894, X0
	123 Move X22, X0
	124 Move X0, [X27]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move X0, X22
	130 Move X1, X31
	131 Move X2, X31
	132 Call Object.op_Inequality, X0, X1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {150}
	137 Compare X22, 0
	138 JumpIfEqual {230}
	139 Move X8, [X22]
	140 Move X1, [X8+672]
	141 Move X9, [X8+664]
	142 Move X0, X22
	143 NotImplemented "Instruction BLR not yet implemented."
	144 Move X8, [X22]
	145 Move X1, [X8+688]
	146 Move X9, [X8+680]
	147 Move X0, X22
	148 Move V3, V8
	149 NotImplemented "Instruction BLR not yet implemented."
	150 Move X1, [X28]
	151 Move X0, X21
	152 Call 0x21A4894, X0
	153 Move X22, X0
	154 Move X0, [X27]
	155 Move W8, [X0+224]
	156 Compare W8, 0
	157 JumpIfNotEqual {159}
	158 Call 0x1C17DFC
	159 Move X0, X22
	160 Move X1, X31
	161 Move X2, X31
	162 Call Object.op_Inequality, X0, X1
	163 Move TEMP, X0
	164 And TEMP, TEMP, 1
	165 Compare TEMP, 1
	166 JumpIfNotEqual {180}
	167 Compare X22, 0
	168 JumpIfEqual {231}
	169 Move X8, [X22]
	170 Move X1, [X8+672]
	171 Move X9, [X8+664]
	172 Move X0, X22
	173 NotImplemented "Instruction BLR not yet implemented."
	174 Move X8, [X22]
	175 Move X1, [X8+688]
	176 Move X9, [X8+680]
	177 Move X0, X22
	178 Move V3, V8
	179 NotImplemented "Instruction BLR not yet implemented."
	180 Move X0, X21
	181 Move V0, V8
	182 Move W1, W20
	183 Call LTDescr.alphaRecursive, X0, V0, X1
	184 Move X21, X31
	185 Move X1, [X23]
	186 Move X0, X19
	187 Call 0x1C17E00
	188 Compare X0, 0
	189 JumpIfEqual {212}
	190 Move X8, [X0]
	191 Move X1, [X23]
	192 Move X19, X0
	193 NotImplemented "Instruction LDRH not yet implemented."
	194 Compare X9, 0
	195 JumpIfEqual {202}
	196 Move X10, [X8+176]
	197 Add X10, X10, 8
	198 NotImplemented "Instruction LDUR not yet implemented."
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Subtract X9, X9, 1
	201 Add X10, X10, 16
	202 Move X0, X19
	203 Move W2, W31
	204 Call 0x1C5D788
	205 NotImplemented "Instruction LDRSW not yet implemented."
	206 Add X8, X8, X9
	207 Add X0, X8, 312
	208 Move X8, [X0]
	209 Move X1, [X0+8]
	210 Move X0, X19
	211 NotImplemented "Instruction BLR not yet implemented."
	212 Compare X21, 0
	213 JumpIfNotEqual {234}
	214 Move X20, [X31+80]
	215 Move X19, [X31+88]
	216 Move X22, [X31+64]
	217 Move X21, [X31+72]
	218 Move X24, [X31+48]
	219 Move X23, [X31+56]
	220 Move X26, [X31+32]
	221 Move X25, [X31+40]
	222 Move X28, [X31+16]
	223 Move X27, [X31+24]
	224 Move X30, [X31+8]
	225 Move V8, [X31+96]
	226 Return 
	227 Move X0, X21
	228 Call 0x1C181E0
	229 Call 0x1C17F20
	230 Call 0x1C17F20
	231 Call 0x1C17F20
	232 Call 0x1C17F20
	233 Call 0x1C17F20
	234 Move X0, X21
	235 Call 0x1C17F18
	236 Move X20, X0
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X0, X20
	239 Call 0x3EB2AD0
	240 Move X21, [X0]
	241 Call 0x3EB2AE0
	242 Move X21, X31
	243 Move X20, X0
	244 Move X1, [X23]
	245 Move X0, X19
	246 Call 0x1C17E00
	247 Move X19, X0
	248 Compare X0, 0
	249 JumpIfEqual {271}
	250 Move X8, [X19]
	251 Move X1, [X23]
	252 NotImplemented "Instruction LDRH not yet implemented."
	253 Compare X9, 0
	254 JumpIfEqual {261}
	255 Move X10, [X8+176]
	256 Add X10, X10, 8
	257 NotImplemented "Instruction LDUR not yet implemented."
	258 NotImplemented "Instruction CMP not yet implemented."
	259 Subtract X9, X9, 1
	260 Add X10, X10, 16
	261 Move X0, X19
	262 Move W2, W31
	263 Call 0x1C5D788
	264 NotImplemented "Instruction LDRSW not yet implemented."
	265 Add X8, X8, X9
	266 Add X0, X8, 312
	267 Move X8, [X0]
	268 Move X1, [X0+8]
	269 Move X0, X19
	270 NotImplemented "Instruction BLR not yet implemented."
	271 Compare X21, 0
	272 JumpIfNotEqual {275}
	273 Move X0, X20
	274 Call 0x1D2D690
	275 Move X0, X21
	276 Call 0x1C17F18
	277 Call 0x1991590

Method: System.Void alphaRecursiveSprite(UnityEngine.Transform transform, System.Single val)

Disassembly:
	0x031C4918 LDR X0, [X0 + 0xE00]
	0x031C491C BL 0x1C16CF4
	0x031C4920 ADRP X0, 0xF2F000
	0x031C4924 LDR X0, [X0 + 0xE18]
	0x031C4928 BL 0x1C16CF4
	0x031C492C ADRP X0, 0xF2F000
	0x031C4930 LDR X0, [X0 + 0x598]
	0x031C4934 BL 0x1C16CF4
	0x031C4938 ADRP X0, 0xF31000
	0x031C493C LDR X0, [X0 + 0x638]
	0x031C4940 BL 0x1C16CF4
	0x031C4944 MOVZ W8, 0x1
	0x031C4948 STRB W8, [X21 + 0xF8A]
	0x031C494C CBZ X19, 0x31C4B90
	0x031C4950 ADRP X8, 0xF5B000
	0x031C4954 LDR X8, [X8 + 0x9D8]
	0x031C4958 ADRP X21, 0xF2F000
	0x031C495C MOV X0, X19
	0x031C4960 LDR X1, [X8]
	0x031C4964 LDR X21, [X21 + 0x598]
	0x031C4968 BL 0x21A3894
	0x031C496C LDR X8, [X21]
	0x031C4970 MOV X21, X0
	0x031C4974 LDR W9, [X8 + 0xE0]
	0x031C4978 CBNZ W9, 0x31C4984
	0x031C497C MOV X0, X8
	0x031C4980 BL 0x1C16DFC
	0x031C4984 MOV X0, X21
	0x031C4988 MOV X1, X31
	0x031C498C MOV X2, X31
	0x031C4990 BL 0x3C354F8
	0x031C4994 TBZ X0, 0x0, 0x31C49C8
	0x031C4998 CBZ X21, 0x31C4B90
	0x031C499C LDR X8, [X21]
	0x031C49A0 MOV X0, X21
	0x031C49A4 LDR X9, [X8 + 0x298]
	0x031C49A8 LDR X1, [X8 + 0x2A0]
	0x031C49AC BLR X9
	0x031C49B0 LDR X8, [X21]
	0x031C49B4 MOV X0, X21
	0x031C49B8 MOV V3.16B, V8.16B
	0x031C49BC LDR X9, [X8 + 0x2A8]
	0x031C49C0 LDR X1, [X8 + 0x2B0]
	0x031C49C4 BLR X9
	0x031C49C8 TBZ X20, 0x0, 0x31C4B78
	0x031C49CC MOV X0, X19
	0x031C49D0 MOV X1, X31
	0x031C49D4 BL 0x3C40C8C
	0x031C49D8 CMP W0, 0x1
	0x031C49DC B.LT 0x31C4B78
	0x031C49E0 MOV X0, X19
	0x031C49E4 MOV X1, X31
	0x031C49E8 BL 0x3C4100C
	0x031C49EC MOV X19, X0
	0x031C49F0 CBZ X0, 0x31C4B94
	0x031C49F4 ADRP X20, 0xF2F000
	0x031C49F8 ADRP X21, 0xF31000
	0x031C49FC LDR X20, [X20 + 0xE18]
	0x031C4A00 LDR X21, [X21 + 0x638]
	0x031C4A04 LDR X8, [X19]
	0x031C4A08 LDR X1, [X20]
	0x031C4A0C LDRH W9, [X8 + 0x12E]
	0x031C4A10 CBZ X9, 0x31C4A34
	0x031C4A14 LDR X10, [X8 + 0xB0]
	0x031C4A18 ADD X10, X10, 0x8
	0x031C4A1C LDUR X11, [X10 - 0x8]
	0x031C4A20 CMP X11, X1
	0x031C4A24 B.EQ 0x31C4A44
	0x031C4A28 SUBS X9, X9, 0x1
	0x031C4A2C ADD X10, X10, 0x10
	0x031C4A30 B.NE 0x31C4A1C
	0x031C4A34 MOV X0, X19
	0x031C4A38 MOV W2, W31
	0x031C4A3C BL 0x1C5C788
	0x031C4A40 B 0x31C4A50
	0x031C4A44 LDRSW X9, [X10]
	0x031C4A48 ADD X8, X8, X9, 0x4, LSL
	0x031C4A4C ADD X0, X8, 0x138
	0x031C4A50 LDP X8, X1, [X0]
	0x031C4A54 MOV X0, X19
	0x031C4A58 BLR X8
	0x031C4A5C TBZ X0, 0x0, 0x31C4AFC
	0x031C4A60 LDR X8, [X19]
	0x031C4A64 LDR X1, [X20]
	0x031C4A68 LDRH W9, [X8 + 0x12E]
	0x031C4A6C CBZ X9, 0x31C4A90
	0x031C4A70 LDR X10, [X8 + 0xB0]
	0x031C4A74 ADD X10, X10, 0x8
	0x031C4A78 LDUR X11, [X10 - 0x8]
	0x031C4A7C CMP X11, X1
	0x031C4A80 B.EQ 0x31C4AA0
	0x031C4A84 SUBS X9, X9, 0x1
	0x031C4A88 ADD X10, X10, 0x10
	0x031C4A8C B.NE 0x31C4A78
	0x031C4A90 MOVZ W2, 0x1
	0x031C4A94 MOV X0, X19
	0x031C4A98 BL 0x1C5C788
	0x031C4A9C B 0x31C4AB0
	0x031C4AA0 LDR W9, [X10]
	0x031C4AA4 ADD W9, W9, 0x1
	0x031C4AA8 ADD X8, X8, W9, 0x4, SXTW
	0x031C4AAC ADD X0, X8, 0x138
	0x031C4AB0 LDP X8, X1, [X0]
	0x031C4AB4 MOV X0, X19
	0x031C4AB8 BLR X8
	0x031C4ABC CBZ X0, 0x31C4AEC
	0x031C4AC0 LDR X8, [X0]
	0x031C4AC4 LDR X1, [X21]
	0x031C4AC8 LDRB W10, [X8 + 0x130]
	0x031C4ACC LDRB W9, [X1 + 0x130]
	0x031C4AD0 CMP W10, W9
	0x031C4AD4 B.CC 0x31C4B8C
	0x031C4AD8 LDR X8, [X8 + 0xC8]
	0x031C4ADC ADD X8, X8, X9, 0x3, LSL
	0x031C4AE0 LDUR X8, [X8 - 0x8]
	0x031C4AE4 CMP X8, X1
	0x031C4AE8 B.NE 0x31C4B8C
	0x031C4AEC MOVZ W1, 0x1
	0x031C4AF0 MOV V0.16B, V8.16B
	0x031C4AF4 BL 0x31C48E0
	0x031C4AF8 B 0x31C4A04
	0x031C4AFC MOV X20, X31
	0x031C4B00 ADRP X21, 0xF2F000
	0x031C4B04 LDR X21, [X21 + 0xE00]
	0x031C4B08 MOV X0, X19
	0x031C4B0C LDR X1, [X21]
	0x031C4B10 BL 0x1C16E00
	0x031C4B14 CBZ X0, 0x31C4B74
	0x031C4B18 LDR X8, [X0]
	0x031C4B1C LDR X1, [X21]
	0x031C4B20 MOV X19, X0
	0x031C4B24 LDRH W9, [X8 + 0x12E]
	0x031C4B28 CBZ X9, 0x31C4B4C
	0x031C4B2C LDR X10, [X8 + 0xB0]
	0x031C4B30 ADD X10, X10, 0x8
	0x031C4B34 LDUR X11, [X10 - 0x8]
	0x031C4B38 CMP X11, X1
	0x031C4B3C B.EQ 0x31C4B5C
	0x031C4B40 SUBS X9, X9, 0x1
	0x031C4B44 ADD X10, X10, 0x10
	0x031C4B48 B.NE 0x31C4B34
	0x031C4B4C MOV X0, X19
	0x031C4B50 MOV W2, W31
	0x031C4B54 BL 0x1C5C788
	0x031C4B58 B 0x31C4B68
	0x031C4B5C LDRSW X9, [X10]
	0x031C4B60 ADD X8, X8, X9, 0x4, LSL
	0x031C4B64 ADD X0, X8, 0x138
	0x031C4B68 LDP X8, X1, [X0]
	0x031C4B6C MOV X0, X19
	0x031C4B70 BLR X8
	0x031C4B74 CBNZ X20, 0x31C4B98
	0x031C4B78 LDP X20, X19, [X31 + 0x20]
	0x031C4B7C LDP X22, X21, [X31 + 0x10]
	0x031C4B80 LDR X30, [X31 + 0x8]
	0x031C4B84 LDR V8, [X31], #0x30
	0x031C4B88 RET
	0x031C4B8C BL 0x1C171E0
	0x031C4B90 BL 0x1C16F20
	0x031C4B94 BL 0x1C16F20
	0x031C4B98 MOV X0, X20
	0x031C4B9C BL 0x1C16F18
	0x031C4BA0 B 0x31C4BB0
	0x031C4BA4 B 0x31C4BB0
	0x031C4BA8 B 0x31C4BB0
	0x031C4BAC B 0x31C4BB0
	0x031C4BB0 MOV X21, X0
	0x031C4BB4 CMP W1, 0x1
	0x031C4BB8 B.NE 0x31C4BD0
	0x031C4BBC MOV X0, X21
	0x031C4BC0 BL 0x3EB1AD0
	0x031C4BC4 LDR X20, [X0]
	0x031C4BC8 BL 0x3EB1AE0
	0x031C4BCC B 0x31C4B00
	0x031C4BD0 MOV X20, X31
	0x031C4BD4 B 0x31C4BDC
	0x031C4BD8 MOV X21, X0
	0x031C4BDC ADRP X22, 0xF2F000
	0x031C4BE0 LDR X22, [X22 + 0xE00]
	0x031C4BE4 LDR X1, [X22]
	0x031C4BE8 MOV X0, X19
	0x031C4BEC BL 0x1C16E00
	0x031C4BF0 MOV X19, X0
	0x031C4BF4 CBZ X0, 0x31C4C50
	0x031C4BF8 LDR X8, [X19]
	0x031C4BFC LDR X1, [X22]
	0x031C4C00 LDRH W9, [X8 + 0x12E]
	0x031C4C04 CBZ X9, 0x31C4C28
	0x031C4C08 LDR X10, [X8 + 0xB0]
	0x031C4C0C ADD X10, X10, 0x8
	0x031C4C10 LDUR X11, [X10 - 0x8]
	0x031C4C14 CMP X11, X1
	0x031C4C18 B.EQ 0x31C4C38
	0x031C4C1C SUBS X9, X9, 0x1
	0x031C4C20 ADD X10, X10, 0x10
	0x031C4C24 B.NE 0x31C4C10
	0x031C4C28 MOV X0, X19
	0x031C4C2C MOV W2, W31
	0x031C4C30 BL 0x1C5C788
	0x031C4C34 B 0x31C4C44
	0x031C4C38 LDRSW X9, [X10]
	0x031C4C3C ADD X8, X8, X9, 0x4, LSL
	0x031C4C40 ADD X0, X8, 0x138
	0x031C4C44 LDP X8, X1, [X0]
	0x031C4C48 MOV X0, X19
	0x031C4C4C BLR X8
	0x031C4C50 CBNZ X20, 0x31C4C5C
	0x031C4C54 MOV X0, X21
	0x031C4C58 BL 0x1D2C690
	0x031C4C5C MOV X0, X20
	0x031C4C60 BL 0x1C16F18
	0x031C4C64 BL 0x1990590
	0x031C4C68 STP D11, D10, [X31 - 0x70]!
	0x031C4C6C STP D9, D8, [X31 + 0x10]
	0x031C4C70 STR X30, [X31 + 0x20]
	0x031C4C74 STP X26, X25, [X31 + 0x30]
	0x031C4C78 STP X24, X23, [X31 + 0x40]
	0x031C4C7C STP X22, X21, [X31 + 0x50]
	0x031C4C80 STP X20, X19, [X31 + 0x60]
	0x031C4C84 ADRP X20, 0x1217000
	0x031C4C88 LDRB W8, [X20 + 0xF8B]
	0x031C4C8C MOV V8.16B, V3.16B
	0x031C4C90 MOV V9.16B, V2.16B
	0x031C4C94 MOV V10.16B, V1.16B
	0x031C4C98 MOV V11.16B, V0.16B
	0x031C4C9C MOV X19, X0
	0x031C4CA0 TBNZ X8, 0x0, 0x31C4CE8
	0x031C4CA4 ADRP X0, 0xF5B000
	0x031C4CA8 LDR X0, [X0 + 0x9D8]
	0x031C4CAC BL 0x1C16CF4
	0x031C4CB0 ADRP X0, 0xF2F000
	0x031C4CB4 LDR X0, [X0 + 0xE00]
	0x031C4CB8 BL 0x1C16CF4
	0x031C4CBC ADRP X0, 0xF2F000
	0x031C4CC0 LDR X0, [X0 + 0xE18]
	0x031C4CC4 BL 0x1C16CF4
	0x031C4CC8 ADRP X0, 0xF2F000
	0x031C4CCC LDR X0, [X0 + 0x598]
	0x031C4CD0 BL 0x1C16CF4
	0x031C4CD4 ADRP X0, 0xF31000
	0x031C4CD8 LDR X0, [X0 + 0x638]
	0x031C4CDC BL 0x1C16CF4
	0x031C4CE0 MOVZ W8, 0x1
	0x031C4CE4 STRB W8, [X20 + 0xF8B]
	0x031C4CE8 CBZ X19, 0x31C4F44
	0x031C4CEC MOV X0, X19

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D10
	003 Move [X31+24], D9
	004 Move [X31+32], D8
	005 Move [X31+40], X30
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x1218000
	015 Move W8, [X20+3974]
	016 Move V8, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {39}
	022 Move X0, 0xF5C000
	023 Move X0, [X0+2512]
	024 Call 0x1C17CF4
	025 Move X0, 0xF30000
	026 Move X0, [X0+3584]
	027 Call 0x1C17CF4
	028 Move X0, 0xF30000
	029 Move X0, [X0+3608]
	030 Call 0x1C17CF4
	031 Move X0, 0xF30000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0xF32000
	035 Move X0, [X0+1592]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+3974], W8
	039 Compare X19, 0
	040 JumpIfEqual {207}
	041 Move X0, X19
	042 Move X1, X31
	043 Call Transform.get_childCount, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X22, 0xF30000
	046 Move X22, [X22+3584]
	047 Move X0, X19
	048 Move X1, X31
	049 Call Transform.GetEnumerator, X0
	050 Move X19, X0
	051 Compare X0, 0
	052 JumpIfEqual {208}
	053 Move X23, 0xF30000
	054 Move X24, 0xF32000
	055 Move X25, 0xF5C000
	056 Move X26, 0xF30000
	057 Move X23, [X23+3608]
	058 Move X24, [X24+1592]
	059 Move X25, [X25+2512]
	060 Move X26, [X26+1432]
	061 Move X8, [X19]
	062 Move X1, [X23]
	063 NotImplemented "Instruction LDRH not yet implemented."
	064 Compare X9, 0
	065 JumpIfEqual {72}
	066 Move X10, [X8+176]
	067 Add X10, X10, 8
	068 NotImplemented "Instruction LDUR not yet implemented."
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Subtract X9, X9, 1
	071 Add X10, X10, 16
	072 Move X0, X19
	073 Move W2, W31
	074 Call 0x1C5D788
	075 NotImplemented "Instruction LDRSW not yet implemented."
	076 Add X8, X8, X9
	077 Add X0, X8, 312
	078 Move X8, [X0]
	079 Move X1, [X0+8]
	080 Move X0, X19
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {159}
	086 Move X8, [X19]
	087 Move X1, [X23]
	088 NotImplemented "Instruction LDRH not yet implemented."
	089 Compare X9, 0
	090 JumpIfEqual {97}
	091 Move X10, [X8+176]
	092 Add X10, X10, 8
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Subtract X9, X9, 1
	096 Add X10, X10, 16
	097 Move W2, 1
	098 Move X0, X19
	099 Call 0x1C5D788
	100 Move W9, [X10]
	101 Add W9, W9, 1
	102 Add X8, X8, W9
	103 Add X0, X8, 312
	104 Move X8, [X0]
	105 Move X1, [X0+8]
	106 Move X0, X19
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X20, X0
	109 Compare X0, 0
	110 JumpIfEqual {205}
	111 Move X8, [X20]
	112 Move X1, [X24]
	113 Move W10, [X8+304]
	114 Move W9, [X1+304]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X8, [X8+200]
	117 Add X8, X8, X9
	118 NotImplemented "Instruction LDUR not yet implemented."
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move X1, [X25]
	121 Move X0, X20
	122 Call 0x21A4894, X0
	123 Move X21, X0
	124 Move X0, [X26]
	125 Move W8, [X0+224]
	126 Compare W8, 0
	127 JumpIfNotEqual {129}
	128 Call 0x1C17DFC
	129 Move X0, X21
	130 Move X1, X31
	131 Move X2, X31
	132 Call Object.op_Inequality, X0, X1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {156}
	137 Compare X21, 0
	138 JumpIfEqual {206}
	139 Move X0, X21
	140 Move X1, X31
	141 Call SpriteRenderer.get_color, X0
	142 Move V9, V0
	143 Move X0, X21
	144 Move X1, X31
	145 Call SpriteRenderer.get_color, X0
	146 Move V10, V1
	147 Move X0, X21
	148 Move X1, X31
	149 Call SpriteRenderer.get_color, X0
	150 Move X0, X21
	151 Move V0, V9
	152 Move V1, V10
	153 Move V3, V8
	154 Move X1, X31
	155 Call SpriteRenderer.set_color, X0, X1
	156 Move X0, X20
	157 Move V0, V8
	158 Call LTDescr.alphaRecursiveSprite, X0, V0
	159 Move X20, X31
	160 Move X1, [X22]
	161 Move X0, X19
	162 Call 0x1C17E00
	163 Compare X0, 0
	164 JumpIfEqual {187}
	165 Move X8, [X0]
	166 Move X1, [X22]
	167 Move X19, X0
	168 NotImplemented "Instruction LDRH not yet implemented."
	169 Compare X9, 0
	170 JumpIfEqual {177}
	171 Move X10, [X8+176]
	172 Add X10, X10, 8
	173 NotImplemented "Instruction LDUR not yet implemented."
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Subtract X9, X9, 1
	176 Add X10, X10, 16
	177 Move X0, X19
	178 Move W2, W31
	179 Call 0x1C5D788
	180 NotImplemented "Instruction LDRSW not yet implemented."
	181 Add X8, X8, X9
	182 Add X0, X8, 312
	183 Move X8, [X0]
	184 Move X1, [X0+8]
	185 Move X0, X19
	186 NotImplemented "Instruction BLR not yet implemented."
	187 Compare X20, 0
	188 JumpIfNotEqual {209}
	189 Move X20, [X31+96]
	190 Move X19, [X31+104]
	191 Move X22, [X31+80]
	192 Move X21, [X31+88]
	193 Move X24, [X31+64]
	194 Move X23, [X31+72]
	195 Move X26, [X31+48]
	196 Move X25, [X31+56]
	197 Move X30, [X31+40]
	198 Move D9, [X31+24]
	199 Move D8, [X31+32]
	200 Move V10, [X31+16]
	201 Add X31, X31, 112
	202 Return 
	203 Move X0, X20
	204 Call 0x1C181E0
	205 Call 0x1C17F20
	206 Call 0x1C17F20
	207 Call 0x1C17F20
	208 Call 0x1C17F20
	209 Move X0, X20
	210 Call 0x1C17F18
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Call 0x3EB2AD0
	213 Move X20, [X0]
	214 Call 0x3EB2AE0
	215 Move [X31+8], X0
	216 Move X20, X31
	217 Move [X31+8], X0
	218 Move X1, [X22]
	219 Move X0, X19
	220 Call 0x1C17E00
	221 Move X19, X0
	222 Compare X0, 0
	223 JumpIfEqual {245}
	224 Move X8, [X19]
	225 Move X1, [X22]
	226 NotImplemented "Instruction LDRH not yet implemented."
	227 Compare X9, 0
	228 JumpIfEqual {235}
	229 Move X10, [X8+176]
	230 Add X10, X10, 8
	231 NotImplemented "Instruction LDUR not yet implemented."
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Subtract X9, X9, 1
	234 Add X10, X10, 16
	235 Move X0, X19
	236 Move W2, W31
	237 Call 0x1C5D788
	238 NotImplemented "Instruction LDRSW not yet implemented."
	239 Add X8, X8, X9
	240 Add X0, X8, 312
	241 Move X8, [X0]
	242 Move X1, [X0+8]
	243 Move X0, X19
	244 NotImplemented "Instruction BLR not yet implemented."
	245 Compare X20, 0
	246 JumpIfNotEqual {249}
	247 Move X0, [X31+8]
	248 Call 0x1D2D690
	249 Move X0, X20
	250 Call 0x1C17F18
	251 Call 0x1991590

Method: System.Void colorRecursiveSprite(UnityEngine.Transform transform, UnityEngine.Color toColor)

Disassembly:
	0x031C4CF0 MOV X1, X31
	0x031C4CF4 BL 0x3C40C8C
	0x031C4CF8 CMP W0, 0x1
	0x031C4CFC B.LT 0x31C4F14
	0x031C4D00 ADRP X22, 0xF2F000
	0x031C4D04 LDR X22, [X22 + 0xE00]
	0x031C4D08 MOV X0, X19
	0x031C4D0C MOV X1, X31
	0x031C4D10 BL 0x3C4100C
	0x031C4D14 MOV X19, X0
	0x031C4D18 CBZ X0, 0x31C4F48
	0x031C4D1C ADRP X23, 0xF2F000
	0x031C4D20 ADRP X24, 0xF31000
	0x031C4D24 ADRP X25, 0xF5B000
	0x031C4D28 ADRP X26, 0xF2F000
	0x031C4D2C LDR X23, [X23 + 0xE18]
	0x031C4D30 LDR X24, [X24 + 0x638]
	0x031C4D34 LDR X25, [X25 + 0x9D8]
	0x031C4D38 LDR X26, [X26 + 0x598]
	0x031C4D3C LDR X8, [X19]
	0x031C4D40 LDR X1, [X23]
	0x031C4D44 LDRH W9, [X8 + 0x12E]
	0x031C4D48 CBZ X9, 0x31C4D6C
	0x031C4D4C LDR X10, [X8 + 0xB0]
	0x031C4D50 ADD X10, X10, 0x8
	0x031C4D54 LDUR X11, [X10 - 0x8]
	0x031C4D58 CMP X11, X1
	0x031C4D5C B.EQ 0x31C4D7C
	0x031C4D60 SUBS X9, X9, 0x1
	0x031C4D64 ADD X10, X10, 0x10
	0x031C4D68 B.NE 0x31C4D54
	0x031C4D6C MOV X0, X19
	0x031C4D70 MOV W2, W31
	0x031C4D74 BL 0x1C5C788
	0x031C4D78 B 0x31C4D88
	0x031C4D7C LDRSW X9, [X10]
	0x031C4D80 ADD X8, X8, X9, 0x4, LSL
	0x031C4D84 ADD X0, X8, 0x138
	0x031C4D88 LDP X8, X1, [X0]
	0x031C4D8C MOV X0, X19
	0x031C4D90 BLR X8
	0x031C4D94 TBZ X0, 0x0, 0x31C4EA0
	0x031C4D98 LDR X8, [X19]
	0x031C4D9C LDR X1, [X23]
	0x031C4DA0 LDRH W9, [X8 + 0x12E]
	0x031C4DA4 CBZ X9, 0x31C4DC8
	0x031C4DA8 LDR X10, [X8 + 0xB0]
	0x031C4DAC ADD X10, X10, 0x8
	0x031C4DB0 LDUR X11, [X10 - 0x8]
	0x031C4DB4 CMP X11, X1
	0x031C4DB8 B.EQ 0x31C4DD8
	0x031C4DBC SUBS X9, X9, 0x1
	0x031C4DC0 ADD X10, X10, 0x10
	0x031C4DC4 B.NE 0x31C4DB0
	0x031C4DC8 MOVZ W2, 0x1
	0x031C4DCC MOV X0, X19
	0x031C4DD0 BL 0x1C5C788
	0x031C4DD4 B 0x31C4DE8
	0x031C4DD8 LDR W9, [X10]
	0x031C4DDC ADD W9, W9, 0x1
	0x031C4DE0 ADD X8, X8, W9, 0x4, SXTW
	0x031C4DE4 ADD X0, X8, 0x138
	0x031C4DE8 LDP X8, X1, [X0]
	0x031C4DEC MOV X0, X19
	0x031C4DF0 BLR X8
	0x031C4DF4 MOV X20, X0
	0x031C4DF8 CBZ X0, 0x31C4F3C
	0x031C4DFC LDR X8, [X20]
	0x031C4E00 LDR X1, [X24]
	0x031C4E04 LDRB W10, [X8 + 0x130]
	0x031C4E08 LDRB W9, [X1 + 0x130]
	0x031C4E0C CMP W10, W9
	0x031C4E10 B.CC 0x31C4F34
	0x031C4E14 LDR X8, [X8 + 0xC8]
	0x031C4E18 ADD X8, X8, X9, 0x3, LSL
	0x031C4E1C LDUR X8, [X8 - 0x8]
	0x031C4E20 CMP X8, X1
	0x031C4E24 B.NE 0x31C4F34
	0x031C4E28 LDR X1, [X25]
	0x031C4E2C MOV X0, X20
	0x031C4E30 BL 0x21A3894
	0x031C4E34 MOV X21, X0
	0x031C4E38 LDR X0, [X26]
	0x031C4E3C LDR W8, [X0 + 0xE0]
	0x031C4E40 CBNZ W8, 0x31C4E48
	0x031C4E44 BL 0x1C16DFC
	0x031C4E48 MOV X0, X21
	0x031C4E4C MOV X1, X31
	0x031C4E50 MOV X2, X31
	0x031C4E54 BL 0x3C354F8
	0x031C4E58 TBZ X0, 0x0, 0x31C4E84
	0x031C4E5C CBZ X21, 0x31C4F40
	0x031C4E60 LDR X8, [X21]
	0x031C4E64 LDR X1, [X8 + 0x2B0]
	0x031C4E68 LDR X9, [X8 + 0x2A8]
	0x031C4E6C MOV X0, X21
	0x031C4E70 MOV V0.16B, V11.16B
	0x031C4E74 MOV V1.16B, V10.16B
	0x031C4E78 MOV V2.16B, V9.16B
	0x031C4E7C MOV V3.16B, V8.16B
	0x031C4E80 BLR X9
	0x031C4E84 MOV X0, X20
	0x031C4E88 MOV V0.16B, V11.16B
	0x031C4E8C MOV V1.16B, V10.16B
	0x031C4E90 MOV V2.16B, V9.16B
	0x031C4E94 MOV V3.16B, V8.16B
	0x031C4E98 BL 0x31C4C68
	0x031C4E9C B 0x31C4D3C
	0x031C4EA0 MOV X20, X31
	0x031C4EA4 LDR X1, [X22]
	0x031C4EA8 MOV X0, X19
	0x031C4EAC BL 0x1C16E00
	0x031C4EB0 CBZ X0, 0x31C4F10
	0x031C4EB4 LDR X8, [X0]
	0x031C4EB8 LDR X1, [X22]
	0x031C4EBC MOV X19, X0
	0x031C4EC0 LDRH W9, [X8 + 0x12E]
	0x031C4EC4 CBZ X9, 0x31C4EE8
	0x031C4EC8 LDR X10, [X8 + 0xB0]
	0x031C4ECC ADD X10, X10, 0x8
	0x031C4ED0 LDUR X11, [X10 - 0x8]
	0x031C4ED4 CMP X11, X1
	0x031C4ED8 B.EQ 0x31C4EF8
	0x031C4EDC SUBS X9, X9, 0x1
	0x031C4EE0 ADD X10, X10, 0x10
	0x031C4EE4 B.NE 0x31C4ED0
	0x031C4EE8 MOV X0, X19
	0x031C4EEC MOV W2, W31
	0x031C4EF0 BL 0x1C5C788
	0x031C4EF4 B 0x31C4F04
	0x031C4EF8 LDRSW X9, [X10]
	0x031C4EFC ADD X8, X8, X9, 0x4, LSL
	0x031C4F00 ADD X0, X8, 0x138
	0x031C4F04 LDP X8, X1, [X0]
	0x031C4F08 MOV X0, X19
	0x031C4F0C BLR X8
	0x031C4F10 CBNZ X20, 0x31C4F4C
	0x031C4F14 LDP X20, X19, [X31 + 0x60]
	0x031C4F18 LDP X22, X21, [X31 + 0x50]
	0x031C4F1C LDP X24, X23, [X31 + 0x40]
	0x031C4F20 LDP X26, X25, [X31 + 0x30]
	0x031C4F24 LDR X30, [X31 + 0x20]
	0x031C4F28 LDP D9, D8, [X31 + 0x10]
	0x031C4F2C LDP D11, D10, [X31], #0x70
	0x031C4F30 RET
	0x031C4F34 MOV X0, X20
	0x031C4F38 BL 0x1C171E0
	0x031C4F3C BL 0x1C16F20
	0x031C4F40 BL 0x1C16F20
	0x031C4F44 BL 0x1C16F20
	0x031C4F48 BL 0x1C16F20
	0x031C4F4C MOV X0, X20
	0x031C4F50 BL 0x1C16F18
	0x031C4F54 B 0x31C4F78
	0x031C4F58 B 0x31C4F78
	0x031C4F5C B 0x31C4F78
	0x031C4F60 B 0x31C4F78
	0x031C4F64 B 0x31C4F78
	0x031C4F68 B 0x31C4F78
	0x031C4F6C B 0x31C4F78
	0x031C4F70 B 0x31C4F78
	0x031C4F74 B 0x31C4F78
	0x031C4F78 CMP W1, 0x1
	0x031C4F7C B.NE 0x31C4F90
	0x031C4F80 BL 0x3EB1AD0
	0x031C4F84 LDR X20, [X0]
	0x031C4F88 BL 0x3EB1AE0
	0x031C4F8C B 0x31C4EA4
	0x031C4F90 STR X0, [X31 + 0x28]
	0x031C4F94 MOV X20, X31
	0x031C4F98 B 0x31C4FA0
	0x031C4F9C STR X0, [X31 + 0x28]
	0x031C4FA0 LDR X1, [X22]
	0x031C4FA4 MOV X0, X19
	0x031C4FA8 BL 0x1C16E00
	0x031C4FAC MOV X19, X0
	0x031C4FB0 CBZ X0, 0x31C500C
	0x031C4FB4 LDR X8, [X19]
	0x031C4FB8 LDR X1, [X22]
	0x031C4FBC LDRH W9, [X8 + 0x12E]
	0x031C4FC0 CBZ X9, 0x31C4FE4
	0x031C4FC4 LDR X10, [X8 + 0xB0]
	0x031C4FC8 ADD X10, X10, 0x8
	0x031C4FCC LDUR X11, [X10 - 0x8]
	0x031C4FD0 CMP X11, X1
	0x031C4FD4 B.EQ 0x31C4FF4
	0x031C4FD8 SUBS X9, X9, 0x1
	0x031C4FDC ADD X10, X10, 0x10
	0x031C4FE0 B.NE 0x31C4FCC
	0x031C4FE4 MOV X0, X19
	0x031C4FE8 MOV W2, W31
	0x031C4FEC BL 0x1C5C788
	0x031C4FF0 B 0x31C5000
	0x031C4FF4 LDRSW X9, [X10]
	0x031C4FF8 ADD X8, X8, X9, 0x4, LSL
	0x031C4FFC ADD X0, X8, 0x138
	0x031C5000 LDP X8, X1, [X0]
	0x031C5004 MOV X0, X19
	0x031C5008 BLR X8
	0x031C500C CBNZ X20, 0x31C5018
	0x031C5010 LDR X0, [X31 + 0x28]
	0x031C5014 BL 0x1D2C690
	0x031C5018 MOV X0, X20
	0x031C501C BL 0x1C16F18
	0x031C5020 BL 0x1990590
	0x031C5024 STR X30, [X31 - 0x10]!
	0x031C5028 CBZ X0, 0x31C507C
	0x031C502C LDR X8, [X0 + 0xE8]
	0x031C5030 CBZ X8, 0x31C507C
	0x031C5034 LDR V1, [X8 + 0x18]
	0x031C5038 LDUR V3, [X8 + 0x24]
	0x031C503C LDR V2, [X8 + 0x20]
	0x031C5040 LDR V4, [X8 + 0x2C]
	0x031C5044 LDR V5, [X0 + 0x70]
	0x031C5048 LDR V6, [X0 + 0x64]
	0x031C504C FSUB V1.2S, V1.2S, V3.2S
	0x031C5050 FSUB S2, S2, S4
	0x00000000 INVALID
	0x031C5058 FSUB S5, S5, S6
	0x031C505C FMUL S2, S2, S0
	0x031C5060 FMUL S5, S5, S0
	0x031C5064 FADD V0.2S, V3.2S, V1.2S
	0x031C5068 FADD S2, S4, S2
	0x031C506C FADD S3, S6, S5
	0x031C5070 MOV S1, V0.S[1]
	0x031C5074 LDR X30, [X31], #0x10
	0x031C5078 RET
	0x031C507C BL 0x1C16F20
	0x031C5080 LDR V0, [X0 + 0x40]
	0x031C5084 FCMP S0, 0x0
	0x031C5088 B.NE 0x31C5090
	0x031C508C RET
	0x031C5090 STR S0, [X0 + 0x44]
	0x031C5094 STR W31, [X0 + 0x40]
	0x031C5098 RET
	0x031C509C LDR V0, [X0 + 0x44]
	0x031C50A0 STR S0, [X0 + 0x40]
	0x031C50A4 RET
	0x031C50A8 STR X30, [X31 - 0x10]!
	0x031C50AC LDR X8, [X0 + 0xE8]
	0x031C50B0 CBZ X8, 0x31C50C4
	0x031C50B4 STP S0, S1, [X8 + 0x24]
	0x031C50B8 STR S2, [X8 + 0x2C]
	0x031C50BC LDR X30, [X31], #0x10
	0x031C50C0 RET
	0x031C50C4 BL 0x1C16F20
	0x031C50C8 STR S0, [X0 + 0x24]
	0x031C50CC RET
	0x031C50D0 STR X30, [X31 - 0x10]!
	0x031C50D4 SUB W8, W1, 0x1
	0x031C50D8 CMP W8, 0x21
	0x031C50DC B.HI 0x31C50F8
	0x031C50E0 ADRP X9, 0xFFFFFFFFFD9D1000
	0x031C50E4 ADD X9, X9, 0x3AC
	0x031C50E8 ADR X10, 0x10
	0x031C50EC LDRB W11, [X9, X8, LSL]

ISIL:
	001 Move [X31-112], D11
	002 Move [X31-104], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X27
	007 Move [X31+48], X26
	008 Move [X31+56], X25
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X19, 0x1218000
	016 Move W8, [X19+3975]
	017 Move V8, V3
	018 Move V9, V2
	019 Move V10, V1
	020 Move V11, V0
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {43}
	026 Move X0, 0xF5C000
	027 Move X0, [X0+1000]
	028 Call 0x1C17CF4
	029 Move X0, 0xF30000
	030 Move X0, [X0+3584]
	031 Call 0x1C17CF4
	032 Move X0, 0xF30000
	033 Move X0, [X0+3608]
	034 Call 0x1C17CF4
	035 Move X0, 0xF30000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0xF32000
	039 Move X0, [X0+1592]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X19+3975], W8
	043 Compare X20, 0
	044 JumpIfEqual {221}
	045 Move X0, X20
	046 Move X1, X31
	047 Call Transform.get_childCount, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X23, 0xF30000
	050 Move X23, [X23+3584]
	051 Move X0, X20
	052 Move X1, X31
	053 Call Transform.GetEnumerator, X0
	054 Move X19, X0
	055 Compare X0, 0
	056 JumpIfEqual {222}
	057 Move X24, 0xF30000
	058 Move X25, 0xF5C000
	059 Move X26, 0xF30000
	060 Move X27, 0xF32000
	061 Move X24, [X24+3608]
	062 Move X25, [X25+1000]
	063 Move X26, [X26+1432]
	064 Move X27, [X27+1592]
	065 Move X8, [X19]
	066 Move X1, [X24]
	067 NotImplemented "Instruction LDRH not yet implemented."
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move X0, X19
	077 Move W2, W31
	078 Call 0x1C5D788
	079 NotImplemented "Instruction LDRSW not yet implemented."
	080 Add X8, X8, X9
	081 Add X0, X8, 312
	082 Move X8, [X0]
	083 Move X1, [X0+8]
	084 Move X0, X19
	085 NotImplemented "Instruction BLR not yet implemented."
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {170}
	090 Move X8, [X19]
	091 Move X1, [X24]
	092 NotImplemented "Instruction LDRH not yet implemented."
	093 Compare X9, 0
	094 JumpIfEqual {101}
	095 Move X10, [X8+176]
	096 Add X10, X10, 8
	097 NotImplemented "Instruction LDUR not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Subtract X9, X9, 1
	100 Add X10, X10, 16
	101 Move W2, 1
	102 Move X0, X19
	103 Call 0x1C5D788
	104 Move W9, [X10]
	105 Add W9, W9, 1
	106 Add X8, X8, W9
	107 Add X0, X8, 312
	108 Move X8, [X0]
	109 Move X1, [X0+8]
	110 Move X0, X19
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Move X21, X0
	113 Move X0, X20
	114 Move X1, X31
	115 Call Component.get_gameObject, X0
	116 Compare X0, 0
	117 JumpIfEqual {215}
	118 Move X1, [X25]
	119 Call 0x21E62E4, X0
	120 Move X22, X0
	121 Move X0, [X26]
	122 Move W8, [X0+224]
	123 Compare W8, 0
	124 JumpIfNotEqual {126}
	125 Call 0x1C17DFC
	126 Move X0, X22
	127 Move X1, X31
	128 Move X2, X31
	129 Call Object.op_Inequality, X0, X1
	130 Move X1, [X27]
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {154}
	135 Compare X21, 0
	136 JumpIfEqual {145}
	137 Move X8, [X21]
	138 Move W9, [X1+304]
	139 Move W10, [X8+304]
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X8, [X8+200]
	142 Add X8, X8, X9
	143 NotImplemented "Instruction LDUR not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Compare X22, 0
	146 JumpIfEqual {220}
	147 Move X0, X22
	148 Move V0, V11
	149 Move V1, V10
	150 Move V2, V9
	151 Move V3, V8
	152 Move X1, X31
	153 Call SpriteRenderer.set_color, X0, X1
	154 Compare X21, 0
	155 JumpIfEqual {164}
	156 Move X8, [X21]
	157 Move W9, [X1+304]
	158 Move W10, [X8+304]
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X8, [X8+200]
	161 Add X8, X8, X9
	162 NotImplemented "Instruction LDUR not yet implemented."
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move X0, X21
	165 Move V0, V11
	166 Move V1, V10
	167 Move V2, V9
	168 Move V3, V8
	169 Call LTDescr.colorRecursiveSprite, X0, X1
	170 Move X20, X31
	171 Move X1, [X23]
	172 Move X0, X19
	173 Call 0x1C17E00
	174 Compare X0, 0
	175 JumpIfEqual {198}
	176 Move X8, [X0]
	177 Move X1, [X23]
	178 Move X19, X0
	179 NotImplemented "Instruction LDRH not yet implemented."
	180 Compare X9, 0
	181 JumpIfEqual {188}
	182 Move X10, [X8+176]
	183 Add X10, X10, 8
	184 NotImplemented "Instruction LDUR not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Subtract X9, X9, 1
	187 Add X10, X10, 16
	188 Move X0, X19
	189 Move W2, W31
	190 Call 0x1C5D788
	191 NotImplemented "Instruction LDRSW not yet implemented."
	192 Add X8, X8, X9
	193 Add X0, X8, 312
	194 Move X8, [X0]
	195 Move X1, [X0+8]
	196 Move X0, X19
	197 NotImplemented "Instruction BLR not yet implemented."
	198 Compare X20, 0
	199 JumpIfNotEqual {223}
	200 Move X20, [X31+96]
	201 Move X19, [X31+104]
	202 Move X22, [X31+80]
	203 Move X21, [X31+88]
	204 Move X24, [X31+64]
	205 Move X23, [X31+72]
	206 Move X26, [X31+48]
	207 Move X25, [X31+56]
	208 Move X30, [X31+32]
	209 Move X27, [X31+40]
	210 Move D9, [X31+16]
	211 Move D8, [X31+24]
	212 Move D11, [X31+112]
	213 Move D10, [X31+120]
	214 Return 
	215 Call 0x1C17F20
	216 Move X0, X21
	217 Call 0x1C181E0
	218 Move X0, X21
	219 Call 0x1C181E0
	220 Call 0x1C17F20
	221 Call 0x1C17F20
	222 Call 0x1C17F20
	223 Move X0, X20
	224 Call 0x1C17F18
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Call 0x3EB2AD0
	227 Move X20, [X0]
	228 Call 0x3EB2AE0
	229 Move X21, X0
	230 Move X20, X31
	231 Move X21, X0
	232 Move X1, [X23]
	233 Move X0, X19
	234 Call 0x1C17E00
	235 Move X19, X0
	236 Compare X0, 0
	237 JumpIfEqual {259}
	238 Move X8, [X19]
	239 Move X1, [X23]
	240 NotImplemented "Instruction LDRH not yet implemented."
	241 Compare X9, 0
	242 JumpIfEqual {249}
	243 Move X10, [X8+176]
	244 Add X10, X10, 8
	245 NotImplemented "Instruction LDUR not yet implemented."
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Subtract X9, X9, 1
	248 Add X10, X10, 16
	249 Move X0, X19
	250 Move W2, W31
	251 Call 0x1C5D788
	252 NotImplemented "Instruction LDRSW not yet implemented."
	253 Add X8, X8, X9
	254 Add X0, X8, 312
	255 Move X8, [X0]
	256 Move X1, [X0+8]
	257 Move X0, X19
	258 NotImplemented "Instruction BLR not yet implemented."
	259 Compare X20, 0
	260 JumpIfNotEqual {263}
	261 Move X0, X21
	262 Call 0x1D2D690
	263 Move X0, X20
	264 Call 0x1C17F18
	265 Call 0x1991590

Method: System.Void colorRecursive(UnityEngine.RectTransform rectTransform, UnityEngine.Color toColor)

Disassembly:
	0x031C50F0 ADD X10, X10, X11, 0x2, LSL
	0x031C50F4 BR X10
	0x031C50F8 BL 0x31C520C
	0x031C50FC B 0x31C5204
	0x031C5100 BL 0x31C5290
	0x031C5104 B 0x31C5204
	0x031C5108 BL 0x31C5314
	0x031C510C B 0x31C5204
	0x031C5110 BL 0x31C5398
	0x031C5114 B 0x31C5204
	0x031C5118 BL 0x31C541C
	0x031C511C B 0x31C5204
	0x031C5120 BL 0x31C54A0
	0x031C5124 B 0x31C5204
	0x031C5128 BL 0x31C5524
	0x031C512C B 0x31C5204
	0x031C5130 BL 0x31C55A8
	0x031C5134 B 0x31C5204
	0x031C5138 BL 0x31C562C
	0x031C513C B 0x31C5204
	0x031C5140 BL 0x31C56B0
	0x031C5144 B 0x31C5204
	0x031C5148 BL 0x31C5734
	0x031C514C B 0x31C5204
	0x031C5150 BL 0x31C57B8
	0x031C5154 B 0x31C5204
	0x031C5158 BL 0x31C583C
	0x031C515C B 0x31C5204
	0x031C5160 BL 0x31C58C0
	0x031C5164 B 0x31C5204
	0x031C5168 BL 0x31C5944
	0x031C516C B 0x31C5204
	0x031C5170 BL 0x31C59C8
	0x031C5174 B 0x31C5204
	0x031C5178 BL 0x31C5A4C
	0x031C517C B 0x31C5204
	0x031C5180 BL 0x31C5AD0
	0x031C5184 B 0x31C5204
	0x031C5188 BL 0x31C5B54
	0x031C518C B 0x31C5204
	0x031C5190 BL 0x31C5BD8
	0x031C5194 B 0x31C5204
	0x031C5198 BL 0x31C5C5C
	0x031C519C B 0x31C5204
	0x031C51A0 BL 0x31C5CE0
	0x031C51A4 B 0x31C5204
	0x031C51A8 BL 0x31C5D64
	0x031C51AC B 0x31C5204
	0x031C51B0 BL 0x31C5DE8
	0x031C51B4 B 0x31C5204
	0x031C51B8 BL 0x31C5E6C
	0x031C51BC B 0x31C5204
	0x031C51C0 BL 0x31C5EF0
	0x031C51C4 B 0x31C5204
	0x031C51C8 BL 0x31C5FF8
	0x031C51CC B 0x31C5204
	0x031C51D0 BL 0x31C607C
	0x031C51D4 B 0x31C5204
	0x031C51D8 BL 0x31C6100
	0x031C51DC B 0x31C5204
	0x031C51E0 BL 0x31C6184
	0x031C51E4 B 0x31C5204
	0x031C51E8 BL 0x31C6390
	0x031C51EC B 0x31C5204
	0x031C51F0 BL 0x31C62CC
	0x031C51F4 B 0x31C5204
	0x031C51F8 BL 0x31C6208
	0x031C51FC B 0x31C5204
	0x031C5200 BL 0x31C5F74
	0x031C5204 LDR X30, [X31], #0x10
	0x031C5208 RET
	0x031C520C STR X30, [X31 - 0x30]!
	0x031C5210 STP X22, X21, [X31 + 0x10]
	0x031C5214 STP X20, X19, [X31 + 0x20]
	0x031C5218 ADRP X22, 0x1216000
	0x031C521C ADRP X21, 0xF5A000
	0x031C5220 ADRP X20, 0xF5A000
	0x031C5224 LDRB W8, [X22 + 0xF8C]
	0x031C5228 LDR X21, [X21 + 0x6A0]
	0x031C522C LDR X20, [X20 + 0x6A8]
	0x031C5230 MOV X19, X0
	0x031C5234 TBNZ X8, 0x0, 0x31C5258
	0x031C5238 ADRP X0, 0xF5A000
	0x031C523C LDR X0, [X0 + 0x6A0]
	0x031C5240 BL 0x1C16CF4
	0x031C5244 ADRP X0, 0xF5A000
	0x031C5248 LDR X0, [X0 + 0x6A8]
	0x031C524C BL 0x1C16CF4
	0x031C5250 MOVZ W8, 0x1
	0x031C5254 STRB W8, [X22 + 0xF8C]
	0x031C5258 MOVZ W8, 0x1
	0x031C525C STR W8, [X19 + 0x94]
	0x031C5260 LDR X0, [X21]
	0x031C5264 BL 0x1C16F10
	0x031C5268 LDR X2, [X20]
	0x031C526C MOV X1, X19
	0x031C5270 MOV X20, X0
	0x031C5274 BL 0x31BFE64
	0x031C5278 STR X20, [X19 + 0xA0]
	0x031C527C MOV X0, X19
	0x031C5280 LDP X20, X19, [X31 + 0x20]
	0x031C5284 LDP X22, X21, [X31 + 0x10]
	0x031C5288 LDR X30, [X31], #0x30
	0x031C528C RET
	0x031C5290 STR X30, [X31 - 0x30]!
	0x031C5294 STP X22, X21, [X31 + 0x10]
	0x031C5298 STP X20, X19, [X31 + 0x20]
	0x031C529C ADRP X22, 0x1216000
	0x031C52A0 ADRP X21, 0xF5A000
	0x031C52A4 ADRP X20, 0xF5A000
	0x031C52A8 LDRB W8, [X22 + 0xF8F]
	0x031C52AC LDR X21, [X21 + 0x6A0]
	0x031C52B0 LDR X20, [X20 + 0x9E0]
	0x031C52B4 MOV X19, X0
	0x031C52B8 TBNZ X8, 0x0, 0x31C52DC
	0x031C52BC ADRP X0, 0xF5A000
	0x031C52C0 LDR X0, [X0 + 0x6A0]
	0x031C52C4 BL 0x1C16CF4
	0x031C52C8 ADRP X0, 0xF5A000
	0x031C52CC LDR X0, [X0 + 0x9E0]
	0x031C52D0 BL 0x1C16CF4
	0x031C52D4 MOVZ W8, 0x1
	0x031C52D8 STRB W8, [X22 + 0xF8F]
	0x031C52DC MOVZ W8, 0x2
	0x031C52E0 STR W8, [X19 + 0x94]
	0x031C52E4 LDR X0, [X21]
	0x031C52E8 BL 0x1C16F10
	0x031C52EC LDR X2, [X20]
	0x031C52F0 MOV X1, X19
	0x031C52F4 MOV X20, X0
	0x031C52F8 BL 0x31BFE64
	0x031C52FC STR X20, [X19 + 0xA0]
	0x031C5300 MOV X0, X19
	0x031C5304 LDP X20, X19, [X31 + 0x20]
	0x031C5308 LDP X22, X21, [X31 + 0x10]
	0x031C530C LDR X30, [X31], #0x30
	0x031C5310 RET
	0x031C5314 STR X30, [X31 - 0x30]!
	0x031C5318 STP X22, X21, [X31 + 0x10]
	0x031C531C STP X20, X19, [X31 + 0x20]
	0x031C5320 ADRP X22, 0x1216000
	0x031C5324 ADRP X21, 0xF5A000
	0x031C5328 ADRP X20, 0xF5A000
	0x031C532C LDRB W8, [X22 + 0xF8E]
	0x031C5330 LDR X21, [X21 + 0x6A0]
	0x031C5334 LDR X20, [X20 + 0x9E8]
	0x031C5338 MOV X19, X0
	0x031C533C TBNZ X8, 0x0, 0x31C5360
	0x031C5340 ADRP X0, 0xF5A000
	0x031C5344 LDR X0, [X0 + 0x6A0]
	0x031C5348 BL 0x1C16CF4
	0x031C534C ADRP X0, 0xF5A000
	0x031C5350 LDR X0, [X0 + 0x9E8]
	0x031C5354 BL 0x1C16CF4
	0x031C5358 MOVZ W8, 0x1
	0x031C535C STRB W8, [X22 + 0xF8E]
	0x031C5360 MOVZ W8, 0x3
	0x031C5364 STR W8, [X19 + 0x94]
	0x031C5368 LDR X0, [X21]
	0x031C536C BL 0x1C16F10
	0x031C5370 LDR X2, [X20]
	0x031C5374 MOV X1, X19
	0x031C5378 MOV X20, X0
	0x031C537C BL 0x31BFE64
	0x031C5380 STR X20, [X19 + 0xA0]
	0x031C5384 MOV X0, X19
	0x031C5388 LDP X20, X19, [X31 + 0x20]
	0x031C538C LDP X22, X21, [X31 + 0x10]
	0x031C5390 LDR X30, [X31], #0x30
	0x031C5394 RET
	0x031C5398 STR X30, [X31 - 0x30]!
	0x031C539C STP X22, X21, [X31 + 0x10]
	0x031C53A0 STP X20, X19, [X31 + 0x20]
	0x031C53A4 ADRP X22, 0x1216000
	0x031C53A8 ADRP X21, 0xF5A000
	0x031C53AC ADRP X20, 0xF5A000
	0x031C53B0 LDRB W8, [X22 + 0xF90]
	0x031C53B4 LDR X21, [X21 + 0x6A0]
	0x031C53B8 LDR X20, [X20 + 0x9F0]
	0x031C53BC MOV X19, X0
	0x031C53C0 TBNZ X8, 0x0, 0x31C53E4
	0x031C53C4 ADRP X0, 0xF5A000
	0x031C53C8 LDR X0, [X0 + 0x6A0]
	0x031C53CC BL 0x1C16CF4
	0x031C53D0 ADRP X0, 0xF5A000
	0x031C53D4 LDR X0, [X0 + 0x9F0]
	0x031C53D8 BL 0x1C16CF4
	0x031C53DC MOVZ W8, 0x1
	0x031C53E0 STRB W8, [X22 + 0xF90]
	0x031C53E4 MOVZ W8, 0x4
	0x031C53E8 STR W8, [X19 + 0x94]
	0x031C53EC LDR X0, [X21]
	0x031C53F0 BL 0x1C16F10
	0x031C53F4 LDR X2, [X20]
	0x031C53F8 MOV X1, X19
	0x031C53FC MOV X20, X0
	0x031C5400 BL 0x31BFE64
	0x031C5404 STR X20, [X19 + 0xA0]
	0x031C5408 MOV X0, X19
	0x031C540C LDP X20, X19, [X31 + 0x20]
	0x031C5410 LDP X22, X21, [X31 + 0x10]
	0x031C5414 LDR X30, [X31], #0x30
	0x031C5418 RET
	0x031C541C STR X30, [X31 - 0x30]!
	0x031C5420 STP X22, X21, [X31 + 0x10]
	0x031C5424 STP X20, X19, [X31 + 0x20]
	0x031C5428 ADRP X22, 0x1216000
	0x031C542C ADRP X21, 0xF5A000
	0x031C5430 ADRP X20, 0xF5A000
	0x031C5434 LDRB W8, [X22 + 0xF91]
	0x031C5438 LDR X21, [X21 + 0x6A0]
	0x031C543C LDR X20, [X20 + 0x9F8]
	0x031C5440 MOV X19, X0
	0x031C5444 TBNZ X8, 0x0, 0x31C5468
	0x031C5448 ADRP X0, 0xF5A000
	0x031C544C LDR X0, [X0 + 0x6A0]
	0x031C5450 BL 0x1C16CF4
	0x031C5454 ADRP X0, 0xF5A000
	0x031C5458 LDR X0, [X0 + 0x9F8]
	0x031C545C BL 0x1C16CF4
	0x031C5460 MOVZ W8, 0x1
	0x031C5464 STRB W8, [X22 + 0xF91]
	0x031C5468 MOVZ W8, 0x5
	0x031C546C STR W8, [X19 + 0x94]
	0x031C5470 LDR X0, [X21]
	0x031C5474 BL 0x1C16F10
	0x031C5478 LDR X2, [X20]
	0x031C547C MOV X1, X19
	0x031C5480 MOV X20, X0
	0x031C5484 BL 0x31BFE64
	0x031C5488 STR X20, [X19 + 0xA0]
	0x031C548C MOV X0, X19
	0x031C5490 LDP X20, X19, [X31 + 0x20]
	0x031C5494 LDP X22, X21, [X31 + 0x10]
	0x031C5498 LDR X30, [X31], #0x30
	0x031C549C RET
	0x031C54A0 STR X30, [X31 - 0x30]!
	0x031C54A4 STP X22, X21, [X31 + 0x10]
	0x031C54A8 STP X20, X19, [X31 + 0x20]
	0x031C54AC ADRP X22, 0x1216000
	0x031C54B0 ADRP X21, 0xF5A000
	0x031C54B4 ADRP X20, 0xF5A000
	0x031C54B8 LDRB W8, [X22 + 0xF92]
	0x031C54BC LDR X21, [X21 + 0x6A0]
	0x031C54C0 LDR X20, [X20 + 0xA00]
	0x031C54C4 MOV X19, X0
	0x031C54C8 TBNZ X8, 0x0, 0x31C54EC
	0x031C54CC ADRP X0, 0xF5A000
	0x031C54D0 LDR X0, [X0 + 0x6A0]
	0x031C54D4 BL 0x1C16CF4
	0x031C54D8 ADRP X0, 0xF5A000
	0x031C54DC LDR X0, [X0 + 0xA00]
	0x031C54E0 BL 0x1C16CF4
	0x031C54E4 MOVZ W8, 0x1
	0x031C54E8 STRB W8, [X22 + 0xF92]
	0x031C54EC MOVZ W8, 0x6
	0x031C54F0 STR W8, [X19 + 0x94]
	0x031C54F4 LDR X0, [X21]
	0x031C54F8 BL 0x1C16F10
	0x031C54FC LDR X2, [X20]
	0x031C5500 MOV X1, X19
	0x031C5504 MOV X20, X0
	0x031C5508 BL 0x31BFE64
	0x031C550C STR X20, [X19 + 0xA0]
	0x031C5510 MOV X0, X19
	0x031C5514 LDP X20, X19, [X31 + 0x20]
	0x031C5518 LDP X22, X21, [X31 + 0x10]
	0x031C551C LDR X30, [X31], #0x30
	0x031C5520 RET
	0x031C5524 STR X30, [X31 - 0x30]!

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X27
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X20, 0x1217000
	017 Move W8, [X20+3976]
	018 Move V8, V3
	019 Move V9, V2
	020 Move V10, V1
	021 Move V11, V0
	022 Move X19, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {47}
	027 Move X0, 0xF5B000
	028 Move X0, [X0+2496]
	029 Call 0x1C17CF4
	030 Move X0, 0xF5B000
	031 Move X0, [X0+2504]
	032 Call 0x1C17CF4
	033 Move X0, 0xF2F000
	034 Move X0, [X0+3584]
	035 Call 0x1C17CF4
	036 Move X0, 0xF2F000
	037 Move X0, [X0+3608]
	038 Call 0x1C17CF4
	039 Move X0, 0xF2F000
	040 Move X0, [X0+1432]
	041 Call 0x1C17CF4
	042 Move X0, 0xF56000
	043 Move X0, [X0+3184]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X20+3976], W8
	047 Compare X19, 0
	048 JumpIfEqual {237}
	049 Move X0, X19
	050 Move X1, X31
	051 Call Transform.get_childCount, X0
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X22, 0xF2F000
	054 Move X22, [X22+3584]
	055 Move X0, X19
	056 Move X1, X31
	057 Call Transform.GetEnumerator, X0
	058 Move X19, X0
	059 Compare X0, 0
	060 JumpIfEqual {238}
	061 Move X23, 0xF2F000
	062 Move X24, 0xF56000
	063 Move X25, 0xF5B000
	064 Move X26, 0xF2F000
	065 Move X27, 0xF5B000
	066 Move X23, [X23+3608]
	067 Move X24, [X24+3184]
	068 Move X25, [X25+2496]
	069 Move X26, [X26+1432]
	070 Move X27, [X27+2504]
	071 Move X8, [X19]
	072 Move X1, [X23]
	073 NotImplemented "Instruction LDRH not yet implemented."
	074 Compare X9, 0
	075 JumpIfEqual {82}
	076 Move X10, [X8+176]
	077 Add X10, X10, 8
	078 NotImplemented "Instruction LDUR not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Subtract X9, X9, 1
	081 Add X10, X10, 16
	082 Move X0, X19
	083 Move W2, W31
	084 Call 0x1C5D788
	085 NotImplemented "Instruction LDRSW not yet implemented."
	086 Add X8, X8, X9
	087 Add X0, X8, 312
	088 Move X8, [X0]
	089 Move X1, [X0+8]
	090 Move X0, X19
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {186}
	096 Move X8, [X19]
	097 Move X1, [X23]
	098 NotImplemented "Instruction LDRH not yet implemented."
	099 Compare X9, 0
	100 JumpIfEqual {107}
	101 Move X10, [X8+176]
	102 Add X10, X10, 8
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Subtract X9, X9, 1
	106 Add X10, X10, 16
	107 Move W2, 1
	108 Move X0, X19
	109 Call 0x1C5D788
	110 Move W9, [X10]
	111 Add W9, W9, 1
	112 Add X8, X8, W9
	113 Add X0, X8, 312
	114 Move X8, [X0]
	115 Move X1, [X0+8]
	116 Move X0, X19
	117 NotImplemented "Instruction BLR not yet implemented."
	118 Move X20, X0
	119 Compare X0, 0
	120 JumpIfEqual {232}
	121 Move X1, [X24]
	122 Move X8, [X20]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X1, [X25]
	125 Move X0, X20
	126 Call 0x21A4894, X0
	127 Move X21, X0
	128 Move X0, [X26]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {133}
	132 Call 0x1C17DFC
	133 Move X0, X21
	134 Move X1, X31
	135 Move X2, X31
	136 Call Object.op_Inequality, X0, X1
	137 Move TEMP, X0
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {152}
	141 Compare X21, 0
	142 JumpIfEqual {235}
	143 Move X8, [X21]
	144 Move X1, [X8+688]
	145 Move X9, [X8+680]
	146 Move X0, X21
	147 Move V0, V11
	148 Move V1, V10
	149 Move V2, V9
	150 Move V3, V8
	151 NotImplemented "Instruction BLR not yet implemented."
	152 Move X1, [X27]
	153 Move X0, X20
	154 Call 0x21A4894, X0
	155 Move X21, X0
	156 Move X0, [X26]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move X0, X21
	162 Move X1, X31
	163 Move X2, X31
	164 Call Object.op_Inequality, X0, X1
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfNotEqual {180}
	169 Compare X21, 0
	170 JumpIfEqual {236}
	171 Move X8, [X21]
	172 Move X1, [X8+688]
	173 Move X9, [X8+680]
	174 Move X0, X21
	175 Move V0, V11
	176 Move V1, V10
	177 Move V2, V9
	178 Move V3, V8
	179 NotImplemented "Instruction BLR not yet implemented."
	180 Move X0, X20
	181 Move V0, V11
	182 Move V1, V10
	183 Move V2, V9
	184 Move V3, V8
	185 Call LTDescr.colorRecursive, X0, X1
	186 Move X20, X31
	187 Move X1, [X22]
	188 Move X0, X19
	189 Call 0x1C17E00
	190 Compare X0, 0
	191 JumpIfEqual {214}
	192 Move X8, [X0]
	193 Move X1, [X22]
	194 Move X19, X0
	195 NotImplemented "Instruction LDRH not yet implemented."
	196 Compare X9, 0
	197 JumpIfEqual {204}
	198 Move X10, [X8+176]
	199 Add X10, X10, 8
	200 NotImplemented "Instruction LDUR not yet implemented."
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Subtract X9, X9, 1
	203 Add X10, X10, 16
	204 Move X0, X19
	205 Move W2, W31
	206 Call 0x1C5D788
	207 NotImplemented "Instruction LDRSW not yet implemented."
	208 Add X8, X8, X9
	209 Add X0, X8, 312
	210 Move X8, [X0]
	211 Move X1, [X0+8]
	212 Move X0, X19
	213 NotImplemented "Instruction BLR not yet implemented."
	214 Compare X20, 0
	215 JumpIfNotEqual {239}
	216 Move X20, [X31+112]
	217 Move X19, [X31+120]
	218 Move X22, [X31+96]
	219 Move X21, [X31+104]
	220 Move X24, [X31+80]
	221 Move X23, [X31+88]
	222 Move X26, [X31+64]
	223 Move X25, [X31+72]
	224 Move X30, [X31+48]
	225 Move X27, [X31+56]
	226 Move D9, [X31+32]
	227 Move D8, [X31+40]
	228 Move D11, [X31+16]
	229 Move D10, [X31+24]
	230 Add X31, X31, 128
	231 Return 
	232 Call 0x1C17F20
	233 Move X0, X20
	234 Call 0x1C181E0
	235 Call 0x1C17F20
	236 Call 0x1C17F20
	237 Call 0x1C17F20
	238 Call 0x1C17F20
	239 Move X0, X20
	240 Call 0x1C17F18
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Call 0x3EB2AD0
	243 Move X20, [X0]
	244 Call 0x3EB2AE0
	245 Move [X31+8], X0
	246 Move X20, X31
	247 Move [X31+8], X0
	248 Move X1, [X22]
	249 Move X0, X19
	250 Call 0x1C17E00
	251 Move X19, X0
	252 Compare X0, 0
	253 JumpIfEqual {275}
	254 Move X8, [X19]
	255 Move X1, [X22]
	256 NotImplemented "Instruction LDRH not yet implemented."
	257 Compare X9, 0
	258 JumpIfEqual {265}
	259 Move X10, [X8+176]
	260 Add X10, X10, 8
	261 NotImplemented "Instruction LDUR not yet implemented."
	262 NotImplemented "Instruction CMP not yet implemented."
	263 Subtract X9, X9, 1
	264 Add X10, X10, 16
	265 Move X0, X19
	266 Move W2, W31
	267 Call 0x1C5D788
	268 NotImplemented "Instruction LDRSW not yet implemented."
	269 Add X8, X8, X9
	270 Add X0, X8, 312
	271 Move X8, [X0]
	272 Move X1, [X0+8]
	273 Move X0, X19
	274 NotImplemented "Instruction BLR not yet implemented."
	275 Compare X20, 0
	276 JumpIfNotEqual {279}
	277 Move X0, [X31+8]
	278 Call 0x1D2D690
	279 Move X0, X20
	280 Call 0x1C17F18
	281 Call 0x1991590

Method: System.Void textAlphaChildrenRecursive(UnityEngine.Transform trans, System.Single val, System.Boolean useRecursion = True)

Disassembly:
	0x031C5528 STP X22, X21, [X31 + 0x10]
	0x031C552C STP X20, X19, [X31 + 0x20]
	0x031C5530 ADRP X22, 0x1216000
	0x031C5534 ADRP X21, 0xF5A000
	0x031C5538 ADRP X20, 0xF5A000
	0x031C553C LDRB W8, [X22 + 0xF93]
	0x031C5540 LDR X21, [X21 + 0x6A0]
	0x031C5544 LDR X20, [X20 + 0xA08]
	0x031C5548 MOV X19, X0
	0x031C554C TBNZ X8, 0x0, 0x31C5570
	0x031C5550 ADRP X0, 0xF5A000
	0x031C5554 LDR X0, [X0 + 0x6A0]
	0x031C5558 BL 0x1C16CF4
	0x031C555C ADRP X0, 0xF5A000
	0x031C5560 LDR X0, [X0 + 0xA08]
	0x031C5564 BL 0x1C16CF4
	0x031C5568 MOVZ W8, 0x1
	0x031C556C STRB W8, [X22 + 0xF93]
	0x031C5570 MOVZ W8, 0x7
	0x031C5574 STR W8, [X19 + 0x94]
	0x031C5578 LDR X0, [X21]
	0x031C557C BL 0x1C16F10
	0x031C5580 LDR X2, [X20]
	0x031C5584 MOV X1, X19
	0x031C5588 MOV X20, X0
	0x031C558C BL 0x31BFE64
	0x031C5590 STR X20, [X19 + 0xA0]
	0x031C5594 MOV X0, X19
	0x031C5598 LDP X20, X19, [X31 + 0x20]
	0x031C559C LDP X22, X21, [X31 + 0x10]
	0x031C55A0 LDR X30, [X31], #0x30
	0x031C55A4 RET
	0x031C55A8 STR X30, [X31 - 0x30]!
	0x031C55AC STP X22, X21, [X31 + 0x10]
	0x031C55B0 STP X20, X19, [X31 + 0x20]
	0x031C55B4 ADRP X22, 0x1216000
	0x031C55B8 ADRP X21, 0xF5A000
	0x031C55BC ADRP X20, 0xF5A000
	0x031C55C0 LDRB W8, [X22 + 0xF94]
	0x031C55C4 LDR X21, [X21 + 0x6A0]
	0x031C55C8 LDR X20, [X20 + 0xA10]
	0x031C55CC MOV X19, X0
	0x031C55D0 TBNZ X8, 0x0, 0x31C55F4
	0x031C55D4 ADRP X0, 0xF5A000
	0x031C55D8 LDR X0, [X0 + 0x6A0]
	0x031C55DC BL 0x1C16CF4
	0x031C55E0 ADRP X0, 0xF5A000
	0x031C55E4 LDR X0, [X0 + 0xA10]
	0x031C55E8 BL 0x1C16CF4
	0x031C55EC MOVZ W8, 0x1
	0x031C55F0 STRB W8, [X22 + 0xF94]
	0x031C55F4 MOVZ W8, 0x8
	0x031C55F8 STR W8, [X19 + 0x94]
	0x031C55FC LDR X0, [X21]
	0x031C5600 BL 0x1C16F10
	0x031C5604 LDR X2, [X20]
	0x031C5608 MOV X1, X19
	0x031C560C MOV X20, X0
	0x031C5610 BL 0x31BFE64
	0x031C5614 STR X20, [X19 + 0xA0]
	0x031C5618 MOV X0, X19
	0x031C561C LDP X20, X19, [X31 + 0x20]
	0x031C5620 LDP X22, X21, [X31 + 0x10]
	0x031C5624 LDR X30, [X31], #0x30
	0x031C5628 RET
	0x031C562C STR X30, [X31 - 0x30]!
	0x031C5630 STP X22, X21, [X31 + 0x10]
	0x031C5634 STP X20, X19, [X31 + 0x20]
	0x031C5638 ADRP X22, 0x1216000
	0x031C563C ADRP X21, 0xF5A000
	0x031C5640 ADRP X20, 0xF5A000
	0x031C5644 LDRB W8, [X22 + 0xF95]
	0x031C5648 LDR X21, [X21 + 0x6A0]
	0x031C564C LDR X20, [X20 + 0xA18]
	0x031C5650 MOV X19, X0
	0x031C5654 TBNZ X8, 0x0, 0x31C5678
	0x031C5658 ADRP X0, 0xF5A000
	0x031C565C LDR X0, [X0 + 0x6A0]
	0x031C5660 BL 0x1C16CF4
	0x031C5664 ADRP X0, 0xF5A000
	0x031C5668 LDR X0, [X0 + 0xA18]
	0x031C566C BL 0x1C16CF4
	0x031C5670 MOVZ W8, 0x1
	0x031C5674 STRB W8, [X22 + 0xF95]
	0x031C5678 MOVZ W8, 0x9
	0x031C567C STR W8, [X19 + 0x94]
	0x031C5680 LDR X0, [X21]
	0x031C5684 BL 0x1C16F10
	0x031C5688 LDR X2, [X20]
	0x031C568C MOV X1, X19
	0x031C5690 MOV X20, X0
	0x031C5694 BL 0x31BFE64
	0x031C5698 STR X20, [X19 + 0xA0]
	0x031C569C MOV X0, X19
	0x031C56A0 LDP X20, X19, [X31 + 0x20]
	0x031C56A4 LDP X22, X21, [X31 + 0x10]
	0x031C56A8 LDR X30, [X31], #0x30
	0x031C56AC RET
	0x031C56B0 STR X30, [X31 - 0x30]!
	0x031C56B4 STP X22, X21, [X31 + 0x10]
	0x031C56B8 STP X20, X19, [X31 + 0x20]
	0x031C56BC ADRP X22, 0x1216000
	0x031C56C0 ADRP X21, 0xF5A000
	0x031C56C4 ADRP X20, 0xF5A000
	0x031C56C8 LDRB W8, [X22 + 0xF96]
	0x031C56CC LDR X21, [X21 + 0x6A0]
	0x031C56D0 LDR X20, [X20 + 0xA20]
	0x031C56D4 MOV X19, X0
	0x031C56D8 TBNZ X8, 0x0, 0x31C56FC
	0x031C56DC ADRP X0, 0xF5A000
	0x031C56E0 LDR X0, [X0 + 0x6A0]
	0x031C56E4 BL 0x1C16CF4
	0x031C56E8 ADRP X0, 0xF5A000
	0x031C56EC LDR X0, [X0 + 0xA20]
	0x031C56F0 BL 0x1C16CF4
	0x031C56F4 MOVZ W8, 0x1
	0x031C56F8 STRB W8, [X22 + 0xF96]
	0x031C56FC MOVZ W8, 0xA
	0x031C5700 STR W8, [X19 + 0x94]
	0x031C5704 LDR X0, [X21]
	0x031C5708 BL 0x1C16F10
	0x031C570C LDR X2, [X20]
	0x031C5710 MOV X1, X19
	0x031C5714 MOV X20, X0
	0x031C5718 BL 0x31BFE64
	0x031C571C STR X20, [X19 + 0xA0]
	0x031C5720 MOV X0, X19
	0x031C5724 LDP X20, X19, [X31 + 0x20]
	0x031C5728 LDP X22, X21, [X31 + 0x10]
	0x031C572C LDR X30, [X31], #0x30
	0x031C5730 RET
	0x031C5734 STR X30, [X31 - 0x30]!
	0x031C5738 STP X22, X21, [X31 + 0x10]
	0x031C573C STP X20, X19, [X31 + 0x20]
	0x031C5740 ADRP X22, 0x1216000
	0x031C5744 ADRP X21, 0xF5A000
	0x031C5748 ADRP X20, 0xF5A000
	0x031C574C LDRB W8, [X22 + 0xF97]
	0x031C5750 LDR X21, [X21 + 0x6A0]
	0x031C5754 LDR X20, [X20 + 0xA28]
	0x031C5758 MOV X19, X0
	0x031C575C TBNZ X8, 0x0, 0x31C5780
	0x031C5760 ADRP X0, 0xF5A000
	0x031C5764 LDR X0, [X0 + 0x6A0]
	0x031C5768 BL 0x1C16CF4
	0x031C576C ADRP X0, 0xF5A000
	0x031C5770 LDR X0, [X0 + 0xA28]
	0x031C5774 BL 0x1C16CF4
	0x031C5778 MOVZ W8, 0x1
	0x031C577C STRB W8, [X22 + 0xF97]
	0x031C5780 MOVZ W8, 0xB
	0x031C5784 STR W8, [X19 + 0x94]
	0x031C5788 LDR X0, [X21]
	0x031C578C BL 0x1C16F10
	0x031C5790 LDR X2, [X20]
	0x031C5794 MOV X1, X19
	0x031C5798 MOV X20, X0
	0x031C579C BL 0x31BFE64
	0x031C57A0 STR X20, [X19 + 0xA0]
	0x031C57A4 MOV X0, X19
	0x031C57A8 LDP X20, X19, [X31 + 0x20]
	0x031C57AC LDP X22, X21, [X31 + 0x10]
	0x031C57B0 LDR X30, [X31], #0x30
	0x031C57B4 RET
	0x031C57B8 STR X30, [X31 - 0x30]!
	0x031C57BC STP X22, X21, [X31 + 0x10]
	0x031C57C0 STP X20, X19, [X31 + 0x20]
	0x031C57C4 ADRP X22, 0x1216000
	0x031C57C8 ADRP X21, 0xF5A000
	0x031C57CC ADRP X20, 0xF5A000
	0x031C57D0 LDRB W8, [X22 + 0xF98]
	0x031C57D4 LDR X21, [X21 + 0x6A0]
	0x031C57D8 LDR X20, [X20 + 0xA30]
	0x031C57DC MOV X19, X0
	0x031C57E0 TBNZ X8, 0x0, 0x31C5804
	0x031C57E4 ADRP X0, 0xF5A000
	0x031C57E8 LDR X0, [X0 + 0x6A0]
	0x031C57EC BL 0x1C16CF4
	0x031C57F0 ADRP X0, 0xF5A000
	0x031C57F4 LDR X0, [X0 + 0xA30]
	0x031C57F8 BL 0x1C16CF4
	0x031C57FC MOVZ W8, 0x1
	0x031C5800 STRB W8, [X22 + 0xF98]
	0x031C5804 MOVZ W8, 0xC
	0x031C5808 STR W8, [X19 + 0x94]
	0x031C580C LDR X0, [X21]
	0x031C5810 BL 0x1C16F10
	0x031C5814 LDR X2, [X20]
	0x031C5818 MOV X1, X19
	0x031C581C MOV X20, X0
	0x031C5820 BL 0x31BFE64
	0x031C5824 STR X20, [X19 + 0xA0]
	0x031C5828 MOV X0, X19
	0x031C582C LDP X20, X19, [X31 + 0x20]
	0x031C5830 LDP X22, X21, [X31 + 0x10]
	0x031C5834 LDR X30, [X31], #0x30
	0x031C5838 RET
	0x031C583C STR X30, [X31 - 0x30]!
	0x031C5840 STP X22, X21, [X31 + 0x10]
	0x031C5844 STP X20, X19, [X31 + 0x20]
	0x031C5848 ADRP X22, 0x1216000
	0x031C584C ADRP X21, 0xF5A000
	0x031C5850 ADRP X20, 0xF5A000
	0x031C5854 LDRB W8, [X22 + 0xF99]
	0x031C5858 LDR X21, [X21 + 0x6A0]
	0x031C585C LDR X20, [X20 + 0xA38]
	0x031C5860 MOV X19, X0
	0x031C5864 TBNZ X8, 0x0, 0x31C5888
	0x031C5868 ADRP X0, 0xF5A000
	0x031C586C LDR X0, [X0 + 0x6A0]
	0x031C5870 BL 0x1C16CF4
	0x031C5874 ADRP X0, 0xF5A000
	0x031C5878 LDR X0, [X0 + 0xA38]
	0x031C587C BL 0x1C16CF4
	0x031C5880 MOVZ W8, 0x1
	0x031C5884 STRB W8, [X22 + 0xF99]
	0x031C5888 MOVZ W8, 0xD
	0x031C588C STR W8, [X19 + 0x94]
	0x031C5890 LDR X0, [X21]
	0x031C5894 BL 0x1C16F10
	0x031C5898 LDR X2, [X20]
	0x031C589C MOV X1, X19
	0x031C58A0 MOV X20, X0
	0x031C58A4 BL 0x31BFE64
	0x031C58A8 STR X20, [X19 + 0xA0]
	0x031C58AC MOV X0, X19
	0x031C58B0 LDP X20, X19, [X31 + 0x20]
	0x031C58B4 LDP X22, X21, [X31 + 0x10]
	0x031C58B8 LDR X30, [X31], #0x30
	0x031C58BC RET
	0x031C58C0 STR X30, [X31 - 0x30]!
	0x031C58C4 STP X22, X21, [X31 + 0x10]
	0x031C58C8 STP X20, X19, [X31 + 0x20]
	0x031C58CC ADRP X22, 0x1216000
	0x031C58D0 ADRP X21, 0xF5A000
	0x031C58D4 ADRP X20, 0xF5A000
	0x031C58D8 LDRB W8, [X22 + 0xF9A]
	0x031C58DC LDR X21, [X21 + 0x6A0]

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x1217000
	011 Move W8, [X21+3977]
	012 Move W20, W1
	013 Move V8, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0xF5B000
	020 Move X0, [X0+2520]
	021 Call 0x1C17CF4
	022 Move X0, 0xF2F000
	023 Move X0, [X0+3584]
	024 Call 0x1C17CF4
	025 Move X0, 0xF2F000
	026 Move X0, [X0+3608]
	027 Call 0x1C17CF4
	028 Move X0, 0xF2F000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move X0, 0xF31000
	032 Move X0, [X0+1592]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+3977], W8
	036 Move TEMP, X20
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {185}
	040 Compare X19, 0
	041 JumpIfEqual {199}
	042 Move X0, X19
	043 Move X1, X31
	044 Call Transform.get_childCount, X0
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X19
	047 Move X1, X31
	048 Call Transform.GetEnumerator, X0
	049 Move X19, X0
	050 Compare X0, 0
	051 JumpIfEqual {200}
	052 Move X22, 0xF2F000
	053 Move X23, 0xF31000
	054 Move X24, 0xF5B000
	055 Move X25, 0xF2F000
	056 Move X22, [X22+3608]
	057 Move X23, [X23+1592]
	058 Move X24, [X24+2520]
	059 Move X25, [X25+1432]
	060 Move X8, [X19]
	061 Move X1, [X22]
	062 NotImplemented "Instruction LDRH not yet implemented."
	063 Compare X9, 0
	064 JumpIfEqual {71}
	065 Move X10, [X8+176]
	066 Add X10, X10, 8
	067 NotImplemented "Instruction LDUR not yet implemented."
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Subtract X9, X9, 1
	070 Add X10, X10, 16
	071 Move X0, X19
	072 Move W2, W31
	073 Call 0x1C5D788
	074 NotImplemented "Instruction LDRSW not yet implemented."
	075 Add X8, X8, X9
	076 Add X0, X8, 312
	077 Move X8, [X0]
	078 Move X1, [X0+8]
	079 Move X0, X19
	080 NotImplemented "Instruction BLR not yet implemented."
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {153}
	085 Move X8, [X19]
	086 Move X1, [X22]
	087 NotImplemented "Instruction LDRH not yet implemented."
	088 Compare X9, 0
	089 JumpIfEqual {96}
	090 Move X10, [X8+176]
	091 Add X10, X10, 8
	092 NotImplemented "Instruction LDUR not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Subtract X9, X9, 1
	095 Add X10, X10, 16
	096 Move W2, 1
	097 Move X0, X19
	098 Call 0x1C5D788
	099 Move W9, [X10]
	100 Add W9, W9, 1
	101 Add X8, X8, W9
	102 Add X0, X8, 312
	103 Move X8, [X0]
	104 Move X1, [X0+8]
	105 Move X0, X19
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move X20, X0
	108 Compare X0, 0
	109 JumpIfEqual {197}
	110 Move X8, [X20]
	111 Move X1, [X23]
	112 Move W10, [X8+304]
	113 Move W9, [X1+304]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X8, [X8+200]
	116 Add X8, X8, X9
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X1, [X24]
	120 Move X0, X20
	121 Call 0x21A4894, X0
	122 Move X21, X0
	123 Move X0, [X25]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Move X0, X21
	129 Move X1, X31
	130 Move X2, X31
	131 Call Object.op_Inequality, X0, X1
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {149}
	136 Compare X21, 0
	137 JumpIfEqual {198}
	138 Move X8, [X21]
	139 Move X1, [X8+672]
	140 Move X9, [X8+664]
	141 Move X0, X21
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Move X8, [X21]
	144 Move X1, [X8+688]
	145 Move X9, [X8+680]
	146 Move X0, X21
	147 Move V3, V8
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move W1, 1
	150 Move X0, X20
	151 Move V0, V8
	152 Call LTDescr.textAlphaChildrenRecursive, X0, V0, X1
	153 Move X20, X31
	154 Move X21, 0xF2F000
	155 Move X21, [X21+3584]
	156 Move X0, X19
	157 Move X1, [X21]
	158 Call 0x1C17E00
	159 Compare X0, 0
	160 JumpIfEqual {183}
	161 Move X8, [X0]
	162 Move X1, [X21]
	163 Move X19, X0
	164 NotImplemented "Instruction LDRH not yet implemented."
	165 Compare X9, 0
	166 JumpIfEqual {173}
	167 Move X10, [X8+176]
	168 Add X10, X10, 8
	169 NotImplemented "Instruction LDUR not yet implemented."
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Subtract X9, X9, 1
	172 Add X10, X10, 16
	173 Move X0, X19
	174 Move W2, W31
	175 Call 0x1C5D788
	176 NotImplemented "Instruction LDRSW not yet implemented."
	177 Add X8, X8, X9
	178 Add X0, X8, 312
	179 Move X8, [X0]
	180 Move X1, [X0+8]
	181 Move X0, X19
	182 NotImplemented "Instruction BLR not yet implemented."
	183 Compare X20, 0
	184 JumpIfNotEqual {201}
	185 Move X20, [X31+64]
	186 Move X19, [X31+72]
	187 Move X22, [X31+48]
	188 Move X21, [X31+56]
	189 Move X24, [X31+32]
	190 Move X23, [X31+40]
	191 Move X30, [X31+16]
	192 Move X25, [X31+24]
	193 Move V8, [X31+80]
	194 Return 
	195 Move X0, X20
	196 Call 0x1C181E0
	197 Call 0x1C17F20
	198 Call 0x1C17F20
	199 Call 0x1C17F20
	200 Call 0x1C17F20
	201 Move X0, X20
	202 Call 0x1C17F18
	203 Move X21, X0
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move X0, X21
	206 Call 0x3EB2AD0
	207 Move X20, [X0]
	208 Call 0x3EB2AE0
	209 Move X20, X31
	210 Move X21, X0
	211 Move X22, 0xF2F000
	212 Move X22, [X22+3584]
	213 Move X1, [X22]
	214 Move X0, X19
	215 Call 0x1C17E00
	216 Move X19, X0
	217 Compare X0, 0
	218 JumpIfEqual {240}
	219 Move X8, [X19]
	220 Move X1, [X22]
	221 NotImplemented "Instruction LDRH not yet implemented."
	222 Compare X9, 0
	223 JumpIfEqual {230}
	224 Move X10, [X8+176]
	225 Add X10, X10, 8
	226 NotImplemented "Instruction LDUR not yet implemented."
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Subtract X9, X9, 1
	229 Add X10, X10, 16
	230 Move X0, X19
	231 Move W2, W31
	232 Call 0x1C5D788
	233 NotImplemented "Instruction LDRSW not yet implemented."
	234 Add X8, X8, X9
	235 Add X0, X8, 312
	236 Move X8, [X0]
	237 Move X1, [X0+8]
	238 Move X0, X19
	239 NotImplemented "Instruction BLR not yet implemented."
	240 Compare X20, 0
	241 JumpIfNotEqual {244}
	242 Move X0, X21
	243 Call 0x1D2D690
	244 Move X0, X20
	245 Call 0x1C17F18
	246 Call 0x1991590

Method: System.Void textAlphaRecursive(UnityEngine.Transform trans, System.Single val, System.Boolean useRecursion = True)

Disassembly:
	0x031C58E0 LDR X20, [X20 + 0xA40]
	0x031C58E4 MOV X19, X0
	0x031C58E8 TBNZ X8, 0x0, 0x31C590C
	0x031C58EC ADRP X0, 0xF5A000
	0x031C58F0 LDR X0, [X0 + 0x6A0]
	0x031C58F4 BL 0x1C16CF4
	0x031C58F8 ADRP X0, 0xF5A000
	0x031C58FC LDR X0, [X0 + 0xA40]
	0x031C5900 BL 0x1C16CF4
	0x031C5904 MOVZ W8, 0x1
	0x031C5908 STRB W8, [X22 + 0xF9A]
	0x031C590C MOVZ W8, 0xE
	0x031C5910 STR W8, [X19 + 0x94]
	0x031C5914 LDR X0, [X21]
	0x031C5918 BL 0x1C16F10
	0x031C591C LDR X2, [X20]
	0x031C5920 MOV X1, X19
	0x031C5924 MOV X20, X0
	0x031C5928 BL 0x31BFE64
	0x031C592C STR X20, [X19 + 0xA0]
	0x031C5930 MOV X0, X19
	0x031C5934 LDP X20, X19, [X31 + 0x20]
	0x031C5938 LDP X22, X21, [X31 + 0x10]
	0x031C593C LDR X30, [X31], #0x30
	0x031C5940 RET
	0x031C5944 STR X30, [X31 - 0x30]!
	0x031C5948 STP X22, X21, [X31 + 0x10]
	0x031C594C STP X20, X19, [X31 + 0x20]
	0x031C5950 ADRP X22, 0x1216000
	0x031C5954 ADRP X21, 0xF5A000
	0x031C5958 ADRP X20, 0xF5A000
	0x031C595C LDRB W8, [X22 + 0xF9B]
	0x031C5960 LDR X21, [X21 + 0x6A0]
	0x031C5964 LDR X20, [X20 + 0xA48]
	0x031C5968 MOV X19, X0
	0x031C596C TBNZ X8, 0x0, 0x31C5990
	0x031C5970 ADRP X0, 0xF5A000
	0x031C5974 LDR X0, [X0 + 0x6A0]
	0x031C5978 BL 0x1C16CF4
	0x031C597C ADRP X0, 0xF5A000
	0x031C5980 LDR X0, [X0 + 0xA48]
	0x031C5984 BL 0x1C16CF4
	0x031C5988 MOVZ W8, 0x1
	0x031C598C STRB W8, [X22 + 0xF9B]
	0x031C5990 MOVZ W8, 0xF
	0x031C5994 STR W8, [X19 + 0x94]
	0x031C5998 LDR X0, [X21]
	0x031C599C BL 0x1C16F10
	0x031C59A0 LDR X2, [X20]
	0x031C59A4 MOV X1, X19
	0x031C59A8 MOV X20, X0
	0x031C59AC BL 0x31BFE64
	0x031C59B0 STR X20, [X19 + 0xA0]
	0x031C59B4 MOV X0, X19
	0x031C59B8 LDP X20, X19, [X31 + 0x20]
	0x031C59BC LDP X22, X21, [X31 + 0x10]
	0x031C59C0 LDR X30, [X31], #0x30
	0x031C59C4 RET
	0x031C59C8 STR X30, [X31 - 0x30]!
	0x031C59CC STP X22, X21, [X31 + 0x10]
	0x031C59D0 STP X20, X19, [X31 + 0x20]
	0x031C59D4 ADRP X22, 0x1216000
	0x031C59D8 ADRP X21, 0xF5A000
	0x031C59DC ADRP X20, 0xF5A000
	0x031C59E0 LDRB W8, [X22 + 0xF9C]
	0x031C59E4 LDR X21, [X21 + 0x6A0]
	0x031C59E8 LDR X20, [X20 + 0xA50]
	0x031C59EC MOV X19, X0
	0x031C59F0 TBNZ X8, 0x0, 0x31C5A14
	0x031C59F4 ADRP X0, 0xF5A000
	0x031C59F8 LDR X0, [X0 + 0x6A0]
	0x031C59FC BL 0x1C16CF4
	0x031C5A00 ADRP X0, 0xF5A000
	0x031C5A04 LDR X0, [X0 + 0xA50]
	0x031C5A08 BL 0x1C16CF4
	0x031C5A0C MOVZ W8, 0x1
	0x031C5A10 STRB W8, [X22 + 0xF9C]
	0x031C5A14 MOVZ W8, 0x10
	0x031C5A18 STR W8, [X19 + 0x94]
	0x031C5A1C LDR X0, [X21]
	0x031C5A20 BL 0x1C16F10
	0x031C5A24 LDR X2, [X20]
	0x031C5A28 MOV X1, X19
	0x031C5A2C MOV X20, X0
	0x031C5A30 BL 0x31BFE64
	0x031C5A34 STR X20, [X19 + 0xA0]
	0x031C5A38 MOV X0, X19
	0x031C5A3C LDP X20, X19, [X31 + 0x20]
	0x031C5A40 LDP X22, X21, [X31 + 0x10]
	0x031C5A44 LDR X30, [X31], #0x30
	0x031C5A48 RET
	0x031C5A4C STR X30, [X31 - 0x30]!
	0x031C5A50 STP X22, X21, [X31 + 0x10]
	0x031C5A54 STP X20, X19, [X31 + 0x20]
	0x031C5A58 ADRP X22, 0x1216000
	0x031C5A5C ADRP X21, 0xF5A000
	0x031C5A60 ADRP X20, 0xF5A000
	0x031C5A64 LDRB W8, [X22 + 0xF9D]
	0x031C5A68 LDR X21, [X21 + 0x6A0]
	0x031C5A6C LDR X20, [X20 + 0xA58]
	0x031C5A70 MOV X19, X0
	0x031C5A74 TBNZ X8, 0x0, 0x31C5A98
	0x031C5A78 ADRP X0, 0xF5A000
	0x031C5A7C LDR X0, [X0 + 0x6A0]
	0x031C5A80 BL 0x1C16CF4
	0x031C5A84 ADRP X0, 0xF5A000
	0x031C5A88 LDR X0, [X0 + 0xA58]
	0x031C5A8C BL 0x1C16CF4
	0x031C5A90 MOVZ W8, 0x1
	0x031C5A94 STRB W8, [X22 + 0xF9D]
	0x031C5A98 MOVZ W8, 0x11
	0x031C5A9C STR W8, [X19 + 0x94]
	0x031C5AA0 LDR X0, [X21]
	0x031C5AA4 BL 0x1C16F10
	0x031C5AA8 LDR X2, [X20]
	0x031C5AAC MOV X1, X19
	0x031C5AB0 MOV X20, X0
	0x031C5AB4 BL 0x31BFE64
	0x031C5AB8 STR X20, [X19 + 0xA0]
	0x031C5ABC MOV X0, X19
	0x031C5AC0 LDP X20, X19, [X31 + 0x20]
	0x031C5AC4 LDP X22, X21, [X31 + 0x10]
	0x031C5AC8 LDR X30, [X31], #0x30
	0x031C5ACC RET
	0x031C5AD0 STR X30, [X31 - 0x30]!
	0x031C5AD4 STP X22, X21, [X31 + 0x10]
	0x031C5AD8 STP X20, X19, [X31 + 0x20]
	0x031C5ADC ADRP X22, 0x1216000
	0x031C5AE0 ADRP X21, 0xF5A000
	0x031C5AE4 ADRP X20, 0xF5A000
	0x031C5AE8 LDRB W8, [X22 + 0xF9E]
	0x031C5AEC LDR X21, [X21 + 0x6A0]
	0x031C5AF0 LDR X20, [X20 + 0xA60]
	0x031C5AF4 MOV X19, X0
	0x031C5AF8 TBNZ X8, 0x0, 0x31C5B1C
	0x031C5AFC ADRP X0, 0xF5A000
	0x031C5B00 LDR X0, [X0 + 0x6A0]
	0x031C5B04 BL 0x1C16CF4
	0x031C5B08 ADRP X0, 0xF5A000
	0x031C5B0C LDR X0, [X0 + 0xA60]
	0x031C5B10 BL 0x1C16CF4
	0x031C5B14 MOVZ W8, 0x1
	0x031C5B18 STRB W8, [X22 + 0xF9E]
	0x031C5B1C MOVZ W8, 0x12
	0x031C5B20 STR W8, [X19 + 0x94]
	0x031C5B24 LDR X0, [X21]
	0x031C5B28 BL 0x1C16F10
	0x031C5B2C LDR X2, [X20]
	0x031C5B30 MOV X1, X19
	0x031C5B34 MOV X20, X0
	0x031C5B38 BL 0x31BFE64
	0x031C5B3C STR X20, [X19 + 0xA0]
	0x031C5B40 MOV X0, X19
	0x031C5B44 LDP X20, X19, [X31 + 0x20]
	0x031C5B48 LDP X22, X21, [X31 + 0x10]
	0x031C5B4C LDR X30, [X31], #0x30
	0x031C5B50 RET
	0x031C5B54 STR X30, [X31 - 0x30]!
	0x031C5B58 STP X22, X21, [X31 + 0x10]
	0x031C5B5C STP X20, X19, [X31 + 0x20]
	0x031C5B60 ADRP X22, 0x1216000
	0x031C5B64 ADRP X21, 0xF5A000
	0x031C5B68 ADRP X20, 0xF5A000
	0x031C5B6C LDRB W8, [X22 + 0xF9F]
	0x031C5B70 LDR X21, [X21 + 0x6A0]
	0x031C5B74 LDR X20, [X20 + 0xA68]
	0x031C5B78 MOV X19, X0
	0x031C5B7C TBNZ X8, 0x0, 0x31C5BA0
	0x031C5B80 ADRP X0, 0xF5A000
	0x031C5B84 LDR X0, [X0 + 0x6A0]
	0x031C5B88 BL 0x1C16CF4
	0x031C5B8C ADRP X0, 0xF5A000
	0x031C5B90 LDR X0, [X0 + 0xA68]
	0x031C5B94 BL 0x1C16CF4
	0x031C5B98 MOVZ W8, 0x1
	0x031C5B9C STRB W8, [X22 + 0xF9F]
	0x031C5BA0 MOVZ W8, 0x13
	0x031C5BA4 STR W8, [X19 + 0x94]
	0x031C5BA8 LDR X0, [X21]
	0x031C5BAC BL 0x1C16F10
	0x031C5BB0 LDR X2, [X20]
	0x031C5BB4 MOV X1, X19
	0x031C5BB8 MOV X20, X0
	0x031C5BBC BL 0x31BFE64
	0x031C5BC0 STR X20, [X19 + 0xA0]
	0x031C5BC4 MOV X0, X19
	0x031C5BC8 LDP X20, X19, [X31 + 0x20]
	0x031C5BCC LDP X22, X21, [X31 + 0x10]
	0x031C5BD0 LDR X30, [X31], #0x30
	0x031C5BD4 RET
	0x031C5BD8 STR X30, [X31 - 0x30]!
	0x031C5BDC STP X22, X21, [X31 + 0x10]
	0x031C5BE0 STP X20, X19, [X31 + 0x20]
	0x031C5BE4 ADRP X22, 0x1216000
	0x031C5BE8 ADRP X21, 0xF5A000
	0x031C5BEC ADRP X20, 0xF5A000
	0x031C5BF0 LDRB W8, [X22 + 0xFA0]
	0x031C5BF4 LDR X21, [X21 + 0x6A0]
	0x031C5BF8 LDR X20, [X20 + 0xA70]
	0x031C5BFC MOV X19, X0
	0x031C5C00 TBNZ X8, 0x0, 0x31C5C24
	0x031C5C04 ADRP X0, 0xF5A000
	0x031C5C08 LDR X0, [X0 + 0x6A0]
	0x031C5C0C BL 0x1C16CF4
	0x031C5C10 ADRP X0, 0xF5A000
	0x031C5C14 LDR X0, [X0 + 0xA70]
	0x031C5C18 BL 0x1C16CF4
	0x031C5C1C MOVZ W8, 0x1
	0x031C5C20 STRB W8, [X22 + 0xFA0]
	0x031C5C24 MOVZ W8, 0x14
	0x031C5C28 STR W8, [X19 + 0x94]
	0x031C5C2C LDR X0, [X21]
	0x031C5C30 BL 0x1C16F10
	0x031C5C34 LDR X2, [X20]
	0x031C5C38 MOV X1, X19
	0x031C5C3C MOV X20, X0
	0x031C5C40 BL 0x31BFE64
	0x031C5C44 STR X20, [X19 + 0xA0]
	0x031C5C48 MOV X0, X19
	0x031C5C4C LDP X20, X19, [X31 + 0x20]
	0x031C5C50 LDP X22, X21, [X31 + 0x10]
	0x031C5C54 LDR X30, [X31], #0x30
	0x031C5C58 RET
	0x031C5C5C STR X30, [X31 - 0x30]!
	0x031C5C60 STP X22, X21, [X31 + 0x10]
	0x031C5C64 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x1217000
	008 Move W8, [X21+3978]
	009 Move W20, W1
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {33}
	016 Move X0, 0xF5B000
	017 Move X0, [X0+2520]
	018 Call 0x1C17CF4
	019 Move X0, 0xF2F000
	020 Move X0, [X0+3584]
	021 Call 0x1C17CF4
	022 Move X0, 0xF2F000
	023 Move X0, [X0+3608]
	024 Call 0x1C17CF4
	025 Move X0, 0xF2F000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move X0, 0xF31000
	029 Move X0, [X0+1592]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X21+3978], W8
	033 Compare X19, 0
	034 JumpIfEqual {189}
	035 Move X8, 0xF5B000
	036 Move X8, [X8+2520]
	037 Move X21, 0xF2F000
	038 Move X0, X19
	039 Move X1, [X8]
	040 Move X21, [X21+1432]
	041 Call 0x21A4894, X0
	042 Move X8, [X21]
	043 Move X21, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X21
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {70}
	057 Compare X21, 0
	058 JumpIfEqual {189}
	059 Move X8, [X21]
	060 Move X0, X21
	061 Move X9, [X8+664]
	062 Move X1, [X8+672]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X8, [X21]
	065 Move X0, X21
	066 Move V3, V8
	067 Move X9, [X8+680]
	068 Move X1, [X8+688]
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move TEMP, X20
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {181}
	074 Move X0, X19
	075 Move X1, X31
	076 Call Transform.get_childCount, X0
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X0, X19
	079 Move X1, X31
	080 Call Transform.GetEnumerator, X0
	081 Move X19, X0
	082 Compare X0, 0
	083 JumpIfEqual {190}
	084 Move X20, 0xF2F000
	085 Move X21, 0xF31000
	086 Move X20, [X20+3608]
	087 Move X21, [X21+1592]
	088 Move X8, [X19]
	089 Move X1, [X20]
	090 NotImplemented "Instruction LDRH not yet implemented."
	091 Compare X9, 0
	092 JumpIfEqual {99}
	093 Move X10, [X8+176]
	094 Add X10, X10, 8
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Subtract X9, X9, 1
	098 Add X10, X10, 16
	099 Move X0, X19
	100 Move W2, W31
	101 Call 0x1C5D788
	102 NotImplemented "Instruction LDRSW not yet implemented."
	103 Add X8, X8, X9
	104 Add X0, X8, 312
	105 Move X8, [X0]
	106 Move X1, [X0+8]
	107 Move X0, X19
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {149}
	113 Move X8, [X19]
	114 Move X1, [X20]
	115 NotImplemented "Instruction LDRH not yet implemented."
	116 Compare X9, 0
	117 JumpIfEqual {124}
	118 Move X10, [X8+176]
	119 Add X10, X10, 8
	120 NotImplemented "Instruction LDUR not yet implemented."
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Subtract X9, X9, 1
	123 Add X10, X10, 16
	124 Move W2, 1
	125 Move X0, X19
	126 Call 0x1C5D788
	127 Move W9, [X10]
	128 Add W9, W9, 1
	129 Add X8, X8, W9
	130 Add X0, X8, 312
	131 Move X8, [X0]
	132 Move X1, [X0+8]
	133 Move X0, X19
	134 NotImplemented "Instruction BLR not yet implemented."
	135 Compare X0, 0
	136 JumpIfEqual {146}
	137 Move X8, [X0]
	138 Move X1, [X21]
	139 Move W10, [X8+304]
	140 Move W9, [X1+304]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X8, [X8+200]
	143 Add X8, X8, X9
	144 NotImplemented "Instruction LDUR not yet implemented."
	145 NotImplemented "Instruction CMP not yet implemented."
	146 Move W1, 1
	147 Move V0, V8
	148 Call LTDescr.textAlphaRecursive, X0, V0, X1
	149 Move X20, X31
	150 Move X21, 0xF2F000
	151 Move X21, [X21+3584]
	152 Move X0, X19
	153 Move X1, [X21]
	154 Call 0x1C17E00
	155 Compare X0, 0
	156 JumpIfEqual {179}
	157 Move X8, [X0]
	158 Move X1, [X21]
	159 Move X19, X0
	160 NotImplemented "Instruction LDRH not yet implemented."
	161 Compare X9, 0
	162 JumpIfEqual {169}
	163 Move X10, [X8+176]
	164 Add X10, X10, 8
	165 NotImplemented "Instruction LDUR not yet implemented."
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Subtract X9, X9, 1
	168 Add X10, X10, 16
	169 Move X0, X19
	170 Move W2, W31
	171 Call 0x1C5D788
	172 NotImplemented "Instruction LDRSW not yet implemented."
	173 Add X8, X8, X9
	174 Add X0, X8, 312
	175 Move X8, [X0]
	176 Move X1, [X0+8]
	177 Move X0, X19
	178 NotImplemented "Instruction BLR not yet implemented."
	179 Compare X20, 0
	180 JumpIfNotEqual {191}
	181 Move X20, [X31+32]
	182 Move X19, [X31+40]
	183 Move X22, [X31+16]
	184 Move X21, [X31+24]
	185 Move X30, [X31+8]
	186 Move V8, [X31+48]
	187 Return 
	188 Call 0x1C181E0
	189 Call 0x1C17F20
	190 Call 0x1C17F20
	191 Move X0, X20
	192 Call 0x1C17F18
	193 Move X21, X0
	194 NotImplemented "Instruction CMP not yet implemented."
	195 Move X0, X21
	196 Call 0x3EB2AD0
	197 Move X20, [X0]
	198 Call 0x3EB2AE0
	199 Move X20, X31
	200 Move X21, X0
	201 Move X22, 0xF2F000
	202 Move X22, [X22+3584]
	203 Move X1, [X22]
	204 Move X0, X19
	205 Call 0x1C17E00
	206 Move X19, X0
	207 Compare X0, 0
	208 JumpIfEqual {230}
	209 Move X8, [X19]
	210 Move X1, [X22]
	211 NotImplemented "Instruction LDRH not yet implemented."
	212 Compare X9, 0
	213 JumpIfEqual {220}
	214 Move X10, [X8+176]
	215 Add X10, X10, 8
	216 NotImplemented "Instruction LDUR not yet implemented."
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Subtract X9, X9, 1
	219 Add X10, X10, 16
	220 Move X0, X19
	221 Move W2, W31
	222 Call 0x1C5D788
	223 NotImplemented "Instruction LDRSW not yet implemented."
	224 Add X8, X8, X9
	225 Add X0, X8, 312
	226 Move X8, [X0]
	227 Move X1, [X0+8]
	228 Move X0, X19
	229 NotImplemented "Instruction BLR not yet implemented."
	230 Compare X20, 0
	231 JumpIfNotEqual {234}
	232 Move X0, X21
	233 Call 0x1D2D690
	234 Move X0, X20
	235 Call 0x1C17F18
	236 Call 0x1991590

Method: System.Void textColorRecursive(UnityEngine.Transform trans, UnityEngine.Color toColor)

Disassembly:
	0x031C5C68 ADRP X22, 0x1216000
	0x031C5C6C ADRP X21, 0xF5A000
	0x031C5C70 ADRP X20, 0xF5A000
	0x031C5C74 LDRB W8, [X22 + 0xFA1]
	0x031C5C78 LDR X21, [X21 + 0x6A0]
	0x031C5C7C LDR X20, [X20 + 0xA78]
	0x031C5C80 MOV X19, X0
	0x031C5C84 TBNZ X8, 0x0, 0x31C5CA8
	0x031C5C88 ADRP X0, 0xF5A000
	0x031C5C8C LDR X0, [X0 + 0x6A0]
	0x031C5C90 BL 0x1C16CF4
	0x031C5C94 ADRP X0, 0xF5A000
	0x031C5C98 LDR X0, [X0 + 0xA78]
	0x031C5C9C BL 0x1C16CF4
	0x031C5CA0 MOVZ W8, 0x1
	0x031C5CA4 STRB W8, [X22 + 0xFA1]
	0x031C5CA8 MOVZ W8, 0x15
	0x031C5CAC STR W8, [X19 + 0x94]
	0x031C5CB0 LDR X0, [X21]
	0x031C5CB4 BL 0x1C16F10
	0x031C5CB8 LDR X2, [X20]
	0x031C5CBC MOV X1, X19
	0x031C5CC0 MOV X20, X0
	0x031C5CC4 BL 0x31BFE64
	0x031C5CC8 STR X20, [X19 + 0xA0]
	0x031C5CCC MOV X0, X19
	0x031C5CD0 LDP X20, X19, [X31 + 0x20]
	0x031C5CD4 LDP X22, X21, [X31 + 0x10]
	0x031C5CD8 LDR X30, [X31], #0x30
	0x031C5CDC RET
	0x031C5CE0 STR X30, [X31 - 0x30]!
	0x031C5CE4 STP X22, X21, [X31 + 0x10]
	0x031C5CE8 STP X20, X19, [X31 + 0x20]
	0x031C5CEC ADRP X22, 0x1216000
	0x031C5CF0 ADRP X21, 0xF5A000
	0x031C5CF4 ADRP X20, 0xF5A000
	0x031C5CF8 LDRB W8, [X22 + 0xFA2]
	0x031C5CFC LDR X21, [X21 + 0x6A0]
	0x031C5D00 LDR X20, [X20 + 0xA80]
	0x031C5D04 MOV X19, X0
	0x031C5D08 TBNZ X8, 0x0, 0x31C5D2C
	0x031C5D0C ADRP X0, 0xF5A000
	0x031C5D10 LDR X0, [X0 + 0x6A0]
	0x031C5D14 BL 0x1C16CF4
	0x031C5D18 ADRP X0, 0xF5A000
	0x031C5D1C LDR X0, [X0 + 0xA80]
	0x031C5D20 BL 0x1C16CF4
	0x031C5D24 MOVZ W8, 0x1
	0x031C5D28 STRB W8, [X22 + 0xFA2]
	0x031C5D2C MOVZ W8, 0x16
	0x031C5D30 STR W8, [X19 + 0x94]
	0x031C5D34 LDR X0, [X21]
	0x031C5D38 BL 0x1C16F10
	0x031C5D3C LDR X2, [X20]
	0x031C5D40 MOV X1, X19
	0x031C5D44 MOV X20, X0
	0x031C5D48 BL 0x31BFE64
	0x031C5D4C STR X20, [X19 + 0xA0]
	0x031C5D50 MOV X0, X19
	0x031C5D54 LDP X20, X19, [X31 + 0x20]
	0x031C5D58 LDP X22, X21, [X31 + 0x10]
	0x031C5D5C LDR X30, [X31], #0x30
	0x031C5D60 RET
	0x031C5D64 STR X30, [X31 - 0x30]!
	0x031C5D68 STP X22, X21, [X31 + 0x10]
	0x031C5D6C STP X20, X19, [X31 + 0x20]
	0x031C5D70 ADRP X22, 0x1216000
	0x031C5D74 ADRP X21, 0xF5A000
	0x031C5D78 ADRP X20, 0xF5A000
	0x031C5D7C LDRB W8, [X22 + 0xFA3]
	0x031C5D80 LDR X21, [X21 + 0x6A0]
	0x031C5D84 LDR X20, [X20 + 0xA88]
	0x031C5D88 MOV X19, X0
	0x031C5D8C TBNZ X8, 0x0, 0x31C5DB0
	0x031C5D90 ADRP X0, 0xF5A000
	0x031C5D94 LDR X0, [X0 + 0x6A0]
	0x031C5D98 BL 0x1C16CF4
	0x031C5D9C ADRP X0, 0xF5A000
	0x031C5DA0 LDR X0, [X0 + 0xA88]
	0x031C5DA4 BL 0x1C16CF4
	0x031C5DA8 MOVZ W8, 0x1
	0x031C5DAC STRB W8, [X22 + 0xFA3]
	0x031C5DB0 MOVZ W8, 0x17
	0x031C5DB4 STR W8, [X19 + 0x94]
	0x031C5DB8 LDR X0, [X21]
	0x031C5DBC BL 0x1C16F10
	0x031C5DC0 LDR X2, [X20]
	0x031C5DC4 MOV X1, X19
	0x031C5DC8 MOV X20, X0
	0x031C5DCC BL 0x31BFE64
	0x031C5DD0 STR X20, [X19 + 0xA0]
	0x031C5DD4 MOV X0, X19
	0x031C5DD8 LDP X20, X19, [X31 + 0x20]
	0x031C5DDC LDP X22, X21, [X31 + 0x10]
	0x031C5DE0 LDR X30, [X31], #0x30
	0x031C5DE4 RET
	0x031C5DE8 STR X30, [X31 - 0x30]!
	0x031C5DEC STP X22, X21, [X31 + 0x10]
	0x031C5DF0 STP X20, X19, [X31 + 0x20]
	0x031C5DF4 ADRP X22, 0x1216000
	0x031C5DF8 ADRP X21, 0xF5A000
	0x031C5DFC ADRP X20, 0xF5A000
	0x031C5E00 LDRB W8, [X22 + 0xFA4]
	0x031C5E04 LDR X21, [X21 + 0x6A0]
	0x031C5E08 LDR X20, [X20 + 0xA90]
	0x031C5E0C MOV X19, X0
	0x031C5E10 TBNZ X8, 0x0, 0x31C5E34
	0x031C5E14 ADRP X0, 0xF5A000
	0x031C5E18 LDR X0, [X0 + 0x6A0]
	0x031C5E1C BL 0x1C16CF4
	0x031C5E20 ADRP X0, 0xF5A000
	0x031C5E24 LDR X0, [X0 + 0xA90]
	0x031C5E28 BL 0x1C16CF4
	0x031C5E2C MOVZ W8, 0x1
	0x031C5E30 STRB W8, [X22 + 0xFA4]
	0x031C5E34 MOVZ W8, 0x18
	0x031C5E38 STR W8, [X19 + 0x94]
	0x031C5E3C LDR X0, [X21]
	0x031C5E40 BL 0x1C16F10
	0x031C5E44 LDR X2, [X20]
	0x031C5E48 MOV X1, X19
	0x031C5E4C MOV X20, X0
	0x031C5E50 BL 0x31BFE64
	0x031C5E54 STR X20, [X19 + 0xA0]
	0x031C5E58 MOV X0, X19
	0x031C5E5C LDP X20, X19, [X31 + 0x20]
	0x031C5E60 LDP X22, X21, [X31 + 0x10]
	0x031C5E64 LDR X30, [X31], #0x30
	0x031C5E68 RET
	0x031C5E6C STR X30, [X31 - 0x30]!
	0x031C5E70 STP X22, X21, [X31 + 0x10]
	0x031C5E74 STP X20, X19, [X31 + 0x20]
	0x031C5E78 ADRP X22, 0x1216000
	0x031C5E7C ADRP X21, 0xF5A000
	0x031C5E80 ADRP X20, 0xF5A000
	0x031C5E84 LDRB W8, [X22 + 0xFA5]
	0x031C5E88 LDR X21, [X21 + 0x6A0]
	0x031C5E8C LDR X20, [X20 + 0xA98]
	0x031C5E90 MOV X19, X0
	0x031C5E94 TBNZ X8, 0x0, 0x31C5EB8
	0x031C5E98 ADRP X0, 0xF5A000
	0x031C5E9C LDR X0, [X0 + 0x6A0]
	0x031C5EA0 BL 0x1C16CF4
	0x031C5EA4 ADRP X0, 0xF5A000
	0x031C5EA8 LDR X0, [X0 + 0xA98]
	0x031C5EAC BL 0x1C16CF4
	0x031C5EB0 MOVZ W8, 0x1
	0x031C5EB4 STRB W8, [X22 + 0xFA5]
	0x031C5EB8 MOVZ W8, 0x19
	0x031C5EBC STR W8, [X19 + 0x94]
	0x031C5EC0 LDR X0, [X21]
	0x031C5EC4 BL 0x1C16F10
	0x031C5EC8 LDR X2, [X20]
	0x031C5ECC MOV X1, X19
	0x031C5ED0 MOV X20, X0
	0x031C5ED4 BL 0x31BFE64
	0x031C5ED8 STR X20, [X19 + 0xA0]
	0x031C5EDC MOV X0, X19
	0x031C5EE0 LDP X20, X19, [X31 + 0x20]
	0x031C5EE4 LDP X22, X21, [X31 + 0x10]
	0x031C5EE8 LDR X30, [X31], #0x30
	0x031C5EEC RET
	0x031C5EF0 STR X30, [X31 - 0x30]!
	0x031C5EF4 STP X22, X21, [X31 + 0x10]
	0x031C5EF8 STP X20, X19, [X31 + 0x20]
	0x031C5EFC ADRP X22, 0x1216000
	0x031C5F00 ADRP X21, 0xF5A000
	0x031C5F04 ADRP X20, 0xF5A000
	0x031C5F08 LDRB W8, [X22 + 0xFA6]
	0x031C5F0C LDR X21, [X21 + 0x6A0]
	0x031C5F10 LDR X20, [X20 + 0xAA0]
	0x031C5F14 MOV X19, X0
	0x031C5F18 TBNZ X8, 0x0, 0x31C5F3C
	0x031C5F1C ADRP X0, 0xF5A000
	0x031C5F20 LDR X0, [X0 + 0x6A0]
	0x031C5F24 BL 0x1C16CF4
	0x031C5F28 ADRP X0, 0xF5A000
	0x031C5F2C LDR X0, [X0 + 0xAA0]
	0x031C5F30 BL 0x1C16CF4
	0x031C5F34 MOVZ W8, 0x1
	0x031C5F38 STRB W8, [X22 + 0xFA6]
	0x031C5F3C MOVZ W8, 0x1A
	0x031C5F40 STR W8, [X19 + 0x94]
	0x031C5F44 LDR X0, [X21]
	0x031C5F48 BL 0x1C16F10
	0x031C5F4C LDR X2, [X20]
	0x031C5F50 MOV X1, X19
	0x031C5F54 MOV X20, X0
	0x031C5F58 BL 0x31BFE64
	0x031C5F5C STR X20, [X19 + 0xA0]
	0x031C5F60 MOV X0, X19
	0x031C5F64 LDP X20, X19, [X31 + 0x20]
	0x031C5F68 LDP X22, X21, [X31 + 0x10]
	0x031C5F6C LDR X30, [X31], #0x30
	0x031C5F70 RET
	0x031C5F74 STR X30, [X31 - 0x30]!
	0x031C5F78 STP X22, X21, [X31 + 0x10]
	0x031C5F7C STP X20, X19, [X31 + 0x20]
	0x031C5F80 ADRP X22, 0x1216000
	0x031C5F84 ADRP X21, 0xF5A000
	0x031C5F88 ADRP X20, 0xF5A000
	0x031C5F8C LDRB W8, [X22 + 0xFA7]
	0x031C5F90 LDR X21, [X21 + 0x6A0]
	0x031C5F94 LDR X20, [X20 + 0xAA8]
	0x031C5F98 MOV X19, X0
	0x031C5F9C TBNZ X8, 0x0, 0x31C5FC0
	0x031C5FA0 ADRP X0, 0xF5A000
	0x031C5FA4 LDR X0, [X0 + 0x6A0]
	0x031C5FA8 BL 0x1C16CF4
	0x031C5FAC ADRP X0, 0xF5A000
	0x031C5FB0 LDR X0, [X0 + 0xAA8]
	0x031C5FB4 BL 0x1C16CF4
	0x031C5FB8 MOVZ W8, 0x1
	0x031C5FBC STRB W8, [X22 + 0xFA7]
	0x031C5FC0 MOVZ W8, 0x1B
	0x031C5FC4 STR W8, [X19 + 0x94]
	0x031C5FC8 LDR X0, [X21]
	0x031C5FCC BL 0x1C16F10
	0x031C5FD0 LDR X2, [X20]
	0x031C5FD4 MOV X1, X19
	0x031C5FD8 MOV X20, X0
	0x031C5FDC BL 0x31BFE64
	0x031C5FE0 STR X20, [X19 + 0xA0]
	0x031C5FE4 MOV X0, X19
	0x031C5FE8 LDP X20, X19, [X31 + 0x20]
	0x031C5FEC LDP X22, X21, [X31 + 0x10]
	0x031C5FF0 LDR X30, [X31], #0x30
	0x031C5FF4 RET
	0x031C5FF8 STR X30, [X31 - 0x30]!
	0x031C5FFC STP X22, X21, [X31 + 0x10]
	0x031C6000 STP X20, X19, [X31 + 0x20]
	0x031C6004 ADRP X22, 0x1215000
	0x031C6008 ADRP X21, 0xF59000
	0x031C600C ADRP X20, 0xF59000
	0x031C6010 LDRB W8, [X22 + 0xFA8]
	0x031C6014 LDR X21, [X21 + 0x6A0]
	0x031C6018 LDR X20, [X20 + 0xAB0]
	0x031C601C MOV X19, X0
	0x031C6020 TBNZ X8, 0x0, 0x31C6044

ISIL:
	001 Move [X31-112], D11
	002 Move [X31-104], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x1217000
	015 Move W8, [X20+3979]
	016 Move V8, V3
	017 Move V9, V2
	018 Move V10, V1
	019 Move V11, V0
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {42}
	025 Move X0, 0xF5B000
	026 Move X0, [X0+2520]
	027 Call 0x1C17CF4
	028 Move X0, 0xF2F000
	029 Move X0, [X0+3584]
	030 Call 0x1C17CF4
	031 Move X0, 0xF2F000
	032 Move X0, [X0+3608]
	033 Call 0x1C17CF4
	034 Move X0, 0xF2F000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move X0, 0xF31000
	038 Move X0, [X0+1592]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+3979], W8
	042 Compare X19, 0
	043 JumpIfEqual {205}
	044 Move X0, X19
	045 Move X1, X31
	046 Call Transform.get_childCount, X0
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X22, 0xF2F000
	049 Move X22, [X22+3584]
	050 Move X0, X19
	051 Move X1, X31
	052 Call Transform.GetEnumerator, X0
	053 Move X19, X0
	054 Compare X0, 0
	055 JumpIfEqual {206}
	056 Move X23, 0xF2F000
	057 Move X24, 0xF31000
	058 Move X25, 0xF5B000
	059 Move X26, 0xF2F000
	060 Move X23, [X23+3608]
	061 Move X24, [X24+1592]
	062 Move X25, [X25+2520]
	063 Move X26, [X26+1432]
	064 Move X8, [X19]
	065 Move X1, [X23]
	066 NotImplemented "Instruction LDRH not yet implemented."
	067 Compare X9, 0
	068 JumpIfEqual {75}
	069 Move X10, [X8+176]
	070 Add X10, X10, 8
	071 NotImplemented "Instruction LDUR not yet implemented."
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Subtract X9, X9, 1
	074 Add X10, X10, 16
	075 Move X0, X19
	076 Move W2, W31
	077 Call 0x1C5D788
	078 NotImplemented "Instruction LDRSW not yet implemented."
	079 Add X8, X8, X9
	080 Add X0, X8, 312
	081 Move X8, [X0]
	082 Move X1, [X0+8]
	083 Move X0, X19
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {157}
	089 Move X8, [X19]
	090 Move X1, [X23]
	091 NotImplemented "Instruction LDRH not yet implemented."
	092 Compare X9, 0
	093 JumpIfEqual {100}
	094 Move X10, [X8+176]
	095 Add X10, X10, 8
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Subtract X9, X9, 1
	099 Add X10, X10, 16
	100 Move W2, 1
	101 Move X0, X19
	102 Call 0x1C5D788
	103 Move W9, [X10]
	104 Add W9, W9, 1
	105 Add X8, X8, W9
	106 Add X0, X8, 312
	107 Move X8, [X0]
	108 Move X1, [X0+8]
	109 Move X0, X19
	110 NotImplemented "Instruction BLR not yet implemented."
	111 Move X20, X0
	112 Compare X0, 0
	113 JumpIfEqual {203}
	114 Move X8, [X20]
	115 Move X1, [X24]
	116 Move W10, [X8+304]
	117 Move W9, [X1+304]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X8, [X8+200]
	120 Add X8, X8, X9
	121 NotImplemented "Instruction LDUR not yet implemented."
	122 NotImplemented "Instruction CMP not yet implemented."
	123 Move X1, [X25]
	124 Move X0, X20
	125 Call 0x21A4894, X0
	126 Move X21, X0
	127 Move X0, [X26]
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Move X0, X21
	133 Move X1, X31
	134 Move X2, X31
	135 Call Object.op_Inequality, X0, X1
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {151}
	140 Compare X21, 0
	141 JumpIfEqual {204}
	142 Move X8, [X21]
	143 Move X1, [X8+688]
	144 Move X9, [X8+680]
	145 Move X0, X21
	146 Move V0, V11
	147 Move V1, V10
	148 Move V2, V9
	149 Move V3, V8
	150 NotImplemented "Instruction BLR not yet implemented."
	151 Move X0, X20
	152 Move V0, V11
	153 Move V1, V10
	154 Move V2, V9
	155 Move V3, V8
	156 Call LTDescr.textColorRecursive, X0, X1
	157 Move X20, X31
	158 Move X1, [X22]
	159 Move X0, X19
	160 Call 0x1C17E00
	161 Compare X0, 0
	162 JumpIfEqual {185}
	163 Move X8, [X0]
	164 Move X1, [X22]
	165 Move X19, X0
	166 NotImplemented "Instruction LDRH not yet implemented."
	167 Compare X9, 0
	168 JumpIfEqual {175}
	169 Move X10, [X8+176]
	170 Add X10, X10, 8
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Subtract X9, X9, 1
	174 Add X10, X10, 16
	175 Move X0, X19
	176 Move W2, W31
	177 Call 0x1C5D788
	178 NotImplemented "Instruction LDRSW not yet implemented."
	179 Add X8, X8, X9
	180 Add X0, X8, 312
	181 Move X8, [X0]
	182 Move X1, [X0+8]
	183 Move X0, X19
	184 NotImplemented "Instruction BLR not yet implemented."
	185 Compare X20, 0
	186 JumpIfNotEqual {207}
	187 Move X20, [X31+96]
	188 Move X19, [X31+104]
	189 Move X22, [X31+80]
	190 Move X21, [X31+88]
	191 Move X24, [X31+64]
	192 Move X23, [X31+72]
	193 Move X26, [X31+48]
	194 Move X25, [X31+56]
	195 Move X30, [X31+32]
	196 Move D9, [X31+16]
	197 Move D8, [X31+24]
	198 Move D11, [X31+112]
	199 Move D10, [X31+120]
	200 Return 
	201 Move X0, X20
	202 Call 0x1C181E0
	203 Call 0x1C17F20
	204 Call 0x1C17F20
	205 Call 0x1C17F20
	206 Call 0x1C17F20
	207 Move X0, X20
	208 Call 0x1C17F18
	209 NotImplemented "Instruction CMP not yet implemented."
	210 Call 0x3EB2AD0
	211 Move X20, [X0]
	212 Call 0x3EB2AE0
	213 Move [X31+40], X0
	214 Move X20, X31
	215 Move [X31+40], X0
	216 Move X1, [X22]
	217 Move X0, X19
	218 Call 0x1C17E00
	219 Move X19, X0
	220 Compare X0, 0
	221 JumpIfEqual {243}
	222 Move X8, [X19]
	223 Move X1, [X22]
	224 NotImplemented "Instruction LDRH not yet implemented."
	225 Compare X9, 0
	226 JumpIfEqual {233}
	227 Move X10, [X8+176]
	228 Add X10, X10, 8
	229 NotImplemented "Instruction LDUR not yet implemented."
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Subtract X9, X9, 1
	232 Add X10, X10, 16
	233 Move X0, X19
	234 Move W2, W31
	235 Call 0x1C5D788
	236 NotImplemented "Instruction LDRSW not yet implemented."
	237 Add X8, X8, X9
	238 Add X0, X8, 312
	239 Move X8, [X0]
	240 Move X1, [X0+8]
	241 Move X0, X19
	242 NotImplemented "Instruction BLR not yet implemented."
	243 Compare X20, 0
	244 JumpIfNotEqual {247}
	245 Move X0, [X31+40]
	246 Call 0x1D2D690
	247 Move X0, X20
	248 Call 0x1C17F18
	249 Call 0x1991590

Method: UnityEngine.Color tweenColor(LTDescr tween, System.Single val)

Disassembly:
	0x031C6024 ADRP X0, 0xF59000
	0x031C6028 LDR X0, [X0 + 0x6A0]
	0x031C602C BL 0x1C16CF4
	0x031C6030 ADRP X0, 0xF59000
	0x031C6034 LDR X0, [X0 + 0xAB0]
	0x031C6038 BL 0x1C16CF4
	0x031C603C MOVZ W8, 0x1
	0x031C6040 STRB W8, [X22 + 0xFA8]
	0x031C6044 MOVZ W8, 0x1C
	0x031C6048 STR W8, [X19 + 0x94]
	0x031C604C LDR X0, [X21]
	0x031C6050 BL 0x1C16F10
	0x031C6054 LDR X2, [X20]
	0x031C6058 MOV X1, X19
	0x031C605C MOV X20, X0
	0x031C6060 BL 0x31BFE64
	0x031C6064 STR X20, [X19 + 0xA0]
	0x031C6068 MOV X0, X19
	0x031C606C LDP X20, X19, [X31 + 0x20]
	0x031C6070 LDP X22, X21, [X31 + 0x10]
	0x031C6074 LDR X30, [X31], #0x30
	0x031C6078 RET
	0x031C607C STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-16], X30
	002 Compare X0, 0
	003 JumpIfEqual {25}
	004 Move X8, [X0+232]
	005 Compare X8, 0
	006 JumpIfEqual {25}
	007 Move V1, [X8+24]
	008 NotImplemented "Instruction LDUR not yet implemented."
	009 Move V2, [X8+32]
	010 Move V4, [X8+44]
	011 Move V5, [X0+112]
	012 Move V6, [X0+100]
	013 Subtract V1, V1, V3
	014 Subtract S2, S2, S4
	015 NotImplemented "Instruction INVALID not yet implemented."
	016 Subtract S5, S5, S6
	017 Multiply S2, S2, S0
	018 Multiply S5, S5, S0
	019 Add V0, V3, V1
	020 Add S2, S4, S2
	021 Add S3, S6, S5
	022 Move S1, V0.S[1]
	023 Move X30, [X31+16]
	024 Return X0
	025 Call 0x1C17F20

Method: LTDescr pause()

Disassembly:
	0x031C6080 STP X22, X21, [X31 + 0x10]
	0x031C6084 STP X20, X19, [X31 + 0x20]
	0x031C6088 ADRP X22, 0x1215000
	0x031C608C ADRP X21, 0xF59000
	0x031C6090 ADRP X20, 0xF59000
	0x031C6094 LDRB W8, [X22 + 0xFA9]
	0x031C6098 LDR X21, [X21 + 0x6A0]

ISIL:
	001 Move V0, [X0+64]
	002 NotImplemented "Instruction FCMP not yet implemented."
	003 Return X0
	004 Move [X0+68], S0
	005 Move [X0+64], W31
	006 Return X0

Method: LTDescr resume()

Disassembly:
	0x031C609C LDR X20, [X20 + 0xAB8]
	0x031C60A0 MOV X19, X0
	0x031C60A4 TBNZ X8, 0x0, 0x31C60C8

ISIL:
	001 Move V0, [X0+68]
	002 Move [X0+64], S0
	003 Return X0

Method: LTDescr setAxis(UnityEngine.Vector3 axis)

Disassembly:
	0x031C60A8 ADRP X0, 0xF59000
	0x031C60AC LDR X0, [X0 + 0x6A0]
	0x031C60B0 BL 0x1C16CF4
	0x031C60B4 ADRP X0, 0xF59000
	0x031C60B8 LDR X0, [X0 + 0xAB8]
	0x031C60BC BL 0x1C16CF4
	0x031C60C0 MOVZ W8, 0x1
	0x031C60C4 STRB W8, [X22 + 0xFA9]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+36], S0
	006 Move [X8+44], S1
	007 Move [X8+44], S2
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setDelay(System.Single delay)

Disassembly:
	0x031C60C8 MOVZ W8, 0x1D
	0x031C60CC STR W8, [X19 + 0x94]

ISIL:
	001 Move [X0+36], S0
	002 Return X0

Method: LTDescr setEase(LeanTweenType easeType)

Disassembly:
	0x031C60D0 LDR X0, [X21]
	0x031C60D4 BL 0x1C16F10
	0x031C60D8 LDR X2, [X20]
	0x031C60DC MOV X1, X19
	0x031C60E0 MOV X20, X0
	0x031C60E4 BL 0x31BFE64
	0x031C60E8 STR X20, [X19 + 0xA0]
	0x031C60EC MOV X0, X19
	0x031C60F0 LDP X20, X19, [X31 + 0x20]
	0x031C60F4 LDP X22, X21, [X31 + 0x10]
	0x031C60F8 LDR X30, [X31], #0x30
	0x031C60FC RET
	0x031C6100 STR X30, [X31 - 0x30]!
	0x031C6104 STP X22, X21, [X31 + 0x10]
	0x031C6108 STP X20, X19, [X31 + 0x20]
	0x031C610C ADRP X22, 0x1215000
	0x031C6110 ADRP X21, 0xF59000
	0x031C6114 ADRP X20, 0xF59000
	0x031C6118 LDRB W8, [X22 + 0xFAA]
	0x031C611C LDR X21, [X21 + 0x6A0]
	0x031C6120 LDR X20, [X20 + 0xAC0]
	0x031C6124 MOV X19, X0
	0x031C6128 TBNZ X8, 0x0, 0x31C614C
	0x031C612C ADRP X0, 0xF59000
	0x031C6130 LDR X0, [X0 + 0x6A0]
	0x031C6134 BL 0x1C16CF4
	0x031C6138 ADRP X0, 0xF59000
	0x031C613C LDR X0, [X0 + 0xAC0]
	0x031C6140 BL 0x1C16CF4
	0x031C6144 MOVZ W8, 0x1
	0x031C6148 STRB W8, [X22 + 0xFAA]
	0x031C614C MOVZ W8, 0x1E
	0x031C6150 STR W8, [X19 + 0x94]
	0x031C6154 LDR X0, [X21]
	0x031C6158 BL 0x1C16F10
	0x031C615C LDR X2, [X20]
	0x031C6160 MOV X1, X19
	0x031C6164 MOV X20, X0
	0x031C6168 BL 0x31BFE64
	0x031C616C STR X20, [X19 + 0xA0]
	0x031C6170 MOV X0, X19
	0x031C6174 LDP X20, X19, [X31 + 0x20]
	0x031C6178 LDP X22, X21, [X31 + 0x10]
	0x031C617C LDR X30, [X31], #0x30
	0x031C6180 RET
	0x031C6184 STR X30, [X31 - 0x30]!
	0x031C6188 STP X22, X21, [X31 + 0x10]
	0x031C618C STP X20, X19, [X31 + 0x20]
	0x031C6190 ADRP X22, 0x1215000
	0x031C6194 ADRP X21, 0xF59000
	0x031C6198 ADRP X20, 0xF59000
	0x031C619C LDRB W8, [X22 + 0xFAB]
	0x031C61A0 LDR X21, [X21 + 0x6A0]
	0x031C61A4 LDR X20, [X20 + 0xAC8]
	0x031C61A8 MOV X19, X0
	0x031C61AC TBNZ X8, 0x0, 0x31C61D0
	0x031C61B0 ADRP X0, 0xF59000
	0x031C61B4 LDR X0, [X0 + 0x6A0]
	0x031C61B8 BL 0x1C16CF4
	0x031C61BC ADRP X0, 0xF59000
	0x031C61C0 LDR X0, [X0 + 0xAC8]
	0x031C61C4 BL 0x1C16CF4
	0x031C61C8 MOVZ W8, 0x1
	0x031C61CC STRB W8, [X22 + 0xFAB]
	0x031C61D0 MOVZ W8, 0x1F
	0x031C61D4 STR W8, [X19 + 0x94]
	0x031C61D8 LDR X0, [X21]
	0x031C61DC BL 0x1C16F10
	0x031C61E0 LDR X2, [X20]
	0x031C61E4 MOV X1, X19
	0x031C61E8 MOV X20, X0
	0x031C61EC BL 0x31BFE64
	0x031C61F0 STR X20, [X19 + 0xA0]
	0x031C61F4 MOV X0, X19
	0x031C61F8 LDP X20, X19, [X31 + 0x20]
	0x031C61FC LDP X22, X21, [X31 + 0x10]
	0x031C6200 LDR X30, [X31], #0x30
	0x031C6204 RET
	0x031C6208 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-16], X30
	002 Subtract W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X9, -40038400
	005 Add X9, X9, 940
	006 NotImplemented "Instruction ADR not yet implemented."
	007 Move W11, [X9]
	008 Add X10, X10, X11
	009 CallNoReturn X10
	010 Call LTDescr.setEaseLinear, X0
	011 Call LTDescr.setEaseOutQuad, X0
	012 Call LTDescr.setEaseInQuad, X0
	013 Call LTDescr.setEaseInOutQuad, X0
	014 Call LTDescr.setEaseInCubic, X0
	015 Call LTDescr.setEaseOutCubic, X0
	016 Call LTDescr.setEaseInOutCubic, X0
	017 Call LTDescr.setEaseInQuart, X0
	018 Call LTDescr.setEaseOutQuart, X0
	019 Call LTDescr.setEaseInOutQuart, X0
	020 Call LTDescr.setEaseInQuint, X0
	021 Call LTDescr.setEaseOutQuint, X0
	022 Call LTDescr.setEaseInOutQuint, X0
	023 Call LTDescr.setEaseInSine, X0
	024 Call LTDescr.setEaseOutSine, X0
	025 Call LTDescr.setEaseInOutSine, X0
	026 Call LTDescr.setEaseInExpo, X0
	027 Call LTDescr.setEaseOutExpo, X0
	028 Call LTDescr.setEaseInOutExpo, X0
	029 Call LTDescr.setEaseInCirc, X0
	030 Call LTDescr.setEaseOutCirc, X0
	031 Call LTDescr.setEaseInOutCirc, X0
	032 Call LTDescr.setEaseInBounce, X0
	033 Call LTDescr.setEaseOutBounce, X0
	034 Call LTDescr.setEaseInOutBounce, X0
	035 Call LTDescr.setEaseInBack, X0
	036 Call LTDescr.setEaseInOutBack, X0
	037 Call LTDescr.setEaseInElastic, X0
	038 Call LTDescr.setEaseOutElastic, X0
	039 Call LTDescr.setEaseInOutElastic, X0
	040 Call LTDescr.setEaseSpring, X0
	041 Call LTDescr.setEaseShake, X0
	042 Call LTDescr.setEasePunch, X0
	043 Call LTDescr.setEaseOutBack, X0
	044 Move X30, [X31+16]
	045 Return X0

Method: LTDescr setEaseLinear()

Disassembly:
	0x031C620C STP X20, X19, [X31 + 0x10]
	0x031C6210 ADRP X21, 0x1215000
	0x031C6214 ADRP X20, 0xF2F000
	0x031C6218 LDRB W8, [X21 + 0xFAC]
	0x031C621C LDR X20, [X20 + 0x5A8]
	0x031C6220 MOV X19, X0
	0x031C6224 TBNZ X8, 0x0, 0x31C6254
	0x031C6228 ADRP X0, 0xF59000
	0x031C622C LDR X0, [X0 + 0x6A0]
	0x031C6230 BL 0x1C16CF4
	0x031C6234 ADRP X0, 0xF59000
	0x031C6238 LDR X0, [X0 + 0xAD0]
	0x031C623C BL 0x1C16CF4
	0x031C6240 ADRP X0, 0xF2F000
	0x031C6244 LDR X0, [X0 + 0x5A8]
	0x031C6248 BL 0x1C16CF4
	0x031C624C MOVZ W8, 0x1
	0x031C6250 STRB W8, [X21 + 0xFAC]
	0x031C6254 LDR X0, [X20]
	0x031C6258 LDR X21, [X19 + 0xE8]
	0x031C625C LDR W8, [X0 + 0xE0]
	0x031C6260 CBNZ W8, 0x31C6268
	0x031C6264 BL 0x1C16DFC
	0x031C6268 CBZ X21, 0x31C62C8
	0x031C626C LDR X8, [X20]
	0x031C6270 ADRP X20, 0xF59000
	0x031C6274 LDR X8, [X8 + 0xB8]
	0x031C6278 LDR X8, [X8 + 0x70]
	0x031C627C STR X8, [X21 + 0x58]
	0x031C6280 LDR V0, [X19 + 0x60]
	0x031C6284 LDR V1, [X19 + 0x6C]
	0x031C6288 ADRP X8, 0xF59000
	0x031C628C LDR X8, [X8 + 0x6A0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3980]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+1704]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+1704]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3980], W8
	025 Move W8, 1
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseSpring()

Disassembly:
	0x031C7390 FMOV S1, 1
	0x031C7394 LDR X8, [X8 + 0xB8]
	0x031C7398 FSUB S9, S1, S0
	0x031C739C STR S9, [X8]
	0x031C73A0 LDR X0, [X21]
	0x031C73A4 LDR V8, [X19 + 0x78]
	0x031C73A8 LDR W8, [X0 + 0xE0]
	0x031C73AC CBNZ W8, 0x31C73B4
	0x031C73B0 BL 0x1C16DFC
	0x031C73B4 FMOV S0, W31
	0x031C73B8 MOV V1.16B, V8.16B
	0x031C73BC MOV V2.16B, V9.16B
	0x031C73C0 MOV X0, X31
	0x031C73C4 BL 0x31B4204
	0x031C73C8 LDR X8, [X20]
	0x031C73CC LDR V9, [X19 + 0x7C]
	0x031C73D0 LDR V13, [X19 + 0x60]
	0x031C73D4 MOV V10.16B, V0.16B
	0x031C73D8 LDR X8, [X8 + 0xB8]
	0x031C73DC FMOV S0, W31
	0x031C73E0 MOV V1.16B, V9.16B
	0x031C73E4 MOV X0, X31
	0x031C73E8 LDR V2, [X8]
	0x031C73EC BL 0x31B4204
	0x031C73F0 LDR X8, [X20]
	0x031C73F4 LDR V11, [X19 + 0x80]
	0x031C73F8 LDR V14, [X19 + 0x64]
	0x031C73FC MOV V12.16B, V0.16B
	0x031C7400 LDR X8, [X8 + 0xB8]
	0x031C7404 FMOV S0, W31
	0x031C7408 MOV V1.16B, V11.16B
	0x031C740C MOV X0, X31
	0x031C7410 LDR V2, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1215000
	007 Move X21, 0xF59000
	008 Move X20, 0xF59000
	009 Move W8, [X22+3981]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2776]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF59000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF59000
	021 Move X0, [X0+2776]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3981], W8
	025 Move W8, 32
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInQuad()

Disassembly:
	0x031C6314 STRB W8, [X21 + 0xFAD]
	0x031C6318 LDR X0, [X20]
	0x031C631C LDR X21, [X19 + 0xE8]
	0x031C6320 LDR W8, [X0 + 0xE0]
	0x031C6324 CBNZ W8, 0x31C632C
	0x031C6328 BL 0x1C16DFC
	0x031C632C CBZ X21, 0x31C638C
	0x031C6330 LDR X8, [X20]
	0x031C6334 ADRP X20, 0xF59000
	0x031C6338 LDR X8, [X8 + 0xB8]
	0x031C633C LDR X8, [X8 + 0x78]
	0x031C6340 STR X8, [X21 + 0x58]
	0x031C6344 LDR V0, [X19 + 0x60]
	0x031C6348 LDR V1, [X19 + 0x6C]
	0x031C634C ADRP X8, 0xF59000
	0x031C6350 LDR X8, [X8 + 0x6A0]
	0x031C6354 FADD S0, S0, S1
	0x031C6358 STR S0, [X19 + 0x6C]
	0x031C635C LDR X0, [X8]
	0x031C6360 LDR X20, [X20 + 0xAD0]
	0x031C6364 BL 0x1C16F10
	0x031C6368 LDR X2, [X20]
	0x031C636C MOV X1, X19
	0x031C6370 MOV X20, X0
	0x031C6374 BL 0x31BFE64
	0x031C6378 STR X20, [X19 + 0xA0]
	0x031C637C MOV X0, X19
	0x031C6380 LDP X20, X19, [X31 + 0x10]
	0x031C6384 LDP X30, X21, [X31], #0x20
	0x031C6388 RET
	0x031C638C BL 0x1C16F20
	0x031C6390 STR X30, [X31 - 0x30]!
	0x031C6394 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3982]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2536]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2536]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3982], W8
	025 Move W8, 3
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutQuad()

Disassembly:
	0x031C6290 FADD S0, S0, S1
	0x031C6294 STR S0, [X19 + 0x6C]
	0x031C6298 LDR X0, [X8]
	0x031C629C LDR X20, [X20 + 0xAD0]
	0x031C62A0 BL 0x1C16F10
	0x031C62A4 LDR X2, [X20]
	0x031C62A8 MOV X1, X19
	0x031C62AC MOV X20, X0
	0x031C62B0 BL 0x31BFE64
	0x031C62B4 STR X20, [X19 + 0xA0]
	0x031C62B8 MOV X0, X19
	0x031C62BC LDP X20, X19, [X31 + 0x10]
	0x031C62C0 LDP X30, X21, [X31], #0x20
	0x031C62C4 RET
	0x031C62C8 BL 0x1C16F20
	0x031C62CC STP X30, X21, [X31 - 0x20]!
	0x031C62D0 STP X20, X19, [X31 + 0x10]
	0x031C62D4 ADRP X21, 0x1215000
	0x031C62D8 ADRP X20, 0xF2F000
	0x031C62DC LDRB W8, [X21 + 0xFAD]
	0x031C62E0 LDR X20, [X20 + 0x5A8]
	0x031C62E4 MOV X19, X0
	0x031C62E8 TBNZ X8, 0x0, 0x31C6318
	0x031C62EC ADRP X0, 0xF59000
	0x031C62F0 LDR X0, [X0 + 0x6A0]
	0x031C62F4 BL 0x1C16CF4
	0x031C62F8 ADRP X0, 0xF59000
	0x031C62FC LDR X0, [X0 + 0xAD0]
	0x031C6300 BL 0x1C16CF4
	0x031C6304 ADRP X0, 0xF2F000
	0x031C6308 LDR X0, [X0 + 0x5A8]
	0x031C630C BL 0x1C16CF4
	0x031C6310 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3983]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2528]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2528]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3983], W8
	025 Move W8, 2
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutQuad()

Disassembly:
	0x031C6398 STP X20, X19, [X31 + 0x20]
	0x031C639C ADRP X22, 0x1215000
	0x031C63A0 ADRP X21, 0xF59000
	0x031C63A4 ADRP X20, 0xF59000
	0x031C63A8 LDRB W8, [X22 + 0xF8D]
	0x031C63AC LDR X21, [X21 + 0x6A0]
	0x031C63B0 LDR X20, [X20 + 0xAD8]
	0x031C63B4 MOV X19, X0
	0x031C63B8 TBNZ X8, 0x0, 0x31C63DC
	0x031C63BC ADRP X0, 0xF59000
	0x031C63C0 LDR X0, [X0 + 0x6A0]
	0x031C63C4 BL 0x1C16CF4
	0x031C63C8 ADRP X0, 0xF59000
	0x031C63CC LDR X0, [X0 + 0xAD8]
	0x031C63D0 BL 0x1C16CF4
	0x031C63D4 MOVZ W8, 0x1
	0x031C63D8 STRB W8, [X22 + 0xF8D]
	0x031C63DC MOVZ W8, 0x20
	0x031C63E0 STR W8, [X19 + 0x94]
	0x031C63E4 LDR X0, [X21]
	0x031C63E8 BL 0x1C16F10
	0x031C63EC LDR X2, [X20]
	0x031C63F0 MOV X1, X19
	0x031C63F4 MOV X20, X0
	0x031C63F8 BL 0x31BFE64
	0x031C63FC STR X20, [X19 + 0xA0]
	0x031C6400 MOV X0, X19
	0x031C6404 LDP X20, X19, [X31 + 0x20]
	0x031C6408 LDP X22, X21, [X31 + 0x10]
	0x031C640C LDR X30, [X31], #0x30
	0x031C6410 RET
	0x031C6414 STP D15, D14, [X31 - 0x50]!
	0x031C6418 STP D13, D12, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3984]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2544]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2544]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3984], W8
	025 Move W8, 4
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInCubic()

Disassembly:
	0x031C641C STP D11, D10, [X31 + 0x20]
	0x031C6420 STP D9, D8, [X31 + 0x30]
	0x031C6424 STP X30, X19, [X31 + 0x40]
	0x031C6428 LDR X8, [X0 + 0xE8]
	0x031C642C CBZ X8, 0x31C64D0
	0x031C6430 MOV X19, X0
	0x031C6434 LDR X0, [X8 + 0x58]
	0x031C6438 CBZ X0, 0x31C64D0
	0x031C643C LDR V0, [X19 + 0x1C]
	0x031C6440 LDR V10, [X19 + 0x60]
	0x031C6444 LDR V11, [X19 + 0x78]
	0x031C6448 MOV X1, X31
	0x031C644C BL 0x3C00CC4
	0x031C6450 LDR X8, [X19 + 0xE8]
	0x031C6454 CBZ X8, 0x31C64D0
	0x031C6458 LDR X0, [X8 + 0x58]
	0x031C645C CBZ X0, 0x31C64D0
	0x031C6460 MOV V8.16B, V0.16B
	0x031C6464 LDR V0, [X19 + 0x1C]
	0x031C6468 LDR V12, [X19 + 0x64]
	0x031C646C LDR V13, [X19 + 0x7C]
	0x031C6470 MOV X1, X31
	0x031C6474 BL 0x3C00CC4
	0x031C6478 LDR X8, [X19 + 0xE8]
	0x031C647C CBZ X8, 0x31C64D0
	0x031C6480 LDR X0, [X8 + 0x58]
	0x031C6484 CBZ X0, 0x31C64D0
	0x031C6488 MOV V9.16B, V0.16B
	0x031C648C LDR V0, [X19 + 0x1C]
	0x031C6490 LDR V14, [X19 + 0x68]
	0x031C6494 LDR V15, [X19 + 0x80]
	0x031C6498 MOV X1, X31
	0x031C649C BL 0x3C00CC4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3985]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2552]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2552]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3985], W8
	025 Move W8, 5
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutCubic()

Disassembly:
	0x031C64A0 FMUL S1, S11, S8
	0x031C64A4 FMUL S2, S13, S9
	0x031C64A8 FMUL S3, S15, S0
	0x031C64AC FADD S0, S10, S1
	0x031C64B0 FADD S1, S12, S2
	0x031C64B4 LDP X30, X19, [X31 + 0x40]
	0x031C64B8 LDP D9, D8, [X31 + 0x30]
	0x031C64BC LDP D11, D10, [X31 + 0x20]
	0x031C64C0 LDP D13, D12, [X31 + 0x10]
	0x031C64C4 FADD S2, S14, S3
	0x031C64C8 LDP D15, D14, [X31], #0x50
	0x031C64CC RET
	0x031C64D0 BL 0x1C16F20
	0x031C64D4 STP X30, X21, [X31 - 0x20]!
	0x031C64D8 STP X20, X19, [X31 + 0x10]
	0x031C64DC ADRP X21, 0x1215000
	0x031C64E0 ADRP X20, 0xF59000
	0x031C64E4 LDRB W8, [X21 + 0xFAE]
	0x031C64E8 LDR X20, [X20 + 0x368]
	0x031C64EC MOV X19, X0
	0x031C64F0 TBNZ X8, 0x0, 0x31C6508
	0x031C64F4 ADRP X0, 0xF59000
	0x031C64F8 LDR X0, [X0 + 0x368]
	0x031C64FC BL 0x1C16CF4
	0x031C6500 MOVZ W8, 0x1
	0x031C6504 STRB W8, [X21 + 0xFAE]
	0x031C6508 LDR X8, [X20]
	0x031C650C LDR V0, [X19 + 0x1C]
	0x031C6510 FMOV S1, 1
	0x031C6514 LDR X8, [X8 + 0xB8]
	0x031C6518 FADD S0, S0, S0
	0x031C651C FCMP S0, S1
	0x031C6520 STR S0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3986]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2560]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2560]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3986], W8
	025 Move W8, 6
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutCubic()

Disassembly:
	0x031C6524 B.PL 0x31C6530
	0x031C6528 FMUL S0, S0, S0
	0x031C652C B 0x31C6544
	0x031C6530 FMOV S3, -3
	0x031C6534 FSUB S2, S1, S0
	0x031C6538 FADD S0, S0, S3
	0x031C653C FMUL S0, S2, S0
	0x031C6540 FADD S0, S0, S1
	0x031C6544 STR S0, [X8]
	0x031C6548 LDUR V1, [X19 + 0x84]
	0x031C654C LDR V2, [X19 + 0x8C]
	0x031C6550 LDR V3, [X19 + 0x60]
	0x031C6554 LDR V4, [X19 + 0x68]
	0x031C6558 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6560 FMUL S2, S0, S2
	0x031C6564 FADD V0.2S, V1.2S, V3.2S
	0x031C6568 FADD S2, S4, S2
	0x031C656C MOV S1, V0.S[1]
	0x031C6570 LDP X30, X21, [X31], #0x20
	0x031C6574 RET
	0x031C6578 STP X30, X21, [X31 - 0x20]!
	0x031C657C STP X20, X19, [X31 + 0x10]
	0x031C6580 ADRP X21, 0x1215000
	0x031C6584 ADRP X20, 0xF59000
	0x031C6588 LDRB W8, [X21 + 0xFAF]
	0x031C658C LDR X20, [X20 + 0x368]
	0x031C6590 MOV X19, X0
	0x031C6594 TBNZ X8, 0x0, 0x31C65AC
	0x031C6598 ADRP X0, 0xF59000
	0x031C659C LDR X0, [X0 + 0x368]
	0x031C65A0 BL 0x1C16CF4
	0x031C65A4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3987]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2568]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2568]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3987], W8
	025 Move W8, 7
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInQuart()

Disassembly:
	0x031C65A8 STRB W8, [X21 + 0xFAF]
	0x031C65AC LDR X8, [X20]
	0x031C65B0 LDR V0, [X19 + 0x1C]
	0x031C65B4 LDR X8, [X8 + 0xB8]
	0x031C65B8 FMUL S0, S0, S0
	0x031C65BC STR S0, [X8]
	0x031C65C0 LDR V1, [X19 + 0x78]
	0x031C65C4 LDR V2, [X19 + 0x80]
	0x031C65C8 LDR V3, [X19 + 0x60]
	0x031C65CC LDR V4, [X19 + 0x68]
	0x031C65D0 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C65D8 FMUL S2, S0, S2
	0x031C65DC FADD V0.2S, V1.2S, V3.2S
	0x031C65E0 FADD S2, S4, S2
	0x031C65E4 MOV S1, V0.S[1]
	0x031C65E8 LDP X30, X21, [X31], #0x20
	0x031C65EC RET
	0x031C65F0 STP X30, X21, [X31 - 0x20]!
	0x031C65F4 STP X20, X19, [X31 + 0x10]
	0x031C65F8 ADRP X21, 0x1215000
	0x031C65FC ADRP X20, 0xF59000
	0x031C6600 LDRB W8, [X21 + 0xFB0]
	0x031C6604 LDR X20, [X20 + 0x368]
	0x031C6608 MOV X19, X0
	0x031C660C TBNZ X8, 0x0, 0x31C6624
	0x031C6610 ADRP X0, 0xF59000
	0x031C6614 LDR X0, [X0 + 0x368]
	0x031C6618 BL 0x1C16CF4
	0x031C661C MOVZ W8, 0x1
	0x031C6620 STRB W8, [X21 + 0xFB0]
	0x031C6624 LDR X8, [X20]
	0x031C6628 LDR V0, [X19 + 0x1C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3988]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2576]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2576]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3988], W8
	025 Move W8, 8
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutQuart()

Disassembly:
	0x031C662C FMOV S1, -2
	0x031C6630 LDR X8, [X8 + 0xB8]
	0x031C6634 FNEG S2, S0
	0x031C6638 FADD S0, S0, S1
	0x031C663C FMUL S0, S0, S2
	0x031C6640 STR S0, [X8]
	0x031C6644 LDR V1, [X19 + 0x78]
	0x031C6648 LDR V2, [X19 + 0x80]
	0x031C664C LDR V3, [X19 + 0x60]
	0x031C6650 LDR V4, [X19 + 0x68]
	0x031C6654 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C665C FMUL S2, S0, S2
	0x031C6660 FADD V0.2S, V1.2S, V3.2S
	0x031C6664 FADD S2, S2, S4
	0x031C6668 MOV S1, V0.S[1]
	0x031C666C LDP X30, X21, [X31], #0x20
	0x031C6670 RET
	0x031C6674 STP X30, X21, [X31 - 0x20]!
	0x031C6678 STP X20, X19, [X31 + 0x10]
	0x031C667C ADRP X21, 0x1215000
	0x031C6680 ADRP X20, 0xF59000
	0x031C6684 LDRB W8, [X21 + 0xFB1]
	0x031C6688 LDR X20, [X20 + 0x368]
	0x031C668C MOV X19, X0
	0x031C6690 TBNZ X8, 0x0, 0x31C66A8
	0x031C6694 ADRP X0, 0xF59000
	0x031C6698 LDR X0, [X0 + 0x368]
	0x031C669C BL 0x1C16CF4
	0x031C66A0 MOVZ W8, 0x1
	0x031C66A4 STRB W8, [X21 + 0xFB1]
	0x031C66A8 LDR X8, [X20]
	0x031C66AC LDR V0, [X19 + 0x1C]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3989]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2584]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2584]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3989], W8
	025 Move W8, 9
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutQuart()

Disassembly:
	0x031C66B0 LDR X8, [X8 + 0xB8]
	0x031C66B4 STR S0, [X8]
	0x031C66B8 LDR V1, [X19 + 0x78]
	0x031C66BC LDR V2, [X19 + 0x80]
	0x031C66C0 LDR V3, [X19 + 0x60]
	0x031C66C4 LDR V4, [X19 + 0x68]
	0x031C66C8 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C66D0 FMUL S2, S0, S2
	0x031C66D4 FADD V0.2S, V3.2S, V1.2S
	0x031C66D8 FADD S2, S4, S2
	0x031C66DC MOV S1, V0.S[1]
	0x031C66E0 LDP X30, X21, [X31], #0x20
	0x031C66E4 RET
	0x031C66E8 STP D11, D10, [X31 - 0x40]!
	0x031C66EC STP D9, D8, [X31 + 0x10]
	0x031C66F0 STP X30, X21, [X31 + 0x20]
	0x031C66F4 STP X20, X19, [X31 + 0x30]
	0x031C66F8 ADRP X21, 0x1215000
	0x031C66FC ADRP X20, 0xF59000
	0x031C6700 LDRB W8, [X21 + 0xFB2]
	0x031C6704 LDR X20, [X20 + 0x368]
	0x031C6708 MOV X19, X0
	0x031C670C TBNZ X8, 0x0, 0x31C6724
	0x031C6710 ADRP X0, 0xF59000
	0x031C6714 LDR X0, [X0 + 0x368]
	0x031C6718 BL 0x1C16CF4
	0x031C671C MOVZ W8, 0x1
	0x031C6720 STRB W8, [X21 + 0xFB2]
	0x031C6724 LDR V0, [X19 + 0x1C]
	0x031C6728 FMOV S10, 1
	0x031C672C ADRP X9, 0xFFFFFFFFFD923000
	0x031C6730 FMOV S1, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3990]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2592]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2592]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3990], W8
	025 Move W8, 10
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInQuint()

Disassembly:
	0x031C6734 LDR X8, [X20]
	0x031C6738 LDR V3, [X9 + 0xF4C]
	0x031C673C ADRP X9, 0xFFFFFFFFFD924000
	0x031C6740 FCMP S0, 0x0
	0x031C6744 FMIN S0, S0, S10
	0x031C6748 FMOV S2, 2.5
	0x031C674C FCSEL S11, S0, S1, PL
	0x031C6750 LDR V0, [X9 + 0x35C]
	0x031C6754 FMUL S2, S11, S2
	0x031C6758 FMUL S2, S11, S2
	0x031C675C LDR X20, [X8 + 0xB8]
	0x031C6760 FMUL S2, S11, S2
	0x031C6764 FMUL S1, S11, S3
	0x031C6768 FADD S0, S2, S0
	0x031C676C FMUL S0, S1, S0
	0x031C6770 BL 0x3EB1B70
	0x031C6774 ADRP X8, 0xFFFFFFFFFD924000
	0x031C6778 LDR V1, [X8 + 0x36C]
	0x031C677C FSUB S9, S10, S11
	0x031C6780 MOV V8.16B, V0.16B
	0x031C6784 MOV V0.16B, V9.16B
	0x031C6788 BL 0x3EB1B50
	0x031C678C ADRP X8, 0xFFFFFFFFFD924000
	0x031C6790 LDR V1, [X8 + 0x114]
	0x031C6794 FMUL S0, S0, S8
	0x031C6798 FADD S0, S11, S0
	0x031C679C LDP X30, X21, [X31 + 0x20]
	0x031C67A0 FMUL S1, S9, S1
	0x031C67A4 FADD S1, S1, S10
	0x031C67A8 FMUL S0, S1, S0
	0x031C67AC STR S0, [X20]
	0x031C67B0 LDR V1, [X19 + 0x78]
	0x031C67B4 LDR V2, [X19 + 0x80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3991]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2600]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2600]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3991], W8
	025 Move W8, 11
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutQuint()

Disassembly:
	0x031C67B8 LDR V3, [X19 + 0x60]
	0x031C67BC LDR V4, [X19 + 0x68]
	0x031C67C0 LDP X20, X19, [X31 + 0x30]
	0x031C67C4 LDP D9, D8, [X31 + 0x10]
	0x00000000 INVALID
	0x031C67CC FMUL S2, S2, S0
	0x031C67D0 FADD V0.2S, V3.2S, V1.2S
	0x031C67D4 FADD S2, S4, S2
	0x031C67D8 MOV S1, V0.S[1]
	0x031C67DC LDP D11, D10, [X31], #0x40
	0x031C67E0 RET
	0x031C67E4 STP X30, X21, [X31 - 0x20]!
	0x031C67E8 STP X20, X19, [X31 + 0x10]
	0x031C67EC ADRP X21, 0x1215000
	0x031C67F0 ADRP X20, 0xF59000
	0x031C67F4 LDRB W8, [X21 + 0xFB3]
	0x031C67F8 LDR X20, [X20 + 0x368]
	0x031C67FC MOV X19, X0
	0x031C6800 TBNZ X8, 0x0, 0x31C6818
	0x031C6804 ADRP X0, 0xF59000
	0x031C6808 LDR X0, [X0 + 0x368]
	0x031C680C BL 0x1C16CF4
	0x031C6810 MOVZ W8, 0x1
	0x031C6814 STRB W8, [X21 + 0xFB3]
	0x031C6818 LDR X8, [X20]
	0x031C681C LDR V0, [X19 + 0x1C]
	0x031C6820 LDR X8, [X8 + 0xB8]
	0x031C6824 FMUL S1, S0, S0
	0x031C6828 FMUL S0, S0, S1
	0x031C682C STR S0, [X8]
	0x031C6830 LDR V1, [X19 + 0x78]
	0x031C6834 LDR V2, [X19 + 0x80]
	0x031C6838 LDR V3, [X19 + 0x60]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3992]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2608]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2608]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3992], W8
	025 Move W8, 12
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutQuint()

Disassembly:
	0x031C683C LDR V4, [X19 + 0x68]
	0x031C6840 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6848 FMUL S2, S0, S2
	0x031C684C FADD V0.2S, V1.2S, V3.2S
	0x031C6850 FADD S2, S4, S2
	0x031C6854 MOV S1, V0.S[1]
	0x031C6858 LDP X30, X21, [X31], #0x20
	0x031C685C RET
	0x031C6860 STP X30, X21, [X31 - 0x20]!
	0x031C6864 STP X20, X19, [X31 + 0x10]
	0x031C6868 ADRP X21, 0x1215000
	0x031C686C ADRP X20, 0xF59000
	0x031C6870 LDRB W8, [X21 + 0xFB4]
	0x031C6874 LDR X20, [X20 + 0x368]
	0x031C6878 MOV X19, X0
	0x031C687C TBNZ X8, 0x0, 0x31C6894
	0x031C6880 ADRP X0, 0xF59000
	0x031C6884 LDR X0, [X0 + 0x368]
	0x031C6888 BL 0x1C16CF4
	0x031C688C MOVZ W8, 0x1
	0x031C6890 STRB W8, [X21 + 0xFB4]
	0x031C6894 LDR V0, [X19 + 0x1C]
	0x031C6898 LDR X8, [X20]
	0x031C689C FMOV S1, -1
	0x031C68A0 FMOV S2, 1
	0x031C68A4 FADD S0, S0, S1
	0x031C68A8 LDR X8, [X8 + 0xB8]
	0x031C68AC FMUL S1, S0, S0
	0x031C68B0 FMUL S0, S0, S1
	0x031C68B4 FADD S0, S0, S2
	0x031C68B8 STR S0, [X8]
	0x031C68BC LDR V1, [X19 + 0x78]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3993]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2616]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2616]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3993], W8
	025 Move W8, 13
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInSine()

Disassembly:
	0x031C68C0 LDR V2, [X19 + 0x80]
	0x031C68C4 LDR V3, [X19 + 0x60]
	0x031C68C8 LDR V4, [X19 + 0x68]
	0x031C68CC LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C68D4 FMUL S2, S0, S2
	0x031C68D8 FADD V0.2S, V1.2S, V3.2S
	0x031C68DC FADD S2, S4, S2
	0x031C68E0 MOV S1, V0.S[1]
	0x031C68E4 LDP X30, X21, [X31], #0x20
	0x031C68E8 RET
	0x031C68EC STP X30, X21, [X31 - 0x20]!
	0x031C68F0 STP X20, X19, [X31 + 0x10]
	0x031C68F4 ADRP X21, 0x1215000
	0x031C68F8 ADRP X20, 0xF59000
	0x031C68FC LDRB W8, [X21 + 0xFB5]
	0x031C6900 LDR X20, [X20 + 0x368]
	0x031C6904 MOV X19, X0
	0x031C6908 TBNZ X8, 0x0, 0x31C6920
	0x031C690C ADRP X0, 0xF59000
	0x031C6910 LDR X0, [X0 + 0x368]
	0x031C6914 BL 0x1C16CF4
	0x031C6918 MOVZ W8, 0x1
	0x031C691C STRB W8, [X21 + 0xFB5]
	0x031C6920 LDR X8, [X20]
	0x031C6924 LDR V0, [X19 + 0x1C]
	0x031C6928 FMOV S1, 1
	0x031C692C LDR X8, [X8 + 0xB8]
	0x031C6930 FADD S0, S0, S0
	0x031C6934 FCMP S0, S1
	0x031C6938 STR S0, [X8]
	0x031C693C B.PL 0x31C694C
	0x031C6940 FMUL S1, S0, S0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3994]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2624]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2624]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3994], W8
	025 Move W8, 14
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutSine()

Disassembly:
	0x031C6944 FMUL S0, S0, S1
	0x031C6948 B 0x31C6964
	0x031C694C FMOV S1, -2
	0x031C6950 FADD S0, S0, S1
	0x031C6954 FMUL S1, S0, S0
	0x031C6958 FMUL S0, S0, S1
	0x031C695C FMOV S1, 2
	0x031C6960 FADD S0, S0, S1
	0x031C6964 STR S0, [X8]
	0x031C6968 LDUR V1, [X19 + 0x84]
	0x031C696C LDR V2, [X19 + 0x8C]
	0x031C6970 LDR V3, [X19 + 0x60]
	0x031C6974 LDR V4, [X19 + 0x68]
	0x031C6978 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6980 FMUL S2, S0, S2
	0x031C6984 FADD V0.2S, V1.2S, V3.2S
	0x031C6988 FADD S2, S4, S2
	0x031C698C MOV S1, V0.S[1]
	0x031C6990 LDP X30, X21, [X31], #0x20
	0x031C6994 RET
	0x031C6998 STP X30, X21, [X31 - 0x20]!
	0x031C699C STP X20, X19, [X31 + 0x10]
	0x031C69A0 ADRP X21, 0x1215000
	0x031C69A4 ADRP X20, 0xF59000
	0x031C69A8 LDRB W8, [X21 + 0xFB6]
	0x031C69AC LDR X20, [X20 + 0x368]
	0x031C69B0 MOV X19, X0
	0x031C69B4 TBNZ X8, 0x0, 0x31C69CC
	0x031C69B8 ADRP X0, 0xF59000
	0x031C69BC LDR X0, [X0 + 0x368]
	0x031C69C0 BL 0x1C16CF4
	0x031C69C4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3995]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2632]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2632]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3995], W8
	025 Move W8, 15
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutSine()

Disassembly:
	0x031C69C8 STRB W8, [X21 + 0xFB6]
	0x031C69CC LDR X8, [X20]
	0x031C69D0 LDR V0, [X19 + 0x1C]
	0x031C69D4 LDR X8, [X8 + 0xB8]
	0x031C69D8 FMUL S1, S0, S0
	0x031C69DC FMUL S1, S0, S1
	0x031C69E0 FMUL S0, S0, S1
	0x031C69E4 STR S0, [X8]
	0x031C69E8 LDR V1, [X19 + 0x78]
	0x031C69EC LDR V2, [X19 + 0x80]
	0x031C69F0 LDR V3, [X19 + 0x60]
	0x031C69F4 LDR V4, [X19 + 0x68]
	0x031C69F8 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6A00 FMUL S2, S0, S2
	0x031C6A04 FADD V0.2S, V1.2S, V3.2S
	0x031C6A08 FADD S2, S2, S4
	0x031C6A0C MOV S1, V0.S[1]
	0x031C6A10 LDP X30, X21, [X31], #0x20
	0x031C6A14 RET
	0x031C6A18 STP X30, X21, [X31 - 0x20]!
	0x031C6A1C STP X20, X19, [X31 + 0x10]
	0x031C6A20 ADRP X21, 0x1215000
	0x031C6A24 ADRP X20, 0xF59000
	0x031C6A28 LDRB W8, [X21 + 0xFB7]
	0x031C6A2C LDR X20, [X20 + 0x368]
	0x031C6A30 MOV X19, X0
	0x031C6A34 TBNZ X8, 0x0, 0x31C6A4C
	0x031C6A38 ADRP X0, 0xF59000
	0x031C6A3C LDR X0, [X0 + 0x368]
	0x031C6A40 BL 0x1C16CF4
	0x031C6A44 MOVZ W8, 0x1
	0x031C6A48 STRB W8, [X21 + 0xFB7]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3996]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2640]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2640]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3996], W8
	025 Move W8, 16
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInExpo()

Disassembly:
	0x031C6A4C LDR V0, [X19 + 0x1C]
	0x031C6A50 LDR X8, [X20]
	0x031C6A54 FMOV S1, -1
	0x031C6A58 FADD S0, S0, S1
	0x031C6A5C FMUL S2, S0, S0
	0x031C6A60 LDR X8, [X8 + 0xB8]
	0x031C6A64 FMUL S2, S0, S2
	0x031C6A68 FMUL S0, S0, S2
	0x031C6A6C FADD S0, S0, S1
	0x031C6A70 FNEG S1, S0
	0x031C6A74 STR S1, [X8]
	0x031C6A78 LDR V1, [X19 + 0x78]
	0x031C6A7C LDR V2, [X19 + 0x80]
	0x031C6A80 LDR V3, [X19 + 0x60]
	0x031C6A84 LDR V4, [X19 + 0x68]
	0x031C6A88 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6A90 FMUL S2, S0, S2
	0x031C6A94 FSUB V0.2S, V3.2S, V1.2S
	0x031C6A98 FSUB S2, S4, S2
	0x031C6A9C MOV S1, V0.S[1]
	0x031C6AA0 LDP X30, X21, [X31], #0x20
	0x031C6AA4 RET
	0x031C6AA8 STP X30, X21, [X31 - 0x20]!
	0x031C6AAC STP X20, X19, [X31 + 0x10]
	0x031C6AB0 ADRP X21, 0x1215000
	0x031C6AB4 ADRP X20, 0xF59000
	0x031C6AB8 LDRB W8, [X21 + 0xFB8]
	0x031C6ABC LDR X20, [X20 + 0x368]
	0x031C6AC0 MOV X19, X0
	0x031C6AC4 TBNZ X8, 0x0, 0x31C6ADC
	0x031C6AC8 ADRP X0, 0xF59000
	0x031C6ACC LDR X0, [X0 + 0x368]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3997]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2648]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2648]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3997], W8
	025 Move W8, 17
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutExpo()

Disassembly:
	0x031C6AD0 BL 0x1C16CF4
	0x031C6AD4 MOVZ W8, 0x1
	0x031C6AD8 STRB W8, [X21 + 0xFB8]
	0x031C6ADC LDR X8, [X20]
	0x031C6AE0 LDR V0, [X19 + 0x1C]
	0x031C6AE4 FMOV S1, 1
	0x031C6AE8 LDR X8, [X8 + 0xB8]
	0x031C6AEC FADD S0, S0, S0
	0x031C6AF0 FCMP S0, S1
	0x031C6AF4 STR S0, [X8]
	0x031C6AF8 B.PL 0x31C6B30
	0x031C6AFC FMUL S1, S0, S0
	0x031C6B00 FMUL S1, S0, S1
	0x031C6B04 FMUL S0, S0, S1
	0x031C6B08 STR S0, [X8]
	0x031C6B0C LDUR V1, [X19 + 0x84]
	0x031C6B10 LDR V2, [X19 + 0x8C]
	0x031C6B14 LDR V3, [X19 + 0x60]
	0x031C6B18 LDR V4, [X19 + 0x68]
	0x00000000 INVALID
	0x031C6B20 FMUL S2, S0, S2
	0x031C6B24 FADD V0.2S, V1.2S, V3.2S
	0x031C6B28 FADD S2, S4, S2
	0x031C6B2C B 0x31C6B6C
	0x031C6B30 FMOV S1, -2
	0x031C6B34 FADD S0, S0, S1
	0x031C6B38 STR S0, [X8]
	0x031C6B3C FMUL S2, S0, S0
	0x031C6B40 LDUR V3, [X19 + 0x84]
	0x031C6B44 LDR V4, [X19 + 0x8C]
	0x031C6B48 FMUL S2, S0, S2
	0x031C6B4C LDR V5, [X19 + 0x60]
	0x031C6B50 LDR V6, [X19 + 0x68]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3998]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2656]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2656]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3998], W8
	025 Move W8, 18
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutExpo()

Disassembly:
	0x031C6B54 FMUL S0, S0, S2
	0x031C6B58 FADD S0, S0, S1
	0x00000000 INVALID
	0x031C6B60 FMUL S2, S0, S4
	0x031C6B64 FSUB V0.2S, V5.2S, V1.2S
	0x031C6B68 FSUB S2, S6, S2
	0x031C6B6C LDP X20, X19, [X31 + 0x10]
	0x031C6B70 MOV S1, V0.S[1]
	0x031C6B74 LDP X30, X21, [X31], #0x20
	0x031C6B78 RET
	0x031C6B7C STP X30, X21, [X31 - 0x20]!
	0x031C6B80 STP X20, X19, [X31 + 0x10]
	0x031C6B84 ADRP X21, 0x1215000
	0x031C6B88 ADRP X20, 0xF59000
	0x031C6B8C LDRB W8, [X21 + 0xFB9]
	0x031C6B90 LDR X20, [X20 + 0x368]
	0x031C6B94 MOV X19, X0
	0x031C6B98 TBNZ X8, 0x0, 0x31C6BB0
	0x031C6B9C ADRP X0, 0xF59000
	0x031C6BA0 LDR X0, [X0 + 0x368]
	0x031C6BA4 BL 0x1C16CF4
	0x031C6BA8 MOVZ W8, 0x1
	0x031C6BAC STRB W8, [X21 + 0xFB9]
	0x031C6BB0 LDR X8, [X20]
	0x031C6BB4 LDR V0, [X19 + 0x1C]
	0x031C6BB8 LDR X8, [X8 + 0xB8]
	0x031C6BBC FMUL S1, S0, S0
	0x031C6BC0 FMUL S1, S0, S1
	0x031C6BC4 FMUL S1, S0, S1
	0x031C6BC8 FMUL S0, S0, S1
	0x031C6BCC STR S0, [X8]
	0x031C6BD0 LDR V1, [X19 + 0x78]
	0x031C6BD4 LDR V2, [X19 + 0x80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+3999]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2664]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2664]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+3999], W8
	025 Move W8, 19
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInCirc()

Disassembly:
	0x031C6BD8 LDR V3, [X19 + 0x60]
	0x031C6BDC LDR V4, [X19 + 0x68]
	0x031C6BE0 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6BE8 FMUL S2, S0, S2
	0x031C6BEC FADD V0.2S, V1.2S, V3.2S
	0x031C6BF0 FADD S2, S4, S2
	0x031C6BF4 MOV S1, V0.S[1]
	0x031C6BF8 LDP X30, X21, [X31], #0x20
	0x031C6BFC RET
	0x031C6C00 STP X30, X21, [X31 - 0x20]!
	0x031C6C04 STP X20, X19, [X31 + 0x10]
	0x031C6C08 ADRP X21, 0x1215000
	0x031C6C0C ADRP X20, 0xF59000
	0x031C6C10 LDRB W8, [X21 + 0xFBA]
	0x031C6C14 LDR X20, [X20 + 0x368]
	0x031C6C18 MOV X19, X0
	0x031C6C1C TBNZ X8, 0x0, 0x31C6C34
	0x031C6C20 ADRP X0, 0xF59000
	0x031C6C24 LDR X0, [X0 + 0x368]
	0x031C6C28 BL 0x1C16CF4
	0x031C6C2C MOVZ W8, 0x1
	0x031C6C30 STRB W8, [X21 + 0xFBA]
	0x031C6C34 LDR V0, [X19 + 0x1C]
	0x031C6C38 LDR X8, [X20]
	0x031C6C3C FMOV S1, -1
	0x031C6C40 FMOV S2, 1
	0x031C6C44 FADD S0, S0, S1
	0x031C6C48 FMUL S1, S0, S0
	0x031C6C4C LDR X8, [X8 + 0xB8]
	0x031C6C50 FMUL S1, S0, S1
	0x031C6C54 FMUL S1, S0, S1
	0x031C6C58 FMUL S0, S0, S1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+4000]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2672]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2672]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4000], W8
	025 Move W8, 20
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutCirc()

Disassembly:
	0x031C6C5C FADD S0, S0, S2
	0x031C6C60 STR S0, [X8]
	0x031C6C64 LDR V1, [X19 + 0x78]
	0x031C6C68 LDR V2, [X19 + 0x80]
	0x031C6C6C LDR V3, [X19 + 0x60]
	0x031C6C70 LDR V4, [X19 + 0x68]
	0x031C6C74 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6C7C FMUL S2, S0, S2
	0x031C6C80 FADD V0.2S, V3.2S, V1.2S
	0x031C6C84 FADD S2, S4, S2
	0x031C6C88 MOV S1, V0.S[1]
	0x031C6C8C LDP X30, X21, [X31], #0x20
	0x031C6C90 RET
	0x031C6C94 STP X30, X21, [X31 - 0x20]!
	0x031C6C98 STP X20, X19, [X31 + 0x10]
	0x031C6C9C ADRP X21, 0x1215000
	0x031C6CA0 ADRP X20, 0xF59000
	0x031C6CA4 LDRB W8, [X21 + 0xFBB]
	0x031C6CA8 LDR X20, [X20 + 0x368]
	0x031C6CAC MOV X19, X0
	0x031C6CB0 TBNZ X8, 0x0, 0x31C6CC8
	0x031C6CB4 ADRP X0, 0xF59000
	0x031C6CB8 LDR X0, [X0 + 0x368]
	0x031C6CBC BL 0x1C16CF4
	0x031C6CC0 MOVZ W8, 0x1
	0x031C6CC4 STRB W8, [X21 + 0xFBB]
	0x031C6CC8 LDR X8, [X20]
	0x031C6CCC LDR V0, [X19 + 0x1C]
	0x031C6CD0 FMOV S1, 1
	0x031C6CD4 LDR X8, [X8 + 0xB8]
	0x031C6CD8 FADD S0, S0, S0
	0x031C6CDC FCMP S0, S1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+4001]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2680]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2680]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4001], W8
	025 Move W8, 21
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutCirc()

Disassembly:
	0x031C6CE0 STR S0, [X8]
	0x031C6CE4 B.PL 0x31C6CFC
	0x031C6CE8 FMUL S1, S0, S0
	0x031C6CEC FMUL S1, S0, S1
	0x031C6CF0 FMUL S1, S0, S1
	0x031C6CF4 FMUL S0, S0, S1
	0x031C6CF8 B 0x31C6D1C
	0x031C6CFC FMOV S1, -2
	0x031C6D00 FADD S0, S0, S1
	0x031C6D04 FMUL S1, S0, S0
	0x031C6D08 FMUL S1, S0, S1
	0x031C6D0C FMUL S1, S0, S1
	0x031C6D10 FMUL S0, S0, S1
	0x031C6D14 FMOV S1, 2
	0x031C6D18 FADD S0, S0, S1
	0x031C6D1C STR S0, [X8]
	0x031C6D20 LDUR V1, [X19 + 0x84]
	0x031C6D24 LDR V2, [X19 + 0x8C]
	0x031C6D28 LDR V3, [X19 + 0x60]
	0x031C6D2C LDR V4, [X19 + 0x68]
	0x031C6D30 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6D38 FMUL S2, S0, S2
	0x031C6D3C FADD V0.2S, V1.2S, V3.2S
	0x031C6D40 FADD S2, S4, S2
	0x031C6D44 MOV S1, V0.S[1]
	0x031C6D48 LDP X30, X21, [X31], #0x20
	0x031C6D4C RET
	0x031C6D50 STR D8, [X31 - 0x30]!
	0x031C6D54 STP X30, X21, [X31 + 0x10]
	0x031C6D58 STP X20, X19, [X31 + 0x20]
	0x031C6D5C ADRP X21, 0x1215000
	0x031C6D60 ADRP X20, 0xF2F000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+4002]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2688]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2688]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4002], W8
	025 Move W8, 22
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInBounce()

Disassembly:
	0x031C6D64 LDRB W8, [X21 + 0xFBC]
	0x031C6D68 LDR X20, [X20 + 0x5A8]
	0x031C6D6C MOV X19, X0
	0x031C6D70 TBNZ X8, 0x0, 0x31C6D94
	0x031C6D74 ADRP X0, 0xF59000
	0x031C6D78 LDR X0, [X0 + 0x368]
	0x031C6D7C BL 0x1C16CF4
	0x031C6D80 ADRP X0, 0xF2F000
	0x031C6D84 LDR X0, [X0 + 0x5A8]
	0x031C6D88 BL 0x1C16CF4
	0x031C6D8C MOVZ W8, 0x1
	0x031C6D90 STRB W8, [X21 + 0xFBC]
	0x031C6D94 LDR X0, [X20]
	0x031C6D98 ADRP X21, 0xF59000
	0x031C6D9C LDR V8, [X19 + 0x1C]
	0x031C6DA0 LDR W8, [X0 + 0xE0]
	0x031C6DA4 LDR X21, [X21 + 0x368]
	0x031C6DA8 CBNZ W8, 0x31C6DB4
	0x031C6DAC BL 0x1C16DFC
	0x031C6DB0 LDR X0, [X20]
	0x031C6DB4 LDR X8, [X0 + 0xB8]
	0x031C6DB8 LDR V0, [X8 + 0x8]
	0x031C6DBC FMUL S0, S8, S0
	0x031C6DC0 BL 0x3EB1BD0
	0x031C6DC4 LDR X8, [X21]
	0x031C6DC8 FNEG S1, S0
	0x031C6DCC LDP X30, X21, [X31 + 0x10]
	0x031C6DD0 LDR X8, [X8 + 0xB8]
	0x031C6DD4 STR S1, [X8]
	0x031C6DD8 LDR V1, [X19 + 0x78]
	0x031C6DDC LDR V2, [X19 + 0x80]
	0x031C6DE0 LDR V3, [X19 + 0x60]
	0x031C6DE4 LDR V4, [X19 + 0x68]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+4003]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2696]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2696]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4003], W8
	025 Move W8, 23
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutBounce()

Disassembly:
	0x00000000 INVALID
	0x031C6DEC LDP X20, X19, [X31 + 0x20]
	0x031C6DF0 FMUL S0, S0, S2
	0x031C6DF4 FSUB V1.2S, V1.2S, V5.2S
	0x031C6DF8 FSUB S2, S2, S0
	0x031C6DFC FADD V0.2S, V3.2S, V1.2S
	0x031C6E00 FADD S2, S4, S2
	0x031C6E04 MOV S1, V0.S[1]
	0x031C6E08 LDR V8, [X31], #0x30
	0x031C6E0C RET
	0x031C6E10 STR D8, [X31 - 0x30]!
	0x031C6E14 STP X30, X21, [X31 + 0x10]
	0x031C6E18 STP X20, X19, [X31 + 0x20]
	0x031C6E1C ADRP X21, 0x1215000
	0x031C6E20 ADRP X20, 0xF2F000
	0x031C6E24 LDRB W8, [X21 + 0xFBD]
	0x031C6E28 LDR X20, [X20 + 0x5A8]
	0x031C6E2C MOV X19, X0
	0x031C6E30 TBNZ X8, 0x0, 0x31C6E54
	0x031C6E34 ADRP X0, 0xF59000
	0x031C6E38 LDR X0, [X0 + 0x368]
	0x031C6E3C BL 0x1C16CF4
	0x031C6E40 ADRP X0, 0xF2F000
	0x031C6E44 LDR X0, [X0 + 0x5A8]
	0x031C6E48 BL 0x1C16CF4
	0x031C6E4C MOVZ W8, 0x1
	0x031C6E50 STRB W8, [X21 + 0xFBD]
	0x031C6E54 LDR X0, [X20]
	0x031C6E58 ADRP X21, 0xF59000
	0x031C6E5C LDR V8, [X19 + 0x1C]
	0x031C6E60 LDR W8, [X0 + 0xE0]
	0x031C6E64 LDR X21, [X21 + 0x368]
	0x031C6E68 CBNZ W8, 0x31C6E74

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+4004]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2704]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2704]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4004], W8
	025 Move W8, 24
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutBounce()

Disassembly:
	0x031C6E6C BL 0x1C16DFC
	0x031C6E70 LDR X0, [X20]
	0x031C6E74 LDR X8, [X0 + 0xB8]
	0x031C6E78 LDR V0, [X8 + 0x8]
	0x031C6E7C FMUL S0, S8, S0
	0x031C6E80 BL 0x3EB1B70
	0x031C6E84 LDR X8, [X21]
	0x031C6E88 LDP X30, X21, [X31 + 0x10]
	0x031C6E8C LDR X8, [X8 + 0xB8]
	0x031C6E90 STR S0, [X8]
	0x031C6E94 LDR V1, [X19 + 0x78]
	0x031C6E98 LDR V2, [X19 + 0x80]
	0x031C6E9C LDR V3, [X19 + 0x60]
	0x031C6EA0 LDR V4, [X19 + 0x68]
	0x031C6EA4 LDP X20, X19, [X31 + 0x20]
	0x00000000 INVALID
	0x031C6EAC FMUL S2, S0, S2
	0x031C6EB0 FADD V0.2S, V1.2S, V3.2S
	0x031C6EB4 FADD S2, S4, S2
	0x031C6EB8 MOV S1, V0.S[1]
	0x031C6EBC LDR V8, [X31], #0x30
	0x031C6EC0 RET
	0x031C6EC4 STP X30, X21, [X31 - 0x20]!
	0x031C6EC8 STP X20, X19, [X31 + 0x10]
	0x031C6ECC ADRP X21, 0x1215000
	0x031C6ED0 ADRP X20, 0xF59000
	0x031C6ED4 LDRB W8, [X21 + 0xFBE]
	0x031C6ED8 LDR X20, [X20 + 0x368]
	0x031C6EDC MOV X19, X0
	0x031C6EE0 TBNZ X8, 0x0, 0x31C6EF8
	0x031C6EE4 ADRP X0, 0xF59000
	0x031C6EE8 LDR X0, [X0 + 0x368]
	0x031C6EEC BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+4005]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2712]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2712]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4005], W8
	025 Move W8, 25
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInBack()

Disassembly:
	0x031C6EF0 MOVZ W8, 0x1
	0x031C6EF4 STRB W8, [X21 + 0xFBE]
	0x031C6EF8 ADRP X8, 0xFFFFFFFFFD923000
	0x031C6EFC LDR V0, [X19 + 0x1C]
	0x031C6F00 LDR V1, [X8 + 0xF4C]
	0x031C6F04 FMUL S0, S0, S1
	0x031C6F08 BL 0x3EB1BD0
	0x031C6F0C LDR X8, [X20]
	0x031C6F10 FMOV S1, -1
	0x031C6F14 FADD S0, S0, S1
	0x031C6F18 FNEG S1, S0
	0x031C6F1C LDR X8, [X8 + 0xB8]
	0x031C6F20 STR S1, [X8]
	0x031C6F24 LDUR V1, [X19 + 0x84]
	0x031C6F28 LDR V2, [X19 + 0x8C]
	0x031C6F2C LDR V3, [X19 + 0x60]
	0x031C6F30 LDR V4, [X19 + 0x68]
	0x031C6F34 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6F3C FMUL S2, S0, S2
	0x031C6F40 FSUB V0.2S, V3.2S, V1.2S
	0x031C6F44 FSUB S2, S4, S2
	0x031C6F48 MOV S1, V0.S[1]
	0x031C6F4C LDP X30, X21, [X31], #0x20
	0x031C6F50 RET
	0x031C6F54 STP X30, X21, [X31 - 0x20]!
	0x031C6F58 STP X20, X19, [X31 + 0x10]
	0x031C6F5C ADRP X21, 0x1215000
	0x031C6F60 ADRP X20, 0xF59000
	0x031C6F64 LDRB W8, [X21 + 0xFBF]
	0x031C6F68 LDR X20, [X20 + 0x368]
	0x031C6F6C MOV X19, X0
	0x031C6F70 TBNZ X8, 0x0, 0x31C6F88

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+4006]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2720]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2720]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4006], W8
	025 Move W8, 26
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutBack()

Disassembly:
	0x031C6F74 ADRP X0, 0xF59000
	0x031C6F78 LDR X0, [X0 + 0x368]
	0x031C6F7C BL 0x1C16CF4
	0x031C6F80 MOVZ W8, 0x1
	0x031C6F84 STRB W8, [X21 + 0xFBF]
	0x031C6F88 LDR V0, [X19 + 0x1C]
	0x031C6F8C FMOV S1, -1
	0x031C6F90 FADD S0, S0, S1
	0x031C6F94 FMOV S1, 10
	0x031C6F98 FMUL S0, S0, S1
	0x031C6F9C BL 0x3EB1B90
	0x031C6FA0 LDR X8, [X20]
	0x031C6FA4 LDR X8, [X8 + 0xB8]
	0x031C6FA8 STR S0, [X8]
	0x031C6FAC LDR V1, [X19 + 0x78]
	0x031C6FB0 LDR V2, [X19 + 0x80]
	0x031C6FB4 LDR V3, [X19 + 0x60]
	0x031C6FB8 LDR V4, [X19 + 0x68]
	0x031C6FBC LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C6FC4 FMUL S2, S0, S2
	0x031C6FC8 FADD V0.2S, V1.2S, V3.2S
	0x031C6FCC FADD S2, S4, S2
	0x031C6FD0 MOV S1, V0.S[1]
	0x031C6FD4 LDP X30, X21, [X31], #0x20
	0x031C6FD8 RET
	0x031C6FDC STP X30, X21, [X31 - 0x20]!
	0x031C6FE0 STP X20, X19, [X31 + 0x10]
	0x031C6FE4 ADRP X21, 0x1215000
	0x031C6FE8 ADRP X20, 0xF59000
	0x031C6FEC LDRB W8, [X21 + 0xFC0]
	0x031C6FF0 LDR X20, [X20 + 0x368]
	0x031C6FF4 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1216000
	007 Move X21, 0xF5A000
	008 Move X20, 0xF5A000
	009 Move W8, [X22+4007]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2728]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF5A000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF5A000
	021 Move X0, [X0+2728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4007], W8
	025 Move W8, 27
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutBack()

Disassembly:
	0x031C6FF8 TBNZ X8, 0x0, 0x31C7010
	0x031C6FFC ADRP X0, 0xF59000
	0x031C7000 LDR X0, [X0 + 0x368]
	0x031C7004 BL 0x1C16CF4
	0x031C7008 MOVZ W8, 0x1
	0x031C700C STRB W8, [X21 + 0xFC0]
	0x031C7010 LDR V0, [X19 + 0x1C]
	0x031C7014 FMOV S1, -10
	0x031C7018 FMUL S0, S0, S1
	0x031C701C BL 0x3EB1B90
	0x031C7020 LDR X8, [X20]
	0x031C7024 FMOV S1, 1
	0x031C7028 FSUB S0, S1, S0
	0x031C702C LDR X8, [X8 + 0xB8]
	0x031C7030 STR S0, [X8]
	0x031C7034 LDR V1, [X19 + 0x78]
	0x031C7038 LDR V2, [X19 + 0x80]
	0x031C703C LDR V3, [X19 + 0x60]
	0x031C7040 LDR V4, [X19 + 0x68]
	0x031C7044 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C704C FMUL S2, S0, S2
	0x031C7050 FADD V0.2S, V1.2S, V3.2S
	0x031C7054 FADD S2, S4, S2
	0x031C7058 MOV S1, V0.S[1]
	0x031C705C LDP X30, X21, [X31], #0x20
	0x031C7060 RET
	0x031C7064 STP D9, D8, [X31 - 0x30]!
	0x031C7068 STP X30, X21, [X31 + 0x10]
	0x031C706C STP X20, X19, [X31 + 0x20]
	0x031C7070 ADRP X21, 0x1214000
	0x031C7074 ADRP X20, 0xF58000
	0x031C7078 LDRB W8, [X21 + 0xFC1]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1215000
	007 Move X21, 0xF59000
	008 Move X20, 0xF59000
	009 Move W8, [X22+4008]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2736]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF59000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF59000
	021 Move X0, [X0+2736]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4008], W8
	025 Move W8, 28
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInElastic()

Disassembly:
	0x031C707C LDR X20, [X20 + 0x368]
	0x031C7080 MOV X19, X0
	0x031C7084 TBNZ X8, 0x0, 0x31C709C
	0x031C7088 ADRP X0, 0xF58000
	0x031C708C LDR X0, [X0 + 0x368]
	0x031C7090 BL 0x1C16CF4
	0x031C7094 MOVZ W8, 0x1
	0x031C7098 STRB W8, [X21 + 0xFC1]
	0x031C709C LDR X8, [X20]
	0x031C70A0 LDR V0, [X19 + 0x1C]
	0x031C70A4 FMOV S1, 1
	0x031C70A8 LDR X8, [X8 + 0xB8]
	0x031C70AC FADD S0, S0, S0
	0x031C70B0 FCMP S0, S1
	0x031C70B4 STR S0, [X8]
	0x031C70B8 B.PL 0x31C70DC
	0x031C70BC LDUR V8, [X19 + 0x84]
	0x031C70C0 LDR V9, [X19 + 0x8C]
	0x031C70C4 FMOV S1, -1
	0x031C70C8 FADD S0, S0, S1
	0x031C70CC FMOV S1, 10
	0x031C70D0 FMUL S0, S0, S1
	0x031C70D4 BL 0x3EB1B90
	0x031C70D8 B 0x31C7104
	0x031C70DC FMOV S1, -1
	0x031C70E0 FADD S0, S0, S1
	0x031C70E4 STR S0, [X8]
	0x031C70E8 LDUR V8, [X19 + 0x84]
	0x031C70EC LDR V9, [X19 + 0x8C]
	0x031C70F0 FMOV S1, -10
	0x031C70F4 FMUL S0, S0, S1
	0x031C70F8 BL 0x3EB1B90
	0x031C70FC FMOV S1, 2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1215000
	007 Move X21, 0xF59000
	008 Move X20, 0xF59000
	009 Move W8, [X22+4009]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2744]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF59000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF59000
	021 Move X0, [X0+2744]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4009], W8
	025 Move W8, 29
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseOutElastic()

Disassembly:
	0x031C7100 FSUB S0, S1, S0
	0x00000000 INVALID
	0x031C7108 FMUL S1, S0, S9
	0x031C710C LDR V0, [X19 + 0x60]
	0x031C7110 LDR V3, [X19 + 0x68]
	0x031C7114 LDP X20, X19, [X31 + 0x20]
	0x031C7118 LDP X30, X21, [X31 + 0x10]
	0x031C711C FADD V0.2S, V2.2S, V0.2S
	0x031C7120 FADD S2, S1, S3
	0x031C7124 MOV S1, V0.S[1]
	0x031C7128 LDP D9, D8, [X31], #0x30
	0x031C712C RET
	0x031C7130 STP X30, X21, [X31 - 0x20]!
	0x031C7134 STP X20, X19, [X31 + 0x10]
	0x031C7138 ADRP X21, 0x1214000
	0x031C713C ADRP X20, 0xF58000
	0x031C7140 LDRB W8, [X21 + 0xFC2]
	0x031C7144 LDR X20, [X20 + 0x368]
	0x031C7148 MOV X19, X0
	0x031C714C TBNZ X8, 0x0, 0x31C7164
	0x031C7150 ADRP X0, 0xF58000
	0x031C7154 LDR X0, [X0 + 0x368]
	0x031C7158 BL 0x1C16CF4
	0x031C715C MOVZ W8, 0x1
	0x031C7160 STRB W8, [X21 + 0xFC2]
	0x031C7164 LDR V0, [X19 + 0x1C]
	0x031C7168 LDR X8, [X20]
	0x031C716C FMOV S1, 1
	0x031C7170 FMOV S2, -1
	0x031C7174 FMUL S0, S0, S0
	0x031C7178 LDR X8, [X8 + 0xB8]
	0x031C717C FSUB S0, S1, S0
	0x031C7180 FSQRT S0, S0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1215000
	007 Move X21, 0xF59000
	008 Move X20, 0xF59000
	009 Move W8, [X22+4010]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2752]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF59000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF59000
	021 Move X0, [X0+2752]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4010], W8
	025 Move W8, 30
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEaseInOutElastic()

Disassembly:
	0x031C7184 FADD S0, S0, S2
	0x031C7188 FNEG S1, S0
	0x031C718C STR S1, [X8]
	0x031C7190 LDR V1, [X19 + 0x78]
	0x031C7194 LDR V2, [X19 + 0x80]
	0x031C7198 LDR V3, [X19 + 0x60]
	0x031C719C LDR V4, [X19 + 0x68]
	0x031C71A0 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C71A8 FMUL S2, S0, S2
	0x031C71AC FSUB V0.2S, V3.2S, V1.2S
	0x031C71B0 FSUB S2, S4, S2
	0x031C71B4 MOV S1, V0.S[1]
	0x031C71B8 LDP X30, X21, [X31], #0x20
	0x031C71BC RET
	0x031C71C0 STP X30, X21, [X31 - 0x20]!
	0x031C71C4 STP X20, X19, [X31 + 0x10]
	0x031C71C8 ADRP X21, 0x1214000
	0x031C71CC ADRP X20, 0xF58000
	0x031C71D0 LDRB W8, [X21 + 0xFC3]
	0x031C71D4 LDR X20, [X20 + 0x368]
	0x031C71D8 MOV X19, X0
	0x031C71DC TBNZ X8, 0x0, 0x31C71F4
	0x031C71E0 ADRP X0, 0xF58000
	0x031C71E4 LDR X0, [X0 + 0x368]
	0x031C71E8 BL 0x1C16CF4
	0x031C71EC MOVZ W8, 0x1
	0x031C71F0 STRB W8, [X21 + 0xFC3]
	0x031C71F4 LDR V0, [X19 + 0x1C]
	0x031C71F8 LDR X8, [X20]
	0x031C71FC FMOV S1, -1
	0x031C7200 FMOV S2, 1
	0x031C7204 FADD S0, S0, S1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x1215000
	007 Move X21, 0xF59000
	008 Move X20, 0xF59000
	009 Move W8, [X22+4011]
	010 Move X21, [X21+1696]
	011 Move X20, [X20+2760]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF59000
	018 Move X0, [X0+1696]
	019 Call 0x1C17CF4
	020 Move X0, 0xF59000
	021 Move X0, [X0+2760]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+4011], W8
	025 Move W8, 31
	026 Move [X19+148], W8
	027 Move X0, [X21]
	028 Call 0x1C17F10
	029 Move X2, [X20]
	030 Move X1, X19
	031 Move X20, X0
	032 Call EaseTypeDelegate..ctor, X0, X1, X2
	033 Move [X19+160], X20
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return X0

Method: LTDescr setEasePunch()

Disassembly:
	0x031C7208 LDR X8, [X8 + 0xB8]
	0x031C720C FMUL S0, S0, S0
	0x031C7210 FSUB S0, S2, S0
	0x031C7214 FSQRT S0, S0
	0x031C7218 STR S0, [X8]
	0x031C721C LDR V1, [X19 + 0x78]
	0x031C7220 LDR V2, [X19 + 0x80]
	0x031C7224 LDR V3, [X19 + 0x60]
	0x031C7228 LDR V4, [X19 + 0x68]
	0x031C722C LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C7234 FMUL S2, S0, S2
	0x031C7238 FADD V0.2S, V1.2S, V3.2S
	0x031C723C FADD S2, S4, S2
	0x031C7240 MOV S1, V0.S[1]
	0x031C7244 LDP X30, X21, [X31], #0x20
	0x031C7248 RET
	0x031C724C STP X30, X21, [X31 - 0x20]!
	0x031C7250 STP X20, X19, [X31 + 0x10]
	0x031C7254 ADRP X21, 0x1214000
	0x031C7258 ADRP X20, 0xF58000
	0x031C725C LDRB W8, [X21 + 0xFC4]
	0x031C7260 LDR X20, [X20 + 0x368]
	0x031C7264 MOV X19, X0
	0x031C7268 TBNZ X8, 0x0, 0x31C7280
	0x031C726C ADRP X0, 0xF58000
	0x031C7270 LDR X0, [X0 + 0x368]
	0x031C7274 BL 0x1C16CF4
	0x031C7278 MOVZ W8, 0x1
	0x031C727C STRB W8, [X21 + 0xFC4]
	0x031C7280 LDR X8, [X20]
	0x031C7284 LDR V0, [X19 + 0x1C]
	0x031C7288 LDR X8, [X8 + 0xB8]
	0x031C728C FADD S1, S0, S0
	0x031C7290 FMOV S0, 1
	0x031C7294 FCMP S1, S0
	0x031C7298 STR S1, [X8]
	0x031C729C B.PL 0x31C72E0
	0x031C72A0 FMUL S1, S1, S1
	0x031C72A4 FSUB S0, S0, S1
	0x031C72A8 FMOV S2, -1
	0x031C72AC FSQRT S0, S0
	0x031C72B0 FADD S0, S0, S2
	0x031C72B4 FNEG S1, S0
	0x031C72B8 STR S1, [X8]
	0x031C72BC LDUR V1, [X19 + 0x84]
	0x031C72C0 LDR V2, [X19 + 0x8C]
	0x031C72C4 LDR V3, [X19 + 0x60]
	0x031C72C8 LDR V4, [X19 + 0x68]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF2F000
	007 Move W8, [X21+4012]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xF59000
	015 Move X0, [X0+1696]
	016 Call 0x1C17CF4
	017 Move X0, 0xF59000
	018 Move X0, [X0+2768]
	019 Call 0x1C17CF4
	020 Move X0, 0xF2F000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+4012], W8
	025 Move X0, [X20]
	026 Move X21, [X19+232]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Compare X21, 0
	032 JumpIfEqual {58}
	033 Move X8, [X20]
	034 Move X20, 0xF59000
	035 Move X8, [X8+184]
	036 Move X8, [X8+112]
	037 Move [X21+88], X8
	038 Move V0, [X19+96]
	039 Move V1, [X19+108]
	040 Move X8, 0xF59000
	041 Move X8, [X8+1696]
	042 Add S0, S0, S1
	043 Move [X19+108], S0
	044 Move X0, [X8]
	045 Move X20, [X20+2768]
	046 Call 0x1C17F10
	047 Move X2, [X20]
	048 Move X1, X19
	049 Move X20, X0
	050 Call EaseTypeDelegate..ctor, X0, X1, X2
	051 Move [X19+160], X20
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return X0
	058 Call 0x1C17F20

Method: LTDescr setEaseShake()

Disassembly:
	0x00000000 INVALID
	0x031C72D0 FMUL S2, S0, S2
	0x031C72D4 FSUB V0.2S, V3.2S, V1.2S
	0x031C72D8 FSUB S2, S4, S2
	0x031C72DC B 0x31C731C
	0x031C72E0 FMOV S2, -2
	0x031C72E4 FADD S1, S1, S2
	0x031C72E8 FMUL S1, S1, S1
	0x031C72EC FSUB S1, S0, S1
	0x031C72F0 FSQRT S1, S1
	0x031C72F4 FADD S0, S1, S0
	0x031C72F8 STR S0, [X8]
	0x031C72FC LDUR V1, [X19 + 0x84]
	0x031C7300 LDR V2, [X19 + 0x8C]
	0x031C7304 LDR V3, [X19 + 0x60]
	0x031C7308 LDR V4, [X19 + 0x68]
	0x00000000 INVALID
	0x031C7310 FMUL S2, S0, S2
	0x031C7314 FADD V0.2S, V1.2S, V3.2S
	0x031C7318 FADD S2, S4, S2
	0x031C731C LDP X20, X19, [X31 + 0x10]
	0x031C7320 MOV S1, V0.S[1]
	0x031C7324 LDP X30, X21, [X31], #0x20
	0x031C7328 RET
	0x031C732C STR D14, [X31 - 0x60]!
	0x031C7330 STP D13, D12, [X31 + 0x8]
	0x031C7334 STP D11, D10, [X31 + 0x18]
	0x031C7338 STP D9, D8, [X31 + 0x28]
	0x031C733C STR X30, [X31 + 0x38]
	0x031C7340 STP X22, X21, [X31 + 0x40]
	0x031C7344 STP X20, X19, [X31 + 0x50]
	0x031C7348 ADRP X22, 0x1214000
	0x031C734C ADRP X20, 0xF58000
	0x031C7350 ADRP X21, 0xF2E000
	0x031C7354 LDRB W8, [X22 + 0xFC5]
	0x031C7358 LDR X20, [X20 + 0x368]
	0x031C735C LDR X21, [X21 + 0x5A8]
	0x031C7360 MOV X19, X0
	0x031C7364 TBNZ X8, 0x0, 0x31C7388
	0x031C7368 ADRP X0, 0xF58000
	0x031C736C LDR X0, [X0 + 0x368]
	0x031C7370 BL 0x1C16CF4
	0x031C7374 ADRP X0, 0xF2E000
	0x031C7378 LDR X0, [X0 + 0x5A8]
	0x031C737C BL 0x1C16CF4
	0x031C7380 MOVZ W8, 0x1
	0x031C7384 STRB W8, [X22 + 0xFC5]
	0x031C7388 LDR X8, [X20]
	0x031C738C LDR V0, [X19 + 0x1C]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF2F000
	007 Move W8, [X21+4013]
	008 Move X20, [X20+1448]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xF59000
	015 Move X0, [X0+1696]
	016 Call 0x1C17CF4
	017 Move X0, 0xF59000
	018 Move X0, [X0+2768]
	019 Call 0x1C17CF4
	020 Move X0, 0xF2F000
	021 Move X0, [X0+1448]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+4013], W8
	025 Move X0, [X20]
	026 Move X21, [X19+232]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Compare X21, 0
	032 JumpIfEqual {58}
	033 Move X8, [X20]
	034 Move X20, 0xF59000
	035 Move X8, [X8+184]
	036 Move X8, [X8+120]
	037 Move [X21+88], X8
	038 Move V0, [X19+96]
	039 Move V1, [X19+108]
	040 Move X8, 0xF59000
	041 Move X8, [X8+1696]
	042 Add S0, S0, S1
	043 Move [X19+108], S0
	044 Move X0, [X8]
	045 Move X20, [X20+2768]
	046 Call 0x1C17F10
	047 Move X2, [X20]
	048 Move X1, X19
	049 Move X20, X0
	050 Call EaseTypeDelegate..ctor, X0, X1, X2
	051 Move [X19+160], X20
	052 Move X0, X19
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return X0
	058 Call 0x1C17F20

Method: UnityEngine.Vector3 tweenOnCurve()

Disassembly:
	0x031C7414 BL 0x31B4204
	0x031C7418 LDR V2, [X19 + 0x68]
	0x031C741C FSUB S1, S8, S10
	0x031C7420 FADD S3, S1, S13
	0x031C7424 FSUB S1, S9, S12
	0x031C7428 FSUB S0, S11, S0
	0x031C742C LDP X20, X19, [X31 + 0x50]
	0x031C7430 LDP X22, X21, [X31 + 0x40]
	0x031C7434 LDR X30, [X31 + 0x38]
	0x031C7438 LDP D9, D8, [X31 + 0x28]
	0x031C743C LDP D11, D10, [X31 + 0x18]
	0x031C7440 LDP D13, D12, [X31 + 0x8]
	0x031C7444 FADD S1, S1, S14
	0x031C7448 FADD S2, S0, S2
	0x031C744C MOV V0.16B, V3.16B
	0x031C7450 LDR V14, [X31], #0x60
	0x031C7454 RET
	0x031C7458 STP X30, X21, [X31 - 0x20]!
	0x031C745C STP X20, X19, [X31 + 0x10]
	0x031C7460 ADRP X21, 0x1214000
	0x031C7464 ADRP X20, 0xF58000
	0x031C7468 LDRB W8, [X21 + 0xFC6]
	0x031C746C LDR X20, [X20 + 0x368]
	0x031C7470 MOV X19, X0
	0x031C7474 TBNZ X8, 0x0, 0x31C748C
	0x031C7478 ADRP X0, 0xF58000
	0x031C747C LDR X0, [X0 + 0x368]
	0x031C7480 BL 0x1C16CF4
	0x031C7484 MOVZ W8, 0x1
	0x031C7488 STRB W8, [X21 + 0xFC6]
	0x031C748C LDR X8, [X20]
	0x031C7490 LDR V0, [X19 + 0x1C]
	0x031C7494 FMOV S2, -1.75
	0x031C7498 FMOV S4, 2.75
	0x031C749C LDR X8, [X8 + 0xB8]
	0x031C74A0 FMOV S3, 1
	0x031C74A4 STR S0, [X8]
	0x031C74A8 LDR V1, [X19 + 0x48]
	0x031C74AC FMUL S2, S1, S2
	0x031C74B0 FDIV S2, S2, S4
	0x031C74B4 FADD S2, S2, S3
	0x031C74B8 FCMP S0, S2
	0x031C74BC B.PL 0x31C74D4
	0x031C74C0 FDIV S1, S3, S2
	0x031C74C4 FDIV S1, S1, S2
	0x031C74C8 FMUL S1, S0, S1
	0x031C74CC FMUL S0, S0, S1
	0x031C74D0 B 0x31C758C

ISIL:
	001 Move [X31-80], D15
	002 Move [X31-72], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+72], X19
	011 Move X8, [X0+232]
	012 Compare X8, 0
	013 JumpIfEqual {64}
	014 Move X19, X0
	015 Move X0, [X8+88]
	016 Compare X0, 0
	017 JumpIfEqual {64}
	018 Move V0, [X19+28]
	019 Move V10, [X19+96]
	020 Move V11, [X19+120]
	021 Move X1, X31
	022 Call AnimationCurve.Evaluate, X0, V0
	023 Move X8, [X19+232]
	024 Compare X8, 0
	025 JumpIfEqual {64}
	026 Move X0, [X8+88]
	027 Compare X0, 0
	028 JumpIfEqual {64}
	029 Move V8, V0
	030 Move V0, [X19+28]
	031 Move V12, [X19+100]
	032 Move V13, [X19+124]
	033 Move X1, X31
	034 Call AnimationCurve.Evaluate, X0, V0
	035 Move X8, [X19+232]
	036 Compare X8, 0
	037 JumpIfEqual {64}
	038 Move X0, [X8+88]
	039 Compare X0, 0
	040 JumpIfEqual {64}
	041 Move V9, V0
	042 Move V0, [X19+28]
	043 Move V14, [X19+104]
	044 Move V15, [X19+128]
	045 Move X1, X31
	046 Call AnimationCurve.Evaluate, X0, V0
	047 Multiply S1, S11, S8
	048 Multiply S2, S13, S9
	049 Multiply S3, S15, S0
	050 Add S0, S10, S1
	051 Add S1, S12, S2
	052 Move X30, [X31+64]
	053 Move X19, [X31+72]
	054 Move D9, [X31+48]
	055 Move D8, [X31+56]
	056 Move D11, [X31+32]
	057 Move D10, [X31+40]
	058 Move D13, [X31+16]
	059 Move D12, [X31+24]
	060 Add S2, S14, S3
	061 Move D15, [X31+80]
	062 Move D14, [X31+88]
	063 Return X0
	064 Call 0x1C17F20

Method: UnityEngine.Vector3 easeInOutQuad()

Disassembly:
	0x031C74D4 FMOV S5, -0.75
	0x031C74D8 FMUL S5, S1, S5
	0x031C74DC FDIV S4, S5, S4
	0x031C74E0 FADD S3, S4, S3
	0x031C74E4 FCMP S0, S3
	0x031C74E8 B.PL 0x31C7520
	0x031C74EC FADD S2, S2, S3
	0x031C74F0 FMOV S3, -0.5
	0x031C74F4 MOVZ W9, 0x40F20000
	0x031C74F8 FMUL S2, S2, S3
	0x031C74FC FMOV S3, W9
	0x031C7500 FADD S0, S0, S2
	0x031C7504 FMUL S2, S0, S3
	0x031C7508 FMOV S4, 1
	0x031C750C FMOV S5, -0.25
	0x031C7510 FMUL S0, S0, S2
	0x031C7514 FMUL S5, S1, S5
	0x031C7518 FADD S0, S0, S4
	0x031C751C B 0x31C7584
	0x031C7520 FMOV S2, -0.25
	0x031C7524 FMOV S4, 2.75
	0x031C7528 FMUL S2, S1, S2
	0x031C752C FDIV S4, S2, S4
	0x031C7530 FMOV S2, 1
	0x031C7534 FADD S4, S4, S2
	0x031C7538 FCMP S0, S4
	0x031C753C B.PL 0x31C7554
	0x031C7540 FADD S3, S4, S3
	0x031C7544 FMOV S4, -0.5
	0x031C7548 MOVZ W9, 0x40F20000
	0x031C754C MOVZ W10, 0xBD800000
	0x031C7550 B 0x31C7564
	0x031C7554 FADD S3, S4, S2
	0x031C7558 FMOV S4, -0.5
	0x031C755C MOVZ W9, 0x40F20000
	0x031C7560 MOVZ W10, 0xBC800000
	0x031C7564 FMUL S3, S3, S4
	0x031C7568 FMOV S4, W9
	0x031C756C FADD S0, S0, S3
	0x031C7570 FMUL S3, S0, S4
	0x031C7574 FMOV S5, W10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4014]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4014], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move S1, 1
	022 Move X8, [X8+184]
	023 Add S0, S0, S0
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move [X8], S0
	026 Multiply S0, S0, S0
	027 Move S3, -3
	028 Subtract S2, S1, S0
	029 Add S0, S0, S3
	030 Multiply S0, S2, S0
	031 Add S0, S0, S1
	032 Move [X8], S0
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 Move V2, [X19+140]
	035 Move V3, [X19+96]
	036 Move V4, [X19+104]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 NotImplemented "Instruction INVALID not yet implemented."
	040 Multiply S2, S0, S2
	041 Add V0, V1, V3
	042 Add S2, S4, S2
	043 Move S1, V0.S[1]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return X0

Method: UnityEngine.Vector3 easeInQuad()

Disassembly:
	0x031C7578 FMUL S0, S0, S3
	0x031C757C FMUL S5, S1, S5
	0x031C7580 FADD S0, S0, S2
	0x031C7584 FMUL S1, S1, S5
	0x031C7588 FADD S0, S0, S1
	0x031C758C STR S0, [X8]
	0x031C7590 LDR V1, [X19 + 0x78]
	0x031C7594 LDR V2, [X19 + 0x80]
	0x031C7598 LDR V3, [X19 + 0x60]
	0x031C759C LDR V4, [X19 + 0x68]
	0x031C75A0 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C75A8 FMUL S2, S2, S0
	0x031C75AC FADD V0.2S, V1.2S, V3.2S
	0x031C75B0 FADD S2, S2, S4
	0x031C75B4 MOV S1, V0.S[1]
	0x031C75B8 LDP X30, X21, [X31], #0x20
	0x031C75BC RET
	0x031C75C0 STP D13, D12, [X31 - 0x50]!
	0x031C75C4 STP D11, D10, [X31 + 0x10]
	0x031C75C8 STP D9, D8, [X31 + 0x20]
	0x031C75CC STP X30, X21, [X31 + 0x30]
	0x031C75D0 STP X20, X19, [X31 + 0x40]
	0x031C75D4 ADRP X21, 0x1214000
	0x031C75D8 ADRP X20, 0xF58000
	0x031C75DC LDRB W8, [X21 + 0xFC7]
	0x031C75E0 LDR X20, [X20 + 0x368]
	0x031C75E4 MOV X19, X0
	0x031C75E8 TBNZ X8, 0x0, 0x31C760C
	0x031C75EC ADRP X0, 0xF58000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4015]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4015], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move X8, [X8+184]
	022 Multiply S0, S0, S0
	023 Move [X8], S0
	024 Move V1, [X19+120]
	025 Move V2, [X19+128]
	026 Move V3, [X19+96]
	027 Move V4, [X19+104]
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 NotImplemented "Instruction INVALID not yet implemented."
	031 Multiply S2, S0, S2
	032 Add V0, V1, V3
	033 Add S2, S4, S2
	034 Move S1, V0.S[1]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return X0

Method: UnityEngine.Vector3 easeOutQuad()

Disassembly:
	0x031C75F0 LDR X0, [X0 + 0x368]
	0x031C75F4 BL 0x1C16CF4
	0x031C75F8 ADRP X0, 0xF2E000
	0x031C75FC LDR X0, [X0 + 0x5A8]
	0x031C7600 BL 0x1C16CF4
	0x031C7604 MOVZ W8, 0x1
	0x031C7608 STRB W8, [X21 + 0xFC7]
	0x031C760C LDR X9, [X20]
	0x031C7610 LDR V0, [X19 + 0x1C]
	0x031C7614 ADRP X8, 0xF2E000
	0x031C7618 LDR X8, [X8 + 0x5A8]
	0x031C761C LDR X9, [X9 + 0xB8]
	0x031C7620 FADD S8, S0, S0
	0x031C7624 FMOV S0, 1
	0x031C7628 FCMP S8, S0
	0x031C762C STR S8, [X9]
	0x031C7630 B.PL 0x31C76CC
	0x031C7634 LDR X0, [X8]
	0x031C7638 LDR V9, [X19 + 0x78]
	0x031C763C LDR W8, [X0 + 0xE0]
	0x031C7640 CBNZ W8, 0x31C7648
	0x031C7644 BL 0x1C16DFC
	0x031C7648 FMOV S0, W31
	0x031C764C MOV V1.16B, V9.16B
	0x031C7650 MOV V2.16B, V8.16B
	0x031C7654 MOV X0, X31
	0x031C7658 BL 0x31B417C
	0x031C765C LDR X8, [X20]
	0x031C7660 LDR V1, [X19 + 0x7C]
	0x031C7664 LDR V10, [X19 + 0x60]
	0x031C7668 MOV V8.16B, V0.16B
	0x031C766C LDR X8, [X8 + 0xB8]
	0x031C7670 FMOV S0, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4016]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4016], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move S1, -2
	022 Move X8, [X8+184]
	023 NotImplemented "Instruction FNEG not yet implemented."
	024 Add S0, S0, S1
	025 Multiply S0, S0, S2
	026 Move [X8], S0
	027 Move V1, [X19+120]
	028 Move V2, [X19+128]
	029 Move V3, [X19+96]
	030 Move V4, [X19+104]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 NotImplemented "Instruction INVALID not yet implemented."
	034 Multiply S2, S0, S2
	035 Add V0, V1, V3
	036 Add S2, S2, S4
	037 Move S1, V0.S[1]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return X0

Method: UnityEngine.Vector3 easeLinear()

Disassembly:
	0x031C7674 MOV X0, X31
	0x031C7678 LDR V2, [X8]
	0x031C767C BL 0x31B417C
	0x031C7680 LDR X8, [X20]
	0x031C7684 LDR V1, [X19 + 0x80]
	0x031C7688 LDR V11, [X19 + 0x64]
	0x031C768C MOV V9.16B, V0.16B
	0x031C7690 LDR X8, [X8 + 0xB8]
	0x031C7694 FMOV S0, W31
	0x031C7698 MOV X0, X31
	0x031C769C LDR V2, [X8]
	0x031C76A0 BL 0x31B417C
	0x031C76A4 LDR V3, [X19 + 0x68]
	0x031C76A8 MOV V2.16B, V0.16B
	0x031C76AC FMOV S4, 0.5
	0x031C76B0 FMUL S0, S8, S4
	0x031C76B4 FMUL S1, S9, S4
	0x031C76B8 FMUL S2, S2, S4
	0x031C76BC FADD S0, S0, S10
	0x031C76C0 FADD S1, S1, S11
	0x031C76C4 FADD S2, S2, S3
	0x031C76C8 B 0x31C7784
	0x031C76CC FMOV S0, -1
	0x031C76D0 FADD S8, S8, S0
	0x031C76D4 STR S8, [X9]
	0x031C76D8 LDR X0, [X8]
	0x031C76DC LDR V9, [X19 + 0x78]
	0x031C76E0 LDR W8, [X0 + 0xE0]
	0x031C76E4 CBNZ W8, 0x31C76EC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4017]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4017], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move X8, [X8+184]
	022 Move [X8], S0
	023 Move V1, [X19+120]
	024 Move V2, [X19+128]
	025 Move V3, [X19+96]
	026 Move V4, [X19+104]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 NotImplemented "Instruction INVALID not yet implemented."
	030 Multiply S2, S0, S2
	031 Add V0, V3, V1
	032 Add S2, S4, S2
	033 Move S1, V0.S[1]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: UnityEngine.Vector3 easeSpring()

Disassembly:
	0x031C76E8 BL 0x1C16DFC
	0x031C76EC FMOV S0, W31
	0x031C76F0 MOV V1.16B, V9.16B
	0x031C76F4 MOV V2.16B, V8.16B
	0x031C76F8 MOV X0, X31
	0x031C76FC BL 0x31B4204
	0x031C7700 LDR X8, [X20]
	0x031C7704 LDR V1, [X19 + 0x7C]
	0x031C7708 LDR V10, [X19 + 0x84]
	0x031C770C LDR V11, [X19 + 0x60]
	0x031C7710 LDR X8, [X8 + 0xB8]
	0x031C7714 MOV V8.16B, V0.16B
	0x031C7718 FMOV S0, W31
	0x031C771C MOV X0, X31
	0x031C7720 LDR V2, [X8]
	0x031C7724 BL 0x31B4204
	0x031C7728 LDR X8, [X20]
	0x031C772C LDR V1, [X19 + 0x80]
	0x031C7730 LDR V12, [X19 + 0x88]
	0x031C7734 LDR V13, [X19 + 0x64]
	0x031C7738 LDR X8, [X8 + 0xB8]
	0x031C773C MOV V9.16B, V0.16B
	0x031C7740 FMOV S0, W31
	0x031C7744 MOV X0, X31
	0x031C7748 LDR V2, [X8]
	0x031C774C BL 0x31B4204
	0x031C7750 LDR V3, [X19 + 0x8C]
	0x031C7754 LDR V4, [X19 + 0x68]
	0x031C7758 MOV V2.16B, V0.16B
	0x031C775C FMOV S5, 0.5
	0x031C7760 FMUL S0, S8, S5
	0x031C7764 FMUL S1, S9, S5
	0x031C7768 FMUL S2, S2, S5
	0x031C776C FADD S0, S0, S10
	0x031C7770 FADD S1, S1, S12
	0x031C7774 FADD S2, S2, S3
	0x031C7778 FADD S0, S0, S11
	0x031C777C FADD S1, S1, S13
	0x031C7780 FADD S2, S2, S4
	0x031C7784 LDP X20, X19, [X31 + 0x40]
	0x031C7788 LDP X30, X21, [X31 + 0x30]
	0x031C778C LDP D9, D8, [X31 + 0x20]
	0x031C7790 LDP D11, D10, [X31 + 0x10]
	0x031C7794 LDP D13, D12, [X31], #0x50
	0x031C7798 RET
	0x031C779C STP X30, X21, [X31 - 0x20]!
	0x031C77A0 STP X20, X19, [X31 + 0x10]
	0x031C77A4 ADRP X21, 0x1214000
	0x031C77A8 ADRP X20, 0xF58000
	0x031C77AC LDRB W8, [X21 + 0xFC8]
	0x031C77B0 LDR X20, [X20 + 0x368]
	0x031C77B4 MOV X19, X0
	0x031C77B8 TBNZ X8, 0x0, 0x31C77D0
	0x031C77BC ADRP X0, 0xF58000
	0x031C77C0 LDR X0, [X0 + 0x368]
	0x031C77C4 BL 0x1C16CF4
	0x031C77C8 MOVZ W8, 0x1
	0x031C77CC STRB W8, [X21 + 0xFC8]
	0x031C77D0 LDR X8, [X20]
	0x031C77D4 LDR V0, [X19 + 0x1C]
	0x031C77D8 ADRP X9, 0xFFFFFFFFFD922000
	0x031C77DC LDR V1, [X9 + 0xF2C]
	0x031C77E0 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x1215000
	010 Move X20, 0xF59000
	011 Move W8, [X21+4018]
	012 Move X20, [X20+872]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF59000
	019 Move X0, [X0+872]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+4018], W8
	023 Move V0, [X19+28]
	024 Move S10, 1
	025 Move X9, -40751104
	026 Move S1, W31
	027 Move X8, [X20]
	028 Move V3, [X9+3916]
	029 Move X9, -40747008
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 NotImplemented "Instruction FMIN not yet implemented."
	032 Move S2, 2.5
	033 NotImplemented "Instruction FCSEL not yet implemented."
	034 Move V0, [X9+860]
	035 Multiply S2, S11, S2
	036 Multiply S2, S11, S2
	037 Move X20, [X8+184]
	038 Multiply S2, S11, S2
	039 Multiply S1, S11, S3
	040 Add S0, S2, S0
	041 Multiply S0, S1, S0
	042 Call 0x3EB2B70
	043 Move X8, -40747008
	044 Move V1, [X8+876]
	045 Subtract S9, S10, S11
	046 Move V8, V0
	047 Move V0, V9
	048 Call 0x3EB2B50
	049 Move X8, -40747008
	050 Move V1, [X8+276]
	051 Multiply S0, S0, S8
	052 Add S0, S11, S0
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Multiply S1, S9, S1
	056 Add S1, S1, S10
	057 Multiply S0, S1, S0
	058 Move [X20], S0
	059 Move V1, [X19+120]
	060 Move V2, [X19+128]
	061 Move V3, [X19+96]
	062 Move V4, [X19+104]
	063 Move X20, [X31+48]
	064 Move X19, [X31+56]
	065 Move D9, [X31+16]
	066 Move D8, [X31+24]
	067 NotImplemented "Instruction INVALID not yet implemented."
	068 Multiply S2, S2, S0
	069 Add V0, V3, V1
	070 Add S2, S4, S2
	071 Move S1, V0.S[1]
	072 Move D11, [X31+64]
	073 Move D10, [X31+72]
	074 Return X0

Method: UnityEngine.Vector3 easeInCubic()

Disassembly:
	0x031C77E4 STR S0, [X8]
	0x031C77E8 LDR V2, [X19 + 0x48]
	0x031C77EC LDR V3, [X19 + 0x78]
	0x031C77F0 LDR V4, [X19 + 0x80]
	0x031C77F4 FMUL S1, S2, S1
	0x031C77F8 FMOV S2, 1
	0x00000000 INVALID
	0x031C7800 FMUL S4, S0, S4
	0x031C7804 FADD S2, S1, S2
	0x00000000 INVALID
	0x031C780C FMUL S4, S0, S4
	0x031C7810 FMUL S0, S0, S2
	0x031C7814 LDR V2, [X19 + 0x60]
	0x031C7818 FSUB S0, S0, S1
	0x031C781C LDR V1, [X19 + 0x68]
	0x031C7820 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C7828 FMUL S4, S0, S4
	0x031C782C FADD V0.2S, V2.2S, V3.2S
	0x031C7830 FADD S2, S4, S1
	0x031C7834 MOV S1, V0.S[1]
	0x031C7838 LDP X30, X21, [X31], #0x20
	0x031C783C RET
	0x031C7840 STP X30, X21, [X31 - 0x20]!
	0x031C7844 STP X20, X19, [X31 + 0x10]
	0x031C7848 ADRP X21, 0x1214000
	0x031C784C ADRP X20, 0xF58000
	0x031C7850 LDRB W8, [X21 + 0xFC9]
	0x031C7854 LDR X20, [X20 + 0x368]
	0x031C7858 MOV X19, X0
	0x031C785C TBNZ X8, 0x0, 0x31C7874

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4019]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4019], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move X8, [X8+184]
	022 Multiply S1, S0, S0
	023 Multiply S0, S0, S1
	024 Move [X8], S0
	025 Move V1, [X19+120]
	026 Move V2, [X19+128]
	027 Move V3, [X19+96]
	028 Move V4, [X19+104]
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 NotImplemented "Instruction INVALID not yet implemented."
	032 Multiply S2, S0, S2
	033 Add V0, V1, V3
	034 Add S2, S4, S2
	035 Move S1, V0.S[1]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0

Method: UnityEngine.Vector3 easeOutCubic()

Disassembly:
	0x031C7860 ADRP X0, 0xF58000
	0x031C7864 LDR X0, [X0 + 0x368]
	0x031C7868 BL 0x1C16CF4
	0x031C786C MOVZ W8, 0x1
	0x031C7870 STRB W8, [X21 + 0xFC9]
	0x031C7874 ADRP X8, 0xFFFFFFFFFD922000
	0x031C7878 LDR V0, [X19 + 0x48]
	0x031C787C LDR V3, [X8 + 0xF2C]
	0x031C7880 LDR V1, [X19 + 0x1C]
	0x031C7884 LDR X9, [X20]
	0x031C7888 FMOV S2, -1
	0x031C788C FMOV S4, 1
	0x031C7890 FMUL S0, S0, S3
	0x031C7894 FADD S1, S1, S2
	0x031C7898 FADD S3, S0, S4
	0x031C789C LDR X8, [X9 + 0xB8]
	0x031C78A0 FMUL S2, S1, S1
	0x031C78A4 FMUL S1, S3, S1
	0x031C78A8 FADD S0, S0, S1
	0x031C78AC FMUL S0, S2, S0
	0x031C78B0 FADD S0, S0, S4
	0x031C78B4 STR S0, [X8]
	0x031C78B8 LDR V1, [X19 + 0x78]
	0x031C78BC LDR V2, [X19 + 0x80]
	0x031C78C0 LDR V3, [X19 + 0x60]
	0x031C78C4 LDR V4, [X19 + 0x68]
	0x031C78C8 LDP X20, X19, [X31 + 0x10]
	0x00000000 INVALID
	0x031C78D0 FMUL S2, S0, S2
	0x031C78D4 FADD V0.2S, V1.2S, V3.2S
	0x031C78D8 FADD S2, S2, S4
	0x031C78DC MOV S1, V0.S[1]
	0x031C78E0 LDP X30, X21, [X31], #0x20
	0x031C78E4 RET
	0x031C78E8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4020]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4020], W8
	019 Move V0, [X19+28]
	020 Move X8, [X20]
	021 Move S1, -1
	022 Move S2, 1
	023 Add S0, S0, S1
	024 Move X8, [X8+184]
	025 Multiply S1, S0, S0
	026 Multiply S0, S0, S1
	027 Add S0, S0, S2
	028 Move [X8], S0
	029 Move V1, [X19+120]
	030 Move V2, [X19+128]
	031 Move V3, [X19+96]
	032 Move V4, [X19+104]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 NotImplemented "Instruction INVALID not yet implemented."
	036 Multiply S2, S0, S2
	037 Add V0, V1, V3
	038 Add S2, S4, S2
	039 Move S1, V0.S[1]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0

Method: UnityEngine.Vector3 easeInOutCubic()

Disassembly:
	0x031C78EC STP X20, X19, [X31 + 0x10]
	0x031C78F0 ADRP X21, 0x1214000
	0x031C78F4 ADRP X20, 0xF58000
	0x031C78F8 LDRB W8, [X21 + 0xFCA]
	0x031C78FC LDR X20, [X20 + 0x368]
	0x031C7900 MOV X19, X0
	0x031C7904 TBNZ X8, 0x0, 0x31C791C
	0x031C7908 ADRP X0, 0xF58000
	0x031C790C LDR X0, [X0 + 0x368]
	0x031C7910 BL 0x1C16CF4
	0x031C7914 MOVZ W8, 0x1
	0x031C7918 STRB W8, [X21 + 0xFCA]
	0x031C791C LDR X9, [X20]
	0x031C7920 ADRP X8, 0xFFFFFFFFFD922000
	0x031C7924 LDR V2, [X19 + 0x1C]
	0x031C7928 LDR V1, [X19 + 0x48]
	0x031C792C LDR V0, [X8 + 0xF2C]
	0x031C7930 LDR X8, [X9 + 0xB8]
	0x031C7934 FADD S3, S2, S2
	0x031C7938 FMOV S2, 1
	0x031C793C FMUL S0, S1, S0
	0x031C7940 FCMP S3, S2
	0x031C7944 STR S3, [X8]
	0x031C7948 B.PL 0x31C7984
	0x031C794C ADRP X8, 0xFFFFFFFFFD923000
	0x031C7950 LDR V4, [X8 + 0x3D0]
	0x031C7954 LDUR V5, [X19 + 0x84]
	0x031C7958 LDR V6, [X19 + 0x8C]
	0x031C795C FMUL S7, S3, S3
	0x031C7960 FMUL S1, S1, S4
	0x031C7964 FMUL S0, S0, S1
	0x031C7968 FADD S1, S0, S2
	0x031C796C FMUL S1, S3, S1
	0x031C7970 FSUB S0, S1, S0
	0x031C7974 FMUL S1, S7, S0
	0x00000000 INVALID
	0x031C797C FMUL S1, S1, S6
	0x031C7980 B 0x31C79CC
	0x031C7984 ADRP X9, 0xFFFFFFFFFD923000
	0x031C7988 LDR V4, [X9 + 0x3D0]
	0x031C798C FMOV S5, -2
	0x031C7990 FADD S3, S3, S5
	0x031C7994 FMUL S1, S1, S4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4021]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4021], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move S1, 1
	022 Move X8, [X8+184]
	023 Add S0, S0, S0
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move [X8], S0
	026 Multiply S1, S0, S0
	027 Multiply S0, S0, S1
	028 Move S1, -2
	029 Add S0, S0, S1
	030 Multiply S1, S0, S0
	031 Multiply S0, S0, S1
	032 Move S1, 2
	033 Add S0, S0, S1
	034 Move [X8], S0
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 Move V2, [X19+140]
	037 Move V3, [X19+96]
	038 Move V4, [X19+104]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 NotImplemented "Instruction INVALID not yet implemented."
	042 Multiply S2, S0, S2
	043 Add V0, V1, V3
	044 Add S2, S4, S2
	045 Move S1, V0.S[1]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0

Method: UnityEngine.Vector3 easeInQuart()

Disassembly:
	0x031C7998 FMUL S0, S0, S1
	0x031C799C FADD S2, S0, S2
	0x031C79A0 FMUL S2, S2, S3
	0x031C79A4 FMUL S1, S3, S3
	0x031C79A8 FADD S0, S0, S2
	0x031C79AC FMOV S4, 2
	0x031C79B0 FMUL S0, S1, S0
	0x031C79B4 FADD S1, S0, S4
	0x031C79B8 STR S1, [X8]
	0x031C79BC LDUR V0, [X19 + 0x84]
	0x031C79C0 LDR V2, [X19 + 0x8C]
	0x00000000 INVALID
	0x031C79C8 FMUL S1, S1, S2
	0x031C79CC LDR V2, [X19 + 0x60]
	0x031C79D0 LDR V3, [X19 + 0x68]
	0x031C79D4 LDP X20, X19, [X31 + 0x10]
	0x031C79D8 FADD V0.2S, V0.2S, V2.2S
	0x031C79DC FADD S2, S1, S3
	0x031C79E0 MOV S1, V0.S[1]
	0x031C79E4 LDP X30, X21, [X31], #0x20
	0x031C79E8 RET
	0x031C79EC STR D12, [X31 - 0x50]!
	0x031C79F0 STP D11, D10, [X31 + 0x10]
	0x031C79F4 STP D9, D8, [X31 + 0x20]
	0x031C79F8 STP X30, X21, [X31 + 0x30]
	0x031C79FC STP X20, X19, [X31 + 0x40]
	0x031C7A00 ADRP X21, 0x1214000
	0x031C7A04 ADRP X20, 0xF2E000
	0x031C7A08 LDRB W8, [X21 + 0xFCB]
	0x031C7A0C LDR X20, [X20 + 0x5A8]
	0x031C7A10 MOV X19, X0
	0x031C7A14 TBNZ X8, 0x0, 0x31C7A2C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4022]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4022], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move X8, [X8+184]
	022 Multiply S1, S0, S0
	023 Multiply S1, S0, S1
	024 Multiply S0, S0, S1
	025 Move [X8], S0
	026 Move V1, [X19+120]
	027 Move V2, [X19+128]
	028 Move V3, [X19+96]
	029 Move V4, [X19+104]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 NotImplemented "Instruction INVALID not yet implemented."
	033 Multiply S2, S0, S2
	034 Add V0, V1, V3
	035 Add S2, S2, S4
	036 Move S1, V0.S[1]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Return X0

Method: UnityEngine.Vector3 easeOutQuart()

Disassembly:
	0x031C7A18 ADRP X0, 0xF2E000
	0x031C7A1C LDR X0, [X0 + 0x5A8]
	0x031C7A20 BL 0x1C16CF4
	0x031C7A24 MOVZ W8, 0x1
	0x031C7A28 STRB W8, [X21 + 0xFCB]
	0x031C7A2C LDR X0, [X20]
	0x031C7A30 LDR V12, [X19 + 0x60]
	0x031C7A34 LDR V11, [X19 + 0x6C]
	0x031C7A38 LDR V9, [X19 + 0x1C]
	0x031C7A3C LDR W8, [X0 + 0xE0]
	0x031C7A40 LDP S10, S8, [X19 + 0x48]
	0x031C7A44 CBNZ W8, 0x31C7A4C
	0x031C7A48 BL 0x1C16DFC
	0x031C7A4C MOV V0.16B, V12.16B
	0x031C7A50 MOV V1.16B, V11.16B
	0x031C7A54 MOV V2.16B, V9.16B
	0x031C7A58 MOV V3.16B, V10.16B
	0x031C7A5C MOV V4.16B, V8.16B
	0x031C7A60 MOV X0, X31
	0x031C7A64 BL 0x31B448C
	0x031C7A68 LDR V5, [X19 + 0x64]
	0x031C7A6C LDR V1, [X19 + 0x70]
	0x031C7A70 LDR V2, [X19 + 0x1C]
	0x031C7A74 LDP S3, S4, [X19 + 0x48]
	0x031C7A78 MOV V8.16B, V0.16B
	0x031C7A7C MOV V0.16B, V5.16B
	0x031C7A80 MOV X0, X31
	0x031C7A84 BL 0x31B448C
	0x031C7A88 LDR V5, [X19 + 0x68]
	0x031C7A8C LDR V1, [X19 + 0x74]
	0x031C7A90 LDR V2, [X19 + 0x1C]
	0x031C7A94 LDP S3, S4, [X19 + 0x48]
	0x031C7A98 MOV V9.16B, V0.16B
	0x031C7A9C MOV V0.16B, V5.16B
	0x031C7AA0 MOV X0, X31
	0x031C7AA4 BL 0x31B448C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4023]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4023], W8
	019 Move V0, [X19+28]
	020 Move X8, [X20]
	021 Move S1, -1
	022 Add S0, S0, S1
	023 Multiply S2, S0, S0
	024 Move X8, [X8+184]
	025 Multiply S2, S0, S2
	026 Multiply S0, S0, S2
	027 Add S0, S0, S1
	028 NotImplemented "Instruction FNEG not yet implemented."
	029 Move [X8], S1
	030 Move V1, [X19+120]
	031 Move V2, [X19+128]
	032 Move V3, [X19+96]
	033 Move V4, [X19+104]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 NotImplemented "Instruction INVALID not yet implemented."
	037 Multiply S2, S0, S2
	038 Subtract V0, V3, V1
	039 Subtract S2, S4, S2
	040 Move S1, V0.S[1]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0

Method: UnityEngine.Vector3 easeInOutQuart()

Disassembly:
	0x031C7AA8 MOV V2.16B, V0.16B
	0x031C7AAC MOV V0.16B, V8.16B
	0x031C7AB0 MOV V1.16B, V9.16B
	0x031C7AB4 LDP X20, X19, [X31 + 0x40]
	0x031C7AB8 LDP X30, X21, [X31 + 0x30]
	0x031C7ABC LDP D9, D8, [X31 + 0x20]
	0x031C7AC0 LDP D11, D10, [X31 + 0x10]
	0x031C7AC4 LDR V12, [X31], #0x50
	0x031C7AC8 RET
	0x031C7ACC STR D12, [X31 - 0x50]!
	0x031C7AD0 STP D11, D10, [X31 + 0x10]
	0x031C7AD4 STP D9, D8, [X31 + 0x20]
	0x031C7AD8 STP X30, X21, [X31 + 0x30]
	0x031C7ADC STP X20, X19, [X31 + 0x40]
	0x031C7AE0 ADRP X21, 0x1214000
	0x031C7AE4 ADRP X20, 0xF2E000
	0x031C7AE8 LDRB W8, [X21 + 0xFCC]
	0x031C7AEC LDR X20, [X20 + 0x5A8]
	0x031C7AF0 MOV X19, X0
	0x031C7AF4 TBNZ X8, 0x0, 0x31C7B0C
	0x031C7AF8 ADRP X0, 0xF2E000
	0x031C7AFC LDR X0, [X0 + 0x5A8]
	0x031C7B00 BL 0x1C16CF4
	0x031C7B04 MOVZ W8, 0x1
	0x031C7B08 STRB W8, [X21 + 0xFCC]
	0x031C7B0C LDR X0, [X20]
	0x031C7B10 LDR V12, [X19 + 0x60]
	0x031C7B14 LDR V11, [X19 + 0x6C]
	0x031C7B18 LDR V9, [X19 + 0x1C]
	0x031C7B1C LDR W8, [X0 + 0xE0]
	0x031C7B20 LDP S10, S8, [X19 + 0x48]
	0x031C7B24 CBNZ W8, 0x31C7B2C
	0x031C7B28 BL 0x1C16DFC
	0x031C7B2C MOV V0.16B, V12.16B
	0x031C7B30 MOV V1.16B, V11.16B
	0x031C7B34 MOV V2.16B, V9.16B
	0x031C7B38 MOV V3.16B, V10.16B
	0x031C7B3C MOV V4.16B, V8.16B
	0x031C7B40 MOV X0, X31
	0x031C7B44 BL 0x31B456C
	0x031C7B48 LDR V5, [X19 + 0x64]
	0x031C7B4C LDR V1, [X19 + 0x70]
	0x031C7B50 LDR V2, [X19 + 0x1C]
	0x031C7B54 LDP S3, S4, [X19 + 0x48]
	0x031C7B58 MOV V8.16B, V0.16B
	0x031C7B5C MOV V0.16B, V5.16B
	0x031C7B60 MOV X0, X31
	0x031C7B64 BL 0x31B456C
	0x031C7B68 LDR V5, [X19 + 0x68]
	0x031C7B6C LDR V1, [X19 + 0x74]
	0x031C7B70 LDR V2, [X19 + 0x1C]
	0x031C7B74 LDP S3, S4, [X19 + 0x48]
	0x031C7B78 MOV V9.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4024]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4024], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move S1, 1
	022 Move X8, [X8+184]
	023 Add S0, S0, S0
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move [X8], S0
	026 Multiply S1, S0, S0
	027 Multiply S1, S0, S1
	028 Multiply S0, S0, S1
	029 Move [X8], S0
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 Move V2, [X19+140]
	032 Move V3, [X19+96]
	033 Move V4, [X19+104]
	034 NotImplemented "Instruction INVALID not yet implemented."
	035 Multiply S2, S0, S2
	036 Add V0, V1, V3
	037 Add S2, S4, S2
	038 Move S1, -2
	039 Add S0, S0, S1
	040 Move [X8], S0
	041 Multiply S2, S0, S0
	042 NotImplemented "Instruction LDUR not yet implemented."
	043 Move V4, [X19+140]
	044 Multiply S2, S0, S2
	045 Move V5, [X19+96]
	046 Move V6, [X19+104]
	047 Multiply S0, S0, S2
	048 Add S0, S0, S1
	049 NotImplemented "Instruction INVALID not yet implemented."
	050 Multiply S2, S0, S4
	051 Subtract V0, V5, V1
	052 Subtract S2, S6, S2
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move S1, V0.S[1]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return X0

Method: UnityEngine.Vector3 easeInQuint()

Disassembly:
	0x031C7B7C MOV V0.16B, V5.16B
	0x031C7B80 MOV X0, X31
	0x031C7B84 BL 0x31B456C
	0x031C7B88 MOV V2.16B, V0.16B
	0x031C7B8C MOV V0.16B, V8.16B
	0x031C7B90 MOV V1.16B, V9.16B
	0x031C7B94 LDP X20, X19, [X31 + 0x40]
	0x031C7B98 LDP X30, X21, [X31 + 0x30]
	0x031C7B9C LDP D9, D8, [X31 + 0x20]
	0x031C7BA0 LDP D11, D10, [X31 + 0x10]
	0x031C7BA4 LDR V12, [X31], #0x50
	0x031C7BA8 RET
	0x031C7BAC STR D12, [X31 - 0x50]!
	0x031C7BB0 STP D11, D10, [X31 + 0x10]
	0x031C7BB4 STP D9, D8, [X31 + 0x20]
	0x031C7BB8 STP X30, X21, [X31 + 0x30]
	0x031C7BBC STP X20, X19, [X31 + 0x40]
	0x031C7BC0 ADRP X21, 0x1214000
	0x031C7BC4 ADRP X20, 0xF2E000
	0x031C7BC8 LDRB W8, [X21 + 0xFCD]
	0x031C7BCC LDR X20, [X20 + 0x5A8]
	0x031C7BD0 MOV X19, X0
	0x031C7BD4 TBNZ X8, 0x0, 0x31C7BEC
	0x031C7BD8 ADRP X0, 0xF2E000
	0x031C7BDC LDR X0, [X0 + 0x5A8]
	0x031C7BE0 BL 0x1C16CF4
	0x031C7BE4 MOVZ W8, 0x1
	0x031C7BE8 STRB W8, [X21 + 0xFCD]
	0x031C7BEC LDR X0, [X20]
	0x031C7BF0 LDR V12, [X19 + 0x60]
	0x031C7BF4 LDR V11, [X19 + 0x6C]
	0x031C7BF8 LDR V9, [X19 + 0x1C]
	0x031C7BFC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4025]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4025], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move X8, [X8+184]
	022 Multiply S1, S0, S0
	023 Multiply S1, S0, S1
	024 Multiply S1, S0, S1
	025 Multiply S0, S0, S1
	026 Move [X8], S0
	027 Move V1, [X19+120]
	028 Move V2, [X19+128]
	029 Move V3, [X19+96]
	030 Move V4, [X19+104]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 NotImplemented "Instruction INVALID not yet implemented."
	034 Multiply S2, S0, S2
	035 Add V0, V1, V3
	036 Add S2, S4, S2
	037 Move S1, V0.S[1]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return X0

Method: UnityEngine.Vector3 easeOutQuint()

Disassembly:
	0x031C7C00 LDP S10, S8, [X19 + 0x48]
	0x031C7C04 CBNZ W8, 0x31C7C0C
	0x031C7C08 BL 0x1C16DFC
	0x031C7C0C MOV V0.16B, V12.16B
	0x031C7C10 MOV V1.16B, V11.16B
	0x031C7C14 MOV V2.16B, V9.16B
	0x031C7C18 MOV V3.16B, V10.16B
	0x031C7C1C MOV V4.16B, V8.16B
	0x031C7C20 MOV X0, X31
	0x031C7C24 BL 0x31B4640
	0x031C7C28 LDR V5, [X19 + 0x64]
	0x031C7C2C LDR V1, [X19 + 0x70]
	0x031C7C30 LDR V2, [X19 + 0x1C]
	0x031C7C34 LDP S3, S4, [X19 + 0x48]
	0x031C7C38 MOV V8.16B, V0.16B
	0x031C7C3C MOV V0.16B, V5.16B
	0x031C7C40 MOV X0, X31
	0x031C7C44 BL 0x31B4640
	0x031C7C48 LDR V5, [X19 + 0x68]
	0x031C7C4C LDR V1, [X19 + 0x74]
	0x031C7C50 LDR V2, [X19 + 0x1C]
	0x031C7C54 LDP S3, S4, [X19 + 0x48]
	0x031C7C58 MOV V9.16B, V0.16B
	0x031C7C5C MOV V0.16B, V5.16B
	0x031C7C60 MOV X0, X31
	0x031C7C64 BL 0x31B4640
	0x031C7C68 MOV V2.16B, V0.16B
	0x031C7C6C MOV V0.16B, V8.16B
	0x031C7C70 MOV V1.16B, V9.16B
	0x031C7C74 LDP X20, X19, [X31 + 0x40]
	0x031C7C78 LDP X30, X21, [X31 + 0x30]
	0x031C7C7C LDP D9, D8, [X31 + 0x20]
	0x031C7C80 LDP D11, D10, [X31 + 0x10]
	0x031C7C84 LDR V12, [X31], #0x50
	0x031C7C88 RET
	0x031C7C8C STR S0, [X0 + 0x48]
	0x031C7C90 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4026]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4026], W8
	019 Move V0, [X19+28]
	020 Move X8, [X20]
	021 Move S1, -1
	022 Move S2, 1
	023 Add S0, S0, S1
	024 Multiply S1, S0, S0
	025 Move X8, [X8+184]
	026 Multiply S1, S0, S1
	027 Multiply S1, S0, S1
	028 Multiply S0, S0, S1
	029 Add S0, S0, S2
	030 Move [X8], S0
	031 Move V1, [X19+120]
	032 Move V2, [X19+128]
	033 Move V3, [X19+96]
	034 Move V4, [X19+104]
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 NotImplemented "Instruction INVALID not yet implemented."
	038 Multiply S2, S0, S2
	039 Add V0, V3, V1
	040 Add S2, S4, S2
	041 Move S1, V0.S[1]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0

Method: UnityEngine.Vector3 easeInOutQuint()

Disassembly:
	0x031C7C94 STR S0, [X0 + 0x4C]
	0x031C7C98 RET
	0x031C7C9C STR S0, [X0 + 0x50]
	0x031C7CA0 RET
	0x031C7CA4 STP X30, X21, [X31 - 0x20]!
	0x031C7CA8 STP X20, X19, [X31 + 0x10]
	0x031C7CAC ADRP X21, 0x1214000
	0x031C7CB0 LDRB W8, [X21 + 0xFCE]
	0x031C7CB4 MOV X20, X1
	0x031C7CB8 MOV X19, X0
	0x031C7CBC TBNZ X8, 0x0, 0x31C7CE0
	0x031C7CC0 ADRP X0, 0xF58000
	0x031C7CC4 LDR X0, [X0 + 0x6A0]
	0x031C7CC8 BL 0x1C16CF4
	0x031C7CCC ADRP X0, 0xF58000
	0x031C7CD0 LDR X0, [X0 + 0xAD0]
	0x031C7CD4 BL 0x1C16CF4
	0x031C7CD8 MOVZ W8, 0x1
	0x031C7CDC STRB W8, [X21 + 0xFCE]
	0x031C7CE0 LDR X8, [X19 + 0xE8]
	0x031C7CE4 CBZ X8, 0x31C7D30
	0x031C7CE8 ADRP X9, 0xF58000
	0x031C7CEC LDR X9, [X9 + 0x6A0]
	0x031C7CF0 STR X20, [X8 + 0x58]
	0x031C7CF4 ADRP X20, 0xF58000
	0x031C7CF8 LDR X0, [X9]
	0x031C7CFC LDR X20, [X20 + 0xAD0]
	0x031C7D00 BL 0x1C16F10
	0x031C7D04 LDR X2, [X20]
	0x031C7D08 MOV X1, X19
	0x031C7D0C MOV X20, X0
	0x031C7D10 BL 0x31BFE64
	0x031C7D14 MOVZ W8, 0x26
	0x031C7D18 STR X20, [X19 + 0xA0]
	0x031C7D1C STR W8, [X19 + 0x94]
	0x031C7D20 MOV X0, X19
	0x031C7D24 LDP X20, X19, [X31 + 0x10]
	0x031C7D28 LDP X30, X21, [X31], #0x20
	0x031C7D2C RET
	0x031C7D30 BL 0x1C16F20
	0x031C7D34 LDRB W8, [X0 + 0x15]
	0x031C7D38 STP S0, S1, [X0 + 0x6C]
	0x031C7D3C STR S2, [X0 + 0x74]
	0x031C7D40 CBZ W8, 0x31C7D60
	0x031C7D44 LDR V3, [X0 + 0x60]
	0x031C7D48 LDR V4, [X0 + 0x68]
	0x031C7D4C MOV V0.S[1], V1.S[0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4027]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4027], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move S1, 1
	022 Move X8, [X8+184]
	023 Add S0, S0, S0
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move [X8], S0
	026 Multiply S1, S0, S0
	027 Multiply S1, S0, S1
	028 Multiply S1, S0, S1
	029 Multiply S0, S0, S1
	030 Move S1, -2
	031 Add S0, S0, S1
	032 Multiply S1, S0, S0
	033 Multiply S1, S0, S1
	034 Multiply S1, S0, S1
	035 Multiply S0, S0, S1
	036 Move S1, 2
	037 Add S0, S0, S1
	038 Move [X8], S0
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 Move V2, [X19+140]
	041 Move V3, [X19+96]
	042 Move V4, [X19+104]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 NotImplemented "Instruction INVALID not yet implemented."
	046 Multiply S2, S0, S2
	047 Add V0, V1, V3
	048 Add S2, S4, S2
	049 Move S1, V0.S[1]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0

Method: UnityEngine.Vector3 easeInSine()

Disassembly:
	0x031C7D50 FSUB V0.2S, V0.2S, V3.2S
	0x031C7D54 FSUB S1, S2, S4
	0x031C7D58 STR D0, [X0 + 0x78]
	0x031C7D5C STR S1, [X0 + 0x80]
	0x031C7D60 RET
	0x031C7D64 STR X30, [X31 - 0x10]!
	0x031C7D68 LDR X8, [X0 + 0xE8]
	0x031C7D6C CBZ X8, 0x31C7D7C
	0x031C7D70 STR X1, [X8 + 0x10]
	0x031C7D74 LDR X30, [X31], #0x10
	0x031C7D78 RET
	0x031C7D7C BL 0x1C16F20
	0x031C7D80 STR D10, [X31 - 0x40]!
	0x031C7D84 STP D9, D8, [X31 + 0x10]
	0x031C7D88 STP X30, X21, [X31 + 0x20]
	0x031C7D8C STP X20, X19, [X31 + 0x30]
	0x031C7D90 ADRP X21, 0x1214000
	0x031C7D94 ADRP X20, 0xF2C000
	0x031C7D98 LDRB W8, [X21 + 0xFCF]
	0x031C7D9C LDR X20, [X20 + 0x598]
	0x031C7DA0 MOV V8.16B, V2.16B
	0x031C7DA4 MOV V9.16B, V1.16B
	0x031C7DA8 MOV V10.16B, V0.16B
	0x031C7DAC MOV X19, X0
	0x031C7DB0 TBNZ X8, 0x0, 0x31C7DC8
	0x031C7DB4 ADRP X0, 0xF2C000
	0x031C7DB8 LDR X0, [X0 + 0x598]
	0x031C7DBC BL 0x1C16CF4
	0x031C7DC0 MOVZ W8, 0x1
	0x031C7DC4 STRB W8, [X21 + 0xFCF]
	0x031C7DC8 LDR X0, [X20]
	0x031C7DCC LDR X20, [X19 + 0x58]
	0x031C7DD0 LDR W8, [X0 + 0xE0]
	0x031C7DD4 CBNZ W8, 0x31C7DDC
	0x031C7DD8 BL 0x1C16DFC
	0x031C7DDC MOV X0, X20
	0x031C7DE0 MOV X1, X31
	0x031C7DE4 BL 0x3C38948
	0x031C7DE8 TBZ X0, 0x0, 0x31C7DF4
	0x031C7DEC MOV X0, X19
	0x031C7DF0 BL 0x31C24C4
	0x031C7DF4 LDP S0, S1, [X19 + 0x6C]
	0x031C7DF8 LDR V2, [X19 + 0x74]
	0x031C7DFC FMOV S3, 0.5
	0x031C7E00 STP S10, S9, [X19 + 0x60]
	0x031C7E04 FSUB S0, S0, S10
	0x031C7E08 FSUB S1, S1, S9
	0x031C7E0C FSUB S2, S2, S8

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1215000
	007 Move X20, 0xF2F000
	008 Move W8, [X21+4028]
	009 Move X20, [X20+1448]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF59000
	016 Move X0, [X0+872]
	017 Call 0x1C17CF4
	018 Move X0, 0xF2F000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+4028], W8
	023 Move X0, [X20]
	024 Move X21, 0xF59000
	025 Move V8, [X19+28]
	026 Move W8, [X0+224]
	027 Move X21, [X21+872]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move V0, [X8+8]
	034 Multiply S0, S8, S0
	035 Call 0x3EB2BD0
	036 Move X8, [X21]
	037 NotImplemented "Instruction FNEG not yet implemented."
	038 Move X30, [X31+16]
	039 Move X21, [X31+24]
	040 Move X8, [X8+184]
	041 Move [X8], S1
	042 Move V1, [X19+120]
	043 Move V2, [X19+128]
	044 Move V3, [X19+96]
	045 Move V4, [X19+104]
	046 NotImplemented "Instruction INVALID not yet implemented."
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Multiply S0, S0, S2
	050 Subtract V1, V1, V5
	051 Subtract S2, S2, S0
	052 Add V0, V3, V1
	053 Add S2, S4, S2
	054 Move S1, V0.S[1]
	055 Move V8, [X31+48]
	056 Return X0

Method: UnityEngine.Vector3 easeOutSine()

Disassembly:
	0x031C7E10 STP S0, S1, [X19 + 0x78]
	0x031C7E14 FMUL S0, S0, S3
	0x031C7E18 FMUL S1, S1, S3
	0x031C7E1C FMUL S3, S2, S3
	0x031C7E20 STR S8, [X19 + 0x68]
	0x031C7E24 STP S2, S0, [X19 + 0x80]
	0x031C7E28 STP S1, S3, [X19 + 0x88]
	0x031C7E2C MOV X0, X19
	0x031C7E30 LDP X20, X19, [X31 + 0x30]
	0x031C7E34 LDP X30, X21, [X31 + 0x20]
	0x031C7E38 LDP D9, D8, [X31 + 0x10]
	0x031C7E3C LDR V10, [X31], #0x40
	0x031C7E40 RET
	0x031C7E44 FMOV S1, W31
	0x031C7E48 FMOV S2, W31
	0x031C7E4C B 0x31C7D80
	0x031C7E50 STP S0, S1, [X0 + 0x78]
	0x031C7E54 STR S2, [X0 + 0x80]
	0x031C7E58 RET
	0x031C7E5C AND W8, W1, 0x1
	0x031C7E60 STRB W8, [X0 + 0x15]
	0x031C7E64 RET
	0x031C7E68 STR W1, [X0 + 0x34]
	0x031C7E6C STR W2, [X0 + 0x3C]
	0x031C7E70 RET
	0x031C7E74 STR S0, [X0 + 0x20]
	0x031C7E78 RET
	0x031C7E7C LDR V1, [X0 + 0x20]
	0x031C7E80 LDR V2, [X0 + 0x28]
	0x031C7E84 STR S0, [X0 + 0x28]
	0x031C7E88 FDIV S1, S1, S2
	0x031C7E8C FMUL S1, S1, S0
	0x031C7E90 STR S1, [X0 + 0x20]
	0x031C7E94 RET
	0x031C7E98 STP X30, X19, [X31 - 0x10]!
	0x031C7E9C LDRB W8, [X0 + 0x15]
	0x031C7EA0 MOV X19, X0
	0x031C7EA4 STR S0, [X0 + 0x2C]
	0x031C7EA8 CBZ W8, 0x31C7EB4
	0x031C7EAC MOV X0, X19
	0x031C7EB0 BL 0x31C2700
	0x031C7EB4 MOV X0, X19
	0x031C7EB8 LDP X30, X19, [X31], #0x10
	0x031C7EBC RET
	0x031C7EC0 CMP W1, 0x2

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1215000
	007 Move X20, 0xF2F000
	008 Move W8, [X21+4029]
	009 Move X20, [X20+1448]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0xF59000
	016 Move X0, [X0+872]
	017 Call 0x1C17CF4
	018 Move X0, 0xF2F000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+4029], W8
	023 Move X0, [X20]
	024 Move X21, 0xF59000
	025 Move V8, [X19+28]
	026 Move W8, [X0+224]
	027 Move X21, [X21+872]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move V0, [X8+8]
	034 Multiply S0, S8, S0
	035 Call 0x3EB2B70
	036 Move X8, [X21]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], S0
	041 Move V1, [X19+120]
	042 Move V2, [X19+128]
	043 Move V3, [X19+96]
	044 Move V4, [X19+104]
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 NotImplemented "Instruction INVALID not yet implemented."
	048 Multiply S2, S0, S2
	049 Add V0, V1, V3
	050 Add S2, S4, S2
	051 Move S1, V0.S[1]
	052 Move V8, [X31+48]
	053 Return X0

Method: UnityEngine.Vector3 easeInOutSine()

Disassembly:
	0x031C7EC4 STR W1, [X0 + 0x38]
	0x031C7EC8 B.GE 0x31C7ED0
	0x031C7ECC TBZ X1, 0x1F, 0x31C7EE4
	0x031C7ED0 LDR W8, [X0 + 0x98]
	0x031C7ED4 CMP W8, 0x23
	0x031C7ED8 B.NE 0x31C7EE4
	0x031C7EDC MOVZ W8, 0x24
	0x031C7EE0 STR W8, [X0 + 0x98]
	0x031C7EE4 LDR W8, [X0 + 0x90]
	0x031C7EE8 CMP W8, 0x21
	0x031C7EEC B.EQ 0x31C7EF8
	0x031C7EF0 CMP W8, 0x1B
	0x031C7EF4 B.NE 0x31C7F00
	0x031C7EF8 MOVZ W8, 0x1
	0x031C7EFC STRB W8, [X0 + 0x18]
	0x031C7F00 RET
	0x031C7F04 AND W8, W1, 0x1
	0x031C7F08 STRB W8, [X0 + 0x18]
	0x031C7F0C RET
	0x031C7F10 STR W1, [X0 + 0x98]
	0x031C7F14 RET
	0x031C7F18 AND W8, W1, 0x1
	0x031C7F1C STRB W8, [X0 + 0x11]
	0x031C7F20 STRB W31, [X0 + 0x14]
	0x031C7F24 RET
	0x031C7F28 AND W8, W1, 0x1
	0x031C7F2C STRB W8, [X0 + 0x11]
	0x031C7F30 STRB W31, [X0 + 0x14]
	0x031C7F34 RET
	0x031C7F38 AND W8, W1, 0x1
	0x031C7F3C STRB W8, [X0 + 0x12]
	0x031C7F40 STRB W31, [X0 + 0x14]
	0x031C7F44 RET
	0x031C7F48 AND W8, W1, 0x1
	0x031C7F4C STRB W8, [X0 + 0x13]
	0x031C7F50 STRB W31, [X0 + 0x14]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4030]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4030], W8
	019 Move X8, -40751104
	020 Move V0, [X19+28]
	021 Move V1, [X8+3916]
	022 Multiply S0, S0, S1
	023 Call 0x3EB2BD0
	024 Move X8, [X20]
	025 Move S1, -1
	026 Add S0, S0, S1
	027 NotImplemented "Instruction FNEG not yet implemented."
	028 Move X8, [X8+184]
	029 Move [X8], S1
	030 NotImplemented "Instruction LDUR not yet implemented."
	031 Move V2, [X19+140]
	032 Move V3, [X19+96]
	033 Move V4, [X19+104]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 NotImplemented "Instruction INVALID not yet implemented."
	037 Multiply S2, S0, S2
	038 Subtract V0, V3, V1
	039 Subtract S2, S4, S2
	040 Move S1, V0.S[1]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0

Method: UnityEngine.Vector3 easeInExpo()

Disassembly:
	0x031C7F54 RET
	0x031C7F58 MOVZ W8, 0x24
	0x031C7F5C STR W8, [X0 + 0x98]
	0x031C7F60 STR W1, [X0 + 0x38]
	0x031C7F64 RET
	0x031C7F68 MOVZ W8, 0x23
	0x031C7F6C STR W8, [X0 + 0x98]
	0x031C7F70 RET
	0x031C7F74 LDR W8, [X0 + 0x38]
	0x031C7F78 MOVZ W9, 0x24
	0x031C7F7C STR W9, [X0 + 0x98]
	0x031C7F80 CBZ W8, 0x31C7F88
	0x031C7F84 RET
	0x031C7F88 MOVN W8, 0x0
	0x031C7F8C STR W8, [X0 + 0x38]
	0x031C7F90 RET
	0x031C7F94 STR W1, [X0 + 0x38]
	0x031C7F98 RET
	0x031C7F9C LDR W8, [X0 + 0x38]
	0x031C7FA0 MOVZ W9, 0x25
	0x031C7FA4 STR W9, [X0 + 0x98]
	0x031C7FA8 CBZ W8, 0x31C7FB0
	0x031C7FAC RET
	0x031C7FB0 MOVN W8, 0x0
	0x031C7FB4 STR W8, [X0 + 0x38]
	0x031C7FB8 RET
	0x031C7FBC MOVZ W8, 0x25
	0x031C7FC0 UBFM W9, W1, 0x1F, 0x1E
	0x031C7FC4 ADDS W31, W1, 0x1
	0x031C7FC8 STR W8, [X0 + 0x98]
	0x031C7FCC CSINV W8, W9, W31, NE
	0x031C7FD0 STR W8, [X0 + 0x38]
	0x031C7FD4 RET
	0x031C7FD8 STR X30, [X31 - 0x10]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4031]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4031], W8
	019 Move V0, [X19+28]
	020 Move S1, -1
	021 Add S0, S0, S1
	022 Move S1, 10
	023 Multiply S0, S0, S1
	024 Call 0x3EB2B90
	025 Move X8, [X20]
	026 Move X8, [X8+184]
	027 Move [X8], S0
	028 Move V1, [X19+120]
	029 Move V2, [X19+128]
	030 Move V3, [X19+96]
	031 Move V4, [X19+104]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 NotImplemented "Instruction INVALID not yet implemented."
	035 Multiply S2, S0, S2
	036 Add V0, V1, V3
	037 Add S2, S4, S2
	038 Move S1, V0.S[1]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0

Method: UnityEngine.Vector3 easeOutExpo()

Disassembly:
	0x031C7FDC LDR X8, [X0 + 0xE8]
	0x031C7FE0 CBZ X8, 0x31C7FF8
	0x031C7FE4 STR X1, [X8 + 0xC0]
	0x031C7FE8 MOVZ W8, 0x1
	0x031C7FEC STRB W8, [X0 + 0x16]
	0x031C7FF0 LDR X30, [X31], #0x10
	0x031C7FF4 RET
	0x031C7FF8 BL 0x1C16F20
	0x031C7FFC STR X30, [X31 - 0x10]!
	0x031C8000 LDR X8, [X0 + 0xE8]
	0x031C8004 CBZ X8, 0x31C801C
	0x031C8008 STR X1, [X8 + 0xC8]
	0x031C800C MOVZ W8, 0x1
	0x031C8010 STRB W8, [X0 + 0x16]
	0x031C8014 LDR X30, [X31], #0x10
	0x031C8018 RET
	0x031C801C BL 0x1C16F20
	0x031C8020 STR X30, [X31 - 0x10]!
	0x031C8024 LDR X8, [X0 + 0xE8]
	0x031C8028 CBZ X8, 0x31C8048
	0x031C802C MOVZ W9, 0x1
	0x031C8030 STR X1, [X8 + 0xC8]
	0x031C8034 STRB W9, [X0 + 0x16]
	0x031C8038 CBZ X2, 0x31C8040
	0x031C803C STR X2, [X8 + 0xD0]
	0x031C8040 LDR X30, [X31], #0x10
	0x031C8044 RET
	0x031C8048 BL 0x1C16F20
	0x031C804C STR X30, [X31 - 0x10]!
	0x031C8050 LDR X8, [X0 + 0xE8]
	0x031C8054 CBZ X8, 0x31C806C
	0x031C8058 STR X1, [X8 + 0xD0]
	0x031C805C MOVZ W8, 0x1
	0x031C8060 STRB W8, [X0 + 0x16]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1215000
	006 Move X20, 0xF59000
	007 Move W8, [X21+4032]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF59000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4032], W8
	019 Move V0, [X19+28]
	020 Move S1, -10
	021 Multiply S0, S0, S1
	022 Call 0x3EB2B90
	023 Move X8, [X20]
	024 Move S1, 1
	025 Subtract S0, S1, S0
	026 Move X8, [X8+184]
	027 Move [X8], S0
	028 Move V1, [X19+120]
	029 Move V2, [X19+128]
	030 Move V3, [X19+96]
	031 Move V4, [X19+104]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 NotImplemented "Instruction INVALID not yet implemented."
	035 Multiply S2, S0, S2
	036 Add V0, V1, V3
	037 Add S2, S4, S2
	038 Move S1, V0.S[1]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0

Method: UnityEngine.Vector3 easeInOutExpo()

Disassembly:
	0x031C8064 LDR X30, [X31], #0x10
	0x031C8068 RET
	0x031C806C BL 0x1C16F20
	0x031C8070 STR X30, [X31 - 0x10]!
	0x031C8074 LDR X8, [X0 + 0xE8]
	0x031C8078 CBZ X8, 0x31C8090
	0x031C807C STR X1, [X8 + 0x80]
	0x031C8080 MOVZ W8, 0x1
	0x031C8084 STRB W8, [X0 + 0x9C]
	0x031C8088 LDR X30, [X31], #0x10
	0x031C808C RET
	0x031C8090 BL 0x1C16F20
	0x031C8094 STR X30, [X31 - 0x10]!
	0x031C8098 LDR X8, [X0 + 0xE8]
	0x031C809C CBZ X8, 0x31C80B4
	0x031C80A0 STR X1, [X8 + 0x88]
	0x031C80A4 MOVZ W8, 0x1
	0x031C80A8 STRB W8, [X0 + 0x9C]
	0x031C80AC LDR X30, [X31], #0x10
	0x031C80B0 RET
	0x031C80B4 BL 0x1C16F20
	0x031C80B8 STR X30, [X31 - 0x10]!
	0x031C80BC LDR X8, [X0 + 0xE8]
	0x031C80C0 CBZ X8, 0x31C80D8
	0x031C80C4 STR X1, [X8 + 0x90]
	0x031C80C8 MOVZ W8, 0x1
	0x031C80CC STRB W8, [X0 + 0x9C]
	0x031C80D0 LDR X30, [X31], #0x10
	0x031C80D4 RET
	0x031C80D8 BL 0x1C16F20
	0x031C80DC STR X30, [X31 - 0x10]!
	0x031C80E0 LDR X8, [X0 + 0xE8]
	0x031C80E4 CBZ X8, 0x31C80FC
	0x031C80E8 STR X1, [X8 + 0x98]
	0x031C80EC MOVZ W8, 0x1
	0x031C80F0 STRB W8, [X0 + 0x9C]
	0x031C80F4 LDR X30, [X31], #0x10
	0x031C80F8 RET
	0x031C80FC BL 0x1C16F20
	0x031C8100 STR X30, [X31 - 0x10]!
	0x031C8104 LDR X8, [X0 + 0xE8]
	0x031C8108 CBZ X8, 0x31C8120
	0x031C810C STR X1, [X8 + 0xA0]
	0x031C8110 MOVZ W8, 0x1
	0x031C8114 STRB W8, [X0 + 0x9C]
	0x031C8118 LDR X30, [X31], #0x10
	0x031C811C RET
	0x031C8120 BL 0x1C16F20
	0x031C8124 STR X30, [X31 - 0x10]!
	0x031C8128 LDR X8, [X0 + 0xE8]
	0x031C812C CBZ X8, 0x31C8144

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x1214000
	008 Move X20, 0xF58000
	009 Move W8, [X21+4033]
	010 Move X20, [X20+872]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xF58000
	017 Move X0, [X0+872]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+4033], W8
	021 Move X8, [X20]
	022 Move V0, [X19+28]
	023 Move S1, 1
	024 Move X8, [X8+184]
	025 Add S0, S0, S0
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 Move [X8], S0
	028 NotImplemented "Instruction LDUR not yet implemented."
	029 Move V9, [X19+140]
	030 Move S1, -1
	031 Add S0, S0, S1
	032 Move S1, 10
	033 Multiply S0, S0, S1
	034 Call 0x3EB2B90
	035 Move S1, -1
	036 Add S0, S0, S1
	037 Move [X8], S0
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 Move V9, [X19+140]
	040 Move S1, -10
	041 Multiply S0, S0, S1
	042 Call 0x3EB2B90
	043 Move S1, 2
	044 Subtract S0, S1, S0
	045 NotImplemented "Instruction INVALID not yet implemented."
	046 Multiply S1, S0, S9
	047 Move V0, [X19+96]
	048 Move V3, [X19+104]
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+16]
	052 Move X21, [X31+24]
	053 Add V0, V2, V0
	054 Add S2, S1, S3
	055 Move S1, V0.S[1]
	056 Move D9, [X31+48]
	057 Move D8, [X31+56]
	058 Return X0

Method: UnityEngine.Vector3 easeInCirc()

Disassembly:
	0x031C8130 STR X1, [X8 + 0xB0]
	0x031C8134 MOVZ W8, 0x1
	0x031C8138 STRB W8, [X0 + 0x9C]
	0x031C813C LDR X30, [X31], #0x10
	0x031C8140 RET
	0x031C8144 BL 0x1C16F20
	0x031C8148 STR X30, [X31 - 0x10]!
	0x031C814C LDR X8, [X0 + 0xE8]
	0x031C8150 CBZ X8, 0x31C8168
	0x031C8154 STR X1, [X8 + 0xB8]
	0x031C8158 MOVZ W8, 0x1
	0x031C815C STRB W8, [X0 + 0x9C]
	0x031C8160 LDR X30, [X31], #0x10
	0x031C8164 RET
	0x031C8168 BL 0x1C16F20
	0x031C816C STR X30, [X31 - 0x10]!
	0x031C8170 LDR X8, [X0 + 0xE8]
	0x031C8174 CBZ X8, 0x31C818C
	0x031C8178 STR X1, [X8 + 0xB0]
	0x031C817C MOVZ W8, 0x1
	0x031C8180 STRB W8, [X0 + 0x9C]
	0x031C8184 LDR X30, [X31], #0x10
	0x031C8188 RET
	0x031C818C BL 0x1C16F20
	0x031C8190 STR X30, [X31 - 0x10]!
	0x031C8194 LDR X8, [X0 + 0xE8]
	0x031C8198 CBZ X8, 0x31C81B0
	0x031C819C STR X1, [X8 + 0xB8]
	0x031C81A0 MOVZ W8, 0x1
	0x031C81A4 STRB W8, [X0 + 0x9C]
	0x031C81A8 LDR X30, [X31], #0x10
	0x031C81AC RET
	0x031C81B0 BL 0x1C16F20
	0x031C81B4 STR X30, [X31 - 0x10]!
	0x031C81B8 LDR X8, [X0 + 0xE8]
	0x031C81BC CBZ X8, 0x31C81DC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1214000
	006 Move X20, 0xF58000
	007 Move W8, [X21+4034]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF58000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4034], W8
	019 Move V0, [X19+28]
	020 Move X8, [X20]
	021 Move S1, 1
	022 Move S2, -1
	023 Multiply S0, S0, S0
	024 Move X8, [X8+184]
	025 Subtract S0, S1, S0
	026 NotImplemented "Instruction FSQRT not yet implemented."
	027 Add S0, S0, S2
	028 NotImplemented "Instruction FNEG not yet implemented."
	029 Move [X8], S1
	030 Move V1, [X19+120]
	031 Move V2, [X19+128]
	032 Move V3, [X19+96]
	033 Move V4, [X19+104]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 NotImplemented "Instruction INVALID not yet implemented."
	037 Multiply S2, S0, S2
	038 Subtract V0, V3, V1
	039 Subtract S2, S4, S2
	040 Move S1, V0.S[1]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0

Method: UnityEngine.Vector3 easeOutCirc()

Disassembly:
	0x031C81C0 MOVZ W9, 0x1
	0x031C81C4 STR X1, [X8 + 0x90]
	0x031C81C8 STRB W9, [X0 + 0x9C]
	0x031C81CC CBZ X2, 0x31C81D4
	0x031C81D0 STR X2, [X8 + 0xD8]
	0x031C81D4 LDR X30, [X31], #0x10
	0x031C81D8 RET
	0x031C81DC BL 0x1C16F20
	0x031C81E0 STR X30, [X31 - 0x10]!
	0x031C81E4 LDR X8, [X0 + 0xE8]
	0x031C81E8 CBZ X8, 0x31C8208
	0x031C81EC MOVZ W9, 0x1
	0x031C81F0 STR X1, [X8 + 0xA8]
	0x031C81F4 STRB W9, [X0 + 0x9C]
	0x031C81F8 CBZ X2, 0x31C8200
	0x031C81FC STR X2, [X8 + 0xD8]
	0x031C8200 LDR X30, [X31], #0x10
	0x031C8204 RET
	0x031C8208 BL 0x1C16F20
	0x031C820C STR X30, [X31 - 0x10]!
	0x031C8210 LDR X8, [X0 + 0xE8]
	0x031C8214 CBZ X8, 0x31C8234
	0x031C8218 MOVZ W9, 0x1
	0x031C821C STR X1, [X8 + 0x98]
	0x031C8220 STRB W9, [X0 + 0x9C]
	0x031C8224 CBZ X2, 0x31C822C
	0x031C8228 STR X2, [X8 + 0xD8]
	0x031C822C LDR X30, [X31], #0x10
	0x031C8230 RET
	0x031C8234 BL 0x1C16F20
	0x031C8238 STR X30, [X31 - 0x10]!
	0x031C823C LDR X8, [X0 + 0xE8]
	0x031C8240 CBZ X8, 0x31C8260
	0x031C8244 MOVZ W9, 0x1
	0x031C8248 STR X1, [X8 + 0xA0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1214000
	006 Move X20, 0xF58000
	007 Move W8, [X21+4035]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF58000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4035], W8
	019 Move V0, [X19+28]
	020 Move X8, [X20]
	021 Move S1, -1
	022 Move S2, 1
	023 Add S0, S0, S1
	024 Move X8, [X8+184]
	025 Multiply S0, S0, S0
	026 Subtract S0, S2, S0
	027 NotImplemented "Instruction FSQRT not yet implemented."
	028 Move [X8], S0
	029 Move V1, [X19+120]
	030 Move V2, [X19+128]
	031 Move V3, [X19+96]
	032 Move V4, [X19+104]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 NotImplemented "Instruction INVALID not yet implemented."
	036 Multiply S2, S0, S2
	037 Add V0, V1, V3
	038 Add S2, S4, S2
	039 Move S1, V0.S[1]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0

Method: UnityEngine.Vector3 easeInOutCirc()

Disassembly:
	0x031C824C STRB W9, [X0 + 0x9C]
	0x031C8250 CBZ X2, 0x31C8258
	0x031C8254 STR X2, [X8 + 0xD8]
	0x031C8258 LDR X30, [X31], #0x10
	0x031C825C RET
	0x031C8260 BL 0x1C16F20
	0x031C8264 STR X30, [X31 - 0x10]!
	0x031C8268 LDR X8, [X0 + 0xE8]
	0x031C826C CBZ X8, 0x31C827C
	0x031C8270 STR X1, [X8 + 0xD8]
	0x031C8274 LDR X30, [X31], #0x10
	0x031C8278 RET
	0x031C827C BL 0x1C16F20
	0x031C8280 STR X30, [X31 - 0x30]!
	0x031C8284 STP X22, X21, [X31 + 0x10]
	0x031C8288 STP X20, X19, [X31 + 0x20]
	0x031C828C ADRP X21, 0x1213000
	0x031C8290 LDRB W8, [X21 + 0xFD0]
	0x031C8294 MOV W19, W1
	0x031C8298 MOV X20, X0
	0x031C829C TBNZ X8, 0x0, 0x31C82B4
	0x031C82A0 ADRP X0, 0xF57000
	0x031C82A4 LDR X0, [X0 + 0x3F0]
	0x031C82A8 BL 0x1C16CF4
	0x031C82AC MOVZ W8, 0x1
	0x031C82B0 STRB W8, [X21 + 0xFD0]
	0x031C82B4 LDR W8, [X20 + 0x90]
	0x031C82B8 LDR X22, [X20 + 0xE8]
	0x031C82BC AND W8, W8, 0xFFFFFFFE
	0x031C82C0 CMP W8, 0x6
	0x031C82C4 B.NE 0x31C830C
	0x031C82C8 CBZ X22, 0x31C8338
	0x031C82CC LDR X8, [X22 + 0x48]
	0x031C82D0 CBNZ X8, 0x31C82FC
	0x031C82D4 ADRP X8, 0xF57000
	0x031C82D8 LDR X8, [X8 + 0x3F0]
	0x031C82DC LDR X0, [X8]
	0x031C82E0 BL 0x1C16F10
	0x031C82E4 MOV X1, X31
	0x031C82E8 MOV X21, X0
	0x031C82EC BL 0x31B8978
	0x031C82F0 STR X21, [X22 + 0x48]
	0x031C82F4 LDR X22, [X20 + 0xE8]
	0x031C82F8 CBZ X22, 0x31C8338
	0x031C82FC LDR X8, [X22 + 0x48]
	0x031C8300 CBZ X8, 0x31C8338
	0x031C8304 ADD X8, X8, 0x1C
	0x031C8308 B 0x31C831C
	0x031C830C CBZ X22, 0x31C8338
	0x031C8310 LDR X8, [X22 + 0x50]
	0x031C8314 CBZ X8, 0x31C8338
	0x031C8318 ADD X8, X8, 0x2C
	0x031C831C AND W9, W19, 0x1
	0x031C8320 MOV X0, X20
	0x031C8324 LDP X20, X19, [X31 + 0x20]
	0x031C8328 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1214000
	006 Move X20, 0xF58000
	007 Move W8, [X21+4036]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF58000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4036], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move X8, [X8+184]
	022 Add S1, S0, S0
	023 Move S0, 1
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move [X8], S1
	026 Multiply S1, S1, S1
	027 Subtract S0, S0, S1
	028 Move S2, -1
	029 NotImplemented "Instruction FSQRT not yet implemented."
	030 Add S0, S0, S2
	031 NotImplemented "Instruction FNEG not yet implemented."
	032 Move [X8], S1
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 Move V2, [X19+140]
	035 Move V3, [X19+96]
	036 Move V4, [X19+104]
	037 NotImplemented "Instruction INVALID not yet implemented."
	038 Multiply S2, S0, S2
	039 Subtract V0, V3, V1
	040 Subtract S2, S4, S2
	041 Move S2, -2
	042 Add S1, S1, S2
	043 Multiply S1, S1, S1
	044 Subtract S1, S0, S1
	045 NotImplemented "Instruction FSQRT not yet implemented."
	046 Add S0, S1, S0
	047 Move [X8], S0
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 Move V2, [X19+140]
	050 Move V3, [X19+96]
	051 Move V4, [X19+104]
	052 NotImplemented "Instruction INVALID not yet implemented."
	053 Multiply S2, S0, S2
	054 Add V0, V1, V3
	055 Add S2, S4, S2
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move S1, V0.S[1]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0

Method: UnityEngine.Vector3 easeInBounce()

Disassembly:
	0x031C832C STRB W9, [X8]
	0x031C8330 LDR X30, [X31], #0x30
	0x031C8334 RET
	0x031C8338 BL 0x1C16F20
	0x031C833C STP X30, X19, [X31 - 0x10]!
	0x031C8340 MOV W19, W1
	0x031C8344 AND W1, W1, 0x1
	0x031C8348 BL 0x31C8280
	0x031C834C LDR W9, [X0 + 0x90]
	0x031C8350 LDR X8, [X0 + 0xE8]
	0x031C8354 AND W9, W9, 0xFFFFFFFE
	0x031C8358 CMP W9, 0x6
	0x031C835C B.NE 0x31C8374
	0x031C8360 CBZ X8, 0x31C8394
	0x031C8364 LDR X8, [X8 + 0x48]
	0x031C8368 CBZ X8, 0x31C8394
	0x031C836C ADD X8, X8, 0x1D
	0x031C8370 B 0x31C8384
	0x031C8374 CBZ X8, 0x31C8394
	0x031C8378 LDR X8, [X8 + 0x50]
	0x031C837C CBZ X8, 0x31C8394
	0x031C8380 ADD X8, X8, 0x2D
	0x031C8384 AND W9, W19, 0x1
	0x031C8388 STRB W9, [X8]
	0x031C838C LDP X30, X19, [X31], #0x10
	0x031C8390 RET
	0x031C8394 BL 0x1C16F20
	0x031C8398 STR X30, [X31 - 0x10]!
	0x031C839C LDR X8, [X0 + 0xE8]
	0x031C83A0 CBZ X8, 0x31C83B0
	0x031C83A4 STR X1, [X8 + 0x78]
	0x031C83A8 LDR X30, [X31], #0x10
	0x031C83AC RET
	0x031C83B0 BL 0x1C16F20
	0x031C83B4 STP D11, D10, [X31 - 0x40]!
	0x031C83B8 STP D9, D8, [X31 + 0x10]
	0x031C83BC STP X30, X21, [X31 + 0x20]
	0x031C83C0 STP X20, X19, [X31 + 0x30]
	0x031C83C4 ADRP X21, 0x1213000
	0x031C83C8 ADRP X20, 0xF57000
	0x031C83CC LDRB W8, [X21 + 0xFD1]
	0x031C83D0 LDR X20, [X20 + 0x5C0]
	0x031C83D4 MOV V8.16B, V3.16B
	0x031C83D8 MOV V9.16B, V2.16B
	0x031C83DC MOV V10.16B, V1.16B
	0x031C83E0 MOV V11.16B, V0.16B
	0x031C83E4 MOV X19, X0
	0x031C83E8 TBNZ X8, 0x0, 0x31C8400
	0x031C83EC ADRP X0, 0xF57000
	0x031C83F0 LDR X0, [X0 + 0x5C0]
	0x031C83F4 BL 0x1C16CF4
	0x031C83F8 MOVZ W8, 0x1
	0x031C83FC STRB W8, [X21 + 0xFD1]
	0x031C8400 LDR X0, [X20]
	0x031C8404 LDR X21, [X19 + 0xE8]
	0x031C8408 BL 0x1C16F10
	0x031C840C MOV V0.16B, V11.16B
	0x031C8410 MOV V1.16B, V10.16B
	0x031C8414 MOV V2.16B, V9.16B
	0x031C8418 MOV V3.16B, V8.16B
	0x031C841C MOV X1, X31
	0x031C8420 MOV X20, X0
	0x031C8424 BL 0x31BA630
	0x031C8428 CBZ X21, 0x31C8448
	0x031C842C STR X20, [X21 + 0x78]
	0x031C8430 MOV X0, X19
	0x031C8434 LDP X20, X19, [X31 + 0x30]
	0x031C8438 LDP X30, X21, [X31 + 0x20]
	0x031C843C LDP D9, D8, [X31 + 0x10]
	0x031C8440 LDP D11, D10, [X31], #0x40
	0x031C8444 RET
	0x031C8448 BL 0x1C16F20
	0x031C844C STR X30, [X31 - 0x10]!
	0x031C8450 LDR X8, [X0 + 0xE8]
	0x031C8454 CBZ X8, 0x31C8464

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x1214000
	014 Move X20, 0xF58000
	015 Move X21, 0xF2E000
	016 Move W8, [X22+4037]
	017 Move X20, [X20+872]
	018 Move X21, [X21+1448]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0xF58000
	025 Move X0, [X0+872]
	026 Call 0x1C17CF4
	027 Move X0, 0xF2E000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X22+4037], W8
	032 Move X8, [X20]
	033 Move V0, [X19+28]
	034 Move S1, 1
	035 Move X8, [X8+184]
	036 Subtract S9, S1, S0
	037 Move [X8], S9
	038 Move X0, [X21]
	039 Move V8, [X19+120]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move S0, W31
	045 Move V1, V8
	046 Move V2, V9
	047 Move X0, X31
	048 Call LeanTween.easeOutBounce, V0, V1, V2
	049 Move X8, [X20]
	050 Move V9, [X19+124]
	051 Move V13, [X19+96]
	052 Move V10, V0
	053 Move X8, [X8+184]
	054 Move S0, W31
	055 Move V1, V9
	056 Move X0, X31
	057 Move V2, [X8]
	058 Call LeanTween.easeOutBounce, V0, V1, V2
	059 Move X8, [X20]
	060 Move V11, [X19+128]
	061 Move V14, [X19+100]
	062 Move V12, V0
	063 Move X8, [X8+184]
	064 Move S0, W31
	065 Move V1, V11
	066 Move X0, X31
	067 Move V2, [X8]
	068 Call LeanTween.easeOutBounce, V0, V1, V2
	069 Move V2, [X19+104]
	070 Subtract S1, S8, S10
	071 Add S3, S1, S13
	072 Subtract S1, S9, S12
	073 Subtract S0, S11, S0
	074 Move X20, [X31+80]
	075 Move X19, [X31+88]
	076 Move X22, [X31+64]
	077 Move X21, [X31+72]
	078 Move X30, [X31+56]
	079 Move D9, [X31+40]
	080 Move D8, [X31+48]
	081 Move D11, [X31+24]
	082 Move D10, [X31+32]
	083 Move D13, [X31+8]
	084 Move D12, [X31+16]
	085 Add S1, S1, S14
	086 Add S2, S0, S2
	087 Move V0, V3
	088 Move V14, [X31+96]
	089 Return X0

Method: UnityEngine.Vector3 easeOutBounce()

Disassembly:
	0x031C8458 STR X1, [X8 + 0x48]
	0x031C845C LDR X30, [X31], #0x10
	0x031C8460 RET
	0x031C8464 BL 0x1C16F20
	0x031C8468 STR X30, [X31 - 0x10]!
	0x031C846C LDR X8, [X0 + 0xE8]
	0x031C8470 CBZ X8, 0x31C8484
	0x031C8474 STP S0, S1, [X8 + 0x18]
	0x031C8478 STR S2, [X8 + 0x20]
	0x031C847C LDR X30, [X31], #0x10
	0x031C8480 RET
	0x031C8484 BL 0x1C16F20
	0x031C8488 AND W8, W1, 0x1
	0x031C848C STRB W8, [X0 + 0x54]
	0x031C8490 RET
	0x031C8494 STR X30, [X31 - 0x10]!
	0x031C8498 LDR X8, [X0 + 0xE8]
	0x031C849C CBZ X8, 0x31C84AC
	0x031C84A0 STR X1, [X8 + 0xD0]
	0x031C84A4 LDR X30, [X31], #0x10
	0x031C84A8 RET
	0x031C84AC BL 0x1C16F20
	0x031C84B0 AND W8, W1, 0x1
	0x031C84B4 STRB W8, [X0 + 0x19]
	0x031C84B8 RET
	0x031C84BC STR X1, [X0 + 0xC0]
	0x031C84C0 RET
	0x031C84C4 STR X1, [X0 + 0xE0]
	0x031C84C8 RET
	0x031C84CC STR X30, [X31 - 0x10]!
	0x031C84D0 LDR X8, [X0 + 0xE0]
	0x031C84D4 CBZ X8, 0x31C84F0
	0x031C84D8 LDR V1, [X8 + 0x18]
	0x031C84DC SCVTF S1, S1
	0x031C84E0 FDIV S0, S1, S0
	0x031C84E4 STR S0, [X0 + 0x28]
	0x031C84E8 LDR X30, [X31], #0x10
	0x031C84EC RET
	0x031C84F0 BL 0x1C16F20
	0x031C84F4 STR X30, [X31 - 0x10]!
	0x031C84F8 LDR X8, [X0 + 0xE8]
	0x031C84FC CBZ X8, 0x31C850C
	0x031C8500 STR X1, [X8 + 0xE0]
	0x031C8504 LDR X30, [X31], #0x10
	0x031C8508 RET
	0x031C850C BL 0x1C16F20
	0x031C8510 SUB X31, X31, 0x40
	0x031C8514 STR D8, [X31 + 0x10]
	0x031C8518 STR X30, [X31 + 0x18]
	0x031C851C STP X22, X21, [X31 + 0x20]
	0x031C8520 STP X20, X19, [X31 + 0x30]
	0x031C8524 ADRP X20, 0x1213000
	0x031C8528 LDRB W8, [X20 + 0xFD2]
	0x031C852C MOV V8.16B, V0.16B
	0x031C8530 MOV X19, X0
	0x031C8534 STR S0, [X31 + 0xC]
	0x031C8538 TBNZ X8, 0x0, 0x31C8580
	0x031C853C ADRP X0, 0xF2B000
	0x031C8540 LDR X0, [X0 + 0xA28]
	0x031C8544 BL 0x1C16CF4
	0x031C8548 ADRP X0, 0xF57000
	0x031C854C LDR X0, [X0 + 0x3F0]
	0x031C8550 BL 0x1C16CF4
	0x031C8554 ADRP X0, 0xF57000
	0x031C8558 LDR X0, [X0 + 0x418]
	0x031C855C BL 0x1C16CF4
	0x031C8560 ADRP X0, 0xF57000
	0x031C8564 LDR X0, [X0 + 0xAE0]
	0x031C8568 BL 0x1C16CF4
	0x031C856C ADRP X0, 0xF57000
	0x031C8570 LDR X0, [X0 + 0xAE8]
	0x031C8574 BL 0x1C16CF4
	0x031C8578 MOVZ W8, 0x1
	0x031C857C STRB W8, [X20 + 0xFD2]
	0x031C8580 LDR V0, [X19 + 0x40]
	0x031C8584 FMOV S1, -1
	0x031C8588 FCMP S0, S1
	0x031C858C B.EQ 0x31C8600
	0x031C8590 FMOV S1, 1
	0x031C8594 FCMP S0, S1
	0x031C8598 B.EQ 0x31C8600
	0x031C859C ADD X0, X31, 0xC
	0x031C85A0 MOV X1, X31
	0x031C85A4 BL 0x338FE24
	0x031C85A8 ADRP X8, 0xF57000
	0x031C85AC LDR X8, [X8 + 0xAE8]
	0x031C85B0 ADRP X9, 0xF57000
	0x031C85B4 LDR X9, [X9 + 0xAE0]
	0x031C85B8 MOV X1, X0
	0x031C85BC LDR X8, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1214000
	006 Move X20, 0xF58000
	007 Move W8, [X21+4038]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF58000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4038], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move S2, -1.75
	022 Move S4, 2.75
	023 Move X8, [X8+184]
	024 Move S3, 1
	025 Move [X8], S0
	026 Move V1, [X19+72]
	027 Multiply S2, S1, S2
	028 NotImplemented "Instruction FDIV not yet implemented."
	029 Add S2, S2, S3
	030 NotImplemented "Instruction FCMP not yet implemented."
	031 NotImplemented "Instruction FDIV not yet implemented."
	032 NotImplemented "Instruction FDIV not yet implemented."
	033 Multiply S1, S0, S1
	034 Multiply S0, S0, S1
	035 Move S5, -0.75
	036 Multiply S5, S1, S5
	037 NotImplemented "Instruction FDIV not yet implemented."
	038 Add S3, S4, S3
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Add S2, S2, S3
	041 Move S3, -0.5
	042 Move W9, 0x40F20000
	043 Multiply S2, S2, S3
	044 Move S3, W9
	045 Add S0, S0, S2
	046 Multiply S2, S0, S3
	047 Move S4, 1
	048 Move S5, -0.25
	049 Multiply S0, S0, S2
	050 Multiply S5, S1, S5
	051 Add S0, S0, S4
	052 Move S2, -0.25
	053 Move S4, 2.75
	054 Multiply S2, S1, S2
	055 NotImplemented "Instruction FDIV not yet implemented."
	056 Move S2, 1
	057 Add S4, S4, S2
	058 NotImplemented "Instruction FCMP not yet implemented."
	059 Add S3, S4, S3
	060 Move S4, -0.5
	061 Move W9, 0x40F20000
	062 Move W10, 0xBD800000
	063 Add S3, S4, S2
	064 Move S4, -0.5
	065 Move W9, 0x40F20000
	066 Move W10, 0xBC800000
	067 Multiply S3, S3, S4
	068 Move S4, W9
	069 Add S0, S0, S3
	070 Multiply S3, S0, S4
	071 Move S5, W10
	072 Multiply S0, S0, S3
	073 Multiply S5, S1, S5
	074 Add S0, S0, S2
	075 Multiply S1, S1, S5
	076 Add S0, S0, S1
	077 Move [X8], S0
	078 Move V1, [X19+120]
	079 Move V2, [X19+128]
	080 Move V3, [X19+96]
	081 Move V4, [X19+104]
	082 Move X20, [X31+16]
	083 Move X19, [X31+24]
	084 NotImplemented "Instruction INVALID not yet implemented."
	085 Multiply S2, S2, S0
	086 Add V0, V1, V3
	087 Add S2, S2, S4
	088 Move S1, V0.S[1]
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Return X0

Method: UnityEngine.Vector3 easeInOutBounce()

Disassembly:
	0x031C85C0 MOV X3, X31
	0x031C85C4 LDR X2, [X9]
	0x031C85C8 MOV X0, X8
	0x031C85CC BL 0x32274B8
	0x031C85D0 ADRP X8, 0xF2B000
	0x031C85D4 LDR X8, [X8 + 0xA28]
	0x031C85D8 MOV X20, X0
	0x031C85DC LDR X8, [X8]
	0x031C85E0 LDR W9, [X8 + 0xE0]
	0x031C85E4 CBNZ W9, 0x31C85F0
	0x031C85E8 MOV X0, X8
	0x031C85EC BL 0x1C16DFC
	0x031C85F0 MOV X0, X20
	0x031C85F4 MOV X1, X31
	0x031C85F8 BL 0x3C06A04
	0x031C85FC B 0x31C86A4
	0x031C8600 FCMP S0, S8
	0x031C8604 B.EQ 0x31C86A4
	0x031C8608 LDRB W8, [X19 + 0x15]
	0x031C860C CBZ W8, 0x31C8618
	0x031C8610 STR S8, [X19 + 0x40]
	0x031C8614 B 0x31C86A4
	0x031C8618 LDR X22, [X19 + 0xE8]
	0x031C861C CBZ X22, 0x31C86C0
	0x031C8620 LDR X8, [X22 + 0x48]
	0x031C8624 CBZ X8, 0x31C8664
	0x031C8628 LDR X0, [X8 + 0x10]
	0x031C862C MOV X1, X31
	0x031C8630 BL 0x31B84D0
	0x031C8634 ADRP X8, 0xF57000
	0x031C8638 LDR X8, [X8 + 0x3F0]
	0x031C863C MOV X20, X0
	0x031C8640 LDR X8, [X8]
	0x031C8644 MOV X0, X8
	0x031C8648 BL 0x1C16F10
	0x031C864C MOV X1, X20
	0x031C8650 MOV X2, X31
	0x031C8654 MOV X21, X0
	0x031C8658 BL 0x31B09E0
	0x031C865C STR X21, [X22 + 0x48]
	0x031C8660 B 0x31C86A4
	0x031C8664 LDR X8, [X22 + 0x50]
	0x031C8668 CBZ X8, 0x31C86A4
	0x031C866C LDR X0, [X8 + 0x18]
	0x031C8670 MOV X1, X31
	0x031C8674 BL 0x31B84D0
	0x031C8678 ADRP X8, 0xF57000
	0x031C867C LDR X8, [X8 + 0x418]
	0x031C8680 MOV X20, X0
	0x031C8684 LDR X8, [X8]
	0x031C8688 MOV X0, X8
	0x031C868C BL 0x1C16F10
	0x031C8690 MOV X1, X20
	0x031C8694 MOV X2, X31
	0x031C8698 MOV X21, X0
	0x031C869C BL 0x31B0FA0
	0x031C86A0 STR X21, [X22 + 0x50]
	0x031C86A4 MOV X0, X19
	0x031C86A8 LDP X20, X19, [X31 + 0x30]
	0x031C86AC LDP X22, X21, [X31 + 0x20]
	0x031C86B0 LDR X30, [X31 + 0x18]
	0x031C86B4 LDR V8, [X31 + 0x10]
	0x031C86B8 ADD X31, X31, 0x40
	0x031C86BC RET
	0x031C86C0 BL 0x1C16F20
	0x031C86C4 AND W8, W1, 0x1
	0x031C86C8 STRB W8, [X0 + 0x1A]
	0x031C86CC RET
	0x031C86D0 STP X30, X19, [X31 - 0x10]!
	0x031C86D4 MOV X19, X0
	0x031C86D8 LDR X0, [X0 + 0x58]
	0x031C86DC CBZ X0, 0x31C86F4
	0x031C86E0 MOV X1, X31
	0x031C86E4 BL 0x3C3F58C
	0x031C86E8 STR S0, [X19 + 0x60]
	0x031C86EC LDP X30, X19, [X31], #0x10
	0x031C86F0 RET
	0x031C86F4 BL 0x1C16F20
	0x031C86F8 STP D9, D8, [X31 - 0x30]!
	0x031C86FC STR X30, [X31 + 0x10]
	0x031C8700 STP X20, X19, [X31 + 0x20]
	0x031C8704 LDR X8, [X0 + 0xA0]
	0x031C8708 CBZ X8, 0x31C8770
	0x031C870C MOV X20, X0
	0x031C8710 LDR X19, [X0 + 0x58]
	0x031C8714 LDR X9, [X8 + 0x18]
	0x031C8718 LDR X0, [X8 + 0x40]
	0x031C871C LDR X1, [X8 + 0x28]
	0x031C8720 BLR X9
	0x031C8724 LDR X0, [X20 + 0x58]
	0x031C8728 CBZ X0, 0x31C8770
	0x031C872C MOV X1, X31
	0x031C8730 MOV V8.16B, V0.16B
	0x031C8734 BL 0x3C3F58C
	0x031C8738 LDR X0, [X20 + 0x58]
	0x031C873C CBZ X0, 0x31C8770
	0x031C8740 MOV X1, X31
	0x031C8744 MOV V9.16B, V1.16B
	0x031C8748 BL 0x3C3F58C
	0x031C874C CBZ X19, 0x31C8770
	0x031C8750 MOV X0, X19
	0x031C8754 LDP X20, X19, [X31 + 0x20]
	0x031C8758 LDR X30, [X31 + 0x10]
	0x031C875C MOV V0.16B, V8.16B
	0x031C8760 MOV V1.16B, V9.16B
	0x031C8764 MOV X1, X31
	0x031C8768 LDP D9, D8, [X31], #0x30
	0x031C876C B 0x3C3F62C
	0x031C8770 BL 0x1C16F20
	0x031C8774 STP X30, X19, [X31 - 0x10]!
	0x031C8778 MOV X19, X0
	0x031C877C LDR X0, [X0 + 0x58]
	0x031C8780 CBZ X0, 0x31C8798
	0x031C8784 MOV X1, X31
	0x031C8788 BL 0x3C3F58C
	0x031C878C STR S1, [X19 + 0x60]
	0x031C8790 LDP X30, X19, [X31], #0x10
	0x031C8794 RET
	0x031C8798 BL 0x1C16F20

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x1214000
	012 Move X20, 0xF58000
	013 Move W8, [X21+4039]
	014 Move X20, [X20+872]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0xF58000
	021 Move X0, [X0+872]
	022 Call 0x1C17CF4
	023 Move X0, 0xF2E000
	024 Move X0, [X0+1448]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+4039], W8
	028 Move X9, [X20]
	029 Move V0, [X19+28]
	030 Move X8, 0xF2E000
	031 Move X8, [X8+1448]
	032 Move X9, [X9+184]
	033 Add S8, S0, S0
	034 Move S0, 1
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move [X9], S8
	037 Move X0, [X8]
	038 Move V9, [X19+120]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move S0, W31
	044 Move V1, V9
	045 Move V2, V8
	046 Move X0, X31
	047 Call LeanTween.easeInBounce, V0, V1, V2
	048 Move X8, [X20]
	049 Move V1, [X19+124]
	050 Move V10, [X19+96]
	051 Move V8, V0
	052 Move X8, [X8+184]
	053 Move S0, W31
	054 Move X0, X31
	055 Move V2, [X8]
	056 Call LeanTween.easeInBounce, V0, V1, V2
	057 Move X8, [X20]
	058 Move V1, [X19+128]
	059 Move V11, [X19+100]
	060 Move V9, V0
	061 Move X8, [X8+184]
	062 Move S0, W31
	063 Move X0, X31
	064 Move V2, [X8]
	065 Call LeanTween.easeInBounce, V0, V1, V2
	066 Move V3, [X19+104]
	067 Move V2, V0
	068 Move S4, 0.5
	069 Multiply S0, S8, S4
	070 Multiply S1, S9, S4
	071 Multiply S2, S2, S4
	072 Add S0, S0, S10
	073 Add S1, S1, S11
	074 Add S2, S2, S3
	075 Move S0, -1
	076 Add S8, S8, S0
	077 Move [X9], S8
	078 Move X0, [X8]
	079 Move V9, [X19+120]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move S0, W31
	085 Move V1, V9
	086 Move V2, V8
	087 Move X0, X31
	088 Call LeanTween.easeOutBounce, V0, V1, V2
	089 Move X8, [X20]
	090 Move V1, [X19+124]
	091 Move V10, [X19+132]
	092 Move V11, [X19+96]
	093 Move X8, [X8+184]
	094 Move V8, V0
	095 Move S0, W31
	096 Move X0, X31
	097 Move V2, [X8]
	098 Call LeanTween.easeOutBounce, V0, V1, V2
	099 Move X8, [X20]
	100 Move V1, [X19+128]
	101 Move V12, [X19+136]
	102 Move V13, [X19+100]
	103 Move X8, [X8+184]
	104 Move V9, V0
	105 Move S0, W31
	106 Move X0, X31
	107 Move V2, [X8]
	108 Call LeanTween.easeOutBounce, V0, V1, V2
	109 Move V3, [X19+140]
	110 Move V4, [X19+104]
	111 Move V2, V0
	112 Move S5, 0.5
	113 Multiply S0, S8, S5
	114 Multiply S1, S9, S5
	115 Multiply S2, S2, S5
	116 Add S0, S0, S10
	117 Add S1, S1, S12
	118 Add S2, S2, S3
	119 Add S0, S0, S11
	120 Add S1, S1, S13
	121 Add S2, S2, S4
	122 Move X20, [X31+64]
	123 Move X19, [X31+72]
	124 Move X30, [X31+48]
	125 Move X21, [X31+56]
	126 Move D9, [X31+32]
	127 Move D8, [X31+40]
	128 Move D11, [X31+16]
	129 Move D10, [X31+24]
	130 Move D13, [X31+80]
	131 Move D12, [X31+88]
	132 Return X0

Method: UnityEngine.Vector3 easeInBack()

Disassembly:
	0x031C879C STP D9, D8, [X31 - 0x30]!
	0x031C87A0 STR X30, [X31 + 0x10]
	0x031C87A4 STP X20, X19, [X31 + 0x20]
	0x031C87A8 LDR X19, [X0 + 0x58]
	0x031C87AC CBZ X19, 0x31C8810
	0x031C87B0 MOV X20, X0
	0x031C87B4 MOV X0, X19
	0x031C87B8 MOV X1, X31
	0x031C87BC BL 0x3C3F58C
	0x031C87C0 LDR X8, [X20 + 0xA0]
	0x031C87C4 CBZ X8, 0x31C8810
	0x031C87C8 LDR X9, [X8 + 0x18]
	0x031C87CC LDR X0, [X8 + 0x40]
	0x031C87D0 LDR X1, [X8 + 0x28]
	0x031C87D4 MOV V8.16B, V0.16B
	0x031C87D8 BLR X9
	0x031C87DC LDR X0, [X20 + 0x58]
	0x031C87E0 CBZ X0, 0x31C8810
	0x031C87E4 MOV X1, X31
	0x031C87E8 MOV V9.16B, V0.16B
	0x031C87EC BL 0x3C3F58C
	0x031C87F0 MOV X0, X19
	0x031C87F4 LDP X20, X19, [X31 + 0x20]
	0x031C87F8 LDR X30, [X31 + 0x10]
	0x031C87FC MOV V0.16B, V8.16B
	0x031C8800 MOV V1.16B, V9.16B
	0x031C8804 MOV X1, X31
	0x031C8808 LDP D9, D8, [X31], #0x30
	0x031C880C B 0x3C3F62C
	0x031C8810 BL 0x1C16F20
	0x031C8814 STP X30, X19, [X31 - 0x10]!
	0x031C8818 MOV X19, X0
	0x031C881C LDR X0, [X0 + 0x58]
	0x031C8820 CBZ X0, 0x31C8838
	0x031C8824 MOV X1, X31
	0x031C8828 BL 0x3C3F58C
	0x031C882C STR S2, [X19 + 0x60]
	0x031C8830 LDP X30, X19, [X31], #0x10
	0x031C8834 RET
	0x031C8838 BL 0x1C16F20
	0x031C883C STP D9, D8, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1214000
	006 Move X20, 0xF58000
	007 Move W8, [X21+4040]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF58000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4040], W8
	019 Move X8, [X20]
	020 Move V0, [X19+28]
	021 Move X9, -40755200
	022 Move V1, [X9+3884]
	023 Move X8, [X8+184]
	024 Move [X8], S0
	025 Move V2, [X19+72]
	026 Move V3, [X19+120]
	027 Move V4, [X19+128]
	028 Multiply S1, S2, S1
	029 Move S2, 1
	030 NotImplemented "Instruction INVALID not yet implemented."
	031 Multiply S4, S0, S4
	032 Add S2, S1, S2
	033 NotImplemented "Instruction INVALID not yet implemented."
	034 Multiply S4, S0, S4
	035 Multiply S0, S0, S2
	036 Move V2, [X19+96]
	037 Subtract S0, S0, S1
	038 Move V1, [X19+104]
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 NotImplemented "Instruction INVALID not yet implemented."
	042 Multiply S4, S0, S4
	043 Add V0, V2, V3
	044 Add S2, S4, S1
	045 Move S1, V0.S[1]
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0

Method: UnityEngine.Vector3 easeOutBack()

Disassembly:
	0x031C8840 STR X30, [X31 + 0x10]
	0x031C8844 STP X20, X19, [X31 + 0x20]
	0x031C8848 LDR X19, [X0 + 0x58]
	0x031C884C CBZ X19, 0x31C88B4
	0x031C8850 MOV X20, X0
	0x031C8854 MOV X0, X19
	0x031C8858 MOV X1, X31
	0x031C885C BL 0x3C3F58C
	0x031C8860 LDR X0, [X20 + 0x58]
	0x031C8864 CBZ X0, 0x31C88B4
	0x031C8868 MOV X1, X31
	0x031C886C MOV V8.16B, V0.16B
	0x031C8870 BL 0x3C3F58C
	0x031C8874 LDR X8, [X20 + 0xA0]
	0x031C8878 CBZ X8, 0x31C88B4
	0x031C887C LDR X9, [X8 + 0x18]
	0x031C8880 LDR X0, [X8 + 0x40]
	0x031C8884 LDR X1, [X8 + 0x28]
	0x031C8888 MOV V9.16B, V1.16B
	0x031C888C BLR X9
	0x031C8890 MOV X0, X19
	0x031C8894 LDP X20, X19, [X31 + 0x20]
	0x031C8898 LDR X30, [X31 + 0x10]
	0x031C889C MOV V2.16B, V0.16B
	0x031C88A0 MOV V0.16B, V8.16B
	0x031C88A4 MOV V1.16B, V9.16B
	0x031C88A8 MOV X1, X31
	0x031C88AC LDP D9, D8, [X31], #0x30
	0x031C88B0 B 0x3C3F62C
	0x031C88B4 BL 0x1C16F20
	0x031C88B8 STP X30, X19, [X31 - 0x10]!
	0x031C88BC MOV X19, X0
	0x031C88C0 LDR X0, [X0 + 0x58]
	0x031C88C4 CBZ X0, 0x31C88DC
	0x031C88C8 MOV X1, X31
	0x031C88CC BL 0x3C3EB78
	0x031C88D0 STR S0, [X19 + 0x60]
	0x031C88D4 LDP X30, X19, [X31], #0x10
	0x031C88D8 RET
	0x031C88DC BL 0x1C16F20
	0x031C88E0 STP D9, D8, [X31 - 0x30]!
	0x031C88E4 STR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1214000
	006 Move X20, 0xF58000
	007 Move W8, [X21+4041]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF58000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4041], W8
	019 Move X8, -40755200
	020 Move V0, [X19+72]
	021 Move V3, [X8+3884]
	022 Move V1, [X19+28]
	023 Move X9, [X20]
	024 Move S2, -1
	025 Move S4, 1
	026 Multiply S0, S0, S3
	027 Add S1, S1, S2
	028 Add S3, S0, S4
	029 Move X8, [X9+184]
	030 Multiply S2, S1, S1
	031 Multiply S1, S3, S1
	032 Add S0, S0, S1
	033 Multiply S0, S2, S0
	034 Add S0, S0, S4
	035 Move [X8], S0
	036 Move V1, [X19+120]
	037 Move V2, [X19+128]
	038 Move V3, [X19+96]
	039 Move V4, [X19+104]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 NotImplemented "Instruction INVALID not yet implemented."
	043 Multiply S2, S0, S2
	044 Add V0, V1, V3
	045 Add S2, S2, S4
	046 Move S1, V0.S[1]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: UnityEngine.Vector3 easeInOutBack()

Disassembly:
	0x031C88E8 STP X20, X19, [X31 + 0x20]
	0x031C88EC LDR X8, [X0 + 0xA0]
	0x031C88F0 CBZ X8, 0x31C8958
	0x031C88F4 MOV X20, X0
	0x031C88F8 LDR X19, [X0 + 0x58]
	0x031C88FC LDR X9, [X8 + 0x18]
	0x031C8900 LDR X0, [X8 + 0x40]
	0x031C8904 LDR X1, [X8 + 0x28]
	0x031C8908 BLR X9
	0x031C890C LDR X0, [X20 + 0x58]
	0x031C8910 CBZ X0, 0x31C8958
	0x031C8914 MOV X1, X31
	0x031C8918 MOV V8.16B, V0.16B
	0x031C891C BL 0x3C3EB78
	0x031C8920 LDR X0, [X20 + 0x58]
	0x031C8924 CBZ X0, 0x31C8958
	0x031C8928 MOV X1, X31
	0x031C892C MOV V9.16B, V1.16B
	0x031C8930 BL 0x3C3EB78
	0x031C8934 CBZ X19, 0x31C8958
	0x031C8938 MOV X0, X19
	0x031C893C LDP X20, X19, [X31 + 0x20]
	0x031C8940 LDR X30, [X31 + 0x10]
	0x031C8944 MOV V0.16B, V8.16B
	0x031C8948 MOV V1.16B, V9.16B
	0x031C894C MOV X1, X31
	0x031C8950 LDP D9, D8, [X31], #0x30
	0x031C8954 B 0x3C3EC04
	0x031C8958 BL 0x1C16F20
	0x031C895C STP X30, X19, [X31 - 0x10]!
	0x031C8960 MOV X19, X0
	0x031C8964 LDR X0, [X0 + 0x58]
	0x031C8968 CBZ X0, 0x31C8980
	0x031C896C MOV X1, X31
	0x031C8970 BL 0x3C3EB78
	0x031C8974 STR S1, [X19 + 0x60]
	0x031C8978 LDP X30, X19, [X31], #0x10
	0x031C897C RET
	0x031C8980 BL 0x1C16F20
	0x031C8984 STP D9, D8, [X31 - 0x30]!
	0x031C8988 STR X30, [X31 + 0x10]
	0x031C898C STP X20, X19, [X31 + 0x20]
	0x031C8990 LDR X19, [X0 + 0x58]
	0x031C8994 CBZ X19, 0x31C89F8
	0x031C8998 MOV X20, X0
	0x031C899C MOV X0, X19
	0x031C89A0 MOV X1, X31
	0x031C89A4 BL 0x3C3EB78
	0x031C89A8 LDR X8, [X20 + 0xA0]
	0x031C89AC CBZ X8, 0x31C89F8
	0x031C89B0 LDR X9, [X8 + 0x18]
	0x031C89B4 LDR X0, [X8 + 0x40]
	0x031C89B8 LDR X1, [X8 + 0x28]
	0x031C89BC MOV V8.16B, V0.16B
	0x031C89C0 BLR X9
	0x031C89C4 LDR X0, [X20 + 0x58]
	0x031C89C8 CBZ X0, 0x31C89F8
	0x031C89CC MOV X1, X31
	0x031C89D0 MOV V9.16B, V0.16B
	0x031C89D4 BL 0x3C3EB78
	0x031C89D8 MOV X0, X19
	0x031C89DC LDP X20, X19, [X31 + 0x20]
	0x031C89E0 LDR X30, [X31 + 0x10]
	0x031C89E4 MOV V0.16B, V8.16B
	0x031C89E8 MOV V1.16B, V9.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1214000
	006 Move X20, 0xF58000
	007 Move W8, [X21+4042]
	008 Move X20, [X20+872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF58000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4042], W8
	019 Move X9, [X20]
	020 Move X8, -40755200
	021 Move V2, [X19+28]
	022 Move V1, [X19+72]
	023 Move V0, [X8+3884]
	024 Move X8, [X9+184]
	025 Add S3, S2, S2
	026 Move S2, 1
	027 Multiply S0, S1, S0
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 Move [X8], S3
	030 Move X8, -40751104
	031 Move V4, [X8+976]
	032 NotImplemented "Instruction LDUR not yet implemented."
	033 Move V6, [X19+140]
	034 Multiply S7, S3, S3
	035 Multiply S1, S1, S4
	036 Multiply S0, S0, S1
	037 Add S1, S0, S2
	038 Multiply S1, S3, S1
	039 Subtract S0, S1, S0
	040 Multiply S1, S7, S0
	041 NotImplemented "Instruction INVALID not yet implemented."
	042 Multiply S1, S1, S6
	043 Move X9, -40751104
	044 Move V4, [X9+976]
	045 Move S5, -2
	046 Add S3, S3, S5
	047 Multiply S1, S1, S4
	048 Multiply S0, S0, S1
	049 Add S2, S0, S2
	050 Multiply S2, S2, S3
	051 Multiply S1, S3, S3
	052 Add S0, S0, S2
	053 Move S4, 2
	054 Multiply S0, S1, S0
	055 Add S1, S0, S4
	056 Move [X8], S1
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 Move V2, [X19+140]
	059 NotImplemented "Instruction INVALID not yet implemented."
	060 Multiply S1, S1, S2
	061 Move V2, [X19+96]
	062 Move V3, [X19+104]
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Add V0, V0, V2
	066 Add S2, S1, S3
	067 Move S1, V0.S[1]
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Return X0

Method: UnityEngine.Vector3 easeInElastic()

Disassembly:
	0x031C89EC MOV X1, X31
	0x031C89F0 LDP D9, D8, [X31], #0x30
	0x031C89F4 B 0x3C3EC04
	0x031C89F8 BL 0x1C16F20
	0x031C89FC STP X30, X19, [X31 - 0x10]!
	0x031C8A00 MOV X19, X0
	0x031C8A04 LDR X0, [X0 + 0x58]
	0x031C8A08 CBZ X0, 0x31C8A20
	0x031C8A0C MOV X1, X31
	0x031C8A10 BL 0x3C3EB78
	0x031C8A14 STR S2, [X19 + 0x60]
	0x031C8A18 LDP X30, X19, [X31], #0x10
	0x031C8A1C RET
	0x031C8A20 BL 0x1C16F20
	0x031C8A24 STP D9, D8, [X31 - 0x30]!
	0x031C8A28 STR X30, [X31 + 0x10]
	0x031C8A2C STP X20, X19, [X31 + 0x20]
	0x031C8A30 LDR X19, [X0 + 0x58]
	0x031C8A34 CBZ X19, 0x31C8A9C
	0x031C8A38 MOV X20, X0
	0x031C8A3C MOV X0, X19
	0x031C8A40 MOV X1, X31
	0x031C8A44 BL 0x3C3EB78
	0x031C8A48 LDR X0, [X20 + 0x58]
	0x031C8A4C CBZ X0, 0x31C8A9C
	0x031C8A50 MOV X1, X31
	0x031C8A54 MOV V8.16B, V0.16B
	0x031C8A58 BL 0x3C3EB78
	0x031C8A5C LDR X8, [X20 + 0xA0]
	0x031C8A60 CBZ X8, 0x31C8A9C
	0x031C8A64 LDR X9, [X8 + 0x18]
	0x031C8A68 LDR X0, [X8 + 0x40]
	0x031C8A6C LDR X1, [X8 + 0x28]
	0x031C8A70 MOV V9.16B, V1.16B
	0x031C8A74 BLR X9
	0x031C8A78 MOV X0, X19
	0x031C8A7C LDP X20, X19, [X31 + 0x20]
	0x031C8A80 LDR X30, [X31 + 0x10]
	0x031C8A84 MOV V2.16B, V0.16B
	0x031C8A88 MOV V0.16B, V8.16B
	0x031C8A8C MOV V1.16B, V9.16B
	0x031C8A90 MOV X1, X31
	0x031C8A94 LDP D9, D8, [X31], #0x30
	0x031C8A98 B 0x3C3EC04
	0x031C8A9C BL 0x1C16F20
	0x031C8AA0 STR X30, [X31 - 0x20]!
	0x031C8AA4 STP X20, X19, [X31 + 0x10]
	0x031C8AA8 ADRP X20, 0x1213000
	0x031C8AAC LDRB W8, [X20 + 0xFD3]
	0x031C8AB0 MOV X19, X0
	0x031C8AB4 TBNZ X8, 0x0, 0x31C8ACC
	0x031C8AB8 ADRP X0, 0xF57000
	0x031C8ABC LDR X0, [X0 + 0x368]
	0x031C8AC0 BL 0x1C16CF4
	0x031C8AC4 MOVZ W8, 0x1
	0x031C8AC8 STRB W8, [X20 + 0xFD3]

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x1214000
	011 Move X20, 0xF2E000
	012 Move W8, [X21+4043]
	013 Move X20, [X20+1448]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF2E000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+4043], W8
	024 Move X0, [X20]
	025 Move V12, [X19+96]
	026 Move V11, [X19+108]
	027 Move V9, [X19+28]
	028 Move W8, [X0+224]
	029 Move S10, [X19+72]
	030 Move S8, [X19+76]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move V0, V12
	035 Move V1, V11
	036 Move V2, V9
	037 Move V3, V10
	038 Move V4, V8
	039 Move X0, X31
	040 Call LeanTween.easeInElastic, V0, V1, V2, V3, V4
	041 Move V5, [X19+100]
	042 Move V1, [X19+112]
	043 Move V2, [X19+28]
	044 Move S3, [X19+72]
	045 Move S4, [X19+76]
	046 Move V8, V0
	047 Move V0, V5
	048 Move X0, X31
	049 Call LeanTween.easeInElastic, V0, V1, V2, V3, V4
	050 Move V5, [X19+104]
	051 Move V1, [X19+116]
	052 Move V2, [X19+28]
	053 Move S3, [X19+72]
	054 Move S4, [X19+76]
	055 Move V9, V0
	056 Move V0, V5
	057 Move X0, X31
	058 Call LeanTween.easeInElastic, V0, V1, V2, V3, V4
	059 Move V2, V0
	060 Move V0, V8
	061 Move V1, V9
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+48]
	065 Move X21, [X31+56]
	066 Move D9, [X31+32]
	067 Move D8, [X31+40]
	068 Move D11, [X31+16]
	069 Move D10, [X31+24]
	070 Move V12, [X31+80]
	071 Return X0

Method: UnityEngine.Vector3 easeOutElastic()

Disassembly:
	0x031C8ACC LDR X8, [X19 + 0xA0]
	0x031C8AD0 CBZ X8, 0x31C8B6C
	0x031C8AD4 LDR X9, [X8 + 0x18]
	0x031C8AD8 LDR X0, [X8 + 0x40]
	0x031C8ADC LDR X1, [X8 + 0x28]
	0x031C8AE0 ADRP X20, 0xF57000
	0x031C8AE4 LDR X20, [X20 + 0x368]
	0x031C8AE8 BLR X9
	0x031C8AEC LDR X8, [X20]
	0x031C8AF0 LDR X9, [X8 + 0xB8]
	0x031C8AF4 STP S0, S1, [X9 + 0x8]
	0x031C8AF8 STR S2, [X9 + 0x10]
	0x031C8AFC LDR X8, [X8 + 0xB8]
	0x031C8B00 LDR V0, [X8 + 0x8]
	0x031C8B04 STR S0, [X8]
	0x031C8B08 LDR X8, [X19 + 0xE8]
	0x031C8B0C CBZ X8, 0x31C8B6C
	0x031C8B10 LDR X0, [X8 + 0x48]
	0x031C8B14 CBZ X0, 0x31C8B6C
	0x031C8B18 LDRB W8, [X0 + 0x1C]
	0x031C8B1C CBZ W8, 0x31C8B3C
	0x031C8B20 LDRB W8, [X0 + 0x1D]
	0x031C8B24 LDR X1, [X19 + 0x58]
	0x031C8B28 MOV X2, X31
	0x031C8B2C CBZ W8, 0x31C8B60
	0x031C8B30 LDP X20, X19, [X31 + 0x10]
	0x031C8B34 LDR X30, [X31], #0x20
	0x031C8B38 B 0x31B8A4C
	0x031C8B3C LDR X19, [X19 + 0x58]
	0x031C8B40 MOV X1, X31
	0x031C8B44 BL 0x31B8988
	0x031C8B48 CBZ X19, 0x31C8B6C
	0x031C8B4C MOV X0, X19
	0x031C8B50 LDP X20, X19, [X31 + 0x10]
	0x031C8B54 MOV X1, X31
	0x031C8B58 LDR X30, [X31], #0x20
	0x031C8B5C B 0x3C3F62C
	0x031C8B60 LDP X20, X19, [X31 + 0x10]
	0x031C8B64 LDR X30, [X31], #0x20
	0x031C8B68 B 0x31B8BB4
	0x031C8B6C BL 0x1C16F20
	0x031C8B70 STR X30, [X31 - 0x20]!
	0x031C8B74 STP X20, X19, [X31 + 0x10]
	0x031C8B78 ADRP X20, 0x1213000
	0x031C8B7C LDRB W8, [X20 + 0xFD4]
	0x031C8B80 MOV X19, X0
	0x031C8B84 TBNZ X8, 0x0, 0x31C8B9C
	0x031C8B88 ADRP X0, 0xF57000
	0x031C8B8C LDR X0, [X0 + 0x368]
	0x031C8B90 BL 0x1C16CF4
	0x031C8B94 MOVZ W8, 0x1
	0x031C8B98 STRB W8, [X20 + 0xFD4]
	0x031C8B9C LDR X8, [X19 + 0xA0]
	0x031C8BA0 CBZ X8, 0x31C8C3C
	0x031C8BA4 LDR X9, [X8 + 0x18]
	0x031C8BA8 LDR X0, [X8 + 0x40]

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x1214000
	011 Move X20, 0xF2E000
	012 Move W8, [X21+4044]
	013 Move X20, [X20+1448]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF2E000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+4044], W8
	024 Move X0, [X20]
	025 Move V12, [X19+96]
	026 Move V11, [X19+108]
	027 Move V9, [X19+28]
	028 Move W8, [X0+224]
	029 Move S10, [X19+72]
	030 Move S8, [X19+76]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move V0, V12
	035 Move V1, V11
	036 Move V2, V9
	037 Move V3, V10
	038 Move V4, V8
	039 Move X0, X31
	040 Call LeanTween.easeOutElastic, V0, V1, V2, V3, V4
	041 Move V5, [X19+100]
	042 Move V1, [X19+112]
	043 Move V2, [X19+28]
	044 Move S3, [X19+72]
	045 Move S4, [X19+76]
	046 Move V8, V0
	047 Move V0, V5
	048 Move X0, X31
	049 Call LeanTween.easeOutElastic, V0, V1, V2, V3, V4
	050 Move V5, [X19+104]
	051 Move V1, [X19+116]
	052 Move V2, [X19+28]
	053 Move S3, [X19+72]
	054 Move S4, [X19+76]
	055 Move V9, V0
	056 Move V0, V5
	057 Move X0, X31
	058 Call LeanTween.easeOutElastic, V0, V1, V2, V3, V4
	059 Move V2, V0
	060 Move V0, V8
	061 Move V1, V9
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+48]
	065 Move X21, [X31+56]
	066 Move D9, [X31+32]
	067 Move D8, [X31+40]
	068 Move D11, [X31+16]
	069 Move D10, [X31+24]
	070 Move V12, [X31+80]
	071 Return X0

Method: UnityEngine.Vector3 easeInOutElastic()

Disassembly:
	0x031C8BAC LDR X1, [X8 + 0x28]
	0x031C8BB0 ADRP X20, 0xF57000
	0x031C8BB4 LDR X20, [X20 + 0x368]
	0x031C8BB8 BLR X9
	0x031C8BBC LDR X8, [X20]
	0x031C8BC0 LDR X9, [X8 + 0xB8]
	0x031C8BC4 STP S0, S1, [X9 + 0x8]
	0x031C8BC8 STR S2, [X9 + 0x10]
	0x031C8BCC LDR X8, [X8 + 0xB8]
	0x031C8BD0 LDR V0, [X8 + 0x8]
	0x031C8BD4 STR S0, [X8]
	0x031C8BD8 LDR X8, [X19 + 0xE8]
	0x031C8BDC CBZ X8, 0x31C8C3C
	0x031C8BE0 LDR X0, [X8 + 0x48]
	0x031C8BE4 CBZ X0, 0x31C8C3C
	0x031C8BE8 LDRB W8, [X0 + 0x1C]
	0x031C8BEC CBZ W8, 0x31C8C0C
	0x031C8BF0 LDRB W8, [X0 + 0x1D]
	0x031C8BF4 LDR X1, [X19 + 0x58]
	0x031C8BF8 MOV X2, X31
	0x031C8BFC CBZ W8, 0x31C8C30
	0x031C8C00 LDP X20, X19, [X31 + 0x10]
	0x031C8C04 LDR X30, [X31], #0x20
	0x031C8C08 B 0x31B8B00
	0x031C8C0C LDR X19, [X19 + 0x58]
	0x031C8C10 MOV X1, X31
	0x031C8C14 BL 0x31B8988
	0x031C8C18 CBZ X19, 0x31C8C3C
	0x031C8C1C MOV X0, X19
	0x031C8C20 LDP X20, X19, [X31 + 0x10]
	0x031C8C24 MOV X1, X31
	0x031C8C28 LDR X30, [X31], #0x20
	0x031C8C2C B 0x3C3EC04
	0x031C8C30 LDP X20, X19, [X31 + 0x10]
	0x031C8C34 LDR X30, [X31], #0x20
	0x031C8C38 B 0x31B8CBC
	0x031C8C3C BL 0x1C16F20
	0x031C8C40 STR X30, [X31 - 0x20]!
	0x031C8C44 STP X20, X19, [X31 + 0x10]
	0x031C8C48 ADRP X20, 0x1213000
	0x031C8C4C LDRB W8, [X20 + 0xFD5]
	0x031C8C50 MOV X19, X0
	0x031C8C54 TBNZ X8, 0x0, 0x31C8C6C
	0x031C8C58 ADRP X0, 0xF57000
	0x031C8C5C LDR X0, [X0 + 0x368]
	0x031C8C60 BL 0x1C16CF4
	0x031C8C64 MOVZ W8, 0x1
	0x031C8C68 STRB W8, [X20 + 0xFD5]
	0x031C8C6C LDR X8, [X19 + 0xA0]
	0x031C8C70 CBZ X8, 0x31C8D0C
	0x031C8C74 LDR X9, [X8 + 0x18]
	0x031C8C78 LDR X0, [X8 + 0x40]
	0x031C8C7C LDR X1, [X8 + 0x28]
	0x031C8C80 ADRP X20, 0xF57000
	0x031C8C84 LDR X20, [X20 + 0x368]
	0x031C8C88 BLR X9

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x1214000
	011 Move X20, 0xF2E000
	012 Move W8, [X21+4045]
	013 Move X20, [X20+1448]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0xF2E000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+4045], W8
	024 Move X0, [X20]
	025 Move V12, [X19+96]
	026 Move V11, [X19+108]
	027 Move V9, [X19+28]
	028 Move W8, [X0+224]
	029 Move S10, [X19+72]
	030 Move S8, [X19+76]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move V0, V12
	035 Move V1, V11
	036 Move V2, V9
	037 Move V3, V10
	038 Move V4, V8
	039 Move X0, X31
	040 Call LeanTween.easeInOutElastic, V0, V1, V2, V3, V4
	041 Move V5, [X19+100]
	042 Move V1, [X19+112]
	043 Move V2, [X19+28]
	044 Move S3, [X19+72]
	045 Move S4, [X19+76]
	046 Move V8, V0
	047 Move V0, V5
	048 Move X0, X31
	049 Call LeanTween.easeInOutElastic, V0, V1, V2, V3, V4
	050 Move V5, [X19+104]
	051 Move V1, [X19+116]
	052 Move V2, [X19+28]
	053 Move S3, [X19+72]
	054 Move S4, [X19+76]
	055 Move V9, V0
	056 Move V0, V5
	057 Move X0, X31
	058 Call LeanTween.easeInOutElastic, V0, V1, V2, V3, V4
	059 Move V2, V0
	060 Move V0, V8
	061 Move V1, V9
	062 Move X20, [X31+64]
	063 Move X19, [X31+72]
	064 Move X30, [X31+48]
	065 Move X21, [X31+56]
	066 Move D9, [X31+32]
	067 Move D8, [X31+40]
	068 Move D11, [X31+16]
	069 Move D10, [X31+24]
	070 Move V12, [X31+80]
	071 Return X0

Method: LTDescr setOvershoot(System.Single overshoot)

Disassembly:
	0x031C8C8C LDR X8, [X20]
	0x031C8C90 LDR X9, [X8 + 0xB8]

ISIL:
	001 Move [X0+72], S0
	002 Return X0

Method: LTDescr setPeriod(System.Single period)

Disassembly:
	0x031C8C94 STP S0, S1, [X9 + 0x8]
	0x031C8C98 STR S2, [X9 + 0x10]

ISIL:
	001 Move [X0+76], S0
	002 Return X0

Method: LTDescr setScale(System.Single scale)

Disassembly:
	0x031C8C9C LDR X8, [X8 + 0xB8]
	0x031C8CA0 LDR V0, [X8 + 0x8]

ISIL:
	001 Move [X0+80], S0
	002 Return X0

Method: LTDescr setEase(UnityEngine.AnimationCurve easeCurve)

Disassembly:
	0x031C8CA4 STR S0, [X8]
	0x031C8CA8 LDR X8, [X19 + 0xE8]
	0x031C8CAC CBZ X8, 0x31C8D0C
	0x031C8CB0 LDR X0, [X8 + 0x50]
	0x031C8CB4 CBZ X0, 0x31C8D0C
	0x031C8CB8 LDRB W8, [X0 + 0x2C]
	0x031C8CBC CBZ W8, 0x31C8CDC
	0x031C8CC0 LDRB W8, [X0 + 0x2D]
	0x031C8CC4 LDR X1, [X19 + 0x58]
	0x031C8CC8 MOV X2, X31
	0x031C8CCC CBZ W8, 0x31C8D00
	0x031C8CD0 LDP X20, X19, [X31 + 0x10]
	0x031C8CD4 LDR X30, [X31], #0x20
	0x031C8CD8 B 0x31B9918
	0x031C8CDC LDR X19, [X19 + 0x58]
	0x031C8CE0 MOV X1, X31
	0x031C8CE4 BL 0x31B9900
	0x031C8CE8 CBZ X19, 0x31C8D0C
	0x031C8CEC MOV X0, X19
	0x031C8CF0 LDP X20, X19, [X31 + 0x10]
	0x031C8CF4 MOV X1, X31
	0x031C8CF8 LDR X30, [X31], #0x20
	0x031C8CFC B 0x3C3F62C
	0x031C8D00 LDP X20, X19, [X31 + 0x10]
	0x031C8D04 LDR X30, [X31], #0x20
	0x031C8D08 B 0x31B9B04
	0x031C8D0C BL 0x1C16F20
	0x031C8D10 STR X30, [X31 - 0x20]!
	0x031C8D14 STP X20, X19, [X31 + 0x10]
	0x031C8D18 ADRP X20, 0x1213000
	0x031C8D1C LDRB W8, [X20 + 0xFD6]
	0x031C8D20 MOV X19, X0
	0x031C8D24 TBNZ X8, 0x0, 0x31C8D3C
	0x031C8D28 ADRP X0, 0xF57000
	0x031C8D2C LDR X0, [X0 + 0x368]
	0x031C8D30 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x1214000
	006 Move W8, [X21+4046]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xF58000
	014 Move X0, [X0+1696]
	015 Call 0x1C17CF4
	016 Move X0, 0xF58000
	017 Move X0, [X0+2768]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+4046], W8
	021 Move X8, [X19+232]
	022 Compare X8, 0
	023 JumpIfEqual {44}
	024 Move X9, 0xF58000
	025 Move X9, [X9+1696]
	026 Move [X8+88], X20
	027 Move X20, 0xF58000
	028 Move X0, [X9]
	029 Move X20, [X20+2768]
	030 Call 0x1C17F10
	031 Move X2, [X20]
	032 Move X1, X19
	033 Move X20, X0
	034 Call EaseTypeDelegate..ctor, X0, X1, X2
	035 Move W8, 38
	036 Move [X19+160], X20
	037 Move [X19+148], W8
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0
	044 Call 0x1C17F20

Method: LTDescr setTo(UnityEngine.Vector3 to)

Disassembly:
	0x031C8D34 MOVZ W8, 0x1
	0x031C8D38 STRB W8, [X20 + 0xFD6]
	0x031C8D3C LDR X8, [X19 + 0xA0]
	0x031C8D40 CBZ X8, 0x31C8DDC
	0x031C8D44 LDR X9, [X8 + 0x18]
	0x031C8D48 LDR X0, [X8 + 0x40]
	0x031C8D4C LDR X1, [X8 + 0x28]
	0x031C8D50 ADRP X20, 0xF57000
	0x031C8D54 LDR X20, [X20 + 0x368]
	0x031C8D58 BLR X9
	0x031C8D5C LDR X8, [X20]
	0x031C8D60 LDR X9, [X8 + 0xB8]

ISIL:
	001 Move W8, [X0+21]
	002 Move [X0+108], S0
	003 Move [X0+116], S1
	004 Move [X0+116], S2
	005 Compare W8, 0
	006 JumpIfEqual {14}
	007 Move V3, [X0+96]
	008 Move V4, [X0+104]
	009 Move V0.S[1], V1.S[0]
	010 Subtract V0, V0, V3
	011 Subtract S1, S2, S4
	012 Move [X0+120], D0
	013 Move [X0+128], S1
	014 Return X0

Method: LTDescr setTo(UnityEngine.Transform to)

Disassembly:
	0x031C8D64 STP S0, S1, [X9 + 0x8]
	0x031C8D68 STR S2, [X9 + 0x10]
	0x031C8D6C LDR X8, [X8 + 0xB8]
	0x031C8D70 LDR V0, [X8 + 0x8]
	0x031C8D74 STR S0, [X8]
	0x031C8D78 LDR X8, [X19 + 0xE8]
	0x031C8D7C CBZ X8, 0x31C8DDC

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move [X8+16], X1
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: LTDescr setFrom(UnityEngine.Vector3 from)

Disassembly:
	0x031C8D80 LDR X0, [X8 + 0x50]
	0x031C8D84 CBZ X0, 0x31C8DDC
	0x031C8D88 LDRB W8, [X0 + 0x2C]
	0x031C8D8C CBZ W8, 0x31C8DAC
	0x031C8D90 LDRB W8, [X0 + 0x2D]
	0x031C8D94 LDR X1, [X19 + 0x58]
	0x031C8D98 MOV X2, X31
	0x031C8D9C CBZ W8, 0x31C8DD0
	0x031C8DA0 LDP X20, X19, [X31 + 0x10]
	0x031C8DA4 LDR X30, [X31], #0x20
	0x031C8DA8 B 0x31B99CC
	0x031C8DAC LDR X19, [X19 + 0x58]
	0x031C8DB0 MOV X1, X31
	0x031C8DB4 BL 0x31B9900
	0x031C8DB8 CBZ X19, 0x31C8DDC
	0x031C8DBC MOV X0, X19
	0x031C8DC0 LDP X20, X19, [X31 + 0x10]
	0x031C8DC4 MOV X1, X31
	0x031C8DC8 LDR X30, [X31], #0x20
	0x031C8DCC B 0x3C3EC04
	0x031C8DD0 LDP X20, X19, [X31 + 0x10]
	0x031C8DD4 LDR X30, [X31], #0x20
	0x031C8DD8 B 0x31B9C0C
	0x031C8DDC BL 0x1C16F20
	0x031C8DE0 STP X30, X19, [X31 - 0x10]!
	0x031C8DE4 MOV X19, X0
	0x031C8DE8 LDR X0, [X0 + 0x58]
	0x031C8DEC CBZ X0, 0x31C8E04
	0x031C8DF0 MOV X1, X31
	0x031C8DF4 BL 0x3C3FBAC
	0x031C8DF8 STR S0, [X19 + 0x60]
	0x031C8DFC LDP X30, X19, [X31], #0x10
	0x031C8E00 RET
	0x031C8E04 BL 0x1C16F20
	0x031C8E08 STP D9, D8, [X31 - 0x30]!
	0x031C8E0C STR X30, [X31 + 0x10]
	0x031C8E10 STP X20, X19, [X31 + 0x20]
	0x031C8E14 LDR X8, [X0 + 0xA0]
	0x031C8E18 CBZ X8, 0x31C8E80
	0x031C8E1C MOV X20, X0
	0x031C8E20 LDR X19, [X0 + 0x58]
	0x031C8E24 LDR X9, [X8 + 0x18]
	0x031C8E28 LDR X0, [X8 + 0x40]
	0x031C8E2C LDR X1, [X8 + 0x28]
	0x031C8E30 BLR X9
	0x031C8E34 LDR X0, [X20 + 0x58]
	0x031C8E38 CBZ X0, 0x31C8E80
	0x031C8E3C MOV X1, X31
	0x031C8E40 MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x1214000
	009 Move X20, 0xF2C000
	010 Move W8, [X21+4047]
	011 Move X20, [X20+1432]
	012 Move V8, V2
	013 Move V9, V1
	014 Move V10, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0xF2C000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+4047], W8
	025 Move X0, [X20]
	026 Move X20, [X19+88]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Call Object.op_Implicit, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {40}
	038 Move X0, X19
	039 Call LTDescr.init, X0
	040 Move S0, [X19+108]
	041 Move S1, [X19+112]
	042 Move V2, [X19+116]
	043 Move S3, 0.5
	044 Move [X19+96], S10
	045 Move [X19+104], S9
	046 Subtract S0, S0, S10
	047 Subtract S1, S1, S9
	048 Subtract S2, S2, S8
	049 Move [X19+120], S0
	050 Move [X19+128], S1
	051 Multiply S0, S0, S3
	052 Multiply S1, S1, S3
	053 Multiply S3, S2, S3
	054 Move [X19+104], S8
	055 Move [X19+128], S2
	056 Move [X19+136], S0
	057 Move [X19+136], S1
	058 Move [X19+144], S3
	059 Move X0, X19
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Move D9, [X31+16]
	065 Move D8, [X31+24]
	066 Move V10, [X31+64]
	067 Return X0

Method: LTDescr setFrom(System.Single from)

Disassembly:
	0x031C8E44 BL 0x3C3FBAC
	0x031C8E48 LDR X0, [X20 + 0x58]
	0x031C8E4C CBZ X0, 0x31C8E80

ISIL:
	001 Move S1, W31
	002 Move S2, W31
	003 Call LTDescr.setFrom, X0, X1
	004 Return X0

Method: LTDescr setDiff(UnityEngine.Vector3 diff)

Disassembly:
	0x031C8E50 MOV X1, X31
	0x031C8E54 MOV V9.16B, V1.16B
	0x031C8E58 BL 0x3C3FBAC

ISIL:
	001 Move [X0+120], S0
	002 Move [X0+128], S1
	003 Move [X0+128], S2
	004 Return X0

Method: LTDescr setHasInitialized(System.Boolean has)

Disassembly:
	0x031C8E5C CBZ X19, 0x31C8E80
	0x031C8E60 MOV X0, X19
	0x031C8E64 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+21], W8
	003 Return X0

Method: LTDescr setId(System.UInt32 id, System.UInt32 global_counter)

Disassembly:
	0x031C8E68 LDR X30, [X31 + 0x10]
	0x031C8E6C MOV V0.16B, V8.16B
	0x031C8E70 MOV V1.16B, V9.16B

ISIL:
	001 Move [X0+52], W1
	002 Move [X0+60], W2
	003 Return X0

Method: LTDescr setPassed(System.Single passed)

Disassembly:
	0x031C8E74 MOV X1, X31
	0x031C8E78 LDP D9, D8, [X31], #0x30

ISIL:
	001 Move [X0+32], S0
	002 Return X0

Method: LTDescr setTime(System.Single time)

Disassembly:
	0x031C8E7C B 0x3C3FC4C
	0x031C8E80 BL 0x1C16F20
	0x031C8E84 STP X30, X19, [X31 - 0x10]!
	0x031C8E88 MOV X19, X0
	0x031C8E8C LDR X0, [X0 + 0x58]
	0x031C8E90 CBZ X0, 0x31C8EA8
	0x031C8E94 MOV X1, X31

ISIL:
	001 Move V1, [X0+32]
	002 Move V2, [X0+40]
	003 Move [X0+40], S0
	004 NotImplemented "Instruction FDIV not yet implemented."
	005 Multiply S1, S1, S0
	006 Move [X0+32], S1
	007 Return X0

Method: LTDescr setSpeed(System.Single speed)

Disassembly:
	0x031C8E98 BL 0x3C3FBAC
	0x031C8E9C STR S1, [X19 + 0x60]
	0x031C8EA0 LDP X30, X19, [X31], #0x10
	0x031C8EA4 RET
	0x031C8EA8 BL 0x1C16F20
	0x031C8EAC STP D9, D8, [X31 - 0x30]!
	0x031C8EB0 STR X30, [X31 + 0x10]
	0x031C8EB4 STP X20, X19, [X31 + 0x20]
	0x031C8EB8 LDR X19, [X0 + 0x58]
	0x031C8EBC CBZ X19, 0x31C8F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+21]
	004 Move X19, X0
	005 Move [X0+44], S0
	006 Compare W8, 0
	007 JumpIfEqual {10}
	008 Move X0, X19
	009 Call LTDescr.initSpeed, X0
	010 Move X0, X19
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Return X0

Method: LTDescr setRepeat(System.Int32 repeat)

Disassembly:
	0x031C8EC0 MOV X20, X0
	0x031C8EC4 MOV X0, X19
	0x031C8EC8 MOV X1, X31
	0x031C8ECC BL 0x3C3FBAC
	0x031C8ED0 LDR X8, [X20 + 0xA0]
	0x031C8ED4 CBZ X8, 0x31C8F20
	0x031C8ED8 LDR X9, [X8 + 0x18]
	0x031C8EDC LDR X0, [X8 + 0x40]
	0x031C8EE0 LDR X1, [X8 + 0x28]
	0x031C8EE4 MOV V8.16B, V0.16B
	0x031C8EE8 BLR X9
	0x031C8EEC LDR X0, [X20 + 0x58]
	0x031C8EF0 CBZ X0, 0x31C8F20
	0x031C8EF4 MOV X1, X31
	0x031C8EF8 MOV V9.16B, V0.16B
	0x031C8EFC BL 0x3C3FBAC
	0x031C8F00 MOV X0, X19

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Move [X0+56], W1
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfNotEqual {11}
	007 Move W8, [X0+152]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move W8, 36
	010 Move [X0+152], W8
	011 Move W8, [X0+144]
	012 NotImplemented "Instruction CMP not yet implemented."
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W8, 1
	015 Move [X0+24], W8
	016 Return X0

Method: LTDescr setLoopType(LeanTweenType loopType)

Disassembly:
	0x031C8F10 MOV V1.16B, V9.16B
	0x031C8F14 MOV X1, X31

ISIL:
	001 Move [X0+152], W1
	002 Return X0

Method: LTDescr setUseEstimatedTime(System.Boolean useEstimatedTime)

Disassembly:
	0x031C8F18 LDP D9, D8, [X31], #0x30
	0x031C8F1C B 0x3C3FC4C
	0x031C8F20 BL 0x1C16F20
	0x031C8F24 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 And W8, W1, 1
	002 Move [X0+17], W8
	003 Move [X0+20], W31
	004 Return X0

Method: LTDescr setIgnoreTimeScale(System.Boolean useUnScaledTime)

Disassembly:
	0x031C8F28 MOV X19, X0
	0x031C8F2C LDR X0, [X0 + 0x58]
	0x031C8F30 CBZ X0, 0x31C8F48
	0x031C8F34 MOV X1, X31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+17], W8
	003 Move [X0+20], W31
	004 Return X0

Method: LTDescr setUseFrames(System.Boolean useFrames)

Disassembly:
	0x031C8F38 BL 0x3C3FBAC
	0x031C8F3C STR S2, [X19 + 0x60]
	0x031C8F40 LDP X30, X19, [X31], #0x10
	0x031C8F44 RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+18], W8
	003 Move [X0+20], W31
	004 Return X0

Method: LTDescr setUseManualTime(System.Boolean useManualTime)

Disassembly:
	0x031C8F48 BL 0x1C16F20
	0x031C8F4C STP D9, D8, [X31 - 0x30]!
	0x031C8F50 STR X30, [X31 + 0x10]
	0x031C8F54 STP X20, X19, [X31 + 0x20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+19], W8
	003 Move [X0+20], W31
	004 Return X0

Method: LTDescr setLoopCount(System.Int32 loopCount)

Disassembly:
	0x031C8F58 LDR X19, [X0 + 0x58]
	0x031C8F5C CBZ X19, 0x31C8FC4
	0x031C8F60 MOV X20, X0
	0x031C8F64 MOV X0, X19

ISIL:
	001 Move W8, 36
	002 Move [X0+152], W8
	003 Move [X0+56], W1
	004 Return X0

Method: LTDescr setLoopOnce()

Disassembly:
	0x031C8F68 MOV X1, X31
	0x031C8F6C BL 0x3C3FBAC
	0x031C8F70 LDR X0, [X20 + 0x58]

ISIL:
	001 Move W8, 35
	002 Move [X0+152], W8
	003 Return X0

Method: LTDescr setLoopClamp()

Disassembly:
	0x031C8F74 CBZ X0, 0x31C8FC4
	0x031C8F78 MOV X1, X31
	0x031C8F7C MOV V8.16B, V0.16B
	0x031C8F80 BL 0x3C3FBAC
	0x031C8F84 LDR X8, [X20 + 0xA0]
	0x031C8F88 CBZ X8, 0x31C8FC4
	0x031C8F8C LDR X9, [X8 + 0x18]
	0x031C8F90 LDR X0, [X8 + 0x40]

ISIL:
	001 Move W8, [X0+56]
	002 Move W9, 36
	003 Move [X0+152], W9
	004 Compare W8, 0
	005 JumpIfEqual {7}
	006 Return X0
	007 Move TEMP, 0
	008 Not TEMP
	009 Move W8, TEMP
	010 Move [X0+56], W8
	011 Return X0

Method: LTDescr setLoopClamp(System.Int32 loops)

Disassembly:
	0x031C8F94 LDR X1, [X8 + 0x28]
	0x031C8F98 MOV V9.16B, V1.16B

ISIL:
	001 Move [X0+56], W1
	002 Return X0

Method: LTDescr setLoopPingPong()

Disassembly:
	0x031C8F9C BLR X9
	0x031C8FA0 MOV X0, X19
	0x031C8FA4 LDP X20, X19, [X31 + 0x20]
	0x031C8FA8 LDR X30, [X31 + 0x10]
	0x031C8FAC MOV V2.16B, V0.16B
	0x031C8FB0 MOV V0.16B, V8.16B
	0x031C8FB4 MOV V1.16B, V9.16B
	0x031C8FB8 MOV X1, X31

ISIL:
	001 Move W8, [X0+56]
	002 Move W9, 37
	003 Move [X0+152], W9
	004 Compare W8, 0
	005 JumpIfEqual {7}
	006 Return X0
	007 Move TEMP, 0
	008 Not TEMP
	009 Move W8, TEMP
	010 Move [X0+56], W8
	011 Return X0

Method: LTDescr setLoopPingPong(System.Int32 loops)

Disassembly:
	0x031C8FBC LDP D9, D8, [X31], #0x30
	0x031C8FC0 B 0x3C3FC4C
	0x031C8FC4 BL 0x1C16F20
	0x031C8FC8 STP D9, D8, [X31 - 0x30]!
	0x031C8FCC STR X30, [X31 + 0x10]
	0x031C8FD0 STP X20, X19, [X31 + 0x20]
	0x031C8FD4 ADRP X20, 0x1213000

ISIL:
	001 Move W8, 37
	002 Move W9, W1
	003 ShiftRight W9, 31
	004 And W9, W9, 0x3FFFFFFF
	005 Add W31, W1, 1
	006 Move [X0+152], W8
	007 NotImplemented "Instruction CSINV not yet implemented."
	008 Move [X0+56], W8
	009 Return X0

Method: LTDescr setOnComplete(System.Action onComplete)

Disassembly:
	0x031C8FD8 LDRB W8, [X20 + 0xFD7]
	0x031C8FDC MOV X19, X0
	0x031C8FE0 TBNZ X8, 0x0, 0x31C8FF8
	0x031C8FE4 ADRP X0, 0xF2D000
	0x031C8FE8 LDR X0, [X0 + 0x5A8]
	0x031C8FEC BL 0x1C16CF4
	0x031C8FF0 MOVZ W8, 0x1
	0x031C8FF4 STRB W8, [X20 + 0xFD7]
	0x031C8FF8 LDR X0, [X19 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+192], X1
	006 Move W8, 1
	007 Move [X0+22], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnComplete(System.Action`1<System.Object> onComplete)

Disassembly:
	0x031C8FFC CBZ X0, 0x31C9050
	0x031C9000 ADRP X20, 0xF2C000
	0x031C9004 LDR X20, [X20 + 0x5A8]
	0x031C9008 MOV X1, X31
	0x031C900C BL 0x3C3F74C
	0x031C9010 STR S0, [X19 + 0x60]
	0x031C9014 LDR X0, [X20]
	0x031C9018 LDR V9, [X19 + 0x6C]
	0x031C901C MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+200], X1
	006 Move W8, 1
	007 Move [X0+22], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnComplete(System.Action`1<System.Object> onComplete, System.Object onCompleteParam)

Disassembly:
	0x031C9020 LDR W8, [X0 + 0xE0]
	0x031C9024 CBNZ W8, 0x31C902C
	0x031C9028 BL 0x1C16DFC
	0x031C902C MOV V0.16B, V8.16B
	0x031C9030 MOV V1.16B, V9.16B
	0x031C9034 MOV X0, X31
	0x031C9038 BL 0x31ACE4C
	0x031C903C STR S0, [X19 + 0x6C]
	0x031C9040 LDP X20, X19, [X31 + 0x20]
	0x031C9044 LDR X30, [X31 + 0x10]
	0x031C9048 LDP D9, D8, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W9, 1
	006 Move [X8+200], X1
	007 Move [X0+22], W9
	008 Compare X2, 0
	009 JumpIfEqual {11}
	010 Move [X8+208], X2
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: LTDescr setOnCompleteParam(System.Object onCompleteParam)

Disassembly:
	0x031C904C RET
	0x031C9050 BL 0x1C16F20
	0x031C9054 STP D9, D8, [X31 - 0x30]!
	0x031C9058 STR X30, [X31 + 0x10]
	0x031C905C STP X20, X19, [X31 + 0x20]
	0x031C9060 LDR X8, [X0 + 0xA0]
	0x031C9064 CBZ X8, 0x31C90CC
	0x031C9068 MOV X20, X0
	0x031C906C LDR X19, [X0 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+208], X1
	006 Move W8, 1
	007 Move [X0+22], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdate(System.Action`1<System.Single> onUpdate)

Disassembly:
	0x031C9070 LDR X9, [X8 + 0x18]
	0x031C9074 LDR X0, [X8 + 0x40]
	0x031C9078 LDR X1, [X8 + 0x28]
	0x031C907C BLR X9
	0x031C9080 LDR X0, [X20 + 0x58]
	0x031C9084 CBZ X0, 0x31C90CC
	0x031C9088 MOV X1, X31
	0x031C908C MOV V8.16B, V0.16B
	0x031C9090 BL 0x3C3F74C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+128], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdateRatio(System.Action`2<System.Single, System.Single> onUpdate)

Disassembly:
	0x031C9094 LDR X0, [X20 + 0x58]
	0x031C9098 CBZ X0, 0x31C90CC
	0x031C909C MOV X1, X31
	0x031C90A0 MOV V9.16B, V1.16B
	0x031C90A4 BL 0x3C3F74C
	0x031C90A8 CBZ X19, 0x31C90CC
	0x031C90AC MOV X0, X19
	0x031C90B0 LDP X20, X19, [X31 + 0x20]
	0x031C90B4 LDR X30, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+136], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdateObject(System.Action`2<System.Single, System.Object> onUpdate)

Disassembly:
	0x031C90B8 MOV V0.16B, V8.16B
	0x031C90BC MOV V1.16B, V9.16B
	0x031C90C0 MOV X1, X31
	0x031C90C4 LDP D9, D8, [X31], #0x30
	0x031C90C8 B 0x3C3F77C
	0x031C90CC BL 0x1C16F20
	0x031C90D0 STP D9, D8, [X31 - 0x30]!
	0x031C90D4 STR X30, [X31 + 0x10]
	0x031C90D8 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+144], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdateVector2(System.Action`1<UnityEngine.Vector2> onUpdate)

Disassembly:
	0x031C90DC ADRP X20, 0x1212000
	0x031C90E0 LDRB W8, [X20 + 0xFD8]
	0x031C90E4 MOV X19, X0
	0x031C90E8 TBNZ X8, 0x0, 0x31C9100
	0x031C90EC ADRP X0, 0xF2C000
	0x031C90F0 LDR X0, [X0 + 0x5A8]
	0x031C90F4 BL 0x1C16CF4
	0x031C90F8 MOVZ W8, 0x1
	0x031C90FC STRB W8, [X20 + 0xFD8]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+152], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdateVector3(System.Action`1<UnityEngine.Vector3> onUpdate)

Disassembly:
	0x031C9100 LDR X0, [X19 + 0x58]
	0x031C9104 CBZ X0, 0x31C9158
	0x031C9108 ADRP X20, 0xF2C000
	0x031C910C LDR X20, [X20 + 0x5A8]
	0x031C9110 MOV X1, X31
	0x031C9114 BL 0x3C3F74C
	0x031C9118 STR S1, [X19 + 0x60]
	0x031C911C LDR X0, [X20]
	0x031C9120 LDR V9, [X19 + 0x6C]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+160], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdateColor(System.Action`1<UnityEngine.Color> onUpdate)

Disassembly:
	0x031C9124 MOV V8.16B, V1.16B
	0x031C9128 LDR W8, [X0 + 0xE0]
	0x031C912C CBNZ W8, 0x31C9134
	0x031C9130 BL 0x1C16DFC
	0x031C9134 MOV V0.16B, V8.16B
	0x031C9138 MOV V1.16B, V9.16B
	0x031C913C MOV X0, X31
	0x031C9140 BL 0x31ACE4C
	0x031C9144 STR S0, [X19 + 0x6C]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+176], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdateColor(System.Action`2<UnityEngine.Color, System.Object> onUpdate)

Disassembly:
	0x031C9148 LDP X20, X19, [X31 + 0x20]
	0x031C914C LDR X30, [X31 + 0x10]
	0x031C9150 LDP D9, D8, [X31], #0x30
	0x031C9154 RET
	0x031C9158 BL 0x1C16F20
	0x031C915C STP D9, D8, [X31 - 0x30]!
	0x031C9160 STR X30, [X31 + 0x10]
	0x031C9164 STP X20, X19, [X31 + 0x20]
	0x031C9168 LDR X19, [X0 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+184], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdate(System.Action`1<UnityEngine.Color> onUpdate)

Disassembly:
	0x031C916C CBZ X19, 0x31C91D0
	0x031C9170 MOV X20, X0
	0x031C9174 MOV X0, X19
	0x031C9178 MOV X1, X31
	0x031C917C BL 0x3C3F74C
	0x031C9180 LDR X8, [X20 + 0xA0]
	0x031C9184 CBZ X8, 0x31C91D0
	0x031C9188 LDR X9, [X8 + 0x18]
	0x031C918C LDR X0, [X8 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+176], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdate(System.Action`2<UnityEngine.Color, System.Object> onUpdate)

Disassembly:
	0x031C9190 LDR X1, [X8 + 0x28]
	0x031C9194 MOV V8.16B, V0.16B
	0x031C9198 BLR X9
	0x031C919C LDR X0, [X20 + 0x58]
	0x031C91A0 CBZ X0, 0x31C91D0
	0x031C91A4 MOV X1, X31
	0x031C91A8 MOV V9.16B, V0.16B
	0x031C91AC BL 0x3C3F74C
	0x031C91B0 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+184], X1
	006 Move W8, 1
	007 Move [X0+156], W8
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setOnUpdate(System.Action`2<System.Single, System.Object> onUpdate, System.Object onUpdateParam = null)

Disassembly:
	0x031C91B4 LDP X20, X19, [X31 + 0x20]
	0x031C91B8 LDR X30, [X31 + 0x10]
	0x031C91BC MOV V0.16B, V8.16B
	0x031C91C0 MOV V1.16B, V9.16B
	0x031C91C4 MOV X1, X31
	0x031C91C8 LDP D9, D8, [X31], #0x30
	0x031C91CC B 0x3C3F77C
	0x031C91D0 BL 0x1C16F20
	0x031C91D4 STP D9, D8, [X31 - 0x30]!
	0x031C91D8 STR X30, [X31 + 0x10]
	0x031C91DC STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W9, 1
	006 Move [X8+144], X1
	007 Move [X0+156], W9
	008 Compare X2, 0
	009 JumpIfEqual {11}
	010 Move [X8+216], X2
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: LTDescr setOnUpdate(System.Action`2<UnityEngine.Vector3, System.Object> onUpdate, System.Object onUpdateParam = null)

Disassembly:
	0x031C91E0 ADRP X20, 0x1212000
	0x031C91E4 LDRB W8, [X20 + 0xFD9]
	0x031C91E8 MOV X19, X0
	0x031C91EC TBNZ X8, 0x0, 0x31C9204
	0x031C91F0 ADRP X0, 0xF2C000
	0x031C91F4 LDR X0, [X0 + 0x5A8]
	0x031C91F8 BL 0x1C16CF4
	0x031C91FC MOVZ W8, 0x1
	0x031C9200 STRB W8, [X20 + 0xFD9]
	0x031C9204 LDR X0, [X19 + 0x58]
	0x031C9208 CBZ X0, 0x31C925C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W9, 1
	006 Move [X8+168], X1
	007 Move [X0+156], W9
	008 Compare X2, 0
	009 JumpIfEqual {11}
	010 Move [X8+216], X2
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: LTDescr setOnUpdate(System.Action`1<UnityEngine.Vector2> onUpdate, System.Object onUpdateParam = null)

Disassembly:
	0x031C920C ADRP X20, 0xF2C000
	0x031C9210 LDR X20, [X20 + 0x5A8]
	0x031C9214 MOV X1, X31
	0x031C9218 BL 0x3C3F74C
	0x031C921C STR S2, [X19 + 0x60]
	0x031C9220 LDR X0, [X20]
	0x031C9224 LDR V9, [X19 + 0x6C]
	0x031C9228 MOV V8.16B, V2.16B
	0x031C922C LDR W8, [X0 + 0xE0]
	0x031C9230 CBNZ W8, 0x31C9238
	0x031C9234 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W9, 1
	006 Move [X8+152], X1
	007 Move [X0+156], W9
	008 Compare X2, 0
	009 JumpIfEqual {11}
	010 Move [X8+216], X2
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: LTDescr setOnUpdate(System.Action`1<UnityEngine.Vector3> onUpdate, System.Object onUpdateParam = null)

Disassembly:
	0x031C9238 MOV V0.16B, V8.16B
	0x031C923C MOV V1.16B, V9.16B
	0x031C9240 MOV X0, X31
	0x031C9244 BL 0x31ACE4C
	0x031C9248 STR S0, [X19 + 0x6C]
	0x031C924C LDP X20, X19, [X31 + 0x20]
	0x031C9250 LDR X30, [X31 + 0x10]
	0x031C9254 LDP D9, D8, [X31], #0x30
	0x031C9258 RET
	0x031C925C BL 0x1C16F20
	0x031C9260 STP D9, D8, [X31 - 0x30]!

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W9, 1
	006 Move [X8+160], X1
	007 Move [X0+156], W9
	008 Compare X2, 0
	009 JumpIfEqual {11}
	010 Move [X8+216], X2
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: LTDescr setOnUpdateParam(System.Object onUpdateParam)

Disassembly:
	0x031C9264 STR X30, [X31 + 0x10]
	0x031C9268 STP X20, X19, [X31 + 0x20]
	0x031C926C LDR X19, [X0 + 0x58]
	0x031C9270 CBZ X19, 0x31C92D8
	0x031C9274 MOV X20, X0
	0x031C9278 MOV X0, X19
	0x031C927C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move [X8+216], X1
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: LTDescr setOrientToPath(System.Boolean doesOrient)

Disassembly:
	0x031C9280 BL 0x3C3F74C
	0x031C9284 LDR X0, [X20 + 0x58]
	0x031C9288 CBZ X0, 0x31C92D8
	0x031C928C MOV X1, X31
	0x031C9290 MOV V8.16B, V0.16B
	0x031C9294 BL 0x3C3F74C
	0x031C9298 LDR X8, [X20 + 0xA0]
	0x031C929C CBZ X8, 0x31C92D8
	0x031C92A0 LDR X9, [X8 + 0x18]
	0x031C92A4 LDR X0, [X8 + 0x40]
	0x031C92A8 LDR X1, [X8 + 0x28]
	0x031C92AC MOV V9.16B, V1.16B
	0x031C92B0 BLR X9
	0x031C92B4 MOV X0, X19
	0x031C92B8 LDP X20, X19, [X31 + 0x20]
	0x031C92BC LDR X30, [X31 + 0x10]
	0x031C92C0 MOV V2.16B, V0.16B
	0x031C92C4 MOV V0.16B, V8.16B
	0x031C92C8 MOV V1.16B, V9.16B
	0x031C92CC MOV X1, X31
	0x031C92D0 LDP D9, D8, [X31], #0x30
	0x031C92D4 B 0x3C3F77C
	0x031C92D8 BL 0x1C16F20
	0x031C92DC STP X30, X19, [X31 - 0x10]!
	0x031C92E0 MOV X8, X0
	0x031C92E4 LDR X0, [X0 + 0x58]
	0x031C92E8 STR W31, [X8 + 0x60]
	0x031C92EC CBZ X0, 0x31C9310
	0x031C92F0 LDR X19, [X8 + 0xE8]
	0x031C92F4 MOV X1, X31
	0x031C92F8 BL 0x3C3DEB4
	0x031C92FC CBZ X19, 0x31C9310
	0x031C9300 STP S0, S1, [X19 + 0x34]
	0x031C9304 STP S2, S3, [X19 + 0x3C]
	0x031C9308 LDP X30, X19, [X31], #0x10
	0x031C930C RET
	0x031C9310 BL 0x1C16F20
	0x031C9314 STR D10, [X31 - 0x30]!
	0x031C9318 STP D9, D8, [X31 + 0x8]
	0x031C931C STR X30, [X31 + 0x18]
	0x031C9320 STP X20, X19, [X31 + 0x20]
	0x031C9324 ADRP X20, 0x1212000
	0x031C9328 LDRB W8, [X20 + 0xFDA]
	0x031C932C MOV X19, X0
	0x031C9330 TBNZ X8, 0x0, 0x31C9348
	0x031C9334 ADRP X0, 0xF56000
	0x031C9338 LDR X0, [X0 + 0x368]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x1213000
	007 Move W8, [X21+4048]
	008 Move W19, W1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF57000
	015 Move X0, [X0+1008]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+4048], W8
	019 Move W8, [X20+144]
	020 Move X22, [X20+232]
	021 And W8, W8, 0xFFFFFFFE
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Compare X22, 0
	024 JumpIfEqual {58}
	025 Move X8, [X22+72]
	026 Compare X8, 0
	027 JumpIfNotEqual {39}
	028 Move X8, 0xF57000
	029 Move X8, [X8+1008]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X21, X0
	034 Call LTBezierPath..ctor, X0
	035 Move [X22+72], X21
	036 Move X22, [X20+232]
	037 Compare X22, 0
	038 JumpIfEqual {58}
	039 Move X8, [X22+72]
	040 Compare X8, 0
	041 JumpIfEqual {58}
	042 Add X8, X8, 28
	043 Compare X22, 0
	044 JumpIfEqual {58}
	045 Move X8, [X22+80]
	046 Compare X8, 0
	047 JumpIfEqual {58}
	048 Add X8, X8, 44
	049 And W9, W19, 1
	050 Move X0, X20
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move [X8], W9
	056 Move X30, [X31+48]
	057 Return X0
	058 Call 0x1C17F20

Method: LTDescr setOrientToPath2d(System.Boolean doesOrient2d)

Disassembly:
	0x031C933C BL 0x1C16CF4
	0x031C9340 MOVZ W8, 0x1
	0x031C9344 STRB W8, [X20 + 0xFDA]
	0x031C9348 LDR X8, [X19 + 0xA0]
	0x031C934C CBZ X8, 0x31C94B4
	0x031C9350 LDR X9, [X8 + 0x18]
	0x031C9354 LDR X0, [X8 + 0x40]
	0x031C9358 LDR X1, [X8 + 0x28]
	0x031C935C ADRP X20, 0xF56000
	0x031C9360 LDR X20, [X20 + 0x368]
	0x031C9364 BLR X9
	0x031C9368 LDR X8, [X20]
	0x031C936C LDR X9, [X8 + 0xB8]
	0x031C9370 STP S0, S1, [X9 + 0x8]
	0x031C9374 STR S2, [X9 + 0x10]
	0x031C9378 LDR X8, [X8 + 0xB8]
	0x031C937C LDR V0, [X8 + 0x8]
	0x031C9380 STR S0, [X8]
	0x031C9384 LDR X0, [X19 + 0x58]
	0x031C9388 CBZ X0, 0x31C94B4
	0x031C938C MOV X1, X31
	0x031C9390 BL 0x3C3EB78
	0x031C9394 LDR X8, [X19 + 0xE8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W1
	004 And W1, W1, 1
	005 Call LTDescr.setOrientToPath, X0, X1
	006 Move W9, [X0+144]
	007 Move X8, [X0+232]
	008 And W9, W9, 0xFFFFFFFE
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Compare X8, 0
	011 JumpIfEqual {27}
	012 Move X8, [X8+72]
	013 Compare X8, 0
	014 JumpIfEqual {27}
	015 Add X8, X8, 29
	016 Compare X8, 0
	017 JumpIfEqual {27}
	018 Move X8, [X8+80]
	019 Compare X8, 0
	020 JumpIfEqual {27}
	021 Add X8, X8, 45
	022 And W9, W19, 1
	023 Move [X8], W9
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return X0
	027 Call 0x1C17F20

Method: LTDescr setRect(LTRect rect)

Disassembly:
	0x031C9398 CBZ X8, 0x31C94B4
	0x031C939C LDR X0, [X19 + 0x58]
	0x031C93A0 CBZ X0, 0x31C94B4
	0x031C93A4 MOV V8.16B, V0.16B
	0x031C93A8 MOV V9.16B, V1.16B
	0x031C93AC MOV V10.16B, V2.16B
	0x031C93B0 LDP S1, S2, [X8 + 0x1C]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move [X8+120], X1
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: LTDescr setRect(UnityEngine.Rect rect)

Disassembly:
	0x031C93B4 LDR V0, [X8 + 0x18]
	0x031C93B8 MOV X1, X31
	0x031C93BC BL 0x3C3DE4C
	0x031C93C0 LDR X8, [X19 + 0xE8]
	0x031C93C4 CBZ X8, 0x31C94B4
	0x031C93C8 LDR X0, [X19 + 0x58]
	0x031C93CC CBZ X0, 0x31C94B4
	0x031C93D0 LDP S5, S6, [X8 + 0x2C]
	0x031C93D4 LDP S3, S4, [X8 + 0x24]
	0x031C93D8 MOV X1, X31
	0x031C93DC FNEG S6, S6
	0x031C93E0 BL 0x3C40680
	0x031C93E4 LDR X0, [X19 + 0x58]
	0x031C93E8 CBZ X0, 0x31C94B4
	0x031C93EC MOV X1, X31
	0x031C93F0 BL 0x3C3EB78
	0x031C93F4 LDR X0, [X19 + 0x58]
	0x031C93F8 CBZ X0, 0x31C94B4
	0x031C93FC FSUB S2, S10, S2
	0x031C9400 FSUB S1, S9, S1
	0x031C9404 FSUB S0, S8, S0
	0x031C9408 FSUB S2, S10, S2
	0x031C940C FSUB S1, S9, S1
	0x031C9410 FSUB S0, S8, S0
	0x031C9414 MOV X1, X31
	0x031C9418 BL 0x3C3EC04
	0x031C941C LDR X8, [X19 + 0xE8]
	0x031C9420 CBZ X8, 0x31C94B4
	0x031C9424 LDR X0, [X19 + 0x58]
	0x031C9428 CBZ X0, 0x31C94B4
	0x031C942C LDP S2, S3, [X8 + 0x3C]
	0x031C9430 LDP S0, S1, [X8 + 0x34]
	0x031C9434 MOV X1, X31
	0x031C9438 BL 0x3C3F7AC
	0x031C943C LDR X8, [X19 + 0xE8]
	0x031C9440 CBZ X8, 0x31C94B4
	0x031C9444 LDR X0, [X19 + 0x58]
	0x031C9448 CBZ X0, 0x31C94B4

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x1213000
	010 Move X20, 0xF57000
	011 Move W8, [X21+4049]
	012 Move X20, [X20+1472]
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0xF57000
	023 Move X0, [X0+1472]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+4049], W8
	027 Move X0, [X20]
	028 Move X21, [X19+232]
	029 Call 0x1C17F10
	030 Move V0, V11
	031 Move V1, V10
	032 Move V2, V9
	033 Move V3, V8
	034 Move X1, X31
	035 Move X20, X0
	036 Call LTRect..ctor, X0, X1
	037 Compare X21, 0
	038 JumpIfEqual {50}
	039 Move [X21+120], X20
	040 Move X0, X19
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move D11, [X31+64]
	048 Move D10, [X31+72]
	049 Return X0
	050 Call 0x1C17F20

Method: LTDescr setPath(LTBezierPath path)

Disassembly:
	0x031C944C LDP S1, S2, [X8 + 0x1C]
	0x031C9450 LDR V0, [X8 + 0x18]
	0x031C9454 MOV X1, X31
	0x031C9458 BL 0x3C3DE4C
	0x031C945C LDR X8, [X19 + 0xE8]
	0x031C9460 CBZ X8, 0x31C94B4
	0x031C9464 LDR X0, [X19 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move [X8+72], X1
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: LTDescr setPoint(UnityEngine.Vector3 point)

Disassembly:
	0x031C9468 CBZ X0, 0x31C94B4
	0x031C946C LDR X9, [X20]
	0x031C9470 LDP S4, S5, [X8 + 0x28]
	0x031C9474 LDR V3, [X8 + 0x24]
	0x031C9478 MOV X1, X31
	0x031C947C LDR X9, [X9 + 0xB8]
	0x031C9480 LDR V6, [X9]
	0x031C9484 BL 0x3C40680

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {10}
	005 Move [X8+24], S0
	006 Move [X8+32], S1
	007 Move [X8+32], S2
	008 Move X30, [X31+16]
	009 Return X0
	010 Call 0x1C17F20

Method: LTDescr setDestroyOnComplete(System.Boolean doesDestroy)

Disassembly:
	0x031C9488 LDR X8, [X19 + 0xE8]
	0x031C948C CBZ X8, 0x31C94B4
	0x031C9490 LDR X9, [X20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+84], W8
	003 Return X0

Method: LTDescr setAudio(System.Object audio)

Disassembly:
	0x031C9494 LDP X20, X19, [X31 + 0x20]
	0x031C9498 LDR X30, [X31 + 0x18]
	0x031C949C LDP D9, D8, [X31 + 0x8]
	0x031C94A0 LDR X9, [X9 + 0xB8]
	0x031C94A4 LDR V0, [X9]
	0x031C94A8 STR S0, [X8 + 0x30]
	0x031C94AC LDR V10, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move [X8+208], X1
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: LTDescr setOnCompleteOnRepeat(System.Boolean isOn)

Disassembly:
	0x031C8F04 LDP X20, X19, [X31 + 0x20]
	0x031C8F08 LDR X30, [X31 + 0x10]
	0x031C8F0C MOV V0.16B, V8.16B

ISIL:
	001 And W8, W1, 1
	002 Move [X0+24], W8
	003 Return X0

Method: LTDescr setOnCompleteOnStart(System.Boolean isOn)

Disassembly:
	0x031C94B0 RET
	0x031C94B4 BL 0x1C16F20
	0x031C94B8 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 And W8, W1, 1
	002 Move [X0+25], W8
	003 Return X0

Method: LTDescr setRect(UnityEngine.RectTransform rect)

Disassembly:
	0x031C94BC MOV X8, X0
	0x031C94C0 LDR X0, [X0 + 0x58]

ISIL:
	001 Move [X0+192], X1
	002 Return X0

Method: LTDescr setSprites(UnityEngine.Sprite[] sprites)

Disassembly:
	0x031C94C4 STR W31, [X8 + 0x60]
	0x031C94C8 CBZ X0, 0x31C94EC

ISIL:
	001 Move [X0+224], X1
	002 Return X0

Method: LTDescr setFrameRate(System.Single frameRate)

Disassembly:
	0x031C94CC LDR X19, [X8 + 0xE8]
	0x031C94D0 MOV X1, X31
	0x031C94D4 BL 0x3C3F830
	0x031C94D8 CBZ X19, 0x31C94EC
	0x031C94DC STP S0, S1, [X19 + 0x34]
	0x031C94E0 STP S2, S3, [X19 + 0x3C]
	0x031C94E4 LDP X30, X19, [X31], #0x10
	0x031C94E8 RET
	0x031C94EC BL 0x1C16F20
	0x031C94F0 STP D13, D12, [X31 - 0x50]!

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+224]
	003 Compare X8, 0
	004 JumpIfEqual {11}
	005 Move V1, [X8+24]
	006 NotImplemented "Instruction SCVTF not yet implemented."
	007 NotImplemented "Instruction FDIV not yet implemented."
	008 Move [X0+40], S0
	009 Move X30, [X31+16]
	010 Return X0
	011 Call 0x1C17F20

Method: LTDescr setOnStart(System.Action onStart)

Disassembly:
	0x031C94F4 STP D11, D10, [X31 + 0x10]
	0x031C94F8 STP D9, D8, [X31 + 0x20]
	0x031C94FC STP X30, X21, [X31 + 0x30]
	0x031C9500 STP X20, X19, [X31 + 0x40]
	0x031C9504 ADRP X20, 0x1212000
	0x031C9508 LDRB W8, [X20 + 0xFDB]
	0x031C950C MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move [X8+224], X1
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: LTDescr setDirection(System.Single direction)

Disassembly:
	0x031C9510 TBNZ X8, 0x0, 0x31C9528
	0x031C9514 ADRP X0, 0xF56000
	0x031C9518 LDR X0, [X0 + 0x368]
	0x031C951C BL 0x1C16CF4
	0x031C9520 MOVZ W8, 0x1
	0x031C9524 STRB W8, [X20 + 0xFDB]
	0x031C9528 LDR X8, [X19 + 0xA0]
	0x031C952C CBZ X8, 0x31C970C
	0x031C9530 LDR X9, [X8 + 0x18]
	0x031C9534 LDR X0, [X8 + 0x40]
	0x031C9538 LDR X1, [X8 + 0x28]
	0x031C953C ADRP X21, 0xF56000
	0x031C9540 LDR X21, [X21 + 0x368]
	0x031C9544 BLR X9
	0x031C9548 LDR X8, [X21]
	0x031C954C LDR X9, [X8 + 0xB8]
	0x031C9550 STP S0, S1, [X9 + 0x8]
	0x031C9554 STR S2, [X9 + 0x10]
	0x031C9558 LDR X8, [X8 + 0xB8]
	0x031C955C LDR V0, [X8 + 0x8]
	0x031C9560 STR S0, [X8]
	0x031C9564 LDR X0, [X19 + 0x58]
	0x031C9568 CBZ X0, 0x31C970C
	0x031C956C MOV X1, X31
	0x031C9570 BL 0x3C3EB78
	0x031C9574 LDR X8, [X19 + 0xE8]
	0x031C9578 CBZ X8, 0x31C970C
	0x031C957C LDR X20, [X19 + 0x58]
	0x031C9580 CBZ X20, 0x31C970C
	0x031C9584 MOV V8.16B, V0.16B
	0x031C9588 MOV V9.16B, V1.16B
	0x031C958C MOV V10.16B, V2.16B
	0x031C9590 LDP S1, S2, [X8 + 0x1C]
	0x031C9594 LDR V0, [X8 + 0x18]
	0x031C9598 MOV X0, X20
	0x031C959C MOV X1, X31
	0x031C95A0 BL 0x3C3DE4C
	0x031C95A4 LDR X8, [X19 + 0xE8]
	0x031C95A8 CBZ X8, 0x31C970C
	0x031C95AC LDR X0, [X19 + 0x58]
	0x031C95B0 CBZ X0, 0x31C970C
	0x031C95B4 MOV V11.16B, V0.16B
	0x031C95B8 MOV V12.16B, V1.16B
	0x031C95BC MOV V13.16B, V2.16B
	0x031C95C0 LDP S1, S2, [X8 + 0x28]
	0x031C95C4 LDR V0, [X8 + 0x24]
	0x031C95C8 MOV X1, X31
	0x031C95CC BL 0x3C40610
	0x031C95D0 LDR X8, [X19 + 0xE8]
	0x031C95D4 CBZ X8, 0x31C970C
	0x031C95D8 MOV V3.16B, V0.16B
	0x031C95DC LDR V0, [X8 + 0x30]
	0x031C95E0 MOV V4.16B, V1.16B
	0x031C95E4 MOV V5.16B, V2.16B
	0x031C95E8 MOV X0, X20
	0x031C95EC FNEG S6, S0
	0x031C95F0 MOV V0.16B, V11.16B
	0x031C95F4 MOV V1.16B, V12.16B
	0x031C95F8 MOV V2.16B, V13.16B
	0x031C95FC MOV X1, X31
	0x031C9600 BL 0x3C40680
	0x031C9604 LDR X0, [X19 + 0x58]
	0x031C9608 CBZ X0, 0x31C970C
	0x031C960C MOV X1, X31
	0x031C9610 BL 0x3C3EB78
	0x031C9614 LDR X0, [X19 + 0x58]
	0x031C9618 CBZ X0, 0x31C970C
	0x031C961C FSUB S2, S10, S2
	0x031C9620 FSUB S1, S9, S1
	0x031C9624 FSUB S0, S8, S0
	0x031C9628 FSUB S2, S10, S2
	0x031C962C FSUB S1, S9, S1
	0x031C9630 FSUB S0, S8, S0
	0x031C9634 MOV X1, X31
	0x031C9638 BL 0x3C3EC04
	0x031C963C LDR X8, [X19 + 0xE8]
	0x031C9640 CBZ X8, 0x31C970C
	0x031C9644 LDR X0, [X19 + 0x58]
	0x031C9648 CBZ X0, 0x31C970C
	0x031C964C LDP S2, S3, [X8 + 0x3C]
	0x031C9650 LDP S0, S1, [X8 + 0x34]
	0x031C9654 MOV X1, X31
	0x031C9658 BL 0x3C3F8B8
	0x031C965C LDR X8, [X19 + 0xE8]
	0x031C9660 CBZ X8, 0x31C970C
	0x031C9664 LDR X0, [X19 + 0x58]
	0x031C9668 CBZ X0, 0x31C970C
	0x031C966C LDP S1, S2, [X8 + 0x1C]
	0x031C9670 LDR V0, [X8 + 0x18]
	0x031C9674 MOV X1, X31
	0x031C9678 BL 0x3C3DE4C
	0x031C967C LDR X8, [X19 + 0xE8]
	0x031C9680 CBZ X8, 0x31C970C
	0x031C9684 LDR X20, [X19 + 0x58]
	0x031C9688 CBZ X20, 0x31C970C
	0x031C968C MOV V8.16B, V0.16B
	0x031C9690 MOV V9.16B, V1.16B
	0x031C9694 MOV V10.16B, V2.16B
	0x031C9698 LDP S1, S2, [X8 + 0x28]
	0x031C969C LDR V0, [X8 + 0x24]
	0x031C96A0 MOV X0, X20
	0x031C96A4 MOV X1, X31
	0x031C96A8 BL 0x3C40610
	0x031C96AC LDR X8, [X21]
	0x031C96B0 MOV V3.16B, V0.16B
	0x031C96B4 MOV V4.16B, V1.16B
	0x031C96B8 MOV V5.16B, V2.16B
	0x031C96BC LDR X8, [X8 + 0xB8]
	0x031C96C0 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1213000
	009 Move W8, [X20+4050]
	010 Move V8, V0
	011 Move X19, X0
	012 Move [X31+12], S0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0xF2B000
	018 Move X0, [X0+2600]
	019 Call 0x1C17CF4
	020 Move X0, 0xF57000
	021 Move X0, [X0+1008]
	022 Call 0x1C17CF4
	023 Move X0, 0xF57000
	024 Move X0, [X0+1048]
	025 Call 0x1C17CF4
	026 Move X0, 0xF57000
	027 Move X0, [X0+2784]
	028 Call 0x1C17CF4
	029 Move X0, 0xF57000
	030 Move X0, [X0+2792]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+4050], W8
	034 Move V0, [X19+64]
	035 Move S1, -1
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move S1, 1
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Add X0, X31, 12
	040 Move X1, X31
	041 Call Single.ToString, X0
	042 Move X8, 0xF57000
	043 Move X8, [X8+2792]
	044 Move X9, 0xF57000
	045 Move X9, [X9+2784]
	046 Move X1, X0
	047 Move X8, [X8]
	048 Move X3, X31
	049 Move X2, [X9]
	050 Move X0, X8
	051 Call String.Concat, X0, X1, X2
	052 Move X8, 0xF2B000
	053 Move X8, [X8+2600]
	054 Move X20, X0
	055 Move X8, [X8]
	056 Move W9, [X8+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {61}
	059 Move X0, X8
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Move X1, X31
	063 Call Debug.LogWarning, X0
	064 NotImplemented "Instruction FCMP not yet implemented."
	065 Move W8, [X19+21]
	066 Compare W8, 0
	067 JumpIfEqual {69}
	068 Move [X19+64], S8
	069 Move X22, [X19+232]
	070 Compare X22, 0
	071 JumpIfEqual {115}
	072 Move X8, [X22+72]
	073 Compare X8, 0
	074 JumpIfEqual {89}
	075 Move X0, [X8+16]
	076 Move X1, X31
	077 Call LTUtility.reverse, X0
	078 Move X8, 0xF57000
	079 Move X8, [X8+1008]
	080 Move X20, X0
	081 Move X8, [X8]
	082 Move X0, X8
	083 Call 0x1C17F10
	084 Move X1, X20
	085 Move X2, X31
	086 Move X21, X0
	087 Call LTBezierPath..ctor, X0, X1
	088 Move [X22+72], X21
	089 Move X8, [X22+80]
	090 Compare X8, 0
	091 JumpIfEqual {106}
	092 Move X0, [X8+24]
	093 Move X1, X31
	094 Call LTUtility.reverse, X0
	095 Move X8, 0xF57000
	096 Move X8, [X8+1048]
	097 Move X20, X0
	098 Move X8, [X8]
	099 Move X0, X8
	100 Call 0x1C17F10
	101 Move X1, X20
	102 Move X2, X31
	103 Move X21, X0
	104 Call LTSpline..ctor, X0, X1
	105 Move [X22+80], X21
	106 Move X0, X19
	107 Move X20, [X31+48]
	108 Move X19, [X31+56]
	109 Move X22, [X31+32]
	110 Move X21, [X31+40]
	111 Move X30, [X31+24]
	112 Move V8, [X31+16]
	113 Add X31, X31, 64
	114 Return X0
	115 Call 0x1C17F20

Method: LTDescr setRecursive(System.Boolean useRecursion)

Disassembly:
	0x031C96C4 MOV V0.16B, V8.16B
	0x031C96C8 MOV V1.16B, V9.16B
	0x031C96CC LDR V6, [X8]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+26], W8
	003 Return X0

Method: System.Void <setMoveX>b__73_0()

Disassembly:
	0x031C96D0 MOV V2.16B, V10.16B
	0x031C96D4 MOV X1, X31
	0x031C96D8 BL 0x3C40680
	0x031C96DC LDR X8, [X19 + 0xE8]
	0x031C96E0 CBZ X8, 0x31C970C
	0x031C96E4 LDR X9, [X21]
	0x031C96E8 LDP X20, X19, [X31 + 0x40]
	0x031C96EC LDP X30, X21, [X31 + 0x30]
	0x031C96F0 LDP D9, D8, [X31 + 0x20]
	0x031C96F4 LDR X9, [X9 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_position, X0
	009 Move [X19+96], S0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setMoveX>b__73_1()

Disassembly:
	0x031C96F8 LDP D11, D10, [X31 + 0x10]
	0x031C96FC LDR V0, [X9]
	0x031C9700 STR S0, [X8 + 0x30]
	0x031C9704 LDP D13, D12, [X31], #0x50
	0x031C9708 RET
	0x031C970C BL 0x1C16F20
	0x031C9710 STR X30, [X31 - 0x50]!
	0x031C9714 STP X26, X25, [X31 + 0x10]
	0x031C9718 STP X24, X23, [X31 + 0x20]
	0x031C971C STP X22, X21, [X31 + 0x30]
	0x031C9720 STP X20, X19, [X31 + 0x40]
	0x031C9724 ADRP X20, 0x1212000
	0x031C9728 LDRB W8, [X20 + 0xFDC]
	0x031C972C MOV X19, X0
	0x031C9730 TBNZ X8, 0x0, 0x31C97C0
	0x031C9734 ADRP X0, 0xF56000
	0x031C9738 LDR X0, [X0 + 0x428]
	0x031C973C BL 0x1C16CF4
	0x031C9740 ADRP X0, 0xF56000
	0x031C9744 LDR X0, [X0 + 0x5A0]
	0x031C9748 BL 0x1C16CF4
	0x031C974C ADRP X0, 0xF56000
	0x031C9750 LDR X0, [X0 + 0x9D0]
	0x031C9754 BL 0x1C16CF4
	0x031C9758 ADRP X0, 0xF56000
	0x031C975C LDR X0, [X0 + 0x9B0]
	0x031C9760 BL 0x1C16CF4
	0x031C9764 ADRP X0, 0xF2A000
	0x031C9768 LDR X0, [X0 + 0xE00]
	0x031C976C BL 0x1C16CF4
	0x031C9770 ADRP X0, 0xF2A000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+160]
	007 Compare X8, 0
	008 JumpIfEqual {40}
	009 Move X20, X0
	010 Move X19, [X0+88]
	011 Move X9, [X8+24]
	012 Move X0, [X8+64]
	013 Move X1, [X8+40]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X0, [X20+88]
	016 Compare X0, 0
	017 JumpIfEqual {40}
	018 Move X1, X31
	019 Move V8, V0
	020 Call Transform.get_position, X0
	021 Move X0, [X20+88]
	022 Compare X0, 0
	023 JumpIfEqual {40}
	024 Move X1, X31
	025 Move V9, V1
	026 Call Transform.get_position, X0
	027 Compare X19, 0
	028 JumpIfEqual {40}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move V0, V8
	034 Move V1, V9
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call Transform.set_position, X0, X1
	039 Return 
	040 Call 0x1C17F20

Method: System.Void <setMoveY>b__74_0()

Disassembly:
	0x031C9774 LDR X0, [X0 + 0xE18]
	0x031C9778 BL 0x1C16CF4
	0x031C977C ADRP X0, 0xF56000
	0x031C9780 LDR X0, [X0 + 0xAF0]
	0x031C9784 BL 0x1C16CF4
	0x031C9788 ADRP X0, 0xF2A000
	0x031C978C LDR X0, [X0 + 0x598]
	0x031C9790 BL 0x1C16CF4
	0x031C9794 ADRP X0, 0xF2C000
	0x031C9798 LDR X0, [X0 + 0x638]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_position, X0
	009 Move [X19+96], S1
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setMoveY>b__74_1()

Disassembly:
	0x031C979C BL 0x1C16CF4
	0x031C97A0 ADRP X0, 0xF56000
	0x031C97A4 LDR X0, [X0 + 0x9B8]
	0x031C97A8 BL 0x1C16CF4
	0x031C97AC ADRP X0, 0xF52000
	0x031C97B0 LDR X0, [X0 + 0x2E0]
	0x031C97B4 BL 0x1C16CF4
	0x031C97B8 MOVZ W8, 0x1
	0x031C97BC STRB W8, [X20 + 0xFDC]
	0x031C97C0 LDR X0, [X19 + 0x58]
	0x031C97C4 CBZ X0, 0x31C9BF8
	0x031C97C8 ADRP X8, 0xF56000
	0x031C97CC LDR X8, [X8 + 0x9D0]
	0x031C97D0 ADRP X23, 0xF2A000
	0x031C97D4 LDR X1, [X8]
	0x031C97D8 LDR X23, [X23 + 0x598]
	0x031C97DC BL 0x21A3894
	0x031C97E0 LDR X8, [X23]
	0x031C97E4 MOV X20, X0
	0x031C97E8 LDR W9, [X8 + 0xE0]
	0x031C97EC CBNZ W9, 0x31C97F8
	0x031C97F0 MOV X0, X8
	0x031C97F4 BL 0x1C16DFC
	0x031C97F8 MOV X0, X20
	0x031C97FC MOV X1, X31
	0x031C9800 MOV X2, X31
	0x031C9804 BL 0x3C354F8
	0x031C9808 TBZ X0, 0x0, 0x31C9864
	0x031C980C CBZ X20, 0x31C9BF8
	0x031C9810 MOV X0, X20

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0+88]
	007 Compare X19, 0
	008 JumpIfEqual {38}
	009 Move X20, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Transform.get_position, X0
	013 Move X8, [X20+160]
	014 Compare X8, 0
	015 JumpIfEqual {38}
	016 Move X9, [X8+24]
	017 Move X0, [X8+64]
	018 Move X1, [X8+40]
	019 Move V8, V0
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X0, [X20+88]
	022 Compare X0, 0
	023 JumpIfEqual {38}
	024 Move X1, X31
	025 Move V9, V0
	026 Call Transform.get_position, X0
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move V0, V8
	032 Move V1, V9
	033 Move X1, X31
	034 Move D9, [X31+48]
	035 Move D8, [X31+56]
	036 Call Transform.set_position, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Void <setMoveZ>b__75_0()

Disassembly:
	0x031C9814 MOV X1, X31
	0x031C9818 BL 0x3C41290
	0x031C981C STR S3, [X19 + 0x60]
	0x031C9820 ADRP X8, 0xF56000
	0x031C9824 LDR X8, [X8 + 0x428]
	0x031C9828 ADRP X20, 0xF56000
	0x031C982C LDR X0, [X8]
	0x031C9830 LDR X20, [X20 + 0xAF0]
	0x031C9834 BL 0x1C16F10
	0x031C9838 LDR X2, [X20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_position, X0
	009 Move [X19+96], S2
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setMoveZ>b__75_1()

Disassembly:
	0x031C983C MOV X1, X19
	0x031C9840 MOV X20, X0
	0x031C9844 BL 0x31C0024
	0x031C9848 STR X20, [X19 + 0xA8]
	0x031C984C LDP X20, X19, [X31 + 0x40]
	0x031C9850 LDP X22, X21, [X31 + 0x30]
	0x031C9854 LDP X24, X23, [X31 + 0x20]
	0x031C9858 LDP X26, X25, [X31 + 0x10]
	0x031C985C LDR X30, [X31], #0x50
	0x031C9860 RET
	0x031C9864 LDR X0, [X19 + 0x58]
	0x031C9868 CBZ X0, 0x31C9BF8
	0x031C986C ADRP X21, 0xF56000
	0x031C9870 LDR X21, [X21 + 0x5A0]
	0x031C9874 LDR X1, [X21]
	0x031C9878 BL 0x21A3894
	0x031C987C LDR X8, [X23]
	0x031C9880 MOV X20, X0
	0x031C9884 LDR W9, [X8 + 0xE0]
	0x031C9888 CBNZ W9, 0x31C9894
	0x031C988C MOV X0, X8
	0x031C9890 BL 0x1C16DFC
	0x031C9894 MOV X0, X20
	0x031C9898 MOV X1, X31
	0x031C989C MOV X2, X31
	0x031C98A0 BL 0x3C354F8
	0x031C98A4 TBZ X0, 0x0, 0x31C990C
	0x031C98A8 LDR X0, [X19 + 0x58]
	0x031C98AC CBZ X0, 0x31C9BF8
	0x031C98B0 LDR X1, [X21]
	0x031C98B4 BL 0x21A3894

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0+88]
	007 Compare X19, 0
	008 JumpIfEqual {39}
	009 Move X20, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Transform.get_position, X0
	013 Move X0, [X20+88]
	014 Compare X0, 0
	015 JumpIfEqual {39}
	016 Move X1, X31
	017 Move V8, V0
	018 Call Transform.get_position, X0
	019 Move X8, [X20+160]
	020 Compare X8, 0
	021 JumpIfEqual {39}
	022 Move X9, [X8+24]
	023 Move X0, [X8+64]
	024 Move X1, [X8+40]
	025 Move V9, V1
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move V2, V0
	032 Move V0, V8
	033 Move V1, V9
	034 Move X1, X31
	035 Move D9, [X31+48]
	036 Move D8, [X31+56]
	037 Call Transform.set_position, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Void <setMoveLocalX>b__76_0()

Disassembly:
	0x031C98B8 CBZ X0, 0x31C9BF8
	0x031C98BC MOV X1, X31
	0x031C98C0 BL 0x3C1341C
	0x031C98C4 CBZ X0, 0x31C9BF8
	0x031C98C8 ADRP X8, 0xF52000
	0x031C98CC LDR X8, [X8 + 0x2E0]
	0x031C98D0 MOV X2, X31
	0x031C98D4 LDR X1, [X8]
	0x031C98D8 BL 0x3C14D4C
	0x031C98DC TBZ X0, 0x0, 0x31C990C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_localPosition, X0
	009 Move [X19+96], S0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setMoveLocalX>b__76_1()

Disassembly:
	0x031C98E0 LDR X0, [X19 + 0x58]
	0x031C98E4 CBZ X0, 0x31C9BF8
	0x031C98E8 LDR X1, [X21]
	0x031C98EC BL 0x21A3894
	0x031C98F0 CBZ X0, 0x31C9BF8
	0x031C98F4 MOV X1, X31
	0x031C98F8 BL 0x3C1341C
	0x031C98FC CBZ X0, 0x31C9BF8
	0x031C9900 MOV X1, X31
	0x031C9904 BL 0x3C14794
	0x031C9908 B 0x31C981C
	0x031C990C LDR X0, [X19 + 0x58]
	0x031C9910 CBZ X0, 0x31C9BF8
	0x031C9914 LDR X1, [X21]
	0x031C9918 BL 0x21A3894
	0x031C991C LDR X8, [X23]
	0x031C9920 MOV X20, X0
	0x031C9924 LDR W9, [X8 + 0xE0]
	0x031C9928 CBNZ W9, 0x31C9934
	0x031C992C MOV X0, X8
	0x031C9930 BL 0x1C16DFC
	0x031C9934 MOV X0, X20
	0x031C9938 MOV X1, X31
	0x031C993C MOV X2, X31
	0x031C9940 BL 0x3C354F8
	0x031C9944 TBZ X0, 0x0, 0x31C99B0
	0x031C9948 LDR X0, [X19 + 0x58]
	0x031C994C CBZ X0, 0x31C9BF8
	0x031C9950 LDR X1, [X21]
	0x031C9954 BL 0x21A3894
	0x031C9958 CBZ X0, 0x31C9BF8

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+160]
	007 Compare X8, 0
	008 JumpIfEqual {40}
	009 Move X20, X0
	010 Move X19, [X0+88]
	011 Move X9, [X8+24]
	012 Move X0, [X8+64]
	013 Move X1, [X8+40]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X0, [X20+88]
	016 Compare X0, 0
	017 JumpIfEqual {40}
	018 Move X1, X31
	019 Move V8, V0
	020 Call Transform.get_localPosition, X0
	021 Move X0, [X20+88]
	022 Compare X0, 0
	023 JumpIfEqual {40}
	024 Move X1, X31
	025 Move V9, V1
	026 Call Transform.get_localPosition, X0
	027 Compare X19, 0
	028 JumpIfEqual {40}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move V0, V8
	034 Move V1, V9
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call Transform.set_localPosition, X0, X1
	039 Return 
	040 Call 0x1C17F20

Method: System.Void <setMoveLocalY>b__77_0()

Disassembly:
	0x031C995C MOV X1, X31
	0x031C9960 BL 0x3C1341C
	0x031C9964 CBZ X0, 0x31C9BF8
	0x031C9968 ADRP X20, 0xF56000
	0x031C996C LDR X20, [X20 + 0x9B8]
	0x031C9970 MOV X2, X31
	0x031C9974 LDR X1, [X20]
	0x031C9978 BL 0x3C14D4C
	0x031C997C TBZ X0, 0x0, 0x31C99B0
	0x031C9980 LDR X0, [X19 + 0x58]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_localPosition, X0
	009 Move [X19+96], S1
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setMoveLocalY>b__77_1()

Disassembly:
	0x031C9984 CBZ X0, 0x31C9BF8
	0x031C9988 LDR X1, [X21]
	0x031C998C BL 0x21A3894
	0x031C9990 CBZ X0, 0x31C9BF8
	0x031C9994 MOV X1, X31
	0x031C9998 BL 0x3C1341C
	0x031C999C CBZ X0, 0x31C9BF8
	0x031C99A0 LDR X1, [X20]
	0x031C99A4 MOV X2, X31
	0x031C99A8 BL 0x3C14868
	0x031C99AC B 0x31C981C
	0x031C99B0 LDR X0, [X19 + 0x58]
	0x031C99B4 CBZ X0, 0x31C9BF8
	0x031C99B8 MOV X1, X31
	0x031C99BC BL 0x3C40C8C
	0x031C99C0 CMP W0, 0x1
	0x031C99C4 B.LT 0x31C9820
	0x031C99C8 LDR X0, [X19 + 0x58]
	0x031C99CC CBZ X0, 0x31C9BF8
	0x031C99D0 MOV X1, X31
	0x031C99D4 BL 0x3C4100C
	0x031C99D8 MOV X20, X0
	0x031C99DC CBZ X0, 0x31C9C04
	0x031C99E0 ADRP X25, 0xF2A000
	0x031C99E4 ADRP X26, 0xF2C000
	0x031C99E8 ADRP X24, 0xF56000
	0x031C99EC LDR X25, [X25 + 0xE18]
	0x031C99F0 LDR X26, [X26 + 0x638]
	0x031C99F4 LDR X24, [X24 + 0x9B0]
	0x031C99F8 LDR X8, [X20]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0+88]
	007 Compare X19, 0
	008 JumpIfEqual {38}
	009 Move X20, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Transform.get_localPosition, X0
	013 Move X8, [X20+160]
	014 Compare X8, 0
	015 JumpIfEqual {38}
	016 Move X9, [X8+24]
	017 Move X0, [X8+64]
	018 Move X1, [X8+40]
	019 Move V8, V0
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X0, [X20+88]
	022 Compare X0, 0
	023 JumpIfEqual {38}
	024 Move X1, X31
	025 Move V9, V0
	026 Call Transform.get_localPosition, X0
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move V0, V8
	032 Move V1, V9
	033 Move X1, X31
	034 Move D9, [X31+48]
	035 Move D8, [X31+56]
	036 Call Transform.set_localPosition, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Void <setMoveLocalZ>b__78_0()

Disassembly:
	0x031C99FC LDR X1, [X25]
	0x031C9A00 LDRH W9, [X8 + 0x12E]
	0x031C9A04 CBZ X9, 0x31C9A28
	0x031C9A08 LDR X10, [X8 + 0xB0]
	0x031C9A0C ADD X10, X10, 0x8
	0x031C9A10 LDUR X11, [X10 - 0x8]
	0x031C9A14 CMP X11, X1
	0x031C9A18 B.EQ 0x31C9A38
	0x031C9A1C SUBS X9, X9, 0x1
	0x031C9A20 ADD X10, X10, 0x10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_localPosition, X0
	009 Move [X19+96], S2
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setMoveLocalZ>b__78_1()

Disassembly:
	0x031C9A24 B.NE 0x31C9A10
	0x031C9A28 MOV X0, X20
	0x031C9A2C MOV W2, W31
	0x031C9A30 BL 0x1C5C788
	0x031C9A34 B 0x31C9A44
	0x031C9A38 LDRSW X9, [X10]
	0x031C9A3C ADD X8, X8, X9, 0x4, LSL
	0x031C9A40 ADD X0, X8, 0x138
	0x031C9A44 LDP X8, X1, [X0]
	0x031C9A48 MOV X0, X20
	0x031C9A4C BLR X8
	0x031C9A50 TBZ X0, 0x0, 0x31C9B60
	0x031C9A54 LDR X8, [X20]
	0x031C9A58 LDR X1, [X25]
	0x031C9A5C LDRH W9, [X8 + 0x12E]
	0x031C9A60 CBZ X9, 0x31C9A84
	0x031C9A64 LDR X10, [X8 + 0xB0]
	0x031C9A68 ADD X10, X10, 0x8
	0x031C9A6C LDUR X11, [X10 - 0x8]
	0x031C9A70 CMP X11, X1
	0x031C9A74 B.EQ 0x31C9A94
	0x031C9A78 SUBS X9, X9, 0x1
	0x031C9A7C ADD X10, X10, 0x10
	0x031C9A80 B.NE 0x31C9A6C
	0x031C9A84 MOVZ W2, 0x1
	0x031C9A88 MOV X0, X20
	0x031C9A8C BL 0x1C5C788
	0x031C9A90 B 0x31C9AA4
	0x031C9A94 LDR W9, [X10]
	0x031C9A98 ADD W9, W9, 0x1
	0x031C9A9C ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0+88]
	007 Compare X19, 0
	008 JumpIfEqual {39}
	009 Move X20, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Transform.get_localPosition, X0
	013 Move X0, [X20+88]
	014 Compare X0, 0
	015 JumpIfEqual {39}
	016 Move X1, X31
	017 Move V8, V0
	018 Call Transform.get_localPosition, X0
	019 Move X8, [X20+160]
	020 Compare X8, 0
	021 JumpIfEqual {39}
	022 Move X9, [X8+24]
	023 Move X0, [X8+64]
	024 Move X1, [X8+40]
	025 Move V9, V1
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move V2, V0
	032 Move V0, V8
	033 Move V1, V9
	034 Move X1, X31
	035 Move D9, [X31+48]
	036 Move D8, [X31+56]
	037 Call Transform.set_localPosition, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Void <setMoveCurved>b__81_0()

Disassembly:
	0x031C9AA0 ADD X0, X8, 0x138
	0x031C9AA4 LDP X8, X1, [X0]
	0x031C9AA8 MOV X0, X20
	0x031C9AAC BLR X8
	0x031C9AB0 MOV X21, X0
	0x031C9AB4 CBZ X0, 0x31C9BFC
	0x031C9AB8 LDR X8, [X21]
	0x031C9ABC LDR X1, [X26]
	0x031C9AC0 LDRB W10, [X8 + 0x130]
	0x031C9AC4 LDRB W9, [X1 + 0x130]
	0x031C9AC8 CMP W10, W9
	0x031C9ACC B.CC 0x31C9BF0
	0x031C9AD0 LDR X8, [X8 + 0xC8]
	0x031C9AD4 ADD X8, X8, X9, 0x3, LSL
	0x031C9AD8 LDUR X8, [X8 - 0x8]
	0x031C9ADC CMP X8, X1
	0x031C9AE0 B.NE 0x31C9BF0
	0x031C9AE4 MOV X0, X21
	0x031C9AE8 MOV X1, X31
	0x031C9AEC BL 0x3C32ECC
	0x031C9AF0 CBZ X0, 0x31C9C00
	0x031C9AF4 LDR X1, [X24]
	0x031C9AF8 BL 0x21E52E4
	0x031C9AFC MOV X22, X0
	0x031C9B00 LDR X0, [X23]
	0x031C9B04 LDR W8, [X0 + 0xE0]
	0x031C9B08 CBNZ W8, 0x31C9B10
	0x031C9B0C BL 0x1C16DFC
	0x031C9B10 MOV X0, X22
	0x031C9B14 MOV X1, X31
	0x031C9B18 MOV X2, X31
	0x031C9B1C BL 0x3C354F8
	0x031C9B20 TBZ X0, 0x0, 0x31C99F8
	0x031C9B24 MOV X0, X21
	0x031C9B28 MOV X1, X31
	0x031C9B2C BL 0x3C32ECC
	0x031C9B30 CBZ X0, 0x31C9C10
	0x031C9B34 LDR X1, [X24]
	0x031C9B38 BL 0x21E52E4
	0x031C9B3C CBZ X0, 0x31C9C14
	0x031C9B40 MOV X1, X31
	0x031C9B44 BL 0x3C1341C
	0x031C9B48 CBZ X0, 0x31C9C18
	0x031C9B4C MOV X1, X31
	0x031C9B50 BL 0x3C14794
	0x031C9B54 MOV X21, X31
	0x031C9B58 STR S3, [X19 + 0x60]
	0x031C9B5C B 0x31C9B64
	0x031C9B60 MOV X21, X31
	0x031C9B64 MOVZ W22, 0x3
	0x031C9B68 ADRP X23, 0xF2A000
	0x031C9B6C LDR X23, [X23 + 0xE00]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1213000
	005 Move W8, [X20+4051]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF57000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4051], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {69}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF57000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X8, [X8+184]
	031 Move V0, [X8+8]
	032 Move [X8], S0
	033 Move X8, [X19+232]
	034 Compare X8, 0
	035 JumpIfEqual {69}
	036 Move X0, [X8+72]
	037 Compare X0, 0
	038 JumpIfEqual {69}
	039 Move W8, [X0+28]
	040 Compare W8, 0
	041 JumpIfEqual {52}
	042 Move W8, [X0+29]
	043 Move X1, [X19+88]
	044 Move X2, X31
	045 Compare W8, 0
	046 JumpIfEqual {64}
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Call LTBezierPath.place2d, X0, X1, V0
	051 Return 
	052 Move X19, [X19+88]
	053 Move X1, X31
	054 Call LTBezierPath.point, X0, V0
	055 Compare X19, 0
	056 JumpIfEqual {69}
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X1, X31
	061 Move X30, [X31+32]
	062 Call Transform.set_position, X0, X1
	063 Return 
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Call LTBezierPath.place, X0, X1, V0
	068 Return 
	069 Call 0x1C17F20

Method: System.Void <setMoveCurvedLocal>b__82_0()

Disassembly:
	0x031C9B70 MOV X0, X20
	0x031C9B74 LDR X1, [X23]
	0x031C9B78 BL 0x1C16E00
	0x031C9B7C CBZ X0, 0x31C9BDC
	0x031C9B80 LDR X8, [X0]
	0x031C9B84 LDR X1, [X23]
	0x031C9B88 MOV X20, X0
	0x031C9B8C LDRH W9, [X8 + 0x12E]
	0x031C9B90 CBZ X9, 0x31C9BB4
	0x031C9B94 LDR X10, [X8 + 0xB0]
	0x031C9B98 ADD X10, X10, 0x8
	0x031C9B9C LDUR X11, [X10 - 0x8]
	0x031C9BA0 CMP X11, X1
	0x031C9BA4 B.EQ 0x31C9BC4
	0x031C9BA8 SUBS X9, X9, 0x1
	0x031C9BAC ADD X10, X10, 0x10
	0x031C9BB0 B.NE 0x31C9B9C
	0x031C9BB4 MOV X0, X20
	0x031C9BB8 MOV W2, W31
	0x031C9BBC BL 0x1C5C788
	0x031C9BC0 B 0x31C9BD0
	0x031C9BC4 LDRSW X9, [X10]
	0x031C9BC8 ADD X8, X8, X9, 0x4, LSL
	0x031C9BCC ADD X0, X8, 0x138
	0x031C9BD0 LDP X8, X1, [X0]
	0x031C9BD4 MOV X0, X20
	0x031C9BD8 BLR X8
	0x031C9BDC CBNZ X21, 0x31C9C08
	0x031C9BE0 CMP W22, 0x3
	0x031C9BE4 B.EQ 0x31C9820
	0x031C9BE8 CBZ W22, 0x31C9820
	0x031C9BEC B 0x31C984C
	0x031C9BF0 MOV X0, X21
	0x031C9BF4 BL 0x1C171E0
	0x031C9BF8 BL 0x1C16F20
	0x031C9BFC BL 0x1C16F20
	0x031C9C00 BL 0x1C16F20
	0x031C9C04 BL 0x1C16F20
	0x031C9C08 MOV X0, X21
	0x031C9C0C BL 0x1C16F18
	0x031C9C10 BL 0x1C16F20
	0x031C9C14 BL 0x1C16F20
	0x031C9C18 BL 0x1C16F20
	0x031C9C1C B 0x31C9C4C
	0x031C9C20 B 0x31C9C4C
	0x031C9C24 B 0x31C9C4C
	0x031C9C28 B 0x31C9C4C
	0x031C9C2C B 0x31C9C4C
	0x031C9C30 B 0x31C9C4C
	0x031C9C34 B 0x31C9C4C
	0x031C9C38 B 0x31C9C4C
	0x031C9C3C B 0x31C9C4C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1213000
	005 Move W8, [X20+4052]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF57000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4052], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {69}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF57000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X8, [X8+184]
	031 Move V0, [X8+8]
	032 Move [X8], S0
	033 Move X8, [X19+232]
	034 Compare X8, 0
	035 JumpIfEqual {69}
	036 Move X0, [X8+72]
	037 Compare X0, 0
	038 JumpIfEqual {69}
	039 Move W8, [X0+28]
	040 Compare W8, 0
	041 JumpIfEqual {52}
	042 Move W8, [X0+29]
	043 Move X1, [X19+88]
	044 Move X2, X31
	045 Compare W8, 0
	046 JumpIfEqual {64}
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Call LTBezierPath.placeLocal2d, X0, X1, V0
	051 Return 
	052 Move X19, [X19+88]
	053 Move X1, X31
	054 Call LTBezierPath.point, X0, V0
	055 Compare X19, 0
	056 JumpIfEqual {69}
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X1, X31
	061 Move X30, [X31+32]
	062 Call Transform.set_localPosition, X0, X1
	063 Return 
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Call LTBezierPath.placeLocal, X0, X1, V0
	068 Return 
	069 Call 0x1C17F20

Method: System.Void <setMoveSpline>b__83_0()

Disassembly:
	0x031C9C40 B 0x31C9C4C
	0x031C9C44 B 0x31C9C4C
	0x031C9C48 B 0x31C9C4C
	0x031C9C4C MOV X22, X0
	0x031C9C50 CMP W1, 0x1
	0x031C9C54 B.NE 0x31C9C70
	0x031C9C58 MOV X0, X22
	0x031C9C5C BL 0x3EB1AD0
	0x031C9C60 LDR X21, [X0]
	0x031C9C64 BL 0x3EB1AE0
	0x031C9C68 MOV W22, W31
	0x031C9C6C B 0x31C9B68
	0x031C9C70 MOV X21, X31
	0x031C9C74 B 0x31C9C7C
	0x031C9C78 MOV X22, X0
	0x031C9C7C ADRP X23, 0xF2A000
	0x031C9C80 LDR X23, [X23 + 0xE00]
	0x031C9C84 LDR X1, [X23]
	0x031C9C88 MOV X0, X20
	0x031C9C8C BL 0x1C16E00
	0x031C9C90 MOV X19, X0
	0x031C9C94 CBZ X0, 0x31C9CF0
	0x031C9C98 LDR X8, [X19]
	0x031C9C9C LDR X1, [X23]
	0x031C9CA0 LDRH W9, [X8 + 0x12E]
	0x031C9CA4 CBZ X9, 0x31C9CC8
	0x031C9CA8 LDR X10, [X8 + 0xB0]
	0x031C9CAC ADD X10, X10, 0x8
	0x031C9CB0 LDUR X11, [X10 - 0x8]
	0x031C9CB4 CMP X11, X1
	0x031C9CB8 B.EQ 0x31C9CD8
	0x031C9CBC SUBS X9, X9, 0x1
	0x031C9CC0 ADD X10, X10, 0x10
	0x031C9CC4 B.NE 0x31C9CB0
	0x031C9CC8 MOV X0, X19
	0x031C9CCC MOV W2, W31
	0x031C9CD0 BL 0x1C5C788
	0x031C9CD4 B 0x31C9CE4
	0x031C9CD8 LDRSW X9, [X10]
	0x031C9CDC ADD X8, X8, X9, 0x4, LSL
	0x031C9CE0 ADD X0, X8, 0x138
	0x031C9CE4 LDP X8, X1, [X0]
	0x031C9CE8 MOV X0, X19
	0x031C9CEC BLR X8
	0x031C9CF0 CBNZ X21, 0x31C9CFC
	0x031C9CF4 MOV X0, X22
	0x031C9CF8 BL 0x1D2C690
	0x031C9CFC MOV X0, X21
	0x031C9D00 BL 0x1C16F18
	0x031C9D04 BL 0x1990590
	0x031C9D08 STP D9, D8, [X31 - 0x30]!
	0x031C9D0C STP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1213000
	005 Move W8, [X20+4053]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF57000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4053], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {69}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF57000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X8, [X8+184]
	031 Move V0, [X8+8]
	032 Move [X8], S0
	033 Move X8, [X19+232]
	034 Compare X8, 0
	035 JumpIfEqual {69}
	036 Move X0, [X8+80]
	037 Compare X0, 0
	038 JumpIfEqual {69}
	039 Move W8, [X0+44]
	040 Compare W8, 0
	041 JumpIfEqual {52}
	042 Move W8, [X0+45]
	043 Move X1, [X19+88]
	044 Move X2, X31
	045 Compare W8, 0
	046 JumpIfEqual {64}
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Call LTSpline.place2d, X0, X1, V0
	051 Return 
	052 Move X19, [X19+88]
	053 Move X1, X31
	054 Call LTSpline.point, X0, V0
	055 Compare X19, 0
	056 JumpIfEqual {69}
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X1, X31
	061 Move X30, [X31+32]
	062 Call Transform.set_position, X0, X1
	063 Return 
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Call LTSpline.place, X0, X1, V0
	068 Return 
	069 Call 0x1C17F20

Method: System.Void <setMoveSplineLocal>b__84_0()

Disassembly:
	0x031C9D10 STP X20, X19, [X31 + 0x20]
	0x031C9D14 ADRP X20, 0x1212000
	0x031C9D18 LDRB W8, [X20 + 0xFDD]
	0x031C9D1C MOV X19, X0
	0x031C9D20 TBNZ X8, 0x0, 0x31C9D44
	0x031C9D24 ADRP X0, 0xF56000
	0x031C9D28 LDR X0, [X0 + 0x368]
	0x031C9D2C BL 0x1C16CF4
	0x031C9D30 ADRP X0, 0xF2A000
	0x031C9D34 LDR X0, [X0 + 0x598]
	0x031C9D38 BL 0x1C16CF4
	0x031C9D3C MOVZ W8, 0x1
	0x031C9D40 STRB W8, [X20 + 0xFDD]
	0x031C9D44 LDR X8, [X19 + 0xA0]
	0x031C9D48 CBZ X8, 0x31C9E40
	0x031C9D4C LDR X9, [X8 + 0x18]
	0x031C9D50 LDR X0, [X8 + 0x40]
	0x031C9D54 LDR X1, [X8 + 0x28]
	0x031C9D58 ADRP X21, 0xF56000
	0x031C9D5C ADRP X20, 0xF2A000
	0x031C9D60 LDR X21, [X21 + 0x368]
	0x031C9D64 LDR X20, [X20 + 0x598]
	0x031C9D68 BLR X9
	0x031C9D6C LDR X8, [X21]
	0x031C9D70 LDR X8, [X8 + 0xB8]
	0x031C9D74 STR S0, [X8]
	0x031C9D78 LDR X0, [X20]
	0x031C9D7C LDR X20, [X19 + 0xB8]
	0x031C9D80 LDR W8, [X0 + 0xE0]
	0x031C9D84 CBNZ W8, 0x31C9D8C
	0x031C9D88 BL 0x1C16DFC
	0x031C9D8C MOV X0, X20
	0x031C9D90 MOV X1, X31
	0x031C9D94 MOV X2, X31
	0x031C9D98 BL 0x3C354F8
	0x031C9D9C TBZ X0, 0x0, 0x31C9E1C
	0x031C9DA0 LDR X20, [X19 + 0xB8]
	0x031C9DA4 CBZ X20, 0x31C9E40
	0x031C9DA8 MOV X0, X20
	0x031C9DAC MOV X1, X31
	0x031C9DB0 BL 0x3C41290
	0x031C9DB4 LDR X0, [X19 + 0xB8]
	0x031C9DB8 CBZ X0, 0x31C9E40
	0x031C9DBC MOV X1, X31
	0x031C9DC0 MOV V8.16B, V0.16B
	0x031C9DC4 BL 0x3C41290
	0x031C9DC8 LDR X0, [X19 + 0xB8]
	0x031C9DCC CBZ X0, 0x31C9E40
	0x031C9DD0 MOV X1, X31
	0x031C9DD4 MOV V9.16B, V1.16B
	0x031C9DD8 BL 0x3C41290
	0x031C9DDC LDR X8, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1213000
	005 Move W8, [X20+4054]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF57000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4054], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {69}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF57000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X8, [X8+184]
	031 Move V0, [X8+8]
	032 Move [X8], S0
	033 Move X8, [X19+232]
	034 Compare X8, 0
	035 JumpIfEqual {69}
	036 Move X0, [X8+80]
	037 Compare X0, 0
	038 JumpIfEqual {69}
	039 Move W8, [X0+44]
	040 Compare W8, 0
	041 JumpIfEqual {52}
	042 Move W8, [X0+45]
	043 Move X1, [X19+88]
	044 Move X2, X31
	045 Compare W8, 0
	046 JumpIfEqual {64}
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Call LTSpline.placeLocal2d, X0, X1, V0
	051 Return 
	052 Move X19, [X19+88]
	053 Move X1, X31
	054 Call LTSpline.point, X0, V0
	055 Compare X19, 0
	056 JumpIfEqual {69}
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X1, X31
	061 Move X30, [X31+32]
	062 Call Transform.set_localPosition, X0, X1
	063 Return 
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Call LTSpline.placeLocal, X0, X1, V0
	068 Return 
	069 Call 0x1C17F20

Method: System.Void <setScaleX>b__85_0()

Disassembly:
	0x031C9DE0 MOV X0, X20
	0x031C9DE4 MOV V0.16B, V8.16B
	0x031C9DE8 MOV V1.16B, V9.16B
	0x031C9DEC LDR X8, [X8 + 0xB8]
	0x031C9DF0 MOV X1, X31
	0x031C9DF4 LDR V3, [X8]
	0x031C9DF8 BL 0x3C4132C
	0x031C9DFC LDR X8, [X21]
	0x031C9E00 LDR X0, [X19 + 0x58]
	0x031C9E04 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_localScale, X0
	009 Move [X19+96], S0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setScaleX>b__85_1()

Disassembly:
	0x031C9E08 LDP X30, X21, [X31 + 0x10]
	0x031C9E0C LDR X8, [X8 + 0xB8]
	0x031C9E10 LDR V0, [X8]
	0x031C9E14 LDP D9, D8, [X31], #0x30
	0x031C9E18 B 0x31C3918
	0x031C9E1C LDR X8, [X21]
	0x031C9E20 LDR X0, [X19 + 0x58]
	0x031C9E24 LDRB W1, [X19 + 0x1A]
	0x031C9E28 LDP X20, X19, [X31 + 0x20]
	0x031C9E2C LDR X8, [X8 + 0xB8]
	0x031C9E30 LDP X30, X21, [X31 + 0x10]
	0x031C9E34 LDR V0, [X8]
	0x031C9E38 LDP D9, D8, [X31], #0x30
	0x031C9E3C B 0x31C2C6C
	0x031C9E40 BL 0x1C16F20
	0x031C9E44 STP D9, D8, [X31 - 0x30]!
	0x031C9E48 STP X30, X21, [X31 + 0x10]
	0x031C9E4C STP X20, X19, [X31 + 0x20]
	0x031C9E50 ADRP X20, 0x1212000
	0x031C9E54 LDRB W8, [X20 + 0xFDE]
	0x031C9E58 MOV X19, X0
	0x031C9E5C TBNZ X8, 0x0, 0x31C9E80
	0x031C9E60 ADRP X0, 0xF56000
	0x031C9E64 LDR X0, [X0 + 0x368]
	0x031C9E68 BL 0x1C16CF4
	0x031C9E6C ADRP X0, 0xF2A000
	0x031C9E70 LDR X0, [X0 + 0x598]
	0x031C9E74 BL 0x1C16CF4
	0x031C9E78 MOVZ W8, 0x1
	0x031C9E7C STRB W8, [X20 + 0xFDE]
	0x031C9E80 LDR X8, [X19 + 0xA0]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+160]
	007 Compare X8, 0
	008 JumpIfEqual {40}
	009 Move X20, X0
	010 Move X19, [X0+88]
	011 Move X9, [X8+24]
	012 Move X0, [X8+64]
	013 Move X1, [X8+40]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X0, [X20+88]
	016 Compare X0, 0
	017 JumpIfEqual {40}
	018 Move X1, X31
	019 Move V8, V0
	020 Call Transform.get_localScale, X0
	021 Move X0, [X20+88]
	022 Compare X0, 0
	023 JumpIfEqual {40}
	024 Move X1, X31
	025 Move V9, V1
	026 Call Transform.get_localScale, X0
	027 Compare X19, 0
	028 JumpIfEqual {40}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move V0, V8
	034 Move V1, V9
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call Transform.set_localScale, X0, X1
	039 Return 
	040 Call 0x1C17F20

Method: System.Void <setScaleY>b__86_0()

Disassembly:
	0x031C9E84 CBZ X8, 0x31C9F8C
	0x031C9E88 LDR X9, [X8 + 0x18]
	0x031C9E8C LDR X0, [X8 + 0x40]
	0x031C9E90 LDR X1, [X8 + 0x28]
	0x031C9E94 ADRP X21, 0xF56000
	0x031C9E98 ADRP X20, 0xF2A000
	0x031C9E9C LDR X21, [X21 + 0x368]
	0x031C9EA0 LDR X20, [X20 + 0x598]
	0x031C9EA4 BLR X9
	0x031C9EA8 LDR X8, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_localScale, X0
	009 Move [X19+96], S1
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setScaleY>b__86_1()

Disassembly:
	0x031C9EAC LDR X9, [X8 + 0xB8]
	0x031C9EB0 STP S0, S1, [X9 + 0x8]
	0x031C9EB4 STR S2, [X9 + 0x10]
	0x031C9EB8 LDR X8, [X8 + 0xB8]
	0x031C9EBC LDR V0, [X8 + 0x8]
	0x031C9EC0 STR S0, [X8]
	0x031C9EC4 LDR X0, [X20]
	0x031C9EC8 LDR X20, [X19 + 0xB8]
	0x031C9ECC LDR W8, [X0 + 0xE0]
	0x031C9ED0 CBNZ W8, 0x31C9ED8
	0x031C9ED4 BL 0x1C16DFC
	0x031C9ED8 MOV X0, X20
	0x031C9EDC MOV X1, X31
	0x031C9EE0 MOV X2, X31
	0x031C9EE4 BL 0x3C354F8
	0x031C9EE8 TBZ X0, 0x0, 0x31C9F68
	0x031C9EEC LDR X20, [X19 + 0xB8]
	0x031C9EF0 CBZ X20, 0x31C9F8C
	0x031C9EF4 MOV X0, X20
	0x031C9EF8 MOV X1, X31
	0x031C9EFC BL 0x3C41290
	0x031C9F00 LDR X0, [X19 + 0xB8]
	0x031C9F04 CBZ X0, 0x31C9F8C
	0x031C9F08 MOV X1, X31
	0x031C9F0C MOV V8.16B, V0.16B
	0x031C9F10 BL 0x3C41290
	0x031C9F14 LDR X0, [X19 + 0xB8]
	0x031C9F18 CBZ X0, 0x31C9F8C
	0x031C9F1C MOV X1, X31
	0x031C9F20 MOV V9.16B, V1.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0+88]
	007 Compare X19, 0
	008 JumpIfEqual {38}
	009 Move X20, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Transform.get_localScale, X0
	013 Move X8, [X20+160]
	014 Compare X8, 0
	015 JumpIfEqual {38}
	016 Move X9, [X8+24]
	017 Move X0, [X8+64]
	018 Move X1, [X8+40]
	019 Move V8, V0
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X0, [X20+88]
	022 Compare X0, 0
	023 JumpIfEqual {38}
	024 Move X1, X31
	025 Move V9, V0
	026 Call Transform.get_localScale, X0
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move V0, V8
	032 Move V1, V9
	033 Move X1, X31
	034 Move D9, [X31+48]
	035 Move D8, [X31+56]
	036 Call Transform.set_localScale, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Void <setScaleZ>b__87_0()

Disassembly:
	0x031C9F24 BL 0x3C41290
	0x031C9F28 LDR X8, [X21]
	0x031C9F2C MOV X0, X20
	0x031C9F30 MOV V0.16B, V8.16B
	0x031C9F34 MOV V1.16B, V9.16B
	0x031C9F38 LDR X8, [X8 + 0xB8]
	0x031C9F3C MOV X1, X31
	0x031C9F40 LDR V3, [X8]
	0x031C9F44 BL 0x3C4132C
	0x031C9F48 LDR X8, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call Transform.get_localScale, X0
	009 Move [X19+96], S2
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setScaleZ>b__87_1()

Disassembly:
	0x031C9F4C LDR X0, [X19 + 0x58]
	0x031C9F50 LDP X20, X19, [X31 + 0x20]
	0x031C9F54 LDP X30, X21, [X31 + 0x10]
	0x031C9F58 LDR X8, [X8 + 0xB8]
	0x031C9F5C LDR V0, [X8]
	0x031C9F60 LDP D9, D8, [X31], #0x30
	0x031C9F64 B 0x31C3918
	0x031C9F68 LDR X8, [X21]
	0x031C9F6C LDR X0, [X19 + 0x58]
	0x031C9F70 LDRB W1, [X19 + 0x1A]
	0x031C9F74 LDP X20, X19, [X31 + 0x20]
	0x031C9F78 LDR X8, [X8 + 0xB8]
	0x031C9F7C LDP X30, X21, [X31 + 0x10]
	0x031C9F80 LDR V0, [X8]
	0x031C9F84 LDP D9, D8, [X31], #0x30
	0x031C9F88 B 0x31C2C6C
	0x031C9F8C BL 0x1C16F20
	0x031C9F90 STP X30, X21, [X31 - 0x20]!
	0x031C9F94 STP X20, X19, [X31 + 0x10]
	0x031C9F98 ADRP X20, 0x1212000
	0x031C9F9C LDRB W8, [X20 + 0xFDF]
	0x031C9FA0 MOV X19, X0
	0x031C9FA4 TBNZ X8, 0x0, 0x31C9FC8
	0x031C9FA8 ADRP X0, 0xF56000
	0x031C9FAC LDR X0, [X0 + 0x9D8]
	0x031C9FB0 BL 0x1C16CF4
	0x031C9FB4 ADRP X0, 0xF2A000
	0x031C9FB8 LDR X0, [X0 + 0x598]
	0x031C9FBC BL 0x1C16CF4
	0x031C9FC0 MOVZ W8, 0x1
	0x031C9FC4 STRB W8, [X20 + 0xFDF]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0+88]
	007 Compare X19, 0
	008 JumpIfEqual {39}
	009 Move X20, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Transform.get_localScale, X0
	013 Move X0, [X20+88]
	014 Compare X0, 0
	015 JumpIfEqual {39}
	016 Move X1, X31
	017 Move V8, V0
	018 Call Transform.get_localScale, X0
	019 Move X8, [X20+160]
	020 Compare X8, 0
	021 JumpIfEqual {39}
	022 Move X9, [X8+24]
	023 Move X0, [X8+64]
	024 Move X1, [X8+40]
	025 Move V9, V1
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move V2, V0
	032 Move V0, V8
	033 Move V1, V9
	034 Move X1, X31
	035 Move D9, [X31+48]
	036 Move D8, [X31+56]
	037 Call Transform.set_localScale, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Void <setRotateX>b__88_0()

Disassembly:
	0x031C9FC8 LDR X0, [X19 + 0x58]
	0x031C9FCC CBZ X0, 0x31CA040
	0x031C9FD0 ADRP X8, 0xF56000
	0x031C9FD4 LDR X8, [X8 + 0x9D8]
	0x031C9FD8 ADRP X21, 0xF2A000
	0x031C9FDC LDR X1, [X8]
	0x031C9FE0 LDR X21, [X21 + 0x598]
	0x031C9FE4 BL 0x21A3894
	0x031C9FE8 STR X0, [X19 + 0xC8]
	0x031C9FEC MOV X20, X0
	0x031C9FF0 LDR X0, [X21]
	0x031C9FF4 LDR W8, [X0 + 0xE0]
	0x031C9FF8 CBNZ W8, 0x31CA000
	0x031C9FFC BL 0x1C16DFC
	0x031CA000 MOV X0, X20
	0x031CA004 MOV X1, X31
	0x031CA008 MOV X2, X31
	0x031CA00C BL 0x3C354F8
	0x031CA010 FMOV S3, 1
	0x031CA014 TBZ X0, 0x0, 0x31CA030
	0x031CA018 LDR X0, [X19 + 0xC8]
	0x031CA01C CBZ X0, 0x31CA040
	0x031CA020 LDR X8, [X0]
	0x031CA024 LDR X9, [X8 + 0x298]
	0x031CA028 LDR X1, [X8 + 0x2A0]
	0x031CA02C BLR X9
	0x031CA030 STR S3, [X19 + 0x60]
	0x031CA034 LDP X20, X19, [X31 + 0x10]
	0x031CA038 LDP X30, X21, [X31], #0x20
	0x031CA03C RET
	0x031CA040 BL 0x1C16F20
	0x031CA044 STR X30, [X31 - 0x20]!
	0x031CA048 STP X20, X19, [X31 + 0x10]
	0x031CA04C LDR X8, [X0 + 0xA0]
	0x031CA050 CBZ X8, 0x31CA080

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1213000
	007 Move W8, [X20+4055]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF2D000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+4055], W8
	018 Move X0, [X19+88]
	019 Compare X0, 0
	020 JumpIfEqual {44}
	021 Move X20, 0xF2C000
	022 Move X20, [X20+1448]
	023 Move X1, X31
	024 Call Transform.get_eulerAngles, X0
	025 Move [X19+96], S0
	026 Move X0, [X20]
	027 Move V9, [X19+108]
	028 Move V8, V0
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move V0, V8
	034 Move V1, V9
	035 Move X0, X31
	036 Call LeanTween.closestRot, V0, V1
	037 Move [X19+108], S0
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Return 
	044 Call 0x1C17F20

Method: System.Void <setRotateX>b__88_1()

Disassembly:
	0x031CA054 MOV X19, X0
	0x031CA058 LDR X20, [X0 + 0x58]
	0x031CA05C LDR X9, [X8 + 0x18]
	0x031CA060 LDR X0, [X8 + 0x40]
	0x031CA064 LDR X1, [X8 + 0x28]
	0x031CA068 BLR X9
	0x031CA06C LDRB W1, [X19 + 0x1A]
	0x031CA070 MOV X0, X20
	0x031CA074 LDP X20, X19, [X31 + 0x10]
	0x031CA078 LDR X30, [X31], #0x20
	0x031CA07C B 0x31C48E0
	0x031CA080 BL 0x1C16F20
	0x031CA084 STR X30, [X31 - 0x20]!
	0x031CA088 STP X20, X19, [X31 + 0x10]
	0x031CA08C ADRP X20, 0x1211000
	0x031CA090 LDRB W8, [X20 + 0xFE0]
	0x031CA094 MOV X19, X0
	0x031CA098 TBNZ X8, 0x0, 0x31CA0B0
	0x031CA09C ADRP X0, 0xF30000
	0x031CA0A0 LDR X0, [X0 + 0xB38]
	0x031CA0A4 BL 0x1C16CF4
	0x031CA0A8 MOVZ W8, 0x1
	0x031CA0AC STRB W8, [X20 + 0xFE0]
	0x031CA0B0 LDR X0, [X19 + 0x58]
	0x031CA0B4 CBZ X0, 0x31CA104
	0x031CA0B8 ADRP X8, 0xF30000
	0x031CA0BC LDR X8, [X8 + 0xB38]
	0x031CA0C0 LDR X1, [X8]
	0x031CA0C4 BL 0x21A3894
	0x031CA0C8 CBZ X0, 0x31CA104
	0x031CA0CC MOV X1, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0+160]
	007 Compare X8, 0
	008 JumpIfEqual {40}
	009 Move X20, X0
	010 Move X19, [X0+88]
	011 Move X9, [X8+24]
	012 Move X0, [X8+64]
	013 Move X1, [X8+40]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X0, [X20+88]
	016 Compare X0, 0
	017 JumpIfEqual {40}
	018 Move X1, X31
	019 Move V8, V0
	020 Call Transform.get_eulerAngles, X0
	021 Move X0, [X20+88]
	022 Compare X0, 0
	023 JumpIfEqual {40}
	024 Move X1, X31
	025 Move V9, V1
	026 Call Transform.get_eulerAngles, X0
	027 Compare X19, 0
	028 JumpIfEqual {40}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move V0, V8
	034 Move V1, V9
	035 Move X1, X31
	036 Move D9, [X31+48]
	037 Move D8, [X31+56]
	038 Call Transform.set_eulerAngles, X0, X1
	039 Return 
	040 Call 0x1C17F20

Method: System.Void <setRotateY>b__89_0()

Disassembly:
	0x031CA0D0 BL 0x3C16D84
	0x031CA0D4 CBZ X0, 0x31CA104
	0x031CA0D8 MOV X1, X31
	0x031CA0DC BL 0x3C182C4
	0x031CA0E0 CBZ X0, 0x31CA104
	0x031CA0E4 LDR W8, [X0 + 0x18]
	0x031CA0E8 CBZ W8, 0x31CA108
	0x031CA0EC LDR V0, [X0 + 0x23]
	0x031CA0F0 UCVTF S0, S0
	0x031CA0F4 STR S0, [X19 + 0x60]
	0x031CA0F8 LDP X20, X19, [X31 + 0x10]
	0x031CA0FC LDR X30, [X31], #0x20
	0x031CA100 RET
	0x031CA104 BL 0x1C16F20
	0x031CA108 BL 0x1C16F28
	0x031CA10C STP X30, X23, [X31 - 0x30]!
	0x031CA110 STP X22, X21, [X31 + 0x10]
	0x031CA114 STP X20, X19, [X31 + 0x20]
	0x031CA118 ADRP X20, 0x1211000
	0x031CA11C LDRB W8, [X20 + 0xFE1]
	0x031CA120 MOV X19, X0
	0x031CA124 TBNZ X8, 0x0, 0x31CA154
	0x031CA128 ADRP X0, 0xF55000
	0x031CA12C LDR X0, [X0 + 0xAF8]
	0x031CA130 BL 0x1C16CF4
	0x031CA134 ADRP X0, 0xF30000
	0x031CA138 LDR X0, [X0 + 0xB38]
	0x031CA13C BL 0x1C16CF4
	0x031CA140 ADRP X0, 0xF55000
	0x031CA144 LDR X0, [X0 + 0x368]
	0x031CA148 BL 0x1C16CF4
	0x031CA14C MOVZ W8, 0x1
	0x031CA150 STRB W8, [X20 + 0xFE1]
	0x031CA154 LDR X8, [X19 + 0xA0]
	0x031CA158 CBZ X8, 0x31CA2FC

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1212000
	007 Move W8, [X20+4056]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF2C000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+4056], W8
	018 Move X0, [X19+88]
	019 Compare X0, 0
	020 JumpIfEqual {44}
	021 Move X20, 0xF2C000
	022 Move X20, [X20+1448]
	023 Move X1, X31
	024 Call Transform.get_eulerAngles, X0
	025 Move [X19+96], S1
	026 Move X0, [X20]
	027 Move V9, [X19+108]
	028 Move V8, V1
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move V0, V8
	034 Move V1, V9
	035 Move X0, X31
	036 Call LeanTween.closestRot, V0, V1
	037 Move [X19+108], S0
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Return 
	044 Call 0x1C17F20

Method: System.Void <setRotateY>b__89_1()

Disassembly:
	0x031CA15C LDR X9, [X8 + 0x18]
	0x031CA160 LDR X0, [X8 + 0x40]
	0x031CA164 LDR X1, [X8 + 0x28]
	0x031CA168 ADRP X22, 0xF55000
	0x031CA16C LDR X22, [X22 + 0x368]
	0x031CA170 BLR X9
	0x031CA174 LDR X8, [X22]
	0x031CA178 LDR X9, [X8 + 0xB8]
	0x031CA17C STP S0, S1, [X9 + 0x8]
	0x031CA180 STR S2, [X9 + 0x10]
	0x031CA184 LDR X8, [X8 + 0xB8]
	0x031CA188 LDR V0, [X8 + 0x8]
	0x031CA18C STR S0, [X8]
	0x031CA190 LDR X0, [X19 + 0x58]
	0x031CA194 CBZ X0, 0x31CA2FC
	0x031CA198 ADRP X8, 0xF30000
	0x031CA19C LDR X8, [X8 + 0xB38]
	0x031CA1A0 LDR X1, [X8]
	0x031CA1A4 BL 0x21A3894
	0x031CA1A8 CBZ X0, 0x31CA2FC
	0x031CA1AC MOV X1, X31
	0x031CA1B0 BL 0x3C16D84
	0x031CA1B4 CBZ X0, 0x31CA2FC
	0x031CA1B8 MOV X1, X31
	0x031CA1BC MOV X19, X0
	0x031CA1C0 BL 0x3C17EBC
	0x031CA1C4 CBZ X0, 0x31CA2FC
	0x031CA1C8 ADRP X23, 0xF55000
	0x031CA1CC LDR X23, [X23 + 0xAF8]
	0x031CA1D0 MOV X20, X0

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0+88]
	007 Compare X19, 0
	008 JumpIfEqual {38}
	009 Move X20, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Transform.get_eulerAngles, X0
	013 Move X8, [X20+160]
	014 Compare X8, 0
	015 JumpIfEqual {38}
	016 Move X9, [X8+24]
	017 Move X0, [X8+64]
	018 Move X1, [X8+40]
	019 Move V8, V0
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X0, [X20+88]
	022 Compare X0, 0
	023 JumpIfEqual {38}
	024 Move X1, X31
	025 Move V9, V0
	026 Call Transform.get_eulerAngles, X0
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move V0, V8
	032 Move V1, V9
	033 Move X1, X31
	034 Move D9, [X31+48]
	035 Move D8, [X31+56]
	036 Call Transform.set_eulerAngles, X0, X1
	037 Return 
	038 Call 0x1C17F20

Method: System.Void <setRotateZ>b__90_0()

Disassembly:
	0x031CA1D4 LDR W1, [X20 + 0x18]
	0x031CA1D8 LDR X0, [X23]
	0x031CA1DC BL 0x1C16D6C
	0x031CA1E0 CBZ X0, 0x31CA2FC
	0x031CA1E4 LDR X8, [X0 + 0x18]
	0x031CA1E8 MOV X21, X0
	0x031CA1EC CBNZ X8, 0x31CA260
	0x031CA1F0 MOV X0, X19
	0x031CA1F4 MOV X1, X31
	0x031CA1F8 BL 0x3C17EBC
	0x031CA1FC CBZ X0, 0x31CA2FC
	0x031CA200 LDR X8, [X23]
	0x031CA204 LDR W1, [X0 + 0x18]
	0x031CA208 MOV X0, X8
	0x031CA20C BL 0x1C16D6C
	0x031CA210 CBZ X0, 0x31CA2FC
	0x031CA214 LDR W8, [X0 + 0x18]
	0x031CA218 MOV X21, X0
	0x031CA21C UBFM X9, X8, 0x20, 0x1F
	0x031CA220 CMP X9, 0x1
	0x031CA224 B.LT 0x31CA250
	0x031CA228 MOV X9, X31
	0x031CA22C SXTW X10, W8
	0x031CA230 ADD X11, X21, 0x20
	0x031CA234 MOVN W12, 0xFF000000
	0x031CA238 CMP X9, X8
	0x031CA23C B.CS 0x31CA2F8
	0x031CA240 STR W12, [X11, X9, LSL #2]
	0x031CA244 ADD X9, X9, 0x1
	0x031CA248 CMP X9, X10
	0x031CA24C B.LT 0x31CA238
	0x031CA250 MOV X0, X19
	0x031CA254 MOV X1, X21
	0x031CA258 MOV X2, X31
	0x031CA25C BL 0x3C18318

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1212000
	007 Move W8, [X20+4057]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF2C000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+4057], W8
	018 Move X0, [X19+88]
	019 Compare X0, 0
	020 JumpIfEqual {44}
	021 Move X20, 0xF2C000
	022 Move X20, [X20+1448]
	023 Move X1, X31
	024 Call Transform.get_eulerAngles, X0
	025 Move [X19+96], S2
	026 Move X0, [X20]
	027 Move V9, [X19+108]
	028 Move V8, V2
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move V0, V8
	034 Move V1, V9
	035 Move X0, X31
	036 Call LeanTween.closestRot, V0, V1
	037 Move [X19+108], S0
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move D9, [X31+48]
	042 Move D8, [X31+56]
	043 Return 
	044 Call 0x1C17F20

Method: System.Void <setRotateZ>b__90_1()

Disassembly:
	0x031CA260 MOV X0, X19
	0x031CA264 MOV X1, X31
	0x031CA268 BL 0x3C182C4
	0x031CA26C CBZ X0, 0x31CA2FC
	0x031CA270 LDR W8, [X0 + 0x18]
	0x031CA274 CBZ W8, 0x31CA2F8
	0x031CA278 LDR X8, [X22]
	0x031CA27C LDR W9, [X0 + 0x20]
	0x031CA280 MOV X0, X31
	0x031CA284 LDR X8, [X8 + 0xB8]
	0x031CA288 AND W10, W9, 0xFF
	0x031CA28C UBFM W11, W9, 0x8, 0xF
	0x031CA290 UBFM W9, W9, 0x10, 0x17
	0x031CA294 LDR V3, [X8]
	0x031CA298 UCVTF S0, W10
	0x031CA29C UCVTF S1, W11
	0x031CA2A0 UCVTF S2, W9
	0x031CA2A4 BL 0x1E43664
	0x031CA2A8 LDR W8, [X20 + 0x18]
	0x031CA2AC CMP W8, 0x1
	0x031CA2B0 B.LT 0x31CA2DC
	0x031CA2B4 LDR W9, [X21 + 0x18]
	0x031CA2B8 MOV X8, X31
	0x031CA2BC ADD X10, X21, 0x20
	0x031CA2C0 CMP X8, X9
	0x031CA2C4 B.CS 0x31CA2F8
	0x031CA2C8 STR W0, [X10, X8, LSL #2]
	0x031CA2CC LDRSW X11, [X20 + 0x18]
	0x031CA2D0 ADD X8, X8, 0x1
	0x031CA2D4 CMP X8, X11
	0x031CA2D8 B.LT 0x31CA2C0

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, [X0+88]
	007 Compare X19, 0
	008 JumpIfEqual {39}
	009 Move X20, X0
	010 Move X0, X19
	011 Move X1, X31
	012 Call Transform.get_eulerAngles, X0
	013 Move X0, [X20+88]
	014 Compare X0, 0
	015 JumpIfEqual {39}
	016 Move X1, X31
	017 Move V8, V0
	018 Call Transform.get_eulerAngles, X0
	019 Move X8, [X20+160]
	020 Compare X8, 0
	021 JumpIfEqual {39}
	022 Move X9, [X8+24]
	023 Move X0, [X8+64]
	024 Move X1, [X8+40]
	025 Move V9, V1
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X0, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move V2, V0
	032 Move V0, V8
	033 Move V1, V9
	034 Move X1, X31
	035 Move D9, [X31+48]
	036 Move D8, [X31+56]
	037 Call Transform.set_eulerAngles, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Void <setRotateAround>b__91_0()

Disassembly:
	0x031CA2DC MOV X0, X19
	0x031CA2E0 MOV X1, X21
	0x031CA2E4 LDP X20, X19, [X31 + 0x20]
	0x031CA2E8 LDP X22, X21, [X31 + 0x10]
	0x031CA2EC MOV X2, X31
	0x031CA2F0 LDP X30, X23, [X31], #0x30
	0x031CA2F4 B 0x3C18318
	0x031CA2F8 BL 0x1C16F28
	0x031CA2FC BL 0x1C16F20
	0x031CA300 STR X30, [X31 - 0x50]!
	0x031CA304 STP X26, X25, [X31 + 0x10]
	0x031CA308 STP X24, X23, [X31 + 0x20]
	0x031CA30C STP X22, X21, [X31 + 0x30]
	0x031CA310 STP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, X0
	004 Move X0, [X0+88]
	005 Move [X8+96], W31
	006 Compare X0, 0
	007 JumpIfEqual {20}
	008 Move X19, [X8+232]
	009 Move X1, X31
	010 Call Transform.get_rotation, X0
	011 Compare X19, 0
	012 JumpIfEqual {20}
	013 Move [X19+52], S0
	014 Move [X19+60], S1
	015 Move [X19+60], S2
	016 Move [X19+68], S3
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Call 0x1C17F20

Method: System.Void <setRotateAround>b__91_1()

Disassembly:
	0x031CA314 ADRP X20, 0x1211000
	0x031CA318 LDRB W8, [X20 + 0xFE2]
	0x031CA31C MOV X19, X0
	0x031CA320 TBNZ X8, 0x0, 0x31CA398
	0x031CA324 ADRP X0, 0xF55000
	0x031CA328 LDR X0, [X0 + 0x5A0]
	0x031CA32C BL 0x1C16CF4
	0x031CA330 ADRP X0, 0xF55000
	0x031CA334 LDR X0, [X0 + 0x9D0]
	0x031CA338 BL 0x1C16CF4
	0x031CA33C ADRP X0, 0xF55000
	0x031CA340 LDR X0, [X0 + 0x9B0]
	0x031CA344 BL 0x1C16CF4
	0x031CA348 ADRP X0, 0xF29000
	0x031CA34C LDR X0, [X0 + 0xE00]
	0x031CA350 BL 0x1C16CF4
	0x031CA354 ADRP X0, 0xF29000
	0x031CA358 LDR X0, [X0 + 0xE18]
	0x031CA35C BL 0x1C16CF4
	0x031CA360 ADRP X0, 0xF29000
	0x031CA364 LDR X0, [X0 + 0x598]
	0x031CA368 BL 0x1C16CF4
	0x031CA36C ADRP X0, 0xF2B000
	0x031CA370 LDR X0, [X0 + 0x638]
	0x031CA374 BL 0x1C16CF4
	0x031CA378 ADRP X0, 0xF55000
	0x031CA37C LDR X0, [X0 + 0x9B8]
	0x031CA380 BL 0x1C16CF4
	0x031CA384 ADRP X0, 0xF51000
	0x031CA388 LDR X0, [X0 + 0x2E0]
	0x031CA38C BL 0x1C16CF4
	0x031CA390 MOVZ W8, 0x1
	0x031CA394 STRB W8, [X20 + 0xFE2]
	0x031CA398 LDR X0, [X19 + 0x58]
	0x031CA39C CBZ X0, 0x31CA7A4
	0x031CA3A0 ADRP X8, 0xF55000
	0x031CA3A4 LDR X8, [X8 + 0x9D0]
	0x031CA3A8 ADRP X23, 0xF29000
	0x031CA3AC LDR X1, [X8]
	0x031CA3B0 LDR X23, [X23 + 0x598]
	0x031CA3B4 BL 0x21A3894
	0x031CA3B8 LDR X8, [X23]
	0x031CA3BC MOV X20, X0
	0x031CA3C0 LDR W9, [X8 + 0xE0]
	0x031CA3C4 CBNZ W9, 0x31CA3D0
	0x031CA3C8 MOV X0, X8
	0x031CA3CC BL 0x1C16DFC
	0x031CA3D0 MOV X0, X20
	0x031CA3D4 MOV X1, X31
	0x031CA3D8 MOV X2, X31
	0x031CA3DC BL 0x3C354F8
	0x031CA3E0 TBZ X0, 0x0, 0x31CA410
	0x031CA3E4 CBZ X20, 0x31CA7A4
	0x031CA3E8 MOV X0, X20
	0x031CA3EC MOV X1, X31
	0x031CA3F0 BL 0x3C41290
	0x031CA3F4 MOV X0, X19
	0x031CA3F8 LDP X20, X19, [X31 + 0x40]
	0x031CA3FC LDP X22, X21, [X31 + 0x30]
	0x031CA400 LDP X24, X23, [X31 + 0x20]
	0x031CA404 LDP X26, X25, [X31 + 0x10]
	0x031CA408 LDR X30, [X31], #0x50
	0x031CA40C B 0x31C2C30
	0x031CA410 LDR X0, [X19 + 0x58]
	0x031CA414 CBZ X0, 0x31CA7A4
	0x031CA418 ADRP X21, 0xF55000
	0x031CA41C LDR X21, [X21 + 0x5A0]
	0x031CA420 LDR X1, [X21]
	0x031CA424 BL 0x21A3894
	0x031CA428 LDR X8, [X23]
	0x031CA42C MOV X20, X0
	0x031CA430 LDR W9, [X8 + 0xE0]
	0x031CA434 CBNZ W9, 0x31CA440
	0x031CA438 MOV X0, X8
	0x031CA43C BL 0x1C16DFC
	0x031CA440 MOV X0, X20
	0x031CA444 MOV X1, X31
	0x031CA448 MOV X2, X31
	0x031CA44C BL 0x3C354F8
	0x031CA450 TBZ X0, 0x0, 0x31CA4B8
	0x031CA454 LDR X0, [X19 + 0x58]
	0x031CA458 CBZ X0, 0x31CA7A4
	0x031CA45C LDR X1, [X21]
	0x031CA460 BL 0x21A3894
	0x031CA464 CBZ X0, 0x31CA7A4
	0x031CA468 MOV X1, X31
	0x031CA46C BL 0x3C1341C
	0x031CA470 CBZ X0, 0x31CA7A4
	0x031CA474 ADRP X8, 0xF51000
	0x031CA478 LDR X8, [X8 + 0x2E0]
	0x031CA47C MOV X2, X31
	0x031CA480 LDR X1, [X8]
	0x031CA484 BL 0x3C14D4C
	0x031CA488 TBZ X0, 0x0, 0x31CA4B8
	0x031CA48C LDR X0, [X19 + 0x58]
	0x031CA490 CBZ X0, 0x31CA7A4
	0x031CA494 LDR X1, [X21]
	0x031CA498 BL 0x21A3894
	0x031CA49C CBZ X0, 0x31CA7A4
	0x031CA4A0 MOV X1, X31
	0x031CA4A4 BL 0x3C1341C
	0x031CA4A8 CBZ X0, 0x31CA7A4
	0x031CA4AC MOV X1, X31
	0x031CA4B0 BL 0x3C14794
	0x031CA4B4 B 0x31CA3F4

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1212000
	008 Move W8, [X20+4058]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xF56000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+4058], W8
	019 Move X8, [X19+160]
	020 Compare X8, 0
	021 JumpIfEqual {135}
	022 Move X9, [X8+24]
	023 Move X0, [X8+64]
	024 Move X1, [X8+40]
	025 Move X20, 0xF56000
	026 Move X20, [X20+872]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X8, [X20]
	029 Move X9, [X8+184]
	030 Move [X9+8], S0
	031 Move [X9+16], S1
	032 Move [X9+16], S2
	033 Move X8, [X8+184]
	034 Move V0, [X8+8]
	035 Move [X8], S0
	036 Move X0, [X19+88]
	037 Compare X0, 0
	038 JumpIfEqual {135}
	039 Move X1, X31
	040 Call Transform.get_localPosition, X0
	041 Move X8, [X19+232]
	042 Compare X8, 0
	043 JumpIfEqual {135}
	044 Move X0, [X19+88]
	045 Compare X0, 0
	046 JumpIfEqual {135}
	047 Move V8, V0
	048 Move V9, V1
	049 Move V10, V2
	050 Move S1, [X8+28]
	051 Move S2, [X8+32]
	052 Move V0, [X8+24]
	053 Move X1, X31
	054 Call Transform.TransformPoint, X0, X1
	055 Move X8, [X19+232]
	056 Compare X8, 0
	057 JumpIfEqual {135}
	058 Move X0, [X19+88]
	059 Compare X0, 0
	060 JumpIfEqual {135}
	061 Move S5, [X8+44]
	062 Move S6, [X8+48]
	063 Move S3, [X8+36]
	064 Move S4, [X8+40]
	065 Move X1, X31
	066 NotImplemented "Instruction FNEG not yet implemented."
	067 Call Transform.RotateAround, X0, X1, X2, V0
	068 Move X0, [X19+88]
	069 Compare X0, 0
	070 JumpIfEqual {135}
	071 Move X1, X31
	072 Call Transform.get_localPosition, X0
	073 Move X0, [X19+88]
	074 Compare X0, 0
	075 JumpIfEqual {135}
	076 Subtract S2, S10, S2
	077 Subtract S1, S9, S1
	078 Subtract S0, S8, S0
	079 Subtract S2, S10, S2
	080 Subtract S1, S9, S1
	081 Subtract S0, S8, S0
	082 Move X1, X31
	083 Call Transform.set_localPosition, X0, X1
	084 Move X8, [X19+232]
	085 Compare X8, 0
	086 JumpIfEqual {135}
	087 Move X0, [X19+88]
	088 Compare X0, 0
	089 JumpIfEqual {135}
	090 Move S2, [X8+60]
	091 Move S3, [X8+64]
	092 Move S0, [X8+52]
	093 Move S1, [X8+56]
	094 Move X1, X31
	095 Call Transform.set_rotation, X0, X1
	096 Move X8, [X19+232]
	097 Compare X8, 0
	098 JumpIfEqual {135}
	099 Move X0, [X19+88]
	100 Compare X0, 0
	101 JumpIfEqual {135}
	102 Move S1, [X8+28]
	103 Move S2, [X8+32]
	104 Move V0, [X8+24]
	105 Move X1, X31
	106 Call Transform.TransformPoint, X0, X1
	107 Move X8, [X19+232]
	108 Compare X8, 0
	109 JumpIfEqual {135}
	110 Move X0, [X19+88]
	111 Compare X0, 0
	112 JumpIfEqual {135}
	113 Move X9, [X20]
	114 Move S4, [X8+40]
	115 Move S5, [X8+44]
	116 Move V3, [X8+36]
	117 Move X1, X31
	118 Move X9, [X9+184]
	119 Move V6, [X9]
	120 Call Transform.RotateAround, X0, X1, X2, V0
	121 Move X8, [X19+232]
	122 Compare X8, 0
	123 JumpIfEqual {135}
	124 Move X9, [X20]
	125 Move X20, [X31+32]
	126 Move X19, [X31+40]
	127 Move X30, [X31+24]
	128 Move D9, [X31+8]
	129 Move D8, [X31+16]
	130 Move X9, [X9+184]
	131 Move V0, [X9]
	132 Move [X8+48], S0
	133 Move V10, [X31+48]
	134 Return 
	135 Call 0x1C17F20

Method: System.Void <setRotateAroundLocal>b__92_0()

Disassembly:
	0x031CA4B8 LDR X0, [X19 + 0x58]
	0x031CA4BC CBZ X0, 0x31CA7A4
	0x031CA4C0 LDR X1, [X21]
	0x031CA4C4 BL 0x21A3894
	0x031CA4C8 LDR X8, [X23]
	0x031CA4CC MOV X20, X0
	0x031CA4D0 LDR W9, [X8 + 0xE0]
	0x031CA4D4 CBNZ W9, 0x31CA4E0
	0x031CA4D8 MOV X0, X8
	0x031CA4DC BL 0x1C16DFC
	0x031CA4E0 MOV X0, X20
	0x031CA4E4 MOV X1, X31
	0x031CA4E8 MOV X2, X31
	0x031CA4EC BL 0x3C354F8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, X0
	004 Move X0, [X0+88]
	005 Move [X8+96], W31
	006 Compare X0, 0
	007 JumpIfEqual {20}
	008 Move X19, [X8+232]
	009 Move X1, X31
	010 Call Transform.get_localRotation, X0
	011 Compare X19, 0
	012 JumpIfEqual {20}
	013 Move [X19+52], S0
	014 Move [X19+60], S1
	015 Move [X19+60], S2
	016 Move [X19+68], S3
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Call 0x1C17F20

Method: System.Void <setRotateAroundLocal>b__92_1()

Disassembly:
	0x031CA4F0 TBZ X0, 0x0, 0x31CA55C
	0x031CA4F4 LDR X0, [X19 + 0x58]
	0x031CA4F8 CBZ X0, 0x31CA7A4
	0x031CA4FC LDR X1, [X21]
	0x031CA500 BL 0x21A3894
	0x031CA504 CBZ X0, 0x31CA7A4
	0x031CA508 MOV X1, X31
	0x031CA50C BL 0x3C1341C
	0x031CA510 CBZ X0, 0x31CA7A4
	0x031CA514 ADRP X20, 0xF55000
	0x031CA518 LDR X20, [X20 + 0x9B8]
	0x031CA51C MOV X2, X31
	0x031CA520 LDR X1, [X20]
	0x031CA524 BL 0x3C14D4C
	0x031CA528 TBZ X0, 0x0, 0x31CA55C
	0x031CA52C LDR X0, [X19 + 0x58]
	0x031CA530 CBZ X0, 0x31CA7A4
	0x031CA534 LDR X1, [X21]
	0x031CA538 BL 0x21A3894
	0x031CA53C CBZ X0, 0x31CA7A4
	0x031CA540 MOV X1, X31
	0x031CA544 BL 0x3C1341C
	0x031CA548 CBZ X0, 0x31CA7A4
	0x031CA54C LDR X1, [X20]
	0x031CA550 MOV X2, X31
	0x031CA554 BL 0x3C14868
	0x031CA558 B 0x31CA3F4
	0x031CA55C LDR X0, [X19 + 0x58]
	0x031CA560 CBZ X0, 0x31CA7A4
	0x031CA564 MOV X1, X31
	0x031CA568 BL 0x3C40C8C
	0x031CA56C CMP W0, 0x1
	0x031CA570 B.LT 0x31CA784
	0x031CA574 LDR X0, [X19 + 0x58]
	0x031CA578 CBZ X0, 0x31CA7A4
	0x031CA57C MOV X1, X31
	0x031CA580 BL 0x3C4100C
	0x031CA584 MOV X20, X0
	0x031CA588 CBZ X0, 0x31CA7B0
	0x031CA58C ADRP X25, 0xF29000
	0x031CA590 ADRP X26, 0xF2B000
	0x031CA594 ADRP X24, 0xF55000
	0x031CA598 LDR X25, [X25 + 0xE18]
	0x031CA59C LDR X26, [X26 + 0x638]
	0x031CA5A0 LDR X24, [X24 + 0x9B0]
	0x031CA5A4 LDR X8, [X20]
	0x031CA5A8 LDR X1, [X25]
	0x031CA5AC LDRH W9, [X8 + 0x12E]
	0x031CA5B0 CBZ X9, 0x31CA5D4
	0x031CA5B4 LDR X10, [X8 + 0xB0]
	0x031CA5B8 ADD X10, X10, 0x8
	0x031CA5BC LDUR X11, [X10 - 0x8]
	0x031CA5C0 CMP X11, X1
	0x031CA5C4 B.EQ 0x31CA5E4
	0x031CA5C8 SUBS X9, X9, 0x1
	0x031CA5CC ADD X10, X10, 0x10
	0x031CA5D0 B.NE 0x31CA5BC
	0x031CA5D4 MOV X0, X20
	0x031CA5D8 MOV W2, W31
	0x031CA5DC BL 0x1C5C788
	0x031CA5E0 B 0x31CA5F0
	0x031CA5E4 LDRSW X9, [X10]
	0x031CA5E8 ADD X8, X8, X9, 0x4, LSL
	0x031CA5EC ADD X0, X8, 0x138
	0x031CA5F0 LDP X8, X1, [X0]
	0x031CA5F4 MOV X0, X20
	0x031CA5F8 BLR X8
	0x031CA5FC TBZ X0, 0x0, 0x31CA708
	0x031CA600 LDR X8, [X20]
	0x031CA604 LDR X1, [X25]
	0x031CA608 LDRH W9, [X8 + 0x12E]
	0x031CA60C CBZ X9, 0x31CA630
	0x031CA610 LDR X10, [X8 + 0xB0]
	0x031CA614 ADD X10, X10, 0x8
	0x031CA618 LDUR X11, [X10 - 0x8]
	0x031CA61C CMP X11, X1
	0x031CA620 B.EQ 0x31CA640
	0x031CA624 SUBS X9, X9, 0x1
	0x031CA628 ADD X10, X10, 0x10
	0x031CA62C B.NE 0x31CA618
	0x031CA630 MOVZ W2, 0x1
	0x031CA634 MOV X0, X20
	0x031CA638 BL 0x1C5C788
	0x031CA63C B 0x31CA650
	0x031CA640 LDR W9, [X10]
	0x031CA644 ADD W9, W9, 0x1
	0x031CA648 ADD X8, X8, W9, 0x4, SXTW
	0x031CA64C ADD X0, X8, 0x138
	0x031CA650 LDP X8, X1, [X0]
	0x031CA654 MOV X0, X20
	0x031CA658 BLR X8
	0x031CA65C MOV X21, X0
	0x031CA660 CBZ X0, 0x31CA7A8
	0x031CA664 LDR X8, [X21]
	0x031CA668 LDR X1, [X26]
	0x031CA66C LDRB W10, [X8 + 0x130]
	0x031CA670 LDRB W9, [X1 + 0x130]
	0x031CA674 CMP W10, W9
	0x031CA678 B.CC 0x31CA79C
	0x031CA67C LDR X8, [X8 + 0xC8]
	0x031CA680 ADD X8, X8, X9, 0x3, LSL
	0x031CA684 LDUR X8, [X8 - 0x8]
	0x031CA688 CMP X8, X1
	0x031CA68C B.NE 0x31CA79C
	0x031CA690 MOV X0, X21
	0x031CA694 MOV X1, X31
	0x031CA698 BL 0x3C32ECC
	0x031CA69C CBZ X0, 0x31CA7AC
	0x031CA6A0 LDR X1, [X24]
	0x031CA6A4 BL 0x21E52E4
	0x031CA6A8 MOV X22, X0
	0x031CA6AC LDR X0, [X23]
	0x031CA6B0 LDR W8, [X0 + 0xE0]
	0x031CA6B4 CBNZ W8, 0x31CA6BC
	0x031CA6B8 BL 0x1C16DFC
	0x031CA6BC MOV X0, X22
	0x031CA6C0 MOV X1, X31
	0x031CA6C4 MOV X2, X31
	0x031CA6C8 BL 0x3C354F8
	0x031CA6CC TBZ X0, 0x0, 0x31CA5A4
	0x031CA6D0 MOV X0, X21
	0x031CA6D4 MOV X1, X31
	0x031CA6D8 BL 0x3C32ECC
	0x031CA6DC CBZ X0, 0x31CA7BC
	0x031CA6E0 LDR X1, [X24]
	0x031CA6E4 BL 0x21E52E4
	0x031CA6E8 CBZ X0, 0x31CA7C0
	0x031CA6EC MOV X1, X31
	0x031CA6F0 BL 0x3C1341C
	0x031CA6F4 CBZ X0, 0x31CA7C4
	0x031CA6F8 MOV X1, X31
	0x031CA6FC BL 0x3C14794
	0x031CA700 MOV X0, X19
	0x031CA704 BL 0x31C2C30
	0x031CA708 MOV X19, X31
	0x031CA70C ADRP X21, 0xF29000

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x1212000
	012 Move W8, [X20+4059]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF56000
	019 Move X0, [X0+872]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+4059], W8
	023 Move X8, [X19+160]
	024 Compare X8, 0
	025 JumpIfEqual {172}
	026 Move X9, [X8+24]
	027 Move X0, [X8+64]
	028 Move X1, [X8+40]
	029 Move X21, 0xF56000
	030 Move X21, [X21+872]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X8, [X21]
	033 Move X9, [X8+184]
	034 Move [X9+8], S0
	035 Move [X9+16], S1
	036 Move [X9+16], S2
	037 Move X8, [X8+184]
	038 Move V0, [X8+8]
	039 Move [X8], S0
	040 Move X0, [X19+88]
	041 Compare X0, 0
	042 JumpIfEqual {172}
	043 Move X1, X31
	044 Call Transform.get_localPosition, X0
	045 Move X8, [X19+232]
	046 Compare X8, 0
	047 JumpIfEqual {172}
	048 Move X20, [X19+88]
	049 Compare X20, 0
	050 JumpIfEqual {172}
	051 Move V8, V0
	052 Move V9, V1
	053 Move V10, V2
	054 Move S1, [X8+28]
	055 Move S2, [X8+32]
	056 Move V0, [X8+24]
	057 Move X0, X20
	058 Move X1, X31
	059 Call Transform.TransformPoint, X0, X1
	060 Move X8, [X19+232]
	061 Compare X8, 0
	062 JumpIfEqual {172}
	063 Move X0, [X19+88]
	064 Compare X0, 0
	065 JumpIfEqual {172}
	066 Move V11, V0
	067 Move V12, V1
	068 Move V13, V2
	069 Move S1, [X8+40]
	070 Move S2, [X8+44]
	071 Move V0, [X8+36]
	072 Move X1, X31
	073 Call Transform.TransformDirection, X0, X1
	074 Move X8, [X19+232]
	075 Compare X8, 0
	076 JumpIfEqual {172}
	077 Move V3, V0
	078 Move V0, [X8+48]
	079 Move V4, V1
	080 Move V5, V2
	081 Move X0, X20
	082 NotImplemented "Instruction FNEG not yet implemented."
	083 Move V0, V11
	084 Move V1, V12
	085 Move V2, V13
	086 Move X1, X31
	087 Call Transform.RotateAround, X0, X1, X2, V0
	088 Move X0, [X19+88]
	089 Compare X0, 0
	090 JumpIfEqual {172}
	091 Move X1, X31
	092 Call Transform.get_localPosition, X0
	093 Move X0, [X19+88]
	094 Compare X0, 0
	095 JumpIfEqual {172}
	096 Subtract S2, S10, S2
	097 Subtract S1, S9, S1
	098 Subtract S0, S8, S0
	099 Subtract S2, S10, S2
	100 Subtract S1, S9, S1
	101 Subtract S0, S8, S0
	102 Move X1, X31
	103 Call Transform.set_localPosition, X0, X1
	104 Move X8, [X19+232]
	105 Compare X8, 0
	106 JumpIfEqual {172}
	107 Move X0, [X19+88]
	108 Compare X0, 0
	109 JumpIfEqual {172}
	110 Move S2, [X8+60]
	111 Move S3, [X8+64]
	112 Move S0, [X8+52]
	113 Move S1, [X8+56]
	114 Move X1, X31
	115 Call Transform.set_localRotation, X0, X1
	116 Move X8, [X19+232]
	117 Compare X8, 0
	118 JumpIfEqual {172}
	119 Move X0, [X19+88]
	120 Compare X0, 0
	121 JumpIfEqual {172}
	122 Move S1, [X8+28]
	123 Move S2, [X8+32]
	124 Move V0, [X8+24]
	125 Move X1, X31
	126 Call Transform.TransformPoint, X0, X1
	127 Move X8, [X19+232]
	128 Compare X8, 0
	129 JumpIfEqual {172}
	130 Move X20, [X19+88]
	131 Compare X20, 0
	132 JumpIfEqual {172}
	133 Move V8, V0
	134 Move V9, V1
	135 Move V10, V2
	136 Move S1, [X8+40]
	137 Move S2, [X8+44]
	138 Move V0, [X8+36]
	139 Move X0, X20
	140 Move X1, X31
	141 Call Transform.TransformDirection, X0, X1
	142 Move X8, [X21]
	143 Move V3, V0
	144 Move V4, V1
	145 Move V5, V2
	146 Move X8, [X8+184]
	147 Move X0, X20
	148 Move V0, V8
	149 Move V1, V9
	150 Move V6, [X8]
	151 Move V2, V10
	152 Move X1, X31
	153 Call Transform.RotateAround, X0, X1, X2, V0
	154 Move X8, [X19+232]
	155 Compare X8, 0
	156 JumpIfEqual {172}
	157 Move X9, [X21]
	158 Move X20, [X31+64]
	159 Move X19, [X31+72]
	160 Move X30, [X31+48]
	161 Move X21, [X31+56]
	162 Move D9, [X31+32]
	163 Move D8, [X31+40]
	164 Move X9, [X9+184]
	165 Move D11, [X31+16]
	166 Move D10, [X31+24]
	167 Move V0, [X9]
	168 Move [X8+48], S0
	169 Move D13, [X31+80]
	170 Move D12, [X31+88]
	171 Return 
	172 Call 0x1C17F20

Method: System.Void <setAlpha>b__93_0()

Disassembly:
	0x031CA710 LDR X21, [X21 + 0xE00]
	0x031CA714 MOV X0, X20
	0x031CA718 LDR X1, [X21]
	0x031CA71C BL 0x1C16E00
	0x031CA720 CBZ X0, 0x31CA780
	0x031CA724 LDR X8, [X0]
	0x031CA728 LDR X1, [X21]
	0x031CA72C MOV X20, X0
	0x031CA730 LDRH W9, [X8 + 0x12E]
	0x031CA734 CBZ X9, 0x31CA758
	0x031CA738 LDR X10, [X8 + 0xB0]
	0x031CA73C ADD X10, X10, 0x8
	0x031CA740 LDUR X11, [X10 - 0x8]
	0x031CA744 CMP X11, X1
	0x031CA748 B.EQ 0x31CA768
	0x031CA74C SUBS X9, X9, 0x1
	0x031CA750 ADD X10, X10, 0x10
	0x031CA754 B.NE 0x31CA740
	0x031CA758 MOV X0, X20
	0x031CA75C MOV W2, W31
	0x031CA760 BL 0x1C5C788
	0x031CA764 B 0x31CA774
	0x031CA768 LDRSW X9, [X10]
	0x031CA76C ADD X8, X8, X9, 0x4, LSL
	0x031CA770 ADD X0, X8, 0x138
	0x031CA774 LDP X8, X1, [X0]
	0x031CA778 MOV X0, X20
	0x031CA77C BLR X8
	0x031CA780 CBNZ X19, 0x31CA7B4
	0x031CA784 LDP X20, X19, [X31 + 0x40]
	0x031CA788 LDP X22, X21, [X31 + 0x30]
	0x031CA78C LDP X24, X23, [X31 + 0x20]
	0x031CA790 LDP X26, X25, [X31 + 0x10]
	0x031CA794 LDR X30, [X31], #0x50
	0x031CA798 RET
	0x031CA79C MOV X0, X21
	0x031CA7A0 BL 0x1C171E0
	0x031CA7A4 BL 0x1C16F20
	0x031CA7A8 BL 0x1C16F20
	0x031CA7AC BL 0x1C16F20
	0x031CA7B0 BL 0x1C16F20
	0x031CA7B4 MOV X0, X19
	0x031CA7B8 BL 0x1C16F18
	0x031CA7BC BL 0x1C16F20
	0x031CA7C0 BL 0x1C16F20
	0x031CA7C4 BL 0x1C16F20
	0x031CA7C8 B 0x31CA7FC
	0x031CA7CC B 0x31CA7FC
	0x031CA7D0 B 0x31CA7FC
	0x031CA7D4 B 0x31CA7FC
	0x031CA7D8 B 0x31CA7FC
	0x031CA7DC B 0x31CA7FC
	0x031CA7E0 B 0x31CA7FC
	0x031CA7E4 B 0x31CA7FC
	0x031CA7E8 B 0x31CA7FC
	0x031CA7EC B 0x31CA7FC
	0x031CA7F0 B 0x31CA7FC
	0x031CA7F4 B 0x31CA7FC
	0x031CA7F8 B 0x31CA7FC
	0x031CA7FC MOV X21, X0
	0x031CA800 CMP W1, 0x1
	0x031CA804 B.NE 0x31CA81C
	0x031CA808 MOV X0, X21
	0x031CA80C BL 0x3EB1AD0
	0x031CA810 LDR X19, [X0]
	0x031CA814 BL 0x3EB1AE0
	0x031CA818 B 0x31CA70C
	0x031CA81C MOV X19, X31
	0x031CA820 B 0x31CA828
	0x031CA824 MOV X21, X0
	0x031CA828 ADRP X22, 0xF29000
	0x031CA82C LDR X22, [X22 + 0xE00]
	0x031CA830 LDR X1, [X22]
	0x031CA834 MOV X0, X20
	0x031CA838 BL 0x1C16E00
	0x031CA83C MOV X20, X0
	0x031CA840 CBZ X0, 0x31CA89C
	0x031CA844 LDR X8, [X20]
	0x031CA848 LDR X1, [X22]
	0x031CA84C LDRH W9, [X8 + 0x12E]
	0x031CA850 CBZ X9, 0x31CA874
	0x031CA854 LDR X10, [X8 + 0xB0]
	0x031CA858 ADD X10, X10, 0x8
	0x031CA85C LDUR X11, [X10 - 0x8]
	0x031CA860 CMP X11, X1
	0x031CA864 B.EQ 0x31CA884
	0x031CA868 SUBS X9, X9, 0x1
	0x031CA86C ADD X10, X10, 0x10
	0x031CA870 B.NE 0x31CA85C
	0x031CA874 MOV X0, X20
	0x031CA878 MOV W2, W31
	0x031CA87C BL 0x1C5C788
	0x031CA880 B 0x31CA890
	0x031CA884 LDRSW X9, [X10]
	0x031CA888 ADD X8, X8, X9, 0x4, LSL
	0x031CA88C ADD X0, X8, 0x138
	0x031CA890 LDP X8, X1, [X0]
	0x031CA894 MOV X0, X20
	0x031CA898 BLR X8
	0x031CA89C CBNZ X19, 0x31CA8A8
	0x031CA8A0 MOV X0, X21
	0x031CA8A4 BL 0x1D2C690
	0x031CA8A8 MOV X0, X19
	0x031CA8AC BL 0x1C16F18
	0x031CA8B0 BL 0x1990590
	0x031CA8B4 STP D11, D10, [X31 - 0x40]!
	0x031CA8B8 STP D9, D8, [X31 + 0x10]
	0x031CA8BC STP X30, X21, [X31 + 0x20]
	0x031CA8C0 STP X20, X19, [X31 + 0x30]
	0x031CA8C4 ADRP X20, 0x1211000
	0x031CA8C8 LDRB W8, [X20 + 0xFE3]
	0x031CA8CC MOV X19, X0
	0x031CA8D0 TBNZ X8, 0x0, 0x31CA8F4
	0x031CA8D4 ADRP X0, 0xF55000
	0x031CA8D8 LDR X0, [X0 + 0x368]
	0x031CA8DC BL 0x1C16CF4
	0x031CA8E0 ADRP X0, 0xF29000
	0x031CA8E4 LDR X0, [X0 + 0x598]
	0x031CA8E8 BL 0x1C16CF4
	0x031CA8EC MOVZ W8, 0x1
	0x031CA8F0 STRB W8, [X20 + 0xFE3]
	0x031CA8F4 LDR X8, [X19 + 0xA0]
	0x031CA8F8 CBZ X8, 0x31CAA80
	0x031CA8FC LDR X9, [X8 + 0x18]
	0x031CA900 LDR X0, [X8 + 0x40]
	0x031CA904 LDR X1, [X8 + 0x28]
	0x031CA908 ADRP X21, 0xF55000
	0x031CA90C ADRP X20, 0xF29000
	0x031CA910 LDR X21, [X21 + 0x368]
	0x031CA914 LDR X20, [X20 + 0x598]
	0x031CA918 BLR X9
	0x031CA91C LDR X8, [X21]
	0x031CA920 MOV X0, X19
	0x031CA924 LDR X9, [X8 + 0xB8]
	0x031CA928 STP S0, S1, [X9 + 0x8]
	0x031CA92C STR S2, [X9 + 0x10]
	0x031CA930 LDR X8, [X8 + 0xB8]
	0x031CA934 LDR V0, [X8 + 0x8]
	0x031CA938 STR S0, [X8]
	0x031CA93C BL 0x31C5024
	0x031CA940 LDR X0, [X20]
	0x031CA944 LDR X20, [X19 + 0xB8]
	0x031CA948 MOV V10.16B, V0.16B
	0x031CA94C MOV V9.16B, V1.16B
	0x031CA950 LDR W8, [X0 + 0xE0]
	0x031CA954 MOV V8.16B, V2.16B
	0x031CA958 MOV V11.16B, V3.16B
	0x031CA95C CBNZ W8, 0x31CA964
	0x031CA960 BL 0x1C16DFC
	0x031CA964 MOV X0, X20
	0x031CA968 MOV X1, X31
	0x031CA96C MOV X2, X31
	0x031CA970 BL 0x3C354F8
	0x031CA974 TBZ X0, 0x0, 0x31CA9B4
	0x031CA978 LDR X0, [X19 + 0xB8]
	0x031CA97C CBZ X0, 0x31CAA80
	0x031CA980 MOV V0.16B, V10.16B
	0x031CA984 MOV V1.16B, V9.16B
	0x031CA988 MOV V2.16B, V8.16B
	0x031CA98C MOV V3.16B, V11.16B
	0x031CA990 MOV X1, X31
	0x031CA994 BL 0x3C4132C
	0x031CA998 LDR X0, [X19 + 0x58]
	0x031CA99C MOV V0.16B, V10.16B
	0x031CA9A0 MOV V1.16B, V9.16B
	0x031CA9A4 MOV V2.16B, V8.16B
	0x031CA9A8 MOV V3.16B, V11.16B
	0x031CA9AC BL 0x31C3CF0
	0x031CA9B0 B 0x31CA9DC
	0x031CA9B4 LDR W8, [X19 + 0x90]
	0x031CA9B8 CMP W8, 0x1A
	0x031CA9BC B.NE 0x31CA9DC
	0x031CA9C0 LDR X0, [X19 + 0x58]
	0x031CA9C4 LDRB W1, [X19 + 0x1A]
	0x031CA9C8 MOV V0.16B, V10.16B
	0x031CA9CC MOV V1.16B, V9.16B
	0x031CA9D0 MOV V2.16B, V8.16B
	0x031CA9D4 MOV V3.16B, V11.16B
	0x031CA9D8 BL 0x31C30EC
	0x031CA9DC LDR X8, [X21]
	0x031CA9E0 LDR X8, [X8 + 0xB8]
	0x031CA9E4 LDR V0, [X8 + 0x4]
	0x031CA9E8 FCMP S0, 0x0
	0x031CA9EC B.NE 0x31CAA04
	0x031CA9F0 LDP X20, X19, [X31 + 0x30]
	0x031CA9F4 LDP X30, X21, [X31 + 0x20]
	0x031CA9F8 LDP D9, D8, [X31 + 0x10]
	0x031CA9FC LDP D11, D10, [X31], #0x40
	0x031CAA00 RET
	0x031CAA04 LDR X8, [X19 + 0xE8]
	0x031CAA08 CBZ X8, 0x31CAA80
	0x031CAA0C LDR X9, [X8 + 0xB0]
	0x031CAA10 CBZ X9, 0x31CAA44
	0x031CAA14 LDR X2, [X9 + 0x18]
	0x031CAA18 LDR X0, [X9 + 0x40]
	0x031CAA1C LDR X1, [X9 + 0x28]
	0x031CAA20 MOV V1.16B, V9.16B
	0x031CAA24 MOV V2.16B, V8.16B
	0x031CAA28 LDP X20, X19, [X31 + 0x30]
	0x031CAA2C LDP X30, X21, [X31 + 0x20]
	0x031CAA30 LDP D9, D8, [X31 + 0x10]
	0x031CAA34 MOV V0.16B, V10.16B
	0x031CAA38 MOV V3.16B, V11.16B
	0x031CAA3C LDP D11, D10, [X31], #0x40
	0x031CAA40 BR X2
	0x031CAA44 LDR X9, [X8 + 0xB8]
	0x031CAA48 CBZ X9, 0x31CA9F0
	0x031CAA4C LDR X1, [X8 + 0xD8]
	0x031CAA50 LDR X3, [X9 + 0x18]
	0x031CAA54 LDR X0, [X9 + 0x40]
	0x031CAA58 LDR X2, [X9 + 0x28]
	0x031CAA5C MOV V1.16B, V9.16B
	0x031CAA60 MOV V2.16B, V8.16B
	0x031CAA64 LDP X20, X19, [X31 + 0x30]
	0x031CAA68 LDP X30, X21, [X31 + 0x20]
	0x031CAA6C LDP D9, D8, [X31 + 0x10]
	0x031CAA70 MOV V0.16B, V10.16B
	0x031CAA74 MOV V3.16B, V11.16B
	0x031CAA78 LDP D11, D10, [X31], #0x40
	0x031CAA7C BR X3
	0x031CAA80 BL 0x1C16F20
	0x031CAA84 ADRP X8, 0xFFFFFFFFFD923000
	0x031CAA88 LDR V0, [X8 + 0x648]
	0x031CAA8C STR W31, [X0 + 0x80]
	0x031CAA90 STR D0, [X0 + 0x78]
	0x031CAA94 RET
	0x031CAA98 STP D11, D10, [X31 - 0x40]!
	0x031CAA9C STP D9, D8, [X31 + 0x10]
	0x031CAAA0 STP X30, X21, [X31 + 0x20]
	0x031CAAA4 STP X20, X19, [X31 + 0x30]
	0x031CAAA8 ADRP X20, 0x1211000
	0x031CAAAC LDRB W8, [X20 + 0xFE4]
	0x031CAAB0 MOV X19, X0
	0x031CAAB4 TBNZ X8, 0x0, 0x31CAAD8
	0x031CAAB8 ADRP X0, 0xF55000
	0x031CAABC LDR X0, [X0 + 0x368]
	0x031CAAC0 BL 0x1C16CF4
	0x031CAAC4 ADRP X0, 0xF29000
	0x031CAAC8 LDR X0, [X0 + 0x598]
	0x031CAACC BL 0x1C16CF4
	0x031CAAD0 MOVZ W8, 0x1
	0x031CAAD4 STRB W8, [X20 + 0xFE4]
	0x031CAAD8 LDR X8, [X19 + 0xA0]
	0x031CAADC CBZ X8, 0x31CAC64
	0x031CAAE0 LDR X9, [X8 + 0x18]
	0x031CAAE4 LDR X0, [X8 + 0x40]
	0x031CAAE8 LDR X1, [X8 + 0x28]
	0x031CAAEC ADRP X21, 0xF55000
	0x031CAAF0 ADRP X20, 0xF29000
	0x031CAAF4 LDR X21, [X21 + 0x368]
	0x031CAAF8 LDR X20, [X20 + 0x598]
	0x031CAAFC BLR X9
	0x031CAB00 LDR X8, [X21]
	0x031CAB04 MOV X0, X19
	0x031CAB08 LDR X9, [X8 + 0xB8]
	0x031CAB0C STP S0, S1, [X9 + 0x8]
	0x031CAB10 STR S2, [X9 + 0x10]
	0x031CAB14 LDR X8, [X8 + 0xB8]
	0x031CAB18 LDR V0, [X8 + 0x8]
	0x031CAB1C STR S0, [X8]
	0x031CAB20 BL 0x31C5024
	0x031CAB24 LDR X0, [X20]
	0x031CAB28 LDR X20, [X19 + 0xB8]
	0x031CAB2C MOV V10.16B, V0.16B
	0x031CAB30 MOV V9.16B, V1.16B
	0x031CAB34 LDR W8, [X0 + 0xE0]
	0x031CAB38 MOV V8.16B, V2.16B
	0x031CAB3C MOV V11.16B, V3.16B
	0x031CAB40 CBNZ W8, 0x31CAB48
	0x031CAB44 BL 0x1C16DFC
	0x031CAB48 MOV X0, X20
	0x031CAB4C MOV X1, X31
	0x031CAB50 MOV X2, X31
	0x031CAB54 BL 0x3C354F8
	0x031CAB58 TBZ X0, 0x0, 0x31CAB98
	0x031CAB5C LDR X0, [X19 + 0xB8]
	0x031CAB60 CBZ X0, 0x31CAC64
	0x031CAB64 MOV V0.16B, V10.16B
	0x031CAB68 MOV V1.16B, V9.16B
	0x031CAB6C MOV V2.16B, V8.16B
	0x031CAB70 MOV V3.16B, V11.16B
	0x031CAB74 MOV X1, X31
	0x031CAB78 BL 0x3C4132C
	0x031CAB7C LDR X0, [X19 + 0x58]
	0x031CAB80 MOV V0.16B, V10.16B
	0x031CAB84 MOV V1.16B, V9.16B
	0x031CAB88 MOV V2.16B, V8.16B
	0x031CAB8C MOV V3.16B, V11.16B
	0x031CAB90 BL 0x31C3CF0
	0x031CAB94 B 0x31CABC0
	0x031CAB98 LDR W8, [X19 + 0x90]
	0x031CAB9C CMP W8, 0x1A
	0x031CABA0 B.NE 0x31CABC0
	0x031CABA4 LDR X0, [X19 + 0x58]
	0x031CABA8 LDRB W1, [X19 + 0x1A]
	0x031CABAC MOV V0.16B, V10.16B
	0x031CABB0 MOV V1.16B, V9.16B
	0x031CABB4 MOV V2.16B, V8.16B
	0x031CABB8 MOV V3.16B, V11.16B
	0x031CABBC BL 0x31C30EC
	0x031CABC0 LDR X8, [X21]
	0x031CABC4 LDR X8, [X8 + 0xB8]
	0x031CABC8 LDR V0, [X8 + 0x4]
	0x031CABCC FCMP S0, 0x0
	0x031CABD0 B.NE 0x31CABE8
	0x031CABD4 LDP X20, X19, [X31 + 0x30]
	0x031CABD8 LDP X30, X21, [X31 + 0x20]
	0x031CABDC LDP D9, D8, [X31 + 0x10]
	0x031CABE0 LDP D11, D10, [X31], #0x40
	0x031CABE4 RET
	0x031CABE8 LDR X8, [X19 + 0xE8]
	0x031CABEC CBZ X8, 0x31CAC64
	0x031CABF0 LDR X9, [X8 + 0xB0]
	0x031CABF4 CBZ X9, 0x31CAC28
	0x031CABF8 LDR X2, [X9 + 0x18]
	0x031CABFC LDR X0, [X9 + 0x40]
	0x031CAC00 LDR X1, [X9 + 0x28]
	0x031CAC04 MOV V1.16B, V9.16B
	0x031CAC08 MOV V2.16B, V8.16B
	0x031CAC0C LDP X20, X19, [X31 + 0x30]
	0x031CAC10 LDP X30, X21, [X31 + 0x20]
	0x031CAC14 LDP D9, D8, [X31 + 0x10]
	0x031CAC18 MOV V0.16B, V10.16B
	0x031CAC1C MOV V3.16B, V11.16B
	0x031CAC20 LDP D11, D10, [X31], #0x40
	0x031CAC24 BR X2
	0x031CAC28 LDR X9, [X8 + 0xB8]
	0x031CAC2C CBZ X9, 0x31CABD4
	0x031CAC30 LDR X1, [X8 + 0xD8]
	0x031CAC34 LDR X3, [X9 + 0x18]
	0x031CAC38 LDR X0, [X9 + 0x40]
	0x031CAC3C LDR X2, [X9 + 0x28]
	0x031CAC40 MOV V1.16B, V9.16B
	0x031CAC44 MOV V2.16B, V8.16B
	0x031CAC48 LDP X20, X19, [X31 + 0x30]
	0x031CAC4C LDP X30, X21, [X31 + 0x20]
	0x031CAC50 LDP D9, D8, [X31 + 0x10]
	0x031CAC54 MOV V0.16B, V10.16B
	0x031CAC58 MOV V3.16B, V11.16B
	0x031CAC5C LDP D11, D10, [X31], #0x40
	0x031CAC60 BR X3
	0x031CAC64 BL 0x1C16F20
	0x031CAC68 STP X30, X21, [X31 - 0x20]!
	0x031CAC6C STP X20, X19, [X31 + 0x10]
	0x031CAC70 ADRP X20, 0x1211000
	0x031CAC74 LDRB W8, [X20 + 0xFE5]
	0x031CAC78 MOV X19, X0
	0x031CAC7C TBNZ X8, 0x0, 0x31CACA0
	0x031CAC80 ADRP X0, 0xF55000
	0x031CAC84 LDR X0, [X0 + 0x9D8]
	0x031CAC88 BL 0x1C16CF4
	0x031CAC8C ADRP X0, 0xF29000
	0x031CAC90 LDR X0, [X0 + 0x598]
	0x031CAC94 BL 0x1C16CF4
	0x031CAC98 MOVZ W8, 0x1
	0x031CAC9C STRB W8, [X20 + 0xFE5]
	0x031CACA0 LDR X0, [X19 + 0x58]
	0x031CACA4 CBZ X0, 0x31CAD28
	0x031CACA8 ADRP X8, 0xF55000
	0x031CACAC LDR X8, [X8 + 0x9D8]
	0x031CACB0 ADRP X21, 0xF29000
	0x031CACB4 LDR X1, [X8]
	0x031CACB8 LDR X21, [X21 + 0x598]
	0x031CACBC BL 0x21A3894
	0x031CACC0 STR X0, [X19 + 0xC8]
	0x031CACC4 MOV X20, X0
	0x031CACC8 LDR X0, [X21]
	0x031CACCC LDR W8, [X0 + 0xE0]
	0x031CACD0 CBNZ W8, 0x31CACD8
	0x031CACD4 BL 0x1C16DFC
	0x031CACD8 MOV X0, X20
	0x031CACDC MOV X1, X31
	0x031CACE0 MOV X2, X31
	0x031CACE4 BL 0x3C354F8
	0x031CACE8 TBZ X0, 0x0, 0x31CAD08
	0x031CACEC LDR X0, [X19 + 0xC8]
	0x031CACF0 CBZ X0, 0x31CAD28
	0x031CACF4 LDR X8, [X0]
	0x031CACF8 LDR X9, [X8 + 0x298]
	0x031CACFC LDR X1, [X8 + 0x2A0]
	0x031CAD00 BLR X9
	0x031CAD04 B 0x31CAD18

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x1212000
	011 Move W8, [X20+4060]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {52}
	017 Move X0, 0xF56000
	018 Move X0, [X0+1064]
	019 Call 0x1C17CF4
	020 Move X0, 0xF56000
	021 Move X0, [X0+1440]
	022 Call 0x1C17CF4
	023 Move X0, 0xF56000
	024 Move X0, [X0+2512]
	025 Call 0x1C17CF4
	026 Move X0, 0xF56000
	027 Move X0, [X0+2480]
	028 Call 0x1C17CF4
	029 Move X0, 0xF2A000
	030 Move X0, [X0+3584]
	031 Call 0x1C17CF4
	032 Move X0, 0xF2A000
	033 Move X0, [X0+3608]
	034 Call 0x1C17CF4
	035 Move X0, 0xF56000
	036 Move X0, [X0+2800]
	037 Call 0x1C17CF4
	038 Move X0, 0xF2A000
	039 Move X0, [X0+1432]
	040 Call 0x1C17CF4
	041 Move X0, 0xF2C000
	042 Move X0, [X0+1592]
	043 Call 0x1C17CF4
	044 Move X0, 0xF56000
	045 Move X0, [X0+2488]
	046 Call 0x1C17CF4
	047 Move X0, 0xF52000
	048 Move X0, [X0+736]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+4060], W8
	052 Move X0, [X19+88]
	053 Compare X0, 0
	054 JumpIfEqual {367}
	055 Move X8, 0xF56000
	056 Move X8, [X8+2512]
	057 Move X23, 0xF2A000
	058 Move X1, [X8]
	059 Move X23, [X23+1432]
	060 Call 0x21A4894, X0
	061 Move X8, [X23]
	062 Move X20, X0
	063 Move W9, [X8+224]
	064 Compare W9, 0
	065 JumpIfNotEqual {68}
	066 Move X0, X8
	067 Call 0x1C17DFC
	068 Move X0, X20
	069 Move X1, X31
	070 Move X2, X31
	071 Call Object.op_Inequality, X0, X1
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {103}
	076 Compare X20, 0
	077 JumpIfEqual {367}
	078 Move X0, X20
	079 Move X1, X31
	080 Call SpriteRenderer.get_color, X0
	081 Move [X19+96], S3
	082 Move X8, 0xF56000
	083 Move X8, [X8+1064]
	084 Move X20, 0xF56000
	085 Move X0, [X8]
	086 Move X20, [X20+2800]
	087 Call 0x1C17F10
	088 Move X2, [X20]
	089 Move X1, X19
	090 Move X20, X0
	091 Call ActionMethodDelegate..ctor, X0, X1, X2
	092 Move [X19+168], X20
	093 Move X20, [X31+64]
	094 Move X19, [X31+72]
	095 Move X22, [X31+48]
	096 Move X21, [X31+56]
	097 Move X24, [X31+32]
	098 Move X23, [X31+40]
	099 Move X26, [X31+16]
	100 Move X25, [X31+24]
	101 Move X30, [X31+80]
	102 Return 
	103 Move X0, [X19+88]
	104 Compare X0, 0
	105 JumpIfEqual {367}
	106 Move X21, 0xF56000
	107 Move X21, [X21+1440]
	108 Move X1, [X21]
	109 Call 0x21A4894, X0
	110 Move X8, [X23]
	111 Move X20, X0
	112 Move W9, [X8+224]
	113 Compare W9, 0
	114 JumpIfNotEqual {117}
	115 Move X0, X8
	116 Call 0x1C17DFC
	117 Move X0, X20
	118 Move X1, X31
	119 Move X2, X31
	120 Call Object.op_Inequality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {158}
	125 Move X0, [X19+88]
	126 Compare X0, 0
	127 JumpIfEqual {367}
	128 Move X1, [X21]
	129 Call 0x21A4894, X0
	130 Compare X0, 0
	131 JumpIfEqual {367}
	132 Move X1, X31
	133 Call Renderer.get_material, X0
	134 Compare X0, 0
	135 JumpIfEqual {367}
	136 Move X8, 0xF52000
	137 Move X8, [X8+736]
	138 Move X2, X31
	139 Move X1, [X8]
	140 Call Material.HasProperty, X0, X1
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {158}
	145 Move X0, [X19+88]
	146 Compare X0, 0
	147 JumpIfEqual {367}
	148 Move X1, [X21]
	149 Call 0x21A4894, X0
	150 Compare X0, 0
	151 JumpIfEqual {367}
	152 Move X1, X31
	153 Call Renderer.get_material, X0
	154 Compare X0, 0
	155 JumpIfEqual {367}
	156 Move X1, X31
	157 Call Material.get_color, X0
	158 Move X0, [X19+88]
	159 Compare X0, 0
	160 JumpIfEqual {367}
	161 Move X1, [X21]
	162 Call 0x21A4894, X0
	163 Move X8, [X23]
	164 Move X20, X0
	165 Move W9, [X8+224]
	166 Compare W9, 0
	167 JumpIfNotEqual {170}
	168 Move X0, X8
	169 Call 0x1C17DFC
	170 Move X0, X20
	171 Move X1, X31
	172 Move X2, X31
	173 Call Object.op_Inequality, X0, X1
	174 Move TEMP, X0
	175 And TEMP, TEMP, 1
	176 Compare TEMP, 1
	177 JumpIfNotEqual {212}
	178 Move X0, [X19+88]
	179 Compare X0, 0
	180 JumpIfEqual {367}
	181 Move X1, [X21]
	182 Call 0x21A4894, X0
	183 Compare X0, 0
	184 JumpIfEqual {367}
	185 Move X1, X31
	186 Call Renderer.get_material, X0
	187 Compare X0, 0
	188 JumpIfEqual {367}
	189 Move X20, 0xF56000
	190 Move X20, [X20+2488]
	191 Move X2, X31
	192 Move X1, [X20]
	193 Call Material.HasProperty, X0, X1
	194 Move TEMP, X0
	195 And TEMP, TEMP, 1
	196 Compare TEMP, 1
	197 JumpIfNotEqual {212}
	198 Move X0, [X19+88]
	199 Compare X0, 0
	200 JumpIfEqual {367}
	201 Move X1, [X21]
	202 Call 0x21A4894, X0
	203 Compare X0, 0
	204 JumpIfEqual {367}
	205 Move X1, X31
	206 Call Renderer.get_material, X0
	207 Compare X0, 0
	208 JumpIfEqual {367}
	209 Move X1, [X20]
	210 Move X2, X31
	211 Call Material.GetColor, X0, X1
	212 Move X0, [X19+88]
	213 Compare X0, 0
	214 JumpIfEqual {367}
	215 Move X1, X31
	216 Call Transform.get_childCount, X0
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move X0, [X19+88]
	219 Compare X0, 0
	220 JumpIfEqual {367}
	221 Move X1, X31
	222 Call Transform.GetEnumerator, X0
	223 Move X20, X0
	224 Compare X0, 0
	225 JumpIfEqual {370}
	226 Move X25, 0xF2A000
	227 Move X26, 0xF2C000
	228 Move X24, 0xF56000
	229 Move X25, [X25+3608]
	230 Move X26, [X26+1592]
	231 Move X24, [X24+2480]
	232 Move X8, [X20]
	233 Move X1, [X25]
	234 NotImplemented "Instruction LDRH not yet implemented."
	235 Compare X9, 0
	236 JumpIfEqual {243}
	237 Move X10, [X8+176]
	238 Add X10, X10, 8
	239 NotImplemented "Instruction LDUR not yet implemented."
	240 NotImplemented "Instruction CMP not yet implemented."
	241 Subtract X9, X9, 1
	242 Add X10, X10, 16
	243 Move X0, X20
	244 Move W2, W31
	245 Call 0x1C5D788
	246 NotImplemented "Instruction LDRSW not yet implemented."
	247 Add X8, X8, X9
	248 Add X0, X8, 312
	249 Move X8, [X0]
	250 Move X1, [X0+8]
	251 Move X0, X20
	252 NotImplemented "Instruction BLR not yet implemented."
	253 Move TEMP, X0
	254 And TEMP, TEMP, 1
	255 Compare TEMP, 1
	256 JumpIfNotEqual {329}
	257 Move X8, [X20]
	258 Move X1, [X25]
	259 NotImplemented "Instruction LDRH not yet implemented."
	260 Compare X9, 0
	261 JumpIfEqual {268}
	262 Move X10, [X8+176]
	263 Add X10, X10, 8
	264 NotImplemented "Instruction LDUR not yet implemented."
	265 NotImplemented "Instruction CMP not yet implemented."
	266 Subtract X9, X9, 1
	267 Add X10, X10, 16
	268 Move W2, 1
	269 Move X0, X20
	270 Call 0x1C5D788
	271 Move W9, [X10]
	272 Add W9, W9, 1
	273 Add X8, X8, W9
	274 Add X0, X8, 312
	275 Move X8, [X0]
	276 Move X1, [X0+8]
	277 Move X0, X20
	278 NotImplemented "Instruction BLR not yet implemented."
	279 Move X21, X0
	280 Compare X0, 0
	281 JumpIfEqual {368}
	282 Move X8, [X21]
	283 Move X1, [X26]
	284 Move W10, [X8+304]
	285 Move W9, [X1+304]
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Move X8, [X8+200]
	288 Add X8, X8, X9
	289 NotImplemented "Instruction LDUR not yet implemented."
	290 NotImplemented "Instruction CMP not yet implemented."
	291 Move X0, X21
	292 Move X1, X31
	293 Call Component.get_gameObject, X0
	294 Compare X0, 0
	295 JumpIfEqual {369}
	296 Move X1, [X24]
	297 Call 0x21E62E4, X0
	298 Move X22, X0
	299 Move X0, [X23]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Move X0, X22
	305 Move X1, X31
	306 Move X2, X31
	307 Call Object.op_Inequality, X0, X1
	308 Move TEMP, X0
	309 And TEMP, TEMP, 1
	310 Compare TEMP, 1
	311 JumpIfNotEqual {232}
	312 Move X0, X21
	313 Move X1, X31
	314 Call Component.get_gameObject, X0
	315 Compare X0, 0
	316 JumpIfEqual {373}
	317 Move X1, [X24]
	318 Call 0x21E62E4, X0
	319 Compare X0, 0
	320 JumpIfEqual {374}
	321 Move X1, X31
	322 Call Renderer.get_material, X0
	323 Compare X0, 0
	324 JumpIfEqual {375}
	325 Move X1, X31
	326 Call Material.get_color, X0
	327 Move X21, X31
	328 Move [X19+96], S3
	329 Move X21, X31
	330 Move W22, 3
	331 Move X23, 0xF2A000
	332 Move X23, [X23+3584]
	333 Move X0, X20
	334 Move X1, [X23]
	335 Call 0x1C17E00
	336 Compare X0, 0
	337 JumpIfEqual {360}
	338 Move X8, [X0]
	339 Move X1, [X23]
	340 Move X20, X0
	341 NotImplemented "Instruction LDRH not yet implemented."
	342 Compare X9, 0
	343 JumpIfEqual {350}
	344 Move X10, [X8+176]
	345 Add X10, X10, 8
	346 NotImplemented "Instruction LDUR not yet implemented."
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Subtract X9, X9, 1
	349 Add X10, X10, 16
	350 Move X0, X20
	351 Move W2, W31
	352 Call 0x1C5D788
	353 NotImplemented "Instruction LDRSW not yet implemented."
	354 Add X8, X8, X9
	355 Add X0, X8, 312
	356 Move X8, [X0]
	357 Move X1, [X0+8]
	358 Move X0, X20
	359 NotImplemented "Instruction BLR not yet implemented."
	360 Compare X21, 0
	361 JumpIfNotEqual {371}
	362 NotImplemented "Instruction CMP not yet implemented."
	363 Compare W22, 0
	364 JumpIfEqual {82}
	365 Move X0, X21
	366 Call 0x1C181E0
	367 Call 0x1C17F20
	368 Call 0x1C17F20
	369 Call 0x1C17F20
	370 Call 0x1C17F20
	371 Move X0, X21
	372 Call 0x1C17F18
	373 Call 0x1C17F20
	374 Call 0x1C17F20
	375 Call 0x1C17F20
	376 Move X22, X0
	377 NotImplemented "Instruction CMP not yet implemented."
	378 Move X0, X22
	379 Call 0x3EB2AD0
	380 Move X21, [X0]
	381 Call 0x3EB2AE0
	382 Move W22, W31
	383 Move X21, X31
	384 Move X22, X0
	385 Move X23, 0xF2A000
	386 Move X23, [X23+3584]
	387 Move X1, [X23]
	388 Move X0, X20
	389 Call 0x1C17E00
	390 Move X19, X0
	391 Compare X0, 0
	392 JumpIfEqual {414}
	393 Move X8, [X19]
	394 Move X1, [X23]
	395 NotImplemented "Instruction LDRH not yet implemented."
	396 Compare X9, 0
	397 JumpIfEqual {404}
	398 Move X10, [X8+176]
	399 Add X10, X10, 8
	400 NotImplemented "Instruction LDUR not yet implemented."
	401 NotImplemented "Instruction CMP not yet implemented."
	402 Subtract X9, X9, 1
	403 Add X10, X10, 16
	404 Move X0, X19
	405 Move W2, W31
	406 Call 0x1C5D788
	407 NotImplemented "Instruction LDRSW not yet implemented."
	408 Add X8, X8, X9
	409 Add X0, X8, 312
	410 Move X8, [X0]
	411 Move X1, [X0+8]
	412 Move X0, X19
	413 NotImplemented "Instruction BLR not yet implemented."
	414 Compare X21, 0
	415 JumpIfNotEqual {418}
	416 Move X0, X22
	417 Call 0x1D2D690
	418 Move X0, X21
	419 Call 0x1C17F18
	420 Call 0x1991590

Method: System.Void <setAlpha>b__93_2()

Disassembly:
	0x031CAD08 FMOV S0, 1
	0x031CAD0C FMOV S1, 1
	0x031CAD10 FMOV S2, 1
	0x031CAD14 FMOV S3, 1
	0x031CAD18 MOV X0, X19
	0x031CAD1C LDP X20, X19, [X31 + 0x10]
	0x031CAD20 LDP X30, X21, [X31], #0x20
	0x031CAD24 B 0x31C2C30
	0x031CAD28 BL 0x1C16F20
	0x031CAD2C STP D11, D10, [X31 - 0x40]!
	0x031CAD30 STP D9, D8, [X31 + 0x10]
	0x031CAD34 STR X30, [X31 + 0x20]
	0x031CAD38 STP X20, X19, [X31 + 0x30]
	0x031CAD3C ADRP X20, 0x1211000
	0x031CAD40 LDRB W8, [X20 + 0xFE6]
	0x031CAD44 MOV X19, X0
	0x031CAD48 TBNZ X8, 0x0, 0x31CAD60
	0x031CAD4C ADRP X0, 0xF55000
	0x031CAD50 LDR X0, [X0 + 0x368]
	0x031CAD54 BL 0x1C16CF4
	0x031CAD58 MOVZ W8, 0x1
	0x031CAD5C STRB W8, [X20 + 0xFE6]
	0x031CAD60 LDR X8, [X19 + 0xA0]
	0x031CAD64 CBZ X8, 0x31CAE6C
	0x031CAD68 LDR X9, [X8 + 0x18]
	0x031CAD6C LDR X0, [X8 + 0x40]
	0x031CAD70 LDR X1, [X8 + 0x28]
	0x031CAD74 ADRP X20, 0xF55000
	0x031CAD78 LDR X20, [X20 + 0x368]
	0x031CAD7C BLR X9
	0x031CAD80 LDR X8, [X20]
	0x031CAD84 MOV X0, X19
	0x031CAD88 LDR X9, [X8 + 0xB8]
	0x031CAD8C STP S0, S1, [X9 + 0x8]
	0x031CAD90 STR S2, [X9 + 0x10]
	0x031CAD94 LDR X8, [X8 + 0xB8]
	0x031CAD98 LDR V0, [X8 + 0x8]
	0x031CAD9C STR S0, [X8]
	0x031CADA0 BL 0x31C5024
	0x031CADA4 LDR X0, [X19 + 0xC8]
	0x031CADA8 CBZ X0, 0x31CAE6C
	0x031CADAC LDR X8, [X0]
	0x031CADB0 MOV V8.16B, V0.16B
	0x031CADB4 MOV V9.16B, V1.16B
	0x031CADB8 MOV V10.16B, V2.16B
	0x031CADBC LDR X9, [X8 + 0x2A8]
	0x031CADC0 LDR X1, [X8 + 0x2B0]
	0x031CADC4 MOV V11.16B, V3.16B
	0x031CADC8 BLR X9
	0x031CADCC LDR X8, [X20]
	0x031CADD0 LDR X8, [X8 + 0xB8]
	0x031CADD4 LDR V0, [X8 + 0x4]
	0x031CADD8 FCMP S0, 0x0
	0x031CADDC B.EQ 0x31CAE10
	0x031CADE0 LDR X8, [X19 + 0xE8]
	0x031CADE4 CBZ X8, 0x31CAE6C
	0x031CADE8 LDR X8, [X8 + 0xB0]
	0x031CADEC CBZ X8, 0x31CAE10
	0x031CADF0 LDR X9, [X8 + 0x18]
	0x031CADF4 LDR X0, [X8 + 0x40]
	0x031CADF8 LDR X1, [X8 + 0x28]
	0x031CADFC MOV V0.16B, V8.16B
	0x031CAE00 MOV V1.16B, V9.16B
	0x031CAE04 MOV V2.16B, V10.16B
	0x031CAE08 MOV V3.16B, V11.16B
	0x031CAE0C BLR X9
	0x031CAE10 LDRB W8, [X19 + 0x1A]
	0x031CAE14 CBZ W8, 0x31CAE58
	0x031CAE18 LDR X0, [X19 + 0x58]
	0x031CAE1C CBZ X0, 0x31CAE6C
	0x031CAE20 MOV X1, X31
	0x031CAE24 BL 0x3C40C8C
	0x031CAE28 CMP W0, 0x1
	0x031CAE2C B.LT 0x31CAE58
	0x031CAE30 LDR X0, [X19 + 0x58]
	0x031CAE34 MOV V0.16B, V8.16B
	0x031CAE38 MOV V1.16B, V9.16B
	0x031CAE3C LDP X20, X19, [X31 + 0x30]
	0x031CAE40 LDR X30, [X31 + 0x20]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1212000
	008 Move W8, [X20+4061]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xF56000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move X0, 0xF2A000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+4061], W8
	022 Move X8, [X19+160]
	023 Compare X8, 0
	024 JumpIfEqual {101}
	025 Move X9, [X8+24]
	026 Move X0, [X8+64]
	027 Move X1, [X8+40]
	028 Move X21, 0xF56000
	029 Move X20, 0xF2A000
	030 Move X21, [X21+872]
	031 Move X20, [X20+1432]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X21]
	034 Move X8, [X8+184]
	035 Move [X8], S0
	036 Move X0, [X20]
	037 Move X20, [X19+184]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {88}
	050 Move X20, [X19+184]
	051 Compare X20, 0
	052 JumpIfEqual {101}
	053 Move X0, X20
	054 Move X1, X31
	055 Call SpriteRenderer.get_color, X0
	056 Move X0, [X19+184]
	057 Compare X0, 0
	058 JumpIfEqual {101}
	059 Move X1, X31
	060 Move V8, V0
	061 Call SpriteRenderer.get_color, X0
	062 Move X0, [X19+184]
	063 Compare X0, 0
	064 JumpIfEqual {101}
	065 Move X1, X31
	066 Move V9, V1
	067 Call SpriteRenderer.get_color, X0
	068 Move X8, [X21]
	069 Move X0, X20
	070 Move V0, V8
	071 Move V1, V9
	072 Move X8, [X8+184]
	073 Move X1, X31
	074 Move V3, [X8]
	075 Call SpriteRenderer.set_color, X0, X1
	076 Move X8, [X21]
	077 Move X0, [X19+88]
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X30, [X31+16]
	081 Move X21, [X31+24]
	082 Move X8, [X8+184]
	083 Move V0, [X8]
	084 Move D9, [X31+48]
	085 Move D8, [X31+56]
	086 Call LTDescr.alphaRecursiveSprite, X0, V0
	087 Return 
	088 Move X8, [X21]
	089 Move X0, [X19+88]
	090 Move W1, [X19+26]
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X8, [X8+184]
	094 Move X30, [X31+16]
	095 Move X21, [X31+24]
	096 Move V0, [X8]
	097 Move D9, [X31+48]
	098 Move D8, [X31+56]
	099 Call LTDescr.alphaRecursive, X0, V0, X1
	100 Return 
	101 Call 0x1C17F20

Method: System.Void <setAlpha>b__93_1()

Disassembly:
	0x031CAE44 LDP D9, D8, [X31 + 0x10]
	0x031CAE48 MOV V2.16B, V10.16B
	0x031CAE4C MOV V3.16B, V11.16B
	0x031CAE50 LDP D11, D10, [X31], #0x40
	0x031CAE54 B 0x31C4C68
	0x031CAE58 LDP X20, X19, [X31 + 0x30]
	0x031CAE5C LDR X30, [X31 + 0x20]
	0x031CAE60 LDP D9, D8, [X31 + 0x10]
	0x031CAE64 LDP D11, D10, [X31], #0x40
	0x031CAE68 RET
	0x031CAE6C BL 0x1C16F20
	0x031CAE70 STP X30, X21, [X31 - 0x20]!
	0x031CAE74 STP X20, X19, [X31 + 0x10]
	0x031CAE78 ADRP X20, 0x1211000
	0x031CAE7C LDRB W8, [X20 + 0xFE7]
	0x031CAE80 MOV X19, X0
	0x031CAE84 TBNZ X8, 0x0, 0x31CAEB4
	0x031CAE88 ADRP X0, 0xF55000
	0x031CAE8C LDR X0, [X0 + 0x9C0]
	0x031CAE90 BL 0x1C16CF4
	0x031CAE94 ADRP X0, 0xF55000
	0x031CAE98 LDR X0, [X0 + 0x9C8]
	0x031CAE9C BL 0x1C16CF4
	0x031CAEA0 ADRP X0, 0xF29000
	0x031CAEA4 LDR X0, [X0 + 0x598]
	0x031CAEA8 BL 0x1C16CF4
	0x031CAEAC MOVZ W8, 0x1
	0x031CAEB0 STRB W8, [X20 + 0xFE7]
	0x031CAEB4 LDR X0, [X19 + 0x58]
	0x031CAEB8 CBZ X0, 0x31CAF7C
	0x031CAEBC ADRP X8, 0xF55000
	0x031CAEC0 LDR X8, [X8 + 0x9C0]
	0x031CAEC4 ADRP X21, 0xF29000
	0x031CAEC8 LDR X1, [X8]
	0x031CAECC LDR X21, [X21 + 0x598]
	0x031CAED0 BL 0x21A3894
	0x031CAED4 STR X0, [X19 + 0xD0]
	0x031CAED8 MOV X20, X0
	0x031CAEDC LDR X0, [X21]
	0x031CAEE0 LDR W8, [X0 + 0xE0]
	0x031CAEE4 CBNZ W8, 0x31CAEEC
	0x031CAEE8 BL 0x1C16DFC
	0x031CAEEC MOV X0, X20
	0x031CAEF0 MOV X1, X31
	0x031CAEF4 MOV X2, X31
	0x031CAEF8 BL 0x3C354F8
	0x031CAEFC TBZ X0, 0x0, 0x31CAF0C
	0x031CAF00 LDR X0, [X19 + 0xD0]
	0x031CAF04 CBNZ X0, 0x31CAF5C
	0x031CAF08 B 0x31CAF7C
	0x031CAF0C LDR X0, [X19 + 0x58]
	0x031CAF10 CBZ X0, 0x31CAF7C
	0x031CAF14 ADRP X8, 0xF55000
	0x031CAF18 LDR X8, [X8 + 0x9C8]
	0x031CAF1C LDR X1, [X8]
	0x031CAF20 BL 0x21A3894
	0x031CAF24 STR X0, [X19 + 0xD8]
	0x031CAF28 MOV X20, X0
	0x031CAF2C LDR X0, [X21]
	0x031CAF30 LDR W8, [X0 + 0xE0]
	0x031CAF34 CBNZ W8, 0x31CAF3C
	0x031CAF38 BL 0x1C16DFC
	0x031CAF3C MOV X0, X20
	0x031CAF40 MOV X1, X31
	0x031CAF44 MOV X2, X31
	0x031CAF48 BL 0x3C354F8
	0x031CAF4C FMOV S3, 1
	0x031CAF50 TBZ X0, 0x0, 0x31CAF6C
	0x031CAF54 LDR X0, [X19 + 0xD8]
	0x031CAF58 CBZ X0, 0x31CAF7C
	0x031CAF5C LDR X8, [X0]
	0x031CAF60 LDR X9, [X8 + 0x298]
	0x031CAF64 LDR X1, [X8 + 0x2A0]
	0x031CAF68 BLR X9
	0x031CAF6C STR S3, [X19 + 0x60]
	0x031CAF70 LDP X20, X19, [X31 + 0x10]
	0x031CAF74 LDP X30, X21, [X31], #0x20
	0x031CAF78 RET
	0x031CAF7C BL 0x1C16F20
	0x031CAF80 STR X30, [X31 - 0x30]!
	0x031CAF84 STP X22, X21, [X31 + 0x10]
	0x031CAF88 STP X20, X19, [X31 + 0x20]
	0x031CAF8C ADRP X20, 0x1211000

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1212000
	008 Move W8, [X20+4062]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0xF56000
	015 Move X0, [X0+872]
	016 Call 0x1C17CF4
	017 Move X0, 0xF2A000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+4062], W8
	022 Move X8, [X19+160]
	023 Compare X8, 0
	024 JumpIfEqual {106}
	025 Move X9, [X8+24]
	026 Move X0, [X8+64]
	027 Move X1, [X8+40]
	028 Move X21, 0xF56000
	029 Move X20, 0xF2A000
	030 Move X21, [X21+872]
	031 Move X20, [X20+1432]
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X21]
	034 Move X9, [X8+184]
	035 Move [X9+8], S0
	036 Move [X9+16], S1
	037 Move [X9+16], S2
	038 Move X8, [X8+184]
	039 Move V0, [X8+8]
	040 Move [X8], S0
	041 Move X0, [X20]
	042 Move X20, [X19+184]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {93}
	055 Move X20, [X19+184]
	056 Compare X20, 0
	057 JumpIfEqual {106}
	058 Move X0, X20
	059 Move X1, X31
	060 Call SpriteRenderer.get_color, X0
	061 Move X0, [X19+184]
	062 Compare X0, 0
	063 JumpIfEqual {106}
	064 Move X1, X31
	065 Move V8, V0
	066 Call SpriteRenderer.get_color, X0
	067 Move X0, [X19+184]
	068 Compare X0, 0
	069 JumpIfEqual {106}
	070 Move X1, X31
	071 Move V9, V1
	072 Call SpriteRenderer.get_color, X0
	073 Move X8, [X21]
	074 Move X0, X20
	075 Move V0, V8
	076 Move V1, V9
	077 Move X8, [X8+184]
	078 Move X1, X31
	079 Move V3, [X8]
	080 Call SpriteRenderer.set_color, X0, X1
	081 Move X8, [X21]
	082 Move X0, [X19+88]
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X30, [X31+16]
	086 Move X21, [X31+24]
	087 Move X8, [X8+184]
	088 Move V0, [X8]
	089 Move D9, [X31+48]
	090 Move D8, [X31+56]
	091 Call LTDescr.alphaRecursiveSprite, X0, V0
	092 Return 
	093 Move X8, [X21]
	094 Move X0, [X19+88]
	095 Move W1, [X19+26]
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X8, [X8+184]
	099 Move X30, [X31+16]
	100 Move X21, [X31+24]
	101 Move V0, [X8]
	102 Move D9, [X31+48]
	103 Move D8, [X31+56]
	104 Call LTDescr.alphaRecursive, X0, V0, X1
	105 Return 
	106 Call 0x1C17F20

Method: System.Void <setTextAlpha>b__94_0()

Disassembly:
	0x031CAF90 LDRB W8, [X20 + 0xFE8]
	0x031CAF94 MOV X19, X0
	0x031CAF98 TBNZ X8, 0x0, 0x31CAFBC
	0x031CAF9C ADRP X0, 0xF55000
	0x031CAFA0 LDR X0, [X0 + 0x368]
	0x031CAFA4 BL 0x1C16CF4
	0x031CAFA8 ADRP X0, 0xF29000
	0x031CAFAC LDR X0, [X0 + 0x598]
	0x031CAFB0 BL 0x1C16CF4
	0x031CAFB4 MOVZ W8, 0x1
	0x031CAFB8 STRB W8, [X20 + 0xFE8]
	0x031CAFBC LDR X8, [X19 + 0xA0]
	0x031CAFC0 CBZ X8, 0x31CB104
	0x031CAFC4 LDR X9, [X8 + 0x18]
	0x031CAFC8 LDR X0, [X8 + 0x40]
	0x031CAFCC LDR X1, [X8 + 0x28]
	0x031CAFD0 ADRP X21, 0xF55000
	0x031CAFD4 ADRP X22, 0xF29000
	0x031CAFD8 LDR X21, [X21 + 0x368]
	0x031CAFDC LDR X22, [X22 + 0x598]
	0x031CAFE0 BLR X9
	0x031CAFE4 LDR X8, [X21]
	0x031CAFE8 LDR X9, [X8 + 0xB8]
	0x031CAFEC STP S0, S1, [X9 + 0x8]
	0x031CAFF0 STR S2, [X9 + 0x10]
	0x031CAFF4 LDR X8, [X8 + 0xB8]
	0x031CAFF8 LDR V0, [X8 + 0x8]
	0x031CAFFC STR S0, [X8]
	0x031CB000 LDR X0, [X22]
	0x031CB004 LDR X20, [X19 + 0xD0]
	0x031CB008 LDR W8, [X0 + 0xE0]
	0x031CB00C CBNZ W8, 0x31CB014
	0x031CB010 BL 0x1C16DFC
	0x031CB014 MOV X0, X20
	0x031CB018 MOV X1, X31
	0x031CB01C MOV X2, X31
	0x031CB020 BL 0x3C354F8
	0x031CB024 TBZ X0, 0x0, 0x31CB04C
	0x031CB028 LDR X0, [X19 + 0xD0]
	0x031CB02C CBZ X0, 0x31CB104
	0x031CB030 LDR X8, [X0]
	0x031CB034 LDR X9, [X8 + 0x298]
	0x031CB038 LDR X1, [X8 + 0x2A0]
	0x031CB03C BLR X9
	0x031CB040 LDR X0, [X19 + 0xD0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1212000
	006 Move W8, [X20+4063]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xF56000
	013 Move X0, [X0+2520]
	014 Call 0x1C17CF4
	015 Move X0, 0xF2A000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+4063], W8
	020 Move X0, [X19+88]
	021 Compare X0, 0
	022 JumpIfEqual {58}
	023 Move X8, 0xF56000
	024 Move X8, [X8+2520]
	025 Move X21, 0xF2A000
	026 Move X1, [X8]
	027 Move X21, [X21+1432]
	028 Call 0x21A4894, X0
	029 Move [X19+200], X0
	030 Move X20, X0
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Inequality, X0, X1
	040 Move S3, 1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {52}
	045 Move X0, [X19+200]
	046 Compare X0, 0
	047 JumpIfEqual {58}
	048 Move X8, [X0]
	049 Move X9, [X8+664]
	050 Move X1, [X8+672]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move [X19+96], S3
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Move X21, [X31+40]
	057 Return 
	058 Call 0x1C17F20

Method: System.Void <setTextAlpha>b__94_1()

Disassembly:
	0x031CB044 CBNZ X0, 0x31CB094
	0x031CB048 B 0x31CB104
	0x031CB04C LDR X0, [X22]
	0x031CB050 LDR X20, [X19 + 0xD8]
	0x031CB054 LDR W8, [X0 + 0xE0]
	0x031CB058 CBNZ W8, 0x31CB060
	0x031CB05C BL 0x1C16DFC
	0x031CB060 MOV X0, X20
	0x031CB064 MOV X1, X31
	0x031CB068 MOV X2, X31
	0x031CB06C BL 0x3C354F8
	0x031CB070 TBZ X0, 0x0, 0x31CB0B0
	0x031CB074 LDR X0, [X19 + 0xD8]
	0x031CB078 CBZ X0, 0x31CB104
	0x031CB07C LDR X8, [X0]
	0x031CB080 LDR X9, [X8 + 0x298]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+160]
	005 Compare X8, 0
	006 JumpIfEqual {20}
	007 Move X19, X0
	008 Move X20, [X0+88]
	009 Move X9, [X8+24]
	010 Move X0, [X8+64]
	011 Move X1, [X8+40]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move W1, [X19+26]
	014 Move X0, X20
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 Call LTDescr.textAlphaRecursive, X0, V0, X1
	019 Return 
	020 Call 0x1C17F20

Method: System.Void <setAlphaVertex>b__95_0()

Disassembly:
	0x031CB084 LDR X1, [X8 + 0x2A0]
	0x031CB088 BLR X9
	0x031CB08C LDR X0, [X19 + 0xD8]
	0x031CB090 CBZ X0, 0x31CB104
	0x031CB094 LDR X8, [X21]
	0x031CB098 LDR X9, [X0]
	0x031CB09C LDR X8, [X8 + 0xB8]
	0x031CB0A0 LDR X10, [X9 + 0x2A8]
	0x031CB0A4 LDR X1, [X9 + 0x2B0]
	0x031CB0A8 LDR V3, [X8]
	0x031CB0AC BLR X10
	0x031CB0B0 LDRB W8, [X19 + 0x1A]
	0x031CB0B4 CBZ W8, 0x31CB0F4
	0x031CB0B8 LDR X8, [X21]
	0x031CB0BC LDR X0, [X19 + 0xC0]
	0x031CB0C0 MOV W1, W31
	0x031CB0C4 LDR X8, [X8 + 0xB8]
	0x031CB0C8 LDR V0, [X8]
	0x031CB0CC BL 0x31C34D8
	0x031CB0D0 LDR X8, [X21]
	0x031CB0D4 LDR X0, [X19 + 0xC0]
	0x031CB0D8 LDP X20, X19, [X31 + 0x20]
	0x031CB0DC LDP X22, X21, [X31 + 0x10]
	0x031CB0E0 LDR X8, [X8 + 0xB8]
	0x031CB0E4 MOVZ W1, 0x1
	0x031CB0E8 LDR V0, [X8]
	0x031CB0EC LDR X30, [X31], #0x30
	0x031CB0F0 B 0x31C4528
	0x031CB0F4 LDP X20, X19, [X31 + 0x20]
	0x031CB0F8 LDP X22, X21, [X31 + 0x10]
	0x031CB0FC LDR X30, [X31], #0x30
	0x031CB100 RET
	0x031CB104 BL 0x1C16F20
	0x031CB108 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1211000
	005 Move W8, [X20+4064]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF30000
	012 Move X0, [X0+2872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4064], W8
	016 Move X0, [X19+88]
	017 Compare X0, 0
	018 JumpIfEqual {43}
	019 Move X8, 0xF30000
	020 Move X8, [X8+2872]
	021 Move X1, [X8]
	022 Call 0x21A4894, X0
	023 Compare X0, 0
	024 JumpIfEqual {43}
	025 Move X1, X31
	026 Call MeshFilter.get_mesh, X0
	027 Compare X0, 0
	028 JumpIfEqual {43}
	029 Move X1, X31
	030 Call Mesh.get_colors32, X0
	031 Compare X0, 0
	032 JumpIfEqual {43}
	033 Move W8, [X0+24]
	034 Compare W8, 0
	035 JumpIfEqual {44}
	036 Move V0, [X0+35]
	037 NotImplemented "Instruction UCVTF not yet implemented."
	038 Move [X19+96], S0
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return 
	043 Call 0x1C17F20
	044 Call 0x1C17F28

Method: System.Void <setAlphaVertex>b__95_1()

Disassembly:
	0x031CB10C STP X20, X19, [X31 + 0x10]
	0x031CB110 ADRP X20, 0x1210000
	0x031CB114 LDRB W8, [X20 + 0xFE9]
	0x031CB118 MOV X19, X0
	0x031CB11C TBNZ X8, 0x0, 0x31CB134
	0x031CB120 ADRP X0, 0xF54000
	0x031CB124 LDR X0, [X0 + 0xB00]
	0x031CB128 BL 0x1C16CF4
	0x031CB12C MOVZ W8, 0x1
	0x031CB130 STRB W8, [X20 + 0xFE9]
	0x031CB134 LDR X0, [X19 + 0x58]
	0x031CB138 CBZ X0, 0x31CB168
	0x031CB13C ADRP X8, 0xF54000
	0x031CB140 LDR X8, [X8 + 0xB00]
	0x031CB144 LDR X1, [X8]
	0x031CB148 BL 0x21A3894
	0x031CB14C CBZ X0, 0x31CB168
	0x031CB150 MOV X1, X31
	0x031CB154 BL 0x3E2226C
	0x031CB158 STR S0, [X19 + 0x60]
	0x031CB15C LDP X20, X19, [X31 + 0x10]
	0x031CB160 LDR X30, [X31], #0x20
	0x031CB164 RET
	0x031CB168 BL 0x1C16F20
	0x031CB16C STR X30, [X31 - 0x20]!
	0x031CB170 STP X20, X19, [X31 + 0x10]
	0x031CB174 ADRP X20, 0x1210000
	0x031CB178 LDRB W8, [X20 + 0xFEA]
	0x031CB17C MOV X19, X0
	0x031CB180 TBNZ X8, 0x0, 0x31CB198
	0x031CB184 ADRP X0, 0xF54000
	0x031CB188 LDR X0, [X0 + 0xB00]
	0x031CB18C BL 0x1C16CF4
	0x031CB190 MOVZ W8, 0x1
	0x031CB194 STRB W8, [X20 + 0xFEA]
	0x031CB198 LDR X0, [X19 + 0x58]
	0x031CB19C CBZ X0, 0x31CB1E4
	0x031CB1A0 ADRP X8, 0xF54000
	0x031CB1A4 LDR X8, [X8 + 0xB00]
	0x031CB1A8 LDR X1, [X8]
	0x031CB1AC BL 0x21A3894
	0x031CB1B0 LDR X8, [X19 + 0xA0]
	0x031CB1B4 CBZ X8, 0x31CB1E4
	0x031CB1B8 MOV X19, X0
	0x031CB1BC LDR X9, [X8 + 0x18]
	0x031CB1C0 LDR X0, [X8 + 0x40]
	0x031CB1C4 LDR X1, [X8 + 0x28]
	0x031CB1C8 BLR X9
	0x031CB1CC CBZ X19, 0x31CB1E4
	0x031CB1D0 MOV X0, X19
	0x031CB1D4 LDP X20, X19, [X31 + 0x10]
	0x031CB1D8 MOV X1, X31
	0x031CB1DC LDR X30, [X31], #0x20
	0x031CB1E0 B 0x3E222A8
	0x031CB1E4 BL 0x1C16F20
	0x031CB1E8 STP X30, X21, [X31 - 0x20]!
	0x031CB1EC STP X20, X19, [X31 + 0x10]
	0x031CB1F0 ADRP X20, 0x1210000
	0x031CB1F4 LDRB W8, [X20 + 0xFEB]
	0x031CB1F8 MOV X19, X0
	0x031CB1FC TBNZ X8, 0x0, 0x31CB22C
	0x031CB200 ADRP X0, 0xF54000
	0x031CB204 LDR X0, [X0 + 0x9C0]
	0x031CB208 BL 0x1C16CF4
	0x031CB20C ADRP X0, 0xF54000
	0x031CB210 LDR X0, [X0 + 0x9C8]
	0x031CB214 BL 0x1C16CF4
	0x031CB218 ADRP X0, 0xF28000
	0x031CB21C LDR X0, [X0 + 0x598]
	0x031CB220 BL 0x1C16CF4
	0x031CB224 MOVZ W8, 0x1
	0x031CB228 STRB W8, [X20 + 0xFEB]
	0x031CB22C LDR X0, [X19 + 0x58]
	0x031CB230 CBZ X0, 0x31CB2C4
	0x031CB234 ADRP X8, 0xF54000
	0x031CB238 LDR X8, [X8 + 0x9C0]
	0x031CB23C ADRP X21, 0xF28000
	0x031CB240 LDR X1, [X8]
	0x031CB244 LDR X21, [X21 + 0x598]
	0x031CB248 BL 0x21A3894
	0x031CB24C STR X0, [X19 + 0xD0]
	0x031CB250 MOV X20, X0
	0x031CB254 LDR X0, [X21]
	0x031CB258 LDR W8, [X0 + 0xE0]
	0x031CB25C CBNZ W8, 0x31CB264
	0x031CB260 BL 0x1C16DFC
	0x031CB264 MOV X0, X20
	0x031CB268 MOV X1, X31
	0x031CB26C MOV X2, X31
	0x031CB270 BL 0x3C3883C
	0x031CB274 TBZ X0, 0x0, 0x31CB2C8
	0x031CB278 LDR X0, [X19 + 0x58]
	0x031CB27C CBZ X0, 0x31CB2C4
	0x031CB280 ADRP X8, 0xF54000
	0x031CB284 LDR X8, [X8 + 0x9C8]
	0x031CB288 LDR X1, [X8]
	0x031CB28C BL 0x21A3894
	0x031CB290 STR X0, [X19 + 0xD8]
	0x031CB294 MOV X20, X0
	0x031CB298 LDR X0, [X21]
	0x031CB29C LDR W8, [X0 + 0xE0]
	0x031CB2A0 CBNZ W8, 0x31CB2A8
	0x031CB2A4 BL 0x1C16DFC
	0x031CB2A8 MOV X0, X20
	0x031CB2AC MOV X1, X31
	0x031CB2B0 MOV X2, X31
	0x031CB2B4 BL 0x3C354F8
	0x031CB2B8 TBZ X0, 0x0, 0x31CB2E4
	0x031CB2BC LDR X0, [X19 + 0xD8]
	0x031CB2C0 CBNZ X0, 0x31CB2D0
	0x031CB2C4 BL 0x1C16F20
	0x031CB2C8 LDR X0, [X19 + 0xD0]
	0x031CB2CC CBZ X0, 0x31CB2C4
	0x031CB2D0 LDR X8, [X0]
	0x031CB2D4 LDR X9, [X8 + 0x298]
	0x031CB2D8 LDR X1, [X8 + 0x2A0]
	0x031CB2DC BLR X9
	0x031CB2E0 B 0x31CB2F4
	0x031CB2E4 FMOV S0, 1
	0x031CB2E8 FMOV S1, 1
	0x031CB2EC FMOV S2, 1
	0x031CB2F0 FMOV S3, 1
	0x031CB2F4 MOV X0, X19
	0x031CB2F8 LDP X20, X19, [X31 + 0x10]
	0x031CB2FC LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x1211000
	008 Move W8, [X20+4065]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0xF55000
	015 Move X0, [X0+2808]
	016 Call 0x1C17CF4
	017 Move X0, 0xF30000
	018 Move X0, [X0+2872]
	019 Call 0x1C17CF4
	020 Move X0, 0xF55000
	021 Move X0, [X0+872]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+4065], W8
	025 Move X8, [X19+160]
	026 Compare X8, 0
	027 JumpIfEqual {149}
	028 Move X9, [X8+24]
	029 Move X0, [X8+64]
	030 Move X1, [X8+40]
	031 Move X22, 0xF55000
	032 Move X22, [X22+872]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X8, [X22]
	035 Move X9, [X8+184]
	036 Move [X9+8], S0
	037 Move [X9+16], S1
	038 Move [X9+16], S2
	039 Move X8, [X8+184]
	040 Move V0, [X8+8]
	041 Move [X8], S0
	042 Move X0, [X19+88]
	043 Compare X0, 0
	044 JumpIfEqual {149}
	045 Move X8, 0xF30000
	046 Move X8, [X8+2872]
	047 Move X1, [X8]
	048 Call 0x21A4894, X0
	049 Compare X0, 0
	050 JumpIfEqual {149}
	051 Move X1, X31
	052 Call MeshFilter.get_mesh, X0
	053 Compare X0, 0
	054 JumpIfEqual {149}
	055 Move X1, X31
	056 Move X19, X0
	057 Call Mesh.get_vertices, X0
	058 Compare X0, 0
	059 JumpIfEqual {149}
	060 Move X23, 0xF55000
	061 Move X23, [X23+2808]
	062 Move X20, X0
	063 Move W1, [X20+24]
	064 Move X0, [X23]
	065 Call 0x1C17D6C
	066 Compare X0, 0
	067 JumpIfEqual {149}
	068 Move X8, [X0+24]
	069 Move X21, X0
	070 Compare X8, 0
	071 JumpIfNotEqual {103}
	072 Move X0, X19
	073 Move X1, X31
	074 Call Mesh.get_vertices, X0
	075 Compare X0, 0
	076 JumpIfEqual {149}
	077 Move X8, [X23]
	078 Move W1, [X0+24]
	079 Move X0, X8
	080 Call 0x1C17D6C
	081 Compare X0, 0
	082 JumpIfEqual {149}
	083 Move W8, [X0+24]
	084 Move X21, X0
	085 Move X9, X8
	086 ShiftRight X9, 32
	087 And X9, X9, 0x7FFFFFFF
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X9, X31
	090 Move X10, W8
	091 Add X11, X21, 32
	092 Move TEMP, 0xFF000000
	093 Not TEMP
	094 Move W12, TEMP
	095 NotImplemented "Instruction CMP not yet implemented."
	096 Move [X11], W12
	097 Add X9, X9, 1
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X0, X19
	100 Move X1, X21
	101 Move X2, X31
	102 Call Mesh.set_colors32, X0, X1
	103 Move X0, X19
	104 Move X1, X31
	105 Call Mesh.get_colors32, X0
	106 Compare X0, 0
	107 JumpIfEqual {149}
	108 Move W8, [X0+24]
	109 Compare W8, 0
	110 JumpIfEqual {148}
	111 Move X8, [X22]
	112 Move W9, [X0+32]
	113 Move X0, X31
	114 Move X8, [X8+184]
	115 And W10, W9, 255
	116 Move W11, W9
	117 ShiftRight W11, 8
	118 And W11, W11, 0x7FFF
	119 Move W9, W9
	120 ShiftRight W9, 16
	121 And W9, W9, 0x7FFFFF
	122 Move V3, [X8]
	123 NotImplemented "Instruction UCVTF not yet implemented."
	124 NotImplemented "Instruction UCVTF not yet implemented."
	125 NotImplemented "Instruction UCVTF not yet implemented."
	126 Call 0x1E44664
	127 Move W8, [X20+24]
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Move W9, [X21+24]
	130 Move X8, X31
	131 Add X10, X21, 32
	132 NotImplemented "Instruction CMP not yet implemented."
	133 Move [X10], W0
	134 NotImplemented "Instruction LDRSW not yet implemented."
	135 Add X8, X8, 1
	136 NotImplemented "Instruction CMP not yet implemented."
	137 Move X0, X19
	138 Move X1, X21
	139 Move X20, [X31+32]
	140 Move X19, [X31+40]
	141 Move X22, [X31+16]
	142 Move X21, [X31+24]
	143 Move X2, X31
	144 Move X30, [X31+48]
	145 Move X23, [X31+56]
	146 Call Mesh.set_colors32, X0, X1
	147 Return 
	148 Call 0x1C17F28
	149 Call 0x1C17F20

Method: System.Void <setColor>b__96_0()

Disassembly:
	0x031CB300 B 0x31C2C30
	0x031CB304 STP D11, D10, [X31 - 0x50]!
	0x031CB308 STP D9, D8, [X31 + 0x10]
	0x031CB30C STR X30, [X31 + 0x20]
	0x031CB310 STP X22, X21, [X31 + 0x30]
	0x031CB314 STP X20, X19, [X31 + 0x40]
	0x031CB318 ADRP X20, 0x1210000
	0x031CB31C LDRB W8, [X20 + 0xFEC]
	0x031CB320 MOV X19, X0
	0x031CB324 TBNZ X8, 0x0, 0x31CB348
	0x031CB328 ADRP X0, 0xF54000
	0x031CB32C LDR X0, [X0 + 0x368]
	0x031CB330 BL 0x1C16CF4
	0x031CB334 ADRP X0, 0xF28000
	0x031CB338 LDR X0, [X0 + 0x598]
	0x031CB33C BL 0x1C16CF4
	0x031CB340 MOVZ W8, 0x1
	0x031CB344 STRB W8, [X20 + 0xFEC]
	0x031CB348 LDR X8, [X19 + 0xA0]
	0x031CB34C CBZ X8, 0x31CB4B8
	0x031CB350 LDR X9, [X8 + 0x18]
	0x031CB354 LDR X0, [X8 + 0x40]
	0x031CB358 LDR X1, [X8 + 0x28]
	0x031CB35C ADRP X21, 0xF54000
	0x031CB360 ADRP X22, 0xF28000
	0x031CB364 LDR X21, [X21 + 0x368]
	0x031CB368 LDR X22, [X22 + 0x598]
	0x031CB36C BLR X9
	0x031CB370 LDR X8, [X21]
	0x031CB374 MOV X0, X19
	0x031CB378 LDR X9, [X8 + 0xB8]
	0x031CB37C STP S0, S1, [X9 + 0x8]
	0x031CB380 STR S2, [X9 + 0x10]
	0x031CB384 LDR X8, [X8 + 0xB8]
	0x031CB388 LDR V0, [X8 + 0x8]
	0x031CB38C STR S0, [X8]
	0x031CB390 BL 0x31C5024
	0x031CB394 LDR X0, [X22]
	0x031CB398 LDR X20, [X19 + 0xD0]
	0x031CB39C MOV V8.16B, V0.16B
	0x031CB3A0 MOV V9.16B, V1.16B
	0x031CB3A4 LDR W8, [X0 + 0xE0]
	0x031CB3A8 MOV V10.16B, V2.16B
	0x031CB3AC MOV V11.16B, V3.16B
	0x031CB3B0 CBNZ W8, 0x31CB3B8
	0x031CB3B4 BL 0x1C16DFC
	0x031CB3B8 MOV X0, X20
	0x031CB3BC MOV X1, X31
	0x031CB3C0 MOV X2, X31
	0x031CB3C4 BL 0x3C354F8
	0x031CB3C8 TBZ X0, 0x0, 0x31CB3D8
	0x031CB3CC LDR X0, [X19 + 0xD0]
	0x031CB3D0 CBNZ X0, 0x31CB408
	0x031CB3D4 B 0x31CB4B8
	0x031CB3D8 LDR X0, [X22]
	0x031CB3DC LDR X20, [X19 + 0xD8]
	0x031CB3E0 LDR W8, [X0 + 0xE0]
	0x031CB3E4 CBNZ W8, 0x31CB3EC
	0x031CB3E8 BL 0x1C16DFC
	0x031CB3EC MOV X0, X20
	0x031CB3F0 MOV X1, X31
	0x031CB3F4 MOV X2, X31
	0x031CB3F8 BL 0x3C354F8
	0x031CB3FC TBZ X0, 0x0, 0x31CB428
	0x031CB400 LDR X0, [X19 + 0xD8]
	0x031CB404 CBZ X0, 0x31CB4B8
	0x031CB408 LDR X8, [X0]
	0x031CB40C MOV V0.16B, V8.16B
	0x031CB410 MOV V1.16B, V9.16B
	0x031CB414 MOV V2.16B, V10.16B
	0x031CB418 LDR X9, [X8 + 0x2A8]
	0x031CB41C LDR X1, [X8 + 0x2B0]
	0x031CB420 MOV V3.16B, V11.16B
	0x031CB424 BLR X9
	0x031CB428 LDR X8, [X21]
	0x031CB42C LDR X8, [X8 + 0xB8]
	0x031CB430 LDR V0, [X8 + 0x4]
	0x031CB434 FCMP S0, 0x0
	0x031CB438 B.EQ 0x31CB46C
	0x031CB43C LDR X8, [X19 + 0xE8]
	0x031CB440 CBZ X8, 0x31CB4B8
	0x031CB444 LDR X8, [X8 + 0xB0]
	0x031CB448 CBZ X8, 0x31CB46C
	0x031CB44C LDR X9, [X8 + 0x18]
	0x031CB450 LDR X0, [X8 + 0x40]
	0x031CB454 LDR X1, [X8 + 0x28]
	0x031CB458 MOV V0.16B, V8.16B
	0x031CB45C MOV V1.16B, V9.16B
	0x031CB460 MOV V2.16B, V10.16B
	0x031CB464 MOV V3.16B, V11.16B
	0x031CB468 BLR X9
	0x031CB46C LDRB W8, [X19 + 0x1A]
	0x031CB470 CBZ W8, 0x31CB4A0
	0x031CB474 LDR X0, [X19 + 0xC0]
	0x031CB478 MOV V0.16B, V8.16B
	0x031CB47C MOV V1.16B, V9.16B
	0x031CB480 LDP X20, X19, [X31 + 0x40]
	0x031CB484 LDP X22, X21, [X31 + 0x30]
	0x031CB488 LDR X30, [X31 + 0x20]
	0x031CB48C LDP D9, D8, [X31 + 0x10]
	0x031CB490 MOV V2.16B, V10.16B
	0x031CB494 MOV V3.16B, V11.16B
	0x031CB498 LDP D11, D10, [X31], #0x50
	0x031CB49C B 0x31C40F0
	0x031CB4A0 LDP X20, X19, [X31 + 0x40]
	0x031CB4A4 LDP X22, X21, [X31 + 0x30]
	0x031CB4A8 LDR X30, [X31 + 0x20]
	0x031CB4AC LDP D9, D8, [X31 + 0x10]
	0x031CB4B0 LDP D11, D10, [X31], #0x50
	0x031CB4B4 RET
	0x031CB4B8 BL 0x1C16F20
	0x031CB4BC STP X30, X19, [X31 - 0x10]!
	0x031CB4C0 MOV X19, X0
	0x031CB4C4 LDR X0, [X0 + 0xC0]
	0x031CB4C8 CBZ X0, 0x31CB4E0
	0x031CB4CC MOV X1, X31
	0x031CB4D0 BL 0x3C3EB44
	0x031CB4D4 STR S0, [X19 + 0x60]
	0x031CB4D8 LDP X30, X19, [X31], #0x10
	0x031CB4DC RET
	0x031CB4E0 BL 0x1C16F20
	0x031CB4E4 STP D9, D8, [X31 - 0x20]!
	0x031CB4E8 STP X30, X19, [X31 + 0x10]
	0x031CB4EC MOV X19, X0
	0x031CB4F0 LDR X0, [X0 + 0xC0]
	0x031CB4F4 CBZ X0, 0x31CB544
	0x031CB4F8 MOV X1, X31
	0x031CB4FC BL 0x3C3EB44
	0x031CB500 LDR X8, [X19 + 0xA0]
	0x031CB504 CBZ X8, 0x31CB544
	0x031CB508 LDR X9, [X8 + 0x18]
	0x031CB50C LDR X0, [X8 + 0x40]
	0x031CB510 LDR X1, [X8 + 0x28]
	0x031CB514 LDR X19, [X19 + 0xC0]
	0x031CB518 MOV V8.16B, V1.16B
	0x031CB51C MOV V9.16B, V2.16B
	0x031CB520 BLR X9
	0x031CB524 CBZ X19, 0x31CB544
	0x031CB528 MOV X0, X19
	0x031CB52C LDP X30, X19, [X31 + 0x10]
	0x031CB530 MOV V1.16B, V8.16B
	0x031CB534 MOV V2.16B, V9.16B
	0x031CB538 MOV X1, X31
	0x031CB53C LDP D9, D8, [X31], #0x20
	0x031CB540 B 0x3C3EBD4
	0x031CB544 BL 0x1C16F20
	0x031CB548 STP X30, X19, [X31 - 0x10]!
	0x031CB54C MOV X19, X0
	0x031CB550 LDR X0, [X0 + 0xC0]
	0x031CB554 CBZ X0, 0x31CB56C
	0x031CB558 MOV X1, X31
	0x031CB55C BL 0x3C3EB44
	0x031CB560 STR S1, [X19 + 0x60]
	0x031CB564 LDP X30, X19, [X31], #0x10
	0x031CB568 RET
	0x031CB56C BL 0x1C16F20
	0x031CB570 STP D9, D8, [X31 - 0x20]!
	0x031CB574 STP X30, X19, [X31 + 0x10]
	0x031CB578 MOV X19, X0
	0x031CB57C LDR X0, [X0 + 0xC0]
	0x031CB580 CBZ X0, 0x31CB5D4
	0x031CB584 MOV X1, X31
	0x031CB588 BL 0x3C3EB44
	0x031CB58C LDR X8, [X19 + 0xA0]
	0x031CB590 CBZ X8, 0x31CB5D4
	0x031CB594 LDR X9, [X8 + 0x18]
	0x031CB598 LDR X0, [X8 + 0x40]
	0x031CB59C LDR X1, [X8 + 0x28]
	0x031CB5A0 LDR X19, [X19 + 0xC0]
	0x031CB5A4 MOV V8.16B, V0.16B
	0x031CB5A8 MOV V9.16B, V2.16B
	0x031CB5AC BLR X9
	0x031CB5B0 CBZ X19, 0x31CB5D4
	0x031CB5B4 MOV X0, X19
	0x031CB5B8 LDP X30, X19, [X31 + 0x10]
	0x031CB5BC MOV V1.16B, V0.16B
	0x031CB5C0 MOV V0.16B, V8.16B
	0x031CB5C4 MOV V2.16B, V9.16B
	0x031CB5C8 MOV X1, X31
	0x031CB5CC LDP D9, D8, [X31], #0x20
	0x031CB5D0 B 0x3C3EBD4
	0x031CB5D4 BL 0x1C16F20
	0x031CB5D8 STP X30, X19, [X31 - 0x10]!
	0x031CB5DC MOV X19, X0
	0x031CB5E0 LDR X0, [X0 + 0xC0]
	0x031CB5E4 CBZ X0, 0x31CB5FC
	0x031CB5E8 MOV X1, X31
	0x031CB5EC BL 0x3C3EB44
	0x031CB5F0 STR S2, [X19 + 0x60]
	0x031CB5F4 LDP X30, X19, [X31], #0x10
	0x031CB5F8 RET
	0x031CB5FC BL 0x1C16F20
	0x031CB600 STP D9, D8, [X31 - 0x20]!
	0x031CB604 STP X30, X19, [X31 + 0x10]
	0x031CB608 MOV X19, X0
	0x031CB60C LDR X0, [X0 + 0xC0]
	0x031CB610 CBZ X0, 0x31CB664
	0x031CB614 MOV X1, X31
	0x031CB618 BL 0x3C3EB44
	0x031CB61C LDR X8, [X19 + 0xA0]
	0x031CB620 CBZ X8, 0x31CB664
	0x031CB624 LDR X9, [X8 + 0x18]
	0x031CB628 LDR X0, [X8 + 0x40]
	0x031CB62C LDR X1, [X8 + 0x28]
	0x031CB630 LDR X19, [X19 + 0xC0]
	0x031CB634 MOV V8.16B, V0.16B
	0x031CB638 MOV V9.16B, V1.16B
	0x031CB63C BLR X9
	0x031CB640 CBZ X19, 0x31CB664
	0x031CB644 MOV X0, X19
	0x031CB648 LDP X30, X19, [X31 + 0x10]
	0x031CB64C MOV V2.16B, V0.16B
	0x031CB650 MOV V0.16B, V8.16B
	0x031CB654 MOV V1.16B, V9.16B
	0x031CB658 MOV X1, X31
	0x031CB65C LDP D9, D8, [X31], #0x20
	0x031CB660 B 0x3C3EBD4
	0x031CB664 BL 0x1C16F20
	0x031CB668 STR D10, [X31 - 0x40]!
	0x031CB66C STP D9, D8, [X31 + 0x10]
	0x031CB670 STP X30, X21, [X31 + 0x20]
	0x031CB674 STP X20, X19, [X31 + 0x30]
	0x031CB678 ADRP X20, 0x1210000
	0x031CB67C LDRB W8, [X20 + 0xFED]
	0x031CB680 MOV X19, X0
	0x031CB684 TBNZ X8, 0x0, 0x31CB69C
	0x031CB688 ADRP X0, 0xF54000
	0x031CB68C LDR X0, [X0 + 0x368]
	0x031CB690 BL 0x1C16CF4
	0x031CB694 MOVZ W8, 0x1
	0x031CB698 STRB W8, [X20 + 0xFED]
	0x031CB69C LDR X8, [X19 + 0xA0]
	0x031CB6A0 CBZ X8, 0x31CB7E0
	0x031CB6A4 LDR X9, [X8 + 0x18]
	0x031CB6A8 LDR X0, [X8 + 0x40]
	0x031CB6AC LDR X1, [X8 + 0x28]
	0x031CB6B0 ADRP X21, 0xF54000
	0x031CB6B4 LDR X21, [X21 + 0x368]
	0x031CB6B8 BLR X9
	0x031CB6BC LDR X8, [X21]
	0x031CB6C0 LDR X9, [X8 + 0xB8]
	0x031CB6C4 STP S0, S1, [X9 + 0x8]
	0x031CB6C8 STR S2, [X9 + 0x10]
	0x031CB6CC LDR X8, [X8 + 0xB8]
	0x031CB6D0 LDR V0, [X8 + 0x8]
	0x031CB6D4 STR S0, [X8]
	0x031CB6D8 LDR X20, [X19 + 0xC0]
	0x031CB6DC CBZ X20, 0x31CB7E0
	0x031CB6E0 MOV X0, X20
	0x031CB6E4 MOV X1, X31
	0x031CB6E8 BL 0x3C3EB78
	0x031CB6EC LDR X8, [X19 + 0xE8]
	0x031CB6F0 CBZ X8, 0x31CB7E0
	0x031CB6F4 MOV V8.16B, V0.16B
	0x031CB6F8 MOV V9.16B, V1.16B
	0x031CB6FC MOV V10.16B, V2.16B
	0x031CB700 LDP S0, S1, [X8 + 0x18]
	0x031CB704 LDR V2, [X8 + 0x20]
	0x031CB708 MOV X0, X20
	0x031CB70C MOV X1, X31
	0x031CB710 BL 0x3C3DE4C
	0x031CB714 LDR X8, [X19 + 0xE8]
	0x031CB718 CBZ X8, 0x31CB7E0
	0x031CB71C LDR X9, [X21]
	0x031CB720 LDP S3, S4, [X8 + 0x24]
	0x031CB724 LDR V5, [X8 + 0x2C]
	0x031CB728 MOV X0, X20
	0x031CB72C LDR X9, [X9 + 0xB8]
	0x031CB730 MOV X1, X31
	0x031CB734 LDR V6, [X9]
	0x031CB738 FNEG S6, S6
	0x031CB73C BL 0x3C40680
	0x031CB740 MOV X0, X20
	0x031CB744 MOV X1, X31
	0x031CB748 BL 0x3C3EB78
	0x031CB74C FSUB S0, S8, S0
	0x031CB750 FSUB S1, S9, S1
	0x031CB754 FSUB S2, S10, S2
	0x031CB758 FSUB S0, S8, S0
	0x031CB75C FSUB S1, S9, S1
	0x031CB760 FSUB S2, S10, S2
	0x031CB764 MOV X0, X20
	0x031CB768 MOV X1, X31
	0x031CB76C BL 0x3C3EC04
	0x031CB770 LDR X8, [X19 + 0xE8]
	0x031CB774 CBZ X8, 0x31CB7E0
	0x031CB778 LDP S0, S1, [X8 + 0x34]
	0x031CB77C LDP S2, S3, [X8 + 0x3C]
	0x031CB780 MOV X0, X20
	0x031CB784 MOV X1, X31
	0x031CB788 BL 0x3C3F7AC
	0x031CB78C LDR X8, [X19 + 0xE8]
	0x031CB790 CBZ X8, 0x31CB7E0
	0x031CB794 LDP S0, S1, [X8 + 0x18]
	0x031CB798 LDR V2, [X8 + 0x20]
	0x031CB79C MOV X0, X20
	0x031CB7A0 MOV X1, X31
	0x031CB7A4 BL 0x3C3DE4C
	0x031CB7A8 LDR X8, [X19 + 0xE8]
	0x031CB7AC CBZ X8, 0x31CB7E0
	0x031CB7B0 LDR X9, [X21]
	0x031CB7B4 LDP S3, S4, [X8 + 0x24]
	0x031CB7B8 LDR V5, [X8 + 0x2C]
	0x031CB7BC MOV X0, X20
	0x031CB7C0 LDR X9, [X9 + 0xB8]
	0x031CB7C4 LDP X20, X19, [X31 + 0x30]
	0x031CB7C8 LDP X30, X21, [X31 + 0x20]
	0x031CB7CC LDP D9, D8, [X31 + 0x10]
	0x031CB7D0 LDR V6, [X9]
	0x031CB7D4 MOV X1, X31
	0x031CB7D8 LDR V10, [X31], #0x40
	0x031CB7DC B 0x3C40680
	0x031CB7E0 BL 0x1C16F20
	0x031CB7E4 STP D13, D12, [X31 - 0x50]!
	0x031CB7E8 STP D11, D10, [X31 + 0x10]
	0x031CB7EC STP D9, D8, [X31 + 0x20]
	0x031CB7F0 STP X30, X21, [X31 + 0x30]
	0x031CB7F4 STP X20, X19, [X31 + 0x40]
	0x031CB7F8 ADRP X20, 0x1210000
	0x031CB7FC LDRB W8, [X20 + 0xFEE]
	0x031CB800 MOV X19, X0
	0x031CB804 TBNZ X8, 0x0, 0x31CB81C
	0x031CB808 ADRP X0, 0xF54000
	0x031CB80C LDR X0, [X0 + 0x368]
	0x031CB810 BL 0x1C16CF4
	0x031CB814 MOVZ W8, 0x1
	0x031CB818 STRB W8, [X20 + 0xFEE]
	0x031CB81C LDR X8, [X19 + 0xA0]
	0x031CB820 CBZ X8, 0x31CB9C4
	0x031CB824 LDR X9, [X8 + 0x18]
	0x031CB828 LDR X0, [X8 + 0x40]
	0x031CB82C LDR X1, [X8 + 0x28]
	0x031CB830 ADRP X21, 0xF54000
	0x031CB834 LDR X21, [X21 + 0x368]
	0x031CB838 BLR X9
	0x031CB83C LDR X8, [X21]
	0x031CB840 LDR X9, [X8 + 0xB8]
	0x031CB844 STP S0, S1, [X9 + 0x8]
	0x031CB848 STR S2, [X9 + 0x10]
	0x031CB84C LDR X8, [X8 + 0xB8]
	0x031CB850 LDR V0, [X8 + 0x8]
	0x031CB854 STR S0, [X8]
	0x031CB858 LDR X20, [X19 + 0xC0]
	0x031CB85C CBZ X20, 0x31CB9C4
	0x031CB860 MOV X0, X20
	0x031CB864 MOV X1, X31
	0x031CB868 BL 0x3C3EB78
	0x031CB86C LDR X8, [X19 + 0xE8]
	0x031CB870 CBZ X8, 0x31CB9C4
	0x031CB874 MOV V8.16B, V0.16B
	0x031CB878 MOV V9.16B, V1.16B
	0x031CB87C MOV V10.16B, V2.16B
	0x031CB880 LDP S0, S1, [X8 + 0x18]
	0x031CB884 LDR V2, [X8 + 0x20]
	0x031CB888 MOV X0, X20
	0x031CB88C MOV X1, X31
	0x031CB890 BL 0x3C3DE4C
	0x031CB894 LDR X8, [X19 + 0xE8]
	0x031CB898 CBZ X8, 0x31CB9C4
	0x031CB89C MOV V11.16B, V0.16B
	0x031CB8A0 MOV V12.16B, V1.16B
	0x031CB8A4 MOV V13.16B, V2.16B
	0x031CB8A8 LDP S0, S1, [X8 + 0x24]
	0x031CB8AC LDR V2, [X8 + 0x2C]
	0x031CB8B0 MOV X0, X20

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x1211000
	011 Move W8, [X20+4066]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {46}
	017 Move X0, 0xF55000
	018 Move X0, [X0+1440]
	019 Call 0x1C17CF4
	020 Move X0, 0xF55000
	021 Move X0, [X0+2512]
	022 Call 0x1C17CF4
	023 Move X0, 0xF55000
	024 Move X0, [X0+2480]
	025 Call 0x1C17CF4
	026 Move X0, 0xF29000
	027 Move X0, [X0+3584]
	028 Call 0x1C17CF4
	029 Move X0, 0xF29000
	030 Move X0, [X0+3608]
	031 Call 0x1C17CF4
	032 Move X0, 0xF29000
	033 Move X0, [X0+1432]
	034 Call 0x1C17CF4
	035 Move X0, 0xF2B000
	036 Move X0, [X0+1592]
	037 Call 0x1C17CF4
	038 Move X0, 0xF55000
	039 Move X0, [X0+2488]
	040 Call 0x1C17CF4
	041 Move X0, 0xF51000
	042 Move X0, [X0+736]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+4066], W8
	046 Move X0, [X19+88]
	047 Compare X0, 0
	048 JumpIfEqual {357}
	049 Move X8, 0xF55000
	050 Move X8, [X8+2512]
	051 Move X23, 0xF29000
	052 Move X1, [X8]
	053 Move X23, [X23+1432]
	054 Call 0x21A4894, X0
	055 Move X8, [X23]
	056 Move X20, X0
	057 Move W9, [X8+224]
	058 Compare W9, 0
	059 JumpIfNotEqual {62}
	060 Move X0, X8
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Inequality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {87}
	070 Compare X20, 0
	071 JumpIfEqual {357}
	072 Move X0, X20
	073 Move X1, X31
	074 Call SpriteRenderer.get_color, X0
	075 Move X0, X19
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X22, [X31+48]
	079 Move X21, [X31+56]
	080 Move X24, [X31+32]
	081 Move X23, [X31+40]
	082 Move X26, [X31+16]
	083 Move X25, [X31+24]
	084 Move X30, [X31+80]
	085 Call LTDescr.setFromColor, X0, X1
	086 Return 
	087 Move X0, [X19+88]
	088 Compare X0, 0
	089 JumpIfEqual {357}
	090 Move X21, 0xF55000
	091 Move X21, [X21+1440]
	092 Move X1, [X21]
	093 Call 0x21A4894, X0
	094 Move X8, [X23]
	095 Move X20, X0
	096 Move W9, [X8+224]
	097 Compare W9, 0
	098 JumpIfNotEqual {101}
	099 Move X0, X8
	100 Call 0x1C17DFC
	101 Move X0, X20
	102 Move X1, X31
	103 Move X2, X31
	104 Call Object.op_Inequality, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {142}
	109 Move X0, [X19+88]
	110 Compare X0, 0
	111 JumpIfEqual {357}
	112 Move X1, [X21]
	113 Call 0x21A4894, X0
	114 Compare X0, 0
	115 JumpIfEqual {357}
	116 Move X1, X31
	117 Call Renderer.get_material, X0
	118 Compare X0, 0
	119 JumpIfEqual {357}
	120 Move X8, 0xF51000
	121 Move X8, [X8+736]
	122 Move X2, X31
	123 Move X1, [X8]
	124 Call Material.HasProperty, X0, X1
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfNotEqual {142}
	129 Move X0, [X19+88]
	130 Compare X0, 0
	131 JumpIfEqual {357}
	132 Move X1, [X21]
	133 Call 0x21A4894, X0
	134 Compare X0, 0
	135 JumpIfEqual {357}
	136 Move X1, X31
	137 Call Renderer.get_material, X0
	138 Compare X0, 0
	139 JumpIfEqual {357}
	140 Move X1, X31
	141 Call Material.get_color, X0
	142 Move X0, [X19+88]
	143 Compare X0, 0
	144 JumpIfEqual {357}
	145 Move X1, [X21]
	146 Call 0x21A4894, X0
	147 Move X8, [X23]
	148 Move X20, X0
	149 Move W9, [X8+224]
	150 Compare W9, 0
	151 JumpIfNotEqual {154}
	152 Move X0, X8
	153 Call 0x1C17DFC
	154 Move X0, X20
	155 Move X1, X31
	156 Move X2, X31
	157 Call Object.op_Inequality, X0, X1
	158 Move TEMP, X0
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfNotEqual {196}
	162 Move X0, [X19+88]
	163 Compare X0, 0
	164 JumpIfEqual {357}
	165 Move X1, [X21]
	166 Call 0x21A4894, X0
	167 Compare X0, 0
	168 JumpIfEqual {357}
	169 Move X1, X31
	170 Call Renderer.get_material, X0
	171 Compare X0, 0
	172 JumpIfEqual {357}
	173 Move X20, 0xF55000
	174 Move X20, [X20+2488]
	175 Move X2, X31
	176 Move X1, [X20]
	177 Call Material.HasProperty, X0, X1
	178 Move TEMP, X0
	179 And TEMP, TEMP, 1
	180 Compare TEMP, 1
	181 JumpIfNotEqual {196}
	182 Move X0, [X19+88]
	183 Compare X0, 0
	184 JumpIfEqual {357}
	185 Move X1, [X21]
	186 Call 0x21A4894, X0
	187 Compare X0, 0
	188 JumpIfEqual {357}
	189 Move X1, X31
	190 Call Renderer.get_material, X0
	191 Compare X0, 0
	192 JumpIfEqual {357}
	193 Move X1, [X20]
	194 Move X2, X31
	195 Call Material.GetColor, X0, X1
	196 Move X0, [X19+88]
	197 Compare X0, 0
	198 JumpIfEqual {357}
	199 Move X1, X31
	200 Call Transform.get_childCount, X0
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move X0, [X19+88]
	203 Compare X0, 0
	204 JumpIfEqual {357}
	205 Move X1, X31
	206 Call Transform.GetEnumerator, X0
	207 Move X20, X0
	208 Compare X0, 0
	209 JumpIfEqual {360}
	210 Move X25, 0xF29000
	211 Move X26, 0xF2B000
	212 Move X24, 0xF55000
	213 Move X25, [X25+3608]
	214 Move X26, [X26+1592]
	215 Move X24, [X24+2480]
	216 Move X8, [X20]
	217 Move X1, [X25]
	218 NotImplemented "Instruction LDRH not yet implemented."
	219 Compare X9, 0
	220 JumpIfEqual {227}
	221 Move X10, [X8+176]
	222 Add X10, X10, 8
	223 NotImplemented "Instruction LDUR not yet implemented."
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Subtract X9, X9, 1
	226 Add X10, X10, 16
	227 Move X0, X20
	228 Move W2, W31
	229 Call 0x1C5D788
	230 NotImplemented "Instruction LDRSW not yet implemented."
	231 Add X8, X8, X9
	232 Add X0, X8, 312
	233 Move X8, [X0]
	234 Move X1, [X0+8]
	235 Move X0, X20
	236 NotImplemented "Instruction BLR not yet implemented."
	237 Move TEMP, X0
	238 And TEMP, TEMP, 1
	239 Compare TEMP, 1
	240 JumpIfNotEqual {313}
	241 Move X8, [X20]
	242 Move X1, [X25]
	243 NotImplemented "Instruction LDRH not yet implemented."
	244 Compare X9, 0
	245 JumpIfEqual {252}
	246 Move X10, [X8+176]
	247 Add X10, X10, 8
	248 NotImplemented "Instruction LDUR not yet implemented."
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Subtract X9, X9, 1
	251 Add X10, X10, 16
	252 Move W2, 1
	253 Move X0, X20
	254 Call 0x1C5D788
	255 Move W9, [X10]
	256 Add W9, W9, 1
	257 Add X8, X8, W9
	258 Add X0, X8, 312
	259 Move X8, [X0]
	260 Move X1, [X0+8]
	261 Move X0, X20
	262 NotImplemented "Instruction BLR not yet implemented."
	263 Move X21, X0
	264 Compare X0, 0
	265 JumpIfEqual {358}
	266 Move X8, [X21]
	267 Move X1, [X26]
	268 Move W10, [X8+304]
	269 Move W9, [X1+304]
	270 NotImplemented "Instruction CMP not yet implemented."
	271 Move X8, [X8+200]
	272 Add X8, X8, X9
	273 NotImplemented "Instruction LDUR not yet implemented."
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move X0, X21
	276 Move X1, X31
	277 Call Component.get_gameObject, X0
	278 Compare X0, 0
	279 JumpIfEqual {359}
	280 Move X1, [X24]
	281 Call 0x21E62E4, X0
	282 Move X22, X0
	283 Move X0, [X23]
	284 Move W8, [X0+224]
	285 Compare W8, 0
	286 JumpIfNotEqual {288}
	287 Call 0x1C17DFC
	288 Move X0, X22
	289 Move X1, X31
	290 Move X2, X31
	291 Call Object.op_Inequality, X0, X1
	292 Move TEMP, X0
	293 And TEMP, TEMP, 1
	294 Compare TEMP, 1
	295 JumpIfNotEqual {216}
	296 Move X0, X21
	297 Move X1, X31
	298 Call Component.get_gameObject, X0
	299 Compare X0, 0
	300 JumpIfEqual {363}
	301 Move X1, [X24]
	302 Call 0x21E62E4, X0
	303 Compare X0, 0
	304 JumpIfEqual {364}
	305 Move X1, X31
	306 Call Renderer.get_material, X0
	307 Compare X0, 0
	308 JumpIfEqual {365}
	309 Move X1, X31
	310 Call Material.get_color, X0
	311 Move X0, X19
	312 Call LTDescr.setFromColor, X0, X1
	313 Move X19, X31
	314 Move X21, 0xF29000
	315 Move X21, [X21+3584]
	316 Move X0, X20
	317 Move X1, [X21]
	318 Call 0x1C17E00
	319 Compare X0, 0
	320 JumpIfEqual {343}
	321 Move X8, [X0]
	322 Move X1, [X21]
	323 Move X20, X0
	324 NotImplemented "Instruction LDRH not yet implemented."
	325 Compare X9, 0
	326 JumpIfEqual {333}
	327 Move X10, [X8+176]
	328 Add X10, X10, 8
	329 NotImplemented "Instruction LDUR not yet implemented."
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Subtract X9, X9, 1
	332 Add X10, X10, 16
	333 Move X0, X20
	334 Move W2, W31
	335 Call 0x1C5D788
	336 NotImplemented "Instruction LDRSW not yet implemented."
	337 Add X8, X8, X9
	338 Add X0, X8, 312
	339 Move X8, [X0]
	340 Move X1, [X0+8]
	341 Move X0, X20
	342 NotImplemented "Instruction BLR not yet implemented."
	343 Compare X19, 0
	344 JumpIfNotEqual {361}
	345 Move X20, [X31+64]
	346 Move X19, [X31+72]
	347 Move X22, [X31+48]
	348 Move X21, [X31+56]
	349 Move X24, [X31+32]
	350 Move X23, [X31+40]
	351 Move X26, [X31+16]
	352 Move X25, [X31+24]
	353 Move X30, [X31+80]
	354 Return 
	355 Move X0, X21
	356 Call 0x1C181E0
	357 Call 0x1C17F20
	358 Call 0x1C17F20
	359 Call 0x1C17F20
	360 Call 0x1C17F20
	361 Move X0, X19
	362 Call 0x1C17F18
	363 Call 0x1C17F20
	364 Call 0x1C17F20
	365 Call 0x1C17F20
	366 Move X21, X0
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move X0, X21
	369 Call 0x3EB2AD0
	370 Move X19, [X0]
	371 Call 0x3EB2AE0
	372 Move X19, X31
	373 Move X21, X0
	374 Move X22, 0xF29000
	375 Move X22, [X22+3584]
	376 Move X1, [X22]
	377 Move X0, X20
	378 Call 0x1C17E00
	379 Move X20, X0
	380 Compare X0, 0
	381 JumpIfEqual {403}
	382 Move X8, [X20]
	383 Move X1, [X22]
	384 NotImplemented "Instruction LDRH not yet implemented."
	385 Compare X9, 0
	386 JumpIfEqual {393}
	387 Move X10, [X8+176]
	388 Add X10, X10, 8
	389 NotImplemented "Instruction LDUR not yet implemented."
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Subtract X9, X9, 1
	392 Add X10, X10, 16
	393 Move X0, X20
	394 Move W2, W31
	395 Call 0x1C5D788
	396 NotImplemented "Instruction LDRSW not yet implemented."
	397 Add X8, X8, X9
	398 Add X0, X8, 312
	399 Move X8, [X0]
	400 Move X1, [X0+8]
	401 Move X0, X20
	402 NotImplemented "Instruction BLR not yet implemented."
	403 Compare X19, 0
	404 JumpIfNotEqual {407}
	405 Move X0, X21
	406 Call 0x1D2D690
	407 Move X0, X19
	408 Call 0x1C17F18
	409 Call 0x1991590

Method: System.Void <setColor>b__96_1()

Disassembly:
	0x031CB8B4 MOV X1, X31
	0x031CB8B8 BL 0x3C40610
	0x031CB8BC LDR X8, [X21]
	0x031CB8C0 MOV V3.16B, V0.16B
	0x031CB8C4 MOV V4.16B, V1.16B
	0x031CB8C8 MOV V5.16B, V2.16B
	0x031CB8CC LDR X8, [X8 + 0xB8]
	0x031CB8D0 MOV X0, X20
	0x031CB8D4 MOV V1.16B, V12.16B
	0x031CB8D8 MOV V2.16B, V13.16B
	0x031CB8DC LDR V0, [X8]
	0x031CB8E0 MOV X1, X31
	0x031CB8E4 FNEG S6, S0
	0x031CB8E8 MOV V0.16B, V11.16B
	0x031CB8EC BL 0x3C40680
	0x031CB8F0 MOV X0, X20
	0x031CB8F4 MOV X1, X31
	0x031CB8F8 BL 0x3C3EB78
	0x031CB8FC FSUB S0, S8, S0
	0x031CB900 FSUB S1, S9, S1
	0x031CB904 FSUB S2, S10, S2
	0x031CB908 FSUB S0, S8, S0
	0x031CB90C FSUB S1, S9, S1
	0x031CB910 FSUB S2, S10, S2
	0x031CB914 MOV X0, X20
	0x031CB918 MOV X1, X31
	0x031CB91C BL 0x3C3EC04
	0x031CB920 LDR X8, [X19 + 0xE8]
	0x031CB924 CBZ X8, 0x31CB9C4
	0x031CB928 LDP S0, S1, [X8 + 0x34]
	0x031CB92C LDP S2, S3, [X8 + 0x3C]
	0x031CB930 MOV X0, X20
	0x031CB934 MOV X1, X31
	0x031CB938 BL 0x3C3F7AC
	0x031CB93C LDR X8, [X19 + 0xE8]
	0x031CB940 CBZ X8, 0x31CB9C4
	0x031CB944 LDP S0, S1, [X8 + 0x18]
	0x031CB948 LDR V2, [X8 + 0x20]
	0x031CB94C MOV X0, X20
	0x031CB950 MOV X1, X31
	0x031CB954 BL 0x3C3DE4C
	0x031CB958 LDR X8, [X19 + 0xE8]
	0x031CB95C CBZ X8, 0x31CB9C4
	0x031CB960 MOV V8.16B, V0.16B
	0x031CB964 MOV V9.16B, V1.16B
	0x031CB968 MOV V10.16B, V2.16B
	0x031CB96C LDP S0, S1, [X8 + 0x24]
	0x031CB970 LDR V2, [X8 + 0x2C]
	0x031CB974 MOV X0, X20
	0x031CB978 MOV X1, X31
	0x031CB97C BL 0x3C40610
	0x031CB980 LDR X8, [X21]
	0x031CB984 MOV V3.16B, V0.16B
	0x031CB988 MOV V4.16B, V1.16B
	0x031CB98C MOV V5.16B, V2.16B
	0x031CB990 LDR X8, [X8 + 0xB8]
	0x031CB994 MOV X0, X20
	0x031CB998 MOV V0.16B, V8.16B
	0x031CB99C MOV V1.16B, V9.16B
	0x031CB9A0 LDR V6, [X8]
	0x031CB9A4 MOV V2.16B, V10.16B
	0x031CB9A8 LDP X20, X19, [X31 + 0x40]
	0x031CB9AC LDP X30, X21, [X31 + 0x30]
	0x031CB9B0 LDP D9, D8, [X31 + 0x20]
	0x031CB9B4 LDP D11, D10, [X31 + 0x10]
	0x031CB9B8 MOV X1, X31
	0x031CB9BC LDP D13, D12, [X31], #0x50
	0x031CB9C0 B 0x3C40680
	0x031CB9C4 BL 0x1C16F20
	0x031CB9C8 STR X30, [X31 - 0x20]!
	0x031CB9CC STP X20, X19, [X31 + 0x10]
	0x031CB9D0 ADRP X20, 0x1210000
	0x031CB9D4 LDRB W8, [X20 + 0xFEF]
	0x031CB9D8 MOV X19, X0
	0x031CB9DC TBNZ X8, 0x0, 0x31CB9F4
	0x031CB9E0 ADRP X0, 0xF54000
	0x031CB9E4 LDR X0, [X0 + 0x9C0]
	0x031CB9E8 BL 0x1C16CF4
	0x031CB9EC MOVZ W8, 0x1
	0x031CB9F0 STRB W8, [X20 + 0xFEF]
	0x031CB9F4 LDR X0, [X19 + 0x58]
	0x031CB9F8 CBZ X0, 0x31CBA20
	0x031CB9FC ADRP X8, 0xF54000
	0x031CBA00 LDR X8, [X8 + 0x9C0]
	0x031CBA04 LDR X1, [X8]
	0x031CBA08 BL 0x21A3894
	0x031CBA0C STR X0, [X19 + 0xD0]
	0x031CBA10 STR W31, [X19 + 0x60]
	0x031CBA14 LDP X20, X19, [X31 + 0x10]
	0x031CBA18 LDR X30, [X31], #0x20
	0x031CBA1C RET
	0x031CBA20 BL 0x1C16F20
	0x031CBA24 SUB X31, X31, 0x30
	0x031CBA28 STR D8, [X31 + 0x10]
	0x031CBA2C STR X30, [X31 + 0x18]
	0x031CBA30 STP X20, X19, [X31 + 0x20]
	0x031CBA34 ADRP X20, 0x1210000
	0x031CBA38 LDRB W8, [X20 + 0xFF0]
	0x031CBA3C MOV X19, X0
	0x031CBA40 TBNZ X8, 0x0, 0x31CBA58
	0x031CBA44 ADRP X0, 0xF54000
	0x031CBA48 LDR X0, [X0 + 0x368]
	0x031CBA4C BL 0x1C16CF4
	0x031CBA50 MOVZ W8, 0x1
	0x031CBA54 STRB W8, [X20 + 0xFF0]
	0x031CBA58 LDR X8, [X19 + 0xA0]
	0x031CBA5C CBZ X8, 0x31CBB5C
	0x031CBA60 LDR X9, [X8 + 0x18]
	0x031CBA64 LDR X0, [X8 + 0x40]
	0x031CBA68 LDR X1, [X8 + 0x28]
	0x031CBA6C ADRP X20, 0xF54000
	0x031CBA70 LDR X20, [X20 + 0x368]
	0x031CBA74 BLR X9
	0x031CBA78 LDR X8, [X20]
	0x031CBA7C ADD X0, X31, 0x8
	0x031CBA80 LDR X9, [X8 + 0xB8]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x1211000
	010 Move W8, [X20+4067]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xF55000
	017 Move X0, [X0+872]
	018 Call 0x1C17CF4
	019 Move X0, 0xF29000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+4067], W8
	024 Move X8, [X19+160]
	025 Compare X8, 0
	026 JumpIfEqual {142}
	027 Move X9, [X8+24]
	028 Move X0, [X8+64]
	029 Move X1, [X8+40]
	030 Move X21, 0xF55000
	031 Move X20, 0xF29000
	032 Move X21, [X21+872]
	033 Move X20, [X20+1432]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X8, [X21]
	036 Move X0, X19
	037 Move X9, [X8+184]
	038 Move [X9+8], S0
	039 Move [X9+16], S1
	040 Move [X9+16], S2
	041 Move X8, [X8+184]
	042 Move V0, [X8+8]
	043 Move [X8], S0
	044 Call LTDescr.tweenColor, X0, V0
	045 Move X0, [X20]
	046 Move X20, [X19+184]
	047 Move V10, V0
	048 Move V9, V1
	049 Move W8, [X0+224]
	050 Move V8, V2
	051 Move V11, V3
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X31
	057 Move X2, X31
	058 Call Object.op_Inequality, X0, X1
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {78}
	063 Move X0, [X19+184]
	064 Compare X0, 0
	065 JumpIfEqual {142}
	066 Move V0, V10
	067 Move V1, V9
	068 Move V2, V8
	069 Move V3, V11
	070 Move X1, X31
	071 Call SpriteRenderer.set_color, X0, X1
	072 Move X0, [X19+88]
	073 Move V0, V10
	074 Move V1, V9
	075 Move V2, V8
	076 Move V3, V11
	077 Call LTDescr.colorRecursiveSprite, X0, X1
	078 Move W8, [X19+144]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, [X19+88]
	081 Move W1, [X19+26]
	082 Move V0, V10
	083 Move V1, V9
	084 Move V2, V8
	085 Move V3, V11
	086 Call LTDescr.colorRecursive, X0, X1, X2
	087 Move X8, [X21]
	088 Move X8, [X8+184]
	089 Move V0, [X8+4]
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Move D9, [X31+16]
	096 Move D8, [X31+24]
	097 Move D11, [X31+64]
	098 Move D10, [X31+72]
	099 Return 
	100 Move X8, [X19+232]
	101 Compare X8, 0
	102 JumpIfEqual {142}
	103 Move X9, [X8+176]
	104 Compare X9, 0
	105 JumpIfEqual {122}
	106 Move X2, [X9+24]
	107 Move X0, [X9+64]
	108 Move X1, [X9+40]
	109 Move V1, V9
	110 Move V2, V8
	111 Move X20, [X31+48]
	112 Move X19, [X31+56]
	113 Move X30, [X31+32]
	114 Move X21, [X31+40]
	115 Move D9, [X31+16]
	116 Move D8, [X31+24]
	117 Move V0, V10
	118 Move V3, V11
	119 Move D11, [X31+64]
	120 Move D10, [X31+72]
	121 CallNoReturn X2
	122 Move X9, [X8+184]
	123 Compare X9, 0
	124 JumpIfEqual {91}
	125 Move X1, [X8+216]
	126 Move X3, [X9+24]
	127 Move X0, [X9+64]
	128 Move X2, [X9+40]
	129 Move V1, V9
	130 Move V2, V8
	131 Move X20, [X31+48]
	132 Move X19, [X31+56]
	133 Move X30, [X31+32]
	134 Move X21, [X31+40]
	135 Move D9, [X31+16]
	136 Move D8, [X31+24]
	137 Move V0, V10
	138 Move V3, V11
	139 Move D11, [X31+64]
	140 Move D10, [X31+72]
	141 CallNoReturn X3
	142 Call 0x1C17F20

Method: System.Void <setCallbackColor>b__97_0()

Disassembly:
	0x031CBA84 STP S0, S1, [X9 + 0x8]
	0x031CBA88 STR S2, [X9 + 0x10]
	0x031CBA8C LDR X8, [X8 + 0xB8]
	0x031CBA90 LDR V8, [X8 + 0x8]
	0x031CBA94 FCVT S0, S8

ISIL:
	001 Move X8, -40751104
	002 Move V0, [X8+1608]
	003 Move [X0+128], W31
	004 Move [X0+120], D0
	005 Return 

Method: System.Void <setCallbackColor>b__97_1()

Disassembly:
	0x031CBA98 STR S8, [X8]
	0x031CBA9C BL 0x3EB1C00
	0x031CBAA0 FCMP S8, 0x0
	0x031CBAA4 B.GE 0x31CBAC0
	0x031CBAA8 FMOV D1, -0.5
	0x031CBAAC FCMP D0, D1
	0x031CBAB0 B.NE 0x31CBAEC
	0x031CBAB4 LDR V0, [X31 + 0x8]
	0x031CBAB8 FMOV S1, -1
	0x031CBABC B 0x31CBAD4
	0x031CBAC0 FMOV D1, 0.5
	0x031CBAC4 FCMP D0, D1
	0x031CBAC8 B.NE 0x31CBAFC
	0x031CBACC LDR V0, [X31 + 0x8]
	0x031CBAD0 FMOV S1, 1
	0x031CBAD4 FCVTZS X8, D0
	0x00000000 INVALID
	0x031CBADC FADD S1, S0, S1
	0x031CBAE0 ANDS X31, X8, 0x1
	0x031CBAE4 FCSEL S0, S0, S1, EQ
	0x031CBAE8 B 0x31CBB08
	0x031CBAEC FMOV S0, -0.5
	0x031CBAF0 FADD S0, S8, S0
	0x031CBAF4 FRINTP S0, S0
	0x031CBAF8 B 0x31CBB08
	0x031CBAFC FMOV S0, 0.5
	0x031CBB00 FADD S0, S8, S0
	0x031CBB04 FRINTM S0, S0
	0x031CBB08 MOVZ W9, 0x7F800000
	0x031CBB0C LDR X8, [X19 + 0xE0]
	0x031CBB10 FMOV S1, W9
	0x031CBB14 FCVTZS W10, S0
	0x031CBB18 FCMP S0, S1
	0x031CBB1C MOVZ W9, 0x80000000
	0x031CBB20 CSEL W9, W9, W10, EQ
	0x031CBB24 CBZ X8, 0x31CBB5C
	0x031CBB28 LDR W10, [X8 + 0x18]
	0x031CBB2C CMP W9, W10
	0x031CBB30 B.CS 0x31CBB60
	0x031CBB34 LDR X0, [X19 + 0xD0]
	0x031CBB38 CBZ X0, 0x31CBB5C
	0x031CBB3C ADD X8, X8, W9, 0x3, SXTW
	0x031CBB40 LDR X1, [X8 + 0x20]
	0x031CBB44 LDP X20, X19, [X31 + 0x20]
	0x031CBB48 LDR X30, [X31 + 0x18]
	0x031CBB4C LDR V8, [X31 + 0x10]
	0x031CBB50 MOV X2, X31
	0x031CBB54 ADD X31, X31, 0x30
	0x031CBB58 B 0x3CD3398
	0x031CBB5C BL 0x1C16F20
	0x031CBB60 BL 0x1C16F28
	0x031CBB64 STP X30, X19, [X31 - 0x10]!
	0x031CBB68 MOV X19, X0
	0x031CBB6C LDR X0, [X0 + 0xC0]
	0x031CBB70 CBZ X0, 0x31CBB8C
	0x031CBB74 MOV X1, X31
	0x031CBB78 BL 0x3C3EB44
	0x031CBB7C STP S0, S1, [X19 + 0x60]
	0x031CBB80 STR S2, [X19 + 0x68]
	0x031CBB84 LDP X30, X19, [X31], #0x10
	0x031CBB88 RET
	0x031CBB8C BL 0x1C16F20
	0x031CBB90 STP X30, X19, [X31 - 0x10]!
	0x031CBB94 LDR X8, [X0 + 0xA0]
	0x031CBB98 CBZ X8, 0x31CBBC4
	0x031CBB9C LDR X19, [X0 + 0xC0]
	0x031CBBA0 LDR X9, [X8 + 0x18]
	0x031CBBA4 LDR X0, [X8 + 0x40]
	0x031CBBA8 LDR X1, [X8 + 0x28]
	0x031CBBAC BLR X9
	0x031CBBB0 CBZ X19, 0x31CBBC4
	0x031CBBB4 MOV X0, X19
	0x031CBBB8 MOV X1, X31
	0x031CBBBC LDP X30, X19, [X31], #0x10
	0x031CBBC0 B 0x3C3EBD4
	0x031CBBC4 BL 0x1C16F20
	0x031CBBC8 STP X30, X19, [X31 - 0x10]!
	0x031CBBCC MOV X19, X0
	0x031CBBD0 LDR X0, [X0 + 0xC0]
	0x031CBBD4 CBZ X0, 0x31CBBF0
	0x031CBBD8 MOV X1, X31
	0x031CBBDC BL 0x3C3FBAC
	0x031CBBE0 STP S0, S1, [X19 + 0x60]
	0x031CBBE4 STR S2, [X19 + 0x68]
	0x031CBBE8 LDP X30, X19, [X31], #0x10
	0x031CBBEC RET
	0x031CBBF0 BL 0x1C16F20
	0x031CBBF4 STP X30, X19, [X31 - 0x10]!
	0x031CBBF8 LDR X8, [X0 + 0xA0]
	0x031CBBFC CBZ X8, 0x31CBC28
	0x031CBC00 LDR X19, [X0 + 0xC0]
	0x031CBC04 LDR X9, [X8 + 0x18]
	0x031CBC08 LDR X0, [X8 + 0x40]
	0x031CBC0C LDR X1, [X8 + 0x28]
	0x031CBC10 BLR X9
	0x031CBC14 CBZ X19, 0x31CBC28
	0x031CBC18 MOV X0, X19
	0x031CBC1C MOV X1, X31
	0x031CBC20 LDP X30, X19, [X31], #0x10
	0x031CBC24 B 0x3C3FC4C
	0x031CBC28 BL 0x1C16F20
	0x031CBC2C STP X30, X19, [X31 - 0x10]!
	0x031CBC30 MOV X19, X0
	0x031CBC34 LDR X0, [X0 + 0xC0]
	0x031CBC38 CBZ X0, 0x31CBC54
	0x031CBC3C MOV X1, X31
	0x031CBC40 BL 0x3C3E90C
	0x031CBC44 STP S0, S1, [X19 + 0x60]
	0x031CBC48 STR W31, [X19 + 0x68]
	0x031CBC4C LDP X30, X19, [X31], #0x10
	0x031CBC50 RET
	0x031CBC54 BL 0x1C16F20
	0x031CBC58 STP X30, X19, [X31 - 0x10]!
	0x031CBC5C LDR X8, [X0 + 0xA0]
	0x031CBC60 CBZ X8, 0x31CBC8C
	0x031CBC64 LDR X19, [X0 + 0xC0]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x1211000
	010 Move W8, [X20+4068]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0xF55000
	017 Move X0, [X0+872]
	018 Call 0x1C17CF4
	019 Move X0, 0xF29000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+4068], W8
	024 Move X8, [X19+160]
	025 Compare X8, 0
	026 JumpIfEqual {142}
	027 Move X9, [X8+24]
	028 Move X0, [X8+64]
	029 Move X1, [X8+40]
	030 Move X21, 0xF55000
	031 Move X20, 0xF29000
	032 Move X21, [X21+872]
	033 Move X20, [X20+1432]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X8, [X21]
	036 Move X0, X19
	037 Move X9, [X8+184]
	038 Move [X9+8], S0
	039 Move [X9+16], S1
	040 Move [X9+16], S2
	041 Move X8, [X8+184]
	042 Move V0, [X8+8]
	043 Move [X8], S0
	044 Call LTDescr.tweenColor, X0, V0
	045 Move X0, [X20]
	046 Move X20, [X19+184]
	047 Move V10, V0
	048 Move V9, V1
	049 Move W8, [X0+224]
	050 Move V8, V2
	051 Move V11, V3
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X31
	057 Move X2, X31
	058 Call Object.op_Inequality, X0, X1
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {78}
	063 Move X0, [X19+184]
	064 Compare X0, 0
	065 JumpIfEqual {142}
	066 Move V0, V10
	067 Move V1, V9
	068 Move V2, V8
	069 Move V3, V11
	070 Move X1, X31
	071 Call SpriteRenderer.set_color, X0, X1
	072 Move X0, [X19+88]
	073 Move V0, V10
	074 Move V1, V9
	075 Move V2, V8
	076 Move V3, V11
	077 Call LTDescr.colorRecursiveSprite, X0, X1
	078 Move W8, [X19+144]
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X0, [X19+88]
	081 Move W1, [X19+26]
	082 Move V0, V10
	083 Move V1, V9
	084 Move V2, V8
	085 Move V3, V11
	086 Call LTDescr.colorRecursive, X0, X1, X2
	087 Move X8, [X21]
	088 Move X8, [X8+184]
	089 Move V0, [X8+4]
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Move D9, [X31+16]
	096 Move D8, [X31+24]
	097 Move D11, [X31+64]
	098 Move D10, [X31+72]
	099 Return 
	100 Move X8, [X19+232]
	101 Compare X8, 0
	102 JumpIfEqual {142}
	103 Move X9, [X8+176]
	104 Compare X9, 0
	105 JumpIfEqual {122}
	106 Move X2, [X9+24]
	107 Move X0, [X9+64]
	108 Move X1, [X9+40]
	109 Move V1, V9
	110 Move V2, V8
	111 Move X20, [X31+48]
	112 Move X19, [X31+56]
	113 Move X30, [X31+32]
	114 Move X21, [X31+40]
	115 Move D9, [X31+16]
	116 Move D8, [X31+24]
	117 Move V0, V10
	118 Move V3, V11
	119 Move D11, [X31+64]
	120 Move D10, [X31+72]
	121 CallNoReturn X2
	122 Move X9, [X8+184]
	123 Compare X9, 0
	124 JumpIfEqual {91}
	125 Move X1, [X8+216]
	126 Move X3, [X9+24]
	127 Move X0, [X9+64]
	128 Move X2, [X9+40]
	129 Move V1, V9
	130 Move V2, V8
	131 Move X20, [X31+48]
	132 Move X19, [X31+56]
	133 Move X30, [X31+32]
	134 Move X21, [X31+40]
	135 Move D9, [X31+16]
	136 Move D8, [X31+24]
	137 Move V0, V10
	138 Move V3, V11
	139 Move D11, [X31+64]
	140 Move D10, [X31+72]
	141 CallNoReturn X3
	142 Call 0x1C17F20

Method: System.Void <setTextColor>b__98_0()

Disassembly:
	0x031CBC68 LDR X9, [X8 + 0x18]
	0x031CBC6C LDR X0, [X8 + 0x40]
	0x031CBC70 LDR X1, [X8 + 0x28]
	0x031CBC74 BLR X9
	0x031CBC78 CBZ X19, 0x31CBC8C
	0x031CBC7C MOV X0, X19
	0x031CBC80 MOV X1, X31
	0x031CBC84 LDP X30, X19, [X31], #0x10
	0x031CBC88 B 0x3C3E99C
	0x031CBC8C BL 0x1C16F20
	0x031CBC90 STP X30, X19, [X31 - 0x10]!
	0x031CBC94 MOV X19, X0
	0x031CBC98 LDR X0, [X0 + 0x58]
	0x031CBC9C CBZ X0, 0x31CBCB8
	0x031CBCA0 MOV X1, X31
	0x031CBCA4 BL 0x3C3F58C
	0x031CBCA8 STP S0, S1, [X19 + 0x60]
	0x031CBCAC STR S2, [X19 + 0x68]
	0x031CBCB0 LDP X30, X19, [X31], #0x10
	0x031CBCB4 RET
	0x031CBCB8 BL 0x1C16F20
	0x031CBCBC STR X30, [X31 - 0x20]!
	0x031CBCC0 STP X20, X19, [X31 + 0x10]
	0x031CBCC4 ADRP X20, 0x1210000
	0x031CBCC8 LDRB W8, [X20 + 0xFF1]
	0x031CBCCC MOV X19, X0
	0x031CBCD0 TBNZ X8, 0x0, 0x31CBCE8
	0x031CBCD4 ADRP X0, 0xF54000
	0x031CBCD8 LDR X0, [X0 + 0x368]
	0x031CBCDC BL 0x1C16CF4
	0x031CBCE0 MOVZ W8, 0x1
	0x031CBCE4 STRB W8, [X20 + 0xFF1]
	0x031CBCE8 LDR X8, [X19 + 0xA0]
	0x031CBCEC CBZ X8, 0x31CBD3C
	0x031CBCF0 LDR X9, [X8 + 0x18]
	0x031CBCF4 LDR X0, [X8 + 0x40]
	0x031CBCF8 LDR X1, [X8 + 0x28]
	0x031CBCFC ADRP X20, 0xF54000
	0x031CBD00 LDR X20, [X20 + 0x368]
	0x031CBD04 BLR X9
	0x031CBD08 LDR X8, [X20]
	0x031CBD0C LDR X9, [X8 + 0xB8]
	0x031CBD10 STP S0, S1, [X9 + 0x8]
	0x031CBD14 STR S2, [X9 + 0x10]
	0x031CBD18 LDR X0, [X19 + 0x58]
	0x031CBD1C CBZ X0, 0x31CBD3C
	0x031CBD20 LDR X8, [X8 + 0xB8]
	0x031CBD24 LDP X20, X19, [X31 + 0x10]
	0x031CBD28 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1211000
	006 Move W8, [X20+4069]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xF55000
	013 Move X0, [X0+2520]
	014 Call 0x1C17CF4
	015 Move X0, 0xF29000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+4069], W8
	020 Move X0, [X19+88]
	021 Compare X0, 0
	022 JumpIfEqual {62}
	023 Move X8, 0xF55000
	024 Move X8, [X8+2520]
	025 Move X21, 0xF29000
	026 Move X1, [X8]
	027 Move X21, [X21+1432]
	028 Call 0x21A4894, X0
	029 Move [X19+200], X0
	030 Move X20, X0
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {51}
	044 Move X0, [X19+200]
	045 Compare X0, 0
	046 JumpIfEqual {62}
	047 Move X8, [X0]
	048 Move X9, [X8+664]
	049 Move X1, [X8+672]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move S0, 1
	052 Move S1, 1
	053 Move S2, 1
	054 Move S3, 1
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X30, [X31+32]
	059 Move X21, [X31+40]
	060 Call LTDescr.setFromColor, X0, X1
	061 Return 
	062 Call 0x1C17F20

Method: System.Void <setTextColor>b__98_1()

Disassembly:
	0x031CBD2C LDP S1, S2, [X8 + 0xC]
	0x031CBD30 LDR V0, [X8 + 0x8]
	0x031CBD34 LDR X30, [X31], #0x20
	0x031CBD38 B 0x3C3F62C
	0x031CBD3C BL 0x1C16F20
	0x031CBD40 STP X30, X19, [X31 - 0x10]!
	0x031CBD44 MOV X19, X0
	0x031CBD48 LDR X0, [X0 + 0x58]
	0x031CBD4C CBZ X0, 0x31CBD68
	0x031CBD50 MOV X1, X31
	0x031CBD54 BL 0x3C3EB78
	0x031CBD58 STP S0, S1, [X19 + 0x60]
	0x031CBD5C STR S2, [X19 + 0x68]
	0x031CBD60 LDP X30, X19, [X31], #0x10
	0x031CBD64 RET
	0x031CBD68 BL 0x1C16F20
	0x031CBD6C STR X30, [X31 - 0x20]!
	0x031CBD70 STP X20, X19, [X31 + 0x10]
	0x031CBD74 ADRP X20, 0x1210000
	0x031CBD78 LDRB W8, [X20 + 0xFF2]
	0x031CBD7C MOV X19, X0
	0x031CBD80 TBNZ X8, 0x0, 0x31CBD98
	0x031CBD84 ADRP X0, 0xF54000
	0x031CBD88 LDR X0, [X0 + 0x368]
	0x031CBD8C BL 0x1C16CF4
	0x031CBD90 MOVZ W8, 0x1
	0x031CBD94 STRB W8, [X20 + 0xFF2]
	0x031CBD98 LDR X8, [X19 + 0xA0]
	0x031CBD9C CBZ X8, 0x31CBDEC
	0x031CBDA0 LDR X9, [X8 + 0x18]
	0x031CBDA4 LDR X0, [X8 + 0x40]
	0x031CBDA8 LDR X1, [X8 + 0x28]
	0x031CBDAC ADRP X20, 0xF54000
	0x031CBDB0 LDR X20, [X20 + 0x368]
	0x031CBDB4 BLR X9
	0x031CBDB8 LDR X8, [X20]
	0x031CBDBC LDR X9, [X8 + 0xB8]
	0x031CBDC0 STP S0, S1, [X9 + 0x8]
	0x031CBDC4 STR S2, [X9 + 0x10]
	0x031CBDC8 LDR X0, [X19 + 0x58]
	0x031CBDCC CBZ X0, 0x31CBDEC
	0x031CBDD0 LDR X8, [X8 + 0xB8]
	0x031CBDD4 LDP X20, X19, [X31 + 0x10]
	0x031CBDD8 MOV X1, X31
	0x031CBDDC LDP S1, S2, [X8 + 0xC]
	0x031CBDE0 LDR V0, [X8 + 0x8]
	0x031CBDE4 LDR X30, [X31], #0x20
	0x031CBDE8 B 0x3C3EC04
	0x031CBDEC BL 0x1C16F20
	0x031CBDF0 STP X30, X19, [X31 - 0x10]!
	0x031CBDF4 MOV X19, X0
	0x031CBDF8 LDR X0, [X0 + 0x58]
	0x031CBDFC CBZ X0, 0x31CBE18
	0x031CBE00 MOV X1, X31
	0x031CBE04 BL 0x3C3F58C
	0x031CBE08 STP S0, S1, [X19 + 0x60]
	0x031CBE0C STR S2, [X19 + 0x68]
	0x031CBE10 LDP X30, X19, [X31], #0x10
	0x031CBE14 RET
	0x031CBE18 BL 0x1C16F20
	0x031CBE1C STR X30, [X31 - 0x20]!
	0x031CBE20 STP X20, X19, [X31 + 0x10]
	0x031CBE24 ADRP X20, 0x1210000
	0x031CBE28 LDRB W8, [X20 + 0xFF3]
	0x031CBE2C MOV X19, X0
	0x031CBE30 TBNZ X8, 0x0, 0x31CBE48
	0x031CBE34 ADRP X0, 0xF54000
	0x031CBE38 LDR X0, [X0 + 0x368]
	0x031CBE3C BL 0x1C16CF4
	0x031CBE40 MOVZ W8, 0x1
	0x031CBE44 STRB W8, [X20 + 0xFF3]
	0x031CBE48 LDR X8, [X19 + 0xE8]
	0x031CBE4C CBZ X8, 0x31CBEEC
	0x031CBE50 LDR X0, [X8 + 0x10]
	0x031CBE54 CBZ X0, 0x31CBEEC
	0x031CBE58 MOV X1, X31
	0x031CBE5C BL 0x3C3F58C
	0x031CBE60 LDP S3, S4, [X19 + 0x60]
	0x031CBE64 LDR V5, [X19 + 0x68]
	0x031CBE68 LDR X8, [X19 + 0xA0]
	0x031CBE6C STP S0, S1, [X19 + 0x6C]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1211000
	009 Move W8, [X20+4070]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF55000
	016 Move X0, [X0+872]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+4070], W8
	020 Move X8, [X19+160]
	021 Compare X8, 0
	022 JumpIfEqual {99}
	023 Move X9, [X8+24]
	024 Move X0, [X8+64]
	025 Move X1, [X8+40]
	026 Move X20, 0xF55000
	027 Move X20, [X20+872]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X8, [X20]
	030 Move X0, X19
	031 Move X9, [X8+184]
	032 Move [X9+8], S0
	033 Move [X9+16], S1
	034 Move [X9+16], S2
	035 Move X8, [X8+184]
	036 Move V0, [X8+8]
	037 Move [X8], S0
	038 Call LTDescr.tweenColor, X0, V0
	039 Move X0, [X19+200]
	040 Compare X0, 0
	041 JumpIfEqual {99}
	042 Move X8, [X0]
	043 Move V8, V0
	044 Move V9, V1
	045 Move V10, V2
	046 Move X9, [X8+680]
	047 Move X1, [X8+688]
	048 Move V11, V3
	049 NotImplemented "Instruction BLR not yet implemented."
	050 Move X8, [X20]
	051 Move X8, [X8+184]
	052 Move V0, [X8+4]
	053 NotImplemented "Instruction FCMP not yet implemented."
	054 Move X8, [X19+232]
	055 Compare X8, 0
	056 JumpIfEqual {99}
	057 Move X8, [X8+176]
	058 Compare X8, 0
	059 JumpIfEqual {68}
	060 Move X9, [X8+24]
	061 Move X0, [X8+64]
	062 Move X1, [X8+40]
	063 Move V0, V8
	064 Move V1, V9
	065 Move V2, V10
	066 Move V3, V11
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move W8, [X19+26]
	069 Compare W8, 0
	070 JumpIfEqual {91}
	071 Move X0, [X19+88]
	072 Compare X0, 0
	073 JumpIfEqual {99}
	074 Move X1, X31
	075 Call Transform.get_childCount, X0
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X0, [X19+88]
	078 Move V0, V8
	079 Move V1, V9
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X30, [X31+32]
	083 Move D9, [X31+16]
	084 Move D8, [X31+24]
	085 Move V2, V10
	086 Move V3, V11
	087 Move D11, [X31+64]
	088 Move D10, [X31+72]
	089 Call LTDescr.textColorRecursive, X0, X1
	090 Return 
	091 Move X20, [X31+48]
	092 Move X19, [X31+56]
	093 Move X30, [X31+32]
	094 Move D9, [X31+16]
	095 Move D8, [X31+24]
	096 Move D11, [X31+64]
	097 Move D10, [X31+72]
	098 Return 
	099 Call 0x1C17F20

Method: System.Void <setCanvasAlpha>b__99_0()

Disassembly:
	0x031CBE70 FSUB S0, S0, S3
	0x031CBE74 FMOV S3, 0.5
	0x031CBE78 FSUB S1, S1, S4
	0x031CBE7C FSUB S4, S2, S5
	0x031CBE80 STP S2, S0, [X19 + 0x74]
	0x031CBE84 STP S1, S4, [X19 + 0x7C]
	0x031CBE88 FMUL S0, S0, S3
	0x031CBE8C FMUL S1, S1, S3
	0x031CBE90 FMUL S2, S4, S3
	0x031CBE94 STP S0, S1, [X19 + 0x84]
	0x031CBE98 STR S2, [X19 + 0x8C]
	0x031CBE9C CBZ X8, 0x31CBEEC
	0x031CBEA0 LDR X9, [X8 + 0x18]
	0x031CBEA4 LDR X0, [X8 + 0x40]
	0x031CBEA8 LDR X1, [X8 + 0x28]
	0x031CBEAC ADRP X20, 0xF54000
	0x031CBEB0 LDR X20, [X20 + 0x368]
	0x031CBEB4 BLR X9
	0x031CBEB8 LDR X8, [X20]
	0x031CBEBC LDR X9, [X8 + 0xB8]
	0x031CBEC0 STP S0, S1, [X9 + 0x8]
	0x031CBEC4 STR S2, [X9 + 0x10]
	0x031CBEC8 LDR X0, [X19 + 0x58]
	0x031CBECC CBZ X0, 0x31CBEEC
	0x031CBED0 LDR X8, [X8 + 0xB8]
	0x031CBED4 LDP X20, X19, [X31 + 0x10]
	0x031CBED8 MOV X1, X31
	0x031CBEDC LDP S1, S2, [X8 + 0xC]
	0x031CBEE0 LDR V0, [X8 + 0x8]
	0x031CBEE4 LDR X30, [X31], #0x20
	0x031CBEE8 B 0x3C3F62C
	0x031CBEEC BL 0x1C16F20
	0x031CBEF0 STP D9, D8, [X31 - 0x30]!
	0x031CBEF4 STR X30, [X31 + 0x10]
	0x031CBEF8 STP X20, X19, [X31 + 0x20]
	0x031CBEFC ADRP X20, 0x1210000
	0x031CBF00 LDRB W8, [X20 + 0xFF4]
	0x031CBF04 MOV X19, X0
	0x031CBF08 TBNZ X8, 0x0, 0x31CBF20
	0x031CBF0C ADRP X0, 0xF2A000
	0x031CBF10 LDR X0, [X0 + 0x5A8]
	0x031CBF14 BL 0x1C16CF4
	0x031CBF18 MOVZ W8, 0x1
	0x031CBF1C STRB W8, [X20 + 0xFF4]
	0x031CBF20 LDR X0, [X19 + 0x58]
	0x031CBF24 CBZ X0, 0x31CBFB0
	0x031CBF28 ADRP X20, 0xF2A000
	0x031CBF2C LDR X20, [X20 + 0x5A8]
	0x031CBF30 MOV X1, X31
	0x031CBF34 BL 0x3C3F74C
	0x031CBF38 STP S0, S1, [X19 + 0x60]
	0x031CBF3C STR S2, [X19 + 0x68]
	0x031CBF40 LDR X0, [X20]
	0x031CBF44 LDR V9, [X19 + 0x6C]
	0x031CBF48 MOV V8.16B, V0.16B
	0x031CBF4C LDR W8, [X0 + 0xE0]
	0x031CBF50 CBNZ W8, 0x31CBF58
	0x031CBF54 BL 0x1C16DFC
	0x031CBF58 MOV V0.16B, V8.16B
	0x031CBF5C MOV V1.16B, V9.16B
	0x031CBF60 MOV X0, X31
	0x031CBF64 BL 0x31ACE4C
	0x031CBF68 LDR V2, [X19 + 0x64]
	0x031CBF6C LDR V1, [X19 + 0x70]
	0x031CBF70 MOV V8.16B, V0.16B
	0x031CBF74 MOV X0, X31
	0x031CBF78 MOV V0.16B, V2.16B
	0x031CBF7C BL 0x31ACE4C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1211000
	006 Move W8, [X20+4071]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xF55000
	013 Move X0, [X0+2496]
	014 Call 0x1C17CF4
	015 Move X0, 0xF55000
	016 Move X0, [X0+2504]
	017 Call 0x1C17CF4
	018 Move X0, 0xF29000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+4071], W8
	023 Move X0, [X19+88]
	024 Compare X0, 0
	025 JumpIfEqual {86}
	026 Move X8, 0xF55000
	027 Move X8, [X8+2496]
	028 Move X21, 0xF29000
	029 Move X1, [X8]
	030 Move X21, [X21+1432]
	031 Call 0x21A4894, X0
	032 Move [X19+208], X0
	033 Move X20, X0
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {50}
	047 Move X0, [X19+208]
	048 Compare X0, 0
	049 JumpIfNotEqual {76}
	050 Move X0, [X19+88]
	051 Compare X0, 0
	052 JumpIfEqual {86}
	053 Move X8, 0xF55000
	054 Move X8, [X8+2504]
	055 Move X1, [X8]
	056 Call 0x21A4894, X0
	057 Move [X19+216], X0
	058 Move X20, X0
	059 Move X0, [X21]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X20
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Inequality, X0, X1
	068 Move S3, 1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {80}
	073 Move X0, [X19+216]
	074 Compare X0, 0
	075 JumpIfEqual {86}
	076 Move X8, [X0]
	077 Move X9, [X8+664]
	078 Move X1, [X8+672]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move [X19+96], S3
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X30, [X31+32]
	084 Move X21, [X31+40]
	085 Return 
	086 Call 0x1C17F20

Method: System.Void <setCanvasAlpha>b__99_1()

Disassembly:
	0x031CBF80 LDR V2, [X19 + 0x68]
	0x031CBF84 LDR V1, [X19 + 0x74]
	0x031CBF88 MOV V9.16B, V0.16B
	0x031CBF8C MOV X0, X31
	0x031CBF90 MOV V0.16B, V2.16B
	0x031CBF94 BL 0x31ACE4C
	0x031CBF98 STP S8, S9, [X19 + 0x6C]
	0x031CBF9C STR S0, [X19 + 0x74]
	0x031CBFA0 LDP X20, X19, [X31 + 0x20]
	0x031CBFA4 LDR X30, [X31 + 0x10]
	0x031CBFA8 LDP D9, D8, [X31], #0x30
	0x031CBFAC RET
	0x031CBFB0 BL 0x1C16F20
	0x031CBFB4 STR X30, [X31 - 0x20]!
	0x031CBFB8 STP X20, X19, [X31 + 0x10]
	0x031CBFBC ADRP X20, 0x1210000
	0x031CBFC0 LDRB W8, [X20 + 0xFF5]
	0x031CBFC4 MOV X19, X0
	0x031CBFC8 TBNZ X8, 0x0, 0x31CBFE0
	0x031CBFCC ADRP X0, 0xF54000
	0x031CBFD0 LDR X0, [X0 + 0x368]
	0x031CBFD4 BL 0x1C16CF4
	0x031CBFD8 MOVZ W8, 0x1
	0x031CBFDC STRB W8, [X20 + 0xFF5]
	0x031CBFE0 LDR X8, [X19 + 0xA0]
	0x031CBFE4 CBZ X8, 0x31CC034
	0x031CBFE8 LDR X9, [X8 + 0x18]
	0x031CBFEC LDR X0, [X8 + 0x40]
	0x031CBFF0 LDR X1, [X8 + 0x28]
	0x031CBFF4 ADRP X20, 0xF54000
	0x031CBFF8 LDR X20, [X20 + 0x368]
	0x031CBFFC BLR X9
	0x031CC000 LDR X8, [X20]
	0x031CC004 LDR X9, [X8 + 0xB8]
	0x031CC008 STP S0, S1, [X9 + 0x8]
	0x031CC00C STR S2, [X9 + 0x10]
	0x031CC010 LDR X0, [X19 + 0x58]
	0x031CC014 CBZ X0, 0x31CC034
	0x031CC018 LDR X8, [X8 + 0xB8]
	0x031CC01C LDP X20, X19, [X31 + 0x10]
	0x031CC020 MOV X1, X31
	0x031CC024 LDP S1, S2, [X8 + 0xC]
	0x031CC028 LDR V0, [X8 + 0x8]
	0x031CC02C LDR X30, [X31], #0x20
	0x031CC030 B 0x3C3F77C
	0x031CC034 BL 0x1C16F20
	0x031CC038 STP D9, D8, [X31 - 0x30]!
	0x031CC03C STR X30, [X31 + 0x10]
	0x031CC040 STP X20, X19, [X31 + 0x20]
	0x031CC044 ADRP X20, 0x120F000
	0x031CC048 LDRB W8, [X20 + 0xFF6]
	0x031CC04C MOV X19, X0
	0x031CC050 TBNZ X8, 0x0, 0x31CC068
	0x031CC054 ADRP X0, 0xF29000
	0x031CC058 LDR X0, [X0 + 0x5A8]
	0x031CC05C BL 0x1C16CF4
	0x031CC060 MOVZ W8, 0x1
	0x031CC064 STRB W8, [X20 + 0xFF6]
	0x031CC068 LDR X0, [X19 + 0x58]
	0x031CC06C CBZ X0, 0x31CC0F8
	0x031CC070 ADRP X20, 0xF29000
	0x031CC074 LDR X20, [X20 + 0x5A8]
	0x031CC078 MOV X1, X31
	0x031CC07C BL 0x3C3F800
	0x031CC080 STP S0, S1, [X19 + 0x60]
	0x031CC084 STR S2, [X19 + 0x68]
	0x031CC088 LDR X0, [X20]
	0x031CC08C LDR V9, [X19 + 0x6C]
	0x031CC090 MOV V8.16B, V0.16B
	0x031CC094 LDR W8, [X0 + 0xE0]
	0x031CC098 CBNZ W8, 0x31CC0A0
	0x031CC09C BL 0x1C16DFC
	0x031CC0A0 MOV V0.16B, V8.16B
	0x031CC0A4 MOV V1.16B, V9.16B
	0x031CC0A8 MOV X0, X31
	0x031CC0AC BL 0x31ACE4C
	0x031CC0B0 LDR V2, [X19 + 0x64]
	0x031CC0B4 LDR V1, [X19 + 0x70]
	0x031CC0B8 MOV V8.16B, V0.16B
	0x031CC0BC MOV X0, X31
	0x031CC0C0 MOV V0.16B, V2.16B
	0x031CC0C4 BL 0x31ACE4C
	0x031CC0C8 LDR V2, [X19 + 0x68]
	0x031CC0CC LDR V1, [X19 + 0x74]
	0x031CC0D0 MOV V9.16B, V0.16B
	0x031CC0D4 MOV X0, X31
	0x031CC0D8 MOV V0.16B, V2.16B
	0x031CC0DC BL 0x31ACE4C
	0x031CC0E0 STP S8, S9, [X19 + 0x6C]
	0x031CC0E4 STR S0, [X19 + 0x74]
	0x031CC0E8 LDP X20, X19, [X31 + 0x20]
	0x031CC0EC LDR X30, [X31 + 0x10]
	0x031CC0F0 LDP D9, D8, [X31], #0x30
	0x031CC0F4 RET
	0x031CC0F8 BL 0x1C16F20
	0x031CC0FC STR X30, [X31 - 0x20]!
	0x031CC100 STP X20, X19, [X31 + 0x10]
	0x031CC104 ADRP X20, 0x120F000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1211000
	007 Move W8, [X20+4072]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xF55000
	014 Move X0, [X0+872]
	015 Call 0x1C17CF4
	016 Move X0, 0xF29000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+4072], W8
	021 Move X8, [X19+160]
	022 Compare X8, 0
	023 JumpIfEqual {122}
	024 Move X9, [X8+24]
	025 Move X0, [X8+64]
	026 Move X1, [X8+40]
	027 Move X21, 0xF55000
	028 Move X22, 0xF29000
	029 Move X21, [X21+872]
	030 Move X22, [X22+1432]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X8, [X21]
	033 Move X9, [X8+184]
	034 Move [X9+8], S0
	035 Move [X9+16], S1
	036 Move [X9+16], S2
	037 Move X8, [X8+184]
	038 Move V0, [X8+8]
	039 Move [X8], S0
	040 Move X0, [X22]
	041 Move X20, [X19+208]
	042 Move W8, [X0+224]
	043 Compare W8, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X20
	047 Move X1, X31
	048 Move X2, X31
	049 Call Object.op_Inequality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {64}
	054 Move X0, [X19+208]
	055 Compare X0, 0
	056 JumpIfEqual {122}
	057 Move X8, [X0]
	058 Move X9, [X8+664]
	059 Move X1, [X8+672]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X0, [X19+208]
	062 Compare X0, 0
	063 JumpIfNotEqual {88}
	064 Move X0, [X22]
	065 Move X20, [X19+216]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X20
	071 Move X1, X31
	072 Move X2, X31
	073 Call Object.op_Inequality, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {95}
	078 Move X0, [X19+216]
	079 Compare X0, 0
	080 JumpIfEqual {122}
	081 Move X8, [X0]
	082 Move X9, [X8+664]
	083 Move X1, [X8+672]
	084 NotImplemented "Instruction BLR not yet implemented."
	085 Move X0, [X19+216]
	086 Compare X0, 0
	087 JumpIfEqual {122}
	088 Move X8, [X21]
	089 Move X9, [X0]
	090 Move X8, [X8+184]
	091 Move X10, [X9+680]
	092 Move X1, [X9+688]
	093 Move V3, [X8]
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move W8, [X19+26]
	096 Compare W8, 0
	097 JumpIfEqual {116}
	098 Move X8, [X21]
	099 Move X0, [X19+192]
	100 Move W1, W31
	101 Move X8, [X8+184]
	102 Move V0, [X8]
	103 Call LTDescr.alphaRecursive, X0, V0, X1
	104 Move X8, [X21]
	105 Move X0, [X19+192]
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X8, [X8+184]
	111 Move W1, 1
	112 Move V0, [X8]
	113 Move X30, [X31+48]
	114 Call LTDescr.textAlphaChildrenRecursive, X0, V0, X1
	115 Return 
	116 Move X20, [X31+32]
	117 Move X19, [X31+40]
	118 Move X22, [X31+16]
	119 Move X21, [X31+24]
	120 Move X30, [X31+48]
	121 Return 
	122 Call 0x1C17F20

Method: System.Void <setCanvasGroupAlpha>b__100_0()

Disassembly:
	0x031CC108 LDRB W8, [X20 + 0xFF7]
	0x031CC10C MOV X19, X0
	0x031CC110 TBNZ X8, 0x0, 0x31CC128
	0x031CC114 ADRP X0, 0xF53000
	0x031CC118 LDR X0, [X0 + 0x368]
	0x031CC11C BL 0x1C16CF4
	0x031CC120 MOVZ W8, 0x1
	0x031CC124 STRB W8, [X20 + 0xFF7]
	0x031CC128 LDR X8, [X19 + 0xA0]
	0x031CC12C CBZ X8, 0x31CC17C
	0x031CC130 LDR X9, [X8 + 0x18]
	0x031CC134 LDR X0, [X8 + 0x40]
	0x031CC138 LDR X1, [X8 + 0x28]
	0x031CC13C ADRP X20, 0xF53000
	0x031CC140 LDR X20, [X20 + 0x368]
	0x031CC144 BLR X9
	0x031CC148 LDR X8, [X20]
	0x031CC14C LDR X9, [X8 + 0xB8]
	0x031CC150 STP S0, S1, [X9 + 0x8]
	0x031CC154 STR S2, [X9 + 0x10]
	0x031CC158 LDR X0, [X19 + 0x58]
	0x031CC15C CBZ X0, 0x31CC17C
	0x031CC160 LDR X8, [X8 + 0xB8]
	0x031CC164 LDP X20, X19, [X31 + 0x10]
	0x031CC168 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1210000
	005 Move W8, [X20+4073]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF54000
	012 Move X0, [X0+2816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4073], W8
	016 Move X0, [X19+88]
	017 Compare X0, 0
	018 JumpIfEqual {32}
	019 Move X8, 0xF54000
	020 Move X8, [X8+2816]
	021 Move X1, [X8]
	022 Call 0x21A4894, X0
	023 Compare X0, 0
	024 JumpIfEqual {32}
	025 Move X1, X31
	026 Call CanvasGroup.get_alpha, X0
	027 Move [X19+96], S0
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return 
	032 Call 0x1C17F20

Method: System.Void <setCanvasGroupAlpha>b__100_1()

Disassembly:
	0x031CC16C LDP S1, S2, [X8 + 0xC]
	0x031CC170 LDR V0, [X8 + 0x8]
	0x031CC174 LDR X30, [X31], #0x20
	0x031CC178 B 0x3C3F888
	0x031CC17C BL 0x1C16F20
	0x031CC180 STP X30, X19, [X31 - 0x10]!
	0x031CC184 MOV X19, X0
	0x031CC188 LDR X0, [X0 + 0x58]
	0x031CC18C CBZ X0, 0x31CC1A8
	0x031CC190 MOV X1, X31
	0x031CC194 BL 0x3C3FBAC
	0x031CC198 STP S0, S1, [X19 + 0x60]
	0x031CC19C STR S2, [X19 + 0x68]
	0x031CC1A0 LDP X30, X19, [X31], #0x10
	0x031CC1A4 RET
	0x031CC1A8 BL 0x1C16F20
	0x031CC1AC STR X30, [X31 - 0x20]!
	0x031CC1B0 STP X20, X19, [X31 + 0x10]
	0x031CC1B4 ADRP X20, 0x120F000
	0x031CC1B8 LDRB W8, [X20 + 0xFF8]
	0x031CC1BC MOV X19, X0
	0x031CC1C0 TBNZ X8, 0x0, 0x31CC1D8
	0x031CC1C4 ADRP X0, 0xF53000
	0x031CC1C8 LDR X0, [X0 + 0x368]
	0x031CC1CC BL 0x1C16CF4
	0x031CC1D0 MOVZ W8, 0x1
	0x031CC1D4 STRB W8, [X20 + 0xFF8]
	0x031CC1D8 LDR X8, [X19 + 0xA0]
	0x031CC1DC CBZ X8, 0x31CC22C
	0x031CC1E0 LDR X9, [X8 + 0x18]
	0x031CC1E4 LDR X0, [X8 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1210000
	005 Move W8, [X20+4074]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF54000
	012 Move X0, [X0+2816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4074], W8
	016 Move X0, [X19+88]
	017 Compare X0, 0
	018 JumpIfEqual {40}
	019 Move X8, 0xF54000
	020 Move X8, [X8+2816]
	021 Move X1, [X8]
	022 Call 0x21A4894, X0
	023 Move X8, [X19+160]
	024 Compare X8, 0
	025 JumpIfEqual {40}
	026 Move X19, X0
	027 Move X9, [X8+24]
	028 Move X0, [X8+64]
	029 Move X1, [X8+40]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Compare X19, 0
	032 JumpIfEqual {40}
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+32]
	038 Call CanvasGroup.set_alpha, X0, V0
	039 Return 
	040 Call 0x1C17F20

Method: System.Void <setCanvasColor>b__101_0()

Disassembly:
	0x031CC1E8 LDR X1, [X8 + 0x28]
	0x031CC1EC ADRP X20, 0xF53000
	0x031CC1F0 LDR X20, [X20 + 0x368]
	0x031CC1F4 BLR X9
	0x031CC1F8 LDR X8, [X20]
	0x031CC1FC LDR X9, [X8 + 0xB8]
	0x031CC200 STP S0, S1, [X9 + 0x8]
	0x031CC204 STR S2, [X9 + 0x10]
	0x031CC208 LDR X0, [X19 + 0x58]
	0x031CC20C CBZ X0, 0x31CC22C
	0x031CC210 LDR X8, [X8 + 0xB8]
	0x031CC214 LDP X20, X19, [X31 + 0x10]
	0x031CC218 MOV X1, X31
	0x031CC21C LDP S1, S2, [X8 + 0xC]
	0x031CC220 LDR V0, [X8 + 0x8]
	0x031CC224 LDR X30, [X31], #0x20
	0x031CC228 B 0x3C3FC4C
	0x031CC22C BL 0x1C16F20
	0x031CC230 STR D8, [X31 - 0x20]!
	0x031CC234 STP X30, X19, [X31 + 0x10]
	0x031CC238 LDR X8, [X0 + 0xE8]
	0x031CC23C CBZ X8, 0x31CC284
	0x031CC240 MOV X19, X0
	0x031CC244 LDR X0, [X8 + 0x78]
	0x031CC248 CBZ X0, 0x31CC284
	0x031CC24C MOV X1, X31
	0x031CC250 BL 0x31BAA98
	0x031CC254 LDR X8, [X19 + 0xE8]
	0x031CC258 CBZ X8, 0x31CC284
	0x031CC25C LDR X0, [X8 + 0x78]
	0x031CC260 CBZ X0, 0x31CC284
	0x031CC264 MOV X1, X31
	0x031CC268 MOV V8.16B, V0.16B
	0x031CC26C BL 0x31BAA98
	0x031CC270 STP S8, S1, [X19 + 0x60]
	0x031CC274 STR W31, [X19 + 0x68]
	0x031CC278 LDP X30, X19, [X31 + 0x10]
	0x031CC27C LDR V8, [X31], #0x20
	0x031CC280 RET
	0x031CC284 BL 0x1C16F20
	0x031CC288 STR D10, [X31 - 0x30]!
	0x031CC28C STP D9, D8, [X31 + 0x8]
	0x031CC290 STR X30, [X31 + 0x18]
	0x031CC294 STP X20, X19, [X31 + 0x20]
	0x031CC298 LDR X8, [X0 + 0xA0]
	0x031CC29C CBZ X8, 0x31CC310
	0x031CC2A0 MOV X20, X0
	0x031CC2A4 LDR X9, [X8 + 0x18]
	0x031CC2A8 LDR X0, [X8 + 0x40]
	0x031CC2AC LDR X1, [X8 + 0x28]
	0x031CC2B0 BLR X9
	0x031CC2B4 LDR X8, [X20 + 0xE8]
	0x031CC2B8 CBZ X8, 0x31CC310
	0x031CC2BC LDR X19, [X8 + 0x78]
	0x031CC2C0 CBZ X19, 0x31CC310
	0x031CC2C4 MOV X0, X19
	0x031CC2C8 MOV X1, X31
	0x031CC2CC MOV V8.16B, V0.16B
	0x031CC2D0 MOV V9.16B, V1.16B
	0x031CC2D4 BL 0x31BAA98
	0x031CC2D8 LDR X8, [X20 + 0xE8]
	0x031CC2DC CBZ X8, 0x31CC310
	0x031CC2E0 LDR X0, [X8 + 0x78]
	0x031CC2E4 CBZ X0, 0x31CC310
	0x031CC2E8 MOV X1, X31
	0x031CC2EC MOV V10.16B, V2.16B
	0x031CC2F0 BL 0x31BAA98
	0x031CC2F4 STP S8, S9, [X19 + 0x10]
	0x031CC2F8 STP S10, S3, [X19 + 0x18]
	0x031CC2FC LDP X20, X19, [X31 + 0x20]
	0x031CC300 LDR X30, [X31 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x1210000
	006 Move W8, [X20+4075]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0xF54000
	013 Move X0, [X0+2496]
	014 Call 0x1C17CF4
	015 Move X0, 0xF54000
	016 Move X0, [X0+2504]
	017 Call 0x1C17CF4
	018 Move X0, 0xF28000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+4075], W8
	023 Move X0, [X19+88]
	024 Compare X0, 0
	025 JumpIfEqual {72}
	026 Move X8, 0xF54000
	027 Move X8, [X8+2496]
	028 Move X21, 0xF28000
	029 Move X1, [X8]
	030 Move X21, [X21+1432]
	031 Call 0x21A4894, X0
	032 Move [X19+208], X0
	033 Move X20, X0
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {73}
	047 Move X0, [X19+88]
	048 Compare X0, 0
	049 JumpIfEqual {72}
	050 Move X8, 0xF54000
	051 Move X8, [X8+2504]
	052 Move X1, [X8]
	053 Call 0x21A4894, X0
	054 Move [X19+216], X0
	055 Move X20, X0
	056 Move X0, [X21]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Inequality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {80}
	069 Move X0, [X19+216]
	070 Compare X0, 0
	071 JumpIfNotEqual {76}
	072 Call 0x1C17F20
	073 Move X0, [X19+208]
	074 Compare X0, 0
	075 JumpIfEqual {72}
	076 Move X8, [X0]
	077 Move X9, [X8+664]
	078 Move X1, [X8+672]
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move S0, 1
	081 Move S1, 1
	082 Move S2, 1
	083 Move S3, 1
	084 Move X0, X19
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Call LTDescr.setFromColor, X0, X1
	090 Return 

Method: System.Void <setCanvasColor>b__101_1()

Disassembly:
	0x031CC304 LDP D9, D8, [X31 + 0x8]
	0x031CC308 LDR V10, [X31], #0x30
	0x031CC30C RET
	0x031CC310 BL 0x1C16F20
	0x031CC314 STR X30, [X31 - 0x10]!
	0x031CC318 LDR X8, [X0 + 0xE8]
	0x031CC31C CBZ X8, 0x31CC33C
	0x031CC320 LDR X8, [X8 + 0x78]
	0x031CC324 CBZ X8, 0x31CC33C
	0x031CC328 LDR V0, [X8 + 0x30]
	0x031CC32C STR W31, [X0 + 0x68]
	0x031CC330 STR D0, [X0 + 0x60]
	0x031CC334 LDR X30, [X31], #0x10
	0x031CC338 RET
	0x031CC33C BL 0x1C16F20
	0x031CC340 STP X30, X19, [X31 - 0x10]!
	0x031CC344 LDR X8, [X0 + 0xA0]
	0x031CC348 CBZ X8, 0x31CC37C
	0x031CC34C MOV X19, X0
	0x031CC350 LDR X9, [X8 + 0x18]
	0x031CC354 LDR X0, [X8 + 0x40]
	0x031CC358 LDR X1, [X8 + 0x28]
	0x031CC35C BLR X9
	0x031CC360 LDR X8, [X19 + 0xE8]
	0x031CC364 CBZ X8, 0x31CC37C
	0x031CC368 LDR X8, [X8 + 0x78]
	0x031CC36C CBZ X8, 0x31CC37C
	0x031CC370 STP S0, S1, [X8 + 0x30]
	0x031CC374 LDP X30, X19, [X31], #0x10
	0x031CC378 RET
	0x031CC37C BL 0x1C16F20
	0x031CC380 STR D8, [X31 - 0x20]!
	0x031CC384 STP X30, X19, [X31 + 0x10]
	0x031CC388 LDR X8, [X0 + 0xE8]
	0x031CC38C CBZ X8, 0x31CC3D4
	0x031CC390 MOV X19, X0
	0x031CC394 LDR X0, [X8 + 0x78]
	0x031CC398 CBZ X0, 0x31CC3D4
	0x031CC39C MOV X1, X31
	0x031CC3A0 BL 0x31BAA98
	0x031CC3A4 LDR X8, [X19 + 0xE8]
	0x031CC3A8 CBZ X8, 0x31CC3D4
	0x031CC3AC LDR X0, [X8 + 0x78]
	0x031CC3B0 CBZ X0, 0x31CC3D4
	0x031CC3B4 MOV X1, X31
	0x031CC3B8 MOV V8.16B, V2.16B
	0x031CC3BC BL 0x31BAA98
	0x031CC3C0 STP S8, S3, [X19 + 0x60]
	0x031CC3C4 STR W31, [X19 + 0x68]
	0x031CC3C8 LDP X30, X19, [X31 + 0x10]
	0x031CC3CC LDR V8, [X31], #0x20
	0x031CC3D0 RET
	0x031CC3D4 BL 0x1C16F20
	0x031CC3D8 STR D10, [X31 - 0x30]!
	0x031CC3DC STP D9, D8, [X31 + 0x8]
	0x031CC3E0 STR X30, [X31 + 0x18]
	0x031CC3E4 STP X20, X19, [X31 + 0x20]
	0x031CC3E8 LDR X8, [X0 + 0xA0]
	0x031CC3EC CBZ X8, 0x31CC460
	0x031CC3F0 MOV X20, X0
	0x031CC3F4 LDR X9, [X8 + 0x18]
	0x031CC3F8 LDR X0, [X8 + 0x40]
	0x031CC3FC LDR X1, [X8 + 0x28]
	0x031CC400 BLR X9
	0x031CC404 LDR X8, [X20 + 0xE8]
	0x031CC408 CBZ X8, 0x31CC460
	0x031CC40C LDR X19, [X8 + 0x78]
	0x031CC410 CBZ X19, 0x31CC460
	0x031CC414 MOV X0, X19
	0x031CC418 MOV X1, X31
	0x031CC41C MOV V8.16B, V0.16B
	0x031CC420 MOV V9.16B, V1.16B
	0x031CC424 BL 0x31BAA98
	0x031CC428 LDR X8, [X20 + 0xE8]
	0x031CC42C CBZ X8, 0x31CC460
	0x031CC430 LDR X0, [X8 + 0x78]
	0x031CC434 CBZ X0, 0x31CC460
	0x031CC438 MOV X1, X31
	0x031CC43C MOV V10.16B, V0.16B
	0x031CC440 BL 0x31BAA98
	0x031CC444 STP S10, S1, [X19 + 0x10]
	0x031CC448 STP S8, S9, [X19 + 0x18]
	0x031CC44C LDP X20, X19, [X31 + 0x20]
	0x031CC450 LDR X30, [X31 + 0x18]
	0x031CC454 LDP D9, D8, [X31 + 0x8]
	0x031CC458 LDR V10, [X31], #0x30
	0x031CC45C RET
	0x031CC460 BL 0x1C16F20
	0x031CC464 STR X30, [X31 - 0x10]!
	0x031CC468 LDR X8, [X0 + 0xE8]
	0x031CC46C CBZ X8, 0x31CC488
	0x031CC470 LDR X8, [X8 + 0x78]
	0x031CC474 CBZ X8, 0x31CC488
	0x031CC478 LDR V0, [X8 + 0x20]
	0x031CC47C STR S0, [X0 + 0x60]
	0x031CC480 LDR X30, [X31], #0x10
	0x031CC484 RET
	0x031CC488 BL 0x1C16F20
	0x031CC48C STP X30, X19, [X31 - 0x10]!
	0x031CC490 LDR X9, [X0 + 0xE8]
	0x031CC494 CBZ X9, 0x31CC4C4
	0x031CC498 LDR X8, [X0 + 0xA0]
	0x031CC49C CBZ X8, 0x31CC4C4
	0x031CC4A0 LDR X19, [X9 + 0x78]
	0x031CC4A4 LDR X9, [X8 + 0x18]
	0x031CC4A8 LDR X0, [X8 + 0x40]
	0x031CC4AC LDR X1, [X8 + 0x28]
	0x031CC4B0 BLR X9
	0x031CC4B4 CBZ X19, 0x31CC4C4
	0x031CC4B8 STR S0, [X19 + 0x20]

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x1210000
	011 Move W8, [X20+4076]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0xF54000
	018 Move X0, [X0+872]
	019 Call 0x1C17CF4
	020 Move X0, 0xF28000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+4076], W8
	025 Move X8, [X19+160]
	026 Compare X8, 0
	027 JumpIfEqual {139}
	028 Move X9, [X8+24]
	029 Move X0, [X8+64]
	030 Move X1, [X8+40]
	031 Move X21, 0xF54000
	032 Move X22, 0xF28000
	033 Move X21, [X21+872]
	034 Move X22, [X22+1432]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X8, [X21]
	037 Move X0, X19
	038 Move X9, [X8+184]
	039 Move [X9+8], S0
	040 Move [X9+16], S1
	041 Move [X9+16], S2
	042 Move X8, [X8+184]
	043 Move V0, [X8+8]
	044 Move [X8], S0
	045 Call LTDescr.tweenColor, X0, V0
	046 Move X0, [X22]
	047 Move X20, [X19+208]
	048 Move V8, V0
	049 Move V9, V1
	050 Move W8, [X0+224]
	051 Move V10, V2
	052 Move V11, V3
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X20
	057 Move X1, X31
	058 Move X2, X31
	059 Call Object.op_Inequality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {67}
	064 Move X0, [X19+208]
	065 Compare X0, 0
	066 JumpIfNotEqual {84}
	067 Move X0, [X22]
	068 Move X20, [X19+216]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X20
	074 Move X1, X31
	075 Move X2, X31
	076 Call Object.op_Inequality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {92}
	081 Move X0, [X19+216]
	082 Compare X0, 0
	083 JumpIfEqual {139}
	084 Move X8, [X0]
	085 Move V0, V8
	086 Move V1, V9
	087 Move V2, V10
	088 Move X9, [X8+680]
	089 Move X1, [X8+688]
	090 Move V3, V11
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Move X8, [X21]
	093 Move X8, [X8+184]
	094 Move V0, [X8+4]
	095 NotImplemented "Instruction FCMP not yet implemented."
	096 Move X8, [X19+232]
	097 Compare X8, 0
	098 JumpIfEqual {139}
	099 Move X8, [X8+176]
	100 Compare X8, 0
	101 JumpIfEqual {110}
	102 Move X9, [X8+24]
	103 Move X0, [X8+64]
	104 Move X1, [X8+40]
	105 Move V0, V8
	106 Move V1, V9
	107 Move V2, V10
	108 Move V3, V11
	109 NotImplemented "Instruction BLR not yet implemented."
	110 Move W8, [X19+26]
	111 Compare W8, 0
	112 JumpIfEqual {129}
	113 Move X0, [X19+192]
	114 Move V0, V8
	115 Move V1, V9
	116 Move X20, [X31+64]
	117 Move X19, [X31+72]
	118 Move X22, [X31+48]
	119 Move X21, [X31+56]
	120 Move X30, [X31+32]
	121 Move D9, [X31+16]
	122 Move D8, [X31+24]
	123 Move V2, V10
	124 Move V3, V11
	125 Move D11, [X31+80]
	126 Move D10, [X31+88]
	127 Call LTDescr.colorRecursive, X0, X1
	128 Return 
	129 Move X20, [X31+64]
	130 Move X19, [X31+72]
	131 Move X22, [X31+48]
	132 Move X21, [X31+56]
	133 Move X30, [X31+32]
	134 Move D9, [X31+16]
	135 Move D8, [X31+24]
	136 Move D11, [X31+80]
	137 Move D10, [X31+88]
	138 Return 
	139 Call 0x1C17F20

Method: System.Void <setCanvasMoveX>b__102_0()

Disassembly:
	0x031CC4BC LDP X30, X19, [X31], #0x10
	0x031CC4C0 RET
	0x031CC4C4 BL 0x1C16F20
	0x031CC4C8 STP X30, X19, [X31 - 0x10]!
	0x031CC4CC LDR X8, [X0 + 0xE8]
	0x031CC4D0 CBZ X8, 0x31CC518
	0x031CC4D4 MOV X19, X0
	0x031CC4D8 LDR X0, [X8 + 0x78]
	0x031CC4DC CBZ X0, 0x31CC518
	0x031CC4E0 LDRB W9, [X0 + 0x48]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call RectTransform.get_anchoredPosition3D, X0
	009 Move [X19+96], S0
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setCanvasMoveX>b__102_1()

Disassembly:
	0x031CC4E4 CBNZ W9, 0x31CC500
	0x031CC4E8 MOVZ W8, 0x1
	0x031CC4EC MOV X1, X31
	0x031CC4F0 STRB W8, [X0 + 0x48]
	0x031CC4F4 BL 0x31BA838
	0x031CC4F8 LDR X8, [X19 + 0xE8]
	0x031CC4FC CBZ X8, 0x31CC518
	0x031CC500 LDR X8, [X8 + 0x78]
	0x031CC504 CBZ X8, 0x31CC518
	0x031CC508 LDR V0, [X8 + 0x24]
	0x031CC50C STR S0, [X19 + 0x60]
	0x031CC510 LDP X30, X19, [X31], #0x10
	0x031CC514 RET
	0x031CC518 BL 0x1C16F20
	0x031CC51C STP X30, X19, [X31 - 0x10]!
	0x031CC520 LDR X9, [X0 + 0xE8]
	0x031CC524 CBZ X9, 0x31CC554
	0x031CC528 LDR X8, [X0 + 0xA0]
	0x031CC52C CBZ X8, 0x31CC554
	0x031CC530 LDR X19, [X9 + 0x78]
	0x031CC534 LDR X9, [X8 + 0x18]
	0x031CC538 LDR X0, [X8 + 0x40]
	0x031CC53C LDR X1, [X8 + 0x28]
	0x031CC540 BLR X9
	0x031CC544 CBZ X19, 0x31CC554

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+192]
	007 Compare X0, 0
	008 JumpIfEqual {33}
	009 Move X1, X31
	010 Call RectTransform.get_anchoredPosition3D, X0
	011 Move X8, [X19+160]
	012 Compare X8, 0
	013 JumpIfEqual {33}
	014 Move X9, [X8+24]
	015 Move X0, [X8+64]
	016 Move X1, [X8+40]
	017 Move X19, [X19+192]
	018 Move V8, V1
	019 Move V9, V2
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Compare X19, 0
	022 JumpIfEqual {33}
	023 Move X0, X19
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Move V1, V8
	027 Move V2, V9
	028 Move X1, X31
	029 Move D9, [X31+32]
	030 Move D8, [X31+40]
	031 Call RectTransform.set_anchoredPosition3D, X0, X1
	032 Return 
	033 Call 0x1C17F20

Method: System.Void <setCanvasMoveY>b__103_0()

Disassembly:
	0x031CC548 STR S0, [X19 + 0x24]
	0x031CC54C LDP X30, X19, [X31], #0x10
	0x031CC550 RET
	0x031CC554 BL 0x1C16F20
	0x031CC558 MOVZ W8, 0x1
	0x031CC55C STRB W8, [X0 + 0x16]
	0x031CC560 RET
	0x031CC564 LDR X8, [X0 + 0x40]
	0x031CC568 LDR X2, [X0 + 0x18]
	0x031CC56C LDR X1, [X0 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call RectTransform.get_anchoredPosition3D, X0
	009 Move [X19+96], S1
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setCanvasMoveY>b__103_1()

Disassembly:
	0x031CC570 MOV X0, X8
	0x031CC574 BR X2
	0x031CC578 STR X30, [X31 - 0x10]!
	0x031CC57C MOV X3, X2
	0x031CC580 MOV X2, X1
	0x031CC584 ADD X1, X31, 0x8
	0x031CC588 STR X31, [X31 + 0x8]
	0x031CC58C BL 0x1C16CB0
	0x031CC590 LDR X30, [X31], #0x10
	0x031CC594 RET
	0x031CC598 STR X30, [X31 - 0x10]!
	0x031CC59C MOV X0, X1
	0x031CC5A0 MOV X1, X31
	0x031CC5A4 BL 0x1C16CB4
	0x031CC5A8 CBZ X0, 0x31CC5C0
	0x031CC5AC BL 0x1C16E08
	0x031CC5B0 LDP S0, S1, [X0]
	0x031CC5B4 LDR V2, [X0 + 0x8]
	0x031CC5B8 LDR X30, [X31], #0x10
	0x031CC5BC RET
	0x031CC5C0 BL 0x1C16F20
	0x031CC5C4 LDR X8, [X0 + 0x40]
	0x031CC5C8 LDR X2, [X0 + 0x18]
	0x031CC5CC LDR X1, [X0 + 0x28]
	0x031CC5D0 MOV X0, X8
	0x031CC5D4 BR X2

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+192]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move X1, X31
	010 Call RectTransform.get_anchoredPosition3D, X0
	011 Move X8, [X19+160]
	012 Compare X8, 0
	013 JumpIfEqual {34}
	014 Move X9, [X8+24]
	015 Move X0, [X8+64]
	016 Move X1, [X8+40]
	017 Move X19, [X19+192]
	018 Move V8, V0
	019 Move V9, V2
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Compare X19, 0
	022 JumpIfEqual {34}
	023 Move X0, X19
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Move V1, V0
	027 Move V0, V8
	028 Move V2, V9
	029 Move X1, X31
	030 Move D9, [X31+32]
	031 Move D8, [X31+40]
	032 Call RectTransform.set_anchoredPosition3D, X0, X1
	033 Return 
	034 Call 0x1C17F20

Method: System.Void <setCanvasMoveZ>b__104_0()

Disassembly:
	0x031CC5D8 STR X30, [X31 - 0x10]!
	0x031CC5DC MOV X3, X2
	0x031CC5E0 MOV X2, X1
	0x031CC5E4 ADD X1, X31, 0x8
	0x031CC5E8 STR X31, [X31 + 0x8]
	0x031CC5EC BL 0x1C16CB0
	0x031CC5F0 LDR X30, [X31], #0x10
	0x031CC5F4 RET
	0x031CC5F8 MOV X0, X1
	0x031CC5FC MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {13}
	007 Move X1, X31
	008 Call RectTransform.get_anchoredPosition3D, X0
	009 Move [X19+96], S2
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setCanvasMoveZ>b__104_1()

Disassembly:
	0x031CC600 B 0x1C16CB4
	0x031CC604 STR X30, [X31 - 0x20]!
	0x031CC608 STP X20, X19, [X31 + 0x10]
	0x031CC60C ADRP X19, 0x120F000
	0x031CC610 ADRP X20, 0xF53000
	0x031CC614 LDRB W8, [X19 + 0xFF9]
	0x031CC618 LDR X20, [X20 + 0x8D0]
	0x031CC61C TBNZ X8, 0x0, 0x31CC634
	0x031CC620 ADRP X0, 0xF53000
	0x031CC624 LDR X0, [X0 + 0x8D0]
	0x031CC628 BL 0x1C16CF4
	0x031CC62C MOVZ W8, 0x1
	0x031CC630 STRB W8, [X19 + 0xFF9]
	0x031CC634 LDR X0, [X20]
	0x031CC638 BL 0x1C16F10
	0x031CC63C MOV X1, X31
	0x031CC640 MOV X19, X0
	0x031CC644 BL 0x33BDD8C
	0x031CC648 LDR X8, [X20]
	0x031CC64C LDR X8, [X8 + 0xB8]
	0x031CC650 STR X19, [X8]
	0x031CC654 LDP X20, X19, [X31 + 0x10]
	0x031CC658 LDR X30, [X31], #0x20
	0x031CC65C RET
	0x031CC660 MOV X1, X31
	0x031CC664 B 0x33BDD8C

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+192]
	007 Compare X0, 0
	008 JumpIfEqual {34}
	009 Move X1, X31
	010 Call RectTransform.get_anchoredPosition3D, X0
	011 Move X8, [X19+160]
	012 Compare X8, 0
	013 JumpIfEqual {34}
	014 Move X9, [X8+24]
	015 Move X0, [X8+64]
	016 Move X1, [X8+40]
	017 Move X19, [X19+192]
	018 Move V8, V0
	019 Move V9, V1
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Compare X19, 0
	022 JumpIfEqual {34}
	023 Move X0, X19
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Move V2, V0
	027 Move V0, V8
	028 Move V1, V9
	029 Move X1, X31
	030 Move D9, [X31+32]
	031 Move D8, [X31+40]
	032 Call RectTransform.set_anchoredPosition3D, X0, X1
	033 Return 
	034 Call 0x1C17F20

Method: System.Void <setCanvasRotateAround>b__106_0()

Disassembly:
	0x031CC668 RET
	0x031CC66C RET
	0x031CC670 LDR X0, [X0 + 0x10]
	0x031CC674 RET
	0x031CC678 STR X1, [X0 + 0x10]
	0x031CC67C RET
	0x031CC680 LDP S0, S1, [X0 + 0x18]
	0x031CC684 LDR V2, [X0 + 0x20]
	0x031CC688 RET
	0x031CC68C STP S0, S1, [X0 + 0x18]
	0x031CC690 STR S2, [X0 + 0x20]
	0x031CC694 RET
	0x031CC698 LDP S0, S1, [X0 + 0x24]
	0x031CC69C LDR V2, [X0 + 0x2C]
	0x031CC6A0 RET
	0x031CC6A4 STP S0, S1, [X0 + 0x24]
	0x031CC6A8 STR S2, [X0 + 0x2C]
	0x031CC6AC RET
	0x031CC6B0 LDR V0, [X0 + 0x30]
	0x031CC6B4 RET
	0x031CC6B8 STR S0, [X0 + 0x30]
	0x031CC6BC RET
	0x031CC6C0 LDP S0, S1, [X0 + 0x34]
	0x031CC6C4 LDP S2, S3, [X0 + 0x3C]
	0x031CC6C8 RET
	0x031CC6CC STP S0, S1, [X0 + 0x34]
	0x031CC6D0 STP S2, S3, [X0 + 0x3C]
	0x031CC6D4 RET
	0x031CC6D8 LDR X0, [X0 + 0x48]
	0x031CC6DC RET
	0x031CC6E0 STR X1, [X0 + 0x48]
	0x031CC6E4 RET
	0x031CC6E8 LDR X0, [X0 + 0x50]
	0x031CC6EC RET
	0x031CC6F0 STR X1, [X0 + 0x50]
	0x031CC6F4 RET
	0x031CC6F8 LDR X0, [X0 + 0x78]
	0x031CC6FC RET
	0x031CC700 STR X1, [X0 + 0x78]
	0x031CC704 RET
	0x031CC708 LDR X0, [X0 + 0x80]
	0x031CC70C RET
	0x031CC710 STR X1, [X0 + 0x80]
	0x031CC714 RET
	0x031CC718 LDR X0, [X0 + 0x88]
	0x031CC71C RET
	0x031CC720 STR X1, [X0 + 0x88]
	0x031CC724 RET
	0x031CC728 LDR X0, [X0 + 0x90]
	0x031CC72C RET
	0x031CC730 STR X1, [X0 + 0x90]
	0x031CC734 RET
	0x031CC738 LDR X0, [X0 + 0x98]
	0x031CC73C RET
	0x031CC740 STR X1, [X0 + 0x98]
	0x031CC744 RET
	0x031CC748 LDR X0, [X0 + 0xA0]
	0x031CC74C RET
	0x031CC750 STR X1, [X0 + 0xA0]
	0x031CC754 RET
	0x031CC758 LDR X0, [X0 + 0xA8]
	0x031CC75C RET
	0x031CC760 STR X1, [X0 + 0xA8]
	0x031CC764 RET
	0x031CC768 LDR X0, [X0 + 0xB0]
	0x031CC76C RET
	0x031CC770 STR X1, [X0 + 0xB0]
	0x031CC774 RET
	0x031CC778 LDR X0, [X0 + 0xB8]
	0x031CC77C RET
	0x031CC780 STR X1, [X0 + 0xB8]
	0x031CC784 RET
	0x031CC788 LDR X0, [X0 + 0xC0]
	0x031CC78C RET
	0x031CC790 STR X1, [X0 + 0xC0]
	0x031CC794 RET
	0x031CC798 LDR X0, [X0 + 0xC8]
	0x031CC79C RET
	0x031CC7A0 STR X1, [X0 + 0xC8]
	0x031CC7A4 RET
	0x031CC7A8 LDR X0, [X0 + 0xD0]
	0x031CC7AC RET
	0x031CC7B0 STR X1, [X0 + 0xD0]
	0x031CC7B4 RET
	0x031CC7B8 LDR X0, [X0 + 0xD8]
	0x031CC7BC RET
	0x031CC7C0 STR X1, [X0 + 0xD8]
	0x031CC7C4 RET
	0x031CC7C8 LDR X0, [X0 + 0xE0]
	0x031CC7CC RET
	0x031CC7D0 STR X1, [X0 + 0xE0]
	0x031CC7D4 RET
	0x031CC7D8 LDR W8, [X0 + 0x3C]
	0x031CC7DC LDR W9, [X0 + 0x34]
	0x031CC7E0 ORR W0, W8, W9, 0x10

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x1210000
	009 Move W8, [X20+4077]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xF54000
	016 Move X0, [X0+872]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+4077], W8
	020 Move X8, [X19+160]
	021 Compare X8, 0
	022 JumpIfEqual {119}
	023 Move X9, [X8+24]
	024 Move X0, [X8+64]
	025 Move X1, [X8+40]
	026 Move X21, 0xF54000
	027 Move X21, [X21+872]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X8, [X21]
	030 Move X9, [X8+184]
	031 Move [X9+8], S0
	032 Move [X9+16], S1
	033 Move [X9+16], S2
	034 Move X8, [X8+184]
	035 Move V0, [X8+8]
	036 Move [X8], S0
	037 Move X20, [X19+192]
	038 Compare X20, 0
	039 JumpIfEqual {119}
	040 Move X0, X20
	041 Move X1, X31
	042 Call Transform.get_localPosition, X0
	043 Move X8, [X19+232]
	044 Compare X8, 0
	045 JumpIfEqual {119}
	046 Move V8, V0
	047 Move V9, V1
	048 Move V10, V2
	049 Move S0, [X8+24]
	050 Move S1, [X8+28]
	051 Move V2, [X8+32]
	052 Move X0, X20
	053 Move X1, X31
	054 Call Transform.TransformPoint, X0, X1
	055 Move X8, [X19+232]
	056 Compare X8, 0
	057 JumpIfEqual {119}
	058 Move X9, [X21]
	059 Move S3, [X8+36]
	060 Move S4, [X8+40]
	061 Move V5, [X8+44]
	062 Move X0, X20
	063 Move X9, [X9+184]
	064 Move X1, X31
	065 Move V6, [X9]
	066 NotImplemented "Instruction FNEG not yet implemented."
	067 Call Transform.RotateAround, X0, X1, X2, V0
	068 Move X0, X20
	069 Move X1, X31
	070 Call Transform.get_localPosition, X0
	071 Subtract S0, S8, S0
	072 Subtract S1, S9, S1
	073 Subtract S2, S10, S2
	074 Subtract S0, S8, S0
	075 Subtract S1, S9, S1
	076 Subtract S2, S10, S2
	077 Move X0, X20
	078 Move X1, X31
	079 Call Transform.set_localPosition, X0, X1
	080 Move X8, [X19+232]
	081 Compare X8, 0
	082 JumpIfEqual {119}
	083 Move S0, [X8+52]
	084 Move S1, [X8+56]
	085 Move S2, [X8+60]
	086 Move S3, [X8+64]
	087 Move X0, X20
	088 Move X1, X31
	089 Call Transform.set_rotation, X0, X1
	090 Move X8, [X19+232]
	091 Compare X8, 0
	092 JumpIfEqual {119}
	093 Move S0, [X8+24]
	094 Move S1, [X8+28]
	095 Move V2, [X8+32]
	096 Move X0, X20
	097 Move X1, X31
	098 Call Transform.TransformPoint, X0, X1
	099 Move X8, [X19+232]
	100 Compare X8, 0
	101 JumpIfEqual {119}
	102 Move X9, [X21]
	103 Move S3, [X8+36]
	104 Move S4, [X8+40]
	105 Move V5, [X8+44]
	106 Move X0, X20
	107 Move X9, [X9+184]
	108 Move X20, [X31+48]
	109 Move X19, [X31+56]
	110 Move X30, [X31+32]
	111 Move X21, [X31+40]
	112 Move D9, [X31+16]
	113 Move D8, [X31+24]
	114 Move V6, [X9]
	115 Move X1, X31
	116 Move V10, [X31+64]
	117 Call Transform.RotateAround, X0, X1, X2, V0
	118 Return 
	119 Call 0x1C17F20

Method: System.Void <setCanvasRotateAroundLocal>b__107_0()

Disassembly:
	0x031CC7E4 RET
	0x031CC7E8 STR X31, [X0 + 0x10]
	0x031CC7EC STR X31, [X0 + 0x20]
	0x031CC7F0 STR W31, [X0 + 0x28]
	0x031CC7F4 RET
	0x031CC7F8 STP X0, X31, [X0 + 0x18]
	0x031CC7FC STR W31, [X0 + 0x28]
	0x031CC800 STR W1, [X0 + 0x3C]
	0x031CC804 STR W2, [X0 + 0x34]
	0x031CC808 STR X31, [X0 + 0x10]
	0x031CC80C RET
	0x031CC810 STR X30, [X31 - 0x20]!
	0x031CC814 STP X20, X19, [X31 + 0x10]
	0x031CC818 ADRP X20, 0x120F000
	0x031CC81C LDRB W8, [X20 + 0xFFB]
	0x031CC820 MOV X19, X0
	0x031CC824 TBNZ X8, 0x0, 0x31CC83C
	0x031CC828 ADRP X0, 0xF29000
	0x031CC82C LDR X0, [X0 + 0x5A8]
	0x031CC830 BL 0x1C16CF4
	0x031CC834 MOVZ W8, 0x1
	0x031CC838 STRB W8, [X20 + 0xFFB]
	0x031CC83C LDR X20, [X19 + 0x18]
	0x031CC840 CBZ X20, 0x31CC8A0
	0x031CC844 ADRP X8, 0xF29000
	0x031CC848 LDR X8, [X8 + 0x5A8]
	0x031CC84C MOVZ W9, 0x1
	0x031CC850 STRB W9, [X20 + 0x38]
	0x031CC854 LDR X0, [X8]
	0x031CC858 LDR W8, [X0 + 0xE0]
	0x031CC85C CBNZ W8, 0x31CC864
	0x031CC860 BL 0x1C16DFC
	0x031CC864 MOVZ W0, 0x1
	0x031CC868 MOV X1, X31
	0x031CC86C BL 0x31AFA14
	0x031CC870 STR X0, [X19 + 0x18]
	0x031CC874 CBZ X0, 0x31CC8A0
	0x031CC878 STR X20, [X0 + 0x10]
	0x031CC87C LDR V0, [X20 + 0x28]
	0x031CC880 STRB W31, [X20 + 0x38]
	0x031CC884 STR S0, [X0 + 0x28]
	0x031CC888 LDR W8, [X20 + 0x30]
	0x031CC88C LDP X20, X19, [X31 + 0x10]
	0x031CC890 ADD W8, W8, 0x1
	0x031CC894 STR W8, [X0 + 0x30]
	0x031CC898 LDR X30, [X31], #0x20
	0x031CC89C RET
	0x031CC8A0 BL 0x1C16F20
	0x031CC8A4 STR X30, [X31 - 0x10]!
	0x031CC8A8 LDR X8, [X0 + 0x18]
	0x031CC8AC CBZ X8, 0x31CC8DC
	0x031CC8B0 LDR X9, [X8 + 0x10]
	0x031CC8B4 CBZ X9, 0x31CC8D0
	0x031CC8B8 LDR X9, [X9 + 0x20]
	0x031CC8BC CBZ X9, 0x31CC8D0
	0x031CC8C0 LDR V0, [X8 + 0x28]
	0x031CC8C4 LDR V1, [X9 + 0x28]
	0x031CC8C8 FADD S0, S0, S1
	0x031CC8CC B 0x31CC8D4
	0x031CC8D0 LDR V0, [X8 + 0x28]
	0x031CC8D4 LDR X30, [X31], #0x10
	0x031CC8D8 RET
	0x031CC8DC BL 0x1C16F20
	0x031CC8E0 STR X30, [X31 - 0x10]!
	0x031CC8E4 LDR X0, [X0 + 0x18]
	0x031CC8E8 CBZ X0, 0x31CC900
	0x031CC8EC LDR V1, [X0 + 0x28]
	0x031CC8F0 FADD S0, S1, S0
	0x031CC8F4 STR S0, [X0 + 0x28]
	0x031CC8F8 LDR X30, [X31], #0x10
	0x031CC8FC RET
	0x031CC900 BL 0x1C16F20
	0x031CC904 STR X30, [X31 - 0x30]!
	0x031CC908 STP X22, X21, [X31 + 0x10]
	0x031CC90C STP X20, X19, [X31 + 0x20]
	0x031CC910 ADRP X21, 0x120F000
	0x031CC914 ADRP X22, 0xF29000
	0x031CC918 LDRB W8, [X21 + 0xFFC]
	0x031CC91C LDR X22, [X22 + 0x5A8]
	0x031CC920 MOV X20, X1
	0x031CC924 MOV X19, X0
	0x031CC928 TBNZ X8, 0x0, 0x31CC940
	0x031CC92C ADRP X0, 0xF29000
	0x031CC930 LDR X0, [X0 + 0x5A8]
	0x031CC934 BL 0x1C16CF4
	0x031CC938 MOVZ W8, 0x1
	0x031CC93C STRB W8, [X21 + 0xFFC]
	0x031CC940 LDR X0, [X22]
	0x031CC944 LDR W8, [X0 + 0xE0]
	0x031CC948 CBNZ W8, 0x31CC950
	0x031CC94C BL 0x1C16DFC
	0x031CC950 FMOV S0, W31
	0x031CC954 MOV X0, X20
	0x031CC958 MOV X1, X31
	0x031CC95C BL 0x31B02D0
	0x031CC960 MOV X1, X0
	0x031CC964 MOV X0, X19
	0x031CC968 LDP X20, X19, [X31 + 0x20]
	0x031CC96C LDP X22, X21, [X31 + 0x10]
	0x031CC970 LDR X30, [X31], #0x30
	0x031CC974 B 0x31CC978
	0x031CC978 STP X30, X21, [X31 - 0x20]!
	0x031CC97C STP X20, X19, [X31 + 0x10]
	0x031CC980 LDR X21, [X0 + 0x18]
	0x031CC984 CBZ X21, 0x31CC9C0
	0x031CC988 MOV X19, X0
	0x031CC98C MOV X20, X1
	0x031CC990 STR X1, [X21 + 0x20]
	0x031CC994 BL 0x31CC8A4
	0x031CC998 STR S0, [X21 + 0x28]
	0x031CC99C LDR X8, [X19 + 0x18]
	0x031CC9A0 CBZ X8, 0x31CC9C0
	0x031CC9A4 CBZ X20, 0x31CC9C0
	0x031CC9A8 LDR V0, [X8 + 0x28]
	0x031CC9AC MOV X0, X19
	0x031CC9B0 STR S0, [X20 + 0x24]
	0x031CC9B4 LDP X20, X19, [X31 + 0x10]
	0x031CC9B8 LDP X30, X21, [X31], #0x20
	0x031CC9BC B 0x31CC810
	0x031CC9C0 BL 0x1C16F20
	0x031CC9C4 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x1210000
	012 Move W8, [X20+4078]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0xF54000
	019 Move X0, [X0+872]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+4078], W8
	023 Move X8, [X19+160]
	024 Compare X8, 0
	025 JumpIfEqual {149}
	026 Move X9, [X8+24]
	027 Move X0, [X8+64]
	028 Move X1, [X8+40]
	029 Move X21, 0xF54000
	030 Move X21, [X21+872]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X8, [X21]
	033 Move X9, [X8+184]
	034 Move [X9+8], S0
	035 Move [X9+16], S1
	036 Move [X9+16], S2
	037 Move X8, [X8+184]
	038 Move V0, [X8+8]
	039 Move [X8], S0
	040 Move X20, [X19+192]
	041 Compare X20, 0
	042 JumpIfEqual {149}
	043 Move X0, X20
	044 Move X1, X31
	045 Call Transform.get_localPosition, X0
	046 Move X8, [X19+232]
	047 Compare X8, 0
	048 JumpIfEqual {149}
	049 Move V8, V0
	050 Move V9, V1
	051 Move V10, V2
	052 Move S0, [X8+24]
	053 Move S1, [X8+28]
	054 Move V2, [X8+32]
	055 Move X0, X20
	056 Move X1, X31
	057 Call Transform.TransformPoint, X0, X1
	058 Move X8, [X19+232]
	059 Compare X8, 0
	060 JumpIfEqual {149}
	061 Move V11, V0
	062 Move V12, V1
	063 Move V13, V2
	064 Move S0, [X8+36]
	065 Move S1, [X8+40]
	066 Move V2, [X8+44]
	067 Move X0, X20
	068 Move X1, X31
	069 Call Transform.TransformDirection, X0, X1
	070 Move X8, [X21]
	071 Move V3, V0
	072 Move V4, V1
	073 Move V5, V2
	074 Move X8, [X8+184]
	075 Move X0, X20
	076 Move V1, V12
	077 Move V2, V13
	078 Move V0, [X8]
	079 Move X1, X31
	080 NotImplemented "Instruction FNEG not yet implemented."
	081 Move V0, V11
	082 Call Transform.RotateAround, X0, X1, X2, V0
	083 Move X0, X20
	084 Move X1, X31
	085 Call Transform.get_localPosition, X0
	086 Subtract S0, S8, S0
	087 Subtract S1, S9, S1
	088 Subtract S2, S10, S2
	089 Subtract S0, S8, S0
	090 Subtract S1, S9, S1
	091 Subtract S2, S10, S2
	092 Move X0, X20
	093 Move X1, X31
	094 Call Transform.set_localPosition, X0, X1
	095 Move X8, [X19+232]
	096 Compare X8, 0
	097 JumpIfEqual {149}
	098 Move S0, [X8+52]
	099 Move S1, [X8+56]
	100 Move S2, [X8+60]
	101 Move S3, [X8+64]
	102 Move X0, X20
	103 Move X1, X31
	104 Call Transform.set_rotation, X0, X1
	105 Move X8, [X19+232]
	106 Compare X8, 0
	107 JumpIfEqual {149}
	108 Move S0, [X8+24]
	109 Move S1, [X8+28]
	110 Move V2, [X8+32]
	111 Move X0, X20
	112 Move X1, X31
	113 Call Transform.TransformPoint, X0, X1
	114 Move X8, [X19+232]
	115 Compare X8, 0
	116 JumpIfEqual {149}
	117 Move V8, V0
	118 Move V9, V1
	119 Move V10, V2
	120 Move S0, [X8+36]
	121 Move S1, [X8+40]
	122 Move V2, [X8+44]
	123 Move X0, X20
	124 Move X1, X31
	125 Call Transform.TransformDirection, X0, X1
	126 Move X8, [X21]
	127 Move V3, V0
	128 Move V4, V1
	129 Move V5, V2
	130 Move X8, [X8+184]
	131 Move X0, X20
	132 Move V0, V8
	133 Move V1, V9
	134 Move V6, [X8]
	135 Move V2, V10
	136 Move X20, [X31+64]
	137 Move X19, [X31+72]
	138 Move X30, [X31+48]
	139 Move X21, [X31+56]
	140 Move D9, [X31+32]
	141 Move D8, [X31+40]
	142 Move D11, [X31+16]
	143 Move D10, [X31+24]
	144 Move X1, X31
	145 Move D13, [X31+80]
	146 Move D12, [X31+88]
	147 Call Transform.RotateAround, X0, X1, X2, V0
	148 Return 
	149 Call 0x1C17F20

Method: System.Void <setCanvasPlaySprite>b__108_0()

Disassembly:
	0x031CC9C8 STP X22, X21, [X31 + 0x10]
	0x031CC9CC STP X20, X19, [X31 + 0x20]
	0x031CC9D0 ADRP X22, 0x120F000
	0x031CC9D4 ADRP X23, 0xF29000
	0x031CC9D8 LDRB W8, [X22 + 0xFFD]
	0x031CC9DC LDR X23, [X23 + 0x5A8]
	0x031CC9E0 MOV X20, X2
	0x031CC9E4 MOV X21, X1
	0x031CC9E8 MOV X19, X0
	0x031CC9EC TBNZ X8, 0x0, 0x31CCA04
	0x031CC9F0 ADRP X0, 0xF29000
	0x031CC9F4 LDR X0, [X0 + 0x5A8]
	0x031CC9F8 BL 0x1C16CF4
	0x031CC9FC MOVZ W8, 0x1
	0x031CCA00 STRB W8, [X22 + 0xFFD]
	0x031CCA04 LDR X0, [X23]
	0x031CCA08 LDR W8, [X0 + 0xE0]
	0x031CCA0C CBNZ W8, 0x31CCA14
	0x031CCA10 BL 0x1C16DFC
	0x031CCA14 FMOV S0, W31
	0x031CCA18 MOV X0, X21
	0x031CCA1C MOV X1, X31
	0x031CCA20 BL 0x31B03B0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1210000
	005 Move W8, [X20+4079]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF54000
	012 Move X0, [X0+2496]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4079], W8
	016 Move X0, [X19+88]
	017 Compare X0, 0
	018 JumpIfEqual {29}
	019 Move X8, 0xF54000
	020 Move X8, [X8+2496]
	021 Move X1, [X8]
	022 Call 0x21A4894, X0
	023 Move [X19+208], X0
	024 Move [X19+96], W31
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void <setCanvasPlaySprite>b__108_1()

Disassembly:
	0x031CCA24 CBZ X0, 0x31CCA5C
	0x031CCA28 LDR X8, [X0 + 0xE8]
	0x031CCA2C MOV X1, X0
	0x031CCA30 CBZ X8, 0x31CCA5C
	0x031CCA34 STR X20, [X8 + 0xD0]
	0x031CCA38 MOVZ W8, 0x1
	0x031CCA3C MOV X0, X19
	0x031CCA40 STRB W8, [X1 + 0x16]
	0x031CCA44 BL 0x31CC978
	0x031CCA48 MOV X0, X19
	0x031CCA4C LDP X20, X19, [X31 + 0x20]
	0x031CCA50 LDP X22, X21, [X31 + 0x10]
	0x031CCA54 LDP X30, X23, [X31], #0x30
	0x031CCA58 B 0x31CC810
	0x031CCA5C BL 0x1C16F20
	0x031CCA60 STP X30, X23, [X31 - 0x30]!
	0x031CCA64 STP X22, X21, [X31 + 0x10]
	0x031CCA68 STP X20, X19, [X31 + 0x20]
	0x031CCA6C ADRP X22, 0x120F000
	0x031CCA70 ADRP X23, 0xF29000
	0x031CCA74 LDRB W8, [X22 + 0xFFE]
	0x031CCA78 LDR X23, [X23 + 0x5A8]
	0x031CCA7C MOV X20, X2
	0x031CCA80 MOV X21, X1
	0x031CCA84 MOV X19, X0
	0x031CCA88 TBNZ X8, 0x0, 0x31CCAA0
	0x031CCA8C ADRP X0, 0xF29000
	0x031CCA90 LDR X0, [X0 + 0x5A8]
	0x031CCA94 BL 0x1C16CF4
	0x031CCA98 MOVZ W8, 0x1
	0x031CCA9C STRB W8, [X22 + 0xFFE]
	0x031CCAA0 LDR X0, [X23]
	0x031CCAA4 LDR W8, [X0 + 0xE0]
	0x031CCAA8 CBNZ W8, 0x31CCAB0
	0x031CCAAC BL 0x1C16DFC
	0x031CCAB0 FMOV S0, W31
	0x031CCAB4 MOV X0, X21
	0x031CCAB8 MOV X1, X20
	0x031CCABC MOV X2, X31
	0x031CCAC0 BL 0x31B0490
	0x031CCAC4 MOV X1, X0
	0x031CCAC8 MOV X0, X19
	0x031CCACC BL 0x31CC978
	0x031CCAD0 MOV X0, X19
	0x031CCAD4 LDP X20, X19, [X31 + 0x20]
	0x031CCAD8 LDP X22, X21, [X31 + 0x10]
	0x031CCADC LDP X30, X23, [X31], #0x30
	0x031CCAE0 B 0x31CC810
	0x031CCAE4 STR X30, [X31 - 0x40]!
	0x031CCAE8 STP X24, X23, [X31 + 0x10]
	0x031CCAEC STP X22, X21, [X31 + 0x20]
	0x031CCAF0 STP X20, X19, [X31 + 0x30]
	0x031CCAF4 ADRP X23, 0x120F000
	0x031CCAF8 ADRP X24, 0xF29000
	0x031CCAFC LDRB W8, [X23 + 0xFFF]
	0x031CCB00 LDR X24, [X24 + 0x5A8]
	0x031CCB04 MOV X20, X3
	0x031CCB08 MOV X21, X2
	0x031CCB0C MOV X22, X1
	0x031CCB10 MOV X19, X0
	0x031CCB14 TBNZ X8, 0x0, 0x31CCB2C
	0x031CCB18 ADRP X0, 0xF29000
	0x031CCB1C LDR X0, [X0 + 0x5A8]
	0x031CCB20 BL 0x1C16CF4
	0x031CCB24 MOVZ W8, 0x1
	0x031CCB28 STRB W8, [X23 + 0xFFF]
	0x031CCB2C LDR X0, [X24]
	0x031CCB30 LDR W8, [X0 + 0xE0]
	0x031CCB34 CBNZ W8, 0x31CCB3C
	0x031CCB38 BL 0x1C16DFC
	0x031CCB3C FMOV S0, W31
	0x031CCB40 MOV X0, X22
	0x031CCB44 MOV X1, X21
	0x031CCB48 MOV X2, X31
	0x031CCB4C BL 0x31B0574
	0x031CCB50 CBZ X0, 0x31CCB8C
	0x031CCB54 LDR X8, [X0 + 0xE8]
	0x031CCB58 MOV X1, X0
	0x031CCB5C CBZ X8, 0x31CCB8C
	0x031CCB60 STR X20, [X8 + 0xD0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1210000
	007 Move W8, [X20+4080]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF54000
	014 Move X0, [X0+872]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+4080], W8
	018 Move X8, [X19+160]
	019 Compare X8, 0
	020 JumpIfEqual {82}
	021 Move X9, [X8+24]
	022 Move X0, [X8+64]
	023 Move X1, [X8+40]
	024 Move X20, 0xF54000
	025 Move X20, [X20+872]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X8, [X20]
	028 Add X0, X31, 8
	029 Move X9, [X8+184]
	030 Move [X9+8], S0
	031 Move [X9+16], S1
	032 Move [X9+16], S2
	033 Move X8, [X8+184]
	034 Move V8, [X8+8]
	035 NotImplemented "Instruction FCVT not yet implemented."
	036 Move [X8], S8
	037 Call 0x3EB2C00
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move D1, -0.5
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Move V0, [X31+8]
	042 Move S1, -1
	043 Move D1, 0.5
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 Move V0, [X31+8]
	046 Move S1, 1
	047 NotImplemented "Instruction FCVTZS not yet implemented."
	048 NotImplemented "Instruction INVALID not yet implemented."
	049 Add S1, S0, S1
	050 And X31, X8, 1
	051 NotImplemented "Instruction FCSEL not yet implemented."
	052 Move S0, -0.5
	053 Add S0, S8, S0
	054 NotImplemented "Instruction FRINTP not yet implemented."
	055 Move S0, 0.5
	056 Add S0, S8, S0
	057 NotImplemented "Instruction FRINTM not yet implemented."
	058 Move W9, 0x7F800000
	059 Move X8, [X19+224]
	060 Move S1, W9
	061 NotImplemented "Instruction FCVTZS not yet implemented."
	062 NotImplemented "Instruction FCMP not yet implemented."
	063 Move W9, 0x80000000
	064 NotImplemented "Instruction CSEL not yet implemented."
	065 Compare X8, 0
	066 JumpIfEqual {82}
	067 Move W10, [X8+24]
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, [X19+208]
	070 Compare X0, 0
	071 JumpIfEqual {82}
	072 Add X8, X8, W9
	073 Move X1, [X8+32]
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X30, [X31+24]
	077 Move V8, [X31+16]
	078 Move X2, X31
	079 Add X31, X31, 48
	080 Call Image.set_sprite, X0, X1
	081 Return 
	082 Call 0x1C17F20
	083 Call 0x1C17F28

Method: System.Void <setCanvasMove>b__109_0()

Disassembly:
	0x031CCB64 MOVZ W8, 0x1
	0x031CCB68 MOV X0, X19
	0x031CCB6C STRB W8, [X1 + 0x16]
	0x031CCB70 BL 0x31CC978
	0x031CCB74 MOV X0, X19
	0x031CCB78 LDP X20, X19, [X31 + 0x30]
	0x031CCB7C LDP X22, X21, [X31 + 0x20]
	0x031CCB80 LDP X24, X23, [X31 + 0x10]
	0x031CCB84 LDR X30, [X31], #0x40
	0x031CCB88 B 0x31CC810
	0x031CCB8C BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call RectTransform.get_anchoredPosition3D, X0
	009 Move [X19+96], S0
	010 Move [X19+104], S1
	011 Move [X19+104], S2
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void <setCanvasMove>b__109_1()

Disassembly:
	0x031CCB90 STR X30, [X31 - 0x20]!
	0x031CCB94 STP X20, X19, [X31 + 0x10]
	0x031CCB98 LDR X8, [X0 + 0x18]
	0x031CCB9C CBZ X8, 0x31CCBC8
	0x031CCBA0 MOV X19, X0
	0x031CCBA4 MOV X20, X1
	0x031CCBA8 STR X1, [X8 + 0x20]
	0x031CCBAC BL 0x31CC8A4
	0x031CCBB0 CBZ X20, 0x31CCBC8
	0x031CCBB4 STR S0, [X20 + 0x24]
	0x031CCBB8 MOV X0, X19
	0x031CCBBC LDP X20, X19, [X31 + 0x10]
	0x031CCBC0 LDR X30, [X31], #0x20
	0x031CCBC4 B 0x31CC810

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+160]
	004 Compare X8, 0
	005 JumpIfEqual {19}
	006 Move X19, [X0+192]
	007 Move X9, [X8+24]
	008 Move X0, [X8+64]
	009 Move X1, [X8+40]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Compare X19, 0
	012 JumpIfEqual {19}
	013 Move X0, X19
	014 Move X1, X31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call RectTransform.set_anchoredPosition3D, X0, X1
	018 Return 
	019 Call 0x1C17F20

Method: System.Void <setCanvasScale>b__110_0()

Disassembly:
	0x031CCBC8 BL 0x1C16F20
	0x031CCBCC STP X30, X19, [X31 - 0x10]!
	0x031CCBD0 LDR X1, [X0 + 0x18]
	0x031CCBD4 MOVZ W2, 0x1F4
	0x031CCBD8 MOV X19, X0
	0x031CCBDC BL 0x31CCBEC
	0x031CCBE0 MOV X0, X19
	0x031CCBE4 LDP X30, X19, [X31], #0x10
	0x031CCBE8 B 0x31CC810
	0x031CCBEC STR X30, [X31 - 0x10]!
	0x031CCBF0 CMP W2, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call Transform.get_localScale, X0
	009 Move [X19+96], S0
	010 Move [X19+104], S1
	011 Move [X19+104], S2
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void <setCanvasScale>b__110_1()

Disassembly:
	0x031CCBF4 B.LT 0x31CCC54
	0x031CCBF8 CBZ X1, 0x31CCC5C
	0x031CCBFC LDR V1, [X1 + 0x28]
	0x031CCC00 LDR X8, [X1 + 0x20]
	0x031CCC04 FMUL S1, S1, S0
	0x031CCC08 STR S1, [X1 + 0x28]
	0x031CCC0C CBZ X8, 0x31CCC40
	0x031CCC10 LDR V1, [X8 + 0x28]
	0x031CCC14 FCMP S1, 0x0
	0x031CCC18 B.EQ 0x31CCC34
	0x031CCC1C LDR V2, [X8 + 0x20]
	0x031CCC20 FMUL S3, S1, S0
	0x031CCC24 STR S3, [X8 + 0x28]
	0x031CCC28 FDIV S1, S2, S1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+160]
	004 Compare X8, 0
	005 JumpIfEqual {19}
	006 Move X19, [X0+192]
	007 Move X9, [X8+24]
	008 Move X0, [X8+64]
	009 Move X1, [X8+40]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Compare X19, 0
	012 JumpIfEqual {19}
	013 Move X0, X19
	014 Move X1, X31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call Transform.set_localScale, X0, X1
	018 Return 
	019 Call 0x1C17F20

Method: System.Void <setCanvasSizeDelta>b__111_0()

Disassembly:
	0x031CCC2C FMUL S1, S3, S1
	0x031CCC30 STR S1, [X8 + 0x20]
	0x031CCC34 LDR V1, [X8 + 0x24]
	0x031CCC38 FMUL S1, S1, S0
	0x031CCC3C STR S1, [X8 + 0x24]
	0x031CCC40 LDR X1, [X1 + 0x10]
	0x031CCC44 SUBS W2, W2, 0x1
	0x031CCC48 CBZ X1, 0x31CCC50
	0x031CCC4C B.GT 0x31CCBF8
	0x031CCC50 STR S0, [X0 + 0x2C]
	0x031CCC54 LDR X30, [X31], #0x10

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+192]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call RectTransform.get_sizeDelta, X0
	009 Move [X19+96], S0
	010 Move [X19+104], S1
	011 Move [X19+104], W31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void <setCanvasSizeDelta>b__111_1()

Disassembly:
	0x031CCC58 RET
	0x031CCC5C STR S0, [X0 + 0x2C]
	0x031CCC60 BL 0x1C16F20
	0x031CCC64 B 0x31CC810
	0x031CCC68 MOV X1, X31
	0x031CCC6C B 0x33BDD8C
	0x031CCC70 STP X30, X23, [X31 - 0x30]!
	0x031CCC74 STP X22, X21, [X31 + 0x10]
	0x031CCC78 STP X20, X19, [X31 + 0x20]
	0x031CCC7C ADRP X23, 0x1210000
	0x031CCC80 ADRP X22, 0xF27000
	0x031CCC84 ADRP X20, 0xF53000
	0x031CCC88 ADRP X21, 0xF53000
	0x031CCC8C MOV X19, X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+160]
	004 Compare X8, 0
	005 JumpIfEqual {19}
	006 Move X19, [X0+192]
	007 Move X9, [X8+24]
	008 Move X0, [X8+64]
	009 Move X1, [X8+40]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Compare X19, 0
	012 JumpIfEqual {19}
	013 Move X0, X19
	014 Move X1, X31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call RectTransform.set_sizeDelta, X0, X1
	018 Return 
	019 Call 0x1C17F20

Method: System.Void <setMove>b__115_0()

Disassembly:
	0x031CCC90 LDRB W8, [X23]
	0x031CCC94 LDR X22, [X22 + 0x618]
	0x031CCC98 LDR X20, [X20 + 0xB08]
	0x031CCC9C LDR X21, [X21 + 0xB10]
	0x031CCCA0 TBNZ X8, 0x0, 0x31CCCD0
	0x031CCCA4 ADRP X0, 0xF27000
	0x031CCCA8 LDR X0, [X0 + 0x618]
	0x031CCCAC BL 0x1C16CF4
	0x031CCCB0 ADRP X0, 0xF53000
	0x031CCCB4 LDR X0, [X0 + 0xB10]
	0x031CCCB8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call Transform.get_position, X0
	009 Move [X19+96], S0
	010 Move [X19+104], S1
	011 Move [X19+104], S2
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void <setMove>b__115_1()

Disassembly:
	0x031CCCBC ADRP X0, 0xF53000
	0x031CCCC0 LDR X0, [X0 + 0xB08]
	0x031CCCC4 BL 0x1C16CF4
	0x031CCCC8 MOVZ W8, 0x1
	0x031CCCCC STRB W8, [X23]
	0x031CCCD0 LDR X0, [X22]
	0x031CCCD4 MOVZ W1, 0x183
	0x031CCCD8 BL 0x1C16D6C
	0x031CCCDC LDR X1, [X20]
	0x031CCCE0 MOV X2, X31
	0x031CCCE4 MOV X20, X0
	0x031CCCE8 BL 0x32C5BD8
	0x031CCCEC LDR X0, [X22]
	0x031CCCF0 MOVZ W1, 0x131
	0x031CCCF4 BL 0x1C16D6C
	0x031CCCF8 LDR X1, [X21]
	0x031CCCFC MOV X2, X31
	0x031CCD00 MOV X21, X0
	0x031CCD04 BL 0x32C5BD8
	0x031CCD08 ADRP X8, 0xFFFFFFFFFD921000
	0x031CCD0C LDR V0, [X8 + 0xA10]
	0x031CCD10 STP X20, X21, [X19]
	0x031CCD14 STRB W31, [X19 + 0x18]
	0x031CCD18 STUR W31, [X19 + 0x19]
	0x031CCD1C STR D0, [X19 + 0x10]
	0x031CCD20 STR W31, [X19 + 0x1C]
	0x031CCD24 LDP X20, X19, [X31 + 0x20]
	0x031CCD28 LDP X22, X21, [X31 + 0x10]
	0x031CCD2C LDP X30, X23, [X31], #0x30
	0x031CCD30 RET
	0x031CCD34 MOV X1, X31
	0x031CCD38 B 0x33BDD8C
	0x031CCD3C MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1210000
	005 Move W8, [X20+4081]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF54000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4081], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {43}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF54000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X0, [X19+88]
	031 Compare X0, 0
	032 JumpIfEqual {43}
	033 Move X8, [X8+184]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move S1, [X8+12]
	038 Move S2, [X8+16]
	039 Move V0, [X8+8]
	040 Move X30, [X31+32]
	041 Call Transform.set_position, X0, X1
	042 Return 
	043 Call 0x1C17F20

Method: System.Void <setMoveLocal>b__116_0()

Disassembly:
	0x031CCD40 B 0x33BDD8C
	0x031CCD44 STP X30, X23, [X31 - 0x30]!
	0x031CCD48 STP X22, X21, [X31 + 0x10]
	0x031CCD4C STP X20, X19, [X31 + 0x20]
	0x031CCD50 ADRP X23, 0x1210000
	0x031CCD54 ADRP X22, 0xF27000
	0x031CCD58 ADRP X20, 0xF53000
	0x031CCD5C ADRP X21, 0xF53000
	0x031CCD60 MOV X19, X8
	0x031CCD64 LDRB W8, [X23 + 0x2]
	0x031CCD68 LDR X22, [X22 + 0x618]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call Transform.get_localPosition, X0
	009 Move [X19+96], S0
	010 Move [X19+104], S1
	011 Move [X19+104], S2
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void <setMoveLocal>b__116_1()

Disassembly:
	0x031CCD6C LDR X20, [X20 + 0xB18]
	0x031CCD70 LDR X21, [X21 + 0xB20]
	0x031CCD74 TBNZ X8, 0x0, 0x31CCDA4
	0x031CCD78 ADRP X0, 0xF27000
	0x031CCD7C LDR X0, [X0 + 0x618]
	0x031CCD80 BL 0x1C16CF4
	0x031CCD84 ADRP X0, 0xF53000
	0x031CCD88 LDR X0, [X0 + 0xB20]
	0x031CCD8C BL 0x1C16CF4
	0x031CCD90 ADRP X0, 0xF53000
	0x031CCD94 LDR X0, [X0 + 0xB18]
	0x031CCD98 BL 0x1C16CF4
	0x031CCD9C MOVZ W8, 0x1
	0x031CCDA0 STRB W8, [X23 + 0x2]
	0x031CCDA4 LDR X0, [X22]
	0x031CCDA8 MOVZ W1, 0x1C8
	0x031CCDAC BL 0x1C16D6C
	0x031CCDB0 LDR X1, [X20]
	0x031CCDB4 MOV X2, X31
	0x031CCDB8 MOV X20, X0
	0x031CCDBC BL 0x32C5BD8
	0x031CCDC0 LDR X0, [X22]
	0x031CCDC4 MOVZ W1, 0x149
	0x031CCDC8 BL 0x1C16D6C
	0x031CCDCC LDR X1, [X21]
	0x031CCDD0 MOV X2, X31
	0x031CCDD4 MOV X21, X0
	0x031CCDD8 BL 0x32C5BD8
	0x031CCDDC ADRP X8, 0xFFFFFFFFFD922000
	0x031CCDE0 LDR V0, [X8 + 0x1C8]
	0x031CCDE4 STP X20, X21, [X19]
	0x031CCDE8 STRB W31, [X19 + 0x18]
	0x031CCDEC STUR W31, [X19 + 0x19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1210000
	005 Move W8, [X20+4082]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF54000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4082], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {43}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF54000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X0, [X19+88]
	031 Compare X0, 0
	032 JumpIfEqual {43}
	033 Move X8, [X8+184]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move S1, [X8+12]
	038 Move S2, [X8+16]
	039 Move V0, [X8+8]
	040 Move X30, [X31+32]
	041 Call Transform.set_localPosition, X0, X1
	042 Return 
	043 Call 0x1C17F20

Method: System.Void <setMoveToTransform>b__117_0()

Disassembly:
	0x031CCDF0 STR D0, [X19 + 0x10]
	0x031CCDF4 STR W31, [X19 + 0x1C]
	0x031CCDF8 LDP X20, X19, [X31 + 0x20]
	0x031CCDFC LDP X22, X21, [X31 + 0x10]
	0x031CCE00 LDP X30, X23, [X31], #0x30
	0x031CCE04 RET
	0x031CCE08 MOV X1, X31
	0x031CCE0C B 0x33BDD8C
	0x031CCE10 STP X29, X30, [X31 - 0x60]!
	0x031CCE14 STP X28, X27, [X31 + 0x10]
	0x031CCE18 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call Transform.get_position, X0
	009 Move [X19+96], S0
	010 Move [X19+104], S1
	011 Move [X19+104], S2
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void <setMoveToTransform>b__117_1()

Disassembly:
	0x031CCE1C STP X24, X23, [X31 + 0x30]
	0x031CCE20 STP X22, X21, [X31 + 0x40]
	0x031CCE24 STP X20, X19, [X31 + 0x50]
	0x031CCE28 ADRP X20, 0x1210000
	0x031CCE2C ADRP X19, 0xF53000
	0x031CCE30 ADRP X29, 0xF2D000
	0x031CCE34 ADRP X28, 0xF53000
	0x031CCE38 ADRP X27, 0xF53000
	0x031CCE3C ADRP X26, 0xF53000
	0x031CCE40 ADRP X25, 0xF53000
	0x031CCE44 ADRP X24, 0xF53000
	0x031CCE48 ADRP X23, 0xF53000
	0x031CCE4C ADRP X22, 0xF53000
	0x031CCE50 ADRP X21, 0xF53000
	0x031CCE54 ADRP X4, 0xF53000
	0x031CCE58 ADRP X3, 0xF53000
	0x031CCE5C ADRP X2, 0xF53000
	0x031CCE60 ADRP X1, 0xF53000
	0x031CCE64 ADRP X0, 0xF53000
	0x031CCE68 ADRP X17, 0xF53000
	0x031CCE6C ADRP X16, 0xF53000
	0x031CCE70 ADRP X15, 0xF53000
	0x031CCE74 ADRP X14, 0xF53000
	0x031CCE78 ADRP X13, 0xF53000
	0x031CCE7C ADRP X12, 0xF53000
	0x031CCE80 ADRP X11, 0xF53000
	0x031CCE84 ADRP X10, 0xF53000
	0x031CCE88 LDR X19, [X19 + 0xB28]
	0x031CCE8C LDR X29, [X29 + 0xA88]
	0x031CCE90 LDR X28, [X28 + 0xB30]
	0x031CCE94 LDR X27, [X27 + 0xB38]
	0x031CCE98 LDR X26, [X26 + 0xB40]
	0x031CCE9C LDR X25, [X25 + 0xB48]
	0x031CCEA0 LDR X24, [X24 + 0xB50]
	0x031CCEA4 LDR X23, [X23 + 0xB58]
	0x031CCEA8 LDR X22, [X22 + 0xB60]
	0x031CCEAC LDR X21, [X21 + 0xB68]
	0x031CCEB0 LDR X4, [X4 + 0xB70]
	0x031CCEB4 LDR X3, [X3 + 0xB78]
	0x031CCEB8 LDR X2, [X2 + 0xB80]
	0x031CCEBC LDR X1, [X1 + 0xB88]
	0x031CCEC0 LDR X0, [X0 + 0xB90]
	0x031CCEC4 LDR X17, [X17 + 0xB98]
	0x031CCEC8 LDR X16, [X16 + 0xBA0]
	0x031CCECC LDR X15, [X15 + 0xBA8]
	0x031CCED0 LDRB W8, [X20 + 0x4]
	0x031CCED4 LDR X14, [X14 + 0xBB0]
	0x031CCED8 LDR X13, [X13 + 0xBB8]
	0x031CCEDC LDR X12, [X12 + 0xBC0]
	0x031CCEE0 LDR X11, [X11 + 0xBC8]
	0x031CCEE4 LDR X10, [X10 + 0xBD0]
	0x031CCEE8 TBNZ X8, 0x0, 0x31CD070
	0x031CCEEC ADRP X0, 0xF2D000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1210000
	005 Move W8, [X20+4083]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF54000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4083], W8
	016 Move X8, [X19+232]
	017 Compare X8, 0
	018 JumpIfEqual {70}
	019 Move X0, [X8+16]
	020 Compare X0, 0
	021 JumpIfEqual {70}
	022 Move X1, X31
	023 Call Transform.get_position, X0
	024 Move S3, [X19+96]
	025 Move S4, [X19+100]
	026 Move V5, [X19+104]
	027 Move X8, [X19+160]
	028 Move [X19+108], S0
	029 Move [X19+116], S1
	030 Subtract S0, S0, S3
	031 Move S3, 0.5
	032 Subtract S1, S1, S4
	033 Subtract S4, S2, S5
	034 Move [X19+116], S2
	035 Move [X19+124], S0
	036 Move [X19+124], S1
	037 Move [X19+132], S4
	038 Multiply S0, S0, S3
	039 Multiply S1, S1, S3
	040 Multiply S2, S4, S3
	041 Move [X19+132], S0
	042 Move [X19+140], S1
	043 Move [X19+140], S2
	044 Compare X8, 0
	045 JumpIfEqual {70}
	046 Move X9, [X8+24]
	047 Move X0, [X8+64]
	048 Move X1, [X8+40]
	049 Move X20, 0xF54000
	050 Move X20, [X20+872]
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move X8, [X20]
	053 Move X9, [X8+184]
	054 Move [X9+8], S0
	055 Move [X9+16], S1
	056 Move [X9+16], S2
	057 Move X0, [X19+88]
	058 Compare X0, 0
	059 JumpIfEqual {70}
	060 Move X8, [X8+184]
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X1, X31
	064 Move S1, [X8+12]
	065 Move S2, [X8+16]
	066 Move V0, [X8+8]
	067 Move X30, [X31+32]
	068 Call Transform.set_position, X0, X1
	069 Return 
	070 Call 0x1C17F20

Method: System.Void <setRotate>b__118_0()

Disassembly:
	0x031CCEF0 LDR X0, [X0 + 0xA88]
	0x031CCEF4 BL 0x1C16CF4
	0x031CCEF8 ADRP X0, 0xF53000
	0x031CCEFC LDR X0, [X0 + 0xBC8]
	0x031CCF00 BL 0x1C16CF4
	0x031CCF04 ADRP X0, 0xF53000
	0x031CCF08 LDR X0, [X0 + 0xB70]
	0x031CCF0C BL 0x1C16CF4
	0x031CCF10 ADRP X0, 0xF53000
	0x031CCF14 LDR X0, [X0 + 0xB98]
	0x031CCF18 BL 0x1C16CF4
	0x031CCF1C ADRP X0, 0xF53000
	0x031CCF20 LDR X0, [X0 + 0xB88]
	0x031CCF24 BL 0x1C16CF4
	0x031CCF28 ADRP X0, 0xF53000
	0x031CCF2C LDR X0, [X0 + 0xB80]
	0x031CCF30 BL 0x1C16CF4
	0x031CCF34 ADRP X0, 0xF53000
	0x031CCF38 LDR X0, [X0 + 0xB78]
	0x031CCF3C BL 0x1C16CF4
	0x031CCF40 ADRP X0, 0xF53000
	0x031CCF44 LDR X0, [X0 + 0xB40]
	0x031CCF48 BL 0x1C16CF4
	0x031CCF4C ADRP X0, 0xF53000
	0x031CCF50 LDR X0, [X0 + 0xB60]
	0x031CCF54 BL 0x1C16CF4
	0x031CCF58 ADRP X0, 0xF53000
	0x031CCF5C LDR X0, [X0 + 0xB90]
	0x031CCF60 BL 0x1C16CF4
	0x031CCF64 ADRP X0, 0xF53000
	0x031CCF68 LDR X0, [X0 + 0xBC0]
	0x031CCF6C BL 0x1C16CF4
	0x031CCF70 ADRP X0, 0xF53000
	0x031CCF74 LDR X0, [X0 + 0xBA8]
	0x031CCF78 BL 0x1C16CF4
	0x031CCF7C ADRP X0, 0xF53000
	0x031CCF80 LDR X0, [X0 + 0xB38]
	0x031CCF84 BL 0x1C16CF4
	0x031CCF88 ADRP X0, 0xF53000
	0x031CCF8C LDR X0, [X0 + 0xB68]
	0x031CCF90 BL 0x1C16CF4
	0x031CCF94 ADRP X0, 0xF53000
	0x031CCF98 LDR X0, [X0 + 0xBA0]
	0x031CCF9C BL 0x1C16CF4
	0x031CCFA0 ADRP X0, 0xF53000
	0x031CCFA4 LDR X0, [X0 + 0xB50]
	0x031CCFA8 BL 0x1C16CF4
	0x031CCFAC ADRP X0, 0xF53000
	0x031CCFB0 LDR X0, [X0 + 0xB28]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x1210000
	007 Move W8, [X20+4084]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF2A000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+4084], W8
	018 Move X0, [X19+88]
	019 Compare X0, 0
	020 JumpIfEqual {60}
	021 Move X20, 0xF2A000
	022 Move X20, [X20+1448]
	023 Move X1, X31
	024 Call Transform.get_eulerAngles, X0
	025 Move [X19+96], S0
	026 Move [X19+104], S1
	027 Move [X19+104], S2
	028 Move X0, [X20]
	029 Move V9, [X19+108]
	030 Move V8, V0
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move V0, V8
	036 Move V1, V9
	037 Move X0, X31
	038 Call LeanTween.closestRot, V0, V1
	039 Move V2, [X19+100]
	040 Move V1, [X19+112]
	041 Move V8, V0
	042 Move X0, X31
	043 Move V0, V2
	044 Call LeanTween.closestRot, V0, V1
	045 Move V2, [X19+104]
	046 Move V1, [X19+116]
	047 Move V9, V0
	048 Move X0, X31
	049 Move V0, V2
	050 Call LeanTween.closestRot, V0, V1
	051 Move [X19+108], S8
	052 Move [X19+116], S9
	053 Move [X19+116], S0
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+16]
	057 Move D9, [X31+48]
	058 Move D8, [X31+56]
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <setRotate>b__118_1()

Disassembly:
	0x031CCFB4 BL 0x1C16CF4
	0x031CCFB8 ADRP X0, 0xF53000
	0x031CCFBC LDR X0, [X0 + 0xB58]
	0x031CCFC0 BL 0x1C16CF4
	0x031CCFC4 ADRP X0, 0xF53000
	0x031CCFC8 LDR X0, [X0 + 0xBB8]
	0x031CCFCC BL 0x1C16CF4
	0x031CCFD0 ADRP X0, 0xF53000
	0x031CCFD4 LDR X0, [X0 + 0xB30]
	0x031CCFD8 BL 0x1C16CF4
	0x031CCFDC ADRP X0, 0xF53000
	0x031CCFE0 LDR X0, [X0 + 0xBB0]
	0x031CCFE4 BL 0x1C16CF4
	0x031CCFE8 ADRP X0, 0xF53000
	0x031CCFEC LDR X0, [X0 + 0xBD0]
	0x031CCFF0 BL 0x1C16CF4
	0x031CCFF4 ADRP X0, 0xF53000
	0x031CCFF8 LDR X0, [X0 + 0xB48]
	0x031CCFFC BL 0x1C16CF4
	0x031CD000 ADRP X4, 0xF52000
	0x031CD004 ADRP X3, 0xF52000
	0x031CD008 ADRP X2, 0xF52000
	0x031CD00C ADRP X1, 0xF52000
	0x031CD010 ADRP X0, 0xF52000
	0x031CD014 ADRP X17, 0xF52000
	0x031CD018 ADRP X16, 0xF52000
	0x031CD01C ADRP X15, 0xF52000
	0x031CD020 ADRP X14, 0xF52000
	0x031CD024 ADRP X13, 0xF52000
	0x031CD028 ADRP X12, 0xF52000
	0x031CD02C ADRP X11, 0xF52000
	0x031CD030 ADRP X10, 0xF52000
	0x031CD034 LDR X4, [X4 + 0xB70]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x1210000
	005 Move W8, [X20+4085]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF54000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4085], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {43}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF54000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X0, [X19+88]
	031 Compare X0, 0
	032 JumpIfEqual {43}
	033 Move X8, [X8+184]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move S1, [X8+12]
	038 Move S2, [X8+16]
	039 Move V0, [X8+8]
	040 Move X30, [X31+32]
	041 Call Transform.set_eulerAngles, X0, X1
	042 Return 
	043 Call 0x1C17F20

Method: System.Void <setRotateLocal>b__119_0()

Disassembly:
	0x031CD038 LDR X3, [X3 + 0xB78]
	0x031CD03C LDR X2, [X2 + 0xB80]
	0x031CD040 LDR X1, [X1 + 0xB88]
	0x031CD044 LDR X0, [X0 + 0xB90]
	0x031CD048 LDR X17, [X17 + 0xB98]
	0x031CD04C LDR X16, [X16 + 0xBA0]
	0x031CD050 LDR X15, [X15 + 0xBA8]
	0x031CD054 LDR X14, [X14 + 0xBB0]
	0x031CD058 LDR X13, [X13 + 0xBB8]
	0x031CD05C LDR X12, [X12 + 0xBC0]
	0x031CD060 LDR X11, [X11 + 0xBC8]
	0x031CD064 LDR X10, [X10 + 0xBD0]
	0x031CD068 MOVZ W8, 0x1
	0x031CD06C STRB W8, [X20 + 0x4]
	0x031CD070 LDR X8, [X29]
	0x031CD074 LDR X9, [X19]
	0x031CD078 LDP X20, X19, [X31 + 0x50]
	0x031CD07C LDR X8, [X8 + 0xB8]
	0x031CD080 STR X9, [X8]
	0x031CD084 LDR X8, [X29]
	0x031CD088 LDR X9, [X28]
	0x031CD08C LDR X8, [X8 + 0xB8]
	0x031CD090 STR X9, [X8 + 0x8]
	0x031CD094 LDR X9, [X27]
	0x031CD098 LDP X28, X27, [X31 + 0x10]
	0x031CD09C STR X9, [X8 + 0x10]
	0x031CD0A0 LDR X9, [X26]
	0x031CD0A4 STR X9, [X8 + 0x18]
	0x031CD0A8 LDR X9, [X25]
	0x031CD0AC LDP X26, X25, [X31 + 0x20]
	0x031CD0B0 STR X9, [X8 + 0x20]
	0x031CD0B4 LDR X9, [X24]
	0x031CD0B8 STR X9, [X8 + 0x28]
	0x031CD0BC LDR X9, [X23]
	0x031CD0C0 LDP X24, X23, [X31 + 0x30]
	0x031CD0C4 STR X9, [X8 + 0x30]
	0x031CD0C8 LDR X9, [X22]
	0x031CD0CC STR X9, [X8 + 0x38]
	0x031CD0D0 LDR X9, [X21]
	0x031CD0D4 LDP X22, X21, [X31 + 0x40]
	0x031CD0D8 STR X9, [X8 + 0x40]
	0x031CD0DC LDR X9, [X4]
	0x031CD0E0 STR X9, [X8 + 0x48]
	0x031CD0E4 LDR X9, [X3]
	0x031CD0E8 STR X9, [X8 + 0x50]
	0x031CD0EC LDR X9, [X2]
	0x031CD0F0 STR X9, [X8 + 0x58]
	0x031CD0F4 LDR X9, [X1]
	0x031CD0F8 STR X9, [X8 + 0x60]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x120F000
	007 Move W8, [X20+4086]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xF29000
	014 Move X0, [X0+1448]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+4086], W8
	018 Move X0, [X19+88]
	019 Compare X0, 0
	020 JumpIfEqual {60}
	021 Move X20, 0xF29000
	022 Move X20, [X20+1448]
	023 Move X1, X31
	024 Call Transform.get_localEulerAngles, X0
	025 Move [X19+96], S0
	026 Move [X19+104], S1
	027 Move [X19+104], S2
	028 Move X0, [X20]
	029 Move V9, [X19+108]
	030 Move V8, V0
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move V0, V8
	036 Move V1, V9
	037 Move X0, X31
	038 Call LeanTween.closestRot, V0, V1
	039 Move V2, [X19+100]
	040 Move V1, [X19+112]
	041 Move V8, V0
	042 Move X0, X31
	043 Move V0, V2
	044 Call LeanTween.closestRot, V0, V1
	045 Move V2, [X19+104]
	046 Move V1, [X19+116]
	047 Move V9, V0
	048 Move X0, X31
	049 Move V0, V2
	050 Call LeanTween.closestRot, V0, V1
	051 Move [X19+108], S8
	052 Move [X19+116], S9
	053 Move [X19+116], S0
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+16]
	057 Move D9, [X31+48]
	058 Move D8, [X31+56]
	059 Return 
	060 Call 0x1C17F20

Method: System.Void <setRotateLocal>b__119_1()

Disassembly:
	0x031CD0FC LDR X9, [X0]
	0x031CD100 STR X9, [X8 + 0x68]
	0x031CD104 LDR X9, [X17]
	0x031CD108 STR X9, [X8 + 0x70]
	0x031CD10C LDR X9, [X16]
	0x031CD110 STR X9, [X8 + 0x78]
	0x031CD114 LDR X9, [X15]
	0x031CD118 STR X9, [X8 + 0x80]
	0x031CD11C LDR X15, [X14]
	0x031CD120 LDR X9, [X13]
	0x031CD124 STP X15, X9, [X8 + 0x88]
	0x031CD128 LDR X13, [X12]
	0x031CD12C LDR X9, [X11]
	0x031CD130 STP X13, X9, [X8 + 0x98]
	0x031CD134 LDR X9, [X10]
	0x031CD138 STR X9, [X8 + 0xA8]
	0x031CD13C LDP X29, X30, [X31], #0x60
	0x031CD140 RET
	0x031CD144 MOV X1, X31
	0x031CD148 B 0x3C36D2C
	0x031CD14C SUB X31, X31, 0x60
	0x031CD150 STR X30, [X31 + 0x20]
	0x031CD154 STP X24, X23, [X31 + 0x30]
	0x031CD158 STP X22, X21, [X31 + 0x40]
	0x031CD15C STP X20, X19, [X31 + 0x50]
	0x031CD160 ADRP X20, 0x120F000
	0x031CD164 LDRB W8, [X20 + 0x5]
	0x031CD168 MOV X19, X0
	0x031CD16C TBNZ X8, 0x0, 0x31CD1B4
	0x031CD170 ADRP X0, 0xF4E000
	0x031CD174 LDR X0, [X0 + 0xAA8]
	0x031CD178 BL 0x1C16CF4
	0x031CD17C ADRP X0, 0xF4E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x120F000
	005 Move W8, [X20+4087]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF53000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4087], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {43}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF53000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X0, [X19+88]
	031 Compare X0, 0
	032 JumpIfEqual {43}
	033 Move X8, [X8+184]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move S1, [X8+12]
	038 Move S2, [X8+16]
	039 Move V0, [X8+8]
	040 Move X30, [X31+32]
	041 Call Transform.set_localEulerAngles, X0, X1
	042 Return 
	043 Call 0x1C17F20

Method: System.Void <setScale>b__120_0()

Disassembly:
	0x031CD180 LDR X0, [X0 + 0xAB0]
	0x031CD184 BL 0x1C16CF4
	0x031CD188 ADRP X0, 0xF4E000
	0x031CD18C LDR X0, [X0 + 0xAB8]
	0x031CD190 BL 0x1C16CF4
	0x031CD194 ADRP X0, 0xF4E000
	0x031CD198 LDR X0, [X0 + 0xAC0]
	0x031CD19C BL 0x1C16CF4
	0x031CD1A0 ADRP X0, 0xF26000
	0x031CD1A4 LDR X0, [X0 + 0x598]
	0x031CD1A8 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+88]
	005 Compare X0, 0
	006 JumpIfEqual {15}
	007 Move X1, X31
	008 Call Transform.get_localScale, X0
	009 Move [X19+96], S0
	010 Move [X19+104], S1
	011 Move [X19+104], S2
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Call 0x1C17F20

Method: System.Void <setScale>b__120_1()

Disassembly:
	0x031CD1AC MOVZ W8, 0x1
	0x031CD1B0 STRB W8, [X20 + 0x5]
	0x031CD1B4 STP X31, X31, [X31 + 0x8]
	0x031CD1B8 STR X31, [X31 + 0x18]
	0x031CD1BC LDR X0, [X19 + 0x18]
	0x031CD1C0 CBZ X0, 0x31CD268
	0x031CD1C4 ADRP X8, 0xF4E000
	0x031CD1C8 LDR X8, [X8 + 0xAC0]
	0x031CD1CC ADRP X23, 0xF4E000
	0x031CD1D0 ADRP X24, 0xF26000
	0x031CD1D4 ADRP X22, 0xF4E000
	0x031CD1D8 LDR X1, [X8]
	0x031CD1DC LDR X23, [X23 + 0xAB0]
	0x031CD1E0 LDR X24, [X24 + 0x598]
	0x031CD1E4 LDR X22, [X22 + 0xAA8]
	0x031CD1E8 ADD X8, X31, 0x8
	0x031CD1EC BL 0x301CB58
	0x031CD1F0 LDR X1, [X23]
	0x031CD1F4 ADD X0, X31, 0x8
	0x031CD1F8 BL 0x2BC4350
	0x031CD1FC TBZ X0, 0x0, 0x31CD240
	0x031CD200 LDR X20, [X31 + 0x18]
	0x031CD204 CBZ X20, 0x31CD264
	0x031CD208 LDR X0, [X24]
	0x031CD20C LDR X21, [X20 + 0x20]
	0x031CD210 LDR W8, [X0 + 0xE0]
	0x031CD214 CBNZ W8, 0x31CD21C
	0x031CD218 BL 0x1C16DFC
	0x031CD21C MOV X0, X21
	0x031CD220 MOV X1, X31
	0x031CD224 MOV X2, X31
	0x031CD228 BL 0x3C3883C
	0x031CD22C TBZ X0, 0x0, 0x31CD1F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x120F000
	005 Move W8, [X20+4088]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xF53000
	012 Move X0, [X0+872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+4088], W8
	016 Move X8, [X19+160]
	017 Compare X8, 0
	018 JumpIfEqual {43}
	019 Move X9, [X8+24]
	020 Move X0, [X8+64]
	021 Move X1, [X8+40]
	022 Move X20, 0xF53000
	023 Move X20, [X20+872]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X8, [X20]
	026 Move X9, [X8+184]
	027 Move [X9+8], S0
	028 Move [X9+16], S1
	029 Move [X9+16], S2
	030 Move X0, [X19+88]
	031 Compare X0, 0
	032 JumpIfEqual {43}
	033 Move X8, [X8+184]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move S1, [X8+12]
	038 Move S2, [X8+16]
	039 Move V0, [X8+8]
	040 Move X30, [X31+32]
	041 Call Transform.set_localScale, X0, X1
	042 Return 
	043 Call 0x1C17F20

Method: System.Void <setGUIMove>b__121_0()

Disassembly:
	0x031CD230 MOV X0, X20
	0x031CD234 MOV X1, X19
	0x031CD238 BL 0x31CD2E0
	0x031CD23C B 0x31CD1F0
	0x031CD240 LDR X1, [X22]
	0x031CD244 ADD X0, X31, 0x8
	0x031CD248 BL 0x2BC434C
	0x031CD24C LDP X20, X19, [X31 + 0x50]
	0x031CD250 LDP X22, X21, [X31 + 0x40]
	0x031CD254 LDP X24, X23, [X31 + 0x30]
	0x031CD258 LDR X30, [X31 + 0x20]
	0x031CD25C ADD X31, X31, 0x60
	0x031CD260 RET
	0x031CD264 BL 0x1C16F20
	0x031CD268 BL 0x1C16F20
	0x031CD26C B 0x31CD27C
	0x031CD270 B 0x31CD27C
	0x031CD274 B 0x31CD27C
	0x031CD278 B 0x31CD27C
	0x031CD27C MOV X19, X0
	0x031CD280 CMP W1, 0x1
	0x031CD284 B.NE 0x31CD2B0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, [X0+232]
	005 Compare X8, 0
	006 JumpIfEqual {29}
	007 Move X19, X0
	008 Move X0, [X8+120]
	009 Compare X0, 0
	010 JumpIfEqual {29}
	011 Move X1, X31
	012 Call LTRect.get_rect, X0
	013 Move X8, [X19+232]
	014 Compare X8, 0
	015 JumpIfEqual {29}
	016 Move X0, [X8+120]
	017 Compare X0, 0
	018 JumpIfEqual {29}
	019 Move X1, X31
	020 Move V8, V0
	021 Call LTRect.get_rect, X0
	022 Move [X19+96], S8
	023 Move [X19+104], S1
	024 Move [X19+104], W31
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Move V8, [X31+32]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void <setGUIMove>b__121_1()

Disassembly:
	0x031CD288 MOV X0, X19
	0x031CD28C BL 0x3EB1AD0
	0x031CD290 LDR X20, [X0]
	0x031CD294 BL 0x3EB1AE0
	0x031CD298 LDR X1, [X22]
	0x031CD29C ADD X0, X31, 0x8
	0x031CD2A0 BL 0x2BC434C
	0x031CD2A4 CBZ X20, 0x31CD24C
	0x031CD2A8 MOV X0, X20
	0x031CD2AC BL 0x1C16F18
	0x031CD2B0 MOV X20, X31
	0x031CD2B4 B 0x31CD2BC
	0x031CD2B8 MOV X19, X0
	0x031CD2BC LDR X1, [X22]
	0x031CD2C0 ADD X0, X31, 0x8
	0x031CD2C4 BL 0x2BC434C
	0x031CD2C8 CBNZ X20, 0x31CD2D4
	0x031CD2CC MOV X0, X19
	0x031CD2D0 BL 0x1D2C690
	0x031CD2D4 MOV X0, X20
	0x031CD2D8 BL 0x1C16F18
	0x031CD2DC BL 0x1990590
	0x031CD2E0 STR X30, [X31 - 0x30]!
	0x031CD2E4 STP X22, X21, [X31 + 0x10]
	0x031CD2E8 STP X20, X19, [X31 + 0x20]
	0x031CD2EC ADRP X22, 0x120F000
	0x031CD2F0 ADRP X21, 0xF26000
	0x031CD2F4 LDRB W8, [X22 + 0x8]
	0x031CD2F8 LDR X21, [X21 + 0x598]
	0x031CD2FC MOV X19, X1
	0x031CD300 MOV X20, X0
	0x031CD304 TBNZ X8, 0x0, 0x31CD334
	0x031CD308 ADRP X0, 0xF26000
	0x031CD30C LDR X0, [X0 + 0xA28]
	0x031CD310 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+160]
	008 Compare X8, 0
	009 JumpIfEqual {46}
	010 Move X20, X0
	011 Move X9, [X8+24]
	012 Move X0, [X8+64]
	013 Move X1, [X8+40]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X20+232]
	016 Compare X8, 0
	017 JumpIfEqual {46}
	018 Move X19, [X8+120]
	019 Compare X19, 0
	020 JumpIfEqual {46}
	021 Move X0, X19
	022 Move X1, X31
	023 Move V8, V0
	024 Move V9, V1
	025 Call LTRect.get_rect, X0
	026 Move X8, [X20+232]
	027 Compare X8, 0
	028 JumpIfEqual {46}
	029 Move X0, [X8+120]
	030 Compare X0, 0
	031 JumpIfEqual {46}
	032 Move X1, X31
	033 Move V10, V2
	034 Call LTRect.get_rect, X0
	035 Move [X19+16], S8
	036 Move [X19+24], S9
	037 Move [X19+24], S10
	038 Move [X19+32], S3
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+24]
	042 Move D9, [X31+8]
	043 Move D8, [X31+16]
	044 Move V10, [X31+48]
	045 Return 
	046 Call 0x1C17F20

Method: System.Void <setGUIMoveMargin>b__122_0()

Disassembly:
	0x031CD314 ADRP X0, 0xF26000
	0x031CD318 LDR X0, [X0 + 0x598]
	0x031CD31C BL 0x1C16CF4
	0x031CD320 ADRP X0, 0xF52000
	0x031CD324 LDR X0, [X0 + 0xBD8]
	0x031CD328 BL 0x1C16CF4
	0x031CD32C MOVZ W8, 0x1
	0x031CD330 STRB W8, [X22 + 0x8]
	0x031CD334 LDR X0, [X21]
	0x031CD338 LDR X21, [X20 + 0x20]
	0x031CD33C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move X8, [X8+120]
	006 Compare X8, 0
	007 JumpIfEqual {13}
	008 Move V0, [X8+48]
	009 Move [X0+104], W31
	010 Move [X0+96], D0
	011 Move X30, [X31+16]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void <setGUIMoveMargin>b__122_1()

Disassembly:
	0x031CD340 CBNZ W8, 0x31CD348
	0x031CD344 BL 0x1C16DFC
	0x031CD348 MOV X0, X21
	0x031CD34C MOV X1, X31
	0x031CD350 MOV X2, X31
	0x031CD354 BL 0x3C354F8
	0x031CD358 TBZ X0, 0x0, 0x31CD394
	0x031CD35C ADRP X8, 0xF26000
	0x031CD360 LDR X8, [X8 + 0xA28]
	0x031CD364 ADRP X19, 0xF52000
	0x031CD368 LDR X0, [X8]
	0x031CD36C LDR W8, [X0 + 0xE0]
	0x031CD370 LDR X19, [X19 + 0xBD8]
	0x031CD374 CBNZ W8, 0x31CD37C
	0x031CD378 BL 0x1C16DFC
	0x031CD37C LDR X0, [X19]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+160]
	004 Compare X8, 0
	005 JumpIfEqual {22}
	006 Move X19, X0
	007 Move X9, [X8+24]
	008 Move X0, [X8+64]
	009 Move X1, [X8+40]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X8, [X19+232]
	012 Compare X8, 0
	013 JumpIfEqual {22}
	014 Move X8, [X8+120]
	015 Compare X8, 0
	016 JumpIfEqual {22}
	017 Move [X8+48], S0
	018 Move [X8+56], S1
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return 
	022 Call 0x1C17F20

Method: System.Void <setGUIScale>b__123_0()

Disassembly:
	0x031CD380 LDP X20, X19, [X31 + 0x20]
	0x031CD384 LDP X22, X21, [X31 + 0x10]
	0x031CD388 MOV X1, X31
	0x031CD38C LDR X30, [X31], #0x30
	0x031CD390 B 0x3C0649C
	0x031CD394 STR X19, [X20 + 0x20]
	0x031CD398 LDP X20, X19, [X31 + 0x20]
	0x031CD39C LDP X22, X21, [X31 + 0x10]
	0x031CD3A0 LDR X30, [X31], #0x30
	0x031CD3A4 RET
	0x031CD3A8 SUB X31, X31, 0x80
	0x031CD3AC STP X30, X25, [X31 + 0x40]
	0x031CD3B0 STP X24, X23, [X31 + 0x50]
	0x031CD3B4 STP X22, X21, [X31 + 0x60]
	0x031CD3B8 STP X20, X19, [X31 + 0x70]
	0x031CD3BC ADRP X22, 0x120F000
	0x031CD3C0 LDRB W8, [X22 + 0x6]
	0x031CD3C4 MOV X19, X2
	0x031CD3C8 MOV X20, X1
	0x031CD3CC MOV X21, X0
	0x031CD3D0 TBNZ X8, 0x0, 0x31CD418
	0x031CD3D4 ADRP X0, 0xF2C000

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, [X0+232]
	005 Compare X8, 0
	006 JumpIfEqual {29}
	007 Move X19, X0
	008 Move X0, [X8+120]
	009 Compare X0, 0
	010 JumpIfEqual {29}
	011 Move X1, X31
	012 Call LTRect.get_rect, X0
	013 Move X8, [X19+232]
	014 Compare X8, 0
	015 JumpIfEqual {29}
	016 Move X0, [X8+120]
	017 Compare X0, 0
	018 JumpIfEqual {29}
	019 Move X1, X31
	020 Move V8, V2
	021 Call LTRect.get_rect, X0
	022 Move [X19+96], S8
	023 Move [X19+104], S3
	024 Move [X19+104], W31
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Move V8, [X31+32]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void <setGUIScale>b__123_1()

Disassembly:
	0x031CD3D8 LDR X0, [X0 + 0xB38]
	0x031CD3DC BL 0x1C16CF4
	0x031CD3E0 ADRP X0, 0xF2C000
	0x031CD3E4 LDR X0, [X0 + 0xB40]
	0x031CD3E8 BL 0x1C16CF4
	0x031CD3EC ADRP X0, 0xF2C000
	0x031CD3F0 LDR X0, [X0 + 0xB48]
	0x031CD3F4 BL 0x1C16CF4
	0x031CD3F8 ADRP X0, 0xF2C000
	0x031CD3FC LDR X0, [X0 + 0xB58]
	0x031CD400 BL 0x1C16CF4
	0x031CD404 ADRP X0, 0xF26000
	0x031CD408 LDR X0, [X0 + 0x598]
	0x031CD40C BL 0x1C16CF4
	0x031CD410 MOVZ W8, 0x1
	0x031CD414 STRB W8, [X22 + 0x6]
	0x031CD418 STP X31, X31, [X31 + 0x20]
	0x031CD41C STR X31, [X31 + 0x30]
	0x031CD420 LDR X0, [X21 + 0x20]
	0x031CD424 CBZ X0, 0x31CD558
	0x031CD428 ADRP X8, 0xF2C000
	0x031CD42C LDR X8, [X8 + 0xB58]
	0x031CD430 ADRP X23, 0xF2C000
	0x031CD434 ADRP X24, 0xF26000
	0x031CD438 ADRP X22, 0xF2C000
	0x031CD43C LDR X1, [X8]
	0x031CD440 LDR X23, [X23 + 0xB40]
	0x031CD444 LDR X24, [X24 + 0x598]
	0x031CD448 LDR X22, [X22 + 0xB38]
	0x031CD44C ADD X8, X31, 0x8
	0x031CD450 BL 0x301CB58
	0x031CD454 LDUR V0, [X31 + 0x8]
	0x031CD458 LDR X8, [X31 + 0x18]
	0x031CD45C STR V0, [X31 + 0x2]
	0x031CD460 STR X8, [X31 + 0x30]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X8, [X0+160]
	008 Compare X8, 0
	009 JumpIfEqual {46}
	010 Move X20, X0
	011 Move X9, [X8+24]
	012 Move X0, [X8+64]
	013 Move X1, [X8+40]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X20+232]
	016 Compare X8, 0
	017 JumpIfEqual {46}
	018 Move X19, [X8+120]
	019 Compare X19, 0
	020 JumpIfEqual {46}
	021 Move X0, X19
	022 Move X1, X31
	023 Move V8, V0
	024 Move V9, V1
	025 Call LTRect.get_rect, X0
	026 Move X8, [X20+232]
	027 Compare X8, 0
	028 JumpIfEqual {46}
	029 Move X0, [X8+120]
	030 Compare X0, 0
	031 JumpIfEqual {46}
	032 Move X1, X31
	033 Move V10, V0
	034 Call LTRect.get_rect, X0
	035 Move [X19+16], S10
	036 Move [X19+24], S1
	037 Move [X19+24], S8
	038 Move [X19+32], S9
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+24]
	042 Move D9, [X31+8]
	043 Move D8, [X31+16]
	044 Move V10, [X31+48]
	045 Return 
	046 Call 0x1C17F20

Method: System.Void <setGUIAlpha>b__124_0()

Disassembly:
	0x031CD464 LDR X1, [X23]
	0x031CD468 ADD X0, X31, 0x20
	0x031CD46C BL 0x2BC4350
	0x031CD470 TBZ X0, 0x0, 0x31CD524
	0x031CD474 LDR X25, [X31 + 0x30]
	0x031CD478 CBZ X25, 0x31CD554
	0x031CD47C LDR X0, [X24]
	0x031CD480 LDR X21, [X25 + 0x18]
	0x031CD484 LDR W8, [X0 + 0xE0]
	0x031CD488 CBNZ W8, 0x31CD490

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+232]
	003 Compare X8, 0
	004 JumpIfEqual {12}
	005 Move X8, [X8+120]
	006 Compare X8, 0
	007 JumpIfEqual {12}
	008 Move V0, [X8+32]
	009 Move [X0+96], S0
	010 Move X30, [X31+16]
	011 Return 
	012 Call 0x1C17F20

Method: System.Void <setGUIAlpha>b__124_1()

Disassembly:
	0x031CD48C BL 0x1C16DFC
	0x031CD490 MOV X0, X21
	0x031CD494 MOV X1, X20
	0x031CD498 MOV X2, X31
	0x031CD49C BL 0x3C3883C
	0x031CD4A0 TBZ X0, 0x0, 0x31CD4CC
	0x031CD4A4 LDR X0, [X24]
	0x031CD4A8 LDR X21, [X25 + 0x20]
	0x031CD4AC LDR W8, [X0 + 0xE0]
	0x031CD4B0 CBNZ W8, 0x31CD4B8
	0x031CD4B4 BL 0x1C16DFC
	0x031CD4B8 MOV X0, X21
	0x031CD4BC MOV X1, X19
	0x031CD4C0 MOV X2, X31
	0x031CD4C4 BL 0x3C3883C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X9, [X0+232]
	004 Compare X9, 0
	005 JumpIfEqual {20}
	006 Move X8, [X0+160]
	007 Compare X8, 0
	008 JumpIfEqual {20}
	009 Move X19, [X9+120]
	010 Move X9, [X8+24]
	011 Move X0, [X8+64]
	012 Move X1, [X8+40]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Compare X19, 0
	015 JumpIfEqual {20}
	016 Move [X19+32], S0
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Call 0x1C17F20

Method: System.Void <setGUIRotate>b__125_0()

Disassembly:
	0x031CD4C8 TBNZ X0, 0x0, 0x31CD51C
	0x031CD4CC LDR X0, [X24]
	0x031CD4D0 LDR X21, [X25 + 0x18]
	0x031CD4D4 LDR W8, [X0 + 0xE0]
	0x031CD4D8 CBNZ W8, 0x31CD4E0
	0x031CD4DC BL 0x1C16DFC
	0x031CD4E0 MOV X0, X21
	0x031CD4E4 MOV X1, X19
	0x031CD4E8 MOV X2, X31
	0x031CD4EC BL 0x3C3883C
	0x031CD4F0 TBZ X0, 0x0, 0x31CD464
	0x031CD4F4 LDR X0, [X24]
	0x031CD4F8 LDR X21, [X25 + 0x20]
	0x031CD4FC LDR W8, [X0 + 0xE0]
	0x031CD500 CBNZ W8, 0x31CD508
	0x031CD504 BL 0x1C16DFC
	0x031CD508 MOV X0, X21
	0x031CD50C MOV X1, X20
	0x031CD510 MOV X2, X31
	0x031CD514 BL 0x3C3883C
	0x031CD518 TBZ X0, 0x0, 0x31CD464

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+232]
	004 Compare X8, 0
	005 JumpIfEqual {28}
	006 Move X19, X0
	007 Move X0, [X8+120]
	008 Compare X0, 0
	009 JumpIfEqual {28}
	010 Move W9, [X0+72]
	011 Compare W9, 0
	012 JumpIfNotEqual {20}
	013 Move W8, 1
	014 Move X1, X31
	015 Move [X0+72], W8
	016 Call LTRect.resetForRotation, X0
	017 Move X8, [X19+232]
	018 Compare X8, 0
	019 JumpIfEqual {28}
	020 Move X8, [X8+120]
	021 Compare X8, 0
	022 JumpIfEqual {28}
	023 Move V0, [X8+36]
	024 Move [X19+96], S0
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 
	028 Call 0x1C17F20

Method: System.Void <setGUIRotate>b__125_1()

Disassembly:
	0x031CD51C MOVZ W19, 0x5
	0x031CD520 B 0x31CD528
	0x031CD524 MOVZ W19, 0x6
	0x031CD528 LDR X1, [X22]
	0x031CD52C ADD X0, X31, 0x20
	0x031CD530 BL 0x2BC434C
	0x031CD534 CMP W19, 0x5
	0x031CD538 LDP X20, X19, [X31 + 0x70]
	0x031CD53C LDP X22, X21, [X31 + 0x60]
	0x031CD540 LDP X24, X23, [X31 + 0x50]
	0x031CD544 LDP X30, X25, [X31 + 0x40]
	0x031CD548 CSET W0, NE
	0x031CD54C ADD X31, X31, 0x80
	0x031CD550 RET
	0x031CD554 BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X9, [X0+232]
	004 Compare X9, 0
	005 JumpIfEqual {20}
	006 Move X8, [X0+160]
	007 Compare X8, 0
	008 JumpIfEqual {20}
	009 Move X19, [X9+120]
	010 Move X9, [X8+24]
	011 Move X0, [X8+64]
	012 Move X1, [X8+40]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Compare X19, 0
	015 JumpIfEqual {20}
	016 Move [X19+36], S0
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 
	020 Call 0x1C17F20

Method: System.Void <setDelayedSound>b__126_0()

Disassembly:
	0x031CD558 BL 0x1C16F20
	0x031CD55C B 0x31CD580
	0x031CD560 B 0x31CD580

ISIL:
	001 Move W8, 1
	002 Move [X0+22], W8
	003 Return 

