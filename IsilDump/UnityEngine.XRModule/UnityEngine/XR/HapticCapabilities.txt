Type: UnityEngine.XR.HapticCapabilities

Method: System.UInt32 get_numChannels()

Disassembly:
	0x03E63BF0 LDR X8, [X19]
	0x03E63BF4 LDR X9, [X31 + 0x40]

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Boolean get_supportsImpulse()

Disassembly:
	0x03E63BF8 ADD X0, X31, 0x38
	0x03E63BFC LDR X8, [X8 + 0xB8]

ISIL:
	001 Move W0, [X0+4]
	002 Return X0

Method: System.Boolean get_supportsBuffer()

Disassembly:
	0x03E63C00 STR X9, [X8 + 0x198]
	0x03E63C04 ADRP X8, 0x309000

ISIL:
	001 Move W0, [X0+5]
	002 Return X0

Method: System.UInt32 get_bufferFrequencyHz()

Disassembly:
	0x03E63C08 LDR X8, [X8 + 0xF0]
	0x03E63C0C LDR X2, [X20]

ISIL:
	001 Move W0, [X0+8]
	002 Return X0

Method: System.UInt32 get_bufferMaxSize()

Disassembly:
	0x03E63C10 STR X31, [X31 + 0x38]
	0x03E63C14 LDR X1, [X8]

ISIL:
	001 Move W0, [X0+12]
	002 Return X0

Method: System.UInt32 get_bufferOptimalSize()

Disassembly:
	0x03E63C18 BL 0x2E0DBC8
	0x03E63C1C LDR X8, [X19]

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03E63C20 LDR X9, [X31 + 0x38]
	0x03E63C24 ADD X0, X31, 0x30
	0x03E63C28 LDR X8, [X8 + 0xB8]
	0x03E63C2C STR X9, [X8 + 0x1A0]
	0x03E63C30 ADRP X8, 0x309000
	0x03E63C34 LDR X8, [X8 + 0x80]
	0x03E63C38 LDR X2, [X20]
	0x03E63C3C STR X31, [X31 + 0x30]
	0x03E63C40 LDR X1, [X8]
	0x03E63C44 BL 0x2E0DBC8
	0x03E63C48 LDR X8, [X19]
	0x03E63C4C LDR X9, [X31 + 0x30]
	0x03E63C50 ADD X0, X31, 0x28
	0x03E63C54 LDR X8, [X8 + 0xB8]
	0x03E63C58 STR X9, [X8 + 0x1A8]
	0x03E63C5C ADRP X8, 0x309000
	0x03E63C60 LDR X8, [X8 + 0x20]
	0x03E63C64 LDR X2, [X20]
	0x03E63C68 STR X31, [X31 + 0x28]
	0x03E63C6C LDR X1, [X8]
	0x03E63C70 BL 0x2E0DBC8
	0x03E63C74 LDR X8, [X19]
	0x03E63C78 LDR X9, [X31 + 0x28]
	0x03E63C7C ADD X0, X31, 0x20
	0x03E63C80 LDR X8, [X8 + 0xB8]
	0x03E63C84 STR X9, [X8 + 0x1B0]
	0x03E63C88 ADRP X8, 0x309000
	0x03E63C8C LDR X8, [X8 + 0x10]
	0x03E63C90 LDR X2, [X20]
	0x03E63C94 STR X31, [X31 + 0x20]
	0x03E63C98 LDR X1, [X8]
	0x03E63C9C BL 0x2E0DBC8
	0x03E63CA0 LDR X8, [X19]
	0x03E63CA4 LDR X9, [X31 + 0x20]
	0x03E63CA8 ADD X0, X31, 0x18
	0x03E63CAC LDR X8, [X8 + 0xB8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x586000
	007 Move W8, [X21+2872]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x309000
	015 Move X0, [X0+3968]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2872], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x309000
	022 Move X8, [X8+3968]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move V0, [X0]
	030 Move W8, [X0+16]
	031 Add X1, X31, 0
	032 Move X0, X19
	033 Move [X31], V0
	034 Move [X31+16], W8
	035 Call HapticCapabilities.Equals, X0, X1
	036 Move X20, [X31+48]
	037 Move X19, [X31+56]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 And W0, W0, 1
	041 Add X31, X31, 64
	042 Return X0

Method: System.Boolean Equals(UnityEngine.XR.HapticCapabilities other)

Disassembly:
	0x03E63CB0 STR X9, [X8 + 0x1B8]
	0x03E63CB4 ADRP X8, 0x2FB000
	0x03E63CB8 LDR X8, [X8 + 0x168]
	0x03E63CBC LDR X2, [X21]
	0x03E63CC0 STR X31, [X31 + 0x18]
	0x03E63CC4 LDR X1, [X8]
	0x03E63CC8 BL 0x2E0D4D8
	0x03E63CCC LDR X8, [X19]
	0x03E63CD0 LDR X9, [X31 + 0x18]
	0x03E63CD4 ADD X0, X31, 0x10
	0x03E63CD8 LDR X8, [X8 + 0xB8]
	0x03E63CDC STR X9, [X8 + 0x1C0]
	0x03E63CE0 ADRP X8, 0x2FB000
	0x03E63CE4 LDR X8, [X8 + 0x170]
	0x03E63CE8 LDR X2, [X20]
	0x03E63CEC STR X31, [X31 + 0x10]
	0x03E63CF0 LDR X1, [X8]
	0x03E63CF4 BL 0x2E0DBC8
	0x03E63CF8 LDR X8, [X19]
	0x03E63CFC LDR X9, [X31 + 0x10]
	0x03E63D00 ADD X0, X31, 0x8
	0x03E63D04 LDR X8, [X8 + 0xB8]
	0x03E63D08 STR X9, [X8 + 0x1C8]
	0x03E63D0C ADRP X8, 0x2FB000
	0x03E63D10 LDR X8, [X8 + 0x178]
	0x03E63D14 LDR X2, [X20]
	0x03E63D18 STR X31, [X31 + 0x8]
	0x03E63D1C LDR X1, [X8]
	0x03E63D20 BL 0x2E0DBC8
	0x03E63D24 LDR X8, [X19]
	0x03E63D28 LDR X9, [X31 + 0x8]
	0x03E63D2C LDR X8, [X8 + 0xB8]
	0x03E63D30 STR X9, [X8 + 0x1D0]
	0x03E63D34 ADD X31, X31, 0x1E0
	0x03E63D38 LDP X20, X19, [X31 + 0x50]

ISIL:
	001 Move W8, [X0]
	002 Move W9, [X1]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move W8, [X0+4]
	005 Move W9, [X1+4]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 NotImplemented "Instruction CMP not yet implemented."
	009 NotImplemented "Instruction CSET not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move W8, [X0+5]
	012 Move W9, [X1+5]
	013 NotImplemented "Instruction CMP not yet implemented."
	014 NotImplemented "Instruction CSET not yet implemented."
	015 NotImplemented "Instruction CMP not yet implemented."
	016 NotImplemented "Instruction CSET not yet implemented."
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W8, [X0+8]
	019 Move W9, [X1+8]
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move W8, [X0+12]
	022 Move W9, [X1+12]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move W8, [X0+16]
	025 Move W9, [X1+16]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CSET not yet implemented."
	028 Return X0
	029 Move W0, W31
	030 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03E63D3C LDP X22, X21, [X31 + 0x40]
	0x03E63D40 LDP X24, X23, [X31 + 0x30]
	0x03E63D44 LDP X26, X25, [X31 + 0x20]
	0x03E63D48 LDP X28, X27, [X31 + 0x10]
	0x03E63D4C LDP X29, X30, [X31], #0x60
	0x03E63D50 RET
	0x03E63D54 MOVZ W8, 0x1
	0x03E63D58 STR X1, [X0]
	0x03E63D5C STRB W8, [X0 + 0x8]
	0x03E63D60 RET
	0x03E63D64 LDRB W8, [X0 + 0x8]
	0x03E63D68 CBZ W8, 0x3E63D74
	0x03E63D6C LDR X0, [X0]
	0x03E63D70 RET
	0x03E63D74 MOVN X0, 0x0
	0x03E63D78 RET
	0x03E63D7C STR X30, [X31 - 0x20]!
	0x03E63D80 STP X20, X19, [X31 + 0x10]
	0x03E63D84 LDRB W8, [X0 + 0x8]
	0x03E63D88 CBZ W8, 0x3E63DC8
	0x03E63D8C LDR X19, [X0]
	0x03E63D90 ADDS X31, X19, 0x1
	0x03E63D94 B.EQ 0x3E63DC8
	0x03E63D98 ADRP X20, 0x585000
	0x03E63D9C LDR X1, [X20 + 0xBA0]
	0x03E63DA0 CBNZ X1, 0x3E63DB8
	0x03E63DA4 ADRP X0, 0xFFFFFFFFFCCB6000
	0x03E63DA8 ADD X0, X0, 0x86C
	0x03E63DAC BL 0x1C16CB8
	0x03E63DB0 MOV X1, X0
	0x03E63DB4 STR X0, [X20 + 0xBA0]
	0x03E63DB8 MOV X0, X19
	0x03E63DBC LDP X20, X19, [X31 + 0x10]
	0x03E63DC0 LDR X30, [X31], #0x20
	0x03E63DC4 BR X1
	0x03E63DC8 LDP X20, X19, [X31 + 0x10]
	0x03E63DCC MOV W0, W31
	0x03E63DD0 LDR X30, [X31], #0x20
	0x03E63DD4 RET
	0x03E63DD8 LDRB W8, [X0 + 0x8]
	0x03E63DDC CBZ W8, 0x3E63DF0
	0x03E63DE0 LDR X8, [X0]
	0x03E63DE4 ADDS X31, X8, 0x1
	0x03E63DE8 CSET W0, NE
	0x03E63DEC RET
	0x03E63DF0 MOV W0, W31
	0x03E63DF4 RET
	0x03E63DF8 STR X30, [X31 - 0x20]!
	0x03E63DFC STP X20, X19, [X31 + 0x10]
	0x03E63E00 ADRP X20, 0x585000
	0x03E63E04 LDR X1, [X20 + 0xBA0]
	0x03E63E08 MOV X19, X0
	0x03E63E0C CBNZ X1, 0x3E63E24
	0x03E63E10 ADRP X0, 0xFFFFFFFFFCCB6000
	0x03E63E14 ADD X0, X0, 0x86C
	0x03E63E18 BL 0x1C16CB8
	0x03E63E1C MOV X1, X0
	0x03E63E20 STR X0, [X20 + 0xBA0]
	0x03E63E24 MOV X0, X19
	0x03E63E28 LDP X20, X19, [X31 + 0x10]
	0x03E63E2C LDR X30, [X31], #0x20
	0x03E63E30 BR X1
	0x03E63E34 STR X30, [X31 - 0x20]!
	0x03E63E38 STP X20, X19, [X31 + 0x10]
	0x03E63E3C LDRB W8, [X0 + 0x8]
	0x03E63E40 CBZ W8, 0x3E63E80

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x586000
	009 Move X20, 0x291000
	010 Move W8, [X21+2873]
	011 Move X20, [X20+2904]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x291000
	018 Move X0, [X0+2904]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2873], W8
	022 Move [X31+8], W31
	023 Move W8, [X19]
	024 Add X0, X31, 12
	025 Move X1, X31
	026 Move [X31+12], W8
	027 Call UInt32.GetHashCode, X0
	028 Move W9, [X19+4]
	029 Move X8, [X20]
	030 Move W20, W0
	031 Move [X31+8], W9
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Add X0, X31, 8
	038 Move X1, X31
	039 Call Boolean.GetHashCode, X0
	040 Move W8, [X19+5]
	041 Move W21, W0
	042 Add X0, X31, 8
	043 Move X1, X31
	044 Move [X31+8], W8
	045 Call Boolean.GetHashCode, X0
	046 Move W8, [X19+8]
	047 Move W22, W0
	048 Add X0, X31, 12
	049 Move X1, X31
	050 Move [X31+12], W8
	051 Call UInt32.GetHashCode, X0
	052 Move W8, [X19+12]
	053 Move W23, W0
	054 Add X0, X31, 12
	055 Move X1, X31
	056 Move [X31+12], W8
	057 Call UInt32.GetHashCode, X0
	058 Move W8, [X19+16]
	059 Move W24, W0
	060 Add X0, X31, 12
	061 Move X1, X31
	062 Move [X31+12], W8
	063 Call UInt32.GetHashCode, X0
	064 Xor W8, W20, W21
	065 Xor W8, W8, W22
	066 Xor W8, W8, W23
	067 Xor W8, W8, W24
	068 Move X20, [X31+48]
	069 Move X19, [X31+56]
	070 Move X22, [X31+32]
	071 Move X21, [X31+40]
	072 Move X24, [X31+16]
	073 Move X23, [X31+24]
	074 Xor W0, W8, W0
	075 Move X30, [X31+64]
	076 Return X0

