Type: UnityEngine.XR.InputDevice

Method: System.Void .ctor(System.UInt64 deviceId)

Disassembly:
	0x03E64D54 ADRP X21, 0x584000
	0x03E64D58 LDRB W8, [X21 + 0xB48]
	0x03E64D5C MOV X19, X1
	0x03E64D60 MOV W20, W0

ISIL:
	001 Move W8, 1
	002 Move [X0], X1
	003 Move [X0+8], W8
	004 Return 

Method: System.UInt64 get_deviceId()

Disassembly:
	0x03E64D64 TBNZ X8, 0x0, 0x3E64DDC
	0x03E64D68 ADRP X0, 0x2B7000
	0x03E64D6C LDR X0, [X0 + 0x280]
	0x03E64D70 BL 0x1C16CF4
	0x03E64D74 ADRP X0, 0x2B7000
	0x03E64D78 LDR X0, [X0 + 0x288]

ISIL:
	001 Move W8, [X0+8]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move X0, [X0]
	005 Return X0
	006 Move TEMP, 0
	007 Not TEMP
	008 Move X0, TEMP
	009 Return X0

Method: System.Boolean get_isValid()

Disassembly:
	0x03E64D7C BL 0x1C16CF4
	0x03E64D80 ADRP X0, 0x2B7000
	0x03E64D84 LDR X0, [X0 + 0x290]
	0x03E64D88 BL 0x1C16CF4
	0x03E64D8C ADRP X0, 0x308000
	0x03E64D90 LDR X0, [X0 + 0x1A0]
	0x03E64D94 BL 0x1C16CF4
	0x03E64D98 ADRP X0, 0x2F9000
	0x03E64D9C LDR X0, [X0 + 0x328]
	0x03E64DA0 BL 0x1C16CF4
	0x03E64DA4 ADRP X0, 0x2F9000
	0x03E64DA8 LDR X0, [X0 + 0x310]
	0x03E64DAC BL 0x1C16CF4
	0x03E64DB0 ADRP X0, 0x2B7000
	0x03E64DB4 LDR X0, [X0 + 0x298]
	0x03E64DB8 BL 0x1C16CF4
	0x03E64DBC ADRP X0, 0x2B7000
	0x03E64DC0 LDR X0, [X0 + 0x148]
	0x03E64DC4 BL 0x1C16CF4
	0x03E64DC8 ADRP X0, 0x2B7000
	0x03E64DCC LDR X0, [X0 + 0x160]
	0x03E64DD0 BL 0x1C16CF4
	0x03E64DD4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+8]
	005 Compare W8, 0
	006 JumpIfEqual {23}
	007 Move X19, [X0]
	008 Add X31, X19, 1
	009 Move X20, 0x585000
	010 Move X1, [X20+2976]
	011 Compare X1, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -53780480
	014 Add X0, X0, 2156
	015 Call 0x1C17CB8
	016 Move X1, X0
	017 Move [X20+2976], X0
	018 Move X0, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 CallNoReturn X1
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move W0, W31
	026 Move X30, [X31+32]
	027 Return X0

Method: UnityEngine.XR.InputDeviceCharacteristics get_characteristics()

Disassembly:
	0x03E64E34 LDR X9, [X8 + 0xB8]
	0x03E64E38 ADRP X23, 0x584000
	0x03E64E3C LDR X8, [X23 + 0xB50]
	0x03E64E40 LDR X21, [X9]
	0x03E64E44 CBNZ X8, 0x3E64E5C
	0x03E64E48 ADRP X0, 0xFFFFFFFFFCC95000
	0x03E64E4C ADD X0, X0, 0xFA1
	0x03E64E50 BL 0x1C16CB8
	0x03E64E54 MOV X8, X0
	0x03E64E58 STR X0, [X23 + 0xB50]
	0x03E64E5C MOV X0, X21
	0x03E64E60 BLR X8
	0x03E64E64 LDR W8, [X19 + 0x1C]
	0x03E64E68 ADD W8, W8, 0x1
	0x03E64E6C STP W31, W8, [X19 + 0x18]
	0x03E64E70 LDR X8, [X22]
	0x03E64E74 LDR X8, [X8 + 0xB8]
	0x03E64E78 LDR X0, [X8]
	0x03E64E7C CBZ X0, 0x3E64FE0
	0x03E64E80 ADRP X8, 0x2B7000
	0x03E64E84 LDR X8, [X8 + 0x298]
	0x03E64E88 ADRP X25, 0x2B7000
	0x03E64E8C ADRP X26, 0x2F9000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+8]
	005 Compare W8, 0
	006 JumpIfEqual {23}
	007 Move X19, [X0]
	008 Add X31, X19, 1
	009 Move X20, 0x585000
	010 Move X1, [X20+2984]
	011 Compare X1, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -53841920
	014 Add X0, X0, 346
	015 Call 0x1C17CB8
	016 Move X1, X0
	017 Move [X20+2984], X0
	018 Move X0, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 CallNoReturn X1
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move W0, W31
	026 Move X30, [X31+32]
	027 Return X0

Method: System.Boolean IsValidId()

Disassembly:
	0x03E64DD8 STRB W8, [X21 + 0xB48]
	0x03E64DDC MOVI V0.2D, 0x0
	0x03E64DE0 STP V0, V0, [X31 + 0x20]
	0x03E64DE4 CBZ X19, 0x3E64F98
	0x03E64DE8 ADRP X22, 0x308000
	0x03E64DEC LDR X22, [X22 + 0x1A0]
	0x03E64DF0 LDR X8, [X22]
	0x03E64DF4 LDR X9, [X8 + 0xB8]

ISIL:
	001 Move W8, [X0+8]
	002 Compare W8, 0
	003 JumpIfEqual {8}
	004 Move X8, [X0]
	005 Add X31, X8, 1
	006 NotImplemented "Instruction CSET not yet implemented."
	007 Return X0
	008 Move W0, W31
	009 Return X0

Method: System.Boolean SendHapticImpulse(System.UInt32 channel, System.Single amplitude, System.Single duration = 1)

Disassembly:
	0x03E64ECC TBZ X0, 0x0, 0x3E64F6C
	0x03E64ED0 LDP X22, X23, [X31 + 0x30]
	0x03E64ED4 MOV W0, W31
	0x03E64ED8 ADDS X31, X22, 0x1
	0x03E64EDC B.EQ 0x3E64F08
	0x03E64EE0 ANDS W31, W23, 0xFF
	0x03E64EE4 B.EQ 0x3E64F08
	0x03E64EE8 LDR X8, [X27 + 0xBA8]
	0x03E64EEC CBNZ X8, 0x3E64F00
	0x03E64EF0 MOV X0, X21
	0x03E64EF4 BL 0x1C16CB8
	0x03E64EF8 MOV X8, X0
	0x03E64EFC STR X0, [X27 + 0xBA8]
	0x03E64F00 MOV X0, X22
	0x03E64F04 BLR X8
	0x03E64F08 BICS W31, W20, W0, 0x0
	0x03E64F0C B.NE 0x3E64EC0
	0x03E64F10 LDR W10, [X19 + 0x1C]
	0x03E64F14 LDR X8, [X19 + 0x10]
	0x03E64F18 LDR X9, [X26]
	0x03E64F1C ADD W10, W10, 0x1
	0x03E64F20 STR W10, [X19 + 0x1C]
	0x03E64F24 CBZ X8, 0x3E64F94
	0x03E64F28 LDRSW X10, [X19 + 0x18]
	0x03E64F2C LDR W11, [X8 + 0x18]
	0x03E64F30 CMP W10, W11
	0x03E64F34 B.CS 0x3E64F4C
	0x03E64F38 ADD W9, W10, 0x1
	0x03E64F3C ADD X8, X8, X10, 0x4, LSL
	0x03E64F40 STR W9, [X19 + 0x18]
	0x03E64F44 STP X22, X23, [X8 + 0x20]
	0x03E64F48 B 0x3E64EC0
	0x03E64F4C LDR X8, [X9 + 0x20]
	0x03E64F50 LDR X8, [X8 + 0xC0]
	0x03E64F54 LDR X3, [X8 + 0x70]
	0x03E64F58 MOV X0, X19
	0x03E64F5C MOV X1, X22
	0x03E64F60 MOV X2, X23
	0x03E64F64 BL 0x2FD134C
	0x03E64F68 B 0x3E64EC0
	0x03E64F6C LDR X1, [X24]
	0x03E64F70 ADD X0, X31, 0x20
	0x03E64F74 BL 0x2BBCD24
	0x03E64F78 LDP X20, X19, [X31 + 0x80]
	0x03E64F7C LDP X22, X21, [X31 + 0x70]
	0x03E64F80 LDP X24, X23, [X31 + 0x60]
	0x03E64F84 LDP X26, X25, [X31 + 0x50]
	0x03E64F88 LDP X30, X27, [X31 + 0x40]
	0x03E64F8C ADD X31, X31, 0x90
	0x03E64F90 RET
	0x03E64F94 BL 0x1C16F20
	0x03E64F98 ADRP X0, 0x294000
	0x03E64F9C LDR X0, [X0 + 0x528]
	0x03E64FA0 BL 0x1C16D08
	0x03E64FA4 BL 0x1C16F10
	0x03E64FA8 MOV X19, X0
	0x03E64FAC ADRP X0, 0x308000
	0x03E64FB0 LDR X0, [X0 + 0x190]
	0x03E64FB4 BL 0x1C16D08
	0x03E64FB8 MOV X1, X0
	0x03E64FBC MOV X0, X19
	0x03E64FC0 MOV X2, X31

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W8, [X0+8]
	008 Compare W8, 0
	009 JumpIfEqual {37}
	010 Move X20, [X0]
	011 Add X31, X20, 1
	012 Move V9, V0
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Move V8, V1
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move X21, 0x585000
	017 Move X2, [X21+2904]
	018 Move W19, W1
	019 Compare X2, 0
	020 JumpIfNotEqual {26}
	021 Move X0, -53903360
	022 Add X0, X0, 4033
	023 Call 0x1C17CB8
	024 Move X2, X0
	025 Move [X21+2904], X0
	026 Move X0, X20
	027 Move W1, W19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X30, [X31+16]
	031 Move X21, [X31+24]
	032 Move V0, V9
	033 Move V1, V8
	034 Move D9, [X31+48]
	035 Move D8, [X31+56]
	036 CallNoReturn X2
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move W0, W31
	042 Move D9, [X31+48]
	043 Move D8, [X31+56]
	044 Return X0
	045 Move X0, 0x298000
	046 Move X0, [X0+1400]
	047 Call 0x1C17D08
	048 Call 0x1C17F10
	049 Move X19, X0
	050 Move X0, 0x309000
	051 Move X0, [X0+256]
	052 Move X0, 0x298000
	053 Move X0, [X0+1400]
	054 Call 0x1C17D08
	055 Call 0x1C17F10
	056 Move X19, X0
	057 Move X0, 0x309000
	058 Move X0, [X0+264]
	059 Call 0x1C17D08
	060 Move X1, X0
	061 Move X0, X19
	062 Move X2, X31
	063 Call ArgumentException..ctor, X0, X1
	064 Move X0, 0x309000
	065 Move X0, [X0+272]
	066 Call 0x1C17D08
	067 Move X1, X0
	068 Move X0, X19
	069 Call 0x1C17DEC

Method: System.Boolean SendHapticBuffer(System.UInt32 channel, System.Byte[] buffer)

Disassembly:
	0x03E65020 BL 0x1C16F18
	0x03E65024 MOV X20, X31
	0x03E65028 B 0x3E65030
	0x03E6502C MOV X19, X0
	0x03E65030 LDR X1, [X24]
	0x03E65034 ADD X0, X31, 0x20
	0x03E65038 BL 0x2BBCD24
	0x03E6503C CBNZ X20, 0x3E65048
	0x03E65040 MOV X0, X19
	0x03E65044 BL 0x1D2C690
	0x03E65048 MOV X0, X20
	0x03E6504C BL 0x1C16F18
	0x03E65050 BL 0x1990590
	0x03E65054 STR X30, [X31 - 0x40]!
	0x03E65058 STP X24, X23, [X31 + 0x10]
	0x03E6505C STP X22, X21, [X31 + 0x20]
	0x03E65060 STP X20, X19, [X31 + 0x30]
	0x03E65064 ADRP X20, 0x583000
	0x03E65068 ADRP X23, 0x307000
	0x03E6506C LDRB W8, [X20 + 0xB49]
	0x03E65070 LDR X23, [X23 + 0x1A0]
	0x03E65074 MOV X19, X0
	0x03E65078 TBNZ X8, 0x0, 0x3E6509C
	0x03E6507C ADRP X0, 0x2F8000
	0x03E65080 LDR X0, [X0 + 0x2C0]
	0x03E65084 BL 0x1C16CF4
	0x03E65088 ADRP X0, 0x307000
	0x03E6508C LDR X0, [X0 + 0x1A0]
	0x03E65090 BL 0x1C16CF4
	0x03E65094 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W8, [X0+8]
	007 Compare W8, 0
	008 JumpIfEqual {31}
	009 Move X21, [X0]
	010 Add X31, X21, 1
	011 Move X22, 0x584000
	012 Move X3, [X22+2912]
	013 Move X19, X2
	014 Move W20, W1
	015 Compare X3, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -53735424
	018 Add X0, X0, 2894
	019 Call 0x1C17CB8
	020 Move X3, X0
	021 Move [X22+2912], X0
	022 Move X0, X21
	023 Move W1, W20
	024 Move X2, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 CallNoReturn X3
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move W0, W31
	036 Move X30, [X31+48]
	037 Return X0

Method: System.Boolean TryGetHapticCapabilities(out UnityEngine.XR.HapticCapabilities capabilities)

Disassembly:
	0x03E650EC LDR X8, [X8 + 0xB8]
	0x03E650F0 ADD X0, X8, 0x8
	0x03E650F4 BL 0x1C24138
	0x03E650F8 CMP X20, X0
	0x03E650FC MOV X20, X0
	0x03E65100 B.NE 0x3E650B0
	0x03E65104 LDP X20, X19, [X31 + 0x30]
	0x03E65108 LDP X22, X21, [X31 + 0x20]
	0x03E6510C LDP X24, X23, [X31 + 0x10]
	0x03E65110 LDR X30, [X31], #0x40
	0x03E65114 RET
	0x03E65118 MOV X0, X21
	0x03E6511C MOV X1, X22
	0x03E65120 BL 0x1C171E0
	0x03E65124 STR X30, [X31 - 0x40]!
	0x03E65128 STP X24, X23, [X31 + 0x10]
	0x03E6512C STP X22, X21, [X31 + 0x20]
	0x03E65130 STP X20, X19, [X31 + 0x30]
	0x03E65134 ADRP X20, 0x583000
	0x03E65138 ADRP X23, 0x307000
	0x03E6513C LDRB W8, [X20 + 0xB4A]
	0x03E65140 LDR X23, [X23 + 0x1A0]
	0x03E65144 MOV X19, X0
	0x03E65148 TBNZ X8, 0x0, 0x3E6516C
	0x03E6514C ADRP X0, 0x2F8000
	0x03E65150 LDR X0, [X0 + 0x2C0]
	0x03E65154 BL 0x1C16CF4
	0x03E65158 ADRP X0, 0x307000
	0x03E6515C LDR X0, [X0 + 0x1A0]
	0x03E65160 BL 0x1C16CF4
	0x03E65164 MOVZ W8, 0x1
	0x03E65168 STRB W8, [X20 + 0xB4A]
	0x03E6516C LDR X8, [X23]
	0x03E65170 ADRP X24, 0x2F8000
	0x03E65174 LDR X8, [X8 + 0xB8]
	0x03E65178 LDR X20, [X8 + 0x8]
	0x03E6517C LDR X24, [X24 + 0x2C0]
	0x03E65180 MOV X0, X20
	0x03E65184 MOV X1, X19
	0x03E65188 MOV X2, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x584000
	007 Move X22, 0x308000
	008 Move W8, [X21+2876]
	009 Move X22, [X22+280]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x308000
	017 Move X0, [X0+280]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2876], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move X1, X19
	024 Call InputDevice.CheckValidAndSetDefault, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {47}
	029 Move X21, 0x584000
	030 Move X2, [X21+2920]
	031 Move X20, [X20]
	032 Compare X2, 0
	033 JumpIfNotEqual {39}
	034 Move X0, -53891072
	035 Add X0, X0, 2882
	036 Call 0x1C17CB8
	037 Move X2, X0
	038 Move [X21+2920], X0
	039 Move X0, X20
	040 Move X1, X19
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 CallNoReturn X2
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move W0, W31
	052 Move X30, [X31+48]
	053 Return X0

Method: System.Boolean TryGetFeatureValue(UnityEngine.XR.InputFeatureUsage`1<System.Boolean> usage, out System.Boolean value)

Disassembly:
	0x03E651D0 B.NE 0x3E65180
	0x03E651D4 LDP X20, X19, [X31 + 0x30]
	0x03E651D8 LDP X22, X21, [X31 + 0x20]
	0x03E651DC LDP X24, X23, [X31 + 0x10]
	0x03E651E0 LDR X30, [X31], #0x40
	0x03E651E4 RET
	0x03E651E8 MOV X0, X21
	0x03E651EC MOV X1, X22
	0x03E651F0 BL 0x1C171E0
	0x03E651F4 STR X30, [X31 - 0x40]!
	0x03E651F8 STP X24, X23, [X31 + 0x10]
	0x03E651FC STP X22, X21, [X31 + 0x20]
	0x03E65200 STP X20, X19, [X31 + 0x30]
	0x03E65204 ADRP X20, 0x583000
	0x03E65208 ADRP X23, 0x307000
	0x03E6520C LDRB W8, [X20 + 0xB4B]
	0x03E65210 LDR X23, [X23 + 0x1A0]
	0x03E65214 MOV X19, X0
	0x03E65218 TBNZ X8, 0x0, 0x3E6523C
	0x03E6521C ADRP X0, 0x2F8000
	0x03E65220 LDR X0, [X0 + 0x2C0]
	0x03E65224 BL 0x1C16CF4
	0x03E65228 ADRP X0, 0x307000
	0x03E6522C LDR X0, [X0 + 0x1A0]
	0x03E65230 BL 0x1C16CF4
	0x03E65234 MOVZ W8, 0x1
	0x03E65238 STRB W8, [X20 + 0xB4B]
	0x03E6523C LDR X8, [X23]
	0x03E65240 ADRP X24, 0x2F8000
	0x03E65244 LDR X8, [X8 + 0xB8]
	0x03E65248 LDR X20, [X8 + 0x10]
	0x03E6524C LDR X24, [X24 + 0x2C0]
	0x03E65250 MOV X0, X20
	0x03E65254 MOV X1, X19
	0x03E65258 MOV X2, X31
	0x03E6525C BL 0x33C0DE4
	0x03E65260 CBZ X0, 0x3E65280
	0x03E65264 LDR X22, [X24]
	0x03E65268 MOV X21, X0
	0x03E6526C MOV X1, X22
	0x03E65270 BL 0x1C16E00
	0x03E65274 MOV X1, X0
	0x03E65278 CBNZ X0, 0x3E65284
	0x03E6527C B 0x3E652B8
	0x03E65280 MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x584000
	008 Move X23, 0x308000
	009 Move W8, [X22+2877]
	010 Move X23, [X23+288]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x308000
	019 Move X0, [X0+288]
	020 Call 0x1C17CF4
	021 Move X0, 0x308000
	022 Move X0, [X0+296]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2877], W8
	026 Move X2, [X23]
	027 Move X0, X21
	028 Move X1, X19
	029 Call 0x2208B68, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {54}
	034 Move X22, 0x584000
	035 Move X3, [X22+2928]
	036 Move X21, [X21]
	037 Compare X3, 0
	038 JumpIfNotEqual {44}
	039 Move X0, -53760000
	040 Add X0, X0, 2890
	041 Call 0x1C17CB8
	042 Move X3, X0
	043 Move [X22+2928], X0
	044 Move X0, X21
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 CallNoReturn X3
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move W0, W31
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0

Method: System.Boolean TryGetFeatureValue(UnityEngine.XR.InputFeatureUsage`1<System.Single> usage, out System.Single value)

Disassembly:
	0x03E652D8 ADRP X23, 0x307000
	0x03E652DC LDRB W8, [X20 + 0xB4C]
	0x03E652E0 LDR X23, [X23 + 0x1A0]
	0x03E652E4 MOV X19, X0
	0x03E652E8 TBNZ X8, 0x0, 0x3E6530C
	0x03E652EC ADRP X0, 0x2F8000
	0x03E652F0 LDR X0, [X0 + 0x2C0]
	0x03E652F4 BL 0x1C16CF4
	0x03E652F8 ADRP X0, 0x307000
	0x03E652FC LDR X0, [X0 + 0x1A0]
	0x03E65300 BL 0x1C16CF4
	0x03E65304 MOVZ W8, 0x1
	0x03E65308 STRB W8, [X20 + 0xB4C]
	0x03E6530C LDR X8, [X23]
	0x03E65310 ADRP X24, 0x2F8000
	0x03E65314 LDR X8, [X8 + 0xB8]
	0x03E65318 LDR X20, [X8 + 0x10]
	0x03E6531C LDR X24, [X24 + 0x2C0]
	0x03E65320 MOV X0, X20
	0x03E65324 MOV X1, X19
	0x03E65328 MOV X2, X31
	0x03E6532C BL 0x33C0FDC
	0x03E65330 CBZ X0, 0x3E65350
	0x03E65334 LDR X22, [X24]
	0x03E65338 MOV X21, X0
	0x03E6533C MOV X1, X22
	0x03E65340 BL 0x1C16E00
	0x03E65344 MOV X1, X0
	0x03E65348 CBNZ X0, 0x3E65354
	0x03E6534C B 0x3E65388
	0x03E65350 MOV X1, X31
	0x03E65354 LDR X8, [X23]
	0x03E65358 MOV X2, X20
	0x03E6535C LDR X8, [X8 + 0xB8]
	0x03E65360 ADD X0, X8, 0x10
	0x03E65364 BL 0x1C24138
	0x03E65368 CMP X20, X0
	0x03E6536C MOV X20, X0
	0x03E65370 B.NE 0x3E65320
	0x03E65374 LDP X20, X19, [X31 + 0x30]
	0x03E65378 LDP X22, X21, [X31 + 0x20]
	0x03E6537C LDP X24, X23, [X31 + 0x10]
	0x03E65380 LDR X30, [X31], #0x40
	0x03E65384 RET
	0x03E65388 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x584000
	008 Move X23, 0x308000
	009 Move W8, [X22+2878]
	010 Move X23, [X23+304]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x308000
	019 Move X0, [X0+304]
	020 Call 0x1C17CF4
	021 Move X0, 0x308000
	022 Move X0, [X0+312]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2878], W8
	026 Move X2, [X23]
	027 Move X0, X21
	028 Move X1, X19
	029 Call InputDevice.CheckValidAndSetDefault, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {54}
	034 Move X22, 0x584000
	035 Move X3, [X22+2944]
	036 Move X21, [X21]
	037 Compare X3, 0
	038 JumpIfNotEqual {44}
	039 Move X0, -53792768
	040 Add X0, X0, 1557
	041 Call 0x1C17CB8
	042 Move X3, X0
	043 Move [X22+2944], X0
	044 Move X0, X21
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 CallNoReturn X3
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move W0, W31
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0

Method: System.Boolean TryGetFeatureValue(UnityEngine.XR.InputFeatureUsage`1<UnityEngine.Vector2> usage, out UnityEngine.Vector2 value)

Disassembly:
	0x03E653E0 ADRP X24, 0x2F8000
	0x03E653E4 LDR X8, [X8 + 0xB8]
	0x03E653E8 LDR X20, [X8 + 0x18]
	0x03E653EC LDR X24, [X24 + 0x2C0]
	0x03E653F0 MOV X0, X20
	0x03E653F4 MOV X1, X19
	0x03E653F8 MOV X2, X31
	0x03E653FC BL 0x33C0DE4
	0x03E65400 CBZ X0, 0x3E65420
	0x03E65404 LDR X22, [X24]
	0x03E65408 MOV X21, X0
	0x03E6540C MOV X1, X22
	0x03E65410 BL 0x1C16E00
	0x03E65414 MOV X1, X0
	0x03E65418 CBNZ X0, 0x3E65424
	0x03E6541C B 0x3E65458
	0x03E65420 MOV X1, X31
	0x03E65424 LDR X8, [X23]
	0x03E65428 MOV X2, X20
	0x03E6542C LDR X8, [X8 + 0xB8]
	0x03E65430 ADD X0, X8, 0x18
	0x03E65434 BL 0x1C24138
	0x03E65438 CMP X20, X0
	0x03E6543C MOV X20, X0
	0x03E65440 B.NE 0x3E653F0
	0x03E65444 LDP X20, X19, [X31 + 0x30]
	0x03E65448 LDP X22, X21, [X31 + 0x20]
	0x03E6544C LDP X24, X23, [X31 + 0x10]
	0x03E65450 LDR X30, [X31], #0x40
	0x03E65454 RET
	0x03E65458 MOV X0, X21
	0x03E6545C MOV X1, X22
	0x03E65460 BL 0x1C171E0
	0x03E65464 STR X30, [X31 - 0x40]!
	0x03E65468 STP X24, X23, [X31 + 0x10]
	0x03E6546C STP X22, X21, [X31 + 0x20]
	0x03E65470 STP X20, X19, [X31 + 0x30]
	0x03E65474 ADRP X20, 0x583000
	0x03E65478 ADRP X23, 0x307000
	0x03E6547C LDRB W8, [X20 + 0xB4E]
	0x03E65480 LDR X23, [X23 + 0x1A0]
	0x03E65484 MOV X19, X0
	0x03E65488 TBNZ X8, 0x0, 0x3E654AC
	0x03E6548C ADRP X0, 0x2F8000
	0x03E65490 LDR X0, [X0 + 0x2C0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x584000
	008 Move X23, 0x308000
	009 Move W8, [X22+2879]
	010 Move X23, [X23+320]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x308000
	019 Move X0, [X0+320]
	020 Call 0x1C17CF4
	021 Move X0, 0x308000
	022 Move X0, [X0+328]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2879], W8
	026 Move X2, [X23]
	027 Move X0, X21
	028 Move X1, X19
	029 Call InputDevice.CheckValidAndSetDefault, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {54}
	034 Move X22, 0x584000
	035 Move X3, [X22+2952]
	036 Move X21, [X21]
	037 Compare X3, 0
	038 JumpIfNotEqual {44}
	039 Move X0, -53858304
	040 Add X0, X0, 3565
	041 Call 0x1C17CB8
	042 Move X3, X0
	043 Move [X22+2952], X0
	044 Move X0, X21
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 CallNoReturn X3
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move W0, W31
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0

Method: System.Boolean TryGetFeatureValue(UnityEngine.XR.InputFeatureUsage`1<UnityEngine.Vector3> usage, out UnityEngine.Vector3 value)

Disassembly:
	0x03E654E8 CBNZ X0, 0x3E654F4
	0x03E654EC B 0x3E65528
	0x03E654F0 MOV X1, X31
	0x03E654F4 LDR X8, [X23]
	0x03E654F8 MOV X2, X20
	0x03E654FC LDR X8, [X8 + 0xB8]
	0x03E65500 ADD X0, X8, 0x18
	0x03E65504 BL 0x1C24138
	0x03E65508 CMP X20, X0
	0x03E6550C MOV X20, X0
	0x03E65510 B.NE 0x3E654C0
	0x03E65514 LDP X20, X19, [X31 + 0x30]
	0x03E65518 LDP X22, X21, [X31 + 0x20]
	0x03E6551C LDP X24, X23, [X31 + 0x10]
	0x03E65520 LDR X30, [X31], #0x40
	0x03E65524 RET
	0x03E65528 MOV X0, X21
	0x03E6552C MOV X1, X22
	0x03E65530 BL 0x1C171E0
	0x03E65534 STP X30, X21, [X31 - 0x20]!
	0x03E65538 STP X20, X19, [X31 + 0x10]
	0x03E6553C ADRP X21, 0x583000
	0x03E65540 LDRB W8, [X21 + 0xB4F]
	0x03E65544 MOV W20, W1
	0x03E65548 MOV X19, X0
	0x03E6554C TBNZ X8, 0x0, 0x3E65564
	0x03E65550 ADRP X0, 0x307000
	0x03E65554 LDR X0, [X0 + 0x1A0]
	0x03E65558 BL 0x1C16CF4
	0x03E6555C MOVZ W8, 0x1
	0x03E65560 STRB W8, [X21 + 0xB4F]
	0x03E65564 CMP W20, 0x2
	0x03E65568 B.EQ 0x3E655B0
	0x03E6556C CMP W20, 0x1
	0x03E65570 B.EQ 0x3E655D4
	0x03E65574 CBNZ W20, 0x3E655C8
	0x03E65578 ADRP X8, 0x307000
	0x03E6557C LDR X8, [X8 + 0x1A0]
	0x03E65580 LDR X8, [X8]
	0x03E65584 LDR X8, [X8 + 0xB8]
	0x03E65588 LDR X8, [X8 + 0x8]
	0x03E6558C CBZ X8, 0x3E655C8
	0x03E65590 LDR X4, [X8 + 0x18]
	0x03E65594 LDR X0, [X8 + 0x40]
	0x03E65598 LDR X3, [X8 + 0x28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x584000
	008 Move X23, 0x308000
	009 Move W8, [X22+2880]
	010 Move X23, [X23+336]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x308000
	019 Move X0, [X0+336]
	020 Call 0x1C17CF4
	021 Move X0, 0x308000
	022 Move X0, [X0+344]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2880], W8
	026 Move X2, [X23]
	027 Move X0, X21
	028 Move X1, X19
	029 Call InputDevice.CheckValidAndSetDefault, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {54}
	034 Move X22, 0x584000
	035 Move X3, [X22+2960]
	036 Move X21, [X21]
	037 Compare X3, 0
	038 JumpIfNotEqual {44}
	039 Move X0, -53809152
	040 Add X0, X0, 2068
	041 Call 0x1C17CB8
	042 Move X3, X0
	043 Move [X22+2960], X0
	044 Move X0, X21
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 CallNoReturn X3
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move W0, W31
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0

Method: System.Boolean TryGetFeatureValue(UnityEngine.XR.InputFeatureUsage`1<UnityEngine.Quaternion> usage, out UnityEngine.Quaternion value)

Disassembly:
	0x03E655F0 LDR X8, [X0 + 0x20]
	0x03E655F4 CBZ X8, 0x3E6560C
	0x03E655F8 LDR X3, [X8 + 0x18]
	0x03E655FC LDR X0, [X8 + 0x40]
	0x03E65600 LDR X2, [X8 + 0x28]
	0x03E65604 AND W1, W1, 0x1
	0x03E65608 BR X3
	0x03E6560C RET
	0x03E65610 STR D8, [X31 - 0x20]!
	0x03E65614 STR X30, [X31 + 0x8]
	0x03E65618 STP X20, X19, [X31 + 0x10]
	0x03E6561C ADRP X20, 0x583000
	0x03E65620 LDR X1, [X20 + 0xBB0]
	0x03E65624 MOV V8.16B, V0.16B
	0x03E65628 MOV X19, X0
	0x03E6562C CBNZ X1, 0x3E65644
	0x03E65630 ADRP X0, 0xFFFFFFFFFCCA2000
	0x03E65634 ADD X0, X0, 0xE58
	0x03E65638 BL 0x1C16CB8
	0x03E6563C MOV X1, X0
	0x03E65640 STR X0, [X20 + 0xBB0]
	0x03E65644 MOV X0, X19
	0x03E65648 LDP X20, X19, [X31 + 0x10]
	0x03E6564C LDR X30, [X31 + 0x8]
	0x03E65650 MOV V0.16B, V8.16B
	0x03E65654 LDR V8, [X31], #0x20
	0x03E65658 BR X1
	0x03E6565C STR D8, [X31 - 0x20]!
	0x03E65660 STR X30, [X31 + 0x8]
	0x03E65664 STP X20, X19, [X31 + 0x10]
	0x03E65668 ADRP X20, 0x583000
	0x03E6566C LDR X1, [X20 + 0xBB8]
	0x03E65670 MOV V8.16B, V0.16B
	0x03E65674 MOV X19, X0
	0x03E65678 CBNZ X1, 0x3E65690
	0x03E6567C ADRP X0, 0xFFFFFFFFFCCC8000
	0x03E65680 ADD X0, X0, 0x29F
	0x03E65684 BL 0x1C16CB8
	0x03E65688 MOV X1, X0
	0x03E6568C STR X0, [X20 + 0xBB8]
	0x03E65690 MOV X0, X19
	0x03E65694 LDP X20, X19, [X31 + 0x10]
	0x03E65698 LDR X30, [X31 + 0x8]
	0x03E6569C MOV V0.16B, V8.16B
	0x03E656A0 LDR V8, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x584000
	008 Move X23, 0x308000
	009 Move W8, [X22+2881]
	010 Move X23, [X23+352]
	011 Move X19, X2
	012 Move X20, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x308000
	019 Move X0, [X0+352]
	020 Call 0x1C17CF4
	021 Move X0, 0x308000
	022 Move X0, [X0+360]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2881], W8
	026 Move X2, [X23]
	027 Move X0, X21
	028 Move X1, X19
	029 Call InputDevice.CheckValidAndSetDefault, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {54}
	034 Move X22, 0x584000
	035 Move X3, [X22+2968]
	036 Move X21, [X21]
	037 Compare X3, 0
	038 JumpIfNotEqual {44}
	039 Move X0, -53702656
	040 Add X0, X0, 558
	041 Call 0x1C17CB8
	042 Move X3, X0
	043 Move [X22+2968], X0
	044 Move X0, X21
	045 Move X1, X20
	046 Move X2, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 CallNoReturn X3
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move W0, W31
	059 Move X30, [X31+48]
	060 Move X23, [X31+56]
	061 Return X0

Method: System.Boolean TryGetFeatureValue(UnityEngine.XR.InputFeatureUsage`1<UnityEngine.XR.InputTrackingState> usage, out UnityEngine.XR.InputTrackingState value)

Disassembly:
	0x03E656F8 STP X20, X19, [X31 + 0x10]
	0x03E656FC ADRP X21, 0x583000
	0x03E65700 LDR X2, [X21 + 0xBC8]
	0x03E65704 MOV W19, W1
	0x03E65708 MOV X20, X0
	0x03E6570C CBNZ X2, 0x3E65724
	0x03E65710 ADRP X0, 0xFFFFFFFFFCCC6000
	0x03E65714 ADD X0, X0, 0x4BB
	0x03E65718 BL 0x1C16CB8
	0x03E6571C MOV X2, X0
	0x03E65720 STR X0, [X21 + 0xBC8]
	0x03E65724 AND W1, W19, 0x1
	0x03E65728 MOV X0, X20
	0x03E6572C LDP X20, X19, [X31 + 0x10]
	0x03E65730 LDP X30, X21, [X31], #0x20
	0x03E65734 BR X2
	0x03E65738 STP X30, X21, [X31 - 0x20]!
	0x03E6573C STP X20, X19, [X31 + 0x10]
	0x03E65740 ADRP X21, 0x583000
	0x03E65744 LDR X2, [X21 + 0xBD0]
	0x03E65748 MOV W19, W1
	0x03E6574C MOV X20, X0
	0x03E65750 CBNZ X2, 0x3E65768
	0x03E65754 ADRP X0, 0xFFFFFFFFFCC8C000
	0x03E65758 ADD X0, X0, 0xE45
	0x03E6575C BL 0x1C16CB8
	0x03E65760 MOV X2, X0
	0x03E65764 STR X0, [X21 + 0xBD0]
	0x03E65768 MOV X0, X20
	0x03E6576C MOV W1, W19
	0x03E65770 LDP X20, X19, [X31 + 0x10]
	0x03E65774 LDP X30, X21, [X31], #0x20
	0x03E65778 BR X2
	0x03E6577C STP X30, X21, [X31 - 0x20]!
	0x03E65780 STP X20, X19, [X31 + 0x10]
	0x03E65784 ADRP X21, 0x583000
	0x03E65788 LDR X2, [X21 + 0xBD8]
	0x03E6578C MOV W19, W1
	0x03E65790 MOV X20, X0
	0x03E65794 CBNZ X2, 0x3E657AC
	0x03E65798 ADRP X0, 0xFFFFFFFFFCCC8000
	0x03E6579C ADD X0, X0, 0x2DB
	0x03E657A0 BL 0x1C16CB8
	0x03E657A4 MOV X2, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x584000
	007 Move W8, [X22+2882]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x308000
	016 Move X0, [X0+368]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+2882], W8
	020 Move W8, [X21+8]
	021 Compare W8, 0
	022 JumpIfEqual {43}
	023 Move X21, [X21]
	024 Add X31, X21, 1
	025 Move X22, 0x584000
	026 Move X8, [X22+2936]
	027 Move [X31+12], W31
	028 Compare X8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, -53866496
	031 Add X0, X0, 3333
	032 Call 0x1C17CB8
	033 Move X8, X0
	034 Move [X22+2936], X0
	035 Add X2, X31, 12
	036 Move X0, X21
	037 Move X1, X20
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move W8, [X31+12]
	040 And W31, W0, 1
	041 NotImplemented "Instruction CSEL not yet implemented."
	042 Move W8, W31
	043 Move W0, W31
	044 Move [X19], W8
	045 Move X20, [X31+32]
	046 Move X19, [X31+40]
	047 Move X22, [X31+16]
	048 Move X21, [X31+24]
	049 And W0, W0, 1
	050 Move X30, [X31+48]
	051 Return X0

Method: System.Boolean CheckValidAndSetDefault(out T value)

Disassembly:
	0x02208B68 ADD X9, X31, 0x0
	0x02208B6C LDR W2, [X8 + 0xFC]
	0x02208B70 ADD X10, X2, 0xF

ISIL:
	001 Move [X1], W31
	002 Move X1, X31
	003 Call InputDevice.IsValidId, X0
	004 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03E657FC LDP X30, X21, [X31], #0x20
	0x03E65800 BR X2
	0x03E65804 STR X30, [X31 - 0x20]!
	0x03E65808 STP X20, X19, [X31 + 0x10]
	0x03E6580C ADRP X20, 0x583000
	0x03E65810 LDR X1, [X20 + 0xBE8]
	0x03E65814 MOV X19, X0
	0x03E65818 CBNZ X1, 0x3E65830
	0x03E6581C ADRP X0, 0xFFFFFFFFFCCC8000
	0x03E65820 ADD X0, X0, 0x319
	0x03E65824 BL 0x1C16CB8
	0x03E65828 MOV X1, X0
	0x03E6582C STR X0, [X20 + 0xBE8]
	0x03E65830 MOV X0, X19
	0x03E65834 LDP X20, X19, [X31 + 0x10]
	0x03E65838 LDR X30, [X31], #0x20
	0x03E6583C BR X1
	0x03E65840 STR X30, [X31 - 0x30]!
	0x03E65844 STP X22, X21, [X31 + 0x10]
	0x03E65848 STP X20, X19, [X31 + 0x20]
	0x03E6584C ADRP X22, 0x583000
	0x03E65850 LDR X8, [X22 + 0xBF0]
	0x03E65854 MOV X19, X2
	0x03E65858 MOV W20, W1
	0x03E6585C MOV X21, X0
	0x03E65860 CBNZ X8, 0x3E65878
	0x03E65864 ADRP X0, 0xFFFFFFFFFCCB4000
	0x03E65868 ADD X0, X0, 0x8A6
	0x03E6586C BL 0x1C16CB8
	0x03E65870 MOV X8, X0
	0x03E65874 STR X0, [X22 + 0xBF0]
	0x03E65878 MOV X0, X21
	0x03E6587C MOV W1, W20
	0x03E65880 MOV X2, X19
	0x03E65884 BLR X8
	0x03E65888 TBZ X0, 0x0, 0x3E6589C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x584000
	006 Move W8, [X21+2883]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2BA000
	014 Move X0, [X0+1256]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2883], W8
	018 Compare X20, 0
	019 JumpIfEqual {25}
	020 Move X8, 0x2BA000
	021 Move X8, [X8+1256]
	022 Move X9, [X20]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move X0, X20
	027 Call 0x1C17E08
	028 Move W10, [X19+8]
	029 Move X8, [X0]
	030 Move X9, [X0+8]
	031 Compare W10, 0
	032 JumpIfEqual {34}
	033 Move X10, [X19]
	034 Move TEMP, 0
	035 Not TEMP
	036 Move X10, TEMP
	037 And W31, W9, 255
	038 NotImplemented "Instruction CSINV not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSET not yet implemented."
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return X0

Method: System.Boolean Equals(UnityEngine.XR.InputDevice other)

Disassembly:
	0x03E6588C LDP X20, X19, [X31 + 0x20]
	0x03E65890 LDP X22, X21, [X31 + 0x10]
	0x03E65894 LDR X30, [X31], #0x30
	0x03E65898 RET
	0x03E6589C ADRP X0, 0x298000
	0x03E658A0 LDR X0, [X0 + 0xF78]
	0x03E658A4 BL 0x1C16D08
	0x03E658A8 BL 0x1C16F10
	0x03E658AC MOV X19, X0
	0x03E658B0 ADRP X0, 0x307000

ISIL:
	001 Move W8, [X0+8]
	002 Compare W8, 0
	003 JumpIfEqual {5}
	004 Move X8, [X0]
	005 Move TEMP, 0
	006 Not TEMP
	007 Move X8, TEMP
	008 And W31, W2, 255
	009 NotImplemented "Instruction CSINV not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CSET not yet implemented."
	012 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03E658B4 LDR X0, [X0 + 0x1B0]
	0x03E658B8 BL 0x1C16D08
	0x03E658BC MOV X1, X0
	0x03E658C0 MOV X0, X19
	0x03E658C4 MOV X2, X31
	0x03E658C8 BL 0x3379B6C
	0x03E658CC ADRP X0, 0x307000
	0x03E658D0 LDR X0, [X0 + 0x1B8]
	0x03E658D4 BL 0x1C16D08
	0x03E658D8 MOV X1, X0
	0x03E658DC MOV X0, X19
	0x03E658E0 BL 0x1C16DEC

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+8]
	003 Compare W8, 0
	004 JumpIfEqual {6}
	005 Move X8, [X0]
	006 Move TEMP, 0
	007 Not TEMP
	008 Move X8, TEMP
	009 Add X0, X31, 8
	010 Move X1, X31
	011 Move [X31+8], X8
	012 Call UInt64.GetHashCode, X0
	013 Move X30, [X31+16]
	014 Return X0

