Type: System.Xml.XmlCharType

Method: System.Object get_StaticLock()

Disassembly:
	0x03617194 LDP X30, X21, [X31], #0x20
	0x03617198 B 0x3361168
	0x0361719C STP X30, X21, [X31 - 0x20]!
	0x036171A0 STP X20, X19, [X31 + 0x10]
	0x036171A4 ADRP X20, 0xDC9000
	0x036171A8 ADRP X21, 0xADD000
	0x036171AC LDRB W8, [X20 + 0x468]
	0x036171B0 LDR X21, [X21 + 0x9F0]
	0x036171B4 MOV X19, X0
	0x036171B8 TBNZ X8, 0x0, 0x36171D0
	0x036171BC ADRP X0, 0xADD000
	0x036171C0 LDR X0, [X0 + 0x9F0]
	0x036171C4 BL 0x1C16CF4
	0x036171C8 MOVZ W8, 0x1
	0x036171CC STRB W8, [X20 + 0x468]
	0x036171D0 LDR X0, [X21]
	0x036171D4 LDR W8, [X0 + 0xE0]
	0x036171D8 CBNZ W8, 0x36171E0
	0x036171DC BL 0x1C16DFC
	0x036171E0 MOV X0, X19
	0x036171E4 LDP X20, X19, [X31 + 0x10]
	0x036171E8 MOV X1, X31
	0x036171EC LDP X30, X21, [X31], #0x20
	0x036171F0 B 0x33612B4
	0x036171F4 STP X30, X21, [X31 - 0x20]!
	0x036171F8 STP X20, X19, [X31 + 0x10]
	0x036171FC ADRP X20, 0xDC9000
	0x03617200 ADRP X21, 0xADD000
	0x03617204 LDRB W8, [X20 + 0x469]
	0x03617208 LDR X21, [X21 + 0x9F0]
	0x0361720C MOV X19, X0
	0x03617210 TBNZ X8, 0x0, 0x3617228
	0x03617214 ADRP X0, 0xADD000
	0x03617218 LDR X0, [X0 + 0x9F0]
	0x0361721C BL 0x1C16CF4
	0x03617220 MOVZ W8, 0x1
	0x03617224 STRB W8, [X20 + 0x469]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xDCA000
	005 Move X20, 0xB24000
	006 Move W8, [X19+1117]
	007 Move X20, [X20+3888]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0xAE3000
	013 Move X0, [X0+3264]
	014 Call 0x1C17CF4
	015 Move X0, 0xB24000
	016 Move X0, [X0+3888]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1117], W8
	020 Move X8, [X20]
	021 Move X8, [X8+184]
	022 Move X0, [X8]
	023 Compare X0, 0
	024 JumpIfNotEqual {40}
	025 Move X8, 0xAE3000
	026 Move X8, [X8+3264]
	027 Move X0, [X8]
	028 Call 0x1C17F10
	029 Move X1, X31
	030 Move X19, X0
	031 Call Object..ctor, X0
	032 Move X8, [X20]
	033 Move X1, X19
	034 Move X2, X31
	035 Move X0, [X8+184]
	036 Call 0x1C25138
	037 Move X8, [X20]
	038 Move X8, [X8+184]
	039 Move X0, [X8]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return X0

Method: System.Void InitInstance()

Disassembly:
	0x03617228 LDR X0, [X21]
	0x0361722C LDR W8, [X0 + 0xE0]
	0x03617230 CBNZ W8, 0x3617238
	0x03617234 BL 0x1C16DFC
	0x03617238 MOV X0, X19
	0x0361723C LDP X20, X19, [X31 + 0x10]
	0x03617240 MOV X1, X31
	0x03617244 LDP X30, X21, [X31], #0x20
	0x03617248 B 0x33614A4
	0x0361724C STP X30, X21, [X31 - 0x20]!
	0x03617250 STP X20, X19, [X31 + 0x10]
	0x03617254 ADRP X20, 0xDC9000
	0x03617258 ADRP X21, 0xADD000
	0x0361725C LDRB W8, [X20 + 0x46A]
	0x03617260 LDR X21, [X21 + 0x9F0]
	0x03617264 MOV X19, X0
	0x03617268 TBNZ X8, 0x0, 0x3617280
	0x0361726C ADRP X0, 0xADD000
	0x03617270 LDR X0, [X0 + 0x9F0]
	0x03617274 BL 0x1C16CF4
	0x03617278 MOVZ W8, 0x1
	0x0361727C STRB W8, [X20 + 0x46A]
	0x03617280 LDR X0, [X21]
	0x03617284 LDR W8, [X0 + 0xE0]
	0x03617288 CBNZ W8, 0x3617290
	0x0361728C BL 0x1C16DFC
	0x03617290 MOV X0, X19
	0x03617294 LDP X20, X19, [X31 + 0x10]
	0x03617298 MOV X1, X31
	0x0361729C LDP X30, X21, [X31], #0x20
	0x036172A0 B 0x3361760
	0x036172A4 SUB X31, X31, 0x50
	0x036172A8 STP X30, X25, [X31 + 0x10]
	0x036172AC STP X24, X23, [X31 + 0x20]
	0x036172B0 STP X22, X21, [X31 + 0x30]
	0x036172B4 STP X20, X19, [X31 + 0x40]
	0x036172B8 ADRP X21, 0xDC9000
	0x036172BC ADRP X20, 0xADD000
	0x036172C0 LDRB W8, [X21 + 0x46B]
	0x036172C4 LDR X20, [X20 + 0x9F0]
	0x036172C8 MOV X19, X0
	0x036172CC TBNZ X8, 0x0, 0x36172E4
	0x036172D0 ADRP X0, 0xADD000
	0x036172D4 LDR X0, [X0 + 0x9F0]
	0x036172D8 BL 0x1C16CF4
	0x036172DC MOVZ W8, 0x1
	0x036172E0 STRB W8, [X21 + 0x46B]
	0x036172E4 LDR X0, [X20]
	0x036172E8 STR X31, [X31 + 0x8]
	0x036172EC LDR W8, [X0 + 0xE0]
	0x036172F0 CBNZ W8, 0x36172F8
	0x036172F4 BL 0x1C16DFC
	0x036172F8 MOV X0, X19
	0x036172FC MOV X1, X31
	0x03617300 BL 0x3361708
	0x03617304 MOV X20, X0
	0x03617308 MOV X0, X19
	0x0361730C MOV X1, X31
	0x03617310 BL 0x3361868
	0x03617314 MOV W21, W0
	0x03617318 MOV X0, X19
	0x0361731C MOV X1, X31
	0x03617320 BL 0x336152C
	0x03617324 MOV W22, W0
	0x03617328 MOV X0, X19
	0x0361732C MOV X1, X31
	0x03617330 BL 0x3361168
	0x03617334 MOV W23, W0
	0x03617338 MOV X0, X19
	0x0361733C MOV X1, X31
	0x03617340 BL 0x33612B4
	0x03617344 MOV W24, W0
	0x03617348 MOV X0, X19
	0x0361734C MOV X1, X31
	0x03617350 BL 0x33614A4
	0x03617354 MOV W25, W0
	0x03617358 MOV X0, X19
	0x0361735C MOV X1, X31
	0x03617360 BL 0x3361760
	0x03617364 MOV W6, W0
	0x03617368 ADD X0, X31, 0x0
	0x0361736C MOV W1, W21
	0x03617370 MOV W2, W22
	0x03617374 MOV W3, W23
	0x03617378 MOV W4, W24
	0x0361737C MOV W5, W25
	0x03617380 MOV X7, X31
	0x03617384 STR X31, [X31]
	0x03617388 BL 0x335F2FC
	0x0361738C LDR X8, [X31]
	0x03617390 ADD X0, X31, 0x8
	0x03617394 MOV X1, X31
	0x03617398 STR X8, [X31 + 0x8]
	0x0361739C BL 0x3361708
	0x036173A0 SUB W0, W20, W0
	0x036173A4 LDP X20, X19, [X31 + 0x40]
	0x036173A8 LDP X22, X21, [X31 + 0x30]
	0x036173AC LDP X24, X23, [X31 + 0x20]
	0x036173B0 LDP X30, X25, [X31 + 0x10]
	0x036173B4 ADD X31, X31, 0x50
	0x036173B8 RET
	0x036173BC LDRB W0, [X0 + 0x9]
	0x036173C0 RET
	0x036173C4 LDRB W0, [X0 + 0x8]
	0x036173C8 RET
	0x036173CC STR X30, [X31 - 0x40]!
	0x036173D0 STP X24, X23, [X31 + 0x10]
	0x036173D4 STP X22, X21, [X31 + 0x20]
	0x036173D8 STP X20, X19, [X31 + 0x30]
	0x036173DC ADRP X21, 0xDC9000
	0x036173E0 ADRP X23, 0xB23000
	0x036173E4 LDRB W8, [X21 + 0x46D]
	0x036173E8 LDR X23, [X23 + 0xF70]
	0x036173EC MOV X19, X1
	0x036173F0 MOV X20, X0
	0x036173F4 TBNZ X8, 0x0, 0x3617418
	0x036173F8 ADRP X0, 0xAE5000
	0x036173FC LDR X0, [X0 + 0x8D8]
	0x03617400 BL 0x1C16CF4
	0x03617404 ADRP X0, 0xB23000
	0x03617408 LDR X0, [X0 + 0xF70]
	0x0361740C BL 0x1C16CF4
	0x03617410 MOVZ W8, 0x1
	0x03617414 STRB W8, [X21 + 0x46D]
	0x03617418 LDR X0, [X23]
	0x0361741C ADRP X21, 0xAE5000
	0x03617420 LDR W8, [X0 + 0xE0]
	0x03617424 LDR X21, [X21 + 0x8D8]
	0x03617428 CBNZ W8, 0x3617434
	0x0361742C BL 0x1C16DFC
	0x03617430 LDR X0, [X23]
	0x03617434 LDR X8, [X0 + 0xB8]
	0x03617438 LDR X0, [X21]
	0x0361743C LDR W1, [X8 + 0x10]
	0x03617440 BL 0x1C16D6C
	0x03617444 MOV X21, X0
	0x03617448 MOV X0, X20
	0x0361744C BL 0x3617094
	0x03617450 MOVZ W4, 0x4
	0x03617454 MOV X1, X21
	0x03617458 MOV W2, W31
	0x0361745C MOV W3, W0
	0x03617460 BL 0x3617764
	0x03617464 CBZ X21, 0x361750C
	0x03617468 LDR X8, [X23]
	0x0361746C LDR W10, [X21 + 0x18]
	0x03617470 LDR X8, [X8 + 0xB8]
	0x03617474 LDRSW X9, [X8]
	0x03617478 CMP W9, W10
	0x0361747C B.CS 0x3617508
	0x03617480 ADD X9, X21, X9, 0x1, LSL
	0x03617484 MOVZ W24, 0x2D

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0xDCA000
	007 Move W8, [X19+1118]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {41}
	012 Move X0, 0xADD000
	013 Move X0, [X0+1560]
	014 Call 0x1C17CF4
	015 Move X0, 0xB24000
	016 Move X0, [X0+3888]
	017 Call 0x1C17CF4
	018 Move X0, 0xB24000
	019 Move X0, [X0+3896]
	020 Call 0x1C17CF4
	021 Move X0, 0xB24000
	022 Move X0, [X0+3904]
	023 Call 0x1C17CF4
	024 Move X0, 0xB24000
	025 Move X0, [X0+3912]
	026 Call 0x1C17CF4
	027 Move X0, 0xB24000
	028 Move X0, [X0+3920]
	029 Call 0x1C17CF4
	030 Move X0, 0xB24000
	031 Move X0, [X0+3928]
	032 Call 0x1C17CF4
	033 Move X0, 0xB24000
	034 Move X0, [X0+3936]
	035 Call 0x1C17CF4
	036 Move X0, 0xB24000
	037 Move X0, [X0+3944]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X19+1118], W8
	041 Call XmlCharType.get_StaticLock
	042 Move X19, X0
	043 Move [X31+12], W31
	044 Add X1, X31, 12
	045 Move X2, X31
	046 Call Monitor.Enter, X0, X1
	047 Move X22, 0xB24000
	048 Move X22, [X22+3888]
	049 Move X8, [X22]
	050 Move X8, [X8+184]
	051 Move X20, [X8+8]
	052 Call 0x1C17D44
	053 Compare X20, 0
	054 JumpIfEqual {56}
	055 Move X21, X31
	056 Move X8, 0xADD000
	057 Move X8, [X8+1560]
	058 Move X0, [X8]
	059 Move W1, 0x10000
	060 Call 0x1C17D6C
	061 Move X8, 0xB24000
	062 Move X8, [X8+3912]
	063 Move X20, X0
	064 Move X1, [X8]
	065 Move W2, 1
	066 Call XmlCharType.SetProperties, X0, X1, X2
	067 Move X8, 0xB24000
	068 Move X8, [X8+3904]
	069 Move X1, [X8]
	070 Move W2, 2
	071 Move X0, X20
	072 Call XmlCharType.SetProperties, X0, X1, X2
	073 Move X8, 0xB24000
	074 Move X8, [X8+3936]
	075 Move X1, [X8]
	076 Move W2, 4
	077 Move X0, X20
	078 Call XmlCharType.SetProperties, X0, X1, X2
	079 Move X21, 0xB24000
	080 Move X21, [X21+3896]
	081 Move X1, [X21]
	082 Move W2, 8
	083 Move X0, X20
	084 Call XmlCharType.SetProperties, X0, X1, X2
	085 Move X8, 0xB24000
	086 Move X8, [X8+3944]
	087 Move X1, [X8]
	088 Move W2, 16
	089 Move X0, X20
	090 Call XmlCharType.SetProperties, X0, X1, X2
	091 Move X1, [X21]
	092 Move W2, 32
	093 Move X0, X20
	094 Call XmlCharType.SetProperties, X0, X1, X2
	095 Move X8, 0xB24000
	096 Move X8, [X8+3928]
	097 Move X1, [X8]
	098 Move W2, 64
	099 Move X0, X20
	100 Call XmlCharType.SetProperties, X0, X1, X2
	101 Move X8, 0xB24000
	102 Move X8, [X8+3920]
	103 Move X1, [X8]
	104 Move W2, 128
	105 Move X0, X20
	106 Call XmlCharType.SetProperties, X0, X1, X2
	107 Move X0, X31
	108 Call Thread.MemoryBarrier
	109 Call 0x1C17D44
	110 Move X8, [X22]
	111 Move X21, X31
	112 Move X8, [X8+184]
	113 Move [X8+8], X20
	114 Move W8, [X31+12]
	115 Compare W8, 0
	116 JumpIfEqual {120}
	117 Move X0, X19
	118 Move X1, X31
	119 Call Monitor.Exit, X0
	120 Compare X21, 0
	121 JumpIfNotEqual {128}
	122 Move X20, [X31+32]
	123 Move X19, [X31+40]
	124 Move X22, [X31+16]
	125 Move X21, [X31+24]
	126 Move X30, [X31+48]
	127 Return 
	128 Move X0, X21
	129 Call 0x1C17F18
	130 Move X20, X0
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X0, X20
	133 Call 0x3EB2AD0
	134 Move X21, [X0]
	135 Call 0x3EB2AE0
	136 Move X21, X31
	137 Move X20, X0
	138 Move W8, [X31+12]
	139 Compare W8, 0
	140 JumpIfEqual {144}
	141 Move X0, X19
	142 Move X1, X31
	143 Call Monitor.Exit, X0
	144 Compare X21, 0
	145 JumpIfNotEqual {148}
	146 Move X0, X20
	147 Call 0x1D2D690
	148 Move X0, X21
	149 Call 0x1C17F18
	150 Call 0x1991590

Method: System.Void SetProperties(System.Byte[] chProps, System.String ranges, System.Byte value)

Disassembly:
	0x03617488 STRH W24, [X9 + 0x20]
	0x0361748C LDR W22, [X8 + 0x4]
	0x03617490 MOV X0, X20
	0x03617494 BL 0x36170EC
	0x03617498 MOV X1, X21
	0x0361749C MOV W2, W22
	0x036174A0 MOV W3, W0
	0x036174A4 BL 0x36177CC
	0x036174A8 LDR X8, [X23]
	0x036174AC LDR W10, [X21 + 0x18]
	0x036174B0 LDR X8, [X8 + 0xB8]
	0x036174B4 LDRSW X9, [X8 + 0x8]
	0x036174B8 CMP W9, W10
	0x036174BC B.CS 0x3617508
	0x036174C0 ADD X9, X21, X9, 0x1, LSL
	0x036174C4 STRH W24, [X9 + 0x20]
	0x036174C8 LDR W22, [X8 + 0xC]
	0x036174CC MOV X0, X20
	0x036174D0 BL 0x3617144
	0x036174D4 MOV X1, X21
	0x036174D8 MOV W2, W22
	0x036174DC MOV W3, W0
	0x036174E0 BL 0x36177CC
	0x036174E4 CBZ X19, 0x361750C
	0x036174E8 MOV X0, X19
	0x036174EC MOV X1, X21
	0x036174F0 LDP X20, X19, [X31 + 0x30]
	0x036174F4 LDP X22, X21, [X31 + 0x20]
	0x036174F8 LDP X24, X23, [X31 + 0x10]
	0x036174FC MOV X2, X31
	0x03617500 LDR X30, [X31], #0x40
	0x03617504 B 0x3233FC8
	0x03617508 BL 0x1C16F28
	0x0361750C BL 0x1C16F20
	0x03617510 STP X30, X25, [X31 - 0x40]!
	0x03617514 STP X24, X23, [X31 + 0x10]
	0x03617518 STP X22, X21, [X31 + 0x20]
	0x0361751C STP X20, X19, [X31 + 0x30]
	0x03617520 ADRP X21, 0xDC9000
	0x03617524 ADRP X23, 0xB23000
	0x03617528 LDRB W8, [X21 + 0x46E]
	0x0361752C LDR X23, [X23 + 0xF70]
	0x03617530 MOV X19, X1
	0x03617534 MOV X20, X0
	0x03617538 TBNZ X8, 0x0, 0x361755C
	0x0361753C ADRP X0, 0xAE5000
	0x03617540 LDR X0, [X0 + 0x8D8]
	0x03617544 BL 0x1C16CF4
	0x03617548 ADRP X0, 0xB23000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Compare X1, 0
	010 JumpIfEqual {54}
	011 Move W8, [X1+16]
	012 Move X20, X1
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move W19, W2
	015 Move X21, X0
	016 Move W22, W31
	017 Add X24, X0, 32
	018 Move X0, X20
	019 Move W1, W22
	020 Move X2, X31
	021 Call String.get_Chars, X0, X1
	022 Move W23, W0
	023 And W25, W0, 0xFFFF
	024 Or W1, W22, 1
	025 Move X0, X20
	026 Move X2, X31
	027 Call String.get_Chars, X0, X1
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare X21, 0
	030 JumpIfEqual {54}
	031 Move W8, [X21+24]
	032 And X10, X0, 0xFFFF
	033 And X9, X23, 0xFFFF
	034 Add X10, X10, 1
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W11, [X24]
	037 Or W11, W11, W19
	038 Move [X24], W11
	039 Add X9, X9, 1
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W8, [X20+16]
	042 Add W22, W22, 2
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move X30, [X31+64]
	051 Move X25, [X31+72]
	052 Return 
	053 Call 0x1C17F28
	054 Call 0x1C17F20

Method: System.Void .ctor(System.Byte[] charProperties)

Disassembly:
	0x0361754C LDR X0, [X0 + 0xF70]
	0x03617550 BL 0x1C16CF4

ISIL:
	001 Move [X0], X1
	002 Return 

Method: System.Xml.XmlCharType get_Instance()

Disassembly:
	0x03617554 MOVZ W8, 0x1
	0x03617558 STRB W8, [X21 + 0x46E]
	0x0361755C LDR X0, [X23]
	0x03617560 ADRP X24, 0xAE5000
	0x03617564 LDR W8, [X0 + 0xE0]
	0x03617568 LDR X24, [X24 + 0x8D8]
	0x0361756C CBNZ W8, 0x3617578
	0x03617570 BL 0x1C16DFC
	0x03617574 LDR X0, [X23]
	0x03617578 LDR X8, [X0 + 0xB8]
	0x0361757C LDR X0, [X24]
	0x03617580 LDR W1, [X8 + 0x28]
	0x03617584 BL 0x1C16D6C
	0x03617588 MOV X21, X0
	0x0361758C MOV X0, X20
	0x03617590 BL 0x361719C
	0x03617594 MOV X1, X21
	0x03617598 MOV W2, W31
	0x0361759C MOV W3, W0
	0x036175A0 BL 0x36177CC
	0x036175A4 CBZ X21, 0x3617760
	0x036175A8 LDR X8, [X23]
	0x036175AC LDR W10, [X21 + 0x18]
	0x036175B0 LDR X8, [X8 + 0xB8]
	0x036175B4 LDRSW X9, [X8 + 0x18]
	0x036175B8 CMP W9, W10

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDCA000
	005 Move X19, 0xB24000
	006 Move W8, [X20+1119]
	007 Move X19, [X19+3888]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB24000
	013 Move X0, [X0+3888]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1119], W8
	017 Move X8, [X19]
	018 Move X8, [X8+184]
	019 Move X20, [X8+8]
	020 Call 0x1C17D44
	021 Compare X20, 0
	022 JumpIfNotEqual {24}
	023 Call XmlCharType.InitInstance
	024 Move X8, [X19]
	025 Move X8, [X8+184]
	026 Move X19, [X8+8]
	027 Call 0x1C17D44
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return X0

