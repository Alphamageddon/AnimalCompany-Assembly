Type: System.Xml.Bits

Method: System.Int32 Count(System.UInt32 num)

Disassembly:
	0x03616FD8 LDR X0, [X0 + 0x8D8]
	0x03616FDC BL 0x1C16CF4
	0x03616FE0 ADRP X0, 0xB24000
	0x03616FE4 LDR X0, [X0 + 0xFA0]
	0x03616FE8 BL 0x1C16CF4
	0x03616FEC ADRP X0, 0xB24000
	0x03616FF0 LDR X0, [X0 + 0xF98]
	0x03616FF4 BL 0x1C16CF4
	0x03616FF8 ADRP X0, 0xB21000
	0x03616FFC LDR X0, [X0 + 0x400]
	0x03617000 BL 0x1C16CF4
	0x03617004 MOVZ W8, 0x1
	0x03617008 STRB W8, [X23 + 0x463]
	0x0361700C BL 0x3616554
	0x03617010 LDR X8, [X20]
	0x03617014 MOVZ W1, 0x3
	0x03617018 LDR X8, [X8 + 0xB8]
	0x0361701C STR X0, [X8]
	0x03617020 LDR X0, [X22]
	0x03617024 BL 0x1C16D6C
	0x03617028 LDR X1, [X19]
	0x0361702C MOV X2, X31
	0x03617030 MOV X19, X0
	0x03617034 BL 0x32C5BD8
	0x03617038 LDR X8, [X20]
	0x0361703C MOVZ W9, 0x7
	0x03617040 MOVZ W1, 0x4
	0x03617044 LDR X8, [X8 + 0xB8]
	0x03617048 STR X19, [X8 + 0x8]
	0x0361704C STR W9, [X8 + 0x10]
	0x03617050 LDR X0, [X22]
	0x03617054 BL 0x1C16D6C
	0x03617058 LDR X1, [X21]
	0x0361705C MOV X2, X31
	0x03617060 MOV X19, X0
	0x03617064 BL 0x32C5BD8
	0x03617068 LDR X8, [X20]
	0x0361706C LDP X22, X21, [X31 + 0x10]
	0x03617070 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xDCB000
	006 Move X20, 0xB25000
	007 Move W8, [X21+1112]
	008 Move X20, [X20+3872]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB25000
	015 Move X0, [X0+3872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1112], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move W9, [X8]
	027 Move W10, [X8+4]
	028 And W11, W9, W19
	029 And W9, W9, W19
	030 Add W9, W9, W11
	031 And W11, W9, W10
	032 And W9, W10, W9
	033 Move W12, [X8+8]
	034 Move W10, [X8+12]
	035 Add W9, W9, W11
	036 Move W8, [X8+16]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 And W11, W9, W12
	040 And W9, W12, W9
	041 Add W9, W9, W11
	042 And W11, W9, W10
	043 And W9, W10, W9
	044 Add W9, W9, W11
	045 And W8, W9, W8
	046 Add W0, W8, W9
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: System.Int32 LeastPosition(System.UInt32 num)

Disassembly:
	0x03617074 STR X19, [X8 + 0x18]
	0x03617078 LDP X20, X19, [X31 + 0x20]
	0x0361707C LDP X30, X23, [X31], #0x30
	0x03617080 RET
	0x03617084 LDRB W0, [X0 + 0xB]
	0x03617088 RET
	0x0361708C LDRB W0, [X0 + 0xA]
	0x03617090 RET
	0x03617094 STP X30, X21, [X31 - 0x20]!
	0x03617098 STP X20, X19, [X31 + 0x10]
	0x0361709C ADRP X20, 0xDC9000
	0x036170A0 ADRP X21, 0xADD000
	0x036170A4 LDRB W8, [X20 + 0x465]
	0x036170A8 LDR X21, [X21 + 0x9F0]
	0x036170AC MOV X19, X0
	0x036170B0 TBNZ X8, 0x0, 0x36170C8
	0x036170B4 ADRP X0, 0xADD000
	0x036170B8 LDR X0, [X0 + 0x9F0]
	0x036170BC BL 0x1C16CF4
	0x036170C0 MOVZ W8, 0x1
	0x036170C4 STRB W8, [X20 + 0x465]
	0x036170C8 LDR X0, [X21]
	0x036170CC LDR W8, [X0 + 0xE0]
	0x036170D0 CBNZ W8, 0x36170D8
	0x036170D4 BL 0x1C16DFC
	0x036170D8 MOV X0, X19
	0x036170DC LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xDCA000
	005 Move W8, [X20+1113]
	006 Move W19, W0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0xB24000
	012 Move X0, [X0+3872]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1113], W8
	016 Compare W19, 0
	017 JumpIfEqual {32}
	018 Move X8, 0xB24000
	019 Move X8, [X8+3872]
	020 Move X0, [X8]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Subtract W8, W19, 1
	026 Xor W0, W8, W19
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Call Bits.Count, X0
	031 Return X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move W0, W31
	035 Move X30, [X31+32]
	036 Return X0

Method: System.Void .cctor()

Disassembly:
	0x036170E0 MOV X1, X31
	0x036170E4 LDP X30, X21, [X31], #0x20
	0x036170E8 B 0x3361868
	0x036170EC STP X30, X21, [X31 - 0x20]!
	0x036170F0 STP X20, X19, [X31 + 0x10]
	0x036170F4 ADRP X20, 0xDC9000
	0x036170F8 ADRP X21, 0xADD000
	0x036170FC LDRB W8, [X20 + 0x466]
	0x03617100 LDR X21, [X21 + 0x9F0]
	0x03617104 MOV X19, X0
	0x03617108 TBNZ X8, 0x0, 0x3617120
	0x0361710C ADRP X0, 0xADD000
	0x03617110 LDR X0, [X0 + 0x9F0]
	0x03617114 BL 0x1C16CF4
	0x03617118 MOVZ W8, 0x1
	0x0361711C STRB W8, [X20 + 0x466]
	0x03617120 LDR X0, [X21]
	0x03617124 LDR W8, [X0 + 0xE0]
	0x03617128 CBNZ W8, 0x3617130
	0x0361712C BL 0x1C16DFC
	0x03617130 MOV X0, X19
	0x03617134 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0xDCA000
	005 Move X20, 0xB24000
	006 Move W8, [X19+1114]
	007 Move X20, [X20+3872]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0xB24000
	013 Move X0, [X0+3872]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1114], W8
	017 Move X8, [X20]
	018 Move X9, -45268992
	019 Move V0, [X9+101]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X8, [X8+184]
	023 Move W9, 0xFFFF
	024 Move [X8], V0
	025 Move [X8+16], W9
	026 Move X30, [X31+32]
	027 Return 

