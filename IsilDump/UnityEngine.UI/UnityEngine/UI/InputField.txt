Type: UnityEngine.UI.InputField

Method: UnityEngine.EventSystems.BaseInput get_input()

Disassembly:
	0x03E26300 CBZ W8, 0x3E26344
	0x03E26304 LDR V0, [X0 + 0x188]
	0x03E26308 MOV X19, X0
	0x03E2630C FCMP S0, 0x0
	0x03E26310 B.LE 0x3E2633C
	0x03E26314 LDR X8, [X19 + 0x1D8]
	0x03E26318 CBNZ X8, 0x3E26344
	0x03E2631C MOV X0, X19
	0x03E26320 BL 0x3E27898
	0x03E26324 MOV X1, X0
	0x03E26328 MOV X0, X19
	0x03E2632C MOV X2, X31
	0x03E26330 BL 0x3C366FC
	0x03E26334 STR X0, [X19 + 0x1D8]
	0x03E26338 B 0x3E26344
	0x03E2633C MOVZ W8, 0x1
	0x03E26340 STRB W8, [X19 + 0x1D4]
	0x03E26344 LDP X30, X19, [X31], #0x10
	0x03E26348 RET
	0x03E2634C LDR W0, [X0 + 0x18C]
	0x03E26350 RET
	0x03E26354 STR X30, [X31 - 0x30]!
	0x03E26358 STP X22, X21, [X31 + 0x10]
	0x03E2635C STP X20, X19, [X31 + 0x20]
	0x03E26360 ADRP X22, 0x5C2000
	0x03E26364 ADRP X21, 0x33C000
	0x03E26368 LDRB W8, [X22 + 0x6C5]
	0x03E2636C LDR X21, [X21 + 0x5A8]
	0x03E26370 MOV W20, W1
	0x03E26374 MOV X19, X0
	0x03E26378 TBNZ X8, 0x0, 0x3E26390
	0x03E2637C ADRP X0, 0x33C000
	0x03E26380 LDR X0, [X0 + 0x5A8]
	0x03E26384 BL 0x1C16CF4
	0x03E26388 MOVZ W8, 0x1
	0x03E2638C STRB W8, [X22 + 0x6C5]
	0x03E26390 LDR X2, [X21]
	0x03E26394 ADD X0, X19, 0x18C
	0x03E26398 MOV W1, W20
	0x03E2639C BL 0x2254390
	0x03E263A0 TBZ X0, 0x0, 0x3E263B8
	0x03E263A4 MOV X0, X19
	0x03E263A8 LDP X20, X19, [X31 + 0x20]
	0x03E263AC LDP X22, X21, [X31 + 0x10]
	0x03E263B0 LDR X30, [X31], #0x30
	0x03E263B4 B 0x3E263C8
	0x03E263B8 LDP X20, X19, [X31 + 0x20]
	0x03E263BC LDP X22, X21, [X31 + 0x10]
	0x03E263C0 LDR X30, [X31], #0x30
	0x03E263C4 RET
	0x03E263C8 STP X30, X21, [X31 - 0x20]!
	0x03E263CC STP X20, X19, [X31 + 0x10]
	0x03E263D0 ADRP X20, 0x5C2000
	0x03E263D4 ADRP X21, 0x332000
	0x03E263D8 LDRB W8, [X20 + 0x6F7]
	0x03E263DC LDR X21, [X21 + 0x718]
	0x03E263E0 MOV X19, X0
	0x03E263E4 TBNZ X8, 0x0, 0x3E263FC
	0x03E263E8 ADRP X0, 0x332000
	0x03E263EC LDR X0, [X0 + 0x718]
	0x03E263F0 BL 0x1C16CF4
	0x03E263F4 MOVZ W8, 0x1
	0x03E263F8 STRB W8, [X20 + 0x6F7]
	0x03E263FC LDR X0, [X21]
	0x03E26400 LDR W8, [X0 + 0xE0]
	0x03E26404 CBNZ W8, 0x3E2640C
	0x03E26408 BL 0x1C16DFC
	0x03E2640C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x5C3000
	006 Move X20, 0x2F5000
	007 Move W8, [X19+1723]
	008 Move X20, [X20+3576]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x2F5000
	014 Move X0, [X0+3576]
	015 Call 0x1C17CF4
	016 Move X0, 0x2CE000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+1723], W8
	021 Move X0, [X20]
	022 Move X21, 0x2CE000
	023 Move W8, [X0+224]
	024 Move X21, [X21+1432]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X31
	029 Call EventSystem.get_current
	030 Move X8, [X21]
	031 Move X19, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X1, X31
	039 Call Object.op_Implicit, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {86}
	044 Move X0, [X20]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X31
	050 Call EventSystem.get_current
	051 Compare X0, 0
	052 JumpIfEqual {92}
	053 Move X8, [X21]
	054 Move X19, [X0+40]
	055 Move W9, [X8+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {60}
	058 Move X0, X8
	059 Call 0x1C17DFC
	060 Move X0, X19
	061 Move X1, X31
	062 Call Object.op_Implicit, X0
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {86}
	067 Move X0, [X20]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X31
	073 Call EventSystem.get_current
	074 Compare X0, 0
	075 JumpIfEqual {92}
	076 Move X0, [X0+40]
	077 Compare X0, 0
	078 JumpIfEqual {92}
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X1, X31
	082 Move X30, [X31+32]
	083 Move X21, [X31+40]
	084 Call BaseInputModule.get_input, X0
	085 Return X0
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X0, X31
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Return X0
	092 Call 0x1C17F20

Method: System.String get_compositionString()

Disassembly:
	0x03E26410 LDP X20, X19, [X31 + 0x10]
	0x03E26414 MOV X1, X31
	0x03E26418 LDP X30, X21, [X31], #0x20
	0x03E2641C B 0x3CD16F4
	0x03E26420 LDR X0, [X0 + 0x108]
	0x03E26424 RET
	0x03E26428 STP X30, X25, [X31 - 0x40]!
	0x03E2642C STP X24, X23, [X31 + 0x10]
	0x03E26430 STP X22, X21, [X31 + 0x20]
	0x03E26434 STP X20, X19, [X31 + 0x30]
	0x03E26438 ADRP X21, 0x5C2000
	0x03E2643C ADRP X24, 0x2CD000
	0x03E26440 LDRB W8, [X21 + 0x6C6]
	0x03E26444 LDR X24, [X24 + 0x598]
	0x03E26448 MOV X20, X1
	0x03E2644C MOV X19, X0
	0x03E26450 TBNZ X8, 0x0, 0x3E264A4
	0x03E26454 ADRP X0, 0x344000
	0x03E26458 LDR X0, [X0 + 0xF38]
	0x03E2645C BL 0x1C16CF4
	0x03E26460 ADRP X0, 0x344000
	0x03E26464 LDR X0, [X0 + 0xF40]
	0x03E26468 BL 0x1C16CF4
	0x03E2646C ADRP X0, 0x344000
	0x03E26470 LDR X0, [X0 + 0xF48]
	0x03E26474 BL 0x1C16CF4
	0x03E26478 ADRP X0, 0x2CD000
	0x03E2647C LDR X0, [X0 + 0x598]
	0x03E26480 BL 0x1C16CF4
	0x03E26484 ADRP X0, 0x344000
	0x03E26488 LDR X0, [X0 + 0xF50]
	0x03E2648C BL 0x1C16CF4
	0x03E26490 ADRP X0, 0x2F4000
	0x03E26494 LDR X0, [X0 + 0xE30]
	0x03E26498 BL 0x1C16CF4
	0x03E2649C MOVZ W8, 0x1
	0x03E264A0 STRB W8, [X21 + 0x6C6]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5C3000
	005 Move X19, 0x2CE000
	006 Move W8, [X20+1724]
	007 Move X19, [X19+1432]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2CE000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1724], W8
	017 Call InputField.get_input, X0
	018 Move X8, [X19]
	019 Move X19, X0
	020 Move W9, [X8+224]
	021 Compare W9, 0
	022 JumpIfNotEqual {25}
	023 Move X0, X8
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {43}
	033 Call InputField.get_input, X0
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move X8, [X0]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X2, [X8+584]
	040 Move X1, [X8+592]
	041 Move X30, [X31+32]
	042 CallNoReturn X2
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X0, X31
	046 Move X30, [X31+32]
	047 Call Input.get_compositionString
	048 Return X0
	049 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03E264A4 LDR X0, [X24]
	0x03E264A8 LDR X21, [X19 + 0x108]
	0x03E264AC LDR W8, [X0 + 0xE0]
	0x03E264B0 CBNZ W8, 0x3E264B8
	0x03E264B4 BL 0x1C16DFC
	0x03E264B8 ADRP X23, 0x2F4000
	0x03E264BC ADRP X25, 0x344000
	0x03E264C0 LDR X23, [X23 + 0xE30]
	0x03E264C4 LDR X25, [X25 + 0xF38]
	0x03E264C8 MOV X0, X21
	0x03E264CC MOV X1, X31
	0x03E264D0 MOV X2, X31
	0x03E264D4 BL 0x3C354F8
	0x03E264D8 TBZ X0, 0x0, 0x3E26588
	0x03E264DC LDR X0, [X23]
	0x03E264E0 LDR X21, [X19 + 0x108]
	0x03E264E4 BL 0x1C16F10
	0x03E264E8 LDR X2, [X25]
	0x03E264EC MOV X1, X19
	0x03E264F0 MOV X3, X31
	0x03E264F4 MOV X22, X0
	0x03E264F8 BL 0x3C45BE8
	0x03E264FC CBZ X21, 0x3E266A4
	0x03E26500 MOV X0, X21
	0x03E26504 MOV X1, X22
	0x03E26508 MOV X2, X31
	0x03E2650C BL 0x3CDDFB8
	0x03E26510 LDR X0, [X23]
	0x03E26514 LDR X21, [X19 + 0x108]
	0x03E26518 BL 0x1C16F10
	0x03E2651C ADRP X8, 0x344000
	0x03E26520 LDR X8, [X8 + 0xF48]
	0x03E26524 MOV X1, X19
	0x03E26528 MOV X3, X31
	0x03E2652C MOV X22, X0
	0x03E26530 LDR X2, [X8]
	0x03E26534 BL 0x3C45BE8
	0x03E26538 CBZ X21, 0x3E266A4
	0x03E2653C MOV X0, X21
	0x03E26540 MOV X1, X22
	0x03E26544 MOV X2, X31
	0x03E26548 BL 0x3CDDFB8
	0x03E2654C LDR X0, [X23]
	0x03E26550 LDR X21, [X19 + 0x108]
	0x03E26554 BL 0x1C16F10
	0x03E26558 ADRP X8, 0x344000
	0x03E2655C LDR X8, [X8 + 0xF40]
	0x03E26560 MOV X1, X19
	0x03E26564 MOV X3, X31
	0x03E26568 MOV X22, X0
	0x03E2656C LDR X2, [X8]
	0x03E26570 BL 0x3C45BE8
	0x03E26574 CBZ X21, 0x3E266A4
	0x03E26578 MOV X0, X21
	0x03E2657C MOV X1, X22
	0x03E26580 MOV X2, X31
	0x03E26584 BL 0x3CDE0B8
	0x03E26588 ADRP X8, 0x344000
	0x03E2658C LDR X8, [X8 + 0xF50]
	0x03E26590 ADD X0, X19, 0x108
	0x03E26594 MOV X1, X20
	0x03E26598 LDR X2, [X8]
	0x03E2659C BL 0x2254190
	0x03E265A0 TBZ X0, 0x0, 0x3E26690
	0x03E265A4 MOV X0, X19
	0x03E265A8 BL 0x3E25718
	0x03E265AC LDR X0, [X24]
	0x03E265B0 LDR X20, [X19 + 0x108]
	0x03E265B4 LDR W8, [X0 + 0xE0]
	0x03E265B8 CBNZ W8, 0x3E265C0
	0x03E265BC BL 0x1C16DFC
	0x03E265C0 MOV X0, X20
	0x03E265C4 MOV X1, X31
	0x03E265C8 MOV X2, X31
	0x03E265CC BL 0x3C354F8
	0x03E265D0 TBZ X0, 0x0, 0x3E26690
	0x03E265D4 LDR X0, [X23]
	0x03E265D8 LDR X20, [X19 + 0x108]
	0x03E265DC BL 0x1C16F10
	0x03E265E0 LDR X2, [X25]
	0x03E265E4 MOV X1, X19
	0x03E265E8 MOV X3, X31
	0x03E265EC MOV X21, X0
	0x03E265F0 BL 0x3C45BE8
	0x03E265F4 CBZ X20, 0x3E266A4
	0x03E265F8 MOV X0, X20
	0x03E265FC MOV X1, X21
	0x03E26600 MOV X2, X31
	0x03E26604 BL 0x3CDDF38
	0x03E26608 LDR X0, [X23]
	0x03E2660C LDR X20, [X19 + 0x108]
	0x03E26610 BL 0x1C16F10
	0x03E26614 ADRP X8, 0x344000
	0x03E26618 LDR X8, [X8 + 0xF48]
	0x03E2661C MOV X1, X19
	0x03E26620 MOV X3, X31
	0x03E26624 MOV X21, X0
	0x03E26628 LDR X2, [X8]
	0x03E2662C BL 0x3C45BE8
	0x03E26630 CBZ X20, 0x3E266A4
	0x03E26634 MOV X0, X20
	0x03E26638 MOV X1, X21
	0x03E2663C MOV X2, X31

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X28, 0x5C3000
	013 Move X20, 0x345000
	014 Move X27, 0x345000
	015 Move X26, 0x345000
	016 Move X25, 0x2D0000
	017 Move X23, 0x2CE000
	018 Move X22, 0x334000
	019 Move X21, 0x333000
	020 Move X20, [X20+3840]
	021 Move X27, [X27+3848]
	022 Move W8, [X28+1725]
	023 Move X26, [X26+3856]
	024 Move X25, [X25+632]
	025 Move X23, [X23+2440]
	026 Move X22, [X22+32]
	027 Move X21, [X21+2648]
	028 Move X19, X0
	029 Add X24, X0, 344
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {57}
	034 Move X0, 0x345000
	035 Move X0, [X0+3848]
	036 Call 0x1C17CF4
	037 Move X0, 0x334000
	038 Move X0, [X0+32]
	039 Call 0x1C17CF4
	040 Move X0, 0x345000
	041 Move X0, [X0+3856]
	042 Call 0x1C17CF4
	043 Move X0, 0x333000
	044 Move X0, [X0+2648]
	045 Call 0x1C17CF4
	046 Move X0, 0x2D0000
	047 Move X0, [X0+632]
	048 Call 0x1C17CF4
	049 Move X0, 0x345000
	050 Move X0, [X0+3840]
	051 Call 0x1C17CF4
	052 Move X0, 0x2CE000
	053 Move X0, [X0+2440]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X28+1725], W8
	057 Move W8, 42
	058 NotImplemented "Instruction STRH not yet implemented."
	059 Move X0, [X20]
	060 Call 0x1C17F10
	061 Move X20, X0
	062 Call SubmitEvent..ctor, X0
	063 Move [X19+312], X20
	064 Move X0, [X27]
	065 Call 0x1C17F10
	066 Move X20, X0
	067 Call EndEditEvent..ctor, X0
	068 Move [X19+320], X20
	069 Move X0, [X26]
	070 Call 0x1C17F10
	071 Move X20, X0
	072 Call OnChangeEvent..ctor, X0
	073 Move X8, -53710848
	074 Move V0, [X8+145]
	075 Move X8, -53710848
	076 Move V1, [X8+238]
	077 Move [X19+328], X20
	078 Move [X24], V0
	079 Move X9, 0x999A
	080 Move [X24+20], V1
	081 Move X8, [X25]
	082 NotImplemented "Instruction MOVK not yet implemented."
	083 NotImplemented "Instruction MOVK not yet implemented."
	084 Move W10, 1
	085 Move X8, [X8+184]
	086 Move X8, [X8]
	087 Move [X19+401], W10
	088 Move [X19+384], X8
	089 Move [X19+392], X9
	090 Move X8, [X23]
	091 Move [X19+504], X8
	092 Move X0, [X22]
	093 Call 0x1C17F10
	094 Move X1, X31
	095 Move X20, X0
	096 Call Event..ctor, X0
	097 Move [X19+536], X20
	098 Move X0, [X21]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X0, X19
	104 Move X1, X31
	105 Call Selectable..ctor, X0
	106 Move X0, X19
	107 Move X20, [X31+80]
	108 Move X19, [X31+88]
	109 Move X22, [X31+64]
	110 Move X21, [X31+72]
	111 Move X24, [X31+48]
	112 Move X23, [X31+56]
	113 Move X26, [X31+32]
	114 Move X25, [X31+40]
	115 Move X28, [X31+16]
	116 Move X27, [X31+24]
	117 Move X30, [X31+96]
	118 Call InputField.EnforceTextHOverflow, X0
	119 Return 

Method: UnityEngine.Mesh get_mesh()

Disassembly:
	0x03E267AC RET
	0x03E267B0 STP X30, X19, [X31 - 0x10]!
	0x03E267B4 MOV X19, X0
	0x03E267B8 ADD X0, X0, 0x16C
	0x03E267BC MOV X1, X31
	0x03E267C0 BL 0x3E424C8
	0x03E267C4 TBZ X0, 0x0, 0x3E267D4
	0x03E267C8 MOV X0, X19
	0x03E267CC LDP X30, X19, [X31], #0x10
	0x03E267D0 B 0x3E263C8
	0x03E267D4 LDP X30, X19, [X31], #0x10
	0x03E267D8 RET
	0x03E267DC LDR X0, [X0 + 0x140]
	0x03E267E0 RET
	0x03E267E4 STR X30, [X31 - 0x30]!
	0x03E267E8 STP X22, X21, [X31 + 0x10]
	0x03E267EC STP X20, X19, [X31 + 0x20]
	0x03E267F0 ADRP X22, 0x5C2000
	0x03E267F4 ADRP X21, 0x344000
	0x03E267F8 LDRB W8, [X22 + 0x6C8]
	0x03E267FC LDR X21, [X21 + 0xF60]
	0x03E26800 MOV X19, X1
	0x03E26804 MOV X20, X0
	0x03E26808 TBNZ X8, 0x0, 0x3E26820
	0x03E2680C ADRP X0, 0x344000
	0x03E26810 LDR X0, [X0 + 0xF60]
	0x03E26814 BL 0x1C16CF4
	0x03E26818 MOVZ W8, 0x1
	0x03E2681C STRB W8, [X22 + 0x6C8]
	0x03E26820 LDR X2, [X21]
	0x03E26824 ADD X0, X20, 0x140
	0x03E26828 MOV X1, X19
	0x03E2682C LDP X20, X19, [X31 + 0x20]
	0x03E26830 LDP X22, X21, [X31 + 0x10]
	0x03E26834 LDR X30, [X31], #0x30
	0x03E26838 B 0x2254190
	0x03E2683C LDR X0, [X0 + 0x138]
	0x03E26840 RET
	0x03E26844 STR X30, [X31 - 0x30]!
	0x03E26848 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5C3000
	006 Move X20, 0x2CE000
	007 Move W8, [X21+1726]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2D5000
	015 Move X0, [X0+1792]
	016 Call 0x1C17CF4
	017 Move X0, 0x2CE000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1726], W8
	022 Move X0, [X20]
	023 Move X20, [X19+456]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {44}
	036 Move X8, 0x2D5000
	037 Move X8, [X8+1792]
	038 Move X0, [X8]
	039 Call 0x1C17F10
	040 Move X1, X31
	041 Move X20, X0
	042 Call Mesh..ctor, X0
	043 Move [X19+456], X20
	044 Move X20, [X19+456]
	045 Move X0, X20
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return X0

Method: UnityEngine.TextGenerator get_cachedInputTextGenerator()

Disassembly:
	0x03E2684C STP X20, X19, [X31 + 0x20]
	0x03E26850 ADRP X22, 0x5C2000
	0x03E26854 ADRP X21, 0x344000
	0x03E26858 LDRB W8, [X22 + 0x6C9]
	0x03E2685C LDR X21, [X21 + 0xF68]
	0x03E26860 MOV X19, X1
	0x03E26864 MOV X20, X0
	0x03E26868 TBNZ X8, 0x0, 0x3E26880
	0x03E2686C ADRP X0, 0x344000
	0x03E26870 LDR X0, [X0 + 0xF68]
	0x03E26874 BL 0x1C16CF4
	0x03E26878 MOVZ W8, 0x1
	0x03E2687C STRB W8, [X22 + 0x6C9]
	0x03E26880 LDR X2, [X21]
	0x03E26884 ADD X0, X20, 0x138
	0x03E26888 MOV X1, X19
	0x03E2688C LDP X20, X19, [X31 + 0x20]
	0x03E26890 LDP X22, X21, [X31 + 0x10]
	0x03E26894 LDR X30, [X31], #0x30
	0x03E26898 B 0x2254190
	0x03E2689C LDR X0, [X0 + 0x148]
	0x03E268A0 RET
	0x03E268A4 B 0x3E268A8
	0x03E268A8 STR X30, [X31 - 0x30]!
	0x03E268AC STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5C3000
	005 Move W8, [X20+1727]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x345000
	012 Move X0, [X0+3864]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1727], W8
	016 Move X20, [X19+432]
	017 Compare X20, 0
	018 JumpIfNotEqual {27}
	019 Move X8, 0x345000
	020 Move X8, [X8+3864]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call TextGenerator..ctor, X0
	026 Move [X19+432], X20
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0

Method: System.Void set_shouldHideMobileInput(System.Boolean value)

Disassembly:
	0x03E268B0 STP X20, X19, [X31 + 0x20]
	0x03E268B4 ADRP X22, 0x5C2000
	0x03E268B8 ADRP X21, 0x344000
	0x03E268BC LDRB W8, [X22 + 0x6CA]
	0x03E268C0 LDR X21, [X21 + 0xF70]
	0x03E268C4 MOV X19, X1
	0x03E268C8 MOV X20, X0
	0x03E268CC TBNZ X8, 0x0, 0x3E268E4
	0x03E268D0 ADRP X0, 0x344000
	0x03E268D4 LDR X0, [X0 + 0xF70]
	0x03E268D8 BL 0x1C16CF4
	0x03E268DC MOVZ W8, 0x1
	0x03E268E0 STRB W8, [X22 + 0x6CA]
	0x03E268E4 LDR X2, [X21]
	0x03E268E8 ADD X0, X20, 0x148
	0x03E268EC MOV X1, X19
	0x03E268F0 LDP X20, X19, [X31 + 0x20]
	0x03E268F4 LDP X22, X21, [X31 + 0x10]
	0x03E268F8 LDR X30, [X31], #0x30
	0x03E268FC B 0x2254190
	0x03E26900 LDR X0, [X0 + 0x148]
	0x03E26904 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C3000
	007 Move X21, 0x33D000
	008 Move W8, [X22+1728]
	009 Move X21, [X21+1424]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x33D000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1728], W8
	021 Move X2, [X21]
	022 Add X0, X20, 300
	023 And W1, W19, 1
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x22551E0, X0, X1
	030 Return 

Method: System.Boolean get_shouldHideMobileInput()

Disassembly:
	0x03E26908 LDR X0, [X0 + 0x150]
	0x03E2690C RET
	0x03E26910 STR X30, [X31 - 0x30]!
	0x03E26914 STP X22, X21, [X31 + 0x10]
	0x03E26918 STP X20, X19, [X31 + 0x20]
	0x03E2691C ADRP X22, 0x5C2000
	0x03E26920 ADRP X21, 0x344000
	0x03E26924 LDRB W8, [X22 + 0x6CB]
	0x03E26928 LDR X21, [X21 + 0xF78]
	0x03E2692C MOV X19, X1
	0x03E26930 MOV X20, X0
	0x03E26934 TBNZ X8, 0x0, 0x3E2694C
	0x03E26938 ADRP X0, 0x344000
	0x03E2693C LDR X0, [X0 + 0xF78]
	0x03E26940 BL 0x1C16CF4
	0x03E26944 MOVZ W8, 0x1
	0x03E26948 STRB W8, [X22 + 0x6CB]
	0x03E2694C LDR X2, [X21]
	0x03E26950 ADD X0, X20, 0x150
	0x03E26954 MOV X1, X19
	0x03E26958 LDP X20, X19, [X31 + 0x20]
	0x03E2695C LDP X22, X21, [X31 + 0x10]
	0x03E26960 LDR X30, [X31], #0x30
	0x03E26964 B 0x2254190
	0x03E26968 LDR W0, [X0 + 0x134]
	0x03E2696C RET
	0x03E26970 STR X30, [X31 - 0x30]!
	0x03E26974 STP X22, X21, [X31 + 0x10]
	0x03E26978 STP X20, X19, [X31 + 0x20]
	0x03E2697C ADRP X22, 0x5C2000
	0x03E26980 ADRP X21, 0x2CD000
	0x03E26984 LDRB W8, [X22 + 0x6CC]
	0x03E26988 LDR X21, [X21 + 0x5A8]
	0x03E2698C MOV W19, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C3000
	006 Move X21, 0x2CE000
	007 Move W8, [X20+1729]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2CE000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1729], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_platform
	026 Move W8, W0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move W0, 1
	029 Move W9, 2304
	030 NotImplemented "Instruction LSLV not yet implemented."
	031 NotImplemented "Instruction MOVK not yet implemented."
	032 And W31, W8, W9
	033 Move W8, [X19+300]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSET not yet implemented."
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return X0

Method: System.Void set_shouldActivateOnSelect(System.Boolean value)

Disassembly:
	0x03E26990 MOV X20, X0
	0x03E26994 TBNZ X8, 0x0, 0x3E269B8
	0x03E26998 ADRP X0, 0x2CD000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+401], W8
	003 Return 

Method: System.Boolean get_shouldActivateOnSelect()

Disassembly:
	0x03E2699C LDR X0, [X0 + 0x5A8]
	0x03E269A0 BL 0x1C16CF4
	0x03E269A4 ADRP X0, 0x33C000
	0x03E269A8 LDR X0, [X0 + 0x5A8]
	0x03E269AC BL 0x1C16CF4
	0x03E269B0 MOVZ W8, 0x1
	0x03E269B4 STRB W8, [X22 + 0x6CC]
	0x03E269B8 LDR X0, [X21]
	0x03E269BC ADRP X22, 0x33C000
	0x03E269C0 ADD X21, X20, 0x134
	0x03E269C4 LDR W8, [X0 + 0xE0]
	0x03E269C8 LDR X22, [X22 + 0x5A8]
	0x03E269CC CBNZ W8, 0x3E269D4
	0x03E269D0 BL 0x1C16DFC
	0x03E269D4 MOV W0, W31
	0x03E269D8 MOV W1, W19
	0x03E269DC MOV X2, X31
	0x03E269E0 BL 0x337EDF0
	0x03E269E4 LDR X2, [X22]
	0x03E269E8 MOV W1, W0
	0x03E269EC MOV X0, X21
	0x03E269F0 BL 0x2254390
	0x03E269F4 TBZ X0, 0x0, 0x3E26A20
	0x03E269F8 MOV X0, X20
	0x03E269FC BL 0x3E25E74
	0x03E26A00 LDR X0, [X20 + 0x100]
	0x03E26A04 CBZ X0, 0x3E26A20
	0x03E26A08 MOV W1, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5C3000
	005 Move W8, [X20+1730]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2CE000
	012 Move X0, [X0+2416]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1730], W8
	016 Move W8, [X19+401]
	017 Compare W8, 0
	018 JumpIfEqual {30}
	019 Move X8, 0x2CE000
	020 Move X8, [X8+2416]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Call Application.get_platform
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move W0, W31
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0

Method: System.String get_text()

Disassembly:
	0x03E26A0C LDP X20, X19, [X31 + 0x20]
	0x03E26A10 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move X0, [X0+384]
	002 Return X0

Method: System.Void set_text(System.String value)

Disassembly:
	0x03E26A14 MOV X2, X31
	0x03E26A18 LDR X30, [X31], #0x30

ISIL:
	001 Move W2, 1

Method: System.Void SetTextWithoutNotify(System.String input)

Disassembly:
	0x03E26D4C STP X22, X21, [X31 + 0x10]
	0x03E26D50 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W2, W31
	002 Call InputField.SetText, X0, X1, X2
	003 Return 

Method: System.Void SetText(System.String value, System.Boolean sendCallback = True)

Disassembly:
	0x03E26A1C B 0x3C3D094
	0x03E26A20 LDP X20, X19, [X31 + 0x20]
	0x03E26A24 LDP X22, X21, [X31 + 0x10]
	0x03E26A28 LDR X30, [X31], #0x30
	0x03E26A2C RET
	0x03E26A30 LDR W0, [X0 + 0x118]
	0x03E26A34 RET
	0x03E26A38 STR X30, [X31 - 0x30]!
	0x03E26A3C STP X22, X21, [X31 + 0x10]
	0x03E26A40 STP X20, X19, [X31 + 0x20]
	0x03E26A44 ADRP X22, 0x5C2000
	0x03E26A48 ADRP X21, 0x344000
	0x03E26A4C LDRB W8, [X22 + 0x6CD]
	0x03E26A50 LDR X21, [X21 + 0xF80]
	0x03E26A54 MOV W20, W1
	0x03E26A58 MOV X19, X0
	0x03E26A5C TBNZ X8, 0x0, 0x3E26A74
	0x03E26A60 ADRP X0, 0x344000
	0x03E26A64 LDR X0, [X0 + 0xF80]
	0x03E26A68 BL 0x1C16CF4
	0x03E26A6C MOVZ W8, 0x1
	0x03E26A70 STRB W8, [X22 + 0x6CD]
	0x03E26A74 LDR X2, [X21]
	0x03E26A78 ADD X0, X19, 0x118
	0x03E26A7C MOV W1, W20
	0x03E26A80 BL 0x22543F8
	0x03E26A84 TBZ X0, 0x0, 0x3E26A9C
	0x03E26A88 MOV X0, X19
	0x03E26A8C LDP X20, X19, [X31 + 0x20]
	0x03E26A90 LDP X22, X21, [X31 + 0x10]
	0x03E26A94 LDR X30, [X31], #0x30
	0x03E26A98 B 0x3E26AAC
	0x03E26A9C LDP X20, X19, [X31 + 0x20]
	0x03E26AA0 LDP X22, X21, [X31 + 0x10]
	0x03E26AA4 LDR X30, [X31], #0x30
	0x03E26AA8 RET
	0x03E26AAC LDR W8, [X0 + 0x118]
	0x03E26AB0 CMP W8, 0x8
	0x03E26AB4 B.HI 0x3E26B64
	0x03E26AB8 ADRP X10, 0xFFFFFFFFFCD71000
	0x03E26ABC ADD X10, X10, 0xBFC
	0x03E26AC0 ADR X11, 0x18
	0x03E26AC4 LDRB W12, [X10, X8, LSL]
	0x03E26AC8 ADD X11, X11, X12, 0x2, LSL
	0x03E26ACC MOV W9, W31
	0x03E26AD0 MOV W10, W31
	0x03E26AD4 BR X11
	0x03E26AD8 MOV W8, W31
	0x03E26ADC STR W31, [X0 + 0x128]
	0x03E26AE0 MOVZ W10, 0x1
	0x03E26AE4 MOVZ W9, 0x4
	0x03E26AE8 B 0x3E26B58
	0x03E26AEC MOV W8, W31
	0x03E26AF0 STR W31, [X0 + 0x128]
	0x03E26AF4 MOVZ W9, 0x2
	0x03E26AF8 MOVZ W10, 0x2
	0x03E26AFC B 0x3E26B58
	0x03E26B00 MOV W8, W31
	0x03E26B04 STR W31, [X0 + 0x128]
	0x03E26B08 MOVZ W10, 0x3
	0x03E26B0C MOVZ W9, 0x1
	0x03E26B10 B 0x3E26B58
	0x03E26B14 MOV W8, W31
	0x03E26B18 STR W31, [X0 + 0x128]
	0x03E26B1C MOVZ W10, 0x4
	0x03E26B20 MOVZ W9, 0x6
	0x03E26B24 B 0x3E26B58
	0x03E26B28 MOV W8, W31
	0x03E26B2C STR W31, [X0 + 0x128]
	0x03E26B30 MOVZ W10, 0x5
	0x03E26B34 MOVZ W9, 0x7
	0x03E26B38 B 0x3E26B58
	0x03E26B3C MOV W9, W31
	0x03E26B40 MOV W10, W31
	0x03E26B44 B 0x3E26B50
	0x03E26B48 MOVZ W10, 0x1
	0x03E26B4C MOVZ W9, 0x4
	0x03E26B50 STR W31, [X0 + 0x128]
	0x03E26B54 MOVZ W8, 0x2
	0x03E26B58 STR W8, [X0 + 0x11C]
	0x03E26B5C STR W9, [X0 + 0x124]
	0x03E26B60 STR W10, [X0 + 0x130]
	0x03E26B64 B 0x3E25718
	0x03E26B68 LDR W0, [X0 + 0x128]
	0x03E26B6C RET
	0x03E26B70 STR X30, [X31 - 0x30]!
	0x03E26B74 STP X22, X21, [X31 + 0x10]
	0x03E26B78 STP X20, X19, [X31 + 0x20]
	0x03E26B7C ADRP X22, 0x5C2000
	0x03E26B80 ADRP X21, 0x344000
	0x03E26B84 LDRB W8, [X22 + 0x6CE]
	0x03E26B88 LDR X21, [X21 + 0xF88]
	0x03E26B8C MOV W20, W1
	0x03E26B90 MOV X19, X0
	0x03E26B94 TBNZ X8, 0x0, 0x3E26BB8
	0x03E26B98 ADRP X0, 0x344000
	0x03E26B9C LDR X0, [X0 + 0xF90]
	0x03E26BA0 BL 0x1C16CF4
	0x03E26BA4 ADRP X0, 0x344000
	0x03E26BA8 LDR X0, [X0 + 0xF88]
	0x03E26BAC BL 0x1C16CF4
	0x03E26BB0 MOVZ W8, 0x1
	0x03E26BB4 STRB W8, [X22 + 0x6CE]
	0x03E26BB8 LDR X2, [X21]
	0x03E26BBC ADD X0, X19, 0x128
	0x03E26BC0 MOV W1, W20
	0x03E26BC4 BL 0x22543F8
	0x03E26BC8 TBZ X0, 0x0, 0x3E26C18
	0x03E26BCC ADRP X8, 0x344000
	0x03E26BD0 LDR X8, [X8 + 0xF90]
	0x03E26BD4 MOVZ W1, 0x2
	0x03E26BD8 LDR X0, [X8]
	0x03E26BDC BL 0x1C16D6C
	0x03E26BE0 CBZ X0, 0x3E26C28
	0x03E26BE4 LDR W8, [X0 + 0x18]
	0x03E26BE8 MOV X1, X0
	0x03E26BEC CMP W8, 0x1
	0x03E26BF0 B.LS 0x3E26C2C
	0x03E26BF4 MOVZ W8, 0x1
	0x03E26BF8 MOV X0, X19
	0x03E26BFC STR W8, [X1 + 0x24]
	0x03E26C00 BL 0x3E26C30
	0x03E26C04 MOV X0, X19
	0x03E26C08 LDP X20, X19, [X31 + 0x20]
	0x03E26C0C LDP X22, X21, [X31 + 0x10]
	0x03E26C10 LDR X30, [X31], #0x30
	0x03E26C14 B 0x3E25718
	0x03E26C18 LDP X20, X19, [X31 + 0x20]
	0x03E26C1C LDP X22, X21, [X31 + 0x10]
	0x03E26C20 LDR X30, [X31], #0x30
	0x03E26C24 RET
	0x03E26C28 BL 0x1C16F20
	0x03E26C2C BL 0x1C16F28
	0x03E26C30 STR X30, [X31 - 0x10]!
	0x03E26C34 LDR W8, [X0 + 0x118]
	0x03E26C38 CMP W8, 0x9
	0x03E26C3C B.NE 0x3E26C48
	0x03E26C40 LDR X30, [X31], #0x10
	0x03E26C44 RET
	0x03E26C48 CBZ X1, 0x3E26C90
	0x03E26C4C LDR W9, [X1 + 0x18]
	0x03E26C50 CMP W9, 0x1
	0x03E26C54 B.LT 0x3E26C80
	0x03E26C58 MOV W10, W31
	0x03E26C5C CMP W9, W10
	0x03E26C60 B.EQ 0x3E26C8C
	0x03E26C64 ADD X11, X1, W10, 0x2, SXTW
	0x03E26C68 LDR W11, [X11 + 0x20]
	0x03E26C6C CMP W8, W11
	0x03E26C70 B.EQ 0x3E26C40
	0x03E26C74 ADD W10, W10, 0x1
	0x03E26C78 CMP W9, W10
	0x03E26C7C B.NE 0x3E26C5C
	0x03E26C80 MOVZ W1, 0x9
	0x03E26C84 LDR X30, [X31], #0x10
	0x03E26C88 B 0x3E26A38
	0x03E26C8C BL 0x1C16F28
	0x03E26C90 BL 0x1C16F20
	0x03E26C94 LDR W0, [X0 + 0x11C]
	0x03E26C98 RET
	0x03E26C9C STR X30, [X31 - 0x30]!
	0x03E26CA0 STP X22, X21, [X31 + 0x10]
	0x03E26CA4 STP X20, X19, [X31 + 0x20]
	0x03E26CA8 ADRP X22, 0x5C2000
	0x03E26CAC ADRP X21, 0x344000
	0x03E26CB0 LDRB W8, [X22 + 0x6CF]
	0x03E26CB4 LDR X21, [X21 + 0xF98]
	0x03E26CB8 MOV W20, W1
	0x03E26CBC MOV X19, X0
	0x03E26CC0 TBNZ X8, 0x0, 0x3E26CD8
	0x03E26CC4 ADRP X0, 0x344000
	0x03E26CC8 LDR X0, [X0 + 0xF98]
	0x03E26CCC BL 0x1C16CF4
	0x03E26CD0 MOVZ W8, 0x1
	0x03E26CD4 STRB W8, [X22 + 0x6CF]
	0x03E26CD8 LDR X2, [X21]
	0x03E26CDC ADD X0, X19, 0x11C
	0x03E26CE0 MOV W1, W20
	0x03E26CE4 BL 0x22543F8
	0x03E26CE8 TBZ X0, 0x0, 0x3E26CF8
	0x03E26CEC LDR W8, [X19 + 0x118]
	0x03E26CF0 CMP W8, 0x9
	0x03E26CF4 B.NE 0x3E26D08
	0x03E26CF8 LDP X20, X19, [X31 + 0x20]
	0x03E26CFC LDP X22, X21, [X31 + 0x10]
	0x03E26D00 LDR X30, [X31], #0x30
	0x03E26D04 RET
	0x03E26D08 MOV X0, X19
	0x03E26D0C LDP X20, X19, [X31 + 0x20]
	0x03E26D10 LDP X22, X21, [X31 + 0x10]
	0x03E26D14 MOVZ W1, 0x9
	0x03E26D18 LDR X30, [X31], #0x30
	0x03E26D1C B 0x3E26A38
	0x03E26D20 LDR W8, [X0 + 0x118]
	0x03E26D24 CMP W8, 0x9
	0x03E26D28 B.NE 0x3E26D30
	0x03E26D2C RET
	0x03E26D30 MOVZ W1, 0x9
	0x03E26D34 B 0x3E26A38
	0x03E26D38 LDR X0, [X0 + 0x100]
	0x03E26D3C RET
	0x03E26D40 LDR W0, [X0 + 0x124]
	0x03E26D44 RET
	0x03E26D48 STR X30, [X31 - 0x30]!

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x5C3000
	013 Move W8, [X22+1731]
	014 Move W20, W2
	015 Move X21, X1
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {50}
	021 Move X0, 0x2D0000
	022 Move X0, [X0+368]
	023 Call 0x1C17CF4
	024 Move X0, 0x345000
	025 Move X0, [X0+3872]
	026 Call 0x1C17CF4
	027 Move X0, 0x2CE000
	028 Move X0, [X0+1448]
	029 Call 0x1C17CF4
	030 Move X0, 0x345000
	031 Move X0, [X0+3880]
	032 Call 0x1C17CF4
	033 Move X0, 0x2D0000
	034 Move X0, [X0+632]
	035 Call 0x1C17CF4
	036 Move X0, 0x2CF000
	037 Move X0, [X0+4064]
	038 Call 0x1C17CF4
	039 Move X0, 0x316000
	040 Move X0, [X0+2304]
	041 Call 0x1C17CF4
	042 Move X0, 0x2FA000
	043 Move X0, [X0+184]
	044 Call 0x1C17CF4
	045 Move X0, 0x2CE000
	046 Move X0, [X0+2440]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X22+1731], W8
	050 NotImplemented "Instruction STRH not yet implemented."
	051 Move X0, [X19+384]
	052 Move X1, X21
	053 Move X2, X31
	054 Call String.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfEqual {215}
	059 Move X23, 0x2CE000
	060 Move X23, [X23+2440]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X8, [X23]
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Compare X0, 0
	065 JumpIfEqual {227}
	066 Move X8, 0x2D0000
	067 Move X8, [X8+632]
	068 Move X9, 0x316000
	069 Move X3, X31
	070 Move X8, [X8]
	071 Move X8, [X8+184]
	072 Move X9, [X9+2304]
	073 Move X2, [X8]
	074 Move X1, [X9]
	075 Call String.Replace, X0, X1, X2
	076 Move W8, [X19+296]
	077 Move X21, X0
	078 Compare W8, 0
	079 JumpIfNotEqual {98}
	080 Compare X21, 0
	081 JumpIfEqual {227}
	082 Move X8, 0x2CF000
	083 Move X8, [X8+4064]
	084 Move X2, [X23]
	085 Move X0, X21
	086 Move X3, X31
	087 Move X1, [X8]
	088 Call String.Replace, X0, X1, X2
	089 Compare X0, 0
	090 JumpIfEqual {227}
	091 Move X8, 0x2FA000
	092 Move X8, [X8+184]
	093 Move X2, [X23]
	094 Move X3, X31
	095 Move X1, [X8]
	096 Call String.Replace, X0, X1, X2
	097 Move X21, X0
	098 Move X22, [X19+336]
	099 Compare X22, 0
	100 JumpIfEqual {105}
	101 Move X8, [X23]
	102 Move [X19+384], X8
	103 Compare X21, 0
	104 JumpIfNotEqual {122}
	105 Move W8, [X19+304]
	106 Compare W8, 0
	107 JumpIfEqual {178}
	108 Move X8, [X23]
	109 Move [X19+384], X8
	110 Move X8, 0x345000
	111 Move X8, [X8+3880]
	112 Move X0, [X8]
	113 Call 0x1C17F10
	114 Move X8, 0x345000
	115 Move X8, [X8+3872]
	116 Move X1, X19
	117 Move X22, X0
	118 Move X2, [X8]
	119 Call OnValidateInput..ctor, X0, X1, X2
	120 Compare X21, 0
	121 JumpIfEqual {227}
	122 Move W24, [X19+308]
	123 Move W23, [X21+16]
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move [X19+408], W23
	126 Move [X19+404], W23
	127 Move X8, 0x2CE000
	128 Move X8, [X8+1448]
	129 Move X0, [X8]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Move W0, W24
	135 Move W1, W23
	136 Move X2, X31
	137 Call Math.Min, X0, X1
	138 Move W23, W0
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move X27, 0x2D0000
	141 Move X27, [X27+368]
	142 Move W24, W31
	143 Move X25, [X19+384]
	144 Compare X25, 0
	145 JumpIfEqual {227}
	146 Move W26, [X25+16]
	147 Move X0, X21
	148 Move W1, W24
	149 Move X2, X31
	150 Call String.get_Chars, X0, X1
	151 Compare X22, 0
	152 JumpIfEqual {227}
	153 Move W3, W0
	154 Move X8, [X22+24]
	155 Move X0, [X22+64]
	156 Move X4, [X22+40]
	157 Move X1, X25
	158 Move W2, W26
	159 NotImplemented "Instruction BLR not yet implemented."
	160 And W31, W0, 0xFFFF
	161 NotImplemented "Instruction STRH not yet implemented."
	162 Move X0, [X27]
	163 Move X25, [X19+384]
	164 Move W8, [X0+224]
	165 Compare W8, 0
	166 JumpIfNotEqual {168}
	167 Call 0x1C17DFC
	168 Add X0, X31, 12
	169 Move X1, X31
	170 Call Char.ToString, X0
	171 Move X1, X0
	172 Move X0, X25
	173 Move X2, X31
	174 Call String.Concat, X0, X1
	175 Move [X19+384], X0
	176 Add W24, W24, 1
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move W2, [X19+308]
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Compare X21, 0
	181 JumpIfEqual {227}
	182 Move W8, [X21+16]
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move X0, X21
	185 Move W1, W31
	186 Move X3, X31
	187 Call String.Substring, X0, X1, X2
	188 Move X21, X0
	189 Move [X19+384], X21
	190 Move X0, [X19+256]
	191 Compare X0, 0
	192 JumpIfEqual {196}
	193 Move X1, [X19+384]
	194 Move X2, X31
	195 Call TouchScreenKeyboard.set_text, X0, X1
	196 Move X8, [X19+384]
	197 Compare X8, 0
	198 JumpIfEqual {227}
	199 Move W9, [X19+404]
	200 Move W8, [X8+16]
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move [X19+408], W8
	203 Move [X19+404], W8
	204 Move W9, [X19+408]
	205 NotImplemented "Instruction CMP not yet implemented."
	206 Move [X19+408], W8
	207 Move TEMP, X20
	208 And TEMP, TEMP, 1
	209 Compare TEMP, 1
	210 JumpIfNotEqual {213}
	211 Move X0, X19
	212 Call InputField.SendOnValueChanged, X0
	213 Move X0, X19
	214 Call InputField.UpdateLabel, X0
	215 Move X20, [X31+80]
	216 Move X19, [X31+88]
	217 Move X22, [X31+64]
	218 Move X21, [X31+72]
	219 Move X24, [X31+48]
	220 Move X23, [X31+56]
	221 Move X26, [X31+32]
	222 Move X25, [X31+40]
	223 Move X30, [X31+16]
	224 Move X27, [X31+24]
	225 Add X31, X31, 96
	226 Return 
	227 Call 0x1C17F20

Method: System.Boolean get_isFocused()

Disassembly:
	0x03E2726C BL 0x1C16CF4
	0x03E27270 ADRP X0, 0x343000

ISIL:
	001 Move W0, [X0+464]
	002 Return X0

Method: System.Single get_caretBlinkRate()

Disassembly:
	0x03E27274 LDR X0, [X0 + 0xF48]
	0x03E27278 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+392]
	002 Return V0

Method: System.Void set_caretBlinkRate(System.Single value)

Disassembly:
	0x03E2727C ADRP X0, 0x2CC000
	0x03E27280 LDR X0, [X0 + 0x598]
	0x03E27284 BL 0x1C16CF4
	0x03E27288 ADRP X0, 0x2CE000
	0x03E2728C LDR X0, [X0 + 0x278]
	0x03E27290 BL 0x1C16CF4
	0x03E27294 ADRP X0, 0x2F3000
	0x03E27298 LDR X0, [X0 + 0xE30]
	0x03E2729C BL 0x1C16CF4
	0x03E272A0 MOVZ W8, 0x1
	0x03E272A4 STRB W8, [X20 + 0x6D4]
	0x03E272A8 MOV X0, X19
	0x03E272AC MOV X1, X31
	0x03E272B0 BL 0x3E3BAA8
	0x03E272B4 LDR X8, [X19 + 0x180]
	0x03E272B8 CBZ X8, 0x3E272C4
	0x03E272BC STR W31, [X19 + 0x1E4]
	0x03E272C0 B 0x3E272E4
	0x03E272C4 ADRP X8, 0x2CE000
	0x03E272C8 LDR X8, [X8 + 0x278]
	0x03E272CC LDR X8, [X8]
	0x03E272D0 LDR X8, [X8 + 0xB8]
	0x03E272D4 LDR X8, [X8]
	0x03E272D8 STR W31, [X19 + 0x1E4]
	0x03E272DC STR X8, [X19 + 0x180]
	0x03E272E0 CBZ X8, 0x3E2748C
	0x03E272E4 LDR W8, [X8 + 0x10]
	0x03E272E8 ADRP X22, 0x2CC000
	0x03E272EC LDR X22, [X22 + 0x598]
	0x03E272F0 LDR X20, [X19 + 0x1B8]
	0x03E272F4 STR W8, [X19 + 0x1E8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5C2000
	007 Move X20, 0x33C000
	008 Move W8, [X21+1732]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x33C000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1732], W8
	021 Move X1, [X20]
	022 Add X0, X19, 392
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {38}
	029 Move W8, [X19+464]
	030 Compare W8, 0
	031 JumpIfEqual {38}
	032 Move X0, X19
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+16]
	036 Move X21, [X31+24]
	037 Move V8, [X31+48]
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X30, [X31+16]
	041 Move X21, [X31+24]
	042 Move V8, [X31+48]
	043 Return 

Method: System.Int32 get_caretWidth()

Disassembly:
	0x03E2734C MOV X1, X0
	0x03E27350 MOV X0, X21

ISIL:
	001 Move W0, [X0+396]
	002 Return X0

Method: System.Void set_caretWidth(System.Int32 value)

Disassembly:
	0x03E27354 LDR X9, [X8 + 0x4D8]
	0x03E27358 LDR X2, [X8 + 0x4E0]
	0x03E2735C BLR X9
	0x03E27360 MOV X21, X0
	0x03E27364 MOV X0, X31
	0x03E27368 BL 0x3C1B370
	0x03E2736C CBZ X20, 0x3E2748C
	0x03E27370 MOV X2, X0
	0x03E27374 MOV X0, X20
	0x03E27378 MOV X1, X21
	0x03E2737C MOV X3, X31
	0x03E27380 BL 0x3E22B58
	0x03E27384 LDR X0, [X22]
	0x03E27388 LDR X20, [X19 + 0x108]
	0x03E2738C LDR W8, [X0 + 0xE0]
	0x03E27390 CBNZ W8, 0x3E27398
	0x03E27394 BL 0x1C16DFC
	0x03E27398 MOV X0, X20
	0x03E2739C MOV X1, X31
	0x03E273A0 MOV X2, X31
	0x03E273A4 BL 0x3C354F8
	0x03E273A8 TBZ X0, 0x0, 0x3E2747C
	0x03E273AC ADRP X22, 0x2F3000
	0x03E273B0 LDR X20, [X19 + 0x108]
	0x03E273B4 LDR X22, [X22 + 0xE30]
	0x03E273B8 LDR X0, [X22]
	0x03E273BC BL 0x1C16F10
	0x03E273C0 ADRP X8, 0x343000
	0x03E273C4 LDR X8, [X8 + 0xF38]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x33C000
	008 Move W8, [X22+1733]
	009 Move X21, [X21+1448]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x33C000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1733], W8
	021 Move X2, [X21]
	022 Add X0, X19, 396
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {35}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: UnityEngine.UI.Text get_textComponent()

Disassembly:
	0x03E27420 MOV X1, X21
	0x03E27424 MOV X2, X31

ISIL:
	001 Move X0, [X0+264]
	002 Return X0

Method: System.Void set_textComponent(UnityEngine.UI.Text value)

Disassembly:
	0x03E27428 BL 0x3CDDF38
	0x03E2742C LDR X0, [X22]
	0x03E27430 LDR X20, [X19 + 0x108]
	0x03E27434 BL 0x1C16F10
	0x03E27438 ADRP X8, 0x343000
	0x03E2743C LDR X8, [X8 + 0xF40]
	0x03E27440 MOV X1, X19
	0x03E27444 MOV X3, X31
	0x03E27448 MOV X21, X0
	0x03E2744C LDR X2, [X8]
	0x03E27450 BL 0x3C45BE8
	0x03E27454 CBZ X20, 0x3E2748C
	0x03E27458 MOV X0, X20
	0x03E2745C MOV X1, X21
	0x03E27460 MOV X2, X31
	0x03E27464 BL 0x3CDE038
	0x03E27468 MOV X0, X19
	0x03E2746C LDP X20, X19, [X31 + 0x20]
	0x03E27470 LDP X22, X21, [X31 + 0x10]
	0x03E27474 LDR X30, [X31], #0x30
	0x03E27478 B 0x3E25E74
	0x03E2747C LDP X20, X19, [X31 + 0x20]
	0x03E27480 LDP X22, X21, [X31 + 0x10]
	0x03E27484 LDR X30, [X31], #0x30
	0x03E27488 RET
	0x03E2748C BL 0x1C16F20
	0x03E27490 STP X30, X23, [X31 - 0x30]!
	0x03E27494 STP X22, X21, [X31 + 0x10]
	0x03E27498 STP X20, X19, [X31 + 0x20]
	0x03E2749C ADRP X20, 0x5C1000
	0x03E274A0 ADRP X22, 0x2CC000
	0x03E274A4 LDRB W8, [X20 + 0x6D5]
	0x03E274A8 LDR X22, [X22 + 0x598]
	0x03E274AC MOV X19, X0
	0x03E274B0 TBNZ X8, 0x0, 0x3E27504
	0x03E274B4 ADRP X0, 0x331000
	0x03E274B8 LDR X0, [X0 + 0x718]
	0x03E274BC BL 0x1C16CF4
	0x03E274C0 ADRP X0, 0x343000
	0x03E274C4 LDR X0, [X0 + 0xF38]
	0x03E274C8 BL 0x1C16CF4
	0x03E274CC ADRP X0, 0x343000
	0x03E274D0 LDR X0, [X0 + 0xF40]
	0x03E274D4 BL 0x1C16CF4
	0x03E274D8 ADRP X0, 0x343000
	0x03E274DC LDR X0, [X0 + 0xF48]
	0x03E274E0 BL 0x1C16CF4
	0x03E274E4 ADRP X0, 0x2CC000
	0x03E274E8 LDR X0, [X0 + 0x598]
	0x03E274EC BL 0x1C16CF4
	0x03E274F0 ADRP X0, 0x2F3000
	0x03E274F4 LDR X0, [X0 + 0xE30]
	0x03E274F8 BL 0x1C16CF4
	0x03E274FC MOVZ W8, 0x1
	0x03E27500 STRB W8, [X20 + 0x6D5]
	0x03E27504 MOV X0, X19
	0x03E27508 STR X31, [X19 + 0x1D8]
	0x03E2750C BL 0x3E276B8
	0x03E27510 LDR X0, [X22]
	0x03E27514 LDR X20, [X19 + 0x108]
	0x03E27518 LDR W8, [X0 + 0xE0]
	0x03E2751C CBNZ W8, 0x3E27524
	0x03E27520 BL 0x1C16DFC
	0x03E27524 MOV X0, X20
	0x03E27528 MOV X1, X31
	0x03E2752C MOV X2, X31
	0x03E27530 BL 0x3C354F8
	0x03E27534 TBZ X0, 0x0, 0x3E275F4
	0x03E27538 ADRP X23, 0x2F3000
	0x03E2753C LDR X23, [X23 + 0xE30]
	0x03E27540 ADRP X21, 0x343000
	0x03E27544 LDR X20, [X19 + 0x108]
	0x03E27548 LDR X0, [X23]
	0x03E2754C LDR X21, [X21 + 0xF38]
	0x03E27550 BL 0x1C16F10
	0x03E27554 LDR X2, [X21]
	0x03E27558 MOV X1, X19
	0x03E2755C MOV X3, X31
	0x03E27560 MOV X21, X0
	0x03E27564 BL 0x3C45BE8
	0x03E27568 CBZ X20, 0x3E276B4
	0x03E2756C MOV X0, X20
	0x03E27570 MOV X1, X21
	0x03E27574 MOV X2, X31
	0x03E27578 BL 0x3CDDFB8
	0x03E2757C LDR X0, [X23]
	0x03E27580 LDR X20, [X19 + 0x108]
	0x03E27584 BL 0x1C16F10
	0x03E27588 ADRP X8, 0x343000
	0x03E2758C LDR X8, [X8 + 0xF48]
	0x03E27590 MOV X1, X19
	0x03E27594 MOV X3, X31
	0x03E27598 MOV X21, X0
	0x03E2759C LDR X2, [X8]
	0x03E275A0 BL 0x3C45BE8
	0x03E275A4 CBZ X20, 0x3E276B4
	0x03E275A8 MOV X0, X20
	0x03E275AC MOV X1, X21
	0x03E275B0 MOV X2, X31
	0x03E275B4 BL 0x3CDDFB8
	0x03E275B8 LDR X0, [X23]
	0x03E275BC LDR X20, [X19 + 0x108]
	0x03E275C0 BL 0x1C16F10
	0x03E275C4 ADRP X8, 0x343000
	0x03E275C8 LDR X8, [X8 + 0xF40]
	0x03E275CC MOV X1, X19
	0x03E275D0 MOV X3, X31
	0x03E275D4 MOV X21, X0
	0x03E275D8 LDR X2, [X8]
	0x03E275DC BL 0x3C45BE8
	0x03E275E0 CBZ X20, 0x3E276B4
	0x03E275E4 MOV X0, X20
	0x03E275E8 MOV X1, X21
	0x03E275EC MOV X2, X31
	0x03E275F0 BL 0x3CDE0B8
	0x03E275F4 ADRP X8, 0x331000
	0x03E275F8 LDR X8, [X8 + 0x718]
	0x03E275FC LDR X0, [X8]
	0x03E27600 LDR W8, [X0 + 0xE0]
	0x03E27604 CBNZ W8, 0x3E2760C
	0x03E27608 BL 0x1C16DFC
	0x03E2760C MOV X0, X19
	0x03E27610 MOV X1, X31
	0x03E27614 BL 0x3CD1BBC
	0x03E27618 LDR X0, [X22]
	0x03E2761C LDR X20, [X19 + 0x1B8]
	0x03E27620 LDR W8, [X0 + 0xE0]
	0x03E27624 CBNZ W8, 0x3E2762C
	0x03E27628 BL 0x1C16DFC
	0x03E2762C MOV X0, X20
	0x03E27630 MOV X1, X31
	0x03E27634 MOV X2, X31
	0x03E27638 BL 0x3C354F8
	0x03E2763C TBZ X0, 0x0, 0x3E27650
	0x03E27640 LDR X0, [X19 + 0x1B8]
	0x03E27644 CBZ X0, 0x3E276B4
	0x03E27648 MOV X1, X31
	0x03E2764C BL 0x3E22AF4
	0x03E27650 LDR X0, [X22]
	0x03E27654 LDR X20, [X19 + 0x1C8]
	0x03E27658 LDR W8, [X0 + 0xE0]
	0x03E2765C CBNZ W8, 0x3E27664
	0x03E27660 BL 0x1C16DFC
	0x03E27664 MOV X0, X20
	0x03E27668 MOV X1, X31
	0x03E2766C MOV X2, X31
	0x03E27670 BL 0x3C354F8
	0x03E27674 TBZ X0, 0x0, 0x3E27698
	0x03E27678 LDR X0, [X22]
	0x03E2767C LDR X20, [X19 + 0x1C8]
	0x03E27680 LDR W8, [X0 + 0xE0]
	0x03E27684 CBNZ W8, 0x3E2768C
	0x03E27688 BL 0x1C16DFC
	0x03E2768C MOV X0, X20
	0x03E27690 MOV X1, X31
	0x03E27694 BL 0x3C39564
	0x03E27698 STR X31, [X19 + 0x1C8]
	0x03E2769C MOV X0, X19
	0x03E276A0 LDP X20, X19, [X31 + 0x20]
	0x03E276A4 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x5C2000
	010 Move X24, 0x2CD000
	011 Move W8, [X21+1734]
	012 Move X24, [X24+1432]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {39}
	019 Move X0, 0x344000
	020 Move X0, [X0+3896]
	021 Call 0x1C17CF4
	022 Move X0, 0x344000
	023 Move X0, [X0+3904]
	024 Call 0x1C17CF4
	025 Move X0, 0x344000
	026 Move X0, [X0+3912]
	027 Call 0x1C17CF4
	028 Move X0, 0x2CD000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move X0, 0x344000
	032 Move X0, [X0+3920]
	033 Call 0x1C17CF4
	034 Move X0, 0x2F4000
	035 Move X0, [X0+3632]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X21+1734], W8
	039 Move X0, [X24]
	040 Move X21, [X19+264]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X23, 0x2F4000
	046 Move X25, 0x344000
	047 Move X23, [X23+3632]
	048 Move X25, [X25+3896]
	049 Move X0, X21
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {103}
	057 Move X0, [X23]
	058 Move X21, [X19+264]
	059 Call 0x1C17F10
	060 Move X2, [X25]
	061 Move X1, X19
	062 Move X3, X31
	063 Move X22, X0
	064 Call UnityAction..ctor, X0, X1, X2
	065 Compare X21, 0
	066 JumpIfEqual {193}
	067 Move X0, X21
	068 Move X1, X22
	069 Move X2, X31
	070 Call Graphic.UnregisterDirtyVerticesCallback, X0, X1
	071 Move X0, [X23]
	072 Move X21, [X19+264]
	073 Call 0x1C17F10
	074 Move X8, 0x344000
	075 Move X8, [X8+3912]
	076 Move X1, X19
	077 Move X3, X31
	078 Move X22, X0
	079 Move X2, [X8]
	080 Call UnityAction..ctor, X0, X1, X2
	081 Compare X21, 0
	082 JumpIfEqual {193}
	083 Move X0, X21
	084 Move X1, X22
	085 Move X2, X31
	086 Call Graphic.UnregisterDirtyVerticesCallback, X0, X1
	087 Move X0, [X23]
	088 Move X21, [X19+264]
	089 Call 0x1C17F10
	090 Move X8, 0x344000
	091 Move X8, [X8+3904]
	092 Move X1, X19
	093 Move X3, X31
	094 Move X22, X0
	095 Move X2, [X8]
	096 Call UnityAction..ctor, X0, X1, X2
	097 Compare X21, 0
	098 JumpIfEqual {193}
	099 Move X0, X21
	100 Move X1, X22
	101 Move X2, X31
	102 Call Graphic.UnregisterDirtyMaterialCallback, X0, X1
	103 Move X8, 0x344000
	104 Move X8, [X8+3920]
	105 Add X0, X19, 264
	106 Move X1, X20
	107 Move X2, [X8]
	108 Call 0x2255190, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {184}
	113 Move X0, X19
	114 Call InputField.EnforceTextHOverflow, X0
	115 Move X0, [X24]
	116 Move X20, [X19+264]
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1C17DFC
	121 Move X0, X20
	122 Move X1, X31
	123 Move X2, X31
	124 Call Object.op_Inequality, X0, X1
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfNotEqual {184}
	129 Move X0, [X23]
	130 Move X20, [X19+264]
	131 Call 0x1C17F10
	132 Move X2, [X25]
	133 Move X1, X19
	134 Move X3, X31
	135 Move X21, X0
	136 Call UnityAction..ctor, X0, X1, X2
	137 Compare X20, 0
	138 JumpIfEqual {193}
	139 Move X0, X20
	140 Move X1, X21
	141 Move X2, X31
	142 Call Graphic.RegisterDirtyVerticesCallback, X0, X1
	143 Move X0, [X23]
	144 Move X20, [X19+264]
	145 Call 0x1C17F10
	146 Move X8, 0x344000
	147 Move X8, [X8+3912]
	148 Move X1, X19
	149 Move X3, X31
	150 Move X21, X0
	151 Move X2, [X8]
	152 Call UnityAction..ctor, X0, X1, X2
	153 Compare X20, 0
	154 JumpIfEqual {193}
	155 Move X0, X20
	156 Move X1, X21
	157 Move X2, X31
	158 Call Graphic.RegisterDirtyVerticesCallback, X0, X1
	159 Move X0, [X23]
	160 Move X20, [X19+264]
	161 Call 0x1C17F10
	162 Move X8, 0x344000
	163 Move X8, [X8+3904]
	164 Move X1, X19
	165 Move X3, X31
	166 Move X21, X0
	167 Move X2, [X8]
	168 Call UnityAction..ctor, X0, X1, X2
	169 Compare X20, 0
	170 JumpIfEqual {193}
	171 Move X0, X20
	172 Move X1, X21
	173 Move X20, [X31+48]
	174 Move X19, [X31+56]
	175 Move X22, [X31+32]
	176 Move X21, [X31+40]
	177 Move X24, [X31+16]
	178 Move X23, [X31+24]
	179 Move X2, X31
	180 Move X30, [X31+64]
	181 Move X25, [X31+72]
	182 Call Graphic.RegisterDirtyMaterialCallback, X0, X1
	183 Return 
	184 Move X20, [X31+48]
	185 Move X19, [X31+56]
	186 Move X22, [X31+32]
	187 Move X21, [X31+40]
	188 Move X24, [X31+16]
	189 Move X23, [X31+24]
	190 Move X30, [X31+64]
	191 Move X25, [X31+72]
	192 Return 
	193 Call 0x1C17F20

Method: UnityEngine.UI.Graphic get_placeholder()

Disassembly:
	0x03E276A8 MOV X1, X31
	0x03E276AC LDP X30, X23, [X31], #0x30

ISIL:
	001 Move X0, [X0+272]
	002 Return X0

Method: System.Void set_placeholder(UnityEngine.UI.Graphic value)

Disassembly:
	0x03E276B0 B 0x3E3BD80
	0x03E276B4 BL 0x1C16F20
	0x03E276B8 STP X30, X21, [X31 - 0x20]!
	0x03E276BC STP X20, X19, [X31 + 0x10]
	0x03E276C0 ADRP X20, 0x5C1000
	0x03E276C4 LDRB W8, [X20 + 0x701]
	0x03E276C8 MOV X19, X0
	0x03E276CC TBNZ X8, 0x0, 0x3E276E4
	0x03E276D0 ADRP X0, 0x2CC000
	0x03E276D4 LDR X0, [X0 + 0x598]
	0x03E276D8 BL 0x1C16CF4
	0x03E276DC MOVZ W8, 0x1
	0x03E276E0 STRB W8, [X20 + 0x701]
	0x03E276E4 LDRB W8, [X19 + 0x1D0]
	0x03E276E8 CBZ W8, 0x3E27824
	0x03E276EC ADRP X21, 0x2CC000
	0x03E276F0 LDR X21, [X21 + 0x598]
	0x03E276F4 STRB W31, [X19 + 0x201]
	0x03E276F8 STRB W31, [X19 + 0x1D0]
	0x03E276FC LDR X20, [X19 + 0x110]
	0x03E27700 LDR X0, [X21]
	0x03E27704 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1735]
	009 Move X21, [X21+3928]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+3928]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1735], W8
	021 Move X2, [X21]
	022 Add X0, X20, 272
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2255190, X0, X1
	030 Return 

Method: UnityEngine.Color get_caretColor()

Disassembly:
	0x03E27708 CBNZ W8, 0x3E27710
	0x03E2770C BL 0x1C16DFC
	0x03E27710 MOV X0, X20
	0x03E27714 MOV X1, X31
	0x03E27718 MOV X2, X31
	0x03E2771C BL 0x3C354F8
	0x03E27720 TBZ X0, 0x0, 0x3E27748
	0x03E27724 LDR X0, [X19 + 0x180]
	0x03E27728 LDR X20, [X19 + 0x110]
	0x03E2772C MOV X1, X31
	0x03E27730 BL 0x32277A8
	0x03E27734 CBZ X20, 0x3E27830
	0x03E27738 AND W1, W0, 0x1
	0x03E2773C MOV X0, X20
	0x03E27740 MOV X2, X31
	0x03E27744 BL 0x3C32410
	0x03E27748 LDR X0, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+360]
	003 Compare W8, 0
	004 JumpIfEqual {9}
	005 Move V0, [X0+344]
	006 Move V1, [X0+348]
	007 Move V2, [X0+352]
	008 Move V3, [X0+356]
	009 Move X0, [X0+264]
	010 Compare X0, 0
	011 JumpIfEqual {18}
	012 Move X8, [X0]
	013 Move X9, [X8+664]
	014 Move X1, [X8+672]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X30, [X31+16]
	017 Return X0
	018 Call 0x1C17F20

Method: System.Void set_caretColor(UnityEngine.Color value)

Disassembly:
	0x03E2774C LDR X20, [X19 + 0x108]
	0x03E27750 LDR W8, [X0 + 0xE0]
	0x03E27754 CBNZ W8, 0x3E2775C
	0x03E27758 BL 0x1C16DFC
	0x03E2775C MOV X0, X20
	0x03E27760 MOV X1, X31
	0x03E27764 MOV X2, X31
	0x03E27768 BL 0x3C354F8
	0x03E2776C TBZ X0, 0x0, 0x3E27814
	0x03E27770 LDR X8, [X19]
	0x03E27774 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Add X0, X0, 344
	005 Move X1, X31
	006 Call SetPropertyUtility.SetColor, X0, X1
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {16}
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call InputField.MarkGeometryAsDirty, X0
	015 Return 
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: System.Boolean get_customCaretColor()

Disassembly:
	0x03E27778 LDR X9, [X8 + 0x2B8]
	0x03E2777C LDR X1, [X8 + 0x2C0]

ISIL:
	001 Move W0, [X0+360]
	002 Return X0

Method: System.Void set_customCaretColor(System.Boolean value)

Disassembly:
	0x03E27780 BLR X9
	0x03E27784 TBZ X0, 0x0, 0x3E27814
	0x03E27788 LDRB W8, [X19 + 0x200]
	0x03E2778C CBZ W8, 0x3E277A0
	0x03E27790 LDR X1, [X19 + 0x1F8]
	0x03E27794 MOVZ W2, 0x1
	0x03E27798 MOV X0, X19

ISIL:
	001 Move W9, [X0+360]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move [X0+360], W8
	006 Call InputField.MarkGeometryAsDirty, X0
	007 Return 

Method: UnityEngine.Color get_selectionColor()

Disassembly:
	0x03E2779C BL 0x3E25A1C
	0x03E277A0 MOV X0, X19
	0x03E277A4 BL 0x3E2BE2C
	0x03E277A8 LDR X0, [X19 + 0x100]
	0x03E277AC CBZ X0, 0x3E277C0

ISIL:
	001 Move V0, [X0+364]
	002 Move V1, [X0+368]
	003 Move V2, [X0+372]
	004 Move V3, [X0+376]
	005 Return X0

Method: System.Void set_selectionColor(UnityEngine.Color value)

Disassembly:
	0x03E277B0 MOV W1, W31
	0x03E277B4 MOV X2, X31
	0x03E277B8 BL 0x3C3D014
	0x03E277BC STR X31, [X19 + 0x100]
	0x03E277C0 STR W31, [X19 + 0x198]
	0x03E277C4 STR W31, [X19 + 0x194]
	0x03E277C8 BL 0x3E25300
	0x03E277CC LDR X8, [X21]
	0x03E277D0 MOV X20, X0
	0x03E277D4 LDR W9, [X8 + 0xE0]
	0x03E277D8 CBNZ W9, 0x3E277E4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Add X0, X0, 364
	005 Move X1, X31
	006 Call SetPropertyUtility.SetColor, X0, X1
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {16}
	011 Move X0, X19
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call InputField.MarkGeometryAsDirty, X0
	015 Return 
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: UnityEngine.UI.InputField/EndEditEvent get_onEndEdit()

Disassembly:
	0x03E277DC MOV X0, X8
	0x03E277E0 BL 0x1C16DFC

ISIL:
	001 Move X0, [X0+320]
	002 Return X0

Method: System.Void set_onEndEdit(UnityEngine.UI.InputField/EndEditEvent value)

Disassembly:
	0x03E277E4 MOV X0, X20
	0x03E277E8 MOV X1, X31
	0x03E277EC MOV X2, X31
	0x03E277F0 BL 0x3C354F8
	0x03E277F4 TBZ X0, 0x0, 0x3E27814
	0x03E277F8 BL 0x3E25300
	0x03E277FC CBZ X0, 0x3E27830
	0x03E27800 LDR X8, [X0]
	0x03E27804 MOV W1, W31
	0x03E27808 LDR X9, [X8 + 0x268]
	0x03E2780C LDR X2, [X8 + 0x270]
	0x03E27810 BLR X9
	0x03E27814 MOV X0, X19
	0x03E27818 LDP X20, X19, [X31 + 0x10]
	0x03E2781C LDP X30, X21, [X31], #0x20
	0x03E27820 B 0x3E263C8
	0x03E27824 LDP X20, X19, [X31 + 0x10]
	0x03E27828 LDP X30, X21, [X31], #0x20
	0x03E2782C RET
	0x03E27830 BL 0x1C16F20
	0x03E27834 STP X30, X21, [X31 - 0x20]!
	0x03E27838 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1736]
	009 Move X21, [X21+3936]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+3936]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1736], W8
	021 Move X2, [X21]
	022 Add X0, X20, 320
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2255190, X0, X1
	030 Return 

Method: UnityEngine.UI.InputField/SubmitEvent get_onSubmit()

Disassembly:
	0x03E2783C ADRP X20, 0x5C1000
	0x03E27840 ADRP X21, 0x331000

ISIL:
	001 Move X0, [X0+312]
	002 Return X0

Method: System.Void set_onSubmit(UnityEngine.UI.InputField/SubmitEvent value)

Disassembly:
	0x03E27844 LDRB W8, [X20 + 0x6D6]
	0x03E27848 LDR X21, [X21 + 0x718]
	0x03E2784C MOV X19, X0
	0x03E27850 TBNZ X8, 0x0, 0x3E27868
	0x03E27854 ADRP X0, 0x331000
	0x03E27858 LDR X0, [X0 + 0x718]
	0x03E2785C BL 0x1C16CF4
	0x03E27860 MOVZ W8, 0x1
	0x03E27864 STRB W8, [X20 + 0x6D6]
	0x03E27868 LDR X0, [X21]
	0x03E2786C LDR W8, [X0 + 0xE0]
	0x03E27870 CBNZ W8, 0x3E27878
	0x03E27874 BL 0x1C16DFC
	0x03E27878 MOV X0, X19
	0x03E2787C MOV X1, X31
	0x03E27880 BL 0x3CD1884
	0x03E27884 MOV X0, X19
	0x03E27888 LDP X20, X19, [X31 + 0x10]
	0x03E2788C MOV X1, X31
	0x03E27890 LDP X30, X21, [X31], #0x20
	0x03E27894 B 0x3E5AD84
	0x03E27898 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1737]
	009 Move X21, [X21+3944]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+3944]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1737], W8
	021 Move X2, [X21]
	022 Add X0, X20, 312
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2255190, X0, X1
	030 Return 

Method: UnityEngine.UI.InputField/OnChangeEvent get_onValueChange()

Disassembly:
	0x03E2789C STP X20, X19, [X31 + 0x10]
	0x03E278A0 ADRP X20, 0x5C1000

ISIL:
	001 Move X0, [X0+328]
	002 Return X0

Method: System.Void set_onValueChange(UnityEngine.UI.InputField/OnChangeEvent value)

Disassembly:
	0x03E278A4 ADRP X21, 0x343000

ISIL:
No ISIL was generated
Method: UnityEngine.UI.InputField/OnChangeEvent get_onValueChanged()

Disassembly:
	0x03E27900 MOV W19, W1
	0x03E27904 MOV X1, X31

ISIL:
	001 Move X0, [X0+328]
	002 Return X0

Method: System.Void set_onValueChanged(UnityEngine.UI.InputField/OnChangeEvent value)

Disassembly:
	0x03E278A8 LDRB W8, [X20 + 0x6D7]
	0x03E278AC LDR X21, [X21 + 0xFC8]
	0x03E278B0 MOV X19, X0
	0x03E278B4 TBNZ X8, 0x0, 0x3E278CC
	0x03E278B8 ADRP X0, 0x343000
	0x03E278BC LDR X0, [X0 + 0xFC8]
	0x03E278C0 BL 0x1C16CF4
	0x03E278C4 MOVZ W8, 0x1
	0x03E278C8 STRB W8, [X20 + 0x6D7]
	0x03E278CC LDR X0, [X21]
	0x03E278D0 BL 0x1C16F10
	0x03E278D4 MOV X1, X31
	0x03E278D8 MOV X20, X0
	0x03E278DC BL 0x33BDD8C
	0x03E278E0 STR W31, [X20 + 0x10]
	0x03E278E4 STR X19, [X20 + 0x20]
	0x03E278E8 MOV X0, X20
	0x03E278EC LDP X20, X19, [X31 + 0x10]
	0x03E278F0 LDP X30, X21, [X31], #0x20
	0x03E278F4 RET
	0x03E278F8 STR X30, [X31 - 0x20]!
	0x03E278FC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1738]
	009 Move X21, [X21+3952]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+3952]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1738], W8
	021 Move X2, [X21]
	022 Add X0, X20, 328
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2255190, X0, X1
	030 Return 

Method: UnityEngine.UI.InputField/OnValidateInput get_onValidateInput()

Disassembly:
	0x03E27908 MOV X20, X0
	0x03E2790C BL 0x33BDD8C

ISIL:
	001 Move X0, [X0+336]
	002 Return X0

Method: System.Void set_onValidateInput(UnityEngine.UI.InputField/OnValidateInput value)

Disassembly:
	0x03E27910 STR W19, [X20 + 0x10]
	0x03E27914 LDP X20, X19, [X31 + 0x10]
	0x03E27918 LDR X30, [X31], #0x20
	0x03E2791C RET
	0x03E27920 STP X30, X19, [X31 - 0x10]!
	0x03E27924 LDRB W8, [X0 + 0x1D0]
	0x03E27928 CBZ W8, 0x3E27950
	0x03E2792C MOVZ W8, 0x1
	0x03E27930 MOV X19, X0
	0x03E27934 STRB W8, [X0 + 0x1D4]
	0x03E27938 MOV X0, X31
	0x03E2793C BL 0x3C3C764
	0x03E27940 STR S0, [X19 + 0x1E0]
	0x03E27944 MOV X0, X19
	0x03E27948 LDP X30, X19, [X31], #0x10
	0x03E2794C B 0x3E262F8
	0x03E27950 LDP X30, X19, [X31], #0x10
	0x03E27954 RET
	0x03E27958 STP X30, X21, [X31 - 0x20]!
	0x03E2795C STP X20, X19, [X31 + 0x10]
	0x03E27960 ADRP X20, 0x5C1000
	0x03E27964 ADRP X21, 0x2CC000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1739]
	009 Move X21, [X21+3960]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+3960]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1739], W8
	021 Move X2, [X21]
	022 Add X0, X20, 336
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x2255190, X0, X1
	030 Return 

Method: System.Int32 get_characterLimit()

Disassembly:
	0x03E27968 LDRB W8, [X20 + 0x6D8]
	0x03E2796C LDR X21, [X21 + 0x598]

ISIL:
	001 Move W0, [X0+308]
	002 Return X0

Method: System.Void set_characterLimit(System.Int32 value)

Disassembly:
	0x03E27970 MOV X19, X0
	0x03E27974 TBNZ X8, 0x0, 0x3E27998
	0x03E27978 ADRP X0, 0x332000
	0x03E2797C LDR X0, [X0 + 0x118]
	0x03E27980 BL 0x1C16CF4
	0x03E27984 ADRP X0, 0x2CC000
	0x03E27988 LDR X0, [X0 + 0x598]
	0x03E2798C BL 0x1C16CF4
	0x03E27990 MOVZ W8, 0x1
	0x03E27994 STRB W8, [X20 + 0x6D8]
	0x03E27998 LDR X0, [X21]
	0x03E2799C LDR X20, [X19 + 0x108]
	0x03E279A0 LDR W8, [X0 + 0xE0]
	0x03E279A4 CBNZ W8, 0x3E279AC
	0x03E279A8 BL 0x1C16DFC
	0x03E279AC MOV X0, X20
	0x03E279B0 MOV X1, X31
	0x03E279B4 MOV X2, X31
	0x03E279B8 BL 0x3C354F8
	0x03E279BC TBZ X0, 0x0, 0x3E27A58
	0x03E279C0 LDR X0, [X21]
	0x03E279C4 LDR X20, [X19 + 0x1B8]
	0x03E279C8 LDR W8, [X0 + 0xE0]
	0x03E279CC CBNZ W8, 0x3E279D4
	0x03E279D0 BL 0x1C16DFC
	0x03E279D4 MOV X0, X20
	0x03E279D8 MOV X1, X31
	0x03E279DC MOV X2, X31
	0x03E279E0 BL 0x3C354F8
	0x03E279E4 TBZ X0, 0x0, 0x3E27A58
	0x03E279E8 ADRP X8, 0x332000
	0x03E279EC LDR X8, [X8 + 0x118]
	0x03E279F0 LDR X20, [X19 + 0x1B8]
	0x03E279F4 LDR X19, [X19 + 0x108]
	0x03E279F8 LDR X0, [X8]
	0x03E279FC LDR W8, [X0 + 0xE0]
	0x03E27A00 CBNZ W8, 0x3E27A08
	0x03E27A04 BL 0x1C16DFC
	0x03E27A08 MOV X0, X31
	0x03E27A0C BL 0x3CDABE4
	0x03E27A10 CBZ X19, 0x3E27A64
	0x03E27A14 LDR X8, [X19]
	0x03E27A18 MOV X1, X0
	0x03E27A1C MOV X0, X19
	0x03E27A20 LDR X9, [X8 + 0x4D8]
	0x03E27A24 LDR X2, [X8 + 0x4E0]
	0x03E27A28 BLR X9
	0x03E27A2C MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x2CD000
	008 Move W8, [X22+1740]
	009 Move X21, [X21+1448]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x2CD000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move X0, 0x33C000
	020 Move X0, [X0+1448]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1740], W8
	024 Move X0, [X21]
	025 Move X22, 0x33C000
	026 Add X21, X20, 308
	027 Move W8, [X0+224]
	028 Move X22, [X22+1448]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W0, W31
	033 Move W1, W19
	034 Move X2, X31
	035 Call Math.Max, X0, X1
	036 Move X2, [X22]
	037 Move W1, W0
	038 Move X0, X21
	039 Call SetPropertyUtility.SetStruct, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {58}
	044 Move X0, X20
	045 Call InputField.UpdateLabel, X0
	046 Move X0, [X20+256]
	047 Compare X0, 0
	048 JumpIfEqual {58}
	049 Move W1, W19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X2, X31
	055 Move X30, [X31+48]
	056 Call TouchScreenKeyboard.set_characterLimit, X0, X1
	057 Return 
	058 Move X20, [X31+32]
	059 Move X19, [X31+40]
	060 Move X22, [X31+16]
	061 Move X21, [X31+24]
	062 Move X30, [X31+48]
	063 Return 

Method: UnityEngine.UI.InputField/ContentType get_contentType()

Disassembly:
	0x03E27A30 MOV X0, X31
	0x03E27A34 BL 0x3C1B370

ISIL:
	001 Move W0, [X0+280]
	002 Return X0

Method: System.Void set_contentType(UnityEngine.UI.InputField/ContentType value)

Disassembly:
	0x03E27A38 CBZ X20, 0x3E27A64
	0x03E27A3C MOV X2, X0
	0x03E27A40 MOV X0, X20
	0x03E27A44 MOV X1, X19
	0x03E27A48 LDP X20, X19, [X31 + 0x10]
	0x03E27A4C MOV X3, X31
	0x03E27A50 LDP X30, X21, [X31], #0x20
	0x03E27A54 B 0x3E22B58
	0x03E27A58 LDP X20, X19, [X31 + 0x10]
	0x03E27A5C LDP X30, X21, [X31], #0x20
	0x03E27A60 RET
	0x03E27A64 BL 0x1C16F20
	0x03E27A68 STR X30, [X31 - 0x10]!
	0x03E27A6C LDR X8, [X0 + 0x180]
	0x03E27A70 CBZ X8, 0x3E27A94
	0x03E27A74 LDR W9, [X8 + 0x10]
	0x03E27A78 BIC W9, W9, W9, 0x1F
	0x03E27A7C STR W9, [X0 + 0x194]
	0x03E27A80 LDR W8, [X8 + 0x10]
	0x03E27A84 AND W8, W8, W8, 0x1F
	0x03E27A88 STR W8, [X0 + 0x198]
	0x03E27A8C LDR X30, [X31], #0x10
	0x03E27A90 RET
	0x03E27A94 BL 0x1C16F20
	0x03E27A98 STR X30, [X31 - 0x10]!
	0x03E27A9C LDR X8, [X0 + 0x180]
	0x03E27AA0 CBZ X8, 0x3E27AC4
	0x03E27AA4 LDR W9, [X8 + 0x10]
	0x03E27AA8 BIC W9, W9, W9, 0x1F

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1741]
	009 Move X21, [X21+3968]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+3968]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1741], W8
	021 Move X2, [X21]
	022 Add X0, X19, 280
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {35}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: UnityEngine.UI.InputField/LineType get_lineType()

Disassembly:
	0x03E27B68 BL 0x3E26F3C
	0x03E27B6C STR W0, [X19 + 0x198]

ISIL:
	001 Move W0, [X0+296]
	002 Return X0

Method: System.Void set_lineType(UnityEngine.UI.InputField/LineType value)

Disassembly:
	0x03E27B70 TBNZ X0, 0x1F, 0x3E27B90
	0x03E27B74 LDR X8, [X19 + 0x180]
	0x03E27B78 CBZ X8, 0x3E27BA0
	0x03E27B7C LDR W8, [X8 + 0x10]
	0x03E27B80 CMP W8, W0
	0x03E27B84 B.GE 0x3E27B94
	0x03E27B88 STR W8, [X19 + 0x198]
	0x03E27B8C B 0x3E27B94
	0x03E27B90 STR W31, [X19 + 0x198]
	0x03E27B94 MOV X0, X19
	0x03E27B98 LDP X30, X19, [X31], #0x10
	0x03E27B9C B 0x3E25E74
	0x03E27BA0 BL 0x1C16F20
	0x03E27BA4 STR X30, [X31 - 0x20]!
	0x03E27BA8 STP X20, X19, [X31 + 0x10]
	0x03E27BAC ADRP X19, 0x5C1000
	0x03E27BB0 ADRP X20, 0x2F8000
	0x03E27BB4 LDRB W8, [X19 + 0x6D9]
	0x03E27BB8 LDR X20, [X20 + 0x5C8]
	0x03E27BBC TBNZ X8, 0x0, 0x3E27BD4
	0x03E27BC0 ADRP X0, 0x2F8000
	0x03E27BC4 LDR X0, [X0 + 0x5C8]
	0x03E27BC8 BL 0x1C16CF4
	0x03E27BCC MOVZ W8, 0x1
	0x03E27BD0 STRB W8, [X19 + 0x6D9]
	0x03E27BD4 LDR X0, [X20]
	0x03E27BD8 LDR W8, [X0 + 0xE0]
	0x03E27BDC CBNZ W8, 0x3E27BE4
	0x03E27BE0 BL 0x1C16DFC
	0x03E27BE4 LDP X20, X19, [X31 + 0x10]
	0x03E27BE8 MOV X0, X31
	0x03E27BEC LDR X30, [X31], #0x20
	0x03E27BF0 B 0x3C753A0
	0x03E27BF4 STP X30, X21, [X31 - 0x20]!
	0x03E27BF8 STP X20, X19, [X31 + 0x10]
	0x03E27BFC ADRP X20, 0x5C1000
	0x03E27C00 ADRP X21, 0x2F8000
	0x03E27C04 LDRB W8, [X20 + 0x6DA]
	0x03E27C08 LDR X21, [X21 + 0x5C8]
	0x03E27C0C MOV X19, X0
	0x03E27C10 TBNZ X8, 0x0, 0x3E27C28
	0x03E27C14 ADRP X0, 0x2F8000
	0x03E27C18 LDR X0, [X0 + 0x5C8]
	0x03E27C1C BL 0x1C16CF4
	0x03E27C20 MOVZ W8, 0x1
	0x03E27C24 STRB W8, [X20 + 0x6DA]
	0x03E27C28 LDR X0, [X21]
	0x03E27C2C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1742]
	009 Move X21, [X21+3976]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x344000
	017 Move X0, [X0+3984]
	018 Call 0x1C17CF4
	019 Move X0, 0x344000
	020 Move X0, [X0+3976]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+1742], W8
	024 Move X2, [X21]
	025 Add X0, X19, 296
	026 Move W1, W20
	027 Call SetPropertyUtility.SetStruct, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {54}
	032 Move X8, 0x344000
	033 Move X8, [X8+3984]
	034 Move W1, 2
	035 Move X0, [X8]
	036 Call 0x1C17D6C
	037 Compare X0, 0
	038 JumpIfEqual {60}
	039 Move W8, [X0+24]
	040 Move X1, X0
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move W8, 1
	043 Move X0, X19
	044 Move [X1+36], W8
	045 Call InputField.SetToCustomIfContentTypeIsNot, X0, X1
	046 Move X0, X19
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Call InputField.EnforceTextHOverflow, X0
	053 Return 
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return 
	060 Call 0x1C17F20
	061 Call 0x1C17F28

Method: UnityEngine.UI.InputField/InputType get_inputType()

Disassembly:
	0x03E27C94 BL 0x1C16DFC
	0x03E27C98 MOV X0, X31

ISIL:
	001 Move W0, [X0+284]
	002 Return X0

Method: System.Void set_inputType(UnityEngine.UI.InputField/InputType value)

Disassembly:
	0x03E27C9C BL 0x3C01AB0
	0x03E27CA0 CMP W0, 0x11
	0x03E27CA4 B.EQ 0x3E27CE8
	0x03E27CA8 CMP W0, 0xB
	0x03E27CAC B.NE 0x3E27CD8
	0x03E27CB0 ADRP X19, 0x343000
	0x03E27CB4 LDR X19, [X19 + 0xFB8]
	0x03E27CB8 LDR X0, [X19]
	0x03E27CBC LDR W8, [X0 + 0xE0]
	0x03E27CC0 CBNZ W8, 0x3E27CCC
	0x03E27CC4 BL 0x1C16DFC
	0x03E27CC8 LDR X0, [X19]
	0x03E27CCC LDR X8, [X0 + 0xB8]
	0x03E27CD0 LDRB W8, [X8 + 0x9]
	0x03E27CD4 CBZ W8, 0x3E27CE8
	0x03E27CD8 LDP X20, X19, [X31 + 0x10]
	0x03E27CDC MOV X0, X31
	0x03E27CE0 LDR X30, [X31], #0x20
	0x03E27CE4 B 0x3C3CC00
	0x03E27CE8 MOV X0, X31
	0x03E27CEC BL 0x3C3CCF4
	0x03E27CF0 LDP X20, X19, [X31 + 0x10]
	0x03E27CF4 EOR W8, W0, 0x1
	0x03E27CF8 AND W0, W8, 0x1
	0x03E27CFC LDR X30, [X31], #0x20
	0x03E27D00 RET
	0x03E27D04 STP X30, X19, [X31 - 0x10]!
	0x03E27D08 MOV X19, X0
	0x03E27D0C MOV X0, X31
	0x03E27D10 BL 0x3C3CC00
	0x03E27D14 TBZ X0, 0x0, 0x3E27D28
	0x03E27D18 LDRB W8, [X19 + 0x210]
	0x03E27D1C CMP W8, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1743]
	009 Move X21, [X21+3992]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+3992]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1743], W8
	021 Move X2, [X21]
	022 Add X0, X19, 284
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {31}
	029 Move W8, [X19+280]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W1, 9
	043 Move X30, [X31+48]
	044 Call InputField.set_contentType, X0, X1
	045 Return 

Method: UnityEngine.TouchScreenKeyboard get_touchScreenKeyboard()

Disassembly:
	0x03E27D38 STP X20, X19, [X31 + 0x10]
	0x03E27D3C ADRP X21, 0x5C1000

ISIL:
	001 Move X0, [X0+256]
	002 Return X0

Method: UnityEngine.TouchScreenKeyboardType get_keyboardType()

Disassembly:
	0x03E27D40 ADRP X20, 0x343000
	0x03E27D44 LDRB W8, [X21 + 0x6DC]

ISIL:
	001 Move W0, [X0+292]
	002 Return X0

Method: System.Void set_keyboardType(UnityEngine.TouchScreenKeyboardType value)

Disassembly:
	0x03E27D48 LDR X20, [X20 + 0xFB8]
	0x03E27D4C MOV X19, X0
	0x03E27D50 TBNZ X8, 0x0, 0x3E27D68
	0x03E27D54 ADRP X0, 0x343000
	0x03E27D58 LDR X0, [X0 + 0xFB8]
	0x03E27D5C BL 0x1C16CF4
	0x03E27D60 MOVZ W8, 0x1
	0x03E27D64 STRB W8, [X21 + 0x6DC]
	0x03E27D68 LDR X0, [X20]
	0x03E27D6C LDR W8, [X0 + 0xE0]
	0x03E27D70 CBNZ W8, 0x3E27D7C
	0x03E27D74 BL 0x1C16DFC
	0x03E27D78 LDR X0, [X20]
	0x03E27D7C LDR X8, [X0 + 0xB8]
	0x03E27D80 LDRB W8, [X8 + 0x9]
	0x03E27D84 CBZ W8, 0x3E27D90
	0x03E27D88 MOV W0, W31
	0x03E27D8C B 0x3E27DA8
	0x03E27D90 LDRB W19, [X19 + 0x210]
	0x03E27D94 MOV X0, X31
	0x03E27D98 BL 0x3C3CCF4
	0x03E27D9C AND W8, W0, 0x1
	0x03E27DA0 CMP W19, W8
	0x03E27DA4 CSET W0, NE
	0x03E27DA8 LDP X20, X19, [X31 + 0x10]
	0x03E27DAC LDP X30, X21, [X31], #0x20
	0x03E27DB0 RET
	0x03E27DB4 SUB X31, X31, 0x40
	0x03E27DB8 STP X30, X23, [X31 + 0x10]
	0x03E27DBC STP X22, X21, [X31 + 0x20]
	0x03E27DC0 STP X20, X19, [X31 + 0x30]
	0x03E27DC4 MOV X22, X0
	0x03E27DC8 BL 0x3E26F98

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1744]
	009 Move X21, [X21+4000]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+4000]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1744], W8
	021 Move X2, [X21]
	022 Add X0, X19, 292
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {31}
	029 Move W8, [X19+280]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W1, 9
	043 Move X30, [X31+48]
	044 Call InputField.set_contentType, X0, X1
	045 Return 

Method: UnityEngine.UI.InputField/CharacterValidation get_characterValidation()

Disassembly:
	0x03E27DCC MOV W19, W0
	0x03E27DD0 MOV X0, X22

ISIL:
	001 Move W0, [X0+304]
	002 Return X0

Method: System.Void set_characterValidation(UnityEngine.UI.InputField/CharacterValidation value)

Disassembly:
	0x03E27DD4 BL 0x3E26F3C
	0x03E27DD8 MOV W20, W0
	0x03E27DDC MOV X0, X22
	0x03E27DE0 BL 0x3E26F98
	0x03E27DE4 MOV W21, W0
	0x03E27DE8 MOV X0, X22
	0x03E27DEC BL 0x3E26F3C
	0x03E27DF0 ADRP X23, 0x5B4000
	0x03E27DF4 LDRB W8, [X23 + 0x511]
	0x03E27DF8 MOV W22, W0
	0x03E27DFC CBNZ W8, 0x3E27E14
	0x03E27E00 ADRP X0, 0x2CC000
	0x03E27E04 LDR X0, [X0 + 0x5A8]
	0x03E27E08 BL 0x1C16CF4
	0x03E27E0C MOVZ W8, 0x1
	0x03E27E10 STRB W8, [X23 + 0x511]
	0x03E27E14 ADRP X8, 0x2CC000
	0x03E27E18 LDR X8, [X8 + 0x5A8]
	0x03E27E1C LDR X0, [X8]
	0x03E27E20 LDR W8, [X0 + 0xE0]
	0x03E27E24 CBNZ W8, 0x3E27E2C
	0x03E27E28 BL 0x1C16DFC
	0x03E27E2C SUB W8, W21, W22
	0x03E27E30 CMP W19, W20
	0x03E27E34 CSEL W1, W19, W20, LT
	0x03E27E38 CMP W8, 0x0
	0x03E27E3C CSNEG W2, W8, W8, PL
	0x03E27E40 ADD X0, X31, 0x8
	0x03E27E44 MOV X3, X31
	0x03E27E48 STR X31, [X31 + 0x8]
	0x03E27E4C BL 0x3C36CD0
	0x03E27E50 LDR X0, [X31 + 0x8]
	0x03E27E54 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1745]
	009 Move X21, [X21+4008]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+4008]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1745], W8
	021 Move X2, [X21]
	022 Add X0, X19, 304
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {31}
	029 Move W8, [X19+280]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 
	037 Move X0, X19
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move W1, 9
	043 Move X30, [X31+48]
	044 Call InputField.set_contentType, X0, X1
	045 Return 

Method: System.Boolean get_readOnly()

Disassembly:
	0x03E27E58 LDP X22, X21, [X31 + 0x20]
	0x03E27E5C LDP X30, X23, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+400]
	002 Return X0

Method: System.Void set_readOnly(System.Boolean value)

Disassembly:
	0x03E27E60 ADD X31, X31, 0x40
	0x03E27E64 RET
	0x03E27E68 STR X30, [X31 - 0x20]!

ISIL:
	001 And W8, W1, 1
	002 Move [X0+400], W8
	003 Return 

Method: System.Boolean get_multiLine()

Disassembly:
	0x03E27E6C STP X20, X19, [X31 + 0x10]
	0x03E27E70 ADRP X20, 0x5C1000
	0x03E27E74 LDRB W8, [X20 + 0x6DD]
	0x03E27E78 MOV X19, X0
	0x03E27E7C TBNZ X8, 0x0, 0x3E27E94

ISIL:
	001 Move W8, [X0+296]
	002 Subtract W8, W8, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Char get_asteriskChar()

Disassembly:
	0x03E27E80 ADRP X0, 0x2CC000
	0x03E27E84 LDR X0, [X0 + 0x970]

ISIL:
	001 NotImplemented "Instruction LDRH not yet implemented."
	002 Return X0

Method: System.Void set_asteriskChar(System.Char value)

Disassembly:
	0x03E27E88 BL 0x1C16CF4
	0x03E27E8C MOVZ W8, 0x1
	0x03E27E90 STRB W8, [X20 + 0x6DD]
	0x03E27E94 LDRB W8, [X19 + 0x12C]
	0x03E27E98 CBZ W8, 0x3E27F20
	0x03E27E9C LDR X0, [X19 + 0x100]
	0x03E27EA0 CBZ X0, 0x3E27F20
	0x03E27EA4 MOV X1, X31
	0x03E27EA8 BL 0x3C3D114
	0x03E27EAC TBZ X0, 0x0, 0x3E27F20
	0x03E27EB0 ADRP X20, 0x2CC000
	0x03E27EB4 LDR X20, [X20 + 0x970]
	0x03E27EB8 LDR X0, [X20]
	0x03E27EBC LDR W8, [X0 + 0xE0]
	0x03E27EC0 CBNZ W8, 0x3E27EC8
	0x03E27EC4 BL 0x1C16DFC
	0x03E27EC8 MOV X0, X31
	0x03E27ECC BL 0x3C01AB0
	0x03E27ED0 CMP W0, 0x8
	0x03E27ED4 B.EQ 0x3E27EF8
	0x03E27ED8 LDR X0, [X20]
	0x03E27EDC LDR W8, [X0 + 0xE0]
	0x03E27EE0 CBNZ W8, 0x3E27EE8
	0x03E27EE4 BL 0x1C16DFC
	0x03E27EE8 MOV X0, X31
	0x03E27EEC BL 0x3C01AB0
	0x03E27EF0 CMP W0, 0x1F
	0x03E27EF4 B.NE 0x3E27F20
	0x03E27EF8 LDR X20, [X19 + 0x100]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5C2000
	007 Move X21, 0x344000
	008 Move W8, [X22+1746]
	009 Move X21, [X21+4016]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x344000
	017 Move X0, [X0+4016]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1746], W8
	021 Move X2, [X21]
	022 Add X0, X19, 288
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Call InputField.UpdateLabel, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Boolean get_wasCanceled()

Disassembly:
	0x03E27EFC MOV X0, X19
	0x03E27F00 BL 0x3E27DB4

ISIL:
	001 Move W0, [X0+512]
	002 Return X0

Method: System.Void ClampPos(ref System.Int32 pos)

Disassembly:
	0x03E27F04 CBZ X20, 0x3E27F2C
	0x03E27F08 MOV X1, X0
	0x03E27F0C MOV X0, X20
	0x03E27F10 LDP X20, X19, [X31 + 0x10]
	0x03E27F14 MOV X2, X31
	0x03E27F18 LDR X30, [X31], #0x20
	0x03E27F1C B 0x3C3D1E0
	0x03E27F20 LDP X20, X19, [X31 + 0x10]
	0x03E27F24 LDR X30, [X31], #0x20
	0x03E27F28 RET
	0x03E27F2C BL 0x1C16F20
	0x03E27F30 SUB X31, X31, 0x30
	0x03E27F34 STP X30, X21, [X31 + 0x10]
	0x03E27F38 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X1]
	003 Move TEMP, X8
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {12}
	007 Move X9, [X0+384]
	008 Compare X9, 0
	009 JumpIfEqual {16}
	010 Move W9, [X9+16]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W9, W31
	013 Move [X1], W9
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20

Method: System.Int32 get_caretPositionInternal()

Disassembly:
	0x03E27F3C MOV X19, X0
	0x03E27F40 LDR X0, [X0 + 0x100]
	0x03E27F44 CBZ X0, 0x3E28010
	0x03E27F48 MOV X1, X31
	0x03E27F4C BL 0x3C3D150
	0x03E27F50 MOV X21, X0
	0x03E27F54 STR X0, [X31 + 0x8]
	0x03E27F58 ADD X0, X31, 0x8
	0x03E27F5C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+404]
	004 Call InputField.get_compositionString, X0
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 Move W8, [X0+16]
	008 Add W0, W8, W19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void set_caretPositionInternal(System.Int32 value)

Disassembly:
	0x03E27F60 BL 0x3C36CC4
	0x03E27F64 MOV W20, W0
	0x03E27F68 MOV X0, X19
	0x03E27F6C BL 0x3E26F3C
	0x03E27F70 CMP W0, W21
	0x03E27F74 B.NE 0x3E27F8C
	0x03E27F78 MOV X0, X19
	0x03E27F7C BL 0x3E26F98
	0x03E27F80 CMP W0, W20
	0x03E27F84 B.NE 0x3E27FC4
	0x03E27F88 B 0x3E28000
	0x03E27F8C STR W21, [X19 + 0x194]
	0x03E27F90 TBNZ X21, 0x1F, 0x3E27FAC
	0x03E27F94 LDR X8, [X19 + 0x180]

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+404], W1
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {12}
	007 Move X8, [X0+384]
	008 Compare X8, 0
	009 JumpIfEqual {16}
	010 Move W8, [X8+16]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, W31
	013 Move [X0+404], W8
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20

Method: System.Int32 get_caretSelectPositionInternal()

Disassembly:
	0x03E27F98 CBZ X8, 0x3E28010
	0x03E27F9C LDR W8, [X8 + 0x10]
	0x03E27FA0 CMP W8, W21
	0x03E27FA4 B.LT 0x3E27FB0
	0x03E27FA8 B 0x3E27FB4
	0x03E27FAC MOV W8, W31
	0x03E27FB0 STR W8, [X19 + 0x194]
	0x03E27FB4 MOV X0, X19
	0x03E27FB8 BL 0x3E26F98

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+408]
	004 Call InputField.get_compositionString, X0
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 Move W8, [X0+16]
	008 Add W0, W8, W19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void set_caretSelectPositionInternal(System.Int32 value)

Disassembly:
	0x03E27FBC CMP W0, W20
	0x03E27FC0 B.EQ 0x3E27FEC
	0x03E27FC4 STR W20, [X19 + 0x198]
	0x03E27FC8 TBNZ X20, 0x1F, 0x3E27FE8
	0x03E27FCC LDR X8, [X19 + 0x180]
	0x03E27FD0 CBZ X8, 0x3E28010
	0x03E27FD4 LDR W8, [X8 + 0x10]
	0x03E27FD8 CMP W8, W20
	0x03E27FDC B.GE 0x3E27FEC
	0x03E27FE0 STR W8, [X19 + 0x198]
	0x03E27FE4 B 0x3E27FEC
	0x03E27FE8 STR W31, [X19 + 0x198]
	0x03E27FEC MOV X0, X31
	0x03E27FF0 BL 0x3C3C764

ISIL:
	001 Move [X31-16], X30
	002 Move [X0+408], W1
	003 Move TEMP, X1
	004 And TEMP, TEMP, -2147483648
	005 Compare TEMP, -2147483648
	006 JumpIfEqual {12}
	007 Move X8, [X0+384]
	008 Compare X8, 0
	009 JumpIfEqual {16}
	010 Move W8, [X8+16]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W8, W31
	013 Move [X0+408], W8
	014 Move X30, [X31+16]
	015 Return 
	016 Call 0x1C17F20

Method: System.Boolean get_hasSelection()

Disassembly:
	0x03E27FF4 MOV X0, X19
	0x03E27FF8 STR S0, [X19 + 0x1E0]
	0x03E27FFC BL 0x3E25E74
	0x03E28000 LDP X20, X19, [X31 + 0x20]
	0x03E28004 LDP X30, X21, [X31 + 0x10]
	0x03E28008 ADD X31, X31, 0x30
	0x03E2800C RET
	0x03E28010 BL 0x1C16F20
	0x03E28014 STR X30, [X31 - 0x40]!
	0x03E28018 STP X24, X23, [X31 + 0x10]
	0x03E2801C STP X22, X21, [X31 + 0x20]
	0x03E28020 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call InputField.get_caretPositionInternal, X0
	006 Move W20, W0
	007 Move X0, X19
	008 Call InputField.get_caretSelectPositionInternal, X0
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Move X30, [X31+32]
	014 Return X0

Method: System.Int32 get_caretPosition()

Disassembly:
	0x03E28024 ADRP X20, 0x5C0000
	0x03E28028 LDRB W8, [X20 + 0x6DE]
	0x03E2802C MOV X19, X0
	0x03E28030 TBNZ X8, 0x0, 0x3E28084
	0x03E28034 ADRP X0, 0x2CB000
	0x03E28038 LDR X0, [X0 + 0x970]
	0x03E2803C BL 0x1C16CF4
	0x03E28040 ADRP X0, 0x2CD000
	0x03E28044 LDR X0, [X0 + 0x170]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+408]
	004 Call InputField.get_compositionString, X0
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 Move W8, [X0+16]
	008 Add W0, W8, W19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void set_caretPosition(System.Int32 value)

Disassembly:
	0x03E28048 BL 0x1C16CF4
	0x03E2804C ADRP X0, 0x2CB000
	0x03E28050 LDR X0, [X0 + 0xE00]
	0x03E28054 BL 0x1C16CF4
	0x03E28058 ADRP X0, 0x2CB000
	0x03E2805C LDR X0, [X0 + 0x598]
	0x03E28060 BL 0x1C16CF4
	0x03E28064 ADRP X0, 0x331000
	0x03E28068 LDR X0, [X0 + 0x1A0]
	0x03E2806C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W19, W1
	005 Move X20, X0
	006 Call InputField.set_selectionAnchorPosition, X0, X1
	007 Move X0, X20
	008 Move W1, W19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Call InputField.set_selectionFocusPosition, X0, X1
	013 Return 

Method: System.Int32 get_selectionAnchorPosition()

Disassembly:
	0x03E28128 ADRP X10, 0x2CB000
	0x03E2812C LDR X8, [X20]
	0x03E28130 LDR X10, [X10 + 0xE00]
	0x03E28134 LDRH W9, [X8 + 0x12E]
	0x03E28138 LDR X1, [X10]
	0x03E2813C CBZ X9, 0x3E28160
	0x03E28140 LDR X10, [X8 + 0xB0]
	0x03E28144 ADD X10, X10, 0x8
	0x03E28148 LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+404]
	004 Call InputField.get_compositionString, X0
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 Move W8, [X0+16]
	008 Add W0, W8, W19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void set_selectionAnchorPosition(System.Int32 value)

Disassembly:
	0x03E28070 ADRP X0, 0x2CB000
	0x03E28074 LDR X0, [X0 + 0x988]
	0x03E28078 BL 0x1C16CF4
	0x03E2807C MOVZ W8, 0x1
	0x03E28080 STRB W8, [X20 + 0x6DE]
	0x03E28084 STRH W31, [X31 + 0xC]
	0x03E28088 LDRB W8, [X19 + 0x1D1]
	0x03E2808C CBZ W8, 0x3E2809C
	0x03E28090 LDRB W8, [X19 + 0x1D0]
	0x03E28094 CBZ W8, 0x3E28170
	0x03E28098 STRB W31, [X19 + 0x1D1]
	0x03E2809C MOV X0, X19
	0x03E280A0 BL 0x3E28984
	0x03E280A4 LDRB W8, [X19 + 0x1D0]
	0x03E280A8 CBZ W8, 0x3E28568
	0x03E280AC MOV X0, X19
	0x03E280B0 BL 0x3E27D34
	0x03E280B4 TBZ X0, 0x0, 0x3E281D0
	0x03E280B8 ADRP X8, 0x2CB000
	0x03E280BC LDR X8, [X8 + 0x598]
	0x03E280C0 LDR X20, [X19 + 0x1B8]
	0x03E280C4 LDR X0, [X8]
	0x03E280C8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call InputField.get_compositionString, X0
	007 Compare X0, 0
	008 JumpIfEqual {28}
	009 Move W8, [X0+16]
	010 Compare W8, 0
	011 JumpIfEqual {16}
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return 
	016 Move [X19+404], W20
	017 Move TEMP, X20
	018 And TEMP, TEMP, -2147483648
	019 Compare TEMP, -2147483648
	020 JumpIfEqual {27}
	021 Move X8, [X19+384]
	022 Compare X8, 0
	023 JumpIfEqual {28}
	024 Move W8, [X8+16]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X19+404], W8
	027 Move [X19+404], W31
	028 Call 0x1C17F20

Method: System.Int32 get_selectionFocusPosition()

Disassembly:
	0x03E2814C CMP X11, X1
	0x03E28150 B.EQ 0x3E28180
	0x03E28154 SUBS X9, X9, 0x1
	0x03E28158 ADD X10, X10, 0x10
	0x03E2815C B.NE 0x3E28148
	0x03E28160 MOV X0, X20
	0x03E28164 MOV W2, W31
	0x03E28168 BL 0x1C5C788
	0x03E2816C B 0x3E2818C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, [X0+408]
	004 Call InputField.get_compositionString, X0
	005 Compare X0, 0
	006 JumpIfEqual {12}
	007 Move W8, [X0+16]
	008 Add W0, W8, W19
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return X0
	012 Call 0x1C17F20

Method: System.Void set_selectionFocusPosition(System.Int32 value)

Disassembly:
	0x03E280CC CBNZ W8, 0x3E280D4
	0x03E280D0 BL 0x1C16DFC
	0x03E280D4 MOV X0, X20
	0x03E280D8 MOV X1, X31
	0x03E280DC MOV X2, X31
	0x03E280E0 BL 0x3C354F8
	0x03E280E4 TBZ X0, 0x0, 0x3E281C8
	0x03E280E8 ADRP X8, 0x331000
	0x03E280EC LDR X8, [X8 + 0x1A0]
	0x03E280F0 LDR X0, [X8]
	0x03E280F4 BL 0x1C16F10
	0x03E280F8 MOV X1, X31
	0x03E280FC MOV X20, X0
	0x03E28100 BL 0x3E49354
	0x03E28104 MOV X0, X19
	0x03E28108 BL 0x3E257AC
	0x03E2810C MOV X1, X0
	0x03E28110 CBZ X20, 0x3E28588
	0x03E28114 MOV X0, X20
	0x03E28118 MOV X2, X31
	0x03E2811C BL 0x3E49C28
	0x03E28120 MOV X21, X31
	0x03E28124 MOVZ W22, 0x6

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call InputField.get_compositionString, X0
	007 Compare X0, 0
	008 JumpIfEqual {28}
	009 Move W8, [X0+16]
	010 Compare W8, 0
	011 JumpIfEqual {16}
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X30, [X31+32]
	015 Return 
	016 Move [X19+408], W20
	017 Move TEMP, X20
	018 And TEMP, TEMP, -2147483648
	019 Compare TEMP, -2147483648
	020 JumpIfEqual {27}
	021 Move X8, [X19+384]
	022 Compare X8, 0
	023 JumpIfEqual {28}
	024 Move W8, [X8+16]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X19+408], W8
	027 Move [X19+408], W31
	028 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x03E28170 MOV X0, X19
	0x03E28174 BL 0x3E2863C
	0x03E28178 STRB W31, [X19 + 0x1D1]
	0x03E2817C B 0x3E28568
	0x03E28180 LDRSW X9, [X10]
	0x03E28184 ADD X8, X8, X9, 0x4, LSL
	0x03E28188 ADD X0, X8, 0x138
	0x03E2818C LDP X8, X1, [X0]
	0x03E28190 MOV X0, X20
	0x03E28194 BLR X8
	0x03E28198 CBNZ X21, 0x3E28580
	0x03E2819C CMP W22, 0x6
	0x03E281A0 B.EQ 0x3E281A8
	0x03E281A4 CBNZ W22, 0x3E28568
	0x03E281A8 LDR X20, [X19 + 0x1B8]
	0x03E281AC MOV X0, X19
	0x03E281B0 BL 0x3E257AC
	0x03E281B4 CBZ X20, 0x3E2857C
	0x03E281B8 MOV X1, X0
	0x03E281BC MOV X0, X20
	0x03E281C0 MOV X2, X31
	0x03E281C4 BL 0x3E22AB0
	0x03E281C8 MOV X0, X19
	0x03E281CC BL 0x3E276B8
	0x03E281D0 LDRB W8, [X19 + 0x1D0]
	0x03E281D4 CBZ W8, 0x3E28568
	0x03E281D8 MOV X0, X31
	0x03E281DC BL 0x3C3CC00
	0x03E281E0 TBZ X0, 0x0, 0x3E28568
	0x03E281E4 LDRB W8, [X19 + 0x210]
	0x03E281E8 CBNZ W8, 0x3E28568
	0x03E281EC LDR X0, [X19 + 0x100]
	0x03E281F0 CBZ X0, 0x3E28550
	0x03E281F4 MOV X1, X31
	0x03E281F8 BL 0x3C3D058
	0x03E281FC LDR X8, [X19 + 0x100]
	0x03E28200 CBZ W0, 0x3E2823C
	0x03E28204 CBZ X8, 0x3E28550
	0x03E28208 LDRB W9, [X19 + 0x190]
	0x03E2820C CBNZ W9, 0x3E28234
	0x03E28210 MOV X0, X8
	0x03E28214 MOV X1, X31
	0x03E28218 BL 0x3C3CF1C
	0x03E2821C MOV X1, X0
	0x03E28220 MOVZ W2, 0x1
	0x03E28224 MOV X0, X19
	0x03E28228 BL 0x3E25A1C
	0x03E2822C LDR X8, [X19 + 0x100]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5C1000
	006 Move X20, 0x343000
	007 Move W8, [X21+1747]
	008 Move X20, [X20+4024]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x343000
	015 Move X0, [X0+4024]
	016 Call 0x1C17CF4
	017 Move X0, 0x343000
	018 Move X0, [X0+4032]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1747], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call Selectable.Awake, X0
	025 Move X0, [X20]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {31}
	029 Call 0x1C17DFC
	030 Move X0, [X20]
	031 Move X8, [X0+184]
	032 Move W8, [X8+8]
	033 Compare W8, 0
	034 JumpIfNotEqual {54}
	035 Move X0, X31
	036 Call SystemInfo.get_deviceModel
	037 Move X8, 0x343000
	038 Move X8, [X8+4032]
	039 Move X2, X31
	040 Move X1, [X8]
	041 Call String.op_Equality, X0, X1
	042 Move X8, [X20]
	043 And W19, W0, 1
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {50}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X8, [X20]
	050 Move X8, [X8+184]
	051 Move W9, 1
	052 Move [X8+9], W19
	053 Move [X8+8], W9
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03E28230 CBZ X8, 0x3E2857C
	0x03E28234 MOV X0, X8
	0x03E28238 B 0x3E28514
	0x03E2823C CBZ X8, 0x3E2857C
	0x03E28240 MOV X0, X8
	0x03E28244 MOV X1, X31
	0x03E28248 BL 0x3C3CF1C
	0x03E2824C LDR X8, [X19 + 0x180]
	0x03E28250 MOV X20, X0
	0x03E28254 MOV X1, X20
	0x03E28258 MOV X2, X31
	0x03E2825C MOV X0, X8
	0x03E28260 BL 0x3226EF8
	0x03E28264 TBZ X0, 0x0, 0x3E28288
	0x03E28268 LDRB W8, [X19 + 0x190]
	0x03E2826C CBZ W8, 0x3E2830C
	0x03E28270 LDR X0, [X19 + 0x100]
	0x03E28274 CBZ X0, 0x3E2857C
	0x03E28278 LDR X1, [X19 + 0x180]
	0x03E2827C MOV X2, X31
	0x03E28280 BL 0x3C3CF58
	0x03E28284 B 0x3E284F8
	0x03E28288 LDRB W8, [X19 + 0x12C]
	0x03E2828C CBZ W8, 0x3E282EC
	0x03E28290 LDR X0, [X19 + 0x100]
	0x03E28294 CBZ X0, 0x3E2857C
	0x03E28298 MOV X1, X31
	0x03E2829C BL 0x3C3D114
	0x03E282A0 TBZ X0, 0x0, 0x3E282EC
	0x03E282A4 ADRP X20, 0x2CB000
	0x03E282A8 LDR X20, [X20 + 0x970]
	0x03E282AC LDR X0, [X20]
	0x03E282B0 LDR W8, [X0 + 0xE0]
	0x03E282B4 CBNZ W8, 0x3E282BC
	0x03E282B8 BL 0x1C16DFC
	0x03E282BC MOV X0, X31
	0x03E282C0 BL 0x3C01AB0
	0x03E282C4 CMP W0, 0x8
	0x03E282C8 B.EQ 0x3E282EC
	0x03E282CC LDR X0, [X20]
	0x03E282D0 LDR W8, [X0 + 0xE0]
	0x03E282D4 CBNZ W8, 0x3E282DC
	0x03E282D8 BL 0x1C16DFC
	0x03E282DC MOV X0, X31
	0x03E282E0 BL 0x3C01AB0
	0x03E282E4 CMP W0, 0x1F
	0x03E282E8 B.NE 0x3E2849C
	0x03E282EC LDR X0, [X19 + 0x100]
	0x03E282F0 CBZ X0, 0x3E2857C
	0x03E282F4 MOV X1, X31
	0x03E282F8 BL 0x3C3D0D8
	0x03E282FC TBZ X0, 0x0, 0x3E284F8
	0x03E28300 MOV X0, X19
	0x03E28304 BL 0x3E27F30
	0x03E28308 B 0x3E284F8
	0x03E2830C ADRP X8, 0x2CB000
	0x03E28310 LDR X8, [X8 + 0x988]
	0x03E28314 LDR X8, [X8]
	0x03E28318 STR X8, [X19 + 0x180]
	0x03E2831C CBZ X20, 0x3E2857C
	0x03E28320 LDR W8, [X20 + 0x10]
	0x03E28324 CMP W8, 0x1
	0x03E28328 B.LT 0x3E28410
	0x03E2832C ADRP X24, 0x2CD000
	0x03E28330 LDR X24, [X24 + 0x170]
	0x03E28334 MOV W21, W31
	0x03E28338 MOVZ W23, 0xA
	0x03E2833C MOV X0, X20
	0x03E28340 MOV W1, W21
	0x03E28344 MOV X2, X31
	0x03E28348 BL 0x3222A1C
	0x03E2834C AND W8, W0, 0xFFFF
	0x03E28350 CMP W8, 0x3
	0x03E28354 CCMP W8, 0xD, 0x4, NE
	0x03E28358 CSEL W3, W23, W0, EQ
	0x03E2835C STRH W3, [X31 + 0xC]
	0x03E28360 LDR X8, [X19 + 0x150]
	0x03E28364 CBZ X8, 0x3E28388
	0x03E28368 LDR X1, [X19 + 0x180]
	0x03E2836C CBZ X1, 0x3E2857C
	0x03E28370 LDR W2, [X1 + 0x10]
	0x03E28374 LDR X9, [X8 + 0x18]
	0x03E28378 LDR X0, [X8 + 0x40]
	0x03E2837C LDR X4, [X8 + 0x28]
	0x03E28380 BLR X9
	0x03E28384 B 0x3E283A4
	0x03E28388 LDR W8, [X19 + 0x130]
	0x03E2838C CBZ W8, 0x3E283AC
	0x03E28390 LDR X1, [X19 + 0x180]
	0x03E28394 CBZ X1, 0x3E2857C
	0x03E28398 LDR W2, [X1 + 0x10]
	0x03E2839C MOV X0, X19
	0x03E283A0 BL 0x3E28F04
	0x03E283A4 MOV W3, W0
	0x03E283A8 STRH W0, [X31 + 0xC]
	0x03E283AC AND W8, W3, 0xFFFF
	0x03E283B0 CMP W8, 0xA
	0x03E283B4 B.NE 0x3E283C4
	0x03E283B8 LDR W8, [X19 + 0x128]
	0x03E283BC CMP W8, 0x1
	0x03E283C0 B.EQ 0x3E28484
	0x03E283C4 ANDS W31, W3, 0xFFFF
	0x03E283C8 B.EQ 0x3E28400
	0x03E283CC LDR X0, [X24]
	0x03E283D0 LDR X22, [X19 + 0x180]
	0x03E283D4 LDR W8, [X0 + 0xE0]
	0x03E283D8 CBNZ W8, 0x3E283E0
	0x03E283DC BL 0x1C16DFC
	0x03E283E0 ADD X0, X31, 0xC
	0x03E283E4 MOV X1, X31
	0x03E283E8 BL 0x330A76C
	0x03E283EC MOV X1, X0
	0x03E283F0 MOV X0, X22
	0x03E283F4 MOV X2, X31
	0x03E283F8 BL 0x321B938
	0x03E283FC STR X0, [X19 + 0x180]
	0x03E28400 LDR W8, [X20 + 0x10]
	0x03E28404 ADD W21, W21, 0x1
	0x03E28408 CMP W21, W8
	0x03E2840C B.LT 0x3E2833C
	0x03E28410 LDR W2, [X19 + 0x134]
	0x03E28414 CMP W2, 0x1
	0x03E28418 B.LT 0x3E28440
	0x03E2841C LDR X0, [X19 + 0x180]
	0x03E28420 CBZ X0, 0x3E2857C
	0x03E28424 LDR W8, [X0 + 0x10]
	0x03E28428 CMP W8, W2
	0x03E2842C B.LE 0x3E28440
	0x03E28430 MOV W1, W31
	0x03E28434 MOV X3, X31
	0x03E28438 BL 0x3228DE4
	0x03E2843C STR X0, [X19 + 0x180]
	0x03E28440 LDR X0, [X19 + 0x100]
	0x03E28444 CBZ X0, 0x3E2857C
	0x03E28448 MOV X1, X31
	0x03E2844C BL 0x3C3D0D8
	0x03E28450 TBZ X0, 0x0, 0x3E28464
	0x03E28454 MOV X0, X19
	0x03E28458 BL 0x3E27F30
	0x03E2845C LDR X0, [X19 + 0x180]
	0x03E28460 B 0x3E284C4
	0x03E28464 LDR X0, [X19 + 0x180]
	0x03E28468 CBZ X0, 0x3E2857C
	0x03E2846C LDR W9, [X0 + 0x10]
	0x03E28470 ADD X8, X19, 0x194
	0x03E28474 STR W9, [X19 + 0x198]
	0x03E28478 TBNZ X9, 0x1F, 0x3E284C0
	0x03E2847C STR W9, [X8]
	0x03E28480 B 0x3E284C4
	0x03E28484 LDR X0, [X19 + 0x100]
	0x03E28488 CBZ X0, 0x3E2857C
	0x03E2848C LDR X1, [X19 + 0x180]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x5C1000
	007 Move W8, [X20+1748]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {36}
	013 Move X0, 0x332000
	014 Move X0, [X0+280]
	015 Call 0x1C17CF4
	016 Move X0, 0x343000
	017 Move X0, [X0+3896]
	018 Call 0x1C17CF4
	019 Move X0, 0x343000
	020 Move X0, [X0+3904]
	021 Call 0x1C17CF4
	022 Move X0, 0x343000
	023 Move X0, [X0+3912]
	024 Call 0x1C17CF4
	025 Move X0, 0x2CC000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move X0, 0x2CE000
	029 Move X0, [X0+632]
	030 Call 0x1C17CF4
	031 Move X0, 0x2F3000
	032 Move X0, [X0+3632]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1748], W8
	036 Move X0, X19
	037 Move X1, X31
	038 Call Selectable.OnEnable, X0
	039 Move X8, [X19+384]
	040 Compare X8, 0
	041 JumpIfEqual {43}
	042 Move [X19+484], W31
	043 Move X8, 0x2CE000
	044 Move X8, [X8+632]
	045 Move X8, [X8]
	046 Move X8, [X8+184]
	047 Move X8, [X8]
	048 Move [X19+484], W31
	049 Move [X19+384], X8
	050 Compare X8, 0
	051 JumpIfEqual {177}
	052 Move W8, [X8+16]
	053 Move X22, 0x2CC000
	054 Move X22, [X22+1432]
	055 Move X20, [X19+440]
	056 Move [X19+488], W8
	057 Move X0, [X22]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Inequality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {99}
	070 Move X8, 0x332000
	071 Move X8, [X8+280]
	072 Move X20, [X19+440]
	073 Move X21, [X19+264]
	074 Move X0, [X8]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X0, X31
	080 Call Graphic.get_defaultGraphicMaterial
	081 Compare X21, 0
	082 JumpIfEqual {177}
	083 Move X8, [X21]
	084 Move X1, X0
	085 Move X0, X21
	086 Move X9, [X8+1240]
	087 Move X2, [X8+1248]
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move X21, X0
	090 Move X0, X31
	091 Call Texture2D.get_whiteTexture
	092 Compare X20, 0
	093 JumpIfEqual {177}
	094 Move X2, X0
	095 Move X0, X20
	096 Move X1, X21
	097 Move X3, X31
	098 Call CanvasRenderer.SetMaterial, X0, X1, X2
	099 Move X0, [X22]
	100 Move X20, [X19+264]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move X0, X20
	106 Move X1, X31
	107 Move X2, X31
	108 Call Object.op_Inequality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {171}
	113 Move X22, 0x2F3000
	114 Move X20, [X19+264]
	115 Move X22, [X22+3632]
	116 Move X0, [X22]
	117 Call 0x1C17F10
	118 Move X8, 0x343000
	119 Move X8, [X8+3896]
	120 Move X1, X19
	121 Move X3, X31
	122 Move X21, X0
	123 Move X2, [X8]
	124 Call UnityAction..ctor, X0, X1, X2
	125 Compare X20, 0
	126 JumpIfEqual {177}
	127 Move X0, X20
	128 Move X1, X21
	129 Move X2, X31
	130 Call Graphic.RegisterDirtyVerticesCallback, X0, X1
	131 Move X0, [X22]
	132 Move X20, [X19+264]
	133 Call 0x1C17F10
	134 Move X8, 0x343000
	135 Move X8, [X8+3912]
	136 Move X1, X19
	137 Move X3, X31
	138 Move X21, X0
	139 Move X2, [X8]
	140 Call UnityAction..ctor, X0, X1, X2
	141 Compare X20, 0
	142 JumpIfEqual {177}
	143 Move X0, X20
	144 Move X1, X21
	145 Move X2, X31
	146 Call Graphic.RegisterDirtyVerticesCallback, X0, X1
	147 Move X0, [X22]
	148 Move X20, [X19+264]
	149 Call 0x1C17F10
	150 Move X8, 0x343000
	151 Move X8, [X8+3904]
	152 Move X1, X19
	153 Move X3, X31
	154 Move X21, X0
	155 Move X2, [X8]
	156 Call UnityAction..ctor, X0, X1, X2
	157 Compare X20, 0
	158 JumpIfEqual {177}
	159 Move X0, X20
	160 Move X1, X21
	161 Move X2, X31
	162 Call Graphic.RegisterDirtyMaterialCallback, X0, X1
	163 Move X0, X19
	164 Move X20, [X31+32]
	165 Move X19, [X31+40]
	166 Move X22, [X31+16]
	167 Move X21, [X31+24]
	168 Move X30, [X31+48]
	169 Call InputField.UpdateLabel, X0
	170 Return 
	171 Move X20, [X31+32]
	172 Move X19, [X31+40]
	173 Move X22, [X31+16]
	174 Move X21, [X31+24]
	175 Move X30, [X31+48]
	176 Return 
	177 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03E28490 MOV X2, X31
	0x03E28494 BL 0x3C3CF58
	0x03E28498 B 0x3E28548
	0x03E2849C LDR X20, [X19 + 0x100]
	0x03E284A0 MOV X0, X19
	0x03E284A4 BL 0x3E27DB4
	0x03E284A8 CBZ X20, 0x3E2857C
	0x03E284AC MOV X1, X0
	0x03E284B0 MOV X0, X20
	0x03E284B4 MOV X2, X31
	0x03E284B8 BL 0x3C3D1E0
	0x03E284BC B 0x3E284F8
	0x03E284C0 STR X31, [X8]
	0x03E284C4 MOV X1, X20
	0x03E284C8 MOV X2, X31
	0x03E284CC BL 0x3226EF8
	0x03E284D0 TBZ X0, 0x0, 0x3E284E8
	0x03E284D4 LDR X0, [X19 + 0x100]
	0x03E284D8 CBZ X0, 0x3E2857C
	0x03E284DC LDR X1, [X19 + 0x180]
	0x03E284E0 MOV X2, X31
	0x03E284E4 BL 0x3C3CF58
	0x03E284E8 MOV X0, X19
	0x03E284EC BL 0x3E25DF4
	0x03E284F0 MOV X0, X19
	0x03E284F4 BL 0x3E25E74
	0x03E284F8 LDR X0, [X19 + 0x100]
	0x03E284FC CBZ X0, 0x3E2857C
	0x03E28500 MOV X1, X31
	0x03E28504 BL 0x3C3D058
	0x03E28508 CBZ W0, 0x3E28568
	0x03E2850C LDR X0, [X19 + 0x100]
	0x03E28510 CBZ X0, 0x3E2857C
	0x03E28514 MOV X1, X31
	0x03E28518 BL 0x3C3D058
	0x03E2851C CMP W0, 0x2
	0x03E28520 B.NE 0x3E28530
	0x03E28524 MOVZ W8, 0x1
	0x03E28528 STRB W8, [X19 + 0x200]
	0x03E2852C B 0x3E28550
	0x03E28530 LDR X0, [X19 + 0x100]
	0x03E28534 CBZ X0, 0x3E2857C
	0x03E28538 MOV X1, X31
	0x03E2853C BL 0x3C3D058
	0x03E28540 CMP W0, 0x1
	0x03E28544 B.NE 0x3E28550
	0x03E28548 MOV X0, X19
	0x03E2854C BL 0x3E28E84
	0x03E28550 LDR X8, [X19]
	0x03E28554 MOV X0, X19
	0x03E28558 MOV X1, X31
	0x03E2855C LDR X9, [X8 + 0x388]
	0x03E28560 LDR X2, [X8 + 0x390]
	0x03E28564 BLR X9
	0x03E28568 LDP X20, X19, [X31 + 0x30]
	0x03E2856C LDP X22, X21, [X31 + 0x20]
	0x03E28570 LDP X24, X23, [X31 + 0x10]
	0x03E28574 LDR X30, [X31], #0x40
	0x03E28578 RET
	0x03E2857C BL 0x1C16F20
	0x03E28580 MOV X0, X21
	0x03E28584 BL 0x1C16F18
	0x03E28588 BL 0x1C16F20
	0x03E2858C CMP W1, 0x1
	0x03E28590 MOV X22, X0
	0x03E28594 B.NE 0x3E285B4
	0x03E28598 MOV X0, X22
	0x03E2859C BL 0x3EB1AD0
	0x03E285A0 LDR X21, [X0]
	0x03E285A4 BL 0x3EB1AE0
	0x03E285A8 MOV W22, W31
	0x03E285AC CBNZ X20, 0x3E28128
	0x03E285B0 B 0x3E28198
	0x03E285B4 MOV X21, X31
	0x03E285B8 B 0x3E285C0
	0x03E285BC MOV X22, X0
	0x03E285C0 CBZ X20, 0x3E28624
	0x03E285C4 ADRP X10, 0x2CB000
	0x03E285C8 LDR X8, [X20]
	0x03E285CC LDR X10, [X10 + 0xE00]
	0x03E285D0 LDRH W9, [X8 + 0x12E]
	0x03E285D4 LDR X1, [X10]
	0x03E285D8 CBZ X9, 0x3E285FC
	0x03E285DC LDR X10, [X8 + 0xB0]
	0x03E285E0 ADD X10, X10, 0x8
	0x03E285E4 LDUR X11, [X10 - 0x8]
	0x03E285E8 CMP X11, X1
	0x03E285EC B.EQ 0x3E2860C
	0x03E285F0 SUBS X9, X9, 0x1
	0x03E285F4 ADD X10, X10, 0x10
	0x03E285F8 B.NE 0x3E285E4
	0x03E285FC MOV X0, X20
	0x03E28600 MOV W2, W31
	0x03E28604 BL 0x1C5C788
	0x03E28608 B 0x3E28618
	0x03E2860C LDRSW X9, [X10]
	0x03E28610 ADD X8, X8, X9, 0x4, LSL
	0x03E28614 ADD X0, X8, 0x138
	0x03E28618 LDP X8, X1, [X0]
	0x03E2861C MOV X0, X20
	0x03E28620 BLR X8
	0x03E28624 CBNZ X21, 0x3E28630
	0x03E28628 MOV X0, X22
	0x03E2862C BL 0x1D2C690
	0x03E28630 MOV X0, X21
	0x03E28634 BL 0x1C16F18
	0x03E28638 BL 0x1990590
	0x03E2863C SUB X31, X31, 0x40
	0x03E28640 STP X30, X23, [X31 + 0x10]
	0x03E28644 STP X22, X21, [X31 + 0x20]
	0x03E28648 STP X20, X19, [X31 + 0x30]
	0x03E2864C ADRP X20, 0x5C0000
	0x03E28650 ADRP X23, 0x2F2000
	0x03E28654 LDRB W8, [X20 + 0x700]
	0x03E28658 LDR X23, [X23 + 0xDF8]
	0x03E2865C MOV X19, X0
	0x03E28660 TBNZ X8, 0x0, 0x3E2869C
	0x03E28664 ADRP X0, 0x2F2000
	0x03E28668 LDR X0, [X0 + 0xDF8]
	0x03E2866C BL 0x1C16CF4
	0x03E28670 ADRP X0, 0x342000
	0x03E28674 LDR X0, [X0 + 0xFB8]
	0x03E28678 BL 0x1C16CF4
	0x03E2867C ADRP X0, 0x2CB000
	0x03E28680 LDR X0, [X0 + 0x598]
	0x03E28684 BL 0x1C16CF4
	0x03E28688 ADRP X0, 0x2CB000
	0x03E2868C LDR X0, [X0 + 0x988]
	0x03E28690 BL 0x1C16CF4
	0x03E28694 MOVZ W8, 0x1
	0x03E28698 STRB W8, [X20 + 0x700]
	0x03E2869C LDR X0, [X23]
	0x03E286A0 ADRP X22, 0x2CB000
	0x03E286A4 LDR W8, [X0 + 0xE0]
	0x03E286A8 LDR X22, [X22 + 0x598]
	0x03E286AC CBNZ W8, 0x3E286B4
	0x03E286B0 BL 0x1C16DFC
	0x03E286B4 MOV X0, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x5C1000
	008 Move X22, 0x2CC000
	009 Move W8, [X20+1749]
	010 Move X22, [X22+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x331000
	017 Move X0, [X0+1816]
	018 Call 0x1C17CF4
	019 Move X0, 0x343000
	020 Move X0, [X0+3896]
	021 Call 0x1C17CF4
	022 Move X0, 0x343000
	023 Move X0, [X0+3904]
	024 Call 0x1C17CF4
	025 Move X0, 0x343000
	026 Move X0, [X0+3912]
	027 Call 0x1C17CF4
	028 Move X0, 0x2CC000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move X0, 0x2F3000
	032 Move X0, [X0+3632]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1749], W8
	036 Move X0, X19
	037 Move [X19+472], X31
	038 Call InputField.DeactivateInputField, X0
	039 Move X0, [X22]
	040 Move X20, [X19+264]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {103}
	053 Move X23, 0x2F3000
	054 Move X23, [X23+3632]
	055 Move X21, 0x343000
	056 Move X20, [X19+264]
	057 Move X0, [X23]
	058 Move X21, [X21+3896]
	059 Call 0x1C17F10
	060 Move X2, [X21]
	061 Move X1, X19
	062 Move X3, X31
	063 Move X21, X0
	064 Call UnityAction..ctor, X0, X1, X2
	065 Compare X20, 0
	066 JumpIfEqual {166}
	067 Move X0, X20
	068 Move X1, X21
	069 Move X2, X31
	070 Call Graphic.UnregisterDirtyVerticesCallback, X0, X1
	071 Move X0, [X23]
	072 Move X20, [X19+264]
	073 Call 0x1C17F10
	074 Move X8, 0x343000
	075 Move X8, [X8+3912]
	076 Move X1, X19
	077 Move X3, X31
	078 Move X21, X0
	079 Move X2, [X8]
	080 Call UnityAction..ctor, X0, X1, X2
	081 Compare X20, 0
	082 JumpIfEqual {166}
	083 Move X0, X20
	084 Move X1, X21
	085 Move X2, X31
	086 Call Graphic.UnregisterDirtyVerticesCallback, X0, X1
	087 Move X0, [X23]
	088 Move X20, [X19+264]
	089 Call 0x1C17F10
	090 Move X8, 0x343000
	091 Move X8, [X8+3904]
	092 Move X1, X19
	093 Move X3, X31
	094 Move X21, X0
	095 Move X2, [X8]
	096 Call UnityAction..ctor, X0, X1, X2
	097 Compare X20, 0
	098 JumpIfEqual {166}
	099 Move X0, X20
	100 Move X1, X21
	101 Move X2, X31
	102 Call Graphic.UnregisterDirtyMaterialCallback, X0, X1
	103 Move X8, 0x331000
	104 Move X8, [X8+1816]
	105 Move X0, [X8]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {110}
	109 Call 0x1C17DFC
	110 Move X0, X19
	111 Move X1, X31
	112 Call CanvasUpdateRegistry.DisableCanvasElementForRebuild, X0
	113 Move X0, [X22]
	114 Move X20, [X19+440]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X0, X20
	120 Move X1, X31
	121 Move X2, X31
	122 Call Object.op_Inequality, X0, X1
	123 Move TEMP, X0
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {132}
	127 Move X0, [X19+440]
	128 Compare X0, 0
	129 JumpIfEqual {166}
	130 Move X1, X31
	131 Call CanvasRenderer.Clear, X0
	132 Move X0, [X22]
	133 Move X20, [X19+456]
	134 Move W8, [X0+224]
	135 Compare W8, 0
	136 JumpIfNotEqual {138}
	137 Call 0x1C17DFC
	138 Move X0, X20
	139 Move X1, X31
	140 Move X2, X31
	141 Call Object.op_Inequality, X0, X1
	142 Move TEMP, X0
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {155}
	146 Move X0, [X22]
	147 Move X20, [X19+456]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Move X0, X20
	153 Move X1, X31
	154 Call Object.DestroyImmediate, X0
	155 Move [X19+456], X31
	156 Move X0, X19
	157 Move X20, [X31+32]
	158 Move X19, [X31+40]
	159 Move X22, [X31+16]
	160 Move X21, [X31+24]
	161 Move X1, X31
	162 Move X30, [X31+48]
	163 Move X23, [X31+56]
	164 Call Selectable.OnDisable, X0
	165 Return 
	166 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03E28834 AND W0, W0, 0x1
	0x03E28838 MOV X1, X31
	0x03E2883C BL 0x3C3CF9C
	0x03E28840 LDR W8, [X19 + 0x11C]
	0x03E28844 LDR W9, [X19 + 0x128]
	0x03E28848 LDR X0, [X19 + 0x180]
	0x03E2884C LDR W1, [X19 + 0x124]
	0x03E28850 LDR W7, [X19 + 0x134]
	0x03E28854 CMP W8, 0x2
	0x03E28858 SUB W9, W9, 0x1
	0x03E2885C B.NE 0x3E28884
	0x03E28860 ADRP X8, 0x2CB000
	0x03E28864 LDR X8, [X8 + 0x988]
	0x03E28868 CMP W9, 0x2
	0x03E2886C CSET W3, CC
	0x03E28870 MOVZ W4, 0x1
	0x03E28874 LDR X6, [X8]
	0x03E28878 MOV W2, W31
	0x03E2887C STR X31, [X31]
	0x03E28880 B 0x3E288A8
	0x03E28884 CMP W9, 0x2
	0x03E28888 ADRP X9, 0x2CB000
	0x03E2888C LDR X9, [X9 + 0x988]
	0x03E28890 CSET W3, CC
	0x03E28894 CMP W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C1000
	006 Move X21, 0x331000
	007 Move W8, [X20+1750]
	008 Move X21, [X21+1816]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x331000
	015 Move X0, [X0+1816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1750], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Call CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild, X0
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call UIBehaviour.OnDestroy, X0
	034 Return 

Method: System.Collections.IEnumerator CaretBlink()

Disassembly:
	0x03E28898 CSET W2, EQ
	0x03E2889C LDR X6, [X9]
	0x03E288A0 STR X31, [X31]
	0x03E288A4 MOV W4, W31
	0x03E288A8 MOV W5, W31
	0x03E288AC BL 0x3C3CDD8
	0x03E288B0 LDRB W8, [X19 + 0x210]
	0x03E288B4 STR X0, [X19 + 0x100]
	0x03E288B8 CBNZ W8, 0x3E288C8
	0x03E288BC MOV X0, X19
	0x03E288C0 MOV W1, W31
	0x03E288C4 BL 0x3E27AC8
	0x03E288C8 MOV X0, X31
	0x03E288CC BL 0x3C3CC00
	0x03E288D0 TBZ X0, 0x0, 0x3E288DC
	0x03E288D4 LDRB W8, [X19 + 0x210]
	0x03E288D8 CBZ W8, 0x3E28978
	0x03E288DC BL 0x3E25300
	0x03E288E0 LDR X8, [X22]
	0x03E288E4 MOV X20, X0
	0x03E288E8 LDR W9, [X8 + 0xE0]
	0x03E288EC CBNZ W9, 0x3E288F8
	0x03E288F0 MOV X0, X8
	0x03E288F4 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C1000
	006 Move X21, 0x343000
	007 Move W8, [X20+1751]
	008 Move X21, [X21+4040]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x343000
	015 Move X0, [X0+4040]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1751], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

Method: System.Void SetCaretVisible()

Disassembly:
	0x03E28920 LDR X2, [X8 + 0x270]
	0x03E28924 BLR X9
	0x03E28928 LDR X8, [X19 + 0x180]
	0x03E2892C CBZ X8, 0x3E28980
	0x03E28930 LDR W9, [X8 + 0x10]
	0x03E28934 BIC W9, W9, W9, 0x1F
	0x03E28938 STR W9, [X19 + 0x194]
	0x03E2893C LDR W9, [X8 + 0x10]
	0x03E28940 AND W9, W9, W9, 0x1F
	0x03E28944 STR W9, [X19 + 0x198]
	0x03E28948 MOVZ W9, 0x1
	0x03E2894C MOV X0, X19
	0x03E28950 STR X8, [X19 + 0x1F8]
	0x03E28954 STRB W9, [X19 + 0x1D0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+464]
	004 Compare W8, 0
	005 JumpIfEqual {17}
	006 Move W8, 1
	007 Move X19, X0
	008 Move [X0+468], W8
	009 Move X0, X31
	010 Call Time.get_unscaledTime
	011 Move [X19+480], S0
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call InputField.SetCaretActive, X0
	016 Return 
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 

Method: System.Void SetCaretActive()

Disassembly:
	0x03E272F8 LDR X0, [X22]
	0x03E272FC LDR W8, [X0 + 0xE0]
	0x03E27300 CBNZ W8, 0x3E27308
	0x03E27304 BL 0x1C16DFC
	0x03E27308 MOV X0, X20
	0x03E2730C MOV X1, X31
	0x03E27310 MOV X2, X31
	0x03E27314 BL 0x3C354F8
	0x03E27318 TBZ X0, 0x0, 0x3E27384
	0x03E2731C ADRP X8, 0x332000
	0x03E27320 LDR X8, [X8 + 0x118]
	0x03E27324 LDR X20, [X19 + 0x1B8]
	0x03E27328 LDR X21, [X19 + 0x108]
	0x03E2732C LDR X0, [X8]
	0x03E27330 LDR W8, [X0 + 0xE0]
	0x03E27334 CBNZ W8, 0x3E2733C
	0x03E27338 BL 0x1C16DFC
	0x03E2733C MOV X0, X31
	0x03E27340 BL 0x3CDABE4
	0x03E27344 CBZ X21, 0x3E2748C
	0x03E27348 LDR X8, [X21]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+464]
	004 Compare W8, 0
	005 JumpIfEqual {21}
	006 Move V0, [X0+392]
	007 Move X19, X0
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move X8, [X19+472]
	010 Compare X8, 0
	011 JumpIfNotEqual {21}
	012 Move X0, X19
	013 Call InputField.CaretBlink, X0
	014 Move X1, X0
	015 Move X0, X19
	016 Move X2, X31
	017 Call MonoBehaviour.StartCoroutine, X0, X1
	018 Move [X19+472], X0
	019 Move W8, 1
	020 Move [X19+468], W8
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Return 

Method: System.Void UpdateCaretMaterial()

Disassembly:
	0x03E28958 STRB W31, [X19 + 0x200]
	0x03E2895C BL 0x3E27920
	0x03E28960 MOV X0, X19
	0x03E28964 LDP X20, X19, [X31 + 0x30]
	0x03E28968 LDP X22, X21, [X31 + 0x20]
	0x03E2896C LDP X30, X23, [X31 + 0x10]
	0x03E28970 ADD X31, X31, 0x40
	0x03E28974 B 0x3E25E74
	0x03E28978 LDR X8, [X19 + 0x180]
	0x03E2897C B 0x3E28948
	0x03E28980 BL 0x1C16F20
	0x03E28984 STR D12, [X31 - 0x50]!
	0x03E28988 STP D11, D10, [X31 + 0x10]
	0x03E2898C STP D9, D8, [X31 + 0x20]
	0x03E28990 STP X30, X21, [X31 + 0x30]
	0x03E28994 STP X20, X19, [X31 + 0x40]
	0x03E28998 ADRP X20, 0x5C0000
	0x03E2899C ADRP X21, 0x2CB000
	0x03E289A0 LDRB W8, [X20 + 0x6F9]
	0x03E289A4 LDR X21, [X21 + 0x598]
	0x03E289A8 MOV X19, X0
	0x03E289AC TBNZ X8, 0x0, 0x3E289C4
	0x03E289B0 ADRP X0, 0x2CB000
	0x03E289B4 LDR X0, [X0 + 0x598]
	0x03E289B8 BL 0x1C16CF4
	0x03E289BC MOVZ W8, 0x1
	0x03E289C0 STRB W8, [X20 + 0x6F9]
	0x03E289C4 LDR X0, [X21]
	0x03E289C8 LDR X20, [X19 + 0x108]
	0x03E289CC LDR W8, [X0 + 0xE0]
	0x03E289D0 CBNZ W8, 0x3E289D8
	0x03E289D4 BL 0x1C16DFC
	0x03E289D8 MOV X0, X20
	0x03E289DC MOV X1, X31
	0x03E289E0 MOV X2, X31
	0x03E289E4 BL 0x3C354F8
	0x03E289E8 TBZ X0, 0x0, 0x3E28E68
	0x03E289EC LDR X0, [X21]
	0x03E289F0 LDR X20, [X19 + 0x1A0]
	0x03E289F4 LDR W8, [X0 + 0xE0]
	0x03E289F8 CBNZ W8, 0x3E28A00
	0x03E289FC BL 0x1C16DFC
	0x03E28A00 MOV X0, X20
	0x03E28A04 MOV X1, X31
	0x03E28A08 MOV X2, X31
	0x03E28A0C BL 0x3C354F8
	0x03E28A10 TBZ X0, 0x0, 0x3E28E68
	0x03E28A14 LDR X0, [X19 + 0x1A0]
	0x03E28A18 CBZ X0, 0x3E28E80
	0x03E28A1C MOV X1, X31
	0x03E28A20 BL 0x3C3EB78
	0x03E28A24 LDR X0, [X19 + 0x108]
	0x03E28A28 CBZ X0, 0x3E28E80
	0x03E28A2C MOV X1, X31
	0x03E28A30 MOV V8.16B, V0.16B
	0x03E28A34 MOV V9.16B, V1.16B
	0x03E28A38 MOV V10.16B, V2.16B
	0x03E28A3C BL 0x3CDB488
	0x03E28A40 CBZ X0, 0x3E28E80
	0x03E28A44 MOV X1, X31
	0x03E28A48 BL 0x3C3EB78
	0x03E28A4C ADRP X8, 0xFFFFFFFFFCCC1000
	0x03E28A50 FSUB S0, S8, S0
	0x03E28A54 FSUB S1, S9, S1
	0x03E28A58 LDR V12, [X8 + 0xF20]
	0x03E28A5C FSUB S2, S10, S2
	0x03E28A60 FMUL S0, S0, S0
	0x03E28A64 FMUL S1, S1, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C1000
	006 Move X21, 0x2CC000
	007 Move W8, [X20+1752]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x332000
	015 Move X0, [X0+280]
	016 Call 0x1C17CF4
	017 Move X0, 0x2CC000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1752], W8
	022 Move X0, [X21]
	023 Move X20, [X19+264]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {84}
	036 Move X0, [X21]
	037 Move X20, [X19+440]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {84}
	050 Move X8, 0x332000
	051 Move X8, [X8+280]
	052 Move X20, [X19+440]
	053 Move X19, [X19+264]
	054 Move X0, [X8]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X31
	060 Call Graphic.get_defaultGraphicMaterial
	061 Compare X19, 0
	062 JumpIfEqual {89}
	063 Move X8, [X19]
	064 Move X1, X0
	065 Move X0, X19
	066 Move X9, [X8+1240]
	067 Move X2, [X8+1248]
	068 NotImplemented "Instruction BLR not yet implemented."
	069 Move X19, X0
	070 Move X0, X31
	071 Call Texture2D.get_whiteTexture
	072 Compare X20, 0
	073 JumpIfEqual {89}
	074 Move X2, X0
	075 Move X0, X20
	076 Move X1, X19
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X3, X31
	080 Move X30, [X31+32]
	081 Move X21, [X31+40]
	082 Call CanvasRenderer.SetMaterial, X0, X1, X2
	083 Return 
	084 Move X20, [X31+16]
	085 Move X19, [X31+24]
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Return 
	089 Call 0x1C17F20

Method: System.Void OnFocus()

Disassembly:
	0x03E28A68 FADD S0, S0, S1
	0x03E28A6C FMUL S1, S2, S2
	0x03E28A70 FADD S0, S1, S0
	0x03E28A74 FCMP S0, S12
	0x03E28A78 B.PL 0x3E28CD4
	0x03E28A7C LDR X0, [X19 + 0x1A0]
	0x03E28A80 CBZ X0, 0x3E28E80
	0x03E28A84 MOV X1, X31
	0x03E28A88 BL 0x3C3F830
	0x03E28A8C LDR X0, [X19 + 0x108]
	0x03E28A90 CBZ X0, 0x3E28E80
	0x03E28A94 MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+384]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W9, [X8+16]
	006 NotImplemented "Instruction BIC not yet implemented."
	007 Move [X0+404], W9
	008 Move W8, [X8+16]
	009 And W8, W8, W8
	010 Move [X0+408], W8
	011 Move X30, [X31+16]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void SelectAll()

Disassembly:
	0x03E28A98 MOV V10.16B, V0.16B
	0x03E28A9C MOV V11.16B, V1.16B
	0x03E28AA0 MOV V9.16B, V2.16B
	0x03E28AA4 MOV V8.16B, V3.16B
	0x03E28AA8 BL 0x3CDB488
	0x03E28AAC CBZ X0, 0x3E28E80
	0x03E28AB0 MOV X1, X31
	0x03E28AB4 BL 0x3C3F830
	0x03E28AB8 FMUL S0, S10, S0
	0x03E28ABC FMUL S1, S11, S1
	0x03E28AC0 ADRP X8, 0xFFFFFFFFFCCC2000
	0x03E28AC4 FADD S0, S0, S1

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+384]
	003 Compare X8, 0
	004 JumpIfEqual {13}
	005 Move W9, [X8+16]
	006 NotImplemented "Instruction BIC not yet implemented."
	007 Move [X0+404], W9
	008 Move W8, [X8+16]
	009 And W8, W8, W8
	010 Move [X0+408], W8
	011 Move X30, [X31+16]
	012 Return 
	013 Call 0x1C17F20

Method: System.Void MoveTextEnd(System.Boolean shift)

Disassembly:
	0x03E28AC8 LDR V1, [X8 + 0x1B4]
	0x03E28ACC FMUL S2, S9, S2
	0x03E28AD0 FADD S0, S2, S0
	0x03E28AD4 FMUL S2, S8, S3
	0x03E28AD8 FADD S0, S2, S0
	0x03E28ADC FCMP S0, S1
	0x03E28AE0 B.LE 0x3E28CD4
	0x03E28AE4 LDR X0, [X19 + 0x1A0]
	0x03E28AE8 CBZ X0, 0x3E28E80
	0x03E28AEC MOV X1, X31
	0x03E28AF0 BL 0x3C3FBAC
	0x03E28AF4 LDR X0, [X19 + 0x108]
	0x03E28AF8 CBZ X0, 0x3E28E80
	0x03E28AFC MOV X1, X31
	0x03E28B00 MOV V8.16B, V0.16B
	0x03E28B04 MOV V9.16B, V1.16B
	0x03E28B08 MOV V10.16B, V2.16B
	0x03E28B0C BL 0x3CDB488
	0x03E28B10 CBZ X0, 0x3E28E80
	0x03E28B14 MOV X1, X31
	0x03E28B18 BL 0x3C3FBAC
	0x03E28B1C FSUB S0, S8, S0
	0x03E28B20 FSUB S1, S9, S1
	0x03E28B24 FSUB S2, S10, S2

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+384]
	004 Compare X8, 0
	005 JumpIfEqual {33}
	006 Move W8, [X8+16]
	007 Move X19, X0
	008 NotImplemented "Instruction BIC not yet implemented."
	009 Move TEMP, X1
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {26}
	013 Move X0, X19
	014 Move [X19+404], W8
	015 Call InputField.get_caretPositionInternal, X0
	016 Move [X19+408], W0
	017 Move TEMP, X0
	018 And TEMP, TEMP, -2147483648
	019 Compare TEMP, -2147483648
	020 JumpIfEqual {27}
	021 Move X8, [X19+384]
	022 Compare X8, 0
	023 JumpIfEqual {33}
	024 Move W8, [X8+16]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move [X19+408], W8
	027 Move [X19+408], W31
	028 Move X0, X19
	029 Move X30, [X31+16]
	030 Move X19, [X31+24]
	031 Call InputField.UpdateLabel, X0
	032 Return 
	033 Call 0x1C17F20

Method: System.Void MoveTextStart(System.Boolean shift)

Disassembly:
	0x03E28B28 FMUL S0, S0, S0
	0x03E28B2C FMUL S1, S1, S1
	0x03E28B30 FADD S0, S0, S1
	0x03E28B34 FMUL S1, S2, S2
	0x03E28B38 FADD S0, S1, S0
	0x03E28B3C FCMP S0, S12
	0x03E28B40 B.PL 0x3E28CD4
	0x03E28B44 LDR X0, [X19 + 0x1A0]
	0x03E28B48 CBZ X0, 0x3E28E80
	0x03E28B4C MOV X1, X31
	0x03E28B50 BL 0x3C3E5B8
	0x03E28B54 LDR X0, [X19 + 0x108]
	0x03E28B58 CBZ X0, 0x3E28E80
	0x03E28B5C MOV X1, X31
	0x03E28B60 MOV V8.16B, V0.16B
	0x03E28B64 MOV V9.16B, V1.16B
	0x03E28B68 BL 0x3CDB488
	0x03E28B6C CBZ X0, 0x3E28E80
	0x03E28B70 MOV X1, X31
	0x03E28B74 BL 0x3C3E5B8
	0x03E28B78 FSUB S0, S8, S0
	0x03E28B7C FSUB S1, S9, S1
	0x03E28B80 FMUL S0, S0, S0
	0x03E28B84 FMUL S1, S1, S1
	0x03E28B88 FADD S0, S0, S1
	0x03E28B8C FCMP S0, S12
	0x03E28B90 B.PL 0x3E28CD4
	0x03E28B94 LDR X0, [X19 + 0x1A0]
	0x03E28B98 CBZ X0, 0x3E28E80
	0x03E28B9C MOV X1, X31
	0x03E28BA0 BL 0x3C3E6D4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move TEMP, X1
	005 And TEMP, TEMP, 1
	006 Compare TEMP, 1
	007 JumpIfNotEqual {17}
	008 Move X8, [X19+384]
	009 Move [X19+408], W31
	010 Compare X8, 0
	011 JumpIfEqual {46}
	012 Move W8, [X8+16]
	013 Move TEMP, X8
	014 And TEMP, TEMP, -2147483648
	015 Compare TEMP, -2147483648
	016 JumpIfNotEqual {41}
	017 Move X8, [X19+384]
	018 Move [X19+404], W31
	019 Compare X8, 0
	020 JumpIfEqual {46}
	021 Move W8, [X8+16]
	022 Move TEMP, X8
	023 And TEMP, TEMP, -2147483648
	024 Compare TEMP, -2147483648
	025 JumpIfNotEqual {27}
	026 Move [X19+404], W8
	027 Move X0, X19
	028 Call InputField.get_caretPositionInternal, X0
	029 Move [X19+408], W0
	030 Move TEMP, X0
	031 And TEMP, TEMP, -2147483648
	032 Compare TEMP, -2147483648
	033 JumpIfEqual {40}
	034 Move X8, [X19+384]
	035 Compare X8, 0
	036 JumpIfEqual {46}
	037 Move W8, [X8+16]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move [X19+408], W8
	040 Move [X19+408], W31
	041 Move X0, X19
	042 Move X30, [X31+16]
	043 Move X19, [X31+24]
	044 Call InputField.UpdateLabel, X0
	045 Return 
	046 Call 0x1C17F20

Method: System.String get_clipboard()

Disassembly:
	0x03E28BA4 LDR X0, [X19 + 0x108]
	0x03E28BA8 CBZ X0, 0x3E28E80
	0x03E28BAC MOV X1, X31
	0x03E28BB0 MOV V8.16B, V0.16B
	0x03E28BB4 MOV V9.16B, V1.16B
	0x03E28BB8 BL 0x3CDB488
	0x03E28BBC CBZ X0, 0x3E28E80
	0x03E28BC0 MOV X1, X31
	0x03E28BC4 BL 0x3C3E6D4
	0x03E28BC8 FSUB S0, S8, S0
	0x03E28BCC FSUB S1, S9, S1
	0x03E28BD0 FMUL S0, S0, S0
	0x03E28BD4 FMUL S1, S1, S1
	0x03E28BD8 FADD S0, S0, S1
	0x03E28BDC FCMP S0, S12
	0x03E28BE0 B.PL 0x3E28CD4
	0x03E28BE4 LDR X0, [X19 + 0x1A0]
	0x03E28BE8 CBZ X0, 0x3E28E80
	0x03E28BEC MOV X1, X31
	0x03E28BF0 BL 0x3C3E7F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x5C1000
	005 Move X20, 0x2F8000
	006 Move W8, [X19+1753]
	007 Move X20, [X20+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2F8000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1753], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X0, X31
	025 Move X30, [X31+32]
	026 Call GUIUtility.get_systemCopyBuffer
	027 Return X0

Method: System.Void set_clipboard(System.String value)

Disassembly:
	0x03E28BF4 LDR X0, [X19 + 0x108]
	0x03E28BF8 CBZ X0, 0x3E28E80
	0x03E28BFC MOV X1, X31
	0x03E28C00 MOV V8.16B, V0.16B
	0x03E28C04 MOV V9.16B, V1.16B
	0x03E28C08 BL 0x3CDB488
	0x03E28C0C CBZ X0, 0x3E28E80
	0x03E28C10 MOV X1, X31
	0x03E28C14 BL 0x3C3E7F0
	0x03E28C18 FSUB S0, S8, S0
	0x03E28C1C FSUB S1, S9, S1
	0x03E28C20 FMUL S0, S0, S0
	0x03E28C24 FMUL S1, S1, S1
	0x03E28C28 FADD S0, S0, S1
	0x03E28C2C FCMP S0, S12
	0x03E28C30 B.PL 0x3E28CD4
	0x03E28C34 LDR X0, [X19 + 0x1A0]
	0x03E28C38 CBZ X0, 0x3E28E80
	0x03E28C3C MOV X1, X31
	0x03E28C40 BL 0x3C3E90C
	0x03E28C44 LDR X0, [X19 + 0x108]
	0x03E28C48 CBZ X0, 0x3E28E80

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C1000
	006 Move X21, 0x2F8000
	007 Move W8, [X20+1754]
	008 Move X21, [X21+1480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2F8000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1754], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call GUIUtility.set_systemCopyBuffer, X0
	031 Return 

Method: System.Boolean TouchScreenKeyboardShouldBeUsed()

Disassembly:
	0x03E28C4C MOV X1, X31
	0x03E28C50 MOV V8.16B, V0.16B
	0x03E28C54 MOV V9.16B, V1.16B
	0x03E28C58 BL 0x3CDB488
	0x03E28C5C CBZ X0, 0x3E28E80
	0x03E28C60 MOV X1, X31
	0x03E28C64 BL 0x3C3E90C
	0x03E28C68 FSUB S0, S8, S0
	0x03E28C6C FSUB S1, S9, S1
	0x03E28C70 FMUL S0, S0, S0
	0x03E28C74 FMUL S1, S1, S1
	0x03E28C78 FADD S0, S0, S1
	0x03E28C7C FCMP S0, S12
	0x03E28C80 B.PL 0x3E28CD4
	0x03E28C84 LDR X0, [X19 + 0x1A0]
	0x03E28C88 CBZ X0, 0x3E28E80
	0x03E28C8C MOV X1, X31
	0x03E28C90 BL 0x3C3EA28
	0x03E28C94 LDR X0, [X19 + 0x108]
	0x03E28C98 CBZ X0, 0x3E28E80
	0x03E28C9C MOV X1, X31
	0x03E28CA0 MOV V8.16B, V0.16B
	0x03E28CA4 MOV V9.16B, V1.16B
	0x03E28CA8 BL 0x3CDB488
	0x03E28CAC CBZ X0, 0x3E28E80
	0x03E28CB0 MOV X1, X31
	0x03E28CB4 BL 0x3C3EA28
	0x03E28CB8 FSUB S0, S8, S0
	0x03E28CBC FSUB S1, S9, S1
	0x03E28CC0 FMUL S0, S0, S0
	0x03E28CC4 FMUL S1, S1, S1
	0x03E28CC8 FADD S0, S0, S1
	0x03E28CCC FCMP S0, S12
	0x03E28CD0 B.MI 0x3E28E68
	0x03E28CD4 LDR X0, [X19 + 0x108]
	0x03E28CD8 CBZ X0, 0x3E28E80
	0x03E28CDC LDR X20, [X19 + 0x1A0]
	0x03E28CE0 MOV X1, X31
	0x03E28CE4 BL 0x3CDB488
	0x03E28CE8 CBZ X0, 0x3E28E80
	0x03E28CEC MOV X1, X31
	0x03E28CF0 BL 0x3C3EB78
	0x03E28CF4 CBZ X20, 0x3E28E80
	0x03E28CF8 MOV X0, X20
	0x03E28CFC MOV X1, X31
	0x03E28D00 BL 0x3C3EC04

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x5C1000
	005 Move X20, 0x2CC000
	006 Move W8, [X19+1755]
	007 Move X20, [X20+2416]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x2CC000
	013 Move X0, [X0+2416]
	014 Call 0x1C17CF4
	015 Move X0, 0x343000
	016 Move X0, [X0+4024]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1755], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X31
	026 Call Application.get_platform
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X19, 0x343000
	030 Move X19, [X19+4024]
	031 Move X0, [X19]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X19]
	037 Move X8, [X0+184]
	038 Move W8, [X8+9]
	039 Compare W8, 0
	040 JumpIfEqual {47}
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X0, X31
	044 Move X30, [X31+32]
	045 Call TouchScreenKeyboard.get_isSupported
	046 Return X0
	047 Move X0, X31
	048 Call TouchScreenKeyboard.get_isInPlaceEditingAllowed
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Xor W8, W0, 1
	052 And W0, W8, 1
	053 Move X30, [X31+32]
	054 Return X0

Method: System.Boolean InPlaceEditing()

Disassembly:
	0x03E28D04 LDR X0, [X19 + 0x108]
	0x03E28D08 CBZ X0, 0x3E28E80
	0x03E28D0C LDR X20, [X19 + 0x1A0]
	0x03E28D10 MOV X1, X31
	0x03E28D14 BL 0x3CDB488
	0x03E28D18 CBZ X0, 0x3E28E80
	0x03E28D1C MOV X1, X31
	0x03E28D20 BL 0x3C3F830
	0x03E28D24 CBZ X20, 0x3E28E80
	0x03E28D28 MOV X0, X20
	0x03E28D2C MOV X1, X31
	0x03E28D30 BL 0x3C3F8B8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, X31
	005 Call TouchScreenKeyboard.get_isSupported
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {13}
	010 Move W8, [X19+528]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Move W0, 1
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return X0

Method: System.Boolean InPlaceEditingChanged()

Disassembly:
	0x03E28D34 LDR X0, [X19 + 0x108]
	0x03E28D38 CBZ X0, 0x3E28E80
	0x03E28D3C LDR X20, [X19 + 0x1A0]
	0x03E28D40 MOV X1, X31
	0x03E28D44 BL 0x3CDB488
	0x03E28D48 CBZ X0, 0x3E28E80
	0x03E28D4C MOV X1, X31
	0x03E28D50 BL 0x3C3FBAC
	0x03E28D54 CBZ X20, 0x3E28E80
	0x03E28D58 MOV X0, X20
	0x03E28D5C MOV X1, X31
	0x03E28D60 BL 0x3C3FC4C
	0x03E28D64 LDR X0, [X19 + 0x108]
	0x03E28D68 CBZ X0, 0x3E28E80
	0x03E28D6C LDR X20, [X19 + 0x1A0]
	0x03E28D70 MOV X1, X31
	0x03E28D74 BL 0x3CDB488
	0x03E28D78 CBZ X0, 0x3E28E80
	0x03E28D7C MOV X1, X31
	0x03E28D80 BL 0x3C3E5B8
	0x03E28D84 CBZ X20, 0x3E28E80
	0x03E28D88 MOV X0, X20
	0x03E28D8C MOV X1, X31
	0x03E28D90 BL 0x3C3E648
	0x03E28D94 LDR X0, [X19 + 0x108]
	0x03E28D98 CBZ X0, 0x3E28E80
	0x03E28D9C LDR X20, [X19 + 0x1A0]
	0x03E28DA0 MOV X1, X31
	0x03E28DA4 BL 0x3CDB488
	0x03E28DA8 CBZ X0, 0x3E28E80
	0x03E28DAC MOV X1, X31
	0x03E28DB0 BL 0x3C3E6D4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5C1000
	006 Move X20, 0x343000
	007 Move W8, [X21+1756]
	008 Move X20, [X20+4024]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x343000
	015 Move X0, [X0+4024]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1756], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move W8, [X8+9]
	027 Compare W8, 0
	028 JumpIfEqual {30}
	029 Move W0, W31
	030 Move W19, [X19+528]
	031 Move X0, X31
	032 Call TouchScreenKeyboard.get_isInPlaceEditingAllowed
	033 And W8, W0, 1
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CSET not yet implemented."
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return X0

Method: UnityEngine.RangeInt GetInternalSelection()

Disassembly:
	0x03E28DB4 CBZ X20, 0x3E28E80
	0x03E28DB8 MOV X0, X20
	0x03E28DBC MOV X1, X31
	0x03E28DC0 BL 0x3C3E764
	0x03E28DC4 LDR X0, [X19 + 0x108]
	0x03E28DC8 CBZ X0, 0x3E28E80
	0x03E28DCC LDR X20, [X19 + 0x1A0]
	0x03E28DD0 MOV X1, X31
	0x03E28DD4 BL 0x3CDB488
	0x03E28DD8 CBZ X0, 0x3E28E80
	0x03E28DDC MOV X1, X31
	0x03E28DE0 BL 0x3C3E7F0
	0x03E28DE4 CBZ X20, 0x3E28E80
	0x03E28DE8 MOV X0, X20
	0x03E28DEC MOV X1, X31
	0x03E28DF0 BL 0x3C3E880
	0x03E28DF4 LDR X0, [X19 + 0x108]
	0x03E28DF8 CBZ X0, 0x3E28E80
	0x03E28DFC LDR X20, [X19 + 0x1A0]
	0x03E28E00 MOV X1, X31
	0x03E28E04 BL 0x3CDB488
	0x03E28E08 CBZ X0, 0x3E28E80
	0x03E28E0C MOV X1, X31
	0x03E28E10 BL 0x3C3E90C
	0x03E28E14 CBZ X20, 0x3E28E80
	0x03E28E18 MOV X0, X20
	0x03E28E1C MOV X1, X31
	0x03E28E20 BL 0x3C3E99C
	0x03E28E24 LDR X0, [X19 + 0x108]
	0x03E28E28 CBZ X0, 0x3E28E80
	0x03E28E2C LDR X19, [X19 + 0x1A0]
	0x03E28E30 MOV X1, X31
	0x03E28E34 BL 0x3CDB488
	0x03E28E38 CBZ X0, 0x3E28E80
	0x03E28E3C MOV X1, X31
	0x03E28E40 BL 0x3C3EA28
	0x03E28E44 CBZ X19, 0x3E28E80
	0x03E28E48 MOV X0, X19
	0x03E28E4C LDP X20, X19, [X31 + 0x40]
	0x03E28E50 LDP X30, X21, [X31 + 0x30]
	0x03E28E54 LDP D9, D8, [X31 + 0x20]
	0x03E28E58 LDP D11, D10, [X31 + 0x10]
	0x03E28E5C MOV X1, X31
	0x03E28E60 LDR V12, [X31], #0x50
	0x03E28E64 B 0x3C3EAB8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, X0
	009 Call InputField.get_caretSelectPositionInternal, X0
	010 Move W19, W0
	011 Move X0, X22
	012 Call InputField.get_caretPositionInternal, X0
	013 Move W20, W0
	014 Move X0, X22
	015 Call InputField.get_caretSelectPositionInternal, X0
	016 Move W21, W0
	017 Move X0, X22
	018 Call InputField.get_caretPositionInternal, X0
	019 Move X23, 0x5B4000
	020 Move W8, [X23+1297]
	021 Move W22, W0
	022 Compare W8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, 0x2CC000
	025 Move X0, [X0+1448]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X23+1297], W8
	029 Move X8, 0x2CC000
	030 Move X8, [X8+1448]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Subtract W8, W21, W22
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction CSEL not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSNEG not yet implemented."
	041 Add X0, X31, 8
	042 Move X3, X31
	043 Move [X31+8], X31
	044 Call RangeInt..ctor, X0, X1, X2
	045 Move X0, [X31+8]
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X30, [X31+16]
	051 Move X23, [X31+24]
	052 Add X31, X31, 64
	053 Return X0

Method: System.Void UpdateKeyboardCaret()

Disassembly:
	0x03E28E68 LDP X20, X19, [X31 + 0x40]
	0x03E28E6C LDP X30, X21, [X31 + 0x30]
	0x03E28E70 LDP D9, D8, [X31 + 0x20]
	0x03E28E74 LDP D11, D10, [X31 + 0x10]
	0x03E28E78 LDR V12, [X31], #0x50
	0x03E28E7C RET
	0x03E28E80 BL 0x1C16F20
	0x03E28E84 STP X30, X21, [X31 - 0x20]!
	0x03E28E88 STP X20, X19, [X31 + 0x10]
	0x03E28E8C ADRP X20, 0x5C0000
	0x03E28E90 ADRP X21, 0x342000
	0x03E28E94 LDRB W8, [X20 + 0x6F1]
	0x03E28E98 LDR X21, [X21 + 0xFD0]
	0x03E28E9C MOV X19, X0
	0x03E28EA0 TBNZ X8, 0x0, 0x3E28EC4
	0x03E28EA4 ADRP X0, 0x331000
	0x03E28EA8 LDR X0, [X0 + 0x48]
	0x03E28EAC BL 0x1C16CF4
	0x03E28EB0 ADRP X0, 0x342000
	0x03E28EB4 LDR X0, [X0 + 0xFD0]
	0x03E28EB8 BL 0x1C16CF4
	0x03E28EBC MOVZ W8, 0x1
	0x03E28EC0 STRB W8, [X20 + 0x6F1]
	0x03E28EC4 LDR X0, [X21]
	0x03E28EC8 MOV X1, X19
	0x03E28ECC MOV X2, X31
	0x03E28ED0 BL 0x3E252BC
	0x03E28ED4 LDR X0, [X19 + 0x138]
	0x03E28ED8 CBZ X0, 0x3E28EF8
	0x03E28EDC ADRP X8, 0x331000
	0x03E28EE0 LDR X8, [X8 + 0x48]
	0x03E28EE4 LDR X1, [X19 + 0x180]
	0x03E28EE8 LDP X20, X19, [X31 + 0x10]
	0x03E28EEC LDR X2, [X8]
	0x03E28EF0 LDP X30, X21, [X31], #0x20
	0x03E28EF4 B 0x2729DBC
	0x03E28EF8 LDP X20, X19, [X31 + 0x10]
	0x03E28EFC LDP X30, X21, [X31], #0x20
	0x03E28F00 RET
	0x03E28F04 STR X30, [X31 - 0x50]!
	0x03E28F08 STP X26, X25, [X31 + 0x10]
	0x03E28F0C STP X24, X23, [X31 + 0x20]
	0x03E28F10 STP X22, X21, [X31 + 0x30]
	0x03E28F14 STP X20, X19, [X31 + 0x40]
	0x03E28F18 ADRP X23, 0x5C0000
	0x03E28F1C LDRB W8, [X23 + 0x6FE]
	0x03E28F20 MOV W19, W3
	0x03E28F24 MOV W21, W2
	0x03E28F28 MOV X20, X1
	0x03E28F2C MOV X22, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5C1000
	005 Move W8, [X20+1757]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2CC000
	012 Move X0, [X0+2416]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1757], W8
	016 Move W8, [X19+300]
	017 Compare W8, 0
	018 JumpIfEqual {59}
	019 Move X0, [X19+256]
	020 Compare X0, 0
	021 JumpIfEqual {59}
	022 Move X1, X31
	023 Call TouchScreenKeyboard.get_canSetSelection, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {59}
	028 Move X20, 0x2CC000
	029 Move X20, [X20+2416]
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X31
	036 Call Application.get_platform
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X0, [X20]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X31
	044 Call Application.get_platform
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X20, [X19+256]
	047 Move X0, X19
	048 Call InputField.GetInternalSelection, X0
	049 Compare X20, 0
	050 JumpIfEqual {63}
	051 Move X1, X0
	052 Move X0, X20
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X2, X31
	056 Move X30, [X31+32]
	057 Call TouchScreenKeyboard.set_selection, X0, X1
	058 Return 
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Return 
	063 Call 0x1C17F20

Method: System.Void UpdateCaretFromKeyboard()

Disassembly:
	0x03E28F30 TBNZ X8, 0x0, 0x3E28F6C
	0x03E28F34 ADRP X0, 0x2D4000
	0x03E28F38 LDR X0, [X0 + 0x8D8]
	0x03E28F3C BL 0x1C16CF4
	0x03E28F40 ADRP X0, 0x2CD000
	0x03E28F44 LDR X0, [X0 + 0x170]
	0x03E28F48 BL 0x1C16CF4
	0x03E28F4C ADRP X0, 0x2D3000
	0x03E28F50 LDR X0, [X0 + 0x9B0]
	0x03E28F54 BL 0x1C16CF4
	0x03E28F58 ADRP X0, 0x331000
	0x03E28F5C LDR X0, [X0 + 0x170]
	0x03E28F60 BL 0x1C16CF4
	0x03E28F64 MOVZ W8, 0x1
	0x03E28F68 STRB W8, [X23 + 0x6FE]
	0x03E28F6C LDR W8, [X22 + 0x130]
	0x03E28F70 CBZ W8, 0x3E295E4
	0x03E28F74 MOV X0, X22
	0x03E28F78 MOV X1, X31
	0x03E28F7C BL 0x3C323D4
	0x03E28F80 TBZ X0, 0x0, 0x3E295E4
	0x03E28F84 LDR W8, [X22 + 0x130]
	0x03E28F88 SUB W8, W8, 0x1
	0x03E28F8C CMP W8, 0x4
	0x03E28F90 B.HI 0x3E295E0
	0x03E28F94 ADRP X9, 0xFFFFFFFFFCD70000
	0x03E28F98 ADD X9, X9, 0x5FB
	0x03E28F9C ADR X10, 0x10
	0x03E28FA0 LDRB W11, [X9, X8, LSL]
	0x03E28FA4 ADD X10, X10, X11, 0x2, LSL
	0x03E28FA8 BR X10
	0x03E28FAC CBZ W21, 0x3E290E4
	0x03E28FB0 CBZ X20, 0x3E29600
	0x03E28FB4 MOV W23, W31
	0x03E28FB8 B 0x3E29110
	0x03E28FBC AND W8, W19, 0xFFFF
	0x03E28FC0 CMP W8, 0x41
	0x03E28FC4 B.CS 0x3E291DC
	0x03E28FC8 SUB W8, W19, 0x30
	0x03E28FCC AND W8, W8, 0xFFFF
	0x03E28FD0 CMP W8, 0x9
	0x03E28FD4 B.HI 0x3E295E0
	0x03E28FD8 B 0x3E295E4
	0x03E28FDC ADRP X23, 0x2CD000
	0x03E28FE0 LDR X23, [X23 + 0x170]
	0x03E28FE4 LDR X0, [X23]
	0x03E28FE8 LDR W8, [X0 + 0xE0]
	0x03E28FEC CBNZ W8, 0x3E28FF4
	0x03E28FF0 BL 0x1C16DFC
	0x03E28FF4 MOV W0, W19
	0x03E28FF8 MOV X1, X31
	0x03E28FFC BL 0x331A888
	0x03E29000 TBZ X0, 0x0, 0x3E291F8
	0x03E29004 LDR X0, [X23]
	0x03E29008 LDR W8, [X0 + 0xE0]
	0x03E2900C CBNZ W8, 0x3E29014
	0x03E29010 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, [X0+256]
	008 Compare X0, 0
	009 JumpIfEqual {62}
	010 Move X1, X31
	011 Call TouchScreenKeyboard.get_selection, X0
	012 Move X21, X0
	013 Move [X31+8], X0
	014 Add X0, X31, 8
	015 Move X1, X31
	016 Call RangeInt.get_end, X0
	017 Move W20, W0
	018 Move X0, X19
	019 Call InputField.get_caretPositionInternal, X0
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X0, X19
	022 Call InputField.get_caretSelectPositionInternal, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move [X19+404], W21
	025 Move TEMP, X21
	026 And TEMP, TEMP, -2147483648
	027 Compare TEMP, -2147483648
	028 JumpIfEqual {34}
	029 Move X8, [X19+384]
	030 Compare X8, 0
	031 JumpIfEqual {62}
	032 Move W8, [X8+16]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W8, W31
	035 Move [X19+404], W8
	036 Move X0, X19
	037 Call InputField.get_caretSelectPositionInternal, X0
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move [X19+408], W20
	040 Move TEMP, X20
	041 And TEMP, TEMP, -2147483648
	042 Compare TEMP, -2147483648
	043 JumpIfEqual {50}
	044 Move X8, [X19+384]
	045 Compare X8, 0
	046 JumpIfEqual {62}
	047 Move W8, [X8+16]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move [X19+408], W8
	050 Move [X19+408], W31
	051 Move X0, X31
	052 Call Time.get_unscaledTime
	053 Move X0, X19
	054 Move [X19+480], S0
	055 Call InputField.UpdateLabel, X0
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X30, [X31+16]
	059 Move X21, [X31+24]
	060 Add X31, X31, 48
	061 Return 
	062 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x03E29014 MOV W0, W19
	0x03E29018 MOV X1, X31
	0x03E2901C BL 0x331AA58
	0x03E29020 TBZ X0, 0x0, 0x3E2940C
	0x03E29024 CBZ W21, 0x3E29068
	0x03E29028 CBZ X20, 0x3E29600
	0x03E2902C SUB W22, W21, 0x1
	0x03E29030 MOV X0, X20
	0x03E29034 MOV W1, W22
	0x03E29038 MOV X2, X31
	0x03E2903C BL 0x3222A1C
	0x03E29040 AND W8, W0, 0xFFFF
	0x03E29044 CMP W8, 0x20
	0x03E29048 B.EQ 0x3E29068
	0x03E2904C MOV X0, X20
	0x03E29050 MOV W1, W22
	0x03E29054 MOV X2, X31
	0x03E29058 BL 0x3222A1C
	0x03E2905C AND W8, W0, 0xFFFF
	0x03E29060 CMP W8, 0x2D
	0x03E29064 B.NE 0x3E2940C
	0x03E29068 LDR X0, [X23]
	0x03E2906C LDR W8, [X0 + 0xE0]
	0x03E29070 CBNZ W8, 0x3E29078
	0x03E29074 BL 0x1C16DFC
	0x03E29078 MOV W0, W19
	0x03E2907C LDP X20, X19, [X31 + 0x40]
	0x03E29080 LDP X22, X21, [X31 + 0x30]
	0x03E29084 LDP X24, X23, [X31 + 0x20]
	0x03E29088 LDP X26, X25, [X31 + 0x10]
	0x03E2908C MOV X1, X31
	0x03E29090 LDR X30, [X31], #0x50
	0x03E29094 B 0x331ACB8
	0x03E29098 AND W8, W19, 0xFFFF
	0x03E2909C CMP W8, 0x41
	0x03E290A0 B.CS 0x3E292F8
	0x03E290A4 CMP W8, 0x30
	0x03E290A8 B.CC 0x3E29310
	0x03E290AC AND W8, W19, 0xFFFF
	0x03E290B0 CMP W8, 0x3A
	0x03E290B4 B.CC 0x3E295E4
	0x03E290B8 CMP W8, 0x40
	0x03E290BC B.NE 0x3E29310
	0x03E290C0 CBZ X20, 0x3E29600
	0x03E290C4 MOVZ W1, 0x40
	0x03E290C8 MOV X0, X20
	0x03E290CC MOV X2, X31
	0x03E290D0 BL 0x322BD98
	0x03E290D4 ADDS W31, W0, 0x1
	0x03E290D8 B.NE 0x3E29310
	0x03E290DC MOVZ W19, 0x40
	0x03E290E0 B 0x3E295E4
	0x03E290E4 CBZ X20, 0x3E29600
	0x03E290E8 LDR W8, [X20 + 0x10]
	0x03E290EC CMP W8, 0x1
	0x03E290F0 B.LT 0x3E28FB4
	0x03E290F4 MOV X0, X20
	0x03E290F8 MOV W1, W31
	0x03E290FC MOV X2, X31
	0x03E29100 BL 0x3222A1C
	0x03E29104 AND W8, W0, 0xFFFF
	0x03E29108 CMP W8, 0x2D
	0x03E2910C CSET W23, EQ
	0x03E29110 LDR W8, [X20 + 0x10]
	0x03E29114 CMP W8, 0x1
	0x03E29118 CSEL W26, W31, W23, LT
	0x03E2911C B.LT 0x3E29160
	0x03E29120 MOV X0, X20
	0x03E29124 MOV W1, W31
	0x03E29128 MOV X2, X31
	0x03E2912C BL 0x3222A1C
	0x03E29130 AND W8, W0, 0xFFFF
	0x03E29134 CMP W8, 0x2D
	0x03E29138 MOV W24, W31
	0x03E2913C CSEL W25, W26, W31, EQ
	0x03E29140 B.NE 0x3E29164
	0x03E29144 MOV X0, X22
	0x03E29148 BL 0x3E26F3C
	0x03E2914C MOV W23, W26
	0x03E29150 CBZ W0, 0x3E29524
	0x03E29154 MOV X0, X22
	0x03E29158 BL 0x3E26F98
	0x03E2915C CBZ W0, 0x3E29540
	0x03E29160 MOV W24, W31
	0x03E29164 MOV X0, X22
	0x03E29168 BL 0x3E26F3C
	0x03E2916C CBZ W0, 0x3E29184
	0x03E29170 MOV X0, X22
	0x03E29174 BL 0x3E26F98
	0x03E29178 CMP W0, 0x0
	0x03E2917C CSET W8, EQ
	0x03E29180 B 0x3E29188
	0x03E29184 MOVZ W8, 0x1
	0x03E29188 CMP W23, 0x0
	0x03E2918C CSET W9, EQ
	0x03E29190 ORR W9, W24, W9, 0x0
	0x03E29194 CBZ W9, 0x3E295E0
	0x03E29198 SUB W9, W19, 0x30
	0x03E2919C AND W9, W9, 0xFFFF
	0x03E291A0 CMP W9, 0xA
	0x03E291A4 B.CC 0x3E295E4
	0x03E291A8 AND W9, W19, 0xFFFF
	0x03E291AC CMP W9, 0x2C
	0x03E291B0 B.EQ 0x3E293AC
	0x03E291B4 CMP W9, 0x2E
	0x03E291B8 B.EQ 0x3E293AC
	0x03E291BC CMP W9, 0x2D
	0x03E291C0 B.NE 0x3E295E0
	0x03E291C4 CMP W21, 0x0
	0x03E291C8 CSET W9, EQ
	0x03E291CC ORR W8, W8, W9, 0x0
	0x03E291D0 CBZ W8, 0x3E295E0
	0x03E291D4 MOVZ W19, 0x2D
	0x03E291D8 B 0x3E295E4
	0x03E291DC CMP W8, 0x5B
	0x03E291E0 B.CC 0x3E295E4
	0x03E291E4 SUB W8, W19, 0x61
	0x03E291E8 AND W8, W8, 0xFFFF
	0x03E291EC CMP W8, 0x19
	0x03E291F0 B.HI 0x3E295E0
	0x03E291F4 B 0x3E295E4
	0x03E291F8 AND W8, W19, 0xFFFF
	0x03E291FC CMP W8, 0x20
	0x03E29200 B.EQ 0x3E294BC
	0x03E29204 CMP W8, 0x2D
	0x03E29208 B.EQ 0x3E294BC
	0x03E2920C CMP W8, 0x27
	0x03E29210 B.NE 0x3E295E0
	0x03E29214 CBZ X20, 0x3E29600
	0x03E29218 ADRP X8, 0x2D2000
	0x03E2921C LDR X8, [X8 + 0x9B0]
	0x03E29220 MOV X0, X20
	0x03E29224 MOV X2, X31
	0x03E29228 LDR X1, [X8]
	0x03E2922C BL 0x322BD1C
	0x03E29230 TBNZ X0, 0x0, 0x3E295E0
	0x03E29234 SUBS W19, W21, 0x1
	0x03E29238 B.LT 0x3E29290
	0x03E2923C MOV X0, X20
	0x03E29240 MOV W1, W19
	0x03E29244 MOV X2, X31
	0x03E29248 BL 0x3222A1C
	0x03E2924C AND W8, W0, 0xFFFF
	0x03E29250 CMP W8, 0x20
	0x03E29254 B.EQ 0x3E295E0
	0x03E29258 MOV X0, X20
	0x03E2925C MOV W1, W19
	0x03E29260 MOV X2, X31
	0x03E29264 BL 0x3222A1C
	0x03E29268 AND W8, W0, 0xFFFF
	0x03E2926C CMP W8, 0x27
	0x03E29270 B.EQ 0x3E295E0
	0x03E29274 MOV X0, X20
	0x03E29278 MOV W1, W19
	0x03E2927C MOV X2, X31
	0x03E29280 BL 0x3222A1C
	0x03E29284 AND W8, W0, 0xFFFF
	0x03E29288 CMP W8, 0x2D
	0x03E2928C B.EQ 0x3E295E0
	0x03E29290 LDR W8, [X20 + 0x10]
	0x03E29294 CMP W8, W21
	0x03E29298 B.LE 0x3E292F0
	0x03E2929C MOV X0, X20
	0x03E292A0 MOV W1, W21
	0x03E292A4 MOV X2, X31
	0x03E292A8 BL 0x3222A1C
	0x03E292AC AND W8, W0, 0xFFFF
	0x03E292B0 CMP W8, 0x20
	0x03E292B4 B.EQ 0x3E295E0
	0x03E292B8 MOV X0, X20
	0x03E292BC MOV W1, W21
	0x03E292C0 MOV X2, X31
	0x03E292C4 BL 0x3222A1C
	0x03E292C8 AND W8, W0, 0xFFFF
	0x03E292CC CMP W8, 0x27
	0x03E292D0 B.EQ 0x3E295E0
	0x03E292D4 MOV X0, X20
	0x03E292D8 MOV W1, W21
	0x03E292DC MOV X2, X31
	0x03E292E0 BL 0x3222A1C
	0x03E292E4 AND W8, W0, 0xFFFF
	0x03E292E8 CMP W8, 0x2D
	0x03E292EC B.EQ 0x3E295E0
	0x03E292F0 MOVZ W19, 0x27
	0x03E292F4 B 0x3E295E4
	0x03E292F8 CMP W8, 0x5B
	0x03E292FC B.CC 0x3E295E4
	0x03E29300 SUB W8, W19, 0x61
	0x03E29304 AND W8, W8, 0xFFFF
	0x03E29308 CMP W8, 0x19
	0x03E2930C B.LS 0x3E295E4
	0x03E29310 ADRP X8, 0x330000
	0x03E29314 LDR X8, [X8 + 0x170]
	0x03E29318 LDR X0, [X8]
	0x03E2931C CBZ X0, 0x3E29600
	0x03E29320 MOV W1, W19
	0x03E29324 MOV X2, X31
	0x03E29328 BL 0x322BD98
	0x03E2932C ADDS W31, W0, 0x1
	0x03E29330 B.NE 0x3E295E4
	0x03E29334 AND W8, W19, 0xFFFF
	0x03E29338 CMP W8, 0x2E
	0x03E2933C B.NE 0x3E295E0
	0x03E29340 CBZ X20, 0x3E29600
	0x03E29344 LDR W8, [X20 + 0x10]
	0x03E29348 SUBS W9, W8, 0x1
	0x03E2934C B.LT 0x3E295D8
	0x03E29350 CMP W8, W21
	0x03E29354 CSEL W8, W21, W9, GT
	0x03E29358 CMP W21, 0x0
	0x03E2935C CSEL W1, W31, W8, LT
	0x03E29360 MOV X0, X20
	0x03E29364 MOV X2, X31
	0x03E29368 BL 0x3222A1C
	0x03E2936C LDR W8, [X20 + 0x10]
	0x03E29370 MOV W19, W0
	0x03E29374 SUBS W9, W8, 0x1
	0x03E29378 B.LT 0x3E295C4
	0x03E2937C ADD W10, W21, 0x1
	0x03E29380 CMP W10, W8
	0x03E29384 CSINC W8, W9, W21, GE
	0x03E29388 CMP W10, 0x0
	0x03E2938C CSEL W1, W31, W8, LT
	0x03E29390 MOV X0, X20
	0x03E29394 MOV X2, X31
	0x03E29398 BL 0x3222A1C
	0x03E2939C AND W8, W0, 0xFFFF
	0x03E293A0 CMP W8, 0x2E
	0x03E293A4 CSET W8, EQ
	0x03E293A8 B 0x3E295C8
	0x03E293AC LDR W8, [X22 + 0x130]
	0x03E293B0 CMP W8, 0x2
	0x03E293B4 B.NE 0x3E295E0
	0x03E293B8 ADRP X8, 0x2D3000
	0x03E293BC LDR X8, [X8 + 0x8D8]
	0x03E293C0 MOVZ W1, 0x2
	0x03E293C4 LDR X0, [X8]
	0x03E293C8 BL 0x1C16D6C
	0x03E293CC CBZ X0, 0x3E29600
	0x03E293D0 LDR W8, [X0 + 0x18]
	0x03E293D4 MOV X1, X0
	0x03E293D8 CBZ W8, 0x3E29604
	0x03E293DC MOVZ W9, 0x2E
	0x03E293E0 CMP W8, 0x1
	0x03E293E4 STRH W9, [X1 + 0x20]
	0x03E293E8 B.EQ 0x3E29604
	0x03E293EC MOVZ W8, 0x2C
	0x03E293F0 MOV X0, X20
	0x03E293F4 MOV X2, X31
	0x03E293F8 STRH W8, [X1 + 0x22]
	0x03E293FC BL 0x322BE8C
	0x03E29400 ADDS W31, W0, 0x1
	0x03E29404 B.NE 0x3E295E0
	0x03E29408 B 0x3E295E4
	0x03E2940C LDR X0, [X23]
	0x03E29410 LDR W8, [X0 + 0xE0]
	0x03E29414 CBNZ W8, 0x3E2941C
	0x03E29418 BL 0x1C16DFC
	0x03E2941C MOV W0, W19
	0x03E29420 MOV X1, X31
	0x03E29424 BL 0x331A99C
	0x03E29428 SUBS W21, W21, 0x1
	0x03E2942C B.LT 0x3E295E4
	0x03E29430 TBZ X0, 0x0, 0x3E295E4
	0x03E29434 CBZ X20, 0x3E29600
	0x03E29438 MOV X0, X20
	0x03E2943C MOV W1, W21
	0x03E29440 MOV X2, X31
	0x03E29444 BL 0x3222A1C
	0x03E29448 AND W8, W0, 0xFFFF
	0x03E2944C CMP W8, 0x20
	0x03E29450 B.EQ 0x3E295E4
	0x03E29454 MOV X0, X20
	0x03E29458 MOV W1, W21
	0x03E2945C MOV X2, X31
	0x03E29460 BL 0x3222A1C
	0x03E29464 AND W8, W0, 0xFFFF
	0x03E29468 CMP W8, 0x27
	0x03E2946C B.EQ 0x3E295E4
	0x03E29470 MOV X0, X20
	0x03E29474 MOV W1, W21
	0x03E29478 MOV X2, X31
	0x03E2947C BL 0x3222A1C
	0x03E29480 AND W8, W0, 0xFFFF
	0x03E29484 CMP W8, 0x2D
	0x03E29488 B.EQ 0x3E295E4
	0x03E2948C LDR X0, [X23]
	0x03E29490 LDR W8, [X0 + 0xE0]
	0x03E29494 CBNZ W8, 0x3E2949C
	0x03E29498 BL 0x1C16DFC
	0x03E2949C MOV W0, W19
	0x03E294A0 LDP X20, X19, [X31 + 0x40]
	0x03E294A4 LDP X22, X21, [X31 + 0x30]
	0x03E294A8 LDP X24, X23, [X31 + 0x20]
	0x03E294AC LDP X26, X25, [X31 + 0x10]
	0x03E294B0 MOV X1, X31
	0x03E294B4 LDR X30, [X31], #0x50
	0x03E294B8 B 0x331AE30
	0x03E294BC CBZ W21, 0x3E295E0
	0x03E294C0 SUBS W22, W21, 0x1
	0x03E294C4 B.LT 0x3E2955C
	0x03E294C8 CBZ X20, 0x3E29600
	0x03E294CC MOV X0, X20
	0x03E294D0 MOV W1, W22
	0x03E294D4 MOV X2, X31
	0x03E294D8 BL 0x3222A1C
	0x03E294DC AND W8, W0, 0xFFFF
	0x03E294E0 CMP W8, 0x20
	0x03E294E4 B.EQ 0x3E295E0
	0x03E294E8 MOV X0, X20
	0x03E294EC MOV W1, W22
	0x03E294F0 MOV X2, X31
	0x03E294F4 BL 0x3222A1C
	0x03E294F8 AND W8, W0, 0xFFFF
	0x03E294FC CMP W8, 0x27
	0x03E29500 B.EQ 0x3E295E0
	0x03E29504 MOV X0, X20
	0x03E29508 MOV W1, W22
	0x03E2950C MOV X2, X31
	0x03E29510 BL 0x3222A1C
	0x03E29514 AND W8, W0, 0xFFFF
	0x03E29518 CMP W8, 0x2D
	0x03E2951C B.NE 0x3E29560
	0x03E29520 B 0x3E295E0
	0x03E29524 MOV X0, X22
	0x03E29528 BL 0x3E26F98
	0x03E2952C CMP W0, 0x0
	0x03E29530 B.LE 0x3E29554
	0x03E29534 MOVZ W24, 0x1
	0x03E29538 MOV W23, W25
	0x03E2953C B 0x3E29164
	0x03E29540 MOV X0, X22
	0x03E29544 BL 0x3E26F3C
	0x03E29548 CMP W0, 0x0
	0x03E2954C CSET W24, GT
	0x03E29550 B 0x3E29164
	0x03E29554 MOV W23, W25
	0x03E29558 B 0x3E29154
	0x03E2955C CBZ X20, 0x3E29600
	0x03E29560 LDR W8, [X20 + 0x10]
	0x03E29564 CMP W8, W21
	0x03E29568 B.LE 0x3E295E4
	0x03E2956C MOV X0, X20
	0x03E29570 MOV W1, W21
	0x03E29574 MOV X2, X31
	0x03E29578 BL 0x3222A1C
	0x03E2957C AND W8, W0, 0xFFFF
	0x03E29580 CMP W8, 0x20
	0x03E29584 B.EQ 0x3E295E0
	0x03E29588 MOV X0, X20
	0x03E2958C MOV W1, W21
	0x03E29590 MOV X2, X31
	0x03E29594 BL 0x3222A1C
	0x03E29598 AND W8, W0, 0xFFFF
	0x03E2959C CMP W8, 0x27
	0x03E295A0 B.EQ 0x3E295E0
	0x03E295A4 MOV X0, X20
	0x03E295A8 MOV W1, W22
	0x03E295AC MOV X2, X31
	0x03E295B0 BL 0x3222A1C
	0x03E295B4 AND W8, W0, 0xFFFF
	0x03E295B8 CMP W8, 0x2D
	0x03E295BC B.EQ 0x3E295E0
	0x03E295C0 B 0x3E295E4
	0x03E295C4 MOV W8, W31
	0x03E295C8 AND W9, W19, 0xFFFF
	0x03E295CC CMP W9, 0x2E
	0x03E295D0 B.EQ 0x3E295E0
	0x03E295D4 CBNZ W8, 0x3E295E0
	0x03E295D8 MOVZ W19, 0x2E
	0x03E295DC B 0x3E295E4
	0x03E295E0 MOV W19, W31
	0x03E295E4 MOV W0, W19
	0x03E295E8 LDP X20, X19, [X31 + 0x40]
	0x03E295EC LDP X22, X21, [X31 + 0x30]
	0x03E295F0 LDP X24, X23, [X31 + 0x20]
	0x03E295F4 LDP X26, X25, [X31 + 0x10]
	0x03E295F8 LDR X30, [X31], #0x50
	0x03E295FC RET
	0x03E29600 BL 0x1C16F20
	0x03E29604 BL 0x1C16F28
	0x03E29608 STP X30, X19, [X31 - 0x10]!
	0x03E2960C MOV X19, X0
	0x03E29610 BL 0x3E25DF4
	0x03E29614 MOV X0, X19
	0x03E29618 LDP X30, X19, [X31], #0x10
	0x03E2961C B 0x3E25E74
	0x03E29620 SUB X31, X31, 0xC0
	0x03E29624 STP D15, D14, [X31 + 0x50]
	0x03E29628 STP D13, D12, [X31 + 0x60]
	0x03E2962C STP D11, D10, [X31 + 0x70]
	0x03E29630 STP D9, D8, [X31 + 0x80]
	0x03E29634 STP X30, X23, [X31 + 0x90]
	0x03E29638 STP X22, X21, [X31 + 0xA0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x5C0000
	009 Move W8, [X20+1758]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {35}
	015 Move X0, 0x2CB000
	016 Move X0, [X0+2416]
	017 Call 0x1C17CF4
	018 Move X0, 0x2CD000
	019 Move X0, [X0+368]
	020 Call 0x1C17CF4
	021 Move X0, 0x2CB000
	022 Move X0, [X0+3584]
	023 Call 0x1C17CF4
	024 Move X0, 0x2CB000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x331000
	028 Move X0, [X0+416]
	029 Call 0x1C17CF4
	030 Move X0, 0x2CB000
	031 Move X0, [X0+2440]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+1758], W8
	035 NotImplemented "Instruction STRH not yet implemented."
	036 Move W8, [X19+465]
	037 Compare W8, 0
	038 JumpIfEqual {43}
	039 Move W8, [X19+464]
	040 Compare W8, 0
	041 JumpIfEqual {103}
	042 Move [X19+465], W31
	043 Move X0, X19
	044 Call InputField.AssignPositioningIfNeeded, X0
	045 Move W8, [X19+464]
	046 Compare W8, 0
	047 JumpIfEqual {391}
	048 Move X0, X19
	049 Call InputField.InPlaceEditingChanged, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {129}
	054 Move X8, 0x2CB000
	055 Move X8, [X8+1432]
	056 Move X20, [X19+440]
	057 Move X0, [X8]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Inequality, X0, X1
	066 Move TEMP, X0
	067 And TEMP, TEMP, 1
	068 Compare TEMP, 1
	069 JumpIfNotEqual {127}
	070 Move X8, 0x331000
	071 Move X8, [X8+416]
	072 Move X0, [X8]
	073 Call 0x1C17F10
	074 Move X1, X31
	075 Move X20, X0
	076 Call VertexHelper..ctor, X0
	077 Move X0, X19
	078 Call InputField.get_mesh, X0
	079 Move X1, X0
	080 Compare X20, 0
	081 JumpIfEqual {402}
	082 Move X0, X20
	083 Move X2, X31
	084 Call VertexHelper.FillMesh, X0, X1
	085 Move X21, X31
	086 Move W22, 6
	087 Move X10, 0x2CB000
	088 Move X8, [X20]
	089 Move X10, [X10+3584]
	090 NotImplemented "Instruction LDRH not yet implemented."
	091 Move X1, [X10]
	092 Compare X9, 0
	093 JumpIfEqual {100}
	094 Move X10, [X8+176]
	095 Add X10, X10, 8
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Subtract X9, X9, 1
	099 Add X10, X10, 16
	100 Move X0, X20
	101 Move W2, W31
	102 Call 0x1C5D788
	103 Move X0, X19
	104 Call InputField.ActivateInputFieldInternal, X0
	105 Move [X19+465], W31
	106 NotImplemented "Instruction LDRSW not yet implemented."
	107 Add X8, X8, X9
	108 Add X0, X8, 312
	109 Move X8, [X0]
	110 Move X1, [X0+8]
	111 Move X0, X20
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Compare X21, 0
	114 JumpIfNotEqual {400}
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Compare W22, 0
	117 JumpIfNotEqual {391}
	118 Move X20, [X19+440]
	119 Move X0, X19
	120 Call InputField.get_mesh, X0
	121 Compare X20, 0
	122 JumpIfEqual {399}
	123 Move X1, X0
	124 Move X0, X20
	125 Move X2, X31
	126 Call CanvasRenderer.SetMesh, X0, X1
	127 Move X0, X19
	128 Call InputField.DeactivateInputField, X0
	129 Move W8, [X19+464]
	130 Compare W8, 0
	131 JumpIfEqual {391}
	132 Move X0, X31
	133 Call TouchScreenKeyboard.get_isSupported
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {391}
	138 Move W8, [X19+528]
	139 Compare W8, 0
	140 JumpIfNotEqual {391}
	141 Move X0, [X19+256]
	142 Compare X0, 0
	143 JumpIfEqual {385}
	144 Move X1, X31
	145 Call TouchScreenKeyboard.get_status, X0
	146 Move X8, [X19+256]
	147 Compare W0, 0
	148 JumpIfEqual {165}
	149 Compare X8, 0
	150 JumpIfEqual {385}
	151 Move W9, [X19+400]
	152 Compare W9, 0
	153 JumpIfNotEqual {164}
	154 Move X0, X8
	155 Move X1, X31
	156 Call TouchScreenKeyboard.get_text, X0
	157 Move X1, X0
	158 Move W2, 1
	159 Move X0, X19
	160 Call InputField.SetText, X0, X1, X2
	161 Move X8, [X19+256]
	162 Compare X8, 0
	163 JumpIfEqual {399}
	164 Move X0, X8
	165 Compare X8, 0
	166 JumpIfEqual {399}
	167 Move X0, X8
	168 Move X1, X31
	169 Call TouchScreenKeyboard.get_text, X0
	170 Move X8, [X19+384]
	171 Move X20, X0
	172 Move X1, X20
	173 Move X2, X31
	174 Move X0, X8
	175 Call String.op_Inequality, X0, X1
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfNotEqual {189}
	180 Move W8, [X19+400]
	181 Compare W8, 0
	182 JumpIfEqual {230}
	183 Move X0, [X19+256]
	184 Compare X0, 0
	185 JumpIfEqual {399}
	186 Move X1, [X19+384]
	187 Move X2, X31
	188 Call TouchScreenKeyboard.set_text, X0, X1
	189 Move W8, [X19+300]
	190 Compare W8, 0
	191 JumpIfEqual {219}
	192 Move X0, [X19+256]
	193 Compare X0, 0
	194 JumpIfEqual {399}
	195 Move X1, X31
	196 Call TouchScreenKeyboard.get_canSetSelection, X0
	197 Move TEMP, X0
	198 And TEMP, TEMP, 1
	199 Compare TEMP, 1
	200 JumpIfNotEqual {219}
	201 Move X20, 0x2CB000
	202 Move X20, [X20+2416]
	203 Move X0, [X20]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {208}
	207 Call 0x1C17DFC
	208 Move X0, X31
	209 Call Application.get_platform
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, [X20]
	212 Move W8, [X0+224]
	213 Compare W8, 0
	214 JumpIfNotEqual {216}
	215 Call 0x1C17DFC
	216 Move X0, X31
	217 Call Application.get_platform
	218 NotImplemented "Instruction CMP not yet implemented."
	219 Move X0, [X19+256]
	220 Compare X0, 0
	221 JumpIfEqual {399}
	222 Move X1, X31
	223 Call TouchScreenKeyboard.get_canGetSelection, X0
	224 Move TEMP, X0
	225 And TEMP, TEMP, 1
	226 Compare TEMP, 1
	227 JumpIfNotEqual {362}
	228 Move X0, X19
	229 Call InputField.UpdateCaretFromKeyboard, X0
	230 Move X8, 0x2CB000
	231 Move X8, [X8+2440]
	232 Move X8, [X8]
	233 Move [X19+384], X8
	234 Compare X20, 0
	235 JumpIfEqual {399}
	236 Move W8, [X20+16]
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X24, 0x2CD000
	239 Move X24, [X24+368]
	240 Move W21, W31
	241 Move W23, 10
	242 Move X0, X20
	243 Move W1, W21
	244 Move X2, X31
	245 Call String.get_Chars, X0, X1
	246 And W8, W0, 0xFFFF
	247 NotImplemented "Instruction CMP not yet implemented."
	248 NotImplemented "Instruction CCMP not yet implemented."
	249 NotImplemented "Instruction CSEL not yet implemented."
	250 NotImplemented "Instruction STRH not yet implemented."
	251 Move X8, [X19+336]
	252 Compare X8, 0
	253 JumpIfEqual {262}
	254 Move X1, [X19+384]
	255 Compare X1, 0
	256 JumpIfEqual {399}
	257 Move W2, [X1+16]
	258 Move X9, [X8+24]
	259 Move X0, [X8+64]
	260 Move X4, [X8+40]
	261 NotImplemented "Instruction BLR not yet implemented."
	262 Move W8, [X19+304]
	263 Compare W8, 0
	264 JumpIfEqual {273}
	265 Move X1, [X19+384]
	266 Compare X1, 0
	267 JumpIfEqual {399}
	268 Move W2, [X1+16]
	269 Move X0, X19
	270 Call InputField.Validate, X0, X1, X2, X3
	271 Move W3, W0
	272 NotImplemented "Instruction STRH not yet implemented."
	273 And W8, W3, 0xFFFF
	274 NotImplemented "Instruction CMP not yet implemented."
	275 Move W8, [X19+296]
	276 NotImplemented "Instruction CMP not yet implemented."
	277 And W31, W3, 0xFFFF
	278 Move X0, [X24]
	279 Move X22, [X19+384]
	280 Move W8, [X0+224]
	281 Compare W8, 0
	282 JumpIfNotEqual {284}
	283 Call 0x1C17DFC
	284 Add X0, X31, 12
	285 Move X1, X31
	286 Call Char.ToString, X0
	287 Move X1, X0
	288 Move X0, X22
	289 Move X2, X31
	290 Call String.Concat, X0, X1
	291 Move [X19+384], X0
	292 Move W8, [X20+16]
	293 Add W21, W21, 1
	294 NotImplemented "Instruction CMP not yet implemented."
	295 Move W2, [X19+308]
	296 NotImplemented "Instruction CMP not yet implemented."
	297 Move X0, [X19+384]
	298 Compare X0, 0
	299 JumpIfEqual {399}
	300 Move W8, [X0+16]
	301 NotImplemented "Instruction CMP not yet implemented."
	302 Move W1, W31
	303 Move X3, X31
	304 Call String.Substring, X0, X1, X2
	305 Move [X19+384], X0
	306 Move X0, [X19+256]
	307 Compare X0, 0
	308 JumpIfEqual {399}
	309 Move X1, X31
	310 Call TouchScreenKeyboard.get_canGetSelection, X0
	311 Move TEMP, X0
	312 And TEMP, TEMP, 1
	313 Compare TEMP, 1
	314 JumpIfNotEqual {318}
	315 Move X0, X19
	316 Call InputField.UpdateCaretFromKeyboard, X0
	317 Move X0, [X19+384]
	318 Move X0, [X19+384]
	319 Compare X0, 0
	320 JumpIfEqual {399}
	321 Move W9, [X0+16]
	322 Add X8, X19, 404
	323 Move [X19+408], W9
	324 Move TEMP, X9
	325 And TEMP, TEMP, -2147483648
	326 Compare TEMP, -2147483648
	327 JumpIfEqual {344}
	328 Move [X8], W9
	329 Move X0, [X19+256]
	330 Compare X0, 0
	331 JumpIfEqual {399}
	332 Move X1, [X19+384]
	333 Move X2, X31
	334 Call TouchScreenKeyboard.set_text, X0, X1
	335 Move X20, [X19+256]
	336 Move X0, X19
	337 Call InputField.GetInternalSelection, X0
	338 Compare X20, 0
	339 JumpIfEqual {399}
	340 Move X1, X0
	341 Move X0, X20
	342 Move X2, X31
	343 Call TouchScreenKeyboard.set_selection, X0, X1
	344 Move [X8], X31
	345 Move X1, X20
	346 Move X2, X31
	347 Call String.op_Inequality, X0, X1
	348 Move TEMP, X0
	349 And TEMP, TEMP, 1
	350 Compare TEMP, 1
	351 JumpIfNotEqual {358}
	352 Move X0, [X19+256]
	353 Compare X0, 0
	354 JumpIfEqual {399}
	355 Move X1, [X19+384]
	356 Move X2, X31
	357 Call TouchScreenKeyboard.set_text, X0, X1
	358 Move X0, X19
	359 Call InputField.SendOnValueChanged, X0
	360 Move X0, X19
	361 Call InputField.UpdateLabel, X0
	362 Move X0, [X19+256]
	363 Compare X0, 0
	364 JumpIfEqual {399}
	365 Move X1, X31
	366 Call TouchScreenKeyboard.get_status, X0
	367 Compare W0, 0
	368 JumpIfEqual {391}
	369 Move X0, [X19+256]
	370 Compare X0, 0
	371 JumpIfEqual {399}
	372 Move X1, X31
	373 Call TouchScreenKeyboard.get_status, X0
	374 NotImplemented "Instruction CMP not yet implemented."
	375 Move W8, 1
	376 Move [X19+512], W8
	377 Move X0, [X19+256]
	378 Compare X0, 0
	379 JumpIfEqual {399}
	380 Move X1, X31
	381 Call TouchScreenKeyboard.get_status, X0
	382 NotImplemented "Instruction CMP not yet implemented."
	383 Move X0, X19
	384 Call InputField.SendOnSubmit, X0
	385 Move X8, [X19]
	386 Move X0, X19
	387 Move X1, X31
	388 Move X9, [X8+904]
	389 Move X2, [X8+912]
	390 NotImplemented "Instruction BLR not yet implemented."
	391 Move X20, [X31+48]
	392 Move X19, [X31+56]
	393 Move X22, [X31+32]
	394 Move X21, [X31+40]
	395 Move X24, [X31+16]
	396 Move X23, [X31+24]
	397 Move X30, [X31+64]
	398 Return 
	399 Call 0x1C17F20
	400 Move X0, X21
	401 Call 0x1C17F18
	402 Call 0x1C17F20
	403 NotImplemented "Instruction CMP not yet implemented."
	404 Move X22, X0
	405 Move X0, X22
	406 Call 0x3EB2AD0
	407 Move X21, [X0]
	408 Call 0x3EB2AE0
	409 Move W22, W31
	410 Compare X20, 0
	411 JumpIfNotEqual {87}
	412 Move X21, X31
	413 Move X22, X0
	414 Compare X20, 0
	415 JumpIfEqual {439}
	416 Move X10, 0x2CB000
	417 Move X8, [X20]
	418 Move X10, [X10+3584]
	419 NotImplemented "Instruction LDRH not yet implemented."
	420 Move X1, [X10]
	421 Compare X9, 0
	422 JumpIfEqual {429}
	423 Move X10, [X8+176]
	424 Add X10, X10, 8
	425 NotImplemented "Instruction LDUR not yet implemented."
	426 NotImplemented "Instruction CMP not yet implemented."
	427 Subtract X9, X9, 1
	428 Add X10, X10, 16
	429 Move X0, X20
	430 Move W2, W31
	431 Call 0x1C5D788
	432 NotImplemented "Instruction LDRSW not yet implemented."
	433 Add X8, X8, X9
	434 Add X0, X8, 312
	435 Move X8, [X0]
	436 Move X1, [X0+8]
	437 Move X0, X20
	438 NotImplemented "Instruction BLR not yet implemented."
	439 Compare X21, 0
	440 JumpIfNotEqual {443}
	441 Move X0, X22
	442 Call 0x1D2D690
	443 Move X0, X21
	444 Call 0x1C17F18
	445 Call 0x1991590

Method: UnityEngine.Vector2 ScreenToLocal(UnityEngine.Vector2 screen)

Disassembly:
	0x03E2A620 BR X10
	0x03E2A624 AND W1, W21, 0x1
	0x03E2A628 MOVZ W2, 0x1
	0x03E2A62C MOV X0, X19
	0x03E2A630 BL 0x3E2BBBC
	0x03E2A634 B 0x3E2A8B4
	0x03E2A638 CMP W0, 0xD
	0x03E2A63C B.LE 0x3E2A6C8
	0x03E2A640 CMP W0, 0x1B
	0x03E2A644 B.EQ 0x3E2A6EC
	0x03E2A648 CMP W0, 0x61
	0x03E2A64C B.NE 0x3E2A808
	0x03E2A650 TBNZ X22, 0x0, 0x3E2A808
	0x03E2A654 LDR X8, [X19 + 0x180]
	0x03E2A658 CBZ X8, 0x3E2A94C
	0x03E2A65C LDR W9, [X8 + 0x10]
	0x03E2A660 MOV W0, W31
	0x03E2A664 BIC W9, W9, W9, 0x1F
	0x03E2A668 STR W9, [X19 + 0x194]
	0x03E2A66C LDR W8, [X8 + 0x10]
	0x03E2A670 AND W8, W8, W8, 0x1F
	0x03E2A674 STR W8, [X19 + 0x198]
	0x03E2A678 B 0x3E2A8B8
	0x03E2A67C CMP W0, 0x63
	0x03E2A680 B.EQ 0x3E2A6F8
	0x03E2A684 CMP W0, 0x76
	0x03E2A688 B.NE 0x3E2A808
	0x03E2A68C TBNZ X22, 0x0, 0x3E2A808
	0x03E2A690 ADRP X8, 0x340000
	0x03E2A694 LDR X8, [X8 + 0xFB8]
	0x03E2A698 LDR X0, [X8]
	0x03E2A69C LDR W8, [X0 + 0xE0]
	0x03E2A6A0 CBNZ W8, 0x3E2A6A8
	0x03E2A6A4 BL 0x1C16DFC
	0x03E2A6A8 BL 0x3E27BA4
	0x03E2A6AC LDR X8, [X19]
	0x03E2A6B0 MOV X1, X0
	0x03E2A6B4 MOV X0, X19
	0x03E2A6B8 LDR X9, [X8 + 0x558]
	0x03E2A6BC LDR X2, [X8 + 0x560]
	0x03E2A6C0 BLR X9
	0x03E2A6C4 B 0x3E2A8AC
	0x03E2A6C8 CMP W0, 0x8
	0x03E2A6CC B.EQ 0x3E2A700
	0x03E2A6D0 CMP W0, 0xD
	0x03E2A6D4 B.NE 0x3E2A808
	0x03E2A6D8 LDR W8, [X19 + 0x128]
	0x03E2A6DC CMP W8, 0x2
	0x03E2A6E0 B.EQ 0x3E2A808
	0x03E2A6E4 MOVZ W0, 0x1
	0x03E2A6E8 B 0x3E2A8B8
	0x03E2A6EC MOVZ W0, 0x1
	0x03E2A6F0 STRB W0, [X19 + 0x200]
	0x03E2A6F4 B 0x3E2A8B8
	0x03E2A6F8 TBZ X22, 0x0, 0x3E2A77C
	0x03E2A6FC B 0x3E2A808
	0x03E2A700 MOV X0, X19
	0x03E2A704 BL 0x3E2A950
	0x03E2A708 B 0x3E2A8B4
	0x03E2A70C CMP W0, 0x78
	0x03E2A710 B.EQ 0x3E2A804
	0x03E2A714 CMP W0, 0x7F
	0x03E2A718 B.NE 0x3E2A808
	0x03E2A71C MOV X0, X19
	0x03E2A720 BL 0x3E2AA54
	0x03E2A724 B 0x3E2A8B4
	0x03E2A728 AND W1, W21, 0x1
	0x03E2A72C MOVZ W2, 0x1
	0x03E2A730 MOV X0, X19
	0x03E2A734 BL 0x3E2BA98
	0x03E2A738 B 0x3E2A8B4
	0x03E2A73C CMP W23, 0x0
	0x03E2A740 AND W1, W21, 0x1
	0x03E2A744 CSET W2, NE
	0x03E2A748 MOV X0, X19
	0x03E2A74C BL 0x3E2AEC8
	0x03E2A750 B 0x3E2A8B4
	0x03E2A754 CMP W23, 0x0
	0x03E2A758 AND W1, W21, 0x1
	0x03E2A75C CSET W2, NE
	0x03E2A760 MOV X0, X19
	0x03E2A764 BL 0x3E2AD9C
	0x03E2A768 B 0x3E2A8B4
	0x03E2A76C TBZ X22, 0x0, 0x3E2A77C
	0x03E2A770 ORR W8, W25, W24, 0x0
	0x03E2A774 TBZ X8, 0x0, 0x3E2A690
	0x03E2A778 B 0x3E2A808
	0x03E2A77C LDR W8, [X19 + 0x11C]
	0x03E2A780 CMP W8, 0x2
	0x03E2A784 B.NE 0x3E2A7B0
	0x03E2A788 ADRP X8, 0x340000
	0x03E2A78C LDR X8, [X8 + 0xFB8]
	0x03E2A790 LDR X0, [X8]
	0x03E2A794 LDR W8, [X0 + 0xE0]
	0x03E2A798 CBNZ W8, 0x3E2A7A0
	0x03E2A79C BL 0x1C16DFC
	0x03E2A7A0 ADRP X8, 0x2C9000
	0x03E2A7A4 LDR X8, [X8 + 0x988]
	0x03E2A7A8 LDR X0, [X8]
	0x03E2A7AC B 0x3E2A7DC
	0x03E2A7B0 MOV X0, X19
	0x03E2A7B4 BL 0x3E2AAF8
	0x03E2A7B8 ADRP X8, 0x340000
	0x03E2A7BC LDR X8, [X8 + 0xFB8]
	0x03E2A7C0 MOV X19, X0
	0x03E2A7C4 LDR X8, [X8]
	0x03E2A7C8 LDR W9, [X8 + 0xE0]
	0x03E2A7CC CBNZ W9, 0x3E2A7D8
	0x03E2A7D0 MOV X0, X8
	0x03E2A7D4 BL 0x1C16DFC
	0x03E2A7D8 MOV X0, X19
	0x03E2A7DC BL 0x3E27BF4
	0x03E2A7E0 B 0x3E2A8B4
	0x03E2A7E4 AND W1, W21, 0x1
	0x03E2A7E8 MOV X0, X19
	0x03E2A7EC BL 0x3E27B28
	0x03E2A7F0 B 0x3E2A8B4
	0x03E2A7F4 AND W1, W21, 0x1
	0x03E2A7F8 MOV X0, X19
	0x03E2A7FC BL 0x3E27AC8
	0x03E2A800 B 0x3E2A8B4
	0x03E2A804 TBZ X22, 0x0, 0x3E2A8CC
	0x03E2A808 MOV X0, X20
	0x03E2A80C MOV X1, X31
	0x03E2A810 BL 0x3C630F0
	0x03E2A814 LDR W8, [X19 + 0x128]
	0x03E2A818 MOV W20, W0
	0x03E2A81C SUB W8, W8, 0x1
	0x03E2A820 CMP W8, 0x2
	0x03E2A824 AND W8, W0, 0xFFFF
	0x03E2A828 B.CS 0x3E2A840
	0x03E2A82C CMP W8, 0xD
	0x03E2A830 B.EQ 0x3E2A864
	0x03E2A834 CMP W8, 0x3
	0x03E2A838 B.EQ 0x3E2A864
	0x03E2A83C B 0x3E2A868
	0x03E2A840 SUB W9, W8, 0x9
	0x03E2A844 CMP W9, 0x2
	0x03E2A848 MOV W0, W31
	0x03E2A84C B.CC 0x3E2A8B8
	0x03E2A850 CMP W8, 0x3
	0x03E2A854 B.EQ 0x3E2A864
	0x03E2A858 CMP W8, 0xD
	0x03E2A85C B.EQ 0x3E2A8B8
	0x03E2A860 B 0x3E2A868
	0x03E2A864 MOVZ W20, 0xA
	0x03E2A868 MOV X0, X19
	0x03E2A86C MOV W1, W20
	0x03E2A870 BL 0x3E2B00C
	0x03E2A874 TBZ X0, 0x0, 0x3E2A890
	0x03E2A878 LDR X8, [X19]
	0x03E2A87C MOV X0, X19
	0x03E2A880 MOV W1, W20
	0x03E2A884 LDR X9, [X8 + 0x568]
	0x03E2A888 LDR X2, [X8 + 0x570]
	0x03E2A88C BLR X9
	0x03E2A890 ANDS W31, W20, 0xFFFF
	0x03E2A894 B.NE 0x3E2A8B4
	0x03E2A898 BL 0x3E25410
	0x03E2A89C CBZ X0, 0x3E2A94C
	0x03E2A8A0 LDR W8, [X0 + 0x10]
	0x03E2A8A4 CMP W8, 0x1
	0x03E2A8A8 B.LT 0x3E2A8B4
	0x03E2A8AC MOV X0, X19
	0x03E2A8B0 BL 0x3E25E74
	0x03E2A8B4 MOV W0, W31
	0x03E2A8B8 LDP X20, X19, [X31 + 0x30]
	0x03E2A8BC LDP X22, X21, [X31 + 0x20]
	0x03E2A8C0 LDP X24, X23, [X31 + 0x10]
	0x03E2A8C4 LDP X30, X25, [X31], #0x40
	0x03E2A8C8 RET
	0x03E2A8CC LDR W8, [X19 + 0x11C]
	0x03E2A8D0 CMP W8, 0x2
	0x03E2A8D4 B.NE 0x3E2A900
	0x03E2A8D8 ADRP X8, 0x340000
	0x03E2A8DC LDR X8, [X8 + 0xFB8]
	0x03E2A8E0 LDR X0, [X8]
	0x03E2A8E4 LDR W8, [X0 + 0xE0]
	0x03E2A8E8 CBNZ W8, 0x3E2A8F0
	0x03E2A8EC BL 0x1C16DFC
	0x03E2A8F0 ADRP X8, 0x2C9000
	0x03E2A8F4 LDR X8, [X8 + 0x988]
	0x03E2A8F8 LDR X20, [X8]
	0x03E2A8FC B 0x3E2A928
	0x03E2A900 MOV X0, X19
	0x03E2A904 BL 0x3E2AAF8
	0x03E2A908 ADRP X8, 0x340000
	0x03E2A90C LDR X8, [X8 + 0xFB8]
	0x03E2A910 MOV X20, X0
	0x03E2A914 LDR X8, [X8]
	0x03E2A918 LDR W9, [X8 + 0xE0]
	0x03E2A91C CBNZ W9, 0x3E2A928
	0x03E2A920 MOV X0, X8
	0x03E2A924 BL 0x1C16DFC
	0x03E2A928 MOV X0, X20
	0x03E2A92C BL 0x3E27BF4
	0x03E2A930 MOV X0, X19
	0x03E2A934 BL 0x3E2ABA0
	0x03E2A938 MOV X0, X19
	0x03E2A93C BL 0x3E2AD54
	0x03E2A940 MOV X0, X19
	0x03E2A944 BL 0x3E25DF4
	0x03E2A948 B 0x3E2A8AC
	0x03E2A94C BL 0x1C16F20
	0x03E2A950 STR X30, [X31 - 0x20]!
	0x03E2A954 STP X20, X19, [X31 + 0x10]
	0x03E2A958 LDRB W8, [X0 + 0x190]
	0x03E2A95C CBZ W8, 0x3E2A96C
	0x03E2A960 LDP X20, X19, [X31 + 0x10]
	0x03E2A964 LDR X30, [X31], #0x20
	0x03E2A968 RET
	0x03E2A96C MOV X19, X0
	0x03E2A970 BL 0x3E26F3C
	0x03E2A974 MOV W20, W0
	0x03E2A978 MOV X0, X19
	0x03E2A97C BL 0x3E26F98
	0x03E2A980 CMP W20, W0
	0x03E2A984 B.NE 0x3E2AA20
	0x03E2A988 MOV X0, X19
	0x03E2A98C BL 0x3E26F3C
	0x03E2A990 CMP W0, 0x1
	0x03E2A994 B.LT 0x3E2A960
	0x03E2A998 MOV X0, X19
	0x03E2A99C BL 0x3E26F3C
	0x03E2A9A0 LDR X20, [X19 + 0x180]
	0x03E2A9A4 CBZ X20, 0x3E2AA50
	0x03E2A9A8 LDR W8, [X20 + 0x10]
	0x03E2A9AC SUB W9, W0, 0x1
	0x03E2A9B0 CMP W9, W8
	0x03E2A9B4 B.GE 0x3E2A960

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+80], D15
	003 Move [X31+88], D14
	004 Move [X31+96], D13
	005 Move [X31+104], D12
	006 Move [X31+112], D11
	007 Move [X31+120], D10
	008 Move [X31+128], D9
	009 Move [X31+136], D8
	010 Move [X31+144], X30
	011 Move [X31+152], X23
	012 Move [X31+160], X22
	013 Move [X31+168], X21
	014 Move [X31+176], X20
	015 Move [X31+184], X19
	016 Move X20, 0x5BF000
	017 Move W8, [X20+1759]
	018 Move V8, V1
	019 Move V9, V0
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x2CA000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+1759], W8
	030 Move [X31+48], X31
	031 Move [X31+56], X31
	032 Move [X31+64], X31
	033 Move X0, [X19+264]
	034 Compare X0, 0
	035 JumpIfEqual {277}
	036 Move X21, 0x2CA000
	037 Move X21, [X21+1432]
	038 Move X1, X31
	039 Call Graphic.get_canvas, X0
	040 Move X8, [X21]
	041 Move X20, X0
	042 Move W9, [X8+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {47}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {259}
	055 Move X22, 0x5AF000
	056 Move W8, [X22+1923]
	057 Compare W8, 0
	058 JumpIfNotEqual {64}
	059 Move X0, 0x2CA000
	060 Move X0, [X0+1440]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X22+1923], W8
	064 Compare X20, 0
	065 JumpIfEqual {277}
	066 Move X23, 0x2CA000
	067 Move X23, [X23+1440]
	068 Move X0, X20
	069 Move X1, X31
	070 Move X8, [X23]
	071 Move X8, [X8+184]
	072 Move S10, [X8]
	073 Move S11, [X8+4]
	074 Call Canvas.get_renderMode, X0
	075 Compare W0, 0
	076 JumpIfEqual {162}
	077 Move X0, X20
	078 Move X1, X31
	079 Call Canvas.get_worldCamera, X0
	080 Move X8, [X21]
	081 Move X21, X0
	082 Move W9, [X8+224]
	083 Compare W9, 0
	084 JumpIfNotEqual {87}
	085 Move X0, X8
	086 Call 0x1C17DFC
	087 Move X0, X21
	088 Move X1, X31
	089 Move X2, X31
	090 Call Object.op_Inequality, X0, X1
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {257}
	095 Move X0, X20
	096 Move X1, X31
	097 Call Canvas.get_worldCamera, X0
	098 Compare X0, 0
	099 JumpIfEqual {277}
	100 Add X8, X31, 24
	101 Move S2, W31
	102 Move V0, V9
	103 Move V1, V8
	104 Move X1, X31
	105 Call Camera.ScreenPointToRay, X0, X1
	106 NotImplemented "Instruction LDUR not yet implemented."
	107 Move X8, [X31+40]
	108 Move [X31+3], V0
	109 Move [X31+64], X8
	110 Move X0, [X19+264]
	111 Compare X0, 0
	112 JumpIfEqual {277}
	113 Move X1, X31
	114 Call Component.get_transform, X0
	115 Compare X0, 0
	116 JumpIfEqual {277}
	117 Move X1, X31
	118 Call Transform.get_forward, X0
	119 Move X0, [X19+264]
	120 Compare X0, 0
	121 JumpIfEqual {277}
	122 Move X1, X31
	123 Move V11, V0
	124 Move V12, V1
	125 Move V13, V2
	126 Call Component.get_transform, X0
	127 Compare X0, 0
	128 JumpIfEqual {277}
	129 Move X1, X31
	130 Call Transform.get_position, X0
	131 Move X20, 0x5AF000
	132 Move W8, [X20+1925]
	133 Move [X31+12], S1
	134 Move [X31+20], S0
	135 Move [X31+20], S2
	136 Compare W8, 0
	137 JumpIfNotEqual {143}
	138 Move X0, 0x2CA000
	139 Move X0, [X0+1448]
	140 Call 0x1C17CF4
	141 Move W8, 1
	142 Move [X20+1925], W8
	143 Move X8, 0x2CA000
	144 Move X8, [X8+1448]
	145 Move X0, [X8]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 Multiply S0, S11, S11
	151 Multiply S1, S12, S12
	152 Move X8, -53735424
	153 Add S0, S0, S1
	154 Move V1, [X8+380]
	155 Multiply S2, S13, S13
	156 Add S0, S2, S0
	157 NotImplemented "Instruction FSQRT not yet implemented."
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 NotImplemented "Instruction FDIV not yet implemented."
	160 NotImplemented "Instruction FDIV not yet implemented."
	161 NotImplemented "Instruction FDIV not yet implemented."
	162 Move X0, [X19+264]
	163 Compare X0, 0
	164 JumpIfEqual {277}
	165 Move X1, X31
	166 Call Component.get_transform, X0
	167 Compare X0, 0
	168 JumpIfEqual {277}
	169 Move S2, W31
	170 Move V0, V9
	171 Move V1, V8
	172 Move W8, [X22+1923]
	173 Compare W8, 0
	174 JumpIfNotEqual {180}
	175 Move X0, 0x2CA000
	176 Move X0, [X0+1440]
	177 Call 0x1C17CF4
	178 Move W8, 1
	179 Move [X22+1923], W8
	180 Move X8, [X23]
	181 Move X8, [X8+184]
	182 Move S14, [X8]
	183 Move S12, [X8+4]
	184 Move V11, [X8+8]
	185 Move X20, 0x5B0000
	186 Move S15, [X31+48]
	187 Move S8, [X31+52]
	188 Move S16, [X31+56]
	189 Move S10, [X31+60]
	190 Move W8, [X20+1450]
	191 Move S13, [X31+64]
	192 Move S9, [X31+68]
	193 Compare W8, 0
	194 JumpIfNotEqual {202}
	195 Move X0, 0x2D1000
	196 Move X0, [X0+1208]
	197 Move [X31+8], S16
	198 Call 0x1C17CF4
	199 Move V16, [X31+8]
	200 Move W8, 1
	201 Move [X20+1450], W8
	202 Move X0, [X19+264]
	203 Compare X0, 0
	204 JumpIfEqual {277}
	205 Move X8, -53735424
	206 Move V18, [X8+576]
	207 Move X8, 0x2D1000
	208 Move S1, [X31+12]
	209 Move S0, [X31+16]
	210 Move V6, [X31+20]
	211 Move X8, [X8+1208]
	212 Multiply S2, S14, S10
	213 Multiply S0, S0, S14
	214 Multiply S1, S1, S12
	215 Move X8, [X8]
	216 Multiply S3, S12, S13
	217 Multiply S4, S14, S15
	218 Multiply S5, S12, S8
	219 Move X8, [X8+184]
	220 Multiply S6, S6, S11
	221 Multiply S7, S11, S9
	222 Multiply S16, S11, S16
	223 Add S0, S0, S1
	224 Add S1, S2, S3
	225 Add S2, S4, S5
	226 Move V3, [X8]
	227 Add S0, S6, S0
	228 Add S1, S7, S1
	229 Add S2, S16, S2
	230 Move S17, W31
	231 Subtract S0, S0, S2
	232 NotImplemented "Instruction FABS not yet implemented."
	233 Move S19, 8
	234 NotImplemented "Instruction FMAXNM not yet implemented."
	235 Multiply S2, S2, S18
	236 Multiply S3, S3, S19
	237 NotImplemented "Instruction FCMP not yet implemented."
	238 NotImplemented "Instruction FABD not yet implemented."
	239 NotImplemented "Instruction FCSEL not yet implemented."
	240 NotImplemented "Instruction FDIV not yet implemented."
	241 NotImplemented "Instruction FCMP not yet implemented."
	242 Move X1, X31
	243 NotImplemented "Instruction FCSEL not yet implemented."
	244 Call Component.get_transform, X0
	245 Move X19, X0
	246 Add X0, X31, 48
	247 Move V0, V8
	248 Move X1, X31
	249 Call Ray.GetPoint, X0, V0
	250 Compare X19, 0
	251 JumpIfEqual {277}
	252 Move X0, X19
	253 Move X1, X31
	254 Call Transform.InverseTransformPoint, X0, X1
	255 Move V10, V0
	256 Move V11, V1
	257 Move V9, V10
	258 Move V8, V11
	259 Move V0, V9
	260 Move V1, V8
	261 Move X20, [X31+176]
	262 Move X19, [X31+184]
	263 Move X22, [X31+160]
	264 Move X21, [X31+168]
	265 Move X30, [X31+144]
	266 Move X23, [X31+152]
	267 Move D9, [X31+128]
	268 Move D8, [X31+136]
	269 Move D11, [X31+112]
	270 Move D10, [X31+120]
	271 Move D13, [X31+96]
	272 Move D12, [X31+104]
	273 Move D15, [X31+80]
	274 Move D14, [X31+88]
	275 Add X31, X31, 192
	276 Return X0
	277 Call 0x1C17F20

Method: System.Int32 GetUnclampedCharacterLineFromPosition(UnityEngine.Vector2 pos, UnityEngine.TextGenerator generator)

Disassembly:
	0x03E2A9B8 MOV X0, X19
	0x03E2A9BC BL 0x3E26F3C
	0x03E2A9C0 SUB W1, W0, 0x1
	0x03E2A9C4 MOVZ W2, 0x1
	0x03E2A9C8 MOV X0, X20
	0x03E2A9CC MOV X3, X31
	0x03E2A9D0 BL 0x3228B90
	0x03E2A9D4 STR X0, [X19 + 0x180]
	0x03E2A9D8 MOV X0, X19
	0x03E2A9DC BL 0x3E26F3C
	0x03E2A9E0 SUBS W8, W0, 0x1
	0x03E2A9E4 ADD X9, X19, 0x194
	0x03E2A9E8 STR W8, [X19 + 0x194]
	0x03E2A9EC B.MI 0x3E2AA48
	0x03E2A9F0 LDR X10, [X19 + 0x180]
	0x03E2A9F4 CBZ X10, 0x3E2AA50
	0x03E2A9F8 LDR W11, [X10 + 0x10]
	0x03E2A9FC CMP W11, W8
	0x03E2AA00 B.GE 0x3E2AA08
	0x03E2AA04 STR W11, [X9]
	0x03E2AA08 STR W8, [X19 + 0x198]
	0x03E2AA0C LDR W9, [X10 + 0x10]
	0x03E2AA10 CMP W9, W8
	0x03E2AA14 CSEL W8, W9, W8, LT
	0x03E2AA18 STR W8, [X19 + 0x198]
	0x03E2AA1C B 0x3E2AA28
	0x03E2AA20 MOV X0, X19
	0x03E2AA24 BL 0x3E2ABA0
	0x03E2AA28 MOV X0, X19
	0x03E2AA2C BL 0x3E2AD54
	0x03E2AA30 MOV X0, X19
	0x03E2AA34 BL 0x3E25DF4
	0x03E2AA38 MOV X0, X19
	0x03E2AA3C LDP X20, X19, [X31 + 0x10]
	0x03E2AA40 LDR X30, [X31], #0x20
	0x03E2AA44 B 0x3E25E74
	0x03E2AA48 STR X31, [X9]
	0x03E2AA4C B 0x3E2AA28
	0x03E2AA50 BL 0x1C16F20
	0x03E2AA54 STR X30, [X31 - 0x20]!
	0x03E2AA58 STP X20, X19, [X31 + 0x10]
	0x03E2AA5C LDRB W8, [X0 + 0x190]
	0x03E2AA60 CBZ W8, 0x3E2AA70
	0x03E2AA64 LDP X20, X19, [X31 + 0x10]
	0x03E2AA68 LDR X30, [X31], #0x20
	0x03E2AA6C RET
	0x03E2AA70 MOV X19, X0
	0x03E2AA74 BL 0x3E26F3C
	0x03E2AA78 MOV W20, W0
	0x03E2AA7C MOV X0, X19
	0x03E2AA80 BL 0x3E26F98
	0x03E2AA84 CMP W20, W0
	0x03E2AA88 B.NE 0x3E2AACC
	0x03E2AA8C MOV X0, X19
	0x03E2AA90 BL 0x3E26F3C
	0x03E2AA94 LDR X20, [X19 + 0x180]
	0x03E2AA98 CBZ X20, 0x3E2AAF4
	0x03E2AA9C LDR W8, [X20 + 0x10]
	0x03E2AAA0 CMP W0, W8
	0x03E2AAA4 B.GE 0x3E2AA64
	0x03E2AAA8 MOV X0, X19
	0x03E2AAAC BL 0x3E26F3C
	0x03E2AAB0 MOV W1, W0
	0x03E2AAB4 MOVZ W2, 0x1
	0x03E2AAB8 MOV X0, X20
	0x03E2AABC MOV X3, X31
	0x03E2AAC0 BL 0x3228B90
	0x03E2AAC4 STR X0, [X19 + 0x180]
	0x03E2AAC8 B 0x3E2AAD4
	0x03E2AACC MOV X0, X19
	0x03E2AAD0 BL 0x3E2ABA0
	0x03E2AAD4 MOV X0, X19
	0x03E2AAD8 BL 0x3E2AD54
	0x03E2AADC MOV X0, X19
	0x03E2AAE0 BL 0x3E25DF4
	0x03E2AAE4 MOV X0, X19
	0x03E2AAE8 LDP X20, X19, [X31 + 0x10]
	0x03E2AAEC LDR X30, [X31], #0x20
	0x03E2AAF0 B 0x3E25E74
	0x03E2AAF4 BL 0x1C16F20
	0x03E2AAF8 STR X30, [X31 - 0x20]!
	0x03E2AAFC STP X20, X19, [X31 + 0x10]
	0x03E2AB00 ADRP X20, 0x5BE000
	0x03E2AB04 LDRB W8, [X20 + 0x6E8]
	0x03E2AB08 MOV X19, X0
	0x03E2AB0C TBNZ X8, 0x0, 0x3E2AB24
	0x03E2AB10 ADRP X0, 0x2C9000
	0x03E2AB14 LDR X0, [X0 + 0x988]
	0x03E2AB18 BL 0x1C16CF4
	0x03E2AB1C MOVZ W8, 0x1
	0x03E2AB20 STRB W8, [X20 + 0x6E8]
	0x03E2AB24 MOV X0, X19
	0x03E2AB28 BL 0x3E26F3C
	0x03E2AB2C MOV W20, W0
	0x03E2AB30 MOV X0, X19
	0x03E2AB34 BL 0x3E26F98
	0x03E2AB38 CMP W20, W0
	0x03E2AB3C B.NE 0x3E2AB58
	0x03E2AB40 ADRP X8, 0x2C9000
	0x03E2AB44 LDR X8, [X8 + 0x988]
	0x03E2AB48 LDP X20, X19, [X31 + 0x10]
	0x03E2AB4C LDR X0, [X8]
	0x03E2AB50 LDR X30, [X31], #0x20
	0x03E2AB54 RET
	0x03E2AB58 MOV X0, X19
	0x03E2AB5C BL 0x3E26F3C
	0x03E2AB60 MOV W20, W0
	0x03E2AB64 MOV X0, X19
	0x03E2AB68 BL 0x3E26F98
	0x03E2AB6C LDR X8, [X19 + 0x180]
	0x03E2AB70 CMP W20, W0
	0x03E2AB74 CSEL W1, W0, W20, GT
	0x03E2AB78 CBZ X8, 0x3E2AB9C
	0x03E2AB7C CMP W20, W0
	0x03E2AB80 CSEL W9, W20, W0, GT
	0x03E2AB84 LDP X20, X19, [X31 + 0x10]
	0x03E2AB88 SUB W2, W9, W1
	0x03E2AB8C MOV X0, X8
	0x03E2AB90 MOV X3, X31
	0x03E2AB94 LDR X30, [X31], #0x20
	0x03E2AB98 B 0x3228DE4
	0x03E2AB9C BL 0x1C16F20
	0x03E2ABA0 STP X30, X23, [X31 - 0x30]!
	0x03E2ABA4 STP X22, X21, [X31 + 0x10]
	0x03E2ABA8 STP X20, X19, [X31 + 0x20]
	0x03E2ABAC LDRB W8, [X0 + 0x190]
	0x03E2ABB0 CBNZ W8, 0x3E2ABD0
	0x03E2ABB4 MOV X19, X0
	0x03E2ABB8 BL 0x3E26F3C
	0x03E2ABBC MOV W20, W0
	0x03E2ABC0 MOV X0, X19
	0x03E2ABC4 BL 0x3E26F98

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x5BF000
	011 Move W8, [X21+1760]
	012 Move X19, X1
	013 Move V8, V1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x341000
	020 Move X0, [X0+4056]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1760], W8
	024 Move W8, [X20+296]
	025 Subtract W8, W8, 1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, [X20+264]
	028 Compare X0, 0
	029 JumpIfEqual {145}
	030 Move X1, X31
	031 Call Text.get_pixelsPerUnit, X0
	032 Compare X19, 0
	033 JumpIfEqual {145}
	034 Move X0, X19
	035 Move X1, X31
	036 Move V9, V0
	037 Call TextGenerator.get_lineCount, X0
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X23, 0x341000
	040 Move X23, [X23+4056]
	041 Move W20, W31
	042 Multiply S8, S8, S9
	043 Move S9, W31
	044 Move X0, X19
	045 Move X1, X31
	046 Call TextGenerator.get_lines, X0
	047 Compare X0, 0
	048 JumpIfEqual {145}
	049 Move X8, [X0]
	050 Move X1, [X23]
	051 Move X21, X0
	052 NotImplemented "Instruction LDRH not yet implemented."
	053 Compare X9, 0
	054 JumpIfEqual {61}
	055 Move X10, [X8+176]
	056 Add X10, X10, 8
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Subtract X9, X9, 1
	060 Add X10, X10, 16
	061 Move X0, X21
	062 Move W2, W31
	063 Call 0x1C5D788
	064 NotImplemented "Instruction LDRSW not yet implemented."
	065 Add X8, X8, X9
	066 Add X0, X8, 312
	067 Move X8, [X0]
	068 Move X2, [X0+8]
	069 Move X0, X21
	070 Move W1, W20
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move X21, X1
	073 Move X0, X19
	074 Move X1, X31
	075 Call TextGenerator.get_lines, X0
	076 Compare X0, 0
	077 JumpIfEqual {145}
	078 Move X8, [X0]
	079 Move X1, [X23]
	080 Move X22, X0
	081 NotImplemented "Instruction LDRH not yet implemented."
	082 Compare X9, 0
	083 JumpIfEqual {90}
	084 Move X10, [X8+176]
	085 Add X10, X10, 8
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Subtract X9, X9, 1
	089 Add X10, X10, 16
	090 Move X0, X22
	091 Move W2, W31
	092 Call 0x1C5D788
	093 NotImplemented "Instruction LDRSW not yet implemented."
	094 Add X8, X8, X9
	095 Add X0, X8, 312
	096 Move X8, [X0]
	097 Move X2, [X0+8]
	098 Move X0, X22
	099 Move W1, W20
	100 Move S10, W21
	101 NotImplemented "Instruction BLR not yet implemented."
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 Move X8, X0
	104 ShiftRight X8, 32
	105 And X8, X8, 0x7FFFFFFF
	106 NotImplemented "Instruction SCVTF not yet implemented."
	107 Subtract S9, S10, S0
	108 NotImplemented "Instruction FCMP not yet implemented."
	109 Move X0, X19
	110 Move X1, X31
	111 Add W20, W20, 1
	112 Call TextGenerator.get_lineCount, X0
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X0, X19
	115 Move X20, [X31+64]
	116 Move X19, [X31+72]
	117 Move X22, [X31+48]
	118 Move X21, [X31+56]
	119 Move X30, [X31+32]
	120 Move X23, [X31+40]
	121 Move D9, [X31+16]
	122 Move D8, [X31+24]
	123 Move X1, X31
	124 Move V10, [X31+80]
	125 Call TextGenerator.get_lineCount, X0
	126 Return X0
	127 Move W20, W31
	128 Move W0, W20
	129 Move X20, [X31+64]
	130 Move X19, [X31+72]
	131 Move X22, [X31+48]
	132 Move X21, [X31+56]
	133 Move X30, [X31+32]
	134 Move X23, [X31+40]
	135 Move D9, [X31+16]
	136 Move D8, [X31+24]
	137 Move V10, [X31+80]
	138 Return X0
	139 Subtract S0, S10, S9
	140 Move S1, -0.5
	141 Multiply S0, S0, S1
	142 Add S0, S10, S0
	143 NotImplemented "Instruction FCMP not yet implemented."
	144 Subtract W20, W20, 1
	145 Call 0x1C17F20

Method: System.Int32 GetCharacterIndexFromPosition(UnityEngine.Vector2 pos)

Disassembly:
	0x03E2ABC8 CMP W20, W0
	0x03E2ABCC B.NE 0x3E2ABE0
	0x03E2ABD0 LDP X20, X19, [X31 + 0x20]
	0x03E2ABD4 LDP X22, X21, [X31 + 0x10]
	0x03E2ABD8 LDP X30, X23, [X31], #0x30
	0x03E2ABDC RET
	0x03E2ABE0 MOV X0, X19
	0x03E2ABE4 BL 0x3E26F3C
	0x03E2ABE8 MOV W21, W0
	0x03E2ABEC MOV X0, X19
	0x03E2ABF0 BL 0x3E26F98
	0x03E2ABF4 LDR X20, [X19 + 0x180]
	0x03E2ABF8 CMP W21, W0
	0x03E2ABFC B.GE 0x3E2ACA0
	0x03E2AC00 MOV X0, X19
	0x03E2AC04 BL 0x3E26F3C
	0x03E2AC08 CBZ X20, 0x3E2AD50
	0x03E2AC0C MOV W2, W0
	0x03E2AC10 MOV X0, X20
	0x03E2AC14 MOV W1, W31
	0x03E2AC18 MOV X3, X31
	0x03E2AC1C BL 0x3228DE4
	0x03E2AC20 LDR X21, [X19 + 0x180]
	0x03E2AC24 MOV X20, X0
	0x03E2AC28 MOV X0, X19
	0x03E2AC2C BL 0x3E26F98
	0x03E2AC30 LDR X8, [X19 + 0x180]
	0x03E2AC34 CBZ X8, 0x3E2AD50
	0x03E2AC38 LDR W23, [X8 + 0x10]
	0x03E2AC3C MOV W22, W0
	0x03E2AC40 MOV X0, X19
	0x03E2AC44 BL 0x3E26F98
	0x03E2AC48 CBZ X21, 0x3E2AD50
	0x03E2AC4C SUB W2, W23, W0
	0x03E2AC50 MOV X0, X21
	0x03E2AC54 MOV W1, W22
	0x03E2AC58 MOV X3, X31
	0x03E2AC5C BL 0x3228DE4
	0x03E2AC60 MOV X1, X0
	0x03E2AC64 MOV X0, X20
	0x03E2AC68 MOV X2, X31
	0x03E2AC6C BL 0x321B938
	0x03E2AC70 STR X0, [X19 + 0x180]
	0x03E2AC74 MOV X0, X19
	0x03E2AC78 BL 0x3E26F3C
	0x03E2AC7C STR W0, [X19 + 0x198]
	0x03E2AC80 TBNZ X0, 0x1F, 0x3E2AD40
	0x03E2AC84 LDR X8, [X19 + 0x180]
	0x03E2AC88 CBZ X8, 0x3E2AD50
	0x03E2AC8C LDR W8, [X8 + 0x10]
	0x03E2AC90 CMP W8, W0
	0x03E2AC94 B.GE 0x3E2ABD0
	0x03E2AC98 STR W8, [X19 + 0x198]
	0x03E2AC9C B 0x3E2ABD0
	0x03E2ACA0 MOV X0, X19
	0x03E2ACA4 BL 0x3E26F98
	0x03E2ACA8 CBZ X20, 0x3E2AD50
	0x03E2ACAC MOV W2, W0
	0x03E2ACB0 MOV X0, X20
	0x03E2ACB4 MOV W1, W31
	0x03E2ACB8 MOV X3, X31
	0x03E2ACBC BL 0x3228DE4
	0x03E2ACC0 LDR X21, [X19 + 0x180]
	0x03E2ACC4 MOV X20, X0
	0x03E2ACC8 MOV X0, X19
	0x03E2ACCC BL 0x3E26F3C
	0x03E2ACD0 LDR X8, [X19 + 0x180]
	0x03E2ACD4 CBZ X8, 0x3E2AD50
	0x03E2ACD8 LDR W23, [X8 + 0x10]
	0x03E2ACDC MOV W22, W0
	0x03E2ACE0 MOV X0, X19
	0x03E2ACE4 BL 0x3E26F3C
	0x03E2ACE8 CBZ X21, 0x3E2AD50
	0x03E2ACEC SUB W2, W23, W0
	0x03E2ACF0 MOV X0, X21
	0x03E2ACF4 MOV W1, W22
	0x03E2ACF8 MOV X3, X31
	0x03E2ACFC BL 0x3228DE4
	0x03E2AD00 MOV X1, X0
	0x03E2AD04 MOV X0, X20
	0x03E2AD08 MOV X2, X31
	0x03E2AD0C BL 0x321B938
	0x03E2AD10 STR X0, [X19 + 0x180]
	0x03E2AD14 MOV X0, X19
	0x03E2AD18 BL 0x3E26F98
	0x03E2AD1C STR W0, [X19 + 0x194]
	0x03E2AD20 TBNZ X0, 0x1F, 0x3E2AD48
	0x03E2AD24 LDR X8, [X19 + 0x180]
	0x03E2AD28 CBZ X8, 0x3E2AD50
	0x03E2AD2C LDR W8, [X8 + 0x10]
	0x03E2AD30 CMP W8, W0
	0x03E2AD34 B.GE 0x3E2ABD0
	0x03E2AD38 STR W8, [X19 + 0x194]
	0x03E2AD3C B 0x3E2ABD0
	0x03E2AD40 STR W31, [X19 + 0x198]
	0x03E2AD44 B 0x3E2ABD0
	0x03E2AD48 STR W31, [X19 + 0x194]
	0x03E2AD4C B 0x3E2ABD0
	0x03E2AD50 BL 0x1C16F20
	0x03E2AD54 STP X30, X19, [X31 - 0x10]!
	0x03E2AD58 LDR X8, [X0 + 0x100]
	0x03E2AD5C CBZ X8, 0x3E2AD90
	0x03E2AD60 MOV X19, X0
	0x03E2AD64 MOV X0, X31
	0x03E2AD68 BL 0x3C3CC00
	0x03E2AD6C TBZ X0, 0x0, 0x3E2AD78
	0x03E2AD70 LDRB W8, [X19 + 0x210]
	0x03E2AD74 CBZ W8, 0x3E2AD90
	0x03E2AD78 LDR X0, [X19 + 0x100]
	0x03E2AD7C CBZ X0, 0x3E2AD98
	0x03E2AD80 LDR X1, [X19 + 0x180]
	0x03E2AD84 MOV X2, X31
	0x03E2AD88 LDP X30, X19, [X31], #0x10
	0x03E2AD8C B 0x3C3CF58
	0x03E2AD90 LDP X30, X19, [X31], #0x10
	0x03E2AD94 RET
	0x03E2AD98 BL 0x1C16F20
	0x03E2AD9C STR X30, [X31 - 0x30]!
	0x03E2ADA0 STP X22, X21, [X31 + 0x10]
	0x03E2ADA4 STP X20, X19, [X31 + 0x20]
	0x03E2ADA8 MOV W21, W2
	0x03E2ADAC MOV W20, W1
	0x03E2ADB0 MOV X19, X0
	0x03E2ADB4 BL 0x3E26F3C
	0x03E2ADB8 MOV W22, W0
	0x03E2ADBC MOV X0, X19
	0x03E2ADC0 BL 0x3E26F98
	0x03E2ADC4 CMP W22, W0
	0x03E2ADC8 B.EQ 0x3E2AE24
	0x03E2ADCC TBNZ X20, 0x0, 0x3E2AE24
	0x03E2ADD0 MOV X0, X19
	0x03E2ADD4 BL 0x3E26F3C
	0x03E2ADD8 MOV W20, W0
	0x03E2ADDC MOV X0, X19
	0x03E2ADE0 BL 0x3E26F98
	0x03E2ADE4 CMP W20, W0
	0x03E2ADE8 CSEL W8, W20, W0, LT
	0x03E2ADEC STR W8, [X19 + 0x198]
	0x03E2ADF0 TBNZ X8, 0x1F, 0x3E2AE9C
	0x03E2ADF4 LDR X9, [X19 + 0x180]
	0x03E2ADF8 CBZ X9, 0x3E2AEC4
	0x03E2ADFC LDR W10, [X9 + 0x10]
	0x03E2AE00 CMP W10, W8
	0x03E2AE04 B.GE 0x3E2AE0C
	0x03E2AE08 STR W10, [X19 + 0x198]
	0x03E2AE0C STR W8, [X19 + 0x194]
	0x03E2AE10 LDR W9, [X9 + 0x10]
	0x03E2AE14 CMP W9, W8
	0x03E2AE18 CSEL W8, W9, W8, LT
	0x03E2AE1C STR W8, [X19 + 0x194]
	0x03E2AE20 B 0x3E2AEB4
	0x03E2AE24 MOV X0, X19
	0x03E2AE28 TBZ X21, 0x0, 0x3E2AE6C
	0x03E2AE2C BL 0x3E2B2DC
	0x03E2AE30 TBNZ X20, 0x0, 0x3E2AE78
	0x03E2AE34 ADD X8, X19, 0x194
	0x03E2AE38 STR W0, [X19 + 0x194]
	0x03E2AE3C TBNZ X0, 0x1F, 0x3E2AEA8
	0x03E2AE40 LDR X9, [X19 + 0x180]
	0x03E2AE44 CBZ X9, 0x3E2AEC4
	0x03E2AE48 LDR W10, [X9 + 0x10]
	0x03E2AE4C CMP W10, W0
	0x03E2AE50 B.GE 0x3E2AE58
	0x03E2AE54 STR W10, [X8]
	0x03E2AE58 STR W0, [X19 + 0x198]

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x5BF000
	012 Move W8, [X20+1761]
	013 Move V9, V1
	014 Move V8, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x341000
	021 Move X0, [X0+4064]
	022 Call 0x1C17CF4
	023 Move X0, 0x341000
	024 Move X0, [X0+4056]
	025 Call 0x1C17CF4
	026 Move X0, 0x341000
	027 Move X0, [X0+4024]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1761], W8
	031 Move X0, [X19+264]
	032 Compare X0, 0
	033 JumpIfEqual {183}
	034 Move X1, X31
	035 Call Text.get_cachedTextGenerator, X0
	036 Compare X0, 0
	037 JumpIfEqual {183}
	038 Move X1, X31
	039 Move X20, X0
	040 Call TextGenerator.get_lineCount, X0
	041 Compare W0, 0
	042 JumpIfEqual {79}
	043 Move X0, X19
	044 Move V0, V8
	045 Move V1, V9
	046 Move X1, X20
	047 Call InputField.GetUnclampedCharacterLineFromPosition, X0, X1, X2
	048 Move TEMP, X0
	049 And TEMP, TEMP, -2147483648
	050 Compare TEMP, -2147483648
	051 JumpIfEqual {79}
	052 Move W21, W0
	053 Move X0, X20
	054 Move X1, X31
	055 Call TextGenerator.get_lineCount, X0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X0, X20
	058 Move X1, X31
	059 Call TextGenerator.get_lines, X0
	060 Compare X0, 0
	061 JumpIfEqual {183}
	062 Move X10, 0x341000
	063 Move X8, [X0]
	064 Move X10, [X10+4056]
	065 Move X22, X0
	066 NotImplemented "Instruction LDRH not yet implemented."
	067 Move X1, [X10]
	068 Compare X9, 0
	069 JumpIfEqual {76}
	070 Move X10, [X8+176]
	071 Add X10, X10, 8
	072 NotImplemented "Instruction LDUR not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Subtract X9, X9, 1
	075 Add X10, X10, 16
	076 Move X0, X22
	077 Move W2, W31
	078 Call 0x1C5D788
	079 Move W21, W31
	080 Move W0, W21
	081 Move X20, [X31+64]
	082 Move X19, [X31+72]
	083 Move X22, [X31+48]
	084 Move X21, [X31+56]
	085 Move X24, [X31+32]
	086 Move X23, [X31+40]
	087 Move X30, [X31+24]
	088 Move D9, [X31+8]
	089 Move D8, [X31+16]
	090 Move V10, [X31+80]
	091 Return X0
	092 Move X0, X20
	093 Move X20, [X31+64]
	094 Move X19, [X31+72]
	095 Move X22, [X31+48]
	096 Move X21, [X31+56]
	097 Move X24, [X31+32]
	098 Move X23, [X31+40]
	099 Move X30, [X31+24]
	100 Move D9, [X31+8]
	101 Move D8, [X31+16]
	102 Move X1, X31
	103 Move V10, [X31+80]
	104 Call TextGenerator.get_characterCountVisible, X0
	105 Return X0
	106 NotImplemented "Instruction LDRSW not yet implemented."
	107 Add X8, X8, X9
	108 Add X0, X8, 312
	109 Move X8, [X0]
	110 Move X2, [X0+8]
	111 Move X0, X22
	112 Move W1, W21
	113 NotImplemented "Instruction BLR not yet implemented."
	114 Move X8, 0x341000
	115 Move X8, [X8+4024]
	116 Move X22, X0
	117 Move X8, [X8]
	118 Move W9, [X8+224]
	119 Compare W9, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X8
	122 Call 0x1C17DFC
	123 Move X0, X20
	124 Move W1, W21
	125 Call InputField.GetLineEndPosition, X0, X1
	126 Move W21, W0
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X24, 0x341000
	129 Move X24, [X24+4064]
	130 Move X0, X20
	131 Move X1, X31
	132 Call TextGenerator.get_characterCountVisible, X0
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X0, X20
	135 Move X1, X31
	136 Call TextGenerator.get_characters, X0
	137 Compare X0, 0
	138 JumpIfEqual {183}
	139 Move X8, [X0]
	140 Move X1, [X24]
	141 Move X23, X0
	142 NotImplemented "Instruction LDRH not yet implemented."
	143 Compare X9, 0
	144 JumpIfEqual {151}
	145 Move X10, [X8+176]
	146 Add X10, X10, 8
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 NotImplemented "Instruction CMP not yet implemented."
	149 Subtract X9, X9, 1
	150 Add X10, X10, 16
	151 Move X0, X23
	152 Move W2, W31
	153 Call 0x1C5D788
	154 NotImplemented "Instruction LDRSW not yet implemented."
	155 Add X8, X8, X9
	156 Add X0, X8, 312
	157 Move X8, [X0]
	158 Move X2, [X0+8]
	159 Move X0, X23
	160 Move W1, W22
	161 NotImplemented "Instruction BLR not yet implemented."
	162 Move X0, [X19+264]
	163 Compare X0, 0
	164 JumpIfEqual {183}
	165 Move X1, X31
	166 Move V10, V0
	167 Move V9, V2
	168 Call Text.get_pixelsPerUnit, X0
	169 Move X0, [X19+264]
	170 Compare X0, 0
	171 JumpIfEqual {183}
	172 Move X1, X31
	173 NotImplemented "Instruction FDIV not yet implemented."
	174 Call Text.get_pixelsPerUnit, X0
	175 NotImplemented "Instruction FDIV not yet implemented."
	176 Add S0, S10, S0
	177 Subtract S0, S0, S8
	178 Subtract S1, S8, S10
	179 NotImplemented "Instruction FCMP not yet implemented."
	180 Add W22, W22, 1
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move W21, W22
	183 Call 0x1C17F20

Method: System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E2AFC0 STR W8, [X19 + 0x198]
	0x03E2AFC4 B 0x3E2AFE0
	0x03E2AFC8 STR W31, [X19 + 0x198]
	0x03E2AFCC STR W31, [X19 + 0x194]
	0x03E2AFD0 B 0x3E2AFE0
	0x03E2AFD4 STR X31, [X8]
	0x03E2AFD8 B 0x3E2AFE0
	0x03E2AFDC STR W31, [X19 + 0x198]
	0x03E2AFE0 LDP X20, X19, [X31 + 0x20]
	0x03E2AFE4 LDP X22, X21, [X31 + 0x10]
	0x03E2AFE8 LDR X30, [X31], #0x30
	0x03E2AFEC RET
	0x03E2AFF0 BL 0x1C16F20
	0x03E2AFF4 AND W1, W1, 0x1
	0x03E2AFF8 MOVZ W2, 0x1
	0x03E2AFFC B 0x3E2BBBC
	0x03E2B000 AND W1, W1, 0x1
	0x03E2B004 MOVZ W2, 0x1
	0x03E2B008 B 0x3E2BA98
	0x03E2B00C STP X30, X19, [X31 - 0x10]!
	0x03E2B010 AND W9, W1, 0xFFFF
	0x03E2B014 MOV W19, W1
	0x03E2B018 CMP W9, 0x9
	0x03E2B01C MOV W8, W31
	0x03E2B020 B.GT 0x3E2B034
	0x03E2B024 CBZ W9, 0x3E2B06C
	0x03E2B028 CMP W9, 0x9
	0x03E2B02C B.EQ 0x3E2B068
	0x03E2B030 B 0x3E2B044
	0x03E2B034 CMP W9, 0xA
	0x03E2B038 B.EQ 0x3E2B068
	0x03E2B03C CMP W9, 0x7F
	0x03E2B040 B.EQ 0x3E2B06C
	0x03E2B044 LDR X0, [X0 + 0x108]
	0x03E2B048 CBZ X0, 0x3E2B078
	0x03E2B04C MOV X1, X31
	0x03E2B050 BL 0x3E450E8
	0x03E2B054 CBZ X0, 0x3E2B078
	0x03E2B058 MOV W1, W19
	0x03E2B05C MOV X2, X31
	0x03E2B060 LDP X30, X19, [X31], #0x10
	0x03E2B064 B 0x3CCFF04
	0x03E2B068 MOVZ W8, 0x1
	0x03E2B06C MOV W0, W8
	0x03E2B070 LDP X30, X19, [X31], #0x10
	0x03E2B074 RET
	0x03E2B078 BL 0x1C16F20
	0x03E2B07C B 0x3E2A54C
	0x03E2B080 STR X30, [X31 - 0x30]!
	0x03E2B084 STP X22, X21, [X31 + 0x10]
	0x03E2B088 STP X20, X19, [X31 + 0x20]
	0x03E2B08C ADRP X21, 0x5BD000
	0x03E2B090 LDRB W8, [X21 + 0x6E7]
	0x03E2B094 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5BF000
	006 Move W8, [X21+1762]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2CA000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1762], W8
	018 Move X8, [X19]
	019 Move X0, X19
	020 Move X9, [X8+456]
	021 Move X1, [X8+464]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {67}
	027 Move X8, [X19]
	028 Move X0, X19
	029 Move X9, [X8+696]
	030 Move X1, [X8+704]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {67}
	036 Compare X20, 0
	037 JumpIfEqual {76}
	038 Move W8, [X20+328]
	039 Compare W8, 0
	040 JumpIfNotEqual {67}
	041 Move X8, 0x2C9000
	042 Move X8, [X8+1432]
	043 Move X20, [X19+264]
	044 Move X0, [X8]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {67}
	057 Move X0, X31
	058 Call TouchScreenKeyboard.get_isSupported
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {66}
	063 Move W8, [X19+528]
	064 Compare W8, 0
	065 JumpIfEqual {73}
	066 Move W0, 1
	067 Move W0, W31
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0
	073 Move W8, [X19+300]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 NotImplemented "Instruction CSET not yet implemented."
	076 Call 0x1C17F20

Method: System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E2B098 MOV X20, X0
	0x03E2B09C TBNZ X8, 0x0, 0x3E2B0B4
	0x03E2B0A0 ADRP X0, 0x32E000
	0x03E2B0A4 LDR X0, [X0 + 0x188]
	0x03E2B0A8 BL 0x1C16CF4
	0x03E2B0AC MOVZ W8, 0x1
	0x03E2B0B0 STRB W8, [X21 + 0x6E7]
	0x03E2B0B4 LDRB W8, [X20 + 0x1D0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call InputField.MayDrag, X0, X1
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {11}
	009 Move W8, 1
	010 Move [X19+466], W8
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 Return 

Method: System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E2B0B8 CBZ W8, 0x3E2B20C
	0x03E2B0BC LDR X0, [X20 + 0x218]
	0x03E2B0C0 MOV X1, X31
	0x03E2B0C4 BL 0x3C634AC
	0x03E2B0C8 TBZ X0, 0x0, 0x3E2B1EC
	0x03E2B0CC ADRP X21, 0x32E000
	0x03E2B0D0 LDR X21, [X21 + 0x188]
	0x03E2B0D4 MOV W22, W31
	0x03E2B0D8 LDR X0, [X20 + 0x218]
	0x03E2B0DC CBZ X0, 0x3E2B21C
	0x03E2B0E0 MOV X1, X31
	0x03E2B0E4 BL 0x3C62C04
	0x03E2B0E8 CMP W0, 0x4
	0x03E2B0EC B.NE 0x3E2B170
	0x03E2B0F0 LDRB W8, [X20 + 0x211]
	0x03E2B0F4 CBZ W8, 0x3E2B134
	0x03E2B0F8 BL 0x3E25410
	0x03E2B0FC CBZ X0, 0x3E2B21C
	0x03E2B100 LDR W8, [X0 + 0x10]
	0x03E2B104 CBNZ W8, 0x3E2B134
	0x03E2B108 LDR X0, [X20 + 0x218]
	0x03E2B10C CBZ X0, 0x3E2B21C
	0x03E2B110 MOV X1, X31
	0x03E2B114 BL 0x3C630F0
	0x03E2B118 ANDS W31, W0, 0xFFFF
	0x03E2B11C B.NE 0x3E2B134
	0x03E2B120 LDR X0, [X20 + 0x218]
	0x03E2B124 CBZ X0, 0x3E2B21C
	0x03E2B128 MOV X1, X31
	0x03E2B12C BL 0x3C62EF0
	0x03E2B130 CBZ W0, 0x3E2B1CC
	0x03E2B134 LDR X1, [X20 + 0x218]
	0x03E2B138 MOV X0, X20
	0x03E2B13C BL 0x3E2A54C
	0x03E2B140 CMP W0, 0x1
	0x03E2B144 B.NE 0x3E2B164
	0x03E2B148 LDRB W8, [X20 + 0x200]
	0x03E2B14C CBNZ W8, 0x3E2B158
	0x03E2B150 MOV X0, X20
	0x03E2B154 BL 0x3E28E84
	0x03E2B158 MOV X0, X20
	0x03E2B15C BL 0x3E276B8
	0x03E2B160 B 0x3E2B1CC
	0x03E2B164 MOV X0, X20
	0x03E2B168 BL 0x3E25E74
	0x03E2B16C MOVZ W22, 0x1
	0x03E2B170 LDR X0, [X20 + 0x218]
	0x03E2B174 CBZ X0, 0x3E2B21C
	0x03E2B178 MOV X1, X31
	0x03E2B17C BL 0x3C63270
	0x03E2B180 SUB W8, W0, 0xD
	0x03E2B184 CMP W8, 0x1
	0x03E2B188 B.HI 0x3E2B1D0
	0x03E2B18C LDR X0, [X20 + 0x218]
	0x03E2B190 CBZ X0, 0x3E2B21C
	0x03E2B194 MOV X1, X31
	0x03E2B198 BL 0x3C632F0
	0x03E2B19C LDR X1, [X21]
	0x03E2B1A0 MOV X2, X31
	0x03E2B1A4 BL 0x321BA08
	0x03E2B1A8 TBZ X0, 0x0, 0x3E2B1D0
	0x03E2B1AC LDR X8, [X20 + 0x180]
	0x03E2B1B0 CBZ X8, 0x3E2B21C
	0x03E2B1B4 LDR W9, [X8 + 0x10]
	0x03E2B1B8 BIC W9, W9, W9, 0x1F
	0x03E2B1BC STR W9, [X20 + 0x194]
	0x03E2B1C0 LDR W8, [X8 + 0x10]
	0x03E2B1C4 AND W8, W8, W8, 0x1F
	0x03E2B1C8 STR W8, [X20 + 0x198]
	0x03E2B1CC MOVZ W22, 0x1
	0x03E2B1D0 LDR X0, [X20 + 0x218]
	0x03E2B1D4 MOV X1, X31
	0x03E2B1D8 BL 0x3C634AC
	0x03E2B1DC TBNZ X0, 0x0, 0x3E2B0D8
	0x03E2B1E0 TBZ X22, 0x0, 0x3E2B1EC
	0x03E2B1E4 MOV X0, X20
	0x03E2B1E8 BL 0x3E25E74
	0x03E2B1EC CBZ X19, 0x3E2B21C
	0x03E2B1F0 LDR X8, [X19]
	0x03E2B1F4 MOV X0, X19
	0x03E2B1F8 LDP X20, X19, [X31 + 0x20]
	0x03E2B1FC LDP X22, X21, [X31 + 0x10]
	0x03E2B200 LDP X2, X1, [X8 + 0x188]
	0x03E2B204 LDR X30, [X31], #0x30
	0x03E2B208 BR X2
	0x03E2B20C LDP X20, X19, [X31 + 0x20]
	0x03E2B210 LDP X22, X21, [X31 + 0x10]
	0x03E2B214 LDR X30, [X31], #0x30
	0x03E2B218 RET
	0x03E2B21C BL 0x1C16F20
	0x03E2B220 STP X30, X21, [X31 - 0x20]!
	0x03E2B224 STP X20, X19, [X31 + 0x10]
	0x03E2B228 ADRP X20, 0x5BD000
	0x03E2B22C LDRB W8, [X20 + 0x6E9]
	0x03E2B230 MOV X19, X0
	0x03E2B234 TBNZ X8, 0x0, 0x3E2B24C
	0x03E2B238 ADRP X0, 0x33F000
	0x03E2B23C LDR X0, [X0 + 0xFB8]
	0x03E2B240 BL 0x1C16CF4
	0x03E2B244 MOVZ W8, 0x1
	0x03E2B248 STRB W8, [X20 + 0x6E9]
	0x03E2B24C MOV X0, X19
	0x03E2B250 BL 0x3E26F98
	0x03E2B254 LDR X20, [X19 + 0x180]
	0x03E2B258 CBZ X20, 0x3E2B2D8
	0x03E2B25C MOV W8, W0
	0x03E2B260 LDR W0, [X20 + 0x10]
	0x03E2B264 ADD W8, W8, 0x1
	0x03E2B268 CMP W8, W0
	0x03E2B26C B.GE 0x3E2B2CC
	0x03E2B270 ADRP X21, 0x33F000
	0x03E2B274 LDR X21, [X21 + 0xFB8]
	0x03E2B278 LDR X0, [X21]
	0x03E2B27C LDR W8, [X0 + 0xE0]
	0x03E2B280 CBNZ W8, 0x3E2B28C
	0x03E2B284 BL 0x1C16DFC
	0x03E2B288 LDR X0, [X21]
	0x03E2B28C LDR X8, [X0 + 0xB8]
	0x03E2B290 MOV X0, X19
	0x03E2B294 LDR X21, [X8]
	0x03E2B298 BL 0x3E26F98
	0x03E2B29C ADD W2, W0, 0x1
	0x03E2B2A0 MOV X0, X20
	0x03E2B2A4 MOV X1, X21
	0x03E2B2A8 MOV X3, X31

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+48], X22
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0x5BE000
	010 Move W8, [X21+1763]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x31F000
	018 Move X0, [X0+1720]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1763], W8
	022 Move X0, X20
	023 Move X1, X19
	024 Move [X31+40], X31
	025 Move [X31+8], X31
	026 Call InputField.MayDrag, X0, X1
	027 Move TEMP, X0
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {141}
	031 Move X21, 0x5AF000
	032 Move W8, [X21+1935]
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0x2D1000
	036 Move X0, [X0+3848]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+1935], W8
	040 Move X8, 0x2D1000
	041 Move X8, [X8+3848]
	042 Add X1, X31, 40
	043 Move X0, X19
	044 Move X2, X31
	045 Move X8, [X8]
	046 Move X8, [X8+184]
	047 Move V0, [X8]
	048 Move [X31+40], D0
	049 Call MultipleDisplayUtilities.GetRelativeMousePositionForDrag, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {141}
	054 Move X0, [X20+264]
	055 Compare X0, 0
	056 JumpIfEqual {150}
	057 Move X1, X31
	058 Call Graphic.get_rectTransform, X0
	059 Compare X19, 0
	060 JumpIfEqual {150}
	061 Move S8, [X31+40]
	062 Move S9, [X31+44]
	063 Move X21, X0
	064 Move X0, X19
	065 Move X1, X31
	066 Call PointerEventData.get_pressEventCamera, X0
	067 Move X8, 0x31F000
	068 Move X8, [X8+1720]
	069 Move X22, X0
	070 Move X8, [X8]
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Add X2, X31, 8
	077 Move X0, X21
	078 Move V0, V8
	079 Move V1, V9
	080 Move X1, X22
	081 Move X3, X31
	082 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	083 Move S0, [X31+8]
	084 Move S1, [X31+12]
	085 Move X0, X20
	086 Call InputField.GetCharacterIndexFromPosition, X0, X1
	087 Move W8, [X20+484]
	088 Add W8, W8, W0
	089 Move [X20+408], W8
	090 Move X9, [X20+384]
	091 Compare X9, 0
	092 JumpIfEqual {150}
	093 Move W9, [X9+16]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move W9, W31
	096 Move [X20+408], W9
	097 Move X0, X20
	098 Call InputField.MarkGeometryAsDirty, X0
	099 Move X0, [X20+264]
	100 Compare X0, 0
	101 JumpIfEqual {150}
	102 Move X1, X31
	103 Call Graphic.get_rectTransform, X0
	104 Move V8, [X19+260]
	105 Move V9, [X19+264]
	106 Move X21, X0
	107 Move X0, X19
	108 Move X1, X31
	109 Call PointerEventData.get_pressEventCamera, X0
	110 Move X1, X0
	111 Move X0, X21
	112 Move V0, V8
	113 Move V1, V9
	114 Move X2, X31
	115 Call RectTransformUtility.RectangleContainsScreenPoint, X0, X1, X2
	116 NotImplemented "Instruction ORN not yet implemented."
	117 And W8, W8, 1
	118 Move [X20+467], W8
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfEqual {134}
	123 Move X8, [X20+496]
	124 Compare X8, 0
	125 JumpIfNotEqual {134}
	126 Move X0, X20
	127 Move X1, X19
	128 Call InputField.MouseDragOutsideRect, X0, X1
	129 Move X1, X0
	130 Move X0, X20
	131 Move X2, X31
	132 Call MonoBehaviour.StartCoroutine, X0, X1
	133 Move [X20+496], X0
	134 Move X0, X20
	135 Call InputField.UpdateKeyboardCaret, X0
	136 Move X8, [X19]
	137 Move X0, X19
	138 Move X9, [X8+392]
	139 Move X1, [X8+400]
	140 NotImplemented "Instruction BLR not yet implemented."
	141 Move X20, [X31+64]
	142 Move X19, [X31+72]
	143 Move X22, [X31+48]
	144 Move X21, [X31+56]
	145 Move X30, [X31+32]
	146 Move D9, [X31+16]
	147 Move D8, [X31+24]
	148 Add X31, X31, 80
	149 Return 
	150 Call 0x1C17F20

Method: System.Collections.IEnumerator MouseDragOutsideRect(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E2B2AC BL 0x322C054
	0x03E2B2B0 ADDS W31, W0, 0x1
	0x03E2B2B4 B.EQ 0x3E2B2C0
	0x03E2B2B8 ADD W0, W0, 0x1
	0x03E2B2BC B 0x3E2B2CC
	0x03E2B2C0 LDR X8, [X19 + 0x180]
	0x03E2B2C4 CBZ X8, 0x3E2B2D8
	0x03E2B2C8 LDR W0, [X8 + 0x10]
	0x03E2B2CC LDP X20, X19, [X31 + 0x10]
	0x03E2B2D0 LDP X30, X21, [X31], #0x20
	0x03E2B2D4 RET
	0x03E2B2D8 BL 0x1C16F20
	0x03E2B2DC STP X30, X21, [X31 - 0x20]!
	0x03E2B2E0 STP X20, X19, [X31 + 0x10]
	0x03E2B2E4 ADRP X20, 0x5BD000
	0x03E2B2E8 LDRB W8, [X20 + 0x6EA]
	0x03E2B2EC MOV X19, X0
	0x03E2B2F0 TBNZ X8, 0x0, 0x3E2B308
	0x03E2B2F4 ADRP X0, 0x33F000
	0x03E2B2F8 LDR X0, [X0 + 0xFB8]
	0x03E2B2FC BL 0x1C16CF4
	0x03E2B300 MOVZ W8, 0x1
	0x03E2B304 STRB W8, [X20 + 0x6EA]
	0x03E2B308 MOV X0, X19
	0x03E2B30C BL 0x3E26F98
	0x03E2B310 CMP W0, 0x2
	0x03E2B314 B.MI 0x3E2B368

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5BE000
	007 Move X22, 0x340000
	008 Move W8, [X21+1764]
	009 Move X22, [X22+4080]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x340000
	017 Move X0, [X0+4080]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1764], W8
	021 Move X0, [X22]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X21, X0
	025 Call Object..ctor, X0
	026 Move [X21+16], W31
	027 Move [X21+32], X19
	028 Move [X21+40], X20
	029 Move X0, X21
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return X0

Method: System.Void OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E2B340 LDR X21, [X8]
	0x03E2B344 BL 0x3E26F98
	0x03E2B348 CBZ X20, 0x3E2B378
	0x03E2B34C SUB W2, W0, 0x2
	0x03E2B350 MOV X0, X20
	0x03E2B354 MOV X1, X21
	0x03E2B358 MOV X3, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call InputField.MayDrag, X0, X1
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {10}
	009 Move [X19+466], W31
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Return 

Method: System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E2B35C BL 0x322C89C
	0x03E2B360 ADD W0, W0, 0x1
	0x03E2B364 B 0x3E2B36C
	0x03E2B368 MOV W0, W31
	0x03E2B36C LDP X20, X19, [X31 + 0x10]
	0x03E2B370 LDP X30, X21, [X31], #0x20
	0x03E2B374 RET
	0x03E2B378 BL 0x1C16F20
	0x03E2B37C STR X30, [X31 - 0x40]!
	0x03E2B380 STP X24, X23, [X31 + 0x10]
	0x03E2B384 STP X22, X21, [X31 + 0x20]
	0x03E2B388 STP X20, X19, [X31 + 0x30]
	0x03E2B38C ADRP X21, 0x5BD000
	0x03E2B390 LDRB W8, [X21 + 0x6EB]
	0x03E2B394 MOV X19, X2
	0x03E2B398 MOV W20, W1
	0x03E2B39C TBNZ X8, 0x0, 0x3E2B3B4
	0x03E2B3A0 ADRP X0, 0x33F000
	0x03E2B3A4 LDR X0, [X0 + 0xFD8]
	0x03E2B3A8 BL 0x1C16CF4
	0x03E2B3AC MOVZ W8, 0x1
	0x03E2B3B0 STRB W8, [X21 + 0x6EB]
	0x03E2B3B4 CBZ X19, 0x3E2B488
	0x03E2B3B8 ADRP X24, 0x33F000
	0x03E2B3BC LDR X24, [X24 + 0xFD8]
	0x03E2B3C0 MOV W23, W31
	0x03E2B3C4 MOV X0, X19
	0x03E2B3C8 MOV X1, X31
	0x03E2B3CC MOV W21, W23
	0x03E2B3D0 BL 0x3CCF77C
	0x03E2B3D4 SUB W8, W0, 0x1
	0x03E2B3D8 CMP W23, W8
	0x03E2B3DC B.GE 0x3E2B460
	0x03E2B3E0 MOV X0, X19
	0x03E2B3E4 MOV X1, X31
	0x03E2B3E8 BL 0x3CCF6DC
	0x03E2B3EC CBZ X0, 0x3E2B488
	0x03E2B3F0 LDR X8, [X0]
	0x03E2B3F4 LDR X1, [X24]
	0x03E2B3F8 MOV X22, X0
	0x03E2B3FC LDRH W9, [X8 + 0x12E]
	0x03E2B400 CBZ X9, 0x3E2B424
	0x03E2B404 LDR X10, [X8 + 0xB0]
	0x03E2B408 ADD X10, X10, 0x8
	0x03E2B40C LDUR X11, [X10 - 0x8]
	0x03E2B410 CMP X11, X1
	0x03E2B414 B.EQ 0x3E2B434
	0x03E2B418 SUBS X9, X9, 0x1
	0x03E2B41C ADD X10, X10, 0x10
	0x03E2B420 B.NE 0x3E2B40C
	0x03E2B424 MOV X0, X22
	0x03E2B428 MOV W2, W31
	0x03E2B42C BL 0x1C5C788
	0x03E2B430 B 0x3E2B440
	0x03E2B434 LDRSW X9, [X10]
	0x03E2B438 ADD X8, X8, X9, 0x4, LSL
	0x03E2B43C ADD X0, X8, 0x138
	0x03E2B440 LDP X8, X2, [X0]
	0x03E2B444 ADD W23, W21, 0x1
	0x03E2B448 MOV X0, X22
	0x03E2B44C MOV W1, W23
	0x03E2B450 BLR X8
	0x03E2B454 CMP W0, W20
	0x03E2B458 B.LE 0x3E2B3C4
	0x03E2B45C B 0x3E2B470
	0x03E2B460 MOV X0, X19
	0x03E2B464 MOV X1, X31
	0x03E2B468 BL 0x3CCF77C
	0x03E2B46C SUB W21, W0, 0x1
	0x03E2B470 MOV W0, W21
	0x03E2B474 LDP X20, X19, [X31 + 0x30]
	0x03E2B478 LDP X22, X21, [X31 + 0x20]
	0x03E2B47C LDP X24, X23, [X31 + 0x10]
	0x03E2B480 LDR X30, [X31], #0x40
	0x03E2B484 RET
	0x03E2B488 BL 0x1C16F20
	0x03E2B48C STR D8, [X31 - 0x40]!
	0x03E2B490 STR X30, [X31 + 0x8]
	0x03E2B494 STP X24, X23, [X31 + 0x10]
	0x03E2B498 STP X22, X21, [X31 + 0x20]
	0x03E2B49C STP X20, X19, [X31 + 0x30]
	0x03E2B4A0 ADRP X22, 0x5BD000
	0x03E2B4A4 LDRB W8, [X22 + 0x6EC]
	0x03E2B4A8 MOV W21, W2
	0x03E2B4AC MOV W20, W1
	0x03E2B4B0 MOV X19, X0
	0x03E2B4B4 TBNZ X8, 0x0, 0x3E2B4E4
	0x03E2B4B8 ADRP X0, 0x33F000
	0x03E2B4BC LDR X0, [X0 + 0xFF8]
	0x03E2B4C0 BL 0x1C16CF4
	0x03E2B4C4 ADRP X0, 0x33F000
	0x03E2B4C8 LDR X0, [X0 + 0xFE0]
	0x03E2B4CC BL 0x1C16CF4
	0x03E2B4D0 ADRP X0, 0x33F000
	0x03E2B4D4 LDR X0, [X0 + 0xFD8]
	0x03E2B4D8 BL 0x1C16CF4
	0x03E2B4DC MOVZ W8, 0x1
	0x03E2B4E0 STRB W8, [X22 + 0x6EC]
	0x03E2B4E4 MOV X0, X19
	0x03E2B4E8 BL 0x3E2584C
	0x03E2B4EC CBZ X0, 0x3E2B7E0
	0x03E2B4F0 MOV X1, X31
	0x03E2B4F4 BL 0x3CCF680
	0x03E2B4F8 CBZ X0, 0x3E2B7E0
	0x03E2B4FC ADRP X10, 0x33F000
	0x03E2B500 LDR X8, [X0]
	0x03E2B504 LDR X10, [X10 + 0xFF8]
	0x03E2B508 MOV X22, X0
	0x03E2B50C LDRH W9, [X8 + 0x12E]
	0x03E2B510 LDR X1, [X10]
	0x03E2B514 CBZ X9, 0x3E2B538
	0x03E2B518 LDR X10, [X8 + 0xB0]
	0x03E2B51C ADD X10, X10, 0x8
	0x03E2B520 LDUR X11, [X10 - 0x8]
	0x03E2B524 CMP X11, X1
	0x03E2B528 B.EQ 0x3E2B548
	0x03E2B52C SUBS X9, X9, 0x1
	0x03E2B530 ADD X10, X10, 0x10
	0x03E2B534 B.NE 0x3E2B520
	0x03E2B538 MOV X0, X22
	0x03E2B53C MOV W2, W31
	0x03E2B540 BL 0x1C5C788
	0x03E2B544 B 0x3E2B554
	0x03E2B548 LDRSW X9, [X10]

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x5BE000
	009 Move W8, [X21+1765]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x2F0000
	017 Move X0, [X0+3576]
	018 Call 0x1C17CF4
	019 Move X0, 0x31F000
	020 Move X0, [X0+1720]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1765], W8
	024 Move X0, X20
	025 Move X1, X19
	026 Move [X31+24], X31
	027 Call InputField.MayDrag, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {128}
	032 Move X8, 0x2F0000
	033 Move X8, [X8+3576]
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X31
	040 Call EventSystem.get_current
	041 Move X21, X0
	042 Move X0, X20
	043 Move X1, X31
	044 Call Component.get_gameObject, X0
	045 Compare X21, 0
	046 JumpIfEqual {151}
	047 Move X1, X0
	048 Move X0, X21
	049 Move X2, X19
	050 Move X3, X31
	051 Call EventSystem.SetSelectedGameObject, X0, X1, X2
	052 Move W21, [X20+464]
	053 Move X0, X20
	054 Move X1, X19
	055 Move X2, X31
	056 Call Selectable.OnPointerDown, X0, X1
	057 Move X0, X31
	058 Call TouchScreenKeyboard.get_isSupported
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {66}
	063 Move W8, [X20+528]
	064 Compare W8, 0
	065 JumpIfEqual {136}
	066 Compare W21, 0
	067 JumpIfEqual {117}
	068 Move X0, [X20+264]
	069 Compare X0, 0
	070 JumpIfEqual {151}
	071 Move X1, X31
	072 Call Graphic.get_rectTransform, X0
	073 Compare X19, 0
	074 JumpIfEqual {151}
	075 Move S8, [X19+228]
	076 Move S9, [X19+232]
	077 Move X21, X0
	078 Move X0, X19
	079 Move X1, X31
	080 Call PointerEventData.get_pressEventCamera, X0
	081 Move X8, 0x31F000
	082 Move X8, [X8+1720]
	083 Move X22, X0
	084 Move X8, [X8]
	085 Move W9, [X8+224]
	086 Compare W9, 0
	087 JumpIfNotEqual {90}
	088 Move X0, X8
	089 Call 0x1C17DFC
	090 Add X2, X31, 24
	091 Move X0, X21
	092 Move V0, V8
	093 Move V1, V9
	094 Move X1, X22
	095 Move X3, X31
	096 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	097 Move S0, [X31+24]
	098 Move S1, [X31+28]
	099 Move X0, X20
	100 Call InputField.GetCharacterIndexFromPosition, X0, X1
	101 Move W8, [X20+484]
	102 Add X9, X20, 404
	103 Add W8, W8, W0
	104 Move [X20+404], W8
	105 Move X10, [X20+384]
	106 Compare X10, 0
	107 JumpIfEqual {151}
	108 Move W11, [X10+16]
	109 NotImplemented "Instruction CMP not yet implemented."
	110 Move [X9], W11
	111 Move [X20+408], W8
	112 Move W9, [X10+16]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 NotImplemented "Instruction CSEL not yet implemented."
	115 Move [X20+408], W8
	116 Move [X9], X31
	117 Move X0, X20
	118 Call InputField.UpdateLabel, X0
	119 Move X0, X20
	120 Call InputField.UpdateKeyboardCaret, X0
	121 Compare X19, 0
	122 JumpIfEqual {151}
	123 Move X8, [X19]
	124 Move X0, X19
	125 Move X9, [X8+392]
	126 Move X1, [X8+400]
	127 NotImplemented "Instruction BLR not yet implemented."
	128 Move X20, [X31+48]
	129 Move X19, [X31+56]
	130 Move X22, [X31+32]
	131 Move X21, [X31+40]
	132 Move X30, [X31+16]
	133 Move D9, [X31+64]
	134 Move D8, [X31+72]
	135 Return 
	136 Move X0, [X20+256]
	137 Compare X0, 0
	138 JumpIfEqual {145}
	139 Move X1, X31
	140 Call TouchScreenKeyboard.get_active, X0
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfEqual {66}
	145 Move X8, [X20]
	146 Move X0, X20
	147 Move X1, X19
	148 Move X9, [X8+888]
	149 Move X2, [X8+896]
	150 NotImplemented "Instruction BLR not yet implemented."
	151 Call 0x1C17F20

Method: UnityEngine.UI.InputField/EditState KeyPressed(UnityEngine.Event evt)

Disassembly:
	0x03E2B54C ADD X8, X8, X9, 0x4, LSL
	0x03E2B550 ADD X0, X8, 0x138
	0x03E2B554 LDP X8, X1, [X0]
	0x03E2B558 MOV X0, X22
	0x03E2B55C BLR X8
	0x03E2B560 CMP W0, W20
	0x03E2B564 B.LE 0x3E2B5CC
	0x03E2B568 MOV X0, X19
	0x03E2B56C BL 0x3E2584C
	0x03E2B570 CBZ X0, 0x3E2B7E0
	0x03E2B574 MOV X1, X31
	0x03E2B578 BL 0x3CCF680
	0x03E2B57C CBZ X0, 0x3E2B7E0
	0x03E2B580 ADRP X23, 0x33F000
	0x03E2B584 LDR X8, [X0]
	0x03E2B588 LDR X23, [X23 + 0xFE0]
	0x03E2B58C MOV X22, X0
	0x03E2B590 LDRH W9, [X8 + 0x12E]
	0x03E2B594 LDR X1, [X23]
	0x03E2B598 CBZ X9, 0x3E2B5BC
	0x03E2B59C LDR X10, [X8 + 0xB0]
	0x03E2B5A0 ADD X10, X10, 0x8
	0x03E2B5A4 LDUR X11, [X10 - 0x8]
	0x03E2B5A8 CMP X11, X1
	0x03E2B5AC B.EQ 0x3E2B5D4
	0x03E2B5B0 SUBS X9, X9, 0x1
	0x03E2B5B4 ADD X10, X10, 0x10
	0x03E2B5B8 B.NE 0x3E2B5A4
	0x03E2B5BC MOV X0, X22
	0x03E2B5C0 MOV W2, W31
	0x03E2B5C4 BL 0x1C5C788
	0x03E2B5C8 B 0x3E2B5E0
	0x03E2B5CC MOV W20, W31
	0x03E2B5D0 B 0x3E2B7C4
	0x03E2B5D4 LDRSW X9, [X10]
	0x03E2B5D8 ADD X8, X8, X9, 0x4, LSL
	0x03E2B5DC ADD X0, X8, 0x138
	0x03E2B5E0 LDP X8, X2, [X0]
	0x03E2B5E4 MOV X0, X22
	0x03E2B5E8 MOV W1, W20
	0x03E2B5EC BLR X8
	0x03E2B5F0 MOV X0, X19
	0x03E2B5F4 MOV V8.16B, V0.16B
	0x03E2B5F8 BL 0x3E2584C
	0x03E2B5FC MOV W1, W20
	0x03E2B600 MOV X2, X0
	0x03E2B604 BL 0x3E2B37C
	0x03E2B608 CMP W0, 0x0
	0x03E2B60C B.LE 0x3E2B678
	0x03E2B610 MOV W22, W0
	0x03E2B614 MOV X0, X19
	0x03E2B618 BL 0x3E2584C
	0x03E2B61C CBZ X0, 0x3E2B7E0
	0x03E2B620 MOV X1, X31
	0x03E2B624 BL 0x3CCF6DC
	0x03E2B628 CBZ X0, 0x3E2B7E0
	0x03E2B62C ADRP X24, 0x33F000
	0x03E2B630 LDR X8, [X0]
	0x03E2B634 LDR X24, [X24 + 0xFD8]
	0x03E2B638 MOV X20, X0
	0x03E2B63C LDRH W9, [X8 + 0x12E]
	0x03E2B640 LDR X1, [X24]
	0x03E2B644 CBZ X9, 0x3E2B668
	0x03E2B648 LDR X10, [X8 + 0xB0]
	0x03E2B64C ADD X10, X10, 0x8
	0x03E2B650 LDUR X11, [X10 - 0x8]
	0x03E2B654 CMP X11, X1
	0x03E2B658 B.EQ 0x3E2B684
	0x03E2B65C SUBS X9, X9, 0x1
	0x03E2B660 ADD X10, X10, 0x10
	0x03E2B664 B.NE 0x3E2B650
	0x03E2B668 MOV X0, X20
	0x03E2B66C MOV W2, W31
	0x03E2B670 BL 0x1C5C788
	0x03E2B674 B 0x3E2B690
	0x03E2B678 ANDS W31, W21, 0x1
	0x03E2B67C CSEL W0, W31, W20, NE
	0x03E2B680 B 0x3E2B7C8
	0x03E2B684 LDRSW X9, [X10]
	0x03E2B688 ADD X8, X8, X9, 0x4, LSL
	0x03E2B68C ADD X0, X8, 0x138
	0x03E2B690 LDP X8, X2, [X0]
	0x03E2B694 MOV X0, X20
	0x03E2B698 MOV W1, W22
	0x03E2B69C BLR X8
	0x03E2B6A0 MOV X20, X0
	0x03E2B6A4 MOV X0, X19
	0x03E2B6A8 BL 0x3E2584C
	0x03E2B6AC CBZ X0, 0x3E2B7E0
	0x03E2B6B0 MOV X1, X31
	0x03E2B6B4 BL 0x3CCF6DC
	0x03E2B6B8 CBZ X0, 0x3E2B7E0
	0x03E2B6BC LDR X8, [X0]
	0x03E2B6C0 LDR X1, [X24]
	0x03E2B6C4 MOV X21, X0
	0x03E2B6C8 SUB W20, W20, 0x1
	0x03E2B6CC LDRH W9, [X8 + 0x12E]
	0x03E2B6D0 SUB W22, W22, 0x1
	0x03E2B6D4 CBZ X9, 0x3E2B6F8
	0x03E2B6D8 LDR X10, [X8 + 0xB0]
	0x03E2B6DC ADD X10, X10, 0x8
	0x03E2B6E0 LDUR X11, [X10 - 0x8]
	0x03E2B6E4 CMP X11, X1
	0x03E2B6E8 B.EQ 0x3E2B708
	0x03E2B6EC SUBS X9, X9, 0x1
	0x03E2B6F0 ADD X10, X10, 0x10
	0x03E2B6F4 B.NE 0x3E2B6E0
	0x03E2B6F8 MOV X0, X21
	0x03E2B6FC MOV W2, W31
	0x03E2B700 BL 0x1C5C788
	0x03E2B704 B 0x3E2B714
	0x03E2B708 LDRSW X9, [X10]
	0x03E2B70C ADD X8, X8, X9, 0x4, LSL
	0x03E2B710 ADD X0, X8, 0x138
	0x03E2B714 LDP X8, X2, [X0]
	0x03E2B718 MOV X0, X21
	0x03E2B71C MOV W1, W22
	0x03E2B720 BLR X8
	0x03E2B724 MOV X21, X0
	0x03E2B728 CMP W20, W21
	0x03E2B72C B.LE 0x3E2B7C4
	0x03E2B730 MOV X0, X19
	0x03E2B734 BL 0x3E2584C
	0x03E2B738 CBZ X0, 0x3E2B7E0
	0x03E2B73C MOV X1, X31
	0x03E2B740 BL 0x3CCF680
	0x03E2B744 CBZ X0, 0x3E2B7E0
	0x03E2B748 LDR X8, [X0]
	0x03E2B74C LDR X1, [X23]
	0x03E2B750 MOV X22, X0
	0x03E2B754 LDRH W9, [X8 + 0x12E]
	0x03E2B758 CBZ X9, 0x3E2B77C
	0x03E2B75C LDR X10, [X8 + 0xB0]
	0x03E2B760 ADD X10, X10, 0x8
	0x03E2B764 LDUR X11, [X10 - 0x8]
	0x03E2B768 CMP X11, X1
	0x03E2B76C B.EQ 0x3E2B78C
	0x03E2B770 SUBS X9, X9, 0x1
	0x03E2B774 ADD X10, X10, 0x10
	0x03E2B778 B.NE 0x3E2B764
	0x03E2B77C MOV X0, X22
	0x03E2B780 MOV W2, W31
	0x03E2B784 BL 0x1C5C788
	0x03E2B788 B 0x3E2B798
	0x03E2B78C LDRSW X9, [X10]
	0x03E2B790 ADD X8, X8, X9, 0x4, LSL
	0x03E2B794 ADD X0, X8, 0x138
	0x03E2B798 LDP X8, X2, [X0]
	0x03E2B79C MOV X0, X22
	0x03E2B7A0 MOV W1, W21
	0x03E2B7A4 BLR X8
	0x03E2B7A8 FCMP S0, S8
	0x03E2B7AC B.GE 0x3E2B7C0
	0x03E2B7B0 ADD W21, W21, 0x1
	0x03E2B7B4 CMP W21, W20
	0x03E2B7B8 B.NE 0x3E2B730
	0x03E2B7BC B 0x3E2B7C4
	0x03E2B7C0 MOV W20, W21
	0x03E2B7C4 MOV W0, W20
	0x03E2B7C8 LDP X20, X19, [X31 + 0x30]
	0x03E2B7CC LDP X22, X21, [X31 + 0x20]
	0x03E2B7D0 LDP X24, X23, [X31 + 0x10]
	0x03E2B7D4 LDR X30, [X31 + 0x8]
	0x03E2B7D8 LDR V8, [X31], #0x40
	0x03E2B7DC RET
	0x03E2B7E0 BL 0x1C16F20
	0x03E2B7E4 STR D8, [X31 - 0x40]!
	0x03E2B7E8 STP X30, X23, [X31 + 0x10]
	0x03E2B7EC STP X22, X21, [X31 + 0x20]
	0x03E2B7F0 STP X20, X19, [X31 + 0x30]
	0x03E2B7F4 ADRP X22, 0x5BD000
	0x03E2B7F8 LDRB W8, [X22 + 0x6ED]
	0x03E2B7FC MOV W21, W2
	0x03E2B800 MOV W20, W1
	0x03E2B804 MOV X19, X0
	0x03E2B808 TBNZ X8, 0x0, 0x3E2B838
	0x03E2B80C ADRP X0, 0x33F000
	0x03E2B810 LDR X0, [X0 + 0xFE0]
	0x03E2B814 BL 0x1C16CF4
	0x03E2B818 ADRP X0, 0x33F000
	0x03E2B81C LDR X0, [X0 + 0xFD8]
	0x03E2B820 BL 0x1C16CF4
	0x03E2B824 ADRP X0, 0x33F000
	0x03E2B828 LDR X0, [X0 + 0xFB8]
	0x03E2B82C BL 0x1C16CF4
	0x03E2B830 MOVZ W8, 0x1
	0x03E2B834 STRB W8, [X22 + 0x6ED]
	0x03E2B838 MOV X0, X19
	0x03E2B83C BL 0x3E2584C
	0x03E2B840 CBZ X0, 0x3E2BA94
	0x03E2B844 MOV X1, X31
	0x03E2B848 BL 0x3CCEAB4
	0x03E2B84C CMP W0, W20
	0x03E2B850 B.LE 0x3E2B9B0
	0x03E2B854 MOV X0, X19
	0x03E2B858 BL 0x3E2584C
	0x03E2B85C CBZ X0, 0x3E2BA94
	0x03E2B860 MOV X1, X31
	0x03E2B864 BL 0x3CCF680
	0x03E2B868 CBZ X0, 0x3E2BA94
	0x03E2B86C ADRP X23, 0x33F000
	0x03E2B870 LDR X8, [X0]
	0x03E2B874 LDR X23, [X23 + 0xFE0]
	0x03E2B878 MOV X22, X0
	0x03E2B87C LDRH W9, [X8 + 0x12E]
	0x03E2B880 LDR X1, [X23]
	0x03E2B884 CBZ X9, 0x3E2B8A8
	0x03E2B888 LDR X10, [X8 + 0xB0]
	0x03E2B88C ADD X10, X10, 0x8
	0x03E2B890 LDUR X11, [X10 - 0x8]
	0x03E2B894 CMP X11, X1
	0x03E2B898 B.EQ 0x3E2B8B8
	0x03E2B89C SUBS X9, X9, 0x1
	0x03E2B8A0 ADD X10, X10, 0x10
	0x03E2B8A4 B.NE 0x3E2B890
	0x03E2B8A8 MOV X0, X22
	0x03E2B8AC MOV W2, W31
	0x03E2B8B0 BL 0x1C5C788
	0x03E2B8B4 B 0x3E2B8C4
	0x03E2B8B8 LDRSW X9, [X10]
	0x03E2B8BC ADD X8, X8, X9, 0x4, LSL
	0x03E2B8C0 ADD X0, X8, 0x138
	0x03E2B8C4 LDP X8, X2, [X0]
	0x03E2B8C8 MOV X0, X22
	0x03E2B8CC MOV W1, W20
	0x03E2B8D0 BLR X8
	0x03E2B8D4 MOV X0, X19
	0x03E2B8D8 MOV V8.16B, V0.16B
	0x03E2B8DC BL 0x3E2584C
	0x03E2B8E0 MOV W1, W20
	0x03E2B8E4 MOV X2, X0
	0x03E2B8E8 BL 0x3E2B37C
	0x03E2B8EC MOV W22, W0
	0x03E2B8F0 MOV X0, X19
	0x03E2B8F4 BL 0x3E2584C
	0x03E2B8F8 CBZ X0, 0x3E2BA94
	0x03E2B8FC MOV X1, X31
	0x03E2B900 BL 0x3CCF77C
	0x03E2B904 ADD W22, W22, 0x1
	0x03E2B908 CMP W22, W0
	0x03E2B90C B.GE 0x3E2B9AC
	0x03E2B910 MOV X0, X19
	0x03E2B914 BL 0x3E2584C
	0x03E2B918 ADRP X8, 0x33F000
	0x03E2B91C LDR X8, [X8 + 0xFB8]
	0x03E2B920 MOV X20, X0
	0x03E2B924 LDR X8, [X8]
	0x03E2B928 LDR W9, [X8 + 0xE0]
	0x03E2B92C CBNZ W9, 0x3E2B938
	0x03E2B930 MOV X0, X8
	0x03E2B934 BL 0x1C16DFC
	0x03E2B938 MOV X0, X20
	0x03E2B93C MOV W1, W22
	0x03E2B940 BL 0x3E29E5C
	0x03E2B944 MOV W20, W0
	0x03E2B948 MOV X0, X19
	0x03E2B94C BL 0x3E2584C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x5BE000
	010 Move W8, [X21+1766]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x340000
	018 Move X0, [X0+4024]
	019 Call 0x1C17CF4
	020 Move X0, 0x2C9000
	021 Move X0, [X0+2440]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1766], W8
	025 Compare X20, 0
	026 JumpIfEqual {254}
	027 Move X0, X20
	028 Move X1, X31
	029 Call Event.get_modifiers, X0
	030 Move W21, W0
	031 Move X0, X31
	032 Call SystemInfo.get_operatingSystemFamily
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move W8, 2
	035 Move W9, 8
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 And W23, W8, W21
	038 And W10, W21, 4
	039 Or W8, W8, 4
	040 NotImplemented "Instruction CSET not yet implemented."
	041 And W11, W21, 1
	042 NotImplemented "Instruction CSET not yet implemented."
	043 Or W9, W9, W10
	044 And W31, W8, W21
	045 Move X0, X20
	046 Move X1, X31
	047 Or W22, W11, W9
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Call Event.get_keyCode, X0
	050 NotImplemented "Instruction CMP not yet implemented."
	051 NotImplemented "Instruction CMP not yet implemented."
	052 Subtract W8, W0, 271
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X9, -53026816
	055 Add X9, X9, 1536
	056 NotImplemented "Instruction ADR not yet implemented."
	057 Move W11, [X9]
	058 Add X10, X10, X11
	059 CallNoReturn X10
	060 And W1, W21, 1
	061 Move W2, 1
	062 Move X0, X19
	063 Call InputField.MoveUp, X0, X1, X2
	064 NotImplemented "Instruction CMP not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move TEMP, X22
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {176}
	071 Move X8, [X19+384]
	072 Compare X8, 0
	073 JumpIfEqual {254}
	074 Move W9, [X8+16]
	075 Move W0, W31
	076 NotImplemented "Instruction BIC not yet implemented."
	077 Move [X19+404], W9
	078 Move W8, [X8+16]
	079 And W8, W8, W8
	080 Move [X19+408], W8
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move TEMP, X22
	084 And TEMP, TEMP, 1
	085 Compare TEMP, 1
	086 JumpIfEqual {176}
	087 Move X8, 0x340000
	088 Move X8, [X8+4024]
	089 Move X0, [X8]
	090 Move W8, [X0+224]
	091 Compare W8, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Call InputField.get_clipboard
	095 Move X8, [X19]
	096 Move X1, X0
	097 Move X0, X19
	098 Move X9, [X8+1368]
	099 Move X2, [X8+1376]
	100 NotImplemented "Instruction BLR not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W8, [X19+296]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move W0, 1
	106 Move W0, 1
	107 Move [X19+512], W0
	108 Move TEMP, X22
	109 And TEMP, TEMP, 1
	110 Compare TEMP, 1
	111 JumpIfNotEqual {141}
	112 Move X0, X19
	113 Call InputField.Backspace, X0
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X0, X19
	117 Call InputField.ForwardSpace, X0
	118 And W1, W21, 1
	119 Move W2, 1
	120 Move X0, X19
	121 Call InputField.MoveDown, X0, X1, X2
	122 NotImplemented "Instruction CMP not yet implemented."
	123 And W1, W21, 1
	124 NotImplemented "Instruction CSET not yet implemented."
	125 Move X0, X19
	126 Call InputField.MoveRight, X0, X1, X2
	127 NotImplemented "Instruction CMP not yet implemented."
	128 And W1, W21, 1
	129 NotImplemented "Instruction CSET not yet implemented."
	130 Move X0, X19
	131 Call InputField.MoveLeft, X0, X1, X2
	132 Move TEMP, X22
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {141}
	136 Or W8, W25, W24
	137 Move TEMP, X8
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {87}
	141 Move W8, [X19+284]
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Move X8, 0x340000
	144 Move X8, [X8+4024]
	145 Move X0, [X8]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 Move X8, 0x2C9000
	151 Move X8, [X8+2440]
	152 Move X0, [X8]
	153 Move X0, X19
	154 Call InputField.GetSelectedString, X0
	155 Move X8, 0x340000
	156 Move X8, [X8+4024]
	157 Move X19, X0
	158 Move X8, [X8]
	159 Move W9, [X8+224]
	160 Compare W9, 0
	161 JumpIfNotEqual {164}
	162 Move X0, X8
	163 Call 0x1C17DFC
	164 Move X0, X19
	165 Call InputField.set_clipboard, X0
	166 And W1, W21, 1
	167 Move X0, X19
	168 Call InputField.MoveTextStart, X0, X1
	169 And W1, W21, 1
	170 Move X0, X19
	171 Call InputField.MoveTextEnd, X0, X1
	172 Move TEMP, X22
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {223}
	176 Move X0, X20
	177 Move X1, X31
	178 Call Event.get_character, X0
	179 Move W8, [X19+296]
	180 Move W20, W0
	181 Subtract W8, W8, 1
	182 NotImplemented "Instruction CMP not yet implemented."
	183 And W8, W0, 0xFFFF
	184 NotImplemented "Instruction CMP not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 Subtract W9, W8, 9
	187 NotImplemented "Instruction CMP not yet implemented."
	188 Move W0, W31
	189 NotImplemented "Instruction CMP not yet implemented."
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move W20, 10
	192 Move X0, X19
	193 Move W1, W20
	194 Call InputField.IsValidChar, X0, X1
	195 Move TEMP, X0
	196 And TEMP, TEMP, 1
	197 Compare TEMP, 1
	198 JumpIfNotEqual {205}
	199 Move X8, [X19]
	200 Move X0, X19
	201 Move W1, W20
	202 Move X9, [X8+1384]
	203 Move X2, [X8+1392]
	204 NotImplemented "Instruction BLR not yet implemented."
	205 And W31, W20, 0xFFFF
	206 Call InputField.get_compositionString, X0
	207 Compare X0, 0
	208 JumpIfEqual {254}
	209 Move W8, [X0+16]
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, X19
	212 Call InputField.UpdateLabel, X0
	213 Move W0, W31
	214 Move X20, [X31+48]
	215 Move X19, [X31+56]
	216 Move X22, [X31+32]
	217 Move X21, [X31+40]
	218 Move X24, [X31+16]
	219 Move X23, [X31+24]
	220 Move X30, [X31+64]
	221 Move X25, [X31+72]
	222 Return X0
	223 Move W8, [X19+284]
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Move X8, 0x340000
	226 Move X8, [X8+4024]
	227 Move X0, [X8]
	228 Move W8, [X0+224]
	229 Compare W8, 0
	230 JumpIfNotEqual {232}
	231 Call 0x1C17DFC
	232 Move X8, 0x2C9000
	233 Move X8, [X8+2440]
	234 Move X20, [X8]
	235 Move X0, X19
	236 Call InputField.GetSelectedString, X0
	237 Move X8, 0x340000
	238 Move X8, [X8+4024]
	239 Move X20, X0
	240 Move X8, [X8]
	241 Move W9, [X8+224]
	242 Compare W9, 0
	243 JumpIfNotEqual {246}
	244 Move X0, X8
	245 Call 0x1C17DFC
	246 Move X0, X20
	247 Call InputField.set_clipboard, X0
	248 Move X0, X19
	249 Call InputField.Delete, X0
	250 Move X0, X19
	251 Call InputField.UpdateTouchKeyboardFromEditChanges, X0
	252 Move X0, X19
	253 Call InputField.SendOnValueChanged, X0
	254 Call 0x1C17F20

Method: System.Boolean IsValidChar(System.Char c)

Disassembly:
	0x03E2C00C BL 0x3E2714C
	0x03E2C010 MOV W21, W0
	0x03E2C014 MOV X0, X19
	0x03E2C018 BL 0x3E27128
	0x03E2C01C ADRP X8, 0x2C7000
	0x03E2C020 LDR X8, [X8 + 0x5A8]
	0x03E2C024 MOV W22, W0
	0x03E2C028 LDR X8, [X8]
	0x03E2C02C LDR W9, [X8 + 0xE0]
	0x03E2C030 CBNZ W9, 0x3E2C03C
	0x03E2C034 MOV X0, X8
	0x03E2C038 BL 0x1C16DFC
	0x03E2C03C MOV W0, W21
	0x03E2C040 MOV W1, W22
	0x03E2C044 MOV X2, X31
	0x03E2C048 BL 0x337EE94
	0x03E2C04C LDR X22, [X19 + 0x180]
	0x03E2C050 MOV W21, W0
	0x03E2C054 MOV X0, X19
	0x03E2C058 BL 0x3E2714C
	0x03E2C05C MOV W23, W0
	0x03E2C060 MOV X0, X19
	0x03E2C064 BL 0x3E27128
	0x03E2C068 CMP W23, W0
	0x03E2C06C B.EQ 0x3E2C154
	0x03E2C070 MOV X0, X19
	0x03E2C074 BL 0x3E26F3C
	0x03E2C078 MOV W23, W0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 And W9, W1, 0xFFFF
	004 Move W19, W1
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W8, W31
	007 Compare W9, 0
	008 JumpIfEqual {26}
	009 NotImplemented "Instruction CMP not yet implemented."
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move X0, [X0+264]
	013 Compare X0, 0
	014 JumpIfEqual {30}
	015 Move X1, X31
	016 Call Text.get_font, X0
	017 Compare X0, 0
	018 JumpIfEqual {30}
	019 Move W1, W19
	020 Move X2, X31
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call Font.HasCharacter, X0, X1
	024 Return X0
	025 Move W8, 1
	026 Move W0, W8
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Return X0
	030 Call 0x1C17F20

Method: System.Void ProcessEvent(UnityEngine.Event e)

Disassembly:
	0x03E2C07C MOV X0, X19

ISIL:
	001 Call InputField.KeyPressed, X0, X1
	002 Return 

Method: System.Void OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03E2C080 BL 0x3E26F98
	0x03E2C084 LDR X22, [X19 + 0x180]
	0x03E2C088 CMP W23, W0
	0x03E2C08C B.GE 0x3E2C0E0
	0x03E2C090 MOV X0, X19
	0x03E2C094 BL 0x3E26F3C
	0x03E2C098 CBZ X22, 0x3E2C1D4
	0x03E2C09C MOV W2, W0
	0x03E2C0A0 MOV X0, X22
	0x03E2C0A4 MOV W1, W31
	0x03E2C0A8 MOV X3, X31
	0x03E2C0AC BL 0x3228DE4
	0x03E2C0B0 LDR X23, [X19 + 0x180]
	0x03E2C0B4 MOV X22, X0
	0x03E2C0B8 MOV X0, X19
	0x03E2C0BC BL 0x3E26F98
	0x03E2C0C0 LDR X8, [X19 + 0x180]
	0x03E2C0C4 CBZ X8, 0x3E2C1D4
	0x03E2C0C8 LDR W25, [X8 + 0x10]
	0x03E2C0CC MOV W24, W0
	0x03E2C0D0 MOV X0, X19
	0x03E2C0D4 BL 0x3E26F98
	0x03E2C0D8 CBNZ X23, 0x3E2C12C
	0x03E2C0DC B 0x3E2C1D4
	0x03E2C0E0 MOV X0, X19
	0x03E2C0E4 BL 0x3E26F98
	0x03E2C0E8 CBZ X22, 0x3E2C1D4
	0x03E2C0EC MOV W2, W0
	0x03E2C0F0 MOV X0, X22
	0x03E2C0F4 MOV W1, W31
	0x03E2C0F8 MOV X3, X31
	0x03E2C0FC BL 0x3228DE4
	0x03E2C100 LDR X23, [X19 + 0x180]
	0x03E2C104 MOV X22, X0
	0x03E2C108 MOV X0, X19
	0x03E2C10C BL 0x3E26F3C
	0x03E2C110 LDR X8, [X19 + 0x180]
	0x03E2C114 CBZ X8, 0x3E2C1D4
	0x03E2C118 LDR W25, [X8 + 0x10]
	0x03E2C11C MOV W24, W0
	0x03E2C120 MOV X0, X19
	0x03E2C124 BL 0x3E26F3C
	0x03E2C128 CBZ X23, 0x3E2C1D4
	0x03E2C12C SUB W2, W25, W0
	0x03E2C130 MOV X0, X23
	0x03E2C134 MOV W1, W24
	0x03E2C138 MOV X3, X31
	0x03E2C13C BL 0x3228DE4
	0x03E2C140 MOV X1, X0
	0x03E2C144 MOV X0, X22
	0x03E2C148 MOV X2, X31
	0x03E2C14C BL 0x321B938
	0x03E2C150 MOV X22, X0
	0x03E2C154 LDR X8, [X19 + 0x150]
	0x03E2C158 CBZ X8, 0x3E2C17C
	0x03E2C15C LDR X9, [X8 + 0x18]
	0x03E2C160 LDR X0, [X8 + 0x40]
	0x03E2C164 LDR X4, [X8 + 0x28]
	0x03E2C168 MOV X1, X22
	0x03E2C16C MOV W2, W21
	0x03E2C170 MOV W3, W20
	0x03E2C174 BLR X9
	0x03E2C178 B 0x3E2C198
	0x03E2C17C LDR W8, [X19 + 0x130]
	0x03E2C180 CBZ W8, 0x3E2C19C
	0x03E2C184 MOV X0, X19
	0x03E2C188 MOV X1, X22
	0x03E2C18C MOV W2, W21
	0x03E2C190 MOV W3, W20
	0x03E2C194 BL 0x3E28F04
	0x03E2C198 MOV W20, W0
	0x03E2C19C ANDS W31, W20, 0xFFFF
	0x03E2C1A0 B.EQ 0x3E2C1C0
	0x03E2C1A4 MOV X0, X19
	0x03E2C1A8 MOV W1, W20
	0x03E2C1AC LDP X20, X19, [X31 + 0x30]
	0x03E2C1B0 LDP X22, X21, [X31 + 0x20]
	0x03E2C1B4 LDP X24, X23, [X31 + 0x10]
	0x03E2C1B8 LDP X30, X25, [X31], #0x40
	0x03E2C1BC B 0x3E2BD14
	0x03E2C1C0 LDP X20, X19, [X31 + 0x30]
	0x03E2C1C4 LDP X22, X21, [X31 + 0x20]
	0x03E2C1C8 LDP X24, X23, [X31 + 0x10]
	0x03E2C1CC LDP X30, X25, [X31], #0x40
	0x03E2C1D0 RET
	0x03E2C1D4 BL 0x1C16F20
	0x03E2C1D8 STR D10, [X31 - 0x70]!
	0x03E2C1DC STP D9, D8, [X31 + 0x10]
	0x03E2C1E0 STP X30, X27, [X31 + 0x20]
	0x03E2C1E4 STP X26, X25, [X31 + 0x30]
	0x03E2C1E8 STP X24, X23, [X31 + 0x40]
	0x03E2C1EC STP X22, X21, [X31 + 0x50]
	0x03E2C1F0 STP X20, X19, [X31 + 0x60]
	0x03E2C1F4 ADRP X20, 0x5BC000
	0x03E2C1F8 LDRB W8, [X20 + 0x6F6]
	0x03E2C1FC MOV W22, W1
	0x03E2C200 MOV X19, X0
	0x03E2C204 TBNZ X8, 0x0, 0x3E2C240
	0x03E2C208 ADRP X0, 0x33E000
	0x03E2C20C LDR X0, [X0 + 0xFE8]
	0x03E2C210 BL 0x1C16CF4
	0x03E2C214 ADRP X0, 0x33E000
	0x03E2C218 LDR X0, [X0 + 0xFE0]
	0x03E2C21C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5BD000
	007 Move W8, [X21+1767]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x32E000
	015 Move X0, [X0+392]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1767], W8
	019 Move W8, [X20+464]
	020 Compare W8, 0
	021 JumpIfEqual {128}
	022 Move X0, [X20+536]
	023 Move X1, X31
	024 Call Event.PopEvent, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {116}
	029 Move X21, 0x32E000
	030 Move X21, [X21+392]
	031 Move W22, W31
	032 Move X0, [X20+536]
	033 Compare X0, 0
	034 JumpIfEqual {134}
	035 Move X1, X31
	036 Call Event.get_rawType, X0
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move W8, [X20+529]
	039 Compare W8, 0
	040 JumpIfEqual {60}
	041 Call InputField.get_compositionString, X0
	042 Compare X0, 0
	043 JumpIfEqual {134}
	044 Move W8, [X0+16]
	045 Compare W8, 0
	046 JumpIfNotEqual {60}
	047 Move X0, [X20+536]
	048 Compare X0, 0
	049 JumpIfEqual {134}
	050 Move X1, X31
	051 Call Event.get_character, X0
	052 And W31, W0, 0xFFFF
	053 Move X0, [X20+536]
	054 Compare X0, 0
	055 JumpIfEqual {134}
	056 Move X1, X31
	057 Call Event.get_modifiers, X0
	058 Compare W0, 0
	059 JumpIfEqual {102}
	060 Move X1, [X20+536]
	061 Move X0, X20
	062 Call InputField.KeyPressed, X0, X1
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move W8, [X20+512]
	065 Compare W8, 0
	066 JumpIfNotEqual {69}
	067 Move X0, X20
	068 Call InputField.SendOnSubmit, X0
	069 Move X0, X20
	070 Call InputField.DeactivateInputField, X0
	071 Move X0, X20
	072 Call InputField.UpdateLabel, X0
	073 Move W22, 1
	074 Move X0, [X20+536]
	075 Compare X0, 0
	076 JumpIfEqual {134}
	077 Move X1, X31
	078 Call Event.get_type, X0
	079 Subtract W8, W0, 13
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X0, [X20+536]
	082 Compare X0, 0
	083 JumpIfEqual {134}
	084 Move X1, X31
	085 Call Event.get_commandName, X0
	086 Move X1, [X21]
	087 Move X2, X31
	088 Call String.op_Equality, X0, X1
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {103}
	093 Move X8, [X20+384]
	094 Compare X8, 0
	095 JumpIfEqual {134}
	096 Move W9, [X8+16]
	097 NotImplemented "Instruction BIC not yet implemented."
	098 Move [X20+404], W9
	099 Move W8, [X8+16]
	100 And W8, W8, W8
	101 Move [X20+408], W8
	102 Move W22, 1
	103 Move X0, [X20+536]
	104 Move X1, X31
	105 Call Event.PopEvent, X0
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {32}
	110 Move TEMP, X22
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {116}
	114 Move X0, X20
	115 Call InputField.UpdateLabel, X0
	116 Compare X19, 0
	117 JumpIfEqual {134}
	118 Move X8, [X19]
	119 Move X0, X19
	120 Move X20, [X31+32]
	121 Move X19, [X31+40]
	122 Move X22, [X31+16]
	123 Move X21, [X31+24]
	124 Move X2, [X8+392]
	125 Move X1, [X8+400]
	126 Move X30, [X31+48]
	127 CallNoReturn X2
	128 Move X20, [X31+32]
	129 Move X19, [X31+40]
	130 Move X22, [X31+16]
	131 Move X21, [X31+24]
	132 Move X30, [X31+48]
	133 Return 
	134 Call 0x1C17F20

Method: System.String GetSelectedString()

Disassembly:
	0x03E2BAF8 LDR W10, [X9 + 0x10]
	0x03E2BAFC CMP W10, W8
	0x03E2BB00 B.GE 0x3E2BB08
	0x03E2BB04 STR W10, [X19 + 0x198]
	0x03E2BB08 STR W8, [X19 + 0x194]
	0x03E2BB0C LDR W9, [X9 + 0x10]
	0x03E2BB10 CMP W9, W8
	0x03E2BB14 CSEL W8, W9, W8, LT
	0x03E2BB18 STR W8, [X19 + 0x194]
	0x03E2BB1C B 0x3E2BB28
	0x03E2BB20 STR W31, [X19 + 0x198]
	0x03E2BB24 STR W31, [X19 + 0x194]
	0x03E2BB28 LDR W8, [X19 + 0x128]
	0x03E2BB2C SUB W8, W8, 0x1
	0x03E2BB30 CMP W8, 0x2
	0x03E2BB34 B.CS 0x3E2BB54
	0x03E2BB38 MOV X0, X19
	0x03E2BB3C BL 0x3E26F98
	0x03E2BB40 MOV W1, W0
	0x03E2BB44 AND W2, W21, 0x1
	0x03E2BB48 MOV X0, X19
	0x03E2BB4C BL 0x3E2B7E4
	0x03E2BB50 B 0x3E2BB60
	0x03E2BB54 LDR X8, [X19 + 0x180]
	0x03E2BB58 CBZ X8, 0x3E2BBB8
	0x03E2BB5C LDR W0, [X8 + 0x10]
	0x03E2BB60 STR W0, [X19 + 0x198]
	0x03E2BB64 TBNZ X0, 0x1F, 0x3E2BB9C
	0x03E2BB68 LDR X8, [X19 + 0x180]
	0x03E2BB6C CBZ X8, 0x3E2BBB8
	0x03E2BB70 LDR W9, [X8 + 0x10]
	0x03E2BB74 CMP W9, W0
	0x03E2BB78 B.GE 0x3E2BB80
	0x03E2BB7C STR W9, [X19 + 0x198]
	0x03E2BB80 TBNZ X20, 0x0, 0x3E2BBA8
	0x03E2BB84 STR W0, [X19 + 0x194]
	0x03E2BB88 LDR W8, [X8 + 0x10]
	0x03E2BB8C CMP W8, W0
	0x03E2BB90 CSEL W8, W8, W0, LT
	0x03E2BB94 STR W8, [X19 + 0x194]
	0x03E2BB98 B 0x3E2BBA8
	0x03E2BB9C STR W31, [X19 + 0x198]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5BE000
	005 Move W8, [X20+1768]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2C9000
	012 Move X0, [X0+2440]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1768], W8
	016 Move X0, X19
	017 Call InputField.get_caretPositionInternal, X0
	018 Move W20, W0
	019 Move X0, X19
	020 Call InputField.get_caretSelectPositionInternal, X0
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, 0x2C9000
	023 Move X8, [X8+2440]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8]
	027 Move X30, [X31+32]
	028 Return X0
	029 Move X0, X19
	030 Call InputField.get_caretPositionInternal, X0
	031 Move W20, W0
	032 Move X0, X19
	033 Call InputField.get_caretSelectPositionInternal, X0
	034 Move X8, [X19+384]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSEL not yet implemented."
	037 Compare X8, 0
	038 JumpIfEqual {49}
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Subtract W2, W9, W1
	044 Move X0, X8
	045 Move X3, X31
	046 Move X30, [X31+32]
	047 Call String.Substring, X0, X1, X2
	048 Return X0
	049 Call 0x1C17F20

Method: System.Int32 FindtNextWordBegin()

Disassembly:
	0x03E2C220 ADRP X0, 0x33E000
	0x03E2C224 LDR X0, [X0 + 0xFD8]
	0x03E2C228 BL 0x1C16CF4
	0x03E2C22C ADRP X0, 0x33E000
	0x03E2C230 LDR X0, [X0 + 0xFB8]
	0x03E2C234 BL 0x1C16CF4
	0x03E2C238 MOVZ W8, 0x1
	0x03E2C23C STRB W8, [X20 + 0x6F6]
	0x03E2C240 MOV X0, X19
	0x03E2C244 BL 0x3E2584C
	0x03E2C248 CBZ X0, 0x3E2C634
	0x03E2C24C MOV X1, X31
	0x03E2C250 BL 0x3CCF77C
	0x03E2C254 CMP W0, 0x1
	0x03E2C258 B.LT 0x3E2CCF4
	0x03E2C25C MOV X0, X19
	0x03E2C260 BL 0x3E2584C
	0x03E2C264 CBZ X0, 0x3E2C634
	0x03E2C268 MOV X1, X31
	0x03E2C26C BL 0x3CCF074
	0x03E2C270 LDR W20, [X19 + 0x128]
	0x03E2C274 MOV X0, X19
	0x03E2C278 MOV V9.16B, V2.16B
	0x03E2C27C MOV V8.16B, V3.16B
	0x03E2C280 BL 0x3E2584C
	0x03E2C284 CBZ X0, 0x3E2C634
	0x03E2C288 SUB W8, W20, 0x1
	0x03E2C28C CMP W8, 0x1
	0x03E2C290 B.HI 0x3E2C348
	0x03E2C294 MOV X1, X31
	0x03E2C298 BL 0x3CCF6DC
	0x03E2C29C MOV X20, X0
	0x03E2C2A0 MOV X0, X19
	0x03E2C2A4 BL 0x3E2584C
	0x03E2C2A8 MOV W1, W22
	0x03E2C2AC MOV X2, X0
	0x03E2C2B0 BL 0x3E2B37C
	0x03E2C2B4 LDR W8, [X19 + 0x1E8]
	0x03E2C2B8 MOV W21, W0
	0x03E2C2BC CMP W8, W22
	0x03E2C2C0 B.GE 0x3E2C390
	0x03E2C2C4 MOV X0, X19
	0x03E2C2C8 BL 0x3E2584C
	0x03E2C2CC ADRP X23, 0x33E000
	0x03E2C2D0 LDR X23, [X23 + 0xFB8]
	0x03E2C2D4 MOV X22, X0
	0x03E2C2D8 LDR X8, [X23]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5BD000
	006 Move W8, [X20+1769]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x33F000
	013 Move X0, [X0+4024]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1769], W8
	017 Move X0, X19
	018 Call InputField.get_caretSelectPositionInternal, X0
	019 Move X20, [X19+384]
	020 Compare X20, 0
	021 JumpIfEqual {54}
	022 Move W8, W0
	023 Move W0, [X20+16]
	024 Add W8, W8, 1
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X21, 0x33F000
	027 Move X21, [X21+4024]
	028 Move X0, [X21]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X21]
	034 Move X8, [X0+184]
	035 Move X0, X19
	036 Move X21, [X8]
	037 Call InputField.get_caretSelectPositionInternal, X0
	038 Add W2, W0, 1
	039 Move X0, X20
	040 Move X1, X21
	041 Move X3, X31
	042 Call String.IndexOfAny, X0, X1, X2
	043 Add W31, W0, 1
	044 Add W0, W0, 1
	045 Move X8, [X19+384]
	046 Compare X8, 0
	047 JumpIfEqual {54}
	048 Move W0, [X8+16]
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Call 0x1C17F20

Method: System.Void MoveRight(System.Boolean shift, System.Boolean ctrl)

Disassembly:
	0x03E2BEC8 MOV X0, X31
	0x03E2BECC MOV X20, X1
	0x03E2BED0 BL 0x3C3CC00
	0x03E2BED4 TBZ X0, 0x0, 0x3E2BEE0
	0x03E2BED8 LDRB W8, [X19 + 0x210]
	0x03E2BEDC CBZ W8, 0x3E2BF50
	0x03E2BEE0 CBZ X20, 0x3E2BF64
	0x03E2BEE4 LDR W22, [X20 + 0x10]
	0x03E2BEE8 CMP W22, 0x1
	0x03E2BEEC B.LT 0x3E2BF50
	0x03E2BEF0 MOV W21, W31
	0x03E2BEF4 MOVZ W23, 0x1
	0x03E2BEF8 MOVZ W24, 0x2600
	0x03E2BEFC MOV X0, X20
	0x03E2BF00 MOV W1, W21
	0x03E2BF04 MOV X2, X31
	0x03E2BF08 BL 0x3222A1C
	0x03E2BF0C AND W8, W0, 0xFFFF
	0x03E2BF10 MOV W1, W0
	0x03E2BF14 CMP W8, 0x1F
	0x03E2BF18 B.HI 0x3E2BF30
	0x03E2BF1C CMP W8, 0xD
	0x03E2BF20 B.HI 0x3E2BF44
	0x03E2BF24 LSLV W8, W23, W8
	0x03E2BF28 ANDS W31, W8, W24, 0x0
	0x03E2BF2C B.EQ 0x3E2BF44
	0x03E2BF30 LDR X8, [X19]
	0x03E2BF34 MOV X0, X19
	0x03E2BF38 LDR X9, [X8 + 0x568]
	0x03E2BF3C LDR X2, [X8 + 0x570]
	0x03E2BF40 BLR X9
	0x03E2BF44 ADD W21, W21, 0x1
	0x03E2BF48 CMP W22, W21
	0x03E2BF4C B.NE 0x3E2BEFC
	0x03E2BF50 LDP X20, X19, [X31 + 0x30]
	0x03E2BF54 LDP X22, X21, [X31 + 0x20]
	0x03E2BF58 LDP X24, X23, [X31 + 0x10]
	0x03E2BF5C LDR X30, [X31], #0x40
	0x03E2BF60 RET
	0x03E2BF64 BL 0x1C16F20
	0x03E2BF68 STP X30, X25, [X31 - 0x40]!
	0x03E2BF6C STP X24, X23, [X31 + 0x10]
	0x03E2BF70 STP X22, X21, [X31 + 0x20]
	0x03E2BF74 STP X20, X19, [X31 + 0x30]
	0x03E2BF78 ADRP X22, 0x5BD000
	0x03E2BF7C ADRP X21, 0x2CA000
	0x03E2BF80 LDRB W8, [X22 + 0x6F2]
	0x03E2BF84 LDR X21, [X21 + 0x170]
	0x03E2BF88 MOV W20, W1
	0x03E2BF8C MOV X19, X0
	0x03E2BF90 TBNZ X8, 0x0, 0x3E2BFB4
	0x03E2BF94 ADRP X0, 0x2CA000
	0x03E2BF98 LDR X0, [X0 + 0x170]
	0x03E2BF9C BL 0x1C16CF4
	0x03E2BFA0 ADRP X0, 0x2C8000
	0x03E2BFA4 LDR X0, [X0 + 0x5A8]
	0x03E2BFA8 BL 0x1C16CF4
	0x03E2BFAC MOVZ W8, 0x1
	0x03E2BFB0 STRB W8, [X22 + 0x6F2]
	0x03E2BFB4 LDR X0, [X21]
	0x03E2BFB8 LDR W8, [X0 + 0xE0]
	0x03E2BFBC CBNZ W8, 0x3E2BFC4
	0x03E2BFC0 BL 0x1C16DFC
	0x03E2BFC4 MOV W0, W20
	0x03E2BFC8 MOV X1, X31
	0x03E2BFCC BL 0x331BBA4
	0x03E2BFD0 TBNZ X0, 0x0, 0x3E2C1C0
	0x03E2BFD4 LDRB W8, [X19 + 0x190]
	0x03E2BFD8 CBNZ W8, 0x3E2C1C0
	0x03E2BFDC LDR X8, [X19 + 0x180]
	0x03E2BFE0 CBZ X8, 0x3E2C1D4
	0x03E2BFE4 LDR W8, [X8 + 0x10]
	0x03E2BFE8 MOVZ W9, 0x3FFD
	0x03E2BFEC CMP W8, W9
	0x03E2BFF0 B.GT 0x3E2C1C0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W2
	007 Move W20, W1
	008 Move X19, X0
	009 Call InputField.get_caretPositionInternal, X0
	010 Move W22, W0
	011 Move X0, X19
	012 Call InputField.get_caretSelectPositionInternal, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, X19
	019 Call InputField.get_caretPositionInternal, X0
	020 Move W20, W0
	021 Move X0, X19
	022 Call InputField.get_caretSelectPositionInternal, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Move [X19+408], W8
	026 Move TEMP, X8
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {84}
	030 Move X9, [X19+384]
	031 Compare X9, 0
	032 JumpIfEqual {94}
	033 Move W10, [X9+16]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X19+408], W10
	036 Move [X19+404], W8
	037 Move W9, [X9+16]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move [X19+404], W8
	041 Move X0, X19
	042 Move TEMP, X21
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {67}
	046 Call InputField.FindtNextWordBegin, X0
	047 Move TEMP, X20
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {73}
	051 Add X8, X19, 404
	052 Move [X19+404], W0
	053 Move TEMP, X0
	054 And TEMP, TEMP, -2147483648
	055 Compare TEMP, -2147483648
	056 JumpIfEqual {86}
	057 Move X9, [X19+384]
	058 Compare X9, 0
	059 JumpIfEqual {94}
	060 Move W10, [X9+16]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X8], W10
	063 Move [X19+408], W0
	064 Move W8, [X9+16]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSEL not yet implemented."
	067 Call InputField.get_caretSelectPositionInternal, X0
	068 Add W0, W0, 1
	069 Move TEMP, X20
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {51}
	073 Move [X19+408], W0
	074 Move TEMP, X0
	075 And TEMP, TEMP, -2147483648
	076 Compare TEMP, -2147483648
	077 JumpIfEqual {87}
	078 Move X8, [X19+384]
	079 Compare X8, 0
	080 JumpIfEqual {94}
	081 Move W8, [X8+16]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move [X19+408], W8
	084 Move [X19+408], W31
	085 Move [X19+404], W31
	086 Move [X8], X31
	087 Move [X19+408], W31
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X30, [X31+48]
	093 Return 
	094 Call 0x1C17F20

Method: System.Int32 FindtPrevWordBegin()

Disassembly:
	0x03E2C2DC LDR W9, [X8 + 0xE0]
	0x03E2C2E0 CBNZ W9, 0x3E2C2EC
	0x03E2C2E4 MOV X0, X8
	0x03E2C2E8 BL 0x1C16DFC
	0x03E2C2EC MOV X0, X22
	0x03E2C2F0 MOV W1, W21
	0x03E2C2F4 BL 0x3E29E5C
	0x03E2C2F8 STR W0, [X19 + 0x1E8]
	0x03E2C2FC CBZ X20, 0x3E2C634
	0x03E2C300 ADRP X24, 0x33E000
	0x03E2C304 LDR X8, [X20]
	0x03E2C308 LDR X24, [X24 + 0xFD8]
	0x03E2C30C LDRH W9, [X8 + 0x12E]
	0x03E2C310 LDR X1, [X24]
	0x03E2C314 CBZ X9, 0x3E2C338
	0x03E2C318 LDR X10, [X8 + 0xB0]
	0x03E2C31C ADD X10, X10, 0x8
	0x03E2C320 LDUR X11, [X10 - 0x8]
	0x03E2C324 CMP X11, X1
	0x03E2C328 B.EQ 0x3E2C638
	0x03E2C32C SUBS X9, X9, 0x1
	0x03E2C330 ADD X10, X10, 0x10
	0x03E2C334 B.NE 0x3E2C320
	0x03E2C338 MOV X0, X20
	0x03E2C33C MOV W2, W31
	0x03E2C340 BL 0x1C5C788
	0x03E2C344 B 0x3E2C644
	0x03E2C348 MOV X1, X31
	0x03E2C34C BL 0x3CCF680
	0x03E2C350 LDR W21, [X19 + 0x1E8]
	0x03E2C354 MOV X20, X0
	0x03E2C358 MOV X0, X19
	0x03E2C35C BL 0x3E2584C
	0x03E2C360 CBZ X0, 0x3E2C634
	0x03E2C364 MOV X1, X31
	0x03E2C368 BL 0x3CCEAB4
	0x03E2C36C CMP W21, W0
	0x03E2C370 B.LE 0x3E2C43C
	0x03E2C374 MOV X0, X19
	0x03E2C378 BL 0x3E2584C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5BD000
	006 Move W8, [X20+1770]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x33F000
	013 Move X0, [X0+4024]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1770], W8
	017 Move X0, X19
	018 Call InputField.get_caretSelectPositionInternal, X0
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X21, 0x33F000
	021 Move X21, [X21+4024]
	022 Move X20, [X19+384]
	023 Move X0, [X21]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {29}
	027 Call 0x1C17DFC
	028 Move X0, [X21]
	029 Move X8, [X0+184]
	030 Move X0, X19
	031 Move X21, [X8]
	032 Call InputField.get_caretSelectPositionInternal, X0
	033 Compare X20, 0
	034 JumpIfEqual {47}
	035 Subtract W2, W0, 2
	036 Move X0, X20
	037 Move X1, X21
	038 Move X3, X31
	039 Call String.LastIndexOfAny, X0, X1, X2
	040 Add W0, W0, 1
	041 Move W0, W31
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 Return X0
	047 Call 0x1C17F20

Method: System.Void MoveLeft(System.Boolean shift, System.Boolean ctrl)

Disassembly:
	0x03E2BD9C B 0x3E2BE1C
	0x03E2BDA0 CBZ X0, 0x3E2BE28
	0x03E2BDA4 LDR W1, [X19 + 0x194]
	0x03E2BDA8 MOV X2, X20
	0x03E2BDAC MOV X3, X31
	0x03E2BDB0 BL 0x3227EBC
	0x03E2BDB4 STR X0, [X19 + 0x180]
	0x03E2BDB8 MOV X0, X19
	0x03E2BDBC BL 0x3E26F3C
	0x03E2BDC0 CBZ X20, 0x3E2BE28
	0x03E2BDC4 LDR W8, [X20 + 0x10]
	0x03E2BDC8 ADD X9, X19, 0x194
	0x03E2BDCC ADDS W8, W8, W0
	0x03E2BDD0 STR W8, [X9]
	0x03E2BDD4 B.MI 0x3E2BE08
	0x03E2BDD8 LDR X10, [X19 + 0x180]
	0x03E2BDDC CBZ X10, 0x3E2BE28
	0x03E2BDE0 LDR W11, [X10 + 0x10]
	0x03E2BDE4 CMP W11, W8
	0x03E2BDE8 B.GE 0x3E2BDF0
	0x03E2BDEC STR W11, [X9]
	0x03E2BDF0 STR W8, [X19 + 0x198]
	0x03E2BDF4 LDR W9, [X10 + 0x10]
	0x03E2BDF8 CMP W9, W8
	0x03E2BDFC CSEL W8, W9, W8, LT
	0x03E2BE00 STR W8, [X19 + 0x198]
	0x03E2BE04 B 0x3E2BE0C
	0x03E2BE08 STR X31, [X9]
	0x03E2BE0C MOV X0, X19
	0x03E2BE10 BL 0x3E2AD54
	0x03E2BE14 MOV X0, X19
	0x03E2BE18 BL 0x3E25DF4
	0x03E2BE1C LDP X20, X19, [X31 + 0x10]
	0x03E2BE20 LDR X30, [X31], #0x20
	0x03E2BE24 RET
	0x03E2BE28 BL 0x1C16F20
	0x03E2BE2C STP X30, X21, [X31 - 0x20]!
	0x03E2BE30 STP X20, X19, [X31 + 0x10]
	0x03E2BE34 ADRP X20, 0x5BD000
	0x03E2BE38 ADRP X21, 0x340000
	0x03E2BE3C LDRB W8, [X20 + 0x6F0]
	0x03E2BE40 LDR X21, [X21]
	0x03E2BE44 MOV X19, X0
	0x03E2BE48 TBNZ X8, 0x0, 0x3E2BE6C
	0x03E2BE4C ADRP X0, 0x32E000
	0x03E2BE50 LDR X0, [X0 + 0x48]
	0x03E2BE54 BL 0x1C16CF4
	0x03E2BE58 ADRP X0, 0x340000
	0x03E2BE5C LDR X0, [X0]
	0x03E2BE60 BL 0x1C16CF4
	0x03E2BE64 MOVZ W8, 0x1
	0x03E2BE68 STRB W8, [X20 + 0x6F0]
	0x03E2BE6C LDR X0, [X21]
	0x03E2BE70 MOV X1, X19
	0x03E2BE74 MOV X2, X31
	0x03E2BE78 BL 0x3E252BC
	0x03E2BE7C LDR X0, [X19 + 0x140]
	0x03E2BE80 CBZ X0, 0x3E2BEA0
	0x03E2BE84 ADRP X8, 0x32E000
	0x03E2BE88 LDR X8, [X8 + 0x48]
	0x03E2BE8C LDR X1, [X19 + 0x180]
	0x03E2BE90 LDP X20, X19, [X31 + 0x10]
	0x03E2BE94 LDR X2, [X8]
	0x03E2BE98 LDP X30, X21, [X31], #0x20
	0x03E2BE9C B 0x2729DBC
	0x03E2BEA0 LDP X20, X19, [X31 + 0x10]
	0x03E2BEA4 LDP X30, X21, [X31], #0x20
	0x03E2BEA8 RET
	0x03E2BEAC STR X30, [X31 - 0x40]!
	0x03E2BEB0 STP X24, X23, [X31 + 0x10]
	0x03E2BEB4 STP X22, X21, [X31 + 0x20]
	0x03E2BEB8 STP X20, X19, [X31 + 0x30]
	0x03E2BEBC LDRB W8, [X0 + 0x190]
	0x03E2BEC0 CBNZ W8, 0x3E2BF50
	0x03E2BEC4 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W2
	007 Move W20, W1
	008 Move X19, X0
	009 Call InputField.get_caretPositionInternal, X0
	010 Move W22, W0
	011 Move X0, X19
	012 Call InputField.get_caretSelectPositionInternal, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, X19
	019 Call InputField.get_caretPositionInternal, X0
	020 Move W20, W0
	021 Move X0, X19
	022 Call InputField.get_caretSelectPositionInternal, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Move [X19+408], W8
	026 Move TEMP, X8
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {84}
	030 Move X9, [X19+384]
	031 Compare X9, 0
	032 JumpIfEqual {94}
	033 Move W10, [X9+16]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X19+408], W10
	036 Move [X19+404], W8
	037 Move W9, [X9+16]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move [X19+404], W8
	041 Move X0, X19
	042 Move TEMP, X21
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {67}
	046 Call InputField.FindtPrevWordBegin, X0
	047 Move TEMP, X20
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {73}
	051 Add X8, X19, 404
	052 Move [X19+404], W0
	053 Move TEMP, X0
	054 And TEMP, TEMP, -2147483648
	055 Compare TEMP, -2147483648
	056 JumpIfEqual {86}
	057 Move X9, [X19+384]
	058 Compare X9, 0
	059 JumpIfEqual {94}
	060 Move W10, [X9+16]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X8], W10
	063 Move [X19+408], W0
	064 Move W8, [X9+16]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSEL not yet implemented."
	067 Call InputField.get_caretSelectPositionInternal, X0
	068 Subtract W0, W0, 1
	069 Move TEMP, X20
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {51}
	073 Move [X19+408], W0
	074 Move TEMP, X0
	075 And TEMP, TEMP, -2147483648
	076 Compare TEMP, -2147483648
	077 JumpIfEqual {87}
	078 Move X8, [X19+384]
	079 Compare X8, 0
	080 JumpIfEqual {94}
	081 Move W8, [X8+16]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move [X19+408], W8
	084 Move [X19+408], W31
	085 Move [X19+404], W31
	086 Move [X8], X31
	087 Move [X19+408], W31
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X30, [X31+48]
	093 Return 
	094 Call 0x1C17F20

Method: System.Int32 DetermineCharacterLine(System.Int32 charPos, UnityEngine.TextGenerator generator)

Disassembly:
	0x03E2C37C CBZ X0, 0x3E2C634
	0x03E2C380 MOV X1, X31
	0x03E2C384 BL 0x3CCEAB4
	0x03E2C388 STR W0, [X19 + 0x1E8]
	0x03E2C38C B 0x3E2C440
	0x03E2C390 LDR W23, [X19 + 0x1E4]
	0x03E2C394 CMP W23, W22
	0x03E2C398 B.LE 0x3E2C3D8
	0x03E2C39C MOV X0, X19
	0x03E2C3A0 BL 0x3E2584C
	0x03E2C3A4 ADRP X8, 0x33E000
	0x03E2C3A8 LDR X8, [X8 + 0xFB8]
	0x03E2C3AC MOV X22, X0
	0x03E2C3B0 LDR X8, [X8]
	0x03E2C3B4 LDR W9, [X8 + 0xE0]
	0x03E2C3B8 CBNZ W9, 0x3E2C3C4
	0x03E2C3BC MOV X0, X8
	0x03E2C3C0 BL 0x1C16DFC
	0x03E2C3C4 MOV X0, X22
	0x03E2C3C8 MOV W1, W21
	0x03E2C3CC BL 0x3E2CD80
	0x03E2C3D0 MOV W23, W0
	0x03E2C3D4 STR W0, [X19 + 0x1E4]
	0x03E2C3D8 MOV X0, X19
	0x03E2C3DC BL 0x3E2584C
	0x03E2C3E0 MOV W1, W23
	0x03E2C3E4 MOV X2, X0
	0x03E2C3E8 BL 0x3E2B37C
	0x03E2C3EC CBZ X20, 0x3E2C634
	0x03E2C3F0 ADRP X26, 0x33E000
	0x03E2C3F4 LDR X8, [X20]
	0x03E2C3F8 LDR X26, [X26 + 0xFD8]
	0x03E2C3FC MOV W21, W0
	0x03E2C400 LDRH W9, [X8 + 0x12E]
	0x03E2C404 LDR X1, [X26]
	0x03E2C408 CBZ X9, 0x3E2C42C
	0x03E2C40C LDR X10, [X8 + 0xB0]
	0x03E2C410 ADD X10, X10, 0x8
	0x03E2C414 LDUR X11, [X10 - 0x8]
	0x03E2C418 CMP X11, X1
	0x03E2C41C B.EQ 0x3E2C69C
	0x03E2C420 SUBS X9, X9, 0x1
	0x03E2C424 ADD X10, X10, 0x10
	0x03E2C428 B.NE 0x3E2C414
	0x03E2C42C MOV X0, X20
	0x03E2C430 MOV W2, W31
	0x03E2C434 BL 0x1C5C788
	0x03E2C438 B 0x3E2C6A8
	0x03E2C43C LDR W0, [X19 + 0x1E8]
	0x03E2C440 CMP W0, W22
	0x03E2C444 B.LT 0x3E2C458
	0x03E2C448 LDR W8, [X19 + 0x1E4]
	0x03E2C44C B.NE 0x3E2C56C
	0x03E2C450 CMP W8, 0x1
	0x03E2C454 B.LT 0x3E2C56C
	0x03E2C458 SUBS W21, W22, 0x1
	0x03E2C45C STR W22, [X19 + 0x1E8]
	0x03E2C460 STR W21, [X19 + 0x1E4]
	0x03E2C464 B.MI 0x3E2C55C
	0x03E2C468 CBZ X20, 0x3E2C634
	0x03E2C46C ADRP X22, 0x33E000
	0x03E2C470 LDR X22, [X22 + 0xFE0]
	0x03E2C474 FMOV S8, W31
	0x03E2C478 LDR X8, [X20]
	0x03E2C47C LDR X1, [X22]
	0x03E2C480 LDRH W9, [X8 + 0x12E]
	0x03E2C484 CBZ X9, 0x3E2C4A8
	0x03E2C488 LDR X10, [X8 + 0xB0]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x5BD000
	009 Move W8, [X21+1771]
	010 Move X19, X2
	011 Move W20, W1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x33F000
	017 Move X0, [X0+4056]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1771], W8
	021 Compare X19, 0
	022 JumpIfEqual {75}
	023 Move X24, 0x33F000
	024 Move X24, [X24+4056]
	025 Move W23, W31
	026 Move X0, X19
	027 Move X1, X31
	028 Move W21, W23
	029 Call TextGenerator.get_lineCount, X0
	030 Subtract W8, W0, 1
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X0, X19
	033 Move X1, X31
	034 Call TextGenerator.get_lines, X0
	035 Compare X0, 0
	036 JumpIfEqual {75}
	037 Move X8, [X0]
	038 Move X1, [X24]
	039 Move X22, X0
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Compare X9, 0
	042 JumpIfEqual {49}
	043 Move X10, [X8+176]
	044 Add X10, X10, 8
	045 NotImplemented "Instruction LDUR not yet implemented."
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Subtract X9, X9, 1
	048 Add X10, X10, 16
	049 Move X0, X22
	050 Move W2, W31
	051 Call 0x1C5D788
	052 NotImplemented "Instruction LDRSW not yet implemented."
	053 Add X8, X8, X9
	054 Add X0, X8, 312
	055 Move X8, [X0]
	056 Move X2, [X0+8]
	057 Add W23, W21, 1
	058 Move X0, X22
	059 Move W1, W23
	060 NotImplemented "Instruction BLR not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X19
	063 Move X1, X31
	064 Call TextGenerator.get_lineCount, X0
	065 Subtract W21, W0, 1
	066 Move W0, W21
	067 Move X20, [X31+48]
	068 Move X19, [X31+56]
	069 Move X22, [X31+32]
	070 Move X21, [X31+40]
	071 Move X24, [X31+16]
	072 Move X23, [X31+24]
	073 Move X30, [X31+64]
	074 Return X0
	075 Call 0x1C17F20

Method: System.Int32 LineUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)

Disassembly:
	0x03E2C48C ADD X10, X10, 0x8
	0x03E2C490 LDUR X11, [X10 - 0x8]
	0x03E2C494 CMP X11, X1
	0x03E2C498 B.EQ 0x3E2C4B8
	0x03E2C49C SUBS X9, X9, 0x1
	0x03E2C4A0 ADD X10, X10, 0x10
	0x03E2C4A4 B.NE 0x3E2C490
	0x03E2C4A8 MOV X0, X20
	0x03E2C4AC MOV W2, W31
	0x03E2C4B0 BL 0x1C5C788
	0x03E2C4B4 B 0x3E2C4C4
	0x03E2C4B8 LDRSW X9, [X10]
	0x03E2C4BC ADD X8, X8, X9, 0x4, LSL
	0x03E2C4C0 ADD X0, X8, 0x138
	0x03E2C4C4 LDP X8, X2, [X0]
	0x03E2C4C8 MOV X0, X20
	0x03E2C4CC MOV W1, W21
	0x03E2C4D0 BLR X8
	0x03E2C4D4 LDR W21, [X19 + 0x1E4]
	0x03E2C4D8 FADD S0, S8, S2
	0x03E2C4DC FCMP S0, S9
	0x03E2C4E0 B.GT 0x3E2C554
	0x03E2C4E4 LDR X8, [X20]
	0x03E2C4E8 LDR X1, [X22]
	0x03E2C4EC LDRH W9, [X8 + 0x12E]
	0x03E2C4F0 CBZ X9, 0x3E2C514
	0x03E2C4F4 LDR X10, [X8 + 0xB0]
	0x03E2C4F8 ADD X10, X10, 0x8
	0x03E2C4FC LDUR X11, [X10 - 0x8]
	0x03E2C500 CMP X11, X1
	0x03E2C504 B.EQ 0x3E2C524
	0x03E2C508 SUBS X9, X9, 0x1
	0x03E2C50C ADD X10, X10, 0x10
	0x03E2C510 B.NE 0x3E2C4FC
	0x03E2C514 MOV X0, X20
	0x03E2C518 MOV W2, W31
	0x03E2C51C BL 0x1C5C788
	0x03E2C520 B 0x3E2C530
	0x03E2C524 LDRSW X9, [X10]
	0x03E2C528 ADD X8, X8, X9, 0x4, LSL
	0x03E2C52C ADD X0, X8, 0x138
	0x03E2C530 LDP X8, X2, [X0]
	0x03E2C534 MOV X0, X20
	0x03E2C538 MOV W1, W21
	0x03E2C53C BLR X8
	0x03E2C540 LDR W8, [X19 + 0x1E4]
	0x03E2C544 FADD S8, S8, S2
	0x03E2C548 SUBS W21, W8, 0x1
	0x03E2C54C STR W21, [X19 + 0x1E4]
	0x03E2C550 B.PL 0x3E2C478
	0x03E2C554 LDR W22, [X19 + 0x1E8]
	0x03E2C558 B 0x3E2C560
	0x03E2C55C FMOV S8, W31
	0x03E2C560 ADD W8, W21, 0x1
	0x03E2C564 STR W8, [X19 + 0x1E4]
	0x03E2C568 B 0x3E2C588
	0x03E2C56C CMP W8, W22
	0x03E2C570 B.LE 0x3E2C57C
	0x03E2C574 MOV W8, W22
	0x03E2C578 STR W22, [X19 + 0x1E4]
	0x03E2C57C FMOV S8, W31
	0x03E2C580 MOV W22, W8
	0x03E2C584 STR W8, [X19 + 0x1E8]
	0x03E2C588 MOV X0, X19
	0x03E2C58C BL 0x3E2584C
	0x03E2C590 CBZ X0, 0x3E2C634
	0x03E2C594 ADRP X23, 0x33E000
	0x03E2C598 LDR X23, [X23 + 0xFE0]
	0x03E2C59C MOV X1, X31
	0x03E2C5A0 BL 0x3CCEAB4
	0x03E2C5A4 CMP W22, W0
	0x03E2C5A8 B.GE 0x3E2CCF4
	0x03E2C5AC CBZ X20, 0x3E2C634
	0x03E2C5B0 LDR X8, [X20]
	0x03E2C5B4 LDR W21, [X19 + 0x1E8]
	0x03E2C5B8 LDR X1, [X23]
	0x03E2C5BC LDRH W9, [X8 + 0x12E]
	0x03E2C5C0 CBZ X9, 0x3E2C5E4
	0x03E2C5C4 LDR X10, [X8 + 0xB0]
	0x03E2C5C8 ADD X10, X10, 0x8
	0x03E2C5CC LDUR X11, [X10 - 0x8]
	0x03E2C5D0 CMP X11, X1
	0x03E2C5D4 B.EQ 0x3E2C5F4
	0x03E2C5D8 SUBS X9, X9, 0x1
	0x03E2C5DC ADD X10, X10, 0x10
	0x03E2C5E0 B.NE 0x3E2C5CC
	0x03E2C5E4 MOV X0, X20
	0x03E2C5E8 MOV W2, W31
	0x03E2C5EC BL 0x1C5C788
	0x03E2C5F0 B 0x3E2C600
	0x03E2C5F4 LDRSW X9, [X10]
	0x03E2C5F8 ADD X8, X8, X9, 0x4, LSL
	0x03E2C5FC ADD X0, X8, 0x138
	0x03E2C600 LDP X8, X2, [X0]
	0x03E2C604 MOV X0, X20
	0x03E2C608 MOV W1, W21
	0x03E2C60C BLR X8
	0x03E2C610 FADD S8, S8, S2
	0x03E2C614 FCMP S8, S9
	0x03E2C618 B.GT 0x3E2CCF4
	0x03E2C61C LDR W8, [X19 + 0x1E8]
	0x03E2C620 MOV X0, X19
	0x03E2C624 ADD W22, W8, 0x1
	0x03E2C628 STR W22, [X19 + 0x1E8]
	0x03E2C62C BL 0x3E2584C
	0x03E2C630 CBNZ X0, 0x3E2C59C
	0x03E2C634 BL 0x1C16F20
	0x03E2C638 LDRSW X9, [X10]
	0x03E2C63C ADD X8, X8, X9, 0x4, LSL
	0x03E2C640 ADD X0, X8, 0x138
	0x03E2C644 LDP X8, X2, [X0]
	0x03E2C648 MOV X0, X20
	0x03E2C64C MOV W1, W21
	0x03E2C650 BLR X8
	0x03E2C654 LDR X9, [X20]
	0x03E2C658 LDR X8, [X24]
	0x03E2C65C MOV X22, X1
	0x03E2C660 LDRH W10, [X9 + 0x12E]
	0x03E2C664 CBZ X10, 0x3E2C688
	0x03E2C668 LDR X11, [X9 + 0xB0]
	0x03E2C66C ADD X11, X11, 0x8
	0x03E2C670 LDUR X12, [X11 - 0x8]
	0x03E2C674 CMP X12, X8
	0x03E2C678 B.EQ 0x3E2C700
	0x03E2C67C SUBS X10, X10, 0x1
	0x03E2C680 ADD X11, X11, 0x10
	0x03E2C684 B.NE 0x3E2C670
	0x03E2C688 MOV X0, X20
	0x03E2C68C MOV X1, X8
	0x03E2C690 MOV W2, W31
	0x03E2C694 BL 0x1C5C788
	0x03E2C698 B 0x3E2C70C
	0x03E2C69C LDRSW X9, [X10]
	0x03E2C6A0 ADD X8, X8, X9, 0x4, LSL
	0x03E2C6A4 ADD X0, X8, 0x138
	0x03E2C6A8 LDP X8, X2, [X0]
	0x03E2C6AC MOV X0, X20
	0x03E2C6B0 MOV W1, W21
	0x03E2C6B4 BLR X8
	0x03E2C6B8 LDR X9, [X20]
	0x03E2C6BC LDR X8, [X26]
	0x03E2C6C0 MOV X22, X1
	0x03E2C6C4 LDRH W10, [X9 + 0x12E]
	0x03E2C6C8 CBZ X10, 0x3E2C6EC
	0x03E2C6CC LDR X11, [X9 + 0xB0]
	0x03E2C6D0 ADD X11, X11, 0x8
	0x03E2C6D4 LDUR X12, [X11 - 0x8]
	0x03E2C6D8 CMP X12, X8
	0x03E2C6DC B.EQ 0x3E2C770
	0x03E2C6E0 SUBS X10, X10, 0x1
	0x03E2C6E4 ADD X11, X11, 0x10
	0x03E2C6E8 B.NE 0x3E2C6D4
	0x03E2C6EC MOV X0, X20
	0x03E2C6F0 MOV X1, X8
	0x03E2C6F4 MOV W2, W31
	0x03E2C6F8 BL 0x1C5C788
	0x03E2C6FC B 0x3E2C77C
	0x03E2C700 LDRSW X8, [X11]
	0x03E2C704 ADD X8, X9, X8, 0x4, LSL
	0x03E2C708 ADD X0, X8, 0x138
	0x03E2C70C LDP X8, X2, [X0]
	0x03E2C710 MOV X0, X20
	0x03E2C714 MOV W1, W21
	0x03E2C718 FMOV S9, W22
	0x03E2C71C BLR X8
	0x03E2C720 ADRP X10, 0x33E000
	0x03E2C724 LDR X8, [X20]
	0x03E2C728 LDR X10, [X10 + 0xFE8]
	0x03E2C72C LDRH W9, [X8 + 0x12E]
	0x03E2C730 LDR X1, [X10]
	0x03E2C734 UBFM X10, X0, 0x20, 0x3F
	0x03E2C738 SCVTF S10, W10
	0x03E2C73C CBZ X9, 0x3E2C760
	0x03E2C740 LDR X10, [X8 + 0xB0]
	0x03E2C744 ADD X10, X10, 0x8
	0x03E2C748 LDUR X11, [X10 - 0x8]
	0x03E2C74C CMP X11, X1
	0x03E2C750 B.EQ 0x3E2C7D4
	0x03E2C754 SUBS X9, X9, 0x1
	0x03E2C758 ADD X10, X10, 0x10
	0x03E2C75C B.NE 0x3E2C748
	0x03E2C760 MOV X0, X20
	0x03E2C764 MOV W2, W31
	0x03E2C768 BL 0x1C5C788
	0x03E2C76C B 0x3E2C7E0
	0x03E2C770 LDRSW X8, [X11]
	0x03E2C774 ADD X8, X9, X8, 0x4, LSL
	0x03E2C778 ADD X0, X8, 0x138
	0x03E2C77C LDP X8, X2, [X0]
	0x03E2C780 MOV X0, X20
	0x03E2C784 MOV W1, W21
	0x03E2C788 BLR X8
	0x03E2C78C LDR X9, [X20]
	0x03E2C790 LDR X8, [X26]
	0x03E2C794 MOV X23, X1
	0x03E2C798 LDRH W10, [X9 + 0x12E]
	0x03E2C79C CBZ X10, 0x3E2C7C0
	0x03E2C7A0 LDR X11, [X9 + 0xB0]
	0x03E2C7A4 ADD X11, X11, 0x8
	0x03E2C7A8 LDUR X12, [X11 - 0x8]
	0x03E2C7AC CMP X12, X8
	0x03E2C7B0 B.EQ 0x3E2C83C
	0x03E2C7B4 SUBS X10, X10, 0x1
	0x03E2C7B8 ADD X11, X11, 0x10
	0x03E2C7BC B.NE 0x3E2C7A8
	0x03E2C7C0 MOV X0, X20
	0x03E2C7C4 MOV X1, X8
	0x03E2C7C8 MOV W2, W31
	0x03E2C7CC BL 0x1C5C788
	0x03E2C7D0 B 0x3E2C848
	0x03E2C7D4 LDRSW X9, [X10]
	0x03E2C7D8 ADD X8, X8, X9, 0x4, LSL
	0x03E2C7DC ADD X0, X8, 0x138
	0x03E2C7E0 LDP X8, X1, [X0]

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x5BD000
	010 Move W8, [X22+1772]
	011 Move W21, W2
	012 Move W20, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x33F000
	019 Move X0, [X0+4088]
	020 Call 0x1C17CF4
	021 Move X0, 0x33F000
	022 Move X0, [X0+4064]
	023 Call 0x1C17CF4
	024 Move X0, 0x33F000
	025 Move X0, [X0+4056]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+1772], W8
	029 Move X0, X19
	030 Call InputField.get_cachedInputTextGenerator, X0
	031 Compare X0, 0
	032 JumpIfEqual {220}
	033 Move X1, X31
	034 Call TextGenerator.get_characters, X0
	035 Compare X0, 0
	036 JumpIfEqual {220}
	037 Move X10, 0x33F000
	038 Move X8, [X0]
	039 Move X10, [X10+4088]
	040 Move X22, X0
	041 NotImplemented "Instruction LDRH not yet implemented."
	042 Move X1, [X10]
	043 Compare X9, 0
	044 JumpIfEqual {51}
	045 Move X10, [X8+176]
	046 Add X10, X10, 8
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Subtract X9, X9, 1
	050 Add X10, X10, 16
	051 Move X0, X22
	052 Move W2, W31
	053 Call 0x1C5D788
	054 NotImplemented "Instruction LDRSW not yet implemented."
	055 Add X8, X8, X9
	056 Add X0, X8, 312
	057 Move X8, [X0]
	058 Move X1, [X0+8]
	059 Move X0, X22
	060 NotImplemented "Instruction BLR not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X0, X19
	063 Call InputField.get_cachedInputTextGenerator, X0
	064 Compare X0, 0
	065 JumpIfEqual {220}
	066 Move X1, X31
	067 Call TextGenerator.get_characters, X0
	068 Compare X0, 0
	069 JumpIfEqual {220}
	070 Move X23, 0x33F000
	071 Move X8, [X0]
	072 Move X23, [X23+4064]
	073 Move X22, X0
	074 NotImplemented "Instruction LDRH not yet implemented."
	075 Move X1, [X23]
	076 Compare X9, 0
	077 JumpIfEqual {84}
	078 Move X10, [X8+176]
	079 Add X10, X10, 8
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Subtract X9, X9, 1
	083 Add X10, X10, 16
	084 Move X0, X22
	085 Move W2, W31
	086 Call 0x1C5D788
	087 Move W20, W31
	088 NotImplemented "Instruction LDRSW not yet implemented."
	089 Add X8, X8, X9
	090 Add X0, X8, 312
	091 Move X8, [X0]
	092 Move X2, [X0+8]
	093 Move X0, X22
	094 Move W1, W20
	095 NotImplemented "Instruction BLR not yet implemented."
	096 Move X0, X19
	097 Move V8, V0
	098 Call InputField.get_cachedInputTextGenerator, X0
	099 Move W1, W20
	100 Move X2, X0
	101 Call InputField.DetermineCharacterLine, X0, X1, X2
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W22, W0
	104 Move X0, X19
	105 Call InputField.get_cachedInputTextGenerator, X0
	106 Compare X0, 0
	107 JumpIfEqual {220}
	108 Move X1, X31
	109 Call TextGenerator.get_lines, X0
	110 Compare X0, 0
	111 JumpIfEqual {220}
	112 Move X24, 0x33F000
	113 Move X8, [X0]
	114 Move X24, [X24+4056]
	115 Move X20, X0
	116 NotImplemented "Instruction LDRH not yet implemented."
	117 Move X1, [X24]
	118 Compare X9, 0
	119 JumpIfEqual {126}
	120 Move X10, [X8+176]
	121 Add X10, X10, 8
	122 NotImplemented "Instruction LDUR not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Subtract X9, X9, 1
	125 Add X10, X10, 16
	126 Move X0, X20
	127 Move W2, W31
	128 Call 0x1C5D788
	129 And W31, W21, 1
	130 NotImplemented "Instruction CSEL not yet implemented."
	131 NotImplemented "Instruction LDRSW not yet implemented."
	132 Add X8, X8, X9
	133 Add X0, X8, 312
	134 Move X8, [X0]
	135 Move X2, [X0+8]
	136 Move X0, X20
	137 Move W1, W22
	138 NotImplemented "Instruction BLR not yet implemented."
	139 Move X20, X0
	140 Move X0, X19
	141 Call InputField.get_cachedInputTextGenerator, X0
	142 Compare X0, 0
	143 JumpIfEqual {220}
	144 Move X1, X31
	145 Call TextGenerator.get_lines, X0
	146 Compare X0, 0
	147 JumpIfEqual {220}
	148 Move X8, [X0]
	149 Move X1, [X24]
	150 Move X21, X0
	151 Subtract W20, W20, 1
	152 NotImplemented "Instruction LDRH not yet implemented."
	153 Subtract W22, W22, 1
	154 Compare X9, 0
	155 JumpIfEqual {162}
	156 Move X10, [X8+176]
	157 Add X10, X10, 8
	158 NotImplemented "Instruction LDUR not yet implemented."
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Subtract X9, X9, 1
	161 Add X10, X10, 16
	162 Move X0, X21
	163 Move W2, W31
	164 Call 0x1C5D788
	165 NotImplemented "Instruction LDRSW not yet implemented."
	166 Add X8, X8, X9
	167 Add X0, X8, 312
	168 Move X8, [X0]
	169 Move X2, [X0+8]
	170 Move X0, X21
	171 Move W1, W22
	172 NotImplemented "Instruction BLR not yet implemented."
	173 Move X21, X0
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Move X0, X19
	176 Call InputField.get_cachedInputTextGenerator, X0
	177 Compare X0, 0
	178 JumpIfEqual {220}
	179 Move X1, X31
	180 Call TextGenerator.get_characters, X0
	181 Compare X0, 0
	182 JumpIfEqual {220}
	183 Move X8, [X0]
	184 Move X1, [X23]
	185 Move X22, X0
	186 NotImplemented "Instruction LDRH not yet implemented."
	187 Compare X9, 0
	188 JumpIfEqual {195}
	189 Move X10, [X8+176]
	190 Add X10, X10, 8
	191 NotImplemented "Instruction LDUR not yet implemented."
	192 NotImplemented "Instruction CMP not yet implemented."
	193 Subtract X9, X9, 1
	194 Add X10, X10, 16
	195 Move X0, X22
	196 Move W2, W31
	197 Call 0x1C5D788
	198 NotImplemented "Instruction LDRSW not yet implemented."
	199 Add X8, X8, X9
	200 Add X0, X8, 312
	201 Move X8, [X0]
	202 Move X2, [X0+8]
	203 Move X0, X22
	204 Move W1, W21
	205 NotImplemented "Instruction BLR not yet implemented."
	206 NotImplemented "Instruction FCMP not yet implemented."
	207 Add W21, W21, 1
	208 NotImplemented "Instruction CMP not yet implemented."
	209 Move W20, W21
	210 Move W0, W20
	211 Move X20, [X31+48]
	212 Move X19, [X31+56]
	213 Move X22, [X31+32]
	214 Move X21, [X31+40]
	215 Move X24, [X31+16]
	216 Move X23, [X31+24]
	217 Move X30, [X31+8]
	218 Move V8, [X31+64]
	219 Return X0
	220 Call 0x1C17F20

Method: System.Int32 LineDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)

Disassembly:
	0x03E2C7E4 MOV X0, X20
	0x03E2C7E8 FSUB S9, S9, S10
	0x03E2C7EC BLR X8
	0x03E2C7F0 SUB W8, W0, 0x1
	0x03E2C7F4 CMP W21, W8
	0x03E2C7F8 B.NE 0x3E2C93C
	0x03E2C7FC LDR X8, [X20]
	0x03E2C800 LDR X1, [X24]
	0x03E2C804 LDRH W9, [X8 + 0x12E]
	0x03E2C808 CBZ X9, 0x3E2C82C
	0x03E2C80C LDR X10, [X8 + 0xB0]
	0x03E2C810 ADD X10, X10, 0x8
	0x03E2C814 LDUR X11, [X10 - 0x8]
	0x03E2C818 CMP X11, X1
	0x03E2C81C B.EQ 0x3E2C914
	0x03E2C820 SUBS X9, X9, 0x1
	0x03E2C824 ADD X10, X10, 0x10
	0x03E2C828 B.NE 0x3E2C814
	0x03E2C82C MOV X0, X20
	0x03E2C830 MOV W2, W31
	0x03E2C834 BL 0x1C5C788
	0x03E2C838 B 0x3E2C920
	0x03E2C83C LDRSW X8, [X11]
	0x03E2C840 ADD X8, X9, X8, 0x4, LSL
	0x03E2C844 ADD X0, X8, 0x138
	0x03E2C848 LDP X8, X2, [X0]
	0x03E2C84C MOV X0, X20
	0x03E2C850 MOV W1, W21
	0x03E2C854 FMOV S9, W23
	0x03E2C858 BLR X8
	0x03E2C85C ADRP X27, 0x33E000
	0x03E2C860 LDR X8, [X20]
	0x03E2C864 LDR X27, [X27 + 0xFE8]
	0x03E2C868 UBFM X10, X0, 0x20, 0x3F
	0x03E2C86C SCVTF S10, W10
	0x03E2C870 LDRH W9, [X8 + 0x12E]
	0x03E2C874 LDR X1, [X27]
	0x03E2C878 CBZ X9, 0x3E2C89C
	0x03E2C87C LDR X10, [X8 + 0xB0]
	0x03E2C880 ADD X10, X10, 0x8
	0x03E2C884 LDUR X11, [X10 - 0x8]
	0x03E2C888 CMP X11, X1
	0x03E2C88C B.EQ 0x3E2C8AC
	0x03E2C890 SUBS X9, X9, 0x1
	0x03E2C894 ADD X10, X10, 0x10
	0x03E2C898 B.NE 0x3E2C884
	0x03E2C89C MOV X0, X20
	0x03E2C8A0 MOV W2, W31
	0x03E2C8A4 BL 0x1C5C788
	0x03E2C8A8 B 0x3E2C8B8
	0x03E2C8AC LDRSW X9, [X10]
	0x03E2C8B0 ADD X8, X8, X9, 0x4, LSL
	0x03E2C8B4 ADD X0, X8, 0x138
	0x03E2C8B8 LDP X8, X1, [X0]
	0x03E2C8BC MOV X0, X20
	0x03E2C8C0 FSUB S9, S9, S10
	0x03E2C8C4 BLR X8
	0x03E2C8C8 SUB W8, W0, 0x1
	0x03E2C8CC CMP W21, W8
	0x03E2C8D0 B.NE 0x3E2C9F0
	0x03E2C8D4 LDR X8, [X20]
	0x03E2C8D8 LDR X1, [X26]
	0x03E2C8DC LDRH W9, [X8 + 0x12E]
	0x03E2C8E0 CBZ X9, 0x3E2C904
	0x03E2C8E4 LDR X10, [X8 + 0xB0]
	0x03E2C8E8 ADD X10, X10, 0x8
	0x03E2C8EC LDUR X11, [X10 - 0x8]
	0x03E2C8F0 CMP X11, X1
	0x03E2C8F4 B.EQ 0x3E2C9C8
	0x03E2C8F8 SUBS X9, X9, 0x1
	0x03E2C8FC ADD X10, X10, 0x10
	0x03E2C900 B.NE 0x3E2C8EC
	0x03E2C904 MOV X0, X20
	0x03E2C908 MOV W2, W31
	0x03E2C90C BL 0x1C5C788
	0x03E2C910 B 0x3E2C9D4
	0x03E2C914 LDRSW X9, [X10]
	0x03E2C918 ADD X8, X8, X9, 0x4, LSL
	0x03E2C91C ADD X0, X8, 0x138
	0x03E2C920 LDP X8, X2, [X0]
	0x03E2C924 MOV X0, X20
	0x03E2C928 MOV W1, W21
	0x03E2C92C BLR X8
	0x03E2C930 UBFM X8, X1, 0x20, 0x3F
	0x03E2C934 FMOV S0, W8
	0x03E2C938 FADD S9, S9, S0
	0x03E2C93C MOV W22, W21
	0x03E2C940 CMP W21, 0x0
	0x03E2C944 B.LE 0x3E2C9B8
	0x03E2C948 LDR X8, [X20]
	0x03E2C94C LDR X1, [X24]
	0x03E2C950 SUB W21, W22, 0x1
	0x03E2C954 LDRH W9, [X8 + 0x12E]
	0x03E2C958 CBZ X9, 0x3E2C97C
	0x03E2C95C LDR X10, [X8 + 0xB0]
	0x03E2C960 ADD X10, X10, 0x8
	0x03E2C964 LDUR X11, [X10 - 0x8]
	0x03E2C968 CMP X11, X1
	0x03E2C96C B.EQ 0x3E2C98C
	0x03E2C970 SUBS X9, X9, 0x1
	0x03E2C974 ADD X10, X10, 0x10
	0x03E2C978 B.NE 0x3E2C964
	0x03E2C97C MOV X0, X20
	0x03E2C980 MOV W2, W31
	0x03E2C984 BL 0x1C5C788
	0x03E2C988 B 0x3E2C998
	0x03E2C98C LDRSW X9, [X10]
	0x03E2C990 ADD X8, X8, X9, 0x4, LSL
	0x03E2C994 ADD X0, X8, 0x138
	0x03E2C998 LDP X8, X2, [X0]
	0x03E2C99C MOV X0, X20
	0x03E2C9A0 MOV W1, W21
	0x03E2C9A4 BLR X8
	0x03E2C9A8 FMOV S0, W1
	0x03E2C9AC FSUB S0, S0, S9
	0x03E2C9B0 FCMP S0, S8
	0x03E2C9B4 B.LE 0x3E2C93C
	0x03E2C9B8 MOV X0, X19
	0x03E2C9BC BL 0x3E2584C
	0x03E2C9C0 LDR X8, [X23]
	0x03E2C9C4 B 0x3E2CCD0
	0x03E2C9C8 LDRSW X9, [X10]
	0x03E2C9CC ADD X8, X8, X9, 0x4, LSL
	0x03E2C9D0 ADD X0, X8, 0x138
	0x03E2C9D4 LDP X8, X2, [X0]
	0x03E2C9D8 MOV X0, X20
	0x03E2C9DC MOV W1, W21
	0x03E2C9E0 BLR X8
	0x03E2C9E4 UBFM X8, X1, 0x20, 0x3F
	0x03E2C9E8 FMOV S0, W8
	0x03E2C9EC FADD S9, S9, S0
	0x03E2C9F0 FMOV S10, W22
	0x03E2C9F4 MOV W23, W21
	0x03E2C9F8 LDR X8, [X20]
	0x03E2C9FC LDR X1, [X27]
	0x03E2CA00 MOV W22, W23
	0x03E2CA04 LDRH W9, [X8 + 0x12E]
	0x03E2CA08 CBZ X9, 0x3E2CA2C
	0x03E2CA0C LDR X10, [X8 + 0xB0]
	0x03E2CA10 ADD X10, X10, 0x8
	0x03E2CA14 LDUR X11, [X10 - 0x8]
	0x03E2CA18 CMP X11, X1
	0x03E2CA1C B.EQ 0x3E2CA3C
	0x03E2CA20 SUBS X9, X9, 0x1
	0x03E2CA24 ADD X10, X10, 0x10
	0x03E2CA28 B.NE 0x3E2CA14
	0x03E2CA2C MOV X0, X20
	0x03E2CA30 MOV W2, W31
	0x03E2CA34 BL 0x1C5C788
	0x03E2CA38 B 0x3E2CA48
	0x03E2CA3C LDRSW X9, [X10]
	0x03E2CA40 ADD X8, X8, X9, 0x4, LSL
	0x03E2CA44 ADD X0, X8, 0x138
	0x03E2CA48 LDP X8, X1, [X0]
	0x03E2CA4C MOV X0, X20
	0x03E2CA50 BLR X8
	0x03E2CA54 SUB W8, W0, 0x1
	0x03E2CA58 CMP W22, W8
	0x03E2CA5C B.GE 0x3E2CC10
	0x03E2CA60 LDR X8, [X20]
	0x03E2CA64 LDR X1, [X26]
	0x03E2CA68 LDRH W9, [X8 + 0x12E]
	0x03E2CA6C CBZ X9, 0x3E2CA90
	0x03E2CA70 LDR X10, [X8 + 0xB0]
	0x03E2CA74 ADD X10, X10, 0x8
	0x03E2CA78 LDUR X11, [X10 - 0x8]
	0x03E2CA7C CMP X11, X1
	0x03E2CA80 B.EQ 0x3E2CAA0
	0x03E2CA84 SUBS X9, X9, 0x1
	0x03E2CA88 ADD X10, X10, 0x10
	0x03E2CA8C B.NE 0x3E2CA78
	0x03E2CA90 MOV X0, X20
	0x03E2CA94 MOV W2, W31

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x5BD000
	009 Move W8, [X22+1773]
	010 Move W21, W2
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x33F000
	018 Move X0, [X0+4064]
	019 Call 0x1C17CF4
	020 Move X0, 0x33F000
	021 Move X0, [X0+4056]
	022 Call 0x1C17CF4
	023 Move X0, 0x33F000
	024 Move X0, [X0+4024]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1773], W8
	028 Move X0, X19
	029 Call InputField.get_cachedInputTextGenerator, X0
	030 Compare X0, 0
	031 JumpIfEqual {185}
	032 Move X1, X31
	033 Call TextGenerator.get_characterCountVisible, X0
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X0, X19
	036 Call InputField.get_cachedInputTextGenerator, X0
	037 Compare X0, 0
	038 JumpIfEqual {185}
	039 Move X1, X31
	040 Call TextGenerator.get_characters, X0
	041 Compare X0, 0
	042 JumpIfEqual {185}
	043 Move X23, 0x33F000
	044 Move X8, [X0]
	045 Move X23, [X23+4064]
	046 Move X22, X0
	047 NotImplemented "Instruction LDRH not yet implemented."
	048 Move X1, [X23]
	049 Compare X9, 0
	050 JumpIfEqual {57}
	051 Move X10, [X8+176]
	052 Add X10, X10, 8
	053 NotImplemented "Instruction LDUR not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Subtract X9, X9, 1
	056 Add X10, X10, 16
	057 Move X0, X22
	058 Move W2, W31
	059 Call 0x1C5D788
	060 NotImplemented "Instruction LDRSW not yet implemented."
	061 Add X8, X8, X9
	062 Add X0, X8, 312
	063 Move X8, [X0]
	064 Move X2, [X0+8]
	065 Move X0, X22
	066 Move W1, W20
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X0, X19
	069 Move V8, V0
	070 Call InputField.get_cachedInputTextGenerator, X0
	071 Move W1, W20
	072 Move X2, X0
	073 Call InputField.DetermineCharacterLine, X0, X1, X2
	074 Move W22, W0
	075 Move X0, X19
	076 Call InputField.get_cachedInputTextGenerator, X0
	077 Compare X0, 0
	078 JumpIfEqual {185}
	079 Move X1, X31
	080 Call TextGenerator.get_lineCount, X0
	081 Add W22, W22, 1
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X0, X19
	084 Call InputField.get_cachedInputTextGenerator, X0
	085 Move X8, 0x33F000
	086 Move X8, [X8+4024]
	087 Move X20, X0
	088 Move X8, [X8]
	089 Move W9, [X8+224]
	090 Compare W9, 0
	091 JumpIfNotEqual {94}
	092 Move X0, X8
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move W1, W22
	096 Call InputField.GetLineEndPosition, X0, X1
	097 Move W20, W0
	098 Move X0, X19
	099 Call InputField.get_cachedInputTextGenerator, X0
	100 Compare X0, 0
	101 JumpIfEqual {185}
	102 Move X1, X31
	103 Call TextGenerator.get_lines, X0
	104 Compare X0, 0
	105 JumpIfEqual {185}
	106 Move X10, 0x33F000
	107 Move X8, [X0]
	108 Move X10, [X10+4056]
	109 Move X21, X0
	110 NotImplemented "Instruction LDRH not yet implemented."
	111 Move X1, [X10]
	112 Compare X9, 0
	113 JumpIfEqual {120}
	114 Move X10, [X8+176]
	115 Add X10, X10, 8
	116 NotImplemented "Instruction LDUR not yet implemented."
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Subtract X9, X9, 1
	119 Add X10, X10, 16
	120 Move X0, X21
	121 Move W2, W31
	122 Call 0x1C5D788
	123 Move TEMP, X21
	124 And TEMP, TEMP, 1
	125 Compare TEMP, 1
	126 JumpIfNotEqual {131}
	127 Move X8, [X19+384]
	128 Compare X8, 0
	129 JumpIfEqual {185}
	130 Move W20, [X8+16]
	131 Move W0, W20
	132 Move X20, [X31+48]
	133 Move X19, [X31+56]
	134 Move X22, [X31+32]
	135 Move X21, [X31+40]
	136 Move X30, [X31+16]
	137 Move X23, [X31+24]
	138 Move V8, [X31+64]
	139 Return X0
	140 NotImplemented "Instruction LDRSW not yet implemented."
	141 Add X8, X8, X9
	142 Add X0, X8, 312
	143 Move X8, [X0]
	144 Move X2, [X0+8]
	145 Move X0, X21
	146 Move W1, W22
	147 NotImplemented "Instruction BLR not yet implemented."
	148 Move X21, X0
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Move X0, X19
	151 Call InputField.get_cachedInputTextGenerator, X0
	152 Compare X0, 0
	153 JumpIfEqual {185}
	154 Move X1, X31
	155 Call TextGenerator.get_characters, X0
	156 Compare X0, 0
	157 JumpIfEqual {185}
	158 Move X8, [X0]
	159 Move X1, [X23]
	160 Move X22, X0
	161 NotImplemented "Instruction LDRH not yet implemented."
	162 Compare X9, 0
	163 JumpIfEqual {170}
	164 Move X10, [X8+176]
	165 Add X10, X10, 8
	166 NotImplemented "Instruction LDUR not yet implemented."
	167 NotImplemented "Instruction CMP not yet implemented."
	168 Subtract X9, X9, 1
	169 Add X10, X10, 16
	170 Move X0, X22
	171 Move W2, W31
	172 Call 0x1C5D788
	173 NotImplemented "Instruction LDRSW not yet implemented."
	174 Add X8, X8, X9
	175 Add X0, X8, 312
	176 Move X8, [X0]
	177 Move X2, [X0+8]
	178 Move X0, X22
	179 Move W1, W21
	180 NotImplemented "Instruction BLR not yet implemented."
	181 NotImplemented "Instruction FCMP not yet implemented."
	182 Add W21, W21, 1
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Move W20, W21
	185 Call 0x1C17F20

Method: System.Void MoveDown(System.Boolean shift)

Disassembly:
	0x03E2C000 LDRB W8, [X19 + 0x210]
	0x03E2C004 CBZ W8, 0x3E2C1C0
	0x03E2C008 MOV X0, X19

ISIL:
	001 And W1, W1, 1
	002 Move W2, 1
	003 Call InputField.MoveDown, X0, X1, X2
	004 Return 

Method: System.Void MoveDown(System.Boolean shift, System.Boolean goToLastChar)

Disassembly:
	0x03E2CA98 BL 0x1C5C788
	0x03E2CA9C B 0x3E2CAAC
	0x03E2CAA0 LDRSW X9, [X10]
	0x03E2CAA4 ADD X8, X8, X9, 0x4, LSL
	0x03E2CAA8 ADD X0, X8, 0x138
	0x03E2CAAC LDP X8, X2, [X0]
	0x03E2CAB0 ADD W23, W22, 0x1
	0x03E2CAB4 MOV X0, X20
	0x03E2CAB8 MOV W1, W23
	0x03E2CABC BLR X8
	0x03E2CAC0 LDR X9, [X20]
	0x03E2CAC4 LDR X8, [X26]
	0x03E2CAC8 MOV X24, X1
	0x03E2CACC LDRH W10, [X9 + 0x12E]
	0x03E2CAD0 CBZ X10, 0x3E2CAF4
	0x03E2CAD4 LDR X11, [X9 + 0xB0]
	0x03E2CAD8 ADD X11, X11, 0x8
	0x03E2CADC LDUR X12, [X11 - 0x8]
	0x03E2CAE0 CMP X12, X8
	0x03E2CAE4 B.EQ 0x3E2CB08
	0x03E2CAE8 SUBS X10, X10, 0x1
	0x03E2CAEC ADD X11, X11, 0x10
	0x03E2CAF0 B.NE 0x3E2CADC
	0x03E2CAF4 MOV X0, X20
	0x03E2CAF8 MOV X1, X8
	0x03E2CAFC MOV W2, W31
	0x03E2CB00 BL 0x1C5C788
	0x03E2CB04 B 0x3E2CB14
	0x03E2CB08 LDRSW X8, [X11]
	0x03E2CB0C ADD X8, X9, X8, 0x4, LSL
	0x03E2CB10 ADD X0, X8, 0x138
	0x03E2CB14 LDP X8, X2, [X0]
	0x03E2CB18 MOV X0, X20
	0x03E2CB1C MOV W1, W23
	0x03E2CB20 BLR X8
	0x03E2CB24 LDR X8, [X20]
	0x03E2CB28 LDR X1, [X27]
	0x03E2CB2C MOV X25, X0
	0x03E2CB30 LDRH W9, [X8 + 0x12E]
	0x03E2CB34 CBZ X9, 0x3E2CB58
	0x03E2CB38 LDR X10, [X8 + 0xB0]
	0x03E2CB3C ADD X10, X10, 0x8
	0x03E2CB40 LDUR X11, [X10 - 0x8]
	0x03E2CB44 CMP X11, X1
	0x03E2CB48 B.EQ 0x3E2CB68
	0x03E2CB4C SUBS X9, X9, 0x1
	0x03E2CB50 ADD X10, X10, 0x10
	0x03E2CB54 B.NE 0x3E2CB40
	0x03E2CB58 MOV X0, X20
	0x03E2CB5C MOV W2, W31
	0x03E2CB60 BL 0x1C5C788
	0x03E2CB64 B 0x3E2CB74
	0x03E2CB68 LDRSW X9, [X10]
	0x03E2CB6C ADD X8, X8, X9, 0x4, LSL
	0x03E2CB70 ADD X0, X8, 0x138
	0x03E2CB74 LDP X8, X1, [X0]
	0x03E2CB78 UBFM X9, X25, 0x20, 0x3F
	0x03E2CB7C FMOV S0, W24
	0x03E2CB80 SCVTF S1, W9
	0x03E2CB84 MOV X0, X20
	0x03E2CB88 FSUB S9, S0, S1
	0x03E2CB8C BLR X8
	0x03E2CB90 SUB W8, W0, 0x1
	0x03E2CB94 CMP W23, W8
	0x03E2CB98 B.NE 0x3E2CC04
	0x03E2CB9C LDR X8, [X20]
	0x03E2CBA0 LDR X1, [X26]
	0x03E2CBA4 LDRH W9, [X8 + 0x12E]
	0x03E2CBA8 CBZ X9, 0x3E2CBCC
	0x03E2CBAC LDR X10, [X8 + 0xB0]
	0x03E2CBB0 ADD X10, X10, 0x8
	0x03E2CBB4 LDUR X11, [X10 - 0x8]
	0x03E2CBB8 CMP X11, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W2
	007 Move W20, W1
	008 Move X19, X0
	009 Call InputField.get_caretPositionInternal, X0
	010 Move W22, W0
	011 Move X0, X19
	012 Call InputField.get_caretSelectPositionInternal, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {43}
	018 Move X0, X19
	019 Call InputField.get_caretPositionInternal, X0
	020 Move W22, W0
	021 Move X0, X19
	022 Call InputField.get_caretSelectPositionInternal, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Move [X19+408], W8
	026 Move TEMP, X8
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {41}
	030 Move X9, [X19+384]
	031 Compare X9, 0
	032 JumpIfEqual {88}
	033 Move W10, [X9+16]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X19+408], W10
	036 Move [X19+404], W8
	037 Move W9, [X9+16]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move [X19+404], W8
	041 Move [X19+408], W31
	042 Move [X19+404], W31
	043 Move W8, [X19+296]
	044 Subtract W8, W8, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X19
	047 Call InputField.get_caretSelectPositionInternal, X0
	048 Move W1, W0
	049 And W2, W21, 1
	050 Move X0, X19
	051 Call InputField.LineDownCharacterPosition, X0, X1, X2
	052 Move X8, [X19+384]
	053 Compare X8, 0
	054 JumpIfEqual {88}
	055 Move W0, [X8+16]
	056 Move [X19+408], W0
	057 Move TEMP, X0
	058 And TEMP, TEMP, -2147483648
	059 Compare TEMP, -2147483648
	060 JumpIfEqual {76}
	061 Move X8, [X19+384]
	062 Compare X8, 0
	063 JumpIfEqual {88}
	064 Move W9, [X8+16]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move [X19+408], W9
	067 Move TEMP, X20
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfEqual {82}
	071 Move [X19+404], W0
	072 Move W8, [X8+16]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSEL not yet implemented."
	075 Move [X19+404], W8
	076 Move [X19+408], W31
	077 Move TEMP, X20
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {82}
	081 Move [X19+404], W31
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Return 
	088 Call 0x1C17F20

Method: System.Void MoveUp(System.Boolean shift)

Disassembly:
	0x03E2BFF4 MOV X0, X31
	0x03E2BFF8 BL 0x3C3CC00
	0x03E2BFFC TBZ X0, 0x0, 0x3E2C008

ISIL:
	001 And W1, W1, 1
	002 Move W2, 1
	003 Call InputField.MoveUp, X0, X1, X2
	004 Return 

Method: System.Void MoveUp(System.Boolean shift, System.Boolean goToFirstChar)

Disassembly:
	0x03E2CBBC B.EQ 0x3E2CBDC
	0x03E2CBC0 SUBS X9, X9, 0x1
	0x03E2CBC4 ADD X10, X10, 0x10
	0x03E2CBC8 B.NE 0x3E2CBB4
	0x03E2CBCC MOV X0, X20
	0x03E2CBD0 MOV W2, W31
	0x03E2CBD4 BL 0x1C5C788
	0x03E2CBD8 B 0x3E2CBE8
	0x03E2CBDC LDRSW X9, [X10]
	0x03E2CBE0 ADD X8, X8, X9, 0x4, LSL
	0x03E2CBE4 ADD X0, X8, 0x138
	0x03E2CBE8 LDP X8, X2, [X0]
	0x03E2CBEC MOV X0, X20
	0x03E2CBF0 MOV W1, W23
	0x03E2CBF4 BLR X8
	0x03E2CBF8 UBFM X8, X1, 0x20, 0x3F
	0x03E2CBFC FMOV S0, W8
	0x03E2CC00 FADD S9, S9, S0
	0x03E2CC04 FSUB S0, S10, S9
	0x03E2CC08 FCMP S0, S8
	0x03E2CC0C B.LE 0x3E2C9F8
	0x03E2CC10 MOV X0, X19
	0x03E2CC14 BL 0x3E2584C
	0x03E2CC18 ADRP X24, 0x33E000
	0x03E2CC1C LDR X24, [X24 + 0xFB8]
	0x03E2CC20 MOV X23, X0
	0x03E2CC24 LDR X8, [X24]
	0x03E2CC28 LDR W9, [X8 + 0xE0]
	0x03E2CC2C CBNZ W9, 0x3E2CC38
	0x03E2CC30 MOV X0, X8
	0x03E2CC34 BL 0x1C16DFC
	0x03E2CC38 MOV X0, X23
	0x03E2CC3C MOV W1, W22
	0x03E2CC40 BL 0x3E29E5C
	0x03E2CC44 STR W0, [X19 + 0x1E8]
	0x03E2CC48 MOV W22, W21
	0x03E2CC4C CMP W21, 0x0
	0x03E2CC50 B.LE 0x3E2CCC4
	0x03E2CC54 LDR X8, [X20]
	0x03E2CC58 LDR X1, [X26]
	0x03E2CC5C SUB W21, W22, 0x1
	0x03E2CC60 LDRH W9, [X8 + 0x12E]
	0x03E2CC64 CBZ X9, 0x3E2CC88
	0x03E2CC68 LDR X10, [X8 + 0xB0]
	0x03E2CC6C ADD X10, X10, 0x8
	0x03E2CC70 LDUR X11, [X10 - 0x8]
	0x03E2CC74 CMP X11, X1
	0x03E2CC78 B.EQ 0x3E2CC98
	0x03E2CC7C SUBS X9, X9, 0x1
	0x03E2CC80 ADD X10, X10, 0x10
	0x03E2CC84 B.NE 0x3E2CC70
	0x03E2CC88 MOV X0, X20
	0x03E2CC8C MOV W2, W31
	0x03E2CC90 BL 0x1C5C788
	0x03E2CC94 B 0x3E2CCA4
	0x03E2CC98 LDRSW X9, [X10]
	0x03E2CC9C ADD X8, X8, X9, 0x4, LSL
	0x03E2CCA0 ADD X0, X8, 0x138
	0x03E2CCA4 LDP X8, X2, [X0]
	0x03E2CCA8 MOV X0, X20
	0x03E2CCAC MOV W1, W21
	0x03E2CCB0 BLR X8
	0x03E2CCB4 FMOV S0, W1
	0x03E2CCB8 FSUB S0, S0, S9
	0x03E2CCBC FCMP S0, S8
	0x03E2CCC0 B.LE 0x3E2CC48
	0x03E2CCC4 MOV X0, X19
	0x03E2CCC8 BL 0x3E2584C
	0x03E2CCCC LDR X8, [X24]
	0x03E2CCD0 LDR W9, [X8 + 0xE0]
	0x03E2CCD4 MOV X20, X0
	0x03E2CCD8 CBNZ W9, 0x3E2CCE4
	0x03E2CCDC MOV X0, X8
	0x03E2CCE0 BL 0x1C16DFC
	0x03E2CCE4 MOV X0, X20
	0x03E2CCE8 MOV W1, W22
	0x03E2CCEC BL 0x3E2CD80
	0x03E2CCF0 STR W0, [X19 + 0x1E4]
	0x03E2CCF4 LDP X20, X19, [X31 + 0x60]
	0x03E2CCF8 LDP X22, X21, [X31 + 0x50]
	0x03E2CCFC LDP X24, X23, [X31 + 0x40]
	0x03E2CD00 LDP X26, X25, [X31 + 0x30]
	0x03E2CD04 LDP X30, X27, [X31 + 0x20]
	0x03E2CD08 LDP D9, D8, [X31 + 0x10]
	0x03E2CD0C LDR V10, [X31], #0x70
	0x03E2CD10 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move W21, W2
	007 Move W20, W1
	008 Move X19, X0
	009 Call InputField.get_caretPositionInternal, X0
	010 Move W22, W0
	011 Move X0, X19
	012 Call InputField.get_caretSelectPositionInternal, X0
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move TEMP, X20
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {43}
	018 Move X0, X19
	019 Call InputField.get_caretPositionInternal, X0
	020 Move W22, W0
	021 Move X0, X19
	022 Call InputField.get_caretSelectPositionInternal, X0
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSEL not yet implemented."
	025 Move [X19+408], W8
	026 Move TEMP, X8
	027 And TEMP, TEMP, -2147483648
	028 Compare TEMP, -2147483648
	029 JumpIfEqual {41}
	030 Move X9, [X19+384]
	031 Compare X9, 0
	032 JumpIfEqual {102}
	033 Move W10, [X9+16]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move [X19+408], W10
	036 Move [X19+404], W8
	037 Move W9, [X9+16]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 NotImplemented "Instruction CSEL not yet implemented."
	040 Move [X19+404], W8
	041 Move [X19+408], W31
	042 Move [X19+404], W31
	043 Move W8, [X19+296]
	044 Subtract W8, W8, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, X19
	047 Call InputField.get_caretSelectPositionInternal, X0
	048 Move W1, W0
	049 And W2, W21, 1
	050 Move X0, X19
	051 Call InputField.LineUpCharacterPosition, X0, X1, X2
	052 Move TEMP, X20
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {75}
	056 Add X8, X19, 408
	057 Move [X19+408], W0
	058 Move TEMP, X0
	059 And TEMP, TEMP, -2147483648
	060 Compare TEMP, -2147483648
	061 JumpIfNotEqual {69}
	062 Move W0, W31
	063 Move TEMP, X20
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {83}
	067 Add X8, X19, 408
	068 Move [X19+408], W31
	069 Move X9, [X19+384]
	070 Compare X9, 0
	071 JumpIfEqual {102}
	072 Move W9, [X9+16]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move [X8], W9
	075 Add X8, X19, 404
	076 Move [X19+404], W0
	077 Move TEMP, X0
	078 And TEMP, TEMP, -2147483648
	079 Compare TEMP, -2147483648
	080 JumpIfNotEqual {85}
	081 Move [X8+4], W31
	082 Move [X8], W31
	083 Add X8, X19, 404
	084 Move [X19+404], W31
	085 Move X9, [X19+384]
	086 Compare X9, 0
	087 JumpIfEqual {102}
	088 Move W10, [X9+16]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move [X8], W10
	091 Move [X19+408], W0
	092 Move W8, [X9+16]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CSEL not yet implemented."
	095 Move [X19+408], W8
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X30, [X31+48]
	101 Return 
	102 Call 0x1C17F20

Method: System.Void Delete()

Disassembly:
	0x03E2BBA0 TBNZ X20, 0x0, 0x3E2BBA8
	0x03E2BBA4 STR W31, [X19 + 0x194]
	0x03E2BBA8 LDP X20, X19, [X31 + 0x20]
	0x03E2BBAC LDP X22, X21, [X31 + 0x10]
	0x03E2BBB0 LDR X30, [X31], #0x30
	0x03E2BBB4 RET
	0x03E2BBB8 BL 0x1C16F20
	0x03E2BBBC STR X30, [X31 - 0x30]!
	0x03E2BBC0 STP X22, X21, [X31 + 0x10]
	0x03E2BBC4 STP X20, X19, [X31 + 0x20]
	0x03E2BBC8 MOV W21, W2
	0x03E2BBCC MOV W20, W1
	0x03E2BBD0 MOV X19, X0
	0x03E2BBD4 BL 0x3E26F3C
	0x03E2BBD8 MOV W22, W0
	0x03E2BBDC MOV X0, X19
	0x03E2BBE0 BL 0x3E26F98
	0x03E2BBE4 CMP W22, W0
	0x03E2BBE8 B.EQ 0x3E2BC4C
	0x03E2BBEC TBNZ X20, 0x0, 0x3E2BC4C
	0x03E2BBF0 MOV X0, X19
	0x03E2BBF4 BL 0x3E26F3C
	0x03E2BBF8 MOV W22, W0
	0x03E2BBFC MOV X0, X19
	0x03E2BC00 BL 0x3E26F98
	0x03E2BC04 CMP W22, W0
	0x03E2BC08 CSEL W8, W22, W0, LT
	0x03E2BC0C STR W8, [X19 + 0x198]
	0x03E2BC10 TBNZ X8, 0x1F, 0x3E2BC44
	0x03E2BC14 LDR X9, [X19 + 0x180]
	0x03E2BC18 CBZ X9, 0x3E2BD10
	0x03E2BC1C LDR W10, [X9 + 0x10]
	0x03E2BC20 CMP W10, W8
	0x03E2BC24 B.GE 0x3E2BC2C
	0x03E2BC28 STR W10, [X19 + 0x198]
	0x03E2BC2C STR W8, [X19 + 0x194]
	0x03E2BC30 LDR W9, [X9 + 0x10]
	0x03E2BC34 CMP W9, W8
	0x03E2BC38 CSEL W8, W9, W8, LT
	0x03E2BC3C STR W8, [X19 + 0x194]
	0x03E2BC40 B 0x3E2BC4C
	0x03E2BC44 STR W31, [X19 + 0x198]
	0x03E2BC48 STR W31, [X19 + 0x194]
	0x03E2BC4C LDR W8, [X19 + 0x128]
	0x03E2BC50 SUB W8, W8, 0x1
	0x03E2BC54 CMP W8, 0x1
	0x03E2BC58 B.HI 0x3E2BC88
	0x03E2BC5C MOV X0, X19
	0x03E2BC60 BL 0x3E26F98
	0x03E2BC64 MOV W1, W0
	0x03E2BC68 AND W2, W21, 0x1
	0x03E2BC6C MOV X0, X19
	0x03E2BC70 BL 0x3E2B48C
	0x03E2BC74 TBZ X20, 0x0, 0x3E2BCB4
	0x03E2BC78 ADD X8, X19, 0x198
	0x03E2BC7C STR W0, [X19 + 0x198]
	0x03E2BC80 TBZ X0, 0x1F, 0x3E2BC98
	0x03E2BC84 B 0x3E2BCC4
	0x03E2BC88 MOV W0, W31
	0x03E2BC8C TBZ X20, 0x0, 0x3E2BCCC
	0x03E2BC90 ADD X8, X19, 0x198
	0x03E2BC94 STR W31, [X19 + 0x198]
	0x03E2BC98 LDR X9, [X19 + 0x180]
	0x03E2BC9C CBZ X9, 0x3E2BD10
	0x03E2BCA0 LDR W9, [X9 + 0x10]
	0x03E2BCA4 CMP W9, W0
	0x03E2BCA8 B.GE 0x3E2BD00
	0x03E2BCAC STR W9, [X8]
	0x03E2BCB0 B 0x3E2BD00
	0x03E2BCB4 ADD X8, X19, 0x194
	0x03E2BCB8 STR W0, [X19 + 0x194]
	0x03E2BCBC TBZ X0, 0x1F, 0x3E2BCD4
	0x03E2BCC0 STR W31, [X8 + 0x4]
	0x03E2BCC4 STR W31, [X8]
	0x03E2BCC8 B 0x3E2BD00
	0x03E2BCCC ADD X8, X19, 0x194
	0x03E2BCD0 STR W31, [X19 + 0x194]
	0x03E2BCD4 LDR X9, [X19 + 0x180]
	0x03E2BCD8 CBZ X9, 0x3E2BD10
	0x03E2BCDC LDR W10, [X9 + 0x10]
	0x03E2BCE0 CMP W10, W0
	0x03E2BCE4 B.GE 0x3E2BCEC
	0x03E2BCE8 STR W10, [X8]
	0x03E2BCEC STR W0, [X19 + 0x198]
	0x03E2BCF0 LDR W8, [X9 + 0x10]
	0x03E2BCF4 CMP W8, W0
	0x03E2BCF8 CSEL W8, W8, W0, LT
	0x03E2BCFC STR W8, [X19 + 0x198]
	0x03E2BD00 LDP X20, X19, [X31 + 0x20]
	0x03E2BD04 LDP X22, X21, [X31 + 0x10]
	0x03E2BD08 LDR X30, [X31], #0x30
	0x03E2BD0C RET
	0x03E2BD10 BL 0x1C16F20
	0x03E2BD14 STR X30, [X31 - 0x20]!
	0x03E2BD18 STP X20, X19, [X31 + 0x10]
	0x03E2BD1C ADRP X20, 0x5BD000
	0x03E2BD20 LDRB W8, [X20 + 0x6EE]
	0x03E2BD24 MOV X19, X0
	0x03E2BD28 STRH W1, [X31 + 0xC]
	0x03E2BD2C TBNZ X8, 0x0, 0x3E2BD44
	0x03E2BD30 ADRP X0, 0x2CA000
	0x03E2BD34 LDR X0, [X0 + 0x170]
	0x03E2BD38 BL 0x1C16CF4
	0x03E2BD3C MOVZ W8, 0x1
	0x03E2BD40 STRB W8, [X20 + 0x6EE]
	0x03E2BD44 LDRB W8, [X19 + 0x190]
	0x03E2BD48 CBNZ W8, 0x3E2BE1C
	0x03E2BD4C ADRP X8, 0x2CA000
	0x03E2BD50 LDR X8, [X8 + 0x170]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W8, [X0+400]
	008 Compare W8, 0
	009 JumpIfNotEqual {16}
	010 Move X19, X0
	011 Call InputField.get_caretPositionInternal, X0
	012 Move W20, W0
	013 Move X0, X19
	014 Call InputField.get_caretSelectPositionInternal, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X20, [X31+32]
	017 Move X19, [X31+40]
	018 Move X22, [X31+16]
	019 Move X21, [X31+24]
	020 Move X30, [X31+48]
	021 Move X23, [X31+56]
	022 Return 
	023 Move X0, X19
	024 Call InputField.get_caretPositionInternal, X0
	025 Move W21, W0
	026 Move X0, X19
	027 Call InputField.get_caretSelectPositionInternal, X0
	028 Move X20, [X19+384]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, X19
	031 Call InputField.get_caretPositionInternal, X0
	032 Compare X20, 0
	033 JumpIfEqual {122}
	034 Move W2, W0
	035 Move X0, X20
	036 Move W1, W31
	037 Move X3, X31
	038 Call String.Substring, X0, X1, X2
	039 Move X21, [X19+384]
	040 Move X20, X0
	041 Move X0, X19
	042 Call InputField.get_caretSelectPositionInternal, X0
	043 Move X8, [X19+384]
	044 Compare X8, 0
	045 JumpIfEqual {122}
	046 Move W23, [X8+16]
	047 Move W22, W0
	048 Move X0, X19
	049 Call InputField.get_caretSelectPositionInternal, X0
	050 Compare X21, 0
	051 JumpIfEqual {122}
	052 Subtract W2, W23, W0
	053 Move X0, X21
	054 Move W1, W22
	055 Move X3, X31
	056 Call String.Substring, X0, X1, X2
	057 Move X1, X0
	058 Move X0, X20
	059 Move X2, X31
	060 Call String.Concat, X0, X1
	061 Move [X19+384], X0
	062 Move X0, X19
	063 Call InputField.get_caretPositionInternal, X0
	064 Move [X19+408], W0
	065 Move TEMP, X0
	066 And TEMP, TEMP, -2147483648
	067 Compare TEMP, -2147483648
	068 JumpIfEqual {120}
	069 Move X8, [X19+384]
	070 Compare X8, 0
	071 JumpIfEqual {122}
	072 Move W8, [X8+16]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move [X19+408], W8
	075 Move X0, X19
	076 Call InputField.get_caretSelectPositionInternal, X0
	077 Compare X20, 0
	078 JumpIfEqual {122}
	079 Move W2, W0
	080 Move X0, X20
	081 Move W1, W31
	082 Move X3, X31
	083 Call String.Substring, X0, X1, X2
	084 Move X21, [X19+384]
	085 Move X20, X0
	086 Move X0, X19
	087 Call InputField.get_caretPositionInternal, X0
	088 Move X8, [X19+384]
	089 Compare X8, 0
	090 JumpIfEqual {122}
	091 Move W23, [X8+16]
	092 Move W22, W0
	093 Move X0, X19
	094 Call InputField.get_caretPositionInternal, X0
	095 Compare X21, 0
	096 JumpIfEqual {122}
	097 Subtract W2, W23, W0
	098 Move X0, X21
	099 Move W1, W22
	100 Move X3, X31
	101 Call String.Substring, X0, X1, X2
	102 Move X1, X0
	103 Move X0, X20
	104 Move X2, X31
	105 Call String.Concat, X0, X1
	106 Move [X19+384], X0
	107 Move X0, X19
	108 Call InputField.get_caretSelectPositionInternal, X0
	109 Move [X19+404], W0
	110 Move TEMP, X0
	111 And TEMP, TEMP, -2147483648
	112 Compare TEMP, -2147483648
	113 JumpIfEqual {121}
	114 Move X8, [X19+384]
	115 Compare X8, 0
	116 JumpIfEqual {122}
	117 Move W8, [X8+16]
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move [X19+404], W8
	120 Move [X19+408], W31
	121 Move [X19+404], W31
	122 Call 0x1C17F20

Method: System.Void ForwardSpace()

Disassembly:
	0x03E2BA54 B 0x3E2BA64
	0x03E2BA58 LDRSW X9, [X10]
	0x03E2BA5C ADD X8, X8, X9, 0x4, LSL
	0x03E2BA60 ADD X0, X8, 0x138
	0x03E2BA64 LDP X8, X2, [X0]
	0x03E2BA68 MOV X0, X22
	0x03E2BA6C MOV W1, W21
	0x03E2BA70 BLR X8
	0x03E2BA74 FCMP S0, S8
	0x03E2BA78 B.GE 0x3E2BA8C
	0x03E2BA7C ADD W21, W21, 0x1
	0x03E2BA80 CMP W21, W20
	0x03E2BA84 B.NE 0x3E2B9FC
	0x03E2BA88 B 0x3E2B9BC
	0x03E2BA8C MOV W20, W21
	0x03E2BA90 B 0x3E2B9BC
	0x03E2BA94 BL 0x1C16F20
	0x03E2BA98 STR X30, [X31 - 0x30]!
	0x03E2BA9C STP X22, X21, [X31 + 0x10]
	0x03E2BAA0 STP X20, X19, [X31 + 0x20]
	0x03E2BAA4 MOV W21, W2
	0x03E2BAA8 MOV W20, W1
	0x03E2BAAC MOV X19, X0
	0x03E2BAB0 BL 0x3E26F3C
	0x03E2BAB4 MOV W22, W0
	0x03E2BAB8 MOV X0, X19
	0x03E2BABC BL 0x3E26F98
	0x03E2BAC0 CMP W22, W0
	0x03E2BAC4 B.EQ 0x3E2BB28
	0x03E2BAC8 TBNZ X20, 0x0, 0x3E2BB28
	0x03E2BACC MOV X0, X19
	0x03E2BAD0 BL 0x3E26F3C
	0x03E2BAD4 MOV W22, W0
	0x03E2BAD8 MOV X0, X19
	0x03E2BADC BL 0x3E26F98
	0x03E2BAE0 CMP W22, W0
	0x03E2BAE4 CSEL W8, W22, W0, GT
	0x03E2BAE8 STR W8, [X19 + 0x198]
	0x03E2BAEC TBNZ X8, 0x1F, 0x3E2BB20
	0x03E2BAF0 LDR X9, [X19 + 0x180]
	0x03E2BAF4 CBZ X9, 0x3E2BBB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+400]
	005 Compare W8, 0
	006 JumpIfEqual {11}
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Return 
	011 Move X19, X0
	012 Call InputField.get_caretPositionInternal, X0
	013 Move W20, W0
	014 Move X0, X19
	015 Call InputField.get_caretSelectPositionInternal, X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X0, X19
	018 Call InputField.get_caretPositionInternal, X0
	019 Move X20, [X19+384]
	020 Compare X20, 0
	021 JumpIfEqual {44}
	022 Move W8, [X20+16]
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X19
	025 Call InputField.get_caretPositionInternal, X0
	026 Move W1, W0
	027 Move W2, 1
	028 Move X0, X20
	029 Move X3, X31
	030 Call String.Remove, X0, X1, X2
	031 Move [X19+384], X0
	032 Move X0, X19
	033 Call InputField.Delete, X0
	034 Move X0, X19
	035 Call InputField.UpdateTouchKeyboardFromEditChanges, X0
	036 Move X0, X19
	037 Call InputField.SendOnValueChanged, X0
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Call InputField.UpdateLabel, X0
	043 Return 
	044 Call 0x1C17F20

Method: System.Void Backspace()

Disassembly:
	0x03E2B950 CBZ X0, 0x3E2BA94
	0x03E2B954 MOV X1, X31
	0x03E2B958 BL 0x3CCF6DC
	0x03E2B95C CBZ X0, 0x3E2BA94
	0x03E2B960 ADRP X10, 0x33F000
	0x03E2B964 LDR X8, [X0]
	0x03E2B968 LDR X10, [X10 + 0xFD8]
	0x03E2B96C MOV X21, X0
	0x03E2B970 LDRH W9, [X8 + 0x12E]
	0x03E2B974 LDR X1, [X10]
	0x03E2B978 CBZ X9, 0x3E2B99C
	0x03E2B97C LDR X10, [X8 + 0xB0]
	0x03E2B980 ADD X10, X10, 0x8
	0x03E2B984 LDUR X11, [X10 - 0x8]
	0x03E2B988 CMP X11, X1
	0x03E2B98C B.EQ 0x3E2B9D4
	0x03E2B990 SUBS X9, X9, 0x1
	0x03E2B994 ADD X10, X10, 0x10
	0x03E2B998 B.NE 0x3E2B984
	0x03E2B99C MOV X0, X21
	0x03E2B9A0 MOV W2, W31
	0x03E2B9A4 BL 0x1C5C788
	0x03E2B9A8 B 0x3E2B9E0
	0x03E2B9AC TBZ X21, 0x0, 0x3E2B9BC
	0x03E2B9B0 LDR X8, [X19 + 0x180]
	0x03E2B9B4 CBZ X8, 0x3E2BA94
	0x03E2B9B8 LDR W20, [X8 + 0x10]
	0x03E2B9BC MOV W0, W20
	0x03E2B9C0 LDP X20, X19, [X31 + 0x30]
	0x03E2B9C4 LDP X22, X21, [X31 + 0x20]
	0x03E2B9C8 LDP X30, X23, [X31 + 0x10]
	0x03E2B9CC LDR V8, [X31], #0x40
	0x03E2B9D0 RET
	0x03E2B9D4 LDRSW X9, [X10]
	0x03E2B9D8 ADD X8, X8, X9, 0x4, LSL
	0x03E2B9DC ADD X0, X8, 0x138
	0x03E2B9E0 LDP X8, X2, [X0]
	0x03E2B9E4 MOV X0, X21
	0x03E2B9E8 MOV W1, W22
	0x03E2B9EC BLR X8
	0x03E2B9F0 MOV X21, X0
	0x03E2B9F4 CMP W20, W21
	0x03E2B9F8 B.LE 0x3E2B9BC
	0x03E2B9FC MOV X0, X19
	0x03E2BA00 BL 0x3E2584C
	0x03E2BA04 CBZ X0, 0x3E2BA94
	0x03E2BA08 MOV X1, X31
	0x03E2BA0C BL 0x3CCF680
	0x03E2BA10 CBZ X0, 0x3E2BA94
	0x03E2BA14 LDR X8, [X0]
	0x03E2BA18 LDR X1, [X23]
	0x03E2BA1C MOV X22, X0
	0x03E2BA20 LDRH W9, [X8 + 0x12E]
	0x03E2BA24 CBZ X9, 0x3E2BA48
	0x03E2BA28 LDR X10, [X8 + 0xB0]
	0x03E2BA2C ADD X10, X10, 0x8
	0x03E2BA30 LDUR X11, [X10 - 0x8]
	0x03E2BA34 CMP X11, X1
	0x03E2BA38 B.EQ 0x3E2BA58
	0x03E2BA3C SUBS X9, X9, 0x1
	0x03E2BA40 ADD X10, X10, 0x10
	0x03E2BA44 B.NE 0x3E2BA30
	0x03E2BA48 MOV X0, X22
	0x03E2BA4C MOV W2, W31
	0x03E2BA50 BL 0x1C5C788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+400]
	005 Compare W8, 0
	006 JumpIfEqual {11}
	007 Move X20, [X31+16]
	008 Move X19, [X31+24]
	009 Move X30, [X31+32]
	010 Return 
	011 Move X19, X0
	012 Call InputField.get_caretPositionInternal, X0
	013 Move W20, W0
	014 Move X0, X19
	015 Call InputField.get_caretSelectPositionInternal, X0
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X0, X19
	018 Call InputField.get_caretPositionInternal, X0
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, X19
	021 Call InputField.get_caretPositionInternal, X0
	022 Move X20, [X19+384]
	023 Compare X20, 0
	024 JumpIfEqual {65}
	025 Move W8, [X20+16]
	026 Subtract W9, W0, 1
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X19
	029 Call InputField.get_caretPositionInternal, X0
	030 Subtract W1, W0, 1
	031 Move W2, 1
	032 Move X0, X20
	033 Move X3, X31
	034 Call String.Remove, X0, X1, X2
	035 Move [X19+384], X0
	036 Move X0, X19
	037 Call InputField.get_caretPositionInternal, X0
	038 Subtract W8, W0, 1
	039 Add X9, X19, 404
	040 Move [X19+404], W8
	041 Move X10, [X19+384]
	042 Compare X10, 0
	043 JumpIfEqual {65}
	044 Move W11, [X10+16]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X9], W11
	047 Move [X19+408], W8
	048 Move W9, [X10+16]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSEL not yet implemented."
	051 Move [X19+408], W8
	052 Move X0, X19
	053 Call InputField.Delete, X0
	054 Move X0, X19
	055 Call InputField.UpdateTouchKeyboardFromEditChanges, X0
	056 Move X0, X19
	057 Call InputField.SendOnValueChanged, X0
	058 Move X0, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Call InputField.UpdateLabel, X0
	063 Return 
	064 Move [X9], X31
	065 Call 0x1C17F20

Method: System.Void Insert(System.Char c)

Disassembly:
	0x03E2CD14 STR X30, [X31 - 0x20]!
	0x03E2CD18 STP X20, X19, [X31 + 0x10]
	0x03E2CD1C LDR W20, [X0 + 0x1E4]
	0x03E2CD20 MOV X19, X0
	0x03E2CD24 BL 0x3E26F3C
	0x03E2CD28 CMP W20, W0
	0x03E2CD2C B.GT 0x3E2CD58
	0x03E2CD30 LDR W20, [X19 + 0x1E4]
	0x03E2CD34 MOV X0, X19
	0x03E2CD38 BL 0x3E26F98
	0x03E2CD3C CMP W20, W0
	0x03E2CD40 B.GT 0x3E2CD58
	0x03E2CD44 LDR W20, [X19 + 0x1E8]
	0x03E2CD48 MOV X0, X19
	0x03E2CD4C BL 0x3E26F3C
	0x03E2CD50 CMP W20, W0
	0x03E2CD54 B.GE 0x3E2CD68
	0x03E2CD58 MOV W0, W31
	0x03E2CD5C LDP X20, X19, [X31 + 0x10]
	0x03E2CD60 LDR X30, [X31], #0x20
	0x03E2CD64 RET
	0x03E2CD68 LDR W20, [X19 + 0x1E8]
	0x03E2CD6C MOV X0, X19
	0x03E2CD70 BL 0x3E26F98
	0x03E2CD74 CMP W20, W0
	0x03E2CD78 CSET W0, GE
	0x03E2CD7C B 0x3E2CD5C
	0x03E2CD80 STP X30, X21, [X31 - 0x20]!
	0x03E2CD84 STP X20, X19, [X31 + 0x10]
	0x03E2CD88 ADRP X21, 0x5BC000
	0x03E2CD8C LDRB W8, [X21 + 0x6F4]
	0x03E2CD90 MOV W19, W1
	0x03E2CD94 MOV X20, X0
	0x03E2CD98 TBNZ X8, 0x0, 0x3E2CDBC
	0x03E2CD9C ADRP X0, 0x33E000
	0x03E2CDA0 LDR X0, [X0 + 0xFE8]
	0x03E2CDA4 BL 0x1C16CF4
	0x03E2CDA8 ADRP X0, 0x33E000
	0x03E2CDAC LDR X0, [X0 + 0xFD8]
	0x03E2CDB0 BL 0x1C16CF4
	0x03E2CDB4 MOVZ W8, 0x1
	0x03E2CDB8 STRB W8, [X21 + 0x6F4]
	0x03E2CDBC CBZ X20, 0x3E2CECC
	0x03E2CDC0 MOV X0, X20
	0x03E2CDC4 MOV X1, X31
	0x03E2CDC8 BL 0x3CCF6DC
	0x03E2CDCC CBZ X0, 0x3E2CECC
	0x03E2CDD0 ADRP X10, 0x33E000
	0x03E2CDD4 LDR X8, [X0]
	0x03E2CDD8 LDR X10, [X10 + 0xFE8]
	0x03E2CDDC MOV X21, X0
	0x03E2CDE0 LDRH W9, [X8 + 0x12E]
	0x03E2CDE4 LDR X1, [X10]
	0x03E2CDE8 CBZ X9, 0x3E2CE0C
	0x03E2CDEC LDR X10, [X8 + 0xB0]
	0x03E2CDF0 ADD X10, X10, 0x8
	0x03E2CDF4 LDUR X11, [X10 - 0x8]
	0x03E2CDF8 CMP X11, X1
	0x03E2CDFC B.EQ 0x3E2CE1C
	0x03E2CE00 SUBS X9, X9, 0x1
	0x03E2CE04 ADD X10, X10, 0x10
	0x03E2CE08 B.NE 0x3E2CDF4
	0x03E2CE0C MOV X0, X21
	0x03E2CE10 MOV W2, W31
	0x03E2CE14 BL 0x1C5C788
	0x03E2CE18 B 0x3E2CE28
	0x03E2CE1C LDRSW X9, [X10]
	0x03E2CE20 ADD X8, X8, X9, 0x4, LSL
	0x03E2CE24 ADD X0, X8, 0x138
	0x03E2CE28 LDP X8, X1, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5BD000
	005 Move W8, [X20+1774]
	006 Move X19, X0
	007 NotImplemented "Instruction STRH not yet implemented."
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2CA000
	013 Move X0, [X0+368]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1774], W8
	017 Move W8, [X19+400]
	018 Compare W8, 0
	019 JumpIfNotEqual {71}
	020 Move X8, 0x2CA000
	021 Move X8, [X8+368]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Add X0, X31, 12
	028 Move X1, X31
	029 Call Char.ToString, X0
	030 Move X20, X0
	031 Move X0, X19
	032 Call InputField.Delete, X0
	033 Move W8, [X19+308]
	034 Move X0, [X19+384]
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Compare X0, 0
	037 JumpIfEqual {75}
	038 Move W9, [X0+16]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare X0, 0
	041 JumpIfEqual {75}
	042 Move W1, [X19+404]
	043 Move X2, X20
	044 Move X3, X31
	045 Call String.Insert, X0, X1, X2
	046 Move [X19+384], X0
	047 Move X0, X19
	048 Call InputField.get_caretPositionInternal, X0
	049 Compare X20, 0
	050 JumpIfEqual {75}
	051 Move W8, [X20+16]
	052 Add X9, X19, 404
	053 Add W8, W8, W0
	054 Move [X9], W8
	055 Move X10, [X19+384]
	056 Compare X10, 0
	057 JumpIfEqual {75}
	058 Move W11, [X10+16]
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move [X9], W11
	061 Move [X19+408], W8
	062 Move W9, [X10+16]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 NotImplemented "Instruction CSEL not yet implemented."
	065 Move [X19+408], W8
	066 Move [X9], X31
	067 Move X0, X19
	068 Call InputField.UpdateTouchKeyboardFromEditChanges, X0
	069 Move X0, X19
	070 Call InputField.SendOnValueChanged, X0
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Return 
	075 Call 0x1C17F20

Method: System.Void UpdateTouchKeyboardFromEditChanges()

Disassembly:
	0x03E2BD54 LDR X0, [X8]
	0x03E2BD58 LDR W8, [X0 + 0xE0]
	0x03E2BD5C CBNZ W8, 0x3E2BD64
	0x03E2BD60 BL 0x1C16DFC
	0x03E2BD64 ADD X0, X31, 0xC
	0x03E2BD68 MOV X1, X31
	0x03E2BD6C BL 0x330A76C
	0x03E2BD70 MOV X20, X0
	0x03E2BD74 MOV X0, X19
	0x03E2BD78 BL 0x3E2ABA0
	0x03E2BD7C LDR W8, [X19 + 0x134]
	0x03E2BD80 LDR X0, [X19 + 0x180]
	0x03E2BD84 CMP W8, 0x1
	0x03E2BD88 B.LT 0x3E2BDA0
	0x03E2BD8C CBZ X0, 0x3E2BE28
	0x03E2BD90 LDR W9, [X0 + 0x10]
	0x03E2BD94 CMP W9, W8
	0x03E2BD98 B.LT 0x3E2BDA4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+256]
	004 Compare X8, 0
	005 JumpIfEqual {25}
	006 Move X19, X0
	007 Move X0, X31
	008 Call TouchScreenKeyboard.get_isSupported
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {16}
	013 Move W8, [X19+528]
	014 Compare W8, 0
	015 JumpIfEqual {25}
	016 Move X0, [X19+256]
	017 Compare X0, 0
	018 JumpIfEqual {28}
	019 Move X1, [X19+384]
	020 Move X2, X31
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call TouchScreenKeyboard.set_text, X0, X1
	024 Return 
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 
	028 Call 0x1C17F20

Method: System.Void SendOnValueChangedAndUpdateLabel()

Disassembly:
	0x03E2A608 B.HI 0x3E2A70C
	0x03E2A60C ADRP X9, 0xFFFFFFFFFCD6E000
	0x03E2A610 ADD X9, X9, 0x600
	0x03E2A614 ADR X10, 0x10
	0x03E2A618 LDRB W11, [X9, X8, LSL]
	0x03E2A61C ADD X10, X10, X11, 0x2, LSL

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call InputField.SendOnValueChanged, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Call InputField.UpdateLabel, X0
	009 Return 

Method: System.Void SendOnValueChanged()

Disassembly:
	0x03E26DF4 MOV X19, X0
	0x03E26DF8 TBNZ X8, 0x0, 0x3E26E10
	0x03E26DFC ADRP X0, 0x344000
	0x03E26E00 LDR X0, [X0 + 0xFA8]
	0x03E26E04 BL 0x1C16CF4
	0x03E26E08 MOVZ W8, 0x1
	0x03E26E0C STRB W8, [X22 + 0x6D1]
	0x03E26E10 LDR X2, [X21]
	0x03E26E14 ADD X0, X19, 0x130
	0x03E26E18 MOV W1, W20
	0x03E26E1C BL 0x22543F8
	0x03E26E20 TBZ X0, 0x0, 0x3E26E30
	0x03E26E24 LDR W8, [X19 + 0x118]
	0x03E26E28 CMP W8, 0x9
	0x03E26E2C B.NE 0x3E26E40
	0x03E26E30 LDP X20, X19, [X31 + 0x20]
	0x03E26E34 LDP X22, X21, [X31 + 0x10]
	0x03E26E38 LDR X30, [X31], #0x30
	0x03E26E3C RET
	0x03E26E40 MOV X0, X19
	0x03E26E44 LDP X20, X19, [X31 + 0x20]
	0x03E26E48 LDP X22, X21, [X31 + 0x10]
	0x03E26E4C MOVZ W1, 0x9
	0x03E26E50 LDR X30, [X31], #0x30
	0x03E26E54 B 0x3E26A38
	0x03E26E58 LDRB W0, [X0 + 0x190]
	0x03E26E5C RET
	0x03E26E60 AND W8, W1, 0x1
	0x03E26E64 STRB W8, [X0 + 0x190]
	0x03E26E68 RET
	0x03E26E6C LDR W8, [X0 + 0x128]
	0x03E26E70 SUB W8, W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C3000
	006 Move X21, 0x345000
	007 Move W8, [X20+1775]
	008 Move X21, [X21+3888]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x334000
	015 Move X0, [X0+72]
	016 Call 0x1C17CF4
	017 Move X0, 0x345000
	018 Move X0, [X0+3888]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1775], W8
	022 Move X0, [X21]
	023 Move X1, X19
	024 Move X2, X31
	025 Call UISystemProfilerApi.AddMarker, X0, X1
	026 Move X0, [X19+328]
	027 Compare X0, 0
	028 JumpIfEqual {39}
	029 Move X8, 0x334000
	030 Move X8, [X8+72]
	031 Move X1, [X19+384]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, [X8]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call UnityEvent`1<Object>.Invoke, X0, X1
	038 Return 
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 

Method: System.Void SendOnEndEdit()

Disassembly:
	0x03E2CE2C MOV X0, X21
	0x03E2CE30 BLR X8
	0x03E2CE34 MOV W21, W0
	0x03E2CE38 MOV X0, X20
	0x03E2CE3C MOV X1, X31
	0x03E2CE40 BL 0x3CCF6DC
	0x03E2CE44 CBZ X0, 0x3E2CECC
	0x03E2CE48 ADRP X10, 0x33E000
	0x03E2CE4C LDR X8, [X0]
	0x03E2CE50 LDR X10, [X10 + 0xFD8]
	0x03E2CE54 MOV X20, X0
	0x03E2CE58 SUB W21, W21, 0x1
	0x03E2CE5C LDRH W9, [X8 + 0x12E]
	0x03E2CE60 LDR X1, [X10]
	0x03E2CE64 CBZ X9, 0x3E2CE88
	0x03E2CE68 LDR X10, [X8 + 0xB0]
	0x03E2CE6C ADD X10, X10, 0x8
	0x03E2CE70 LDUR X11, [X10 - 0x8]
	0x03E2CE74 CMP X11, X1
	0x03E2CE78 B.EQ 0x3E2CE98
	0x03E2CE7C SUBS X9, X9, 0x1
	0x03E2CE80 ADD X10, X10, 0x10
	0x03E2CE84 B.NE 0x3E2CE70
	0x03E2CE88 MOV X0, X20
	0x03E2CE8C MOV W2, W31
	0x03E2CE90 BL 0x1C5C788
	0x03E2CE94 B 0x3E2CEA4
	0x03E2CE98 LDRSW X9, [X10]
	0x03E2CE9C ADD X8, X8, X9, 0x4, LSL
	0x03E2CEA0 ADD X0, X8, 0x138
	0x03E2CEA4 LDP X8, X2, [X0]
	0x03E2CEA8 CMP W21, W19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5BD000
	006 Move X21, 0x340000
	007 Move W8, [X20+1776]
	008 Move X21, [X21]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x32E000
	015 Move X0, [X0+72]
	016 Call 0x1C17CF4
	017 Move X0, 0x340000
	018 Move X0, [X0]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1776], W8
	022 Move X0, [X21]
	023 Move X1, X19
	024 Move X2, X31
	025 Call UISystemProfilerApi.AddMarker, X0, X1
	026 Move X0, [X19+320]
	027 Compare X0, 0
	028 JumpIfEqual {39}
	029 Move X8, 0x32E000
	030 Move X8, [X8+72]
	031 Move X1, [X19+384]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, [X8]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call UnityEvent`1<Object>.Invoke, X0, X1
	038 Return 
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 

Method: System.Void SendOnSubmit()

Disassembly:
	0x03E29E84 ADRP X0, 0x341000
	0x03E29E88 LDR X0, [X0 + 0xFD8]
	0x03E29E8C BL 0x1C16CF4
	0x03E29E90 MOVZ W8, 0x1
	0x03E29E94 STRB W8, [X20 + 0x6F5]
	0x03E29E98 CBZ X19, 0x3E29FBC
	0x03E29E9C MOV X0, X19
	0x03E29EA0 MOV X1, X31
	0x03E29EA4 BL 0x3CCF6DC
	0x03E29EA8 CBZ X0, 0x3E29FBC
	0x03E29EAC ADRP X10, 0x341000
	0x03E29EB0 LDR X8, [X0]
	0x03E29EB4 LDR X10, [X10 + 0xFE8]
	0x03E29EB8 MOV X20, X0
	0x03E29EBC BIC W21, W21, W21, 0x1F
	0x03E29EC0 LDRH W9, [X8 + 0x12E]
	0x03E29EC4 LDR X1, [X10]
	0x03E29EC8 CBZ X9, 0x3E29EEC
	0x03E29ECC LDR X10, [X8 + 0xB0]
	0x03E29ED0 ADD X10, X10, 0x8
	0x03E29ED4 LDUR X11, [X10 - 0x8]
	0x03E29ED8 CMP X11, X1
	0x03E29EDC B.EQ 0x3E29EFC
	0x03E29EE0 SUBS X9, X9, 0x1
	0x03E29EE4 ADD X10, X10, 0x10
	0x03E29EE8 B.NE 0x3E29ED4
	0x03E29EEC MOV X0, X20
	0x03E29EF0 MOV W2, W31
	0x03E29EF4 BL 0x1C5C788
	0x03E29EF8 B 0x3E29F08
	0x03E29EFC LDRSW X9, [X10]
	0x03E29F00 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C0000
	006 Move X21, 0x342000
	007 Move W8, [X20+1777]
	008 Move X21, [X21+4048]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x331000
	015 Move X0, [X0+72]
	016 Call 0x1C17CF4
	017 Move X0, 0x342000
	018 Move X0, [X0+4048]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1777], W8
	022 Move X0, [X21]
	023 Move X1, X19
	024 Move X2, X31
	025 Call UISystemProfilerApi.AddMarker, X0, X1
	026 Move X0, [X19+312]
	027 Compare X0, 0
	028 JumpIfEqual {39}
	029 Move X8, 0x331000
	030 Move X8, [X8+72]
	031 Move X1, [X19+384]
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X2, [X8]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call UnityEvent`1<Object>.Invoke, X0, X1
	038 Return 
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 

Method: System.Void Append(System.String input)

Disassembly:
	0x03E2CEAC CSEL W9, W21, W19, LT
	0x03E2CEB0 CMP W19, 0x0
	0x03E2CEB4 CSEL W1, W31, W9, LT
	0x03E2CEB8 MOV X0, X20
	0x03E2CEBC BLR X8
	0x03E2CEC0 LDP X20, X19, [X31 + 0x10]
	0x03E2CEC4 LDP X30, X21, [X31], #0x20
	0x03E2CEC8 RET
	0x03E2CECC BL 0x1C16F20
	0x03E2CED0 B 0x3E25E74
	0x03E2CED4 CMP W1, 0x4
	0x03E2CED8 B.NE 0x3E2CEE0
	0x03E2CEDC B 0x3E2CEE4
	0x03E2CEE0 RET
	0x03E2CEE4 STP X30, X23, [X31 - 0x30]!
	0x03E2CEE8 STP X22, X21, [X31 + 0x10]
	0x03E2CEEC STP X20, X19, [X31 + 0x20]
	0x03E2CEF0 ADRP X20, 0x5BC000
	0x03E2CEF4 LDRB W8, [X20 + 0x6F8]
	0x03E2CEF8 MOV X19, X0
	0x03E2CEFC TBNZ X8, 0x0, 0x3E2CF8C
	0x03E2CF00 ADRP X0, 0x33F000
	0x03E2CF04 LDR X0, [X0 + 0x8]
	0x03E2CF08 BL 0x1C16CF4
	0x03E2CF0C ADRP X0, 0x327000
	0x03E2CF10 LDR X0, [X0 + 0xCC0]
	0x03E2CF14 BL 0x1C16CF4
	0x03E2CF18 ADRP X0, 0x32D000
	0x03E2CF1C LDR X0, [X0 + 0x110]
	0x03E2CF20 BL 0x1C16CF4
	0x03E2CF24 ADRP X0, 0x327000
	0x03E2CF28 LDR X0, [X0 + 0xB40]
	0x03E2CF2C BL 0x1C16CF4
	0x03E2CF30 ADRP X0, 0x2C7000
	0x03E2CF34 LDR X0, [X0 + 0xA58]
	0x03E2CF38 BL 0x1C16CF4
	0x03E2CF3C ADRP X0, 0x32D000
	0x03E2CF40 LDR X0, [X0 + 0x118]
	0x03E2CF44 BL 0x1C16CF4
	0x03E2CF48 ADRP X0, 0x2C7000
	0x03E2CF4C LDR X0, [X0 + 0x598]
	0x03E2CF50 BL 0x1C16CF4
	0x03E2CF54 ADRP X0, 0x32D000
	0x03E2CF58 LDR X0, [X0 + 0xA48]
	0x03E2CF5C BL 0x1C16CF4
	0x03E2CF60 ADRP X0, 0x2CF000
	0x03E2CF64 LDR X0, [X0 + 0xC60]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move W8, [X0+400]
	009 Compare W8, 0
	010 JumpIfNotEqual {46}
	011 Move X19, X0
	012 Move X0, X31
	013 Move X20, X1
	014 Call TouchScreenKeyboard.get_isSupported
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {22}
	019 Move W8, [X19+528]
	020 Compare W8, 0
	021 JumpIfEqual {46}
	022 Compare X20, 0
	023 JumpIfEqual {54}
	024 Move W22, [X20+16]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W21, W31
	027 Move W23, 1
	028 Move W24, 0x2600
	029 Move X0, X20
	030 Move W1, W21
	031 Move X2, X31
	032 Call String.get_Chars, X0, X1
	033 And W8, W0, 0xFFFF
	034 Move W1, W0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 NotImplemented "Instruction LSLV not yet implemented."
	038 And W31, W8, W24
	039 Move X8, [X19]
	040 Move X0, X19
	041 Move X9, [X8+1384]
	042 Move X2, [X8+1392]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Add W21, W21, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X20, [X31+48]
	047 Move X19, [X31+56]
	048 Move X22, [X31+32]
	049 Move X21, [X31+40]
	050 Move X24, [X31+16]
	051 Move X23, [X31+24]
	052 Move X30, [X31+64]
	053 Return 
	054 Call 0x1C17F20

Method: System.Void Append(System.Char input)

Disassembly:
	0x03E2CF68 BL 0x1C16CF4
	0x03E2CF6C ADRP X0, 0x2C7000
	0x03E2CF70 LDR X0, [X0 + 0x6C0]
	0x03E2CF74 BL 0x1C16CF4
	0x03E2CF78 ADRP X0, 0x33F000
	0x03E2CF7C LDR X0, [X0 + 0x10]
	0x03E2CF80 BL 0x1C16CF4
	0x03E2CF84 MOVZ W8, 0x1
	0x03E2CF88 STRB W8, [X20 + 0x6F8]
	0x03E2CF8C MOV X0, X31
	0x03E2CF90 BL 0x3C3CC00
	0x03E2CF94 TBZ X0, 0x0, 0x3E2CFAC
	0x03E2CF98 LDRB W8, [X19 + 0x210]
	0x03E2CF9C CBNZ W8, 0x3E2CFAC
	0x03E2CFA0 MOV X0, X19
	0x03E2CFA4 BL 0x3E25908
	0x03E2CFA8 TBZ X0, 0x0, 0x3E2D2A0
	0x03E2CFAC ADRP X23, 0x2C7000
	0x03E2CFB0 LDR X23, [X23 + 0x598]
	0x03E2CFB4 LDR X20, [X19 + 0x1B8]
	0x03E2CFB8 LDR X0, [X23]
	0x03E2CFBC LDR W8, [X0 + 0xE0]
	0x03E2CFC0 CBNZ W8, 0x3E2CFC8
	0x03E2CFC4 BL 0x1C16DFC
	0x03E2CFC8 MOV X0, X20
	0x03E2CFCC MOV X1, X31
	0x03E2CFD0 MOV X2, X31
	0x03E2CFD4 BL 0x3C3883C
	0x03E2CFD8 TBZ X0, 0x0, 0x3E2D278
	0x03E2CFDC LDR X0, [X23]
	0x03E2CFE0 LDR X20, [X19 + 0x108]
	0x03E2CFE4 LDR W8, [X0 + 0xE0]
	0x03E2CFE8 CBNZ W8, 0x3E2CFF0
	0x03E2CFEC BL 0x1C16DFC
	0x03E2CFF0 MOV X0, X20
	0x03E2CFF4 MOV X1, X31
	0x03E2CFF8 MOV X2, X31
	0x03E2CFFC BL 0x3C354F8
	0x03E2D000 TBZ X0, 0x0, 0x3E2D278
	0x03E2D004 MOV X0, X19
	0x03E2D008 MOV X1, X31
	0x03E2D00C BL 0x3C32E90
	0x03E2D010 CBZ X0, 0x3E2D2F0
	0x03E2D014 MOV X1, X31
	0x03E2D018 BL 0x3C389D4
	0x03E2D01C ADRP X8, 0x33E000
	0x03E2D020 LDR X8, [X8 + 0x10]
	0x03E2D024 MOV X2, X31
	0x03E2D028 LDR X1, [X8]
	0x03E2D02C BL 0x321B938
	0x03E2D030 ADRP X8, 0x2CE000
	0x03E2D034 LDR X8, [X8 + 0xC60]
	0x03E2D038 MOV X21, X0
	0x03E2D03C MOVZ W1, 0x2
	0x03E2D040 LDR X8, [X8]
	0x03E2D044 MOV X0, X8
	0x03E2D048 BL 0x1C16D6C
	0x03E2D04C ADRP X8, 0x2C6000
	0x03E2D050 LDR X8, [X8 + 0x6C0]
	0x03E2D054 ADRP X9, 0x32C000
	0x03E2D058 MOV X22, X0
	0x03E2D05C LDR X8, [X8]
	0x03E2D060 LDR X9, [X9 + 0xA48]
	0x03E2D064 LDR W10, [X8 + 0xE0]
	0x03E2D068 LDR X20, [X9]
	0x03E2D06C CBNZ W10, 0x3E2D078
	0x03E2D070 MOV X0, X8
	0x03E2D074 BL 0x1C16DFC
	0x03E2D078 MOV X0, X20
	0x03E2D07C MOV X1, X31
	0x03E2D080 BL 0x338C698
	0x03E2D084 CBZ X22, 0x3E2D2F0
	0x03E2D088 MOV X20, X0
	0x03E2D08C CBZ X0, 0x3E2D0A4
	0x03E2D090 LDR X8, [X22]
	0x03E2D094 MOV X0, X20
	0x03E2D098 LDR X1, [X8 + 0x40]
	0x03E2D09C BL 0x1C16E00
	0x03E2D0A0 CBZ X0, 0x3E2D2F8
	0x03E2D0A4 LDR W8, [X22 + 0x18]
	0x03E2D0A8 CBZ W8, 0x3E2D2F4
	0x03E2D0AC STR X20, [X22 + 0x20]
	0x03E2D0B0 ADRP X8, 0x33E000
	0x03E2D0B4 LDR X8, [X8 + 0x8]
	0x03E2D0B8 MOV X1, X31
	0x03E2D0BC LDR X0, [X8]
	0x03E2D0C0 BL 0x338C698
	0x03E2D0C4 MOV X20, X0
	0x03E2D0C8 CBZ X0, 0x3E2D0E0
	0x03E2D0CC LDR X8, [X22]
	0x03E2D0D0 MOV X0, X20
	0x03E2D0D4 LDR X1, [X8 + 0x40]
	0x03E2D0D8 BL 0x1C16E00
	0x03E2D0DC CBZ X0, 0x3E2D2F8
	0x03E2D0E0 LDR W8, [X22 + 0x18]
	0x03E2D0E4 CMP W8, 0x1
	0x03E2D0E8 B.LS 0x3E2D2F4
	0x03E2D0EC STR X20, [X22 + 0x28]
	0x03E2D0F0 ADRP X8, 0x2C6000
	0x03E2D0F4 LDR X8, [X8 + 0xA58]
	0x03E2D0F8 LDR X0, [X8]
	0x03E2D0FC BL 0x1C16F10
	0x03E2D100 MOV X1, X21
	0x03E2D104 MOV X2, X22
	0x03E2D108 MOV X3, X31
	0x03E2D10C MOV X20, X0
	0x03E2D110 BL 0x3C35A8C
	0x03E2D114 CBZ X20, 0x3E2D2F0
	0x03E2D118 MOVZ W1, 0x34
	0x03E2D11C MOV X0, X20
	0x03E2D120 MOV X2, X31
	0x03E2D124 BL 0x3C396EC
	0x03E2D128 MOV X0, X20
	0x03E2D12C MOV X1, X31
	0x03E2D130 BL 0x3C356F8
	0x03E2D134 LDR X8, [X19 + 0x108]
	0x03E2D138 CBZ X8, 0x3E2D2F0
	0x03E2D13C MOV X21, X0
	0x03E2D140 MOV X0, X8
	0x03E2D144 MOV X1, X31
	0x03E2D148 BL 0x3C32E90
	0x03E2D14C CBZ X0, 0x3E2D2F0
	0x03E2D150 MOV X1, X31
	0x03E2D154 BL 0x3C3F49C
	0x03E2D158 CBZ X21, 0x3E2D2F0
	0x03E2D15C MOV X1, X0
	0x03E2D160 MOV X0, X21
	0x03E2D164 MOV X2, X31
	0x03E2D168 BL 0x3C3FE70
	0x03E2D16C MOV X0, X20
	0x03E2D170 MOV X1, X31
	0x03E2D174 BL 0x3C356F8
	0x03E2D178 CBZ X0, 0x3E2D2F0
	0x03E2D17C MOV X1, X31
	0x03E2D180 BL 0x3C40CC8
	0x03E2D184 MOV X0, X19
	0x03E2D188 MOV X1, X31
	0x03E2D18C BL 0x3C32ECC
	0x03E2D190 CBZ X0, 0x3E2D2F0
	0x03E2D194 MOV X1, X31
	0x03E2D198 BL 0x3C35734
	0x03E2D19C MOV W1, W0
	0x03E2D1A0 MOV X0, X20
	0x03E2D1A4 MOV X2, X31
	0x03E2D1A8 BL 0x3C35770
	0x03E2D1AC ADRP X8, 0x326000
	0x03E2D1B0 LDR X8, [X8 + 0xB40]
	0x03E2D1B4 MOV X0, X20
	0x03E2D1B8 LDR X1, [X8]
	0x03E2D1BC BL 0x21E52E4
	0x03E2D1C0 STR X0, [X19 + 0x1A0]
	0x03E2D1C4 ADRP X8, 0x32C000
	0x03E2D1C8 LDR X8, [X8 + 0x110]
	0x03E2D1CC MOV X0, X20
	0x03E2D1D0 LDR X1, [X8]
	0x03E2D1D4 BL 0x21E52E4

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x5BD000
	010 Move X21, 0x2CA000
	011 Move W8, [X22+1778]
	012 Move X21, [X21+368]
	013 Move W20, W1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x2CA000
	020 Move X0, [X0+368]
	021 Call 0x1C17CF4
	022 Move X0, 0x2C8000
	023 Move X0, [X0+1448]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1778], W8
	027 Move X0, [X21]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move W0, W20
	033 Move X1, X31
	034 Call Char.IsSurrogate, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {176}
	039 Move W8, [X19+400]
	040 Compare W8, 0
	041 JumpIfNotEqual {176}
	042 Move X8, [X19+384]
	043 Compare X8, 0
	044 JumpIfEqual {185}
	045 Move W8, [X8+16]
	046 Move W9, 0x3FFD
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X0, X31
	049 Call TouchScreenKeyboard.get_isSupported
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {57}
	054 Move W8, [X19+528]
	055 Compare W8, 0
	056 JumpIfEqual {176}
	057 Move X0, X19
	058 Call InputField.get_selectionFocusPosition, X0
	059 Move W21, W0
	060 Move X0, X19
	061 Call InputField.get_selectionAnchorPosition, X0
	062 Move X8, 0x2C7000
	063 Move X8, [X8+1448]
	064 Move W22, W0
	065 Move X8, [X8]
	066 Move W9, [X8+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X8
	070 Call 0x1C17DFC
	071 Move W0, W21
	072 Move W1, W22
	073 Move X2, X31
	074 Call Math.Min, X0, X1
	075 Move X22, [X19+384]
	076 Move W21, W0
	077 Move X0, X19
	078 Call InputField.get_selectionFocusPosition, X0
	079 Move W23, W0
	080 Move X0, X19
	081 Call InputField.get_selectionAnchorPosition, X0
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X0, X19
	084 Call InputField.get_caretPositionInternal, X0
	085 Move W23, W0
	086 Move X0, X19
	087 Call InputField.get_caretSelectPositionInternal, X0
	088 Move X22, [X19+384]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X0, X19
	091 Call InputField.get_caretPositionInternal, X0
	092 Compare X22, 0
	093 JumpIfEqual {185}
	094 Move W2, W0
	095 Move X0, X22
	096 Move W1, W31
	097 Move X3, X31
	098 Call String.Substring, X0, X1, X2
	099 Move X23, [X19+384]
	100 Move X22, X0
	101 Move X0, X19
	102 Call InputField.get_caretSelectPositionInternal, X0
	103 Move X8, [X19+384]
	104 Compare X8, 0
	105 JumpIfEqual {185}
	106 Move W25, [X8+16]
	107 Move W24, W0
	108 Move X0, X19
	109 Call InputField.get_caretSelectPositionInternal, X0
	110 Compare X23, 0
	111 JumpIfNotEqual {134}
	112 Move X0, X19
	113 Call InputField.get_caretSelectPositionInternal, X0
	114 Compare X22, 0
	115 JumpIfEqual {185}
	116 Move W2, W0
	117 Move X0, X22
	118 Move W1, W31
	119 Move X3, X31
	120 Call String.Substring, X0, X1, X2
	121 Move X23, [X19+384]
	122 Move X22, X0
	123 Move X0, X19
	124 Call InputField.get_caretPositionInternal, X0
	125 Move X8, [X19+384]
	126 Compare X8, 0
	127 JumpIfEqual {185}
	128 Move W25, [X8+16]
	129 Move W24, W0
	130 Move X0, X19
	131 Call InputField.get_caretPositionInternal, X0
	132 Compare X23, 0
	133 JumpIfEqual {185}
	134 Subtract W2, W25, W0
	135 Move X0, X23
	136 Move W1, W24
	137 Move X3, X31
	138 Call String.Substring, X0, X1, X2
	139 Move X1, X0
	140 Move X0, X22
	141 Move X2, X31
	142 Call String.Concat, X0, X1
	143 Move X22, X0
	144 Move X8, [X19+336]
	145 Compare X8, 0
	146 JumpIfEqual {154}
	147 Move X9, [X8+24]
	148 Move X0, [X8+64]
	149 Move X4, [X8+40]
	150 Move X1, X22
	151 Move W2, W21
	152 Move W3, W20
	153 NotImplemented "Instruction BLR not yet implemented."
	154 Move W8, [X19+304]
	155 Compare W8, 0
	156 JumpIfEqual {163}
	157 Move X0, X19
	158 Move X1, X22
	159 Move W2, W21
	160 Move W3, W20
	161 Call InputField.Validate, X0, X1, X2, X3
	162 Move W20, W0
	163 And W31, W20, 0xFFFF
	164 Move X0, X19
	165 Move W1, W20
	166 Move X20, [X31+48]
	167 Move X19, [X31+56]
	168 Move X22, [X31+32]
	169 Move X21, [X31+40]
	170 Move X24, [X31+16]
	171 Move X23, [X31+24]
	172 Move X30, [X31+64]
	173 Move X25, [X31+72]
	174 Call InputField.Insert, X0, X1
	175 Return 
	176 Move X20, [X31+48]
	177 Move X19, [X31+56]
	178 Move X22, [X31+32]
	179 Move X21, [X31+40]
	180 Move X24, [X31+16]
	181 Move X23, [X31+24]
	182 Move X30, [X31+64]
	183 Move X25, [X31+72]
	184 Return 
	185 Call 0x1C17F20

Method: System.Void UpdateLabel()

Disassembly:
	0x03E26E74 CMP W8, 0x2
	0x03E26E78 CSET W0, CC
	0x03E26E7C RET
	0x03E26E80 LDRH W0, [X0 + 0x120]
	0x03E26E84 RET
	0x03E26E88 STR X30, [X31 - 0x30]!
	0x03E26E8C STP X22, X21, [X31 + 0x10]
	0x03E26E90 STP X20, X19, [X31 + 0x20]
	0x03E26E94 ADRP X22, 0x5C2000
	0x03E26E98 ADRP X21, 0x344000
	0x03E26E9C LDRB W8, [X22 + 0x6D2]
	0x03E26EA0 LDR X21, [X21 + 0xFB0]
	0x03E26EA4 MOV W20, W1
	0x03E26EA8 MOV X19, X0
	0x03E26EAC TBNZ X8, 0x0, 0x3E26EC4
	0x03E26EB0 ADRP X0, 0x344000
	0x03E26EB4 LDR X0, [X0 + 0xFB0]
	0x03E26EB8 BL 0x1C16CF4
	0x03E26EBC MOVZ W8, 0x1
	0x03E26EC0 STRB W8, [X22 + 0x6D2]
	0x03E26EC4 LDR X2, [X21]
	0x03E26EC8 ADD X0, X19, 0x120
	0x03E26ECC MOV W1, W20
	0x03E26ED0 BL 0x225424C
	0x03E26ED4 TBZ X0, 0x0, 0x3E26EEC
	0x03E26ED8 MOV X0, X19
	0x03E26EDC LDP X20, X19, [X31 + 0x20]
	0x03E26EE0 LDP X22, X21, [X31 + 0x10]
	0x03E26EE4 LDR X30, [X31], #0x30
	0x03E26EE8 B 0x3E25E74
	0x03E26EEC LDP X20, X19, [X31 + 0x20]
	0x03E26EF0 LDP X22, X21, [X31 + 0x10]
	0x03E26EF4 LDR X30, [X31], #0x30
	0x03E26EF8 RET
	0x03E26EFC LDRB W0, [X0 + 0x200]
	0x03E26F00 RET
	0x03E26F04 STR X30, [X31 - 0x10]!
	0x03E26F08 LDR W8, [X1]
	0x03E26F0C TBNZ X8, 0x1F, 0x3E26F28
	0x03E26F10 LDR X9, [X0 + 0x180]
	0x03E26F14 CBZ X9, 0x3E26F38
	0x03E26F18 LDR W9, [X9 + 0x10]
	0x03E26F1C CMP W8, W9
	0x03E26F20 B.GT 0x3E26F2C
	0x03E26F24 B 0x3E26F30
	0x03E26F28 MOV W9, W31
	0x03E26F2C STR W9, [X1]
	0x03E26F30 LDR X30, [X31], #0x10
	0x03E26F34 RET
	0x03E26F38 BL 0x1C16F20
	0x03E26F3C STP X30, X19, [X31 - 0x10]!
	0x03E26F40 LDR W19, [X0 + 0x194]
	0x03E26F44 BL 0x3E25410
	0x03E26F48 CBZ X0, 0x3E26F5C
	0x03E26F4C LDR W8, [X0 + 0x10]
	0x03E26F50 ADD W0, W8, W19
	0x03E26F54 LDP X30, X19, [X31], #0x10
	0x03E26F58 RET
	0x03E26F5C BL 0x1C16F20
	0x03E26F60 STR X30, [X31 - 0x10]!
	0x03E26F64 STR W1, [X0 + 0x194]
	0x03E26F68 TBNZ X1, 0x1F, 0x3E26F84
	0x03E26F6C LDR X8, [X0 + 0x180]
	0x03E26F70 CBZ X8, 0x3E26F94
	0x03E26F74 LDR W8, [X8 + 0x10]
	0x03E26F78 CMP W8, W1
	0x03E26F7C B.LT 0x3E26F88
	0x03E26F80 B 0x3E26F8C
	0x03E26F84 MOV W8, W31
	0x03E26F88 STR W8, [X0 + 0x194]
	0x03E26F8C LDR X30, [X31], #0x10
	0x03E26F90 RET
	0x03E26F94 BL 0x1C16F20
	0x03E26F98 STP X30, X19, [X31 - 0x10]!
	0x03E26F9C LDR W19, [X0 + 0x198]
	0x03E26FA0 BL 0x3E25410
	0x03E26FA4 CBZ X0, 0x3E26FB8
	0x03E26FA8 LDR W8, [X0 + 0x10]
	0x03E26FAC ADD W0, W8, W19
	0x03E26FB0 LDP X30, X19, [X31], #0x10
	0x03E26FB4 RET
	0x03E26FB8 BL 0x1C16F20
	0x03E26FBC STR X30, [X31 - 0x10]!
	0x03E26FC0 STR W1, [X0 + 0x198]
	0x03E26FC4 TBNZ X1, 0x1F, 0x3E26FE0
	0x03E26FC8 LDR X8, [X0 + 0x180]
	0x03E26FCC CBZ X8, 0x3E26FF0
	0x03E26FD0 LDR W8, [X8 + 0x10]
	0x03E26FD4 CMP W8, W1
	0x03E26FD8 B.LT 0x3E26FE4
	0x03E26FDC B 0x3E26FE8
	0x03E26FE0 MOV W8, W31
	0x03E26FE4 STR W8, [X0 + 0x198]
	0x03E26FE8 LDR X30, [X31], #0x10
	0x03E26FEC RET
	0x03E26FF0 BL 0x1C16F20
	0x03E26FF4 STR X30, [X31 - 0x20]!
	0x03E26FF8 STP X20, X19, [X31 + 0x10]
	0x03E26FFC MOV X19, X0
	0x03E27000 BL 0x3E26F3C
	0x03E27004 MOV W20, W0
	0x03E27008 MOV X0, X19
	0x03E2700C BL 0x3E26F98
	0x03E27010 CMP W20, W0
	0x03E27014 LDP X20, X19, [X31 + 0x10]
	0x03E27018 CSET W0, NE
	0x03E2701C LDR X30, [X31], #0x20
	0x03E27020 RET
	0x03E27024 STP X30, X19, [X31 - 0x10]!
	0x03E27028 LDR W19, [X0 + 0x198]
	0x03E2702C BL 0x3E25410
	0x03E27030 CBZ X0, 0x3E27044
	0x03E27034 LDR W8, [X0 + 0x10]
	0x03E27038 ADD W0, W8, W19
	0x03E2703C LDP X30, X19, [X31], #0x10
	0x03E27040 RET
	0x03E27044 BL 0x1C16F20
	0x03E27048 STR X30, [X31 - 0x20]!
	0x03E2704C STP X20, X19, [X31 + 0x10]
	0x03E27050 MOV W19, W1
	0x03E27054 MOV X20, X0
	0x03E27058 BL 0x3E27070
	0x03E2705C MOV X0, X20
	0x03E27060 MOV W1, W19
	0x03E27064 LDP X20, X19, [X31 + 0x10]
	0x03E27068 LDR X30, [X31], #0x20
	0x03E2706C B 0x3E270CC
	0x03E27070 STR X30, [X31 - 0x20]!
	0x03E27074 STP X20, X19, [X31 + 0x10]
	0x03E27078 MOV W20, W1
	0x03E2707C MOV X19, X0
	0x03E27080 BL 0x3E25410
	0x03E27084 CBZ X0, 0x3E270C8
	0x03E27088 LDR W8, [X0 + 0x10]
	0x03E2708C CBZ W8, 0x3E2709C
	0x03E27090 LDP X20, X19, [X31 + 0x10]
	0x03E27094 LDR X30, [X31], #0x20
	0x03E27098 RET
	0x03E2709C STR W20, [X19 + 0x194]
	0x03E270A0 TBNZ X20, 0x1F, 0x3E270C0
	0x03E270A4 LDR X8, [X19 + 0x180]
	0x03E270A8 CBZ X8, 0x3E270C8
	0x03E270AC LDR W8, [X8 + 0x10]
	0x03E270B0 CMP W8, W20
	0x03E270B4 B.GE 0x3E27090
	0x03E270B8 STR W8, [X19 + 0x194]
	0x03E270BC B 0x3E27090
	0x03E270C0 STR W31, [X19 + 0x194]
	0x03E270C4 B 0x3E27090
	0x03E270C8 BL 0x1C16F20
	0x03E270CC STR X30, [X31 - 0x20]!
	0x03E270D0 STP X20, X19, [X31 + 0x10]
	0x03E270D4 MOV W20, W1
	0x03E270D8 MOV X19, X0
	0x03E270DC BL 0x3E25410
	0x03E270E0 CBZ X0, 0x3E27124
	0x03E270E4 LDR W8, [X0 + 0x10]
	0x03E270E8 CBZ W8, 0x3E270F8
	0x03E270EC LDP X20, X19, [X31 + 0x10]
	0x03E270F0 LDR X30, [X31], #0x20
	0x03E270F4 RET
	0x03E270F8 STR W20, [X19 + 0x198]
	0x03E270FC TBNZ X20, 0x1F, 0x3E2711C
	0x03E27100 LDR X8, [X19 + 0x180]
	0x03E27104 CBZ X8, 0x3E27124
	0x03E27108 LDR W8, [X8 + 0x10]
	0x03E2710C CMP W8, W20
	0x03E27110 B.GE 0x3E270EC
	0x03E27114 STR W8, [X19 + 0x198]
	0x03E27118 B 0x3E270EC
	0x03E2711C STR W31, [X19 + 0x198]
	0x03E27120 B 0x3E270EC
	0x03E27124 BL 0x1C16F20
	0x03E27128 STP X30, X19, [X31 - 0x10]!
	0x03E2712C LDR W19, [X0 + 0x194]
	0x03E27130 BL 0x3E25410
	0x03E27134 CBZ X0, 0x3E27148
	0x03E27138 LDR W8, [X0 + 0x10]
	0x03E2713C ADD W0, W8, W19
	0x03E27140 LDP X30, X19, [X31], #0x10
	0x03E27144 RET
	0x03E27148 BL 0x1C16F20
	0x03E2714C STP X30, X19, [X31 - 0x10]!
	0x03E27150 LDR W19, [X0 + 0x198]
	0x03E27154 BL 0x3E25410
	0x03E27158 CBZ X0, 0x3E2716C
	0x03E2715C LDR W8, [X0 + 0x10]
	0x03E27160 ADD W0, W8, W19
	0x03E27164 LDP X30, X19, [X31], #0x10
	0x03E27168 RET
	0x03E2716C BL 0x1C16F20
	0x03E27170 STP X30, X21, [X31 - 0x20]!
	0x03E27174 STP X20, X19, [X31 + 0x10]
	0x03E27178 ADRP X21, 0x5C1000
	0x03E2717C ADRP X20, 0x343000
	0x03E27180 LDRB W8, [X21 + 0x6D3]
	0x03E27184 LDR X20, [X20 + 0xFB8]
	0x03E27188 MOV X19, X0
	0x03E2718C TBNZ X8, 0x0, 0x3E271B0
	0x03E27190 ADRP X0, 0x343000
	0x03E27194 LDR X0, [X0 + 0xFB8]
	0x03E27198 BL 0x1C16CF4
	0x03E2719C ADRP X0, 0x343000
	0x03E271A0 LDR X0, [X0 + 0xFC0]
	0x03E271A4 BL 0x1C16CF4
	0x03E271A8 MOVZ W8, 0x1
	0x03E271AC STRB W8, [X21 + 0x6D3]
	0x03E271B0 MOV X0, X19
	0x03E271B4 MOV X1, X31
	0x03E271B8 BL 0x3E411A8
	0x03E271BC LDR X0, [X20]
	0x03E271C0 LDR W8, [X0 + 0xE0]
	0x03E271C4 CBNZ W8, 0x3E271D0
	0x03E271C8 BL 0x1C16DFC
	0x03E271CC LDR X0, [X20]
	0x03E271D0 LDR X8, [X0 + 0xB8]
	0x03E271D4 LDRB W8, [X8 + 0x8]
	0x03E271D8 CBNZ W8, 0x3E27224
	0x03E271DC MOV X0, X31
	0x03E271E0 BL 0x3C3B98C
	0x03E271E4 ADRP X8, 0x343000
	0x03E271E8 LDR X8, [X8 + 0xFC0]
	0x03E271EC MOV X2, X31
	0x03E271F0 LDR X1, [X8]
	0x03E271F4 BL 0x321BA08
	0x03E271F8 LDR X8, [X20]
	0x03E271FC AND W19, W0, 0x1
	0x03E27200 LDR W9, [X8 + 0xE0]
	0x03E27204 CBNZ W9, 0x3E27214
	0x03E27208 MOV X0, X8
	0x03E2720C BL 0x1C16DFC
	0x03E27210 LDR X8, [X20]
	0x03E27214 LDR X8, [X8 + 0xB8]
	0x03E27218 MOVZ W9, 0x1
	0x03E2721C STRB W19, [X8 + 0x9]
	0x03E27220 STRB W9, [X8 + 0x8]
	0x03E27224 LDP X20, X19, [X31 + 0x10]
	0x03E27228 LDP X30, X21, [X31], #0x20
	0x03E2722C RET
	0x03E27230 STR X30, [X31 - 0x30]!
	0x03E27234 STP X22, X21, [X31 + 0x10]
	0x03E27238 STP X20, X19, [X31 + 0x20]
	0x03E2723C ADRP X20, 0x5C1000
	0x03E27240 LDRB W8, [X20 + 0x6D4]
	0x03E27244 MOV X19, X0
	0x03E27248 TBNZ X8, 0x0, 0x3E272A8
	0x03E2724C ADRP X0, 0x332000
	0x03E27250 LDR X0, [X0 + 0x118]
	0x03E27254 BL 0x1C16CF4
	0x03E27258 ADRP X0, 0x343000
	0x03E2725C LDR X0, [X0 + 0xF38]
	0x03E27260 BL 0x1C16CF4
	0x03E27264 ADRP X0, 0x343000
	0x03E27268 LDR X0, [X0 + 0xF40]

ISIL:
	001 Subtract X31, X31, 352
	002 Move [X31+304], X29
	003 Move [X31+312], X30
	004 Move [X31+320], X22
	005 Move [X31+328], X21
	006 Move [X31+336], X20
	007 Move [X31+344], X19
	008 Move X20, 0x5C3000
	009 Move X22, 0x2CE000
	010 Move W8, [X20+1779]
	011 Move X22, [X22+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2F5000
	018 Move X0, [X0+3576]
	019 Call 0x1C17CF4
	020 Move X0, 0x2CE000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1779], W8
	025 Move X0, [X22]
	026 Move X20, [X19+264]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {294}
	039 Move X0, [X19+264]
	040 Compare X0, 0
	041 JumpIfEqual {302}
	042 Move X1, X31
	043 Call Text.get_font, X0
	044 Move X8, [X22]
	045 Move X20, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Inequality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {294}
	059 Move W8, [X19+448]
	060 Compare W8, 0
	061 JumpIfNotEqual {294}
	062 Move W8, 1
	063 Move [X19+448], W8
	064 Move X21, 0x2F5000
	065 Move X21, [X21+3576]
	066 Move X0, [X21]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X31
	072 Call EventSystem.get_current
	073 Move X8, [X22]
	074 Move X20, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move X0, X20
	081 Move X1, X31
	082 Move X2, X31
	083 Call Object.op_Inequality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {147}
	088 Move X0, X19
	089 Move X1, X31
	090 Call Component.get_gameObject, X0
	091 Move X8, [X21]
	092 Move X20, X0
	093 Move W9, [X8+224]
	094 Compare W9, 0
	095 JumpIfNotEqual {98}
	096 Move X0, X8
	097 Call 0x1C17DFC
	098 Move X0, X31
	099 Call EventSystem.get_current
	100 Compare X0, 0
	101 JumpIfEqual {302}
	102 Move X8, [X22]
	103 Move X21, [X0+64]
	104 Move W9, [X8+224]
	105 Compare W9, 0
	106 JumpIfNotEqual {109}
	107 Move X0, X8
	108 Call 0x1C17DFC
	109 Move X0, X20
	110 Move X1, X21
	111 Move X2, X31
	112 Call Object.op_Equality, X0, X1
	113 Move TEMP, X0
	114 And TEMP, TEMP, 1
	115 Compare TEMP, 1
	116 JumpIfNotEqual {147}
	117 Call InputField.get_compositionString, X0
	118 Compare X0, 0
	119 JumpIfEqual {302}
	120 Move W8, [X0+16]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X0, [X19+384]
	123 Move W8, 1
	124 Move [X19+529], W8
	125 Compare X0, 0
	126 JumpIfEqual {302}
	127 Move W2, [X19+404]
	128 Move W1, W31
	129 Move X3, X31
	130 Call String.Substring, X0, X1, X2
	131 Move X20, X0
	132 Call InputField.get_compositionString, X0
	133 Move X8, [X19+384]
	134 Compare X8, 0
	135 JumpIfEqual {302}
	136 Move W1, [X19+404]
	137 Move X21, X0
	138 Move X0, X8
	139 Move X2, X31
	140 Call String.Substring, X0, X1
	141 Move X2, X0
	142 Move X0, X20
	143 Move X1, X21
	144 Move X3, X31
	145 Call String.Concat, X0, X1, X2
	146 Move X21, X0
	147 Move X21, [X19+384]
	148 Move [X19+529], W31
	149 Move W8, [X19+284]
	150 Move X20, X21
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Compare X21, 0
	153 JumpIfEqual {302}
	154 Move W2, [X21+16]
	155 NotImplemented "Instruction LDRH not yet implemented."
	156 Move X0, X31
	157 Move X3, X31
	158 Call String.CreateString, X0, X1, X2
	159 Move X20, X0
	160 Move X0, X21
	161 Move X1, X31
	162 Call String.IsNullOrEmpty, X0
	163 Move X8, [X22]
	164 Move X22, [X19+272]
	165 Move W21, W0
	166 Move W9, [X8+224]
	167 Compare W9, 0
	168 JumpIfNotEqual {171}
	169 Move X0, X8
	170 Call 0x1C17DFC
	171 Move X0, X22
	172 Move X1, X31
	173 Move X2, X31
	174 Call Object.op_Inequality, X0, X1
	175 Move TEMP, X0
	176 And TEMP, TEMP, 1
	177 Compare TEMP, 1
	178 JumpIfNotEqual {185}
	179 Move X0, [X19+272]
	180 Compare X0, 0
	181 JumpIfEqual {302}
	182 And W1, W21, 1
	183 Move X2, X31
	184 Call Behaviour.set_enabled, X0, X1
	185 Move W8, [X19+464]
	186 Compare W8, 0
	187 JumpIfNotEqual {194}
	188 Move X8, [X19+384]
	189 Move [X19+484], W31
	190 Compare X8, 0
	191 JumpIfEqual {302}
	192 Move W8, [X8+16]
	193 Move [X19+488], W8
	194 Move X0, [X19+264]
	195 Compare X0, 0
	196 JumpIfEqual {302}
	197 Move X8, [X0]
	198 Move X9, [X8+744]
	199 Move X1, [X8+752]
	200 NotImplemented "Instruction BLR not yet implemented."
	201 Move TEMP, X21
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfEqual {283}
	205 Move X0, [X19+264]
	206 Compare X0, 0
	207 JumpIfEqual {302}
	208 Move X1, X31
	209 Call Graphic.get_rectTransform, X0
	210 Compare X0, 0
	211 JumpIfEqual {302}
	212 Move X1, X31
	213 Call RectTransform.get_rect, X0
	214 Move X0, [X19+264]
	215 Compare X0, 0
	216 JumpIfEqual {302}
	217 Add X8, X31, 112
	218 Move V0, V2
	219 Move V1, V3
	220 Move X1, X31
	221 Add X22, X31, 112
	222 Call Text.GetGenerationSettings, X0, X1
	223 Add X0, X31, 216
	224 Add X1, X31, 112
	225 Move W2, 88
	226 Call 0x3EB2AC0
	227 NotImplemented "Instruction LDUR not yet implemented."
	228 Move W9, [X31+204]
	229 Move X0, X19
	230 Move [X31+208], W8
	231 Move [X22+99], W9
	232 Call InputField.get_cachedInputTextGenerator, X0
	233 Move X21, X0
	234 Add X0, X31, 112
	235 Add X1, X31, 216
	236 Move W2, 88
	237 Call 0x3EB2AC0
	238 Move W8, [X31+208]
	239 NotImplemented "Instruction LDUR not yet implemented."
	240 Move X0, X19
	241 Move X1, X31
	242 Move [X31+104], W8
	243 Move [X31+107], W9
	244 Call Component.get_gameObject, X0
	245 Compare X21, 0
	246 JumpIfEqual {302}
	247 Move X22, X0
	248 Add X0, X31, 8
	249 Add X1, X31, 112
	250 Move W2, 88
	251 Call 0x3EB2AC0
	252 Move W8, [X31+104]
	253 NotImplemented "Instruction LDUR not yet implemented."
	254 Move W10, 1
	255 Add X2, X31, 8
	256 Move X0, X21
	257 Move X1, X20
	258 Move X3, X22
	259 Move X4, X31
	260 Move [X31+96], W10
	261 Move [X31+97], W8
	262 Move [X31+100], W9
	263 Call TextGenerator.PopulateWithErrors, X0, X1, X2, X3
	264 Move X0, X19
	265 Call InputField.get_caretSelectPositionInternal, X0
	266 Move W1, W0
	267 Move X0, X19
	268 Call InputField.SetDrawRangeToContainCaretPosition, X0, X1
	269 Compare X20, 0
	270 JumpIfEqual {302}
	271 Move W8, [X19+488]
	272 Move W9, [X20+16]
	273 Move W1, [X19+484]
	274 Move X0, X20
	275 Move X3, X31
	276 NotImplemented "Instruction CMP not yet implemented."
	277 NotImplemented "Instruction CSEL not yet implemented."
	278 Subtract W2, W8, W1
	279 Call String.Substring, X0, X1, X2
	280 Move X20, X0
	281 Move X0, X19
	282 Call InputField.SetCaretVisible, X0
	283 Move X0, [X19+264]
	284 Compare X0, 0
	285 JumpIfEqual {302}
	286 Move X8, [X0]
	287 Move X1, X20
	288 Move X9, [X8+1512]
	289 Move X2, [X8+1520]
	290 NotImplemented "Instruction BLR not yet implemented."
	291 Move X0, X19
	292 Call InputField.MarkGeometryAsDirty, X0
	293 Move [X19+448], W31
	294 Move X20, [X31+336]
	295 Move X19, [X31+344]
	296 Move X22, [X31+320]
	297 Move X21, [X31+328]
	298 Move X29, [X31+304]
	299 Move X30, [X31+312]
	300 Add X31, X31, 352
	301 Return 
	302 Call 0x1C17F20

Method: System.Boolean IsSelectionVisible()

Disassembly:
	0x03E2DD14 ADRP X0, 0x2F1000
	0x03E2DD18 LDR X0, [X0 + 0x7E8]
	0x03E2DD1C BL 0x1C16CF4
	0x03E2DD20 MOVZ W8, 0x1
	0x03E2DD24 STRB W8, [X21 + 0x6FD]
	0x03E2DD28 MOV X0, X20
	0x03E2DD2C BL 0x3E26F3C
	0x03E2DD30 LDR W8, [X20 + 0x1E4]
	0x03E2DD34 SUB W8, W0, W8
	0x03E2DD38 MOV X0, X20
	0x03E2DD3C BIC W21, W8, W8, 0x1F
	0x03E2DD40 BL 0x3E26F98
	0x03E2DD44 LDR W9, [X20 + 0x1E4]
	0x03E2DD48 MOV W8, W0
	0x03E2DD4C LDR X0, [X20 + 0x108]
	0x03E2DD50 SUB W8, W8, W9
	0x03E2DD54 BIC W8, W8, W8, 0x1F
	0x03E2DD58 CMP W21, W8
	0x03E2DD5C CSEL W9, W21, W8, GT
	0x03E2DD60 CSEL W25, W8, W21, GT
	0x03E2DD64 STR W9, [X31 + 0x7C]
	0x03E2DD68 CBZ X0, 0x3E2E410
	0x03E2DD6C MOV X1, X31
	0x03E2DD70 BL 0x3E44E54
	0x03E2DD74 CBZ X0, 0x3E2E410
	0x03E2DD78 MOV X1, X31
	0x03E2DD7C MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, [X0+484]
	005 Move X19, X0
	006 Call InputField.get_caretPositionInternal, X0
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move W20, [X19+484]
	009 Move X0, X19
	010 Call InputField.get_caretSelectPositionInternal, X0
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Move W20, [X19+488]
	013 Move X0, X19
	014 Call InputField.get_caretPositionInternal, X0
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move W0, W31
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X30, [X31+32]
	020 Return X0
	021 Move W20, [X19+488]
	022 Move X0, X19
	023 Call InputField.get_caretSelectPositionInternal, X0
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSET not yet implemented."

Method: System.Int32 GetLineStartPosition(UnityEngine.TextGenerator gen, System.Int32 line)

Disassembly:
	0x03E2DD80 BL 0x3CCF77C
	0x03E2DD84 CMP W0, 0x1
	0x03E2DD88 B.LT 0x3E2E3E0
	0x03E2DD8C ADRP X22, 0x33D000
	0x03E2DD90 ADRP X23, 0x2F1000
	0x03E2DD94 LDR X22, [X22 + 0xFB8]
	0x03E2DD98 LDR X23, [X23 + 0x7E8]
	0x03E2DD9C MOV W1, W25
	0x03E2DDA0 MOV X2, X19
	0x03E2DDA4 BL 0x3E2B37C
	0x03E2DDA8 LDR X8, [X22]
	0x03E2DDAC MOV W22, W0
	0x03E2DDB0 LDR W9, [X8 + 0xE0]
	0x03E2DDB4 CBNZ W9, 0x3E2DDC0
	0x03E2DDB8 MOV X0, X8
	0x03E2DDBC BL 0x1C16DFC
	0x03E2DDC0 MOV X0, X19
	0x03E2DDC4 MOV W1, W22
	0x03E2DDC8 ADD X24, X31, 0x1D0
	0x03E2DDCC BL 0x3E29E5C
	0x03E2DDD0 LDR X8, [X23]
	0x03E2DDD4 MOV W26, W0
	0x03E2DDD8 LDR W9, [X8 + 0xE0]
	0x03E2DDDC CBNZ W9, 0x3E2DDEC
	0x03E2DDE0 MOV X0, X8
	0x03E2DDE4 BL 0x1C16DFC
	0x03E2DDE8 LDR X8, [X23]
	0x03E2DDEC LDR X8, [X8 + 0xB8]
	0x03E2DDF0 ADRP X23, 0x5AC000
	0x03E2DDF4 LDUR V0, [X8 + 0x2C]
	0x03E2DDF8 LDR V3, [X8 + 0x2]
	0x03E2DDFC STUR V0, [X24 + 0xAC]
	0x03E2DE00 LDP V2, V0, [X8 + 0x60]
	0x03E2DE04 LDR V1, [X8 + 0x5]
	0x03E2DE08 LDRB W8, [X23 + 0x78F]
	0x03E2DE0C STP V0, V3, [X31 + 0x260]
	0x03E2DE10 STP V1, V2, [X31 + 0x240]
	0x03E2DE14 CBNZ W8, 0x3E2DE2C
	0x03E2DE18 ADRP X0, 0x2CE000
	0x03E2DE1C LDR X0, [X0 + 0xF08]
	0x03E2DE20 BL 0x1C16CF4
	0x03E2DE24 MOVZ W8, 0x1
	0x03E2DE28 STRB W8, [X23 + 0x78F]
	0x03E2DE2C ADRP X8, 0x2CE000
	0x03E2DE30 LDR X8, [X8 + 0xF08]
	0x03E2DE34 LDR V0, [X20 + 0x16C]
	0x03E2DE38 LDR V1, [X20 + 0x170]
	0x03E2DE3C LDR V2, [X20 + 0x174]
	0x03E2DE40 LDR X8, [X8]
	0x03E2DE44 MOV X0, X31
	0x03E2DE48 LDR X8, [X8 + 0xB8]
	0x03E2DE4C LDR V3, [X8]
	0x03E2DE50 STR S3, [X31 + 0x64]
	0x03E2DE54 LDR V3, [X8 + 0x4]
	0x03E2DE58 STR S3, [X31 + 0x54]
	0x03E2DE5C LDR V3, [X20 + 0x178]
	0x03E2DE60 BL 0x1E43664
	0x03E2DE64 LDR W8, [X31 + 0x7C]
	0x03E2DE68 STR X0, [X31 + 0x58]
	0x03E2DE6C CMP W25, W8
	0x03E2DE70 B.GE 0x3E2E3E0
	0x03E2DE74 LDR W8, [X31 + 0x7C]
	0x03E2DE78 ADD X9, X31, 0x160
	0x03E2DE7C ADRP X29, 0x33D000
	0x03E2DE80 ADRP X23, 0x33D000
	0x03E2DE84 SUB W27, W8, 0x1
	0x03E2DE88 ADD X8, X31, 0x1D0
	0x03E2DE8C ADD X12, X8, 0xC
	0x03E2DE90 ADD X8, X8, 0x3C
	0x03E2DE94 ADD X10, X31, 0xF0
	0x03E2DE98 LDR X29, [X29 + 0xFE0]
	0x03E2DE9C LDR X23, [X23 + 0xFD8]
	0x03E2DEA0 STP X8, X12, [X31 + 0x38]
	0x03E2DEA4 ADD X12, X9, 0xC
	0x03E2DEA8 ADD X8, X9, 0x3C
	0x03E2DEAC LDR X21, [X31 + 0x70]
	0x03E2DEB0 LDR V9, [X31 + 0x54]
	0x03E2DEB4 ADD X11, X31, 0x80
	0x03E2DEB8 STP X8, X12, [X31 + 0x28]
	0x03E2DEBC ADD X9, X10, 0xC
	0x03E2DEC0 ADD X8, X10, 0x3C
	0x03E2DEC4 STP X8, X9, [X31 + 0x18]
	0x03E2DEC8 ADD X9, X11, 0xC
	0x03E2DECC ADD X8, X11, 0x3C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5BC000
	006 Move W8, [X21+1780]
	007 Move W19, W1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x33E000
	014 Move X0, [X0+4072]
	015 Call 0x1C17CF4
	016 Move X0, 0x33E000
	017 Move X0, [X0+4056]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1780], W8
	021 Compare X20, 0
	022 JumpIfEqual {92}
	023 Move X0, X20
	024 Move X1, X31
	025 Call TextGenerator.get_lines, X0
	026 Compare X0, 0
	027 JumpIfEqual {92}
	028 Move X10, 0x33E000
	029 Move X8, [X0]
	030 Move X10, [X10+4072]
	031 Move X21, X0
	032 NotImplemented "Instruction LDRH not yet implemented."
	033 Move X1, [X10]
	034 Compare X9, 0
	035 JumpIfEqual {42}
	036 Move X10, [X8+176]
	037 Add X10, X10, 8
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Subtract X9, X9, 1
	041 Add X10, X10, 16
	042 Move X0, X21
	043 Move W2, W31
	044 Call 0x1C5D788
	045 NotImplemented "Instruction LDRSW not yet implemented."
	046 Add X8, X8, X9
	047 Add X0, X8, 312
	048 Move X8, [X0]
	049 Move X1, [X0+8]
	050 Move X0, X21
	051 NotImplemented "Instruction BLR not yet implemented."
	052 Move W21, W0
	053 Move X0, X20
	054 Move X1, X31
	055 Call TextGenerator.get_lines, X0
	056 Compare X0, 0
	057 JumpIfEqual {92}
	058 Move X10, 0x33E000
	059 Move X8, [X0]
	060 Move X10, [X10+4056]
	061 Move X20, X0
	062 Subtract W21, W21, 1
	063 NotImplemented "Instruction LDRH not yet implemented."
	064 Move X1, [X10]
	065 Compare X9, 0
	066 JumpIfEqual {73}
	067 Move X10, [X8+176]
	068 Add X10, X10, 8
	069 NotImplemented "Instruction LDUR not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Subtract X9, X9, 1
	072 Add X10, X10, 16
	073 Move X0, X20
	074 Move W2, W31
	075 Call 0x1C5D788
	076 NotImplemented "Instruction LDRSW not yet implemented."
	077 Add X8, X8, X9
	078 Add X0, X8, 312
	079 Move X8, [X0]
	080 Move X2, [X0+8]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSEL not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 NotImplemented "Instruction CSEL not yet implemented."
	085 Move X0, X20
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X20, [X31+16]
	088 Move X19, [X31+24]
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 Return X0
	092 Call 0x1C17F20

Method: System.Int32 GetLineEndPosition(UnityEngine.TextGenerator gen, System.Int32 line)

Disassembly:
	0x03E2AE5C LDR W8, [X9 + 0x10]
	0x03E2AE60 CMP W8, W0
	0x03E2AE64 CSEL W8, W8, W0, LT
	0x03E2AE68 B 0x3E2AE94
	0x03E2AE6C BL 0x3E26F98
	0x03E2AE70 SUB W0, W0, 0x1
	0x03E2AE74 TBZ X20, 0x0, 0x3E2AE34
	0x03E2AE78 STR W0, [X19 + 0x198]
	0x03E2AE7C TBNZ X0, 0x1F, 0x3E2AEB0
	0x03E2AE80 LDR X8, [X19 + 0x180]
	0x03E2AE84 CBZ X8, 0x3E2AEC4
	0x03E2AE88 LDR W8, [X8 + 0x10]
	0x03E2AE8C CMP W8, W0
	0x03E2AE90 B.GE 0x3E2AEB4
	0x03E2AE94 STR W8, [X19 + 0x198]
	0x03E2AE98 B 0x3E2AEB4
	0x03E2AE9C STR W31, [X19 + 0x198]
	0x03E2AEA0 STR W31, [X19 + 0x194]
	0x03E2AEA4 B 0x3E2AEB4
	0x03E2AEA8 STR X31, [X8]
	0x03E2AEAC B 0x3E2AEB4
	0x03E2AEB0 STR W31, [X19 + 0x198]
	0x03E2AEB4 LDP X20, X19, [X31 + 0x20]
	0x03E2AEB8 LDP X22, X21, [X31 + 0x10]
	0x03E2AEBC LDR X30, [X31], #0x30
	0x03E2AEC0 RET
	0x03E2AEC4 BL 0x1C16F20
	0x03E2AEC8 STR X30, [X31 - 0x30]!
	0x03E2AECC STP X22, X21, [X31 + 0x10]
	0x03E2AED0 STP X20, X19, [X31 + 0x20]
	0x03E2AED4 MOV W21, W2
	0x03E2AED8 MOV W20, W1
	0x03E2AEDC MOV X19, X0
	0x03E2AEE0 BL 0x3E26F3C
	0x03E2AEE4 MOV W22, W0
	0x03E2AEE8 MOV X0, X19
	0x03E2AEEC BL 0x3E26F98
	0x03E2AEF0 CMP W22, W0
	0x03E2AEF4 B.EQ 0x3E2AF50
	0x03E2AEF8 TBNZ X20, 0x0, 0x3E2AF50
	0x03E2AEFC MOV X0, X19
	0x03E2AF00 BL 0x3E26F3C
	0x03E2AF04 MOV W20, W0
	0x03E2AF08 MOV X0, X19
	0x03E2AF0C BL 0x3E26F98
	0x03E2AF10 CMP W20, W0
	0x03E2AF14 CSEL W8, W20, W0, GT
	0x03E2AF18 STR W8, [X19 + 0x198]
	0x03E2AF1C TBNZ X8, 0x1F, 0x3E2AFC8
	0x03E2AF20 LDR X9, [X19 + 0x180]
	0x03E2AF24 CBZ X9, 0x3E2AFF0
	0x03E2AF28 LDR W10, [X9 + 0x10]
	0x03E2AF2C CMP W10, W8
	0x03E2AF30 B.GE 0x3E2AF38
	0x03E2AF34 STR W10, [X19 + 0x198]
	0x03E2AF38 STR W8, [X19 + 0x194]
	0x03E2AF3C LDR W9, [X9 + 0x10]
	0x03E2AF40 CMP W9, W8
	0x03E2AF44 CSEL W8, W9, W8, LT
	0x03E2AF48 STR W8, [X19 + 0x194]
	0x03E2AF4C B 0x3E2AFE0
	0x03E2AF50 MOV X0, X19
	0x03E2AF54 TBZ X21, 0x0, 0x3E2AF98
	0x03E2AF58 BL 0x3E2B220
	0x03E2AF5C TBNZ X20, 0x0, 0x3E2AFA4
	0x03E2AF60 ADD X8, X19, 0x194
	0x03E2AF64 STR W0, [X19 + 0x194]
	0x03E2AF68 TBNZ X0, 0x1F, 0x3E2AFD4
	0x03E2AF6C LDR X9, [X19 + 0x180]
	0x03E2AF70 CBZ X9, 0x3E2AFF0
	0x03E2AF74 LDR W10, [X9 + 0x10]
	0x03E2AF78 CMP W10, W0
	0x03E2AF7C B.GE 0x3E2AF84
	0x03E2AF80 STR W10, [X8]
	0x03E2AF84 STR W0, [X19 + 0x198]
	0x03E2AF88 LDR W8, [X9 + 0x10]
	0x03E2AF8C CMP W8, W0
	0x03E2AF90 CSEL W8, W8, W0, LT
	0x03E2AF94 B 0x3E2AFC0
	0x03E2AF98 BL 0x3E26F98
	0x03E2AF9C ADD W0, W0, 0x1
	0x03E2AFA0 TBZ X20, 0x0, 0x3E2AF60
	0x03E2AFA4 STR W0, [X19 + 0x198]
	0x03E2AFA8 TBNZ X0, 0x1F, 0x3E2AFDC
	0x03E2AFAC LDR X8, [X19 + 0x180]
	0x03E2AFB0 CBZ X8, 0x3E2AFF0
	0x03E2AFB4 LDR W8, [X8 + 0x10]
	0x03E2AFB8 CMP W8, W0
	0x03E2AFBC B.GE 0x3E2AFE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5BF000
	006 Move W8, [X20+1781]
	007 Move W21, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x341000
	014 Move X0, [X0+4072]
	015 Call 0x1C17CF4
	016 Move X0, 0x341000
	017 Move X0, [X0+4056]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1781], W8
	021 Compare X19, 0
	022 JumpIfEqual {99}
	023 Move X0, X19
	024 Move X1, X31
	025 Call TextGenerator.get_lines, X0
	026 Compare X0, 0
	027 JumpIfEqual {99}
	028 Move X10, 0x341000
	029 Move X8, [X0]
	030 Move X10, [X10+4072]
	031 Move X20, X0
	032 NotImplemented "Instruction BIC not yet implemented."
	033 NotImplemented "Instruction LDRH not yet implemented."
	034 Move X1, [X10]
	035 Compare X9, 0
	036 JumpIfEqual {43}
	037 Move X10, [X8+176]
	038 Add X10, X10, 8
	039 NotImplemented "Instruction LDUR not yet implemented."
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Subtract X9, X9, 1
	042 Add X10, X10, 16
	043 Move X0, X20
	044 Move W2, W31
	045 Call 0x1C5D788
	046 NotImplemented "Instruction LDRSW not yet implemented."
	047 Add X8, X8, X9
	048 Add X0, X8, 312
	049 Move X8, [X0]
	050 Move X1, [X0+8]
	051 Move X0, X20
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Add W20, W21, 1
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X19
	056 Move X1, X31
	057 Call TextGenerator.get_lines, X0
	058 Compare X0, 0
	059 JumpIfEqual {99}
	060 Move X10, 0x341000
	061 Move X8, [X0]
	062 Move X10, [X10+4056]
	063 Move X19, X0
	064 NotImplemented "Instruction LDRH not yet implemented."
	065 Move X1, [X10]
	066 Compare X9, 0
	067 JumpIfEqual {74}
	068 Move X10, [X8+176]
	069 Add X10, X10, 8
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Subtract X9, X9, 1
	073 Add X10, X10, 16
	074 Move X0, X19
	075 Move W2, W31
	076 Call 0x1C5D788
	077 Move X0, X19
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move X1, X31
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call TextGenerator.get_characterCountVisible, X0
	084 Return X0
	085 NotImplemented "Instruction LDRSW not yet implemented."
	086 Add X8, X8, X9
	087 Add X0, X8, 312
	088 Move X8, [X0]
	089 Move X2, [X0+8]
	090 Move X0, X19
	091 Move W1, W20
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Subtract W0, W0, 1
	096 Move X30, [X31+32]
	097 Move X21, [X31+40]
	098 Return X0
	099 Call 0x1C17F20

Method: System.Void SetDrawRangeToContainCaretPosition(System.Int32 caretPos)

Disassembly:
	0x03E2D1D8 STR X0, [X19 + 0x1B8]
	0x03E2D1DC ADRP X8, 0x32C000
	0x03E2D1E0 LDR X8, [X8 + 0x118]
	0x03E2D1E4 MOV X21, X0
	0x03E2D1E8 LDR X22, [X19 + 0x108]
	0x03E2D1EC LDR X0, [X8]
	0x03E2D1F0 LDR W8, [X0 + 0xE0]
	0x03E2D1F4 CBNZ W8, 0x3E2D1FC
	0x03E2D1F8 BL 0x1C16DFC
	0x03E2D1FC MOV X0, X31
	0x03E2D200 BL 0x3CDABE4
	0x03E2D204 CBZ X22, 0x3E2D2F0
	0x03E2D208 LDR X8, [X22]
	0x03E2D20C MOV X1, X0
	0x03E2D210 MOV X0, X22
	0x03E2D214 LDR X9, [X8 + 0x4D8]
	0x03E2D218 LDR X2, [X8 + 0x4E0]
	0x03E2D21C BLR X9
	0x03E2D220 MOV X22, X0
	0x03E2D224 MOV X0, X31
	0x03E2D228 BL 0x3C1B370
	0x03E2D22C CBZ X21, 0x3E2D2F0
	0x03E2D230 MOV X2, X0
	0x03E2D234 MOV X0, X21
	0x03E2D238 MOV X1, X22
	0x03E2D23C MOV X3, X31
	0x03E2D240 BL 0x3E22B58
	0x03E2D244 ADRP X8, 0x326000
	0x03E2D248 LDR X8, [X8 + 0xCC0]
	0x03E2D24C MOV X0, X20
	0x03E2D250 LDR X1, [X8]
	0x03E2D254 BL 0x21E51FC
	0x03E2D258 CBZ X0, 0x3E2D2F0
	0x03E2D25C LDR X8, [X0]
	0x03E2D260 MOVZ W1, 0x1
	0x03E2D264 LDR X9, [X8 + 0x2F8]
	0x03E2D268 LDR X2, [X8 + 0x300]
	0x03E2D26C BLR X9
	0x03E2D270 MOV X0, X19
	0x03E2D274 BL 0x3E28984
	0x03E2D278 LDR X0, [X23]
	0x03E2D27C LDR X20, [X19 + 0x1B8]
	0x03E2D280 LDR W8, [X0 + 0xE0]
	0x03E2D284 CBNZ W8, 0x3E2D28C
	0x03E2D288 BL 0x1C16DFC
	0x03E2D28C MOV X0, X20
	0x03E2D290 MOV X1, X31
	0x03E2D294 MOV X2, X31
	0x03E2D298 BL 0x3C3883C
	0x03E2D29C TBZ X0, 0x0, 0x3E2D2B0
	0x03E2D2A0 LDP X20, X19, [X31 + 0x20]
	0x03E2D2A4 LDP X22, X21, [X31 + 0x10]
	0x03E2D2A8 LDP X30, X23, [X31], #0x30
	0x03E2D2AC RET
	0x03E2D2B0 MOV X0, X19
	0x03E2D2B4 BL 0x3E257AC
	0x03E2D2B8 MOV X1, X0
	0x03E2D2BC MOV X0, X19
	0x03E2D2C0 BL 0x3E2D30C
	0x03E2D2C4 LDR X20, [X19 + 0x1B8]
	0x03E2D2C8 MOV X0, X19
	0x03E2D2CC BL 0x3E257AC
	0x03E2D2D0 CBZ X20, 0x3E2D2F0
	0x03E2D2D4 MOV X1, X0
	0x03E2D2D8 MOV X0, X20
	0x03E2D2DC LDP X20, X19, [X31 + 0x20]
	0x03E2D2E0 LDP X22, X21, [X31 + 0x10]
	0x03E2D2E4 MOV X2, X31
	0x03E2D2E8 LDP X30, X23, [X31], #0x30
	0x03E2D2EC B 0x3E22AB0
	0x03E2D2F0 BL 0x1C16F20
	0x03E2D2F4 BL 0x1C16F28
	0x03E2D2F8 BL 0x1C16F44
	0x03E2D2FC MOV X1, X31
	0x03E2D300 BL 0x1C16DEC
	0x03E2D304 RET
	0x03E2D308 RET
	0x03E2D30C STP D9, D8, [X31 - 0x50]!
	0x03E2D310 STR X30, [X31 + 0x10]
	0x03E2D314 STP X24, X23, [X31 + 0x20]
	0x03E2D318 STP X22, X21, [X31 + 0x30]
	0x03E2D31C STP X20, X19, [X31 + 0x40]
	0x03E2D320 ADRP X22, 0x5BB000
	0x03E2D324 ADRP X19, 0x32C000
	0x03E2D328 LDRB W8, [X22 + 0x6FA]
	0x03E2D32C LDR X19, [X19 + 0x1A0]
	0x03E2D330 MOV X20, X1
	0x03E2D334 MOV X21, X0
	0x03E2D338 TBNZ X8, 0x0, 0x3E2D35C
	0x03E2D33C ADRP X0, 0x2C6000
	0x03E2D340 LDR X0, [X0 + 0xE00]
	0x03E2D344 BL 0x1C16CF4
	0x03E2D348 ADRP X0, 0x32C000
	0x03E2D34C LDR X0, [X0 + 0x1A0]
	0x03E2D350 BL 0x1C16CF4
	0x03E2D354 MOVZ W8, 0x1
	0x03E2D358 STRB W8, [X22 + 0x6FA]
	0x03E2D35C LDR X0, [X19]
	0x03E2D360 ADRP X23, 0x2C6000
	0x03E2D364 LDR X23, [X23 + 0xE00]
	0x03E2D368 BL 0x1C16F10
	0x03E2D36C MOV X1, X31
	0x03E2D370 MOV X19, X0
	0x03E2D374 BL 0x3E49354
	0x03E2D378 LDRB W8, [X21 + 0x1D0]
	0x03E2D37C CBZ W8, 0x3E2D404
	0x03E2D380 ADRP X24, 0x5AC000
	0x03E2D384 LDRB W8, [X24 + 0x78F]
	0x03E2D388 LDR X22, [X21 + 0x108]
	0x03E2D38C CBNZ W8, 0x3E2D3A4
	0x03E2D390 ADRP X0, 0x2CE000
	0x03E2D394 LDR X0, [X0 + 0xF08]
	0x03E2D398 BL 0x1C16CF4
	0x03E2D39C MOVZ W8, 0x1
	0x03E2D3A0 STRB W8, [X24 + 0x78F]
	0x03E2D3A4 CBZ X22, 0x3E2D4C8
	0x03E2D3A8 ADRP X8, 0x2CE000
	0x03E2D3AC LDR X8, [X8 + 0xF08]
	0x03E2D3B0 LDR X8, [X8]
	0x03E2D3B4 LDR X8, [X8 + 0xB8]
	0x03E2D3B8 LDP S0, S1, [X8]
	0x03E2D3BC MOV X0, X22
	0x03E2D3C0 MOV X1, X31
	0x03E2D3C4 BL 0x3CDD9A0
	0x03E2D3C8 MOV V9.16B, V0.16B
	0x03E2D3CC MOV V8.16B, V1.16B
	0x03E2D3D0 MOV X0, X21
	0x03E2D3D4 BL 0x3E26F3C
	0x03E2D3D8 MOV W22, W0
	0x03E2D3DC MOV X0, X21
	0x03E2D3E0 BL 0x3E26F98
	0x03E2D3E4 CMP W22, W0
	0x03E2D3E8 B.NE 0x3E2D420
	0x03E2D3EC MOV X0, X21
	0x03E2D3F0 MOV X1, X19
	0x03E2D3F4 MOV V0.16B, V9.16B
	0x03E2D3F8 MOV V1.16B, V8.16B
	0x03E2D3FC BL 0x3E2D594
	0x03E2D400 B 0x3E2D434
	0x03E2D404 CBZ X19, 0x3E2D4D0
	0x03E2D408 MOV X0, X19
	0x03E2D40C MOV X1, X20
	0x03E2D410 MOV X2, X31
	0x03E2D414 BL 0x3E49C28
	0x03E2D418 MOV X20, X31
	0x03E2D41C B 0x3E2D44C
	0x03E2D420 MOV X0, X21
	0x03E2D424 MOV X1, X19
	0x03E2D428 MOV V0.16B, V9.16B
	0x03E2D42C MOV V1.16B, V8.16B
	0x03E2D430 BL 0x3E2DCAC
	0x03E2D434 CBZ X19, 0x3E2D4CC
	0x03E2D438 MOV X0, X19
	0x03E2D43C MOV X1, X20
	0x03E2D440 MOV X2, X31
	0x03E2D444 BL 0x3E49C28
	0x03E2D448 MOV X20, X31
	0x03E2D44C LDR X8, [X19]
	0x03E2D450 LDR X1, [X23]
	0x03E2D454 LDRH W9, [X8 + 0x12E]
	0x03E2D458 CBZ X9, 0x3E2D47C
	0x03E2D45C LDR X10, [X8 + 0xB0]
	0x03E2D460 ADD X10, X10, 0x8
	0x03E2D464 LDUR X11, [X10 - 0x8]
	0x03E2D468 CMP X11, X1
	0x03E2D46C B.EQ 0x3E2D48C
	0x03E2D470 SUBS X9, X9, 0x1
	0x03E2D474 ADD X10, X10, 0x10
	0x03E2D478 B.NE 0x3E2D464
	0x03E2D47C MOV X0, X19
	0x03E2D480 MOV W2, W31
	0x03E2D484 BL 0x1C5C788
	0x03E2D488 B 0x3E2D498
	0x03E2D48C LDRSW X9, [X10]
	0x03E2D490 ADD X8, X8, X9, 0x4, LSL
	0x03E2D494 ADD X0, X8, 0x138
	0x03E2D498 LDP X8, X1, [X0]
	0x03E2D49C MOV X0, X19
	0x03E2D4A0 BLR X8
	0x03E2D4A4 CBNZ X20, 0x3E2D4C0
	0x03E2D4A8 LDP X20, X19, [X31 + 0x40]
	0x03E2D4AC LDP X22, X21, [X31 + 0x30]
	0x03E2D4B0 LDP X24, X23, [X31 + 0x20]
	0x03E2D4B4 LDR X30, [X31 + 0x10]
	0x03E2D4B8 LDP D9, D8, [X31], #0x50
	0x03E2D4BC RET
	0x03E2D4C0 MOV X0, X20
	0x03E2D4C4 BL 0x1C16F18
	0x03E2D4C8 BL 0x1C16F20
	0x03E2D4CC BL 0x1C16F20
	0x03E2D4D0 BL 0x1C16F20
	0x03E2D4D4 B 0x3E2D4F0
	0x03E2D4D8 B 0x3E2D4F0
	0x03E2D4DC B 0x3E2D4F0
	0x03E2D4E0 B 0x3E2D4F0
	0x03E2D4E4 B 0x3E2D4F0
	0x03E2D4E8 B 0x3E2D4F0
	0x03E2D4EC B 0x3E2D4F0
	0x03E2D4F0 MOV X21, X0
	0x03E2D4F4 CMP W1, 0x1
	0x03E2D4F8 B.NE 0x3E2D514
	0x03E2D4FC MOV X0, X21
	0x03E2D500 BL 0x3EB1AD0
	0x03E2D504 LDR X20, [X0]
	0x03E2D508 BL 0x3EB1AE0
	0x03E2D50C CBNZ X19, 0x3E2D44C
	0x03E2D510 B 0x3E2D4A4
	0x03E2D514 MOV X20, X31
	0x03E2D518 B 0x3E2D520
	0x03E2D51C MOV X21, X0
	0x03E2D520 CBZ X19, 0x3E2D57C
	0x03E2D524 LDR X8, [X19]
	0x03E2D528 LDR X1, [X23]
	0x03E2D52C LDRH W9, [X8 + 0x12E]
	0x03E2D530 CBZ X9, 0x3E2D554
	0x03E2D534 LDR X10, [X8 + 0xB0]
	0x03E2D538 ADD X10, X10, 0x8
	0x03E2D53C LDUR X11, [X10 - 0x8]
	0x03E2D540 CMP X11, X1
	0x03E2D544 B.EQ 0x3E2D564
	0x03E2D548 SUBS X9, X9, 0x1
	0x03E2D54C ADD X10, X10, 0x10
	0x03E2D550 B.NE 0x3E2D53C
	0x03E2D554 MOV X0, X19
	0x03E2D558 MOV W2, W31
	0x03E2D55C BL 0x1C5C788
	0x03E2D560 B 0x3E2D570
	0x03E2D564 LDRSW X9, [X10]
	0x03E2D568 ADD X8, X8, X9, 0x4, LSL
	0x03E2D56C ADD X0, X8, 0x138
	0x03E2D570 LDP X8, X1, [X0]
	0x03E2D574 MOV X0, X19
	0x03E2D578 BLR X8
	0x03E2D57C CBNZ X20, 0x3E2D588
	0x03E2D580 MOV X0, X21
	0x03E2D584 BL 0x1D2C690
	0x03E2D588 MOV X0, X20
	0x03E2D58C BL 0x1C16F18
	0x03E2D590 BL 0x1990590
	0x03E2D594 STP D13, D12, [X31 - 0x80]!
	0x03E2D598 STP D11, D10, [X31 + 0x10]
	0x03E2D59C STP D9, D8, [X31 + 0x20]
	0x03E2D5A0 STR X30, [X31 + 0x30]
	0x03E2D5A4 STP X26, X25, [X31 + 0x40]
	0x03E2D5A8 STP X24, X23, [X31 + 0x50]
	0x03E2D5AC STP X22, X21, [X31 + 0x60]
	0x03E2D5B0 STP X20, X19, [X31 + 0x70]
	0x03E2D5B4 ADRP X21, 0x5BB000
	0x03E2D5B8 LDRB W8, [X21 + 0x6FB]
	0x03E2D5BC MOV V8.16B, V1.16B
	0x03E2D5C0 MOV V9.16B, V0.16B
	0x03E2D5C4 MOV X20, X1
	0x03E2D5C8 MOV X19, X0
	0x03E2D5CC TBNZ X8, 0x0, 0x3E2D620
	0x03E2D5D0 ADRP X0, 0x32A000
	0x03E2D5D4 LDR X0, [X0 + 0x448]
	0x03E2D5D8 BL 0x1C16CF4
	0x03E2D5DC ADRP X0, 0x33D000
	0x03E2D5E0 LDR X0, [X0 + 0xFF8]
	0x03E2D5E4 BL 0x1C16CF4
	0x03E2D5E8 ADRP X0, 0x33D000
	0x03E2D5EC LDR X0, [X0 + 0xFE0]
	0x03E2D5F0 BL 0x1C16CF4
	0x03E2D5F4 ADRP X0, 0x33D000
	0x03E2D5F8 LDR X0, [X0 + 0xFD8]
	0x03E2D5FC BL 0x1C16CF4
	0x03E2D600 ADRP X0, 0x2C6000
	0x03E2D604 LDR X0, [X0 + 0x598]
	0x03E2D608 BL 0x1C16CF4
	0x03E2D60C ADRP X0, 0x31C000
	0x03E2D610 LDR X0, [X0 + 0x6B8]
	0x03E2D614 BL 0x1C16CF4
	0x03E2D618 MOVZ W8, 0x1
	0x03E2D61C STRB W8, [X21 + 0x6FB]
	0x03E2D620 LDRB W8, [X19 + 0x1D4]
	0x03E2D624 CBZ W8, 0x3E2DC84
	0x03E2D628 LDR X8, [X19 + 0x1A8]
	0x03E2D62C CBNZ X8, 0x3E2D638
	0x03E2D630 MOV X0, X19
	0x03E2D634 BL 0x3E2E414
	0x03E2D638 LDR V12, [X19 + 0x18C]
	0x03E2D63C MOV X0, X19
	0x03E2D640 BL 0x3E26F3C
	0x03E2D644 LDR X8, [X19 + 0x108]
	0x03E2D648 CBZ X8, 0x3E2D994
	0x03E2D64C LDR W26, [X19 + 0x1E4]
	0x03E2D650 MOV W22, W0
	0x03E2D654 MOV X0, X8
	0x03E2D658 MOV X1, X31
	0x03E2D65C BL 0x3E44E54
	0x03E2D660 CBZ X0, 0x3E2DC84
	0x03E2D664 MOV X1, X31
	0x03E2D668 MOV X21, X0
	0x03E2D66C BL 0x3CCF77C
	0x03E2D670 CBZ W0, 0x3E2DC84
	0x03E2D674 ADRP X24, 0x5AC000
	0x03E2D678 LDRB W8, [X24 + 0x78F]
	0x03E2D67C CBNZ W8, 0x3E2D694
	0x03E2D680 ADRP X0, 0x2CE000
	0x03E2D684 LDR X0, [X0 + 0xF08]
	0x03E2D688 BL 0x1C16CF4
	0x03E2D68C MOVZ W8, 0x1
	0x03E2D690 STRB W8, [X24 + 0x78F]
	0x03E2D694 ADRP X25, 0x2CE000
	0x03E2D698 LDR X25, [X25 + 0xF08]
	0x03E2D69C MOV X0, X21
	0x03E2D6A0 MOV X1, X31
	0x03E2D6A4 LDR X8, [X25]
	0x03E2D6A8 LDR X8, [X8 + 0xB8]
	0x03E2D6AC LDR V10, [X8]
	0x03E2D6B0 BL 0x3CCF680
	0x03E2D6B4 CBZ X0, 0x3E2D994
	0x03E2D6B8 ADRP X10, 0x33D000
	0x03E2D6BC LDR X8, [X0]
	0x03E2D6C0 LDR X10, [X10 + 0xFF8]
	0x03E2D6C4 MOV X23, X0
	0x03E2D6C8 LDRH W9, [X8 + 0x12E]
	0x03E2D6CC LDR X1, [X10]
	0x03E2D6D0 SUB W10, W22, W26
	0x03E2D6D4 BIC W22, W10, W10, 0x1F
	0x03E2D6D8 CBZ X9, 0x3E2D6FC
	0x03E2D6DC LDR X10, [X8 + 0xB0]
	0x03E2D6E0 ADD X10, X10, 0x8
	0x03E2D6E4 LDUR X11, [X10 - 0x8]
	0x03E2D6E8 CMP X11, X1
	0x03E2D6EC B.EQ 0x3E2D70C
	0x03E2D6F0 SUBS X9, X9, 0x1
	0x03E2D6F4 ADD X10, X10, 0x10
	0x03E2D6F8 B.NE 0x3E2D6E4
	0x03E2D6FC MOV X0, X23
	0x03E2D700 MOV W2, W31
	0x03E2D704 BL 0x1C5C788
	0x03E2D708 B 0x3E2D718
	0x03E2D70C LDRSW X9, [X10]
	0x03E2D710 ADD X8, X8, X9, 0x4, LSL
	0x03E2D714 ADD X0, X8, 0x138
	0x03E2D718 LDP X8, X1, [X0]
	0x03E2D71C MOV X0, X23
	0x03E2D720 BLR X8
	0x03E2D724 CMP W22, W0
	0x03E2D728 B.GE 0x3E2D7A8
	0x03E2D72C MOV X0, X21
	0x03E2D730 MOV X1, X31
	0x03E2D734 BL 0x3CCF680
	0x03E2D738 CBZ X0, 0x3E2D994
	0x03E2D73C ADRP X10, 0x33D000
	0x03E2D740 LDR X8, [X0]
	0x03E2D744 LDR X10, [X10 + 0xFE0]
	0x03E2D748 MOV X23, X0
	0x03E2D74C LDRH W9, [X8 + 0x12E]
	0x03E2D750 LDR X1, [X10]
	0x03E2D754 CBZ X9, 0x3E2D778
	0x03E2D758 LDR X10, [X8 + 0xB0]
	0x03E2D75C ADD X10, X10, 0x8
	0x03E2D760 LDUR X11, [X10 - 0x8]
	0x03E2D764 CMP X11, X1
	0x03E2D768 B.EQ 0x3E2D788
	0x03E2D76C SUBS X9, X9, 0x1
	0x03E2D770 ADD X10, X10, 0x10
	0x03E2D774 B.NE 0x3E2D760
	0x03E2D778 MOV X0, X23
	0x03E2D77C MOV W2, W31
	0x03E2D780 BL 0x1C5C788
	0x03E2D784 B 0x3E2D794
	0x03E2D788 LDRSW X9, [X10]
	0x03E2D78C ADD X8, X8, X9, 0x4, LSL
	0x03E2D790 ADD X0, X8, 0x138
	0x03E2D794 LDP X8, X2, [X0]
	0x03E2D798 MOV X0, X23
	0x03E2D79C MOV W1, W22
	0x03E2D7A0 BLR X8
	0x03E2D7A4 MOV V10.16B, V0.16B
	0x03E2D7A8 LDR X0, [X19 + 0x108]
	0x03E2D7AC CBZ X0, 0x3E2D994
	0x03E2D7B0 MOV X1, X31
	0x03E2D7B4 BL 0x3E458D0
	0x03E2D7B8 LDR X0, [X19 + 0x108]
	0x03E2D7BC CBZ X0, 0x3E2D994
	0x03E2D7C0 MOV X1, X31
	0x03E2D7C4 MOV V11.16B, V0.16B
	0x03E2D7C8 BL 0x3CDB488
	0x03E2D7CC CBZ X0, 0x3E2D994
	0x03E2D7D0 MOV X1, X31
	0x03E2D7D4 FDIV S11, S10, S11
	0x03E2D7D8 BL 0x3C3E51C
	0x03E2D7DC FADD S0, S2, S0
	0x03E2D7E0 FCMP S11, S0
	0x03E2D7E4 B.LE 0x3E2D808
	0x03E2D7E8 LDR X0, [X19 + 0x108]
	0x03E2D7EC CBZ X0, 0x3E2D994
	0x03E2D7F0 MOV X1, X31
	0x03E2D7F4 BL 0x3CDB488
	0x03E2D7F8 CBZ X0, 0x3E2D994
	0x03E2D7FC MOV X1, X31
	0x03E2D800 BL 0x3C3E51C
	0x03E2D804 FADD S11, S2, S0
	0x03E2D808 MOV W1, W22
	0x03E2D80C MOV X2, X21
	0x03E2D810 BL 0x3E2B37C
	0x03E2D814 MOV W22, W0
	0x03E2D818 MOV X0, X21
	0x03E2D81C MOV X1, X31
	0x03E2D820 BL 0x3CCF6DC
	0x03E2D824 CBZ X0, 0x3E2D994
	0x03E2D828 ADRP X26, 0x33D000
	0x03E2D82C LDR X8, [X0]
	0x03E2D830 LDR X26, [X26 + 0xFD8]
	0x03E2D834 MOV X23, X0
	0x03E2D838 LDRH W9, [X8 + 0x12E]
	0x03E2D83C LDR X1, [X26]
	0x03E2D840 CBZ X9, 0x3E2D864
	0x03E2D844 LDR X10, [X8 + 0xB0]
	0x03E2D848 ADD X10, X10, 0x8
	0x03E2D84C LDUR X11, [X10 - 0x8]
	0x03E2D850 CMP X11, X1
	0x03E2D854 B.EQ 0x3E2D874
	0x03E2D858 SUBS X9, X9, 0x1
	0x03E2D85C ADD X10, X10, 0x10
	0x03E2D860 B.NE 0x3E2D84C
	0x03E2D864 MOV X0, X23
	0x03E2D868 MOV W2, W31
	0x03E2D86C BL 0x1C5C788
	0x03E2D870 B 0x3E2D880
	0x03E2D874 LDRSW X9, [X10]
	0x03E2D878 ADD X8, X8, X9, 0x4, LSL
	0x03E2D87C ADD X0, X8, 0x138
	0x03E2D880 LDP X8, X2, [X0]
	0x03E2D884 MOV X0, X23
	0x03E2D888 MOV W1, W22
	0x03E2D88C BLR X8
	0x03E2D890 LDR X0, [X19 + 0x108]
	0x03E2D894 CBZ X0, 0x3E2D994
	0x03E2D898 MOV X23, X1
	0x03E2D89C MOV X1, X31
	0x03E2D8A0 BL 0x3E458D0
	0x03E2D8A4 MOV X0, X21
	0x03E2D8A8 MOV X1, X31
	0x03E2D8AC MOV V10.16B, V0.16B
	0x03E2D8B0 BL 0x3CCF6DC
	0x03E2D8B4 CBZ X0, 0x3E2D994
	0x03E2D8B8 LDR X8, [X0]
	0x03E2D8BC LDR X1, [X26]
	0x03E2D8C0 MOV X21, X0
	0x03E2D8C4 LDRH W9, [X8 + 0x12E]
	0x03E2D8C8 CBZ X9, 0x3E2D8EC
	0x03E2D8CC LDR X10, [X8 + 0xB0]
	0x03E2D8D0 ADD X10, X10, 0x8
	0x03E2D8D4 LDUR X11, [X10 - 0x8]
	0x03E2D8D8 CMP X11, X1
	0x03E2D8DC B.EQ 0x3E2D8FC
	0x03E2D8E0 SUBS X9, X9, 0x1
	0x03E2D8E4 ADD X10, X10, 0x10
	0x03E2D8E8 B.NE 0x3E2D8D4
	0x03E2D8EC MOV X0, X21
	0x03E2D8F0 MOV W2, W31
	0x03E2D8F4 BL 0x1C5C788
	0x03E2D8F8 B 0x3E2D908
	0x03E2D8FC LDRSW X9, [X10]
	0x03E2D900 ADD X8, X8, X9, 0x4, LSL
	0x03E2D904 ADD X0, X8, 0x138
	0x03E2D908 LDP X8, X2, [X0]
	0x03E2D90C MOV X0, X21
	0x03E2D910 MOV W1, W22
	0x03E2D914 BLR X8
	0x03E2D918 LDR X8, [X19 + 0x108]
	0x03E2D91C CBZ X8, 0x3E2D994
	0x03E2D920 MOV X21, X0
	0x03E2D924 MOV X0, X8
	0x03E2D928 MOV X1, X31
	0x03E2D92C BL 0x3E458D0
	0x03E2D930 LDR X22, [X19 + 0x1A8]
	0x03E2D934 CBZ X22, 0x3E2D994
	0x03E2D938 FMOV S1, W23
	0x03E2D93C UBFM X8, X21, 0x20, 0x3F
	0x03E2D940 FDIV S10, S1, S10
	0x03E2D944 SCVTF S1, W8
	0x03E2D948 MOV X26, X31
	0x03E2D94C SCVTF S12, S12
	0x03E2D950 FDIV S13, S1, S0
	0x03E2D954 MOVZ W21, 0x48
	0x03E2D958 LDR X8, [X22 + 0x18]
	0x03E2D95C CMP X26, W8, SXTW
	0x03E2D960 B.GE 0x3E2D998
	0x03E2D964 MOV X0, X19
	0x03E2D968 BL 0x3E26708
	0x03E2D96C MOV X0, X31
	0x03E2D970 BL 0x1E43664
	0x03E2D974 LDR W8, [X22 + 0x18]
	0x03E2D978 CMP X26, X8
	0x03E2D97C B.CS 0x3E2DCA8
	0x03E2D980 STR W0, [X22, X21, LSL]
	0x03E2D984 LDR X22, [X19 + 0x1A8]
	0x03E2D988 ADD X21, X21, 0x6C
	0x03E2D98C ADD X26, X26, 0x1
	0x03E2D990 CBNZ X22, 0x3E2D958
	0x03E2D994 BL 0x1C16F20
	0x03E2D998 CBZ W8, 0x3E2DCA8
	0x03E2D99C FSUB S0, S10, S13
	0x03E2D9A0 STP S11, S0, [X22 + 0x20]
	0x03E2D9A4 STR W31, [X22 + 0x28]
	0x03E2D9A8 LDR X8, [X19 + 0x1A8]
	0x03E2D9AC CBZ X8, 0x3E2D994
	0x03E2D9B0 LDR W9, [X8 + 0x18]
	0x03E2D9B4 CMP W9, 0x1
	0x03E2D9B8 B.LS 0x3E2DCA8
	0x03E2D9BC FADD S1, S11, S12
	0x03E2D9C0 STP S1, S0, [X8 + 0x8C]
	0x03E2D9C4 STR W31, [X8 + 0x94]
	0x03E2D9C8 LDR X8, [X19 + 0x1A8]
	0x03E2D9CC CBZ X8, 0x3E2D994
	0x03E2D9D0 LDR W9, [X8 + 0x18]
	0x03E2D9D4 CMP W9, 0x2
	0x03E2D9D8 B.LS 0x3E2DCA8
	0x03E2D9DC STP S1, S10, [X8 + 0xF8]
	0x03E2D9E0 STR W31, [X8 + 0x100]
	0x03E2D9E4 LDR X8, [X19 + 0x1A8]
	0x03E2D9E8 CBZ X8, 0x3E2D994
	0x03E2D9EC LDR W9, [X8 + 0x18]
	0x03E2D9F0 CMP W9, 0x3
	0x03E2D9F4 B.LS 0x3E2DCA8
	0x03E2D9F8 STR S11, [X8 + 0x164]
	0x03E2D9FC STR S10, [X8 + 0x168]
	0x03E2DA00 STR W31, [X8 + 0x16C]
	0x03E2DA04 LDRB W8, [X24 + 0x78F]
	0x03E2DA08 CBNZ W8, 0x3E2DA20
	0x03E2DA0C ADRP X0, 0x2CE000
	0x03E2DA10 LDR X0, [X0 + 0xF08]
	0x03E2DA14 BL 0x1C16CF4
	0x03E2DA18 MOVZ W8, 0x1
	0x03E2DA1C STRB W8, [X24 + 0x78F]
	0x03E2DA20 LDR X8, [X25]
	0x03E2DA24 LDR X8, [X8 + 0xB8]
	0x03E2DA28 LDP S0, S1, [X8]
	0x03E2DA2C ADRP X8, 0xFFFFFFFFFCCBC000
	0x03E2DA30 LDR V2, [X8 + 0xF20]
	0x03E2DA34 FSUB S0, S9, S0
	0x03E2DA38 FSUB S1, S8, S1
	0x03E2DA3C FMUL S0, S0, S0
	0x03E2DA40 FMUL S1, S1, S1
	0x03E2DA44 FADD S0, S0, S1
	0x03E2DA48 FCMP S0, S2
	0x03E2DA4C B.MI 0x3E2DA7C
	0x03E2DA50 LDR X8, [X19 + 0x1A8]
	0x03E2DA54 CBZ X8, 0x3E2D994
	0x03E2DA58 LDR W8, [X8 + 0x18]
	0x03E2DA5C CMP W8, 0x1
	0x03E2DA60 B.LT 0x3E2DA7C
	0x03E2DA64 MOV W9, W31
	0x03E2DA68 CMP W9, W8
	0x03E2DA6C B.CS 0x3E2DCA8
	0x03E2DA70 ADD W9, W9, 0x1
	0x03E2DA74 CMP W9, W8
	0x03E2DA78 B.LT 0x3E2DA68
	0x03E2DA7C CBZ X20, 0x3E2D994
	0x03E2DA80 LDR X1, [X19 + 0x1A8]
	0x03E2DA84 MOV X0, X20
	0x03E2DA88 MOV X2, X31
	0x03E2DA8C BL 0x3E464E4
	0x03E2DA90 MOV X0, X31
	0x03E2DA94 BL 0x3C0E0D8
	0x03E2DA98 LDR X8, [X19 + 0x108]
	0x03E2DA9C CBZ X8, 0x3E2D994
	0x03E2DAA0 MOV W20, W0
	0x03E2DAA4 MOV X0, X8
	0x03E2DAA8 MOV X1, X31
	0x03E2DAAC BL 0x3CDADE8
	0x03E2DAB0 CBZ X0, 0x3E2D994
	0x03E2DAB4 MOV X1, X31
	0x03E2DAB8 BL 0x3E249A4
	0x03E2DABC CMP W0, 0x1
	0x03E2DAC0 B.LT 0x3E2DB3C
	0x03E2DAC4 ADRP X22, 0x32A000
	0x03E2DAC8 LDR X22, [X22 + 0x448]
	0x03E2DACC MOV W21, W0
	0x03E2DAD0 LDR X0, [X22]
	0x03E2DAD4 LDR W8, [X0 + 0xE0]
	0x03E2DAD8 CBNZ W8, 0x3E2DAE4
	0x03E2DADC BL 0x1C16DFC
	0x03E2DAE0 LDR X0, [X22]
	0x03E2DAE4 LDR X8, [X0 + 0xB8]
	0x03E2DAE8 LDR X8, [X8]
	0x03E2DAEC CBZ X8, 0x3E2D994
	0x03E2DAF0 LDR W9, [X8 + 0x18]
	0x03E2DAF4 CMP W21, W9
	0x03E2DAF8 B.GE 0x3E2DB3C
	0x03E2DAFC LDR W9, [X0 + 0xE0]
	0x03E2DB00 CBNZ W9, 0x3E2DB18
	0x03E2DB04 BL 0x1C16DFC
	0x03E2DB08 LDR X8, [X22]
	0x03E2DB0C LDR X8, [X8 + 0xB8]
	0x03E2DB10 LDR X8, [X8]
	0x03E2DB14 CBZ X8, 0x3E2D994
	0x03E2DB18 LDR W9, [X8 + 0x18]
	0x03E2DB1C CMP W21, W9
	0x03E2DB20 B.CS 0x3E2DCA8
	0x03E2DB24 ADD X8, X8, W21, 0x3, UXTW
	0x03E2DB28 LDR X0, [X8 + 0x20]
	0x03E2DB2C CBZ X0, 0x3E2D994
	0x03E2DB30 MOV X1, X31
	0x03E2DB34 BL 0x3C0D7B8
	0x03E2DB38 MOV W20, W0
	0x03E2DB3C LDR X0, [X19 + 0x108]
	0x03E2DB40 CBZ X0, 0x3E2D994
	0x03E2DB44 MOV X1, X31
	0x03E2DB48 BL 0x3CDADE8
	0x03E2DB4C CBZ X0, 0x3E2D994
	0x03E2DB50 MOV X1, X31
	0x03E2DB54 BL 0x3E244BC
	0x03E2DB58 CBZ W0, 0x3E2DB80
	0x03E2DB5C LDR X0, [X19 + 0x108]
	0x03E2DB60 CBZ X0, 0x3E2D994
	0x03E2DB64 MOV X1, X31
	0x03E2DB68 BL 0x3CDADE8
	0x03E2DB6C CBZ X0, 0x3E2D994
	0x03E2DB70 MOV X1, X31
	0x03E2DB74 BL 0x3E24E68
	0x03E2DB78 MOV X21, X0
	0x03E2DB7C B 0x3E2DB84
	0x03E2DB80 MOV X21, X31
	0x03E2DB84 LDR X0, [X19 + 0x1B8]
	0x03E2DB88 CBZ X0, 0x3E2D994
	0x03E2DB8C MOV X1, X31
	0x03E2DB90 BL 0x3C32ECC
	0x03E2DB94 CBZ X0, 0x3E2D994
	0x03E2DB98 MOV X1, X31
	0x03E2DB9C BL 0x3C356F8
	0x03E2DBA0 LDR X8, [X19 + 0x1A8]
	0x03E2DBA4 CBZ X8, 0x3E2D994
	0x03E2DBA8 LDR W9, [X8 + 0x18]
	0x03E2DBAC CBZ W9, 0x3E2DCA8
	0x03E2DBB0 CBZ X0, 0x3E2D994
	0x03E2DBB4 LDP S1, S2, [X8 + 0x24]
	0x03E2DBB8 LDR V0, [X8 + 0x20]
	0x03E2DBBC MOV X1, X31
	0x03E2DBC0 BL 0x3C3DE4C
	0x03E2DBC4 ADRP X8, 0x31C000
	0x03E2DBC8 LDR X8, [X8 + 0x6B8]
	0x03E2DBCC MOV V8.16B, V0.16B
	0x03E2DBD0 MOV V9.16B, V1.16B
	0x03E2DBD4 MOV V10.16B, V2.16B
	0x03E2DBD8 LDR X0, [X8]
	0x03E2DBDC LDR W8, [X0 + 0xE0]
	0x03E2DBE0 CBNZ W8, 0x3E2DBE8
	0x03E2DBE4 BL 0x1C16DFC
	0x03E2DBE8 MOV X0, X21
	0x03E2DBEC MOV V0.16B, V8.16B
	0x03E2DBF0 MOV V1.16B, V9.16B
	0x03E2DBF4 MOV V2.16B, V10.16B
	0x03E2DBF8 MOV X1, X31
	0x03E2DBFC BL 0x3E23B94
	0x03E2DC00 MOV V8.16B, V0.16B
	0x03E2DC04 MOV V9.16B, V1.16B
	0x03E2DC08 BL 0x3E25300
	0x03E2DC0C ADRP X8, 0x2C6000
	0x03E2DC10 LDR X8, [X8 + 0x598]
	0x03E2DC14 MOV X19, X0
	0x03E2DC18 LDR X8, [X8]
	0x03E2DC1C LDR W9, [X8 + 0xE0]
	0x03E2DC20 CBNZ W9, 0x3E2DC2C
	0x03E2DC24 MOV X0, X8
	0x03E2DC28 BL 0x1C16DFC
	0x03E2DC2C MOV X0, X19
	0x03E2DC30 MOV X1, X31
	0x03E2DC34 MOV X2, X31
	0x03E2DC38 BL 0x3C354F8
	0x03E2DC3C TBZ X0, 0x0, 0x3E2DC84
	0x03E2DC40 BL 0x3E25300
	0x03E2DC44 CBZ X0, 0x3E2D994
	0x03E2DC48 LDR X8, [X0]
	0x03E2DC4C SCVTF S0, W20
	0x03E2DC50 FSUB S1, S0, S9
	0x03E2DC54 MOV V0.16B, V8.16B
	0x03E2DC58 LDR X2, [X8 + 0x288]
	0x03E2DC5C LDR X1, [X8 + 0x290]
	0x03E2DC60 LDP X20, X19, [X31 + 0x70]
	0x03E2DC64 LDP X22, X21, [X31 + 0x60]
	0x03E2DC68 LDP X24, X23, [X31 + 0x50]
	0x03E2DC6C LDP X26, X25, [X31 + 0x40]
	0x03E2DC70 LDR X30, [X31 + 0x30]
	0x03E2DC74 LDP D9, D8, [X31 + 0x20]
	0x03E2DC78 LDP D11, D10, [X31 + 0x10]
	0x03E2DC7C LDP D13, D12, [X31], #0x80
	0x03E2DC80 BR X2
	0x03E2DC84 LDP X20, X19, [X31 + 0x70]
	0x03E2DC88 LDP X22, X21, [X31 + 0x60]
	0x03E2DC8C LDP X24, X23, [X31 + 0x50]
	0x03E2DC90 LDP X26, X25, [X31 + 0x40]
	0x03E2DC94 LDR X30, [X31 + 0x30]
	0x03E2DC98 LDP D9, D8, [X31 + 0x20]
	0x03E2DC9C LDP D11, D10, [X31 + 0x10]
	0x03E2DCA0 LDP D13, D12, [X31], #0x80
	0x03E2DCA4 RET
	0x03E2DCA8 BL 0x1C16F28
	0x03E2DCAC STP D15, D14, [X31 - 0xA0]!
	0x03E2DCB0 STP D13, D12, [X31 + 0x10]
	0x03E2DCB4 STP D11, D10, [X31 + 0x20]
	0x03E2DCB8 STP D9, D8, [X31 + 0x30]
	0x03E2DCBC STP X29, X30, [X31 + 0x40]
	0x03E2DCC0 STP X28, X27, [X31 + 0x50]
	0x03E2DCC4 STP X26, X25, [X31 + 0x60]
	0x03E2DCC8 STP X24, X23, [X31 + 0x70]
	0x03E2DCCC STP X22, X21, [X31 + 0x80]
	0x03E2DCD0 STP X20, X19, [X31 + 0x90]
	0x03E2DCD4 SUB X31, X31, 0x290
	0x03E2DCD8 ADRP X21, 0x5BB000
	0x03E2DCDC LDRB W8, [X21 + 0x6FD]
	0x03E2DCE0 MOV X20, X0
	0x03E2DCE4 STP S0, S1, [X31 + 0x68]
	0x03E2DCE8 STR X1, [X31 + 0x70]
	0x03E2DCEC TBNZ X8, 0x0, 0x3E2DD28
	0x03E2DCF0 ADRP X0, 0x33D000
	0x03E2DCF4 LDR X0, [X0 + 0xFE0]
	0x03E2DCF8 BL 0x1C16CF4
	0x03E2DCFC ADRP X0, 0x33D000
	0x03E2DD00 LDR X0, [X0 + 0xFD8]
	0x03E2DD04 BL 0x1C16CF4
	0x03E2DD08 ADRP X0, 0x33D000
	0x03E2DD0C LDR X0, [X0 + 0xFB8]
	0x03E2DD10 BL 0x1C16CF4

ISIL:
	001 Move [X31-112], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x5BC000
	015 Move W8, [X20+1782]
	016 Move W22, W1
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {36}
	022 Move X0, 0x33E000
	023 Move X0, [X0+4072]
	024 Call 0x1C17CF4
	025 Move X0, 0x33E000
	026 Move X0, [X0+4064]
	027 Call 0x1C17CF4
	028 Move X0, 0x33E000
	029 Move X0, [X0+4056]
	030 Call 0x1C17CF4
	031 Move X0, 0x33E000
	032 Move X0, [X0+4024]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1782], W8
	036 Move X0, X19
	037 Call InputField.get_cachedInputTextGenerator, X0
	038 Compare X0, 0
	039 JumpIfEqual {278}
	040 Move X1, X31
	041 Call TextGenerator.get_lineCount, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, X19
	044 Call InputField.get_cachedInputTextGenerator, X0
	045 Compare X0, 0
	046 JumpIfEqual {278}
	047 Move X1, X31
	048 Call TextGenerator.get_rectExtents, X0
	049 Move W20, [X19+296]
	050 Move X0, X19
	051 Move V9, V2
	052 Move V8, V3
	053 Call InputField.get_cachedInputTextGenerator, X0
	054 Compare X0, 0
	055 JumpIfEqual {278}
	056 Subtract W8, W20, 1
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X1, X31
	059 Call TextGenerator.get_lines, X0
	060 Move X20, X0
	061 Move X0, X19
	062 Call InputField.get_cachedInputTextGenerator, X0
	063 Move W1, W22
	064 Move X2, X0
	065 Call InputField.DetermineCharacterLine, X0, X1, X2
	066 Move W8, [X19+488]
	067 Move W21, W0
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Move X0, X19
	070 Call InputField.get_cachedInputTextGenerator, X0
	071 Move X23, 0x33E000
	072 Move X23, [X23+4024]
	073 Move X22, X0
	074 Move X8, [X23]
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move X0, X22
	081 Move W1, W21
	082 Call InputField.GetLineEndPosition, X0, X1
	083 Move [X19+488], W0
	084 Compare X20, 0
	085 JumpIfEqual {278}
	086 Move X24, 0x33E000
	087 Move X8, [X20]
	088 Move X24, [X24+4056]
	089 NotImplemented "Instruction LDRH not yet implemented."
	090 Move X1, [X24]
	091 Compare X9, 0
	092 JumpIfEqual {99}
	093 Move X10, [X8+176]
	094 Add X10, X10, 8
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Subtract X9, X9, 1
	098 Add X10, X10, 16
	099 Move X0, X20
	100 Move W2, W31
	101 Call 0x1C5D788
	102 Move X1, X31
	103 Call TextGenerator.get_characters, X0
	104 Move W21, [X19+488]
	105 Move X20, X0
	106 Move X0, X19
	107 Call InputField.get_cachedInputTextGenerator, X0
	108 Compare X0, 0
	109 JumpIfEqual {278}
	110 Move X1, X31
	111 Call TextGenerator.get_characterCountVisible, X0
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move X0, X19
	114 Call InputField.get_cachedInputTextGenerator, X0
	115 Compare X0, 0
	116 JumpIfEqual {278}
	117 Move X1, X31
	118 Call TextGenerator.get_characterCountVisible, X0
	119 Move [X19+488], W0
	120 Move W23, [X19+484]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move X0, X19
	123 Call InputField.get_cachedInputTextGenerator, X0
	124 Move X8, 0x33E000
	125 Move X8, [X8+4024]
	126 Move X22, X0
	127 Move X8, [X8]
	128 Move W9, [X8+224]
	129 Compare W9, 0
	130 JumpIfNotEqual {133}
	131 Move X0, X8
	132 Call 0x1C17DFC
	133 Move X0, X22
	134 Move W1, W21
	135 Call InputField.GetLineStartPosition, X0, X1
	136 Move W23, W0
	137 Move [X19+484], W0
	138 Move X0, X19
	139 Call InputField.get_cachedInputTextGenerator, X0
	140 Move W1, W23
	141 Move X2, X0
	142 Call InputField.DetermineCharacterLine, X0, X1, X2
	143 Compare X20, 0
	144 JumpIfEqual {278}
	145 Move X26, 0x33E000
	146 Move X8, [X20]
	147 Move X26, [X26+4056]
	148 Move W21, W0
	149 NotImplemented "Instruction LDRH not yet implemented."
	150 Move X1, [X26]
	151 Compare X9, 0
	152 JumpIfEqual {159}
	153 Move X10, [X8+176]
	154 Add X10, X10, 8
	155 NotImplemented "Instruction LDUR not yet implemented."
	156 NotImplemented "Instruction CMP not yet implemented."
	157 Subtract X9, X9, 1
	158 Add X10, X10, 16
	159 Move X0, X20
	160 Move W2, W31
	161 Call 0x1C5D788
	162 Move W0, [X19+488]
	163 NotImplemented "Instruction CMP not yet implemented."
	164 Move W8, [X19+484]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Subtract W21, W22, 1
	167 Move [X19+488], W22
	168 Move [X19+484], W21
	169 Compare X20, 0
	170 JumpIfEqual {278}
	171 Move X22, 0x33E000
	172 Move X22, [X22+4064]
	173 Move S8, W31
	174 Move X8, [X20]
	175 Move X1, [X22]
	176 NotImplemented "Instruction LDRH not yet implemented."
	177 Compare X9, 0
	178 JumpIfEqual {185}
	179 Move X10, [X8+176]
	180 Add X10, X10, 8
	181 NotImplemented "Instruction LDUR not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Subtract X9, X9, 1
	184 Add X10, X10, 16
	185 Move X0, X20
	186 Move W2, W31
	187 Call 0x1C5D788
	188 NotImplemented "Instruction LDRSW not yet implemented."
	189 Add X8, X8, X9
	190 Add X0, X8, 312
	191 Move X8, [X0]
	192 Move X2, [X0+8]
	193 Move X0, X20
	194 Move W1, W21
	195 NotImplemented "Instruction BLR not yet implemented."
	196 Move W21, [X19+484]
	197 Add S0, S8, S2
	198 NotImplemented "Instruction FCMP not yet implemented."
	199 Move X8, [X20]
	200 Move X1, [X22]
	201 NotImplemented "Instruction LDRH not yet implemented."
	202 Compare X9, 0
	203 JumpIfEqual {210}
	204 Move X10, [X8+176]
	205 Add X10, X10, 8
	206 NotImplemented "Instruction LDUR not yet implemented."
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Subtract X9, X9, 1
	209 Add X10, X10, 16
	210 Move X0, X20
	211 Move W2, W31
	212 Call 0x1C5D788
	213 NotImplemented "Instruction LDRSW not yet implemented."
	214 Add X8, X8, X9
	215 Add X0, X8, 312
	216 Move X8, [X0]
	217 Move X2, [X0+8]
	218 Move X0, X20
	219 Move W1, W21
	220 NotImplemented "Instruction BLR not yet implemented."
	221 Move W8, [X19+484]
	222 Add S8, S8, S2
	223 Subtract W21, W8, 1
	224 Move [X19+484], W21
	225 Move W22, [X19+488]
	226 Move S8, W31
	227 Add W8, W21, 1
	228 Move [X19+484], W8
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move W8, W22
	231 Move [X19+484], W22
	232 Move S8, W31
	233 Move W22, W8
	234 Move [X19+488], W8
	235 Move X0, X19
	236 Call InputField.get_cachedInputTextGenerator, X0
	237 Compare X0, 0
	238 JumpIfEqual {278}
	239 Move X23, 0x33E000
	240 Move X23, [X23+4064]
	241 Move X1, X31
	242 Call TextGenerator.get_characterCountVisible, X0
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Compare X20, 0
	245 JumpIfEqual {278}
	246 Move X8, [X20]
	247 Move W21, [X19+488]
	248 Move X1, [X23]
	249 NotImplemented "Instruction LDRH not yet implemented."
	250 Compare X9, 0
	251 JumpIfEqual {258}
	252 Move X10, [X8+176]
	253 Add X10, X10, 8
	254 NotImplemented "Instruction LDUR not yet implemented."
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Subtract X9, X9, 1
	257 Add X10, X10, 16
	258 Move X0, X20
	259 Move W2, W31
	260 Call 0x1C5D788
	261 NotImplemented "Instruction LDRSW not yet implemented."
	262 Add X8, X8, X9
	263 Add X0, X8, 312
	264 Move X8, [X0]
	265 Move X2, [X0+8]
	266 Move X0, X20
	267 Move W1, W21
	268 NotImplemented "Instruction BLR not yet implemented."
	269 Add S8, S8, S2
	270 NotImplemented "Instruction FCMP not yet implemented."
	271 Move W8, [X19+488]
	272 Move X0, X19
	273 Add W22, W8, 1
	274 Move [X19+488], W22
	275 Call InputField.get_cachedInputTextGenerator, X0
	276 Compare X0, 0
	277 JumpIfNotEqual {241}
	278 Call 0x1C17F20
	279 NotImplemented "Instruction LDRSW not yet implemented."
	280 Add X8, X8, X9
	281 Add X0, X8, 312
	282 Move X8, [X0]
	283 Move X2, [X0+8]
	284 Move X0, X20
	285 Move W1, W21
	286 NotImplemented "Instruction BLR not yet implemented."
	287 Move X9, [X20]
	288 Move X8, [X24]
	289 Move X22, X1
	290 NotImplemented "Instruction LDRH not yet implemented."
	291 Compare X10, 0
	292 JumpIfEqual {299}
	293 Move X11, [X9+176]
	294 Add X11, X11, 8
	295 NotImplemented "Instruction LDUR not yet implemented."
	296 NotImplemented "Instruction CMP not yet implemented."
	297 Subtract X10, X10, 1
	298 Add X11, X11, 16
	299 Move X0, X20
	300 Move X1, X8
	301 Move W2, W31
	302 Call 0x1C5D788
	303 NotImplemented "Instruction LDRSW not yet implemented."
	304 Add X8, X8, X9
	305 Add X0, X8, 312
	306 Move X8, [X0]
	307 Move X2, [X0+8]
	308 Move X0, X20
	309 Move W1, W21
	310 NotImplemented "Instruction BLR not yet implemented."
	311 Move X9, [X20]
	312 Move X8, [X26]
	313 Move X22, X1
	314 NotImplemented "Instruction LDRH not yet implemented."
	315 Compare X10, 0
	316 JumpIfEqual {323}
	317 Move X11, [X9+176]
	318 Add X11, X11, 8
	319 NotImplemented "Instruction LDUR not yet implemented."
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Subtract X10, X10, 1
	322 Add X11, X11, 16
	323 Move X0, X20
	324 Move X1, X8
	325 Move W2, W31
	326 Call 0x1C5D788
	327 NotImplemented "Instruction LDRSW not yet implemented."
	328 Add X8, X9, X8
	329 Add X0, X8, 312
	330 Move X8, [X0]
	331 Move X2, [X0+8]
	332 Move X0, X20
	333 Move W1, W21
	334 Move S9, W22
	335 NotImplemented "Instruction BLR not yet implemented."
	336 Move X10, 0x33E000
	337 Move X8, [X20]
	338 Move X10, [X10+4072]
	339 NotImplemented "Instruction LDRH not yet implemented."
	340 Move X1, [X10]
	341 Move X10, X0
	342 ShiftRight X10, 32
	343 And X10, X10, 0x7FFFFFFF
	344 NotImplemented "Instruction SCVTF not yet implemented."
	345 Compare X9, 0
	346 JumpIfEqual {353}
	347 Move X10, [X8+176]
	348 Add X10, X10, 8
	349 NotImplemented "Instruction LDUR not yet implemented."
	350 NotImplemented "Instruction CMP not yet implemented."
	351 Subtract X9, X9, 1
	352 Add X10, X10, 16
	353 Move X0, X20
	354 Move W2, W31
	355 Call 0x1C5D788
	356 NotImplemented "Instruction LDRSW not yet implemented."
	357 Add X8, X9, X8
	358 Add X0, X8, 312
	359 Move X8, [X0]
	360 Move X2, [X0+8]
	361 Move X0, X20
	362 Move W1, W21
	363 NotImplemented "Instruction BLR not yet implemented."
	364 Move X9, [X20]
	365 Move X8, [X26]
	366 Move X23, X1
	367 NotImplemented "Instruction LDRH not yet implemented."
	368 Compare X10, 0
	369 JumpIfEqual {376}
	370 Move X11, [X9+176]
	371 Add X11, X11, 8
	372 NotImplemented "Instruction LDUR not yet implemented."
	373 NotImplemented "Instruction CMP not yet implemented."
	374 Subtract X10, X10, 1
	375 Add X11, X11, 16
	376 Move X0, X20
	377 Move X1, X8
	378 Move W2, W31
	379 Call 0x1C5D788
	380 NotImplemented "Instruction LDRSW not yet implemented."
	381 Add X8, X8, X9
	382 Add X0, X8, 312
	383 Move X8, [X0]
	384 Move X1, [X0+8]
	385 Move X0, X20
	386 Subtract S9, S9, S10
	387 NotImplemented "Instruction BLR not yet implemented."
	388 Subtract W8, W0, 1
	389 NotImplemented "Instruction CMP not yet implemented."
	390 Move X8, [X20]
	391 Move X1, [X24]
	392 NotImplemented "Instruction LDRH not yet implemented."
	393 Compare X9, 0
	394 JumpIfEqual {401}
	395 Move X10, [X8+176]
	396 Add X10, X10, 8
	397 NotImplemented "Instruction LDUR not yet implemented."
	398 NotImplemented "Instruction CMP not yet implemented."
	399 Subtract X9, X9, 1
	400 Add X10, X10, 16
	401 Move X0, X20
	402 Move W2, W31
	403 Call 0x1C5D788
	404 NotImplemented "Instruction LDRSW not yet implemented."
	405 Add X8, X9, X8
	406 Add X0, X8, 312
	407 Move X8, [X0]
	408 Move X2, [X0+8]
	409 Move X0, X20
	410 Move W1, W21
	411 Move S9, W23
	412 NotImplemented "Instruction BLR not yet implemented."
	413 Move X27, 0x33E000
	414 Move X8, [X20]
	415 Move X27, [X27+4072]
	416 Move X10, X0
	417 ShiftRight X10, 32
	418 And X10, X10, 0x7FFFFFFF
	419 NotImplemented "Instruction SCVTF not yet implemented."
	420 NotImplemented "Instruction LDRH not yet implemented."
	421 Move X1, [X27]
	422 Compare X9, 0
	423 JumpIfEqual {430}
	424 Move X10, [X8+176]
	425 Add X10, X10, 8
	426 NotImplemented "Instruction LDUR not yet implemented."
	427 NotImplemented "Instruction CMP not yet implemented."
	428 Subtract X9, X9, 1
	429 Add X10, X10, 16
	430 Move X0, X20
	431 Move W2, W31
	432 Call 0x1C5D788
	433 NotImplemented "Instruction LDRSW not yet implemented."
	434 Add X8, X8, X9
	435 Add X0, X8, 312
	436 Move X8, [X0]
	437 Move X1, [X0+8]
	438 Move X0, X20
	439 Subtract S9, S9, S10
	440 NotImplemented "Instruction BLR not yet implemented."
	441 Subtract W8, W0, 1
	442 NotImplemented "Instruction CMP not yet implemented."
	443 Move X8, [X20]
	444 Move X1, [X26]
	445 NotImplemented "Instruction LDRH not yet implemented."
	446 Compare X9, 0
	447 JumpIfEqual {454}
	448 Move X10, [X8+176]
	449 Add X10, X10, 8
	450 NotImplemented "Instruction LDUR not yet implemented."
	451 NotImplemented "Instruction CMP not yet implemented."
	452 Subtract X9, X9, 1
	453 Add X10, X10, 16
	454 Move X0, X20
	455 Move W2, W31
	456 Call 0x1C5D788
	457 NotImplemented "Instruction LDRSW not yet implemented."
	458 Add X8, X8, X9
	459 Add X0, X8, 312
	460 Move X8, [X0]
	461 Move X2, [X0+8]
	462 Move X0, X20
	463 Move W1, W21
	464 NotImplemented "Instruction BLR not yet implemented."
	465 Move X8, X1
	466 ShiftRight X8, 32
	467 And X8, X8, 0x7FFFFFFF
	468 Move S0, W8
	469 Add S9, S9, S0
	470 Move W22, W21
	471 NotImplemented "Instruction CMP not yet implemented."
	472 Move X8, [X20]
	473 Move X1, [X24]
	474 Subtract W21, W22, 1
	475 NotImplemented "Instruction LDRH not yet implemented."
	476 Compare X9, 0
	477 JumpIfEqual {484}
	478 Move X10, [X8+176]
	479 Add X10, X10, 8
	480 NotImplemented "Instruction LDUR not yet implemented."
	481 NotImplemented "Instruction CMP not yet implemented."
	482 Subtract X9, X9, 1
	483 Add X10, X10, 16
	484 Move X0, X20
	485 Move W2, W31
	486 Call 0x1C5D788
	487 NotImplemented "Instruction LDRSW not yet implemented."
	488 Add X8, X8, X9
	489 Add X0, X8, 312
	490 Move X8, [X0]
	491 Move X2, [X0+8]
	492 Move X0, X20
	493 Move W1, W21
	494 NotImplemented "Instruction BLR not yet implemented."
	495 Move S0, W1
	496 Subtract S0, S0, S9
	497 NotImplemented "Instruction FCMP not yet implemented."
	498 Move X0, X19
	499 Call InputField.get_cachedInputTextGenerator, X0
	500 Move X8, [X23]
	501 NotImplemented "Instruction LDRSW not yet implemented."
	502 Add X8, X8, X9
	503 Add X0, X8, 312
	504 Move X8, [X0]
	505 Move X2, [X0+8]
	506 Move X0, X20
	507 Move W1, W21
	508 NotImplemented "Instruction BLR not yet implemented."
	509 Move X8, X1
	510 ShiftRight X8, 32
	511 And X8, X8, 0x7FFFFFFF
	512 Move S0, W8
	513 Add S9, S9, S0
	514 Move S10, W22
	515 Move W23, W21
	516 Move X8, [X20]
	517 Move X1, [X27]
	518 Move W22, W23
	519 NotImplemented "Instruction LDRH not yet implemented."
	520 Compare X9, 0
	521 JumpIfEqual {528}
	522 Move X10, [X8+176]
	523 Add X10, X10, 8
	524 NotImplemented "Instruction LDUR not yet implemented."
	525 NotImplemented "Instruction CMP not yet implemented."
	526 Subtract X9, X9, 1
	527 Add X10, X10, 16
	528 Move X0, X20
	529 Move W2, W31
	530 Call 0x1C5D788
	531 NotImplemented "Instruction LDRSW not yet implemented."
	532 Add X8, X8, X9
	533 Add X0, X8, 312
	534 Move X8, [X0]
	535 Move X1, [X0+8]
	536 Move X0, X20
	537 NotImplemented "Instruction BLR not yet implemented."
	538 Subtract W8, W0, 1
	539 NotImplemented "Instruction CMP not yet implemented."
	540 Move X8, [X20]
	541 Move X1, [X26]
	542 NotImplemented "Instruction LDRH not yet implemented."
	543 Compare X9, 0
	544 JumpIfEqual {551}
	545 Move X10, [X8+176]
	546 Add X10, X10, 8
	547 NotImplemented "Instruction LDUR not yet implemented."
	548 NotImplemented "Instruction CMP not yet implemented."
	549 Subtract X9, X9, 1
	550 Add X10, X10, 16
	551 Move X0, X20
	552 Move W2, W31
	553 Call 0x1C5D788
	554 NotImplemented "Instruction LDRSW not yet implemented."
	555 Add X8, X8, X9
	556 Add X0, X8, 312
	557 Move X8, [X0]
	558 Move X2, [X0+8]
	559 Add W23, W22, 1
	560 Move X0, X20
	561 Move W1, W23
	562 NotImplemented "Instruction BLR not yet implemented."
	563 Move X9, [X20]
	564 Move X8, [X26]
	565 Move X24, X1
	566 NotImplemented "Instruction LDRH not yet implemented."
	567 Compare X10, 0
	568 JumpIfEqual {575}
	569 Move X11, [X9+176]
	570 Add X11, X11, 8
	571 NotImplemented "Instruction LDUR not yet implemented."
	572 NotImplemented "Instruction CMP not yet implemented."
	573 Subtract X10, X10, 1
	574 Add X11, X11, 16
	575 Move X0, X20
	576 Move X1, X8
	577 Move W2, W31
	578 Call 0x1C5D788
	579 NotImplemented "Instruction LDRSW not yet implemented."
	580 Add X8, X9, X8
	581 Add X0, X8, 312
	582 Move X8, [X0]
	583 Move X2, [X0+8]
	584 Move X0, X20
	585 Move W1, W23
	586 NotImplemented "Instruction BLR not yet implemented."
	587 Move X8, [X20]
	588 Move X1, [X27]
	589 Move X25, X0
	590 NotImplemented "Instruction LDRH not yet implemented."
	591 Compare X9, 0
	592 JumpIfEqual {599}
	593 Move X10, [X8+176]
	594 Add X10, X10, 8
	595 NotImplemented "Instruction LDUR not yet implemented."
	596 NotImplemented "Instruction CMP not yet implemented."
	597 Subtract X9, X9, 1
	598 Add X10, X10, 16
	599 Move X0, X20
	600 Move W2, W31
	601 Call 0x1C5D788
	602 NotImplemented "Instruction LDRSW not yet implemented."
	603 Add X8, X8, X9
	604 Add X0, X8, 312
	605 Move X8, [X0]
	606 Move X1, [X0+8]
	607 Move X9, X25
	608 ShiftRight X9, 32
	609 And X9, X9, 0x7FFFFFFF
	610 Move S0, W24
	611 NotImplemented "Instruction SCVTF not yet implemented."
	612 Move X0, X20
	613 Subtract S9, S0, S1
	614 NotImplemented "Instruction BLR not yet implemented."
	615 Subtract W8, W0, 1
	616 NotImplemented "Instruction CMP not yet implemented."
	617 Move X8, [X20]
	618 Move X1, [X26]
	619 NotImplemented "Instruction LDRH not yet implemented."
	620 Compare X9, 0
	621 JumpIfEqual {628}
	622 Move X10, [X8+176]
	623 Add X10, X10, 8
	624 NotImplemented "Instruction LDUR not yet implemented."
	625 NotImplemented "Instruction CMP not yet implemented."
	626 Subtract X9, X9, 1
	627 Add X10, X10, 16
	628 Move X0, X20
	629 Move W2, W31
	630 Call 0x1C5D788
	631 NotImplemented "Instruction LDRSW not yet implemented."
	632 Add X8, X8, X9
	633 Add X0, X8, 312
	634 Move X8, [X0]
	635 Move X2, [X0+8]
	636 Move X0, X20
	637 Move W1, W23
	638 NotImplemented "Instruction BLR not yet implemented."
	639 Move X8, X1
	640 ShiftRight X8, 32
	641 And X8, X8, 0x7FFFFFFF
	642 Move S0, W8
	643 Add S9, S9, S0
	644 Subtract S0, S10, S9
	645 NotImplemented "Instruction FCMP not yet implemented."
	646 Move X0, X19
	647 Call InputField.get_cachedInputTextGenerator, X0
	648 Move X24, 0x33E000
	649 Move X24, [X24+4024]
	650 Move X23, X0
	651 Move X8, [X24]
	652 Move W9, [X8+224]
	653 Compare W9, 0
	654 JumpIfNotEqual {657}
	655 Move X0, X8
	656 Call 0x1C17DFC
	657 Move X0, X23
	658 Move W1, W22
	659 Call InputField.GetLineEndPosition, X0, X1
	660 Move [X19+488], W0
	661 Move W22, W21
	662 NotImplemented "Instruction CMP not yet implemented."
	663 Move X8, [X20]
	664 Move X1, [X26]
	665 Subtract W21, W22, 1
	666 NotImplemented "Instruction LDRH not yet implemented."
	667 Compare X9, 0
	668 JumpIfEqual {675}
	669 Move X10, [X8+176]
	670 Add X10, X10, 8
	671 NotImplemented "Instruction LDUR not yet implemented."
	672 NotImplemented "Instruction CMP not yet implemented."
	673 Subtract X9, X9, 1
	674 Add X10, X10, 16
	675 Move X0, X20
	676 Move W2, W31
	677 Call 0x1C5D788
	678 NotImplemented "Instruction LDRSW not yet implemented."
	679 Add X8, X8, X9
	680 Add X0, X8, 312
	681 Move X8, [X0]
	682 Move X2, [X0+8]
	683 Move X0, X20
	684 Move W1, W21
	685 NotImplemented "Instruction BLR not yet implemented."
	686 Move S0, W1
	687 Subtract S0, S0, S9
	688 NotImplemented "Instruction FCMP not yet implemented."
	689 Move X0, X19
	690 Call InputField.get_cachedInputTextGenerator, X0
	691 Move X8, [X24]
	692 Move W9, [X8+224]
	693 Move X20, X0
	694 Compare W9, 0
	695 JumpIfNotEqual {698}
	696 Move X0, X8
	697 Call 0x1C17DFC
	698 Move X0, X20
	699 Move W1, W22
	700 Call InputField.GetLineStartPosition, X0, X1
	701 Move [X19+484], W0
	702 Move X20, [X31+96]
	703 Move X19, [X31+104]
	704 Move X22, [X31+80]
	705 Move X21, [X31+88]
	706 Move X24, [X31+64]
	707 Move X23, [X31+72]
	708 Move X26, [X31+48]
	709 Move X25, [X31+56]
	710 Move X30, [X31+32]
	711 Move X27, [X31+40]
	712 Move D9, [X31+16]
	713 Move D8, [X31+24]
	714 Move V10, [X31+112]
	715 Return 

Method: System.Void ForceLabelUpdate()

Disassembly:
	0x03E2DED0 STP X8, X9, [X31 + 0x8]

ISIL:
	001 Call InputField.UpdateLabel, X0
	002 Return 

Method: System.Void MarkGeometryAsDirty()

Disassembly:
	0x03E273C8 MOV X1, X19
	0x03E273CC MOV X3, X31
	0x03E273D0 MOV X21, X0
	0x03E273D4 LDR X2, [X8]
	0x03E273D8 BL 0x3C45BE8
	0x03E273DC CBZ X20, 0x3E2748C
	0x03E273E0 MOV X0, X20
	0x03E273E4 MOV X1, X21
	0x03E273E8 MOV X2, X31
	0x03E273EC BL 0x3CDDF38
	0x03E273F0 LDR X0, [X22]
	0x03E273F4 LDR X20, [X19 + 0x108]
	0x03E273F8 BL 0x1C16F10
	0x03E273FC ADRP X8, 0x343000
	0x03E27400 LDR X8, [X8 + 0xF48]
	0x03E27404 MOV X1, X19
	0x03E27408 MOV X3, X31
	0x03E2740C MOV X21, X0
	0x03E27410 LDR X2, [X8]
	0x03E27414 BL 0x3C45BE8
	0x03E27418 CBZ X20, 0x3E2748C
	0x03E2741C MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C2000
	006 Move X21, 0x332000
	007 Move W8, [X20+1783]
	008 Move X21, [X21+1816]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x332000
	015 Move X0, [X0+1816]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1783], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild, X0
	031 Return 

Method: System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)

Disassembly:
	0x03E2DED4 MOV W24, W25
	0x03E2DED8 STR X20, [X31 + 0x48]
	0x03E2DEDC MOV X0, X19
	0x03E2DEE0 MOV X1, X31

ISIL:
	001 NotImplemented "Instruction CMP not yet implemented."
	002 Return 

Method: System.Void LayoutComplete()

Disassembly:
	0x03E2E304 STR V0, [X8]

ISIL:
	001 Return 

Method: System.Void GraphicUpdateComplete()

Disassembly:
	0x03E2E308 BL 0x3E4A31C

ISIL:
	001 Return 

Method: System.Void UpdateGeometry()

Disassembly:
	0x03E2DEE4 BL 0x3CCEAF8
	0x03E2DEE8 CMP W24, W0
	0x03E2DEEC B.GE 0x3E2E3E0
	0x03E2DEF0 CMP W24, W27
	0x03E2DEF4 B.EQ 0x3E2DF08
	0x03E2DEF8 CMP W24, W26
	0x03E2DEFC B.EQ 0x3E2DF08
	0x03E2DF00 ADD W24, W24, 0x1
	0x03E2DF04 B 0x3E2E3D4
	0x03E2DF08 MOV X0, X19
	0x03E2DF0C MOV X1, X31
	0x03E2DF10 BL 0x3CCF680
	0x03E2DF14 CBZ X0, 0x3E2E410
	0x03E2DF18 LDR X8, [X0]
	0x03E2DF1C LDR X1, [X29]
	0x03E2DF20 MOV X26, X0
	0x03E2DF24 LDRH W9, [X8 + 0x12E]
	0x03E2DF28 CBZ X9, 0x3E2DF4C
	0x03E2DF2C LDR X10, [X8 + 0xB0]
	0x03E2DF30 ADD X10, X10, 0x8
	0x03E2DF34 LDUR X11, [X10 - 0x8]
	0x03E2DF38 CMP X11, X1
	0x03E2DF3C B.EQ 0x3E2DF5C
	0x03E2DF40 SUBS X9, X9, 0x1
	0x03E2DF44 ADD X10, X10, 0x10
	0x03E2DF48 B.NE 0x3E2DF34
	0x03E2DF4C MOV X0, X26
	0x03E2DF50 MOV W2, W31
	0x03E2DF54 BL 0x1C5C788
	0x03E2DF58 B 0x3E2DF68
	0x03E2DF5C LDRSW X9, [X10]
	0x03E2DF60 ADD X8, X8, X9, 0x4, LSL
	0x03E2DF64 ADD X0, X8, 0x138
	0x03E2DF68 LDP X8, X2, [X0]
	0x03E2DF6C MOV X0, X26
	0x03E2DF70 MOV W1, W25
	0x03E2DF74 BLR X8
	0x03E2DF78 MOV X0, X19
	0x03E2DF7C MOV X1, X31
	0x03E2DF80 MOV V10.16B, V0.16B
	0x03E2DF84 BL 0x3CCF680
	0x03E2DF88 CBZ X0, 0x3E2E410
	0x03E2DF8C LDR X8, [X0]
	0x03E2DF90 LDR X1, [X29]
	0x03E2DF94 MOV X25, X0
	0x03E2DF98 LDRH W9, [X8 + 0x12E]
	0x03E2DF9C CBZ X9, 0x3E2DFC0
	0x03E2DFA0 LDR X10, [X8 + 0xB0]
	0x03E2DFA4 ADD X10, X10, 0x8
	0x03E2DFA8 LDUR X11, [X10 - 0x8]
	0x03E2DFAC CMP X11, X1
	0x03E2DFB0 B.EQ 0x3E2DFD0
	0x03E2DFB4 SUBS X9, X9, 0x1
	0x03E2DFB8 ADD X10, X10, 0x10
	0x03E2DFBC B.NE 0x3E2DFA8
	0x03E2DFC0 MOV X0, X25
	0x03E2DFC4 MOV W2, W31
	0x03E2DFC8 BL 0x1C5C788
	0x03E2DFCC B 0x3E2DFDC
	0x03E2DFD0 LDRSW X9, [X10]
	0x03E2DFD4 ADD X8, X8, X9, 0x4, LSL
	0x03E2DFD8 ADD X0, X8, 0x138
	0x03E2DFDC LDP X8, X2, [X0]
	0x03E2DFE0 MOV X0, X25
	0x03E2DFE4 MOV W1, W24
	0x03E2DFE8 BLR X8
	0x03E2DFEC LDR X0, [X20 + 0x108]
	0x03E2DFF0 CBZ X0, 0x3E2E410
	0x03E2DFF4 MOV X1, X31
	0x03E2DFF8 MOV V12.16B, V0.16B
	0x03E2DFFC MOV V13.16B, V2.16B
	0x03E2E000 BL 0x3E458D0
	0x03E2E004 MOV X0, X19
	0x03E2E008 MOV X1, X31
	0x03E2E00C MOV V11.16B, V0.16B
	0x03E2E010 BL 0x3CCF6DC
	0x03E2E014 CBZ X0, 0x3E2E410
	0x03E2E018 LDR X8, [X0]
	0x03E2E01C LDR X1, [X23]
	0x03E2E020 MOV X25, X0
	0x03E2E024 LDRH W9, [X8 + 0x12E]
	0x03E2E028 CBZ X9, 0x3E2E04C
	0x03E2E02C LDR X10, [X8 + 0xB0]
	0x03E2E030 ADD X10, X10, 0x8
	0x03E2E034 LDUR X11, [X10 - 0x8]
	0x03E2E038 CMP X11, X1
	0x03E2E03C B.EQ 0x3E2E05C
	0x03E2E040 SUBS X9, X9, 0x1
	0x03E2E044 ADD X10, X10, 0x10
	0x03E2E048 B.NE 0x3E2E034
	0x03E2E04C MOV X0, X25
	0x03E2E050 MOV W2, W31
	0x03E2E054 BL 0x1C5C788
	0x03E2E058 B 0x3E2E068
	0x03E2E05C LDRSW X9, [X10]
	0x03E2E060 ADD X8, X8, X9, 0x4, LSL
	0x03E2E064 ADD X0, X8, 0x138
	0x03E2E068 LDP X8, X2, [X0]
	0x03E2E06C MOV X0, X25
	0x03E2E070 MOV W1, W22
	0x03E2E074 BLR X8
	0x03E2E078 LDR X0, [X20 + 0x108]
	0x03E2E07C CBZ X0, 0x3E2E410
	0x03E2E080 MOV X25, X1
	0x03E2E084 MOV X1, X31
	0x03E2E088 BL 0x3E458D0
	0x03E2E08C LDR X0, [X20 + 0x108]
	0x03E2E090 CBZ X0, 0x3E2E410
	0x03E2E094 MOV X1, X31
	0x03E2E098 MOV V14.16B, V0.16B
	0x03E2E09C BL 0x3E458D0
	0x03E2E0A0 MOV X0, X19
	0x03E2E0A4 MOV X1, X31
	0x03E2E0A8 MOV V15.16B, V0.16B
	0x03E2E0AC BL 0x3CCF6DC
	0x03E2E0B0 CBZ X0, 0x3E2E410
	0x03E2E0B4 LDR X8, [X0]
	0x03E2E0B8 LDR X1, [X23]
	0x03E2E0BC MOV X26, X0
	0x03E2E0C0 LDRH W9, [X8 + 0x12E]
	0x03E2E0C4 CBZ X9, 0x3E2E0E8
	0x03E2E0C8 LDR X10, [X8 + 0xB0]
	0x03E2E0CC ADD X10, X10, 0x8
	0x03E2E0D0 LDUR X11, [X10 - 0x8]
	0x03E2E0D4 CMP X11, X1
	0x03E2E0D8 B.EQ 0x3E2E0F8
	0x03E2E0DC SUBS X9, X9, 0x1
	0x03E2E0E0 ADD X10, X10, 0x10
	0x03E2E0E4 B.NE 0x3E2E0D0
	0x03E2E0E8 MOV X0, X26
	0x03E2E0EC MOV W2, W31
	0x03E2E0F0 BL 0x1C5C788
	0x03E2E0F4 B 0x3E2E104
	0x03E2E0F8 LDRSW X9, [X10]
	0x03E2E0FC ADD X8, X8, X9, 0x4, LSL
	0x03E2E100 ADD X0, X8, 0x138
	0x03E2E104 LDP X8, X2, [X0]
	0x03E2E108 MOV X0, X26
	0x03E2E10C MOV W1, W22
	0x03E2E110 BLR X8
	0x03E2E114 LDR X8, [X20 + 0x108]
	0x03E2E118 CBZ X8, 0x3E2E410
	0x03E2E11C MOV X26, X0
	0x03E2E120 MOV X0, X8
	0x03E2E124 MOV X1, X31
	0x03E2E128 BL 0x3E458D0
	0x03E2E12C LDR X0, [X20 + 0x108]
	0x03E2E130 CBZ X0, 0x3E2E410
	0x03E2E134 MOV X1, X31
	0x03E2E138 MOV V8.16B, V0.16B
	0x03E2E13C BL 0x3CDB488
	0x03E2E140 CBZ X0, 0x3E2E410
	0x03E2E144 FADD S0, S13, S12
	0x03E2E148 MOV X1, X31
	0x03E2E14C FDIV S12, S0, S15
	0x03E2E150 BL 0x3C3E51C
	0x03E2E154 FADD S0, S2, S0
	0x03E2E158 FCMP S12, S0
	0x03E2E15C B.GT 0x3E2E184
	0x03E2E160 LDR X0, [X20 + 0x108]
	0x03E2E164 CBZ X0, 0x3E2E410
	0x03E2E168 MOV X1, X31
	0x03E2E16C BL 0x3CDB488
	0x03E2E170 CBZ X0, 0x3E2E410
	0x03E2E174 MOV X1, X31
	0x03E2E178 BL 0x3C3E51C
	0x03E2E17C FCMP S12, S0
	0x03E2E180 B.PL 0x3E2E1A4
	0x03E2E184 LDR X0, [X20 + 0x108]
	0x03E2E188 CBZ X0, 0x3E2E410
	0x03E2E18C MOV X1, X31
	0x03E2E190 BL 0x3CDB488
	0x03E2E194 CBZ X0, 0x3E2E410
	0x03E2E198 MOV X1, X31
	0x03E2E19C BL 0x3C3E51C
	0x03E2E1A0 FADD S12, S2, S0
	0x03E2E1A4 CBZ X21, 0x3E2E410
	0x03E2E1A8 FMOV S0, W25
	0x03E2E1AC UBFM X8, X26, 0x20, 0x3F
	0x03E2E1B0 FDIV S10, S10, S11
	0x03E2E1B4 FDIV S11, S0, S14
	0x03E2E1B8 SCVTF S0, W8
	0x03E2E1BC FDIV S0, S0, S8
	0x03E2E1C0 MOV X0, X21
	0x03E2E1C4 MOV X1, X31
	0x03E2E1C8 MOV X20, X19
	0x03E2E1CC MOV W19, W22
	0x03E2E1D0 MOV X28, X29
	0x03E2E1D4 MOV W29, W27
	0x03E2E1D8 FSUB S13, S11, S0
	0x03E2E1DC BL 0x3E498D4
	0x03E2E1E0 LDP S15, S14, [X31 + 0x68]
	0x03E2E1E4 ADD X26, X31, 0x1D0
	0x03E2E1E8 LDR V0, [X31 + 0x27]
	0x03E2E1EC LDUR V1, [X26 + 0xAC]
	0x03E2E1F0 LDR X8, [X31 + 0x40]
	0x03E2E1F4 FADD S8, S15, S10
	0x03E2E1F8 FADD S10, S14, S13
	0x03E2E1FC STR W31, [X31 + 0x1D8]
	0x03E2E200 STR S8, [X31 + 0x1D0]
	0x03E2E204 STR S10, [X31 + 0x1D4]
	0x03E2E208 STR V0, [X8]
	0x03E2E20C LDP V0, V2, [X31 + 0x240]
	0x03E2E210 STUR V1, [X8 + 0xC]
	0x03E2E214 LDR V1, [X31 + 0x26]
	0x03E2E218 LDR X22, [X31 + 0x58]
	0x03E2E21C LDR V13, [X31 + 0x64]
	0x03E2E220 LDR X8, [X31 + 0x38]
	0x03E2E224 MOV W25, W0
	0x03E2E228 MOVI D3, 0x0
	0x03E2E22C ADD X1, X31, 0x1D0
	0x03E2E230 MOV X0, X21
	0x03E2E234 MOV X2, X31
	0x03E2E238 STR W22, [X31 + 0x1F8]
	0x03E2E23C STR S13, [X31 + 0x1FC]
	0x03E2E240 STR S9, [X31 + 0x200]
	0x03E2E244 STUR D3, [X26 + 0x34]
	0x03E2E248 STP V2, V1, [X8 + 0x10]
	0x03E2E24C STR V0, [X8]
	0x03E2E250 BL 0x3E4A31C
	0x03E2E254 LDUR V0, [X26 + 0xAC]
	0x03E2E258 LDR V1, [X31 + 0x27]
	0x03E2E25C LDR X8, [X31 + 0x30]
	0x03E2E260 FADD S12, S15, S12
	0x03E2E264 STR W31, [X31 + 0x168]
	0x03E2E268 STR S12, [X31 + 0x160]
	0x03E2E26C STR S10, [X31 + 0x164]
	0x03E2E270 STUR V0, [X8 + 0xC]
	0x03E2E274 LDP V0, V2, [X31 + 0x240]
	0x03E2E278 STR V1, [X8]
	0x03E2E27C LDR V1, [X31 + 0x26]
	0x03E2E280 LDR X8, [X31 + 0x28]
	0x03E2E284 ADD X27, X31, 0xF0
	0x03E2E288 MOVI D15, 0x0
	0x03E2E28C ADD X1, X31, 0x160
	0x03E2E290 MOV X0, X21
	0x03E2E294 MOV X2, X31
	0x03E2E298 STR W22, [X31 + 0x188]
	0x03E2E29C STR S13, [X31 + 0x18C]
	0x03E2E2A0 STR S9, [X31 + 0x190]
	0x03E2E2A4 STUR D15, [X27 + 0xA4]
	0x03E2E2A8 STP V2, V1, [X8 + 0x10]
	0x03E2E2AC STR V0, [X8]
	0x03E2E2B0 BL 0x3E4A31C
	0x03E2E2B4 LDUR V0, [X26 + 0xAC]
	0x03E2E2B8 LDR V1, [X31 + 0x27]
	0x03E2E2BC LDR X8, [X31 + 0x20]
	0x03E2E2C0 FADD S10, S14, S11
	0x03E2E2C4 STR W31, [X31 + 0xF8]
	0x03E2E2C8 STP S12, S10, [X31 + 0xF0]
	0x03E2E2CC STUR V0, [X8 + 0xC]
	0x03E2E2D0 LDP V0, V2, [X31 + 0x240]
	0x03E2E2D4 STR V1, [X8]
	0x03E2E2D8 LDR V1, [X31 + 0x26]
	0x03E2E2DC LDR X8, [X31 + 0x18]
	0x03E2E2E0 ADD X1, X31, 0xF0
	0x03E2E2E4 MOV X0, X21
	0x03E2E2E8 MOV X2, X31
	0x03E2E2EC STR W22, [X31 + 0x118]
	0x03E2E2F0 STR S13, [X31 + 0x11C]
	0x03E2E2F4 STR S9, [X31 + 0x120]
	0x03E2E2F8 STUR D15, [X27 + 0x34]
	0x03E2E2FC MOVI D11, 0x0
	0x03E2E300 STP V2, V1, [X8 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x5BC000
	008 Move W8, [X20+1784]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {49}
	014 Move X0, 0x33F000
	015 Move X0, [X0+8]
	016 Call 0x1C17CF4
	017 Move X0, 0x327000
	018 Move X0, [X0+3264]
	019 Call 0x1C17CF4
	020 Move X0, 0x32D000
	021 Move X0, [X0+272]
	022 Call 0x1C17CF4
	023 Move X0, 0x327000
	024 Move X0, [X0+2880]
	025 Call 0x1C17CF4
	026 Move X0, 0x2C7000
	027 Move X0, [X0+2648]
	028 Call 0x1C17CF4
	029 Move X0, 0x32D000
	030 Move X0, [X0+280]
	031 Call 0x1C17CF4
	032 Move X0, 0x2C7000
	033 Move X0, [X0+1432]
	034 Call 0x1C17CF4
	035 Move X0, 0x32D000
	036 Move X0, [X0+2632]
	037 Call 0x1C17CF4
	038 Move X0, 0x2CF000
	039 Move X0, [X0+3168]
	040 Call 0x1C17CF4
	041 Move X0, 0x2C7000
	042 Move X0, [X0+1728]
	043 Call 0x1C17CF4
	044 Move X0, 0x33F000
	045 Move X0, [X0+16]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+1784], W8
	049 Move X0, X31
	050 Call TouchScreenKeyboard.get_isSupported
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {64}
	055 Move W8, [X19+528]
	056 Compare W8, 0
	057 JumpIfNotEqual {64}
	058 Move X0, X19
	059 Call InputField.get_shouldHideMobileInput, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {282}
	064 Move X23, 0x2C7000
	065 Move X23, [X23+1432]
	066 Move X20, [X19+440]
	067 Move X0, [X23]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Equality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {268}
	080 Move X0, [X23]
	081 Move X20, [X19+264]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X0, X20
	087 Move X1, X31
	088 Move X2, X31
	089 Call Object.op_Inequality, X0, X1
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {268}
	094 Move X0, X19
	095 Move X1, X31
	096 Call Component.get_transform, X0
	097 Compare X0, 0
	098 JumpIfEqual {310}
	099 Move X1, X31
	100 Call Object.get_name, X0
	101 Move X8, 0x33E000
	102 Move X8, [X8+16]
	103 Move X2, X31
	104 Move X1, [X8]
	105 Call String.Concat, X0, X1
	106 Move X8, 0x2CE000
	107 Move X8, [X8+3168]
	108 Move X21, X0
	109 Move W1, 2
	110 Move X8, [X8]
	111 Move X0, X8
	112 Call 0x1C17D6C
	113 Move X8, 0x2C6000
	114 Move X8, [X8+1728]
	115 Move X9, 0x32C000
	116 Move X22, X0
	117 Move X8, [X8]
	118 Move X9, [X9+2632]
	119 Move W10, [X8+224]
	120 Move X20, [X9]
	121 Compare W10, 0
	122 JumpIfNotEqual {125}
	123 Move X0, X8
	124 Call 0x1C17DFC
	125 Move X0, X20
	126 Move X1, X31
	127 Call Type.GetTypeFromHandle, X0
	128 Compare X22, 0
	129 JumpIfEqual {310}
	130 Move X20, X0
	131 Compare X0, 0
	132 JumpIfEqual {139}
	133 Move X8, [X22]
	134 Move X0, X20
	135 Move X1, [X8+64]
	136 Call 0x1C17E00
	137 Compare X0, 0
	138 JumpIfEqual {312}
	139 Move W8, [X22+24]
	140 Compare W8, 0
	141 JumpIfEqual {311}
	142 Move [X22+32], X20
	143 Move X8, 0x33E000
	144 Move X8, [X8+8]
	145 Move X1, X31
	146 Move X0, [X8]
	147 Call Type.GetTypeFromHandle, X0
	148 Move X20, X0
	149 Compare X0, 0
	150 JumpIfEqual {157}
	151 Move X8, [X22]
	152 Move X0, X20
	153 Move X1, [X8+64]
	154 Call 0x1C17E00
	155 Compare X0, 0
	156 JumpIfEqual {312}
	157 Move W8, [X22+24]
	158 NotImplemented "Instruction CMP not yet implemented."
	159 Move [X22+40], X20
	160 Move X8, 0x2C6000
	161 Move X8, [X8+2648]
	162 Move X0, [X8]
	163 Call 0x1C17F10
	164 Move X1, X21
	165 Move X2, X22
	166 Move X3, X31
	167 Move X20, X0
	168 Call GameObject..ctor, X0, X1, X2
	169 Compare X20, 0
	170 JumpIfEqual {310}
	171 Move W1, 52
	172 Move X0, X20
	173 Move X2, X31
	174 Call Object.set_hideFlags, X0, X1
	175 Move X0, X20
	176 Move X1, X31
	177 Call GameObject.get_transform, X0
	178 Move X8, [X19+264]
	179 Compare X8, 0
	180 JumpIfEqual {310}
	181 Move X21, X0
	182 Move X0, X8
	183 Move X1, X31
	184 Call Component.get_transform, X0
	185 Compare X0, 0
	186 JumpIfEqual {310}
	187 Move X1, X31
	188 Call Transform.get_parent, X0
	189 Compare X21, 0
	190 JumpIfEqual {310}
	191 Move X1, X0
	192 Move X0, X21
	193 Move X2, X31
	194 Call Transform.SetParent, X0, X1
	195 Move X0, X20
	196 Move X1, X31
	197 Call GameObject.get_transform, X0
	198 Compare X0, 0
	199 JumpIfEqual {310}
	200 Move X1, X31
	201 Call Transform.SetAsFirstSibling, X0
	202 Move X0, X19
	203 Move X1, X31
	204 Call Component.get_gameObject, X0
	205 Compare X0, 0
	206 JumpIfEqual {310}
	207 Move X1, X31
	208 Call GameObject.get_layer, X0
	209 Move W1, W0
	210 Move X0, X20
	211 Move X2, X31
	212 Call GameObject.set_layer, X0, X1
	213 Move X8, 0x326000
	214 Move X8, [X8+2880]
	215 Move X0, X20
	216 Move X1, [X8]
	217 Call 0x21E62E4, X0
	218 Move [X19+416], X0
	219 Move X8, 0x32C000
	220 Move X8, [X8+272]
	221 Move X0, X20
	222 Move X1, [X8]
	223 Call 0x21E62E4, X0
	224 Move [X19+440], X0
	225 Move X8, 0x32C000
	226 Move X8, [X8+280]
	227 Move X21, X0
	228 Move X22, [X19+264]
	229 Move X0, [X8]
	230 Move W8, [X0+224]
	231 Compare W8, 0
	232 JumpIfNotEqual {234}
	233 Call 0x1C17DFC
	234 Move X0, X31
	235 Call Graphic.get_defaultGraphicMaterial
	236 Compare X22, 0
	237 JumpIfEqual {310}
	238 Move X8, [X22]
	239 Move X1, X0
	240 Move X0, X22
	241 Move X9, [X8+1240]
	242 Move X2, [X8+1248]
	243 NotImplemented "Instruction BLR not yet implemented."
	244 Move X22, X0
	245 Move X0, X31
	246 Call Texture2D.get_whiteTexture
	247 Compare X21, 0
	248 JumpIfEqual {310}
	249 Move X2, X0
	250 Move X0, X21
	251 Move X1, X22
	252 Move X3, X31
	253 Call CanvasRenderer.SetMaterial, X0, X1, X2
	254 Move X8, 0x326000
	255 Move X8, [X8+3264]
	256 Move X0, X20
	257 Move X1, [X8]
	258 Call 0x21E61FC, X0
	259 Compare X0, 0
	260 JumpIfEqual {310}
	261 Move X8, [X0]
	262 Move W1, 1
	263 Move X9, [X8+760]
	264 Move X2, [X8+768]
	265 NotImplemented "Instruction BLR not yet implemented."
	266 Move X0, X19
	267 Call InputField.AssignPositioningIfNeeded, X0
	268 Move X0, [X23]
	269 Move X20, [X19+440]
	270 Move W8, [X0+224]
	271 Compare W8, 0
	272 JumpIfNotEqual {274}
	273 Call 0x1C17DFC
	274 Move X0, X20
	275 Move X1, X31
	276 Move X2, X31
	277 Call Object.op_Equality, X0, X1
	278 Move TEMP, X0
	279 And TEMP, TEMP, 1
	280 Compare TEMP, 1
	281 JumpIfNotEqual {289}
	282 Move X20, [X31+32]
	283 Move X19, [X31+40]
	284 Move X22, [X31+16]
	285 Move X21, [X31+24]
	286 Move X30, [X31+48]
	287 Move X23, [X31+56]
	288 Return 
	289 Move X0, X19
	290 Call InputField.get_mesh, X0
	291 Move X1, X0
	292 Move X0, X19
	293 Call InputField.OnFillVBO, X0, X1
	294 Move X20, [X19+440]
	295 Move X0, X19
	296 Call InputField.get_mesh, X0
	297 Compare X20, 0
	298 JumpIfEqual {310}
	299 Move X1, X0
	300 Move X0, X20
	301 Move X20, [X31+32]
	302 Move X19, [X31+40]
	303 Move X22, [X31+16]
	304 Move X21, [X31+24]
	305 Move X2, X31
	306 Move X30, [X31+48]
	307 Move X23, [X31+56]
	308 Call CanvasRenderer.SetMesh, X0, X1
	309 Return 
	310 Call 0x1C17F20
	311 Call 0x1C17F28
	312 Call 0x1C17F44
	313 Move X1, X31
	314 Call 0x1C17DEC

Method: System.Void AssignPositioningIfNeeded()

Disassembly:
	0x03E29984 MOV V8.16B, V11.16B
	0x03E29988 MOV V0.16B, V9.16B
	0x03E2998C MOV V1.16B, V8.16B
	0x03E29990 LDP X20, X19, [X31 + 0xB0]
	0x03E29994 LDP X22, X21, [X31 + 0xA0]
	0x03E29998 LDP X30, X23, [X31 + 0x90]
	0x03E2999C LDP D9, D8, [X31 + 0x80]
	0x03E299A0 LDP D11, D10, [X31 + 0x70]
	0x03E299A4 LDP D13, D12, [X31 + 0x60]
	0x03E299A8 LDP D15, D14, [X31 + 0x50]
	0x03E299AC ADD X31, X31, 0xC0
	0x03E299B0 RET
	0x03E299B4 BL 0x1C16F20
	0x03E299B8 STR D10, [X31 - 0x50]!
	0x03E299BC STP D9, D8, [X31 + 0x10]
	0x03E299C0 STP X30, X23, [X31 + 0x20]
	0x03E299C4 STP X22, X21, [X31 + 0x30]
	0x03E299C8 STP X20, X19, [X31 + 0x40]
	0x03E299CC ADRP X21, 0x5BF000
	0x03E299D0 LDRB W8, [X21 + 0x6E0]
	0x03E299D4 MOV X19, X1
	0x03E299D8 MOV V8.16B, V1.16B
	0x03E299DC MOV X20, X0
	0x03E299E0 TBNZ X8, 0x0, 0x3E299F8
	0x03E299E4 ADRP X0, 0x341000
	0x03E299E8 LDR X0, [X0 + 0xFD8]
	0x03E299EC BL 0x1C16CF4
	0x03E299F0 MOVZ W8, 0x1
	0x03E299F4 STRB W8, [X21 + 0x6E0]
	0x03E299F8 LDR W8, [X20 + 0x128]
	0x03E299FC SUB W8, W8, 0x1
	0x03E29A00 CMP W8, 0x1
	0x03E29A04 B.HI 0x3E29B84
	0x03E29A08 LDR X0, [X20 + 0x108]
	0x03E29A0C CBZ X0, 0x3E29BC4
	0x03E29A10 MOV X1, X31
	0x03E29A14 BL 0x3E458D0
	0x03E29A18 CBZ X19, 0x3E29BC4
	0x03E29A1C MOV X0, X19
	0x03E29A20 MOV X1, X31
	0x03E29A24 MOV V9.16B, V0.16B
	0x03E29A28 BL 0x3CCF77C
	0x03E29A2C CMP W0, 0x1
	0x03E29A30 B.LT 0x3E29B64
	0x03E29A34 ADRP X23, 0x341000
	0x03E29A38 LDR X23, [X23 + 0xFD8]
	0x03E29A3C MOV W20, W31
	0x03E29A40 FMUL S8, S8, S9
	0x03E29A44 FMOV S9, W31
	0x03E29A48 MOV X0, X19
	0x03E29A4C MOV X1, X31
	0x03E29A50 BL 0x3CCF6DC
	0x03E29A54 CBZ X0, 0x3E29BC4
	0x03E29A58 LDR X8, [X0]
	0x03E29A5C LDR X1, [X23]
	0x03E29A60 MOV X21, X0
	0x03E29A64 LDRH W9, [X8 + 0x12E]
	0x03E29A68 CBZ X9, 0x3E29A8C
	0x03E29A6C LDR X10, [X8 + 0xB0]
	0x03E29A70 ADD X10, X10, 0x8
	0x03E29A74 LDUR X11, [X10 - 0x8]
	0x03E29A78 CMP X11, X1
	0x03E29A7C B.EQ 0x3E29A9C
	0x03E29A80 SUBS X9, X9, 0x1
	0x03E29A84 ADD X10, X10, 0x10
	0x03E29A88 B.NE 0x3E29A74
	0x03E29A8C MOV X0, X21
	0x03E29A90 MOV W2, W31
	0x03E29A94 BL 0x1C5C788
	0x03E29A98 B 0x3E29AA8
	0x03E29A9C LDRSW X9, [X10]
	0x03E29AA0 ADD X8, X8, X9, 0x4, LSL
	0x03E29AA4 ADD X0, X8, 0x138
	0x03E29AA8 LDP X8, X2, [X0]
	0x03E29AAC MOV X0, X21
	0x03E29AB0 MOV W1, W20
	0x03E29AB4 BLR X8
	0x03E29AB8 MOV X21, X1
	0x03E29ABC MOV X0, X19
	0x03E29AC0 MOV X1, X31
	0x03E29AC4 BL 0x3CCF6DC
	0x03E29AC8 CBZ X0, 0x3E29BC4
	0x03E29ACC LDR X8, [X0]
	0x03E29AD0 LDR X1, [X23]
	0x03E29AD4 MOV X22, X0
	0x03E29AD8 LDRH W9, [X8 + 0x12E]
	0x03E29ADC CBZ X9, 0x3E29B00
	0x03E29AE0 LDR X10, [X8 + 0xB0]
	0x03E29AE4 ADD X10, X10, 0x8
	0x03E29AE8 LDUR X11, [X10 - 0x8]
	0x03E29AEC CMP X11, X1
	0x03E29AF0 B.EQ 0x3E29B10
	0x03E29AF4 SUBS X9, X9, 0x1
	0x03E29AF8 ADD X10, X10, 0x10
	0x03E29AFC B.NE 0x3E29AE8
	0x03E29B00 MOV X0, X22
	0x03E29B04 MOV W2, W31
	0x03E29B08 BL 0x1C5C788
	0x03E29B0C B 0x3E29B1C
	0x03E29B10 LDRSW X9, [X10]
	0x03E29B14 ADD X8, X8, X9, 0x4, LSL
	0x03E29B18 ADD X0, X8, 0x138
	0x03E29B1C LDP X8, X2, [X0]
	0x03E29B20 MOV X0, X22
	0x03E29B24 MOV W1, W20
	0x03E29B28 FMOV S10, W21
	0x03E29B2C BLR X8
	0x03E29B30 FCMP S8, S10
	0x03E29B34 B.GT 0x3E29BA4
	0x03E29B38 UBFM X8, X0, 0x20, 0x3F
	0x03E29B3C SCVTF S0, W8
	0x03E29B40 FSUB S9, S10, S0
	0x03E29B44 FCMP S8, S9
	0x03E29B48 B.GT 0x3E29B88
	0x03E29B4C MOV X0, X19
	0x03E29B50 MOV X1, X31
	0x03E29B54 ADD W20, W20, 0x1
	0x03E29B58 BL 0x3CCF77C
	0x03E29B5C CMP W20, W0
	0x03E29B60 B.LT 0x3E29A48
	0x03E29B64 MOV X0, X19
	0x03E29B68 LDP X20, X19, [X31 + 0x40]
	0x03E29B6C LDP X22, X21, [X31 + 0x30]
	0x03E29B70 LDP X30, X23, [X31 + 0x20]
	0x03E29B74 LDP D9, D8, [X31 + 0x10]
	0x03E29B78 MOV X1, X31
	0x03E29B7C LDR V10, [X31], #0x50
	0x03E29B80 B 0x3CCF77C
	0x03E29B84 MOV W20, W31
	0x03E29B88 MOV W0, W20
	0x03E29B8C LDP X20, X19, [X31 + 0x40]
	0x03E29B90 LDP X22, X21, [X31 + 0x30]
	0x03E29B94 LDP X30, X23, [X31 + 0x20]
	0x03E29B98 LDP D9, D8, [X31 + 0x10]
	0x03E29B9C LDR V10, [X31], #0x50
	0x03E29BA0 RET
	0x03E29BA4 FSUB S0, S10, S9
	0x03E29BA8 FMOV S1, -0.5
	0x03E29BAC FMUL S0, S0, S1
	0x03E29BB0 FADD S0, S10, S0
	0x03E29BB4 FCMP S8, S0
	0x03E29BB8 B.LE 0x3E29B88
	0x03E29BBC SUB W20, W20, 0x1
	0x03E29BC0 B 0x3E29B88
	0x03E29BC4 BL 0x1C16F20
	0x03E29BC8 STR D10, [X31 - 0x50]!
	0x03E29BCC STP D9, D8, [X31 + 0x8]
	0x03E29BD0 STR X30, [X31 + 0x18]
	0x03E29BD4 STP X24, X23, [X31 + 0x20]
	0x03E29BD8 STP X22, X21, [X31 + 0x30]
	0x03E29BDC STP X20, X19, [X31 + 0x40]
	0x03E29BE0 ADRP X20, 0x5BF000
	0x03E29BE4 LDRB W8, [X20 + 0x6E1]
	0x03E29BE8 MOV V9.16B, V1.16B
	0x03E29BEC MOV V8.16B, V0.16B
	0x03E29BF0 MOV X19, X0
	0x03E29BF4 TBNZ X8, 0x0, 0x3E29C24
	0x03E29BF8 ADRP X0, 0x341000
	0x03E29BFC LDR X0, [X0 + 0xFE0]
	0x03E29C00 BL 0x1C16CF4
	0x03E29C04 ADRP X0, 0x341000
	0x03E29C08 LDR X0, [X0 + 0xFD8]
	0x03E29C0C BL 0x1C16CF4
	0x03E29C10 ADRP X0, 0x341000
	0x03E29C14 LDR X0, [X0 + 0xFB8]
	0x03E29C18 BL 0x1C16CF4
	0x03E29C1C MOVZ W8, 0x1
	0x03E29C20 STRB W8, [X20 + 0x6E1]
	0x03E29C24 LDR X0, [X19 + 0x108]
	0x03E29C28 CBZ X0, 0x3E29E58
	0x03E29C2C MOV X1, X31
	0x03E29C30 BL 0x3E44E54
	0x03E29C34 CBZ X0, 0x3E29E58
	0x03E29C38 MOV X1, X31
	0x03E29C3C MOV X20, X0
	0x03E29C40 BL 0x3CCF77C
	0x03E29C44 CBZ W0, 0x3E29CD4
	0x03E29C48 MOV X0, X19
	0x03E29C4C MOV V0.16B, V8.16B
	0x03E29C50 MOV V1.16B, V9.16B
	0x03E29C54 MOV X1, X20
	0x03E29C58 BL 0x3E299B8
	0x03E29C5C TBNZ X0, 0x1F, 0x3E29CD4
	0x03E29C60 MOV W21, W0
	0x03E29C64 MOV X0, X20
	0x03E29C68 MOV X1, X31
	0x03E29C6C BL 0x3CCF77C
	0x03E29C70 CMP W21, W0
	0x03E29C74 B.GE 0x3E29CF8
	0x03E29C78 MOV X0, X20
	0x03E29C7C MOV X1, X31
	0x03E29C80 BL 0x3CCF6DC
	0x03E29C84 CBZ X0, 0x3E29E58
	0x03E29C88 ADRP X10, 0x341000
	0x03E29C8C LDR X8, [X0]
	0x03E29C90 LDR X10, [X10 + 0xFD8]
	0x03E29C94 MOV X22, X0
	0x03E29C98 LDRH W9, [X8 + 0x12E]
	0x03E29C9C LDR X1, [X10]
	0x03E29CA0 CBZ X9, 0x3E29CC4
	0x03E29CA4 LDR X10, [X8 + 0xB0]
	0x03E29CA8 ADD X10, X10, 0x8
	0x03E29CAC LDUR X11, [X10 - 0x8]
	0x03E29CB0 CMP X11, X1
	0x03E29CB4 B.EQ 0x3E29D1C
	0x03E29CB8 SUBS X9, X9, 0x1
	0x03E29CBC ADD X10, X10, 0x10
	0x03E29CC0 B.NE 0x3E29CAC
	0x03E29CC4 MOV X0, X22
	0x03E29CC8 MOV W2, W31
	0x03E29CCC BL 0x1C5C788
	0x03E29CD0 B 0x3E29D28
	0x03E29CD4 MOV W21, W31
	0x03E29CD8 MOV W0, W21
	0x03E29CDC LDP X20, X19, [X31 + 0x40]
	0x03E29CE0 LDP X22, X21, [X31 + 0x30]
	0x03E29CE4 LDP X24, X23, [X31 + 0x20]
	0x03E29CE8 LDR X30, [X31 + 0x18]
	0x03E29CEC LDP D9, D8, [X31 + 0x8]
	0x03E29CF0 LDR V10, [X31], #0x50
	0x03E29CF4 RET
	0x03E29CF8 MOV X0, X20
	0x03E29CFC LDP X20, X19, [X31 + 0x40]
	0x03E29D00 LDP X22, X21, [X31 + 0x30]
	0x03E29D04 LDP X24, X23, [X31 + 0x20]
	0x03E29D08 LDR X30, [X31 + 0x18]
	0x03E29D0C LDP D9, D8, [X31 + 0x8]
	0x03E29D10 MOV X1, X31
	0x03E29D14 LDR V10, [X31], #0x50
	0x03E29D18 B 0x3CCEAB4
	0x03E29D1C LDRSW X9, [X10]
	0x03E29D20 ADD X8, X8, X9, 0x4, LSL
	0x03E29D24 ADD X0, X8, 0x138
	0x03E29D28 LDP X8, X2, [X0]
	0x03E29D2C MOV X0, X22
	0x03E29D30 MOV W1, W21
	0x03E29D34 BLR X8
	0x03E29D38 ADRP X8, 0x341000
	0x03E29D3C LDR X8, [X8 + 0xFB8]
	0x03E29D40 MOV X22, X0
	0x03E29D44 LDR X8, [X8]
	0x03E29D48 LDR W9, [X8 + 0xE0]
	0x03E29D4C CBNZ W9, 0x3E29D58
	0x03E29D50 MOV X0, X8
	0x03E29D54 BL 0x1C16DFC
	0x03E29D58 MOV X0, X20
	0x03E29D5C MOV W1, W21
	0x03E29D60 BL 0x3E29E5C
	0x03E29D64 MOV W21, W0
	0x03E29D68 CMP W0, W22
	0x03E29D6C B.LE 0x3E29CD8
	0x03E29D70 ADRP X24, 0x341000
	0x03E29D74 LDR X24, [X24 + 0xFE0]
	0x03E29D78 MOV X0, X20
	0x03E29D7C MOV X1, X31
	0x03E29D80 BL 0x3CCEAB4
	0x03E29D84 CMP W22, W0
	0x03E29D88 B.GE 0x3E29CD8
	0x03E29D8C MOV X0, X20
	0x03E29D90 MOV X1, X31
	0x03E29D94 BL 0x3CCF680
	0x03E29D98 CBZ X0, 0x3E29E58
	0x03E29D9C LDR X8, [X0]
	0x03E29DA0 LDR X1, [X24]
	0x03E29DA4 MOV X23, X0
	0x03E29DA8 LDRH W9, [X8 + 0x12E]
	0x03E29DAC CBZ X9, 0x3E29DD0
	0x03E29DB0 LDR X10, [X8 + 0xB0]
	0x03E29DB4 ADD X10, X10, 0x8
	0x03E29DB8 LDUR X11, [X10 - 0x8]
	0x03E29DBC CMP X11, X1
	0x03E29DC0 B.EQ 0x3E29DE0
	0x03E29DC4 SUBS X9, X9, 0x1
	0x03E29DC8 ADD X10, X10, 0x10
	0x03E29DCC B.NE 0x3E29DB8
	0x03E29DD0 MOV X0, X23
	0x03E29DD4 MOV W2, W31
	0x03E29DD8 BL 0x1C5C788
	0x03E29DDC B 0x3E29DEC
	0x03E29DE0 LDRSW X9, [X10]
	0x03E29DE4 ADD X8, X8, X9, 0x4, LSL
	0x03E29DE8 ADD X0, X8, 0x138
	0x03E29DEC LDP X8, X2, [X0]
	0x03E29DF0 MOV X0, X23
	0x03E29DF4 MOV W1, W22
	0x03E29DF8 BLR X8
	0x03E29DFC LDR X0, [X19 + 0x108]
	0x03E29E00 CBZ X0, 0x3E29E58
	0x03E29E04 MOV X1, X31
	0x03E29E08 MOV V10.16B, V0.16B
	0x03E29E0C MOV V9.16B, V2.16B
	0x03E29E10 BL 0x3E458D0
	0x03E29E14 LDR X0, [X19 + 0x108]
	0x03E29E18 CBZ X0, 0x3E29E58
	0x03E29E1C MOV X1, X31
	0x03E29E20 FDIV S10, S10, S0
	0x03E29E24 BL 0x3E458D0
	0x03E29E28 FDIV S0, S9, S0
	0x03E29E2C FADD S0, S10, S0
	0x03E29E30 FSUB S0, S0, S8
	0x03E29E34 FSUB S1, S8, S10
	0x03E29E38 FCMP S1, S0
	0x03E29E3C B.MI 0x3E29E50
	0x03E29E40 ADD W22, W22, 0x1
	0x03E29E44 CMP W22, W21
	0x03E29E48 B.NE 0x3E29D78
	0x03E29E4C B 0x3E29CD8
	0x03E29E50 MOV W21, W22
	0x03E29E54 B 0x3E29CD8
	0x03E29E58 BL 0x1C16F20
	0x03E29E5C STP X30, X21, [X31 - 0x20]!
	0x03E29E60 STP X20, X19, [X31 + 0x10]
	0x03E29E64 ADRP X20, 0x5BF000
	0x03E29E68 LDRB W8, [X20 + 0x6F5]
	0x03E29E6C MOV W21, W1
	0x03E29E70 MOV X19, X0
	0x03E29E74 TBNZ X8, 0x0, 0x3E29E98
	0x03E29E78 ADRP X0, 0x341000
	0x03E29E7C LDR X0, [X0 + 0xFE8]
	0x03E29E80 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x5C0000
	011 Move X21, 0x2CB000
	012 Move W8, [X20+1785]
	013 Move X21, [X21+1432]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x2CB000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1785], W8
	024 Move X0, [X21]
	025 Move X20, [X19+264]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {374}
	038 Move X0, [X21]
	039 Move X20, [X19+416]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Inequality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {374}
	052 Move X0, [X19+416]
	053 Compare X0, 0
	054 JumpIfEqual {384}
	055 Move X1, X31
	056 Call Transform.get_localPosition, X0
	057 Move X0, [X19+264]
	058 Compare X0, 0
	059 JumpIfEqual {384}
	060 Move X1, X31
	061 Move V8, V0
	062 Move V9, V1
	063 Move V10, V2
	064 Call Graphic.get_rectTransform, X0
	065 Compare X0, 0
	066 JumpIfEqual {384}
	067 Move X1, X31
	068 Call Transform.get_localPosition, X0
	069 Move X8, -53735424
	070 Subtract S0, S8, S0
	071 Subtract S1, S9, S1
	072 Move V12, [X8+3872]
	073 Subtract S2, S10, S2
	074 Multiply S0, S0, S0
	075 Multiply S1, S1, S1
	076 Add S0, S0, S1
	077 Multiply S1, S2, S2
	078 Add S0, S1, S0
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 Move X0, [X19+416]
	081 Compare X0, 0
	082 JumpIfEqual {384}
	083 Move X1, X31
	084 Call Transform.get_localRotation, X0
	085 Move X0, [X19+264]
	086 Compare X0, 0
	087 JumpIfEqual {384}
	088 Move X1, X31
	089 Move V10, V0
	090 Move V11, V1
	091 Move V9, V2
	092 Move V8, V3
	093 Call Graphic.get_rectTransform, X0
	094 Compare X0, 0
	095 JumpIfEqual {384}
	096 Move X1, X31
	097 Call Transform.get_localRotation, X0
	098 Multiply S0, S10, S0
	099 Multiply S1, S11, S1
	100 Move X8, -53731328
	101 Add S0, S0, S1
	102 Move V1, [X8+436]
	103 Multiply S2, S9, S2
	104 Add S0, S2, S0
	105 Multiply S2, S8, S3
	106 Add S0, S2, S0
	107 NotImplemented "Instruction FCMP not yet implemented."
	108 Move X0, [X19+416]
	109 Compare X0, 0
	110 JumpIfEqual {384}
	111 Move X1, X31
	112 Call Transform.get_localScale, X0
	113 Move X0, [X19+264]
	114 Compare X0, 0
	115 JumpIfEqual {384}
	116 Move X1, X31
	117 Move V8, V0
	118 Move V9, V1
	119 Move V10, V2
	120 Call Graphic.get_rectTransform, X0
	121 Compare X0, 0
	122 JumpIfEqual {384}
	123 Move X1, X31
	124 Call Transform.get_localScale, X0
	125 Subtract S0, S8, S0
	126 Subtract S1, S9, S1
	127 Subtract S2, S10, S2
	128 Multiply S0, S0, S0
	129 Multiply S1, S1, S1
	130 Add S0, S0, S1
	131 Multiply S1, S2, S2
	132 Add S0, S1, S0
	133 NotImplemented "Instruction FCMP not yet implemented."
	134 Move X0, [X19+416]
	135 Compare X0, 0
	136 JumpIfEqual {384}
	137 Move X1, X31
	138 Call RectTransform.get_anchorMin, X0
	139 Move X0, [X19+264]
	140 Compare X0, 0
	141 JumpIfEqual {384}
	142 Move X1, X31
	143 Move V8, V0
	144 Move V9, V1
	145 Call Graphic.get_rectTransform, X0
	146 Compare X0, 0
	147 JumpIfEqual {384}
	148 Move X1, X31
	149 Call RectTransform.get_anchorMin, X0
	150 Subtract S0, S8, S0
	151 Subtract S1, S9, S1
	152 Multiply S0, S0, S0
	153 Multiply S1, S1, S1
	154 Add S0, S0, S1
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 Move X0, [X19+416]
	157 Compare X0, 0
	158 JumpIfEqual {384}
	159 Move X1, X31
	160 Call RectTransform.get_anchorMax, X0
	161 Move X0, [X19+264]
	162 Compare X0, 0
	163 JumpIfEqual {384}
	164 Move X1, X31
	165 Move V8, V0
	166 Move V9, V1
	167 Call Graphic.get_rectTransform, X0
	168 Compare X0, 0
	169 JumpIfEqual {384}
	170 Move X1, X31
	171 Call RectTransform.get_anchorMax, X0
	172 Subtract S0, S8, S0
	173 Subtract S1, S9, S1
	174 Multiply S0, S0, S0
	175 Multiply S1, S1, S1
	176 Add S0, S0, S1
	177 NotImplemented "Instruction FCMP not yet implemented."
	178 Move X0, [X19+416]
	179 Compare X0, 0
	180 JumpIfEqual {384}
	181 Move X1, X31
	182 Call RectTransform.get_anchoredPosition, X0
	183 Move X0, [X19+264]
	184 Compare X0, 0
	185 JumpIfEqual {384}
	186 Move X1, X31
	187 Move V8, V0
	188 Move V9, V1
	189 Call Graphic.get_rectTransform, X0
	190 Compare X0, 0
	191 JumpIfEqual {384}
	192 Move X1, X31
	193 Call RectTransform.get_anchoredPosition, X0
	194 Subtract S0, S8, S0
	195 Subtract S1, S9, S1
	196 Multiply S0, S0, S0
	197 Multiply S1, S1, S1
	198 Add S0, S0, S1
	199 NotImplemented "Instruction FCMP not yet implemented."
	200 Move X0, [X19+416]
	201 Compare X0, 0
	202 JumpIfEqual {384}
	203 Move X1, X31
	204 Call RectTransform.get_sizeDelta, X0
	205 Move X0, [X19+264]
	206 Compare X0, 0
	207 JumpIfEqual {384}
	208 Move X1, X31
	209 Move V8, V0
	210 Move V9, V1
	211 Call Graphic.get_rectTransform, X0
	212 Compare X0, 0
	213 JumpIfEqual {384}
	214 Move X1, X31
	215 Call RectTransform.get_sizeDelta, X0
	216 Subtract S0, S8, S0
	217 Subtract S1, S9, S1
	218 Multiply S0, S0, S0
	219 Multiply S1, S1, S1
	220 Add S0, S0, S1
	221 NotImplemented "Instruction FCMP not yet implemented."
	222 Move X0, [X19+416]
	223 Compare X0, 0
	224 JumpIfEqual {384}
	225 Move X1, X31
	226 Call RectTransform.get_pivot, X0
	227 Move X0, [X19+264]
	228 Compare X0, 0
	229 JumpIfEqual {384}
	230 Move X1, X31
	231 Move V8, V0
	232 Move V9, V1
	233 Call Graphic.get_rectTransform, X0
	234 Compare X0, 0
	235 JumpIfEqual {384}
	236 Move X1, X31
	237 Call RectTransform.get_pivot, X0
	238 Subtract S0, S8, S0
	239 Subtract S1, S9, S1
	240 Multiply S0, S0, S0
	241 Multiply S1, S1, S1
	242 Add S0, S0, S1
	243 NotImplemented "Instruction FCMP not yet implemented."
	244 Move X0, [X19+264]
	245 Compare X0, 0
	246 JumpIfEqual {384}
	247 Move X20, [X19+416]
	248 Move X1, X31
	249 Call Graphic.get_rectTransform, X0
	250 Compare X0, 0
	251 JumpIfEqual {384}
	252 Move X1, X31
	253 Call Transform.get_localPosition, X0
	254 Compare X20, 0
	255 JumpIfEqual {384}
	256 Move X0, X20
	257 Move X1, X31
	258 Call Transform.set_localPosition, X0, X1
	259 Move X0, [X19+264]
	260 Compare X0, 0
	261 JumpIfEqual {384}
	262 Move X20, [X19+416]
	263 Move X1, X31
	264 Call Graphic.get_rectTransform, X0
	265 Compare X0, 0
	266 JumpIfEqual {384}
	267 Move X1, X31
	268 Call Transform.get_localRotation, X0
	269 Compare X20, 0
	270 JumpIfEqual {384}
	271 Move X0, X20
	272 Move X1, X31
	273 Call Transform.set_localRotation, X0, X1
	274 Move X0, [X19+264]
	275 Compare X0, 0
	276 JumpIfEqual {384}
	277 Move X20, [X19+416]
	278 Move X1, X31
	279 Call Graphic.get_rectTransform, X0
	280 Compare X0, 0
	281 JumpIfEqual {384}
	282 Move X1, X31
	283 Call Transform.get_localScale, X0
	284 Compare X20, 0
	285 JumpIfEqual {384}
	286 Move X0, X20
	287 Move X1, X31
	288 Call Transform.set_localScale, X0, X1
	289 Move X0, [X19+264]
	290 Compare X0, 0
	291 JumpIfEqual {384}
	292 Move X20, [X19+416]
	293 Move X1, X31
	294 Call Graphic.get_rectTransform, X0
	295 Compare X0, 0
	296 JumpIfEqual {384}
	297 Move X1, X31
	298 Call RectTransform.get_anchorMin, X0
	299 Compare X20, 0
	300 JumpIfEqual {384}
	301 Move X0, X20
	302 Move X1, X31
	303 Call RectTransform.set_anchorMin, X0, X1
	304 Move X0, [X19+264]
	305 Compare X0, 0
	306 JumpIfEqual {384}
	307 Move X20, [X19+416]
	308 Move X1, X31
	309 Call Graphic.get_rectTransform, X0
	310 Compare X0, 0
	311 JumpIfEqual {384}
	312 Move X1, X31
	313 Call RectTransform.get_anchorMax, X0
	314 Compare X20, 0
	315 JumpIfEqual {384}
	316 Move X0, X20
	317 Move X1, X31
	318 Call RectTransform.set_anchorMax, X0, X1
	319 Move X0, [X19+264]
	320 Compare X0, 0
	321 JumpIfEqual {384}
	322 Move X20, [X19+416]
	323 Move X1, X31
	324 Call Graphic.get_rectTransform, X0
	325 Compare X0, 0
	326 JumpIfEqual {384}
	327 Move X1, X31
	328 Call RectTransform.get_anchoredPosition, X0
	329 Compare X20, 0
	330 JumpIfEqual {384}
	331 Move X0, X20
	332 Move X1, X31
	333 Call RectTransform.set_anchoredPosition, X0, X1
	334 Move X0, [X19+264]
	335 Compare X0, 0
	336 JumpIfEqual {384}
	337 Move X20, [X19+416]
	338 Move X1, X31
	339 Call Graphic.get_rectTransform, X0
	340 Compare X0, 0
	341 JumpIfEqual {384}
	342 Move X1, X31
	343 Call RectTransform.get_sizeDelta, X0
	344 Compare X20, 0
	345 JumpIfEqual {384}
	346 Move X0, X20
	347 Move X1, X31
	348 Call RectTransform.set_sizeDelta, X0, X1
	349 Move X0, [X19+264]
	350 Compare X0, 0
	351 JumpIfEqual {384}
	352 Move X19, [X19+416]
	353 Move X1, X31
	354 Call Graphic.get_rectTransform, X0
	355 Compare X0, 0
	356 JumpIfEqual {384}
	357 Move X1, X31
	358 Call RectTransform.get_pivot, X0
	359 Compare X19, 0
	360 JumpIfEqual {384}
	361 Move X0, X19
	362 Move X20, [X31+64]
	363 Move X19, [X31+72]
	364 Move X30, [X31+48]
	365 Move X21, [X31+56]
	366 Move D9, [X31+32]
	367 Move D8, [X31+40]
	368 Move D11, [X31+16]
	369 Move D10, [X31+24]
	370 Move X1, X31
	371 Move V12, [X31+80]
	372 Call RectTransform.set_pivot, X0, X1
	373 Return 
	374 Move X20, [X31+64]
	375 Move X19, [X31+72]
	376 Move X30, [X31+48]
	377 Move X21, [X31+56]
	378 Move D9, [X31+32]
	379 Move D8, [X31+40]
	380 Move D11, [X31+16]
	381 Move D10, [X31+24]
	382 Move V12, [X31+80]
	383 Return 
	384 Call 0x1C17F20

Method: System.Void OnFillVBO(UnityEngine.Mesh vbo)

Disassembly:
	0x03E2E30C LDUR V0, [X26 + 0xAC]
	0x03E2E310 LDR V1, [X31 + 0x27]
	0x03E2E314 LDR X8, [X31 + 0x10]
	0x03E2E318 STP S8, S10, [X31 + 0x80]
	0x03E2E31C STR W31, [X31 + 0x88]
	0x03E2E320 ADD X1, X31, 0x80
	0x03E2E324 STUR V0, [X8 + 0xC]
	0x03E2E328 LDP V0, V2, [X31 + 0x240]
	0x03E2E32C STR V1, [X8]
	0x03E2E330 LDR V1, [X31 + 0x26]
	0x03E2E334 LDR X8, [X31 + 0x8]
	0x03E2E338 MOV X0, X21
	0x03E2E33C MOV X2, X31
	0x03E2E340 STR W22, [X31 + 0xA8]
	0x03E2E344 STP S13, S9, [X31 + 0xAC]
	0x03E2E348 STUR D11, [X31 + 0xB4]
	0x03E2E34C STP V2, V1, [X8 + 0x10]
	0x03E2E350 STR V0, [X8]
	0x03E2E354 BL 0x3E4A31C
	0x03E2E358 ADD W26, W25, 0x2
	0x03E2E35C ADD W2, W25, 0x1
	0x03E2E360 MOV X0, X21
	0x03E2E364 MOV W1, W25
	0x03E2E368 MOV W3, W26
	0x03E2E36C MOV X4, X31
	0x03E2E370 BL 0x3E39B84
	0x03E2E374 ADD W2, W25, 0x3
	0x03E2E378 MOV X0, X21
	0x03E2E37C MOV W1, W26
	0x03E2E380 MOV W3, W25
	0x03E2E384 MOV X4, X31
	0x03E2E388 BL 0x3E39B84
	0x03E2E38C ADRP X8, 0x33C000
	0x03E2E390 LDR X8, [X8 + 0xFB8]
	0x03E2E394 LDR X0, [X8]
	0x03E2E398 LDR W8, [X0 + 0xE0]
	0x03E2E39C CBNZ W8, 0x3E2E3A4
	0x03E2E3A0 BL 0x1C16DFC
	0x03E2E3A4 MOV W22, W19
	0x03E2E3A8 ADD W22, W19, 0x1
	0x03E2E3AC MOV X0, X20
	0x03E2E3B0 MOV W1, W22
	0x03E2E3B4 ADD W24, W24, 0x1
	0x03E2E3B8 MOV X19, X20
	0x03E2E3BC BL 0x3E29E5C
	0x03E2E3C0 LDR X20, [X31 + 0x48]
	0x03E2E3C4 MOV W26, W0
	0x03E2E3C8 MOV W25, W24
	0x03E2E3CC MOV W27, W29
	0x03E2E3D0 MOV X29, X28
	0x03E2E3D4 LDR W8, [X31 + 0x7C]
	0x03E2E3D8 CMP W24, W8
	0x03E2E3DC B.NE 0x3E2DEDC
	0x03E2E3E0 ADD X31, X31, 0x290
	0x03E2E3E4 LDP X20, X19, [X31 + 0x90]
	0x03E2E3E8 LDP X22, X21, [X31 + 0x80]
	0x03E2E3EC LDP X24, X23, [X31 + 0x70]
	0x03E2E3F0 LDP X26, X25, [X31 + 0x60]
	0x03E2E3F4 LDP X28, X27, [X31 + 0x50]
	0x03E2E3F8 LDP X29, X30, [X31 + 0x40]
	0x03E2E3FC LDP D9, D8, [X31 + 0x30]
	0x03E2E400 LDP D11, D10, [X31 + 0x20]
	0x03E2E404 LDP D13, D12, [X31 + 0x10]
	0x03E2E408 LDP D15, D14, [X31], #0xA0
	0x03E2E40C RET
	0x03E2E410 BL 0x1C16F20
	0x03E2E414 SUB X31, X31, 0xC0
	0x03E2E418 STP X30, X27, [X31 + 0x70]
	0x03E2E41C STP X26, X25, [X31 + 0x80]
	0x03E2E420 STP X24, X23, [X31 + 0x90]
	0x03E2E424 STP X22, X21, [X31 + 0xA0]
	0x03E2E428 STP X20, X19, [X31 + 0xB0]
	0x03E2E42C ADRP X20, 0x5BA000
	0x03E2E430 ADRP X21, 0x32B000
	0x03E2E434 LDRB W8, [X20 + 0x6FC]
	0x03E2E438 LDR X21, [X21 + 0x1A8]
	0x03E2E43C MOV X19, X0
	0x03E2E440 TBNZ X8, 0x0, 0x3E2E464
	0x03E2E444 ADRP X0, 0x32B000
	0x03E2E448 LDR X0, [X0 + 0x1A8]
	0x03E2E44C BL 0x1C16CF4
	0x03E2E450 ADRP X0, 0x2F0000
	0x03E2E454 LDR X0, [X0 + 0x7E8]
	0x03E2E458 BL 0x1C16CF4
	0x03E2E45C MOVZ W8, 0x1
	0x03E2E460 STRB W8, [X20 + 0x6FC]
	0x03E2E464 LDR X0, [X21]
	0x03E2E468 MOVZ W1, 0x4
	0x03E2E46C BL 0x1C16D6C
	0x03E2E470 STR X0, [X19 + 0x1A8]
	0x03E2E474 CBZ X0, 0x3E2E540
	0x03E2E478 ADRP X23, 0x2F0000
	0x03E2E47C ADRP X20, 0x2CD000
	0x03E2E480 LDR X23, [X23 + 0x7E8]
	0x03E2E484 LDR X20, [X20 + 0xF08]
	0x03E2E488 MOV X21, X0
	0x03E2E48C MOV X24, X31
	0x03E2E490 MOV X22, X31
	0x03E2E494 ADRP X25, 0x5AB000
	0x03E2E498 MOVZ W26, 0x1
	0x03E2E49C LDR W27, [X21 + 0x18]
	0x03E2E4A0 CMP X22, W27, SXTW
	0x03E2E4A4 B.GE 0x3E2E544
	0x03E2E4A8 LDR X0, [X23]
	0x03E2E4AC LDR W8, [X0 + 0xE0]
	0x03E2E4B0 CBNZ W8, 0x3E2E4C0
	0x03E2E4B4 BL 0x1C16DFC
	0x03E2E4B8 LDR X0, [X23]
	0x03E2E4BC LDR W27, [X21 + 0x18]
	0x03E2E4C0 LDR X8, [X0 + 0xB8]
	0x03E2E4C4 ADD X0, X31, 0x0
	0x03E2E4C8 MOVZ W2, 0x6C
	0x03E2E4CC ADD X1, X8, 0x14
	0x03E2E4D0 BL 0x3EB1AC0
	0x03E2E4D4 CMP X22, X27
	0x03E2E4D8 B.CS 0x3E2E560
	0x03E2E4DC ADD X8, X21, X24
	0x03E2E4E0 ADD X0, X8, 0x20
	0x03E2E4E4 ADD X1, X31, 0x0
	0x03E2E4E8 MOVZ W2, 0x6C
	0x03E2E4EC BL 0x3EB1AC0
	0x03E2E4F0 LDR X21, [X19 + 0x1A8]
	0x03E2E4F4 CBZ X21, 0x3E2E540
	0x03E2E4F8 LDRB W8, [X25 + 0x78F]
	0x03E2E4FC CBNZ W8, 0x3E2E50C
	0x03E2E500 MOV X0, X20
	0x03E2E504 BL 0x1C16CF4
	0x03E2E508 STRB W26, [X25 + 0x78F]
	0x03E2E50C LDR W8, [X21 + 0x18]
	0x03E2E510 CMP X22, X8
	0x03E2E514 B.CS 0x3E2E560
	0x03E2E518 LDR X8, [X20]
	0x03E2E51C ADD X22, X22, 0x1
	0x03E2E520 LDR X8, [X8 + 0xB8]
	0x03E2E524 LDR V0, [X8]
	0x03E2E528 ADD X8, X21, X24
	0x03E2E52C STP W31, W31, [X8 + 0x54]
	0x03E2E530 ADD X24, X24, 0x6C
	0x03E2E534 STUR D0, [X8 + 0x4C]
	0x03E2E538 LDR X21, [X19 + 0x1A8]
	0x03E2E53C CBNZ X21, 0x3E2E49C
	0x03E2E540 BL 0x1C16F20
	0x03E2E544 LDP X20, X19, [X31 + 0xB0]
	0x03E2E548 LDP X22, X21, [X31 + 0xA0]
	0x03E2E54C LDP X24, X23, [X31 + 0x90]
	0x03E2E550 LDP X26, X25, [X31 + 0x80]
	0x03E2E554 LDP X30, X27, [X31 + 0x70]
	0x03E2E558 ADD X31, X31, 0xC0
	0x03E2E55C RET
	0x03E2E560 BL 0x1C16F28
	0x03E2E564 STP X30, X21, [X31 - 0x20]!
	0x03E2E568 STP X20, X19, [X31 + 0x10]
	0x03E2E56C ADRP X20, 0x5BA000
	0x03E2E570 ADRP X21, 0x2C5000
	0x03E2E574 LDRB W8, [X20 + 0x6FF]
	0x03E2E578 LDR X21, [X21 + 0x598]
	0x03E2E57C MOV X19, X0
	0x03E2E580 TBNZ X8, 0x0, 0x3E2E598
	0x03E2E584 ADRP X0, 0x2C5000
	0x03E2E588 LDR X0, [X0 + 0x598]
	0x03E2E58C BL 0x1C16CF4
	0x03E2E590 MOVZ W8, 0x1

ISIL:
	001 Move [X31-80], D9
	002 Move [X31-72], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x5BB000
	011 Move X19, 0x32C000
	012 Move W8, [X22+1786]
	013 Move X19, [X19+416]
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {28}
	020 Move X0, 0x2C6000
	021 Move X0, [X0+3584]
	022 Call 0x1C17CF4
	023 Move X0, 0x32C000
	024 Move X0, [X0+416]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X22+1786], W8
	028 Move X0, [X19]
	029 Move X23, 0x2C6000
	030 Move X23, [X23+3584]
	031 Call 0x1C17F10
	032 Move X1, X31
	033 Move X19, X0
	034 Call VertexHelper..ctor, X0
	035 Move W8, [X21+464]
	036 Compare W8, 0
	037 JumpIfEqual {72}
	038 Move X24, 0x5AC000
	039 Move W8, [X24+1935]
	040 Move X22, [X21+264]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2CE000
	044 Move X0, [X0+3848]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X24+1935], W8
	048 Compare X22, 0
	049 JumpIfEqual {126}
	050 Move X8, 0x2CE000
	051 Move X8, [X8+3848]
	052 Move X8, [X8]
	053 Move X8, [X8+184]
	054 Move S0, [X8]
	055 Move S1, [X8+4]
	056 Move X0, X22
	057 Move X1, X31
	058 Call Graphic.PixelAdjustPoint, X0, X1
	059 Move V9, V0
	060 Move V8, V1
	061 Move X0, X21
	062 Call InputField.get_caretPositionInternal, X0
	063 Move W22, W0
	064 Move X0, X21
	065 Call InputField.get_caretSelectPositionInternal, X0
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X0, X21
	068 Move X1, X19
	069 Move V0, V9
	070 Move V1, V8
	071 Call InputField.GenerateCaret, X0, X1, X2
	072 Compare X19, 0
	073 JumpIfEqual {128}
	074 Move X0, X19
	075 Move X1, X20
	076 Move X2, X31
	077 Call VertexHelper.FillMesh, X0, X1
	078 Move X20, X31
	079 Move X0, X21
	080 Move X1, X19
	081 Move V0, V9
	082 Move V1, V8
	083 Call InputField.GenerateHighlight, X0, X1, X2
	084 Compare X19, 0
	085 JumpIfEqual {127}
	086 Move X0, X19
	087 Move X1, X20
	088 Move X2, X31
	089 Call VertexHelper.FillMesh, X0, X1
	090 Move X20, X31
	091 Move X8, [X19]
	092 Move X1, [X23]
	093 NotImplemented "Instruction LDRH not yet implemented."
	094 Compare X9, 0
	095 JumpIfEqual {102}
	096 Move X10, [X8+176]
	097 Add X10, X10, 8
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Subtract X9, X9, 1
	101 Add X10, X10, 16
	102 Move X0, X19
	103 Move W2, W31
	104 Call 0x1C5D788
	105 NotImplemented "Instruction LDRSW not yet implemented."
	106 Add X8, X8, X9
	107 Add X0, X8, 312
	108 Move X8, [X0]
	109 Move X1, [X0+8]
	110 Move X0, X19
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Compare X20, 0
	113 JumpIfNotEqual {124}
	114 Move X20, [X31+64]
	115 Move X19, [X31+72]
	116 Move X22, [X31+48]
	117 Move X21, [X31+56]
	118 Move X24, [X31+32]
	119 Move X23, [X31+40]
	120 Move X30, [X31+16]
	121 Move D9, [X31+80]
	122 Move D8, [X31+88]
	123 Return 
	124 Move X0, X20
	125 Call 0x1C17F18
	126 Call 0x1C17F20
	127 Call 0x1C17F20
	128 Call 0x1C17F20
	129 Move X21, X0
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X0, X21
	132 Call 0x3EB2AD0
	133 Move X20, [X0]
	134 Call 0x3EB2AE0
	135 Compare X19, 0
	136 JumpIfNotEqual {91}
	137 Move X20, X31
	138 Move X21, X0
	139 Compare X19, 0
	140 JumpIfEqual {162}
	141 Move X8, [X19]
	142 Move X1, [X23]
	143 NotImplemented "Instruction LDRH not yet implemented."
	144 Compare X9, 0
	145 JumpIfEqual {152}
	146 Move X10, [X8+176]
	147 Add X10, X10, 8
	148 NotImplemented "Instruction LDUR not yet implemented."
	149 NotImplemented "Instruction CMP not yet implemented."
	150 Subtract X9, X9, 1
	151 Add X10, X10, 16
	152 Move X0, X19
	153 Move W2, W31
	154 Call 0x1C5D788
	155 NotImplemented "Instruction LDRSW not yet implemented."
	156 Add X8, X8, X9
	157 Add X0, X8, 312
	158 Move X8, [X0]
	159 Move X1, [X0+8]
	160 Move X0, X19
	161 NotImplemented "Instruction BLR not yet implemented."
	162 Compare X20, 0
	163 JumpIfNotEqual {166}
	164 Move X0, X21
	165 Call 0x1D2D690
	166 Move X0, X20
	167 Call 0x1C17F18
	168 Call 0x1991590

Method: System.Void GenerateCaret(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)

Disassembly:
	0x03E2E594 STRB W8, [X20 + 0x6FF]
	0x03E2E598 LDR X0, [X21]
	0x03E2E59C LDR X20, [X19 + 0x108]
	0x03E2E5A0 LDR W8, [X0 + 0xE0]
	0x03E2E5A4 CBNZ W8, 0x3E2E5AC
	0x03E2E5A8 BL 0x1C16DFC
	0x03E2E5AC MOV X0, X20
	0x03E2E5B0 MOV X1, X31
	0x03E2E5B4 MOV X2, X31
	0x03E2E5B8 BL 0x3C3883C
	0x03E2E5BC TBNZ X0, 0x0, 0x3E2E674
	0x03E2E5C0 LDR X0, [X19 + 0x108]
	0x03E2E5C4 CBZ X0, 0x3E2E680
	0x03E2E5C8 MOV X1, X31
	0x03E2E5CC BL 0x3E450E8
	0x03E2E5D0 LDR X8, [X21]
	0x03E2E5D4 MOV X20, X0
	0x03E2E5D8 LDR W9, [X8 + 0xE0]
	0x03E2E5DC CBNZ W9, 0x3E2E5E8
	0x03E2E5E0 MOV X0, X8
	0x03E2E5E4 BL 0x1C16DFC
	0x03E2E5E8 MOV X0, X20
	0x03E2E5EC MOV X1, X31
	0x03E2E5F0 MOV X2, X31
	0x03E2E5F4 BL 0x3C3883C
	0x03E2E5F8 TBNZ X0, 0x0, 0x3E2E674
	0x03E2E5FC LDR X8, [X19]
	0x03E2E600 MOV X0, X19
	0x03E2E604 LDP X9, X1, [X8 + 0x1C8]
	0x03E2E608 BLR X9
	0x03E2E60C TBZ X0, 0x0, 0x3E2E674
	0x03E2E610 LDR X8, [X19]
	0x03E2E614 MOV X0, X19
	0x03E2E618 LDR X9, [X8 + 0x2B8]
	0x03E2E61C LDR X1, [X8 + 0x2C0]
	0x03E2E620 BLR X9
	0x03E2E624 TBZ X0, 0x0, 0x3E2E674
	0x03E2E628 LDRB W8, [X19 + 0x1D0]
	0x03E2E62C CBZ W8, 0x3E2E66C
	0x03E2E630 LDR X0, [X19 + 0x100]
	0x03E2E634 CBZ X0, 0x3E2E66C
	0x03E2E638 MOV X1, X31
	0x03E2E63C BL 0x3C3CFD8
	0x03E2E640 TBNZ X0, 0x0, 0x3E2E66C
	0x03E2E644 LDR X0, [X19 + 0x100]
	0x03E2E648 CBZ X0, 0x3E2E680
	0x03E2E64C MOVZ W1, 0x1
	0x03E2E650 MOV X2, X31
	0x03E2E654 BL 0x3C3D014
	0x03E2E658 LDR X0, [X19 + 0x100]
	0x03E2E65C CBZ X0, 0x3E2E680
	0x03E2E660 LDR X1, [X19 + 0x180]
	0x03E2E664 MOV X2, X31
	0x03E2E668 BL 0x3C3CF58
	0x03E2E66C MOVZ W8, 0x1
	0x03E2E670 STRB W8, [X19 + 0x1D1]
	0x03E2E674 LDP X20, X19, [X31 + 0x10]
	0x03E2E678 LDP X30, X21, [X31], #0x20
	0x03E2E67C RET
	0x03E2E680 BL 0x1C16F20
	0x03E2E684 STP X30, X19, [X31 - 0x10]!
	0x03E2E688 MOV X2, X31
	0x03E2E68C MOV X19, X0
	0x03E2E690 BL 0x3E4233C
	0x03E2E694 LDR X8, [X19]
	0x03E2E698 MOV X0, X19
	0x03E2E69C LDR X9, [X8 + 0x4F8]
	0x03E2E6A0 LDR X1, [X8 + 0x500]
	0x03E2E6A4 BLR X9
	0x03E2E6A8 TBZ X0, 0x0, 0x3E2E6B8
	0x03E2E6AC MOV X0, X19
	0x03E2E6B0 LDP X30, X19, [X31], #0x10
	0x03E2E6B4 B 0x3E2E564
	0x03E2E6B8 LDP X30, X19, [X31], #0x10
	0x03E2E6BC RET
	0x03E2E6C0 STR X30, [X31 - 0x10]!
	0x03E2E6C4 CBZ X1, 0x3E2E6E0
	0x03E2E6C8 LDR W8, [X1 + 0x148]
	0x03E2E6CC CBZ W8, 0x3E2E6D8
	0x03E2E6D0 LDR X30, [X31], #0x10
	0x03E2E6D4 RET
	0x03E2E6D8 LDR X30, [X31], #0x10
	0x03E2E6DC B 0x3E2E564
	0x03E2E6E0 BL 0x1C16F20
	0x03E2E6E4 STR X30, [X31 - 0x20]!
	0x03E2E6E8 STP X20, X19, [X31 + 0x10]
	0x03E2E6EC MOV X19, X1
	0x03E2E6F0 MOV X20, X0
	0x03E2E6F4 BL 0x3E276B8
	0x03E2E6F8 MOV X0, X20
	0x03E2E6FC MOV X1, X19
	0x03E2E700 LDP X20, X19, [X31 + 0x10]
	0x03E2E704 MOV X2, X31
	0x03E2E708 LDR X30, [X31], #0x20
	0x03E2E70C B 0x3E42348
	0x03E2E710 STP X30, X19, [X31 - 0x10]!
	0x03E2E714 LDR X8, [X0]
	0x03E2E718 MOV X19, X0
	0x03E2E71C LDP X9, X1, [X8 + 0x1C8]
	0x03E2E720 BLR X9
	0x03E2E724 TBZ X0, 0x0, 0x3E2E750
	0x03E2E728 LDR X8, [X19]
	0x03E2E72C MOV X0, X19
	0x03E2E730 LDR X9, [X8 + 0x2B8]
	0x03E2E734 LDR X1, [X8 + 0x2C0]
	0x03E2E738 BLR X9
	0x03E2E73C TBZ X0, 0x0, 0x3E2E750
	0x03E2E740 LDRB W8, [X19 + 0x1D0]
	0x03E2E744 CBNZ W8, 0x3E2E750
	0x03E2E748 MOVZ W8, 0x1
	0x03E2E74C STRB W8, [X19 + 0x1D1]
	0x03E2E750 LDP X30, X19, [X31], #0x10
	0x03E2E754 RET
	0x03E2E758 LDRB W8, [X0 + 0x201]
	0x03E2E75C CBZ W8, 0x3E2E768
	0x03E2E760 MOVZ W1, 0x3
	0x03E2E764 B 0x3E2E778
	0x03E2E768 CMP W1, 0x2
	0x03E2E76C B.NE 0x3E2E778
	0x03E2E770 MOVZ W8, 0x1
	0x03E2E774 STRB W8, [X0 + 0x201]
	0x03E2E778 AND W2, W2, 0x1
	0x03E2E77C MOV X3, X31
	0x03E2E780 B 0x3E418D4
	0x03E2E784 RET
	0x03E2E788 RET
	0x03E2E78C FMOV S0, 5
	0x03E2E790 RET
	0x03E2E794 SUB X31, X31, 0x150
	0x03E2E798 STR D8, [X31 + 0x120]
	0x03E2E79C STR X29, [X31 + 0x128]
	0x03E2E7A0 STP X30, X21, [X31 + 0x130]
	0x03E2E7A4 STP X20, X19, [X31 + 0x140]
	0x03E2E7A8 ADRP X21, 0x5BA000
	0x03E2E7AC ADRP X20, 0x2C5000
	0x03E2E7B0 LDRB W8, [X21 + 0x703]
	0x03E2E7B4 LDR X20, [X20 + 0x598]
	0x03E2E7B8 MOV X19, X0
	0x03E2E7BC TBNZ X8, 0x0, 0x3E2E7D4
	0x03E2E7C0 ADRP X0, 0x2C5000
	0x03E2E7C4 LDR X0, [X0 + 0x598]
	0x03E2E7C8 BL 0x1C16CF4
	0x03E2E7CC MOVZ W8, 0x1
	0x03E2E7D0 STRB W8, [X21 + 0x703]
	0x03E2E7D4 LDR X0, [X20]
	0x03E2E7D8 LDR X20, [X19 + 0x108]
	0x03E2E7DC LDR W8, [X0 + 0xE0]
	0x03E2E7E0 CBNZ W8, 0x3E2E7E8
	0x03E2E7E4 BL 0x1C16DFC
	0x03E2E7E8 MOV X0, X20
	0x03E2E7EC MOV X1, X31
	0x03E2E7F0 MOV X2, X31
	0x03E2E7F4 BL 0x3C3883C
	0x03E2E7F8 FMOV S0, W31
	0x03E2E7FC TBNZ X0, 0x0, 0x3E2E8C4
	0x03E2E800 ADRP X21, 0x5AB000
	0x03E2E804 LDRB W8, [X21 + 0x78F]
	0x03E2E808 LDR X20, [X19 + 0x108]
	0x03E2E80C CBNZ W8, 0x3E2E824
	0x03E2E810 ADRP X0, 0x2CD000
	0x03E2E814 LDR X0, [X0 + 0xF08]
	0x03E2E818 BL 0x1C16CF4
	0x03E2E81C MOVZ W8, 0x1
	0x03E2E820 STRB W8, [X21 + 0x78F]
	0x03E2E824 CBZ X20, 0x3E2E8DC
	0x03E2E828 ADRP X8, 0x2CD000
	0x03E2E82C LDR X8, [X8 + 0xF08]
	0x03E2E830 MOV X0, X20
	0x03E2E834 MOV X1, X31
	0x03E2E838 LDR X8, [X8]
	0x03E2E83C LDR X8, [X8 + 0xB8]
	0x03E2E840 LDP S0, S1, [X8]
	0x03E2E844 ADD X8, X31, 0x60
	0x03E2E848 BL 0x3E45CAC
	0x03E2E84C ADD X0, X31, 0xC0
	0x03E2E850 ADD X1, X31, 0x60
	0x03E2E854 MOVZ W2, 0x60
	0x03E2E858 BL 0x3EB1AC0
	0x03E2E85C LDR X0, [X19 + 0x108]
	0x03E2E860 CBZ X0, 0x3E2E8DC
	0x03E2E864 MOV X1, X31
	0x03E2E868 BL 0x3E44EDC
	0x03E2E86C LDR X20, [X19 + 0x180]
	0x03E2E870 MOV X21, X0
	0x03E2E874 ADD X0, X31, 0x60
	0x03E2E878 ADD X1, X31, 0xC0
	0x03E2E87C MOVZ W2, 0x60
	0x03E2E880 BL 0x3EB1AC0
	0x03E2E884 CBZ X21, 0x3E2E8DC
	0x03E2E888 ADD X0, X31, 0x0
	0x03E2E88C ADD X1, X31, 0x60
	0x03E2E890 MOVZ W2, 0x60
	0x03E2E894 BL 0x3EB1AC0
	0x03E2E898 ADD X2, X31, 0x0
	0x03E2E89C MOV X0, X21
	0x03E2E8A0 MOV X1, X20
	0x03E2E8A4 MOV X3, X31
	0x03E2E8A8 BL 0x3CCEFC0
	0x03E2E8AC LDR X0, [X19 + 0x108]
	0x03E2E8B0 CBZ X0, 0x3E2E8DC
	0x03E2E8B4 MOV X1, X31
	0x03E2E8B8 MOV V8.16B, V0.16B
	0x03E2E8BC BL 0x3E458D0
	0x03E2E8C0 FDIV S0, S8, S0
	0x03E2E8C4 LDP X20, X19, [X31 + 0x140]
	0x03E2E8C8 LDP X30, X21, [X31 + 0x130]
	0x03E2E8CC LDR X29, [X31 + 0x128]
	0x03E2E8D0 LDR V8, [X31 + 0x120]
	0x03E2E8D4 ADD X31, X31, 0x150
	0x03E2E8D8 RET
	0x03E2E8DC BL 0x1C16F20
	0x03E2E8E0 FMOV S0, -1
	0x03E2E8E4 RET
	0x03E2E8E8 FMOV S0, W31
	0x03E2E8EC RET
	0x03E2E8F0 SUB X31, X31, 0x150
	0x03E2E8F4 STR D8, [X31 + 0x120]
	0x03E2E8F8 STR X29, [X31 + 0x128]
	0x03E2E8FC STP X30, X21, [X31 + 0x130]
	0x03E2E900 STP X20, X19, [X31 + 0x140]
	0x03E2E904 ADRP X21, 0x5BA000
	0x03E2E908 ADRP X20, 0x2C5000
	0x03E2E90C LDRB W8, [X21 + 0x704]
	0x03E2E910 LDR X20, [X20 + 0x598]
	0x03E2E914 MOV X19, X0
	0x03E2E918 TBNZ X8, 0x0, 0x3E2E930
	0x03E2E91C ADRP X0, 0x2C5000
	0x03E2E920 LDR X0, [X0 + 0x598]
	0x03E2E924 BL 0x1C16CF4
	0x03E2E928 MOVZ W8, 0x1
	0x03E2E92C STRB W8, [X21 + 0x704]
	0x03E2E930 LDR X0, [X20]
	0x03E2E934 LDR X20, [X19 + 0x108]
	0x03E2E938 LDR W8, [X0 + 0xE0]
	0x03E2E93C CBNZ W8, 0x3E2E944
	0x03E2E940 BL 0x1C16DFC
	0x03E2E944 MOV X0, X20
	0x03E2E948 MOV X1, X31
	0x03E2E94C MOV X2, X31
	0x03E2E950 BL 0x3C3883C
	0x03E2E954 FMOV S0, W31
	0x03E2E958 TBNZ X0, 0x0, 0x3E2EA0C
	0x03E2E95C LDR X20, [X19 + 0x108]
	0x03E2E960 CBZ X20, 0x3E2EA24
	0x03E2E964 MOV X0, X20
	0x03E2E968 MOV X1, X31
	0x03E2E96C BL 0x3CDB488
	0x03E2E970 CBZ X0, 0x3E2EA24
	0x03E2E974 MOV X1, X31
	0x03E2E978 BL 0x3C3E51C
	0x03E2E97C MOV V0.16B, V2.16B
	0x03E2E980 ADD X8, X31, 0x60
	0x03E2E984 FMOV S1, W31
	0x03E2E988 MOV X0, X20
	0x03E2E98C MOV X1, X31
	0x03E2E990 BL 0x3E45CAC
	0x03E2E994 ADD X0, X31, 0xC0
	0x03E2E998 ADD X1, X31, 0x60
	0x03E2E99C MOVZ W2, 0x60
	0x03E2E9A0 BL 0x3EB1AC0
	0x03E2E9A4 LDR X0, [X19 + 0x108]
	0x03E2E9A8 CBZ X0, 0x3E2EA24
	0x03E2E9AC MOV X1, X31
	0x03E2E9B0 BL 0x3E44EDC
	0x03E2E9B4 LDR X20, [X19 + 0x180]
	0x03E2E9B8 MOV X21, X0
	0x03E2E9BC ADD X0, X31, 0x60
	0x03E2E9C0 ADD X1, X31, 0xC0
	0x03E2E9C4 MOVZ W2, 0x60
	0x03E2E9C8 BL 0x3EB1AC0
	0x03E2E9CC CBZ X21, 0x3E2EA24
	0x03E2E9D0 ADD X0, X31, 0x0
	0x03E2E9D4 ADD X1, X31, 0x60
	0x03E2E9D8 MOVZ W2, 0x60
	0x03E2E9DC BL 0x3EB1AC0
	0x03E2E9E0 ADD X2, X31, 0x0
	0x03E2E9E4 MOV X0, X21
	0x03E2E9E8 MOV X1, X20
	0x03E2E9EC MOV X3, X31
	0x03E2E9F0 BL 0x3CCF0CC
	0x03E2E9F4 LDR X0, [X19 + 0x108]
	0x03E2E9F8 CBZ X0, 0x3E2EA24
	0x03E2E9FC MOV X1, X31
	0x03E2EA00 MOV V8.16B, V0.16B
	0x03E2EA04 BL 0x3E458D0
	0x03E2EA08 FDIV S0, S8, S0
	0x03E2EA0C LDP X20, X19, [X31 + 0x140]
	0x03E2EA10 LDP X30, X21, [X31 + 0x130]
	0x03E2EA14 LDR X29, [X31 + 0x128]
	0x03E2EA18 LDR V8, [X31 + 0x120]
	0x03E2EA1C ADD X31, X31, 0x150
	0x03E2EA20 RET
	0x03E2EA24 BL 0x1C16F20
	0x03E2EA28 FMOV S0, -1
	0x03E2EA2C RET
	0x03E2EA30 MOVZ W0, 0x1
	0x03E2EA34 RET
	0x03E2EA38 STR X30, [X31 - 0x30]!
	0x03E2EA3C STP X22, X21, [X31 + 0x10]
	0x03E2EA40 STP X20, X19, [X31 + 0x20]
	0x03E2EA44 ADRP X21, 0x5BA000
	0x03E2EA48 ADRP X22, 0x2CE000
	0x03E2EA4C ADRP X19, 0x33D000
	0x03E2EA50 ADRP X20, 0x33C000
	0x03E2EA54 LDRB W8, [X21 + 0x705]
	0x03E2EA58 LDR X22, [X22 + 0x8D8]
	0x03E2EA5C LDR X19, [X19 + 0x18]
	0x03E2EA60 LDR X20, [X20 + 0xFB8]
	0x03E2EA64 TBNZ X8, 0x0, 0x3E2EA94
	0x03E2EA68 ADRP X0, 0x2CE000
	0x03E2EA6C LDR X0, [X0 + 0x8D8]
	0x03E2EA70 BL 0x1C16CF4
	0x03E2EA74 ADRP X0, 0x33C000
	0x03E2EA78 LDR X0, [X0 + 0xFB8]
	0x03E2EA7C BL 0x1C16CF4
	0x03E2EA80 ADRP X0, 0x33D000
	0x03E2EA84 LDR X0, [X0 + 0x18]
	0x03E2EA88 BL 0x1C16CF4
	0x03E2EA8C MOVZ W8, 0x1
	0x03E2EA90 STRB W8, [X21 + 0x705]
	0x03E2EA94 LDR X0, [X22]
	0x03E2EA98 MOVZ W1, 0x6
	0x03E2EA9C BL 0x1C16D6C
	0x03E2EAA0 LDR X1, [X19]
	0x03E2EAA4 MOV X2, X31
	0x03E2EAA8 MOV X19, X0
	0x03E2EAAC BL 0x32C5BD8
	0x03E2EAB0 LDR X8, [X20]
	0x03E2EAB4 LDP X22, X21, [X31 + 0x10]
	0x03E2EAB8 LDR X8, [X8 + 0xB8]
	0x03E2EABC STR X19, [X8]
	0x03E2EAC0 LDR X8, [X20]
	0x03E2EAC4 LDP X20, X19, [X31 + 0x20]
	0x03E2EAC8 LDR X8, [X8 + 0xB8]
	0x03E2EACC STRH W31, [X8 + 0x8]
	0x03E2EAD0 LDR X30, [X31], #0x30
	0x03E2EAD4 RET
	0x03E2EAD8 MOV X1, X31
	0x03E2EADC B 0x3C32E90
	0x03E2EAE0 LDR X8, [X0 + 0x40]
	0x03E2EAE4 LDR X5, [X0 + 0x18]
	0x03E2EAE8 LDR X4, [X0 + 0x28]
	0x03E2EAEC MOV X0, X8
	0x03E2EAF0 BR X5
	0x03E2EAF4 SUB X31, X31, 0x70
	0x03E2EAF8 STP X30, X25, [X31 + 0x30]
	0x03E2EAFC STP X24, X23, [X31 + 0x40]
	0x03E2EB00 STP X22, X21, [X31 + 0x50]
	0x03E2EB04 STP X20, X19, [X31 + 0x60]
	0x03E2EB08 ADRP X25, 0x5BA000
	0x03E2EB0C STR W2, [X31 + 0x2C]
	0x03E2EB10 STRH W3, [X31 + 0x28]
	0x03E2EB14 ADRP X24, 0x2C5000
	0x03E2EB18 ADRP X23, 0x2C7000
	0x03E2EB1C LDRB W8, [X25 + 0x706]
	0x03E2EB20 LDR X24, [X24 + 0x758]
	0x03E2EB24 LDR X23, [X23 + 0x170]
	0x03E2EB28 MOV X19, X5
	0x03E2EB2C MOV X20, X4
	0x03E2EB30 MOV X22, X1
	0x03E2EB34 MOV X21, X0
	0x03E2EB38 TBNZ X8, 0x0, 0x3E2EB5C
	0x03E2EB3C ADRP X0, 0x2C7000
	0x03E2EB40 LDR X0, [X0 + 0x170]
	0x03E2EB44 BL 0x1C16CF4
	0x03E2EB48 ADRP X0, 0x2C5000
	0x03E2EB4C LDR X0, [X0 + 0x758]
	0x03E2EB50 BL 0x1C16CF4
	0x03E2EB54 MOVZ W8, 0x1
	0x03E2EB58 STRB W8, [X25 + 0x706]
	0x03E2EB5C LDR X0, [X24]
	0x03E2EB60 ADD X1, X31, 0x2C
	0x03E2EB64 STP X31, X31, [X31 + 0x18]
	0x03E2EB68 STP X22, X31, [X31 + 0x8]
	0x03E2EB6C BL 0x1C16E04
	0x03E2EB70 LDR X8, [X23]
	0x03E2EB74 STR X0, [X31 + 0x10]
	0x03E2EB78 ADD X1, X31, 0x28
	0x03E2EB7C MOV X0, X8
	0x03E2EB80 BL 0x1C16E04
	0x03E2EB84 STR X0, [X31 + 0x18]
	0x03E2EB88 ADD X1, X31, 0x8
	0x03E2EB8C MOV X0, X21
	0x03E2EB90 MOV X2, X20
	0x03E2EB94 MOV X3, X19
	0x03E2EB98 BL 0x1C16CB0
	0x03E2EB9C LDP X20, X19, [X31 + 0x60]
	0x03E2EBA0 LDP X22, X21, [X31 + 0x50]
	0x03E2EBA4 LDP X24, X23, [X31 + 0x40]
	0x03E2EBA8 LDP X30, X25, [X31 + 0x30]
	0x03E2EBAC ADD X31, X31, 0x70
	0x03E2EBB0 RET
	0x03E2EBB4 STR X30, [X31 - 0x10]!
	0x03E2EBB8 MOV X0, X1
	0x03E2EBBC MOV X1, X31
	0x03E2EBC0 BL 0x1C16CB4
	0x03E2EBC4 CBZ X0, 0x3E2EBD8
	0x03E2EBC8 BL 0x1C16E08
	0x03E2EBCC LDRH W0, [X0]
	0x03E2EBD0 LDR X30, [X31], #0x10
	0x03E2EBD4 RET
	0x03E2EBD8 BL 0x1C16F20
	0x03E2EBDC RET
	0x03E2EBE0 STR D8, [X31 - 0x30]!
	0x03E2EBE4 STP X30, X21, [X31 + 0x10]
	0x03E2EBE8 STP X20, X19, [X31 + 0x20]
	0x03E2EBEC LDR W8, [X0 + 0x10]
	0x03E2EBF0 LDR X20, [X0 + 0x20]
	0x03E2EBF4 MOV X19, X0
	0x03E2EBF8 SUB W9, W8, 0x1
	0x03E2EBFC CMP W9, 0x2
	0x03E2EC00 B.CS 0x3E2EC9C
	0x03E2EC04 MOVN W8, 0x0
	0x03E2EC08 STR W8, [X19 + 0x10]
	0x03E2EC0C CBZ X20, 0x3E2ECE0
	0x03E2EC10 LDRB W8, [X20 + 0x1D0]
	0x03E2EC14 CBZ W8, 0x3E2ECC0
	0x03E2EC18 LDR V0, [X20 + 0x188]
	0x03E2EC1C FCMP S0, 0x0
	0x03E2EC20 B.LE 0x3E2ECC0
	0x03E2EC24 FMOV S1, 1
	0x03E2EC28 MOV X0, X31
	0x03E2EC2C FDIV S8, S1, S0
	0x03E2EC30 BL 0x3C3C764
	0x03E2EC34 LDR V1, [X20 + 0x1E0]
	0x03E2EC38 FSUB S0, S0, S1
	0x03E2EC3C MOV V1.16B, V8.16B
	0x03E2EC40 BL 0x3EB1BA0
	0x03E2EC44 FMOV S1, 0.5
	0x03E2EC48 LDRB W9, [X20 + 0x1D4]
	0x03E2EC4C FMUL S1, S8, S1
	0x03E2EC50 FCMP S0, S1
	0x03E2EC54 CSET W8, MI
	0x03E2EC58 CMP W9, W8
	0x03E2EC5C B.EQ 0x3E2EC88
	0x03E2EC60 MOV X0, X20
	0x03E2EC64 STRB W8, [X20 + 0x1D4]
	0x03E2EC68 BL 0x3E26F3C
	0x03E2EC6C MOV W21, W0
	0x03E2EC70 MOV X0, X20
	0x03E2EC74 BL 0x3E26F98
	0x03E2EC78 CMP W21, W0
	0x03E2EC7C B.NE 0x3E2EC88
	0x03E2EC80 MOV X0, X20
	0x03E2EC84 BL 0x3E263C8
	0x03E2EC88 MOVZ W8, 0x2
	0x03E2EC8C STR X31, [X19 + 0x18]
	0x03E2EC90 STR W8, [X19 + 0x10]
	0x03E2EC94 MOVZ W0, 0x1
	0x03E2EC98 B 0x3E2ECD0
	0x03E2EC9C CBNZ W8, 0x3E2ECCC
	0x03E2ECA0 MOVN W8, 0x0
	0x03E2ECA4 STR W8, [X19 + 0x10]
	0x03E2ECA8 CBZ X20, 0x3E2ECE0

ISIL:
	001 Move [X31-128], D13
	002 Move [X31-120], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X21, 0x5BB000
	017 Move W8, [X21+1787]
	018 Move V8, V1
	019 Move V9, V0
	020 Move X20, X1
	021 Move X19, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {46}
	026 Move X0, 0x32A000
	027 Move X0, [X0+1096]
	028 Call 0x1C17CF4
	029 Move X0, 0x33D000
	030 Move X0, [X0+4088]
	031 Call 0x1C17CF4
	032 Move X0, 0x33D000
	033 Move X0, [X0+4064]
	034 Call 0x1C17CF4
	035 Move X0, 0x33D000
	036 Move X0, [X0+4056]
	037 Call 0x1C17CF4
	038 Move X0, 0x2C6000
	039 Move X0, [X0+1432]
	040 Call 0x1C17CF4
	041 Move X0, 0x31C000
	042 Move X0, [X0+1720]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X21+1787], W8
	046 Move W8, [X19+468]
	047 Compare W8, 0
	048 JumpIfEqual {499}
	049 Move X8, [X19+424]
	050 Compare X8, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X19
	053 Call InputField.CreateCursorVerts, X0
	054 Move V12, [X19+396]
	055 Move X0, X19
	056 Call InputField.get_caretPositionInternal, X0
	057 Move X8, [X19+264]
	058 Compare X8, 0
	059 JumpIfEqual {280}
	060 Move W26, [X19+484]
	061 Move W22, W0
	062 Move X0, X8
	063 Move X1, X31
	064 Call Text.get_cachedTextGenerator, X0
	065 Compare X0, 0
	066 JumpIfEqual {499}
	067 Move X1, X31
	068 Move X21, X0
	069 Call TextGenerator.get_lineCount, X0
	070 Compare W0, 0
	071 JumpIfEqual {499}
	072 Move X24, 0x5AC000
	073 Move W8, [X24+1935]
	074 Compare W8, 0
	075 JumpIfNotEqual {81}
	076 Move X0, 0x2CE000
	077 Move X0, [X0+3848]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move [X24+1935], W8
	081 Move X25, 0x2CE000
	082 Move X25, [X25+3848]
	083 Move X0, X21
	084 Move X1, X31
	085 Move X8, [X25]
	086 Move X8, [X8+184]
	087 Move V10, [X8]
	088 Call TextGenerator.get_characters, X0
	089 Compare X0, 0
	090 JumpIfEqual {280}
	091 Move X10, 0x33D000
	092 Move X8, [X0]
	093 Move X10, [X10+4088]
	094 Move X23, X0
	095 NotImplemented "Instruction LDRH not yet implemented."
	096 Move X1, [X10]
	097 Subtract W10, W22, W26
	098 NotImplemented "Instruction BIC not yet implemented."
	099 Compare X9, 0
	100 JumpIfEqual {107}
	101 Move X10, [X8+176]
	102 Add X10, X10, 8
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Subtract X9, X9, 1
	106 Add X10, X10, 16
	107 Move X0, X23
	108 Move W2, W31
	109 Call 0x1C5D788
	110 NotImplemented "Instruction LDRSW not yet implemented."
	111 Add X8, X8, X9
	112 Add X0, X8, 312
	113 Move X8, [X0]
	114 Move X1, [X0+8]
	115 Move X0, X23
	116 NotImplemented "Instruction BLR not yet implemented."
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move X0, X21
	119 Move X1, X31
	120 Call TextGenerator.get_characters, X0
	121 Compare X0, 0
	122 JumpIfEqual {280}
	123 Move X10, 0x33D000
	124 Move X8, [X0]
	125 Move X10, [X10+4064]
	126 Move X23, X0
	127 NotImplemented "Instruction LDRH not yet implemented."
	128 Move X1, [X10]
	129 Compare X9, 0
	130 JumpIfEqual {137}
	131 Move X10, [X8+176]
	132 Add X10, X10, 8
	133 NotImplemented "Instruction LDUR not yet implemented."
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Subtract X9, X9, 1
	136 Add X10, X10, 16
	137 Move X0, X23
	138 Move W2, W31
	139 Call 0x1C5D788
	140 NotImplemented "Instruction LDRSW not yet implemented."
	141 Add X8, X8, X9
	142 Add X0, X8, 312
	143 Move X8, [X0]
	144 Move X2, [X0+8]
	145 Move X0, X23
	146 Move W1, W22
	147 NotImplemented "Instruction BLR not yet implemented."
	148 Move V10, V0
	149 Move X0, [X19+264]
	150 Compare X0, 0
	151 JumpIfEqual {280}
	152 Move X1, X31
	153 Call Text.get_pixelsPerUnit, X0
	154 Move X0, [X19+264]
	155 Compare X0, 0
	156 JumpIfEqual {280}
	157 Move X1, X31
	158 Move V11, V0
	159 Call Graphic.get_rectTransform, X0
	160 Compare X0, 0
	161 JumpIfEqual {280}
	162 Move X1, X31
	163 NotImplemented "Instruction FDIV not yet implemented."
	164 Call RectTransform.get_rect, X0
	165 Add S0, S2, S0
	166 NotImplemented "Instruction FCMP not yet implemented."
	167 Move X0, [X19+264]
	168 Compare X0, 0
	169 JumpIfEqual {280}
	170 Move X1, X31
	171 Call Graphic.get_rectTransform, X0
	172 Compare X0, 0
	173 JumpIfEqual {280}
	174 Move X1, X31
	175 Call RectTransform.get_rect, X0
	176 Add S11, S2, S0
	177 Move W1, W22
	178 Move X2, X21
	179 Call InputField.DetermineCharacterLine, X0, X1, X2
	180 Move W22, W0
	181 Move X0, X21
	182 Move X1, X31
	183 Call TextGenerator.get_lines, X0
	184 Compare X0, 0
	185 JumpIfEqual {280}
	186 Move X26, 0x33D000
	187 Move X8, [X0]
	188 Move X26, [X26+4056]
	189 Move X23, X0
	190 NotImplemented "Instruction LDRH not yet implemented."
	191 Move X1, [X26]
	192 Compare X9, 0
	193 JumpIfEqual {200}
	194 Move X10, [X8+176]
	195 Add X10, X10, 8
	196 NotImplemented "Instruction LDUR not yet implemented."
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Subtract X9, X9, 1
	199 Add X10, X10, 16
	200 Move X0, X23
	201 Move W2, W31
	202 Call 0x1C5D788
	203 NotImplemented "Instruction LDRSW not yet implemented."
	204 Add X8, X8, X9
	205 Add X0, X8, 312
	206 Move X8, [X0]
	207 Move X2, [X0+8]
	208 Move X0, X23
	209 Move W1, W22
	210 NotImplemented "Instruction BLR not yet implemented."
	211 Move X0, [X19+264]
	212 Compare X0, 0
	213 JumpIfEqual {280}
	214 Move X23, X1
	215 Move X1, X31
	216 Call Text.get_pixelsPerUnit, X0
	217 Move X0, X21
	218 Move X1, X31
	219 Move V10, V0
	220 Call TextGenerator.get_lines, X0
	221 Compare X0, 0
	222 JumpIfEqual {280}
	223 Move X8, [X0]
	224 Move X1, [X26]
	225 Move X21, X0
	226 NotImplemented "Instruction LDRH not yet implemented."
	227 Compare X9, 0
	228 JumpIfEqual {235}
	229 Move X10, [X8+176]
	230 Add X10, X10, 8
	231 NotImplemented "Instruction LDUR not yet implemented."
	232 NotImplemented "Instruction CMP not yet implemented."
	233 Subtract X9, X9, 1
	234 Add X10, X10, 16
	235 Move X0, X21
	236 Move W2, W31
	237 Call 0x1C5D788
	238 NotImplemented "Instruction LDRSW not yet implemented."
	239 Add X8, X8, X9
	240 Add X0, X8, 312
	241 Move X8, [X0]
	242 Move X2, [X0+8]
	243 Move X0, X21
	244 Move W1, W22
	245 NotImplemented "Instruction BLR not yet implemented."
	246 Move X8, [X19+264]
	247 Compare X8, 0
	248 JumpIfEqual {280}
	249 Move X21, X0
	250 Move X0, X8
	251 Move X1, X31
	252 Call Text.get_pixelsPerUnit, X0
	253 Move X22, [X19+424]
	254 Compare X22, 0
	255 JumpIfEqual {280}
	256 Move S1, W23
	257 Move X8, X21
	258 ShiftRight X8, 32
	259 And X8, X8, 0x7FFFFFFF
	260 NotImplemented "Instruction FDIV not yet implemented."
	261 NotImplemented "Instruction SCVTF not yet implemented."
	262 Move X26, X31
	263 NotImplemented "Instruction SCVTF not yet implemented."
	264 NotImplemented "Instruction FDIV not yet implemented."
	265 Move W21, 72
	266 Move X8, [X22+24]
	267 NotImplemented "Instruction CMP not yet implemented."
	268 Move X0, X19
	269 Call InputField.get_caretColor, X0
	270 Move X0, X31
	271 Call 0x1E44664
	272 Move W8, [X22+24]
	273 NotImplemented "Instruction CMP not yet implemented."
	274 Move [X22], W0
	275 Move X22, [X19+424]
	276 Add X21, X21, 108
	277 Add X26, X26, 1
	278 Compare X22, 0
	279 JumpIfNotEqual {266}
	280 Call 0x1C17F20
	281 Compare W8, 0
	282 JumpIfEqual {515}
	283 Subtract S0, S10, S13
	284 Move [X22+32], S11
	285 Move [X22+40], S0
	286 Move [X22+40], W31
	287 Move X8, [X19+424]
	288 Compare X8, 0
	289 JumpIfEqual {280}
	290 Move W9, [X8+24]
	291 NotImplemented "Instruction CMP not yet implemented."
	292 Add S1, S11, S12
	293 Move [X8+140], S1
	294 Move [X8+148], S0
	295 Move [X8+148], W31
	296 Move X8, [X19+424]
	297 Compare X8, 0
	298 JumpIfEqual {280}
	299 Move W9, [X8+24]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move [X8+248], S1
	302 Move [X8+256], S10
	303 Move [X8+256], W31
	304 Move X8, [X19+424]
	305 Compare X8, 0
	306 JumpIfEqual {280}
	307 Move W9, [X8+24]
	308 NotImplemented "Instruction CMP not yet implemented."
	309 Move [X8+356], S11
	310 Move [X8+360], S10
	311 Move [X8+364], W31
	312 Move W8, [X24+1935]
	313 Compare W8, 0
	314 JumpIfNotEqual {320}
	315 Move X0, 0x2CE000
	316 Move X0, [X0+3848]
	317 Call 0x1C17CF4
	318 Move W8, 1
	319 Move [X24+1935], W8
	320 Move X8, [X25]
	321 Move X8, [X8+184]
	322 Move S0, [X8]
	323 Move S1, [X8+4]
	324 Move X8, -53755904
	325 Move V2, [X8+3872]
	326 Subtract S0, S9, S0
	327 Subtract S1, S8, S1
	328 Multiply S0, S0, S0
	329 Multiply S1, S1, S1
	330 Add S0, S0, S1
	331 NotImplemented "Instruction FCMP not yet implemented."
	332 Move X8, [X19+424]
	333 Compare X8, 0
	334 JumpIfEqual {280}
	335 Move W8, [X8+24]
	336 NotImplemented "Instruction CMP not yet implemented."
	337 Move W9, W31
	338 NotImplemented "Instruction CMP not yet implemented."
	339 Add W9, W9, 1
	340 NotImplemented "Instruction CMP not yet implemented."
	341 Compare X20, 0
	342 JumpIfEqual {280}
	343 Move X1, [X19+424]
	344 Move X0, X20
	345 Move X2, X31
	346 Call VertexHelper.AddUIVertexQuad, X0, X1
	347 Move X0, X31
	348 Call Screen.get_height
	349 Move X8, [X19+264]
	350 Compare X8, 0
	351 JumpIfEqual {280}
	352 Move W20, W0
	353 Move X0, X8
	354 Move X1, X31
	355 Call Graphic.get_canvas, X0
	356 Compare X0, 0
	357 JumpIfEqual {280}
	358 Move X1, X31
	359 Call Canvas.get_targetDisplay, X0
	360 NotImplemented "Instruction CMP not yet implemented."
	361 Move X22, 0x32A000
	362 Move X22, [X22+1096]
	363 Move W21, W0
	364 Move X0, [X22]
	365 Move W8, [X0+224]
	366 Compare W8, 0
	367 JumpIfNotEqual {370}
	368 Call 0x1C17DFC
	369 Move X0, [X22]
	370 Move X8, [X0+184]
	371 Move X8, [X8]
	372 Compare X8, 0
	373 JumpIfEqual {280}
	374 Move W9, [X8+24]
	375 NotImplemented "Instruction CMP not yet implemented."
	376 Move W9, [X0+224]
	377 Compare W9, 0
	378 JumpIfNotEqual {385}
	379 Call 0x1C17DFC
	380 Move X8, [X22]
	381 Move X8, [X8+184]
	382 Move X8, [X8]
	383 Compare X8, 0
	384 JumpIfEqual {280}
	385 Move W9, [X8+24]
	386 NotImplemented "Instruction CMP not yet implemented."
	387 Add X8, X8, W21
	388 Move X0, [X8+32]
	389 Compare X0, 0
	390 JumpIfEqual {280}
	391 Move X1, X31
	392 Call Display.get_renderingHeight, X0
	393 Move W20, W0
	394 Move X0, [X19+264]
	395 Compare X0, 0
	396 JumpIfEqual {280}
	397 Move X1, X31
	398 Call Graphic.get_canvas, X0
	399 Compare X0, 0
	400 JumpIfEqual {280}
	401 Move X1, X31
	402 Call Canvas.get_renderMode, X0
	403 Compare W0, 0
	404 JumpIfEqual {415}
	405 Move X0, [X19+264]
	406 Compare X0, 0
	407 JumpIfEqual {280}
	408 Move X1, X31
	409 Call Graphic.get_canvas, X0
	410 Compare X0, 0
	411 JumpIfEqual {280}
	412 Move X1, X31
	413 Call Canvas.get_worldCamera, X0
	414 Move X21, X0
	415 Move X21, X31
	416 Move X0, [X19+440]
	417 Compare X0, 0
	418 JumpIfEqual {280}
	419 Move X1, X31
	420 Call Component.get_gameObject, X0
	421 Compare X0, 0
	422 JumpIfEqual {280}
	423 Move X1, X31
	424 Call GameObject.get_transform, X0
	425 Move X8, [X19+424]
	426 Compare X8, 0
	427 JumpIfEqual {280}
	428 Move W9, [X8+24]
	429 Compare W9, 0
	430 JumpIfEqual {515}
	431 Compare X0, 0
	432 JumpIfEqual {280}
	433 Move S1, [X8+36]
	434 Move S2, [X8+40]
	435 Move V0, [X8+32]
	436 Move X1, X31
	437 Call Transform.TransformPoint, X0, X1
	438 Move X8, 0x31C000
	439 Move X8, [X8+1720]
	440 Move V8, V0
	441 Move V9, V1
	442 Move V10, V2
	443 Move X0, [X8]
	444 Move W8, [X0+224]
	445 Compare W8, 0
	446 JumpIfNotEqual {448}
	447 Call 0x1C17DFC
	448 Move X0, X21
	449 Move V0, V8
	450 Move V1, V9
	451 Move V2, V10
	452 Move X1, X31
	453 Call RectTransformUtility.WorldToScreenPoint, X0, X1
	454 Move V8, V0
	455 Move V9, V1
	456 Call InputField.get_input, X0
	457 Move X8, 0x2C6000
	458 Move X8, [X8+1432]
	459 Move X19, X0
	460 Move X8, [X8]
	461 Move W9, [X8+224]
	462 Compare W9, 0
	463 JumpIfNotEqual {466}
	464 Move X0, X8
	465 Call 0x1C17DFC
	466 Move X0, X19
	467 Move X1, X31
	468 Move X2, X31
	469 Call Object.op_Inequality, X0, X1
	470 Move TEMP, X0
	471 And TEMP, TEMP, 1
	472 Compare TEMP, 1
	473 JumpIfNotEqual {499}
	474 Call InputField.get_input, X0
	475 Compare X0, 0
	476 JumpIfEqual {280}
	477 Move X8, [X0]
	478 NotImplemented "Instruction SCVTF not yet implemented."
	479 Subtract S1, S0, S9
	480 Move V0, V8
	481 Move X2, [X8+648]
	482 Move X1, [X8+656]
	483 Move X20, [X31+112]
	484 Move X19, [X31+120]
	485 Move X22, [X31+96]
	486 Move X21, [X31+104]
	487 Move X24, [X31+80]
	488 Move X23, [X31+88]
	489 Move X26, [X31+64]
	490 Move X25, [X31+72]
	491 Move X30, [X31+48]
	492 Move D9, [X31+32]
	493 Move D8, [X31+40]
	494 Move D11, [X31+16]
	495 Move D10, [X31+24]
	496 Move D13, [X31+128]
	497 Move D12, [X31+136]
	498 CallNoReturn X2
	499 Move X20, [X31+112]
	500 Move X19, [X31+120]
	501 Move X22, [X31+96]
	502 Move X21, [X31+104]
	503 Move X24, [X31+80]
	504 Move X23, [X31+88]
	505 Move X26, [X31+64]
	506 Move X25, [X31+72]
	507 Move X30, [X31+48]
	508 Move D9, [X31+32]
	509 Move D8, [X31+40]
	510 Move D11, [X31+16]
	511 Move D10, [X31+24]
	512 Move D13, [X31+128]
	513 Move D12, [X31+136]
	514 Return 
	515 Call 0x1C17F28

Method: System.Void CreateCursorVerts()

Disassembly:
	0x03E2F414 BL 0x1C16CF4
	0x03E2F418 ADRP X0, 0x2EC000
	0x03E2F41C LDR X0, [X0 + 0xA18]
	0x03E2F420 BL 0x1C16CF4
	0x03E2F424 ADRP X0, 0x2EC000
	0x03E2F428 LDR X0, [X0 + 0xA20]
	0x03E2F42C BL 0x1C16CF4
	0x03E2F430 ADRP X0, 0x2EC000
	0x03E2F434 LDR X0, [X0 + 0xA28]
	0x03E2F438 BL 0x1C16CF4
	0x03E2F43C ADRP X0, 0x33C000
	0x03E2F440 LDR X0, [X0 + 0x38]
	0x03E2F444 BL 0x1C16CF4
	0x03E2F448 ADRP X0, 0x2C7000
	0x03E2F44C LDR X0, [X0 + 0x920]
	0x03E2F450 BL 0x1C16CF4
	0x03E2F454 ADRP X0, 0x2EC000
	0x03E2F458 LDR X0, [X0 + 0xA40]
	0x03E2F45C BL 0x1C16CF4
	0x03E2F460 ADRP X0, 0x2EC000
	0x03E2F464 LDR X0, [X0 + 0xA48]
	0x03E2F468 BL 0x1C16CF4
	0x03E2F46C ADRP X0, 0x2C4000
	0x03E2F470 LDR X0, [X0 + 0x598]
	0x03E2F474 BL 0x1C16CF4
	0x03E2F478 ADRP X0, 0x2EB000
	0x03E2F47C LDR X0, [X0 + 0xC70]
	0x03E2F480 BL 0x1C16CF4
	0x03E2F484 ADRP X0, 0x2C4000
	0x03E2F488 LDR X0, [X0 + 0x6C0]
	0x03E2F48C BL 0x1C16CF4
	0x03E2F490 MOVZ W8, 0x1
	0x03E2F494 STRB W8, [X20 + 0x74E]
	0x03E2F498 LDR X0, [X25]
	0x03E2F49C LDR W8, [X0 + 0xE0]
	0x03E2F4A0 CBNZ W8, 0x3E2F4A8
	0x03E2F4A4 BL 0x1C16DFC
	0x03E2F4A8 MOV X0, X19
	0x03E2F4AC MOV X1, X31
	0x03E2F4B0 MOV X2, X31
	0x03E2F4B4 BL 0x3C3883C
	0x03E2F4B8 TBNZ X0, 0x0, 0x3E2F4F8
	0x03E2F4BC CBZ X19, 0x3E2F7D4
	0x03E2F4C0 MOV X0, X19
	0x03E2F4C4 MOV X1, X31
	0x03E2F4C8 BL 0x3C32ECC
	0x03E2F4CC LDR X8, [X25]
	0x03E2F4D0 MOV X20, X0
	0x03E2F4D4 LDR W9, [X8 + 0xE0]
	0x03E2F4D8 CBNZ W9, 0x3E2F4E4
	0x03E2F4DC MOV X0, X8
	0x03E2F4E0 BL 0x1C16DFC
	0x03E2F4E4 MOV X0, X20
	0x03E2F4E8 MOV X1, X31
	0x03E2F4EC MOV X2, X31
	0x03E2F4F0 BL 0x3C3883C
	0x03E2F4F4 TBZ X0, 0x0, 0x3E2F518
	0x03E2F4F8 LDP X20, X19, [X31 + 0x60]
	0x03E2F4FC LDP X22, X21, [X31 + 0x50]
	0x03E2F500 LDP X24, X23, [X31 + 0x40]
	0x03E2F504 LDP X26, X25, [X31 + 0x30]
	0x03E2F508 LDP X28, X27, [X31 + 0x20]
	0x03E2F50C LDP X29, X30, [X31 + 0x10]
	0x03E2F510 ADD X31, X31, 0x70
	0x03E2F514 RET
	0x03E2F518 ADRP X8, 0x2EC000
	0x03E2F51C LDR X8, [X8 + 0xA28]
	0x03E2F520 LDR X0, [X8]
	0x03E2F524 LDR W8, [X0 + 0xE0]
	0x03E2F528 CBNZ W8, 0x3E2F530
	0x03E2F52C BL 0x1C16DFC
	0x03E2F530 ADRP X8, 0x2EC000
	0x03E2F534 LDR X8, [X8 + 0xA18]
	0x03E2F538 LDR X0, [X8]
	0x03E2F53C BL 0x28F98D4
	0x03E2F540 MOV X20, X0
	0x03E2F544 MOV X0, X19
	0x03E2F548 MOV X1, X31
	0x03E2F54C BL 0x3C3F49C
	0x03E2F550 CBZ X0, 0x3E2F570
	0x03E2F554 ADRP X8, 0x2EB000
	0x03E2F558 LDR X8, [X8 + 0xC70]
	0x03E2F55C LDR X9, [X0]
	0x03E2F560 LDR X8, [X8]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+112], X30
	003 Move [X31+120], X27
	004 Move [X31+128], X26
	005 Move [X31+136], X25
	006 Move [X31+144], X24
	007 Move [X31+152], X23
	008 Move [X31+160], X22
	009 Move [X31+168], X21
	010 Move [X31+176], X20
	011 Move [X31+184], X19
	012 Move X20, 0x5BA000
	013 Move X21, 0x32B000
	014 Move W8, [X20+1788]
	015 Move X21, [X21+424]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x32B000
	022 Move X0, [X0+424]
	023 Call 0x1C17CF4
	024 Move X0, 0x2F0000
	025 Move X0, [X0+2024]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+1788], W8
	029 Move X0, [X21]
	030 Move W1, 4
	031 Call 0x1C17D6C
	032 Move [X19+424], X0
	033 Compare X0, 0
	034 JumpIfEqual {87}
	035 Move X23, 0x2F0000
	036 Move X20, 0x2CD000
	037 Move X23, [X23+2024]
	038 Move X20, [X20+3848]
	039 Move X21, X0
	040 Move X24, X31
	041 Move X22, X31
	042 Move X25, 0x5AB000
	043 Move W26, 1
	044 Move W27, [X21+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X0, [X23]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {53}
	050 Call 0x1C17DFC
	051 Move X0, [X23]
	052 Move W27, [X21+24]
	053 Move X8, [X0+184]
	054 Add X0, X31, 0
	055 Move W2, 108
	056 Add X1, X8, 20
	057 Call 0x3EB2AC0
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Add X8, X21, X24
	060 Add X0, X8, 32
	061 Add X1, X31, 0
	062 Move W2, 108
	063 Call 0x3EB2AC0
	064 Move X21, [X19+424]
	065 Compare X21, 0
	066 JumpIfEqual {87}
	067 Move W8, [X25+1935]
	068 Compare W8, 0
	069 JumpIfNotEqual {73}
	070 Move X0, X20
	071 Call 0x1C17CF4
	072 Move [X25+1935], W26
	073 Move W8, [X21+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X8, [X20]
	076 Add X22, X22, 1
	077 Move X8, [X8+184]
	078 Move V0, [X8]
	079 Add X8, X21, X24
	080 Move [X8+84], W31
	081 Move [X8+88], W31
	082 Add X24, X24, 108
	083 Move [X8+76], D0
	084 Move X21, [X19+424]
	085 Compare X21, 0
	086 JumpIfNotEqual {44}
	087 Call 0x1C17F20
	088 Move X20, [X31+176]
	089 Move X19, [X31+184]
	090 Move X22, [X31+160]
	091 Move X21, [X31+168]
	092 Move X24, [X31+144]
	093 Move X23, [X31+152]
	094 Move X26, [X31+128]
	095 Move X25, [X31+136]
	096 Move X30, [X31+112]
	097 Move X27, [X31+120]
	098 Add X31, X31, 192
	099 Return 
	100 Call 0x1C17F28

Method: System.Void GenerateHighlight(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)

Disassembly:
	0x03E2ECAC MOVZ W0, 0x1
	0x03E2ECB0 STRB W0, [X20 + 0x1D4]
	0x03E2ECB4 STR X31, [X19 + 0x18]
	0x03E2ECB8 STR W0, [X19 + 0x10]
	0x03E2ECBC B 0x3E2ECD0
	0x03E2ECC0 MOV W0, W31
	0x03E2ECC4 STR X31, [X20 + 0x1D8]
	0x03E2ECC8 B 0x3E2ECD0
	0x03E2ECCC MOV W0, W31
	0x03E2ECD0 LDP X20, X19, [X31 + 0x20]
	0x03E2ECD4 LDP X30, X21, [X31 + 0x10]
	0x03E2ECD8 LDR V8, [X31], #0x30
	0x03E2ECDC RET
	0x03E2ECE0 BL 0x1C16F20
	0x03E2ECE4 LDR X0, [X0 + 0x18]
	0x03E2ECE8 RET
	0x03E2ECEC STP X30, X19, [X31 - 0x10]!
	0x03E2ECF0 ADRP X0, 0x2C5000
	0x03E2ECF4 LDR X0, [X0 + 0xB40]
	0x03E2ECF8 BL 0x1C16D08
	0x03E2ECFC BL 0x1C16F10
	0x03E2ED00 MOV X1, X31
	0x03E2ED04 MOV X19, X0
	0x03E2ED08 BL 0x3380310
	0x03E2ED0C ADRP X0, 0x33D000
	0x03E2ED10 LDR X0, [X0 + 0x20]
	0x03E2ED14 BL 0x1C16D08
	0x03E2ED18 MOV X1, X0
	0x03E2ED1C MOV X0, X19
	0x03E2ED20 BL 0x1C16DEC
	0x03E2ED24 LDR X0, [X0 + 0x18]
	0x03E2ED28 RET
	0x03E2ED2C RET
	0x03E2ED30 SUB X31, X31, 0x50
	0x03E2ED34 STP D9, D8, [X31 + 0x10]
	0x03E2ED38 STR X30, [X31 + 0x20]
	0x03E2ED3C STP X22, X21, [X31 + 0x30]
	0x03E2ED40 STP X20, X19, [X31 + 0x40]
	0x03E2ED44 ADRP X20, 0x5BA000
	0x03E2ED48 LDRB W8, [X20 + 0x70A]
	0x03E2ED4C MOV X19, X0
	0x03E2ED50 TBNZ X8, 0x0, 0x3E2ED74
	0x03E2ED54 ADRP X0, 0x31B000
	0x03E2ED58 LDR X0, [X0 + 0x6B8]
	0x03E2ED5C BL 0x1C16CF4
	0x03E2ED60 ADRP X0, 0x2CE000
	0x03E2ED64 LDR X0, [X0 + 0x9A0]
	0x03E2ED68 BL 0x1C16CF4
	0x03E2ED6C MOVZ W8, 0x1
	0x03E2ED70 STRB W8, [X20 + 0x70A]
	0x03E2ED74 STR X31, [X31 + 0x28]
	0x03E2ED78 STR X31, [X31 + 0x8]
	0x03E2ED7C LDR W8, [X19 + 0x10]
	0x03E2ED80 CMP W8, 0x2
	0x03E2ED84 B.CS 0x3E2EEAC
	0x03E2ED88 LDR X20, [X19 + 0x28]
	0x03E2ED8C MOVN W8, 0x0
	0x03E2ED90 STR W8, [X19 + 0x10]
	0x03E2ED94 CBZ X20, 0x3E2EF94
	0x03E2ED98 LDRB W8, [X20 + 0x1D2]
	0x03E2ED9C CBZ W8, 0x3E2EEB4
	0x03E2EDA0 LDRB W8, [X20 + 0x1D3]
	0x03E2EDA4 CBZ W8, 0x3E2EEB4
	0x03E2EDA8 ADRP X21, 0x5AB000
	0x03E2EDAC LDRB W8, [X21 + 0x78F]
	0x03E2EDB0 CBNZ W8, 0x3E2EDC8
	0x03E2EDB4 ADRP X0, 0x2CD000
	0x03E2EDB8 LDR X0, [X0 + 0xF08]
	0x03E2EDBC BL 0x1C16CF4
	0x03E2EDC0 MOVZ W8, 0x1
	0x03E2EDC4 STRB W8, [X21 + 0x78F]
	0x03E2EDC8 ADRP X8, 0x2CD000
	0x03E2EDCC LDR X8, [X8 + 0xF08]
	0x03E2EDD0 ADD X1, X31, 0x28
	0x03E2EDD4 MOV X2, X31
	0x03E2EDD8 LDR X8, [X8]
	0x03E2EDDC LDR X8, [X8 + 0xB8]
	0x03E2EDE0 LDR V0, [X8]
	0x03E2EDE4 STR D0, [X31 + 0x28]
	0x03E2EDE8 LDR X0, [X19 + 0x20]
	0x03E2EDEC BL 0x3E389E8
	0x03E2EDF0 TBZ X0, 0x0, 0x3E2EEB4
	0x03E2EDF4 LDR X0, [X20 + 0x108]
	0x03E2EDF8 CBZ X0, 0x3E2EF94
	0x03E2EDFC MOV X1, X31
	0x03E2EE00 BL 0x3CDB488
	0x03E2EE04 LDR X8, [X19 + 0x20]
	0x03E2EE08 CBZ X8, 0x3E2EF94
	0x03E2EE0C LDP S8, S9, [X31 + 0x28]
	0x03E2EE10 MOV X21, X0
	0x03E2EE14 MOV X0, X8
	0x03E2EE18 MOV X1, X31
	0x03E2EE1C BL 0x3E4F314
	0x03E2EE20 ADRP X8, 0x31B000
	0x03E2EE24 LDR X8, [X8 + 0x6B8]
	0x03E2EE28 MOV X22, X0
	0x03E2EE2C LDR X8, [X8]
	0x03E2EE30 LDR W9, [X8 + 0xE0]
	0x03E2EE34 CBNZ W9, 0x3E2EE40
	0x03E2EE38 MOV X0, X8
	0x03E2EE3C BL 0x1C16DFC
	0x03E2EE40 ADD X2, X31, 0x8
	0x03E2EE44 MOV X0, X21
	0x03E2EE48 MOV V0.16B, V8.16B
	0x03E2EE4C MOV V1.16B, V9.16B
	0x03E2EE50 MOV X1, X22
	0x03E2EE54 MOV X3, X31
	0x03E2EE58 BL 0x3E23A98
	0x03E2EE5C LDR X0, [X20 + 0x108]
	0x03E2EE60 CBZ X0, 0x3E2EF94
	0x03E2EE64 MOV X1, X31
	0x03E2EE68 BL 0x3CDB488
	0x03E2EE6C CBZ X0, 0x3E2EF94
	0x03E2EE70 MOV X1, X31
	0x03E2EE74 BL 0x3C3E51C
	0x03E2EE78 LDR W8, [X20 + 0x128]
	0x03E2EE7C SUB W8, W8, 0x1
	0x03E2EE80 CMP W8, 0x1
	0x03E2EE84 B.HI 0x3E2EED4
	0x03E2EE88 LDR V0, [X31 + 0xC]
	0x03E2EE8C FADD S2, S3, S1
	0x03E2EE90 FCMP S0, S2
	0x03E2EE94 B.LE 0x3E2EEF4
	0x03E2EE98 MOVZ W1, 0x1
	0x03E2EE9C MOVZ W2, 0x1
	0x03E2EEA0 MOV X0, X20
	0x03E2EEA4 BL 0x3E2BBBC
	0x03E2EEA8 B 0x3E2EF2C
	0x03E2EEAC MOV W0, W31
	0x03E2EEB0 B 0x3E2EEBC
	0x03E2EEB4 MOV W0, W31
	0x03E2EEB8 STR X31, [X20 + 0x1F0]
	0x03E2EEBC LDP X20, X19, [X31 + 0x40]
	0x03E2EEC0 LDP X22, X21, [X31 + 0x30]
	0x03E2EEC4 LDR X30, [X31 + 0x20]
	0x03E2EEC8 LDP D9, D8, [X31 + 0x10]
	0x03E2EECC ADD X31, X31, 0x50
	0x03E2EED0 RET
	0x03E2EED4 LDR V1, [X31 + 0x8]
	0x03E2EED8 FCMP S1, S0
	0x03E2EEDC B.PL 0x3E2EF10
	0x03E2EEE0 MOVZ W1, 0x1
	0x03E2EEE4 MOV X0, X20
	0x03E2EEE8 MOV W2, W31
	0x03E2EEEC BL 0x3E2AD9C
	0x03E2EEF0 B 0x3E2EF2C
	0x03E2EEF4 FCMP S0, S1
	0x03E2EEF8 B.PL 0x3E2EF2C
	0x03E2EEFC MOVZ W1, 0x1
	0x03E2EF00 MOVZ W2, 0x1
	0x03E2EF04 MOV X0, X20
	0x03E2EF08 BL 0x3E2BA98
	0x03E2EF0C B 0x3E2EF2C
	0x03E2EF10 FADD S0, S2, S0
	0x03E2EF14 FCMP S1, S0
	0x03E2EF18 B.LE 0x3E2EF2C
	0x03E2EF1C MOVZ W1, 0x1
	0x03E2EF20 MOV X0, X20
	0x03E2EF24 MOV W2, W31
	0x03E2EF28 BL 0x3E2AEC8
	0x03E2EF2C MOV X0, X20
	0x03E2EF30 BL 0x3E25E74
	0x03E2EF34 LDR W8, [X20 + 0x128]
	0x03E2EF38 ADRP X9, 0xFFFFFFFFFCCBF000
	0x03E2EF3C ADD X9, X9, 0x740
	0x03E2EF40 LDR X21, [X20 + 0x208]
	0x03E2EF44 SUB W8, W8, 0x1
	0x03E2EF48 CMP W8, 0x2
	0x03E2EF4C CSET W8, CC
	0x03E2EF50 LDR V8, [X9, W8, UXTW]
	0x03E2EF54 CBZ X21, 0x3E2EF60
	0x03E2EF58 STR S8, [X21 + 0x10]
	0x03E2EF5C B 0x3E2EF84
	0x03E2EF60 ADRP X8, 0x2CE000
	0x03E2EF64 LDR X8, [X8 + 0x9A0]
	0x03E2EF68 LDR X0, [X8]
	0x03E2EF6C BL 0x1C16F10
	0x03E2EF70 MOV V0.16B, V8.16B
	0x03E2EF74 MOV X1, X31
	0x03E2EF78 MOV X21, X0
	0x03E2EF7C BL 0x3C3A730
	0x03E2EF80 STR X21, [X20 + 0x208]
	0x03E2EF84 MOVZ W0, 0x1
	0x03E2EF88 STR X21, [X19 + 0x18]
	0x03E2EF8C STR W0, [X19 + 0x10]
	0x03E2EF90 B 0x3E2EEBC
	0x03E2EF94 BL 0x1C16F20
	0x03E2EF98 LDR X0, [X0 + 0x18]
	0x03E2EF9C RET
	0x03E2EFA0 STP X30, X19, [X31 - 0x10]!
	0x03E2EFA4 ADRP X0, 0x2C5000
	0x03E2EFA8 LDR X0, [X0 + 0xB40]
	0x03E2EFAC BL 0x1C16D08
	0x03E2EFB0 BL 0x1C16F10
	0x03E2EFB4 MOV X1, X31
	0x03E2EFB8 MOV X19, X0
	0x03E2EFBC BL 0x3380310
	0x03E2EFC0 ADRP X0, 0x33D000
	0x03E2EFC4 LDR X0, [X0 + 0x28]
	0x03E2EFC8 BL 0x1C16D08
	0x03E2EFCC MOV X1, X0
	0x03E2EFD0 MOV X0, X19
	0x03E2EFD4 BL 0x1C16DEC
	0x03E2EFD8 LDR X0, [X0 + 0x18]
	0x03E2EFDC RET
	0x03E2EFE0 LDR W0, [X0 + 0x20]
	0x03E2EFE4 RET
	0x03E2EFE8 STR X30, [X31 - 0x30]!
	0x03E2EFEC STP X22, X21, [X31 + 0x10]
	0x03E2EFF0 STP X20, X19, [X31 + 0x20]
	0x03E2EFF4 ADRP X22, 0x5BA000
	0x03E2EFF8 ADRP X21, 0x33D000
	0x03E2EFFC LDRB W8, [X22 + 0x70B]
	0x03E2F000 B 0x3EB1A4C
	0x03E2F004 MOV W20, W1
	0x03E2F008 MOV X19, X0
	0x03E2F00C TBNZ X8, 0x0, 0x3E2F024
	0x03E2F010 ADRP X0, 0x33C000
	0x03E2F014 LDR X0, [X0 + 0x30]
	0x03E2F018 BL 0x1C16CF4
	0x03E2F01C MOVZ W8, 0x1
	0x03E2F020 STRB W8, [X22 + 0x70B]
	0x03E2F024 LDR X2, [X21]
	0x03E2F028 ADD X0, X19, 0x20
	0x03E2F02C MOV W1, W20
	0x03E2F030 BL 0x22543F8
	0x03E2F034 TBZ X0, 0x0, 0x3E2F04C
	0x03E2F038 MOV X0, X19
	0x03E2F03C LDP X20, X19, [X31 + 0x20]
	0x03E2F040 LDP X22, X21, [X31 + 0x10]
	0x03E2F044 LDR X30, [X31], #0x30
	0x03E2F048 B 0x3E2F888
	0x03E2F04C LDP X20, X19, [X31 + 0x20]
	0x03E2F050 LDP X22, X21, [X31 + 0x10]
	0x03E2F054 LDR X30, [X31], #0x30
	0x03E2F058 RET
	0x03E2F05C B 0x3E2F888
	0x03E2F060 LDR V0, [X0 + 0x24]
	0x03E2F064 RET
	0x03E2F068 STR D8, [X31 - 0x30]!
	0x03E2F06C STP X30, X21, [X31 + 0x10]
	0x03E2F070 STP X20, X19, [X31 + 0x20]
	0x03E2F074 ADRP X21, 0x5B9000
	0x03E2F078 ADRP X20, 0x333000
	0x03E2F07C LDRB W8, [X21 + 0x70C]
	0x03E2F080 LDR X20, [X20 + 0x5A0]
	0x03E2F084 MOV V8.16B, V0.16B
	0x03E2F088 MOV X19, X0
	0x03E2F08C TBNZ X8, 0x0, 0x3E2F0A4
	0x03E2F090 ADRP X0, 0x333000
	0x03E2F094 LDR X0, [X0 + 0x5A0]
	0x03E2F098 BL 0x1C16CF4
	0x03E2F09C MOVZ W8, 0x1
	0x03E2F0A0 STRB W8, [X21 + 0x70C]
	0x03E2F0A4 LDR X1, [X20]
	0x03E2F0A8 ADD X0, X19, 0x24
	0x03E2F0AC MOV V0.16B, V8.16B
	0x03E2F0B0 BL 0x2254520
	0x03E2F0B4 TBZ X0, 0x0, 0x3E2F0CC
	0x03E2F0B8 MOV X0, X19
	0x03E2F0BC LDP X20, X19, [X31 + 0x20]
	0x03E2F0C0 LDP X30, X21, [X31 + 0x10]
	0x03E2F0C4 LDR V8, [X31], #0x30
	0x03E2F0C8 B 0x3E2F888
	0x03E2F0CC LDP X20, X19, [X31 + 0x20]
	0x03E2F0D0 LDP X30, X21, [X31 + 0x10]
	0x03E2F0D4 LDR V8, [X31], #0x30
	0x03E2F0D8 RET
	0x03E2F0DC STP X30, X21, [X31 - 0x20]!
	0x03E2F0E0 STP X20, X19, [X31 + 0x10]
	0x03E2F0E4 ADRP X21, 0x5B9000
	0x03E2F0E8 ADRP X20, 0x2C4000
	0x03E2F0EC LDRB W8, [X21 + 0x70D]
	0x03E2F0F0 LDR X20, [X20 + 0x598]
	0x03E2F0F4 MOV X19, X0
	0x03E2F0F8 TBNZ X8, 0x0, 0x3E2F11C
	0x03E2F0FC ADRP X0, 0x2C6000
	0x03E2F100 LDR X0, [X0 + 0x6B8]
	0x03E2F104 BL 0x1C16CF4
	0x03E2F108 ADRP X0, 0x2C4000
	0x03E2F10C LDR X0, [X0 + 0x598]
	0x03E2F110 BL 0x1C16CF4
	0x03E2F114 MOVZ W8, 0x1
	0x03E2F118 STRB W8, [X21 + 0x70D]
	0x03E2F11C LDR X0, [X20]
	0x03E2F120 LDR X20, [X19 + 0x28]
	0x03E2F124 LDR W8, [X0 + 0xE0]
	0x03E2F128 CBNZ W8, 0x3E2F130
	0x03E2F12C BL 0x1C16DFC
	0x03E2F130 MOV X0, X20
	0x03E2F134 MOV X1, X31
	0x03E2F138 MOV X2, X31
	0x03E2F13C BL 0x3C3883C
	0x03E2F140 TBZ X0, 0x0, 0x3E2F160
	0x03E2F144 ADRP X8, 0x2C6000
	0x03E2F148 LDR X8, [X8 + 0x6B8]
	0x03E2F14C MOV X0, X19
	0x03E2F150 LDR X1, [X8]
	0x03E2F154 BL 0x21A3894
	0x03E2F158 STR X0, [X19 + 0x28]
	0x03E2F15C B 0x3E2F164
	0x03E2F160 LDR X0, [X19 + 0x28]
	0x03E2F164 LDP X20, X19, [X31 + 0x10]
	0x03E2F168 LDP X30, X21, [X31], #0x20
	0x03E2F16C RET
	0x03E2F170 MOVZ W8, 0x3F800000
	0x03E2F174 MOV X1, X31
	0x03E2F178 STR W8, [X0 + 0x24]
	0x03E2F17C B 0x3E4E160
	0x03E2F180 STR X30, [X31 - 0x20]!
	0x03E2F184 STP X20, X19, [X31 + 0x10]
	0x03E2F188 ADRP X20, 0x5B9000
	0x03E2F18C LDRB W8, [X20 + 0x70E]
	0x03E2F190 MOV X19, X0
	0x03E2F194 TBNZ X8, 0x0, 0x3E2F1AC
	0x03E2F198 ADRP X0, 0x2C4000
	0x03E2F19C LDR X0, [X0 + 0x598]
	0x03E2F1A0 BL 0x1C16CF4
	0x03E2F1A4 MOVZ W8, 0x1
	0x03E2F1A8 STRB W8, [X20 + 0x70E]
	0x03E2F1AC MOV X0, X19
	0x03E2F1B0 MOV X1, X31
	0x03E2F1B4 BL 0x3E4BDBC
	0x03E2F1B8 MOV X0, X19
	0x03E2F1BC BL 0x3E2F0DC
	0x03E2F1C0 CBZ X0, 0x3E2F214
	0x03E2F1C4 ADRP X20, 0x2C4000
	0x03E2F1C8 LDR X20, [X20 + 0x598]
	0x03E2F1CC MOV X1, X31
	0x03E2F1D0 BL 0x3C3F49C
	0x03E2F1D4 LDR X8, [X20]
	0x03E2F1D8 MOV X20, X0
	0x03E2F1DC LDR W9, [X8 + 0xE0]
	0x03E2F1E0 CBNZ W9, 0x3E2F1EC
	0x03E2F1E4 MOV X0, X8
	0x03E2F1E8 BL 0x1C16DFC
	0x03E2F1EC MOV X0, X20
	0x03E2F1F0 MOV X1, X31
	0x03E2F1F4 BL 0x3C38948
	0x03E2F1F8 CBZ X19, 0x3E2F214
	0x03E2F1FC AND W8, W0, 0x1
	0x03E2F200 STRB W8, [X19 + 0x31]
	0x03E2F204 MOV X0, X19
	0x03E2F208 LDP X20, X19, [X31 + 0x10]
	0x03E2F20C LDR X30, [X31], #0x20
	0x03E2F210 B 0x3E2F888
	0x03E2F214 BL 0x1C16F20
	0x03E2F218 STP X30, X19, [X31 - 0x10]!
	0x03E2F21C MOV X1, X31
	0x03E2F220 MOV X19, X0
	0x03E2F224 BL 0x3E5148C
	0x03E2F228 MOV X0, X19
	0x03E2F22C BL 0x3E2F268
	0x03E2F230 TBZ X0, 0x0, 0x3E2F24C
	0x03E2F234 LDRB W8, [X19 + 0x31]
	0x03E2F238 CBNZ W8, 0x3E2F260
	0x03E2F23C LDR W8, [X19 + 0x20]
	0x03E2F240 SUB W8, W8, 0x3
	0x03E2F244 CMP W8, 0x1
	0x03E2F248 B.HI 0x3E2F260
	0x03E2F24C MOV X0, X19
	0x03E2F250 MOV W1, W31
	0x03E2F254 MOV X2, X31
	0x03E2F258 LDP X30, X19, [X31], #0x10
	0x03E2F25C B 0x3C32410
	0x03E2F260 LDP X30, X19, [X31], #0x10
	0x03E2F264 RET
	0x03E2F268 STR X30, [X31 - 0x20]!
	0x03E2F26C STP X20, X19, [X31 + 0x10]
	0x03E2F270 ADRP X20, 0x5B9000
	0x03E2F274 LDRB W8, [X20 + 0x712]
	0x03E2F278 MOV X19, X0
	0x03E2F27C TBNZ X8, 0x0, 0x3E2F2A0
	0x03E2F280 ADRP X0, 0x329000
	0x03E2F284 LDR X0, [X0 + 0xB80]
	0x03E2F288 BL 0x1C16CF4
	0x03E2F28C ADRP X0, 0x2C4000
	0x03E2F290 LDR X0, [X0 + 0x598]
	0x03E2F294 BL 0x1C16CF4
	0x03E2F298 MOVZ W8, 0x1
	0x03E2F29C STRB W8, [X20 + 0x712]
	0x03E2F2A0 MOV X0, X19
	0x03E2F2A4 MOV X1, X31
	0x03E2F2A8 BL 0x3C32ECC
	0x03E2F2AC CBZ X0, 0x3E2F330
	0x03E2F2B0 ADRP X8, 0x329000
	0x03E2F2B4 LDR X8, [X8 + 0xB80]
	0x03E2F2B8 ADRP X19, 0x2C4000
	0x03E2F2BC LDR X1, [X8]
	0x03E2F2C0 LDR X19, [X19 + 0x598]
	0x03E2F2C4 BL 0x21E52E4
	0x03E2F2C8 LDR X8, [X19]
	0x03E2F2CC MOV X19, X0
	0x03E2F2D0 LDR W9, [X8 + 0xE0]
	0x03E2F2D4 CBNZ W9, 0x3E2F2E0
	0x03E2F2D8 MOV X0, X8
	0x03E2F2DC BL 0x1C16DFC
	0x03E2F2E0 MOV X0, X19
	0x03E2F2E4 MOV X1, X31
	0x03E2F2E8 BL 0x3C38948
	0x03E2F2EC TBZ X0, 0x0, 0x3E2F318
	0x03E2F2F0 CBZ X19, 0x3E2F330
	0x03E2F2F4 MOV X0, X19
	0x03E2F2F8 MOV X1, X31
	0x03E2F2FC BL 0x3E2453C
	0x03E2F300 TBZ X0, 0x0, 0x3E2F318
	0x03E2F304 MOV X0, X19
	0x03E2F308 MOV X1, X31
	0x03E2F30C BL 0x3E244BC
	0x03E2F310 CMP W0, 0x2
	0x03E2F314 B.NE 0x3E2F328
	0x03E2F318 MOVZ W0, 0x1
	0x03E2F31C LDP X20, X19, [X31 + 0x10]
	0x03E2F320 LDR X30, [X31], #0x20
	0x03E2F324 RET
	0x03E2F328 MOV W0, W31
	0x03E2F32C B 0x3E2F31C
	0x03E2F330 BL 0x1C16F20
	0x03E2F334 LDRB W8, [X0 + 0x31]
	0x03E2F338 CBNZ W8, 0x3E2F354
	0x03E2F33C LDR W8, [X0 + 0x20]
	0x03E2F340 SUB W8, W8, 0x3
	0x03E2F344 CMP W8, 0x2
	0x03E2F348 B.CS 0x3E2F354
	0x03E2F34C MOV W0, W31
	0x03E2F350 RET
	0x03E2F354 MOVZ W0, 0x1
	0x03E2F358 RET
	0x03E2F35C STP X30, X21, [X31 - 0x20]!
	0x03E2F360 STP X20, X19, [X31 + 0x10]
	0x03E2F364 ADRP X21, 0x5B9000
	0x03E2F368 ADRP X20, 0x2C7000
	0x03E2F36C LDRB W8, [X21 + 0x70F]
	0x03E2F370 LDR X20, [X20 + 0x920]
	0x03E2F374 MOV X19, X0
	0x03E2F378 TBNZ X8, 0x0, 0x3E2F390
	0x03E2F37C ADRP X0, 0x2C7000
	0x03E2F380 LDR X0, [X0 + 0x920]
	0x03E2F384 BL 0x1C16CF4
	0x03E2F388 MOVZ W8, 0x1
	0x03E2F38C STRB W8, [X21 + 0x70F]
	0x03E2F390 ADD X0, X19, 0x32
	0x03E2F394 MOV X1, X31
	0x03E2F398 BL 0x3C3E3A8
	0x03E2F39C MOV X0, X19
	0x03E2F3A0 BL 0x3E2F0DC
	0x03E2F3A4 LDR X8, [X20]
	0x03E2F3A8 MOV X20, X0
	0x03E2F3AC LDR W9, [X8 + 0xE0]
	0x03E2F3B0 CBNZ W9, 0x3E2F3BC
	0x03E2F3B4 MOV X0, X8
	0x03E2F3B8 BL 0x1C16DFC
	0x03E2F3BC MOV X0, X20
	0x03E2F3C0 BL 0x3E2F3D8
	0x03E2F3C4 MOV X0, X19
	0x03E2F3C8 LDP X20, X19, [X31 + 0x10]
	0x03E2F3CC MOV X1, X31
	0x03E2F3D0 LDP X30, X21, [X31], #0x20
	0x03E2F3D4 B 0x3E4BDC4
	0x03E2F3D8 SUB X31, X31, 0x70
	0x03E2F3DC STP X29, X30, [X31 + 0x10]
	0x03E2F3E0 STP X28, X27, [X31 + 0x20]
	0x03E2F3E4 STP X26, X25, [X31 + 0x30]
	0x03E2F3E8 STP X24, X23, [X31 + 0x40]
	0x03E2F3EC STP X22, X21, [X31 + 0x50]
	0x03E2F3F0 STP X20, X19, [X31 + 0x60]
	0x03E2F3F4 ADRP X20, 0x5B9000
	0x03E2F3F8 ADRP X25, 0x2C4000
	0x03E2F3FC LDRB W8, [X20 + 0x74E]
	0x03E2F400 LDR X25, [X25 + 0x598]
	0x03E2F404 MOV X19, X0
	0x03E2F408 TBNZ X8, 0x0, 0x3E2F498
	0x03E2F40C ADRP X0, 0x2EB000
	0x03E2F410 LDR X0, [X0 + 0x6E0]

ISIL:
	001 Move [X31-160], D15
	002 Move [X31-152], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+72], X30
	011 Move [X31+80], X28
	012 Move [X31+88], X27
	013 Move [X31+96], X26
	014 Move [X31+104], X25
	015 Move [X31+112], X24
	016 Move [X31+120], X23
	017 Move [X31+128], X22
	018 Move [X31+136], X21
	019 Move [X31+144], X20
	020 Move [X31+152], X19
	021 Subtract X31, X31, 656
	022 Move X21, 0x5BB000
	023 Move W8, [X21+1789]
	024 Move X20, X0
	025 Move [X31+104], S0
	026 Move [X31+112], S1
	027 Move [X31+112], X1
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {46}
	032 Move X0, 0x33D000
	033 Move X0, [X0+4064]
	034 Call 0x1C17CF4
	035 Move X0, 0x33D000
	036 Move X0, [X0+4056]
	037 Call 0x1C17CF4
	038 Move X0, 0x33D000
	039 Move X0, [X0+4024]
	040 Call 0x1C17CF4
	041 Move X0, 0x2F1000
	042 Move X0, [X0+2024]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X21+1789], W8
	046 Move X0, X20
	047 Call InputField.get_caretPositionInternal, X0
	048 Move W8, [X20+484]
	049 Subtract W8, W0, W8
	050 Move X0, X20
	051 NotImplemented "Instruction BIC not yet implemented."
	052 Call InputField.get_caretSelectPositionInternal, X0
	053 Move W9, [X20+484]
	054 Move W8, W0
	055 Move X0, [X20+264]
	056 Subtract W8, W8, W9
	057 NotImplemented "Instruction BIC not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 NotImplemented "Instruction CSEL not yet implemented."
	061 Move [X31+124], W9
	062 Compare X0, 0
	063 JumpIfEqual {527}
	064 Move X1, X31
	065 Call Text.get_cachedTextGenerator, X0
	066 Compare X0, 0
	067 JumpIfEqual {527}
	068 Move X1, X31
	069 Move X19, X0
	070 Call TextGenerator.get_lineCount, X0
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X22, 0x33D000
	073 Move X23, 0x2F1000
	074 Move X22, [X22+4024]
	075 Move X23, [X23+2024]
	076 Move W1, W25
	077 Move X2, X19
	078 Call InputField.DetermineCharacterLine, X0, X1, X2
	079 Move X8, [X22]
	080 Move W22, W0
	081 Move W9, [X8+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {86}
	084 Move X0, X8
	085 Call 0x1C17DFC
	086 Move X0, X19
	087 Move W1, W22
	088 Add X24, X31, 464
	089 Call InputField.GetLineEndPosition, X0, X1
	090 Move X8, [X23]
	091 Move W26, W0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {98}
	095 Move X0, X8
	096 Call 0x1C17DFC
	097 Move X8, [X23]
	098 Move X8, [X8+184]
	099 Move X23, 0x5AC000
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 Move V3, [X8+2]
	102 Move [X24+172], V0
	103 Move V2, [X8+96]
	104 Move V0, [X8+112]
	105 Move V1, [X8+5]
	106 Move W8, [X23+1935]
	107 Move [X31+608], V0
	108 Move [X31+616], V3
	109 Move [X31+576], V1
	110 Move [X31+584], V2
	111 Compare W8, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x2CE000
	114 Move X0, [X0+3848]
	115 Call 0x1C17CF4
	116 Move W8, 1
	117 Move [X23+1935], W8
	118 Move X8, 0x2CE000
	119 Move X8, [X8+3848]
	120 Move V0, [X20+364]
	121 Move V1, [X20+368]
	122 Move V2, [X20+372]
	123 Move X8, [X8]
	124 Move X0, X31
	125 Move X8, [X8+184]
	126 Move V3, [X8]
	127 Move [X31+100], S3
	128 Move V3, [X8+4]
	129 Move [X31+84], S3
	130 Move V3, [X20+376]
	131 Call 0x1E44664
	132 Move W8, [X31+124]
	133 Move [X31+88], X0
	134 NotImplemented "Instruction CMP not yet implemented."
	135 Move W8, [X31+124]
	136 Add X9, X31, 352
	137 Move X29, 0x33D000
	138 Move X23, 0x33D000
	139 Subtract W27, W8, 1
	140 Add X8, X31, 464
	141 Add X12, X8, 12
	142 Add X8, X8, 60
	143 Add X10, X31, 240
	144 Move X29, [X29+4064]
	145 Move X23, [X23+4056]
	146 Move [X31+56], X8
	147 Move [X31+64], X12
	148 Add X12, X9, 12
	149 Add X8, X9, 60
	150 Move X21, [X31+112]
	151 Move V9, [X31+84]
	152 Add X11, X31, 128
	153 Move [X31+40], X8
	154 Move [X31+48], X12
	155 Add X9, X10, 12
	156 Add X8, X10, 60
	157 Move [X31+24], X8
	158 Move [X31+32], X9
	159 Add X9, X11, 12
	160 Add X8, X11, 60
	161 Move [X31+8], X8
	162 Move [X31+16], X9
	163 Move W24, W25
	164 Move [X31+72], X20
	165 Move X0, X19
	166 Move X1, X31
	167 Call TextGenerator.get_characterCount, X0
	168 NotImplemented "Instruction CMP not yet implemented."
	169 NotImplemented "Instruction CMP not yet implemented."
	170 NotImplemented "Instruction CMP not yet implemented."
	171 Add W24, W24, 1
	172 Move X0, X19
	173 Move X1, X31
	174 Call TextGenerator.get_characters, X0
	175 Compare X0, 0
	176 JumpIfEqual {527}
	177 Move X8, [X0]
	178 Move X1, [X29]
	179 Move X26, X0
	180 NotImplemented "Instruction LDRH not yet implemented."
	181 Compare X9, 0
	182 JumpIfEqual {189}
	183 Move X10, [X8+176]
	184 Add X10, X10, 8
	185 NotImplemented "Instruction LDUR not yet implemented."
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Subtract X9, X9, 1
	188 Add X10, X10, 16
	189 Move X0, X26
	190 Move W2, W31
	191 Call 0x1C5D788
	192 NotImplemented "Instruction LDRSW not yet implemented."
	193 Add X8, X8, X9
	194 Add X0, X8, 312
	195 Move X8, [X0]
	196 Move X2, [X0+8]
	197 Move X0, X26
	198 Move W1, W25
	199 NotImplemented "Instruction BLR not yet implemented."
	200 Move X0, X19
	201 Move X1, X31
	202 Move V10, V0
	203 Call TextGenerator.get_characters, X0
	204 Compare X0, 0
	205 JumpIfEqual {527}
	206 Move X8, [X0]
	207 Move X1, [X29]
	208 Move X25, X0
	209 NotImplemented "Instruction LDRH not yet implemented."
	210 Compare X9, 0
	211 JumpIfEqual {218}
	212 Move X10, [X8+176]
	213 Add X10, X10, 8
	214 NotImplemented "Instruction LDUR not yet implemented."
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Subtract X9, X9, 1
	217 Add X10, X10, 16
	218 Move X0, X25
	219 Move W2, W31
	220 Call 0x1C5D788
	221 NotImplemented "Instruction LDRSW not yet implemented."
	222 Add X8, X8, X9
	223 Add X0, X8, 312
	224 Move X8, [X0]
	225 Move X2, [X0+8]
	226 Move X0, X25
	227 Move W1, W24
	228 NotImplemented "Instruction BLR not yet implemented."
	229 Move X0, [X20+264]
	230 Compare X0, 0
	231 JumpIfEqual {527}
	232 Move X1, X31
	233 Move V12, V0
	234 Move V13, V2
	235 Call Text.get_pixelsPerUnit, X0
	236 Move X0, X19
	237 Move X1, X31
	238 Move V11, V0
	239 Call TextGenerator.get_lines, X0
	240 Compare X0, 0
	241 JumpIfEqual {527}
	242 Move X8, [X0]
	243 Move X1, [X23]
	244 Move X25, X0
	245 NotImplemented "Instruction LDRH not yet implemented."
	246 Compare X9, 0
	247 JumpIfEqual {254}
	248 Move X10, [X8+176]
	249 Add X10, X10, 8
	250 NotImplemented "Instruction LDUR not yet implemented."
	251 NotImplemented "Instruction CMP not yet implemented."
	252 Subtract X9, X9, 1
	253 Add X10, X10, 16
	254 Move X0, X25
	255 Move W2, W31
	256 Call 0x1C5D788
	257 NotImplemented "Instruction LDRSW not yet implemented."
	258 Add X8, X8, X9
	259 Add X0, X8, 312
	260 Move X8, [X0]
	261 Move X2, [X0+8]
	262 Move X0, X25
	263 Move W1, W22
	264 NotImplemented "Instruction BLR not yet implemented."
	265 Move X0, [X20+264]
	266 Compare X0, 0
	267 JumpIfEqual {527}
	268 Move X25, X1
	269 Move X1, X31
	270 Call Text.get_pixelsPerUnit, X0
	271 Move X0, [X20+264]
	272 Compare X0, 0
	273 JumpIfEqual {527}
	274 Move X1, X31
	275 Move V14, V0
	276 Call Text.get_pixelsPerUnit, X0
	277 Move X0, X19
	278 Move X1, X31
	279 Move V15, V0
	280 Call TextGenerator.get_lines, X0
	281 Compare X0, 0
	282 JumpIfEqual {527}
	283 Move X8, [X0]
	284 Move X1, [X23]
	285 Move X26, X0
	286 NotImplemented "Instruction LDRH not yet implemented."
	287 Compare X9, 0
	288 JumpIfEqual {295}
	289 Move X10, [X8+176]
	290 Add X10, X10, 8
	291 NotImplemented "Instruction LDUR not yet implemented."
	292 NotImplemented "Instruction CMP not yet implemented."
	293 Subtract X9, X9, 1
	294 Add X10, X10, 16
	295 Move X0, X26
	296 Move W2, W31
	297 Call 0x1C5D788
	298 NotImplemented "Instruction LDRSW not yet implemented."
	299 Add X8, X8, X9
	300 Add X0, X8, 312
	301 Move X8, [X0]
	302 Move X2, [X0+8]
	303 Move X0, X26
	304 Move W1, W22
	305 NotImplemented "Instruction BLR not yet implemented."
	306 Move X8, [X20+264]
	307 Compare X8, 0
	308 JumpIfEqual {527}
	309 Move X26, X0
	310 Move X0, X8
	311 Move X1, X31
	312 Call Text.get_pixelsPerUnit, X0
	313 Move X0, [X20+264]
	314 Compare X0, 0
	315 JumpIfEqual {527}
	316 Move X1, X31
	317 Move V8, V0
	318 Call Graphic.get_rectTransform, X0
	319 Compare X0, 0
	320 JumpIfEqual {527}
	321 Add S0, S13, S12
	322 Move X1, X31
	323 NotImplemented "Instruction FDIV not yet implemented."
	324 Call RectTransform.get_rect, X0
	325 Add S0, S2, S0
	326 NotImplemented "Instruction FCMP not yet implemented."
	327 Move X0, [X20+264]
	328 Compare X0, 0
	329 JumpIfEqual {527}
	330 Move X1, X31
	331 Call Graphic.get_rectTransform, X0
	332 Compare X0, 0
	333 JumpIfEqual {527}
	334 Move X1, X31
	335 Call RectTransform.get_rect, X0
	336 NotImplemented "Instruction FCMP not yet implemented."
	337 Move X0, [X20+264]
	338 Compare X0, 0
	339 JumpIfEqual {527}
	340 Move X1, X31
	341 Call Graphic.get_rectTransform, X0
	342 Compare X0, 0
	343 JumpIfEqual {527}
	344 Move X1, X31
	345 Call RectTransform.get_rect, X0
	346 Add S12, S2, S0
	347 Compare X21, 0
	348 JumpIfEqual {527}
	349 Move S0, W25
	350 Move X8, X26
	351 ShiftRight X8, 32
	352 And X8, X8, 0x7FFFFFFF
	353 NotImplemented "Instruction FDIV not yet implemented."
	354 NotImplemented "Instruction FDIV not yet implemented."
	355 NotImplemented "Instruction SCVTF not yet implemented."
	356 NotImplemented "Instruction FDIV not yet implemented."
	357 Move X0, X21
	358 Move X1, X31
	359 Move X20, X19
	360 Move W19, W22
	361 Move X28, X29
	362 Move W29, W27
	363 Subtract S13, S11, S0
	364 Call VertexHelper.get_currentVertCount, X0
	365 Move S15, [X31+104]
	366 Move S14, [X31+108]
	367 Add X26, X31, 464
	368 Move V0, [X31+39]
	369 NotImplemented "Instruction LDUR not yet implemented."
	370 Move X8, [X31+64]
	371 Add S8, S15, S10
	372 Add S10, S14, S13
	373 Move [X31+472], W31
	374 Move [X31+464], S8
	375 Move [X31+468], S10
	376 Move [X8], V0
	377 Move V0, [X31+576]
	378 Move V2, [X31+592]
	379 Move [X8+12], V1
	380 Move V1, [X31+38]
	381 Move X22, [X31+88]
	382 Move V13, [X31+100]
	383 Move X8, [X31+56]
	384 Move W25, W0
	385 NotImplemented "Instruction MOVI not yet implemented."
	386 Add X1, X31, 464
	387 Move X0, X21
	388 Move X2, X31
	389 Move [X31+504], W22
	390 Move [X31+508], S13
	391 Move [X31+512], S9
	392 Move [X26+52], D3
	393 Move [X8+16], V2
	394 Move [X8+24], V1
	395 Move [X8], V0
	396 Call VertexHelper.AddVert, X0, X1
	397 NotImplemented "Instruction LDUR not yet implemented."
	398 Move V1, [X31+39]
	399 Move X8, [X31+48]
	400 Add S12, S15, S12
	401 Move [X31+360], W31
	402 Move [X31+352], S12
	403 Move [X31+356], S10
	404 Move [X8+12], V0
	405 Move V0, [X31+576]
	406 Move V2, [X31+592]
	407 Move [X8], V1
	408 Move V1, [X31+38]
	409 Move X8, [X31+40]
	410 Add X27, X31, 240
	411 NotImplemented "Instruction MOVI not yet implemented."
	412 Add X1, X31, 352
	413 Move X0, X21
	414 Move X2, X31
	415 Move [X31+392], W22
	416 Move [X31+396], S13
	417 Move [X31+400], S9
	418 Move [X27+164], D15
	419 Move [X8+16], V2
	420 Move [X8+24], V1
	421 Move [X8], V0
	422 Call VertexHelper.AddVert, X0, X1
	423 NotImplemented "Instruction LDUR not yet implemented."
	424 Move V1, [X31+39]
	425 Move X8, [X31+32]
	426 Add S10, S14, S11
	427 Move [X31+248], W31
	428 Move [X31+240], S12
	429 Move [X31+248], S10
	430 Move [X8+12], V0
	431 Move V0, [X31+576]
	432 Move V2, [X31+592]
	433 Move [X8], V1
	434 Move V1, [X31+38]
	435 Move X8, [X31+24]
	436 Add X1, X31, 240
	437 Move X0, X21
	438 Move X2, X31
	439 Move [X31+280], W22
	440 Move [X31+284], S13
	441 Move [X31+288], S9
	442 Move [X27+52], D15
	443 NotImplemented "Instruction MOVI not yet implemented."
	444 Move [X8+16], V2
	445 Move [X8+24], V1
	446 Move [X8], V0
	447 Call VertexHelper.AddVert, X0, X1
	448 NotImplemented "Instruction LDUR not yet implemented."
	449 Move V1, [X31+39]
	450 Move X8, [X31+16]
	451 Move [X31+128], S8
	452 Move [X31+136], S10
	453 Move [X31+136], W31
	454 Add X1, X31, 128
	455 Move [X8+12], V0
	456 Move V0, [X31+576]
	457 Move V2, [X31+592]
	458 Move [X8], V1
	459 Move V1, [X31+38]
	460 Move X8, [X31+8]
	461 Move X0, X21
	462 Move X2, X31
	463 Move [X31+168], W22
	464 Move [X31+172], S13
	465 Move [X31+180], S9
	466 Move [X31+180], D11
	467 Move [X8+16], V2
	468 Move [X8+24], V1
	469 Move [X8], V0
	470 Call VertexHelper.AddVert, X0, X1
	471 Add W26, W25, 2
	472 Add W2, W25, 1
	473 Move X0, X21
	474 Move W1, W25
	475 Move W3, W26
	476 Move X4, X31
	477 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	478 Add W2, W25, 3
	479 Move X0, X21
	480 Move W1, W26
	481 Move W3, W25
	482 Move X4, X31
	483 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	484 Move X8, 0x33C000
	485 Move X8, [X8+4024]
	486 Move X0, [X8]
	487 Move W8, [X0+224]
	488 Compare W8, 0
	489 JumpIfNotEqual {491}
	490 Call 0x1C17DFC
	491 Move W22, W19
	492 Add W22, W19, 1
	493 Move X0, X20
	494 Move W1, W22
	495 Add W24, W24, 1
	496 Move X19, X20
	497 Call InputField.GetLineEndPosition, X0, X1
	498 Move X20, [X31+72]
	499 Move W26, W0
	500 Move W25, W24
	501 Move W27, W29
	502 Move X29, X28
	503 Move W8, [X31+124]
	504 NotImplemented "Instruction CMP not yet implemented."
	505 Add X31, X31, 656
	506 Move X20, [X31+144]
	507 Move X19, [X31+152]
	508 Move X22, [X31+128]
	509 Move X21, [X31+136]
	510 Move X24, [X31+112]
	511 Move X23, [X31+120]
	512 Move X26, [X31+96]
	513 Move X25, [X31+104]
	514 Move X28, [X31+80]
	515 Move X27, [X31+88]
	516 Move X29, [X31+64]
	517 Move X30, [X31+72]
	518 Move D9, [X31+48]
	519 Move D8, [X31+56]
	520 Move D11, [X31+32]
	521 Move D10, [X31+40]
	522 Move D13, [X31+16]
	523 Move D12, [X31+24]
	524 Move D15, [X31+160]
	525 Move D14, [X31+168]
	526 Return 
	527 Call 0x1C17F20

Method: System.Char Validate(System.String text, System.Int32 pos, System.Char ch)

Disassembly:
	0x03E29F04 ADD X0, X8, 0x138
	0x03E29F08 LDP X8, X1, [X0]
	0x03E29F0C MOV X0, X20
	0x03E29F10 BLR X8
	0x03E29F14 ADD W20, W21, 0x1
	0x03E29F18 CMP W20, W0
	0x03E29F1C B.GE 0x3E29F7C
	0x03E29F20 MOV X0, X19
	0x03E29F24 MOV X1, X31
	0x03E29F28 BL 0x3CCF6DC
	0x03E29F2C CBZ X0, 0x3E29FBC
	0x03E29F30 ADRP X10, 0x341000
	0x03E29F34 LDR X8, [X0]
	0x03E29F38 LDR X10, [X10 + 0xFD8]
	0x03E29F3C MOV X19, X0
	0x03E29F40 LDRH W9, [X8 + 0x12E]
	0x03E29F44 LDR X1, [X10]
	0x03E29F48 CBZ X9, 0x3E29F6C
	0x03E29F4C LDR X10, [X8 + 0xB0]
	0x03E29F50 ADD X10, X10, 0x8
	0x03E29F54 LDUR X11, [X10 - 0x8]
	0x03E29F58 CMP X11, X1
	0x03E29F5C B.EQ 0x3E29F90
	0x03E29F60 SUBS X9, X9, 0x1
	0x03E29F64 ADD X10, X10, 0x10
	0x03E29F68 B.NE 0x3E29F54
	0x03E29F6C MOV X0, X19
	0x03E29F70 MOV W2, W31
	0x03E29F74 BL 0x1C5C788
	0x03E29F78 B 0x3E29F9C
	0x03E29F7C MOV X0, X19
	0x03E29F80 LDP X20, X19, [X31 + 0x10]
	0x03E29F84 MOV X1, X31
	0x03E29F88 LDP X30, X21, [X31], #0x20
	0x03E29F8C B 0x3CCEAB4
	0x03E29F90 LDRSW X9, [X10]
	0x03E29F94 ADD X8, X8, X9, 0x4, LSL
	0x03E29F98 ADD X0, X8, 0x138
	0x03E29F9C LDP X8, X2, [X0]
	0x03E29FA0 MOV X0, X19
	0x03E29FA4 MOV W1, W20
	0x03E29FA8 BLR X8
	0x03E29FAC LDP X20, X19, [X31 + 0x10]
	0x03E29FB0 SUB W0, W0, 0x1
	0x03E29FB4 LDP X30, X21, [X31], #0x20
	0x03E29FB8 RET
	0x03E29FBC BL 0x1C16F20
	0x03E29FC0 STP X30, X21, [X31 - 0x20]!
	0x03E29FC4 STP X20, X19, [X31 + 0x10]
	0x03E29FC8 ADRP X21, 0x5BF000
	0x03E29FCC LDRB W8, [X21 + 0x6E2]
	0x03E29FD0 MOV X20, X1
	0x03E29FD4 MOV X19, X0
	0x03E29FD8 TBNZ X8, 0x0, 0x3E29FF0
	0x03E29FDC ADRP X0, 0x2CA000
	0x03E29FE0 LDR X0, [X0 + 0x598]
	0x03E29FE4 BL 0x1C16CF4
	0x03E29FE8 MOVZ W8, 0x1
	0x03E29FEC STRB W8, [X21 + 0x6E2]
	0x03E29FF0 LDR X8, [X19]
	0x03E29FF4 MOV X0, X19
	0x03E29FF8 LDP X9, X1, [X8 + 0x1C8]
	0x03E29FFC BLR X9
	0x03E2A000 TBZ X0, 0x0, 0x3E2A074
	0x03E2A004 LDR X8, [X19]
	0x03E2A008 MOV X0, X19
	0x03E2A00C LDR X9, [X8 + 0x2B8]
	0x03E2A010 LDR X1, [X8 + 0x2C0]
	0x03E2A014 BLR X9
	0x03E2A018 TBZ X0, 0x0, 0x3E2A074
	0x03E2A01C CBZ X20, 0x3E2A094
	0x03E2A020 LDR W8, [X20 + 0x148]
	0x03E2A024 CBNZ W8, 0x3E2A074
	0x03E2A028 ADRP X8, 0x2C9000
	0x03E2A02C LDR X8, [X8 + 0x598]
	0x03E2A030 LDR X20, [X19 + 0x108]
	0x03E2A034 LDR X0, [X8]
	0x03E2A038 LDR W8, [X0 + 0xE0]
	0x03E2A03C CBNZ W8, 0x3E2A044
	0x03E2A040 BL 0x1C16DFC
	0x03E2A044 MOV X0, X20
	0x03E2A048 MOV X1, X31
	0x03E2A04C MOV X2, X31
	0x03E2A050 BL 0x3C354F8
	0x03E2A054 TBZ X0, 0x0, 0x3E2A074
	0x03E2A058 MOV X0, X31
	0x03E2A05C BL 0x3C3CC00
	0x03E2A060 TBZ X0, 0x0, 0x3E2A06C
	0x03E2A064 LDRB W8, [X19 + 0x210]
	0x03E2A068 CBZ W8, 0x3E2A084
	0x03E2A06C MOVZ W0, 0x1
	0x03E2A070 B 0x3E2A078
	0x03E2A074 MOV W0, W31
	0x03E2A078 LDP X20, X19, [X31 + 0x10]
	0x03E2A07C LDP X30, X21, [X31], #0x20
	0x03E2A080 RET
	0x03E2A084 LDRB W8, [X19 + 0x12C]
	0x03E2A088 CMP W8, 0x0
	0x03E2A08C CSET W0, NE
	0x03E2A090 B 0x3E2A078
	0x03E2A094 BL 0x1C16F20
	0x03E2A098 STP X30, X19, [X31 - 0x10]!
	0x03E2A09C MOV X19, X0
	0x03E2A0A0 BL 0x3E29FC0
	0x03E2A0A4 TBZ X0, 0x0, 0x3E2A0B0
	0x03E2A0A8 MOVZ W8, 0x1
	0x03E2A0AC STRB W8, [X19 + 0x1D2]
	0x03E2A0B0 LDP X30, X19, [X31], #0x10
	0x03E2A0B4 RET
	0x03E2A0B8 SUB X31, X31, 0x50
	0x03E2A0BC STP D9, D8, [X31 + 0x10]
	0x03E2A0C0 STR X30, [X31 + 0x20]
	0x03E2A0C4 STP X22, X21, [X31 + 0x30]
	0x03E2A0C8 STP X20, X19, [X31 + 0x40]
	0x03E2A0CC ADRP X21, 0x5BE000
	0x03E2A0D0 LDRB W8, [X21 + 0x6E3]
	0x03E2A0D4 MOV X19, X1
	0x03E2A0D8 MOV X20, X0
	0x03E2A0DC TBNZ X8, 0x0, 0x3E2A0F4
	0x03E2A0E0 ADRP X0, 0x31F000
	0x03E2A0E4 LDR X0, [X0 + 0x6B8]
	0x03E2A0E8 BL 0x1C16CF4
	0x03E2A0EC MOVZ W8, 0x1
	0x03E2A0F0 STRB W8, [X21 + 0x6E3]
	0x03E2A0F4 MOV X0, X20
	0x03E2A0F8 MOV X1, X19
	0x03E2A0FC STR X31, [X31 + 0x28]
	0x03E2A100 STR X31, [X31 + 0x8]
	0x03E2A104 BL 0x3E29FC0
	0x03E2A108 TBZ X0, 0x0, 0x3E2A290
	0x03E2A10C ADRP X21, 0x5AF000
	0x03E2A110 LDRB W8, [X21 + 0x78F]
	0x03E2A114 CBNZ W8, 0x3E2A12C
	0x03E2A118 ADRP X0, 0x2D1000
	0x03E2A11C LDR X0, [X0 + 0xF08]
	0x03E2A120 BL 0x1C16CF4
	0x03E2A124 MOVZ W8, 0x1
	0x03E2A128 STRB W8, [X21 + 0x78F]
	0x03E2A12C ADRP X8, 0x2D1000
	0x03E2A130 LDR X8, [X8 + 0xF08]
	0x03E2A134 ADD X1, X31, 0x28
	0x03E2A138 MOV X0, X19
	0x03E2A13C MOV X2, X31
	0x03E2A140 LDR X8, [X8]
	0x03E2A144 LDR X8, [X8 + 0xB8]
	0x03E2A148 LDR V0, [X8]
	0x03E2A14C STR D0, [X31 + 0x28]
	0x03E2A150 BL 0x3E389E8
	0x03E2A154 TBZ X0, 0x0, 0x3E2A290
	0x03E2A158 LDR X0, [X20 + 0x108]
	0x03E2A15C CBZ X0, 0x3E2A2A8
	0x03E2A160 MOV X1, X31
	0x03E2A164 BL 0x3CDB488
	0x03E2A168 CBZ X19, 0x3E2A2A8
	0x03E2A16C LDP S8, S9, [X31 + 0x28]
	0x03E2A170 MOV X21, X0
	0x03E2A174 MOV X0, X19
	0x03E2A178 MOV X1, X31
	0x03E2A17C BL 0x3E4F314
	0x03E2A180 ADRP X8, 0x31F000
	0x03E2A184 LDR X8, [X8 + 0x6B8]
	0x03E2A188 MOV X22, X0
	0x03E2A18C LDR X8, [X8]
	0x03E2A190 LDR W9, [X8 + 0xE0]
	0x03E2A194 CBNZ W9, 0x3E2A1A0
	0x03E2A198 MOV X0, X8
	0x03E2A19C BL 0x1C16DFC
	0x03E2A1A0 ADD X2, X31, 0x8
	0x03E2A1A4 MOV X0, X21
	0x03E2A1A8 MOV V0.16B, V8.16B
	0x03E2A1AC MOV V1.16B, V9.16B
	0x03E2A1B0 MOV X1, X22
	0x03E2A1B4 MOV X3, X31
	0x03E2A1B8 BL 0x3E23A98
	0x03E2A1BC LDP S0, S1, [X31 + 0x8]
	0x03E2A1C0 MOV X0, X20
	0x03E2A1C4 BL 0x3E29BC8
	0x03E2A1C8 LDR W8, [X20 + 0x1E4]
	0x03E2A1CC ADDS W8, W8, W0
	0x03E2A1D0 STR W8, [X20 + 0x198]
	0x03E2A1D4 B.MI 0x3E2A1F0
	0x03E2A1D8 LDR X9, [X20 + 0x180]
	0x03E2A1DC CBZ X9, 0x3E2A2A8
	0x03E2A1E0 LDR W9, [X9 + 0x10]
	0x03E2A1E4 CMP W9, W8
	0x03E2A1E8 B.LT 0x3E2A1F4
	0x03E2A1EC B 0x3E2A1F8
	0x03E2A1F0 MOV W9, W31
	0x03E2A1F4 STR W9, [X20 + 0x198]
	0x03E2A1F8 MOV X0, X20
	0x03E2A1FC BL 0x3E263C8
	0x03E2A200 LDR X0, [X20 + 0x108]
	0x03E2A204 CBZ X0, 0x3E2A2A8
	0x03E2A208 MOV X1, X31
	0x03E2A20C BL 0x3CDB488
	0x03E2A210 LDR V8, [X19 + 0x104]
	0x03E2A214 LDR V9, [X19 + 0x108]
	0x03E2A218 MOV X21, X0
	0x03E2A21C MOV X0, X19
	0x03E2A220 MOV X1, X31
	0x03E2A224 BL 0x3E4F314
	0x03E2A228 MOV X1, X0
	0x03E2A22C MOV X0, X21
	0x03E2A230 MOV V0.16B, V8.16B
	0x03E2A234 MOV V1.16B, V9.16B
	0x03E2A238 MOV X2, X31
	0x03E2A23C BL 0x3E2333C
	0x03E2A240 ORN W8, W31, W0, 0x0
	0x03E2A244 AND W8, W8, 0x1
	0x03E2A248 STRB W8, [X20 + 0x1D3]
	0x03E2A24C TBNZ X0, 0x0, 0x3E2A278
	0x03E2A250 LDR X8, [X20 + 0x1F0]
	0x03E2A254 CBNZ X8, 0x3E2A278
	0x03E2A258 MOV X0, X20
	0x03E2A25C MOV X1, X19
	0x03E2A260 BL 0x3E2A2AC
	0x03E2A264 MOV X1, X0
	0x03E2A268 MOV X0, X20
	0x03E2A26C MOV X2, X31
	0x03E2A270 BL 0x3C366FC
	0x03E2A274 STR X0, [X20 + 0x1F0]
	0x03E2A278 MOV X0, X20
	0x03E2A27C BL 0x3E27E68
	0x03E2A280 LDR X8, [X19]
	0x03E2A284 MOV X0, X19
	0x03E2A288 LDP X9, X1, [X8 + 0x188]
	0x03E2A28C BLR X9
	0x03E2A290 LDP X20, X19, [X31 + 0x40]
	0x03E2A294 LDP X22, X21, [X31 + 0x30]
	0x03E2A298 LDR X30, [X31 + 0x20]
	0x03E2A29C LDP D9, D8, [X31 + 0x10]
	0x03E2A2A0 ADD X31, X31, 0x50
	0x03E2A2A4 RET
	0x03E2A2A8 BL 0x1C16F20
	0x03E2A2AC STR X30, [X31 - 0x30]!
	0x03E2A2B0 STP X22, X21, [X31 + 0x10]
	0x03E2A2B4 STP X20, X19, [X31 + 0x20]
	0x03E2A2B8 ADRP X21, 0x5BE000
	0x03E2A2BC ADRP X22, 0x340000
	0x03E2A2C0 LDRB W8, [X21 + 0x6E4]
	0x03E2A2C4 LDR X22, [X22 + 0xFF0]
	0x03E2A2C8 MOV X19, X1
	0x03E2A2CC MOV X20, X0
	0x03E2A2D0 TBNZ X8, 0x0, 0x3E2A2E8
	0x03E2A2D4 ADRP X0, 0x340000
	0x03E2A2D8 LDR X0, [X0 + 0xFF0]
	0x03E2A2DC BL 0x1C16CF4
	0x03E2A2E0 MOVZ W8, 0x1
	0x03E2A2E4 STRB W8, [X21 + 0x6E4]
	0x03E2A2E8 LDR X0, [X22]
	0x03E2A2EC BL 0x1C16F10
	0x03E2A2F0 MOV X1, X31
	0x03E2A2F4 MOV X21, X0
	0x03E2A2F8 BL 0x33BDD8C
	0x03E2A2FC STR W31, [X21 + 0x10]
	0x03E2A300 STP X19, X20, [X21 + 0x20]
	0x03E2A304 MOV X0, X21
	0x03E2A308 LDP X20, X19, [X31 + 0x20]
	0x03E2A30C LDP X22, X21, [X31 + 0x10]
	0x03E2A310 LDR X30, [X31], #0x30
	0x03E2A314 RET
	0x03E2A318 STR X30, [X31 - 0x20]!
	0x03E2A31C STP X20, X19, [X31 + 0x10]
	0x03E2A320 MOV W19, W1
	0x03E2A324 MOV X1, X31
	0x03E2A328 MOV X20, X0
	0x03E2A32C BL 0x33BDD8C
	0x03E2A330 STR W19, [X20 + 0x10]
	0x03E2A334 LDP X20, X19, [X31 + 0x10]
	0x03E2A338 LDR X30, [X31], #0x20
	0x03E2A33C RET
	0x03E2A340 STP X30, X19, [X31 - 0x10]!
	0x03E2A344 MOV X19, X0
	0x03E2A348 BL 0x3E29FC0
	0x03E2A34C TBZ X0, 0x0, 0x3E2A354
	0x03E2A350 STRB W31, [X19 + 0x1D2]
	0x03E2A354 LDP X30, X19, [X31], #0x10
	0x03E2A358 RET
	0x03E2A35C STP D9, D8, [X31 - 0x40]!
	0x03E2A360 STR X30, [X31 + 0x10]
	0x03E2A364 STP X22, X21, [X31 + 0x20]
	0x03E2A368 STP X20, X19, [X31 + 0x30]
	0x03E2A36C ADRP X21, 0x5BE000
	0x03E2A370 LDRB W8, [X21 + 0x6E5]
	0x03E2A374 MOV X19, X1
	0x03E2A378 MOV X20, X0
	0x03E2A37C TBNZ X8, 0x0, 0x3E2A3A0
	0x03E2A380 ADRP X0, 0x2F0000
	0x03E2A384 LDR X0, [X0 + 0xDF8]
	0x03E2A388 BL 0x1C16CF4
	0x03E2A38C ADRP X0, 0x31F000
	0x03E2A390 LDR X0, [X0 + 0x6B8]
	0x03E2A394 BL 0x1C16CF4
	0x03E2A398 MOVZ W8, 0x1
	0x03E2A39C STRB W8, [X21 + 0x6E5]
	0x03E2A3A0 MOV X0, X20
	0x03E2A3A4 MOV X1, X19
	0x03E2A3A8 STR X31, [X31 + 0x18]
	0x03E2A3AC BL 0x3E29FC0
	0x03E2A3B0 TBZ X0, 0x0, 0x3E2A504
	0x03E2A3B4 ADRP X8, 0x2F0000
	0x03E2A3B8 LDR X8, [X8 + 0xDF8]
	0x03E2A3BC LDR X0, [X8]
	0x03E2A3C0 LDR W8, [X0 + 0xE0]
	0x03E2A3C4 CBNZ W8, 0x3E2A3CC
	0x03E2A3C8 BL 0x1C16DFC
	0x03E2A3CC MOV X0, X31
	0x03E2A3D0 BL 0x3E4FF90
	0x03E2A3D4 MOV X21, X0
	0x03E2A3D8 MOV X0, X20
	0x03E2A3DC MOV X1, X31
	0x03E2A3E0 BL 0x3C32ECC
	0x03E2A3E4 CBZ X21, 0x3E2A548
	0x03E2A3E8 MOV X1, X0
	0x03E2A3EC MOV X0, X21
	0x03E2A3F0 MOV X2, X19
	0x03E2A3F4 MOV X3, X31
	0x03E2A3F8 BL 0x3E4EC58
	0x03E2A3FC LDRB W21, [X20 + 0x1D0]
	0x03E2A400 MOV X0, X20
	0x03E2A404 MOV X1, X19
	0x03E2A408 MOV X2, X31
	0x03E2A40C BL 0x3E3C4B8
	0x03E2A410 MOV X0, X31
	0x03E2A414 BL 0x3C3CC00
	0x03E2A418 TBZ X0, 0x0, 0x3E2A424
	0x03E2A41C LDRB W8, [X20 + 0x210]
	0x03E2A420 CBZ W8, 0x3E2A518
	0x03E2A424 CBZ W21, 0x3E2A4E0
	0x03E2A428 LDR X0, [X20 + 0x108]
	0x03E2A42C CBZ X0, 0x3E2A548
	0x03E2A430 MOV X1, X31
	0x03E2A434 BL 0x3CDB488
	0x03E2A438 CBZ X19, 0x3E2A548
	0x03E2A43C LDP S8, S9, [X19 + 0xE4]
	0x03E2A440 MOV X21, X0
	0x03E2A444 MOV X0, X19
	0x03E2A448 MOV X1, X31
	0x03E2A44C BL 0x3E4F314
	0x03E2A450 ADRP X8, 0x31F000
	0x03E2A454 LDR X8, [X8 + 0x6B8]
	0x03E2A458 MOV X22, X0
	0x03E2A45C LDR X8, [X8]
	0x03E2A460 LDR W9, [X8 + 0xE0]
	0x03E2A464 CBNZ W9, 0x3E2A470
	0x03E2A468 MOV X0, X8
	0x03E2A46C BL 0x1C16DFC
	0x03E2A470 ADD X2, X31, 0x18
	0x03E2A474 MOV X0, X21
	0x03E2A478 MOV V0.16B, V8.16B
	0x03E2A47C MOV V1.16B, V9.16B
	0x03E2A480 MOV X1, X22
	0x03E2A484 MOV X3, X31
	0x03E2A488 BL 0x3E23A98
	0x03E2A48C LDP S0, S1, [X31 + 0x18]
	0x03E2A490 MOV X0, X20
	0x03E2A494 BL 0x3E29BC8
	0x03E2A498 LDR W8, [X20 + 0x1E4]
	0x03E2A49C ADD X9, X20, 0x194
	0x03E2A4A0 ADDS W8, W8, W0
	0x03E2A4A4 STR W8, [X20 + 0x194]
	0x03E2A4A8 B.MI 0x3E2A4DC
	0x03E2A4AC LDR X10, [X20 + 0x180]
	0x03E2A4B0 CBZ X10, 0x3E2A548
	0x03E2A4B4 LDR W11, [X10 + 0x10]
	0x03E2A4B8 CMP W11, W8
	0x03E2A4BC B.GE 0x3E2A4C4
	0x03E2A4C0 STR W11, [X9]
	0x03E2A4C4 STR W8, [X20 + 0x198]
	0x03E2A4C8 LDR W9, [X10 + 0x10]
	0x03E2A4CC CMP W9, W8
	0x03E2A4D0 CSEL W8, W9, W8, LT
	0x03E2A4D4 STR W8, [X20 + 0x198]
	0x03E2A4D8 B 0x3E2A4E0
	0x03E2A4DC STR X31, [X9]
	0x03E2A4E0 MOV X0, X20
	0x03E2A4E4 BL 0x3E25E74
	0x03E2A4E8 MOV X0, X20
	0x03E2A4EC BL 0x3E27E68
	0x03E2A4F0 CBZ X19, 0x3E2A548
	0x03E2A4F4 LDR X8, [X19]
	0x03E2A4F8 MOV X0, X19
	0x03E2A4FC LDP X9, X1, [X8 + 0x188]
	0x03E2A500 BLR X9
	0x03E2A504 LDP X20, X19, [X31 + 0x30]
	0x03E2A508 LDP X22, X21, [X31 + 0x20]
	0x03E2A50C LDR X30, [X31 + 0x10]
	0x03E2A510 LDP D9, D8, [X31], #0x40
	0x03E2A514 RET
	0x03E2A518 LDR X0, [X20 + 0x100]
	0x03E2A51C CBZ X0, 0x3E2A52C
	0x03E2A520 MOV X1, X31
	0x03E2A524 BL 0x3C3CFD8
	0x03E2A528 TBNZ X0, 0x0, 0x3E2A424
	0x03E2A52C LDR X8, [X20]
	0x03E2A530 MOV X0, X20
	0x03E2A534 MOV X1, X19
	0x03E2A538 LDR X9, [X8 + 0x378]
	0x03E2A53C LDR X2, [X8 + 0x380]
	0x03E2A540 BLR X9
	0x03E2A544 B 0x3E2A504
	0x03E2A548 BL 0x1C16F20
	0x03E2A54C STP X30, X25, [X31 - 0x40]!
	0x03E2A550 STP X24, X23, [X31 + 0x10]
	0x03E2A554 STP X22, X21, [X31 + 0x20]
	0x03E2A558 STP X20, X19, [X31 + 0x30]
	0x03E2A55C ADRP X21, 0x5BE000
	0x03E2A560 LDRB W8, [X21 + 0x6E6]
	0x03E2A564 MOV X20, X1
	0x03E2A568 MOV X19, X0
	0x03E2A56C TBNZ X8, 0x0, 0x3E2A590
	0x03E2A570 ADRP X0, 0x340000
	0x03E2A574 LDR X0, [X0 + 0xFB8]
	0x03E2A578 BL 0x1C16CF4
	0x03E2A57C ADRP X0, 0x2C9000
	0x03E2A580 LDR X0, [X0 + 0x988]
	0x03E2A584 BL 0x1C16CF4
	0x03E2A588 MOVZ W8, 0x1
	0x03E2A58C STRB W8, [X21 + 0x6E6]
	0x03E2A590 CBZ X20, 0x3E2A94C
	0x03E2A594 MOV X0, X20
	0x03E2A598 MOV X1, X31
	0x03E2A59C BL 0x3C62EF0
	0x03E2A5A0 MOV W21, W0
	0x03E2A5A4 MOV X0, X31
	0x03E2A5A8 BL 0x3C3B89C
	0x03E2A5AC CMP W0, 0x1
	0x03E2A5B0 MOVZ W8, 0x2
	0x03E2A5B4 MOVZ W9, 0x8
	0x03E2A5B8 CSEL W8, W9, W8, EQ
	0x03E2A5BC ANDS W23, W8, W21, 0x0
	0x03E2A5C0 AND W10, W21, 0x4
	0x03E2A5C4 ORR W8, W8, 0x4
	0x03E2A5C8 CSET W9, EQ
	0x03E2A5CC ANDS W11, W21, 0x1
	0x03E2A5D0 CSET W24, EQ
	0x03E2A5D4 ORR W9, W9, W10, 0x2
	0x03E2A5D8 ANDS W31, W8, W21, 0x0
	0x03E2A5DC MOV X0, X20
	0x03E2A5E0 MOV X1, X31
	0x03E2A5E4 ORR W22, W11, W9, 0x0
	0x03E2A5E8 CSET W25, NE
	0x03E2A5EC BL 0x3C63170
	0x03E2A5F0 CMP W0, 0x61
	0x03E2A5F4 B.LE 0x3E2A638
	0x03E2A5F8 CMP W0, 0x76
	0x03E2A5FC B.LE 0x3E2A67C
	0x03E2A600 SUB W8, W0, 0x10F
	0x03E2A604 CMP W8, 0x8

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0x5C0000
	011 Move W8, [X23+1790]
	012 Move W19, W3
	013 Move W21, W2
	014 Move X20, X1
	015 Move X22, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {34}
	020 Move X0, 0x2D4000
	021 Move X0, [X0+2264]
	022 Call 0x1C17CF4
	023 Move X0, 0x2CD000
	024 Move X0, [X0+368]
	025 Call 0x1C17CF4
	026 Move X0, 0x2D3000
	027 Move X0, [X0+2480]
	028 Call 0x1C17CF4
	029 Move X0, 0x331000
	030 Move X0, [X0+368]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X23+1790], W8
	034 Move W8, [X22+304]
	035 Compare W8, 0
	036 JumpIfEqual {432}
	037 Move X0, X22
	038 Move X1, X31
	039 Call Behaviour.get_enabled, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {432}
	044 Move W8, [X22+304]
	045 Subtract W8, W8, 1
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X9, -53018624
	048 Add X9, X9, 1531
	049 NotImplemented "Instruction ADR not yet implemented."
	050 Move W11, [X9]
	051 Add X10, X10, X11
	052 CallNoReturn X10
	053 Compare W21, 0
	054 JumpIfEqual {138}
	055 Compare X20, 0
	056 JumpIfEqual {443}
	057 Move W23, W31
	058 And W8, W19, 0xFFFF
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Subtract W8, W19, 48
	061 And W8, W8, 0xFFFF
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X23, 0x2CD000
	064 Move X23, [X23+368]
	065 Move X0, [X23]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move W0, W19
	071 Move X1, X31
	072 Call Char.IsLetter, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {201}
	077 Move X0, [X23]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move W0, W19
	083 Move X1, X31
	084 Call Char.IsLower, X0
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {319}
	089 Compare W21, 0
	090 JumpIfEqual {106}
	091 Compare X20, 0
	092 JumpIfEqual {443}
	093 Subtract W22, W21, 1
	094 Move X0, X20
	095 Move W1, W22
	096 Move X2, X31
	097 Call String.get_Chars, X0, X1
	098 And W8, W0, 0xFFFF
	099 NotImplemented "Instruction CMP not yet implemented."
	100 Move X0, X20
	101 Move W1, W22
	102 Move X2, X31
	103 Call String.get_Chars, X0, X1
	104 And W8, W0, 0xFFFF
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move X0, [X23]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1C17DFC
	111 Move W0, W19
	112 Move X20, [X31+64]
	113 Move X19, [X31+72]
	114 Move X22, [X31+48]
	115 Move X21, [X31+56]
	116 Move X24, [X31+32]
	117 Move X23, [X31+40]
	118 Move X26, [X31+16]
	119 Move X25, [X31+24]
	120 Move X1, X31
	121 Move X30, [X31+80]
	122 Call Char.ToUpper, X0
	123 Return X0
	124 And W8, W19, 0xFFFF
	125 NotImplemented "Instruction CMP not yet implemented."
	126 NotImplemented "Instruction CMP not yet implemented."
	127 And W8, W19, 0xFFFF
	128 NotImplemented "Instruction CMP not yet implemented."
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Compare X20, 0
	131 JumpIfEqual {443}
	132 Move W1, 64
	133 Move X0, X20
	134 Move X2, X31
	135 Call String.IndexOf, X0, X1
	136 Add W31, W0, 1
	137 Move W19, 64
	138 Compare X20, 0
	139 JumpIfEqual {443}
	140 Move W8, [X20+16]
	141 NotImplemented "Instruction CMP not yet implemented."
	142 Move X0, X20
	143 Move W1, W31
	144 Move X2, X31
	145 Call String.get_Chars, X0, X1
	146 And W8, W0, 0xFFFF
	147 NotImplemented "Instruction CMP not yet implemented."
	148 NotImplemented "Instruction CSET not yet implemented."
	149 Move W8, [X20+16]
	150 NotImplemented "Instruction CMP not yet implemented."
	151 NotImplemented "Instruction CSEL not yet implemented."
	152 Move X0, X20
	153 Move W1, W31
	154 Move X2, X31
	155 Call String.get_Chars, X0, X1
	156 And W8, W0, 0xFFFF
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Move W24, W31
	159 NotImplemented "Instruction CSEL not yet implemented."
	160 Move X0, X22
	161 Call InputField.get_caretPositionInternal, X0
	162 Move W23, W26
	163 Compare W0, 0
	164 JumpIfEqual {393}
	165 Move X0, X22
	166 Call InputField.get_caretSelectPositionInternal, X0
	167 Compare W0, 0
	168 JumpIfEqual {398}
	169 Move W24, W31
	170 Move X0, X22
	171 Call InputField.get_caretPositionInternal, X0
	172 Compare W0, 0
	173 JumpIfEqual {178}
	174 Move X0, X22
	175 Call InputField.get_caretSelectPositionInternal, X0
	176 NotImplemented "Instruction CMP not yet implemented."
	177 NotImplemented "Instruction CSET not yet implemented."
	178 Move W8, 1
	179 NotImplemented "Instruction CMP not yet implemented."
	180 NotImplemented "Instruction CSET not yet implemented."
	181 Or W9, W24, W9
	182 Compare W9, 0
	183 JumpIfEqual {431}
	184 Subtract W9, W19, 48
	185 And W9, W9, 0xFFFF
	186 NotImplemented "Instruction CMP not yet implemented."
	187 And W9, W19, 0xFFFF
	188 NotImplemented "Instruction CMP not yet implemented."
	189 NotImplemented "Instruction CMP not yet implemented."
	190 NotImplemented "Instruction CMP not yet implemented."
	191 NotImplemented "Instruction CMP not yet implemented."
	192 NotImplemented "Instruction CSET not yet implemented."
	193 Or W8, W8, W9
	194 Compare W8, 0
	195 JumpIfEqual {431}
	196 Move W19, 45
	197 NotImplemented "Instruction CMP not yet implemented."
	198 Subtract W8, W19, 97
	199 And W8, W8, 0xFFFF
	200 NotImplemented "Instruction CMP not yet implemented."
	201 And W8, W19, 0xFFFF
	202 NotImplemented "Instruction CMP not yet implemented."
	203 NotImplemented "Instruction CMP not yet implemented."
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Compare X20, 0
	206 JumpIfEqual {443}
	207 Move X8, 0x2D2000
	208 Move X8, [X8+2480]
	209 Move X0, X20
	210 Move X2, X31
	211 Move X1, [X8]
	212 Call String.Contains, X0, X1
	213 Move TEMP, X0
	214 And TEMP, TEMP, 1
	215 Compare TEMP, 1
	216 JumpIfEqual {431}
	217 Subtract W19, W21, 1
	218 Move X0, X20
	219 Move W1, W19
	220 Move X2, X31
	221 Call String.get_Chars, X0, X1
	222 And W8, W0, 0xFFFF
	223 NotImplemented "Instruction CMP not yet implemented."
	224 Move X0, X20
	225 Move W1, W19
	226 Move X2, X31
	227 Call String.get_Chars, X0, X1
	228 And W8, W0, 0xFFFF
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move X0, X20
	231 Move W1, W19
	232 Move X2, X31
	233 Call String.get_Chars, X0, X1
	234 And W8, W0, 0xFFFF
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Move W8, [X20+16]
	237 NotImplemented "Instruction CMP not yet implemented."
	238 Move X0, X20
	239 Move W1, W21
	240 Move X2, X31
	241 Call String.get_Chars, X0, X1
	242 And W8, W0, 0xFFFF
	243 NotImplemented "Instruction CMP not yet implemented."
	244 Move X0, X20
	245 Move W1, W21
	246 Move X2, X31
	247 Call String.get_Chars, X0, X1
	248 And W8, W0, 0xFFFF
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Move X0, X20
	251 Move W1, W21
	252 Move X2, X31
	253 Call String.get_Chars, X0, X1
	254 And W8, W0, 0xFFFF
	255 NotImplemented "Instruction CMP not yet implemented."
	256 Move W19, 39
	257 NotImplemented "Instruction CMP not yet implemented."
	258 Subtract W8, W19, 97
	259 And W8, W8, 0xFFFF
	260 NotImplemented "Instruction CMP not yet implemented."
	261 Move X8, 0x330000
	262 Move X8, [X8+368]
	263 Move X0, [X8]
	264 Compare X0, 0
	265 JumpIfEqual {443}
	266 Move W1, W19
	267 Move X2, X31
	268 Call String.IndexOf, X0, X1
	269 Add W31, W0, 1
	270 And W8, W19, 0xFFFF
	271 NotImplemented "Instruction CMP not yet implemented."
	272 Compare X20, 0
	273 JumpIfEqual {443}
	274 Move W8, [X20+16]
	275 Subtract W9, W8, 1
	276 NotImplemented "Instruction CMP not yet implemented."
	277 NotImplemented "Instruction CSEL not yet implemented."
	278 NotImplemented "Instruction CMP not yet implemented."
	279 NotImplemented "Instruction CSEL not yet implemented."
	280 Move X0, X20
	281 Move X2, X31
	282 Call String.get_Chars, X0, X1
	283 Move W8, [X20+16]
	284 Move W19, W0
	285 Subtract W9, W8, 1
	286 Add W10, W21, 1
	287 NotImplemented "Instruction CMP not yet implemented."
	288 NotImplemented "Instruction CSINC not yet implemented."
	289 NotImplemented "Instruction CMP not yet implemented."
	290 NotImplemented "Instruction CSEL not yet implemented."
	291 Move X0, X20
	292 Move X2, X31
	293 Call String.get_Chars, X0, X1
	294 And W8, W0, 0xFFFF
	295 NotImplemented "Instruction CMP not yet implemented."
	296 NotImplemented "Instruction CSET not yet implemented."
	297 Move W8, [X22+304]
	298 NotImplemented "Instruction CMP not yet implemented."
	299 Move X8, 0x2D3000
	300 Move X8, [X8+2264]
	301 Move W1, 2
	302 Move X0, [X8]
	303 Call 0x1C17D6C
	304 Compare X0, 0
	305 JumpIfEqual {443}
	306 Move W8, [X0+24]
	307 Move X1, X0
	308 Compare W8, 0
	309 JumpIfEqual {444}
	310 Move W9, 46
	311 NotImplemented "Instruction CMP not yet implemented."
	312 NotImplemented "Instruction STRH not yet implemented."
	313 Move W8, 44
	314 Move X0, X20
	315 Move X2, X31
	316 NotImplemented "Instruction STRH not yet implemented."
	317 Call String.IndexOfAny, X0, X1
	318 Add W31, W0, 1
	319 Move X0, [X23]
	320 Move W8, [X0+224]
	321 Compare W8, 0
	322 JumpIfNotEqual {324}
	323 Call 0x1C17DFC
	324 Move W0, W19
	325 Move X1, X31
	326 Call Char.IsUpper, X0
	327 Subtract W21, W21, 1
	328 Move TEMP, X0
	329 And TEMP, TEMP, 1
	330 Compare TEMP, 1
	331 JumpIfNotEqual {432}
	332 Compare X20, 0
	333 JumpIfEqual {443}
	334 Move X0, X20
	335 Move W1, W21
	336 Move X2, X31
	337 Call String.get_Chars, X0, X1
	338 And W8, W0, 0xFFFF
	339 NotImplemented "Instruction CMP not yet implemented."
	340 Move X0, X20
	341 Move W1, W21
	342 Move X2, X31
	343 Call String.get_Chars, X0, X1
	344 And W8, W0, 0xFFFF
	345 NotImplemented "Instruction CMP not yet implemented."
	346 Move X0, X20
	347 Move W1, W21
	348 Move X2, X31
	349 Call String.get_Chars, X0, X1
	350 And W8, W0, 0xFFFF
	351 NotImplemented "Instruction CMP not yet implemented."
	352 Move X0, [X23]
	353 Move W8, [X0+224]
	354 Compare W8, 0
	355 JumpIfNotEqual {357}
	356 Call 0x1C17DFC
	357 Move W0, W19
	358 Move X20, [X31+64]
	359 Move X19, [X31+72]
	360 Move X22, [X31+48]
	361 Move X21, [X31+56]
	362 Move X24, [X31+32]
	363 Move X23, [X31+40]
	364 Move X26, [X31+16]
	365 Move X25, [X31+24]
	366 Move X1, X31
	367 Move X30, [X31+80]
	368 Call Char.ToLower, X0
	369 Return X0
	370 Compare W21, 0
	371 JumpIfEqual {431}
	372 Subtract W22, W21, 1
	373 Compare X20, 0
	374 JumpIfEqual {443}
	375 Move X0, X20
	376 Move W1, W22
	377 Move X2, X31
	378 Call String.get_Chars, X0, X1
	379 And W8, W0, 0xFFFF
	380 NotImplemented "Instruction CMP not yet implemented."
	381 Move X0, X20
	382 Move W1, W22
	383 Move X2, X31
	384 Call String.get_Chars, X0, X1
	385 And W8, W0, 0xFFFF
	386 NotImplemented "Instruction CMP not yet implemented."
	387 Move X0, X20
	388 Move W1, W22
	389 Move X2, X31
	390 Call String.get_Chars, X0, X1
	391 And W8, W0, 0xFFFF
	392 NotImplemented "Instruction CMP not yet implemented."
	393 Move X0, X22
	394 Call InputField.get_caretSelectPositionInternal, X0
	395 NotImplemented "Instruction CMP not yet implemented."
	396 Move W24, 1
	397 Move W23, W25
	398 Move X0, X22
	399 Call InputField.get_caretPositionInternal, X0
	400 NotImplemented "Instruction CMP not yet implemented."
	401 NotImplemented "Instruction CSET not yet implemented."
	402 Move W23, W25
	403 Compare X20, 0
	404 JumpIfEqual {443}
	405 Move W8, [X20+16]
	406 NotImplemented "Instruction CMP not yet implemented."
	407 Move X0, X20
	408 Move W1, W21
	409 Move X2, X31
	410 Call String.get_Chars, X0, X1
	411 And W8, W0, 0xFFFF
	412 NotImplemented "Instruction CMP not yet implemented."
	413 Move X0, X20
	414 Move W1, W21
	415 Move X2, X31
	416 Call String.get_Chars, X0, X1
	417 And W8, W0, 0xFFFF
	418 NotImplemented "Instruction CMP not yet implemented."
	419 Move X0, X20
	420 Move W1, W22
	421 Move X2, X31
	422 Call String.get_Chars, X0, X1
	423 And W8, W0, 0xFFFF
	424 NotImplemented "Instruction CMP not yet implemented."
	425 Move W8, W31
	426 And W9, W19, 0xFFFF
	427 NotImplemented "Instruction CMP not yet implemented."
	428 Compare W8, 0
	429 JumpIfNotEqual {431}
	430 Move W19, 46
	431 Move W19, W31
	432 Move W0, W19
	433 Move X20, [X31+64]
	434 Move X19, [X31+72]
	435 Move X22, [X31+48]
	436 Move X21, [X31+56]
	437 Move X24, [X31+32]
	438 Move X23, [X31+40]
	439 Move X26, [X31+16]
	440 Move X25, [X31+24]
	441 Move X30, [X31+80]
	442 Return X0
	443 Call 0x1C17F20
	444 Call 0x1C17F28

Method: System.Void ActivateInputField()

Disassembly:
	0x03E2F564 CMP X9, X8
	0x03E2F568 CSEL X22, X0, X31, EQ
	0x03E2F56C B 0x3E2F574
	0x03E2F570 MOV X22, X31
	0x03E2F574 ADRP X27, 0x33C000
	0x03E2F578 ADRP X28, 0x2C4000
	0x03E2F57C ADRP X29, 0x2EC000
	0x03E2F580 ADRP X26, 0x2EB000
	0x03E2F584 LDR X27, [X27 + 0x38]
	0x03E2F588 LDR X28, [X28 + 0x6C0]
	0x03E2F58C LDR X29, [X29 + 0xA48]
	0x03E2F590 LDR X26, [X26 + 0x6E0]
	0x03E2F594 STR X19, [X31 + 0x8]
	0x03E2F598 LDR X0, [X25]
	0x03E2F59C LDR W8, [X0 + 0xE0]
	0x03E2F5A0 CBNZ W8, 0x3E2F5A8
	0x03E2F5A4 BL 0x1C16DFC
	0x03E2F5A8 MOV X0, X22
	0x03E2F5AC MOV X1, X31
	0x03E2F5B0 MOV X2, X31
	0x03E2F5B4 BL 0x3C3883C
	0x03E2F5B8 TBNZ X0, 0x0, 0x3E2F71C
	0x03E2F5BC CBZ X22, 0x3E2F7D4
	0x03E2F5C0 MOV X0, X22
	0x03E2F5C4 MOV X1, X31
	0x03E2F5C8 BL 0x3C32ECC
	0x03E2F5CC LDR X8, [X25]
	0x03E2F5D0 MOV X23, X0
	0x03E2F5D4 LDR W9, [X8 + 0xE0]
	0x03E2F5D8 CBNZ W9, 0x3E2F5E4
	0x03E2F5DC MOV X0, X8
	0x03E2F5E0 BL 0x1C16DFC
	0x03E2F5E4 MOV X0, X23
	0x03E2F5E8 MOV X1, X31
	0x03E2F5EC MOV X2, X31
	0x03E2F5F0 BL 0x3C3883C
	0x03E2F5F4 TBNZ X0, 0x0, 0x3E2F71C
	0x03E2F5F8 LDR X0, [X28]
	0x03E2F5FC LDR X23, [X27]
	0x03E2F600 LDR W8, [X0 + 0xE0]
	0x03E2F604 CBNZ W8, 0x3E2F60C
	0x03E2F608 BL 0x1C16DFC
	0x03E2F60C MOV X0, X23
	0x03E2F610 MOV X1, X31
	0x03E2F614 BL 0x338C698
	0x03E2F618 MOV X1, X0
	0x03E2F61C MOV X0, X22
	0x03E2F620 MOV X2, X20
	0x03E2F624 MOV X3, X31
	0x03E2F628 BL 0x3C33320
	0x03E2F62C CBZ X20, 0x3E2F7D4
	0x03E2F630 LDR W8, [X20 + 0x18]
	0x03E2F634 CMP W8, 0x0
	0x03E2F638 CSET W21, GT
	0x03E2F63C CMP W8, 0x1
	0x03E2F640 B.LT 0x3E2F6D8
	0x03E2F644 MOV W23, W31
	0x03E2F648 LDR X2, [X29]
	0x03E2F64C MOV X0, X20
	0x03E2F650 MOV W1, W23
	0x03E2F654 BL 0x301BCCC
	0x03E2F658 LDR X8, [X25]
	0x03E2F65C MOV X24, X0
	0x03E2F660 LDR W9, [X8 + 0xE0]
	0x03E2F664 CBNZ W9, 0x3E2F670
	0x03E2F668 MOV X0, X8
	0x03E2F66C BL 0x1C16DFC
	0x03E2F670 MOV X0, X24
	0x03E2F674 MOV X1, X31
	0x03E2F678 MOV X2, X31
	0x03E2F67C BL 0x3C354F8
	0x03E2F680 TBZ X0, 0x0, 0x3E2F6C4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5BA000
	006 Move X21, 0x2C5000
	007 Move W8, [X20+1791]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2C5000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1791], W8
	019 Move X0, [X21]
	020 Move X20, [X19+264]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {97}
	033 Move X0, [X19+264]
	034 Compare X0, 0
	035 JumpIfEqual {102}
	036 Move X1, X31
	037 Call Text.get_font, X0
	038 Move X8, [X21]
	039 Move X20, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X31
	047 Move X2, X31
	048 Call Object.op_Equality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfEqual {97}
	053 Move X8, [X19]
	054 Move X0, X19
	055 Move X9, [X8+456]
	056 Move X1, [X8+464]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {97}
	062 Move X8, [X19]
	063 Move X0, X19
	064 Move X9, [X8+696]
	065 Move X1, [X8+704]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {97}
	071 Move W8, [X19+464]
	072 Compare W8, 0
	073 JumpIfEqual {95}
	074 Move X0, [X19+256]
	075 Compare X0, 0
	076 JumpIfEqual {95}
	077 Move X1, X31
	078 Call TouchScreenKeyboard.get_active, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {95}
	083 Move X0, [X19+256]
	084 Compare X0, 0
	085 JumpIfEqual {102}
	086 Move W1, 1
	087 Move X2, X31
	088 Call TouchScreenKeyboard.set_active, X0, X1
	089 Move X0, [X19+256]
	090 Compare X0, 0
	091 JumpIfEqual {102}
	092 Move X1, [X19+384]
	093 Move X2, X31
	094 Call TouchScreenKeyboard.set_text, X0, X1
	095 Move W8, 1
	096 Move [X19+465], W8
	097 Move X20, [X31+16]
	098 Move X19, [X31+24]
	099 Move X30, [X31+32]
	100 Move X21, [X31+40]
	101 Return 
	102 Call 0x1C17F20

Method: System.Void ActivateInputFieldInternal()

Disassembly:
	0x03E2963C STP X20, X19, [X31 + 0xB0]
	0x03E29640 ADRP X20, 0x5BF000
	0x03E29644 LDRB W8, [X20 + 0x6DF]
	0x03E29648 MOV V8.16B, V1.16B
	0x03E2964C MOV V9.16B, V0.16B
	0x03E29650 MOV X19, X0
	0x03E29654 TBNZ X8, 0x0, 0x3E2966C
	0x03E29658 ADRP X0, 0x2CA000
	0x03E2965C LDR X0, [X0 + 0x598]
	0x03E29660 BL 0x1C16CF4
	0x03E29664 MOVZ W8, 0x1
	0x03E29668 STRB W8, [X20 + 0x6DF]
	0x03E2966C STP X31, X31, [X31 + 0x30]
	0x03E29670 STR X31, [X31 + 0x40]
	0x03E29674 LDR X0, [X19 + 0x108]
	0x03E29678 CBZ X0, 0x3E299B4
	0x03E2967C ADRP X21, 0x2CA000
	0x03E29680 LDR X21, [X21 + 0x598]
	0x03E29684 MOV X1, X31
	0x03E29688 BL 0x3CDADE8
	0x03E2968C LDR X8, [X21]
	0x03E29690 MOV X20, X0
	0x03E29694 LDR W9, [X8 + 0xE0]
	0x03E29698 CBNZ W9, 0x3E296A4
	0x03E2969C MOV X0, X8
	0x03E296A0 BL 0x1C16DFC
	0x03E296A4 MOV X0, X20
	0x03E296A8 MOV X1, X31
	0x03E296AC MOV X2, X31
	0x03E296B0 BL 0x3C3883C
	0x03E296B4 TBNZ X0, 0x0, 0x3E29988
	0x03E296B8 ADRP X22, 0x5AF000
	0x03E296BC LDRB W8, [X22 + 0x783]
	0x03E296C0 CBNZ W8, 0x3E296D8
	0x03E296C4 ADRP X0, 0x2CA000
	0x03E296C8 LDR X0, [X0 + 0x5A0]
	0x03E296CC BL 0x1C16CF4
	0x03E296D0 MOVZ W8, 0x1
	0x03E296D4 STRB W8, [X22 + 0x783]
	0x03E296D8 CBZ X20, 0x3E299B4
	0x03E296DC ADRP X23, 0x2CA000
	0x03E296E0 LDR X23, [X23 + 0x5A0]
	0x03E296E4 MOV X0, X20
	0x03E296E8 MOV X1, X31
	0x03E296EC LDR X8, [X23]
	0x03E296F0 LDR X8, [X8 + 0xB8]
	0x03E296F4 LDP S10, S11, [X8]
	0x03E296F8 BL 0x3E244BC
	0x03E296FC CBZ W0, 0x3E2982C
	0x03E29700 MOV X0, X20
	0x03E29704 MOV X1, X31
	0x03E29708 BL 0x3E24E68
	0x03E2970C LDR X8, [X21]
	0x03E29710 MOV X21, X0
	0x03E29714 LDR W9, [X8 + 0xE0]
	0x03E29718 CBNZ W9, 0x3E29724
	0x03E2971C MOV X0, X8
	0x03E29720 BL 0x1C16DFC
	0x03E29724 MOV X0, X21
	0x03E29728 MOV X1, X31
	0x03E2972C MOV X2, X31
	0x03E29730 BL 0x3C354F8
	0x03E29734 TBZ X0, 0x0, 0x3E29980
	0x03E29738 MOV X0, X20
	0x03E2973C MOV X1, X31
	0x03E29740 BL 0x3E24E68
	0x03E29744 CBZ X0, 0x3E299B4
	0x03E29748 ADD X8, X31, 0x18
	0x03E2974C FMOV S2, W31
	0x03E29750 MOV V0.16B, V9.16B
	0x03E29754 MOV V1.16B, V8.16B
	0x03E29758 MOV X1, X31
	0x03E2975C BL 0x3C047B4
	0x03E29760 LDUR V0, [X31 + 0x18]
	0x03E29764 LDR X8, [X31 + 0x28]
	0x03E29768 STR V0, [X31 + 0x3]
	0x03E2976C STR X8, [X31 + 0x40]
	0x03E29770 LDR X0, [X19 + 0x108]
	0x03E29774 CBZ X0, 0x3E299B4
	0x03E29778 MOV X1, X31
	0x03E2977C BL 0x3C32E90
	0x03E29780 CBZ X0, 0x3E299B4
	0x03E29784 MOV X1, X31
	0x03E29788 BL 0x3C3FA04
	0x03E2978C LDR X0, [X19 + 0x108]
	0x03E29790 CBZ X0, 0x3E299B4
	0x03E29794 MOV X1, X31
	0x03E29798 MOV V11.16B, V0.16B
	0x03E2979C MOV V12.16B, V1.16B
	0x03E297A0 MOV V13.16B, V2.16B
	0x03E297A4 BL 0x3C32E90
	0x03E297A8 CBZ X0, 0x3E299B4
	0x03E297AC MOV X1, X31
	0x03E297B0 BL 0x3C3F58C
	0x03E297B4 ADRP X20, 0x5AF000
	0x03E297B8 LDRB W8, [X20 + 0x785]
	0x03E297BC STP S1, S0, [X31 + 0xC]
	0x03E297C0 STR S2, [X31 + 0x14]
	0x03E297C4 CBNZ W8, 0x3E297DC
	0x03E297C8 ADRP X0, 0x2CA000
	0x03E297CC LDR X0, [X0 + 0x5A8]
	0x03E297D0 BL 0x1C16CF4
	0x03E297D4 MOVZ W8, 0x1
	0x03E297D8 STRB W8, [X20 + 0x785]
	0x03E297DC ADRP X8, 0x2CA000
	0x03E297E0 LDR X8, [X8 + 0x5A8]
	0x03E297E4 LDR X0, [X8]
	0x03E297E8 LDR W8, [X0 + 0xE0]
	0x03E297EC CBNZ W8, 0x3E297F4
	0x03E297F0 BL 0x1C16DFC
	0x03E297F4 FMUL S0, S11, S11
	0x03E297F8 FMUL S1, S12, S12
	0x03E297FC ADRP X8, 0xFFFFFFFFFCCC1000
	0x03E29800 FADD S0, S0, S1
	0x03E29804 LDR V1, [X8 + 0x17C]
	0x03E29808 FMUL S2, S13, S13
	0x03E2980C FADD S0, S2, S0
	0x03E29810 FSQRT S0, S0
	0x03E29814 FCMP S0, S1
	0x03E29818 B.LE 0x3E29850
	0x03E2981C FDIV S14, S11, S0
	0x03E29820 FDIV S12, S12, S0
	0x03E29824 FDIV S11, S13, S0
	0x03E29828 B 0x3E2987C
	0x03E2982C LDR X0, [X19 + 0x108]
	0x03E29830 CBZ X0, 0x3E299B4
	0x03E29834 MOV X1, X31
	0x03E29838 BL 0x3C32E90
	0x03E2983C CBZ X0, 0x3E299B4
	0x03E29840 FMOV S2, W31
	0x03E29844 MOV V0.16B, V9.16B
	0x03E29848 MOV V1.16B, V8.16B
	0x03E2984C B 0x3E29970
	0x03E29850 LDRB W8, [X22 + 0x783]
	0x03E29854 CBNZ W8, 0x3E2986C
	0x03E29858 ADRP X0, 0x2CA000
	0x03E2985C LDR X0, [X0 + 0x5A0]
	0x03E29860 BL 0x1C16CF4
	0x03E29864 MOVZ W8, 0x1
	0x03E29868 STRB W8, [X22 + 0x783]
	0x03E2986C LDR X8, [X23]
	0x03E29870 LDR X8, [X8 + 0xB8]
	0x03E29874 LDP S14, S12, [X8]
	0x03E29878 LDR V11, [X8 + 0x8]
	0x03E2987C ADRP X20, 0x5B0000
	0x03E29880 LDP S15, S8, [X31 + 0x30]
	0x03E29884 LDP S16, S10, [X31 + 0x38]
	0x03E29888 LDRB W8, [X20 + 0x5AA]
	0x03E2988C LDP S13, S9, [X31 + 0x40]
	0x03E29890 CBNZ W8, 0x3E298B0
	0x03E29894 ADRP X0, 0x2D1000
	0x03E29898 LDR X0, [X0 + 0x4B8]
	0x03E2989C STR S16, [X31 + 0x8]
	0x03E298A0 BL 0x1C16CF4
	0x03E298A4 LDR V16, [X31 + 0x8]
	0x03E298A8 MOVZ W8, 0x1
	0x03E298AC STRB W8, [X20 + 0x5AA]
	0x03E298B0 LDR X0, [X19 + 0x108]
	0x03E298B4 CBZ X0, 0x3E299B4
	0x03E298B8 ADRP X8, 0xFFFFFFFFFCCC1000
	0x03E298BC LDR V18, [X8 + 0x240]
	0x03E298C0 ADRP X8, 0x2D1000
	0x03E298C4 LDP S1, S0, [X31 + 0xC]
	0x03E298C8 LDR V6, [X31 + 0x14]
	0x03E298CC LDR X8, [X8 + 0x4B8]
	0x03E298D0 FMUL S2, S14, S10
	0x03E298D4 FMUL S0, S0, S14
	0x03E298D8 FMUL S1, S1, S12
	0x03E298DC LDR X8, [X8]
	0x03E298E0 FMUL S3, S12, S13
	0x03E298E4 FMUL S4, S14, S15
	0x03E298E8 FMUL S5, S12, S8
	0x03E298EC LDR X8, [X8 + 0xB8]
	0x03E298F0 FMUL S6, S6, S11
	0x03E298F4 FMUL S7, S11, S9
	0x03E298F8 FMUL S16, S11, S16
	0x03E298FC FADD S0, S0, S1
	0x03E29900 FADD S1, S2, S3
	0x03E29904 FADD S2, S4, S5
	0x03E29908 LDR V3, [X8]
	0x03E2990C FADD S0, S6, S0
	0x03E29910 FADD S1, S7, S1
	0x03E29914 FADD S2, S16, S2
	0x03E29918 FMOV S17, W31
	0x03E2991C FSUB S0, S0, S2
	0x03E29920 FABS S2, S1
	0x03E29924 FMOV S19, 8
	0x03E29928 FMAXNM S2, S2, S17
	0x03E2992C FMUL S2, S2, S18
	0x03E29930 FMUL S3, S3, S19
	0x03E29934 FCMP S2, S3
	0x03E29938 FABD S4, S17, S17
	0x03E2993C FCSEL S2, S2, S3, GT
	0x03E29940 FDIV S0, S0, S1
	0x03E29944 FCMP S4, S2
	0x03E29948 MOV X1, X31
	0x03E2994C FCSEL S8, S17, S0, MI
	0x03E29950 BL 0x3C32E90
	0x03E29954 MOV X19, X0
	0x03E29958 ADD X0, X31, 0x30
	0x03E2995C MOV V0.16B, V8.16B
	0x03E29960 MOV X1, X31
	0x03E29964 BL 0x3C0B1B4
	0x03E29968 CBZ X19, 0x3E299B4
	0x03E2996C MOV X0, X19
	0x03E29970 MOV X1, X31
	0x03E29974 BL 0x3C40B58
	0x03E29978 MOV V10.16B, V0.16B
	0x03E2997C MOV V11.16B, V1.16B
	0x03E29980 MOV V9.16B, V10.16B

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x5C0000
	009 Move X23, 0x2F2000
	010 Move W8, [X20+1792]
	011 Move X23, [X23+3576]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x2F2000
	018 Move X0, [X0+3576]
	019 Call 0x1C17CF4
	020 Move X0, 0x342000
	021 Move X0, [X0+4024]
	022 Call 0x1C17CF4
	023 Move X0, 0x2CB000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move X0, 0x2CB000
	027 Move X0, [X0+2440]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+1792], W8
	031 Move X0, [X23]
	032 Move X22, 0x2CB000
	033 Move W8, [X0+224]
	034 Move X22, [X22+1432]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X31
	039 Call EventSystem.get_current
	040 Move X8, [X22]
	041 Move X20, X0
	042 Move W9, [X8+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {47}
	045 Move X0, X8
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {63}
	055 Move X20, [X31+48]
	056 Move X19, [X31+56]
	057 Move X22, [X31+32]
	058 Move X21, [X31+40]
	059 Move X30, [X31+16]
	060 Move X23, [X31+24]
	061 Add X31, X31, 64
	062 Return 
	063 Move X0, [X23]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X31
	069 Call EventSystem.get_current
	070 Compare X0, 0
	071 JumpIfEqual {258}
	072 Move X20, [X0+64]
	073 Move X0, X19
	074 Move X1, X31
	075 Call Component.get_gameObject, X0
	076 Move X8, [X22]
	077 Move X21, X0
	078 Move W9, [X8+224]
	079 Compare W9, 0
	080 JumpIfNotEqual {83}
	081 Move X0, X8
	082 Call 0x1C17DFC
	083 Move X0, X20
	084 Move X1, X21
	085 Move X2, X31
	086 Call Object.op_Inequality, X0, X1
	087 Move TEMP, X0
	088 And TEMP, TEMP, 1
	089 Compare TEMP, 1
	090 JumpIfNotEqual {108}
	091 Move X0, [X23]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X31
	097 Call EventSystem.get_current
	098 Move X20, X0
	099 Move X0, X19
	100 Move X1, X31
	101 Call Component.get_gameObject, X0
	102 Compare X20, 0
	103 JumpIfEqual {258}
	104 Move X1, X0
	105 Move X0, X20
	106 Move X2, X31
	107 Call EventSystem.SetSelectedGameObject, X0, X1
	108 Move X20, 0x342000
	109 Move X20, [X20+4024]
	110 Move X0, [X20]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {116}
	114 Call 0x1C17DFC
	115 Move X0, [X20]
	116 Move X8, [X0+184]
	117 Move W8, [X8+9]
	118 Compare W8, 0
	119 JumpIfEqual {123}
	120 Move W8, W31
	121 Compare X19, 0
	122 JumpIfNotEqual {128}
	123 Move X0, X31
	124 Call TouchScreenKeyboard.get_isInPlaceEditingAllowed
	125 And W8, W0, 1
	126 Compare X19, 0
	127 JumpIfEqual {258}
	128 Move [X19+528], W8
	129 Call InputField.TouchScreenKeyboardShouldBeUsed, X0
	130 Move TEMP, X0
	131 And TEMP, TEMP, 1
	132 Compare TEMP, 1
	133 JumpIfNotEqual {199}
	134 Call InputField.get_input, X0
	135 Move X8, [X22]
	136 Move X20, X0
	137 Move W9, [X8+224]
	138 Compare W9, 0
	139 JumpIfNotEqual {142}
	140 Move X0, X8
	141 Call 0x1C17DFC
	142 Move X0, X20
	143 Move X1, X31
	144 Move X2, X31
	145 Call Object.op_Inequality, X0, X1
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfNotEqual {166}
	150 Call InputField.get_input, X0
	151 Compare X0, 0
	152 JumpIfEqual {258}
	153 Move X8, [X0]
	154 Move X9, [X8+760]
	155 Move X1, [X8+768]
	156 NotImplemented "Instruction BLR not yet implemented."
	157 Move TEMP, X0
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfNotEqual {166}
	161 Move X0, X19
	162 Call InputField.get_shouldHideMobileInput, X0
	163 And W0, W0, 1
	164 Move X1, X31
	165 Call TouchScreenKeyboard.set_hideInput, X0
	166 Move W8, [X19+284]
	167 Move W9, [X19+296]
	168 Move X0, [X19+384]
	169 Move W1, [X19+292]
	170 Move W7, [X19+308]
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Subtract W9, W9, 1
	173 Move X8, 0x2CB000
	174 Move X8, [X8+2440]
	175 NotImplemented "Instruction CMP not yet implemented."
	176 NotImplemented "Instruction CSET not yet implemented."
	177 Move W4, 1
	178 Move X6, [X8]
	179 Move W2, W31
	180 Move [X31], X31
	181 NotImplemented "Instruction CMP not yet implemented."
	182 Move X9, 0x2CB000
	183 Move X9, [X9+2440]
	184 NotImplemented "Instruction CSET not yet implemented."
	185 NotImplemented "Instruction CMP not yet implemented."
	186 NotImplemented "Instruction CSET not yet implemented."
	187 Move X6, [X9]
	188 Move [X31], X31
	189 Move W4, W31
	190 Move W5, W31
	191 Call TouchScreenKeyboard.Open, X0, X1, X2, X3, X4, X5, X6, X7
	192 Move W8, [X19+528]
	193 Move [X19+256], X0
	194 Compare W8, 0
	195 JumpIfNotEqual {199}
	196 Move X0, X19
	197 Move W1, W31
	198 Call InputField.MoveTextEnd, X0, X1
	199 Move X0, X31
	200 Call TouchScreenKeyboard.get_isSupported
	201 Move TEMP, X0
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfNotEqual {208}
	205 Move W8, [X19+528]
	206 Compare W8, 0
	207 JumpIfEqual {257}
	208 Call InputField.get_input, X0
	209 Move X8, [X22]
	210 Move X20, X0
	211 Move W9, [X8+224]
	212 Compare W9, 0
	213 JumpIfNotEqual {216}
	214 Move X0, X8
	215 Call 0x1C17DFC
	216 Move X0, X20
	217 Move X1, X31
	218 Move X2, X31
	219 Call Object.op_Inequality, X0, X1
	220 Move TEMP, X0
	221 And TEMP, TEMP, 1
	222 Compare TEMP, 1
	223 JumpIfNotEqual {232}
	224 Call InputField.get_input, X0
	225 Compare X0, 0
	226 JumpIfEqual {258}
	227 Move X8, [X0]
	228 Move W1, 1
	229 Move X9, [X8+616]
	230 Move X2, [X8+624]
	231 NotImplemented "Instruction BLR not yet implemented."
	232 Move X8, [X19+384]
	233 Compare X8, 0
	234 JumpIfEqual {258}
	235 Move W9, [X8+16]
	236 NotImplemented "Instruction BIC not yet implemented."
	237 Move [X19+404], W9
	238 Move W9, [X8+16]
	239 And W9, W9, W9
	240 Move [X19+408], W9
	241 Move W9, 1
	242 Move X0, X19
	243 Move [X19+504], X8
	244 Move [X19+464], W9
	245 Move [X19+512], W31
	246 Call InputField.SetCaretVisible, X0
	247 Move X0, X19
	248 Move X20, [X31+48]
	249 Move X19, [X31+56]
	250 Move X22, [X31+32]
	251 Move X21, [X31+40]
	252 Move X30, [X31+16]
	253 Move X23, [X31+24]
	254 Add X31, X31, 64
	255 Call InputField.UpdateLabel, X0
	256 Return 
	257 Move X8, [X19+384]
	258 Call 0x1C17F20

Method: System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03E2F684 CBZ X24, 0x3E2F6C4
	0x03E2F688 LDR X9, [X24]
	0x03E2F68C LDR X8, [X26]
	0x03E2F690 LDRB W11, [X9 + 0x130]
	0x03E2F694 LDRB W10, [X8 + 0x130]
	0x03E2F698 CMP W11, W10
	0x03E2F69C B.CC 0x3E2F6C4
	0x03E2F6A0 LDR X9, [X9 + 0xC8]
	0x03E2F6A4 ADD X9, X9, X10, 0x3, LSL
	0x03E2F6A8 LDUR X9, [X9 - 0x8]
	0x03E2F6AC CMP X9, X8
	0x03E2F6B0 B.NE 0x3E2F6C4
	0x03E2F6B4 MOV X0, X24
	0x03E2F6B8 MOV X1, X31
	0x03E2F6BC BL 0x3C32454

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X2, X31
	004 Move X19, X0
	005 Call Selectable.OnSelect, X0, X1
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X9, [X8+1272]
	009 Move X1, [X8+1280]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {20}
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call InputField.ActivateInputField, X0
	019 Return 
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

Method: System.Void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E2F6C0 TBNZ X0, 0x0, 0x3E2F714
	0x03E2F6C4 LDR W8, [X20 + 0x18]
	0x03E2F6C8 ADD W23, W23, 0x1
	0x03E2F6CC CMP W23, W8
	0x03E2F6D0 CSET W21, LT
	0x03E2F6D4 B.LT 0x3E2F648
	0x03E2F6D8 MOV X0, X22
	0x03E2F6DC MOV X1, X31
	0x03E2F6E0 BL 0x3C3F49C

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {12}
	004 Move W8, [X1+328]
	005 Compare W8, 0
	006 JumpIfEqual {9}
	007 Move X30, [X31+16]
	008 Return 
	009 Move X30, [X31+16]
	010 Call InputField.ActivateInputField, X0
	011 Return 
	012 Call 0x1C17F20

Method: System.Void DeactivateInputField()

Disassembly:
	0x03E286B8 BL 0x3E4FF90
	0x03E286BC LDR X8, [X22]
	0x03E286C0 MOV X20, X0
	0x03E286C4 LDR W9, [X8 + 0xE0]
	0x03E286C8 CBNZ W9, 0x3E286D4
	0x03E286CC MOV X0, X8
	0x03E286D0 BL 0x1C16DFC
	0x03E286D4 MOV X0, X20
	0x03E286D8 MOV X1, X31
	0x03E286DC MOV X2, X31
	0x03E286E0 BL 0x3C3883C
	0x03E286E4 TBZ X0, 0x0, 0x3E286FC
	0x03E286E8 LDP X20, X19, [X31 + 0x30]
	0x03E286EC LDP X22, X21, [X31 + 0x20]
	0x03E286F0 LDP X30, X23, [X31 + 0x10]
	0x03E286F4 ADD X31, X31, 0x40
	0x03E286F8 RET
	0x03E286FC LDR X0, [X23]
	0x03E28700 LDR W8, [X0 + 0xE0]
	0x03E28704 CBNZ W8, 0x3E2870C
	0x03E28708 BL 0x1C16DFC
	0x03E2870C MOV X0, X31
	0x03E28710 BL 0x3E4FF90
	0x03E28714 CBZ X0, 0x3E28980
	0x03E28718 LDR X20, [X0 + 0x40]
	0x03E2871C MOV X0, X19
	0x03E28720 MOV X1, X31
	0x03E28724 BL 0x3C32ECC
	0x03E28728 LDR X8, [X22]
	0x03E2872C MOV X21, X0
	0x03E28730 LDR W9, [X8 + 0xE0]
	0x03E28734 CBNZ W9, 0x3E28740
	0x03E28738 MOV X0, X8
	0x03E2873C BL 0x1C16DFC
	0x03E28740 MOV X0, X20
	0x03E28744 MOV X1, X21
	0x03E28748 MOV X2, X31
	0x03E2874C BL 0x3C354F8
	0x03E28750 TBZ X0, 0x0, 0x3E28790
	0x03E28754 LDR X0, [X23]
	0x03E28758 LDR W8, [X0 + 0xE0]
	0x03E2875C CBNZ W8, 0x3E28764
	0x03E28760 BL 0x1C16DFC
	0x03E28764 MOV X0, X31
	0x03E28768 BL 0x3E4FF90
	0x03E2876C MOV X20, X0
	0x03E28770 MOV X0, X19
	0x03E28774 MOV X1, X31
	0x03E28778 BL 0x3C32ECC
	0x03E2877C CBZ X20, 0x3E28980
	0x03E28780 MOV X1, X0
	0x03E28784 MOV X0, X20
	0x03E28788 MOV X2, X31
	0x03E2878C BL 0x3E4BE8C
	0x03E28790 ADRP X20, 0x342000
	0x03E28794 LDR X20, [X20 + 0xFB8]
	0x03E28798 LDR X0, [X20]
	0x03E2879C LDR W8, [X0 + 0xE0]
	0x03E287A0 CBNZ W8, 0x3E287AC
	0x03E287A4 BL 0x1C16DFC
	0x03E287A8 LDR X0, [X20]
	0x03E287AC LDR X8, [X0 + 0xB8]
	0x03E287B0 LDRB W8, [X8 + 0x9]
	0x03E287B4 CBZ W8, 0x3E287C4
	0x03E287B8 MOV W8, W31
	0x03E287BC CBNZ X19, 0x3E287D4
	0x03E287C0 B 0x3E28980
	0x03E287C4 MOV X0, X31
	0x03E287C8 BL 0x3C3CCF4
	0x03E287CC AND W8, W0, 0x1
	0x03E287D0 CBZ X19, 0x3E28980
	0x03E287D4 STRB W8, [X19 + 0x210]
	0x03E287D8 BL 0x3E27C4C
	0x03E287DC TBZ X0, 0x0, 0x3E288C8
	0x03E287E0 BL 0x3E25300
	0x03E287E4 LDR X8, [X22]
	0x03E287E8 MOV X20, X0
	0x03E287EC LDR W9, [X8 + 0xE0]
	0x03E287F0 CBNZ W9, 0x3E287FC
	0x03E287F4 MOV X0, X8
	0x03E287F8 BL 0x1C16DFC
	0x03E287FC MOV X0, X20
	0x03E28800 MOV X1, X31
	0x03E28804 MOV X2, X31
	0x03E28808 BL 0x3C354F8
	0x03E2880C TBZ X0, 0x0, 0x3E28840
	0x03E28810 BL 0x3E25300
	0x03E28814 CBZ X0, 0x3E28980
	0x03E28818 LDR X8, [X0]
	0x03E2881C LDR X9, [X8 + 0x2F8]
	0x03E28820 LDR X1, [X8 + 0x300]
	0x03E28824 BLR X9
	0x03E28828 TBZ X0, 0x0, 0x3E28840
	0x03E2882C MOV X0, X19
	0x03E28830 BL 0x3E25908

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5C1000
	006 Move W8, [X20+1793]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2CC000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1793], W8
	017 Move W8, [X19+464]
	018 Compare W8, 0
	019 JumpIfEqual {120}
	020 Move X21, 0x2CC000
	021 Move X21, [X21+1432]
	022 Move [X19+513], W31
	023 Move [X19+464], W31
	024 Move X20, [X19+272]
	025 Move X0, [X21]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {48}
	038 Move X0, [X19+384]
	039 Move X20, [X19+272]
	040 Move X1, X31
	041 Call String.IsNullOrEmpty, X0
	042 Compare X20, 0
	043 JumpIfEqual {125}
	044 And W1, W0, 1
	045 Move X0, X20
	046 Move X2, X31
	047 Call Behaviour.set_enabled, X0, X1
	048 Move X0, [X21]
	049 Move X20, [X19+264]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Inequality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {113}
	062 Move X8, [X19]
	063 Move X0, X19
	064 Move X9, [X8+696]
	065 Move X1, [X8+704]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {113}
	071 Move W8, [X19+512]
	072 Compare W8, 0
	073 JumpIfEqual {78}
	074 Move X1, [X19+504]
	075 Move W2, 1
	076 Move X0, X19
	077 Call InputField.SetText, X0, X1, X2
	078 Move X0, X19
	079 Call InputField.SendOnEndEdit, X0
	080 Move X0, [X19+256]
	081 Compare X0, 0
	082 JumpIfEqual {87}
	083 Move W1, W31
	084 Move X2, X31
	085 Call TouchScreenKeyboard.set_active, X0, X1
	086 Move [X19+256], X31
	087 Move [X19+408], W31
	088 Move [X19+404], W31
	089 Call InputField.get_input, X0
	090 Move X8, [X21]
	091 Move X20, X0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {97}
	095 Move X0, X8
	096 Call 0x1C17DFC
	097 Move X0, X20
	098 Move X1, X31
	099 Move X2, X31
	100 Call Object.op_Inequality, X0, X1
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {113}
	105 Call InputField.get_input, X0
	106 Compare X0, 0
	107 JumpIfEqual {125}
	108 Move X8, [X0]
	109 Move W1, W31
	110 Move X9, [X8+616]
	111 Move X2, [X8+624]
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Move X0, X19
	114 Move X20, [X31+16]
	115 Move X19, [X31+24]
	116 Move X30, [X31+32]
	117 Move X21, [X31+40]
	118 Call InputField.MarkGeometryAsDirty, X0
	119 Return 
	120 Move X20, [X31+16]
	121 Move X19, [X31+24]
	122 Move X30, [X31+32]
	123 Move X21, [X31+40]
	124 Return 
	125 Call 0x1C17F20

Method: System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03E2F6E4 CBZ X0, 0x3E2F708
	0x03E2F6E8 ADRP X8, 0x2EB000
	0x03E2F6EC LDR X8, [X8 + 0xC70]
	0x03E2F6F0 LDR X9, [X0]
	0x03E2F6F4 LDR X8, [X8]
	0x03E2F6F8 CMP X9, X8
	0x03E2F6FC CSEL X22, X0, X31, EQ
	0x03E2F700 TBNZ X21, 0x0, 0x3E2F598
	0x03E2F704 B 0x3E2F71C
	0x03E2F708 MOV X22, X31
	0x03E2F70C TBNZ X21, 0x0, 0x3E2F598

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call InputField.DeactivateInputField, X0
	007 Move X0, X20
	008 Move X1, X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X2, X31
	012 Move X30, [X31+32]
	013 Call Selectable.OnDeselect, X0, X1
	014 Return 

Method: System.Void OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)

Disassembly:
	0x03E2F710 B 0x3E2F71C
	0x03E2F714 STR X22, [X31 + 0x8]
	0x03E2F718 B 0x3E2F6D8
	0x03E2F71C LDR X0, [X25]
	0x03E2F720 LDR W8, [X0 + 0xE0]
	0x03E2F724 CBNZ W8, 0x3E2F72C
	0x03E2F728 BL 0x1C16DFC
	0x03E2F72C LDR X21, [X31 + 0x8]
	0x03E2F730 MOV X1, X19
	0x03E2F734 MOV X2, X31
	0x03E2F738 MOV X0, X21
	0x03E2F73C BL 0x3C3883C
	0x03E2F740 TBZ X0, 0x0, 0x3E2F76C
	0x03E2F744 ADRP X8, 0x2C7000
	0x03E2F748 LDR X8, [X8 + 0x920]
	0x03E2F74C LDR X0, [X8]
	0x03E2F750 LDR W8, [X0 + 0xE0]
	0x03E2F754 CBNZ W8, 0x3E2F75C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+456]
	006 Move X1, [X8+464]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {26}
	012 Move X8, [X19]
	013 Move X0, X19
	014 Move X9, [X8+696]
	015 Move X1, [X8+704]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move TEMP, X0
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfNotEqual {26}
	021 Move W8, [X19+464]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Move W8, 1
	025 Move [X19+465], W8
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 

Method: System.Void EnforceContentType()

Disassembly:
	0x03E27AAC STR W9, [X0 + 0x194]
	0x03E27AB0 LDR W8, [X8 + 0x10]
	0x03E27AB4 AND W8, W8, W8, 0x1F
	0x03E27AB8 STR W8, [X0 + 0x198]
	0x03E27ABC LDR X30, [X31], #0x10
	0x03E27AC0 RET
	0x03E27AC4 BL 0x1C16F20
	0x03E27AC8 STP X30, X19, [X31 - 0x10]!
	0x03E27ACC LDR X8, [X0 + 0x180]
	0x03E27AD0 CBZ X8, 0x3E27B24
	0x03E27AD4 LDR W8, [X8 + 0x10]
	0x03E27AD8 MOV X19, X0
	0x03E27ADC BIC W8, W8, W8, 0x1F
	0x03E27AE0 TBNZ X1, 0x0, 0x3E27B0C
	0x03E27AE4 MOV X0, X19
	0x03E27AE8 STR W8, [X19 + 0x194]
	0x03E27AEC BL 0x3E26F3C
	0x03E27AF0 STR W0, [X19 + 0x198]
	0x03E27AF4 TBNZ X0, 0x1F, 0x3E27B14
	0x03E27AF8 LDR X8, [X19 + 0x180]
	0x03E27AFC CBZ X8, 0x3E27B24
	0x03E27B00 LDR W8, [X8 + 0x10]
	0x03E27B04 CMP W8, W0
	0x03E27B08 B.GE 0x3E27B18
	0x03E27B0C STR W8, [X19 + 0x198]
	0x03E27B10 B 0x3E27B18
	0x03E27B14 STR W31, [X19 + 0x198]
	0x03E27B18 MOV X0, X19
	0x03E27B1C LDP X30, X19, [X31], #0x10
	0x03E27B20 B 0x3E25E74
	0x03E27B24 BL 0x1C16F20
	0x03E27B28 STP X30, X19, [X31 - 0x10]!
	0x03E27B2C MOV X19, X0
	0x03E27B30 TBZ X1, 0x0, 0x3E27B4C
	0x03E27B34 LDR X8, [X19 + 0x180]
	0x03E27B38 STR W31, [X19 + 0x198]
	0x03E27B3C CBZ X8, 0x3E27BA0
	0x03E27B40 LDR W8, [X8 + 0x10]
	0x03E27B44 TBZ X8, 0x1F, 0x3E27B94
	0x03E27B48 B 0x3E27B88
	0x03E27B4C LDR X8, [X19 + 0x180]
	0x03E27B50 STR W31, [X19 + 0x194]
	0x03E27B54 CBZ X8, 0x3E27BA0
	0x03E27B58 LDR W8, [X8 + 0x10]
	0x03E27B5C TBZ X8, 0x1F, 0x3E27B64
	0x03E27B60 STR W8, [X19 + 0x194]
	0x03E27B64 MOV X0, X19

ISIL:
	001 Move W8, [X0+280]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move X10, -53014528
	004 Add X10, X10, 3068
	005 NotImplemented "Instruction ADR not yet implemented."
	006 Move W12, [X10]
	007 Add X11, X11, X12
	008 Move W9, W31
	009 Move W10, W31
	010 CallNoReturn X11
	011 Move W8, W31
	012 Move [X0+296], W31
	013 Move W10, 1
	014 Move W9, 4
	015 Move W8, W31
	016 Move [X0+296], W31
	017 Move W9, 2
	018 Move W10, 2
	019 Move W8, W31
	020 Move [X0+296], W31
	021 Move W10, 3
	022 Move W9, 1
	023 Move W8, W31
	024 Move [X0+296], W31
	025 Move W10, 4
	026 Move W9, 6
	027 Move W8, W31
	028 Move [X0+296], W31
	029 Move W10, 5
	030 Move W9, 7
	031 Move W9, W31
	032 Move W10, W31
	033 Move W10, 1
	034 Move W9, 4
	035 Move [X0+296], W31
	036 Move W8, 2
	037 Move [X0+284], W8
	038 Move [X0+292], W9
	039 Move [X0+304], W10
	040 Call InputField.EnforceTextHOverflow, X0
	041 Return 

Method: System.Void EnforceTextHOverflow()

Disassembly:
	0x03E26718 LDR V1, [X0 + 0x15C]
	0x03E2671C LDR V2, [X0 + 0x160]
	0x03E26720 LDR V3, [X0 + 0x164]
	0x03E26724 B 0x3E26740
	0x03E26728 LDR X0, [X0 + 0x108]
	0x03E2672C CBZ X0, 0x3E26748
	0x03E26730 LDR X8, [X0]
	0x03E26734 LDR X9, [X8 + 0x298]
	0x03E26738 LDR X1, [X8 + 0x2A0]
	0x03E2673C BLR X9
	0x03E26740 LDR X30, [X31], #0x10
	0x03E26744 RET
	0x03E26748 BL 0x1C16F20
	0x03E2674C STP X30, X19, [X31 - 0x10]!
	0x03E26750 MOV X19, X0
	0x03E26754 ADD X0, X0, 0x158
	0x03E26758 MOV X1, X31
	0x03E2675C BL 0x3E424C8
	0x03E26760 TBZ X0, 0x0, 0x3E26770
	0x03E26764 MOV X0, X19
	0x03E26768 LDP X30, X19, [X31], #0x10
	0x03E2676C B 0x3E263C8
	0x03E26770 LDP X30, X19, [X31], #0x10
	0x03E26774 RET
	0x03E26778 LDRB W0, [X0 + 0x168]
	0x03E2677C RET
	0x03E26780 LDRB W9, [X0 + 0x168]
	0x03E26784 AND W8, W1, 0x1
	0x03E26788 CMP W9, W8
	0x03E2678C B.NE 0x3E26794
	0x03E26790 RET
	0x03E26794 STRB W8, [X0 + 0x168]
	0x03E26798 B 0x3E263C8
	0x03E2679C LDR V0, [X0 + 0x16C]
	0x03E267A0 LDR V1, [X0 + 0x170]
	0x03E267A4 LDR V2, [X0 + 0x174]
	0x03E267A8 LDR V3, [X0 + 0x178]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5C3000
	006 Move X20, 0x2CE000
	007 Move W8, [X21+1794]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2CE000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1794], W8
	019 Move X0, [X20]
	020 Move X20, [X19+264]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {47}
	033 Move X0, [X19+264]
	034 Compare X0, 0
	035 JumpIfEqual {52}
	036 Move W8, [X19+296]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X2, X31
	040 Subtract W8, W8, 1
	041 NotImplemented "Instruction CMP not yet implemented."
	042 NotImplemented "Instruction CSET not yet implemented."
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call Text.set_horizontalOverflow, X0, X1
	046 Return 
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 
	052 Call 0x1C17F20

Method: System.Void SetToCustomIfContentTypeIsNot(UnityEngine.UI.InputField/ContentType[] allowedContentTypes)

Disassembly:
	0x03E27C30 CBNZ W8, 0x3E27C38
	0x03E27C34 BL 0x1C16DFC
	0x03E27C38 MOV X0, X19
	0x03E27C3C LDP X20, X19, [X31 + 0x10]
	0x03E27C40 MOV X1, X31
	0x03E27C44 LDP X30, X21, [X31], #0x20
	0x03E27C48 B 0x3C753C8
	0x03E27C4C STR X30, [X31 - 0x20]!
	0x03E27C50 STP X20, X19, [X31 + 0x10]
	0x03E27C54 ADRP X19, 0x5C1000
	0x03E27C58 ADRP X20, 0x2CC000
	0x03E27C5C LDRB W8, [X19 + 0x6DB]
	0x03E27C60 LDR X20, [X20 + 0x970]
	0x03E27C64 TBNZ X8, 0x0, 0x3E27C88
	0x03E27C68 ADRP X0, 0x2CC000
	0x03E27C6C LDR X0, [X0 + 0x970]
	0x03E27C70 BL 0x1C16CF4
	0x03E27C74 ADRP X0, 0x343000
	0x03E27C78 LDR X0, [X0 + 0xFB8]
	0x03E27C7C BL 0x1C16CF4
	0x03E27C80 MOVZ W8, 0x1
	0x03E27C84 STRB W8, [X19 + 0x6DB]
	0x03E27C88 LDR X0, [X20]
	0x03E27C8C LDR W8, [X0 + 0xE0]
	0x03E27C90 CBNZ W8, 0x3E27C98

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+280]
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X30, [X31+16]
	005 Return 
	006 Compare X1, 0
	007 JumpIfEqual {22}
	008 Move W9, [X1+24]
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move W10, W31
	011 NotImplemented "Instruction CMP not yet implemented."
	012 Add X11, X1, W10
	013 Move W11, [X11+32]
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Add W10, W10, 1
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W1, 9
	018 Move X30, [X31+16]
	019 Call InputField.set_contentType, X0, X1
	020 Return 
	021 Call 0x1C17F28
	022 Call 0x1C17F20

Method: System.Void SetToCustom()

Disassembly:
	0x03E27D20 CSET W0, NE
	0x03E27D24 B 0x3E27D2C
	0x03E27D28 MOVZ W0, 0x1
	0x03E27D2C LDP X30, X19, [X31], #0x10
	0x03E27D30 RET
	0x03E27D34 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move W8, [X0+280]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Return 
	004 Move W1, 9
	005 Call InputField.set_contentType, X0, X1
	006 Return 

Method: System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)

Disassembly:
	0x03E2F758 BL 0x1C16DFC
	0x03E2F75C MOV X0, X21
	0x03E2F760 MOV X1, X20
	0x03E2F764 BL 0x3E34B40
	0x03E2F768 TBZ X0, 0x0, 0x3E2F78C
	0x03E2F76C ADRP X8, 0x2C7000
	0x03E2F770 LDR X8, [X8 + 0x920]
	0x03E2F774 LDR X0, [X8]
	0x03E2F778 LDR W8, [X0 + 0xE0]
	0x03E2F77C CBNZ W8, 0x3E2F784
	0x03E2F780 BL 0x1C16DFC

ISIL:
	001 Move W8, [X0+513]
	002 Compare W8, 0
	003 JumpIfEqual {5}
	004 Move W1, 3
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W8, 1
	007 Move [X0+513], W8
	008 And W2, W2, 1
	009 Move X3, X31
	010 Call Selectable.DoStateTransition, X0, X1, X2
	011 Return 

Method: System.Void CalculateLayoutInputHorizontal()

Disassembly:
	0x03E2F784 MOV X0, X21

ISIL:
	001 Return 

Method: System.Void CalculateLayoutInputVertical()

Disassembly:
	0x03E2F788 BL 0x3E34D34

ISIL:
	001 Return 

Method: System.Single get_minWidth()

Disassembly:
	0x03E2F78C ADRP X8, 0x2EC000
	0x03E2F790 LDR X8, [X8 + 0xA28]

ISIL:
	001 Move S0, 5
	002 Return V0

Method: System.Single get_preferredWidth()

Disassembly:
	0x03E2F794 LDR X0, [X8]
	0x03E2F798 LDR W8, [X0 + 0xE0]
	0x03E2F79C CBNZ W8, 0x3E2F7A4
	0x03E2F7A0 BL 0x1C16DFC
	0x03E2F7A4 ADRP X8, 0x2EC000
	0x03E2F7A8 LDR X8, [X8 + 0xA20]
	0x03E2F7AC MOV X0, X20
	0x03E2F7B0 LDP X20, X19, [X31 + 0x60]
	0x03E2F7B4 LDP X22, X21, [X31 + 0x50]
	0x03E2F7B8 LDR X1, [X8]
	0x03E2F7BC LDP X24, X23, [X31 + 0x40]
	0x03E2F7C0 LDP X26, X25, [X31 + 0x30]
	0x03E2F7C4 LDP X28, X27, [X31 + 0x20]
	0x03E2F7C8 LDP X29, X30, [X31 + 0x10]
	0x03E2F7CC ADD X31, X31, 0x70
	0x03E2F7D0 B 0x28F9A14
	0x03E2F7D4 BL 0x1C16F20
	0x03E2F7D8 STR X30, [X31 - 0x20]!
	0x03E2F7DC STP X20, X19, [X31 + 0x10]
	0x03E2F7E0 ADRP X20, 0x5B9000
	0x03E2F7E4 LDRB W8, [X20 + 0x710]
	0x03E2F7E8 MOV X19, X0
	0x03E2F7EC TBNZ X8, 0x0, 0x3E2F804
	0x03E2F7F0 ADRP X0, 0x2C4000
	0x03E2F7F4 LDR X0, [X0 + 0x598]
	0x03E2F7F8 BL 0x1C16CF4
	0x03E2F7FC MOVZ W8, 0x1
	0x03E2F800 STRB W8, [X20 + 0x710]
	0x03E2F804 MOV X0, X19
	0x03E2F808 MOV X1, X31
	0x03E2F80C BL 0x3E59AD8
	0x03E2F810 MOV X0, X19
	0x03E2F814 BL 0x3E2F0DC
	0x03E2F818 CBZ X0, 0x3E2F86C
	0x03E2F81C ADRP X20, 0x2C4000
	0x03E2F820 LDR X20, [X20 + 0x598]
	0x03E2F824 MOV X1, X31
	0x03E2F828 BL 0x3C3F49C
	0x03E2F82C LDR X8, [X20]
	0x03E2F830 MOV X20, X0
	0x03E2F834 LDR W9, [X8 + 0xE0]
	0x03E2F838 CBNZ W9, 0x3E2F844
	0x03E2F83C MOV X0, X8
	0x03E2F840 BL 0x1C16DFC
	0x03E2F844 MOV X0, X20
	0x03E2F848 MOV X1, X31
	0x03E2F84C BL 0x3C38948
	0x03E2F850 CBZ X19, 0x3E2F86C
	0x03E2F854 AND W8, W0, 0x1
	0x03E2F858 STRB W8, [X19 + 0x31]
	0x03E2F85C MOV X0, X19
	0x03E2F860 LDP X20, X19, [X31 + 0x10]
	0x03E2F864 LDR X30, [X31], #0x20
	0x03E2F868 B 0x3E2F888
	0x03E2F86C BL 0x1C16F20
	0x03E2F870 LDRB W8, [X0 + 0x30]
	0x03E2F874 CBZ W8, 0x3E2F880
	0x03E2F878 STRB W31, [X0 + 0x30]
	0x03E2F87C B 0x3E2F888
	0x03E2F880 RET
	0x03E2F884 B 0x3E2F888
	0x03E2F888 STP D9, D8, [X31 - 0x40]!
	0x03E2F88C STP X30, X23, [X31 + 0x10]
	0x03E2F890 STP X22, X21, [X31 + 0x20]
	0x03E2F894 STP X20, X19, [X31 + 0x30]
	0x03E2F898 LDR X8, [X0]
	0x03E2F89C MOV X19, X0
	0x03E2F8A0 LDP X9, X1, [X8 + 0x1C8]
	0x03E2F8A4 BLR X9
	0x03E2F8A8 TBZ X0, 0x0, 0x3E2FAB0
	0x03E2F8AC MOV X0, X19
	0x03E2F8B0 BL 0x3E2F268
	0x03E2F8B4 TBZ X0, 0x0, 0x3E2FAB0
	0x03E2F8B8 ADD X20, X19, 0x32
	0x03E2F8BC MOV X0, X20
	0x03E2F8C0 MOV X1, X31
	0x03E2F8C4 BL 0x3C3E3A8
	0x03E2F8C8 LDR W8, [X19 + 0x20]
	0x03E2F8CC SUB W9, W8, 0x3
	0x03E2F8D0 CMP W9, 0x2
	0x03E2F8D4 B.CC 0x3E2F940
	0x03E2F8D8 CMP W8, 0x1
	0x03E2F8DC B.EQ 0x3E2FAC4

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+288], D8
	003 Move [X31+296], X29
	004 Move [X31+304], X30
	005 Move [X31+312], X21
	006 Move [X31+320], X20
	007 Move [X31+328], X19
	008 Move X21, 0x5BA000
	009 Move X20, 0x2C5000
	010 Move W8, [X21+1795]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2C5000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1795], W8
	022 Move X0, [X20]
	023 Move X20, [X19+264]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move S0, W31
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {92}
	037 Move X21, 0x5AB000
	038 Move W8, [X21+1935]
	039 Move X20, [X19+264]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x2CD000
	043 Move X0, [X0+3848]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X21+1935], W8
	047 Compare X20, 0
	048 JumpIfEqual {100}
	049 Move X8, 0x2CD000
	050 Move X8, [X8+3848]
	051 Move X0, X20
	052 Move X1, X31
	053 Move X8, [X8]
	054 Move X8, [X8+184]
	055 Move S0, [X8]
	056 Move S1, [X8+4]
	057 Add X8, X31, 96
	058 Call Text.GetGenerationSettings, X0, X1
	059 Add X0, X31, 192
	060 Add X1, X31, 96
	061 Move W2, 96
	062 Call 0x3EB2AC0
	063 Move X0, [X19+264]
	064 Compare X0, 0
	065 JumpIfEqual {100}
	066 Move X1, X31
	067 Call Text.get_cachedTextGeneratorForLayout, X0
	068 Move X20, [X19+384]
	069 Move X21, X0
	070 Add X0, X31, 96
	071 Add X1, X31, 192
	072 Move W2, 96
	073 Call 0x3EB2AC0
	074 Compare X21, 0
	075 JumpIfEqual {100}
	076 Add X0, X31, 0
	077 Add X1, X31, 96
	078 Move W2, 96
	079 Call 0x3EB2AC0
	080 Add X2, X31, 0
	081 Move X0, X21
	082 Move X1, X20
	083 Move X3, X31
	084 Call TextGenerator.GetPreferredWidth, X0, X1, X2
	085 Move X0, [X19+264]
	086 Compare X0, 0
	087 JumpIfEqual {100}
	088 Move X1, X31
	089 Move V8, V0
	090 Call Text.get_pixelsPerUnit, X0
	091 NotImplemented "Instruction FDIV not yet implemented."
	092 Move X20, [X31+320]
	093 Move X19, [X31+328]
	094 Move X30, [X31+304]
	095 Move X21, [X31+312]
	096 Move X29, [X31+296]
	097 Move V8, [X31+288]
	098 Add X31, X31, 336
	099 Return V0
	100 Call 0x1C17F20

Method: System.Single get_flexibleWidth()

Disassembly:
	0x03E2F8E0 CMP W8, 0x2
	0x03E2F8E4 B.NE 0x3E2FAB0

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_minHeight()

Disassembly:
	0x03E2F8E8 MOV X0, X19
	0x03E2F8EC BL 0x3E2F0DC

ISIL:
	001 Move S0, W31
	002 Return V0

Method: System.Single get_preferredHeight()

Disassembly:
	0x03E2F8F0 MOV X2, X0
	0x03E2F8F4 MOVZ W3, 0x1000
	0x03E2F8F8 MOV X0, X20
	0x03E2F8FC MOV X1, X19
	0x03E2F900 MOV X4, X31
	0x03E2F904 BL 0x3C3E3A4
	0x03E2F908 MOV X0, X19
	0x03E2F90C BL 0x3E2F0DC
	0x03E2F910 MOV X20, X0
	0x03E2F914 MOV X0, X19
	0x03E2F918 BL 0x3E2F0DC
	0x03E2F91C CBZ X0, 0x3E2FB70
	0x03E2F920 MOV X1, X31
	0x03E2F924 BL 0x3C3E51C
	0x03E2F928 CBZ X20, 0x3E2FB70
	0x03E2F92C LDR V0, [X19 + 0x24]
	0x03E2F930 MOV X0, X20
	0x03E2F934 MOV W1, W31
	0x03E2F938 FMUL S0, S3, S0
	0x03E2F93C B 0x3E2FB18
	0x03E2F940 LDRB W8, [X19 + 0x31]
	0x03E2F944 CBZ W8, 0x3E2FAB0
	0x03E2F948 MOV X0, X19
	0x03E2F94C BL 0x3E2F0DC
	0x03E2F950 MOV X2, X0
	0x03E2F954 MOVZ W3, 0x3F06
	0x03E2F958 MOV X0, X20
	0x03E2F95C MOV X1, X19
	0x03E2F960 MOV X4, X31
	0x03E2F964 BL 0x3C3E3A4
	0x03E2F968 MOV X0, X19
	0x03E2F96C BL 0x3E2F0DC
	0x03E2F970 ADRP X21, 0x5AA000
	0x03E2F974 LDRB W8, [X21 + 0x78F]
	0x03E2F978 MOV X20, X0
	0x03E2F97C CBNZ W8, 0x3E2F994
	0x03E2F980 ADRP X0, 0x2CC000
	0x03E2F984 LDR X0, [X0 + 0xF08]
	0x03E2F988 BL 0x1C16CF4
	0x03E2F98C MOVZ W8, 0x1
	0x03E2F990 STRB W8, [X21 + 0x78F]
	0x03E2F994 CBZ X20, 0x3E2FB70
	0x03E2F998 ADRP X22, 0x2CC000
	0x03E2F99C LDR X22, [X22 + 0xF08]
	0x03E2F9A0 MOV X0, X20
	0x03E2F9A4 MOV X1, X31
	0x03E2F9A8 LDR X8, [X22]
	0x03E2F9AC LDR X8, [X8 + 0xB8]
	0x03E2F9B0 LDP S0, S1, [X8]
	0x03E2F9B4 BL 0x3C3E648
	0x03E2F9B8 MOV X0, X19
	0x03E2F9BC BL 0x3E2F0DC
	0x03E2F9C0 ADRP X23, 0x5B2000
	0x03E2F9C4 LDRB W8, [X23 + 0xA48]
	0x03E2F9C8 MOV X20, X0
	0x03E2F9CC CBNZ W8, 0x3E2F9E4
	0x03E2F9D0 ADRP X0, 0x2CC000
	0x03E2F9D4 LDR X0, [X0 + 0xF08]
	0x03E2F9D8 BL 0x1C16CF4
	0x03E2F9DC MOVZ W8, 0x1
	0x03E2F9E0 STRB W8, [X23 + 0xA48]
	0x03E2F9E4 CBZ X20, 0x3E2FB70
	0x03E2F9E8 LDR X8, [X22]
	0x03E2F9EC MOV X0, X20
	0x03E2F9F0 MOV X1, X31
	0x03E2F9F4 LDR X8, [X8 + 0xB8]
	0x03E2F9F8 LDP S0, S1, [X8 + 0x8]
	0x03E2F9FC BL 0x3C3E764
	0x03E2FA00 MOV X0, X19
	0x03E2FA04 BL 0x3E2F0DC
	0x03E2FA08 LDRB W8, [X21 + 0x78F]
	0x03E2FA0C MOV X20, X0
	0x03E2FA10 CBNZ W8, 0x3E2FA28
	0x03E2FA14 ADRP X0, 0x2CC000
	0x03E2FA18 LDR X0, [X0 + 0xF08]
	0x03E2FA1C BL 0x1C16CF4
	0x03E2FA20 MOVZ W8, 0x1
	0x03E2FA24 STRB W8, [X21 + 0x78F]

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+288], D8
	003 Move [X31+296], X29
	004 Move [X31+304], X30
	005 Move [X31+312], X21
	006 Move [X31+320], X20
	007 Move [X31+328], X19
	008 Move X21, 0x5BA000
	009 Move X20, 0x2C5000
	010 Move W8, [X21+1796]
	011 Move X20, [X20+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2C5000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1796], W8
	022 Move X0, [X20]
	023 Move X20, [X19+264]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move S0, W31
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {86}
	037 Move X20, [X19+264]
	038 Compare X20, 0
	039 JumpIfEqual {94}
	040 Move X0, X20
	041 Move X1, X31
	042 Call Graphic.get_rectTransform, X0
	043 Compare X0, 0
	044 JumpIfEqual {94}
	045 Move X1, X31
	046 Call RectTransform.get_rect, X0
	047 Move V0, V2
	048 Add X8, X31, 96
	049 Move S1, W31
	050 Move X0, X20
	051 Move X1, X31
	052 Call Text.GetGenerationSettings, X0, X1
	053 Add X0, X31, 192
	054 Add X1, X31, 96
	055 Move W2, 96
	056 Call 0x3EB2AC0
	057 Move X0, [X19+264]
	058 Compare X0, 0
	059 JumpIfEqual {94}
	060 Move X1, X31
	061 Call Text.get_cachedTextGeneratorForLayout, X0
	062 Move X20, [X19+384]
	063 Move X21, X0
	064 Add X0, X31, 96
	065 Add X1, X31, 192
	066 Move W2, 96
	067 Call 0x3EB2AC0
	068 Compare X21, 0
	069 JumpIfEqual {94}
	070 Add X0, X31, 0
	071 Add X1, X31, 96
	072 Move W2, 96
	073 Call 0x3EB2AC0
	074 Add X2, X31, 0
	075 Move X0, X21
	076 Move X1, X20
	077 Move X3, X31
	078 Call TextGenerator.GetPreferredHeight, X0, X1, X2
	079 Move X0, [X19+264]
	080 Compare X0, 0
	081 JumpIfEqual {94}
	082 Move X1, X31
	083 Move V8, V0
	084 Call Text.get_pixelsPerUnit, X0
	085 NotImplemented "Instruction FDIV not yet implemented."
	086 Move X20, [X31+320]
	087 Move X19, [X31+328]
	088 Move X30, [X31+304]
	089 Move X21, [X31+312]
	090 Move X29, [X31+296]
	091 Move V8, [X31+288]
	092 Add X31, X31, 336
	093 Return V0
	094 Call 0x1C17F20

Method: System.Single get_flexibleHeight()

Disassembly:
	0x03E2FA28 CBZ X20, 0x3E2FB70
	0x03E2FA2C LDR X8, [X22]

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Int32 get_layoutPriority()

Disassembly:
	0x03E2FA30 MOV X0, X20
	0x03E2FA34 MOV X1, X31

ISIL:
	001 Move W0, 1
	002 Return X0

Method: System.Void .cctor()

Disassembly:
	0x03E2FA38 LDR X8, [X8 + 0xB8]
	0x03E2FA3C LDP S0, S1, [X8]
	0x03E2FA40 BL 0x3C3E880
	0x03E2FA44 LDRB W8, [X21 + 0x78F]
	0x03E2FA48 CBNZ W8, 0x3E2FA60
	0x03E2FA4C ADRP X0, 0x2CC000
	0x03E2FA50 LDR X0, [X0 + 0xF08]
	0x03E2FA54 BL 0x1C16CF4
	0x03E2FA58 MOVZ W8, 0x1
	0x03E2FA5C STRB W8, [X21 + 0x78F]
	0x03E2FA60 LDR X8, [X22]
	0x03E2FA64 MOV X0, X19
	0x03E2FA68 LDR X8, [X8 + 0xB8]
	0x03E2FA6C LDP S8, S9, [X8]
	0x03E2FA70 BL 0x3E2FB74
	0x03E2FA74 LDR V2, [X19 + 0x24]
	0x03E2FA78 LDR W8, [X19 + 0x20]
	0x03E2FA7C FMUL S1, S1, S2
	0x03E2FA80 FCMP S1, S0
	0x03E2FA84 CSET W9, MI
	0x03E2FA88 CMP W8, 0x3
	0x03E2FA8C CSET W8, EQ
	0x03E2FA90 CMP W9, W8
	0x03E2FA94 B.EQ 0x3E2FB30
	0x03E2FA98 FDIV S0, S0, S2
	0x03E2FA9C MOVZ W1, 0x1
	0x03E2FAA0 MOV X0, X19
	0x03E2FAA4 BL 0x3E2FC6C
	0x03E2FAA8 MOV V9.16B, V0.16B
	0x03E2FAAC B 0x3E2FB44
	0x03E2FAB0 LDP X20, X19, [X31 + 0x30]
	0x03E2FAB4 LDP X22, X21, [X31 + 0x20]
	0x03E2FAB8 LDP X30, X23, [X31 + 0x10]
	0x03E2FABC LDP D9, D8, [X31], #0x40
	0x03E2FAC0 RET
	0x03E2FAC4 MOV X0, X19
	0x03E2FAC8 BL 0x3E2F0DC
	0x03E2FACC MOV X2, X0
	0x03E2FAD0 MOVZ W3, 0x2000
	0x03E2FAD4 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5BA000
	007 Move X22, 0x2CE000
	008 Move X19, 0x33D000
	009 Move X20, 0x33C000
	010 Move W8, [X21+1797]
	011 Move X22, [X22+2264]
	012 Move X19, [X19+24]
	013 Move X20, [X20+4024]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x2CE000
	019 Move X0, [X0+2264]
	020 Call 0x1C17CF4
	021 Move X0, 0x33C000
	022 Move X0, [X0+4024]
	023 Call 0x1C17CF4
	024 Move X0, 0x33D000
	025 Move X0, [X0+24]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1797], W8
	029 Move X0, [X22]
	030 Move W1, 6
	031 Call 0x1C17D6C
	032 Move X1, [X19]
	033 Move X2, X31
	034 Move X19, X0
	035 Call RuntimeHelpers.InitializeArray, X0, X1
	036 Move X8, [X20]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X8, [X8+184]
	040 Move [X8], X19
	041 Move X8, [X20]
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X8, [X8+184]
	045 NotImplemented "Instruction STRH not yet implemented."
	046 Move X30, [X31+48]
	047 Return 

Method: UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()

Disassembly:
	0x03E2FAD8 MOV X1, X19
	0x03E2FADC MOV X4, X31

ISIL:
	001 Move X1, X31
	002 Call Component.get_transform, X0
	003 Return X0

