Type: UnityEngine.UI.RectMask2D

Method: UnityEngine.Vector4 get_padding()

Disassembly:
	0x03E3AD30 CMP X11, X1
	0x03E3AD34 B.EQ 0x3E3AD54
	0x03E3AD38 SUBS X9, X9, 0x1

ISIL:
	001 Move S0, [X0+100]
	002 Move S1, [X0+104]
	003 Move S2, [X0+108]
	004 Move S3, [X0+112]
	005 Return X0

Method: System.Void set_padding(UnityEngine.Vector4 value)

Disassembly:
	0x03E3AD3C ADD X10, X10, 0x10
	0x03E3AD40 B.NE 0x3E3AD2C
	0x03E3AD44 MOVZ W2, 0x5
	0x03E3AD48 MOV X0, X20

ISIL:
	001 Move X1, X31
	002 Move [X0+100], S0
	003 Move [X0+108], S1
	004 Move [X0+108], S2
	005 Move [X0+116], S3
	006 Call MaskUtilities.Notify2DMaskStateChanged, X0
	007 Return 

Method: UnityEngine.Vector2Int get_softness()

Disassembly:
	0x03E3AD4C BL 0x1C5C788
	0x03E3AD50 B 0x3E3AD64

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 Return X0

Method: System.Void set_softness(UnityEngine.Vector2Int value)

Disassembly:
	0x03E3AD54 LDR W9, [X10]
	0x03E3AD58 ADD W9, W9, 0x5
	0x03E3AD5C ADD X8, X8, W9, 0x4, SXTW
	0x03E3AD60 ADD X0, X8, 0x138
	0x03E3AD64 LDP X8, X1, [X0]
	0x03E3AD68 UBFM X9, X27, 0x20, 0x3F

ISIL:
	001 Move D0, X1
	002 NotImplemented "Instruction MOVI not yet implemented."
	003 NotImplemented "Instruction SMAX not yet implemented."
	004 Move X1, X31
	005 Move [X0+116], D0
	006 Call MaskUtilities.Notify2DMaskStateChanged, X0
	007 Return 

Method: UnityEngine.Canvas get_Canvas()

Disassembly:
	0x03E3AD6C SCVTF S1, W9
	0x03E3AD70 SCVTF S0, W27
	0x03E3AD74 MOV X0, X20
	0x03E3AD78 BLR X8
	0x03E3AD7C B 0x3E3ACF8
	0x03E3AD80 LDR X1, [X26]
	0x03E3AD84 ADD X0, X31, 0x30
	0x03E3AD88 BL 0x2BC3C60
	0x03E3AD8C LDR X0, [X19 + 0x30]
	0x03E3AD90 CBZ X0, 0x3E3AE0C
	0x03E3AD94 LDR X1, [X24]
	0x03E3AD98 ADD X8, X31, 0x18
	0x03E3AD9C BL 0x2DBE924
	0x03E3ADA0 LDR X1, [X23]
	0x03E3ADA4 ADD X0, X31, 0x18
	0x03E3ADA8 BL 0x2BC3C64
	0x03E3ADAC TBZ X0, 0x0, 0x3E3ADDC
	0x03E3ADB0 LDR X0, [X31 + 0x28]
	0x03E3ADB4 CBZ X0, 0x3E3AE04
	0x03E3ADB8 LDR X8, [X0]
	0x03E3ADBC LDUR X9, [X19 + 0x74]
	0x03E3ADC0 LDR X1, [X8 + 0x510]
	0x03E3ADC4 LDR X10, [X8 + 0x508]
	0x03E3ADC8 UBFM X8, X9, 0x20, 0x3F
	0x03E3ADCC SCVTF S1, W8
	0x03E3ADD0 SCVTF S0, W9
	0x03E3ADD4 BLR X10
	0x03E3ADD8 B 0x3E3ADA0
	0x03E3ADDC LDR X1, [X22]
	0x03E3ADE0 ADD X0, X31, 0x18
	0x03E3ADE4 BL 0x2BC3C60
	0x03E3ADE8 LDP X20, X19, [X31 + 0x90]
	0x03E3ADEC LDP X22, X21, [X31 + 0x80]
	0x03E3ADF0 LDP X24, X23, [X31 + 0x70]
	0x03E3ADF4 LDP X26, X25, [X31 + 0x60]
	0x03E3ADF8 LDP X30, X27, [X31 + 0x50]
	0x03E3ADFC ADD X31, X31, 0xA0
	0x03E3AE00 RET
	0x03E3AE04 BL 0x1C16F20
	0x03E3AE08 BL 0x1C16F20
	0x03E3AE0C BL 0x1C16F20
	0x03E3AE10 B 0x3E3AE78
	0x03E3AE14 B 0x3E3AE20
	0x03E3AE18 B 0x3E3AE20
	0x03E3AE1C B 0x3E3AE78
	0x03E3AE20 MOV X20, X0
	0x03E3AE24 CMP W1, 0x1
	0x03E3AE28 B.NE 0x3E3AE54
	0x03E3AE2C MOV X0, X20
	0x03E3AE30 BL 0x3EB1AD0
	0x03E3AE34 LDR X19, [X0]
	0x03E3AE38 BL 0x3EB1AE0
	0x03E3AE3C LDR X1, [X22]
	0x03E3AE40 ADD X0, X31, 0x18
	0x03E3AE44 BL 0x2BC3C60
	0x03E3AE48 CBZ X19, 0x3E3ADE8
	0x03E3AE4C MOV X0, X19
	0x03E3AE50 BL 0x1C16F18
	0x03E3AE54 MOV X19, X31
	0x03E3AE58 B 0x3E3AE60
	0x03E3AE5C MOV X20, X0
	0x03E3AE60 LDR X1, [X22]
	0x03E3AE64 ADD X0, X31, 0x18
	0x03E3AE68 BL 0x2BC3C60
	0x03E3AE6C CBZ X19, 0x3E3AEC8
	0x03E3AE70 MOV X0, X19
	0x03E3AE74 BL 0x1C16F18
	0x03E3AE78 MOV X20, X0
	0x03E3AE7C CMP W1, 0x1
	0x03E3AE80 B.NE 0x3E3AEAC
	0x03E3AE84 MOV X0, X20
	0x03E3AE88 BL 0x3EB1AD0
	0x03E3AE8C LDR X21, [X0]
	0x03E3AE90 BL 0x3EB1AE0
	0x03E3AE94 LDR X1, [X26]
	0x03E3AE98 ADD X0, X31, 0x30
	0x03E3AE9C BL 0x2BC3C60
	0x03E3AEA0 CBZ X21, 0x3E3AD8C
	0x03E3AEA4 MOV X0, X21
	0x03E3AEA8 BL 0x1C16F18
	0x03E3AEAC MOV X21, X31
	0x03E3AEB0 B 0x3E3AEB8
	0x03E3AEB4 MOV X20, X0
	0x03E3AEB8 LDR X1, [X26]
	0x03E3AEBC ADD X0, X31, 0x30
	0x03E3AEC0 BL 0x2BC3C60
	0x03E3AEC4 CBNZ X21, 0x3E3AED0
	0x03E3AEC8 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5AF000
	006 Move X20, 0x2BA000
	007 Move W8, [X21+1929]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {37}
	014 Move X0, 0x329000
	015 Move X0, [X0+760]
	016 Call 0x1C17CF4
	017 Move X0, 0x329000
	018 Move X0, [X0+768]
	019 Call 0x1C17CF4
	020 Move X0, 0x329000
	021 Move X0, [X0+776]
	022 Call 0x1C17CF4
	023 Move X0, 0x31F000
	024 Move X0, [X0+1896]
	025 Call 0x1C17CF4
	026 Move X0, 0x31F000
	027 Move X0, [X0+1904]
	028 Call 0x1C17CF4
	029 Move X0, 0x31F000
	030 Move X0, [X0+1912]
	031 Call 0x1C17CF4
	032 Move X0, 0x2BA000
	033 Move X0, [X0+1432]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+1929], W8
	037 Move X0, [X20]
	038 Move X20, [X19+128]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {95}
	051 Move X21, 0x329000
	052 Move X21, [X21+776]
	053 Move X20, 0x329000
	054 Move X0, [X21]
	055 Move W8, [X0+224]
	056 Move X20, [X20+760]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, [X20]
	061 Call CollectionPool`2<Object, Object>.Get
	062 Move X20, X0
	063 Move X0, X19
	064 Move X1, X31
	065 Call Component.get_gameObject, X0
	066 Compare X0, 0
	067 JumpIfEqual {101}
	068 Move X8, 0x31F000
	069 Move X8, [X8+1896]
	070 Move W1, W31
	071 Move X2, X20
	072 Move X3, [X8]
	073 Call 0x21E74C8, X0, X1, X2
	074 Compare X20, 0
	075 JumpIfEqual {101}
	076 Move W8, [X20+24]
	077 Subtract W1, W8, 1
	078 Move X8, 0x31F000
	079 Move X8, [X8+1912]
	080 Move X0, X20
	081 Move X2, [X8]
	082 Call List`1<Object>.get_Item, X0, X1
	083 Move [X19+128], X0
	084 Move [X19+128], X31
	085 Move X0, [X21]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X8, 0x329000
	091 Move X8, [X8+768]
	092 Move X0, X20
	093 Move X1, [X8]
	094 Call CollectionPool`2<Object, Object>.Release, X0
	095 Move X0, [X19+128]
	096 Move X20, [X31+16]
	097 Move X19, [X31+24]
	098 Move X30, [X31+32]
	099 Move X21, [X31+40]
	100 Return X0
	101 Call 0x1C17F20

Method: UnityEngine.Rect get_canvasRect()

Disassembly:
	0x03E3AECC BL 0x1D2C690
	0x03E3AED0 MOV X0, X21
	0x03E3AED4 BL 0x1C16F18
	0x03E3AED8 BL 0x1990590
	0x03E3AEDC STP X30, X21, [X31 - 0x20]!
	0x03E3AEE0 STP X20, X19, [X31 + 0x10]
	0x03E3AEE4 ADRP X21, 0x5AE000
	0x03E3AEE8 LDRB W8, [X21 + 0x790]
	0x03E3AEEC MOV X20, X1
	0x03E3AEF0 MOV X19, X0
	0x03E3AEF4 TBNZ X8, 0x0, 0x3E3AF30
	0x03E3AEF8 ADRP X0, 0x331000
	0x03E3AEFC LDR X0, [X0 + 0x318]
	0x03E3AF00 BL 0x1C16CF4
	0x03E3AF04 ADRP X0, 0x331000
	0x03E3AF08 LDR X0, [X0 + 0x320]
	0x03E3AF0C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, [X0+32]
	006 Move X21, X0
	007 Call RectMask2D.get_rectTransform, X0
	008 Move X20, X0
	009 Move X0, X21
	010 Call RectMask2D.get_Canvas, X0
	011 Compare X19, 0
	012 JumpIfEqual {23}
	013 Move X2, X0
	014 Move X0, X19
	015 Move X1, X20
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X3, X31
	019 Move X30, [X31+32]
	020 Move X21, [X31+40]
	021 Call RectangularVertexClipper.GetCanvasRect, X0, X1, X2
	022 Return X0
	023 Call 0x1C17F20

Method: UnityEngine.RectTransform get_rectTransform()

Disassembly:
	0x03E3AF10 ADRP X0, 0x331000
	0x03E3AF14 LDR X0, [X0 + 0x200]
	0x03E3AF18 BL 0x1C16CF4
	0x03E3AF1C ADRP X0, 0x2B9000
	0x03E3AF20 LDR X0, [X0 + 0x598]
	0x03E3AF24 BL 0x1C16CF4
	0x03E3AF28 MOVZ W8, 0x1
	0x03E3AF2C STRB W8, [X21 + 0x790]
	0x03E3AF30 CBZ X20, 0x3E3AFE0
	0x03E3AF34 ADRP X8, 0x331000
	0x03E3AF38 LDR X8, [X8 + 0x200]
	0x03E3AF3C MOVZ W9, 0x1
	0x03E3AF40 STRB W9, [X19 + 0x40]
	0x03E3AF44 LDR X10, [X20]
	0x03E3AF48 LDR X9, [X8]
	0x03E3AF4C LDRB W8, [X10 + 0x130]
	0x03E3AF50 LDRB W11, [X9 + 0x130]
	0x03E3AF54 CMP W8, W11
	0x03E3AF58 ADRP X8, 0x2B9000
	0x03E3AF5C LDR X8, [X8 + 0x598]
	0x03E3AF60 B.CS 0x3E3AF6C
	0x03E3AF64 MOV X21, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5AF000
	005 Move W8, [X20+1930]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2BC000
	012 Move X0, [X0+1720]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1930], W8
	016 Move X0, [X19+40]
	017 Compare X0, 0
	018 JumpIfNotEqual {25}
	019 Move X8, 0x2BC000
	020 Move X8, [X8+1720]
	021 Move X0, X19
	022 Move X1, [X8]
	023 Call 0x21A4894, X0
	024 Move [X19+40], X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03E3AF68 B 0x3E3AF80
	0x03E3AF6C LDR X10, [X10 + 0xC8]
	0x03E3AF70 ADD X10, X10, X11, 0x3, LSL
	0x03E3AF74 LDUR X10, [X10 - 0x8]
	0x03E3AF78 CMP X10, X9
	0x03E3AF7C CSEL X21, X20, X31, EQ
	0x03E3AF80 LDR X0, [X8]
	0x03E3AF84 LDR W8, [X0 + 0xE0]
	0x03E3AF88 CBNZ W8, 0x3E3AF90
	0x03E3AF8C BL 0x1C16DFC
	0x03E3AF90 MOV X0, X21
	0x03E3AF94 MOV X1, X31
	0x03E3AF98 MOV X2, X31
	0x03E3AF9C BL 0x3C3883C
	0x03E3AFA0 TBZ X0, 0x0, 0x3E3AFBC
	0x03E3AFA4 LDR X0, [X19 + 0x38]
	0x03E3AFA8 CBZ X0, 0x3E3AFEC
	0x03E3AFAC ADRP X8, 0x331000
	0x03E3AFB0 LDR X8, [X8 + 0x318]
	0x03E3AFB4 MOV X1, X20
	0x03E3AFB8 B 0x3E3AFD0
	0x03E3AFBC LDR X0, [X19 + 0x30]
	0x03E3AFC0 CBZ X0, 0x3E3AFEC
	0x03E3AFC4 ADRP X8, 0x331000
	0x03E3AFC8 LDR X8, [X8 + 0x320]
	0x03E3AFCC MOV X1, X21
	0x03E3AFD0 LDR X2, [X8]
	0x03E3AFD4 BL 0x2DBEF30
	0x03E3AFD8 MOVZ W8, 0x1
	0x03E3AFDC STRB W8, [X19 + 0x60]
	0x03E3AFE0 LDP X20, X19, [X31 + 0x10]
	0x03E3AFE4 LDP X30, X21, [X31], #0x20
	0x03E3AFE8 RET
	0x03E3AFEC BL 0x1C16F20
	0x03E3AFF0 STR X30, [X31 - 0x30]!
	0x03E3AFF4 STP X22, X21, [X31 + 0x10]
	0x03E3AFF8 STP X20, X19, [X31 + 0x20]
	0x03E3AFFC ADRP X21, 0x5AE000
	0x03E3B000 LDRB W8, [X21 + 0x791]
	0x03E3B004 MOV X20, X1
	0x03E3B008 MOV X19, X0
	0x03E3B00C TBNZ X8, 0x0, 0x3E3B054
	0x03E3B010 ADRP X0, 0x330000
	0x03E3B014 LDR X0, [X0 + 0x328]
	0x03E3B018 BL 0x1C16CF4
	0x03E3B01C ADRP X0, 0x330000
	0x03E3B020 LDR X0, [X0 + 0x330]
	0x03E3B024 BL 0x1C16CF4
	0x03E3B028 ADRP X0, 0x330000
	0x03E3B02C LDR X0, [X0 + 0x260]
	0x03E3B030 BL 0x1C16CF4
	0x03E3B034 ADRP X0, 0x330000
	0x03E3B038 LDR X0, [X0 + 0x200]
	0x03E3B03C BL 0x1C16CF4
	0x03E3B040 ADRP X0, 0x2B8000
	0x03E3B044 LDR X0, [X0 + 0x598]
	0x03E3B048 BL 0x1C16CF4
	0x03E3B04C MOVZ W8, 0x1
	0x03E3B050 STRB W8, [X21 + 0x791]
	0x03E3B054 CBZ X20, 0x3E3B17C
	0x03E3B058 MOVZ W8, 0x1
	0x03E3B05C STRB W8, [X19 + 0x40]
	0x03E3B060 ADRP X10, 0x330000
	0x03E3B064 LDR X8, [X20]
	0x03E3B068 LDR X10, [X10 + 0x260]
	0x03E3B06C ADRP X21, 0x330000
	0x03E3B070 LDRH W9, [X8 + 0x12E]
	0x03E3B074 LDR X1, [X10]
	0x03E3B078 LDR X21, [X21 + 0x200]
	0x03E3B07C CBZ X9, 0x3E3B0A0
	0x03E3B080 LDR X10, [X8 + 0xB0]
	0x03E3B084 ADD X10, X10, 0x8
	0x03E3B088 LDUR X11, [X10 - 0x8]
	0x03E3B08C CMP X11, X1
	0x03E3B090 B.EQ 0x3E3B0B0
	0x03E3B094 SUBS X9, X9, 0x1
	0x03E3B098 ADD X10, X10, 0x10
	0x03E3B09C B.NE 0x3E3B088
	0x03E3B0A0 MOVZ W2, 0x4
	0x03E3B0A4 MOV X0, X20
	0x03E3B0A8 BL 0x1C5C788
	0x03E3B0AC B 0x3E3B0C0
	0x03E3B0B0 LDR W9, [X10]
	0x03E3B0B4 ADD W9, W9, 0x4
	0x03E3B0B8 ADD X8, X8, W9, 0x4, SXTW
	0x03E3B0BC ADD X0, X8, 0x138
	0x03E3B0C0 LDP X8, X2, [X0]
	0x03E3B0C4 ADRP X22, 0x2B8000
	0x03E3B0C8 LDR X22, [X22 + 0x598]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X20, 0x5AF000
	013 Move X28, 0x332000
	014 Move X27, 0x332000
	015 Move X26, 0x332000
	016 Move X25, 0x332000
	017 Move X24, 0x332000
	018 Move X23, 0x332000
	019 Move X22, 0x332000
	020 Move X21, 0x2BC000
	021 Move X28, [X28+656]
	022 Move X27, [X27+664]
	023 Move X26, [X26+672]
	024 Move W8, [X20+1931]
	025 Move X25, [X25+680]
	026 Move X24, [X24+688]
	027 Move X23, [X23+696]
	028 Move X22, [X22+704]
	029 Move X21, [X21+2480]
	030 Move X19, X0
	031 Move TEMP, X8
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {61}
	035 Move X0, 0x332000
	036 Move X0, [X0+672]
	037 Call 0x1C17CF4
	038 Move X0, 0x332000
	039 Move X0, [X0+688]
	040 Call 0x1C17CF4
	041 Move X0, 0x332000
	042 Move X0, [X0+664]
	043 Call 0x1C17CF4
	044 Move X0, 0x332000
	045 Move X0, [X0+680]
	046 Call 0x1C17CF4
	047 Move X0, 0x331000
	048 Move X0, [X0+704]
	049 Call 0x1C17CF4
	050 Move X0, 0x331000
	051 Move X0, [X0+696]
	052 Call 0x1C17CF4
	053 Move X0, 0x331000
	054 Move X0, [X0+656]
	055 Call 0x1C17CF4
	056 Move X0, 0x2BB000
	057 Move X0, [X0+2480]
	058 Call 0x1C17CF4
	059 Move W8, 1
	060 Move [X20+1931], W8
	061 Move X0, [X28]
	062 Call 0x1C17F10
	063 Move X1, X31
	064 Move X20, X0
	065 Call RectangularVertexClipper..ctor, X0
	066 Move [X19+32], X20
	067 Move X0, [X27]
	068 Call 0x1C17F10
	069 Move X1, [X26]
	070 Move X20, X0
	071 Call HashSet`1<Object>..ctor, X0
	072 Move [X19+48], X20
	073 Move X0, [X25]
	074 Call 0x1C17F10
	075 Move X1, [X24]
	076 Move X20, X0
	077 Call HashSet`1<Object>..ctor, X0
	078 Move [X19+56], X20
	079 Move X0, [X23]
	080 Call 0x1C17F10
	081 Move X1, [X22]
	082 Move X20, X0
	083 Call List`1<Object>..ctor, X0
	084 Move [X19+72], X20
	085 Move X0, [X21]
	086 Move W1, 4
	087 Call 0x1C17D6C
	088 Move [X19+136], X0
	089 Move X0, X19
	090 Move X20, [X31+80]
	091 Move X19, [X31+88]
	092 Move X22, [X31+64]
	093 Move X21, [X31+72]
	094 Move X24, [X31+48]
	095 Move X23, [X31+56]
	096 Move X26, [X31+32]
	097 Move X25, [X31+40]
	098 Move X28, [X31+16]
	099 Move X27, [X31+24]
	100 Move X1, X31
	101 Move X30, [X31+96]
	102 Call UIBehaviour..ctor, X0
	103 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03E3B0CC FMOV S0, W31
	0x03E3B0D0 FMOV S1, W31
	0x03E3B0D4 FMOV S2, W31
	0x03E3B0D8 FMOV S3, W31
	0x03E3B0DC MOV X0, X20
	0x03E3B0E0 MOV W1, W31
	0x03E3B0E4 BLR X8
	0x03E3B0E8 LDR X9, [X20]
	0x03E3B0EC LDR X8, [X21]
	0x03E3B0F0 LDRB W11, [X9 + 0x130]
	0x03E3B0F4 LDRB W10, [X8 + 0x130]
	0x03E3B0F8 CMP W11, W10
	0x03E3B0FC B.CS 0x3E3B108

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call UIBehaviour.OnEnable, X0
	006 Move W8, 1
	007 Move X0, X19
	008 Move X1, X31
	009 Move [X19+64], W8
	010 Call ClipperRegistry.Register, X0
	011 Move X0, X19
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call MaskUtilities.Notify2DMaskStateChanged, X0
	016 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03E3B100 MOV X21, X31
	0x03E3B104 B 0x3E3B11C
	0x03E3B108 LDR X9, [X9 + 0xC8]
	0x03E3B10C ADD X9, X9, X10, 0x3, LSL
	0x03E3B110 LDUR X9, [X9 - 0x8]
	0x03E3B114 CMP X9, X8
	0x03E3B118 CSEL X21, X20, X31, EQ
	0x03E3B11C LDR X0, [X22]
	0x03E3B120 LDR W8, [X0 + 0xE0]
	0x03E3B124 CBNZ W8, 0x3E3B12C
	0x03E3B128 BL 0x1C16DFC
	0x03E3B12C MOV X0, X21
	0x03E3B130 MOV X1, X31
	0x03E3B134 MOV X2, X31
	0x03E3B138 BL 0x3C3883C
	0x03E3B13C TBZ X0, 0x0, 0x3E3B158
	0x03E3B140 LDR X0, [X19 + 0x38]
	0x03E3B144 CBZ X0, 0x3E3B18C
	0x03E3B148 ADRP X8, 0x330000
	0x03E3B14C LDR X8, [X8 + 0x330]
	0x03E3B150 MOV X1, X20
	0x03E3B154 B 0x3E3B16C
	0x03E3B158 LDR X0, [X19 + 0x30]
	0x03E3B15C CBZ X0, 0x3E3B18C
	0x03E3B160 ADRP X8, 0x330000
	0x03E3B164 LDR X8, [X8 + 0x328]
	0x03E3B168 MOV X1, X21
	0x03E3B16C LDR X2, [X8]
	0x03E3B170 BL 0x2DBE67C
	0x03E3B174 MOVZ W8, 0x1
	0x03E3B178 STRB W8, [X19 + 0x60]
	0x03E3B17C LDP X20, X19, [X31 + 0x20]
	0x03E3B180 LDP X22, X21, [X31 + 0x10]
	0x03E3B184 LDR X30, [X31], #0x30
	0x03E3B188 RET
	0x03E3B18C BL 0x1C16F20
	0x03E3B190 STP X30, X19, [X31 - 0x10]!
	0x03E3B194 MOV X1, X31
	0x03E3B198 MOV X19, X0
	0x03E3B19C STR X31, [X0 + 0x80]
	0x03E3B1A0 BL 0x3E59AD8
	0x03E3B1A4 MOVZ W8, 0x1
	0x03E3B1A8 STRB W8, [X19 + 0x40]
	0x03E3B1AC LDP X30, X19, [X31], #0x10
	0x03E3B1B0 RET
	0x03E3B1B4 STP X30, X19, [X31 - 0x10]!
	0x03E3B1B8 MOV X1, X31
	0x03E3B1BC MOV X19, X0
	0x03E3B1C0 STR X31, [X0 + 0x80]
	0x03E3B1C4 BL 0x3E59ACC
	0x03E3B1C8 MOVZ W8, 0x1
	0x03E3B1CC STRB W8, [X19 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5AE000
	005 Move W8, [X20+1932]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x331000
	012 Move X0, [X0+712]
	013 Call 0x1C17CF4
	014 Move X0, 0x331000
	015 Move X0, [X0+720]
	016 Call 0x1C17CF4
	017 Move X0, 0x331000
	018 Move X0, [X0+640]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1932], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call UIBehaviour.OnDisable, X0
	025 Move X0, [X19+56]
	026 Compare X0, 0
	027 JumpIfEqual {62}
	028 Move X8, 0x331000
	029 Move X8, [X8+712]
	030 Move X1, [X8]
	031 Call HashSet`1<Object>.Clear, X0
	032 Move X0, [X19+48]
	033 Compare X0, 0
	034 JumpIfEqual {62}
	035 Move X8, 0x331000
	036 Move X8, [X8+720]
	037 Move X1, [X8]
	038 Call HashSet`1<Object>.Clear, X0
	039 Move X8, [X19+72]
	040 Compare X8, 0
	041 JumpIfEqual {62}
	042 Move W2, [X8+24]
	043 Move W9, [X8+28]
	044 Add W9, W9, 1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move [X8+24], W31
	047 Move [X8+28], W9
	048 Move X0, [X8+16]
	049 Move W1, W31
	050 Move X3, X31
	051 Call Array.Clear, X0, X1, X2
	052 Move X0, X19
	053 Move X1, X31
	054 Call ClipperRegistry.Disable, X0
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X1, X31
	059 Move X30, [X31+32]
	060 Call MaskUtilities.Notify2DMaskStateChanged, X0
	061 Return 
	062 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03E3B1D0 LDP X30, X19, [X31], #0x10
	0x03E3B1D4 RET
	0x03E3B1D8 LDR X0, [X0 + 0x100]
	0x03E3B1DC RET
	0x03E3B1E0 STR X30, [X31 - 0x30]!
	0x03E3B1E4 STP X22, X21, [X31 + 0x10]
	0x03E3B1E8 STP X20, X19, [X31 + 0x20]
	0x03E3B1EC ADRP X22, 0x5AD000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call ClipperRegistry.Unregister, X0
	006 Move X0, X19
	007 Move X1, X31
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call UIBehaviour.OnDestroy, X0
	011 Return 

Method: System.Boolean IsRaycastLocationValid(UnityEngine.Vector2 sp, UnityEngine.Camera eventCamera)

Disassembly:
	0x03E3B1F0 ADRP X21, 0x330000
	0x03E3B1F4 LDRB W8, [X22 + 0x792]
	0x03E3B1F8 LDR X21, [X21 + 0x338]
	0x03E3B1FC MOV X20, X1
	0x03E3B200 MOV X19, X0
	0x03E3B204 TBNZ X8, 0x0, 0x3E3B21C
	0x03E3B208 ADRP X0, 0x330000
	0x03E3B20C LDR X0, [X0 + 0x338]
	0x03E3B210 BL 0x1C16CF4
	0x03E3B214 MOVZ W8, 0x1
	0x03E3B218 STRB W8, [X22 + 0x792]
	0x03E3B21C LDR X2, [X21]
	0x03E3B220 ADD X0, X19, 0x100
	0x03E3B224 MOV X1, X20
	0x03E3B228 BL 0x2254190
	0x03E3B22C TBZ X0, 0x0, 0x3E3B24C
	0x03E3B230 MOV X0, X19
	0x03E3B234 BL 0x3E3B25C
	0x03E3B238 MOV X0, X19
	0x03E3B23C LDP X20, X19, [X31 + 0x20]
	0x03E3B240 LDP X22, X21, [X31 + 0x10]
	0x03E3B244 LDR X30, [X31], #0x30
	0x03E3B248 B 0x3E3B33C
	0x03E3B24C LDP X20, X19, [X31 + 0x20]
	0x03E3B250 LDP X22, X21, [X31 + 0x10]
	0x03E3B254 LDR X30, [X31], #0x30
	0x03E3B258 RET
	0x03E3B25C STP X30, X21, [X31 - 0x20]!
	0x03E3B260 STP X20, X19, [X31 + 0x10]
	0x03E3B264 ADRP X20, 0x5AD000
	0x03E3B268 ADRP X21, 0x2B8000
	0x03E3B26C LDRB W8, [X20 + 0x797]
	0x03E3B270 LDR X21, [X21 + 0x598]
	0x03E3B274 MOV X19, X0
	0x03E3B278 TBNZ X8, 0x0, 0x3E3B29C
	0x03E3B27C ADRP X0, 0x2BA000
	0x03E3B280 LDR X0, [X0 + 0x6B8]
	0x03E3B284 BL 0x1C16CF4
	0x03E3B288 ADRP X0, 0x2B8000
	0x03E3B28C LDR X0, [X0 + 0x598]
	0x03E3B290 BL 0x1C16CF4
	0x03E3B294 MOVZ W8, 0x1
	0x03E3B298 STRB W8, [X20 + 0x797]
	0x03E3B29C LDR X0, [X21]
	0x03E3B2A0 LDR X20, [X19 + 0x100]
	0x03E3B2A4 LDR W8, [X0 + 0xE0]
	0x03E3B2A8 CBNZ W8, 0x3E3B2B0
	0x03E3B2AC BL 0x1C16DFC
	0x03E3B2B0 MOV X0, X20
	0x03E3B2B4 MOV X1, X31
	0x03E3B2B8 BL 0x3C38948
	0x03E3B2BC TBZ X0, 0x0, 0x3E3B328
	0x03E3B2C0 LDR X0, [X19 + 0x100]
	0x03E3B2C4 CBZ X0, 0x3E3B338
	0x03E3B2C8 MOV X1, X31

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x5AE000
	012 Move W8, [X21+1933]
	013 Move X19, X1
	014 Move V8, V1
	015 Move V9, V0
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x30F000
	022 Move X0, [X0+1720]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1933], W8
	026 Move X0, X20
	027 Move X1, X31
	028 Call Behaviour.get_isActiveAndEnabled, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {69}
	033 Move X21, 0x30F000
	034 Move X21, [X21+1720]
	035 Move X0, X20
	036 Call RectMask2D.get_rectTransform, X0
	037 Move X8, [X21]
	038 Move S13, [X20+100]
	039 Move S11, [X20+104]
	040 Move S12, [X20+108]
	041 Move S10, [X20+112]
	042 Move X20, X0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move V0, V9
	050 Move V1, V8
	051 Move X1, X19
	052 Move V3, V11
	053 Move V5, V10
	054 Move X20, [X31+64]
	055 Move X19, [X31+72]
	056 Move X30, [X31+48]
	057 Move X21, [X31+56]
	058 Move D9, [X31+32]
	059 Move D8, [X31+40]
	060 Move D11, [X31+16]
	061 Move D10, [X31+24]
	062 Move V2, V13
	063 Move V4, V12
	064 Move X2, X31
	065 Move D13, [X31+80]
	066 Move D12, [X31+88]
	067 Call RectTransformUtility.RectangleContainsScreenPoint, X0, X1, X2, X3
	068 Return X0
	069 Move X20, [X31+64]
	070 Move X19, [X31+72]
	071 Move X30, [X31+48]
	072 Move X21, [X31+56]
	073 Move D9, [X31+32]
	074 Move D8, [X31+40]
	075 Move D11, [X31+16]
	076 Move D10, [X31+24]
	077 Move W0, 1
	078 Move D13, [X31+80]
	079 Move D12, [X31+88]
	080 Return X0

Method: UnityEngine.Rect get_rootCanvasRect()

Disassembly:
	0x03E3B2CC BL 0x3C3F49C
	0x03E3B2D0 LDR X8, [X21]
	0x03E3B2D4 MOV X20, X0
	0x03E3B2D8 LDR W9, [X8 + 0xE0]
	0x03E3B2DC CBNZ W9, 0x3E3B2E8
	0x03E3B2E0 MOV X0, X8
	0x03E3B2E4 BL 0x1C16DFC
	0x03E3B2E8 MOV X0, X20
	0x03E3B2EC MOV X1, X31
	0x03E3B2F0 MOV X2, X31
	0x03E3B2F4 BL 0x3C354F8
	0x03E3B2F8 TBZ X0, 0x0, 0x3E3B328
	0x03E3B2FC LDR X0, [X19 + 0x100]
	0x03E3B300 CBZ X0, 0x3E3B338
	0x03E3B304 MOV X1, X31
	0x03E3B308 BL 0x3C3F49C
	0x03E3B30C CBZ X0, 0x3E3B338
	0x03E3B310 ADRP X8, 0x2BA000
	0x03E3B314 LDR X8, [X8 + 0x6B8]
	0x03E3B318 LDR X1, [X8]
	0x03E3B31C BL 0x21A3894
	0x03E3B320 STR X0, [X19 + 0x120]
	0x03E3B324 B 0x3E3B32C
	0x03E3B328 STR X31, [X19 + 0x120]
	0x03E3B32C LDP X20, X19, [X31 + 0x10]
	0x03E3B330 LDP X30, X21, [X31], #0x20
	0x03E3B334 RET
	0x03E3B338 BL 0x1C16F20
	0x03E3B33C STP D11, D10, [X31 - 0x40]!
	0x03E3B340 STP D9, D8, [X31 + 0x10]
	0x03E3B344 STP X30, X21, [X31 + 0x20]
	0x03E3B348 STP X20, X19, [X31 + 0x30]
	0x03E3B34C ADRP X20, 0x5AD000
	0x03E3B350 ADRP X21, 0x2B8000
	0x03E3B354 LDRB W8, [X20 + 0x799]
	0x03E3B358 LDR X21, [X21 + 0x598]
	0x03E3B35C MOV X19, X0
	0x03E3B360 TBNZ X8, 0x0, 0x3E3B378
	0x03E3B364 ADRP X0, 0x2B8000
	0x03E3B368 LDR X0, [X0 + 0x598]
	0x03E3B36C BL 0x1C16CF4
	0x03E3B370 MOVZ W8, 0x1
	0x03E3B374 STRB W8, [X20 + 0x799]
	0x03E3B378 ADD X20, X19, 0x130
	0x03E3B37C MOV X0, X20
	0x03E3B380 MOV X1, X31
	0x03E3B384 BL 0x3C3E3A8
	0x03E3B388 LDR X0, [X21]
	0x03E3B38C LDR X21, [X19 + 0x120]
	0x03E3B390 LDR W8, [X0 + 0xE0]
	0x03E3B394 CBNZ W8, 0x3E3B39C
	0x03E3B398 BL 0x1C16DFC
	0x03E3B39C MOV X0, X21
	0x03E3B3A0 MOV X1, X31
	0x03E3B3A4 MOV X2, X31
	0x03E3B3A8 BL 0x3C354F8
	0x03E3B3AC TBZ X0, 0x0, 0x3E3B478
	0x03E3B3B0 LDR X2, [X19 + 0x100]
	0x03E3B3B4 MOVZ W3, 0xF00
	0x03E3B3B8 MOV X0, X20
	0x03E3B3BC MOV X1, X19
	0x03E3B3C0 MOV X4, X31
	0x03E3B3C4 BL 0x3C3E3A4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Call RectMask2D.get_rectTransform, X0
	009 Compare X0, 0
	010 JumpIfEqual {77}
	011 Move X1, [X19+136]
	012 Move X2, X31
	013 Call RectTransform.GetWorldCorners, X0, X1
	014 Move X0, X19
	015 Call RectMask2D.get_Canvas, X0
	016 Compare X0, 0
	017 JumpIfEqual {57}
	018 Move X0, X19
	019 Call RectMask2D.get_Canvas, X0
	020 Compare X0, 0
	021 JumpIfEqual {77}
	022 Move X1, X31
	023 Call Canvas.get_rootCanvas, X0
	024 Compare X0, 0
	025 JumpIfEqual {77}
	026 Move X20, X0
	027 Move X21, X31
	028 Move X22, X31
	029 Move X23, [X19+136]
	030 Move X0, X20
	031 Move X1, X31
	032 Call Component.get_transform, X0
	033 Move X8, [X19+136]
	034 Compare X8, 0
	035 JumpIfEqual {77}
	036 Move W9, [X8+24]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Compare X0, 0
	039 JumpIfEqual {77}
	040 Add X8, X8, X21
	041 Move S1, [X8+36]
	042 Move S2, [X8+40]
	043 Move V0, [X8+32]
	044 Move X1, X31
	045 Call Transform.InverseTransformPoint, X0, X1
	046 Compare X23, 0
	047 JumpIfEqual {77}
	048 Move W8, [X23+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Add X22, X22, 1
	051 Add X8, X23, X21
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Add X21, X21, 12
	054 Move [X8+32], S0
	055 Move [X8+40], S1
	056 Move [X8+40], S2
	057 Move X8, [X19+136]
	058 Compare X8, 0
	059 JumpIfEqual {77}
	060 Move W9, [X8+24]
	061 Compare W9, 0
	062 JumpIfEqual {78}
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move S0, [X8+32]
	065 Move S1, [X8+36]
	066 Move S2, [X8+56]
	067 Move S3, [X8+60]
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Subtract S2, S2, S0
	073 Subtract S3, S3, S1
	074 Move X30, [X31+48]
	075 Move X23, [X31+56]
	076 Return X0
	077 Call 0x1C17F20
	078 Call 0x1C17F28

Method: System.Void PerformClipping()

Disassembly:
	0x03E3B3C8 ADRP X20, 0x59E000
	0x03E3B3CC LDRB W8, [X20 + 0x78F]
	0x03E3B3D0 CBNZ W8, 0x3E3B3E8
	0x03E3B3D4 ADRP X0, 0x2C0000
	0x03E3B3D8 LDR X0, [X0 + 0xF08]
	0x03E3B3DC BL 0x1C16CF4
	0x03E3B3E0 MOVZ W8, 0x1
	0x03E3B3E4 STRB W8, [X20 + 0x78F]
	0x03E3B3E8 ADRP X20, 0x2C0000
	0x03E3B3EC LDR X20, [X20 + 0xF08]
	0x03E3B3F0 ADRP X21, 0x5A6000
	0x03E3B3F4 LDRB W9, [X21 + 0xA48]
	0x03E3B3F8 LDR X8, [X20]
	0x03E3B3FC LDR X8, [X8 + 0xB8]
	0x03E3B400 LDP S9, S8, [X8]
	0x03E3B404 CBNZ W9, 0x3E3B420
	0x03E3B408 MOV X0, X20
	0x03E3B40C BL 0x1C16CF4
	0x03E3B410 LDR X8, [X20]
	0x03E3B414 MOVZ W9, 0x1
	0x03E3B418 STRB W9, [X21 + 0xA48]
	0x03E3B41C LDR X8, [X8 + 0xB8]
	0x03E3B420 LDP S11, S10, [X8 + 0x8]
	0x03E3B424 MOV X0, X19
	0x03E3B428 BL 0x3E3B78C
	0x03E3B42C LDR V2, [X19 + 0x110]
	0x03E3B430 LDR W8, [X19 + 0x108]
	0x03E3B434 FMOV S1, 1
	0x03E3B438 FCMP S0, 0x0
	0x03E3B43C FMOV S3, W31
	0x03E3B440 FMIN S0, S0, S1
	0x03E3B444 FCSEL S0, S0, S3, PL
	0x03E3B448 FSUB S3, S1, S2
	0x03E3B44C AND W9, W8, 0xFFFFFFFD
	0x03E3B450 CMP W9, 0x1
	0x03E3B454 FMUL S0, S3, S0
	0x03E3B458 B.NE 0x3E3B48C
	0x03E3B45C FSUB S0, S1, S0
	0x03E3B460 CMP W8, 0x2
	0x03E3B464 FSUB S1, S0, S2
	0x03E3B468 B.CC 0x3E3B4A8
	0x03E3B46C MOV V8.16B, V1.16B
	0x03E3B470 MOV V10.16B, V0.16B
	0x03E3B474 B 0x3E3B4B0
	0x03E3B478 LDP X20, X19, [X31 + 0x30]
	0x03E3B47C LDP X30, X21, [X31 + 0x20]
	0x03E3B480 LDP D9, D8, [X31 + 0x10]
	0x03E3B484 LDP D11, D10, [X31], #0x40
	0x03E3B488 RET
	0x03E3B48C FADD S1, S2, S0
	0x03E3B490 CMP W8, 0x1
	0x03E3B494 FCSEL S8, S0, S8, HI
	0x03E3B498 FCSEL S9, S9, S0, HI
	0x03E3B49C FCSEL S10, S1, S10, HI
	0x03E3B4A0 FCSEL S11, S11, S1, HI
	0x03E3B4A4 B 0x3E3B4B0
	0x03E3B4A8 MOV V9.16B, V1.16B
	0x03E3B4AC MOV V11.16B, V0.16B
	0x03E3B4B0 LDR X0, [X19 + 0x100]
	0x03E3B4B4 CBZ X0, 0x3E3B4F0
	0x03E3B4B8 MOV V0.16B, V9.16B
	0x03E3B4BC MOV V1.16B, V8.16B
	0x03E3B4C0 MOV X1, X31
	0x03E3B4C4 BL 0x3C3E648
	0x03E3B4C8 LDR X0, [X19 + 0x100]
	0x03E3B4CC CBZ X0, 0x3E3B4F0
	0x03E3B4D0 LDP X20, X19, [X31 + 0x30]
	0x03E3B4D4 LDP X30, X21, [X31 + 0x20]
	0x03E3B4D8 LDP D9, D8, [X31 + 0x10]
	0x03E3B4DC MOV V0.16B, V11.16B
	0x03E3B4E0 MOV V1.16B, V10.16B
	0x03E3B4E4 MOV X1, X31
	0x03E3B4E8 LDP D11, D10, [X31], #0x40
	0x03E3B4EC B 0x3C3E764
	0x03E3B4F0 BL 0x1C16F20
	0x03E3B4F4 LDR W0, [X0 + 0x108]
	0x03E3B4F8 RET
	0x03E3B4FC STR X30, [X31 - 0x30]!
	0x03E3B500 STP X22, X21, [X31 + 0x10]
	0x03E3B504 STP X20, X19, [X31 + 0x20]
	0x03E3B508 ADRP X22, 0x5AD000
	0x03E3B50C ADRP X21, 0x330000
	0x03E3B510 LDRB W8, [X22 + 0x793]
	0x03E3B514 LDR X21, [X21 + 0x340]
	0x03E3B518 MOV W20, W1
	0x03E3B51C MOV X19, X0
	0x03E3B520 TBNZ X8, 0x0, 0x3E3B538
	0x03E3B524 ADRP X0, 0x330000
	0x03E3B528 LDR X0, [X0 + 0x340]
	0x03E3B52C BL 0x1C16CF4
	0x03E3B530 MOVZ W8, 0x1
	0x03E3B534 STRB W8, [X22 + 0x793]
	0x03E3B538 LDR X2, [X21]
	0x03E3B53C ADD X0, X19, 0x108
	0x03E3B540 MOV W1, W20
	0x03E3B544 BL 0x22543F8
	0x03E3B548 TBZ X0, 0x0, 0x3E3B560
	0x03E3B54C MOV X0, X19
	0x03E3B550 LDP X20, X19, [X31 + 0x20]
	0x03E3B554 LDP X22, X21, [X31 + 0x10]
	0x03E3B558 LDR X30, [X31], #0x30
	0x03E3B55C B 0x3E3B33C
	0x03E3B560 LDP X20, X19, [X31 + 0x20]
	0x03E3B564 LDP X22, X21, [X31 + 0x10]
	0x03E3B568 LDR X30, [X31], #0x30
	0x03E3B56C RET
	0x03E3B570 STP X30, X21, [X31 - 0x20]!
	0x03E3B574 STP X20, X19, [X31 + 0x10]
	0x03E3B578 ADRP X21, 0x5AD000
	0x03E3B57C ADRP X20, 0x330000
	0x03E3B580 LDRB W8, [X21 + 0x794]
	0x03E3B584 LDR X20, [X20 + 0x348]
	0x03E3B588 MOV X19, X0
	0x03E3B58C TBNZ X8, 0x0, 0x3E3B5B0
	0x03E3B590 ADRP X0, 0x330000
	0x03E3B594 LDR X0, [X0 + 0x348]
	0x03E3B598 BL 0x1C16CF4
	0x03E3B59C ADRP X0, 0x31D000
	0x03E3B5A0 LDR X0, [X0 + 0xA58]
	0x03E3B5A4 BL 0x1C16CF4
	0x03E3B5A8 MOVZ W8, 0x1
	0x03E3B5AC STRB W8, [X21 + 0x794]
	0x03E3B5B0 MOVZ W8, 0xCCCD
	0x03E3B5B4 MOVK W8, 0x3E4C0000
	0x03E3B5B8 STR W8, [X19 + 0x110]
	0x03E3B5BC LDR X0, [X20]
	0x03E3B5C0 ADRP X21, 0x31D000
	0x03E3B5C4 LDR X21, [X21 + 0xA58]
	0x03E3B5C8 BL 0x1C16F10
	0x03E3B5CC MOV X20, X0
	0x03E3B5D0 BL 0x3E3B630
	0x03E3B5D4 STR X20, [X19 + 0x118]
	0x03E3B5D8 ADRP X20, 0x59E000
	0x03E3B5DC LDRB W8, [X20 + 0x78F]
	0x03E3B5E0 CBNZ W8, 0x3E3B5F8
	0x03E3B5E4 ADRP X0, 0x2C0000
	0x03E3B5E8 LDR X0, [X0 + 0xF08]
	0x03E3B5EC BL 0x1C16CF4
	0x03E3B5F0 MOVZ W8, 0x1
	0x03E3B5F4 STRB W8, [X20 + 0x78F]
	0x03E3B5F8 ADRP X8, 0x2C0000
	0x03E3B5FC LDR X8, [X8 + 0xF08]
	0x03E3B600 LDR X8, [X8]
	0x03E3B604 LDR X8, [X8 + 0xB8]
	0x03E3B608 LDR V0, [X8]
	0x03E3B60C STR D0, [X19 + 0x128]
	0x03E3B610 LDR X0, [X21]
	0x03E3B614 LDR W8, [X0 + 0xE0]
	0x03E3B618 CBNZ W8, 0x3E3B620
	0x03E3B61C BL 0x1C16DFC
	0x03E3B620 MOV X0, X19
	0x03E3B624 LDP X20, X19, [X31 + 0x10]
	0x03E3B628 LDP X30, X21, [X31], #0x20
	0x03E3B62C B 0x3E3B678
	0x03E3B630 STP X30, X21, [X31 - 0x20]!
	0x03E3B634 STP X20, X19, [X31 + 0x10]
	0x03E3B638 ADRP X20, 0x5AD000
	0x03E3B63C ADRP X21, 0x31D000
	0x03E3B640 LDRB W8, [X20 + 0x7A0]
	0x03E3B644 LDR X21, [X21 + 0x8D0]
	0x03E3B648 MOV X19, X0
	0x03E3B64C TBNZ X8, 0x0, 0x3E3B664
	0x03E3B650 ADRP X0, 0x31D000
	0x03E3B654 LDR X0, [X0 + 0x8D0]
	0x03E3B658 BL 0x1C16CF4
	0x03E3B65C MOVZ W8, 0x1
	0x03E3B660 STRB W8, [X20 + 0x7A0]
	0x03E3B664 LDR X1, [X21]
	0x03E3B668 MOV X0, X19
	0x03E3B66C LDP X20, X19, [X31 + 0x10]
	0x03E3B670 LDP X30, X21, [X31], #0x20
	0x03E3B674 B 0x272A4A4
	0x03E3B678 STP X30, X23, [X31 - 0x30]!
	0x03E3B67C STP X22, X21, [X31 + 0x10]
	0x03E3B680 STP X20, X19, [X31 + 0x20]
	0x03E3B684 ADRP X21, 0x5AD000
	0x03E3B688 ADRP X20, 0x2E0000
	0x03E3B68C LDRB W8, [X21 + 0x7C6]
	0x03E3B690 LDR X20, [X20 + 0x5E8]
	0x03E3B694 MOV X19, X0
	0x03E3B698 TBNZ X8, 0x0, 0x3E3B6D4
	0x03E3B69C ADRP X0, 0x330000
	0x03E3B6A0 LDR X0, [X0 + 0x350]
	0x03E3B6A4 BL 0x1C16CF4
	0x03E3B6A8 ADRP X0, 0x2E0000
	0x03E3B6AC LDR X0, [X0 + 0x5E8]
	0x03E3B6B0 BL 0x1C16CF4
	0x03E3B6B4 ADRP X0, 0x330000
	0x03E3B6B8 LDR X0, [X0 + 0x358]
	0x03E3B6BC BL 0x1C16CF4
	0x03E3B6C0 ADRP X0, 0x330000
	0x03E3B6C4 LDR X0, [X0 + 0x360]
	0x03E3B6C8 BL 0x1C16CF4
	0x03E3B6CC MOVZ W8, 0x1
	0x03E3B6D0 STRB W8, [X21 + 0x7C6]
	0x03E3B6D4 MOVZ W8, 0x3
	0x03E3B6D8 MOVI V0.2D, 0x0
	0x03E3B6DC MOVZ X9, 0x1
	0x03E3B6E0 STRB W31, [X19 + 0x2C]
	0x03E3B6E4 STR W8, [X19 + 0x28]
	0x03E3B6E8 STUR V0, [X19 + 0x2D]
	0x03E3B6EC STUR V0, [X19 + 0x3D]
	0x03E3B6F0 STUR X9, [X19 + 0x4C]
	0x03E3B6F4 LDR X0, [X20]
	0x03E3B6F8 ADRP X23, 0x330000
	0x03E3B6FC ADRP X22, 0x330000
	0x03E3B700 ADRP X21, 0x330000
	0x03E3B704 LDR W8, [X0 + 0xE0]
	0x03E3B708 LDR X23, [X23 + 0x350]
	0x03E3B70C LDR X22, [X22 + 0x360]
	0x03E3B710 LDR X21, [X21 + 0x358]
	0x03E3B714 CBNZ W8, 0x3E3B720
	0x03E3B718 BL 0x1C16DFC
	0x03E3B71C LDR X0, [X20]
	0x03E3B720 LDR X1, [X0 + 0xB8]
	0x03E3B724 ADD X0, X19, 0x54
	0x03E3B728 MOVZ W2, 0x58
	0x03E3B72C BL 0x3EB1B30
	0x03E3B730 LDR X0, [X23]
	0x03E3B734 BL 0x1C16F10
	0x03E3B738 MOV X1, X31
	0x03E3B73C MOV X20, X0
	0x03E3B740 BL 0x3CD0144
	0x03E3B744 MOVZ W8, 0x1
	0x03E3B748 MOVN W9, 0x0
	0x03E3B74C STR X20, [X19 + 0xD0]
	0x03E3B750 STRB W8, [X19 + 0xD8]
	0x03E3B754 STRB W8, [X19 + 0xE8]
	0x03E3B758 STR W9, [X19 + 0xEC]
	0x03E3B75C LDR X0, [X22]
	0x03E3B760 BL 0x1C16F10
	0x03E3B764 LDR X1, [X21]
	0x03E3B768 MOV X20, X0
	0x03E3B76C BL 0x301B7C4
	0x03E3B770 STR X20, [X19 + 0xF8]
	0x03E3B774 MOV X0, X19
	0x03E3B778 LDP X20, X19, [X31 + 0x20]
	0x03E3B77C LDP X22, X21, [X31 + 0x10]
	0x03E3B780 MOV X1, X31
	0x03E3B784 LDP X30, X23, [X31], #0x30
	0x03E3B788 B 0x3E4E160
	0x03E3B78C STR D8, [X31 - 0x20]!
	0x03E3B790 STP X30, X19, [X31 + 0x10]
	0x03E3B794 LDR W8, [X0 + 0x114]
	0x03E3B798 LDR V0, [X0 + 0x10C]
	0x03E3B79C CMP W8, 0x2
	0x03E3B7A0 B.LT 0x3E3B838
	0x03E3B7A4 SUB W8, W8, 0x1
	0x03E3B7A8 SCVTF S1, W8
	0x03E3B7AC FMUL S8, S0, S1
	0x03E3B7B0 MOV X19, X0
	0x03E3B7B4 FCVT S0, S8
	0x03E3B7B8 ADD X0, X31, 0x8
	0x03E3B7BC BL 0x3EB1C00
	0x03E3B7C0 FCMP S8, 0x0
	0x03E3B7C4 B.GE 0x3E3B7E0
	0x03E3B7C8 FMOV D1, -0.5
	0x03E3B7CC FCMP D0, D1
	0x03E3B7D0 B.NE 0x3E3B80C
	0x03E3B7D4 LDR V0, [X31 + 0x8]
	0x03E3B7D8 FMOV S1, -1
	0x03E3B7DC B 0x3E3B7F4
	0x03E3B7E0 FMOV D1, 0.5
	0x03E3B7E4 FCMP D0, D1
	0x03E3B7E8 B.NE 0x3E3B81C
	0x03E3B7EC LDR V0, [X31 + 0x8]
	0x03E3B7F0 FMOV S1, 1
	0x03E3B7F4 FCVTZS X8, D0
	0x00000000 INVALID
	0x03E3B7FC FADD S1, S0, S1
	0x03E3B800 ANDS X31, X8, 0x1
	0x03E3B804 FCSEL S0, S0, S1, EQ
	0x03E3B808 B 0x3E3B828
	0x03E3B80C FMOV S0, -0.5
	0x03E3B810 FADD S0, S8, S0
	0x03E3B814 FRINTP S0, S0
	0x03E3B818 B 0x3E3B828
	0x03E3B81C FMOV S0, 0.5
	0x03E3B820 FADD S0, S8, S0
	0x03E3B824 FRINTM S0, S0
	0x03E3B828 LDR W8, [X19 + 0x114]
	0x03E3B82C SUB W8, W8, 0x1
	0x03E3B830 SCVTF S1, W8
	0x03E3B834 FDIV S0, S0, S1
	0x03E3B838 LDP X30, X19, [X31 + 0x10]
	0x03E3B83C LDR V8, [X31], #0x20
	0x03E3B840 RET
	0x03E3B844 MOVZ W1, 0x1
	0x03E3B848 B 0x3E3B84C
	0x03E3B84C STP D9, D8, [X31 - 0x30]!
	0x03E3B850 STP X30, X21, [X31 + 0x10]
	0x03E3B854 STP X20, X19, [X31 + 0x20]
	0x03E3B858 ADRP X21, 0x5AD000
	0x03E3B85C LDRB W8, [X21 + 0x798]
	0x03E3B860 MOV W20, W1
	0x03E3B864 MOV V8.16B, V0.16B
	0x03E3B868 MOV X19, X0
	0x03E3B86C TBNZ X8, 0x0, 0x3E3B890
	0x03E3B870 ADRP X0, 0x31D000
	0x03E3B874 LDR X0, [X0 + 0x8B8]
	0x03E3B878 BL 0x1C16CF4
	0x03E3B87C ADRP X0, 0x330000
	0x03E3B880 LDR X0, [X0 + 0x368]
	0x03E3B884 BL 0x1C16CF4
	0x03E3B888 MOVZ W8, 0x1
	0x03E3B88C STRB W8, [X21 + 0x798]
	0x03E3B890 LDR V9, [X19 + 0x10C]
	0x03E3B894 MOV X0, X19
	0x03E3B898 STR S8, [X19 + 0x10C]
	0x03E3B89C BL 0x3E3B78C
	0x03E3B8A0 FCMP S9, S0
	0x03E3B8A4 B.EQ 0x3E3B8FC
	0x03E3B8A8 MOV X0, X19
	0x03E3B8AC BL 0x3E3B33C
	0x03E3B8B0 TBZ X20, 0x0, 0x3E3B8FC
	0x03E3B8B4 ADRP X8, 0x330000
	0x03E3B8B8 LDR X8, [X8 + 0x368]
	0x03E3B8BC MOV X1, X19
	0x03E3B8C0 MOV X2, X31
	0x03E3B8C4 LDR X0, [X8]
	0x03E3B8C8 BL 0x3E252BC
	0x03E3B8CC LDR X20, [X19 + 0x118]
	0x03E3B8D0 MOV X0, X19
	0x03E3B8D4 BL 0x3E3B78C
	0x03E3B8D8 CBZ X20, 0x3E3B90C
	0x03E3B8DC ADRP X8, 0x31D000
	0x03E3B8E0 LDR X8, [X8 + 0x8B8]
	0x03E3B8E4 MOV X0, X20
	0x03E3B8E8 LDP X20, X19, [X31 + 0x20]
	0x03E3B8EC LDP X30, X21, [X31 + 0x10]
	0x03E3B8F0 LDR X1, [X8]
	0x03E3B8F4 LDP D9, D8, [X31], #0x30
	0x03E3B8F8 B 0x272A704
	0x03E3B8FC LDP X20, X19, [X31 + 0x20]
	0x03E3B900 LDP X30, X21, [X31 + 0x10]
	0x03E3B904 LDP D9, D8, [X31], #0x30
	0x03E3B908 RET
	0x03E3B90C BL 0x1C16F20
	0x03E3B910 MOV W1, W31
	0x03E3B914 B 0x3E3B84C
	0x03E3B918 LDR V0, [X0 + 0x110]
	0x03E3B91C RET
	0x03E3B920 STR D8, [X31 - 0x30]!
	0x03E3B924 STP X30, X21, [X31 + 0x10]
	0x03E3B928 STP X20, X19, [X31 + 0x20]
	0x03E3B92C ADRP X21, 0x5AD000
	0x03E3B930 ADRP X20, 0x327000
	0x03E3B934 LDRB W8, [X21 + 0x795]
	0x03E3B938 LDR X20, [X20 + 0x5A0]
	0x03E3B93C MOV V8.16B, V0.16B
	0x03E3B940 MOV X19, X0
	0x03E3B944 TBNZ X8, 0x0, 0x3E3B95C
	0x03E3B948 ADRP X0, 0x327000
	0x03E3B94C LDR X0, [X0 + 0x5A0]
	0x03E3B950 BL 0x1C16CF4
	0x03E3B954 MOVZ W8, 0x1
	0x03E3B958 STRB W8, [X21 + 0x795]
	0x03E3B95C LDR X1, [X20]
	0x03E3B960 FMOV S0, 1
	0x03E3B964 FMIN S0, S8, S0
	0x03E3B968 FCMP S8, 0x0
	0x03E3B96C FMOV S1, W31
	0x03E3B970 ADD X0, X19, 0x110
	0x03E3B974 FCSEL S0, S0, S1, PL
	0x03E3B978 BL 0x2254520
	0x03E3B97C TBZ X0, 0x0, 0x3E3B994
	0x03E3B980 MOV X0, X19
	0x03E3B984 LDP X20, X19, [X31 + 0x20]
	0x03E3B988 LDP X30, X21, [X31 + 0x10]
	0x03E3B98C LDR V8, [X31], #0x30
	0x03E3B990 B 0x3E3B33C
	0x03E3B994 LDP X20, X19, [X31 + 0x20]
	0x03E3B998 LDP X30, X21, [X31 + 0x10]
	0x03E3B99C LDR V8, [X31], #0x30
	0x03E3B9A0 RET
	0x03E3B9A4 LDR W0, [X0 + 0x114]
	0x03E3B9A8 RET
	0x03E3B9AC STR X30, [X31 - 0x30]!
	0x03E3B9B0 STP X22, X21, [X31 + 0x10]
	0x03E3B9B4 STP X20, X19, [X31 + 0x20]
	0x03E3B9B8 ADRP X22, 0x5AD000
	0x03E3B9BC ADRP X21, 0x327000
	0x03E3B9C0 LDRB W8, [X22 + 0x796]
	0x03E3B9C4 LDR X21, [X21 + 0x5A8]
	0x03E3B9C8 MOV W20, W1
	0x03E3B9CC MOV X19, X0
	0x03E3B9D0 TBNZ X8, 0x0, 0x3E3B9E8
	0x03E3B9D4 ADRP X0, 0x327000
	0x03E3B9D8 LDR X0, [X0 + 0x5A8]
	0x03E3B9DC BL 0x1C16CF4
	0x03E3B9E0 MOVZ W8, 0x1
	0x03E3B9E4 STRB W8, [X22 + 0x796]
	0x03E3B9E8 LDR X2, [X21]
	0x03E3B9EC ADD X0, X19, 0x114
	0x03E3B9F0 MOV W1, W20
	0x03E3B9F4 BL 0x2254390
	0x03E3B9F8 TBZ X0, 0x0, 0x3E3BA20
	0x03E3B9FC LDR V0, [X19 + 0x10C]
	0x03E3BA00 MOVZ W1, 0x1
	0x03E3BA04 MOV X0, X19
	0x03E3BA08 BL 0x3E3B84C
	0x03E3BA0C MOV X0, X19
	0x03E3BA10 LDP X20, X19, [X31 + 0x20]
	0x03E3BA14 LDP X22, X21, [X31 + 0x10]
	0x03E3BA18 LDR X30, [X31], #0x30
	0x03E3BA1C B 0x3E3B33C
	0x03E3BA20 LDP X20, X19, [X31 + 0x20]
	0x03E3BA24 LDP X22, X21, [X31 + 0x10]
	0x03E3BA28 LDR X30, [X31], #0x30
	0x03E3BA2C RET
	0x03E3BA30 LDR X0, [X0 + 0x118]
	0x03E3BA34 RET
	0x03E3BA38 STR X1, [X0 + 0x118]
	0x03E3BA3C RET
	0x03E3BA40 LDR W8, [X0 + 0x114]
	0x03E3BA44 CMP W8, 0x2
	0x03E3BA48 B.LT 0x3E3BA60
	0x03E3BA4C SUB W8, W8, 0x1
	0x03E3BA50 SCVTF S0, W8
	0x03E3BA54 FMOV S1, 1
	0x03E3BA58 FDIV S0, S1, S0
	0x03E3BA5C RET
	0x03E3BA60 ADRP X8, 0xFFFFFFFFFCCAF000
	0x03E3BA64 LDR V0, [X8 + 0xBC]
	0x03E3BA68 RET
	0x03E3BA6C RET
	0x03E3BA70 RET
	0x03E3BA74 RET
	0x03E3BA78 STP X30, X19, [X31 - 0x10]!
	0x03E3BA7C MOV X19, X0
	0x03E3BA80 BL 0x3E3BAA8
	0x03E3BA84 MOV X0, X19
	0x03E3BA88 BL 0x3E3B25C
	0x03E3BA8C LDR V0, [X19 + 0x10C]
	0x03E3BA90 MOV X0, X19
	0x03E3BA94 MOV W1, W31
	0x03E3BA98 BL 0x3E3B84C
	0x03E3BA9C MOV X0, X19
	0x03E3BAA0 LDP X30, X19, [X31], #0x10
	0x03E3BAA4 B 0x3E3B33C
	0x03E3BAA8 STP X30, X23, [X31 - 0x30]!
	0x03E3BAAC STP X22, X21, [X31 + 0x10]
	0x03E3BAB0 STP X20, X19, [X31 + 0x20]
	0x03E3BAB4 ADRP X20, 0x5AD000
	0x03E3BAB8 LDRB W8, [X20 + 0x7CB]
	0x03E3BABC MOV X19, X0
	0x03E3BAC0 TBNZ X8, 0x0, 0x3E3BAFC
	0x03E3BAC4 ADRP X0, 0x2DF000
	0x03E3BAC8 LDR X0, [X0 + 0xDF8]
	0x03E3BACC BL 0x1C16CF4
	0x03E3BAD0 ADRP X0, 0x2B8000
	0x03E3BAD4 LDR X0, [X0 + 0x598]
	0x03E3BAD8 BL 0x1C16CF4
	0x03E3BADC ADRP X0, 0x330000
	0x03E3BAE0 LDR X0, [X0 + 0x370]
	0x03E3BAE4 BL 0x1C16CF4
	0x03E3BAE8 ADRP X0, 0x31D000
	0x03E3BAEC LDR X0, [X0 + 0xA58]
	0x03E3BAF0 BL 0x1C16CF4
	0x03E3BAF4 MOVZ W8, 0x1
	0x03E3BAF8 STRB W8, [X20 + 0x7CB]
	0x03E3BAFC LDRB W8, [X19 + 0x20]
	0x03E3BB00 CBNZ W8, 0x3E3BD24
	0x03E3BB04 MOV X0, X19
	0x03E3BB08 MOV X1, X31
	0x03E3BB0C BL 0x3E4BDBC
	0x03E3BB10 ADRP X22, 0x31D000
	0x03E3BB14 LDR X22, [X22 + 0xA58]
	0x03E3BB18 LDR X0, [X22]
	0x03E3BB1C LDR W8, [X0 + 0xE0]
	0x03E3BB20 CBNZ W8, 0x3E3BB2C
	0x03E3BB24 BL 0x1C16DFC
	0x03E3BB28 LDR X0, [X22]
	0x03E3BB2C LDR X8, [X0 + 0xB8]
	0x03E3BB30 LDR X9, [X8]
	0x03E3BB34 CBZ X9, 0x3E3BD4C
	0x03E3BB38 LDR W8, [X8 + 0x8]
	0x03E3BB3C LDR W9, [X9 + 0x18]
	0x03E3BB40 CMP W8, W9
	0x03E3BB44 B.NE 0x3E3BBB0
	0x03E3BB48 LDR W8, [X0 + 0xE0]
	0x03E3BB4C CBNZ W8, 0x3E3BB58
	0x03E3BB50 BL 0x1C16DFC
	0x03E3BB54 LDR X0, [X22]
	0x03E3BB58 LDR X8, [X0 + 0xB8]
	0x03E3BB5C LDR X8, [X8]
	0x03E3BB60 CBZ X8, 0x3E3BD4C
	0x03E3BB64 ADRP X9, 0x330000
	0x03E3BB68 LDR X9, [X9 + 0x370]
	0x03E3BB6C LDR W8, [X8 + 0x18]
	0x03E3BB70 LDR X0, [X9]
	0x03E3BB74 UBFM W1, W8, 0x1F, 0x1E
	0x03E3BB78 BL 0x1C16D6C
	0x03E3BB7C LDR X8, [X22]
	0x03E3BB80 LDR X8, [X8 + 0xB8]
	0x03E3BB84 LDR X8, [X8]
	0x03E3BB88 CBZ X8, 0x3E3BD4C
	0x03E3BB8C LDR W2, [X8 + 0x18]
	0x03E3BB90 MOV X20, X0
	0x03E3BB94 MOV X0, X8
	0x03E3BB98 MOV X1, X20
	0x03E3BB9C MOV X3, X31
	0x03E3BBA0 BL 0x33A0C7C
	0x03E3BBA4 LDR X8, [X22]
	0x03E3BBA8 LDR X8, [X8 + 0xB8]
	0x03E3BBAC STR X20, [X8]
	0x03E3BBB0 ADRP X23, 0x2DF000
	0x03E3BBB4 LDR X23, [X23 + 0xDF8]
	0x03E3BBB8 LDR X0, [X23]
	0x03E3BBBC LDR W8, [X0 + 0xE0]
	0x03E3BBC0 CBNZ W8, 0x3E3BBC8
	0x03E3BBC4 BL 0x1C16DFC
	0x03E3BBC8 MOV X0, X31
	0x03E3BBCC BL 0x3E4FF90
	0x03E3BBD0 ADRP X21, 0x2B8000
	0x03E3BBD4 LDR X21, [X21 + 0x598]
	0x03E3BBD8 MOV X20, X0
	0x03E3BBDC LDR X8, [X21]
	0x03E3BBE0 LDR W9, [X8 + 0xE0]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D11
	003 Move [X31+104], D10
	004 Move [X31+112], D9
	005 Move [X31+120], D8
	006 Move [X31+128], X30
	007 Move [X31+144], X24
	008 Move [X31+152], X23
	009 Move [X31+160], X22
	010 Move [X31+168], X21
	011 Move [X31+176], X20
	012 Move [X31+184], X19
	013 Move X20, 0x5AE000
	014 Move W8, [X20+1934]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {49}
	020 Move X0, 0x331000
	021 Move X0, [X0+728]
	022 Call 0x1C17CF4
	023 Move X0, 0x331000
	024 Move X0, [X0+736]
	025 Call 0x1C17CF4
	026 Move X0, 0x331000
	027 Move X0, [X0+744]
	028 Call 0x1C17CF4
	029 Move X0, 0x331000
	030 Move X0, [X0+752]
	031 Call 0x1C17CF4
	032 Move X0, 0x331000
	033 Move X0, [X0+760]
	034 Call 0x1C17CF4
	035 Move X0, 0x331000
	036 Move X0, [X0+768]
	037 Call 0x1C17CF4
	038 Move X0, 0x331000
	039 Move X0, [X0+776]
	040 Call 0x1C17CF4
	041 Move X0, 0x331000
	042 Move X0, [X0+784]
	043 Call 0x1C17CF4
	044 Move X0, 0x331000
	045 Move X0, [X0+608]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X20+1934], W8
	049 Move X0, X19
	050 Move [X31+64], X31
	051 Move [X31+72], X31
	052 Move [X31+80], X31
	053 Move [X31+32], X31
	054 Move [X31+40], X31
	055 Move [X31+48], X31
	056 Call RectMask2D.get_Canvas, X0
	057 Compare X0, 0
	058 JumpIfEqual {420}
	059 Move W8, [X19+64]
	060 Compare W8, 0
	061 JumpIfEqual {67}
	062 Move X1, [X19+72]
	063 Move X0, X19
	064 Move X2, X31
	065 Call MaskUtilities.GetRectMasksForClip, X0, X1
	066 Move [X19+64], W31
	067 Move W8, 1
	068 Move [X31+140], W8
	069 Move X0, [X19+72]
	070 Add X1, X31, 140
	071 Move X2, X31
	072 Call Clipping.FindCullAndClipWorldRect, X0, X1
	073 Move X0, X19
	074 Move V10, V0
	075 Move V11, V1
	076 Move V8, V2
	077 Move V9, V3
	078 Call RectMask2D.get_Canvas, X0
	079 Compare X0, 0
	080 JumpIfEqual {433}
	081 Move X1, X31
	082 Call Canvas.get_rootCanvas, X0
	083 Compare X0, 0
	084 JumpIfEqual {433}
	085 Move X1, X31
	086 Call Canvas.get_renderMode, X0
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X0, X19
	089 Call RectMask2D.get_rootCanvasRect, X0
	090 Add S5, S10, S8
	091 Add S4, S11, S9
	092 Subtract S6, S10, S5
	093 NotImplemented "Instruction FCMP not yet implemented."
	094 Add S7, S2, S0
	095 NotImplemented "Instruction FCSEL not yet implemented."
	096 NotImplemented "Instruction FCSEL not yet implemented."
	097 NotImplemented "Instruction FCMP not yet implemented."
	098 Subtract S17, S0, S7
	099 NotImplemented "Instruction FCSEL not yet implemented."
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 NotImplemented "Instruction FCSEL not yet implemented."
	102 Add S17, S3, S1
	103 NotImplemented "Instruction FCSEL not yet implemented."
	104 Subtract S0, S1, S17
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 NotImplemented "Instruction FCSEL not yet implemented."
	107 NotImplemented "Instruction FCSEL not yet implemented."
	108 Add S1, S0, S3
	109 NotImplemented "Instruction FCMP not yet implemented."
	110 Add S1, S6, S16
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 Add S1, S7, S2
	113 NotImplemented "Instruction FCMP not yet implemented."
	114 Subtract S1, S11, S4
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 NotImplemented "Instruction FCSEL not yet implemented."
	117 Add S1, S5, S1
	118 NotImplemented "Instruction FCMP not yet implemented."
	119 Move X0, X31
	120 Call Rect.get_zero
	121 Move V10, V0
	122 Move V11, V1
	123 Move V8, V2
	124 Move V9, V3
	125 Move [X31+140], W31
	126 Move V0, [X19+80]
	127 Move X22, 0x331000
	128 Move X22, [X22+736]
	129 NotImplemented "Instruction FCMP not yet implemented."
	130 Move V0, [X19+92]
	131 NotImplemented "Instruction FCMP not yet implemented."
	132 Move V0, [X19+88]
	133 NotImplemented "Instruction FCMP not yet implemented."
	134 Move V0, [X19+84]
	135 NotImplemented "Instruction FCMP not yet implemented."
	136 Move W8, [X19+96]
	137 Compare W8, 0
	138 JumpIfEqual {374}
	139 Move X0, [X19+56]
	140 Compare X0, 0
	141 JumpIfEqual {433}
	142 Move X8, 0x331000
	143 Move X8, [X8+776]
	144 Move X1, [X8]
	145 Add X8, X31, 8
	146 Call HashSet`1<Object>.GetEnumerator, X0
	147 NotImplemented "Instruction LDUR not yet implemented."
	148 Move X8, [X31+24]
	149 Move X21, 0x331000
	150 Move X21, [X21+752]
	151 Move [X31+4], V0
	152 Move [X31+80], X8
	153 Move X23, 0x331000
	154 Move X23, [X23+608]
	155 Move X1, [X21]
	156 Add X0, X31, 64
	157 Call Enumerator<Object>.MoveNext, X0
	158 Move TEMP, X0
	159 And TEMP, TEMP, 1
	160 Compare TEMP, 1
	161 JumpIfNotEqual {298}
	162 Move X20, [X31+80]
	163 Compare X20, 0
	164 JumpIfEqual {360}
	165 Move X8, [X20]
	166 Move W24, [X31+140]
	167 Move X1, [X23]
	168 NotImplemented "Instruction LDRH not yet implemented."
	169 Compare X9, 0
	170 JumpIfEqual {177}
	171 Move X10, [X8+176]
	172 Add X10, X10, 8
	173 NotImplemented "Instruction LDUR not yet implemented."
	174 NotImplemented "Instruction CMP not yet implemented."
	175 Subtract X9, X9, 1
	176 Add X10, X10, 16
	177 Move W2, 4
	178 Move X0, X20
	179 Call 0x1C5D788
	180 Move W9, [X10]
	181 Add W9, W9, 4
	182 Add X8, X8, W9
	183 Add X0, X8, 312
	184 Move X8, [X0]
	185 Move X2, [X0+8]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 NotImplemented "Instruction CSET not yet implemented."
	188 Move X0, X20
	189 Move V0, V10
	190 Move V1, V11
	191 Move V2, V8
	192 Move V3, V9
	193 NotImplemented "Instruction BLR not yet implemented."
	194 Move X0, [X19+56]
	195 Compare X0, 0
	196 JumpIfEqual {433}
	197 Move X8, 0x331000
	198 Move X8, [X8+776]
	199 Move X1, [X8]
	200 Add X8, X31, 8
	201 Call HashSet`1<Object>.GetEnumerator, X0
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 Move X8, [X31+24]
	204 Move X21, 0x331000
	205 Move X21, [X21+752]
	206 Move [X31+4], V0
	207 Move [X31+80], X8
	208 Move X23, 0x331000
	209 Move X23, [X23+608]
	210 Move X1, [X21]
	211 Add X0, X31, 64
	212 Call Enumerator<Object>.MoveNext, X0
	213 Move TEMP, X0
	214 And TEMP, TEMP, 1
	215 Compare TEMP, 1
	216 JumpIfNotEqual {249}
	217 Move X20, [X31+80]
	218 Compare X20, 0
	219 JumpIfEqual {358}
	220 Move X8, [X20]
	221 Move W24, [X31+140]
	222 Move X1, [X23]
	223 NotImplemented "Instruction LDRH not yet implemented."
	224 Compare X9, 0
	225 JumpIfEqual {232}
	226 Move X10, [X8+176]
	227 Add X10, X10, 8
	228 NotImplemented "Instruction LDUR not yet implemented."
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Subtract X9, X9, 1
	231 Add X10, X10, 16
	232 Move W2, 4
	233 Move X0, X20
	234 Call 0x1C5D788
	235 Move W9, [X10]
	236 Add W9, W9, 4
	237 Add X8, X8, W9
	238 Add X0, X8, 312
	239 Move X8, [X0]
	240 Move X2, [X0+8]
	241 NotImplemented "Instruction CMP not yet implemented."
	242 NotImplemented "Instruction CSET not yet implemented."
	243 Move X0, X20
	244 Move V0, V10
	245 Move V1, V11
	246 Move V2, V8
	247 Move V3, V9
	248 NotImplemented "Instruction BLR not yet implemented."
	249 Move X8, 0x331000
	250 Move X8, [X8+728]
	251 Add X0, X31, 64
	252 Move X1, [X8]
	253 Call Enumerator<Object>.Dispose, X0
	254 Move X0, [X19+48]
	255 Compare X0, 0
	256 JumpIfEqual {433}
	257 Move X8, 0x331000
	258 Move X8, [X8+784]
	259 Move X1, [X8]
	260 Add X8, X31, 8
	261 Call HashSet`1<Object>.GetEnumerator, X0
	262 NotImplemented "Instruction LDUR not yet implemented."
	263 Move X8, [X31+24]
	264 Move X21, 0x331000
	265 Move [X31+2], V0
	266 Move [X31+48], X8
	267 Move X21, [X21+744]
	268 Move X1, [X21]
	269 Add X0, X31, 32
	270 Call Enumerator<Object>.MoveNext, X0
	271 Move TEMP, X0
	272 And TEMP, TEMP, 1
	273 Compare TEMP, 1
	274 JumpIfNotEqual {407}
	275 Move X20, [X31+48]
	276 Compare X20, 0
	277 JumpIfEqual {359}
	278 Move X8, [X20]
	279 Move W1, [X31+140]
	280 Move X9, [X8+1272]
	281 Move X2, [X8+1280]
	282 Move X0, X20
	283 Move V0, V10
	284 Move V1, V11
	285 Move V2, V8
	286 Move V3, V9
	287 NotImplemented "Instruction BLR not yet implemented."
	288 Move X8, [X20]
	289 Move W1, [X31+140]
	290 Move X9, [X8+1256]
	291 Move X2, [X8+1264]
	292 Move X0, X20
	293 Move V0, V10
	294 Move V1, V11
	295 Move V2, V8
	296 Move V3, V9
	297 NotImplemented "Instruction BLR not yet implemented."
	298 Move X8, 0x331000
	299 Move X8, [X8+728]
	300 Add X0, X31, 64
	301 Move X1, [X8]
	302 Call Enumerator<Object>.Dispose, X0
	303 Move X0, [X19+48]
	304 Compare X0, 0
	305 JumpIfEqual {433}
	306 Move X8, 0x331000
	307 Move X8, [X8+784]
	308 Move X1, [X8]
	309 Add X8, X31, 8
	310 Call HashSet`1<Object>.GetEnumerator, X0
	311 NotImplemented "Instruction LDUR not yet implemented."
	312 Move X8, [X31+24]
	313 Move X21, 0x331000
	314 Move [X31+2], V0
	315 Move [X31+48], X8
	316 Move X21, [X21+744]
	317 Move X1, [X21]
	318 Add X0, X31, 32
	319 Call Enumerator<Object>.MoveNext, X0
	320 Move TEMP, X0
	321 And TEMP, TEMP, 1
	322 Compare TEMP, 1
	323 JumpIfNotEqual {407}
	324 Move X20, [X31+48]
	325 Compare X20, 0
	326 JumpIfEqual {361}
	327 Move X8, [X20]
	328 Move W1, [X31+140]
	329 Move X9, [X8+1272]
	330 Move X2, [X8+1280]
	331 Move X0, X20
	332 Move V0, V10
	333 Move V1, V11
	334 Move V2, V8
	335 Move V3, V9
	336 NotImplemented "Instruction BLR not yet implemented."
	337 Move X0, X20
	338 Move X1, X31
	339 Call Graphic.get_canvasRenderer, X0
	340 Compare X0, 0
	341 JumpIfEqual {362}
	342 Move X1, X31
	343 Call CanvasRenderer.get_hasMoved, X0
	344 Move TEMP, X0
	345 And TEMP, TEMP, 1
	346 Compare TEMP, 1
	347 JumpIfNotEqual {317}
	348 Move X8, [X20]
	349 Move W1, [X31+140]
	350 Move X9, [X8+1256]
	351 Move X2, [X8+1264]
	352 Move X0, X20
	353 Move V0, V10
	354 Move V1, V11
	355 Move V2, V8
	356 Move V3, V9
	357 NotImplemented "Instruction BLR not yet implemented."
	358 Call 0x1C17F20
	359 Call 0x1C17F20
	360 Call 0x1C17F20
	361 Call 0x1C17F20
	362 Call 0x1C17F20
	363 Move X20, X0
	364 NotImplemented "Instruction CMP not yet implemented."
	365 Move X0, X20
	366 Call 0x3EB2AD0
	367 Move X21, [X0]
	368 Call 0x3EB2AE0
	369 Move X1, [X22]
	370 Add X0, X31, 32
	371 Call Enumerator<Object>.Dispose, X0
	372 Compare X21, 0
	373 JumpIfNotEqual {521}
	374 Move X0, [X19+48]
	375 Compare X0, 0
	376 JumpIfEqual {433}
	377 Move X8, 0x331000
	378 Move X8, [X8+784]
	379 Move X1, [X8]
	380 Add X8, X31, 8
	381 Call HashSet`1<Object>.GetEnumerator, X0
	382 NotImplemented "Instruction LDUR not yet implemented."
	383 Move X8, [X31+24]
	384 Move X20, 0x331000
	385 Move [X31+2], V0
	386 Move [X31+48], X8
	387 Move X20, [X20+744]
	388 Move X1, [X20]
	389 Add X0, X31, 32
	390 Call Enumerator<Object>.MoveNext, X0
	391 Move TEMP, X0
	392 And TEMP, TEMP, 1
	393 Compare TEMP, 1
	394 JumpIfNotEqual {407}
	395 Move X0, [X31+48]
	396 Compare X0, 0
	397 JumpIfEqual {434}
	398 Move X8, [X0]
	399 Move W1, [X31+140]
	400 Move X9, [X8+1256]
	401 Move X2, [X8+1264]
	402 Move V0, V10
	403 Move V1, V11
	404 Move V2, V8
	405 Move V3, V9
	406 NotImplemented "Instruction BLR not yet implemented."
	407 Move X1, [X22]
	408 Add X0, X31, 32
	409 Call Enumerator<Object>.Dispose, X0
	410 Move X8, [X19]
	411 Move [X19+80], S10
	412 Move [X19+88], S11
	413 Move [X19+88], S8
	414 Move [X19+96], S9
	415 Move [X19+96], W31
	416 Move X9, [X8+648]
	417 Move X1, [X8+656]
	418 Move X0, X19
	419 NotImplemented "Instruction BLR not yet implemented."
	420 Move X20, [X31+176]
	421 Move X19, [X31+184]
	422 Move X22, [X31+160]
	423 Move X21, [X31+168]
	424 Move X24, [X31+144]
	425 Move X23, [X31+152]
	426 Move X30, [X31+128]
	427 Move D9, [X31+112]
	428 Move D8, [X31+120]
	429 Move D11, [X31+96]
	430 Move D10, [X31+104]
	431 Add X31, X31, 192
	432 Return 
	433 Call 0x1C17F20
	434 Call 0x1C17F20
	435 Move X21, X31
	436 Move X20, X0
	437 Move X1, [X22]
	438 Add X0, X31, 32
	439 Call Enumerator<Object>.Dispose, X0
	440 Compare X21, 0
	441 JumpIfEqual {532}
	442 Move X0, X21
	443 Call 0x1C17F18
	444 Move X20, X0
	445 NotImplemented "Instruction CMP not yet implemented."
	446 Move X0, X20
	447 Call 0x3EB2AD0
	448 Move X21, [X0]
	449 Call 0x3EB2AE0
	450 Move X1, [X22]
	451 Add X0, X31, 32
	452 Call Enumerator<Object>.Dispose, X0
	453 Compare X21, 0
	454 JumpIfEqual {410}
	455 Move X21, X31
	456 Move X20, X0
	457 Move X1, [X22]
	458 Add X0, X31, 32
	459 Call Enumerator<Object>.Dispose, X0
	460 Compare X21, 0
	461 JumpIfEqual {532}
	462 Move X0, X21
	463 Call 0x1C17F18
	464 Move X20, X0
	465 NotImplemented "Instruction CMP not yet implemented."
	466 Move X0, X20
	467 Call 0x3EB2AD0
	468 Move X21, [X0]
	469 Call 0x3EB2AE0
	470 Move X8, 0x331000
	471 Move X8, [X8+728]
	472 Add X0, X31, 64
	473 Move X1, [X8]
	474 Call Enumerator<Object>.Dispose, X0
	475 Compare X21, 0
	476 JumpIfEqual {303}
	477 Move X21, X31
	478 Move X20, X0
	479 Move X8, 0x331000
	480 Move X8, [X8+728]
	481 Move X1, [X8]
	482 Add X0, X31, 64
	483 Call Enumerator<Object>.Dispose, X0
	484 Compare X21, 0
	485 JumpIfEqual {532}
	486 Move X0, X21
	487 Call 0x1C17F18
	488 Move X20, X0
	489 NotImplemented "Instruction CMP not yet implemented."
	490 Move X0, X20
	491 Call 0x3EB2AD0
	492 Move X21, [X0]
	493 Call 0x3EB2AE0
	494 Move X1, [X22]
	495 Add X0, X31, 32
	496 Call Enumerator<Object>.Dispose, X0
	497 Compare X21, 0
	498 JumpIfEqual {136}
	499 Move X21, X31
	500 Move X20, X0
	501 Move X1, [X22]
	502 Add X0, X31, 32
	503 Call Enumerator<Object>.Dispose, X0
	504 Compare X21, 0
	505 JumpIfEqual {532}
	506 Move X0, X21
	507 Call 0x1C17F18
	508 Move X20, X0
	509 NotImplemented "Instruction CMP not yet implemented."
	510 Move X0, X20
	511 Call 0x3EB2AD0
	512 Move X21, [X0]
	513 Call 0x3EB2AE0
	514 Move X8, 0x331000
	515 Move X8, [X8+728]
	516 Add X0, X31, 64
	517 Move X1, [X8]
	518 Call Enumerator<Object>.Dispose, X0
	519 Compare X21, 0
	520 JumpIfEqual {254}
	521 Move X0, X21
	522 Call 0x1C17F18
	523 Move X21, X31
	524 Move X20, X0
	525 Move X8, 0x331000
	526 Move X8, [X8+728]
	527 Move X1, [X8]
	528 Add X0, X31, 64
	529 Call Enumerator<Object>.Dispose, X0
	530 Compare X21, 0
	531 JumpIfNotEqual {534}
	532 Move X0, X20
	533 Call 0x1D2D690
	534 Move X0, X21
	535 Call 0x1C17F18
	536 Call 0x1991590

Method: System.Void UpdateClipSoftness()

Disassembly:
	0x03E3BBE4 CBNZ W9, 0x3E3BBF0
	0x03E3BBE8 MOV X0, X8
	0x03E3BBEC BL 0x1C16DFC
	0x03E3BBF0 MOV X0, X20
	0x03E3BBF4 MOV X1, X31
	0x03E3BBF8 BL 0x3C38948
	0x03E3BBFC TBZ X0, 0x0, 0x3E3BC60
	0x03E3BC00 LDR X0, [X23]
	0x03E3BC04 LDR W8, [X0 + 0xE0]
	0x03E3BC08 CBNZ W8, 0x3E3BC10
	0x03E3BC0C BL 0x1C16DFC
	0x03E3BC10 MOV X0, X31
	0x03E3BC14 BL 0x3E4FF90
	0x03E3BC18 CBZ X0, 0x3E3BD4C
	0x03E3BC1C LDR X20, [X0 + 0x40]
	0x03E3BC20 MOV X0, X19
	0x03E3BC24 MOV X1, X31
	0x03E3BC28 BL 0x3C32ECC
	0x03E3BC2C LDR X8, [X21]
	0x03E3BC30 MOV X21, X0
	0x03E3BC34 LDR W9, [X8 + 0xE0]
	0x03E3BC38 CBNZ W9, 0x3E3BC44
	0x03E3BC3C MOV X0, X8
	0x03E3BC40 BL 0x1C16DFC
	0x03E3BC44 MOV X0, X20
	0x03E3BC48 MOV X1, X21
	0x03E3BC4C MOV X2, X31
	0x03E3BC50 BL 0x3C3883C
	0x03E3BC54 TBZ X0, 0x0, 0x3E3BC60
	0x03E3BC58 MOVZ W8, 0x1
	0x03E3BC5C STRB W8, [X19 + 0xF2]
	0x03E3BC60 LDR X0, [X22]
	0x03E3BC64 LDR W8, [X0 + 0xE0]
	0x03E3BC68 CBNZ W8, 0x3E3BC74
	0x03E3BC6C BL 0x1C16DFC
	0x03E3BC70 LDR X0, [X22]
	0x03E3BC74 LDR X8, [X0 + 0xB8]
	0x03E3BC78 LDRSW X20, [X8 + 0x8]
	0x03E3BC7C STR W20, [X19 + 0xEC]
	0x03E3BC80 LDR X21, [X8]
	0x03E3BC84 CBZ X21, 0x3E3BD4C
	0x03E3BC88 LDR X8, [X21]
	0x03E3BC8C MOV X0, X19
	0x03E3BC90 LDR X1, [X8 + 0x40]
	0x03E3BC94 BL 0x1C16E00
	0x03E3BC98 CBZ X0, 0x3E3BD50
	0x03E3BC9C LDR W8, [X21 + 0x18]
	0x03E3BCA0 CMP W20, W8
	0x03E3BCA4 B.CS 0x3E3BD5C
	0x03E3BCA8 ADD X8, X21, X20, 0x3, LSL
	0x03E3BCAC STR X19, [X8 + 0x20]
	0x03E3BCB0 LDR X8, [X22]
	0x03E3BCB4 MOV X0, X19
	0x03E3BCB8 LDR X8, [X8 + 0xB8]
	0x03E3BCBC LDR W9, [X8 + 0x8]
	0x03E3BCC0 ADD W9, W9, 0x1
	0x03E3BCC4 STR W9, [X8 + 0x8]
	0x03E3BCC8 STRB W31, [X19 + 0xF1]
	0x03E3BCCC BL 0x3E41268
	0x03E3BCD0 LDR X8, [X19]
	0x03E3BCD4 AND W9, W0, 0x1
	0x03E3BCD8 STRB W9, [X19 + 0xE8]
	0x03E3BCDC MOV X0, X19
	0x03E3BCE0 LDR X9, [X8 + 0x2B8]
	0x03E3BCE4 LDR X1, [X8 + 0x2C0]
	0x03E3BCE8 BLR X9
	0x03E3BCEC TBZ X0, 0x0, 0x3E3BD00
	0x03E3BCF0 LDRB W8, [X19 + 0xF1]
	0x03E3BCF4 CBZ W8, 0x3E3BD34
	0x03E3BCF8 MOVZ W1, 0x2
	0x03E3BCFC B 0x3E3BD04
	0x03E3BD00 MOVZ W1, 0x4
	0x03E3BD04 LDR X8, [X19]
	0x03E3BD08 MOVZ W2, 0x1
	0x03E3BD0C MOV X0, X19
	0x03E3BD10 MOVZ W20, 0x1
	0x03E3BD14 LDR X9, [X8 + 0x2D8]
	0x03E3BD18 LDR X3, [X8 + 0x2E0]
	0x03E3BD1C BLR X9
	0x03E3BD20 STRB W20, [X19 + 0x20]
	0x03E3BD24 LDP X20, X19, [X31 + 0x20]
	0x03E3BD28 LDP X22, X21, [X31 + 0x10]
	0x03E3BD2C LDP X30, X23, [X31], #0x30
	0x03E3BD30 RET
	0x03E3BD34 LDRB W8, [X19 + 0xF2]
	0x03E3BD38 CBZ W8, 0x3E3BD44
	0x03E3BD3C MOVZ W1, 0x3
	0x03E3BD40 B 0x3E3BD04
	0x03E3BD44 LDRB W1, [X19 + 0xF0]
	0x03E3BD48 B 0x3E3BD04
	0x03E3BD4C BL 0x1C16F20
	0x03E3BD50 BL 0x1C16F44
	0x03E3BD54 MOV X1, X31
	0x03E3BD58 BL 0x1C16DEC
	0x03E3BD5C BL 0x1C16F28
	0x03E3BD60 STP X30, X19, [X31 - 0x10]!
	0x03E3BD64 MOV X19, X0
	0x03E3BD68 ADD X0, X0, 0x130
	0x03E3BD6C MOV X1, X31
	0x03E3BD70 BL 0x3C3E3A8
	0x03E3BD74 MOV X0, X19
	0x03E3BD78 LDP X30, X19, [X31], #0x10
	0x03E3BD7C B 0x3E3BD80
	0x03E3BD80 STP X30, X23, [X31 - 0x30]!
	0x03E3BD84 STP X22, X21, [X31 + 0x10]
	0x03E3BD88 STP X20, X19, [X31 + 0x20]
	0x03E3BD8C ADRP X20, 0x5AD000
	0x03E3BD90 LDRB W8, [X20 + 0x7CC]
	0x03E3BD94 MOV X19, X0
	0x03E3BD98 TBNZ X8, 0x0, 0x3E3BDB0
	0x03E3BD9C ADRP X0, 0x31D000
	0x03E3BDA0 LDR X0, [X0 + 0xA58]
	0x03E3BDA4 BL 0x1C16CF4
	0x03E3BDA8 MOVZ W8, 0x1
	0x03E3BDAC STRB W8, [X20 + 0x7CC]
	0x03E3BDB0 LDRB W8, [X19 + 0x20]
	0x03E3BDB4 CBZ W8, 0x3E3BE84
	0x03E3BDB8 ADRP X21, 0x31D000
	0x03E3BDBC LDR X21, [X21 + 0xA58]
	0x03E3BDC0 LDR X0, [X21]
	0x03E3BDC4 LDR W8, [X0 + 0xE0]
	0x03E3BDC8 CBNZ W8, 0x3E3BDD4
	0x03E3BDCC BL 0x1C16DFC
	0x03E3BDD0 LDR X0, [X21]
	0x03E3BDD4 LDR X9, [X0 + 0xB8]
	0x03E3BDD8 LDR W8, [X9 + 0x8]
	0x03E3BDDC LDR X22, [X9]
	0x03E3BDE0 SUB W8, W8, 0x1
	0x03E3BDE4 STR W8, [X9 + 0x8]
	0x03E3BDE8 CBZ X22, 0x3E3BE94
	0x03E3BDEC LDR W9, [X22 + 0x18]
	0x03E3BDF0 CMP W8, W9
	0x03E3BDF4 B.CS 0x3E3BE98
	0x03E3BDF8 ADD X8, X22, W8, 0x3, SXTW
	0x03E3BDFC LDR X20, [X8 + 0x20]
	0x03E3BE00 CBZ X20, 0x3E3BE94
	0x03E3BE04 LDR W8, [X19 + 0xEC]
	0x03E3BE08 MOV X0, X20
	0x03E3BE0C STR W8, [X20 + 0xEC]
	0x03E3BE10 LDR X8, [X22]
	0x03E3BE14 LDRSW X23, [X19 + 0xEC]
	0x03E3BE18 LDR X1, [X8 + 0x40]
	0x03E3BE1C BL 0x1C16E00
	0x03E3BE20 CBZ X0, 0x3E3BE9C
	0x03E3BE24 LDR W8, [X22 + 0x18]
	0x03E3BE28 CMP W23, W8
	0x03E3BE2C B.CS 0x3E3BE98
	0x03E3BE30 ADD X8, X22, X23, 0x3, LSL
	0x03E3BE34 STR X20, [X8 + 0x20]
	0x03E3BE38 LDR X8, [X21]
	0x03E3BE3C LDR X9, [X8 + 0xB8]
	0x03E3BE40 LDR X8, [X9]
	0x03E3BE44 CBZ X8, 0x3E3BE94
	0x03E3BE48 LDRSW X9, [X9 + 0x8]
	0x03E3BE4C LDR W10, [X8 + 0x18]
	0x03E3BE50 CMP W9, W10
	0x03E3BE54 B.CS 0x3E3BE98
	0x03E3BE58 ADD X8, X8, X9, 0x3, LSL
	0x03E3BE5C STR X31, [X8 + 0x20]
	0x03E3BE60 LDR X8, [X19]
	0x03E3BE64 MOV X0, X19
	0x03E3BE68 LDR X9, [X8 + 0x2C8]
	0x03E3BE6C LDR X1, [X8 + 0x2D0]
	0x03E3BE70 BLR X9
	0x03E3BE74 MOV X0, X19
	0x03E3BE78 MOV X1, X31
	0x03E3BE7C BL 0x3E4BDC4
	0x03E3BE80 STRB W31, [X19 + 0x20]
	0x03E3BE84 LDP X20, X19, [X31 + 0x20]
	0x03E3BE88 LDP X22, X21, [X31 + 0x10]
	0x03E3BE8C LDP X30, X23, [X31], #0x30
	0x03E3BE90 RET
	0x03E3BE94 BL 0x1C16F20
	0x03E3BE98 BL 0x1C16F28
	0x03E3BE9C BL 0x1C16F44
	0x03E3BEA0 MOV X1, X31
	0x03E3BEA4 BL 0x1C16DEC
	0x03E3BEA8 LDRB W8, [X0 + 0x141]
	0x03E3BEAC CBZ W8, 0x3E3BEB8
	0x03E3BEB0 STRB W31, [X0 + 0x141]
	0x03E3BEB4 B 0x3E3B33C
	0x03E3BEB8 RET
	0x03E3BEBC STP X30, X19, [X31 - 0x10]!
	0x03E3BEC0 MOV X1, X31
	0x03E3BEC4 MOV X19, X0
	0x03E3BEC8 BL 0x3E5AD90
	0x03E3BECC LDR X8, [X19]
	0x03E3BED0 MOV X0, X19
	0x03E3BED4 LDP X9, X1, [X8 + 0x1C8]
	0x03E3BED8 BLR X9

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+80], X30
	003 Move [X31+88], X27
	004 Move [X31+96], X26
	005 Move [X31+104], X25
	006 Move [X31+112], X24
	007 Move [X31+120], X23
	008 Move [X31+128], X22
	009 Move [X31+136], X21
	010 Move [X31+144], X20
	011 Move [X31+152], X19
	012 Move X20, 0x5AE000
	013 Move W8, [X20+1935]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {48}
	019 Move X0, 0x331000
	020 Move X0, [X0+728]
	021 Call 0x1C17CF4
	022 Move X0, 0x331000
	023 Move X0, [X0+736]
	024 Call 0x1C17CF4
	025 Move X0, 0x331000
	026 Move X0, [X0+744]
	027 Call 0x1C17CF4
	028 Move X0, 0x331000
	029 Move X0, [X0+752]
	030 Call 0x1C17CF4
	031 Move X0, 0x331000
	032 Move X0, [X0+760]
	033 Call 0x1C17CF4
	034 Move X0, 0x331000
	035 Move X0, [X0+768]
	036 Call 0x1C17CF4
	037 Move X0, 0x331000
	038 Move X0, [X0+776]
	039 Call 0x1C17CF4
	040 Move X0, 0x331000
	041 Move X0, [X0+784]
	042 Call 0x1C17CF4
	043 Move X0, 0x331000
	044 Move X0, [X0+608]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X20+1935], W8
	048 Move X0, X19
	049 Move [X31+48], X31
	050 Move [X31+56], X31
	051 Move [X31+64], X31
	052 Move [X31+24], X31
	053 Move [X31+32], X31
	054 Move [X31+40], X31
	055 Call RectMask2D.get_Canvas, X0
	056 Compare X0, 0
	057 JumpIfEqual {152}
	058 Move X0, [X19+56]
	059 Compare X0, 0
	060 JumpIfEqual {166}
	061 Move X8, 0x331000
	062 Move X8, [X8+776]
	063 Move X21, 0x331000
	064 Move X25, 0x331000
	065 Move X24, 0x331000
	066 Move X21, [X21+752]
	067 Move X25, [X25+608]
	068 Move X24, [X24+784]
	069 Move X1, [X8]
	070 Move X23, 0x331000
	071 Move X22, 0x331000
	072 Move X26, 0x331000
	073 Move X23, [X23+744]
	074 Move X22, [X22+736]
	075 Move X26, [X26+728]
	076 Add X8, X31, 0
	077 Call HashSet`1<Object>.GetEnumerator, X0
	078 Move V0, [X31]
	079 Move X8, [X31+16]
	080 Move [X31+3], V0
	081 Move [X31+64], X8
	082 Move X1, [X21]
	083 Add X0, X31, 48
	084 Call Enumerator<Object>.MoveNext, X0
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {120}
	089 Move X20, [X31+64]
	090 Compare X20, 0
	091 JumpIfEqual {165}
	092 Move X8, [X20]
	093 NotImplemented "Instruction LDUR not yet implemented."
	094 Move X1, [X25]
	095 NotImplemented "Instruction LDRH not yet implemented."
	096 Compare X9, 0
	097 JumpIfEqual {104}
	098 Move X10, [X8+176]
	099 Add X10, X10, 8
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Subtract X9, X9, 1
	103 Add X10, X10, 16
	104 Move W2, 5
	105 Move X0, X20
	106 Call 0x1C5D788
	107 Move W9, [X10]
	108 Add W9, W9, 5
	109 Add X8, X8, W9
	110 Add X0, X8, 312
	111 Move X8, [X0]
	112 Move X1, [X0+8]
	113 Move X9, X27
	114 ShiftRight X9, 32
	115 And X9, X9, 0x7FFFFFFF
	116 NotImplemented "Instruction SCVTF not yet implemented."
	117 NotImplemented "Instruction SCVTF not yet implemented."
	118 Move X0, X20
	119 NotImplemented "Instruction BLR not yet implemented."
	120 Move X1, [X26]
	121 Add X0, X31, 48
	122 Call Enumerator<Object>.Dispose, X0
	123 Move X0, [X19+48]
	124 Compare X0, 0
	125 JumpIfEqual {166}
	126 Move X1, [X24]
	127 Add X8, X31, 24
	128 Call HashSet`1<Object>.GetEnumerator, X0
	129 Move X1, [X23]
	130 Add X0, X31, 24
	131 Call Enumerator<Object>.MoveNext, X0
	132 Move TEMP, X0
	133 And TEMP, TEMP, 1
	134 Compare TEMP, 1
	135 JumpIfNotEqual {149}
	136 Move X0, [X31+40]
	137 Compare X0, 0
	138 JumpIfEqual {164}
	139 Move X8, [X0]
	140 NotImplemented "Instruction LDUR not yet implemented."
	141 Move X1, [X8+1296]
	142 Move X10, [X8+1288]
	143 Move X8, X9
	144 ShiftRight X8, 32
	145 And X8, X8, 0x7FFFFFFF
	146 NotImplemented "Instruction SCVTF not yet implemented."
	147 NotImplemented "Instruction SCVTF not yet implemented."
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move X1, [X22]
	150 Add X0, X31, 24
	151 Call Enumerator<Object>.Dispose, X0
	152 Move X20, [X31+144]
	153 Move X19, [X31+152]
	154 Move X22, [X31+128]
	155 Move X21, [X31+136]
	156 Move X24, [X31+112]
	157 Move X23, [X31+120]
	158 Move X26, [X31+96]
	159 Move X25, [X31+104]
	160 Move X30, [X31+80]
	161 Move X27, [X31+88]
	162 Add X31, X31, 160
	163 Return 
	164 Call 0x1C17F20
	165 Call 0x1C17F20
	166 Call 0x1C17F20
	167 Move X20, X0
	168 NotImplemented "Instruction CMP not yet implemented."
	169 Move X0, X20
	170 Call 0x3EB2AD0
	171 Move X19, [X0]
	172 Call 0x3EB2AE0
	173 Move X1, [X22]
	174 Add X0, X31, 24
	175 Call Enumerator<Object>.Dispose, X0
	176 Compare X19, 0
	177 JumpIfEqual {152}
	178 Move X0, X19
	179 Call 0x1C17F18
	180 Move X19, X31
	181 Move X20, X0
	182 Move X1, [X22]
	183 Add X0, X31, 24
	184 Call Enumerator<Object>.Dispose, X0
	185 Compare X19, 0
	186 JumpIfEqual {209}
	187 Move X0, X19
	188 Call 0x1C17F18
	189 Move X20, X0
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Move X0, X20
	192 Call 0x3EB2AD0
	193 Move X21, [X0]
	194 Call 0x3EB2AE0
	195 Move X1, [X26]
	196 Add X0, X31, 48
	197 Call Enumerator<Object>.Dispose, X0
	198 Compare X21, 0
	199 JumpIfEqual {123}
	200 Move X0, X21
	201 Call 0x1C17F18
	202 Move X21, X31
	203 Move X20, X0
	204 Move X1, [X26]
	205 Add X0, X31, 48
	206 Call Enumerator<Object>.Dispose, X0
	207 Compare X21, 0
	208 JumpIfNotEqual {211}
	209 Move X0, X20
	210 Call 0x1D2D690
	211 Move X0, X21
	212 Call 0x1C17F18
	213 Call 0x1991590

Method: System.Void AddClippable(UnityEngine.UI.IClippable clippable)

Disassembly:
	0x03E3BEDC TBZ X0, 0x0, 0x3E3BEEC
	0x03E3BEE0 MOV X0, X19
	0x03E3BEE4 LDP X30, X19, [X31], #0x10
	0x03E3BEE8 B 0x3E3B33C
	0x03E3BEEC LDP X30, X19, [X31], #0x10
	0x03E3BEF0 RET
	0x03E3BEF4 LDR W8, [X0 + 0x108]
	0x03E3BEF8 CMP W8, 0x1
	0x03E3BEFC CSET W0, HI
	0x03E3BF00 RET
	0x03E3BF04 LDR W8, [X0 + 0x108]
	0x03E3BF08 AND W8, W8, 0xFFFFFFFD
	0x03E3BF0C CMP W8, 0x1
	0x03E3BF10 CSET W0, EQ
	0x03E3BF14 RET
	0x03E3BF18 SUB X31, X31, 0x80
	0x03E3BF1C STP D15, D14, [X31 + 0x20]
	0x03E3BF20 STP D13, D12, [X31 + 0x30]
	0x03E3BF24 STP D11, D10, [X31 + 0x40]
	0x03E3BF28 STP D9, D8, [X31 + 0x50]
	0x03E3BF2C STP X30, X21, [X31 + 0x60]
	0x03E3BF30 STP X20, X19, [X31 + 0x70]
	0x03E3BF34 ADRP X21, 0x5AD000
	0x03E3BF38 LDRB W8, [X21 + 0x79A]
	0x03E3BF3C MOV X20, X1
	0x03E3BF40 MOV X19, X0
	0x03E3BF44 TBNZ X8, 0x0, 0x3E3BF68
	0x03E3BF48 ADRP X0, 0x2B8000
	0x03E3BF4C LDR X0, [X0 + 0x598]
	0x03E3BF50 BL 0x1C16CF4
	0x03E3BF54 ADRP X0, 0x30E000
	0x03E3BF58 LDR X0, [X0 + 0x6B8]
	0x03E3BF5C BL 0x1C16CF4
	0x03E3BF60 MOVZ W8, 0x1
	0x03E3BF64 STRB W8, [X21 + 0x79A]
	0x03E3BF68 STR X31, [X31 + 0x10]
	0x03E3BF6C CBZ X20, 0x3E3C124
	0x03E3BF70 LDR W8, [X20 + 0x148]
	0x03E3BF74 CBNZ W8, 0x3E3C104
	0x03E3BF78 ADRP X8, 0x2B8000
	0x03E3BF7C LDR X8, [X8 + 0x598]
	0x03E3BF80 LDR X21, [X19 + 0x120]
	0x03E3BF84 LDR X0, [X8]
	0x03E3BF88 LDR W8, [X0 + 0xE0]
	0x03E3BF8C CBNZ W8, 0x3E3BF94
	0x03E3BF90 BL 0x1C16DFC
	0x03E3BF94 MOV X0, X21
	0x03E3BF98 MOV X1, X31
	0x03E3BF9C MOV X2, X31
	0x03E3BFA0 BL 0x3C3883C
	0x03E3BFA4 TBNZ X0, 0x0, 0x3E3C104
	0x03E3BFA8 ADRP X21, 0x59E000
	0x03E3BFAC LDRB W8, [X21 + 0x78F]
	0x03E3BFB0 CBNZ W8, 0x3E3BFC8
	0x03E3BFB4 ADRP X0, 0x2C0000
	0x03E3BFB8 LDR X0, [X0 + 0xF08]
	0x03E3BFBC BL 0x1C16CF4
	0x03E3BFC0 MOVZ W8, 0x1
	0x03E3BFC4 STRB W8, [X21 + 0x78F]
	0x03E3BFC8 ADRP X8, 0x2C0000
	0x03E3BFCC LDR X8, [X8 + 0xF08]
	0x03E3BFD0 ADD X1, X31, 0x18
	0x03E3BFD4 MOV X0, X20
	0x03E3BFD8 LDR X8, [X8]
	0x03E3BFDC LDR X8, [X8 + 0xB8]
	0x03E3BFE0 LDR V0, [X8]
	0x03E3BFE4 STR D0, [X31 + 0x18]
	0x03E3BFE8 BL 0x3E389E8
	0x03E3BFEC TBZ X0, 0x0, 0x3E3C104

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5AE000
	006 Move W8, [X21+1936]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x331000
	014 Move X0, [X0+792]
	015 Call 0x1C17CF4
	016 Move X0, 0x331000
	017 Move X0, [X0+800]
	018 Call 0x1C17CF4
	019 Move X0, 0x331000
	020 Move X0, [X0+512]
	021 Call 0x1C17CF4
	022 Move X0, 0x2B9000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1936], W8
	027 Compare X20, 0
	028 JumpIfEqual {75}
	029 Move X8, 0x331000
	030 Move X8, [X8+512]
	031 Move W9, 1
	032 Move [X19+64], W9
	033 Move X10, [X20]
	034 Move X9, [X8]
	035 Move W8, [X10+304]
	036 Move W11, [X9+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X8, 0x2B9000
	039 Move X8, [X8+1432]
	040 Move X21, X31
	041 Move X10, [X10+200]
	042 Add X10, X10, X11
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X0, [X8]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X21
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Equality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {65}
	059 Move X0, [X19+56]
	060 Compare X0, 0
	061 JumpIfEqual {80}
	062 Move X8, 0x331000
	063 Move X8, [X8+792]
	064 Move X1, X20
	065 Move X0, [X19+48]
	066 Compare X0, 0
	067 JumpIfEqual {80}
	068 Move X8, 0x331000
	069 Move X8, [X8+800]
	070 Move X1, X21
	071 Move X2, [X8]
	072 Call HashSet`1<Object>.Add, X0, X1
	073 Move W8, 1
	074 Move [X19+96], W8
	075 Move X20, [X31+16]
	076 Move X19, [X31+24]
	077 Move X30, [X31+32]
	078 Move X21, [X31+40]
	079 Return 
	080 Call 0x1C17F20

Method: System.Void RemoveClippable(UnityEngine.UI.IClippable clippable)

Disassembly:
	0x03E3BFF0 LDR X21, [X19 + 0x120]
	0x03E3BFF4 LDP S8, S9, [X31 + 0x18]
	0x03E3BFF8 MOV X0, X20
	0x03E3BFFC MOV X1, X31
	0x03E3C000 BL 0x3E4F314
	0x03E3C004 ADRP X8, 0x30D000
	0x03E3C008 LDR X8, [X8 + 0x6B8]
	0x03E3C00C MOV X20, X0
	0x03E3C010 LDR X8, [X8]
	0x03E3C014 LDR W9, [X8 + 0xE0]
	0x03E3C018 CBNZ W9, 0x3E3C024
	0x03E3C01C MOV X0, X8
	0x03E3C020 BL 0x1C16DFC
	0x03E3C024 ADD X2, X31, 0x10
	0x03E3C028 MOV X0, X21
	0x03E3C02C MOV V0.16B, V8.16B
	0x03E3C030 MOV V1.16B, V9.16B
	0x03E3C034 MOV X1, X20
	0x03E3C038 MOV X3, X31
	0x03E3C03C BL 0x3E23A98
	0x03E3C040 TBZ X0, 0x0, 0x3E3C104
	0x03E3C044 LDR X0, [X19 + 0x120]
	0x03E3C048 CBZ X0, 0x3E3C124
	0x03E3C04C LDR V14, [X19 + 0x12C]
	0x03E3C050 LDP S15, S8, [X31 + 0x10]
	0x03E3C054 LDR V9, [X19 + 0x128]
	0x03E3C058 MOV X1, X31
	0x03E3C05C BL 0x3C3E51C
	0x03E3C060 LDR X0, [X19 + 0x100]
	0x03E3C064 CBZ X0, 0x3E3C124
	0x03E3C068 MOV X1, X31
	0x03E3C06C STP S1, S0, [X31 + 0x8]
	0x03E3C070 BL 0x3C3E51C
	0x03E3C074 LDR X0, [X19 + 0x100]
	0x03E3C078 CBZ X0, 0x3E3C124
	0x03E3C07C MOV X1, X31
	0x03E3C080 MOV V10.16B, V2.16B
	0x03E3C084 MOV V11.16B, V3.16B
	0x03E3C088 BL 0x3C3E90C
	0x03E3C08C LDR X0, [X19 + 0x120]
	0x03E3C090 CBZ X0, 0x3E3C124
	0x03E3C094 LDR W20, [X19 + 0x108]
	0x03E3C098 MOV X1, X31
	0x03E3C09C MOV V12.16B, V0.16B
	0x03E3C0A0 MOV V13.16B, V1.16B
	0x03E3C0A4 BL 0x3C3E51C
	0x03E3C0A8 LDR V0, [X19 + 0x110]
	0x03E3C0AC CMP W20, 0x2
	0x03E3C0B0 FCSEL S1, S2, S3, CC
	0x03E3C0B4 FMOV S2, 1
	0x03E3C0B8 FSUB S0, S2, S0
	0x03E3C0BC FMUL S2, S1, S0
	0x03E3C0C0 FCMP S2, 0x0
	0x03E3C0C4 B.LS 0x3E3C104
	0x03E3C0C8 LDR V6, [X31 + 0xC]
	0x03E3C0CC FSUB S1, S15, S9
	0x03E3C0D0 FSUB S0, S8, S14
	0x03E3C0D4 FSUB S3, S10, S12
	0x03E3C0D8 FSUB S1, S1, S6
	0x03E3C0DC LDR V6, [X31 + 0x8]
	0x03E3C0E0 FSUB S4, S11, S13
	0x03E3C0E4 FMOV S5, 0.5
	0x03E3C0E8 MOV X0, X19
	0x03E3C0EC FSUB S6, S0, S6
	0x03E3C0F0 FMUL S0, S3, S5
	0x03E3C0F4 FMUL S3, S4, S5
	0x03E3C0F8 FSUB S0, S1, S0
	0x03E3C0FC FSUB S1, S6, S3
	0x03E3C100 BL 0x3E3C128
	0x03E3C104 LDP X20, X19, [X31 + 0x70]
	0x03E3C108 LDP X30, X21, [X31 + 0x60]
	0x03E3C10C LDP D9, D8, [X31 + 0x50]
	0x03E3C110 LDP D11, D10, [X31 + 0x40]
	0x03E3C114 LDP D13, D12, [X31 + 0x30]
	0x03E3C118 LDP D15, D14, [X31 + 0x20]
	0x03E3C11C ADD X31, X31, 0x80
	0x03E3C120 RET
	0x03E3C124 BL 0x1C16F20
	0x03E3C128 LDR W8, [X0 + 0x108]
	0x03E3C12C CMP W8, 0x3
	0x03E3C130 B.HI 0x3E3C154
	0x03E3C134 ADRP X9, 0xFFFFFFFFFCD5C000
	0x03E3C138 ADD X9, X9, 0x620
	0x03E3C13C ADR X10, 0x10
	0x03E3C140 LDRB W11, [X9, X8, LSL]
	0x03E3C144 ADD X10, X10, X11, 0x2, LSL
	0x03E3C148 BR X10
	0x03E3C14C FDIV S0, S0, S2
	0x03E3C150 B 0x3E3C174
	0x03E3C154 RET
	0x03E3C158 FDIV S0, S0, S2
	0x03E3C15C B 0x3E3C16C
	0x03E3C160 FDIV S0, S1, S2
	0x03E3C164 B 0x3E3C174
	0x03E3C168 FDIV S0, S1, S2
	0x03E3C16C FMOV S1, 1
	0x03E3C170 FSUB S0, S1, S0
	0x03E3C174 FMOV S1, 1
	0x03E3C178 FCMP S0, 0x0
	0x03E3C17C FMOV S2, W31
	0x03E3C180 FMIN S0, S0, S1
	0x03E3C184 FCSEL S0, S0, S2, PL
	0x03E3C188 MOVZ W1, 0x1
	0x03E3C18C B 0x3E3B84C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5AE000
	007 Move W8, [X21+1937]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x330000
	015 Move X0, [X0+808]
	016 Call 0x1C17CF4
	017 Move X0, 0x330000
	018 Move X0, [X0+816]
	019 Call 0x1C17CF4
	020 Move X0, 0x330000
	021 Move X0, [X0+608]
	022 Call 0x1C17CF4
	023 Move X0, 0x330000
	024 Move X0, [X0+512]
	025 Call 0x1C17CF4
	026 Move X0, 0x2B8000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+1937], W8
	031 Compare X20, 0
	032 JumpIfEqual {108}
	033 Move W8, 1
	034 Move [X19+64], W8
	035 Move X10, 0x330000
	036 Move X8, [X20]
	037 Move X10, [X10+608]
	038 Move X21, 0x330000
	039 NotImplemented "Instruction LDRH not yet implemented."
	040 Move X1, [X10]
	041 Move X21, [X21+512]
	042 Compare X9, 0
	043 JumpIfEqual {50}
	044 Move X10, [X8+176]
	045 Add X10, X10, 8
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract X9, X9, 1
	049 Add X10, X10, 16
	050 Move W2, 4
	051 Move X0, X20
	052 Call 0x1C5D788
	053 Move W9, [X10]
	054 Add W9, W9, 4
	055 Add X8, X8, W9
	056 Add X0, X8, 312
	057 Move X8, [X0]
	058 Move X2, [X0+8]
	059 Move X22, 0x2B8000
	060 Move X22, [X22+1432]
	061 Move S0, W31
	062 Move S1, W31
	063 Move S2, W31
	064 Move S3, W31
	065 Move X0, X20
	066 Move W1, W31
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X9, [X20]
	069 Move X8, [X21]
	070 Move W11, [X9+304]
	071 Move W10, [X8+304]
	072 NotImplemented "Instruction CMP not yet implemented."
	073 Move X21, X31
	074 Move X9, [X9+200]
	075 Add X9, X9, X10
	076 NotImplemented "Instruction LDUR not yet implemented."
	077 NotImplemented "Instruction CMP not yet implemented."
	078 NotImplemented "Instruction CSEL not yet implemented."
	079 Move X0, [X22]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move X0, X21
	085 Move X1, X31
	086 Move X2, X31
	087 Call Object.op_Equality, X0, X1
	088 Move TEMP, X0
	089 And TEMP, TEMP, 1
	090 Compare TEMP, 1
	091 JumpIfNotEqual {98}
	092 Move X0, [X19+56]
	093 Compare X0, 0
	094 JumpIfEqual {114}
	095 Move X8, 0x330000
	096 Move X8, [X8+816]
	097 Move X1, X20
	098 Move X0, [X19+48]
	099 Compare X0, 0
	100 JumpIfEqual {114}
	101 Move X8, 0x330000
	102 Move X8, [X8+808]
	103 Move X1, X21
	104 Move X2, [X8]
	105 Call HashSet`1<Object>.Remove, X0, X1
	106 Move W8, 1
	107 Move [X19+96], W8
	108 Move X20, [X31+32]
	109 Move X19, [X31+40]
	110 Move X22, [X31+16]
	111 Move X21, [X31+24]
	112 Move X30, [X31+48]
	113 Return 
	114 Call 0x1C17F20

Method: System.Void OnTransformParentChanged()

Disassembly:
	0x03E3C190 STR X30, [X31 - 0x20]!
	0x03E3C194 STP X20, X19, [X31 + 0x10]
	0x03E3C198 LDR X8, [X0]
	0x03E3C19C MOV X19, X1
	0x03E3C1A0 MOV X20, X0
	0x03E3C1A4 LDP X9, X8, [X8 + 0x1C8]
	0x03E3C1A8 MOV X1, X8
	0x03E3C1AC BLR X9
	0x03E3C1B0 TBZ X0, 0x0, 0x3E3C1E0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Move [X0+128], X31
	006 Call UIBehaviour.OnTransformParentChanged, X0
	007 Move W8, 1
	008 Move [X19+64], W8
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

Method: System.Void OnCanvasHierarchyChanged()

Disassembly:
	0x03E3C1B4 LDR X8, [X20]
	0x03E3C1B8 MOV X0, X20
	0x03E3C1BC LDR X9, [X8 + 0x2B8]
	0x03E3C1C0 LDR X1, [X8 + 0x2C0]
	0x03E3C1C4 BLR X9
	0x03E3C1C8 TBZ X0, 0x0, 0x3E3C1E0
	0x03E3C1CC CBZ X19, 0x3E3C1F0
	0x03E3C1D0 LDR W8, [X19 + 0x148]
	0x03E3C1D4 CMP W8, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Move [X0+128], X31
	006 Call UIBehaviour.OnCanvasHierarchyChanged, X0
	007 Move W8, 1
	008 Move [X19+64], W8
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return 

