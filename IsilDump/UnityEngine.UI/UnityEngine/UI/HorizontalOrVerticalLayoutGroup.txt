Type: UnityEngine.UI.HorizontalOrVerticalLayoutGroup

Method: System.Single get_spacing()

Disassembly:
	0x03E337E8 LDRB W8, [X22 + 0x739]
	0x03E337EC LDR X21, [X21 + 0xD0]

ISIL:
	001 Move V0, [X0+96]
	002 Return V0

Method: System.Void set_spacing(System.Single value)

Disassembly:
	0x03E337F0 MOV W19, W1
	0x03E337F4 MOV X20, X0
	0x03E337F8 TBNZ X8, 0x0, 0x3E33810
	0x03E337FC ADRP X0, 0x338000
	0x03E33800 LDR X0, [X0 + 0xD0]
	0x03E33804 BL 0x1C16CF4
	0x03E33808 MOVZ W8, 0x1
	0x03E3380C STRB W8, [X22 + 0x739]
	0x03E33810 LDR X3, [X21]
	0x03E33814 ADD X1, X20, 0x28
	0x03E33818 MOV X0, X20
	0x03E3381C MOV W2, W19
	0x03E33820 LDP X20, X19, [X31 + 0x20]
	0x03E33824 LDP X22, X21, [X31 + 0x10]
	0x03E33828 LDR X30, [X31], #0x30
	0x03E3382C B 0x221256C
	0x03E33830 LDR X0, [X0 + 0x58]
	0x03E33834 RET
	0x03E33838 LDR V0, [X0 + 0x3C]
	0x03E3383C RET
	0x03E33840 LDR V0, [X0 + 0x44]
	0x03E33844 RET
	0x03E33848 LDR V0, [X0 + 0x4C]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5B6000
	007 Move X20, 0x339000
	008 Move W8, [X21+1829]
	009 Move X20, [X20+184]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x339000
	017 Move X0, [X0+184]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1829], W8
	021 Move X2, [X20]
	022 Add X1, X19, 96
	023 Move X0, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Move X21, [X31+24]
	028 Move V0, V8
	029 Move V8, [X31+48]
	030 Call LayoutGroup.SetProperty, X0, X1, V0
	031 Return 

Method: System.Boolean get_childForceExpandWidth()

Disassembly:
	0x03E3384C RET
	0x03E33850 LDR V0, [X0 + 0x40]

ISIL:
	001 Move W0, [X0+100]
	002 Return X0

Method: System.Void set_childForceExpandWidth(System.Boolean value)

Disassembly:
	0x03E33854 RET
	0x03E33858 LDR V0, [X0 + 0x48]
	0x03E3385C RET
	0x03E33860 LDR V0, [X0 + 0x50]
	0x03E33864 RET
	0x03E33868 MOV W0, W31
	0x03E3386C RET
	0x03E33870 STP X30, X19, [X31 - 0x10]!
	0x03E33874 MOV X1, X31
	0x03E33878 MOV X19, X0
	0x03E3387C BL 0x3E4BDBC
	0x03E33880 MOV X0, X19
	0x03E33884 LDP X30, X19, [X31], #0x10
	0x03E33888 B 0x3E3388C
	0x03E3388C STP X30, X21, [X31 - 0x20]!
	0x03E33890 STP X20, X19, [X31 + 0x10]
	0x03E33894 ADRP X20, 0x5B5000
	0x03E33898 LDRB W8, [X20 + 0x743]
	0x03E3389C MOV X19, X0
	0x03E338A0 TBNZ X8, 0x0, 0x3E338C4
	0x03E338A4 ADRP X0, 0x325000
	0x03E338A8 LDR X0, [X0 + 0x718]
	0x03E338AC BL 0x1C16CF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B6000
	007 Move X21, 0x339000
	008 Move W8, [X22+1830]
	009 Move X21, [X21+192]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x339000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1830], W8
	021 Move X3, [X21]
	022 Add X1, X19, 100
	023 And W2, W20, 1
	024 Move X0, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call 0x2213440, X0, X1, X2
	031 Return 

Method: System.Boolean get_childForceExpandHeight()

Disassembly:
	0x03E338B0 ADRP X0, 0x2C3000
	0x03E338B4 LDR X0, [X0 + 0x920]

ISIL:
	001 Move W0, [X0+101]
	002 Return X0

Method: System.Void set_childForceExpandHeight(System.Boolean value)

Disassembly:
	0x03E338B8 BL 0x1C16CF4
	0x03E338BC MOVZ W8, 0x1
	0x03E338C0 STRB W8, [X20 + 0x743]
	0x03E338C4 LDR X8, [X19]
	0x03E338C8 MOV X0, X19
	0x03E338CC LDP X9, X1, [X8 + 0x1C8]
	0x03E338D0 BLR X9
	0x03E338D4 TBZ X0, 0x0, 0x3E3392C
	0x03E338D8 ADRP X8, 0x325000
	0x03E338DC LDR X8, [X8 + 0x718]
	0x03E338E0 LDR X0, [X8]
	0x03E338E4 LDR W8, [X0 + 0xE0]
	0x03E338E8 CBNZ W8, 0x3E338F0
	0x03E338EC BL 0x1C16DFC
	0x03E338F0 MOV X0, X31
	0x03E338F4 BL 0x3CD1EF4
	0x03E338F8 MOV W21, W0
	0x03E338FC MOV X0, X19
	0x03E33900 BL 0x3E31474
	0x03E33904 MOV X20, X0
	0x03E33908 TBZ X21, 0x0, 0x3E33938
	0x03E3390C MOV X1, X20
	0x03E33910 BL 0x3E33BF4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B6000
	007 Move X21, 0x339000
	008 Move W8, [X22+1831]
	009 Move X21, [X21+192]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x339000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1831], W8
	021 Move X3, [X21]
	022 Add X1, X19, 101
	023 And W2, W20, 1
	024 Move X0, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call 0x2213440, X0, X1, X2
	031 Return 

Method: System.Boolean get_childControlWidth()

Disassembly:
	0x03E33914 MOV X1, X0
	0x03E33918 MOV X0, X19

ISIL:
	001 Move W0, [X0+102]
	002 Return X0

Method: System.Void set_childControlWidth(System.Boolean value)

Disassembly:
	0x03E3391C LDP X20, X19, [X31 + 0x10]
	0x03E33920 MOV X2, X31
	0x03E33924 LDP X30, X21, [X31], #0x20
	0x03E33928 B 0x3C366FC
	0x03E3392C LDP X20, X19, [X31 + 0x10]
	0x03E33930 LDP X30, X21, [X31], #0x20
	0x03E33934 RET
	0x03E33938 ADRP X8, 0x2C3000
	0x03E3393C LDR X8, [X8 + 0x920]
	0x03E33940 LDR X0, [X8]
	0x03E33944 LDR W8, [X0 + 0xE0]
	0x03E33948 CBNZ W8, 0x3E33950
	0x03E3394C BL 0x1C16DFC
	0x03E33950 MOV X0, X20
	0x03E33954 LDP X20, X19, [X31 + 0x10]
	0x03E33958 LDP X30, X21, [X31], #0x20
	0x03E3395C B 0x3E2F3D8
	0x03E33960 STP X30, X21, [X31 - 0x20]!
	0x03E33964 STP X20, X19, [X31 + 0x10]
	0x03E33968 ADRP X21, 0x5B5000
	0x03E3396C ADRP X20, 0x2C3000
	0x03E33970 LDRB W8, [X21 + 0x73D]
	0x03E33974 LDR X20, [X20 + 0x920]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B6000
	007 Move X21, 0x339000
	008 Move W8, [X22+1832]
	009 Move X21, [X21+192]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x339000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1832], W8
	021 Move X3, [X21]
	022 Add X1, X19, 102
	023 And W2, W20, 1
	024 Move X0, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call 0x2213440, X0, X1, X2
	031 Return 

Method: System.Boolean get_childControlHeight()

Disassembly:
	0x03E33978 MOV X19, X0
	0x03E3397C TBNZ X8, 0x0, 0x3E33994

ISIL:
	001 Move W0, [X0+103]
	002 Return X0

Method: System.Void set_childControlHeight(System.Boolean value)

Disassembly:
	0x03E33980 ADRP X0, 0x2C3000
	0x03E33984 LDR X0, [X0 + 0x920]
	0x03E33988 BL 0x1C16CF4
	0x03E3398C MOVZ W8, 0x1
	0x03E33990 STRB W8, [X21 + 0x73D]
	0x03E33994 ADD X0, X19, 0x38
	0x03E33998 MOV X1, X31
	0x03E3399C BL 0x3C3E3A8
	0x03E339A0 MOV X0, X19
	0x03E339A4 BL 0x3E31474
	0x03E339A8 LDR X8, [X20]
	0x03E339AC MOV X20, X0
	0x03E339B0 LDR W9, [X8 + 0xE0]
	0x03E339B4 CBNZ W9, 0x3E339C0
	0x03E339B8 MOV X0, X8
	0x03E339BC BL 0x1C16DFC
	0x03E339C0 MOV X0, X20
	0x03E339C4 BL 0x3E2F3D8
	0x03E339C8 MOV X0, X19
	0x03E339CC LDP X20, X19, [X31 + 0x10]
	0x03E339D0 MOV X1, X31
	0x03E339D4 LDP X30, X21, [X31], #0x20
	0x03E339D8 B 0x3E4BDC4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B6000
	007 Move X21, 0x339000
	008 Move W8, [X22+1833]
	009 Move X21, [X21+192]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x339000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1833], W8
	021 Move X3, [X21]
	022 Add X1, X19, 103
	023 And W2, W20, 1
	024 Move X0, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call 0x2213440, X0, X1, X2
	031 Return 

Method: System.Boolean get_childScaleWidth()

Disassembly:
	0x03E339DC B 0x3E3388C
	0x03E339E0 STR D8, [X31 - 0x40]!

ISIL:
	001 Move W0, [X0+104]
	002 Return X0

Method: System.Void set_childScaleWidth(System.Boolean value)

Disassembly:
	0x03E339E4 STP X30, X23, [X31 + 0x10]
	0x03E339E8 STP X22, X21, [X31 + 0x20]
	0x03E339EC STP X20, X19, [X31 + 0x30]
	0x03E339F0 ADRP X22, 0x5B5000
	0x03E339F4 ADRP X23, 0x2C0000
	0x03E339F8 LDRB W8, [X22 + 0x73E]
	0x03E339FC LDR X23, [X23 + 0x598]
	0x03E33A00 MOV V8.16B, V0.16B
	0x03E33A04 MOV W19, W2
	0x03E33A08 MOV X20, X1
	0x03E33A0C MOV X21, X0
	0x03E33A10 TBNZ X8, 0x0, 0x3E33A28
	0x03E33A14 ADRP X0, 0x2C0000
	0x03E33A18 LDR X0, [X0 + 0x598]
	0x03E33A1C BL 0x1C16CF4
	0x03E33A20 MOVZ W8, 0x1
	0x03E33A24 STRB W8, [X22 + 0x73E]
	0x03E33A28 LDR X0, [X23]
	0x03E33A2C LDR W8, [X0 + 0xE0]
	0x03E33A30 CBNZ W8, 0x3E33A38
	0x03E33A34 BL 0x1C16DFC
	0x03E33A38 MOV X0, X20
	0x03E33A3C MOV X1, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B6000
	007 Move X21, 0x339000
	008 Move W8, [X22+1834]
	009 Move X21, [X21+192]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x339000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1834], W8
	021 Move X3, [X21]
	022 Add X1, X19, 104
	023 And W2, W20, 1
	024 Move X0, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call 0x2213440, X0, X1, X2
	031 Return 

Method: System.Boolean get_childScaleHeight()

Disassembly:
	0x03E33A40 MOV X2, X31
	0x03E33A44 BL 0x3C3883C

ISIL:
	001 Move W0, [X0+105]
	002 Return X0

Method: System.Void set_childScaleHeight(System.Boolean value)

Disassembly:
	0x03E33A48 TBZ X0, 0x0, 0x3E33A60
	0x03E33A4C LDP X20, X19, [X31 + 0x30]
	0x03E33A50 LDP X22, X21, [X31 + 0x20]
	0x03E33A54 LDP X30, X23, [X31 + 0x10]
	0x03E33A58 LDR V8, [X31], #0x40
	0x03E33A5C RET
	0x03E33A60 MOV X0, X21
	0x03E33A64 MOV X1, X20
	0x03E33A68 MOV W2, W19
	0x03E33A6C LDP X20, X19, [X31 + 0x30]
	0x03E33A70 LDP X22, X21, [X31 + 0x20]
	0x03E33A74 LDP X30, X23, [X31 + 0x10]
	0x03E33A78 FMOV S1, 1
	0x03E33A7C MOV V0.16B, V8.16B
	0x03E33A80 LDR V8, [X31], #0x40
	0x03E33A84 B 0x3E32EDC
	0x03E33A88 STP X30, X21, [X31 - 0x20]!
	0x03E33A8C STP X20, X19, [X31 + 0x10]
	0x03E33A90 ADRP X20, 0x5B5000
	0x03E33A94 LDRB W8, [X20 + 0x742]
	0x03E33A98 MOV X19, X0
	0x03E33A9C TBNZ X8, 0x0, 0x3E33ACC
	0x03E33AA0 ADRP X0, 0x338000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B6000
	007 Move X21, 0x339000
	008 Move W8, [X22+1835]
	009 Move X21, [X21+192]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x339000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1835], W8
	021 Move X3, [X21]
	022 Add X1, X19, 105
	023 And W2, W20, 1
	024 Move X0, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call 0x2213440, X0, X1, X2
	031 Return 

Method: System.Boolean get_reverseArrangement()

Disassembly:
	0x03E33AA4 LDR X0, [X0 + 0x38]
	0x03E33AA8 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+106]
	002 Return X0

Method: System.Void set_reverseArrangement(System.Boolean value)

Disassembly:
	0x03E33AAC ADRP X0, 0x2C0000
	0x03E33AB0 LDR X0, [X0 + 0x598]
	0x03E33AB4 BL 0x1C16CF4
	0x03E33AB8 ADRP X0, 0x2C0000
	0x03E33ABC LDR X0, [X0 + 0x6C0]
	0x03E33AC0 BL 0x1C16CF4
	0x03E33AC4 MOVZ W8, 0x1
	0x03E33AC8 STRB W8, [X20 + 0x742]
	0x03E33ACC MOV X0, X19
	0x03E33AD0 MOV X1, X31
	0x03E33AD4 BL 0x3C32E90
	0x03E33AD8 CBZ X0, 0x3E33BBC
	0x03E33ADC ADRP X21, 0x2C0000
	0x03E33AE0 LDR X21, [X21 + 0x598]
	0x03E33AE4 MOV X1, X31
	0x03E33AE8 BL 0x3C3F49C
	0x03E33AEC LDR X8, [X21]
	0x03E33AF0 MOV X20, X0
	0x03E33AF4 LDR W9, [X8 + 0xE0]
	0x03E33AF8 CBNZ W9, 0x3E33B04
	0x03E33AFC MOV X0, X8
	0x03E33B00 BL 0x1C16DFC
	0x03E33B04 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B6000
	007 Move X21, 0x339000
	008 Move W8, [X22+1836]
	009 Move X21, [X21+192]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x339000
	017 Move X0, [X0+192]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1836], W8
	021 Move X3, [X21]
	022 Add X1, X19, 106
	023 And W2, W20, 1
	024 Move X0, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call 0x2213440, X0, X1, X2
	031 Return 

Method: System.Void CalcAlongAxis(System.Int32 axis, System.Boolean isVertical)

Disassembly:
	0x03E32ED4 MOV X0, X19
	0x03E32ED8 BL 0x1C16DEC
	0x03E32EDC STP D13, D12, [X31 - 0x60]!
	0x03E32EE0 STP D11, D10, [X31 + 0x10]
	0x03E32EE4 STP D9, D8, [X31 + 0x20]
	0x03E32EE8 STP X30, X23, [X31 + 0x30]
	0x03E32EEC STP X22, X21, [X31 + 0x40]
	0x03E32EF0 STP X20, X19, [X31 + 0x50]
	0x03E32EF4 ADRP X22, 0x5B6000
	0x03E32EF8 ADRP X23, 0x2C1000
	0x03E32EFC LDRB W8, [X22 + 0x73F]
	0x03E32F00 LDR X23, [X23 + 0x598]
	0x03E32F04 MOV V8.16B, V1.16B
	0x03E32F08 MOV V9.16B, V0.16B
	0x03E32F0C MOV W20, W2
	0x03E32F10 MOV X19, X1
	0x03E32F14 MOV X21, X0
	0x03E32F18 TBNZ X8, 0x0, 0x3E32F30
	0x03E32F1C ADRP X0, 0x2C1000
	0x03E32F20 LDR X0, [X0 + 0x598]
	0x03E32F24 BL 0x1C16CF4
	0x03E32F28 MOVZ W8, 0x1
	0x03E32F2C STRB W8, [X22 + 0x73F]
	0x03E32F30 LDR X0, [X23]
	0x03E32F34 LDR W8, [X0 + 0xE0]
	0x03E32F38 CBNZ W8, 0x3E32F40
	0x03E32F3C BL 0x1C16DFC
	0x03E32F40 MOV X0, X19
	0x03E32F44 MOV X1, X31
	0x03E32F48 MOV X2, X31
	0x03E32F4C BL 0x3C3883C
	0x03E32F50 TBZ X0, 0x0, 0x3E32F70
	0x03E32F54 LDP X20, X19, [X31 + 0x50]
	0x03E32F58 LDP X22, X21, [X31 + 0x40]
	0x03E32F5C LDP X30, X23, [X31 + 0x30]
	0x03E32F60 LDP D9, D8, [X31 + 0x20]
	0x03E32F64 LDP D11, D10, [X31 + 0x10]
	0x03E32F68 LDP D13, D12, [X31], #0x60
	0x03E32F6C RET
	0x03E32F70 CMP W20, 0x0
	0x03E32F74 MOVZ W8, 0xF04
	0x03E32F78 MOVZ W9, 0xF02
	0x03E32F7C ADD X0, X21, 0x38
	0x03E32F80 CSEL W3, W9, W8, EQ
	0x03E32F84 MOV X1, X21
	0x03E32F88 MOV X2, X19
	0x03E32F8C MOV X4, X31
	0x03E32F90 BL 0x3C3E3A4
	0x03E32F94 ADRP X21, 0x5A9000
	0x03E32F98 LDRB W8, [X21 + 0x7F6]
	0x03E32F9C CBNZ W8, 0x3E32FB4
	0x03E32FA0 ADRP X0, 0x2C9000
	0x03E32FA4 LDR X0, [X0 + 0xF08]
	0x03E32FA8 BL 0x1C16CF4
	0x03E32FAC MOVZ W8, 0x1
	0x03E32FB0 STRB W8, [X21 + 0x7F6]
	0x03E32FB4 CBZ X19, 0x3E330BC
	0x03E32FB8 ADRP X22, 0x2C9000
	0x03E32FBC LDR X22, [X22 + 0xF08]
	0x03E32FC0 MOV X0, X19
	0x03E32FC4 MOV X1, X31
	0x03E32FC8 LDR X8, [X22]
	0x03E32FCC LDR X8, [X8 + 0xB8]
	0x03E32FD0 LDP S0, S1, [X8 + 0x10]
	0x03E32FD4 BL 0x3C3E648
	0x03E32FD8 LDRB W8, [X21 + 0x7F6]
	0x03E32FDC CBNZ W8, 0x3E32FF4
	0x03E32FE0 ADRP X0, 0x2C9000
	0x03E32FE4 LDR X0, [X0 + 0xF08]
	0x03E32FE8 BL 0x1C16CF4
	0x03E32FEC MOVZ W8, 0x1
	0x03E32FF0 STRB W8, [X21 + 0x7F6]
	0x03E32FF4 LDR X8, [X22]
	0x03E32FF8 MOV X0, X19
	0x03E32FFC MOV X1, X31
	0x03E33000 LDR X8, [X8 + 0xB8]
	0x03E33004 LDP S0, S1, [X8 + 0x10]
	0x03E33008 BL 0x3C3E764
	0x03E3300C MOV X0, X19
	0x03E33010 MOV X1, X31
	0x03E33014 BL 0x3C3E7F0
	0x03E33018 MOV X0, X19
	0x03E3301C MOV X1, X31
	0x03E33020 MOV V10.16B, V0.16B
	0x03E33024 MOV V11.16B, V1.16B
	0x03E33028 BL 0x3C3E90C
	0x03E3302C CBZ W20, 0x3E33070
	0x03E33030 CMP W20, 0x1
	0x03E33034 B.NE 0x3E330C0
	0x03E33038 MOV X0, X19
	0x03E3303C MOV X1, X31
	0x03E33040 MOV V13.16B, V1.16B
	0x03E33044 BL 0x3C3EA28
	0x03E33048 MOV V0.16B, V1.16B
	0x03E3304C MOV V12.16B, V13.16B
	0x03E33050 CBZ W20, 0x3E33084
	0x03E33054 FMOV S2, 1
	0x03E33058 FSUB S0, S2, S0
	0x03E3305C FMUL S0, S12, S0
	0x03E33060 FNEG S1, S9
	0x03E33064 FMUL S0, S0, S8
	0x03E33068 FSUB S11, S1, S0
	0x03E3306C B 0x3E33090
	0x03E33070 MOV X0, X19
	0x03E33074 MOV X1, X31
	0x03E33078 MOV V12.16B, V0.16B
	0x03E3307C BL 0x3C3EA28
	0x03E33080 CBNZ W20, 0x3E33054
	0x03E33084 FMUL S0, S12, S0
	0x03E33088 FMUL S0, S0, S8
	0x03E3308C FADD S10, S0, S9
	0x03E33090 MOV X0, X19
	0x03E33094 MOV V0.16B, V10.16B
	0x03E33098 MOV V1.16B, V11.16B
	0x03E3309C LDP X20, X19, [X31 + 0x50]
	0x03E330A0 LDP X22, X21, [X31 + 0x40]
	0x03E330A4 LDP X30, X23, [X31 + 0x30]
	0x03E330A8 LDP D9, D8, [X31 + 0x20]
	0x03E330AC LDP D11, D10, [X31 + 0x10]
	0x03E330B0 MOV X1, X31
	0x03E330B4 LDP D13, D12, [X31], #0x60
	0x03E330B8 B 0x3C3E880
	0x03E330BC BL 0x1C16F20
	0x03E330C0 ADRP X0, 0x2CA000
	0x03E330C4 LDR X0, [X0 + 0xF78]
	0x03E330C8 BL 0x1C16D08
	0x03E330CC BL 0x1C16F10
	0x03E330D0 MOV X19, X0
	0x03E330D4 ADRP X0, 0x312000
	0x03E330D8 LDR X0, [X0 + 0xFF8]
	0x03E330DC BL 0x1C16D08
	0x03E330E0 MOV X1, X0
	0x03E330E4 MOV X0, X19
	0x03E330E8 MOV X2, X31
	0x03E330EC BL 0x3379B6C
	0x03E330F0 ADRP X0, 0x313000
	0x03E330F4 LDR X0, [X0]
	0x03E330F8 BL 0x1C16D08
	0x03E330FC MOV X1, X0
	0x03E33100 MOV X0, X19
	0x03E33104 BL 0x1C16DEC
	0x03E33108 STP X30, X19, [X31 - 0x10]!
	0x03E3310C CMP W1, 0x1
	0x03E33110 B.EQ 0x3E33120
	0x03E33114 CBNZ W1, 0x3E33130
	0x03E33118 ADD X8, X0, 0x44
	0x03E3311C B 0x3E33124
	0x03E33120 ADD X8, X0, 0x48
	0x03E33124 LDR V0, [X8]
	0x03E33128 LDP X30, X19, [X31], #0x10
	0x03E3312C RET
	0x03E33130 ADRP X0, 0x2CA000
	0x03E33134 LDR X0, [X0 + 0xF78]
	0x03E33138 BL 0x1C16D08
	0x03E3313C BL 0x1C16F10
	0x03E33140 MOV X19, X0
	0x03E33144 ADRP X0, 0x312000
	0x03E33148 LDR X0, [X0 + 0xFF8]
	0x03E3314C BL 0x1C16D08
	0x03E33150 MOV X1, X0
	0x03E33154 MOV X0, X19
	0x03E33158 MOV X2, X31
	0x03E3315C BL 0x3379B6C
	0x03E33160 ADRP X0, 0x313000
	0x03E33164 LDR X0, [X0]
	0x03E33168 BL 0x1C16D08
	0x03E3316C MOV X1, X0
	0x03E33170 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D11
	003 Move [X31+40], D10
	004 Move [X31+48], D9
	005 Move [X31+56], D8
	006 Move [X31+64], X29
	007 Move [X31+72], X30
	008 Move [X31+80], X28
	009 Move [X31+88], X27
	010 Move [X31+96], X26
	011 Move [X31+104], X25
	012 Move [X31+112], X24
	013 Move [X31+120], X23
	014 Move [X31+128], X22
	015 Move [X31+136], X21
	016 Move [X31+144], X20
	017 Move [X31+152], X19
	018 Move X22, 0x5B7000
	019 Move W8, [X22+1837]
	020 Move W21, W2
	021 Move W19, W1
	022 Move X20, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {35}
	027 Move X0, 0x33A000
	028 Move X0, [X0+136]
	029 Call 0x1C17CF4
	030 Move X0, 0x33A000
	031 Move X0, [X0+176]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X22+1837], W8
	035 Move [X31+24], X31
	036 Move [X31+20], W31
	037 Move X0, [X20+32]
	038 Compare X0, 0
	039 JumpIfEqual {141}
	040 Move X1, X31
	041 Compare W19, 0
	042 JumpIfEqual {44}
	043 Call RectOffset.get_vertical, X0
	044 Call RectOffset.get_horizontal, X0
	045 Move W8, W0
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move W9, 102
	048 Move W10, 104
	049 Move X0, [X20+88]
	050 NotImplemented "Instruction CINC not yet implemented."
	051 NotImplemented "Instruction CINC not yet implemented."
	052 Move W10, 100
	053 NotImplemented "Instruction CINC not yet implemented."
	054 NotImplemented "Instruction CMP not yet implemented."
	055 NotImplemented "Instruction CSET not yet implemented."
	056 Compare X0, 0
	057 JumpIfEqual {141}
	058 Move W26, [X0+24]
	059 NotImplemented "Instruction SCVTF not yet implemented."
	060 Xor W25, W12, W21
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move W27, [X20]
	063 Move W28, [X20]
	064 Move W29, [X20]
	065 Move W21, W31
	066 Move S8, W31
	067 Move V11, V10
	068 Move V9, V10
	069 Move X8, 0x33A000
	070 Move X8, [X8+176]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 NotImplemented "Instruction CSET not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X2, [X8]
	075 Move W1, W21
	076 NotImplemented "Instruction CSET not yet implemented."
	077 Call List`1<Object>.get_Item, X0, X1
	078 Add X5, X31, 28
	079 Add X6, X31, 24
	080 Add X7, X31, 20
	081 Move X1, X0
	082 Move W2, W19
	083 Move W3, W24
	084 Move W4, W23
	085 Move X22, X0
	086 Call HorizontalOrVerticalLayoutGroup.GetChildSizes, X0, X1, X2, X3, X4, X5, X6, X7
	087 Compare W28, 0
	088 JumpIfEqual {99}
	089 Compare X22, 0
	090 JumpIfEqual {141}
	091 Move X0, X22
	092 Move X1, X31
	093 Call Transform.get_localScale, X0
	094 Compare W19, 0
	095 JumpIfEqual {113}
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move V0, V1
	099 Move V1, [X31+28]
	100 Move TEMP, X25
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfEqual {126}
	104 Move V0, [X20+96]
	105 Move S3, [X31+20]
	106 Move S2, [X31+24]
	107 Add S1, S1, S0
	108 Add S0, S0, S2
	109 Add S9, S9, S1
	110 Add S11, S11, S0
	111 Add S8, S8, S3
	112 Move V0, V2
	113 Move S2, [X31+24]
	114 Move S1, [X31+28]
	115 Move V3, [X31+20]
	116 Multiply S1, S0, S1
	117 Multiply S2, S0, S2
	118 Multiply S0, S0, S3
	119 Move [X31+24], S2
	120 Move [X31+32], S1
	121 Move [X31+20], S0
	122 Move TEMP, X25
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfNotEqual {104}
	126 Add S0, S1, S10
	127 Move S2, [X31+20]
	128 Move S1, [X31+24]
	129 NotImplemented "Instruction FCMP not yet implemented."
	130 NotImplemented "Instruction FCSEL not yet implemented."
	131 Add S0, S1, S10
	132 NotImplemented "Instruction FCMP not yet implemented."
	133 NotImplemented "Instruction FCSEL not yet implemented."
	134 NotImplemented "Instruction FCMP not yet implemented."
	135 NotImplemented "Instruction FCSEL not yet implemented."
	136 Add W21, W21, 1
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X0, [X20+88]
	139 Compare X0, 0
	140 JumpIfNotEqual {69}
	141 Call 0x1C17F20
	142 Move V10, V11
	143 Move TEMP, X25
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfNotEqual {153}
	147 Move S8, W31
	148 Move V9, V10
	149 Move TEMP, X25
	150 And TEMP, TEMP, 1
	151 Compare TEMP, 1
	152 JumpIfEqual {161}
	153 Move X8, [X20+88]
	154 Compare X8, 0
	155 JumpIfEqual {141}
	156 Move W8, [X8+24]
	157 NotImplemented "Instruction CMP not yet implemented."
	158 Move V0, [X20+96]
	159 Subtract S9, S9, S0
	160 Subtract S10, S10, S0
	161 NotImplemented "Instruction FCMP not yet implemented."
	162 NotImplemented "Instruction FCSEL not yet implemented."
	163 Move X0, X20
	164 Move V0, V9
	165 Move V2, V8
	166 Move W1, W19
	167 Move X20, [X31+144]
	168 Move X19, [X31+152]
	169 Move X22, [X31+128]
	170 Move X21, [X31+136]
	171 Move X24, [X31+112]
	172 Move X23, [X31+120]
	173 Move X26, [X31+96]
	174 Move X25, [X31+104]
	175 Move X28, [X31+80]
	176 Move X27, [X31+88]
	177 Move X29, [X31+64]
	178 Move X30, [X31+72]
	179 Move D9, [X31+48]
	180 Move D8, [X31+56]
	181 Move D11, [X31+32]
	182 Move D10, [X31+40]
	183 Add X31, X31, 160
	184 Call LayoutGroup.SetLayoutInputForAxis, X0, V0, V1, V2, X1
	185 Return 
	186 Move X0, 0x2CB000
	187 Move X0, [X0+3960]
	188 Call 0x1C17D08
	189 Call 0x1C17F10
	190 Move X19, X0
	191 Move X0, 0x31C000
	192 Move X0, [X0+1784]
	193 Call 0x1C17D08
	194 Move X1, X0
	195 Move X0, X19
	196 Move X2, X31
	197 Call IndexOutOfRangeException..ctor, X0, X1
	198 Move X0, 0x31C000
	199 Move X0, [X0+1792]
	200 Call 0x1C17D08
	201 Move X1, X0
	202 Move X0, X19
	203 Call 0x1C17DEC

Method: System.Void SetChildrenAlongAxis(System.Int32 axis, System.Boolean isVertical)

Disassembly:
	0x03E3318C B 0x3E33194
	0x03E33190 ADD X8, X0, 0x50
	0x03E33194 LDR V0, [X8]
	0x03E33198 LDP X30, X19, [X31], #0x10
	0x03E3319C RET
	0x03E331A0 ADRP X0, 0x2CA000
	0x03E331A4 LDR X0, [X0 + 0xF78]
	0x03E331A8 BL 0x1C16D08
	0x03E331AC BL 0x1C16F10
	0x03E331B0 MOV X19, X0
	0x03E331B4 ADRP X0, 0x312000
	0x03E331B8 LDR X0, [X0 + 0xFF8]
	0x03E331BC BL 0x1C16D08
	0x03E331C0 MOV X1, X0
	0x03E331C4 MOV X0, X19
	0x03E331C8 MOV X2, X31
	0x03E331CC BL 0x3379B6C
	0x03E331D0 ADRP X0, 0x313000
	0x03E331D4 LDR X0, [X0]
	0x03E331D8 BL 0x1C16D08
	0x03E331DC MOV X1, X0
	0x03E331E0 MOV X0, X19
	0x03E331E4 BL 0x1C16DEC
	0x03E331E8 STP X30, X19, [X31 - 0x10]!
	0x03E331EC CMP W1, 0x1
	0x03E331F0 B.EQ 0x3E33200
	0x03E331F4 CBNZ W1, 0x3E33210
	0x03E331F8 ADD X8, X0, 0x3C
	0x03E331FC B 0x3E33204
	0x03E33200 ADD X8, X0, 0x40
	0x03E33204 LDR V0, [X8]
	0x03E33208 LDP X30, X19, [X31], #0x10
	0x03E3320C RET
	0x03E33210 ADRP X0, 0x2CA000
	0x03E33214 LDR X0, [X0 + 0xF78]
	0x03E33218 BL 0x1C16D08
	0x03E3321C BL 0x1C16F10
	0x03E33220 MOV X19, X0
	0x03E33224 ADRP X0, 0x312000
	0x03E33228 LDR X0, [X0 + 0xFF8]
	0x03E3322C BL 0x1C16D08
	0x03E33230 MOV X1, X0
	0x03E33234 MOV X0, X19
	0x03E33238 MOV X2, X31
	0x03E3323C BL 0x3379B6C
	0x03E33240 ADRP X0, 0x313000
	0x03E33244 LDR X0, [X0]
	0x03E33248 BL 0x1C16D08
	0x03E3324C MOV X1, X0
	0x03E33250 MOV X0, X19
	0x03E33254 BL 0x1C16DEC
	0x03E33258 CBZ W1, 0x3E33260
	0x03E3325C B 0x3E35934
	0x03E33260 B 0x3E35A1C
	0x03E33264 LDRB W0, [X0 + 0x20]
	0x03E33268 RET
	0x03E3326C STR X30, [X31 - 0x30]!
	0x03E33270 STP X22, X21, [X31 + 0x10]
	0x03E33274 STP X20, X19, [X31 + 0x20]
	0x03E33278 ADRP X22, 0x5B5000
	0x03E3327C ADRP X21, 0x32F000
	0x03E33280 LDRB W8, [X22 + 0x72F]
	0x03E33284 LDR X21, [X21 + 0x590]
	0x03E33288 MOV W20, W1
	0x03E3328C MOV X19, X0
	0x03E33290 TBNZ X8, 0x0, 0x3E332A8
	0x03E33294 ADRP X0, 0x32F000
	0x03E33298 LDR X0, [X0 + 0x590]
	0x03E3329C BL 0x1C16CF4
	0x03E332A0 MOVZ W8, 0x1
	0x03E332A4 STRB W8, [X22 + 0x72F]
	0x03E332A8 LDR X2, [X21]
	0x03E332AC ADD X0, X19, 0x20
	0x03E332B0 AND W1, W20, 0x1
	0x03E332B4 BL 0x22541E0
	0x03E332B8 TBZ X0, 0x0, 0x3E332D0
	0x03E332BC MOV X0, X19
	0x03E332C0 LDP X20, X19, [X31 + 0x20]
	0x03E332C4 LDP X22, X21, [X31 + 0x10]
	0x03E332C8 LDR X30, [X31], #0x30
	0x03E332CC B 0x3E332E0
	0x03E332D0 LDP X20, X19, [X31 + 0x20]
	0x03E332D4 LDP X22, X21, [X31 + 0x10]
	0x03E332D8 LDR X30, [X31], #0x30
	0x03E332DC RET
	0x03E332E0 STR X30, [X31 - 0x20]!
	0x03E332E4 STP X20, X19, [X31 + 0x10]
	0x03E332E8 ADRP X20, 0x5B5000
	0x03E332EC LDRB W8, [X20 + 0x737]
	0x03E332F0 MOV X19, X0
	0x03E332F4 TBNZ X8, 0x0, 0x3E33318
	0x03E332F8 ADRP X0, 0x2C3000
	0x03E332FC LDR X0, [X0 + 0x920]
	0x03E33300 BL 0x1C16CF4
	0x03E33304 ADRP X0, 0x2E7000
	0x03E33308 LDR X0, [X0 + 0xC70]
	0x03E3330C BL 0x1C16CF4
	0x03E33310 MOVZ W8, 0x1
	0x03E33314 STRB W8, [X20 + 0x737]
	0x03E33318 LDR X8, [X19]
	0x03E3331C MOV X0, X19
	0x03E33320 LDP X9, X1, [X8 + 0x1C8]
	0x03E33324 BLR X9
	0x03E33328 TBZ X0, 0x0, 0x3E33370
	0x03E3332C ADRP X20, 0x2C3000
	0x03E33330 LDR X20, [X20 + 0x920]
	0x03E33334 MOV X0, X19
	0x03E33338 MOV X1, X31
	0x03E3333C BL 0x3C32E90
	0x03E33340 LDR X8, [X20]
	0x03E33344 MOV X19, X0
	0x03E33348 LDR W9, [X8 + 0xE0]
	0x03E3334C CBZ W9, 0x3E3337C
	0x03E33350 CBZ X19, 0x3E33388
	0x03E33354 ADRP X8, 0x2E7000
	0x03E33358 LDR X8, [X8 + 0xC70]
	0x03E3335C LDR X9, [X19]
	0x03E33360 LDR X8, [X8]
	0x03E33364 CMP X9, X8
	0x03E33368 CSEL X0, X19, X31, EQ
	0x03E3336C B 0x3E3338C
	0x03E33370 LDP X20, X19, [X31 + 0x10]
	0x03E33374 LDR X30, [X31], #0x20
	0x03E33378 RET
	0x03E3337C MOV X0, X8
	0x03E33380 BL 0x1C16DFC
	0x03E33384 CBNZ X19, 0x3E33354
	0x03E33388 MOV X0, X31
	0x03E3338C LDP X20, X19, [X31 + 0x10]
	0x03E33390 LDR X30, [X31], #0x20
	0x03E33394 B 0x3E2F3D8
	0x03E33398 RET
	0x03E3339C RET
	0x03E333A0 LDR V0, [X0 + 0x24]
	0x03E333A4 RET
	0x03E333A8 STR D8, [X31 - 0x30]!
	0x03E333AC STP X30, X21, [X31 + 0x10]
	0x03E333B0 STP X20, X19, [X31 + 0x20]
	0x03E333B4 ADRP X21, 0x5B5000
	0x03E333B8 ADRP X20, 0x32F000
	0x03E333BC LDRB W8, [X21 + 0x730]
	0x03E333C0 LDR X20, [X20 + 0x5A0]
	0x03E333C4 MOV V8.16B, V0.16B
	0x03E333C8 MOV X19, X0
	0x03E333CC TBNZ X8, 0x0, 0x3E333E4
	0x03E333D0 ADRP X0, 0x32F000
	0x03E333D4 LDR X0, [X0 + 0x5A0]
	0x03E333D8 BL 0x1C16CF4
	0x03E333DC MOVZ W8, 0x1
	0x03E333E0 STRB W8, [X21 + 0x730]
	0x03E333E4 LDR X1, [X20]
	0x03E333E8 ADD X0, X19, 0x24
	0x03E333EC MOV V0.16B, V8.16B
	0x03E333F0 BL 0x2254520
	0x03E333F4 TBZ X0, 0x0, 0x3E3340C
	0x03E333F8 MOV X0, X19
	0x03E333FC LDP X20, X19, [X31 + 0x20]
	0x03E33400 LDP X30, X21, [X31 + 0x10]
	0x03E33404 LDR V8, [X31], #0x30
	0x03E33408 B 0x3E332E0
	0x03E3340C LDP X20, X19, [X31 + 0x20]
	0x03E33410 LDP X30, X21, [X31 + 0x10]
	0x03E33414 LDR V8, [X31], #0x30
	0x03E33418 RET
	0x03E3341C LDR V0, [X0 + 0x28]
	0x03E33420 RET
	0x03E33424 STR D8, [X31 - 0x30]!
	0x03E33428 STP X30, X21, [X31 + 0x10]
	0x03E3342C STP X20, X19, [X31 + 0x20]
	0x03E33430 ADRP X21, 0x5B5000
	0x03E33434 ADRP X20, 0x32F000
	0x03E33438 LDRB W8, [X21 + 0x731]
	0x03E3343C LDR X20, [X20 + 0x5A0]
	0x03E33440 MOV V8.16B, V0.16B
	0x03E33444 MOV X19, X0
	0x03E33448 TBNZ X8, 0x0, 0x3E33460
	0x03E3344C ADRP X0, 0x32F000
	0x03E33450 LDR X0, [X0 + 0x5A0]
	0x03E33454 BL 0x1C16CF4
	0x03E33458 MOVZ W8, 0x1
	0x03E3345C STRB W8, [X21 + 0x731]
	0x03E33460 LDR X1, [X20]
	0x03E33464 ADD X0, X19, 0x28
	0x03E33468 MOV V0.16B, V8.16B
	0x03E3346C BL 0x2254520
	0x03E33470 TBZ X0, 0x0, 0x3E33488
	0x03E33474 MOV X0, X19
	0x03E33478 LDP X20, X19, [X31 + 0x20]
	0x03E3347C LDP X30, X21, [X31 + 0x10]
	0x03E33480 LDR V8, [X31], #0x30
	0x03E33484 B 0x3E332E0
	0x03E33488 LDP X20, X19, [X31 + 0x20]
	0x03E3348C LDP X30, X21, [X31 + 0x10]
	0x03E33490 LDR V8, [X31], #0x30
	0x03E33494 RET
	0x03E33498 LDR V0, [X0 + 0x2C]
	0x03E3349C RET
	0x03E334A0 STR D8, [X31 - 0x30]!
	0x03E334A4 STP X30, X21, [X31 + 0x10]
	0x03E334A8 STP X20, X19, [X31 + 0x20]
	0x03E334AC ADRP X21, 0x5B5000
	0x03E334B0 ADRP X20, 0x32F000
	0x03E334B4 LDRB W8, [X21 + 0x732]
	0x03E334B8 LDR X20, [X20 + 0x5A0]
	0x03E334BC MOV V8.16B, V0.16B
	0x03E334C0 MOV X19, X0
	0x03E334C4 TBNZ X8, 0x0, 0x3E334DC
	0x03E334C8 ADRP X0, 0x32F000
	0x03E334CC LDR X0, [X0 + 0x5A0]
	0x03E334D0 BL 0x1C16CF4
	0x03E334D4 MOVZ W8, 0x1
	0x03E334D8 STRB W8, [X21 + 0x732]
	0x03E334DC LDR X1, [X20]
	0x03E334E0 ADD X0, X19, 0x2C
	0x03E334E4 MOV V0.16B, V8.16B
	0x03E334E8 BL 0x2254520
	0x03E334EC TBZ X0, 0x0, 0x3E33504
	0x03E334F0 MOV X0, X19
	0x03E334F4 LDP X20, X19, [X31 + 0x20]
	0x03E334F8 LDP X30, X21, [X31 + 0x10]
	0x03E334FC LDR V8, [X31], #0x30
	0x03E33500 B 0x3E332E0
	0x03E33504 LDP X20, X19, [X31 + 0x20]
	0x03E33508 LDP X30, X21, [X31 + 0x10]
	0x03E3350C LDR V8, [X31], #0x30
	0x03E33510 RET
	0x03E33514 LDR V0, [X0 + 0x30]
	0x03E33518 RET
	0x03E3351C STR D8, [X31 - 0x30]!
	0x03E33520 STP X30, X21, [X31 + 0x10]
	0x03E33524 STP X20, X19, [X31 + 0x20]
	0x03E33528 ADRP X21, 0x5B5000
	0x03E3352C ADRP X20, 0x32F000
	0x03E33530 LDRB W8, [X21 + 0x733]
	0x03E33534 LDR X20, [X20 + 0x5A0]
	0x03E33538 MOV V8.16B, V0.16B
	0x03E3353C MOV X19, X0
	0x03E33540 TBNZ X8, 0x0, 0x3E33558
	0x03E33544 ADRP X0, 0x32F000
	0x03E33548 LDR X0, [X0 + 0x5A0]
	0x03E3354C BL 0x1C16CF4
	0x03E33550 MOVZ W8, 0x1
	0x03E33554 STRB W8, [X21 + 0x733]
	0x03E33558 LDR X1, [X20]
	0x03E3355C ADD X0, X19, 0x30
	0x03E33560 MOV V0.16B, V8.16B
	0x03E33564 BL 0x2254520
	0x03E33568 TBZ X0, 0x0, 0x3E33580
	0x03E3356C MOV X0, X19
	0x03E33570 LDP X20, X19, [X31 + 0x20]
	0x03E33574 LDP X30, X21, [X31 + 0x10]
	0x03E33578 LDR V8, [X31], #0x30
	0x03E3357C B 0x3E332E0
	0x03E33580 LDP X20, X19, [X31 + 0x20]
	0x03E33584 LDP X30, X21, [X31 + 0x10]
	0x03E33588 LDR V8, [X31], #0x30
	0x03E3358C RET
	0x03E33590 LDR V0, [X0 + 0x34]
	0x03E33594 RET
	0x03E33598 STR D8, [X31 - 0x30]!
	0x03E3359C STP X30, X21, [X31 + 0x10]
	0x03E335A0 STP X20, X19, [X31 + 0x20]
	0x03E335A4 ADRP X21, 0x5B5000
	0x03E335A8 ADRP X20, 0x32F000
	0x03E335AC LDRB W8, [X21 + 0x734]
	0x03E335B0 LDR X20, [X20 + 0x5A0]
	0x03E335B4 MOV V8.16B, V0.16B
	0x03E335B8 MOV X19, X0
	0x03E335BC TBNZ X8, 0x0, 0x3E335D4
	0x03E335C0 ADRP X0, 0x32F000
	0x03E335C4 LDR X0, [X0 + 0x5A0]
	0x03E335C8 BL 0x1C16CF4
	0x03E335CC MOVZ W8, 0x1
	0x03E335D0 STRB W8, [X21 + 0x734]
	0x03E335D4 LDR X1, [X20]
	0x03E335D8 ADD X0, X19, 0x34
	0x03E335DC MOV V0.16B, V8.16B
	0x03E335E0 BL 0x2254520
	0x03E335E4 TBZ X0, 0x0, 0x3E335FC
	0x03E335E8 MOV X0, X19
	0x03E335EC LDP X20, X19, [X31 + 0x20]
	0x03E335F0 LDP X30, X21, [X31 + 0x10]
	0x03E335F4 LDR V8, [X31], #0x30
	0x03E335F8 B 0x3E332E0
	0x03E335FC LDP X20, X19, [X31 + 0x20]
	0x03E33600 LDP X30, X21, [X31 + 0x10]
	0x03E33604 LDR V8, [X31], #0x30
	0x03E33608 RET
	0x03E3360C LDR V0, [X0 + 0x38]
	0x03E33610 RET
	0x03E33614 STR D8, [X31 - 0x30]!
	0x03E33618 STP X30, X21, [X31 + 0x10]
	0x03E3361C STP X20, X19, [X31 + 0x20]
	0x03E33620 ADRP X21, 0x5B5000
	0x03E33624 ADRP X20, 0x32F000
	0x03E33628 LDRB W8, [X21 + 0x735]
	0x03E3362C LDR X20, [X20 + 0x5A0]
	0x03E33630 MOV V8.16B, V0.16B
	0x03E33634 MOV X19, X0
	0x03E33638 TBNZ X8, 0x0, 0x3E33650
	0x03E3363C ADRP X0, 0x32F000
	0x03E33640 LDR X0, [X0 + 0x5A0]
	0x03E33644 BL 0x1C16CF4
	0x03E33648 MOVZ W8, 0x1
	0x03E3364C STRB W8, [X21 + 0x735]
	0x03E33650 LDR X1, [X20]
	0x03E33654 ADD X0, X19, 0x38
	0x03E33658 MOV V0.16B, V8.16B
	0x03E3365C BL 0x2254520
	0x03E33660 TBZ X0, 0x0, 0x3E33678
	0x03E33664 MOV X0, X19
	0x03E33668 LDP X20, X19, [X31 + 0x20]
	0x03E3366C LDP X30, X21, [X31 + 0x10]
	0x03E33670 LDR V8, [X31], #0x30
	0x03E33674 B 0x3E332E0
	0x03E33678 LDP X20, X19, [X31 + 0x20]
	0x03E3367C LDP X30, X21, [X31 + 0x10]
	0x03E33680 LDR V8, [X31], #0x30
	0x03E33684 RET
	0x03E33688 LDR W0, [X0 + 0x3C]
	0x03E3368C RET
	0x03E33690 STR X30, [X31 - 0x30]!
	0x03E33694 STP X22, X21, [X31 + 0x10]
	0x03E33698 STP X20, X19, [X31 + 0x20]
	0x03E3369C ADRP X22, 0x5B5000
	0x03E336A0 ADRP X21, 0x32F000
	0x03E336A4 LDRB W8, [X22 + 0x736]
	0x03E336A8 LDR X21, [X21 + 0x5A8]
	0x03E336AC MOV W20, W1
	0x03E336B0 MOV X19, X0
	0x03E336B4 TBNZ X8, 0x0, 0x3E336CC
	0x03E336B8 ADRP X0, 0x32F000
	0x03E336BC LDR X0, [X0 + 0x5A8]
	0x03E336C0 BL 0x1C16CF4
	0x03E336C4 MOVZ W8, 0x1
	0x03E336C8 STRB W8, [X22 + 0x736]
	0x03E336CC LDR X2, [X21]
	0x03E336D0 ADD X0, X19, 0x3C
	0x03E336D4 MOV W1, W20
	0x03E336D8 BL 0x2254390
	0x03E336DC TBZ X0, 0x0, 0x3E336F4
	0x03E336E0 MOV X0, X19
	0x03E336E4 LDP X20, X19, [X31 + 0x20]
	0x03E336E8 LDP X22, X21, [X31 + 0x10]
	0x03E336EC LDR X30, [X31], #0x30
	0x03E336F0 B 0x3E332E0
	0x03E336F4 LDP X20, X19, [X31 + 0x20]
	0x03E336F8 LDP X22, X21, [X31 + 0x10]
	0x03E336FC LDR X30, [X31], #0x30
	0x03E33700 RET
	0x03E33704 FMOV V0.4S, 0x0
	0x03E33708 FMOV V1.2S, 0x0
	0x03E3370C MOVZ W8, 0x1
	0x03E33710 MOV X1, X31
	0x03E33714 STUR V0, [X0 + 0x24]
	0x03E33718 STUR D1, [X0 + 0x34]
	0x03E3371C STR W8, [X0 + 0x3C]
	0x03E33720 B 0x3E4E160
	0x03E33724 STP X30, X19, [X31 - 0x10]!
	0x03E33728 MOV X1, X31
	0x03E3372C MOV X19, X0
	0x03E33730 BL 0x3E4BDBC
	0x03E33734 MOV X0, X19
	0x03E33738 LDP X30, X19, [X31], #0x10
	0x03E3373C B 0x3E332E0
	0x03E33740 B 0x3E332E0
	0x03E33744 STP X30, X19, [X31 - 0x10]!
	0x03E33748 MOV X19, X0
	0x03E3374C BL 0x3E332E0
	0x03E33750 MOV X0, X19
	0x03E33754 MOV X1, X31
	0x03E33758 LDP X30, X19, [X31], #0x10
	0x03E3375C B 0x3E4BDC4
	0x03E33760 B 0x3E332E0
	0x03E33764 B 0x3E332E0
	0x03E33768 LDR X0, [X0 + 0x20]
	0x03E3376C RET
	0x03E33770 STR X30, [X31 - 0x30]!
	0x03E33774 STP X22, X21, [X31 + 0x10]
	0x03E33778 STP X20, X19, [X31 + 0x20]
	0x03E3377C ADRP X22, 0x5B5000
	0x03E33780 ADRP X21, 0x338000
	0x03E33784 LDRB W8, [X22 + 0x738]
	0x03E33788 LDR X21, [X21 + 0xC8]
	0x03E3378C MOV X19, X1
	0x03E33790 MOV X20, X0
	0x03E33794 TBNZ X8, 0x0, 0x3E337AC
	0x03E33798 ADRP X0, 0x338000
	0x03E3379C LDR X0, [X0 + 0xC8]
	0x03E337A0 BL 0x1C16CF4
	0x03E337A4 MOVZ W8, 0x1
	0x03E337A8 STRB W8, [X22 + 0x738]
	0x03E337AC LDR X3, [X21]
	0x03E337B0 ADD X1, X20, 0x20
	0x03E337B4 MOV X0, X20
	0x03E337B8 MOV X2, X19
	0x03E337BC LDP X20, X19, [X31 + 0x20]
	0x03E337C0 LDP X22, X21, [X31 + 0x10]
	0x03E337C4 LDR X30, [X31], #0x30
	0x03E337C8 B 0x2212618
	0x03E337CC LDR W0, [X0 + 0x28]
	0x03E337D0 RET
	0x03E337D4 STR X30, [X31 - 0x30]!
	0x03E337D8 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+32], D14
	003 Move [X31+48], D13
	004 Move [X31+56], D12
	005 Move [X31+64], D11
	006 Move [X31+72], D10
	007 Move [X31+80], D9
	008 Move [X31+88], D8
	009 Move [X31+96], X29
	010 Move [X31+104], X30
	011 Move [X31+112], X28
	012 Move [X31+120], X27
	013 Move [X31+128], X26
	014 Move [X31+136], X25
	015 Move [X31+144], X24
	016 Move [X31+152], X23
	017 Move [X31+160], X22
	018 Move [X31+168], X21
	019 Move [X31+176], X20
	020 Move [X31+184], X19
	021 Move X22, 0x5B6000
	022 Move W8, [X22+1838]
	023 Move W21, W2
	024 Move W19, W1
	025 Move X20, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {38}
	030 Move X0, 0x339000
	031 Move X0, [X0+136]
	032 Call 0x1C17CF4
	033 Move X0, 0x339000
	034 Move X0, [X0+176]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X22+1838], W8
	038 Move X0, X20
	039 Move [X31+40], X31
	040 Move [X31+16], X31
	041 Move [X31+24], X31
	042 Call LayoutGroup.get_rectTransform, X0
	043 Compare X0, 0
	044 JumpIfEqual {406}
	045 Move X1, X31
	046 Call RectTransform.get_rect, X0
	047 Compare W19, 0
	048 JumpIfEqual {51}
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move V8, V3
	051 Move V8, V2
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move W8, 102
	054 NotImplemented "Instruction CINC not yet implemented."
	055 Move W25, [X20]
	056 Move W10, [X20+40]
	057 Move W9, 104
	058 NotImplemented "Instruction CINC not yet implemented."
	059 Move W9, 100
	060 Move W11, 0x5556
	061 NotImplemented "Instruction CINC not yet implemented."
	062 NotImplemented "Instruction MOVK not yet implemented."
	063 Compare W19, 0
	064 JumpIfEqual {73}
	065 NotImplemented "Instruction SMADDL not yet implemented."
	066 Move X11, X10
	067 ShiftRight X11, 63
	068 And X11, X11, 0x7FFFFFFF
	069 Move X10, X10
	070 ShiftRight X10, 32
	071 And X10, X10, 0x7FFFFFFF
	072 Add W10, W10, W11
	073 NotImplemented "Instruction SMADDL not yet implemented."
	074 Move X12, X11
	075 ShiftRight X12, 63
	076 And X12, X12, 0x7FFFFFFF
	077 Move X11, X11
	078 ShiftRight X11, 32
	079 And X11, X11, 0x7FFFFFFF
	080 Add W11, W11, W12
	081 Add W11, W11, W11
	082 Subtract W10, W10, W11
	083 Move W11, [X20+106]
	084 Move W26, [X20]
	085 Move W27, [X20]
	086 Move X8, [X20+88]
	087 NotImplemented "Instruction CMP not yet implemented."
	088 NotImplemented "Instruction SCVTF not yet implemented."
	089 NotImplemented "Instruction CSET not yet implemented."
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move S1, 0.5
	092 NotImplemented "Instruction CSET not yet implemented."
	093 Multiply S12, S0, S1
	094 Xor W9, W9, W21
	095 Compare W11, 0
	096 JumpIfEqual {119}
	097 Compare X8, 0
	098 JumpIfEqual {406}
	099 Move X0, [X20+32]
	100 Move W8, [X8+24]
	101 Move W28, W31
	102 And W9, W9, W10
	103 NotImplemented "Instruction CMP not yet implemented."
	104 Subtract W21, W8, 1
	105 NotImplemented "Instruction CSET not yet implemented."
	106 Move TEMP, 0
	107 Not TEMP
	108 Move W29, TEMP
	109 Move TEMP, X9
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {131}
	113 Compare W8, 0
	114 JumpIfNotEqual {406}
	115 Move X1, X31
	116 Compare W19, 0
	117 JumpIfEqual {137}
	118 Call RectOffset.get_vertical, X0
	119 Compare X8, 0
	120 JumpIfEqual {406}
	121 Move X0, [X20+32]
	122 Move W28, [X8+24]
	123 Move W21, W31
	124 Move W29, 1
	125 NotImplemented "Instruction CMP not yet implemented."
	126 NotImplemented "Instruction CSET not yet implemented."
	127 Move TEMP, X9
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {113}
	131 Compare W8, 0
	132 JumpIfNotEqual {406}
	133 Move X1, X31
	134 Compare W19, 0
	135 JumpIfEqual {231}
	136 Call RectOffset.get_top, X0
	137 Call RectOffset.get_horizontal, X0
	138 Move W8, [X20+106]
	139 NotImplemented "Instruction CMP not yet implemented."
	140 NotImplemented "Instruction CSET not yet implemented."
	141 NotImplemented "Instruction CSET not yet implemented."
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction CSEL not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 NotImplemented "Instruction SCVTF not yet implemented."
	146 Subtract S13, S8, S0
	147 Move X0, [X20+88]
	148 Compare X0, 0
	149 JumpIfEqual {406}
	150 Move X8, 0x339000
	151 Move X8, [X8+176]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 NotImplemented "Instruction CSET not yet implemented."
	154 NotImplemented "Instruction CMP not yet implemented."
	155 Move X2, [X8]
	156 Move W1, W21
	157 NotImplemented "Instruction CSET not yet implemented."
	158 Call List`1<Object>.get_Item, X0, X1
	159 Add X5, X31, 44
	160 Add X6, X31, 40
	161 Add X7, X31, 28
	162 Move X1, X0
	163 Move W2, W19
	164 Move W3, W24
	165 Move W4, W23
	166 Move X22, X0
	167 Call HorizontalOrVerticalLayoutGroup.GetChildSizes, X0, X1, X2, X3, X4, X5, X6, X7
	168 Compare W26, 0
	169 JumpIfEqual {180}
	170 Compare X22, 0
	171 JumpIfEqual {406}
	172 Move X0, X22
	173 Move X1, X31
	174 Call Transform.get_localScale, X0
	175 Compare W19, 0
	176 JumpIfEqual {181}
	177 NotImplemented "Instruction CMP not yet implemented."
	178 NotImplemented "Instruction CMP not yet implemented."
	179 Move V9, V1
	180 Move S9, 1
	181 Move V9, V0
	182 Move V9, V2
	183 Move V0, [X31+28]
	184 Move S1, [X31+40]
	185 Move S2, [X31+44]
	186 Move X0, X20
	187 Move W1, W19
	188 NotImplemented "Instruction FCMP not yet implemented."
	189 NotImplemented "Instruction FCSEL not yet implemented."
	190 NotImplemented "Instruction FCMP not yet implemented."
	191 NotImplemented "Instruction FCSEL not yet implemented."
	192 NotImplemented "Instruction FCMP not yet implemented."
	193 NotImplemented "Instruction FCSEL not yet implemented."
	194 Multiply S0, S9, S10
	195 Call LayoutGroup.GetStartOffset, X0, X1, V0
	196 Move V11, V0
	197 Compare W25, 0
	198 JumpIfEqual {206}
	199 Move X0, X20
	200 Move X1, X22
	201 Move W2, W19
	202 Move V0, V11
	203 Move V1, V10
	204 Move V2, V9
	205 Call LayoutGroup.SetChildAlongAxisWithScale, X0, X1, X2, V0, V1, V2
	206 Compare X22, 0
	207 JumpIfEqual {406}
	208 Move X0, X22
	209 Move X1, X31
	210 Call RectTransform.get_sizeDelta, X0
	211 Compare W19, 0
	212 JumpIfEqual {215}
	213 NotImplemented "Instruction CMP not yet implemented."
	214 Move V0, V1
	215 Subtract S0, S10, S0
	216 Multiply S0, S12, S0
	217 Add S0, S11, S0
	218 Move X0, X20
	219 Move X1, X22
	220 Move W2, W19
	221 Move V1, V9
	222 Call LayoutGroup.SetChildAlongAxisWithScale, X0, X1, X2, V0, V1
	223 Move W8, [X20+106]
	224 Add W21, W21, W29
	225 NotImplemented "Instruction CMP not yet implemented."
	226 NotImplemented "Instruction CSET not yet implemented."
	227 NotImplemented "Instruction CSET not yet implemented."
	228 NotImplemented "Instruction CMP not yet implemented."
	229 NotImplemented "Instruction CSEL not yet implemented."
	230 NotImplemented "Instruction CMP not yet implemented."
	231 Call RectOffset.get_left, X0
	232 NotImplemented "Instruction SCVTF not yet implemented."
	233 Move X0, X20
	234 Move W1, W19
	235 Call LayoutGroup.GetTotalPreferredSize, X0, X1
	236 Subtract S10, S8, S0
	237 NotImplemented "Instruction FCMP not yet implemented."
	238 Move S14, W31
	239 Move X0, X20
	240 Move W1, W19
	241 Call LayoutGroup.GetTotalFlexibleSize, X0, X1
	242 Move X0, X20
	243 Move W1, W19
	244 NotImplemented "Instruction FCMP not yet implemented."
	245 Call LayoutGroup.GetTotalPreferredSize, X0, X1
	246 Move X0, [X20+32]
	247 Compare X0, 0
	248 JumpIfEqual {406}
	249 Move V9, V0
	250 Move X1, X31
	251 Compare W19, 0
	252 JumpIfEqual {261}
	253 Call RectOffset.get_vertical, X0
	254 Move W1, 1
	255 Call LayoutGroup.GetTotalFlexibleSize, X0, X1
	256 NotImplemented "Instruction FCMP not yet implemented."
	257 Move X0, X20
	258 Move W1, W19
	259 Call LayoutGroup.GetTotalFlexibleSize, X0, X1
	260 NotImplemented "Instruction FDIV not yet implemented."
	261 Call RectOffset.get_horizontal, X0
	262 Move W1, W31
	263 NotImplemented "Instruction SCVTF not yet implemented."
	264 Subtract S0, S9, S0
	265 Move X0, X20
	266 Call LayoutGroup.GetStartOffset, X0, X1, V0
	267 Move V9, V0
	268 Move S13, W31
	269 Move X0, X20
	270 Move W1, W19
	271 Call LayoutGroup.GetTotalMinSize, X0, X1
	272 Move X0, X20
	273 Move W1, W19
	274 Move V10, V0
	275 Call LayoutGroup.GetTotalPreferredSize, X0, X1
	276 NotImplemented "Instruction FCMP not yet implemented."
	277 Move X0, X20
	278 Move W1, W19
	279 Call LayoutGroup.GetTotalMinSize, X0, X1
	280 Move X0, X20
	281 Move W1, W19
	282 Move V10, V0
	283 Call LayoutGroup.GetTotalPreferredSize, X0, X1
	284 Move X0, X20
	285 Move W1, W19
	286 Move V11, V0
	287 Call LayoutGroup.GetTotalMinSize, X0, X1
	288 Subtract S1, S8, S10
	289 Subtract S0, S11, S0
	290 NotImplemented "Instruction FDIV not yet implemented."
	291 NotImplemented "Instruction FCMP not yet implemented."
	292 Move S1, 1
	293 NotImplemented "Instruction FMIN not yet implemented."
	294 Move W8, [X20+106]
	295 NotImplemented "Instruction CMP not yet implemented."
	296 NotImplemented "Instruction CSET not yet implemented."
	297 NotImplemented "Instruction CSET not yet implemented."
	298 NotImplemented "Instruction CMP not yet implemented."
	299 NotImplemented "Instruction CSEL not yet implemented."
	300 NotImplemented "Instruction CMP not yet implemented."
	301 Move S0, W31
	302 NotImplemented "Instruction FMAX not yet implemented."
	303 Move X0, [X20+88]
	304 Compare X0, 0
	305 JumpIfEqual {406}
	306 Move X8, 0x339000
	307 Move X8, [X8+176]
	308 NotImplemented "Instruction CMP not yet implemented."
	309 NotImplemented "Instruction CSET not yet implemented."
	310 NotImplemented "Instruction CMP not yet implemented."
	311 Move X2, [X8]
	312 Move W1, W21
	313 NotImplemented "Instruction CSET not yet implemented."
	314 Call List`1<Object>.get_Item, X0, X1
	315 Add X5, X31, 24
	316 Add X6, X31, 20
	317 Add X7, X31, 16
	318 Move X1, X0
	319 Move W2, W19
	320 Move W3, W24
	321 Move W4, W23
	322 Move X22, X0
	323 Call HorizontalOrVerticalLayoutGroup.GetChildSizes, X0, X1, X2, X3, X4, X5, X6, X7
	324 Compare W26, 0
	325 JumpIfEqual {336}
	326 Compare X22, 0
	327 JumpIfEqual {406}
	328 Move X0, X22
	329 Move X1, X31
	330 Call Transform.get_localScale, X0
	331 Compare W19, 0
	332 JumpIfEqual {337}
	333 NotImplemented "Instruction CMP not yet implemented."
	334 NotImplemented "Instruction CMP not yet implemented."
	335 Move V8, V1
	336 Move S8, 1
	337 Move V8, V0
	338 Move V8, V2
	339 Move S1, [X31+20]
	340 Move S0, [X31+24]
	341 Move V2, [X31+16]
	342 Subtract S1, S1, S0
	343 Multiply S1, S11, S1
	344 Add S0, S0, S1
	345 Multiply S1, S13, S2
	346 Add S10, S1, S0
	347 Compare W25, 0
	348 JumpIfEqual {356}
	349 Move X0, X20
	350 Move X1, X22
	351 Move W2, W19
	352 Move V0, V9
	353 Move V1, V10
	354 Move V2, V8
	355 Call LayoutGroup.SetChildAlongAxisWithScale, X0, X1, X2, V0, V1, V2
	356 Compare X22, 0
	357 JumpIfEqual {406}
	358 Move X0, X22
	359 Move X1, X31
	360 Call RectTransform.get_sizeDelta, X0
	361 Compare W19, 0
	362 JumpIfEqual {365}
	363 NotImplemented "Instruction CMP not yet implemented."
	364 Move V0, V1
	365 Subtract S0, S10, S0
	366 Multiply S0, S12, S0
	367 Add S0, S9, S0
	368 Move X0, X20
	369 Move X1, X22
	370 Move W2, W19
	371 Move V1, V8
	372 Call LayoutGroup.SetChildAlongAxisWithScale, X0, X1, X2, V0, V1
	373 Move W8, [X20+106]
	374 Move V0, [X20+96]
	375 Add W21, W21, W29
	376 NotImplemented "Instruction CMP not yet implemented."
	377 Multiply S1, S8, S10
	378 NotImplemented "Instruction CSET not yet implemented."
	379 NotImplemented "Instruction CSET not yet implemented."
	380 NotImplemented "Instruction CMP not yet implemented."
	381 Add S0, S1, S0
	382 NotImplemented "Instruction CSEL not yet implemented."
	383 NotImplemented "Instruction CMP not yet implemented."
	384 Add S9, S9, S0
	385 Move X20, [X31+176]
	386 Move X19, [X31+184]
	387 Move X22, [X31+160]
	388 Move X21, [X31+168]
	389 Move X24, [X31+144]
	390 Move X23, [X31+152]
	391 Move X26, [X31+128]
	392 Move X25, [X31+136]
	393 Move X28, [X31+112]
	394 Move X27, [X31+120]
	395 Move X29, [X31+96]
	396 Move X30, [X31+104]
	397 Move D9, [X31+80]
	398 Move D8, [X31+88]
	399 Move D11, [X31+64]
	400 Move D10, [X31+72]
	401 Move D13, [X31+48]
	402 Move D12, [X31+56]
	403 Move V14, [X31+32]
	404 Add X31, X31, 192
	405 Return 
	406 Call 0x1C17F20
	407 Move X0, 0x2CB000
	408 Move X0, [X0+3960]
	409 Call 0x1C17D08
	410 Call 0x1C17F10
	411 Move X19, X0
	412 Move X0, 0x31C000
	413 Move X0, [X0+1784]
	414 Call 0x1C17D08
	415 Move X1, X0
	416 Move X0, X19
	417 Move X2, X31
	418 Call IndexOutOfRangeException..ctor, X0, X1
	419 Move X0, 0x31C000
	420 Move X0, [X0+1792]
	421 Move X0, 0x2CB000
	422 Move X0, [X0+3960]
	423 Call 0x1C17D08
	424 Call 0x1C17F10
	425 Move X19, X0
	426 Move X0, 0x313000
	427 Move X0, [X0+4088]
	428 Call 0x1C17D08
	429 Move X1, X0
	430 Move X0, X19
	431 Move X2, X31
	432 Call IndexOutOfRangeException..ctor, X0, X1
	433 Move X0, 0x314000
	434 Move X0, [X0]
	435 Call 0x1C17D08
	436 Move X1, X0
	437 Move X0, X19
	438 Call 0x1C17DEC

Method: System.Void GetChildSizes(UnityEngine.RectTransform child, System.Int32 axis, System.Boolean controlSize, System.Boolean childForceExpand, out System.Single min, out System.Single preferred, out System.Single flexible)

Disassembly:
	0x03E33B08 MOV X1, X31
	0x03E33B0C MOV X2, X31
	0x03E33B10 BL 0x3C3883C
	0x03E33B14 TBZ X0, 0x0, 0x3E33B28
	0x03E33B18 LDP X20, X19, [X31 + 0x10]
	0x03E33B1C MOVZ W0, 0x1
	0x03E33B20 LDP X30, X21, [X31], #0x20
	0x03E33B24 RET
	0x03E33B28 MOV X0, X19
	0x03E33B2C MOV X1, X31
	0x03E33B30 BL 0x3C32E90
	0x03E33B34 CBZ X0, 0x3E33BBC
	0x03E33B38 MOV X1, X31
	0x03E33B3C BL 0x3C3F49C
	0x03E33B40 ADRP X8, 0x2C0000
	0x03E33B44 LDR X8, [X8 + 0x6C0]
	0x03E33B48 ADRP X9, 0x338000
	0x03E33B4C MOV X19, X0
	0x03E33B50 LDR X8, [X8]
	0x03E33B54 LDR X9, [X9 + 0x38]
	0x03E33B58 LDR W10, [X8 + 0xE0]
	0x03E33B5C LDR X20, [X9]
	0x03E33B60 CBNZ W10, 0x3E33B6C
	0x03E33B64 MOV X0, X8
	0x03E33B68 BL 0x1C16DFC
	0x03E33B6C MOV X0, X20
	0x03E33B70 MOV X1, X31
	0x03E33B74 BL 0x338C698
	0x03E33B78 CBZ X19, 0x3E33BBC
	0x03E33B7C MOV X1, X0
	0x03E33B80 MOV X0, X19
	0x03E33B84 MOV X2, X31
	0x03E33B88 BL 0x3C32F08
	0x03E33B8C LDR X8, [X21]
	0x03E33B90 MOV X19, X0
	0x03E33B94 LDR W9, [X8 + 0xE0]
	0x03E33B98 CBNZ W9, 0x3E33BA4
	0x03E33B9C MOV X0, X8
	0x03E33BA0 BL 0x1C16DFC
	0x03E33BA4 MOV X0, X19
	0x03E33BA8 LDP X20, X19, [X31 + 0x10]
	0x03E33BAC MOV X1, X31
	0x03E33BB0 MOV X2, X31
	0x03E33BB4 LDP X30, X21, [X31], #0x20
	0x03E33BB8 B 0x3C3883C
	0x03E33BBC BL 0x1C16F20
	0x03E33BC0 STP X30, X19, [X31 - 0x10]!
	0x03E33BC4 MOV X1, X31
	0x03E33BC8 MOV X19, X0
	0x03E33BCC BL 0x3E5AD90
	0x03E33BD0 MOV X0, X19
	0x03E33BD4 BL 0x3E33A88
	0x03E33BD8 TBZ X0, 0x0, 0x3E33BE8
	0x03E33BDC MOV X0, X19
	0x03E33BE0 LDP X30, X19, [X31], #0x10
	0x03E33BE4 B 0x3E3388C
	0x03E33BE8 LDP X30, X19, [X31], #0x10
	0x03E33BEC RET
	0x03E33BF0 B 0x3E3388C
	0x03E33BF4 STP X30, X21, [X31 - 0x20]!
	0x03E33BF8 STP X20, X19, [X31 + 0x10]
	0x03E33BFC ADRP X20, 0x5B5000
	0x03E33C00 ADRP X21, 0x338000
	0x03E33C04 LDRB W8, [X20 + 0x744]
	0x03E33C08 LDR X21, [X21 + 0xD8]
	0x03E33C0C MOV X19, X1
	0x03E33C10 TBNZ X8, 0x0, 0x3E33C28
	0x03E33C14 ADRP X0, 0x338000
	0x03E33C18 LDR X0, [X0 + 0xD8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X7
	009 Move X21, X6
	010 Move X22, X5
	011 Move W20, W4
	012 Move W24, W2
	013 Move X23, X1
	014 Move TEMP, X3
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {28}
	018 Move X0, X23
	019 Compare W24, 0
	020 JumpIfEqual {40}
	021 Call LayoutUtility.GetMinHeight, X0
	022 Move X0, X23
	023 Move [X22], S0
	024 Call LayoutUtility.GetPreferredHeight, X0
	025 Move X0, X23
	026 Move [X21], S0
	027 Call LayoutUtility.GetFlexibleHeight, X0
	028 Compare X23, 0
	029 JumpIfEqual {60}
	030 Move X0, X23
	031 Move X1, X31
	032 Call RectTransform.get_sizeDelta, X0
	033 Compare W24, 0
	034 JumpIfEqual {37}
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move V0, V1
	037 Move [X22], S0
	038 Move [X21], S0
	039 Move S0, W31
	040 Call LayoutUtility.GetMinWidth, X0
	041 Move X0, X23
	042 Move [X22], S0
	043 Call LayoutUtility.GetPreferredWidth, X0
	044 Move X0, X23
	045 Move [X21], S0
	046 Call LayoutUtility.GetFlexibleWidth, X0
	047 Move S1, 1
	048 NotImplemented "Instruction FMAXNM not yet implemented."
	049 And W31, W20, 1
	050 NotImplemented "Instruction FCSEL not yet implemented."
	051 Move [X19], S0
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X24, [X31+16]
	057 Move X23, [X31+24]
	058 Move X30, [X31+64]
	059 Return 
	060 Call 0x1C17F20
	061 Move X0, 0x2CB000
	062 Move X0, [X0+3960]
	063 Call 0x1C17D08
	064 Call 0x1C17F10
	065 Move X19, X0
	066 Move X0, 0x313000
	067 Move X0, [X0+4088]
	068 Call 0x1C17D08
	069 Move X1, X0
	070 Move X0, X19
	071 Move X2, X31
	072 Call IndexOutOfRangeException..ctor, X0, X1
	073 Move X0, 0x314000
	074 Move X0, [X0]
	075 Call 0x1C17D08
	076 Move X1, X0
	077 Move X0, X19
	078 Call 0x1C17DEC

Method: System.Void .ctor()

Disassembly:
	0x03E32EA8 ADRP X0, 0x313000
	0x03E32EAC LDR X0, [X0 + 0xFF8]
	0x03E32EB0 BL 0x1C16D08

ISIL:
	001 Or W8, W31, 0x1010101
	002 Move [X0+100], W8
	003 Call LayoutGroup..ctor, X0
	004 Return 

