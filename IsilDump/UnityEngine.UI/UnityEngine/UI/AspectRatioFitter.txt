Type: UnityEngine.UI.AspectRatioFitter

Method: UnityEngine.UI.AspectRatioFitter/AspectMode get_aspectMode()

Disassembly:
	0x03E2FFE0 MOVZ W8, 0x1
	0x03E2FFE4 STRB W8, [X22 + 0x714]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_aspectMode(UnityEngine.UI.AspectRatioFitter/AspectMode value)

Disassembly:
	0x03E2FFE8 FMOV S0, 1
	0x03E2FFEC MOV X0, X19
	0x03E2FFF0 BL 0x3E30044
	0x03E2FFF4 MOVZ W8, 0x42C80000
	0x03E2FFF8 FMOV S0, W8
	0x03E2FFFC MOV X0, X19
	0x03E30000 BL 0x3E30084
	0x03E30004 LDR X0, [X21]
	0x03E30008 BL 0x1C16F10
	0x03E3000C LDR X2, [X20]
	0x03E30010 MOV X1, X19
	0x03E30014 MOV X3, X31
	0x03E30018 MOV X20, X0
	0x03E3001C BL 0x3E251A8
	0x03E30020 MOV X0, X20
	0x03E30024 MOV X1, X31
	0x03E30028 BL 0x3E2428C
	0x03E3002C MOV X0, X19
	0x03E30030 LDP X20, X19, [X31 + 0x20]
	0x03E30034 LDP X22, X21, [X31 + 0x10]
	0x03E30038 MOV X1, X31
	0x03E3003C LDR X30, [X31], #0x30
	0x03E30040 B 0x3E4BDC4
	0x03E30044 STR D8, [X31 - 0x20]!
	0x03E30048 STP X30, X19, [X31 + 0x10]
	0x03E3004C LDR V1, [X0 + 0x58]
	0x03E30050 FCMP S1, S0
	0x03E30054 B.EQ 0x3E30074
	0x03E30058 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5BA000
	007 Move X21, 0x33D000
	008 Move W8, [X22+1803]
	009 Call 0x3EB2A4C
	010 Return 
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x33C000
	018 Move X0, [X0+48]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1803], W8
	022 Move X2, [X21]
	023 Add X0, X19, 32
	024 Move W1, W20
	025 Call SetPropertyUtility.SetStruct, X0, X1
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {38}
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Call AspectRatioFitter.UpdateRect, X0
	037 Return 
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return 

Method: System.Single get_aspectRatio()

Disassembly:
	0x03E30060 CBZ X0, 0x3E30080
	0x03E30064 MOV X1, X31

ISIL:
	001 Move V0, [X0+36]
	002 Return V0

Method: System.Void set_aspectRatio(System.Single value)

Disassembly:
	0x03E30068 MOV V8.16B, V0.16B
	0x03E3006C BL 0x3E24650
	0x03E30070 STR S8, [X19 + 0x58]
	0x03E30074 LDP X30, X19, [X31 + 0x10]
	0x03E30078 LDR V8, [X31], #0x20
	0x03E3007C RET
	0x03E30080 BL 0x1C16F20
	0x03E30084 STR D8, [X31 - 0x20]!
	0x03E30088 STP X30, X19, [X31 + 0x10]
	0x03E3008C LDR V1, [X0 + 0x5C]
	0x03E30090 FCMP S1, S0
	0x03E30094 B.EQ 0x3E300B4
	0x03E30098 MOV X19, X0
	0x03E3009C LDR X0, [X0 + 0x50]
	0x03E300A0 CBZ X0, 0x3E300C0
	0x03E300A4 MOV X1, X31
	0x03E300A8 MOV V8.16B, V0.16B
	0x03E300AC BL 0x3E246D8
	0x03E300B0 STR S8, [X19 + 0x5C]
	0x03E300B4 LDP X30, X19, [X31 + 0x10]
	0x03E300B8 LDR V8, [X31], #0x20
	0x03E300BC RET
	0x03E300C0 BL 0x1C16F20
	0x03E300C4 STP X30, X21, [X31 - 0x20]!
	0x03E300C8 STP X20, X19, [X31 + 0x10]
	0x03E300CC ADRP X21, 0x5B8000
	0x03E300D0 ADRP X20, 0x2C3000
	0x03E300D4 LDRB W8, [X21 + 0x715]
	0x03E300D8 LDR X20, [X20 + 0x598]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5B9000
	007 Move X20, 0x333000
	008 Move W8, [X21+1804]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x333000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1804], W8
	021 Move X1, [X20]
	022 Add X0, X19, 36
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Call AspectRatioFitter.UpdateRect, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Return 

Method: UnityEngine.RectTransform get_rectTransform()

Disassembly:
	0x03E300DC MOV X19, X0
	0x03E300E0 TBNZ X8, 0x0, 0x3E300F8
	0x03E300E4 ADRP X0, 0x2C3000
	0x03E300E8 LDR X0, [X0 + 0x598]
	0x03E300EC BL 0x1C16CF4
	0x03E300F0 MOVZ W8, 0x1
	0x03E300F4 STRB W8, [X21 + 0x715]
	0x03E300F8 LDR X0, [X20]
	0x03E300FC LDR X20, [X19 + 0x50]
	0x03E30100 LDR W8, [X0 + 0xE0]
	0x03E30104 CBNZ W8, 0x3E3010C
	0x03E30108 BL 0x1C16DFC
	0x03E3010C MOV X0, X20
	0x03E30110 MOV X1, X31
	0x03E30114 MOV X2, X31
	0x03E30118 BL 0x3C3883C
	0x03E3011C TBNZ X0, 0x0, 0x3E30184
	0x03E30120 LDR X0, [X19 + 0x50]
	0x03E30124 CBZ X0, 0x3E301BC
	0x03E30128 MOV X1, X31
	0x03E3012C BL 0x3E2453C
	0x03E30130 TBZ X0, 0x0, 0x3E30184
	0x03E30134 LDR X0, [X19 + 0x50]
	0x03E30138 CBZ X0, 0x3E301BC
	0x03E3013C MOV X1, X31
	0x03E30140 BL 0x3E244BC
	0x03E30144 CMP W0, 0x2
	0x03E30148 B.NE 0x3E3015C
	0x03E3014C LDR X8, [X19]
	0x03E30150 LDR X2, [X8 + 0x258]
	0x03E30154 LDR X1, [X8 + 0x260]
	0x03E30158 B 0x3E301AC
	0x03E3015C LDR W8, [X19 + 0x20]
	0x03E30160 CMP W8, 0x2
	0x03E30164 B.EQ 0x3E30190
	0x03E30168 CMP W8, 0x1
	0x03E3016C B.EQ 0x3E301A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B9000
	006 Move X20, 0x2C4000
	007 Move W8, [X21+1805]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2C6000
	015 Move X0, [X0+1720]
	016 Call 0x1C17CF4
	017 Move X0, 0x2C4000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1805], W8
	022 Move X0, [X20]
	023 Move X20, [X19+40]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x2C6000
	037 Move X8, [X8+1720]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+40], X0
	042 Move X0, [X19+40]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03E30170 CBNZ W8, 0x3E30184
	0x03E30174 LDR X8, [X19]
	0x03E30178 LDR X2, [X8 + 0x268]
	0x03E3017C LDR X1, [X8 + 0x270]

ISIL:
	001 Move W8, 0x3F800000
	002 Move X1, X31
	003 Move [X0+36], W8
	004 Call UIBehaviour..ctor, X0
	005 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03E30180 B 0x3E301AC
	0x03E30184 LDP X20, X19, [X31 + 0x10]
	0x03E30188 LDP X30, X21, [X31], #0x20
	0x03E3018C RET
	0x03E30190 LDR X8, [X19]
	0x03E30194 LDR X2, [X8 + 0x288]
	0x03E30198 LDR X1, [X8 + 0x290]
	0x03E3019C B 0x3E301AC
	0x03E301A0 LDR X8, [X19]
	0x03E301A4 LDR X2, [X8 + 0x278]
	0x03E301A8 LDR X1, [X8 + 0x280]
	0x03E301AC MOV X0, X19
	0x03E301B0 LDP X20, X19, [X31 + 0x10]
	0x03E301B4 LDP X30, X21, [X31], #0x20
	0x03E301B8 BR X2
	0x03E301BC BL 0x1C16F20
	0x03E301C0 STP X30, X19, [X31 - 0x10]!
	0x03E301C4 LDR V0, [X0 + 0x48]
	0x03E301C8 MOV X19, X0
	0x03E301CC BL 0x3E30044
	0x03E301D0 LDR V0, [X19 + 0x24]
	0x03E301D4 MOV X0, X19
	0x03E301D8 LDP X30, X19, [X31], #0x10
	0x03E301DC B 0x3E30084
	0x03E301E0 STP X30, X19, [X31 - 0x10]!
	0x03E301E4 LDR V0, [X0 + 0x28]
	0x03E301E8 MOV X19, X0
	0x03E301EC BL 0x3E30044
	0x03E301F0 LDR V0, [X19 + 0x24]
	0x03E301F4 MOV X0, X19
	0x03E301F8 LDP X30, X19, [X31], #0x10
	0x03E301FC B 0x3E30084
	0x03E30200 STR D10, [X31 - 0x40]!
	0x03E30204 STP D9, D8, [X31 + 0x10]
	0x03E30208 STP X30, X21, [X31 + 0x20]
	0x03E3020C STP X20, X19, [X31 + 0x30]
	0x03E30210 ADRP X20, 0x5B8000
	0x03E30214 LDRB W8, [X20 + 0x716]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5B9000
	005 Move W8, [X20+1806]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2C4000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1806], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call UIBehaviour.OnEnable, X0
	019 Move X0, X19
	020 Call AspectRatioFitter.get_rectTransform, X0
	021 Compare X0, 0
	022 JumpIfEqual {47}
	023 Move X20, 0x2C4000
	024 Move X20, [X20+1432]
	025 Move X1, X31
	026 Call Transform.get_parent, X0
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Call Object.op_Implicit, X0
	037 Compare X19, 0
	038 JumpIfEqual {47}
	039 And W8, W0, 1
	040 Move [X19+49], W8
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Call AspectRatioFitter.UpdateRect, X0
	046 Return 
	047 Call 0x1C17F20

Method: System.Void Start()

Disassembly:
	0x03E30218 MOV X19, X0
	0x03E3021C TBNZ X8, 0x0, 0x3E30234
	0x03E30220 ADRP X0, 0x327000
	0x03E30224 LDR X0, [X0 + 0x448]
	0x03E30228 BL 0x1C16CF4
	0x03E3022C MOVZ W8, 0x1
	0x03E30230 STRB W8, [X20 + 0x716]
	0x03E30234 LDR X0, [X19 + 0x50]
	0x03E30238 CBZ X0, 0x3E3042C
	0x03E3023C MOV X1, X31
	0x03E30240 BL 0x3E24BE0
	0x03E30244 LDR X0, [X19 + 0x50]
	0x03E30248 CBZ X0, 0x3E3042C
	0x03E3024C MOV X1, X31
	0x03E30250 MOV V9.16B, V0.16B
	0x03E30254 MOV V8.16B, V1.16B
	0x03E30258 BL 0x3E249A4
	0x03E3025C CMP W0, 0x1
	0x03E30260 B.LT 0x3E302F4
	0x03E30264 ADRP X21, 0x327000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call UIBehaviour.Start, X0
	006 Move X0, X19
	007 Call AspectRatioFitter.IsComponentValidOnObject, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {18}
	012 Move W8, [X19+49]
	013 Compare W8, 0
	014 JumpIfNotEqual {25}
	015 Move W8, [X19+32]
	016 Subtract W8, W8, 3
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X0, X19
	019 Move W1, W31
	020 Move X2, X31
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call Behaviour.set_enabled, X0, X1
	024 Return 
	025 Move X30, [X31+16]
	026 Move X19, [X31+24]
	027 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03E3035C BL 0x337ECD0
	0x03E30360 LDRB W8, [X20 + 0xE38]
	0x03E30364 LDR V10, [X19 + 0x30]
	0x03E30368 MOV V9.16B, V0.16B
	0x03E3036C CBNZ W8, 0x3E30384
	0x03E30370 ADRP X0, 0x2C3000
	0x03E30374 LDR X0, [X0 + 0x5A8]
	0x03E30378 BL 0x1C16CF4
	0x03E3037C MOVZ W8, 0x1
	0x03E30380 STRB W8, [X20 + 0xE38]
	0x03E30384 LDR X0, [X21]
	0x00000000 INVALID
	0x03E3038C FDIV S8, S8, S10
	0x03E30390 LDR W8, [X0 + 0xE0]
	0x03E30394 CBNZ W8, 0x3E3039C
	0x03E30398 BL 0x1C16DFC
	0x03E3039C FCVT S0, S8
	0x03E303A0 FMOV D1, 2
	0x03E303A4 MOV X0, X31
	0x03E303A8 BL 0x337ECD0
	0x03E303AC LDR V1, [X19 + 0x38]
	0x03E303B0 FMOV S2, 1
	0x00000000 INVALID
	0x03E303B8 FMOV S3, W31
	0x03E303BC FMIN S2, S1, S2
	0x03E303C0 FCMP S1, 0x0
	0x03E303C4 FCSEL S1, S2, S3, PL
	0x03E303C8 FSUB S0, S0, S9
	0x03E303CC FMUL S0, S0, S1
	0x03E303D0 FADD S0, S0, S9
	0x03E303D4 BL 0x3EB1B90

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B9000
	006 Move X20, 0x2C7000
	007 Move W8, [X21+1807]
	008 Move X20, [X20+2336]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2C7000
	015 Move X0, [X0+2336]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1807], W8
	019 Add X0, X19, 50
	020 Move X1, X31
	021 Call DrivenRectTransformTracker.Clear, X0
	022 Move X0, X19
	023 Call AspectRatioFitter.get_rectTransform, X0
	024 Move X8, [X20]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call UIBehaviour.OnDisable, X0
	040 Return 

Method: System.Void OnTransformParentChanged()

Disassembly:
	0x03E307D8 MOV X1, X20
	0x03E307DC LDP X20, X19, [X31 + 0x20]
	0x03E307E0 LDP X22, X21, [X31 + 0x10]
	0x03E307E4 MOV W3, W31
	0x03E307E8 MOV X4, X31
	0x03E307EC LDR X30, [X31], #0x30
	0x03E307F0 B 0x3C3E3A4
	0x03E307F4 CBZ W19, 0x3E30810
	0x03E307F8 BL 0x3E35604
	0x03E307FC CBNZ X20, 0x3E30818
	0x03E30800 B 0x3E307D0
	0x03E30804 BL 0x3E3551C
	0x03E30808 CBNZ X20, 0x3E30818
	0x03E3080C B 0x3E307D0
	0x03E30810 BL 0x3E3579C
	0x03E30814 CBZ X20, 0x3E307D0
	0x03E30818 MOV X0, X20
	0x03E3081C MOV W1, W19
	0x03E30820 LDP X20, X19, [X31 + 0x20]
	0x03E30824 LDP X22, X21, [X31 + 0x10]
	0x03E30828 MOV X2, X31
	0x03E3082C LDR X30, [X31], #0x30
	0x03E30830 B 0x3C3F234
	0x03E30834 CBZ W1, 0x3E3083C
	0x03E30838 B 0x3E35434
	0x03E3083C B 0x3E3551C
	0x03E30840 CBZ W1, 0x3E30848
	0x03E30844 B 0x3E35604
	0x03E30848 B 0x3E3579C
	0x03E3084C STP X30, X19, [X31 - 0x10]!
	0x03E30850 MOV X19, X0
	0x03E30854 ADD X0, X0, 0x30
	0x03E30858 MOV X1, X31
	0x03E3085C BL 0x3C3E3A8
	0x03E30860 MOV X0, X19
	0x03E30864 MOV W1, W31
	0x03E30868 LDP X30, X19, [X31], #0x10
	0x03E3086C B 0x3E30750

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5B9000
	005 Move W8, [X20+1808]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2C4000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1808], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call UIBehaviour.OnTransformParentChanged, X0
	019 Move X0, X19
	020 Call AspectRatioFitter.get_rectTransform, X0
	021 Compare X0, 0
	022 JumpIfEqual {47}
	023 Move X20, 0x2C4000
	024 Move X20, [X20+1432]
	025 Move X1, X31
	026 Call Transform.get_parent, X0
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Call Object.op_Implicit, X0
	037 Compare X19, 0
	038 JumpIfEqual {47}
	039 And W8, W0, 1
	040 Move [X19+49], W8
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Call AspectRatioFitter.UpdateRect, X0
	046 Return 
	047 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x03E30870 MOVZ W1, 0x1
	0x03E30874 B 0x3E30750
	0x03E30878 LDR W0, [X0 + 0x60]
	0x03E3087C RET
	0x03E30880 STR X30, [X31 - 0x30]!

ISIL:
	001 Move W8, [X0+48]
	002 Compare W8, 0
	003 JumpIfEqual {7}
	004 Move [X0+48], W31
	005 Call AspectRatioFitter.UpdateRect, X0
	006 Return 
	007 Return 

Method: System.Void OnRectTransformDimensionsChange()

Disassembly:
	0x03E30884 STP X22, X21, [X31 + 0x10]

ISIL:
No ISIL was generated
Method: System.Void UpdateRect()

Disassembly:
	0x03E30888 STP X20, X19, [X31 + 0x20]
	0x03E3088C ADRP X22, 0x5B8000
	0x03E30890 ADRP X21, 0x33B000
	0x03E30894 LDRB W8, [X22 + 0x71C]
	0x03E30898 LDR X21, [X21 + 0x50]
	0x03E3089C MOV W19, W1
	0x03E308A0 MOV X20, X0
	0x03E308A4 TBNZ X8, 0x0, 0x3E308BC
	0x03E308A8 ADRP X0, 0x33B000
	0x03E308AC LDR X0, [X0 + 0x50]
	0x03E308B0 BL 0x1C16CF4
	0x03E308B4 MOVZ W8, 0x1
	0x03E308B8 STRB W8, [X22 + 0x71C]
	0x03E308BC LDR X3, [X21]
	0x03E308C0 ADD X1, X20, 0x60
	0x03E308C4 MOV X0, X20
	0x03E308C8 MOV W2, W19
	0x03E308CC LDP X20, X19, [X31 + 0x20]
	0x03E308D0 LDP X22, X21, [X31 + 0x10]
	0x03E308D4 LDR X30, [X31], #0x30
	0x03E308D8 B 0x221256C
	0x03E308DC LDR W0, [X0 + 0x64]
	0x03E308E0 RET
	0x03E308E4 STR X30, [X31 - 0x30]!
	0x03E308E8 STP X22, X21, [X31 + 0x10]
	0x03E308EC STP X20, X19, [X31 + 0x20]
	0x03E308F0 ADRP X22, 0x5B8000
	0x03E308F4 ADRP X21, 0x33B000
	0x03E308F8 LDRB W8, [X22 + 0x71D]
	0x03E308FC LDR X21, [X21 + 0x58]
	0x03E30900 MOV W19, W1
	0x03E30904 MOV X20, X0
	0x03E30908 TBNZ X8, 0x0, 0x3E30920
	0x03E3090C ADRP X0, 0x33B000
	0x03E30910 LDR X0, [X0 + 0x58]
	0x03E30914 BL 0x1C16CF4
	0x03E30918 MOVZ W8, 0x1
	0x03E3091C STRB W8, [X22 + 0x71D]
	0x03E30920 LDR X3, [X21]
	0x03E30924 ADD X1, X20, 0x64
	0x03E30928 MOV X0, X20
	0x03E3092C MOV W2, W19
	0x03E30930 LDP X20, X19, [X31 + 0x20]
	0x03E30934 LDP X22, X21, [X31 + 0x10]
	0x03E30938 LDR X30, [X31], #0x30
	0x03E3093C B 0x221256C
	0x03E30940 LDP S0, S1, [X0 + 0x68]
	0x03E30944 RET
	0x03E30948 STP D9, D8, [X31 - 0x30]!
	0x03E3094C STP X30, X21, [X31 + 0x10]
	0x03E30950 STP X20, X19, [X31 + 0x20]
	0x03E30954 ADRP X21, 0x5B8000
	0x03E30958 ADRP X20, 0x33B000
	0x03E3095C LDRB W8, [X21 + 0x71E]
	0x03E30960 LDR X20, [X20 + 0x60]
	0x03E30964 MOV V8.16B, V1.16B
	0x03E30968 MOV V9.16B, V0.16B
	0x03E3096C MOV X19, X0
	0x03E30970 TBNZ X8, 0x0, 0x3E30988
	0x03E30974 ADRP X0, 0x33B000
	0x03E30978 LDR X0, [X0 + 0x60]
	0x03E3097C BL 0x1C16CF4
	0x03E30980 MOVZ W8, 0x1
	0x03E30984 STRB W8, [X21 + 0x71E]
	0x03E30988 LDR X2, [X20]
	0x03E3098C ADD X1, X19, 0x68
	0x03E30990 MOV X0, X19
	0x03E30994 LDP X20, X19, [X31 + 0x20]
	0x03E30998 LDP X30, X21, [X31 + 0x10]
	0x03E3099C MOV V0.16B, V9.16B
	0x03E309A0 MOV V1.16B, V8.16B
	0x03E309A4 LDP D9, D8, [X31], #0x30
	0x03E309A8 B 0x22126F0
	0x03E309AC LDP S0, S1, [X0 + 0x70]
	0x03E309B0 RET
	0x03E309B4 STP D9, D8, [X31 - 0x30]!
	0x03E309B8 STP X30, X21, [X31 + 0x10]
	0x03E309BC STP X20, X19, [X31 + 0x20]
	0x03E309C0 ADRP X21, 0x5B8000
	0x03E309C4 ADRP X20, 0x33B000
	0x03E309C8 LDRB W8, [X21 + 0x71F]
	0x03E309CC LDR X20, [X20 + 0x60]
	0x03E309D0 MOV V8.16B, V1.16B
	0x03E309D4 MOV V9.16B, V0.16B
	0x03E309D8 MOV X19, X0
	0x03E309DC TBNZ X8, 0x0, 0x3E309F4
	0x03E309E0 ADRP X0, 0x33B000
	0x03E309E4 LDR X0, [X0 + 0x60]
	0x03E309E8 BL 0x1C16CF4
	0x03E309EC MOVZ W8, 0x1
	0x03E309F0 STRB W8, [X21 + 0x71F]
	0x03E309F4 LDR X2, [X20]
	0x03E309F8 ADD X1, X19, 0x70
	0x03E309FC MOV X0, X19
	0x03E30A00 LDP X20, X19, [X31 + 0x20]
	0x03E30A04 LDP X30, X21, [X31 + 0x10]
	0x03E30A08 MOV V0.16B, V9.16B
	0x03E30A0C MOV V1.16B, V8.16B
	0x03E30A10 LDP D9, D8, [X31], #0x30
	0x03E30A14 B 0x22126F0
	0x03E30A18 LDR W0, [X0 + 0x78]
	0x03E30A1C RET
	0x03E30A20 STR X30, [X31 - 0x30]!
	0x03E30A24 STP X22, X21, [X31 + 0x10]
	0x03E30A28 STP X20, X19, [X31 + 0x20]
	0x03E30A2C ADRP X22, 0x5B8000
	0x03E30A30 ADRP X21, 0x33B000
	0x03E30A34 LDRB W8, [X22 + 0x720]
	0x03E30A38 LDR X21, [X21 + 0x68]
	0x03E30A3C MOV W19, W1
	0x03E30A40 MOV X20, X0
	0x03E30A44 TBNZ X8, 0x0, 0x3E30A5C
	0x03E30A48 ADRP X0, 0x33B000
	0x03E30A4C LDR X0, [X0 + 0x68]
	0x03E30A50 BL 0x1C16CF4
	0x03E30A54 MOVZ W8, 0x1
	0x03E30A58 STRB W8, [X22 + 0x720]
	0x03E30A5C LDR X3, [X21]
	0x03E30A60 ADD X1, X20, 0x78
	0x03E30A64 MOV X0, X20
	0x03E30A68 MOV W2, W19
	0x03E30A6C LDP X20, X19, [X31 + 0x20]
	0x03E30A70 LDP X22, X21, [X31 + 0x10]
	0x03E30A74 LDR X30, [X31], #0x30
	0x03E30A78 B 0x221256C
	0x03E30A7C LDR W0, [X0 + 0x7C]
	0x03E30A80 RET
	0x03E30A84 STR X30, [X31 - 0x30]!
	0x03E30A88 STP X22, X21, [X31 + 0x10]
	0x03E30A8C STP X20, X19, [X31 + 0x20]
	0x03E30A90 ADRP X22, 0x5B8000
	0x03E30A94 ADRP X21, 0x33B000
	0x03E30A98 LDRB W8, [X22 + 0x721]
	0x03E30A9C LDR X21, [X21 + 0x70]
	0x03E30AA0 MOV W19, W1
	0x03E30AA4 MOV X20, X0
	0x03E30AA8 TBNZ X8, 0x0, 0x3E30AC0
	0x03E30AAC ADRP X0, 0x33B000
	0x03E30AB0 LDR X0, [X0 + 0x70]
	0x03E30AB4 BL 0x1C16CF4
	0x03E30AB8 MOVZ W8, 0x1
	0x03E30ABC STRB W8, [X22 + 0x721]
	0x03E30AC0 CMP W19, 0x1
	0x03E30AC4 LDR X3, [X21]
	0x03E30AC8 ADD X1, X20, 0x7C
	0x03E30ACC CSINC W2, W19, W31, GT
	0x03E30AD0 MOV X0, X20
	0x03E30AD4 LDP X20, X19, [X31 + 0x20]
	0x03E30AD8 LDP X22, X21, [X31 + 0x10]
	0x03E30ADC LDR X30, [X31], #0x30
	0x03E30AE0 B 0x22124F4
	0x03E30AE4 STR X30, [X31 - 0x20]!
	0x03E30AE8 STP X20, X19, [X31 + 0x10]
	0x03E30AEC MOVZ W8, 0x42C80000
	0x03E30AF0 UNIMPLEMENTED
	0x03E30AF4 STR D0, [X0 + 0x68]
	0x03E30AF8 ADRP X20, 0x5A9000
	0x03E30AFC LDRB W8, [X20 + 0x78F]
	0x03E30B00 MOV X19, X0
	0x03E30B04 CBNZ W8, 0x3E30B1C
	0x03E30B08 ADRP X0, 0x2CB000
	0x03E30B0C LDR X0, [X0 + 0xF08]
	0x03E30B10 BL 0x1C16CF4
	0x03E30B14 MOVZ W8, 0x1
	0x03E30B18 STRB W8, [X20 + 0x78F]
	0x03E30B1C ADRP X8, 0x2CB000
	0x03E30B20 LDR X8, [X8 + 0xF08]
	0x03E30B24 MOV X0, X19
	0x03E30B28 LDR X8, [X8]
	0x03E30B2C LDR X8, [X8 + 0xB8]
	0x03E30B30 LDR V0, [X8]
	0x03E30B34 MOVZ W8, 0x2
	0x03E30B38 STR W8, [X19 + 0x7C]
	0x03E30B3C STR D0, [X19 + 0x70]
	0x03E30B40 LDP X20, X19, [X31 + 0x10]
	0x03E30B44 LDR X30, [X31], #0x20
	0x03E30B48 B 0x3E30B4C
	0x03E30B4C STP X30, X23, [X31 - 0x30]!
	0x03E30B50 STP X22, X21, [X31 + 0x10]
	0x03E30B54 STP X20, X19, [X31 + 0x20]
	0x03E30B58 ADRP X20, 0x5B8000
	0x03E30B5C ADRP X21, 0x2EA000
	0x03E30B60 LDRB W8, [X20 + 0x73C]
	0x03E30B64 LDR X21, [X21 + 0x4C8]
	0x03E30B68 MOV X19, X0
	0x03E30B6C TBNZ X8, 0x0, 0x3E30B9C
	0x03E30B70 ADRP X0, 0x33B000

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X8, [X0]
	010 Move X19, X0
	011 Move X9, [X8+456]
	012 Move X1, [X8+464]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move TEMP, X0
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfNotEqual {158}
	018 Move X0, X19
	019 Call AspectRatioFitter.IsComponentValidOnObject, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {158}
	024 Add X20, X19, 50
	025 Move X0, X20
	026 Move X1, X31
	027 Call DrivenRectTransformTracker.Clear, X0
	028 Move W8, [X19+32]
	029 Subtract W9, W8, 3
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CMP not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X0, X19
	034 Call AspectRatioFitter.get_rectTransform, X0
	035 Move X2, X0
	036 Move W3, 4096
	037 Move X0, X20
	038 Move X1, X19
	039 Move X4, X31
	040 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	041 Move X0, X19
	042 Call AspectRatioFitter.get_rectTransform, X0
	043 Move X20, X0
	044 Move X0, X19
	045 Call AspectRatioFitter.get_rectTransform, X0
	046 Compare X0, 0
	047 JumpIfEqual {223}
	048 Move X1, X31
	049 Call RectTransform.get_rect, X0
	050 Compare X20, 0
	051 JumpIfEqual {223}
	052 Move V0, [X19+36]
	053 Move X0, X20
	054 Move W1, W31
	055 Multiply S0, S3, S0
	056 Move W8, [X19+49]
	057 Compare W8, 0
	058 JumpIfEqual {158}
	059 Move X0, X19
	060 Call AspectRatioFitter.get_rectTransform, X0
	061 Move X2, X0
	062 Move W3, 0x3F06
	063 Move X0, X20
	064 Move X1, X19
	065 Move X4, X31
	066 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	067 Move X0, X19
	068 Call AspectRatioFitter.get_rectTransform, X0
	069 Move X21, 0x5AA000
	070 Move W8, [X21+1935]
	071 Move X20, X0
	072 Compare W8, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0x2CC000
	075 Move X0, [X0+3848]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X21+1935], W8
	079 Compare X20, 0
	080 JumpIfEqual {223}
	081 Move X22, 0x2CC000
	082 Move X22, [X22+3848]
	083 Move X0, X20
	084 Move X1, X31
	085 Move X8, [X22]
	086 Move X8, [X8+184]
	087 Move S0, [X8]
	088 Move S1, [X8+4]
	089 Call RectTransform.set_anchorMin, X0, X1
	090 Move X0, X19
	091 Call AspectRatioFitter.get_rectTransform, X0
	092 Move X23, 0x5B2000
	093 Move W8, [X23+2632]
	094 Move X20, X0
	095 Compare W8, 0
	096 JumpIfNotEqual {102}
	097 Move X0, 0x2CC000
	098 Move X0, [X0+3848]
	099 Call 0x1C17CF4
	100 Move W8, 1
	101 Move [X23+2632], W8
	102 Compare X20, 0
	103 JumpIfEqual {223}
	104 Move X8, [X22]
	105 Move X0, X20
	106 Move X1, X31
	107 Move X8, [X8+184]
	108 Move S0, [X8+8]
	109 Move S1, [X8+12]
	110 Call RectTransform.set_anchorMax, X0, X1
	111 Move X0, X19
	112 Call AspectRatioFitter.get_rectTransform, X0
	113 Move W8, [X21+1935]
	114 Move X20, X0
	115 Compare W8, 0
	116 JumpIfNotEqual {122}
	117 Move X0, 0x2CC000
	118 Move X0, [X0+3848]
	119 Call 0x1C17CF4
	120 Move W8, 1
	121 Move [X21+1935], W8
	122 Compare X20, 0
	123 JumpIfEqual {223}
	124 Move X8, [X22]
	125 Move X0, X20
	126 Move X1, X31
	127 Move X8, [X8+184]
	128 Move S0, [X8]
	129 Move S1, [X8+4]
	130 Call RectTransform.set_anchoredPosition, X0, X1
	131 Move W8, [X21+1935]
	132 Compare W8, 0
	133 JumpIfNotEqual {139}
	134 Move X0, 0x2CC000
	135 Move X0, [X0+3848]
	136 Call 0x1C17CF4
	137 Move W8, 1
	138 Move [X21+1935], W8
	139 Move X8, [X22]
	140 Move X0, X19
	141 Move X8, [X8+184]
	142 Move S8, [X8]
	143 Move S9, [X8+4]
	144 Call AspectRatioFitter.GetParentSize, X0
	145 Move V2, [X19+36]
	146 Move W8, [X19+32]
	147 Multiply S1, S1, S2
	148 NotImplemented "Instruction FCMP not yet implemented."
	149 NotImplemented "Instruction CSET not yet implemented."
	150 NotImplemented "Instruction CMP not yet implemented."
	151 NotImplemented "Instruction CSET not yet implemented."
	152 NotImplemented "Instruction CMP not yet implemented."
	153 NotImplemented "Instruction FDIV not yet implemented."
	154 Move W1, 1
	155 Move X0, X19
	156 Call AspectRatioFitter.GetSizeDeltaToProduceSize, X0, V0, X1
	157 Move V9, V0
	158 Move X20, [X31+48]
	159 Move X19, [X31+56]
	160 Move X22, [X31+32]
	161 Move X21, [X31+40]
	162 Move X30, [X31+16]
	163 Move X23, [X31+24]
	164 Move D9, [X31+64]
	165 Move D8, [X31+72]
	166 Return 
	167 Move X0, X19
	168 Call AspectRatioFitter.get_rectTransform, X0
	169 Move X2, X0
	170 Move W3, 0x2000
	171 Move X0, X20
	172 Move X1, X19
	173 Move X4, X31
	174 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	175 Move X0, X19
	176 Call AspectRatioFitter.get_rectTransform, X0
	177 Move X20, X0
	178 Move X0, X19
	179 Call AspectRatioFitter.get_rectTransform, X0
	180 Compare X0, 0
	181 JumpIfEqual {223}
	182 Move X1, X31
	183 Call RectTransform.get_rect, X0
	184 Compare X20, 0
	185 JumpIfEqual {223}
	186 Move V0, [X19+36]
	187 Move W1, 1
	188 Move X0, X20
	189 NotImplemented "Instruction FDIV not yet implemented."
	190 Move X20, [X31+48]
	191 Move X19, [X31+56]
	192 Move X22, [X31+32]
	193 Move X21, [X31+40]
	194 Move X30, [X31+16]
	195 Move X23, [X31+24]
	196 Move X2, X31
	197 Move D9, [X31+64]
	198 Move D8, [X31+72]
	199 Call RectTransform.SetSizeWithCurrentAnchors, X0, X1, V0
	200 Return 
	201 Move X0, X19
	202 Move V0, V1
	203 Move W1, W31
	204 Call AspectRatioFitter.GetSizeDeltaToProduceSize, X0, V0, X1
	205 Move V8, V0
	206 Move X0, X19
	207 Call AspectRatioFitter.get_rectTransform, X0
	208 Compare X0, 0
	209 JumpIfEqual {223}
	210 Move X20, [X31+48]
	211 Move X19, [X31+56]
	212 Move X22, [X31+32]
	213 Move X21, [X31+40]
	214 Move X30, [X31+16]
	215 Move X23, [X31+24]
	216 Move V0, V8
	217 Move V1, V9
	218 Move X1, X31
	219 Move D9, [X31+64]
	220 Move D8, [X31+72]
	221 Call RectTransform.set_sizeDelta, X0, X1
	222 Return 
	223 Call 0x1C17F20

Method: System.Single GetSizeDeltaToProduceSize(System.Single size, System.Int32 axis)

Disassembly:
	0x03E30C6C STR X30, [X31 + 0x10]
	0x03E30C70 STP X22, X21, [X31 + 0x20]
	0x03E30C74 STP X20, X19, [X31 + 0x30]
	0x03E30C78 ADRP X20, 0x5B8000
	0x03E30C7C LDRB W8, [X20 + 0x722]
	0x03E30C80 MOV X19, X0
	0x03E30C84 TBNZ X8, 0x0, 0x3E30C9C
	0x03E30C88 ADRP X0, 0x33B000
	0x03E30C8C LDR X0, [X0 + 0x88]
	0x03E30C90 BL 0x1C16CF4
	0x03E30C94 MOVZ W8, 0x1
	0x03E30C98 STRB W8, [X20 + 0x722]
	0x03E30C9C MOV X0, X19
	0x03E30CA0 BL 0x3E30E34
	0x03E30CA4 LDR W9, [X19 + 0x78]
	0x03E30CA8 CMP W9, 0x1
	0x03E30CAC B.NE 0x3E30CB8
	0x03E30CB0 LDR W21, [X19 + 0x7C]
	0x03E30CB4 B 0x3E30D3C
	0x03E30CB8 LDR X8, [X19 + 0x58]
	0x03E30CBC CBZ X8, 0x3E30E30
	0x03E30CC0 LDR W8, [X8 + 0x18]
	0x03E30CC4 CMP W9, 0x2
	0x03E30CC8 B.NE 0x3E30D44
	0x03E30CCC LDR V0, [X19 + 0x7C]
	0x03E30CD0 ADRP X9, 0xFFFFFFFFFCCB9000
	0x03E30CD4 ADRP X20, 0x5A8000
	0x03E30CD8 LDRB W10, [X20 + 0xABE]
	0x03E30CDC LDR V8, [X9 + 0xF70]
	0x03E30CE0 SCVTF S1, W8
	0x03E30CE4 SCVTF S0, S0
	0x03E30CE8 FDIV S9, S1, S0
	0x03E30CEC CBNZ W10, 0x3E30D04
	0x03E30CF0 ADRP X0, 0x2C3000
	0x03E30CF4 LDR X0, [X0 + 0x5A8]
	0x03E30CF8 BL 0x1C16CF4
	0x03E30CFC MOVZ W8, 0x1
	0x03E30D00 STRB W8, [X20 + 0xABE]
	0x03E30D04 ADRP X8, 0x2C3000
	0x03E30D08 LDR X8, [X8 + 0x5A8]
	0x03E30D0C FADD S8, S9, S8
	0x03E30D10 LDR X0, [X8]
	0x03E30D14 LDR W8, [X0 + 0xE0]
	0x03E30D18 CBNZ W8, 0x3E30D20
	0x03E30D1C BL 0x1C16DFC
	0x03E30D20 MOVZ W8, 0x7F800000
	0x03E30D24 FRINTP S0, S8
	0x03E30D28 FMOV S1, W8
	0x03E30D2C FCVTPS W9, S8
	0x03E30D30 FCMP S0, S1
	0x03E30D34 MOVZ W8, 0x80000000
	0x03E30D38 CSEL W21, W8, W9, EQ
	0x03E30D3C MOV W22, W21
	0x03E30D40 B 0x3E30DA4
	0x03E30D44 ADRP X20, 0x5A8000
	0x03E30D48 LDRB W9, [X20 + 0xABE]
	0x03E30D4C SCVTF S8, W8
	0x03E30D50 CBNZ W9, 0x3E30D68
	0x03E30D54 ADRP X0, 0x2C3000
	0x03E30D58 LDR X0, [X0 + 0x5A8]
	0x03E30D5C BL 0x1C16CF4

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W19, W1
	008 Move V8, V0
	009 Move X20, X0
	010 Call AspectRatioFitter.GetParentSize, X0
	011 Compare W19, 0
	012 JumpIfEqual {15}
	013 NotImplemented "Instruction CMP not yet implemented."
	014 Move V9, V1
	015 Move V9, V0
	016 Move X0, X20
	017 Call AspectRatioFitter.get_rectTransform, X0
	018 Compare X0, 0
	019 JumpIfEqual {47}
	020 Move X1, X31
	021 Call RectTransform.get_anchorMax, X0
	022 Compare W19, 0
	023 JumpIfEqual {26}
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move V10, V1
	026 Move V10, V0
	027 Move X0, X20
	028 Call AspectRatioFitter.get_rectTransform, X0
	029 Compare X0, 0
	030 JumpIfEqual {47}
	031 Move X1, X31
	032 Call RectTransform.get_anchorMin, X0
	033 Compare W19, 0
	034 JumpIfEqual {37}
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move V0, V1
	037 Subtract S0, S10, S0
	038 Multiply S0, S9, S0
	039 Subtract S0, S8, S0
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+24]
	043 Move D9, [X31+8]
	044 Move D8, [X31+16]
	045 Move V10, [X31+48]
	046 Return V0
	047 Call 0x1C17F20
	048 Move X0, 0x2CE000
	049 Move X0, [X0+3960]
	050 Call 0x1C17D08
	051 Call 0x1C17F10
	052 Move X19, X0
	053 Move X0, 0x316000
	054 Move X0, [X0+4088]
	055 Call 0x1C17D08
	056 Move X1, X0
	057 Move X0, X19
	058 Move X2, X31
	059 Call IndexOutOfRangeException..ctor, X0, X1
	060 Move X0, 0x317000
	061 Move X0, [X0]
	062 Call 0x1C17D08
	063 Move X1, X0
	064 Move X0, X19
	065 Call 0x1C17DEC

Method: UnityEngine.Vector2 GetParentSize()

Disassembly:
	0x03E30B74 LDR X0, [X0 + 0x78]
	0x03E30B78 BL 0x1C16CF4
	0x03E30B7C ADRP X0, 0x33B000
	0x03E30B80 LDR X0, [X0 + 0x80]
	0x03E30B84 BL 0x1C16CF4
	0x03E30B88 ADRP X0, 0x2EA000
	0x03E30B8C LDR X0, [X0 + 0x4C8]
	0x03E30B90 BL 0x1C16CF4
	0x03E30B94 MOVZ W8, 0x1
	0x03E30B98 STRB W8, [X20 + 0x73C]
	0x03E30B9C LDR X0, [X21]
	0x03E30BA0 ADRP X23, 0x33B000
	0x03E30BA4 ADRP X22, 0x33B000
	0x03E30BA8 LDR X23, [X23 + 0x80]
	0x03E30BAC LDR X22, [X22 + 0x78]
	0x03E30BB0 BL 0x1C16F10
	0x03E30BB4 MOV X1, X31
	0x03E30BB8 MOV X20, X0
	0x03E30BBC BL 0x3C0C244
	0x03E30BC0 STR X20, [X19 + 0x20]
	0x03E30BC4 ADRP X20, 0x5A9000
	0x03E30BC8 LDRB W8, [X20 + 0x78F]
	0x03E30BCC CBNZ W8, 0x3E30BE4
	0x03E30BD0 ADRP X0, 0x2CB000
	0x03E30BD4 LDR X0, [X0 + 0xF08]
	0x03E30BD8 BL 0x1C16CF4
	0x03E30BDC MOVZ W8, 0x1
	0x03E30BE0 STRB W8, [X20 + 0x78F]
	0x03E30BE4 ADRP X8, 0x2CB000
	0x03E30BE8 LDR X8, [X8 + 0xF08]
	0x03E30BEC LDR X8, [X8]
	0x03E30BF0 LDR X9, [X8 + 0xB8]
	0x03E30BF4 LDR V0, [X9]
	0x03E30BF8 STUR D0, [X19 + 0x3C]
	0x03E30BFC LDR X9, [X8 + 0xB8]
	0x03E30C00 LDR V0, [X9]
	0x03E30C04 STUR D0, [X19 + 0x44]
	0x03E30C08 LDR X8, [X8 + 0xB8]
	0x03E30C0C LDR V0, [X8]
	0x03E30C10 STUR D0, [X19 + 0x4C]
	0x03E30C14 LDR X0, [X23]
	0x03E30C18 BL 0x1C16F10
	0x03E30C1C LDR X1, [X22]
	0x03E30C20 MOV X20, X0
	0x03E30C24 BL 0x301B7C4
	0x03E30C28 MOV X0, X19
	0x03E30C2C MOV X1, X31
	0x03E30C30 STR X20, [X19 + 0x58]
	0x03E30C34 BL 0x3E4E160
	0x03E30C38 LDR X8, [X19 + 0x20]
	0x03E30C3C CBNZ X8, 0x3E30C58
	0x03E30C40 LDR X0, [X21]
	0x03E30C44 BL 0x1C16F10
	0x03E30C48 MOV X1, X31
	0x03E30C4C MOV X20, X0
	0x03E30C50 BL 0x3C0C244
	0x03E30C54 STR X20, [X19 + 0x20]
	0x03E30C58 LDP X20, X19, [X31 + 0x20]
	0x03E30C5C LDP X22, X21, [X31 + 0x10]
	0x03E30C60 LDP X30, X23, [X31], #0x30
	0x03E30C64 RET
	0x03E30C68 STP D9, D8, [X31 - 0x40]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5B9000
	005 Move W8, [X20+1809]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2C4000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move X0, 0x2EB000
	015 Move X0, [X0+3184]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1809], W8
	019 Move X0, X19
	020 Call AspectRatioFitter.get_rectTransform, X0
	021 Compare X0, 0
	022 JumpIfEqual {74}
	023 Move X20, 0x2C4000
	024 Move X20, [X20+1432]
	025 Move X1, X31
	026 Call Transform.get_parent, X0
	027 Compare X0, 0
	028 JumpIfEqual {35}
	029 Move X8, 0x2EB000
	030 Move X8, [X8+3184]
	031 Move X9, [X0]
	032 Move X8, [X8]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSEL not yet implemented."
	035 Move X19, X31
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X19
	042 Move X1, X31
	043 Call Object.op_Implicit, X0
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {55}
	048 Compare X19, 0
	049 JumpIfEqual {74}
	050 Move X0, X19
	051 Move X1, X31
	052 Call RectTransform.get_rect, X0
	053 Move V0, V2
	054 Move V1, V3
	055 Move X19, 0x5AA000
	056 Move W8, [X19+1935]
	057 Compare W8, 0
	058 JumpIfNotEqual {64}
	059 Move X0, 0x2CC000
	060 Move X0, [X0+3848]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X19+1935], W8
	064 Move X8, 0x2CC000
	065 Move X8, [X8+3848]
	066 Move X8, [X8]
	067 Move X8, [X8+184]
	068 Move S0, [X8]
	069 Move S1, [X8+4]
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Return X0
	074 Call 0x1C17F20

Method: System.Void SetLayoutHorizontal()

Disassembly:
	0x03E30D60 MOVZ W8, 0x1

ISIL:
	001 Return 

Method: System.Void SetLayoutVertical()

Disassembly:
	0x03E30D64 STRB W8, [X20 + 0xABE]

ISIL:
	001 Return 

Method: System.Void SetDirty()

Disassembly:
	0x03E3005C LDR X0, [X0 + 0x50]

ISIL:
	001 Call AspectRatioFitter.UpdateRect, X0
	002 Return 

Method: System.Boolean IsComponentValidOnObject()

Disassembly:
	0x03E30268 LDR X21, [X21 + 0x448]
	0x03E3026C MOV W20, W0
	0x03E30270 LDR X0, [X21]
	0x03E30274 LDR W8, [X0 + 0xE0]
	0x03E30278 CBNZ W8, 0x3E30284
	0x03E3027C BL 0x1C16DFC
	0x03E30280 LDR X0, [X21]
	0x03E30284 LDR X8, [X0 + 0xB8]
	0x03E30288 LDR X8, [X8]
	0x03E3028C CBZ X8, 0x3E3042C
	0x03E30290 LDR W9, [X8 + 0x18]
	0x03E30294 CMP W20, W9
	0x03E30298 B.GE 0x3E302F4
	0x03E3029C LDR W9, [X0 + 0xE0]
	0x03E302A0 CBNZ W9, 0x3E302B8
	0x03E302A4 BL 0x1C16DFC
	0x03E302A8 LDR X8, [X21]
	0x03E302AC LDR X8, [X8 + 0xB8]
	0x03E302B0 LDR X8, [X8]
	0x03E302B4 CBZ X8, 0x3E3042C
	0x03E302B8 LDR W9, [X8 + 0x18]
	0x03E302BC CMP W20, W9
	0x03E302C0 B.CS 0x3E30430
	0x03E302C4 ADD X8, X8, W20, 0x3, UXTW
	0x03E302C8 LDR X20, [X8 + 0x20]
	0x03E302CC CBZ X20, 0x3E3042C
	0x03E302D0 MOV X0, X20
	0x03E302D4 MOV X1, X31
	0x03E302D8 BL 0x3C0D6D0
	0x03E302DC MOV W21, W0
	0x03E302E0 MOV X0, X20
	0x03E302E4 MOV X1, X31
	0x03E302E8 BL 0x3C0D7B8
	0x03E302EC SCVTF S9, W21
	0x03E302F0 SCVTF S8, W0
	0x03E302F4 LDR W8, [X19 + 0x34]
	0x03E302F8 CMP W8, 0x2
	0x03E302FC B.EQ 0x3E303DC
	0x03E30300 CMP W8, 0x1
	0x03E30304 B.EQ 0x3E303F4
	0x03E30308 FMOV S0, W31
	0x03E3030C CBNZ W8, 0x3E30408
	0x03E30310 ADRP X20, 0x5B1000
	0x03E30314 LDRB W8, [X20 + 0xE38]
	0x03E30318 LDR V10, [X19 + 0x2C]
	0x03E3031C CBNZ W8, 0x3E30334
	0x03E30320 ADRP X0, 0x2C3000
	0x03E30324 LDR X0, [X0 + 0x5A8]
	0x03E30328 BL 0x1C16CF4
	0x03E3032C MOVZ W8, 0x1
	0x03E30330 STRB W8, [X20 + 0xE38]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5B9000
	005 Move W8, [X20+1810]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x329000
	012 Move X0, [X0+2944]
	013 Call 0x1C17CF4
	014 Move X0, 0x2C4000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1810], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Component.get_gameObject, X0
	022 Compare X0, 0
	023 JumpIfEqual {63}
	024 Move X8, 0x329000
	025 Move X8, [X8+2944]
	026 Move X19, 0x2C4000
	027 Move X1, [X8]
	028 Move X19, [X19+1432]
	029 Call 0x21E62E4, X0
	030 Move X8, [X19]
	031 Move X19, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X1, X31
	039 Call Object.op_Implicit, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {57}
	044 Compare X19, 0
	045 JumpIfEqual {63}
	046 Move X0, X19
	047 Move X1, X31
	048 Call Canvas.get_isRootCanvas, X0
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {57}
	053 Move X0, X19
	054 Move X1, X31
	055 Call Canvas.get_renderMode, X0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move W0, 1
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Return X0
	062 Move W0, W31
	063 Call 0x1C17F20

Method: System.Boolean IsAspectModeValid()

Disassembly:
	0x03E30334 ADRP X21, 0x2C3000
	0x03E30338 LDR X21, [X21 + 0x5A8]
	0x03E3033C FDIV S9, S9, S10
	0x03E30340 LDR X0, [X21]
	0x03E30344 LDR W8, [X0 + 0xE0]
	0x03E30348 CBNZ W8, 0x3E30350
	0x03E3034C BL 0x1C16DFC
	0x03E30350 FCVT S0, S9
	0x03E30354 FMOV D1, 2
	0x03E30358 MOV X0, X31

ISIL:
	001 Move W8, [X0+49]
	002 Compare W8, 0
	003 JumpIfNotEqual {9}
	004 Move W8, [X0+32]
	005 Subtract W8, W8, 3
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move W0, W31
	008 Return X0
	009 Move W0, 1
	010 Return X0

Method: System.Boolean DoesParentExists()

Disassembly:
	0x03E30D68 ADRP X8, 0x2C3000
	0x03E30D6C LDR X8, [X8 + 0x5A8]

ISIL:
	001 Move W0, [X0+49]
	002 Return X0

