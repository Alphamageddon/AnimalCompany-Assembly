Type: UnityEngine.UI.LayoutGroup

Method: UnityEngine.RectOffset get_padding()

Disassembly:
	0x03E34768 LDP X30, X25, [X31 + 0x10]
	0x03E3476C ADD X31, X31, 0x50

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_padding(UnityEngine.RectOffset value)

Disassembly:
	0x03E34770 RET
	0x03E34774 BL 0x1C16F20
	0x03E34778 STP X29, X30, [X31 - 0x60]!
	0x03E3477C STP X28, X27, [X31 + 0x10]
	0x03E34780 STP X26, X25, [X31 + 0x20]
	0x03E34784 STP X24, X23, [X31 + 0x30]
	0x03E34788 STP X22, X21, [X31 + 0x40]
	0x03E3478C STP X20, X19, [X31 + 0x50]
	0x03E34790 ADRP X22, 0x5B4000
	0x03E34794 ADRP X25, 0x2BF000
	0x03E34798 LDRB W8, [X22 + 0x74C]
	0x03E3479C LDR X25, [X25 + 0x598]
	0x03E347A0 MOV X19, X2
	0x03E347A4 MOV X20, X1
	0x03E347A8 MOV X21, X0
	0x03E347AC TBNZ X8, 0x0, 0x3E34848
	0x03E347B0 ADRP X0, 0x2E7000
	0x03E347B4 LDR X0, [X0 + 0xA18]
	0x03E347B8 BL 0x1C16CF4
	0x03E347BC ADRP X0, 0x2E7000
	0x03E347C0 LDR X0, [X0 + 0xA20]
	0x03E347C4 BL 0x1C16CF4
	0x03E347C8 ADRP X0, 0x2E7000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B5000
	007 Move X21, 0x338000
	008 Move W8, [X22+1848]
	009 Move X21, [X21+200]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x338000
	017 Move X0, [X0+200]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1848], W8
	021 Move X3, [X21]
	022 Add X1, X20, 32
	023 Move X0, X20
	024 Move X2, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call LayoutGroup.SetProperty, X0, X1, X2
	031 Return 

Method: UnityEngine.TextAnchor get_childAlignment()

Disassembly:
	0x03E347CC LDR X0, [X0 + 0xA28]
	0x03E347D0 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_childAlignment(UnityEngine.TextAnchor value)

Disassembly:
	0x03E347D4 ADRP X0, 0x337000
	0x03E347D8 LDR X0, [X0 + 0x180]
	0x03E347DC BL 0x1C16CF4
	0x03E347E0 ADRP X0, 0x337000
	0x03E347E4 LDR X0, [X0 + 0x188]
	0x03E347E8 BL 0x1C16CF4
	0x03E347EC ADRP X0, 0x2C2000
	0x03E347F0 LDR X0, [X0 + 0x920]
	0x03E347F4 BL 0x1C16CF4
	0x03E347F8 ADRP X0, 0x2E7000
	0x03E347FC LDR X0, [X0 + 0xA40]
	0x03E34800 BL 0x1C16CF4
	0x03E34804 ADRP X0, 0x2E7000
	0x03E34808 LDR X0, [X0 + 0xA48]
	0x03E3480C BL 0x1C16CF4
	0x03E34810 ADRP X0, 0x2BF000
	0x03E34814 LDR X0, [X0 + 0x598]
	0x03E34818 BL 0x1C16CF4
	0x03E3481C ADRP X0, 0x2E6000
	0x03E34820 LDR X0, [X0 + 0xC70]
	0x03E34824 BL 0x1C16CF4
	0x03E34828 ADRP X0, 0x325000
	0x03E3482C LDR X0, [X0 + 0x120]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B5000
	007 Move X21, 0x338000
	008 Move W8, [X22+1849]
	009 Move X21, [X21+208]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x338000
	017 Move X0, [X0+208]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1849], W8
	021 Move X3, [X21]
	022 Add X1, X20, 40
	023 Move X0, X20
	024 Move W2, W19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 Call LayoutGroup.SetProperty, X0, X1, X2
	031 Return 

Method: UnityEngine.RectTransform get_rectTransform()

Disassembly:
	0x03E32474 MOV V1.16B, V9.16B
	0x03E32478 BL 0x3E32EDC
	0x03E3247C LDRB W8, [X20 + 0x6A]
	0x03E32480 ADD W21, W21, W29
	0x03E32484 CMP W21, W28
	0x03E32488 CSET W9, GE
	0x03E3248C CSET W10, LT
	0x03E32490 CMP W8, 0x0
	0x03E32494 CSEL W8, W10, W9, EQ
	0x03E32498 CMP W8, 0x1
	0x03E3249C B.EQ 0x3E32350
	0x03E324A0 B 0x3E32724
	0x03E324A4 BL 0x3C0C8A8
	0x03E324A8 SCVTF S9, W0
	0x03E324AC MOV X0, X20
	0x03E324B0 MOV W1, W19
	0x03E324B4 BL 0x3E33108
	0x03E324B8 FSUB S10, S8, S0
	0x03E324BC FCMP S10, 0x0
	0x03E324C0 FMOV S14, W31
	0x03E324C4 B.LE 0x3E32544
	0x03E324C8 MOV X0, X20
	0x03E324CC MOV W1, W19
	0x03E324D0 BL 0x3E33178
	0x03E324D4 MOV X0, X20
	0x03E324D8 MOV W1, W19
	0x03E324DC FCMP S0, 0x0
	0x03E324E0 B.NE 0x3E32508
	0x03E324E4 BL 0x3E33108
	0x03E324E8 LDR X0, [X20 + 0x20]
	0x03E324EC CBZ X0, 0x3E32754
	0x03E324F0 MOV V9.16B, V0.16B
	0x03E324F4 MOV X1, X31
	0x03E324F8 CBZ W19, 0x3E32528
	0x03E324FC BL 0x3C0CA10
	0x03E32500 MOVZ W1, 0x1
	0x03E32504 B 0x3E32530

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B7000
	006 Move X20, 0x2C2000
	007 Move W8, [X21+1850]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2C4000
	015 Move X0, [X0+1720]
	016 Call 0x1C17CF4
	017 Move X0, 0x2C2000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1850], W8
	022 Move X0, [X20]
	023 Move X20, [X19+48]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x2C4000
	037 Move X8, [X8+1720]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+48], X0
	042 Move X0, [X19+48]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Collections.Generic.List`1<UnityEngine.RectTransform> get_rectChildren()

Disassembly:
	0x03E34830 BL 0x1C16CF4
	0x03E34834 ADRP X0, 0x2BF000

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void CalculateLayoutInputHorizontal()

Disassembly:
	0x03E31E34 STRB W8, [X22 + 0x740]
	0x03E31E38 LDR X0, [X23]
	0x03E31E3C LDR W8, [X0 + 0xE0]
	0x03E31E40 CBNZ W8, 0x3E31E48
	0x03E31E44 BL 0x1C16DFC
	0x03E31E48 MOV X0, X20
	0x03E31E4C MOV X1, X31
	0x03E31E50 MOV X2, X31
	0x03E31E54 BL 0x3C3883C
	0x03E31E58 TBZ X0, 0x0, 0x3E31E70
	0x03E31E5C LDP X20, X19, [X31 + 0x30]
	0x03E31E60 LDP X22, X21, [X31 + 0x20]
	0x03E31E64 LDP X30, X23, [X31 + 0x10]
	0x03E31E68 LDP D9, D8, [X31], #0x40
	0x03E31E6C RET
	0x03E31E70 MOV X0, X21
	0x03E31E74 MOV X1, X20
	0x03E31E78 MOV W2, W19
	0x03E31E7C LDP X20, X19, [X31 + 0x30]
	0x03E31E80 LDP X22, X21, [X31 + 0x20]
	0x03E31E84 LDP X30, X23, [X31 + 0x10]
	0x03E31E88 FMOV S2, 1
	0x03E31E8C MOV V0.16B, V9.16B
	0x03E31E90 MOV V1.16B, V8.16B
	0x03E31E94 LDP D9, D8, [X31], #0x40
	0x03E31E98 B 0x3E32C68
	0x03E31E9C ORR W8, W31, 0x1010101
	0x03E31EA0 STR W8, [X0 + 0x64]
	0x03E31EA4 B 0x3E30B4C
	0x03E31EA8 ORR W8, W31, 0x1010101
	0x03E31EAC STR W8, [X0 + 0x64]
	0x03E31EB0 B 0x3E30B4C
	0x03E31EB4 STP X30, X19, [X31 - 0x10]!
	0x03E31EB8 MOV X19, X0
	0x03E31EBC BL 0x3E30E34
	0x03E31EC0 MOV X0, X19
	0x03E31EC4 MOV W1, W31
	0x03E31EC8 MOV W2, W31
	0x03E31ECC LDP X30, X19, [X31], #0x10
	0x03E31ED0 B 0x3E31ED4
	0x03E31ED4 SUB X31, X31, 0xA0
	0x03E31ED8 STP D11, D10, [X31 + 0x20]
	0x03E31EDC STP D9, D8, [X31 + 0x30]
	0x03E31EE0 STP X29, X30, [X31 + 0x40]
	0x03E31EE4 STP X28, X27, [X31 + 0x50]
	0x03E31EE8 STP X26, X25, [X31 + 0x60]
	0x03E31EEC STP X24, X23, [X31 + 0x70]
	0x03E31EF0 STP X22, X21, [X31 + 0x80]
	0x03E31EF4 STP X20, X19, [X31 + 0x90]
	0x03E31EF8 ADRP X22, 0x5B7000
	0x03E31EFC LDRB W8, [X22 + 0x72D]
	0x03E31F00 MOV W21, W2
	0x03E31F04 MOV W19, W1
	0x03E31F08 MOV X20, X0
	0x03E31F0C TBNZ X8, 0x0, 0x3E31F30
	0x03E31F10 ADRP X0, 0x33A000
	0x03E31F14 LDR X0, [X0 + 0x88]
	0x03E31F18 BL 0x1C16CF4
	0x03E31F1C ADRP X0, 0x33A000
	0x03E31F20 LDR X0, [X0 + 0xB0]
	0x03E31F24 BL 0x1C16CF4
	0x03E31F28 MOVZ W8, 0x1
	0x03E31F2C STRB W8, [X22 + 0x72D]
	0x03E31F30 STR X31, [X31 + 0x18]
	0x03E31F34 STR W31, [X31 + 0x14]
	0x03E31F38 LDR X0, [X20 + 0x20]
	0x03E31F3C CBZ X0, 0x3E320B0
	0x03E31F40 MOV X1, X31
	0x03E31F44 CBZ W19, 0x3E31F50
	0x03E31F48 BL 0x3C0CA10
	0x03E31F4C B 0x3E31F54
	0x03E31F50 BL 0x3C0C9D4
	0x03E31F54 MOV W8, W0
	0x03E31F58 CMP W19, 0x0
	0x03E31F5C MOVZ W9, 0x66
	0x03E31F60 MOVZ W10, 0x68
	0x03E31F64 LDR X0, [X20 + 0x58]
	0x03E31F68 CINC X11, X9, NE
	0x03E31F6C CINC X9, X10, NE
	0x03E31F70 MOVZ W10, 0x64
	0x03E31F74 CINC X10, X10, NE
	0x03E31F78 CMP W19, 0x1
	0x03E31F7C CSET W12, EQ
	0x03E31F80 CBZ X0, 0x3E320B0
	0x03E31F84 LDR W26, [X0 + 0x18]
	0x03E31F88 SCVTF S10, W8
	0x03E31F8C EOR W25, W12, W21, 0x0
	0x03E31F90 CMP W26, 0x1
	0x03E31F94 B.LT 0x3E320C0
	0x03E31F98 LDRB W27, [X20, X11, LSL]
	0x03E31F9C LDRB W28, [X20, X9, LSL]
	0x03E31FA0 LDRB W29, [X20, X10, LSL]
	0x03E31FA4 MOV W21, W31
	0x03E31FA8 FMOV S8, W31
	0x03E31FAC MOV V11.16B, V10.16B
	0x03E31FB0 MOV V9.16B, V10.16B
	0x03E31FB4 ADRP X8, 0x33A000
	0x03E31FB8 LDR X8, [X8 + 0xB0]
	0x03E31FBC CMP W29, 0x0
	0x03E31FC0 CSET W23, NE
	0x03E31FC4 CMP W27, 0x0
	0x03E31FC8 LDR X2, [X8]
	0x03E31FCC MOV W1, W21
	0x03E31FD0 CSET W24, NE
	0x03E31FD4 BL 0x301BCCC
	0x03E31FD8 ADD X5, X31, 0x1C
	0x03E31FDC ADD X6, X31, 0x18
	0x03E31FE0 ADD X7, X31, 0x14
	0x03E31FE4 MOV X1, X0
	0x03E31FE8 MOV W2, W19
	0x03E31FEC MOV W3, W24
	0x03E31FF0 MOV W4, W23
	0x03E31FF4 MOV X22, X0
	0x03E31FF8 BL 0x3E32B08
	0x03E31FFC CBZ W28, 0x3E3202C
	0x03E32000 CBZ X22, 0x3E320B0
	0x03E32004 MOV X0, X22
	0x03E32008 MOV X1, X31
	0x03E3200C BL 0x3C3FBAC
	0x03E32010 CBZ W19, 0x3E32058
	0x03E32014 CMP W19, 0x2
	0x03E32018 B.EQ 0x3E32054
	0x03E3201C CMP W19, 0x1
	0x03E32020 B.NE 0x3E3212C
	0x03E32024 MOV V0.16B, V1.16B
	0x03E32028 B 0x3E32058
	0x03E3202C LDR V1, [X31 + 0x1C]
	0x03E32030 TBNZ X25, 0x0, 0x3E32078
	0x03E32034 LDR V0, [X20 + 0x60]
	0x03E32038 LDP S3, S2, [X31 + 0x14]
	0x03E3203C FADD S1, S1, S0
	0x03E32040 FADD S0, S0, S2
	0x03E32044 FADD S9, S9, S1
	0x03E32048 FADD S11, S11, S0
	0x03E3204C FADD S8, S8, S3
	0x03E32050 B 0x3E3209C
	0x03E32054 MOV V0.16B, V2.16B
	0x03E32058 LDP S2, S1, [X31 + 0x18]
	0x03E3205C LDR V3, [X31 + 0x14]
	0x03E32060 FMUL S1, S0, S1
	0x03E32064 FMUL S2, S0, S2
	0x03E32068 FMUL S0, S0, S3
	0x03E3206C STP S2, S1, [X31 + 0x18]
	0x03E32070 STR S0, [X31 + 0x14]
	0x03E32074 TBZ X25, 0x0, 0x3E32034
	0x03E32078 FADD S0, S1, S10
	0x03E3207C LDP S2, S1, [X31 + 0x14]
	0x03E32080 FCMP S0, S9
	0x03E32084 FCSEL S9, S0, S9, GT
	0x03E32088 FADD S0, S1, S10
	0x03E3208C FCMP S0, S11
	0x03E32090 FCSEL S11, S0, S11, GT
	0x03E32094 FCMP S2, S8
	0x03E32098 FCSEL S8, S2, S8, GT
	0x03E3209C ADD W21, W21, 0x1
	0x03E320A0 CMP W26, W21
	0x03E320A4 B.EQ 0x3E320B4
	0x03E320A8 LDR X0, [X20 + 0x58]
	0x03E320AC CBNZ X0, 0x3E31FB4
	0x03E320B0 BL 0x1C16F20
	0x03E320B4 MOV V10.16B, V11.16B
	0x03E320B8 TBZ X25, 0x0, 0x3E320CC
	0x03E320BC B 0x3E320EC
	0x03E320C0 FMOV S8, W31
	0x03E320C4 MOV V9.16B, V10.16B
	0x03E320C8 TBNZ X25, 0x0, 0x3E320EC
	0x03E320CC LDR X8, [X20 + 0x58]
	0x03E320D0 CBZ X8, 0x3E320B0
	0x03E320D4 LDR W8, [X8 + 0x18]
	0x03E320D8 CMP W8, 0x1
	0x03E320DC B.LT 0x3E320EC
	0x03E320E0 LDR V0, [X20 + 0x60]
	0x03E320E4 FSUB S9, S9, S0
	0x03E320E8 FSUB S10, S10, S0
	0x03E320EC FCMP S9, S10
	0x03E320F0 FCSEL S1, S9, S10, GT
	0x03E320F4 MOV X0, X20
	0x03E320F8 MOV V0.16B, V9.16B
	0x03E320FC MOV V2.16B, V8.16B
	0x03E32100 MOV W1, W19
	0x03E32104 LDP X20, X19, [X31 + 0x90]
	0x03E32108 LDP X22, X21, [X31 + 0x80]
	0x03E3210C LDP X24, X23, [X31 + 0x70]
	0x03E32110 LDP X26, X25, [X31 + 0x60]
	0x03E32114 LDP X28, X27, [X31 + 0x50]
	0x03E32118 LDP X29, X30, [X31 + 0x40]
	0x03E3211C LDP D9, D8, [X31 + 0x30]
	0x03E32120 LDP D11, D10, [X31 + 0x20]
	0x03E32124 ADD X31, X31, 0xA0
	0x03E32128 B 0x3E311EC
	0x03E3212C ADRP X0, 0x2CB000
	0x03E32130 LDR X0, [X0 + 0xF78]
	0x03E32134 BL 0x1C16D08
	0x03E32138 BL 0x1C16F10
	0x03E3213C MOV X19, X0
	0x03E32140 ADRP X0, 0x31C000
	0x03E32144 LDR X0, [X0 + 0x6F8]
	0x03E32148 BL 0x1C16D08
	0x03E3214C MOV X1, X0
	0x03E32150 MOV X0, X19
	0x03E32154 MOV X2, X31
	0x03E32158 BL 0x3379B6C
	0x03E3215C ADRP X0, 0x31C000
	0x03E32160 LDR X0, [X0 + 0x700]
	0x03E32164 BL 0x1C16D08
	0x03E32168 MOV X1, X0
	0x03E3216C MOV X0, X19
	0x03E32170 BL 0x1C16DEC
	0x03E32174 MOVZ W1, 0x1
	0x03E32178 MOV W2, W31
	0x03E3217C B 0x3E31ED4
	0x03E32180 MOV W1, W31
	0x03E32184 MOV W2, W31
	0x03E32188 B 0x3E3218C
	0x03E3218C SUB X31, X31, 0xC0
	0x03E32190 STR D14, [X31 + 0x20]
	0x03E32194 STP D13, D12, [X31 + 0x30]
	0x03E32198 STP D11, D10, [X31 + 0x40]
	0x03E3219C STP D9, D8, [X31 + 0x50]
	0x03E321A0 STP X29, X30, [X31 + 0x60]
	0x03E321A4 STP X28, X27, [X31 + 0x70]
	0x03E321A8 STP X26, X25, [X31 + 0x80]
	0x03E321AC STP X24, X23, [X31 + 0x90]
	0x03E321B0 STP X22, X21, [X31 + 0xA0]
	0x03E321B4 STP X20, X19, [X31 + 0xB0]
	0x03E321B8 ADRP X22, 0x5B6000
	0x03E321BC LDRB W8, [X22 + 0x72E]
	0x03E321C0 MOV W21, W2
	0x03E321C4 MOV W19, W1
	0x03E321C8 MOV X20, X0
	0x03E321CC TBNZ X8, 0x0, 0x3E321F0
	0x03E321D0 ADRP X0, 0x339000
	0x03E321D4 LDR X0, [X0 + 0x88]
	0x03E321D8 BL 0x1C16CF4
	0x03E321DC ADRP X0, 0x339000
	0x03E321E0 LDR X0, [X0 + 0xB0]
	0x03E321E4 BL 0x1C16CF4
	0x03E321E8 MOVZ W8, 0x1

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x5B8000
	014 Move W8, [X20+1851]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {58}
	020 Move X0, 0x2EB000
	021 Move X0, [X0+2584]
	022 Call 0x1C17CF4
	023 Move X0, 0x2EB000
	024 Move X0, [X0+2592]
	025 Call 0x1C17CF4
	026 Move X0, 0x2EB000
	027 Move X0, [X0+2600]
	028 Call 0x1C17CF4
	029 Move X0, 0x33B000
	030 Move X0, [X0+144]
	031 Call 0x1C17CF4
	032 Move X0, 0x33B000
	033 Move X0, [X0+152]
	034 Call 0x1C17CF4
	035 Move X0, 0x33B000
	036 Move X0, [X0+160]
	037 Call 0x1C17CF4
	038 Move X0, 0x33B000
	039 Move X0, [X0+168]
	040 Call 0x1C17CF4
	041 Move X0, 0x2EB000
	042 Move X0, [X0+2624]
	043 Call 0x1C17CF4
	044 Move X0, 0x2EB000
	045 Move X0, [X0+2632]
	046 Call 0x1C17CF4
	047 Move X0, 0x2C3000
	048 Move X0, [X0+1432]
	049 Call 0x1C17CF4
	050 Move X0, 0x2EA000
	051 Move X0, [X0+3184]
	052 Call 0x1C17CF4
	053 Move X0, 0x2C3000
	054 Move X0, [X0+1728]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+1851], W8
	058 Move X8, [X19+88]
	059 Compare X8, 0
	060 JumpIfEqual {240}
	061 Move W2, [X8+24]
	062 Move W9, [X8+28]
	063 Move X20, 0x2EB000
	064 Move X20, [X20+2600]
	065 Add W9, W9, 1
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move [X8+24], W31
	068 Move [X8+28], W9
	069 Move X0, [X8+16]
	070 Move W1, W31
	071 Move X3, X31
	072 Call Array.Clear, X0, X1, X2
	073 Move X0, [X20]
	074 Move X20, 0x2EB000
	075 Move W8, [X0+224]
	076 Move X20, [X20+2584]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, [X20]
	081 Call CollectionPool`2<Object, Object>.Get
	082 Move X20, X0
	083 Move X0, X19
	084 Call LayoutGroup.get_rectTransform, X0
	085 Compare X0, 0
	086 JumpIfEqual {240}
	087 Move X29, 0x2C3000
	088 Move X28, 0x2EB000
	089 Move X27, 0x33B000
	090 Move X29, [X29+1432]
	091 Move X28, [X28+2632]
	092 Move X27, [X27+152]
	093 Move W21, W31
	094 Move X1, X31
	095 Call Transform.get_childCount, X0
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X0, X19
	098 Call LayoutGroup.get_rectTransform, X0
	099 Compare X0, 0
	100 JumpIfEqual {240}
	101 Move W1, W21
	102 Move X2, X31
	103 Call Transform.GetChild, X0, X1
	104 Compare X0, 0
	105 JumpIfEqual {112}
	106 Move X8, 0x2EA000
	107 Move X8, [X8+3184]
	108 Move X9, [X0]
	109 Move X8, [X8]
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction CSEL not yet implemented."
	112 Move X22, X31
	113 Move X0, [X29]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X0, X22
	119 Move X1, X31
	120 Move X2, X31
	121 Call Object.op_Equality, X0, X1
	122 Move TEMP, X0
	123 And TEMP, TEMP, 1
	124 Compare TEMP, 1
	125 JumpIfEqual {235}
	126 Compare X22, 0
	127 JumpIfEqual {240}
	128 Move X0, X22
	129 Move X1, X31
	130 Call Component.get_gameObject, X0
	131 Compare X0, 0
	132 JumpIfEqual {240}
	133 Move X1, X31
	134 Call GameObject.get_activeInHierarchy, X0
	135 Move TEMP, X0
	136 And TEMP, TEMP, 1
	137 Compare TEMP, 1
	138 JumpIfNotEqual {235}
	139 Move X8, 0x2C2000
	140 Move X8, [X8+1728]
	141 Move X9, 0x33A000
	142 Move X0, [X8]
	143 Move W8, [X0+224]
	144 Move X9, [X9+144]
	145 Move X23, [X9]
	146 Compare W8, 0
	147 JumpIfNotEqual {149}
	148 Call 0x1C17DFC
	149 Move X0, X23
	150 Move X1, X31
	151 Call Type.GetTypeFromHandle, X0
	152 Move X1, X0
	153 Move X0, X22
	154 Move X2, X20
	155 Move X3, X31
	156 Call Component.GetComponents, X0, X1, X2
	157 Compare X20, 0
	158 JumpIfEqual {240}
	159 Move W8, [X20+24]
	160 Compare W8, 0
	161 JumpIfEqual {211}
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move W23, W31
	164 Move X2, [X28]
	165 Move X0, X20
	166 Move W1, W23
	167 Call List`1<Object>.get_Item, X0, X1
	168 Compare X0, 0
	169 JumpIfEqual {240}
	170 Move X24, [X27]
	171 Move X26, X0
	172 Move X1, X24
	173 Call 0x1C17E00
	174 Compare X0, 0
	175 JumpIfEqual {269}
	176 Move X25, [X27]
	177 Move X0, X26
	178 Move X1, X25
	179 Call 0x1C17E00
	180 Compare X0, 0
	181 JumpIfEqual {272}
	182 Move X8, [X0]
	183 Move X24, X0
	184 NotImplemented "Instruction LDRH not yet implemented."
	185 Compare X9, 0
	186 JumpIfEqual {193}
	187 Move X10, [X8+176]
	188 Add X10, X10, 8
	189 NotImplemented "Instruction LDUR not yet implemented."
	190 NotImplemented "Instruction CMP not yet implemented."
	191 Subtract X9, X9, 1
	192 Add X10, X10, 16
	193 Move X0, X24
	194 Move X1, X25
	195 Move W2, W31
	196 Call 0x1C5D788
	197 NotImplemented "Instruction LDRSW not yet implemented."
	198 Add X8, X8, X9
	199 Add X0, X8, 312
	200 Move X8, [X0]
	201 Move X1, [X0+8]
	202 Move X0, X24
	203 NotImplemented "Instruction BLR not yet implemented."
	204 Move TEMP, X0
	205 And TEMP, TEMP, 1
	206 Compare TEMP, 1
	207 JumpIfNotEqual {211}
	208 Move W8, [X20+24]
	209 Add W23, W23, 1
	210 NotImplemented "Instruction CMP not yet implemented."
	211 Move X0, [X19+88]
	212 Compare X0, 0
	213 JumpIfEqual {240}
	214 Move X9, 0x33A000
	215 Move W10, [X0+28]
	216 Move X8, [X0+16]
	217 Move X9, [X9+160]
	218 Add W10, W10, 1
	219 Move X9, [X9]
	220 Move [X0+28], W10
	221 Compare X8, 0
	222 JumpIfEqual {240}
	223 NotImplemented "Instruction LDRSW not yet implemented."
	224 Move W11, [X8+24]
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Add W9, W10, 1
	227 Add X8, X8, X10
	228 Move [X0+24], W9
	229 Move [X8+32], X22
	230 Move X8, [X9+32]
	231 Move X1, X22
	232 Move X8, [X8+192]
	233 Move X2, [X8+112]
	234 Call List`1<Object>.AddWithResize, X0, X1
	235 Move X0, X19
	236 Add W21, W21, 1
	237 Call LayoutGroup.get_rectTransform, X0
	238 Compare X0, 0
	239 JumpIfNotEqual {94}
	240 Call 0x1C17F20
	241 Move X8, 0x2EA000
	242 Move X8, [X8+2600]
	243 Move X0, [X8]
	244 Move W8, [X0+224]
	245 Compare W8, 0
	246 JumpIfNotEqual {248}
	247 Call 0x1C17DFC
	248 Move X8, 0x2EA000
	249 Move X8, [X8+2592]
	250 Move X0, X20
	251 Move X1, [X8]
	252 Call CollectionPool`2<Object, Object>.Release, X0
	253 Add X0, X19, 56
	254 Move X20, [X31+80]
	255 Move X19, [X31+88]
	256 Move X22, [X31+64]
	257 Move X21, [X31+72]
	258 Move X24, [X31+48]
	259 Move X23, [X31+56]
	260 Move X26, [X31+32]
	261 Move X25, [X31+40]
	262 Move X28, [X31+16]
	263 Move X27, [X31+24]
	264 Move X1, X31
	265 Move X29, [X31+96]
	266 Move X30, [X31+104]
	267 Call DrivenRectTransformTracker.Clear, X0
	268 Return 
	269 Move X0, X26
	270 Move X1, X24
	271 Call 0x1C181E0
	272 Move X0, X26
	273 Move X1, X25
	274 Call 0x1C181E0

Method: System.Void CalculateLayoutInputVertical()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Single get_minWidth()

Disassembly:
	0x03E34838 LDR X0, [X0 + 0x6C0]
	0x03E3483C BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Single get_preferredWidth()

Disassembly:
	0x03E34840 MOVZ W8, 0x1
	0x03E34844 STRB W8, [X22 + 0x74C]

ISIL:
	001 Move V0, [X0+68]
	002 Return V0

Method: System.Single get_flexibleWidth()

Disassembly:
	0x03E34848 LDR X0, [X25]
	0x03E3484C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move V0, [X0+76]
	002 Return V0

Method: System.Single get_minHeight()

Disassembly:
	0x03E34850 CBNZ W8, 0x3E34858
	0x03E34854 BL 0x1C16DFC

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Single get_preferredHeight()

Disassembly:
	0x03E34858 MOV X0, X20
	0x03E3485C MOV X1, X31

ISIL:
	001 Move V0, [X0+72]
	002 Return V0

Method: System.Single get_flexibleHeight()

Disassembly:
	0x03E34860 MOV X2, X31
	0x03E34864 BL 0x3C3883C

ISIL:
	001 Move V0, [X0+80]
	002 Return V0

Method: System.Int32 get_layoutPriority()

Disassembly:
	0x03E34868 TBZ X0, 0x0, 0x3E34888
	0x03E3486C LDP X20, X19, [X31 + 0x50]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Void SetLayoutHorizontal()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void SetLayoutVertical()

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void .ctor()

Disassembly:
	0x03E31B4C LDR W8, [X19 + 0x78]
	0x03E31B50 CBZ W9, 0x3E31B78
	0x03E31B54 CMP W8, 0x1
	0x03E31B58 B.NE 0x3E31B68
	0x03E31B5C LDR W8, [X31 + 0x4]
	0x03E31B60 CMP W24, W8
	0x03E31B64 B.LE 0x3E31B9C
	0x03E31B68 MOV W9, W25
	0x03E31B6C SDIV W8, W20, W25
	0x03E31B70 MSUB W9, W25, W8, W20
	0x03E31B74 B 0x3E31BC4
	0x03E31B78 CMP W8, 0x2
	0x03E31B7C B.NE 0x3E31B8C
	0x03E31B80 LDR W8, [X31 + 0x4]
	0x03E31B84 CMP W24, W8
	0x03E31B88 B.LE 0x3E31BB0
	0x03E31B8C MOV W8, W25
	0x03E31B90 SDIV W9, W20, W25
	0x03E31B94 MSUB W8, W9, W25, W20
	0x03E31B98 B 0x3E31BC4
	0x03E31B9C LDR W8, [X19 + 0x7C]
	0x03E31BA0 ADD W10, W28, W20
	0x03E31BA4 MOV W9, W31
	0x03E31BA8 ADD W8, W10, W8
	0x03E31BAC B 0x3E31BC4
	0x03E31BB0 LDR W10, [X31 + 0x8]
	0x03E31BB4 LDR W9, [X19 + 0x7C]
	0x03E31BB8 MOV W8, W31
	0x03E31BBC SUB W10, W10, W20
	0x03E31BC0 SUB W9, W9, W10
	0x03E31BC4 LDR X0, [X19 + 0x58]
	0x03E31BC8 SUB W10, W26, W9
	0x03E31BCC CMP W23, 0x2
	0x03E31BD0 CSEL W21, W10, W9, EQ
	0x03E31BD4 CBZ X0, 0x3E31C98
	0x03E31BD8 LDR W9, [X31 + 0xC]
	0x03E31BDC LDR X2, [X29]
	0x03E31BE0 CMP W22, 0x1
	0x03E31BE4 MOV W1, W20
	0x03E31BE8 SUB W9, W9, W8
	0x03E31BEC CSEL W27, W9, W8, EQ
	0x03E31BF0 BL 0x301BCCC
	0x03E31BF4 LDR V1, [X19 + 0x68]
	0x03E31BF8 LDR V0, [X19 + 0x70]
	0x03E31BFC SCVTF S2, W27
	0x03E31C00 MOV X1, X0
	0x03E31C04 MOV X0, X19
	0x03E31C08 FADD S0, S1, S0
	0x03E31C0C FMUL S0, S0, S2
	0x03E31C10 FADD S0, S8, S0
	0x03E31C14 MOV W2, W31
	0x03E31C18 BL 0x3E31DEC
	0x03E31C1C LDR X0, [X19 + 0x58]
	0x03E31C20 CBZ X0, 0x3E31C98
	0x03E31C24 LDR X2, [X29]
	0x03E31C28 MOV W1, W20
	0x03E31C2C BL 0x301BCCC
	0x03E31C30 LDR V1, [X19 + 0x6C]
	0x03E31C34 LDR V0, [X19 + 0x74]
	0x03E31C38 SCVTF S2, W21
	0x03E31C3C MOV X1, X0
	0x03E31C40 MOVZ W2, 0x1
	0x03E31C44 FADD S0, S1, S0
	0x03E31C48 FMUL S0, S0, S2
	0x03E31C4C FADD S0, S9, S0
	0x03E31C50 MOV X0, X19
	0x03E31C54 BL 0x3E31DEC
	0x03E31C58 ADD W20, W20, 0x1
	0x03E31C5C ADD W8, W28, W20
	0x03E31C60 SUB W24, W24, 0x1
	0x03E31C64 CBNZ W8, 0x3E31B48

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x5B8000
	008 Move X21, 0x2EA000
	009 Move W8, [X20+1852]
	010 Move X21, [X21+1224]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x33B000
	017 Move X0, [X0+120]
	018 Call 0x1C17CF4
	019 Move X0, 0x33B000
	020 Move X0, [X0+128]
	021 Call 0x1C17CF4
	022 Move X0, 0x2EA000
	023 Move X0, [X0+1224]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+1852], W8
	027 Move X0, [X21]
	028 Move X23, 0x33B000
	029 Move X22, 0x33B000
	030 Move X23, [X23+128]
	031 Move X22, [X22+120]
	032 Call 0x1C17F10
	033 Move X1, X31
	034 Move X20, X0
	035 Call RectOffset..ctor, X0
	036 Move [X19+32], X20
	037 Move X20, 0x5A9000
	038 Move W8, [X20+1935]
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x2CB000
	042 Move X0, [X0+3848]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+1935], W8
	046 Move X8, 0x2CB000
	047 Move X8, [X8+3848]
	048 Move X8, [X8]
	049 Move X9, [X8+184]
	050 Move V0, [X9]
	051 Move [X19+60], D0
	052 Move X9, [X8+184]
	053 Move V0, [X9]
	054 Move [X19+68], D0
	055 Move X8, [X8+184]
	056 Move V0, [X8]
	057 Move [X19+76], D0
	058 Move X0, [X23]
	059 Call 0x1C17F10
	060 Move X1, [X22]
	061 Move X20, X0
	062 Call List`1<Object>..ctor, X0
	063 Move X0, X19
	064 Move X1, X31
	065 Move [X19+88], X20
	066 Call UIBehaviour..ctor, X0
	067 Move X8, [X19+32]
	068 Compare X8, 0
	069 JumpIfNotEqual {76}
	070 Move X0, [X21]
	071 Call 0x1C17F10
	072 Move X1, X31
	073 Move X20, X0
	074 Call RectOffset..ctor, X0
	075 Move [X19+32], X20
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X22, [X31+16]
	079 Move X21, [X31+24]
	080 Move X30, [X31+48]
	081 Move X23, [X31+56]
	082 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03E34870 LDP X22, X21, [X31 + 0x40]
	0x03E34874 LDP X24, X23, [X31 + 0x30]
	0x03E34878 LDP X26, X25, [X31 + 0x20]
	0x03E3487C LDP X28, X27, [X31 + 0x10]
	0x03E34880 LDP X29, X30, [X31], #0x60
	0x03E34884 RET
	0x03E34888 ADRP X26, 0x2E7000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call UIBehaviour.OnEnable, X0
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]

Method: System.Void OnDisable()

Disassembly:
	0x03E34960 LDR X2, [X27]
	0x03E34964 MOV X0, X22
	0x03E34968 MOV W1, W23
	0x03E3496C BL 0x301BCCC
	0x03E34970 CBZ X19, 0x3E34B3C
	0x03E34974 MOV X1, X0
	0x03E34978 LDR X8, [X19 + 0x18]
	0x03E3497C LDR X0, [X19 + 0x40]
	0x03E34980 LDR X2, [X19 + 0x28]
	0x03E34984 BLR X8
	0x03E34988 LDR W8, [X22 + 0x18]
	0x03E3498C ADD W23, W23, 0x1
	0x03E34990 CMP W23, W8
	0x03E34994 B.LT 0x3E34944
	0x03E34998 CMP W8, 0x1
	0x03E3499C B.LT 0x3E34A90
	0x03E349A0 ADRP X29, 0x325000
	0x03E349A4 LDR X29, [X29 + 0x120]
	0x03E349A8 MOV W23, W31
	0x03E349AC LDR X2, [X27]
	0x03E349B0 MOV X0, X22
	0x03E349B4 MOV W1, W23
	0x03E349B8 BL 0x301BCCC
	0x03E349BC LDR X1, [X28]
	0x03E349C0 BL 0x1C16E00
	0x03E349C4 CBNZ X0, 0x3E34A80
	0x03E349C8 LDR X2, [X27]
	0x03E349CC MOV X0, X22
	0x03E349D0 MOV W1, W23
	0x03E349D4 BL 0x301BCCC
	0x03E349D8 LDR X8, [X25]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B5000
	006 Move X20, 0x2C3000
	007 Move W8, [X21+1853]
	008 Move X20, [X20+2336]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2C3000
	015 Move X0, [X0+2336]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1853], W8
	019 Add X0, X19, 56
	020 Move X1, X31
	021 Call DrivenRectTransformTracker.Clear, X0
	022 Move X0, X19
	023 Call LayoutGroup.get_rectTransform, X0
	024 Move X8, [X20]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X1, X31
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 Call UIBehaviour.OnDisable, X0
	040 Return 

Method: System.Void OnDidApplyAnimationProperties()

Disassembly:
	0x03E349DC MOV X24, X0

ISIL:
	001 Call LayoutGroup.SetDirty, X0
	002 Return 

Method: System.Single GetTotalMinSize(System.Int32 axis)

Disassembly:
	0x03E341E8 LDP X20, X19, [X31 + 0x10]
	0x03E341EC LDR X2, [X8]
	0x03E341F0 LDP X30, X21, [X31], #0x20
	0x03E341F4 B 0x24933E0
	0x03E341F8 BL 0x1C16F20
	0x03E341FC STP X30, X23, [X31 - 0x30]!
	0x03E34200 STP X22, X21, [X31 + 0x10]
	0x03E34204 STP X20, X19, [X31 + 0x20]
	0x03E34208 ADRP X21, 0x5B4000
	0x03E3420C LDRB W8, [X21 + 0x74B]
	0x03E34210 MOV W20, W1
	0x03E34214 MOV X19, X0
	0x03E34218 TBNZ X8, 0x0, 0x3E3426C
	0x03E3421C ADRP X0, 0x337000
	0x03E34220 LDR X0, [X0 + 0x150]
	0x03E34224 BL 0x1C16CF4
	0x03E34228 ADRP X0, 0x337000
	0x03E3422C LDR X0, [X0 + 0x158]
	0x03E34230 BL 0x1C16CF4
	0x03E34234 ADRP X0, 0x337000
	0x03E34238 LDR X0, [X0 + 0x160]
	0x03E3423C BL 0x1C16CF4
	0x03E34240 ADRP X0, 0x337000
	0x03E34244 LDR X0, [X0 + 0x168]
	0x03E34248 BL 0x1C16CF4
	0x03E3424C ADRP X0, 0x337000
	0x03E34250 LDR X0, [X0 + 0xE8]
	0x03E34254 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Compare W1, 0
	005 JumpIfNotEqual {12}
	006 Add X8, X0, 60
	007 Add X8, X0, 64
	008 Move V0, [X8]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return V0
	012 Move X0, 0x2CA000
	013 Move X0, [X0+3960]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x312000
	018 Move X0, [X0+4088]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call IndexOutOfRangeException..ctor, X0, X1
	024 Move X0, 0x313000
	025 Move X0, [X0]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Single GetTotalPreferredSize(System.Int32 axis)

Disassembly:
	0x03E34108 LDP X20, X19, [X31 + 0x20]
	0x03E3410C LDR X2, [X8]
	0x03E34110 LDP X22, X21, [X31 + 0x10]
	0x03E34114 LDR X30, [X31], #0x30
	0x03E34118 B 0x301D8DC
	0x03E3411C BL 0x1C16F20
	0x03E34120 STP X30, X21, [X31 - 0x20]!
	0x03E34124 STP X20, X19, [X31 + 0x10]
	0x03E34128 ADRP X20, 0x5B4000
	0x03E3412C ADRP X21, 0x2C2000
	0x03E34130 LDRB W8, [X20 + 0x74A]
	0x03E34134 LDR X21, [X21 + 0x920]
	0x03E34138 MOV X19, X0
	0x03E3413C TBNZ X8, 0x0, 0x3E3416C
	0x03E34140 ADRP X0, 0x2C2000
	0x03E34144 LDR X0, [X0 + 0x920]
	0x03E34148 BL 0x1C16CF4
	0x03E3414C ADRP X0, 0x337000
	0x03E34150 LDR X0, [X0 + 0x140]
	0x03E34154 BL 0x1C16CF4
	0x03E34158 ADRP X0, 0x337000
	0x03E3415C LDR X0, [X0 + 0x148]
	0x03E34160 BL 0x1C16CF4
	0x03E34164 MOVZ W8, 0x1
	0x03E34168 STRB W8, [X20 + 0x74A]
	0x03E3416C LDR X0, [X21]
	0x03E34170 LDR W8, [X0 + 0xE0]
	0x03E34174 CBNZ W8, 0x3E34180

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Compare W1, 0
	005 JumpIfNotEqual {12}
	006 Add X8, X0, 68
	007 Add X8, X0, 72
	008 Move V0, [X8]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return V0
	012 Move X0, 0x2CA000
	013 Move X0, [X0+3960]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x312000
	018 Move X0, [X0+4088]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call IndexOutOfRangeException..ctor, X0, X1
	024 Move X0, 0x313000
	025 Move X0, [X0]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Single GetTotalFlexibleSize(System.Int32 axis)

Disassembly:
	0x03E34178 BL 0x1C16DFC
	0x03E3417C LDR X0, [X21]
	0x03E34180 LDR X8, [X0 + 0xB8]
	0x03E34184 LDR X0, [X8]
	0x03E34188 CBZ X0, 0x3E341F8
	0x03E3418C ADRP X8, 0x337000
	0x03E34190 LDR X8, [X8 + 0x140]
	0x03E34194 LDR X1, [X8]
	0x03E34198 BL 0x24932C0
	0x03E3419C CBZ X0, 0x3E341F8
	0x03E341A0 MOV X20, X0
	0x03E341A4 STR X19, [X0 + 0x10]
	0x03E341A8 CBZ X19, 0x3E341F8
	0x03E341AC LDR X8, [X19]
	0x03E341B0 MOV X0, X19
	0x03E341B4 LDP X9, X1, [X8 + 0x158]
	0x03E341B8 BLR X9
	0x03E341BC STR W0, [X20 + 0x18]
	0x03E341C0 MOVZ W1, 0x1
	0x03E341C4 MOV X0, X20
	0x03E341C8 BL 0x3E341FC
	0x03E341CC LDR X8, [X21]
	0x03E341D0 LDR X8, [X8 + 0xB8]
	0x03E341D4 LDR X0, [X8]
	0x03E341D8 CBZ X0, 0x3E341F8
	0x03E341DC ADRP X8, 0x337000
	0x03E341E0 LDR X8, [X8 + 0x148]
	0x03E341E4 MOV X1, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Compare W1, 0
	005 JumpIfNotEqual {12}
	006 Add X8, X0, 76
	007 Add X8, X0, 80
	008 Move V0, [X8]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Return V0
	012 Move X0, 0x2CA000
	013 Move X0, [X0+3960]
	014 Call 0x1C17D08
	015 Call 0x1C17F10
	016 Move X19, X0
	017 Move X0, 0x312000
	018 Move X0, [X0+4088]
	019 Call 0x1C17D08
	020 Move X1, X0
	021 Move X0, X19
	022 Move X2, X31
	023 Call IndexOutOfRangeException..ctor, X0, X1
	024 Move X0, 0x313000
	025 Move X0, [X0]
	026 Call 0x1C17D08
	027 Move X1, X0
	028 Move X0, X19
	029 Call 0x1C17DEC

Method: System.Single GetStartOffset(System.Int32 axis, System.Single requiredSpaceWithoutPadding)

Disassembly:
	0x03E32CA4 MOV X21, X0
	0x03E32CA8 TBNZ X8, 0x0, 0x3E32CC0
	0x03E32CAC ADRP X0, 0x2C1000
	0x03E32CB0 LDR X0, [X0 + 0x598]
	0x03E32CB4 BL 0x1C16CF4
	0x03E32CB8 MOVZ W8, 0x1
	0x03E32CBC STRB W8, [X22 + 0x741]
	0x03E32CC0 LDR X0, [X23]
	0x03E32CC4 LDR W8, [X0 + 0xE0]
	0x03E32CC8 CBNZ W8, 0x3E32CD0
	0x03E32CCC BL 0x1C16DFC
	0x03E32CD0 MOV X0, X19
	0x03E32CD4 MOV X1, X31
	0x03E32CD8 MOV X2, X31
	0x03E32CDC BL 0x3C3883C
	0x03E32CE0 TBZ X0, 0x0, 0x3E32D00
	0x03E32CE4 LDP X20, X19, [X31 + 0x50]
	0x03E32CE8 LDP X22, X21, [X31 + 0x40]
	0x03E32CEC LDP X30, X23, [X31 + 0x30]
	0x03E32CF0 LDP D9, D8, [X31 + 0x20]
	0x03E32CF4 LDP D11, D10, [X31 + 0x10]
	0x03E32CF8 LDR V12, [X31], #0x60
	0x03E32CFC RET
	0x03E32D00 CMP W20, 0x0
	0x03E32D04 MOVZ W8, 0x2F04
	0x03E32D08 MOVZ W9, 0x1F02
	0x03E32D0C ADD X0, X21, 0x38
	0x03E32D10 CSEL W3, W9, W8, EQ
	0x03E32D14 MOV X1, X21
	0x03E32D18 MOV X2, X19
	0x03E32D1C MOV X4, X31
	0x03E32D20 BL 0x3C3E3A4
	0x03E32D24 ADRP X21, 0x5A9000
	0x03E32D28 LDRB W8, [X21 + 0x7F6]
	0x03E32D2C CBNZ W8, 0x3E32D44
	0x03E32D30 ADRP X0, 0x2C9000
	0x03E32D34 LDR X0, [X0 + 0xF08]
	0x03E32D38 BL 0x1C16CF4
	0x03E32D3C MOVZ W8, 0x1
	0x03E32D40 STRB W8, [X21 + 0x7F6]
	0x03E32D44 CBZ X19, 0x3E32E54
	0x03E32D48 ADRP X22, 0x2C9000
	0x03E32D4C LDR X22, [X22 + 0xF08]
	0x03E32D50 MOV X0, X19
	0x03E32D54 MOV X1, X31
	0x03E32D58 LDR X8, [X22]
	0x03E32D5C LDR X8, [X8 + 0xB8]
	0x03E32D60 LDP S0, S1, [X8 + 0x10]
	0x03E32D64 BL 0x3C3E648
	0x03E32D68 LDRB W8, [X21 + 0x7F6]
	0x03E32D6C CBNZ W8, 0x3E32D84
	0x03E32D70 ADRP X0, 0x2C9000
	0x03E32D74 LDR X0, [X0 + 0xF08]
	0x03E32D78 BL 0x1C16CF4
	0x03E32D7C MOVZ W8, 0x1
	0x03E32D80 STRB W8, [X21 + 0x7F6]
	0x03E32D84 LDR X8, [X22]
	0x03E32D88 MOV X0, X19
	0x03E32D8C MOV X1, X31
	0x03E32D90 LDR X8, [X8 + 0xB8]
	0x03E32D94 LDP S0, S1, [X8 + 0x10]
	0x03E32D98 BL 0x3C3E764
	0x03E32D9C MOV X0, X19
	0x03E32DA0 MOV X1, X31
	0x03E32DA4 BL 0x3C3E90C
	0x03E32DA8 CBZ W20, 0x3E32DBC
	0x03E32DAC CMP W20, 0x1
	0x03E32DB0 B.NE 0x3E32E58
	0x03E32DB4 MOV V1.16B, V9.16B
	0x03E32DB8 B 0x3E32DC0
	0x03E32DBC MOV V0.16B, V9.16B
	0x03E32DC0 MOV X0, X19
	0x03E32DC4 MOV X1, X31
	0x03E32DC8 BL 0x3C3E99C
	0x03E32DCC MOV X0, X19
	0x03E32DD0 MOV X1, X31
	0x03E32DD4 BL 0x3C3E7F0
	0x03E32DD8 MOV X0, X19
	0x03E32DDC MOV X1, X31
	0x03E32DE0 MOV V11.16B, V0.16B
	0x03E32DE4 MOV V12.16B, V1.16B
	0x03E32DE8 BL 0x3C3EA28

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, X0
	008 Move X0, [X0+32]
	009 Compare X0, 0
	010 JumpIfEqual {81}
	011 Move V8, V0
	012 Move W21, W1
	013 Compare W1, 0
	014 JumpIfEqual {17}
	015 Move X1, X31
	016 Call RectOffset.get_vertical, X0
	017 Move X1, X31
	018 Call RectOffset.get_horizontal, X0
	019 Move W19, W0
	020 Move X0, X20
	021 Call LayoutGroup.get_rectTransform, X0
	022 Compare X0, 0
	023 JumpIfEqual {81}
	024 Move X1, X31
	025 Call RectTransform.get_rect, X0
	026 Compare W21, 0
	027 JumpIfEqual {30}
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move V9, V3
	030 Move V9, V2
	031 Move W8, [X20+40]
	032 Move X0, [X20+32]
	033 Compare W21, 0
	034 JumpIfEqual {49}
	035 Compare X0, 0
	036 JumpIfEqual {81}
	037 Move W9, 0x5556
	038 NotImplemented "Instruction MOVK not yet implemented."
	039 NotImplemented "Instruction SMADDL not yet implemented."
	040 Move X9, X8
	041 ShiftRight X9, 63
	042 And X9, X9, 0x7FFFFFFF
	043 Move X8, X8
	044 ShiftRight X8, 32
	045 And X8, X8, 0x7FFFFFFF
	046 Move X1, X31
	047 Add W20, W8, W9
	048 Call RectOffset.get_top, X0
	049 Compare X0, 0
	050 JumpIfEqual {81}
	051 Move W9, 0x5556
	052 NotImplemented "Instruction MOVK not yet implemented."
	053 NotImplemented "Instruction SMADDL not yet implemented."
	054 Move X10, X9
	055 ShiftRight X10, 63
	056 And X10, X10, 0x7FFFFFFF
	057 Move X9, X9
	058 ShiftRight X9, 32
	059 And X9, X9, 0x7FFFFFFF
	060 Add W9, W9, W10
	061 Add W9, W9, W9
	062 Move X1, X31
	063 Subtract W20, W8, W9
	064 Call RectOffset.get_left, X0
	065 NotImplemented "Instruction SCVTF not yet implemented."
	066 Move S1, 0.5
	067 NotImplemented "Instruction SCVTF not yet implemented."
	068 Multiply S0, S0, S1
	069 Add S1, S2, S8
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X30, [X31+16]
	073 Move X21, [X31+24]
	074 Subtract S1, S9, S1
	075 NotImplemented "Instruction SCVTF not yet implemented."
	076 Multiply S0, S1, S0
	077 Add S0, S0, S2
	078 Move D9, [X31+48]
	079 Move D8, [X31+56]
	080 Return V0
	081 Call 0x1C17F20
	082 Move X0, 0x2CC000
	083 Move X0, [X0+3960]
	084 Call 0x1C17D08
	085 Call 0x1C17F10
	086 Move X19, X0
	087 Move X0, 0x314000
	088 Move X0, [X0+4088]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X19
	092 Move X2, X31
	093 Call IndexOutOfRangeException..ctor, X0, X1
	094 Move X0, 0x315000
	095 Move X0, [X0]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Call 0x1C17DEC

Method: System.Single GetAlignmentOnAxis(System.Int32 axis)

Disassembly:
	0x03E33C1C BL 0x1C16CF4
	0x03E33C20 MOVZ W8, 0x1
	0x03E33C24 STRB W8, [X20 + 0x744]
	0x03E33C28 LDR X0, [X21]
	0x03E33C2C BL 0x1C16F10
	0x03E33C30 MOV X1, X31
	0x03E33C34 MOV X20, X0
	0x03E33C38 BL 0x33BDD8C
	0x03E33C3C STR W31, [X20 + 0x10]
	0x03E33C40 STR X19, [X20 + 0x20]
	0x03E33C44 MOV X0, X20
	0x03E33C48 LDP X20, X19, [X31 + 0x10]
	0x03E33C4C LDP X30, X21, [X31], #0x20
	0x03E33C50 RET
	0x03E33C54 STR X30, [X31 - 0x20]!
	0x03E33C58 STP X20, X19, [X31 + 0x10]
	0x03E33C5C MOV W19, W1
	0x03E33C60 MOV X1, X31
	0x03E33C64 MOV X20, X0

ISIL:
	001 Move W8, [X0+40]
	002 Move W9, 0x5556
	003 NotImplemented "Instruction MOVK not yet implemented."
	004 Compare W1, 0
	005 JumpIfEqual {14}
	006 NotImplemented "Instruction SMADDL not yet implemented."
	007 Move X9, X8
	008 ShiftRight X9, 63
	009 And X9, X9, 0x7FFFFFFF
	010 Move X8, X8
	011 ShiftRight X8, 32
	012 And X8, X8, 0x7FFFFFFF
	013 Add W8, W8, W9
	014 NotImplemented "Instruction SMADDL not yet implemented."
	015 Move X10, X9
	016 ShiftRight X10, 63
	017 And X10, X10, 0x7FFFFFFF
	018 Move X9, X9
	019 ShiftRight X9, 32
	020 And X9, X9, 0x7FFFFFFF
	021 Add W9, W9, W10
	022 Add W9, W9, W9
	023 Subtract W8, W8, W9
	024 NotImplemented "Instruction SCVTF not yet implemented."
	025 Move S1, 0.5
	026 Multiply S0, S0, S1
	027 Return V0

Method: System.Void SetLayoutInputForAxis(System.Single totalMin, System.Single totalPreferred, System.Single totalFlexible, System.Int32 axis)

Disassembly:
	0x03E321EC STRB W8, [X22 + 0x72E]
	0x03E321F0 MOV X0, X20
	0x03E321F4 STR X31, [X31 + 0x28]
	0x03E321F8 STP X31, X31, [X31 + 0x10]
	0x03E321FC BL 0x3E31474
	0x03E32200 CBZ X0, 0x3E32754
	0x03E32204 MOV X1, X31
	0x03E32208 BL 0x3C3E51C
	0x03E3220C CBZ W19, 0x3E32220
	0x03E32210 CMP W19, 0x1
	0x03E32214 B.NE 0x3E32794
	0x03E32218 MOV V8.16B, V3.16B
	0x03E3221C B 0x3E32224
	0x03E32220 MOV V8.16B, V2.16B
	0x03E32224 CMP W19, 0x0
	0x03E32228 MOVZ W8, 0x66
	0x03E3222C CINC X8, X8, NE
	0x03E32230 LDRB W25, [X20, X8, LSL]
	0x03E32234 LDR W10, [X20 + 0x28]
	0x03E32238 MOVZ W9, 0x68
	0x03E3223C CINC X8, X9, NE
	0x03E32240 MOVZ W9, 0x64
	0x03E32244 MOVZ W11, 0x5556
	0x03E32248 CINC X9, X9, NE
	0x03E3224C MOVK W11, 0x55550000
	0x03E32250 CBZ W19, 0x3E32268
	0x03E32254 SMADDL X10, X10, X11, X31
	0x03E32258 UBFM X11, X10, 0x3F, 0x3F
	0x03E3225C UBFM X10, X10, 0x20, 0x3F
	0x03E32260 ADD W10, W10, W11
	0x03E32264 B 0x3E32280
	0x03E32268 SMADDL X11, X10, X11, X31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare W1, 0
	004 JumpIfEqual {9}
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Add X8, X0, 80
	007 Move [X0+64], S0
	008 Move [X0+72], S1
	009 Move [X0+60], S0
	010 Move [X0+68], S1
	011 Add X8, X0, 76
	012 Move [X8], S2
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Return 
	016 Move X0, 0x2CC000
	017 Move X0, [X0+3960]
	018 Call 0x1C17D08
	019 Call 0x1C17F10
	020 Move X19, X0
	021 Move X0, 0x314000
	022 Move X0, [X0+4088]
	023 Call 0x1C17D08
	024 Move X1, X0
	025 Move X0, X19
	026 Move X2, X31
	027 Call IndexOutOfRangeException..ctor, X0, X1
	028 Move X0, 0x32E000
	029 Move X0, [X0+680]
	030 Call 0x1C17D08
	031 Move X1, X0
	032 Move X0, X19
	033 Call 0x1C17DEC

Method: System.Void SetChildAlongAxis(UnityEngine.RectTransform rect, System.Int32 axis, System.Single pos)

Disassembly:
	0x03E349E0 LDR W9, [X8 + 0xE0]
	0x03E349E4 CBNZ W9, 0x3E349F0
	0x03E349E8 MOV X0, X8
	0x03E349EC BL 0x1C16DFC
	0x03E349F0 MOV X0, X24
	0x03E349F4 MOV X1, X31
	0x03E349F8 BL 0x3C38948
	0x03E349FC TBZ X0, 0x0, 0x3E34A58
	0x03E34A00 CBZ X24, 0x3E34A58
	0x03E34A04 LDR X9, [X24]
	0x03E34A08 LDR X8, [X29]
	0x03E34A0C LDRB W11, [X9 + 0x130]
	0x03E34A10 LDRB W10, [X8 + 0x130]
	0x03E34A14 CMP W11, W10
	0x03E34A18 B.CC 0x3E34A58
	0x03E34A1C LDR X9, [X9 + 0xC8]
	0x03E34A20 ADD X9, X9, X10, 0x3, LSL
	0x03E34A24 LDUR X9, [X9 - 0x8]
	0x03E34A28 CMP X9, X8
	0x03E34A2C B.NE 0x3E34A58
	0x03E34A30 LDR X0, [X25]
	0x03E34A34 LDR X24, [X24 + 0x20]
	0x03E34A38 LDR W8, [X0 + 0xE0]
	0x03E34A3C CBNZ W8, 0x3E34A44
	0x03E34A40 BL 0x1C16DFC
	0x03E34A44 MOV X0, X24
	0x03E34A48 MOV X1, X20
	0x03E34A4C MOV X2, X31
	0x03E34A50 BL 0x3C354F8
	0x03E34A54 TBZ X0, 0x0, 0x3E34A80
	0x03E34A58 LDR X2, [X27]
	0x03E34A5C MOV X0, X22
	0x03E34A60 MOV W1, W23
	0x03E34A64 BL 0x301BCCC
	0x03E34A68 CBZ X19, 0x3E34B3C
	0x03E34A6C MOV X1, X0
	0x03E34A70 LDR X8, [X19 + 0x18]
	0x03E34A74 LDR X0, [X19 + 0x40]
	0x03E34A78 LDR X2, [X19 + 0x28]
	0x03E34A7C BLR X8
	0x03E34A80 LDR W8, [X22 + 0x18]
	0x03E34A84 ADD W23, W23, 0x1

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x5B5000
	009 Move X23, 0x2C0000
	010 Move W8, [X22+1854]
	011 Move X23, [X23+1432]
	012 Move V8, V0
	013 Move W19, W2
	014 Move X20, X1
	015 Move X21, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2C0000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1854], W8
	025 Move X0, [X23]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {46}
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X22, [X31+32]
	041 Move X21, [X31+40]
	042 Move X30, [X31+16]
	043 Move X23, [X31+24]
	044 Move V8, [X31+64]
	045 Return 
	046 Move X0, X21
	047 Move X1, X20
	048 Move W2, W19
	049 Move X20, [X31+48]
	050 Move X19, [X31+56]
	051 Move X22, [X31+32]
	052 Move X21, [X31+40]
	053 Move X30, [X31+16]
	054 Move X23, [X31+24]
	055 Move S1, 1
	056 Move V0, V8
	057 Move V8, [X31+64]
	058 Call LayoutGroup.SetChildAlongAxisWithScale, X0, X1, X2, V0, V1
	059 Return 

Method: System.Void SetChildAlongAxisWithScale(UnityEngine.RectTransform rect, System.Int32 axis, System.Single pos, System.Single scaleFactor)

Disassembly:
	0x03E33EDC MOV X3, X31
	0x03E33EE0 MOV X21, X0
	0x03E33EE4 BL 0x2A6B948
	0x03E33EE8 LDR X0, [X26]
	0x03E33EEC BL 0x1C16F10
	0x03E33EF0 LDR X8, [X25]
	0x03E33EF4 MOVZ W5, 0x1
	0x03E33EF8 MOVZ W6, 0xA
	0x03E33EFC MOVZ W7, 0x2710
	0x03E33F00 MOV X1, X20
	0x03E33F04 MOV X2, X31
	0x03E33F08 MOV X3, X21
	0x03E33F0C MOV X4, X31
	0x03E33F10 MOV X19, X0
	0x03E33F14 STR X8, [X31]
	0x03E33F18 BL 0x249318C
	0x03E33F1C LDR X8, [X24]
	0x03E33F20 LDR X8, [X8 + 0xB8]
	0x03E33F24 STR X19, [X8]
	0x03E33F28 LDR X0, [X23]
	0x03E33F2C BL 0x1C16F10
	0x03E33F30 LDR X2, [X22]
	0x03E33F34 MOV X1, X31
	0x03E33F38 MOV X3, X31
	0x03E33F3C MOV X19, X0
	0x03E33F40 BL 0x3C3F4D8
	0x03E33F44 MOV X0, X19
	0x03E33F48 LDP X20, X19, [X31 + 0x60]
	0x03E33F4C LDP X22, X21, [X31 + 0x50]
	0x03E33F50 LDP X24, X23, [X31 + 0x40]
	0x03E33F54 LDP X26, X25, [X31 + 0x30]
	0x03E33F58 LDP X28, X27, [X31 + 0x20]
	0x03E33F5C LDP X29, X30, [X31 + 0x10]
	0x03E33F60 MOV X1, X31
	0x03E33F64 ADD X31, X31, 0x70
	0x03E33F68 B 0x3C3E3AC
	0x03E33F6C STP X30, X21, [X31 - 0x20]!
	0x03E33F70 STP X20, X19, [X31 + 0x10]
	0x03E33F74 ADRP X20, 0x5B5000
	0x03E33F78 ADRP X21, 0x2C3000
	0x03E33F7C LDRB W8, [X20 + 0x747]
	0x03E33F80 LDR X21, [X21 + 0x920]
	0x03E33F84 MOV X19, X0
	0x03E33F88 TBNZ X8, 0x0, 0x3E33FA0
	0x03E33F8C ADRP X0, 0x2C3000
	0x03E33F90 LDR X0, [X0 + 0x920]
	0x03E33F94 BL 0x1C16CF4
	0x03E33F98 MOVZ W8, 0x1
	0x03E33F9C STRB W8, [X20 + 0x747]
	0x03E33FA0 LDR X0, [X21]
	0x03E33FA4 LDR W8, [X0 + 0xE0]
	0x03E33FA8 CBNZ W8, 0x3E33FB0
	0x03E33FAC BL 0x1C16DFC
	0x03E33FB0 MOV X0, X19
	0x03E33FB4 LDP X20, X19, [X31 + 0x10]
	0x03E33FB8 LDP X30, X21, [X31], #0x20
	0x03E33FBC B 0x3E2F3D8
	0x03E33FC0 LDR X0, [X0 + 0x10]
	0x03E33FC4 RET
	0x03E33FC8 STP X30, X21, [X31 - 0x20]!
	0x03E33FCC STP X20, X19, [X31 + 0x10]
	0x03E33FD0 ADRP X21, 0x5B5000
	0x03E33FD4 ADRP X20, 0x2C0000
	0x03E33FD8 LDRB W8, [X21 + 0x748]
	0x03E33FDC LDR X20, [X20 + 0x598]
	0x03E33FE0 MOV X19, X0
	0x03E33FE4 TBNZ X8, 0x0, 0x3E33FFC
	0x03E33FE8 ADRP X0, 0x2C0000
	0x03E33FEC LDR X0, [X0 + 0x598]
	0x03E33FF0 BL 0x1C16CF4
	0x03E33FF4 MOVZ W8, 0x1
	0x03E33FF8 STRB W8, [X21 + 0x748]
	0x03E33FFC LDR X0, [X20]
	0x03E34000 LDR X19, [X19 + 0x10]
	0x03E34004 LDR W8, [X0 + 0xE0]
	0x03E34008 CBNZ W8, 0x3E34010
	0x03E3400C BL 0x1C16DFC
	0x03E34010 MOV X0, X19
	0x03E34014 LDP X20, X19, [X31 + 0x10]
	0x03E34018 MOV X1, X31
	0x03E3401C MOV X2, X31
	0x03E34020 LDP X30, X21, [X31], #0x20
	0x03E34024 B 0x3C3883C
	0x03E34028 STR X30, [X31 - 0x30]!
	0x03E3402C STP X22, X21, [X31 + 0x10]
	0x03E34030 STP X20, X19, [X31 + 0x20]
	0x03E34034 ADRP X20, 0x5B4000
	0x03E34038 ADRP X22, 0x337000
	0x03E3403C LDRB W8, [X20 + 0x749]
	0x03E34040 LDR X22, [X22 + 0xE8]
	0x03E34044 MOV X19, X0
	0x03E34048 TBNZ X8, 0x0, 0x3E34084
	0x03E3404C ADRP X0, 0x337000
	0x03E34050 LDR X0, [X0 + 0x128]
	0x03E34054 BL 0x1C16CF4
	0x03E34058 ADRP X0, 0x337000
	0x03E3405C LDR X0, [X0 + 0x130]
	0x03E34060 BL 0x1C16CF4
	0x03E34064 ADRP X0, 0x337000
	0x03E34068 LDR X0, [X0 + 0x138]
	0x03E3406C BL 0x1C16CF4
	0x03E34070 ADRP X0, 0x337000
	0x03E34074 LDR X0, [X0 + 0xE8]
	0x03E34078 BL 0x1C16CF4
	0x03E3407C MOVZ W8, 0x1
	0x03E34080 STRB W8, [X20 + 0x749]
	0x03E34084 LDR X0, [X22]
	0x03E34088 LDR W8, [X0 + 0xE0]
	0x03E3408C CBNZ W8, 0x3E34098
	0x03E34090 BL 0x1C16DFC
	0x03E34094 LDR X0, [X22]
	0x03E34098 LDR X8, [X0 + 0xB8]
	0x03E3409C LDR X20, [X8 + 0x8]
	0x03E340A0 CBNZ X20, 0x3E340F4
	0x03E340A4 LDR W8, [X0 + 0xE0]
	0x03E340A8 CBNZ W8, 0x3E340B4
	0x03E340AC BL 0x1C16DFC
	0x03E340B0 LDR X0, [X22]
	0x03E340B4 ADRP X9, 0x337000
	0x03E340B8 LDR X8, [X0 + 0xB8]
	0x03E340BC LDR X9, [X9 + 0x130]
	0x03E340C0 LDR X21, [X8]
	0x03E340C4 LDR X0, [X9]
	0x03E340C8 BL 0x1C16F10
	0x03E340CC ADRP X8, 0x337000
	0x03E340D0 LDR X8, [X8 + 0x138]
	0x03E340D4 MOV X1, X21
	0x03E340D8 MOV X3, X31
	0x03E340DC MOV X20, X0
	0x03E340E0 LDR X2, [X8]
	0x03E340E4 BL 0x24AD1FC
	0x03E340E8 LDR X8, [X22]
	0x03E340EC LDR X8, [X8 + 0xB8]
	0x03E340F0 STR X20, [X8 + 0x8]
	0x03E340F4 CBZ X19, 0x3E3411C
	0x03E340F8 ADRP X8, 0x337000
	0x03E340FC LDR X8, [X8 + 0x128]
	0x03E34100 MOV X0, X19
	0x03E34104 MOV X1, X20

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x5B6000
	014 Move X23, 0x2C1000
	015 Move W8, [X22+1855]
	016 Move X23, [X23+1432]
	017 Move V8, V1
	018 Move V9, V0
	019 Move W20, W2
	020 Move X19, X1
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x2C1000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1855], W8
	031 Move X0, [X23]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {57}
	044 Move X20, [X31+80]
	045 Move X19, [X31+88]
	046 Move X22, [X31+64]
	047 Move X21, [X31+72]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Move D9, [X31+32]
	051 Move D8, [X31+40]
	052 Move D11, [X31+16]
	053 Move D10, [X31+24]
	054 Move D13, [X31+96]
	055 Move D12, [X31+104]
	056 Return 
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move W8, 3844
	059 Move W9, 3842
	060 Add X0, X21, 56
	061 NotImplemented "Instruction CSEL not yet implemented."
	062 Move X1, X21
	063 Move X2, X19
	064 Move X4, X31
	065 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	066 Move X21, 0x5A9000
	067 Move W8, [X21+2038]
	068 Compare W8, 0
	069 JumpIfNotEqual {75}
	070 Move X0, 0x2C9000
	071 Move X0, [X0+3848]
	072 Call 0x1C17CF4
	073 Move W8, 1
	074 Move [X21+2038], W8
	075 Compare X19, 0
	076 JumpIfEqual {153}
	077 Move X22, 0x2C9000
	078 Move X22, [X22+3848]
	079 Move X0, X19
	080 Move X1, X31
	081 Move X8, [X22]
	082 Move X8, [X8+184]
	083 Move S0, [X8+16]
	084 Move S1, [X8+20]
	085 Call RectTransform.set_anchorMin, X0, X1
	086 Move W8, [X21+2038]
	087 Compare W8, 0
	088 JumpIfNotEqual {94}
	089 Move X0, 0x2C9000
	090 Move X0, [X0+3848]
	091 Call 0x1C17CF4
	092 Move W8, 1
	093 Move [X21+2038], W8
	094 Move X8, [X22]
	095 Move X0, X19
	096 Move X1, X31
	097 Move X8, [X8+184]
	098 Move S0, [X8+16]
	099 Move S1, [X8+20]
	100 Call RectTransform.set_anchorMax, X0, X1
	101 Move X0, X19
	102 Move X1, X31
	103 Call RectTransform.get_anchoredPosition, X0
	104 Move X0, X19
	105 Move X1, X31
	106 Move V10, V0
	107 Move V11, V1
	108 Call RectTransform.get_sizeDelta, X0
	109 Compare W20, 0
	110 JumpIfEqual {126}
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move X0, X19
	113 Move X1, X31
	114 Move V13, V1
	115 Call RectTransform.get_pivot, X0
	116 Move V0, V1
	117 Move V12, V13
	118 Compare W20, 0
	119 JumpIfEqual {132}
	120 Move S2, 1
	121 Subtract S0, S2, S0
	122 Multiply S0, S12, S0
	123 NotImplemented "Instruction FNEG not yet implemented."
	124 Multiply S0, S0, S8
	125 Subtract S11, S1, S0
	126 Move X0, X19
	127 Move X1, X31
	128 Move V12, V0
	129 Call RectTransform.get_pivot, X0
	130 Compare W20, 0
	131 JumpIfNotEqual {120}
	132 Multiply S0, S12, S0
	133 Multiply S0, S0, S8
	134 Add S10, S0, S9
	135 Move X0, X19
	136 Move V0, V10
	137 Move V1, V11
	138 Move X20, [X31+80]
	139 Move X19, [X31+88]
	140 Move X22, [X31+64]
	141 Move X21, [X31+72]
	142 Move X30, [X31+48]
	143 Move X23, [X31+56]
	144 Move D9, [X31+32]
	145 Move D8, [X31+40]
	146 Move D11, [X31+16]
	147 Move D10, [X31+24]
	148 Move X1, X31
	149 Move D13, [X31+96]
	150 Move D12, [X31+104]
	151 Call RectTransform.set_anchoredPosition, X0, X1
	152 Return 
	153 Call 0x1C17F20
	154 Move X0, 0x2CA000
	155 Move X0, [X0+3960]
	156 Call 0x1C17D08
	157 Call 0x1C17F10
	158 Move X19, X0
	159 Move X0, 0x312000
	160 Move X0, [X0+4088]
	161 Call 0x1C17D08
	162 Move X1, X0
	163 Move X0, X19
	164 Move X2, X31
	165 Call IndexOutOfRangeException..ctor, X0, X1
	166 Move X0, 0x313000
	167 Move X0, [X0]
	168 Call 0x1C17D08
	169 Move X1, X0
	170 Move X0, X19
	171 Call 0x1C17DEC

Method: System.Void SetChildAlongAxis(UnityEngine.RectTransform rect, System.Int32 axis, System.Single pos, System.Single size)

Disassembly:
	0x03E32DEC CBZ W20, 0x3E32DFC
	0x03E32DF0 CMP W20, 0x1
	0x03E32DF4 B.NE 0x3E32E94
	0x03E32DF8 MOV V0.16B, V1.16B
	0x03E32DFC CBZ W20, 0x3E32E1C
	0x03E32E00 FMOV S2, 1
	0x03E32E04 FSUB S0, S2, S0
	0x03E32E08 FMUL S0, S0, S9
	0x03E32E0C FNEG S1, S10
	0x03E32E10 FMUL S0, S0, S8
	0x03E32E14 FSUB S12, S1, S0
	0x03E32E18 B 0x3E32E28
	0x03E32E1C FMUL S0, S0, S9
	0x03E32E20 FMUL S0, S0, S8
	0x03E32E24 FADD S11, S0, S10
	0x03E32E28 MOV X0, X19
	0x03E32E2C MOV V0.16B, V11.16B
	0x03E32E30 LDP X20, X19, [X31 + 0x50]
	0x03E32E34 LDP X22, X21, [X31 + 0x40]
	0x03E32E38 LDP X30, X23, [X31 + 0x30]
	0x03E32E3C LDP D9, D8, [X31 + 0x20]
	0x03E32E40 LDP D11, D10, [X31 + 0x10]
	0x03E32E44 MOV V1.16B, V12.16B
	0x03E32E48 MOV X1, X31
	0x03E32E4C LDR V12, [X31], #0x60
	0x03E32E50 B 0x3C3E880
	0x03E32E54 BL 0x1C16F20
	0x03E32E58 ADRP X0, 0x2CB000
	0x03E32E5C LDR X0, [X0 + 0xF78]
	0x03E32E60 BL 0x1C16D08
	0x03E32E64 BL 0x1C16F10
	0x03E32E68 MOV X19, X0
	0x03E32E6C ADRP X0, 0x313000
	0x03E32E70 LDR X0, [X0 + 0xFF8]
	0x03E32E74 BL 0x1C16D08
	0x03E32E78 MOV X1, X0
	0x03E32E7C MOV X0, X19
	0x03E32E80 MOV X2, X31
	0x03E32E84 BL 0x3379B6C
	0x03E32E88 ADRP X0, 0x32D000
	0x03E32E8C LDR X0, [X0 + 0x2A8]
	0x03E32E90 B 0x3E32ECC
	0x03E32E94 ADRP X0, 0x2CB000
	0x03E32E98 LDR X0, [X0 + 0xF78]

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x5B7000
	010 Move X23, 0x2C2000
	011 Move W8, [X22+1856]
	012 Move X23, [X23+1432]
	013 Move V8, V1
	014 Move V9, V0
	015 Move W19, W2
	016 Move X20, X1
	017 Move X21, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {27}
	022 Move X0, 0x2C2000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1856], W8
	027 Move X0, [X23]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {49}
	040 Move X20, [X31+48]
	041 Move X19, [X31+56]
	042 Move X22, [X31+32]
	043 Move X21, [X31+40]
	044 Move X30, [X31+16]
	045 Move X23, [X31+24]
	046 Move D9, [X31+64]
	047 Move D8, [X31+72]
	048 Return 
	049 Move X0, X21
	050 Move X1, X20
	051 Move W2, W19
	052 Move X20, [X31+48]
	053 Move X19, [X31+56]
	054 Move X22, [X31+32]
	055 Move X21, [X31+40]
	056 Move X30, [X31+16]
	057 Move X23, [X31+24]
	058 Move S2, 1
	059 Move V0, V9
	060 Move V1, V8
	061 Move D9, [X31+64]
	062 Move D8, [X31+72]
	063 Call LayoutGroup.SetChildAlongAxisWithScale, X0, X1, X2, V0, V1, V2
	064 Return 

Method: System.Void SetChildAlongAxisWithScale(UnityEngine.RectTransform rect, System.Int32 axis, System.Single pos, System.Single size, System.Single scaleFactor)

Disassembly:
	0x03E33C68 BL 0x33BDD8C
	0x03E33C6C STR W19, [X20 + 0x10]
	0x03E33C70 LDP X20, X19, [X31 + 0x10]
	0x03E33C74 LDR X30, [X31], #0x20
	0x03E33C78 RET
	0x03E33C7C RET
	0x03E33C80 STR X30, [X31 - 0x20]!
	0x03E33C84 STP X20, X19, [X31 + 0x10]
	0x03E33C88 ADRP X20, 0x5B5000
	0x03E33C8C LDRB W8, [X20 + 0x745]
	0x03E33C90 MOV X19, X0
	0x03E33C94 TBNZ X8, 0x0, 0x3E33CAC
	0x03E33C98 ADRP X0, 0x2C3000
	0x03E33C9C LDR X0, [X0 + 0x920]
	0x03E33CA0 BL 0x1C16CF4
	0x03E33CA4 MOVZ W8, 0x1
	0x03E33CA8 STRB W8, [X20 + 0x745]
	0x03E33CAC LDR W8, [X19 + 0x10]
	0x03E33CB0 CMP W8, 0x1
	0x03E33CB4 B.EQ 0x3E33CCC
	0x03E33CB8 CBNZ W8, 0x3E33CF8
	0x03E33CBC MOVZ W0, 0x1
	0x03E33CC0 STR X31, [X19 + 0x18]
	0x03E33CC4 STR W0, [X19 + 0x10]
	0x03E33CC8 B 0x3E33CFC
	0x03E33CCC MOVN W8, 0x0
	0x03E33CD0 STR W8, [X19 + 0x10]
	0x03E33CD4 ADRP X8, 0x2C3000
	0x03E33CD8 LDR X8, [X8 + 0x920]
	0x03E33CDC LDR X19, [X19 + 0x20]
	0x03E33CE0 LDR X0, [X8]
	0x03E33CE4 LDR W8, [X0 + 0xE0]
	0x03E33CE8 CBNZ W8, 0x3E33CF0
	0x03E33CEC BL 0x1C16DFC
	0x03E33CF0 MOV X0, X19
	0x03E33CF4 BL 0x3E2F3D8
	0x03E33CF8 MOV W0, W31
	0x03E33CFC LDP X20, X19, [X31 + 0x10]
	0x03E33D00 LDR X30, [X31], #0x20
	0x03E33D04 RET
	0x03E33D08 LDR X0, [X0 + 0x18]
	0x03E33D0C RET
	0x03E33D10 STP X30, X19, [X31 - 0x10]!
	0x03E33D14 ADRP X0, 0x2C0000
	0x03E33D18 LDR X0, [X0 + 0xB40]
	0x03E33D1C BL 0x1C16D08
	0x03E33D20 BL 0x1C16F10
	0x03E33D24 MOV X1, X31
	0x03E33D28 MOV X19, X0
	0x03E33D2C BL 0x3380310
	0x03E33D30 ADRP X0, 0x338000
	0x03E33D34 LDR X0, [X0 + 0xE0]
	0x03E33D38 BL 0x1C16D08
	0x03E33D3C MOV X1, X0
	0x03E33D40 MOV X0, X19
	0x03E33D44 BL 0x1C16DEC
	0x03E33D48 LDR X0, [X0 + 0x18]
	0x03E33D4C RET
	0x03E33D50 STP X30, X19, [X31 - 0x10]!
	0x03E33D54 STR X1, [X0 + 0x10]
	0x03E33D58 CBZ X1, 0x3E33D80
	0x03E33D5C LDR X8, [X1]
	0x03E33D60 MOV X19, X0
	0x03E33D64 MOV X0, X1
	0x03E33D68 LDP X9, X8, [X8 + 0x158]
	0x03E33D6C MOV X1, X8
	0x03E33D70 BLR X9
	0x03E33D74 STR W0, [X19 + 0x18]
	0x03E33D78 LDP X30, X19, [X31], #0x10
	0x03E33D7C RET
	0x03E33D80 BL 0x1C16F20
	0x03E33D84 STR X31, [X0 + 0x10]
	0x03E33D88 STR W31, [X0 + 0x18]
	0x03E33D8C RET
	0x03E33D90 SUB X31, X31, 0x70
	0x03E33D94 STP X29, X30, [X31 + 0x10]
	0x03E33D98 STP X28, X27, [X31 + 0x20]
	0x03E33D9C STP X26, X25, [X31 + 0x30]
	0x03E33DA0 STP X24, X23, [X31 + 0x40]
	0x03E33DA4 STP X22, X21, [X31 + 0x50]
	0x03E33DA8 STP X20, X19, [X31 + 0x60]
	0x03E33DAC ADRP X19, 0x5B5000
	0x03E33DB0 ADRP X21, 0x338000
	0x03E33DB4 LDRB W8, [X19 + 0x746]
	0x03E33DB8 LDR X21, [X21 + 0xE8]
	0x03E33DBC TBNZ X8, 0x0, 0x3E33E40
	0x03E33DC0 ADRP X0, 0x338000
	0x03E33DC4 LDR X0, [X0 + 0xF0]
	0x03E33DC8 BL 0x1C16CF4
	0x03E33DCC ADRP X0, 0x338000
	0x03E33DD0 LDR X0, [X0 + 0xF8]
	0x03E33DD4 BL 0x1C16CF4
	0x03E33DD8 ADRP X0, 0x338000
	0x03E33DDC LDR X0, [X0 + 0x100]
	0x03E33DE0 BL 0x1C16CF4
	0x03E33DE4 ADRP X0, 0x2C3000
	0x03E33DE8 LDR X0, [X0 + 0x920]
	0x03E33DEC BL 0x1C16CF4
	0x03E33DF0 ADRP X0, 0x338000
	0x03E33DF4 LDR X0, [X0 + 0x108]
	0x03E33DF8 BL 0x1C16CF4
	0x03E33DFC ADRP X0, 0x338000
	0x03E33E00 LDR X0, [X0 + 0x110]
	0x03E33E04 BL 0x1C16CF4
	0x03E33E08 ADRP X0, 0x32C000
	0x03E33E0C LDR X0, [X0 + 0x7F8]
	0x03E33E10 BL 0x1C16CF4
	0x03E33E14 ADRP X0, 0x338000
	0x03E33E18 LDR X0, [X0 + 0x118]
	0x03E33E1C BL 0x1C16CF4
	0x03E33E20 ADRP X0, 0x338000
	0x03E33E24 LDR X0, [X0 + 0x120]
	0x03E33E28 BL 0x1C16CF4
	0x03E33E2C ADRP X0, 0x338000
	0x03E33E30 LDR X0, [X0 + 0xE8]
	0x03E33E34 BL 0x1C16CF4
	0x03E33E38 MOVZ W8, 0x1
	0x03E33E3C STRB W8, [X19 + 0x746]
	0x03E33E40 ADRP X29, 0x338000
	0x03E33E44 ADRP X20, 0x338000
	0x03E33E48 LDR X29, [X29 + 0xF8]
	0x03E33E4C LDR X20, [X20 + 0x118]
	0x03E33E50 LDR X0, [X21]
	0x03E33E54 ADRP X28, 0x338000
	0x03E33E58 ADRP X27, 0x338000
	0x03E33E5C ADRP X26, 0x338000
	0x03E33E60 ADRP X25, 0x338000
	0x03E33E64 ADRP X24, 0x2C3000
	0x03E33E68 ADRP X23, 0x32C000
	0x03E33E6C ADRP X22, 0x338000
	0x03E33E70 LDR X28, [X28 + 0xF0]
	0x03E33E74 LDR X27, [X27 + 0x120]
	0x03E33E78 LDR X26, [X26 + 0x110]
	0x03E33E7C LDR W8, [X0 + 0xE0]
	0x03E33E80 LDR X25, [X25 + 0x108]
	0x03E33E84 LDR X24, [X24 + 0x920]
	0x03E33E88 LDR X23, [X23 + 0x7F8]
	0x03E33E8C LDR X22, [X22 + 0x100]
	0x03E33E90 CBNZ W8, 0x3E33E9C
	0x03E33E94 BL 0x1C16DFC
	0x03E33E98 LDR X0, [X21]
	0x03E33E9C LDR X8, [X0 + 0xB8]
	0x03E33EA0 LDR X0, [X29]
	0x03E33EA4 LDR X19, [X8]
	0x03E33EA8 BL 0x1C16F10
	0x03E33EAC LDR X2, [X20]
	0x03E33EB0 MOV X1, X19
	0x03E33EB4 MOV X3, X31
	0x03E33EB8 MOV X20, X0
	0x03E33EBC BL 0x2D27AA8
	0x03E33EC0 LDR X8, [X21]
	0x03E33EC4 LDR X0, [X28]
	0x03E33EC8 LDR X8, [X8 + 0xB8]
	0x03E33ECC LDR X19, [X8]
	0x03E33ED0 BL 0x1C16F10
	0x03E33ED4 LDR X2, [X27]
	0x03E33ED8 MOV X1, X19

ISIL:
	001 Move [X31-96], D12
	002 Move [X31+16], D11
	003 Move [X31+24], D10
	004 Move [X31+32], D9
	005 Move [X31+40], D8
	006 Move [X31+48], X30
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0x5B6000
	013 Move X23, 0x2C1000
	014 Move W8, [X22+1857]
	015 Move X23, [X23+1432]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move W20, W2
	020 Move X19, X1
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x2C1000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+1857], W8
	031 Move X0, [X23]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {56}
	044 Move X20, [X31+80]
	045 Move X19, [X31+88]
	046 Move X22, [X31+64]
	047 Move X21, [X31+72]
	048 Move X30, [X31+48]
	049 Move X23, [X31+56]
	050 Move D9, [X31+32]
	051 Move D8, [X31+40]
	052 Move D11, [X31+16]
	053 Move D10, [X31+24]
	054 Move V12, [X31+96]
	055 Return 
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move W8, 0x2F04
	058 Move W9, 0x1F02
	059 Add X0, X21, 56
	060 NotImplemented "Instruction CSEL not yet implemented."
	061 Move X1, X21
	062 Move X2, X19
	063 Move X4, X31
	064 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	065 Move X21, 0x5A9000
	066 Move W8, [X21+2038]
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x2C9000
	070 Move X0, [X0+3848]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X21+2038], W8
	074 Compare X19, 0
	075 JumpIfEqual {151}
	076 Move X22, 0x2C9000
	077 Move X22, [X22+3848]
	078 Move X0, X19
	079 Move X1, X31
	080 Move X8, [X22]
	081 Move X8, [X8+184]
	082 Move S0, [X8+16]
	083 Move S1, [X8+20]
	084 Call RectTransform.set_anchorMin, X0, X1
	085 Move W8, [X21+2038]
	086 Compare W8, 0
	087 JumpIfNotEqual {93}
	088 Move X0, 0x2C9000
	089 Move X0, [X0+3848]
	090 Call 0x1C17CF4
	091 Move W8, 1
	092 Move [X21+2038], W8
	093 Move X8, [X22]
	094 Move X0, X19
	095 Move X1, X31
	096 Move X8, [X8+184]
	097 Move S0, [X8+16]
	098 Move S1, [X8+20]
	099 Call RectTransform.set_anchorMax, X0, X1
	100 Move X0, X19
	101 Move X1, X31
	102 Call RectTransform.get_sizeDelta, X0
	103 Compare W20, 0
	104 JumpIfEqual {107}
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move V1, V9
	107 Move V0, V9
	108 Move X0, X19
	109 Move X1, X31
	110 Call RectTransform.set_sizeDelta, X0, X1
	111 Move X0, X19
	112 Move X1, X31
	113 Call RectTransform.get_anchoredPosition, X0
	114 Move X0, X19
	115 Move X1, X31
	116 Move V11, V0
	117 Move V12, V1
	118 Call RectTransform.get_pivot, X0
	119 Compare W20, 0
	120 JumpIfEqual {123}
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Move V0, V1
	123 Compare W20, 0
	124 JumpIfEqual {131}
	125 Move S2, 1
	126 Subtract S0, S2, S0
	127 Multiply S0, S0, S9
	128 NotImplemented "Instruction FNEG not yet implemented."
	129 Multiply S0, S0, S8
	130 Subtract S12, S1, S0
	131 Multiply S0, S0, S9
	132 Multiply S0, S0, S8
	133 Add S11, S0, S10
	134 Move X0, X19
	135 Move V0, V11
	136 Move X20, [X31+80]
	137 Move X19, [X31+88]
	138 Move X22, [X31+64]
	139 Move X21, [X31+72]
	140 Move X30, [X31+48]
	141 Move X23, [X31+56]
	142 Move D9, [X31+32]
	143 Move D8, [X31+40]
	144 Move D11, [X31+16]
	145 Move D10, [X31+24]
	146 Move V1, V12
	147 Move X1, X31
	148 Move V12, [X31+96]
	149 Call RectTransform.set_anchoredPosition, X0, X1
	150 Return 
	151 Call 0x1C17F20
	152 Move X0, 0x2CB000
	153 Move X0, [X0+3960]
	154 Call 0x1C17D08
	155 Call 0x1C17F10
	156 Move X19, X0
	157 Move X0, 0x313000
	158 Move X0, [X0+4088]
	159 Call 0x1C17D08
	160 Move X1, X0
	161 Move X0, X19
	162 Move X2, X31
	163 Call IndexOutOfRangeException..ctor, X0, X1
	164 Move X0, 0x32D000
	165 Move X0, [X0+680]
	166 Move X0, 0x2CB000
	167 Move X0, [X0+3960]
	168 Call 0x1C17D08
	169 Call 0x1C17F10
	170 Move X19, X0
	171 Move X0, 0x313000
	172 Move X0, [X0+4088]
	173 Call 0x1C17D08
	174 Move X1, X0
	175 Move X0, X19
	176 Move X2, X31
	177 Call IndexOutOfRangeException..ctor, X0, X1
	178 Move X0, 0x314000
	179 Move X0, [X0]
	180 Call 0x1C17D08
	181 Move X1, X0
	182 Move X0, X19
	183 Call 0x1C17DEC

Method: System.Boolean get_isRootLayoutGroup()

Disassembly:
	0x03E34A88 CMP W23, W8
	0x03E34A8C B.LT 0x3E349AC
	0x03E34A90 MOV X0, X20
	0x03E34A94 MOV X1, X31
	0x03E34A98 BL 0x3C40C8C
	0x03E34A9C CMP W0, 0x1
	0x03E34AA0 B.LT 0x3E34B00
	0x03E34AA4 ADRP X24, 0x2E6000
	0x03E34AA8 LDR X24, [X24 + 0xC70]
	0x03E34AAC MOV W23, W31
	0x03E34AB0 MOV X0, X20
	0x03E34AB4 MOV W1, W23
	0x03E34AB8 MOV X2, X31
	0x03E34ABC BL 0x3C410A0
	0x03E34AC0 CBZ X0, 0x3E34AD8
	0x03E34AC4 LDR X8, [X24]
	0x03E34AC8 LDR X9, [X0]
	0x03E34ACC CMP X9, X8
	0x03E34AD0 CSEL X1, X0, X31, EQ
	0x03E34AD4 B 0x3E34ADC
	0x03E34AD8 MOV X1, X31
	0x03E34ADC MOV X0, X21
	0x03E34AE0 MOV X2, X19
	0x03E34AE4 BL 0x3E34778
	0x03E34AE8 MOV X0, X20
	0x03E34AEC MOV X1, X31
	0x03E34AF0 ADD W23, W23, 0x1
	0x03E34AF4 BL 0x3C40C8C
	0x03E34AF8 CMP W23, W0
	0x03E34AFC B.LT 0x3E34AB0
	0x03E34B00 LDR X0, [X26]
	0x03E34B04 LDR W8, [X0 + 0xE0]
	0x03E34B08 CBNZ W8, 0x3E34B10
	0x03E34B0C BL 0x1C16DFC
	0x03E34B10 ADRP X8, 0x2E7000
	0x03E34B14 LDR X8, [X8 + 0xA20]
	0x03E34B18 MOV X0, X22
	0x03E34B1C LDP X20, X19, [X31 + 0x50]
	0x03E34B20 LDP X22, X21, [X31 + 0x40]
	0x03E34B24 LDR X1, [X8]
	0x03E34B28 LDP X24, X23, [X31 + 0x30]
	0x03E34B2C LDP X26, X25, [X31 + 0x20]
	0x03E34B30 LDP X28, X27, [X31 + 0x10]
	0x03E34B34 LDP X29, X30, [X31], #0x60
	0x03E34B38 B 0x28F9A14
	0x03E34B3C BL 0x1C16F20
	0x03E34B40 STR X30, [X31 - 0x40]!
	0x03E34B44 STP X24, X23, [X31 + 0x10]
	0x03E34B48 STP X22, X21, [X31 + 0x20]
	0x03E34B4C STP X20, X19, [X31 + 0x30]
	0x03E34B50 ADRP X21, 0x5B4000
	0x03E34B54 ADRP X22, 0x2BF000
	0x03E34B58 LDRB W8, [X21 + 0x74F]
	0x03E34B5C LDR X22, [X22 + 0x598]
	0x03E34B60 MOV X19, X1
	0x03E34B64 MOV X20, X0
	0x03E34B68 TBNZ X8, 0x0, 0x3E34BBC
	0x03E34B6C ADRP X0, 0x2E6000
	0x03E34B70 LDR X0, [X0 + 0x6E0]
	0x03E34B74 BL 0x1C16CF4
	0x03E34B78 ADRP X0, 0x337000
	0x03E34B7C LDR X0, [X0 + 0x180]
	0x03E34B80 BL 0x1C16CF4
	0x03E34B84 ADRP X0, 0x2E7000
	0x03E34B88 LDR X0, [X0 + 0xA40]
	0x03E34B8C BL 0x1C16CF4
	0x03E34B90 ADRP X0, 0x2E7000
	0x03E34B94 LDR X0, [X0 + 0xA48]
	0x03E34B98 BL 0x1C16CF4
	0x03E34B9C ADRP X0, 0x2BF000
	0x03E34BA0 LDR X0, [X0 + 0x598]
	0x03E34BA4 BL 0x1C16CF4
	0x03E34BA8 ADRP X0, 0x2BF000
	0x03E34BAC LDR X0, [X0 + 0x6C0]
	0x03E34BB0 BL 0x1C16CF4
	0x03E34BB4 MOVZ W8, 0x1
	0x03E34BB8 STRB W8, [X21 + 0x74F]
	0x03E34BBC LDR X0, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5B5000
	006 Move W8, [X20+1858]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {23}
	012 Move X0, 0x338000
	013 Move X0, [X0+56]
	014 Call 0x1C17CF4
	015 Move X0, 0x2C0000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x2C0000
	019 Move X0, [X0+1728]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1858], W8
	023 Move X0, X19
	024 Move X1, X31
	025 Call Component.get_transform, X0
	026 Compare X0, 0
	027 JumpIfEqual {97}
	028 Move X21, 0x2C0000
	029 Move X21, [X21+1432]
	030 Move X1, X31
	031 Call Transform.get_parent, X0
	032 Move X8, [X21]
	033 Move X20, X0
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Equality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {53}
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W0, 1
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Move X0, X19
	054 Move X1, X31
	055 Call Component.get_transform, X0
	056 Compare X0, 0
	057 JumpIfEqual {97}
	058 Move X1, X31
	059 Call Transform.get_parent, X0
	060 Move X8, 0x2C0000
	061 Move X8, [X8+1728]
	062 Move X9, 0x338000
	063 Move X19, X0
	064 Move X8, [X8]
	065 Move X9, [X9+56]
	066 Move W10, [X8+224]
	067 Move X20, [X9]
	068 Compare W10, 0
	069 JumpIfNotEqual {72}
	070 Move X0, X8
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X31
	074 Call Type.GetTypeFromHandle, X0
	075 Compare X19, 0
	076 JumpIfEqual {97}
	077 Move X1, X0
	078 Move X0, X19
	079 Move X2, X31
	080 Call Component.GetComponent, X0, X1
	081 Move X8, [X21]
	082 Move X19, X0
	083 Move W9, [X8+224]
	084 Compare W9, 0
	085 JumpIfNotEqual {88}
	086 Move X0, X8
	087 Call 0x1C17DFC
	088 Move X0, X19
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X1, X31
	092 Move X2, X31
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Call Object.op_Equality, X0, X1
	096 Return X0
	097 Call 0x1C17F20

Method: System.Void OnRectTransformDimensionsChange()

Disassembly:
	0x03E34BC0 LDR W8, [X0 + 0xE0]
	0x03E34BC4 CBNZ W8, 0x3E34BCC
	0x03E34BC8 BL 0x1C16DFC
	0x03E34BCC MOV X0, X20
	0x03E34BD0 MOV X1, X31
	0x03E34BD4 MOV X2, X31
	0x03E34BD8 BL 0x3C3883C
	0x03E34BDC TBNZ X0, 0x0, 0x3E34D10
	0x03E34BE0 CBZ X20, 0x3E34D30
	0x03E34BE4 MOV X0, X20
	0x03E34BE8 MOV X1, X31
	0x03E34BEC BL 0x3C32ECC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call UIBehaviour.OnRectTransformDimensionsChange, X0
	006 Move X0, X19
	007 Call LayoutGroup.get_isRootLayoutGroup, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {17}
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call LayoutGroup.SetDirty, X0
	016 Return 
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Return 

Method: System.Void OnTransformChildrenChanged()

Disassembly:
	0x03E34BF0 LDR X8, [X22]

ISIL:
	001 Call LayoutGroup.SetDirty, X0
	002 Return 

Method: System.Void SetProperty(ref T currentValue, T newValue)

Disassembly:
	0x02213440 LDP X20, X19, [X31 + 0x30]
	0x02213444 LDP X22, X21, [X31 + 0x20]
	0x02213448 LDP X24, X23, [X31 + 0x10]
	0x0221344C LDP X29, X30, [X31], #0x40
	0x02213450 RET
	0x02213454 BL 0x1C16F20
	0x02213458 BL 0x3EB1B20
	0x0221345C STP X30, X23, [X31 - 0x30]!
	0x02213460 STP X22, X21, [X31 + 0x10]
	0x02213464 STP X20, X19, [X31 + 0x20]
	0x02213468 LDR X8, [X3 + 0x38]
	0x0221346C MOV X20, X3
	0x02213470 MOV X19, X2
	0x02213474 MOV X21, X1
	0x02213478 CBNZ X8, 0x2213484
	0x0221347C MOV X0, X20
	0x02213480 BL 0x1C5C6E0
	0x02213484 CBZ X21, 0x2213578
	0x02213488 LDR X8, [X20 + 0x38]
	0x0221348C LDR X22, [X21 + 0x10]
	0x02213490 LDR X1, [X8]
	0x02213494 LDRB W8, [X1 + 0x135]
	0x02213498 TBNZ X8, 0x0, 0x22134A8
	0x0221349C MOV X0, X1
	0x022134A0 BL 0x1C5C684
	0x022134A4 MOV X1, X0
	0x022134A8 MOV X0, X22
	0x022134AC BL 0x1C16E00
	0x022134B0 LDR X8, [X20 + 0x38]
	0x022134B4 MOV X23, X0
	0x022134B8 LDR X22, [X8]
	0x022134BC LDRB W8, [X22 + 0x135]
	0x022134C0 TBNZ X8, 0x0, 0x22134D0
	0x022134C4 MOV X0, X22
	0x022134C8 BL 0x1C5C684
	0x022134CC MOV X22, X0
	0x022134D0 CBZ X23, 0x2213530
	0x022134D4 MOV X0, X23
	0x022134D8 MOV X1, X22
	0x022134DC BL 0x1C16E00
	0x022134E0 CBZ X0, 0x221357C
	0x022134E4 CBZ X19, 0x2213578
	0x022134E8 LDRB W8, [X21 + 0x18]
	0x022134EC LDR X9, [X20 + 0x38]
	0x022134F0 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X8, [X3+56]
	009 Move X21, X3
	010 Move X20, X1
	011 Move X19, X0
	012 And W23, W2, 1
	013 Compare X8, 0
	014 JumpIfNotEqual {24}
	015 Move X0, 0x1EE1000
	016 Move X0, [X0+2904]
	017 Call 0x1C17CF4
	018 Move X8, [X21+56]
	019 Compare X8, 0
	020 JumpIfNotEqual {24}
	021 Move X0, X21
	022 Call 0x1C5D6E0
	023 Move X8, [X21+56]
	024 Move [X31+12], W23
	025 Move X0, [X8+8]
	026 Add X1, X31, 12
	027 Call 0x1C17E04
	028 Move X8, 0x1EE1000
	029 Move X8, [X8+2904]
	030 Move X22, X0
	031 Move X8, [X8]
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X8, [X21+56]
	038 Move X0, X20
	039 Move X1, X22
	040 Move X2, [X8+16]
	041 Call Boolean.Equals, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {50}
	046 Move X0, X19
	047 Move X1, X31
	048 Move [X20], W23
	049 Call LayoutGroup.SetDirty, X0
	050 Move X20, [X31+48]
	051 Move X19, [X31+56]
	052 Move X22, [X31+32]
	053 Move X21, [X31+40]
	054 Move X30, [X31+16]
	055 Move X23, [X31+24]
	056 Add X31, X31, 64
	057 Return 

Method: System.Void SetDirty()

Disassembly:
	0x03E3488C LDR X26, [X26 + 0xA28]
	0x03E34890 LDR X0, [X26]
	0x03E34894 LDR W8, [X0 + 0xE0]
	0x03E34898 CBNZ W8, 0x3E348A0
	0x03E3489C BL 0x1C16DFC
	0x03E348A0 ADRP X8, 0x2E7000
	0x03E348A4 LDR X8, [X8 + 0xA18]
	0x03E348A8 LDR X0, [X8]
	0x03E348AC BL 0x28F98D4
	0x03E348B0 ADRP X8, 0x2BF000
	0x03E348B4 LDR X8, [X8 + 0x6C0]
	0x03E348B8 ADRP X9, 0x337000
	0x03E348BC MOV X22, X0
	0x03E348C0 LDR X8, [X8]
	0x03E348C4 LDR X9, [X9 + 0x180]
	0x03E348C8 LDR W10, [X8 + 0xE0]
	0x03E348CC LDR X23, [X9]
	0x03E348D0 CBNZ W10, 0x3E348DC
	0x03E348D4 MOV X0, X8
	0x03E348D8 BL 0x1C16DFC
	0x03E348DC MOV X0, X23
	0x03E348E0 MOV X1, X31
	0x03E348E4 BL 0x338C698
	0x03E348E8 CBZ X20, 0x3E34B3C
	0x03E348EC MOV X1, X0
	0x03E348F0 MOV X0, X20
	0x03E348F4 MOV X2, X22
	0x03E348F8 MOV X3, X31
	0x03E348FC BL 0x3C33320
	0x03E34900 ADRP X8, 0x2C2000
	0x03E34904 LDR X8, [X8 + 0x920]
	0x03E34908 LDR X0, [X8]
	0x03E3490C LDR W8, [X0 + 0xE0]
	0x03E34910 CBNZ W8, 0x3E34918
	0x03E34914 BL 0x1C16DFC
	0x03E34918 MOV X0, X22
	0x03E3491C BL 0x3E34028
	0x03E34920 CBZ X22, 0x3E34B3C
	0x03E34924 LDR W8, [X22 + 0x18]
	0x03E34928 CMP W8, 0x1
	0x03E3492C B.LT 0x3E34B00
	0x03E34930 ADRP X27, 0x2E7000
	0x03E34934 ADRP X28, 0x337000
	0x03E34938 LDR X27, [X27 + 0xA48]
	0x03E3493C LDR X28, [X28 + 0x188]
	0x03E34940 MOV W23, W31
	0x03E34944 LDR X2, [X27]
	0x03E34948 MOV X0, X22
	0x03E3494C MOV W1, W23
	0x03E34950 BL 0x301BCCC
	0x03E34954 LDR X1, [X28]
	0x03E34958 BL 0x1C16E00
	0x03E3495C CBZ X0, 0x3E34988

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5B5000
	006 Move W8, [X20+1859]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x325000
	013 Move X0, [X0+1816]
	014 Call 0x1C17CF4
	015 Move X0, 0x2C3000
	016 Move X0, [X0+2336]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1859], W8
	020 Move X8, [X19]
	021 Move X0, X19
	022 Move X9, [X8+456]
	023 Move X1, [X8+464]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {57}
	029 Move X8, 0x325000
	030 Move X8, [X8+1816]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X31
	037 Call CanvasUpdateRegistry.IsRebuildingLayout
	038 Move W21, W0
	039 Move X0, X19
	040 Call LayoutGroup.get_rectTransform, X0
	041 Move X20, X0
	042 Move TEMP, X21
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {62}
	046 Move X1, X20
	047 Call LayoutGroup.DelayedSetDirty, X0, X1
	048 Move X1, X0
	049 Move X0, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X2, X31
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call MonoBehaviour.StartCoroutine, X0, X1
	056 Return 
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return 
	062 Move X8, 0x2C3000
	063 Move X8, [X8+2336]
	064 Move X0, [X8]
	065 Move W8, [X0+224]
	066 Compare W8, 0
	067 JumpIfNotEqual {69}
	068 Call 0x1C17DFC
	069 Move X0, X20
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	075 Return 

Method: System.Collections.IEnumerator DelayedSetDirty(UnityEngine.RectTransform rectTransform)

Disassembly:
	0x03E34BF4 MOV X21, X0
	0x03E34BF8 LDR W9, [X8 + 0xE0]
	0x03E34BFC CBNZ W9, 0x3E34C08
	0x03E34C00 MOV X0, X8
	0x03E34C04 BL 0x1C16DFC
	0x03E34C08 MOV X0, X21
	0x03E34C0C MOV X1, X31
	0x03E34C10 MOV X2, X31
	0x03E34C14 BL 0x3C3883C
	0x03E34C18 TBNZ X0, 0x0, 0x3E34D10
	0x03E34C1C ADRP X8, 0x2BF000
	0x03E34C20 LDR X8, [X8 + 0x6C0]
	0x03E34C24 LDR X0, [X8]
	0x03E34C28 ADRP X8, 0x337000
	0x03E34C2C LDR X8, [X8 + 0x180]
	0x03E34C30 LDR W9, [X0 + 0xE0]
	0x03E34C34 LDR X21, [X8]
	0x03E34C38 CBNZ W9, 0x3E34C40
	0x03E34C3C BL 0x1C16DFC
	0x03E34C40 MOV X0, X21
	0x03E34C44 MOV X1, X31
	0x03E34C48 BL 0x338C698
	0x03E34C4C MOV X1, X0
	0x03E34C50 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5B5000
	006 Move X21, 0x338000
	007 Move W8, [X20+1860]
	008 Move X21, [X21+216]
	009 Move X19, X1
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x338000
	015 Move X0, [X0+216]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1860], W8
	019 Move X0, [X21]
	020 Call 0x1C17F10
	021 Move X1, X31
	022 Move X20, X0
	023 Call Object..ctor, X0
	024 Move [X20+16], W31
	025 Move [X20+32], X19
	026 Move X0, X20
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Move X21, [X31+40]
	031 Return X0

