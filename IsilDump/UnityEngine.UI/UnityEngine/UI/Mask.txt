Type: UnityEngine.UI.Mask

Method: UnityEngine.RectTransform get_rectTransform()

Disassembly:
	0x03E373E0 BL 0x1C16DFC
	0x03E373E4 MOVN W8, 0x0
	0x03E373E8 LSLV W8, W8, W21
	0x03E373EC ORN W1, W31, W8, 0x0
	0x03E373F0 MOVZ W3, 0x3
	0x03E373F4 MOVZ W4, 0xF
	0x03E373F8 MOV X0, X19
	0x03E373FC MOV W2, W31
	0x03E37400 MOV W5, W1
	0x03E37404 MOV W6, W31
	0x03E37408 MOV X7, X31
	0x03E3740C BL 0x3E44030
	0x03E37410 LDR X8, [X20 + 0xA8]
	0x03E37414 MOV X19, X0
	0x03E37418 MOV X1, X31
	0x03E3741C MOV X0, X8
	0x03E37420 BL 0x3E44A50
	0x03E37424 STR X19, [X20 + 0xA8]
	0x03E37428 MOV X0, X19
	0x03E3742C LDP X20, X19, [X31 + 0x10]
	0x03E37430 LDP X30, X21, [X31], #0x20
	0x03E37434 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5B2000
	005 Move W8, [X20+1898]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2BF000
	012 Move X0, [X0+1720]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1898], W8
	016 Move X0, [X19+32]
	017 Compare X0, 0
	018 JumpIfNotEqual {25}
	019 Move X8, 0x2BF000
	020 Move X8, [X8+1720]
	021 Move X0, X19
	022 Move X1, [X8]
	023 Call 0x21A4894, X0
	024 Move [X19+32], X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Boolean get_showMaskGraphic()

Disassembly:
	0x03E37438 STP D11, D10, [X31 - 0x30]!
	0x03E3743C STP D9, D8, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_showMaskGraphic(System.Boolean value)

Disassembly:
	0x03E37440 STP X30, X19, [X31 + 0x20]
	0x03E37444 MOV X19, X0
	0x03E37448 TBZ X1, 0x0, 0x3E374F0
	0x03E3744C MOV X0, X19
	0x03E37450 MOV V8.16B, V3.16B
	0x03E37454 MOV V10.16B, V2.16B
	0x03E37458 MOV V9.16B, V1.16B
	0x03E3745C MOV V11.16B, V0.16B
	0x03E37460 BL 0x3E37508
	0x03E37464 FADD S5, S11, S10
	0x03E37468 FADD S4, S9, S8
	0x03E3746C FSUB S6, S11, S5
	0x03E37470 FCMP S11, S5
	0x03E37474 FADD S16, S2, S0
	0x03E37478 FCSEL S7, S6, S10, GT
	0x03E3747C FCSEL S6, S5, S11, GT
	0x03E37480 FCMP S9, S4
	0x03E37484 FSUB S17, S0, S16
	0x03E37488 FCSEL S5, S4, S9, GT
	0x03E3748C FCMP S0, S16
	0x03E37490 FCSEL S2, S17, S2, GT
	0x03E37494 FADD S17, S3, S1
	0x03E37498 FCSEL S16, S16, S0, GT
	0x03E3749C FSUB S0, S1, S17
	0x03E374A0 FCMP S1, S17
	0x03E374A4 FCSEL S3, S0, S3, GT
	0x03E374A8 FCSEL S0, S17, S1, GT
	0x03E374AC FADD S1, S0, S3
	0x03E374B0 FCMP S1, S5
	0x03E374B4 MOVZ W1, 0x1
	0x03E374B8 B.LE 0x3E374F4
	0x03E374BC FADD S1, S6, S7
	0x03E374C0 FCMP S16, S1
	0x03E374C4 B.PL 0x3E374F4
	0x03E374C8 FADD S1, S16, S2
	0x03E374CC FCMP S1, S6
	0x03E374D0 B.LE 0x3E374F4
	0x03E374D4 FSUB S1, S9, S4
	0x03E374D8 FCMP S9, S4
	0x03E374DC FCSEL S1, S1, S8, GT
	0x03E374E0 FADD S1, S5, S1
	0x03E374E4 FCMP S0, S1
	0x03E374E8 CSET W1, PL
	0x03E374EC B 0x3E374F4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B2000
	006 Move W8, [X21+1899]
	007 Move X19, X0
	008 And W20, W1, 1
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2BD000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1899], W8
	018 Move W8, [X19+40]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X0, X19
	021 Move [X19+40], W20
	022 Call Mask.get_graphic, X0
	023 Move X8, 0x2BD000
	024 Move X8, [X8+1432]
	025 Move X20, X0
	026 Move X8, [X8]
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Inequality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {52}
	040 Move X0, X19
	041 Call Mask.get_graphic, X0
	042 Compare X0, 0
	043 JumpIfEqual {57}
	044 Move X8, [X0]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X2, [X8+776]
	048 Move X1, [X8+784]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 CallNoReturn X2
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return 
	057 Call 0x1C17F20

Method: UnityEngine.UI.Graphic get_graphic()

Disassembly:
	0x03E374F0 MOVZ W1, 0x1
	0x03E374F4 MOV X0, X19
	0x03E374F8 LDP X30, X19, [X31 + 0x20]
	0x03E374FC LDP D9, D8, [X31 + 0x10]
	0x03E37500 LDP D11, D10, [X31], #0x30
	0x03E37504 B 0x3E376C0
	0x03E37508 SUB X31, X31, 0xB0
	0x03E3750C STP X30, X23, [X31 + 0x80]
	0x03E37510 STP X22, X21, [X31 + 0x90]
	0x03E37514 STP X20, X19, [X31 + 0xA0]
	0x03E37518 ADRP X20, 0x5B1000
	0x03E3751C LDRB W8, [X20 + 0x775]
	0x03E37520 MOV X19, X0
	0x03E37524 TBNZ X8, 0x0, 0x3E3753C
	0x03E37528 ADRP X0, 0x2BC000
	0x03E3752C LDR X0, [X0 + 0x598]
	0x03E37530 BL 0x1C16CF4
	0x03E37534 MOVZ W8, 0x1
	0x03E37538 STRB W8, [X20 + 0x775]
	0x03E3753C MOVI V0.2D, 0x0
	0x03E37540 MOV X0, X19
	0x03E37544 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5B2000
	005 Move W8, [X20+1900]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x335000
	012 Move X0, [X0+504]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1900], W8
	016 Move X0, [X19+48]
	017 Compare X0, 0
	018 JumpIfNotEqual {25}
	019 Move X8, 0x335000
	020 Move X8, [X8+504]
	021 Move X0, X19
	022 Move X1, [X8]
	023 Call 0x21A4894, X0
	024 Move [X19+48], X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03E37548 STP V0, V0, [X31 + 0x60]
	0x03E3754C STP V0, V0, [X31 + 0x40]
	0x03E37550 BL 0x3CDB488
	0x03E37554 CBZ X0, 0x3E376BC

ISIL:
	001 Move W8, 1
	002 Move X1, X31
	003 Move [X0+40], W8
	004 Call UIBehaviour..ctor, X0
	005 Return 

Method: System.Boolean MaskEnabled()

Disassembly:
	0x03E37558 LDR X1, [X19 + 0xD0]
	0x03E3755C ADRP X20, 0x2BC000
	0x03E37560 LDR X20, [X20 + 0x598]
	0x03E37564 MOV X2, X31
	0x03E37568 BL 0x3C3F058
	0x03E3756C MOV X0, X19
	0x03E37570 MOV X1, X31
	0x03E37574 BL 0x3CDADE8
	0x03E37578 LDR X8, [X20]
	0x03E3757C MOV X20, X0
	0x03E37580 LDR W9, [X8 + 0xE0]
	0x03E37584 CBNZ W9, 0x3E37590
	0x03E37588 MOV X0, X8
	0x03E3758C BL 0x1C16DFC
	0x03E37590 MOV X0, X20
	0x03E37594 MOV X1, X31
	0x03E37598 BL 0x3C38948
	0x03E3759C TBZ X0, 0x0, 0x3E3763C
	0x03E375A0 MOV X0, X19
	0x03E375A4 MOV X1, X31
	0x03E375A8 BL 0x3CDADE8
	0x03E375AC CBZ X0, 0x3E376BC
	0x03E375B0 MOV X1, X31
	0x03E375B4 BL 0x3E24BA4
	0x03E375B8 CBZ X0, 0x3E376BC
	0x03E375BC MOV X1, X31
	0x03E375C0 BL 0x3C32E90
	0x03E375C4 CBZ X0, 0x3E376BC
	0x03E375C8 ADD X8, X31, 0x0
	0x03E375CC MOV X1, X31
	0x03E375D0 BL 0x3C3FF0C
	0x03E375D4 LDP V0, V1, [X31]
	0x03E375D8 LDP V2, V3, [X31 + 0x20]
	0x03E375DC MOV X20, X31
	0x03E375E0 MOV X21, X31
	0x03E375E4 STP V0, V1, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5B2000
	005 Move W8, [X20+1901]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2BD000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1901], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+456]
	019 Move X1, [X8+464]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {44}
	025 Move X20, 0x2BD000
	026 Move X20, [X20+1432]
	027 Move X0, X19
	028 Call Mask.get_graphic, X0
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X1, X31
	040 Move X2, X31
	041 Move X30, [X31+32]
	042 Call Object.op_Inequality, X0, X1
	043 Return X0
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move W0, W31
	047 Move X30, [X31+32]
	048 Return X0

Method: System.Void OnSiblingGraphicEnabledDisabled()

Disassembly:
	0x03E375E8 STP V2, V3, [X31 + 0x60]

ISIL:
	001 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03E375EC LDR X23, [X19 + 0xD0]
	0x03E375F0 CBZ X23, 0x3E376BC
	0x03E375F4 LDR W8, [X23 + 0x18]
	0x03E375F8 CMP X21, X8
	0x03E375FC B.CS 0x3E376B8
	0x03E37600 ADD X22, X23, X20
	0x03E37604 LDP S0, S1, [X22 + 0x20]
	0x03E37608 LDR V2, [X22 + 0x28]
	0x03E3760C ADD X0, X31, 0x40
	0x03E37610 MOV X1, X31
	0x03E37614 BL 0x3C281F8
	0x03E37618 LDR W8, [X23 + 0x18]
	0x03E3761C CMP X21, X8
	0x03E37620 B.CS 0x3E376B8
	0x03E37624 ADD X21, X21, 0x1
	0x03E37628 CMP X21, 0x4
	0x03E3762C ADD X20, X20, 0xC
	0x03E37630 STP S0, S1, [X22 + 0x20]
	0x03E37634 STR S2, [X22 + 0x28]
	0x03E37638 B.NE 0x3E375EC
	0x03E3763C LDR X8, [X19 + 0xD0]
	0x03E37640 CBZ X8, 0x3E376BC
	0x03E37644 LDR W10, [X8 + 0x18]
	0x03E37648 CBZ W10, 0x3E376B8
	0x03E3764C LDP S0, S1, [X8 + 0x20]
	0x03E37650 MOV X9, X31
	0x03E37654 SUB W10, W10, 0x1
	0x03E37658 MOV V2.16B, V0.16B
	0x03E3765C MOV V3.16B, V1.16B
	0x03E37660 CMP W10, 0x2
	0x03E37664 B.LS 0x3E376B8
	0x03E37668 ADD X11, X8, X9
	0x03E3766C LDP S4, S5, [X11 + 0x2C]
	0x03E37670 ADD X9, X9, 0xC
	0x03E37674 FCMP S4, S0
	0x03E37678 FCSEL S0, S4, S0, MI
	0x03E3767C FCMP S5, S1
	0x03E37680 FCSEL S1, S5, S1, MI
	0x03E37684 FCMP S4, S2
	0x03E37688 FCSEL S2, S4, S2, GT
	0x03E3768C FCMP S5, S3
	0x03E37690 FCSEL S3, S5, S3, GT
	0x03E37694 CMP X9, 0x24
	0x03E37698 B.NE 0x3E37660
	0x03E3769C LDP X20, X19, [X31 + 0xA0]
	0x03E376A0 LDP X22, X21, [X31 + 0x90]
	0x03E376A4 LDP X30, X23, [X31 + 0x80]
	0x03E376A8 FSUB S2, S2, S0
	0x03E376AC FSUB S3, S3, S1
	0x03E376B0 ADD X31, X31, 0xB0
	0x03E376B4 RET
	0x03E376B8 BL 0x1C16F28
	0x03E376BC BL 0x1C16F20
	0x03E376C0 STP X30, X21, [X31 - 0x20]!
	0x03E376C4 STP X20, X19, [X31 + 0x10]
	0x03E376C8 ADRP X21, 0x5B1000
	0x03E376CC LDRB W8, [X21 + 0x773]
	0x03E376D0 MOV W20, W1
	0x03E376D4 MOV X19, X0
	0x03E376D8 TBNZ X8, 0x0, 0x3E376FC
	0x03E376DC ADRP X0, 0x321000
	0x03E376E0 LDR X0, [X0 + 0x740]
	0x03E376E4 BL 0x1C16CF4
	0x03E376E8 ADRP X0, 0x334000
	0x03E376EC LDR X0, [X0 + 0x238]
	0x03E376F0 BL 0x1C16CF4
	0x03E376F4 MOVZ W8, 0x1
	0x03E376F8 STRB W8, [X21 + 0x773]
	0x03E376FC MOV X0, X19
	0x03E37700 MOV X1, X31
	0x03E37704 BL 0x3CDBD2C
	0x03E37708 CBZ X0, 0x3E377A0
	0x03E3770C MOV X1, X31
	0x03E37710 BL 0x3E22628
	0x03E37714 AND W8, W0, 0x1
	0x03E37718 AND W9, W20, 0x1
	0x03E3771C CMP W8, W9
	0x03E37720 B.EQ 0x3E37794
	0x03E37724 MOV X0, X19
	0x03E37728 MOV X1, X31
	0x03E3772C BL 0x3CDBD2C
	0x03E37730 CBZ X0, 0x3E377A0
	0x03E37734 AND W20, W20, 0x1
	0x03E37738 MOV W1, W20
	0x03E3773C MOV X2, X31
	0x03E37740 BL 0x3E22664
	0x03E37744 ADRP X8, 0x334000
	0x03E37748 LDR X8, [X8 + 0x238]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B2000
	006 Move X20, 0x2BD000
	007 Move W8, [X21+1902]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x335000
	015 Move X0, [X0+512]
	016 Call 0x1C17CF4
	017 Move X0, 0x2BD000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1902], W8
	022 Move X0, X19
	023 Move X1, X31
	024 Call UIBehaviour.OnEnable, X0
	025 Move X0, X19
	026 Call Mask.get_graphic, X0
	027 Move X8, [X20]
	028 Move X20, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Inequality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {93}
	042 Move X0, X19
	043 Call Mask.get_graphic, X0
	044 Compare X0, 0
	045 JumpIfEqual {100}
	046 Move X1, X31
	047 Call Graphic.get_canvasRenderer, X0
	048 Compare X0, 0
	049 JumpIfEqual {100}
	050 Move W1, 1
	051 Move X2, X31
	052 Call CanvasRenderer.set_hasPopInstruction, X0, X1
	053 Move X0, X19
	054 Call Mask.get_graphic, X0
	055 Compare X0, 0
	056 JumpIfEqual {100}
	057 Move X8, [X0]
	058 Move X9, [X8+776]
	059 Move X1, [X8+784]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move X0, X19
	062 Call Mask.get_graphic, X0
	063 Compare X0, 0
	064 JumpIfEqual {93}
	065 Move X20, 0x335000
	066 Move X20, [X20+512]
	067 Move X9, [X0]
	068 Move X8, [X20]
	069 Move W11, [X9+304]
	070 Move W10, [X8+304]
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X9, [X9+200]
	073 Add X9, X9, X10
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, X19
	077 Call Mask.get_graphic, X0
	078 Compare X0, 0
	079 JumpIfEqual {100}
	080 Move X9, [X0]
	081 Move X8, [X20]
	082 Move W11, [X9+304]
	083 Move W10, [X8+304]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X9, [X9+200]
	086 Add X9, X9, X10
	087 NotImplemented "Instruction LDUR not yet implemented."
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move W8, [X0+185]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move W8, 1
	092 Move [X0+185], W8
	093 Move X0, X19
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X30, [X31+32]
	097 Move X21, [X31+40]
	098 Call MaskUtilities.NotifyStencilStateChanged, X0
	099 Return 
	100 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03E379BC BLR X9
	0x03E379C0 TBZ X0, 0x0, 0x3E379D4
	0x03E379C4 MOV X0, X20
	0x03E379C8 MOV X1, X19
	0x03E379CC MOV X2, X31
	0x03E379D0 BL 0x3E3AEDC
	0x03E379D4 STR X20, [X19 + 0xB0]
	0x03E379D8 LDP X20, X19, [X31 + 0x20]
	0x03E379DC LDP X22, X21, [X31 + 0x10]
	0x03E379E0 LDR X30, [X31], #0x30
	0x03E379E4 RET
	0x03E379E8 BL 0x1C16F20
	0x03E379EC STP X30, X21, [X31 - 0x20]!
	0x03E379F0 STP X20, X19, [X31 + 0x10]
	0x03E379F4 ADRP X21, 0x5B1000
	0x03E379F8 ADRP X20, 0x321000
	0x03E379FC LDRB W8, [X21 + 0x774]
	0x03E37A00 LDR X20, [X20 + 0x738]
	0x03E37A04 MOV X19, X0
	0x03E37A08 TBNZ X8, 0x0, 0x3E37A20
	0x03E37A0C ADRP X0, 0x321000
	0x03E37A10 LDR X0, [X0 + 0x738]
	0x03E37A14 BL 0x1C16CF4
	0x03E37A18 MOVZ W8, 0x1
	0x03E37A1C STRB W8, [X21 + 0x774]
	0x03E37A20 MOV X0, X19
	0x03E37A24 MOV X1, X31
	0x03E37A28 BL 0x3CDC274
	0x03E37A2C LDR X8, [X19]
	0x03E37A30 MOVZ W9, 0x1
	0x03E37A34 STRB W9, [X19 + 0xA1]
	0x03E37A38 MOV X0, X19
	0x03E37A3C LDR X9, [X8 + 0x308]
	0x03E37A40 LDR X1, [X8 + 0x310]
	0x03E37A44 BLR X9
	0x03E37A48 MOV X0, X19
	0x03E37A4C BL 0x3E37898
	0x03E37A50 LDR X0, [X20]
	0x03E37A54 LDR X20, [X19 + 0xA8]
	0x03E37A58 LDR W8, [X0 + 0xE0]
	0x03E37A5C CBNZ W8, 0x3E37A64
	0x03E37A60 BL 0x1C16DFC
	0x03E37A64 MOV X0, X20
	0x03E37A68 MOV X1, X31
	0x03E37A6C BL 0x3E44A50
	0x03E37A70 LDRB W8, [X19 + 0xB9]
	0x03E37A74 STR X31, [X19 + 0xA8]
	0x03E37A78 CBZ W8, 0x3E37A8C
	0x03E37A7C MOV X0, X19
	0x03E37A80 LDP X20, X19, [X31 + 0x10]
	0x03E37A84 LDP X30, X21, [X31], #0x20
	0x03E37A88 B 0x3E36764
	0x03E37A8C LDP X20, X19, [X31 + 0x10]
	0x03E37A90 LDP X30, X21, [X31], #0x20
	0x03E37A94 RET
	0x03E37A98 STP X30, X19, [X31 - 0x10]!
	0x03E37A9C MOV X1, X31
	0x03E37AA0 MOV X19, X0
	0x03E37AA4 BL 0x3CDB900
	0x03E37AA8 MOV X0, X19
	0x03E37AAC MOV X1, X31
	0x03E37AB0 BL 0x3C32454
	0x03E37AB4 TBZ X0, 0x0, 0x3E37AE0
	0x03E37AB8 MOVZ W8, 0x1
	0x03E37ABC MOV X0, X19
	0x03E37AC0 STRB W8, [X19 + 0xA1]
	0x03E37AC4 BL 0x3E37898
	0x03E37AC8 LDR X8, [X19]
	0x03E37ACC MOV X0, X19
	0x03E37AD0 LDR X2, [X8 + 0x308]
	0x03E37AD4 LDR X1, [X8 + 0x310]
	0x03E37AD8 LDP X30, X19, [X31], #0x10
	0x03E37ADC BR X2
	0x03E37AE0 LDP X30, X19, [X31], #0x10
	0x03E37AE4 RET
	0x03E37AE8 RET
	0x03E37AEC STP X30, X19, [X31 - 0x10]!
	0x03E37AF0 MOV X1, X31
	0x03E37AF4 MOV X19, X0
	0x03E37AF8 BL 0x3CDC640
	0x03E37AFC MOV X0, X19
	0x03E37B00 MOV X1, X31
	0x03E37B04 BL 0x3C32454
	0x03E37B08 TBZ X0, 0x0, 0x3E37B34
	0x03E37B0C MOVZ W8, 0x1
	0x03E37B10 MOV X0, X19
	0x03E37B14 STRB W8, [X19 + 0xA1]
	0x03E37B18 BL 0x3E37898
	0x03E37B1C LDR X8, [X19]
	0x03E37B20 MOV X0, X19
	0x03E37B24 LDR X2, [X8 + 0x308]
	0x03E37B28 LDR X1, [X8 + 0x310]
	0x03E37B2C LDP X30, X19, [X31], #0x10
	0x03E37B30 BR X2
	0x03E37B34 LDP X30, X19, [X31], #0x10
	0x03E37B38 RET
	0x03E37B3C STP X29, X30, [X31 - 0x60]!
	0x03E37B40 STP X28, X27, [X31 + 0x10]
	0x03E37B44 STP X26, X25, [X31 + 0x20]
	0x03E37B48 STP X24, X23, [X31 + 0x30]
	0x03E37B4C STP X22, X21, [X31 + 0x40]
	0x03E37B50 STP X20, X19, [X31 + 0x50]
	0x03E37B54 ADRP X19, 0x5B1000
	0x03E37B58 ADRP X27, 0x334000
	0x03E37B5C LDRB W8, [X19 + 0x77F]
	0x03E37B60 LDR X27, [X27 + 0x240]
	0x03E37B64 MOV X21, X0
	0x03E37B68 TBNZ X8, 0x0, 0x3E37C1C
	0x03E37B6C ADRP X0, 0x32B000
	0x03E37B70 LDR X0, [X0 + 0x2F8]
	0x03E37B74 BL 0x1C16CF4
	0x03E37B78 ADRP X0, 0x334000
	0x03E37B7C LDR X0, [X0 + 0x248]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B2000
	006 Move X20, 0x2BD000
	007 Move W8, [X21+1903]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x335000
	015 Move X0, [X0+512]
	016 Call 0x1C17CF4
	017 Move X0, 0x2BD000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x322000
	021 Move X0, [X0+1848]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1903], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call UIBehaviour.OnDisable, X0
	028 Move X0, X19
	029 Call Mask.get_graphic, X0
	030 Move X8, [X20]
	031 Move X20, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X0, X20
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Inequality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {107}
	045 Move X0, X19
	046 Call Mask.get_graphic, X0
	047 Compare X0, 0
	048 JumpIfEqual {130}
	049 Move X8, [X0]
	050 Move X9, [X8+776]
	051 Move X1, [X8+784]
	052 NotImplemented "Instruction BLR not yet implemented."
	053 Move X0, X19
	054 Call Mask.get_graphic, X0
	055 Compare X0, 0
	056 JumpIfEqual {130}
	057 Move X1, X31
	058 Call Graphic.get_canvasRenderer, X0
	059 Compare X0, 0
	060 JumpIfEqual {130}
	061 Move W1, W31
	062 Move X2, X31
	063 Call CanvasRenderer.set_hasPopInstruction, X0, X1
	064 Move X0, X19
	065 Call Mask.get_graphic, X0
	066 Compare X0, 0
	067 JumpIfEqual {130}
	068 Move X1, X31
	069 Call Graphic.get_canvasRenderer, X0
	070 Compare X0, 0
	071 JumpIfEqual {130}
	072 Move W1, W31
	073 Move X2, X31
	074 Call CanvasRenderer.set_popMaterialCount, X0, X1
	075 Move X0, X19
	076 Call Mask.get_graphic, X0
	077 Compare X0, 0
	078 JumpIfEqual {107}
	079 Move X20, 0x335000
	080 Move X20, [X20+512]
	081 Move X9, [X0]
	082 Move X8, [X20]
	083 Move W11, [X9+304]
	084 Move W10, [X8+304]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X9, [X9+200]
	087 Add X9, X9, X10
	088 NotImplemented "Instruction LDUR not yet implemented."
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X0, X19
	091 Call Mask.get_graphic, X0
	092 Compare X0, 0
	093 JumpIfEqual {130}
	094 Move X9, [X0]
	095 Move X8, [X20]
	096 Move W11, [X9+304]
	097 Move W10, [X8+304]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X9, [X9+200]
	100 Add X9, X9, X10
	101 NotImplemented "Instruction LDUR not yet implemented."
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move W8, [X0+185]
	104 Compare W8, 0
	105 JumpIfEqual {107}
	106 Move [X0+185], W31
	107 Move X8, 0x322000
	108 Move X8, [X8+1848]
	109 Move X20, [X19+56]
	110 Move X0, [X8]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Move X0, X20
	116 Move X1, X31
	117 Call StencilMaterial.Remove, X0
	118 Move X0, [X19+64]
	119 Move X1, X31
	120 Move [X19+56], X31
	121 Call StencilMaterial.Remove, X0
	122 Move [X19+64], X31
	123 Move X0, X19
	124 Move X20, [X31+16]
	125 Move X19, [X31+24]
	126 Move X30, [X31+32]
	127 Move X21, [X31+40]
	128 Call MaskUtilities.NotifyStencilStateChanged, X0
	129 Return 
	130 Call 0x1C17F20

Method: System.Boolean IsRaycastLocationValid(UnityEngine.Vector2 sp, UnityEngine.Camera eventCamera)

Disassembly:
	0x03E37B80 BL 0x1C16CF4
	0x03E37B84 ADRP X0, 0x32B000
	0x03E37B88 LDR X0, [X0 + 0x300]
	0x03E37B8C BL 0x1C16CF4
	0x03E37B90 ADRP X0, 0x334000
	0x03E37B94 LDR X0, [X0 + 0x250]
	0x03E37B98 BL 0x1C16CF4
	0x03E37B9C ADRP X0, 0x32B000
	0x03E37BA0 LDR X0, [X0 + 0x308]
	0x03E37BA4 BL 0x1C16CF4
	0x03E37BA8 ADRP X0, 0x334000
	0x03E37BAC LDR X0, [X0 + 0x240]
	0x03E37BB0 BL 0x1C16CF4
	0x03E37BB4 ADRP X0, 0x321000
	0x03E37BB8 LDR X0, [X0 + 0x768]
	0x03E37BBC BL 0x1C16CF4
	0x03E37BC0 ADRP X0, 0x334000
	0x03E37BC4 LDR X0, [X0 + 0x258]
	0x03E37BC8 BL 0x1C16CF4
	0x03E37BCC ADRP X0, 0x334000
	0x03E37BD0 LDR X0, [X0 + 0x260]
	0x03E37BD4 BL 0x1C16CF4
	0x03E37BD8 ADRP X0, 0x32B000
	0x03E37BDC LDR X0, [X0 + 0x138]
	0x03E37BE0 BL 0x1C16CF4
	0x03E37BE4 ADRP X0, 0x321000
	0x03E37BE8 LDR X0, [X0 + 0x770]
	0x03E37BEC BL 0x1C16CF4
	0x03E37BF0 ADRP X0, 0x321000
	0x03E37BF4 LDR X0, [X0 + 0x778]
	0x03E37BF8 BL 0x1C16CF4
	0x03E37BFC ADRP X0, 0x32B000
	0x03E37C00 LDR X0, [X0 + 0x140]
	0x03E37C04 BL 0x1C16CF4
	0x03E37C08 ADRP X0, 0x2BC000
	0x03E37C0C LDR X0, [X0 + 0x598]
	0x03E37C10 BL 0x1C16CF4
	0x03E37C14 MOVZ W8, 0x1
	0x03E37C18 STRB W8, [X19 + 0x77F]
	0x03E37C1C LDR X0, [X27]
	0x03E37C20 ADRP X19, 0x334000
	0x03E37C24 ADRP X25, 0x32B000
	0x03E37C28 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x5B2000
	008 Move W8, [X21+1904]
	009 Move X19, X1
	010 Move V8, V1
	011 Move V9, V0
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x313000
	018 Move X0, [X0+1720]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1904], W8
	022 Move X0, X20
	023 Move X1, X31
	024 Call Behaviour.get_isActiveAndEnabled, X0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {53}
	029 Move X21, 0x313000
	030 Move X21, [X21+1720]
	031 Move X0, X20
	032 Call Mask.get_rectTransform, X0
	033 Move X8, [X21]
	034 Move X20, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X19
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+16]
	045 Move X21, [X31+24]
	046 Move V0, V9
	047 Move V1, V8
	048 Move X2, X31
	049 Move D9, [X31+48]
	050 Move D8, [X31+56]
	051 Call RectTransformUtility.RectangleContainsScreenPoint, X0, X1, X2
	052 Return X0
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X30, [X31+16]
	056 Move X21, [X31+24]
	057 Move W0, 1
	058 Move D9, [X31+48]
	059 Move D8, [X31+56]
	060 Return X0

Method: UnityEngine.Material GetModifiedMaterial(UnityEngine.Material baseMaterial)

Disassembly:
	0x03E37C2C LDR X19, [X19 + 0x248]
	0x03E37C30 LDR X25, [X25 + 0x308]
	0x03E37C34 CBNZ W8, 0x3E37C3C
	0x03E37C38 BL 0x1C16DFC
	0x03E37C3C LDR X0, [X19]
	0x03E37C40 ADRP X19, 0x32B000
	0x03E37C44 LDR X19, [X19 + 0x2F8]
	0x03E37C48 BL 0x28F98D4
	0x03E37C4C LDR X8, [X25]
	0x03E37C50 MOV X20, X0
	0x03E37C54 LDR W9, [X8 + 0xE0]
	0x03E37C58 CBNZ W9, 0x3E37C64
	0x03E37C5C MOV X0, X8
	0x03E37C60 BL 0x1C16DFC
	0x03E37C64 LDR X0, [X19]
	0x03E37C68 BL 0x28F98D4
	0x03E37C6C CBZ X21, 0x3E37F4C
	0x03E37C70 ADRP X28, 0x334000
	0x03E37C74 LDR X8, [X21]
	0x03E37C78 LDR X28, [X28 + 0x260]
	0x03E37C7C MOV X19, X0
	0x03E37C80 LDRH W9, [X8 + 0x12E]
	0x03E37C84 LDR X1, [X28]
	0x03E37C88 CBZ X9, 0x3E37CAC
	0x03E37C8C LDR X10, [X8 + 0xB0]
	0x03E37C90 ADD X10, X10, 0x8
	0x03E37C94 LDUR X11, [X10 - 0x8]
	0x03E37C98 CMP X11, X1
	0x03E37C9C B.EQ 0x3E37CBC
	0x03E37CA0 SUBS X9, X9, 0x1
	0x03E37CA4 ADD X10, X10, 0x10
	0x03E37CA8 B.NE 0x3E37C94
	0x03E37CAC MOV X0, X21
	0x03E37CB0 MOV W2, W31
	0x03E37CB4 BL 0x1C5C788
	0x03E37CB8 B 0x3E37CC8
	0x03E37CBC LDRSW X9, [X10]
	0x03E37CC0 ADD X8, X8, X9, 0x4, LSL
	0x03E37CC4 ADD X0, X8, 0x138
	0x03E37CC8 LDP X8, X1, [X0]
	0x03E37CCC MOV X0, X21
	0x03E37CD0 BLR X8
	0x03E37CD4 CBZ X0, 0x3E37F4C
	0x03E37CD8 ADRP X8, 0x334000
	0x03E37CDC LDR X8, [X8 + 0x258]
	0x03E37CE0 MOV W1, W31
	0x03E37CE4 MOV X2, X20
	0x03E37CE8 LDR X3, [X8]
	0x03E37CEC BL 0x21E64C8
	0x03E37CF0 CBZ X20, 0x3E37F4C
	0x03E37CF4 LDR W8, [X20 + 0x18]
	0x03E37CF8 CMP W8, 0x1
	0x03E37CFC B.LT 0x3E37DE4
	0x03E37D00 ADRP X29, 0x32B000
	0x03E37D04 ADRP X26, 0x2BC000
	0x03E37D08 LDR X29, [X29 + 0x140]
	0x03E37D0C LDR X26, [X26 + 0x598]
	0x03E37D10 MOV W23, W31
	0x03E37D14 LDR X2, [X29]
	0x03E37D18 MOV X0, X20
	0x03E37D1C MOV W1, W23
	0x03E37D20 BL 0x301BCCC
	0x03E37D24 CBZ X0, 0x3E37F4C
	0x03E37D28 MOV X1, X31
	0x03E37D2C MOV X22, X0
	0x03E37D30 BL 0x3C32ECC
	0x03E37D34 LDR X8, [X21]
	0x03E37D38 LDR X1, [X28]
	0x03E37D3C MOV X24, X0
	0x03E37D40 LDRH W9, [X8 + 0x12E]
	0x03E37D44 CBZ X9, 0x3E37D68
	0x03E37D48 LDR X10, [X8 + 0xB0]
	0x03E37D4C ADD X10, X10, 0x8
	0x03E37D50 LDUR X11, [X10 - 0x8]
	0x03E37D54 CMP X11, X1
	0x03E37D58 B.EQ 0x3E37D78
	0x03E37D5C SUBS X9, X9, 0x1
	0x03E37D60 ADD X10, X10, 0x10
	0x03E37D64 B.NE 0x3E37D50
	0x03E37D68 MOV X0, X21
	0x03E37D6C MOV W2, W31
	0x03E37D70 BL 0x1C5C788
	0x03E37D74 B 0x3E37D84
	0x03E37D78 LDRSW X9, [X10]
	0x03E37D7C ADD X8, X8, X9, 0x4, LSL
	0x03E37D80 ADD X0, X8, 0x138
	0x03E37D84 LDP X8, X1, [X0]
	0x03E37D88 MOV X0, X21
	0x03E37D8C BLR X8
	0x03E37D90 LDR X8, [X26]
	0x03E37D94 MOV X25, X0
	0x03E37D98 LDR W9, [X8 + 0xE0]
	0x03E37D9C CBNZ W9, 0x3E37DA8
	0x03E37DA0 MOV X0, X8
	0x03E37DA4 BL 0x1C16DFC
	0x03E37DA8 MOV X0, X24
	0x03E37DAC MOV X1, X25
	0x03E37DB0 MOV X2, X31
	0x03E37DB4 BL 0x3C3883C
	0x03E37DB8 TBNZ X0, 0x0, 0x3E37DCC
	0x03E37DBC MOV X0, X22
	0x03E37DC0 MOV X1, X31
	0x03E37DC4 BL 0x3C32454
	0x03E37DC8 TBNZ X0, 0x0, 0x3E37E50
	0x03E37DCC LDR W8, [X20 + 0x18]
	0x03E37DD0 ADD W23, W23, 0x1
	0x03E37DD4 CMP W23, W8
	0x03E37DD8 B.LT 0x3E37D14
	0x03E37DDC ADRP X25, 0x32B000
	0x03E37DE0 LDR X25, [X25 + 0x308]
	0x03E37DE4 MOV X22, X31
	0x03E37DE8 LDR X0, [X27]
	0x03E37DEC ADRP X21, 0x334000
	0x03E37DF0 LDR W8, [X0 + 0xE0]
	0x03E37DF4 LDR X21, [X21 + 0x250]
	0x03E37DF8 CBNZ W8, 0x3E37E00
	0x03E37DFC BL 0x1C16DFC
	0x03E37E00 LDR X1, [X21]
	0x03E37E04 ADRP X21, 0x32B000
	0x03E37E08 LDR X21, [X21 + 0x300]
	0x03E37E0C MOV X0, X20
	0x03E37E10 BL 0x28F9A14
	0x03E37E14 LDR X0, [X25]
	0x03E37E18 LDR W8, [X0 + 0xE0]
	0x03E37E1C CBNZ W8, 0x3E37E24
	0x03E37E20 BL 0x1C16DFC
	0x03E37E24 LDR X1, [X21]
	0x03E37E28 MOV X0, X19
	0x03E37E2C BL 0x28F9A14
	0x03E37E30 MOV X0, X22
	0x03E37E34 LDP X20, X19, [X31 + 0x50]
	0x03E37E38 LDP X22, X21, [X31 + 0x40]
	0x03E37E3C LDP X24, X23, [X31 + 0x30]
	0x03E37E40 LDP X26, X25, [X31 + 0x20]
	0x03E37E44 LDP X28, X27, [X31 + 0x10]
	0x03E37E48 LDP X29, X30, [X31], #0x60
	0x03E37E4C RET
	0x03E37E50 LDR X8, [X21]
	0x03E37E54 ADRP X25, 0x32B000
	0x03E37E58 LDR X1, [X28]
	0x03E37E5C LDRH W9, [X8 + 0x12E]
	0x03E37E60 LDR X25, [X25 + 0x308]
	0x03E37E64 CBZ X9, 0x3E37E88
	0x03E37E68 LDR X10, [X8 + 0xB0]
	0x03E37E6C ADD X10, X10, 0x8
	0x03E37E70 LDUR X11, [X10 - 0x8]
	0x03E37E74 CMP X11, X1
	0x03E37E78 B.EQ 0x3E37E98
	0x03E37E7C SUBS X9, X9, 0x1
	0x03E37E80 ADD X10, X10, 0x10
	0x03E37E84 B.NE 0x3E37E70
	0x03E37E88 MOV X0, X21
	0x03E37E8C MOV W2, W31
	0x03E37E90 BL 0x1C5C788
	0x03E37E94 B 0x3E37EA4
	0x03E37E98 LDRSW X9, [X10]
	0x03E37E9C ADD X8, X8, X9, 0x4, LSL
	0x03E37EA0 ADD X0, X8, 0x138
	0x03E37EA4 LDP X8, X1, [X0]
	0x03E37EA8 MOV X0, X21
	0x03E37EAC BLR X8
	0x03E37EB0 CBZ X0, 0x3E37F4C
	0x03E37EB4 ADRP X8, 0x321000
	0x03E37EB8 LDR X8, [X8 + 0x768]
	0x03E37EBC MOV W1, W31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x5B2000
	008 Move W8, [X21+1905]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x2BD000
	016 Move X0, [X0+2600]
	017 Call 0x1C17CF4
	018 Move X0, 0x322000
	019 Move X0, [X0+1848]
	020 Call 0x1C17CF4
	021 Move X0, 0x335000
	022 Move X0, [X0+536]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1905], W8
	026 Move X8, [X19]
	027 Move X0, X19
	028 Move X9, [X8+616]
	029 Move X1, [X8+624]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {174}
	035 Move X0, X19
	036 Move X1, X31
	037 Call Component.get_transform, X0
	038 Call MaskUtilities.FindRootSortOverrideCanvas, X0
	039 Move X21, X0
	040 Move X0, X19
	041 Move X1, X31
	042 Call Component.get_transform, X0
	043 Move X1, X21
	044 Call MaskUtilities.GetStencilDepth, X0, X1
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X8, 0x322000
	047 Move W9, [X19+40]
	048 Move X8, [X8+1848]
	049 And W31, W0, 31
	050 Move X8, [X8]
	051 Move W10, 1
	052 NotImplemented "Instruction LSLV not yet implemented."
	053 Subtract W21, W10, 1
	054 Move W11, [X8+224]
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Move W9, 15
	057 Or W22, W21, W10
	058 NotImplemented "Instruction CSEL not yet implemented."
	059 Compare W11, 0
	060 JumpIfNotEqual {63}
	061 Move X0, X8
	062 Call 0x1C17DFC
	063 Move W2, 2
	064 Move W3, 3
	065 Move X0, X20
	066 Move W1, W22
	067 Move W4, W23
	068 Move W5, W21
	069 Move W6, W22
	070 Move X7, X31
	071 Call StencilMaterial.Add, X0, X1, X2, X3, X4, X5, X6
	072 Move X8, [X19+56]
	073 Move X23, X0
	074 Move X1, X31
	075 Move X0, X8
	076 Call StencilMaterial.Remove, X0
	077 Move X0, X19
	078 Move [X19+56], X23
	079 Call Mask.get_graphic, X0
	080 Compare X0, 0
	081 JumpIfEqual {182}
	082 Move X1, X31
	083 Call Graphic.get_canvasRenderer, X0
	084 Compare X0, 0
	085 JumpIfEqual {182}
	086 Move W1, 1
	087 Move X2, X31
	088 Call CanvasRenderer.set_hasPopInstruction, X0, X1
	089 Move W2, 2
	090 Move W3, 3
	091 Move X0, X20
	092 Move W1, W21
	093 Move W4, W31
	094 Move W5, W21
	095 Move W6, W22
	096 Move X7, X31
	097 Call StencilMaterial.Add, X0, X1, X2, X3, X4, X5, X6
	098 Move X0, X19
	099 Move X1, X31
	100 Call Component.get_gameObject, X0
	101 Move X8, 0x2BD000
	102 Move X8, [X8+2600]
	103 Move X19, X0
	104 Move X8, [X8]
	105 Move W9, [X8+224]
	106 Compare W9, 0
	107 JumpIfNotEqual {110}
	108 Move X0, X8
	109 Call 0x1C17DFC
	110 Move X8, 0x335000
	111 Move X8, [X8+536]
	112 Move X1, X19
	113 Move X2, X31
	114 Move X0, [X8]
	115 Call Debug.LogWarning, X0, X1
	116 Move X0, [X8]
	117 NotImplemented "Instruction CMP not yet implemented."
	118 Move W9, 15
	119 NotImplemented "Instruction CSEL not yet implemented."
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move W1, 1
	125 Move W2, 2
	126 Move W3, 8
	127 Move X0, X20
	128 Move W4, W21
	129 Move X5, X31
	130 Call StencilMaterial.Add, X0, X1, X2, X3, X4
	131 Move X8, [X19+56]
	132 Move X21, X0
	133 Move X1, X31
	134 Move X0, X8
	135 Call StencilMaterial.Remove, X0
	136 Move W1, 1
	137 Move W2, 1
	138 Move W3, 8
	139 Move X0, X20
	140 Move W4, W31
	141 Move X5, X31
	142 Move [X19+56], X21
	143 Call StencilMaterial.Add, X0, X1, X2, X3, X4
	144 Move X8, [X19+64]
	145 Move X20, X0
	146 Move X1, X31
	147 Move X0, X8
	148 Call StencilMaterial.Remove, X0
	149 Move X0, X19
	150 Move [X19+64], X20
	151 Call Mask.get_graphic, X0
	152 Compare X0, 0
	153 JumpIfEqual {182}
	154 Move X1, X31
	155 Call Graphic.get_canvasRenderer, X0
	156 Compare X0, 0
	157 JumpIfEqual {182}
	158 Move W1, 1
	159 Move X2, X31
	160 Call CanvasRenderer.set_popMaterialCount, X0, X1
	161 Move X0, X19
	162 Call Mask.get_graphic, X0
	163 Compare X0, 0
	164 JumpIfEqual {182}
	165 Move X1, X31
	166 Call Graphic.get_canvasRenderer, X0
	167 Compare X0, 0
	168 JumpIfEqual {182}
	169 Move X1, [X19+64]
	170 Move W2, W31
	171 Move X3, X31
	172 Call CanvasRenderer.SetPopMaterial, X0, X1, X2
	173 Move X20, [X19+56]
	174 Move X0, X20
	175 Move X20, [X31+32]
	176 Move X19, [X31+40]
	177 Move X22, [X31+16]
	178 Move X21, [X31+24]
	179 Move X30, [X31+48]
	180 Move X23, [X31+56]
	181 Return X0
	182 Call 0x1C17F20

