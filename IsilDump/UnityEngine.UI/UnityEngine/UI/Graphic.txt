Type: UnityEngine.UI.Graphic

Method: UnityEngine.Material get_defaultGraphicMaterial()

Disassembly:
	0x03CDBBE4 CBNZ W8, 0x3CDBBEC
	0x03CDBBE8 BL 0x1C16DFC
	0x03CDBBEC MOV X0, X19
	0x03CDBBF0 MOV X1, X31
	0x03CDBBF4 MOV X2, X31
	0x03CDBBF8 BL 0x3C3883C
	0x03CDBBFC TBNZ X0, 0x0, 0x3CDBCFC
	0x03CDBC00 ADRP X22, 0x46E000
	0x03CDBC04 LDR X22, [X22 + 0x580]
	0x03CDBC08 LDR X0, [X22]
	0x03CDBC0C LDR W8, [X0 + 0xE0]
	0x03CDBC10 CBNZ W8, 0x3CDBC18
	0x03CDBC14 BL 0x1C16DFC
	0x03CDBC18 BL 0x3CDF9A4
	0x03CDBC1C CBZ X0, 0x3CDBD0C
	0x03CDBC20 LDR X0, [X0 + 0x10]
	0x03CDBC24 CBZ X0, 0x3CDBD0C
	0x03CDBC28 ADRP X8, 0x487000
	0x03CDBC2C LDR X8, [X8 + 0x408]
	0x03CDBC30 ADD X2, X31, 0x8
	0x03CDBC34 MOV X1, X20
	0x03CDBC38 LDR X3, [X8]
	0x03CDBC3C BL 0x2AA6B2C
	0x03CDBC40 LDR X0, [X31 + 0x8]
	0x03CDBC44 CBZ X0, 0x3CDBC74
	0x03CDBC48 ADRP X8, 0x487000
	0x03CDBC4C LDR X8, [X8 + 0x428]
	0x03CDBC50 MOVZ W2, 0x1
	0x03CDBC54 MOV X1, X19
	0x03CDBC58 LDR X3, [X8]
	0x03CDBC5C BL 0x2DE276C
	0x03CDBC60 LDR X0, [X22]
	0x03CDBC64 LDR W8, [X0 + 0xE0]
	0x03CDBC68 CBNZ W8, 0x3CDBCF0
	0x03CDBC6C BL 0x1C16DFC
	0x03CDBC70 B 0x3CDBCF0
	0x03CDBC74 ADRP X8, 0x487000
	0x03CDBC78 LDR X8, [X8 + 0x440]
	0x03CDBC7C LDR X0, [X8]
	0x03CDBC80 BL 0x1C16F10
	0x03CDBC84 ADRP X8, 0x487000
	0x03CDBC88 LDR X8, [X8 + 0x438]
	0x03CDBC8C MOV X21, X0
	0x03CDBC90 LDR X1, [X8]
	0x03CDBC94 BL 0x2DE2F98
	0x03CDBC98 STR X21, [X31 + 0x8]
	0x03CDBC9C CBZ X21, 0x3CDBD0C
	0x03CDBCA0 ADRP X8, 0x487000
	0x03CDBCA4 LDR X8, [X8 + 0x430]
	0x03CDBCA8 MOV X0, X21
	0x03CDBCAC MOV X1, X19
	0x03CDBCB0 LDR X2, [X8]
	0x03CDBCB4 BL 0x2DE2674
	0x03CDBCB8 LDR X0, [X22]
	0x03CDBCBC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x70D000
	005 Move X20, 0x47F000
	006 Move W8, [X19+1165]
	007 Move X20, [X20+280]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x47F000
	013 Move X0, [X0+280]
	014 Call 0x1C17CF4
	015 Move X0, 0x419000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1165], W8
	020 Move X0, [X20]
	021 Move X19, 0x419000
	022 Move W8, [X0+224]
	023 Move X19, [X19+1432]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X19]
	029 Move X9, [X0+184]
	030 Move W10, [X8+224]
	031 Move X19, [X9]
	032 Compare W10, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {56}
	044 Move X0, X31
	045 Call Canvas.GetDefaultCanvasMaterial
	046 Move X8, [X20]
	047 Move X19, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {54}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X8, [X20]
	054 Move X8, [X8+184]
	055 Move [X8], X19
	056 Move X0, [X20]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {62}
	060 Call 0x1C17DFC
	061 Move X0, [X20]
	062 Move X8, [X0+184]
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X0, [X8]
	066 Move X30, [X31+32]
	067 Return X0

Method: UnityEngine.Color get_color()

Disassembly:
	0x03CDBCC0 CBNZ W8, 0x3CDBCC8
	0x03CDBCC4 BL 0x1C16DFC
	0x03CDBCC8 BL 0x3CDF9A4

ISIL:
	001 Move S0, [X0+40]
	002 Move S1, [X0+44]
	003 Move S2, [X0+48]
	004 Move S3, [X0+52]
	005 Return X0

Method: System.Void set_color(UnityEngine.Color value)

Disassembly:
	0x03CDBCCC CBZ X0, 0x3CDBD0C
	0x03CDBCD0 LDR X0, [X0 + 0x10]
	0x03CDBCD4 CBZ X0, 0x3CDBD0C
	0x03CDBCD8 ADRP X8, 0x487000
	0x03CDBCDC LDR X2, [X31 + 0x8]
	0x03CDBCE0 LDR X8, [X8 + 0x420]
	0x03CDBCE4 MOV X1, X20
	0x03CDBCE8 LDR X3, [X8]
	0x03CDBCEC BL 0x2AA5098
	0x03CDBCF0 MOV X0, X20
	0x03CDBCF4 MOV X1, X19
	0x03CDBCF8 BL 0x3CDAFD8
	0x03CDBCFC LDP X20, X19, [X31 + 0x20]
	0x03CDBD00 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Add X0, X0, 40
	005 Move X1, X31
	006 Call SetPropertyUtility.SetColor, X0, X1
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {18}
	011 Move X8, [X19]
	012 Move X0, X19
	013 Move X2, [X8+760]
	014 Move X1, [X8+768]
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 CallNoReturn X2
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 

Method: System.Boolean get_raycastTarget()

Disassembly:
	0x03CDBD04 LDR X30, [X31], #0x30
	0x03CDBD08 RET

ISIL:
	001 Move W0, [X0+58]
	002 Return X0

Method: System.Void set_raycastTarget(System.Boolean value)

Disassembly:
	0x03CDBD0C BL 0x1C16F20
	0x03CDBD10 STR X30, [X31 - 0x10]!
	0x03CDBD14 BL 0x3CDBD2C
	0x03CDBD18 CBZ X0, 0x3CDBD28
	0x03CDBD1C MOV X1, X31
	0x03CDBD20 LDR X30, [X31], #0x10
	0x03CDBD24 B 0x3E22530
	0x03CDBD28 BL 0x1C16F20
	0x03CDBD2C STR X30, [X31 - 0x20]!
	0x03CDBD30 STP X20, X19, [X31 + 0x10]
	0x03CDBD34 ADRP X20, 0x70C000
	0x03CDBD38 LDRB W8, [X20 + 0x49A]
	0x03CDBD3C MOV X19, X0
	0x03CDBD40 TBNZ X8, 0x0, 0x3CDBD64
	0x03CDBD44 ADRP X0, 0x47D000
	0x03CDBD48 LDR X0, [X0 + 0x720]
	0x03CDBD4C BL 0x1C16CF4
	0x03CDBD50 ADRP X0, 0x47D000
	0x03CDBD54 LDR X0, [X0 + 0x758]
	0x03CDBD58 BL 0x1C16CF4
	0x03CDBD5C MOVZ W8, 0x1
	0x03CDBD60 STRB W8, [X20 + 0x49A]
	0x03CDBD64 LDR X0, [X19 + 0x58]
	0x03CDBD68 CBNZ X0, 0x3CDBDAC
	0x03CDBD6C ADRP X8, 0x47D000
	0x03CDBD70 LDR X8, [X8 + 0x720]
	0x03CDBD74 MOV X0, X19
	0x03CDBD78 LDR X1, [X8]
	0x03CDBD7C BL 0x21A3894
	0x03CDBD80 STR X0, [X19 + 0x58]
	0x03CDBD84 CBNZ X0, 0x3CDBDAC
	0x03CDBD88 MOV X0, X19
	0x03CDBD8C MOV X1, X31
	0x03CDBD90 BL 0x3C32ECC
	0x03CDBD94 CBZ X0, 0x3CDBDB8
	0x03CDBD98 ADRP X8, 0x47D000
	0x03CDBD9C LDR X8, [X8 + 0x758]
	0x03CDBDA0 LDR X1, [X8]
	0x03CDBDA4 BL 0x21E51FC
	0x03CDBDA8 STR X0, [X19 + 0x58]
	0x03CDBDAC LDP X20, X19, [X31 + 0x10]
	0x03CDBDB0 LDR X30, [X31], #0x20
	0x03CDBDB4 RET
	0x03CDBDB8 BL 0x1C16F20
	0x03CDBDBC STR X30, [X31 - 0x20]!
	0x03CDBDC0 STP X20, X19, [X31 + 0x10]
	0x03CDBDC4 ADRP X19, 0x70C000
	0x03CDBDC8 ADRP X20, 0x47E000
	0x03CDBDCC LDRB W8, [X19 + 0x49B]
	0x03CDBDD0 LDR X20, [X20 + 0x118]
	0x03CDBDD4 TBNZ X8, 0x0, 0x3CDBDEC
	0x03CDBDD8 ADRP X0, 0x47E000
	0x03CDBDDC LDR X0, [X0 + 0x118]
	0x03CDBDE0 BL 0x1C16CF4
	0x03CDBDE4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x70D000
	007 Move W8, [X21+1166]
	008 Move W20, W1
	009 Move X19, X0
	010 And W22, W1, 1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x46F000
	016 Move X0, [X0+1408]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1166], W8
	020 Move W8, [X19+58]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Compare W8, 0
	023 JumpIfEqual {38}
	024 Move X0, X19
	025 Call Graphic.get_canvas, X0
	026 Move X8, 0x46F000
	027 Move X8, [X8+1408]
	028 Move X21, X0
	029 Move X8, [X8]
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Move X0, X8
	034 Call 0x1C17DFC
	035 Move X0, X21
	036 Move X1, X19
	037 Call GraphicRegistry.UnregisterRaycastGraphicForCanvas, X0, X1
	038 Move [X19+58], W22
	039 Move TEMP, X20
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {64}
	043 Move X0, X19
	044 Move X1, X31
	045 Call Behaviour.get_isActiveAndEnabled, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {64}
	050 Move X0, X19
	051 Call Graphic.get_canvas, X0
	052 Move X8, 0x46F000
	053 Move X8, [X8+1408]
	054 Move X20, X0
	055 Move X8, [X8]
	056 Move W9, [X8+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {61}
	059 Move X0, X8
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Move X1, X19
	063 Call GraphicRegistry.RegisterRaycastGraphicForCanvas, X0, X1
	064 Move [X19+59], W22
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X30, [X31+48]
	070 Return 

Method: UnityEngine.Vector4 get_raycastPadding()

Disassembly:
	0x03CDC1C4 CBNZ W9, 0x3CDC1D0
	0x03CDC1C8 MOV X0, X8
	0x03CDC1CC BL 0x1C16DFC

ISIL:
	001 Move S0, [X0+60]
	002 Move S1, [X0+64]
	003 Move S2, [X0+68]
	004 Move S3, [X0+72]
	005 Return X0

Method: System.Void set_raycastPadding(UnityEngine.Vector4 value)

Disassembly:
	0x03CDC1D0 ADRP X22, 0x417000
	0x03CDC1D4 LDR X22, [X22 + 0x598]
	0x03CDC1D8 MOV X0, X20

ISIL:
	001 Move [X0+60], S0
	002 Move [X0+68], S1
	003 Move [X0+68], S2
	004 Move [X0+76], S3
	005 Return 

Method: System.Boolean get_useLegacyMeshGeneration()

Disassembly:
	0x03CDC1DC MOV X1, X19
	0x03CDC1E0 BL 0x3CDBB24

ISIL:
	001 Move W0, [X0+160]
	002 Return X0

Method: System.Void set_useLegacyMeshGeneration(System.Boolean value)

Disassembly:
	0x03CDC1E4 LDR X0, [X21]
	0x03CDC1E8 LDR W8, [X0 + 0xE0]
	0x03CDC1EC CBNZ W8, 0x3CDC1F8

ISIL:
	001 And W8, W1, 1
	002 Move [X0+160], W8
	003 Return 

Method: System.Void .ctor()

Disassembly:
	0x03CDC1F0 BL 0x1C16DFC
	0x03CDC1F4 LDR X0, [X21]
	0x03CDC1F8 LDR X8, [X22]
	0x03CDC1FC LDR X9, [X0 + 0xB8]
	0x03CDC200 LDR W10, [X8 + 0xE0]
	0x03CDC204 LDR X20, [X9 + 0x8]
	0x03CDC208 CBNZ W10, 0x3CDC214
	0x03CDC20C MOV X0, X8
	0x03CDC210 BL 0x1C16DFC
	0x03CDC214 MOV X0, X20
	0x03CDC218 MOV X1, X31
	0x03CDC21C MOV X2, X31
	0x03CDC220 BL 0x3C3883C
	0x03CDC224 TBZ X0, 0x0, 0x3CDC254
	0x03CDC228 MOV X0, X31
	0x03CDC22C BL 0x3C1B370
	0x03CDC230 LDR X8, [X21]
	0x03CDC234 MOV X20, X0
	0x03CDC238 LDR W9, [X8 + 0xE0]
	0x03CDC23C CBNZ W9, 0x3CDC24C
	0x03CDC240 MOV X0, X8
	0x03CDC244 BL 0x1C16DFC
	0x03CDC248 LDR X8, [X21]
	0x03CDC24C LDR X8, [X8 + 0xB8]
	0x03CDC250 STR X20, [X8 + 0x8]
	0x03CDC254 LDR X8, [X19]
	0x03CDC258 MOV X0, X19
	0x03CDC25C LDP X20, X19, [X31 + 0x20]
	0x03CDC260 LDP X22, X21, [X31 + 0x10]
	0x03CDC264 LDR X2, [X8 + 0x2D8]
	0x03CDC268 LDR X1, [X8 + 0x2E0]
	0x03CDC26C LDR X30, [X31], #0x30
	0x03CDC270 BR X2
	0x03CDC274 STR X30, [X31 - 0x30]!
	0x03CDC278 STP X22, X21, [X31 + 0x10]
	0x03CDC27C STP X20, X19, [X31 + 0x20]
	0x03CDC280 ADRP X21, 0x70B000
	0x03CDC284 ADRP X20, 0x46D000
	0x03CDC288 LDRB W8, [X21 + 0x4A1]
	0x03CDC28C LDR X20, [X20 + 0x580]
	0x03CDC290 MOV X19, X0
	0x03CDC294 TBNZ X8, 0x0, 0x3CDC2D0
	0x03CDC298 ADRP X0, 0x47C000
	0x03CDC29C LDR X0, [X0 + 0x718]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1167]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x487000
	012 Move X0, [X0+1096]
	013 Call 0x1C17CF4
	014 Move X0, 0x487000
	015 Move X0, [X0+1104]
	016 Call 0x1C17CF4
	017 Move X0, 0x487000
	018 Move X0, [X0+1112]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1167], W8
	022 Move V0, 0
	023 Move W8, 257
	024 Move X0, X19
	025 Move X1, X31
	026 Move [X19+40], V0
	027 NotImplemented "Instruction STRH not yet implemented."
	028 Call UIBehaviour..ctor, X0
	029 Move X20, [X19+152]
	030 Compare X20, 0
	031 JumpIfNotEqual {44}
	032 Move X8, 0x487000
	033 Move X8, [X8+1112]
	034 Move X0, [X8]
	035 Call 0x1C17F10
	036 Move X8, 0x487000
	037 Move X8, [X8+1104]
	038 Move X20, X0
	039 Move X1, [X8]
	040 Call 0x270A254, X0
	041 Move [X19+152], X20
	042 Compare X20, 0
	043 JumpIfEqual {51}
	044 Move W8, 1
	045 Move [X20+16], X19
	046 Move [X19+160], W8
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return 
	051 Call 0x1C17F20

Method: System.Void SetAllDirty()

Disassembly:
	0x03CDC2A0 BL 0x1C16CF4
	0x03CDC2A4 ADRP X0, 0x46D000
	0x03CDC2A8 LDR X0, [X0 + 0x580]
	0x03CDC2AC BL 0x1C16CF4
	0x03CDC2B0 ADRP X0, 0x41A000
	0x03CDC2B4 LDR X0, [X0 + 0x920]
	0x03CDC2B8 BL 0x1C16CF4
	0x03CDC2BC ADRP X0, 0x417000
	0x03CDC2C0 LDR X0, [X0 + 0x598]
	0x03CDC2C4 BL 0x1C16CF4
	0x03CDC2C8 MOVZ W8, 0x1
	0x03CDC2CC STRB W8, [X21 + 0x4A1]
	0x03CDC2D0 ADRP X22, 0x47C000
	0x03CDC2D4 LDR X22, [X22 + 0x718]
	0x03CDC2D8 MOV X0, X19
	0x03CDC2DC BL 0x3CDADE8
	0x03CDC2E0 LDR X8, [X20]
	0x03CDC2E4 MOV X20, X0
	0x03CDC2E8 LDR W9, [X8 + 0xE0]
	0x03CDC2EC CBNZ W9, 0x3CDC2F8
	0x03CDC2F0 MOV X0, X8
	0x03CDC2F4 BL 0x1C16DFC
	0x03CDC2F8 ADRP X21, 0x417000
	0x03CDC2FC LDR X21, [X21 + 0x598]
	0x03CDC300 MOV X0, X20
	0x03CDC304 MOV X1, X19
	0x03CDC308 BL 0x3CDC3BC
	0x03CDC30C LDR X0, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+56]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {8}
	007 Move [X19+56], W31
	008 Move X8, [X19]
	009 Move X0, X19
	010 Move X9, [X8+744]
	011 Move X1, [X8+752]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move W8, [X19+57]
	014 Compare W8, 0
	015 JumpIfEqual {17}
	016 Move [X19+57], W31
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X9, [X8+776]
	020 Move X1, [X8+784]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X8, [X19]
	023 Move X0, X19
	024 Move X9, [X8+760]
	025 Move X1, [X8+768]
	026 NotImplemented "Instruction BLR not yet implemented."
	027 Move X0, X19
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]

Method: System.Void SetLayoutDirty()

Disassembly:
	0x03CDC3E8 LDR X0, [X0 + 0x400]
	0x03CDC3EC BL 0x1C16CF4
	0x03CDC3F0 ADRP X0, 0x486000
	0x03CDC3F4 LDR X0, [X0 + 0x408]
	0x03CDC3F8 BL 0x1C16CF4
	0x03CDC3FC ADRP X0, 0x46D000
	0x03CDC400 LDR X0, [X0 + 0x580]
	0x03CDC404 BL 0x1C16CF4
	0x03CDC408 ADRP X0, 0x486000
	0x03CDC40C LDR X0, [X0 + 0x480]
	0x03CDC410 BL 0x1C16CF4
	0x03CDC414 ADRP X0, 0x486000
	0x03CDC418 LDR X0, [X0 + 0x460]
	0x03CDC41C BL 0x1C16CF4
	0x03CDC420 ADRP X0, 0x417000
	0x03CDC424 LDR X0, [X0 + 0x598]
	0x03CDC428 BL 0x1C16CF4
	0x03CDC42C MOVZ W8, 0x1
	0x03CDC430 STRB W8, [X22 + 0x4C3]
	0x03CDC434 LDR X0, [X21]
	0x03CDC438 STR X31, [X31 + 0x8]
	0x03CDC43C LDR W8, [X0 + 0xE0]
	0x03CDC440 CBNZ W8, 0x3CDC448
	0x03CDC444 BL 0x1C16DFC
	0x03CDC448 MOV X0, X20
	0x03CDC44C MOV X1, X31
	0x03CDC450 MOV X2, X31
	0x03CDC454 BL 0x3C3883C
	0x03CDC458 TBNZ X0, 0x0, 0x3CDC528
	0x03CDC45C ADRP X21, 0x46D000
	0x03CDC460 LDR X21, [X21 + 0x580]
	0x03CDC464 LDR X0, [X21]
	0x03CDC468 LDR W8, [X0 + 0xE0]
	0x03CDC46C CBNZ W8, 0x3CDC474
	0x03CDC470 BL 0x1C16DFC
	0x03CDC474 BL 0x3CDF9A4
	0x03CDC478 CBZ X0, 0x3CDC538
	0x03CDC47C LDR X0, [X0 + 0x10]
	0x03CDC480 CBZ X0, 0x3CDC538
	0x03CDC484 ADRP X8, 0x486000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1168]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x41B000
	012 Move X0, [X0+2336]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1168], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+456]
	019 Move X1, [X8+464]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {49}
	025 Move X20, 0x41B000
	026 Move X20, [X20+2336]
	027 Move X0, X19
	028 Call Graphic.get_rectTransform, X0
	029 Move X8, [X20]
	030 Move X20, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X31
	038 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	039 Move X8, [X19+112]
	040 Compare X8, 0
	041 JumpIfEqual {49}
	042 Move X2, [X8+24]
	043 Move X0, [X8+64]
	044 Move X1, [X8+40]
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 CallNoReturn X2
	049 Move X20, [X31+16]
	050 Move X19, [X31+24]
	051 Move X30, [X31+32]
	052 Return 

Method: System.Void SetVerticesDirty()

Disassembly:
	0x03CDC4E0 CBNZ W8, 0x3CDC4E8
	0x03CDC4E4 BL 0x1C16DFC
	0x03CDC4E8 BL 0x3CDF9A4
	0x03CDC4EC CBZ X0, 0x3CDC538
	0x03CDC4F0 LDR X0, [X0 + 0x10]
	0x03CDC4F4 CBZ X0, 0x3CDC538
	0x03CDC4F8 ADRP X8, 0x486000
	0x03CDC4FC LDR X8, [X8 + 0x400]
	0x03CDC500 MOV X1, X20
	0x03CDC504 LDR X2, [X8]
	0x03CDC508 BL 0x2AA64F8
	0x03CDC50C LDR X0, [X21]
	0x03CDC510 LDR W8, [X0 + 0xE0]
	0x03CDC514 CBNZ W8, 0x3CDC51C
	0x03CDC518 BL 0x1C16DFC
	0x03CDC51C MOV X0, X20
	0x03CDC520 MOV X1, X19
	0x03CDC524 BL 0x3CDFA44
	0x03CDC528 LDP X20, X19, [X31 + 0x20]
	0x03CDC52C LDP X22, X21, [X31 + 0x10]
	0x03CDC530 LDR X30, [X31], #0x30
	0x03CDC534 RET
	0x03CDC538 BL 0x1C16F20
	0x03CDC53C STR X30, [X31 - 0x30]!
	0x03CDC540 STP X22, X21, [X31 + 0x10]
	0x03CDC544 STP X20, X19, [X31 + 0x20]
	0x03CDC548 ADRP X21, 0x70B000
	0x03CDC54C ADRP X20, 0x46D000
	0x03CDC550 LDRB W8, [X21 + 0x4A2]
	0x03CDC554 LDR X20, [X20 + 0x580]
	0x03CDC558 MOV X19, X0
	0x03CDC55C TBNZ X8, 0x0, 0x3CDC58C
	0x03CDC560 ADRP X0, 0x47C000
	0x03CDC564 LDR X0, [X0 + 0x718]
	0x03CDC568 BL 0x1C16CF4
	0x03CDC56C ADRP X0, 0x46D000
	0x03CDC570 LDR X0, [X0 + 0x580]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1169]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x47D000
	012 Move X0, [X0+1816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1169], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+456]
	019 Move X1, [X8+464]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {46}
	025 Move X8, 0x47D000
	026 Move X8, [X8+1816]
	027 Move W9, 1
	028 Move [X19+104], W9
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Call CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild, X0
	036 Move X8, [X19+120]
	037 Compare X8, 0
	038 JumpIfEqual {46}
	039 Move X2, [X8+24]
	040 Move X0, [X8+64]
	041 Move X1, [X8+40]
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 CallNoReturn X2
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 

Method: System.Void SetMaterialDirty()

Disassembly:
	0x03CDC574 BL 0x1C16CF4
	0x03CDC578 ADRP X0, 0x417000
	0x03CDC57C LDR X0, [X0 + 0x598]
	0x03CDC580 BL 0x1C16CF4
	0x03CDC584 MOVZ W8, 0x1
	0x03CDC588 STRB W8, [X21 + 0x4A2]
	0x03CDC58C ADRP X22, 0x47C000
	0x03CDC590 LDR X22, [X22 + 0x718]
	0x03CDC594 MOV X0, X19
	0x03CDC598 BL 0x3CDADE8
	0x03CDC59C LDR X8, [X20]
	0x03CDC5A0 MOV X20, X0
	0x03CDC5A4 LDR W9, [X8 + 0xE0]
	0x03CDC5A8 CBNZ W9, 0x3CDC5B4
	0x03CDC5AC MOV X0, X8
	0x03CDC5B0 BL 0x1C16DFC
	0x03CDC5B4 ADRP X21, 0x417000
	0x03CDC5B8 LDR X21, [X21 + 0x598]
	0x03CDC5BC MOV X0, X20
	0x03CDC5C0 MOV X1, X19
	0x03CDC5C4 BL 0x3CDB75C
	0x03CDC5C8 LDR X0, [X22]
	0x03CDC5CC LDR W8, [X0 + 0xE0]
	0x03CDC5D0 CBNZ W8, 0x3CDC5D8
	0x03CDC5D4 BL 0x1C16DFC
	0x03CDC5D8 MOV X0, X19
	0x03CDC5DC BL 0x3CD1884
	0x03CDC5E0 LDR X0, [X21]
	0x03CDC5E4 LDR X20, [X19 + 0x88]
	0x03CDC5E8 LDR W8, [X0 + 0xE0]
	0x03CDC5EC CBNZ W8, 0x3CDC5F4
	0x03CDC5F0 BL 0x1C16DFC
	0x03CDC5F4 MOV X0, X20
	0x03CDC5F8 MOV X1, X31
	0x03CDC5FC BL 0x3C38948
	0x03CDC600 TBZ X0, 0x0, 0x3CDC624
	0x03CDC604 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1170]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x47D000
	012 Move X0, [X0+1816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1170], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+456]
	019 Move X1, [X8+464]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {46}
	025 Move X8, 0x47D000
	026 Move X8, [X8+1816]
	027 Move W9, 1
	028 Move [X19+105], W9
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X19
	035 Call CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild, X0
	036 Move X8, [X19+128]
	037 Compare X8, 0
	038 JumpIfEqual {46}
	039 Move X2, [X8+24]
	040 Move X0, [X8+64]
	041 Move X1, [X8+40]
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 CallNoReturn X2
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 

Method: System.Void SetRaycastDirty()

Disassembly:
	0x03CDC310 LDR W8, [X0 + 0xE0]
	0x03CDC314 CBNZ W8, 0x3CDC31C
	0x03CDC318 BL 0x1C16DFC
	0x03CDC31C MOV X0, X19
	0x03CDC320 BL 0x3CD1BBC
	0x03CDC324 MOV X0, X19
	0x03CDC328 BL 0x3CDBD2C
	0x03CDC32C LDR X8, [X21]
	0x03CDC330 MOV X20, X0
	0x03CDC334 LDR W9, [X8 + 0xE0]
	0x03CDC338 CBNZ W9, 0x3CDC344
	0x03CDC33C MOV X0, X8
	0x03CDC340 BL 0x1C16DFC
	0x03CDC344 MOV X0, X20
	0x03CDC348 MOV X1, X31
	0x03CDC34C MOV X2, X31
	0x03CDC350 BL 0x3C354F8
	0x03CDC354 TBZ X0, 0x0, 0x3CDC36C
	0x03CDC358 MOV X0, X19
	0x03CDC35C BL 0x3CDBD2C
	0x03CDC360 CBZ X0, 0x3CDC3B8
	0x03CDC364 MOV X1, X31
	0x03CDC368 BL 0x3E22AF4
	0x03CDC36C ADRP X20, 0x41A000
	0x03CDC370 LDR X20, [X20 + 0x920]
	0x03CDC374 MOV X0, X19
	0x03CDC378 BL 0x3CDB488
	0x03CDC37C LDR X8, [X20]
	0x03CDC380 MOV X20, X0
	0x03CDC384 LDR W9, [X8 + 0xE0]
	0x03CDC388 CBNZ W9, 0x3CDC394
	0x03CDC38C MOV X0, X8
	0x03CDC390 BL 0x1C16DFC
	0x03CDC394 MOV X0, X20
	0x03CDC398 MOV X1, X31
	0x03CDC39C BL 0x3E2F3D8
	0x03CDC3A0 MOV X0, X19
	0x03CDC3A4 LDP X20, X19, [X31 + 0x20]
	0x03CDC3A8 LDP X22, X21, [X31 + 0x10]
	0x03CDC3AC MOV X1, X31
	0x03CDC3B0 LDR X30, [X31], #0x30
	0x03CDC3B4 B 0x3E4BDC4
	0x03CDC3B8 BL 0x1C16F20
	0x03CDC3BC STR X30, [X31 - 0x30]!
	0x03CDC3C0 STP X22, X21, [X31 + 0x10]
	0x03CDC3C4 STP X20, X19, [X31 + 0x20]
	0x03CDC3C8 ADRP X22, 0x70B000
	0x03CDC3CC ADRP X21, 0x417000
	0x03CDC3D0 LDRB W8, [X22 + 0x4C3]
	0x03CDC3D4 LDR X21, [X21 + 0x598]
	0x03CDC3D8 MOV X19, X1
	0x03CDC3DC MOV X20, X0
	0x03CDC3E0 TBNZ X8, 0x0, 0x3CDC434
	0x03CDC3E4 ADRP X0, 0x486000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1171]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x46E000
	012 Move X0, [X0+1408]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1171], W8
	016 Move W9, [X19+59]
	017 Move W8, [X19+58]
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Compare W8, 0
	020 JumpIfEqual {45}
	021 Move X0, X19
	022 Move X1, X31
	023 Call Behaviour.get_isActiveAndEnabled, X0
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {42}
	028 Move X0, X19
	029 Call Graphic.get_canvas, X0
	030 Move X8, 0x46E000
	031 Move X8, [X8+1408]
	032 Move X20, X0
	033 Move X8, [X8]
	034 Move W9, [X8+224]
	035 Compare W9, 0
	036 JumpIfNotEqual {39}
	037 Move X0, X8
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X19
	041 Call GraphicRegistry.RegisterRaycastGraphicForCanvas, X0, X1
	042 Move W8, [X19+58]
	043 Compare W8, 0
	044 JumpIfNotEqual {59}
	045 Move X0, X19
	046 Call Graphic.get_canvas, X0
	047 Move X8, 0x46E000
	048 Move X8, [X8+1408]
	049 Move X20, X0
	050 Move X8, [X8]
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Move X0, X20
	057 Move X1, X19
	058 Call GraphicRegistry.UnregisterRaycastGraphicForCanvas, X0, X1
	059 Move W8, [X19+58]
	060 Move [X19+59], W8
	061 Move X20, [X31+16]
	062 Move X19, [X31+24]
	063 Move X30, [X31+32]
	064 Return 

Method: System.Void OnRectTransformDimensionsChange()

Disassembly:
	0x03CDC608 LDR X20, [X19 + 0x88]
	0x03CDC60C LDR W8, [X0 + 0xE0]
	0x03CDC610 CBNZ W8, 0x3CDC618
	0x03CDC614 BL 0x1C16DFC
	0x03CDC618 MOV X0, X20
	0x03CDC61C MOV X1, X31
	0x03CDC620 BL 0x3C394A8
	0x03CDC624 STR X31, [X19 + 0x88]
	0x03CDC628 MOV X0, X19
	0x03CDC62C LDP X20, X19, [X31 + 0x20]
	0x03CDC630 LDP X22, X21, [X31 + 0x10]
	0x03CDC634 MOV X1, X31
	0x03CDC638 LDR X30, [X31], #0x30
	0x03CDC63C B 0x3E5AD84
	0x03CDC640 STR X30, [X31 - 0x30]!
	0x03CDC644 STP X22, X21, [X31 + 0x10]
	0x03CDC648 STP X20, X19, [X31 + 0x20]
	0x03CDC64C ADRP X20, 0x70B000
	0x03CDC650 LDRB W8, [X20 + 0x4A3]
	0x03CDC654 MOV X19, X0
	0x03CDC658 TBNZ X8, 0x0, 0x3CDC67C
	0x03CDC65C ADRP X0, 0x46D000
	0x03CDC660 LDR X0, [X0 + 0x580]
	0x03CDC664 BL 0x1C16CF4
	0x03CDC668 ADRP X0, 0x417000
	0x03CDC66C LDR X0, [X0 + 0x598]
	0x03CDC670 BL 0x1C16CF4
	0x03CDC674 MOVZ W8, 0x1
	0x03CDC678 STRB W8, [X20 + 0x4A3]
	0x03CDC67C LDR X8, [X19]
	0x03CDC680 LDR X20, [X19 + 0x60]
	0x03CDC684 STR X31, [X19 + 0x60]
	0x03CDC688 ADRP X22, 0x46D000
	0x03CDC68C LDP X9, X1, [X8 + 0x1C8]
	0x03CDC690 LDR X22, [X22 + 0x580]
	0x03CDC694 MOV X0, X19
	0x03CDC698 BLR X9
	0x03CDC69C TBZ X0, 0x0, 0x3CDC740
	0x03CDC6A0 ADRP X21, 0x417000
	0x03CDC6A4 LDR X21, [X21 + 0x598]
	0x03CDC6A8 MOV X0, X19
	0x03CDC6AC BL 0x3CDB9B4
	0x03CDC6B0 LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1172]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x47D000
	012 Move X0, [X0+1816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1172], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call Component.get_gameObject, X0
	019 Compare X0, 0
	020 JumpIfEqual {57}
	021 Move X1, X31
	022 Call GameObject.get_activeInHierarchy, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {45}
	027 Move X8, 0x47D000
	028 Move X8, [X8+1816]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Call CanvasUpdateRegistry.IsRebuildingLayout
	035 Move X8, [X19]
	036 Move W20, W0
	037 Move X0, X19
	038 Move X9, [X8+760]
	039 Move X1, [X8+768]
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move TEMP, X20
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {49}
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Return 
	049 Move X8, [X19]
	050 Move X0, X19
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X2, [X8+744]
	054 Move X1, [X8+752]
	055 Move X30, [X31+32]
	056 CallNoReturn X2
	057 Call 0x1C17F20

Method: System.Void OnBeforeTransformParentChanged()

Disassembly:
	0x03CDC6B4 LDR X21, [X19 + 0x60]
	0x03CDC6B8 LDR W8, [X0 + 0xE0]
	0x03CDC6BC CBNZ W8, 0x3CDC6C4
	0x03CDC6C0 BL 0x1C16DFC
	0x03CDC6C4 MOV X0, X20
	0x03CDC6C8 MOV X1, X21
	0x03CDC6CC MOV X2, X31
	0x03CDC6D0 BL 0x3C354F8
	0x03CDC6D4 TBZ X0, 0x0, 0x3CDC768
	0x03CDC6D8 LDR X0, [X22]
	0x03CDC6DC LDR W8, [X0 + 0xE0]
	0x03CDC6E0 CBNZ W8, 0x3CDC6E8
	0x03CDC6E4 BL 0x1C16DFC
	0x03CDC6E8 MOV X0, X20
	0x03CDC6EC MOV X1, X19
	0x03CDC6F0 BL 0x3CDB75C
	0x03CDC6F4 LDR X8, [X19]
	0x03CDC6F8 MOV X0, X19
	0x03CDC6FC LDP X9, X1, [X8 + 0x1C8]
	0x03CDC700 BLR X9
	0x03CDC704 TBZ X0, 0x0, 0x3CDC768
	0x03CDC708 MOV X0, X19
	0x03CDC70C BL 0x3CDADE8
	0x03CDC710 LDR X8, [X22]
	0x03CDC714 MOV X20, X0
	0x03CDC718 LDR W9, [X8 + 0xE0]
	0x03CDC71C CBNZ W9, 0x3CDC728
	0x03CDC720 MOV X0, X8
	0x03CDC724 BL 0x1C16DFC
	0x03CDC728 MOV X0, X20
	0x03CDC72C MOV X1, X19
	0x03CDC730 LDP X20, X19, [X31 + 0x20]
	0x03CDC734 LDP X22, X21, [X31 + 0x10]
	0x03CDC738 LDR X30, [X31], #0x30
	0x03CDC73C B 0x3CDBB24
	0x03CDC740 LDR X0, [X22]
	0x03CDC744 LDR W8, [X0 + 0xE0]
	0x03CDC748 CBNZ W8, 0x3CDC750
	0x03CDC74C BL 0x1C16DFC
	0x03CDC750 MOV X0, X20
	0x03CDC754 MOV X1, X19
	0x03CDC758 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x70C000
	006 Move X20, 0x46E000
	007 Move W8, [X21+1173]
	008 Move X20, [X20+1408]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x46E000
	015 Move X0, [X0+1408]
	016 Call 0x1C17CF4
	017 Move X0, 0x41B000
	018 Move X0, [X0+2336]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1173], W8
	022 Move X21, 0x41B000
	023 Move X21, [X21+2336]
	024 Move X0, X19
	025 Call Graphic.get_canvas, X0
	026 Move X8, [X20]
	027 Move X20, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X19
	035 Call GraphicRegistry.UnregisterGraphicForCanvas, X0, X1
	036 Move X0, X19
	037 Call Graphic.get_rectTransform, X0
	038 Move X8, [X21]
	039 Move X19, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	052 Return 

Method: System.Void OnTransformParentChanged()

Disassembly:
	0x03CDC900 LDP X9, X1, [X8 + 0x1C8]
	0x03CDC904 BLR X9
	0x03CDC908 TBZ X0, 0x0, 0x3CDC998
	0x03CDC90C MOV X0, X19
	0x03CDC910 BL 0x3CDBD2C
	0x03CDC914 CBZ X0, 0x3CDC9A4
	0x03CDC918 MOVZ W1, 0x1
	0x03CDC91C MOV X2, X31
	0x03CDC920 BL 0x3E224A8
	0x03CDC924 MOV X0, X19
	0x03CDC928 BL 0x3CDBD2C
	0x03CDC92C LDR X8, [X19]
	0x03CDC930 MOV X20, X0
	0x03CDC934 MOV X0, X19
	0x03CDC938 LDR X9, [X8 + 0x358]
	0x03CDC93C LDR X1, [X8 + 0x360]
	0x03CDC940 BLR X9
	0x03CDC944 CBZ X20, 0x3CDC9A4
	0x03CDC948 MOV X1, X0
	0x03CDC94C MOV X0, X20
	0x03CDC950 MOV W2, W31
	0x03CDC954 MOV X3, X31
	0x03CDC958 BL 0x3E2293C
	0x03CDC95C MOV X0, X19
	0x03CDC960 BL 0x3CDBD2C
	0x03CDC964 LDR X8, [X19]
	0x03CDC968 MOV X20, X0
	0x03CDC96C MOV X0, X19
	0x03CDC970 LDR X9, [X8 + 0x368]
	0x03CDC974 LDR X1, [X8 + 0x370]
	0x03CDC978 BLR X9
	0x03CDC97C CBZ X20, 0x3CDC9A4
	0x03CDC980 MOV X1, X0
	0x03CDC984 MOV X0, X20
	0x03CDC988 LDP X20, X19, [X31 + 0x10]
	0x03CDC98C MOV X2, X31
	0x03CDC990 LDR X30, [X31], #0x20
	0x03CDC994 B 0x3E22A28
	0x03CDC998 LDP X20, X19, [X31 + 0x10]
	0x03CDC99C LDR X30, [X31], #0x20
	0x03CDC9A0 RET
	0x03CDC9A4 BL 0x1C16F20
	0x03CDC9A8 LDRB W8, [X0 + 0xA0]
	0x03CDC9AC CBZ W8, 0x3CDC9B4
	0x03CDC9B0 B 0x3CDC9B8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1174]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x46E000
	012 Move X0, [X0+1408]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1174], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call UIBehaviour.OnTransformParentChanged, X0
	019 Move X8, [X19]
	020 Move [X19+96], X31
	021 Move X0, X19
	022 Move X9, [X8+456]
	023 Move X1, [X8+464]
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {53}
	029 Move X20, 0x46E000
	030 Move X20, [X20+1408]
	031 Move X0, X19
	032 Call Graphic.CacheCanvas, X0
	033 Move X0, X19
	034 Call Graphic.get_canvas, X0
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X19
	044 Call GraphicRegistry.RegisterGraphicForCanvas, X0, X1
	045 Move X8, [X19]
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X2, [X8+728]
	050 Move X1, [X8+736]
	051 Move X30, [X31+32]
	052 CallNoReturn X2
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Return 

Method: System.Int32 get_depth()

Disassembly:
	0x03CDCD10 BL 0x1C171E0
	0x03CDCD14 MOV X0, X25
	0x03CDCD18 MOV X1, X24
	0x03CDCD1C BL 0x1C171E0
	0x03CDCD20 STP X29, X30, [X31 - 0x60]!
	0x03CDCD24 STP X28, X27, [X31 + 0x10]
	0x03CDCD28 STP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Call Graphic.get_canvasRenderer, X0
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X1, X31
	006 Move X30, [X31+16]
	007 Call CanvasRenderer.get_absoluteDepth, X0
	008 Return X0
	009 Call 0x1C17F20

Method: UnityEngine.RectTransform get_rectTransform()

Disassembly:
	0x03CDC488 LDR X8, [X8 + 0x408]
	0x03CDC48C ADD X2, X31, 0x8
	0x03CDC490 MOV X1, X20
	0x03CDC494 LDR X3, [X8]
	0x03CDC498 BL 0x2AA6B2C
	0x03CDC49C TBZ X0, 0x0, 0x3CDC528
	0x03CDC4A0 LDR X0, [X31 + 0x8]
	0x03CDC4A4 CBZ X0, 0x3CDC538
	0x03CDC4A8 ADRP X8, 0x486000
	0x03CDC4AC LDR X8, [X8 + 0x480]
	0x03CDC4B0 MOV X1, X19
	0x03CDC4B4 LDR X2, [X8]
	0x03CDC4B8 BL 0x2DE2890
	0x03CDC4BC LDR X0, [X31 + 0x8]
	0x03CDC4C0 CBZ X0, 0x3CDC538
	0x03CDC4C4 ADRP X8, 0x486000
	0x03CDC4C8 LDR X8, [X8 + 0x460]
	0x03CDC4CC LDR X1, [X8]
	0x03CDC4D0 BL 0x2DE2A8C
	0x03CDC4D4 CBNZ W0, 0x3CDC50C
	0x03CDC4D8 LDR X0, [X21]
	0x03CDC4DC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1175]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x41A000
	012 Move X0, [X0+1720]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1175], W8
	016 Move X0, [X19+80]
	017 Compare X0, 0
	018 JumpIfNotEqual {25}
	019 Move X8, 0x41A000
	020 Move X8, [X8+1720]
	021 Move X0, X19
	022 Move X1, [X8]
	023 Call 0x21A4894, X0
	024 Move [X19+80], X0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return X0

Method: UnityEngine.Canvas get_canvas()

Disassembly:
	0x03CDBDE8 STRB W8, [X19 + 0x49B]
	0x03CDBDEC LDR X0, [X20]
	0x03CDBDF0 LDR W8, [X0 + 0xE0]
	0x03CDBDF4 CBNZ W8, 0x3CDBDFC
	0x03CDBDF8 BL 0x1C16DFC
	0x03CDBDFC LDP X20, X19, [X31 + 0x10]
	0x03CDBE00 LDR X30, [X31], #0x20
	0x03CDBE04 B 0x3CDABE4
	0x03CDBE08 STP X30, X21, [X31 - 0x20]!
	0x03CDBE0C STP X20, X19, [X31 + 0x10]
	0x03CDBE10 ADRP X21, 0x70C000
	0x03CDBE14 ADRP X20, 0x418000
	0x03CDBE18 LDRB W8, [X21 + 0x49C]
	0x03CDBE1C LDR X20, [X20 + 0x598]
	0x03CDBE20 MOV X19, X0
	0x03CDBE24 TBNZ X8, 0x0, 0x3CDBE3C
	0x03CDBE28 ADRP X0, 0x418000
	0x03CDBE2C LDR X0, [X0 + 0x598]
	0x03CDBE30 BL 0x1C16CF4
	0x03CDBE34 MOVZ W8, 0x1
	0x03CDBE38 STRB W8, [X21 + 0x49C]
	0x03CDBE3C LDR X0, [X20]
	0x03CDBE40 LDR X20, [X19 + 0x20]
	0x03CDBE44 LDR W8, [X0 + 0xE0]
	0x03CDBE48 CBNZ W8, 0x3CDBE50
	0x03CDBE4C BL 0x1C16DFC
	0x03CDBE50 MOV X0, X20
	0x03CDBE54 MOV X1, X31
	0x03CDBE58 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x70D000
	006 Move X20, 0x419000
	007 Move W8, [X21+1176]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x419000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1176], W8
	019 Move X0, [X20]
	020 Move X20, [X19+96]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {35}
	033 Move X0, X19
	034 Call Graphic.CacheCanvas, X0
	035 Move X0, [X19+96]
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Return X0

Method: System.Void CacheCanvas()

Disassembly:
	0x03CDC9B4 B 0x3CDCD20
	0x03CDC9B8 STP X29, X30, [X31 - 0x60]!
	0x03CDC9BC STP X28, X27, [X31 + 0x10]
	0x03CDC9C0 STP X26, X25, [X31 + 0x20]
	0x03CDC9C4 STP X24, X23, [X31 + 0x30]
	0x03CDC9C8 STP X22, X21, [X31 + 0x40]
	0x03CDC9CC STP X20, X19, [X31 + 0x50]
	0x03CDC9D0 ADRP X21, 0x70B000
	0x03CDC9D4 ADRP X20, 0x417000
	0x03CDC9D8 LDRB W8, [X21 + 0x4A7]
	0x03CDC9DC LDR X20, [X20 + 0x598]
	0x03CDC9E0 MOV X19, X0
	0x03CDC9E4 TBNZ X8, 0x0, 0x3CDCA68
	0x03CDC9E8 ADRP X0, 0x43F000
	0x03CDC9EC LDR X0, [X0 + 0xA18]
	0x03CDC9F0 BL 0x1C16CF4
	0x03CDC9F4 ADRP X0, 0x43F000
	0x03CDC9F8 LDR X0, [X0 + 0xA20]
	0x03CDC9FC BL 0x1C16CF4
	0x03CDCA00 ADRP X0, 0x43F000
	0x03CDCA04 LDR X0, [X0 + 0xA28]
	0x03CDCA08 BL 0x1C16CF4
	0x03CDCA0C ADRP X0, 0x47D000
	0x03CDCA10 LDR X0, [X0 + 0x118]
	0x03CDCA14 BL 0x1C16CF4
	0x03CDCA18 ADRP X0, 0x486000
	0x03CDCA1C LDR X0, [X0 + 0x488]
	0x03CDCA20 BL 0x1C16CF4
	0x03CDCA24 ADRP X0, 0x486000
	0x03CDCA28 LDR X0, [X0 + 0x490]
	0x03CDCA2C BL 0x1C16CF4
	0x03CDCA30 ADRP X0, 0x43F000
	0x03CDCA34 LDR X0, [X0 + 0xA40]
	0x03CDCA38 BL 0x1C16CF4
	0x03CDCA3C ADRP X0, 0x43F000
	0x03CDCA40 LDR X0, [X0 + 0xA48]
	0x03CDCA44 BL 0x1C16CF4
	0x03CDCA48 ADRP X0, 0x417000
	0x03CDCA4C LDR X0, [X0 + 0x598]
	0x03CDCA50 BL 0x1C16CF4
	0x03CDCA54 ADRP X0, 0x417000
	0x03CDCA58 LDR X0, [X0 + 0x6C0]
	0x03CDCA5C BL 0x1C16CF4
	0x03CDCA60 MOVZ W8, 0x1
	0x03CDCA64 STRB W8, [X21 + 0x4A7]
	0x03CDCA68 MOV X0, X19
	0x03CDCA6C BL 0x3CDB488
	0x03CDCA70 LDR X8, [X20]
	0x03CDCA74 MOV X20, X0
	0x03CDCA78 LDR W9, [X8 + 0xE0]
	0x03CDCA7C CBNZ W9, 0x3CDCA88
	0x03CDCA80 MOV X0, X8
	0x03CDCA84 BL 0x1C16DFC
	0x03CDCA88 ADRP X26, 0x47D000
	0x03CDCA8C LDR X26, [X26 + 0x118]
	0x03CDCA90 MOV X0, X20
	0x03CDCA94 MOV X1, X31
	0x03CDCA98 MOV X2, X31
	0x03CDCA9C BL 0x3C354F8
	0x03CDCAA0 TBZ X0, 0x0, 0x3CDCADC
	0x03CDCAA4 MOV X0, X19
	0x03CDCAA8 BL 0x3CDB488
	0x03CDCAAC CBZ X0, 0x3CDCD04
	0x03CDCAB0 MOV X1, X31
	0x03CDCAB4 BL 0x3C3E51C
	0x03CDCAB8 FCMP S2, 0x0
	0x03CDCABC B.LT 0x3CDCADC
	0x03CDCAC0 MOV X0, X19
	0x03CDCAC4 BL 0x3CDB488
	0x03CDCAC8 CBZ X0, 0x3CDCD04
	0x03CDCACC MOV X1, X31
	0x03CDCAD0 BL 0x3C3E51C
	0x03CDCAD4 FCMP S3, 0x0
	0x03CDCAD8 B.GE 0x3CDCCD4
	0x03CDCADC LDR X0, [X26]
	0x03CDCAE0 LDR W8, [X0 + 0xE0]
	0x03CDCAE4 CBNZ W8, 0x3CDCAEC
	0x03CDCAE8 BL 0x1C16DFC
	0x03CDCAEC BL 0x3CDD0BC
	0x03CDCAF0 CBZ X0, 0x3CDCD04
	0x03CDCAF4 MOV X1, X31
	0x03CDCAF8 BL 0x3C19C94
	0x03CDCAFC ADRP X27, 0x43F000
	0x03CDCB00 LDR X27, [X27 + 0xA28]
	0x03CDCB04 ADRP X22, 0x43F000
	0x03CDCB08 ADRP X20, 0x486000
	0x03CDCB0C ADRP X21, 0x417000
	0x03CDCB10 LDR X0, [X27]
	0x03CDCB14 LDR W8, [X0 + 0xE0]
	0x03CDCB18 LDR X22, [X22 + 0xA18]
	0x03CDCB1C LDR X20, [X20 + 0x488]
	0x03CDCB20 LDR X21, [X21 + 0x6C0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x70C000
	008 Move X22, 0x487000
	009 Move W8, [X20+1177]
	010 Move X22, [X22+776]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x487000
	017 Move X0, [X0+760]
	018 Call 0x1C17CF4
	019 Move X0, 0x487000
	020 Move X0, [X0+768]
	021 Call 0x1C17CF4
	022 Move X0, 0x487000
	023 Move X0, [X0+776]
	024 Call 0x1C17CF4
	025 Move X0, 0x47D000
	026 Move X0, [X0+1896]
	027 Call 0x1C17CF4
	028 Move X0, 0x47D000
	029 Move X0, [X0+1904]
	030 Call 0x1C17CF4
	031 Move X0, 0x47D000
	032 Move X0, [X0+1912]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+1177], W8
	036 Move X0, [X22]
	037 Move X20, 0x487000
	038 Move W8, [X0+224]
	039 Move X20, [X20+760]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, [X20]
	044 Call CollectionPool`2<Object, Object>.Get
	045 Move X20, X0
	046 Move X0, X19
	047 Move X1, X31
	048 Call Component.get_gameObject, X0
	049 Compare X0, 0
	050 JumpIfEqual {105}
	051 Move X8, 0x47D000
	052 Move X8, [X8+1896]
	053 Move W1, W31
	054 Move X2, X20
	055 Move X3, [X8]
	056 Call 0x21E74C8, X0, X1, X2
	057 Compare X20, 0
	058 JumpIfEqual {105}
	059 Move W8, [X20+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X23, 0x47D000
	062 Move X23, [X23+1912]
	063 Move W21, W31
	064 Move X2, [X23]
	065 Move X0, X20
	066 Move W1, W21
	067 Call List`1<Object>.get_Item, X0, X1
	068 Compare X0, 0
	069 JumpIfEqual {105}
	070 Move X1, X31
	071 Call Behaviour.get_isActiveAndEnabled, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {83}
	076 Move W8, [X20+24]
	077 Subtract W9, W8, 1
	078 NotImplemented "Instruction CMP not yet implemented."
	079 Move [X19+96], X31
	080 Add W21, W21, 1
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move [X19+96], X31
	083 Move X2, [X23]
	084 Move X0, X20
	085 Move W1, W21
	086 Call List`1<Object>.get_Item, X0, X1
	087 Move [X19+96], X0
	088 Move X0, [X22]
	089 Move X19, 0x487000
	090 Move W8, [X0+224]
	091 Move X19, [X19+768]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X1, [X19]
	096 Move X0, X20
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X30, [X31+48]
	102 Move X23, [X31+56]
	103 Call CollectionPool`2<Object, Object>.Release, X0
	104 Return 
	105 Call 0x1C17F20

Method: UnityEngine.CanvasRenderer get_canvasRenderer()

Disassembly:
	0x03CDCD2C STP X24, X23, [X31 + 0x30]
	0x03CDCD30 STP X22, X21, [X31 + 0x40]
	0x03CDCD34 STP X20, X19, [X31 + 0x50]
	0x03CDCD38 ADRP X21, 0x70B000
	0x03CDCD3C ADRP X20, 0x417000
	0x03CDCD40 LDRB W8, [X21 + 0x4A6]
	0x03CDCD44 LDR X20, [X20 + 0x598]
	0x03CDCD48 MOV X19, X0
	0x03CDCD4C TBNZ X8, 0x0, 0x3CDCDD0
	0x03CDCD50 ADRP X0, 0x43F000
	0x03CDCD54 LDR X0, [X0 + 0xA18]
	0x03CDCD58 BL 0x1C16CF4
	0x03CDCD5C ADRP X0, 0x43F000
	0x03CDCD60 LDR X0, [X0 + 0xA20]
	0x03CDCD64 BL 0x1C16CF4
	0x03CDCD68 ADRP X0, 0x43F000
	0x03CDCD6C LDR X0, [X0 + 0xA28]
	0x03CDCD70 BL 0x1C16CF4
	0x03CDCD74 ADRP X0, 0x47D000
	0x03CDCD78 LDR X0, [X0 + 0x118]
	0x03CDCD7C BL 0x1C16CF4
	0x03CDCD80 ADRP X0, 0x486000
	0x03CDCD84 LDR X0, [X0 + 0x488]
	0x03CDCD88 BL 0x1C16CF4
	0x03CDCD8C ADRP X0, 0x486000
	0x03CDCD90 LDR X0, [X0 + 0x490]
	0x03CDCD94 BL 0x1C16CF4
	0x03CDCD98 ADRP X0, 0x43F000
	0x03CDCD9C LDR X0, [X0 + 0xA40]
	0x03CDCDA0 BL 0x1C16CF4
	0x03CDCDA4 ADRP X0, 0x43F000
	0x03CDCDA8 LDR X0, [X0 + 0xA48]
	0x03CDCDAC BL 0x1C16CF4
	0x03CDCDB0 ADRP X0, 0x417000
	0x03CDCDB4 LDR X0, [X0 + 0x598]
	0x03CDCDB8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70C000
	005 Move W8, [X20+1178]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x47D000
	012 Move X0, [X0+1824]
	013 Call 0x1C17CF4
	014 Move X0, 0x47D000
	015 Move X0, [X0+1880]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1178], W8
	019 Move X0, [X19+88]
	020 Compare X0, 0
	021 JumpIfNotEqual {40}
	022 Move X8, 0x47D000
	023 Move X8, [X8+1824]
	024 Move X0, X19
	025 Move X1, [X8]
	026 Call 0x21A4894, X0
	027 Move [X19+88], X0
	028 Compare X0, 0
	029 JumpIfNotEqual {40}
	030 Move X0, X19
	031 Move X1, X31
	032 Call Component.get_gameObject, X0
	033 Compare X0, 0
	034 JumpIfEqual {44}
	035 Move X8, 0x47D000
	036 Move X8, [X8+1880]
	037 Move X1, [X8]
	038 Call 0x21E61FC, X0
	039 Move [X19+88], X0
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return X0
	044 Call 0x1C17F20

Method: UnityEngine.Material get_defaultMaterial()

Disassembly:
	0x03CDCDBC ADRP X0, 0x417000
	0x03CDCDC0 LDR X0, [X0 + 0x6C0]
	0x03CDCDC4 BL 0x1C16CF4
	0x03CDCDC8 MOVZ W8, 0x1
	0x03CDCDCC STRB W8, [X21 + 0x4A6]
	0x03CDCDD0 MOV X0, X19
	0x03CDCDD4 BL 0x3CDB488
	0x03CDCDD8 LDR X8, [X20]
	0x03CDCDDC MOV X20, X0
	0x03CDCDE0 LDR W9, [X8 + 0xE0]
	0x03CDCDE4 CBNZ W9, 0x3CDCDF0
	0x03CDCDE8 MOV X0, X8
	0x03CDCDEC BL 0x1C16DFC
	0x03CDCDF0 ADRP X26, 0x47D000
	0x03CDCDF4 LDR X26, [X26 + 0x118]
	0x03CDCDF8 MOV X0, X20
	0x03CDCDFC MOV X1, X31
	0x03CDCE00 MOV X2, X31
	0x03CDCE04 BL 0x3C354F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x70C000
	005 Move X20, 0x47E000
	006 Move W8, [X19+1179]
	007 Move X20, [X20+280]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x47E000
	013 Move X0, [X0+280]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1179], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Call Graphic.get_defaultGraphicMaterial
	026 Return X0

Method: UnityEngine.Material get_material()

Disassembly:
	0x03CDCE08 TBZ X0, 0x0, 0x3CDCE44
	0x03CDCE0C MOV X0, X19
	0x03CDCE10 BL 0x3CDB488
	0x03CDCE14 CBZ X0, 0x3CDD0A0
	0x03CDCE18 MOV X1, X31
	0x03CDCE1C BL 0x3C3E51C
	0x03CDCE20 FCMP S2, 0x0
	0x03CDCE24 B.LT 0x3CDCE44
	0x03CDCE28 MOV X0, X19
	0x03CDCE2C BL 0x3CDB488
	0x03CDCE30 CBZ X0, 0x3CDD0A0
	0x03CDCE34 MOV X1, X31
	0x03CDCE38 BL 0x3C3E51C
	0x03CDCE3C FCMP S3, 0x0
	0x03CDCE40 B.GE 0x3CDD06C
	0x03CDCE44 LDR X0, [X26]
	0x03CDCE48 LDR W8, [X0 + 0xE0]
	0x03CDCE4C CBNZ W8, 0x3CDCE58
	0x03CDCE50 BL 0x1C16DFC
	0x03CDCE54 LDR X0, [X26]
	0x03CDCE58 LDR X8, [X0 + 0xB8]
	0x03CDCE5C LDR X0, [X8 + 0x18]
	0x03CDCE60 CBZ X0, 0x3CDD0A0
	0x03CDCE64 MOV X1, X31
	0x03CDCE68 BL 0x3E39938
	0x03CDCE6C ADRP X27, 0x43F000
	0x03CDCE70 LDR X27, [X27 + 0xA28]
	0x03CDCE74 ADRP X22, 0x43F000
	0x03CDCE78 ADRP X20, 0x486000
	0x03CDCE7C ADRP X21, 0x417000
	0x03CDCE80 LDR X0, [X27]
	0x03CDCE84 LDR W8, [X0 + 0xE0]
	0x03CDCE88 LDR X22, [X22 + 0xA18]
	0x03CDCE8C LDR X20, [X20 + 0x488]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x70C000
	006 Move X20, 0x418000
	007 Move W8, [X21+1180]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x418000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1180], W8
	019 Move X0, [X20]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {39}
	033 Move X0, [X19+32]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0
	039 Move X8, [X19]
	040 Move X0, X19
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X2, [X8+808]
	044 Move X1, [X8+816]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 CallNoReturn X2

Method: System.Void set_material(UnityEngine.Material value)

Disassembly:
	0x03CDCE90 LDR X21, [X21 + 0x6C0]
	0x03CDCE94 CBNZ W8, 0x3CDCE9C
	0x03CDCE98 BL 0x1C16DFC
	0x03CDCE9C LDR X0, [X22]
	0x03CDCEA0 BL 0x28F98D4
	0x03CDCEA4 LDR X8, [X21]
	0x03CDCEA8 LDR X21, [X20]
	0x03CDCEAC MOV X20, X0
	0x03CDCEB0 LDR W9, [X8 + 0xE0]
	0x03CDCEB4 CBNZ W9, 0x3CDCEC0
	0x03CDCEB8 MOV X0, X8
	0x03CDCEBC BL 0x1C16DFC
	0x03CDCEC0 MOV X0, X21
	0x03CDCEC4 MOV X1, X31
	0x03CDCEC8 BL 0x338C698
	0x03CDCECC MOV X1, X0
	0x03CDCED0 MOV X0, X19
	0x03CDCED4 MOV X2, X20
	0x03CDCED8 MOV X3, X31
	0x03CDCEDC BL 0x3C33320
	0x03CDCEE0 CBZ X20, 0x3CDD0A0
	0x03CDCEE4 LDR W8, [X20 + 0x18]
	0x03CDCEE8 CMP W8, 0x1
	0x03CDCEEC B.LT 0x3CDCFD8
	0x03CDCEF0 ADRP X28, 0x43F000
	0x03CDCEF4 ADRP X29, 0x486000
	0x03CDCEF8 LDR X28, [X28 + 0xA48]
	0x03CDCEFC LDR X29, [X29 + 0x490]
	0x03CDCF00 MOV W21, W31
	0x03CDCF04 LDR X2, [X28]
	0x03CDCF08 MOV X0, X20
	0x03CDCF0C MOV W1, W21
	0x03CDCF10 BL 0x301BCCC
	0x03CDCF14 LDR X8, [X26]
	0x03CDCF18 MOV X25, X0
	0x03CDCF1C LDR W9, [X8 + 0xE0]
	0x03CDCF20 CBNZ W9, 0x3CDCF30
	0x03CDCF24 MOV X0, X8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x70C000
	007 Move X21, 0x418000
	008 Move W8, [X22+1181]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x418000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1181], W8
	021 Move X0, [X21]
	022 Move X21, [X19+32]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X20
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {41}
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 
	041 Move X8, [X19]
	042 Move [X19+32], X20
	043 Move X0, X19
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X2, [X8+776]
	047 Move X1, [X8+784]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 CallNoReturn X2

Method: UnityEngine.Material get_materialForRendering()

Disassembly:
	0x03CDCF28 BL 0x1C16DFC
	0x03CDCF2C LDR X8, [X26]
	0x03CDCF30 CBZ X25, 0x3CDD0A0
	0x03CDCF34 LDR X8, [X8 + 0xB8]
	0x03CDCF38 LDR X23, [X29]
	0x03CDCF3C MOV X0, X25
	0x03CDCF40 LDR X22, [X8 + 0x18]
	0x03CDCF44 MOV X1, X23
	0x03CDCF48 BL 0x1C16E00
	0x03CDCF4C CBZ X0, 0x3CDD0A4
	0x03CDCF50 LDR X24, [X29]
	0x03CDCF54 MOV X0, X25
	0x03CDCF58 MOV X1, X24
	0x03CDCF5C BL 0x1C16E00
	0x03CDCF60 CBZ X0, 0x3CDD0B0
	0x03CDCF64 LDR X8, [X0]
	0x03CDCF68 MOV X23, X0
	0x03CDCF6C LDRH W9, [X8 + 0x12E]
	0x03CDCF70 CBZ X9, 0x3CDCF94
	0x03CDCF74 LDR X10, [X8 + 0xB0]
	0x03CDCF78 ADD X10, X10, 0x8
	0x03CDCF7C LDUR X11, [X10 - 0x8]
	0x03CDCF80 CMP X11, X24
	0x03CDCF84 B.EQ 0x3CDCFA8
	0x03CDCF88 SUBS X9, X9, 0x1
	0x03CDCF8C ADD X10, X10, 0x10
	0x03CDCF90 B.NE 0x3CDCF7C
	0x03CDCF94 MOVZ W2, 0x1
	0x03CDCF98 MOV X0, X23
	0x03CDCF9C MOV X1, X24
	0x03CDCFA0 BL 0x1C5C788
	0x03CDCFA4 B 0x3CDCFB8
	0x03CDCFA8 LDR W9, [X10]
	0x03CDCFAC ADD W9, W9, 0x1
	0x03CDCFB0 ADD X8, X8, W9, 0x4, SXTW
	0x03CDCFB4 ADD X0, X8, 0x138
	0x03CDCFB8 LDP X8, X2, [X0]
	0x03CDCFBC MOV X0, X23
	0x03CDCFC0 MOV X1, X22
	0x03CDCFC4 BLR X8
	0x03CDCFC8 LDR W8, [X20 + 0x18]
	0x03CDCFCC ADD W21, W21, 0x1
	0x03CDCFD0 CMP W21, W8
	0x03CDCFD4 B.LT 0x3CDCF04
	0x03CDCFD8 LDR X0, [X27]
	0x03CDCFDC ADRP X21, 0x43F000
	0x03CDCFE0 LDR W8, [X0 + 0xE0]
	0x03CDCFE4 LDR X21, [X21 + 0xA20]
	0x03CDCFE8 CBNZ W8, 0x3CDCFF0
	0x03CDCFEC BL 0x1C16DFC
	0x03CDCFF0 LDR X1, [X21]
	0x03CDCFF4 MOV X0, X20
	0x03CDCFF8 BL 0x28F9A14
	0x03CDCFFC LDR X0, [X26]
	0x03CDD000 LDR W8, [X0 + 0xE0]
	0x03CDD004 CBNZ W8, 0x3CDD010
	0x03CDD008 BL 0x1C16DFC
	0x03CDD00C LDR X0, [X26]
	0x03CDD010 LDR X8, [X0 + 0xB8]
	0x03CDD014 LDR X20, [X8 + 0x18]
	0x03CDD018 BL 0x3CDD0BC
	0x03CDD01C CBZ X20, 0x3CDD0A0
	0x03CDD020 MOV X1, X0
	0x03CDD024 MOV X0, X20
	0x03CDD028 MOV X2, X31
	0x03CDD02C BL 0x3E49C28
	0x03CDD030 MOV X0, X19
	0x03CDD034 BL 0x3CDBD2C
	0x03CDD038 MOV X19, X0
	0x03CDD03C BL 0x3CDD0BC
	0x03CDD040 CBZ X19, 0x3CDD0A0
	0x03CDD044 MOV X1, X0
	0x03CDD048 MOV X0, X19
	0x03CDD04C LDP X20, X19, [X31 + 0x50]
	0x03CDD050 LDP X22, X21, [X31 + 0x40]
	0x03CDD054 LDP X24, X23, [X31 + 0x30]
	0x03CDD058 LDP X26, X25, [X31 + 0x20]
	0x03CDD05C LDP X28, X27, [X31 + 0x10]
	0x03CDD060 MOV X2, X31
	0x03CDD064 LDP X29, X30, [X31], #0x60
	0x03CDD068 B 0x3E22AB0
	0x03CDD06C LDR X0, [X26]
	0x03CDD070 LDR W8, [X0 + 0xE0]
	0x03CDD074 CBNZ W8, 0x3CDD080
	0x03CDD078 BL 0x1C16DFC
	0x03CDD07C LDR X0, [X26]
	0x03CDD080 LDR X8, [X0 + 0xB8]
	0x03CDD084 LDR X9, [X19]
	0x03CDD088 MOV X0, X19
	0x03CDD08C LDR X1, [X8 + 0x18]
	0x03CDD090 LDR X8, [X9 + 0x3F8]
	0x03CDD094 LDR X2, [X9 + 0x400]
	0x03CDD098 BLR X8
	0x03CDD09C B 0x3CDCE6C
	0x03CDD0A0 BL 0x1C16F20
	0x03CDD0A4 MOV X0, X25
	0x03CDD0A8 MOV X1, X23
	0x03CDD0AC BL 0x1C171E0
	0x03CDD0B0 MOV X0, X25
	0x03CDD0B4 MOV X1, X24
	0x03CDD0B8 BL 0x1C171E0
	0x03CDD0BC STR X30, [X31 - 0x20]!
	0x03CDD0C0 STP X20, X19, [X31 + 0x10]
	0x03CDD0C4 ADRP X19, 0x70A000
	0x03CDD0C8 ADRP X20, 0x47C000
	0x03CDD0CC LDRB W8, [X19 + 0x4A8]
	0x03CDD0D0 LDR X20, [X20 + 0x118]
	0x03CDD0D4 TBNZ X8, 0x0, 0x3CDD110
	0x03CDD0D8 ADRP X0, 0x47C000
	0x03CDD0DC LDR X0, [X0 + 0x118]
	0x03CDD0E0 BL 0x1C16CF4
	0x03CDD0E4 ADRP X0, 0x41D000
	0x03CDD0E8 LDR X0, [X0 + 0x700]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X19, 0x70C000
	010 Move X23, 0x487000
	011 Move W8, [X19+1182]
	012 Move X23, [X23+1128]
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {41}
	018 Move X0, 0x487000
	019 Move X0, [X0+1136]
	020 Call 0x1C17CF4
	021 Move X0, 0x487000
	022 Move X0, [X0+1144]
	023 Call 0x1C17CF4
	024 Move X0, 0x487000
	025 Move X0, [X0+1128]
	026 Call 0x1C17CF4
	027 Move X0, 0x47E000
	028 Move X0, [X0+1800]
	029 Call 0x1C17CF4
	030 Move X0, 0x47E000
	031 Move X0, [X0+1808]
	032 Call 0x1C17CF4
	033 Move X0, 0x47E000
	034 Move X0, [X0+1816]
	035 Call 0x1C17CF4
	036 Move X0, 0x47E000
	037 Move X0, [X0+1824]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X19+1182], W8
	041 Move X0, [X23]
	042 Move X21, 0x487000
	043 Move X19, 0x47E000
	044 Move W8, [X0+224]
	045 Move X21, [X21+1136]
	046 Move X19, [X19+1800]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, [X21]
	051 Call CollectionPool`2<Object, Object>.Get
	052 Move X2, [X19]
	053 Move X19, X0
	054 Move X0, X20
	055 Move X1, X19
	056 Call 0x21A543C, X0, X1
	057 Move X8, [X20]
	058 Move X0, X20
	059 Move X9, [X8+824]
	060 Move X1, [X8+832]
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Compare X19, 0
	063 JumpIfEqual {125}
	064 Move W8, [X19+24]
	065 Move X20, X0
	066 NotImplemented "Instruction CMP not yet implemented."
	067 Move X24, 0x47D000
	068 Move X25, 0x47D000
	069 Move X24, [X24+1824]
	070 Move X25, [X25+1808]
	071 Move W21, W31
	072 Move X2, [X24]
	073 Move X0, X19
	074 Move W1, W21
	075 Call List`1<Object>.get_Item, X0, X1
	076 Compare X0, 0
	077 JumpIfEqual {125}
	078 Move X8, [X0]
	079 Move X1, [X25]
	080 Move X22, X0
	081 NotImplemented "Instruction LDRH not yet implemented."
	082 Compare X9, 0
	083 JumpIfEqual {90}
	084 Move X10, [X8+176]
	085 Add X10, X10, 8
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Subtract X9, X9, 1
	089 Add X10, X10, 16
	090 Move X0, X22
	091 Move W2, W31
	092 Call 0x1C5D788
	093 NotImplemented "Instruction LDRSW not yet implemented."
	094 Add X8, X8, X9
	095 Add X0, X8, 312
	096 Move X8, [X0]
	097 Move X2, [X0+8]
	098 Move X0, X22
	099 Move X1, X20
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move W8, [X19+24]
	102 Add W21, W21, 1
	103 Move X20, X0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X0, [X23]
	106 Move X21, 0x486000
	107 Move W8, [X0+224]
	108 Move X21, [X21+1144]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X1, [X21]
	113 Move X0, X19
	114 Call CollectionPool`2<Object, Object>.Release, X0
	115 Move X0, X20
	116 Move X20, [X31+48]
	117 Move X19, [X31+56]
	118 Move X22, [X31+32]
	119 Move X21, [X31+40]
	120 Move X24, [X31+16]
	121 Move X23, [X31+24]
	122 Move X30, [X31+64]
	123 Move X25, [X31+72]
	124 Return X0
	125 Call 0x1C17F20

Method: UnityEngine.Texture get_mainTexture()

Disassembly:
	0x03CDD0EC BL 0x1C16CF4
	0x03CDD0F0 ADRP X0, 0x416000
	0x03CDD0F4 LDR X0, [X0 + 0x598]
	0x03CDD0F8 BL 0x1C16CF4
	0x03CDD0FC ADRP X0, 0x485000
	0x03CDD100 LDR X0, [X0 + 0x498]
	0x03CDD104 BL 0x1C16CF4
	0x03CDD108 MOVZ W8, 0x1
	0x03CDD10C STRB W8, [X19 + 0x4A8]
	0x03CDD110 LDR X0, [X20]
	0x03CDD114 ADRP X19, 0x416000
	0x03CDD118 LDR W8, [X0 + 0xE0]
	0x03CDD11C LDR X19, [X19 + 0x598]
	0x03CDD120 CBNZ W8, 0x3CDD12C
	0x03CDD124 BL 0x1C16DFC
	0x03CDD128 LDR X0, [X20]
	0x03CDD12C LDR X8, [X19]
	0x03CDD130 LDR X9, [X0 + 0xB8]
	0x03CDD134 LDR W10, [X8 + 0xE0]
	0x03CDD138 LDR X19, [X9 + 0x10]
	0x03CDD13C CBNZ W10, 0x3CDD148
	0x03CDD140 MOV X0, X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70B000
	005 Move X19, 0x47D000
	006 Move W8, [X20+1183]
	007 Move X19, [X19+280]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x47D000
	013 Move X0, [X0+280]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+1183], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X0, [X8+8]
	027 Move X30, [X31+32]
	028 Return X0

Method: System.Void OnEnable()

Disassembly:
	0x03CDD144 BL 0x1C16DFC
	0x03CDD148 MOV X0, X19
	0x03CDD14C MOV X1, X31
	0x03CDD150 MOV X2, X31
	0x03CDD154 BL 0x3C3883C
	0x03CDD158 TBZ X0, 0x0, 0x3CDD1B0
	0x03CDD15C ADRP X8, 0x41D000
	0x03CDD160 LDR X8, [X8 + 0x700]
	0x03CDD164 LDR X0, [X8]
	0x03CDD168 BL 0x1C16F10
	0x03CDD16C MOV X1, X31
	0x03CDD170 MOV X19, X0
	0x03CDD174 BL 0x3C17028
	0x03CDD178 LDR X0, [X20]
	0x03CDD17C LDR W8, [X0 + 0xE0]
	0x03CDD180 CBNZ W8, 0x3CDD18C
	0x03CDD184 BL 0x1C16DFC
	0x03CDD188 LDR X0, [X20]
	0x03CDD18C LDR X8, [X0 + 0xB8]
	0x03CDD190 STR X19, [X8 + 0x10]
	0x03CDD194 CBZ X19, 0x3CDD1D8
	0x03CDD198 ADRP X8, 0x485000
	0x03CDD19C LDR X8, [X8 + 0x498]
	0x03CDD1A0 MOV X0, X19
	0x03CDD1A4 MOV X2, X31
	0x03CDD1A8 LDR X1, [X8]
	0x03CDD1AC BL 0x3C38A84
	0x03CDD1B0 LDR X0, [X20]
	0x03CDD1B4 LDR W8, [X0 + 0xE0]
	0x03CDD1B8 CBNZ W8, 0x3CDD1C4
	0x03CDD1BC BL 0x1C16DFC
	0x03CDD1C0 LDR X0, [X20]
	0x03CDD1C4 LDR X8, [X0 + 0xB8]
	0x03CDD1C8 LDP X20, X19, [X31 + 0x10]
	0x03CDD1CC LDR X0, [X8 + 0x10]
	0x03CDD1D0 LDR X30, [X31], #0x20
	0x03CDD1D4 RET
	0x03CDD1D8 BL 0x1C16F20
	0x03CDD1DC RET
	0x03CDD1E0 STR X30, [X31 - 0x30]!
	0x03CDD1E4 STP X22, X21, [X31 + 0x10]
	0x03CDD1E8 STP X20, X19, [X31 + 0x20]
	0x03CDD1EC ADRP X22, 0x70A000
	0x03CDD1F0 ADRP X21, 0x47C000
	0x03CDD1F4 LDRB W8, [X22 + 0x4A9]
	0x03CDD1F8 LDR X21, [X21 + 0x118]
	0x03CDD1FC MOV X19, X1
	0x03CDD200 MOV X20, X0
	0x03CDD204 TBNZ X8, 0x0, 0x3CDD21C
	0x03CDD208 ADRP X0, 0x47C000
	0x03CDD20C LDR X0, [X0 + 0x118]
	0x03CDD210 BL 0x1C16CF4
	0x03CDD214 MOVZ W8, 0x1
	0x03CDD218 STRB W8, [X22 + 0x4A9]
	0x03CDD21C LDR X0, [X21]
	0x03CDD220 LDR W8, [X0 + 0xE0]
	0x03CDD224 CBNZ W8, 0x3CDD230
	0x03CDD228 BL 0x1C16DFC
	0x03CDD22C LDR X0, [X21]
	0x03CDD230 LDR X8, [X0 + 0xB8]
	0x03CDD234 LDR X9, [X20]
	0x03CDD238 MOV X0, X20
	0x03CDD23C LDR X1, [X8 + 0x18]
	0x03CDD240 LDR X8, [X9 + 0x3F8]
	0x03CDD244 LDR X2, [X9 + 0x400]
	0x03CDD248 BLR X8
	0x03CDD24C LDR X8, [X21]
	0x03CDD250 LDR X8, [X8 + 0xB8]
	0x03CDD254 LDR X0, [X8 + 0x18]
	0x03CDD258 CBZ X0, 0x3CDD274
	0x03CDD25C MOV X1, X19
	0x03CDD260 LDP X20, X19, [X31 + 0x20]
	0x03CDD264 LDP X22, X21, [X31 + 0x10]
	0x03CDD268 MOV X2, X31
	0x03CDD26C LDR X30, [X31], #0x30
	0x03CDD270 B 0x3E49C28

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x70B000
	007 Move X20, 0x46D000
	008 Move W8, [X21+1184]
	009 Move X20, [X20+1408]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x46D000
	016 Move X0, [X0+1408]
	017 Call 0x1C17CF4
	018 Move X0, 0x47D000
	019 Move X0, [X0+280]
	020 Call 0x1C17CF4
	021 Move X0, 0x417000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1184], W8
	026 Move X21, 0x47D000
	027 Move X21, [X21+280]
	028 Move X0, X19
	029 Move X1, X31
	030 Call UIBehaviour.OnEnable, X0
	031 Move X0, X19
	032 Call Graphic.CacheCanvas, X0
	033 Move X0, X19
	034 Call Graphic.get_canvas, X0
	035 Move X8, [X20]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X22, 0x417000
	043 Move X22, [X22+1432]
	044 Move X0, X20
	045 Move X1, X19
	046 Call GraphicRegistry.RegisterGraphicForCanvas, X0, X1
	047 Move X0, [X21]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {53}
	051 Call 0x1C17DFC
	052 Move X0, [X21]
	053 Move X8, [X22]
	054 Move X9, [X0+184]
	055 Move W10, [X8+224]
	056 Move X20, [X9+8]
	057 Compare W10, 0
	058 JumpIfNotEqual {61}
	059 Move X0, X8
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Equality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {81}
	069 Move X0, X31
	070 Call Texture2D.get_whiteTexture
	071 Move X8, [X21]
	072 Move X20, X0
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {79}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move X8, [X21]
	079 Move X8, [X8+184]
	080 Move [X8+8], X20
	081 Move X8, [X19]
	082 Move X0, X19
	083 Move X20, [X31+32]
	084 Move X19, [X31+40]
	085 Move X22, [X31+16]
	086 Move X21, [X31+24]
	087 Move X2, [X8+728]
	088 Move X1, [X8+736]
	089 Move X30, [X31+48]
	090 CallNoReturn X2

Method: System.Void OnDisable()

Disassembly:
	0x03CDD274 BL 0x1C16F20
	0x03CDD278 STP D11, D10, [X31 - 0x40]!
	0x03CDD27C STP D9, D8, [X31 + 0x10]
	0x03CDD280 STR X30, [X31 + 0x20]
	0x03CDD284 STP X20, X19, [X31 + 0x30]
	0x03CDD288 MOV X19, X1
	0x03CDD28C MOV X20, X0
	0x03CDD290 BL 0x3CDD3D4
	0x03CDD294 LDR X8, [X20]
	0x03CDD298 MOV X0, X20
	0x03CDD29C MOV V9.16B, V0.16B
	0x03CDD2A0 MOV V8.16B, V1.16B
	0x03CDD2A4 LDR X9, [X8 + 0x298]
	0x03CDD2A8 LDR X1, [X8 + 0x2A0]
	0x03CDD2AC MOV V10.16B, V2.16B
	0x03CDD2B0 MOV V11.16B, V3.16B
	0x03CDD2B4 BLR X9
	0x03CDD2B8 MOV X0, X31
	0x03CDD2BC BL 0x1E43664
	0x03CDD2C0 CBZ X19, 0x3CDD3D0
	0x03CDD2C4 MOV X20, X0
	0x03CDD2C8 MOV X0, X19
	0x03CDD2CC MOV X1, X31
	0x03CDD2D0 FADD S11, S8, S11
	0x03CDD2D4 FADD S10, S9, S10
	0x03CDD2D8 BL 0x3E39938
	0x03CDD2DC AND X20, X20, 0x0
	0x03CDD2E0 FMOV S2, W31
	0x03CDD2E4 FMOV S3, W31
	0x03CDD2E8 FMOV S4, W31
	0x03CDD2EC FMOV S5, W31
	0x03CDD2F0 FMOV S6, W31
	0x03CDD2F4 MOV X0, X19
	0x03CDD2F8 MOV V0.16B, V9.16B
	0x03CDD2FC MOV V1.16B, V8.16B
	0x03CDD300 MOV X1, X20
	0x03CDD304 MOV X2, X31
	0x03CDD308 BL 0x3E39A54
	0x03CDD30C FMOV S2, W31
	0x03CDD310 FMOV S3, W31
	0x03CDD314 FMOV S4, 1
	0x03CDD318 FMOV S5, W31
	0x03CDD31C FMOV S6, W31
	0x03CDD320 MOV X0, X19
	0x03CDD324 MOV V0.16B, V9.16B
	0x03CDD328 MOV V1.16B, V11.16B
	0x03CDD32C MOV X1, X20
	0x03CDD330 MOV X2, X31
	0x03CDD334 BL 0x3E39A54
	0x03CDD338 FMOV S2, W31
	0x03CDD33C FMOV S3, 1
	0x03CDD340 FMOV S4, 1
	0x03CDD344 FMOV S5, W31
	0x03CDD348 FMOV S6, W31
	0x03CDD34C MOV X0, X19
	0x03CDD350 MOV V0.16B, V10.16B
	0x03CDD354 MOV V1.16B, V11.16B
	0x03CDD358 MOV X1, X20
	0x03CDD35C MOV X2, X31
	0x03CDD360 BL 0x3E39A54
	0x03CDD364 FMOV S2, W31
	0x03CDD368 FMOV S3, 1
	0x03CDD36C FMOV S4, W31
	0x03CDD370 FMOV S5, W31
	0x03CDD374 FMOV S6, W31
	0x03CDD378 MOV X0, X19
	0x03CDD37C MOV V0.16B, V10.16B
	0x03CDD380 MOV V1.16B, V8.16B
	0x03CDD384 MOV X1, X20
	0x03CDD388 MOV X2, X31
	0x03CDD38C BL 0x3E39A54
	0x03CDD390 MOVZ W2, 0x1
	0x03CDD394 MOVZ W3, 0x2
	0x03CDD398 MOV X0, X19
	0x03CDD39C MOV W1, W31
	0x03CDD3A0 MOV X4, X31
	0x03CDD3A4 BL 0x3E39B84
	0x03CDD3A8 MOV X0, X19
	0x03CDD3AC LDP X20, X19, [X31 + 0x30]
	0x03CDD3B0 LDR X30, [X31 + 0x20]
	0x03CDD3B4 LDP D9, D8, [X31 + 0x10]
	0x03CDD3B8 MOVZ W1, 0x2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x70B000
	007 Move X20, 0x46D000
	008 Move W8, [X21+1185]
	009 Move X20, [X20+1408]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {29}
	015 Move X0, 0x47C000
	016 Move X0, [X0+1816]
	017 Call 0x1C17CF4
	018 Move X0, 0x46D000
	019 Move X0, [X0+1408]
	020 Call 0x1C17CF4
	021 Move X0, 0x41A000
	022 Move X0, [X0+2336]
	023 Call 0x1C17CF4
	024 Move X0, 0x417000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1185], W8
	029 Move X22, 0x47C000
	030 Move X22, [X22+1816]
	031 Move X0, X19
	032 Call Graphic.get_canvas, X0
	033 Move X8, [X20]
	034 Move X20, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfNotEqual {40}
	038 Move X0, X8
	039 Call 0x1C17DFC
	040 Move X21, 0x417000
	041 Move X21, [X21+1432]
	042 Move X0, X20
	043 Move X1, X19
	044 Call GraphicRegistry.DisableGraphicForCanvas, X0, X1
	045 Move X0, [X22]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X0, X19
	051 Call CanvasUpdateRegistry.DisableCanvasElementForRebuild, X0
	052 Move X0, X19
	053 Call Graphic.get_canvasRenderer, X0
	054 Move X8, [X21]
	055 Move X20, X0
	056 Move W9, [X8+224]
	057 Compare W9, 0
	058 JumpIfNotEqual {61}
	059 Move X0, X8
	060 Call 0x1C17DFC
	061 Move X0, X20
	062 Move X1, X31
	063 Move X2, X31
	064 Call Object.op_Inequality, X0, X1
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {75}
	069 Move X0, X19
	070 Call Graphic.get_canvasRenderer, X0
	071 Compare X0, 0
	072 JumpIfEqual {98}
	073 Move X1, X31
	074 Call CanvasRenderer.Clear, X0
	075 Move X20, 0x41A000
	076 Move X20, [X20+2336]
	077 Move X0, X19
	078 Call Graphic.get_rectTransform, X0
	079 Move X8, [X20]
	080 Move X20, X0
	081 Move W9, [X8+224]
	082 Compare W9, 0
	083 JumpIfNotEqual {86}
	084 Move X0, X8
	085 Call 0x1C17DFC
	086 Move X0, X20
	087 Move X1, X31
	088 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	089 Move X0, X19
	090 Move X20, [X31+32]
	091 Move X19, [X31+40]
	092 Move X22, [X31+16]
	093 Move X21, [X31+24]
	094 Move X1, X31
	095 Move X30, [X31+48]
	096 Call UIBehaviour.OnDisable, X0
	097 Return 
	098 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03CDD53C MOV V8.16B, V1.16B
	0x03CDD540 MOV V9.16B, V0.16B
	0x03CDD544 MOV X20, X0
	0x03CDD548 TBNZ X8, 0x0, 0x3CDD5CC
	0x03CDD54C ADRP X0, 0x485000
	0x03CDD550 LDR X0, [X0 + 0x4A0]
	0x03CDD554 BL 0x1C16CF4
	0x03CDD558 ADRP X0, 0x485000
	0x03CDD55C LDR X0, [X0 + 0x4A8]
	0x03CDD560 BL 0x1C16CF4
	0x03CDD564 ADRP X0, 0x43E000
	0x03CDD568 LDR X0, [X0 + 0xA18]
	0x03CDD56C BL 0x1C16CF4
	0x03CDD570 ADRP X0, 0x43E000
	0x03CDD574 LDR X0, [X0 + 0xA20]
	0x03CDD578 BL 0x1C16CF4
	0x03CDD57C ADRP X0, 0x43E000
	0x03CDD580 LDR X0, [X0 + 0xA28]
	0x03CDD584 BL 0x1C16CF4
	0x03CDD588 ADRP X0, 0x485000
	0x03CDD58C LDR X0, [X0 + 0x4B0]
	0x03CDD590 BL 0x1C16CF4
	0x03CDD594 ADRP X0, 0x485000
	0x03CDD598 LDR X0, [X0 + 0x4B8]
	0x03CDD59C BL 0x1C16CF4
	0x03CDD5A0 ADRP X0, 0x43E000
	0x03CDD5A4 LDR X0, [X0 + 0xA40]
	0x03CDD5A8 BL 0x1C16CF4
	0x03CDD5AC ADRP X0, 0x43E000
	0x03CDD5B0 LDR X0, [X0 + 0xA48]
	0x03CDD5B4 BL 0x1C16CF4
	0x03CDD5B8 ADRP X0, 0x416000
	0x03CDD5BC LDR X0, [X0 + 0x598]
	0x03CDD5C0 BL 0x1C16CF4
	0x03CDD5C4 MOVZ W8, 0x1
	0x03CDD5C8 STRB W8, [X21 + 0x4AA]
	0x03CDD5CC MOV X0, X20
	0x03CDD5D0 MOV X1, X31
	0x03CDD5D4 BL 0x3C32454
	0x03CDD5D8 TBZ X0, 0x0, 0x3CDD944
	0x03CDD5DC MOV X0, X20
	0x03CDD5E0 MOV X1, X31
	0x03CDD5E4 BL 0x3C32E90
	0x03CDD5E8 ADRP X8, 0x43E000
	0x03CDD5EC LDR X8, [X8 + 0xA28]
	0x03CDD5F0 MOV X22, X0
	0x03CDD5F4 LDR X8, [X8]
	0x03CDD5F8 LDR W9, [X8 + 0xE0]
	0x03CDD5FC CBNZ W9, 0x3CDD608
	0x03CDD600 MOV X0, X8
	0x03CDD604 BL 0x1C16DFC
	0x03CDD608 ADRP X8, 0x43E000
	0x03CDD60C LDR X8, [X8 + 0xA18]
	0x03CDD610 LDR X0, [X8]
	0x03CDD614 BL 0x28F98D4
	0x03CDD618 ADRP X27, 0x416000
	0x03CDD61C ADRP X29, 0x43E000
	0x03CDD620 ADRP X25, 0x485000
	0x03CDD624 LDR X27, [X27 + 0x598]
	0x03CDD628 LDR X29, [X29 + 0xA48]
	0x03CDD62C LDR X25, [X25 + 0x4B8]
	0x03CDD630 MOV X20, X0
	0x03CDD634 MOV W28, W31
	0x03CDD638 MOVZ W26, 0x1
	0x03CDD63C LDR X0, [X27]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x70B000
	007 Move X20, 0x46D000
	008 Move W8, [X21+1186]
	009 Move X20, [X20+1408]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x47C000
	016 Move X0, [X0+1816]
	017 Call 0x1C17CF4
	018 Move X0, 0x46D000
	019 Move X0, [X0+1408]
	020 Call 0x1C17CF4
	021 Move X0, 0x417000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1186], W8
	026 Move X22, 0x47C000
	027 Move X22, [X22+1816]
	028 Move X0, X19
	029 Call Graphic.get_canvas, X0
	030 Move X8, [X20]
	031 Move X20, X0
	032 Move W9, [X8+224]
	033 Compare W9, 0
	034 JumpIfNotEqual {37}
	035 Move X0, X8
	036 Call 0x1C17DFC
	037 Move X21, 0x417000
	038 Move X21, [X21+1432]
	039 Move X0, X20
	040 Move X1, X19
	041 Call GraphicRegistry.UnregisterGraphicForCanvas, X0, X1
	042 Move X0, [X22]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X19
	048 Call CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild, X0
	049 Move X0, [X21]
	050 Move X20, [X19+136]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X31
	057 Call Object.op_Implicit, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {71}
	062 Move X0, [X21]
	063 Move X20, [X19+136]
	064 Move W8, [X0+224]
	065 Compare W8, 0
	066 JumpIfNotEqual {68}
	067 Call 0x1C17DFC
	068 Move X0, X20
	069 Move X1, X31
	070 Call Object.Destroy, X0
	071 Move [X19+136], X31
	072 Move X0, X19
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X1, X31
	078 Move X30, [X31+48]
	079 Call UIBehaviour.OnDestroy, X0
	080 Return 

Method: System.Void OnCanvasHierarchyChanged()

Disassembly:
	0x03CDD640 MOV X21, X22
	0x03CDD644 LDR W8, [X0 + 0xE0]
	0x03CDD648 CBNZ W8, 0x3CDD650
	0x03CDD64C BL 0x1C16DFC
	0x03CDD650 MOV X0, X21
	0x03CDD654 MOV X1, X31
	0x03CDD658 MOV X2, X31
	0x03CDD65C BL 0x3C354F8
	0x03CDD660 TBZ X0, 0x0, 0x3CDD968
	0x03CDD664 CBZ X21, 0x3CDD99C
	0x03CDD668 ADRP X8, 0x485000
	0x03CDD66C LDR X8, [X8 + 0x4B0]
	0x03CDD670 MOV X0, X21
	0x03CDD674 MOV X1, X20
	0x03CDD678 LDR X2, [X8]
	0x03CDD67C BL 0x21A443C
	0x03CDD680 CBZ X20, 0x3CDD99C
	0x03CDD684 LDR W8, [X20 + 0x18]
	0x03CDD688 CMP W8, 0x1
	0x03CDD68C B.LT 0x3CDD8FC
	0x03CDD690 MOV W22, W31
	0x03CDD694 LDR X2, [X29]
	0x03CDD698 MOV X0, X20
	0x03CDD69C MOV W1, W22
	0x03CDD6A0 BL 0x301BCCC
	0x03CDD6A4 CBZ X0, 0x3CDD6C4
	0x03CDD6A8 ADRP X8, 0x485000
	0x03CDD6AC LDR X8, [X8 + 0x4A8]
	0x03CDD6B0 LDR X9, [X0]
	0x03CDD6B4 LDR X8, [X8]
	0x03CDD6B8 CMP X9, X8
	0x03CDD6BC CSEL X23, X0, X31, EQ
	0x03CDD6C0 B 0x3CDD6C8
	0x03CDD6C4 MOV X23, X31
	0x03CDD6C8 LDR X0, [X27]
	0x03CDD6CC LDR W8, [X0 + 0xE0]
	0x03CDD6D0 CBNZ W8, 0x3CDD6D8
	0x03CDD6D4 BL 0x1C16DFC
	0x03CDD6D8 MOV X0, X23
	0x03CDD6DC MOV X1, X31
	0x03CDD6E0 MOV X2, X31
	0x03CDD6E4 BL 0x3C354F8
	0x03CDD6E8 TBZ X0, 0x0, 0x3CDD704
	0x03CDD6EC CBZ X23, 0x3CDD99C
	0x03CDD6F0 MOV X0, X23
	0x03CDD6F4 MOV X1, X31
	0x03CDD6F8 BL 0x3E248A4
	0x03CDD6FC EOR W8, W0, 0x1
	0x03CDD700 AND W26, W26, W8, 0x0
	0x03CDD704 LDR X2, [X29]
	0x03CDD708 MOV X0, X20
	0x03CDD70C MOV W1, W22
	0x03CDD710 BL 0x301BCCC
	0x03CDD714 LDR X1, [X25]
	0x03CDD718 BL 0x1C16E00
	0x03CDD71C CBZ X0, 0x3CDD854
	0x03CDD720 LDR X2, [X29]
	0x03CDD724 MOV X23, X0
	0x03CDD728 MOV X0, X20
	0x03CDD72C MOV W1, W22
	0x03CDD730 BL 0x301BCCC
	0x03CDD734 CBZ X0, 0x3CDD754
	0x03CDD738 ADRP X8, 0x485000
	0x03CDD73C LDR X8, [X8 + 0x4A0]
	0x03CDD740 LDR X9, [X0]
	0x03CDD744 LDR X8, [X8]
	0x03CDD748 CMP X9, X8
	0x03CDD74C CSEL X24, X0, X31, EQ
	0x03CDD750 B 0x3CDD758
	0x03CDD754 MOV X24, X31
	0x03CDD758 LDR X0, [X27]
	0x03CDD75C LDR W8, [X0 + 0xE0]
	0x03CDD760 CBNZ W8, 0x3CDD768
	0x03CDD764 BL 0x1C16DFC
	0x03CDD768 MOV X0, X24
	0x03CDD76C MOV X1, X31
	0x03CDD770 MOV X2, X31
	0x03CDD774 BL 0x3C354F8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x70B000
	007 Move W8, [X20+1187]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x46D000
	014 Move X0, [X0+1408]
	015 Call 0x1C17CF4
	016 Move X0, 0x417000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+1187], W8
	021 Move X8, [X19]
	022 Move X20, [X19+96]
	023 Move [X19+96], X31
	024 Move X22, 0x46D000
	025 Move X9, [X8+456]
	026 Move X1, [X8+464]
	027 Move X22, [X22+1408]
	028 Move X0, X19
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {87}
	034 Move X21, 0x417000
	035 Move X21, [X21+1432]
	036 Move X0, X19
	037 Call Graphic.CacheCanvas, X0
	038 Move X0, [X21]
	039 Move X21, [X19+96]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X21
	046 Move X2, X31
	047 Call Object.op_Inequality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {101}
	052 Move X0, [X22]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X19
	059 Call GraphicRegistry.UnregisterGraphicForCanvas, X0, X1
	060 Move X8, [X19]
	061 Move X0, X19
	062 Move X9, [X8+456]
	063 Move X1, [X8+464]
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfNotEqual {101}
	069 Move X0, X19
	070 Call Graphic.get_canvas, X0
	071 Move X8, [X22]
	072 Move X20, X0
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move X0, X20
	079 Move X1, X19
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X30, [X31+48]
	085 Call GraphicRegistry.RegisterGraphicForCanvas, X0, X1
	086 Return 
	087 Move X0, [X22]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, X20
	093 Move X1, X19
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X22, [X31+16]
	097 Move X21, [X31+24]
	098 Move X30, [X31+48]
	099 Call GraphicRegistry.UnregisterGraphicForCanvas, X0, X1
	100 Return 
	101 Move X20, [X31+32]
	102 Move X19, [X31+40]
	103 Move X22, [X31+16]
	104 Move X21, [X31+24]
	105 Move X30, [X31+48]
	106 Return 

Method: System.Void OnCullingChanged()

Disassembly:
	0x03CDD778 TBZ X0, 0x0, 0x3CDD79C
	0x03CDD77C CBZ X24, 0x3CDD99C
	0x03CDD780 MOV X0, X24
	0x03CDD784 MOV X1, X31
	0x03CDD788 BL 0x3C323D4
	0x03CDD78C ORN W8, W28, W0, 0x0
	0x03CDD790 TBZ X8, 0x0, 0x3CDD7DC
	0x03CDD794 ORR W28, W28, W0, 0x0
	0x03CDD798 B 0x3CDD854
	0x03CDD79C LDR X8, [X23]
	0x03CDD7A0 LDR X1, [X25]
	0x03CDD7A4 LDRH W9, [X8 + 0x12E]
	0x03CDD7A8 CBZ X9, 0x3CDD7CC
	0x03CDD7AC LDR X10, [X8 + 0xB0]
	0x03CDD7B0 ADD X10, X10, 0x8
	0x03CDD7B4 LDUR X11, [X10 - 0x8]
	0x03CDD7B8 CMP X11, X1
	0x03CDD7BC B.EQ 0x3CDD82C
	0x03CDD7C0 SUBS X9, X9, 0x1
	0x03CDD7C4 ADD X10, X10, 0x10
	0x03CDD7C8 B.NE 0x3CDD7B4
	0x03CDD7CC MOV X0, X23
	0x03CDD7D0 MOV W2, W31
	0x03CDD7D4 BL 0x1C5C788
	0x03CDD7D8 B 0x3CDD838
	0x03CDD7DC MOV X0, X24
	0x03CDD7E0 MOV X1, X31
	0x03CDD7E4 BL 0x3E2236C
	0x03CDD7E8 LDR X8, [X23]
	0x03CDD7EC LDR X1, [X25]
	0x03CDD7F0 LDRH W9, [X8 + 0x12E]
	0x03CDD7F4 TBZ X0, 0x0, 0x3CDD868
	0x03CDD7F8 CBZ W9, 0x3CDD81C
	0x03CDD7FC LDR X10, [X8 + 0xB0]
	0x03CDD800 ADD X10, X10, 0x8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x70B000
	005 Move W8, [X20+1188]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x47C000
	012 Move X0, [X0+1816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1188], W8
	016 Move X0, X19
	017 Call Graphic.get_canvasRenderer, X0
	018 Compare X0, 0
	019 JumpIfEqual {49}
	020 Move X1, X31
	021 Call CanvasRenderer.get_cull, X0
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {30}
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Return 
	030 Move W8, [X19+104]
	031 Compare W8, 0
	032 JumpIfNotEqual {36}
	033 Move W8, [X19+105]
	034 Compare W8, 0
	035 JumpIfEqual {26}
	036 Move X8, 0x47C000
	037 Move X8, [X8+1816]
	038 Move X0, [X8]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X30, [X31+32]
	047 Call CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild, X0
	048 Return 
	049 Call 0x1C17F20

Method: System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)

Disassembly:
	0x03CDD804 LDUR X11, [X10 - 0x8]
	0x03CDD808 CMP X11, X1
	0x03CDD80C B.EQ 0x3CDD89C
	0x03CDD810 SUBS X9, X9, 0x1
	0x03CDD814 ADD X10, X10, 0x10
	0x03CDD818 B.NE 0x3CDD804
	0x03CDD81C MOV X0, X23
	0x03CDD820 MOV W2, W31
	0x03CDD824 BL 0x1C5C788
	0x03CDD828 B 0x3CDD8A8
	0x03CDD82C LDRSW X9, [X10]
	0x03CDD830 ADD X8, X8, X9, 0x4, LSL
	0x03CDD834 ADD X0, X8, 0x138
	0x03CDD838 LDP X8, X2, [X0]
	0x03CDD83C MOV X0, X23
	0x03CDD840 MOV V0.16B, V9.16B
	0x03CDD844 MOV V1.16B, V8.16B
	0x03CDD848 MOV X1, X19
	0x03CDD84C BLR X8
	0x03CDD850 TBZ X0, 0x0, 0x3CDD918
	0x03CDD854 LDR W8, [X20 + 0x18]
	0x03CDD858 ADD W22, W22, 0x1
	0x03CDD85C CMP W22, W8
	0x03CDD860 B.LT 0x3CDD694
	0x03CDD864 B 0x3CDD8FC
	0x03CDD868 CBZ W9, 0x3CDD88C
	0x03CDD86C LDR X10, [X8 + 0xB0]
	0x03CDD870 ADD X10, X10, 0x8
	0x03CDD874 LDUR X11, [X10 - 0x8]
	0x03CDD878 CMP X11, X1
	0x03CDD87C B.EQ 0x3CDD8CC
	0x03CDD880 SUBS X9, X9, 0x1
	0x03CDD884 ADD X10, X10, 0x10
	0x03CDD888 B.NE 0x3CDD874
	0x03CDD88C MOV X0, X23
	0x03CDD890 MOV W2, W31
	0x03CDD894 BL 0x1C5C788
	0x03CDD898 B 0x3CDD8D8
	0x03CDD89C LDRSW X9, [X10]
	0x03CDD8A0 ADD X8, X8, X9, 0x4, LSL
	0x03CDD8A4 ADD X0, X8, 0x138
	0x03CDD8A8 LDP X8, X2, [X0]
	0x03CDD8AC MOV X0, X23
	0x03CDD8B0 MOV V0.16B, V9.16B
	0x03CDD8B4 MOV V1.16B, V8.16B
	0x03CDD8B8 MOV X1, X19
	0x03CDD8BC BLR X8
	0x03CDD8C0 TBZ X0, 0x0, 0x3CDD918
	0x03CDD8C4 MOVZ W28, 0x1
	0x03CDD8C8 B 0x3CDD854
	0x03CDD8CC LDRSW X9, [X10]
	0x03CDD8D0 ADD X8, X8, X9, 0x4, LSL
	0x03CDD8D4 ADD X0, X8, 0x138
	0x03CDD8D8 LDP X8, X2, [X0]
	0x03CDD8DC MOV X0, X23
	0x03CDD8E0 MOV V0.16B, V9.16B
	0x03CDD8E4 MOV V1.16B, V8.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x70B000
	007 Move X21, 0x417000
	008 Move W8, [X22+1189]
	009 Move X21, [X21+1432]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x417000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1189], W8
	021 Move X0, X19
	022 Call Graphic.get_canvasRenderer, X0
	023 Move X8, [X21]
	024 Move X21, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {67}
	038 Move X0, X19
	039 Call Graphic.get_canvasRenderer, X0
	040 Compare X0, 0
	041 JumpIfEqual {73}
	042 Move X1, X31
	043 Call CanvasRenderer.get_cull, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfEqual {67}
	049 Move W8, [X19+104]
	050 Compare W8, 0
	051 JumpIfEqual {58}
	052 Move X8, [X19]
	053 Move X0, X19
	054 Move X9, [X8+968]
	055 Move X1, [X8+976]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move [X19+104], W31
	058 Move W8, [X19+105]
	059 Compare W8, 0
	060 JumpIfEqual {67}
	061 Move X8, [X19]
	062 Move X0, X19
	063 Move X9, [X8+952]
	064 Move X1, [X8+960]
	065 NotImplemented "Instruction BLR not yet implemented."
	066 Move [X19+105], W31
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return 
	073 Call 0x1C17F20

Method: System.Void LayoutComplete()

Disassembly:
	0x03CDD8E8 MOV X1, X19

ISIL:
	001 Return 

Method: System.Void GraphicUpdateComplete()

Disassembly:
	0x03CDD8EC BLR X8

ISIL:
	001 Return 

Method: System.Void UpdateMaterial()

Disassembly:
	0x03CDD8F0 TBZ X0, 0x0, 0x3CDD918
	0x03CDD8F4 MOV W28, W31
	0x03CDD8F8 B 0x3CDD854
	0x03CDD8FC MOV X22, X31
	0x03CDD900 TBZ X26, 0x0, 0x3CDD63C
	0x03CDD904 MOV X0, X21
	0x03CDD908 MOV X1, X31
	0x03CDD90C BL 0x3C3F49C
	0x03CDD910 MOV X22, X0
	0x03CDD914 B 0x3CDD63C
	0x03CDD918 ADRP X8, 0x43E000
	0x03CDD91C LDR X8, [X8 + 0xA28]
	0x03CDD920 LDR X0, [X8]
	0x03CDD924 LDR W8, [X0 + 0xE0]
	0x03CDD928 CBNZ W8, 0x3CDD930
	0x03CDD92C BL 0x1C16DFC
	0x03CDD930 ADRP X8, 0x43E000
	0x03CDD934 LDR X8, [X8 + 0xA20]
	0x03CDD938 MOV X0, X20
	0x03CDD93C LDR X1, [X8]
	0x03CDD940 BL 0x28F9A14
	0x03CDD944 MOV W0, W31
	0x03CDD948 LDP X20, X19, [X31 + 0x60]
	0x03CDD94C LDP X22, X21, [X31 + 0x50]
	0x03CDD950 LDP X24, X23, [X31 + 0x40]
	0x03CDD954 LDP X26, X25, [X31 + 0x30]
	0x03CDD958 LDP X28, X27, [X31 + 0x20]
	0x03CDD95C LDP X29, X30, [X31 + 0x10]
	0x03CDD960 LDP D9, D8, [X31], #0x70
	0x03CDD964 RET
	0x03CDD968 ADRP X8, 0x43E000
	0x03CDD96C LDR X8, [X8 + 0xA28]
	0x03CDD970 LDR X0, [X8]
	0x03CDD974 LDR W8, [X0 + 0xE0]
	0x03CDD978 CBNZ W8, 0x3CDD980
	0x03CDD97C BL 0x1C16DFC
	0x03CDD980 ADRP X8, 0x43E000
	0x03CDD984 LDR X8, [X8 + 0xA20]
	0x03CDD988 MOV X0, X20
	0x03CDD98C LDR X1, [X8]
	0x03CDD990 BL 0x28F9A14
	0x03CDD994 MOVZ W0, 0x1
	0x03CDD998 B 0x3CDD948
	0x03CDD99C BL 0x1C16F20
	0x03CDD9A0 STP D9, D8, [X31 - 0x30]!
	0x03CDD9A4 STP X30, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move X19, X0
	006 Move X9, [X8+456]
	007 Move X1, [X8+464]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {53}
	013 Move X0, X19
	014 Call Graphic.get_canvasRenderer, X0
	015 Compare X0, 0
	016 JumpIfEqual {57}
	017 Move W1, 1
	018 Move X2, X31
	019 Call CanvasRenderer.set_materialCount, X0, X1
	020 Move X0, X19
	021 Call Graphic.get_canvasRenderer, X0
	022 Move X8, [X19]
	023 Move X20, X0
	024 Move X0, X19
	025 Move X9, [X8+856]
	026 Move X1, [X8+864]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Compare X20, 0
	029 JumpIfEqual {57}
	030 Move X1, X0
	031 Move X0, X20
	032 Move W2, W31
	033 Move X3, X31
	034 Call CanvasRenderer.SetMaterial, X0, X1, X2
	035 Move X0, X19
	036 Call Graphic.get_canvasRenderer, X0
	037 Move X8, [X19]
	038 Move X20, X0
	039 Move X0, X19
	040 Move X9, [X8+872]
	041 Move X1, [X8+880]
	042 NotImplemented "Instruction BLR not yet implemented."
	043 Compare X20, 0
	044 JumpIfEqual {57}
	045 Move X1, X0
	046 Move X0, X20
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X2, X31
	050 Move X30, [X31+32]
	051 Call CanvasRenderer.SetTexture, X0, X1
	052 Return 
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Return 
	057 Call 0x1C17F20

Method: System.Void UpdateGeometry()

Disassembly:
	0x03CDD9A8 STP X20, X19, [X31 + 0x20]
	0x03CDD9AC ADRP X21, 0x70A000
	0x03CDD9B0 ADRP X20, 0x416000
	0x03CDD9B4 LDRB W8, [X21 + 0x4AB]

ISIL:
	001 Move W8, [X0+160]
	002 Compare W8, 0
	003 JumpIfEqual {4}
	004 Call Graphic.DoMeshGeneration, X0
	005 Return 

Method: System.Void DoMeshGeneration()

Disassembly:
	0x03CDDD20 LDR X8, [X31 + 0x70]
	0x03CDDD24 STP V0, V1, [X31]
	0x03CDDD28 STR V2, [X31 + 0x2]
	0x03CDDD2C STR X8, [X31 + 0x30]
	0x03CDDD30 CBZ X0, 0x3CDDD84
	0x03CDDD34 ADRP X8, 0x485000
	0x03CDDD38 LDR X8, [X8 + 0x4C8]
	0x03CDDD3C LDP V0, V1, [X31]
	0x03CDDD40 LDR V2, [X31 + 0x2]
	0x03CDDD44 LDR X9, [X31 + 0x30]
	0x03CDDD48 LDR X2, [X8]
	0x03CDDD4C ADD X1, X31, 0x90
	0x03CDDD50 STP V0, V1, [X31 + 0x90]
	0x03CDDD54 STR V2, [X31 + 0xB]
	0x03CDDD58 STR X9, [X31 + 0xC0]
	0x03CDDD5C BL 0x27090AC
	0x03CDDD60 LDP X20, X19, [X31 + 0x130]
	0x03CDDD64 LDP X22, X21, [X31 + 0x120]
	0x03CDDD68 LDP X24, X23, [X31 + 0x110]
	0x03CDDD6C LDP X29, X30, [X31 + 0x100]
	0x03CDDD70 LDP D9, D8, [X31 + 0xF0]
	0x03CDDD74 LDP D11, D10, [X31 + 0xE0]
	0x03CDDD78 LDR V12, [X31 + 0xD0]
	0x03CDDD7C ADD X31, X31, 0x140
	0x03CDDD80 RET
	0x03CDDD84 BL 0x1C16F20
	0x03CDDD88 MOV V3.16B, V0.16B
	0x03CDDD8C FMOV S0, W31
	0x03CDDD90 FMOV S1, W31
	0x03CDDD94 FMOV S2, W31
	0x03CDDD98 RET
	0x03CDDD9C STP D9, D8, [X31 - 0x40]!
	0x03CDDDA0 STR X30, [X31 + 0x10]
	0x03CDDDA4 STP X22, X21, [X31 + 0x20]
	0x03CDDDA8 STP X20, X19, [X31 + 0x30]
	0x03CDDDAC ADRP X21, 0x70A000
	0x03CDDDB0 ADRP X22, 0x47C000
	0x03CDDDB4 LDRB W8, [X21 + 0x4AE]
	0x03CDDDB8 LDR X22, [X22 + 0x118]
	0x03CDDDBC MOV W20, W1
	0x03CDDDC0 MOV V8.16B, V1.16B
	0x03CDDDC4 MOV V9.16B, V0.16B
	0x03CDDDC8 MOV X19, X0
	0x03CDDDCC TBNZ X8, 0x0, 0x3CDDDE4
	0x03CDDDD0 ADRP X0, 0x47C000
	0x03CDDDD4 LDR X0, [X0 + 0x118]
	0x03CDDDD8 BL 0x1C16CF4
	0x03CDDDDC MOVZ W8, 0x1
	0x03CDDDE0 STRB W8, [X21 + 0x4AE]
	0x03CDDDE4 LDR X0, [X22]
	0x03CDDDE8 LDR W8, [X0 + 0xE0]
	0x03CDDDEC CBNZ W8, 0x3CDDDF4
	0x03CDDDF0 BL 0x1C16DFC
	0x03CDDDF4 LDR X8, [X19]
	0x03CDDDF8 AND W1, W20, 0x1
	0x03CDDDFC MOV X0, X19
	0x03CDDE00 LDP X20, X19, [X31 + 0x30]
	0x03CDDE04 LDR X5, [X8 + 0x438]
	0x03CDDE08 LDR X4, [X8 + 0x440]
	0x03CDDE0C LDP X22, X21, [X31 + 0x20]
	0x03CDDE10 LDR X30, [X31 + 0x10]
	0x03CDDE14 FMOV S0, W31
	0x03CDDE18 FMOV S1, W31
	0x03CDDE1C FMOV S2, W31
	0x03CDDE20 MOVZ W2, 0x1
	0x03CDDE24 MOV V3.16B, V9.16B
	0x03CDDE28 MOV V4.16B, V8.16B
	0x03CDDE2C MOV W3, W31
	0x03CDDE30 LDP D9, D8, [X31], #0x40
	0x03CDDE34 BR X5
	0x03CDDE38 STP X30, X21, [X31 - 0x20]!
	0x03CDDE3C STP X20, X19, [X31 + 0x10]
	0x03CDDE40 ADRP X21, 0x70A000
	0x03CDDE44 LDRB W8, [X21 + 0x4AF]
	0x03CDDE48 MOV X20, X1
	0x03CDDE4C MOV X19, X0
	0x03CDDE50 TBNZ X8, 0x0, 0x3CDDE68
	0x03CDDE54 ADRP X0, 0x43D000
	0x03CDDE58 LDR X0, [X0 + 0xE30]
	0x03CDDE5C BL 0x1C16CF4
	0x03CDDE60 MOVZ W8, 0x1
	0x03CDDE64 STRB W8, [X21 + 0x4AF]
	0x03CDDE68 LDR X0, [X19 + 0x70]
	0x03CDDE6C MOV X1, X20
	0x03CDDE70 MOV X2, X31
	0x03CDDE74 BL 0x33C0DE4
	0x03CDDE78 CBZ X0, 0x3CDDEA8
	0x03CDDE7C ADRP X8, 0x43D000
	0x03CDDE80 LDR X8, [X8 + 0xE30]
	0x03CDDE84 LDR X1, [X8]
	0x03CDDE88 LDR X8, [X0]
	0x03CDDE8C CMP X8, X1
	0x03CDDE90 B.NE 0x3CDDEA4
	0x03CDDE94 STR X0, [X19 + 0x70]
	0x03CDDE98 LDR X8, [X0]
	0x03CDDE9C CMP X8, X1
	0x03CDDEA0 B.EQ 0x3CDDEAC
	0x03CDDEA4 BL 0x1C171E0
	0x03CDDEA8 STR X0, [X19 + 0x70]
	0x03CDDEAC LDP X20, X19, [X31 + 0x10]
	0x03CDDEB0 LDP X30, X21, [X31], #0x20
	0x03CDDEB4 RET
	0x03CDDEB8 STP X30, X21, [X31 - 0x20]!
	0x03CDDEBC STP X20, X19, [X31 + 0x10]
	0x03CDDEC0 ADRP X21, 0x70A000
	0x03CDDEC4 LDRB W8, [X21 + 0x4B0]
	0x03CDDEC8 MOV X20, X1
	0x03CDDECC MOV X19, X0
	0x03CDDED0 TBNZ X8, 0x0, 0x3CDDEE8
	0x03CDDED4 ADRP X0, 0x43D000
	0x03CDDED8 LDR X0, [X0 + 0xE30]
	0x03CDDEDC BL 0x1C16CF4
	0x03CDDEE0 MOVZ W8, 0x1
	0x03CDDEE4 STRB W8, [X21 + 0x4B0]
	0x03CDDEE8 LDR X0, [X19 + 0x70]
	0x03CDDEEC MOV X1, X20
	0x03CDDEF0 MOV X2, X31
	0x03CDDEF4 BL 0x33C0FDC
	0x03CDDEF8 CBZ X0, 0x3CDDF28
	0x03CDDEFC ADRP X8, 0x43D000
	0x03CDDF00 LDR X8, [X8 + 0xE30]
	0x03CDDF04 LDR X1, [X8]
	0x03CDDF08 LDR X8, [X0]
	0x03CDDF0C CMP X8, X1
	0x03CDDF10 B.NE 0x3CDDF24
	0x03CDDF14 STR X0, [X19 + 0x70]
	0x03CDDF18 LDR X8, [X0]
	0x03CDDF1C CMP X8, X1
	0x03CDDF20 B.EQ 0x3CDDF2C
	0x03CDDF24 BL 0x1C171E0
	0x03CDDF28 STR X0, [X19 + 0x70]
	0x03CDDF2C LDP X20, X19, [X31 + 0x10]
	0x03CDDF30 LDP X30, X21, [X31], #0x20
	0x03CDDF34 RET
	0x03CDDF38 STP X30, X21, [X31 - 0x20]!
	0x03CDDF3C STP X20, X19, [X31 + 0x10]
	0x03CDDF40 ADRP X21, 0x70A000
	0x03CDDF44 LDRB W8, [X21 + 0x4B1]
	0x03CDDF48 MOV X20, X1
	0x03CDDF4C MOV X19, X0
	0x03CDDF50 TBNZ X8, 0x0, 0x3CDDF68
	0x03CDDF54 ADRP X0, 0x43D000
	0x03CDDF58 LDR X0, [X0 + 0xE30]
	0x03CDDF5C BL 0x1C16CF4
	0x03CDDF60 MOVZ W8, 0x1
	0x03CDDF64 STRB W8, [X21 + 0x4B1]
	0x03CDDF68 LDR X0, [X19 + 0x78]
	0x03CDDF6C MOV X1, X20
	0x03CDDF70 MOV X2, X31
	0x03CDDF74 BL 0x33C0DE4
	0x03CDDF78 CBZ X0, 0x3CDDFA8
	0x03CDDF7C ADRP X8, 0x43D000
	0x03CDDF80 LDR X8, [X8 + 0xE30]
	0x03CDDF84 LDR X1, [X8]
	0x03CDDF88 LDR X8, [X0]
	0x03CDDF8C CMP X8, X1
	0x03CDDF90 B.NE 0x3CDDFA4
	0x03CDDF94 STR X0, [X19 + 0x78]
	0x03CDDF98 LDR X8, [X0]
	0x03CDDF9C CMP X8, X1
	0x03CDDFA0 B.EQ 0x3CDDFAC
	0x03CDDFA4 BL 0x1C171E0
	0x03CDDFA8 STR X0, [X19 + 0x78]
	0x03CDDFAC LDP X20, X19, [X31 + 0x10]
	0x03CDDFB0 LDP X30, X21, [X31], #0x20
	0x03CDDFB4 RET
	0x03CDDFB8 STP X30, X21, [X31 - 0x20]!
	0x03CDDFBC STP X20, X19, [X31 + 0x10]
	0x03CDDFC0 ADRP X21, 0x70A000
	0x03CDDFC4 LDRB W8, [X21 + 0x4B2]
	0x03CDDFC8 MOV X20, X1
	0x03CDDFCC MOV X19, X0
	0x03CDDFD0 TBNZ X8, 0x0, 0x3CDDFE8
	0x03CDDFD4 ADRP X0, 0x43D000
	0x03CDDFD8 LDR X0, [X0 + 0xE30]
	0x03CDDFDC BL 0x1C16CF4
	0x03CDDFE0 MOVZ W8, 0x1
	0x03CDDFE4 STRB W8, [X21 + 0x4B2]
	0x03CDDFE8 LDR X0, [X19 + 0x78]
	0x03CDDFEC MOV X1, X20
	0x03CDDFF0 MOV X2, X31
	0x03CDDFF4 BL 0x33C0FDC
	0x03CDDFF8 CBZ X0, 0x3CDE028
	0x03CDDFFC ADRP X8, 0x43D000
	0x03CDE000 LDR X8, [X8 + 0xE30]
	0x03CDE004 LDR X1, [X8]
	0x03CDE008 LDR X8, [X0]
	0x03CDE00C CMP X8, X1
	0x03CDE010 B.NE 0x3CDE024
	0x03CDE014 STR X0, [X19 + 0x78]
	0x03CDE018 LDR X8, [X0]
	0x03CDE01C CMP X8, X1
	0x03CDE020 B.EQ 0x3CDE02C
	0x03CDE024 BL 0x1C171E0
	0x03CDE028 STR X0, [X19 + 0x78]
	0x03CDE02C LDP X20, X19, [X31 + 0x10]
	0x03CDE030 LDP X30, X21, [X31], #0x20
	0x03CDE034 RET
	0x03CDE038 STP X30, X21, [X31 - 0x20]!
	0x03CDE03C STP X20, X19, [X31 + 0x10]
	0x03CDE040 ADRP X21, 0x709000
	0x03CDE044 LDRB W8, [X21 + 0x4B3]
	0x03CDE048 MOV X20, X1
	0x03CDE04C MOV X19, X0
	0x03CDE050 TBNZ X8, 0x0, 0x3CDE068
	0x03CDE054 ADRP X0, 0x43C000
	0x03CDE058 LDR X0, [X0 + 0xE30]
	0x03CDE05C BL 0x1C16CF4
	0x03CDE060 MOVZ W8, 0x1
	0x03CDE064 STRB W8, [X21 + 0x4B3]
	0x03CDE068 LDR X0, [X19 + 0x80]
	0x03CDE06C MOV X1, X20
	0x03CDE070 MOV X2, X31
	0x03CDE074 BL 0x33C0DE4
	0x03CDE078 CBZ X0, 0x3CDE0A8
	0x03CDE07C ADRP X8, 0x43C000
	0x03CDE080 LDR X8, [X8 + 0xE30]
	0x03CDE084 LDR X1, [X8]
	0x03CDE088 LDR X8, [X0]
	0x03CDE08C CMP X8, X1
	0x03CDE090 B.NE 0x3CDE0A4
	0x03CDE094 STR X0, [X19 + 0x80]
	0x03CDE098 LDR X8, [X0]
	0x03CDE09C CMP X8, X1
	0x03CDE0A0 B.EQ 0x3CDE0AC
	0x03CDE0A4 BL 0x1C171E0
	0x03CDE0A8 STR X0, [X19 + 0x80]
	0x03CDE0AC LDP X20, X19, [X31 + 0x10]
	0x03CDE0B0 LDP X30, X21, [X31], #0x20
	0x03CDE0B4 RET
	0x03CDE0B8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x70B000
	014 Move X20, 0x417000
	015 Move W8, [X21+1190]
	016 Move X20, [X20+1432]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {54}
	022 Move X0, 0x43F000
	023 Move X0, [X0+2584]
	024 Call 0x1C17CF4
	025 Move X0, 0x43F000
	026 Move X0, [X0+2592]
	027 Call 0x1C17CF4
	028 Move X0, 0x43F000
	029 Move X0, [X0+2600]
	030 Call 0x1C17CF4
	031 Move X0, 0x47D000
	032 Move X0, [X0+280]
	033 Call 0x1C17CF4
	034 Move X0, 0x486000
	035 Move X0, [X0+1160]
	036 Call 0x1C17CF4
	037 Move X0, 0x486000
	038 Move X0, [X0+1168]
	039 Call 0x1C17CF4
	040 Move X0, 0x43F000
	041 Move X0, [X0+2624]
	042 Call 0x1C17CF4
	043 Move X0, 0x43F000
	044 Move X0, [X0+2632]
	045 Call 0x1C17CF4
	046 Move X0, 0x417000
	047 Move X0, [X0+1432]
	048 Call 0x1C17CF4
	049 Move X0, 0x417000
	050 Move X0, [X0+1728]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X21+1190], W8
	054 Move X0, X19
	055 Call Graphic.get_rectTransform, X0
	056 Move X8, [X20]
	057 Move X20, X0
	058 Move W9, [X8+224]
	059 Compare W9, 0
	060 JumpIfNotEqual {63}
	061 Move X0, X8
	062 Call 0x1C17DFC
	063 Move X26, 0x47D000
	064 Move X26, [X26+280]
	065 Move X0, X20
	066 Move X1, X31
	067 Move X2, X31
	068 Call Object.op_Inequality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {87}
	073 Move X0, X19
	074 Call Graphic.get_rectTransform, X0
	075 Compare X0, 0
	076 JumpIfEqual {255}
	077 Move X1, X31
	078 Call RectTransform.get_rect, X0
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 Move X0, X19
	081 Call Graphic.get_rectTransform, X0
	082 Compare X0, 0
	083 JumpIfEqual {255}
	084 Move X1, X31
	085 Call RectTransform.get_rect, X0
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 Move X0, [X26]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {93}
	091 Call 0x1C17DFC
	092 Move X0, [X26]
	093 Move X8, [X0+184]
	094 Move X0, [X8+24]
	095 Compare X0, 0
	096 JumpIfEqual {255}
	097 Move X1, X31
	098 Call VertexHelper.Clear, X0
	099 Move X27, 0x43F000
	100 Move X27, [X27+2600]
	101 Move X22, 0x43F000
	102 Move X20, 0x486000
	103 Move X21, 0x417000
	104 Move X0, [X27]
	105 Move W8, [X0+224]
	106 Move X22, [X22+2584]
	107 Move X20, [X20+1160]
	108 Move X21, [X21+1728]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move X0, [X22]
	113 Call CollectionPool`2<Object, Object>.Get
	114 Move X8, [X21]
	115 Move X21, [X20]
	116 Move X20, X0
	117 Move W9, [X8+224]
	118 Compare W9, 0
	119 JumpIfNotEqual {122}
	120 Move X0, X8
	121 Call 0x1C17DFC
	122 Move X0, X21
	123 Move X1, X31
	124 Call Type.GetTypeFromHandle, X0
	125 Move X1, X0
	126 Move X0, X19
	127 Move X2, X20
	128 Move X3, X31
	129 Call Component.GetComponents, X0, X1, X2
	130 Compare X20, 0
	131 JumpIfEqual {255}
	132 Move W8, [X20+24]
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move X28, 0x43F000
	135 Move X29, 0x486000
	136 Move X28, [X28+2632]
	137 Move X29, [X29+1168]
	138 Move W21, W31
	139 Move X2, [X28]
	140 Move X0, X20
	141 Move W1, W21
	142 Call List`1<Object>.get_Item, X0, X1
	143 Move X8, [X26]
	144 Move X25, X0
	145 Move W9, [X8+224]
	146 Compare W9, 0
	147 JumpIfNotEqual {151}
	148 Move X0, X8
	149 Call 0x1C17DFC
	150 Move X8, [X26]
	151 Compare X25, 0
	152 JumpIfEqual {255}
	153 Move X8, [X8+184]
	154 Move X23, [X29]
	155 Move X0, X25
	156 Move X22, [X8+24]
	157 Move X1, X23
	158 Call 0x1C17E00
	159 Compare X0, 0
	160 JumpIfEqual {256}
	161 Move X24, [X29]
	162 Move X0, X25
	163 Move X1, X24
	164 Call 0x1C17E00
	165 Compare X0, 0
	166 JumpIfEqual {259}
	167 Move X8, [X0]
	168 Move X23, X0
	169 NotImplemented "Instruction LDRH not yet implemented."
	170 Compare X9, 0
	171 JumpIfEqual {178}
	172 Move X10, [X8+176]
	173 Add X10, X10, 8
	174 NotImplemented "Instruction LDUR not yet implemented."
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Subtract X9, X9, 1
	177 Add X10, X10, 16
	178 Move W2, 1
	179 Move X0, X23
	180 Move X1, X24
	181 Call 0x1C5D788
	182 Move W9, [X10]
	183 Add W9, W9, 1
	184 Add X8, X8, W9
	185 Add X0, X8, 312
	186 Move X8, [X0]
	187 Move X2, [X0+8]
	188 Move X0, X23
	189 Move X1, X22
	190 NotImplemented "Instruction BLR not yet implemented."
	191 Move W8, [X20+24]
	192 Add W21, W21, 1
	193 NotImplemented "Instruction CMP not yet implemented."
	194 Move X0, [X27]
	195 Move X21, 0x43F000
	196 Move W8, [X0+224]
	197 Move X21, [X21+2592]
	198 Compare W8, 0
	199 JumpIfNotEqual {201}
	200 Call 0x1C17DFC
	201 Move X1, [X21]
	202 Move X0, X20
	203 Call CollectionPool`2<Object, Object>.Release, X0
	204 Move X0, [X26]
	205 Move W8, [X0+224]
	206 Compare W8, 0
	207 JumpIfNotEqual {210}
	208 Call 0x1C17DFC
	209 Move X0, [X26]
	210 Move X8, [X0+184]
	211 Move X20, [X8+24]
	212 Call Graphic.get_workerMesh
	213 Compare X20, 0
	214 JumpIfEqual {255}
	215 Move X1, X0
	216 Move X0, X20
	217 Move X2, X31
	218 Call VertexHelper.FillMesh, X0, X1
	219 Move X0, X19
	220 Call Graphic.get_canvasRenderer, X0
	221 Move X19, X0
	222 Call Graphic.get_workerMesh
	223 Compare X19, 0
	224 JumpIfEqual {255}
	225 Move X1, X0
	226 Move X0, X19
	227 Move X20, [X31+80]
	228 Move X19, [X31+88]
	229 Move X22, [X31+64]
	230 Move X21, [X31+72]
	231 Move X24, [X31+48]
	232 Move X23, [X31+56]
	233 Move X26, [X31+32]
	234 Move X25, [X31+40]
	235 Move X28, [X31+16]
	236 Move X27, [X31+24]
	237 Move X2, X31
	238 Move X29, [X31+96]
	239 Move X30, [X31+104]
	240 Call CanvasRenderer.SetMesh, X0, X1
	241 Return 
	242 Move X0, [X26]
	243 Move W8, [X0+224]
	244 Compare W8, 0
	245 JumpIfNotEqual {248}
	246 Call 0x1C17DFC
	247 Move X0, [X26]
	248 Move X8, [X0+184]
	249 Move X9, [X19]
	250 Move X0, X19
	251 Move X1, [X8+24]
	252 Move X8, [X9+1016]
	253 Move X2, [X9+1024]
	254 NotImplemented "Instruction BLR not yet implemented."
	255 Call 0x1C17F20
	256 Move X0, X25
	257 Move X1, X23
	258 Call 0x1C181E0
	259 Move X0, X25
	260 Move X1, X24
	261 Call 0x1C181E0

Method: System.Void DoLegacyMeshGeneration()

Disassembly:
	0x03CDD9B8 LDR X20, [X20 + 0x598]
	0x03CDD9BC MOV V8.16B, V1.16B
	0x03CDD9C0 MOV V9.16B, V0.16B
	0x03CDD9C4 MOV X19, X0
	0x03CDD9C8 TBNZ X8, 0x0, 0x3CDD9EC
	0x03CDD9CC ADRP X0, 0x416000
	0x03CDD9D0 LDR X0, [X0 + 0x598]
	0x03CDD9D4 BL 0x1C16CF4
	0x03CDD9D8 ADRP X0, 0x46C000
	0x03CDD9DC LDR X0, [X0 + 0x6B8]
	0x03CDD9E0 BL 0x1C16CF4
	0x03CDD9E4 MOVZ W8, 0x1
	0x03CDD9E8 STRB W8, [X21 + 0x4AB]
	0x03CDD9EC MOV X0, X19
	0x03CDD9F0 BL 0x3CDADE8
	0x03CDD9F4 LDR X8, [X20]
	0x03CDD9F8 MOV X20, X0
	0x03CDD9FC LDR W9, [X8 + 0xE0]
	0x03CDDA00 CBNZ W9, 0x3CDDA0C
	0x03CDDA04 MOV X0, X8
	0x03CDDA08 BL 0x1C16DFC
	0x03CDDA0C MOV X0, X20
	0x03CDDA10 MOV X1, X31
	0x03CDDA14 BL 0x3C38948
	0x03CDDA18 TBZ X0, 0x0, 0x3CDDAC4
	0x03CDDA1C MOV X0, X19
	0x03CDDA20 BL 0x3CDADE8
	0x03CDDA24 CBZ X0, 0x3CDDADC
	0x03CDDA28 MOV X1, X31
	0x03CDDA2C BL 0x3E244BC
	0x03CDDA30 CMP W0, 0x2
	0x03CDDA34 B.EQ 0x3CDDAC4
	0x03CDDA38 MOV X0, X19
	0x03CDDA3C BL 0x3CDADE8
	0x03CDDA40 CBZ X0, 0x3CDDADC
	0x03CDDA44 MOV X1, X31
	0x03CDDA48 BL 0x3E24614
	0x03CDDA4C FCMP S0, 0x0
	0x03CDDA50 B.EQ 0x3CDDAC4
	0x03CDDA54 MOV X0, X19
	0x03CDDA58 BL 0x3CDADE8
	0x03CDDA5C CBZ X0, 0x3CDDADC
	0x03CDDA60 MOV X1, X31
	0x03CDDA64 BL 0x3E247A4
	0x03CDDA68 TBZ X0, 0x0, 0x3CDDAC4
	0x03CDDA6C MOV X0, X19
	0x03CDDA70 MOV X1, X31
	0x03CDDA74 BL 0x3C32E90
	0x03CDDA78 MOV X20, X0
	0x03CDDA7C MOV X0, X19
	0x03CDDA80 BL 0x3CDADE8
	0x03CDDA84 ADRP X8, 0x46C000
	0x03CDDA88 LDR X8, [X8 + 0x6B8]
	0x03CDDA8C MOV X19, X0
	0x03CDDA90 LDR X8, [X8]
	0x03CDDA94 LDR W9, [X8 + 0xE0]
	0x03CDDA98 CBNZ W9, 0x3CDDAA4
	0x03CDDA9C MOV X0, X8
	0x03CDDAA0 BL 0x1C16DFC
	0x03CDDAA4 MOV V0.16B, V9.16B
	0x03CDDAA8 MOV V1.16B, V8.16B
	0x03CDDAAC MOV X0, X20
	0x03CDDAB0 MOV X1, X19
	0x03CDDAB4 MOV X2, X31
	0x03CDDAB8 BL 0x3E23044
	0x03CDDABC MOV V9.16B, V0.16B
	0x03CDDAC0 MOV V8.16B, V1.16B
	0x03CDDAC4 LDP X20, X19, [X31 + 0x20]
	0x03CDDAC8 LDP X30, X21, [X31 + 0x10]
	0x03CDDACC MOV V0.16B, V9.16B
	0x03CDDAD0 MOV V1.16B, V8.16B
	0x03CDDAD4 LDP D9, D8, [X31], #0x30
	0x03CDDAD8 RET
	0x03CDDADC BL 0x1C16F20
	0x03CDDAE0 LDR X8, [X0]
	0x03CDDAE4 AND W1, W1, 0x1
	0x03CDDAE8 AND W2, W2, 0x1
	0x03CDDAEC MOVZ W3, 0x1
	0x03CDDAF0 LDR X5, [X8 + 0x438]
	0x03CDDAF4 LDR X4, [X8 + 0x440]
	0x03CDDAF8 BR X5
	0x03CDDAFC SUB X31, X31, 0x140
	0x03CDDB00 STR D12, [X31 + 0xD0]
	0x03CDDB04 STP D11, D10, [X31 + 0xE0]
	0x03CDDB08 STP D9, D8, [X31 + 0xF0]
	0x03CDDB0C STP X29, X30, [X31 + 0x100]
	0x03CDDB10 STP X24, X23, [X31 + 0x110]
	0x03CDDB14 STP X22, X21, [X31 + 0x120]
	0x03CDDB18 STP X20, X19, [X31 + 0x130]
	0x03CDDB1C ADRP X24, 0x70A000
	0x03CDDB20 ADRP X23, 0x416000
	0x03CDDB24 LDRB W8, [X24 + 0x4AD]
	0x03CDDB28 LDR X23, [X23 + 0x598]
	0x03CDDB2C MOV W21, W3
	0x03CDDB30 MOV W22, W2
	0x03CDDB34 MOV W20, W1
	0x03CDDB38 MOV V8.16B, V4.16B
	0x03CDDB3C MOV V9.16B, V3.16B
	0x03CDDB40 MOV V10.16B, V2.16B
	0x03CDDB44 MOV V11.16B, V1.16B
	0x03CDDB48 MOV V12.16B, V0.16B
	0x03CDDB4C MOV X19, X0
	0x03CDDB50 TBNZ X8, 0x0, 0x3CDDB98
	0x03CDDB54 ADRP X0, 0x485000
	0x03CDDB58 LDR X0, [X0 + 0x4C0]
	0x03CDDB5C BL 0x1C16CF4
	0x03CDDB60 ADRP X0, 0x416000
	0x03CDDB64 LDR X0, [X0 + 0x598]
	0x03CDDB68 BL 0x1C16CF4
	0x03CDDB6C ADRP X0, 0x485000
	0x03CDDB70 LDR X0, [X0 + 0x4C8]
	0x03CDDB74 BL 0x1C16CF4
	0x03CDDB78 ADRP X0, 0x485000
	0x03CDDB7C LDR X0, [X0 + 0x4D0]
	0x03CDDB80 BL 0x1C16CF4
	0x03CDDB84 ADRP X0, 0x485000
	0x03CDDB88 LDR X0, [X0 + 0x4D8]
	0x03CDDB8C BL 0x1C16CF4
	0x03CDDB90 MOVZ W8, 0x1
	0x03CDDB94 STRB W8, [X24 + 0x4AD]
	0x03CDDB98 MOVI V0.2D, 0x0
	0x03CDDB9C MOV X0, X19
	0x03CDDBA0 STR X31, [X31 + 0x70]
	0x03CDDBA4 STP V0, V0, [X31 + 0x50]
	0x03CDDBA8 STR V0, [X31 + 0x4]
	0x03CDDBAC BL 0x3CDBD2C
	0x03CDDBB0 LDR X8, [X23]
	0x03CDDBB4 MOV X23, X0
	0x03CDDBB8 LDR W9, [X8 + 0xE0]
	0x03CDDBBC CBNZ W9, 0x3CDDBC8
	0x03CDDBC0 MOV X0, X8
	0x03CDDBC4 BL 0x1C16DFC
	0x03CDDBC8 MOV X0, X23
	0x03CDDBCC MOV X1, X31
	0x03CDDBD0 MOV X2, X31
	0x03CDDBD4 BL 0x3C3883C
	0x03CDDBD8 ORR W8, W22, W21, 0x0
	0x03CDDBDC TBZ X8, 0x0, 0x3CDDD60
	0x03CDDBE0 TBNZ X0, 0x0, 0x3CDDD60
	0x03CDDBE4 MOV X0, X19
	0x03CDDBE8 BL 0x3CDBD2C
	0x03CDDBEC CBZ X0, 0x3CDDD84
	0x03CDDBF0 MOV X1, X31
	0x03CDDBF4 BL 0x3E22740
	0x03CDDBF8 STP S0, S1, [X31 + 0x80]
	0x03CDDBFC ADD X0, X31, 0x80
	0x03CDDC00 MOV V0.16B, V12.16B
	0x03CDDC04 MOV X1, X31
	0x03CDDC08 ADD X23, X31, 0x80
	0x03CDDC0C STP S2, S3, [X31 + 0x88]
	0x03CDDC10 BL 0x338FDC0
	0x03CDDC14 TBZ X0, 0x0, 0x3CDDC70
	0x03CDDC18 ORR X0, X23, 0x7
	0x03CDDC1C MOV V0.16B, V11.16B
	0x03CDDC20 MOV X1, X31
	0x03CDDC24 BL 0x338FDC0
	0x03CDDC28 TBZ X0, 0x0, 0x3CDDC70
	0x03CDDC2C ADD X0, X23, 0x8
	0x03CDDC30 MOV V0.16B, V10.16B
	0x03CDDC34 MOV X1, X31
	0x03CDDC38 BL 0x338FDC0
	0x03CDDC3C TBZ X0, 0x0, 0x3CDDC70
	0x03CDDC40 ADD X0, X23, 0xC
	0x03CDDC44 MOV V0.16B, V9.16B
	0x03CDDC48 MOV X1, X31
	0x03CDDC4C BL 0x338FDC0
	0x03CDDC50 TBZ X0, 0x0, 0x3CDDC70
	0x03CDDC54 LDR X0, [X19 + 0x98]
	0x03CDDC58 CBZ X0, 0x3CDDD84
	0x03CDDC5C ADRP X8, 0x485000
	0x03CDDC60 LDR X8, [X8 + 0x4D0]
	0x03CDDC64 LDR X1, [X8]
	0x03CDDC68 BL 0x2709224
	0x03CDDC6C B 0x3CDDD60
	0x03CDDC70 MOV X0, X19
	0x03CDDC74 BL 0x3CDBD2C
	0x03CDDC78 CBZ X0, 0x3CDDD84
	0x03CDDC7C AND W8, W22, W21, 0x0
	0x03CDDC80 ANDS W31, W21, 0x1
	0x03CDDC84 MOVZ W9, 0x1
	0x03CDDC88 CINC W9, W9, EQ
	0x03CDDC8C ANDS W31, W8, 0x1
	0x03CDDC90 MOV X1, X31
	0x03CDDC94 CSEL W23, W31, W9, NE
	0x03CDDC98 BL 0x3E22740
	0x03CDDC9C MOV X0, X19
	0x03CDDCA0 STR X31, [X31 + 0x40]
	0x03CDDCA4 STP S0, S1, [X31 + 0x48]
	0x03CDDCA8 STP S2, S3, [X31 + 0x50]
	0x03CDDCAC STP S12, S11, [X31 + 0x58]
	0x03CDDCB0 STP S10, S9, [X31 + 0x60]
	0x03CDDCB4 STR W31, [X31 + 0x68]
	0x03CDDCB8 STR S8, [X31 + 0x6C]
	0x03CDDCBC STR X31, [X31 + 0x70]
	0x03CDDCC0 BL 0x3CDBD2C
	0x03CDDCC4 ADRP X8, 0x485000
	0x03CDDCC8 LDR X8, [X8 + 0x4D8]
	0x03CDDCCC MOV X21, X0
	0x03CDDCD0 LDR X8, [X8]
	0x03CDDCD4 MOV X0, X8
	0x03CDDCD8 BL 0x1C16F10
	0x03CDDCDC ADRP X8, 0x485000
	0x03CDDCE0 LDR X8, [X8 + 0x4C0]
	0x03CDDCE4 MOV X1, X21
	0x03CDDCE8 MOV X3, X31
	0x03CDDCEC MOV X22, X0
	0x03CDDCF0 LDR X2, [X8]
	0x03CDDCF4 BL 0x2725A8C
	0x03CDDCF8 ADD X0, X31, 0x40
	0x03CDDCFC MOV X1, X22
	0x03CDDD00 MOV X2, X31
	0x03CDDD04 BL 0x3E4B518
	0x03CDDD08 AND W8, W20, 0x1
	0x03CDDD0C STR W23, [X31 + 0x68]
	0x03CDDD10 STRB W8, [X31 + 0x70]
	0x03CDDD14 LDP V0, V1, [X31 + 0x40]
	0x03CDDD18 LDR V2, [X31 + 0x6]
	0x03CDDD1C LDR X0, [X19 + 0x98]

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X21, 0x70B000
	014 Move X20, 0x417000
	015 Move W8, [X21+1191]
	016 Move X20, [X20+1432]
	017 Move X19, X0
	018 Move TEMP, X8
	019 And TEMP, TEMP, 1
	020 Compare TEMP, 1
	021 JumpIfEqual {54}
	022 Move X0, 0x43F000
	023 Move X0, [X0+2584]
	024 Call 0x1C17CF4
	025 Move X0, 0x43F000
	026 Move X0, [X0+2592]
	027 Call 0x1C17CF4
	028 Move X0, 0x43F000
	029 Move X0, [X0+2600]
	030 Call 0x1C17CF4
	031 Move X0, 0x47D000
	032 Move X0, [X0+280]
	033 Call 0x1C17CF4
	034 Move X0, 0x486000
	035 Move X0, [X0+1160]
	036 Call 0x1C17CF4
	037 Move X0, 0x486000
	038 Move X0, [X0+1168]
	039 Call 0x1C17CF4
	040 Move X0, 0x43F000
	041 Move X0, [X0+2624]
	042 Call 0x1C17CF4
	043 Move X0, 0x43F000
	044 Move X0, [X0+2632]
	045 Call 0x1C17CF4
	046 Move X0, 0x417000
	047 Move X0, [X0+1432]
	048 Call 0x1C17CF4
	049 Move X0, 0x417000
	050 Move X0, [X0+1728]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X21+1191], W8
	054 Move X0, X19
	055 Call Graphic.get_rectTransform, X0
	056 Move X8, [X20]
	057 Move X20, X0
	058 Move W9, [X8+224]
	059 Compare W9, 0
	060 JumpIfNotEqual {63}
	061 Move X0, X8
	062 Call 0x1C17DFC
	063 Move X26, 0x47D000
	064 Move X26, [X26+280]
	065 Move X0, X20
	066 Move X1, X31
	067 Move X2, X31
	068 Call Object.op_Inequality, X0, X1
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {87}
	073 Move X0, X19
	074 Call Graphic.get_rectTransform, X0
	075 Compare X0, 0
	076 JumpIfEqual {241}
	077 Move X1, X31
	078 Call RectTransform.get_rect, X0
	079 NotImplemented "Instruction FCMP not yet implemented."
	080 Move X0, X19
	081 Call Graphic.get_rectTransform, X0
	082 Compare X0, 0
	083 JumpIfEqual {241}
	084 Move X1, X31
	085 Call RectTransform.get_rect, X0
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 Move X0, [X26]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Call Graphic.get_workerMesh
	093 Compare X0, 0
	094 JumpIfEqual {241}
	095 Move X1, X31
	096 Call Mesh.Clear, X0
	097 Move X27, 0x43F000
	098 Move X27, [X27+2600]
	099 Move X22, 0x43F000
	100 Move X20, 0x486000
	101 Move X21, 0x417000
	102 Move X0, [X27]
	103 Move W8, [X0+224]
	104 Move X22, [X22+2584]
	105 Move X20, [X20+1160]
	106 Move X21, [X21+1728]
	107 Compare W8, 0
	108 JumpIfNotEqual {110}
	109 Call 0x1C17DFC
	110 Move X0, [X22]
	111 Call CollectionPool`2<Object, Object>.Get
	112 Move X8, [X21]
	113 Move X21, [X20]
	114 Move X20, X0
	115 Move W9, [X8+224]
	116 Compare W9, 0
	117 JumpIfNotEqual {120}
	118 Move X0, X8
	119 Call 0x1C17DFC
	120 Move X0, X21
	121 Move X1, X31
	122 Call Type.GetTypeFromHandle, X0
	123 Move X1, X0
	124 Move X0, X19
	125 Move X2, X20
	126 Move X3, X31
	127 Call Component.GetComponents, X0, X1, X2
	128 Compare X20, 0
	129 JumpIfEqual {241}
	130 Move W8, [X20+24]
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Move X28, 0x43F000
	133 Move X29, 0x486000
	134 Move X28, [X28+2632]
	135 Move X29, [X29+1168]
	136 Move W21, W31
	137 Move X2, [X28]
	138 Move X0, X20
	139 Move W1, W21
	140 Call List`1<Object>.get_Item, X0, X1
	141 Move X8, [X26]
	142 Move X25, X0
	143 Move W9, [X8+224]
	144 Compare W9, 0
	145 JumpIfNotEqual {148}
	146 Move X0, X8
	147 Call 0x1C17DFC
	148 Call Graphic.get_workerMesh
	149 Compare X25, 0
	150 JumpIfEqual {241}
	151 Move X23, [X29]
	152 Move X22, X0
	153 Move X0, X25
	154 Move X1, X23
	155 Call 0x1C17E00
	156 Compare X0, 0
	157 JumpIfEqual {242}
	158 Move X24, [X29]
	159 Move X0, X25
	160 Move X1, X24
	161 Call 0x1C17E00
	162 Compare X0, 0
	163 JumpIfEqual {245}
	164 Move X8, [X0]
	165 Move X23, X0
	166 NotImplemented "Instruction LDRH not yet implemented."
	167 Compare X9, 0
	168 JumpIfEqual {175}
	169 Move X10, [X8+176]
	170 Add X10, X10, 8
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Subtract X9, X9, 1
	174 Add X10, X10, 16
	175 Move X0, X23
	176 Move X1, X24
	177 Move W2, W31
	178 Call 0x1C5D788
	179 NotImplemented "Instruction LDRSW not yet implemented."
	180 Add X8, X8, X9
	181 Add X0, X8, 312
	182 Move X8, [X0]
	183 Move X2, [X0+8]
	184 Move X0, X23
	185 Move X1, X22
	186 NotImplemented "Instruction BLR not yet implemented."
	187 Move W8, [X20+24]
	188 Add W21, W21, 1
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X0, [X27]
	191 Move X21, 0x43F000
	192 Move W8, [X0+224]
	193 Move X21, [X21+2592]
	194 Compare W8, 0
	195 JumpIfNotEqual {197}
	196 Call 0x1C17DFC
	197 Move X1, [X21]
	198 Move X0, X20
	199 Call CollectionPool`2<Object, Object>.Release, X0
	200 Move X0, X19
	201 Call Graphic.get_canvasRenderer, X0
	202 Move X8, [X26]
	203 Move X19, X0
	204 Move W9, [X8+224]
	205 Compare W9, 0
	206 JumpIfNotEqual {209}
	207 Move X0, X8
	208 Call 0x1C17DFC
	209 Call Graphic.get_workerMesh
	210 Compare X19, 0
	211 JumpIfEqual {241}
	212 Move X1, X0
	213 Move X0, X19
	214 Move X20, [X31+80]
	215 Move X19, [X31+88]
	216 Move X22, [X31+64]
	217 Move X21, [X31+72]
	218 Move X24, [X31+48]
	219 Move X23, [X31+56]
	220 Move X26, [X31+32]
	221 Move X25, [X31+40]
	222 Move X28, [X31+16]
	223 Move X27, [X31+24]
	224 Move X2, X31
	225 Move X29, [X31+96]
	226 Move X30, [X31+104]
	227 Call CanvasRenderer.SetMesh, X0, X1
	228 Return 
	229 Move X0, [X26]
	230 Move W8, [X0+224]
	231 Compare W8, 0
	232 JumpIfNotEqual {234}
	233 Call 0x1C17DFC
	234 Call Graphic.get_workerMesh
	235 Move X8, [X19]
	236 Move X1, X0
	237 Move X0, X19
	238 Move X9, [X8+1000]
	239 Move X2, [X8+1008]
	240 NotImplemented "Instruction BLR not yet implemented."
	241 Call 0x1C17F20
	242 Move X0, X25
	243 Move X1, X23
	244 Call 0x1C181E0
	245 Move X0, X25
	246 Move X1, X24
	247 Call 0x1C181E0

Method: UnityEngine.Mesh get_workerMesh()

Disassembly:
	0x03CDE0BC STP X20, X19, [X31 + 0x10]
	0x03CDE0C0 ADRP X21, 0x709000
	0x03CDE0C4 LDRB W8, [X21 + 0x4B4]
	0x03CDE0C8 MOV X20, X1
	0x03CDE0CC MOV X19, X0
	0x03CDE0D0 TBNZ X8, 0x0, 0x3CDE0E8
	0x03CDE0D4 ADRP X0, 0x43C000
	0x03CDE0D8 LDR X0, [X0 + 0xE30]
	0x03CDE0DC BL 0x1C16CF4
	0x03CDE0E0 MOVZ W8, 0x1
	0x03CDE0E4 STRB W8, [X21 + 0x4B4]
	0x03CDE0E8 LDR X0, [X19 + 0x80]
	0x03CDE0EC MOV X1, X20
	0x03CDE0F0 MOV X2, X31
	0x03CDE0F4 BL 0x33C0FDC
	0x03CDE0F8 CBZ X0, 0x3CDE128
	0x03CDE0FC ADRP X8, 0x43C000
	0x03CDE100 LDR X8, [X8 + 0xE30]
	0x03CDE104 LDR X1, [X8]
	0x03CDE108 LDR X8, [X0]
	0x03CDE10C CMP X8, X1
	0x03CDE110 B.NE 0x3CDE124
	0x03CDE114 STR X0, [X19 + 0x80]
	0x03CDE118 LDR X8, [X0]
	0x03CDE11C CMP X8, X1
	0x03CDE120 B.EQ 0x3CDE12C
	0x03CDE124 BL 0x1C171E0
	0x03CDE128 STR X0, [X19 + 0x80]
	0x03CDE12C LDP X20, X19, [X31 + 0x10]
	0x03CDE130 LDP X30, X21, [X31], #0x20
	0x03CDE134 RET
	0x03CDE138 STP X30, X21, [X31 - 0x20]!
	0x03CDE13C STP X20, X19, [X31 + 0x10]
	0x03CDE140 ADRP X21, 0x709000
	0x03CDE144 ADRP X20, 0x47B000
	0x03CDE148 ADRP X19, 0x47B000
	0x03CDE14C LDRB W8, [X21 + 0x4B5]
	0x03CDE150 LDR X20, [X20 + 0x118]
	0x03CDE154 LDR X19, [X19 + 0x1A0]
	0x03CDE158 TBNZ X8, 0x0, 0x3CDE17C
	0x03CDE15C ADRP X0, 0x47B000
	0x03CDE160 LDR X0, [X0 + 0x118]
	0x03CDE164 BL 0x1C16CF4
	0x03CDE168 ADRP X0, 0x47B000
	0x03CDE16C LDR X0, [X0 + 0x1A0]
	0x03CDE170 BL 0x1C16CF4
	0x03CDE174 MOVZ W8, 0x1
	0x03CDE178 STRB W8, [X21 + 0x4B5]
	0x03CDE17C LDR X8, [X20]
	0x03CDE180 LDR X8, [X8 + 0xB8]
	0x03CDE184 STR X31, [X8]
	0x03CDE188 LDR X8, [X20]
	0x03CDE18C LDR X8, [X8 + 0xB8]
	0x03CDE190 STR X31, [X8 + 0x8]
	0x03CDE194 LDR X0, [X19]
	0x03CDE198 BL 0x1C16F10
	0x03CDE19C MOV X1, X31
	0x03CDE1A0 MOV X19, X0
	0x03CDE1A4 BL 0x3E49354
	0x03CDE1A8 LDR X8, [X20]
	0x03CDE1AC LDR X8, [X8 + 0xB8]
	0x03CDE1B0 STR X19, [X8 + 0x18]
	0x03CDE1B4 LDP X20, X19, [X31 + 0x10]
	0x03CDE1B8 LDP X30, X21, [X31], #0x20
	0x03CDE1BC RET
	0x03CDE1C0 MOV X1, X31
	0x03CDE1C4 B 0x3C32E90
	0x03CDE1C8 STP X30, X19, [X31 - 0x10]!
	0x03CDE1CC MOV X19, X0
	0x03CDE1D0 BL 0x3CDE210
	0x03CDE1D4 CBZ X0, 0x3CDE20C
	0x03CDE1D8 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x70A000
	005 Move X20, 0x47C000
	006 Move W8, [X19+1192]
	007 Move X20, [X20+280]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0x47C000
	013 Move X0, [X0+280]
	014 Call 0x1C17CF4
	015 Move X0, 0x41D000
	016 Move X0, [X0+1792]
	017 Call 0x1C17CF4
	018 Move X0, 0x416000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x485000
	022 Move X0, [X0+1176]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+1192], W8
	026 Move X0, [X20]
	027 Move X19, 0x416000
	028 Move W8, [X0+224]
	029 Move X19, [X19+1432]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X20]
	034 Move X8, [X19]
	035 Move X9, [X0+184]
	036 Move W10, [X8+224]
	037 Move X19, [X9+16]
	038 Compare W10, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X19
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Equality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {73}
	050 Move X8, 0x41D000
	051 Move X8, [X8+1792]
	052 Move X0, [X8]
	053 Call 0x1C17F10
	054 Move X1, X31
	055 Move X19, X0
	056 Call Mesh..ctor, X0
	057 Move X0, [X20]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X20]
	063 Move X8, [X0+184]
	064 Move [X8+16], X19
	065 Compare X19, 0
	066 JumpIfEqual {85}
	067 Move X8, 0x485000
	068 Move X8, [X8+1176]
	069 Move X0, X19
	070 Move X2, X31
	071 Move X1, [X8]
	072 Call Object.set_name, X0, X1
	073 Move X0, [X20]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move X0, [X20]
	079 Move X8, [X0+184]
	080 Move X20, [X31+16]
	081 Move X19, [X31+24]
	082 Move X0, [X8+16]
	083 Move X30, [X31+32]
	084 Return X0
	085 Call 0x1C17F20

Method: System.Void OnFillVBO(System.Collections.Generic.List`1<UnityEngine.UIVertex> vbo)

Disassembly:
	0x03CDE1DC BL 0x3E244BC

ISIL:
	001 Return 

Method: System.Void OnPopulateMesh(UnityEngine.Mesh m)

Disassembly:
	0x03CDE1E0 CBZ W0, 0x3CDE1F4
	0x03CDE1E4 MOV X0, X19
	0x03CDE1E8 MOV X1, X31
	0x03CDE1EC LDP X30, X19, [X31], #0x10
	0x03CDE1F0 B 0x3E59844
	0x03CDE1F4 MOV X0, X19
	0x03CDE1F8 BL 0x3CDE210
	0x03CDE1FC CBZ X0, 0x3CDE20C
	0x03CDE200 MOV X1, X31
	0x03CDE204 LDP X30, X19, [X31], #0x10
	0x03CDE208 B 0x3E24924
	0x03CDE20C BL 0x1C16F20
	0x03CDE210 STP X30, X21, [X31 - 0x20]!
	0x03CDE214 STP X20, X19, [X31 + 0x10]
	0x03CDE218 ADRP X21, 0x709000
	0x03CDE21C ADRP X20, 0x415000
	0x03CDE220 LDRB W8, [X21 + 0x4B7]
	0x03CDE224 LDR X20, [X20 + 0x598]
	0x03CDE228 MOV X19, X0
	0x03CDE22C TBNZ X8, 0x0, 0x3CDE250
	0x03CDE230 ADRP X0, 0x46B000
	0x03CDE234 LDR X0, [X0 + 0x560]
	0x03CDE238 BL 0x1C16CF4
	0x03CDE23C ADRP X0, 0x415000
	0x03CDE240 LDR X0, [X0 + 0x598]
	0x03CDE244 BL 0x1C16CF4
	0x03CDE248 MOVZ W8, 0x1
	0x03CDE24C STRB W8, [X21 + 0x4B7]
	0x03CDE250 LDR X0, [X20]
	0x03CDE254 LDR X20, [X19 + 0x38]
	0x03CDE258 LDR W8, [X0 + 0xE0]
	0x03CDE25C CBNZ W8, 0x3CDE264
	0x03CDE260 BL 0x1C16DFC
	0x03CDE264 MOV X0, X20
	0x03CDE268 MOV X1, X31
	0x03CDE26C MOV X2, X31
	0x03CDE270 BL 0x3C354F8
	0x03CDE274 TBZ X0, 0x0, 0x3CDE280

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x70A000
	007 Move X21, 0x47C000
	008 Move W8, [X22+1193]
	009 Move X21, [X21+280]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x47C000
	017 Move X0, [X0+280]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1193], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {27}
	025 Call 0x1C17DFC
	026 Move X0, [X21]
	027 Move X8, [X0+184]
	028 Move X9, [X20]
	029 Move X0, X20
	030 Move X1, [X8+24]
	031 Move X8, [X9+1016]
	032 Move X2, [X9+1024]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X8, [X21]
	035 Move X8, [X8+184]
	036 Move X0, [X8+24]
	037 Compare X0, 0
	038 JumpIfEqual {48}
	039 Move X1, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X2, X31
	045 Move X30, [X31+48]
	046 Call VertexHelper.FillMesh, X0, X1
	047 Return 
	048 Call 0x1C17F20

Method: System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper vh)

Disassembly:
	0x03CDE278 LDR X0, [X19 + 0x38]
	0x03CDE27C B 0x3CDE298
	0x03CDE280 ADRP X8, 0x46B000
	0x03CDE284 LDR X8, [X8 + 0x560]
	0x03CDE288 MOV X0, X19
	0x03CDE28C LDR X1, [X8]
	0x03CDE290 BL 0x21A3894
	0x03CDE294 STR X0, [X19 + 0x38]
	0x03CDE298 LDP X20, X19, [X31 + 0x10]
	0x03CDE29C LDP X30, X21, [X31], #0x20
	0x03CDE2A0 RET
	0x03CDE2A4 STP X30, X19, [X31 - 0x10]!
	0x03CDE2A8 MOV X19, X0
	0x03CDE2AC BL 0x3CDE210
	0x03CDE2B0 CBZ X0, 0x3CDE2F4
	0x03CDE2B4 MOV X1, X31
	0x03CDE2B8 BL 0x3E244BC
	0x03CDE2BC CBZ W0, 0x3CDE2D0
	0x03CDE2C0 MOV X0, X19
	0x03CDE2C4 MOV X1, X31
	0x03CDE2C8 LDP X30, X19, [X31], #0x10
	0x03CDE2CC B 0x3E5984C
	0x03CDE2D0 MOV X0, X19
	0x03CDE2D4 BL 0x3CDE210
	0x03CDE2D8 CBZ X0, 0x3CDE2F4
	0x03CDE2DC MOV X1, X31
	0x03CDE2E0 BL 0x3E24BA4
	0x03CDE2E4 CBZ X0, 0x3CDE2F4
	0x03CDE2E8 MOV X1, X31
	0x03CDE2EC LDP X30, X19, [X31], #0x10
	0x03CDE2F0 B 0x3E24868
	0x03CDE2F4 BL 0x1C16F20
	0x03CDE2F8 LDRB W0, [X0 + 0x28]
	0x03CDE2FC RET
	0x03CDE300 AND W8, W1, 0x1
	0x03CDE304 STRB W8, [X0 + 0x28]
	0x03CDE308 RET
	0x03CDE30C LDR W0, [X0 + 0x2C]
	0x03CDE310 RET
	0x03CDE314 STR W1, [X0 + 0x2C]
	0x03CDE318 RET
	0x03CDE31C LDR W0, [X0 + 0x30]
	0x03CDE320 RET
	0x03CDE324 STR W1, [X0 + 0x30]
	0x03CDE328 RET
	0x03CDE32C STR X30, [X31 - 0x30]!
	0x03CDE330 STP X22, X21, [X31 + 0x10]
	0x03CDE334 STP X20, X19, [X31 + 0x20]
	0x03CDE338 ADRP X22, 0x709000
	0x03CDE33C ADRP X21, 0x484000
	0x03CDE340 ADRP X20, 0x484000
	0x03CDE344 LDRB W8, [X22 + 0x4B6]
	0x03CDE348 LDR X21, [X21 + 0x4E0]
	0x03CDE34C LDR X20, [X20 + 0x4E8]
	0x03CDE350 MOV X19, X0
	0x03CDE354 TBNZ X8, 0x0, 0x3CDE378
	0x03CDE358 ADRP X0, 0x484000
	0x03CDE35C LDR X0, [X0 + 0x4E8]
	0x03CDE360 BL 0x1C16CF4
	0x03CDE364 ADRP X0, 0x484000
	0x03CDE368 LDR X0, [X0 + 0x4E0]
	0x03CDE36C BL 0x1C16CF4
	0x03CDE370 MOVZ W8, 0x1
	0x03CDE374 STRB W8, [X22 + 0x4B6]
	0x03CDE378 MOVZ W8, 0x1
	0x03CDE37C MOVN W0, 0x0
	0x03CDE380 MOV X1, X31
	0x03CDE384 STRB W8, [X19 + 0x28]
	0x03CDE388 BL 0x3C35CBC
	0x03CDE38C STR W0, [X19 + 0x30]
	0x03CDE390 LDR X0, [X21]
	0x03CDE394 BL 0x1C16F10
	0x03CDE398 LDR X1, [X20]
	0x03CDE39C MOV X20, X0
	0x03CDE3A0 BL 0x301B7C4
	0x03CDE3A4 STR X20, [X19 + 0x40]
	0x03CDE3A8 MOV X0, X19
	0x03CDE3AC LDP X20, X19, [X31 + 0x20]
	0x03CDE3B0 LDP X22, X21, [X31 + 0x10]
	0x03CDE3B4 MOV X1, X31
	0x03CDE3B8 LDR X30, [X31], #0x30
	0x03CDE3BC B 0x3E4EB28
	0x03CDE3C0 SUB X31, X31, 0x170
	0x03CDE3C4 STP D15, D14, [X31 + 0xD0]
	0x03CDE3C8 STP D13, D12, [X31 + 0xE0]
	0x03CDE3CC STP D11, D10, [X31 + 0xF0]
	0x03CDE3D0 STP D9, D8, [X31 + 0x100]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X19, X1
	009 Move X20, X0
	010 Call Graphic.GetPixelAdjustedRect, X0
	011 Move X8, [X20]
	012 Move X0, X20
	013 Move V9, V0
	014 Move V8, V1
	015 Move X9, [X8+664]
	016 Move X1, [X8+672]
	017 Move V10, V2
	018 Move V11, V3
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X0, X31
	021 Call 0x1E44664
	022 Compare X19, 0
	023 JumpIfEqual {95}
	024 Move X20, X0
	025 Move X0, X19
	026 Move X1, X31
	027 Add S11, S8, S11
	028 Add S10, S9, S10
	029 Call VertexHelper.Clear, X0
	030 And X20, X20, 0
	031 Move S2, W31
	032 Move S3, W31
	033 Move S4, W31
	034 Move S5, W31
	035 Move S6, W31
	036 Move X0, X19
	037 Move V0, V9
	038 Move V1, V8
	039 Move X1, X20
	040 Move X2, X31
	041 Call VertexHelper.AddVert, X0, X1, X2, X3
	042 Move S2, W31
	043 Move S3, W31
	044 Move S4, 1
	045 Move S5, W31
	046 Move S6, W31
	047 Move X0, X19
	048 Move V0, V9
	049 Move V1, V11
	050 Move X1, X20
	051 Move X2, X31
	052 Call VertexHelper.AddVert, X0, X1, X2, X3
	053 Move S2, W31
	054 Move S3, 1
	055 Move S4, 1
	056 Move S5, W31
	057 Move S6, W31
	058 Move X0, X19
	059 Move V0, V10
	060 Move V1, V11
	061 Move X1, X20
	062 Move X2, X31
	063 Call VertexHelper.AddVert, X0, X1, X2, X3
	064 Move S2, W31
	065 Move S3, 1
	066 Move S4, W31
	067 Move S5, W31
	068 Move S6, W31
	069 Move X0, X19
	070 Move V0, V10
	071 Move V1, V8
	072 Move X1, X20
	073 Move X2, X31
	074 Call VertexHelper.AddVert, X0, X1, X2, X3
	075 Move W2, 1
	076 Move W3, 2
	077 Move X0, X19
	078 Move W1, W31
	079 Move X4, X31
	080 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	081 Move X0, X19
	082 Move X20, [X31+48]
	083 Move X19, [X31+56]
	084 Move X30, [X31+32]
	085 Move D9, [X31+16]
	086 Move D8, [X31+24]
	087 Move W1, 2
	088 Move W2, 3
	089 Move W3, W31
	090 Move X4, X31
	091 Move D11, [X31+64]
	092 Move D10, [X31+72]
	093 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	094 Return 
	095 Call 0x1C17F20

Method: System.Void OnDidApplyAnimationProperties()

Disassembly:
	0x03CDE500 ADRP X10, 0x46B000
	0x03CDE504 LDR X8, [X0]
	0x03CDE508 LDR X10, [X10 + 0x590]
	0x03CDE50C MOV X23, X0

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+728]
	003 Move X1, [X8+736]
	004 CallNoReturn X2

Method: System.Void SetNativeSize()

Disassembly:
	0x03CDE510 LDRH W9, [X8 + 0x12E]

ISIL:
	001 Return 

Method: System.Boolean Raycast(UnityEngine.Vector2 sp, UnityEngine.Camera eventCamera)

Disassembly:
	0x03CDE514 LDR X1, [X10]
	0x03CDE518 CBZ X9, 0x3CDE53C
	0x03CDE51C LDR X10, [X8 + 0xB0]
	0x03CDE520 ADD X10, X10, 0x8
	0x03CDE524 LDUR X11, [X10 - 0x8]
	0x03CDE528 CMP X11, X1
	0x03CDE52C B.EQ 0x3CDE54C
	0x03CDE530 SUBS X9, X9, 0x1
	0x03CDE534 ADD X10, X10, 0x10
	0x03CDE538 B.NE 0x3CDE524
	0x03CDE53C MOV X0, X23
	0x03CDE540 MOV W2, W31
	0x03CDE544 BL 0x1C5C788
	0x03CDE548 B 0x3CDE558
	0x03CDE54C LDRSW X9, [X10]
	0x03CDE550 ADD X8, X8, X9, 0x4, LSL
	0x03CDE554 ADD X0, X8, 0x138
	0x03CDE558 LDP X8, X1, [X0]
	0x03CDE55C MOV X0, X23
	0x03CDE560 BLR X8
	0x03CDE564 CBZ W0, 0x3CDEE0C
	0x03CDE568 LDR X8, [X20]
	0x03CDE56C MOV X0, X20
	0x03CDE570 LDR X9, [X8 + 0x258]
	0x03CDE574 LDR X1, [X8 + 0x260]
	0x03CDE578 BLR X9
	0x03CDE57C MOV X27, X0
	0x03CDE580 MOV X0, X20
	0x03CDE584 BL 0x3CDE210
	0x03CDE588 CBZ X0, 0x3CDEE08
	0x03CDE58C MOV X1, X31
	0x03CDE590 BL 0x3E244BC
	0x03CDE594 CBZ W0, 0x3CDE5BC
	0x03CDE598 LDR X0, [X28]
	0x03CDE59C LDR W8, [X0 + 0xE0]
	0x03CDE5A0 CBNZ W8, 0x3CDE5A8
	0x03CDE5A4 BL 0x1C16DFC
	0x03CDE5A8 MOV X0, X27
	0x03CDE5AC MOV X1, X31
	0x03CDE5B0 MOV X2, X31
	0x03CDE5B4 BL 0x3C3883C
	0x03CDE5B8 TBZ X0, 0x0, 0x3CDE5D4
	0x03CDE5BC MOV X0, X20
	0x03CDE5C0 BL 0x3CDE210
	0x03CDE5C4 CBZ X0, 0x3CDEE08
	0x03CDE5C8 MOV X1, X31
	0x03CDE5CC BL 0x3E249A4
	0x03CDE5D0 B 0x3CDE5E4
	0x03CDE5D4 CBZ X27, 0x3CDEE08
	0x03CDE5D8 MOV X0, X27
	0x03CDE5DC MOV X1, X31
	0x03CDE5E0 BL 0x3C04134
	0x03CDE5E4 MOV W19, W0
	0x03CDE5E8 MOV X0, X24
	0x03CDE5EC MOV X1, X31
	0x03CDE5F0 BL 0x3E38EC0
	0x03CDE5F4 MOVZ W8, 0x7F800000
	0x03CDE5F8 MOV V15.16B, V0.16B
	0x03CDE5FC FMOV S0, W8
	0x03CDE600 FCVTZS W9, S2
	0x03CDE604 FCMP S2, S0
	0x03CDE608 MOVZ W8, 0x80000000
	0x03CDE60C CSEL W8, W8, W9, EQ
	0x03CDE610 CMP W8, W19
	0x03CDE614 STR W19, [X31 + 0x20]
	0x03CDE618 B.NE 0x3CDEE0C
	0x03CDE61C LDR X0, [X28]
	0x03CDE620 MOV V10.16B, V2.16B
	0x03CDE624 MOV V14.16B, V1.16B
	0x03CDE628 LDR W8, [X0 + 0xE0]
	0x03CDE62C CBNZ W8, 0x3CDE634
	0x03CDE630 BL 0x1C16DFC
	0x03CDE634 MOV X0, X27
	0x03CDE638 MOV X1, X31
	0x03CDE63C MOV X2, X31
	0x03CDE640 BL 0x3C3883C
	0x03CDE644 LDR W19, [X31 + 0x20]
	0x03CDE648 TBZ X0, 0x0, 0x3CDE72C
	0x03CDE64C MOV X0, X31
	0x03CDE650 BL 0x3C0E0B0
	0x03CDE654 MOV W24, W0
	0x03CDE658 MOV X0, X31
	0x03CDE65C BL 0x3C0E0D8
	0x03CDE660 CMP W19, 0x1
	0x03CDE664 MOV W25, W0
	0x03CDE668 B.LT 0x3CDE718
	0x03CDE66C ADRP X22, 0x479000
	0x03CDE670 LDR X22, [X22 + 0x448]
	0x03CDE674 LDR X0, [X22]
	0x03CDE678 LDR W8, [X0 + 0xE0]
	0x03CDE67C CBNZ W8, 0x3CDE688
	0x03CDE680 BL 0x1C16DFC
	0x03CDE684 LDR X0, [X22]
	0x03CDE688 LDR X8, [X0 + 0xB8]
	0x03CDE68C LDR X8, [X8]
	0x03CDE690 CBZ X8, 0x3CDEE08
	0x03CDE694 LDR W9, [X8 + 0x18]
	0x03CDE698 CMP W19, W9
	0x03CDE69C B.GE 0x3CDE718
	0x03CDE6A0 LDR W9, [X0 + 0xE0]
	0x03CDE6A4 CBNZ W9, 0x3CDE6BC
	0x03CDE6A8 BL 0x1C16DFC
	0x03CDE6AC LDR X8, [X22]
	0x03CDE6B0 LDR X8, [X8 + 0xB8]
	0x03CDE6B4 LDR X8, [X8]
	0x03CDE6B8 CBZ X8, 0x3CDEE08
	0x03CDE6BC LDR W9, [X8 + 0x18]
	0x03CDE6C0 CMP W19, W9
	0x03CDE6C4 B.CS 0x3CDEFD4
	0x03CDE6C8 MOV W25, W19
	0x03CDE6CC ADD X8, X8, X25, 0x3, LSL
	0x03CDE6D0 LDR X0, [X8 + 0x20]
	0x03CDE6D4 CBZ X0, 0x3CDEE08
	0x03CDE6D8 MOV X1, X31
	0x03CDE6DC BL 0x3C0D84C
	0x03CDE6E0 LDR X8, [X22]
	0x03CDE6E4 LDR X8, [X8 + 0xB8]
	0x03CDE6E8 LDR X8, [X8]
	0x03CDE6EC CBZ X8, 0x3CDEE08
	0x03CDE6F0 LDR W9, [X8 + 0x18]
	0x03CDE6F4 CMP W19, W9
	0x03CDE6F8 B.CS 0x3CDEFD4
	0x03CDE6FC ADD X8, X8, X25, 0x3, LSL
	0x03CDE700 MOV W24, W0
	0x03CDE704 LDR X0, [X8 + 0x20]
	0x03CDE708 CBZ X0, 0x3CDEE08
	0x03CDE70C MOV X1, X31
	0x03CDE710 BL 0x3C0D934
	0x03CDE714 MOV W25, W0
	0x03CDE718 SCVTF S0, W24
	0x03CDE71C SCVTF S1, W25
	0x03CDE720 FDIV S0, S15, S0
	0x03CDE724 FDIV S1, S14, S1
	0x03CDE728 B 0x3CDE748
	0x03CDE72C CBZ X27, 0x3CDEE08
	0x03CDE730 MOV X0, X27
	0x03CDE734 MOV V0.16B, V15.16B
	0x03CDE738 MOV V1.16B, V14.16B
	0x03CDE73C MOV V2.16B, V10.16B
	0x03CDE740 MOV X1, X31
	0x03CDE744 BL 0x3C045EC
	0x03CDE748 FMOV S2, 1
	0x03CDE74C FCMP S1, S2
	0x03CDE750 B.GT 0x3CDEE0C
	0x03CDE754 FCMP S0, 0x0
	0x03CDE758 B.MI 0x3CDEE0C
	0x03CDE75C FMOV S2, 1
	0x03CDE760 FCMP S0, S2
	0x03CDE764 B.GT 0x3CDEE0C
	0x03CDE768 FCMP S1, 0x0
	0x03CDE76C B.MI 0x3CDEE0C
	0x03CDE770 LDR X0, [X28]
	0x03CDE774 LDR W8, [X0 + 0xE0]
	0x03CDE778 CBNZ W8, 0x3CDE780
	0x03CDE77C BL 0x1C16DFC
	0x03CDE780 MOV X0, X27
	0x03CDE784 MOV X1, X31
	0x03CDE788 MOV X2, X31
	0x03CDE78C BL 0x3C354F8
	0x03CDE790 FMOV S0, W31
	0x03CDE794 STR S0, [X31 + 0x38]
	0x03CDE798 FMOV S0, W31
	0x03CDE79C STR S0, [X31 + 0x34]
	0x03CDE7A0 FMOV S0, W31
	0x03CDE7A4 STR S0, [X31 + 0x30]
	0x03CDE7A8 FMOV S0, W31
	0x03CDE7AC STR S0, [X31 + 0x2C]
	0x03CDE7B0 FMOV S0, W31
	0x03CDE7B4 STR S0, [X31 + 0x28]
	0x03CDE7B8 FMOV S0, W31
	0x03CDE7BC STR S0, [X31 + 0x24]
	0x03CDE7C0 TBZ X0, 0x0, 0x3CDE808
	0x03CDE7C4 CBZ X27, 0x3CDEE08
	0x03CDE7C8 ADD X8, X31, 0x80
	0x03CDE7CC MOV X0, X27
	0x03CDE7D0 MOV V0.16B, V15.16B
	0x03CDE7D4 MOV V1.16B, V14.16B
	0x03CDE7D8 MOV V2.16B, V10.16B
	0x03CDE7DC MOV X1, X31
	0x03CDE7E0 BL 0x3C047B4
	0x03CDE7E4 LDR V3, [X31 + 0x80]
	0x03CDE7E8 LDR V0, [X31 + 0x84]
	0x03CDE7EC STP S3, S0, [X31 + 0x24]
	0x03CDE7F0 LDR V3, [X31 + 0x88]
	0x03CDE7F4 LDR V0, [X31 + 0x8C]
	0x03CDE7F8 STP S3, S0, [X31 + 0x2C]
	0x03CDE7FC LDR V3, [X31 + 0x90]
	0x03CDE800 LDR V0, [X31 + 0x94]
	0x03CDE804 STP S3, S0, [X31 + 0x34]
	0x03CDE808 MOV X0, X20
	0x03CDE80C BL 0x3CDE210
	0x03CDE810 CBZ X0, 0x3CDEE08
	0x03CDE814 MOV X1, X31
	0x03CDE818 BL 0x3E244BC
	0x03CDE81C CBZ W0, 0x3CDE8B4
	0x03CDE820 LDR W8, [X20 + 0x2C]
	0x03CDE824 CBZ W8, 0x3CDE8B4
	0x03CDE828 LDR X0, [X28]
	0x03CDE82C LDR W8, [X0 + 0xE0]
	0x03CDE830 CBNZ W8, 0x3CDE838
	0x03CDE834 BL 0x1C16DFC
	0x03CDE838 MOV X0, X27
	0x03CDE83C MOV X1, X31
	0x03CDE840 MOV X2, X31
	0x03CDE844 BL 0x3C354F8
	0x03CDE848 TBZ X0, 0x0, 0x3CDEE3C
	0x03CDE84C ADRP X22, 0x6FB000
	0x03CDE850 LDRB W8, [X22 + 0x5AA]
	0x03CDE854 CBNZ W8, 0x3CDE86C
	0x03CDE858 ADRP X0, 0x41C000
	0x03CDE85C LDR X0, [X0 + 0x4B8]
	0x03CDE860 BL 0x1C16CF4
	0x03CDE864 MOVZ W8, 0x1
	0x03CDE868 STRB W8, [X22 + 0x5AA]
	0x03CDE86C ADRP X8, 0x41C000
	0x03CDE870 LDR X8, [X8 + 0x4B8]
	0x03CDE874 ADRP X9, 0xFFFFFFFFFCE0C000
	0x03CDE878 LDR V2, [X31 + 0x38]
	0x03CDE87C LDR V0, [X9 + 0x240]
	0x03CDE880 LDR X8, [X8]
	0x03CDE884 FMOV S3, 8
	0x03CDE888 FABS S2, S2
	0x03CDE88C FMUL S0, S2, S0
	0x03CDE890 LDR X8, [X8 + 0xB8]
	0x03CDE894 LDR V1, [X8]
	0x03CDE898 FMUL S1, S1, S3
	0x03CDE89C FCMP S0, S1
	0x03CDE8A0 FCSEL S0, S0, S1, GT
	0x03CDE8A4 FCMP S2, S0
	0x03CDE8A8 B.PL 0x3CDEE48
	0x03CDE8AC MOVZ W8, 0x7F800000
	0x03CDE8B0 B 0x3CDEE40
	0x03CDE8B4 MOVN W8, 0x80800000
	0x03CDE8B8 STR W8, [X31 + 0x44]
	0x03CDE8BC LDR X8, [X20 + 0x40]
	0x03CDE8C0 CBZ X8, 0x3CDEE08
	0x03CDE8C4 LDP W2, W9, [X8 + 0x18]
	0x03CDE8C8 ADD W9, W9, 0x1
	0x03CDE8CC CMP W2, 0x1
	0x03CDE8D0 STP W31, W9, [X8 + 0x18]
	0x03CDE8D4 B.LT 0x3CDE8E8
	0x03CDE8D8 LDR X0, [X8 + 0x10]
	0x03CDE8DC MOV W1, W31
	0x03CDE8E0 MOV X3, X31
	0x03CDE8E4 BL 0x339FA34
	0x03CDE8E8 MOV X0, X20
	0x03CDE8EC BL 0x3CDE210
	0x03CDE8F0 ADRP X8, 0x484000
	0x03CDE8F4 LDR X8, [X8 + 0x4F0]
	0x03CDE8F8 LDR X24, [X20 + 0x40]
	0x03CDE8FC LDR X0, [X8]
	0x03CDE900 LDR W8, [X0 + 0xE0]
	0x03CDE904 CBNZ W8, 0x3CDE90C
	0x03CDE908 BL 0x1C16DFC
	0x03CDE90C MOV X1, X27
	0x03CDE910 MOV V0.16B, V15.16B
	0x03CDE914 MOV V1.16B, V14.16B
	0x03CDE918 MOV X2, X23
	0x03CDE91C MOV X3, X24
	0x03CDE920 BL 0x3CDF094
	0x03CDE924 LDR X0, [X20 + 0x40]
	0x03CDE928 CBZ X0, 0x3CDEE08
	0x03CDE92C LDR W8, [X0 + 0x18]
	0x03CDE930 SUBS W29, W8, 0x1
	0x03CDE934 B.LT 0x3CDEE0C
	0x03CDE938 ADRP X22, 0x484000
	0x03CDE93C ADRP X19, 0x415000
	0x03CDE940 LDR X22, [X22 + 0x508]
	0x03CDE944 LDR X19, [X19 + 0x5A0]
	0x03CDE948 MOV W23, W31
	0x03CDE94C ADRP X24, 0x6FA000
	0x03CDE950 STP S14, S15, [X31 + 0x18]
	0x03CDE954 STR X27, [X31 + 0x10]
	0x03CDE958 LDR X2, [X22]
	0x03CDE95C MOV W1, W23
	0x03CDE960 BL 0x301BCCC
	0x03CDE964 CBZ X0, 0x3CDEE08
	0x03CDE968 MOV X1, X31
	0x03CDE96C BL 0x3C32ECC
	0x03CDE970 LDRB W8, [X20 + 0x28]
	0x03CDE974 MOV X25, X0
	0x03CDE978 CBZ W8, 0x3CDEA60
	0x03CDE97C LDR X0, [X28]
	0x03CDE980 LDR W8, [X0 + 0xE0]
	0x03CDE984 CBNZ W8, 0x3CDE98C
	0x03CDE988 BL 0x1C16DFC
	0x03CDE98C MOV X0, X27
	0x03CDE990 MOV X1, X31
	0x03CDE994 MOV X2, X31
	0x03CDE998 BL 0x3C3883C
	0x03CDE99C TBZ X0, 0x0, 0x3CDEA68

ISIL:
	001 Move [X31-112], D9
	002 Move [X31-104], D8
	003 Move [X31+16], X29
	004 Move [X31+24], X30
	005 Move [X31+32], X28
	006 Move [X31+40], X27
	007 Move [X31+48], X26
	008 Move [X31+56], X25
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X21, 0x70A000
	016 Move W8, [X21+1194]
	017 Move X19, X1
	018 Move V8, V1
	019 Move V9, V0
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {57}
	025 Move X0, 0x485000
	026 Move X0, [X0+1184]
	027 Call 0x1C17CF4
	028 Move X0, 0x485000
	029 Move X0, [X0+1192]
	030 Call 0x1C17CF4
	031 Move X0, 0x43E000
	032 Move X0, [X0+2584]
	033 Call 0x1C17CF4
	034 Move X0, 0x43E000
	035 Move X0, [X0+2592]
	036 Call 0x1C17CF4
	037 Move X0, 0x43E000
	038 Move X0, [X0+2600]
	039 Call 0x1C17CF4
	040 Move X0, 0x485000
	041 Move X0, [X0+1200]
	042 Call 0x1C17CF4
	043 Move X0, 0x485000
	044 Move X0, [X0+1208]
	045 Call 0x1C17CF4
	046 Move X0, 0x43E000
	047 Move X0, [X0+2624]
	048 Call 0x1C17CF4
	049 Move X0, 0x43E000
	050 Move X0, [X0+2632]
	051 Call 0x1C17CF4
	052 Move X0, 0x416000
	053 Move X0, [X0+1432]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X21+1194], W8
	057 Move X0, X20
	058 Move X1, X31
	059 Call Behaviour.get_isActiveAndEnabled, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {309}
	064 Move X0, X20
	065 Move X1, X31
	066 Call Component.get_transform, X0
	067 Move X8, 0x43E000
	068 Move X8, [X8+2600]
	069 Move X22, X0
	070 Move X8, [X8]
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Move X8, 0x43E000
	077 Move X8, [X8+2584]
	078 Move X0, [X8]
	079 Call CollectionPool`2<Object, Object>.Get
	080 Move X27, 0x416000
	081 Move X29, 0x43E000
	082 Move X25, 0x485000
	083 Move X27, [X27+1432]
	084 Move X29, [X29+2632]
	085 Move X25, [X25+1208]
	086 Move X20, X0
	087 Move W28, W31
	088 Move W26, 1
	089 Move X0, [X27]
	090 Move X21, X22
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X21
	096 Move X1, X31
	097 Move X2, X31
	098 Call Object.op_Inequality, X0, X1
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {325}
	103 Compare X21, 0
	104 JumpIfEqual {338}
	105 Move X8, 0x485000
	106 Move X8, [X8+1200]
	107 Move X0, X21
	108 Move X1, X20
	109 Move X2, [X8]
	110 Call 0x21A543C, X0, X1
	111 Compare X20, 0
	112 JumpIfEqual {338}
	113 Move W8, [X20+24]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move W22, W31
	116 Move X2, [X29]
	117 Move X0, X20
	118 Move W1, W22
	119 Call List`1<Object>.get_Item, X0, X1
	120 Compare X0, 0
	121 JumpIfEqual {128}
	122 Move X8, 0x485000
	123 Move X8, [X8+1192]
	124 Move X9, [X0]
	125 Move X8, [X8]
	126 NotImplemented "Instruction CMP not yet implemented."
	127 NotImplemented "Instruction CSEL not yet implemented."
	128 Move X23, X31
	129 Move X0, [X27]
	130 Move W8, [X0+224]
	131 Compare W8, 0
	132 JumpIfNotEqual {134}
	133 Call 0x1C17DFC
	134 Move X0, X23
	135 Move X1, X31
	136 Move X2, X31
	137 Call Object.op_Inequality, X0, X1
	138 Move TEMP, X0
	139 And TEMP, TEMP, 1
	140 Compare TEMP, 1
	141 JumpIfNotEqual {149}
	142 Compare X23, 0
	143 JumpIfEqual {338}
	144 Move X0, X23
	145 Move X1, X31
	146 Call Canvas.get_overrideSorting, X0
	147 Xor W8, W0, 1
	148 And W26, W26, W8
	149 Move X2, [X29]
	150 Move X0, X20
	151 Move W1, W22
	152 Call List`1<Object>.get_Item, X0, X1
	153 Move X1, [X25]
	154 Call 0x1C17E00
	155 Compare X0, 0
	156 JumpIfEqual {244}
	157 Move X2, [X29]
	158 Move X23, X0
	159 Move X0, X20
	160 Move W1, W22
	161 Call List`1<Object>.get_Item, X0, X1
	162 Compare X0, 0
	163 JumpIfEqual {170}
	164 Move X8, 0x485000
	165 Move X8, [X8+1184]
	166 Move X9, [X0]
	167 Move X8, [X8]
	168 NotImplemented "Instruction CMP not yet implemented."
	169 NotImplemented "Instruction CSEL not yet implemented."
	170 Move X24, X31
	171 Move X0, [X27]
	172 Move W8, [X0+224]
	173 Compare W8, 0
	174 JumpIfNotEqual {176}
	175 Call 0x1C17DFC
	176 Move X0, X24
	177 Move X1, X31
	178 Move X2, X31
	179 Call Object.op_Inequality, X0, X1
	180 Move TEMP, X0
	181 And TEMP, TEMP, 1
	182 Compare TEMP, 1
	183 JumpIfNotEqual {195}
	184 Compare X24, 0
	185 JumpIfEqual {338}
	186 Move X0, X24
	187 Move X1, X31
	188 Call Behaviour.get_enabled, X0
	189 NotImplemented "Instruction ORN not yet implemented."
	190 Move TEMP, X8
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {209}
	194 Or W28, W28, W0
	195 Move X8, [X23]
	196 Move X1, [X25]
	197 NotImplemented "Instruction LDRH not yet implemented."
	198 Compare X9, 0
	199 JumpIfEqual {206}
	200 Move X10, [X8+176]
	201 Add X10, X10, 8
	202 NotImplemented "Instruction LDUR not yet implemented."
	203 NotImplemented "Instruction CMP not yet implemented."
	204 Subtract X9, X9, 1
	205 Add X10, X10, 16
	206 Move X0, X23
	207 Move W2, W31
	208 Call 0x1C5D788
	209 Move X0, X24
	210 Move X1, X31
	211 Call CanvasGroup.get_ignoreParentGroups, X0
	212 Move X8, [X23]
	213 Move X1, [X25]
	214 NotImplemented "Instruction LDRH not yet implemented."
	215 Move TEMP, X0
	216 And TEMP, TEMP, 1
	217 Compare TEMP, 1
	218 JumpIfNotEqual {247}
	219 Compare W9, 0
	220 JumpIfEqual {227}
	221 Move X10, [X8+176]
	222 Add X10, X10, 8
	223 NotImplemented "Instruction LDUR not yet implemented."
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Subtract X9, X9, 1
	226 Add X10, X10, 16
	227 Move X0, X23
	228 Move W2, W31
	229 Call 0x1C5D788
	230 NotImplemented "Instruction LDRSW not yet implemented."
	231 Add X8, X8, X9
	232 Add X0, X8, 312
	233 Move X8, [X0]
	234 Move X2, [X0+8]
	235 Move X0, X23
	236 Move V0, V9
	237 Move V1, V8
	238 Move X1, X19
	239 NotImplemented "Instruction BLR not yet implemented."
	240 Move TEMP, X0
	241 And TEMP, TEMP, 1
	242 Compare TEMP, 1
	243 JumpIfNotEqual {297}
	244 Move W8, [X20+24]
	245 Add W22, W22, 1
	246 NotImplemented "Instruction CMP not yet implemented."
	247 Compare W9, 0
	248 JumpIfEqual {255}
	249 Move X10, [X8+176]
	250 Add X10, X10, 8
	251 NotImplemented "Instruction LDUR not yet implemented."
	252 NotImplemented "Instruction CMP not yet implemented."
	253 Subtract X9, X9, 1
	254 Add X10, X10, 16
	255 Move X0, X23
	256 Move W2, W31
	257 Call 0x1C5D788
	258 NotImplemented "Instruction LDRSW not yet implemented."
	259 Add X8, X8, X9
	260 Add X0, X8, 312
	261 Move X8, [X0]
	262 Move X2, [X0+8]
	263 Move X0, X23
	264 Move V0, V9
	265 Move V1, V8
	266 Move X1, X19
	267 NotImplemented "Instruction BLR not yet implemented."
	268 Move TEMP, X0
	269 And TEMP, TEMP, 1
	270 Compare TEMP, 1
	271 JumpIfNotEqual {297}
	272 Move W28, 1
	273 NotImplemented "Instruction LDRSW not yet implemented."
	274 Add X8, X8, X9
	275 Add X0, X8, 312
	276 Move X8, [X0]
	277 Move X2, [X0+8]
	278 Move X0, X23
	279 Move V0, V9
	280 Move V1, V8
	281 Move X1, X19
	282 NotImplemented "Instruction BLR not yet implemented."
	283 Move TEMP, X0
	284 And TEMP, TEMP, 1
	285 Compare TEMP, 1
	286 JumpIfNotEqual {297}
	287 Move W28, W31
	288 Move X22, X31
	289 Move TEMP, X26
	290 And TEMP, TEMP, 1
	291 Compare TEMP, 1
	292 JumpIfNotEqual {89}
	293 Move X0, X21
	294 Move X1, X31
	295 Call Transform.get_parent, X0
	296 Move X22, X0
	297 Move X8, 0x43E000
	298 Move X8, [X8+2600]
	299 Move X0, [X8]
	300 Move W8, [X0+224]
	301 Compare W8, 0
	302 JumpIfNotEqual {304}
	303 Call 0x1C17DFC
	304 Move X8, 0x43E000
	305 Move X8, [X8+2592]
	306 Move X0, X20
	307 Move X1, [X8]
	308 Call CollectionPool`2<Object, Object>.Release, X0
	309 Move W0, W31
	310 Move X20, [X31+96]
	311 Move X19, [X31+104]
	312 Move X22, [X31+80]
	313 Move X21, [X31+88]
	314 Move X24, [X31+64]
	315 Move X23, [X31+72]
	316 Move X26, [X31+48]
	317 Move X25, [X31+56]
	318 Move X28, [X31+32]
	319 Move X27, [X31+40]
	320 Move X29, [X31+16]
	321 Move X30, [X31+24]
	322 Move D9, [X31+112]
	323 Move D8, [X31+120]
	324 Return X0
	325 Move X8, 0x43E000
	326 Move X8, [X8+2600]
	327 Move X0, [X8]
	328 Move W8, [X0+224]
	329 Compare W8, 0
	330 JumpIfNotEqual {332}
	331 Call 0x1C17DFC
	332 Move X8, 0x43E000
	333 Move X8, [X8+2592]
	334 Move X0, X20
	335 Move X1, [X8]
	336 Call CollectionPool`2<Object, Object>.Release, X0
	337 Move W0, 1
	338 Call 0x1C17F20

Method: UnityEngine.Vector2 PixelAdjustPoint(UnityEngine.Vector2 point)

Disassembly:
	0x03CDE9A0 CBZ X25, 0x3CDEE08
	0x03CDE9A4 MOV X0, X25
	0x03CDE9A8 MOV X1, X31
	0x03CDE9AC BL 0x3C356F8
	0x03CDE9B0 CBZ X0, 0x3CDEE08
	0x03CDE9B4 MOV X1, X31
	0x03CDE9B8 BL 0x3C3DEB4
	0x03CDE9BC LDRB W8, [X24 + 0xA1F]
	0x03CDE9C0 MOV V8.16B, V0.16B
	0x03CDE9C4 MOV V9.16B, V1.16B
	0x03CDE9C8 MOV V11.16B, V2.16B
	0x03CDE9CC MOV V12.16B, V3.16B
	0x03CDE9D0 CBNZ W8, 0x3CDE9E4
	0x03CDE9D4 MOV X0, X19
	0x03CDE9D8 BL 0x1C16CF4
	0x03CDE9DC MOVZ W8, 0x1
	0x03CDE9E0 STRB W8, [X24 + 0xA1F]
	0x03CDE9E4 LDR X8, [X19]
	0x03CDE9E8 MOV V0.16B, V8.16B
	0x03CDE9EC MOV V1.16B, V9.16B
	0x03CDE9F0 MOV V2.16B, V11.16B
	0x03CDE9F4 LDR X8, [X8 + 0xB8]
	0x03CDE9F8 MOV V3.16B, V12.16B
	0x03CDE9FC MOV X0, X31
	0x03CDEA00 LDP S4, S5, [X8 + 0x48]
	0x03CDEA04 LDR V6, [X8 + 0x50]
	0x03CDEA08 BL 0x3C2A9FC
	0x03CDEA0C LDRB W8, [X24 + 0xA1F]
	0x03CDEA10 MOV V8.16B, V0.16B
	0x03CDEA14 MOV V9.16B, V1.16B
	0x03CDEA18 MOV V10.16B, V2.16B
	0x03CDEA1C CBNZ W8, 0x3CDEA30
	0x03CDEA20 MOV X0, X19
	0x03CDEA24 BL 0x1C16CF4
	0x03CDEA28 MOVZ W8, 0x1
	0x03CDEA2C STRB W8, [X24 + 0xA1F]
	0x03CDEA30 LDR X8, [X19]
	0x03CDEA34 LDR X8, [X8 + 0xB8]
	0x03CDEA38 LDP S0, S1, [X8 + 0x48]
	0x03CDEA3C LDR V2, [X8 + 0x50]
	0x03CDEA40 FMUL S0, S8, S0
	0x03CDEA44 FMUL S1, S9, S1
	0x03CDEA48 FADD S0, S0, S1
	0x03CDEA4C FMUL S1, S10, S2
	0x03CDEA50 FADD S0, S1, S0
	0x03CDEA54 FCMP S0, 0x0
	0x03CDEA58 B.GT 0x3CDEBA0
	0x03CDEA5C B 0x3CDEDF4
	0x03CDEA60 CBNZ X25, 0x3CDEBA0
	0x03CDEA64 B 0x3CDEE08
	0x03CDEA68 CBZ X27, 0x3CDEE08
	0x03CDEA6C MOV X0, X27
	0x03CDEA70 MOV X1, X31
	0x03CDEA74 BL 0x3C32E90
	0x03CDEA78 CBZ X0, 0x3CDEE08
	0x03CDEA7C MOV X1, X31
	0x03CDEA80 BL 0x3C3DEB4
	0x03CDEA84 LDRB W8, [X24 + 0xA1F]
	0x03CDEA88 MOV V8.16B, V0.16B
	0x03CDEA8C MOV V9.16B, V1.16B
	0x03CDEA90 MOV V11.16B, V2.16B
	0x03CDEA94 MOV V12.16B, V3.16B
	0x03CDEA98 CBNZ W8, 0x3CDEAAC
	0x03CDEA9C MOV X0, X19
	0x03CDEAA0 BL 0x1C16CF4
	0x03CDEAA4 MOVZ W8, 0x1
	0x03CDEAA8 STRB W8, [X24 + 0xA1F]
	0x03CDEAAC LDR X8, [X19]
	0x03CDEAB0 MOV V0.16B, V8.16B
	0x03CDEAB4 MOV V1.16B, V9.16B
	0x03CDEAB8 MOV V2.16B, V11.16B
	0x03CDEABC LDR X8, [X8 + 0xB8]
	0x03CDEAC0 MOV V3.16B, V12.16B
	0x03CDEAC4 MOV X0, X31
	0x03CDEAC8 LDP S4, S5, [X8 + 0x48]
	0x03CDEACC LDR V6, [X8 + 0x50]
	0x03CDEAD0 BL 0x3C2A9FC
	0x03CDEAD4 MOV X0, X27
	0x03CDEAD8 MOV X1, X31
	0x03CDEADC MOV V13.16B, V0.16B

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x70A000
	008 Move X20, 0x416000
	009 Move W8, [X21+1195]
	010 Move X20, [X20+1432]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x416000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x46C000
	022 Move X0, [X0+1720]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+1195], W8
	026 Move X0, X19
	027 Call Graphic.get_canvas, X0
	028 Move X8, [X20]
	029 Move X20, X0
	030 Move W9, [X8+224]
	031 Compare W9, 0
	032 JumpIfNotEqual {35}
	033 Move X0, X8
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Move X1, X31
	037 Call Object.op_Implicit, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {89}
	042 Move X0, X19
	043 Call Graphic.get_canvas, X0
	044 Compare X0, 0
	045 JumpIfEqual {98}
	046 Move X1, X31
	047 Call Canvas.get_renderMode, X0
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X0, X19
	050 Call Graphic.get_canvas, X0
	051 Compare X0, 0
	052 JumpIfEqual {98}
	053 Move X1, X31
	054 Call Canvas.get_scaleFactor, X0
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move X0, X19
	057 Call Graphic.get_canvas, X0
	058 Compare X0, 0
	059 JumpIfEqual {98}
	060 Move X1, X31
	061 Call Canvas.get_pixelPerfect, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {89}
	066 Move X0, X19
	067 Move X1, X31
	068 Call Component.get_transform, X0
	069 Move X20, X0
	070 Move X0, X19
	071 Call Graphic.get_canvas, X0
	072 Move X8, 0x46C000
	073 Move X8, [X8+1720]
	074 Move X19, X0
	075 Move X8, [X8]
	076 Move W9, [X8+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {81}
	079 Move X0, X8
	080 Call 0x1C17DFC
	081 Move V0, V9
	082 Move V1, V8
	083 Move X0, X20
	084 Move X1, X19
	085 Move X2, X31
	086 Call RectTransformUtility.PixelAdjustPoint, X0, X1, X2
	087 Move V9, V0
	088 Move V8, V1
	089 Move X20, [X31+32]
	090 Move X19, [X31+40]
	091 Move X30, [X31+16]
	092 Move X21, [X31+24]
	093 Move V0, V9
	094 Move V1, V8
	095 Move D9, [X31+48]
	096 Move D8, [X31+56]
	097 Return X0
	098 Call 0x1C17F20

Method: UnityEngine.Rect GetPixelAdjustedRect()

Disassembly:
	0x03CDE3D4 STP X29, X30, [X31 + 0x110]
	0x03CDE3D8 STP X28, X27, [X31 + 0x120]
	0x03CDE3DC STP X26, X25, [X31 + 0x130]
	0x03CDE3E0 STP X24, X23, [X31 + 0x140]
	0x03CDE3E4 STP X22, X21, [X31 + 0x150]
	0x03CDE3E8 STP X20, X19, [X31 + 0x160]
	0x03CDE3EC STR X2, [X31 + 0x48]
	0x03CDE3F0 ADRP X21, 0x709000
	0x03CDE3F4 ADRP X28, 0x415000
	0x03CDE3F8 LDRB W8, [X21 + 0x4B8]
	0x03CDE3FC LDR X28, [X28 + 0x598]
	0x03CDE400 MOV X24, X1
	0x03CDE404 MOV X20, X0
	0x03CDE408 TBNZ X8, 0x0, 0x3CDE48C
	0x03CDE40C ADRP X0, 0x479000
	0x03CDE410 LDR X0, [X0 + 0x448]
	0x03CDE414 BL 0x1C16CF4
	0x03CDE418 ADRP X0, 0x484000
	0x03CDE41C LDR X0, [X0 + 0x4F0]
	0x03CDE420 BL 0x1C16CF4
	0x03CDE424 ADRP X0, 0x46B000
	0x03CDE428 LDR X0, [X0 + 0x580]
	0x03CDE42C BL 0x1C16CF4
	0x03CDE430 ADRP X0, 0x46B000
	0x03CDE434 LDR X0, [X0 + 0x590]
	0x03CDE438 BL 0x1C16CF4
	0x03CDE43C ADRP X0, 0x46B000
	0x03CDE440 LDR X0, [X0 + 0x358]
	0x03CDE444 BL 0x1C16CF4
	0x03CDE448 ADRP X0, 0x484000
	0x03CDE44C LDR X0, [X0 + 0x4F8]
	0x03CDE450 BL 0x1C16CF4
	0x03CDE454 ADRP X0, 0x484000
	0x03CDE458 LDR X0, [X0 + 0x500]
	0x03CDE45C BL 0x1C16CF4
	0x03CDE460 ADRP X0, 0x46B000
	0x03CDE464 LDR X0, [X0 + 0x330]
	0x03CDE468 BL 0x1C16CF4
	0x03CDE46C ADRP X0, 0x484000
	0x03CDE470 LDR X0, [X0 + 0x508]
	0x03CDE474 BL 0x1C16CF4
	0x03CDE478 ADRP X0, 0x415000
	0x03CDE47C LDR X0, [X0 + 0x598]
	0x03CDE480 BL 0x1C16CF4
	0x03CDE484 MOVZ W8, 0x1
	0x03CDE488 STRB W8, [X21 + 0x4B8]
	0x03CDE48C MOVI V0.2D, 0x0
	0x03CDE490 MOV X0, X20
	0x03CDE494 STUR V0, [X31 + 0x6C]
	0x03CDE498 STP V0, V0, [X31 + 0x50]
	0x03CDE49C BL 0x3CDE210
	0x03CDE4A0 LDR X8, [X28]
	0x03CDE4A4 MOV X21, X0
	0x03CDE4A8 LDR W9, [X8 + 0xE0]
	0x03CDE4AC CBNZ W9, 0x3CDE4B8
	0x03CDE4B0 MOV X0, X8
	0x03CDE4B4 BL 0x1C16DFC
	0x03CDE4B8 MOV X0, X21
	0x03CDE4BC MOV X1, X31
	0x03CDE4C0 MOV X2, X31
	0x03CDE4C4 BL 0x3C3883C
	0x03CDE4C8 TBNZ X0, 0x0, 0x3CDEE0C
	0x03CDE4CC MOV X0, X20
	0x03CDE4D0 BL 0x3CDE210
	0x03CDE4D4 ADRP X8, 0x46B000
	0x03CDE4D8 LDR X8, [X8 + 0x580]
	0x03CDE4DC MOV X21, X0
	0x03CDE4E0 LDR X8, [X8]
	0x03CDE4E4 LDR W9, [X8 + 0xE0]
	0x03CDE4E8 CBNZ W9, 0x3CDE4F4
	0x03CDE4EC MOV X0, X8
	0x03CDE4F0 BL 0x1C16DFC
	0x03CDE4F4 MOV X0, X21
	0x03CDE4F8 BL 0x3CDEFD8
	0x03CDE4FC CBZ X0, 0x3CDEE0C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x70A000
	006 Move X20, 0x416000
	007 Move W8, [X21+1196]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x416000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x46C000
	018 Move X0, [X0+1720]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1196], W8
	022 Move X0, X19
	023 Call Graphic.get_canvas, X0
	024 Move X8, [X20]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Call Object.op_Implicit, X0
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {85}
	038 Move X0, X19
	039 Call Graphic.get_canvas, X0
	040 Compare X0, 0
	041 JumpIfEqual {96}
	042 Move X1, X31
	043 Call Canvas.get_renderMode, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Call Graphic.get_canvas, X0
	047 Compare X0, 0
	048 JumpIfEqual {96}
	049 Move X1, X31
	050 Call Canvas.get_scaleFactor, X0
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 Move X0, X19
	053 Call Graphic.get_canvas, X0
	054 Compare X0, 0
	055 JumpIfEqual {96}
	056 Move X1, X31
	057 Call Canvas.get_pixelPerfect, X0
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {85}
	062 Move X0, X19
	063 Call Graphic.get_rectTransform, X0
	064 Move X20, X0
	065 Move X0, X19
	066 Call Graphic.get_canvas, X0
	067 Move X8, 0x46C000
	068 Move X8, [X8+1720]
	069 Move X19, X0
	070 Move X8, [X8]
	071 Move W9, [X8+224]
	072 Compare W9, 0
	073 JumpIfNotEqual {76}
	074 Move X0, X8
	075 Call 0x1C17DFC
	076 Move X0, X20
	077 Move X1, X19
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move X2, X31
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call RectTransformUtility.PixelAdjustRect, X0, X1
	084 Return X0
	085 Move X0, X19
	086 Call Graphic.get_rectTransform, X0
	087 Compare X0, 0
	088 JumpIfEqual {96}
	089 Move X20, [X31+16]
	090 Move X19, [X31+24]
	091 Move X1, X31
	092 Move X30, [X31+32]
	093 Move X21, [X31+40]
	094 Call RectTransform.get_rect, X0
	095 Return X0
	096 Call 0x1C17F20

Method: System.Void CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)

Disassembly:
	0x03CDEAE0 MOV V9.16B, V1.16B
	0x03CDEAE4 MOV V10.16B, V2.16B
	0x03CDEAE8 BL 0x3C035DC
	0x03CDEAEC CBZ X25, 0x3CDEE08
	0x03CDEAF0 MOV X0, X25
	0x03CDEAF4 MOV X1, X31
	0x03CDEAF8 MOV V14.16B, V0.16B

ISIL:
	001 Move X8, [X0]
	002 And W1, W1, 1
	003 And W2, W2, 1
	004 Move W3, 1
	005 Move X5, [X8+1080]
	006 Move X4, [X8+1088]
	007 CallNoReturn X5

Method: System.Void CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha, System.Boolean useRGB)

Disassembly:
	0x03CDEAFC BL 0x3C356F8
	0x03CDEB00 CBZ X0, 0x3CDEE08
	0x03CDEB04 MOV X1, X31
	0x03CDEB08 STP S10, S9, [X31 + 0x3C]
	0x03CDEB0C BL 0x3C3F58C
	0x03CDEB10 MOV X0, X27
	0x03CDEB14 MOV X1, X31
	0x03CDEB18 MOV V15.16B, V0.16B
	0x03CDEB1C MOV V8.16B, V1.16B
	0x03CDEB20 MOV V9.16B, V2.16B
	0x03CDEB24 BL 0x3C32E90
	0x03CDEB28 CBZ X0, 0x3CDEE08
	0x03CDEB2C MOV X1, X31
	0x03CDEB30 BL 0x3C3F58C
	0x03CDEB34 MOV X0, X25
	0x03CDEB38 MOV X1, X31
	0x03CDEB3C MOV V10.16B, V0.16B
	0x03CDEB40 MOV V11.16B, V1.16B
	0x03CDEB44 MOV V12.16B, V2.16B
	0x03CDEB48 BL 0x3C356F8
	0x03CDEB4C CBZ X0, 0x3CDEE08
	0x03CDEB50 LDP S2, S1, [X31 + 0x3C]
	0x03CDEB54 FMUL S0, S13, S14
	0x03CDEB58 FSUB S3, S9, S12
	0x03CDEB5C FSUB S4, S8, S11
	0x03CDEB60 FMUL S1, S1, S14
	0x03CDEB64 FMUL S2, S2, S14
	0x03CDEB68 FSUB S5, S15, S10
	0x03CDEB6C MOV X1, X31
	0x03CDEB70 FSUB S8, S3, S2
	0x03CDEB74 FSUB S9, S4, S1
	0x03CDEB78 FSUB S10, S5, S0
	0x03CDEB7C BL 0x3C3FA04
	0x03CDEB80 FMUL S0, S10, S0
	0x03CDEB84 FMUL S1, S9, S1
	0x03CDEB88 LDP S14, S15, [X31 + 0x18]
	0x03CDEB8C FADD S0, S0, S1
	0x03CDEB90 FMUL S1, S8, S2
	0x03CDEB94 FADD S0, S1, S0
	0x03CDEB98 FCMP S0, 0x0
	0x03CDEB9C B.LT 0x3CDEDF4
	0x03CDEBA0 MOV X0, X25
	0x03CDEBA4 MOV X1, X31
	0x03CDEBA8 BL 0x3C356F8
	0x03CDEBAC CBZ X0, 0x3CDEE08
	0x03CDEBB0 MOV X1, X31
	0x03CDEBB4 MOV X26, X0
	0x03CDEBB8 BL 0x3C3FA04
	0x03CDEBBC LDR X0, [X28]
	0x03CDEBC0 MOV V11.16B, V0.16B
	0x03CDEBC4 MOV V12.16B, V1.16B
	0x03CDEBC8 MOV V13.16B, V2.16B
	0x03CDEBCC LDR W8, [X0 + 0xE0]
	0x03CDEBD0 CBNZ W8, 0x3CDEBD8
	0x03CDEBD4 BL 0x1C16DFC
	0x03CDEBD8 MOV X0, X27
	0x03CDEBDC MOV X1, X31
	0x03CDEBE0 MOV X2, X31
	0x03CDEBE4 BL 0x3C3883C
	0x03CDEBE8 FMOV S8, W31
	0x03CDEBEC TBNZ X0, 0x0, 0x3CDEC68
	0x03CDEBF0 MOV X0, X20
	0x03CDEBF4 BL 0x3CDE210
	0x03CDEBF8 CBZ X0, 0x3CDEE08
	0x03CDEBFC MOV X1, X31
	0x03CDEC00 BL 0x3E244BC
	0x03CDEC04 CBZ W0, 0x3CDEC68
	0x03CDEC08 MOV X0, X26
	0x03CDEC0C MOV X1, X31
	0x03CDEC10 BL 0x3C3F58C
	0x03CDEC14 LDP S3, S4, [X31 + 0x30]
	0x03CDEC18 FMUL S3, S3, S11
	0x03CDEC1C FMUL S4, S4, S12
	0x03CDEC20 FADD S3, S3, S4
	0x03CDEC24 LDR V4, [X31 + 0x24]
	0x03CDEC28 FSUB S0, S0, S4
	0x03CDEC2C LDR V4, [X31 + 0x28]
	0x03CDEC30 FMUL S0, S11, S0
	0x03CDEC34 FSUB S1, S1, S4
	0x03CDEC38 FMUL S1, S12, S1
	0x03CDEC3C FADD S0, S0, S1
	0x03CDEC40 LDR V1, [X31 + 0x2C]
	0x03CDEC44 FSUB S1, S2, S1
	0x03CDEC48 FMUL S1, S13, S1
	0x03CDEC4C FADD S0, S1, S0
	0x03CDEC50 LDR V1, [X31 + 0x38]
	0x03CDEC54 FMUL S1, S1, S13
	0x03CDEC58 FADD S1, S1, S3
	0x03CDEC5C FDIV S8, S0, S1
	0x03CDEC60 FCMP S8, 0x0
	0x03CDEC64 B.MI 0x3CDEDF4
	0x03CDEC68 LDR V0, [X31 + 0x44]
	0x03CDEC6C FCMP S8, S0
	0x03CDEC70 B.GE 0x3CDEDF4
	0x03CDEC74 LDR X8, [X31 + 0x48]
	0x03CDEC78 CBZ X8, 0x3CDEE08
	0x03CDEC7C LDR X0, [X20 + 0x40]
	0x03CDEC80 MOV X21, X20
	0x03CDEC84 CBZ X0, 0x3CDEE08
	0x03CDEC88 LDR X2, [X22]
	0x03CDEC8C LDR V9, [X8 + 0x18]
	0x03CDEC90 MOV W1, W23
	0x03CDEC94 MOV W19, W29
	0x03CDEC98 MOV X29, X28
	0x03CDEC9C MOV X28, X24
	0x03CDECA0 MOV X24, X22
	0x03CDECA4 BL 0x301BCCC
	0x03CDECA8 CBZ X0, 0x3CDEE08
	0x03CDECAC LDR W22, [X31 + 0x20]
	0x03CDECB0 BL 0x3CDBD10
	0x03CDECB4 MOV W26, W0
	0x03CDECB8 MOV X0, X21
	0x03CDECBC MOV X20, X21
	0x03CDECC0 BL 0x3CDE210
	0x03CDECC4 CBZ X0, 0x3CDEE08
	0x03CDECC8 MOV X1, X31
	0x03CDECCC BL 0x3E24A24
	0x03CDECD0 MOV W27, W0
	0x03CDECD4 MOV X0, X20
	0x03CDECD8 BL 0x3CDE210
	0x03CDECDC CBZ X0, 0x3CDEE08
	0x03CDECE0 MOV X1, X31
	0x03CDECE4 BL 0x3E24924
	0x03CDECE8 LDR X12, [X31 + 0x48]
	0x03CDECEC ADRP X9, 0x46B000
	0x03CDECF0 LDR W10, [X12 + 0x1C]
	0x03CDECF4 LDR X8, [X12 + 0x10]
	0x03CDECF8 LDR X9, [X9 + 0x358]
	0x03CDECFC ADD W10, W10, 0x1
	0x03CDED00 LDR X9, [X9]
	0x03CDED04 STR W10, [X12 + 0x1C]
	0x03CDED08 CBZ X8, 0x3CDEE08
	0x03CDED0C LDP S0, S1, [X31 + 0x30]
	0x03CDED10 LDR V4, [X31 + 0x24]
	0x03CDED14 LDR V3, [X31 + 0x38]
	0x03CDED18 LDRSW X10, [X12 + 0x18]
	0x03CDED1C FMUL S0, S0, S8
	0x03CDED20 FADD S6, S4, S0
	0x03CDED24 LDR V0, [X31 + 0x28]
	0x03CDED28 FMUL S1, S1, S8
	0x03CDED2C LDR W11, [X8 + 0x18]
	0x03CDED30 FMUL S3, S3, S8
	0x03CDED34 FADD S5, S0, S1
	0x03CDED38 LDR V0, [X31 + 0x2C]
	0x03CDED3C SCVTF S2, S9
	0x03CDED40 FNEG S1, S12
	0x03CDED44 CMP W10, W11
	0x03CDED48 FADD S4, S0, S3
	0x03CDED4C FNEG S3, S11
	0x03CDED50 FNEG S0, S13
	0x03CDED54 B.CS 0x3CDED94
	0x03CDED58 MOVZ W11, 0x50
	0x03CDED5C ADD W9, W10, 0x1
	0x03CDED60 MADD X8, X10, X11, X8
	0x03CDED64 STR W9, [X12 + 0x18]
	0x03CDED68 STP X25, X21, [X8 + 0x20]
	0x03CDED6C STP S8, S2, [X8 + 0x30]
	0x03CDED70 STR W26, [X8 + 0x38]
	0x03CDED74 STUR X31, [X8 + 0x3C]
	0x03CDED78 STP W27, W0, [X8 + 0x44]
	0x03CDED7C STP S6, S5, [X8 + 0x4C]
	0x03CDED80 STP S4, S3, [X8 + 0x54]
	0x03CDED84 STP S1, S0, [X8 + 0x5C]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+208], D12
	003 Move [X31+224], D11
	004 Move [X31+232], D10
	005 Move [X31+240], D9
	006 Move [X31+248], D8
	007 Move [X31+256], X29
	008 Move [X31+264], X30
	009 Move [X31+272], X24
	010 Move [X31+280], X23
	011 Move [X31+288], X22
	012 Move [X31+296], X21
	013 Move [X31+304], X20
	014 Move [X31+312], X19
	015 Move X24, 0x70A000
	016 Move X23, 0x416000
	017 Move W8, [X24+1197]
	018 Move X23, [X23+1432]
	019 Move W21, W3
	020 Move W22, W2
	021 Move W20, W1
	022 Move V8, V4
	023 Move V9, V3
	024 Move V10, V2
	025 Move V11, V1
	026 Move V12, V0
	027 Move X19, X0
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {49}
	032 Move X0, 0x485000
	033 Move X0, [X0+1216]
	034 Call 0x1C17CF4
	035 Move X0, 0x416000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0x485000
	039 Move X0, [X0+1224]
	040 Call 0x1C17CF4
	041 Move X0, 0x485000
	042 Move X0, [X0+1232]
	043 Call 0x1C17CF4
	044 Move X0, 0x485000
	045 Move X0, [X0+1240]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X24+1197], W8
	049 NotImplemented "Instruction MOVI not yet implemented."
	050 Move X0, X19
	051 Move [X31+112], X31
	052 Move [X31+80], V0
	053 Move [X31+88], V0
	054 Move [X31+4], V0
	055 Call Graphic.get_canvasRenderer, X0
	056 Move X8, [X23]
	057 Move X23, X0
	058 Move W9, [X8+224]
	059 Compare W9, 0
	060 JumpIfNotEqual {63}
	061 Move X0, X8
	062 Call 0x1C17DFC
	063 Move X0, X23
	064 Move X1, X31
	065 Move X2, X31
	066 Call Object.op_Equality, X0, X1
	067 Or W8, W22, W21
	068 Move TEMP, X8
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {196}
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {196}
	076 Move X0, X19
	077 Call Graphic.get_canvasRenderer, X0
	078 Compare X0, 0
	079 JumpIfEqual {211}
	080 Move X1, X31
	081 Call CanvasRenderer.GetColor, X0
	082 Move [X31+128], S0
	083 Move [X31+136], S1
	084 Add X0, X31, 128
	085 Move V0, V12
	086 Move X1, X31
	087 Add X23, X31, 128
	088 Move [X31+136], S2
	089 Move [X31+144], S3
	090 Call Single.Equals, X0, V0
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {126}
	095 Or X0, X23, 7
	096 Move V0, V11
	097 Move X1, X31
	098 Call Single.Equals, X0, V0
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {126}
	103 Add X0, X23, 8
	104 Move V0, V10
	105 Move X1, X31
	106 Call Single.Equals, X0, V0
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {126}
	111 Add X0, X23, 12
	112 Move V0, V9
	113 Move X1, X31
	114 Call Single.Equals, X0, V0
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {126}
	119 Move X0, [X19+152]
	120 Compare X0, 0
	121 JumpIfEqual {211}
	122 Move X8, 0x485000
	123 Move X8, [X8+1232]
	124 Move X1, [X8]
	125 Call 0x270A224, X0
	126 Move X0, X19
	127 Call Graphic.get_canvasRenderer, X0
	128 Compare X0, 0
	129 JumpIfEqual {211}
	130 And W8, W22, W21
	131 And W31, W21, 1
	132 Move W9, 1
	133 NotImplemented "Instruction CINC not yet implemented."
	134 And W31, W8, 1
	135 Move X1, X31
	136 NotImplemented "Instruction CSEL not yet implemented."
	137 Call CanvasRenderer.GetColor, X0
	138 Move X0, X19
	139 Move [X31+64], X31
	140 Move [X31+72], S0
	141 Move [X31+80], S1
	142 Move [X31+80], S2
	143 Move [X31+88], S3
	144 Move [X31+88], S12
	145 Move [X31+96], S11
	146 Move [X31+96], S10
	147 Move [X31+104], S9
	148 Move [X31+104], W31
	149 Move [X31+108], S8
	150 Move [X31+112], X31
	151 Call Graphic.get_canvasRenderer, X0
	152 Move X8, 0x485000
	153 Move X8, [X8+1240]
	154 Move X21, X0
	155 Move X8, [X8]
	156 Move X0, X8
	157 Call 0x1C17F10
	158 Move X8, 0x485000
	159 Move X8, [X8+1216]
	160 Move X1, X21
	161 Move X3, X31
	162 Move X22, X0
	163 Move X2, [X8]
	164 Call UnityAction`1<Color>..ctor, X0, X1, X2
	165 Add X0, X31, 64
	166 Move X1, X22
	167 Move X2, X31
	168 Call ColorTween.AddOnChangedCallback, X0, X1
	169 And W8, W20, 1
	170 Move [X31+104], W23
	171 Move [X31+112], W8
	172 Move V0, [X31+64]
	173 Move V1, [X31+80]
	174 Move V2, [X31+6]
	175 Move X0, [X19+152]
	176 Move X8, [X31+112]
	177 Move [X31], V0
	178 Move [X31+8], V1
	179 Move [X31+2], V2
	180 Move [X31+48], X8
	181 Compare X0, 0
	182 JumpIfEqual {211}
	183 Move X8, 0x485000
	184 Move X8, [X8+1224]
	185 Move V0, [X31]
	186 Move V1, [X31+16]
	187 Move V2, [X31+2]
	188 Move X9, [X31+48]
	189 Move X2, [X8]
	190 Add X1, X31, 144
	191 Move [X31+144], V0
	192 Move [X31+152], V1
	193 Move [X31+11], V2
	194 Move [X31+192], X9
	195 Call 0x270A0AC, X0, X1
	196 Move X20, [X31+304]
	197 Move X19, [X31+312]
	198 Move X22, [X31+288]
	199 Move X21, [X31+296]
	200 Move X24, [X31+272]
	201 Move X23, [X31+280]
	202 Move X29, [X31+256]
	203 Move X30, [X31+264]
	204 Move D9, [X31+240]
	205 Move D8, [X31+248]
	206 Move D11, [X31+224]
	207 Move D10, [X31+232]
	208 Move V12, [X31+208]
	209 Add X31, X31, 320
	210 Return 
	211 Call 0x1C17F20

Method: UnityEngine.Color CreateColorFromAlpha(System.Single alpha)

Disassembly:
	0x03CDED88 STP S15, S14, [X8 + 0x64]
	0x03CDED8C STR W22, [X8 + 0x6C]
	0x03CDED90 B 0x3CDEDD4
	0x03CDED94 LDR X8, [X9 + 0x20]
	0x03CDED98 ADD X1, X31, 0x80

ISIL:
	001 Move V3, V0
	002 Move S0, W31
	003 Move S1, W31
	004 Move S2, W31
	005 Return X0

Method: System.Void CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)

Disassembly:
	0x03CDED9C LDR X8, [X8 + 0xC0]
	0x03CDEDA0 LDR X2, [X8 + 0x70]
	0x03CDEDA4 STP W27, W0, [X31 + 0xA4]
	0x03CDEDA8 MOV X0, X12
	0x03CDEDAC STP X25, X21, [X31 + 0x80]
	0x03CDEDB0 STP S8, S2, [X31 + 0x90]
	0x03CDEDB4 STR W26, [X31 + 0x98]
	0x03CDEDB8 STUR X31, [X31 + 0x9C]
	0x03CDEDBC STP S6, S5, [X31 + 0xAC]
	0x03CDEDC0 STP S4, S3, [X31 + 0xB4]
	0x03CDEDC4 STP S1, S0, [X31 + 0xBC]
	0x03CDEDC8 STP S15, S14, [X31 + 0xC4]
	0x03CDEDCC STR W22, [X31 + 0xCC]
	0x03CDEDD0 BL 0x3035DFC
	0x03CDEDD4 MOV X22, X24
	0x03CDEDD8 MOV X24, X28
	0x03CDEDDC MOV X28, X29
	0x03CDEDE0 MOV W29, W19
	0x03CDEDE4 ADRP X19, 0x415000
	0x03CDEDE8 LDR X19, [X19 + 0x5A0]
	0x03CDEDEC LDR X27, [X31 + 0x10]
	0x03CDEDF0 MOV X20, X21
	0x03CDEDF4 CMP W29, W23
	0x03CDEDF8 B.EQ 0x3CDEE0C
	0x03CDEDFC LDR X0, [X20 + 0x40]
	0x03CDEE00 ADD W23, W23, 0x1
	0x03CDEE04 CBNZ X0, 0x3CDE958
	0x03CDEE08 BL 0x1C16F20
	0x03CDEE0C LDP X20, X19, [X31 + 0x160]
	0x03CDEE10 LDP X22, X21, [X31 + 0x150]
	0x03CDEE14 LDP X24, X23, [X31 + 0x140]
	0x03CDEE18 LDP X26, X25, [X31 + 0x130]
	0x03CDEE1C LDP X28, X27, [X31 + 0x120]
	0x03CDEE20 LDP X29, X30, [X31 + 0x110]
	0x03CDEE24 LDP D9, D8, [X31 + 0x100]
	0x03CDEE28 LDP D11, D10, [X31 + 0xF0]
	0x03CDEE2C LDP D13, D12, [X31 + 0xE0]
	0x03CDEE30 LDP D15, D14, [X31 + 0xD0]
	0x03CDEE34 ADD X31, X31, 0x170

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x70A000
	009 Move X22, 0x47C000
	010 Move W8, [X21+1198]
	011 Move X22, [X22+280]
	012 Move W20, W1
	013 Move V8, V1
	014 Move V9, V0
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x47C000
	021 Move X0, [X0+280]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1198], W8
	025 Move X0, [X22]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X8, [X19]
	031 And W1, W20, 1
	032 Move X0, X19
	033 Move X20, [X31+48]
	034 Move X19, [X31+56]
	035 Move X5, [X8+1080]
	036 Move X4, [X8+1088]
	037 Move X22, [X31+32]
	038 Move X21, [X31+40]
	039 Move X30, [X31+16]
	040 Move S0, W31
	041 Move S1, W31
	042 Move S2, W31
	043 Move W2, 1
	044 Move V3, V9
	045 Move V4, V8
	046 Move W3, W31
	047 Move D9, [X31+64]
	048 Move D8, [X31+72]
	049 CallNoReturn X5

Method: System.Void RegisterDirtyLayoutCallback(UnityEngine.Events.UnityAction action)

Disassembly:
	0x03CDEE38 RET
	0x03CDEE3C MOVZ W8, 0x42C80000
	0x03CDEE40 FMOV S11, W8
	0x03CDEE44 B 0x3CDEE78
	0x03CDEE48 CBZ X27, 0x3CDEE08
	0x03CDEE4C MOV X0, X27
	0x03CDEE50 MOV X1, X31
	0x03CDEE54 BL 0x3C03618
	0x03CDEE58 MOV X0, X27
	0x03CDEE5C MOV X1, X31
	0x03CDEE60 MOV V8.16B, V0.16B
	0x03CDEE64 BL 0x3C035DC
	0x03CDEE68 LDR V1, [X31 + 0x38]
	0x03CDEE6C FSUB S0, S8, S0
	0x03CDEE70 FDIV S0, S0, S1
	0x03CDEE74 FABS S11, S0
	0x03CDEE78 LDR W8, [X20 + 0x2C]
	0x03CDEE7C AND W9, W8, 0xFFFFFFFE
	0x03CDEE80 CMP W9, 0x2
	0x03CDEE84 B.NE 0x3CDEF18
	0x03CDEE88 MOV X0, X31
	0x03CDEE8C BL 0x3E48798
	0x03CDEE90 CBZ X0, 0x3CDEE08
	0x03CDEE94 LDR X8, [X0 + 0x10]
	0x03CDEE98 CBZ X8, 0x3CDEF24
	0x03CDEE9C MOV X0, X31
	0x03CDEEA0 BL 0x3E48798
	0x03CDEEA4 CBZ X0, 0x3CDEE08
	0x03CDEEA8 LDR X22, [X0 + 0x10]
	0x03CDEEAC LDR W0, [X20 + 0x30]
	0x03CDEEB0 MOV X1, X31
	0x03CDEEB4 BL 0x3C35CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x70A000
	006 Move W8, [X21+1199]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x43D000
	014 Move X0, [X0+3632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1199], W8
	018 Move X0, [X19+112]
	019 Move X1, X20
	020 Move X2, X31
	021 Call Delegate.Combine, X0, X1
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move X8, 0x43D000
	025 Move X8, [X8+3632]
	026 Move X1, [X8]
	027 Move X8, [X0]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X19+112], X0
	030 Move X8, [X0]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Call 0x1C181E0
	033 Move [X19+112], X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: System.Void UnregisterDirtyLayoutCallback(UnityEngine.Events.UnityAction action)

Disassembly:
	0x03CDEEB8 CBZ X22, 0x3CDEE08
	0x03CDEEBC LDR V1, [X31 + 0x24]
	0x03CDEEC0 LDR V0, [X31 + 0x28]
	0x03CDEEC4 MOV W3, W0
	0x03CDEEC8 LDR X8, [X22 + 0x18]
	0x03CDEECC LDR X0, [X22 + 0x40]
	0x03CDEED0 STP S1, S0, [X31 + 0x80]
	0x03CDEED4 LDR V1, [X31 + 0x2C]
	0x03CDEED8 LDR V0, [X31 + 0x30]
	0x03CDEEDC ADD X1, X31, 0x80
	0x03CDEEE0 ADD X2, X31, 0x50
	0x03CDEEE4 STP S1, S0, [X31 + 0x88]
	0x03CDEEE8 LDR V1, [X31 + 0x34]
	0x03CDEEEC LDR V0, [X31 + 0x38]
	0x03CDEEF0 STP S1, S0, [X31 + 0x90]
	0x03CDEEF4 LDR X4, [X22 + 0x28]
	0x03CDEEF8 MOV V0.16B, V11.16B
	0x03CDEEFC BLR X8
	0x03CDEF00 TBZ X0, 0x0, 0x3CDEF24
	0x03CDEF04 ADD X0, X31, 0x50
	0x03CDEF08 MOV X1, X31
	0x03CDEF0C BL 0x3C8E684
	0x03CDEF10 STR S0, [X31 + 0x44]
	0x03CDEF14 B 0x3CDEF2C
	0x03CDEF18 MOVN W9, 0x80800000
	0x03CDEF1C STR W9, [X31 + 0x44]
	0x03CDEF20 B 0x3CDEF30
	0x03CDEF24 MOVN W8, 0x80800000
	0x03CDEF28 STR W8, [X31 + 0x44]
	0x03CDEF2C LDR W8, [X20 + 0x2C]
	0x03CDEF30 ORR W8, W8, 0x2
	0x03CDEF34 CMP W8, 0x3

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x70A000
	006 Move W8, [X21+1200]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x43D000
	014 Move X0, [X0+3632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1200], W8
	018 Move X0, [X19+112]
	019 Move X1, X20
	020 Move X2, X31
	021 Call Delegate.Remove, X0, X1
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move X8, 0x43D000
	025 Move X8, [X8+3632]
	026 Move X1, [X8]
	027 Move X8, [X0]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X19+112], X0
	030 Move X8, [X0]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Call 0x1C181E0
	033 Move [X19+112], X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: System.Void RegisterDirtyVerticesCallback(UnityEngine.Events.UnityAction action)

Disassembly:
	0x03CDEF38 B.NE 0x3CDE8BC
	0x03CDEF3C MOV X0, X31
	0x03CDEF40 BL 0x3E48798
	0x03CDEF44 CBZ X0, 0x3CDEE08
	0x03CDEF48 LDR X8, [X0 + 0x28]
	0x03CDEF4C CBZ X8, 0x3CDE8BC
	0x03CDEF50 MOV X0, X31
	0x03CDEF54 BL 0x3E48798
	0x03CDEF58 CBZ X0, 0x3CDEE08
	0x03CDEF5C LDR X22, [X0 + 0x30]
	0x03CDEF60 LDR W0, [X20 + 0x30]
	0x03CDEF64 MOV X1, X31
	0x03CDEF68 BL 0x3C35CB8
	0x03CDEF6C CBZ X22, 0x3CDEE08
	0x03CDEF70 LDR V1, [X31 + 0x24]
	0x03CDEF74 LDR V0, [X31 + 0x28]
	0x03CDEF78 MOV W2, W0
	0x03CDEF7C LDR X8, [X22 + 0x18]
	0x03CDEF80 LDR X0, [X22 + 0x40]
	0x03CDEF84 STP S1, S0, [X31 + 0x80]
	0x03CDEF88 LDR V1, [X31 + 0x2C]
	0x03CDEF8C LDR V0, [X31 + 0x30]
	0x03CDEF90 ADD X1, X31, 0x80
	0x03CDEF94 STP S1, S0, [X31 + 0x88]
	0x03CDEF98 LDR V1, [X31 + 0x34]
	0x03CDEF9C LDR V0, [X31 + 0x38]
	0x03CDEFA0 STP S1, S0, [X31 + 0x90]
	0x03CDEFA4 LDR X3, [X22 + 0x28]
	0x03CDEFA8 MOV V0.16B, V11.16B
	0x03CDEFAC BLR X8
	0x03CDEFB0 CBZ X0, 0x3CDEE08
	0x03CDEFB4 LDR X8, [X0 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x70A000
	006 Move W8, [X21+1201]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x43D000
	014 Move X0, [X0+3632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1201], W8
	018 Move X0, [X19+120]
	019 Move X1, X20
	020 Move X2, X31
	021 Call Delegate.Combine, X0, X1
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move X8, 0x43D000
	025 Move X8, [X8+3632]
	026 Move X1, [X8]
	027 Move X8, [X0]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X19+120], X0
	030 Move X8, [X0]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Call 0x1C181E0
	033 Move [X19+120], X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: System.Void UnregisterDirtyVerticesCallback(UnityEngine.Events.UnityAction action)

Disassembly:
	0x03CDEFB8 CBZ X8, 0x3CDE8BC
	0x03CDEFBC CBZ W8, 0x3CDEFD4
	0x03CDEFC0 ADD X0, X0, 0x20
	0x03CDEFC4 MOV X1, X31
	0x03CDEFC8 BL 0x3C896B0
	0x03CDEFCC STR S0, [X31 + 0x44]
	0x03CDEFD0 B 0x3CDE8BC
	0x03CDEFD4 BL 0x1C16F28
	0x03CDEFD8 SUB X31, X31, 0x30
	0x03CDEFDC STP X30, X21, [X31 + 0x10]
	0x03CDEFE0 STP X20, X19, [X31 + 0x20]
	0x03CDEFE4 ADRP X21, 0x709000
	0x03CDEFE8 ADRP X20, 0x46B000
	0x03CDEFEC LDRB W8, [X21 + 0x4C6]
	0x03CDEFF0 LDR X20, [X20 + 0x580]
	0x03CDEFF4 MOV X19, X0
	0x03CDEFF8 TBNZ X8, 0x0, 0x3CDF01C
	0x03CDEFFC ADRP X0, 0x484000
	0x03CDF000 LDR X0, [X0 + 0x408]
	0x03CDF004 BL 0x1C16CF4
	0x03CDF008 ADRP X0, 0x46A000
	0x03CDF00C LDR X0, [X0 + 0x580]
	0x03CDF010 BL 0x1C16CF4
	0x03CDF014 MOVZ W8, 0x1
	0x03CDF018 STRB W8, [X21 + 0x4C6]
	0x03CDF01C LDR X0, [X20]
	0x03CDF020 STR X31, [X31 + 0x8]
	0x03CDF024 LDR W8, [X0 + 0xE0]
	0x03CDF028 CBNZ W8, 0x3CDF030
	0x03CDF02C BL 0x1C16DFC
	0x03CDF030 BL 0x3CDF9A4
	0x03CDF034 CBZ X0, 0x3CDF090

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x70A000
	006 Move W8, [X21+1202]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x43D000
	014 Move X0, [X0+3632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1202], W8
	018 Move X0, [X19+120]
	019 Move X1, X20
	020 Move X2, X31
	021 Call Delegate.Remove, X0, X1
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move X8, 0x43D000
	025 Move X8, [X8+3632]
	026 Move X1, [X8]
	027 Move X8, [X0]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X19+120], X0
	030 Move X8, [X0]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Call 0x1C181E0
	033 Move [X19+120], X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: System.Void RegisterDirtyMaterialCallback(UnityEngine.Events.UnityAction action)

Disassembly:
	0x03CDF038 LDR X0, [X0 + 0x18]
	0x03CDF03C CBZ X0, 0x3CDF090
	0x03CDF040 ADRP X8, 0x483000
	0x03CDF044 LDR X8, [X8 + 0x408]
	0x03CDF048 ADD X2, X31, 0x8
	0x03CDF04C MOV X1, X19
	0x03CDF050 ADD X21, X31, 0x8
	0x03CDF054 LDR X3, [X8]
	0x03CDF058 BL 0x2AA6B2C
	0x03CDF05C TBNZ X0, 0x0, 0x3CDF07C
	0x03CDF060 LDR X0, [X20]
	0x03CDF064 LDR W8, [X0 + 0xE0]
	0x03CDF068 CBNZ W8, 0x3CDF074
	0x03CDF06C BL 0x1C16DFC
	0x03CDF070 LDR X0, [X20]
	0x03CDF074 LDR X8, [X0 + 0xB8]
	0x03CDF078 ADD X21, X8, 0x8
	0x03CDF07C LDR X0, [X21]
	0x03CDF080 LDP X20, X19, [X31 + 0x20]
	0x03CDF084 LDP X30, X21, [X31 + 0x10]
	0x03CDF088 ADD X31, X31, 0x30
	0x03CDF08C RET
	0x03CDF090 BL 0x1C16F20
	0x03CDF094 STP D13, D12, [X31 - 0x90]!
	0x03CDF098 STP D11, D10, [X31 + 0x10]
	0x03CDF09C STP D9, D8, [X31 + 0x20]
	0x03CDF0A0 STP X29, X30, [X31 + 0x30]
	0x03CDF0A4 STP X28, X27, [X31 + 0x40]
	0x03CDF0A8 STP X26, X25, [X31 + 0x50]
	0x03CDF0AC STP X24, X23, [X31 + 0x60]
	0x03CDF0B0 STP X22, X21, [X31 + 0x70]
	0x03CDF0B4 STP X20, X19, [X31 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x709000
	006 Move W8, [X21+1203]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x43C000
	014 Move X0, [X0+3632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1203], W8
	018 Move X0, [X19+128]
	019 Move X1, X20
	020 Move X2, X31
	021 Call Delegate.Combine, X0, X1
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move X8, 0x43C000
	025 Move X8, [X8+3632]
	026 Move X1, [X8]
	027 Move X8, [X0]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X19+128], X0
	030 Move X8, [X0]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Call 0x1C181E0
	033 Move [X19+128], X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: System.Void UnregisterDirtyMaterialCallback(UnityEngine.Events.UnityAction action)

Disassembly:
	0x03CDF0B8 ADRP X22, 0x708000
	0x03CDF0BC LDRB W8, [X22 + 0x4BA]
	0x03CDF0C0 MOV X19, X3
	0x03CDF0C4 MOV X20, X2
	0x03CDF0C8 MOV V8.16B, V1.16B
	0x03CDF0CC MOV V9.16B, V0.16B
	0x03CDF0D0 MOV X21, X1
	0x03CDF0D4 TBNZ X8, 0x0, 0x3CDF17C
	0x03CDF0D8 ADRP X0, 0x483000
	0x03CDF0DC LDR X0, [X0 + 0x510]
	0x03CDF0E0 BL 0x1C16CF4
	0x03CDF0E4 ADRP X0, 0x483000
	0x03CDF0E8 LDR X0, [X0 + 0x4F0]
	0x03CDF0EC BL 0x1C16CF4
	0x03CDF0F0 ADRP X0, 0x46A000
	0x03CDF0F4 LDR X0, [X0 + 0x590]
	0x03CDF0F8 BL 0x1C16CF4
	0x03CDF0FC ADRP X0, 0x46A000
	0x03CDF100 LDR X0, [X0 + 0x598]
	0x03CDF104 BL 0x1C16CF4
	0x03CDF108 ADRP X0, 0x483000
	0x03CDF10C LDR X0, [X0 + 0x518]
	0x03CDF110 BL 0x1C16CF4
	0x03CDF114 ADRP X0, 0x483000
	0x03CDF118 LDR X0, [X0 + 0x4F8]
	0x03CDF11C BL 0x1C16CF4
	0x03CDF120 ADRP X0, 0x483000
	0x03CDF124 LDR X0, [X0 + 0x520]
	0x03CDF128 BL 0x1C16CF4
	0x03CDF12C ADRP X0, 0x483000
	0x03CDF130 LDR X0, [X0 + 0x500]
	0x03CDF134 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x709000
	006 Move W8, [X21+1204]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x43C000
	014 Move X0, [X0+3632]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1204], W8
	018 Move X0, [X19+128]
	019 Move X1, X20
	020 Move X2, X31
	021 Call Delegate.Remove, X0, X1
	022 Compare X0, 0
	023 JumpIfEqual {33}
	024 Move X8, 0x43C000
	025 Move X8, [X8+3632]
	026 Move X1, [X8]
	027 Move X8, [X0]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move [X19+128], X0
	030 Move X8, [X0]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Call 0x1C181E0
	033 Move [X19+128], X0
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 

Method: System.Void .cctor()

Disassembly:
	0x03CDF138 ADRP X0, 0x483000
	0x03CDF13C LDR X0, [X0 + 0x508]
	0x03CDF140 BL 0x1C16CF4
	0x03CDF144 ADRP X0, 0x414000
	0x03CDF148 LDR X0, [X0 + 0x598]
	0x03CDF14C BL 0x1C16CF4
	0x03CDF150 ADRP X0, 0x46A000
	0x03CDF154 LDR X0, [X0 + 0x6B8]
	0x03CDF158 BL 0x1C16CF4
	0x03CDF15C ADRP X0, 0x483000
	0x03CDF160 LDR X0, [X0 + 0x528]
	0x03CDF164 BL 0x1C16CF4
	0x03CDF168 ADRP X0, 0x483000
	0x03CDF16C LDR X0, [X0 + 0x530]
	0x03CDF170 BL 0x1C16CF4
	0x03CDF174 MOVZ W8, 0x1
	0x03CDF178 STRB W8, [X22 + 0x4BA]
	0x03CDF17C CBZ X20, 0x3CDF5F8
	0x03CDF180 ADRP X10, 0x46A000
	0x03CDF184 LDR X8, [X20]
	0x03CDF188 LDR X10, [X10 + 0x590]
	0x03CDF18C LDRH W9, [X8 + 0x12E]
	0x03CDF190 LDR X1, [X10]
	0x03CDF194 CBZ X9, 0x3CDF1B8
	0x03CDF198 LDR X10, [X8 + 0xB0]
	0x03CDF19C ADD X10, X10, 0x8
	0x03CDF1A0 LDUR X11, [X10 - 0x8]
	0x03CDF1A4 CMP X11, X1
	0x03CDF1A8 B.EQ 0x3CDF1C8
	0x03CDF1AC SUBS X9, X9, 0x1
	0x03CDF1B0 ADD X10, X10, 0x10
	0x03CDF1B4 B.NE 0x3CDF1A0
	0x03CDF1B8 MOV X0, X20
	0x03CDF1BC MOV W2, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x709000
	006 Move X20, 0x47B000
	007 Move X19, 0x47B000
	008 Move W8, [X21+1205]
	009 Move X20, [X20+280]
	010 Move X19, [X19+416]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x47B000
	016 Move X0, [X0+280]
	017 Call 0x1C17CF4
	018 Move X0, 0x47B000
	019 Move X0, [X0+416]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1205], W8
	023 Move X8, [X20]
	024 Move X8, [X8+184]
	025 Move [X8], X31
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move [X8+8], X31
	029 Move X0, [X19]
	030 Call 0x1C17F10
	031 Move X1, X31
	032 Move X19, X0
	033 Call VertexHelper..ctor, X0
	034 Move X8, [X20]
	035 Move X8, [X8+184]
	036 Move [X8+24], X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()

Disassembly:
	0x03CDF1C0 BL 0x1C5C788
	0x03CDF1C4 B 0x3CDF1D4

ISIL:
	001 Move X1, X31
	002 Call Component.get_transform, X0
	003 Return X0

