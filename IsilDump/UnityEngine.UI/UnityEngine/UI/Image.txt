Type: UnityEngine.UI.Image

Method: UnityEngine.Sprite get_sprite()

Disassembly:
	0x03CE0D0C STP S0, S1, [X31 + 0x10]
	0x03CE0D10 STP S2, S3, [X31 + 0x18]

ISIL:
	001 Move X0, [X0+216]
	002 Return X0

Method: System.Void set_sprite(UnityEngine.Sprite value)

Disassembly:
	0x03CD4398 BL 0x3C3E880
	0x03CD439C FMOV S0, -20
	0x03CD43A0 FMOV S1, W31
	0x03CD43A4 MOV X0, X24
	0x03CD43A8 MOV X1, X31
	0x03CD43AC BL 0x3C3E99C
	0x03CD43B0 CBZ X21, 0x3CD4578
	0x03CD43B4 LDR X1, [X29]
	0x03CD43B8 MOV X0, X21
	0x03CD43BC BL 0x21E52E4
	0x03CD43C0 CBZ X0, 0x3CD4578
	0x03CD43C4 LDR X1, [X19]
	0x03CD43C8 MOV X24, X0
	0x03CD43CC BL 0x3CD3398
	0x03CD43D0 MOVZ W1, 0x1
	0x03CD43D4 MOV X0, X24
	0x03CD43D8 BL 0x3CD364C
	0x03CD43DC LDR X8, [X27]
	0x03CD43E0 LDR X9, [X24]
	0x03CD43E4 MOV X0, X24
	0x03CD43E8 LDR X8, [X8 + 0xB8]
	0x03CD43EC LDR X10, [X9 + 0x2A8]
	0x03CD43F0 LDR X1, [X9 + 0x2B0]
	0x03CD43F4 LDP S0, S1, [X8 + 0x20]
	0x03CD43F8 LDP S2, S3, [X8 + 0x28]
	0x03CD43FC BLR X10
	0x03CD4400 LDR X1, [X28]
	0x03CD4404 MOV X0, X21
	0x03CD4408 BL 0x21E52E4
	0x03CD440C CBZ X0, 0x3CD4578
	0x03CD4410 FMOV S0, 10
	0x03CD4414 FMOV S1, W31
	0x03CD4418 MOV X1, X31
	0x03CD441C BL 0x3C3E99C
	0x03CD4420 CBZ X23, 0x3CD4578
	0x03CD4424 LDR X1, [X28]
	0x03CD4428 MOV X0, X23
	0x03CD442C BL 0x21E52E4
	0x03CD4430 CBZ X0, 0x3CD4578
	0x03CD4434 FMOV S0, -20
	0x03CD4438 FMOV S1, W31
	0x03CD443C MOV X1, X31
	0x03CD4440 MOV X23, X0
	0x03CD4444 BL 0x3C3E99C
	0x03CD4448 FMOV S0, W31
	0x03CD444C FMOV S1, W31
	0x03CD4450 MOV X0, X23
	0x03CD4454 MOV X1, X31
	0x03CD4458 BL 0x3C3E648
	0x03CD445C FMOV S0, 1
	0x03CD4460 FMOV S1, 1
	0x03CD4464 MOV X0, X23
	0x03CD4468 MOV X1, X31
	0x03CD446C BL 0x3C3E764
	0x03CD4470 CBZ X22, 0x3CD4578
	0x03CD4474 LDR X1, [X29]
	0x03CD4478 MOV X0, X22
	0x03CD447C BL 0x21E52E4
	0x03CD4480 CBZ X0, 0x3CD4578
	0x03CD4484 LDR X1, [X19 + 0x18]
	0x03CD4488 MOV X23, X0
	0x03CD448C BL 0x3CD3398
	0x03CD4490 LDR X8, [X27]
	0x03CD4494 LDR X9, [X23]
	0x03CD4498 MOV X0, X23
	0x03CD449C LDR X8, [X8 + 0xB8]
	0x03CD44A0 LDR X10, [X9 + 0x2A8]
	0x03CD44A4 LDR X1, [X9 + 0x2B0]
	0x03CD44A8 LDP S0, S1, [X8 + 0x20]
	0x03CD44AC LDP S2, S3, [X8 + 0x28]
	0x03CD44B0 BLR X10
	0x03CD44B4 LDR X1, [X28]
	0x03CD44B8 MOV X0, X22
	0x03CD44BC BL 0x21E52E4
	0x03CD44C0 CBZ X0, 0x3CD4578
	0x03CD44C4 FMOV S0, 20
	0x03CD44C8 FMOV S1, W31
	0x03CD44CC MOV X1, X31
	0x03CD44D0 BL 0x3C3E99C
	0x03CD44D4 CBZ X20, 0x3CD4578
	0x03CD44D8 ADRP X8, 0x487000
	0x03CD44DC LDR X8, [X8 + 0x360]
	0x03CD44E0 MOV X0, X20
	0x03CD44E4 LDR X1, [X8]
	0x03CD44E8 BL 0x21E52E4
	0x03CD44EC LDR X1, [X28]
	0x03CD44F0 MOV X19, X0
	0x03CD44F4 MOV X0, X21
	0x03CD44F8 BL 0x21E52E4
	0x03CD44FC CBZ X19, 0x3CD4578
	0x03CD4500 MOV X1, X0
	0x03CD4504 MOV X0, X19
	0x03CD4508 MOV X2, X31
	0x03CD450C BL 0x3E42518
	0x03CD4510 LDR X1, [X28]
	0x03CD4514 MOV X0, X22
	0x03CD4518 BL 0x21E52E4
	0x03CD451C MOV X1, X0
	0x03CD4520 MOV X0, X19
	0x03CD4524 MOV X2, X31
	0x03CD4528 BL 0x3E42B24
	0x03CD452C MOV X0, X19
	0x03CD4530 MOV X1, X23
	0x03CD4534 MOV X2, X31
	0x03CD4538 BL 0x3E40EB4
	0x03CD453C MOV X0, X19
	0x03CD4540 MOV W1, W31
	0x03CD4544 MOV X2, X31
	0x03CD4548 BL 0x3E42BA8
	0x03CD454C MOV X0, X19
	0x03CD4550 BL 0x3CD2F98
	0x03CD4554 MOV X0, X20
	0x03CD4558 LDP X20, X19, [X31 + 0x60]
	0x03CD455C LDP X22, X21, [X31 + 0x50]
	0x03CD4560 LDP X24, X23, [X31 + 0x40]
	0x03CD4564 LDP X26, X25, [X31 + 0x30]
	0x03CD4568 LDP X28, X27, [X31 + 0x20]
	0x03CD456C LDP X29, X30, [X31 + 0x10]
	0x03CD4570 LDP D9, D8, [X31], #0x70
	0x03CD4574 RET
	0x03CD4578 BL 0x1C16F20
	0x03CD457C BL 0x1C16F28
	0x03CD4580 BL 0x1C16F44
	0x03CD4584 MOV X1, X31
	0x03CD4588 BL 0x1C16DEC
	0x03CD458C STP D9, D8, [X31 - 0x50]!
	0x03CD4590 STP X30, X25, [X31 + 0x10]
	0x03CD4594 STP X24, X23, [X31 + 0x20]
	0x03CD4598 STP X22, X21, [X31 + 0x30]
	0x03CD459C STP X20, X19, [X31 + 0x40]
	0x03CD45A0 ADRP X20, 0x713000
	0x03CD45A4 ADRP X24, 0x48E000
	0x03CD45A8 LDRB W8, [X20 + 0x461]
	0x03CD45AC LDR X24, [X24 + 0x148]
	0x03CD45B0 MOV X19, X0
	0x03CD45B4 TBNZ X8, 0x0, 0x3CD4650
	0x03CD45B8 ADRP X0, 0x48E000
	0x03CD45BC LDR X0, [X0 + 0x148]
	0x03CD45C0 BL 0x1C16CF4
	0x03CD45C4 ADRP X0, 0x475000
	0x03CD45C8 LDR X0, [X0 + 0x6D8]
	0x03CD45CC BL 0x1C16CF4
	0x03CD45D0 ADRP X0, 0x47F000
	0x03CD45D4 LDR X0, [X0 + 0xB40]
	0x03CD45D8 BL 0x1C16CF4
	0x03CD45DC ADRP X0, 0x484000
	0x03CD45E0 LDR X0, [X0 + 0x990]
	0x03CD45E4 BL 0x1C16CF4
	0x03CD45E8 ADRP X0, 0x475000
	0x03CD45EC LDR X0, [X0 + 0x6E0]
	0x03CD45F0 BL 0x1C16CF4
	0x03CD45F4 ADRP X0, 0x485000
	0x03CD45F8 LDR X0, [X0 + 0xA48]
	0x03CD45FC BL 0x1C16CF4
	0x03CD4600 ADRP X0, 0x48E000
	0x03CD4604 LDR X0, [X0 + 0x1D8]
	0x03CD4608 BL 0x1C16CF4
	0x03CD460C ADRP X0, 0x427000
	0x03CD4610 LDR X0, [X0 + 0xC60]
	0x03CD4614 BL 0x1C16CF4
	0x03CD4618 ADRP X0, 0x41F000
	0x03CD461C LDR X0, [X0 + 0x6C0]
	0x03CD4620 BL 0x1C16CF4
	0x03CD4624 ADRP X0, 0x484000
	0x03CD4628 LDR X0, [X0 + 0x8F0]
	0x03CD462C BL 0x1C16CF4
	0x03CD4630 ADRP X0, 0x484000
	0x03CD4634 LDR X0, [X0 + 0x8F8]
	0x03CD4638 BL 0x1C16CF4
	0x03CD463C ADRP X0, 0x484000
	0x03CD4640 LDR X0, [X0 + 0x900]
	0x03CD4644 BL 0x1C16CF4
	0x03CD4648 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x714000
	011 Move X23, 0x420000
	012 Move W8, [X21+1224]
	013 Move X23, [X23+1432]
	014 Move X20, X1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x420000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1224], W8
	025 Move X0, [X23]
	026 Move X21, [X19+216]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X21
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {77}
	039 Move X0, [X23]
	040 Move X21, [X19+216]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X21
	046 Move X1, X20
	047 Move X2, X31
	048 Call Object.op_Inequality, X0, X1
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {203}
	053 Move X0, [X19+216]
	054 Compare X0, 0
	055 JumpIfEqual {213}
	056 Move X1, X31
	057 Call Sprite.get_rect, X0
	058 Move X0, [X23]
	059 Move [X31+8], S2
	060 Move V8, V3
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Move X0, X20
	066 Move X1, X31
	067 Call Object.op_Implicit, X0
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {134}
	072 Compare X20, 0
	073 JumpIfEqual {213}
	074 Move X0, X20
	075 Move X1, X31
	076 Call Sprite.get_rect, X0
	077 Move X0, [X23]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move X0, X20
	083 Move X1, X31
	084 Move X2, X31
	085 Call Object.op_Inequality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {203}
	090 Compare X20, 0
	091 JumpIfEqual {213}
	092 Move X0, X20
	093 Move X1, X31
	094 Call Sprite.get_rect, X0
	095 Move X21, 0x706000
	096 Move W8, [X21+1935]
	097 Move V8, V2
	098 Move V9, V3
	099 Compare W8, 0
	100 JumpIfNotEqual {106}
	101 Move X0, 0x428000
	102 Move X0, [X0+3848]
	103 Call 0x1C17CF4
	104 Move W8, 1
	105 Move [X21+1935], W8
	106 Move X8, 0x428000
	107 Move X8, [X8+3848]
	108 Move X0, X20
	109 Move X1, X31
	110 Move X8, [X8]
	111 Move X8, [X8+184]
	112 Move S0, [X8]
	113 Move S1, [X8+4]
	114 Move X8, -52338688
	115 Move V2, [X8+3872]
	116 Subtract S0, S8, S0
	117 Subtract S1, S9, S1
	118 Multiply S0, S0, S0
	119 Multiply S1, S1, S1
	120 Add S0, S0, S1
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 NotImplemented "Instruction CSET not yet implemented."
	123 Move [X19+56], W8
	124 Call Sprite.get_texture, X0
	125 Move X8, [X23]
	126 Move X21, X0
	127 Move W9, [X8+224]
	128 Compare W9, 0
	129 JumpIfNotEqual {132}
	130 Move X0, X8
	131 Call 0x1C17DFC
	132 Move X0, X21
	133 Move X1, X31
	134 Move X21, 0x706000
	135 Move W8, [X21+1935]
	136 Compare W8, 0
	137 JumpIfNotEqual {143}
	138 Move X0, 0x428000
	139 Move X0, [X0+3848]
	140 Call 0x1C17CF4
	141 Move W8, 1
	142 Move [X21+1935], W8
	143 Move X8, 0x428000
	144 Move X8, [X8+3848]
	145 Move X8, [X8]
	146 Move X8, [X8+184]
	147 Move S2, [X8]
	148 Move S3, [X8+4]
	149 Move V0, [X31+8]
	150 Move X0, [X19+216]
	151 NotImplemented "Instruction FCMP not yet implemented."
	152 NotImplemented "Instruction CSET not yet implemented."
	153 NotImplemented "Instruction FCMP not yet implemented."
	154 NotImplemented "Instruction CSET not yet implemented."
	155 And W8, W8, W9
	156 Move [X19+56], W8
	157 Compare X0, 0
	158 JumpIfEqual {213}
	159 Move X1, X31
	160 Call Sprite.get_texture, X0
	161 Move X8, [X23]
	162 Move X21, X0
	163 Move W9, [X8+224]
	164 Compare W9, 0
	165 JumpIfNotEqual {168}
	166 Move X0, X8
	167 Call 0x1C17DFC
	168 Move X0, X20
	169 Move X1, X31
	170 Call Object.op_Implicit, X0
	171 Move X22, X31
	172 Move TEMP, X0
	173 And TEMP, TEMP, 1
	174 Compare TEMP, 1
	175 JumpIfNotEqual {182}
	176 Compare X20, 0
	177 JumpIfEqual {213}
	178 Move X0, X20
	179 Move X1, X31
	180 Call Sprite.get_texture, X0
	181 Move X22, X0
	182 Move X0, [X23]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X0, X21
	188 Move X1, X22
	189 Move X2, X31
	190 Call Object.op_Equality, X0, X1
	191 And W8, W0, 1
	192 Move X0, X19
	193 Move [X19+57], W8
	194 Move [X19+216], X20
	195 Call Image.<set_sprite>g__ResetAlphaHitThresholdIfNeeded|11_0, X0
	196 Move X8, [X19]
	197 Move X0, X19
	198 Move X9, [X8+728]
	199 Move X1, [X8+736]
	200 NotImplemented "Instruction BLR not yet implemented."
	201 Move X0, X19
	202 Call Image.TrackSprite, X0
	203 Move X20, [X31+64]
	204 Move X19, [X31+72]
	205 Move X22, [X31+48]
	206 Move X21, [X31+56]
	207 Move X30, [X31+32]
	208 Move X23, [X31+40]
	209 Move D9, [X31+16]
	210 Move D8, [X31+24]
	211 Add X31, X31, 80
	212 Return 
	213 Call 0x1C17F20

Method: System.Void DisableSpriteOptimizations()

Disassembly:
	0x03CE0E90 ADD X1, X31, 0x10
	0x03CE0E94 MOV X0, X19

ISIL:
	001 NotImplemented "Instruction STRH not yet implemented."
	002 Return 

Method: UnityEngine.Sprite get_overrideSprite()

Disassembly:
	0x03CE0E98 MOV V0.16B, V12.16B

ISIL:
No ISIL was generated
Method: System.Void set_overrideSprite(UnityEngine.Sprite value)

Disassembly:
	0x03CE0F14 STP D11, D10, [X31 - 0x40]!
	0x03CE0F18 STP D9, D8, [X31 + 0x10]
	0x03CE0F1C STP X30, X21, [X31 + 0x20]
	0x03CE0F20 STP X20, X19, [X31 + 0x30]
	0x03CE0F24 ADRP X21, 0x707000
	0x03CE0F28 ADRP X20, 0x413000
	0x03CE0F2C LDRB W8, [X21 + 0x4DA]
	0x03CE0F30 LDR X20, [X20 + 0x598]
	0x03CE0F34 MOV X19, X0
	0x03CE0F38 TBNZ X8, 0x0, 0x3CE0F50
	0x03CE0F3C ADRP X0, 0x413000
	0x03CE0F40 LDR X0, [X0 + 0x598]
	0x03CE0F44 BL 0x1C16CF4
	0x03CE0F48 MOVZ W8, 0x1
	0x03CE0F4C STRB W8, [X21 + 0x4DA]
	0x03CE0F50 MOV X0, X19
	0x03CE0F54 BL 0x3CDFE9C
	0x03CE0F58 LDR X8, [X20]
	0x03CE0F5C MOV X20, X0
	0x03CE0F60 LDR W9, [X8 + 0xE0]
	0x03CE0F64 CBNZ W9, 0x3CE0F70
	0x03CE0F68 MOV X0, X8
	0x03CE0F6C BL 0x1C16DFC
	0x03CE0F70 MOV X0, X20
	0x03CE0F74 MOV X1, X31
	0x03CE0F78 MOV X2, X31
	0x03CE0F7C BL 0x3C354F8
	0x03CE0F80 TBZ X0, 0x0, 0x3CE103C
	0x03CE0F84 MOV X0, X19
	0x03CE0F88 BL 0x3CDFE9C
	0x03CE0F8C CBZ X0, 0x3CE1050
	0x03CE0F90 MOV X1, X31
	0x03CE0F94 BL 0x3C41858
	0x03CE0F98 MOV X0, X19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x708000
	007 Move X21, 0x483000
	008 Move W8, [X22+1225]
	009 Move X21, [X21+1416]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x483000
	017 Move X0, [X0+1416]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1225], W8
	021 Move X2, [X21]
	022 Add X0, X19, 224
	023 Move X1, X20
	024 Call 0x2255190, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {42}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X9, [X8+728]
	032 Move X1, [X8+736]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Call Image.TrackSprite, X0
	041 Return 
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X30, [X31+48]
	047 Return 

Method: UnityEngine.Sprite get_activeSprite()

Disassembly:
	0x03CE0E9C MOV V1.16B, V9.16B
	0x03CE0EA0 BL 0x3CE0AD0
	0x03CE0EA4 LDP S13, S14, [X31 + 0x10]
	0x03CE0EA8 LDP S8, S15, [X31 + 0x18]
	0x03CE0EAC LDP S0, S1, [X31]
	0x03CE0EB0 LDP S2, S3, [X31 + 0x8]
	0x03CE0EB4 LDP X20, X19, [X31 + 0x80]
	0x03CE0EB8 LDP X22, X21, [X31 + 0x70]
	0x03CE0EBC FSUB S0, S11, S0
	0x03CE0EC0 FSUB S1, S10, S1
	0x03CE0EC4 FDIV S2, S2, S11
	0x03CE0EC8 FDIV S3, S3, S10
	0x03CE0ECC FDIV S4, S0, S11
	0x03CE0ED0 FDIV S5, S1, S10
	0x03CE0ED4 FMUL S0, S3, S8
	0x03CE0ED8 FMUL S1, S2, S15
	0x03CE0EDC FMUL S2, S5, S8
	0x03CE0EE0 FMUL S3, S4, S15
	0x03CE0EE4 FADD S0, S13, S0
	0x03CE0EE8 FADD S1, S14, S1
	0x03CE0EEC FADD S2, S13, S2
	0x03CE0EF0 FADD S3, S14, S3
	0x03CE0EF4 LDR X30, [X31 + 0x60]
	0x03CE0EF8 LDP D9, D8, [X31 + 0x50]
	0x03CE0EFC LDP D11, D10, [X31 + 0x40]
	0x03CE0F00 LDP D13, D12, [X31 + 0x30]
	0x03CE0F04 LDP D15, D14, [X31 + 0x20]
	0x03CE0F08 ADD X31, X31, 0x90
	0x03CE0F0C RET
	0x03CE0F10 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x708000
	006 Move X20, 0x414000
	007 Move W8, [X21+1226]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x414000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1226], W8
	019 Move X0, [X20]
	020 Move X20, [X19+224]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 And W31, W0, 1
	030 Move W8, 216
	031 Move W9, 224
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 Move X0, [X19]
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0

Method: UnityEngine.UI.Image/Type get_type()

Disassembly:
	0x03CE0F9C MOV V8.16B, V2.16B
	0x03CE0FA0 BL 0x3CE083C

ISIL:
	001 Move W0, [X0+232]
	002 Return X0

Method: System.Void set_type(UnityEngine.UI.Image/Type value)

Disassembly:
	0x03CD464C STRB W8, [X20 + 0x461]
	0x03CD4650 LDR X0, [X24]
	0x03CD4654 ADRP X23, 0x427000
	0x03CD4658 ADRP X25, 0x475000
	0x03CD465C ADRP X20, 0x41F000
	0x03CD4660 LDR W8, [X0 + 0xE0]
	0x03CD4664 LDR X23, [X23 + 0xC60]
	0x03CD4668 LDR X25, [X25 + 0x6E0]
	0x03CD466C LDR X20, [X20 + 0x6C0]
	0x03CD4670 CBNZ W8, 0x3CD467C
	0x03CD4674 BL 0x1C16DFC
	0x03CD4678 LDR X0, [X24]
	0x03CD467C LDR X8, [X0 + 0xB8]
	0x03CD4680 LDR X0, [X23]
	0x03CD4684 MOVZ W1, 0x2
	0x03CD4688 LDP S8, S9, [X8 + 0x10]
	0x03CD468C BL 0x1C16D6C
	0x03CD4690 LDR X8, [X20]
	0x03CD4694 LDR X21, [X25]
	0x03CD4698 MOV X20, X0
	0x03CD469C LDR W9, [X8 + 0xE0]
	0x03CD46A0 CBNZ W9, 0x3CD46AC
	0x03CD46A4 MOV X0, X8
	0x03CD46A8 BL 0x1C16DFC
	0x03CD46AC MOV X0, X21
	0x03CD46B0 MOV X1, X31
	0x03CD46B4 BL 0x338C698
	0x03CD46B8 CBZ X20, 0x3CD49F4
	0x03CD46BC MOV X21, X0
	0x03CD46C0 CBZ X0, 0x3CD46D8
	0x03CD46C4 LDR X8, [X20]
	0x03CD46C8 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x714000
	007 Move X21, 0x48F000
	008 Move W8, [X22+1227]
	009 Move X21, [X21+352]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x48F000
	017 Move X0, [X0+352]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1227], W8
	021 Move X2, [X21]
	022 Add X0, X19, 232
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {39}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, [X8+760]
	036 Move X1, [X8+768]
	037 Move X30, [X31+48]
	038 CallNoReturn X2
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Boolean get_preserveAspect()

Disassembly:
	0x03CE0FA4 MOV X0, X19
	0x03CE0FA8 MOV V9.16B, V0.16B

ISIL:
	001 Move W0, [X0+236]
	002 Return X0

Method: System.Void set_preserveAspect(System.Boolean value)

Disassembly:
	0x03CE0FAC BL 0x3CDFE9C
	0x03CE0FB0 CBZ X0, 0x3CE1050
	0x03CE0FB4 MOV X1, X31
	0x03CE0FB8 BL 0x3C41858
	0x03CE0FBC MOV X0, X19
	0x03CE0FC0 MOV V10.16B, V3.16B
	0x03CE0FC4 BL 0x3CE083C
	0x03CE0FC8 MOV X0, X19
	0x03CE0FCC MOV V11.16B, V0.16B
	0x03CE0FD0 BL 0x3CDB488
	0x03CE0FD4 MOV X20, X0
	0x03CE0FD8 MOV X0, X19
	0x03CE0FDC BL 0x3CDB488
	0x03CE0FE0 CBZ X0, 0x3CE1050
	0x03CE0FE4 MOV X1, X31
	0x03CE0FE8 BL 0x3C3E5B8
	0x03CE0FEC CBZ X20, 0x3CE1050
	0x03CE0FF0 MOV X0, X20
	0x03CE0FF4 MOV X1, X31
	0x03CE0FF8 BL 0x3C3E764
	0x03CE0FFC MOV X0, X19
	0x03CE1000 BL 0x3CDB488
	0x03CE1004 CBZ X0, 0x3CE1050
	0x03CE1008 FDIV S0, S8, S9
	0x03CE100C FDIV S1, S10, S11
	0x03CE1010 MOV X1, X31
	0x03CE1014 BL 0x3C3E99C
	0x03CE1018 LDR X8, [X19]
	0x03CE101C MOV X0, X19
	0x03CE1020 LDP X20, X19, [X31 + 0x30]
	0x03CE1024 LDP X30, X21, [X31 + 0x20]
	0x03CE1028 LDR X2, [X8 + 0x2D8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x708000
	007 Move X21, 0x483000
	008 Move W8, [X22+1228]
	009 Move X21, [X21+1424]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x483000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1228], W8
	021 Move X2, [X21]
	022 Add X0, X19, 236
	023 And W1, W20, 1
	024 Call 0x22551E0, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {39}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, [X8+760]
	036 Move X1, [X8+768]
	037 Move X30, [X31+48]
	038 CallNoReturn X2
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Boolean get_fillCenter()

Disassembly:
	0x03CE102C LDR X1, [X8 + 0x2E0]
	0x03CE1030 LDP D9, D8, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+237]
	002 Return X0

Method: System.Void set_fillCenter(System.Boolean value)

Disassembly:
	0x03CE1034 LDP D11, D10, [X31], #0x40
	0x03CE1038 BR X2
	0x03CE103C LDP X20, X19, [X31 + 0x30]
	0x03CE1040 LDP X30, X21, [X31 + 0x20]
	0x03CE1044 LDP D9, D8, [X31 + 0x10]
	0x03CE1048 LDP D11, D10, [X31], #0x40
	0x03CE104C RET
	0x03CE1050 BL 0x1C16F20
	0x03CE1054 STR X30, [X31 - 0x30]!
	0x03CE1058 STP X22, X21, [X31 + 0x10]
	0x03CE105C STP X20, X19, [X31 + 0x20]
	0x03CE1060 ADRP X22, 0x706000
	0x03CE1064 ADRP X21, 0x412000
	0x03CE1068 LDRB W8, [X22 + 0x4DB]
	0x03CE106C LDR X21, [X21 + 0x598]
	0x03CE1070 MOV X19, X1
	0x03CE1074 MOV X20, X0
	0x03CE1078 TBNZ X8, 0x0, 0x3CE1090
	0x03CE107C ADRP X0, 0x412000
	0x03CE1080 LDR X0, [X0 + 0x598]
	0x03CE1084 BL 0x1C16CF4
	0x03CE1088 MOVZ W8, 0x1
	0x03CE108C STRB W8, [X22 + 0x4DB]
	0x03CE1090 MOV X0, X20
	0x03CE1094 BL 0x3CDFE9C
	0x03CE1098 LDR X8, [X21]
	0x03CE109C MOV X21, X0
	0x03CE10A0 LDR W9, [X8 + 0xE0]
	0x03CE10A4 CBNZ W9, 0x3CE10B0
	0x03CE10A8 MOV X0, X8
	0x03CE10AC BL 0x1C16DFC
	0x03CE10B0 MOV X0, X21

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x707000
	007 Move X21, 0x482000
	008 Move W8, [X22+1229]
	009 Move X21, [X21+1424]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x482000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1229], W8
	021 Move X2, [X21]
	022 Add X0, X19, 237
	023 And W1, W20, 1
	024 Call 0x22551E0, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {39}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, [X8+760]
	036 Move X1, [X8+768]
	037 Move X30, [X31+48]
	038 CallNoReturn X2
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: UnityEngine.UI.Image/FillMethod get_fillMethod()

Disassembly:
	0x03CE10B4 MOV X1, X31
	0x03CE10B8 MOV X2, X31

ISIL:
	001 Move W0, [X0+240]
	002 Return X0

Method: System.Void set_fillMethod(UnityEngine.UI.Image/FillMethod value)

Disassembly:
	0x03CE10BC BL 0x3C3883C
	0x03CE10C0 TBZ X0, 0x0, 0x3CE10DC
	0x03CE10C4 MOV X0, X20
	0x03CE10C8 MOV X1, X19
	0x03CE10CC LDP X20, X19, [X31 + 0x20]
	0x03CE10D0 LDP X22, X21, [X31 + 0x10]
	0x03CE10D4 LDR X30, [X31], #0x30
	0x03CE10D8 B 0x3CDD278
	0x03CE10DC LDR W8, [X20 + 0xE8]
	0x03CE10E0 CMP W8, 0x3
	0x03CE10E4 B.HI 0x3CE112C
	0x03CE10E8 ADRP X9, 0xFFFFFFFFFCEB6000
	0x03CE10EC ADD X9, X9, 0xF26
	0x03CE10F0 ADR X10, 0x10
	0x03CE10F4 LDRB W11, [X9, X8, LSL]
	0x03CE10F8 ADD X10, X10, X11, 0x2, LSL
	0x03CE10FC BR X10
	0x03CE1100 LDRB W8, [X20 + 0xEC]
	0x03CE1104 LDRB W9, [X20 + 0x105]
	0x03CE1108 MOV X0, X20
	0x03CE110C MOV X1, X19
	0x03CE1110 CMP W8, 0x0
	0x03CE1114 CSET W2, NE
	0x03CE1118 CBZ W9, 0x3CE1188
	0x03CE111C LDP X20, X19, [X31 + 0x20]
	0x03CE1120 LDP X22, X21, [X31 + 0x10]
	0x03CE1124 LDR X30, [X31], #0x30
	0x03CE1128 B 0x3CE145C
	0x03CE112C LDP X20, X19, [X31 + 0x20]
	0x03CE1130 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x707000
	007 Move X21, 0x482000
	008 Move W8, [X22+1230]
	009 Move X21, [X21+1432]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x482000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1230], W8
	021 Move X2, [X21]
	022 Add X0, X19, 240
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {35}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X9, [X8+760]
	032 Move X1, [X8+768]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move [X19+252], W31
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: System.Single get_fillAmount()

Disassembly:
	0x03CE1134 LDR X30, [X31], #0x30
	0x03CE1138 RET

ISIL:
	001 Move V0, [X0+244]
	002 Return V0

Method: System.Void set_fillAmount(System.Single value)

Disassembly:
	0x03CE113C MOV X0, X20
	0x03CE1140 MOV X1, X19
	0x03CE1144 LDP X20, X19, [X31 + 0x20]
	0x03CE1148 LDP X22, X21, [X31 + 0x10]
	0x03CE114C LDR X30, [X31], #0x30
	0x03CE1150 B 0x3CE173C
	0x03CE1154 MOV X0, X20
	0x03CE1158 MOV X1, X19
	0x03CE115C LDP X20, X19, [X31 + 0x20]
	0x03CE1160 LDP X22, X21, [X31 + 0x10]
	0x03CE1164 LDR X30, [X31], #0x30
	0x03CE1168 B 0x3CE1C64
	0x03CE116C LDRB W2, [X20 + 0xEC]
	0x03CE1170 MOV X0, X20
	0x03CE1174 MOV X1, X19
	0x03CE1178 LDP X20, X19, [X31 + 0x20]
	0x03CE117C LDP X22, X21, [X31 + 0x10]
	0x03CE1180 LDR X30, [X31], #0x30
	0x03CE1184 B 0x3CE29BC
	0x03CE1188 LDP X20, X19, [X31 + 0x20]
	0x03CE118C LDP X22, X21, [X31 + 0x10]
	0x03CE1190 LDR X30, [X31], #0x30
	0x03CE1194 B 0x3CE1198
	0x03CE1198 SUB X31, X31, 0x90
	0x03CE119C STP D15, D14, [X31 + 0x20]
	0x03CE11A0 STP D13, D12, [X31 + 0x30]
	0x03CE11A4 STP D11, D10, [X31 + 0x40]
	0x03CE11A8 STP D9, D8, [X31 + 0x50]
	0x03CE11AC STP X30, X23, [X31 + 0x60]
	0x03CE11B0 STP X22, X21, [X31 + 0x70]
	0x03CE11B4 STP X20, X19, [X31 + 0x80]
	0x03CE11B8 ADRP X23, 0x706000
	0x03CE11BC ADRP X22, 0x412000
	0x03CE11C0 LDRB W8, [X23 + 0x4E0]
	0x03CE11C4 LDR X22, [X22 + 0x598]
	0x03CE11C8 MOV W21, W2

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x707000
	007 Move X20, 0x482000
	008 Move W8, [X21+1231]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x482000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1231], W8
	021 Move X1, [X20]
	022 Move S0, 1
	023 NotImplemented "Instruction FMIN not yet implemented."
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 Move S1, W31
	026 Add X0, X19, 244
	027 NotImplemented "Instruction FCSEL not yet implemented."
	028 Call SetPropertyUtility.SetStruct, X0, V0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {43}
	033 Move X8, [X19]
	034 Move X0, X19
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move X2, [X8+760]
	040 Move X1, [X8+768]
	041 Move V8, [X31+48]
	042 CallNoReturn X2
	043 Move X20, [X31+32]
	044 Move X19, [X31+40]
	045 Move X30, [X31+16]
	046 Move X21, [X31+24]
	047 Move V8, [X31+48]
	048 Return 

Method: System.Boolean get_fillClockwise()

Disassembly:
	0x03CE11CC MOV X19, X1
	0x03CE11D0 MOV X20, X0

ISIL:
	001 Move W0, [X0+248]
	002 Return X0

Method: System.Void set_fillClockwise(System.Boolean value)

Disassembly:
	0x03CE11D4 TBNZ X8, 0x0, 0x3CE11EC
	0x03CE11D8 ADRP X0, 0x412000
	0x03CE11DC LDR X0, [X0 + 0x598]
	0x03CE11E0 BL 0x1C16CF4
	0x03CE11E4 MOVZ W8, 0x1
	0x03CE11E8 STRB W8, [X23 + 0x4E0]
	0x03CE11EC AND W1, W21, 0x1
	0x03CE11F0 MOV X0, X20
	0x03CE11F4 BL 0x3CE0B64
	0x03CE11F8 MOV X0, X20
	0x03CE11FC MOV V13.16B, V0.16B
	0x03CE1200 MOV V8.16B, V1.16B
	0x03CE1204 MOV V9.16B, V2.16B
	0x03CE1208 MOV V10.16B, V3.16B
	0x03CE120C BL 0x3CDFE9C
	0x03CE1210 LDR X8, [X22]
	0x03CE1214 MOV X21, X0
	0x03CE1218 LDR W9, [X8 + 0xE0]
	0x03CE121C CBNZ W9, 0x3CE1228
	0x03CE1220 MOV X0, X8
	0x03CE1224 BL 0x1C16DFC
	0x03CE1228 MOV X0, X21
	0x03CE122C MOV X1, X31
	0x03CE1230 MOV X2, X31
	0x03CE1234 BL 0x3C354F8
	0x03CE1238 STP S10, S9, [X31 + 0x18]
	0x03CE123C TBZ X0, 0x0, 0x3CE1264
	0x03CE1240 MOV X0, X20
	0x03CE1244 MOV V12.16B, V8.16B
	0x03CE1248 BL 0x3CDFE9C
	0x03CE124C MOV X1, X31
	0x03CE1250 BL 0x3C425C4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x707000
	007 Move X21, 0x482000
	008 Move W8, [X22+1232]
	009 Move X21, [X21+1424]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x482000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1232], W8
	021 Move X2, [X21]
	022 Add X0, X19, 248
	023 And W1, W20, 1
	024 Call 0x22551E0, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {39}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, [X8+760]
	036 Move X1, [X8+768]
	037 Move X30, [X31+48]
	038 CallNoReturn X2
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Int32 get_fillOrigin()

Disassembly:
	0x03CE1254 MOV V15.16B, V0.16B
	0x03CE1258 STP S2, S1, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+252]
	002 Return X0

Method: System.Void set_fillOrigin(System.Int32 value)

Disassembly:
	0x03CE125C STR S3, [X31 + 0xC]
	0x03CE1260 B 0x3CE12AC
	0x03CE1264 ADRP X21, 0x6F7000
	0x03CE1268 LDRB W8, [X21 + 0xE5A]
	0x03CE126C CBNZ W8, 0x3CE1284
	0x03CE1270 ADRP X0, 0x419000
	0x03CE1274 LDR X0, [X0 + 0x9A0]
	0x03CE1278 BL 0x1C16CF4
	0x03CE127C MOVZ W8, 0x1
	0x03CE1280 STRB W8, [X21 + 0xE5A]
	0x03CE1284 ADRP X8, 0x419000
	0x03CE1288 LDR X8, [X8 + 0x9A0]
	0x03CE128C MOV V12.16B, V8.16B
	0x03CE1290 LDR X8, [X8]
	0x03CE1294 LDR X8, [X8 + 0xB8]
	0x03CE1298 LDP S15, S1, [X8]
	0x03CE129C LDR V0, [X8 + 0x8]
	0x03CE12A0 STP S0, S1, [X31 + 0x10]
	0x03CE12A4 LDR V0, [X8 + 0xC]
	0x03CE12A8 STR S0, [X31 + 0xC]
	0x03CE12AC LDR X8, [X20]
	0x03CE12B0 MOV X0, X20
	0x03CE12B4 LDR X9, [X8 + 0x298]
	0x03CE12B8 LDR X1, [X8 + 0x2A0]
	0x03CE12BC BLR X9
	0x03CE12C0 CBZ X19, 0x3CE1458
	0x03CE12C4 MOV X0, X19
	0x03CE12C8 MOV X1, X31
	0x03CE12CC MOV V8.16B, V0.16B
	0x03CE12D0 MOV V9.16B, V1.16B
	0x03CE12D4 MOV V10.16B, V2.16B
	0x03CE12D8 MOV V11.16B, V3.16B

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x707000
	007 Move X21, 0x482000
	008 Move W8, [X22+1233]
	009 Move X21, [X21+1448]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x482000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1233], W8
	021 Move X2, [X21]
	022 Add X0, X19, 252
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {39}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, [X8+760]
	036 Move X1, [X8+768]
	037 Move X30, [X31+48]
	038 CallNoReturn X2
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Single get_eventAlphaThreshold()

Disassembly:
	0x03CE12DC BL 0x3E39938
	0x03CE12E0 MOV V0.16B, V8.16B
	0x03CE12E4 MOV V1.16B, V9.16B
	0x03CE12E8 MOV V2.16B, V10.16B

ISIL:
	001 Move V0, [X0+256]
	002 Move S1, 1
	003 Subtract S0, S1, S0
	004 Return V0

Method: System.Void set_eventAlphaThreshold(System.Single value)

Disassembly:
	0x03CE12EC MOV V3.16B, V11.16B
	0x03CE12F0 MOV X0, X31
	0x03CE12F4 BL 0x1E43664

ISIL:
	001 Move S1, 1
	002 Subtract S0, S1, S0

Method: System.Single get_alphaHitTestMinimumThreshold()

Disassembly:
	0x03CE1438 LDP D13, D12, [X31 + 0x30]
	0x03CE143C LDP D15, D14, [X31 + 0x20]

ISIL:
	001 Move V0, [X0+256]
	002 Return V0

Method: System.Void set_alphaHitTestMinimumThreshold(System.Single value)

Disassembly:
	0x03CE12F8 LDR V14, [X31 + 0x14]
	0x03CE12FC AND X1, X0, 0x0
	0x03CE1300 FMOV S2, W31
	0x03CE1304 FMOV S5, W31
	0x03CE1308 FMOV S6, W31
	0x03CE130C MOV X0, X19
	0x03CE1310 MOV V0.16B, V13.16B
	0x03CE1314 MOV V1.16B, V12.16B
	0x03CE1318 MOV V3.16B, V15.16B
	0x03CE131C MOV V4.16B, V14.16B
	0x03CE1320 MOV X2, X31
	0x03CE1324 STR S12, [X31 + 0x8]
	0x03CE1328 BL 0x3E39A54
	0x03CE132C MOV V0.16B, V8.16B
	0x03CE1330 MOV V1.16B, V9.16B
	0x03CE1334 MOV V2.16B, V10.16B
	0x03CE1338 MOV V3.16B, V11.16B
	0x03CE133C MOV X0, X31
	0x03CE1340 BL 0x1E43664
	0x03CE1344 MOV V0.16B, V13.16B
	0x03CE1348 LDR V13, [X31 + 0x18]
	0x03CE134C LDR V12, [X31 + 0xC]
	0x03CE1350 AND X1, X0, 0x0
	0x03CE1354 FMOV S2, W31
	0x03CE1358 FMOV S5, W31
	0x03CE135C FMOV S6, W31
	0x03CE1360 MOV X0, X19
	0x03CE1364 MOV V1.16B, V13.16B
	0x03CE1368 MOV V3.16B, V15.16B
	0x03CE136C MOV V4.16B, V12.16B
	0x03CE1370 MOV X2, X31
	0x03CE1374 BL 0x3E39A54
	0x03CE1378 MOV V0.16B, V8.16B
	0x03CE137C MOV V1.16B, V9.16B
	0x03CE1380 MOV V2.16B, V10.16B
	0x03CE1384 MOV V3.16B, V11.16B
	0x03CE1388 MOV X0, X31
	0x03CE138C BL 0x1E43664
	0x03CE1390 LDR V15, [X31 + 0x1C]
	0x03CE1394 MOV V1.16B, V13.16B
	0x03CE1398 LDR V13, [X31 + 0x10]
	0x03CE139C AND X1, X0, 0x0
	0x03CE13A0 FMOV S2, W31
	0x03CE13A4 FMOV S5, W31
	0x03CE13A8 FMOV S6, W31
	0x03CE13AC MOV X0, X19
	0x03CE13B0 MOV V0.16B, V15.16B
	0x03CE13B4 MOV V3.16B, V13.16B
	0x03CE13B8 MOV V4.16B, V12.16B
	0x03CE13BC MOV X2, X31
	0x03CE13C0 BL 0x3E39A54
	0x03CE13C4 MOV V0.16B, V8.16B
	0x03CE13C8 MOV V1.16B, V9.16B
	0x03CE13CC MOV V2.16B, V10.16B
	0x03CE13D0 MOV V3.16B, V11.16B
	0x03CE13D4 MOV X0, X31
	0x03CE13D8 BL 0x1E43664
	0x03CE13DC LDR V1, [X31 + 0x8]
	0x03CE13E0 AND X1, X0, 0x0
	0x03CE13E4 FMOV S2, W31
	0x03CE13E8 FMOV S5, W31
	0x03CE13EC FMOV S6, W31
	0x03CE13F0 MOV X0, X19
	0x03CE13F4 MOV V0.16B, V15.16B
	0x03CE13F8 MOV V3.16B, V13.16B
	0x03CE13FC MOV V4.16B, V14.16B
	0x03CE1400 MOV X2, X31
	0x03CE1404 BL 0x3E39A54
	0x03CE1408 MOVZ W2, 0x1
	0x03CE140C MOVZ W3, 0x2
	0x03CE1410 MOV X0, X19
	0x03CE1414 MOV W1, W31
	0x03CE1418 MOV X4, X31
	0x03CE141C BL 0x3E39B84
	0x03CE1420 MOV X0, X19
	0x03CE1424 LDP X20, X19, [X31 + 0x80]
	0x03CE1428 LDP X22, X21, [X31 + 0x70]
	0x03CE142C LDP X30, X23, [X31 + 0x60]
	0x03CE1430 LDP D9, D8, [X31 + 0x50]
	0x03CE1434 LDP D11, D10, [X31 + 0x40]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x707000
	007 Move X20, 0x413000
	008 Move W8, [X21+1234]
	009 Move X20, [X20+1432]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x473000
	017 Move X0, [X0+144]
	018 Call 0x1C17CF4
	019 Move X0, 0x413000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1234], W8
	024 Move X0, [X20]
	025 Move X20, [X19+216]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {78}
	038 Move X0, [X19+216]
	039 Compare X0, 0
	040 JumpIfEqual {85}
	041 Move X1, X31
	042 Call Sprite.get_texture, X0
	043 Compare X0, 0
	044 JumpIfEqual {85}
	045 Move X1, X31
	046 Call Texture2D.get_format, X0
	047 Move X8, 0x473000
	048 Move X8, [X8+144]
	049 Move W20, W0
	050 Move X8, [X8]
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Move W0, W20
	057 Move X1, X31
	058 Call GraphicsFormatUtility.IsCrunchFormat, X0
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfEqual {86}
	063 Move X0, [X19+216]
	064 Compare X0, 0
	065 JumpIfEqual {85}
	066 Move X1, X31
	067 Call Sprite.get_texture, X0
	068 Compare X0, 0
	069 JumpIfEqual {85}
	070 Move X8, [X0]
	071 Move X9, [X8+488]
	072 Move X1, [X8+496]
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {86}
	078 Move [X19+256], S8
	079 Move X20, [X31+32]
	080 Move X19, [X31+40]
	081 Move X30, [X31+16]
	082 Move X21, [X31+24]
	083 Move V8, [X31+48]
	084 Return 
	085 Call 0x1C17F20
	086 Move X0, 0x413000
	087 Move X0, [X0+1456]
	088 Call 0x1C17D08
	089 Call 0x1C17F10
	090 Move X19, X0
	091 Move X0, 0x482000
	092 Move X0, [X0+1456]
	093 Call 0x1C17D08
	094 Move X1, X0
	095 Move X0, X19
	096 Move X2, X31
	097 Call InvalidOperationException..ctor, X0, X1
	098 Move X0, 0x482000
	099 Move X0, [X0+1464]
	100 Call 0x1C17D08
	101 Move X1, X0
	102 Move X0, X19
	103 Call 0x1C17DEC

Method: System.Boolean get_useSpriteMesh()

Disassembly:
	0x03CE1440 MOVZ W1, 0x2
	0x03CE1444 MOVZ W2, 0x3

ISIL:
	001 Move W0, [X0+261]
	002 Return X0

Method: System.Void set_useSpriteMesh(System.Boolean value)

Disassembly:
	0x03CE1448 MOV W3, W31
	0x03CE144C MOV X4, X31
	0x03CE1450 ADD X31, X31, 0x90
	0x03CE1454 B 0x3E39B84
	0x03CE1458 BL 0x1C16F20
	0x03CE145C SUB X31, X31, 0x120
	0x03CE1460 STR D14, [X31 + 0xA0]
	0x03CE1464 STP D13, D12, [X31 + 0xA8]
	0x03CE1468 STP D11, D10, [X31 + 0xB8]
	0x03CE146C STP D9, D8, [X31 + 0xC8]
	0x03CE1470 STR X29, [X31 + 0xD8]
	0x03CE1474 STP X30, X25, [X31 + 0xE0]
	0x03CE1478 STP X24, X23, [X31 + 0xF0]
	0x03CE147C STP X22, X21, [X31 + 0x100]
	0x03CE1480 STP X20, X19, [X31 + 0x110]
	0x03CE1484 MOV W21, W2
	0x03CE1488 MOV X19, X1
	0x03CE148C MOV X20, X0
	0x03CE1490 BL 0x3CDFE9C
	0x03CE1494 CBZ X0, 0x3CE1738
	0x03CE1498 MOV X1, X31
	0x03CE149C BL 0x3C41858
	0x03CE14A0 MOV X0, X20
	0x03CE14A4 STR D2, [X31 + 0x50]
	0x03CE14A8 BL 0x3CDFE9C
	0x03CE14AC CBZ X0, 0x3CE1738
	0x03CE14B0 MOV X1, X31
	0x03CE14B4 BL 0x3C41858
	0x03CE14B8 MOV X0, X20
	0x03CE14BC STR D3, [X31 + 0x40]
	0x03CE14C0 BL 0x3CDFE9C
	0x03CE14C4 CBZ X0, 0x3CE1738

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x707000
	007 Move X21, 0x482000
	008 Move W8, [X22+1235]
	009 Move X21, [X21+1424]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x482000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1235], W8
	021 Move X2, [X21]
	022 Add X0, X19, 261
	023 And W1, W20, 1
	024 Call 0x22551E0, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {39}
	029 Move X8, [X19]
	030 Move X0, X19
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X2, [X8+760]
	036 Move X1, [X8+768]
	037 Move X30, [X31+48]
	038 CallNoReturn X2
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: System.Void .ctor()

Disassembly:
	0x03CE14C8 MOV X1, X31
	0x03CE14CC BL 0x3C41A44
	0x03CE14D0 MOV X0, X20
	0x03CE14D4 STR D0, [X31 + 0x30]
	0x03CE14D8 STR D1, [X31 + 0x20]
	0x03CE14DC BL 0x3CDB488
	0x03CE14E0 CBZ X0, 0x3CE1738
	0x03CE14E4 MOV X1, X31
	0x03CE14E8 BL 0x3C3EA28
	0x03CE14EC MOV X0, X20
	0x03CE14F0 STR D0, [X31 + 0x10]
	0x03CE14F4 STR D1, [X31]
	0x03CE14F8 BL 0x3CDD3D4
	0x03CE14FC STP S0, S1, [X31 + 0x90]
	0x03CE1500 LDP V1, V0, [X31 + 0x40]
	0x03CE1504 STP S2, S3, [X31 + 0x98]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X9, -52371456
	004 Move V0, [X9+1000]
	005 Move X9, 4
	006 Move W8, 1
	007 NotImplemented "Instruction MOVK not yet implemented."
	008 Move X1, X31
	009 Move X19, X0
	010 Move [X0+237], W8
	011 Move [X0+240], X9
	012 Move [X0+248], W8
	013 Move [X0+264], D0
	014 Call MaskableGraphic..ctor, X0
	015 Move [X19+160], W31
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Return 

Method: UnityEngine.Material get_defaultETC1GraphicMaterial()

Disassembly:
	0x03CE1508 MOV V2.S[1], V3.S[0]
	0x03CE150C STR V2, [X31 + 0x6]
	0x03CE1510 FMUL S0, S0, S0
	0x03CE1514 FMUL S1, S1, S1
	0x03CE1518 FADD S0, S0, S1
	0x03CE151C FCMP S0, 0x0
	0x03CE1520 B.LE 0x3CE1540
	0x03CE1524 TBZ X21, 0x0, 0x3CE1540
	0x03CE1528 ADD X1, X31, 0x90
	0x03CE152C MOV X0, X20
	0x03CE1530 LDP V1, V0, [X31 + 0x40]
	0x03CE1534 BL 0x3CE0AD0
	0x03CE1538 LDR V0, [X31 + 0x98]
	0x03CE153C STR V0, [X31 + 0x6]
	0x03CE1540 MOV X0, X20
	0x03CE1544 BL 0x3CDFE9C
	0x03CE1548 CBZ X0, 0x3CE1738
	0x03CE154C ADD X8, X31, 0x78
	0x03CE1550 MOV X1, X31
	0x03CE1554 BL 0x3C417AC
	0x03CE1558 LDR X8, [X20]
	0x03CE155C LDUR V12, [X31 + 0x84]
	0x03CE1560 MOV X0, X20
	0x03CE1564 LDR X9, [X8 + 0x298]
	0x03CE1568 LDR X1, [X8 + 0x2A0]
	0x03CE156C BLR X9
	0x03CE1570 CBZ X19, 0x3CE1738
	0x03CE1574 MOV X0, X19
	0x03CE1578 MOV X1, X31
	0x03CE157C MOV V8.16B, V0.16B
	0x03CE1580 MOV V9.16B, V1.16B
	0x03CE1584 MOV V10.16B, V2.16B
	0x03CE1588 MOV V11.16B, V3.16B
	0x03CE158C BL 0x3E39938
	0x03CE1590 MOV X0, X20
	0x03CE1594 BL 0x3CDFE9C
	0x03CE1598 CBZ X0, 0x3CE1738
	0x03CE159C MOV X1, X31
	0x03CE15A0 BL 0x3C41B58
	0x03CE15A4 MOV X21, X0
	0x03CE15A8 MOV X0, X20
	0x03CE15AC BL 0x3CDFE9C
	0x03CE15B0 CBZ X0, 0x3CE1738
	0x03CE15B4 MOV X1, X31
	0x03CE15B8 BL 0x3C41BD0
	0x03CE15BC CBZ X21, 0x3CE1738
	0x03CE15C0 LDR X8, [X21 + 0x18]
	0x03CE15C4 CMP W8, 0x1
	0x03CE15C8 B.LT 0x3CE1688
	0x03CE15CC LDP V0, V1, [X31 + 0x20]
	0x03CE15D0 MOV X22, X0
	0x03CE15D4 MOV X23, X31
	0x03CE15D8 FADD V12.2S, V12.2S, V12.2S
	0x03CE15DC MOV V1.S[1], V0.S[0]
	0x03CE15E0 LDP V2, V0, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x707000
	005 Move X20, 0x482000
	006 Move W8, [X19+1236]
	007 Move X20, [X20+1408]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x482000
	013 Move X0, [X0+1408]
	014 Call 0x1C17CF4
	015 Move X0, 0x413000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+1236], W8
	020 Move X0, [X20]
	021 Move X19, 0x413000
	022 Move W8, [X0+224]
	023 Move X19, [X19+1432]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X19]
	029 Move X9, [X0+184]
	030 Move W10, [X8+224]
	031 Move X19, [X9]
	032 Compare W10, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {56}
	044 Move X0, X31
	045 Call Canvas.GetETC1SupportedCanvasMaterial
	046 Move X8, [X20]
	047 Move X19, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {54}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X8, [X20]
	054 Move X8, [X8+184]
	055 Move [X8], X19
	056 Move X0, [X20]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {62}
	060 Call 0x1C17DFC
	061 Move X0, [X20]
	062 Move X8, [X0+184]
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X0, [X8]
	066 Move X30, [X31+32]
	067 Return X0

Method: UnityEngine.Texture get_mainTexture()

Disassembly:
	0x03CE15E4 AND X8, X8, 0x0
	0x03CE15E8 ADD X24, X0, 0x24
	0x03CE15EC ADD X25, X21, 0x20
	0x03CE15F0 MOV V0.S[1], V2.S[0]
	0x03CE15F4 LDP V3, V2, [X31]
	0x00000000 INVALID
	0x03CE15FC LDR V1, [X31 + 0x6]
	0x03CE1600 MOV V2.S[1], V3.S[0]
	0x03CE1604 FSUB V0.2S, V2.2S, V0.2S
	0x00000000 INVALID
	0x03CE160C CMP X23, W8, UXTW
	0x03CE1610 B.CS 0x3CE1734
	0x03CE1614 LDR V14, [X25, X23, LSL #3]
	0x03CE1618 MOV V0.16B, V8.16B
	0x03CE161C MOV V1.16B, V9.16B
	0x03CE1620 MOV V2.16B, V10.16B
	0x03CE1624 MOV V3.16B, V11.16B
	0x03CE1628 MOV X0, X31
	0x03CE162C BL 0x1E43664
	0x03CE1630 CBZ X22, 0x3CE1738
	0x03CE1634 LDR W8, [X22 + 0x18]
	0x03CE1638 CMP X23, X8
	0x03CE163C B.CS 0x3CE1734
	0x03CE1640 LDR V1, [X31 + 0x6]
	0x00000000 INVALID
	0x03CE1648 LDP S3, S4, [X24 - 0x4]
	0x03CE164C AND X1, X0, 0x0
	0x00000000 INVALID
	0x03CE1654 FSUB V0.2S, V0.2S, V13.2S
	0x03CE1658 MOV S1, V0.S[1]
	0x03CE165C FMOV S2, W31
	0x03CE1660 FMOV S5, W31
	0x03CE1664 FMOV S6, W31
	0x03CE1668 MOV X0, X19
	0x03CE166C MOV X2, X31
	0x03CE1670 BL 0x3E39A54
	0x03CE1674 LDR W8, [X21 + 0x18]
	0x03CE1678 ADD X23, X23, 0x1
	0x03CE167C ADD X24, X24, 0x8
	0x03CE1680 CMP X23, W8, SXTW
	0x03CE1684 B.LT 0x3CE160C
	0x03CE1688 MOV X0, X20
	0x03CE168C BL 0x3CDFE9C
	0x03CE1690 CBZ X0, 0x3CE1738
	0x03CE1694 MOV X1, X31
	0x03CE1698 BL 0x3C41B94
	0x03CE169C CBZ X0, 0x3CE1738
	0x03CE16A0 LDR W8, [X0 + 0x18]
	0x03CE16A4 MOV X20, X0
	0x03CE16A8 CMP W8, 0x1
	0x03CE16AC B.LT 0x3CE1708
	0x03CE16B0 MOV W9, W31
	0x03CE16B4 CMP W9, W8
	0x03CE16B8 B.CS 0x3CE1734
	0x03CE16BC ADD W10, W9, 0x1
	0x03CE16C0 CMP W10, W8
	0x03CE16C4 B.CS 0x3CE1734
	0x03CE16C8 ADD W21, W10, 0x1
	0x03CE16CC CMP W21, W8
	0x03CE16D0 B.CS 0x3CE1734
	0x03CE16D4 ADD X8, X20, W9, 0x1, SXTW
	0x03CE16D8 ADD W9, W9, 0x2
	0x03CE16DC ADD X11, X20, 0x20
	0x03CE16E0 LDRH W1, [X8 + 0x20]
	0x03CE16E4 LDRH W2, [X11, W10, SXTW]
	0x03CE16E8 LDRH W3, [X11, W9, SXTW]
	0x03CE16EC MOV X0, X19
	0x03CE16F0 MOV X4, X31
	0x03CE16F4 BL 0x3E39B84
	0x03CE16F8 LDR W8, [X20 + 0x18]
	0x03CE16FC ADD W9, W21, 0x1
	0x03CE1700 CMP W9, W8
	0x03CE1704 B.LT 0x3CE16B4
	0x03CE1708 LDP X20, X19, [X31 + 0x110]
	0x03CE170C LDP X22, X21, [X31 + 0x100]
	0x03CE1710 LDP X24, X23, [X31 + 0xF0]
	0x03CE1714 LDP X30, X25, [X31 + 0xE0]
	0x03CE1718 LDR X29, [X31 + 0xD8]
	0x03CE171C LDP D9, D8, [X31 + 0xC8]
	0x03CE1720 LDP D11, D10, [X31 + 0xB8]
	0x03CE1724 LDP D13, D12, [X31 + 0xA8]
	0x03CE1728 LDR V14, [X31 + 0xA0]
	0x03CE172C ADD X31, X31, 0x120
	0x03CE1730 RET
	0x03CE1734 BL 0x1C16F28
	0x03CE1738 BL 0x1C16F20
	0x03CE173C SUB X31, X31, 0xD0
	0x03CE1740 STP D15, D14, [X31 + 0x50]
	0x03CE1744 STP D13, D12, [X31 + 0x60]
	0x03CE1748 STP D11, D10, [X31 + 0x70]
	0x03CE174C STP D9, D8, [X31 + 0x80]
	0x03CE1750 STP X30, X25, [X31 + 0x90]
	0x03CE1754 STP X24, X23, [X31 + 0xA0]
	0x03CE1758 STP X22, X21, [X31 + 0xB0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x707000
	006 Move X21, 0x413000
	007 Move W8, [X20+1237]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x479000
	015 Move X0, [X0+280]
	016 Call 0x1C17CF4
	017 Move X0, 0x413000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1237], W8
	022 Move X0, X19
	023 Call Image.get_activeSprite, X0
	024 Move X8, [X21]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {97}
	039 Move X8, [X19]
	040 Move X0, X19
	041 Move X9, [X8+824]
	042 Move X1, [X8+832]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X8, [X21]
	045 Move X20, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Inequality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {108}
	059 Move X8, [X19]
	060 Move X0, X19
	061 Move X9, [X8+824]
	062 Move X1, [X8+832]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Compare X0, 0
	065 JumpIfEqual {123}
	066 Move X1, X31
	067 Call Material.get_mainTexture, X0
	068 Move X8, [X21]
	069 Move X20, X0
	070 Move W9, [X8+224]
	071 Compare W9, 0
	072 JumpIfNotEqual {75}
	073 Move X0, X8
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Move X1, X31
	077 Move X2, X31
	078 Call Object.op_Inequality, X0, X1
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfNotEqual {108}
	083 Move X8, [X19]
	084 Move X0, X19
	085 Move X9, [X8+824]
	086 Move X1, [X8+832]
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Compare X0, 0
	089 JumpIfEqual {123}
	090 Move X20, [X31+16]
	091 Move X19, [X31+24]
	092 Move X1, X31
	093 Move X30, [X31+32]
	094 Move X21, [X31+40]
	095 Call Material.get_mainTexture, X0
	096 Return X0
	097 Move X0, X19
	098 Call Image.get_activeSprite, X0
	099 Compare X0, 0
	100 JumpIfEqual {123}
	101 Move X20, [X31+16]
	102 Move X19, [X31+24]
	103 Move X1, X31
	104 Move X30, [X31+32]
	105 Move X21, [X31+40]
	106 Call Sprite.get_texture, X0
	107 Return X0
	108 Move X19, 0x479000
	109 Move X19, [X19+280]
	110 Move X0, [X19]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {116}
	114 Call 0x1C17DFC
	115 Move X0, [X19]
	116 Move X8, [X0+184]
	117 Move X20, [X31+16]
	118 Move X19, [X31+24]
	119 Move X0, [X8+8]
	120 Move X30, [X31+32]
	121 Move X21, [X31+40]
	122 Return X0
	123 Call 0x1C17F20

Method: System.Boolean get_hasBorder()

Disassembly:
	0x03CE175C STP X20, X19, [X31 + 0xC0]
	0x03CE1760 ADRP X21, 0x706000
	0x03CE1764 LDRB W8, [X21 + 0x4E1]
	0x03CE1768 MOV X19, X1
	0x03CE176C MOV X20, X0
	0x03CE1770 TBNZ X8, 0x0, 0x3CE1794
	0x03CE1774 ADRP X0, 0x481000
	0x03CE1778 LDR X0, [X0 + 0x580]
	0x03CE177C BL 0x1C16CF4
	0x03CE1780 ADRP X0, 0x412000
	0x03CE1784 LDR X0, [X0 + 0x598]
	0x03CE1788 BL 0x1C16CF4
	0x03CE178C MOVZ W8, 0x1
	0x03CE1790 STRB W8, [X21 + 0x4E1]
	0x03CE1794 MOV X0, X20
	0x03CE1798 BL 0x3CE075C
	0x03CE179C TBZ X0, 0x0, 0x3CE185C
	0x03CE17A0 MOV X0, X20
	0x03CE17A4 BL 0x3CDFE9C
	0x03CE17A8 ADRP X8, 0x412000
	0x03CE17AC LDR X8, [X8 + 0x598]
	0x03CE17B0 MOV X21, X0
	0x03CE17B4 LDR X8, [X8]
	0x03CE17B8 LDR W9, [X8 + 0xE0]
	0x03CE17BC CBNZ W9, 0x3CE17C8
	0x03CE17C0 MOV X0, X8
	0x03CE17C4 BL 0x1C16DFC
	0x03CE17C8 MOV X0, X21
	0x03CE17CC MOV X1, X31
	0x03CE17D0 MOV X2, X31
	0x03CE17D4 BL 0x3C354F8
	0x03CE17D8 TBZ X0, 0x0, 0x3CE1890
	0x03CE17DC MOV X0, X20
	0x03CE17E0 BL 0x3CDFE9C
	0x03CE17E4 MOV X1, X31
	0x03CE17E8 BL 0x3C425C4
	0x03CE17EC MOV X0, X20
	0x03CE17F0 STP S1, S0, [X31 + 0x18]
	0x03CE17F4 STP S3, S2, [X31]
	0x03CE17F8 BL 0x3CDFE9C
	0x03CE17FC MOV X1, X31
	0x03CE1800 BL 0x3C425B4
	0x03CE1804 MOV X0, X20
	0x03CE1808 STP S1, S0, [X31 + 0x10]
	0x03CE180C STP S3, S2, [X31 + 0x8]
	0x03CE1810 BL 0x3CDFE9C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x707000
	006 Move X20, 0x413000
	007 Move W8, [X21+1238]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x413000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1238], W8
	019 Move X0, X19
	020 Call Image.get_activeSprite, X0
	021 Move X8, [X20]
	022 Move X20, X0
	023 Move W9, [X8+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {28}
	026 Move X0, X8
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {51}
	036 Move X0, X19
	037 Call Image.get_activeSprite, X0
	038 Compare X0, 0
	039 JumpIfEqual {57}
	040 Move X1, X31
	041 Call Sprite.get_border, X0
	042 Multiply S0, S0, S0
	043 Multiply S1, S1, S1
	044 Multiply S2, S2, S2
	045 Add S0, S0, S1
	046 Add S0, S2, S0
	047 Multiply S1, S3, S3
	048 Add S0, S1, S0
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Move W0, W31
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0
	057 Call 0x1C17F20

Method: System.Single get_pixelsPerUnitMultiplier()

Disassembly:
	0x03CE1814 MOV X1, X31
	0x03CE1818 BL 0x3C425D4

ISIL:
	001 Move V0, [X0+264]
	002 Return V0

Method: System.Void set_pixelsPerUnitMultiplier(System.Single value)

Disassembly:
	0x03CE181C MOV X0, X20
	0x03CE1820 MOV V10.16B, V0.16B
	0x03CE1824 MOV V11.16B, V1.16B
	0x03CE1828 MOV V8.16B, V2.16B
	0x03CE182C MOV V9.16B, V3.16B
	0x03CE1830 BL 0x3CDFE9C
	0x03CE1834 CBZ X0, 0x3CE1C60
	0x03CE1838 MOV X1, X31

ISIL:
	001 Move X8, -52387840
	002 Move V1, [X8+816]
	003 Move X8, [X0]
	004 NotImplemented "Instruction FMAX not yet implemented."
	005 Move [X0+264], S0
	006 Move X2, [X8+760]
	007 Move X1, [X8+768]
	008 CallNoReturn X2

Method: System.Single get_pixelsPerUnit()

Disassembly:
	0x03CE183C STP S11, S10, [X31 + 0x28]
	0x03CE1840 STP S9, S8, [X31 + 0x20]
	0x03CE1844 BL 0x3C418F4
	0x03CE1848 MOV V8.16B, V0.16B
	0x03CE184C MOV V9.16B, V1.16B
	0x03CE1850 MOV V14.16B, V2.16B
	0x03CE1854 MOV V15.16B, V3.16B
	0x03CE1858 B 0x3CE18E0
	0x03CE185C MOV X0, X20
	0x03CE1860 MOV X1, X19
	0x03CE1864 LDP X20, X19, [X31 + 0xC0]
	0x03CE1868 LDP X22, X21, [X31 + 0xB0]
	0x03CE186C LDP X24, X23, [X31 + 0xA0]
	0x03CE1870 LDP X30, X25, [X31 + 0x90]
	0x03CE1874 LDP D9, D8, [X31 + 0x80]
	0x03CE1878 LDP D11, D10, [X31 + 0x70]
	0x03CE187C LDP D13, D12, [X31 + 0x60]
	0x03CE1880 LDP D15, D14, [X31 + 0x50]
	0x03CE1884 MOV W2, W31
	0x03CE1888 ADD X31, X31, 0xD0
	0x03CE188C B 0x3CE1198
	0x03CE1890 ADRP X21, 0x6F7000
	0x03CE1894 LDRB W8, [X21 + 0xE5A]
	0x03CE1898 CBNZ W8, 0x3CE18B0
	0x03CE189C ADRP X0, 0x419000
	0x03CE18A0 LDR X0, [X0 + 0x9A0]
	0x03CE18A4 BL 0x1C16CF4
	0x03CE18A8 MOVZ W8, 0x1
	0x03CE18AC STRB W8, [X21 + 0xE5A]
	0x03CE18B0 ADRP X8, 0x419000
	0x03CE18B4 LDR X8, [X8 + 0x9A0]
	0x03CE18B8 LDR X8, [X8]
	0x03CE18BC LDR X8, [X8 + 0xB8]
	0x03CE18C0 LDP S8, S9, [X8]
	0x03CE18C4 LDP S14, S15, [X8 + 0x8]
	0x03CE18C8 STP S9, S8, [X31 + 0x28]
	0x03CE18CC STP S15, S14, [X31 + 0x20]
	0x03CE18D0 STP S9, S8, [X31 + 0x10]
	0x03CE18D4 STP S15, S14, [X31 + 0x8]
	0x03CE18D8 STP S9, S8, [X31 + 0x18]
	0x03CE18DC STP S15, S14, [X31]
	0x03CE18E0 MOV X0, X20
	0x03CE18E4 BL 0x3CDD3D4
	0x03CE18E8 MOV X0, X20
	0x03CE18EC STR D0, [X31 + 0x40]
	0x03CE18F0 STR D1, [X31 + 0x30]
	0x03CE18F4 MOV V13.16B, V2.16B
	0x03CE18F8 MOV V12.16B, V3.16B
	0x03CE18FC BL 0x3CE083C
	0x03CE1900 LDR V1, [X20 + 0x108]
	0x03CE1904 MOV X0, X20
	0x03CE1908 LDP V5, V4, [X31 + 0x30]
	0x03CE190C MOV V6.16B, V13.16B
	0x03CE1910 FMUL S3, S0, S1
	0x03CE1914 FDIV S0, S8, S3
	0x03CE1918 FDIV S1, S9, S3
	0x03CE191C FDIV S2, S14, S3
	0x03CE1920 FDIV S3, S15, S3
	0x03CE1924 MOV V7.16B, V12.16B
	0x03CE1928 BL 0x3CE3708
	0x03CE192C MOV X0, X20

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x707000
	007 Move X21, 0x413000
	008 Move W8, [X20+1239]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x413000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1239], W8
	020 Move X0, X19
	021 Call Image.get_activeSprite, X0
	022 Move X8, [X21]
	023 Move X20, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Call Object.op_Implicit, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {43}
	036 Move X0, X19
	037 Call Image.get_activeSprite, X0
	038 Compare X0, 0
	039 JumpIfEqual {76}
	040 Move X1, X31
	041 Call Sprite.get_pixelsPerUnit, X0
	042 Move V8, V0
	043 Move W8, 0x42C80000
	044 Move S8, W8
	045 Move X0, X19
	046 Call Graphic.get_canvas, X0
	047 Move X8, [X21]
	048 Move X20, X0
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfNotEqual {54}
	052 Move X0, X8
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Call Object.op_Implicit, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {68}
	061 Move X0, X19
	062 Call Graphic.get_canvas, X0
	063 Compare X0, 0
	064 JumpIfEqual {76}
	065 Move X1, X31
	066 Call Canvas.get_referencePixelsPerUnit, X0
	067 Move [X19+268], S0
	068 Move V0, [X19+268]
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move X21, [X31+24]
	073 NotImplemented "Instruction FDIV not yet implemented."
	074 Move V8, [X31+48]
	075 Return V0
	076 Call 0x1C17F20

Method: System.Single get_multipliedPixelsPerUnit()

Disassembly:
	0x03CE1930 MOV V8.16B, V0.16B
	0x03CE1934 MOV V9.16B, V1.16B
	0x03CE1938 MOV V15.16B, V2.16B
	0x03CE193C MOV V14.16B, V3.16B
	0x03CE1940 BL 0x3CE083C
	0x03CE1944 ADRP X21, 0x481000
	0x03CE1948 LDR X21, [X21 + 0x580]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Image.get_pixelsPerUnit, X0
	005 Move V1, [X19+264]
	006 Multiply S0, S0, S1
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return V0

Method: UnityEngine.Material get_material()

Disassembly:
	0x03CE194C LDR V11, [X20 + 0x108]
	0x03CE1950 MOV V10.16B, V0.16B
	0x03CE1954 LDR X0, [X21]
	0x03CE1958 LDR W8, [X0 + 0xE0]
	0x03CE195C CBNZ W8, 0x3CE1968
	0x03CE1960 BL 0x1C16DFC
	0x03CE1964 LDR X0, [X21]
	0x03CE1968 LDR X8, [X0 + 0xB8]
	0x03CE196C LDR X8, [X8 + 0x8]
	0x03CE1970 CBZ X8, 0x3CE1C60
	0x03CE1974 LDR W9, [X8 + 0x18]
	0x03CE1978 CBZ W9, 0x3CE1C5C
	0x03CE197C LDP S2, S1, [X31 + 0x28]
	0x03CE1980 FMUL S0, S10, S11
	0x03CE1984 FDIV S1, S1, S0
	0x03CE1988 FDIV S2, S2, S0
	0x03CE198C STP S1, S2, [X8 + 0x20]
	0x03CE1990 LDR X8, [X21]
	0x03CE1994 LDR X8, [X8 + 0xB8]
	0x03CE1998 LDR X8, [X8 + 0x8]
	0x03CE199C CBZ X8, 0x3CE1C60
	0x03CE19A0 LDR W9, [X8 + 0x18]
	0x03CE19A4 CMP W9, 0x3
	0x03CE19A8 B.LS 0x3CE1C5C
	0x03CE19AC LDP S2, S1, [X31 + 0x20]
	0x03CE19B0 FDIV S1, S1, S0
	0x03CE19B4 FDIV S0, S2, S0
	0x03CE19B8 FSUB S1, S13, S1
	0x03CE19BC FSUB S0, S12, S0
	0x03CE19C0 STP S1, S0, [X8 + 0x38]
	0x03CE19C4 LDR X0, [X21]
	0x03CE19C8 LDR X8, [X0 + 0xB8]
	0x03CE19CC LDR X8, [X8 + 0x8]
	0x03CE19D0 CBZ X8, 0x3CE1C60
	0x03CE19D4 LDR W9, [X8 + 0x18]
	0x03CE19D8 CMP W9, 0x1
	0x03CE19DC B.LS 0x3CE1C5C
	0x03CE19E0 CMP W9, 0x2
	0x03CE19E4 STP S8, S9, [X8 + 0x28]
	0x03CE19E8 B.EQ 0x3CE1C5C
	0x03CE19EC FSUB S0, S13, S15
	0x03CE19F0 FSUB S1, S12, S14
	0x03CE19F4 STP S0, S1, [X8 + 0x30]
	0x03CE19F8 LDP V0, V1, [X31 + 0x30]
	0x03CE19FC MOV X22, X31
	0x03CE1A00 MOV V1.S[1], V0.S[0]
	0x03CE1A04 STR V1, [X31 + 0x4]
	0x03CE1A08 LDR W8, [X0 + 0xE0]
	0x03CE1A0C CBNZ W8, 0x3CE1A1C
	0x03CE1A10 BL 0x1C16DFC
	0x03CE1A14 LDR V1, [X31 + 0x4]
	0x03CE1A18 LDR X0, [X21]
	0x03CE1A1C LDR X8, [X0 + 0xB8]
	0x03CE1A20 CMP X22, 0x4
	0x03CE1A24 B.EQ 0x3CE1A54
	0x03CE1A28 LDR X8, [X8 + 0x8]
	0x03CE1A2C CBZ X8, 0x3CE1C60
	0x03CE1A30 LDR W9, [X8 + 0x18]
	0x03CE1A34 CMP X22, X9
	0x03CE1A38 B.CS 0x3CE1C5C
	0x03CE1A3C ADD X8, X8, X22, 0x3, LSL
	0x03CE1A40 LDR V0, [X8 + 0x20]
	0x03CE1A44 ADD X22, X22, 0x1
	0x03CE1A48 FADD V0.2S, V1.2S, V0.2S
	0x03CE1A4C STR D0, [X8 + 0x20]
	0x03CE1A50 B 0x3CE1A08
	0x03CE1A54 LDR X8, [X8 + 0x10]
	0x03CE1A58 CBZ X8, 0x3CE1C60
	0x03CE1A5C LDR W9, [X8 + 0x18]
	0x03CE1A60 CBZ W9, 0x3CE1C5C
	0x03CE1A64 LDR V1, [X31 + 0x1C]
	0x03CE1A68 LDR V0, [X31 + 0x18]
	0x03CE1A6C STP S1, S0, [X8 + 0x20]
	0x03CE1A70 LDR X8, [X21]
	0x03CE1A74 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x707000
	006 Move X21, 0x413000
	007 Move W8, [X20+1240]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x482000
	015 Move X0, [X0+1408]
	016 Call 0x1C17CF4
	017 Move X0, 0x413000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1240], W8
	022 Move X0, [X21]
	023 Move X20, [X19+32]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X0, [X19+32]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Move X0, X19
	043 Call Image.get_activeSprite, X0
	044 Move X8, [X21]
	045 Move X20, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Call Object.op_Implicit, X0
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {92}
	058 Move X0, X19
	059 Call Image.get_activeSprite, X0
	060 Compare X0, 0
	061 JumpIfEqual {101}
	062 Move X1, X31
	063 Call Sprite.get_associatedAlphaSplitTexture, X0
	064 Move X8, [X21]
	065 Move X20, X0
	066 Move W9, [X8+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X8
	070 Call 0x1C17DFC
	071 Move X0, X20
	072 Move X1, X31
	073 Move X2, X31
	074 Call Object.op_Inequality, X0, X1
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfNotEqual {92}
	079 Move X8, 0x482000
	080 Move X8, [X8+1408]
	081 Move X0, [X8]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Call Image.get_defaultETC1GraphicMaterial
	091 Return X0
	092 Move X8, [X19]
	093 Move X0, X19
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X2, [X8+808]
	097 Move X1, [X8+816]
	098 Move X30, [X31+32]
	099 Move X21, [X31+40]
	100 CallNoReturn X2
	101 Call 0x1C17F20

Method: System.Void set_material(UnityEngine.Material value)

Disassembly:
	0x03CE1A78 LDR X8, [X8 + 0x10]

ISIL:
	001 Call Graphic.set_material, X0, X1
	002 Return 

Method: System.Void OnBeforeSerialize()

Disassembly:
	0x03CE1A7C CBZ X8, 0x3CE1C60

ISIL:
	001 Return 

Method: System.Void OnAfterDeserialize()

Disassembly:
	0x03CE1A80 LDR W9, [X8 + 0x18]
	0x03CE1A84 CMP W9, 0x1
	0x03CE1A88 B.LS 0x3CE1C5C
	0x03CE1A8C LDR V1, [X31 + 0x14]
	0x03CE1A90 LDR V0, [X31 + 0x10]
	0x03CE1A94 STP S1, S0, [X8 + 0x28]
	0x03CE1A98 LDR X8, [X21]
	0x03CE1A9C LDR X8, [X8 + 0xB8]
	0x03CE1AA0 LDR X8, [X8 + 0x10]
	0x03CE1AA4 CBZ X8, 0x3CE1C60
	0x03CE1AA8 LDR W9, [X8 + 0x18]
	0x03CE1AAC CMP W9, 0x2
	0x03CE1AB0 B.LS 0x3CE1C5C
	0x03CE1AB4 LDR V1, [X31 + 0xC]
	0x03CE1AB8 LDR V0, [X31 + 0x8]
	0x03CE1ABC STP S1, S0, [X8 + 0x30]
	0x03CE1AC0 LDR X8, [X21]
	0x03CE1AC4 LDR X8, [X8 + 0xB8]
	0x03CE1AC8 LDR X8, [X8 + 0x10]
	0x03CE1ACC CBZ X8, 0x3CE1C60

ISIL:
	001 Move W8, [X0+252]
	002 Move TEMP, X8
	003 And TEMP, TEMP, -2147483648
	004 Compare TEMP, -2147483648
	005 JumpIfEqual {11}
	006 Move W9, [X0+240]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Compare W9, 0
	009 JumpIfNotEqual {20}
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move [X0+252], W31
	012 Move V0, [X0+244]
	013 Move S1, 1
	014 NotImplemented "Instruction FMIN not yet implemented."
	015 NotImplemented "Instruction FCMP not yet implemented."
	016 Move S0, W31
	017 NotImplemented "Instruction FCSEL not yet implemented."
	018 Move [X0+244], S0
	019 Return 
	020 NotImplemented "Instruction CMP not yet implemented."

Method: System.Void PreserveSpriteAspectRatio(ref UnityEngine.Rect rect, UnityEngine.Vector2 spriteSize)

Disassembly:
	0x03CE1AD0 LDR W9, [X8 + 0x18]
	0x03CE1AD4 CMP W9, 0x3
	0x03CE1AD8 B.LS 0x3CE1C5C
	0x03CE1ADC LDR V1, [X31 + 0x4]
	0x03CE1AE0 LDR V0, [X31]
	0x03CE1AE4 STP S1, S0, [X8 + 0x38]
	0x03CE1AE8 CBZ X19, 0x3CE1C60
	0x03CE1AEC MOV X0, X19
	0x03CE1AF0 MOV X1, X31
	0x03CE1AF4 BL 0x3E39938
	0x03CE1AF8 MOV X22, X31
	0x03CE1AFC MOV X24, X31
	0x03CE1B00 ADD X23, X22, 0x1
	0x03CE1B04 CMP X24, 0x1
	0x03CE1B08 B.NE 0x3CE1B24
	0x03CE1B0C CMP X22, 0x1
	0x03CE1B10 B.NE 0x3CE1B24
	0x03CE1B14 LDRB W8, [X20 + 0xED]
	0x03CE1B18 CBNZ W8, 0x3CE1B24
	0x03CE1B1C MOVZ W24, 0x2
	0x03CE1B20 B 0x3CE1C20
	0x03CE1B24 LDR X0, [X21]
	0x03CE1B28 LDR W8, [X0 + 0xE0]
	0x03CE1B2C CBNZ W8, 0x3CE1B38
	0x03CE1B30 BL 0x1C16DFC
	0x03CE1B34 LDR X0, [X21]
	0x03CE1B38 LDR X8, [X0 + 0xB8]
	0x03CE1B3C LDR X8, [X8 + 0x8]
	0x03CE1B40 CBZ X8, 0x3CE1C60
	0x03CE1B44 LDR W9, [X8 + 0x18]
	0x03CE1B48 CMP X22, X9
	0x03CE1B4C B.CS 0x3CE1C5C
	0x03CE1B50 CMP X24, X9
	0x03CE1B54 B.CS 0x3CE1C5C
	0x03CE1B58 CMP X23, X9
	0x03CE1B5C B.CS 0x3CE1C5C
	0x03CE1B60 ADD X25, X24, 0x1

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move S9, [X1+8]
	007 Move S10, [X1+12]
	008 NotImplemented "Instruction FDIV not yet implemented."
	009 Move X19, X1
	010 NotImplemented "Instruction FDIV not yet implemented."
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Add X19, X19, 4
	013 Move V8, [X19]
	014 Move S1, 1
	015 NotImplemented "Instruction FDIV not yet implemented."
	016 Multiply S9, S0, S9
	017 Move [X19+8], S9
	018 Call Graphic.get_rectTransform, X0
	019 Compare X0, 0
	020 JumpIfEqual {43}
	021 Move X1, X31
	022 Call RectTransform.get_pivot, X0
	023 Move V0, V1
	024 Subtract S1, S10, S9
	025 Move V8, [X19]
	026 Multiply S10, S0, S10
	027 Move [X19+8], S10
	028 Call Graphic.get_rectTransform, X0
	029 Compare X0, 0
	030 JumpIfEqual {43}
	031 Move X1, X31
	032 Call RectTransform.get_pivot, X0
	033 Subtract S1, S9, S10
	034 Multiply S0, S1, S0
	035 Add S0, S8, S0
	036 Move [X19], S0
	037 Move X30, [X31+32]
	038 Move X19, [X31+40]
	039 Move D9, [X31+16]
	040 Move D8, [X31+24]
	041 Move V10, [X31+48]
	042 Return 
	043 Call 0x1C17F20

Method: UnityEngine.Vector4 GetDrawingDimensions(System.Boolean shouldPreserveAspect)

Disassembly:
	0x03CE1B64 CMP X25, X9
	0x03CE1B68 B.CS 0x3CE1C5C
	0x03CE1B6C LDR X12, [X20]
	0x03CE1B70 ADD X9, X8, X22, 0x3, LSL
	0x03CE1B74 ADD X10, X8, X24, 0x3, LSL
	0x03CE1B78 ADD X11, X8, X23, 0x3, LSL
	0x03CE1B7C ADD X8, X8, X25, 0x3, LSL
	0x03CE1B80 LDR V8, [X8 + 0x24]
	0x03CE1B84 LDR X8, [X12 + 0x298]
	0x03CE1B88 LDR X1, [X12 + 0x2A0]
	0x03CE1B8C LDR V11, [X9 + 0x20]
	0x03CE1B90 LDR V10, [X10 + 0x24]
	0x03CE1B94 LDR V9, [X11 + 0x20]
	0x03CE1B98 MOV X0, X20
	0x03CE1B9C BLR X8
	0x03CE1BA0 MOV X0, X31
	0x03CE1BA4 BL 0x1E43664
	0x03CE1BA8 LDR X8, [X21]
	0x03CE1BAC LDR X8, [X8 + 0xB8]
	0x03CE1BB0 LDR X8, [X8 + 0x10]
	0x03CE1BB4 CBZ X8, 0x3CE1C60
	0x03CE1BB8 LDR W9, [X8 + 0x18]
	0x03CE1BBC CMP X22, X9
	0x03CE1BC0 B.CS 0x3CE1C5C
	0x03CE1BC4 CMP X24, X9
	0x03CE1BC8 B.CS 0x3CE1C5C
	0x03CE1BCC CMP X23, X9
	0x03CE1BD0 B.CS 0x3CE1C5C
	0x03CE1BD4 CMP X25, X9
	0x03CE1BD8 B.CS 0x3CE1C5C
	0x03CE1BDC ADD X9, X8, X22, 0x3, LSL
	0x03CE1BE0 ADD X10, X8, X24, 0x3, LSL
	0x03CE1BE4 UBFM X11, X23, 0x3D, 0x3C
	0x03CE1BE8 ADD X8, X8, 0x20
	0x03CE1BEC LDR V6, [X8, X11, LSL]
	0x03CE1BF0 ADD X8, X8, X25, 0x3, LSL
	0x03CE1BF4 LDR V4, [X9 + 0x20]
	0x03CE1BF8 LDR V5, [X10 + 0x24]
	0x03CE1BFC LDR V7, [X8 + 0x4]
	0x03CE1C00 AND X1, X0, 0x0
	0x03CE1C04 MOV X0, X19
	0x03CE1C08 MOV V0.16B, V11.16B
	0x03CE1C0C MOV V1.16B, V10.16B
	0x03CE1C10 MOV V2.16B, V9.16B
	0x03CE1C14 MOV V3.16B, V8.16B
	0x03CE1C18 BL 0x3CE37C8
	0x03CE1C1C MOV X24, X25
	0x03CE1C20 CMP X24, 0x3
	0x03CE1C24 B.NE 0x3CE1B04
	0x03CE1C28 CMP X23, 0x3
	0x03CE1C2C MOV X22, X23
	0x03CE1C30 B.NE 0x3CE1AFC
	0x03CE1C34 LDP X20, X19, [X31 + 0xC0]
	0x03CE1C38 LDP X22, X21, [X31 + 0xB0]
	0x03CE1C3C LDP X24, X23, [X31 + 0xA0]
	0x03CE1C40 LDP X30, X25, [X31 + 0x90]
	0x03CE1C44 LDP D9, D8, [X31 + 0x80]
	0x03CE1C48 LDP D11, D10, [X31 + 0x70]
	0x03CE1C4C LDP D13, D12, [X31 + 0x60]
	0x03CE1C50 LDP D15, D14, [X31 + 0x50]
	0x03CE1C54 ADD X31, X31, 0xD0
	0x03CE1C58 RET
	0x03CE1C5C BL 0x1C16F28
	0x03CE1C60 BL 0x1C16F20
	0x03CE1C64 SUB X31, X31, 0xE0
	0x03CE1C68 STP D15, D14, [X31 + 0x50]
	0x03CE1C6C STP D13, D12, [X31 + 0x60]
	0x03CE1C70 STP D11, D10, [X31 + 0x70]
	0x03CE1C74 STP D9, D8, [X31 + 0x80]
	0x03CE1C78 STR X30, [X31 + 0x90]
	0x03CE1C7C STP X26, X25, [X31 + 0xA0]
	0x03CE1C80 STP X24, X23, [X31 + 0xB0]
	0x03CE1C84 STP X22, X21, [X31 + 0xC0]
	0x03CE1C88 STP X20, X19, [X31 + 0xD0]
	0x03CE1C8C ADRP X21, 0x706000
	0x03CE1C90 ADRP X22, 0x412000
	0x03CE1C94 LDRB W8, [X21 + 0x4E2]
	0x03CE1C98 LDR X22, [X22 + 0x598]
	0x03CE1C9C MOV X19, X1
	0x03CE1CA0 MOV X20, X0
	0x03CE1CA4 TBNZ X8, 0x0, 0x3CE1CF8
	0x03CE1CA8 ADRP X0, 0x412000
	0x03CE1CAC LDR X0, [X0 + 0xA28]
	0x03CE1CB0 BL 0x1C16CF4
	0x03CE1CB4 ADRP X0, 0x481000
	0x03CE1CB8 LDR X0, [X0 + 0x580]
	0x03CE1CBC BL 0x1C16CF4
	0x03CE1CC0 ADRP X0, 0x412000
	0x03CE1CC4 LDR X0, [X0 + 0x5A8]
	0x03CE1CC8 BL 0x1C16CF4
	0x03CE1CCC ADRP X0, 0x412000
	0x03CE1CD0 LDR X0, [X0 + 0x598]
	0x03CE1CD4 BL 0x1C16CF4
	0x03CE1CD8 ADRP X0, 0x481000
	0x03CE1CDC LDR X0, [X0 + 0x5C0]
	0x03CE1CE0 BL 0x1C16CF4
	0x03CE1CE4 ADRP X0, 0x481000
	0x03CE1CE8 LDR X0, [X0 + 0x5C8]
	0x03CE1CEC BL 0x1C16CF4
	0x03CE1CF0 MOVZ W8, 0x1
	0x03CE1CF4 STRB W8, [X21 + 0x4E2]
	0x03CE1CF8 MOV X0, X20
	0x03CE1CFC BL 0x3CDFE9C
	0x03CE1D00 LDR X8, [X22]
	0x03CE1D04 MOV X21, X0
	0x03CE1D08 LDR W9, [X8 + 0xE0]
	0x03CE1D0C CBNZ W9, 0x3CE1D18
	0x03CE1D10 MOV X0, X8
	0x03CE1D14 BL 0x1C16DFC
	0x03CE1D18 MOV X0, X21
	0x03CE1D1C MOV X1, X31
	0x03CE1D20 MOV X2, X31
	0x03CE1D24 BL 0x3C354F8
	0x03CE1D28 TBZ X0, 0x0, 0x3CE1DA0
	0x03CE1D2C MOV X0, X20
	0x03CE1D30 BL 0x3CDFE9C
	0x03CE1D34 MOV X1, X31
	0x03CE1D38 BL 0x3C425C4
	0x03CE1D3C MOV X0, X20
	0x03CE1D40 STP S1, S0, [X31 + 0x1C]
	0x03CE1D44 STP S3, S2, [X31 + 0x24]
	0x03CE1D48 BL 0x3CDFE9C
	0x03CE1D4C MOV X1, X31
	0x03CE1D50 BL 0x3C425B4
	0x03CE1D54 MOV X0, X20
	0x03CE1D58 STP S1, S0, [X31 + 0x98]
	0x03CE1D5C STR S2, [X31 + 0x34]
	0x03CE1D60 STR S3, [X31 + 0x2C]
	0x03CE1D64 BL 0x3CDFE9C
	0x03CE1D68 CBZ X0, 0x3CE29B8
	0x03CE1D6C MOV X1, X31
	0x03CE1D70 BL 0x3C418F4
	0x03CE1D74 MOV X0, X20
	0x03CE1D78 MOV V11.16B, V0.16B
	0x03CE1D7C MOV V10.16B, V1.16B
	0x03CE1D80 MOV V8.16B, V2.16B
	0x03CE1D84 MOV V9.16B, V3.16B
	0x03CE1D88 BL 0x3CDFE9C
	0x03CE1D8C CBZ X0, 0x3CE29B8
	0x03CE1D90 MOV X1, X31
	0x03CE1D94 BL 0x3C41858
	0x03CE1D98 STP S2, S3, [X31 + 0x38]
	0x03CE1D9C B 0x3CE1E34
	0x03CE1DA0 ADRP X21, 0x6F7000
	0x03CE1DA4 LDRB W8, [X21 + 0xE5A]
	0x03CE1DA8 CBNZ W8, 0x3CE1DC0
	0x03CE1DAC ADRP X0, 0x419000
	0x03CE1DB0 LDR X0, [X0 + 0x9A0]
	0x03CE1DB4 BL 0x1C16CF4
	0x03CE1DB8 MOVZ W8, 0x1
	0x03CE1DBC STRB W8, [X21 + 0xE5A]
	0x03CE1DC0 ADRP X8, 0x419000
	0x03CE1DC4 LDR X8, [X8 + 0x9A0]
	0x03CE1DC8 ADRP X21, 0x700000
	0x03CE1DCC LDRB W9, [X21 + 0xA48]
	0x03CE1DD0 LDR X8, [X8]
	0x03CE1DD4 LDR X8, [X8 + 0xB8]
	0x03CE1DD8 LDP S11, S10, [X8]
	0x03CE1DDC LDP S8, S9, [X8 + 0x8]
	0x03CE1DE0 CBNZ W9, 0x3CE1DF8
	0x03CE1DE4 ADRP X0, 0x41A000
	0x03CE1DE8 LDR X0, [X0 + 0xF08]
	0x03CE1DEC BL 0x1C16CF4
	0x03CE1DF0 MOVZ W8, 0x1
	0x03CE1DF4 STRB W8, [X21 + 0xA48]
	0x03CE1DF8 ADRP X8, 0x41A000
	0x03CE1DFC LDR X8, [X8 + 0xF08]
	0x03CE1E00 STP S10, S11, [X31 + 0x98]
	0x03CE1E04 STR S8, [X31 + 0x34]
	0x03CE1E08 STP S8, S9, [X31 + 0x28]
	0x03CE1E0C LDR X8, [X8]
	0x03CE1E10 STP S10, S11, [X31 + 0x1C]
	0x03CE1E14 STR S9, [X31 + 0x24]
	0x03CE1E18 LDR X8, [X8 + 0xB8]
	0x03CE1E1C LDP S0, S1, [X8 + 0x8]
	0x03CE1E20 MOVZ W8, 0x42C80000
	0x03CE1E24 FMOV S2, W8
	0x03CE1E28 FMUL S3, S0, S2
	0x03CE1E2C FMUL S0, S1, S2
	0x03CE1E30 STP S3, S0, [X31 + 0x38]
	0x03CE1E34 MOV X0, X20
	0x03CE1E38 STP S9, S8, [X31 + 0x48]
	0x03CE1E3C STR S10, [X31 + 0x40]
	0x03CE1E40 BL 0x3CDD3D4
	0x03CE1E44 MOV X0, X20
	0x03CE1E48 MOV V13.16B, V0.16B
	0x03CE1E4C MOV V9.16B, V1.16B
	0x03CE1E50 MOV V10.16B, V2.16B
	0x03CE1E54 MOV V14.16B, V3.16B
	0x03CE1E58 BL 0x3CE083C
	0x03CE1E5C LDR V1, [X20 + 0x108]
	0x03CE1E60 MOV X0, X20
	0x03CE1E64 MOV V15.16B, V0.16B
	0x03CE1E68 STR S1, [X31 + 0x18]
	0x03CE1E6C BL 0x3CE083C
	0x03CE1E70 LDR V12, [X20 + 0x108]
	0x03CE1E74 MOV X0, X20
	0x03CE1E78 MOV V8.16B, V0.16B
	0x03CE1E7C BL 0x3CE083C
	0x03CE1E80 LDR V1, [X20 + 0x108]
	0x03CE1E84 LDP S4, S2, [X31 + 0x48]
	0x03CE1E88 MOV X0, X20
	0x03CE1E8C MOV V5.16B, V9.16B
	0x03CE1E90 FMUL S3, S0, S1
	0x03CE1E94 LDR V1, [X31 + 0x40]
	0x03CE1E98 FDIV S0, S11, S3
	0x03CE1E9C FDIV S2, S2, S3
	0x03CE1EA0 MOV V6.16B, V10.16B
	0x03CE1EA4 FDIV S1, S1, S3
	0x03CE1EA8 FDIV S3, S4, S3
	0x03CE1EAC MOV V4.16B, V13.16B
	0x03CE1EB0 MOV V7.16B, V14.16B
	0x03CE1EB4 STR S13, [X31 + 0x44]
	0x03CE1EB8 STR S9, [X31 + 0x30]
	0x03CE1EBC BL 0x3CE3708
	0x03CE1EC0 CBZ X19, 0x3CE29B8
	0x03CE1EC4 MOV V9.16B, V1.16B
	0x03CE1EC8 LDP S1, S5, [X31 + 0x38]
	0x03CE1ECC FMUL S4, S8, S12
	0x03CE1ED0 FSUB S8, S10, S2
	0x03CE1ED4 LDR V2, [X31 + 0x4C]
	0x03CE1ED8 FSUB S1, S1, S11
	0x03CE1EDC LDR V6, [X31 + 0x40]
	0x03CE1EE0 MOV V13.16B, V0.16B
	0x03CE1EE4 LDR V0, [X31 + 0x18]
	0x03CE1EE8 FSUB S1, S1, S2
	0x03CE1EEC LDR V2, [X31 + 0x48]
	0x03CE1EF0 FSUB S5, S5, S6
	0x03CE1EF4 FMUL S0, S15, S0
	0x03CE1EF8 MOV X0, X19
	0x03CE1EFC FSUB S2, S5, S2
	0x03CE1F00 MOV X1, X31
	0x03CE1F04 STP S10, S14, [X31 + 0x8]
	0x03CE1F08 FDIV S10, S1, S0
	0x03CE1F0C FDIV S12, S2, S4
	0x03CE1F10 FSUB S15, S14, S3

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+112], X22
	012 Move [X31+120], X21
	013 Move [X31+128], X20
	014 Move [X31+136], X19
	015 Move X21, 0x707000
	016 Move X22, 0x413000
	017 Move W8, [X21+1241]
	018 Move X22, [X22+1432]
	019 Move W20, W1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x413000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1241], W8
	030 Move X0, X19
	031 Move [X31+16], X31
	032 Move [X31+24], X31
	033 Call Image.get_activeSprite, X0
	034 Move X8, [X22]
	035 Move X21, X0
	036 Move W9, [X8+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {41}
	039 Move X0, X8
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X31
	043 Move X2, X31
	044 Call Object.op_Equality, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {66}
	049 Move X21, 0x6F8000
	050 Move W8, [X21+3674]
	051 Compare W8, 0
	052 JumpIfNotEqual {58}
	053 Move X0, 0x41A000
	054 Move X0, [X0+2464]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X21+3674], W8
	058 Move X8, 0x41A000
	059 Move X8, [X8+2464]
	060 Move X8, [X8]
	061 Move X8, [X8+184]
	062 Move S8, [X8]
	063 Move S9, [X8+4]
	064 Move S10, [X8+8]
	065 Move S11, [X8+12]
	066 Move X0, X19
	067 Call Image.get_activeSprite, X0
	068 Move X1, X31
	069 Call DataUtility.GetPadding, X0
	070 Move V8, V0
	071 Move V9, V1
	072 Move V10, V2
	073 Move V11, V3
	074 Move X0, X19
	075 Call Image.get_activeSprite, X0
	076 Move X8, [X22]
	077 Move X21, X0
	078 Move W9, [X8+224]
	079 Compare W9, 0
	080 JumpIfNotEqual {83}
	081 Move X0, X8
	082 Call 0x1C17DFC
	083 Move X0, X21
	084 Move X1, X31
	085 Move X2, X31
	086 Call Object.op_Equality, X0, X1
	087 Move [X31+8], S9
	088 Move [X31+16], S8
	089 Move [X31], S11
	090 Move [X31+8], S10
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {110}
	095 Move X21, 0x6F9000
	096 Move W8, [X21+1935]
	097 Compare W8, 0
	098 JumpIfNotEqual {104}
	099 Move X0, 0x41B000
	100 Move X0, [X0+3848]
	101 Call 0x1C17CF4
	102 Move W8, 1
	103 Move [X21+1935], W8
	104 Move X8, 0x41B000
	105 Move X8, [X8+3848]
	106 Move X8, [X8]
	107 Move X8, [X8+184]
	108 Move S12, [X8]
	109 Move S9, [X8+4]
	110 Move X0, X19
	111 Call Image.get_activeSprite, X0
	112 Compare X0, 0
	113 JumpIfEqual {267}
	114 Move X1, X31
	115 Call Sprite.get_rect, X0
	116 Move X0, X19
	117 Move V12, V2
	118 Call Image.get_activeSprite, X0
	119 Compare X0, 0
	120 JumpIfEqual {267}
	121 Move X1, X31
	122 Call Sprite.get_rect, X0
	123 Move V9, V3
	124 Move X0, X19
	125 Call Graphic.GetPixelAdjustedRect, X0
	126 Move X21, 0x6F9000
	127 Move W8, [X21+1495]
	128 Move V13, V0
	129 Move V14, V1
	130 Move V8, V2
	131 Move V15, V3
	132 Move [X31+16], S0
	133 Move [X31+24], S1
	134 Move [X31+24], S2
	135 Move [X31+32], S3
	136 Compare W8, 0
	137 JumpIfNotEqual {143}
	138 Move X0, 0x413000
	139 Move X0, [X0+1448]
	140 Call 0x1C17CF4
	141 Move W8, 1
	142 Move [X21+1495], W8
	143 Move X22, 0x413000
	144 Move X22, [X22+1448]
	145 Move X0, [X22]
	146 Move W8, [X0+224]
	147 Compare W8, 0
	148 JumpIfNotEqual {150}
	149 Call 0x1C17DFC
	150 NotImplemented "Instruction FCVT not yet implemented."
	151 Add X0, X31, 104
	152 Move V0, V10
	153 Call 0x3EB2C00
	154 NotImplemented "Instruction FCMP not yet implemented."
	155 Move D1, -0.5
	156 NotImplemented "Instruction FCMP not yet implemented."
	157 Move V0, [X31+104]
	158 Move D1, -1
	159 Move D1, 0.5
	160 NotImplemented "Instruction FCMP not yet implemented."
	161 Move V0, [X31+104]
	162 Move D1, 1
	163 NotImplemented "Instruction FCVTZS not yet implemented."
	164 Add D1, D0, D1
	165 And X31, X8, 1
	166 NotImplemented "Instruction FCSEL not yet implemented."
	167 Add D0, D10, D1
	168 NotImplemented "Instruction FRINTP not yet implemented."
	169 Add D0, D10, D1
	170 NotImplemented "Instruction FRINTM not yet implemented."
	171 Move W8, [X21+1495]
	172 Compare W8, 0
	173 JumpIfNotEqual {179}
	174 Move X0, 0x413000
	175 Move X0, [X0+1448]
	176 Call 0x1C17CF4
	177 Move W8, 1
	178 Move [X21+1495], W8
	179 Move X0, [X22]
	180 Move W8, [X0+224]
	181 Compare W8, 0
	182 JumpIfNotEqual {184}
	183 Call 0x1C17DFC
	184 NotImplemented "Instruction FCVT not yet implemented."
	185 Add X0, X31, 104
	186 Move V0, V10
	187 NotImplemented "Instruction FCVTZS not yet implemented."
	188 Call 0x3EB2C00
	189 NotImplemented "Instruction FCMP not yet implemented."
	190 Move D1, -0.5
	191 NotImplemented "Instruction FCMP not yet implemented."
	192 Move V0, [X31+104]
	193 Move D1, -1
	194 Move D1, 0.5
	195 NotImplemented "Instruction FCMP not yet implemented."
	196 Move V0, [X31+104]
	197 Move D1, 1
	198 NotImplemented "Instruction FCVTZS not yet implemented."
	199 Add D1, D0, D1
	200 And X31, X8, 1
	201 NotImplemented "Instruction FCSEL not yet implemented."
	202 Add D0, D10, D1
	203 NotImplemented "Instruction FRINTP not yet implemented."
	204 Add D0, D10, D1
	205 NotImplemented "Instruction FRINTM not yet implemented."
	206 Move X9, 0x7FF00000
	207 Move W10, 0xCF000000
	208 Move D2, X9
	209 NotImplemented "Instruction FCVTZS not yet implemented."
	210 NotImplemented "Instruction SCVTF not yet implemented."
	211 NotImplemented "Instruction FCMP not yet implemented."
	212 Move S3, W10
	213 NotImplemented "Instruction SCVTF not yet implemented."
	214 NotImplemented "Instruction FCSEL not yet implemented."
	215 NotImplemented "Instruction FCMP not yet implemented."
	216 NotImplemented "Instruction FCSEL not yet implemented."
	217 Move TEMP, X20
	218 And TEMP, TEMP, 1
	219 Compare TEMP, 1
	220 JumpIfNotEqual {234}
	221 Multiply S0, S12, S12
	222 Multiply S1, S9, S9
	223 Add S0, S1, S0
	224 NotImplemented "Instruction FCMP not yet implemented."
	225 Add X1, X31, 16
	226 Move X0, X19
	227 Move V0, V12
	228 Move V1, V9
	229 Call Image.PreserveSpriteAspectRatio, X0, X1, X2
	230 Move S13, [X31+16]
	231 Move S14, [X31+20]
	232 Move S8, [X31+24]
	233 Move S15, [X31+28]
	234 Move S0, [X31]
	235 Move S1, [X31+4]
	236 Move S2, [X31+8]
	237 Move S3, [X31+12]
	238 Move X20, [X31+128]
	239 Move X19, [X31+136]
	240 Move X22, [X31+112]
	241 Move X21, [X31+120]
	242 Subtract S0, S11, S0
	243 Subtract S1, S10, S1
	244 NotImplemented "Instruction FDIV not yet implemented."
	245 NotImplemented "Instruction FDIV not yet implemented."
	246 NotImplemented "Instruction FDIV not yet implemented."
	247 NotImplemented "Instruction FDIV not yet implemented."
	248 Multiply S0, S3, S8
	249 Multiply S1, S2, S15
	250 Multiply S2, S5, S8
	251 Multiply S3, S4, S15
	252 Add S0, S13, S0
	253 Add S1, S14, S1
	254 Add S2, S13, S2
	255 Add S3, S14, S3
	256 Move X30, [X31+96]
	257 Move D9, [X31+80]
	258 Move D8, [X31+88]
	259 Move D11, [X31+64]
	260 Move D10, [X31+72]
	261 Move D13, [X31+48]
	262 Move D12, [X31+56]
	263 Move D15, [X31+32]
	264 Move D14, [X31+40]
	265 Add X31, X31, 144
	266 Return X0
	267 Call 0x1C17F20

Method: System.Void SetNativeSize()

Disassembly:
	0x03CE1F14 BL 0x3E39938
	0x03CE1F18 STP S13, S8, [X31 + 0x48]
	0x03CE1F1C FSUB S13, S8, S13
	0x03CE1F20 FCMP S10, 0x0
	0x03CE1F24 FSUB S8, S15, S9
	0x03CE1F28 FCSEL S11, S10, S13, HI
	0x03CE1F2C FCMP S12, 0x0
	0x03CE1F30 FCSEL S0, S12, S8, HI
	0x03CE1F34 MOV X0, X20
	0x03CE1F38 STP S9, S0, [X31 + 0x3C]
	0x03CE1F3C BL 0x3CDFE9C
	0x03CE1F40 LDR X8, [X22]
	0x03CE1F44 MOV X21, X0
	0x03CE1F48 LDR W9, [X8 + 0xE0]
	0x03CE1F4C CBNZ W9, 0x3CE1F58
	0x03CE1F50 MOV X0, X8
	0x03CE1F54 BL 0x1C16DFC
	0x03CE1F58 MOV X0, X21
	0x03CE1F5C MOV X1, X31
	0x03CE1F60 MOV X2, X31
	0x03CE1F64 BL 0x3C354F8
	0x03CE1F68 LDR V14, [X31 + 0x30]
	0x03CE1F6C TBZ X0, 0x0, 0x3CE207C
	0x03CE1F70 MOV X0, X20
	0x03CE1F74 BL 0x3CE075C
	0x03CE1F78 TBNZ X0, 0x0, 0x3CE1FF8
	0x03CE1F7C MOV X0, X20
	0x03CE1F80 BL 0x3CDFE9C
	0x03CE1F84 CBZ X0, 0x3CE29B8
	0x03CE1F88 MOV X1, X31
	0x03CE1F8C BL 0x3C41AD4
	0x03CE1F90 TBNZ X0, 0x0, 0x3CE1FF8
	0x03CE1F94 MOV X0, X20
	0x03CE1F98 BL 0x3CDFE9C
	0x03CE1F9C CBZ X0, 0x3CE29B8
	0x03CE1FA0 MOV X1, X31
	0x03CE1FA4 BL 0x3C41990
	0x03CE1FA8 LDR X8, [X22]
	0x03CE1FAC MOV X21, X0
	0x03CE1FB0 LDR W9, [X8 + 0xE0]
	0x03CE1FB4 CBNZ W9, 0x3CE1FC0
	0x03CE1FB8 MOV X0, X8
	0x03CE1FBC BL 0x1C16DFC
	0x03CE1FC0 MOV X0, X21
	0x03CE1FC4 MOV X1, X31
	0x03CE1FC8 MOV X2, X31
	0x03CE1FCC BL 0x3C354F8
	0x03CE1FD0 TBZ X0, 0x0, 0x3CE207C
	0x03CE1FD4 MOV X0, X20
	0x03CE1FD8 BL 0x3CDFE9C
	0x03CE1FDC CBZ X0, 0x3CE29B8
	0x03CE1FE0 MOV X1, X31
	0x03CE1FE4 BL 0x3C41990
	0x03CE1FE8 CBZ X0, 0x3CE29B8
	0x03CE1FEC MOV X1, X31
	0x03CE1FF0 BL 0x3C1A9D4
	0x03CE1FF4 CBZ W0, 0x3CE207C
	0x03CE1FF8 LDRB W8, [X20 + 0xED]
	0x03CE1FFC STR S15, [X31 + 0x38]
	0x03CE2000 CBZ W8, 0x3CE2134
	0x03CE2004 ADRP X24, 0x411000
	0x03CE2008 LDR X24, [X24 + 0x5A8]
	0x03CE200C LDR X0, [X24]
	0x03CE2010 LDR W8, [X0 + 0xE0]
	0x03CE2014 CBNZ W8, 0x3CE201C
	0x03CE2018 BL 0x1C16DFC
	0x03CE201C LDR V1, [X31 + 0x40]
	0x03CE2020 FDIV S0, S13, S11
	0x03CE2024 MOVZ W8, 0x7F800000
	0x03CE2028 FRINTP S2, S0
	0x03CE202C FDIV S1, S8, S1
	0x03CE2030 FCVTPS X10, S0
	0x03CE2034 FMOV S0, W8
	0x03CE2038 MOVZ X9, 0x80000000
	0x03CE203C FRINTP S3, S1
	0x03CE2040 FCMP S2, S0
	0x03CE2044 FCVTPS X8, S1
	0x03CE2048 CSEL X22, X9, X10, EQ
	0x03CE204C FCMP S3, S0
	0x03CE2050 MOV X0, X20

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x707000
	010 Move X20, 0x413000
	011 Move W8, [X21+1242]
	012 Move X20, [X20+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x413000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1242], W8
	023 Move X0, X19
	024 Call Image.get_activeSprite, X0
	025 Move X8, [X20]
	026 Move X20, X0
	027 Move W9, [X8+224]
	028 Compare W9, 0
	029 JumpIfNotEqual {32}
	030 Move X0, X8
	031 Call 0x1C17DFC
	032 Move X0, X20
	033 Move X1, X31
	034 Move X2, X31
	035 Call Object.op_Inequality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {95}
	040 Move X0, X19
	041 Call Image.get_activeSprite, X0
	042 Compare X0, 0
	043 JumpIfEqual {104}
	044 Move X1, X31
	045 Call Sprite.get_rect, X0
	046 Move X0, X19
	047 Move V8, V2
	048 Call Image.get_pixelsPerUnit, X0
	049 Move X0, X19
	050 Move V9, V0
	051 Call Image.get_activeSprite, X0
	052 Compare X0, 0
	053 JumpIfEqual {104}
	054 Move X1, X31
	055 Call Sprite.get_rect, X0
	056 Move X0, X19
	057 Move V10, V3
	058 Call Image.get_pixelsPerUnit, X0
	059 Move X0, X19
	060 Move V11, V0
	061 Call Graphic.get_rectTransform, X0
	062 Move X20, X0
	063 Move X0, X19
	064 Call Graphic.get_rectTransform, X0
	065 Compare X0, 0
	066 JumpIfEqual {104}
	067 Move X1, X31
	068 Call RectTransform.get_anchorMin, X0
	069 Compare X20, 0
	070 JumpIfEqual {104}
	071 Move X0, X20
	072 Move X1, X31
	073 Call RectTransform.set_anchorMax, X0, X1
	074 Move X0, X19
	075 Call Graphic.get_rectTransform, X0
	076 Compare X0, 0
	077 JumpIfEqual {104}
	078 NotImplemented "Instruction FDIV not yet implemented."
	079 NotImplemented "Instruction FDIV not yet implemented."
	080 Move X1, X31
	081 Call RectTransform.set_sizeDelta, X0, X1
	082 Move X8, [X19]
	083 Move X0, X19
	084 Move X20, [X31+48]
	085 Move X19, [X31+56]
	086 Move X30, [X31+32]
	087 Move X21, [X31+40]
	088 Move X2, [X8+728]
	089 Move X1, [X8+736]
	090 Move D9, [X31+16]
	091 Move D8, [X31+24]
	092 Move D11, [X31+64]
	093 Move D10, [X31+72]
	094 CallNoReturn X2
	095 Move X20, [X31+48]
	096 Move X19, [X31+56]
	097 Move X30, [X31+32]
	098 Move X21, [X31+40]
	099 Move D9, [X31+16]
	100 Move D8, [X31+24]
	101 Move D11, [X31+64]
	102 Move D10, [X31+72]
	103 Return 
	104 Call 0x1C17F20

Method: System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)

Disassembly:
	0x03CE2054 CSEL X23, X9, X8, EQ
	0x03CE2058 BL 0x3CE075C
	0x03CE205C SCVTF D10, X22
	0x03CE2060 SCVTF D12, X23
	0x03CE2064 TBZ X0, 0x0, 0x3CE2258
	0x03CE2068 FMOV D0, 2
	0x03CE206C FADD D1, D10, D0
	0x03CE2070 FADD D0, D12, D0
	0x03CE2074 FMUL D0, D1, D0
	0x03CE2078 B 0x3CE2260
	0x03CE207C LDRB W8, [X20 + 0xED]
	0x03CE2080 CBZ W8, 0x3CE27B4
	0x03CE2084 LDR V0, [X31 + 0x40]
	0x03CE2088 LDR X8, [X20]
	0x03CE208C FDIV S11, S13, S11
	0x03CE2090 MOV X0, X20
	0x03CE2094 FDIV S8, S8, S0
	0x03CE2098 LDP S0, S1, [X31 + 0x44]
	0x03CE209C LDR X9, [X8 + 0x298]
	0x03CE20A0 LDR X1, [X8 + 0x2A0]
	0x03CE20A4 FADD S10, S0, S1
	0x03CE20A8 LDR V1, [X31 + 0x3C]
	0x03CE20AC FADD S9, S14, S1
	0x03CE20B0 LDR V1, [X31 + 0x4C]
	0x03CE20B4 FADD S13, S0, S1
	0x03CE20B8 FADD S0, S14, S15
	0x03CE20BC STR S0, [X31 + 0x4C]
	0x03CE20C0 BLR X9
	0x03CE20C4 MOV X0, X31
	0x03CE20C8 BL 0x1E43664
	0x03CE20CC ADRP X8, 0x480000
	0x03CE20D0 LDR X8, [X8 + 0x580]
	0x03CE20D4 LDR V0, [X31 + 0x9C]
	0x03CE20D8 MOV X20, X0
	0x03CE20DC LDR X0, [X8]
	0x03CE20E0 FMUL S15, S0, S11
	0x03CE20E4 LDR V0, [X31 + 0x98]
	0x03CE20E8 LDR W8, [X0 + 0xE0]
	0x03CE20EC FMUL S14, S0, S8
	0x03CE20F0 LDR V0, [X31 + 0x34]
	0x03CE20F4 FMUL S12, S0, S11
	0x03CE20F8 LDR V0, [X31 + 0x2C]
	0x03CE20FC FMUL S11, S0, S8
	0x03CE2100 CBNZ W8, 0x3CE2108
	0x03CE2104 BL 0x1C16DFC
	0x03CE2108 LDR V3, [X31 + 0x4C]
	0x03CE210C AND X1, X20, 0x0
	0x03CE2110 MOV X0, X19
	0x03CE2114 MOV V0.16B, V10.16B
	0x03CE2118 MOV V1.16B, V9.16B
	0x03CE211C MOV V2.16B, V13.16B
	0x03CE2120 MOV V4.16B, V15.16B
	0x03CE2124 MOV V5.16B, V14.16B
	0x03CE2128 MOV V6.16B, V12.16B
	0x03CE212C MOV V7.16B, V11.16B
	0x03CE2130 B 0x3CE298C
	0x03CE2134 MOV X0, X20
	0x03CE2138 BL 0x3CE075C
	0x03CE213C TBZ X0, 0x0, 0x3CE2300
	0x03CE2140 ADRP X24, 0x411000
	0x03CE2144 LDR X24, [X24 + 0x5A8]
	0x03CE2148 LDR X0, [X24]
	0x03CE214C LDR W8, [X0 + 0xE0]
	0x03CE2150 CBNZ W8, 0x3CE2158
	0x03CE2154 BL 0x1C16DFC
	0x03CE2158 LDR V1, [X31 + 0x40]
	0x03CE215C FDIV S0, S13, S11
	0x03CE2160 MOVZ W8, 0x7F800000
	0x03CE2164 FRINTP S2, S0
	0x03CE2168 FDIV S1, S8, S1
	0x03CE216C FCVTPS X10, S0
	0x03CE2170 FMOV S0, W8
	0x03CE2174 MOVZ X9, 0x80000000
	0x03CE2178 FCMP S2, S0
	0x03CE217C FRINTP S2, S1
	0x03CE2180 ADRP X8, 0xFFFFFFFFFCE0B000
	0x03CE2184 CSEL X22, X9, X10, EQ
	0x03CE2188 FCMP S2, S0
	0x03CE218C LDR V2, [X8 + 0xE18]
	0x03CE2190 FCVTPS X8, S1
	0x03CE2194 CSEL X23, X9, X8, EQ

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x706000
	007 Move X21, 0x412000
	008 Move W8, [X22+1243]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x412000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1243], W8
	021 Move X0, X20
	022 Call Image.get_activeSprite, X0
	023 Move X8, [X21]
	024 Move X21, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {47}
	038 Move X0, X20
	039 Move X1, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Call Graphic.OnPopulateMesh, X0, X1
	046 Return 
	047 Move W8, [X20+232]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X9, -51683328
	050 Add X9, X9, 3878
	051 NotImplemented "Instruction ADR not yet implemented."
	052 Move W11, [X9]
	053 Add X10, X10, X11
	054 CallNoReturn X10
	055 Move W8, [X20+236]
	056 Move W9, [X20+261]
	057 Move X0, X20
	058 Move X1, X19
	059 NotImplemented "Instruction CMP not yet implemented."
	060 NotImplemented "Instruction CSET not yet implemented."
	061 Compare W9, 0
	062 JumpIfEqual {104}
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Call Image.GenerateSprite, X0, X1, X2
	069 Return 
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Return 
	076 Move X0, X20
	077 Move X1, X19
	078 Move X20, [X31+32]
	079 Move X19, [X31+40]
	080 Move X22, [X31+16]
	081 Move X21, [X31+24]
	082 Move X30, [X31+48]
	083 Call Image.GenerateSlicedSprite, X0, X1
	084 Return 
	085 Move X0, X20
	086 Move X1, X19
	087 Move X20, [X31+32]
	088 Move X19, [X31+40]
	089 Move X22, [X31+16]
	090 Move X21, [X31+24]
	091 Move X30, [X31+48]
	092 Call Image.GenerateTiledSprite, X0, X1
	093 Return 
	094 Move W2, [X20+236]
	095 Move X0, X20
	096 Move X1, X19
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X30, [X31+48]
	102 Call Image.GenerateFilledSprite, X0, X1, X2
	103 Return 
	104 Move X20, [X31+32]
	105 Move X19, [X31+40]
	106 Move X22, [X31+16]
	107 Move X21, [X31+24]
	108 Move X30, [X31+48]

Method: System.Void TrackSprite()

Disassembly:
	0x03CE0DA4 B 0x3CE0DB0
	0x03CE0DA8 FADD D0, D10, D1
	0x03CE0DAC FRINTM D11, D0
	0x03CE0DB0 LDRB W8, [X21 + 0x5D7]
	0x03CE0DB4 CBNZ W8, 0x3CE0DCC
	0x03CE0DB8 ADRP X0, 0x413000
	0x03CE0DBC LDR X0, [X0 + 0x5A8]
	0x03CE0DC0 BL 0x1C16CF4
	0x03CE0DC4 MOVZ W8, 0x1
	0x03CE0DC8 STRB W8, [X21 + 0x5D7]
	0x03CE0DCC LDR X0, [X22]
	0x03CE0DD0 LDR W8, [X0 + 0xE0]
	0x03CE0DD4 CBNZ W8, 0x3CE0DDC
	0x03CE0DD8 BL 0x1C16DFC
	0x03CE0DDC FCVT S10, S9
	0x03CE0DE0 ADD X0, X31, 0x68
	0x03CE0DE4 MOV V0.16B, V10.16B
	0x03CE0DE8 FCVTZS W21, D11
	0x03CE0DEC BL 0x3EB1C00
	0x03CE0DF0 FCMP S9, 0x0
	0x03CE0DF4 B.GE 0x3CE0E10
	0x03CE0DF8 FMOV D1, -0.5
	0x03CE0DFC FCMP D0, D1
	0x03CE0E00 B.NE 0x3CE0E38
	0x03CE0E04 LDR V0, [X31 + 0x68]
	0x03CE0E08 FMOV D1, -1
	0x03CE0E0C B 0x3CE0E24
	0x03CE0E10 FMOV D1, 0.5
	0x03CE0E14 FCMP D0, D1
	0x03CE0E18 B.NE 0x3CE0E44
	0x03CE0E1C LDR V0, [X31 + 0x68]
	0x03CE0E20 FMOV D1, 1
	0x03CE0E24 FCVTZS X8, D0
	0x03CE0E28 FADD D1, D0, D1
	0x03CE0E2C ANDS X31, X8, 0x1
	0x03CE0E30 FCSEL D0, D0, D1, EQ
	0x03CE0E34 B 0x3CE0E4C
	0x03CE0E38 FADD D0, D10, D1
	0x03CE0E3C FRINTP D0, D0
	0x03CE0E40 B 0x3CE0E4C
	0x03CE0E44 FADD D0, D10, D1
	0x03CE0E48 FRINTM D0, D0
	0x03CE0E4C MOVZ X9, 0x7FF00000
	0x03CE0E50 MOVZ W10, 0xCF000000
	0x03CE0E54 FMOV D2, X9
	0x03CE0E58 FCVTZS W8, D0
	0x03CE0E5C SCVTF S1, W21
	0x03CE0E60 FCMP D11, D2
	0x03CE0E64 FMOV S3, W10
	0x03CE0E68 SCVTF S4, W8
	0x03CE0E6C FCSEL S10, S3, S1, EQ
	0x03CE0E70 FCMP D0, D2
	0x03CE0E74 FCSEL S11, S3, S4, EQ
	0x03CE0E78 TBZ X20, 0x0, 0x3CE0EAC
	0x03CE0E7C FMUL S0, S12, S12
	0x03CE0E80 FMUL S1, S9, S9
	0x03CE0E84 FADD S0, S1, S0
	0x03CE0E88 FCMP S0, 0x0
	0x03CE0E8C B.LE 0x3CE0EAC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x708000
	006 Move X21, 0x414000
	007 Move W8, [X20+1244]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x483000
	015 Move X0, [X0+1408]
	016 Call 0x1C17CF4
	017 Move X0, 0x414000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1244], W8
	022 Move X0, X19
	023 Call Image.get_activeSprite, X0
	024 Move X8, [X21]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {71}
	039 Move X0, X19
	040 Call Image.get_activeSprite, X0
	041 Compare X0, 0
	042 JumpIfEqual {76}
	043 Move X1, X31
	044 Call Sprite.get_texture, X0
	045 Move X8, [X21]
	046 Move X20, X0
	047 Move W9, [X8+224]
	048 Compare W9, 0
	049 JumpIfNotEqual {52}
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Move X0, X20
	053 Move X1, X31
	054 Move X2, X31
	055 Call Object.op_Equality, X0, X1
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {71}
	060 Move X8, 0x483000
	061 Move X8, [X8+1408]
	062 Move X0, [X8]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X0, X19
	068 Call Image.TrackImage, X0
	069 Move W8, 1
	070 Move [X19+260], W8
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Return 
	076 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03CE43FC MOV X20, X0
	0x03CE4400 ADRP X0, 0x47E000
	0x03CE4404 LDR X0, [X0 + 0x5E8]
	0x03CE4408 BL 0x1C16D08
	0x03CE440C MOV X21, X0
	0x03CE4410 ADRP X0, 0x47E000
	0x03CE4414 LDR X0, [X0 + 0x5F0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call MaskableGraphic.OnEnable, X0
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Call Image.TrackSprite, X0
	010 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03CE4418 BL 0x1C16D08
	0x03CE441C MOV X2, X0
	0x03CE4420 MOV X0, X21
	0x03CE4424 MOV X1, X20
	0x03CE4428 MOV X3, X31
	0x03CE442C BL 0x32274B8
	0x03CE4430 MOV X20, X0
	0x03CE4434 ADRP X0, 0x40F000
	0x03CE4438 LDR X0, [X0 + 0xA28]
	0x03CE443C BL 0x1C16D08
	0x03CE4440 LDR W8, [X0 + 0xE0]
	0x03CE4444 CBNZ W8, 0x3CE444C
	0x03CE4448 BL 0x1C16DFC
	0x03CE444C MOV X0, X20
	0x03CE4450 MOV X1, X19
	0x03CE4454 MOV X2, X31
	0x03CE4458 BL 0x3C065A4
	0x03CE445C B 0x3CE41B4
	0x03CE4460 BL 0x1C16F20
	0x03CE4464 MOVZ W0, 0x8
	0x03CE4468 BL 0x3EB1AF0
	0x03CE446C LDR X8, [X20]
	0x03CE4470 STR X8, [X0]
	0x03CE4474 ADRP X1, 0x1D0000
	0x03CE4478 ADD X1, X1, 0xE58
	0x03CE447C MOV X2, X31
	0x03CE4480 BL 0x3EB1B00
	0x03CE4484 MOV X20, X0
	0x03CE4488 BL 0x3EB1AE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x704000
	005 Move W8, [X20+1245]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x47F000
	012 Move X0, [X0+1408]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1245], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call MaskableGraphic.OnDisable, X0
	019 Move W8, [X19+260]
	020 Compare W8, 0
	021 JumpIfEqual {33}
	022 Move X8, 0x47F000
	023 Move X8, [X8+1408]
	024 Move X0, [X8]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 

Method: System.Void UpdateMaterial()

Disassembly:
	0x03CE450C STR S11, [X31 + 0x1C]
	0x03CE4510 STP S1, S0, [X31 + 0xC]
	0x03CE4514 BL 0x3CDFE9C
	0x03CE4518 CBZ X0, 0x3CE46EC
	0x03CE451C MOV X1, X31
	0x03CE4520 BL 0x3C418F4
	0x03CE4524 MOV X0, X19
	0x03CE4528 MOV V14.16B, V0.16B
	0x03CE452C STP S1, S0, [X31]
	0x03CE4530 MOV V15.16B, V2.16B
	0x03CE4534 STR S2, [X31 + 0x8]
	0x03CE4538 MOV V11.16B, V3.16B
	0x03CE453C BL 0x3CE083C
	0x03CE4540 FDIV S4, S14, S0
	0x03CE4544 LDR V14, [X31]
	0x03CE4548 FDIV S2, S15, S0
	0x03CE454C FDIV S3, S11, S0
	0x03CE4550 MOV X0, X19
	0x03CE4554 FDIV S1, S14, S0
	0x03CE4558 MOV V0.16B, V4.16B
	0x03CE455C LDP S4, S5, [X31 + 0x18]
	0x03CE4560 MOV V6.16B, V13.16B
	0x03CE4564 MOV V7.16B, V12.16B
	0x03CE4568 BL 0x3CE3708
	0x03CE456C LDP S15, S17, [X31 + 0x4]
	0x03CE4570 LDR V19, [X31 + 0x14]
	0x03CE4574 FSUB S6, S10, S14
	0x03CE4578 FSUB S18, S10, S11
	0x03CE457C FSUB S4, S12, S10
	0x03CE4580 FSUB S5, S13, S19
	0x03CE4584 FSUB S7, S19, S15
	0x03CE4588 FSUB S19, S19, S17
	0x03CE458C MOVZ W9, 0x1
	0x03CE4590 FSUB S6, S6, S11
	0x03CE4594 FMOV S16, 1
	0x03CE4598 FSUB S17, S7, S17
	0x03CE459C FSUB S7, S18, S14
	0x03CE45A0 FSUB S18, S19, S15
	0x03CE45A4 FMOV S19, W31
	0x03CE45A8 ANDS W31, W9, 0x1
	0x03CE45AC FCSEL S20, S9, S8, NE
	0x03CE45B0 FCSEL S21, S0, S1, NE
	0x03CE45B4 MOV W8, W9
	0x03CE45B8 FCMP S20, S21
	0x03CE45BC B.LS 0x3CE467C
	0x03CE45C0 ANDS W31, W8, 0x1
	0x03CE45C4 FCSEL S20, S9, S8, NE
	0x03CE45C8 FCSEL S21, S13, S12, NE
	0x03CE45CC FCSEL S22, S2, S3, NE
	0x03CE45D0 FSUB S20, S21, S20
	0x03CE45D4 FCMP S20, S22
	0x03CE45D8 B.LS 0x3CE4644
	0x03CE45DC LDR W9, [X19 + 0xE8]
	0x03CE45E0 CMP W9, 0x1
	0x03CE45E4 B.NE 0x3CE4650
	0x03CE45E8 MOV V21.16B, V2.16B
	0x03CE45EC MOV V20.16B, V0.16B
	0x03CE45F0 MOV V23.16B, V13.16B
	0x03CE45F4 MOV V22.16B, V9.16B
	0x03CE45F8 TBNZ X8, 0x0, 0x3CE460C
	0x03CE45FC MOV V21.16B, V3.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x704000
	006 Move X21, 0x410000
	007 Move W8, [X20+1246]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x410000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1246], W8
	019 Move X0, X19
	020 Call Graphic.UpdateMaterial, X0
	021 Move X0, X19
	022 Call Image.get_activeSprite, X0
	023 Move X8, [X21]
	024 Move X20, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {43}
	038 Move X0, X19
	039 Call Graphic.get_canvasRenderer, X0
	040 Compare X0, 0
	041 JumpIfEqual {81}
	042 Move X1, X31
	043 Move X0, X19
	044 Call Image.get_activeSprite, X0
	045 Compare X0, 0
	046 JumpIfEqual {81}
	047 Move X1, X31
	048 Call Sprite.get_associatedAlphaSplitTexture, X0
	049 Move X8, [X21]
	050 Move X20, X0
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Move X0, X20
	057 Move X1, X31
	058 Move X2, X31
	059 Call Object.op_Inequality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {76}
	064 Move X0, X19
	065 Call Graphic.get_canvasRenderer, X0
	066 Compare X0, 0
	067 JumpIfEqual {81}
	068 Move X1, X20
	069 Move X20, [X31+16]
	070 Move X19, [X31+24]
	071 Move X2, X31
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Call CanvasRenderer.SetAlphaTexture, X0, X1
	075 Return 
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move X30, [X31+32]
	079 Move X21, [X31+40]
	080 Return 
	081 Call 0x1C17F20

Method: System.Void OnCanvasHierarchyChanged()

Disassembly:
	0x03CE4600 MOV V20.16B, V1.16B
	0x03CE4604 MOV V23.16B, V12.16B
	0x03CE4608 MOV V22.16B, V8.16B
	0x03CE460C FSUB S23, S23, S21
	0x03CE4610 FCMP S20, S23
	0x03CE4614 FMOV S21, W31
	0x03CE4618 B.EQ 0x3CE4634
	0x03CE461C FSUB S22, S22, S20
	0x03CE4620 FSUB S20, S23, S20
	0x03CE4624 FDIV S20, S22, S20
	0x03CE4628 FCMP S20, 0x0
	0x03CE462C B.MI 0x3CE4634
	0x03CE4630 FMIN S21, S20, S16
	0x03CE4634 FMAX S20, S21, S19
	0x03CE4638 TBZ X8, 0x0, 0x3CE4690
	0x03CE463C FMUL S20, S18, S20
	0x03CE4640 B 0x3CE4678
	0x03CE4644 TBZ X8, 0x0, 0x3CE4688
	0x03CE4648 FSUB S9, S9, S5
	0x03CE464C B 0x3CE467C
	0x03CE4650 TBZ X8, 0x0, 0x3CE4698
	0x03CE4654 FSUB S20, S9, S0
	0x03CE4658 FDIV S21, S20, S17
	0x03CE465C FRINTM S21, S21
	0x03CE4660 FMUL S21, S17, S21
	0x03CE4664 FSUB S20, S20, S21
	0x03CE4668 FCMP S20, S17
	0x03CE466C FCSEL S21, S17, S20, GT
	0x03CE4670 FCMP S20, 0x0
	0x03CE4674 FCSEL S20, S21, S19, PL
	0x03CE4678 FADD S9, S15, S20
	0x03CE467C MOV W9, W31
	0x03CE4680 TBNZ X8, 0x0, 0x3CE45A8
	0x03CE4684 B 0x3CE46C4
	0x03CE4688 FSUB S8, S8, S4
	0x03CE468C B 0x3CE46C4
	0x03CE4690 FMUL S0, S7, S20
	0x03CE4694 B 0x3CE46C0
	0x03CE4698 FSUB S0, S8, S1
	0x03CE469C FDIV S1, S0, S6
	0x03CE46A0 FRINTM S1, S1
	0x03CE46A4 FMUL S1, S6, S1
	0x03CE46A8 FSUB S0, S0, S1
	0x03CE46AC FCMP S0, S6
	0x03CE46B0 FCSEL S1, S6, S0, GT
	0x03CE46B4 FCMP S0, 0x0
	0x03CE46B8 FMOV S0, W31
	0x03CE46BC FCSEL S0, S1, S0, PL
	0x03CE46C0 FADD S8, S14, S0
	0x03CE46C4 LDP S1, S0, [X31 + 0xC]
	0x03CE46C8 FADD S1, S1, S8
	0x03CE46CC FADD S0, S0, S9
	0x03CE46D0 LDP X30, X19, [X31 + 0x60]
	0x03CE46D4 LDP D9, D8, [X31 + 0x50]
	0x03CE46D8 LDP D11, D10, [X31 + 0x40]
	0x03CE46DC LDP D13, D12, [X31 + 0x30]
	0x03CE46E0 LDP D15, D14, [X31 + 0x20]
	0x03CE46E4 ADD X31, X31, 0x70
	0x03CE46E8 RET
	0x03CE46EC BL 0x1C16F20
	0x03CE46F0 STP X30, X27, [X31 - 0x50]!
	0x03CE46F4 STP X26, X25, [X31 + 0x10]
	0x03CE46F8 STP X24, X23, [X31 + 0x20]
	0x03CE46FC STP X22, X21, [X31 + 0x30]
	0x03CE4700 STP X20, X19, [X31 + 0x40]
	0x03CE4704 ADRP X20, 0x703000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x704000
	006 Move X20, 0x410000
	007 Move W8, [X21+1247]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x410000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1247], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call MaskableGraphic.OnCanvasHierarchyChanged, X0
	022 Move X0, X19
	023 Call Graphic.get_canvas, X0
	024 Move X8, [X20]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {41}
	039 Move W8, 0x42C80000
	040 Move [X19+268], W8
	041 Move X0, X19
	042 Call Graphic.get_canvas, X0
	043 Compare X0, 0
	044 JumpIfEqual {78}
	045 Move X1, X31
	046 Call Canvas.get_referencePixelsPerUnit, X0
	047 Move V1, [X19+268]
	048 NotImplemented "Instruction FCMP not yet implemented."
	049 Move X0, X19
	050 Call Graphic.get_canvas, X0
	051 Compare X0, 0
	052 JumpIfEqual {78}
	053 Move X1, X31
	054 Call Canvas.get_referencePixelsPerUnit, X0
	055 Move W8, [X19+232]
	056 Move [X19+268], S0
	057 Subtract W8, W8, 1
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X8, [X19]
	060 Move X0, X19
	061 Move X9, [X8+760]
	062 Move X1, [X8+768]
	063 NotImplemented "Instruction BLR not yet implemented."
	064 Move X8, [X19]
	065 Move X0, X19
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move X2, [X8+744]
	069 Move X1, [X8+752]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 CallNoReturn X2
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Return 
	078 Call 0x1C17F20

Method: System.Void GenerateSimpleSprite(UnityEngine.UI.VertexHelper vh, System.Boolean lPreserveAspect)

Disassembly:
	0x03CE2198 ADD X8, X22, X23
	0x03CE219C FMOV D0, 2
	0x03CE21A0 SCVTF D1, X8
	0x03CE21A4 FADD D0, D1, D0
	0x03CE21A8 FADD D0, D0, D0
	0x03CE21AC FMOV D1, 4
	0x03CE21B0 FMUL D0, D0, D1
	0x03CE21B4 FCMP D0, D2
	0x03CE21B8 B.LE 0x3CE23AC
	0x03CE21BC MOV X0, X20
	0x03CE21C0 MOV X1, X31
	0x03CE21C4 BL 0x3C389D4
	0x03CE21C8 ADRP X8, 0x480000
	0x03CE21CC LDR X8, [X8 + 0x5C0]
	0x03CE21D0 ADRP X9, 0x480000
	0x03CE21D4 LDR X9, [X9 + 0x5C8]
	0x03CE21D8 MOV X1, X0
	0x03CE21DC LDR X8, [X8]
	0x03CE21E0 MOV X3, X31
	0x03CE21E4 LDR X2, [X9]
	0x03CE21E8 MOV X0, X8
	0x03CE21EC BL 0x32274B8
	0x03CE21F0 ADRP X8, 0x411000
	0x03CE21F4 LDR X8, [X8 + 0xA28]
	0x03CE21F8 MOV X21, X0
	0x03CE21FC LDR X8, [X8]
	0x03CE2200 LDR W9, [X8 + 0xE0]
	0x03CE2204 CBNZ W9, 0x3CE2210
	0x03CE2208 MOV X0, X8
	0x03CE220C BL 0x1C16DFC
	0x03CE2210 MOV X0, X21
	0x03CE2214 MOV X1, X20
	0x03CE2218 MOV X2, X31
	0x03CE221C BL 0x3C065A4
	0x03CE2220 LDR X0, [X24]
	0x03CE2224 ADRP X8, 0xFFFFFFFFFCE0B000
	0x03CE2228 SCVTF D0, X22
	0x03CE222C SCVTF D1, X23
	0x03CE2230 LDR V2, [X8 + 0x758]
	0x03CE2234 FDIV D0, D0, D1
	0x03CE2238 FMOV D1, 1
	0x03CE223C LDR W8, [X0 + 0xE0]
	0x03CE2240 FADD D1, D0, D1
	0x03CE2244 FADD D1, D1, D1
	0x03CE2248 FDIV D11, D2, D1
	0x03CE224C FMUL D10, D0, D11
	0x03CE2250 CBNZ W8, 0x3CE236C
	0x03CE2254 B 0x3CE2368
	0x03CE2258 MUL X8, X23, X22
	0x03CE225C SCVTF D0, X8
	0x03CE2260 ADRP X8, 0xFFFFFFFFFCE0B000
	0x03CE2264 LDR V1, [X8 + 0xE18]
	0x03CE2268 LDR V3, [X31 + 0x4C]
	0x03CE226C FMOV D2, 4
	0x03CE2270 FMUL D0, D0, D2
	0x03CE2274 FCMP D0, D1
	0x03CE2278 B.LE 0x3CE23B0
	0x03CE227C MOV X0, X20
	0x03CE2280 MOV X1, X31
	0x03CE2284 BL 0x3C389D4
	0x03CE2288 ADRP X8, 0x480000
	0x03CE228C LDR X8, [X8 + 0x5C0]
	0x03CE2290 ADRP X9, 0x480000
	0x03CE2294 LDR X9, [X9 + 0x5C8]
	0x03CE2298 MOV X1, X0
	0x03CE229C LDR X8, [X8]
	0x03CE22A0 MOV X3, X31
	0x03CE22A4 LDR X2, [X9]
	0x03CE22A8 MOV X0, X8
	0x03CE22AC BL 0x32274B8
	0x03CE22B0 ADRP X8, 0x411000
	0x03CE22B4 LDR X8, [X8 + 0xA28]
	0x03CE22B8 MOV X21, X0
	0x03CE22BC LDR X8, [X8]
	0x03CE22C0 LDR W9, [X8 + 0xE0]
	0x03CE22C4 CBNZ W9, 0x3CE22D0
	0x03CE22C8 MOV X0, X8
	0x03CE22CC BL 0x1C16DFC
	0x03CE22D0 MOV X0, X21
	0x03CE22D4 MOV X1, X20
	0x03CE22D8 MOV X2, X31
	0x03CE22DC BL 0x3C065A4
	0x03CE22E0 MOV X0, X20
	0x03CE22E4 BL 0x3CE075C
	0x03CE22E8 TBZ X0, 0x0, 0x3CE2310
	0x03CE22EC FMOV D0, 2
	0x03CE22F0 FADD D1, D10, D0
	0x03CE22F4 FADD D0, D12, D0
	0x03CE22F8 FDIV D10, D1, D0
	0x03CE22FC B 0x3CE2314
	0x03CE2300 MOV X0, X20
	0x03CE2304 BL 0x3CE075C
	0x03CE2308 TBZ X0, 0x0, 0x3CE27B4
	0x03CE230C B 0x3CE27E0
	0x03CE2310 FDIV D10, D10, D12
	0x03CE2314 LDR X0, [X24]
	0x03CE2318 LDR W8, [X0 + 0xE0]
	0x03CE231C CBNZ W8, 0x3CE2324
	0x03CE2320 BL 0x1C16DFC
	0x03CE2324 ADRP X8, 0xFFFFFFFFFCE0B000
	0x03CE2328 LDR V0, [X8 + 0xFE0]
	0x03CE232C MOV X0, X20
	0x03CE2330 FDIV D0, D0, D10
	0x03CE2334 FSQRT D11, D0
	0x03CE2338 FMUL D10, D10, D11
	0x03CE233C BL 0x3CE075C
	0x03CE2340 MOV W8, W0
	0x03CE2344 LDR X0, [X24]
	0x03CE2348 FMOV D0, -2
	0x03CE234C FADD D1, D11, D0
	0x03CE2350 FADD D0, D10, D0
	0x03CE2354 LDR W9, [X0 + 0xE0]
	0x03CE2358 ANDS W31, W8, 0x1
	0x03CE235C FCSEL D10, D0, D10, NE
	0x03CE2360 FCSEL D11, D1, D11, NE
	0x03CE2364 CBNZ W9, 0x3CE236C
	0x03CE2368 BL 0x1C16DFC
	0x03CE236C MOVZ X9, 0x7FF00000
	0x03CE2370 FRINTM D0, D11
	0x03CE2374 FMOV D2, X9
	0x03CE2378 FCVTMS X8, D11
	0x03CE237C MOVZ X10, 0x80000000
	0x03CE2380 FRINTM D1, D10
	0x03CE2384 FCMP D0, D2
	0x03CE2388 FCVTMS X11, D10
	0x03CE238C CSEL X22, X10, X8, EQ
	0x03CE2390 FCMP D1, D2
	0x03CE2394 CSEL X23, X10, X11, EQ
	0x03CE2398 SCVTF S0, X22
	0x03CE239C FDIV S11, S13, S0
	0x03CE23A0 SCVTF S0, X23
	0x03CE23A4 FDIV S0, S8, S0
	0x03CE23A8 STR S0, [X31 + 0x40]
	0x03CE23AC LDR V3, [X31 + 0x4C]
	0x03CE23B0 LDRB W8, [X20 + 0xED]
	0x03CE23B4 CBZ W8, 0x3CE2504
	0x03CE23B8 CMP X23, 0x1
	0x03CE23BC B.LT 0x3CE2504
	0x03CE23C0 LDR V8, [X31 + 0x2C]
	0x03CE23C4 LDP S0, S1, [X31 + 0x98]
	0x03CE23C8 ADRP X25, 0x480000
	0x03CE23CC MOV X24, X31
	0x03CE23D0 FSUB S0, S8, S0
	0x03CE23D4 STR S0, [X31 + 0x18]
	0x03CE23D8 LDR V0, [X31 + 0x34]
	0x03CE23DC LDR X25, [X25 + 0x580]
	0x03CE23E0 FSUB S12, S0, S1
	0x03CE23E4 LDR V2, [X31 + 0x40]
	0x03CE23E8 SCVTF S0, X24
	0x03CE23EC ADD X24, X24, 0x1
	0x03CE23F0 SCVTF S1, X24
	0x03CE23F4 FMUL S0, S2, S0
	0x03CE23F8 FMUL S1, S2, S1
	0x03CE23FC LDR V2, [X31 + 0x3C]
	0x03CE2400 FADD S1, S2, S1
	0x03CE2404 FCMP S1, S15
	0x03CE2408 FADD S0, S2, S0
	0x03CE240C B.LE 0x3CE2430
	0x03CE2410 LDR V4, [X31 + 0x18]
	0x03CE2414 FSUB S2, S15, S0
	0x03CE2418 FSUB S1, S1, S0
	0x03CE241C FMUL S2, S4, S2
	0x03CE2420 FDIV S1, S2, S1
	0x03CE2424 LDR V2, [X31 + 0x98]
	0x03CE2428 FADD S8, S2, S1
	0x03CE242C MOV V1.16B, V15.16B
	0x03CE2430 CMP X22, 0x1
	0x03CE2434 B.LT 0x3CE24F8
	0x03CE2438 LDP S2, S15, [X31 + 0x30]
	0x03CE243C MOV X26, X31
	0x03CE2440 FADD S9, S2, S0
	0x03CE2444 FADD S10, S2, S1
	0x03CE2448 LDR V2, [X31 + 0x48]
	0x03CE244C SCVTF S0, X26
	0x03CE2450 ADD X26, X26, 0x1
	0x03CE2454 SCVTF S1, X26
	0x03CE2458 FMUL S1, S11, S1

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X23, 0x706000
	017 Move X22, 0x412000
	018 Move W8, [X23+1248]
	019 Move X22, [X22+1432]
	020 Move W21, W2
	021 Move X19, X1
	022 Move X20, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {32}
	027 Move X0, 0x412000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X23+1248], W8
	032 And W1, W21, 1
	033 Move X0, X20
	034 Call Image.GetDrawingDimensions, X0, X1
	035 Move X0, X20
	036 Move V13, V0
	037 Move V8, V1
	038 Move V9, V2
	039 Move V10, V3
	040 Call Image.get_activeSprite, X0
	041 Move X8, [X22]
	042 Move X21, X0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Inequality, X0, X1
	052 Move [X31+24], S10
	053 Move [X31+32], S9
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {67}
	058 Move X0, X20
	059 Move V12, V8
	060 Call Image.get_activeSprite, X0
	061 Move X1, X31
	062 Call DataUtility.GetOuterUV, X0
	063 Move V15, V0
	064 Move [X31+16], S2
	065 Move [X31+24], S1
	066 Move [X31+12], S3
	067 Move X21, 0x6F7000
	068 Move W8, [X21+3674]
	069 Compare W8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, 0x419000
	072 Move X0, [X0+2464]
	073 Call 0x1C17CF4
	074 Move W8, 1
	075 Move [X21+3674], W8
	076 Move X8, 0x419000
	077 Move X8, [X8+2464]
	078 Move V12, V8
	079 Move X8, [X8]
	080 Move X8, [X8+184]
	081 Move S15, [X8]
	082 Move S1, [X8+4]
	083 Move V0, [X8+8]
	084 Move [X31+16], S0
	085 Move [X31+24], S1
	086 Move V0, [X8+12]
	087 Move [X31+12], S0
	088 Move X8, [X20]
	089 Move X0, X20
	090 Move X9, [X8+664]
	091 Move X1, [X8+672]
	092 NotImplemented "Instruction BLR not yet implemented."
	093 Compare X19, 0
	094 JumpIfEqual {204}
	095 Move X0, X19
	096 Move X1, X31
	097 Move V8, V0
	098 Move V9, V1
	099 Move V10, V2
	100 Move V11, V3
	101 Call VertexHelper.Clear, X0
	102 Move V0, V8
	103 Move V1, V9
	104 Move V2, V10
	105 Move V3, V11
	106 Move X0, X31
	107 Call 0x1E44664
	108 Move V14, [X31+20]
	109 And X1, X0, 0
	110 Move S2, W31
	111 Move S5, W31
	112 Move S6, W31
	113 Move X0, X19
	114 Move V0, V13
	115 Move V1, V12
	116 Move V3, V15
	117 Move V4, V14
	118 Move X2, X31
	119 Move [X31+8], S12
	120 Call VertexHelper.AddVert, X0, X1, X2, X3
	121 Move V0, V8
	122 Move V1, V9
	123 Move V2, V10
	124 Move V3, V11
	125 Move X0, X31
	126 Call 0x1E44664
	127 Move V0, V13
	128 Move V13, [X31+24]
	129 Move V12, [X31+12]
	130 And X1, X0, 0
	131 Move S2, W31
	132 Move S5, W31
	133 Move S6, W31
	134 Move X0, X19
	135 Move V1, V13
	136 Move V3, V15
	137 Move V4, V12
	138 Move X2, X31
	139 Call VertexHelper.AddVert, X0, X1, X2, X3
	140 Move V0, V8
	141 Move V1, V9
	142 Move V2, V10
	143 Move V3, V11
	144 Move X0, X31
	145 Call 0x1E44664
	146 Move V15, [X31+28]
	147 Move V1, V13
	148 Move V13, [X31+16]
	149 And X1, X0, 0
	150 Move S2, W31
	151 Move S5, W31
	152 Move S6, W31
	153 Move X0, X19
	154 Move V0, V15
	155 Move V3, V13
	156 Move V4, V12
	157 Move X2, X31
	158 Call VertexHelper.AddVert, X0, X1, X2, X3
	159 Move V0, V8
	160 Move V1, V9
	161 Move V2, V10
	162 Move V3, V11
	163 Move X0, X31
	164 Call 0x1E44664
	165 Move V1, [X31+8]
	166 And X1, X0, 0
	167 Move S2, W31
	168 Move S5, W31
	169 Move S6, W31
	170 Move X0, X19
	171 Move V0, V15
	172 Move V3, V13
	173 Move V4, V14
	174 Move X2, X31
	175 Call VertexHelper.AddVert, X0, X1, X2, X3
	176 Move W2, 1
	177 Move W3, 2
	178 Move X0, X19
	179 Move W1, W31
	180 Move X4, X31
	181 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	182 Move X0, X19
	183 Move X20, [X31+128]
	184 Move X19, [X31+136]
	185 Move X22, [X31+112]
	186 Move X21, [X31+120]
	187 Move X30, [X31+96]
	188 Move X23, [X31+104]
	189 Move D9, [X31+80]
	190 Move D8, [X31+88]
	191 Move D11, [X31+64]
	192 Move D10, [X31+72]
	193 Move D13, [X31+48]
	194 Move D12, [X31+56]
	195 Move D15, [X31+32]
	196 Move D14, [X31+40]
	197 Move W1, 2
	198 Move W2, 3
	199 Move W3, W31
	200 Move X4, X31
	201 Add X31, X31, 144
	202 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	203 Return 
	204 Call 0x1C17F20

Method: System.Void GenerateSprite(UnityEngine.UI.VertexHelper vh, System.Boolean lPreserveAspect)

Disassembly:
	0x03CE245C FMUL S0, S11, S0
	0x03CE2460 FADD S13, S2, S1
	0x03CE2464 FCMP S13, S3
	0x03CE2468 FADD S14, S2, S0
	0x03CE246C B.LE 0x3CE248C
	0x03CE2470 FSUB S0, S3, S14
	0x03CE2474 FMUL S0, S12, S0
	0x03CE2478 FSUB S1, S13, S14
	0x03CE247C FDIV S0, S0, S1
	0x03CE2480 LDR V1, [X31 + 0x9C]
	0x03CE2484 MOV V13.16B, V3.16B
	0x03CE2488 FADD S15, S1, S0
	0x03CE248C LDR X8, [X20]
	0x03CE2490 MOV X0, X20
	0x03CE2494 LDR X9, [X8 + 0x298]
	0x03CE2498 LDR X1, [X8 + 0x2A0]
	0x03CE249C BLR X9
	0x03CE24A0 MOV X0, X31
	0x03CE24A4 BL 0x1E43664
	0x03CE24A8 LDR X8, [X25]
	0x03CE24AC MOV X21, X0
	0x03CE24B0 LDR W9, [X8 + 0xE0]
	0x03CE24B4 CBNZ W9, 0x3CE24C0
	0x03CE24B8 MOV X0, X8
	0x03CE24BC BL 0x1C16DFC
	0x03CE24C0 LDR V1, [X31 + 0x44]
	0x03CE24C4 LDP S5, S4, [X31 + 0x98]
	0x03CE24C8 AND X1, X21, 0x0
	0x03CE24CC MOV X0, X19
	0x03CE24D0 FADD S0, S1, S14
	0x03CE24D4 FADD S2, S1, S13
	0x03CE24D8 MOV V1.16B, V9.16B
	0x03CE24DC MOV V3.16B, V10.16B
	0x03CE24E0 MOV V6.16B, V15.16B
	0x03CE24E4 MOV V7.16B, V8.16B
	0x03CE24E8 BL 0x3CE37C8
	0x03CE24EC LDR V3, [X31 + 0x4C]
	0x03CE24F0 CMP X22, X26
	0x03CE24F4 B.NE 0x3CE2448
	0x03CE24F8 LDR V15, [X31 + 0x38]
	0x03CE24FC CMP X24, X23
	0x03CE2500 B.NE 0x3CE23E4
	0x03CE2504 MOV X0, X20
	0x03CE2508 BL 0x3CE075C
	0x03CE250C LDR V14, [X31 + 0x30]
	0x03CE2510 TBZ X0, 0x0, 0x3CE27B4
	0x03CE2514 CMP X23, 0x1
	0x03CE2518 B.LT 0x3CE265C
	0x03CE251C LDP S1, S2, [X31 + 0x44]
	0x03CE2520 LDR V9, [X31 + 0x2C]
	0x03CE2524 LDR V0, [X31 + 0x98]
	0x03CE2528 ADRP X25, 0x480000
	0x03CE252C FADD S3, S1, S2
	0x03CE2530 LDR V2, [X31 + 0x4C]
	0x03CE2534 FSUB S12, S9, S0
	0x03CE2538 FMOV S0, W31
	0x03CE253C MOV X24, X31
	0x03CE2540 FADD S2, S1, S2
	0x03CE2544 STP S2, S3, [X31 + 0x14]
	0x03CE2548 LDR V2, [X31 + 0x8]
	0x03CE254C FADD S8, S1, S0
	0x03CE2550 FADD S2, S2, S1
	0x03CE2554 STR S2, [X31 + 0x10]
	0x03CE2558 LDR X25, [X25 + 0x580]
	0x03CE255C LDR V2, [X31 + 0x40]
	0x03CE2560 SCVTF S0, X24
	0x03CE2564 ADD X24, X24, 0x1
	0x03CE2568 SCVTF S1, X24
	0x03CE256C FMUL S0, S2, S0
	0x03CE2570 FMUL S1, S2, S1
	0x03CE2574 LDR V2, [X31 + 0x3C]
	0x03CE2578 FADD S13, S2, S1
	0x03CE257C FCMP S13, S15
	0x03CE2580 FADD S10, S2, S0
	0x03CE2584 B.LE 0x3CE25A4
	0x03CE2588 FSUB S0, S15, S10
	0x03CE258C FMUL S0, S12, S0
	0x03CE2590 FSUB S1, S13, S10
	0x03CE2594 FDIV S0, S0, S1
	0x03CE2598 LDR V1, [X31 + 0x98]
	0x03CE259C MOV V13.16B, V15.16B
	0x03CE25A0 FADD S9, S1, S0
	0x03CE25A4 LDR X8, [X20]
	0x03CE25A8 MOV X0, X20
	0x03CE25AC LDR X9, [X8 + 0x298]
	0x03CE25B0 LDR X1, [X8 + 0x2A0]
	0x03CE25B4 BLR X9
	0x03CE25B8 MOV X0, X31
	0x03CE25BC BL 0x1E43664
	0x03CE25C0 LDR X8, [X25]
	0x03CE25C4 MOV X21, X0
	0x03CE25C8 LDR W9, [X8 + 0xE0]
	0x03CE25CC CBNZ W9, 0x3CE25D8
	0x03CE25D0 MOV X0, X8
	0x03CE25D4 BL 0x1C16DFC
	0x03CE25D8 FADD S15, S14, S10
	0x03CE25DC FADD S10, S14, S13
	0x03CE25E0 LDP S13, S6, [X31 + 0x98]
	0x03CE25E4 LDR V2, [X31 + 0x18]
	0x03CE25E8 LDR V4, [X31 + 0x20]
	0x03CE25EC AND X1, X21, 0x0
	0x03CE25F0 MOV X0, X19
	0x03CE25F4 MOV V0.16B, V8.16B
	0x03CE25F8 MOV V1.16B, V15.16B
	0x03CE25FC MOV V3.16B, V10.16B
	0x03CE2600 MOV V5.16B, V13.16B
	0x03CE2604 MOV V7.16B, V9.16B
	0x03CE2608 BL 0x3CE37C8
	0x03CE260C LDR X8, [X20]
	0x03CE2610 MOV X0, X20
	0x03CE2614 LDR X9, [X8 + 0x298]
	0x03CE2618 LDR X1, [X8 + 0x2A0]
	0x03CE261C BLR X9
	0x03CE2620 MOV X0, X31
	0x03CE2624 BL 0x1E43664
	0x03CE2628 LDP S2, S0, [X31 + 0x10]
	0x03CE262C LDR V4, [X31 + 0x34]
	0x03CE2630 LDR V6, [X31 + 0x28]
	0x03CE2634 AND X1, X0, 0x0
	0x03CE2638 MOV X0, X19
	0x03CE263C MOV V1.16B, V15.16B
	0x03CE2640 MOV V3.16B, V10.16B
	0x03CE2644 MOV V5.16B, V13.16B
	0x03CE2648 MOV V7.16B, V9.16B
	0x03CE264C BL 0x3CE37C8
	0x03CE2650 LDR V15, [X31 + 0x38]
	0x03CE2654 CMP X23, X24
	0x03CE2658 B.NE 0x3CE255C
	0x03CE265C LDR V1, [X31 + 0xC]
	0x03CE2660 CMP X22, 0x0
	0x03CE2664 B.LE 0x3CE27E0
	0x03CE2668 MOV V2.16B, V15.16B
	0x03CE266C LDR V15, [X31 + 0x34]
	0x03CE2670 LDR V0, [X31 + 0x9C]
	0x03CE2674 LDR V3, [X31 + 0x3C]
	0x03CE2678 FADD S2, S14, S2
	0x03CE267C ADRP X24, 0x480000
	0x03CE2680 FSUB S0, S15, S0
	0x03CE2684 FADD S3, S14, S3
	0x03CE2688 STR S0, [X31 + 0x18]
	0x03CE268C FMOV S0, W31
	0x03CE2690 STP S2, S3, [X31 + 0x3C]
	0x03CE2694 FADD S10, S1, S14
	0x03CE2698 FADD S12, S14, S0
	0x03CE269C LDR X24, [X24 + 0x580]
	0x03CE26A0 LDR V14, [X31 + 0x44]
	0x03CE26A4 MOV X23, X31
	0x03CE26A8 LDR V2, [X31 + 0x48]
	0x03CE26AC SCVTF S0, X23
	0x03CE26B0 ADD X23, X23, 0x1
	0x03CE26B4 SCVTF S1, X23
	0x03CE26B8 FMUL S1, S11, S1
	0x03CE26BC FADD S13, S2, S1
	0x03CE26C0 MOV V1.16B, V2.16B
	0x03CE26C4 LDR V2, [X31 + 0x4C]
	0x03CE26C8 FMUL S0, S11, S0
	0x03CE26CC FADD S8, S1, S0
	0x03CE26D0 FCMP S13, S2
	0x03CE26D4 B.LE 0x3CE26F8
	0x03CE26D8 LDR V1, [X31 + 0x18]
	0x03CE26DC FSUB S0, S2, S8
	0x03CE26E0 FMUL S0, S1, S0
	0x03CE26E4 FSUB S1, S13, S8
	0x03CE26E8 FDIV S0, S0, S1
	0x03CE26EC LDR V1, [X31 + 0x9C]
	0x03CE26F0 MOV V13.16B, V2.16B
	0x03CE26F4 FADD S15, S1, S0
	0x03CE26F8 LDR X8, [X20]
	0x03CE26FC MOV X0, X20
	0x03CE2700 LDR X9, [X8 + 0x298]
	0x03CE2704 LDR X1, [X8 + 0x2A0]
	0x03CE2708 BLR X9
	0x03CE270C MOV X0, X31
	0x03CE2710 BL 0x1E43664
	0x03CE2714 LDR X8, [X24]
	0x03CE2718 MOV X21, X0
	0x03CE271C LDR W9, [X8 + 0xE0]
	0x03CE2720 CBNZ W9, 0x3CE272C
	0x03CE2724 MOV X0, X8
	0x03CE2728 BL 0x1C16DFC
	0x03CE272C FADD S9, S14, S8
	0x03CE2730 FADD S8, S14, S13
	0x03CE2734 LDP S7, S13, [X31 + 0x98]
	0x03CE2738 LDR V3, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+160], D14
	003 Move [X31+168], D13
	004 Move [X31+176], D12
	005 Move [X31+184], D11
	006 Move [X31+192], D10
	007 Move [X31+200], D9
	008 Move [X31+208], D8
	009 Move [X31+216], X29
	010 Move [X31+224], X30
	011 Move [X31+232], X25
	012 Move [X31+240], X24
	013 Move [X31+248], X23
	014 Move [X31+256], X22
	015 Move [X31+264], X21
	016 Move [X31+272], X20
	017 Move [X31+280], X19
	018 Move W21, W2
	019 Move X19, X1
	020 Move X20, X0
	021 Call Image.get_activeSprite, X0
	022 Compare X0, 0
	023 JumpIfEqual {211}
	024 Move X1, X31
	025 Call Sprite.get_rect, X0
	026 Move X0, X20
	027 Move [X31+80], D2
	028 Call Image.get_activeSprite, X0
	029 Compare X0, 0
	030 JumpIfEqual {211}
	031 Move X1, X31
	032 Call Sprite.get_rect, X0
	033 Move X0, X20
	034 Move [X31+64], D3
	035 Call Image.get_activeSprite, X0
	036 Compare X0, 0
	037 JumpIfEqual {211}
	038 Move X1, X31
	039 Call Sprite.get_pivot, X0
	040 Move X0, X20
	041 Move [X31+48], D0
	042 Move [X31+32], D1
	043 Call Graphic.get_rectTransform, X0
	044 Compare X0, 0
	045 JumpIfEqual {211}
	046 Move X1, X31
	047 Call RectTransform.get_pivot, X0
	048 Move X0, X20
	049 Move [X31+16], D0
	050 Move [X31], D1
	051 Call Graphic.GetPixelAdjustedRect, X0
	052 Move [X31+144], S0
	053 Move [X31+152], S1
	054 Move V1, [X31+64]
	055 Move V0, [X31+80]
	056 Move [X31+152], S2
	057 Move [X31+160], S3
	058 Move V2.S[1], V3.S[0]
	059 Move [X31+6], V2
	060 Multiply S0, S0, S0
	061 Multiply S1, S1, S1
	062 Add S0, S0, S1
	063 NotImplemented "Instruction FCMP not yet implemented."
	064 Move TEMP, X21
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {75}
	068 Add X1, X31, 144
	069 Move X0, X20
	070 Move V1, [X31+64]
	071 Move V0, [X31+80]
	072 Call Image.PreserveSpriteAspectRatio, X0, X1, X2
	073 Move V0, [X31+152]
	074 Move [X31+6], V0
	075 Move X0, X20
	076 Call Image.get_activeSprite, X0
	077 Compare X0, 0
	078 JumpIfEqual {211}
	079 Add X8, X31, 120
	080 Move X1, X31
	081 Call Sprite.get_bounds, X0
	082 Move X8, [X20]
	083 NotImplemented "Instruction LDUR not yet implemented."
	084 Move X0, X20
	085 Move X9, [X8+664]
	086 Move X1, [X8+672]
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Compare X19, 0
	089 JumpIfEqual {211}
	090 Move X0, X19
	091 Move X1, X31
	092 Move V8, V0
	093 Move V9, V1
	094 Move V10, V2
	095 Move V11, V3
	096 Call VertexHelper.Clear, X0
	097 Move X0, X20
	098 Call Image.get_activeSprite, X0
	099 Compare X0, 0
	100 JumpIfEqual {211}
	101 Move X1, X31
	102 Call Sprite.get_vertices, X0
	103 Move X21, X0
	104 Move X0, X20
	105 Call Image.get_activeSprite, X0
	106 Compare X0, 0
	107 JumpIfEqual {211}
	108 Move X1, X31
	109 Call Sprite.get_uv, X0
	110 Compare X21, 0
	111 JumpIfEqual {211}
	112 Move X8, [X21+24]
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move V0, [X31+32]
	115 Move V1, [X31+48]
	116 Move X22, X0
	117 Move X23, X31
	118 Add V12, V12, V12
	119 Move V1.S[1], V0.S[0]
	120 Move V2, [X31+64]
	121 Move V0, [X31+80]
	122 And X8, X8, 0
	123 Add X24, X0, 36
	124 Add X25, X21, 32
	125 Move V0.S[1], V2.S[0]
	126 Move V3, [X31]
	127 Move V2, [X31+16]
	128 NotImplemented "Instruction INVALID not yet implemented."
	129 Move V1, [X31+6]
	130 Move V2.S[1], V3.S[0]
	131 Subtract V0, V2, V0
	132 NotImplemented "Instruction INVALID not yet implemented."
	133 NotImplemented "Instruction CMP not yet implemented."
	134 Move V14, [X25]
	135 Move V0, V8
	136 Move V1, V9
	137 Move V2, V10
	138 Move V3, V11
	139 Move X0, X31
	140 Call 0x1E44664
	141 Compare X22, 0
	142 JumpIfEqual {211}
	143 Move W8, [X22+24]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 Move V1, [X31+6]
	146 NotImplemented "Instruction INVALID not yet implemented."
	147 Move S3, [X24-4]
	148 Move S4, [X24]
	149 And X1, X0, 0
	150 NotImplemented "Instruction INVALID not yet implemented."
	151 Subtract V0, V0, V13
	152 Move S1, V0.S[1]
	153 Move S2, W31
	154 Move S5, W31
	155 Move S6, W31
	156 Move X0, X19
	157 Move X2, X31
	158 Call VertexHelper.AddVert, X0, X1, X2, X3
	159 Move W8, [X21+24]
	160 Add X23, X23, 1
	161 Add X24, X24, 8
	162 NotImplemented "Instruction CMP not yet implemented."
	163 Move X0, X20
	164 Call Image.get_activeSprite, X0
	165 Compare X0, 0
	166 JumpIfEqual {211}
	167 Move X1, X31
	168 Call Sprite.get_triangles, X0
	169 Compare X0, 0
	170 JumpIfEqual {211}
	171 Move W8, [X0+24]
	172 Move X20, X0
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move W9, W31
	175 NotImplemented "Instruction CMP not yet implemented."
	176 Add W10, W9, 1
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Add W21, W10, 1
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Add X8, X20, W9
	181 Add W9, W9, 2
	182 Add X11, X20, 32
	183 NotImplemented "Instruction LDRH not yet implemented."
	184 NotImplemented "Instruction LDRH not yet implemented."
	185 NotImplemented "Instruction LDRH not yet implemented."
	186 Move X0, X19
	187 Move X4, X31
	188 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	189 Move W8, [X20+24]
	190 Add W9, W21, 1
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X20, [X31+272]
	193 Move X19, [X31+280]
	194 Move X22, [X31+256]
	195 Move X21, [X31+264]
	196 Move X24, [X31+240]
	197 Move X23, [X31+248]
	198 Move X30, [X31+224]
	199 Move X25, [X31+232]
	200 Move X29, [X31+216]
	201 Move D9, [X31+200]
	202 Move D8, [X31+208]
	203 Move D11, [X31+184]
	204 Move D10, [X31+192]
	205 Move D13, [X31+168]
	206 Move D12, [X31+176]
	207 Move V14, [X31+160]
	208 Add X31, X31, 288
	209 Return 
	210 Call 0x1C17F28
	211 Call 0x1C17F20

Method: System.Void GenerateSlicedSprite(UnityEngine.UI.VertexHelper toFill)

Disassembly:
	0x03CE273C LDR V5, [X31 + 0x1C]
	0x03CE2740 AND X1, X21, 0x0
	0x03CE2744 MOV X0, X19
	0x03CE2748 MOV V0.16B, V9.16B
	0x03CE274C MOV V1.16B, V12.16B
	0x03CE2750 MOV V2.16B, V8.16B
	0x03CE2754 MOV V4.16B, V13.16B
	0x03CE2758 MOV V6.16B, V15.16B
	0x03CE275C BL 0x3CE37C8
	0x03CE2760 LDR X8, [X20]
	0x03CE2764 MOV X0, X20
	0x03CE2768 LDR X9, [X8 + 0x298]
	0x03CE276C LDR X1, [X8 + 0x2A0]
	0x03CE2770 BLR X9
	0x03CE2774 MOV X0, X31
	0x03CE2778 BL 0x1E43664
	0x03CE277C LDR V1, [X31 + 0x3C]
	0x03CE2780 LDR V5, [X31 + 0x2C]
	0x03CE2784 LDR V7, [X31 + 0x24]
	0x03CE2788 AND X1, X0, 0x0
	0x03CE278C MOV X0, X19
	0x03CE2790 MOV V0.16B, V9.16B
	0x03CE2794 MOV V2.16B, V8.16B
	0x03CE2798 MOV V3.16B, V10.16B
	0x03CE279C MOV V4.16B, V13.16B
	0x03CE27A0 MOV V6.16B, V15.16B
	0x03CE27A4 BL 0x3CE37C8
	0x03CE27A8 CMP X22, X23
	0x03CE27AC B.NE 0x3CE26A8
	0x03CE27B0 B 0x3CE27F8
	0x03CE27B4 LDP X20, X19, [X31 + 0xD0]
	0x03CE27B8 LDP X22, X21, [X31 + 0xC0]
	0x03CE27BC LDP X24, X23, [X31 + 0xB0]
	0x03CE27C0 LDP X26, X25, [X31 + 0xA0]
	0x03CE27C4 LDR X30, [X31 + 0x90]
	0x03CE27C8 LDP D9, D8, [X31 + 0x80]
	0x03CE27CC LDP D11, D10, [X31 + 0x70]
	0x03CE27D0 LDP D13, D12, [X31 + 0x60]
	0x03CE27D4 LDP D15, D14, [X31 + 0x50]
	0x03CE27D8 ADD X31, X31, 0xE0
	0x03CE27DC RET
	0x03CE27E0 FMOV S0, W31
	0x03CE27E4 FADD S12, S14, S0
	0x03CE27E8 LDR V0, [X31 + 0x3C]
	0x03CE27EC FADD S0, S14, S0
	0x03CE27F0 LDR V14, [X31 + 0x44]
	0x03CE27F4 STR S0, [X31 + 0x40]
	0x03CE27F8 LDR X8, [X20]
	0x03CE27FC FMOV S0, W31
	0x03CE2800 FADD S9, S14, S0
	0x03CE2804 LDR V0, [X31 + 0x48]
	0x03CE2808 LDR X9, [X8 + 0x298]
	0x03CE280C LDR X1, [X8 + 0x2A0]
	0x03CE2810 MOV X0, X20
	0x03CE2814 FADD S8, S14, S0
	0x03CE2818 BLR X9
	0x03CE281C MOV X0, X31
	0x03CE2820 BL 0x1E43664
	0x03CE2824 ADRP X8, 0x480000
	0x03CE2828 LDR X8, [X8 + 0x580]
	0x03CE282C MOV X21, X0
	0x03CE2830 MOV V11.16B, V14.16B
	0x03CE2834 LDR X8, [X8]
	0x03CE2838 LDR W9, [X8 + 0xE0]
	0x03CE283C CBNZ W9, 0x3CE2848
	0x03CE2840 MOV X0, X8
	0x03CE2844 BL 0x1C16DFC
	0x03CE2848 MOV V0.16B, V9.16B
	0x03CE284C MOV V2.16B, V8.16B
	0x03CE2850 LDR V15, [X31 + 0x40]
	0x03CE2854 STP S9, S8, [X31 + 0x44]
	0x03CE2858 LDP S14, S8, [X31 + 0x1C]
	0x03CE285C LDP S9, S10, [X31 + 0x98]
	0x03CE2860 AND X1, X21, 0x0
	0x03CE2864 MOV X0, X19
	0x03CE2868 MOV V1.16B, V12.16B
	0x03CE286C MOV V3.16B, V15.16B
	0x03CE2870 MOV V4.16B, V8.16B
	0x03CE2874 MOV V5.16B, V14.16B
	0x03CE2878 MOV V6.16B, V10.16B
	0x03CE287C MOV V7.16B, V9.16B
	0x03CE2880 BL 0x3CE37C8
	0x03CE2884 LDR X8, [X20]
	0x03CE2888 LDR V0, [X31 + 0x4C]
	0x03CE288C MOV X0, X20
	0x03CE2890 LDR X9, [X8 + 0x298]
	0x03CE2894 LDR X1, [X8 + 0x2A0]
	0x03CE2898 FADD S13, S11, S0
	0x03CE289C LDR V0, [X31 + 0x8]
	0x03CE28A0 FADD S11, S0, S11
	0x03CE28A4 BLR X9
	0x03CE28A8 MOV X0, X31
	0x03CE28AC BL 0x1E43664
	0x03CE28B0 MOV V1.16B, V12.16B
	0x03CE28B4 MOV V2.16B, V11.16B
	0x03CE28B8 MOV V12.16B, V11.16B
	0x03CE28BC MOV V3.16B, V15.16B
	0x03CE28C0 LDR V11, [X31 + 0x34]
	0x03CE28C4 LDR V15, [X31 + 0x28]
	0x03CE28C8 AND X1, X0, 0x0
	0x03CE28CC MOV X0, X19
	0x03CE28D0 MOV V0.16B, V13.16B
	0x03CE28D4 MOV V4.16B, V11.16B
	0x03CE28D8 MOV V5.16B, V14.16B
	0x03CE28DC MOV V6.16B, V15.16B
	0x03CE28E0 MOV V7.16B, V9.16B
	0x03CE28E4 BL 0x3CE37C8
	0x03CE28E8 LDR X8, [X20]
	0x03CE28EC LDR V0, [X31 + 0x30]
	0x03CE28F0 LDR V1, [X31 + 0x38]
	0x03CE28F4 MOV X0, X20
	0x03CE28F8 LDR X9, [X8 + 0x298]
	0x03CE28FC LDR X1, [X8 + 0x2A0]
	0x03CE2900 FADD S9, S0, S1
	0x03CE2904 LDR V1, [X31 + 0xC]
	0x03CE2908 FADD S14, S1, S0
	0x03CE290C BLR X9
	0x03CE2910 MOV X0, X31
	0x03CE2914 BL 0x1E43664
	0x03CE2918 MOV V4.16B, V8.16B
	0x03CE291C LDR V8, [X31 + 0x2C]
	0x03CE2920 MOV V6.16B, V10.16B
	0x03CE2924 LDR V10, [X31 + 0x24]
	0x03CE2928 LDP S0, S2, [X31 + 0x44]
	0x03CE292C AND X1, X0, 0x0
	0x03CE2930 MOV X0, X19
	0x03CE2934 MOV V1.16B, V9.16B
	0x03CE2938 MOV V3.16B, V14.16B
	0x03CE293C MOV V5.16B, V8.16B
	0x03CE2940 MOV V7.16B, V10.16B
	0x03CE2944 BL 0x3CE37C8
	0x03CE2948 LDR X8, [X20]
	0x03CE294C MOV X0, X20
	0x03CE2950 LDR X9, [X8 + 0x298]
	0x03CE2954 LDR X1, [X8 + 0x2A0]
	0x03CE2958 BLR X9
	0x03CE295C MOV X0, X31
	0x03CE2960 BL 0x1E43664
	0x03CE2964 AND X1, X0, 0x0
	0x03CE2968 MOV X0, X19
	0x03CE296C MOV V0.16B, V13.16B
	0x03CE2970 MOV V1.16B, V9.16B
	0x03CE2974 MOV V2.16B, V12.16B
	0x03CE2978 MOV V3.16B, V14.16B
	0x03CE297C MOV V4.16B, V11.16B
	0x03CE2980 MOV V5.16B, V8.16B
	0x03CE2984 MOV V6.16B, V15.16B
	0x03CE2988 MOV V7.16B, V10.16B
	0x03CE298C LDP X20, X19, [X31 + 0xD0]
	0x03CE2990 LDP X22, X21, [X31 + 0xC0]
	0x03CE2994 LDP X24, X23, [X31 + 0xB0]
	0x03CE2998 LDP X26, X25, [X31 + 0xA0]
	0x03CE299C LDR X30, [X31 + 0x90]
	0x03CE29A0 LDP D9, D8, [X31 + 0x80]
	0x03CE29A4 LDP D11, D10, [X31 + 0x70]
	0x03CE29A8 LDP D13, D12, [X31 + 0x60]
	0x03CE29AC LDP D15, D14, [X31 + 0x50]
	0x03CE29B0 ADD X31, X31, 0xE0
	0x03CE29B4 B 0x3CE37C8
	0x03CE29B8 BL 0x1C16F20
	0x03CE29BC SUB X31, X31, 0x90
	0x03CE29C0 STP D15, D14, [X31 + 0x10]
	0x03CE29C4 STP D13, D12, [X31 + 0x20]
	0x03CE29C8 STP D11, D10, [X31 + 0x30]
	0x03CE29CC STP D9, D8, [X31 + 0x40]
	0x03CE29D0 STR X30, [X31 + 0x50]
	0x03CE29D4 STP X24, X23, [X31 + 0x60]
	0x03CE29D8 STP X22, X21, [X31 + 0x70]
	0x03CE29DC STP X20, X19, [X31 + 0x80]
	0x03CE29E0 ADRP X22, 0x705000
	0x03CE29E4 LDRB W8, [X22 + 0x4E3]
	0x03CE29E8 MOV W21, W2
	0x03CE29EC MOV X19, X1
	0x03CE29F0 MOV X20, X0
	0x03CE29F4 TBNZ X8, 0x0, 0x3CE2A24
	0x03CE29F8 ADRP X0, 0x480000
	0x03CE29FC LDR X0, [X0 + 0x580]
	0x03CE2A00 BL 0x1C16CF4
	0x03CE2A04 ADRP X0, 0x411000
	0x03CE2A08 LDR X0, [X0 + 0x598]
	0x03CE2A0C BL 0x1C16CF4
	0x03CE2A10 ADRP X0, 0x43C000
	0x03CE2A14 LDR X0, [X0 + 0x7E8]
	0x03CE2A18 BL 0x1C16CF4
	0x03CE2A1C MOVZ W8, 0x1
	0x03CE2A20 STRB W8, [X22 + 0x4E3]
	0x03CE2A24 CBZ X19, 0x3CE32A0
	0x03CE2A28 MOV X0, X19
	0x03CE2A2C MOV X1, X31
	0x03CE2A30 BL 0x3E39938
	0x03CE2A34 ADRP X8, 0xFFFFFFFFFCE08000
	0x03CE2A38 LDR V0, [X20 + 0xF4]
	0x03CE2A3C LDR V1, [X8 + 0x410]
	0x03CE2A40 FCMP S0, S1
	0x03CE2A44 B.MI 0x3CE3274
	0x03CE2A48 AND W1, W21, 0x1
	0x03CE2A4C MOV X0, X20
	0x03CE2A50 BL 0x3CE0B64
	0x03CE2A54 MOV X0, X20
	0x03CE2A58 STR S0, [X31 + 0x5C]
	0x03CE2A5C MOV V8.16B, V1.16B
	0x03CE2A60 MOV V13.16B, V2.16B
	0x03CE2A64 MOV V12.16B, V3.16B
	0x03CE2A68 BL 0x3CDFE9C
	0x03CE2A6C ADRP X8, 0x411000
	0x03CE2A70 LDR X8, [X8 + 0x598]
	0x03CE2A74 MOV X21, X0
	0x03CE2A78 LDR X8, [X8]
	0x03CE2A7C LDR W9, [X8 + 0xE0]
	0x03CE2A80 CBNZ W9, 0x3CE2A8C
	0x03CE2A84 MOV X0, X8
	0x03CE2A88 BL 0x1C16DFC
	0x03CE2A8C MOV X0, X21
	0x03CE2A90 MOV X1, X31
	0x03CE2A94 MOV X2, X31
	0x03CE2A98 BL 0x3C354F8
	0x03CE2A9C TBZ X0, 0x0, 0x3CE2AC4
	0x03CE2AA0 MOV X0, X20
	0x03CE2AA4 BL 0x3CDFE9C
	0x03CE2AA8 MOV X1, X31
	0x03CE2AAC BL 0x3C425C4
	0x03CE2AB0 MOV V9.16B, V0.16B
	0x03CE2AB4 MOV V10.16B, V1.16B
	0x03CE2AB8 MOV V15.16B, V2.16B
	0x03CE2ABC MOV V14.16B, V3.16B
	0x03CE2AC0 B 0x3CE2AFC
	0x03CE2AC4 ADRP X21, 0x6F6000
	0x03CE2AC8 LDRB W8, [X21 + 0xE5A]
	0x03CE2ACC CBNZ W8, 0x3CE2AE4
	0x03CE2AD0 ADRP X0, 0x418000
	0x03CE2AD4 LDR X0, [X0 + 0x9A0]
	0x03CE2AD8 BL 0x1C16CF4
	0x03CE2ADC MOVZ W8, 0x1
	0x03CE2AE0 STRB W8, [X21 + 0xE5A]
	0x03CE2AE4 ADRP X8, 0x418000
	0x03CE2AE8 LDR X8, [X8 + 0x9A0]
	0x03CE2AEC LDR X8, [X8]
	0x03CE2AF0 LDR X8, [X8 + 0xB8]
	0x03CE2AF4 LDP S9, S10, [X8]
	0x03CE2AF8 LDP S15, S14, [X8 + 0x8]
	0x03CE2AFC ADRP X8, 0x43C000
	0x03CE2B00 LDR X8, [X8 + 0x7E8]
	0x03CE2B04 LDR X0, [X8]
	0x03CE2B08 LDR W8, [X0 + 0xE0]
	0x03CE2B0C CBNZ W8, 0x3CE2B14
	0x03CE2B10 BL 0x1C16DFC
	0x03CE2B14 LDR X8, [X20]
	0x03CE2B18 MOV X0, X20
	0x03CE2B1C LDR X9, [X8 + 0x298]
	0x03CE2B20 LDR X1, [X8 + 0x2A0]
	0x03CE2B24 BLR X9
	0x03CE2B28 MOV X0, X31
	0x03CE2B2C BL 0x1E43664
	0x03CE2B30 LDR W8, [X20 + 0xF0]
	0x03CE2B34 CMP W8, 0x1
	0x03CE2B38 B.EQ 0x3CE2B74
	0x03CE2B3C CBNZ W8, 0x3CE2BB8
	0x03CE2B40 LDR V2, [X31 + 0x5C]
	0x03CE2B44 LDR V1, [X20 + 0xF4]
	0x03CE2B48 LDR W8, [X20 + 0xFC]
	0x03CE2B4C FSUB S0, S15, S9
	0x03CE2B50 FSUB S2, S13, S2
	0x03CE2B54 FMUL S0, S0, S1
	0x03CE2B58 CMP W8, 0x1
	0x03CE2B5C FMUL S1, S2, S1
	0x03CE2B60 B.NE 0x3CE2BA0
	0x03CE2B64 FSUB S1, S13, S1
	0x03CE2B68 STR S1, [X31 + 0x5C]
	0x03CE2B6C FSUB S9, S15, S0
	0x03CE2B70 B 0x3CE2BB8
	0x03CE2B74 LDR V1, [X20 + 0xF4]
	0x03CE2B78 LDR W8, [X20 + 0xFC]
	0x03CE2B7C FSUB S0, S14, S10
	0x03CE2B80 FSUB S2, S12, S8
	0x03CE2B84 FMUL S0, S0, S1
	0x03CE2B88 CMP W8, 0x1
	0x03CE2B8C FMUL S1, S2, S1
	0x03CE2B90 B.NE 0x3CE2BB0
	0x03CE2B94 FSUB S8, S12, S1
	0x03CE2B98 FSUB S10, S14, S0
	0x03CE2B9C B 0x3CE2BB8
	0x03CE2BA0 LDR V2, [X31 + 0x5C]
	0x03CE2BA4 FADD S15, S9, S0
	0x03CE2BA8 FADD S13, S2, S1
	0x03CE2BAC B 0x3CE2BB8
	0x03CE2BB0 FADD S12, S8, S1
	0x03CE2BB4 FADD S14, S10, S0
	0x03CE2BB8 ADRP X22, 0x480000
	0x03CE2BBC LDR X22, [X22 + 0x580]
	0x03CE2BC0 LDR X0, [X22]
	0x03CE2BC4 LDR W8, [X0 + 0xE0]
	0x03CE2BC8 CBNZ W8, 0x3CE2BD4
	0x03CE2BCC BL 0x1C16DFC
	0x03CE2BD0 LDR X0, [X22]
	0x03CE2BD4 LDR X8, [X0 + 0xB8]
	0x03CE2BD8 LDR X8, [X8 + 0x18]
	0x03CE2BDC CBZ X8, 0x3CE32A0
	0x03CE2BE0 LDR W9, [X8 + 0x18]
	0x03CE2BE4 CBZ W9, 0x3CE329C
	0x03CE2BE8 LDR V0, [X31 + 0x5C]
	0x03CE2BEC STR W31, [X8 + 0x28]
	0x03CE2BF0 STP S0, S8, [X8 + 0x20]
	0x03CE2BF4 LDR X8, [X22]
	0x03CE2BF8 LDR X8, [X8 + 0xB8]
	0x03CE2BFC LDR X8, [X8 + 0x18]
	0x03CE2C00 CBZ X8, 0x3CE32A0
	0x03CE2C04 LDR W9, [X8 + 0x18]
	0x03CE2C08 CMP W9, 0x1
	0x03CE2C0C B.LS 0x3CE329C
	0x03CE2C10 LDR V0, [X31 + 0x5C]
	0x03CE2C14 STR W31, [X8 + 0x34]
	0x03CE2C18 STP S0, S12, [X8 + 0x2C]
	0x03CE2C1C LDR X8, [X22]
	0x03CE2C20 LDR X8, [X8 + 0xB8]
	0x03CE2C24 LDR X8, [X8 + 0x18]
	0x03CE2C28 CBZ X8, 0x3CE32A0
	0x03CE2C2C LDR W9, [X8 + 0x18]
	0x03CE2C30 CMP W9, 0x2
	0x03CE2C34 B.LS 0x3CE329C
	0x03CE2C38 STP S13, S12, [X8 + 0x38]
	0x03CE2C3C STR W31, [X8 + 0x40]
	0x03CE2C40 LDR X8, [X22]
	0x03CE2C44 LDR X8, [X8 + 0xB8]
	0x03CE2C48 LDR X8, [X8 + 0x18]
	0x03CE2C4C CBZ X8, 0x3CE32A0
	0x03CE2C50 LDR W9, [X8 + 0x18]
	0x03CE2C54 CMP W9, 0x3
	0x03CE2C58 B.LS 0x3CE329C
	0x03CE2C5C STP S13, S8, [X8 + 0x44]
	0x03CE2C60 STR W31, [X8 + 0x4C]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+80], D15
	003 Move [X31+88], D14
	004 Move [X31+96], D13
	005 Move [X31+104], D12
	006 Move [X31+112], D11
	007 Move [X31+120], D10
	008 Move [X31+128], D9
	009 Move [X31+136], D8
	010 Move [X31+144], X30
	011 Move [X31+152], X25
	012 Move [X31+160], X24
	013 Move [X31+168], X23
	014 Move [X31+176], X22
	015 Move [X31+184], X21
	016 Move [X31+192], X20
	017 Move [X31+200], X19
	018 Move X21, 0x706000
	019 Move W8, [X21+1249]
	020 Move X19, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x481000
	027 Move X0, [X0+1408]
	028 Call 0x1C17CF4
	029 Move X0, 0x412000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+1249], W8
	034 Move X0, X20
	035 Call Image.get_hasBorder, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {97}
	040 Move X0, X20
	041 Call Image.get_activeSprite, X0
	042 Move X8, 0x412000
	043 Move X8, [X8+1432]
	044 Move X21, X0
	045 Move X8, [X8]
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X0, X21
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Inequality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {119}
	059 Move X0, X20
	060 Call Image.get_activeSprite, X0
	061 Move X1, X31
	062 Call DataUtility.GetOuterUV, X0
	063 Move X0, X20
	064 Move [X31+24], S1
	065 Move [X31+32], S0
	066 Move [X31], S3
	067 Move [X31+8], S2
	068 Call Image.get_activeSprite, X0
	069 Move X1, X31
	070 Call DataUtility.GetInnerUV, X0
	071 Move X0, X20
	072 Move [X31+16], S1
	073 Move [X31+24], S0
	074 Move [X31+8], S3
	075 Move [X31+16], S2
	076 Call Image.get_activeSprite, X0
	077 Move X1, X31
	078 Call DataUtility.GetPadding, X0
	079 Move X0, X20
	080 Move V10, V0
	081 Move V11, V1
	082 Move V8, V2
	083 Move V9, V3
	084 Call Image.get_activeSprite, X0
	085 Compare X0, 0
	086 JumpIfEqual {389}
	087 Move X1, X31
	088 Move [X31+40], S11
	089 Move [X31+48], S10
	090 Move [X31+32], S9
	091 Move [X31+40], S8
	092 Call Sprite.get_border, X0
	093 Move V8, V0
	094 Move V9, V1
	095 Move V14, V2
	096 Move V15, V3
	097 Move X0, X20
	098 Move X1, X19
	099 Move X20, [X31+192]
	100 Move X19, [X31+200]
	101 Move X22, [X31+176]
	102 Move X21, [X31+184]
	103 Move X24, [X31+160]
	104 Move X23, [X31+168]
	105 Move X30, [X31+144]
	106 Move X25, [X31+152]
	107 Move D9, [X31+128]
	108 Move D8, [X31+136]
	109 Move D11, [X31+112]
	110 Move D10, [X31+120]
	111 Move D13, [X31+96]
	112 Move D12, [X31+104]
	113 Move D15, [X31+80]
	114 Move D14, [X31+88]
	115 Move W2, W31
	116 Add X31, X31, 208
	117 Call Image.GenerateSimpleSprite, X0, X1, X2
	118 Return 
	119 Move X21, 0x6F7000
	120 Move W8, [X21+3674]
	121 Compare W8, 0
	122 JumpIfNotEqual {128}
	123 Move X0, 0x419000
	124 Move X0, [X0+2464]
	125 Call 0x1C17CF4
	126 Move W8, 1
	127 Move [X21+3674], W8
	128 Move X8, 0x419000
	129 Move X8, [X8+2464]
	130 Move X8, [X8]
	131 Move X8, [X8+184]
	132 Move S8, [X8]
	133 Move S9, [X8+4]
	134 Move S14, [X8+8]
	135 Move S15, [X8+12]
	136 Move [X31+40], S9
	137 Move [X31+48], S8
	138 Move [X31+32], S15
	139 Move [X31+40], S14
	140 Move [X31+16], S9
	141 Move [X31+24], S8
	142 Move [X31+8], S15
	143 Move [X31+16], S14
	144 Move [X31+24], S9
	145 Move [X31+32], S8
	146 Move [X31], S15
	147 Move [X31+8], S14
	148 Move X0, X20
	149 Call Graphic.GetPixelAdjustedRect, X0
	150 Move X0, X20
	151 Move [X31+64], D0
	152 Move [X31+48], D1
	153 Move V13, V2
	154 Move V12, V3
	155 Call Image.get_pixelsPerUnit, X0
	156 Move V1, [X20+264]
	157 Move X0, X20
	158 Move V5, [X31+48]
	159 Move V4, [X31+64]
	160 Move V6, V13
	161 Multiply S3, S0, S1
	162 NotImplemented "Instruction FDIV not yet implemented."
	163 NotImplemented "Instruction FDIV not yet implemented."
	164 NotImplemented "Instruction FDIV not yet implemented."
	165 NotImplemented "Instruction FDIV not yet implemented."
	166 Move V7, V12
	167 Call Image.GetAdjustedBorders, X0, X1, X2
	168 Move X0, X20
	169 Move V8, V0
	170 Move V9, V1
	171 Move V15, V2
	172 Move V14, V3
	173 Call Image.get_pixelsPerUnit, X0
	174 Move X21, 0x481000
	175 Move X21, [X21+1408]
	176 Move V11, [X20+264]
	177 Move V10, V0
	178 Move X0, [X21]
	179 Move W8, [X0+224]
	180 Compare W8, 0
	181 JumpIfNotEqual {184}
	182 Call 0x1C17DFC
	183 Move X0, [X21]
	184 Move X8, [X0+184]
	185 Move X8, [X8+8]
	186 Compare X8, 0
	187 JumpIfEqual {389}
	188 Move W9, [X8+24]
	189 Compare W9, 0
	190 JumpIfEqual {388}
	191 Move S2, [X31+40]
	192 Move S1, [X31+44]
	193 Multiply S0, S10, S11
	194 NotImplemented "Instruction FDIV not yet implemented."
	195 NotImplemented "Instruction FDIV not yet implemented."
	196 Move [X8+32], S1
	197 Move [X8+40], S2
	198 Move X8, [X21]
	199 Move X8, [X8+184]
	200 Move X8, [X8+8]
	201 Compare X8, 0
	202 JumpIfEqual {389}
	203 Move W9, [X8+24]
	204 NotImplemented "Instruction CMP not yet implemented."
	205 Move S2, [X31+32]
	206 Move S1, [X31+36]
	207 NotImplemented "Instruction FDIV not yet implemented."
	208 NotImplemented "Instruction FDIV not yet implemented."
	209 Subtract S1, S13, S1
	210 Subtract S0, S12, S0
	211 Move [X8+56], S1
	212 Move [X8+64], S0
	213 Move X0, [X21]
	214 Move X8, [X0+184]
	215 Move X8, [X8+8]
	216 Compare X8, 0
	217 JumpIfEqual {389}
	218 Move W9, [X8+24]
	219 NotImplemented "Instruction CMP not yet implemented."
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move [X8+40], S8
	222 Move [X8+48], S9
	223 Subtract S0, S13, S15
	224 Subtract S1, S12, S14
	225 Move [X8+48], S0
	226 Move [X8+56], S1
	227 Move V0, [X31+48]
	228 Move V1, [X31+64]
	229 Move X22, X31
	230 Move V1.S[1], V0.S[0]
	231 Move [X31+4], V1
	232 Move W8, [X0+224]
	233 Compare W8, 0
	234 JumpIfNotEqual {238}
	235 Call 0x1C17DFC
	236 Move V1, [X31+4]
	237 Move X0, [X21]
	238 Move X8, [X0+184]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Move X8, [X8+8]
	241 Compare X8, 0
	242 JumpIfEqual {389}
	243 Move W9, [X8+24]
	244 NotImplemented "Instruction CMP not yet implemented."
	245 Add X8, X8, X22
	246 Move V0, [X8+32]
	247 Add X22, X22, 1
	248 Add V0, V1, V0
	249 Move [X8+32], D0
	250 Move X8, [X8+16]
	251 Compare X8, 0
	252 JumpIfEqual {389}
	253 Move W9, [X8+24]
	254 Compare W9, 0
	255 JumpIfEqual {388}
	256 Move V1, [X31+28]
	257 Move V0, [X31+24]
	258 Move [X8+32], S1
	259 Move [X8+40], S0
	260 Move X8, [X21]
	261 Move X8, [X8+184]
	262 Move X8, [X8+16]
	263 Compare X8, 0
	264 JumpIfEqual {389}
	265 Move W9, [X8+24]
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move V1, [X31+20]
	268 Move V0, [X31+16]
	269 Move [X8+40], S1
	270 Move [X8+48], S0
	271 Move X8, [X21]
	272 Move X8, [X8+184]
	273 Move X8, [X8+16]
	274 Compare X8, 0
	275 JumpIfEqual {389}
	276 Move W9, [X8+24]
	277 NotImplemented "Instruction CMP not yet implemented."
	278 Move V1, [X31+12]
	279 Move V0, [X31+8]
	280 Move [X8+48], S1
	281 Move [X8+56], S0
	282 Move X8, [X21]
	283 Move X8, [X8+184]
	284 Move X8, [X8+16]
	285 Compare X8, 0
	286 JumpIfEqual {389}
	287 Move W9, [X8+24]
	288 NotImplemented "Instruction CMP not yet implemented."
	289 Move V1, [X31+4]
	290 Move V0, [X31]
	291 Move [X8+56], S1
	292 Move [X8+64], S0
	293 Compare X19, 0
	294 JumpIfEqual {389}
	295 Move X0, X19
	296 Move X1, X31
	297 Call VertexHelper.Clear, X0
	298 Move X22, X31
	299 Move X24, X31
	300 Add X23, X22, 1
	301 NotImplemented "Instruction CMP not yet implemented."
	302 NotImplemented "Instruction CMP not yet implemented."
	303 Move W8, [X20+237]
	304 Compare W8, 0
	305 JumpIfNotEqual {307}
	306 Move W24, 2
	307 Move X0, [X21]
	308 Move W8, [X0+224]
	309 Compare W8, 0
	310 JumpIfNotEqual {313}
	311 Call 0x1C17DFC
	312 Move X0, [X21]
	313 Move X8, [X0+184]
	314 Move X8, [X8+8]
	315 Compare X8, 0
	316 JumpIfEqual {389}
	317 Move W9, [X8+24]
	318 NotImplemented "Instruction CMP not yet implemented."
	319 NotImplemented "Instruction CMP not yet implemented."
	320 NotImplemented "Instruction CMP not yet implemented."
	321 Add X25, X24, 1
	322 NotImplemented "Instruction CMP not yet implemented."
	323 Move X12, [X20]
	324 Add X9, X8, X22
	325 Add X10, X8, X24
	326 Add X11, X8, X23
	327 Add X8, X8, X25
	328 Move V8, [X8+36]
	329 Move X8, [X12+664]
	330 Move X1, [X12+672]
	331 Move V11, [X9+32]
	332 Move V10, [X10+36]
	333 Move V9, [X11+32]
	334 Move X0, X20
	335 NotImplemented "Instruction BLR not yet implemented."
	336 Move X0, X31
	337 Call 0x1E44664
	338 Move X8, [X21]
	339 Move X8, [X8+184]
	340 Move X8, [X8+16]
	341 Compare X8, 0
	342 JumpIfEqual {389}
	343 Move W9, [X8+24]
	344 NotImplemented "Instruction CMP not yet implemented."
	345 NotImplemented "Instruction CMP not yet implemented."
	346 NotImplemented "Instruction CMP not yet implemented."
	347 NotImplemented "Instruction CMP not yet implemented."
	348 Add X9, X8, X22
	349 Add X10, X8, X24
	350 Move X11, X23
	351 ShiftRight X11, 61
	352 And X11, X11, 0xFFFFFFF
	353 Add X8, X8, 32
	354 Move V6, [X8]
	355 Add X8, X8, X25
	356 Move V4, [X9+32]
	357 Move V5, [X10+36]
	358 Move V7, [X8+4]
	359 And X1, X0, 0
	360 Move X0, X19
	361 Move V0, V11
	362 Move V1, V10
	363 Move V2, V9
	364 Move V3, V8
	365 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	366 Move X24, X25
	367 NotImplemented "Instruction CMP not yet implemented."
	368 NotImplemented "Instruction CMP not yet implemented."
	369 Move X22, X23
	370 Move X20, [X31+192]
	371 Move X19, [X31+200]
	372 Move X22, [X31+176]
	373 Move X21, [X31+184]
	374 Move X24, [X31+160]
	375 Move X23, [X31+168]
	376 Move X30, [X31+144]
	377 Move X25, [X31+152]
	378 Move D9, [X31+128]
	379 Move D8, [X31+136]
	380 Move D11, [X31+112]
	381 Move D10, [X31+120]
	382 Move D13, [X31+96]
	383 Move D12, [X31+104]
	384 Move D15, [X31+80]
	385 Move D14, [X31+88]
	386 Add X31, X31, 208
	387 Return 
	388 Call 0x1C17F28
	389 Call 0x1C17F20

Method: System.Void GenerateTiledSprite(UnityEngine.UI.VertexHelper toFill)

Disassembly:
	0x03CE2C64 LDR X8, [X22]
	0x03CE2C68 LDR X8, [X8 + 0xB8]
	0x03CE2C6C LDR X8, [X8 + 0x20]
	0x03CE2C70 CBZ X8, 0x3CE32A0
	0x03CE2C74 LDR W9, [X8 + 0x18]
	0x03CE2C78 CBZ W9, 0x3CE329C
	0x03CE2C7C STP S9, S10, [X8 + 0x20]
	0x03CE2C80 STR W31, [X8 + 0x28]
	0x03CE2C84 LDR X8, [X22]
	0x03CE2C88 LDR X8, [X8 + 0xB8]
	0x03CE2C8C LDR X8, [X8 + 0x20]
	0x03CE2C90 CBZ X8, 0x3CE32A0
	0x03CE2C94 LDR W9, [X8 + 0x18]
	0x03CE2C98 CMP W9, 0x1
	0x03CE2C9C B.LS 0x3CE329C
	0x03CE2CA0 STP S9, S14, [X8 + 0x2C]
	0x03CE2CA4 STR W31, [X8 + 0x34]
	0x03CE2CA8 LDR X8, [X22]
	0x03CE2CAC LDR X8, [X8 + 0xB8]
	0x03CE2CB0 LDR X8, [X8 + 0x20]
	0x03CE2CB4 CBZ X8, 0x3CE32A0
	0x03CE2CB8 LDR W9, [X8 + 0x18]
	0x03CE2CBC CMP W9, 0x2
	0x03CE2CC0 B.LS 0x3CE329C
	0x03CE2CC4 STP S15, S14, [X8 + 0x38]
	0x03CE2CC8 STR W31, [X8 + 0x40]
	0x03CE2CCC LDR X8, [X22]
	0x03CE2CD0 LDR X8, [X8 + 0xB8]
	0x03CE2CD4 LDR X8, [X8 + 0x20]
	0x03CE2CD8 CBZ X8, 0x3CE32A0
	0x03CE2CDC LDR W9, [X8 + 0x18]
	0x03CE2CE0 CMP W9, 0x3
	0x03CE2CE4 B.LS 0x3CE329C
	0x03CE2CE8 STP S15, S10, [X8 + 0x44]
	0x03CE2CEC STR W31, [X8 + 0x4C]
	0x03CE2CF0 LDR V0, [X20 + 0xF4]
	0x03CE2CF4 FMOV S1, 1
	0x03CE2CF8 FCMP S0, S1
	0x03CE2CFC B.PL 0x3CE2D64
	0x03CE2D00 LDR W8, [X20 + 0xF0]
	0x03CE2D04 STR S8, [X31 + 0xC]
	0x03CE2D08 CMP W8, 0x4
	0x03CE2D0C B.HI 0x3CE3274
	0x03CE2D10 ADRP X9, 0xFFFFFFFFFCEB5000
	0x03CE2D14 ADD X9, X9, 0xF2A
	0x03CE2D18 ADR X10, 0x1C
	0x03CE2D1C LDRB W11, [X9, X8, LSL]
	0x03CE2D20 ADD X10, X10, X11, 0x2, LSL
	0x03CE2D24 LDR V1, [X31 + 0xC]
	0x03CE2D28 STR S9, [X31 + 0x58]
	0x03CE2D2C STR S10, [X31 + 0x8]
	0x03CE2D30 BR X10
	0x03CE2D34 LDR X0, [X22]
	0x03CE2D38 LDR W8, [X0 + 0xE0]
	0x03CE2D3C CBNZ W8, 0x3CE2D4C
	0x03CE2D40 BL 0x1C16DFC
	0x03CE2D44 LDR X0, [X22]
	0x03CE2D48 LDR V0, [X20 + 0xF4]
	0x03CE2D4C LDR X8, [X0 + 0xB8]
	0x03CE2D50 LDRB W2, [X20 + 0xF8]
	0x03CE2D54 LDR W3, [X20 + 0xFC]
	0x03CE2D58 LDP X0, X1, [X8 + 0x18]
	0x03CE2D5C BL 0x3CE3A00
	0x03CE2D60 TBZ X0, 0x0, 0x3CE3274
	0x03CE2D64 LDR X0, [X22]
	0x03CE2D68 LDR W8, [X0 + 0xE0]
	0x03CE2D6C CBNZ W8, 0x3CE2D78
	0x03CE2D70 BL 0x1C16DFC
	0x03CE2D74 LDR X0, [X22]
	0x03CE2D78 LDR X8, [X0 + 0xB8]
	0x03CE2D7C LDR X9, [X20]
	0x03CE2D80 MOV X0, X20
	0x03CE2D84 LDR X21, [X8 + 0x18]
	0x03CE2D88 LDR X8, [X9 + 0x298]
	0x03CE2D8C LDR X1, [X9 + 0x2A0]
	0x03CE2D90 BLR X8
	0x03CE2D94 MOV X0, X31
	0x03CE2D98 BL 0x1E43664
	0x03CE2D9C LDR X8, [X22]
	0x03CE2DA0 AND X2, X0, 0x0
	0x03CE2DA4 MOV X0, X19
	0x03CE2DA8 MOV X1, X21
	0x03CE2DAC LDR X8, [X8 + 0xB8]
	0x03CE2DB0 LDP X20, X19, [X31 + 0x80]
	0x03CE2DB4 LDP X22, X21, [X31 + 0x70]
	0x03CE2DB8 LDP X24, X23, [X31 + 0x60]
	0x03CE2DBC LDR X3, [X8 + 0x20]
	0x03CE2DC0 LDR X30, [X31 + 0x50]
	0x03CE2DC4 LDP D9, D8, [X31 + 0x40]
	0x03CE2DC8 LDP D11, D10, [X31 + 0x30]
	0x03CE2DCC LDP D13, D12, [X31 + 0x20]
	0x03CE2DD0 LDP D15, D14, [X31 + 0x10]
	0x03CE2DD4 ADD X31, X31, 0x90
	0x03CE2DD8 B 0x3CE391C
	0x03CE2DDC LDR V0, [X31 + 0x5C]
	0x03CE2DE0 MOV W21, W31
	0x03CE2DE4 FSUB S12, S12, S1
	0x03CE2DE8 FSUB S15, S15, S9
	0x03CE2DEC FSUB S13, S13, S0
	0x03CE2DF0 FSUB S14, S14, S10
	0x03CE2DF4 MOVZ W8, 0x1
	0x03CE2DF8 LDR W9, [X20 + 0xFC]
	0x03CE2DFC MOV W23, W8
	0x03CE2E00 CMP W9, 0x1
	0x03CE2E04 ORR W10, W9, 0x2
	0x03CE2E08 CSET W9, GT
	0x03CE2E0C CMP W10, 0x2
	0x03CE2E10 B.NE 0x3CE2E30
	0x03CE2E14 CMP W21, W9
	0x03CE2E18 FMOV S8, 1
	0x03CE2E1C FMOV S9, W31
	0x03CE2E20 FMOV S0, 0.5
	0x03CE2E24 FCSEL S10, S0, S8, EQ
	0x03CE2E28 FCSEL S11, S9, S0, EQ
	0x03CE2E2C B 0x3CE2E48
	0x03CE2E30 CMP W21, W9
	0x03CE2E34 FMOV S10, 1
	0x03CE2E38 FMOV S11, W31
	0x03CE2E3C FMOV S0, 0.5
	0x03CE2E40 FCSEL S8, S10, S0, EQ
	0x03CE2E44 FCSEL S9, S0, S11, EQ
	0x03CE2E48 LDR X8, [X22]
	0x03CE2E4C LDR W9, [X8 + 0xE0]
	0x03CE2E50 CBNZ W9, 0x3CE2E60
	0x03CE2E54 MOV X0, X8
	0x03CE2E58 BL 0x1C16DFC
	0x03CE2E5C LDR X8, [X22]
	0x03CE2E60 LDR X9, [X8 + 0xB8]
	0x03CE2E64 LDR X0, [X9 + 0x18]
	0x03CE2E68 CBZ X0, 0x3CE32A0
	0x03CE2E6C LDR W10, [X0 + 0x18]
	0x03CE2E70 CBZ W10, 0x3CE329C
	0x03CE2E74 LDR V1, [X31 + 0x5C]
	0x03CE2E78 FMUL S0, S13, S11
	0x03CE2E7C CMP W10, 0x1
	0x03CE2E80 FADD S0, S1, S0
	0x03CE2E84 STR S0, [X0 + 0x20]
	0x03CE2E88 B.EQ 0x3CE329C
	0x03CE2E8C CMP W10, 0x2
	0x03CE2E90 STR S0, [X0 + 0x2C]
	0x03CE2E94 B.LS 0x3CE329C
	0x03CE2E98 LDR V1, [X31 + 0x5C]
	0x03CE2E9C FMUL S0, S13, S10
	0x03CE2EA0 CMP W10, 0x3
	0x03CE2EA4 FADD S0, S1, S0
	0x03CE2EA8 STR S0, [X0 + 0x38]
	0x03CE2EAC B.EQ 0x3CE329C
	0x03CE2EB0 LDR V3, [X31 + 0xC]
	0x03CE2EB4 FMUL S1, S12, S9
	0x03CE2EB8 FMUL S2, S12, S8
	0x03CE2EBC FADD S1, S3, S1
	0x03CE2EC0 FADD S2, S3, S2
	0x03CE2EC4 STR S1, [X0 + 0x24]
	0x03CE2EC8 STR S2, [X0 + 0x30]
	0x03CE2ECC STR S2, [X0 + 0x3C]
	0x03CE2ED0 STP S0, S1, [X0 + 0x44]
	0x03CE2ED4 LDR X1, [X9 + 0x20]
	0x03CE2ED8 CBZ X1, 0x3CE32A0
	0x03CE2EDC LDR W9, [X1 + 0x18]
	0x03CE2EE0 CBZ W9, 0x3CE329C
	0x03CE2EE4 LDR V1, [X31 + 0x58]
	0x03CE2EE8 FMUL S0, S15, S11
	0x03CE2EEC CMP W9, 0x1
	0x03CE2EF0 FADD S0, S1, S0
	0x03CE2EF4 STR S0, [X1 + 0x20]
	0x03CE2EF8 B.EQ 0x3CE329C
	0x03CE2EFC CMP W9, 0x2
	0x03CE2F00 STR S0, [X1 + 0x2C]
	0x03CE2F04 B.LS 0x3CE329C
	0x03CE2F08 FMUL S0, S15, S10
	0x03CE2F0C FADD S0, S1, S0
	0x03CE2F10 CMP W9, 0x3
	0x03CE2F14 STR S0, [X1 + 0x38]
	0x03CE2F18 B.EQ 0x3CE329C
	0x03CE2F1C LDR V3, [X31 + 0x8]
	0x03CE2F20 FMUL S1, S14, S9
	0x03CE2F24 FMUL S2, S14, S8
	0x03CE2F28 FADD S1, S3, S1
	0x03CE2F2C FADD S2, S3, S2
	0x03CE2F30 STR S1, [X1 + 0x24]
	0x03CE2F34 STR S2, [X1 + 0x30]
	0x03CE2F38 STR S2, [X1 + 0x3C]
	0x03CE2F3C STP S0, S1, [X1 + 0x44]
	0x03CE2F40 LDRB W24, [X20 + 0xF8]
	0x03CE2F44 LDR W9, [X8 + 0xE0]
	0x03CE2F48 LDR V8, [X20 + 0xF4]
	0x03CE2F4C CBZ W9, 0x3CE2F58
	0x03CE2F50 MOV W8, W24
	0x03CE2F54 B 0x3CE2F70
	0x03CE2F58 MOV X0, X8
	0x03CE2F5C BL 0x1C16DFC
	0x03CE2F60 LDR X8, [X22]
	0x03CE2F64 LDR X8, [X8 + 0xB8]
	0x03CE2F68 LDP X0, X1, [X8 + 0x18]
	0x03CE2F6C LDRB W8, [X20 + 0xF8]
	0x03CE2F70 EOR W9, W24, W21, 0x0
	0x03CE2F74 EOR W9, W9, 0x1
	0x03CE2F78 SCVTF S1, W9
	0x03CE2F7C LDR W9, [X20 + 0xFC]
	0x03CE2F80 FADD S0, S8, S8
	0x03CE2F84 FSUB S0, S0, S1
	0x03CE2F88 FMOV S1, 1
	0x03CE2F8C FMIN S1, S0, S1
	0x03CE2F90 FCMP S0, 0x0
	0x03CE2F94 ADD W9, W21, W9
	0x03CE2F98 FMOV S0, W31
	0x03CE2F9C FCSEL S0, S1, S0, PL
	0x03CE2FA0 CMP W8, 0x0
	0x03CE2FA4 ADD W8, W9, 0x3
	0x03CE2FA8 ADD W9, W9, 0x6
	0x03CE2FAC CSET W2, NE
	0x03CE2FB0 CMP W8, 0x0
	0x03CE2FB4 CSEL W9, W9, W8, LT
	0x03CE2FB8 AND W9, W9, 0xFFFFFFFC
	0x03CE2FBC SUB W3, W8, W9
	0x03CE2FC0 BL 0x3CE3A00
	0x03CE2FC4 TBZ X0, 0x0, 0x3CE301C
	0x03CE2FC8 LDR X0, [X22]
	0x03CE2FCC LDR W8, [X0 + 0xE0]
	0x03CE2FD0 CBNZ W8, 0x3CE2FDC
	0x03CE2FD4 BL 0x1C16DFC
	0x03CE2FD8 LDR X0, [X22]
	0x03CE2FDC LDR X8, [X0 + 0xB8]
	0x03CE2FE0 LDR X9, [X20]
	0x03CE2FE4 MOV X0, X20
	0x03CE2FE8 LDR X21, [X8 + 0x18]
	0x03CE2FEC LDR X8, [X9 + 0x298]
	0x03CE2FF0 LDR X1, [X9 + 0x2A0]
	0x03CE2FF4 BLR X8
	0x03CE2FF8 MOV X0, X31
	0x03CE2FFC BL 0x1E43664
	0x03CE3000 LDR X8, [X22]
	0x03CE3004 AND X2, X0, 0x0
	0x03CE3008 MOV X0, X19
	0x03CE300C MOV X1, X21
	0x03CE3010 LDR X8, [X8 + 0xB8]
	0x03CE3014 LDR X3, [X8 + 0x20]
	0x03CE3018 BL 0x3CE391C
	0x03CE301C MOV W8, W31
	0x03CE3020 MOVZ W21, 0x1
	0x03CE3024 TBNZ X23, 0x0, 0x3CE2DF8
	0x03CE3028 B 0x3CE3274
	0x03CE302C LDR V0, [X31 + 0x5C]
	0x03CE3030 MOV W23, W31
	0x03CE3034 FSUB S12, S12, S1
	0x03CE3038 FSUB S15, S15, S9
	0x03CE303C FSUB S0, S13, S0
	0x03CE3040 FSUB S14, S14, S10
	0x03CE3044 FMOV S8, 0.5
	0x03CE3048 FMOV S10, 1
	0x03CE304C MOVZ W24, 0x3
	0x03CE3050 STR S0, [X31 + 0x4]
	0x03CE3054 LDR X8, [X22]
	0x03CE3058 CMP W23, 0x1
	0x03CE305C FMOV S0, W31
	0x03CE3060 FCSEL S11, S10, S8, HI
	0x03CE3064 FCSEL S13, S8, S0, HI
	0x03CE3068 CMP W23, 0x0
	0x03CE306C CSET W9, EQ
	0x03CE3070 CMP W23, 0x3
	0x03CE3074 CSET W10, EQ
	0x03CE3078 LDR W11, [X8 + 0xE0]
	0x03CE307C ORR W9, W9, W10, 0x0
	0x03CE3080 CMP W9, 0x0
	0x03CE3084 FCSEL S9, S8, S10, NE
	0x03CE3088 FCSEL S10, S0, S8, NE
	0x03CE308C CBNZ W11, 0x3CE309C
	0x03CE3090 MOV X0, X8
	0x03CE3094 BL 0x1C16DFC
	0x03CE3098 LDR X8, [X22]
	0x03CE309C LDR X9, [X8 + 0xB8]
	0x03CE30A0 LDR X0, [X9 + 0x18]
	0x03CE30A4 CBZ X0, 0x3CE32A0
	0x03CE30A8 LDR W10, [X0 + 0x18]
	0x03CE30AC CBZ W10, 0x3CE329C
	0x03CE30B0 LDR V0, [X31 + 0x4]
	0x03CE30B4 LDR V1, [X31 + 0x5C]
	0x03CE30B8 CMP W10, 0x1
	0x03CE30BC FMUL S0, S0, S13
	0x03CE30C0 FADD S0, S1, S0
	0x03CE30C4 STR S0, [X0 + 0x20]
	0x03CE30C8 B.EQ 0x3CE329C
	0x03CE30CC CMP W10, 0x2
	0x03CE30D0 STR S0, [X0 + 0x2C]
	0x03CE30D4 B.LS 0x3CE329C
	0x03CE30D8 LDR V0, [X31 + 0x4]
	0x03CE30DC LDR V1, [X31 + 0x5C]
	0x03CE30E0 CMP W10, 0x3
	0x03CE30E4 FMUL S0, S0, S11
	0x03CE30E8 FADD S0, S1, S0
	0x03CE30EC STR S0, [X0 + 0x38]
	0x03CE30F0 B.EQ 0x3CE329C
	0x03CE30F4 LDR V3, [X31 + 0xC]
	0x03CE30F8 FMUL S1, S12, S10
	0x03CE30FC FMUL S2, S12, S9
	0x03CE3100 FADD S1, S3, S1
	0x03CE3104 FADD S2, S3, S2
	0x03CE3108 STR S1, [X0 + 0x24]
	0x03CE310C STR S2, [X0 + 0x30]
	0x03CE3110 STR S2, [X0 + 0x3C]
	0x03CE3114 STP S0, S1, [X0 + 0x44]
	0x03CE3118 LDR X1, [X9 + 0x20]
	0x03CE311C CBZ X1, 0x3CE32A0
	0x03CE3120 LDR W9, [X1 + 0x18]
	0x03CE3124 CBZ W9, 0x3CE329C
	0x03CE3128 LDR V1, [X31 + 0x58]
	0x03CE312C FMUL S0, S15, S13
	0x03CE3130 CMP W9, 0x1
	0x03CE3134 FADD S0, S1, S0
	0x03CE3138 STR S0, [X1 + 0x20]
	0x03CE313C B.EQ 0x3CE329C
	0x03CE3140 CMP W9, 0x2
	0x03CE3144 STR S0, [X1 + 0x2C]
	0x03CE3148 B.LS 0x3CE329C
	0x03CE314C LDR V1, [X31 + 0x58]
	0x03CE3150 FMUL S0, S15, S11
	0x03CE3154 CMP W9, 0x3
	0x03CE3158 FADD S0, S1, S0
	0x03CE315C STR S0, [X1 + 0x38]
	0x03CE3160 B.EQ 0x3CE329C
	0x03CE3164 LDR V3, [X31 + 0x8]
	0x03CE3168 FMUL S1, S14, S10
	0x03CE316C FMUL S2, S14, S9
	0x03CE3170 FADD S1, S3, S1
	0x03CE3174 FADD S2, S3, S2
	0x03CE3178 STR S1, [X1 + 0x24]
	0x03CE317C STR S2, [X1 + 0x30]
	0x03CE3180 STR S2, [X1 + 0x3C]
	0x03CE3184 STP S0, S1, [X1 + 0x44]
	0x03CE3188 LDR W10, [X20 + 0xFC]
	0x03CE318C LDRB W9, [X20 + 0xF8]
	0x03CE3190 LDR V9, [X20 + 0xF4]
	0x03CE3194 LDR W11, [X8 + 0xE0]
	0x03CE3198 ADD W10, W23, W10
	0x03CE319C ADD W12, W10, 0x3
	0x03CE31A0 CMP W10, 0x0
	0x03CE31A4 CSEL W12, W12, W10, LT
	0x03CE31A8 AND W12, W12, 0xFFFFFFFC
	0x03CE31AC SUB W10, W10, W12
	0x03CE31B0 SUB W12, W24, W10
	0x03CE31B4 CMP W9, 0x0
	0x03CE31B8 CSEL W21, W12, W10, EQ
	0x03CE31BC CBNZ W11, 0x3CE31D8
	0x03CE31C0 MOV X0, X8
	0x03CE31C4 BL 0x1C16DFC
	0x03CE31C8 LDR X8, [X22]
	0x03CE31CC LDRB W9, [X20 + 0xF8]
	0x03CE31D0 LDR X8, [X8 + 0xB8]
	0x03CE31D4 LDP X0, X1, [X8 + 0x18]
	0x03CE31D8 FMOV S0, 4
	0x03CE31DC FMUL S0, S9, S0
	0x03CE31E0 SCVTF S1, W21
	0x03CE31E4 FMOV S10, 1
	0x03CE31E8 FSUB S0, S0, S1
	0x03CE31EC FMIN S1, S0, S10
	0x03CE31F0 FCMP S0, 0x0
	0x03CE31F4 FMOV S0, W31
	0x03CE31F8 ADD W8, W23, 0x2
	0x03CE31FC FCSEL S0, S1, S0, PL
	0x03CE3200 CMP W9, 0x0
	0x03CE3204 CSET W2, NE
	0x03CE3208 AND W3, W8, 0x3
	0x03CE320C BL 0x3CE3A00
	0x03CE3210 TBZ X0, 0x0, 0x3CE3268
	0x03CE3214 LDR X0, [X22]
	0x03CE3218 LDR W8, [X0 + 0xE0]
	0x03CE321C CBNZ W8, 0x3CE3228
	0x03CE3220 BL 0x1C16DFC
	0x03CE3224 LDR X0, [X22]
	0x03CE3228 LDR X8, [X0 + 0xB8]
	0x03CE322C LDR X9, [X20]
	0x03CE3230 MOV X0, X20
	0x03CE3234 LDR X21, [X8 + 0x18]
	0x03CE3238 LDR X8, [X9 + 0x298]
	0x03CE323C LDR X1, [X9 + 0x2A0]
	0x03CE3240 BLR X8
	0x03CE3244 MOV X0, X31
	0x03CE3248 BL 0x1E43664
	0x03CE324C LDR X8, [X22]
	0x03CE3250 AND X2, X0, 0x0
	0x03CE3254 MOV X0, X19
	0x03CE3258 MOV X1, X21
	0x03CE325C LDR X8, [X8 + 0xB8]
	0x03CE3260 LDR X3, [X8 + 0x20]
	0x03CE3264 BL 0x3CE391C
	0x03CE3268 ADD W23, W23, 0x1
	0x03CE326C CMP W23, 0x4
	0x03CE3270 B.NE 0x3CE3054
	0x03CE3274 LDP X20, X19, [X31 + 0x80]
	0x03CE3278 LDP X22, X21, [X31 + 0x70]
	0x03CE327C LDP X24, X23, [X31 + 0x60]
	0x03CE3280 LDR X30, [X31 + 0x50]
	0x03CE3284 LDP D9, D8, [X31 + 0x40]
	0x03CE3288 LDP D11, D10, [X31 + 0x30]
	0x03CE328C LDP D13, D12, [X31 + 0x20]
	0x03CE3290 LDP D15, D14, [X31 + 0x10]
	0x03CE3294 ADD X31, X31, 0x90
	0x03CE3298 RET
	0x03CE329C BL 0x1C16F28
	0x03CE32A0 BL 0x1C16F20
	0x03CE32A4 STP X30, X21, [X31 - 0x20]!
	0x03CE32A8 STP X20, X19, [X31 + 0x10]
	0x03CE32AC ADRP X20, 0x704000
	0x03CE32B0 ADRP X21, 0x47F000
	0x03CE32B4 LDRB W8, [X20 + 0x4E9]
	0x03CE32B8 LDR X21, [X21 + 0x580]
	0x03CE32BC MOV X19, X0
	0x03CE32C0 TBNZ X8, 0x0, 0x3CE32FC
	0x03CE32C4 ADRP X0, 0x47C000
	0x03CE32C8 LDR X0, [X0 + 0x880]
	0x03CE32CC BL 0x1C16CF4
	0x03CE32D0 ADRP X0, 0x47F000
	0x03CE32D4 LDR X0, [X0 + 0x5D0]
	0x03CE32D8 BL 0x1C16CF4
	0x03CE32DC ADRP X0, 0x47F000
	0x03CE32E0 LDR X0, [X0 + 0x580]
	0x03CE32E4 BL 0x1C16CF4
	0x03CE32E8 ADRP X0, 0x47F000
	0x03CE32EC LDR X0, [X0 + 0x5D8]
	0x03CE32F0 BL 0x1C16CF4
	0x03CE32F4 MOVZ W8, 0x1
	0x03CE32F8 STRB W8, [X20 + 0x4E9]
	0x03CE32FC LDR X0, [X21]
	0x03CE3300 LDR W8, [X0 + 0xE0]
	0x03CE3304 CBNZ W8, 0x3CE3310
	0x03CE3308 BL 0x1C16DFC
	0x03CE330C LDR X0, [X21]
	0x03CE3310 LDR X8, [X0 + 0xB8]
	0x03CE3314 LDRB W8, [X8 + 0x30]
	0x03CE3318 CBNZ W8, 0x3CE3374
	0x03CE331C ADRP X8, 0x47C000
	0x03CE3320 LDR X8, [X8 + 0x880]
	0x03CE3324 LDR X0, [X8]
	0x03CE3328 BL 0x1C16F10
	0x03CE332C ADRP X8, 0x47F000
	0x03CE3330 LDR X8, [X8 + 0x5D0]
	0x03CE3334 MOV X1, X31
	0x03CE3338 MOV X3, X31
	0x03CE333C MOV X20, X0
	0x03CE3340 LDR X2, [X8]
	0x03CE3344 BL 0x2A6B948
	0x03CE3348 MOV X0, X20
	0x03CE334C MOV X1, X31
	0x03CE3350 BL 0x3C42954
	0x03CE3354 LDR X0, [X21]
	0x03CE3358 LDR W8, [X0 + 0xE0]
	0x03CE335C CBNZ W8, 0x3CE3368
	0x03CE3360 BL 0x1C16DFC
	0x03CE3364 LDR X0, [X21]
	0x03CE3368 LDR X8, [X0 + 0xB8]
	0x03CE336C MOVZ W9, 0x1
	0x03CE3370 STRB W9, [X8 + 0x30]
	0x03CE3374 LDR W8, [X0 + 0xE0]
	0x03CE3378 CBNZ W8, 0x3CE3384
	0x03CE337C BL 0x1C16DFC
	0x03CE3380 LDR X0, [X21]
	0x03CE3384 LDR X8, [X0 + 0xB8]
	0x03CE3388 LDR X0, [X8 + 0x28]
	0x03CE338C CBZ X0, 0x3CE33F8
	0x03CE3390 ADRP X9, 0x47F000
	0x03CE3394 LDR X9, [X9 + 0x5D8]
	0x03CE3398 LDR W10, [X0 + 0x1C]
	0x03CE339C LDR X8, [X0 + 0x10]
	0x03CE33A0 LDR X9, [X9]
	0x03CE33A4 ADD W10, W10, 0x1
	0x03CE33A8 STR W10, [X0 + 0x1C]
	0x03CE33AC CBZ X8, 0x3CE33F8
	0x03CE33B0 LDRSW X10, [X0 + 0x18]
	0x03CE33B4 LDR W11, [X8 + 0x18]
	0x03CE33B8 CMP W10, W11
	0x03CE33BC B.CS 0x3CE33DC
	0x03CE33C0 ADD W9, W10, 0x1
	0x03CE33C4 ADD X8, X8, X10, 0x3, LSL
	0x03CE33C8 STR W9, [X0 + 0x18]
	0x03CE33CC STR X19, [X8 + 0x20]
	0x03CE33D0 LDP X20, X19, [X31 + 0x10]
	0x03CE33D4 LDP X30, X21, [X31], #0x20
	0x03CE33D8 RET
	0x03CE33DC LDR X8, [X9 + 0x20]
	0x03CE33E0 MOV X1, X19
	0x03CE33E4 LDP X20, X19, [X31 + 0x10]
	0x03CE33E8 LDR X8, [X8 + 0xC0]
	0x03CE33EC LDR X2, [X8 + 0x70]
	0x03CE33F0 LDP X30, X21, [X31], #0x20
	0x03CE33F4 B 0x301BF90
	0x03CE33F8 BL 0x1C16F20
	0x03CE33FC STP X30, X19, [X31 - 0x10]!
	0x03CE3400 MOV X1, X31
	0x03CE3404 MOV X19, X0
	0x03CE3408 BL 0x3E37848
	0x03CE340C MOV X0, X19
	0x03CE3410 LDP X30, X19, [X31], #0x10
	0x03CE3414 B 0x3CDFDA4
	0x03CE3418 STR X30, [X31 - 0x20]!
	0x03CE341C STP X20, X19, [X31 + 0x10]
	0x03CE3420 ADRP X20, 0x704000
	0x03CE3424 LDRB W8, [X20 + 0x4DD]
	0x03CE3428 MOV X19, X0
	0x03CE342C TBNZ X8, 0x0, 0x3CE3444
	0x03CE3430 ADRP X0, 0x47F000
	0x03CE3434 LDR X0, [X0 + 0x580]
	0x03CE3438 BL 0x1C16CF4
	0x03CE343C MOVZ W8, 0x1
	0x03CE3440 STRB W8, [X20 + 0x4DD]
	0x03CE3444 MOV X0, X19
	0x03CE3448 MOV X1, X31
	0x03CE344C BL 0x3E379EC
	0x03CE3450 LDRB W8, [X19 + 0x104]
	0x03CE3454 CBZ W8, 0x3CE3480
	0x03CE3458 ADRP X8, 0x47F000
	0x03CE345C LDR X8, [X8 + 0x580]
	0x03CE3460 LDR X0, [X8]
	0x03CE3464 LDR W8, [X0 + 0xE0]
	0x03CE3468 CBNZ W8, 0x3CE3470
	0x03CE346C BL 0x1C16DFC
	0x03CE3470 MOV X0, X19
	0x03CE3474 LDP X20, X19, [X31 + 0x10]
	0x03CE3478 LDR X30, [X31], #0x20
	0x03CE347C B 0x3CE348C
	0x03CE3480 LDP X20, X19, [X31 + 0x10]
	0x03CE3484 LDR X30, [X31], #0x20
	0x03CE3488 RET
	0x03CE348C STP X30, X21, [X31 - 0x20]!
	0x03CE3490 STP X20, X19, [X31 + 0x10]
	0x03CE3494 ADRP X21, 0x704000
	0x03CE3498 ADRP X20, 0x47F000
	0x03CE349C LDRB W8, [X21 + 0x4EA]
	0x03CE34A0 LDR X20, [X20 + 0x580]
	0x03CE34A4 MOV X19, X0
	0x03CE34A8 TBNZ X8, 0x0, 0x3CE34CC
	0x03CE34AC ADRP X0, 0x47F000
	0x03CE34B0 LDR X0, [X0 + 0x580]
	0x03CE34B4 BL 0x1C16CF4
	0x03CE34B8 ADRP X0, 0x47F000
	0x03CE34BC LDR X0, [X0 + 0x5E0]
	0x03CE34C0 BL 0x1C16CF4
	0x03CE34C4 MOVZ W8, 0x1
	0x03CE34C8 STRB W8, [X21 + 0x4EA]
	0x03CE34CC LDR X0, [X20]
	0x03CE34D0 LDR W8, [X0 + 0xE0]
	0x03CE34D4 CBNZ W8, 0x3CE34E0
	0x03CE34D8 BL 0x1C16DFC
	0x03CE34DC LDR X0, [X20]
	0x03CE34E0 LDR X8, [X0 + 0xB8]
	0x03CE34E4 LDR X0, [X8 + 0x28]
	0x03CE34E8 CBZ X0, 0x3CE3508
	0x03CE34EC ADRP X8, 0x47F000
	0x03CE34F0 LDR X8, [X8 + 0x5E0]
	0x03CE34F4 MOV X1, X19
	0x03CE34F8 LDP X20, X19, [X31 + 0x10]
	0x03CE34FC LDR X2, [X8]
	0x03CE3500 LDP X30, X21, [X31], #0x20
	0x03CE3504 B 0x301D7A8
	0x03CE3508 BL 0x1C16F20
	0x03CE350C STP X30, X21, [X31 - 0x20]!
	0x03CE3510 STP X20, X19, [X31 + 0x10]
	0x03CE3514 ADRP X20, 0x704000
	0x03CE3518 ADRP X21, 0x410000
	0x03CE351C LDRB W8, [X20 + 0x4DE]
	0x03CE3520 LDR X21, [X21 + 0x598]
	0x03CE3524 MOV X19, X0
	0x03CE3528 TBNZ X8, 0x0, 0x3CE3540
	0x03CE352C ADRP X0, 0x410000
	0x03CE3530 LDR X0, [X0 + 0x598]
	0x03CE3534 BL 0x1C16CF4
	0x03CE3538 MOVZ W8, 0x1
	0x03CE353C STRB W8, [X20 + 0x4DE]
	0x03CE3540 MOV X0, X19
	0x03CE3544 BL 0x3CDC8F0
	0x03CE3548 MOV X0, X19
	0x03CE354C BL 0x3CDFE9C
	0x03CE3550 LDR X8, [X21]
	0x03CE3554 MOV X20, X0
	0x03CE3558 LDR W9, [X8 + 0xE0]
	0x03CE355C CBNZ W9, 0x3CE3568
	0x03CE3560 MOV X0, X8
	0x03CE3564 BL 0x1C16DFC
	0x03CE3568 MOV X0, X20
	0x03CE356C MOV X1, X31
	0x03CE3570 MOV X2, X31
	0x03CE3574 BL 0x3C3883C
	0x03CE3578 TBZ X0, 0x0, 0x3CE3590
	0x03CE357C MOV X0, X19
	0x03CE3580 BL 0x3CDBD2C
	0x03CE3584 CBZ X0, 0x3CE35FC
	0x03CE3588 MOV X1, X31
	0x03CE358C B 0x3CE35E0
	0x03CE3590 MOV X0, X19
	0x03CE3594 BL 0x3CDFE9C
	0x03CE3598 CBZ X0, 0x3CE35FC
	0x03CE359C MOV X1, X31
	0x03CE35A0 BL 0x3C41A08
	0x03CE35A4 LDR X8, [X21]
	0x03CE35A8 MOV X20, X0
	0x03CE35AC LDR W9, [X8 + 0xE0]
	0x03CE35B0 CBNZ W9, 0x3CE35BC
	0x03CE35B4 MOV X0, X8
	0x03CE35B8 BL 0x1C16DFC
	0x03CE35BC MOV X0, X20
	0x03CE35C0 MOV X1, X31
	0x03CE35C4 MOV X2, X31
	0x03CE35C8 BL 0x3C354F8
	0x03CE35CC TBZ X0, 0x0, 0x3CE35F0
	0x03CE35D0 MOV X0, X19
	0x03CE35D4 BL 0x3CDBD2C
	0x03CE35D8 CBZ X0, 0x3CE35FC
	0x03CE35DC MOV X1, X20
	0x03CE35E0 LDP X20, X19, [X31 + 0x10]
	0x03CE35E4 MOV X2, X31
	0x03CE35E8 LDP X30, X21, [X31], #0x20
	0x03CE35EC B 0x3E22A6C
	0x03CE35F0 LDP X20, X19, [X31 + 0x10]
	0x03CE35F4 LDP X30, X21, [X31], #0x20
	0x03CE35F8 RET
	0x03CE35FC BL 0x1C16F20
	0x03CE3600 STP X30, X21, [X31 - 0x20]!
	0x03CE3604 STP X20, X19, [X31 + 0x10]
	0x03CE3608 ADRP X21, 0x704000
	0x03CE360C ADRP X20, 0x410000
	0x03CE3610 LDRB W8, [X21 + 0x4DF]
	0x03CE3614 LDR X20, [X20 + 0x598]
	0x03CE3618 MOV X19, X0
	0x03CE361C TBNZ X8, 0x0, 0x3CE3634
	0x03CE3620 ADRP X0, 0x410000
	0x03CE3624 LDR X0, [X0 + 0x598]
	0x03CE3628 BL 0x1C16CF4
	0x03CE362C MOVZ W8, 0x1
	0x03CE3630 STRB W8, [X21 + 0x4DF]
	0x03CE3634 MOV X0, X19
	0x03CE3638 MOV X1, X31
	0x03CE363C BL 0x3E37AEC
	0x03CE3640 MOV X0, X19
	0x03CE3644 BL 0x3CDADE8
	0x03CE3648 LDR X8, [X20]
	0x03CE364C MOV X20, X0
	0x03CE3650 LDR W9, [X8 + 0xE0]
	0x03CE3654 CBNZ W9, 0x3CE3660
	0x03CE3658 MOV X0, X8
	0x03CE365C BL 0x1C16DFC
	0x03CE3660 MOV X0, X20
	0x03CE3664 MOV X1, X31
	0x03CE3668 MOV X2, X31
	0x03CE366C BL 0x3C3883C
	0x03CE3670 TBZ X0, 0x0, 0x3CE3680
	0x03CE3674 MOVZ W8, 0x42C80000
	0x03CE3678 STR W8, [X19 + 0x10C]
	0x03CE367C B 0x3CE36F8
	0x03CE3680 MOV X0, X19
	0x03CE3684 BL 0x3CDADE8
	0x03CE3688 CBZ X0, 0x3CE3704
	0x03CE368C MOV X1, X31
	0x03CE3690 BL 0x3E2469C
	0x03CE3694 LDR V1, [X19 + 0x10C]
	0x03CE3698 FCMP S0, S1
	0x03CE369C B.EQ 0x3CE36F8
	0x03CE36A0 MOV X0, X19
	0x03CE36A4 BL 0x3CDADE8
	0x03CE36A8 CBZ X0, 0x3CE3704
	0x03CE36AC MOV X1, X31
	0x03CE36B0 BL 0x3E2469C
	0x03CE36B4 LDR W8, [X19 + 0xE8]
	0x03CE36B8 STR S0, [X19 + 0x10C]
	0x03CE36BC SUB W8, W8, 0x1
	0x03CE36C0 CMP W8, 0x1
	0x03CE36C4 B.HI 0x3CE36F8
	0x03CE36C8 LDR X8, [X19]
	0x03CE36CC MOV X0, X19
	0x03CE36D0 LDR X9, [X8 + 0x2F8]
	0x03CE36D4 LDR X1, [X8 + 0x300]
	0x03CE36D8 BLR X9
	0x03CE36DC LDR X8, [X19]
	0x03CE36E0 MOV X0, X19
	0x03CE36E4 LDP X20, X19, [X31 + 0x10]
	0x03CE36E8 LDR X2, [X8 + 0x2E8]
	0x03CE36EC LDR X1, [X8 + 0x2F0]
	0x03CE36F0 LDP X30, X21, [X31], #0x20
	0x03CE36F4 BR X2
	0x03CE36F8 LDP X20, X19, [X31 + 0x10]
	0x03CE36FC LDP X30, X21, [X31], #0x20
	0x03CE3700 RET
	0x03CE3704 BL 0x1C16F20
	0x03CE3708 STP D13, D12, [X31 - 0x40]!
	0x03CE370C STP D11, D10, [X31 + 0x10]
	0x03CE3710 STP D9, D8, [X31 + 0x20]
	0x03CE3714 STR X30, [X31 + 0x30]
	0x03CE3718 MOV V8.16B, V7.16B
	0x03CE371C MOV V11.16B, V6.16B
	0x03CE3720 MOV V9.16B, V3.16B
	0x03CE3724 MOV V12.16B, V2.16B
	0x03CE3728 MOV V10.16B, V1.16B
	0x03CE372C MOV V13.16B, V0.16B
	0x03CE3730 BL 0x3CDB488
	0x03CE3734 CBZ X0, 0x3CE37C4
	0x03CE3738 MOV X1, X31
	0x03CE373C BL 0x3C3E51C
	0x03CE3740 FDIV S0, S11, S2
	0x03CE3744 FCMP S2, 0x0
	0x03CE3748 FMUL S1, S0, S13
	0x03CE374C FMUL S0, S12, S0
	0x03CE3750 FCSEL S2, S12, S0, EQ
	0x03CE3754 FCSEL S0, S13, S1, EQ
	0x03CE3758 FADD S4, S0, S2
	0x03CE375C FCMP S4, 0x0
	0x03CE3760 FDIV S1, S8, S3
	0x03CE3764 B.EQ 0x3CE377C
	0x03CE3768 FCMP S11, S4
	0x03CE376C B.PL 0x3CE377C
	0x03CE3770 FDIV S4, S11, S4
	0x03CE3774 FMUL S0, S0, S4
	0x03CE3778 FMUL S2, S2, S4
	0x03CE377C FMUL S4, S1, S10
	0x03CE3780 FMUL S1, S9, S1
	0x03CE3784 FCMP S3, 0x0
	0x03CE3788 FCSEL S3, S9, S1, EQ
	0x03CE378C FCSEL S1, S10, S4, EQ
	0x03CE3790 FADD S4, S1, S3
	0x03CE3794 FCMP S4, 0x0
	0x03CE3798 B.EQ 0x3CE37B0
	0x03CE379C FCMP S8, S4
	0x03CE37A0 B.PL 0x3CE37B0
	0x03CE37A4 FDIV S4, S8, S4
	0x03CE37A8 FMUL S1, S1, S4
	0x03CE37AC FMUL S3, S3, S4
	0x03CE37B0 LDR X30, [X31 + 0x30]
	0x03CE37B4 LDP D9, D8, [X31 + 0x20]
	0x03CE37B8 LDP D11, D10, [X31 + 0x10]
	0x03CE37BC LDP D13, D12, [X31], #0x40
	0x03CE37C0 RET
	0x03CE37C4 BL 0x1C16F20
	0x03CE37C8 STP D15, D14, [X31 - 0x60]!
	0x03CE37CC STP D13, D12, [X31 + 0x10]
	0x03CE37D0 STP D11, D10, [X31 + 0x20]
	0x03CE37D4 STP D9, D8, [X31 + 0x30]
	0x03CE37D8 STP X30, X21, [X31 + 0x40]
	0x03CE37DC STP X20, X19, [X31 + 0x50]
	0x03CE37E0 CBZ X0, 0x3CE3918
	0x03CE37E4 MOV X21, X1
	0x03CE37E8 MOV X1, X31
	0x03CE37EC MOV V12.16B, V7.16B
	0x03CE37F0 MOV V8.16B, V6.16B
	0x03CE37F4 MOV V9.16B, V5.16B
	0x03CE37F8 MOV V14.16B, V4.16B
	0x03CE37FC MOV V13.16B, V3.16B
	0x03CE3800 MOV V10.16B, V2.16B
	0x03CE3804 MOV V11.16B, V1.16B
	0x03CE3808 MOV V15.16B, V0.16B
	0x03CE380C MOV X19, X0
	0x03CE3810 BL 0x3E498D4
	0x03CE3814 AND X21, X21, 0x0
	0x03CE3818 MOV W20, W0
	0x03CE381C FMOV S2, W31
	0x03CE3820 FMOV S5, W31
	0x03CE3824 FMOV S6, W31
	0x03CE3828 MOV X0, X19
	0x03CE382C MOV V0.16B, V15.16B
	0x03CE3830 MOV V1.16B, V11.16B
	0x03CE3834 MOV X1, X21
	0x03CE3838 MOV V3.16B, V14.16B
	0x03CE383C MOV V4.16B, V9.16B
	0x03CE3840 MOV X2, X31
	0x03CE3844 BL 0x3E39A54
	0x03CE3848 FMOV S2, W31
	0x03CE384C FMOV S5, W31
	0x03CE3850 FMOV S6, W31
	0x03CE3854 MOV X0, X19
	0x03CE3858 MOV V0.16B, V15.16B
	0x03CE385C MOV V1.16B, V13.16B
	0x03CE3860 MOV X1, X21
	0x03CE3864 MOV V3.16B, V14.16B
	0x03CE3868 MOV V4.16B, V12.16B
	0x03CE386C MOV X2, X31
	0x03CE3870 BL 0x3E39A54
	0x03CE3874 FMOV S2, W31
	0x03CE3878 FMOV S5, W31
	0x03CE387C FMOV S6, W31
	0x03CE3880 MOV X0, X19
	0x03CE3884 MOV V0.16B, V10.16B
	0x03CE3888 MOV V1.16B, V13.16B
	0x03CE388C MOV X1, X21
	0x03CE3890 MOV V3.16B, V8.16B
	0x03CE3894 MOV V4.16B, V12.16B
	0x03CE3898 MOV X2, X31
	0x03CE389C BL 0x3E39A54
	0x03CE38A0 FMOV S2, W31
	0x03CE38A4 FMOV S5, W31
	0x03CE38A8 FMOV S6, W31
	0x03CE38AC MOV X0, X19
	0x03CE38B0 MOV V0.16B, V10.16B
	0x03CE38B4 MOV V1.16B, V11.16B
	0x03CE38B8 MOV X1, X21
	0x03CE38BC MOV V3.16B, V8.16B
	0x03CE38C0 MOV V4.16B, V9.16B
	0x03CE38C4 MOV X2, X31
	0x03CE38C8 BL 0x3E39A54
	0x03CE38CC ADD W21, W20, 0x2
	0x03CE38D0 ADD W2, W20, 0x1
	0x03CE38D4 MOV X0, X19
	0x03CE38D8 MOV W1, W20
	0x03CE38DC MOV W3, W21
	0x03CE38E0 MOV X4, X31
	0x03CE38E4 BL 0x3E39B84
	0x03CE38E8 ADD W2, W20, 0x3
	0x03CE38EC MOV X0, X19
	0x03CE38F0 MOV W1, W21
	0x03CE38F4 MOV W3, W20
	0x03CE38F8 LDP X20, X19, [X31 + 0x50]
	0x03CE38FC LDP X30, X21, [X31 + 0x40]
	0x03CE3900 LDP D9, D8, [X31 + 0x30]
	0x03CE3904 LDP D11, D10, [X31 + 0x20]
	0x03CE3908 LDP D13, D12, [X31 + 0x10]
	0x03CE390C MOV X4, X31
	0x03CE3910 LDP D15, D14, [X31], #0x60
	0x03CE3914 B 0x3E39B84
	0x03CE3918 BL 0x1C16F20
	0x03CE391C STR X30, [X31 - 0x50]!
	0x03CE3920 STP X26, X25, [X31 + 0x10]
	0x03CE3924 STP X24, X23, [X31 + 0x20]
	0x03CE3928 STP X22, X21, [X31 + 0x30]
	0x03CE392C STP X20, X19, [X31 + 0x40]
	0x03CE3930 CBZ X0, 0x3CE39FC
	0x03CE3934 MOV X22, X1
	0x03CE3938 MOV X1, X31
	0x03CE393C MOV X21, X3
	0x03CE3940 MOV X23, X2
	0x03CE3944 MOV X19, X0
	0x03CE3948 BL 0x3E498D4
	0x03CE394C CBZ X22, 0x3CE39FC
	0x03CE3950 MOV W20, W0
	0x03CE3954 MOV X24, X31
	0x03CE3958 AND X23, X23, 0x0
	0x03CE395C ADD X25, X22, 0x28
	0x03CE3960 ADD X26, X21, 0x28
	0x03CE3964 LDR W8, [X22 + 0x18]
	0x03CE3968 CMP X24, X8
	0x03CE396C B.CS 0x3CE39F8
	0x03CE3970 CBZ X21, 0x3CE39FC
	0x03CE3974 LDR W8, [X21 + 0x18]
	0x03CE3978 CMP X24, X8
	0x03CE397C B.CS 0x3CE39F8
	0x03CE3980 LDP S0, S1, [X25 - 0x8]
	0x03CE3984 LDR V2, [X25], #0xC
	0x03CE3988 LDP S3, S4, [X26 - 0x8]
	0x03CE398C LDR V5, [X26], #0xC
	0x03CE3990 FMOV S6, W31
	0x03CE3994 MOV X0, X19
	0x03CE3998 MOV X1, X23
	0x03CE399C MOV X2, X31
	0x03CE39A0 BL 0x3E39A54
	0x03CE39A4 ADD X24, X24, 0x1
	0x03CE39A8 CMP X24, 0x4
	0x03CE39AC B.NE 0x3CE3964
	0x03CE39B0 ADD W21, W20, 0x2
	0x03CE39B4 ADD W2, W20, 0x1
	0x03CE39B8 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+80], D15
	003 Move [X31+88], D14
	004 Move [X31+96], D13
	005 Move [X31+104], D12
	006 Move [X31+112], D11
	007 Move [X31+120], D10
	008 Move [X31+128], D9
	009 Move [X31+136], D8
	010 Move [X31+144], X30
	011 Move [X31+160], X26
	012 Move [X31+168], X25
	013 Move [X31+176], X24
	014 Move [X31+184], X23
	015 Move [X31+192], X22
	016 Move [X31+200], X21
	017 Move [X31+208], X20
	018 Move [X31+216], X19
	019 Move X21, 0x706000
	020 Move X22, 0x412000
	021 Move W8, [X21+1250]
	022 Move X22, [X22+1432]
	023 Move X19, X1
	024 Move X20, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {49}
	029 Move X0, 0x412000
	030 Move X0, [X0+2600]
	031 Call 0x1C17CF4
	032 Move X0, 0x481000
	033 Move X0, [X0+1408]
	034 Call 0x1C17CF4
	035 Move X0, 0x412000
	036 Move X0, [X0+1448]
	037 Call 0x1C17CF4
	038 Move X0, 0x412000
	039 Move X0, [X0+1432]
	040 Call 0x1C17CF4
	041 Move X0, 0x481000
	042 Move X0, [X0+1472]
	043 Call 0x1C17CF4
	044 Move X0, 0x481000
	045 Move X0, [X0+1480]
	046 Call 0x1C17CF4
	047 Move W8, 1
	048 Move [X21+1250], W8
	049 Move X0, X20
	050 Call Image.get_activeSprite, X0
	051 Move X8, [X22]
	052 Move X21, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X21
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {100}
	066 Move X0, X20
	067 Call Image.get_activeSprite, X0
	068 Move X1, X31
	069 Call DataUtility.GetOuterUV, X0
	070 Move X0, X20
	071 Move [X31+28], S1
	072 Move [X31+36], S0
	073 Move [X31+36], S3
	074 Move [X31+44], S2
	075 Call Image.get_activeSprite, X0
	076 Move X1, X31
	077 Call DataUtility.GetInnerUV, X0
	078 Move X0, X20
	079 Move [X31+152], S1
	080 Move [X31+160], S0
	081 Move [X31+52], S2
	082 Move [X31+44], S3
	083 Call Image.get_activeSprite, X0
	084 Compare X0, 0
	085 JumpIfEqual {950}
	086 Move X1, X31
	087 Call Sprite.get_border, X0
	088 Move X0, X20
	089 Move V11, V0
	090 Move V10, V1
	091 Move V8, V2
	092 Move V9, V3
	093 Call Image.get_activeSprite, X0
	094 Compare X0, 0
	095 JumpIfEqual {950}
	096 Move X1, X31
	097 Call Sprite.get_rect, X0
	098 Move [X31+56], S2
	099 Move [X31+64], S3
	100 Move X21, 0x6F7000
	101 Move W8, [X21+3674]
	102 Compare W8, 0
	103 JumpIfNotEqual {109}
	104 Move X0, 0x419000
	105 Move X0, [X0+2464]
	106 Call 0x1C17CF4
	107 Move W8, 1
	108 Move [X21+3674], W8
	109 Move X8, 0x419000
	110 Move X8, [X8+2464]
	111 Move X21, 0x700000
	112 Move W9, [X21+2632]
	113 Move X8, [X8]
	114 Move X8, [X8+184]
	115 Move S11, [X8]
	116 Move S10, [X8+4]
	117 Move S8, [X8+8]
	118 Move S9, [X8+12]
	119 Compare W9, 0
	120 JumpIfNotEqual {126}
	121 Move X0, 0x41A000
	122 Move X0, [X0+3848]
	123 Call 0x1C17CF4
	124 Move W8, 1
	125 Move [X21+2632], W8
	126 Move X8, 0x41A000
	127 Move X8, [X8+3848]
	128 Move [X31+152], S10
	129 Move [X31+160], S11
	130 Move [X31+52], S8
	131 Move [X31+40], S8
	132 Move [X31+48], S9
	133 Move X8, [X8]
	134 Move [X31+28], S10
	135 Move [X31+36], S11
	136 Move [X31+36], S9
	137 Move X8, [X8+184]
	138 Move S0, [X8+8]
	139 Move S1, [X8+12]
	140 Move W8, 0x42C80000
	141 Move S2, W8
	142 Multiply S3, S0, S2
	143 Multiply S0, S1, S2
	144 Move [X31+56], S3
	145 Move [X31+64], S0
	146 Move X0, X20
	147 Move [X31+72], S9
	148 Move [X31+80], S8
	149 Move [X31+64], S10
	150 Call Graphic.GetPixelAdjustedRect, X0
	151 Move X0, X20
	152 Move V13, V0
	153 Move V9, V1
	154 Move V10, V2
	155 Move V14, V3
	156 Call Image.get_pixelsPerUnit, X0
	157 Move V1, [X20+264]
	158 Move X0, X20
	159 Move V15, V0
	160 Move [X31+24], S1
	161 Call Image.get_pixelsPerUnit, X0
	162 Move V12, [X20+264]
	163 Move X0, X20
	164 Move V8, V0
	165 Call Image.get_pixelsPerUnit, X0
	166 Move V1, [X20+264]
	167 Move S4, [X31+72]
	168 Move S2, [X31+76]
	169 Move X0, X20
	170 Move V5, V9
	171 Multiply S3, S0, S1
	172 Move V1, [X31+64]
	173 NotImplemented "Instruction FDIV not yet implemented."
	174 NotImplemented "Instruction FDIV not yet implemented."
	175 Move V6, V10
	176 NotImplemented "Instruction FDIV not yet implemented."
	177 NotImplemented "Instruction FDIV not yet implemented."
	178 Move V4, V13
	179 Move V7, V14
	180 Move [X31+68], S13
	181 Move [X31+48], S9
	182 Call Image.GetAdjustedBorders, X0, X1, X2
	183 Compare X19, 0
	184 JumpIfEqual {950}
	185 Move V9, V1
	186 Move S1, [X31+56]
	187 Move S5, [X31+60]
	188 Multiply S4, S8, S12
	189 Subtract S8, S10, S2
	190 Move V2, [X31+76]
	191 Subtract S1, S1, S11
	192 Move V6, [X31+64]
	193 Move V13, V0
	194 Move V0, [X31+24]
	195 Subtract S1, S1, S2
	196 Move V2, [X31+72]
	197 Subtract S5, S5, S6
	198 Multiply S0, S15, S0
	199 Move X0, X19
	200 Subtract S2, S5, S2
	201 Move X1, X31
	202 Move [X31+8], S10
	203 Move [X31+16], S14
	204 NotImplemented "Instruction FDIV not yet implemented."
	205 NotImplemented "Instruction FDIV not yet implemented."
	206 Subtract S15, S14, S3
	207 Call VertexHelper.Clear, X0
	208 Move [X31+72], S13
	209 Move [X31+80], S8
	210 Subtract S13, S8, S13
	211 NotImplemented "Instruction FCMP not yet implemented."
	212 Subtract S8, S15, S9
	213 NotImplemented "Instruction FCSEL not yet implemented."
	214 NotImplemented "Instruction FCMP not yet implemented."
	215 NotImplemented "Instruction FCSEL not yet implemented."
	216 Move X0, X20
	217 Move [X31+60], S9
	218 Move [X31+68], S0
	219 Call Image.get_activeSprite, X0
	220 Move X8, [X22]
	221 Move X21, X0
	222 Move W9, [X8+224]
	223 Compare W9, 0
	224 JumpIfNotEqual {227}
	225 Move X0, X8
	226 Call 0x1C17DFC
	227 Move X0, X21
	228 Move X1, X31
	229 Move X2, X31
	230 Call Object.op_Inequality, X0, X1
	231 Move V14, [X31+48]
	232 Move TEMP, X0
	233 And TEMP, TEMP, 1
	234 Compare TEMP, 1
	235 JumpIfNotEqual {322}
	236 Move X0, X20
	237 Call Image.get_hasBorder, X0
	238 Move TEMP, X0
	239 And TEMP, TEMP, 1
	240 Compare TEMP, 1
	241 JumpIfEqual {285}
	242 Move X0, X20
	243 Call Image.get_activeSprite, X0
	244 Compare X0, 0
	245 JumpIfEqual {950}
	246 Move X1, X31
	247 Call Sprite.get_packed, X0
	248 Move TEMP, X0
	249 And TEMP, TEMP, 1
	250 Compare TEMP, 1
	251 JumpIfEqual {285}
	252 Move X0, X20
	253 Call Image.get_activeSprite, X0
	254 Compare X0, 0
	255 JumpIfEqual {950}
	256 Move X1, X31
	257 Call Sprite.get_texture, X0
	258 Move X8, [X22]
	259 Move X21, X0
	260 Move W9, [X8+224]
	261 Compare W9, 0
	262 JumpIfNotEqual {265}
	263 Move X0, X8
	264 Call 0x1C17DFC
	265 Move X0, X21
	266 Move X1, X31
	267 Move X2, X31
	268 Call Object.op_Inequality, X0, X1
	269 Move TEMP, X0
	270 And TEMP, TEMP, 1
	271 Compare TEMP, 1
	272 JumpIfNotEqual {322}
	273 Move X0, X20
	274 Call Image.get_activeSprite, X0
	275 Compare X0, 0
	276 JumpIfEqual {950}
	277 Move X1, X31
	278 Call Sprite.get_texture, X0
	279 Compare X0, 0
	280 JumpIfEqual {950}
	281 Move X1, X31
	282 Call Texture.get_wrapMode, X0
	283 Compare W0, 0
	284 JumpIfEqual {322}
	285 Move W8, [X20+237]
	286 Move [X31+56], S15
	287 Compare W8, 0
	288 JumpIfEqual {370}
	289 Move X24, 0x411000
	290 Move X24, [X24+1448]
	291 Move X0, [X24]
	292 Move W8, [X0+224]
	293 Compare W8, 0
	294 JumpIfNotEqual {296}
	295 Call 0x1C17DFC
	296 Move V1, [X31+64]
	297 NotImplemented "Instruction FDIV not yet implemented."
	298 Move W8, 0x7F800000
	299 NotImplemented "Instruction FRINTP not yet implemented."
	300 NotImplemented "Instruction FDIV not yet implemented."
	301 NotImplemented "Instruction FCVTPS not yet implemented."
	302 Move S0, W8
	303 Move X9, 0x80000000
	304 NotImplemented "Instruction FRINTP not yet implemented."
	305 NotImplemented "Instruction FCMP not yet implemented."
	306 NotImplemented "Instruction FCVTPS not yet implemented."
	307 NotImplemented "Instruction CSEL not yet implemented."
	308 NotImplemented "Instruction FCMP not yet implemented."
	309 Move X0, X20
	310 NotImplemented "Instruction CSEL not yet implemented."
	311 Call Image.get_hasBorder, X0
	312 NotImplemented "Instruction SCVTF not yet implemented."
	313 NotImplemented "Instruction SCVTF not yet implemented."
	314 Move TEMP, X0
	315 And TEMP, TEMP, 1
	316 Compare TEMP, 1
	317 JumpIfNotEqual {447}
	318 Move D0, 2
	319 Add D1, D10, D0
	320 Add D0, D12, D0
	321 Multiply D0, D1, D0
	322 Move W8, [X20+237]
	323 Compare W8, 0
	324 JumpIfEqual {799}
	325 Move V0, [X31+64]
	326 Move X8, [X20]
	327 NotImplemented "Instruction FDIV not yet implemented."
	328 Move X0, X20
	329 NotImplemented "Instruction FDIV not yet implemented."
	330 Move S0, [X31+68]
	331 Move S1, [X31+72]
	332 Move X9, [X8+664]
	333 Move X1, [X8+672]
	334 Add S10, S0, S1
	335 Move V1, [X31+60]
	336 Add S9, S14, S1
	337 Move V1, [X31+76]
	338 Add S13, S0, S1
	339 Add S0, S14, S15
	340 Move [X31+76], S0
	341 NotImplemented "Instruction BLR not yet implemented."
	342 Move X0, X31
	343 Call 0x1E44664
	344 Move X8, 0x480000
	345 Move X8, [X8+1408]
	346 Move V0, [X31+156]
	347 Move X20, X0
	348 Move X0, [X8]
	349 Multiply S15, S0, S11
	350 Move V0, [X31+152]
	351 Move W8, [X0+224]
	352 Multiply S14, S0, S8
	353 Move V0, [X31+52]
	354 Multiply S12, S0, S11
	355 Move V0, [X31+44]
	356 Multiply S11, S0, S8
	357 Compare W8, 0
	358 JumpIfNotEqual {360}
	359 Call 0x1C17DFC
	360 Move V3, [X31+76]
	361 And X1, X20, 0
	362 Move X0, X19
	363 Move V0, V10
	364 Move V1, V9
	365 Move V2, V13
	366 Move V4, V15
	367 Move V5, V14
	368 Move V6, V12
	369 Move V7, V11
	370 Move X0, X20
	371 Call Image.get_hasBorder, X0
	372 Move TEMP, X0
	373 And TEMP, TEMP, 1
	374 Compare TEMP, 1
	375 JumpIfNotEqual {491}
	376 Move X24, 0x411000
	377 Move X24, [X24+1448]
	378 Move X0, [X24]
	379 Move W8, [X0+224]
	380 Compare W8, 0
	381 JumpIfNotEqual {383}
	382 Call 0x1C17DFC
	383 Move V1, [X31+64]
	384 NotImplemented "Instruction FDIV not yet implemented."
	385 Move W8, 0x7F800000
	386 NotImplemented "Instruction FRINTP not yet implemented."
	387 NotImplemented "Instruction FDIV not yet implemented."
	388 NotImplemented "Instruction FCVTPS not yet implemented."
	389 Move S0, W8
	390 Move X9, 0x80000000
	391 NotImplemented "Instruction FCMP not yet implemented."
	392 NotImplemented "Instruction FRINTP not yet implemented."
	393 Move X8, -52383744
	394 NotImplemented "Instruction CSEL not yet implemented."
	395 NotImplemented "Instruction FCMP not yet implemented."
	396 Move V2, [X8+3608]
	397 NotImplemented "Instruction FCVTPS not yet implemented."
	398 NotImplemented "Instruction CSEL not yet implemented."
	399 Add X8, X22, X23
	400 Move D0, 2
	401 NotImplemented "Instruction SCVTF not yet implemented."
	402 Add D0, D1, D0
	403 Add D0, D0, D0
	404 Move D1, 4
	405 Multiply D0, D0, D1
	406 NotImplemented "Instruction FCMP not yet implemented."
	407 Move X0, X20
	408 Move X1, X31
	409 Call Object.get_name, X0
	410 Move X8, 0x480000
	411 Move X8, [X8+1472]
	412 Move X9, 0x480000
	413 Move X9, [X9+1480]
	414 Move X1, X0
	415 Move X8, [X8]
	416 Move X3, X31
	417 Move X2, [X9]
	418 Move X0, X8
	419 Call String.Concat, X0, X1, X2
	420 Move X8, 0x411000
	421 Move X8, [X8+2600]
	422 Move X21, X0
	423 Move X8, [X8]
	424 Move W9, [X8+224]
	425 Compare W9, 0
	426 JumpIfNotEqual {429}
	427 Move X0, X8
	428 Call 0x1C17DFC
	429 Move X0, X21
	430 Move X1, X20
	431 Move X2, X31
	432 Call Debug.LogError, X0, X1
	433 Move X0, [X24]
	434 Move X8, -52383744
	435 NotImplemented "Instruction SCVTF not yet implemented."
	436 NotImplemented "Instruction SCVTF not yet implemented."
	437 Move V2, [X8+1880]
	438 NotImplemented "Instruction FDIV not yet implemented."
	439 Move D1, 1
	440 Move W8, [X0+224]
	441 Add D1, D0, D1
	442 Add D1, D1, D1
	443 NotImplemented "Instruction FDIV not yet implemented."
	444 Multiply D10, D0, D11
	445 Compare W8, 0
	446 JumpIfNotEqual {522}
	447 Multiply X8, X23, X22
	448 NotImplemented "Instruction SCVTF not yet implemented."
	449 Move X8, -52383744
	450 Move V1, [X8+3608]
	451 Move V3, [X31+76]
	452 Move D2, 4
	453 Multiply D0, D0, D2
	454 NotImplemented "Instruction FCMP not yet implemented."
	455 Move X0, X20
	456 Move X1, X31
	457 Call Object.get_name, X0
	458 Move X8, 0x480000
	459 Move X8, [X8+1472]
	460 Move X9, 0x480000
	461 Move X9, [X9+1480]
	462 Move X1, X0
	463 Move X8, [X8]
	464 Move X3, X31
	465 Move X2, [X9]
	466 Move X0, X8
	467 Call String.Concat, X0, X1, X2
	468 Move X8, 0x411000
	469 Move X8, [X8+2600]
	470 Move X21, X0
	471 Move X8, [X8]
	472 Move W9, [X8+224]
	473 Compare W9, 0
	474 JumpIfNotEqual {477}
	475 Move X0, X8
	476 Call 0x1C17DFC
	477 Move X0, X21
	478 Move X1, X20
	479 Move X2, X31
	480 Call Debug.LogError, X0, X1
	481 Move X0, X20
	482 Call Image.get_hasBorder, X0
	483 Move TEMP, X0
	484 And TEMP, TEMP, 1
	485 Compare TEMP, 1
	486 JumpIfNotEqual {497}
	487 Move D0, 2
	488 Add D1, D10, D0
	489 Add D0, D12, D0
	490 NotImplemented "Instruction FDIV not yet implemented."
	491 Move X0, X20
	492 Call Image.get_hasBorder, X0
	493 Move TEMP, X0
	494 And TEMP, TEMP, 1
	495 Compare TEMP, 1
	496 JumpIfNotEqual {799}
	497 NotImplemented "Instruction FDIV not yet implemented."
	498 Move X0, [X24]
	499 Move W8, [X0+224]
	500 Compare W8, 0
	501 JumpIfNotEqual {503}
	502 Call 0x1C17DFC
	503 Move X8, -52383744
	504 Move V0, [X8+4064]
	505 Move X0, X20
	506 NotImplemented "Instruction FDIV not yet implemented."
	507 NotImplemented "Instruction FSQRT not yet implemented."
	508 Multiply D10, D10, D11
	509 Call Image.get_hasBorder, X0
	510 Move W8, W0
	511 Move X0, [X24]
	512 Move D0, -2
	513 Add D1, D11, D0
	514 Add D0, D10, D0
	515 Move W9, [X0+224]
	516 And W31, W8, 1
	517 NotImplemented "Instruction FCSEL not yet implemented."
	518 NotImplemented "Instruction FCSEL not yet implemented."
	519 Compare W9, 0
	520 JumpIfNotEqual {522}
	521 Call 0x1C17DFC
	522 Move X9, 0x7FF00000
	523 NotImplemented "Instruction FRINTM not yet implemented."
	524 Move D2, X9
	525 NotImplemented "Instruction FCVTMS not yet implemented."
	526 Move X10, 0x80000000
	527 NotImplemented "Instruction FRINTM not yet implemented."
	528 NotImplemented "Instruction FCMP not yet implemented."
	529 NotImplemented "Instruction FCVTMS not yet implemented."
	530 NotImplemented "Instruction CSEL not yet implemented."
	531 NotImplemented "Instruction FCMP not yet implemented."
	532 NotImplemented "Instruction CSEL not yet implemented."
	533 NotImplemented "Instruction SCVTF not yet implemented."
	534 NotImplemented "Instruction FDIV not yet implemented."
	535 NotImplemented "Instruction SCVTF not yet implemented."
	536 NotImplemented "Instruction FDIV not yet implemented."
	537 Move [X31+64], S0
	538 Move V3, [X31+76]
	539 Move W8, [X20+237]
	540 Compare W8, 0
	541 JumpIfEqual {623}
	542 NotImplemented "Instruction CMP not yet implemented."
	543 Move V8, [X31+44]
	544 Move S0, [X31+152]
	545 Move S1, [X31+156]
	546 Move X25, 0x480000
	547 Move X24, X31
	548 Subtract S0, S8, S0
	549 Move [X31+24], S0
	550 Move V0, [X31+52]
	551 Move X25, [X25+1408]
	552 Subtract S12, S0, S1
	553 Move V2, [X31+64]
	554 NotImplemented "Instruction SCVTF not yet implemented."
	555 Add X24, X24, 1
	556 NotImplemented "Instruction SCVTF not yet implemented."
	557 Multiply S0, S2, S0
	558 Multiply S1, S2, S1
	559 Move V2, [X31+60]
	560 Add S1, S2, S1
	561 NotImplemented "Instruction FCMP not yet implemented."
	562 Add S0, S2, S0
	563 Move V4, [X31+24]
	564 Subtract S2, S15, S0
	565 Subtract S1, S1, S0
	566 Multiply S2, S4, S2
	567 NotImplemented "Instruction FDIV not yet implemented."
	568 Move V2, [X31+152]
	569 Add S8, S2, S1
	570 Move V1, V15
	571 NotImplemented "Instruction CMP not yet implemented."
	572 Move S2, [X31+48]
	573 Move S15, [X31+52]
	574 Move X26, X31
	575 Add S9, S2, S0
	576 Add S10, S2, S1
	577 Move V2, [X31+72]
	578 NotImplemented "Instruction SCVTF not yet implemented."
	579 Add X26, X26, 1
	580 NotImplemented "Instruction SCVTF not yet implemented."
	581 Multiply S1, S11, S1
	582 Multiply S0, S11, S0
	583 Add S13, S2, S1
	584 NotImplemented "Instruction FCMP not yet implemented."
	585 Add S14, S2, S0
	586 Subtract S0, S3, S14
	587 Multiply S0, S12, S0
	588 Subtract S1, S13, S14
	589 NotImplemented "Instruction FDIV not yet implemented."
	590 Move V1, [X31+156]
	591 Move V13, V3
	592 Add S15, S1, S0
	593 Move X8, [X20]
	594 Move X0, X20
	595 Move X9, [X8+664]
	596 Move X1, [X8+672]
	597 NotImplemented "Instruction BLR not yet implemented."
	598 Move X0, X31
	599 Call 0x1E44664
	600 Move X8, [X25]
	601 Move X21, X0
	602 Move W9, [X8+224]
	603 Compare W9, 0
	604 JumpIfNotEqual {607}
	605 Move X0, X8
	606 Call 0x1C17DFC
	607 Move V1, [X31+68]
	608 Move S5, [X31+152]
	609 Move S4, [X31+156]
	610 And X1, X21, 0
	611 Move X0, X19
	612 Add S0, S1, S14
	613 Add S2, S1, S13
	614 Move V1, V9
	615 Move V3, V10
	616 Move V6, V15
	617 Move V7, V8
	618 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	619 Move V3, [X31+76]
	620 NotImplemented "Instruction CMP not yet implemented."
	621 Move V15, [X31+56]
	622 NotImplemented "Instruction CMP not yet implemented."
	623 Move X0, X20
	624 Call Image.get_hasBorder, X0
	625 Move V14, [X31+48]
	626 Move TEMP, X0
	627 And TEMP, TEMP, 1
	628 Compare TEMP, 1
	629 JumpIfNotEqual {799}
	630 NotImplemented "Instruction CMP not yet implemented."
	631 Move S1, [X31+68]
	632 Move S2, [X31+72]
	633 Move V9, [X31+44]
	634 Move V0, [X31+152]
	635 Move X25, 0x480000
	636 Add S3, S1, S2
	637 Move V2, [X31+76]
	638 Subtract S12, S9, S0
	639 Move S0, W31
	640 Move X24, X31
	641 Add S2, S1, S2
	642 Move [X31+20], S2
	643 Move [X31+28], S3
	644 Move V2, [X31+8]
	645 Add S8, S1, S0
	646 Add S2, S2, S1
	647 Move [X31+16], S2
	648 Move X25, [X25+1408]
	649 Move V2, [X31+64]
	650 NotImplemented "Instruction SCVTF not yet implemented."
	651 Add X24, X24, 1
	652 NotImplemented "Instruction SCVTF not yet implemented."
	653 Multiply S0, S2, S0
	654 Multiply S1, S2, S1
	655 Move V2, [X31+60]
	656 Add S13, S2, S1
	657 NotImplemented "Instruction FCMP not yet implemented."
	658 Add S10, S2, S0
	659 Subtract S0, S15, S10
	660 Multiply S0, S12, S0
	661 Subtract S1, S13, S10
	662 NotImplemented "Instruction FDIV not yet implemented."
	663 Move V1, [X31+152]
	664 Move V13, V15
	665 Add S9, S1, S0
	666 Move X8, [X20]
	667 Move X0, X20
	668 Move X9, [X8+664]
	669 Move X1, [X8+672]
	670 NotImplemented "Instruction BLR not yet implemented."
	671 Move X0, X31
	672 Call 0x1E44664
	673 Move X8, [X25]
	674 Move X21, X0
	675 Move W9, [X8+224]
	676 Compare W9, 0
	677 JumpIfNotEqual {680}
	678 Move X0, X8
	679 Call 0x1C17DFC
	680 Add S15, S14, S10
	681 Add S10, S14, S13
	682 Move S13, [X31+152]
	683 Move S6, [X31+156]
	684 Move V2, [X31+24]
	685 Move V4, [X31+32]
	686 And X1, X21, 0
	687 Move X0, X19
	688 Move V0, V8
	689 Move V1, V15
	690 Move V3, V10
	691 Move V5, V13
	692 Move V7, V9
	693 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	694 Move X8, [X20]
	695 Move X0, X20
	696 Move X9, [X8+664]
	697 Move X1, [X8+672]
	698 NotImplemented "Instruction BLR not yet implemented."
	699 Move X0, X31
	700 Call 0x1E44664
	701 Move S2, [X31+16]
	702 Move S0, [X31+20]
	703 Move V4, [X31+52]
	704 Move V6, [X31+40]
	705 And X1, X0, 0
	706 Move X0, X19
	707 Move V1, V15
	708 Move V3, V10
	709 Move V5, V13
	710 Move V7, V9
	711 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	712 Move V15, [X31+56]
	713 NotImplemented "Instruction CMP not yet implemented."
	714 Move V1, [X31+12]
	715 NotImplemented "Instruction CMP not yet implemented."
	716 Move V2, V15
	717 Move V15, [X31+52]
	718 Move V0, [X31+156]
	719 Move V3, [X31+60]
	720 Add S2, S14, S2
	721 Move X24, 0x480000
	722 Subtract S0, S15, S0
	723 Add S3, S14, S3
	724 Move [X31+24], S0
	725 Move S0, W31
	726 Move [X31+60], S2
	727 Move [X31+68], S3
	728 Add S10, S1, S14
	729 Add S12, S14, S0
	730 Move X24, [X24+1408]
	731 Move V14, [X31+68]
	732 Move X23, X31
	733 Move V2, [X31+72]
	734 NotImplemented "Instruction SCVTF not yet implemented."
	735 Add X23, X23, 1
	736 NotImplemented "Instruction SCVTF not yet implemented."
	737 Multiply S1, S11, S1
	738 Add S13, S2, S1
	739 Move V1, V2
	740 Move V2, [X31+76]
	741 Multiply S0, S11, S0
	742 Add S8, S1, S0
	743 NotImplemented "Instruction FCMP not yet implemented."
	744 Move V1, [X31+24]
	745 Subtract S0, S2, S8
	746 Multiply S0, S1, S0
	747 Subtract S1, S13, S8
	748 NotImplemented "Instruction FDIV not yet implemented."
	749 Move V1, [X31+156]
	750 Move V13, V2
	751 Add S15, S1, S0
	752 Move X8, [X20]
	753 Move X0, X20
	754 Move X9, [X8+664]
	755 Move X1, [X8+672]
	756 NotImplemented "Instruction BLR not yet implemented."
	757 Move X0, X31
	758 Call 0x1E44664
	759 Move X8, [X24]
	760 Move X21, X0
	761 Move W9, [X8+224]
	762 Compare W9, 0
	763 JumpIfNotEqual {766}
	764 Move X0, X8
	765 Call 0x1C17DFC
	766 Add S9, S14, S8
	767 Add S8, S14, S13
	768 Move S7, [X31+152]
	769 Move S13, [X31+156]
	770 Move V3, [X31+64]
	771 Move V5, [X31+28]
	772 And X1, X21, 0
	773 Move X0, X19
	774 Move V0, V9
	775 Move V1, V12
	776 Move V2, V8
	777 Move V4, V13
	778 Move V6, V15
	779 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	780 Move X8, [X20]
	781 Move X0, X20
	782 Move X9, [X8+664]
	783 Move X1, [X8+672]
	784 NotImplemented "Instruction BLR not yet implemented."
	785 Move X0, X31
	786 Call 0x1E44664
	787 Move V1, [X31+60]
	788 Move V5, [X31+44]
	789 Move V7, [X31+36]
	790 And X1, X0, 0
	791 Move X0, X19
	792 Move V0, V9
	793 Move V2, V8
	794 Move V3, V10
	795 Move V4, V13
	796 Move V6, V15
	797 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	798 NotImplemented "Instruction CMP not yet implemented."
	799 Move X20, [X31+208]
	800 Move X19, [X31+216]
	801 Move X22, [X31+192]
	802 Move X21, [X31+200]
	803 Move X24, [X31+176]
	804 Move X23, [X31+184]
	805 Move X26, [X31+160]
	806 Move X25, [X31+168]
	807 Move X30, [X31+144]
	808 Move D9, [X31+128]
	809 Move D8, [X31+136]
	810 Move D11, [X31+112]
	811 Move D10, [X31+120]
	812 Move D13, [X31+96]
	813 Move D12, [X31+104]
	814 Move D15, [X31+80]
	815 Move D14, [X31+88]
	816 Add X31, X31, 224
	817 Return 
	818 Move S0, W31
	819 Add S12, S14, S0
	820 Move V0, [X31+60]
	821 Add S0, S14, S0
	822 Move V14, [X31+68]
	823 Move [X31+64], S0
	824 Move X8, [X20]
	825 Move S0, W31
	826 Add S9, S14, S0
	827 Move V0, [X31+72]
	828 Move X9, [X8+664]
	829 Move X1, [X8+672]
	830 Move X0, X20
	831 Add S8, S14, S0
	832 NotImplemented "Instruction BLR not yet implemented."
	833 Move X0, X31
	834 Call 0x1E44664
	835 Move X8, 0x480000
	836 Move X8, [X8+1408]
	837 Move X21, X0
	838 Move V11, V14
	839 Move X8, [X8]
	840 Move W9, [X8+224]
	841 Compare W9, 0
	842 JumpIfNotEqual {845}
	843 Move X0, X8
	844 Call 0x1C17DFC
	845 Move V0, V9
	846 Move V2, V8
	847 Move V15, [X31+64]
	848 Move [X31+68], S9
	849 Move [X31+76], S8
	850 Move S14, [X31+28]
	851 Move S8, [X31+32]
	852 Move S9, [X31+152]
	853 Move S10, [X31+156]
	854 And X1, X21, 0
	855 Move X0, X19
	856 Move V1, V12
	857 Move V3, V15
	858 Move V4, V8
	859 Move V5, V14
	860 Move V6, V10
	861 Move V7, V9
	862 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	863 Move X8, [X20]
	864 Move V0, [X31+76]
	865 Move X0, X20
	866 Move X9, [X8+664]
	867 Move X1, [X8+672]
	868 Add S13, S11, S0
	869 Move V0, [X31+8]
	870 Add S11, S0, S11
	871 NotImplemented "Instruction BLR not yet implemented."
	872 Move X0, X31
	873 Call 0x1E44664
	874 Move V1, V12
	875 Move V2, V11
	876 Move V12, V11
	877 Move V3, V15
	878 Move V11, [X31+52]
	879 Move V15, [X31+40]
	880 And X1, X0, 0
	881 Move X0, X19
	882 Move V0, V13
	883 Move V4, V11
	884 Move V5, V14
	885 Move V6, V15
	886 Move V7, V9
	887 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	888 Move X8, [X20]
	889 Move V0, [X31+48]
	890 Move V1, [X31+56]
	891 Move X0, X20
	892 Move X9, [X8+664]
	893 Move X1, [X8+672]
	894 Add S9, S0, S1
	895 Move V1, [X31+12]
	896 Add S14, S1, S0
	897 NotImplemented "Instruction BLR not yet implemented."
	898 Move X0, X31
	899 Call 0x1E44664
	900 Move V4, V8
	901 Move V8, [X31+44]
	902 Move V6, V10
	903 Move V10, [X31+36]
	904 Move S0, [X31+68]
	905 Move S2, [X31+72]
	906 And X1, X0, 0
	907 Move X0, X19
	908 Move V1, V9
	909 Move V3, V14
	910 Move V5, V8
	911 Move V7, V10
	912 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	913 Move X8, [X20]
	914 Move X0, X20
	915 Move X9, [X8+664]
	916 Move X1, [X8+672]
	917 NotImplemented "Instruction BLR not yet implemented."
	918 Move X0, X31
	919 Call 0x1E44664
	920 And X1, X0, 0
	921 Move X0, X19
	922 Move V0, V13
	923 Move V1, V9
	924 Move V2, V12
	925 Move V3, V14
	926 Move V4, V11
	927 Move V5, V8
	928 Move V6, V15
	929 Move V7, V10
	930 Move X20, [X31+208]
	931 Move X19, [X31+216]
	932 Move X22, [X31+192]
	933 Move X21, [X31+200]
	934 Move X24, [X31+176]
	935 Move X23, [X31+184]
	936 Move X26, [X31+160]
	937 Move X25, [X31+168]
	938 Move X30, [X31+144]
	939 Move D9, [X31+128]
	940 Move D8, [X31+136]
	941 Move D11, [X31+112]
	942 Move D10, [X31+120]
	943 Move D13, [X31+96]
	944 Move D12, [X31+104]
	945 Move D15, [X31+80]
	946 Move D14, [X31+88]
	947 Add X31, X31, 224
	948 Call Image.AddQuad, X0, X1, X2, X3, X4, X5
	949 Return 
	950 Call 0x1C17F20

Method: System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector3[] quadPositions, UnityEngine.Color32 color, UnityEngine.Vector3[] quadUVs)

Disassembly:
	0x03CE491C BL 0x1C16CF4
	0x03CE4920 ADRP X0, 0x47E000
	0x03CE4924 LDR X0, [X0 + 0x618]
	0x03CE4928 BL 0x1C16CF4
	0x03CE492C ADRP X0, 0x47E000
	0x03CE4930 LDR X0, [X0 + 0x610]
	0x03CE4934 BL 0x1C16CF4
	0x03CE4938 ADRP X0, 0x469000
	0x03CE493C LDR X0, [X0 + 0xA88]
	0x03CE4940 BL 0x1C16CF4
	0x03CE4944 ADRP X0, 0x411000
	0x03CE4948 LDR X0, [X0 + 0x9B0]
	0x03CE494C BL 0x1C16CF4
	0x03CE4950 MOVZ W8, 0x1
	0x03CE4954 STRB W8, [X24 + 0x4EB]
	0x03CE4958 LDR X8, [X20]
	0x03CE495C MOVZ W1, 0x4
	0x03CE4960 LDR X8, [X8 + 0xB8]
	0x03CE4964 STR X31, [X8]
	0x03CE4968 LDR X0, [X23]
	0x03CE496C BL 0x1C16D6C
	0x03CE4970 LDR X8, [X20]
	0x03CE4974 MOVZ W1, 0x4
	0x03CE4978 LDR X8, [X8 + 0xB8]
	0x03CE497C STR X0, [X8 + 0x8]
	0x03CE4980 LDR X0, [X23]
	0x03CE4984 BL 0x1C16D6C
	0x03CE4988 LDR X8, [X20]
	0x03CE498C MOVZ W1, 0x4
	0x03CE4990 LDR X8, [X8 + 0xB8]
	0x03CE4994 STR X0, [X8 + 0x10]
	0x03CE4998 LDR X0, [X22]
	0x03CE499C BL 0x1C16D6C
	0x03CE49A0 LDR X8, [X20]
	0x03CE49A4 MOVZ W1, 0x4
	0x03CE49A8 LDR X8, [X8 + 0xB8]
	0x03CE49AC STR X0, [X8 + 0x18]
	0x03CE49B0 LDR X0, [X22]
	0x03CE49B4 BL 0x1C16D6C
	0x03CE49B8 LDR X8, [X20]
	0x03CE49BC LDR X8, [X8 + 0xB8]
	0x03CE49C0 STR X0, [X8 + 0x20]
	0x03CE49C4 LDR X0, [X21]
	0x03CE49C8 BL 0x1C16F10
	0x03CE49CC LDR X1, [X19]
	0x03CE49D0 MOV X19, X0
	0x03CE49D4 BL 0x301B7C4
	0x03CE49D8 LDR X8, [X20]
	0x03CE49DC LDP X22, X21, [X31 + 0x20]
	0x03CE49E0 LDP X24, X23, [X31 + 0x10]
	0x03CE49E4 LDR X8, [X8 + 0xB8]
	0x03CE49E8 STR X19, [X8 + 0x28]
	0x03CE49EC LDP X20, X19, [X31 + 0x30]
	0x03CE49F0 LDR X30, [X31], #0x40
	0x03CE49F4 RET
	0x03CE49F8 STP X30, X21, [X31 - 0x20]!
	0x03CE49FC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Compare X0, 0
	011 JumpIfEqual {68}
	012 Move X22, X1
	013 Move X1, X31
	014 Move X21, X3
	015 Move X23, X2
	016 Move X19, X0
	017 Call VertexHelper.get_currentVertCount, X0
	018 Compare X22, 0
	019 JumpIfEqual {68}
	020 Move W20, W0
	021 Move X24, X31
	022 And X23, X23, 0
	023 Add X25, X22, 40
	024 Add X26, X21, 40
	025 Move W8, [X22+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Compare X21, 0
	028 JumpIfEqual {68}
	029 Move W8, [X21+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move S0, [X25-8]
	032 Move S1, [X25-4]
	033 Move V2, [X25+12]
	034 Move S3, [X26-8]
	035 Move S4, [X26-4]
	036 Move V5, [X26+12]
	037 Move S6, W31
	038 Move X0, X19
	039 Move X1, X23
	040 Move X2, X31
	041 Call VertexHelper.AddVert, X0, X1, X2, X3
	042 Add X24, X24, 1
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Add W21, W20, 2
	045 Add W2, W20, 1
	046 Move X0, X19
	047 Move W1, W20
	048 Move W3, W21
	049 Move X4, X31
	050 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	051 Add W2, W20, 3
	052 Move X0, X19
	053 Move W1, W21
	054 Move W3, W20
	055 Move X20, [X31+64]
	056 Move X19, [X31+72]
	057 Move X22, [X31+48]
	058 Move X21, [X31+56]
	059 Move X24, [X31+32]
	060 Move X23, [X31+40]
	061 Move X26, [X31+16]
	062 Move X25, [X31+24]
	063 Move X4, X31
	064 Move X30, [X31+80]
	065 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	066 Return 
	067 Call 0x1C17F28
	068 Call 0x1C17F20

Method: System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, UnityEngine.Color32 color, UnityEngine.Vector2 uvMin, UnityEngine.Vector2 uvMax)

Disassembly:
	0x03CE47C8 ADD W20, W27, 0x1
	0x03CE47CC MOV W1, W20
	0x03CE47D0 BL 0x301BCCC
	0x03CE47D4 CBZ X0, 0x3CE4894
	0x03CE47D8 MOV X21, X0
	0x03CE47DC BL 0x3CDFE9C
	0x03CE47E0 LDR X8, [X25]
	0x03CE47E4 MOV X22, X0
	0x03CE47E8 LDR W9, [X8 + 0xE0]
	0x03CE47EC CBNZ W9, 0x3CE47F8
	0x03CE47F0 MOV X0, X8
	0x03CE47F4 BL 0x1C16DFC
	0x03CE47F8 MOV X0, X31
	0x03CE47FC MOV X1, X22
	0x03CE4800 MOV X2, X31
	0x03CE4804 BL 0x3C354F8
	0x03CE4808 TBZ X0, 0x0, 0x3CE486C
	0x03CE480C MOV X0, X21
	0x03CE4810 BL 0x3CDFE9C
	0x03CE4814 CBZ X19, 0x3CE4894
	0x03CE4818 MOV X1, X0
	0x03CE481C MOV X0, X19
	0x03CE4820 MOV X2, X31
	0x03CE4824 BL 0x3C42B9C
	0x03CE4828 TBZ X0, 0x0, 0x3CE486C
	0x03CE482C LDR X8, [X21]
	0x03CE4830 MOV X0, X21
	0x03CE4834 LDR X9, [X8 + 0x2D8]
	0x03CE4838 LDR X1, [X8 + 0x2E0]
	0x03CE483C BLR X9
	0x03CE4840 LDR X0, [X23]
	0x03CE4844 LDR W8, [X0 + 0xE0]
	0x03CE4848 CBNZ W8, 0x3CE4854
	0x03CE484C BL 0x1C16DFC
	0x03CE4850 LDR X0, [X23]
	0x03CE4854 LDR X8, [X0 + 0xB8]
	0x03CE4858 LDR X0, [X8 + 0x28]
	0x03CE485C CBZ X0, 0x3CE4894
	0x03CE4860 LDR X2, [X26]
	0x03CE4864 MOV W1, W20
	0x03CE4868 BL 0x301DA48
	0x03CE486C TBNZ X27, 0x1F, 0x3CE487C
	0x03CE4870 LDR X0, [X23]
	0x03CE4874 SUB W27, W27, 0x1
	0x03CE4878 B 0x3CE47A8
	0x03CE487C LDP X20, X19, [X31 + 0x40]
	0x03CE4880 LDP X22, X21, [X31 + 0x30]
	0x03CE4884 LDP X24, X23, [X31 + 0x20]
	0x03CE4888 LDP X26, X25, [X31 + 0x10]
	0x03CE488C LDP X30, X27, [X31], #0x50
	0x03CE4890 RET
	0x03CE4894 BL 0x1C16F20
	0x03CE4898 STP X30, X19, [X31 - 0x10]!
	0x03CE489C LDR X8, [X0]
	0x03CE48A0 MOV X19, X0
	0x03CE48A4 LDR X9, [X8 + 0x308]
	0x03CE48A8 LDR X1, [X8 + 0x310]
	0x03CE48AC BLR X9
	0x03CE48B0 LDR X8, [X19]
	0x03CE48B4 MOV X0, X19
	0x03CE48B8 LDR X9, [X8 + 0x2F8]
	0x03CE48BC LDR X1, [X8 + 0x300]
	0x03CE48C0 BLR X9
	0x03CE48C4 MOV X0, X19
	0x03CE48C8 LDP X30, X19, [X31], #0x10
	0x03CE48CC B 0x3CDB310
	0x03CE48D0 STR X30, [X31 - 0x40]!
	0x03CE48D4 STP X24, X23, [X31 + 0x10]
	0x03CE48D8 STP X22, X21, [X31 + 0x20]
	0x03CE48DC STP X20, X19, [X31 + 0x30]
	0x03CE48E0 ADRP X24, 0x703000
	0x03CE48E4 ADRP X20, 0x47E000
	0x03CE48E8 ADRP X23, 0x469000
	0x03CE48EC ADRP X22, 0x411000
	0x03CE48F0 ADRP X21, 0x47E000
	0x03CE48F4 ADRP X19, 0x47E000
	0x03CE48F8 LDRB W8, [X24 + 0x4EB]
	0x03CE48FC LDR X20, [X20 + 0x580]
	0x03CE4900 LDR X23, [X23 + 0xA88]
	0x03CE4904 LDR X22, [X22 + 0x9B0]
	0x03CE4908 LDR X21, [X21 + 0x610]
	0x03CE490C LDR X19, [X19 + 0x618]
	0x03CE4910 TBNZ X8, 0x0, 0x3CE4958
	0x03CE4914 ADRP X0, 0x47E000
	0x03CE4918 LDR X0, [X0 + 0x580]

ISIL:
	001 Move [X31-96], D15
	002 Move [X31-88], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Compare X0, 0
	014 JumpIfEqual {99}
	015 Move X21, X1
	016 Move X1, X31
	017 Move V12, V7
	018 Move V8, V6
	019 Move V9, V5
	020 Move V14, V4
	021 Move V13, V3
	022 Move V10, V2
	023 Move V11, V1
	024 Move V15, V0
	025 Move X19, X0
	026 Call VertexHelper.get_currentVertCount, X0
	027 And X21, X21, 0
	028 Move W20, W0
	029 Move S2, W31
	030 Move S5, W31
	031 Move S6, W31
	032 Move X0, X19
	033 Move V0, V15
	034 Move V1, V11
	035 Move X1, X21
	036 Move V3, V14
	037 Move V4, V9
	038 Move X2, X31
	039 Call VertexHelper.AddVert, X0, X1, X2, X3
	040 Move S2, W31
	041 Move S5, W31
	042 Move S6, W31
	043 Move X0, X19
	044 Move V0, V15
	045 Move V1, V13
	046 Move X1, X21
	047 Move V3, V14
	048 Move V4, V12
	049 Move X2, X31
	050 Call VertexHelper.AddVert, X0, X1, X2, X3
	051 Move S2, W31
	052 Move S5, W31
	053 Move S6, W31
	054 Move X0, X19
	055 Move V0, V10
	056 Move V1, V13
	057 Move X1, X21
	058 Move V3, V8
	059 Move V4, V12
	060 Move X2, X31
	061 Call VertexHelper.AddVert, X0, X1, X2, X3
	062 Move S2, W31
	063 Move S5, W31
	064 Move S6, W31
	065 Move X0, X19
	066 Move V0, V10
	067 Move V1, V11
	068 Move X1, X21
	069 Move V3, V8
	070 Move V4, V9
	071 Move X2, X31
	072 Call VertexHelper.AddVert, X0, X1, X2, X3
	073 Add W21, W20, 2
	074 Add W2, W20, 1
	075 Move X0, X19
	076 Move W1, W20
	077 Move W3, W21
	078 Move X4, X31
	079 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	080 Add W2, W20, 3
	081 Move X0, X19
	082 Move W1, W21
	083 Move W3, W20
	084 Move X20, [X31+80]
	085 Move X19, [X31+88]
	086 Move X30, [X31+64]
	087 Move X21, [X31+72]
	088 Move D9, [X31+48]
	089 Move D8, [X31+56]
	090 Move D11, [X31+32]
	091 Move D10, [X31+40]
	092 Move D13, [X31+16]
	093 Move D12, [X31+24]
	094 Move X4, X31
	095 Move D15, [X31+96]
	096 Move D14, [X31+104]
	097 Call VertexHelper.AddTriangle, X0, X1, X2, X3
	098 Return 
	099 Call 0x1C17F20

Method: UnityEngine.Vector4 GetAdjustedBorders(UnityEngine.Vector4 border, UnityEngine.Rect adjustedRect)

Disassembly:
	0x03CE4708 ADRP X23, 0x47E000
	0x03CE470C LDRB W8, [X20 + 0x4E8]
	0x03CE4710 LDR X23, [X23 + 0x580]
	0x03CE4714 MOV X19, X0
	0x03CE4718 TBNZ X8, 0x0, 0x3CE4760
	0x03CE471C ADRP X0, 0x47E000
	0x03CE4720 LDR X0, [X0 + 0x580]
	0x03CE4724 BL 0x1C16CF4
	0x03CE4728 ADRP X0, 0x47E000
	0x03CE472C LDR X0, [X0 + 0x5F8]
	0x03CE4730 BL 0x1C16CF4
	0x03CE4734 ADRP X0, 0x47E000
	0x03CE4738 LDR X0, [X0 + 0x600]
	0x03CE473C BL 0x1C16CF4
	0x03CE4740 ADRP X0, 0x47E000
	0x03CE4744 LDR X0, [X0 + 0x608]
	0x03CE4748 BL 0x1C16CF4
	0x03CE474C ADRP X0, 0x40F000
	0x03CE4750 LDR X0, [X0 + 0x598]
	0x03CE4754 BL 0x1C16CF4
	0x03CE4758 MOVZ W8, 0x1
	0x03CE475C STRB W8, [X20 + 0x4E8]
	0x03CE4760 LDR X0, [X23]
	0x03CE4764 LDR W8, [X0 + 0xE0]
	0x03CE4768 CBNZ W8, 0x3CE4774
	0x03CE476C BL 0x1C16DFC
	0x03CE4770 LDR X0, [X23]
	0x03CE4774 LDR X8, [X0 + 0xB8]
	0x03CE4778 LDR X8, [X8 + 0x28]
	0x03CE477C CBZ X8, 0x3CE4894
	0x03CE4780 LDR W8, [X8 + 0x18]
	0x03CE4784 CMP W8, 0x1
	0x03CE4788 B.MI 0x3CE487C
	0x03CE478C ADRP X24, 0x47E000
	0x03CE4790 ADRP X25, 0x40F000
	0x03CE4794 ADRP X26, 0x47E000
	0x03CE4798 LDR X24, [X24 + 0x608]
	0x03CE479C LDR X25, [X25 + 0x598]
	0x03CE47A0 LDR X26, [X26 + 0x5F8]
	0x03CE47A4 SUB W27, W8, 0x2
	0x03CE47A8 LDR W8, [X0 + 0xE0]
	0x03CE47AC CBNZ W8, 0x3CE47B8
	0x03CE47B0 BL 0x1C16DFC
	0x03CE47B4 LDR X0, [X23]
	0x03CE47B8 LDR X8, [X0 + 0xB8]
	0x03CE47BC LDR X0, [X8 + 0x28]
	0x03CE47C0 CBZ X0, 0x3CE4894
	0x03CE47C4 LDR X2, [X24]

ISIL:
	001 Move [X31-64], D13
	002 Move [X31-56], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move V8, V7
	009 Move V11, V6
	010 Move V9, V3
	011 Move V12, V2
	012 Move V10, V1
	013 Move V13, V0
	014 Call Graphic.get_rectTransform, X0
	015 Compare X0, 0
	016 JumpIfEqual {51}
	017 Move X1, X31
	018 Call RectTransform.get_rect, X0
	019 NotImplemented "Instruction FDIV not yet implemented."
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Multiply S1, S0, S13
	022 Multiply S0, S12, S0
	023 NotImplemented "Instruction FCSEL not yet implemented."
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 Add S4, S0, S2
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 NotImplemented "Instruction FDIV not yet implemented."
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 NotImplemented "Instruction FDIV not yet implemented."
	030 Multiply S0, S0, S4
	031 Multiply S2, S2, S4
	032 Multiply S4, S1, S10
	033 Multiply S1, S9, S1
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 NotImplemented "Instruction FCSEL not yet implemented."
	036 NotImplemented "Instruction FCSEL not yet implemented."
	037 Add S4, S1, S3
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 NotImplemented "Instruction FDIV not yet implemented."
	041 Multiply S1, S1, S4
	042 Multiply S3, S3, S4
	043 Move X30, [X31+48]
	044 Move D9, [X31+32]
	045 Move D8, [X31+40]
	046 Move D11, [X31+16]
	047 Move D10, [X31+24]
	048 Move D13, [X31+64]
	049 Move D12, [X31+72]
	050 Return X0
	051 Call 0x1C17F20

Method: System.Void GenerateFilledSprite(UnityEngine.UI.VertexHelper toFill, System.Boolean preserveAspect)

Disassembly:
	0x03CE39BC MOV W1, W20
	0x03CE39C0 MOV W3, W21
	0x03CE39C4 MOV X4, X31
	0x03CE39C8 BL 0x3E39B84
	0x03CE39CC ADD W2, W20, 0x3
	0x03CE39D0 MOV X0, X19
	0x03CE39D4 MOV W1, W21
	0x03CE39D8 MOV W3, W20
	0x03CE39DC LDP X20, X19, [X31 + 0x40]
	0x03CE39E0 LDP X22, X21, [X31 + 0x30]
	0x03CE39E4 LDP X24, X23, [X31 + 0x20]
	0x03CE39E8 LDP X26, X25, [X31 + 0x10]
	0x03CE39EC MOV X4, X31
	0x03CE39F0 LDR X30, [X31], #0x50
	0x03CE39F4 B 0x3E39B84
	0x03CE39F8 BL 0x1C16F28
	0x03CE39FC BL 0x1C16F20
	0x03CE3A00 SUB X31, X31, 0x50
	0x03CE3A04 STP D9, D8, [X31 + 0x10]
	0x03CE3A08 STP X30, X23, [X31 + 0x20]
	0x03CE3A0C STP X22, X21, [X31 + 0x30]
	0x03CE3A10 STP X20, X19, [X31 + 0x40]
	0x03CE3A14 ADRP X23, 0x704000
	0x03CE3A18 LDRB W8, [X23 + 0x4E4]
	0x03CE3A1C MOV W19, W3
	0x03CE3A20 MOV W22, W2
	0x03CE3A24 MOV V8.16B, V0.16B
	0x03CE3A28 MOV X20, X1
	0x03CE3A2C MOV X21, X0
	0x03CE3A30 TBNZ X8, 0x0, 0x3CE3A48
	0x03CE3A34 ADRP X0, 0x47F000
	0x03CE3A38 LDR X0, [X0 + 0x580]
	0x03CE3A3C BL 0x1C16CF4
	0x03CE3A40 MOVZ W8, 0x1
	0x03CE3A44 STRB W8, [X23 + 0x4E4]
	0x03CE3A48 ADRP X8, 0xFFFFFFFFFCE07000
	0x03CE3A4C LDR V0, [X8 + 0x410]
	0x03CE3A50 FCMP S8, S0
	0x03CE3A54 B.MI 0x3CE3B04
	0x03CE3A58 ADRP X8, 0xFFFFFFFFFCE07000
	0x03CE3A5C LDR V0, [X8 + 0x39C]
	0x03CE3A60 AND W8, W19, 0x1
	0x03CE3A64 EOR W22, W8, W22, 0x0
	0x03CE3A68 FCMP S8, S0
	0x03CE3A6C B.LE 0x3CE3A74
	0x03CE3A70 TBZ X22, 0x0, 0x3CE3AFC
	0x03CE3A74 FMOV S0, 1
	0x03CE3A78 ADRP X8, 0xFFFFFFFFFCE07000
	0x03CE3A7C FCMP S8, 0x0
	0x03CE3A80 FMOV S1, W31
	0x03CE3A84 FMIN S2, S8, S0
	0x03CE3A88 LDR V3, [X8 + 0x180]
	0x03CE3A8C FCSEL S1, S2, S1, PL
	0x03CE3A90 FSUB S0, S0, S1
	0x03CE3A94 ANDS W31, W22, 0x1
	0x03CE3A98 FCSEL S0, S0, S1, NE
	0x03CE3A9C FMUL S0, S0, S3
	0x03CE3AA0 ADD X0, X31, 0xC
	0x03CE3AA4 ADD X1, X31, 0x8
	0x03CE3AA8 BL 0x3EB1BC0
	0x03CE3AAC ADRP X8, 0x47F000
	0x03CE3AB0 LDR X8, [X8 + 0x580]
	0x03CE3AB4 LDP S8, S9, [X31 + 0x8]
	0x03CE3AB8 LDR X0, [X8]
	0x03CE3ABC LDR W8, [X0 + 0xE0]
	0x03CE3AC0 CBNZ W8, 0x3CE3AC8
	0x03CE3AC4 BL 0x1C16DFC
	0x03CE3AC8 AND W22, W22, 0x1
	0x03CE3ACC MOV X0, X21
	0x03CE3AD0 MOV V0.16B, V8.16B
	0x03CE3AD4 MOV V1.16B, V9.16B
	0x03CE3AD8 MOV W1, W22
	0x03CE3ADC MOV W2, W19
	0x03CE3AE0 BL 0x3CE3B20
	0x03CE3AE4 MOV X0, X20
	0x03CE3AE8 MOV V0.16B, V8.16B
	0x03CE3AEC MOV V1.16B, V9.16B
	0x03CE3AF0 MOV W1, W22
	0x03CE3AF4 MOV W2, W19
	0x03CE3AF8 BL 0x3CE3B20
	0x03CE3AFC MOVZ W0, 0x1
	0x03CE3B00 B 0x3CE3B08
	0x03CE3B04 MOV W0, W31
	0x03CE3B08 LDP X20, X19, [X31 + 0x40]
	0x03CE3B0C LDP X22, X21, [X31 + 0x30]
	0x03CE3B10 LDP X30, X23, [X31 + 0x20]
	0x03CE3B14 LDP D9, D8, [X31 + 0x10]
	0x03CE3B18 ADD X31, X31, 0x50
	0x03CE3B1C RET
	0x03CE3B20 STR X30, [X31 - 0x10]!
	0x03CE3B24 ADD W8, W2, 0x1
	0x03CE3B28 ADD W9, W2, 0x4
	0x03CE3B2C CMP W8, 0x0
	0x03CE3B30 ADD W10, W2, 0x2
	0x03CE3B34 CSINC W9, W9, W2, LT
	0x03CE3B38 ADD W11, W2, 0x5
	0x03CE3B3C AND W9, W9, 0xFFFFFFFC
	0x03CE3B40 CMP W10, 0x0
	0x03CE3B44 SUB W9, W8, W9
	0x03CE3B48 CSEL W8, W11, W10, LT
	0x03CE3B4C ADD W12, W2, 0x3
	0x03CE3B50 AND W8, W8, 0xFFFFFFFC
	0x03CE3B54 SUB W8, W10, W8
	0x03CE3B58 ADD W10, W2, 0x6
	0x03CE3B5C CMP W12, 0x0
	0x03CE3B60 CSEL W10, W10, W12, LT
	0x03CE3B64 AND W10, W10, 0xFFFFFFFC
	0x03CE3B68 SUB W10, W12, W10
	0x03CE3B6C TBNZ X2, 0x0, 0x3CE3C00
	0x03CE3B70 FCMP S0, S1
	0x03CE3B74 B.LE 0x3CE3C90
	0x03CE3B78 FDIV S2, S1, S0
	0x03CE3B7C FMOV S0, 1
	0x03CE3B80 TBNZ X1, 0x0, 0x3CE3DB4
	0x03CE3B84 CBZ X0, 0x3CE3F48
	0x03CE3B88 LDR W10, [X0 + 0x18]
	0x03CE3B8C CMP W10, W2
	0x03CE3B90 B.LS 0x3CE3F44
	0x03CE3B94 CMP W8, W10
	0x03CE3B98 B.CS 0x3CE3F44
	0x03CE3B9C MOVZ W11, 0xC
	0x03CE3BA0 FMOV S0, 1
	0x03CE3BA4 SMADDL X12, X2, X11, X0
	0x03CE3BA8 SMADDL X11, X8, X11, X0
	0x03CE3BAC FCMP S2, 0x0
	0x03CE3BB0 FMIN S1, S2, S0
	0x03CE3BB4 LDR V0, [X12 + 0x24]
	0x03CE3BB8 LDR V2, [X11 + 0x24]!
	0x03CE3BBC FMOV S3, W31
	0x03CE3BC0 FCSEL S1, S1, S3, PL
	0x03CE3BC4 CMP W9, W10
	0x03CE3BC8 B.CS 0x3CE3F44
	0x03CE3BCC FSUB S2, S2, S0
	0x03CE3BD0 MOVZ W10, 0xC
	0x03CE3BD4 FMUL S1, S1, S2
	0x03CE3BD8 SMADDL X10, X9, X10, X0
	0x03CE3BDC FADD S0, S0, S1
	0x03CE3BE0 STR S0, [X10 + 0x24]
	0x03CE3BE4 STR S0, [X11]
	0x03CE3BE8 LDR W11, [X0 + 0x18]
	0x03CE3BEC CMP W11, W2
	0x03CE3BF0 B.LS 0x3CE3F44
	0x03CE3BF4 SXTW X12, W2
	0x03CE3BF8 FMOV S0, 1
	0x03CE3BFC B 0x3CE3E20
	0x03CE3C00 FCMP S1, S0
	0x03CE3C04 B.LE 0x3CE3D20
	0x03CE3C08 FDIV S2, S0, S1
	0x03CE3C0C FMOV S0, 1
	0x03CE3C10 TBZ X1, 0x0, 0x3CE3E78
	0x03CE3C14 CBZ X0, 0x3CE3F48
	0x03CE3C18 LDR W10, [X0 + 0x18]
	0x03CE3C1C CMP W10, W2
	0x03CE3C20 B.LS 0x3CE3F44
	0x03CE3C24 CMP W8, W10
	0x03CE3C28 B.CS 0x3CE3F44
	0x03CE3C2C MOVZ W11, 0xC
	0x03CE3C30 FMOV S0, 1
	0x03CE3C34 SMADDL X12, X2, X11, X0
	0x03CE3C38 SMADDL X11, X8, X11, X0
	0x03CE3C3C FCMP S2, 0x0
	0x03CE3C40 FMIN S1, S2, S0
	0x03CE3C44 LDR V0, [X12 + 0x20]
	0x03CE3C48 LDR V2, [X11 + 0x20]!
	0x03CE3C4C FMOV S3, W31
	0x03CE3C50 FCSEL S1, S1, S3, PL
	0x03CE3C54 CMP W9, W10
	0x03CE3C58 B.CS 0x3CE3F44
	0x03CE3C5C FSUB S2, S2, S0
	0x03CE3C60 MOVZ W10, 0xC
	0x03CE3C64 FMUL S1, S1, S2
	0x03CE3C68 SMADDL X10, X9, X10, X0
	0x03CE3C6C FADD S0, S0, S1
	0x03CE3C70 STR S0, [X10 + 0x20]
	0x03CE3C74 STR S0, [X11]
	0x03CE3C78 LDR W11, [X0 + 0x18]
	0x03CE3C7C CMP W11, W2
	0x03CE3C80 B.LS 0x3CE3F44
	0x03CE3C84 SXTW X12, W2
	0x03CE3C88 FMOV S0, 1
	0x03CE3C8C B 0x3CE3E90
	0x03CE3C90 FCMP S1, S0
	0x03CE3C94 FMOV S2, 1
	0x03CE3C98 B.LE 0x3CE3DB0
	0x03CE3C9C FDIV S0, S0, S1
	0x03CE3CA0 TBZ X1, 0x0, 0x3CE3DB4
	0x03CE3CA4 CBZ X0, 0x3CE3F48
	0x03CE3CA8 LDR W9, [X0 + 0x18]
	0x03CE3CAC CMP W9, W2
	0x03CE3CB0 B.LS 0x3CE3F44
	0x03CE3CB4 CMP W8, W9
	0x03CE3CB8 B.CS 0x3CE3F44
	0x03CE3CBC MOVZ W11, 0xC
	0x03CE3CC0 SMADDL X12, X2, X11, X0
	0x03CE3CC4 SMADDL X11, X8, X11, X0
	0x03CE3CC8 LDR V2, [X12 + 0x20]
	0x03CE3CCC LDR V3, [X11 + 0x20]
	0x03CE3CD0 FMOV S1, 1
	0x03CE3CD4 FCMP S0, 0x0
	0x03CE3CD8 FMOV S4, W31
	0x03CE3CDC FMIN S0, S0, S1
	0x03CE3CE0 FCSEL S0, S0, S4, PL
	0x03CE3CE4 FSUB S1, S3, S2
	0x03CE3CE8 FMUL S0, S0, S1
	0x03CE3CEC FADD S0, S2, S0
	0x03CE3CF0 CMP W10, W9
	0x03CE3CF4 STR S0, [X11 + 0x20]
	0x03CE3CF8 B.CS 0x3CE3F44
	0x03CE3CFC MOVZ W9, 0xC
	0x03CE3D00 SMADDL X9, X10, X9, X0
	0x03CE3D04 STR S0, [X9 + 0x20]
	0x03CE3D08 LDR W11, [X0 + 0x18]
	0x03CE3D0C CMP W11, W2
	0x03CE3D10 B.LS 0x3CE3F44
	0x03CE3D14 SXTW X12, W2
	0x03CE3D18 FMOV S2, 1
	0x03CE3D1C B 0x3CE3DCC
	0x03CE3D20 FCMP S0, S1
	0x03CE3D24 FMOV S2, 1
	0x03CE3D28 B.LE 0x3CE3E74
	0x03CE3D2C FDIV S0, S1, S0
	0x03CE3D30 TBNZ X1, 0x0, 0x3CE3E78
	0x03CE3D34 CBZ X0, 0x3CE3F48
	0x03CE3D38 LDR W9, [X0 + 0x18]
	0x03CE3D3C CMP W9, W2
	0x03CE3D40 B.LS 0x3CE3F44
	0x03CE3D44 CMP W8, W9
	0x03CE3D48 B.CS 0x3CE3F44
	0x03CE3D4C MOVZ W11, 0xC
	0x03CE3D50 SMADDL X12, X2, X11, X0
	0x03CE3D54 SMADDL X11, X8, X11, X0
	0x03CE3D58 LDR V2, [X12 + 0x24]
	0x03CE3D5C LDR V3, [X11 + 0x24]
	0x03CE3D60 FMOV S1, 1
	0x03CE3D64 FCMP S0, 0x0
	0x03CE3D68 FMOV S4, W31
	0x03CE3D6C FMIN S0, S0, S1
	0x03CE3D70 FCSEL S0, S0, S4, PL
	0x03CE3D74 FSUB S1, S3, S2
	0x03CE3D78 FMUL S0, S0, S1
	0x03CE3D7C FADD S0, S2, S0
	0x03CE3D80 CMP W10, W9
	0x03CE3D84 STR S0, [X11 + 0x24]
	0x03CE3D88 B.CS 0x3CE3F44
	0x03CE3D8C MOVZ W9, 0xC
	0x03CE3D90 SMADDL X9, X10, X9, X0
	0x03CE3D94 STR S0, [X9 + 0x24]
	0x03CE3D98 LDR W11, [X0 + 0x18]
	0x03CE3D9C CMP W11, W2
	0x03CE3DA0 B.LS 0x3CE3F44
	0x03CE3DA4 SXTW X12, W2
	0x03CE3DA8 FMOV S2, 1
	0x03CE3DAC B 0x3CE3EE8
	0x03CE3DB0 FMOV S0, 1
	0x03CE3DB4 CBZ X0, 0x3CE3F48
	0x03CE3DB8 LDR W11, [X0 + 0x18]
	0x03CE3DBC CMP W11, W2
	0x03CE3DC0 B.LS 0x3CE3F44
	0x03CE3DC4 SXTW X12, W2
	0x03CE3DC8 TBZ X1, 0x0, 0x3CE3E20
	0x03CE3DCC CMP W8, W11
	0x03CE3DD0 B.CS 0x3CE3F44
	0x03CE3DD4 CMP W10, W11
	0x03CE3DD8 B.CS 0x3CE3F44
	0x03CE3DDC MOVZ W9, 0xC
	0x03CE3DE0 MADD X9, X12, X9, X0
	0x03CE3DE4 ADD X11, X0, 0x20
	0x03CE3DE8 MOVZ W12, 0xC
	0x03CE3DEC SMADDL X8, X8, X12, X11
	0x03CE3DF0 LDR V1, [X9 + 0x24]
	0x03CE3DF4 LDR V3, [X8 + 0x4]
	0x03CE3DF8 FMOV S0, 1
	0x03CE3DFC FCMP S2, 0x0
	0x03CE3E00 FMIN S0, S2, S0
	0x03CE3E04 FMOV S2, W31
	0x03CE3E08 FCSEL S0, S0, S2, PL
	0x03CE3E0C FSUB S2, S3, S1
	0x03CE3E10 FMUL S0, S0, S2
	0x03CE3E14 FADD S0, S1, S0
	0x03CE3E18 SMADDL X8, X10, X12, X11
	0x03CE3E1C B 0x3CE3EE0
	0x03CE3E20 CMP W8, W11
	0x03CE3E24 B.CS 0x3CE3F44
	0x03CE3E28 CMP W9, W11
	0x03CE3E2C B.CS 0x3CE3F44
	0x03CE3E30 MOVZ W10, 0xC
	0x03CE3E34 MOVZ W11, 0xC
	0x03CE3E38 MADD X10, X12, X10, X0
	0x03CE3E3C ADD X12, X0, 0x20
	0x03CE3E40 SMADDL X8, X8, X11, X31
	0x03CE3E44 LDR V2, [X10 + 0x20]
	0x03CE3E48 LDR V3, [X12, X8, LSL]
	0x03CE3E4C FMOV S1, 1
	0x03CE3E50 FCMP S0, 0x0
	0x03CE3E54 FMIN S0, S0, S1
	0x03CE3E58 FMOV S1, W31
	0x03CE3E5C FCSEL S0, S0, S1, PL
	0x03CE3E60 FSUB S1, S3, S2
	0x03CE3E64 FMUL S0, S0, S1
	0x03CE3E68 FADD S0, S2, S0
	0x03CE3E6C SMADDL X8, X9, X11, X31
	0x03CE3E70 B 0x3CE3F38
	0x03CE3E74 FMOV S0, 1
	0x03CE3E78 CBZ X0, 0x3CE3F48
	0x03CE3E7C LDR W11, [X0 + 0x18]
	0x03CE3E80 CMP W11, W2
	0x03CE3E84 B.LS 0x3CE3F44
	0x03CE3E88 SXTW X12, W2
	0x03CE3E8C TBZ X1, 0x0, 0x3CE3EE8
	0x03CE3E90 CMP W8, W11
	0x03CE3E94 B.CS 0x3CE3F44
	0x03CE3E98 CMP W9, W11
	0x03CE3E9C B.CS 0x3CE3F44
	0x03CE3EA0 MOVZ W10, 0xC
	0x03CE3EA4 MADD X10, X12, X10, X0
	0x03CE3EA8 ADD X11, X0, 0x20
	0x03CE3EAC MOVZ W12, 0xC
	0x03CE3EB0 SMADDL X8, X8, X12, X11
	0x03CE3EB4 LDR V2, [X10 + 0x24]
	0x03CE3EB8 LDR V3, [X8 + 0x4]
	0x03CE3EBC FMOV S1, 1
	0x03CE3EC0 FCMP S0, 0x0
	0x03CE3EC4 FMIN S0, S0, S1
	0x03CE3EC8 FMOV S1, W31
	0x03CE3ECC FCSEL S0, S0, S1, PL
	0x03CE3ED0 FSUB S1, S3, S2
	0x03CE3ED4 FMUL S0, S0, S1
	0x03CE3ED8 FADD S0, S2, S0
	0x03CE3EDC SMADDL X8, X9, X12, X11
	0x03CE3EE0 STR S0, [X8 + 0x4]
	0x03CE3EE4 B 0x3CE3F3C
	0x03CE3EE8 CMP W8, W11
	0x03CE3EEC B.CS 0x3CE3F44
	0x03CE3EF0 CMP W10, W11
	0x03CE3EF4 B.CS 0x3CE3F44
	0x03CE3EF8 MOVZ W9, 0xC
	0x03CE3EFC MOVZ W11, 0xC
	0x03CE3F00 MADD X9, X12, X9, X0
	0x03CE3F04 ADD X12, X0, 0x20
	0x03CE3F08 SMADDL X8, X8, X11, X31
	0x03CE3F0C LDR V1, [X9 + 0x20]
	0x03CE3F10 LDR V3, [X12, X8, LSL]
	0x03CE3F14 FMOV S0, 1
	0x03CE3F18 FCMP S2, 0x0
	0x03CE3F1C FMIN S0, S2, S0
	0x03CE3F20 FMOV S2, W31
	0x03CE3F24 FCSEL S0, S0, S2, PL
	0x03CE3F28 FSUB S2, S3, S1
	0x03CE3F2C FMUL S0, S0, S2
	0x03CE3F30 FADD S0, S1, S0
	0x03CE3F34 SMADDL X8, X10, X11, X31
	0x03CE3F38 STR S0, [X12, X8, LSL]
	0x03CE3F3C LDR X30, [X31], #0x10
	0x03CE3F40 RET
	0x03CE3F44 BL 0x1C16F28
	0x03CE3F48 BL 0x1C16F20
	0x03CE3F4C RET
	0x03CE3F50 RET
	0x03CE3F54 FMOV S0, W31
	0x03CE3F58 RET
	0x03CE3F5C STR D8, [X31 - 0x30]!
	0x03CE3F60 STP X30, X21, [X31 + 0x10]
	0x03CE3F64 STP X20, X19, [X31 + 0x20]
	0x03CE3F68 ADRP X21, 0x704000
	0x03CE3F6C ADRP X20, 0x410000
	0x03CE3F70 LDRB W8, [X21 + 0x4E5]
	0x03CE3F74 LDR X20, [X20 + 0x598]
	0x03CE3F78 MOV X19, X0
	0x03CE3F7C TBNZ X8, 0x0, 0x3CE3F94
	0x03CE3F80 ADRP X0, 0x410000
	0x03CE3F84 LDR X0, [X0 + 0x598]
	0x03CE3F88 BL 0x1C16CF4
	0x03CE3F8C MOVZ W8, 0x1
	0x03CE3F90 STRB W8, [X21 + 0x4E5]
	0x03CE3F94 MOV X0, X19
	0x03CE3F98 BL 0x3CDFE9C
	0x03CE3F9C LDR X8, [X20]
	0x03CE3FA0 MOV X20, X0
	0x03CE3FA4 LDR W9, [X8 + 0xE0]
	0x03CE3FA8 CBNZ W9, 0x3CE3FB4
	0x03CE3FAC MOV X0, X8
	0x03CE3FB0 BL 0x1C16DFC
	0x03CE3FB4 MOV X0, X20
	0x03CE3FB8 MOV X1, X31
	0x03CE3FBC MOV X2, X31
	0x03CE3FC0 BL 0x3C3883C
	0x03CE3FC4 FMOV S0, W31
	0x03CE3FC8 TBNZ X0, 0x0, 0x3CE4010
	0x03CE3FCC LDR W8, [X19 + 0xE8]
	0x03CE3FD0 MOV X0, X19
	0x03CE3FD4 SUB W20, W8, 0x1
	0x03CE3FD8 BL 0x3CDFE9C
	0x03CE3FDC CMP W20, 0x1
	0x03CE3FE0 B.HI 0x3CE3FF4
	0x03CE3FE4 MOV X1, X31
	0x03CE3FE8 BL 0x3C425E4
	0x03CE3FEC MOV V8.16B, V0.16B
	0x03CE3FF0 B 0x3CE4004
	0x03CE3FF4 CBZ X0, 0x3CE4020
	0x03CE3FF8 MOV X1, X31
	0x03CE3FFC BL 0x3C41858
	0x03CE4000 MOV V8.16B, V2.16B
	0x03CE4004 MOV X0, X19
	0x03CE4008 BL 0x3CE083C
	0x03CE400C FDIV S0, S8, S0
	0x03CE4010 LDP X20, X19, [X31 + 0x20]
	0x03CE4014 LDP X30, X21, [X31 + 0x10]
	0x03CE4018 LDR V8, [X31], #0x30
	0x03CE401C RET
	0x03CE4020 BL 0x1C16F20
	0x03CE4024 FMOV S0, -1
	0x03CE4028 RET
	0x03CE402C FMOV S0, W31
	0x03CE4030 RET
	0x03CE4034 STR D8, [X31 - 0x30]!
	0x03CE4038 STP X30, X21, [X31 + 0x10]
	0x03CE403C STP X20, X19, [X31 + 0x20]
	0x03CE4040 ADRP X21, 0x703000
	0x03CE4044 ADRP X20, 0x40F000
	0x03CE4048 LDRB W8, [X21 + 0x4E6]
	0x03CE404C LDR X20, [X20 + 0x598]
	0x03CE4050 MOV X19, X0
	0x03CE4054 TBNZ X8, 0x0, 0x3CE406C
	0x03CE4058 ADRP X0, 0x40F000
	0x03CE405C LDR X0, [X0 + 0x598]
	0x03CE4060 BL 0x1C16CF4
	0x03CE4064 MOVZ W8, 0x1
	0x03CE4068 STRB W8, [X21 + 0x4E6]
	0x03CE406C MOV X0, X19
	0x03CE4070 BL 0x3CDFE9C
	0x03CE4074 LDR X8, [X20]
	0x03CE4078 MOV X20, X0
	0x03CE407C LDR W9, [X8 + 0xE0]
	0x03CE4080 CBNZ W9, 0x3CE408C
	0x03CE4084 MOV X0, X8
	0x03CE4088 BL 0x1C16DFC
	0x03CE408C MOV X0, X20
	0x03CE4090 MOV X1, X31
	0x03CE4094 MOV X2, X31
	0x03CE4098 BL 0x3C3883C
	0x03CE409C FMOV S0, W31
	0x03CE40A0 TBNZ X0, 0x0, 0x3CE40E8
	0x03CE40A4 LDR W8, [X19 + 0xE8]
	0x03CE40A8 MOV X0, X19
	0x03CE40AC SUB W20, W8, 0x1
	0x03CE40B0 BL 0x3CDFE9C
	0x03CE40B4 CMP W20, 0x1
	0x03CE40B8 B.HI 0x3CE40CC
	0x03CE40BC MOV X1, X31
	0x03CE40C0 BL 0x3C425E4
	0x03CE40C4 MOV V8.16B, V1.16B
	0x03CE40C8 B 0x3CE40DC
	0x03CE40CC CBZ X0, 0x3CE40F8
	0x03CE40D0 MOV X1, X31
	0x03CE40D4 BL 0x3C41858
	0x03CE40D8 MOV V8.16B, V3.16B
	0x03CE40DC MOV X0, X19
	0x03CE40E0 BL 0x3CE083C
	0x03CE40E4 FDIV S0, S8, S0
	0x03CE40E8 LDP X20, X19, [X31 + 0x20]
	0x03CE40EC LDP X30, X21, [X31 + 0x10]
	0x03CE40F0 LDR V8, [X31], #0x30
	0x03CE40F4 RET
	0x03CE40F8 BL 0x1C16F20
	0x03CE40FC FMOV S0, -1
	0x03CE4100 RET
	0x03CE4104 MOV W0, W31
	0x03CE4108 RET
	0x03CE410C SUB X31, X31, 0x50
	0x03CE4110 STR D10, [X31 + 0x10]
	0x03CE4114 STP D9, D8, [X31 + 0x20]
	0x03CE4118 STP X30, X21, [X31 + 0x30]
	0x03CE411C STP X20, X19, [X31 + 0x40]
	0x03CE4120 ADRP X21, 0x703000
	0x03CE4124 LDRB W8, [X21 + 0x4E7]
	0x03CE4128 MOV X20, X1
	0x03CE412C MOV V8.16B, V1.16B
	0x03CE4130 MOV V9.16B, V0.16B
	0x03CE4134 MOV X19, X0
	0x03CE4138 TBNZ X8, 0x0, 0x3CE415C
	0x03CE413C ADRP X0, 0x40F000
	0x03CE4140 LDR X0, [X0 + 0x598]
	0x03CE4144 BL 0x1C16CF4
	0x03CE4148 ADRP X0, 0x465000
	0x03CE414C LDR X0, [X0 + 0x6B8]
	0x03CE4150 BL 0x1C16CF4
	0x03CE4154 MOVZ W8, 0x1
	0x03CE4158 STRB W8, [X21 + 0x4E7]
	0x03CE415C STR X31, [X31 + 0x18]
	0x03CE4160 LDR V0, [X19 + 0x100]
	0x03CE4164 FCMP S0, 0x0
	0x03CE4168 B.LS 0x3CE41B4
	0x03CE416C FMOV S1, 1
	0x03CE4170 FCMP S0, S1
	0x03CE4174 B.GT 0x3CE437C
	0x03CE4178 MOV X0, X19
	0x03CE417C BL 0x3CDFE9C
	0x03CE4180 ADRP X8, 0x40F000
	0x03CE4184 LDR X8, [X8 + 0x598]
	0x03CE4188 MOV X21, X0
	0x03CE418C LDR X8, [X8]
	0x03CE4190 LDR W9, [X8 + 0xE0]
	0x03CE4194 CBNZ W9, 0x3CE41A0
	0x03CE4198 MOV X0, X8
	0x03CE419C BL 0x1C16DFC
	0x03CE41A0 MOV X0, X21
	0x03CE41A4 MOV X1, X31
	0x03CE41A8 MOV X2, X31
	0x03CE41AC BL 0x3C3883C
	0x03CE41B0 TBZ X0, 0x0, 0x3CE41BC
	0x03CE41B4 MOVZ W0, 0x1
	0x03CE41B8 B 0x3CE4380
	0x03CE41BC MOV X0, X19
	0x03CE41C0 BL 0x3CDB488
	0x03CE41C4 ADRP X8, 0x465000
	0x03CE41C8 LDR X8, [X8 + 0x6B8]
	0x03CE41CC MOV X21, X0
	0x03CE41D0 LDR X8, [X8]
	0x03CE41D4 LDR W9, [X8 + 0xE0]
	0x03CE41D8 CBNZ W9, 0x3CE41E4
	0x03CE41DC MOV X0, X8
	0x03CE41E0 BL 0x1C16DFC
	0x03CE41E4 ADD X2, X31, 0x18
	0x03CE41E8 MOV X0, X21
	0x03CE41EC MOV V0.16B, V9.16B
	0x03CE41F0 MOV V1.16B, V8.16B
	0x03CE41F4 MOV X1, X20
	0x03CE41F8 MOV X3, X31
	0x03CE41FC BL 0x3E23A98
	0x03CE4200 TBZ X0, 0x0, 0x3CE437C
	0x03CE4204 MOV X0, X19
	0x03CE4208 BL 0x3CDD3D4
	0x03CE420C STP S0, S1, [X31]
	0x03CE4210 STP S2, S3, [X31 + 0x8]
	0x03CE4214 LDRB W8, [X19 + 0xEC]
	0x03CE4218 CBZ W8, 0x3CE427C
	0x03CE421C MOV X0, X19
	0x03CE4220 BL 0x3CDFE9C
	0x03CE4224 CBZ X0, 0x3CE4460
	0x03CE4228 MOV X1, X31
	0x03CE422C BL 0x3C41990
	0x03CE4230 CBZ X0, 0x3CE4460
	0x03CE4234 LDR X8, [X0]
	0x03CE4238 LDP X9, X1, [X8 + 0x188]
	0x03CE423C BLR X9
	0x03CE4240 MOV W20, W0
	0x03CE4244 MOV X0, X19
	0x03CE4248 BL 0x3CDFE9C
	0x03CE424C CBZ X0, 0x3CE4460
	0x03CE4250 MOV X1, X31
	0x03CE4254 BL 0x3C41990
	0x03CE4258 CBZ X0, 0x3CE4460
	0x03CE425C LDR X8, [X0]
	0x03CE4260 LDP X9, X1, [X8 + 0x1A8]
	0x03CE4264 BLR X9
	0x03CE4268 SCVTF S0, W20
	0x03CE426C SCVTF S1, W0
	0x03CE4270 ADD X1, X31, 0x0
	0x03CE4274 MOV X0, X19
	0x03CE4278 BL 0x3CE0AD0
	0x03CE427C LDR V10, [X31 + 0x18]
	0x03CE4280 MOV X0, X19
	0x03CE4284 BL 0x3CDB488
	0x03CE4288 CBZ X0, 0x3CE4460
	0x03CE428C MOV X1, X31
	0x03CE4290 BL 0x3C3EA28
	0x03CE4294 LDR V8, [X31 + 0x8]
	0x03CE4298 LDR V9, [X31 + 0x1C]
	0x03CE429C MOV X0, X19
	0x03CE42A0 FMUL S0, S0, S8

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X24
	012 Move [X31+104], X23
	013 Move [X31+112], X22
	014 Move [X31+120], X21
	015 Move [X31+128], X20
	016 Move [X31+136], X19
	017 Move X22, 0x705000
	018 Move W8, [X22+1251]
	019 Move W21, W2
	020 Move X19, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {37}
	026 Move X0, 0x480000
	027 Move X0, [X0+1408]
	028 Call 0x1C17CF4
	029 Move X0, 0x411000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move X0, 0x43C000
	033 Move X0, [X0+2024]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X22+1251], W8
	037 Compare X19, 0
	038 JumpIfEqual {626}
	039 Move X0, X19
	040 Move X1, X31
	041 Call VertexHelper.Clear, X0
	042 Move X8, -52396032
	043 Move V0, [X20+244]
	044 Move V1, [X8+1040]
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 And W1, W21, 1
	047 Move X0, X20
	048 Call Image.GetDrawingDimensions, X0, X1
	049 Move X0, X20
	050 Move [X31+92], S0
	051 Move V8, V1
	052 Move V13, V2
	053 Move V12, V3
	054 Call Image.get_activeSprite, X0
	055 Move X8, 0x411000
	056 Move X8, [X8+1432]
	057 Move X21, X0
	058 Move X8, [X8]
	059 Move W9, [X8+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {64}
	062 Move X0, X8
	063 Call 0x1C17DFC
	064 Move X0, X21
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Inequality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {80}
	072 Move X0, X20
	073 Call Image.get_activeSprite, X0
	074 Move X1, X31
	075 Call DataUtility.GetOuterUV, X0
	076 Move V9, V0
	077 Move V10, V1
	078 Move V15, V2
	079 Move V14, V3
	080 Move X21, 0x6F6000
	081 Move W8, [X21+3674]
	082 Compare W8, 0
	083 JumpIfNotEqual {89}
	084 Move X0, 0x418000
	085 Move X0, [X0+2464]
	086 Call 0x1C17CF4
	087 Move W8, 1
	088 Move [X21+3674], W8
	089 Move X8, 0x418000
	090 Move X8, [X8+2464]
	091 Move X8, [X8]
	092 Move X8, [X8+184]
	093 Move S9, [X8]
	094 Move S10, [X8+4]
	095 Move S15, [X8+8]
	096 Move S14, [X8+12]
	097 Move X8, 0x43C000
	098 Move X8, [X8+2024]
	099 Move X0, [X8]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X8, [X20]
	105 Move X0, X20
	106 Move X9, [X8+664]
	107 Move X1, [X8+672]
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move X0, X31
	110 Call 0x1E44664
	111 Move W8, [X20+240]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Compare W8, 0
	114 JumpIfNotEqual {140}
	115 Move V2, [X31+92]
	116 Move V1, [X20+244]
	117 Move W8, [X20+252]
	118 Subtract S0, S15, S9
	119 Subtract S2, S13, S2
	120 Multiply S0, S0, S1
	121 NotImplemented "Instruction CMP not yet implemented."
	122 Multiply S1, S2, S1
	123 Subtract S1, S13, S1
	124 Move [X31+92], S1
	125 Subtract S9, S15, S0
	126 Move V1, [X20+244]
	127 Move W8, [X20+252]
	128 Subtract S0, S14, S10
	129 Subtract S2, S12, S8
	130 Multiply S0, S0, S1
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Multiply S1, S2, S1
	133 Subtract S8, S12, S1
	134 Subtract S10, S14, S0
	135 Move V2, [X31+92]
	136 Add S15, S9, S0
	137 Add S13, S2, S1
	138 Add S12, S8, S1
	139 Add S14, S10, S0
	140 Move X22, 0x480000
	141 Move X22, [X22+1408]
	142 Move X0, [X22]
	143 Move W8, [X0+224]
	144 Compare W8, 0
	145 JumpIfNotEqual {148}
	146 Call 0x1C17DFC
	147 Move X0, [X22]
	148 Move X8, [X0+184]
	149 Move X8, [X8+24]
	150 Compare X8, 0
	151 JumpIfEqual {626}
	152 Move W9, [X8+24]
	153 Compare W9, 0
	154 JumpIfEqual {625}
	155 Move V0, [X31+92]
	156 Move [X8+40], W31
	157 Move [X8+32], S0
	158 Move [X8+40], S8
	159 Move X8, [X22]
	160 Move X8, [X8+184]
	161 Move X8, [X8+24]
	162 Compare X8, 0
	163 JumpIfEqual {626}
	164 Move W9, [X8+24]
	165 NotImplemented "Instruction CMP not yet implemented."
	166 Move V0, [X31+92]
	167 Move [X8+52], W31
	168 Move [X8+44], S0
	169 Move [X8+52], S12
	170 Move X8, [X22]
	171 Move X8, [X8+184]
	172 Move X8, [X8+24]
	173 Compare X8, 0
	174 JumpIfEqual {626}
	175 Move W9, [X8+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move [X8+56], S13
	178 Move [X8+64], S12
	179 Move [X8+64], W31
	180 Move X8, [X22]
	181 Move X8, [X8+184]
	182 Move X8, [X8+24]
	183 Compare X8, 0
	184 JumpIfEqual {626}
	185 Move W9, [X8+24]
	186 NotImplemented "Instruction CMP not yet implemented."
	187 Move [X8+68], S13
	188 Move [X8+76], S8
	189 Move [X8+76], W31
	190 Move X8, [X22]
	191 Move X8, [X8+184]
	192 Move X8, [X8+32]
	193 Compare X8, 0
	194 JumpIfEqual {626}
	195 Move W9, [X8+24]
	196 Compare W9, 0
	197 JumpIfEqual {625}
	198 Move [X8+32], S9
	199 Move [X8+40], S10
	200 Move [X8+40], W31
	201 Move X8, [X22]
	202 Move X8, [X8+184]
	203 Move X8, [X8+32]
	204 Compare X8, 0
	205 JumpIfEqual {626}
	206 Move W9, [X8+24]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move [X8+44], S9
	209 Move [X8+52], S14
	210 Move [X8+52], W31
	211 Move X8, [X22]
	212 Move X8, [X8+184]
	213 Move X8, [X8+32]
	214 Compare X8, 0
	215 JumpIfEqual {626}
	216 Move W9, [X8+24]
	217 NotImplemented "Instruction CMP not yet implemented."
	218 Move [X8+56], S15
	219 Move [X8+64], S14
	220 Move [X8+64], W31
	221 Move X8, [X22]
	222 Move X8, [X8+184]
	223 Move X8, [X8+32]
	224 Compare X8, 0
	225 JumpIfEqual {626}
	226 Move W9, [X8+24]
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move [X8+68], S15
	229 Move [X8+76], S10
	230 Move [X8+76], W31
	231 Move V0, [X20+244]
	232 Move S1, 1
	233 NotImplemented "Instruction FCMP not yet implemented."
	234 Move W8, [X20+240]
	235 Move [X31+12], S8
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X9, -51687424
	238 Add X9, X9, 3882
	239 NotImplemented "Instruction ADR not yet implemented."
	240 Move W11, [X9]
	241 Add X10, X10, X11
	242 Move V1, [X31+12]
	243 Move [X31+88], S9
	244 Move [X31+8], S10
	245 CallNoReturn X10
	246 Move X0, [X22]
	247 Move W8, [X0+224]
	248 Compare W8, 0
	249 JumpIfNotEqual {253}
	250 Call 0x1C17DFC
	251 Move X0, [X22]
	252 Move V0, [X20+244]
	253 Move X8, [X0+184]
	254 Move W2, [X20+248]
	255 Move W3, [X20+252]
	256 Move X0, [X8+24]
	257 Move X1, [X8+32]
	258 Call Image.RadialCut, X0, X1, V0, X2, X3
	259 Move TEMP, X0
	260 And TEMP, TEMP, 1
	261 Compare TEMP, 1
	262 JumpIfNotEqual {608}
	263 Move X0, [X22]
	264 Move W8, [X0+224]
	265 Compare W8, 0
	266 JumpIfNotEqual {269}
	267 Call 0x1C17DFC
	268 Move X0, [X22]
	269 Move X8, [X0+184]
	270 Move X9, [X20]
	271 Move X0, X20
	272 Move X21, [X8+24]
	273 Move X8, [X9+664]
	274 Move X1, [X9+672]
	275 NotImplemented "Instruction BLR not yet implemented."
	276 Move X0, X31
	277 Call 0x1E44664
	278 Move X8, [X22]
	279 And X2, X0, 0
	280 Move X0, X19
	281 Move X1, X21
	282 Move X8, [X8+184]
	283 Move X20, [X31+128]
	284 Move X19, [X31+136]
	285 Move X22, [X31+112]
	286 Move X21, [X31+120]
	287 Move X24, [X31+96]
	288 Move X23, [X31+104]
	289 Move X3, [X8+32]
	290 Move X30, [X31+80]
	291 Move D9, [X31+64]
	292 Move D8, [X31+72]
	293 Move D11, [X31+48]
	294 Move D10, [X31+56]
	295 Move D13, [X31+32]
	296 Move D12, [X31+40]
	297 Move D15, [X31+16]
	298 Move D14, [X31+24]
	299 Add X31, X31, 144
	300 Call Image.AddQuad, X0, X1, X2, X3
	301 Return 
	302 Move V0, [X31+92]
	303 Move W21, W31
	304 Subtract S12, S12, S1
	305 Subtract S15, S15, S9
	306 Subtract S13, S13, S0
	307 Subtract S14, S14, S10
	308 Move W8, 1
	309 Move W9, [X20+252]
	310 Move W23, W8
	311 NotImplemented "Instruction CMP not yet implemented."
	312 Or W10, W9, 2
	313 NotImplemented "Instruction CSET not yet implemented."
	314 NotImplemented "Instruction CMP not yet implemented."
	315 NotImplemented "Instruction CMP not yet implemented."
	316 Move S8, 1
	317 Move S9, W31
	318 Move S0, 0.5
	319 NotImplemented "Instruction FCSEL not yet implemented."
	320 NotImplemented "Instruction FCSEL not yet implemented."
	321 NotImplemented "Instruction CMP not yet implemented."
	322 Move S10, 1
	323 Move S11, W31
	324 Move S0, 0.5
	325 NotImplemented "Instruction FCSEL not yet implemented."
	326 NotImplemented "Instruction FCSEL not yet implemented."
	327 Move X8, [X22]
	328 Move W9, [X8+224]
	329 Compare W9, 0
	330 JumpIfNotEqual {334}
	331 Move X0, X8
	332 Call 0x1C17DFC
	333 Move X8, [X22]
	334 Move X9, [X8+184]
	335 Move X0, [X9+24]
	336 Compare X0, 0
	337 JumpIfEqual {626}
	338 Move W10, [X0+24]
	339 Compare W10, 0
	340 JumpIfEqual {625}
	341 Move V1, [X31+92]
	342 Multiply S0, S13, S11
	343 NotImplemented "Instruction CMP not yet implemented."
	344 Add S0, S1, S0
	345 Move [X0+32], S0
	346 NotImplemented "Instruction CMP not yet implemented."
	347 Move [X0+44], S0
	348 Move V1, [X31+92]
	349 Multiply S0, S13, S10
	350 NotImplemented "Instruction CMP not yet implemented."
	351 Add S0, S1, S0
	352 Move [X0+56], S0
	353 Move V3, [X31+12]
	354 Multiply S1, S12, S9
	355 Multiply S2, S12, S8
	356 Add S1, S3, S1
	357 Add S2, S3, S2
	358 Move [X0+36], S1
	359 Move [X0+48], S2
	360 Move [X0+60], S2
	361 Move [X0+68], S0
	362 Move [X0+76], S1
	363 Move X1, [X9+32]
	364 Compare X1, 0
	365 JumpIfEqual {626}
	366 Move W9, [X1+24]
	367 Compare W9, 0
	368 JumpIfEqual {625}
	369 Move V1, [X31+88]
	370 Multiply S0, S15, S11
	371 NotImplemented "Instruction CMP not yet implemented."
	372 Add S0, S1, S0
	373 Move [X1+32], S0
	374 NotImplemented "Instruction CMP not yet implemented."
	375 Move [X1+44], S0
	376 Multiply S0, S15, S10
	377 Add S0, S1, S0
	378 NotImplemented "Instruction CMP not yet implemented."
	379 Move [X1+56], S0
	380 Move V3, [X31+8]
	381 Multiply S1, S14, S9
	382 Multiply S2, S14, S8
	383 Add S1, S3, S1
	384 Add S2, S3, S2
	385 Move [X1+36], S1
	386 Move [X1+48], S2
	387 Move [X1+60], S2
	388 Move [X1+68], S0
	389 Move [X1+76], S1
	390 Move W24, [X20+248]
	391 Move W9, [X8+224]
	392 Move V8, [X20+244]
	393 Compare W9, 0
	394 JumpIfEqual {396}
	395 Move W8, W24
	396 Move X0, X8
	397 Call 0x1C17DFC
	398 Move X8, [X22]
	399 Move X8, [X8+184]
	400 Move X0, [X8+24]
	401 Move X1, [X8+32]
	402 Move W8, [X20+248]
	403 Xor W9, W24, W21
	404 Xor W9, W9, 1
	405 NotImplemented "Instruction SCVTF not yet implemented."
	406 Move W9, [X20+252]
	407 Add S0, S8, S8
	408 Subtract S0, S0, S1
	409 Move S1, 1
	410 NotImplemented "Instruction FMIN not yet implemented."
	411 NotImplemented "Instruction FCMP not yet implemented."
	412 Add W9, W21, W9
	413 Move S0, W31
	414 NotImplemented "Instruction FCSEL not yet implemented."
	415 NotImplemented "Instruction CMP not yet implemented."
	416 Add W8, W9, 3
	417 Add W9, W9, 6
	418 NotImplemented "Instruction CSET not yet implemented."
	419 NotImplemented "Instruction CMP not yet implemented."
	420 NotImplemented "Instruction CSEL not yet implemented."
	421 And W9, W9, 0xFFFFFFFC
	422 Subtract W3, W8, W9
	423 Call Image.RadialCut, X0, X1, V0, X2, X3
	424 Move TEMP, X0
	425 And TEMP, TEMP, 1
	426 Compare TEMP, 1
	427 JumpIfNotEqual {450}
	428 Move X0, [X22]
	429 Move W8, [X0+224]
	430 Compare W8, 0
	431 JumpIfNotEqual {434}
	432 Call 0x1C17DFC
	433 Move X0, [X22]
	434 Move X8, [X0+184]
	435 Move X9, [X20]
	436 Move X0, X20
	437 Move X21, [X8+24]
	438 Move X8, [X9+664]
	439 Move X1, [X9+672]
	440 NotImplemented "Instruction BLR not yet implemented."
	441 Move X0, X31
	442 Call 0x1E44664
	443 Move X8, [X22]
	444 And X2, X0, 0
	445 Move X0, X19
	446 Move X1, X21
	447 Move X8, [X8+184]
	448 Move X3, [X8+32]
	449 Call Image.AddQuad, X0, X1, X2, X3
	450 Move W8, W31
	451 Move W21, 1
	452 Move TEMP, X23
	453 And TEMP, TEMP, 1
	454 Compare TEMP, 1
	455 JumpIfEqual {309}
	456 Move V0, [X31+92]
	457 Move W23, W31
	458 Subtract S12, S12, S1
	459 Subtract S15, S15, S9
	460 Subtract S0, S13, S0
	461 Subtract S14, S14, S10
	462 Move S8, 0.5
	463 Move S10, 1
	464 Move W24, 3
	465 Move [X31+4], S0
	466 Move X8, [X22]
	467 NotImplemented "Instruction CMP not yet implemented."
	468 Move S0, W31
	469 NotImplemented "Instruction FCSEL not yet implemented."
	470 NotImplemented "Instruction FCSEL not yet implemented."
	471 NotImplemented "Instruction CMP not yet implemented."
	472 NotImplemented "Instruction CSET not yet implemented."
	473 NotImplemented "Instruction CMP not yet implemented."
	474 NotImplemented "Instruction CSET not yet implemented."
	475 Move W11, [X8+224]
	476 Or W9, W9, W10
	477 NotImplemented "Instruction CMP not yet implemented."
	478 NotImplemented "Instruction FCSEL not yet implemented."
	479 NotImplemented "Instruction FCSEL not yet implemented."
	480 Compare W11, 0
	481 JumpIfNotEqual {485}
	482 Move X0, X8
	483 Call 0x1C17DFC
	484 Move X8, [X22]
	485 Move X9, [X8+184]
	486 Move X0, [X9+24]
	487 Compare X0, 0
	488 JumpIfEqual {626}
	489 Move W10, [X0+24]
	490 Compare W10, 0
	491 JumpIfEqual {625}
	492 Move V0, [X31+4]
	493 Move V1, [X31+92]
	494 NotImplemented "Instruction CMP not yet implemented."
	495 Multiply S0, S0, S13
	496 Add S0, S1, S0
	497 Move [X0+32], S0
	498 NotImplemented "Instruction CMP not yet implemented."
	499 Move [X0+44], S0
	500 Move V0, [X31+4]
	501 Move V1, [X31+92]
	502 NotImplemented "Instruction CMP not yet implemented."
	503 Multiply S0, S0, S11
	504 Add S0, S1, S0
	505 Move [X0+56], S0
	506 Move V3, [X31+12]
	507 Multiply S1, S12, S10
	508 Multiply S2, S12, S9
	509 Add S1, S3, S1
	510 Add S2, S3, S2
	511 Move [X0+36], S1
	512 Move [X0+48], S2
	513 Move [X0+60], S2
	514 Move [X0+68], S0
	515 Move [X0+76], S1
	516 Move X1, [X9+32]
	517 Compare X1, 0
	518 JumpIfEqual {626}
	519 Move W9, [X1+24]
	520 Compare W9, 0
	521 JumpIfEqual {625}
	522 Move V1, [X31+88]
	523 Multiply S0, S15, S13
	524 NotImplemented "Instruction CMP not yet implemented."
	525 Add S0, S1, S0
	526 Move [X1+32], S0
	527 NotImplemented "Instruction CMP not yet implemented."
	528 Move [X1+44], S0
	529 Move V1, [X31+88]
	530 Multiply S0, S15, S11
	531 NotImplemented "Instruction CMP not yet implemented."
	532 Add S0, S1, S0
	533 Move [X1+56], S0
	534 Move V3, [X31+8]
	535 Multiply S1, S14, S10
	536 Multiply S2, S14, S9
	537 Add S1, S3, S1
	538 Add S2, S3, S2
	539 Move [X1+36], S1
	540 Move [X1+48], S2
	541 Move [X1+60], S2
	542 Move [X1+68], S0
	543 Move [X1+76], S1
	544 Move W10, [X20+252]
	545 Move W9, [X20+248]
	546 Move V9, [X20+244]
	547 Move W11, [X8+224]
	548 Add W10, W23, W10
	549 Add W12, W10, 3
	550 NotImplemented "Instruction CMP not yet implemented."
	551 NotImplemented "Instruction CSEL not yet implemented."
	552 And W12, W12, 0xFFFFFFFC
	553 Subtract W10, W10, W12
	554 Subtract W12, W24, W10
	555 NotImplemented "Instruction CMP not yet implemented."
	556 NotImplemented "Instruction CSEL not yet implemented."
	557 Compare W11, 0
	558 JumpIfNotEqual {566}
	559 Move X0, X8
	560 Call 0x1C17DFC
	561 Move X8, [X22]
	562 Move W9, [X20+248]
	563 Move X8, [X8+184]
	564 Move X0, [X8+24]
	565 Move X1, [X8+32]
	566 Move S0, 4
	567 Multiply S0, S9, S0
	568 NotImplemented "Instruction SCVTF not yet implemented."
	569 Move S10, 1
	570 Subtract S0, S0, S1
	571 NotImplemented "Instruction FMIN not yet implemented."
	572 NotImplemented "Instruction FCMP not yet implemented."
	573 Move S0, W31
	574 Add W8, W23, 2
	575 NotImplemented "Instruction FCSEL not yet implemented."
	576 NotImplemented "Instruction CMP not yet implemented."
	577 NotImplemented "Instruction CSET not yet implemented."
	578 And W3, W8, 3
	579 Call Image.RadialCut, X0, X1, V0, X2, X3
	580 Move TEMP, X0
	581 And TEMP, TEMP, 1
	582 Compare TEMP, 1
	583 JumpIfNotEqual {606}
	584 Move X0, [X22]
	585 Move W8, [X0+224]
	586 Compare W8, 0
	587 JumpIfNotEqual {590}
	588 Call 0x1C17DFC
	589 Move X0, [X22]
	590 Move X8, [X0+184]
	591 Move X9, [X20]
	592 Move X0, X20
	593 Move X21, [X8+24]
	594 Move X8, [X9+664]
	595 Move X1, [X9+672]
	596 NotImplemented "Instruction BLR not yet implemented."
	597 Move X0, X31
	598 Call 0x1E44664
	599 Move X8, [X22]
	600 And X2, X0, 0
	601 Move X0, X19
	602 Move X1, X21
	603 Move X8, [X8+184]
	604 Move X3, [X8+32]
	605 Call Image.AddQuad, X0, X1, X2, X3
	606 Add W23, W23, 1
	607 NotImplemented "Instruction CMP not yet implemented."
	608 Move X20, [X31+128]
	609 Move X19, [X31+136]
	610 Move X22, [X31+112]
	611 Move X21, [X31+120]
	612 Move X24, [X31+96]
	613 Move X23, [X31+104]
	614 Move X30, [X31+80]
	615 Move D9, [X31+64]
	616 Move D8, [X31+72]
	617 Move D11, [X31+48]
	618 Move D10, [X31+56]
	619 Move D13, [X31+32]
	620 Move D12, [X31+40]
	621 Move D15, [X31+16]
	622 Move D14, [X31+24]
	623 Add X31, X31, 144
	624 Return 
	625 Call 0x1C17F28
	626 Call 0x1C17F20

Method: System.Boolean RadialCut(UnityEngine.Vector3[] xy, UnityEngine.Vector3[] uv, System.Single fill, System.Boolean invert, System.Int32 corner)

Disassembly:
	0x03CE4A00 ADRP X20, 0x703000
	0x03CE4A04 ADRP X21, 0x40F000
	0x03CE4A08 LDRB W8, [X20 + 0x4ED]
	0x03CE4A0C LDR X21, [X21 + 0x598]
	0x03CE4A10 MOV X19, X0
	0x03CE4A14 TBNZ X8, 0x0, 0x3CE4A38
	0x03CE4A18 ADRP X0, 0x46F000
	0x03CE4A1C LDR X0, [X0 + 0x90]
	0x03CE4A20 BL 0x1C16CF4
	0x03CE4A24 ADRP X0, 0x40F000
	0x03CE4A28 LDR X0, [X0 + 0x598]
	0x03CE4A2C BL 0x1C16CF4
	0x03CE4A30 MOVZ W8, 0x1
	0x03CE4A34 STRB W8, [X20 + 0x4ED]
	0x03CE4A38 LDR X0, [X21]
	0x03CE4A3C LDR X20, [X19 + 0xD8]
	0x03CE4A40 LDR W8, [X0 + 0xE0]
	0x03CE4A44 CBNZ W8, 0x3CE4A4C
	0x03CE4A48 BL 0x1C16DFC
	0x03CE4A4C MOV X0, X20
	0x03CE4A50 MOV X1, X31
	0x03CE4A54 MOV X2, X31
	0x03CE4A58 BL 0x3C354F8
	0x03CE4A5C TBZ X0, 0x0, 0x3CE4AE8
	0x03CE4A60 LDR X0, [X19 + 0xD8]
	0x03CE4A64 CBZ X0, 0x3CE4B20
	0x03CE4A68 MOV X1, X31
	0x03CE4A6C BL 0x3C41990
	0x03CE4A70 LDR X8, [X21]
	0x03CE4A74 MOV X20, X0
	0x03CE4A78 LDR W9, [X8 + 0xE0]
	0x03CE4A7C CBNZ W9, 0x3CE4A88
	0x03CE4A80 MOV X0, X8
	0x03CE4A84 BL 0x1C16DFC
	0x03CE4A88 MOV X0, X20
	0x03CE4A8C MOV X1, X31
	0x03CE4A90 MOV X2, X31
	0x03CE4A94 BL 0x3C354F8
	0x03CE4A98 TBZ X0, 0x0, 0x3CE4AE8
	0x03CE4A9C LDR X0, [X19 + 0xD8]
	0x03CE4AA0 CBZ X0, 0x3CE4B20
	0x03CE4AA4 MOV X1, X31
	0x03CE4AA8 BL 0x3C41990
	0x03CE4AAC CBZ X0, 0x3CE4B20
	0x03CE4AB0 MOV X1, X31
	0x03CE4AB4 BL 0x3C1B334
	0x03CE4AB8 ADRP X8, 0x46F000
	0x03CE4ABC LDR X8, [X8 + 0x90]
	0x03CE4AC0 MOV W20, W0
	0x03CE4AC4 LDR X8, [X8]
	0x03CE4AC8 LDR W9, [X8 + 0xE0]
	0x03CE4ACC CBNZ W9, 0x3CE4AD8
	0x03CE4AD0 MOV X0, X8
	0x03CE4AD4 BL 0x1C16DFC
	0x03CE4AD8 MOV W0, W20
	0x03CE4ADC MOV X1, X31
	0x03CE4AE0 BL 0x3C61CEC
	0x03CE4AE4 TBZ X0, 0x0, 0x3CE4AF8
	0x03CE4AE8 LDP X20, X19, [X31 + 0x10]
	0x03CE4AEC MOV W0, W31
	0x03CE4AF0 LDP X30, X21, [X31], #0x20
	0x03CE4AF4 RET
	0x03CE4AF8 LDR X0, [X19 + 0xD8]
	0x03CE4AFC CBZ X0, 0x3CE4B20
	0x03CE4B00 MOV X1, X31
	0x03CE4B04 BL 0x3C41990
	0x03CE4B08 CBZ X0, 0x3CE4B20
	0x03CE4B0C LDR X8, [X0]
	0x03CE4B10 LDP X20, X19, [X31 + 0x10]
	0x03CE4B14 LDP X2, X1, [X8 + 0x1E8]
	0x03CE4B18 LDP X30, X21, [X31], #0x20
	0x03CE4B1C BR X2

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X23, 0x704000
	011 Move W8, [X23+1252]
	012 Move W19, W3
	013 Move W22, W2
	014 Move V8, V0
	015 Move X20, X1
	016 Move X21, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x47F000
	022 Move X0, [X0+1408]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+1252], W8
	026 Move X8, -52400128
	027 Move V0, [X8+1040]
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 Move X8, -52400128
	030 Move V0, [X8+924]
	031 And W8, W19, 1
	032 Xor W22, W8, W22
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move TEMP, X22
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {74}
	038 Move S0, 1
	039 Move X8, -52400128
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Move S1, W31
	042 NotImplemented "Instruction FMIN not yet implemented."
	043 Move V3, [X8+384]
	044 NotImplemented "Instruction FCSEL not yet implemented."
	045 Subtract S0, S0, S1
	046 And W31, W22, 1
	047 NotImplemented "Instruction FCSEL not yet implemented."
	048 Multiply S0, S0, S3
	049 Add X0, X31, 12
	050 Add X1, X31, 8
	051 Call 0x3EB2BC0
	052 Move X8, 0x47F000
	053 Move X8, [X8+1408]
	054 Move S8, [X31+8]
	055 Move S9, [X31+12]
	056 Move X0, [X8]
	057 Move W8, [X0+224]
	058 Compare W8, 0
	059 JumpIfNotEqual {61}
	060 Call 0x1C17DFC
	061 And W22, W22, 1
	062 Move X0, X21
	063 Move V0, V8
	064 Move V1, V9
	065 Move W1, W22
	066 Move W2, W19
	067 Call Image.RadialCut, X0, V0, V1, X1, X2
	068 Move X0, X20
	069 Move V0, V8
	070 Move V1, V9
	071 Move W1, W22
	072 Move W2, W19
	073 Call Image.RadialCut, X0, V0, V1, X1, X2
	074 Move W0, 1
	075 Move W0, W31
	076 Move X20, [X31+64]
	077 Move X19, [X31+72]
	078 Move X22, [X31+48]
	079 Move X21, [X31+56]
	080 Move X30, [X31+32]
	081 Move X23, [X31+40]
	082 Move D9, [X31+16]
	083 Move D8, [X31+24]
	084 Add X31, X31, 80
	085 Return X0

Method: System.Void RadialCut(UnityEngine.Vector3[] xy, System.Single cos, System.Single sin, System.Boolean invert, System.Int32 corner)

Disassembly:
	0x03CE4B20 BL 0x1C16F20
	0x03CE4B24 STR X30, [X31 - 0x30]!
	0x03CE4B28 STP X22, X21, [X31 + 0x10]
	0x03CE4B2C STP X20, X19, [X31 + 0x20]
	0x03CE4B30 LDR X8, [X2 + 0x8]
	0x03CE4B34 STP X1, X2, [X0 + 0x20]
	0x03CE4B38 MOV X19, X0
	0x03CE4B3C MOV X20, X2
	0x03CE4B40 STR X8, [X0 + 0x10]
	0x03CE4B44 LDRB W22, [X2 + 0x52]
	0x03CE4B48 STR X0, [X0 + 0x40]
	0x03CE4B4C MOV X0, X2
	0x03CE4B50 MOV X21, X1
	0x03CE4B54 BL 0x1C16D84
	0x03CE4B58 TBZ X0, 0x0, 0x3CE4B70
	0x03CE4B5C CMP W22, 0x3
	0x03CE4B60 B.NE 0x3CE4BAC
	0x03CE4B64 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4B68 ADD X8, X8, 0xC10
	0x03CE4B6C B 0x3CE4BF0
	0x03CE4B70 CMP W22, 0x2
	0x03CE4B74 B.NE 0x3CE4BA8
	0x03CE4B78 LDRB W8, [X19 + 0x70]
	0x03CE4B7C CBZ W8, 0x3CE4BC0
	0x03CE4B80 MOV X0, X20
	0x03CE4B84 BL 0x1C16D7C
	0x03CE4B88 MOV W21, W0
	0x03CE4B8C MOV X0, X20
	0x03CE4B90 BL 0x1C17238
	0x03CE4B94 TBZ X21, 0x0, 0x3CE4BCC
	0x03CE4B98 TBZ X0, 0x0, 0x3CE4BDC
	0x03CE4B9C ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4BA0 ADD X8, X8, 0xD3C
	0x03CE4BA4 B 0x3CE4BF0
	0x03CE4BA8 CBZ X21, 0x3CE4C10
	0x03CE4BAC LDR X8, [X19 + 0x10]
	0x03CE4BB0 LDR X9, [X19 + 0x20]
	0x03CE4BB4 STR X8, [X19 + 0x18]
	0x03CE4BB8 STR X9, [X19 + 0x40]
	0x03CE4BBC B 0x3CE4BF4
	0x03CE4BC0 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4BC4 ADD X8, X8, 0xBF0
	0x03CE4BC8 B 0x3CE4BF0
	0x03CE4BCC TBZ X0, 0x0, 0x3CE4BE8
	0x03CE4BD0 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4BD4 ADD X8, X8, 0xC4C
	0x03CE4BD8 B 0x3CE4BF0
	0x03CE4BDC ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4BE0 ADD X8, X8, 0xCE8
	0x03CE4BE4 B 0x3CE4BF0
	0x03CE4BE8 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4BEC ADD X8, X8, 0xC20
	0x03CE4BF0 STR X8, [X19 + 0x18]
	0x03CE4BF4 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4BF8 ADD X8, X8, 0xB88
	0x03CE4BFC STR X8, [X19 + 0x38]
	0x03CE4C00 LDP X20, X19, [X31 + 0x20]
	0x03CE4C04 LDP X22, X21, [X31 + 0x10]
	0x03CE4C08 LDR X30, [X31], #0x30
	0x03CE4C0C RET
	0x03CE4C10 ADRP X1, 0xFFFFFFFFFCE37000
	0x03CE4C14 ADD X1, X1, 0xEE3
	0x03CE4C18 MOV X0, X31
	0x03CE4C1C BL 0x1C16F3C
	0x03CE4C20 MOV X1, X31
	0x03CE4C24 BL 0x1C16DEC
	0x03CE4C28 LDR X8, [X0 + 0x40]
	0x03CE4C2C LDR X3, [X0 + 0x18]
	0x03CE4C30 LDR X2, [X0 + 0x28]
	0x03CE4C34 MOV X0, X8
	0x03CE4C38 BR X3
	0x03CE4C3C STR X30, [X31 - 0x30]!
	0x03CE4C40 STP X22, X21, [X31 + 0x10]
	0x03CE4C44 STP X20, X19, [X31 + 0x20]
	0x03CE4C48 LDR X8, [X2 + 0x8]
	0x03CE4C4C STP X1, X2, [X0 + 0x20]
	0x03CE4C50 MOV X19, X0
	0x03CE4C54 MOV X20, X2
	0x03CE4C58 STR X8, [X0 + 0x10]
	0x03CE4C5C LDRB W22, [X2 + 0x52]
	0x03CE4C60 STR X0, [X0 + 0x40]
	0x03CE4C64 MOV X0, X2
	0x03CE4C68 MOV X21, X1
	0x03CE4C6C BL 0x1C16D84
	0x03CE4C70 TBZ X0, 0x0, 0x3CE4C88
	0x03CE4C74 CMP W22, 0x4
	0x03CE4C78 B.NE 0x3CE4CC4
	0x03CE4C7C ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4C80 ADD X8, X8, 0xE7C
	0x03CE4C84 B 0x3CE4D08
	0x03CE4C88 CMP W22, 0x3
	0x03CE4C8C B.NE 0x3CE4CC0
	0x03CE4C90 LDRB W8, [X19 + 0x70]
	0x03CE4C94 CBZ W8, 0x3CE4CD8
	0x03CE4C98 MOV X0, X20
	0x03CE4C9C BL 0x1C16D7C
	0x03CE4CA0 MOV W21, W0
	0x03CE4CA4 MOV X0, X20
	0x03CE4CA8 BL 0x1C17238
	0x03CE4CAC TBZ X21, 0x0, 0x3CE4CE4
	0x03CE4CB0 TBZ X0, 0x0, 0x3CE4CF4
	0x03CE4CB4 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4CB8 ADD X8, X8, 0xFD8
	0x03CE4CBC B 0x3CE4D08
	0x03CE4CC0 CBZ X21, 0x3CE4D28
	0x03CE4CC4 LDR X8, [X19 + 0x10]
	0x03CE4CC8 LDR X9, [X19 + 0x20]
	0x03CE4CCC STR X8, [X19 + 0x18]
	0x03CE4CD0 STR X9, [X19 + 0x40]
	0x03CE4CD4 B 0x3CE4D0C
	0x03CE4CD8 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4CDC ADD X8, X8, 0xE50
	0x03CE4CE0 B 0x3CE4D08
	0x03CE4CE4 TBZ X0, 0x0, 0x3CE4D00
	0x03CE4CE8 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4CEC ADD X8, X8, 0xED0
	0x03CE4CF0 B 0x3CE4D08
	0x03CE4CF4 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4CF8 ADD X8, X8, 0xF74
	0x03CE4CFC B 0x3CE4D08
	0x03CE4D00 ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4D04 ADD X8, X8, 0xE98
	0x03CE4D08 STR X8, [X19 + 0x18]
	0x03CE4D0C ADRP X8, 0xFFFFFFFFFDF2A000
	0x03CE4D10 ADD X8, X8, 0xDE0
	0x03CE4D14 STR X8, [X19 + 0x38]
	0x03CE4D18 LDP X20, X19, [X31 + 0x20]
	0x03CE4D1C LDP X22, X21, [X31 + 0x10]
	0x03CE4D20 LDR X30, [X31], #0x30
	0x03CE4D24 RET
	0x03CE4D28 ADRP X1, 0xFFFFFFFFFCE37000
	0x03CE4D2C ADD X1, X1, 0xEE3
	0x03CE4D30 MOV X0, X31
	0x03CE4D34 BL 0x1C16F3C
	0x03CE4D38 MOV X1, X31
	0x03CE4D3C BL 0x1C16DEC
	0x03CE4D40 LDR X8, [X0 + 0x40]
	0x03CE4D44 LDR X6, [X0 + 0x18]
	0x03CE4D48 LDR X5, [X0 + 0x28]
	0x03CE4D4C MOV X0, X8
	0x03CE4D50 BR X6
	0x03CE4D54 STR X30, [X31 - 0x30]!
	0x03CE4D58 STP X22, X21, [X31 + 0x10]
	0x03CE4D5C STP X20, X19, [X31 + 0x20]
	0x03CE4D60 LDR X8, [X2 + 0x8]
	0x03CE4D64 STP X1, X2, [X0 + 0x20]
	0x03CE4D68 MOV X19, X0
	0x03CE4D6C MOV X20, X2
	0x03CE4D70 STR X8, [X0 + 0x10]
	0x03CE4D74 LDRB W22, [X2 + 0x52]
	0x03CE4D78 STR X0, [X0 + 0x40]
	0x03CE4D7C MOV X0, X2
	0x03CE4D80 MOV X21, X1
	0x03CE4D84 BL 0x1C16D84
	0x03CE4D88 TBZ X0, 0x0, 0x3CE4DA0
	0x03CE4D8C CMP W22, 0x5
	0x03CE4D90 B.NE 0x3CE4DDC
	0x03CE4D94 ADRP X8, 0xFFFFFFFFFDF2B000
	0x03CE4D98 ADD X8, X8, 0x130
	0x03CE4D9C B 0x3CE4E20
	0x03CE4DA0 CMP W22, 0x4
	0x03CE4DA4 B.NE 0x3CE4DD8
	0x03CE4DA8 LDRB W8, [X19 + 0x70]
	0x03CE4DAC CBZ W8, 0x3CE4DF0
	0x03CE4DB0 MOV X0, X20
	0x03CE4DB4 BL 0x1C16D7C
	0x03CE4DB8 MOV W21, W0
	0x03CE4DBC MOV X0, X20
	0x03CE4DC0 BL 0x1C17238
	0x03CE4DC4 TBZ X21, 0x0, 0x3CE4DFC
	0x03CE4DC8 TBZ X0, 0x0, 0x3CE4E0C
	0x03CE4DCC ADRP X8, 0xFFFFFFFFFDF2B000
	0x03CE4DD0 ADD X8, X8, 0x29C
	0x03CE4DD4 B 0x3CE4E20
	0x03CE4DD8 CBZ X21, 0x3CE4E40
	0x03CE4DDC LDR X8, [X19 + 0x10]
	0x03CE4DE0 LDR X9, [X19 + 0x20]
	0x03CE4DE4 STR X8, [X19 + 0x18]
	0x03CE4DE8 STR X9, [X19 + 0x40]
	0x03CE4DEC B 0x3CE4E24
	0x03CE4DF0 ADRP X8, 0xFFFFFFFFFDF2B000
	0x03CE4DF4 ADD X8, X8, 0x108
	0x03CE4DF8 B 0x3CE4E20
	0x03CE4DFC TBZ X0, 0x0, 0x3CE4E18
	0x03CE4E00 ADRP X8, 0xFFFFFFFFFDF2B000
	0x03CE4E04 ADD X8, X8, 0x17C
	0x03CE4E08 B 0x3CE4E20
	0x03CE4E0C ADRP X8, 0xFFFFFFFFFDF2B000
	0x03CE4E10 ADD X8, X8, 0x230
	0x03CE4E14 B 0x3CE4E20
	0x03CE4E18 ADRP X8, 0xFFFFFFFFFDF2B000
	0x03CE4E1C ADD X8, X8, 0x148
	0x03CE4E20 STR X8, [X19 + 0x18]
	0x03CE4E24 ADRP X8, 0xFFFFFFFFFDF2B000
	0x03CE4E28 ADD X8, X8, 0x84
	0x03CE4E2C STR X8, [X19 + 0x38]
	0x03CE4E30 LDP X20, X19, [X31 + 0x20]
	0x03CE4E34 LDP X22, X21, [X31 + 0x10]
	0x03CE4E38 LDR X30, [X31], #0x30
	0x03CE4E3C RET
	0x03CE4E40 ADRP X1, 0xFFFFFFFFFCE37000
	0x03CE4E44 ADD X1, X1, 0xEE3
	0x03CE4E48 MOV X0, X31
	0x03CE4E4C BL 0x1C16F3C
	0x03CE4E50 MOV X1, X31
	0x03CE4E54 BL 0x1C16DEC
	0x03CE4E58 LDR X8, [X0 + 0x40]
	0x03CE4E5C LDR X5, [X0 + 0x18]
	0x03CE4E60 LDR X4, [X0 + 0x28]
	0x03CE4E64 MOV X0, X8
	0x03CE4E68 BR X5
	0x03CE4E6C RET
	0x03CE4E70 STR X30, [X31 - 0x20]!
	0x03CE4E74 STP X20, X19, [X31 + 0x10]
	0x03CE4E78 MOV X19, X1
	0x03CE4E7C MOV X1, X31
	0x03CE4E80 MOV X20, X0
	0x03CE4E84 BL 0x33BDD8C
	0x03CE4E88 MOV X0, X19
	0x03CE4E8C MOV X1, X31
	0x03CE4E90 MOV X2, X31
	0x03CE4E94 STR X19, [X20 + 0x10]
	0x03CE4E98 BL 0x33BE5B0
	0x03CE4E9C TBNZ X0, 0x0, 0x3CE4EAC
	0x03CE4EA0 LDP X20, X19, [X31 + 0x10]
	0x03CE4EA4 LDR X30, [X31], #0x20
	0x03CE4EA8 RET
	0x03CE4EAC ADRP X0, 0x40F000
	0x03CE4EB0 LDR X0, [X0 + 0x5B0]
	0x03CE4EB4 BL 0x1C16D08
	0x03CE4EB8 BL 0x1C16F10
	0x03CE4EBC MOV X19, X0
	0x03CE4EC0 ADRP X0, 0x47E000
	0x03CE4EC4 LDR X0, [X0 + 0x620]
	0x03CE4EC8 BL 0x1C16D08
	0x03CE4ECC MOV X1, X0
	0x03CE4ED0 MOV X0, X19
	0x03CE4ED4 MOV X2, X31
	0x03CE4ED8 BL 0x337DF1C
	0x03CE4EDC ADRP X0, 0x47E000
	0x03CE4EE0 LDR X0, [X0 + 0x628]
	0x03CE4EE4 BL 0x1C16D08
	0x03CE4EE8 MOV X1, X0
	0x03CE4EEC MOV X0, X19
	0x03CE4EF0 BL 0x1C16DEC
	0x03CE4EF4 STR X30, [X31 - 0x20]!
	0x03CE4EF8 STP X20, X19, [X31 + 0x10]
	0x03CE4EFC ADRP X20, 0x703000
	0x03CE4F00 LDR X8, [X20 + 0x520]
	0x03CE4F04 MOV X19, X0
	0x03CE4F08 CBNZ X8, 0x3CE4F20
	0x03CE4F0C ADRP X0, 0xFFFFFFFFFCE23000
	0x03CE4F10 ADD X0, X0, 0xB0B
	0x03CE4F14 BL 0x1C16CB8
	0x03CE4F18 MOV X8, X0
	0x03CE4F1C STR X0, [X20 + 0x520]
	0x03CE4F20 BLR X8
	0x03CE4F24 MOV X1, X0
	0x03CE4F28 MOV X0, X19
	0x03CE4F2C LDP X20, X19, [X31 + 0x10]
	0x03CE4F30 LDR X30, [X31], #0x20
	0x03CE4F34 B 0x3CE4E70
	0x03CE4F38 STP X30, X19, [X31 - 0x10]!
	0x03CE4F3C ADRP X19, 0x703000
	0x03CE4F40 LDR X0, [X19 + 0x520]
	0x03CE4F44 CBNZ X0, 0x3CE4F58
	0x03CE4F48 ADRP X0, 0xFFFFFFFFFCE23000

ISIL:
	001 Move [X31-16], X30
	002 Add W8, W2, 1
	003 Add W9, W2, 4
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Add W10, W2, 2
	006 NotImplemented "Instruction CSINC not yet implemented."
	007 Add W11, W2, 5
	008 And W9, W9, 0xFFFFFFFC
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Subtract W9, W8, W9
	011 NotImplemented "Instruction CSEL not yet implemented."
	012 Add W12, W2, 3
	013 And W8, W8, 0xFFFFFFFC
	014 Subtract W8, W10, W8
	015 Add W10, W2, 6
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CSEL not yet implemented."
	018 And W10, W10, 0xFFFFFFFC
	019 Subtract W10, W12, W10
	020 Move TEMP, X2
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {59}
	024 NotImplemented "Instruction FCMP not yet implemented."
	025 NotImplemented "Instruction FDIV not yet implemented."
	026 Move S0, 1
	027 Move TEMP, X1
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfEqual {163}
	031 Compare X0, 0
	032 JumpIfEqual {259}
	033 Move W10, [X0+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move W11, 12
	037 Move S0, 1
	038 NotImplemented "Instruction SMADDL not yet implemented."
	039 NotImplemented "Instruction SMADDL not yet implemented."
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 NotImplemented "Instruction FMIN not yet implemented."
	042 Move V0, [X12+36]
	043 Add X11, X11, 36
	044 Move V2, [X11]
	045 Move S3, W31
	046 NotImplemented "Instruction FCSEL not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract S2, S2, S0
	049 Move W10, 12
	050 Multiply S1, S1, S2
	051 NotImplemented "Instruction SMADDL not yet implemented."
	052 Add S0, S0, S1
	053 Move [X10+36], S0
	054 Move [X11], S0
	055 Move W11, [X0+24]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X12, W2
	058 Move S0, 1
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 NotImplemented "Instruction FDIV not yet implemented."
	061 Move S0, 1
	062 Move TEMP, X1
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {209}
	066 Compare X0, 0
	067 JumpIfEqual {259}
	068 Move W10, [X0+24]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move W11, 12
	072 Move S0, 1
	073 NotImplemented "Instruction SMADDL not yet implemented."
	074 NotImplemented "Instruction SMADDL not yet implemented."
	075 NotImplemented "Instruction FCMP not yet implemented."
	076 NotImplemented "Instruction FMIN not yet implemented."
	077 Move V0, [X12+32]
	078 Add X11, X11, 32
	079 Move V2, [X11]
	080 Move S3, W31
	081 NotImplemented "Instruction FCSEL not yet implemented."
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Subtract S2, S2, S0
	084 Move W10, 12
	085 Multiply S1, S1, S2
	086 NotImplemented "Instruction SMADDL not yet implemented."
	087 Add S0, S0, S1
	088 Move [X10+32], S0
	089 Move [X11], S0
	090 Move W11, [X0+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Move X12, W2
	093 Move S0, 1
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 Move S2, 1
	096 NotImplemented "Instruction FDIV not yet implemented."
	097 Move TEMP, X1
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {163}
	101 Compare X0, 0
	102 JumpIfEqual {259}
	103 Move W9, [X0+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction CMP not yet implemented."
	106 Move W11, 12
	107 NotImplemented "Instruction SMADDL not yet implemented."
	108 NotImplemented "Instruction SMADDL not yet implemented."
	109 Move V2, [X12+32]
	110 Move V3, [X11+32]
	111 Move S1, 1
	112 NotImplemented "Instruction FCMP not yet implemented."
	113 Move S4, W31
	114 NotImplemented "Instruction FMIN not yet implemented."
	115 NotImplemented "Instruction FCSEL not yet implemented."
	116 Subtract S1, S3, S2
	117 Multiply S0, S0, S1
	118 Add S0, S2, S0
	119 NotImplemented "Instruction CMP not yet implemented."
	120 Move [X11+32], S0
	121 Move W9, 12
	122 NotImplemented "Instruction SMADDL not yet implemented."
	123 Move [X9+32], S0
	124 Move W11, [X0+24]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X12, W2
	127 Move S2, 1
	128 NotImplemented "Instruction FCMP not yet implemented."
	129 Move S2, 1
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 Move TEMP, X1
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfEqual {209}
	135 Compare X0, 0
	136 JumpIfEqual {259}
	137 Move W9, [X0+24]
	138 NotImplemented "Instruction CMP not yet implemented."
	139 NotImplemented "Instruction CMP not yet implemented."
	140 Move W11, 12
	141 NotImplemented "Instruction SMADDL not yet implemented."
	142 NotImplemented "Instruction SMADDL not yet implemented."
	143 Move V2, [X12+36]
	144 Move V3, [X11+36]
	145 Move S1, 1
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Move S4, W31
	148 NotImplemented "Instruction FMIN not yet implemented."
	149 NotImplemented "Instruction FCSEL not yet implemented."
	150 Subtract S1, S3, S2
	151 Multiply S0, S0, S1
	152 Add S0, S2, S0
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move [X11+36], S0
	155 Move W9, 12
	156 NotImplemented "Instruction SMADDL not yet implemented."
	157 Move [X9+36], S0
	158 Move W11, [X0+24]
	159 NotImplemented "Instruction CMP not yet implemented."
	160 Move X12, W2
	161 Move S2, 1
	162 Move S0, 1
	163 Compare X0, 0
	164 JumpIfEqual {259}
	165 Move W11, [X0+24]
	166 NotImplemented "Instruction CMP not yet implemented."
	167 Move X12, W2
	168 Move TEMP, X1
	169 And TEMP, TEMP, 1
	170 Compare TEMP, 1
	171 JumpIfNotEqual {190}
	172 NotImplemented "Instruction CMP not yet implemented."
	173 NotImplemented "Instruction CMP not yet implemented."
	174 Move W9, 12
	175 NotImplemented "Instruction MADD not yet implemented."
	176 Add X11, X0, 32
	177 Move W12, 12
	178 NotImplemented "Instruction SMADDL not yet implemented."
	179 Move V1, [X9+36]
	180 Move V3, [X8+4]
	181 Move S0, 1
	182 NotImplemented "Instruction FCMP not yet implemented."
	183 NotImplemented "Instruction FMIN not yet implemented."
	184 Move S2, W31
	185 NotImplemented "Instruction FCSEL not yet implemented."
	186 Subtract S2, S3, S1
	187 Multiply S0, S0, S2
	188 Add S0, S1, S0
	189 NotImplemented "Instruction SMADDL not yet implemented."
	190 NotImplemented "Instruction CMP not yet implemented."
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move W10, 12
	193 Move W11, 12
	194 NotImplemented "Instruction MADD not yet implemented."
	195 Add X12, X0, 32
	196 NotImplemented "Instruction SMADDL not yet implemented."
	197 Move V2, [X10+32]
	198 Move V3, [X12]
	199 Move S1, 1
	200 NotImplemented "Instruction FCMP not yet implemented."
	201 NotImplemented "Instruction FMIN not yet implemented."
	202 Move S1, W31
	203 NotImplemented "Instruction FCSEL not yet implemented."
	204 Subtract S1, S3, S2
	205 Multiply S0, S0, S1
	206 Add S0, S2, S0
	207 NotImplemented "Instruction SMADDL not yet implemented."
	208 Move S0, 1
	209 Compare X0, 0
	210 JumpIfEqual {259}
	211 Move W11, [X0+24]
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X12, W2
	214 Move TEMP, X1
	215 And TEMP, TEMP, 1
	216 Compare TEMP, 1
	217 JumpIfNotEqual {237}
	218 NotImplemented "Instruction CMP not yet implemented."
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move W10, 12
	221 NotImplemented "Instruction MADD not yet implemented."
	222 Add X11, X0, 32
	223 Move W12, 12
	224 NotImplemented "Instruction SMADDL not yet implemented."
	225 Move V2, [X10+36]
	226 Move V3, [X8+4]
	227 Move S1, 1
	228 NotImplemented "Instruction FCMP not yet implemented."
	229 NotImplemented "Instruction FMIN not yet implemented."
	230 Move S1, W31
	231 NotImplemented "Instruction FCSEL not yet implemented."
	232 Subtract S1, S3, S2
	233 Multiply S0, S0, S1
	234 Add S0, S2, S0
	235 NotImplemented "Instruction SMADDL not yet implemented."
	236 Move [X8+4], S0
	237 NotImplemented "Instruction CMP not yet implemented."
	238 NotImplemented "Instruction CMP not yet implemented."
	239 Move W9, 12
	240 Move W11, 12
	241 NotImplemented "Instruction MADD not yet implemented."
	242 Add X12, X0, 32
	243 NotImplemented "Instruction SMADDL not yet implemented."
	244 Move V1, [X9+32]
	245 Move V3, [X12]
	246 Move S0, 1
	247 NotImplemented "Instruction FCMP not yet implemented."
	248 NotImplemented "Instruction FMIN not yet implemented."
	249 Move S2, W31
	250 NotImplemented "Instruction FCSEL not yet implemented."
	251 Subtract S2, S3, S1
	252 Multiply S0, S0, S2
	253 Add S0, S1, S0
	254 NotImplemented "Instruction SMADDL not yet implemented."
	255 Move [X12], S0
	256 Move X30, [X31+16]
	257 Return 
	258 Call 0x1C17F28
	259 Call 0x1C17F20

Method: System.Void CalculateLayoutInputHorizontal()

Disassembly:
	0x03CE4F4C ADD X0, X0, 0xB0B

ISIL:
	001 Return 

Method: System.Void CalculateLayoutInputVertical()

Disassembly:
	0x03CE4F50 BL 0x1C16CB8

ISIL:
	001 Return 

Method: System.Single get_minWidth()

Disassembly:
	0x03CE4F54 STR X0, [X19 + 0x520]
	0x03CE4F58 LDP X30, X19, [X31], #0x10

ISIL:
	001 Move S0, W31
	002 Return V0

Method: System.Single get_preferredWidth()

Disassembly:
	0x03CE4F5C BR X0
	0x03CE4F60 STP X30, X21, [X31 - 0x20]!
	0x03CE4F64 STP X20, X19, [X31 + 0x10]
	0x03CE4F68 ADRP X20, 0x703000
	0x03CE4F6C ADRP X21, 0x47E000
	0x03CE4F70 LDRB W8, [X20 + 0x4EF]
	0x03CE4F74 LDR X21, [X21 + 0x630]
	0x03CE4F78 MOV X19, X0
	0x03CE4F7C TBNZ X8, 0x0, 0x3CE4F94
	0x03CE4F80 ADRP X0, 0x47E000
	0x03CE4F84 LDR X0, [X0 + 0x630]
	0x03CE4F88 BL 0x1C16CF4
	0x03CE4F8C MOVZ W8, 0x1
	0x03CE4F90 STRB W8, [X20 + 0x4EF]
	0x03CE4F94 LDR X0, [X21]
	0x03CE4F98 LDR X20, [X19 + 0x10]
	0x03CE4F9C LDR W8, [X0 + 0xE0]
	0x03CE4FA0 CBNZ W8, 0x3CE4FAC
	0x03CE4FA4 BL 0x1C16DFC
	0x03CE4FA8 LDR X0, [X21]
	0x03CE4FAC LDR X8, [X0 + 0xB8]
	0x03CE4FB0 LDR X8, [X8]
	0x03CE4FB4 CBZ X8, 0x3CE4FE8
	0x03CE4FB8 LDR X1, [X8 + 0x10]
	0x03CE4FBC MOV X0, X20
	0x03CE4FC0 MOV X2, X31
	0x03CE4FC4 BL 0x33C5D2C
	0x03CE4FC8 TBZ X0, 0x0, 0x3CE4FD4
	0x03CE4FCC LDR X0, [X19 + 0x10]
	0x03CE4FD0 BL 0x3CE5070
	0x03CE4FD4 MOV X0, X19
	0x03CE4FD8 LDP X20, X19, [X31 + 0x10]
	0x03CE4FDC MOV X1, X31
	0x03CE4FE0 LDP X30, X21, [X31], #0x20
	0x03CE4FE4 B 0x33CB4DC
	0x03CE4FE8 BL 0x1C16F20
	0x03CE4FEC B 0x3CE4FF8
	0x03CE4FF0 B 0x3CE4FF8
	0x03CE4FF4 B 0x3CE4FF8
	0x03CE4FF8 MOV X20, X0
	0x03CE4FFC CMP W1, 0x1
	0x03CE5000 B.NE 0x3CE5030
	0x03CE5004 MOV X0, X20
	0x03CE5008 BL 0x3EB1AD0
	0x03CE500C LDR X21, [X0]
	0x03CE5010 BL 0x3EB1AE0
	0x03CE5014 MOV X0, X19
	0x03CE5018 MOV X1, X31
	0x03CE501C BL 0x33CB4DC
	0x03CE5020 CBNZ X21, 0x3CE5038

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x704000
	007 Move X20, 0x410000
	008 Move W8, [X21+1253]
	009 Move X20, [X20+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x410000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1253], W8
	020 Move X0, X19
	021 Call Image.get_activeSprite, X0
	022 Move X8, [X20]
	023 Move X20, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move S0, W31
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {54}
	038 Move W8, [X19+232]
	039 Move X0, X19
	040 Subtract W20, W8, 1
	041 Call Image.get_activeSprite, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X1, X31
	044 Call DataUtility.GetMinSize, X0
	045 Move V8, V0
	046 Compare X0, 0
	047 JumpIfEqual {60}
	048 Move X1, X31
	049 Call Sprite.get_rect, X0
	050 Move V8, V2
	051 Move X0, X19
	052 Call Image.get_pixelsPerUnit, X0
	053 NotImplemented "Instruction FDIV not yet implemented."
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+16]
	057 Move X21, [X31+24]
	058 Move V8, [X31+48]
	059 Return V0
	060 Call 0x1C17F20

Method: System.Single get_flexibleWidth()

Disassembly:
	0x03CE5024 LDP X20, X19, [X31 + 0x10]
	0x03CE5028 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_minHeight()

Disassembly:
	0x03CE502C RET
	0x03CE5030 MOV X21, X31

ISIL:
	001 Move S0, W31
	002 Return V0

Method: System.Single get_preferredHeight()

Disassembly:
	0x03CE5034 B 0x3CE5044
	0x03CE5038 MOV X0, X21
	0x03CE503C BL 0x1C16F18
	0x03CE5040 MOV X20, X0
	0x03CE5044 MOV X0, X19
	0x03CE5048 MOV X1, X31
	0x03CE504C BL 0x33CB4DC
	0x03CE5050 CBNZ X21, 0x3CE505C
	0x03CE5054 MOV X0, X20
	0x03CE5058 BL 0x1D2C690
	0x03CE505C MOV X0, X21
	0x03CE5060 BL 0x1C16F18
	0x03CE5064 BL 0x1990590
	0x03CE5068 LDR X0, [X0 + 0x10]
	0x03CE506C RET
	0x03CE5070 STR X30, [X31 - 0x20]!
	0x03CE5074 STP X20, X19, [X31 + 0x10]
	0x03CE5078 MOV X1, X31
	0x03CE507C MOV X2, X31
	0x03CE5080 MOV X19, X0
	0x03CE5084 BL 0x33BE5B0
	0x03CE5088 TBZ X0, 0x0, 0x3CE5098
	0x03CE508C LDP X20, X19, [X31 + 0x10]
	0x03CE5090 LDR X30, [X31], #0x20
	0x03CE5094 RET
	0x03CE5098 ADRP X20, 0x702000
	0x03CE509C LDR X1, [X20 + 0x528]
	0x03CE50A0 CBNZ X1, 0x3CE50B8
	0x03CE50A4 ADRP X0, 0xFFFFFFFFFCE36000
	0x03CE50A8 ADD X0, X0, 0x706
	0x03CE50AC BL 0x1C16CB8
	0x03CE50B0 MOV X1, X0
	0x03CE50B4 STR X0, [X20 + 0x528]
	0x03CE50B8 MOV X0, X19
	0x03CE50BC LDP X20, X19, [X31 + 0x10]
	0x03CE50C0 LDR X30, [X31], #0x20
	0x03CE50C4 BR X1
	0x03CE50C8 STR X30, [X31 - 0x20]!
	0x03CE50CC STP X20, X19, [X31 + 0x10]
	0x03CE50D0 ADRP X20, 0x702000
	0x03CE50D4 LDR X1, [X20 + 0x538]
	0x03CE50D8 LDR X19, [X0 + 0x10]
	0x03CE50DC CBNZ X1, 0x3CE50F4
	0x03CE50E0 ADRP X0, 0xFFFFFFFFFCE2A000
	0x03CE50E4 ADD X0, X0, 0xD13
	0x03CE50E8 BL 0x1C16CB8
	0x03CE50EC MOV X1, X0
	0x03CE50F0 STR X0, [X20 + 0x538]
	0x03CE50F4 MOV X0, X19
	0x03CE50F8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x703000
	007 Move X20, 0x40F000
	008 Move W8, [X21+1254]
	009 Move X20, [X20+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x40F000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1254], W8
	020 Move X0, X19
	021 Call Image.get_activeSprite, X0
	022 Move X8, [X20]
	023 Move X20, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move S0, W31
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {54}
	038 Move W8, [X19+232]
	039 Move X0, X19
	040 Subtract W20, W8, 1
	041 Call Image.get_activeSprite, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X1, X31
	044 Call DataUtility.GetMinSize, X0
	045 Move V8, V1
	046 Compare X0, 0
	047 JumpIfEqual {60}
	048 Move X1, X31
	049 Call Sprite.get_rect, X0
	050 Move V8, V3
	051 Move X0, X19
	052 Call Image.get_pixelsPerUnit, X0
	053 NotImplemented "Instruction FDIV not yet implemented."
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X30, [X31+16]
	057 Move X21, [X31+24]
	058 Move V8, [X31+48]
	059 Return V0
	060 Call 0x1C17F20

Method: System.Single get_flexibleHeight()

Disassembly:
	0x03CE50FC LDR X30, [X31], #0x20
	0x03CE5100 BR X1

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Int32 get_layoutPriority()

Disassembly:
	0x03CE5104 STR X30, [X31 - 0x20]!
	0x03CE5108 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean IsRaycastLocationValid(UnityEngine.Vector2 screenPoint, UnityEngine.Camera eventCamera)

Disassembly:
	0x03CE510C ADRP X20, 0x702000
	0x03CE5110 LDR X1, [X20 + 0x538]
	0x03CE5114 MOV X19, X0
	0x03CE5118 CBNZ X1, 0x3CE5130
	0x03CE511C ADRP X0, 0xFFFFFFFFFCE2A000
	0x03CE5120 ADD X0, X0, 0xD13
	0x03CE5124 BL 0x1C16CB8
	0x03CE5128 MOV X1, X0
	0x03CE512C STR X0, [X20 + 0x538]
	0x03CE5130 MOV X0, X19
	0x03CE5134 LDP X20, X19, [X31 + 0x10]
	0x03CE5138 LDR X30, [X31], #0x20
	0x03CE513C BR X1
	0x03CE5140 STP X30, X21, [X31 - 0x20]!
	0x03CE5144 STP X20, X19, [X31 + 0x10]
	0x03CE5148 ADRP X21, 0x702000
	0x03CE514C LDR X2, [X21 + 0x530]
	0x03CE5150 LDR X19, [X0 + 0x10]
	0x03CE5154 MOV W20, W1
	0x03CE5158 CBNZ X2, 0x3CE5170
	0x03CE515C ADRP X0, 0xFFFFFFFFFCE3A000
	0x03CE5160 ADD X0, X0, 0x7C9
	0x03CE5164 BL 0x1C16CB8
	0x03CE5168 MOV X2, X0
	0x03CE516C STR X0, [X21 + 0x530]
	0x03CE5170 AND W1, W20, 0x1
	0x03CE5174 MOV X0, X19
	0x03CE5178 LDP X20, X19, [X31 + 0x10]
	0x03CE517C LDP X30, X21, [X31], #0x20
	0x03CE5180 BR X2
	0x03CE5184 STP X30, X21, [X31 - 0x20]!
	0x03CE5188 STP X20, X19, [X31 + 0x10]
	0x03CE518C ADRP X21, 0x702000
	0x03CE5190 LDR X2, [X21 + 0x530]
	0x03CE5194 MOV W19, W1
	0x03CE5198 MOV X20, X0
	0x03CE519C CBNZ X2, 0x3CE51B4
	0x03CE51A0 ADRP X0, 0xFFFFFFFFFCE3A000
	0x03CE51A4 ADD X0, X0, 0x7C9
	0x03CE51A8 BL 0x1C16CB8
	0x03CE51AC MOV X2, X0
	0x03CE51B0 STR X0, [X21 + 0x530]
	0x03CE51B4 AND W1, W19, 0x1
	0x03CE51B8 MOV X0, X20
	0x03CE51BC LDP X20, X19, [X31 + 0x10]
	0x03CE51C0 LDP X30, X21, [X31], #0x20
	0x03CE51C4 BR X2
	0x03CE51C8 STR D8, [X31 - 0x20]!
	0x03CE51CC STR X30, [X31 + 0x8]
	0x03CE51D0 STP X20, X19, [X31 + 0x10]
	0x03CE51D4 ADRP X20, 0x702000
	0x03CE51D8 LDR X1, [X20 + 0x540]
	0x03CE51DC LDR X19, [X0 + 0x10]
	0x03CE51E0 MOV V8.16B, V0.16B
	0x03CE51E4 CBNZ X1, 0x3CE51FC
	0x03CE51E8 ADRP X0, 0xFFFFFFFFFCE47000
	0x03CE51EC ADD X0, X0, 0xEED
	0x03CE51F0 BL 0x1C16CB8
	0x03CE51F4 MOV X1, X0
	0x03CE51F8 STR X0, [X20 + 0x540]
	0x03CE51FC MOV X0, X19
	0x03CE5200 LDP X20, X19, [X31 + 0x10]
	0x03CE5204 LDR X30, [X31 + 0x8]
	0x03CE5208 MOV V0.16B, V8.16B
	0x03CE520C LDR V8, [X31], #0x20
	0x03CE5210 BR X1
	0x03CE5214 STR D8, [X31 - 0x20]!
	0x03CE5218 STR X30, [X31 + 0x8]
	0x03CE521C STP X20, X19, [X31 + 0x10]
	0x03CE5220 ADRP X20, 0x702000
	0x03CE5224 LDR X1, [X20 + 0x540]
	0x03CE5228 MOV V8.16B, V0.16B
	0x03CE522C MOV X19, X0
	0x03CE5230 CBNZ X1, 0x3CE5248
	0x03CE5234 ADRP X0, 0xFFFFFFFFFCE47000
	0x03CE5238 ADD X0, X0, 0xEED
	0x03CE523C BL 0x1C16CB8
	0x03CE5240 MOV X1, X0
	0x03CE5244 STR X0, [X20 + 0x540]
	0x03CE5248 MOV X0, X19
	0x03CE524C LDP X20, X19, [X31 + 0x10]
	0x03CE5250 LDR X30, [X31 + 0x8]
	0x03CE5254 MOV V0.16B, V8.16B
	0x03CE5258 LDR V8, [X31], #0x20
	0x03CE525C BR X1
	0x03CE5260 STP X30, X21, [X31 - 0x20]!
	0x03CE5264 STP X20, X19, [X31 + 0x10]
	0x03CE5268 ADRP X19, 0x702000
	0x03CE526C LDRB W8, [X19 + 0x4F0]
	0x03CE5270 TBNZ X8, 0x0, 0x3CE5288
	0x03CE5274 ADRP X0, 0x47D000
	0x03CE5278 LDR X0, [X0 + 0x630]
	0x03CE527C BL 0x1C16CF4
	0x03CE5280 MOVZ W8, 0x1
	0x03CE5284 STRB W8, [X19 + 0x4F0]
	0x03CE5288 ADRP X19, 0x702000
	0x03CE528C ADRP X21, 0x47D000
	0x03CE5290 LDR X8, [X19 + 0x518]
	0x03CE5294 LDR X21, [X21 + 0x630]
	0x03CE5298 CBNZ X8, 0x3CE52B0
	0x03CE529C ADRP X0, 0xFFFFFFFFFCE3E000
	0x03CE52A0 ADD X0, X0, 0xA46
	0x03CE52A4 BL 0x1C16CB8
	0x03CE52A8 MOV X8, X0
	0x03CE52AC STR X0, [X19 + 0x518]
	0x03CE52B0 BLR X8
	0x03CE52B4 LDR X8, [X21]
	0x03CE52B8 MOV X19, X0
	0x03CE52BC MOV X0, X8
	0x03CE52C0 BL 0x1C16F10
	0x03CE52C4 MOV X1, X19
	0x03CE52C8 MOV X20, X0
	0x03CE52CC BL 0x3CE4E70
	0x03CE52D0 LDR X8, [X21]
	0x03CE52D4 LDR X8, [X8 + 0xB8]
	0x03CE52D8 STR X20, [X8]
	0x03CE52DC LDP X20, X19, [X31 + 0x10]
	0x03CE52E0 LDP X30, X21, [X31], #0x20
	0x03CE52E4 RET
	0x03CE52E8 STP X30, X19, [X31 - 0x10]!
	0x03CE52EC ADRP X19, 0x702000
	0x03CE52F0 LDR X0, [X19 + 0x518]
	0x03CE52F4 CBNZ X0, 0x3CE5308
	0x03CE52F8 ADRP X0, 0xFFFFFFFFFCE3E000
	0x03CE52FC ADD X0, X0, 0xA46
	0x03CE5300 BL 0x1C16CB8
	0x03CE5304 STR X0, [X19 + 0x518]
	0x03CE5308 LDP X30, X19, [X31], #0x10
	0x03CE530C BR X0
	0x03CE5310 FMOV W8, S0
	0x03CE5314 AND W8, W8, 0x7FFFFFFF
	0x03CE5318 MOVZ W9, 0x7F800000
	0x03CE531C CMP W8, W9
	0x03CE5320 CSET W0, HI
	0x03CE5324 RET
	0x03CE5328 STR X30, [X31 - 0x20]!
	0x03CE532C STP X20, X19, [X31 + 0x10]
	0x03CE5330 ADRP X20, 0x702000
	0x03CE5334 LDR X1, [X20 + 0x4F8]
	0x03CE5338 MOV X19, X0
	0x03CE533C CBNZ X1, 0x3CE5354
	0x03CE5340 ADRP X0, 0xFFFFFFFFFCE2C000
	0x03CE5344 ADD X0, X0, 0x7CF
	0x03CE5348 BL 0x1C16CB8
	0x03CE534C MOV X1, X0
	0x03CE5350 STR X0, [X20 + 0x4F8]
	0x03CE5354 MOV X0, X19
	0x03CE5358 LDP X20, X19, [X31 + 0x10]
	0x03CE535C LDR X30, [X31], #0x20
	0x03CE5360 BR X1
	0x03CE5364 STR X30, [X31 - 0x20]!
	0x03CE5368 STP X20, X19, [X31 + 0x10]
	0x03CE536C MOV X1, X31
	0x03CE5370 MOV X2, X31
	0x03CE5374 MOV X19, X0
	0x03CE5378 BL 0x33BE5B0
	0x03CE537C TBZ X0, 0x0, 0x3CE538C
	0x03CE5380 LDP X20, X19, [X31 + 0x10]
	0x03CE5384 LDR X30, [X31], #0x20
	0x03CE5388 RET
	0x03CE538C ADRP X20, 0x702000
	0x03CE5390 LDR X1, [X20 + 0x500]
	0x03CE5394 CBNZ X1, 0x3CE53AC
	0x03CE5398 ADRP X0, 0xFFFFFFFFFCE42000
	0x03CE539C ADD X0, X0, 0x45F
	0x03CE53A0 BL 0x1C16CB8
	0x03CE53A4 MOV X1, X0
	0x03CE53A8 STR X0, [X20 + 0x500]
	0x03CE53AC MOV X0, X19
	0x03CE53B0 LDP X20, X19, [X31 + 0x10]
	0x03CE53B4 LDR X30, [X31], #0x20
	0x03CE53B8 BR X1
	0x03CE53BC STR X30, [X31 - 0x20]!
	0x03CE53C0 STP X20, X19, [X31 + 0x10]
	0x03CE53C4 ADRP X20, 0x702000
	0x03CE53C8 LDR X1, [X20 + 0x500]
	0x03CE53CC MOV X19, X0
	0x03CE53D0 CBNZ X1, 0x3CE53E8
	0x03CE53D4 ADRP X0, 0xFFFFFFFFFCE42000
	0x03CE53D8 ADD X0, X0, 0x45F
	0x03CE53DC BL 0x1C16CB8
	0x03CE53E0 MOV X1, X0
	0x03CE53E4 STR X0, [X20 + 0x500]
	0x03CE53E8 MOV X0, X19
	0x03CE53EC LDP X20, X19, [X31 + 0x10]
	0x03CE53F0 LDR X30, [X31], #0x20
	0x03CE53F4 BR X1
	0x03CE53F8 STP X30, X21, [X31 - 0x20]!
	0x03CE53FC STP X20, X19, [X31 + 0x10]
	0x03CE5400 ADRP X21, 0x702000
	0x03CE5404 LDR X2, [X21 + 0x508]
	0x03CE5408 MOV X19, X1
	0x03CE540C MOV X20, X0
	0x03CE5410 CBNZ X2, 0x3CE5428
	0x03CE5414 ADRP X0, 0xFFFFFFFFFCE24000
	0x03CE5418 ADD X0, X0, 0xD88
	0x03CE541C BL 0x1C16CB8
	0x03CE5420 MOV X2, X0
	0x03CE5424 STR X0, [X21 + 0x508]
	0x03CE5428 MOV X0, X20
	0x03CE542C MOV X1, X19
	0x03CE5430 LDP X20, X19, [X31 + 0x10]
	0x03CE5434 LDP X30, X21, [X31], #0x20
	0x03CE5438 BR X2
	0x03CE543C STP X30, X21, [X31 - 0x20]!
	0x03CE5440 STP X20, X19, [X31 + 0x10]
	0x03CE5444 ADRP X21, 0x702000
	0x03CE5448 LDR X2, [X21 + 0x510]
	0x03CE544C MOV X19, X1
	0x03CE5450 MOV X20, X0
	0x03CE5454 CBNZ X2, 0x3CE546C
	0x03CE5458 ADRP X0, 0xFFFFFFFFFCE0C000
	0x03CE545C ADD X0, X0, 0x9C9
	0x03CE5460 BL 0x1C16CB8
	0x03CE5464 MOV X2, X0
	0x03CE5468 STR X0, [X21 + 0x510]
	0x03CE546C MOV X0, X20
	0x03CE5470 MOV X1, X19
	0x03CE5474 LDP X20, X19, [X31 + 0x10]
	0x03CE5478 LDP X30, X21, [X31], #0x20
	0x03CE547C BR X2
	0x03CE5480 STR X30, [X31 - 0x20]!
	0x03CE5484 STP X20, X19, [X31 + 0x10]
	0x03CE5488 ADRP X20, 0x702000
	0x03CE548C LDR X1, [X20 + 0x528]
	0x03CE5490 MOV X19, X0
	0x03CE5494 CBNZ X1, 0x3CE54AC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D10
	003 Move [X31+32], D9
	004 Move [X31+40], D8
	005 Move [X31+48], X30
	006 Move [X31+56], X21
	007 Move [X31+64], X20
	008 Move [X31+72], X19
	009 Move X21, 0x703000
	010 Move W8, [X21+1255]
	011 Move X20, X1
	012 Move V8, V1
	013 Move V9, V0
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x40F000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x465000
	023 Move X0, [X0+1720]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+1255], W8
	027 Move [X31+24], X31
	028 Move V0, [X19+256]
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move S1, 1
	031 NotImplemented "Instruction FCMP not yet implemented."
	032 Move X0, X19
	033 Call Image.get_activeSprite, X0
	034 Move X8, 0x40F000
	035 Move X8, [X8+1432]
	036 Move X21, X0
	037 Move X8, [X8]
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move X0, X21
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {52}
	051 Move W0, 1
	052 Move X0, X19
	053 Call Graphic.get_rectTransform, X0
	054 Move X8, 0x465000
	055 Move X8, [X8+1720]
	056 Move X21, X0
	057 Move X8, [X8]
	058 Move W9, [X8+224]
	059 Compare W9, 0
	060 JumpIfNotEqual {63}
	061 Move X0, X8
	062 Call 0x1C17DFC
	063 Add X2, X31, 24
	064 Move X0, X21
	065 Move V0, V9
	066 Move V1, V8
	067 Move X1, X20
	068 Move X3, X31
	069 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	070 Move TEMP, X0
	071 And TEMP, TEMP, 1
	072 Compare TEMP, 1
	073 JumpIfNotEqual {188}
	074 Move X0, X19
	075 Call Graphic.GetPixelAdjustedRect, X0
	076 Move [X31], S0
	077 Move [X31+8], S1
	078 Move [X31+8], S2
	079 Move [X31+16], S3
	080 Move W8, [X19+236]
	081 Compare W8, 0
	082 JumpIfEqual {113}
	083 Move X0, X19
	084 Call Image.get_activeSprite, X0
	085 Compare X0, 0
	086 JumpIfEqual {249}
	087 Move X1, X31
	088 Call Sprite.get_texture, X0
	089 Compare X0, 0
	090 JumpIfEqual {249}
	091 Move X8, [X0]
	092 Move X9, [X8+392]
	093 Move X1, [X8+400]
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move W20, W0
	096 Move X0, X19
	097 Call Image.get_activeSprite, X0
	098 Compare X0, 0
	099 JumpIfEqual {249}
	100 Move X1, X31
	101 Call Sprite.get_texture, X0
	102 Compare X0, 0
	103 JumpIfEqual {249}
	104 Move X8, [X0]
	105 Move X9, [X8+424]
	106 Move X1, [X8+432]
	107 NotImplemented "Instruction BLR not yet implemented."
	108 NotImplemented "Instruction SCVTF not yet implemented."
	109 NotImplemented "Instruction SCVTF not yet implemented."
	110 Add X1, X31, 0
	111 Move X0, X19
	112 Call Image.PreserveSpriteAspectRatio, X0, X1, X2
	113 Move V10, [X31+24]
	114 Move X0, X19
	115 Call Graphic.get_rectTransform, X0
	116 Compare X0, 0
	117 JumpIfEqual {249}
	118 Move X1, X31
	119 Call RectTransform.get_pivot, X0
	120 Move V8, [X31+8]
	121 Move V9, [X31+28]
	122 Move X0, X19
	123 Multiply S0, S0, S8
	124 Add S0, S10, S0
	125 Move [X31+24], S0
	126 Call Graphic.get_rectTransform, X0
	127 Compare X0, 0
	128 JumpIfEqual {249}
	129 Move X1, X31
	130 Call RectTransform.get_pivot, X0
	131 Move V5, [X31+12]
	132 Move V0, [X31+24]
	133 Move S2, [X31]
	134 Move S3, [X31+4]
	135 Move X0, X19
	136 Multiply S1, S1, S5
	137 Add S1, S9, S1
	138 Move V4, V8
	139 Move [X31+28], S1
	140 Call Image.MapCoordinate, X0, X1, X2
	141 Move X0, X19
	142 Move V8, V0
	143 Move [X31+24], S0
	144 Move [X31+32], S1
	145 Call Image.get_activeSprite, X0
	146 Compare X0, 0
	147 JumpIfEqual {249}
	148 Move X1, X31
	149 Call Sprite.get_texture, X0
	150 Compare X0, 0
	151 JumpIfEqual {249}
	152 Move X8, [X0]
	153 Move X9, [X8+392]
	154 Move X1, [X8+400]
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Move V9, [X31+28]
	157 Move W20, W0
	158 Move X0, X19
	159 Call Image.get_activeSprite, X0
	160 Compare X0, 0
	161 JumpIfEqual {249}
	162 Move X1, X31
	163 Call Sprite.get_texture, X0
	164 Compare X0, 0
	165 JumpIfEqual {249}
	166 Move X8, [X0]
	167 Move X9, [X8+424]
	168 Move X1, [X8+432]
	169 NotImplemented "Instruction BLR not yet implemented."
	170 Move W21, W0
	171 Move X0, X19
	172 Call Image.get_activeSprite, X0
	173 Compare X0, 0
	174 JumpIfEqual {198}
	175 Move X1, X31
	176 Call Sprite.get_texture, X0
	177 Compare X0, 0
	178 JumpIfEqual {199}
	179 NotImplemented "Instruction SCVTF not yet implemented."
	180 NotImplemented "Instruction SCVTF not yet implemented."
	181 NotImplemented "Instruction FDIV not yet implemented."
	182 NotImplemented "Instruction FDIV not yet implemented."
	183 Move X1, X31
	184 Call Texture2D.GetPixelBilinear, X0, V0, V1
	185 Move V0, [X19+256]
	186 NotImplemented "Instruction FCMP not yet implemented."
	187 NotImplemented "Instruction CSET not yet implemented."
	188 Move W0, W31
	189 Move X20, [X31+64]
	190 Move X19, [X31+72]
	191 Move X30, [X31+48]
	192 Move X21, [X31+56]
	193 Move D9, [X31+32]
	194 Move D8, [X31+40]
	195 Move V10, [X31+16]
	196 Add X31, X31, 80
	197 Return X0
	198 Call 0x1C17F20
	199 Call 0x1C17F20
	200 Move X20, X0
	201 NotImplemented "Instruction CMP not yet implemented."
	202 Move X0, X20
	203 Call 0x3EB2AD0
	204 Move X20, X0
	205 Move X0, 0x438000
	206 Move X0, [X0+464]
	207 Call 0x1C17D08
	208 Move X8, [X20]
	209 Move X1, [X8]
	210 Call 0x1C18270
	211 Move TEMP, X0
	212 And TEMP, TEMP, 1
	213 Compare TEMP, 1
	214 JumpIfNotEqual {250}
	215 Move X20, [X20]
	216 Call 0x3EB2AE0
	217 Compare X20, 0
	218 JumpIfEqual {249}
	219 Move X8, [X20]
	220 Move X0, X20
	221 Move X9, [X8+392]
	222 Move X1, [X8+400]
	223 NotImplemented "Instruction BLR not yet implemented."
	224 Move X20, X0
	225 Move X0, 0x47E000
	226 Move X0, [X0+1512]
	227 Call 0x1C17D08
	228 Move X21, X0
	229 Move X0, 0x47E000
	230 Move X0, [X0+1520]
	231 Call 0x1C17D08
	232 Move X2, X0
	233 Move X0, X21
	234 Move X1, X20
	235 Move X3, X31
	236 Call String.Concat, X0, X1, X2
	237 Move X20, X0
	238 Move X0, 0x40F000
	239 Move X0, [X0+2600]
	240 Call 0x1C17D08
	241 Move W8, [X0+224]
	242 Compare W8, 0
	243 JumpIfNotEqual {245}
	244 Call 0x1C17DFC
	245 Move X0, X20
	246 Move X1, X19
	247 Move X2, X31
	248 Call Debug.LogError, X0, X1
	249 Call 0x1C17F20
	250 Move W0, 8
	251 Call 0x3EB2AF0
	252 Move X8, [X20]
	253 Move [X0], X8
	254 Move X1, 0x1D0000
	255 Add X1, X1, 3672
	256 Move X2, X31
	257 Call 0x3EB2B00
	258 Move X20, X0
	259 Call 0x3EB2AE0
	260 Move X0, X20
	261 Call 0x1D2D690
	262 Call 0x1991590

Method: UnityEngine.Vector2 MapCoordinate(UnityEngine.Vector2 local, UnityEngine.Rect rect)

Disassembly:
	0x03CE5498 ADRP X0, 0xFFFFFFFFFCE36000
	0x03CE549C ADD X0, X0, 0x706
	0x03CE54A0 BL 0x1C16CB8
	0x03CE54A4 MOV X1, X0
	0x03CE54A8 STR X0, [X20 + 0x528]
	0x03CE54AC MOV X0, X19
	0x03CE54B0 LDP X20, X19, [X31 + 0x10]
	0x03CE54B4 LDR X30, [X31], #0x20
	0x03CE54B8 BR X1
	0x03CE54BC STR X30, [X31 - 0x30]!
	0x03CE54C0 STP X22, X21, [X31 + 0x10]
	0x03CE54C4 STP X20, X19, [X31 + 0x20]
	0x03CE54C8 ADRP X22, 0x702000
	0x03CE54CC LDR X3, [X22 + 0x548]
	0x03CE54D0 MOV W19, W2
	0x03CE54D4 MOV X20, X1
	0x03CE54D8 MOV X21, X0
	0x03CE54DC CBNZ X3, 0x3CE54F4
	0x03CE54E0 ADRP X0, 0xFFFFFFFFFCE3A000
	0x03CE54E4 ADD X0, X0, 0x81A
	0x03CE54E8 BL 0x1C16CB8
	0x03CE54EC MOV X3, X0
	0x03CE54F0 STR X0, [X22 + 0x548]
	0x03CE54F4 MOV X0, X21
	0x03CE54F8 MOV X1, X20
	0x03CE54FC MOV W2, W19
	0x03CE5500 LDP X20, X19, [X31 + 0x20]
	0x03CE5504 LDP X22, X21, [X31 + 0x10]
	0x03CE5508 LDR X30, [X31], #0x30
	0x03CE550C BR X3
	0x03CE5510 STP X30, X21, [X31 - 0x20]!
	0x03CE5514 STP X20, X19, [X31 + 0x10]
	0x03CE5518 ADRP X21, 0x702000
	0x03CE551C LDR X2, [X21 + 0x550]
	0x03CE5520 MOV X19, X1
	0x03CE5524 MOV X20, X0
	0x03CE5528 CBNZ X2, 0x3CE5540
	0x03CE552C ADRP X0, 0xFFFFFFFFFCE46000
	0x03CE5530 ADD X0, X0, 0x297
	0x03CE5534 BL 0x1C16CB8
	0x03CE5538 MOV X2, X0
	0x03CE553C STR X0, [X21 + 0x550]
	0x03CE5540 MOV X0, X20
	0x03CE5544 MOV X1, X19
	0x03CE5548 LDP X20, X19, [X31 + 0x10]
	0x03CE554C LDP X30, X21, [X31], #0x20
	0x03CE5550 BR X2
	0x03CE5554 STP D9, D8, [X31 - 0x30]!
	0x03CE5558 STP X30, X21, [X31 + 0x10]
	0x03CE555C STP X20, X19, [X31 + 0x20]
	0x03CE5560 ADRP X21, 0x702000
	0x03CE5564 LDR X2, [X21 + 0x558]
	0x03CE5568 MOV W19, W1
	0x03CE556C MOV V8.16B, V1.16B
	0x03CE5570 MOV V9.16B, V0.16B
	0x03CE5574 MOV X20, X0
	0x03CE5578 CBNZ X2, 0x3CE5590
	0x03CE557C ADRP X0, 0xFFFFFFFFFCE2E000
	0x03CE5580 ADD X0, X0, 0x5C6
	0x03CE5584 BL 0x1C16CB8
	0x03CE5588 MOV X2, X0
	0x03CE558C STR X0, [X21 + 0x558]
	0x03CE5590 MOV X0, X20
	0x03CE5594 MOV W1, W19
	0x03CE5598 LDP X20, X19, [X31 + 0x20]
	0x03CE559C LDP X30, X21, [X31 + 0x10]
	0x03CE55A0 MOV V0.16B, V9.16B
	0x03CE55A4 MOV V1.16B, V8.16B
	0x03CE55A8 LDP D9, D8, [X31], #0x30
	0x03CE55AC BR X2
	0x03CE55B0 STR X30, [X31 - 0x20]!
	0x03CE55B4 STP X20, X19, [X31 + 0x10]
	0x03CE55B8 ADRP X20, 0x702000
	0x03CE55BC LDR X1, [X20 + 0x560]
	0x03CE55C0 MOV X19, X0
	0x03CE55C4 CBNZ X1, 0x3CE55DC
	0x03CE55C8 ADRP X0, 0xFFFFFFFFFCE1C000
	0x03CE55CC ADD X0, X0, 0x907
	0x03CE55D0 BL 0x1C16CB8
	0x03CE55D4 MOV X1, X0
	0x03CE55D8 STR X0, [X20 + 0x560]
	0x03CE55DC MOV X0, X19
	0x03CE55E0 LDP X20, X19, [X31 + 0x10]
	0x03CE55E4 LDR X30, [X31], #0x20
	0x03CE55E8 BR X1
	0x03CE55EC STR X30, [X31 - 0x20]!
	0x03CE55F0 STP X20, X19, [X31 + 0x10]
	0x03CE55F4 ADRP X20, 0x702000
	0x03CE55F8 LDR X1, [X20 + 0x568]
	0x03CE55FC MOV X19, X0
	0x03CE5600 CBNZ X1, 0x3CE5618
	0x03CE5604 ADRP X0, 0xFFFFFFFFFCE10000
	0x03CE5608 ADD X0, X0, 0xB19
	0x03CE560C BL 0x1C16CB8
	0x03CE5610 MOV X1, X0
	0x03CE5614 STR X0, [X20 + 0x568]
	0x03CE5618 MOV X0, X19
	0x03CE561C LDP X20, X19, [X31 + 0x10]
	0x03CE5620 LDR X30, [X31], #0x20
	0x03CE5624 BR X1
	0x03CE5628 STP X30, X21, [X31 - 0x20]!
	0x03CE562C STP X20, X19, [X31 + 0x10]
	0x03CE5630 ADRP X21, 0x702000
	0x03CE5634 LDR X2, [X21 + 0x570]
	0x03CE5638 MOV X19, X1
	0x03CE563C MOV X20, X0
	0x03CE5640 CBNZ X2, 0x3CE5658
	0x03CE5644 ADRP X0, 0xFFFFFFFFFCE3C000
	0x03CE5648 ADD X0, X0, 0x6D8
	0x03CE564C BL 0x1C16CB8
	0x03CE5650 MOV X2, X0
	0x03CE5654 STR X0, [X21 + 0x570]
	0x03CE5658 MOV X0, X20
	0x03CE565C MOV X1, X19
	0x03CE5660 LDP X20, X19, [X31 + 0x10]
	0x03CE5664 LDP X30, X21, [X31], #0x20
	0x03CE5668 BR X2
	0x03CE566C STR X30, [X31 - 0x20]!
	0x03CE5670 STP X20, X19, [X31 + 0x10]
	0x03CE5674 ADRP X20, 0x702000
	0x03CE5678 LDR X1, [X20 + 0x578]
	0x03CE567C MOV X19, X0
	0x03CE5680 CBNZ X1, 0x3CE5698
	0x03CE5684 ADRP X0, 0xFFFFFFFFFCE30000
	0x03CE5688 ADD X0, X0, 0x304
	0x03CE568C BL 0x1C16CB8
	0x03CE5690 MOV X1, X0
	0x03CE5694 STR X0, [X20 + 0x578]
	0x03CE5698 MOV X0, X19
	0x03CE569C LDP X20, X19, [X31 + 0x10]
	0x03CE56A0 LDR X30, [X31], #0x20
	0x03CE56A4 BR X1
	0x03CE56A8 STR X30, [X31 - 0x20]!
	0x03CE56AC STP X20, X19, [X31 + 0x10]
	0x03CE56B0 ADRP X20, 0x702000
	0x03CE56B4 LDR X1, [X20 + 0x580]
	0x03CE56B8 MOV X19, X0
	0x03CE56BC CBNZ X1, 0x3CE56D4
	0x03CE56C0 ADRP X0, 0xFFFFFFFFFCE28000
	0x03CE56C4 ADD X0, X0, 0xBFF
	0x03CE56C8 BL 0x1C16CB8
	0x03CE56CC MOV X1, X0
	0x03CE56D0 STR X0, [X20 + 0x580]
	0x03CE56D4 MOV X0, X19
	0x03CE56D8 LDP X20, X19, [X31 + 0x10]
	0x03CE56DC LDR X30, [X31], #0x20
	0x03CE56E0 BR X1
	0x03CE56E4 STP D9, D8, [X31 - 0x40]!
	0x03CE56E8 STR X30, [X31 + 0x10]
	0x03CE56EC STP X22, X21, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X19
	012 Move V12, V5
	013 Move V13, V4
	014 Move V11, V3
	015 Move V15, V2
	016 Move V8, V1
	017 Move V9, V0
	018 Move X19, X0
	019 Call Image.get_activeSprite, X0
	020 Compare X0, 0
	021 JumpIfEqual {172}
	022 Move X1, X31
	023 Call Sprite.get_rect, X0
	024 Move W8, [X19+232]
	025 Move V10, V3
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Compare W8, 0
	028 JumpIfNotEqual {33}
	029 Multiply S2, S9, S2
	030 Multiply S3, S8, S10
	031 NotImplemented "Instruction FDIV not yet implemented."
	032 NotImplemented "Instruction FDIV not yet implemented."
	033 Move X0, X19
	034 Move [X31+20], S2
	035 Move [X31+28], S15
	036 Move [X31+28], S11
	037 Move [X31+12], S1
	038 Move [X31+20], S0
	039 Call Image.get_activeSprite, X0
	040 Compare X0, 0
	041 JumpIfEqual {172}
	042 Move X1, X31
	043 Call Sprite.get_border, X0
	044 Move X0, X19
	045 Move V14, V0
	046 Move [X31], S1
	047 Move [X31+8], S0
	048 Move V15, V2
	049 Move [X31+8], S2
	050 Move V11, V3
	051 Call Image.get_pixelsPerUnit, X0
	052 NotImplemented "Instruction FDIV not yet implemented."
	053 Move V14, [X31]
	054 NotImplemented "Instruction FDIV not yet implemented."
	055 NotImplemented "Instruction FDIV not yet implemented."
	056 Move X0, X19
	057 NotImplemented "Instruction FDIV not yet implemented."
	058 Move V0, V4
	059 Move S4, [X31+24]
	060 Move S5, [X31+28]
	061 Move V6, V13
	062 Move V7, V12
	063 Call Image.GetAdjustedBorders, X0, X1, X2
	064 Move S15, [X31+4]
	065 Move S17, [X31+8]
	066 Move V19, [X31+20]
	067 Subtract S6, S10, S14
	068 Subtract S18, S10, S11
	069 Subtract S4, S12, S10
	070 Subtract S5, S13, S19
	071 Subtract S7, S19, S15
	072 Subtract S19, S19, S17
	073 Move W9, 1
	074 Subtract S6, S6, S11
	075 Move S16, 1
	076 Subtract S17, S7, S17
	077 Subtract S7, S18, S14
	078 Subtract S18, S19, S15
	079 Move S19, W31
	080 And W31, W9, 1
	081 NotImplemented "Instruction FCSEL not yet implemented."
	082 NotImplemented "Instruction FCSEL not yet implemented."
	083 Move W8, W9
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 And W31, W8, 1
	086 NotImplemented "Instruction FCSEL not yet implemented."
	087 NotImplemented "Instruction FCSEL not yet implemented."
	088 NotImplemented "Instruction FCSEL not yet implemented."
	089 Subtract S20, S21, S20
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Move W9, [X19+232]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move V21, V2
	094 Move V20, V0
	095 Move V23, V13
	096 Move V22, V9
	097 Move TEMP, X8
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfEqual {105}
	101 Move V21, V3
	102 Move V20, V1
	103 Move V23, V12
	104 Move V22, V8
	105 Subtract S23, S23, S21
	106 NotImplemented "Instruction FCMP not yet implemented."
	107 Move S21, W31
	108 Subtract S22, S22, S20
	109 Subtract S20, S23, S20
	110 NotImplemented "Instruction FDIV not yet implemented."
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 NotImplemented "Instruction FMIN not yet implemented."
	113 NotImplemented "Instruction FMAX not yet implemented."
	114 Move TEMP, X8
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {144}
	118 Multiply S20, S18, S20
	119 Move TEMP, X8
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {143}
	123 Subtract S9, S9, S5
	124 Move TEMP, X8
	125 And TEMP, TEMP, 1
	126 Compare TEMP, 1
	127 JumpIfNotEqual {145}
	128 Subtract S20, S9, S0
	129 NotImplemented "Instruction FDIV not yet implemented."
	130 NotImplemented "Instruction FRINTM not yet implemented."
	131 Multiply S21, S17, S21
	132 Subtract S20, S20, S21
	133 NotImplemented "Instruction FCMP not yet implemented."
	134 NotImplemented "Instruction FCSEL not yet implemented."
	135 NotImplemented "Instruction FCMP not yet implemented."
	136 NotImplemented "Instruction FCSEL not yet implemented."
	137 Add S9, S15, S20
	138 Move W9, W31
	139 Move TEMP, X8
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfEqual {80}
	143 Subtract S8, S8, S4
	144 Multiply S0, S7, S20
	145 Subtract S0, S8, S1
	146 NotImplemented "Instruction FDIV not yet implemented."
	147 NotImplemented "Instruction FRINTM not yet implemented."
	148 Multiply S1, S6, S1
	149 Subtract S0, S0, S1
	150 NotImplemented "Instruction FCMP not yet implemented."
	151 NotImplemented "Instruction FCSEL not yet implemented."
	152 NotImplemented "Instruction FCMP not yet implemented."
	153 Move S0, W31
	154 NotImplemented "Instruction FCSEL not yet implemented."
	155 Add S8, S14, S0
	156 Move S1, [X31+12]
	157 Move S0, [X31+16]
	158 Add S1, S1, S8
	159 Add S0, S0, S9
	160 Move X30, [X31+96]
	161 Move X19, [X31+104]
	162 Move D9, [X31+80]
	163 Move D8, [X31+88]
	164 Move D11, [X31+64]
	165 Move D10, [X31+72]
	166 Move D13, [X31+48]
	167 Move D12, [X31+56]
	168 Move D15, [X31+32]
	169 Move D14, [X31+40]
	170 Add X31, X31, 112
	171 Return X0
	172 Call 0x1C17F20

Method: System.Void RebuildImage(UnityEngine.U2D.SpriteAtlas spriteAtlas)

Disassembly:
	0x03CE56F0 STP X20, X19, [X31 + 0x30]
	0x03CE56F4 MOV W20, W1
	0x03CE56F8 MOV X21, X0
	0x03CE56FC MOV X0, X3
	0x03CE5700 MOV X1, X31
	0x03CE5704 MOV W19, W2
	0x03CE5708 MOV V8.16B, V1.16B
	0x03CE570C MOV V9.16B, V0.16B
	0x03CE5710 BL 0x33C6948
	0x03CE5714 MOV X22, X0
	0x03CE5718 MOV X0, X21
	0x03CE571C MOV V0.16B, V9.16B
	0x03CE5720 MOV W1, W20
	0x03CE5724 MOV V1.16B, V8.16B
	0x03CE5728 MOV W2, W19
	0x03CE572C BL 0x3CE5748
	0x03CE5730 STP S0, S1, [X22]
	0x03CE5734 LDP X20, X19, [X31 + 0x30]
	0x03CE5738 LDP X22, X21, [X31 + 0x20]
	0x03CE573C LDR X30, [X31 + 0x10]
	0x03CE5740 LDP D9, D8, [X31], #0x40
	0x03CE5744 RET
	0x03CE5748 STP X30, X19, [X31 - 0x10]!
	0x03CE574C CBZ X0, 0x3CE5778
	0x03CE5750 LDR X8, [X0 + 0x30]
	0x03CE5754 MOV W3, W2
	0x03CE5758 MOV W2, W1
	0x03CE575C MOV X1, X0
	0x03CE5760 CBZ X8, 0x3CE5778
	0x03CE5764 LDR X5, [X8 + 0x18]
	0x03CE5768 LDR X0, [X8 + 0x40]
	0x03CE576C LDR X4, [X8 + 0x28]
	0x03CE5770 LDP X30, X19, [X31], #0x10
	0x03CE5774 BR X5
	0x03CE5778 ADRP X0, 0x40E000
	0x03CE577C LDR X0, [X0 + 0x5B0]
	0x03CE5780 BL 0x1C16D08
	0x03CE5784 BL 0x1C16F10
	0x03CE5788 MOV X19, X0
	0x03CE578C ADRP X0, 0x47D000
	0x03CE5790 LDR X0, [X0 + 0x638]
	0x03CE5794 BL 0x1C16D08
	0x03CE5798 MOV X1, X0
	0x03CE579C MOV X0, X19
	0x03CE57A0 MOV X2, X31
	0x03CE57A4 BL 0x337DF1C
	0x03CE57A8 ADRP X0, 0x47D000
	0x03CE57AC LDR X0, [X0 + 0x640]
	0x03CE57B0 BL 0x1C16D08
	0x03CE57B4 MOV X1, X0
	0x03CE57B8 MOV X0, X19
	0x03CE57BC BL 0x1C16DEC
	0x03CE57C0 STP D9, D8, [X31 - 0x30]!
	0x03CE57C4 STR X30, [X31 + 0x10]
	0x03CE57C8 STP X20, X19, [X31 + 0x20]
	0x03CE57CC MOV X19, X0
	0x03CE57D0 MOV X0, X1
	0x03CE57D4 MOV X1, X31
	0x03CE57D8 MOV V8.16B, V1.16B
	0x03CE57DC MOV V9.16B, V0.16B
	0x03CE57E0 BL 0x33C6948
	0x03CE57E4 MOV X20, X0
	0x03CE57E8 MOV X0, X19
	0x03CE57EC MOV V0.16B, V9.16B
	0x03CE57F0 MOV V1.16B, V8.16B
	0x03CE57F4 BL 0x3CE580C
	0x03CE57F8 STR S0, [X20]
	0x03CE57FC LDP X20, X19, [X31 + 0x20]
	0x03CE5800 LDR X30, [X31 + 0x10]
	0x03CE5804 LDP D9, D8, [X31], #0x30
	0x03CE5808 RET
	0x03CE580C STP X30, X19, [X31 - 0x10]!
	0x03CE5810 CBZ X0, 0x3CE5834
	0x03CE5814 LDR X8, [X0 + 0x38]
	0x03CE5818 MOV X1, X0
	0x03CE581C CBZ X8, 0x3CE5834
	0x03CE5820 LDR X3, [X8 + 0x18]
	0x03CE5824 LDR X0, [X8 + 0x40]
	0x03CE5828 LDR X2, [X8 + 0x28]
	0x03CE582C LDP X30, X19, [X31], #0x10
	0x03CE5830 BR X3
	0x03CE5834 ADRP X0, 0x40E000
	0x03CE5838 LDR X0, [X0 + 0x5B0]
	0x03CE583C BL 0x1C16D08
	0x03CE5840 BL 0x1C16F10
	0x03CE5844 MOV X19, X0
	0x03CE5848 ADRP X0, 0x47D000
	0x03CE584C LDR X0, [X0 + 0x648]
	0x03CE5850 BL 0x1C16D08
	0x03CE5854 MOV X1, X0
	0x03CE5858 MOV X0, X19
	0x03CE585C MOV X2, X31
	0x03CE5860 BL 0x337DF1C
	0x03CE5864 ADRP X0, 0x47D000
	0x03CE5868 LDR X0, [X0 + 0x650]
	0x03CE586C BL 0x1C16D08
	0x03CE5870 MOV X1, X0
	0x03CE5874 MOV X0, X19
	0x03CE5878 BL 0x1C16DEC
	0x03CE587C STP X30, X21, [X31 - 0x20]!
	0x03CE5880 STP X20, X19, [X31 + 0x10]
	0x03CE5884 ADRP X21, 0x702000
	0x03CE5888 LDR X2, [X21 + 0x588]
	0x03CE588C MOV W19, W1
	0x03CE5890 MOV X20, X0
	0x03CE5894 CBNZ X2, 0x3CE58AC

ISIL:
	001 Move [X31-80], X30
	002 Move [X31-72], X27
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x703000
	012 Move X23, 0x47E000
	013 Move W8, [X20+1256]
	014 Move X23, [X23+1408]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {37}
	020 Move X0, 0x47E000
	021 Move X0, [X0+1408]
	022 Call 0x1C17CF4
	023 Move X0, 0x47E000
	024 Move X0, [X0+1528]
	025 Call 0x1C17CF4
	026 Move X0, 0x47E000
	027 Move X0, [X0+1536]
	028 Call 0x1C17CF4
	029 Move X0, 0x47E000
	030 Move X0, [X0+1544]
	031 Call 0x1C17CF4
	032 Move X0, 0x40F000
	033 Move X0, [X0+1432]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+1256], W8
	037 Move X0, [X23]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {43}
	041 Call 0x1C17DFC
	042 Move X0, [X23]
	043 Move X8, [X0+184]
	044 Move X8, [X8+40]
	045 Compare X8, 0
	046 JumpIfEqual {135}
	047 Move W8, [X8+24]
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X24, 0x47E000
	050 Move X25, 0x40F000
	051 Move X26, 0x47E000
	052 Move X24, [X24+1544]
	053 Move X25, [X25+1432]
	054 Move X26, [X26+1528]
	055 Subtract W27, W8, 2
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {61}
	059 Call 0x1C17DFC
	060 Move X0, [X23]
	061 Move X8, [X0+184]
	062 Move X0, [X8+40]
	063 Compare X0, 0
	064 JumpIfEqual {135}
	065 Move X2, [X24]
	066 Add W20, W27, 1
	067 Move W1, W20
	068 Call List`1<Object>.get_Item, X0, X1
	069 Compare X0, 0
	070 JumpIfEqual {135}
	071 Move X21, X0
	072 Call Image.get_activeSprite, X0
	073 Move X8, [X25]
	074 Move X22, X0
	075 Move W9, [X8+224]
	076 Compare W9, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X8
	079 Call 0x1C17DFC
	080 Move X0, X31
	081 Move X1, X22
	082 Move X2, X31
	083 Call Object.op_Inequality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {118}
	088 Move X0, X21
	089 Call Image.get_activeSprite, X0
	090 Compare X19, 0
	091 JumpIfEqual {135}
	092 Move X1, X0
	093 Move X0, X19
	094 Move X2, X31
	095 Call SpriteAtlas.CanBindTo, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfNotEqual {118}
	100 Move X8, [X21]
	101 Move X0, X21
	102 Move X9, [X8+728]
	103 Move X1, [X8+736]
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move X0, [X23]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {111}
	109 Call 0x1C17DFC
	110 Move X0, [X23]
	111 Move X8, [X0+184]
	112 Move X0, [X8+40]
	113 Compare X0, 0
	114 JumpIfEqual {135}
	115 Move X2, [X26]
	116 Move W1, W20
	117 Call List`1<Object>.RemoveAt, X0, X1
	118 Move TEMP, X27
	119 And TEMP, TEMP, -2147483648
	120 Compare TEMP, -2147483648
	121 JumpIfEqual {124}
	122 Move X0, [X23]
	123 Subtract W27, W27, 1
	124 Move X20, [X31+64]
	125 Move X19, [X31+72]
	126 Move X22, [X31+48]
	127 Move X21, [X31+56]
	128 Move X24, [X31+32]
	129 Move X23, [X31+40]
	130 Move X26, [X31+16]
	131 Move X25, [X31+24]
	132 Move X30, [X31+80]
	133 Move X27, [X31+88]
	134 Return 
	135 Call 0x1C17F20

Method: System.Void TrackImage(UnityEngine.UI.Image g)

Disassembly:
	0x03CE42A4 FADD S0, S10, S0
	0x03CE42A8 STR S0, [X31 + 0x18]
	0x03CE42AC BL 0x3CDB488
	0x03CE42B0 CBZ X0, 0x3CE4460
	0x03CE42B4 MOV X1, X31
	0x03CE42B8 BL 0x3C3EA28
	0x03CE42BC LDR V5, [X31 + 0xC]
	0x03CE42C0 LDR V0, [X31 + 0x18]
	0x03CE42C4 LDP S2, S3, [X31]
	0x03CE42C8 MOV X0, X19
	0x03CE42CC FMUL S1, S1, S5
	0x03CE42D0 FADD S1, S9, S1
	0x03CE42D4 MOV V4.16B, V8.16B
	0x03CE42D8 STR S1, [X31 + 0x1C]
	0x03CE42DC BL 0x3CE4498
	0x03CE42E0 MOV X0, X19
	0x03CE42E4 MOV V8.16B, V0.16B
	0x03CE42E8 STP S0, S1, [X31 + 0x18]
	0x03CE42EC BL 0x3CDFE9C
	0x03CE42F0 CBZ X0, 0x3CE4460
	0x03CE42F4 MOV X1, X31
	0x03CE42F8 BL 0x3C41990
	0x03CE42FC CBZ X0, 0x3CE4460
	0x03CE4300 LDR X8, [X0]
	0x03CE4304 LDP X9, X1, [X8 + 0x188]
	0x03CE4308 BLR X9
	0x03CE430C LDR V9, [X31 + 0x1C]
	0x03CE4310 MOV W20, W0
	0x03CE4314 MOV X0, X19
	0x03CE4318 BL 0x3CDFE9C
	0x03CE431C CBZ X0, 0x3CE4460
	0x03CE4320 MOV X1, X31
	0x03CE4324 BL 0x3C41990
	0x03CE4328 CBZ X0, 0x3CE4460
	0x03CE432C LDR X8, [X0]
	0x03CE4330 LDP X9, X1, [X8 + 0x1A8]
	0x03CE4334 BLR X9
	0x03CE4338 MOV W21, W0
	0x03CE433C MOV X0, X19
	0x03CE4340 BL 0x3CDFE9C
	0x03CE4344 CBZ X0, 0x3CE4398
	0x03CE4348 MOV X1, X31
	0x03CE434C BL 0x3C41990
	0x03CE4350 CBZ X0, 0x3CE439C
	0x03CE4354 SCVTF S0, W20
	0x03CE4358 SCVTF S1, W21
	0x03CE435C FDIV S0, S8, S0
	0x03CE4360 FDIV S1, S9, S1
	0x03CE4364 MOV X1, X31
	0x03CE4368 BL 0x3C1C44C
	0x03CE436C LDR V0, [X19 + 0x100]
	0x03CE4370 FCMP S3, S0
	0x03CE4374 CSET W0, GE
	0x03CE4378 B 0x3CE4380
	0x03CE437C MOV W0, W31
	0x03CE4380 LDP X20, X19, [X31 + 0x40]
	0x03CE4384 LDP X30, X21, [X31 + 0x30]
	0x03CE4388 LDP D9, D8, [X31 + 0x20]
	0x03CE438C LDR V10, [X31 + 0x10]
	0x03CE4390 ADD X31, X31, 0x50
	0x03CE4394 RET
	0x03CE4398 BL 0x1C16F20
	0x03CE439C BL 0x1C16F20
	0x03CE43A0 B 0x3CE43AC
	0x03CE43A4 B 0x3CE43AC
	0x03CE43A8 B 0x3CE43AC
	0x03CE43AC MOV X20, X0
	0x03CE43B0 CMP W1, 0x1
	0x03CE43B4 B.NE 0x3CE448C
	0x03CE43B8 MOV X0, X20
	0x03CE43BC BL 0x3EB1AD0
	0x03CE43C0 MOV X20, X0
	0x03CE43C4 ADRP X0, 0x438000
	0x03CE43C8 LDR X0, [X0 + 0x1D0]
	0x03CE43CC BL 0x1C16D08
	0x03CE43D0 LDR X8, [X20]
	0x03CE43D4 LDR X1, [X8]
	0x03CE43D8 BL 0x1C17270
	0x03CE43DC TBZ X0, 0x0, 0x3CE4464
	0x03CE43E0 LDR X20, [X20]
	0x03CE43E4 BL 0x3EB1AE0
	0x03CE43E8 CBZ X20, 0x3CE4460
	0x03CE43EC LDR X8, [X20]
	0x03CE43F0 MOV X0, X20
	0x03CE43F4 LDP X9, X1, [X8 + 0x188]
	0x03CE43F8 BLR X9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x704000
	006 Move X21, 0x47F000
	007 Move W8, [X20+1257]
	008 Move X21, [X21+1408]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x47C000
	015 Move X0, [X0+2176]
	016 Call 0x1C17CF4
	017 Move X0, 0x47F000
	018 Move X0, [X0+1488]
	019 Call 0x1C17CF4
	020 Move X0, 0x47F000
	021 Move X0, [X0+1408]
	022 Call 0x1C17CF4
	023 Move X0, 0x47F000
	024 Move X0, [X0+1496]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1257], W8
	028 Move X0, [X21]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {34}
	032 Call 0x1C17DFC
	033 Move X0, [X21]
	034 Move X8, [X0+184]
	035 Move W8, [X8+48]
	036 Compare W8, 0
	037 JumpIfNotEqual {61}
	038 Move X8, 0x47C000
	039 Move X8, [X8+2176]
	040 Move X0, [X8]
	041 Call 0x1C17F10
	042 Move X8, 0x47F000
	043 Move X8, [X8+1488]
	044 Move X1, X31
	045 Move X3, X31
	046 Move X20, X0
	047 Move X2, [X8]
	048 Call Action`1<Object>..ctor, X0, X1, X2
	049 Move X0, X20
	050 Move X1, X31
	051 Call SpriteAtlasManager.add_atlasRegistered, X0
	052 Move X0, [X21]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {58}
	056 Call 0x1C17DFC
	057 Move X0, [X21]
	058 Move X8, [X0+184]
	059 Move W9, 1
	060 Move [X8+48], W9
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {66}
	064 Call 0x1C17DFC
	065 Move X0, [X21]
	066 Move X8, [X0+184]
	067 Move X0, [X8+40]
	068 Compare X0, 0
	069 JumpIfEqual {101}
	070 Move X9, 0x47F000
	071 Move X9, [X9+1496]
	072 Move W10, [X0+28]
	073 Move X8, [X0+16]
	074 Move X9, [X9]
	075 Add W10, W10, 1
	076 Move [X0+28], W10
	077 Compare X8, 0
	078 JumpIfEqual {101}
	079 NotImplemented "Instruction LDRSW not yet implemented."
	080 Move W11, [X8+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Add W9, W10, 1
	083 Add X8, X8, X10
	084 Move [X0+24], W9
	085 Move [X8+32], X19
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Return 
	091 Move X8, [X9+32]
	092 Move X1, X19
	093 Move X20, [X31+16]
	094 Move X19, [X31+24]
	095 Move X8, [X8+192]
	096 Move X2, [X8+112]
	097 Move X30, [X31+32]
	098 Move X21, [X31+40]
	099 Call List`1<Object>.AddWithResize, X0, X1
	100 Return 
	101 Call 0x1C17F20

Method: System.Void UnTrackImage(UnityEngine.UI.Image g)

Disassembly:
	0x03CE448C MOV X0, X20
	0x03CE4490 BL 0x1D2C690
	0x03CE4494 BL 0x1990590
	0x03CE4498 SUB X31, X31, 0x70
	0x03CE449C STP D15, D14, [X31 + 0x20]
	0x03CE44A0 STP D13, D12, [X31 + 0x30]
	0x03CE44A4 STP D11, D10, [X31 + 0x40]
	0x03CE44A8 STP D9, D8, [X31 + 0x50]
	0x03CE44AC STP X30, X19, [X31 + 0x60]
	0x03CE44B0 MOV V12.16B, V5.16B
	0x03CE44B4 MOV V13.16B, V4.16B
	0x03CE44B8 MOV V11.16B, V3.16B
	0x03CE44BC MOV V15.16B, V2.16B
	0x03CE44C0 MOV V8.16B, V1.16B
	0x03CE44C4 MOV V9.16B, V0.16B
	0x03CE44C8 MOV X19, X0
	0x03CE44CC BL 0x3CDFE9C
	0x03CE44D0 CBZ X0, 0x3CE46EC
	0x03CE44D4 MOV X1, X31
	0x03CE44D8 BL 0x3C41858
	0x03CE44DC LDR W8, [X19 + 0xE8]
	0x03CE44E0 MOV V10.16B, V3.16B
	0x03CE44E4 CMP W8, 0x3
	0x03CE44E8 B.EQ 0x3CE44F0
	0x03CE44EC CBNZ W8, 0x3CE4504
	0x03CE44F0 FMUL S2, S9, S2
	0x03CE44F4 FMUL S3, S8, S10
	0x03CE44F8 FDIV S9, S2, S13
	0x03CE44FC FDIV S8, S3, S12
	0x03CE4500 B 0x3CE46C8
	0x03CE4504 MOV X0, X19
	0x03CE4508 STP S2, S15, [X31 + 0x14]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x704000
	006 Move X20, 0x47F000
	007 Move W8, [X21+1258]
	008 Move X20, [X20+1408]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x47F000
	015 Move X0, [X0+1408]
	016 Call 0x1C17CF4
	017 Move X0, 0x47F000
	018 Move X0, [X0+1504]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1258], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {28}
	026 Call 0x1C17DFC
	027 Move X0, [X20]
	028 Move X8, [X0+184]
	029 Move X0, [X8+40]
	030 Compare X0, 0
	031 JumpIfEqual {42}
	032 Move X8, 0x47F000
	033 Move X8, [X8+1504]
	034 Move X1, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X2, [X8]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Call List`1<Object>.Remove, X0, X1
	041 Return 
	042 Call 0x1C17F20

Method: System.Void OnDidApplyAnimationProperties()

Disassembly:
	0x03CE5898 ADRP X0, 0xFFFFFFFFFCE32000
	0x03CE589C ADD X0, X0, 0x33A
	0x03CE58A0 BL 0x1C16CB8
	0x03CE58A4 MOV X2, X0
	0x03CE58A8 STR X0, [X21 + 0x588]
	0x03CE58AC AND W1, W19, 0x1
	0x03CE58B0 MOV X0, X20
	0x03CE58B4 LDP X20, X19, [X31 + 0x10]
	0x03CE58B8 LDP X30, X21, [X31], #0x20
	0x03CE58BC BR X2
	0x03CE58C0 STR X30, [X31 - 0x20]!
	0x03CE58C4 STP X20, X19, [X31 + 0x10]
	0x03CE58C8 ADRP X20, 0x702000
	0x03CE58CC LDR X1, [X20 + 0x590]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X0
	005 Move X9, [X8+776]
	006 Move X1, [X8+784]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Move X8, [X19]
	009 Move X0, X19
	010 Move X9, [X8+760]
	011 Move X1, [X8+768]
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move X0, X19
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call Graphic.SetRaycastDirty, X0
	017 Return 

Method: System.Void .cctor()

Disassembly:
	0x03CE58D0 MOV X19, X0
	0x03CE58D4 CBNZ X1, 0x3CE58EC
	0x03CE58D8 ADRP X0, 0xFFFFFFFFFCE32000
	0x03CE58DC ADD X0, X0, 0x387
	0x03CE58E0 BL 0x1C16CB8
	0x03CE58E4 MOV X1, X0
	0x03CE58E8 STR X0, [X20 + 0x590]
	0x03CE58EC MOV X0, X19
	0x03CE58F0 LDP X20, X19, [X31 + 0x10]
	0x03CE58F4 LDR X30, [X31], #0x20
	0x03CE58F8 BR X1
	0x03CE58FC STR X30, [X31 - 0x20]!
	0x03CE5900 STP X20, X19, [X31 + 0x10]
	0x03CE5904 ADRP X20, 0x702000
	0x03CE5908 LDR X1, [X20 + 0x598]
	0x03CE590C MOV X19, X0
	0x03CE5910 CBNZ X1, 0x3CE5928
	0x03CE5914 ADRP X0, 0xFFFFFFFFFCE22000
	0x03CE5918 ADD X0, X0, 0xB32
	0x03CE591C BL 0x1C16CB8
	0x03CE5920 MOV X1, X0
	0x03CE5924 STR X0, [X20 + 0x598]
	0x03CE5928 MOV X0, X19
	0x03CE592C LDP X20, X19, [X31 + 0x10]
	0x03CE5930 LDR X30, [X31], #0x20
	0x03CE5934 BR X1
	0x03CE5938 STP X30, X21, [X31 - 0x20]!
	0x03CE593C STP X20, X19, [X31 + 0x10]
	0x03CE5940 ADRP X21, 0x702000
	0x03CE5944 LDR X2, [X21 + 0x5A0]
	0x03CE5948 MOV W19, W1
	0x03CE594C MOV X20, X0
	0x03CE5950 CBNZ X2, 0x3CE5968
	0x03CE5954 ADRP X0, 0xFFFFFFFFFCE2C000
	0x03CE5958 ADD X0, X0, 0x80B
	0x03CE595C BL 0x1C16CB8
	0x03CE5960 MOV X2, X0
	0x03CE5964 STR X0, [X21 + 0x5A0]
	0x03CE5968 MOV X0, X20
	0x03CE596C MOV W1, W19
	0x03CE5970 LDP X20, X19, [X31 + 0x10]
	0x03CE5974 LDP X30, X21, [X31], #0x20
	0x03CE5978 BR X2
	0x03CE597C STP X30, X21, [X31 - 0x20]!
	0x03CE5980 STP X20, X19, [X31 + 0x10]
	0x03CE5984 ADRP X21, 0x702000
	0x03CE5988 LDR X2, [X21 + 0x5A8]
	0x03CE598C MOV W19, W1
	0x03CE5990 MOV X20, X0
	0x03CE5994 CBNZ X2, 0x3CE59AC
	0x03CE5998 ADRP X0, 0xFFFFFFFFFCE2A000
	0x03CE599C ADD X0, X0, 0xD55
	0x03CE59A0 BL 0x1C16CB8
	0x03CE59A4 MOV X2, X0
	0x03CE59A8 STR X0, [X21 + 0x5A8]
	0x03CE59AC MOV X0, X20
	0x03CE59B0 MOV W1, W19
	0x03CE59B4 LDP X20, X19, [X31 + 0x10]
	0x03CE59B8 LDP X30, X21, [X31], #0x20
	0x03CE59BC BR X2
	0x03CE59C0 STP X30, X21, [X31 - 0x20]!
	0x03CE59C4 STP X20, X19, [X31 + 0x10]
	0x03CE59C8 ADRP X21, 0x702000
	0x03CE59CC LDR X2, [X21 + 0x5B0]
	0x03CE59D0 MOV W19, W1
	0x03CE59D4 MOV X20, X0
	0x03CE59D8 CBNZ X2, 0x3CE59F0
	0x03CE59DC ADRP X0, 0xFFFFFFFFFCE10000
	0x03CE59E0 ADD X0, X0, 0xB4F
	0x03CE59E4 BL 0x1C16CB8
	0x03CE59E8 MOV X2, X0
	0x03CE59EC STR X0, [X21 + 0x5B0]
	0x03CE59F0 MOV X0, X20
	0x03CE59F4 MOV W1, W19

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x703000
	009 Move X20, 0x47E000
	010 Move X23, 0x469000
	011 Move X22, 0x411000
	012 Move X21, 0x47E000
	013 Move X19, 0x47E000
	014 Move W8, [X24+1259]
	015 Move X20, [X20+1408]
	016 Move X23, [X23+2696]
	017 Move X22, [X22+2480]
	018 Move X21, [X21+1552]
	019 Move X19, [X19+1560]
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Move X0, 0x47E000
	025 Move X0, [X0+1408]
	026 Call 0x1C17CF4
	027 Move X0, 0x47E000
	028 Move X0, [X0+1560]
	029 Call 0x1C17CF4
	030 Move X0, 0x47E000
	031 Move X0, [X0+1552]
	032 Call 0x1C17CF4
	033 Move X0, 0x469000
	034 Move X0, [X0+2696]
	035 Call 0x1C17CF4
	036 Move X0, 0x411000
	037 Move X0, [X0+2480]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+1259], W8
	041 Move X8, [X20]
	042 Move W1, 4
	043 Move X8, [X8+184]
	044 Move [X8], X31
	045 Move X0, [X23]
	046 Call 0x1C17D6C
	047 Move X8, [X20]
	048 Move W1, 4
	049 Move X8, [X8+184]
	050 Move [X8+8], X0
	051 Move X0, [X23]
	052 Call 0x1C17D6C
	053 Move X8, [X20]
	054 Move W1, 4
	055 Move X8, [X8+184]
	056 Move [X8+16], X0
	057 Move X0, [X22]
	058 Call 0x1C17D6C
	059 Move X8, [X20]
	060 Move W1, 4
	061 Move X8, [X8+184]
	062 Move [X8+24], X0
	063 Move X0, [X22]
	064 Call 0x1C17D6C
	065 Move X8, [X20]
	066 Move X8, [X8+184]
	067 Move [X8+32], X0
	068 Move X0, [X21]
	069 Call 0x1C17F10
	070 Move X1, [X19]
	071 Move X19, X0
	072 Call List`1<Object>..ctor, X0
	073 Move X8, [X20]
	074 Move X22, [X31+32]
	075 Move X21, [X31+40]
	076 Move X24, [X31+16]
	077 Move X23, [X31+24]
	078 Move X8, [X8+184]
	079 Move [X8+40], X19
	080 Move X20, [X31+48]
	081 Move X19, [X31+56]
	082 Move X30, [X31+64]
	083 Return 

Method: System.Void <set_sprite>g__ResetAlphaHitThresholdIfNeeded|11_0()

Disassembly:
	0x03CE0D14 CBNZ W8, 0x3CE0D2C
	0x03CE0D18 ADRP X0, 0x413000
	0x03CE0D1C LDR X0, [X0 + 0x5A8]
	0x03CE0D20 BL 0x1C16CF4
	0x03CE0D24 MOVZ W8, 0x1
	0x03CE0D28 STRB W8, [X21 + 0x5D7]
	0x03CE0D2C ADRP X22, 0x413000
	0x03CE0D30 LDR X22, [X22 + 0x5A8]
	0x03CE0D34 LDR X0, [X22]
	0x03CE0D38 LDR W8, [X0 + 0xE0]
	0x03CE0D3C CBNZ W8, 0x3CE0D44
	0x03CE0D40 BL 0x1C16DFC
	0x03CE0D44 FCVT S10, S12
	0x03CE0D48 ADD X0, X31, 0x68
	0x03CE0D4C MOV V0.16B, V10.16B
	0x03CE0D50 BL 0x3EB1C00
	0x03CE0D54 FCMP S12, 0x0
	0x03CE0D58 B.GE 0x3CE0D74
	0x03CE0D5C FMOV D1, -0.5
	0x03CE0D60 FCMP D0, D1
	0x03CE0D64 B.NE 0x3CE0D9C
	0x03CE0D68 LDR V0, [X31 + 0x68]
	0x03CE0D6C FMOV D1, -1
	0x03CE0D70 B 0x3CE0D88
	0x03CE0D74 FMOV D1, 0.5
	0x03CE0D78 FCMP D0, D1
	0x03CE0D7C B.NE 0x3CE0DA8
	0x03CE0D80 LDR V0, [X31 + 0x68]
	0x03CE0D84 FMOV D1, 1
	0x03CE0D88 FCVTZS X8, D0
	0x03CE0D8C FADD D1, D0, D1
	0x03CE0D90 ANDS X31, X8, 0x1
	0x03CE0D94 FCSEL D11, D0, D1, EQ
	0x03CE0D98 B 0x3CE0DB0
	0x03CE0D9C FADD D0, D10, D1
	0x03CE0DA0 FRINTP D11, D0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x708000
	005 Move W8, [X20+1260]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x414000
	012 Move X0, [X0+2600]
	013 Call 0x1C17CF4
	014 Move X0, 0x483000
	015 Move X0, [X0+1400]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1260], W8
	019 Move X0, X19
	020 Call Image.<set_sprite>g__SpriteSupportsAlphaHitTest|11_1, X0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {41}
	025 Move V0, [X19+256]
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 Move X8, 0x414000
	028 Move X8, [X8+2600]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X8, 0x483000
	035 Move X8, [X8+1400]
	036 Move X1, X19
	037 Move X2, X31
	038 Move X0, [X8]
	039 Call Debug.LogWarning, X0, X1
	040 Move [X19+256], W31
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Return 

Method: System.Boolean <set_sprite>g__SpriteSupportsAlphaHitTest|11_1()

Disassembly:
	0x03CE59F8 LDP X20, X19, [X31 + 0x10]
	0x03CE59FC LDP X30, X21, [X31], #0x20
	0x03CE5A00 BR X2
	0x03CE5A04 STP X30, X21, [X31 - 0x20]!
	0x03CE5A08 STP X20, X19, [X31 + 0x10]
	0x03CE5A0C ADRP X21, 0x702000
	0x03CE5A10 LDR X2, [X21 + 0x5B8]
	0x03CE5A14 MOV W19, W1
	0x03CE5A18 MOV X20, X0
	0x03CE5A1C CBNZ X2, 0x3CE5A34
	0x03CE5A20 ADRP X0, 0xFFFFFFFFFCE30000
	0x03CE5A24 ADD X0, X0, 0x341
	0x03CE5A28 BL 0x1C16CB8
	0x03CE5A2C MOV X2, X0
	0x03CE5A30 STR X0, [X21 + 0x5B8]
	0x03CE5A34 MOV X0, X20
	0x03CE5A38 MOV W1, W19
	0x03CE5A3C LDP X20, X19, [X31 + 0x10]
	0x03CE5A40 LDP X30, X21, [X31], #0x20
	0x03CE5A44 BR X2
	0x03CE5A48 STP X30, X21, [X31 - 0x20]!
	0x03CE5A4C STP X20, X19, [X31 + 0x10]
	0x03CE5A50 ADRP X21, 0x702000
	0x03CE5A54 LDR X2, [X21 + 0x5C0]
	0x03CE5A58 MOV W19, W1
	0x03CE5A5C MOV X20, X0
	0x03CE5A60 CBNZ X2, 0x3CE5A78
	0x03CE5A64 ADRP X0, 0xFFFFFFFFFCE16000
	0x03CE5A68 ADD X0, X0, 0xB83
	0x03CE5A6C BL 0x1C16CB8
	0x03CE5A70 MOV X2, X0
	0x03CE5A74 STR X0, [X21 + 0x5C0]
	0x03CE5A78 MOV X0, X20
	0x03CE5A7C MOV W1, W19
	0x03CE5A80 LDP X20, X19, [X31 + 0x10]
	0x03CE5A84 LDP X30, X21, [X31], #0x20
	0x03CE5A88 BR X2
	0x03CE5A8C STP X30, X21, [X31 - 0x20]!
	0x03CE5A90 STP X20, X19, [X31 + 0x10]
	0x03CE5A94 ADRP X21, 0x702000
	0x03CE5A98 LDR X2, [X21 + 0x5C8]
	0x03CE5A9C MOV W19, W1
	0x03CE5AA0 MOV X20, X0
	0x03CE5AA4 CBNZ X2, 0x3CE5ABC
	0x03CE5AA8 ADRP X0, 0xFFFFFFFFFCE18000
	0x03CE5AAC ADD X0, X0, 0xC2F
	0x03CE5AB0 BL 0x1C16CB8
	0x03CE5AB4 MOV X2, X0
	0x03CE5AB8 STR X0, [X21 + 0x5C8]
	0x03CE5ABC MOV X0, X20
	0x03CE5AC0 MOV W1, W19
	0x03CE5AC4 LDP X20, X19, [X31 + 0x10]
	0x03CE5AC8 LDP X30, X21, [X31], #0x20
	0x03CE5ACC BR X2
	0x03CE5AD0 STP X30, X21, [X31 - 0x20]!
	0x03CE5AD4 STP X20, X19, [X31 + 0x10]
	0x03CE5AD8 ADRP X21, 0x702000
	0x03CE5ADC LDR X2, [X21 + 0x5D0]
	0x03CE5AE0 MOV W19, W1
	0x03CE5AE4 MOV X20, X0
	0x03CE5AE8 CBNZ X2, 0x3CE5B00
	0x03CE5AEC ADRP X0, 0xFFFFFFFFFCE10000
	0x03CE5AF0 ADD X0, X0, 0xBAD
	0x03CE5AF4 BL 0x1C16CB8
	0x03CE5AF8 MOV X2, X0
	0x03CE5AFC STR X0, [X21 + 0x5D0]
	0x03CE5B00 MOV X0, X20
	0x03CE5B04 MOV W1, W19
	0x03CE5B08 LDP X20, X19, [X31 + 0x10]
	0x03CE5B0C LDP X30, X21, [X31], #0x20
	0x03CE5B10 BR X2
	0x03CE5B14 STP X30, X21, [X31 - 0x20]!
	0x03CE5B18 STP X20, X19, [X31 + 0x10]
	0x03CE5B1C ADRP X21, 0x702000
	0x03CE5B20 LDR X2, [X21 + 0x5D8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x703000
	006 Move X21, 0x40F000
	007 Move W8, [X20+1261]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x46F000
	015 Move X0, [X0+144]
	016 Call 0x1C17CF4
	017 Move X0, 0x40F000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1261], W8
	022 Move X0, [X21]
	023 Move X20, [X19+216]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {81}
	036 Move X0, [X19+216]
	037 Compare X0, 0
	038 JumpIfEqual {102}
	039 Move X1, X31
	040 Call Sprite.get_texture, X0
	041 Move X8, [X21]
	042 Move X20, X0
	043 Move W9, [X8+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {48}
	046 Move X0, X8
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Inequality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {81}
	056 Move X0, [X19+216]
	057 Compare X0, 0
	058 JumpIfEqual {102}
	059 Move X1, X31
	060 Call Sprite.get_texture, X0
	061 Compare X0, 0
	062 JumpIfEqual {102}
	063 Move X1, X31
	064 Call Texture2D.get_format, X0
	065 Move X8, 0x46F000
	066 Move X8, [X8+144]
	067 Move W20, W0
	068 Move X8, [X8]
	069 Move W9, [X8+224]
	070 Compare W9, 0
	071 JumpIfNotEqual {74}
	072 Move X0, X8
	073 Call 0x1C17DFC
	074 Move W0, W20
	075 Move X1, X31
	076 Call GraphicsFormatUtility.IsCrunchFormat, X0
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {87}
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move W0, W31
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 Return X0
	087 Move X0, [X19+216]
	088 Compare X0, 0
	089 JumpIfEqual {102}
	090 Move X1, X31
	091 Call Sprite.get_texture, X0
	092 Compare X0, 0
	093 JumpIfEqual {102}
	094 Move X8, [X0]
	095 Move X20, [X31+16]
	096 Move X19, [X31+24]
	097 Move X2, [X8+488]
	098 Move X1, [X8+496]
	099 Move X30, [X31+32]
	100 Move X21, [X31+40]
	101 CallNoReturn X2
	102 Call 0x1C17F20

