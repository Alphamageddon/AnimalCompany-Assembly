Type: UnityEngine.UI.Slider

Method: UnityEngine.RectTransform get_fillRect()

Disassembly:
	0x03E43510 MOV V0.16B, V8.16B
	0x03E43514 LDR X1, [X8]

ISIL:
	001 Move X0, [X0+256]
	002 Return X0

Method: System.Void set_fillRect(UnityEngine.RectTransform value)

Disassembly:
	0x03E43518 LDR V8, [X31], #0x30
	0x03E4351C B 0x272A704
	0x03E43520 LDP X20, X19, [X31 + 0x20]
	0x03E43524 LDP X30, X21, [X31 + 0x10]
	0x03E43528 LDR V8, [X31], #0x30
	0x03E4352C RET
	0x03E43530 BL 0x1C16F20
	0x03E43534 STP X30, X19, [X31 - 0x10]!
	0x03E43538 MOV X1, X31
	0x03E4353C MOV X19, X0
	0x03E43540 BL 0x3E5AD90
	0x03E43544 LDR X8, [X19]
	0x03E43548 MOV X0, X19
	0x03E4354C LDP X9, X1, [X8 + 0x1C8]
	0x03E43550 BLR X9
	0x03E43554 TBZ X0, 0x0, 0x3E43564
	0x03E43558 MOV X0, X19
	0x03E4355C LDP X30, X19, [X31], #0x10
	0x03E43560 B 0x3E42838
	0x03E43564 LDP X30, X19, [X31], #0x10
	0x03E43568 RET
	0x03E4356C SUB X31, X31, 0x50
	0x03E43570 STP D9, D8, [X31 + 0x10]
	0x03E43574 STP X30, X23, [X31 + 0x20]
	0x03E43578 STP X22, X21, [X31 + 0x30]
	0x03E4357C STP X20, X19, [X31 + 0x40]
	0x03E43580 ADRP X20, 0x5A5000
	0x03E43584 LDRB W8, [X20 + 0x7E2]
	0x03E43588 MOV X21, X2
	0x03E4358C MOV X22, X1
	0x03E43590 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5A6000
	007 Move X21, 0x329000
	008 Move W8, [X22+2007]
	009 Move X21, [X21+824]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x329000
	017 Move X0, [X0+824]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2007], W8
	021 Move X2, [X21]
	022 Add X0, X19, 256
	023 Move X1, X20
	024 Call 0x2255190, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {39}
	029 Move X0, X19
	030 Call Slider.UpdateCachedReferences, X0
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Call Slider.UpdateVisuals, X0
	038 Return 
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: UnityEngine.RectTransform get_handleRect()

Disassembly:
	0x03E43B1C FMUL S1, S1, S3
	0x03E43B20 LDR X8, [X19]

ISIL:
	001 Move X0, [X0+264]
	002 Return X0

Method: System.Void set_handleRect(UnityEngine.RectTransform value)

Disassembly:
	0x03E43B24 FNEG S2, S1
	0x03E43B28 CMP W20, 0x1
	0x03E43B2C FCSEL S1, S2, S1, EQ
	0x03E43B30 B 0x3E43BD8
	0x03E43B34 LDR W8, [X19 + 0x110]
	0x03E43B38 CMP W8, 0x2
	0x03E43B3C B.CC 0x3E43BF8
	0x03E43B40 LDR X8, [X19]
	0x03E43B44 LDR X9, [X8 + 0x318]
	0x03E43B48 LDR X1, [X8 + 0x320]
	0x03E43B4C MOV X0, X19
	0x03E43B50 BLR X9
	0x03E43B54 ADRP X8, 0x2B0000
	0x03E43B58 LDR X8, [X8 + 0x598]
	0x03E43B5C MOV X21, X0
	0x03E43B60 LDR X8, [X8]
	0x03E43B64 LDR W9, [X8 + 0xE0]
	0x03E43B68 CBNZ W9, 0x3E43B74
	0x03E43B6C MOV X0, X8
	0x03E43B70 BL 0x1C16DFC
	0x03E43B74 MOV X0, X21
	0x03E43B78 MOV X1, X31
	0x03E43B7C MOV X2, X31
	0x03E43B80 BL 0x3C3883C
	0x03E43B84 TBZ X0, 0x0, 0x3E43BF8
	0x03E43B88 LDR X8, [X19]
	0x03E43B8C LDR W9, [X19 + 0x110]
	0x03E43B90 MOV X0, X19
	0x03E43B94 LDR X10, [X8 + 0x418]
	0x03E43B98 LDR X1, [X8 + 0x420]
	0x03E43B9C AND W20, W9, 0xFFFFFFFD

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5A6000
	007 Move X21, 0x329000
	008 Move W8, [X22+2008]
	009 Move X21, [X21+824]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x329000
	017 Move X0, [X0+824]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2008], W8
	021 Move X2, [X21]
	022 Add X0, X19, 264
	023 Move X1, X20
	024 Call 0x2255190, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {39}
	029 Move X0, X19
	030 Call Slider.UpdateCachedReferences, X0
	031 Move X0, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X22, [X31+16]
	035 Move X21, [X31+24]
	036 Move X30, [X31+48]
	037 Call Slider.UpdateVisuals, X0
	038 Return 
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X22, [X31+16]
	042 Move X21, [X31+24]
	043 Move X30, [X31+48]
	044 Return 

Method: UnityEngine.UI.Slider/Direction get_direction()

Disassembly:
	0x03E43BA0 BLR X10
	0x03E43BA4 LDRB W8, [X19 + 0x11C]

ISIL:
	001 Move W0, [X0+272]
	002 Return X0

Method: System.Void set_direction(UnityEngine.UI.Slider/Direction value)

Disassembly:
	0x03E43BA8 FMOV S1, 1
	0x03E43BAC CBNZ W8, 0x3E43BC8
	0x03E43BB0 LDR V1, [X19 + 0x118]
	0x03E43BB4 LDR V2, [X19 + 0x114]
	0x03E43BB8 ADRP X8, 0xFFFFFFFFFCCA7000
	0x03E43BBC LDR V3, [X8 + 0xBC]
	0x03E43BC0 FSUB S1, S1, S2
	0x03E43BC4 FMUL S1, S1, S3
	0x03E43BC8 LDR X8, [X19]
	0x03E43BCC FNEG S2, S1
	0x03E43BD0 CMP W20, 0x1
	0x03E43BD4 FCSEL S1, S1, S2, EQ
	0x03E43BD8 LDR X3, [X8 + 0x488]
	0x03E43BDC LDR X2, [X8 + 0x490]
	0x03E43BE0 MOV X0, X19
	0x03E43BE4 LDP X20, X19, [X31 + 0x10]
	0x03E43BE8 FADD S0, S0, S1
	0x03E43BEC MOVZ W1, 0x1
	0x03E43BF0 LDP X30, X21, [X31], #0x20
	0x03E43BF4 BR X3
	0x03E43BF8 MOV X0, X19
	0x03E43BFC MOV X1, X20
	0x03E43C00 LDP X20, X19, [X31 + 0x10]
	0x03E43C04 LDP X30, X21, [X31], #0x20
	0x03E43C08 B 0x3E3C95C
	0x03E43C0C LDP X20, X19, [X31 + 0x10]
	0x03E43C10 LDP X30, X21, [X31], #0x20
	0x03E43C14 RET
	0x03E43C18 BL 0x1C16F20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5A6000
	007 Move X21, 0x329000
	008 Move W8, [X22+2009]
	009 Move X21, [X21+1016]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x329000
	017 Move X0, [X0+1016]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2009], W8
	021 Move X2, [X21]
	022 Add X0, X19, 272
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Call Slider.UpdateVisuals, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Single get_minValue()

Disassembly:
	0x03E43C1C LDR W8, [X0 + 0x28]
	0x03E43C20 CMP W8, 0x3

ISIL:
	001 Move V0, [X0+276]
	002 Return V0

Method: System.Void set_minValue(System.Single value)

Disassembly:
	0x03E43C24 B.NE 0x3E43C34
	0x03E43C28 LDR W8, [X0 + 0x110]
	0x03E43C2C CMP W8, 0x2
	0x03E43C30 B.CC 0x3E43C38
	0x03E43C34 B 0x3E3CA0C
	0x03E43C38 MOV X0, X31
	0x03E43C3C RET
	0x03E43C40 LDR W8, [X0 + 0x28]
	0x03E43C44 CMP W8, 0x3
	0x03E43C48 B.NE 0x3E43C58
	0x03E43C4C LDR W8, [X0 + 0x110]
	0x03E43C50 CMP W8, 0x2
	0x03E43C54 B.CC 0x3E43C5C
	0x03E43C58 B 0x3E3CB08
	0x03E43C5C MOV X0, X31
	0x03E43C60 RET
	0x03E43C64 LDR W8, [X0 + 0x28]
	0x03E43C68 CMP W8, 0x3
	0x03E43C6C B.NE 0x3E43C7C
	0x03E43C70 LDR W8, [X0 + 0x110]
	0x03E43C74 CMP W8, 0x1
	0x03E43C78 B.HI 0x3E43C80
	0x03E43C7C B 0x3E3CC04
	0x03E43C80 MOV X0, X31
	0x03E43C84 RET
	0x03E43C88 LDR W8, [X0 + 0x28]
	0x03E43C8C CMP W8, 0x3
	0x03E43C90 B.NE 0x3E43CA0
	0x03E43C94 LDR W8, [X0 + 0x110]
	0x03E43C98 CMP W8, 0x1
	0x03E43C9C B.HI 0x3E43CA4
	0x03E43CA0 B 0x3E3CD00
	0x03E43CA4 MOV X0, X31
	0x03E43CA8 RET
	0x03E43CAC STR X30, [X31 - 0x10]!
	0x03E43CB0 CBZ X1, 0x3E43CC0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5A6000
	007 Move X20, 0x320000
	008 Move W8, [X21+2010]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x320000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2010], W8
	021 Move X1, [X20]
	022 Add X0, X19, 276
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {44}
	029 Move X8, [X19]
	030 Move V0, [X19+288]
	031 Move W1, 1
	032 Move X0, X19
	033 Move X9, [X8+1160]
	034 Move X2, [X8+1168]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Call Slider.UpdateVisuals, X0
	043 Return 
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 Move V8, [X31+48]
	049 Return 

Method: System.Single get_maxValue()

Disassembly:
	0x03E43CB4 STRB W31, [X1 + 0x144]
	0x03E43CB8 LDR X30, [X31], #0x10

ISIL:
	001 Move V0, [X0+280]
	002 Return V0

Method: System.Void set_maxValue(System.Single value)

Disassembly:
	0x03E43CBC RET
	0x03E43CC0 BL 0x1C16F20
	0x03E43CC4 STR X30, [X31 - 0x30]!
	0x03E43CC8 STP X22, X21, [X31 + 0x10]
	0x03E43CCC STP X20, X19, [X31 + 0x20]
	0x03E43CD0 ADRP X22, 0x5A5000
	0x03E43CD4 LDRB W8, [X22 + 0x7E5]
	0x03E43CD8 MOV W20, W2
	0x03E43CDC MOV W21, W1
	0x03E43CE0 MOV X19, X0
	0x03E43CE4 TBNZ X8, 0x0, 0x3E43D08
	0x03E43CE8 ADRP X0, 0x306000
	0x03E43CEC LDR X0, [X0 + 0x6B8]
	0x03E43CF0 BL 0x1C16CF4
	0x03E43CF4 ADRP X0, 0x2D7000
	0x03E43CF8 LDR X0, [X0 + 0xC70]
	0x03E43CFC BL 0x1C16CF4
	0x03E43D00 MOVZ W8, 0x1
	0x03E43D04 STRB W8, [X22 + 0x7E5]
	0x03E43D08 LDR W22, [X19 + 0x110]
	0x03E43D0C MOV X0, X19
	0x03E43D10 MOV W1, W21
	0x03E43D14 BL 0x3E42BA8
	0x03E43D18 TBZ X20, 0x0, 0x3E43E10
	0x03E43D1C LDR W8, [X19 + 0x110]
	0x03E43D20 CMP W22, 0x1
	0x03E43D24 CSET W9, HI
	0x03E43D28 AND W21, W22, 0xFFFFFFFD
	0x03E43D2C CMP W8, 0x2
	0x03E43D30 CSET W10, CC
	0x03E43D34 EOR W9, W9, W10, 0x0
	0x03E43D38 TBNZ X9, 0x0, 0x3E43DA4
	0x03E43D3C MOV X0, X19
	0x03E43D40 MOV X1, X31
	0x03E43D44 BL 0x3C32E90
	0x03E43D48 ADRP X8, 0x306000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5A6000
	007 Move X20, 0x320000
	008 Move W8, [X21+2011]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x320000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2011], W8
	021 Move X1, [X20]
	022 Add X0, X19, 280
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {44}
	029 Move X8, [X19]
	030 Move V0, [X19+288]
	031 Move W1, 1
	032 Move X0, X19
	033 Move X9, [X8+1160]
	034 Move X2, [X8+1168]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Call Slider.UpdateVisuals, X0
	043 Return 
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X30, [X31+16]
	047 Move X21, [X31+24]
	048 Move V8, [X31+48]
	049 Return 

Method: System.Boolean get_wholeNumbers()

Disassembly:
	0x03E43D4C LDR X8, [X8 + 0x6B8]
	0x03E43D50 MOV X20, X0

ISIL:
	001 Move W0, [X0+284]
	002 Return X0

Method: System.Void set_wholeNumbers(System.Boolean value)

Disassembly:
	0x03E43D54 LDR X8, [X8]
	0x03E43D58 LDR W9, [X8 + 0xE0]
	0x03E43D5C CBZ W9, 0x3E43D80
	0x03E43D60 CBZ X20, 0x3E43D8C
	0x03E43D64 ADRP X8, 0x2D7000
	0x03E43D68 LDR X8, [X8 + 0xC70]
	0x03E43D6C LDR X9, [X20]
	0x03E43D70 LDR X8, [X8]
	0x03E43D74 CMP X9, X8
	0x03E43D78 CSEL X0, X20, X31, EQ
	0x03E43D7C B 0x3E43D90
	0x03E43D80 MOV X0, X8
	0x03E43D84 BL 0x1C16DFC
	0x03E43D88 CBNZ X20, 0x3E43D64
	0x03E43D8C MOV X0, X31
	0x03E43D90 MOVZ W1, 0x1
	0x03E43D94 MOVZ W2, 0x1
	0x03E43D98 MOV X3, X31
	0x03E43D9C BL 0x3E23F04
	0x03E43DA0 LDR W8, [X19 + 0x110]
	0x03E43DA4 CMP W21, 0x1
	0x03E43DA8 AND W8, W8, 0xFFFFFFFD
	0x03E43DAC CSET W9, EQ
	0x03E43DB0 CMP W8, 0x1
	0x03E43DB4 CSET W8, EQ
	0x03E43DB8 CMP W9, W8
	0x03E43DBC B.EQ 0x3E43E10
	0x03E43DC0 MOV X0, X19
	0x03E43DC4 MOV X1, X31
	0x03E43DC8 BL 0x3C32E90
	0x03E43DCC ADRP X8, 0x306000
	0x03E43DD0 LDR X8, [X8 + 0x6B8]
	0x03E43DD4 MOV X20, X0
	0x03E43DD8 LDR X0, [X8]
	0x03E43DDC LDR W8, [X19 + 0x110]
	0x03E43DE0 LDR W9, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5A6000
	007 Move X21, 0x320000
	008 Move W8, [X22+2012]
	009 Move X21, [X21+1424]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x320000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2012], W8
	021 Move X2, [X21]
	022 Add X0, X19, 284
	023 And W1, W20, 1
	024 Call 0x22551E0, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {44}
	029 Move X8, [X19]
	030 Move V0, [X19+288]
	031 Move W1, 1
	032 Move X0, X19
	033 Move X9, [X8+1160]
	034 Move X2, [X8+1168]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, X19
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Call Slider.UpdateVisuals, X0
	043 Return 
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X30, [X31+48]
	049 Return 

Method: System.Single get_value()

Disassembly:
	0x03E43DE4 CMP W8, 0x1
	0x03E43DE8 CSET W19, HI
	0x03E43DEC CBZ W9, 0x3E43E20
	0x03E43DF0 CBZ X20, 0x3E43E28
	0x03E43DF4 ADRP X8, 0x2D7000
	0x03E43DF8 LDR X8, [X8 + 0xC70]
	0x03E43DFC LDR X9, [X20]
	0x03E43E00 LDR X8, [X8]
	0x03E43E04 CMP X9, X8
	0x03E43E08 CSEL X0, X20, X31, EQ
	0x03E43E0C B 0x3E43E2C
	0x03E43E10 LDP X20, X19, [X31 + 0x20]
	0x03E43E14 LDP X22, X21, [X31 + 0x10]
	0x03E43E18 LDR X30, [X31], #0x30
	0x03E43E1C RET
	0x03E43E20 BL 0x1C16DFC
	0x03E43E24 CBNZ X20, 0x3E43DF4
	0x03E43E28 MOV X0, X31
	0x03E43E2C MOV W1, W19
	0x03E43E30 LDP X20, X19, [X31 + 0x20]
	0x03E43E34 LDP X22, X21, [X31 + 0x10]
	0x03E43E38 MOVZ W2, 0x1
	0x03E43E3C MOVZ W3, 0x1
	0x03E43E40 MOV X4, X31
	0x03E43E44 LDR X30, [X31], #0x30
	0x03E43E48 B 0x3E23C44
	0x03E43E4C MOV X1, X31
	0x03E43E50 B 0x3C32E90
	0x03E43E54 LDR X0, [X0]
	0x03E43E58 RET
	0x03E43E5C STR X1, [X0]
	0x03E43E60 RET
	0x03E43E64 LDR X0, [X0 + 0x8]
	0x03E43E68 RET
	0x03E43E6C STR X1, [X0 + 0x8]
	0x03E43E70 RET
	0x03E43E74 LDR X0, [X0 + 0x10]
	0x03E43E78 RET
	0x03E43E7C STR X1, [X0 + 0x10]
	0x03E43E80 RET

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move W8, [X0+284]
	005 Move V8, [X0+288]
	006 Compare W8, 0
	007 JumpIfEqual {31}
	008 NotImplemented "Instruction FCVT not yet implemented."
	009 Add X0, X31, 8
	010 Call 0x3EB2C00
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Move D1, -0.5
	013 NotImplemented "Instruction FCMP not yet implemented."
	014 Move V0, [X31+8]
	015 Move S1, -1
	016 Move D1, 0.5
	017 NotImplemented "Instruction FCMP not yet implemented."
	018 Move V0, [X31+8]
	019 Move S1, 1
	020 NotImplemented "Instruction FCVTZS not yet implemented."
	021 NotImplemented "Instruction INVALID not yet implemented."
	022 Add S1, S0, S1
	023 And X31, X8, 1
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 Move S0, -0.5
	026 Add S0, S8, S0
	027 NotImplemented "Instruction FRINTP not yet implemented."
	028 Move S0, 0.5
	029 Add S0, S8, S0
	030 NotImplemented "Instruction FRINTM not yet implemented."
	031 Move V0, V8
	032 Move X30, [X31+24]
	033 Move V8, [X31+16]
	034 Add X31, X31, 32
	035 Return V0

Method: System.Void set_value(System.Single value)

Disassembly:
	0x03E43E84 LDR X0, [X0 + 0x18]
	0x03E43E88 RET
	0x03E43E8C STR X1, [X0 + 0x18]
	0x03E43E90 RET
	0x03E43E94 STP X30, X23, [X31 - 0x30]!

ISIL:
	001 Move X8, [X0]
	002 Move W1, 1
	003 Move X3, [X8+1160]
	004 Move X2, [X8+1168]
	005 CallNoReturn X3

Method: System.Void SetValueWithoutNotify(System.Single input)

Disassembly:
	0x03E43E98 STP X22, X21, [X31 + 0x10]
	0x03E43E9C STP X20, X19, [X31 + 0x20]
	0x03E43EA0 ADRP X21, 0x5A5000
	0x03E43EA4 ADRP X23, 0x2B0000
	0x03E43EA8 LDRB W8, [X21 + 0x7E7]

ISIL:
	001 Move X8, [X0]
	002 Move W1, W31
	003 Move X3, [X8+1160]
	004 Move X2, [X8+1168]
	005 CallNoReturn X3

Method: System.Single get_normalizedValue()

Disassembly:
	0x03E43EAC LDR X23, [X23 + 0x598]
	0x03E43EB0 MOV X19, X1
	0x03E43EB4 MOV X20, X0
	0x03E43EB8 TBNZ X8, 0x0, 0x3E43ED0
	0x03E43EBC ADRP X0, 0x2B0000
	0x03E43EC0 LDR X0, [X0 + 0x598]
	0x03E43EC4 BL 0x1C16CF4
	0x03E43EC8 MOVZ W8, 0x1
	0x03E43ECC STRB W8, [X21 + 0x7E7]
	0x03E43ED0 LDR X0, [X23]
	0x03E43ED4 LDR X21, [X20]
	0x03E43ED8 LDR X22, [X19]
	0x03E43EDC LDR W8, [X0 + 0xE0]
	0x03E43EE0 CBNZ W8, 0x3E43EE8
	0x03E43EE4 BL 0x1C16DFC
	0x03E43EE8 MOV X0, X21
	0x03E43EEC MOV X1, X22
	0x03E43EF0 MOV X2, X31
	0x03E43EF4 BL 0x3C3883C
	0x03E43EF8 TBZ X0, 0x0, 0x3E43F88
	0x03E43EFC LDR X0, [X23]
	0x03E43F00 LDR X21, [X20 + 0x8]
	0x03E43F04 LDR X22, [X19 + 0x8]
	0x03E43F08 LDR W8, [X0 + 0xE0]
	0x03E43F0C CBNZ W8, 0x3E43F14
	0x03E43F10 BL 0x1C16DFC
	0x03E43F14 MOV X0, X21
	0x03E43F18 MOV X1, X22
	0x03E43F1C MOV X2, X31
	0x03E43F20 BL 0x3C3883C
	0x03E43F24 TBZ X0, 0x0, 0x3E43F88
	0x03E43F28 LDR X0, [X23]
	0x03E43F2C LDR X21, [X20 + 0x10]
	0x03E43F30 LDR X22, [X19 + 0x10]
	0x03E43F34 LDR W8, [X0 + 0xE0]
	0x03E43F38 CBNZ W8, 0x3E43F40
	0x03E43F3C BL 0x1C16DFC
	0x03E43F40 MOV X0, X21
	0x03E43F44 MOV X1, X22
	0x03E43F48 MOV X2, X31
	0x03E43F4C BL 0x3C3883C
	0x03E43F50 TBZ X0, 0x0, 0x3E43F88
	0x03E43F54 LDR X0, [X23]
	0x03E43F58 LDR X20, [X20 + 0x18]
	0x03E43F5C LDR X19, [X19 + 0x18]
	0x03E43F60 LDR W8, [X0 + 0xE0]
	0x03E43F64 CBNZ W8, 0x3E43F6C
	0x03E43F68 BL 0x1C16DFC
	0x03E43F6C MOV X0, X20
	0x03E43F70 MOV X1, X19
	0x03E43F74 LDP X20, X19, [X31 + 0x20]
	0x03E43F78 LDP X22, X21, [X31 + 0x10]
	0x03E43F7C MOV X2, X31
	0x03E43F80 LDP X30, X23, [X31], #0x30
	0x03E43F84 B 0x3C3883C
	0x03E43F88 LDP X20, X19, [X31 + 0x20]
	0x03E43F8C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x597000
	008 Move V8, [X0+276]
	009 Move W8, [X20+1450]
	010 Move V9, [X0+280]
	011 Move X19, X0
	012 Compare W8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, 0x2B8000
	015 Move X0, [X0+1208]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1450], W8
	019 Move X8, 0x2B8000
	020 Move X8, [X8+1208]
	021 Move X9, -53837824
	022 Move V0, [X9+576]
	023 NotImplemented "Instruction FABS not yet implemented."
	024 Move X8, [X8]
	025 NotImplemented "Instruction FABS not yet implemented."
	026 NotImplemented "Instruction FCMP not yet implemented."
	027 NotImplemented "Instruction FCSEL not yet implemented."
	028 Move X8, [X8+184]
	029 Multiply S0, S1, S0
	030 Move S1, 8
	031 Move V3, [X8]
	032 Multiply S1, S3, S1
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 NotImplemented "Instruction FABD not yet implemented."
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move S8, W31
	038 Move X8, [X19]
	039 Move V9, [X19+276]
	040 Move V10, [X19+280]
	041 Move X0, X19
	042 Move X9, [X8+1048]
	043 Move X1, [X8+1056]
	044 NotImplemented "Instruction BLR not yet implemented."
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Subtract S0, S0, S9
	047 Subtract S1, S10, S9
	048 NotImplemented "Instruction FDIV not yet implemented."
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 Move S1, 1
	051 NotImplemented "Instruction FMIN not yet implemented."
	052 Move V0, V8
	053 Move X20, [X31+32]
	054 Move X19, [X31+40]
	055 Move X30, [X31+24]
	056 Move D9, [X31+8]
	057 Move D8, [X31+16]
	058 Move V10, [X31+48]
	059 Return V0

Method: System.Void set_normalizedValue(System.Single value)

Disassembly:
	0x03E43F90 MOV W0, W31
	0x03E43F94 LDP X30, X23, [X31], #0x30
	0x03E43F98 RET
	0x03E43F9C MOV X0, X31
	0x03E43FA0 RET
	0x03E43FA4 STP X30, X25, [X31 - 0x40]!
	0x03E43FA8 STP X24, X23, [X31 + 0x10]
	0x03E43FAC STP X22, X21, [X31 + 0x20]
	0x03E43FB0 STP X20, X19, [X31 + 0x30]
	0x03E43FB4 ADRP X24, 0x5A5000
	0x03E43FB8 ADRP X25, 0x315000
	0x03E43FBC LDRB W8, [X24 + 0x7E8]
	0x03E43FC0 LDR X25, [X25 + 0x738]
	0x03E43FC4 MOV W19, W4

ISIL:
	001 Move X8, [X0]
	002 Move V1, [X0+276]
	003 Move V2, [X0+280]
	004 Move S3, 1
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 NotImplemented "Instruction FMIN not yet implemented."
	007 Move S3, W31
	008 Move X2, [X8+1064]
	009 Move X1, [X8+1072]
	010 NotImplemented "Instruction FCSEL not yet implemented."
	011 Subtract S2, S2, S1
	012 Multiply S0, S0, S2
	013 Add S0, S1, S0
	014 CallNoReturn X2

Method: UnityEngine.UI.Slider/SliderEvent get_onValueChanged()

Disassembly:
	0x03E43FC8 MOV W20, W3
	0x03E43FCC MOV W21, W2

ISIL:
	001 Move X0, [X0+296]
	002 Return X0

Method: System.Void set_onValueChanged(UnityEngine.UI.Slider/SliderEvent value)

Disassembly:
	0x03E43FD0 MOV W22, W1
	0x03E43FD4 MOV X23, X0

ISIL:
	001 Move [X0+296], X1
	002 Return 

Method: System.Single get_stepSize()

Disassembly:
	0x03E43FD8 TBNZ X8, 0x0, 0x3E43FF0
	0x03E43FDC ADRP X0, 0x315000
	0x03E43FE0 LDR X0, [X0 + 0x738]
	0x03E43FE4 BL 0x1C16CF4
	0x03E43FE8 MOVZ W8, 0x1
	0x03E43FEC STRB W8, [X24 + 0x7E8]
	0x03E43FF0 LDR X0, [X25]
	0x03E43FF4 LDR W8, [X0 + 0xE0]
	0x03E43FF8 CBNZ W8, 0x3E44000
	0x03E43FFC BL 0x1C16DFC
	0x03E44000 MOV X0, X23

ISIL:
	001 Move W8, [X0+284]
	002 Move S0, 1
	003 Compare W8, 0
	004 JumpIfEqual {6}
	005 Return V0
	006 Move V0, [X0+280]
	007 Move V1, [X0+276]
	008 Move X8, -53837824
	009 Move V2, [X8+188]
	010 Subtract S0, S0, S1
	011 Multiply S0, S0, S2
	012 Return V0

Method: System.Void .ctor()

Disassembly:
	0x03E44004 MOV W1, W22
	0x03E44008 MOV W2, W21
	0x03E4400C MOV W3, W20
	0x03E44010 MOV W4, W19
	0x03E44014 LDP X20, X19, [X31 + 0x30]
	0x03E44018 LDP X22, X21, [X31 + 0x20]
	0x03E4401C LDP X24, X23, [X31 + 0x10]
	0x03E44020 MOVZ W5, 0xFF
	0x03E44024 MOVZ W6, 0xFF
	0x03E44028 LDP X30, X25, [X31], #0x40
	0x03E4402C B 0x3E44030
	0x03E44030 SUB X31, X31, 0x90
	0x03E44034 STP X29, X30, [X31 + 0x30]
	0x03E44038 STP X28, X27, [X31 + 0x40]
	0x03E4403C STP X26, X25, [X31 + 0x50]
	0x03E44040 STP X24, X23, [X31 + 0x60]
	0x03E44044 STP X22, X21, [X31 + 0x70]
	0x03E44048 STP X20, X19, [X31 + 0x80]
	0x03E4404C ADRP X26, 0x5A4000
	0x03E44050 LDRB W8, [X26 + 0x7EA]
	0x03E44054 MOV W21, W6
	0x03E44058 MOV W22, W5
	0x03E4405C MOV W20, W4
	0x03E44060 MOV W23, W3
	0x03E44064 MOV W24, W2
	0x03E44068 MOV W25, W1
	0x03E4406C MOV X19, X0
	0x03E44070 TBNZ X8, 0x0, 0x3E441D8
	0x03E44074 ADRP X0, 0x2AF000
	0x03E44078 LDR X0, [X0 + 0xB58]
	0x03E4407C BL 0x1C16CF4
	0x03E44080 ADRP X0, 0x327000
	0x03E44084 LDR X0, [X0 + 0x410]
	0x03E44088 BL 0x1C16CF4
	0x03E4408C ADRP X0, 0x327000
	0x03E44090 LDR X0, [X0 + 0x418]
	0x03E44094 BL 0x1C16CF4
	0x03E44098 ADRP X0, 0x2AF000
	0x03E4409C LDR X0, [X0 + 0x758]
	0x03E440A0 BL 0x1C16CF4
	0x03E440A4 ADRP X0, 0x327000
	0x03E440A8 LDR X0, [X0 + 0x420]
	0x03E440AC BL 0x1C16CF4
	0x03E440B0 ADRP X0, 0x327000
	0x03E440B4 LDR X0, [X0 + 0x428]
	0x03E440B8 BL 0x1C16CF4
	0x03E440BC ADRP X0, 0x327000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5A5000
	006 Move X20, 0x328000
	007 Move W8, [X21+2013]
	008 Move X20, [X20+1024]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x315000
	015 Move X0, [X0+2648]
	016 Call 0x1C17CF4
	017 Move X0, 0x328000
	018 Move X0, [X0+1024]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2013], W8
	022 Move W8, 0x3F800000
	023 Move [X19+280], W8
	024 Move X0, [X20]
	025 Move X21, 0x315000
	026 Move X21, [X21+2648]
	027 Call 0x1C17F10
	028 Move X20, X0
	029 Call SliderEvent..ctor, X0
	030 Move [X19+296], X20
	031 Move X20, 0x596000
	032 Move W8, [X20+1935]
	033 Compare W8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, 0x2B8000
	036 Move X0, [X0+3848]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+1935], W8
	040 Move X8, 0x2B8000
	041 Move X8, [X8+3848]
	042 Move X8, [X8]
	043 Move X8, [X8+184]
	044 Move V0, [X8]
	045 Move [X19+344], D0
	046 Move X0, [X21]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Call Selectable..ctor, X0
	057 Return 

Method: System.Void Rebuild(UnityEngine.UI.CanvasUpdate executing)

Disassembly:
	0x03E44108 LDR X0, [X0 + 0x440]

ISIL:
	001 Return 

Method: System.Void LayoutComplete()

Disassembly:
	0x03E4410C BL 0x1C16CF4

ISIL:
	001 Return 

Method: System.Void GraphicUpdateComplete()

Disassembly:
	0x03E44110 ADRP X0, 0x315000

ISIL:
	001 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03E44114 LDR X0, [X0 + 0x4B0]
	0x03E44118 BL 0x1C16CF4
	0x03E4411C ADRP X0, 0x327000
	0x03E44120 LDR X0, [X0 + 0x448]
	0x03E44124 BL 0x1C16CF4
	0x03E44128 ADRP X0, 0x313000
	0x03E4412C LDR X0, [X0 + 0x888]
	0x03E44130 BL 0x1C16CF4
	0x03E44134 ADRP X0, 0x315000
	0x03E44138 LDR X0, [X0 + 0x4C8]
	0x03E4413C BL 0x1C16CF4
	0x03E44140 ADRP X0, 0x313000
	0x03E44144 LDR X0, [X0 + 0x890]
	0x03E44148 BL 0x1C16CF4
	0x03E4414C ADRP X0, 0x327000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call Selectable.OnEnable, X0
	005 Move X0, X19
	006 Call Slider.UpdateCachedReferences, X0
	007 Move X8, [X19]
	008 Move V0, [X19+288]
	009 Move X0, X19
	010 Move W1, W31
	011 Move X9, [X8+1160]
	012 Move X2, [X8+1168]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X0, X19
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call Slider.UpdateVisuals, X0
	018 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03E44150 LDR X0, [X0 + 0x450]
	0x03E44154 BL 0x1C16CF4
	0x03E44158 ADRP X0, 0x315000
	0x03E4415C LDR X0, [X0 + 0x540]
	0x03E44160 BL 0x1C16CF4
	0x03E44164 ADRP X0, 0x327000
	0x03E44168 LDR X0, [X0 + 0x458]
	0x03E4416C BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Add X0, X0, 352
	005 Move X1, X31
	006 Call DrivenRectTransformTracker.Clear, X0
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call Selectable.OnDisable, X0
	011 Return 

Method: System.Void Update()

Disassembly:
	0x03E44170 ADRP X0, 0x2B6000
	0x03E44174 LDR X0, [X0 + 0xBC0]
	0x03E44178 BL 0x1C16CF4
	0x03E4417C ADRP X0, 0x327000
	0x03E44180 LDR X0, [X0 + 0x460]
	0x03E44184 BL 0x1C16CF4
	0x03E44188 ADRP X0, 0x327000
	0x03E4418C LDR X0, [X0 + 0x468]
	0x03E44190 BL 0x1C16CF4
	0x03E44194 ADRP X0, 0x327000
	0x03E44198 LDR X0, [X0 + 0x470]
	0x03E4419C BL 0x1C16CF4
	0x03E441A0 ADRP X0, 0x327000
	0x03E441A4 LDR X0, [X0 + 0x478]
	0x03E441A8 BL 0x1C16CF4
	0x03E441AC ADRP X0, 0x327000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+353]
	004 Compare W8, 0
	005 JumpIfEqual {19}
	006 Move X8, [X0]
	007 Move [X0+353], W31
	008 Move V0, [X0+288]
	009 Move W1, W31
	010 Move X9, [X8+1160]
	011 Move X2, [X8+1168]
	012 Move X19, X0
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X0, X19
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Call Slider.UpdateVisuals, X0
	018 Return 
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Return 

Method: System.Void OnDidApplyAnimationProperties()

Disassembly:
	0x03E441B0 LDR X0, [X0 + 0x480]
	0x03E441B4 BL 0x1C16CF4
	0x03E441B8 ADRP X0, 0x327000
	0x03E441BC LDR X0, [X0 + 0x488]
	0x03E441C0 BL 0x1C16CF4
	0x03E441C4 ADRP X0, 0x327000
	0x03E441C8 LDR X0, [X0 + 0x490]
	0x03E441CC BL 0x1C16CF4
	0x03E441D0 MOVZ W8, 0x1
	0x03E441D4 STRB W8, [X26 + 0x7EA]
	0x03E441D8 CMP W25, 0x0
	0x03E441DC B.GT 0x3E441E8
	0x03E441E0 CMP W20, 0xF
	0x03E441E4 B.EQ 0x3E444C4
	0x03E441E8 ADRP X29, 0x2AF000
	0x03E441EC LDR X29, [X29 + 0x598]
	0x03E441F0 LDR X0, [X29]
	0x03E441F4 LDR W8, [X0 + 0xE0]
	0x03E441F8 CBNZ W8, 0x3E44200
	0x03E441FC BL 0x1C16DFC
	0x03E44200 MOV X0, X19
	0x03E44204 MOV X1, X31
	0x03E44208 MOV X2, X31
	0x03E4420C BL 0x3C3883C
	0x03E44210 TBNZ X0, 0x0, 0x3E444C4
	0x03E44214 CBZ X19, 0x3E44984
	0x03E44218 ADRP X8, 0x315000
	0x03E4421C LDR X8, [X8 + 0x4C8]
	0x03E44220 MOV X0, X19
	0x03E44224 MOV X2, X31
	0x03E44228 LDR X1, [X8]
	0x03E4422C BL 0x3C14D4C
	0x03E44230 TBZ X0, 0x0, 0x3E443C4
	0x03E44234 ADRP X8, 0x315000
	0x03E44238 LDR X8, [X8 + 0x540]
	0x03E4423C MOV X0, X19
	0x03E44240 MOV X2, X31
	0x03E44244 LDR X1, [X8]
	0x03E44248 BL 0x3C14D4C
	0x03E4424C TBZ X0, 0x0, 0x3E443E4
	0x03E44250 ADRP X8, 0x315000
	0x03E44254 LDR X8, [X8 + 0x4B0]
	0x03E44258 MOV X0, X19
	0x03E4425C MOV X2, X31
	0x03E44260 LDR X1, [X8]
	0x03E44264 BL 0x3C14D4C
	0x03E44268 TBZ X0, 0x0, 0x3E44404
	0x03E4426C ADRP X8, 0x313000
	0x03E44270 LDR X8, [X8 + 0x888]
	0x03E44274 MOV X0, X19
	0x03E44278 MOV X2, X31
	0x03E4427C LDR X1, [X8]
	0x03E44280 BL 0x3C14D4C
	0x03E44284 TBZ X0, 0x0, 0x3E44424
	0x03E44288 ADRP X8, 0x313000
	0x03E4428C LDR X8, [X8 + 0x890]
	0x03E44290 MOV X0, X19
	0x03E44294 MOV X2, X31
	0x03E44298 LDR X1, [X8]
	0x03E4429C BL 0x3C14D4C
	0x03E442A0 TBZ X0, 0x0, 0x3E44444
	0x03E442A4 ADRP X8, 0x327000
	0x03E442A8 LDR X8, [X8 + 0x480]
	0x03E442AC MOV X0, X19
	0x03E442B0 MOV X2, X31
	0x03E442B4 LDR X1, [X8]
	0x03E442B8 BL 0x3C14D4C
	0x03E442BC TBZ X0, 0x0, 0x3E44464
	0x03E442C0 ADRP X27, 0x314000
	0x03E442C4 LDR X27, [X27 + 0x738]
	0x03E442C8 LDR X0, [X27]
	0x03E442CC LDR W8, [X0 + 0xE0]
	0x03E442D0 CBNZ W8, 0x3E442DC
	0x03E442D4 BL 0x1C16DFC
	0x03E442D8 LDR X0, [X27]
	0x03E442DC LDR X8, [X0 + 0xB8]
	0x03E442E0 LDR X8, [X8]
	0x03E442E4 CBZ X8, 0x3E44984
	0x03E442E8 LDR W8, [X8 + 0x18]
	0x03E442EC SUBS W8, W8, 0x1
	0x03E442F0 STR W8, [X31 + 0x8]
	0x03E442F4 B.LT 0x3E444E8
	0x03E442F8 MOV W26, W31
	0x03E442FC LDR W8, [X0 + 0xE0]
	0x03E44300 CBNZ W8, 0x3E4430C
	0x03E44304 BL 0x1C16DFC
	0x03E44308 LDR X0, [X27]
	0x03E4430C LDR X8, [X0 + 0xB8]
	0x03E44310 LDR X0, [X8]
	0x03E44314 CBZ X0, 0x3E44984
	0x03E44318 ADRP X8, 0x327000
	0x03E4431C LDR X8, [X8 + 0x430]
	0x03E44320 MOV W1, W26
	0x03E44324 LDR X2, [X8]
	0x03E44328 BL 0x301BCCC
	0x03E4432C CBZ X0, 0x3E44984
	0x03E44330 MOV X27, X0
	0x03E44334 LDR X0, [X29]
	0x03E44338 LDR X28, [X27 + 0x10]
	0x03E4433C LDR W8, [X0 + 0xE0]
	0x03E44340 CBNZ W8, 0x3E44348
	0x03E44344 BL 0x1C16DFC
	0x03E44348 MOV X0, X28
	0x03E4434C MOV X1, X19
	0x03E44350 MOV X2, X31
	0x03E44354 BL 0x3C3883C
	0x03E44358 TBZ X0, 0x0, 0x3E443A4
	0x03E4435C LDR W8, [X27 + 0x24]
	0x03E44360 CMP W8, W25
	0x03E44364 B.NE 0x3E443A4
	0x03E44368 LDR W8, [X27 + 0x28]
	0x03E4436C CMP W8, W24
	0x03E44370 B.NE 0x3E443A4
	0x03E44374 LDR W8, [X27 + 0x2C]
	0x03E44378 CMP W8, W23
	0x03E4437C B.NE 0x3E443A4
	0x03E44380 LDR W8, [X27 + 0x30]
	0x03E44384 CMP W8, W22
	0x03E44388 B.NE 0x3E443A4
	0x03E4438C LDR W8, [X27 + 0x34]
	0x03E44390 CMP W8, W21
	0x03E44394 B.NE 0x3E443A4

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x5A5000
	007 Move X21, 0x2B0000
	008 Move W8, [X20+2014]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x2B0000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move X0, 0x315000
	019 Move X0, [X0+2232]
	020 Call 0x1C17CF4
	021 Move X0, 0x328000
	022 Move X0, [X0+1032]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2014], W8
	026 Move V0, [X19+288]
	027 Move X0, X19
	028 Call Slider.ClampValue, X0, V0
	029 Move X0, X19
	030 Move [X19+288], S0
	031 Call Slider.get_normalizedValue, X0
	032 Move X0, [X21]
	033 Move X20, [X19+320]
	034 Move V8, V0
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {67}
	047 Move X0, [X21]
	048 Move X20, [X19+304]
	049 Move W8, [X0+224]
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X31
	055 Move X2, X31
	056 Call Object.op_Inequality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {95}
	061 Move X8, [X19+304]
	062 Compare X8, 0
	063 JumpIfEqual {140}
	064 Move W9, [X8+232]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move V8, [X8+244]
	067 Move X0, [X21]
	068 Move X20, [X19+336]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X0, X20
	074 Move X1, X31
	075 Move X2, X31
	076 Call Object.op_Inequality, X0, X1
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {113}
	081 Move X0, [X19+264]
	082 Compare X0, 0
	083 JumpIfEqual {140}
	084 Move W8, [X19+272]
	085 Move X1, X31
	086 And W20, W8, 0xFFFFFFFD
	087 Call RectTransform.get_anchorMin, X0
	088 Move W8, [X19+272]
	089 Move S2, 1
	090 NotImplemented "Instruction CMP not yet implemented."
	091 NotImplemented "Instruction FCSEL not yet implemented."
	092 Subtract S1, S2, S0
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction FCSEL not yet implemented."
	095 Move X0, [X19+256]
	096 Compare X0, 0
	097 JumpIfEqual {140}
	098 Move W8, [X19+272]
	099 And W8, W8, 0xFFFFFFFD
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X1, X31
	102 Call RectTransform.get_anchorMin, X0
	103 Move W8, [X19+272]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction FCSEL not yet implemented."
	106 Move S1, 1
	107 Subtract S8, S1, S0
	108 Move X1, X31
	109 Call RectTransform.get_anchorMax, X0
	110 Move W8, [X19+272]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Move X0, X19
	114 Call Slider.UpdateVisuals, X0
	115 Move X0, X19
	116 Call Slider.get_normalizedValue, X0
	117 NotImplemented "Instruction FCMP not yet implemented."
	118 Move X8, 0x328000
	119 Move X8, [X8+1032]
	120 Move X1, X19
	121 Move X2, X31
	122 Move X0, [X8]
	123 Call UISystemProfilerApi.AddMarker, X0, X1
	124 Move X0, [X19+296]
	125 Compare X0, 0
	126 JumpIfEqual {140}
	127 Move X8, 0x315000
	128 Move V0, [X19+288]
	129 Move X8, [X8+2232]
	130 Move X1, [X8]
	131 Call UnityEvent`1<Single>.Invoke, X0, V0
	132 Move X0, X19
	133 Move X20, [X31+32]
	134 Move X19, [X31+40]
	135 Move X30, [X31+16]
	136 Move X21, [X31+24]
	137 Move V8, [X31+48]
	138 Call Selectable.OnSetProperty, X0
	139 Return 
	140 Call 0x1C17F20

Method: System.Void UpdateCachedReferences()

Disassembly:
	0x03E43594 TBNZ X8, 0x0, 0x3E435B8
	0x03E43598 ADRP X0, 0x2B0000
	0x03E4359C LDR X0, [X0 + 0x598]
	0x03E435A0 BL 0x1C16CF4
	0x03E435A4 ADRP X0, 0x306000
	0x03E435A8 LDR X0, [X0 + 0x6B8]
	0x03E435AC BL 0x1C16CF4
	0x03E435B0 MOVZ W8, 0x1
	0x03E435B4 STRB W8, [X20 + 0x7E2]
	0x03E435B8 STR X31, [X31]
	0x03E435BC ADRP X8, 0x2B0000
	0x03E435C0 LDR X20, [X19 + 0x150]
	0x03E435C4 LDR X8, [X8 + 0x598]
	0x03E435C8 CBNZ X20, 0x3E435D0
	0x03E435CC LDR X20, [X19 + 0x140]
	0x03E435D0 LDR X0, [X8]
	0x03E435D4 LDR W8, [X0 + 0xE0]
	0x03E435D8 CBNZ W8, 0x3E435E0
	0x03E435DC BL 0x1C16DFC
	0x03E435E0 MOV X0, X20
	0x03E435E4 MOV X1, X31
	0x03E435E8 MOV X2, X31
	0x03E435EC BL 0x3C354F8
	0x03E435F0 TBZ X0, 0x0, 0x3E43748
	0x03E435F4 CBZ X20, 0x3E43760
	0x03E435F8 MOV X0, X20
	0x03E435FC MOV X1, X31
	0x03E43600 BL 0x3C3E51C
	0x03E43604 LDR W8, [X19 + 0x110]
	0x03E43608 CMP W8, 0x1
	0x03E4360C FCSEL S0, S3, S2, HI
	0x03E43610 FCMP S0, 0x0
	0x03E43614 B.LE 0x3E43748
	0x03E43618 ADRP X23, 0x596000
	0x03E4361C LDRB W8, [X23 + 0x78F]
	0x03E43620 CBNZ W8, 0x3E43638
	0x03E43624 ADRP X0, 0x2B8000
	0x03E43628 LDR X0, [X0 + 0xF08]
	0x03E4362C BL 0x1C16CF4
	0x03E43630 MOVZ W8, 0x1
	0x03E43634 STRB W8, [X23 + 0x78F]
	0x03E43638 ADRP X8, 0x2B8000
	0x03E4363C LDR X8, [X8 + 0xF08]
	0x03E43640 ADD X1, X31, 0x8
	0x03E43644 MOV X0, X22
	0x03E43648 LDR X8, [X8]
	0x03E4364C LDR X8, [X8 + 0xB8]
	0x03E43650 LDR V0, [X8]
	0x03E43654 STR D0, [X31 + 0x8]
	0x03E43658 BL 0x3E389E8
	0x03E4365C TBZ X0, 0x0, 0x3E43748
	0x03E43660 ADRP X8, 0x306000
	0x03E43664 LDR X8, [X8 + 0x6B8]
	0x03E43668 LDP S9, S8, [X31 + 0x8]
	0x03E4366C LDR X0, [X8]
	0x03E43670 LDR W8, [X0 + 0xE0]
	0x03E43674 CBNZ W8, 0x3E4367C
	0x03E43678 BL 0x1C16DFC
	0x03E4367C ADD X2, X31, 0x0
	0x03E43680 MOV X0, X20
	0x03E43684 MOV V0.16B, V9.16B
	0x03E43688 MOV V1.16B, V8.16B
	0x03E4368C MOV X1, X21
	0x03E43690 MOV X3, X31
	0x03E43694 BL 0x3E23A98
	0x03E43698 TBZ X0, 0x0, 0x3E43748
	0x03E4369C LDP S8, S9, [X31]
	0x03E436A0 MOV X0, X20
	0x03E436A4 MOV X1, X31
	0x03E436A8 BL 0x3C3E51C
	0x03E436AC FSUB S0, S8, S0
	0x03E436B0 FSUB S1, S9, S1
	0x03E436B4 STP S0, S1, [X31]
	0x03E436B8 LDR V2, [X19 + 0x158]
	0x03E436BC LDR V3, [X19 + 0x15C]
	0x03E436C0 LDR W8, [X19 + 0x110]
	0x03E436C4 MOV X0, X20
	0x03E436C8 FSUB S0, S0, S2
	0x03E436CC FSUB S1, S1, S3
	0x03E436D0 CMP W8, 0x1
	0x03E436D4 MOV X1, X31
	0x03E436D8 FCSEL S8, S1, S0, HI
	0x03E436DC BL 0x3C3E51C
	0x03E436E0 LDR W8, [X19 + 0x110]
	0x03E436E4 FMOV S0, 1
	0x03E436E8 FMOV S1, W31
	0x03E436EC LDR X9, [X19]
	0x03E436F0 CMP W8, 0x1
	0x03E436F4 FCSEL S2, S3, S2, HI
	0x03E436F8 FDIV S2, S8, S2
	0x03E436FC FMIN S4, S2, S0
	0x03E43700 FCMP S2, 0x0
	0x03E43704 AND W8, W8, 0xFFFFFFFD
	0x03E43708 FCSEL S2, S4, S1, PL
	0x03E4370C CMP W8, 0x1
	0x03E43710 FSUB S4, S0, S2
	0x03E43714 LDR V3, [X19 + 0x114]
	0x03E43718 FCSEL S2, S4, S2, EQ
	0x03E4371C LDR V4, [X19 + 0x118]
	0x03E43720 LDR X8, [X9 + 0x428]
	0x03E43724 LDR X1, [X9 + 0x430]
	0x03E43728 FMIN S0, S2, S0
	0x03E4372C FCMP S2, 0x0
	0x03E43730 FCSEL S0, S0, S1, PL
	0x03E43734 FSUB S1, S4, S3
	0x03E43738 FMUL S0, S0, S1
	0x03E4373C FADD S0, S3, S0
	0x03E43740 MOV X0, X19
	0x03E43744 BLR X8
	0x03E43748 LDP X20, X19, [X31 + 0x40]
	0x03E4374C LDP X22, X21, [X31 + 0x30]
	0x03E43750 LDP X30, X23, [X31 + 0x20]
	0x03E43754 LDP D9, D8, [X31 + 0x10]
	0x03E43758 ADD X31, X31, 0x50
	0x03E4375C RET
	0x03E43760 BL 0x1C16F20
	0x03E43764 STR X30, [X31 - 0x20]!
	0x03E43768 STP X20, X19, [X31 + 0x10]
	0x03E4376C LDR X8, [X0]
	0x03E43770 MOV X19, X1
	0x03E43774 MOV X20, X0
	0x03E43778 LDP X9, X8, [X8 + 0x1C8]
	0x03E4377C MOV X1, X8
	0x03E43780 BLR X9
	0x03E43784 TBZ X0, 0x0, 0x3E437B4
	0x03E43788 LDR X8, [X20]
	0x03E4378C MOV X0, X20
	0x03E43790 LDR X9, [X8 + 0x2B8]
	0x03E43794 LDR X1, [X8 + 0x2C0]
	0x03E43798 BLR X9
	0x03E4379C TBZ X0, 0x0, 0x3E437B4
	0x03E437A0 CBZ X19, 0x3E437C4
	0x03E437A4 LDR W8, [X19 + 0x148]
	0x03E437A8 CMP W8, 0x0
	0x03E437AC CSET W0, EQ
	0x03E437B0 B 0x3E437B8
	0x03E437B4 MOV W0, W31
	0x03E437B8 LDP X20, X19, [X31 + 0x10]
	0x03E437BC LDR X30, [X31], #0x20
	0x03E437C0 RET
	0x03E437C4 BL 0x1C16F20
	0x03E437C8 SUB X31, X31, 0x50
	0x03E437CC STP D9, D8, [X31 + 0x10]
	0x03E437D0 STP X30, X23, [X31 + 0x20]
	0x03E437D4 STP X22, X21, [X31 + 0x30]
	0x03E437D8 STP X20, X19, [X31 + 0x40]
	0x03E437DC ADRP X21, 0x5A5000
	0x03E437E0 LDRB W8, [X21 + 0x7E3]
	0x03E437E4 MOV X20, X1
	0x03E437E8 MOV X19, X0
	0x03E437EC TBNZ X8, 0x0, 0x3E43810
	0x03E437F0 ADRP X0, 0x2B0000
	0x03E437F4 LDR X0, [X0 + 0x598]
	0x03E437F8 BL 0x1C16CF4
	0x03E437FC ADRP X0, 0x306000
	0x03E43800 LDR X0, [X0 + 0x6B8]
	0x03E43804 BL 0x1C16CF4
	0x03E43808 MOVZ W8, 0x1
	0x03E4380C STRB W8, [X21 + 0x7E3]
	0x03E43810 MOV X0, X19
	0x03E43814 MOV X1, X20
	0x03E43818 STR X31, [X31 + 0x8]
	0x03E4381C BL 0x3E43764
	0x03E43820 TBZ X0, 0x0, 0x3E43964
	0x03E43824 ADRP X21, 0x2B0000
	0x03E43828 LDR X21, [X21 + 0x598]
	0x03E4382C MOV X0, X19
	0x03E43830 MOV X1, X20
	0x03E43834 BL 0x3E3C4B8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x5A6000
	008 Move X22, 0x2B1000
	009 Move W8, [X20+2015]
	010 Move X22, [X22+1432]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x2DD000
	017 Move X0, [X0+2496]
	018 Call 0x1C17CF4
	019 Move X0, 0x2B3000
	020 Move X0, [X0+1720]
	021 Call 0x1C17CF4
	022 Move X0, 0x2B1000
	023 Move X0, [X0+1432]
	024 Call 0x1C17CF4
	025 Move X0, 0x2D8000
	026 Move X0, [X0+3184]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2015], W8
	030 Move X0, [X22]
	031 Move X20, [X19+256]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X23, 0x2D8000
	037 Move X23, [X23+3184]
	038 Move X0, X20
	039 Move X1, X31
	040 Call Object.op_Implicit, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {119}
	045 Move X20, [X19+256]
	046 Move X0, X19
	047 Move X1, X31
	048 Call Component.get_transform, X0
	049 Move X8, [X22]
	050 Move X21, X0
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfEqual {56}
	054 Compare X21, 0
	055 JumpIfNotEqual {60}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Compare X21, 0
	059 JumpIfEqual {63}
	060 Move X1, [X23]
	061 Move X8, [X21]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X0, X20
	064 Move X1, X21
	065 Move X2, X31
	066 Call Object.op_Inequality, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {119}
	071 Move X0, [X19+256]
	072 Compare X0, 0
	073 JumpIfEqual {207}
	074 Move X1, X31
	075 Call Component.get_transform, X0
	076 Move X8, [X19+256]
	077 Move [X19+312], X0
	078 Compare X8, 0
	079 JumpIfEqual {207}
	080 Move X9, 0x2DD000
	081 Move X9, [X9+2496]
	082 Move X0, X8
	083 Move X1, [X9]
	084 Call 0x21A4894, X0
	085 Move X8, [X19+312]
	086 Move [X19+304], X0
	087 Compare X8, 0
	088 JumpIfEqual {207}
	089 Move X0, X8
	090 Move X1, X31
	091 Call Transform.get_parent, X0
	092 Move X8, [X22]
	093 Move X20, X0
	094 Move W9, [X8+224]
	095 Compare W9, 0
	096 JumpIfNotEqual {99}
	097 Move X0, X8
	098 Call 0x1C17DFC
	099 Move X0, X20
	100 Move X1, X31
	101 Move X2, X31
	102 Call Object.op_Inequality, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {122}
	107 Move X0, [X19+312]
	108 Compare X0, 0
	109 JumpIfEqual {207}
	110 Move X1, X31
	111 Call Transform.get_parent, X0
	112 Compare X0, 0
	113 JumpIfEqual {207}
	114 Move X8, 0x2B3000
	115 Move X8, [X8+1720]
	116 Move X1, [X8]
	117 Call 0x21A4894, X0
	118 Move [X19+320], X0
	119 Move [X19+256], X31
	120 Move [X19+320], X31
	121 Move [X19+304], X31
	122 Move X0, [X22]
	123 Move X20, [X19+264]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 Move X0, X20
	129 Move X1, X31
	130 Call Object.op_Implicit, X0
	131 Move TEMP, X0
	132 And TEMP, TEMP, 1
	133 Compare TEMP, 1
	134 JumpIfNotEqual {198}
	135 Move X20, [X19+264]
	136 Move X0, X19
	137 Move X1, X31
	138 Call Component.get_transform, X0
	139 Move X8, [X22]
	140 Move X21, X0
	141 Move W9, [X8+224]
	142 Compare W9, 0
	143 JumpIfEqual {146}
	144 Compare X21, 0
	145 JumpIfNotEqual {150}
	146 Move X0, X8
	147 Call 0x1C17DFC
	148 Compare X21, 0
	149 JumpIfEqual {153}
	150 Move X1, [X23]
	151 Move X8, [X21]
	152 NotImplemented "Instruction CMP not yet implemented."
	153 Move X0, X20
	154 Move X1, X21
	155 Move X2, X31
	156 Call Object.op_Inequality, X0, X1
	157 Move TEMP, X0
	158 And TEMP, TEMP, 1
	159 Compare TEMP, 1
	160 JumpIfNotEqual {198}
	161 Move X0, [X19+264]
	162 Compare X0, 0
	163 JumpIfEqual {207}
	164 Move X1, X31
	165 Call Component.get_transform, X0
	166 Move [X19+328], X0
	167 Compare X0, 0
	168 JumpIfEqual {207}
	169 Move X1, X31
	170 Call Transform.get_parent, X0
	171 Move X8, [X22]
	172 Move X20, X0
	173 Move W9, [X8+224]
	174 Compare W9, 0
	175 JumpIfNotEqual {178}
	176 Move X0, X8
	177 Call 0x1C17DFC
	178 Move X0, X20
	179 Move X1, X31
	180 Move X2, X31
	181 Call Object.op_Inequality, X0, X1
	182 Move TEMP, X0
	183 And TEMP, TEMP, 1
	184 Compare TEMP, 1
	185 JumpIfNotEqual {200}
	186 Move X0, [X19+328]
	187 Compare X0, 0
	188 JumpIfEqual {207}
	189 Move X1, X31
	190 Call Transform.get_parent, X0
	191 Compare X0, 0
	192 JumpIfEqual {207}
	193 Move X8, 0x2B3000
	194 Move X8, [X8+1720]
	195 Move X1, [X8]
	196 Call 0x21A4894, X0
	197 Move [X19+336], X0
	198 Move [X19+264], X31
	199 Move [X19+336], X31
	200 Move X20, [X31+32]
	201 Move X19, [X31+40]
	202 Move X22, [X31+16]
	203 Move X21, [X31+24]
	204 Move X30, [X31+48]
	205 Move X23, [X31+56]
	206 Return 
	207 Call 0x1C17F20
	208 Move X0, X21
	209 Call 0x1C181E0

Method: System.Single ClampValue(System.Single input)

Disassembly:
	0x03E44398 LDR W8, [X27 + 0x3C]
	0x03E4439C CMP W8, W20
	0x03E443A0 B.EQ 0x3E44970
	0x03E443A4 LDR W8, [X31 + 0x8]
	0x03E443A8 ADRP X27, 0x314000
	0x03E443AC LDR X27, [X27 + 0x738]
	0x03E443B0 CMP W8, W26
	0x03E443B4 B.EQ 0x3E444E8
	0x03E443B8 LDR X0, [X27]
	0x03E443BC ADD W26, W26, 0x1
	0x03E443C0 B 0x3E442FC
	0x03E443C4 MOV X0, X19
	0x03E443C8 MOV X1, X31
	0x03E443CC BL 0x3C389D4
	0x03E443D0 ADRP X8, 0x2B6000
	0x03E443D4 ADRP X9, 0x327000
	0x03E443D8 LDR X8, [X8 + 0xBC0]
	0x03E443DC LDR X9, [X9 + 0x448]
	0x03E443E0 B 0x3E44480
	0x03E443E4 MOV X0, X19
	0x03E443E8 MOV X1, X31
	0x03E443EC BL 0x3C389D4
	0x03E443F0 ADRP X8, 0x2B6000
	0x03E443F4 ADRP X9, 0x327000
	0x03E443F8 LDR X8, [X8 + 0xBC0]
	0x03E443FC LDR X9, [X9 + 0x478]
	0x03E44400 B 0x3E44480
	0x03E44404 MOV X0, X19
	0x03E44408 MOV X1, X31
	0x03E4440C BL 0x3C389D4
	0x03E44410 ADRP X8, 0x2B6000
	0x03E44414 ADRP X9, 0x327000
	0x03E44418 LDR X8, [X8 + 0xBC0]
	0x03E4441C LDR X9, [X9 + 0x488]
	0x03E44420 B 0x3E44480
	0x03E44424 MOV X0, X19
	0x03E44428 MOV X1, X31
	0x03E4442C BL 0x3C389D4
	0x03E44430 ADRP X8, 0x2B6000
	0x03E44434 ADRP X9, 0x327000
	0x03E44438 LDR X8, [X8 + 0xBC0]
	0x03E4443C LDR X9, [X9 + 0x468]
	0x03E44440 B 0x3E44480
	0x03E44444 MOV X0, X19
	0x03E44448 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], D8
	003 Move [X31+24], X30
	004 Move V1, [X0+280]
	005 Move V2, [X0+276]
	006 Move W8, [X0+284]
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 NotImplemented "Instruction FCSEL not yet implemented."
	009 NotImplemented "Instruction FCMP not yet implemented."
	010 NotImplemented "Instruction FCSEL not yet implemented."
	011 Compare W8, 0
	012 JumpIfEqual {36}
	013 NotImplemented "Instruction FCVT not yet implemented."
	014 Add X0, X31, 8
	015 Call 0x3EB2C00
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 Move D1, -0.5
	018 NotImplemented "Instruction FCMP not yet implemented."
	019 Move V0, [X31+8]
	020 Move S1, -1
	021 Move D1, 0.5
	022 NotImplemented "Instruction FCMP not yet implemented."
	023 Move V0, [X31+8]
	024 Move S1, 1
	025 NotImplemented "Instruction FCVTZS not yet implemented."
	026 NotImplemented "Instruction INVALID not yet implemented."
	027 Add S1, S0, S1
	028 And X31, X8, 1
	029 NotImplemented "Instruction FCSEL not yet implemented."
	030 Move S0, -0.5
	031 Add S0, S8, S0
	032 NotImplemented "Instruction FRINTP not yet implemented."
	033 Move S0, 0.5
	034 Add S0, S8, S0
	035 NotImplemented "Instruction FRINTM not yet implemented."
	036 Move V0, V8
	037 Move X30, [X31+24]
	038 Move V8, [X31+16]
	039 Add X31, X31, 32
	040 Return V0

Method: System.Void Set(System.Single input, System.Boolean sendCallback = True)

Disassembly:
	0x03E44470 ADRP X8, 0x2B6000
	0x03E44474 ADRP X9, 0x327000
	0x03E44478 LDR X8, [X8 + 0xBC0]
	0x03E4447C LDR X9, [X9 + 0x460]
	0x03E44480 LDR X8, [X8]
	0x03E44484 LDR X2, [X9]
	0x03E44488 MOV X1, X0
	0x03E4448C MOV X3, X31
	0x03E44490 MOV X0, X8
	0x03E44494 BL 0x32274B8
	0x03E44498 ADRP X8, 0x314000
	0x03E4449C LDR X8, [X8 + 0x738]
	0x03E444A0 MOV X20, X0
	0x03E444A4 LDR X8, [X8]
	0x03E444A8 LDR W9, [X8 + 0xE0]
	0x03E444AC CBNZ W9, 0x3E444B8
	0x03E444B0 MOV X0, X8
	0x03E444B4 BL 0x1C16DFC
	0x03E444B8 MOV X0, X20
	0x03E444BC MOV X1, X19
	0x03E444C0 BL 0x3E44998
	0x03E444C4 MOV X0, X19
	0x03E444C8 LDP X20, X19, [X31 + 0x80]
	0x03E444CC LDP X22, X21, [X31 + 0x70]
	0x03E444D0 LDP X24, X23, [X31 + 0x60]
	0x03E444D4 LDP X26, X25, [X31 + 0x50]
	0x03E444D8 LDP X28, X27, [X31 + 0x40]
	0x03E444DC LDP X29, X30, [X31 + 0x30]
	0x03E444E0 ADD X31, X31, 0x90
	0x03E444E4 RET
	0x03E444E8 ADRP X8, 0x327000
	0x03E444EC LDR X8, [X8 + 0x438]
	0x03E444F0 LDR X0, [X8]
	0x03E444F4 BL 0x1C16F10
	0x03E444F8 MOVZ W8, 0x8
	0x03E444FC MOV X1, X31
	0x03E44500 MOV X26, X0
	0x03E44504 STR W8, [X0 + 0x2C]
	0x03E44508 BL 0x33BDD8C
	0x03E4450C MOVZ W8, 0x1
	0x03E44510 STR X19, [X26 + 0x10]
	0x03E44514 STR W8, [X26 + 0x20]
	0x03E44518 ADRP X8, 0x2B3000
	0x03E4451C LDR X8, [X8 + 0xCA0]
	0x03E44520 LDR X0, [X8]
	0x03E44524 BL 0x1C16F10
	0x03E44528 MOV X1, X19
	0x03E4452C MOV X2, X31
	0x03E44530 MOV X27, X0

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5A5000
	007 Move W8, [X21+2016]
	008 Move W20, W1
	009 Move V8, V0
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x315000
	016 Move X0, [X0+2232]
	017 Call 0x1C17CF4
	018 Move X0, 0x328000
	019 Move X0, [X0+1032]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2016], W8
	023 Move X0, X19
	024 Move V0, V8
	025 Call Slider.ClampValue, X0, V0
	026 Move V1, [X19+288]
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 Move X0, X19
	029 Move V8, V0
	030 Move [X19+288], S0
	031 Call Slider.UpdateVisuals, X0
	032 Move TEMP, X20
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {56}
	036 Move X8, 0x328000
	037 Move X8, [X8+1032]
	038 Move X1, X19
	039 Move X2, X31
	040 Move X0, [X8]
	041 Call UISystemProfilerApi.AddMarker, X0, X1
	042 Move X0, [X19+296]
	043 Compare X0, 0
	044 JumpIfEqual {62}
	045 Move X8, 0x315000
	046 Move X8, [X8+2232]
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 Move X21, [X31+24]
	051 Move V0, V8
	052 Move X1, [X8]
	053 Move V8, [X31+48]
	054 Call UnityEvent`1<Single>.Invoke, X0, V0
	055 Return 
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X30, [X31+16]
	059 Move X21, [X31+24]
	060 Move V8, [X31+48]
	061 Return 
	062 Call 0x1C17F20

Method: System.Void OnRectTransformDimensionsChange()

Disassembly:
	0x03E44534 BL 0x3C145DC
	0x03E44538 STR X27, [X26 + 0x18]
	0x03E4453C CBZ X27, 0x3E44984
	0x03E44540 MOVZ W1, 0x3D
	0x03E44544 MOV X0, X27
	0x03E44548 MOV X2, X31
	0x03E4454C BL 0x3C396EC
	0x03E44550 LDR X8, [X26 + 0x18]
	0x03E44554 CMP W24, 0x0
	0x03E44558 STP W25, W24, [X26 + 0x24]
	0x03E4455C STP W23, W22, [X26 + 0x2C]
	0x03E44560 STR X8, [X31 + 0x8]
	0x03E44564 CSET W8, NE
	0x03E44568 CMP W21, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call UIBehaviour.OnRectTransformDimensionsChange, X0
	006 Move X8, [X19]
	007 Move X0, X19
	008 Move X9, [X8+456]
	009 Move X1, [X8+464]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {20}
	015 Move X0, X19
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call Slider.UpdateVisuals, X0
	019 Return 
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 

Method: UnityEngine.UI.Slider/Axis get_axis()

Disassembly:
	0x03E44460 B 0x3E44480
	0x03E44464 MOV X0, X19
	0x03E44468 MOV X1, X31
	0x03E4446C BL 0x3C389D4

ISIL:
	001 Move W8, [X0+272]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 NotImplemented "Instruction CSET not yet implemented."
	004 Return X0

Method: System.Boolean get_reverseValue()

Disassembly:
	0x03E4444C BL 0x3C389D4
	0x03E44450 ADRP X8, 0x2B6000
	0x03E44454 ADRP X9, 0x327000
	0x03E44458 LDR X8, [X8 + 0xBC0]
	0x03E4445C LDR X9, [X9 + 0x450]

ISIL:
	001 Move W8, [X0+272]
	002 And W8, W8, 0xFFFFFFFD
	003 NotImplemented "Instruction CMP not yet implemented."
	004 NotImplemented "Instruction CSET not yet implemented."
	005 Return X0

Method: System.Void UpdateVisuals()

Disassembly:
	0x03E43838 ADRP X22, 0x596000
	0x03E4383C LDRB W8, [X22 + 0x78F]
	0x03E43840 CBNZ W8, 0x3E43858
	0x03E43844 ADRP X0, 0x2B8000
	0x03E43848 LDR X0, [X0 + 0xF08]
	0x03E4384C BL 0x1C16CF4
	0x03E43850 MOVZ W8, 0x1
	0x03E43854 STRB W8, [X22 + 0x78F]
	0x03E43858 ADRP X8, 0x2B8000
	0x03E4385C LDR X8, [X8 + 0xF08]
	0x03E43860 LDR X8, [X8]
	0x03E43864 LDR X8, [X8 + 0xB8]
	0x03E43868 LDR V0, [X8]
	0x03E4386C STR D0, [X19 + 0x158]
	0x03E43870 LDR X0, [X21]
	0x03E43874 LDR X21, [X19 + 0x150]
	0x03E43878 LDR W8, [X0 + 0xE0]
	0x03E4387C CBNZ W8, 0x3E43884
	0x03E43880 BL 0x1C16DFC
	0x03E43884 MOV X0, X21
	0x03E43888 MOV X1, X31
	0x03E4388C MOV X2, X31
	0x03E43890 BL 0x3C354F8
	0x03E43894 TBZ X0, 0x0, 0x3E43944
	0x03E43898 CBZ X20, 0x3E4397C
	0x03E4389C LDR X21, [X19 + 0x108]
	0x03E438A0 LDP S8, S9, [X20 + 0xE4]
	0x03E438A4 MOV X0, X20
	0x03E438A8 MOV X1, X31
	0x03E438AC BL 0x3E4F284
	0x03E438B0 ADRP X23, 0x306000
	0x03E438B4 LDR X23, [X23 + 0x6B8]
	0x03E438B8 MOV X22, X0
	0x03E438BC LDR X8, [X23]
	0x03E438C0 LDR W9, [X8 + 0xE0]
	0x03E438C4 CBNZ W9, 0x3E438D0
	0x03E438C8 MOV X0, X8
	0x03E438CC BL 0x1C16DFC
	0x03E438D0 MOV X0, X21
	0x03E438D4 MOV V0.16B, V8.16B
	0x03E438D8 MOV V1.16B, V9.16B
	0x03E438DC MOV X1, X22
	0x03E438E0 MOV X2, X31
	0x03E438E4 BL 0x3E2333C
	0x03E438E8 TBZ X0, 0x0, 0x3E43948
	0x03E438EC LDR X21, [X19 + 0x108]
	0x03E438F0 LDP S8, S9, [X20 + 0xE4]
	0x03E438F4 MOV X0, X20
	0x03E438F8 MOV X1, X31
	0x03E438FC BL 0x3E4F314
	0x03E43900 LDR X8, [X23]
	0x03E43904 MOV X20, X0
	0x03E43908 LDR W9, [X8 + 0xE0]
	0x03E4390C CBNZ W9, 0x3E43918
	0x03E43910 MOV X0, X8
	0x03E43914 BL 0x1C16DFC
	0x03E43918 ADD X2, X31, 0x8
	0x03E4391C MOV X0, X21
	0x03E43920 MOV V0.16B, V8.16B
	0x03E43924 MOV V1.16B, V9.16B
	0x03E43928 MOV X1, X20
	0x03E4392C MOV X3, X31
	0x03E43930 BL 0x3E23A98
	0x03E43934 TBZ X0, 0x0, 0x3E43964
	0x03E43938 LDR X8, [X31 + 0x8]
	0x03E4393C STR X8, [X19 + 0x158]
	0x03E43940 B 0x3E43964
	0x03E43944 CBZ X20, 0x3E4397C
	0x03E43948 MOV X0, X20
	0x03E4394C MOV X1, X31
	0x03E43950 BL 0x3E4F314
	0x03E43954 MOV X2, X0
	0x03E43958 MOV X0, X19
	0x03E4395C MOV X1, X20
	0x03E43960 BL 0x3E4356C
	0x03E43964 LDP X20, X19, [X31 + 0x40]
	0x03E43968 LDP X22, X21, [X31 + 0x30]
	0x03E4396C LDP X30, X23, [X31 + 0x20]
	0x03E43970 LDP D9, D8, [X31 + 0x10]
	0x03E43974 ADD X31, X31, 0x50
	0x03E43978 RET
	0x03E4397C BL 0x1C16F20
	0x03E43980 STR X30, [X31 - 0x20]!
	0x03E43984 STP X20, X19, [X31 + 0x10]
	0x03E43988 MOV X19, X1
	0x03E4398C MOV X20, X0
	0x03E43990 BL 0x3E43764
	0x03E43994 TBZ X0, 0x0, 0x3E439C0
	0x03E43998 CBZ X19, 0x3E439CC
	0x03E4399C MOV X0, X19
	0x03E439A0 MOV X1, X31
	0x03E439A4 BL 0x3E4F314
	0x03E439A8 MOV X2, X0
	0x03E439AC MOV X0, X20
	0x03E439B0 MOV X1, X19
	0x03E439B4 LDP X20, X19, [X31 + 0x10]
	0x03E439B8 LDR X30, [X31], #0x20
	0x03E439BC B 0x3E4356C
	0x03E439C0 LDP X20, X19, [X31 + 0x10]
	0x03E439C4 LDR X30, [X31], #0x20
	0x03E439C8 RET
	0x03E439CC BL 0x1C16F20
	0x03E439D0 STP X30, X21, [X31 - 0x20]!
	0x03E439D4 STP X20, X19, [X31 + 0x10]
	0x03E439D8 ADRP X21, 0x5A5000
	0x03E439DC LDRB W8, [X21 + 0x7E4]
	0x03E439E0 MOV X20, X1
	0x03E439E4 MOV X19, X0
	0x03E439E8 TBNZ X8, 0x0, 0x3E43A00
	0x03E439EC ADRP X0, 0x2B0000
	0x03E439F0 LDR X0, [X0 + 0x598]
	0x03E439F4 BL 0x1C16CF4
	0x03E439F8 MOVZ W8, 0x1
	0x03E439FC STRB W8, [X21 + 0x7E4]
	0x03E43A00 LDR X8, [X19]
	0x03E43A04 MOV X0, X19
	0x03E43A08 LDP X9, X1, [X8 + 0x1C8]
	0x03E43A0C BLR X9
	0x03E43A10 TBZ X0, 0x0, 0x3E43BF8
	0x03E43A14 LDR X8, [X19]
	0x03E43A18 MOV X0, X19
	0x03E43A1C LDR X9, [X8 + 0x2B8]
	0x03E43A20 LDR X1, [X8 + 0x2C0]
	0x03E43A24 BLR X9
	0x03E43A28 TBZ X0, 0x0, 0x3E43BF8
	0x03E43A2C CBZ X20, 0x3E43C18
	0x03E43A30 LDR W8, [X20 + 0x28]
	0x03E43A34 CMP W8, 0x3
	0x03E43A38 B.HI 0x3E43C0C
	0x03E43A3C ADRP X9, 0xFFFFFFFFFCD55000
	0x03E43A40 ADD X9, X9, 0x631
	0x03E43A44 ADR X10, 0x10
	0x03E43A48 LDRB W11, [X9, X8, LSL]
	0x03E43A4C ADD X10, X10, X11, 0x2, LSL
	0x03E43A50 BR X10
	0x03E43A54 LDR W8, [X19 + 0x110]
	0x03E43A58 CMP W8, 0x1
	0x03E43A5C B.HI 0x3E43BF8
	0x03E43A60 LDR X8, [X19]
	0x03E43A64 LDR X9, [X8 + 0x2E8]
	0x03E43A68 LDR X1, [X8 + 0x2F0]
	0x03E43A6C B 0x3E43B4C
	0x03E43A70 LDR W8, [X19 + 0x110]
	0x03E43A74 CMP W8, 0x2
	0x03E43A78 B.CC 0x3E43BF8
	0x03E43A7C LDR X8, [X19]
	0x03E43A80 LDR X9, [X8 + 0x308]
	0x03E43A84 LDR X1, [X8 + 0x310]
	0x03E43A88 B 0x3E43AA4
	0x03E43A8C LDR W8, [X19 + 0x110]
	0x03E43A90 CMP W8, 0x1
	0x03E43A94 B.HI 0x3E43BF8
	0x03E43A98 LDR X8, [X19]
	0x03E43A9C LDR X9, [X8 + 0x2F8]
	0x03E43AA0 LDR X1, [X8 + 0x300]
	0x03E43AA4 MOV X0, X19
	0x03E43AA8 BLR X9
	0x03E43AAC ADRP X8, 0x2B0000
	0x03E43AB0 LDR X8, [X8 + 0x598]
	0x03E43AB4 MOV X21, X0
	0x03E43AB8 LDR X8, [X8]
	0x03E43ABC LDR W9, [X8 + 0xE0]
	0x03E43AC0 CBNZ W9, 0x3E43ACC
	0x03E43AC4 MOV X0, X8
	0x03E43AC8 BL 0x1C16DFC
	0x03E43ACC MOV X0, X21
	0x03E43AD0 MOV X1, X31
	0x03E43AD4 MOV X2, X31
	0x03E43AD8 BL 0x3C3883C
	0x03E43ADC TBZ X0, 0x0, 0x3E43BF8
	0x03E43AE0 LDR X8, [X19]
	0x03E43AE4 LDR W9, [X19 + 0x110]
	0x03E43AE8 MOV X0, X19
	0x03E43AEC LDR X10, [X8 + 0x418]
	0x03E43AF0 LDR X1, [X8 + 0x420]
	0x03E43AF4 AND W20, W9, 0xFFFFFFFD
	0x03E43AF8 BLR X10
	0x03E43AFC LDRB W8, [X19 + 0x11C]
	0x03E43B00 FMOV S1, 1
	0x03E43B04 CBNZ W8, 0x3E43B20
	0x03E43B08 LDR V1, [X19 + 0x118]
	0x03E43B0C LDR V2, [X19 + 0x114]
	0x03E43B10 ADRP X8, 0xFFFFFFFFFCCA7000
	0x03E43B14 LDR V3, [X8 + 0xBC]
	0x03E43B18 FSUB S1, S1, S2

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X20, 0x5A6000
	012 Move X22, 0x2B1000
	013 Move W8, [X20+2017]
	014 Move X22, [X22+1432]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2B1000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2017], W8
	025 Add X20, X19, 352
	026 Move X0, X20
	027 Move X1, X31
	028 Call DrivenRectTransformTracker.Clear, X0
	029 Move X0, [X22]
	030 Move X21, [X19+320]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X21
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {127}
	043 Move X2, [X19+256]
	044 Move W3, 3840
	045 Move X0, X20
	046 Move X1, X19
	047 Move X4, X31
	048 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	049 Move X21, 0x597000
	050 Move W8, [X21+1935]
	051 Compare W8, 0
	052 JumpIfNotEqual {58}
	053 Move X0, 0x2B9000
	054 Move X0, [X0+3848]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X21+1935], W8
	058 Move X21, 0x2B9000
	059 Move X21, [X21+3848]
	060 Move X23, 0x59F000
	061 Move W9, [X23+2632]
	062 Move X8, [X21]
	063 Move X8, [X8+184]
	064 Move S9, [X8]
	065 Move S8, [X8+4]
	066 Compare W9, 0
	067 JumpIfNotEqual {74}
	068 Move X0, X21
	069 Call 0x1C17CF4
	070 Move X8, [X21]
	071 Move W9, 1
	072 Move [X23+2632], W9
	073 Move X8, [X8+184]
	074 Move X0, [X22]
	075 Move S11, [X8+8]
	076 Move S10, [X8+12]
	077 Move X21, [X19+304]
	078 Move W8, [X0+224]
	079 Compare W8, 0
	080 JumpIfNotEqual {82}
	081 Call 0x1C17DFC
	082 Move X0, X21
	083 Move X1, X31
	084 Move X2, X31
	085 Call Object.op_Inequality, X0, X1
	086 Move TEMP, X0
	087 And TEMP, TEMP, 1
	088 Compare TEMP, 1
	089 JumpIfNotEqual {100}
	090 Move X21, [X19+304]
	091 Compare X21, 0
	092 JumpIfEqual {223}
	093 Move W8, [X21+232]
	094 NotImplemented "Instruction CMP not yet implemented."
	095 Move X0, X19
	096 Call Slider.get_normalizedValue, X0
	097 Move X0, X21
	098 Move X1, X31
	099 Call Image.set_fillAmount, X0, V0
	100 Move W21, [X19+272]
	101 Move X0, X19
	102 And W23, W21, 0xFFFFFFFD
	103 Call Slider.get_normalizedValue, X0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move S1, 1
	106 NotImplemented "Instruction CMP not yet implemented."
	107 Subtract S0, S1, S0
	108 NotImplemented "Instruction FCSEL not yet implemented."
	109 NotImplemented "Instruction FCSEL not yet implemented."
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction FCSEL not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 Move X0, [X19+256]
	114 Compare X0, 0
	115 JumpIfEqual {223}
	116 Move V0, V9
	117 Move V1, V8
	118 Move X1, X31
	119 Call RectTransform.set_anchorMin, X0, X1
	120 Move X0, [X19+256]
	121 Compare X0, 0
	122 JumpIfEqual {223}
	123 Move V0, V11
	124 Move V1, V10
	125 Move X1, X31
	126 Call RectTransform.set_anchorMax, X0, X1
	127 Move X0, [X22]
	128 Move X21, [X19+336]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {133}
	132 Call 0x1C17DFC
	133 Move X0, X21
	134 Move X1, X31
	135 Move X2, X31
	136 Call Object.op_Inequality, X0, X1
	137 Move TEMP, X0
	138 And TEMP, TEMP, 1
	139 Compare TEMP, 1
	140 JumpIfNotEqual {185}
	141 Move X2, [X19+264]
	142 Move W3, 3840
	143 Move X0, X20
	144 Move X1, X19
	145 Move X4, X31
	146 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	147 Move X20, 0x597000
	148 Move W8, [X20+1935]
	149 Compare W8, 0
	150 JumpIfNotEqual {156}
	151 Move X0, 0x2B9000
	152 Move X0, [X0+3848]
	153 Call 0x1C17CF4
	154 Move W8, 1
	155 Move [X20+1935], W8
	156 Move X20, 0x2B9000
	157 Move X20, [X20+3848]
	158 Move X21, 0x59F000
	159 Move W9, [X21+2632]
	160 Move X8, [X20]
	161 Move X8, [X8+184]
	162 Move S9, [X8]
	163 Move S8, [X8+4]
	164 Compare W9, 0
	165 JumpIfNotEqual {172}
	166 Move X0, X20
	167 Call 0x1C17CF4
	168 Move X8, [X20]
	169 Move W9, 1
	170 Move [X21+2632], W9
	171 Move X8, [X8+184]
	172 Move W20, [X19+272]
	173 Move S10, [X8+8]
	174 Move S11, [X8+12]
	175 Move X0, X19
	176 And W21, W20, 0xFFFFFFFD
	177 Call Slider.get_normalizedValue, X0
	178 Move S1, 1
	179 NotImplemented "Instruction CMP not yet implemented."
	180 Subtract S1, S1, S0
	181 NotImplemented "Instruction FCSEL not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Move V11, V0
	184 Move V8, V0
	185 Move X20, [X31+64]
	186 Move X19, [X31+72]
	187 Move X22, [X31+48]
	188 Move X21, [X31+56]
	189 Move X30, [X31+32]
	190 Move X23, [X31+40]
	191 Move D9, [X31+16]
	192 Move D8, [X31+24]
	193 Move D11, [X31+80]
	194 Move D10, [X31+88]
	195 Return 
	196 Move V10, V0
	197 Move V9, V0
	198 Move X0, [X19+264]
	199 Compare X0, 0
	200 JumpIfEqual {223}
	201 Move V0, V9
	202 Move V1, V8
	203 Move X1, X31
	204 Call RectTransform.set_anchorMin, X0, X1
	205 Move X0, [X19+264]
	206 Compare X0, 0
	207 JumpIfEqual {223}
	208 Move X20, [X31+64]
	209 Move X19, [X31+72]
	210 Move X22, [X31+48]
	211 Move X21, [X31+56]
	212 Move X30, [X31+32]
	213 Move X23, [X31+40]
	214 Move D9, [X31+16]
	215 Move D8, [X31+24]
	216 Move V0, V10
	217 Move V1, V11
	218 Move X1, X31
	219 Move D11, [X31+80]
	220 Move D10, [X31+88]
	221 Call RectTransform.set_anchorMax, X0, X1
	222 Return 
	223 Call 0x1C17F20

Method: System.Void UpdateDrag(UnityEngine.EventSystems.PointerEventData eventData, UnityEngine.Camera cam)

Disassembly:
	0x03E4456C CSET W9, GT
	0x03E44570 AND W8, W8, W9, 0x0
	0x03E44574 STR W21, [X26 + 0x34]
	0x03E44578 STR W20, [X26 + 0x3C]
	0x03E4457C STRB W8, [X26 + 0x38]
	0x03E44580 ADRP X8, 0x2AF000
	0x03E44584 LDR X8, [X8 + 0x9D0]
	0x03E44588 MOVZ W1, 0x8
	0x03E4458C LDR X0, [X8]
	0x03E44590 BL 0x1C16D6C
	0x03E44594 ADRP X29, 0x2AF000
	0x03E44598 LDR X29, [X29 + 0x758]
	0x03E4459C MOV X28, X0
	0x03E445A0 ADD X1, X31, 0x2C
	0x03E445A4 STR W25, [X31 + 0x2C]
	0x03E445A8 LDR X0, [X29]
	0x03E445AC BL 0x1C16E04
	0x03E445B0 CBZ X28, 0x3E44984
	0x03E445B4 MOV X27, X0
	0x03E445B8 CBZ X0, 0x3E445D0
	0x03E445BC LDR X8, [X28]
	0x03E445C0 MOV X0, X27
	0x03E445C4 LDR X1, [X8 + 0x40]
	0x03E445C8 BL 0x1C16E00
	0x03E445CC CBZ X0, 0x3E4498C
	0x03E445D0 LDR W8, [X28 + 0x18]
	0x03E445D4 CBZ W8, 0x3E44988
	0x03E445D8 STR X27, [X28 + 0x20]
	0x03E445DC ADRP X8, 0x327000
	0x03E445E0 LDR X8, [X8 + 0x440]
	0x03E445E4 ADD X1, X31, 0x28
	0x03E445E8 STR W24, [X31 + 0x28]
	0x03E445EC LDR X0, [X8]
	0x03E445F0 BL 0x1C16E04
	0x03E445F4 MOV X27, X0
	0x03E445F8 CBZ X0, 0x3E44610
	0x03E445FC LDR X8, [X28]
	0x03E44600 MOV X0, X27
	0x03E44604 LDR X1, [X8 + 0x40]
	0x03E44608 BL 0x1C16E00
	0x03E4460C CBZ X0, 0x3E4498C
	0x03E44610 LDR W8, [X28 + 0x18]
	0x03E44614 CMP W8, 0x1
	0x03E44618 B.LS 0x3E44988
	0x03E4461C STR X27, [X28 + 0x28]
	0x03E44620 ADRP X8, 0x327000
	0x03E44624 LDR X8, [X8 + 0x418]
	0x03E44628 ADD X1, X31, 0x24
	0x03E4462C STR W23, [X31 + 0x24]
	0x03E44630 LDR X0, [X8]
	0x03E44634 BL 0x1C16E04
	0x03E44638 MOV X27, X0
	0x03E4463C CBZ X0, 0x3E44654
	0x03E44640 LDR X8, [X28]
	0x03E44644 MOV X0, X27
	0x03E44648 LDR X1, [X8 + 0x40]
	0x03E4464C BL 0x1C16E00
	0x03E44650 CBZ X0, 0x3E4498C
	0x03E44654 LDR W8, [X28 + 0x18]
	0x03E44658 CMP W8, 0x2
	0x03E4465C B.LS 0x3E44988
	0x03E44660 STR X27, [X28 + 0x30]
	0x03E44664 LDR X0, [X29]
	0x03E44668 ADD X1, X31, 0x20
	0x03E4466C STR W21, [X31 + 0x20]
	0x03E44670 BL 0x1C16E04
	0x03E44674 MOV X27, X0
	0x03E44678 CBZ X0, 0x3E44690
	0x03E4467C LDR X8, [X28]
	0x03E44680 MOV X0, X27
	0x03E44684 LDR X1, [X8 + 0x40]
	0x03E44688 BL 0x1C16E00
	0x03E4468C CBZ X0, 0x3E4498C
	0x03E44690 LDR W8, [X28 + 0x18]
	0x03E44694 CMP W8, 0x3
	0x03E44698 B.LS 0x3E44988
	0x03E4469C STR X27, [X28 + 0x38]
	0x03E446A0 LDR X0, [X29]
	0x03E446A4 ADD X1, X31, 0x1C
	0x03E446A8 STR W22, [X31 + 0x1C]
	0x03E446AC BL 0x1C16E04
	0x03E446B0 MOV X27, X0
	0x03E446B4 CBZ X0, 0x3E446CC
	0x03E446B8 LDR X8, [X28]
	0x03E446BC MOV X0, X27
	0x03E446C0 LDR X1, [X8 + 0x40]
	0x03E446C4 BL 0x1C16E00
	0x03E446C8 CBZ X0, 0x3E4498C
	0x03E446CC LDR W8, [X28 + 0x18]
	0x03E446D0 CMP W8, 0x4
	0x03E446D4 B.LS 0x3E44988
	0x03E446D8 STR X27, [X28 + 0x40]
	0x03E446DC ADRP X8, 0x327000
	0x03E446E0 LDR X8, [X8 + 0x410]
	0x03E446E4 ADD X1, X31, 0x18
	0x03E446E8 STR W20, [X31 + 0x18]
	0x03E446EC LDR X0, [X8]
	0x03E446F0 BL 0x1C16E04
	0x03E446F4 MOV X27, X0
	0x03E446F8 CBZ X0, 0x3E44710
	0x03E446FC LDR X8, [X28]
	0x03E44700 MOV X0, X27
	0x03E44704 LDR X1, [X8 + 0x40]
	0x03E44708 BL 0x1C16E00
	0x03E4470C CBZ X0, 0x3E4498C
	0x03E44710 LDR W8, [X28 + 0x18]
	0x03E44714 CMP W8, 0x5
	0x03E44718 B.LS 0x3E44988
	0x03E4471C STR X27, [X28 + 0x48]
	0x03E44720 ADRP X9, 0x2AF000
	0x03E44724 LDRB W8, [X26 + 0x38]
	0x03E44728 LDR X9, [X9 + 0xB58]
	0x03E4472C ADD X1, X31, 0x14
	0x03E44730 STRB W8, [X31 + 0x14]
	0x03E44734 LDR X0, [X9]
	0x03E44738 BL 0x1C16E04
	0x03E4473C MOV X27, X0
	0x03E44740 CBZ X0, 0x3E44758
	0x03E44744 LDR X8, [X28]
	0x03E44748 MOV X0, X27
	0x03E4474C LDR X1, [X8 + 0x40]
	0x03E44750 BL 0x1C16E00
	0x03E44754 CBZ X0, 0x3E4498C
	0x03E44758 LDR W8, [X28 + 0x18]
	0x03E4475C CMP W8, 0x6
	0x03E44760 B.LS 0x3E44988

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x5A5000
	011 Move W8, [X20+2018]
	012 Move X21, X2
	013 Move X22, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x2B0000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x306000
	023 Move X0, [X0+1720]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2018], W8
	027 Move [X31], X31
	028 Move X8, 0x2B0000
	029 Move X20, [X19+336]
	030 Move X8, [X8+1432]
	031 Compare X20, 0
	032 JumpIfNotEqual {34}
	033 Move X20, [X19+320]
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {143}
	047 Compare X20, 0
	048 JumpIfEqual {153}
	049 Move X0, X20
	050 Move X1, X31
	051 Call RectTransform.get_rect, X0
	052 Move W8, [X19+272]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction FCSEL not yet implemented."
	055 NotImplemented "Instruction FCMP not yet implemented."
	056 Move X23, 0x596000
	057 Move W8, [X23+1935]
	058 Compare W8, 0
	059 JumpIfNotEqual {65}
	060 Move X0, 0x2B8000
	061 Move X0, [X0+3848]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X23+1935], W8
	065 Move X8, 0x2B8000
	066 Move X8, [X8+3848]
	067 Add X1, X31, 8
	068 Move X0, X22
	069 Move X8, [X8]
	070 Move X8, [X8+184]
	071 Move V0, [X8]
	072 Move [X31+8], D0
	073 Call MultipleDisplayUtilities.GetRelativeMousePositionForDrag, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {143}
	078 Move X8, 0x306000
	079 Move X8, [X8+1720]
	080 Move S9, [X31+8]
	081 Move S8, [X31+12]
	082 Move X0, [X8]
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Add X2, X31, 0
	088 Move X0, X20
	089 Move V0, V9
	090 Move V1, V8
	091 Move X1, X21
	092 Move X3, X31
	093 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	094 Move TEMP, X0
	095 And TEMP, TEMP, 1
	096 Compare TEMP, 1
	097 JumpIfNotEqual {143}
	098 Move S8, [X31]
	099 Move S9, [X31+4]
	100 Move X0, X20
	101 Move X1, X31
	102 Call RectTransform.get_rect, X0
	103 Subtract S0, S8, S0
	104 Subtract S1, S9, S1
	105 Move [X31], S0
	106 Move [X31+8], S1
	107 Move V2, [X19+344]
	108 Move V3, [X19+348]
	109 Move W8, [X19+272]
	110 Move X0, X20
	111 Subtract S0, S0, S2
	112 Subtract S1, S1, S3
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move X1, X31
	115 NotImplemented "Instruction FCSEL not yet implemented."
	116 Call RectTransform.get_rect, X0
	117 Move W8, [X19+272]
	118 Move S0, 1
	119 Move S1, W31
	120 Move X9, [X19]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction FCSEL not yet implemented."
	123 NotImplemented "Instruction FDIV not yet implemented."
	124 NotImplemented "Instruction FMIN not yet implemented."
	125 NotImplemented "Instruction FCMP not yet implemented."
	126 And W8, W8, 0xFFFFFFFD
	127 NotImplemented "Instruction FCSEL not yet implemented."
	128 NotImplemented "Instruction CMP not yet implemented."
	129 Subtract S4, S0, S2
	130 Move V3, [X19+276]
	131 NotImplemented "Instruction FCSEL not yet implemented."
	132 Move V4, [X19+280]
	133 Move X8, [X9+1064]
	134 Move X1, [X9+1072]
	135 NotImplemented "Instruction FMIN not yet implemented."
	136 NotImplemented "Instruction FCMP not yet implemented."
	137 NotImplemented "Instruction FCSEL not yet implemented."
	138 Subtract S1, S4, S3
	139 Multiply S0, S0, S1
	140 Add S0, S3, S0
	141 Move X0, X19
	142 NotImplemented "Instruction BLR not yet implemented."
	143 Move X20, [X31+64]
	144 Move X19, [X31+72]
	145 Move X22, [X31+48]
	146 Move X21, [X31+56]
	147 Move X30, [X31+32]
	148 Move X23, [X31+40]
	149 Move D9, [X31+16]
	150 Move D8, [X31+24]
	151 Add X31, X31, 80
	152 Return 
	153 Call 0x1C17F20

Method: System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E44764 MOV X0, X19
	0x03E44768 MOV X1, X31
	0x03E4476C STR X27, [X28 + 0x50]
	0x03E44770 BL 0x3C389D4
	0x03E44774 MOV X19, X0
	0x03E44778 CBZ X0, 0x3E44790
	0x03E4477C LDR X8, [X28]
	0x03E44780 MOV X0, X19
	0x03E44784 LDR X1, [X8 + 0x40]
	0x03E44788 BL 0x1C16E00
	0x03E4478C CBZ X0, 0x3E4498C
	0x03E44790 LDR W8, [X28 + 0x18]
	0x03E44794 CMP W8, 0x7
	0x03E44798 B.LS 0x3E44988
	0x03E4479C STR X19, [X28 + 0x58]
	0x03E447A0 ADRP X8, 0x327000
	0x03E447A4 LDR X8, [X8 + 0x490]
	0x03E447A8 MOV X1, X28
	0x03E447AC MOV X2, X31
	0x03E447B0 LDR X0, [X8]
	0x03E447B4 BL 0x3227C5C
	0x03E447B8 MOV X1, X0
	0x03E447BC LDR X0, [X31 + 0x8]
	0x03E447C0 CBZ X0, 0x3E44984
	0x03E447C4 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move X19, X1
	006 Move X20, X0
	007 Move X9, [X8+456]
	008 Move X8, [X8+464]
	009 Move X1, X8
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {29}
	015 Move X8, [X20]
	016 Move X0, X20
	017 Move X9, [X8+696]
	018 Move X1, [X8+704]
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {29}
	024 Compare X19, 0
	025 JumpIfEqual {34}
	026 Move W8, [X19+328]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CSET not yet implemented."
	029 Move W0, W31
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return X0
	034 Call 0x1C17F20

Method: System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E447C8 BL 0x3C38A84
	0x03E447CC ADRP X19, 0x314000
	0x03E447D0 LDR X0, [X26 + 0x18]
	0x03E447D4 LDR X19, [X19 + 0x738]
	0x03E447D8 CBZ X0, 0x3E44984
	0x03E447DC ADRP X8, 0x315000
	0x03E447E0 LDR X8, [X8 + 0x4C8]
	0x03E447E4 SCVTF S0, W25
	0x03E447E8 MOV X2, X31
	0x03E447EC LDR X1, [X8]
	0x03E447F0 BL 0x3C15C58
	0x03E447F4 LDR X0, [X26 + 0x18]
	0x03E447F8 CBZ X0, 0x3E44984
	0x03E447FC ADRP X8, 0x315000
	0x03E44800 LDR X8, [X8 + 0x540]
	0x03E44804 SCVTF S0, W24
	0x03E44808 MOV X2, X31
	0x03E4480C LDR X1, [X8]
	0x03E44810 BL 0x3C15C58
	0x03E44814 LDR X0, [X26 + 0x18]
	0x03E44818 CBZ X0, 0x3E44984
	0x03E4481C ADRP X8, 0x315000
	0x03E44820 LDR X8, [X8 + 0x4B0]
	0x03E44824 SCVTF S0, W23
	0x03E44828 MOV X2, X31
	0x03E4482C LDR X1, [X8]
	0x03E44830 BL 0x3C15C58
	0x03E44834 LDR X0, [X26 + 0x18]
	0x03E44838 CBZ X0, 0x3E44984
	0x03E4483C ADRP X8, 0x313000
	0x03E44840 LDR X8, [X8 + 0x888]
	0x03E44844 SCVTF S0, W22
	0x03E44848 MOV X2, X31
	0x03E4484C LDR X1, [X8]
	0x03E44850 BL 0x3C15C58
	0x03E44854 LDR X0, [X26 + 0x18]
	0x03E44858 CBZ X0, 0x3E44984
	0x03E4485C ADRP X8, 0x313000
	0x03E44860 LDR X8, [X8 + 0x890]
	0x03E44864 SCVTF S0, W21
	0x03E44868 MOV X2, X31
	0x03E4486C LDR X1, [X8]
	0x03E44870 BL 0x3C15C58
	0x03E44874 LDR X0, [X26 + 0x18]
	0x03E44878 CBZ X0, 0x3E44984
	0x03E4487C ADRP X8, 0x327000
	0x03E44880 LDR X8, [X8 + 0x480]
	0x03E44884 SCVTF S0, W20
	0x03E44888 MOV X2, X31
	0x03E4488C LDR X1, [X8]
	0x03E44890 BL 0x3C15C58
	0x03E44894 LDR X0, [X26 + 0x18]
	0x03E44898 CBZ X0, 0x3E44984
	0x03E4489C ADRP X9, 0x327000
	0x03E448A0 LDRB W8, [X26 + 0x38]
	0x03E448A4 LDR X9, [X9 + 0x470]
	0x03E448A8 FMOV S0, 1
	0x03E448AC FMOV S1, W31
	0x03E448B0 CMP W8, 0x0
	0x03E448B4 LDR X1, [X9]
	0x03E448B8 FCSEL S0, S1, S0, EQ
	0x03E448BC MOV X2, X31
	0x03E448C0 BL 0x3C15C58
	0x03E448C4 LDR X0, [X26 + 0x18]
	0x03E448C8 CBZ X0, 0x3E44984
	0x03E448CC ADRP X9, 0x327000
	0x03E448D0 LDRB W8, [X26 + 0x38]
	0x03E448D4 LDR X9, [X9 + 0x458]
	0x03E448D8 MOV X2, X31
	0x03E448DC LDR X1, [X9]
	0x03E448E0 CBZ W8, 0x3E448EC
	0x03E448E4 BL 0x3C14E3C
	0x03E448E8 B 0x3E448F0
	0x03E448EC BL 0x3C14E80
	0x03E448F0 LDR X0, [X19]
	0x03E448F4 LDR W8, [X0 + 0xE0]
	0x03E448F8 CBNZ W8, 0x3E44904
	0x03E448FC BL 0x1C16DFC
	0x03E44900 LDR X0, [X19]
	0x03E44904 LDR X8, [X0 + 0xB8]
	0x03E44908 LDR X0, [X8]
	0x03E4490C CBZ X0, 0x3E44984
	0x03E44910 ADRP X9, 0x327000
	0x03E44914 LDR X9, [X9 + 0x420]
	0x03E44918 LDR W10, [X0 + 0x1C]
	0x03E4491C LDR X8, [X0 + 0x10]
	0x03E44920 LDR X9, [X9]
	0x03E44924 ADD W10, W10, 0x1
	0x03E44928 STR W10, [X0 + 0x1C]
	0x03E4492C CBZ X8, 0x3E44984
	0x03E44930 LDRSW X10, [X0 + 0x18]
	0x03E44934 LDR W11, [X8 + 0x18]
	0x03E44938 CMP W10, W11
	0x03E4493C B.CS 0x3E44954
	0x03E44940 ADD W9, W10, 0x1
	0x03E44944 ADD X8, X8, X10, 0x3, LSL
	0x03E44948 STR W9, [X0 + 0x18]
	0x03E4494C STR X26, [X8 + 0x20]
	0x03E44950 B 0x3E44968
	0x03E44954 LDR X8, [X9 + 0x20]
	0x03E44958 MOV X1, X26
	0x03E4495C LDR X8, [X8 + 0xC0]
	0x03E44960 LDR X2, [X8 + 0x70]
	0x03E44964 BL 0x301BF90
	0x03E44968 LDR X19, [X26 + 0x18]
	0x03E4496C B 0x3E444C4
	0x03E44970 LDR W8, [X27 + 0x20]
	0x03E44974 LDR X19, [X27 + 0x18]
	0x03E44978 ADD W8, W8, 0x1
	0x03E4497C STR W8, [X27 + 0x20]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x5A5000
	011 Move W8, [X21+2019]
	012 Move X20, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2B0000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x306000
	022 Move X0, [X0+1720]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2019], W8
	026 Move X0, X19
	027 Move X1, X20
	028 Move [X31+8], X31
	029 Call Slider.MayDrag, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {130}
	034 Move X21, 0x2B0000
	035 Move X21, [X21+1432]
	036 Move X0, X19
	037 Move X1, X20
	038 Call Selectable.OnPointerDown, X0, X1
	039 Move X22, 0x596000
	040 Move W8, [X22+1935]
	041 Compare W8, 0
	042 JumpIfNotEqual {48}
	043 Move X0, 0x2B8000
	044 Move X0, [X0+3848]
	045 Call 0x1C17CF4
	046 Move W8, 1
	047 Move [X22+1935], W8
	048 Move X8, 0x2B8000
	049 Move X8, [X8+3848]
	050 Move X8, [X8]
	051 Move X8, [X8+184]
	052 Move V0, [X8]
	053 Move [X19+344], D0
	054 Move X0, [X21]
	055 Move X21, [X19+336]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X21
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {121}
	068 Compare X20, 0
	069 JumpIfEqual {140}
	070 Move X21, [X19+264]
	071 Move S8, [X20+228]
	072 Move S9, [X20+232]
	073 Move X0, X20
	074 Move X1, X31
	075 Call PointerEventData.get_enterEventCamera, X0
	076 Move X23, 0x306000
	077 Move X23, [X23+1720]
	078 Move X22, X0
	079 Move X8, [X23]
	080 Move W9, [X8+224]
	081 Compare W9, 0
	082 JumpIfNotEqual {85}
	083 Move X0, X8
	084 Call 0x1C17DFC
	085 Move X0, X21
	086 Move V0, V8
	087 Move V1, V9
	088 Move X1, X22
	089 Move X2, X31
	090 Call RectTransformUtility.RectangleContainsScreenPoint, X0, X1, X2
	091 Move TEMP, X0
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {123}
	095 Move X21, [X19+264]
	096 Move S8, [X20+228]
	097 Move S9, [X20+232]
	098 Move X0, X20
	099 Move X1, X31
	100 Call PointerEventData.get_pressEventCamera, X0
	101 Move X8, [X23]
	102 Move X20, X0
	103 Move W9, [X8+224]
	104 Compare W9, 0
	105 JumpIfNotEqual {108}
	106 Move X0, X8
	107 Call 0x1C17DFC
	108 Add X2, X31, 8
	109 Move X0, X21
	110 Move V0, V8
	111 Move V1, V9
	112 Move X1, X20
	113 Move X3, X31
	114 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {130}
	119 Move X8, [X31+8]
	120 Move [X19+344], X8
	121 Compare X20, 0
	122 JumpIfEqual {140}
	123 Move X0, X20
	124 Move X1, X31
	125 Call PointerEventData.get_pressEventCamera, X0
	126 Move X2, X0
	127 Move X0, X19
	128 Move X1, X20
	129 Call Slider.UpdateDrag, X0, X1, X2
	130 Move X20, [X31+64]
	131 Move X19, [X31+72]
	132 Move X22, [X31+48]
	133 Move X21, [X31+56]
	134 Move X30, [X31+32]
	135 Move X23, [X31+40]
	136 Move D9, [X31+16]
	137 Move D8, [X31+24]
	138 Add X31, X31, 80
	139 Return 
	140 Call 0x1C17F20

Method: System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E44980 B 0x3E444C4
	0x03E44984 BL 0x1C16F20
	0x03E44988 BL 0x1C16F28
	0x03E4498C BL 0x1C16F44
	0x03E44990 MOV X1, X31
	0x03E44994 BL 0x1C16DEC
	0x03E44998 STR X30, [X31 - 0x30]!
	0x03E4499C STP X22, X21, [X31 + 0x10]
	0x03E449A0 STP X20, X19, [X31 + 0x20]
	0x03E449A4 ADRP X21, 0x5A4000
	0x03E449A8 ADRP X22, 0x2AF000
	0x03E449AC LDRB W8, [X21 + 0x7E9]
	0x03E449B0 LDR X22, [X22 + 0x970]
	0x03E449B4 MOV X19, X1
	0x03E449B8 MOV X20, X0
	0x03E449BC TBNZ X8, 0x0, 0x3E449E0
	0x03E449C0 ADRP X0, 0x2AF000
	0x03E449C4 LDR X0, [X0 + 0x970]
	0x03E449C8 BL 0x1C16CF4
	0x03E449CC ADRP X0, 0x2AF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call Slider.MayDrag, X0, X1
	007 Move TEMP, X0
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfNotEqual {24}
	011 Compare X19, 0
	012 JumpIfEqual {28}
	013 Move X0, X19
	014 Move X1, X31
	015 Call PointerEventData.get_pressEventCamera, X0
	016 Move X2, X0
	017 Move X0, X20
	018 Move X1, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Call Slider.UpdateDrag, X0, X1, X2
	023 Return 
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return 
	028 Call 0x1C17F20

Method: System.Void OnMove(UnityEngine.EventSystems.AxisEventData eventData)

Disassembly:
	0x03E449D0 LDR X0, [X0 + 0xA28]
	0x03E449D4 BL 0x1C16CF4
	0x03E449D8 MOVZ W8, 0x1
	0x03E449DC STRB W8, [X21 + 0x7E9]
	0x03E449E0 LDR X0, [X22]
	0x03E449E4 LDR W8, [X0 + 0xE0]
	0x03E449E8 CBNZ W8, 0x3E449F0
	0x03E449EC BL 0x1C16DFC
	0x03E449F0 MOV X0, X31
	0x03E449F4 BL 0x3C01998
	0x03E449F8 TBZ X0, 0x0, 0x3E44A0C
	0x03E449FC LDP X20, X19, [X31 + 0x20]
	0x03E44A00 LDP X22, X21, [X31 + 0x10]
	0x03E44A04 LDR X30, [X31], #0x30
	0x03E44A08 RET
	0x03E44A0C ADRP X8, 0x2AF000
	0x03E44A10 LDR X8, [X8 + 0xA28]
	0x03E44A14 LDR X0, [X8]
	0x03E44A18 LDR W8, [X0 + 0xE0]
	0x03E44A1C CBNZ W8, 0x3E44A24
	0x03E44A20 BL 0x1C16DFC
	0x03E44A24 MOV X0, X20
	0x03E44A28 MOV X1, X19
	0x03E44A2C LDP X20, X19, [X31 + 0x20]
	0x03E44A30 LDP X22, X21, [X31 + 0x10]
	0x03E44A34 MOV X2, X31
	0x03E44A38 LDR X30, [X31], #0x30
	0x03E44A3C B 0x3C06B0C
	0x03E44A40 MOVZ W8, 0x8
	0x03E44A44 MOV X1, X31
	0x03E44A48 STR W8, [X0 + 0x2C]
	0x03E44A4C B 0x33BDD8C
	0x03E44A50 STR X30, [X31 - 0x50]!
	0x03E44A54 STP X26, X25, [X31 + 0x10]
	0x03E44A58 STP X24, X23, [X31 + 0x20]
	0x03E44A5C STP X22, X21, [X31 + 0x30]
	0x03E44A60 STP X20, X19, [X31 + 0x40]
	0x03E44A64 ADRP X20, 0x5A4000
	0x03E44A68 ADRP X23, 0x2AF000
	0x03E44A6C LDRB W8, [X20 + 0x7EB]
	0x03E44A70 LDR X23, [X23 + 0x598]
	0x03E44A74 MOV X19, X0
	0x03E44A78 TBNZ X8, 0x0, 0x3E44AC0
	0x03E44A7C ADRP X0, 0x327000
	0x03E44A80 LDR X0, [X0 + 0x498]
	0x03E44A84 BL 0x1C16CF4
	0x03E44A88 ADRP X0, 0x327000
	0x03E44A8C LDR X0, [X0 + 0x428]
	0x03E44A90 BL 0x1C16CF4
	0x03E44A94 ADRP X0, 0x327000
	0x03E44A98 LDR X0, [X0 + 0x430]
	0x03E44A9C BL 0x1C16CF4
	0x03E44AA0 ADRP X0, 0x2AF000
	0x03E44AA4 LDR X0, [X0 + 0x598]
	0x03E44AA8 BL 0x1C16CF4
	0x03E44AAC ADRP X0, 0x314000
	0x03E44AB0 LDR X0, [X0 + 0x738]
	0x03E44AB4 BL 0x1C16CF4
	0x03E44AB8 MOVZ W8, 0x1
	0x03E44ABC STRB W8, [X20 + 0x7EB]
	0x03E44AC0 LDR X0, [X23]
	0x03E44AC4 LDR W8, [X0 + 0xE0]
	0x03E44AC8 CBNZ W8, 0x3E44AD0
	0x03E44ACC BL 0x1C16DFC
	0x03E44AD0 MOV X0, X19
	0x03E44AD4 MOV X1, X31
	0x03E44AD8 MOV X2, X31
	0x03E44ADC BL 0x3C3883C
	0x03E44AE0 TBNZ X0, 0x0, 0x3E44BA0
	0x03E44AE4 ADRP X24, 0x314000
	0x03E44AE8 LDR X24, [X24 + 0x738]
	0x03E44AEC LDR X0, [X24]
	0x03E44AF0 LDR W8, [X0 + 0xE0]
	0x03E44AF4 CBNZ W8, 0x3E44B00
	0x03E44AF8 BL 0x1C16DFC
	0x03E44AFC LDR X0, [X24]
	0x03E44B00 LDR X8, [X0 + 0xB8]
	0x03E44B04 LDR X8, [X8]
	0x03E44B08 CBZ X8, 0x3E44C0C
	0x03E44B0C LDR W8, [X8 + 0x18]
	0x03E44B10 SUBS W25, W8, 0x1
	0x03E44B14 B.LT 0x3E44BA0
	0x03E44B18 ADRP X26, 0x327000
	0x03E44B1C LDR X26, [X26 + 0x430]
	0x03E44B20 MOV W20, W31
	0x03E44B24 LDR W8, [X0 + 0xE0]
	0x03E44B28 CBNZ W8, 0x3E44B34
	0x03E44B2C BL 0x1C16DFC
	0x03E44B30 LDR X0, [X24]
	0x03E44B34 LDR X8, [X0 + 0xB8]
	0x03E44B38 LDR X0, [X8]
	0x03E44B3C CBZ X0, 0x3E44C0C
	0x03E44B40 LDR X2, [X26]
	0x03E44B44 MOV W1, W20
	0x03E44B48 BL 0x301BCCC
	0x03E44B4C CBZ X0, 0x3E44C0C
	0x03E44B50 MOV X21, X0
	0x03E44B54 LDR X0, [X23]
	0x03E44B58 LDR X22, [X21 + 0x18]
	0x03E44B5C LDR W8, [X0 + 0xE0]
	0x03E44B60 CBNZ W8, 0x3E44B68
	0x03E44B64 BL 0x1C16DFC
	0x03E44B68 MOV X0, X22
	0x03E44B6C MOV X1, X19
	0x03E44B70 MOV X2, X31
	0x03E44B74 BL 0x3C354F8
	0x03E44B78 TBZ X0, 0x0, 0x3E44B90
	0x03E44B7C CMP W25, W20
	0x03E44B80 B.EQ 0x3E44BA0
	0x03E44B84 LDR X0, [X24]
	0x03E44B88 ADD W20, W20, 0x1
	0x03E44B8C B 0x3E44B24
	0x03E44B90 LDR W8, [X21 + 0x20]
	0x03E44B94 SUBS W8, W8, 0x1
	0x03E44B98 STR W8, [X21 + 0x20]
	0x03E44B9C B.EQ 0x3E44BB8
	0x03E44BA0 LDP X20, X19, [X31 + 0x40]
	0x03E44BA4 LDP X22, X21, [X31 + 0x30]
	0x03E44BA8 LDP X24, X23, [X31 + 0x20]
	0x03E44BAC LDP X26, X25, [X31 + 0x10]
	0x03E44BB0 LDR X30, [X31], #0x50
	0x03E44BB4 RET
	0x03E44BB8 LDR X0, [X21 + 0x18]
	0x03E44BBC BL 0x3E3891C
	0x03E44BC0 STR X31, [X21 + 0x10]
	0x03E44BC4 LDR X0, [X24]
	0x03E44BC8 LDR W8, [X0 + 0xE0]
	0x03E44BCC CBNZ W8, 0x3E44BD8
	0x03E44BD0 BL 0x1C16DFC
	0x03E44BD4 LDR X0, [X24]
	0x03E44BD8 LDR X8, [X0 + 0xB8]
	0x03E44BDC LDR X0, [X8]
	0x03E44BE0 CBZ X0, 0x3E44C0C
	0x03E44BE4 ADRP X8, 0x327000
	0x03E44BE8 LDR X8, [X8 + 0x498]
	0x03E44BEC MOV W1, W20
	0x03E44BF0 LDP X20, X19, [X31 + 0x40]
	0x03E44BF4 LDP X22, X21, [X31 + 0x30]
	0x03E44BF8 LDR X2, [X8]
	0x03E44BFC LDP X24, X23, [X31 + 0x20]
	0x03E44C00 LDP X26, X25, [X31 + 0x10]
	0x03E44C04 LDR X30, [X31], #0x50
	0x03E44C08 B 0x301DA48
	0x03E44C0C BL 0x1C16F20
	0x03E44C10 STP X30, X23, [X31 - 0x30]!
	0x03E44C14 STP X22, X21, [X31 + 0x10]
	0x03E44C18 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5A5000
	006 Move W8, [X21+2020]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2B0000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2020], W8
	018 Move X8, [X19]
	019 Move X0, X19
	020 Move X9, [X8+456]
	021 Move X1, [X8+464]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {156}
	027 Move X8, [X19]
	028 Move X0, X19
	029 Move X9, [X8+696]
	030 Move X1, [X8+704]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {156}
	036 Compare X20, 0
	037 JumpIfEqual {169}
	038 Move W8, [X20+40]
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move X9, -53129216
	041 Add X9, X9, 1585
	042 NotImplemented "Instruction ADR not yet implemented."
	043 Move W11, [X9]
	044 Add X10, X10, X11
	045 CallNoReturn X10
	046 Move W8, [X19+272]
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Move X8, [X19]
	049 Move X9, [X8+744]
	050 Move X1, [X8+752]
	051 Move W8, [X19+272]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X8, [X19]
	054 Move X9, [X8+776]
	055 Move X1, [X8+784]
	056 Move W8, [X19+272]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X8, [X19]
	059 Move X9, [X8+760]
	060 Move X1, [X8+768]
	061 Move X0, X19
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X8, 0x2B0000
	064 Move X8, [X8+1432]
	065 Move X21, X0
	066 Move X8, [X8]
	067 Move W9, [X8+224]
	068 Compare W9, 0
	069 JumpIfNotEqual {72}
	070 Move X0, X8
	071 Call 0x1C17DFC
	072 Move X0, X21
	073 Move X1, X31
	074 Move X2, X31
	075 Call Object.op_Equality, X0, X1
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {156}
	080 Move X8, [X19]
	081 Move W9, [X19+272]
	082 Move X0, X19
	083 Move X10, [X8+1048]
	084 Move X1, [X8+1056]
	085 And W20, W9, 0xFFFFFFFD
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move W8, [X19+284]
	088 Move S1, 1
	089 Compare W8, 0
	090 JumpIfNotEqual {97}
	091 Move V1, [X19+280]
	092 Move V2, [X19+276]
	093 Move X8, -53841920
	094 Move V3, [X8+188]
	095 Subtract S1, S1, S2
	096 Multiply S1, S1, S3
	097 Move X8, [X19]
	098 NotImplemented "Instruction FNEG not yet implemented."
	099 NotImplemented "Instruction CMP not yet implemented."
	100 NotImplemented "Instruction FCSEL not yet implemented."
	101 Move W8, [X19+272]
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X8, [X19]
	104 Move X9, [X8+792]
	105 Move X1, [X8+800]
	106 Move X0, X19
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X8, 0x2B0000
	109 Move X8, [X8+1432]
	110 Move X21, X0
	111 Move X8, [X8]
	112 Move W9, [X8+224]
	113 Compare W9, 0
	114 JumpIfNotEqual {117}
	115 Move X0, X8
	116 Call 0x1C17DFC
	117 Move X0, X21
	118 Move X1, X31
	119 Move X2, X31
	120 Call Object.op_Equality, X0, X1
	121 Move TEMP, X0
	122 And TEMP, TEMP, 1
	123 Compare TEMP, 1
	124 JumpIfNotEqual {156}
	125 Move X8, [X19]
	126 Move W9, [X19+272]
	127 Move X0, X19
	128 Move X10, [X8+1048]
	129 Move X1, [X8+1056]
	130 And W20, W9, 0xFFFFFFFD
	131 NotImplemented "Instruction BLR not yet implemented."
	132 Move W8, [X19+284]
	133 Move S1, 1
	134 Compare W8, 0
	135 JumpIfNotEqual {142}
	136 Move V1, [X19+280]
	137 Move V2, [X19+276]
	138 Move X8, -53841920
	139 Move V3, [X8+188]
	140 Subtract S1, S1, S2
	141 Multiply S1, S1, S3
	142 Move X8, [X19]
	143 NotImplemented "Instruction FNEG not yet implemented."
	144 NotImplemented "Instruction CMP not yet implemented."
	145 NotImplemented "Instruction FCSEL not yet implemented."
	146 Move X3, [X8+1160]
	147 Move X2, [X8+1168]
	148 Move X0, X19
	149 Move X20, [X31+16]
	150 Move X19, [X31+24]
	151 Add S0, S0, S1
	152 Move W1, 1
	153 Move X30, [X31+32]
	154 Move X21, [X31+40]
	155 CallNoReturn X3
	156 Move X0, X19
	157 Move X1, X20
	158 Move X20, [X31+16]
	159 Move X19, [X31+24]
	160 Move X30, [X31+32]
	161 Move X21, [X31+40]
	162 Call Selectable.OnMove, X0, X1
	163 Return 
	164 Move X20, [X31+16]
	165 Move X19, [X31+24]
	166 Move X30, [X31+32]
	167 Move X21, [X31+40]
	168 Return 
	169 Call 0x1C17F20

Method: UnityEngine.UI.Selectable FindSelectableOnLeft()

Disassembly:
	0x03E44C1C ADRP X19, 0x5A4000
	0x03E44C20 ADRP X21, 0x314000
	0x03E44C24 LDRB W8, [X19 + 0x7EC]
	0x03E44C28 LDR X21, [X21 + 0x738]
	0x03E44C2C TBNZ X8, 0x0, 0x3E44C68
	0x03E44C30 ADRP X0, 0x327000
	0x03E44C34 LDR X0, [X0 + 0x4A0]
	0x03E44C38 BL 0x1C16CF4
	0x03E44C3C ADRP X0, 0x327000

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+272]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Call Selectable.FindSelectableOnLeft, X0
	006 Return X0
	007 Move X0, X31
	008 Return X0

Method: UnityEngine.UI.Selectable FindSelectableOnRight()

Disassembly:
	0x03E44C40 LDR X0, [X0 + 0x428]
	0x03E44C44 BL 0x1C16CF4
	0x03E44C48 ADRP X0, 0x327000
	0x03E44C4C LDR X0, [X0 + 0x430]
	0x03E44C50 BL 0x1C16CF4
	0x03E44C54 ADRP X0, 0x314000
	0x03E44C58 LDR X0, [X0 + 0x738]
	0x03E44C5C BL 0x1C16CF4
	0x03E44C60 MOVZ W8, 0x1

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+272]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Call Selectable.FindSelectableOnRight, X0
	006 Return X0
	007 Move X0, X31
	008 Return X0

Method: UnityEngine.UI.Selectable FindSelectableOnUp()

Disassembly:
	0x03E44C64 STRB W8, [X19 + 0x7EC]
	0x03E44C68 LDR X0, [X21]
	0x03E44C6C LDR W8, [X0 + 0xE0]
	0x03E44C70 CBNZ W8, 0x3E44C7C
	0x03E44C74 BL 0x1C16DFC
	0x03E44C78 LDR X0, [X21]
	0x03E44C7C LDR X8, [X0 + 0xB8]
	0x03E44C80 LDR X8, [X8]
	0x03E44C84 CBZ X8, 0x3E44D2C

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+272]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Call Selectable.FindSelectableOnUp, X0
	006 Return X0
	007 Move X0, X31
	008 Return X0

Method: UnityEngine.UI.Selectable FindSelectableOnDown()

Disassembly:
	0x03E44C88 LDR W8, [X8 + 0x18]
	0x03E44C8C ADRP X22, 0x327000
	0x03E44C90 LDR X22, [X22 + 0x430]
	0x03E44C94 MOV W19, W31
	0x03E44C98 BIC W23, W8, W8, 0x1F
	0x03E44C9C LDR W8, [X0 + 0xE0]
	0x03E44CA0 CBNZ W8, 0x3E44CAC
	0x03E44CA4 BL 0x1C16DFC
	0x03E44CA8 LDR X0, [X21]

ISIL:
	001 Move W8, [X0+40]
	002 NotImplemented "Instruction CMP not yet implemented."
	003 Move W8, [X0+272]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Call Selectable.FindSelectableOnDown, X0
	006 Return X0
	007 Move X0, X31
	008 Return X0

Method: System.Void OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E44CAC LDR X8, [X0 + 0xB8]
	0x03E44CB0 LDR X0, [X8]
	0x03E44CB4 CBZ X0, 0x3E44D2C
	0x03E44CB8 CMP W23, W19
	0x03E44CBC B.EQ 0x3E44CEC
	0x03E44CC0 LDR X2, [X22]

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {7}
	004 Move [X1+324], W31
	005 Move X30, [X31+16]
	006 Return 
	007 Call 0x1C17F20

Method: System.Void SetDirection(UnityEngine.UI.Slider/Direction direction, System.Boolean includeRectLayouts)

Disassembly:
	0x03E44CC4 MOV W1, W19
	0x03E44CC8 BL 0x301BCCC
	0x03E44CCC CBZ X0, 0x3E44D2C
	0x03E44CD0 MOV X20, X0
	0x03E44CD4 LDR X0, [X0 + 0x18]
	0x03E44CD8 BL 0x3E3891C
	0x03E44CDC STR X31, [X20 + 0x10]
	0x03E44CE0 LDR X0, [X21]
	0x03E44CE4 ADD W19, W19, 0x1
	0x03E44CE8 B 0x3E44C9C
	0x03E44CEC LDP W2, W8, [X0 + 0x18]
	0x03E44CF0 ADD W8, W8, 0x1
	0x03E44CF4 CMP W2, 0x1
	0x03E44CF8 STP W31, W8, [X0 + 0x18]
	0x03E44CFC B.LT 0x3E44D1C
	0x03E44D00 LDR X0, [X0 + 0x10]
	0x03E44D04 LDP X20, X19, [X31 + 0x20]
	0x03E44D08 LDP X22, X21, [X31 + 0x10]
	0x03E44D0C MOV W1, W31
	0x03E44D10 MOV X3, X31
	0x03E44D14 LDP X30, X23, [X31], #0x30
	0x03E44D18 B 0x339FA34
	0x03E44D1C LDP X20, X19, [X31 + 0x20]
	0x03E44D20 LDP X22, X21, [X31 + 0x10]
	0x03E44D24 LDP X30, X23, [X31], #0x30
	0x03E44D28 RET
	0x03E44D2C BL 0x1C16F20
	0x03E44D30 STR X30, [X31 - 0x30]!
	0x03E44D34 STP X22, X21, [X31 + 0x10]
	0x03E44D38 STP X20, X19, [X31 + 0x20]
	0x03E44D3C ADRP X21, 0x5A4000
	0x03E44D40 ADRP X22, 0x327000
	0x03E44D44 ADRP X19, 0x327000
	0x03E44D48 ADRP X20, 0x314000
	0x03E44D4C LDRB W8, [X21 + 0x7ED]
	0x03E44D50 LDR X22, [X22 + 0x4A8]
	0x03E44D54 LDR X19, [X19 + 0x4B0]
	0x03E44D58 LDR X20, [X20 + 0x738]
	0x03E44D5C TBNZ X8, 0x0, 0x3E44D8C
	0x03E44D60 ADRP X0, 0x327000
	0x03E44D64 LDR X0, [X0 + 0x4B0]
	0x03E44D68 BL 0x1C16CF4
	0x03E44D6C ADRP X0, 0x327000
	0x03E44D70 LDR X0, [X0 + 0x4A8]
	0x03E44D74 BL 0x1C16CF4
	0x03E44D78 ADRP X0, 0x314000
	0x03E44D7C LDR X0, [X0 + 0x738]
	0x03E44D80 BL 0x1C16CF4
	0x03E44D84 MOVZ W8, 0x1
	0x03E44D88 STRB W8, [X21 + 0x7ED]
	0x03E44D8C LDR X0, [X22]
	0x03E44D90 BL 0x1C16F10
	0x03E44D94 LDR X1, [X19]
	0x03E44D98 MOV X19, X0
	0x03E44D9C BL 0x301B7C4
	0x03E44DA0 LDR X8, [X20]
	0x03E44DA4 LDP X22, X21, [X31 + 0x10]
	0x03E44DA8 LDR X8, [X8 + 0xB8]
	0x03E44DAC STR X19, [X8]
	0x03E44DB0 LDP X20, X19, [X31 + 0x20]
	0x03E44DB4 LDR X30, [X31], #0x30
	0x03E44DB8 RET
	0x03E44DBC STR X30, [X31 - 0x30]!
	0x03E44DC0 STP X22, X21, [X31 + 0x10]
	0x03E44DC4 STP X20, X19, [X31 + 0x20]
	0x03E44DC8 ADRP X22, 0x5A4000
	0x03E44DCC ADRP X21, 0x2B1000
	0x03E44DD0 ADRP X20, 0x315000
	0x03E44DD4 LDRB W8, [X22 + 0x7EE]
	0x03E44DD8 LDR X21, [X21 + 0x278]
	0x03E44DDC LDR X20, [X20 + 0x1A8]
	0x03E44DE0 MOV X19, X0
	0x03E44DE4 TBNZ X8, 0x0, 0x3E44E08
	0x03E44DE8 ADRP X0, 0x2B1000
	0x03E44DEC LDR X0, [X0 + 0x278]
	0x03E44DF0 BL 0x1C16CF4
	0x03E44DF4 ADRP X0, 0x315000
	0x03E44DF8 LDR X0, [X0 + 0x1A8]
	0x03E44DFC BL 0x1C16CF4
	0x03E44E00 MOVZ W8, 0x1
	0x03E44E04 STRB W8, [X22 + 0x7EE]
	0x03E44E08 MOV X0, X31
	0x03E44E0C BL 0x3CDA3B8
	0x03E44E10 STR X0, [X19 + 0xD8]
	0x03E44E14 LDR X8, [X21]
	0x03E44E18 MOVZ W1, 0x4
	0x03E44E1C LDR X8, [X8 + 0xB8]
	0x03E44E20 LDR X8, [X8]
	0x03E44E24 STR X8, [X19 + 0xE0]
	0x03E44E28 LDR X0, [X20]
	0x03E44E2C BL 0x1C16D6C
	0x03E44E30 STR X0, [X19 + 0x100]
	0x03E44E34 MOV X0, X19
	0x03E44E38 MOV X1, X31
	0x03E44E3C BL 0x3E37FD0
	0x03E44E40 STRB W31, [X19 + 0xA0]
	0x03E44E44 LDP X20, X19, [X31 + 0x20]
	0x03E44E48 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5A5000
	007 Move W8, [X22+2021]
	008 Move W20, W2
	009 Move W21, W1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x306000
	016 Move X0, [X0+1720]
	017 Call 0x1C17CF4
	018 Move X0, 0x2D7000
	019 Move X0, [X0+3184]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X22+2021], W8
	023 Move W22, [X19+272]
	024 Move X0, X19
	025 Move W1, W21
	026 Call Slider.set_direction, X0, X1
	027 Move TEMP, X20
	028 And TEMP, TEMP, 1
	029 Compare TEMP, 1
	030 JumpIfNotEqual {97}
	031 Move W8, [X19+272]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CSET not yet implemented."
	034 And W21, W22, 0xFFFFFFFD
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Xor W9, W9, W10
	038 Move TEMP, X9
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {70}
	042 Move X0, X19
	043 Move X1, X31
	044 Call Component.get_transform, X0
	045 Move X8, 0x306000
	046 Move X8, [X8+1720]
	047 Move X20, X0
	048 Move X8, [X8]
	049 Move W9, [X8+224]
	050 Compare W9, 0
	051 JumpIfEqual {60}
	052 Compare X20, 0
	053 JumpIfEqual {64}
	054 Move X8, 0x2D7000
	055 Move X8, [X8+3184]
	056 Move X9, [X20]
	057 Move X8, [X8]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CSEL not yet implemented."
	060 Move X0, X8
	061 Call 0x1C17DFC
	062 Compare X20, 0
	063 JumpIfNotEqual {54}
	064 Move X0, X31
	065 Move W1, 1
	066 Move W2, 1
	067 Move X3, X31
	068 Call RectTransformUtility.FlipLayoutAxes, X0, X1, X2
	069 Move W8, [X19+272]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 And W8, W8, 0xFFFFFFFD
	072 NotImplemented "Instruction CSET not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 NotImplemented "Instruction CSET not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X0, X19
	077 Move X1, X31
	078 Call Component.get_transform, X0
	079 Move X8, 0x306000
	080 Move X8, [X8+1720]
	081 Move X20, X0
	082 Move X0, [X8]
	083 Move W8, [X19+272]
	084 Move W9, [X0+224]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 NotImplemented "Instruction CSET not yet implemented."
	087 Compare W9, 0
	088 JumpIfEqual {103}
	089 Compare X20, 0
	090 JumpIfEqual {106}
	091 Move X8, 0x2D7000
	092 Move X8, [X8+3184]
	093 Move X9, [X20]
	094 Move X8, [X8]
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CSEL not yet implemented."
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X22, [X31+16]
	100 Move X21, [X31+24]
	101 Move X30, [X31+48]
	102 Return 
	103 Call 0x1C17DFC
	104 Compare X20, 0
	105 JumpIfNotEqual {91}
	106 Move X0, X31
	107 Move W1, W19
	108 Move X20, [X31+32]
	109 Move X19, [X31+40]
	110 Move X22, [X31+16]
	111 Move X21, [X31+24]
	112 Move W2, 1
	113 Move W3, 1
	114 Move X4, X31
	115 Move X30, [X31+48]
	116 Call RectTransformUtility.FlipLayoutOnAxis, X0, X1, X2, X3
	117 Return 

Method: UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()

Disassembly:
	0x03E44E4C LDR X30, [X31], #0x30
	0x03E44E50 RET

ISIL:
	001 Move X1, X31
	002 Call Component.get_transform, X0
	003 Return X0

