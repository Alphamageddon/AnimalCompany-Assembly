Type: UnityEngine.UI.ScrollRect

Method: UnityEngine.RectTransform get_content()

Disassembly:
	0x03E3E224 BL 0x3E3F570
	0x03E3E228 CBZ X20, 0x3E3E2E4

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_content(UnityEngine.RectTransform value)

Disassembly:
	0x03E3E22C MOVZ W1, 0x1
	0x03E3E230 MOV X0, X20

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Boolean get_horizontal()

Disassembly:
	0x03E3E234 BL 0x3E3B84C
	0x03E3E238 LDR X0, [X21]

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_horizontal(System.Boolean value)

Disassembly:
	0x03E3E23C LDR X20, [X19 + 0x50]
	0x03E3E240 LDR W8, [X0 + 0xE0]
	0x03E3E244 CBNZ W8, 0x3E3E24C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+40], W8
	003 Return 

Method: System.Boolean get_vertical()

Disassembly:
	0x03E3E248 BL 0x1C16DFC
	0x03E3E24C MOV X0, X20

ISIL:
	001 Move W0, [X0+41]
	002 Return X0

Method: System.Void set_vertical(System.Boolean value)

Disassembly:
	0x03E3E250 MOV X1, X31
	0x03E3E254 BL 0x3C38948
	0x03E3E258 TBZ X0, 0x0, 0x3E3E2A0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+41], W8
	003 Return 

Method: UnityEngine.UI.ScrollRect/MovementType get_movementType()

Disassembly:
	0x03E3E25C LDR V0, [X19 + 0x98]
	0x03E3E260 LDR X0, [X19 + 0x50]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_movementType(UnityEngine.UI.ScrollRect/MovementType value)

Disassembly:
	0x03E3E264 FADD S0, S0, S0
	0x03E3E268 FCMP S0, 0x0

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: System.Single get_elasticity()

Disassembly:
	0x03E3E26C B.LE 0x3E3E2B0
	0x03E3E270 CBZ X0, 0x3E3E2E4

ISIL:
	001 Move V0, [X0+48]
	002 Return V0

Method: System.Void set_elasticity(System.Single value)

Disassembly:
	0x03E3E274 LDR V1, [X19 + 0xB0]
	0x03E3E278 FABS S2, S8

ISIL:
	001 Move [X0+48], S0
	002 Return 

Method: System.Boolean get_inertia()

Disassembly:
	0x03E3E27C FMOV S3, 1
	0x03E3E280 FADD S1, S1, S1

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_inertia(System.Boolean value)

Disassembly:
	0x03E3E284 FSUB S1, S1, S2
	0x03E3E288 FDIV S0, S1, S0
	0x03E3E28C FMIN S1, S0, S3

ISIL:
	001 And W8, W1, 1
	002 Move [X0+52], W8
	003 Return 

Method: System.Single get_decelerationRate()

Disassembly:
	0x03E3E290 FCMP S0, 0x0
	0x03E3E294 FMOV S0, W31

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_decelerationRate(System.Single value)

Disassembly:
	0x03E3E298 FCSEL S0, S1, S0, PL
	0x03E3E29C B 0x3E3E2B8

ISIL:
	001 Move [X0+56], S0
	002 Return 

Method: System.Single get_scrollSensitivity()

Disassembly:
	0x03E3E2A0 LDP X20, X19, [X31 + 0x20]
	0x03E3E2A4 LDP X30, X21, [X31 + 0x10]

ISIL:
	001 Move V0, [X0+60]
	002 Return V0

Method: System.Void set_scrollSensitivity(System.Single value)

Disassembly:
	0x03E3E2A8 LDP D9, D8, [X31], #0x30
	0x03E3E2AC RET

ISIL:
	001 Move [X0+60], S0
	002 Return 

Method: UnityEngine.RectTransform get_viewport()

Disassembly:
	0x03E3E2B0 FMOV S0, 1
	0x03E3E2B4 CBZ X0, 0x3E3E2E4

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_viewport(UnityEngine.RectTransform value)

Disassembly:
	0x03E3E2B8 BL 0x3E3B920
	0x03E3E2BC LDR X20, [X19 + 0x50]

ISIL:
	001 Move [X0+64], X1

Method: UnityEngine.UI.Scrollbar get_horizontalScrollbar()

Disassembly:
	0x03E3E374 LDP S0, S1, [X8]
	0x03E3E378 B 0x3E3E38C

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_horizontalScrollbar(UnityEngine.UI.Scrollbar value)

Disassembly:
	0x03E3E37C LDR X0, [X19 + 0x20]
	0x03E3E380 CBZ X0, 0x3E3E3BC
	0x03E3E384 MOV X1, X31
	0x03E3E388 BL 0x3C3E7F0
	0x03E3E38C STP S0, S1, [X19 + 0xC4]
	0x03E3E390 LDR V0, [X19 + 0xA]
	0x03E3E394 LDR X8, [X19 + 0xB0]
	0x03E3E398 LDUR V1, [X19 + 0x88]
	0x03E3E39C LDR X9, [X19 + 0x98]
	0x03E3E3A0 STUR V0, [X19 + 0xE4]
	0x03E3E3A4 STUR X8, [X19 + 0xF4]
	0x03E3E3A8 STUR V1, [X19 + 0xCC]
	0x03E3E3AC STUR X9, [X19 + 0xDC]
	0x03E3E3B0 LDP X20, X19, [X31 + 0x10]
	0x03E3E3B4 LDP X30, X21, [X31], #0x20
	0x03E3E3B8 RET
	0x03E3E3BC BL 0x1C16F20
	0x03E3E3C0 RET
	0x03E3E3C4 RET
	0x03E3E3C8 STR X30, [X31 - 0x30]!
	0x03E3E3CC STP X22, X21, [X31 + 0x10]
	0x03E3E3D0 STP X20, X19, [X31 + 0x20]
	0x03E3E3D4 ADRP X20, 0x5AA000
	0x03E3E3D8 LDRB W8, [X20 + 0x7A8]
	0x03E3E3DC MOV X19, X0
	0x03E3E3E0 TBNZ X8, 0x0, 0x3E3E434
	0x03E3E3E4 ADRP X0, 0x31A000
	0x03E3E3E8 LDR X0, [X0 + 0x718]
	0x03E3E3EC BL 0x1C16CF4
	0x03E3E3F0 ADRP X0, 0x2B5000
	0x03E3E3F4 LDR X0, [X0 + 0x598]
	0x03E3E3F8 BL 0x1C16CF4
	0x03E3E3FC ADRP X0, 0x32D000
	0x03E3E400 LDR X0, [X0 + 0x388]
	0x03E3E404 BL 0x1C16CF4
	0x03E3E408 ADRP X0, 0x32D000
	0x03E3E40C LDR X0, [X0 + 0x390]
	0x03E3E410 BL 0x1C16CF4
	0x03E3E414 ADRP X0, 0x31A000
	0x03E3E418 LDR X0, [X0 + 0xB68]
	0x03E3E41C BL 0x1C16CF4
	0x03E3E420 ADRP X0, 0x31A000
	0x03E3E424 LDR X0, [X0 + 0x8C8]
	0x03E3E428 BL 0x1C16CF4
	0x03E3E42C MOVZ W8, 0x1
	0x03E3E430 STRB W8, [X20 + 0x7A8]
	0x03E3E434 ADRP X22, 0x2B5000
	0x03E3E438 LDR X22, [X22 + 0x598]
	0x03E3E43C MOV X0, X19
	0x03E3E440 MOV X1, X31
	0x03E3E444 BL 0x3E4BDBC
	0x03E3E448 LDRB W8, [X19 + 0x28]
	0x03E3E44C CBZ W8, 0x3E3E4C8
	0x03E3E450 LDR X0, [X22]
	0x03E3E454 LDR X20, [X19 + 0x48]
	0x03E3E458 LDR W8, [X0 + 0xE0]
	0x03E3E45C CBNZ W8, 0x3E3E464
	0x03E3E460 BL 0x1C16DFC
	0x03E3E464 MOV X0, X20
	0x03E3E468 MOV X1, X31
	0x03E3E46C BL 0x3C38948
	0x03E3E470 TBZ X0, 0x0, 0x3E3E4C8
	0x03E3E474 LDR X8, [X19 + 0x48]
	0x03E3E478 CBZ X8, 0x3E3E580
	0x03E3E47C LDR X20, [X8 + 0x118]
	0x03E3E480 ADRP X8, 0x31A000
	0x03E3E484 LDR X8, [X8 + 0xB68]
	0x03E3E488 LDR X0, [X8]
	0x03E3E48C BL 0x1C16F10
	0x03E3E490 ADRP X8, 0x32D000
	0x03E3E494 LDR X8, [X8 + 0x388]
	0x03E3E498 MOV X1, X19
	0x03E3E49C MOV X3, X31
	0x03E3E4A0 MOV X21, X0
	0x03E3E4A4 LDR X2, [X8]
	0x03E3E4A8 BL 0x2725EC4
	0x03E3E4AC CBZ X20, 0x3E3E580
	0x03E3E4B0 ADRP X8, 0x31A000
	0x03E3E4B4 LDR X8, [X8 + 0x8C8]
	0x03E3E4B8 MOV X0, X20
	0x03E3E4BC MOV X1, X21
	0x03E3E4C0 LDR X2, [X8]
	0x03E3E4C4 BL 0x272A4B0
	0x03E3E4C8 LDRB W8, [X19 + 0x29]
	0x03E3E4CC CBZ W8, 0x3E3E548
	0x03E3E4D0 LDR X0, [X22]
	0x03E3E4D4 LDR X20, [X19 + 0x50]
	0x03E3E4D8 LDR W8, [X0 + 0xE0]
	0x03E3E4DC CBNZ W8, 0x3E3E4E4
	0x03E3E4E0 BL 0x1C16DFC
	0x03E3E4E4 MOV X0, X20
	0x03E3E4E8 MOV X1, X31
	0x03E3E4EC BL 0x3C38948
	0x03E3E4F0 TBZ X0, 0x0, 0x3E3E548
	0x03E3E4F4 LDR X8, [X19 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x5AB000
	008 Move X23, 0x2B6000
	009 Move W8, [X21+1954]
	010 Move X23, [X23+1432]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x2B6000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x32E000
	021 Move X0, [X0+904]
	022 Call 0x1C17CF4
	023 Move X0, 0x31B000
	024 Move X0, [X0+2920]
	025 Call 0x1C17CF4
	026 Move X0, 0x31B000
	027 Move X0, [X0+2248]
	028 Call 0x1C17CF4
	029 Move X0, 0x31C000
	030 Move X0, [X0+112]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+1954], W8
	034 Move X0, [X23]
	035 Move X21, [X19+72]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X31
	042 Call Object.op_Implicit, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {70}
	047 Move X8, [X19+72]
	048 Compare X8, 0
	049 JumpIfEqual {118}
	050 Move X21, [X8+280]
	051 Move X8, 0x31B000
	052 Move X8, [X8+2920]
	053 Move X0, [X8]
	054 Call 0x1C17F10
	055 Move X8, 0x32E000
	056 Move X8, [X8+904]
	057 Move X1, X19
	058 Move X3, X31
	059 Move X22, X0
	060 Move X2, [X8]
	061 Call UnityAction`1<Single>..ctor, X0, X1, X2
	062 Compare X21, 0
	063 JumpIfEqual {118}
	064 Move X8, 0x31C000
	065 Move X8, [X8+112]
	066 Move X0, X21
	067 Move X1, X22
	068 Move X2, [X8]
	069 Call UnityEvent`1<Single>.RemoveListener, X0, X1
	070 Move W8, [X19+40]
	071 Move [X19+72], X20
	072 Compare W8, 0
	073 JumpIfEqual {109}
	074 Move X0, [X23]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X0, X20
	080 Move X1, X31
	081 Call Object.op_Implicit, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {109}
	086 Move X8, [X19+72]
	087 Compare X8, 0
	088 JumpIfEqual {118}
	089 Move X20, [X8+280]
	090 Move X8, 0x31B000
	091 Move X8, [X8+2920]
	092 Move X0, [X8]
	093 Call 0x1C17F10
	094 Move X8, 0x32E000
	095 Move X8, [X8+904]
	096 Move X1, X19
	097 Move X3, X31
	098 Move X21, X0
	099 Move X2, [X8]
	100 Call UnityAction`1<Single>..ctor, X0, X1, X2
	101 Compare X20, 0
	102 JumpIfEqual {118}
	103 Move X8, 0x31B000
	104 Move X8, [X8+2248]
	105 Move X0, X20
	106 Move X1, X21
	107 Move X2, [X8]
	108 Call UnityEvent`1<Single>.AddListener, X0, X1
	109 Move X0, X19
	110 Move X20, [X31+32]
	111 Move X19, [X31+40]
	112 Move X22, [X31+16]
	113 Move X21, [X31+24]
	114 Move X30, [X31+48]
	115 Move X23, [X31+56]
	116 Call ScrollRect.SetDirtyCaching, X0
	117 Return 
	118 Call 0x1C17F20

Method: UnityEngine.UI.Scrollbar get_verticalScrollbar()

Disassembly:
	0x03E3E4F8 CBZ X8, 0x3E3E580
	0x03E3E4FC LDR X20, [X8 + 0x118]

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_verticalScrollbar(UnityEngine.UI.Scrollbar value)

Disassembly:
	0x03E3E500 ADRP X8, 0x31A000
	0x03E3E504 LDR X8, [X8 + 0xB68]
	0x03E3E508 LDR X0, [X8]
	0x03E3E50C BL 0x1C16F10
	0x03E3E510 ADRP X8, 0x32D000
	0x03E3E514 LDR X8, [X8 + 0x390]
	0x03E3E518 MOV X1, X19
	0x03E3E51C MOV X3, X31
	0x03E3E520 MOV X21, X0
	0x03E3E524 LDR X2, [X8]
	0x03E3E528 BL 0x2725EC4
	0x03E3E52C CBZ X20, 0x3E3E580
	0x03E3E530 ADRP X8, 0x31A000
	0x03E3E534 LDR X8, [X8 + 0x8C8]
	0x03E3E538 MOV X0, X20
	0x03E3E53C MOV X1, X21
	0x03E3E540 LDR X2, [X8]
	0x03E3E544 BL 0x272A4B0
	0x03E3E548 ADRP X8, 0x31A000
	0x03E3E54C LDR X8, [X8 + 0x718]
	0x03E3E550 LDR X0, [X8]
	0x03E3E554 LDR W8, [X0 + 0xE0]
	0x03E3E558 CBNZ W8, 0x3E3E560
	0x03E3E55C BL 0x1C16DFC
	0x03E3E560 MOV X0, X19
	0x03E3E564 MOV X1, X31
	0x03E3E568 BL 0x3CD159C
	0x03E3E56C MOV X0, X19
	0x03E3E570 LDP X20, X19, [X31 + 0x20]
	0x03E3E574 LDP X22, X21, [X31 + 0x10]
	0x03E3E578 LDR X30, [X31], #0x30
	0x03E3E57C B 0x3E3D6AC
	0x03E3E580 BL 0x1C16F20
	0x03E3E584 STR X30, [X31 - 0x30]!
	0x03E3E588 STP X22, X21, [X31 + 0x10]
	0x03E3E58C STP X20, X19, [X31 + 0x20]
	0x03E3E590 ADRP X21, 0x5AA000
	0x03E3E594 ADRP X20, 0x31A000
	0x03E3E598 LDRB W8, [X21 + 0x7A9]
	0x03E3E59C LDR X20, [X20 + 0x718]
	0x03E3E5A0 MOV X19, X0
	0x03E3E5A4 TBNZ X8, 0x0, 0x3E3E604
	0x03E3E5A8 ADRP X0, 0x31A000
	0x03E3E5AC LDR X0, [X0 + 0x718]
	0x03E3E5B0 BL 0x1C16CF4
	0x03E3E5B4 ADRP X0, 0x2B8000
	0x03E3E5B8 LDR X0, [X0 + 0x920]
	0x03E3E5BC BL 0x1C16CF4
	0x03E3E5C0 ADRP X0, 0x2B5000
	0x03E3E5C4 LDR X0, [X0 + 0x598]
	0x03E3E5C8 BL 0x1C16CF4
	0x03E3E5CC ADRP X0, 0x32D000
	0x03E3E5D0 LDR X0, [X0 + 0x388]
	0x03E3E5D4 BL 0x1C16CF4
	0x03E3E5D8 ADRP X0, 0x32D000
	0x03E3E5DC LDR X0, [X0 + 0x390]
	0x03E3E5E0 BL 0x1C16CF4
	0x03E3E5E4 ADRP X0, 0x31A000
	0x03E3E5E8 LDR X0, [X0 + 0xB68]
	0x03E3E5EC BL 0x1C16CF4
	0x03E3E5F0 ADRP X0, 0x31B000
	0x03E3E5F4 LDR X0, [X0 + 0x70]
	0x03E3E5F8 BL 0x1C16CF4
	0x03E3E5FC MOVZ W8, 0x1
	0x03E3E600 STRB W8, [X21 + 0x7A9]
	0x03E3E604 LDR X0, [X20]
	0x03E3E608 ADRP X22, 0x2B5000
	0x03E3E60C LDR W8, [X0 + 0xE0]
	0x03E3E610 LDR X22, [X22 + 0x598]
	0x03E3E614 CBNZ W8, 0x3E3E61C
	0x03E3E618 BL 0x1C16DFC
	0x03E3E61C MOV X0, X19
	0x03E3E620 MOV X1, X31
	0x03E3E624 BL 0x3CD1884
	0x03E3E628 LDR X0, [X22]
	0x03E3E62C LDR X20, [X19 + 0x48]
	0x03E3E630 LDR W8, [X0 + 0xE0]
	0x03E3E634 CBNZ W8, 0x3E3E63C
	0x03E3E638 BL 0x1C16DFC
	0x03E3E63C MOV X0, X20
	0x03E3E640 MOV X1, X31
	0x03E3E644 BL 0x3C38948
	0x03E3E648 TBZ X0, 0x0, 0x3E3E6A0
	0x03E3E64C LDR X8, [X19 + 0x48]
	0x03E3E650 CBZ X8, 0x3E3E7B0
	0x03E3E654 LDR X20, [X8 + 0x118]
	0x03E3E658 ADRP X8, 0x31A000
	0x03E3E65C LDR X8, [X8 + 0xB68]
	0x03E3E660 LDR X0, [X8]
	0x03E3E664 BL 0x1C16F10
	0x03E3E668 ADRP X8, 0x32D000
	0x03E3E66C LDR X8, [X8 + 0x388]
	0x03E3E670 MOV X1, X19
	0x03E3E674 MOV X3, X31
	0x03E3E678 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x5AB000
	008 Move X23, 0x2B6000
	009 Move W8, [X21+1955]
	010 Move X23, [X23+1432]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {34}
	017 Move X0, 0x2B6000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x32E000
	021 Move X0, [X0+912]
	022 Call 0x1C17CF4
	023 Move X0, 0x31B000
	024 Move X0, [X0+2920]
	025 Call 0x1C17CF4
	026 Move X0, 0x31B000
	027 Move X0, [X0+2248]
	028 Call 0x1C17CF4
	029 Move X0, 0x31C000
	030 Move X0, [X0+112]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+1955], W8
	034 Move X0, [X23]
	035 Move X21, [X19+80]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X31
	042 Call Object.op_Implicit, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {70}
	047 Move X8, [X19+80]
	048 Compare X8, 0
	049 JumpIfEqual {118}
	050 Move X21, [X8+280]
	051 Move X8, 0x31B000
	052 Move X8, [X8+2920]
	053 Move X0, [X8]
	054 Call 0x1C17F10
	055 Move X8, 0x32E000
	056 Move X8, [X8+912]
	057 Move X1, X19
	058 Move X3, X31
	059 Move X22, X0
	060 Move X2, [X8]
	061 Call UnityAction`1<Single>..ctor, X0, X1, X2
	062 Compare X21, 0
	063 JumpIfEqual {118}
	064 Move X8, 0x31C000
	065 Move X8, [X8+112]
	066 Move X0, X21
	067 Move X1, X22
	068 Move X2, [X8]
	069 Call UnityEvent`1<Single>.RemoveListener, X0, X1
	070 Move W8, [X19+41]
	071 Move [X19+80], X20
	072 Compare W8, 0
	073 JumpIfEqual {109}
	074 Move X0, [X23]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {79}
	078 Call 0x1C17DFC
	079 Move X0, X20
	080 Move X1, X31
	081 Call Object.op_Implicit, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {109}
	086 Move X8, [X19+80]
	087 Compare X8, 0
	088 JumpIfEqual {118}
	089 Move X20, [X8+280]
	090 Move X8, 0x31B000
	091 Move X8, [X8+2920]
	092 Move X0, [X8]
	093 Call 0x1C17F10
	094 Move X8, 0x32E000
	095 Move X8, [X8+912]
	096 Move X1, X19
	097 Move X3, X31
	098 Move X21, X0
	099 Move X2, [X8]
	100 Call UnityAction`1<Single>..ctor, X0, X1, X2
	101 Compare X20, 0
	102 JumpIfEqual {118}
	103 Move X8, 0x31B000
	104 Move X8, [X8+2248]
	105 Move X0, X20
	106 Move X1, X21
	107 Move X2, [X8]
	108 Call UnityEvent`1<Single>.AddListener, X0, X1
	109 Move X0, X19
	110 Move X20, [X31+32]
	111 Move X19, [X31+40]
	112 Move X22, [X31+16]
	113 Move X21, [X31+24]
	114 Move X30, [X31+48]
	115 Move X23, [X31+56]
	116 Call ScrollRect.SetDirtyCaching, X0
	117 Return 
	118 Call 0x1C17F20

Method: UnityEngine.UI.ScrollRect/ScrollbarVisibility get_horizontalScrollbarVisibility()

Disassembly:
	0x03E3E67C LDR X2, [X8]
	0x03E3E680 BL 0x2725EC4

ISIL:
	001 Move W0, [X0+88]
	002 Return X0

Method: System.Void set_horizontalScrollbarVisibility(UnityEngine.UI.ScrollRect/ScrollbarVisibility value)

Disassembly:
	0x03E3E684 CBZ X20, 0x3E3E7B0
	0x03E3E688 ADRP X8, 0x31B000

ISIL:
	001 Move [X0+88], W1
	002 Call ScrollRect.SetDirtyCaching, X0
	003 Return 

Method: UnityEngine.UI.ScrollRect/ScrollbarVisibility get_verticalScrollbarVisibility()

Disassembly:
	0x03E3E68C LDR X8, [X8 + 0x70]
	0x03E3E690 MOV X0, X20

ISIL:
	001 Move W0, [X0+92]
	002 Return X0

Method: System.Void set_verticalScrollbarVisibility(UnityEngine.UI.ScrollRect/ScrollbarVisibility value)

Disassembly:
	0x03E3E694 MOV X1, X21
	0x03E3E698 LDR X2, [X8]

ISIL:
	001 Move [X0+92], W1
	002 Call ScrollRect.SetDirtyCaching, X0
	003 Return 

Method: System.Single get_horizontalScrollbarSpacing()

Disassembly:
	0x03E3E69C BL 0x272A4EC
	0x03E3E6A0 LDR X0, [X22]

ISIL:
	001 Move V0, [X0+96]
	002 Return V0

Method: System.Void set_horizontalScrollbarSpacing(System.Single value)

Disassembly:
	0x03E3E6A4 LDR X20, [X19 + 0x50]
	0x03E3E6A8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X0+96], S0

Method: System.Single get_verticalScrollbarSpacing()

Disassembly:
	0x03E3E734 ADRP X21, 0x59B000
	0x03E3E738 LDRB W8, [X21 + 0x78F]

ISIL:
	001 Move V0, [X0+100]
	002 Return V0

Method: System.Void set_verticalScrollbarSpacing(System.Single value)

Disassembly:
	0x03E3E73C CBNZ W8, 0x3E3E754
	0x03E3E740 ADRP X0, 0x2BD000

ISIL:
	001 Move [X0+100], S0
	002 Call ScrollRect.SetDirty, X0
	003 Return 

Method: UnityEngine.UI.ScrollRect/ScrollRectEvent get_onValueChanged()

Disassembly:
	0x03E3E744 LDR X0, [X0 + 0xF08]
	0x03E3E748 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+104]
	002 Return X0

Method: System.Void set_onValueChanged(UnityEngine.UI.ScrollRect/ScrollRectEvent value)

Disassembly:
	0x03E3E74C MOVZ W8, 0x1
	0x03E3E750 STRB W8, [X21 + 0x78F]

ISIL:
	001 Move [X0+104], X1
	002 Return 

Method: UnityEngine.RectTransform get_viewRect()

Disassembly:
	0x03E3E754 ADRP X8, 0x2BD000
	0x03E3E758 LDR X8, [X8 + 0xF08]
	0x03E3E75C MOV X0, X19
	0x03E3E760 LDR X8, [X8]
	0x03E3E764 LDR X8, [X8 + 0xB8]
	0x03E3E768 LDR V0, [X8]
	0x03E3E76C STR D0, [X19 + 0xB8]
	0x03E3E770 BL 0x3E3D854
	0x03E3E774 LDR X8, [X20]
	0x03E3E778 MOV X20, X0
	0x03E3E77C LDR W9, [X8 + 0xE0]
	0x03E3E780 CBNZ W9, 0x3E3E78C
	0x03E3E784 MOV X0, X8
	0x03E3E788 BL 0x1C16DFC
	0x03E3E78C MOV X0, X20
	0x03E3E790 MOV X1, X31
	0x03E3E794 BL 0x3E2F3D8
	0x03E3E798 MOV X0, X19
	0x03E3E79C LDP X20, X19, [X31 + 0x20]
	0x03E3E7A0 LDP X22, X21, [X31 + 0x10]
	0x03E3E7A4 MOV X1, X31
	0x03E3E7A8 LDR X30, [X31], #0x30
	0x03E3E7AC B 0x3E4BDC4
	0x03E3E7B0 BL 0x1C16F20
	0x03E3E7B4 STR X30, [X31 - 0x20]!
	0x03E3E7B8 STP X20, X19, [X31 + 0x10]
	0x03E3E7BC ADRP X20, 0x5AA000
	0x03E3E7C0 LDRB W8, [X20 + 0x7AA]
	0x03E3E7C4 MOV X19, X0
	0x03E3E7C8 TBNZ X8, 0x0, 0x3E3E7E0
	0x03E3E7CC ADRP X0, 0x2B5000
	0x03E3E7D0 LDR X0, [X0 + 0x598]
	0x03E3E7D4 BL 0x1C16CF4
	0x03E3E7D8 MOVZ W8, 0x1
	0x03E3E7DC STRB W8, [X20 + 0x7AA]
	0x03E3E7E0 MOV X0, X19
	0x03E3E7E4 MOV X1, X31
	0x03E3E7E8 BL 0x3E5AD88
	0x03E3E7EC TBZ X0, 0x0, 0x3E3E824
	0x03E3E7F0 ADRP X8, 0x2B5000
	0x03E3E7F4 LDR X8, [X8 + 0x598]
	0x03E3E7F8 LDR X19, [X19 + 0x20]
	0x03E3E7FC LDR X0, [X8]
	0x03E3E800 LDR W8, [X0 + 0xE0]
	0x03E3E804 CBNZ W8, 0x3E3E80C
	0x03E3E808 BL 0x1C16DFC
	0x03E3E80C MOV X0, X19
	0x03E3E810 LDP X20, X19, [X31 + 0x10]
	0x03E3E814 MOV X1, X31
	0x03E3E818 MOV X2, X31
	0x03E3E81C LDR X30, [X31], #0x20
	0x03E3E820 B 0x3C354F8
	0x03E3E824 LDP X20, X19, [X31 + 0x10]
	0x03E3E828 MOV W0, W31
	0x03E3E82C LDR X30, [X31], #0x20
	0x03E3E830 RET
	0x03E3E834 STR X30, [X31 - 0x20]!
	0x03E3E838 STP X20, X19, [X31 + 0x10]
	0x03E3E83C ADRP X20, 0x5AA000
	0x03E3E840 LDRB W8, [X20 + 0x7AB]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5AB000
	006 Move X21, 0x2B6000
	007 Move W8, [X20+1956]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2B6000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x2DD000
	018 Move X0, [X0+3184]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1956], W8
	022 Move X0, [X21]
	023 Move X20, [X19+128]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {38}
	036 Move X20, [X19+64]
	037 Move [X19+128], X20
	038 Move X20, [X19+128]
	039 Move X0, [X21]
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Move X0, X20
	045 Move X1, X31
	046 Move X2, X31
	047 Call Object.op_Equality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {66}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Component.get_transform, X0
	055 Compare X0, 0
	056 JumpIfEqual {67}
	057 Move X8, 0x2DD000
	058 Move X8, [X8+3184]
	059 Move X1, [X8]
	060 Move X8, [X0]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move [X19+128], X0
	063 Move X8, [X0]
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Call 0x1C181E0
	066 Move X0, [X19+128]
	067 Move [X19+128], X0
	068 Move X20, [X31+16]
	069 Move X19, [X31+24]
	070 Move X30, [X31+32]
	071 Move X21, [X31+40]
	072 Return X0

Method: UnityEngine.Vector2 get_velocity()

Disassembly:
	0x03E3E844 MOV X19, X0
	0x03E3E848 TBNZ X8, 0x0, 0x3E3E860

ISIL:
	001 Move S0, [X0+184]
	002 Move S1, [X0+188]
	003 Return X0

Method: System.Void set_velocity(UnityEngine.Vector2 value)

Disassembly:
	0x03E3E84C ADRP X0, 0x31A000
	0x03E3E850 LDR X0, [X0 + 0x718]

ISIL:
	001 Move [X0+184], S0
	002 Move [X0+192], S1
	003 Return 

Method: UnityEngine.RectTransform get_rectTransform()

Disassembly:
	0x03E3E854 BL 0x1C16CF4
	0x03E3E858 MOVZ W8, 0x1
	0x03E3E85C STRB W8, [X20 + 0x7AB]
	0x03E3E860 LDRB W8, [X19 + 0xFC]
	0x03E3E864 CBNZ W8, 0x3E3E88C
	0x03E3E868 ADRP X8, 0x31A000
	0x03E3E86C LDR X8, [X8 + 0x718]
	0x03E3E870 LDR X0, [X8]
	0x03E3E874 LDR W8, [X0 + 0xE0]
	0x03E3E878 CBNZ W8, 0x3E3E880
	0x03E3E87C BL 0x1C16DFC
	0x03E3E880 MOV X0, X31
	0x03E3E884 BL 0x3CD1EF4
	0x03E3E888 TBZ X0, 0x0, 0x3E3E898
	0x03E3E88C LDP X20, X19, [X31 + 0x10]
	0x03E3E890 LDR X30, [X31], #0x20
	0x03E3E894 RET
	0x03E3E898 LDP X20, X19, [X31 + 0x10]
	0x03E3E89C MOV X0, X31
	0x03E3E8A0 LDR X30, [X31], #0x20
	0x03E3E8A4 B 0x3E24F7C
	0x03E3E8A8 STR X30, [X31 - 0x20]!
	0x03E3E8AC STP X20, X19, [X31 + 0x10]
	0x03E3E8B0 ADRP X20, 0x59B000
	0x03E3E8B4 LDRB W8, [X20 + 0x78F]
	0x03E3E8B8 MOV X19, X0
	0x03E3E8BC CBNZ W8, 0x3E3E8D4
	0x03E3E8C0 ADRP X0, 0x2BD000
	0x03E3E8C4 LDR X0, [X0 + 0xF08]
	0x03E3E8C8 BL 0x1C16CF4
	0x03E3E8CC MOVZ W8, 0x1
	0x03E3E8D0 STRB W8, [X20 + 0x78F]
	0x03E3E8D4 ADRP X8, 0x2BD000
	0x03E3E8D8 LDR X8, [X8 + 0xF08]
	0x03E3E8DC LDR X8, [X8]
	0x03E3E8E0 LDR X8, [X8 + 0xB8]
	0x03E3E8E4 LDR V0, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5AB000
	006 Move X20, 0x2B6000
	007 Move W8, [X21+1957]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2B8000
	015 Move X0, [X0+1720]
	016 Call 0x1C17CF4
	017 Move X0, 0x2B6000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1957], W8
	022 Move X0, [X20]
	023 Move X20, [X19+264]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x2B8000
	037 Move X8, [X8+1720]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+264], X0
	042 Move X0, [X19+264]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03E3E8E8 STR D0, [X19 + 0xB8]
	0x03E3E8EC LDP X20, X19, [X31 + 0x10]
	0x03E3E8F0 LDR X30, [X31], #0x20
	0x03E3E8F4 RET
	0x03E3E8F8 STP D9, D8, [X31 - 0x30]!
	0x03E3E8FC STR X30, [X31 + 0x10]
	0x03E3E900 STP X20, X19, [X31 + 0x20]
	0x03E3E904 LDR X8, [X0]
	0x03E3E908 MOV X20, X1
	0x03E3E90C MOV X19, X0
	0x03E3E910 LDP X9, X8, [X8 + 0x1C8]
	0x03E3E914 MOV X1, X8
	0x03E3E918 BLR X9
	0x03E3E91C TBZ X0, 0x0, 0x3E3E968
	0x03E3E920 MOV X0, X19
	0x03E3E924 BL 0x3E3E834
	0x03E3E928 MOV X0, X19
	0x03E3E92C BL 0x3E3DE10
	0x03E3E930 CBZ X20, 0x3E3EA60
	0x03E3E934 LDR V0, [X20 + 0x140]
	0x03E3E938 LDR V8, [X20 + 0x13C]
	0x03E3E93C LDRB W9, [X19 + 0x29]
	0x03E3E940 LDRB W8, [X19 + 0x28]
	0x03E3E944 FNEG S0, S0
	0x03E3E948 CBZ W9, 0x3E3E978
	0x03E3E94C CBNZ W8, 0x3E3E994
	0x03E3E950 FABS S1, S8
	0x03E3E954 FABS S2, S0
	0x03E3E958 FCMP S1, S2
	0x03E3E95C FMOV S9, W31
	0x03E3E960 B.LE 0x3E3E998
	0x03E3E964 B 0x3E3E9A8
	0x03E3E968 LDP X20, X19, [X31 + 0x20]
	0x03E3E96C LDR X30, [X31 + 0x10]
	0x03E3E970 LDP D9, D8, [X31], #0x30
	0x03E3E974 RET
	0x03E3E978 CBZ W8, 0x3E3E994
	0x03E3E97C FABS S1, S0
	0x03E3E980 FABS S2, S8
	0x03E3E984 FCMP S1, S2
	0x03E3E988 B.LE 0x3E3E9A0
	0x03E3E98C MOV V9.16B, V0.16B
	0x03E3E990 B 0x3E3E9A4
	0x03E3E994 MOV V9.16B, V8.16B
	0x03E3E998 MOV V8.16B, V0.16B
	0x03E3E99C B 0x3E3E9A8
	0x03E3E9A0 MOV V9.16B, V8.16B
	0x03E3E9A4 FMOV S8, W31
	0x03E3E9A8 MOV X0, X20
	0x03E3E9AC MOV X1, X31
	0x03E3E9B0 BL 0x3E4F264
	0x03E3E9B4 TBZ X0, 0x0, 0x3E3E9C0
	0x03E3E9B8 MOVZ W8, 0x1
	0x03E3E9BC STRB W8, [X19 + 0xC1]
	0x03E3E9C0 LDR X0, [X19 + 0x20]
	0x03E3E9C4 CBZ X0, 0x3E3EA60
	0x03E3E9C8 MOV X1, X31
	0x03E3E9CC BL 0x3C3E7F0
	0x03E3E9D0 LDR V2, [X19 + 0x3C]
	0x03E3E9D4 LDR W8, [X19 + 0x2C]
	0x03E3E9D8 FMUL S3, S9, S2
	0x03E3E9DC FMUL S2, S8, S2
	0x03E3E9E0 CMP W8, 0x2
	0x03E3E9E4 FADD S9, S0, S3

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5AB000
	007 Move X20, 0x32E000
	008 Move W8, [X21+1958]
	009 Move X20, [X20+920]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x32E000
	016 Move X0, [X0+920]
	017 Call 0x1C17CF4
	018 Move X0, 0x2B8000
	019 Move X0, [X0+2480]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+1958], W8
	023 Move X10, -53800960
	024 Move V0, [X10+280]
	025 Move X9, 1
	026 NotImplemented "Instruction MOVK not yet implemented."
	027 Move W8, 257
	028 NotImplemented "Instruction MOVK not yet implemented."
	029 Move W22, 1
	030 NotImplemented "Instruction STRH not yet implemented."
	031 Move [X19+44], X9
	032 Move [X19+52], W22
	033 Move [X19+56], D0
	034 Move X0, [X20]
	035 Move X21, 0x2B8000
	036 Move X21, [X21+2480]
	037 Call 0x1C17F10
	038 Move X20, X0
	039 Call ScrollRectEvent..ctor, X0
	040 Move [X19+104], X20
	041 Move X20, 0x59C000
	042 Move W8, [X20+1935]
	043 Compare W8, 0
	044 JumpIfNotEqual {49}
	045 Move X0, 0x2BE000
	046 Move X0, [X0+3848]
	047 Call 0x1C17CF4
	048 Move [X20+1935], W22
	049 Move X8, 0x2BE000
	050 Move X8, [X8+3848]
	051 Move W1, 4
	052 Move X8, [X8]
	053 Move X9, [X8+184]
	054 Move V0, [X9]
	055 Move [X19+112], D0
	056 Move X9, [X8+184]
	057 Move V0, [X9]
	058 Move [X19+120], D0
	059 Move X8, [X8+184]
	060 Move V0, [X8]
	061 Move [X19+196], D0
	062 Move X0, [X21]
	063 Call 0x1C17D6C
	064 Move [X19+296], X0
	065 Move X0, X19
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X1, X31
	071 Move X30, [X31+48]
	072 Call UIBehaviour..ctor, X0
	073 Return 

Method: System.Void Rebuild(UnityEngine.UI.CanvasUpdate executing)

Disassembly:
	0x03E3EA30 LDR X8, [X19]
	0x03E3EA34 MOV X0, X19
	0x03E3EA38 MOV V0.16B, V9.16B
	0x03E3EA3C MOV V1.16B, V8.16B
	0x03E3EA40 LDR X9, [X8 + 0x428]
	0x03E3EA44 LDR X1, [X8 + 0x430]
	0x03E3EA48 BLR X9
	0x03E3EA4C MOV X0, X19
	0x03E3EA50 LDP X20, X19, [X31 + 0x20]
	0x03E3EA54 LDR X30, [X31 + 0x10]
	0x03E3EA58 LDP D9, D8, [X31], #0x30
	0x03E3EA5C B 0x3E3DE10
	0x03E3EA60 BL 0x1C16F20
	0x03E3EA64 STR X30, [X31 - 0x10]!
	0x03E3EA68 STP S0, S1, [X31 + 0x8]
	0x03E3EA6C LDRB W2, [X0 + 0x28]
	0x03E3EA70 LDRB W3, [X0 + 0x29]
	0x03E3EA74 LDR W4, [X0 + 0x2C]
	0x03E3EA78 ADD X8, X0, 0xA0
	0x03E3EA7C ADD X1, X0, 0x88
	0x03E3EA80 ADD X5, X31, 0x8
	0x03E3EA84 MOV X0, X8
	0x03E3EA88 BL 0x3E407E8
	0x03E3EA8C LDR X30, [X31], #0x10
	0x03E3EA90 RET
	0x03E3EA94 STR X30, [X31 - 0x20]!
	0x03E3EA98 STP X20, X19, [X31 + 0x10]
	0x03E3EA9C CBZ X1, 0x3E3EAF0
	0x03E3EAA0 LDR W8, [X1 + 0x148]
	0x03E3EAA4 CBNZ W8, 0x3E3EAE4
	0x03E3EAA8 ADRP X20, 0x59B000
	0x03E3EAAC LDRB W8, [X20 + 0x78F]
	0x03E3EAB0 MOV X19, X0
	0x03E3EAB4 CBNZ W8, 0x3E3EACC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 NotImplemented "Instruction CMP not yet implemented."
	005 Move X19, X0
	006 Compare W1, 0
	007 JumpIfNotEqual {35}
	008 Move X0, X19
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Move X0, X19
	013 Call ScrollRect.UpdateBounds, X0
	014 Move X20, 0x59C000
	015 Move W8, [X20+1935]
	016 Compare W8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, 0x2BE000
	019 Move X0, [X0+3848]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1935], W8
	023 Move X8, 0x2BE000
	024 Move X8, [X8+3848]
	025 Move X0, X19
	026 Move X8, [X8]
	027 Move X8, [X8+184]
	028 Move S0, [X8]
	029 Move S1, [X8+4]
	030 Call ScrollRect.UpdateScrollbars, X0, X1
	031 Move X0, X19
	032 Call ScrollRect.UpdatePrevData, X0
	033 Move W8, 1
	034 Move [X19+252], W8
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 

Method: System.Void LayoutComplete()

Disassembly:
	0x03E3F3C0 MOV S1, V1.S[1]

ISIL:
	001 Return 

Method: System.Void GraphicUpdateComplete()

Disassembly:
	0x03E3F3C4 FADD S0, S1, S0

ISIL:
	001 Return 

Method: System.Void UpdateCachedData()

Disassembly:
	0x03E3EAB8 ADRP X0, 0x2BD000
	0x03E3EABC LDR X0, [X0 + 0xF08]
	0x03E3EAC0 BL 0x1C16CF4
	0x03E3EAC4 MOVZ W8, 0x1
	0x03E3EAC8 STRB W8, [X20 + 0x78F]
	0x03E3EACC ADRP X8, 0x2BD000
	0x03E3EAD0 LDR X8, [X8 + 0xF08]
	0x03E3EAD4 LDR X8, [X8]
	0x03E3EAD8 LDR X8, [X8 + 0xB8]
	0x03E3EADC LDR V0, [X8]
	0x03E3EAE0 STR D0, [X19 + 0xB8]
	0x03E3EAE4 LDP X20, X19, [X31 + 0x10]
	0x03E3EAE8 LDR X30, [X31], #0x20
	0x03E3EAEC RET
	0x03E3EAF0 BL 0x1C16F20
	0x03E3EAF4 STP D9, D8, [X31 - 0x40]!
	0x03E3EAF8 STR X30, [X31 + 0x10]
	0x03E3EAFC STP X22, X21, [X31 + 0x20]
	0x03E3EB00 STP X20, X19, [X31 + 0x30]
	0x03E3EB04 ADRP X21, 0x5AA000
	0x03E3EB08 LDRB W8, [X21 + 0x7AC]
	0x03E3EB0C MOV X20, X1
	0x03E3EB10 MOV X19, X0
	0x03E3EB14 TBNZ X8, 0x0, 0x3E3EB2C
	0x03E3EB18 ADRP X0, 0x30B000
	0x03E3EB1C LDR X0, [X0 + 0x6B8]
	0x03E3EB20 BL 0x1C16CF4
	0x03E3EB24 MOVZ W8, 0x1
	0x03E3EB28 STRB W8, [X21 + 0x7AC]
	0x03E3EB2C CBZ X20, 0x3E3EC1C
	0x03E3EB30 LDR W8, [X20 + 0x148]
	0x03E3EB34 CBNZ W8, 0x3E3EC08
	0x03E3EB38 LDR X8, [X19]
	0x03E3EB3C MOV X0, X19
	0x03E3EB40 LDP X9, X1, [X8 + 0x1C8]
	0x03E3EB44 BLR X9
	0x03E3EB48 TBZ X0, 0x0, 0x3E3EC08
	0x03E3EB4C MOV X0, X19
	0x03E3EB50 BL 0x3E3DE10
	0x03E3EB54 ADRP X21, 0x59B000
	0x03E3EB58 LDRB W8, [X21 + 0x78F]
	0x03E3EB5C CBNZ W8, 0x3E3EB74
	0x03E3EB60 ADRP X0, 0x2BD000
	0x03E3EB64 LDR X0, [X0 + 0xF08]
	0x03E3EB68 BL 0x1C16CF4
	0x03E3EB6C MOVZ W8, 0x1
	0x03E3EB70 STRB W8, [X21 + 0x78F]
	0x03E3EB74 ADRP X8, 0x2BD000
	0x03E3EB78 LDR X8, [X8 + 0xF08]
	0x03E3EB7C MOV X21, X19
	0x03E3EB80 MOV X0, X19
	0x03E3EB84 LDR X8, [X8]
	0x03E3EB88 LDR X8, [X8 + 0xB8]
	0x03E3EB8C LDR V0, [X8]
	0x03E3EB90 STR D0, [X21 + 0x70]!
	0x03E3EB94 BL 0x3E3D754
	0x03E3EB98 LDR V8, [X20 + 0x104]
	0x03E3EB9C LDR V9, [X20 + 0x108]
	0x03E3EBA0 MOV X22, X0
	0x03E3EBA4 MOV X0, X20
	0x03E3EBA8 MOV X1, X31
	0x03E3EBAC BL 0x3E4F314
	0x03E3EBB0 ADRP X8, 0x30B000
	0x03E3EBB4 LDR X8, [X8 + 0x6B8]
	0x03E3EBB8 MOV X20, X0
	0x03E3EBBC LDR X8, [X8]
	0x03E3EBC0 LDR W9, [X8 + 0xE0]
	0x03E3EBC4 CBNZ W9, 0x3E3EBD0
	0x03E3EBC8 MOV X0, X8
	0x03E3EBCC BL 0x1C16DFC
	0x03E3EBD0 MOV X0, X22
	0x03E3EBD4 MOV V0.16B, V8.16B
	0x03E3EBD8 MOV V1.16B, V9.16B
	0x03E3EBDC MOV X1, X20
	0x03E3EBE0 MOV X2, X21
	0x03E3EBE4 MOV X3, X31
	0x03E3EBE8 BL 0x3E23A98
	0x03E3EBEC LDR X0, [X19 + 0x20]
	0x03E3EBF0 CBZ X0, 0x3E3EC1C
	0x03E3EBF4 MOV X1, X31
	0x03E3EBF8 BL 0x3C3E7F0
	0x03E3EBFC MOVZ W8, 0x1
	0x03E3EC00 STP S0, S1, [X19 + 0x78]
	0x03E3EC04 STRB W8, [X19 + 0xC0]
	0x03E3EC08 LDP X20, X19, [X31 + 0x30]
	0x03E3EC0C LDP X22, X21, [X31 + 0x20]
	0x03E3EC10 LDR X30, [X31 + 0x10]
	0x03E3EC14 LDP D9, D8, [X31], #0x40
	0x03E3EC18 RET
	0x03E3EC1C BL 0x1C16F20
	0x03E3EC20 STR X30, [X31 - 0x10]!
	0x03E3EC24 CBZ X1, 0x3E3EC3C
	0x03E3EC28 LDR W8, [X1 + 0x148]
	0x03E3EC2C CBNZ W8, 0x3E3EC34
	0x03E3EC30 STRB W31, [X0 + 0xC0]
	0x03E3EC34 LDR X30, [X31], #0x10
	0x03E3EC38 RET
	0x03E3EC3C BL 0x1C16F20
	0x03E3EC40 SUB X31, X31, 0x50
	0x03E3EC44 STP D9, D8, [X31 + 0x20]
	0x03E3EC48 STP X30, X21, [X31 + 0x30]
	0x03E3EC4C STP X20, X19, [X31 + 0x40]
	0x03E3EC50 ADRP X21, 0x5AA000
	0x03E3EC54 LDRB W8, [X21 + 0x7AD]
	0x03E3EC58 MOV X20, X1
	0x03E3EC5C MOV X19, X0
	0x03E3EC60 TBNZ X8, 0x0, 0x3E3EC78
	0x03E3EC64 ADRP X0, 0x30B000
	0x03E3EC68 LDR X0, [X0 + 0x6B8]
	0x03E3EC6C BL 0x1C16CF4
	0x03E3EC70 MOVZ W8, 0x1
	0x03E3EC74 STRB W8, [X21 + 0x7AD]
	0x03E3EC78 STR X31, [X31 + 0x10]
	0x03E3EC7C LDRB W8, [X19 + 0xC0]
	0x03E3EC80 CBZ W8, 0x3E3EE24
	0x03E3EC84 CBZ X20, 0x3E3EE38
	0x03E3EC88 LDR W8, [X20 + 0x148]
	0x03E3EC8C CBNZ W8, 0x3E3EE24
	0x03E3EC90 LDR X8, [X19]
	0x03E3EC94 MOV X0, X19
	0x03E3EC98 LDP X9, X1, [X8 + 0x1C8]
	0x03E3EC9C BLR X9
	0x03E3ECA0 TBZ X0, 0x0, 0x3E3EE24
	0x03E3ECA4 MOV X0, X19
	0x03E3ECA8 BL 0x3E3D754
	0x03E3ECAC LDR V8, [X20 + 0x104]
	0x03E3ECB0 LDR V9, [X20 + 0x108]
	0x03E3ECB4 MOV X21, X0
	0x03E3ECB8 MOV X0, X20
	0x03E3ECBC MOV X1, X31
	0x03E3ECC0 BL 0x3E4F314
	0x03E3ECC4 ADRP X8, 0x30B000
	0x03E3ECC8 LDR X8, [X8 + 0x6B8]
	0x03E3ECCC MOV X20, X0
	0x03E3ECD0 LDR X8, [X8]
	0x03E3ECD4 LDR W9, [X8 + 0xE0]
	0x03E3ECD8 CBNZ W9, 0x3E3ECE4
	0x03E3ECDC MOV X0, X8
	0x03E3ECE0 BL 0x1C16DFC
	0x03E3ECE4 ADD X2, X31, 0x10
	0x03E3ECE8 MOV X0, X21
	0x03E3ECEC MOV V0.16B, V8.16B
	0x03E3ECF0 MOV V1.16B, V9.16B
	0x03E3ECF4 MOV X1, X20
	0x03E3ECF8 MOV X3, X31
	0x03E3ECFC BL 0x3E23A98
	0x03E3ED00 TBZ X0, 0x0, 0x3E3EE24
	0x03E3ED04 MOV X0, X19
	0x03E3ED08 BL 0x3E3DE10
	0x03E3ED0C LDR X0, [X19 + 0x20]
	0x03E3ED10 CBZ X0, 0x3E3EE38
	0x03E3ED14 LDR V0, [X31 + 0x10]
	0x03E3ED18 LDP D1, D2, [X19 + 0x70]
	0x03E3ED1C MOV X1, X31
	0x03E3ED20 FSUB V0.2S, V0.2S, V1.2S
	0x03E3ED24 FADD V0.2S, V0.2S, V2.2S
	0x03E3ED28 STR V0, [X31]
	0x03E3ED2C BL 0x3C3E7F0
	0x03E3ED30 ADD X0, X19, 0xA0
	0x03E3ED34 MOV V0.S[1], V1.S[0]
	0x03E3ED38 LDR V1, [X31]
	0x03E3ED3C ADD X1, X19, 0x88
	0x03E3ED40 ADD X5, X31, 0x18
	0x03E3ED44 FSUB V0.2S, V1.2S, V0.2S
	0x03E3ED48 STR D0, [X31 + 0x18]
	0x03E3ED4C LDRB W2, [X19 + 0x28]
	0x03E3ED50 LDRB W3, [X19 + 0x29]
	0x03E3ED54 LDR W4, [X19 + 0x2C]
	0x03E3ED58 BL 0x3E407E8
	0x03E3ED5C MOV V2.16B, V1.16B
	0x03E3ED60 LDR V1, [X31]
	0x03E3ED64 LDR W8, [X19 + 0x2C]
	0x03E3ED68 MOV V3.16B, V0.16B
	0x03E3ED6C FADD S0, S1, S0
	0x03E3ED70 MOV S1, V1.S[1]
	0x03E3ED74 CMP W8, 0x1
	0x03E3ED78 FADD S1, S1, S2
	0x03E3ED7C B.NE 0x3E3EE10
	0x03E3ED80 FCMP S3, 0x0
	0x03E3ED84 B.EQ 0x3E3EDC8
	0x03E3ED88 ADRP X8, 0xFFFFFFFFFCCAC000
	0x03E3ED8C LDR V4, [X8 + 0x440]
	0x03E3ED90 LDR V5, [X19 + 0xAC]
	0x03E3ED94 FABS S6, S3
	0x03E3ED98 FCMP S3, 0x0
	0x03E3ED9C FMUL S4, S6, S4
	0x03E3EDA0 FADD S5, S5, S5
	0x03E3EDA4 FMOV S6, 1
	0x03E3EDA8 FDIV S4, S4, S5
	0x03E3EDAC FADD S4, S4, S6
	0x03E3EDB0 FDIV S4, S6, S4
	0x03E3EDB4 FSUB S4, S6, S4
	0x03E3EDB8 FMUL S6, S5, S4
	0x03E3EDBC FNMUL S4, S5, S4
	0x03E3EDC0 FCSEL S3, S6, S4, GE
	0x03E3EDC4 FSUB S0, S0, S3
	0x03E3EDC8 FCMP S2, 0x0
	0x03E3EDCC B.EQ 0x3E3EE10
	0x03E3EDD0 ADRP X8, 0xFFFFFFFFFCCAC000
	0x03E3EDD4 LDR V3, [X8 + 0x440]
	0x03E3EDD8 LDR V4, [X19 + 0xB0]
	0x03E3EDDC FABS S5, S2
	0x03E3EDE0 FCMP S2, 0x0
	0x03E3EDE4 FMUL S3, S5, S3
	0x03E3EDE8 FADD S4, S4, S4
	0x03E3EDEC FMOV S5, 1
	0x03E3EDF0 FDIV S3, S3, S4
	0x03E3EDF4 FADD S3, S3, S5
	0x03E3EDF8 FDIV S3, S5, S3
	0x03E3EDFC FSUB S3, S5, S3
	0x03E3EE00 FMUL S5, S4, S3
	0x03E3EE04 FNMUL S3, S4, S3
	0x03E3EE08 FCSEL S2, S5, S3, GE
	0x03E3EE0C FSUB S1, S1, S2

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x5AB000
	009 Move X23, 0x2B6000
	010 Move W8, [X20+1959]
	011 Move X23, [X23+1432]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2B6000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x2DD000
	021 Move X0, [X0+3184]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1959], W8
	025 Move X0, X19
	026 Move X1, X31
	027 Call Component.get_transform, X0
	028 Move X8, [X23]
	029 Move X21, [X19+72]
	030 Move X20, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X21
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move X8, X31
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {59}
	045 Move X0, [X19+72]
	046 Compare X0, 0
	047 JumpIfEqual {261}
	048 Move X1, X31
	049 Call Component.get_transform, X0
	050 Compare X0, 0
	051 JumpIfEqual {58}
	052 Move X8, 0x2DD000
	053 Move X8, [X8+3184]
	054 Move X9, [X0]
	055 Move X8, [X8]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 NotImplemented "Instruction CSEL not yet implemented."
	058 Move X8, X31
	059 Move [X19+272], X8
	060 Move X0, [X23]
	061 Move X21, [X19+80]
	062 Move W8, [X0+224]
	063 Compare W8, 0
	064 JumpIfNotEqual {66}
	065 Call 0x1C17DFC
	066 Move X0, X21
	067 Move X1, X31
	068 Move X2, X31
	069 Call Object.op_Equality, X0, X1
	070 Move X8, X31
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {89}
	075 Move X0, [X19+80]
	076 Compare X0, 0
	077 JumpIfEqual {261}
	078 Move X1, X31
	079 Call Component.get_transform, X0
	080 Compare X0, 0
	081 JumpIfEqual {88}
	082 Move X8, 0x2DD000
	083 Move X8, [X8+3184]
	084 Move X9, [X0]
	085 Move X8, [X8]
	086 NotImplemented "Instruction CMP not yet implemented."
	087 NotImplemented "Instruction CSEL not yet implemented."
	088 Move X8, X31
	089 Move X0, X19
	090 Move [X19+280], X8
	091 Call ScrollRect.get_viewRect, X0
	092 Compare X0, 0
	093 JumpIfEqual {261}
	094 Move X1, X31
	095 Call Transform.get_parent, X0
	096 Move X8, [X23]
	097 Move X21, X0
	098 Move W9, [X8+224]
	099 Compare W9, 0
	100 JumpIfNotEqual {103}
	101 Move X0, X8
	102 Call 0x1C17DFC
	103 Move X0, X21
	104 Move X1, X20
	105 Move X2, X31
	106 Call Object.op_Equality, X0, X1
	107 Move X8, [X19+272]
	108 Move W21, W0
	109 Move X1, X31
	110 Move X0, X8
	111 Call Object.op_Implicit, X0
	112 Move TEMP, X0
	113 And TEMP, TEMP, 1
	114 Compare TEMP, 1
	115 JumpIfNotEqual {133}
	116 Move X0, [X19+272]
	117 Compare X0, 0
	118 JumpIfEqual {261}
	119 Move X1, X31
	120 Call Transform.get_parent, X0
	121 Move X8, [X23]
	122 Move X22, X0
	123 Move W9, [X8+224]
	124 Compare W9, 0
	125 JumpIfNotEqual {128}
	126 Move X0, X8
	127 Call 0x1C17DFC
	128 Move X0, X22
	129 Move X1, X20
	130 Move X2, X31
	131 Call Object.op_Equality, X0, X1
	132 And W24, W0, 1
	133 Move W24, 1
	134 Move X0, [X23]
	135 Move X22, [X19+280]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Move X0, X22
	141 Move X1, X31
	142 Call Object.op_Implicit, X0
	143 Move TEMP, X0
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfNotEqual {164}
	147 Move X0, [X19+280]
	148 Compare X0, 0
	149 JumpIfEqual {261}
	150 Move X1, X31
	151 Call Transform.get_parent, X0
	152 Move X8, [X23]
	153 Move X22, X0
	154 Move W9, [X8+224]
	155 Compare W9, 0
	156 JumpIfNotEqual {159}
	157 Move X0, X8
	158 Call 0x1C17DFC
	159 Move X0, X22
	160 Move X1, X20
	161 Move X2, X31
	162 Call Object.op_Equality, X0, X1
	163 And W8, W0, 1
	164 Move W8, 1
	165 And W9, W24, W21
	166 And W8, W9, W8
	167 NotImplemented "Instruction CSEL not yet implemented."
	168 NotImplemented "Instruction CSEL not yet implemented."
	169 Compare W8, 0
	170 JumpIfEqual {187}
	171 Move X0, [X23]
	172 Move X20, [X19+272]
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {177}
	176 Call 0x1C17DFC
	177 Move X0, X20
	178 Move X1, X31
	179 Call Object.op_Implicit, X0
	180 Move TEMP, X0
	181 And TEMP, TEMP, 1
	182 Compare TEMP, 1
	183 JumpIfNotEqual {191}
	184 Move W8, [X19+88]
	185 NotImplemented "Instruction CMP not yet implemented."
	186 NotImplemented "Instruction CSET not yet implemented."
	187 Compare X9, 0
	188 JumpIfEqual {261}
	189 Move W8, W31
	190 Move [X9+253], W31
	191 Move W8, W31
	192 Move [X21+253], W8
	193 Move X0, [X23]
	194 Move X20, [X19+280]
	195 Move W8, [X0+224]
	196 Compare W8, 0
	197 JumpIfNotEqual {199}
	198 Call 0x1C17DFC
	199 Move X0, X20
	200 Move X1, X31
	201 Call Object.op_Implicit, X0
	202 Move TEMP, X0
	203 And TEMP, TEMP, 1
	204 Compare TEMP, 1
	205 JumpIfNotEqual {209}
	206 Move W8, [X19+92]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 NotImplemented "Instruction CSET not yet implemented."
	209 Move W8, W31
	210 Move [X19+254], W8
	211 Move X0, [X23]
	212 Move X20, [X19+272]
	213 Move W8, [X0+224]
	214 Compare W8, 0
	215 JumpIfNotEqual {217}
	216 Call 0x1C17DFC
	217 Move X0, X20
	218 Move X1, X31
	219 Move X2, X31
	220 Call Object.op_Equality, X0, X1
	221 Move S3, W31
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfEqual {231}
	226 Move X0, [X19+272]
	227 Compare X0, 0
	228 JumpIfEqual {261}
	229 Move X1, X31
	230 Call RectTransform.get_rect, X0
	231 Move [X19+256], S3
	232 Move X0, [X23]
	233 Move X20, [X19+280]
	234 Move W8, [X0+224]
	235 Compare W8, 0
	236 JumpIfNotEqual {238}
	237 Call 0x1C17DFC
	238 Move X0, X20
	239 Move X1, X31
	240 Move X2, X31
	241 Call Object.op_Equality, X0, X1
	242 Move S2, W31
	243 Move TEMP, X0
	244 And TEMP, TEMP, 1
	245 Compare TEMP, 1
	246 JumpIfEqual {252}
	247 Move X0, [X19+280]
	248 Compare X0, 0
	249 JumpIfEqual {261}
	250 Move X1, X31
	251 Call RectTransform.get_rect, X0
	252 Move [X19+260], S2
	253 Move X20, [X31+48]
	254 Move X19, [X31+56]
	255 Move X22, [X31+32]
	256 Move X21, [X31+40]
	257 Move X24, [X31+16]
	258 Move X23, [X31+24]
	259 Move X30, [X31+64]
	260 Return 
	261 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03E3F3C8 FCMP S0, S10
	0x03E3F3CC B.PL 0x3E3F434
	0x03E3F3D0 LDUR V0, [X19 + 0xDC]
	0x03E3F3D4 LDR V1, [X19 + 0xD8]
	0x03E3F3D8 LDR V2, [X19 + 0x94]
	0x03E3F3DC LDR V3, [X19 + 0x98]
	0x03E3F3E0 FSUB S1, S2, S1
	0x03E3F3E4 FSUB V0.2S, V3.2S, V0.2S
	0x03E3F3E8 FMUL S1, S1, S1
	0x00000000 INVALID
	0x03E3F3F0 FADD S1, S0, S1
	0x03E3F3F4 MOV S0, V0.S[1]
	0x03E3F3F8 FADD S0, S0, S1
	0x03E3F3FC FCMP S0, S10
	0x03E3F400 B.PL 0x3E3F434
	0x03E3F404 LDR X0, [X19 + 0x20]
	0x03E3F408 CBZ X0, 0x3E3F4FC
	0x03E3F40C MOV X1, X31
	0x03E3F410 BL 0x3C3E7F0
	0x03E3F414 LDP S2, S3, [X19 + 0xC4]
	0x03E3F418 FSUB S0, S0, S2
	0x03E3F41C FSUB S1, S1, S3
	0x03E3F420 FMUL S0, S0, S0
	0x03E3F424 FMUL S1, S1, S1
	0x03E3F428 FADD S0, S0, S1
	0x03E3F42C FCMP S0, S10
	0x03E3F430 B.MI 0x3E3F49C
	0x03E3F434 MOV X0, X19
	0x03E3F438 MOV V0.16B, V8.16B
	0x03E3F43C MOV V1.16B, V9.16B
	0x03E3F440 BL 0x3E3E168
	0x03E3F444 ADRP X8, 0x32C000
	0x03E3F448 LDR X8, [X8 + 0x3A0]
	0x03E3F44C MOV X1, X19
	0x03E3F450 MOV X2, X31
	0x03E3F454 LDR X0, [X8]
	0x03E3F458 BL 0x3E252BC
	0x03E3F45C LDR X20, [X19 + 0x68]
	0x03E3F460 MOV X0, X19
	0x03E3F464 BL 0x3E3F570
	0x03E3F468 MOV X0, X19
	0x03E3F46C MOV V8.16B, V0.16B
	0x03E3F470 BL 0x3E3F670
	0x03E3F474 CBZ X20, 0x3E3F4FC
	0x03E3F478 ADRP X8, 0x31E000
	0x03E3F47C LDR X8, [X8 + 0xC38]
	0x03E3F480 MOV V1.16B, V0.16B
	0x03E3F484 MOV X0, X20
	0x03E3F488 MOV V0.16B, V8.16B
	0x03E3F48C LDR X1, [X8]
	0x03E3F490 BL 0x272ABAC
	0x03E3F494 MOV X0, X19
	0x03E3F498 BL 0x3E3E2E8
	0x03E3F49C MOV X0, X19
	0x03E3F4A0 BL 0x3E3F530
	0x03E3F4A4 STRB W31, [X19 + 0xC1]
	0x03E3F4A8 LDP X20, X19, [X31 + 0xA0]
	0x03E3F4AC LDP X22, X21, [X31 + 0x90]
	0x03E3F4B0 LDP X24, X23, [X31 + 0x80]
	0x03E3F4B4 LDP X26, X25, [X31 + 0x70]
	0x03E3F4B8 LDP X30, X27, [X31 + 0x60]
	0x03E3F4BC LDP D9, D8, [X31 + 0x50]
	0x03E3F4C0 LDP D11, D10, [X31 + 0x40]
	0x03E3F4C4 LDP D13, D12, [X31 + 0x30]
	0x03E3F4C8 LDP D15, D14, [X31 + 0x20]
	0x03E3F4CC ADD X31, X31, 0xB0
	0x03E3F4D0 RET
	0x03E3F4D4 STR S0, [X19 + 0xBC]
	0x03E3F4D8 B 0x3E3F258
	0x03E3F4DC FMOV S0, W31
	0x03E3F4E0 STR W31, [X19 + 0xBC]
	0x03E3F4E4 B 0x3E3F4EC
	0x03E3F4E8 LDR V0, [X19 + 0xBC]
	0x03E3F4EC LDR V1, [X31]
	0x03E3F4F0 FMUL S0, S1, S0
	0x03E3F4F4 FADD S10, S10, S0
	0x03E3F4F8 B 0x3E3F258
	0x03E3F4FC BL 0x1C16F20
	0x03E3F500 STR D8, [X31 - 0x20]!
	0x03E3F504 STP X30, X19, [X31 + 0x10]
	0x03E3F508 MOV X19, X0
	0x03E3F50C BL 0x3E3F570
	0x03E3F510 MOV X0, X19
	0x03E3F514 MOV V8.16B, V0.16B
	0x03E3F518 BL 0x3E3F670
	0x03E3F51C LDP X30, X19, [X31 + 0x10]
	0x03E3F520 MOV V1.16B, V0.16B
	0x03E3F524 MOV V0.16B, V8.16B
	0x03E3F528 LDR V8, [X31], #0x20
	0x03E3F52C RET
	0x03E3F530 STP X30, X19, [X31 - 0x10]!
	0x03E3F534 MOV X19, X0
	0x03E3F538 BL 0x3E3FB2C
	0x03E3F53C LDRB W1, [X19 + 0x29]
	0x03E3F540 LDR W2, [X19 + 0x5C]
	0x03E3F544 LDR X3, [X19 + 0x50]
	0x03E3F548 AND W0, W0, 0x1
	0x03E3F54C BL 0x3E404D8
	0x03E3F550 MOV X0, X19
	0x03E3F554 BL 0x3E3FAA4
	0x03E3F558 LDRB W1, [X19 + 0x28]
	0x03E3F55C LDR W2, [X19 + 0x58]
	0x03E3F560 LDR X3, [X19 + 0x48]
	0x03E3F564 AND W0, W0, 0x1
	0x03E3F568 LDP X30, X19, [X31], #0x10
	0x03E3F56C B 0x3E404D8
	0x03E3F570 STP D9, D8, [X31 - 0x30]!
	0x03E3F574 STR X30, [X31 + 0x10]
	0x03E3F578 STP X20, X19, [X31 + 0x20]
	0x03E3F57C MOV X19, X0
	0x03E3F580 BL 0x3E3DE10

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x5AA000
	007 Move W8, [X20+1960]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {33}
	013 Move X0, 0x31A000
	014 Move X0, [X0+1816]
	015 Call 0x1C17CF4
	016 Move X0, 0x2B5000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move X0, 0x32D000
	020 Move X0, [X0+904]
	021 Call 0x1C17CF4
	022 Move X0, 0x32D000
	023 Move X0, [X0+912]
	024 Call 0x1C17CF4
	025 Move X0, 0x31A000
	026 Move X0, [X0+2920]
	027 Call 0x1C17CF4
	028 Move X0, 0x31A000
	029 Move X0, [X0+2248]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X20+1960], W8
	033 Move X22, 0x2B5000
	034 Move X22, [X22+1432]
	035 Move X0, X19
	036 Move X1, X31
	037 Call UIBehaviour.OnEnable, X0
	038 Move W8, [X19+40]
	039 Compare W8, 0
	040 JumpIfEqual {77}
	041 Move X0, [X22]
	042 Move X20, [X19+72]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Call Object.op_Implicit, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {77}
	054 Move X8, [X19+72]
	055 Compare X8, 0
	056 JumpIfEqual {134}
	057 Move X20, [X8+280]
	058 Move X8, 0x31A000
	059 Move X8, [X8+2920]
	060 Move X0, [X8]
	061 Call 0x1C17F10
	062 Move X8, 0x32D000
	063 Move X8, [X8+904]
	064 Move X1, X19
	065 Move X3, X31
	066 Move X21, X0
	067 Move X2, [X8]
	068 Call UnityAction`1<Single>..ctor, X0, X1, X2
	069 Compare X20, 0
	070 JumpIfEqual {134}
	071 Move X8, 0x31A000
	072 Move X8, [X8+2248]
	073 Move X0, X20
	074 Move X1, X21
	075 Move X2, [X8]
	076 Call UnityEvent`1<Single>.AddListener, X0, X1
	077 Move W8, [X19+41]
	078 Compare W8, 0
	079 JumpIfEqual {116}
	080 Move X0, [X22]
	081 Move X20, [X19+80]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move X0, X20
	087 Move X1, X31
	088 Call Object.op_Implicit, X0
	089 Move TEMP, X0
	090 And TEMP, TEMP, 1
	091 Compare TEMP, 1
	092 JumpIfNotEqual {116}
	093 Move X8, [X19+80]
	094 Compare X8, 0
	095 JumpIfEqual {134}
	096 Move X20, [X8+280]
	097 Move X8, 0x31A000
	098 Move X8, [X8+2920]
	099 Move X0, [X8]
	100 Call 0x1C17F10
	101 Move X8, 0x32D000
	102 Move X8, [X8+912]
	103 Move X1, X19
	104 Move X3, X31
	105 Move X21, X0
	106 Move X2, [X8]
	107 Call UnityAction`1<Single>..ctor, X0, X1, X2
	108 Compare X20, 0
	109 JumpIfEqual {134}
	110 Move X8, 0x31A000
	111 Move X8, [X8+2248]
	112 Move X0, X20
	113 Move X1, X21
	114 Move X2, [X8]
	115 Call UnityEvent`1<Single>.AddListener, X0, X1
	116 Move X8, 0x31A000
	117 Move X8, [X8+1816]
	118 Move X0, [X8]
	119 Move W8, [X0+224]
	120 Compare W8, 0
	121 JumpIfNotEqual {123}
	122 Call 0x1C17DFC
	123 Move X0, X19
	124 Move X1, X31
	125 Call CanvasUpdateRegistry.RegisterCanvasElementForLayoutRebuild, X0
	126 Move X0, X19
	127 Move X20, [X31+32]
	128 Move X19, [X31+40]
	129 Move X22, [X31+16]
	130 Move X21, [X31+24]
	131 Move X30, [X31+48]
	132 Call ScrollRect.SetDirty, X0
	133 Return 
	134 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03E3F584 LDR V0, [X19 + 0x94]
	0x03E3F588 LDR V1, [X19 + 0xAC]
	0x03E3F58C FADD S8, S0, S0
	0x03E3F590 FADD S9, S1, S1
	0x03E3F594 FCMP S8, S9
	0x03E3F598 B.LS 0x3E3F610
	0x03E3F59C ADRP X20, 0x59A000
	0x03E3F5A0 LDRB W8, [X20 + 0x5AA]
	0x03E3F5A4 CBNZ W8, 0x3E3F5BC
	0x03E3F5A8 ADRP X0, 0x2BB000
	0x03E3F5AC LDR X0, [X0 + 0x4B8]
	0x03E3F5B0 BL 0x1C16CF4
	0x03E3F5B4 MOVZ W8, 0x1
	0x03E3F5B8 STRB W8, [X20 + 0x5AA]
	0x03E3F5BC ADRP X8, 0x2BB000
	0x03E3F5C0 LDR X8, [X8 + 0x4B8]
	0x03E3F5C4 ADRP X9, 0xFFFFFFFFFCCAB000
	0x03E3F5C8 LDR V0, [X9 + 0x240]
	0x03E3F5CC FABS S1, S8
	0x03E3F5D0 LDR X8, [X8]
	0x03E3F5D4 FABS S2, S9
	0x03E3F5D8 FCMP S1, S2
	0x03E3F5DC FCSEL S1, S1, S2, GT
	0x03E3F5E0 LDR X8, [X8 + 0xB8]
	0x03E3F5E4 FMUL S0, S1, S0
	0x03E3F5E8 FMOV S1, 8
	0x03E3F5EC LDR V3, [X8]
	0x03E3F5F0 FMUL S1, S3, S1
	0x03E3F5F4 FCMP S0, S1
	0x03E3F5F8 FCSEL S0, S0, S1, GT
	0x03E3F5FC FABD S1, S9, S9
	0x03E3F600 FCMP S1, S0
	0x03E3F604 B.PL 0x3E3F634
	0x03E3F608 LDR V1, [X19 + 0xAC]
	0x03E3F60C LDR V0, [X19 + 0x94]
	0x03E3F610 LDR V2, [X19 + 0xA0]
	0x03E3F614 LDR V3, [X19 + 0x88]
	0x03E3F618 FMOV S4, W31
	0x03E3F61C FSUB S1, S2, S1
	0x03E3F620 FSUB S0, S3, S0
	0x03E3F624 FCMP S1, S0
	0x03E3F628 FMOV S0, 1
	0x03E3F62C FCSEL S0, S0, S4, GT
	0x03E3F630 B 0x3E3F660
	0x03E3F634 LDR V0, [X19 + 0xA0]
	0x03E3F638 LDR V1, [X19 + 0xAC]
	0x03E3F63C LDR V2, [X19 + 0x88]
	0x03E3F640 LDR V3, [X19 + 0x94]
	0x03E3F644 FSUB S0, S0, S1
	0x03E3F648 FADD S1, S1, S1
	0x03E3F64C FSUB S2, S2, S3
	0x03E3F650 FADD S3, S3, S3
	0x03E3F654 FSUB S0, S0, S2
	0x03E3F658 FSUB S1, S3, S1
	0x03E3F65C FDIV S0, S0, S1
	0x03E3F660 LDP X20, X19, [X31 + 0x20]
	0x03E3F664 LDR X30, [X31 + 0x10]
	0x03E3F668 LDP D9, D8, [X31], #0x30
	0x03E3F66C RET
	0x03E3F670 STP D9, D8, [X31 - 0x30]!
	0x03E3F674 STR X30, [X31 + 0x10]
	0x03E3F678 STP X20, X19, [X31 + 0x20]
	0x03E3F67C MOV X19, X0
	0x03E3F680 BL 0x3E3DE10
	0x03E3F684 LDR V0, [X19 + 0x98]
	0x03E3F688 LDR V1, [X19 + 0xB0]
	0x03E3F68C FADD S8, S0, S0
	0x03E3F690 FADD S9, S1, S1
	0x03E3F694 FCMP S8, S9
	0x03E3F698 B.LS 0x3E3F710
	0x03E3F69C ADRP X20, 0x59A000
	0x03E3F6A0 LDRB W8, [X20 + 0x5AA]
	0x03E3F6A4 CBNZ W8, 0x3E3F6BC
	0x03E3F6A8 ADRP X0, 0x2BB000
	0x03E3F6AC LDR X0, [X0 + 0x4B8]
	0x03E3F6B0 BL 0x1C16CF4
	0x03E3F6B4 MOVZ W8, 0x1
	0x03E3F6B8 STRB W8, [X20 + 0x5AA]
	0x03E3F6BC ADRP X8, 0x2BB000
	0x03E3F6C0 LDR X8, [X8 + 0x4B8]
	0x03E3F6C4 ADRP X9, 0xFFFFFFFFFCCAB000
	0x03E3F6C8 LDR V0, [X9 + 0x240]
	0x03E3F6CC FABS S1, S8
	0x03E3F6D0 LDR X8, [X8]
	0x03E3F6D4 FABS S2, S9
	0x03E3F6D8 FCMP S1, S2
	0x03E3F6DC FCSEL S1, S1, S2, GT
	0x03E3F6E0 LDR X8, [X8 + 0xB8]
	0x03E3F6E4 FMUL S0, S1, S0
	0x03E3F6E8 FMOV S1, 8
	0x03E3F6EC LDR V3, [X8]
	0x03E3F6F0 FMUL S1, S3, S1
	0x03E3F6F4 FCMP S0, S1
	0x03E3F6F8 FCSEL S0, S0, S1, GT
	0x03E3F6FC FABD S1, S9, S9
	0x03E3F700 FCMP S1, S0
	0x03E3F704 B.PL 0x3E3F734
	0x03E3F708 LDR V1, [X19 + 0xB0]
	0x03E3F70C LDR V0, [X19 + 0x98]
	0x03E3F710 LDR V2, [X19 + 0xA4]
	0x03E3F714 LDR V3, [X19 + 0x8C]
	0x03E3F718 FMOV S4, W31
	0x03E3F71C FSUB S1, S2, S1
	0x03E3F720 FSUB S0, S3, S0
	0x03E3F724 FCMP S1, S0
	0x03E3F728 FMOV S0, 1
	0x03E3F72C FCSEL S0, S0, S4, GT
	0x03E3F730 B 0x3E3F760
	0x03E3F734 LDR V0, [X19 + 0xA4]
	0x03E3F738 LDR V1, [X19 + 0xB0]
	0x03E3F73C LDR V2, [X19 + 0x8C]
	0x03E3F740 LDR V3, [X19 + 0x98]
	0x03E3F744 FSUB S0, S0, S1
	0x03E3F748 FADD S1, S1, S1
	0x03E3F74C FSUB S2, S2, S3
	0x03E3F750 FADD S3, S3, S3
	0x03E3F754 FSUB S0, S0, S2
	0x03E3F758 FSUB S1, S3, S1
	0x03E3F75C FDIV S0, S0, S1
	0x03E3F760 LDP X20, X19, [X31 + 0x20]
	0x03E3F764 LDR X30, [X31 + 0x10]
	0x03E3F768 LDP D9, D8, [X31], #0x30
	0x03E3F76C RET
	0x03E3F770 STR D8, [X31 - 0x20]!
	0x03E3F774 STP X30, X19, [X31 + 0x10]
	0x03E3F778 LDR X8, [X0]
	0x03E3F77C MOV W1, W31
	0x03E3F780 MOV V8.16B, V1.16B
	0x03E3F784 MOV X19, X0
	0x03E3F788 LDR X9, [X8 + 0x448]
	0x03E3F78C LDR X2, [X8 + 0x450]
	0x03E3F790 BLR X9
	0x03E3F794 LDR X8, [X19]
	0x03E3F798 MOV X0, X19
	0x03E3F79C LDP X30, X19, [X31 + 0x10]
	0x03E3F7A0 MOVZ W1, 0x1
	0x03E3F7A4 LDR X3, [X8 + 0x448]
	0x03E3F7A8 LDR X2, [X8 + 0x450]
	0x03E3F7AC MOV V0.16B, V8.16B
	0x03E3F7B0 LDR V8, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5AA000
	007 Move X20, 0x31A000
	008 Move W8, [X21+1961]
	009 Move X20, [X20+1816]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {38}
	015 Move X0, 0x31A000
	016 Move X0, [X0+1816]
	017 Call 0x1C17CF4
	018 Move X0, 0x2B8000
	019 Move X0, [X0+2336]
	020 Call 0x1C17CF4
	021 Move X0, 0x2B5000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move X0, 0x32D000
	025 Move X0, [X0+904]
	026 Call 0x1C17CF4
	027 Move X0, 0x32D000
	028 Move X0, [X0+912]
	029 Call 0x1C17CF4
	030 Move X0, 0x31A000
	031 Move X0, [X0+2920]
	032 Call 0x1C17CF4
	033 Move X0, 0x31B000
	034 Move X0, [X0+112]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+1961], W8
	038 Move X0, [X20]
	039 Move X22, 0x2B5000
	040 Move W8, [X0+224]
	041 Move X22, [X22+1432]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move X0, X19
	046 Move X1, X31
	047 Call CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild, X0
	048 Move X0, [X22]
	049 Move X20, [X19+72]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Call Object.op_Implicit, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {84}
	061 Move X8, [X19+72]
	062 Compare X8, 0
	063 JumpIfEqual {163}
	064 Move X20, [X8+280]
	065 Move X8, 0x31A000
	066 Move X8, [X8+2920]
	067 Move X0, [X8]
	068 Call 0x1C17F10
	069 Move X8, 0x32D000
	070 Move X8, [X8+904]
	071 Move X1, X19
	072 Move X3, X31
	073 Move X21, X0
	074 Move X2, [X8]
	075 Call UnityAction`1<Single>..ctor, X0, X1, X2
	076 Compare X20, 0
	077 JumpIfEqual {163}
	078 Move X8, 0x31B000
	079 Move X8, [X8+112]
	080 Move X0, X20
	081 Move X1, X21
	082 Move X2, [X8]
	083 Call UnityEvent`1<Single>.RemoveListener, X0, X1
	084 Move X0, [X22]
	085 Move X20, [X19+80]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X20
	091 Move X1, X31
	092 Call Object.op_Implicit, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {120}
	097 Move X8, [X19+80]
	098 Compare X8, 0
	099 JumpIfEqual {163}
	100 Move X20, [X8+280]
	101 Move X8, 0x31A000
	102 Move X8, [X8+2920]
	103 Move X0, [X8]
	104 Call 0x1C17F10
	105 Move X8, 0x32D000
	106 Move X8, [X8+912]
	107 Move X1, X19
	108 Move X3, X31
	109 Move X21, X0
	110 Move X2, [X8]
	111 Call UnityAction`1<Single>..ctor, X0, X1, X2
	112 Compare X20, 0
	113 JumpIfEqual {163}
	114 Move X8, 0x31B000
	115 Move X8, [X8+112]
	116 Move X0, X20
	117 Move X1, X21
	118 Move X2, [X8]
	119 Call UnityEvent`1<Single>.RemoveListener, X0, X1
	120 Move X20, 0x2B8000
	121 Move X20, [X20+2336]
	122 Add X0, X19, 288
	123 Move X1, X31
	124 NotImplemented "Instruction STRH not yet implemented."
	125 Move [X19+252], W31
	126 Call DrivenRectTransformTracker.Clear, X0
	127 Move X21, 0x59B000
	128 Move W8, [X21+1935]
	129 Compare W8, 0
	130 JumpIfNotEqual {136}
	131 Move X0, 0x2BD000
	132 Move X0, [X0+3848]
	133 Call 0x1C17CF4
	134 Move W8, 1
	135 Move [X21+1935], W8
	136 Move X8, 0x2BD000
	137 Move X8, [X8+3848]
	138 Move X0, X19
	139 Move X8, [X8]
	140 Move X8, [X8+184]
	141 Move V0, [X8]
	142 Move [X19+184], D0
	143 Call ScrollRect.get_rectTransform, X0
	144 Move X8, [X20]
	145 Move X20, X0
	146 Move W9, [X8+224]
	147 Compare W9, 0
	148 JumpIfNotEqual {151}
	149 Move X0, X8
	150 Call 0x1C17DFC
	151 Move X0, X20
	152 Move X1, X31
	153 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	154 Move X0, X19
	155 Move X20, [X31+32]
	156 Move X19, [X31+40]
	157 Move X22, [X31+16]
	158 Move X21, [X31+24]
	159 Move X1, X31
	160 Move X30, [X31+48]
	161 Call UIBehaviour.OnDisable, X0
	162 Return 
	163 Call 0x1C17F20

Method: System.Boolean IsActive()

Disassembly:
	0x03E3F7B4 BR X3
	0x03E3F7B8 LDR X8, [X0]
	0x03E3F7BC MOV W1, W31
	0x03E3F7C0 LDR X3, [X8 + 0x448]
	0x03E3F7C4 LDR X2, [X8 + 0x450]
	0x03E3F7C8 BR X3
	0x03E3F7CC LDR X8, [X0]
	0x03E3F7D0 MOVZ W1, 0x1
	0x03E3F7D4 LDR X3, [X8 + 0x448]
	0x03E3F7D8 LDR X2, [X8 + 0x450]
	0x03E3F7DC BR X3
	0x03E3F7E0 LDR X8, [X0]
	0x03E3F7E4 MOV W1, W31
	0x03E3F7E8 LDR X3, [X8 + 0x448]
	0x03E3F7EC LDR X2, [X8 + 0x450]
	0x03E3F7F0 BR X3
	0x03E3F7F4 LDR X8, [X0]
	0x03E3F7F8 MOVZ W1, 0x1
	0x03E3F7FC LDR X3, [X8 + 0x448]
	0x03E3F800 LDR X2, [X8 + 0x450]
	0x03E3F804 BR X3
	0x03E3F808 STR D14, [X31 - 0x50]!
	0x03E3F80C STP D13, D12, [X31 + 0x8]
	0x03E3F810 STP D11, D10, [X31 + 0x18]
	0x03E3F814 STP D9, D8, [X31 + 0x28]
	0x03E3F818 STR X30, [X31 + 0x38]
	0x03E3F81C STP X20, X19, [X31 + 0x40]
	0x03E3F820 MOV W20, W1
	0x03E3F824 MOV V8.16B, V0.16B
	0x03E3F828 MOV X19, X0
	0x03E3F82C BL 0x3E3E834
	0x03E3F830 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5AA000
	005 Move W8, [X20+1962]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2B5000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1962], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call UIBehaviour.IsActive, X0
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {39}
	023 Move X8, 0x2B5000
	024 Move X8, [X8+1432]
	025 Move X19, [X19+32]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X19
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X1, X31
	035 Move X2, X31
	036 Move X30, [X31+32]
	037 Call Object.op_Inequality, X0, X1
	038 Return X0
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move W0, W31
	042 Move X30, [X31+32]
	043 Return X0

Method: System.Void EnsureLayoutHasRebuilt()

Disassembly:
	0x03E3F834 BL 0x3E3DE10
	0x03E3F838 CMP W20, 0x2
	0x03E3F83C B.EQ 0x3E3F85C
	0x03E3F840 CMP W20, 0x1
	0x03E3F844 B.EQ 0x3E3F86C
	0x03E3F848 CBNZ W20, 0x3E3F9E0
	0x03E3F84C LDR V0, [X19 + 0x94]
	0x03E3F850 LDR V10, [X19 + 0xAC]
	0x03E3F854 ADD X8, X19, 0xA0
	0x03E3F858 B 0x3E3F878
	0x03E3F85C LDR V0, [X19 + 0x9C]
	0x03E3F860 LDR V10, [X19 + 0xB4]
	0x03E3F864 ADD X8, X19, 0xA8
	0x03E3F868 B 0x3E3F878
	0x03E3F86C LDR V0, [X19 + 0x98]
	0x03E3F870 LDR V10, [X19 + 0xB0]
	0x03E3F874 ADD X8, X19, 0xA4
	0x03E3F878 FADD S0, S0, S0
	0x03E3F87C FADD S1, S10, S10
	0x03E3F880 FSUB S11, S0, S1
	0x03E3F884 LDR X0, [X19 + 0x20]
	0x03E3F888 CBZ X0, 0x3E3F9DC
	0x03E3F88C LDR V12, [X8]
	0x03E3F890 MOV X1, X31
	0x03E3F894 BL 0x3C3E7F0
	0x03E3F898 CMP W20, 0x1
	0x03E3F89C B.EQ 0x3E3F8B4
	0x03E3F8A0 CBNZ W20, 0x3E3FA1C
	0x03E3F8A4 MOV V9.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5AA000
	005 Move W8, [X20+1963]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x31A000
	012 Move X0, [X0+1816]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1963], W8
	016 Move W8, [X19+252]
	017 Compare W8, 0
	018 JumpIfNotEqual {32}
	019 Move X8, 0x31A000
	020 Move X8, [X8+1816]
	021 Move X0, [X8]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X31
	027 Call CanvasUpdateRegistry.IsRebuildingLayout
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {36}
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return 
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X0, X31
	039 Move X30, [X31+32]
	040 Call Canvas.ForceUpdateCanvases
	041 Return 

Method: System.Void StopMovement()

Disassembly:
	0x03E3F8A8 ADD X8, X19, 0x94
	0x03E3F8AC ADD X9, X19, 0x88
	0x03E3F8B0 B 0x3E3F8C0
	0x03E3F8B4 ADD X8, X19, 0x98
	0x03E3F8B8 ADD X9, X19, 0x8C
	0x03E3F8BC MOV V9.16B, V1.16B
	0x03E3F8C0 LDR X0, [X19 + 0x20]
	0x03E3F8C4 CBZ X0, 0x3E3F9DC
	0x03E3F8C8 LDR V13, [X9]
	0x03E3F8CC LDR V14, [X8]
	0x03E3F8D0 MOV X1, X31
	0x03E3F8D4 BL 0x3C3E7F0
	0x03E3F8D8 MOV V3.16B, V0.16B
	0x03E3F8DC CBZ W20, 0x3E3F8EC
	0x03E3F8E0 CMP W20, 0x1
	0x03E3F8E4 MOV V3.16B, V1.16B
	0x03E3F8E8 B.NE 0x3E3F9E0
	0x03E3F8EC FSUB S2, S12, S10
	0x03E3F8F0 FMUL S4, S11, S8
	0x03E3F8F4 ADRP X8, 0xFFFFFFFFFCCAB000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x59B000
	005 Move W8, [X20+1935]
	006 Move X19, X0
	007 Compare W8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, 0x2BD000
	010 Move X0, [X0+3848]
	011 Call 0x1C17CF4
	012 Move W8, 1
	013 Move [X20+1935], W8
	014 Move X8, 0x2BD000
	015 Move X8, [X8+3848]
	016 Move X8, [X8]
	017 Move X8, [X8+184]
	018 Move V0, [X8]
	019 Move [X19+184], D0
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return 

Method: System.Void OnScroll(UnityEngine.EventSystems.PointerEventData data)

Disassembly:
	0x03E3F8F8 FSUB S2, S2, S4
	0x03E3F8FC LDR V4, [X8 + 0x330]
	0x03E3F900 FSUB S5, S13, S14
	0x03E3F904 FADD S2, S2, S9
	0x03E3F908 FSUB S2, S2, S5
	0x03E3F90C FABD S3, S3, S3
	0x03E3F910 FCMP S3, S4
	0x03E3F914 B.LE 0x3E3F968
	0x03E3F918 CBZ W20, 0x3E3F984
	0x03E3F91C CMP W20, 0x2
	0x03E3F920 B.EQ 0x3E3F988
	0x03E3F924 CMP W20, 0x1
	0x03E3F928 B.EQ 0x3E3F98C
	0x03E3F92C ADRP X0, 0x2BE000
	0x03E3F930 LDR X0, [X0 + 0xF78]
	0x03E3F934 BL 0x1C16D08
	0x03E3F938 BL 0x1C16F10
	0x03E3F93C MOV X19, X0
	0x03E3F940 ADRP X0, 0x30F000
	0x03E3F944 LDR X0, [X0 + 0x6F8]
	0x03E3F948 BL 0x1C16D08
	0x03E3F94C MOV X1, X0
	0x03E3F950 MOV X0, X19
	0x03E3F954 MOV X2, X31
	0x03E3F958 BL 0x3379B6C
	0x03E3F95C ADRP X0, 0x320000
	0x03E3F960 LDR X0, [X0 + 0x2A0]
	0x03E3F964 B 0x3E3FA90
	0x03E3F968 LDP X20, X19, [X31 + 0x40]
	0x03E3F96C LDR X30, [X31 + 0x38]
	0x03E3F970 LDP D9, D8, [X31 + 0x28]
	0x03E3F974 LDP D11, D10, [X31 + 0x18]
	0x03E3F978 LDP D13, D12, [X31 + 0x8]
	0x03E3F97C LDR V14, [X31], #0x50
	0x03E3F980 RET
	0x03E3F984 MOV V0.16B, V2.16B
	0x03E3F988 MOV V2.16B, V1.16B
	0x03E3F98C LDR X0, [X19 + 0x20]
	0x03E3F990 CBZ X0, 0x3E3F9DC
	0x03E3F994 MOV V1.16B, V2.16B
	0x03E3F998 MOV X1, X31
	0x03E3F99C BL 0x3C3E880
	0x03E3F9A0 CMP W20, 0x1
	0x03E3F9A4 B.EQ 0x3E3F9B4
	0x03E3F9A8 CBNZ W20, 0x3E3FA58
	0x03E3F9AC ADD X8, X19, 0xB8
	0x03E3F9B0 B 0x3E3F9B8
	0x03E3F9B4 ADD X8, X19, 0xBC
	0x03E3F9B8 MOV X0, X19
	0x03E3F9BC LDP X20, X19, [X31 + 0x40]
	0x03E3F9C0 LDR X30, [X31 + 0x38]
	0x03E3F9C4 LDP D9, D8, [X31 + 0x28]
	0x03E3F9C8 LDP D11, D10, [X31 + 0x18]
	0x03E3F9CC LDP D13, D12, [X31 + 0x8]
	0x03E3F9D0 STR W31, [X8]
	0x03E3F9D4 LDR V14, [X31], #0x50
	0x03E3F9D8 B 0x3E3DE10
	0x03E3F9DC BL 0x1C16F20
	0x03E3F9E0 ADRP X0, 0x2BE000
	0x03E3F9E4 LDR X0, [X0 + 0xF78]
	0x03E3F9E8 BL 0x1C16D08
	0x03E3F9EC BL 0x1C16F10
	0x03E3F9F0 MOV X19, X0
	0x03E3F9F4 ADRP X0, 0x30F000
	0x03E3F9F8 LDR X0, [X0 + 0x6F8]
	0x03E3F9FC BL 0x1C16D08
	0x03E3FA00 MOV X1, X0
	0x03E3FA04 MOV X0, X19
	0x03E3FA08 MOV X2, X31
	0x03E3FA0C BL 0x3379B6C
	0x03E3FA10 ADRP X0, 0x30F000
	0x03E3FA14 LDR X0, [X0 + 0x700]
	0x03E3FA18 B 0x3E3FA90
	0x03E3FA1C ADRP X0, 0x2BE000
	0x03E3FA20 LDR X0, [X0 + 0xF78]
	0x03E3FA24 BL 0x1C16D08
	0x03E3FA28 BL 0x1C16F10
	0x03E3FA2C MOV X19, X0
	0x03E3FA30 ADRP X0, 0x306000
	0x03E3FA34 LDR X0, [X0 + 0xFF8]
	0x03E3FA38 BL 0x1C16D08
	0x03E3FA3C MOV X1, X0
	0x03E3FA40 MOV X0, X19
	0x03E3FA44 MOV X2, X31
	0x03E3FA48 BL 0x3379B6C
	0x03E3FA4C ADRP X0, 0x307000
	0x03E3FA50 LDR X0, [X0]
	0x03E3FA54 B 0x3E3FA90
	0x03E3FA58 ADRP X0, 0x2BE000
	0x03E3FA5C LDR X0, [X0 + 0xF78]
	0x03E3FA60 BL 0x1C16D08

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0]
	007 Move X20, X1
	008 Move X19, X0
	009 Move X9, [X8+456]
	010 Move X8, [X8+464]
	011 Move X1, X8
	012 NotImplemented "Instruction BLR not yet implemented."
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {36}
	017 Move X0, X19
	018 Call ScrollRect.EnsureLayoutHasRebuilt, X0
	019 Move X0, X19
	020 Call ScrollRect.UpdateBounds, X0
	021 Compare X20, 0
	022 JumpIfEqual {106}
	023 Move V0, [X20+320]
	024 Move V8, [X20+316]
	025 Move W9, [X19+41]
	026 Move W8, [X19+40]
	027 NotImplemented "Instruction FNEG not yet implemented."
	028 Compare W9, 0
	029 JumpIfEqual {42}
	030 Compare W8, 0
	031 JumpIfNotEqual {48}
	032 NotImplemented "Instruction FABS not yet implemented."
	033 NotImplemented "Instruction FABS not yet implemented."
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move S9, W31
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move X30, [X31+16]
	039 Move D9, [X31+48]
	040 Move D8, [X31+56]
	041 Return 
	042 Compare W8, 0
	043 JumpIfEqual {48}
	044 NotImplemented "Instruction FABS not yet implemented."
	045 NotImplemented "Instruction FABS not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 Move V9, V0
	048 Move V9, V8
	049 Move V8, V0
	050 Move V9, V8
	051 Move S8, W31
	052 Move X0, X20
	053 Move X1, X31
	054 Call PointerEventData.IsScrolling, X0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {61}
	059 Move W8, 1
	060 Move [X19+193], W8
	061 Move X0, [X19+32]
	062 Compare X0, 0
	063 JumpIfEqual {106}
	064 Move X1, X31
	065 Call RectTransform.get_anchoredPosition, X0
	066 Move V2, [X19+60]
	067 Move W8, [X19+44]
	068 Multiply S3, S9, S2
	069 Multiply S2, S8, S2
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Add S9, S0, S3
	072 Add S8, S1, S2
	073 Move X0, [X19+32]
	074 Compare X0, 0
	075 JumpIfEqual {106}
	076 Move X1, X31
	077 Call RectTransform.get_anchoredPosition, X0
	078 Subtract S0, S9, S0
	079 Subtract S1, S8, S1
	080 Move [X31+24], S0
	081 Move [X31+32], S1
	082 Move W2, [X19+40]
	083 Move W3, [X19+41]
	084 Move W4, [X19+44]
	085 Add X0, X19, 160
	086 Add X1, X19, 136
	087 Add X5, X31, 24
	088 Call ScrollRect.InternalCalculateOffset, X0, X1, X2, X3, X4, X5
	089 Add S9, S9, S0
	090 Add S8, S8, S1
	091 Move X8, [X19]
	092 Move X0, X19
	093 Move V0, V9
	094 Move V1, V8
	095 Move X9, [X8+1064]
	096 Move X1, [X8+1072]
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Move X0, X19
	099 Move X20, [X31+32]
	100 Move X19, [X31+40]
	101 Move X30, [X31+16]
	102 Move D9, [X31+48]
	103 Move D8, [X31+56]
	104 Call ScrollRect.UpdateBounds, X0
	105 Return 
	106 Call 0x1C17F20

Method: System.Void OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E3FA94 MOV X1, X0
	0x03E3FA98 MOV X0, X19
	0x03E3FA9C BL 0x1C16DEC
	0x03E3FAA0 B 0x3E3D6AC
	0x03E3FAA4 STP X30, X21, [X31 - 0x20]!
	0x03E3FAA8 STP X20, X19, [X31 + 0x10]
	0x03E3FAAC ADRP X20, 0x5A9000
	0x03E3FAB0 ADRP X21, 0x2B4000
	0x03E3FAB4 LDRB W8, [X20 + 0x7B1]
	0x03E3FAB8 LDR X21, [X21 + 0x970]
	0x03E3FABC MOV X19, X0
	0x03E3FAC0 TBNZ X8, 0x0, 0x3E3FAD8
	0x03E3FAC4 ADRP X0, 0x2B4000
	0x03E3FAC8 LDR X0, [X0 + 0x970]
	0x03E3FACC BL 0x1C16CF4
	0x03E3FAD0 MOVZ W8, 0x1
	0x03E3FAD4 STRB W8, [X20 + 0x7B1]
	0x03E3FAD8 LDR X0, [X21]
	0x03E3FADC LDR W8, [X0 + 0xE0]
	0x03E3FAE0 CBNZ W8, 0x3E3FAE8
	0x03E3FAE4 BL 0x1C16DFC
	0x03E3FAE8 MOV X0, X31
	0x03E3FAEC BL 0x3C018E4
	0x03E3FAF0 TBZ X0, 0x0, 0x3E3FB1C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {29}
	006 Move W8, [X1+328]
	007 Compare W8, 0
	008 JumpIfNotEqual {25}
	009 Move X20, 0x59B000
	010 Move W8, [X20+1935]
	011 Move X19, X0
	012 Compare W8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, 0x2BD000
	015 Move X0, [X0+3848]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1935], W8
	019 Move X8, 0x2BD000
	020 Move X8, [X8+3848]
	021 Move X8, [X8]
	022 Move X8, [X8+184]
	023 Move V0, [X8]
	024 Move [X19+184], D0
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Call 0x1C17F20

Method: System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E3FAF4 LDR V1, [X19 + 0xAC]
	0x03E3FAF8 ADRP X8, 0xFFFFFFFFFCCAB000
	0x03E3FAFC LDR V0, [X19 + 0x94]
	0x03E3FB00 LDR V2, [X8 + 0x330]
	0x03E3FB04 FADD S1, S1, S1
	0x03E3FB08 FADD S0, S0, S0
	0x03E3FB0C FADD S1, S1, S2
	0x03E3FB10 FCMP S0, S1
	0x03E3FB14 CSET W0, GT
	0x03E3FB18 B 0x3E3FB20
	0x03E3FB1C MOVZ W0, 0x1
	0x03E3FB20 LDP X20, X19, [X31 + 0x10]
	0x03E3FB24 LDP X30, X21, [X31], #0x20
	0x03E3FB28 RET
	0x03E3FB2C STP X30, X21, [X31 - 0x20]!
	0x03E3FB30 STP X20, X19, [X31 + 0x10]
	0x03E3FB34 ADRP X20, 0x5A9000
	0x03E3FB38 ADRP X21, 0x2B4000
	0x03E3FB3C LDRB W8, [X20 + 0x7B2]
	0x03E3FB40 LDR X21, [X21 + 0x970]
	0x03E3FB44 MOV X19, X0
	0x03E3FB48 TBNZ X8, 0x0, 0x3E3FB60
	0x03E3FB4C ADRP X0, 0x2B4000
	0x03E3FB50 LDR X0, [X0 + 0x970]
	0x03E3FB54 BL 0x1C16CF4
	0x03E3FB58 MOVZ W8, 0x1
	0x03E3FB5C STRB W8, [X20 + 0x7B2]
	0x03E3FB60 LDR X0, [X21]
	0x03E3FB64 LDR W8, [X0 + 0xE0]
	0x03E3FB68 CBNZ W8, 0x3E3FB70
	0x03E3FB6C BL 0x1C16DFC
	0x03E3FB70 MOV X0, X31
	0x03E3FB74 BL 0x3C018E4
	0x03E3FB78 TBZ X0, 0x0, 0x3E3FBA4
	0x03E3FB7C LDR V1, [X19 + 0xB0]
	0x03E3FB80 ADRP X8, 0xFFFFFFFFFCCAB000
	0x03E3FB84 LDR V0, [X19 + 0x98]
	0x03E3FB88 LDR V2, [X8 + 0x330]
	0x03E3FB8C FADD S1, S1, S1
	0x03E3FB90 FADD S0, S0, S0
	0x03E3FB94 FADD S1, S1, S2
	0x03E3FB98 FCMP S0, S1
	0x03E3FB9C CSET W0, GT
	0x03E3FBA0 B 0x3E3FBA8
	0x03E3FBA4 MOVZ W0, 0x1
	0x03E3FBA8 LDP X20, X19, [X31 + 0x10]
	0x03E3FBAC LDP X30, X21, [X31], #0x20
	0x03E3FBB0 RET
	0x03E3FBB4 RET
	0x03E3FBB8 RET
	0x03E3FBBC FMOV S0, -1
	0x03E3FBC0 RET
	0x03E3FBC4 FMOV S0, -1
	0x03E3FBC8 RET
	0x03E3FBCC FMOV S0, -1
	0x03E3FBD0 RET
	0x03E3FBD4 FMOV S0, -1
	0x03E3FBD8 RET
	0x03E3FBDC FMOV S0, -1
	0x03E3FBE0 RET
	0x03E3FBE4 FMOV S0, -1
	0x03E3FBE8 RET
	0x03E3FBEC MOVN W0, 0x0
	0x03E3FBF0 RET
	0x03E3FBF4 SUB X31, X31, 0x80
	0x03E3FBF8 STR D12, [X31 + 0x20]
	0x03E3FBFC STP D11, D10, [X31 + 0x30]
	0x03E3FC00 STP D9, D8, [X31 + 0x40]
	0x03E3FC04 STP X30, X23, [X31 + 0x50]
	0x03E3FC08 STP X22, X21, [X31 + 0x60]
	0x03E3FC0C STP X20, X19, [X31 + 0x70]
	0x03E3FC10 ADRP X20, 0x5A9000
	0x03E3FC14 LDRB W8, [X20 + 0x7B3]
	0x03E3FC18 MOV X19, X0
	0x03E3FC1C TBNZ X8, 0x0, 0x3E3FC34

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x5AA000
	009 Move W8, [X21+1964]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x30B000
	017 Move X0, [X0+1720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1964], W8
	021 Compare X20, 0
	022 JumpIfEqual {94}
	023 Move W8, [X20+328]
	024 Compare W8, 0
	025 JumpIfNotEqual {86}
	026 Move X8, [X19]
	027 Move X0, X19
	028 Move X9, [X8+456]
	029 Move X1, [X8+464]
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {86}
	035 Move X0, X19
	036 Call ScrollRect.UpdateBounds, X0
	037 Move X21, 0x59B000
	038 Move W8, [X21+1935]
	039 Compare W8, 0
	040 JumpIfNotEqual {46}
	041 Move X0, 0x2BD000
	042 Move X0, [X0+3848]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X21+1935], W8
	046 Move X8, 0x2BD000
	047 Move X8, [X8+3848]
	048 Move X21, X19
	049 Move X0, X19
	050 Move X8, [X8]
	051 Move X8, [X8+184]
	052 Move V0, [X8]
	053 Move [X21+112], D0
	054 Call ScrollRect.get_viewRect, X0
	055 Move V8, [X20+260]
	056 Move V9, [X20+264]
	057 Move X22, X0
	058 Move X0, X20
	059 Move X1, X31
	060 Call PointerEventData.get_pressEventCamera, X0
	061 Move X8, 0x30B000
	062 Move X8, [X8+1720]
	063 Move X20, X0
	064 Move X8, [X8]
	065 Move W9, [X8+224]
	066 Compare W9, 0
	067 JumpIfNotEqual {70}
	068 Move X0, X8
	069 Call 0x1C17DFC
	070 Move X0, X22
	071 Move V0, V8
	072 Move V1, V9
	073 Move X1, X20
	074 Move X2, X21
	075 Move X3, X31
	076 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	077 Move X0, [X19+32]
	078 Compare X0, 0
	079 JumpIfEqual {94}
	080 Move X1, X31
	081 Call RectTransform.get_anchoredPosition, X0
	082 Move W8, 1
	083 Move [X19+120], S0
	084 Move [X19+128], S1
	085 Move [X19+192], W8
	086 Move X20, [X31+48]
	087 Move X19, [X31+56]
	088 Move X22, [X31+32]
	089 Move X21, [X31+40]
	090 Move X30, [X31+16]
	091 Move D9, [X31+64]
	092 Move D8, [X31+72]
	093 Return 
	094 Call 0x1C17F20

Method: System.Void OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E3FC20 ADRP X0, 0x2B7000
	0x03E3FC24 LDR X0, [X0 + 0x920]
	0x03E3FC28 BL 0x1C16CF4
	0x03E3FC2C MOVZ W8, 0x1
	0x03E3FC30 STRB W8, [X20 + 0x7B3]
	0x03E3FC34 ADD X20, X19, 0x120
	0x03E3FC38 MOV X0, X20
	0x03E3FC3C MOV X1, X31

ISIL:
	001 Move [X31-16], X30
	002 Compare X1, 0
	003 JumpIfEqual {10}
	004 Move W8, [X1+328]
	005 Compare W8, 0
	006 JumpIfNotEqual {8}
	007 Move [X0+192], W31
	008 Move X30, [X31+16]
	009 Return 
	010 Call 0x1C17F20

Method: System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)

Disassembly:
	0x03E3FC40 BL 0x3C3E3A8
	0x03E3FC44 MOV X0, X19
	0x03E3FC48 BL 0x3E3DAB8
	0x03E3FC4C LDRB W8, [X19 + 0xFD]
	0x03E3FC50 CBNZ W8, 0x3E3FC5C
	0x03E3FC54 LDRB W8, [X19 + 0xFE]
	0x03E3FC58 CBZ W8, 0x3E3FF38
	0x03E3FC5C MOV X0, X19
	0x03E3FC60 BL 0x3E3D754
	0x03E3FC64 MOV X2, X0
	0x03E3FC68 MOVZ W3, 0x3F06
	0x03E3FC6C MOV X0, X20
	0x03E3FC70 MOV X1, X19
	0x03E3FC74 MOV X4, X31
	0x03E3FC78 BL 0x3C3E3A4
	0x03E3FC7C MOV X0, X19
	0x03E3FC80 BL 0x3E3D754
	0x03E3FC84 ADRP X21, 0x59A000
	0x03E3FC88 LDRB W8, [X21 + 0x78F]
	0x03E3FC8C MOV X20, X0
	0x03E3FC90 CBNZ W8, 0x3E3FCA8
	0x03E3FC94 ADRP X0, 0x2BC000
	0x03E3FC98 LDR X0, [X0 + 0xF08]
	0x03E3FC9C BL 0x1C16CF4
	0x03E3FCA0 MOVZ W8, 0x1
	0x03E3FCA4 STRB W8, [X21 + 0x78F]
	0x03E3FCA8 CBZ X20, 0x3E400D4
	0x03E3FCAC ADRP X22, 0x2BC000
	0x03E3FCB0 LDR X22, [X22 + 0xF08]
	0x03E3FCB4 MOV X0, X20
	0x03E3FCB8 MOV X1, X31
	0x03E3FCBC LDR X8, [X22]
	0x03E3FCC0 LDR X8, [X8 + 0xB8]
	0x03E3FCC4 LDP S0, S1, [X8]
	0x03E3FCC8 BL 0x3C3E648
	0x03E3FCCC MOV X0, X19
	0x03E3FCD0 BL 0x3E3D754
	0x03E3FCD4 ADRP X23, 0x5A2000
	0x03E3FCD8 LDRB W8, [X23 + 0xA48]
	0x03E3FCDC MOV X20, X0
	0x03E3FCE0 CBNZ W8, 0x3E3FCF8
	0x03E3FCE4 ADRP X0, 0x2BC000
	0x03E3FCE8 LDR X0, [X0 + 0xF08]
	0x03E3FCEC BL 0x1C16CF4
	0x03E3FCF0 MOVZ W8, 0x1
	0x03E3FCF4 STRB W8, [X23 + 0xA48]
	0x03E3FCF8 CBZ X20, 0x3E400D4
	0x03E3FCFC LDR X8, [X22]
	0x03E3FD00 MOV X0, X20
	0x03E3FD04 MOV X1, X31
	0x03E3FD08 LDR X8, [X8 + 0xB8]
	0x03E3FD0C LDP S0, S1, [X8 + 0x8]
	0x03E3FD10 BL 0x3C3E764
	0x03E3FD14 MOV X0, X19
	0x03E3FD18 BL 0x3E3D754
	0x03E3FD1C LDRB W8, [X21 + 0x78F]
	0x03E3FD20 MOV X20, X0
	0x03E3FD24 CBNZ W8, 0x3E3FD3C
	0x03E3FD28 ADRP X0, 0x2BC000
	0x03E3FD2C LDR X0, [X0 + 0xF08]
	0x03E3FD30 BL 0x1C16CF4
	0x03E3FD34 MOVZ W8, 0x1
	0x03E3FD38 STRB W8, [X21 + 0x78F]
	0x03E3FD3C CBZ X20, 0x3E400D4
	0x03E3FD40 LDR X8, [X22]
	0x03E3FD44 MOV X0, X20
	0x03E3FD48 MOV X1, X31
	0x03E3FD4C LDR X8, [X8 + 0xB8]
	0x03E3FD50 LDP S0, S1, [X8]
	0x03E3FD54 BL 0x3C3E99C
	0x03E3FD58 MOV X0, X19
	0x03E3FD5C BL 0x3E3D754
	0x03E3FD60 LDRB W8, [X21 + 0x78F]
	0x03E3FD64 MOV X20, X0
	0x03E3FD68 CBNZ W8, 0x3E3FD80
	0x03E3FD6C ADRP X0, 0x2BC000
	0x03E3FD70 LDR X0, [X0 + 0xF08]
	0x03E3FD74 BL 0x1C16CF4
	0x03E3FD78 MOVZ W8, 0x1
	0x03E3FD7C STRB W8, [X21 + 0x78F]
	0x03E3FD80 CBZ X20, 0x3E400D4
	0x03E3FD84 LDR X8, [X22]
	0x03E3FD88 ADRP X21, 0x2B7000
	0x03E3FD8C MOV X0, X20
	0x03E3FD90 MOV X1, X31
	0x03E3FD94 LDR X8, [X8 + 0xB8]
	0x03E3FD98 LDP S0, S1, [X8]
	0x03E3FD9C LDR X21, [X21 + 0x920]
	0x03E3FDA0 BL 0x3C3E880
	0x03E3FDA4 LDR X0, [X21]
	0x03E3FDA8 LDR X20, [X19 + 0x20]
	0x03E3FDAC LDR W8, [X0 + 0xE0]
	0x03E3FDB0 CBNZ W8, 0x3E3FDB8
	0x03E3FDB4 BL 0x1C16DFC
	0x03E3FDB8 MOV X0, X20
	0x03E3FDBC MOV X1, X31
	0x03E3FDC0 BL 0x3E34120
	0x03E3FDC4 MOV X0, X19
	0x03E3FDC8 BL 0x3E3D754
	0x03E3FDCC CBZ X0, 0x3E400D4
	0x03E3FDD0 MOV X1, X31
	0x03E3FDD4 BL 0x3C3E51C
	0x03E3FDD8 MOV X0, X19
	0x03E3FDDC MOV V8.16B, V0.16B
	0x03E3FDE0 MOV V9.16B, V1.16B
	0x03E3FDE4 MOV V10.16B, V2.16B
	0x03E3FDE8 MOV V11.16B, V3.16B
	0x03E3FDEC BL 0x3E3D754
	0x03E3FDF0 CBZ X0, 0x3E400D4
	0x03E3FDF4 FMOV S12, 0.5
	0x03E3FDF8 FMUL S0, S11, S12
	0x03E3FDFC FMUL S1, S10, S12
	0x03E3FE00 MOV X1, X31
	0x03E3FE04 FADD S9, S9, S0
	0x03E3FE08 FADD S8, S8, S1
	0x03E3FE0C BL 0x3C3E51C
	0x03E3FE10 FMUL S0, S2, S12
	0x03E3FE14 FMUL S1, S3, S12
	0x03E3FE18 ADD X8, X31, 0x8
	0x03E3FE1C MOV X0, X19
	0x03E3FE20 STP S8, S9, [X19 + 0xA0]
	0x03E3FE24 STR W31, [X19 + 0xA8]
	0x03E3FE28 STP S0, S1, [X19 + 0xAC]
	0x03E3FE2C STR W31, [X19 + 0xB4]
	0x03E3FE30 BL 0x3E400D8
	0x03E3FE34 LDUR V0, [X31 + 0x8]
	0x03E3FE38 LDR X8, [X31 + 0x18]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X30
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X21, 0x5AA000
	009 Move W8, [X21+1965]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x30B000
	017 Move X0, [X0+1720]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1965], W8
	021 Move [X31+16], X31
	022 Move W8, [X19+192]
	023 Compare W8, 0
	024 JumpIfEqual {138}
	025 Compare X20, 0
	026 JumpIfEqual {146}
	027 Move W8, [X20+328]
	028 Compare W8, 0
	029 JumpIfNotEqual {138}
	030 Move X8, [X19]
	031 Move X0, X19
	032 Move X9, [X8+456]
	033 Move X1, [X8+464]
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {138}
	039 Move X0, X19
	040 Call ScrollRect.get_viewRect, X0
	041 Move V8, [X20+260]
	042 Move V9, [X20+264]
	043 Move X21, X0
	044 Move X0, X20
	045 Move X1, X31
	046 Call PointerEventData.get_pressEventCamera, X0
	047 Move X8, 0x30B000
	048 Move X8, [X8+1720]
	049 Move X20, X0
	050 Move X8, [X8]
	051 Move W9, [X8+224]
	052 Compare W9, 0
	053 JumpIfNotEqual {56}
	054 Move X0, X8
	055 Call 0x1C17DFC
	056 Add X2, X31, 16
	057 Move X0, X21
	058 Move V0, V8
	059 Move V1, V9
	060 Move X1, X20
	061 Move X3, X31
	062 Call RectTransformUtility.ScreenPointToLocalPointInRectangle, X0, X1, X2, X3
	063 Move TEMP, X0
	064 And TEMP, TEMP, 1
	065 Compare TEMP, 1
	066 JumpIfNotEqual {138}
	067 Move X0, X19
	068 Call ScrollRect.UpdateBounds, X0
	069 Move X0, [X19+32]
	070 Compare X0, 0
	071 JumpIfEqual {146}
	072 Move V0, [X31+16]
	073 Move D1, [X19+112]
	074 Move D2, [X19+120]
	075 Move X1, X31
	076 Subtract V0, V0, V1
	077 Add V0, V0, V2
	078 Move [X31], V0
	079 Call RectTransform.get_anchoredPosition, X0
	080 Add X0, X19, 160
	081 Move V0.S[1], V1.S[0]
	082 Move V1, [X31]
	083 Add X1, X19, 136
	084 Add X5, X31, 24
	085 Subtract V0, V1, V0
	086 Move [X31+24], D0
	087 Move W2, [X19+40]
	088 Move W3, [X19+41]
	089 Move W4, [X19+44]
	090 Call ScrollRect.InternalCalculateOffset, X0, X1, X2, X3, X4, X5
	091 Move V2, V1
	092 Move V1, [X31]
	093 Move W8, [X19+44]
	094 Move V3, V0
	095 Add S0, S1, S0
	096 Move S1, V1.S[1]
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Add S1, S1, S2
	099 NotImplemented "Instruction FCMP not yet implemented."
	100 Move X8, -53821440
	101 Move V4, [X8+1088]
	102 Move V5, [X19+172]
	103 NotImplemented "Instruction FABS not yet implemented."
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 Multiply S4, S6, S4
	106 Add S5, S5, S5
	107 Move S6, 1
	108 NotImplemented "Instruction FDIV not yet implemented."
	109 Add S4, S4, S6
	110 NotImplemented "Instruction FDIV not yet implemented."
	111 Subtract S4, S6, S4
	112 Multiply S6, S5, S4
	113 NotImplemented "Instruction FNMUL not yet implemented."
	114 NotImplemented "Instruction FCSEL not yet implemented."
	115 Subtract S0, S0, S3
	116 NotImplemented "Instruction FCMP not yet implemented."
	117 Move X8, -53821440
	118 Move V3, [X8+1088]
	119 Move V4, [X19+176]
	120 NotImplemented "Instruction FABS not yet implemented."
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 Multiply S3, S5, S3
	123 Add S4, S4, S4
	124 Move S5, 1
	125 NotImplemented "Instruction FDIV not yet implemented."
	126 Add S3, S3, S5
	127 NotImplemented "Instruction FDIV not yet implemented."
	128 Subtract S3, S5, S3
	129 Multiply S5, S4, S3
	130 NotImplemented "Instruction FNMUL not yet implemented."
	131 NotImplemented "Instruction FCSEL not yet implemented."
	132 Subtract S1, S1, S2
	133 Move X8, [X19]
	134 Move X0, X19
	135 Move X9, [X8+1064]
	136 Move X1, [X8+1072]
	137 NotImplemented "Instruction BLR not yet implemented."
	138 Move X20, [X31+64]
	139 Move X19, [X31+72]
	140 Move X30, [X31+48]
	141 Move X21, [X31+56]
	142 Move D9, [X31+32]
	143 Move D8, [X31+40]
	144 Add X31, X31, 80
	145 Return 
	146 Call 0x1C17F20

Method: System.Void SetContentAnchoredPosition(UnityEngine.Vector2 position)

Disassembly:
	0x03E3FE74 CBZ X0, 0x3E400D4
	0x03E3FE78 MOV X1, X31
	0x03E3FE7C BL 0x3C3E90C
	0x03E3FE80 CBZ X20, 0x3E400D4
	0x03E3FE84 FADD S0, S8, S9
	0x03E3FE88 FNEG S0, S0
	0x03E3FE8C MOV X0, X20
	0x03E3FE90 MOV X1, X31
	0x03E3FE94 BL 0x3C3E99C
	0x03E3FE98 LDR X0, [X21]
	0x03E3FE9C LDR X20, [X19 + 0x20]
	0x03E3FEA0 LDR W8, [X0 + 0xE0]
	0x03E3FEA4 CBNZ W8, 0x3E3FEAC
	0x03E3FEA8 BL 0x1C16DFC
	0x03E3FEAC MOV X0, X20
	0x03E3FEB0 MOV X1, X31
	0x03E3FEB4 BL 0x3E34120
	0x03E3FEB8 MOV X0, X19
	0x03E3FEBC BL 0x3E3D754
	0x03E3FEC0 CBZ X0, 0x3E400D4
	0x03E3FEC4 MOV X1, X31
	0x03E3FEC8 BL 0x3C3E51C
	0x03E3FECC MOV X0, X19
	0x03E3FED0 MOV V8.16B, V0.16B
	0x03E3FED4 MOV V9.16B, V1.16B
	0x03E3FED8 MOV V10.16B, V2.16B
	0x03E3FEDC MOV V11.16B, V3.16B
	0x03E3FEE0 BL 0x3E3D754
	0x03E3FEE4 CBZ X0, 0x3E400D4
	0x03E3FEE8 FMOV S12, 0.5
	0x03E3FEEC FMUL S0, S11, S12
	0x03E3FEF0 FMUL S1, S10, S12
	0x03E3FEF4 MOV X1, X31
	0x03E3FEF8 FADD S9, S9, S0
	0x03E3FEFC FADD S8, S8, S1
	0x03E3FF00 BL 0x3C3E51C
	0x03E3FF04 FMUL S0, S2, S12
	0x03E3FF08 FMUL S1, S3, S12
	0x03E3FF0C ADD X8, X31, 0x8
	0x03E3FF10 MOV X0, X19
	0x03E3FF14 STP S8, S9, [X19 + 0xA0]
	0x03E3FF18 STR W31, [X19 + 0xA8]
	0x03E3FF1C STP S0, S1, [X19 + 0xAC]
	0x03E3FF20 STR W31, [X19 + 0xB4]
	0x03E3FF24 BL 0x3E400D8

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X19
	005 Move W8, [X0+40]
	006 Move V8, V1
	007 Move X19, X0
	008 Compare W8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, [X19+32]
	011 Compare X0, 0
	012 JumpIfEqual {57}
	013 Move X1, X31
	014 Call RectTransform.get_anchoredPosition, X0
	015 Move W8, [X19+41]
	016 Move V9, V0
	017 Compare W8, 0
	018 JumpIfNotEqual {25}
	019 Move X0, [X19+32]
	020 Compare X0, 0
	021 JumpIfEqual {57}
	022 Move X1, X31
	023 Call RectTransform.get_anchoredPosition, X0
	024 Move V8, V1
	025 Move X0, [X19+32]
	026 Compare X0, 0
	027 JumpIfEqual {57}
	028 Move X1, X31
	029 Call RectTransform.get_anchoredPosition, X0
	030 Move X8, -53825536
	031 Move V2, [X8+3872]
	032 Subtract S0, S9, S0
	033 Subtract S1, S8, S1
	034 Multiply S0, S0, S0
	035 Multiply S1, S1, S1
	036 Add S0, S0, S1
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Move X0, [X19+32]
	039 Compare X0, 0
	040 JumpIfEqual {57}
	041 Move V0, V9
	042 Move V1, V8
	043 Move X1, X31
	044 Call RectTransform.set_anchoredPosition, X0, X1
	045 Move X0, X19
	046 Move X30, [X31+16]
	047 Move X19, [X31+24]
	048 Move D9, [X31+32]
	049 Move D8, [X31+40]
	050 Call ScrollRect.UpdateBounds, X0
	051 Return 
	052 Move X30, [X31+16]
	053 Move X19, [X31+24]
	054 Move D9, [X31+32]
	055 Move D8, [X31+40]
	056 Return 
	057 Call 0x1C17F20

Method: System.Void LateUpdate()

Disassembly:
	0x03E3FF28 LDR X8, [X31 + 0x18]
	0x03E3FF2C LDUR V0, [X31 + 0x8]
	0x03E3FF30 STR X8, [X19 + 0x98]
	0x03E3FF34 STUR V0, [X19 + 0x88]
	0x03E3FF38 LDRB W8, [X19 + 0xFD]
	0x03E3FF3C CBZ W8, 0x3E4000C
	0x03E3FF40 MOV X0, X19
	0x03E3FF44 BL 0x3E3FAA4
	0x03E3FF48 TBZ X0, 0x0, 0x3E4000C
	0x03E3FF4C MOV X0, X19
	0x03E3FF50 BL 0x3E3D754
	0x03E3FF54 MOV X20, X0
	0x03E3FF58 MOV X0, X19
	0x03E3FF5C BL 0x3E3D754
	0x03E3FF60 CBZ X0, 0x3E400D4
	0x03E3FF64 MOV X1, X31
	0x03E3FF68 BL 0x3C3E90C
	0x03E3FF6C CBZ X20, 0x3E400D4
	0x03E3FF70 LDR V1, [X19 + 0x100]
	0x03E3FF74 LDR V2, [X19 + 0x60]
	0x03E3FF78 MOV X0, X20
	0x03E3FF7C MOV X1, X31
	0x03E3FF80 FADD S1, S1, S2
	0x03E3FF84 FNEG S1, S1
	0x03E3FF88 BL 0x3C3E99C
	0x03E3FF8C MOV X0, X19
	0x03E3FF90 BL 0x3E3D754
	0x03E3FF94 CBZ X0, 0x3E400D4
	0x03E3FF98 MOV X1, X31
	0x03E3FF9C BL 0x3C3E51C
	0x03E3FFA0 MOV X0, X19
	0x03E3FFA4 MOV V8.16B, V0.16B
	0x03E3FFA8 MOV V9.16B, V1.16B
	0x03E3FFAC MOV V10.16B, V2.16B
	0x03E3FFB0 MOV V11.16B, V3.16B
	0x03E3FFB4 BL 0x3E3D754
	0x03E3FFB8 CBZ X0, 0x3E400D4
	0x03E3FFBC FMOV S12, 0.5
	0x03E3FFC0 FMUL S0, S11, S12
	0x03E3FFC4 FMUL S1, S10, S12
	0x03E3FFC8 MOV X1, X31
	0x03E3FFCC FADD S9, S9, S0
	0x03E3FFD0 FADD S8, S8, S1
	0x03E3FFD4 BL 0x3C3E51C
	0x03E3FFD8 FMUL S0, S2, S12
	0x03E3FFDC FMUL S1, S3, S12
	0x03E3FFE0 ADD X8, X31, 0x8
	0x03E3FFE4 MOV X0, X19
	0x03E3FFE8 STP S8, S9, [X19 + 0xA0]
	0x03E3FFEC STR W31, [X19 + 0xA8]
	0x03E3FFF0 STP S0, S1, [X19 + 0xAC]
	0x03E3FFF4 STR W31, [X19 + 0xB4]
	0x03E3FFF8 BL 0x3E400D8
	0x03E3FFFC LDR X8, [X31 + 0x18]
	0x03E40000 LDUR V0, [X31 + 0x8]
	0x03E40004 STR X8, [X19 + 0x98]
	0x03E40008 STUR V0, [X19 + 0x88]
	0x03E4000C LDRB W8, [X19 + 0xFE]
	0x03E40010 CBZ W8, 0x3E400B4
	0x03E40014 MOV X0, X19
	0x03E40018 BL 0x3E3FB2C
	0x03E4001C TBZ X0, 0x0, 0x3E400B4
	0x03E40020 MOV X0, X19
	0x03E40024 BL 0x3E3D754
	0x03E40028 CBZ X0, 0x3E400D4
	0x03E4002C MOV X1, X31
	0x03E40030 BL 0x3C3E90C
	0x03E40034 FCMP S0, 0x0
	0x03E40038 B.NE 0x3E400B4
	0x03E4003C MOV X0, X19
	0x03E40040 BL 0x3E3D754
	0x03E40044 CBZ X0, 0x3E400D4
	0x03E40048 MOV X1, X31
	0x03E4004C BL 0x3C3E90C
	0x03E40050 FCMP S1, 0x0
	0x03E40054 B.PL 0x3E400B4
	0x03E40058 MOV X0, X19
	0x03E4005C BL 0x3E3D754
	0x03E40060 LDR V8, [X19 + 0x104]
	0x03E40064 LDR V9, [X19 + 0x64]
	0x03E40068 MOV X20, X0
	0x03E4006C MOV X0, X19
	0x03E40070 BL 0x3E3D754
	0x03E40074 CBZ X0, 0x3E400D4
	0x03E40078 MOV X1, X31
	0x03E4007C BL 0x3C3E90C
	0x03E40080 CBZ X20, 0x3E400D4
	0x03E40084 FADD S0, S8, S9
	0x03E40088 MOV X0, X20
	0x03E4008C LDP X20, X19, [X31 + 0x70]
	0x03E40090 LDP X22, X21, [X31 + 0x60]
	0x03E40094 LDP X30, X23, [X31 + 0x50]
	0x03E40098 LDP D9, D8, [X31 + 0x40]
	0x03E4009C LDP D11, D10, [X31 + 0x30]
	0x03E400A0 LDR V12, [X31 + 0x20]
	0x03E400A4 FNEG S0, S0
	0x03E400A8 MOV X1, X31
	0x03E400AC ADD X31, X31, 0x80
	0x03E400B0 B 0x3C3E99C
	0x03E400B4 LDP X20, X19, [X31 + 0x70]
	0x03E400B8 LDP X22, X21, [X31 + 0x60]
	0x03E400BC LDP X30, X23, [X31 + 0x50]
	0x03E400C0 LDP D9, D8, [X31 + 0x40]
	0x03E400C4 LDP D11, D10, [X31 + 0x30]
	0x03E400C8 LDR V12, [X31 + 0x20]
	0x03E400CC ADD X31, X31, 0x80
	0x03E400D0 RET
	0x03E400D4 BL 0x1C16F20
	0x03E400D8 SUB X31, X31, 0xB0
	0x03E400DC STR X30, [X31 + 0x80]
	0x03E400E0 STP X22, X21, [X31 + 0x90]
	0x03E400E4 STP X20, X19, [X31 + 0xA0]
	0x03E400E8 ADRP X22, 0x5A8000
	0x03E400EC ADRP X21, 0x2B3000
	0x03E400F0 MOV X19, X8
	0x03E400F4 LDRB W8, [X22 + 0x7B7]
	0x03E400F8 LDR X21, [X21 + 0x598]
	0x03E400FC MOV X20, X0
	0x03E40100 TBNZ X8, 0x0, 0x3E40118
	0x03E40104 ADRP X0, 0x2B3000
	0x03E40108 LDR X0, [X0 + 0x598]
	0x03E4010C BL 0x1C16CF4
	0x03E40110 MOVZ W8, 0x1
	0x03E40114 STRB W8, [X22 + 0x7B7]
	0x03E40118 LDR X0, [X21]
	0x03E4011C MOVI V0.2D, 0x0
	0x03E40120 STP V0, V0, [X31 + 0x60]
	0x03E40124 STP V0, V0, [X31 + 0x40]
	0x03E40128 LDR W8, [X0 + 0xE0]
	0x03E4012C LDR X21, [X20 + 0x20]
	0x03E40130 CBNZ W8, 0x3E40138
	0x03E40134 BL 0x1C16DFC
	0x03E40138 MOV X0, X21
	0x03E4013C MOV X1, X31
	0x03E40140 MOV X2, X31
	0x03E40144 BL 0x3C3883C
	0x03E40148 TBZ X0, 0x0, 0x3E40158
	0x03E4014C STP X31, X31, [X19]
	0x03E40150 STR X31, [X19 + 0x10]
	0x03E40154 B 0x3E401B4
	0x03E40158 LDR X0, [X20 + 0x20]
	0x03E4015C CBZ X0, 0x3E401C8
	0x03E40160 LDR X1, [X20 + 0x128]
	0x03E40164 MOV X2, X31
	0x03E40168 BL 0x3C3F058
	0x03E4016C MOV X0, X20
	0x03E40170 BL 0x3E3D754
	0x03E40174 CBZ X0, 0x3E401C8
	0x03E40178 ADD X8, X31, 0x0
	0x03E4017C MOV X1, X31
	0x03E40180 BL 0x3C3FF0C
	0x03E40184 LDP V0, V1, [X31]
	0x03E40188 LDP V2, V3, [X31 + 0x20]
	0x03E4018C ADD X8, X31, 0x0
	0x03E40190 ADD X1, X31, 0x40
	0x03E40194 STP V0, V1, [X31 + 0x40]
	0x03E40198 STP V2, V3, [X31 + 0x60]
	0x03E4019C LDR X0, [X20 + 0x128]
	0x03E401A0 BL 0x3E40658
	0x03E401A4 LDR X8, [X31 + 0x10]
	0x03E401A8 LDR V0, [X31]
	0x03E401AC STR X8, [X19 + 0x10]
	0x03E401B0 STR V0, [X19]
	0x03E401B4 LDP X20, X19, [X31 + 0xA0]
	0x03E401B8 LDP X22, X21, [X31 + 0x90]
	0x03E401BC LDR X30, [X31 + 0x80]
	0x03E401C0 ADD X31, X31, 0xB0
	0x03E401C4 RET
	0x03E401C8 BL 0x1C16F20
	0x03E401CC SUB X31, X31, 0x60
	0x03E401D0 STR D12, [X31 + 0x20]
	0x03E401D4 STP D11, D10, [X31 + 0x30]
	0x03E401D8 STP D9, D8, [X31 + 0x40]
	0x03E401DC STP X30, X19, [X31 + 0x50]
	0x03E401E0 MOV X19, X0
	0x03E401E4 BL 0x3E40284
	0x03E401E8 MOV X0, X19
	0x03E401EC BL 0x3E3D754
	0x03E401F0 CBZ X0, 0x3E40280
	0x03E401F4 MOV X1, X31
	0x03E401F8 BL 0x3C3E51C
	0x03E401FC MOV X0, X19
	0x03E40200 MOV V8.16B, V0.16B
	0x03E40204 MOV V9.16B, V1.16B
	0x03E40208 MOV V10.16B, V2.16B
	0x03E4020C MOV V11.16B, V3.16B
	0x03E40210 BL 0x3E3D754
	0x03E40214 CBZ X0, 0x3E40280
	0x03E40218 FMOV S12, 0.5
	0x03E4021C FMUL S0, S11, S12
	0x03E40220 FMUL S1, S10, S12
	0x03E40224 MOV X1, X31
	0x03E40228 FADD S9, S9, S0
	0x03E4022C FADD S8, S8, S1
	0x03E40230 BL 0x3C3E51C
	0x03E40234 FMUL S0, S2, S12
	0x03E40238 FMUL S1, S3, S12
	0x03E4023C ADD X8, X31, 0x8
	0x03E40240 MOV X0, X19
	0x03E40244 STP S8, S9, [X19 + 0xA0]
	0x03E40248 STR W31, [X19 + 0xA8]
	0x03E4024C STP S0, S1, [X19 + 0xAC]
	0x03E40250 STR W31, [X19 + 0xB4]
	0x03E40254 BL 0x3E400D8
	0x03E40258 LDR X8, [X31 + 0x18]
	0x03E4025C LDUR V0, [X31 + 0x8]
	0x03E40260 LDP D9, D8, [X31 + 0x40]
	0x03E40264 LDP D11, D10, [X31 + 0x30]
	0x03E40268 STR X8, [X19 + 0x98]
	0x03E4026C STUR V0, [X19 + 0x88]
	0x03E40270 LDP X30, X19, [X31 + 0x50]
	0x03E40274 LDR V12, [X31 + 0x20]
	0x03E40278 ADD X31, X31, 0x60
	0x03E4027C RET
	0x03E40280 BL 0x1C16F20
	0x03E40284 STP D9, D8, [X31 - 0x30]!
	0x03E40288 STP X30, X21, [X31 + 0x10]
	0x03E4028C STP X20, X19, [X31 + 0x20]
	0x03E40290 ADRP X20, 0x5A8000
	0x03E40294 LDRB W8, [X20 + 0x7B5]
	0x03E40298 MOV X19, X0
	0x03E4029C TBNZ X8, 0x0, 0x3E402B4
	0x03E402A0 ADRP X0, 0x2B3000
	0x03E402A4 LDR X0, [X0 + 0x598]
	0x03E402A8 BL 0x1C16CF4
	0x03E402AC MOVZ W8, 0x1
	0x03E402B0 STRB W8, [X20 + 0x7B5]
	0x03E402B4 ADRP X21, 0x2B3000
	0x03E402B8 LDRB W8, [X19 + 0xFE]
	0x03E402BC LDR X21, [X21 + 0x598]
	0x03E402C0 CBZ W8, 0x3E403C0
	0x03E402C4 LDR X0, [X21]
	0x03E402C8 LDR X20, [X19 + 0x48]
	0x03E402CC LDR W8, [X0 + 0xE0]
	0x03E402D0 CBNZ W8, 0x3E402D8
	0x03E402D4 BL 0x1C16DFC
	0x03E402D8 MOV X0, X20
	0x03E402DC MOV X1, X31
	0x03E402E0 BL 0x3C38948
	0x03E402E4 TBZ X0, 0x0, 0x3E403C0
	0x03E402E8 LDR X2, [X19 + 0x110]
	0x03E402EC ADD X0, X19, 0x120
	0x03E402F0 MOVZ W3, 0x1502
	0x03E402F4 MOV X1, X19
	0x03E402F8 MOV X4, X31
	0x03E402FC BL 0x3C3E3A4
	0x03E40300 LDR X20, [X19 + 0x110]
	0x03E40304 CBZ X20, 0x3E404D4
	0x03E40308 MOV X0, X20
	0x03E4030C MOV X1, X31
	0x03E40310 BL 0x3C3E5B8
	0x03E40314 FMOV S0, W31
	0x03E40318 MOV X0, X20
	0x03E4031C MOV X1, X31
	0x03E40320 BL 0x3C3E648
	0x03E40324 LDR X20, [X19 + 0x110]
	0x03E40328 CBZ X20, 0x3E404D4
	0x03E4032C MOV X0, X20
	0x03E40330 MOV X1, X31
	0x03E40334 BL 0x3C3E6D4
	0x03E40338 FMOV S0, 1
	0x03E4033C MOV X0, X20
	0x03E40340 MOV X1, X31
	0x03E40344 BL 0x3C3E764
	0x03E40348 LDR X20, [X19 + 0x110]
	0x03E4034C CBZ X20, 0x3E404D4
	0x03E40350 MOV X0, X20
	0x03E40354 MOV X1, X31
	0x03E40358 BL 0x3C3E7F0
	0x03E4035C FMOV S0, W31
	0x03E40360 MOV X0, X20
	0x03E40364 MOV X1, X31
	0x03E40368 BL 0x3C3E880
	0x03E4036C MOV X0, X19
	0x03E40370 BL 0x3E3FB2C
	0x03E40374 LDR X20, [X19 + 0x110]
	0x03E40378 TBZ X0, 0x0, 0x3E403A0
	0x03E4037C CBZ X20, 0x3E404D4
	0x03E40380 LDR V8, [X19 + 0x64]
	0x03E40384 LDR V9, [X19 + 0x104]
	0x03E40388 MOV X0, X20
	0x03E4038C MOV X1, X31
	0x03E40390 BL 0x3C3E90C
	0x03E40394 FADD S0, S8, S9
	0x03E40398 FNEG S0, S0
	0x03E4039C B 0x3E403B4
	0x03E403A0 CBZ X20, 0x3E404D4
	0x03E403A4 MOV X0, X20
	0x03E403A8 MOV X1, X31
	0x03E403AC BL 0x3C3E90C
	0x03E403B0 FMOV S0, W31
	0x03E403B4 MOV X0, X20
	0x03E403B8 MOV X1, X31
	0x03E403BC BL 0x3C3E99C
	0x03E403C0 LDRB W8, [X19 + 0xFD]
	0x03E403C4 CBZ W8, 0x3E404A8
	0x03E403C8 LDR X0, [X21]
	0x03E403CC LDR X20, [X19 + 0x50]
	0x03E403D0 LDR W8, [X0 + 0xE0]
	0x03E403D4 CBNZ W8, 0x3E403DC
	0x03E403D8 BL 0x1C16DFC
	0x03E403DC MOV X0, X20
	0x03E403E0 MOV X1, X31
	0x03E403E4 BL 0x3C38948
	0x03E403E8 TBZ X0, 0x0, 0x3E404A8
	0x03E403EC LDR X2, [X19 + 0x118]
	0x03E403F0 ADD X0, X19, 0x120
	0x03E403F4 MOVZ W3, 0x2A04
	0x03E403F8 MOV X1, X19
	0x03E403FC MOV X4, X31
	0x03E40400 BL 0x3C3E3A4
	0x03E40404 LDR X20, [X19 + 0x118]
	0x03E40408 CBZ X20, 0x3E404D4
	0x03E4040C MOV X0, X20
	0x03E40410 MOV X1, X31
	0x03E40414 BL 0x3C3E5B8
	0x03E40418 FMOV S1, W31
	0x03E4041C MOV X0, X20
	0x03E40420 MOV X1, X31
	0x03E40424 BL 0x3C3E648
	0x03E40428 LDR X20, [X19 + 0x118]
	0x03E4042C CBZ X20, 0x3E404D4
	0x03E40430 MOV X0, X20
	0x03E40434 MOV X1, X31
	0x03E40438 BL 0x3C3E6D4
	0x03E4043C FMOV S1, 1
	0x03E40440 MOV X0, X20
	0x03E40444 MOV X1, X31
	0x03E40448 BL 0x3C3E764
	0x03E4044C LDR X20, [X19 + 0x118]
	0x03E40450 CBZ X20, 0x3E404D4
	0x03E40454 MOV X0, X20
	0x03E40458 MOV X1, X31
	0x03E4045C BL 0x3C3E7F0
	0x03E40460 FMOV S1, W31
	0x03E40464 MOV X0, X20
	0x03E40468 MOV X1, X31
	0x03E4046C BL 0x3C3E880
	0x03E40470 MOV X0, X19
	0x03E40474 BL 0x3E3FAA4
	0x03E40478 LDR X20, [X19 + 0x118]
	0x03E4047C CBZ X20, 0x3E404D4
	0x03E40480 MOV W21, W0
	0x03E40484 MOV X0, X20
	0x03E40488 MOV X1, X31
	0x03E4048C BL 0x3C3E90C
	0x03E40490 TBZ X21, 0x0, 0x3E404B8
	0x03E40494 LDR V1, [X19 + 0x100]
	0x03E40498 LDR V2, [X19 + 0x60]
	0x03E4049C FADD S1, S1, S2
	0x03E404A0 FNEG S1, S1
	0x03E404A4 B 0x3E404BC
	0x03E404A8 LDP X20, X19, [X31 + 0x20]
	0x03E404AC LDP X30, X21, [X31 + 0x10]
	0x03E404B0 LDP D9, D8, [X31], #0x30
	0x03E404B4 RET
	0x03E404B8 FMOV S1, W31
	0x03E404BC MOV X0, X20
	0x03E404C0 LDP X20, X19, [X31 + 0x20]
	0x03E404C4 LDP X30, X21, [X31 + 0x10]
	0x03E404C8 MOV X1, X31
	0x03E404CC LDP D9, D8, [X31], #0x30
	0x03E404D0 B 0x3C3E99C
	0x03E404D4 BL 0x1C16F20
	0x03E404D8 STR X30, [X31 - 0x40]!
	0x03E404DC STP X24, X23, [X31 + 0x10]
	0x03E404E0 STP X22, X21, [X31 + 0x20]
	0x03E404E4 STP X20, X19, [X31 + 0x30]
	0x03E404E8 ADRP X23, 0x5A8000
	0x03E404EC ADRP X24, 0x2B3000
	0x03E404F0 LDRB W8, [X23 + 0x7B4]
	0x03E404F4 LDR X24, [X24 + 0x598]
	0x03E404F8 MOV X19, X3
	0x03E404FC MOV W22, W2

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X27
	012 Move [X31+112], X26
	013 Move [X31+120], X25
	014 Move [X31+128], X24
	015 Move [X31+136], X23
	016 Move [X31+144], X22
	017 Move [X31+152], X21
	018 Move [X31+160], X20
	019 Move [X31+168], X19
	020 Move X21, 0x5AA000
	021 Move X20, 0x2B5000
	022 Move W8, [X21+1966]
	023 Move X20, [X20+1432]
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {40}
	029 Move X0, 0x2B5000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move X0, 0x31F000
	033 Move X0, [X0+3128]
	034 Call 0x1C17CF4
	035 Move X0, 0x32D000
	036 Move X0, [X0+928]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+1966], W8
	040 Move X0, [X20]
	041 Move [X31+20], W31
	042 Move X20, [X19+32]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Call Object.op_Implicit, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {385}
	054 Move X0, X19
	055 Call ScrollRect.EnsureLayoutHasRebuilt, X0
	056 Move X0, X19
	057 Call ScrollRect.UpdateBounds, X0
	058 Move X0, X31
	059 Call Time.get_unscaledDeltaTime
	060 Move X23, 0x59B000
	061 Move W8, [X23+1935]
	062 Move [X31], D0
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x2BD000
	066 Move X0, [X0+3848]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X23+1935], W8
	070 Move X24, 0x2BD000
	071 Move X24, [X24+3848]
	072 Add X21, X19, 160
	073 Add X20, X19, 136
	074 Add X5, X31, 24
	075 Move X8, [X24]
	076 Move X0, X21
	077 Move X1, X20
	078 Move X8, [X8+184]
	079 Move V0, [X8]
	080 Move [X31+24], D0
	081 Move W2, [X19+40]
	082 Move W3, [X19+41]
	083 Move W4, [X19+44]
	084 Call ScrollRect.InternalCalculateOffset, X0, X1, X2, X3, X4, X5
	085 Move V8, V0
	086 Move V0, [X31]
	087 Move V9, V1
	088 Move X22, -53829632
	089 NotImplemented "Instruction FCMP not yet implemented."
	090 Move W8, [X19+192]
	091 Compare W8, 0
	092 JumpIfNotEqual {267}
	093 Move W8, [X23+1935]
	094 Compare W8, 0
	095 JumpIfNotEqual {101}
	096 Move X0, 0x2BC000
	097 Move X0, [X0+3848]
	098 Call 0x1C17CF4
	099 Move W8, 1
	100 Move [X23+1935], W8
	101 Move X8, [X24]
	102 Move V2, [X22+3872]
	103 Move X8, [X8+184]
	104 Move S0, [X8]
	105 Move S1, [X8+4]
	106 Subtract S3, S8, S0
	107 Subtract S4, S9, S1
	108 Multiply S3, S3, S3
	109 Multiply S4, S4, S4
	110 Add S3, S3, S4
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 Move S3, [X19+184]
	113 Move S4, [X19+188]
	114 Subtract S0, S3, S0
	115 Subtract S1, S4, S1
	116 Multiply S0, S0, S0
	117 Multiply S1, S1, S1
	118 Add S0, S0, S1
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 Move X0, [X19+32]
	121 Compare X0, 0
	122 JumpIfEqual {412}
	123 Move X1, X31
	124 Call RectTransform.get_anchoredPosition, X0
	125 Move V11, V0
	126 Move V10, V1
	127 Move W26, 1
	128 Move S14, 1
	129 Move W23, 188
	130 Move W24, 184
	131 Move S15, 3
	132 Move W25, 0x7F800000
	133 Move W27, [X19+44]
	134 And W31, W26, 1
	135 NotImplemented "Instruction FCSEL not yet implemented."
	136 NotImplemented "Instruction CMP not yet implemented."
	137 NotImplemented "Instruction FCMP not yet implemented."
	138 Move W8, [X19+52]
	139 Compare W8, 0
	140 JumpIfNotEqual {147}
	141 Move TEMP, X26
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {234}
	145 Move W26, W31
	146 Move [X19+184], W31
	147 Move TEMP, X26
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {157}
	151 Move V0, [X19+56]
	152 Move V12, [X19+184]
	153 Move V1, [X31]
	154 Call 0x3EB2B50
	155 Multiply S0, S12, S0
	156 Move [X19+184], S0
	157 Move V0, [X19+56]
	158 Move V12, [X19+188]
	159 Move V1, [X31]
	160 Call 0x3EB2B50
	161 Multiply S0, S12, S0
	162 Move [X19+188], S0
	163 NotImplemented "Instruction FABS not yet implemented."
	164 NotImplemented "Instruction FCMP not yet implemented."
	165 Move TEMP, X26
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfNotEqual {406}
	169 Move [X19+184], W31
	170 Move S0, W31
	171 Move TEMP, X26
	172 And TEMP, TEMP, 1
	173 Compare TEMP, 1
	174 JumpIfNotEqual {408}
	175 Move V0, [X19+184]
	176 Move V1, [X31]
	177 Move W26, W31
	178 Multiply S0, S1, S0
	179 Add S11, S11, S0
	180 And W31, W26, 1
	181 NotImplemented "Instruction CSEL not yet implemented."
	182 Move V0, [X19]
	183 Move [X31+20], S0
	184 Move V0, [X19+48]
	185 Move W8, [X19+193]
	186 Move X0, [X19+32]
	187 Multiply S1, S0, S15
	188 NotImplemented "Instruction CMP not yet implemented."
	189 NotImplemented "Instruction FCSEL not yet implemented."
	190 Compare X0, 0
	191 JumpIfEqual {412}
	192 Move X1, X31
	193 Call RectTransform.get_anchoredPosition, X0
	194 Move X0, [X19+32]
	195 And W31, W26, 1
	196 NotImplemented "Instruction FCSEL not yet implemented."
	197 Compare X0, 0
	198 JumpIfEqual {412}
	199 Move X1, X31
	200 Call RectTransform.get_anchoredPosition, X0
	201 Move TEMP, X26
	202 And TEMP, TEMP, 1
	203 Compare TEMP, 1
	204 JumpIfNotEqual {214}
	205 Add S1, S8, S0
	206 Add X0, X31, 20
	207 Move S3, W25
	208 Move V0, V13
	209 Move V2, V12
	210 Move V4, [X31]
	211 Move X1, X31
	212 Call Mathf.SmoothDamp, V0, V1, X0, V2, V3, V4
	213 Move V11, V0
	214 Add S1, S9, S1
	215 Add X0, X31, 20
	216 Move S3, W25
	217 Move V0, V13
	218 Move V2, V12
	219 Move V4, [X31]
	220 Move X1, X31
	221 Call Mathf.SmoothDamp, V0, V1, X0, V2, V3, V4
	222 Move V10, V0
	223 Move V0, [X31+20]
	224 NotImplemented "Instruction FABS not yet implemented."
	225 NotImplemented "Instruction FCMP not yet implemented."
	226 Move S0, W31
	227 Move [X31+20], W31
	228 Move TEMP, X26
	229 And TEMP, TEMP, 1
	230 Compare TEMP, 1
	231 JumpIfNotEqual {405}
	232 Move W26, W31
	233 Move [X19+184], S0
	234 Move [X19+188], W31
	235 Move W8, [X19+44]
	236 NotImplemented "Instruction CMP not yet implemented."
	237 Move X0, [X19+32]
	238 Compare X0, 0
	239 JumpIfEqual {412}
	240 Move X1, X31
	241 Call RectTransform.get_anchoredPosition, X0
	242 Subtract S0, S11, S0
	243 Subtract S1, S10, S1
	244 Move [X31+24], S0
	245 Move [X31+32], S1
	246 Move W2, [X19+40]
	247 Move W3, [X19+41]
	248 Move W4, [X19+44]
	249 Add X5, X31, 24
	250 Move X0, X21
	251 Move X1, X20
	252 Call ScrollRect.InternalCalculateOffset, X0, X1, X2, X3, X4, X5
	253 Move V8, V0
	254 Move V9, V1
	255 Add S11, S11, S0
	256 Add S10, S10, S1
	257 Move X8, [X19]
	258 Move X0, X19
	259 Move V0, V11
	260 Move V1, V10
	261 Move X9, [X8+1064]
	262 Move X1, [X8+1072]
	263 NotImplemented "Instruction BLR not yet implemented."
	264 Move W8, [X19+192]
	265 Compare W8, 0
	266 JumpIfEqual {293}
	267 Move W8, [X19+52]
	268 Compare W8, 0
	269 JumpIfEqual {293}
	270 Move X0, [X19+32]
	271 Compare X0, 0
	272 JumpIfEqual {412}
	273 Move X1, X31
	274 Call RectTransform.get_anchoredPosition, X0
	275 NotImplemented "Instruction LDUR not yet implemented."
	276 Move V4, [X31]
	277 Move S3, 10
	278 Move V0.S[1], V1.S[0]
	279 Subtract V0, V0, V2
	280 Move V2, [X19+184]
	281 Move S1, 1
	282 Multiply S3, S4, S3
	283 NotImplemented "Instruction FMIN not yet implemented."
	284 NotImplemented "Instruction FCMP not yet implemented."
	285 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	286 NotImplemented "Instruction INVALID not yet implemented."
	287 Move S3, W31
	288 NotImplemented "Instruction FCSEL not yet implemented."
	289 Subtract V0, V0, V2
	290 NotImplemented "Instruction INVALID not yet implemented."
	291 Add V0, V2, V0
	292 Move [X19+184], D0
	293 Move V0, [X19+160]
	294 NotImplemented "Instruction LDUR not yet implemented."
	295 Move V2, [X19+228]
	296 Move V3, [X19+232]
	297 Move V10, [X22+3872]
	298 Subtract S0, S0, S2
	299 Subtract V1, V1, V3
	300 Multiply S0, S0, S0
	301 NotImplemented "Instruction INVALID not yet implemented."
	302 Add S0, S0, S1
	303 Move S1, V1.S[1]
	304 Add S0, S1, S0
	305 NotImplemented "Instruction FCMP not yet implemented."
	306 NotImplemented "Instruction LDUR not yet implemented."
	307 Move V1, [X19+240]
	308 Move V2, [X19+172]
	309 Move V3, [X19+176]
	310 Subtract S1, S2, S1
	311 Subtract V0, V3, V0
	312 Multiply S1, S1, S1
	313 NotImplemented "Instruction INVALID not yet implemented."
	314 Add S1, S0, S1
	315 Move S0, V0.S[1]
	316 Add S0, S0, S1
	317 NotImplemented "Instruction FCMP not yet implemented."
	318 Move V0, [X19+136]
	319 NotImplemented "Instruction LDUR not yet implemented."
	320 Move V2, [X19+204]
	321 Move V3, [X19+208]
	322 Subtract S0, S0, S2
	323 Subtract V1, V1, V3
	324 Multiply S0, S0, S0
	325 NotImplemented "Instruction INVALID not yet implemented."
	326 Add S0, S0, S1
	327 Move S1, V1.S[1]
	328 Add S0, S1, S0
	329 NotImplemented "Instruction FCMP not yet implemented."
	330 NotImplemented "Instruction LDUR not yet implemented."
	331 Move V1, [X19+216]
	332 Move V2, [X19+148]
	333 Move V3, [X19+152]
	334 Subtract S1, S2, S1
	335 Subtract V0, V3, V0
	336 Multiply S1, S1, S1
	337 NotImplemented "Instruction INVALID not yet implemented."
	338 Add S1, S0, S1
	339 Move S0, V0.S[1]
	340 Add S0, S0, S1
	341 NotImplemented "Instruction FCMP not yet implemented."
	342 Move X0, [X19+32]
	343 Compare X0, 0
	344 JumpIfEqual {412}
	345 Move X1, X31
	346 Call RectTransform.get_anchoredPosition, X0
	347 Move S2, [X19+196]
	348 Move S3, [X19+200]
	349 Subtract S0, S0, S2
	350 Subtract S1, S1, S3
	351 Multiply S0, S0, S0
	352 Multiply S1, S1, S1
	353 Add S0, S0, S1
	354 NotImplemented "Instruction FCMP not yet implemented."
	355 Move X0, X19
	356 Move V0, V8
	357 Move V1, V9
	358 Call ScrollRect.UpdateScrollbars, X0, X1
	359 Move X8, 0x32C000
	360 Move X8, [X8+928]
	361 Move X1, X19
	362 Move X2, X31
	363 Move X0, [X8]
	364 Call UISystemProfilerApi.AddMarker, X0, X1
	365 Move X20, [X19+104]
	366 Move X0, X19
	367 Call ScrollRect.get_horizontalNormalizedPosition, X0
	368 Move X0, X19
	369 Move V8, V0
	370 Call ScrollRect.get_verticalNormalizedPosition, X0
	371 Compare X20, 0
	372 JumpIfEqual {412}
	373 Move X8, 0x31E000
	374 Move X8, [X8+3128]
	375 Move V1, V0
	376 Move X0, X20
	377 Move V0, V8
	378 Move X1, [X8]
	379 Call UnityEvent`1<Vector2>.Invoke, X0, X1
	380 Move X0, X19
	381 Call ScrollRect.UpdatePrevData, X0
	382 Move X0, X19
	383 Call ScrollRect.UpdateScrollbarVisibility, X0
	384 Move [X19+193], W31
	385 Move X20, [X31+160]
	386 Move X19, [X31+168]
	387 Move X22, [X31+144]
	388 Move X21, [X31+152]
	389 Move X24, [X31+128]
	390 Move X23, [X31+136]
	391 Move X26, [X31+112]
	392 Move X25, [X31+120]
	393 Move X30, [X31+96]
	394 Move X27, [X31+104]
	395 Move D9, [X31+80]
	396 Move D8, [X31+88]
	397 Move D11, [X31+64]
	398 Move D10, [X31+72]
	399 Move D13, [X31+48]
	400 Move D12, [X31+56]
	401 Move D15, [X31+32]
	402 Move D14, [X31+40]
	403 Add X31, X31, 176
	404 Return 
	405 Move [X19+188], S0
	406 Move S0, W31
	407 Move [X19+188], W31
	408 Move V0, [X19+188]
	409 Move V1, [X31]
	410 Multiply S0, S1, S0
	411 Add S10, S10, S0
	412 Call 0x1C17F20

Method: System.Void UpdatePrevData()

Disassembly:
	0x03E3F2E8 LDUR V2, [X19 + 0xC4]
	0x03E3F2EC LDR V4, [X31]
	0x03E3F2F0 FMOV S3, 10
	0x03E3F2F4 MOV V0.S[1], V1.S[0]
	0x03E3F2F8 FSUB V0.2S, V0.2S, V2.2S
	0x03E3F2FC LDR V2, [X19 + 0xB8]
	0x03E3F300 FMOV S1, 1
	0x03E3F304 FMUL S3, S4, S3
	0x03E3F308 FMIN S1, S3, S1
	0x03E3F30C FCMP S3, 0x0
	0x03E3F310 UNIMPLEMENTED
	0x00000000 INVALID
	0x03E3F318 FMOV S3, W31
	0x03E3F31C FCSEL S1, S1, S3, PL
	0x03E3F320 FSUB V0.2S, V0.2S, V2.2S
	0x00000000 INVALID
	0x03E3F328 FADD V0.2S, V2.2S, V0.2S
	0x03E3F32C STR D0, [X19 + 0xB8]
	0x03E3F330 LDR V0, [X19 + 0xA0]
	0x03E3F334 LDUR V1, [X19 + 0xA4]
	0x03E3F338 LDR V2, [X19 + 0xE4]
	0x03E3F33C LDR V3, [X19 + 0xE8]
	0x03E3F340 LDR V10, [X22 + 0xF20]
	0x03E3F344 FSUB S0, S0, S2
	0x03E3F348 FSUB V1.2S, V1.2S, V3.2S
	0x03E3F34C FMUL S0, S0, S0
	0x00000000 INVALID
	0x03E3F354 FADD S0, S0, S1
	0x03E3F358 MOV S1, V1.S[1]
	0x03E3F35C FADD S0, S1, S0
	0x03E3F360 FCMP S0, S10
	0x03E3F364 B.PL 0x3E3F434
	0x03E3F368 LDUR V0, [X19 + 0xF4]
	0x03E3F36C LDR V1, [X19 + 0xF0]
	0x03E3F370 LDR V2, [X19 + 0xAC]
	0x03E3F374 LDR V3, [X19 + 0xB0]
	0x03E3F378 FSUB S1, S2, S1
	0x03E3F37C FSUB V0.2S, V3.2S, V0.2S
	0x03E3F380 FMUL S1, S1, S1
	0x00000000 INVALID
	0x03E3F388 FADD S1, S0, S1
	0x03E3F38C MOV S0, V0.S[1]
	0x03E3F390 FADD S0, S0, S1
	0x03E3F394 FCMP S0, S10
	0x03E3F398 B.PL 0x3E3F434
	0x03E3F39C LDR V0, [X19 + 0x88]
	0x03E3F3A0 LDUR V1, [X19 + 0x8C]
	0x03E3F3A4 LDR V2, [X19 + 0xCC]
	0x03E3F3A8 LDR V3, [X19 + 0xD0]
	0x03E3F3AC FSUB S0, S0, S2
	0x03E3F3B0 FSUB V1.2S, V1.2S, V3.2S
	0x03E3F3B4 FMUL S0, S0, S0
	0x00000000 INVALID
	0x03E3F3BC FADD S0, S0, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5AA000
	006 Move X20, 0x2B5000
	007 Move W8, [X21+1967]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2B5000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1967], W8
	019 Move X0, [X20]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {48}
	033 Move X20, 0x59B000
	034 Move W8, [X20+1935]
	035 Compare W8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, 0x2BD000
	038 Move X0, [X0+3848]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X20+1935], W8
	042 Move X8, 0x2BD000
	043 Move X8, [X8+3848]
	044 Move X8, [X8]
	045 Move X8, [X8+184]
	046 Move S0, [X8]
	047 Move S1, [X8+4]
	048 Move X0, [X19+32]
	049 Compare X0, 0
	050 JumpIfEqual {68}
	051 Move X1, X31
	052 Call RectTransform.get_anchoredPosition, X0
	053 Move [X19+196], S0
	054 Move [X19+204], S1
	055 Move V0, [X19+10]
	056 Move X8, [X19+176]
	057 NotImplemented "Instruction LDUR not yet implemented."
	058 Move X9, [X19+152]
	059 Move [X19+228], V0
	060 Move [X19+244], X8
	061 Move [X19+204], V1
	062 Move [X19+220], X9
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return 
	068 Call 0x1C17F20

Method: System.Void UpdateScrollbars(UnityEngine.Vector2 offset)

Disassembly:
	0x03E3F168 STR W31, [X19 + 0xB8]
	0x03E3F16C FMOV S0, W31
	0x03E3F170 B 0x3E3F17C
	0x03E3F174 TBZ X26, 0x0, 0x3E3F4E8
	0x03E3F178 LDR V0, [X19 + 0xB8]
	0x03E3F17C LDR V1, [X31]
	0x03E3F180 MOV W26, W31
	0x03E3F184 FMUL S0, S1, S0
	0x03E3F188 FADD S11, S11, S0
	0x03E3F18C B 0x3E3F0F0
	0x03E3F190 ANDS W31, W26, 0x1
	0x03E3F194 CSEL X8, X24, X23, NE
	0x03E3F198 LDR V0, [X19, X8, LSL]
	0x03E3F19C STR S0, [X31 + 0x14]
	0x03E3F1A0 LDR V0, [X19 + 0x30]
	0x03E3F1A4 LDRB W8, [X19 + 0xC1]
	0x03E3F1A8 LDR X0, [X19 + 0x20]
	0x03E3F1AC FMUL S1, S0, S15
	0x03E3F1B0 CMP W8, 0x0
	0x03E3F1B4 FCSEL S12, S0, S1, EQ
	0x03E3F1B8 CBZ X0, 0x3E3F4FC
	0x03E3F1BC MOV X1, X31
	0x03E3F1C0 BL 0x3C3E7F0
	0x03E3F1C4 LDR X0, [X19 + 0x20]
	0x03E3F1C8 ANDS W31, W26, 0x1
	0x03E3F1CC FCSEL S13, S0, S1, NE
	0x03E3F1D0 CBZ X0, 0x3E3F4FC
	0x03E3F1D4 MOV X1, X31
	0x03E3F1D8 BL 0x3C3E7F0
	0x03E3F1DC TBZ X26, 0x0, 0x3E3F208
	0x03E3F1E0 FADD S1, S8, S0
	0x03E3F1E4 ADD X0, X31, 0x14
	0x03E3F1E8 FMOV S3, W25
	0x03E3F1EC MOV V0.16B, V13.16B
	0x03E3F1F0 MOV V2.16B, V12.16B
	0x03E3F1F4 LDR V4, [X31]
	0x03E3F1F8 MOV X1, X31
	0x03E3F1FC BL 0x3C2BFF0
	0x03E3F200 MOV V11.16B, V0.16B
	0x03E3F204 B 0x3E3F22C
	0x03E3F208 FADD S1, S9, S1
	0x03E3F20C ADD X0, X31, 0x14
	0x03E3F210 FMOV S3, W25
	0x03E3F214 MOV V0.16B, V13.16B
	0x03E3F218 MOV V2.16B, V12.16B
	0x03E3F21C LDR V4, [X31]
	0x03E3F220 MOV X1, X31
	0x03E3F224 BL 0x3C2BFF0
	0x03E3F228 MOV V10.16B, V0.16B
	0x03E3F22C LDR V0, [X31 + 0x14]
	0x03E3F230 FABS S1, S0
	0x03E3F234 FCMP S1, S14
	0x03E3F238 B.PL 0x3E3F244
	0x03E3F23C FMOV S0, W31
	0x03E3F240 STR W31, [X31 + 0x14]
	0x03E3F244 TBZ X26, 0x0, 0x3E3F4D4
	0x03E3F248 MOV W26, W31
	0x03E3F24C STR S0, [X19 + 0xB8]
	0x03E3F250 B 0x3E3F0EC
	0x03E3F254 STR W31, [X19 + 0xBC]
	0x03E3F258 LDR W8, [X19 + 0x2C]
	0x03E3F25C CMP W8, 0x2
	0x03E3F260 B.NE 0x3E3F2AC
	0x03E3F264 LDR X0, [X19 + 0x20]
	0x03E3F268 CBZ X0, 0x3E3F4FC
	0x03E3F26C MOV X1, X31
	0x03E3F270 BL 0x3C3E7F0
	0x03E3F274 FSUB S0, S11, S0
	0x03E3F278 FSUB S1, S10, S1
	0x03E3F27C STP S0, S1, [X31 + 0x18]
	0x03E3F280 LDRB W2, [X19 + 0x28]
	0x03E3F284 LDRB W3, [X19 + 0x29]
	0x03E3F288 LDR W4, [X19 + 0x2C]
	0x03E3F28C ADD X5, X31, 0x18
	0x03E3F290 MOV X0, X21
	0x03E3F294 MOV X1, X20
	0x03E3F298 BL 0x3E407E8
	0x03E3F29C MOV V8.16B, V0.16B
	0x03E3F2A0 MOV V9.16B, V1.16B
	0x03E3F2A4 FADD S11, S11, S0
	0x03E3F2A8 FADD S10, S10, S1
	0x03E3F2AC LDR X8, [X19]
	0x03E3F2B0 MOV X0, X19
	0x03E3F2B4 MOV V0.16B, V11.16B
	0x03E3F2B8 MOV V1.16B, V10.16B
	0x03E3F2BC LDR X9, [X8 + 0x428]
	0x03E3F2C0 LDR X1, [X8 + 0x430]
	0x03E3F2C4 BLR X9
	0x03E3F2C8 LDRB W8, [X19 + 0xC0]
	0x03E3F2CC CBZ W8, 0x3E3F330
	0x03E3F2D0 LDRB W8, [X19 + 0x34]
	0x03E3F2D4 CBZ W8, 0x3E3F330
	0x03E3F2D8 LDR X0, [X19 + 0x20]
	0x03E3F2DC CBZ X0, 0x3E3F4FC
	0x03E3F2E0 MOV X1, X31
	0x03E3F2E4 BL 0x3C3E7F0

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x5AA000
	008 Move X21, 0x2B5000
	009 Move W8, [X20+1968]
	010 Move X21, [X21+1432]
	011 Move V8, V1
	012 Move V9, V0
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x2B5000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+1968], W8
	023 Move X0, [X21]
	024 Move X20, [X19+72]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Call Object.op_Implicit, X0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {64}
	036 Move V0, [X19+148]
	037 Move X0, [X19+72]
	038 Add S0, S0, S0
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Compare X0, 0
	041 JumpIfEqual {119}
	042 Move V1, [X19+172]
	043 NotImplemented "Instruction FABS not yet implemented."
	044 Move S3, 1
	045 Add S1, S1, S1
	046 Subtract S1, S1, S2
	047 NotImplemented "Instruction FDIV not yet implemented."
	048 NotImplemented "Instruction FMIN not yet implemented."
	049 NotImplemented "Instruction FCMP not yet implemented."
	050 Move S0, W31
	051 NotImplemented "Instruction FCSEL not yet implemented."
	052 Move S0, 1
	053 Compare X0, 0
	054 JumpIfEqual {119}
	055 Call Scrollbar.set_size, X0, V0
	056 Move X20, [X19+72]
	057 Move X0, X19
	058 Call ScrollRect.get_horizontalNormalizedPosition, X0
	059 Compare X20, 0
	060 JumpIfEqual {119}
	061 Move W1, 1
	062 Move X0, X20
	063 Call Scrollbar.Set, X0, V0, X1
	064 Move X0, [X21]
	065 Move X20, [X19+80]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X20
	071 Move X1, X31
	072 Call Object.op_Implicit, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {93}
	077 Move V0, [X19+152]
	078 Move X0, [X19+80]
	079 Add S0, S0, S0
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Compare X0, 0
	082 JumpIfEqual {119}
	083 Move V1, [X19+176]
	084 NotImplemented "Instruction FABS not yet implemented."
	085 Move S3, 1
	086 Add S1, S1, S1
	087 Subtract S1, S1, S2
	088 NotImplemented "Instruction FDIV not yet implemented."
	089 NotImplemented "Instruction FMIN not yet implemented."
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Move S0, W31
	092 NotImplemented "Instruction FCSEL not yet implemented."
	093 Move X20, [X31+32]
	094 Move X19, [X31+40]
	095 Move X30, [X31+16]
	096 Move X21, [X31+24]
	097 Move D9, [X31+48]
	098 Move D8, [X31+56]
	099 Return 
	100 Move S0, 1
	101 Compare X0, 0
	102 JumpIfEqual {119}
	103 Call Scrollbar.set_size, X0, V0
	104 Move X20, [X19+80]
	105 Move X0, X19
	106 Call ScrollRect.get_verticalNormalizedPosition, X0
	107 Compare X20, 0
	108 JumpIfEqual {119}
	109 Move X0, X20
	110 Move X20, [X31+32]
	111 Move X19, [X31+40]
	112 Move X30, [X31+16]
	113 Move X21, [X31+24]
	114 Move W1, 1
	115 Move D9, [X31+48]
	116 Move D8, [X31+56]
	117 Call Scrollbar.Set, X0, V0, X1
	118 Return 
	119 Call 0x1C17F20

Method: UnityEngine.Vector2 get_normalizedPosition()

Disassembly:
	0x03E40500 MOV W20, W1
	0x03E40504 MOV W21, W0
	0x03E40508 TBNZ X8, 0x0, 0x3E40520
	0x03E4050C ADRP X0, 0x2B3000
	0x03E40510 LDR X0, [X0 + 0x598]
	0x03E40514 BL 0x1C16CF4
	0x03E40518 MOVZ W8, 0x1
	0x03E4051C STRB W8, [X23 + 0x7B4]
	0x03E40520 LDR X0, [X24]
	0x03E40524 LDR W8, [X0 + 0xE0]
	0x03E40528 CBNZ W8, 0x3E40530
	0x03E4052C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call ScrollRect.get_horizontalNormalizedPosition, X0
	006 Move X0, X19
	007 Move V8, V0
	008 Call ScrollRect.get_verticalNormalizedPosition, X0
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 Move V1, V0
	012 Move V0, V8
	013 Move V8, [X31+32]
	014 Return X0

Method: System.Void set_normalizedPosition(UnityEngine.Vector2 value)

Disassembly:
	0x03E40770 FCSEL S5, S5, S10, MI
	0x03E40774 FCMP S6, S8
	0x03E40778 FADD S1, S12, S1
	0x03E4077C FCSEL S6, S6, S8, MI
	0x03E40780 FCMP S0, S11
	0x03E40784 FADD S2, S9, S2
	0x03E40788 FCSEL S0, S0, S11, GT
	0x03E4078C FCMP S1, S10
	0x03E40790 FCSEL S1, S1, S10, GT
	0x03E40794 FCMP S2, S8
	0x03E40798 FCSEL S2, S2, S8, GT
	0x03E4079C FSUB S0, S0, S4
	0x03E407A0 FSUB S1, S1, S5
	0x03E407A4 FSUB S2, S2, S6
	0x03E407A8 FMUL S0, S0, S3
	0x03E407AC FMUL S1, S1, S3
	0x03E407B0 FMUL S2, S2, S3
	0x03E407B4 FADD S4, S4, S0

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X8, [X0]
	005 Move W1, W31
	006 Move V8, V1
	007 Move X19, X0
	008 Move X9, [X8+1096]
	009 Move X2, [X8+1104]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X8, [X19]
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Move W1, 1
	016 Move X3, [X8+1096]
	017 Move X2, [X8+1104]
	018 Move V0, V8
	019 Move V8, [X31+32]
	020 CallNoReturn X3

Method: System.Single get_horizontalNormalizedPosition()

Disassembly:
	0x03E40570 MOV X0, X19
	0x03E40574 MOV X1, X31
	0x03E40578 BL 0x3C32ECC
	0x03E4057C CBZ X0, 0x3E405D8
	0x03E40580 AND W1, W21, 0x1
	0x03E40584 B 0x3E405AC
	0x03E40588 AND W8, W20, 0x1
	0x03E4058C AND W9, W0, 0x1
	0x03E40590 CMP W9, W8
	0x03E40594 B.EQ 0x3E405C4
	0x03E40598 MOV X0, X19
	0x03E4059C MOV X1, X31
	0x03E405A0 BL 0x3C32ECC
	0x03E405A4 CBZ X0, 0x3E405D8
	0x03E405A8 AND W1, W20, 0x1
	0x03E405AC LDP X20, X19, [X31 + 0x30]
	0x03E405B0 LDP X22, X21, [X31 + 0x20]
	0x03E405B4 LDP X24, X23, [X31 + 0x10]
	0x03E405B8 MOV X2, X31
	0x03E405BC LDR X30, [X31], #0x40
	0x03E405C0 B 0x3C357B4
	0x03E405C4 LDP X20, X19, [X31 + 0x30]
	0x03E405C8 LDP X22, X21, [X31 + 0x20]
	0x03E405CC LDP X24, X23, [X31 + 0x10]
	0x03E405D0 LDR X30, [X31], #0x40
	0x03E405D4 RET
	0x03E405D8 BL 0x1C16F20
	0x03E405DC LDP S0, S1, [X0 + 0xC]
	0x03E405E0 LDP S2, S3, [X2]
	0x03E405E4 FADD S0, S0, S0
	0x03E405E8 FADD S4, S1, S1
	0x03E405EC FSUB S1, S0, S2
	0x03E405F0 FCMP S1, 0x0
	0x03E405F4 FSUB S0, S4, S3
	0x03E405F8 B.LE 0x3E40624
	0x03E405FC LDR V2, [X1]
	0x03E40600 LDR V3, [X3]
	0x03E40604 FMOV S4, -0.5
	0x03E40608 FADD S2, S2, S4
	0x03E4060C FMUL S1, S1, S2
	0x03E40610 FSUB S1, S3, S1
	0x03E40614 STR S1, [X3]
	0x03E40618 LDR V1, [X0 + 0xC]
	0x03E4061C FADD S1, S1, S1
	0x03E40620 STR S1, [X2]
	0x03E40624 FCMP S0, 0x0
	0x03E40628 B.LE 0x3E40654
	0x03E4062C LDR V1, [X1 + 0x4]
	0x03E40630 LDR V2, [X3 + 0x4]
	0x03E40634 FMOV S3, -0.5
	0x03E40638 FADD S1, S1, S3
	0x03E4063C FMUL S0, S0, S1
	0x03E40640 FSUB S0, S2, S0
	0x03E40644 STR S0, [X3 + 0x4]
	0x03E40648 LDR V0, [X0 + 0x10]
	0x03E4064C FADD S0, S0, S0
	0x03E40650 STR S0, [X2 + 0x4]
	0x03E40654 RET
	0x03E40658 STP D13, D12, [X31 - 0x60]!
	0x03E4065C STP D11, D10, [X31 + 0x10]
	0x03E40660 STP D9, D8, [X31 + 0x20]
	0x03E40664 STP X30, X23, [X31 + 0x30]
	0x03E40668 STP X22, X21, [X31 + 0x40]
	0x03E4066C STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Call ScrollRect.UpdateBounds, X0
	008 Move V0, [X19+148]
	009 Move V1, [X19+172]
	010 Add S8, S0, S0
	011 Add S9, S1, S1
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 Move X20, 0x59A000
	014 Move W8, [X20+1450]
	015 Compare W8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, 0x2BB000
	018 Move X0, [X0+1208]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1450], W8
	022 Move X8, 0x2BB000
	023 Move X8, [X8+1208]
	024 Move X9, -53825536
	025 Move V0, [X9+576]
	026 NotImplemented "Instruction FABS not yet implemented."
	027 Move X8, [X8]
	028 NotImplemented "Instruction FABS not yet implemented."
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 NotImplemented "Instruction FCSEL not yet implemented."
	031 Move X8, [X8+184]
	032 Multiply S0, S1, S0
	033 Move S1, 8
	034 Move V3, [X8]
	035 Multiply S1, S3, S1
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 NotImplemented "Instruction FCSEL not yet implemented."
	038 NotImplemented "Instruction FABD not yet implemented."
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move V1, [X19+172]
	041 Move V0, [X19+148]
	042 Move V2, [X19+160]
	043 Move V3, [X19+136]
	044 Move S4, W31
	045 Subtract S1, S2, S1
	046 Subtract S0, S3, S0
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move S0, 1
	049 NotImplemented "Instruction FCSEL not yet implemented."
	050 Move V0, [X19+160]
	051 Move V1, [X19+172]
	052 Move V2, [X19+136]
	053 Move V3, [X19+148]
	054 Subtract S0, S0, S1
	055 Add S1, S1, S1
	056 Subtract S2, S2, S3
	057 Add S3, S3, S3
	058 Subtract S0, S0, S2
	059 Subtract S1, S3, S1
	060 NotImplemented "Instruction FDIV not yet implemented."
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X30, [X31+16]
	064 Move D9, [X31+48]
	065 Move D8, [X31+56]
	066 Return V0

Method: System.Void set_horizontalNormalizedPosition(System.Single value)

Disassembly:
	0x03E407B8 FADD S3, S5, S1
	0x03E407BC FADD S5, S6, S2
	0x03E407C0 STP S4, S3, [X19]
	0x03E407C4 STP S5, S0, [X19 + 0x8]
	0x03E407C8 STP S1, S2, [X19 + 0x10]

ISIL:
	001 Move X8, [X0]
	002 Move W1, W31
	003 Move X3, [X8+1096]
	004 Move X2, [X8+1104]
	005 CallNoReturn X3

Method: System.Single get_verticalNormalizedPosition()

Disassembly:
	0x03E40670 CBZ X0, 0x3E407E4
	0x03E40674 MOV X19, X8
	0x03E40678 MOVN W8, 0x80800000
	0x03E4067C MOVN W9, 0x800000
	0x03E40680 FMOV S9, W8
	0x03E40684 FMOV S8, W9
	0x03E40688 MOV X20, X1
	0x03E4068C MOV X21, X0
	0x03E40690 MOV X22, X31
	0x03E40694 ADD X23, X0, 0x28
	0x03E40698 MOV V10.16B, V8.16B
	0x03E4069C MOV V11.16B, V8.16B
	0x03E406A0 MOV V12.16B, V9.16B
	0x03E406A4 MOV V13.16B, V9.16B
	0x03E406A8 LDR W8, [X21 + 0x18]
	0x03E406AC CMP X22, X8
	0x03E406B0 B.CS 0x3E407E0
	0x03E406B4 LDP S0, S1, [X23 - 0x8]
	0x03E406B8 LDR V2, [X23], #0xC
	0x03E406BC MOV X0, X20
	0x03E406C0 MOV X1, X31
	0x03E406C4 BL 0x3C28278
	0x03E406C8 FCMP S0, S13
	0x03E406CC FCSEL S13, S0, S13, MI
	0x03E406D0 FCMP S1, S12
	0x03E406D4 FCSEL S12, S1, S12, MI
	0x03E406D8 FCMP S2, S9
	0x03E406DC FCSEL S9, S2, S9, MI
	0x03E406E0 FCMP S0, S11
	0x03E406E4 FCSEL S11, S0, S11, GT
	0x03E406E8 FCMP S1, S10
	0x03E406EC ADD X22, X22, 0x1
	0x03E406F0 FCSEL S10, S1, S10, GT
	0x03E406F4 FCMP S2, S8
	0x03E406F8 FCSEL S8, S2, S8, GT
	0x03E406FC CMP X22, 0x4
	0x03E40700 B.NE 0x3E406A8
	0x03E40704 ADRP X20, 0x598000
	0x03E40708 LDRB W8, [X20 + 0x783]
	0x03E4070C CBNZ W8, 0x3E40724
	0x03E40710 ADRP X0, 0x2B3000
	0x03E40714 LDR X0, [X0 + 0x5A0]
	0x03E40718 BL 0x1C16CF4
	0x03E4071C MOVZ W8, 0x1
	0x03E40720 STRB W8, [X20 + 0x783]
	0x03E40724 ADRP X8, 0x2B3000
	0x03E40728 LDR X8, [X8 + 0x5A0]
	0x03E4072C FMOV S3, 0.5
	0x03E40730 LDP X22, X21, [X31 + 0x40]
	0x03E40734 LDP X30, X23, [X31 + 0x30]
	0x03E40738 LDR X8, [X8]
	0x03E4073C LDR X8, [X8 + 0xB8]
	0x03E40740 LDP S0, S1, [X8]
	0x03E40744 LDR V2, [X8 + 0x8]
	0x03E40748 FMUL S0, S0, S3
	0x03E4074C FMUL S1, S1, S3
	0x03E40750 FSUB S4, S13, S0
	0x03E40754 FMUL S2, S2, S3
	0x03E40758 FSUB S5, S12, S1
	0x03E4075C FCMP S4, S11
	0x03E40760 FSUB S6, S9, S2
	0x03E40764 FCSEL S4, S4, S11, MI
	0x03E40768 FCMP S5, S10
	0x03E4076C FADD S0, S13, S0

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Call ScrollRect.UpdateBounds, X0
	008 Move V0, [X19+152]
	009 Move V1, [X19+176]
	010 Add S8, S0, S0
	011 Add S9, S1, S1
	012 NotImplemented "Instruction FCMP not yet implemented."
	013 Move X20, 0x59A000
	014 Move W8, [X20+1450]
	015 Compare W8, 0
	016 JumpIfNotEqual {22}
	017 Move X0, 0x2BB000
	018 Move X0, [X0+1208]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+1450], W8
	022 Move X8, 0x2BB000
	023 Move X8, [X8+1208]
	024 Move X9, -53825536
	025 Move V0, [X9+576]
	026 NotImplemented "Instruction FABS not yet implemented."
	027 Move X8, [X8]
	028 NotImplemented "Instruction FABS not yet implemented."
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 NotImplemented "Instruction FCSEL not yet implemented."
	031 Move X8, [X8+184]
	032 Multiply S0, S1, S0
	033 Move S1, 8
	034 Move V3, [X8]
	035 Multiply S1, S3, S1
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 NotImplemented "Instruction FCSEL not yet implemented."
	038 NotImplemented "Instruction FABD not yet implemented."
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move V1, [X19+176]
	041 Move V0, [X19+152]
	042 Move V2, [X19+164]
	043 Move V3, [X19+140]
	044 Move S4, W31
	045 Subtract S1, S2, S1
	046 Subtract S0, S3, S0
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move S0, 1
	049 NotImplemented "Instruction FCSEL not yet implemented."
	050 Move V0, [X19+164]
	051 Move V1, [X19+176]
	052 Move V2, [X19+140]
	053 Move V3, [X19+152]
	054 Subtract S0, S0, S1
	055 Add S1, S1, S1
	056 Subtract S2, S2, S3
	057 Add S3, S3, S3
	058 Subtract S0, S0, S2
	059 Subtract S1, S3, S1
	060 NotImplemented "Instruction FDIV not yet implemented."
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X30, [X31+16]
	064 Move D9, [X31+48]
	065 Move D8, [X31+56]
	066 Return V0

Method: System.Void set_verticalNormalizedPosition(System.Single value)

Disassembly:
	0x03E407CC LDP X20, X19, [X31 + 0x50]
	0x03E407D0 LDP D9, D8, [X31 + 0x20]
	0x03E407D4 LDP D11, D10, [X31 + 0x10]
	0x03E407D8 LDP D13, D12, [X31], #0x60
	0x03E407DC RET

ISIL:
	001 Move X8, [X0]
	002 Move W1, 1
	003 Move X3, [X8+1096]
	004 Move X2, [X8+1104]
	005 CallNoReturn X3

Method: System.Void SetHorizontalNormalizedPosition(System.Single value)

Disassembly:
	0x03E407E0 BL 0x1C16F28
	0x03E407E4 BL 0x1C16F20
	0x03E407E8 STP X30, X25, [X31 - 0x40]!
	0x03E407EC STP X24, X23, [X31 + 0x10]
	0x03E407F0 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move X8, [X0]
	002 Move W1, W31
	003 Move X3, [X8+1096]
	004 Move X2, [X8+1104]
	005 CallNoReturn X3

Method: System.Void SetVerticalNormalizedPosition(System.Single value)

Disassembly:
	0x03E407F4 STP X20, X19, [X31 + 0x30]
	0x03E407F8 ADRP X25, 0x599000
	0x03E407FC LDRB W8, [X25 + 0x78F]
	0x03E40800 MOV X19, X5
	0x03E40804 MOV W24, W4

ISIL:
	001 Move X8, [X0]
	002 Move W1, 1
	003 Move X3, [X8+1096]
	004 Move X2, [X8+1104]
	005 CallNoReturn X3

Method: System.Void SetNormalizedPosition(System.Single value, System.Int32 axis)

Disassembly:
	0x03E40808 MOV W22, W3
	0x03E4080C MOV W23, W2
	0x03E40810 MOV X21, X1
	0x03E40814 MOV X20, X0
	0x03E40818 CBNZ W8, 0x3E40830
	0x03E4081C ADRP X0, 0x2BB000
	0x03E40820 LDR X0, [X0 + 0xF08]
	0x03E40824 BL 0x1C16CF4
	0x03E40828 MOVZ W8, 0x1
	0x03E4082C STRB W8, [X25 + 0x78F]
	0x03E40830 ADRP X8, 0x2BB000
	0x03E40834 LDR X8, [X8 + 0xF08]
	0x03E40838 LDR X8, [X8]
	0x03E4083C LDR X8, [X8 + 0xB8]
	0x03E40840 LDP S2, S1, [X8]
	0x03E40844 CBZ W24, 0x3E408AC
	0x03E40848 TBZ X23, 0x0, 0x3E408B4
	0x03E4084C LDR V5, [X21]
	0x03E40850 LDR V7, [X21 + 0xC]
	0x03E40854 LDR V3, [X19]
	0x03E40858 LDR V4, [X20]
	0x03E4085C LDR V6, [X20 + 0xC]
	0x03E40860 ADRP X8, 0xFFFFFFFFFCCA9000
	0x03E40864 LDR V16, [X8 + 0xF70]
	0x03E40868 FSUB S0, S5, S7
	0x03E4086C FADD S0, S0, S3
	0x03E40870 FSUB S17, S4, S6
	0x03E40874 FSUB S0, S17, S0
	0x03E40878 FCMP S0, S16
	0x03E4087C B.MI 0x3E408B8
	0x03E40880 ADRP X8, 0xFFFFFFFFFCCAA000
	0x03E40884 FADD S0, S5, S7
	0x03E40888 LDR V5, [X8 + 0x410]
	0x03E4088C FADD S0, S0, S3
	0x03E40890 FADD S3, S4, S6
	0x03E40894 FSUB S3, S3, S0
	0x03E40898 FCMP S3, S5
	0x03E4089C MOV V0.16B, V2.16B
	0x03E408A0 B.LE 0x3E408B8
	0x03E408A4 MOV V0.16B, V3.16B
	0x03E408A8 B 0x3E408B8
	0x03E408AC MOV V0.16B, V2.16B
	0x03E408B0 B 0x3E40918
	0x03E408B4 MOV V0.16B, V2.16B
	0x03E408B8 TBZ X22, 0x0, 0x3E40918
	0x03E408BC LDR V4, [X21 + 0x4]
	0x03E408C0 LDR V6, [X21 + 0x10]
	0x03E408C4 LDR V2, [X19 + 0x4]
	0x03E408C8 LDR V3, [X20 + 0x4]
	0x03E408CC LDR V5, [X20 + 0x10]
	0x03E408D0 ADRP X8, 0xFFFFFFFFFCCAA000
	0x03E408D4 LDR V16, [X8 + 0x410]
	0x03E408D8 FADD S7, S4, S6
	0x03E408DC FADD S7, S7, S2
	0x03E408E0 FADD S17, S3, S5
	0x03E408E4 FSUB S7, S17, S7
	0x03E408E8 FCMP S7, S16
	0x03E408EC B.GT 0x3E40914
	0x03E408F0 ADRP X8, 0xFFFFFFFFFCCA9000
	0x03E408F4 FSUB S4, S4, S6
	0x03E408F8 LDR V6, [X8 + 0xF70]
	0x03E408FC FADD S2, S4, S2
	0x03E40900 FSUB S3, S3, S5
	0x03E40904 FSUB S2, S3, S2
	0x03E40908 FCMP S2, S6
	0x03E4090C FCSEL S1, S2, S1, MI
	0x03E40910 B 0x3E40918
	0x03E40914 MOV V1.16B, V7.16B
	0x03E40918 LDP X20, X19, [X31 + 0x30]
	0x03E4091C LDP X22, X21, [X31 + 0x20]
	0x03E40920 LDP X24, X23, [X31 + 0x10]
	0x03E40924 LDP X30, X25, [X31], #0x40
	0x03E40928 RET
	0x03E4092C MOV X1, X31
	0x03E40930 B 0x3C32E90
	0x03E40934 STR X30, [X31 - 0x20]!
	0x03E40938 STP X20, X19, [X31 + 0x10]
	0x03E4093C ADRP X20, 0x5A8000
	0x03E40940 ADRP X19, 0x318000
	0x03E40944 LDRB W8, [X20 + 0x7BB]
	0x03E40948 LDR X19, [X19 + 0xA58]
	0x03E4094C TBNZ X8, 0x0, 0x3E40970
	0x03E40950 ADRP X0, 0x32B000
	0x03E40954 LDR X0, [X0 + 0x370]
	0x03E40958 BL 0x1C16CF4
	0x03E4095C ADRP X0, 0x318000
	0x03E40960 LDR X0, [X0 + 0xA58]
	0x03E40964 BL 0x1C16CF4
	0x03E40968 MOVZ W8, 0x1
	0x03E4096C STRB W8, [X20 + 0x7BB]
	0x03E40970 LDR X0, [X19]
	0x03E40974 ADRP X20, 0x32B000
	0x03E40978 LDR W8, [X0 + 0xE0]
	0x03E4097C LDR X20, [X20 + 0x370]
	0x03E40980 CBNZ W8, 0x3E4098C
	0x03E40984 BL 0x1C16DFC
	0x03E40988 LDR X0, [X19]
	0x03E4098C LDR X8, [X0 + 0xB8]
	0x03E40990 LDR X0, [X20]
	0x03E40994 LDR W1, [X8 + 0x8]
	0x03E40998 BL 0x1C16D6C
	0x03E4099C LDR X8, [X19]
	0x03E409A0 MOV X19, X0
	0x03E409A4 MOV X1, X19
	0x03E409A8 MOV X3, X31
	0x03E409AC LDR X9, [X8 + 0xB8]
	0x03E409B0 LDR X8, [X9]
	0x03E409B4 LDR W2, [X9 + 0x8]
	0x03E409B8 MOV X0, X8
	0x03E409BC BL 0x33A0C7C
	0x03E409C0 MOV X0, X19
	0x03E409C4 LDP X20, X19, [X31 + 0x10]
	0x03E409C8 LDR X30, [X31], #0x20
	0x03E409CC RET
	0x03E409D0 STR X30, [X31 - 0x20]!
	0x03E409D4 STP X20, X19, [X31 + 0x10]
	0x03E409D8 ADRP X20, 0x5A8000
	0x03E409DC ADRP X19, 0x318000
	0x03E409E0 LDRB W8, [X20 + 0x7BC]
	0x03E409E4 LDR X19, [X19 + 0xA58]
	0x03E409E8 TBNZ X8, 0x0, 0x3E40A00
	0x03E409EC ADRP X0, 0x318000
	0x03E409F0 LDR X0, [X0 + 0xA58]
	0x03E409F4 BL 0x1C16CF4
	0x03E409F8 MOVZ W8, 0x1
	0x03E409FC STRB W8, [X20 + 0x7BC]
	0x03E40A00 LDR X0, [X19]
	0x03E40A04 LDR W8, [X0 + 0xE0]
	0x03E40A08 CBNZ W8, 0x3E40A14
	0x03E40A0C BL 0x1C16DFC
	0x03E40A10 LDR X0, [X19]
	0x03E40A14 LDR X8, [X0 + 0xB8]
	0x03E40A18 LDP X20, X19, [X31 + 0x10]
	0x03E40A1C LDR W0, [X8 + 0x8]
	0x03E40A20 LDR X30, [X31], #0x20
	0x03E40A24 RET
	0x03E40A28 STR X30, [X31 - 0x20]!
	0x03E40A2C STP X20, X19, [X31 + 0x10]
	0x03E40A30 ADRP X20, 0x5A8000
	0x03E40A34 ADRP X19, 0x318000
	0x03E40A38 LDRB W8, [X20 + 0x7BD]
	0x03E40A3C LDR X19, [X19 + 0xA58]
	0x03E40A40 TBNZ X8, 0x0, 0x3E40A70
	0x03E40A44 ADRP X0, 0x32B000
	0x03E40A48 LDR X0, [X0 + 0x3A8]
	0x03E40A4C BL 0x1C16CF4
	0x03E40A50 ADRP X0, 0x32B000
	0x03E40A54 LDR X0, [X0 + 0x3B0]
	0x03E40A58 BL 0x1C16CF4
	0x03E40A5C ADRP X0, 0x318000
	0x03E40A60 LDR X0, [X0 + 0xA58]
	0x03E40A64 BL 0x1C16CF4
	0x03E40A68 MOVZ W8, 0x1
	0x03E40A6C STRB W8, [X20 + 0x7BD]
	0x03E40A70 LDR X0, [X19]
	0x03E40A74 ADRP X19, 0x32B000
	0x03E40A78 ADRP X20, 0x32B000
	0x03E40A7C LDR W8, [X0 + 0xE0]
	0x03E40A80 LDR X19, [X19 + 0x3B0]
	0x03E40A84 LDR X20, [X20 + 0x3A8]
	0x03E40A88 CBNZ W8, 0x3E40A90
	0x03E40A8C BL 0x1C16DFC
	0x03E40A90 BL 0x3E40934
	0x03E40A94 LDR X8, [X19]
	0x03E40A98 MOV X19, X0
	0x03E40A9C MOV X0, X8

ISIL:
	001 Move [X31-80], D14
	002 Move [X31+8], D13
	003 Move [X31+16], D12
	004 Move [X31+24], D11
	005 Move [X31+32], D10
	006 Move [X31+40], D9
	007 Move [X31+48], D8
	008 Move [X31+56], X30
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move W20, W1
	012 Move V8, V0
	013 Move X19, X0
	014 Call ScrollRect.EnsureLayoutHasRebuilt, X0
	015 Move X0, X19
	016 Call ScrollRect.UpdateBounds, X0
	017 NotImplemented "Instruction CMP not yet implemented."
	018 NotImplemented "Instruction CMP not yet implemented."
	019 Compare W20, 0
	020 JumpIfNotEqual {127}
	021 Move V0, [X19+148]
	022 Move V10, [X19+172]
	023 Add X8, X19, 160
	024 Move V0, [X19+156]
	025 Move V10, [X19+180]
	026 Add X8, X19, 168
	027 Move V0, [X19+152]
	028 Move V10, [X19+176]
	029 Add X8, X19, 164
	030 Add S0, S0, S0
	031 Add S1, S10, S10
	032 Subtract S11, S0, S1
	033 Move X0, [X19+32]
	034 Compare X0, 0
	035 JumpIfEqual {126}
	036 Move V12, [X8]
	037 Move X1, X31
	038 Call RectTransform.get_anchoredPosition, X0
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Compare W20, 0
	041 JumpIfNotEqual {141}
	042 Move V9, V0
	043 Add X8, X19, 148
	044 Add X9, X19, 136
	045 Add X8, X19, 152
	046 Add X9, X19, 140
	047 Move V9, V1
	048 Move X0, [X19+32]
	049 Compare X0, 0
	050 JumpIfEqual {126}
	051 Move V13, [X9]
	052 Move V14, [X8]
	053 Move X1, X31
	054 Call RectTransform.get_anchoredPosition, X0
	055 Move V3, V0
	056 Compare W20, 0
	057 JumpIfEqual {60}
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move V3, V1
	060 Subtract S2, S12, S10
	061 Multiply S4, S11, S8
	062 Move X8, -53825536
	063 Subtract S2, S2, S4
	064 Move V4, [X8+816]
	065 Subtract S5, S13, S14
	066 Add S2, S2, S9
	067 Subtract S2, S2, S5
	068 NotImplemented "Instruction FABD not yet implemented."
	069 NotImplemented "Instruction FCMP not yet implemented."
	070 Compare W20, 0
	071 JumpIfEqual {99}
	072 NotImplemented "Instruction CMP not yet implemented."
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X0, 0x2BE000
	075 Move X0, [X0+3960]
	076 Call 0x1C17D08
	077 Call 0x1C17F10
	078 Move X19, X0
	079 Move X0, 0x30F000
	080 Move X0, [X0+1784]
	081 Call 0x1C17D08
	082 Move X1, X0
	083 Move X0, X19
	084 Move X2, X31
	085 Call IndexOutOfRangeException..ctor, X0, X1
	086 Move X0, 0x320000
	087 Move X0, [X0+672]
	088 Move X20, [X31+64]
	089 Move X19, [X31+72]
	090 Move X30, [X31+56]
	091 Move D9, [X31+40]
	092 Move D8, [X31+48]
	093 Move D11, [X31+24]
	094 Move D10, [X31+32]
	095 Move D13, [X31+8]
	096 Move D12, [X31+16]
	097 Move V14, [X31+80]
	098 Return 
	099 Move V0, V2
	100 Move V2, V1
	101 Move X0, [X19+32]
	102 Compare X0, 0
	103 JumpIfEqual {126}
	104 Move V1, V2
	105 Move X1, X31
	106 Call RectTransform.set_anchoredPosition, X0, X1
	107 NotImplemented "Instruction CMP not yet implemented."
	108 Compare W20, 0
	109 JumpIfNotEqual {155}
	110 Add X8, X19, 184
	111 Add X8, X19, 188
	112 Move X0, X19
	113 Move X20, [X31+64]
	114 Move X19, [X31+72]
	115 Move X30, [X31+56]
	116 Move D9, [X31+40]
	117 Move D8, [X31+48]
	118 Move D11, [X31+24]
	119 Move D10, [X31+32]
	120 Move D13, [X31+8]
	121 Move D12, [X31+16]
	122 Move [X8], W31
	123 Move V14, [X31+80]
	124 Call ScrollRect.UpdateBounds, X0
	125 Return 
	126 Call 0x1C17F20
	127 Move X0, 0x2BE000
	128 Move X0, [X0+3960]
	129 Call 0x1C17D08
	130 Call 0x1C17F10
	131 Move X19, X0
	132 Move X0, 0x30F000
	133 Move X0, [X0+1784]
	134 Call 0x1C17D08
	135 Move X1, X0
	136 Move X0, X19
	137 Move X2, X31
	138 Call IndexOutOfRangeException..ctor, X0, X1
	139 Move X0, 0x30F000
	140 Move X0, [X0+1792]
	141 Move X0, 0x2BE000
	142 Move X0, [X0+3960]
	143 Call 0x1C17D08
	144 Call 0x1C17F10
	145 Move X19, X0
	146 Move X0, 0x306000
	147 Move X0, [X0+4088]
	148 Call 0x1C17D08
	149 Move X1, X0
	150 Move X0, X19
	151 Move X2, X31
	152 Call IndexOutOfRangeException..ctor, X0, X1
	153 Move X0, 0x307000
	154 Move X0, [X0]
	155 Move X0, 0x2BE000
	156 Move X0, [X0+3960]
	157 Call 0x1C17D08
	158 Call 0x1C17F10
	159 Move X19, X0
	160 Move X0, 0x306000
	161 Move X0, [X0+4088]
	162 Call 0x1C17D08
	163 Move X1, X0
	164 Move X0, X19
	165 Move X2, X31
	166 Call IndexOutOfRangeException..ctor, X0, X1
	167 Move X0, 0x320000
	168 Move X0, [X0+680]
	169 Call 0x1C17D08
	170 Move X1, X0
	171 Move X0, X19
	172 Call 0x1C17DEC

Method: System.Single RubberDelta(System.Single overStretching, System.Single viewSize)

Disassembly:
	0x03E3FE3C LDRB W9, [X19 + 0xFE]
	0x03E3FE40 STUR V0, [X19 + 0x88]
	0x03E3FE44 STR X8, [X19 + 0x98]
	0x03E3FE48 CBZ W9, 0x3E3FF38
	0x03E3FE4C MOV X0, X19
	0x03E3FE50 BL 0x3E3FB2C
	0x03E3FE54 TBZ X0, 0x0, 0x3E3FF38
	0x03E3FE58 MOV X0, X19
	0x03E3FE5C BL 0x3E3D754
	0x03E3FE60 LDR V8, [X19 + 0x104]
	0x03E3FE64 LDR V9, [X19 + 0x64]
	0x03E3FE68 MOV X20, X0
	0x03E3FE6C MOV X0, X19
	0x03E3FE70 BL 0x3E3D754

ISIL:
	001 Move X8, -53821440
	002 Move V2, [X8+1088]
	003 NotImplemented "Instruction FABS not yet implemented."
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 Multiply S2, S3, S2
	006 Move S3, 1
	007 NotImplemented "Instruction FDIV not yet implemented."
	008 Add S2, S2, S3
	009 NotImplemented "Instruction FDIV not yet implemented."
	010 Subtract S2, S3, S2
	011 Multiply S3, S2, S1
	012 NotImplemented "Instruction FNMUL not yet implemented."
	013 NotImplemented "Instruction FCSEL not yet implemented."
	014 Return V0

Method: System.Void OnRectTransformDimensionsChange()

Disassembly:
	0x03E40AA0 BL 0x1C16F10

ISIL:
	001 Call ScrollRect.SetDirty, X0
	002 Return 

Method: System.Boolean get_hScrollingNeeded()

Disassembly:
	0x03E40AA4 LDR X2, [X20]
	0x03E40AA8 MOV X1, X19
	0x03E40AAC MOV X20, X0
	0x03E40AB0 BL 0x301B8E0
	0x03E40AB4 MOV X0, X20
	0x03E40AB8 LDP X20, X19, [X31 + 0x10]
	0x03E40ABC LDR X30, [X31], #0x20
	0x03E40AC0 RET
	0x03E40AC4 STP X30, X21, [X31 - 0x20]!
	0x03E40AC8 STP X20, X19, [X31 + 0x10]
	0x03E40ACC ADRP X20, 0x5A8000
	0x03E40AD0 LDRB W8, [X20 + 0x7BE]
	0x03E40AD4 MOV X19, X0
	0x03E40AD8 TBNZ X8, 0x0, 0x3E40AF0
	0x03E40ADC ADRP X0, 0x318000
	0x03E40AE0 LDR X0, [X0 + 0xA58]
	0x03E40AE4 BL 0x1C16CF4
	0x03E40AE8 MOVZ W8, 0x1
	0x03E40AEC STRB W8, [X20 + 0x7BE]
	0x03E40AF0 CBZ X19, 0x3E40B7C
	0x03E40AF4 ADRP X21, 0x318000
	0x03E40AF8 LDR X21, [X21 + 0xA58]
	0x03E40AFC LDR X0, [X21]
	0x03E40B00 LDR W8, [X0 + 0xE0]
	0x03E40B04 CBNZ W8, 0x3E40B10
	0x03E40B08 BL 0x1C16DFC
	0x03E40B0C LDR X0, [X21]
	0x03E40B10 LDR X8, [X0 + 0xB8]
	0x03E40B14 LDR W20, [X19 + 0x18]
	0x03E40B18 LDR W8, [X8 + 0x8]
	0x03E40B1C CMP W8, W20
	0x03E40B20 B.GT 0x3E40B44
	0x03E40B24 LDR W9, [X0 + 0xE0]
	0x03E40B28 CBZ W9, 0x3E40B34

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5A9000
	006 Move X21, 0x2B4000
	007 Move W8, [X20+1969]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2B4000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1969], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_isPlaying
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {39}
	030 Move V1, [X19+172]
	031 Move X8, -53825536
	032 Move V0, [X19+148]
	033 Move V2, [X8+816]
	034 Add S1, S1, S1
	035 Add S0, S0, S0
	036 Add S1, S1, S2
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move W0, 1
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0

Method: System.Boolean get_vScrollingNeeded()

Disassembly:
	0x03E40B2C MOV W20, W8
	0x03E40B30 B 0x3E40B44
	0x03E40B34 BL 0x1C16DFC
	0x03E40B38 LDR X0, [X21]
	0x03E40B3C LDR X8, [X0 + 0xB8]
	0x03E40B40 LDR W20, [X8 + 0x8]
	0x03E40B44 LDR W8, [X0 + 0xE0]
	0x03E40B48 CBNZ W8, 0x3E40B54
	0x03E40B4C BL 0x1C16DFC
	0x03E40B50 LDR X0, [X21]
	0x03E40B54 LDR X8, [X0 + 0xB8]
	0x03E40B58 MOV X1, X19
	0x03E40B5C MOV W2, W20
	0x03E40B60 MOV X3, X31
	0x03E40B64 LDR X0, [X8]
	0x03E40B68 BL 0x33A0C7C
	0x03E40B6C MOV W0, W20
	0x03E40B70 LDP X20, X19, [X31 + 0x10]
	0x03E40B74 LDP X30, X21, [X31], #0x20
	0x03E40B78 RET
	0x03E40B7C BL 0x1C16F20
	0x03E40B80 LDR X9, [X0 + 0x48]
	0x03E40B84 LDUR V0, [X0 + 0x38]
	0x03E40B88 LDUR V1, [X0 + 0x28]
	0x03E40B8C STR X9, [X8 + 0x20]
	0x03E40B90 STP V1, V0, [X8]
	0x03E40B94 RET
	0x03E40B98 SUB X31, X31, 0x90
	0x03E40B9C STR X30, [X31 + 0x60]
	0x03E40BA0 STP X22, X21, [X31 + 0x70]
	0x03E40BA4 STP X20, X19, [X31 + 0x80]
	0x03E40BA8 ADRP X22, 0x5A8000
	0x03E40BAC ADRP X21, 0x32B000
	0x03E40BB0 LDRB W8, [X22 + 0x7BF]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5A9000
	006 Move X21, 0x2B4000
	007 Move W8, [X20+1970]
	008 Move X21, [X21+2416]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2B4000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1970], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call Application.get_isPlaying
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {39}
	030 Move V1, [X19+176]
	031 Move X8, -53825536
	032 Move V0, [X19+152]
	033 Move V2, [X8+816]
	034 Add S1, S1, S1
	035 Add S0, S0, S0
	036 Add S1, S1, S2
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 NotImplemented "Instruction CSET not yet implemented."
	039 Move W0, 1
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return X0

Method: System.Void CalculateLayoutInputHorizontal()

Disassembly:
	0x03E40BB4 LDR X21, [X21 + 0x3B8]

ISIL:
	001 Return 

Method: System.Void CalculateLayoutInputVertical()

Disassembly:
	0x03E40BB8 MOV X20, X1

ISIL:
	001 Return 

Method: System.Single get_minWidth()

Disassembly:
	0x03E40BBC MOV X19, X0
	0x03E40BC0 TBNZ X8, 0x0, 0x3E40BD8

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_preferredWidth()

Disassembly:
	0x03E40BC4 ADRP X0, 0x32B000
	0x03E40BC8 LDR X0, [X0 + 0x3B8]

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_flexibleWidth()

Disassembly:
	0x03E40BCC BL 0x1C16CF4
	0x03E40BD0 MOVZ W8, 0x1

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_minHeight()

Disassembly:
	0x03E40BD4 STRB W8, [X22 + 0x7BF]
	0x03E40BD8 LDR X8, [X20 + 0x20]

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_preferredHeight()

Disassembly:
	0x03E40BDC LDP V0, V1, [X20]
	0x03E40BE0 LDR X2, [X21]

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_flexibleHeight()

Disassembly:
	0x03E40BE4 ADD X0, X19, 0x28
	0x03E40BE8 ADD X1, X31, 0x30

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Int32 get_layoutPriority()

Disassembly:
	0x03E40BEC STR X8, [X31 + 0x20]
	0x03E40BF0 STP V0, V1, [X31]

ISIL:
	001 Move TEMP, 0
	002 Not TEMP
	003 Move W0, TEMP
	004 Return X0

Method: System.Void SetLayoutHorizontal()

Disassembly:
	0x03E40BF4 STP V0, V1, [X31 + 0x30]
	0x03E40BF8 STR X8, [X31 + 0x50]
	0x03E40BFC BL 0x2254460
	0x03E40C00 TBZ X0, 0x0, 0x3E40C0C
	0x03E40C04 MOV X0, X19
	0x03E40C08 BL 0x3E40C20
	0x03E40C0C LDP X20, X19, [X31 + 0x80]
	0x03E40C10 LDP X22, X21, [X31 + 0x70]
	0x03E40C14 LDR X30, [X31 + 0x60]
	0x03E40C18 ADD X31, X31, 0x90
	0x03E40C1C RET
	0x03E40C20 STP X30, X19, [X31 - 0x10]!
	0x03E40C24 LDR X8, [X0]
	0x03E40C28 MOV X19, X0
	0x03E40C2C LDR X9, [X8 + 0x2B8]
	0x03E40C30 LDR X1, [X8 + 0x2C0]
	0x03E40C34 BLR X9
	0x03E40C38 TBZ X0, 0x0, 0x3E40C4C
	0x03E40C3C LDRB W8, [X19 + 0xF1]
	0x03E40C40 CBZ W8, 0x3E40C6C
	0x03E40C44 MOVZ W1, 0x2
	0x03E40C48 B 0x3E40C50
	0x03E40C4C MOVZ W1, 0x4
	0x03E40C50 LDR X8, [X19]
	0x03E40C54 MOV X0, X19
	0x03E40C58 MOV W2, W31
	0x03E40C5C LDR X4, [X8 + 0x2D8]
	0x03E40C60 LDR X3, [X8 + 0x2E0]
	0x03E40C64 LDP X30, X19, [X31], #0x10
	0x03E40C68 BR X4
	0x03E40C6C LDRB W8, [X19 + 0xF2]
	0x03E40C70 CBZ W8, 0x3E40C7C
	0x03E40C74 MOVZ W1, 0x3
	0x03E40C78 B 0x3E40C50
	0x03E40C7C LDRB W1, [X19 + 0xF0]
	0x03E40C80 B 0x3E40C50
	0x03E40C84 LDR W0, [X0 + 0x50]
	0x03E40C88 RET
	0x03E40C8C STR X30, [X31 - 0x30]!
	0x03E40C90 STP X22, X21, [X31 + 0x10]
	0x03E40C94 STP X20, X19, [X31 + 0x20]
	0x03E40C98 ADRP X22, 0x5A8000
	0x03E40C9C ADRP X21, 0x32B000
	0x03E40CA0 LDRB W8, [X22 + 0x7C0]
	0x03E40CA4 LDR X21, [X21 + 0x3C0]
	0x03E40CA8 MOV W20, W1
	0x03E40CAC MOV X19, X0
	0x03E40CB0 TBNZ X8, 0x0, 0x3E40CC8
	0x03E40CB4 ADRP X0, 0x32B000
	0x03E40CB8 LDR X0, [X0 + 0x3C0]
	0x03E40CBC BL 0x1C16CF4
	0x03E40CC0 MOVZ W8, 0x1
	0x03E40CC4 STRB W8, [X22 + 0x7C0]
	0x03E40CC8 LDR X2, [X21]
	0x03E40CCC ADD X0, X19, 0x50
	0x03E40CD0 MOV W1, W20
	0x03E40CD4 BL 0x22543F8
	0x03E40CD8 TBZ X0, 0x0, 0x3E40CF0
	0x03E40CDC MOV X0, X19
	0x03E40CE0 LDP X20, X19, [X31 + 0x20]
	0x03E40CE4 LDP X22, X21, [X31 + 0x10]
	0x03E40CE8 LDR X30, [X31], #0x30
	0x03E40CEC B 0x3E40C20
	0x03E40CF0 LDP X20, X19, [X31 + 0x20]
	0x03E40CF4 LDP X22, X21, [X31 + 0x10]
	0x03E40CF8 LDR X30, [X31], #0x30
	0x03E40CFC RET
	0x03E40D00 ADD X1, X0, 0x54
	0x03E40D04 MOVZ W2, 0x58
	0x03E40D08 MOV X0, X8
	0x03E40D0C B 0x3EB1AC0
	0x03E40D10 SUB X31, X31, 0xE0
	0x03E40D14 STR X30, [X31 + 0xB0]
	0x03E40D18 STP X22, X21, [X31 + 0xC0]
	0x03E40D1C STP X20, X19, [X31 + 0xD0]
	0x03E40D20 ADRP X21, 0x5A8000
	0x03E40D24 ADRP X22, 0x32B000
	0x03E40D28 LDRB W8, [X21 + 0x7C1]
	0x03E40D2C LDR X22, [X22 + 0x3C8]
	0x03E40D30 MOV X20, X1
	0x03E40D34 MOV X19, X0
	0x03E40D38 TBNZ X8, 0x0, 0x3E40D50
	0x03E40D3C ADRP X0, 0x32B000
	0x03E40D40 LDR X0, [X0 + 0x3C8]
	0x03E40D44 BL 0x1C16CF4
	0x03E40D48 MOVZ W8, 0x1
	0x03E40D4C STRB W8, [X21 + 0x7C1]
	0x03E40D50 ADD X0, X31, 0x0
	0x03E40D54 MOVZ W2, 0x58
	0x03E40D58 MOV X1, X20
	0x03E40D5C ADD X21, X19, 0x54
	0x03E40D60 BL 0x3EB1AC0
	0x03E40D64 LDR X20, [X22]
	0x03E40D68 ADD X0, X31, 0x58
	0x03E40D6C ADD X1, X31, 0x0
	0x03E40D70 MOVZ W2, 0x58
	0x03E40D74 BL 0x3EB1AC0
	0x03E40D78 ADD X1, X31, 0x58
	0x03E40D7C MOV X0, X21
	0x03E40D80 MOV X2, X20
	0x03E40D84 BL 0x22542B4
	0x03E40D88 TBZ X0, 0x0, 0x3E40D94
	0x03E40D8C MOV X0, X19
	0x03E40D90 BL 0x3E40C20
	0x03E40D94 LDP X20, X19, [X31 + 0xD0]
	0x03E40D98 LDP X22, X21, [X31 + 0xC0]
	0x03E40D9C LDR X30, [X31 + 0xB0]
	0x03E40DA0 ADD X31, X31, 0xE0
	0x03E40DA4 RET
	0x03E40DA8 LDP V1, V0, [X0 + 0xB0]
	0x03E40DAC STP V1, V0, [X8]
	0x03E40DB0 RET
	0x03E40DB4 SUB X31, X31, 0x70
	0x03E40DB8 STR X30, [X31 + 0x40]
	0x03E40DBC STP X22, X21, [X31 + 0x50]
	0x03E40DC0 STP X20, X19, [X31 + 0x60]
	0x03E40DC4 ADRP X22, 0x5A8000
	0x03E40DC8 ADRP X21, 0x32B000
	0x03E40DCC LDRB W8, [X22 + 0x7C2]
	0x03E40DD0 LDR X21, [X21 + 0x3D0]
	0x03E40DD4 MOV X20, X1
	0x03E40DD8 MOV X19, X0
	0x03E40DDC TBNZ X8, 0x0, 0x3E40DF4
	0x03E40DE0 ADRP X0, 0x32B000
	0x03E40DE4 LDR X0, [X0 + 0x3D0]
	0x03E40DE8 BL 0x1C16CF4
	0x03E40DEC MOVZ W8, 0x1
	0x03E40DF0 STRB W8, [X22 + 0x7C2]
	0x03E40DF4 LDP V1, V0, [X20]
	0x03E40DF8 LDR X2, [X21]
	0x03E40DFC ADD X0, X19, 0xB0
	0x03E40E00 ADD X1, X31, 0x20
	0x03E40E04 STP V1, V0, [X31]
	0x03E40E08 STP V1, V0, [X31 + 0x20]
	0x03E40E0C BL 0x2254590
	0x03E40E10 TBZ X0, 0x0, 0x3E40E1C
	0x03E40E14 MOV X0, X19
	0x03E40E18 BL 0x3E40C20
	0x03E40E1C LDP X20, X19, [X31 + 0x60]
	0x03E40E20 LDP X22, X21, [X31 + 0x50]
	0x03E40E24 LDR X30, [X31 + 0x40]
	0x03E40E28 ADD X31, X31, 0x70
	0x03E40E2C RET
	0x03E40E30 LDR X0, [X0 + 0xD0]
	0x03E40E34 RET
	0x03E40E38 STR X30, [X31 - 0x30]!
	0x03E40E3C STP X22, X21, [X31 + 0x10]
	0x03E40E40 STP X20, X19, [X31 + 0x20]
	0x03E40E44 ADRP X22, 0x5A8000
	0x03E40E48 ADRP X21, 0x32B000
	0x03E40E4C LDRB W8, [X22 + 0x7C3]
	0x03E40E50 LDR X21, [X21 + 0x3D8]
	0x03E40E54 MOV X20, X1
	0x03E40E58 MOV X19, X0
	0x03E40E5C TBNZ X8, 0x0, 0x3E40E74
	0x03E40E60 ADRP X0, 0x32B000
	0x03E40E64 LDR X0, [X0 + 0x3D8]
	0x03E40E68 BL 0x1C16CF4
	0x03E40E6C MOVZ W8, 0x1
	0x03E40E70 STRB W8, [X22 + 0x7C3]
	0x03E40E74 LDR X2, [X21]
	0x03E40E78 ADD X0, X19, 0xD0
	0x03E40E7C MOV X1, X20
	0x03E40E80 BL 0x2254190
	0x03E40E84 TBZ X0, 0x0, 0x3E40E9C
	0x03E40E88 MOV X0, X19
	0x03E40E8C LDP X20, X19, [X31 + 0x20]
	0x03E40E90 LDP X22, X21, [X31 + 0x10]
	0x03E40E94 LDR X30, [X31], #0x30
	0x03E40E98 B 0x3E40C20
	0x03E40E9C LDP X20, X19, [X31 + 0x20]
	0x03E40EA0 LDP X22, X21, [X31 + 0x10]
	0x03E40EA4 LDR X30, [X31], #0x30
	0x03E40EA8 RET
	0x03E40EAC LDR X0, [X0 + 0xE0]
	0x03E40EB0 RET
	0x03E40EB4 STR X30, [X31 - 0x30]!
	0x03E40EB8 STP X22, X21, [X31 + 0x10]
	0x03E40EBC STP X20, X19, [X31 + 0x20]
	0x03E40EC0 ADRP X22, 0x5A8000
	0x03E40EC4 ADRP X21, 0x32A000
	0x03E40EC8 LDRB W8, [X22 + 0x7C4]
	0x03E40ECC LDR X21, [X21 + 0xF58]
	0x03E40ED0 MOV X20, X1
	0x03E40ED4 MOV X19, X0
	0x03E40ED8 TBNZ X8, 0x0, 0x3E40EF0
	0x03E40EDC ADRP X0, 0x32A000
	0x03E40EE0 LDR X0, [X0 + 0xF58]
	0x03E40EE4 BL 0x1C16CF4
	0x03E40EE8 MOVZ W8, 0x1
	0x03E40EEC STRB W8, [X22 + 0x7C4]
	0x03E40EF0 LDR X2, [X21]
	0x03E40EF4 ADD X0, X19, 0xE0
	0x03E40EF8 MOV X1, X20
	0x03E40EFC BL 0x2254190
	0x03E40F00 TBZ X0, 0x0, 0x3E40F18
	0x03E40F04 MOV X0, X19
	0x03E40F08 LDP X20, X19, [X31 + 0x20]
	0x03E40F0C LDP X22, X21, [X31 + 0x10]
	0x03E40F10 LDR X30, [X31], #0x30
	0x03E40F14 B 0x3E40C20
	0x03E40F18 LDP X20, X19, [X31 + 0x20]
	0x03E40F1C LDP X22, X21, [X31 + 0x10]
	0x03E40F20 LDR X30, [X31], #0x30
	0x03E40F24 RET
	0x03E40F28 LDRB W0, [X0 + 0xD8]
	0x03E40F2C RET
	0x03E40F30 STR X30, [X31 - 0x30]!
	0x03E40F34 STP X22, X21, [X31 + 0x10]
	0x03E40F38 STP X20, X19, [X31 + 0x20]
	0x03E40F3C ADRP X22, 0x5A8000
	0x03E40F40 ADRP X21, 0x322000
	0x03E40F44 LDRB W8, [X22 + 0x7C5]
	0x03E40F48 LDR X21, [X21 + 0x590]
	0x03E40F4C MOV W20, W1
	0x03E40F50 MOV X19, X0
	0x03E40F54 TBNZ X8, 0x0, 0x3E40F84
	0x03E40F58 ADRP X0, 0x2DA000
	0x03E40F5C LDR X0, [X0 + 0xDF8]
	0x03E40F60 BL 0x1C16CF4
	0x03E40F64 ADRP X0, 0x2B3000
	0x03E40F68 LDR X0, [X0 + 0x598]
	0x03E40F6C BL 0x1C16CF4
	0x03E40F70 ADRP X0, 0x322000
	0x03E40F74 LDR X0, [X0 + 0x590]
	0x03E40F78 BL 0x1C16CF4
	0x03E40F7C MOVZ W8, 0x1
	0x03E40F80 STRB W8, [X22 + 0x7C5]
	0x03E40F84 LDR X2, [X21]
	0x03E40F88 ADD X21, X19, 0xD8
	0x03E40F8C AND W1, W20, 0x1
	0x03E40F90 MOV X0, X21
	0x03E40F94 BL 0x22541E0
	0x03E40F98 TBZ X0, 0x0, 0x3E4108C
	0x03E40F9C LDRB W8, [X21]
	0x03E40FA0 CBNZ W8, 0x3E41078
	0x03E40FA4 ADRP X22, 0x2DA000
	0x03E40FA8 LDR X22, [X22 + 0xDF8]
	0x03E40FAC LDR X0, [X22]
	0x03E40FB0 LDR W8, [X0 + 0xE0]
	0x03E40FB4 CBNZ W8, 0x3E40FBC
	0x03E40FB8 BL 0x1C16DFC
	0x03E40FBC MOV X0, X31
	0x03E40FC0 BL 0x3E4FF90
	0x03E40FC4 ADRP X21, 0x2B3000
	0x03E40FC8 LDR X21, [X21 + 0x598]
	0x03E40FCC MOV X20, X0
	0x03E40FD0 LDR X8, [X21]
	0x03E40FD4 LDR W9, [X8 + 0xE0]
	0x03E40FD8 CBNZ W9, 0x3E40FE4
	0x03E40FDC MOV X0, X8
	0x03E40FE0 BL 0x1C16DFC
	0x03E40FE4 MOV X0, X20
	0x03E40FE8 MOV X1, X31
	0x03E40FEC MOV X2, X31
	0x03E40FF0 BL 0x3C354F8
	0x03E40FF4 TBZ X0, 0x0, 0x3E41078
	0x03E40FF8 LDR X0, [X22]
	0x03E40FFC LDR W8, [X0 + 0xE0]
	0x03E41000 CBNZ W8, 0x3E41008
	0x03E41004 BL 0x1C16DFC
	0x03E41008 MOV X0, X31
	0x03E4100C BL 0x3E4FF90
	0x03E41010 CBZ X0, 0x3E4109C
	0x03E41014 LDR X20, [X0 + 0x40]
	0x03E41018 MOV X0, X19
	0x03E4101C MOV X1, X31
	0x03E41020 BL 0x3C32ECC
	0x03E41024 LDR X8, [X21]
	0x03E41028 MOV X21, X0
	0x03E4102C LDR W9, [X8 + 0xE0]
	0x03E41030 CBNZ W9, 0x3E4103C
	0x03E41034 MOV X0, X8
	0x03E41038 BL 0x1C16DFC
	0x03E4103C MOV X0, X20
	0x03E41040 MOV X1, X21
	0x03E41044 MOV X2, X31
	0x03E41048 BL 0x3C3883C
	0x03E4104C TBZ X0, 0x0, 0x3E41078
	0x03E41050 LDR X0, [X22]
	0x03E41054 LDR W8, [X0 + 0xE0]
	0x03E41058 CBNZ W8, 0x3E41060
	0x03E4105C BL 0x1C16DFC
	0x03E41060 MOV X0, X31
	0x03E41064 BL 0x3E4FF90
	0x03E41068 CBZ X0, 0x3E4109C
	0x03E4106C MOV X1, X31
	0x03E41070 MOV X2, X31
	0x03E41074 BL 0x3E4BE8C
	0x03E41078 MOV X0, X19
	0x03E4107C LDP X20, X19, [X31 + 0x20]
	0x03E41080 LDP X22, X21, [X31 + 0x10]
	0x03E41084 LDR X30, [X31], #0x30
	0x03E41088 B 0x3E40C20
	0x03E4108C LDP X20, X19, [X31 + 0x20]
	0x03E41090 LDP X22, X21, [X31 + 0x10]
	0x03E41094 LDR X30, [X31], #0x30
	0x03E41098 RET
	0x03E4109C BL 0x1C16F20
	0x03E410A0 LDRB W0, [X0 + 0xF0]
	0x03E410A4 RET
	0x03E410A8 AND W8, W1, 0x1
	0x03E410AC STRB W8, [X0 + 0xF0]
	0x03E410B0 RET
	0x03E410B4 LDRB W0, [X0 + 0xF1]
	0x03E410B8 RET
	0x03E410BC AND W8, W1, 0x1
	0x03E410C0 STRB W8, [X0 + 0xF1]
	0x03E410C4 RET
	0x03E410C8 LDRB W0, [X0 + 0xF2]
	0x03E410CC RET
	0x03E410D0 AND W8, W1, 0x1
	0x03E410D4 STRB W8, [X0 + 0xF2]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], D12
	003 Move [X31+48], D11
	004 Move [X31+56], D10
	005 Move [X31+64], D9
	006 Move [X31+72], D8
	007 Move [X31+80], X30
	008 Move [X31+88], X23
	009 Move [X31+96], X22
	010 Move [X31+104], X21
	011 Move [X31+112], X20
	012 Move [X31+120], X19
	013 Move X20, 0x5A9000
	014 Move W8, [X20+1971]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2B7000
	021 Move X0, [X0+2336]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1971], W8
	025 Add X20, X19, 288
	026 Move X0, X20
	027 Move X1, X31
	028 Call DrivenRectTransformTracker.Clear, X0
	029 Move X0, X19
	030 Call ScrollRect.UpdateCachedData, X0
	031 Move W8, [X19+253]
	032 Compare W8, 0
	033 JumpIfNotEqual {37}
	034 Move W8, [X19+254]
	035 Compare W8, 0
	036 JumpIfEqual {248}
	037 Move X0, X19
	038 Call ScrollRect.get_viewRect, X0
	039 Move X2, X0
	040 Move W3, 0x3F06
	041 Move X0, X20
	042 Move X1, X19
	043 Move X4, X31
	044 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	045 Move X0, X19
	046 Call ScrollRect.get_viewRect, X0
	047 Move X21, 0x59A000
	048 Move W8, [X21+1935]
	049 Move X20, X0
	050 Compare W8, 0
	051 JumpIfNotEqual {57}
	052 Move X0, 0x2BC000
	053 Move X0, [X0+3848]
	054 Call 0x1C17CF4
	055 Move W8, 1
	056 Move [X21+1935], W8
	057 Compare X20, 0
	058 JumpIfEqual {378}
	059 Move X22, 0x2BC000
	060 Move X22, [X22+3848]
	061 Move X0, X20
	062 Move X1, X31
	063 Move X8, [X22]
	064 Move X8, [X8+184]
	065 Move S0, [X8]
	066 Move S1, [X8+4]
	067 Call RectTransform.set_anchorMin, X0, X1
	068 Move X0, X19
	069 Call ScrollRect.get_viewRect, X0
	070 Move X23, 0x5A2000
	071 Move W8, [X23+2632]
	072 Move X20, X0
	073 Compare W8, 0
	074 JumpIfNotEqual {80}
	075 Move X0, 0x2BC000
	076 Move X0, [X0+3848]
	077 Call 0x1C17CF4
	078 Move W8, 1
	079 Move [X23+2632], W8
	080 Compare X20, 0
	081 JumpIfEqual {378}
	082 Move X8, [X22]
	083 Move X0, X20
	084 Move X1, X31
	085 Move X8, [X8+184]
	086 Move S0, [X8+8]
	087 Move S1, [X8+12]
	088 Call RectTransform.set_anchorMax, X0, X1
	089 Move X0, X19
	090 Call ScrollRect.get_viewRect, X0
	091 Move W8, [X21+1935]
	092 Move X20, X0
	093 Compare W8, 0
	094 JumpIfNotEqual {100}
	095 Move X0, 0x2BC000
	096 Move X0, [X0+3848]
	097 Call 0x1C17CF4
	098 Move W8, 1
	099 Move [X21+1935], W8
	100 Compare X20, 0
	101 JumpIfEqual {378}
	102 Move X8, [X22]
	103 Move X0, X20
	104 Move X1, X31
	105 Move X8, [X8+184]
	106 Move S0, [X8]
	107 Move S1, [X8+4]
	108 Call RectTransform.set_sizeDelta, X0, X1
	109 Move X0, X19
	110 Call ScrollRect.get_viewRect, X0
	111 Move W8, [X21+1935]
	112 Move X20, X0
	113 Compare W8, 0
	114 JumpIfNotEqual {120}
	115 Move X0, 0x2BC000
	116 Move X0, [X0+3848]
	117 Call 0x1C17CF4
	118 Move W8, 1
	119 Move [X21+1935], W8
	120 Compare X20, 0
	121 JumpIfEqual {378}
	122 Move X8, [X22]
	123 Move X21, 0x2B7000
	124 Move X0, X20
	125 Move X1, X31
	126 Move X8, [X8+184]
	127 Move S0, [X8]
	128 Move S1, [X8+4]
	129 Move X21, [X21+2336]
	130 Call RectTransform.set_anchoredPosition, X0, X1
	131 Move X0, [X21]
	132 Move X20, [X19+32]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move X0, X20
	138 Move X1, X31
	139 Call LayoutRebuilder.ForceRebuildLayoutImmediate, X0
	140 Move X0, X19
	141 Call ScrollRect.get_viewRect, X0
	142 Compare X0, 0
	143 JumpIfEqual {378}
	144 Move X1, X31
	145 Call RectTransform.get_rect, X0
	146 Move X0, X19
	147 Move V8, V0
	148 Move V9, V1
	149 Move V10, V2
	150 Move V11, V3
	151 Call ScrollRect.get_viewRect, X0
	152 Compare X0, 0
	153 JumpIfEqual {378}
	154 Move S12, 0.5
	155 Multiply S0, S11, S12
	156 Multiply S1, S10, S12
	157 Move X1, X31
	158 Add S9, S9, S0
	159 Add S8, S8, S1
	160 Call RectTransform.get_rect, X0
	161 Multiply S0, S2, S12
	162 Multiply S1, S3, S12
	163 Add X8, X31, 8
	164 Move X0, X19
	165 Move [X19+160], S8
	166 Move [X19+168], S9
	167 Move [X19+168], W31
	168 Move [X19+172], S0
	169 Move [X19+180], S1
	170 Move [X19+180], W31
	171 Call ScrollRect.GetBounds, X0
	172 NotImplemented "Instruction LDUR not yet implemented."
	173 Move X8, [X31+24]
	174 Move W9, [X19+254]
	175 Move [X19+136], V0
	176 Move [X19+152], X8
	177 Compare W9, 0
	178 JumpIfEqual {248}
	179 Move X0, X19
	180 Call ScrollRect.get_vScrollingNeeded, X0
	181 Move TEMP, X0
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfNotEqual {248}
	185 Move X0, X19
	186 Call ScrollRect.get_viewRect, X0
	187 Move V8, [X19+260]
	188 Move V9, [X19+100]
	189 Move X20, X0
	190 Move X0, X19
	191 Call ScrollRect.get_viewRect, X0
	192 Compare X0, 0
	193 JumpIfEqual {378}
	194 Move X1, X31
	195 Call RectTransform.get_sizeDelta, X0
	196 Compare X20, 0
	197 JumpIfEqual {378}
	198 Add S0, S8, S9
	199 NotImplemented "Instruction FNEG not yet implemented."
	200 Move X0, X20
	201 Move X1, X31
	202 Call RectTransform.set_sizeDelta, X0, X1
	203 Move X0, [X21]
	204 Move X20, [X19+32]
	205 Move W8, [X0+224]
	206 Compare W8, 0
	207 JumpIfNotEqual {209}
	208 Call 0x1C17DFC
	209 Move X0, X20
	210 Move X1, X31
	211 Call LayoutRebuilder.ForceRebuildLayoutImmediate, X0
	212 Move X0, X19
	213 Call ScrollRect.get_viewRect, X0
	214 Compare X0, 0
	215 JumpIfEqual {378}
	216 Move X1, X31
	217 Call RectTransform.get_rect, X0
	218 Move X0, X19
	219 Move V8, V0
	220 Move V9, V1
	221 Move V10, V2
	222 Move V11, V3
	223 Call ScrollRect.get_viewRect, X0
	224 Compare X0, 0
	225 JumpIfEqual {378}
	226 Move S12, 0.5
	227 Multiply S0, S11, S12
	228 Multiply S1, S10, S12
	229 Move X1, X31
	230 Add S9, S9, S0
	231 Add S8, S8, S1
	232 Call RectTransform.get_rect, X0
	233 Multiply S0, S2, S12
	234 Multiply S1, S3, S12
	235 Add X8, X31, 8
	236 Move X0, X19
	237 Move [X19+160], S8
	238 Move [X19+168], S9
	239 Move [X19+168], W31
	240 Move [X19+172], S0
	241 Move [X19+180], S1
	242 Move [X19+180], W31
	243 Call ScrollRect.GetBounds, X0
	244 Move X8, [X31+24]
	245 NotImplemented "Instruction LDUR not yet implemented."
	246 Move [X19+152], X8
	247 Move [X19+136], V0
	248 Move W8, [X19+253]
	249 Compare W8, 0
	250 JumpIfEqual {311}
	251 Move X0, X19
	252 Call ScrollRect.get_hScrollingNeeded, X0
	253 Move TEMP, X0
	254 And TEMP, TEMP, 1
	255 Compare TEMP, 1
	256 JumpIfNotEqual {311}
	257 Move X0, X19
	258 Call ScrollRect.get_viewRect, X0
	259 Move X20, X0
	260 Move X0, X19
	261 Call ScrollRect.get_viewRect, X0
	262 Compare X0, 0
	263 JumpIfEqual {378}
	264 Move X1, X31
	265 Call RectTransform.get_sizeDelta, X0
	266 Compare X20, 0
	267 JumpIfEqual {378}
	268 Move V1, [X19+256]
	269 Move V2, [X19+96]
	270 Move X0, X20
	271 Move X1, X31
	272 Add S1, S1, S2
	273 NotImplemented "Instruction FNEG not yet implemented."
	274 Call RectTransform.set_sizeDelta, X0, X1
	275 Move X0, X19
	276 Call ScrollRect.get_viewRect, X0
	277 Compare X0, 0
	278 JumpIfEqual {378}
	279 Move X1, X31
	280 Call RectTransform.get_rect, X0
	281 Move X0, X19
	282 Move V8, V0
	283 Move V9, V1
	284 Move V10, V2
	285 Move V11, V3
	286 Call ScrollRect.get_viewRect, X0
	287 Compare X0, 0
	288 JumpIfEqual {378}
	289 Move S12, 0.5
	290 Multiply S0, S11, S12
	291 Multiply S1, S10, S12
	292 Move X1, X31
	293 Add S9, S9, S0
	294 Add S8, S8, S1
	295 Call RectTransform.get_rect, X0
	296 Multiply S0, S2, S12
	297 Multiply S1, S3, S12
	298 Add X8, X31, 8
	299 Move X0, X19
	300 Move [X19+160], S8
	301 Move [X19+168], S9
	302 Move [X19+168], W31
	303 Move [X19+172], S0
	304 Move [X19+180], S1
	305 Move [X19+180], W31
	306 Call ScrollRect.GetBounds, X0
	307 Move X8, [X31+24]
	308 NotImplemented "Instruction LDUR not yet implemented."
	309 Move [X19+152], X8
	310 Move [X19+136], V0
	311 Move W8, [X19+254]
	312 Compare W8, 0
	313 JumpIfEqual {365}
	314 Move X0, X19
	315 Call ScrollRect.get_vScrollingNeeded, X0
	316 Move TEMP, X0
	317 And TEMP, TEMP, 1
	318 Compare TEMP, 1
	319 JumpIfNotEqual {365}
	320 Move X0, X19
	321 Call ScrollRect.get_viewRect, X0
	322 Compare X0, 0
	323 JumpIfEqual {378}
	324 Move X1, X31
	325 Call RectTransform.get_sizeDelta, X0
	326 NotImplemented "Instruction FCMP not yet implemented."
	327 Move X0, X19
	328 Call ScrollRect.get_viewRect, X0
	329 Compare X0, 0
	330 JumpIfEqual {378}
	331 Move X1, X31
	332 Call RectTransform.get_sizeDelta, X0
	333 NotImplemented "Instruction FCMP not yet implemented."
	334 Move X0, X19
	335 Call ScrollRect.get_viewRect, X0
	336 Move V8, [X19+260]
	337 Move V9, [X19+100]
	338 Move X20, X0
	339 Move X0, X19
	340 Call ScrollRect.get_viewRect, X0
	341 Compare X0, 0
	342 JumpIfEqual {378}
	343 Move X1, X31
	344 Call RectTransform.get_sizeDelta, X0
	345 Compare X20, 0
	346 JumpIfEqual {378}
	347 Add S0, S8, S9
	348 Move X0, X20
	349 Move X20, [X31+112]
	350 Move X19, [X31+120]
	351 Move X22, [X31+96]
	352 Move X21, [X31+104]
	353 Move X30, [X31+80]
	354 Move X23, [X31+88]
	355 Move D9, [X31+64]
	356 Move D8, [X31+72]
	357 Move D11, [X31+48]
	358 Move D10, [X31+56]
	359 Move V12, [X31+32]
	360 NotImplemented "Instruction FNEG not yet implemented."
	361 Move X1, X31
	362 Add X31, X31, 128
	363 Call RectTransform.set_sizeDelta, X0, X1
	364 Return 
	365 Move X20, [X31+112]
	366 Move X19, [X31+120]
	367 Move X22, [X31+96]
	368 Move X21, [X31+104]
	369 Move X30, [X31+80]
	370 Move X23, [X31+88]
	371 Move D9, [X31+64]
	372 Move D8, [X31+72]
	373 Move D11, [X31+48]
	374 Move D10, [X31+56]
	375 Move V12, [X31+32]
	376 Add X31, X31, 128
	377 Return 
	378 Call 0x1C17F20

Method: System.Void SetLayoutVertical()

Disassembly:
	0x03E411CC LDR X0, [X0 + 0x1F8]
	0x03E411D0 BL 0x1C16CF4
	0x03E411D4 ADRP X0, 0x2B2000
	0x03E411D8 LDR X0, [X0 + 0x598]
	0x03E411DC BL 0x1C16CF4
	0x03E411E0 MOVZ W8, 0x1
	0x03E411E4 STRB W8, [X21 + 0x7C9]
	0x03E411E8 LDR X0, [X20]
	0x03E411EC LDR X20, [X19 + 0xE0]
	0x03E411F0 LDR W8, [X0 + 0xE0]
	0x03E411F4 CBNZ W8, 0x3E411FC
	0x03E411F8 BL 0x1C16DFC
	0x03E411FC MOV X0, X20
	0x03E41200 MOV X1, X31
	0x03E41204 MOV X2, X31
	0x03E41208 BL 0x3C3883C
	0x03E4120C TBZ X0, 0x0, 0x3E41228
	0x03E41210 ADRP X8, 0x32A000
	0x03E41214 LDR X8, [X8 + 0x1F8]
	0x03E41218 MOV X0, X19
	0x03E4121C LDR X1, [X8]
	0x03E41220 BL 0x21A3894
	0x03E41224 STR X0, [X19 + 0xE0]
	0x03E41228 LDP X20, X19, [X31 + 0x10]
	0x03E4122C LDP X30, X21, [X31], #0x20
	0x03E41230 RET
	0x03E41234 STP X30, X19, [X31 - 0x10]!
	0x03E41238 MOV X19, X0
	0x03E4123C BL 0x3E41268
	0x03E41240 LDRB W9, [X19 + 0xE8]
	0x03E41244 AND W8, W0, 0x1
	0x03E41248 CMP W9, W8
	0x03E4124C B.NE 0x3E41258
	0x03E41250 LDP X30, X19, [X31], #0x10
	0x03E41254 RET
	0x03E41258 STRB W8, [X19 + 0xE8]
	0x03E4125C MOV X0, X19
	0x03E41260 LDP X30, X19, [X31], #0x10
	0x03E41264 B 0x3E40C20
	0x03E41268 STR X30, [X31 - 0x40]!
	0x03E4126C STP X24, X23, [X31 + 0x10]
	0x03E41270 STP X22, X21, [X31 + 0x20]
	0x03E41274 STP X20, X19, [X31 + 0x30]
	0x03E41278 ADRP X20, 0x5A7000
	0x03E4127C LDRB W8, [X20 + 0x7CA]
	0x03E41280 MOV X19, X0

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], D12
	003 Move [X31+48], D11
	004 Move [X31+56], D10
	005 Move [X31+64], D9
	006 Move [X31+72], D8
	007 Move [X31+80], X30
	008 Move [X31+88], X19
	009 Move X19, X0
	010 Call ScrollRect.UpdateScrollbarLayout, X0
	011 Move X0, X19
	012 Call ScrollRect.get_viewRect, X0
	013 Compare X0, 0
	014 JumpIfEqual {56}
	015 Move X1, X31
	016 Call RectTransform.get_rect, X0
	017 Move X0, X19
	018 Move V8, V0
	019 Move V9, V1
	020 Move V10, V2
	021 Move V11, V3
	022 Call ScrollRect.get_viewRect, X0
	023 Compare X0, 0
	024 JumpIfEqual {56}
	025 Move S12, 0.5
	026 Multiply S0, S11, S12
	027 Multiply S1, S10, S12
	028 Move X1, X31
	029 Add S9, S9, S0
	030 Add S8, S8, S1
	031 Call RectTransform.get_rect, X0
	032 Multiply S0, S2, S12
	033 Multiply S1, S3, S12
	034 Add X8, X31, 8
	035 Move X0, X19
	036 Move [X19+160], S8
	037 Move [X19+168], S9
	038 Move [X19+168], W31
	039 Move [X19+172], S0
	040 Move [X19+180], S1
	041 Move [X19+180], W31
	042 Call ScrollRect.GetBounds, X0
	043 Move X8, [X31+24]
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 Move D9, [X31+64]
	046 Move D8, [X31+72]
	047 Move D11, [X31+48]
	048 Move D10, [X31+56]
	049 Move [X19+152], X8
	050 Move [X19+136], V0
	051 Move X30, [X31+80]
	052 Move X19, [X31+88]
	053 Move V12, [X31+32]
	054 Add X31, X31, 96
	055 Return 
	056 Call 0x1C17F20

Method: System.Void UpdateScrollbarVisibility()

Disassembly:
	0x03E40530 MOV X0, X19
	0x03E40534 MOV X1, X31
	0x03E40538 BL 0x3C38948
	0x03E4053C TBZ X0, 0x0, 0x3E405C4
	0x03E40540 CBZ X19, 0x3E405D8
	0x03E40544 MOV X0, X19
	0x03E40548 MOV X1, X31
	0x03E4054C BL 0x3C32ECC
	0x03E40550 CBZ X0, 0x3E405D8
	0x03E40554 MOV X1, X31
	0x03E40558 BL 0x3C357F8
	0x03E4055C CBZ W22, 0x3E40588
	0x03E40560 AND W8, W21, 0x1
	0x03E40564 AND W9, W0, 0x1
	0x03E40568 CMP W9, W8
	0x03E4056C B.EQ 0x3E405C4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call ScrollRect.get_vScrollingNeeded, X0
	005 Move W1, [X19+41]
	006 Move W2, [X19+92]
	007 Move X3, [X19+80]
	008 And W0, W0, 1
	009 Call ScrollRect.UpdateOneScrollbarVisibility, X0, X1, X2, X3
	010 Move X0, X19
	011 Call ScrollRect.get_hScrollingNeeded, X0
	012 Move W1, [X19+40]
	013 Move W2, [X19+88]
	014 Move X3, [X19+72]
	015 And W0, W0, 1
	016 Move X30, [X31+16]
	017 Move X19, [X31+24]
	018 Call ScrollRect.UpdateOneScrollbarVisibility, X0, X1, X2, X3
	019 Return 

Method: System.Void UpdateOneScrollbarVisibility(System.Boolean xScrollingNeeded, System.Boolean xAxisEnabled, UnityEngine.UI.ScrollRect/ScrollbarVisibility scrollbarVisibility, UnityEngine.UI.Scrollbar scrollbar)

Disassembly:
	0x03E414D8 STP X30, X19, [X31 - 0x10]!
	0x03E414DC LDR X8, [X0]
	0x03E414E0 MOV X19, X0
	0x03E414E4 LDP X9, X1, [X8 + 0x1C8]
	0x03E414E8 BLR X9
	0x03E414EC TBZ X0, 0x0, 0x3E41518
	0x03E414F0 LDR X8, [X19]
	0x03E414F4 MOV X0, X19
	0x03E414F8 LDR X9, [X8 + 0x2B8]
	0x03E414FC LDR X1, [X8 + 0x2C0]
	0x03E41500 BLR X9
	0x03E41504 TBZ X0, 0x0, 0x3E41518
	0x03E41508 LDRB W8, [X19 + 0xF1]
	0x03E4150C CMP W8, 0x0
	0x03E41510 CSET W0, NE
	0x03E41514 B 0x3E4151C
	0x03E41518 MOV W0, W31
	0x03E4151C LDP X30, X19, [X31], #0x10
	0x03E41520 RET
	0x03E41524 STR X30, [X31 - 0x10]!
	0x03E41528 LDR X8, [X0 + 0xD0]
	0x03E4152C CBZ X8, 0x3E41590
	0x03E41530 LDR W9, [X0 + 0x50]
	0x03E41534 LDR X1, [X8 + 0x10]
	0x03E41538 STRH W31, [X0 + 0xF0]
	0x03E4153C STRB W31, [X0 + 0xF2]
	0x03E41540 CMP W9, 0x3
	0x03E41544 B.EQ 0x3E41580
	0x03E41548 CMP W9, 0x2
	0x03E4154C B.EQ 0x3E41574
	0x03E41550 CMP W9, 0x1
	0x03E41554 B.NE 0x3E41588
	0x03E41558 FMOV S0, 1
	0x03E4155C FMOV S1, 1
	0x03E41560 FMOV S2, 1
	0x03E41564 FMOV S3, 1
	0x03E41568 MOVZ W1, 0x1
	0x03E4156C LDR X30, [X31], #0x10
	0x03E41570 B 0x3E41594
	0x03E41574 MOV X1, X31
	0x03E41578 LDR X30, [X31], #0x10
	0x03E4157C B 0x3E416A4
	0x03E41580 LDR X30, [X31], #0x10
	0x03E41584 B 0x3E4174C
	0x03E41588 LDR X30, [X31], #0x10
	0x03E4158C RET
	0x03E41590 BL 0x1C16F20
	0x03E41594 STP D11, D10, [X31 - 0x50]!
	0x03E41598 STP D9, D8, [X31 + 0x10]
	0x03E4159C STR X30, [X31 + 0x20]
	0x03E415A0 STP X22, X21, [X31 + 0x30]
	0x03E415A4 STP X20, X19, [X31 + 0x40]
	0x03E415A8 ADRP X22, 0x5A7000
	0x03E415AC ADRP X21, 0x2B2000
	0x03E415B0 LDRB W8, [X22 + 0x7D1]
	0x03E415B4 LDR X21, [X21 + 0x598]
	0x03E415B8 MOV W20, W1
	0x03E415BC MOV V8.16B, V3.16B
	0x03E415C0 MOV V9.16B, V2.16B
	0x03E415C4 MOV V10.16B, V1.16B
	0x03E415C8 MOV V11.16B, V0.16B
	0x03E415CC MOV X19, X0
	0x03E415D0 TBNZ X8, 0x0, 0x3E415F4
	0x03E415D4 ADRP X0, 0x2DA000
	0x03E415D8 LDR X0, [X0 + 0x5E8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x5A8000
	009 Move X24, 0x2B3000
	010 Move W8, [X23+1972]
	011 Move X24, [X24+1432]
	012 Move X19, X3
	013 Move W22, W2
	014 Move W20, W1
	015 Move W21, W0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x2B3000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X23+1972], W8
	025 Move X0, [X24]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X19
	031 Move X1, X31
	032 Call Object.op_Implicit, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {76}
	037 Compare X19, 0
	038 JumpIfEqual {84}
	039 Move X0, X19
	040 Move X1, X31
	041 Call Component.get_gameObject, X0
	042 Compare X0, 0
	043 JumpIfEqual {84}
	044 Move X1, X31
	045 Call GameObject.get_activeSelf, X0
	046 Compare W22, 0
	047 JumpIfEqual {57}
	048 And W8, W21, 1
	049 And W9, W0, 1
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X0, X19
	052 Move X1, X31
	053 Call Component.get_gameObject, X0
	054 Compare X0, 0
	055 JumpIfEqual {84}
	056 And W1, W21, 1
	057 And W8, W20, 1
	058 And W9, W0, 1
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, X19
	061 Move X1, X31
	062 Call Component.get_gameObject, X0
	063 Compare X0, 0
	064 JumpIfEqual {84}
	065 And W1, W20, 1
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X24, [X31+16]
	071 Move X23, [X31+24]
	072 Move X2, X31
	073 Move X30, [X31+64]
	074 Call GameObject.SetActive, X0, X1
	075 Return 
	076 Move X20, [X31+48]
	077 Move X19, [X31+56]
	078 Move X22, [X31+32]
	079 Move X21, [X31+40]
	080 Move X24, [X31+16]
	081 Move X23, [X31+24]
	082 Move X30, [X31+64]
	083 Return 
	084 Call 0x1C17F20

Method: System.Void UpdateScrollbarLayout()

Disassembly:
	0x03E41284 TBNZ X8, 0x0, 0x3E412C0
	0x03E41288 ADRP X0, 0x32A000
	0x03E4128C LDR X0, [X0 + 0x3E0]
	0x03E41290 BL 0x1C16CF4
	0x03E41294 ADRP X0, 0x32A000
	0x03E41298 LDR X0, [X0 + 0x3E8]
	0x03E4129C BL 0x1C16CF4
	0x03E412A0 ADRP X0, 0x32A000
	0x03E412A4 LDR X0, [X0 + 0x3F0]
	0x03E412A8 BL 0x1C16CF4
	0x03E412AC ADRP X0, 0x2B2000
	0x03E412B0 LDR X0, [X0 + 0x598]
	0x03E412B4 BL 0x1C16CF4
	0x03E412B8 MOVZ W8, 0x1
	0x03E412BC STRB W8, [X20 + 0x7CA]
	0x03E412C0 ADRP X22, 0x2B2000
	0x03E412C4 ADRP X23, 0x32A000
	0x03E412C8 ADRP X24, 0x32A000
	0x03E412CC LDR X22, [X22 + 0x598]
	0x03E412D0 LDR X23, [X23 + 0x3E0]
	0x03E412D4 LDR X24, [X24 + 0x3F0]
	0x03E412D8 MOV X0, X19
	0x03E412DC MOV X1, X31
	0x03E412E0 BL 0x3C32E90
	0x03E412E4 MOV X20, X0
	0x03E412E8 LDR X0, [X22]
	0x03E412EC LDR W8, [X0 + 0xE0]
	0x03E412F0 CBNZ W8, 0x3E412F8
	0x03E412F4 BL 0x1C16DFC
	0x03E412F8 MOV X0, X20
	0x03E412FC MOV X1, X31
	0x03E41300 MOV X2, X31
	0x03E41304 BL 0x3C354F8
	0x03E41308 TBZ X0, 0x0, 0x3E413BC
	0x03E4130C CBZ X20, 0x3E413DC
	0x03E41310 LDR X1, [X19 + 0xF8]
	0x03E41314 LDR X2, [X23]
	0x03E41318 MOV X0, X20
	0x03E4131C BL 0x21A443C
	0x03E41320 LDR X0, [X19 + 0xF8]
	0x03E41324 CBZ X0, 0x3E413DC
	0x03E41328 MOV W21, W31
	0x03E4132C LDR W8, [X0 + 0x18]
	0x03E41330 CMP W21, W8
	0x03E41334 B.GE 0x3E413AC
	0x03E41338 LDR X2, [X24]
	0x03E4133C MOV W1, W21
	0x03E41340 BL 0x301BCCC
	0x03E41344 CBZ X0, 0x3E413DC
	0x03E41348 MOV X1, X31
	0x03E4134C BL 0x3C323D4
	0x03E41350 TBZ X0, 0x0, 0x3E41378
	0x03E41354 LDR X0, [X19 + 0xF8]
	0x03E41358 CBZ X0, 0x3E413DC
	0x03E4135C LDR X2, [X24]
	0x03E41360 MOV W1, W21
	0x03E41364 BL 0x301BCCC
	0x03E41368 CBZ X0, 0x3E413DC
	0x03E4136C MOV X1, X31
	0x03E41370 BL 0x3E222F4
	0x03E41374 TBZ X0, 0x0, 0x3E413C4
	0x03E41378 LDR X0, [X19 + 0xF8]
	0x03E4137C CBZ X0, 0x3E413DC
	0x03E41380 LDR X2, [X24]
	0x03E41384 MOV W1, W21
	0x03E41388 BL 0x301BCCC
	0x03E4138C CBZ X0, 0x3E413DC
	0x03E41390 MOV X1, X31
	0x03E41394 BL 0x3E2236C
	0x03E41398 TBNZ X0, 0x0, 0x3E413BC
	0x03E4139C LDR X0, [X19 + 0xF8]
	0x03E413A0 ADD W21, W21, 0x1
	0x03E413A4 CBNZ X0, 0x3E4132C
	0x03E413A8 B 0x3E413DC
	0x03E413AC MOV X0, X20
	0x03E413B0 MOV X1, X31
	0x03E413B4 BL 0x3C3F49C
	0x03E413B8 B 0x3E412E4
	0x03E413BC MOVZ W0, 0x1
	0x03E413C0 B 0x3E413C8
	0x03E413C4 MOV W0, W31
	0x03E413C8 LDP X20, X19, [X31 + 0x30]
	0x03E413CC LDP X22, X21, [X31 + 0x20]
	0x03E413D0 LDP X24, X23, [X31 + 0x10]
	0x03E413D4 LDR X30, [X31], #0x40
	0x03E413D8 RET
	0x03E413DC BL 0x1C16F20
	0x03E413E0 LDRB W8, [X0 + 0xE8]
	0x03E413E4 CBZ W8, 0x3E413F8
	0x03E413E8 LDRB W8, [X0 + 0xD8]
	0x03E413EC CMP W8, 0x0
	0x03E413F0 CSET W0, NE
	0x03E413F4 RET
	0x03E413F8 MOV W0, W31
	0x03E413FC RET
	0x03E41400 B 0x3E40C20
	0x03E41404 STP X30, X19, [X31 - 0x10]!
	0x03E41408 LDR X8, [X0]
	0x03E4140C MOV X19, X0
	0x03E41410 LDR X9, [X8 + 0x2B8]
	0x03E41414 LDR X1, [X8 + 0x2C0]
	0x03E41418 BLR X9
	0x03E4141C TBZ X0, 0x0, 0x3E41430
	0x03E41420 LDRB W8, [X19 + 0xF1]
	0x03E41424 CBZ W8, 0x3E4143C
	0x03E41428 MOVZ W0, 0x2
	0x03E4142C B 0x3E41434
	0x03E41430 MOVZ W0, 0x4
	0x03E41434 LDP X30, X19, [X31], #0x10
	0x03E41438 RET
	0x03E4143C LDRB W8, [X19 + 0xF2]
	0x03E41440 CBZ W8, 0x3E4144C
	0x03E41444 MOVZ W0, 0x3
	0x03E41448 B 0x3E41434
	0x03E4144C LDRB W0, [X19 + 0xF0]
	0x03E41450 B 0x3E41434
	0x03E41454 STP X30, X19, [X31 - 0x10]!
	0x03E41458 MOV X1, X31
	0x03E4145C MOV X19, X0
	0x03E41460 BL 0x3E59AD8
	0x03E41464 LDR X8, [X19]
	0x03E41468 MOV X0, X19
	0x03E4146C LDR X2, [X8 + 0x218]
	0x03E41470 LDR X1, [X8 + 0x220]
	0x03E41474 LDP X30, X19, [X31], #0x10
	0x03E41478 BR X2
	0x03E4147C STP X30, X19, [X31 - 0x10]!
	0x03E41480 TBNZ X1, 0x0, 0x3E414D0
	0x03E41484 LDR X8, [X0]
	0x03E41488 MOV X19, X0
	0x03E4148C LDP X9, X1, [X8 + 0x1C8]
	0x03E41490 BLR X9
	0x03E41494 TBZ X0, 0x0, 0x3E414D0
	0x03E41498 LDR X8, [X19]
	0x03E4149C MOV X0, X19
	0x03E414A0 LDR X9, [X8 + 0x2B8]
	0x03E414A4 LDR X1, [X8 + 0x2C0]
	0x03E414A8 BLR X9
	0x03E414AC TBZ X0, 0x0, 0x3E414D0
	0x03E414B0 LDRB W8, [X19 + 0xF1]
	0x03E414B4 CBZ W8, 0x3E414D0
	0x03E414B8 LDR X8, [X19]
	0x03E414BC MOV X0, X19
	0x03E414C0 LDR X2, [X8 + 0x2C8]
	0x03E414C4 LDR X1, [X8 + 0x2D0]
	0x03E414C8 LDP X30, X19, [X31], #0x10
	0x03E414CC BR X2
	0x03E414D0 LDP X30, X19, [X31], #0x10
	0x03E414D4 RET

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x5A8000
	008 Move W8, [X20+1973]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2B3000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1973], W8
	019 Move X21, 0x2B3000
	020 Move W8, [X19+254]
	021 Move X21, [X21+1432]
	022 Compare W8, 0
	023 JumpIfEqual {98}
	024 Move X0, [X21]
	025 Move X20, [X19+72]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Call Object.op_Implicit, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {98}
	037 Move X2, [X19+272]
	038 Add X0, X19, 288
	039 Move W3, 0x1502
	040 Move X1, X19
	041 Move X4, X31
	042 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	043 Move X20, [X19+272]
	044 Compare X20, 0
	045 JumpIfEqual {185}
	046 Move X0, X20
	047 Move X1, X31
	048 Call RectTransform.get_anchorMin, X0
	049 Move S0, W31
	050 Move X0, X20
	051 Move X1, X31
	052 Call RectTransform.set_anchorMin, X0, X1
	053 Move X20, [X19+272]
	054 Compare X20, 0
	055 JumpIfEqual {185}
	056 Move X0, X20
	057 Move X1, X31
	058 Call RectTransform.get_anchorMax, X0
	059 Move S0, 1
	060 Move X0, X20
	061 Move X1, X31
	062 Call RectTransform.set_anchorMax, X0, X1
	063 Move X20, [X19+272]
	064 Compare X20, 0
	065 JumpIfEqual {185}
	066 Move X0, X20
	067 Move X1, X31
	068 Call RectTransform.get_anchoredPosition, X0
	069 Move S0, W31
	070 Move X0, X20
	071 Move X1, X31
	072 Call RectTransform.set_anchoredPosition, X0, X1
	073 Move X0, X19
	074 Call ScrollRect.get_vScrollingNeeded, X0
	075 Move X20, [X19+272]
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {89}
	080 Compare X20, 0
	081 JumpIfEqual {185}
	082 Move V8, [X19+100]
	083 Move V9, [X19+260]
	084 Move X0, X20
	085 Move X1, X31
	086 Call RectTransform.get_sizeDelta, X0
	087 Add S0, S8, S9
	088 NotImplemented "Instruction FNEG not yet implemented."
	089 Compare X20, 0
	090 JumpIfEqual {185}
	091 Move X0, X20
	092 Move X1, X31
	093 Call RectTransform.get_sizeDelta, X0
	094 Move S0, W31
	095 Move X0, X20
	096 Move X1, X31
	097 Call RectTransform.set_sizeDelta, X0, X1
	098 Move W8, [X19+253]
	099 Compare W8, 0
	100 JumpIfEqual {167}
	101 Move X0, [X21]
	102 Move X20, [X19+80]
	103 Move W8, [X0+224]
	104 Compare W8, 0
	105 JumpIfNotEqual {107}
	106 Call 0x1C17DFC
	107 Move X0, X20
	108 Move X1, X31
	109 Call Object.op_Implicit, X0
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {167}
	114 Move X2, [X19+280]
	115 Add X0, X19, 288
	116 Move W3, 0x2A04
	117 Move X1, X19
	118 Move X4, X31
	119 Call DrivenRectTransformTracker.Add, X0, X1, X2, X3
	120 Move X20, [X19+280]
	121 Compare X20, 0
	122 JumpIfEqual {185}
	123 Move X0, X20
	124 Move X1, X31
	125 Call RectTransform.get_anchorMin, X0
	126 Move S1, W31
	127 Move X0, X20
	128 Move X1, X31
	129 Call RectTransform.set_anchorMin, X0, X1
	130 Move X20, [X19+280]
	131 Compare X20, 0
	132 JumpIfEqual {185}
	133 Move X0, X20
	134 Move X1, X31
	135 Call RectTransform.get_anchorMax, X0
	136 Move S1, 1
	137 Move X0, X20
	138 Move X1, X31
	139 Call RectTransform.set_anchorMax, X0, X1
	140 Move X20, [X19+280]
	141 Compare X20, 0
	142 JumpIfEqual {185}
	143 Move X0, X20
	144 Move X1, X31
	145 Call RectTransform.get_anchoredPosition, X0
	146 Move S1, W31
	147 Move X0, X20
	148 Move X1, X31
	149 Call RectTransform.set_anchoredPosition, X0, X1
	150 Move X0, X19
	151 Call ScrollRect.get_hScrollingNeeded, X0
	152 Move X20, [X19+280]
	153 Compare X20, 0
	154 JumpIfEqual {185}
	155 Move W21, W0
	156 Move X0, X20
	157 Move X1, X31
	158 Call RectTransform.get_sizeDelta, X0
	159 Move TEMP, X21
	160 And TEMP, TEMP, 1
	161 Compare TEMP, 1
	162 JumpIfNotEqual {174}
	163 Move V1, [X19+256]
	164 Move V2, [X19+96]
	165 Add S1, S1, S2
	166 NotImplemented "Instruction FNEG not yet implemented."
	167 Move X20, [X31+32]
	168 Move X19, [X31+40]
	169 Move X30, [X31+16]
	170 Move X21, [X31+24]
	171 Move D9, [X31+48]
	172 Move D8, [X31+56]
	173 Return 
	174 Move S1, W31
	175 Move X0, X20
	176 Move X20, [X31+32]
	177 Move X19, [X31+40]
	178 Move X30, [X31+16]
	179 Move X21, [X31+24]
	180 Move X1, X31
	181 Move D9, [X31+48]
	182 Move D8, [X31+56]
	183 Call RectTransform.set_sizeDelta, X0, X1
	184 Return 
	185 Call 0x1C17F20

Method: System.Void UpdateBounds()

Disassembly:
	0x03E3EE10 LDR X8, [X19]
	0x03E3EE14 MOV X0, X19
	0x03E3EE18 LDR X9, [X8 + 0x428]
	0x03E3EE1C LDR X1, [X8 + 0x430]
	0x03E3EE20 BLR X9
	0x03E3EE24 LDP X20, X19, [X31 + 0x40]
	0x03E3EE28 LDP X30, X21, [X31 + 0x30]
	0x03E3EE2C LDP D9, D8, [X31 + 0x20]
	0x03E3EE30 ADD X31, X31, 0x50
	0x03E3EE34 RET
	0x03E3EE38 BL 0x1C16F20
	0x03E3EE3C ADRP X8, 0xFFFFFFFFFCCAC000
	0x03E3EE40 LDR V2, [X8 + 0x440]
	0x03E3EE44 FABS S3, S0
	0x03E3EE48 FCMP S0, 0x0
	0x03E3EE4C FMUL S2, S3, S2
	0x03E3EE50 FMOV S3, 1
	0x03E3EE54 FDIV S2, S2, S1
	0x03E3EE58 FADD S2, S2, S3
	0x03E3EE5C FDIV S2, S3, S2
	0x03E3EE60 FSUB S2, S3, S2
	0x03E3EE64 FMUL S3, S2, S1
	0x03E3EE68 FNMUL S1, S2, S1
	0x03E3EE6C FCSEL S0, S3, S1, GE
	0x03E3EE70 RET
	0x03E3EE74 STP D9, D8, [X31 - 0x20]!
	0x03E3EE78 STP X30, X19, [X31 + 0x10]
	0x03E3EE7C LDRB W8, [X0 + 0x28]
	0x03E3EE80 MOV V8.16B, V1.16B
	0x03E3EE84 MOV X19, X0
	0x03E3EE88 CBNZ W8, 0x3E3EE9C
	0x03E3EE8C LDR X0, [X19 + 0x20]
	0x03E3EE90 CBZ X0, 0x3E3EF24
	0x03E3EE94 MOV X1, X31
	0x03E3EE98 BL 0x3C3E7F0
	0x03E3EE9C LDRB W8, [X19 + 0x29]
	0x03E3EEA0 MOV V9.16B, V0.16B
	0x03E3EEA4 CBNZ W8, 0x3E3EEBC
	0x03E3EEA8 LDR X0, [X19 + 0x20]
	0x03E3EEAC CBZ X0, 0x3E3EF24
	0x03E3EEB0 MOV X1, X31
	0x03E3EEB4 BL 0x3C3E7F0
	0x03E3EEB8 MOV V8.16B, V1.16B
	0x03E3EEBC LDR X0, [X19 + 0x20]
	0x03E3EEC0 CBZ X0, 0x3E3EF24
	0x03E3EEC4 MOV X1, X31
	0x03E3EEC8 BL 0x3C3E7F0
	0x03E3EECC ADRP X8, 0xFFFFFFFFFCCAB000
	0x03E3EED0 LDR V2, [X8 + 0xF20]
	0x03E3EED4 FSUB S0, S9, S0
	0x03E3EED8 FSUB S1, S8, S1
	0x03E3EEDC FMUL S0, S0, S0
	0x03E3EEE0 FMUL S1, S1, S1
	0x03E3EEE4 FADD S0, S0, S1
	0x03E3EEE8 FCMP S0, S2
	0x03E3EEEC B.MI 0x3E3EF18
	0x03E3EEF0 LDR X0, [X19 + 0x20]
	0x03E3EEF4 CBZ X0, 0x3E3EF24
	0x03E3EEF8 MOV V0.16B, V9.16B
	0x03E3EEFC MOV V1.16B, V8.16B
	0x03E3EF00 MOV X1, X31
	0x03E3EF04 BL 0x3C3E880
	0x03E3EF08 MOV X0, X19
	0x03E3EF0C LDP X30, X19, [X31 + 0x10]
	0x03E3EF10 LDP D9, D8, [X31], #0x20
	0x03E3EF14 B 0x3E3DE10
	0x03E3EF18 LDP X30, X19, [X31 + 0x10]
	0x03E3EF1C LDP D9, D8, [X31], #0x20
	0x03E3EF20 RET
	0x03E3EF24 BL 0x1C16F20
	0x03E3EF28 SUB X31, X31, 0xB0
	0x03E3EF2C STP D15, D14, [X31 + 0x20]
	0x03E3EF30 STP D13, D12, [X31 + 0x30]
	0x03E3EF34 STP D11, D10, [X31 + 0x40]
	0x03E3EF38 STP D9, D8, [X31 + 0x50]
	0x03E3EF3C STP X30, X27, [X31 + 0x60]
	0x03E3EF40 STP X26, X25, [X31 + 0x70]
	0x03E3EF44 STP X24, X23, [X31 + 0x80]
	0x03E3EF48 STP X22, X21, [X31 + 0x90]
	0x03E3EF4C STP X20, X19, [X31 + 0xA0]
	0x03E3EF50 ADRP X21, 0x5AA000
	0x03E3EF54 ADRP X20, 0x2B5000
	0x03E3EF58 LDRB W8, [X21 + 0x7AE]
	0x03E3EF5C LDR X20, [X20 + 0x598]
	0x03E3EF60 MOV X19, X0
	0x03E3EF64 TBNZ X8, 0x0, 0x3E3EF94
	0x03E3EF68 ADRP X0, 0x2B5000
	0x03E3EF6C LDR X0, [X0 + 0x598]
	0x03E3EF70 BL 0x1C16CF4
	0x03E3EF74 ADRP X0, 0x31F000
	0x03E3EF78 LDR X0, [X0 + 0xC38]
	0x03E3EF7C BL 0x1C16CF4
	0x03E3EF80 ADRP X0, 0x32D000
	0x03E3EF84 LDR X0, [X0 + 0x3A0]
	0x03E3EF88 BL 0x1C16CF4
	0x03E3EF8C MOVZ W8, 0x1
	0x03E3EF90 STRB W8, [X21 + 0x7AE]
	0x03E3EF94 LDR X0, [X20]
	0x03E3EF98 STR W31, [X31 + 0x14]
	0x03E3EF9C LDR X20, [X19 + 0x20]
	0x03E3EFA0 LDR W8, [X0 + 0xE0]
	0x03E3EFA4 CBNZ W8, 0x3E3EFAC
	0x03E3EFA8 BL 0x1C16DFC
	0x03E3EFAC MOV X0, X20
	0x03E3EFB0 MOV X1, X31
	0x03E3EFB4 BL 0x3C38948
	0x03E3EFB8 TBZ X0, 0x0, 0x3E3F4A8
	0x03E3EFBC MOV X0, X19
	0x03E3EFC0 BL 0x3E3E834
	0x03E3EFC4 MOV X0, X19
	0x03E3EFC8 BL 0x3E3DE10
	0x03E3EFCC MOV X0, X31
	0x03E3EFD0 BL 0x3C3C7B4
	0x03E3EFD4 ADRP X23, 0x59B000
	0x03E3EFD8 LDRB W8, [X23 + 0x78F]
	0x03E3EFDC STR D0, [X31]
	0x03E3EFE0 CBNZ W8, 0x3E3EFF8
	0x03E3EFE4 ADRP X0, 0x2BD000
	0x03E3EFE8 LDR X0, [X0 + 0xF08]
	0x03E3EFEC BL 0x1C16CF4
	0x03E3EFF0 MOVZ W8, 0x1
	0x03E3EFF4 STRB W8, [X23 + 0x78F]
	0x03E3EFF8 ADRP X24, 0x2BD000
	0x03E3EFFC LDR X24, [X24 + 0xF08]
	0x03E3F000 ADD X21, X19, 0xA0
	0x03E3F004 ADD X20, X19, 0x88
	0x03E3F008 ADD X5, X31, 0x18
	0x03E3F00C LDR X8, [X24]
	0x03E3F010 MOV X0, X21
	0x03E3F014 MOV X1, X20
	0x03E3F018 LDR X8, [X8 + 0xB8]
	0x03E3F01C LDR V0, [X8]
	0x03E3F020 STR D0, [X31 + 0x18]
	0x03E3F024 LDRB W2, [X19 + 0x28]
	0x03E3F028 LDRB W3, [X19 + 0x29]
	0x03E3F02C LDR W4, [X19 + 0x2C]
	0x03E3F030 BL 0x3E407E8
	0x03E3F034 MOV V8.16B, V0.16B
	0x03E3F038 LDR V0, [X31]
	0x03E3F03C MOV V9.16B, V1.16B
	0x03E3F040 ADRP X22, 0xFFFFFFFFFCCAA000
	0x03E3F044 FCMP S0, 0x0
	0x03E3F048 B.LE 0x3E3F330
	0x03E3F04C LDRB W8, [X19 + 0xC0]
	0x03E3F050 CBNZ W8, 0x3E3F2D0
	0x03E3F054 LDRB W8, [X23 + 0x78F]
	0x03E3F058 CBNZ W8, 0x3E3F070
	0x03E3F05C ADRP X0, 0x2BC000
	0x03E3F060 LDR X0, [X0 + 0xF08]
	0x03E3F064 BL 0x1C16CF4
	0x03E3F068 MOVZ W8, 0x1
	0x03E3F06C STRB W8, [X23 + 0x78F]
	0x03E3F070 LDR X8, [X24]
	0x03E3F074 LDR V2, [X22 + 0xF20]
	0x03E3F078 LDR X8, [X8 + 0xB8]
	0x03E3F07C LDP S0, S1, [X8]
	0x03E3F080 FSUB S3, S8, S0
	0x03E3F084 FSUB S4, S9, S1
	0x03E3F088 FMUL S3, S3, S3
	0x03E3F08C FMUL S4, S4, S4
	0x03E3F090 FADD S3, S3, S4
	0x03E3F094 FCMP S3, S2
	0x03E3F098 B.PL 0x3E3F0BC
	0x03E3F09C LDP S3, S4, [X19 + 0xB8]
	0x03E3F0A0 FSUB S0, S3, S0
	0x03E3F0A4 FSUB S1, S4, S1
	0x03E3F0A8 FMUL S0, S0, S0
	0x03E3F0AC FMUL S1, S1, S1
	0x03E3F0B0 FADD S0, S0, S1
	0x03E3F0B4 FCMP S0, S2
	0x03E3F0B8 B.MI 0x3E3F2C8
	0x03E3F0BC LDR X0, [X19 + 0x20]
	0x03E3F0C0 CBZ X0, 0x3E3F4FC
	0x03E3F0C4 MOV X1, X31
	0x03E3F0C8 BL 0x3C3E7F0
	0x03E3F0CC MOV V11.16B, V0.16B
	0x03E3F0D0 MOV V10.16B, V1.16B
	0x03E3F0D4 MOVZ W26, 0x1
	0x03E3F0D8 FMOV S14, 1
	0x03E3F0DC MOVZ W23, 0xBC
	0x03E3F0E0 MOVZ W24, 0xB8
	0x03E3F0E4 FMOV S15, 3
	0x03E3F0E8 MOVZ W25, 0x7F800000
	0x03E3F0EC LDR W27, [X19 + 0x2C]
	0x03E3F0F0 ANDS W31, W26, 0x1
	0x03E3F0F4 FCSEL S0, S8, S9, NE
	0x03E3F0F8 CMP W27, 0x1
	0x03E3F0FC B.NE 0x3E3F108
	0x03E3F100 FCMP S0, 0x0
	0x03E3F104 B.NE 0x3E3F190
	0x03E3F108 LDRB W8, [X19 + 0x34]
	0x03E3F10C CBNZ W8, 0x3E3F120
	0x03E3F110 TBZ X26, 0x0, 0x3E3F254
	0x03E3F114 MOV W26, W31
	0x03E3F118 STR W31, [X19 + 0xB8]
	0x03E3F11C B 0x3E3F0F0
	0x03E3F120 TBZ X26, 0x0, 0x3E3F140
	0x03E3F124 LDR V0, [X19 + 0x38]
	0x03E3F128 LDR V12, [X19 + 0xB8]
	0x03E3F12C LDR V1, [X31]
	0x03E3F130 BL 0x3EB1B50
	0x03E3F134 FMUL S0, S12, S0
	0x03E3F138 STR S0, [X19 + 0xB8]
	0x03E3F13C B 0x3E3F158
	0x03E3F140 LDR V0, [X19 + 0x38]
	0x03E3F144 LDR V12, [X19 + 0xBC]
	0x03E3F148 LDR V1, [X31]
	0x03E3F14C BL 0x3EB1B50
	0x03E3F150 FMUL S0, S12, S0
	0x03E3F154 STR S0, [X19 + 0xBC]
	0x03E3F158 FABS S0, S0
	0x03E3F15C FCMP S0, S14
	0x03E3F160 B.PL 0x3E3F174
	0x03E3F164 TBZ X26, 0x0, 0x3E3F4DC

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], D13
	003 Move [X31+40], D12
	004 Move [X31+48], D11
	005 Move [X31+56], D10
	006 Move [X31+64], D9
	007 Move [X31+72], D8
	008 Move [X31+80], X30
	009 Move [X31+96], X20
	010 Move [X31+104], X19
	011 Move X20, 0x5AB000
	012 Move W8, [X20+1974]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x2B6000
	019 Move X0, [X0+1448]
	020 Call 0x1C17CF4
	021 Move X0, 0x2B6000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+1974], W8
	026 Move X0, X19
	027 Call ScrollRect.get_viewRect, X0
	028 Compare X0, 0
	029 JumpIfEqual {240}
	030 Move X1, X31
	031 Call RectTransform.get_rect, X0
	032 Move X0, X19
	033 Move V8, V0
	034 Move V9, V1
	035 Move V10, V2
	036 Move V11, V3
	037 Call ScrollRect.get_viewRect, X0
	038 Compare X0, 0
	039 JumpIfEqual {240}
	040 Move X20, 0x2B6000
	041 Move X20, [X20+1432]
	042 Move S12, 0.5
	043 Multiply S0, S11, S12
	044 Multiply S1, S10, S12
	045 Move X1, X31
	046 Add S9, S9, S0
	047 Add S8, S8, S1
	048 Call RectTransform.get_rect, X0
	049 Multiply S0, S2, S12
	050 Multiply S1, S3, S12
	051 Add X8, X31, 8
	052 Move X0, X19
	053 Move [X19+160], S8
	054 Move [X19+168], S9
	055 Move [X19+168], W31
	056 Move [X19+172], S0
	057 Move [X19+180], S1
	058 Move [X19+180], W31
	059 Call ScrollRect.GetBounds, X0
	060 Move X8, [X31+24]
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 Move [X19+152], X8
	063 Move [X19+136], V0
	064 Move X0, [X20]
	065 Move X20, [X19+32]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X20
	071 Move X1, X31
	072 Move X2, X31
	073 Call Object.op_Equality, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfEqual {213}
	078 Move X0, [X19+32]
	079 Compare X0, 0
	080 JumpIfEqual {240}
	081 NotImplemented "Instruction LDUR not yet implemented."
	082 Move V1, [X19+156]
	083 Move V8, [X19+136]
	084 Move V9, [X19+144]
	085 Move X1, X31
	086 Add V10, V0, V0
	087 Add S11, S1, S1
	088 Call RectTransform.get_pivot, X0
	089 NotImplemented "Instruction LDUR not yet implemented."
	090 Move S5, 0.5
	091 Move V0.S[1], V1.S[0]
	092 Multiply S1, S11, S5
	093 NotImplemented "Instruction MOVI not yet implemented."
	094 Move W8, [X19+44]
	095 Move [X19+156], S1
	096 Add V1, V2, V2
	097 Add V0, V0, V3
	098 Subtract V3, V1, V10
	099 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	100 NotImplemented "Instruction INVALID not yet implemented."
	101 NotImplemented "Instruction MOVI not yet implemented."
	102 Subtract V0, V8, V0
	103 NotImplemented "Instruction INVALID not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 NotImplemented "Instruction INVALID not yet implemented."
	106 NotImplemented "Instruction INVALID not yet implemented."
	107 Move [X19+148], D1
	108 Move [X19+136], D0
	109 Move [X19+144], S9
	110 Move X20, 0x59C000
	111 Move W8, [X20+1935]
	112 Compare W8, 0
	113 JumpIfNotEqual {122}
	114 Move X0, 0x2BE000
	115 Move X0, [X0+3848]
	116 Call 0x1C17CF4
	117 Move W8, 1
	118 Move [X20+1935], W8
	119 Move V2, [X19+172]
	120 Move V0, [X19+136]
	121 Move V1, [X19+148]
	122 Move X8, 0x2BE000
	123 Move X8, [X8+3848]
	124 Move V3, [X19+160]
	125 Add S10, S0, S1
	126 Subtract S12, S0, S1
	127 Move X8, [X8]
	128 Add S9, S3, S2
	129 Subtract S11, S3, S2
	130 NotImplemented "Instruction FCMP not yet implemented."
	131 Move X8, [X8+184]
	132 Move V8, [X8+4]
	133 Move X8, 0x2B6000
	134 Move X8, [X8+1448]
	135 Move X0, [X8]
	136 Move W8, [X0+224]
	137 Compare W8, 0
	138 JumpIfNotEqual {140}
	139 Call 0x1C17DFC
	140 Subtract S0, S11, S12
	141 Subtract S1, S9, S10
	142 Move X0, X31
	143 Call Math.Min, V0, V1
	144 NotImplemented "Instruction FCMP not yet implemented."
	145 Move X8, 0x2B5000
	146 Move X8, [X8+1448]
	147 Move X0, [X8]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {152}
	151 Call 0x1C17DFC
	152 Subtract S0, S11, S12
	153 Subtract S1, S9, S10
	154 Move X0, X31
	155 Call Math.Max, V0, V1
	156 Move V9, V0
	157 Move V9, [X8]
	158 Move V0, [X19+164]
	159 Move V1, [X19+176]
	160 Move V2, [X19+140]
	161 Move V3, [X19+152]
	162 Subtract S11, S0, S1
	163 Add S10, S0, S1
	164 Subtract S12, S2, S3
	165 NotImplemented "Instruction FCMP not yet implemented."
	166 Add S13, S2, S3
	167 Move X8, 0x2B5000
	168 Move X8, [X8+1448]
	169 Move X0, [X8]
	170 Move W8, [X0+224]
	171 Compare W8, 0
	172 JumpIfNotEqual {174}
	173 Call 0x1C17DFC
	174 Subtract S0, S11, S12
	175 Subtract S1, S10, S13
	176 Move X0, X31
	177 Call Math.Max, V0, V1
	178 NotImplemented "Instruction FCMP not yet implemented."
	179 Move X8, 0x2B5000
	180 Move X8, [X8+1448]
	181 Move X0, [X8]
	182 Move W8, [X0+224]
	183 Compare W8, 0
	184 JumpIfNotEqual {186}
	185 Call 0x1C17DFC
	186 Subtract S0, S11, S12
	187 Subtract S1, S10, S13
	188 Move X0, X31
	189 Call Math.Min, V0, V1
	190 Move V8, V0
	191 Multiply S0, S9, S9
	192 Multiply S1, S8, S8
	193 Move W8, 1
	194 Add S0, S0, S1
	195 Move S1, W8
	196 NotImplemented "Instruction FCMP not yet implemented."
	197 Move X0, [X19+32]
	198 Compare X0, 0
	199 JumpIfEqual {240}
	200 Move X1, X31
	201 Call RectTransform.get_anchoredPosition, X0
	202 Move W8, [X19+40]
	203 Compare W8, 0
	204 JumpIfNotEqual {210}
	205 Move X0, [X19+32]
	206 Compare X0, 0
	207 JumpIfEqual {240}
	208 Move X1, X31
	209 Call RectTransform.get_anchoredPosition, X0
	210 Move W8, [X19+41]
	211 Compare W8, 0
	212 JumpIfEqual {224}
	213 Move X20, [X31+96]
	214 Move X19, [X31+104]
	215 Move X30, [X31+80]
	216 Move D9, [X31+64]
	217 Move D8, [X31+72]
	218 Move D11, [X31+48]
	219 Move D10, [X31+56]
	220 Move D13, [X31+32]
	221 Move D12, [X31+40]
	222 Add X31, X31, 112
	223 Return 
	224 Move X0, [X19+32]
	225 Compare X0, 0
	226 JumpIfEqual {240}
	227 Move X20, [X31+96]
	228 Move X19, [X31+104]
	229 Move X30, [X31+80]
	230 Move D9, [X31+64]
	231 Move D8, [X31+72]
	232 Move D11, [X31+48]
	233 Move D10, [X31+56]
	234 Move D13, [X31+32]
	235 Move D12, [X31+40]
	236 Move X1, X31
	237 Add X31, X31, 112
	238 Call RectTransform.get_anchoredPosition, X0
	239 Return 
	240 Call 0x1C17F20

Method: System.Void AdjustBounds(ref UnityEngine.Bounds viewBounds, ref UnityEngine.Vector2 contentPivot, ref UnityEngine.Vector3 contentSize, ref UnityEngine.Vector3 contentPos)

Disassembly:
	0x03E415DC BL 0x1C16CF4
	0x03E415E0 ADRP X0, 0x2B2000
	0x03E415E4 LDR X0, [X0 + 0x598]
	0x03E415E8 BL 0x1C16CF4
	0x03E415EC MOVZ W8, 0x1
	0x03E415F0 STRB W8, [X22 + 0x7D1]
	0x03E415F4 LDR X0, [X21]
	0x03E415F8 LDR X21, [X19 + 0xE0]
	0x03E415FC LDR W8, [X0 + 0xE0]
	0x03E41600 CBNZ W8, 0x3E41608
	0x03E41604 BL 0x1C16DFC
	0x03E41608 MOV X0, X21
	0x03E4160C MOV X1, X31
	0x03E41610 MOV X2, X31
	0x03E41614 BL 0x3C3883C
	0x03E41618 TBZ X0, 0x0, 0x3E41634
	0x03E4161C LDP X20, X19, [X31 + 0x40]
	0x03E41620 LDP X22, X21, [X31 + 0x30]
	0x03E41624 LDR X30, [X31 + 0x20]
	0x03E41628 LDP D9, D8, [X31 + 0x10]
	0x03E4162C LDP D11, D10, [X31], #0x50
	0x03E41630 RET
	0x03E41634 LDR X21, [X19 + 0xE0]
	0x03E41638 FMOV S4, W31
	0x03E4163C TBNZ X20, 0x0, 0x3E4165C
	0x03E41640 ADRP X8, 0x2DA000
	0x03E41644 LDR X8, [X8 + 0x5E8]
	0x03E41648 LDR X0, [X8]
	0x03E4164C LDR W8, [X0 + 0xE0]
	0x03E41650 CBNZ W8, 0x3E41658
	0x03E41654 BL 0x1C16DFC

ISIL:
	001 Move S0, [X0+12]
	002 Move S1, [X0+16]
	003 Move S2, [X2]
	004 Move S3, [X2+4]
	005 Add S0, S0, S0
	006 Add S4, S1, S1
	007 Subtract S1, S0, S2
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Subtract S0, S4, S3
	010 Move V2, [X1]
	011 Move V3, [X3]
	012 Move S4, -0.5
	013 Add S2, S2, S4
	014 Multiply S1, S1, S2
	015 Subtract S1, S3, S1
	016 Move [X3], S1
	017 Move V1, [X0+12]
	018 Add S1, S1, S1
	019 Move [X2], S1
	020 NotImplemented "Instruction FCMP not yet implemented."
	021 Move V1, [X1+4]
	022 Move V2, [X3+4]
	023 Move S3, -0.5
	024 Add S1, S1, S3
	025 Multiply S0, S0, S1
	026 Subtract S0, S2, S0
	027 Move [X3+4], S0
	028 Move V0, [X0+16]
	029 Add S0, S0, S0
	030 Move [X2+4], S0
	031 Return 

Method: UnityEngine.Bounds GetBounds()

Disassembly:
	0x03E410D8 RET
	0x03E410DC STR X30, [X31 - 0x20]!
	0x03E410E0 STP X20, X19, [X31 + 0x10]
	0x03E410E4 ADRP X20, 0x5A7000
	0x03E410E8 LDRB W8, [X20 + 0x7C7]
	0x03E410EC MOV X19, X0
	0x03E410F0 TBNZ X8, 0x0, 0x3E41108
	0x03E410F4 ADRP X0, 0x321000
	0x03E410F8 LDR X0, [X0 + 0x580]
	0x03E410FC BL 0x1C16CF4
	0x03E41100 MOVZ W8, 0x1
	0x03E41104 STRB W8, [X20 + 0x7C7]
	0x03E41108 LDR X8, [X19 + 0xE0]
	0x03E4110C CBZ X8, 0x3E41130
	0x03E41110 ADRP X9, 0x321000
	0x03E41114 LDR X9, [X9 + 0x580]
	0x03E41118 LDR X10, [X8]
	0x03E4111C LDR X9, [X9]
	0x03E41120 LDRB W12, [X10 + 0x130]
	0x03E41124 LDRB W11, [X9 + 0x130]
	0x03E41128 CMP W12, W11
	0x03E4112C B.CS 0x3E41138
	0x03E41130 MOV X0, X31
	0x03E41134 B 0x3E4114C
	0x03E41138 LDR X10, [X10 + 0xC8]
	0x03E4113C ADD X10, X10, X11, 0x3, LSL
	0x03E41140 LDUR X10, [X10 - 0x8]
	0x03E41144 CMP X10, X9
	0x03E41148 CSEL X0, X8, X31, EQ
	0x03E4114C LDP X20, X19, [X31 + 0x10]
	0x03E41150 LDR X30, [X31], #0x20
	0x03E41154 RET
	0x03E41158 STR X1, [X0 + 0xE0]
	0x03E4115C RET
	0x03E41160 STP X30, X21, [X31 - 0x20]!
	0x03E41164 STP X20, X19, [X31 + 0x10]
	0x03E41168 ADRP X20, 0x5A7000
	0x03E4116C ADRP X21, 0x2BC000
	0x03E41170 LDRB W8, [X20 + 0x7C8]
	0x03E41174 LDR X21, [X21 + 0x850]
	0x03E41178 MOV X19, X0
	0x03E4117C TBNZ X8, 0x0, 0x3E41194
	0x03E41180 ADRP X0, 0x2BC000
	0x03E41184 LDR X0, [X0 + 0x850]
	0x03E41188 BL 0x1C16CF4
	0x03E4118C MOVZ W8, 0x1
	0x03E41190 STRB W8, [X20 + 0x7C8]
	0x03E41194 LDR X1, [X21]
	0x03E41198 MOV X0, X19
	0x03E4119C LDP X20, X19, [X31 + 0x10]
	0x03E411A0 LDP X30, X21, [X31], #0x20
	0x03E411A4 B 0x21A3894
	0x03E411A8 STP X30, X21, [X31 - 0x20]!
	0x03E411AC STP X20, X19, [X31 + 0x10]
	0x03E411B0 ADRP X21, 0x5A7000
	0x03E411B4 ADRP X20, 0x2B2000
	0x03E411B8 LDRB W8, [X21 + 0x7C9]
	0x03E411BC LDR X20, [X20 + 0x598]
	0x03E411C0 MOV X19, X0
	0x03E411C4 TBNZ X8, 0x0, 0x3E411E8
	0x03E411C8 ADRP X0, 0x32A000

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+144], X22
	004 Move [X31+152], X21
	005 Move [X31+160], X20
	006 Move [X31+168], X19
	007 Move X22, 0x5A8000
	008 Move X21, 0x2B3000
	009 Move X19, X8
	010 Move W8, [X22+1975]
	011 Move X21, [X21+1432]
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x2B3000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1975], W8
	022 Move X0, [X21]
	023 NotImplemented "Instruction MOVI not yet implemented."
	024 Move [X31+96], V0
	025 Move [X31+104], V0
	026 Move [X31+64], V0
	027 Move [X31+72], V0
	028 Move W8, [X0+224]
	029 Move X21, [X20+32]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {44}
	041 Move [X19], X31
	042 Move [X19+8], X31
	043 Move [X19+16], X31
	044 Move X0, [X20+32]
	045 Compare X0, 0
	046 JumpIfEqual {80}
	047 Move X1, [X20+296]
	048 Move X2, X31
	049 Call RectTransform.GetWorldCorners, X0, X1
	050 Move X0, X20
	051 Call ScrollRect.get_viewRect, X0
	052 Compare X0, 0
	053 JumpIfEqual {80}
	054 Add X8, X31, 0
	055 Move X1, X31
	056 Call Transform.get_worldToLocalMatrix, X0
	057 Move V0, [X31]
	058 Move V1, [X31+16]
	059 Move V2, [X31+32]
	060 Move V3, [X31+48]
	061 Add X8, X31, 0
	062 Add X1, X31, 64
	063 Move [X31+64], V0
	064 Move [X31+72], V1
	065 Move [X31+96], V2
	066 Move [X31+104], V3
	067 Move X0, [X20+296]
	068 Call ScrollRect.InternalGetBounds, X0, X1
	069 Move X8, [X31+16]
	070 Move V0, [X31]
	071 Move [X19+16], X8
	072 Move [X19], V0
	073 Move X20, [X31+160]
	074 Move X19, [X31+168]
	075 Move X22, [X31+144]
	076 Move X21, [X31+152]
	077 Move X30, [X31+128]
	078 Add X31, X31, 176
	079 Return X0
	080 Call 0x1C17F20

Method: UnityEngine.Bounds InternalGetBounds(UnityEngine.Vector3[] corners, ref UnityEngine.Matrix4x4 viewWorldToLocalMatrix)

Disassembly:
	0x03E41658 LDR V4, [X19 + 0xA8]
	0x03E4165C CBZ X21, 0x3E416A0
	0x03E41660 LDR X8, [X21]
	0x03E41664 MOV X0, X21
	0x03E41668 MOV V2.16B, V9.16B
	0x03E4166C MOV V3.16B, V8.16B
	0x03E41670 LDR X4, [X8 + 0x428]
	0x03E41674 LDR X3, [X8 + 0x430]
	0x03E41678 LDP X20, X19, [X31 + 0x40]
	0x03E4167C LDP X22, X21, [X31 + 0x30]
	0x03E41680 LDR X30, [X31 + 0x20]
	0x03E41684 LDP D9, D8, [X31 + 0x10]
	0x03E41688 MOVZ W1, 0x1
	0x03E4168C MOVZ W2, 0x1
	0x03E41690 MOV V0.16B, V11.16B
	0x03E41694 MOV V1.16B, V10.16B
	0x03E41698 LDP D11, D10, [X31], #0x50
	0x03E4169C BR X4
	0x03E416A0 BL 0x1C16F20
	0x03E416A4 STR X30, [X31 - 0x30]!
	0x03E416A8 STP X22, X21, [X31 + 0x10]
	0x03E416AC STP X20, X19, [X31 + 0x20]
	0x03E416B0 ADRP X22, 0x5A7000
	0x03E416B4 ADRP X21, 0x2B2000
	0x03E416B8 LDRB W8, [X22 + 0x7D2]
	0x03E416BC LDR X21, [X21 + 0x598]
	0x03E416C0 MOV X19, X1
	0x03E416C4 MOV X20, X0
	0x03E416C8 TBNZ X8, 0x0, 0x3E416E0
	0x03E416CC ADRP X0, 0x2B2000
	0x03E416D0 LDR X0, [X0 + 0x598]
	0x03E416D4 BL 0x1C16CF4
	0x03E416D8 MOVZ W8, 0x1
	0x03E416DC STRB W8, [X22 + 0x7D2]
	0x03E416E0 MOV X0, X20
	0x03E416E4 BL 0x3E410DC
	0x03E416E8 LDR X8, [X21]
	0x03E416EC MOV X21, X0
	0x03E416F0 LDR W9, [X8 + 0xE0]
	0x03E416F4 CBNZ W9, 0x3E41700
	0x03E416F8 MOV X0, X8
	0x03E416FC BL 0x1C16DFC
	0x03E41700 MOV X0, X21
	0x03E41704 MOV X1, X31
	0x03E41708 MOV X2, X31
	0x03E4170C BL 0x3C3883C
	0x03E41710 TBZ X0, 0x0, 0x3E41724
	0x03E41714 LDP X20, X19, [X31 + 0x20]
	0x03E41718 LDP X22, X21, [X31 + 0x10]
	0x03E4171C LDR X30, [X31], #0x30
	0x03E41720 RET
	0x03E41724 MOV X0, X20
	0x03E41728 BL 0x3E410DC
	0x03E4172C CBZ X0, 0x3E41748
	0x03E41730 MOV X1, X19
	0x03E41734 LDP X20, X19, [X31 + 0x20]
	0x03E41738 LDP X22, X21, [X31 + 0x10]
	0x03E4173C MOV X2, X31
	0x03E41740 LDR X30, [X31], #0x30
	0x03E41744 B 0x3CDFF14
	0x03E41748 BL 0x1C16F20
	0x03E4174C STP X30, X21, [X31 - 0x20]!
	0x03E41750 STP X20, X19, [X31 + 0x10]
	0x03E41754 ADRP X21, 0x5A7000
	0x03E41758 LDRB W8, [X21 + 0x7D3]
	0x03E4175C MOV X19, X1
	0x03E41760 MOV X20, X0
	0x03E41764 TBNZ X8, 0x0, 0x3E4177C
	0x03E41768 ADRP X0, 0x2B2000
	0x03E4176C LDR X0, [X0 + 0x598]
	0x03E41770 BL 0x1C16CF4
	0x03E41774 MOVZ W8, 0x1
	0x03E41778 STRB W8, [X21 + 0x7D3]
	0x03E4177C LDR W8, [X20 + 0x50]
	0x03E41780 CMP W8, 0x3
	0x03E41784 B.NE 0x3E41804
	0x03E41788 ADRP X21, 0x2B2000
	0x03E4178C LDR X21, [X21 + 0x598]
	0x03E41790 MOV X0, X20
	0x03E41794 BL 0x3E41160
	0x03E41798 LDR X8, [X21]
	0x03E4179C MOV X21, X0
	0x03E417A0 LDR W9, [X8 + 0xE0]
	0x03E417A4 CBNZ W9, 0x3E417B0
	0x03E417A8 MOV X0, X8
	0x03E417AC BL 0x1C16DFC
	0x03E417B0 MOV X0, X21
	0x03E417B4 MOV X1, X31
	0x03E417B8 MOV X2, X31
	0x03E417BC BL 0x3C3883C
	0x03E417C0 TBNZ X0, 0x0, 0x3E41804
	0x03E417C4 MOV X0, X20
	0x03E417C8 BL 0x3E41160
	0x03E417CC CBZ X0, 0x3E418D0
	0x03E417D0 MOV X1, X31
	0x03E417D4 BL 0x3C32454
	0x03E417D8 TBZ X0, 0x0, 0x3E41804
	0x03E417DC MOV X0, X20
	0x03E417E0 BL 0x3E41160
	0x03E417E4 CBZ X0, 0x3E418D0

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Compare X0, 0
	014 JumpIfEqual {121}
	015 Move X19, X8
	016 Move TEMP, 0x80800000
	017 Not TEMP
	018 Move W8, TEMP
	019 Move TEMP, 0x800000
	020 Not TEMP
	021 Move W9, TEMP
	022 Move S9, W8
	023 Move S8, W9
	024 Move X20, X1
	025 Move X21, X0
	026 Move X22, X31
	027 Add X23, X0, 40
	028 Move V10, V8
	029 Move V11, V8
	030 Move V12, V9
	031 Move V13, V9
	032 Move W8, [X21+24]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move S0, [X23-8]
	035 Move S1, [X23-4]
	036 Move V2, [X23+12]
	037 Move X0, X20
	038 Move X1, X31
	039 Call Matrix4x4.MultiplyPoint3x4, X0, X1
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 NotImplemented "Instruction FCSEL not yet implemented."
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 NotImplemented "Instruction FCSEL not yet implemented."
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 NotImplemented "Instruction FCSEL not yet implemented."
	046 NotImplemented "Instruction FCMP not yet implemented."
	047 NotImplemented "Instruction FCSEL not yet implemented."
	048 NotImplemented "Instruction FCMP not yet implemented."
	049 Add X22, X22, 1
	050 NotImplemented "Instruction FCSEL not yet implemented."
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 NotImplemented "Instruction FCSEL not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, 0x598000
	055 Move W8, [X20+1923]
	056 Compare W8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, 0x2B3000
	059 Move X0, [X0+1440]
	060 Call 0x1C17CF4
	061 Move W8, 1
	062 Move [X20+1923], W8
	063 Move X8, 0x2B3000
	064 Move X8, [X8+1440]
	065 Move S3, 0.5
	066 Move X22, [X31+64]
	067 Move X21, [X31+72]
	068 Move X30, [X31+48]
	069 Move X23, [X31+56]
	070 Move X8, [X8]
	071 Move X8, [X8+184]
	072 Move S0, [X8]
	073 Move S1, [X8+4]
	074 Move V2, [X8+8]
	075 Multiply S0, S0, S3
	076 Multiply S1, S1, S3
	077 Subtract S4, S13, S0
	078 Multiply S2, S2, S3
	079 Subtract S5, S12, S1
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Subtract S6, S9, S2
	082 NotImplemented "Instruction FCSEL not yet implemented."
	083 NotImplemented "Instruction FCMP not yet implemented."
	084 Add S0, S13, S0
	085 NotImplemented "Instruction FCSEL not yet implemented."
	086 NotImplemented "Instruction FCMP not yet implemented."
	087 Add S1, S12, S1
	088 NotImplemented "Instruction FCSEL not yet implemented."
	089 NotImplemented "Instruction FCMP not yet implemented."
	090 Add S2, S9, S2
	091 NotImplemented "Instruction FCSEL not yet implemented."
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 NotImplemented "Instruction FCSEL not yet implemented."
	094 NotImplemented "Instruction FCMP not yet implemented."
	095 NotImplemented "Instruction FCSEL not yet implemented."
	096 Subtract S0, S0, S4
	097 Subtract S1, S1, S5
	098 Subtract S2, S2, S6
	099 Multiply S0, S0, S3
	100 Multiply S1, S1, S3
	101 Multiply S2, S2, S3
	102 Add S4, S4, S0
	103 Add S3, S5, S1
	104 Add S5, S6, S2
	105 Move [X19], S4
	106 Move [X19+8], S3
	107 Move [X19+8], S5
	108 Move [X19+16], S0
	109 Move [X19+16], S1
	110 Move [X19+24], S2
	111 Move X20, [X31+80]
	112 Move X19, [X31+88]
	113 Move D9, [X31+32]
	114 Move D8, [X31+40]
	115 Move D11, [X31+16]
	116 Move D10, [X31+24]
	117 Move D13, [X31+96]
	118 Move D12, [X31+104]
	119 Return X0
	120 Call 0x1C17F28
	121 Call 0x1C17F20

Method: UnityEngine.Vector2 CalculateOffset(UnityEngine.Vector2 delta)

Disassembly:
	0x03E3FA64 BL 0x1C16F10
	0x03E3FA68 MOV X19, X0
	0x03E3FA6C ADRP X0, 0x306000
	0x03E3FA70 LDR X0, [X0 + 0xFF8]
	0x03E3FA74 BL 0x1C16D08
	0x03E3FA78 MOV X1, X0
	0x03E3FA7C MOV X0, X19
	0x03E3FA80 MOV X2, X31
	0x03E3FA84 BL 0x3379B6C
	0x03E3FA88 ADRP X0, 0x320000
	0x03E3FA8C LDR X0, [X0 + 0x2A8]
	0x03E3FA90 BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move [X31+8], S0
	003 Move [X31+16], S1
	004 Move W2, [X0+40]
	005 Move W3, [X0+41]
	006 Move W4, [X0+44]
	007 Add X8, X0, 160
	008 Add X1, X0, 136
	009 Add X5, X31, 8
	010 Move X0, X8
	011 Call ScrollRect.InternalCalculateOffset, X0, X1, X2, X3, X4, X5
	012 Move X30, [X31+16]
	013 Return X0

Method: UnityEngine.Vector2 InternalCalculateOffset(ref UnityEngine.Bounds viewBounds, ref UnityEngine.Bounds contentBounds, System.Boolean horizontal, System.Boolean vertical, UnityEngine.UI.ScrollRect/MovementType movementType, ref UnityEngine.Vector2 delta)

Disassembly:
	0x03E417E8 MOV X1, X31
	0x03E417EC BL 0x3BF68B0
	0x03E417F0 TBZ X0, 0x0, 0x3E41804
	0x03E417F4 MOV X0, X19
	0x03E417F8 MOV X1, X31
	0x03E417FC BL 0x32277A8
	0x03E41800 TBZ X0, 0x0, 0x3E41810
	0x03E41804 LDP X20, X19, [X31 + 0x10]
	0x03E41808 LDP X30, X21, [X31], #0x20
	0x03E4180C RET
	0x03E41810 MOV X0, X20
	0x03E41814 BL 0x3E41160
	0x03E41818 LDR X8, [X20 + 0xD0]
	0x03E4181C CBZ X8, 0x3E418D0
	0x03E41820 CBZ X0, 0x3E418D0
	0x03E41824 LDR X1, [X8 + 0x10]
	0x03E41828 MOV X2, X31
	0x03E4182C BL 0x3BF6448
	0x03E41830 MOV X0, X20
	0x03E41834 BL 0x3E41160
	0x03E41838 LDR X8, [X20 + 0xD0]
	0x03E4183C CBZ X8, 0x3E418D0
	0x03E41840 CBZ X0, 0x3E418D0
	0x03E41844 LDR X1, [X8 + 0x18]
	0x03E41848 MOV X2, X31
	0x03E4184C BL 0x3BF6448
	0x03E41850 MOV X0, X20
	0x03E41854 BL 0x3E41160
	0x03E41858 LDR X8, [X20 + 0xD0]
	0x03E4185C CBZ X8, 0x3E418D0
	0x03E41860 CBZ X0, 0x3E418D0
	0x03E41864 LDR X1, [X8 + 0x20]
	0x03E41868 MOV X2, X31
	0x03E4186C BL 0x3BF6448
	0x03E41870 MOV X0, X20
	0x03E41874 BL 0x3E41160
	0x03E41878 LDR X8, [X20 + 0xD0]
	0x03E4187C CBZ X8, 0x3E418D0
	0x03E41880 CBZ X0, 0x3E418D0
	0x03E41884 LDR X1, [X8 + 0x28]
	0x03E41888 MOV X2, X31
	0x03E4188C BL 0x3BF6448
	0x03E41890 MOV X0, X20
	0x03E41894 BL 0x3E41160
	0x03E41898 LDR X8, [X20 + 0xD0]
	0x03E4189C CBZ X8, 0x3E418D0
	0x03E418A0 CBZ X0, 0x3E418D0
	0x03E418A4 LDR X1, [X8 + 0x30]
	0x03E418A8 MOV X2, X31
	0x03E418AC BL 0x3BF6448
	0x03E418B0 MOV X0, X20
	0x03E418B4 BL 0x3E41160
	0x03E418B8 CBZ X0, 0x3E418D0
	0x03E418BC MOV X1, X19
	0x03E418C0 LDP X20, X19, [X31 + 0x10]
	0x03E418C4 MOV X2, X31
	0x03E418C8 LDP X30, X21, [X31], #0x20
	0x03E418CC B 0x3BF6338
	0x03E418D0 BL 0x1C16F20
	0x03E418D4 STP D11, D10, [X31 - 0x50]!
	0x03E418D8 STP D9, D8, [X31 + 0x10]
	0x03E418DC STR X30, [X31 + 0x20]
	0x03E418E0 STP X22, X21, [X31 + 0x30]
	0x03E418E4 STP X20, X19, [X31 + 0x40]
	0x03E418E8 ADRP X22, 0x5A7000
	0x03E418EC LDRB W8, [X22 + 0x7CD]
	0x03E418F0 MOV W19, W2
	0x03E418F4 MOV W21, W1
	0x03E418F8 MOV X20, X0
	0x03E418FC TBNZ X8, 0x0, 0x3E41920
	0x03E41900 ADRP X0, 0x2DA000
	0x03E41904 LDR X0, [X0 + 0x5E8]
	0x03E41908 BL 0x1C16CF4
	0x03E4190C ADRP X0, 0x2B4000
	0x03E41910 LDR X0, [X0 + 0x278]
	0x03E41914 BL 0x1C16CF4
	0x03E41918 MOVZ W8, 0x1
	0x03E4191C STRB W8, [X22 + 0x7CD]
	0x03E41920 MOV X0, X20
	0x03E41924 MOV X1, X31
	0x03E41928 BL 0x3C32ECC

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X25, 0x599000
	010 Move W8, [X25+1935]
	011 Move X19, X5
	012 Move W24, W4
	013 Move W22, W3
	014 Move W23, W2
	015 Move X21, X1
	016 Move X20, X0
	017 Compare W8, 0
	018 JumpIfNotEqual {24}
	019 Move X0, 0x2BB000
	020 Move X0, [X0+3848]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X25+1935], W8
	024 Move X8, 0x2BB000
	025 Move X8, [X8+3848]
	026 Move X8, [X8]
	027 Move X8, [X8+184]
	028 Move S2, [X8]
	029 Move S1, [X8+4]
	030 Compare W24, 0
	031 JumpIfEqual {57}
	032 Move TEMP, X23
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {58}
	036 Move V5, [X21]
	037 Move V7, [X21+12]
	038 Move V3, [X19]
	039 Move V4, [X20]
	040 Move V6, [X20+12]
	041 Move X8, -53833728
	042 Move V16, [X8+3952]
	043 Subtract S0, S5, S7
	044 Add S0, S0, S3
	045 Subtract S17, S4, S6
	046 Subtract S0, S17, S0
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move X8, -53829632
	049 Add S0, S5, S7
	050 Move V5, [X8+1040]
	051 Add S0, S0, S3
	052 Add S3, S4, S6
	053 Subtract S3, S3, S0
	054 NotImplemented "Instruction FCMP not yet implemented."
	055 Move V0, V2
	056 Move V0, V3
	057 Move V0, V2
	058 Move V0, V2
	059 Move TEMP, X22
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {84}
	063 Move V4, [X21+4]
	064 Move V6, [X21+16]
	065 Move V2, [X19+4]
	066 Move V3, [X20+4]
	067 Move V5, [X20+16]
	068 Move X8, -53829632
	069 Move V16, [X8+1040]
	070 Add S7, S4, S6
	071 Add S7, S7, S2
	072 Add S17, S3, S5
	073 Subtract S7, S17, S7
	074 NotImplemented "Instruction FCMP not yet implemented."
	075 Move X8, -53833728
	076 Subtract S4, S4, S6
	077 Move V6, [X8+3952]
	078 Add S2, S4, S2
	079 Subtract S3, S3, S5
	080 Subtract S2, S3, S2
	081 NotImplemented "Instruction FCMP not yet implemented."
	082 NotImplemented "Instruction FCSEL not yet implemented."
	083 Move V1, V7
	084 Move X20, [X31+48]
	085 Move X19, [X31+56]
	086 Move X22, [X31+32]
	087 Move X21, [X31+40]
	088 Move X24, [X31+16]
	089 Move X23, [X31+24]
	090 Move X30, [X31+64]
	091 Move X25, [X31+72]
	092 Return X0

Method: System.Void SetDirty()

Disassembly:
	0x03E3E6AC CBNZ W8, 0x3E3E6B4
	0x03E3E6B0 BL 0x1C16DFC
	0x03E3E6B4 MOV X0, X20
	0x03E3E6B8 MOV X1, X31
	0x03E3E6BC BL 0x3C38948
	0x03E3E6C0 TBZ X0, 0x0, 0x3E3E718
	0x03E3E6C4 LDR X8, [X19 + 0x50]
	0x03E3E6C8 CBZ X8, 0x3E3E7B0
	0x03E3E6CC LDR X20, [X8 + 0x118]
	0x03E3E6D0 ADRP X8, 0x31A000
	0x03E3E6D4 LDR X8, [X8 + 0xB68]
	0x03E3E6D8 LDR X0, [X8]
	0x03E3E6DC BL 0x1C16F10
	0x03E3E6E0 ADRP X8, 0x32D000
	0x03E3E6E4 LDR X8, [X8 + 0x390]
	0x03E3E6E8 MOV X1, X19
	0x03E3E6EC MOV X3, X31
	0x03E3E6F0 MOV X21, X0
	0x03E3E6F4 LDR X2, [X8]
	0x03E3E6F8 BL 0x2725EC4
	0x03E3E6FC CBZ X20, 0x3E3E7B0
	0x03E3E700 ADRP X8, 0x31B000
	0x03E3E704 LDR X8, [X8 + 0x70]
	0x03E3E708 MOV X0, X20
	0x03E3E70C MOV X1, X21
	0x03E3E710 LDR X2, [X8]
	0x03E3E714 BL 0x272A4EC
	0x03E3E718 ADRP X20, 0x2B8000
	0x03E3E71C LDR X20, [X20 + 0x920]
	0x03E3E720 ADD X0, X19, 0x120
	0x03E3E724 MOV X1, X31
	0x03E3E728 STRH W31, [X19 + 0xC0]
	0x03E3E72C STRB W31, [X19 + 0xFC]
	0x03E3E730 BL 0x3C3E3A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5AB000
	005 Move W8, [X20+1976]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2B9000
	012 Move X0, [X0+2336]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1976], W8
	016 Move X8, [X19]
	017 Move X0, X19
	018 Move X9, [X8+456]
	019 Move X1, [X8+464]
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {43}
	025 Move X20, 0x2B9000
	026 Move X20, [X20+2336]
	027 Move X0, X19
	028 Call ScrollRect.get_rectTransform, X0
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {36}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X0, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X1, X31
	040 Move X30, [X31+32]
	041 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	042 Return 
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Return 

Method: System.Void SetDirtyCaching()

Disassembly:
	0x03E3E2C0 MOV X0, X19
	0x03E3E2C4 BL 0x3E3F670
	0x03E3E2C8 CBZ X20, 0x3E3E2E4
	0x03E3E2CC MOV X0, X20
	0x03E3E2D0 LDP X20, X19, [X31 + 0x20]
	0x03E3E2D4 LDP X30, X21, [X31 + 0x10]
	0x03E3E2D8 MOVZ W1, 0x1
	0x03E3E2DC LDP D9, D8, [X31], #0x30
	0x03E3E2E0 B 0x3E3B84C
	0x03E3E2E4 BL 0x1C16F20
	0x03E3E2E8 STP X30, X21, [X31 - 0x20]!
	0x03E3E2EC STP X20, X19, [X31 + 0x10]
	0x03E3E2F0 ADRP X21, 0x5AA000
	0x03E3E2F4 ADRP X20, 0x2B5000
	0x03E3E2F8 LDRB W8, [X21 + 0x7AF]
	0x03E3E2FC LDR X20, [X20 + 0x598]
	0x03E3E300 MOV X19, X0
	0x03E3E304 TBNZ X8, 0x0, 0x3E3E31C
	0x03E3E308 ADRP X0, 0x2B5000
	0x03E3E30C LDR X0, [X0 + 0x598]
	0x03E3E310 BL 0x1C16CF4
	0x03E3E314 MOVZ W8, 0x1
	0x03E3E318 STRB W8, [X21 + 0x7AF]
	0x03E3E31C LDR X0, [X20]
	0x03E3E320 LDR X20, [X19 + 0x20]
	0x03E3E324 LDR W8, [X0 + 0xE0]
	0x03E3E328 CBNZ W8, 0x3E3E330
	0x03E3E32C BL 0x1C16DFC
	0x03E3E330 MOV X0, X20
	0x03E3E334 MOV X1, X31
	0x03E3E338 MOV X2, X31
	0x03E3E33C BL 0x3C3883C
	0x03E3E340 TBZ X0, 0x0, 0x3E3E37C
	0x03E3E344 ADRP X20, 0x59B000
	0x03E3E348 LDRB W8, [X20 + 0x78F]
	0x03E3E34C CBNZ W8, 0x3E3E364
	0x03E3E350 ADRP X0, 0x2BD000
	0x03E3E354 LDR X0, [X0 + 0xF08]
	0x03E3E358 BL 0x1C16CF4
	0x03E3E35C MOVZ W8, 0x1
	0x03E3E360 STRB W8, [X20 + 0x78F]
	0x03E3E364 ADRP X8, 0x2BD000
	0x03E3E368 LDR X8, [X8 + 0xF08]
	0x03E3E36C LDR X8, [X8]
	0x03E3E370 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5AB000
	005 Move W8, [X20+1977]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x31B000
	012 Move X0, [X0+1816]
	013 Call 0x1C17CF4
	014 Move X0, 0x2B9000
	015 Move X0, [X0+2336]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1977], W8
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X9, [X8+456]
	022 Move X1, [X8+464]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {53}
	028 Move X8, 0x31B000
	029 Move X8, [X8+1816]
	030 Move X20, 0x2B9000
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Move X20, [X20+2336]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X19
	038 Move X1, X31
	039 Call CanvasUpdateRegistry.RegisterCanvasElementForLayoutRebuild, X0
	040 Move X0, X19
	041 Call ScrollRect.get_rectTransform, X0
	042 Move X8, [X20]
	043 Move X20, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	052 Move [X19+128], X31
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Return 

Method: UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()

Disassembly:
	0x03E4192C CBZ X0, 0x3E41B44
	0x03E41930 MOV X1, X31

ISIL:
	001 Move X1, X31
	002 Call Component.get_transform, X0
	003 Return X0

