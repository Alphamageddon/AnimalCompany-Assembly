Type: UnityEngine.UI.Text

Method: System.Void .ctor()

Disassembly:
	0x03E45DBC LDR X24, [X8 + 0x10]
	0x03E45DC0 MOV X0, X20
	0x03E45DC4 MOV X1, X31
	0x03E45DC8 MOV V11.16B, V0.16B
	0x03E45DCC MOV V12.16B, V1.16B
	0x03E45DD0 MOV V13.16B, V2.16B
	0x03E45DD4 MOV V14.16B, V3.16B
	0x03E45DD8 BL 0x3CDB488
	0x03E45DDC CBZ X0, 0x3E45E98
	0x03E45DE0 MOV X1, X31
	0x03E45DE4 BL 0x3C3EA28
	0x03E45DE8 LDR X8, [X20 + 0xD8]
	0x03E45DEC CBZ X8, 0x3E45E98
	0x03E45DF0 LDUR V3, [X8 + 0x34]
	0x03E45DF4 LDRB W9, [X8 + 0x31]
	0x03E45DF8 LDR V2, [X8 + 0x3C]
	0x03E45DFC LDR W10, [X8 + 0x1C]
	0x03E45E00 LDRB W11, [X8 + 0x20]
	0x03E45E04 LDRH W8, [X31 + 0x1C]
	0x03E45E08 LDRB W12, [X31 + 0x1E]
	0x03E45E0C LDR V4, [X31]
	0x03E45E10 LDRH W13, [X31 + 0x18]
	0x03E45E14 LDRB W14, [X31 + 0x1A]
	0x03E45E18 STP S0, S1, [X19 + 0x50]
	0x03E45E1C UNIMPLEMENTED
	0x03E45E20 STR X24, [X19]
	0x03E45E24 STP S11, S12, [X19 + 0x8]
	0x03E45E28 STP S13, S14, [X19 + 0x10]
	0x03E45E2C STR W21, [X19 + 0x18]
	0x03E45E30 STR S10, [X19 + 0x24]
	0x03E45E34 STRB W23, [X19 + 0x30]
	0x03E45E38 STRH W31, [X19 + 0x32]
	0x03E45E3C STUR D4, [X19 + 0x34]
	0x03E45E40 STRB W31, [X19 + 0x3C]
	0x03E45E44 STP S9, S8, [X19 + 0x48]
	0x03E45E48 STR S2, [X19 + 0x1C]
	0x03E45E4C STRB W9, [X19 + 0x20]
	0x03E45E50 STRB W12, [X19 + 0x23]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5A4000
	007 Move X21, 0x2B1000
	008 Move X20, 0x315000
	009 Move W8, [X22+2030]
	010 Move X21, [X21+632]
	011 Move X20, [X20+424]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x2B1000
	018 Move X0, [X0+632]
	019 Call 0x1C17CF4
	020 Move X0, 0x315000
	021 Move X0, [X0+424]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2030], W8
	025 Move X0, X31
	026 Call FontData.get_defaultFontData
	027 Move [X19+216], X0
	028 Move X8, [X21]
	029 Move W1, 4
	030 Move X8, [X8+184]
	031 Move X8, [X8]
	032 Move [X19+224], X8
	033 Move X0, [X20]
	034 Call 0x1C17D6C
	035 Move [X19+256], X0
	036 Move X0, X19
	037 Move X1, X31
	038 Call MaskableGraphic..ctor, X0
	039 Move [X19+160], W31
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X30, [X31+48]
	045 Return 

Method: UnityEngine.TextGenerator get_cachedTextGenerator()

Disassembly:
	0x03E45E54 STURH W8, [X19 + 0x21]
	0x03E45E58 STP W10, W22, [X19 + 0x28]
	0x03E45E5C STRB W11, [X19 + 0x31]
	0x03E45E60 STRB W14, [X19 + 0x3F]
	0x03E45E64 STURH W13, [X19 + 0x3D]
	0x03E45E68 STR D0, [X19 + 0x40]
	0x03E45E6C STR X31, [X19 + 0x58]
	0x03E45E70 LDP X20, X19, [X31 + 0x80]
	0x03E45E74 LDP X22, X21, [X31 + 0x70]
	0x03E45E78 LDP X24, X23, [X31 + 0x60]
	0x03E45E7C LDR X30, [X31 + 0x58]
	0x03E45E80 LDP D9, D8, [X31 + 0x48]
	0x03E45E84 LDP D11, D10, [X31 + 0x38]
	0x03E45E88 LDP D13, D12, [X31 + 0x28]
	0x03E45E8C LDR V14, [X31 + 0x20]
	0x03E45E90 ADD X31, X31, 0x90
	0x03E45E94 RET
	0x03E45E98 BL 0x1C16F20
	0x03E45E9C STP X30, X19, [X31 - 0x10]!
	0x03E45EA0 CMP W0, 0x9
	0x03E45EA4 B.CS 0x3E45EC4
	0x03E45EA8 ADRP X8, 0xFFFFFFFFFCD52000
	0x03E45EAC ADRP X10, 0xFFFFFFFFFCD52000
	0x03E45EB0 ADD X8, X8, 0xBB4
	0x03E45EB4 ADD X10, X10, 0xBD8
	0x03E45EB8 ADD X9, X8, W0, 0x2, SXTW
	0x03E45EBC ADD X8, X10, W0, 0x2, SXTW
	0x03E45EC0 B 0x3E45EF8
	0x03E45EC4 ADRP X19, 0x594000
	0x03E45EC8 LDRB W8, [X19 + 0x78F]
	0x03E45ECC CBNZ W8, 0x3E45EE4
	0x03E45ED0 ADRP X0, 0x2B6000
	0x03E45ED4 LDR X0, [X0 + 0xF08]
	0x03E45ED8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5A4000
	006 Move W8, [X20+2031]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x326000
	013 Move X0, [X0+3864]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2031], W8
	017 Move X20, [X19+232]
	018 Compare X20, 0
	019 JumpIfNotEqual {37}
	020 Move X8, [X19+224]
	021 Compare X8, 0
	022 JumpIfEqual {43}
	023 Move W21, [X8+16]
	024 Move X8, 0x326000
	025 Move X8, [X8+3864]
	026 Move X0, [X8]
	027 Call 0x1C17F10
	028 Move X20, X0
	029 Compare W21, 0
	030 JumpIfEqual {34}
	031 Move W1, W21
	032 Move X2, X31
	033 Call TextGenerator..ctor, X0, X1
	034 Move X1, X31
	035 Call TextGenerator..ctor, X0
	036 Move [X19+232], X20
	037 Move X0, X20
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0
	043 Call 0x1C17F20

Method: UnityEngine.TextGenerator get_cachedTextGeneratorForLayout()

Disassembly:
	0x03E45EDC MOVZ W8, 0x1
	0x03E45EE0 STRB W8, [X19 + 0x78F]
	0x03E45EE4 ADRP X8, 0x2B6000
	0x03E45EE8 LDR X8, [X8 + 0xF08]
	0x03E45EEC LDR X8, [X8]
	0x03E45EF0 LDR X8, [X8 + 0xB8]
	0x03E45EF4 ADD X9, X8, 0x4
	0x03E45EF8 LDR V0, [X8]
	0x03E45EFC LDR V1, [X9]
	0x03E45F00 LDP X30, X19, [X31], #0x10
	0x03E45F04 RET
	0x03E45F08 STR D10, [X31 - 0x80]!
	0x03E45F0C STP D9, D8, [X31 + 0x10]
	0x03E45F10 STP X29, X30, [X31 + 0x20]
	0x03E45F14 STP X28, X27, [X31 + 0x30]
	0x03E45F18 STP X26, X25, [X31 + 0x40]
	0x03E45F1C STP X24, X23, [X31 + 0x50]
	0x03E45F20 STP X22, X21, [X31 + 0x60]
	0x03E45F24 STP X20, X19, [X31 + 0x70]
	0x03E45F28 SUB X31, X31, 0x290
	0x03E45F2C ADRP X21, 0x5A3000
	0x03E45F30 LDRB W8, [X21 + 0x7FC]
	0x03E45F34 MOV X19, X1
	0x03E45F38 MOV X20, X0
	0x03E45F3C TBNZ X8, 0x0, 0x3E45F6C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5A4000
	005 Move W8, [X20+2032]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x326000
	012 Move X0, [X0+3864]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2032], W8
	016 Move X20, [X19+240]
	017 Compare X20, 0
	018 JumpIfNotEqual {27}
	019 Move X8, 0x326000
	020 Move X8, [X8+3864]
	021 Move X0, [X8]
	022 Call 0x1C17F10
	023 Move X1, X31
	024 Move X20, X0
	025 Call TextGenerator..ctor, X0
	026 Move [X19+240], X20
	027 Move X0, X20
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Return X0

Method: UnityEngine.Texture get_mainTexture()

Disassembly:
	0x03E45F40 ADRP X0, 0x326000
	0x03E45F44 LDR X0, [X0 + 0x4C8]
	0x03E45F48 BL 0x1C16CF4
	0x03E45F4C ADRP X0, 0x326000
	0x03E45F50 LDR X0, [X0 + 0x4D0]
	0x03E45F54 BL 0x1C16CF4
	0x03E45F58 ADRP X0, 0x2AE000
	0x03E45F5C LDR X0, [X0 + 0x598]
	0x03E45F60 BL 0x1C16CF4
	0x03E45F64 MOVZ W8, 0x1
	0x03E45F68 STRB W8, [X21 + 0x7FC]
	0x03E45F6C MOVI V0.2D, 0x0
	0x03E45F70 STP V0, V0, [X31 + 0x270]
	0x03E45F74 STP V0, V0, [X31 + 0x250]
	0x03E45F78 STP V0, V0, [X31 + 0x230]
	0x03E45F7C LDR X8, [X20 + 0xD8]
	0x03E45F80 CBZ X8, 0x3E464DC
	0x03E45F84 ADRP X9, 0x2AE000
	0x03E45F88 LDR X9, [X9 + 0x598]
	0x03E45F8C LDR X21, [X8 + 0x10]
	0x03E45F90 LDR X0, [X9]
	0x03E45F94 LDR W9, [X0 + 0xE0]
	0x03E45F98 CBNZ W9, 0x3E45FA0
	0x03E45F9C BL 0x1C16DFC
	0x03E45FA0 MOV X0, X21
	0x03E45FA4 MOV X1, X31
	0x03E45FA8 MOV X2, X31
	0x03E45FAC BL 0x3C3883C
	0x03E45FB0 TBNZ X0, 0x0, 0x3E464B4
	0x03E45FB4 MOVZ W8, 0x1
	0x03E45FB8 MOV X0, X20
	0x03E45FBC MOV X1, X31
	0x03E45FC0 STRB W8, [X20 + 0xF8]
	0x03E45FC4 BL 0x3CDB488
	0x03E45FC8 CBZ X0, 0x3E464DC
	0x03E45FCC MOV X1, X31
	0x03E45FD0 BL 0x3C3E51C
	0x03E45FD4 MOV V0.16B, V2.16B
	0x03E45FD8 MOV V1.16B, V3.16B
	0x03E45FDC ADD X8, X31, 0x230
	0x03E45FE0 MOV X0, X20
	0x03E45FE4 BL 0x3E45CAC
	0x03E45FE8 MOV X0, X20
	0x03E45FEC BL 0x3E44E54
	0x03E45FF0 LDR X8, [X20]
	0x03E45FF4 MOV X21, X0
	0x03E45FF8 MOV X0, X20
	0x03E45FFC LDR X9, [X8 + 0x5D8]
	0x03E46000 LDR X1, [X8 + 0x5E0]
	0x03E46004 BLR X9
	0x03E46008 MOV X22, X0
	0x03E4600C ADD X0, X31, 0x160
	0x03E46010 ADD X1, X31, 0x230
	0x03E46014 MOVZ W2, 0x60
	0x03E46018 BL 0x3EB1AC0
	0x03E4601C MOV X0, X20
	0x03E46020 MOV X1, X31
	0x03E46024 BL 0x3C32ECC
	0x03E46028 CBZ X21, 0x3E464DC
	0x03E4602C MOV X23, X0
	0x03E46030 ADD X0, X31, 0x1D0
	0x03E46034 ADD X1, X31, 0x160
	0x03E46038 MOVZ W2, 0x60
	0x03E4603C BL 0x3EB1AC0
	0x03E46040 ADD X2, X31, 0x1D0
	0x03E46044 MOV X0, X21
	0x03E46048 MOV X1, X22
	0x03E4604C MOV X3, X23
	0x03E46050 MOV X4, X31
	0x03E46054 BL 0x3CCF12C
	0x03E46058 MOV X0, X20
	0x03E4605C BL 0x3E44E54
	0x03E46060 CBZ X0, 0x3E464DC
	0x03E46064 MOV X1, X31
	0x03E46068 BL 0x3CCF624
	0x03E4606C MOV X21, X0
	0x03E46070 MOV X0, X20
	0x03E46074 BL 0x3E458D0
	0x03E46078 CBZ X21, 0x3E464DC
	0x03E4607C ADRP X10, 0x325000
	0x03E46080 LDR X8, [X21]
	0x03E46084 LDR X10, [X10 + 0x4C8]
	0x03E46088 MOV V8.16B, V0.16B
	0x03E4608C LDRH W9, [X8 + 0x12E]
	0x03E46090 LDR X1, [X10]
	0x03E46094 CBZ X9, 0x3E460B8
	0x03E46098 LDR X10, [X8 + 0xB0]
	0x03E4609C ADD X10, X10, 0x8
	0x03E460A0 LDUR X11, [X10 - 0x8]
	0x03E460A4 CMP X11, X1
	0x03E460A8 B.EQ 0x3E460C8
	0x03E460AC SUBS X9, X9, 0x1
	0x03E460B0 ADD X10, X10, 0x10
	0x03E460B4 B.NE 0x3E460A0
	0x03E460B8 MOV X0, X21
	0x03E460BC MOV W2, W31
	0x03E460C0 BL 0x1C5C788
	0x03E460C4 B 0x3E460D4
	0x03E460C8 LDRSW X9, [X10]
	0x03E460CC ADD X8, X8, X9, 0x4, LSL
	0x03E460D0 ADD X0, X8, 0x138
	0x03E460D4 LDP X8, X1, [X0]
	0x03E460D8 MOV X0, X21
	0x03E460DC BLR X8
	0x03E460E0 CMP W0, 0x0
	0x03E460E4 B.LE 0x3E46138

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5A4000
	006 Move W8, [X20+2033]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2AF000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2033], W8
	017 Move X8, [X19+216]
	018 Compare X8, 0
	019 JumpIfEqual {96}
	020 Move X21, 0x2AF000
	021 Move X21, [X21+1432]
	022 Move X20, [X8+16]
	023 Move X0, [X21]
	024 Move W9, [X0+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {97}
	036 Move X8, [X19+216]
	037 Compare X8, 0
	038 JumpIfEqual {96}
	039 Move X0, [X8+16]
	040 Compare X0, 0
	041 JumpIfEqual {96}
	042 Move X1, X31
	043 Call Font.get_material, X0
	044 Move X8, [X21]
	045 Move X20, X0
	046 Move W9, [X8+224]
	047 Compare W9, 0
	048 JumpIfNotEqual {51}
	049 Move X0, X8
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Inequality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {97}
	059 Move X8, [X19+216]
	060 Compare X8, 0
	061 JumpIfEqual {96}
	062 Move X0, [X8+16]
	063 Compare X0, 0
	064 JumpIfEqual {96}
	065 Move X1, X31
	066 Call Font.get_material, X0
	067 Compare X0, 0
	068 JumpIfEqual {96}
	069 Move X1, X31
	070 Call Material.get_mainTexture, X0
	071 Move X8, [X21]
	072 Move X20, X0
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move X0, X20
	079 Move X1, X31
	080 Move X2, X31
	081 Call Object.op_Inequality, X0, X1
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {97}
	086 Move X8, [X19+216]
	087 Compare X8, 0
	088 JumpIfEqual {96}
	089 Move X0, [X8+16]
	090 Compare X0, 0
	091 JumpIfEqual {96}
	092 Move X1, X31
	093 Call Font.get_material, X0
	094 Compare X0, 0
	095 JumpIfNotEqual {114}
	096 Call 0x1C17F20
	097 Move X0, [X21]
	098 Move X20, [X19+32]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X0, X20
	104 Move X1, X31
	105 Move X2, X31
	106 Call Object.op_Inequality, X0, X1
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {121}
	111 Move X0, [X19+32]
	112 Compare X0, 0
	113 JumpIfEqual {96}
	114 Move X20, [X31+16]
	115 Move X19, [X31+24]
	116 Move X1, X31
	117 Move X30, [X31+32]
	118 Move X21, [X31+40]
	119 Call Material.get_mainTexture, X0
	120 Return X0
	121 Move X19, 0x5A3000
	122 Move W8, [X19+2093]
	123 Compare W8, 0
	124 JumpIfNotEqual {130}
	125 Move X0, 0x314000
	126 Move X0, [X0+280]
	127 Call 0x1C17CF4
	128 Move W8, 1
	129 Move [X19+2093], W8
	130 Move X19, 0x314000
	131 Move X19, [X19+280]
	132 Move X0, [X19]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {138}
	136 Call 0x1C17DFC
	137 Move X0, [X19]
	138 Move X8, [X0+184]
	139 Move X20, [X31+16]
	140 Move X19, [X31+24]
	141 Move X0, [X8+8]
	142 Move X30, [X31+32]
	143 Move X21, [X31+40]
	144 Return X0

Method: System.Void FontTextureChanged()

Disassembly:
	0x03E46104 CBZ X9, 0x3E46128
	0x03E46108 LDR X10, [X8 + 0xB0]
	0x03E4610C ADD X10, X10, 0x8
	0x03E46110 LDUR X11, [X10 - 0x8]
	0x03E46114 CMP X11, X1
	0x03E46118 B.EQ 0x3E46148
	0x03E4611C SUBS X9, X9, 0x1
	0x03E46120 ADD X10, X10, 0x10
	0x03E46124 B.NE 0x3E46110
	0x03E46128 MOV X0, X21
	0x03E4612C MOV W2, W31
	0x03E46130 BL 0x1C5C788
	0x03E46134 B 0x3E46154
	0x03E46138 CBZ X19, 0x3E464DC
	0x03E4613C MOV X0, X19
	0x03E46140 BL 0x3E39938
	0x03E46144 B 0x3E464B4
	0x03E46148 LDRSW X9, [X10]
	0x03E4614C ADD X8, X8, X9, 0x4, LSL
	0x03E46150 ADD X0, X8, 0x138
	0x03E46154 LDP X9, X2, [X0]
	0x03E46158 FDIV S0, S9, S8
	0x03E4615C ADD X8, X31, 0x160
	0x03E46160 MOV X0, X21
	0x03E46164 MOV W1, W31
	0x03E46168 STR V0, [X31]
	0x03E4616C BLR X9
	0x03E46170 LDR X8, [X21]
	0x03E46174 LDR V8, [X31 + 0x160]
	0x03E46178 LDR X1, [X24]
	0x03E4617C LDRH W9, [X8 + 0x12E]
	0x03E46180 CBZ X9, 0x3E461A4
	0x03E46184 LDR X10, [X8 + 0xB0]
	0x03E46188 ADD X10, X10, 0x8
	0x03E4618C LDUR X11, [X10 - 0x8]
	0x03E46190 CMP X11, X1
	0x03E46194 B.EQ 0x3E461B4
	0x03E46198 SUBS X9, X9, 0x1
	0x03E4619C ADD X10, X10, 0x10
	0x03E461A0 B.NE 0x3E4618C
	0x03E461A4 MOV X0, X21
	0x03E461A8 MOV W2, W31
	0x03E461AC BL 0x1C5C788
	0x03E461B0 B 0x3E461C0
	0x03E461B4 LDRSW X9, [X10]
	0x03E461B8 ADD X8, X8, X9, 0x4, LSL
	0x03E461BC ADD X0, X8, 0x138
	0x03E461C0 LDP X9, X2, [X0]
	0x03E461C4 ADD X8, X31, 0x160
	0x03E461C8 MOV X0, X21
	0x03E461CC MOV W1, W31
	0x03E461D0 BLR X9
	0x03E461D4 LDR V0, [X31 + 0x164]
	0x03E461D8 LDR V1, [X31]
	0x03E461DC MOV X0, X20
	0x03E461E0 MOV X1, X31
	0x03E461E4 FMUL S8, S1, S8
	0x03E461E8 FMUL S9, S1, S0
	0x03E461EC MOV V0.16B, V8.16B
	0x03E461F0 MOV V1.16B, V9.16B
	0x03E461F4 BL 0x3CDD9A0
	0x03E461F8 CBZ X19, 0x3E464DC
	0x03E461FC MOV X0, X19
	0x03E46200 FSUB S8, S0, S8
	0x03E46204 FSUB S9, S1, S9
	0x03E46208 BL 0x3E39938
	0x03E4620C ADRP X23, 0x593000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5A3000
	006 Move X21, 0x2AE000
	007 Move W8, [X20+2034]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x313000
	015 Move X0, [X0+1816]
	016 Call 0x1C17CF4
	017 Move X0, 0x2AE000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2034], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Call Object.op_Implicit, X0
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {79}
	034 Move W8, [X19+248]
	035 Compare W8, 0
	036 JumpIfNotEqual {79}
	037 Move X0, X19
	038 Call Text.get_cachedTextGenerator, X0
	039 Compare X0, 0
	040 JumpIfEqual {93}
	041 Move X1, X31
	042 Call TextGenerator.Invalidate, X0
	043 Move X8, [X19]
	044 Move X0, X19
	045 Move X9, [X8+456]
	046 Move X1, [X8+464]
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {79}
	052 Move X20, 0x313000
	053 Move X20, [X20+1816]
	054 Move X0, [X20]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X31
	060 Call CanvasUpdateRegistry.IsRebuildingGraphics
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {76}
	065 Move X0, [X20]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X31
	071 Call CanvasUpdateRegistry.IsRebuildingLayout
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfNotEqual {84}
	076 Move X8, [X19]
	077 Move X2, [X8+968]
	078 Move X1, [X8+976]
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Return 
	084 Move X8, [X19]
	085 Move X2, [X8+728]
	086 Move X1, [X8+736]
	087 Move X0, X19
	088 Move X20, [X31+16]
	089 Move X19, [X31+24]
	090 Move X30, [X31+32]
	091 Move X21, [X31+40]
	092 CallNoReturn X2
	093 Call 0x1C17F20

Method: UnityEngine.Font get_font()

Disassembly:
	0x03E460E8 ADRP X24, 0x325000
	0x03E460EC LDR X8, [X21]
	0x03E460F0 LDR X24, [X24 + 0x4D0]
	0x03E460F4 MOV W22, W0
	0x03E460F8 FMOV S9, 1
	0x03E460FC LDRH W9, [X8 + 0x12E]
	0x03E46100 LDR X1, [X24]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move X0, [X8+16]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_font(UnityEngine.Font value)

Disassembly:
	0x03E46210 LDRB W8, [X23 + 0x78F]
	0x03E46214 CBNZ W8, 0x3E4622C
	0x03E46218 ADRP X0, 0x2B5000
	0x03E4621C LDR X0, [X0 + 0xF08]
	0x03E46220 BL 0x1C16CF4
	0x03E46224 MOVZ W8, 0x1
	0x03E46228 STRB W8, [X23 + 0x78F]
	0x03E4622C ADRP X8, 0x2B5000
	0x03E46230 LDR X8, [X8 + 0xF08]
	0x03E46234 MOV W23, W31
	0x03E46238 LDR X8, [X8]
	0x03E4623C LDR X8, [X8 + 0xB8]
	0x03E46240 LDP S0, S1, [X8]
	0x03E46244 ADRP X8, 0xFFFFFFFFFCCA3000
	0x03E46248 LDR V2, [X8 + 0xF20]
	0x03E4624C FSUB S0, S8, S0
	0x03E46250 FSUB S1, S9, S1
	0x03E46254 FMUL S0, S0, S0
	0x03E46258 FMUL S1, S1, S1
	0x03E4625C FADD S0, S0, S1
	0x03E46260 FCMP S0, S2
	0x03E46264 B.MI 0x3E463A0
	0x03E46268 LDR V0, [X31]
	0x03E4626C MOVZ W25, 0x6C
	0x03E46270 UNIMPLEMENTED
	0x03E46274 LDR X8, [X21]
	0x03E46278 LDR X26, [X20 + 0x100]
	0x03E4627C LDR X1, [X24]
	0x03E46280 LDRH W9, [X8 + 0x12E]
	0x03E46284 CBZ X9, 0x3E462A8
	0x03E46288 LDR X10, [X8 + 0xB0]
	0x03E4628C ADD X10, X10, 0x8
	0x03E46290 LDUR X11, [X10 - 0x8]
	0x03E46294 CMP X11, X1
	0x03E46298 B.EQ 0x3E462B8
	0x03E4629C SUBS X9, X9, 0x1
	0x03E462A0 ADD X10, X10, 0x10
	0x03E462A4 B.NE 0x3E46290
	0x03E462A8 MOV X0, X21
	0x03E462AC MOV W2, W31
	0x03E462B0 BL 0x1C5C788
	0x03E462B4 B 0x3E462C4
	0x03E462B8 LDRSW X9, [X10]
	0x03E462BC ADD X8, X8, X9, 0x4, LSL
	0x03E462C0 ADD X0, X8, 0x138
	0x03E462C4 LDP X9, X2, [X0]
	0x03E462C8 ADD X8, X31, 0xF0
	0x03E462CC MOV X0, X21
	0x03E462D0 MOV W1, W23
	0x03E462D4 BLR X9
	0x03E462D8 ADD X0, X31, 0x160
	0x03E462DC ADD X1, X31, 0xF0
	0x03E462E0 MOVZ W2, 0x6C
	0x03E462E4 BL 0x3EB1AC0
	0x03E462E8 CBZ X26, 0x3E464DC
	0x03E462EC ADD X0, X31, 0x80
	0x03E462F0 ADD X1, X31, 0x160
	0x03E462F4 MOVZ W2, 0x6C
	0x03E462F8 AND W27, W23, 0x3
	0x03E462FC BL 0x3EB1AC0
	0x03E46300 LDR W8, [X26 + 0x18]
	0x03E46304 CMP W27, W8
	0x03E46308 B.CS 0x3E464E0
	0x03E4630C MOV W28, W27
	0x03E46310 MADD X8, X28, X25, X26
	0x03E46314 ADD X0, X8, 0x20
	0x03E46318 ADD X1, X31, 0x80
	0x03E4631C MOVZ W2, 0x6C
	0x03E46320 BL 0x3EB1AC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5A3000
	006 Move W8, [X21+2035]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x31D000
	014 Move X0, [X0+920]
	015 Call 0x1C17CF4
	016 Move X0, 0x2AE000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2035], W8
	021 Move X8, [X19+216]
	022 Compare X8, 0
	023 JumpIfEqual {92}
	024 Move X9, 0x2AE000
	025 Move X9, [X9+1432]
	026 Move X21, [X8+16]
	027 Move X0, [X9]
	028 Move W9, [X0+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X21
	033 Move X1, X20
	034 Move X2, X31
	035 Call Object.op_Equality, X0, X1
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {45}
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 
	045 Move X0, X19
	046 Move X1, X31
	047 Call Behaviour.get_isActiveAndEnabled, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {62}
	052 Move X8, 0x31D000
	053 Move X8, [X8+920]
	054 Move X0, [X8]
	055 Move W8, [X0+224]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, X19
	060 Move X1, X31
	061 Call FontUpdateTracker.UntrackText, X0
	062 Move X8, [X19+216]
	063 Compare X8, 0
	064 JumpIfEqual {92}
	065 Move X0, X19
	066 Move X1, X31
	067 Move [X8+16], X20
	068 Call Behaviour.get_isActiveAndEnabled, X0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {83}
	073 Move X8, 0x31D000
	074 Move X8, [X8+920]
	075 Move X0, [X8]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X19
	081 Move X1, X31
	082 Call FontUpdateTracker.TrackText, X0
	083 Move X8, [X19]
	084 Move X0, X19
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X2, [X8+728]
	088 Move X1, [X8+736]
	089 Move X30, [X31+32]
	090 Move X21, [X31+40]
	091 CallNoReturn X2
	092 Call 0x1C17F20

Method: System.String get_text()

Disassembly:
	0x03E46324 LDR X8, [X20 + 0x100]
	0x03E46328 CBZ X8, 0x3E464DC

ISIL:
	001 Move X0, [X0+224]
	002 Return X0

Method: System.Void set_text(System.String value)

Disassembly:
	0x03E4632C LDR W9, [X8 + 0x18]
	0x03E46330 CMP W27, W9
	0x03E46334 B.CS 0x3E464E0
	0x03E46338 MADD X8, X28, X25, X8
	0x03E4633C LDR V0, [X8 + 0x20]
	0x03E46340 LDR V1, [X8 + 0x28]
	0x03E46344 LDR V2, [X31]
	0x00000000 INVALID
	0x03E4634C STR D0, [X8 + 0x20]
	0x03E46350 FMUL S1, S2, S1
	0x03E46354 STR S1, [X8 + 0x28]
	0x03E46358 LDR X1, [X20 + 0x100]
	0x03E4635C CBZ X1, 0x3E464DC
	0x03E46360 LDR W8, [X1 + 0x18]
	0x03E46364 CMP W27, W8
	0x03E46368 B.CS 0x3E464E0
	0x03E4636C MADD X8, X28, X25, X1
	0x03E46370 LDP S0, S1, [X8 + 0x20]
	0x03E46374 CMP W27, 0x3
	0x03E46378 FADD S0, S8, S0
	0x03E4637C FADD S1, S9, S1
	0x03E46380 STP S0, S1, [X8 + 0x20]
	0x03E46384 B.NE 0x3E46390
	0x03E46388 MOV X0, X19
	0x03E4638C BL 0x3E464E4
	0x03E46390 ADD W23, W23, 0x1
	0x03E46394 CMP W23, W22
	0x03E46398 B.NE 0x3E46274
	0x03E4639C B 0x3E464B0
	0x03E463A0 LDR V0, [X31]
	0x03E463A4 MOVZ W25, 0x6C
	0x03E463A8 UNIMPLEMENTED
	0x03E463AC LDR X8, [X21]
	0x03E463B0 LDR X26, [X20 + 0x100]
	0x03E463B4 LDR X1, [X24]
	0x03E463B8 LDRH W9, [X8 + 0x12E]
	0x03E463BC CBZ X9, 0x3E463E0
	0x03E463C0 LDR X10, [X8 + 0xB0]
	0x03E463C4 ADD X10, X10, 0x8
	0x03E463C8 LDUR X11, [X10 - 0x8]
	0x03E463CC CMP X11, X1
	0x03E463D0 B.EQ 0x3E463F0
	0x03E463D4 SUBS X9, X9, 0x1
	0x03E463D8 ADD X10, X10, 0x10
	0x03E463DC B.NE 0x3E463C8
	0x03E463E0 MOV X0, X21
	0x03E463E4 MOV W2, W31
	0x03E463E8 BL 0x1C5C788
	0x03E463EC B 0x3E463FC
	0x03E463F0 LDRSW X9, [X10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5A3000
	006 Move W8, [X21+2036]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2AE000
	014 Move X0, [X0+2440]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2036], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Call String.IsNullOrEmpty, X0
	021 Move X8, [X19+224]
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfNotEqual {40}
	026 Move X0, X8
	027 Move X1, X31
	028 Call String.IsNullOrEmpty, X0
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {63}
	033 Move X8, 0x2AE000
	034 Move X8, [X8+2440]
	035 Move X9, [X19]
	036 Move X8, [X8]
	037 Move [X19+224], X8
	038 Move X2, [X9+760]
	039 Move X1, [X9+768]
	040 Move X0, X8
	041 Move X1, X20
	042 Move X2, X31
	043 Call String.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {63}
	048 Move X8, [X19]
	049 Move [X19+224], X20
	050 Move X0, X19
	051 Move X9, [X8+760]
	052 Move X1, [X8+768]
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move X8, [X19]
	055 Move X2, [X8+744]
	056 Move X1, [X8+752]
	057 Move X0, X19
	058 Move X20, [X31+16]
	059 Move X19, [X31+24]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 CallNoReturn X2
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return 

Method: System.Boolean get_supportRichText()

Disassembly:
	0x03E463F4 ADD X8, X8, X9, 0x4, LSL
	0x03E463F8 ADD X0, X8, 0x138
	0x03E463FC LDP X9, X2, [X0]
	0x03E46400 ADD X8, X31, 0xF0
	0x03E46404 MOV X0, X21
	0x03E46408 MOV W1, W23
	0x03E4640C BLR X9

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+49]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_supportRichText(System.Boolean value)

Disassembly:
	0x03E46410 ADD X0, X31, 0x160
	0x03E46414 ADD X1, X31, 0xF0
	0x03E46418 MOVZ W2, 0x6C
	0x03E4641C BL 0x3EB1AC0
	0x03E46420 CBZ X26, 0x3E464DC
	0x03E46424 ADD X0, X31, 0x10
	0x03E46428 ADD X1, X31, 0x160
	0x03E4642C MOVZ W2, 0x6C
	0x03E46430 AND W27, W23, 0x3
	0x03E46434 BL 0x3EB1AC0
	0x03E46438 LDR W8, [X26 + 0x18]
	0x03E4643C CMP W27, W8
	0x03E46440 B.CS 0x3E464E0
	0x03E46444 MOV W28, W27
	0x03E46448 MADD X8, X28, X25, X26
	0x03E4644C ADD X0, X8, 0x20
	0x03E46450 ADD X1, X31, 0x10
	0x03E46454 MOVZ W2, 0x6C
	0x03E46458 BL 0x3EB1AC0
	0x03E4645C LDR X8, [X20 + 0x100]
	0x03E46460 CBZ X8, 0x3E464DC
	0x03E46464 LDR W9, [X8 + 0x18]
	0x03E46468 CMP W27, W9
	0x03E4646C B.CS 0x3E464E0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {27}
	006 Move W9, [X8+49]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 And W9, W1, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move [X8+49], W9
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Call 0x1C17F20

Method: System.Boolean get_resizeTextForBestFit()

Disassembly:
	0x03E46470 MADD X8, X28, X25, X8
	0x03E46474 LDR V0, [X8 + 0x20]
	0x03E46478 LDR V1, [X8 + 0x28]
	0x03E4647C LDR V2, [X31]
	0x03E46480 CMP W27, 0x3
	0x00000000 INVALID
	0x03E46488 STR D0, [X8 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+32]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_resizeTextForBestFit(System.Boolean value)

Disassembly:
	0x03E4648C FMUL S1, S2, S1
	0x03E46490 STR S1, [X8 + 0x28]
	0x03E46494 B.NE 0x3E464A4
	0x03E46498 LDR X1, [X20 + 0x100]
	0x03E4649C MOV X0, X19
	0x03E464A0 BL 0x3E464E4
	0x03E464A4 ADD W23, W23, 0x1
	0x03E464A8 CMP W23, W22
	0x03E464AC B.NE 0x3E463AC
	0x03E464B0 STRB W31, [X20 + 0xF8]
	0x03E464B4 ADD X31, X31, 0x290
	0x03E464B8 LDP X20, X19, [X31 + 0x70]
	0x03E464BC LDP X22, X21, [X31 + 0x60]
	0x03E464C0 LDP X24, X23, [X31 + 0x50]
	0x03E464C4 LDP X26, X25, [X31 + 0x40]
	0x03E464C8 LDP X28, X27, [X31 + 0x30]
	0x03E464CC LDP X29, X30, [X31 + 0x20]
	0x03E464D0 LDP D9, D8, [X31 + 0x10]
	0x03E464D4 LDR V10, [X31], #0x80
	0x03E464D8 RET
	0x03E464DC BL 0x1C16F20
	0x03E464E0 BL 0x1C16F28
	0x03E464E4 SUB X31, X31, 0x60
	0x03E464E8 STP X30, X23, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {27}
	006 Move W9, [X8+32]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 And W9, W1, 1
	010 NotImplemented "Instruction CMP not yet implemented."
	011 Move [X8+32], W9
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 
	027 Call 0x1C17F20

Method: System.Int32 get_resizeTextMinSize()

Disassembly:
	0x03E464EC STP X22, X21, [X31 + 0x40]
	0x03E464F0 STP X20, X19, [X31 + 0x50]
	0x03E464F4 ADRP X21, 0x5A2000
	0x03E464F8 LDRB W8, [X21 + 0x81D]
	0x03E464FC MOV X20, X1
	0x03E46500 MOV X19, X0
	0x03E46504 TBNZ X8, 0x0, 0x3E4651C

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+36]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_resizeTextMinSize(System.Int32 value)

Disassembly:
	0x03E46508 ADRP X0, 0x2B1000
	0x03E4650C LDR X0, [X0 + 0x978]
	0x03E46510 BL 0x1C16CF4
	0x03E46514 MOVZ W8, 0x1
	0x03E46518 STRB W8, [X21 + 0x81D]
	0x03E4651C LDR X8, [X19 + 0x10]
	0x03E46520 CBZ X8, 0x3E465E4
	0x03E46524 LDR W21, [X8 + 0x18]
	0x03E46528 CBZ X20, 0x3E465EC
	0x03E4652C MOV X22, X31
	0x03E46530 ADD X23, X20, 0x34
	0x03E46534 LDR W8, [X20 + 0x18]
	0x03E46538 CMP X22, X8
	0x03E4653C B.CS 0x3E465F0
	0x03E46540 LDP S0, S1, [X23 - 0x14]
	0x03E46544 LDUR V2, [X23 - 0xC]
	0x03E46548 LDR W1, [X23 + 0x14]
	0x03E4654C LDP S3, S4, [X23 + 0x18]
	0x03E46550 LDP S5, S6, [X23 + 0x20]
	0x03E46554 LDR V7, [X23 + 0x28]
	0x03E46558 LDUR X8, [X23 + 0x2C]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W9, [X8+36]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move [X8+36], W1
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Call 0x1C17F20

Method: System.Int32 get_resizeTextMaxSize()

Disassembly:
	0x03E4655C LDR V16, [X23 + 0x34]
	0x03E46560 LDUR X9, [X23 - 0x8]
	0x03E46564 LDP S17, S18, [X23]
	0x03E46568 LDR X10, [X23 + 0x8]
	0x03E4656C LDR V19, [X23 + 0x10]
	0x03E46570 MOV X0, X19
	0x03E46574 STR S18, [X31 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+40]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_resizeTextMaxSize(System.Int32 value)

Disassembly:
	0x03E46578 STUR X10, [X31 + 0x24]
	0x03E4657C STR S19, [X31 + 0x2C]
	0x03E46580 STR S17, [X31 + 0x18]
	0x03E46584 STR X9, [X31 + 0x10]
	0x03E46588 STR S16, [X31 + 0xC]
	0x03E4658C STUR X8, [X31 + 0x4]
	0x03E46590 STR S7, [X31]
	0x03E46594 BL 0x3E4A224
	0x03E46598 ADD X22, X22, 0x1
	0x03E4659C CMP X22, 0x4
	0x03E465A0 ADD X23, X23, 0x6C
	0x03E465A4 B.NE 0x3E46534
	0x03E465A8 ADD W20, W21, 0x2
	0x03E465AC ADD W2, W21, 0x1
	0x03E465B0 MOV X0, X19
	0x03E465B4 MOV W1, W21
	0x03E465B8 MOV W3, W20
	0x03E465BC BL 0x3E39B84
	0x03E465C0 ADD W2, W21, 0x3
	0x03E465C4 MOV X0, X19
	0x03E465C8 MOV W1, W20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W9, [X8+40]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move [X8+40], W1
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Call 0x1C17F20

Method: UnityEngine.TextAnchor get_alignment()

Disassembly:
	0x03E465CC MOV W3, W21
	0x03E465D0 LDP X20, X19, [X31 + 0x50]
	0x03E465D4 LDP X22, X21, [X31 + 0x40]
	0x03E465D8 LDP X30, X23, [X31 + 0x30]
	0x03E465DC ADD X31, X31, 0x60
	0x03E465E0 B 0x3E39B84
	0x03E465E4 MOV W21, W31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+44]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_alignment(UnityEngine.TextAnchor value)

Disassembly:
	0x03E465E8 CBNZ X20, 0x3E4652C
	0x03E465EC BL 0x1C16F20
	0x03E465F0 BL 0x1C16F28
	0x03E465F4 RET
	0x03E465F8 RET
	0x03E465FC FMOV S0, W31
	0x03E46600 RET
	0x03E46604 SUB X31, X31, 0x150
	0x03E46608 STR D8, [X31 + 0x120]
	0x03E4660C STR X29, [X31 + 0x128]
	0x03E46610 STP X30, X21, [X31 + 0x130]
	0x03E46614 STP X20, X19, [X31 + 0x140]
	0x03E46618 ADRP X20, 0x593000
	0x03E4661C LDRB W8, [X20 + 0x78F]
	0x03E46620 MOV X19, X0
	0x03E46624 MOVI V0.2D, 0x0
	0x03E46628 STP V0, V0, [X31 + 0x100]
	0x03E4662C STP V0, V0, [X31 + 0xE0]
	0x03E46630 STP V0, V0, [X31 + 0xC0]
	0x03E46634 CBNZ W8, 0x3E4664C
	0x03E46638 ADRP X0, 0x2B5000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W9, [X8+44]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move [X8+44], W1
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Call 0x1C17F20

Method: System.Boolean get_alignByGeometry()

Disassembly:
	0x03E4663C LDR X0, [X0 + 0xF08]
	0x03E46640 BL 0x1C16CF4
	0x03E46644 MOVZ W8, 0x1
	0x03E46648 STRB W8, [X20 + 0x78F]
	0x03E4664C ADRP X8, 0x2B5000
	0x03E46650 LDR X8, [X8 + 0xF08]
	0x03E46654 MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+48]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_alignByGeometry(System.Boolean value)

Disassembly:
	0x03E46658 LDR X8, [X8]
	0x03E4665C LDR X8, [X8 + 0xB8]
	0x03E46660 LDP S0, S1, [X8]
	0x03E46664 ADD X8, X31, 0xC0
	0x03E46668 BL 0x3E45CAC
	0x03E4666C MOV X0, X19
	0x03E46670 BL 0x3E44EDC
	0x03E46674 LDR X20, [X19 + 0xE0]
	0x03E46678 MOV X21, X0
	0x03E4667C ADD X0, X31, 0x60
	0x03E46680 ADD X1, X31, 0xC0
	0x03E46684 MOVZ W2, 0x60
	0x03E46688 BL 0x3EB1AC0
	0x03E4668C CBZ X21, 0x3E466DC
	0x03E46690 ADD X0, X31, 0x0
	0x03E46694 ADD X1, X31, 0x60
	0x03E46698 MOVZ W2, 0x60
	0x03E4669C BL 0x3EB1AC0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {18}
	005 Move W9, [X8+48]
	006 NotImplemented "Instruction CMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 And W9, W1, 1
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move [X8+48], W9
	011 Move X8, [X0]
	012 Move X2, [X8+760]
	013 Move X1, [X8+768]
	014 Move X30, [X31+16]
	015 CallNoReturn X2
	016 Move X30, [X31+16]
	017 Return 
	018 Call 0x1C17F20

Method: System.Int32 get_fontSize()

Disassembly:
	0x03E466A0 ADD X2, X31, 0x0
	0x03E466A4 MOV X0, X21
	0x03E466A8 MOV X1, X20
	0x03E466AC MOV X3, X31
	0x03E466B0 BL 0x3CCEFC0
	0x03E466B4 MOV X0, X19
	0x03E466B8 MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_fontSize(System.Int32 value)

Disassembly:
	0x03E466BC BL 0x3E458D0
	0x03E466C0 FDIV S0, S8, S0
	0x03E466C4 LDP X20, X19, [X31 + 0x140]
	0x03E466C8 LDP X30, X21, [X31 + 0x130]
	0x03E466CC LDR X29, [X31 + 0x128]
	0x03E466D0 LDR V8, [X31 + 0x120]
	0x03E466D4 ADD X31, X31, 0x150
	0x03E466D8 RET
	0x03E466DC BL 0x1C16F20
	0x03E466E0 FMOV S0, -1
	0x03E466E4 RET
	0x03E466E8 FMOV S0, W31
	0x03E466EC RET
	0x03E466F0 SUB X31, X31, 0x150
	0x03E466F4 STR D8, [X31 + 0x120]
	0x03E466F8 STR X29, [X31 + 0x128]
	0x03E466FC STP X30, X21, [X31 + 0x130]
	0x03E46700 STP X20, X19, [X31 + 0x140]
	0x03E46704 MOVI V0.2D, 0x0
	0x03E46708 MOV X1, X31
	0x03E4670C MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W9, [X8+24]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move [X8+24], W1
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Call 0x1C17F20

Method: UnityEngine.HorizontalWrapMode get_horizontalOverflow()

Disassembly:
	0x03E46710 STP V0, V0, [X31 + 0x100]
	0x03E46714 STP V0, V0, [X31 + 0xE0]
	0x03E46718 STP V0, V0, [X31 + 0xC0]
	0x03E4671C BL 0x3CDD3D4
	0x03E46720 MOV V0.16B, V2.16B
	0x03E46724 ADD X8, X31, 0xC0
	0x03E46728 FMOV S1, W31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+52]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_horizontalOverflow(UnityEngine.HorizontalWrapMode value)

Disassembly:
	0x03E4672C MOV X0, X19
	0x03E46730 BL 0x3E45CAC
	0x03E46734 MOV X0, X19
	0x03E46738 BL 0x3E44EDC
	0x03E4673C LDR X20, [X19 + 0xE0]
	0x03E46740 MOV X21, X0
	0x03E46744 ADD X0, X31, 0x60
	0x03E46748 ADD X1, X31, 0xC0
	0x03E4674C MOVZ W2, 0x60
	0x03E46750 BL 0x3EB1AC0
	0x03E46754 CBZ X21, 0x3E467A4
	0x03E46758 ADD X0, X31, 0x0
	0x03E4675C ADD X1, X31, 0x60
	0x03E46760 MOVZ W2, 0x60
	0x03E46764 BL 0x3EB1AC0
	0x03E46768 ADD X2, X31, 0x0
	0x03E4676C MOV X0, X21
	0x03E46770 MOV X1, X20
	0x03E46774 MOV X3, X31
	0x03E46778 BL 0x3CCF0CC
	0x03E4677C MOV X0, X19

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W9, [X8+52]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move [X8+52], W1
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Call 0x1C17F20

Method: UnityEngine.VerticalWrapMode get_verticalOverflow()

Disassembly:
	0x03E46780 MOV V8.16B, V0.16B
	0x03E46784 BL 0x3E458D0
	0x03E46788 FDIV S0, S8, S0
	0x03E4678C LDP X20, X19, [X31 + 0x140]
	0x03E46790 LDP X30, X21, [X31 + 0x130]
	0x03E46794 LDR X29, [X31 + 0x128]
	0x03E46798 LDR V8, [X31 + 0x120]

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+56]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_verticalOverflow(UnityEngine.VerticalWrapMode value)

Disassembly:
	0x03E4679C ADD X31, X31, 0x150
	0x03E467A0 RET
	0x03E467A4 BL 0x1C16F20
	0x03E467A8 FMOV S0, -1
	0x03E467AC RET
	0x03E467B0 MOV W0, W31
	0x03E467B4 RET
	0x03E467B8 LDR X0, [X0 + 0x110]
	0x03E467BC RET
	0x03E467C0 STP X30, X19, [X31 - 0x10]!
	0x03E467C4 MOVZ W2, 0x1
	0x03E467C8 MOV X19, X0
	0x03E467CC BL 0x3E467E0
	0x03E467D0 MOVZ W1, 0x1
	0x03E467D4 MOV X0, X19
	0x03E467D8 LDP X30, X19, [X31], #0x10
	0x03E467DC B 0x3E4691C
	0x03E467E0 STP X30, X23, [X31 - 0x30]!
	0x03E467E4 STP X22, X21, [X31 + 0x10]
	0x03E467E8 STP X20, X19, [X31 + 0x20]
	0x03E467EC ADRP X22, 0x5A2000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W9, [X8+56]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move [X8+56], W1
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Call 0x1C17F20

Method: System.Single get_lineSpacing()

Disassembly:
	0x03E467F0 ADRP X23, 0x2AD000
	0x03E467F4 LDRB W8, [X22 + 0x800]
	0x03E467F8 LDR X23, [X23 + 0x598]
	0x03E467FC MOV W21, W2
	0x03E46800 MOV X19, X1
	0x03E46804 MOV X20, X0
	0x03E46808 TBNZ X8, 0x0, 0x3E46820

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move V0, [X8+60]
	006 Move X30, [X31+16]
	007 Return V0
	008 Call 0x1C17F20

Method: System.Void set_lineSpacing(System.Single value)

Disassembly:
	0x03E4680C ADRP X0, 0x2AD000
	0x03E46810 LDR X0, [X0 + 0x598]
	0x03E46814 BL 0x1C16CF4
	0x03E46818 MOVZ W8, 0x1
	0x03E4681C STRB W8, [X22 + 0x800]
	0x03E46820 LDR X0, [X23]
	0x03E46824 LDR X22, [X20 + 0x110]
	0x03E46828 LDR W8, [X0 + 0xE0]
	0x03E4682C CBNZ W8, 0x3E46834
	0x03E46830 BL 0x1C16DFC
	0x03E46834 MOV X0, X22
	0x03E46838 MOV X1, X31
	0x03E4683C MOV X2, X31
	0x03E46840 BL 0x3C354F8
	0x03E46844 TBZ X0, 0x0, 0x3E46858
	0x03E46848 LDR X0, [X20 + 0x110]
	0x03E4684C CBZ X0, 0x3E46918
	0x03E46850 MOV X1, X20
	0x03E46854 BL 0x3E47214
	0x03E46858 TBZ X21, 0x0, 0x3E46860
	0x03E4685C STR X19, [X20 + 0x110]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move V1, [X8+60]
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move [X8+60], S0
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Call 0x1C17F20

Method: UnityEngine.FontStyle get_fontStyle()

Disassembly:
	0x03E46860 LDR X0, [X23]
	0x03E46864 LDR W8, [X0 + 0xE0]
	0x03E46868 CBNZ W8, 0x3E46870
	0x03E4686C BL 0x1C16DFC
	0x03E46870 MOV X0, X19
	0x03E46874 MOV X1, X31
	0x03E46878 MOV X2, X31

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+216]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+28]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Void set_fontStyle(UnityEngine.FontStyle value)

Disassembly:
	0x03E4687C BL 0x3C354F8
	0x03E46880 TBZ X0, 0x0, 0x3E468A8
	0x03E46884 LDR X8, [X20]
	0x03E46888 MOV X0, X20
	0x03E4688C LDP X9, X1, [X8 + 0x1C8]
	0x03E46890 BLR X9
	0x03E46894 TBZ X0, 0x0, 0x3E468A8
	0x03E46898 CBZ X19, 0x3E46918
	0x03E4689C MOV X0, X19
	0x03E468A0 MOV X1, X20
	0x03E468A4 BL 0x3E472A4
	0x03E468A8 LDR X0, [X23]
	0x03E468AC LDR W8, [X0 + 0xE0]
	0x03E468B0 CBNZ W8, 0x3E468B8
	0x03E468B4 BL 0x1C16DFC
	0x03E468B8 MOV X0, X19
	0x03E468BC MOV X1, X31
	0x03E468C0 MOV X2, X31
	0x03E468C4 BL 0x3C354F8
	0x03E468C8 TBZ X0, 0x0, 0x3E46908
	0x03E468CC LDRB W8, [X20 + 0x120]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0+216]
	004 Compare X8, 0
	005 JumpIfEqual {24}
	006 Move W9, [X8+28]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 
	011 Move [X8+28], W1
	012 Move X8, [X0]
	013 Move X19, X0
	014 Move X9, [X8+760]
	015 Move X1, [X8+768]
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+744]
	020 Move X1, [X8+752]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Call 0x1C17F20

Method: System.Single get_pixelsPerUnit()

Disassembly:
	0x03E468D0 CBZ W8, 0x3E46908
	0x03E468D4 LDR X8, [X20]
	0x03E468D8 MOV X0, X20
	0x03E468DC LDP X9, X1, [X8 + 0x1C8]
	0x03E468E0 BLR X9
	0x03E468E4 TBZ X0, 0x0, 0x3E46908
	0x03E468E8 CBZ X19, 0x3E46918
	0x03E468EC MOV X0, X19
	0x03E468F0 MOV X1, X20
	0x03E468F4 LDP X20, X19, [X31 + 0x20]
	0x03E468F8 LDP X22, X21, [X31 + 0x10]
	0x03E468FC MOVZ W2, 0x1
	0x03E46900 LDP X30, X23, [X31], #0x30
	0x03E46904 B 0x3E47374
	0x03E46908 LDP X20, X19, [X31 + 0x20]
	0x03E4690C LDP X22, X21, [X31 + 0x10]
	0x03E46910 LDP X30, X23, [X31], #0x30
	0x03E46914 RET
	0x03E46918 BL 0x1C16F20
	0x03E4691C STR X30, [X31 - 0x30]!
	0x03E46920 STP X22, X21, [X31 + 0x10]
	0x03E46924 STP X20, X19, [X31 + 0x20]
	0x03E46928 ADRP X22, 0x5A2000
	0x03E4692C ADRP X21, 0x2AD000
	0x03E46930 LDRB W8, [X22 + 0x802]
	0x03E46934 LDR X21, [X21 + 0x598]
	0x03E46938 MOV W19, W1
	0x03E4693C MOV X20, X0
	0x03E46940 TBNZ X8, 0x0, 0x3E46958
	0x03E46944 ADRP X0, 0x2AD000
	0x03E46948 LDR X0, [X0 + 0x598]
	0x03E4694C BL 0x1C16CF4
	0x03E46950 MOVZ W8, 0x1
	0x03E46954 STRB W8, [X22 + 0x802]
	0x03E46958 LDR X0, [X21]
	0x03E4695C LDR X21, [X20 + 0x108]
	0x03E46960 LDR W8, [X0 + 0xE0]
	0x03E46964 CBNZ W8, 0x3E4696C
	0x03E46968 BL 0x1C16DFC
	0x03E4696C MOV X0, X21
	0x03E46970 MOV X1, X31
	0x03E46974 MOV X2, X31
	0x03E46978 BL 0x3C3883C
	0x03E4697C TBZ X0, 0x0, 0x3E46990
	0x03E46980 LDP X20, X19, [X31 + 0x20]
	0x03E46984 LDP X22, X21, [X31 + 0x10]
	0x03E46988 LDR X30, [X31], #0x30
	0x03E4698C RET
	0x03E46990 LDR X0, [X20 + 0x108]
	0x03E46994 CBZ X0, 0x3E469DC
	0x03E46998 LDRB W8, [X20 + 0x120]
	0x03E4699C ADRP X9, 0xFFFFFFFFFCCA4000
	0x03E469A0 LDR V1, [X9 + 0xBC]
	0x03E469A4 LDR X9, [X0]
	0x03E469A8 FMOV S0, 1
	0x03E469AC FMOV S2, W31
	0x03E469B0 CMP W8, 0x0
	0x03E469B4 LDR X3, [X9 + 0x448]
	0x03E469B8 LDR X2, [X9 + 0x450]
	0x03E469BC FCSEL S0, S2, S0, EQ
	0x03E469C0 ANDS W31, W19, 0x1
	0x03E469C4 LDP X20, X19, [X31 + 0x20]
	0x03E469C8 LDP X22, X21, [X31 + 0x10]
	0x03E469CC FCSEL S1, S2, S1, NE
	0x03E469D0 MOVZ W1, 0x1
	0x03E469D4 LDR X30, [X31], #0x30
	0x03E469D8 BR X3
	0x03E469DC BL 0x1C16F20
	0x03E469E0 STR X30, [X31 - 0x30]!
	0x03E469E4 STP X22, X21, [X31 + 0x10]
	0x03E469E8 STP X20, X19, [X31 + 0x20]
	0x03E469EC ADRP X22, 0x5A2000
	0x03E469F0 ADRP X20, 0x325000
	0x03E469F4 ADRP X21, 0x312000
	0x03E469F8 LDRB W8, [X22 + 0x7FD]
	0x03E469FC LDR X20, [X20 + 0x4D8]
	0x03E46A00 LDR X21, [X21 + 0xA58]
	0x03E46A04 MOV X19, X0
	0x03E46A08 TBNZ X8, 0x0, 0x3E46A2C
	0x03E46A0C ADRP X0, 0x312000
	0x03E46A10 LDR X0, [X0 + 0xA58]
	0x03E46A14 BL 0x1C16CF4

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x5A3000
	007 Move X21, 0x2AE000
	008 Move W8, [X20+2037]
	009 Move X21, [X21+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2AE000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2037], W8
	020 Move X0, X19
	021 Move X1, X31
	022 Call Graphic.get_canvas, X0
	023 Move X8, [X21]
	024 Move X20, X0
	025 Move W9, [X8+224]
	026 Compare W9, 0
	027 JumpIfNotEqual {30}
	028 Move X0, X8
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Call Object.op_Implicit, X0
	033 Move S8, 1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {103}
	038 Move X8, [X19+216]
	039 Compare X8, 0
	040 JumpIfEqual {110}
	041 Move X0, [X21]
	042 Move X21, [X8+16]
	043 Move W9, [X0+224]
	044 Compare W9, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X21
	048 Move X1, X31
	049 Call Object.op_Implicit, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {66}
	054 Move X8, [X19+216]
	055 Compare X8, 0
	056 JumpIfEqual {110}
	057 Move X0, [X8+16]
	058 Compare X0, 0
	059 JumpIfEqual {110}
	060 Move X1, X31
	061 Call Font.get_dynamic, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {77}
	066 Compare X20, 0
	067 JumpIfEqual {110}
	068 Move X0, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X30, [X31+16]
	072 Move X21, [X31+24]
	073 Move X1, X31
	074 Move V8, [X31+48]
	075 Call Canvas.get_scaleFactor, X0
	076 Return V0
	077 Move X8, [X19+216]
	078 Compare X8, 0
	079 JumpIfEqual {110}
	080 Move W9, [X8+24]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X0, [X8+16]
	083 Compare X0, 0
	084 JumpIfEqual {110}
	085 Move X1, X31
	086 Call Font.get_fontSize, X0
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X8, [X19+216]
	089 Compare X8, 0
	090 JumpIfEqual {110}
	091 Move X0, [X8+16]
	092 Compare X0, 0
	093 JumpIfEqual {110}
	094 Move X1, X31
	095 Call Font.get_fontSize, X0
	096 Move X8, [X19+216]
	097 Compare X8, 0
	098 JumpIfEqual {110}
	099 Move V0, [X8+24]
	100 NotImplemented "Instruction SCVTF not yet implemented."
	101 NotImplemented "Instruction SCVTF not yet implemented."
	102 NotImplemented "Instruction FDIV not yet implemented."
	103 Move X20, [X31+32]
	104 Move X19, [X31+40]
	105 Move X30, [X31+16]
	106 Move X21, [X31+24]
	107 Move V0, V8
	108 Move V8, [X31+48]
	109 Return V0
	110 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03E46A18 ADRP X0, 0x325000
	0x03E46A1C LDR X0, [X0 + 0x4D8]
	0x03E46A20 BL 0x1C16CF4
	0x03E46A24 MOVZ W8, 0x1
	0x03E46A28 STRB W8, [X22 + 0x7FD]
	0x03E46A2C MOVZ W8, 0x1
	0x03E46A30 STR W8, [X19 + 0x100]
	0x03E46A34 LDR X0, [X20]
	0x03E46A38 BL 0x1C16F10
	0x03E46A3C MOV X20, X0
	0x03E46A40 BL 0x3E46A6C
	0x03E46A44 STR X20, [X19 + 0x118]
	0x03E46A48 LDR X0, [X21]
	0x03E46A4C LDR W8, [X0 + 0xE0]
	0x03E46A50 CBNZ W8, 0x3E46A58
	0x03E46A54 BL 0x1C16DFC
	0x03E46A58 MOV X0, X19
	0x03E46A5C LDP X20, X19, [X31 + 0x20]
	0x03E46A60 LDP X22, X21, [X31 + 0x10]
	0x03E46A64 LDR X30, [X31], #0x30
	0x03E46A68 B 0x3E3B678
	0x03E46A6C STP X30, X21, [X31 - 0x20]!
	0x03E46A70 STP X20, X19, [X31 + 0x10]
	0x03E46A74 ADRP X20, 0x5A2000
	0x03E46A78 ADRP X21, 0x313000
	0x03E46A7C LDRB W8, [X20 + 0x803]
	0x03E46A80 LDR X21, [X21 + 0xC98]
	0x03E46A84 MOV X19, X0
	0x03E46A88 TBNZ X8, 0x0, 0x3E46AA0
	0x03E46A8C ADRP X0, 0x313000
	0x03E46A90 LDR X0, [X0 + 0xC98]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5A3000
	005 Move W8, [X20+2038]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x31D000
	012 Move X0, [X0+920]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2038], W8
	016 Move X0, X19
	017 Move X1, X31
	018 Call MaskableGraphic.OnEnable, X0
	019 Move X0, X19
	020 Call Text.get_cachedTextGenerator, X0
	021 Compare X0, 0
	022 JumpIfEqual {39}
	023 Move X20, 0x31D000
	024 Move X20, [X20+920]
	025 Move X1, X31
	026 Call TextGenerator.Invalidate, X0
	027 Move X0, [X20]
	028 Move W8, [X0+224]
	029 Compare W8, 0
	030 JumpIfNotEqual {32}
	031 Call 0x1C17DFC
	032 Move X0, X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X1, X31
	036 Move X30, [X31+32]
	037 Call FontUpdateTracker.TrackText, X0
	038 Return 
	039 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03E46A94 BL 0x1C16CF4
	0x03E46A98 MOVZ W8, 0x1
	0x03E46A9C STRB W8, [X20 + 0x803]
	0x03E46AA0 LDR X1, [X21]
	0x03E46AA4 MOV X0, X19
	0x03E46AA8 LDP X20, X19, [X31 + 0x10]
	0x03E46AAC LDP X30, X21, [X31], #0x20
	0x03E46AB0 B 0x27288A8
	0x03E46AB4 RET
	0x03E46AB8 RET
	0x03E46ABC RET
	0x03E46AC0 STP X30, X21, [X31 - 0x20]!
	0x03E46AC4 STP X20, X19, [X31 + 0x10]
	0x03E46AC8 ADRP X21, 0x5A2000
	0x03E46ACC ADRP X20, 0x2AD000
	0x03E46AD0 LDRB W8, [X21 + 0x7FE]
	0x03E46AD4 LDR X20, [X20 + 0x598]
	0x03E46AD8 MOV X19, X0
	0x03E46ADC TBNZ X8, 0x0, 0x3E46AF4
	0x03E46AE0 ADRP X0, 0x2AD000
	0x03E46AE4 LDR X0, [X0 + 0x598]
	0x03E46AE8 BL 0x1C16CF4
	0x03E46AEC MOVZ W8, 0x1
	0x03E46AF0 STRB W8, [X21 + 0x7FE]
	0x03E46AF4 LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x5A3000
	006 Move X21, 0x31D000
	007 Move W8, [X20+2039]
	008 Move X21, [X21+920]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x31D000
	015 Move X0, [X0+920]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2039], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Call FontUpdateTracker.UntrackText, X0
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call MaskableGraphic.OnDisable, X0
	034 Return 

Method: System.Void UpdateGeometry()

Disassembly:
	0x03E46AF8 LDR X20, [X19 + 0x110]
	0x03E46AFC LDR W8, [X0 + 0xE0]
	0x03E46B00 CBNZ W8, 0x3E46B08
	0x03E46B04 BL 0x1C16DFC
	0x03E46B08 MOV X0, X20
	0x03E46B0C MOV X1, X31
	0x03E46B10 MOV X2, X31
	0x03E46B14 BL 0x3C354F8
	0x03E46B18 TBZ X0, 0x0, 0x3E46B28
	0x03E46B1C LDR X0, [X19 + 0x110]
	0x03E46B20 CBZ X0, 0x3E46B3C
	0x03E46B24 BL 0x3E46B40
	0x03E46B28 MOV X0, X19
	0x03E46B2C LDP X20, X19, [X31 + 0x10]
	0x03E46B30 MOV X1, X31
	0x03E46B34 LDP X30, X21, [X31], #0x20
	0x03E46B38 B 0x3E5AD84
	0x03E46B3C BL 0x1C16F20
	0x03E46B40 STR X30, [X31 - 0x40]!
	0x03E46B44 STP X24, X23, [X31 + 0x10]
	0x03E46B48 STP X22, X21, [X31 + 0x20]
	0x03E46B4C STP X20, X19, [X31 + 0x30]
	0x03E46B50 ADRP X20, 0x5A2000
	0x03E46B54 LDRB W8, [X20 + 0x809]
	0x03E46B58 MOV X19, X0
	0x03E46B5C TBNZ X8, 0x0, 0x3E46BC8
	0x03E46B60 ADRP X0, 0x325000
	0x03E46B64 LDR X0, [X0 + 0x4E0]
	0x03E46B68 BL 0x1C16CF4
	0x03E46B6C ADRP X0, 0x2AD000
	0x03E46B70 LDR X0, [X0 + 0xE00]
	0x03E46B74 BL 0x1C16CF4
	0x03E46B78 ADRP X0, 0x325000
	0x03E46B7C LDR X0, [X0 + 0x4E8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5A3000
	005 Move W8, [X20+2040]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x2AE000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2040], W8
	016 Move X8, [X19+216]
	017 Compare X8, 0
	018 JumpIfEqual {46}
	019 Move X9, 0x2AE000
	020 Move X9, [X9+1432]
	021 Move X20, [X8+16]
	022 Move X0, [X9]
	023 Move W9, [X0+224]
	024 Compare W9, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {42}
	035 Move X0, X19
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+32]
	040 Call Graphic.UpdateGeometry, X0
	041 Return 
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Return 
	046 Call 0x1C17F20

Method: System.Void AssignDefaultFont()

Disassembly:
	0x03E46B80 BL 0x1C16CF4
	0x03E46B84 ADRP X0, 0x325000
	0x03E46B88 LDR X0, [X0 + 0x4F0]
	0x03E46B8C BL 0x1C16CF4
	0x03E46B90 ADRP X0, 0x2AD000
	0x03E46B94 LDR X0, [X0 + 0xE18]
	0x03E46B98 BL 0x1C16CF4
	0x03E46B9C ADRP X0, 0x325000
	0x03E46BA0 LDR X0, [X0 + 0x4F8]
	0x03E46BA4 BL 0x1C16CF4
	0x03E46BA8 ADRP X0, 0x325000
	0x03E46BAC LDR X0, [X0 + 0x500]
	0x03E46BB0 BL 0x1C16CF4
	0x03E46BB4 ADRP X0, 0x2AD000
	0x03E46BB8 LDR X0, [X0 + 0x598]
	0x03E46BBC BL 0x1C16CF4
	0x03E46BC0 MOVZ W8, 0x1
	0x03E46BC4 STRB W8, [X20 + 0x809]
	0x03E46BC8 LDRB W8, [X19 + 0x20]
	0x03E46BCC CBNZ W8, 0x3E46C34
	0x03E46BD0 MOV X0, X19
	0x03E46BD4 BL 0x3E474A0
	0x03E46BD8 TBNZ X0, 0x0, 0x3E46C34
	0x03E46BDC LDR X0, [X19 + 0x28]
	0x03E46BE0 CBZ X0, 0x3E46E60
	0x03E46BE4 LDR W8, [X0 + 0x18]
	0x03E46BE8 CBZ W8, 0x3E46C34
	0x03E46BEC ADRP X20, 0x325000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x5A3000
	007 Move X21, 0x326000
	008 Move X22, 0x326000
	009 Move W8, [X20+2041]
	010 Move X21, [X21+1208]
	011 Move X22, [X22+1216]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x326000
	018 Move X0, [X0+1216]
	019 Call 0x1C17CF4
	020 Move X0, 0x326000
	021 Move X0, [X0+1208]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2041], W8
	025 Move X0, [X21]
	026 Move X1, [X22]
	027 Call 0x2242EFC, X0
	028 Move X1, X0
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Call Text.set_font, X0, X1
	036 Return 

Method: System.Void AssignDefaultFontIfNecessary()

Disassembly:
	0x03E46BF0 LDR X20, [X20 + 0x500]
	0x03E46BF4 MOV W1, W31
	0x03E46BF8 LDR X2, [X20]
	0x03E46BFC BL 0x301BCCC
	0x03E46C00 CBZ X0, 0x3E46E60
	0x03E46C04 MOVZ W1, 0x1
	0x03E46C08 MOVZ W2, 0x1
	0x03E46C0C BL 0x3E470A0
	0x03E46C10 LDR X0, [X19 + 0x28]
	0x03E46C14 CBZ X0, 0x3E46E60
	0x03E46C18 LDR X2, [X20]
	0x03E46C1C MOV W1, W31
	0x03E46C20 BL 0x301BCCC
	0x03E46C24 MOV X1, X0
	0x03E46C28 MOVZ W2, 0x1
	0x03E46C2C MOV X0, X19
	0x03E46C30 BL 0x3E47374
	0x03E46C34 ADRP X20, 0x325000
	0x03E46C38 LDR X20, [X20 + 0x4E0]
	0x03E46C3C MOV X0, X19
	0x03E46C40 BL 0x3E4787C
	0x03E46C44 LDR X1, [X20]
	0x03E46C48 MOV X21, X0
	0x03E46C4C BL 0x21BD4C4
	0x03E46C50 CMP W0, 0x2
	0x03E46C54 B.LT 0x3E46E48
	0x03E46C58 MOV X0, X19
	0x03E46C5C BL 0x3E47970
	0x03E46C60 CBZ X21, 0x3E46E60
	0x03E46C64 ADRP X10, 0x325000
	0x03E46C68 LDR X8, [X21]
	0x03E46C6C LDR X10, [X10 + 0x4E8]
	0x03E46C70 MOV X20, X0
	0x03E46C74 LDRH W9, [X8 + 0x12E]
	0x03E46C78 LDR X1, [X10]
	0x03E46C7C CBZ X9, 0x3E46CA0
	0x03E46C80 LDR X10, [X8 + 0xB0]
	0x03E46C84 ADD X10, X10, 0x8
	0x03E46C88 LDUR X11, [X10 - 0x8]
	0x03E46C8C CMP X11, X1
	0x03E46C90 B.EQ 0x3E46CB0
	0x03E46C94 SUBS X9, X9, 0x1
	0x03E46C98 ADD X10, X10, 0x10
	0x03E46C9C B.NE 0x3E46C88
	0x03E46CA0 MOV X0, X21
	0x03E46CA4 MOV W2, W31
	0x03E46CA8 BL 0x1C5C788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5A3000
	005 Move W8, [X20+2042]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x2AE000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move X0, 0x326000
	015 Move X0, [X0+1216]
	016 Call 0x1C17CF4
	017 Move X0, 0x326000
	018 Move X0, [X0+1208]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2042], W8
	022 Move X8, [X19+216]
	023 Compare X8, 0
	024 JumpIfEqual {59}
	025 Move X9, 0x2AE000
	026 Move X9, [X9+1432]
	027 Move X20, [X8+16]
	028 Move X0, [X9]
	029 Move W9, [X0+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {55}
	041 Move X8, 0x326000
	042 Move X9, 0x326000
	043 Move X8, [X8+1208]
	044 Move X9, [X9+1216]
	045 Move X0, [X8]
	046 Move X1, [X9]
	047 Call 0x2242EFC, X0
	048 Move X1, X0
	049 Move X0, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X30, [X31+32]
	053 Call Text.set_font, X0, X1
	054 Return 
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Return 
	059 Call 0x1C17F20

Method: UnityEngine.TextGenerationSettings GetGenerationSettings(UnityEngine.Vector2 extents)

Disassembly:
	0x03E46CAC B 0x3E46CBC
	0x03E46CB0 LDRSW X9, [X10]
	0x03E46CB4 ADD X8, X8, X9, 0x4, LSL
	0x03E46CB8 ADD X0, X8, 0x138
	0x03E46CBC LDP X8, X1, [X0]
	0x03E46CC0 MOV X0, X21
	0x03E46CC4 BLR X8
	0x03E46CC8 MOV X19, X0
	0x03E46CCC CBZ X0, 0x3E46E64
	0x03E46CD0 ADRP X22, 0x2AD000
	0x03E46CD4 ADRP X23, 0x325000
	0x03E46CD8 ADRP X24, 0x2AD000
	0x03E46CDC LDR X22, [X22 + 0xE18]
	0x03E46CE0 LDR X23, [X23 + 0x4F0]
	0x03E46CE4 LDR X24, [X24 + 0x598]
	0x03E46CE8 LDR X8, [X19]
	0x03E46CEC LDR X1, [X22]
	0x03E46CF0 LDRH W9, [X8 + 0x12E]
	0x03E46CF4 CBZ X9, 0x3E46D18
	0x03E46CF8 LDR X10, [X8 + 0xB0]
	0x03E46CFC ADD X10, X10, 0x8
	0x03E46D00 LDUR X11, [X10 - 0x8]
	0x03E46D04 CMP X11, X1
	0x03E46D08 B.EQ 0x3E46D28
	0x03E46D0C SUBS X9, X9, 0x1
	0x03E46D10 ADD X10, X10, 0x10
	0x03E46D14 B.NE 0x3E46D00
	0x03E46D18 MOV X0, X19
	0x03E46D1C MOV W2, W31
	0x03E46D20 BL 0x1C5C788
	0x03E46D24 B 0x3E46D34
	0x03E46D28 LDRSW X9, [X10]
	0x03E46D2C ADD X8, X8, X9, 0x4, LSL
	0x03E46D30 ADD X0, X8, 0x138
	0x03E46D34 LDP X8, X1, [X0]
	0x03E46D38 MOV X0, X19
	0x03E46D3C BLR X8
	0x03E46D40 TBZ X0, 0x0, 0x3E46DDC
	0x03E46D44 LDR X8, [X19]
	0x03E46D48 LDR X1, [X23]
	0x03E46D4C LDRH W9, [X8 + 0x12E]
	0x03E46D50 CBZ X9, 0x3E46D74
	0x03E46D54 LDR X10, [X8 + 0xB0]
	0x03E46D58 ADD X10, X10, 0x8
	0x03E46D5C LDUR X11, [X10 - 0x8]
	0x03E46D60 CMP X11, X1
	0x03E46D64 B.EQ 0x3E46D84
	0x03E46D68 SUBS X9, X9, 0x1
	0x03E46D6C ADD X10, X10, 0x10
	0x03E46D70 B.NE 0x3E46D5C
	0x03E46D74 MOV X0, X19
	0x03E46D78 MOV W2, W31
	0x03E46D7C BL 0x1C5C788
	0x03E46D80 B 0x3E46D90
	0x03E46D84 LDRSW X9, [X10]
	0x03E46D88 ADD X8, X8, X9, 0x4, LSL
	0x03E46D8C ADD X0, X8, 0x138
	0x03E46D90 LDP X8, X1, [X0]
	0x03E46D94 MOV X0, X19
	0x03E46D98 BLR X8
	0x03E46D9C MOV X21, X0
	0x03E46DA0 LDR X0, [X24]
	0x03E46DA4 LDR W8, [X0 + 0xE0]
	0x03E46DA8 CBNZ W8, 0x3E46DB0
	0x03E46DAC BL 0x1C16DFC
	0x03E46DB0 MOV X0, X21
	0x03E46DB4 MOV X1, X20
	0x03E46DB8 MOV X2, X31
	0x03E46DBC BL 0x3C3883C
	0x03E46DC0 TBNZ X0, 0x0, 0x3E46CE8
	0x03E46DC4 CBZ X21, 0x3E46E5C
	0x03E46DC8 MOVZ W2, 0x1
	0x03E46DCC MOV X0, X21
	0x03E46DD0 MOV W1, W31
	0x03E46DD4 BL 0x3E470A0
	0x03E46DD8 B 0x3E46CE8
	0x03E46DDC MOV X20, X31
	0x03E46DE0 CBZ X19, 0x3E46E44
	0x03E46DE4 ADRP X10, 0x2AD000
	0x03E46DE8 LDR X8, [X19]
	0x03E46DEC LDR X10, [X10 + 0xE00]
	0x03E46DF0 LDRH W9, [X8 + 0x12E]
	0x03E46DF4 LDR X1, [X10]
	0x03E46DF8 CBZ X9, 0x3E46E1C
	0x03E46DFC LDR X10, [X8 + 0xB0]
	0x03E46E00 ADD X10, X10, 0x8
	0x03E46E04 LDUR X11, [X10 - 0x8]
	0x03E46E08 CMP X11, X1
	0x03E46E0C B.EQ 0x3E46E2C
	0x03E46E10 SUBS X9, X9, 0x1
	0x03E46E14 ADD X10, X10, 0x10
	0x03E46E18 B.NE 0x3E46E04
	0x03E46E1C MOV X0, X19
	0x03E46E20 MOV W2, W31
	0x03E46E24 BL 0x1C5C788
	0x03E46E28 B 0x3E46E38
	0x03E46E2C LDRSW X9, [X10]
	0x03E46E30 ADD X8, X8, X9, 0x4, LSL
	0x03E46E34 ADD X0, X8, 0x138
	0x03E46E38 LDP X8, X1, [X0]
	0x03E46E3C MOV X0, X19
	0x03E46E40 BLR X8
	0x03E46E44 CBNZ X20, 0x3E46E68
	0x03E46E48 LDP X20, X19, [X31 + 0x30]
	0x03E46E4C LDP X22, X21, [X31 + 0x20]
	0x03E46E50 LDP X24, X23, [X31 + 0x10]
	0x03E46E54 LDR X30, [X31], #0x40
	0x03E46E58 RET
	0x03E46E5C BL 0x1C16F20
	0x03E46E60 BL 0x1C16F20
	0x03E46E64 BL 0x1C16F20
	0x03E46E68 MOV X0, X20
	0x03E46E6C BL 0x1C16F18
	0x03E46E70 B 0x3E46E88
	0x03E46E74 B 0x3E46E88
	0x03E46E78 B 0x3E46E88
	0x03E46E7C B 0x3E46E88
	0x03E46E80 B 0x3E46E88
	0x03E46E84 B 0x3E46E88
	0x03E46E88 MOV X21, X0
	0x03E46E8C CMP W1, 0x1
	0x03E46E90 B.NE 0x3E46EA8
	0x03E46E94 MOV X0, X21
	0x03E46E98 BL 0x3EB1AD0

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X24
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X21, 0x5A3000
	017 Move W9, [X21+2043]
	018 Move V8, V1
	019 Move V9, V0
	020 Move X20, X0
	021 Move X19, X8
	022 Move TEMP, X9
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x2AE000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+2043], W8
	031 NotImplemented "Instruction STRH not yet implemented."
	032 Move [X31+30], W31
	033 NotImplemented "Instruction STRH not yet implemented."
	034 Move [X31+26], W31
	035 Move X8, [X20+216]
	036 Compare X8, 0
	037 JumpIfEqual {158}
	038 Move X9, 0x2AE000
	039 Move X9, [X9+1432]
	040 Move X21, [X8+16]
	041 Move X0, [X9]
	042 Move W9, [X0+224]
	043 Compare W9, 0
	044 JumpIfNotEqual {46}
	045 Call 0x1C17DFC
	046 Move X0, X21
	047 Move X1, X31
	048 Move X2, X31
	049 Call Object.op_Inequality, X0, X1
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {71}
	054 Move X8, [X20+216]
	055 Compare X8, 0
	056 JumpIfEqual {158}
	057 Move X0, [X8+16]
	058 Compare X0, 0
	059 JumpIfEqual {158}
	060 Move X1, X31
	061 Call Font.get_dynamic, X0
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {71}
	066 Move X8, [X20+216]
	067 Compare X8, 0
	068 JumpIfEqual {158}
	069 Move W21, [X8+24]
	070 NotImplemented "Instruction LDUR not yet implemented."
	071 Move W21, W31
	072 NotImplemented "Instruction MOVI not yet implemented."
	073 Move X8, [X20+216]
	074 Move [X31], V0
	075 Compare X8, 0
	076 JumpIfEqual {158}
	077 Move W22, [X8+44]
	078 Move W23, [X8+48]
	079 Move X0, X20
	080 Call Text.get_pixelsPerUnit, X0
	081 Move X8, [X20]
	082 Move X0, X20
	083 Move V10, V0
	084 Move X9, [X8+664]
	085 Move X1, [X8+672]
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X8, [X20+216]
	088 Compare X8, 0
	089 JumpIfEqual {158}
	090 Move X24, [X8+16]
	091 Move X0, X20
	092 Move X1, X31
	093 Move V11, V0
	094 Move V12, V1
	095 Move V13, V2
	096 Move V14, V3
	097 Call Graphic.get_rectTransform, X0
	098 Compare X0, 0
	099 JumpIfEqual {158}
	100 Move X1, X31
	101 Call RectTransform.get_pivot, X0
	102 Move X8, [X20+216]
	103 Compare X8, 0
	104 JumpIfEqual {158}
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 Move W9, [X8+49]
	107 Move V2, [X8+60]
	108 Move W10, [X8+28]
	109 Move W11, [X8+32]
	110 NotImplemented "Instruction LDRH not yet implemented."
	111 Move W12, [X31+30]
	112 Move V4, [X31]
	113 NotImplemented "Instruction LDRH not yet implemented."
	114 Move W14, [X31+26]
	115 Move [X19+80], S0
	116 Move [X19+88], S1
	117 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	118 Move [X19], X24
	119 Move [X19+8], S11
	120 Move [X19+16], S12
	121 Move [X19+16], S13
	122 Move [X19+24], S14
	123 Move [X19+24], W21
	124 Move [X19+36], S10
	125 Move [X19+48], W23
	126 NotImplemented "Instruction STRH not yet implemented."
	127 Move [X19+52], D4
	128 Move [X19+60], W31
	129 Move [X19+72], S9
	130 Move [X19+80], S8
	131 Move [X19+28], S2
	132 Move [X19+32], W9
	133 Move [X19+35], W12
	134 NotImplemented "Instruction STURH not yet implemented."
	135 Move [X19+40], W10
	136 Move [X19+44], W22
	137 Move [X19+49], W11
	138 Move [X19+63], W14
	139 NotImplemented "Instruction STURH not yet implemented."
	140 Move [X19+64], D0
	141 Move [X19+88], X31
	142 Move X20, [X31+128]
	143 Move X19, [X31+136]
	144 Move X22, [X31+112]
	145 Move X21, [X31+120]
	146 Move X24, [X31+96]
	147 Move X23, [X31+104]
	148 Move X30, [X31+88]
	149 Move D9, [X31+72]
	150 Move D8, [X31+80]
	151 Move D11, [X31+56]
	152 Move D10, [X31+64]
	153 Move D13, [X31+40]
	154 Move D12, [X31+48]
	155 Move V14, [X31+32]
	156 Add X31, X31, 144
	157 Return X0
	158 Call 0x1C17F20

Method: UnityEngine.Vector2 GetTextAnchorPivot(UnityEngine.TextAnchor anchor)

Disassembly:
	0x03E46E9C LDR X20, [X0]
	0x03E46EA0 BL 0x3EB1AE0
	0x03E46EA4 B 0x3E46DE0
	0x03E46EA8 MOV X20, X31
	0x03E46EAC B 0x3E46EB4
	0x03E46EB0 MOV X21, X0
	0x03E46EB4 CBZ X19, 0x3E46F18
	0x03E46EB8 ADRP X10, 0x2AD000
	0x03E46EBC LDR X8, [X19]
	0x03E46EC0 LDR X10, [X10 + 0xE00]
	0x03E46EC4 LDRH W9, [X8 + 0x12E]
	0x03E46EC8 LDR X1, [X10]
	0x03E46ECC CBZ X9, 0x3E46EF0
	0x03E46ED0 LDR X10, [X8 + 0xB0]
	0x03E46ED4 ADD X10, X10, 0x8
	0x03E46ED8 LDUR X11, [X10 - 0x8]
	0x03E46EDC CMP X11, X1
	0x03E46EE0 B.EQ 0x3E46F00
	0x03E46EE4 SUBS X9, X9, 0x1
	0x03E46EE8 ADD X10, X10, 0x10
	0x03E46EEC B.NE 0x3E46ED8
	0x03E46EF0 MOV X0, X19
	0x03E46EF4 MOV W2, W31
	0x03E46EF8 BL 0x1C5C788
	0x03E46EFC B 0x3E46F0C
	0x03E46F00 LDRSW X9, [X10]
	0x03E46F04 ADD X8, X8, X9, 0x4, LSL

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move X8, -53141504
	005 Move X10, -53141504
	006 Add X8, X8, 2996
	007 Add X10, X10, 3032
	008 Add X9, X8, W0
	009 Add X8, X10, W0
	010 Move X19, 0x594000
	011 Move W8, [X19+1935]
	012 Compare W8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, 0x2B6000
	015 Move X0, [X0+3848]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+1935], W8
	019 Move X8, 0x2B6000
	020 Move X8, [X8+3848]
	021 Move X8, [X8]
	022 Move X8, [X8+184]
	023 Add X9, X8, 4
	024 Move V0, [X8]
	025 Move V1, [X9]
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return X0

Method: System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)

Disassembly:
	0x03E46F08 ADD X0, X8, 0x138
	0x03E46F0C LDP X8, X1, [X0]
	0x03E46F10 MOV X0, X19
	0x03E46F14 BLR X8
	0x03E46F18 CBNZ X20, 0x3E46F24
	0x03E46F1C MOV X0, X21
	0x03E46F20 BL 0x1D2C690
	0x03E46F24 MOV X0, X20
	0x03E46F28 BL 0x1C16F18
	0x03E46F2C BL 0x1990590
	0x03E46F30 STP X30, X19, [X31 - 0x10]!
	0x03E46F34 MOV X19, X0
	0x03E46F38 BL 0x3E3BAA8
	0x03E46F3C LDR X1, [X19 + 0x110]
	0x03E46F40 MOV X0, X19
	0x03E46F44 MOV W2, W31
	0x03E46F48 BL 0x3E467E0
	0x03E46F4C MOVZ W1, 0x1
	0x03E46F50 MOV X0, X19
	0x03E46F54 LDP X30, X19, [X31], #0x10
	0x03E46F58 B 0x3E4691C
	0x03E46F5C STP X30, X19, [X31 - 0x10]!
	0x03E46F60 MOV X1, X31
	0x03E46F64 MOV W2, W31
	0x03E46F68 MOV X19, X0
	0x03E46F6C BL 0x3E467E0
	0x03E46F70 MOV X0, X19
	0x03E46F74 LDP X30, X19, [X31], #0x10
	0x03E46F78 B 0x3E3BD80
	0x03E46F7C STR D8, [X31 - 0x30]!
	0x03E46F80 STP X30, X21, [X31 + 0x10]
	0x03E46F84 STP X20, X19, [X31 + 0x20]
	0x03E46F88 ADRP X21, 0x5A2000
	0x03E46F8C ADRP X20, 0x2AD000
	0x03E46F90 LDRB W8, [X21 + 0x7FF]
	0x03E46F94 LDR X20, [X20 + 0x598]
	0x03E46F98 MOV X19, X0
	0x03E46F9C TBNZ X8, 0x0, 0x3E46FB4
	0x03E46FA0 ADRP X0, 0x2AD000
	0x03E46FA4 LDR X0, [X0 + 0x598]
	0x03E46FA8 BL 0x1C16CF4
	0x03E46FAC MOVZ W8, 0x1
	0x03E46FB0 STRB W8, [X21 + 0x7FF]
	0x03E46FB4 LDR X0, [X20]
	0x03E46FB8 LDR X20, [X19 + 0x108]
	0x03E46FBC LDR W8, [X0 + 0xE0]
	0x03E46FC0 CBNZ W8, 0x3E46FC8
	0x03E46FC4 BL 0x1C16DFC
	0x03E46FC8 MOV X0, X20
	0x03E46FCC MOV X1, X31
	0x03E46FD0 MOV X2, X31
	0x03E46FD4 BL 0x3C354F8
	0x03E46FD8 TBZ X0, 0x0, 0x3E47088
	0x03E46FDC LDR X0, [X19 + 0x108]
	0x03E46FE0 CBZ X0, 0x3E4709C
	0x03E46FE4 MOV X1, X31
	0x03E46FE8 BL 0x3CDBD2C
	0x03E46FEC CBZ X0, 0x3E4709C
	0x03E46FF0 MOV X1, X31
	0x03E46FF4 BL 0x3E22740
	0x03E46FF8 ADRP X20, 0x593000
	0x03E46FFC LDRB W8, [X20 + 0x5AA]
	0x03E47000 MOV V8.16B, V3.16B
	0x03E47004 CBNZ W8, 0x3E4701C
	0x03E47008 ADRP X0, 0x2B3000
	0x03E4700C LDR X0, [X0 + 0x4B8]
	0x03E47010 BL 0x1C16CF4
	0x03E47014 MOVZ W8, 0x1
	0x03E47018 STRB W8, [X20 + 0x5AA]
	0x03E4701C ADRP X8, 0x2B3000
	0x03E47020 LDR X8, [X8 + 0x4B8]
	0x03E47024 ADRP X9, 0xFFFFFFFFFCCA3000
	0x03E47028 LDR V1, [X9 + 0x240]
	0x03E4702C FABS S0, S8
	0x03E47030 LDR X8, [X8]
	0x03E47034 FMOV S2, W31
	0x03E47038 FMAXNM S0, S0, S2
	0x03E4703C FMUL S0, S0, S1
	0x03E47040 LDR X8, [X8 + 0xB8]
	0x03E47044 FMOV S1, 8
	0x03E47048 LDRB W9, [X19 + 0x120]
	0x03E4704C LDR V3, [X8]
	0x03E47050 FMUL S1, S3, S1
	0x03E47054 FCMP S0, S1
	0x03E47058 FCSEL S0, S0, S1, GT
	0x03E4705C FABD S1, S2, S2
	0x03E47060 FCMP S1, S0
	0x03E47064 CSET W8, PL
	0x03E47068 CMP W9, W8
	0x03E4706C B.EQ 0x3E47088
	0x03E47070 FCMP S1, S0
	0x03E47074 CSET W1, MI
	0x03E47078 MOVZ W2, 0x1
	0x03E4707C MOV X0, X19
	0x03E47080 STRB W8, [X19 + 0x120]
	0x03E47084 BL 0x3E470A0
	0x03E47088 MOV X0, X19
	0x03E4708C LDP X20, X19, [X31 + 0x20]
	0x03E47090 LDP X30, X21, [X31 + 0x10]
	0x03E47094 LDR V8, [X31], #0x30
	0x03E47098 B 0x3E40C20
	0x03E4709C BL 0x1C16F20
	0x03E470A0 STR X30, [X31 - 0x30]!
	0x03E470A4 STP X22, X21, [X31 + 0x10]
	0x03E470A8 STP X20, X19, [X31 + 0x20]
	0x03E470AC ADRP X22, 0x5A1000
	0x03E470B0 LDRB W8, [X22 + 0x801]
	0x03E470B4 MOV W20, W2
	0x03E470B8 MOV X19, X0
	0x03E470BC AND W21, W1, 0x1
	0x03E470C0 TBNZ X8, 0x0, 0x3E470F0
	0x03E470C4 ADRP X0, 0x2AC000
	0x03E470C8 LDR X0, [X0 + 0x598]
	0x03E470CC BL 0x1C16CF4
	0x03E470D0 ADRP X0, 0x311000
	0x03E470D4 LDR X0, [X0 + 0x740]
	0x03E470D8 BL 0x1C16CF4
	0x03E470DC ADRP X0, 0x324000
	0x03E470E0 LDR X0, [X0 + 0x508]
	0x03E470E4 BL 0x1C16CF4
	0x03E470E8 MOVZ W8, 0x1
	0x03E470EC STRB W8, [X22 + 0x801]
	0x03E470F0 LDRB W8, [X19 + 0x120]
	0x03E470F4 CMP W8, W21
	0x03E470F8 B.EQ 0x3E471F4
	0x03E470FC STRB W21, [X19 + 0x120]
	0x03E47100 ADRP X8, 0x2AC000
	0x03E47104 LDR X8, [X8 + 0x598]
	0x03E47108 LDR X21, [X19 + 0x110]
	0x03E4710C LDR X0, [X8]
	0x03E47110 LDR W8, [X0 + 0xE0]
	0x03E47114 CBNZ W8, 0x3E4711C
	0x03E47118 BL 0x1C16DFC
	0x03E4711C MOV X0, X21
	0x03E47120 MOV X1, X31
	0x03E47124 MOV X2, X31
	0x03E47128 BL 0x3C354F8
	0x03E4712C TBZ X0, 0x0, 0x3E4719C
	0x03E47130 LDR X0, [X19 + 0x110]
	0x03E47134 CBZ X0, 0x3E47210
	0x03E47138 MOV X1, X31
	0x03E4713C BL 0x3C32454
	0x03E47140 TBZ X0, 0x0, 0x3E4719C
	0x03E47144 LDR X8, [X19]
	0x03E47148 MOV X0, X19
	0x03E4714C LDP X9, X1, [X8 + 0x1C8]
	0x03E47150 BLR X9
	0x03E47154 TBZ X0, 0x0, 0x3E4719C
	0x03E47158 LDRB W8, [X19 + 0x120]
	0x03E4715C LDR X0, [X19 + 0x110]
	0x03E47160 CBZ W8, 0x3E47180
	0x03E47164 MOVZ W8, 0x1
	0x03E47168 STRB W8, [X19 + 0x120]
	0x03E4716C CBZ X0, 0x3E47210
	0x03E47170 AND W2, W20, 0x1
	0x03E47174 MOV X1, X19
	0x03E47178 BL 0x3E47374
	0x03E4717C B 0x3E4719C
	0x03E47180 CBZ X0, 0x3E47210
	0x03E47184 BL 0x3E474A0
	0x03E47188 TBNZ X0, 0x0, 0x3E4719C
	0x03E4718C LDR X0, [X19 + 0x110]
	0x03E47190 CBZ X0, 0x3E47210
	0x03E47194 LDRB W8, [X0 + 0x20]
	0x03E47198 CBZ W8, 0x3E47204
	0x03E4719C LDR W8, [X19 + 0x100]
	0x03E471A0 MOV X0, X19
	0x03E471A4 CMP W8, 0x0
	0x03E471A8 CSET W1, EQ
	0x03E471AC BL 0x3E4691C
	0x03E471B0 TBZ X20, 0x0, 0x3E471F4
	0x03E471B4 ADRP X8, 0x324000
	0x03E471B8 LDR X8, [X8 + 0x508]
	0x03E471BC MOV X1, X19
	0x03E471C0 MOV X2, X31
	0x03E471C4 LDR X0, [X8]
	0x03E471C8 BL 0x3E252BC
	0x03E471CC LDR X0, [X19 + 0x118]
	0x03E471D0 CBZ X0, 0x3E47210
	0x03E471D4 ADRP X8, 0x311000
	0x03E471D8 LDRB W1, [X19 + 0x120]
	0x03E471DC LDR X8, [X8 + 0x740]
	0x03E471E0 LDP X20, X19, [X31 + 0x20]
	0x03E471E4 LDP X22, X21, [X31 + 0x10]
	0x03E471E8 LDR X2, [X8]
	0x03E471EC LDR X30, [X31], #0x30
	0x03E471F0 B 0x2728B08
	0x03E471F4 LDP X20, X19, [X31 + 0x20]
	0x03E471F8 LDP X22, X21, [X31 + 0x10]
	0x03E471FC LDR X30, [X31], #0x30
	0x03E47200 RET
	0x03E47204 MOVZ W8, 0x1
	0x03E47208 STRB W8, [X19 + 0x120]
	0x03E4720C B 0x3E47170
	0x03E47210 BL 0x1C16F20
	0x03E47214 STP X30, X21, [X31 - 0x20]!
	0x03E47218 STP X20, X19, [X31 + 0x10]
	0x03E4721C ADRP X21, 0x5A1000
	0x03E47220 LDRB W8, [X21 + 0x807]
	0x03E47224 MOV X19, X1
	0x03E47228 MOV X20, X0
	0x03E4722C TBNZ X8, 0x0, 0x3E47250
	0x03E47230 ADRP X0, 0x324000
	0x03E47234 LDR X0, [X0 + 0x510]
	0x03E47238 BL 0x1C16CF4
	0x03E4723C ADRP X0, 0x324000
	0x03E47240 LDR X0, [X0 + 0x518]
	0x03E47244 BL 0x1C16CF4
	0x03E47248 MOVZ W8, 0x1
	0x03E4724C STRB W8, [X21 + 0x807]
	0x03E47250 LDR X0, [X20 + 0x28]
	0x03E47254 CBZ X0, 0x3E472A0
	0x03E47258 ADRP X8, 0x324000
	0x03E4725C LDR X8, [X8 + 0x510]
	0x03E47260 MOV X1, X19
	0x03E47264 LDR X2, [X8]
	0x03E47268 BL 0x301C318
	0x03E4726C TBZ X0, 0x0, 0x3E47294
	0x03E47270 LDR X0, [X20 + 0x28]
	0x03E47274 CBZ X0, 0x3E472A0
	0x03E47278 ADRP X8, 0x324000
	0x03E4727C LDR X8, [X8 + 0x518]
	0x03E47280 MOV X1, X19
	0x03E47284 LDP X20, X19, [X31 + 0x10]
	0x03E47288 LDR X2, [X8]
	0x03E4728C LDP X30, X21, [X31], #0x20
	0x03E47290 B 0x301D7A8
	0x03E47294 LDP X20, X19, [X31 + 0x10]
	0x03E47298 LDP X30, X21, [X31], #0x20
	0x03E4729C RET
	0x03E472A0 BL 0x1C16F20
	0x03E472A4 STP X30, X21, [X31 - 0x20]!
	0x03E472A8 STP X20, X19, [X31 + 0x10]
	0x03E472AC ADRP X21, 0x5A1000
	0x03E472B0 LDRB W8, [X21 + 0x808]
	0x03E472B4 MOV X19, X1
	0x03E472B8 MOV X20, X0
	0x03E472BC TBNZ X8, 0x0, 0x3E472E0
	0x03E472C0 ADRP X0, 0x324000
	0x03E472C4 LDR X0, [X0 + 0x520]
	0x03E472C8 BL 0x1C16CF4
	0x03E472CC ADRP X0, 0x324000
	0x03E472D0 LDR X0, [X0 + 0x510]
	0x03E472D4 BL 0x1C16CF4
	0x03E472D8 MOVZ W8, 0x1
	0x03E472DC STRB W8, [X21 + 0x808]
	0x03E472E0 LDR X0, [X20 + 0x28]
	0x03E472E4 CBZ X0, 0x3E47370
	0x03E472E8 ADRP X8, 0x324000
	0x03E472EC LDR X8, [X8 + 0x510]
	0x03E472F0 MOV X1, X19
	0x03E472F4 LDR X2, [X8]
	0x03E472F8 BL 0x301C318
	0x03E472FC TBNZ X0, 0x0, 0x3E47348
	0x03E47300 LDR X0, [X20 + 0x28]
	0x03E47304 CBZ X0, 0x3E47370
	0x03E47308 ADRP X9, 0x324000
	0x03E4730C LDR X9, [X9 + 0x520]
	0x03E47310 LDR W10, [X0 + 0x1C]
	0x03E47314 LDR X8, [X0 + 0x10]
	0x03E47318 LDR X9, [X9]
	0x03E4731C ADD W10, W10, 0x1
	0x03E47320 STR W10, [X0 + 0x1C]
	0x03E47324 CBZ X8, 0x3E47370
	0x03E47328 LDRSW X10, [X0 + 0x18]
	0x03E4732C LDR W11, [X8 + 0x18]
	0x03E47330 CMP W10, W11
	0x03E47334 B.CS 0x3E47354
	0x03E47338 ADD W9, W10, 0x1
	0x03E4733C ADD X8, X8, X10, 0x3, LSL
	0x03E47340 STR W9, [X0 + 0x18]
	0x03E47344 STR X19, [X8 + 0x20]
	0x03E47348 LDP X20, X19, [X31 + 0x10]
	0x03E4734C LDP X30, X21, [X31], #0x20
	0x03E47350 RET
	0x03E47354 LDR X8, [X9 + 0x20]
	0x03E47358 MOV X1, X19
	0x03E4735C LDP X20, X19, [X31 + 0x10]
	0x03E47360 LDR X8, [X8 + 0xC0]
	0x03E47364 LDR X2, [X8 + 0x70]
	0x03E47368 LDP X30, X21, [X31], #0x20
	0x03E4736C B 0x301BF90
	0x03E47370 BL 0x1C16F20
	0x03E47374 STP X30, X25, [X31 - 0x40]!
	0x03E47378 STP X24, X23, [X31 + 0x10]
	0x03E4737C STP X22, X21, [X31 + 0x20]
	0x03E47380 STP X20, X19, [X31 + 0x30]
	0x03E47384 ADRP X21, 0x5A1000
	0x03E47388 LDRB W8, [X21 + 0x806]
	0x03E4738C MOV W22, W2
	0x03E47390 MOV X19, X1
	0x03E47394 MOV X20, X0
	0x03E47398 TBNZ X8, 0x0, 0x3E473C8
	0x03E4739C ADRP X0, 0x324000
	0x03E473A0 LDR X0, [X0 + 0x4F8]
	0x03E473A4 BL 0x1C16CF4
	0x03E473A8 ADRP X0, 0x324000
	0x03E473AC LDR X0, [X0 + 0x500]
	0x03E473B0 BL 0x1C16CF4
	0x03E473B4 ADRP X0, 0x2AC000
	0x03E473B8 LDR X0, [X0 + 0x598]
	0x03E473BC BL 0x1C16CF4
	0x03E473C0 MOVZ W8, 0x1
	0x03E473C4 STRB W8, [X21 + 0x806]
	0x03E473C8 MOV X0, X20
	0x03E473CC MOV X1, X19
	0x03E473D0 BL 0x3E4772C
	0x03E473D4 LDR X0, [X20 + 0x28]
	0x03E473D8 CBZ X0, 0x3E47468
	0x03E473DC ADRP X24, 0x324000
	0x03E473E0 ADRP X25, 0x2AC000
	0x03E473E4 LDR X24, [X24 + 0x500]
	0x03E473E8 LDR X25, [X25 + 0x598]
	0x03E473EC MOV W21, W31
	0x03E473F0 AND W22, W22, 0x1
	0x03E473F4 LDR W8, [X0 + 0x18]
	0x03E473F8 CMP W21, W8
	0x03E473FC B.GE 0x3E4746C
	0x03E47400 LDR X2, [X24]
	0x03E47404 MOV W1, W21
	0x03E47408 BL 0x301BCCC
	0x03E4740C LDR X8, [X25]
	0x03E47410 MOV X23, X0
	0x03E47414 LDR W9, [X8 + 0xE0]
	0x03E47418 CBNZ W9, 0x3E47424
	0x03E4741C MOV X0, X8
	0x03E47420 BL 0x1C16DFC
	0x03E47424 MOV X0, X23
	0x03E47428 MOV X1, X19
	0x03E4742C MOV X2, X31
	0x03E47430 BL 0x3C3883C
	0x03E47434 TBNZ X0, 0x0, 0x3E4745C
	0x03E47438 LDR X0, [X20 + 0x28]
	0x03E4743C CBZ X0, 0x3E47468
	0x03E47440 LDR X2, [X24]
	0x03E47444 MOV W1, W21
	0x03E47448 BL 0x301BCCC
	0x03E4744C CBZ X0, 0x3E47468
	0x03E47450 MOV W1, W31
	0x03E47454 MOV W2, W22
	0x03E47458 BL 0x3E470A0
	0x03E4745C LDR X0, [X20 + 0x28]
	0x03E47460 ADD W21, W21, 0x1
	0x03E47464 CBNZ X0, 0x3E473F4
	0x03E47468 BL 0x1C16F20
	0x03E4746C LDP X20, X19, [X31 + 0x30]
	0x03E47470 LDP X22, X21, [X31 + 0x20]
	0x03E47474 LDP X24, X23, [X31 + 0x10]
	0x03E47478 LDP X30, X25, [X31], #0x40
	0x03E4747C RET
	0x03E47480 LDRB W0, [X0 + 0x120]
	0x03E47484 RET
	0x03E47488 AND W1, W1, 0x1
	0x03E4748C MOVZ W2, 0x1
	0x03E47490 B 0x3E470A0
	0x03E47494 AND W1, W1, 0x1
	0x03E47498 MOV W2, W31
	0x03E4749C B 0x3E470A0
	0x03E474A0 STR X30, [X31 - 0x30]!
	0x03E474A4 STP X22, X21, [X31 + 0x10]
	0x03E474A8 STP X20, X19, [X31 + 0x20]
	0x03E474AC ADRP X20, 0x5A1000
	0x03E474B0 ADRP X22, 0x324000
	0x03E474B4 LDRB W8, [X20 + 0x80A]
	0x03E474B8 LDR X22, [X22 + 0x528]
	0x03E474BC MOV X19, X0
	0x03E474C0 TBNZ X8, 0x0, 0x3E47508
	0x03E474C4 ADRP X0, 0x324000
	0x03E474C8 LDR X0, [X0 + 0x530]
	0x03E474CC BL 0x1C16CF4
	0x03E474D0 ADRP X0, 0x2AC000
	0x03E474D4 LDR X0, [X0 + 0x598]
	0x03E474D8 BL 0x1C16CF4
	0x03E474DC ADRP X0, 0x324000
	0x03E474E0 LDR X0, [X0 + 0x538]

ISIL:
	001 Move [X31-128], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X29
	005 Move [X31+40], X30
	006 Move [X31+48], X28
	007 Move [X31+56], X27
	008 Move [X31+64], X26
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Subtract X31, X31, 656
	017 Move X21, 0x5A3000
	018 Move W8, [X21+2044]
	019 Move X19, X1
	020 Move X20, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0x326000
	026 Move X0, [X0+1224]
	027 Call 0x1C17CF4
	028 Move X0, 0x326000
	029 Move X0, [X0+1232]
	030 Call 0x1C17CF4
	031 Move X0, 0x2AE000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+2044], W8
	036 NotImplemented "Instruction MOVI not yet implemented."
	037 Move [X31+624], V0
	038 Move [X31+632], V0
	039 Move [X31+592], V0
	040 Move [X31+600], V0
	041 Move [X31+560], V0
	042 Move [X31+568], V0
	043 Move X8, [X20+216]
	044 Compare X8, 0
	045 JumpIfEqual {396}
	046 Move X9, 0x2AE000
	047 Move X9, [X9+1432]
	048 Move X21, [X8+16]
	049 Move X0, [X9]
	050 Move W9, [X0+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {379}
	062 Move W8, 1
	063 Move X0, X20
	064 Move X1, X31
	065 Move [X20+248], W8
	066 Call Graphic.get_rectTransform, X0
	067 Compare X0, 0
	068 JumpIfEqual {396}
	069 Move X1, X31
	070 Call RectTransform.get_rect, X0
	071 Move V0, V2
	072 Move V1, V3
	073 Add X8, X31, 560
	074 Move X0, X20
	075 Call Text.GetGenerationSettings, X0, X1
	076 Move X0, X20
	077 Call Text.get_cachedTextGenerator, X0
	078 Move X8, [X20]
	079 Move X21, X0
	080 Move X0, X20
	081 Move X9, [X8+1496]
	082 Move X1, [X8+1504]
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move X22, X0
	085 Add X0, X31, 352
	086 Add X1, X31, 560
	087 Move W2, 96
	088 Call 0x3EB2AC0
	089 Move X0, X20
	090 Move X1, X31
	091 Call Component.get_gameObject, X0
	092 Compare X21, 0
	093 JumpIfEqual {396}
	094 Move X23, X0
	095 Add X0, X31, 464
	096 Add X1, X31, 352
	097 Move W2, 96
	098 Call 0x3EB2AC0
	099 Add X2, X31, 464
	100 Move X0, X21
	101 Move X1, X22
	102 Move X3, X23
	103 Move X4, X31
	104 Call TextGenerator.PopulateWithErrors, X0, X1, X2, X3
	105 Move X0, X20
	106 Call Text.get_cachedTextGenerator, X0
	107 Compare X0, 0
	108 JumpIfEqual {396}
	109 Move X1, X31
	110 Call TextGenerator.get_verts, X0
	111 Move X21, X0
	112 Move X0, X20
	113 Call Text.get_pixelsPerUnit, X0
	114 Compare X21, 0
	115 JumpIfEqual {396}
	116 Move X10, 0x325000
	117 Move X8, [X21]
	118 Move X10, [X10+1224]
	119 Move V8, V0
	120 NotImplemented "Instruction LDRH not yet implemented."
	121 Move X1, [X10]
	122 Compare X9, 0
	123 JumpIfEqual {130}
	124 Move X10, [X8+176]
	125 Add X10, X10, 8
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Subtract X9, X9, 1
	129 Add X10, X10, 16
	130 Move X0, X21
	131 Move W2, W31
	132 Call 0x1C5D788
	133 NotImplemented "Instruction LDRSW not yet implemented."
	134 Add X8, X8, X9
	135 Add X0, X8, 312
	136 Move X8, [X0]
	137 Move X1, [X0+8]
	138 Move X0, X21
	139 NotImplemented "Instruction BLR not yet implemented."
	140 NotImplemented "Instruction CMP not yet implemented."
	141 Move X24, 0x325000
	142 Move X8, [X21]
	143 Move X24, [X24+1232]
	144 Move W22, W0
	145 Move S9, 1
	146 NotImplemented "Instruction LDRH not yet implemented."
	147 Move X1, [X24]
	148 Compare X9, 0
	149 JumpIfEqual {156}
	150 Move X10, [X8+176]
	151 Add X10, X10, 8
	152 NotImplemented "Instruction LDUR not yet implemented."
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Subtract X9, X9, 1
	155 Add X10, X10, 16
	156 Move X0, X21
	157 Move W2, W31
	158 Call 0x1C5D788
	159 Compare X19, 0
	160 JumpIfEqual {396}
	161 Move X0, X19
	162 Call VertexHelper.Clear, X0
	163 NotImplemented "Instruction LDRSW not yet implemented."
	164 Add X8, X8, X9
	165 Add X0, X8, 312
	166 Move X9, [X0]
	167 Move X2, [X0+8]
	168 NotImplemented "Instruction FDIV not yet implemented."
	169 Add X8, X31, 352
	170 Move X0, X21
	171 Move W1, W31
	172 Move [X31], V0
	173 NotImplemented "Instruction BLR not yet implemented."
	174 Move X8, [X21]
	175 Move V8, [X31+352]
	176 Move X1, [X24]
	177 NotImplemented "Instruction LDRH not yet implemented."
	178 Compare X9, 0
	179 JumpIfEqual {186}
	180 Move X10, [X8+176]
	181 Add X10, X10, 8
	182 NotImplemented "Instruction LDUR not yet implemented."
	183 NotImplemented "Instruction CMP not yet implemented."
	184 Subtract X9, X9, 1
	185 Add X10, X10, 16
	186 Move X0, X21
	187 Move W2, W31
	188 Call 0x1C5D788
	189 NotImplemented "Instruction LDRSW not yet implemented."
	190 Add X8, X8, X9
	191 Add X0, X8, 312
	192 Move X9, [X0]
	193 Move X2, [X0+8]
	194 Add X8, X31, 352
	195 Move X0, X21
	196 Move W1, W31
	197 NotImplemented "Instruction BLR not yet implemented."
	198 Move V0, [X31+356]
	199 Move V1, [X31]
	200 Move X0, X20
	201 Move X1, X31
	202 Multiply S8, S1, S8
	203 Multiply S9, S1, S0
	204 Move V0, V8
	205 Move V1, V9
	206 Call Graphic.PixelAdjustPoint, X0, X1
	207 Compare X19, 0
	208 JumpIfEqual {396}
	209 Move X0, X19
	210 Subtract S8, S0, S8
	211 Subtract S9, S1, S9
	212 Call VertexHelper.Clear, X0
	213 Move X23, 0x593000
	214 Move W8, [X23+1935]
	215 Compare W8, 0
	216 JumpIfNotEqual {222}
	217 Move X0, 0x2B5000
	218 Move X0, [X0+3848]
	219 Call 0x1C17CF4
	220 Move W8, 1
	221 Move [X23+1935], W8
	222 Move X8, 0x2B5000
	223 Move X8, [X8+3848]
	224 Move W23, W31
	225 Move X8, [X8]
	226 Move X8, [X8+184]
	227 Move S0, [X8]
	228 Move S1, [X8+4]
	229 Move X8, -53858304
	230 Move V2, [X8+3872]
	231 Subtract S0, S8, S0
	232 Subtract S1, S9, S1
	233 Multiply S0, S0, S0
	234 Multiply S1, S1, S1
	235 Add S0, S0, S1
	236 NotImplemented "Instruction FCMP not yet implemented."
	237 Move V0, [X31]
	238 Move W25, 108
	239 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	240 Move X8, [X21]
	241 Move X26, [X20+256]
	242 Move X1, [X24]
	243 NotImplemented "Instruction LDRH not yet implemented."
	244 Compare X9, 0
	245 JumpIfEqual {252}
	246 Move X10, [X8+176]
	247 Add X10, X10, 8
	248 NotImplemented "Instruction LDUR not yet implemented."
	249 NotImplemented "Instruction CMP not yet implemented."
	250 Subtract X9, X9, 1
	251 Add X10, X10, 16
	252 Move X0, X21
	253 Move W2, W31
	254 Call 0x1C5D788
	255 NotImplemented "Instruction LDRSW not yet implemented."
	256 Add X8, X8, X9
	257 Add X0, X8, 312
	258 Move X9, [X0]
	259 Move X2, [X0+8]
	260 Add X8, X31, 240
	261 Move X0, X21
	262 Move W1, W23
	263 NotImplemented "Instruction BLR not yet implemented."
	264 Add X0, X31, 352
	265 Add X1, X31, 240
	266 Move W2, 108
	267 Call 0x3EB2AC0
	268 Compare X26, 0
	269 JumpIfEqual {396}
	270 Add X0, X31, 128
	271 Add X1, X31, 352
	272 Move W2, 108
	273 And W27, W23, 3
	274 Call 0x3EB2AC0
	275 Move W8, [X26+24]
	276 NotImplemented "Instruction CMP not yet implemented."
	277 Move W28, W27
	278 NotImplemented "Instruction MADD not yet implemented."
	279 Add X0, X8, 32
	280 Add X1, X31, 128
	281 Move W2, 108
	282 Call 0x3EB2AC0
	283 Move X8, [X20+256]
	284 Compare X8, 0
	285 JumpIfEqual {396}
	286 Move W9, [X8+24]
	287 NotImplemented "Instruction CMP not yet implemented."
	288 NotImplemented "Instruction MADD not yet implemented."
	289 Move V0, [X8+32]
	290 Move V1, [X8+40]
	291 Move V2, [X31]
	292 NotImplemented "Instruction INVALID not yet implemented."
	293 Move [X8+32], D0
	294 Multiply S1, S2, S1
	295 Move [X8+40], S1
	296 Move X1, [X20+256]
	297 Compare X1, 0
	298 JumpIfEqual {396}
	299 Move W8, [X1+24]
	300 NotImplemented "Instruction CMP not yet implemented."
	301 NotImplemented "Instruction MADD not yet implemented."
	302 Move S0, [X8+32]
	303 Move S1, [X8+36]
	304 NotImplemented "Instruction CMP not yet implemented."
	305 Add S0, S8, S0
	306 Add S1, S9, S1
	307 Move [X8+32], S0
	308 Move [X8+40], S1
	309 Move X0, X19
	310 Call VertexHelper.AddUIVertexQuad, X0, X1
	311 Add W23, W23, 1
	312 NotImplemented "Instruction CMP not yet implemented."
	313 Move V0, [X31]
	314 Move W25, 108
	315 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	316 Move X8, [X21]
	317 Move X26, [X20+256]
	318 Move X1, [X24]
	319 NotImplemented "Instruction LDRH not yet implemented."
	320 Compare X9, 0
	321 JumpIfEqual {328}
	322 Move X10, [X8+176]
	323 Add X10, X10, 8
	324 NotImplemented "Instruction LDUR not yet implemented."
	325 NotImplemented "Instruction CMP not yet implemented."
	326 Subtract X9, X9, 1
	327 Add X10, X10, 16
	328 Move X0, X21
	329 Move W2, W31
	330 Call 0x1C5D788
	331 NotImplemented "Instruction LDRSW not yet implemented."
	332 Add X8, X8, X9
	333 Add X0, X8, 312
	334 Move X9, [X0]
	335 Move X2, [X0+8]
	336 Add X8, X31, 240
	337 Move X0, X21
	338 Move W1, W23
	339 NotImplemented "Instruction BLR not yet implemented."
	340 Add X0, X31, 352
	341 Add X1, X31, 240
	342 Move W2, 108
	343 Call 0x3EB2AC0
	344 Compare X26, 0
	345 JumpIfEqual {396}
	346 Add X0, X31, 16
	347 Add X1, X31, 352
	348 Move W2, 108
	349 And W27, W23, 3
	350 Call 0x3EB2AC0
	351 Move W8, [X26+24]
	352 NotImplemented "Instruction CMP not yet implemented."
	353 Move W28, W27
	354 NotImplemented "Instruction MADD not yet implemented."
	355 Add X0, X8, 32
	356 Add X1, X31, 16
	357 Move W2, 108
	358 Call 0x3EB2AC0
	359 Move X8, [X20+256]
	360 Compare X8, 0
	361 JumpIfEqual {396}
	362 Move W9, [X8+24]
	363 NotImplemented "Instruction CMP not yet implemented."
	364 NotImplemented "Instruction MADD not yet implemented."
	365 Move V0, [X8+32]
	366 Move V1, [X8+40]
	367 Move V2, [X31]
	368 NotImplemented "Instruction CMP not yet implemented."
	369 NotImplemented "Instruction INVALID not yet implemented."
	370 Move [X8+32], D0
	371 Multiply S1, S2, S1
	372 Move [X8+40], S1
	373 Move X1, [X20+256]
	374 Move X0, X19
	375 Call VertexHelper.AddUIVertexQuad, X0, X1
	376 Add W23, W23, 1
	377 NotImplemented "Instruction CMP not yet implemented."
	378 Move [X20+248], W31
	379 Add X31, X31, 656
	380 Move X20, [X31+112]
	381 Move X19, [X31+120]
	382 Move X22, [X31+96]
	383 Move X21, [X31+104]
	384 Move X24, [X31+80]
	385 Move X23, [X31+88]
	386 Move X26, [X31+64]
	387 Move X25, [X31+72]
	388 Move X28, [X31+48]
	389 Move X27, [X31+56]
	390 Move X29, [X31+32]
	391 Move X30, [X31+40]
	392 Move D9, [X31+16]
	393 Move D8, [X31+24]
	394 Move V10, [X31+128]
	395 Return 
	396 Call 0x1C17F20
	397 Call 0x1C17F28

Method: System.Void CalculateLayoutInputHorizontal()

Disassembly:
	0x03E475F4 TBZ X0, 0x0, 0x3E4762C

ISIL:
	001 Return 

Method: System.Void CalculateLayoutInputVertical()

Disassembly:
	0x03E475F8 LDR X8, [X19]

ISIL:
	001 Return 

Method: System.Single get_minWidth()

Disassembly:
	0x03E475FC MOV X0, X19
	0x03E47600 LDR X9, [X8 + 0x2B8]

ISIL:
	001 Move S0, W31
	002 Return V0

Method: System.Single get_preferredWidth()

Disassembly:
	0x03E47604 LDR X1, [X8 + 0x2C0]
	0x03E47608 BLR X9
	0x03E4760C TBZ X0, 0x0, 0x3E4762C
	0x03E47610 LDRB W8, [X19 + 0x120]
	0x03E47614 MOVZ W2, 0x1
	0x03E47618 MOV X0, X19
	0x03E4761C CMP W8, 0x0
	0x03E47620 CSET W1, EQ
	0x03E47624 LDP X30, X19, [X31], #0x10
	0x03E47628 B 0x3E470A0
	0x03E4762C LDP X30, X19, [X31], #0x10
	0x03E47630 RET
	0x03E47634 STR X30, [X31 - 0x10]!
	0x03E47638 CBZ X1, 0x3E47654
	0x03E4763C LDR W8, [X1 + 0x148]
	0x03E47640 CBZ W8, 0x3E4764C
	0x03E47644 LDR X30, [X31], #0x10
	0x03E47648 RET
	0x03E4764C LDR X30, [X31], #0x10
	0x03E47650 B 0x3E475E0
	0x03E47654 BL 0x1C16F20
	0x03E47658 B 0x3E475E0
	0x03E4765C MOV X1, X31
	0x03E47660 B 0x3C32E90
	0x03E47664 LDRB W0, [X0 + 0x20]
	0x03E47668 RET
	0x03E4766C AND W8, W1, 0x1
	0x03E47670 STRB W8, [X0 + 0x20]
	0x03E47674 RET
	0x03E47678 STR X30, [X31 - 0x30]!
	0x03E4767C STP X22, X21, [X31 + 0x10]
	0x03E47680 STP X20, X19, [X31 + 0x20]
	0x03E47684 ADRP X21, 0x5A1000
	0x03E47688 ADRP X22, 0x324000
	0x03E4768C ADRP X20, 0x324000
	0x03E47690 LDRB W8, [X21 + 0x804]
	0x03E47694 LDR X22, [X22 + 0x548]
	0x03E47698 LDR X20, [X20 + 0x550]
	0x03E4769C MOV X19, X0
	0x03E476A0 TBNZ X8, 0x0, 0x3E476C4
	0x03E476A4 ADRP X0, 0x324000
	0x03E476A8 LDR X0, [X0 + 0x550]
	0x03E476AC BL 0x1C16CF4
	0x03E476B0 ADRP X0, 0x324000
	0x03E476B4 LDR X0, [X0 + 0x548]
	0x03E476B8 BL 0x1C16CF4
	0x03E476BC MOVZ W8, 0x1
	0x03E476C0 STRB W8, [X21 + 0x804]
	0x03E476C4 LDR X0, [X22]
	0x03E476C8 BL 0x1C16F10
	0x03E476CC LDR X1, [X20]
	0x03E476D0 MOV X20, X0
	0x03E476D4 BL 0x301B7C4
	0x03E476D8 STR X20, [X19 + 0x28]
	0x03E476DC MOV X0, X19

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+288], D8
	003 Move [X31+296], X29
	004 Move [X31+304], X30
	005 Move [X31+312], X21
	006 Move [X31+320], X20
	007 Move [X31+328], X19
	008 Move X20, 0x593000
	009 Move W8, [X20+1935]
	010 Move X19, X0
	011 NotImplemented "Instruction MOVI not yet implemented."
	012 Move [X31+256], V0
	013 Move [X31+264], V0
	014 Move [X31+224], V0
	015 Move [X31+232], V0
	016 Move [X31+192], V0
	017 Move [X31+200], V0
	018 Compare W8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, 0x2B5000
	021 Move X0, [X0+3848]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+1935], W8
	025 Move X8, 0x2B5000
	026 Move X8, [X8+3848]
	027 Move X0, X19
	028 Move X8, [X8]
	029 Move X8, [X8+184]
	030 Move S0, [X8]
	031 Move S1, [X8+4]
	032 Add X8, X31, 192
	033 Call Text.GetGenerationSettings, X0, X1
	034 Move X0, X19
	035 Call Text.get_cachedTextGeneratorForLayout, X0
	036 Move X20, [X19+224]
	037 Move X21, X0
	038 Add X0, X31, 96
	039 Add X1, X31, 192
	040 Move W2, 96
	041 Call 0x3EB2AC0
	042 Compare X21, 0
	043 JumpIfEqual {65}
	044 Add X0, X31, 0
	045 Add X1, X31, 96
	046 Move W2, 96
	047 Call 0x3EB2AC0
	048 Add X2, X31, 0
	049 Move X0, X21
	050 Move X1, X20
	051 Move X3, X31
	052 Call TextGenerator.GetPreferredWidth, X0, X1, X2
	053 Move X0, X19
	054 Move V8, V0
	055 Call Text.get_pixelsPerUnit, X0
	056 NotImplemented "Instruction FDIV not yet implemented."
	057 Move X20, [X31+320]
	058 Move X19, [X31+328]
	059 Move X30, [X31+304]
	060 Move X21, [X31+312]
	061 Move X29, [X31+296]
	062 Move V8, [X31+288]
	063 Add X31, X31, 336
	064 Return V0
	065 Call 0x1C17F20

Method: System.Single get_flexibleWidth()

Disassembly:
	0x03E476E0 LDP X20, X19, [X31 + 0x20]
	0x03E476E4 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Single get_minHeight()

Disassembly:
	0x03E476E8 MOV X1, X31
	0x03E476EC LDR X30, [X31], #0x30

ISIL:
	001 Move S0, W31
	002 Return V0

Method: System.Single get_preferredHeight()

Disassembly:
	0x03E476F0 B 0x3E4E160
	0x03E476F4 STP X30, X19, [X31 - 0x10]!
	0x03E476F8 MOV X19, X0
	0x03E476FC BL 0x3E46B40
	0x03E47700 MOV X0, X19
	0x03E47704 MOV X1, X31
	0x03E47708 LDP X30, X19, [X31], #0x10
	0x03E4770C B 0x3E5148C
	0x03E47710 STP X30, X19, [X31 - 0x10]!
	0x03E47714 MOV X19, X0
	0x03E47718 BL 0x3E46B40
	0x03E4771C MOV X0, X19
	0x03E47720 MOV X1, X31
	0x03E47724 LDP X30, X19, [X31], #0x10
	0x03E47728 B 0x3E4BDBC
	0x03E4772C STR X30, [X31 - 0x30]!
	0x03E47730 STP X22, X21, [X31 + 0x10]
	0x03E47734 STP X20, X19, [X31 + 0x20]
	0x03E47738 ADRP X21, 0x5A1000
	0x03E4773C ADRP X22, 0x2AC000
	0x03E47740 LDRB W8, [X21 + 0x805]
	0x03E47744 LDR X22, [X22 + 0x598]
	0x03E47748 MOV X20, X1
	0x03E4774C MOV X19, X0
	0x03E47750 TBNZ X8, 0x0, 0x3E47774
	0x03E47754 ADRP X0, 0x324000
	0x03E47758 LDR X0, [X0 + 0x510]
	0x03E4775C BL 0x1C16CF4
	0x03E47760 ADRP X0, 0x2AC000
	0x03E47764 LDR X0, [X0 + 0x598]
	0x03E47768 BL 0x1C16CF4
	0x03E4776C MOVZ W8, 0x1
	0x03E47770 STRB W8, [X21 + 0x805]
	0x03E47774 LDR X0, [X22]
	0x03E47778 LDR W8, [X0 + 0xE0]
	0x03E4777C CBNZ W8, 0x3E47784
	0x03E47780 BL 0x1C16DFC
	0x03E47784 MOV X0, X20
	0x03E47788 MOV X1, X31
	0x03E4778C MOV X2, X31
	0x03E47790 BL 0x3C3883C
	0x03E47794 TBNZ X0, 0x0, 0x3E477C8
	0x03E47798 LDR X0, [X19 + 0x28]
	0x03E4779C CBZ X0, 0x3E47878
	0x03E477A0 ADRP X8, 0x324000
	0x03E477A4 LDR X8, [X8 + 0x510]

ISIL:
	001 Subtract X31, X31, 336
	002 Move [X31+288], D8
	003 Move [X31+296], X29
	004 Move [X31+304], X30
	005 Move [X31+312], X21
	006 Move [X31+320], X20
	007 Move [X31+328], X19
	008 NotImplemented "Instruction MOVI not yet implemented."
	009 Move X1, X31
	010 Move X19, X0
	011 Move [X31+256], V0
	012 Move [X31+264], V0
	013 Move [X31+224], V0
	014 Move [X31+232], V0
	015 Move [X31+192], V0
	016 Move [X31+200], V0
	017 Call Graphic.GetPixelAdjustedRect, X0
	018 Move V0, V2
	019 Add X8, X31, 192
	020 Move S1, W31
	021 Move X0, X19
	022 Call Text.GetGenerationSettings, X0, X1
	023 Move X0, X19
	024 Call Text.get_cachedTextGeneratorForLayout, X0
	025 Move X20, [X19+224]
	026 Move X21, X0
	027 Add X0, X31, 96
	028 Add X1, X31, 192
	029 Move W2, 96
	030 Call 0x3EB2AC0
	031 Compare X21, 0
	032 JumpIfEqual {54}
	033 Add X0, X31, 0
	034 Add X1, X31, 96
	035 Move W2, 96
	036 Call 0x3EB2AC0
	037 Add X2, X31, 0
	038 Move X0, X21
	039 Move X1, X20
	040 Move X3, X31
	041 Call TextGenerator.GetPreferredHeight, X0, X1, X2
	042 Move X0, X19
	043 Move V8, V0
	044 Call Text.get_pixelsPerUnit, X0
	045 NotImplemented "Instruction FDIV not yet implemented."
	046 Move X20, [X31+320]
	047 Move X19, [X31+328]
	048 Move X30, [X31+304]
	049 Move X21, [X31+312]
	050 Move X29, [X31+296]
	051 Move V8, [X31+288]
	052 Add X31, X31, 336
	053 Return V0
	054 Call 0x1C17F20

Method: System.Single get_flexibleHeight()

Disassembly:
	0x03E477A8 MOV X1, X20
	0x03E477AC LDR X2, [X8]

ISIL:
	001 Move S0, -1
	002 Return V0

Method: System.Int32 get_layoutPriority()

Disassembly:
	0x03E477B0 BL 0x301C318
	0x03E477B4 TBZ X0, 0x0, 0x3E477C8

ISIL:
	001 Move W0, W31
	002 Return X0

