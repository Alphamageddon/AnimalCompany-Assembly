Type: UnityEngine.UI.Collections.IndexedSet`1

Method: System.Void Add(T item)

Disassembly:
	0x02DE3674 LDURB W8, [X29 - 0xC]
	0x02DE3678 CBZ W8, 0x2DE36C4
	0x02DE367C LDUR W1, [X29 - 0x2C]
	0x02DE3680 LDR W8, [X19 + 0x20]
	0x02DE3684 CMP W1, W8

ISIL:
	001 Move X8, [X2+32]
	002 Move W2, 1
	003 Move X8, [X8+192]
	004 Move X3, [X8+8]

Method: System.Void Add(T item, System.Boolean isActive)

Disassembly:
	0x02DE3688 B.GE 0x2DE36BC
	0x02DE368C SUB W2, W8, 0x1
	0x02DE3690 CMP W1, W2
	0x02DE3694 B.GE 0x2DE36B8
	0x02DE3698 LDR X8, [X20 + 0x20]
	0x02DE369C MOV X0, X19
	0x02DE36A0 LDR X8, [X8 + 0xC0]
	0x02DE36A4 LDR X3, [X8 + 0x60]
	0x02DE36A8 LDR X8, [X3]
	0x02DE36AC BLR X8
	0x02DE36B0 LDR W8, [X19 + 0x20]
	0x02DE36B4 SUB W2, W8, 0x1
	0x02DE36B8 STR W2, [X19 + 0x20]
	0x02DE36BC MOVZ W0, 0x1
	0x02DE36C0 B 0x2DE36C8
	0x02DE36C4 MOV W0, W31
	0x02DE36C8 LDR X8, [X23 + 0x28]
	0x02DE36CC LDUR X9, [X29 - 0x8]
	0x02DE36D0 CMP X8, X9
	0x02DE36D4 B.NE 0x2DE36F4
	0x02DE36D8 ADD X31, X29, 0x0
	0x02DE36DC LDP X20, X19, [X31 + 0x30]
	0x02DE36E0 LDP X22, X21, [X31 + 0x20]
	0x02DE36E4 LDP X24, X23, [X31 + 0x10]
	0x02DE36E8 LDP X29, X30, [X31], #0x40
	0x02DE36EC RET
	0x02DE36F0 BL 0x1C16F20
	0x02DE36F4 BL 0x3EB1B20
	0x02DE36F8 STP X29, X30, [X31 - 0x40]!
	0x02DE36FC STP X24, X23, [X31 + 0x10]
	0x02DE3700 STP X22, X21, [X31 + 0x20]
	0x02DE3704 STP X20, X19, [X31 + 0x30]
	0x02DE3708 ADD X29, X31, 0x0
	0x02DE370C SUB X31, X31, 0x30
	0x02DE3710 MRS X23, 0xC000
	0x02DE3714 LDR X8, [X23 + 0x28]
	0x02DE3718 MOV X19, X2
	0x02DE371C ADD X9, X31, 0x0
	0x02DE3720 MOV X20, X0
	0x02DE3724 STUR X8, [X29 - 0x8]
	0x02DE3728 STUR X1, [X29 - 0x28]
	0x02DE372C LDR X24, [X2 + 0x20]
	0x02DE3730 LDR X8, [X24 + 0xC0]
	0x02DE3734 LDR X8, [X8]
	0x02DE3738 LDR W2, [X8 + 0xFC]
	0x02DE373C ADD X10, X2, 0xF
	0x02DE3740 AND X10, X10, 0x1FFFFFFFF
	0x02DE3744 SUB X22, X9, X10
	0x02DE3748 ADD X31, X22, 0x0
	0x02DE374C MOVN W9, 0x0
	0x02DE3750 STUR W9, [X29 - 0x2C]
	0x02DE3754 LDR W8, [X8 + 0x28]
	0x02DE3758 LDR X21, [X0 + 0x18]
	0x02DE375C MOV X0, X22
	0x02DE3760 CMP W8, 0x0
	0x02DE3764 SUB X8, X29, 0x28
	0x02DE3768 CSEL X1, X1, X8, LT

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, X0
	007 Move X0, [X0+16]
	008 Compare X0, 0
	009 JumpIfEqual {69}
	010 Move X8, [X3+32]
	011 Move W10, [X0+28]
	012 Move X20, X3
	013 Move X9, [X8+192]
	014 Move X8, [X0+16]
	015 Add W10, W10, 1
	016 Move X9, [X9+32]
	017 Move [X0+28], W10
	018 Compare X8, 0
	019 JumpIfEqual {69}
	020 NotImplemented "Instruction LDRSW not yet implemented."
	021 Move W11, [X8+24]
	022 Move W22, W2
	023 Move X21, X1
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Add W9, W10, 1
	026 Add X8, X8, X10
	027 Move [X0+24], W9
	028 Move [X8+32], X21
	029 Move X8, [X9+32]
	030 Move X1, X21
	031 Move X8, [X8+192]
	032 Move X2, [X8+112]
	033 Call List`1<Object>.AddWithResize, X0, X1
	034 Move X8, [X19+16]
	035 Compare X8, 0
	036 JumpIfEqual {69}
	037 Move X0, [X19+24]
	038 Compare X0, 0
	039 JumpIfEqual {69}
	040 Move X9, [X20+32]
	041 Move W8, [X8+24]
	042 Move X1, X21
	043 Move X9, [X9+192]
	044 Subtract W2, W8, 1
	045 Move X3, [X9+56]
	046 Call Dictionary`2<Object, Int32>.Add, X0, X1, X2
	047 Move TEMP, X22
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {63}
	051 Move X8, [X20+32]
	052 Move X0, X19
	053 Move X1, X21
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X8, [X8+192]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X2, [X8+64]
	060 Move X30, [X31+48]
	061 Call 0x2DE380C, X0, X1
	062 Return 
	063 Move X20, [X31+32]
	064 Move X19, [X31+40]
	065 Move X22, [X31+16]
	066 Move X21, [X31+24]
	067 Move X30, [X31+48]
	068 Return 
	069 Call 0x1C17F20

Method: System.Boolean AddUnique(T item, System.Boolean isActive = True)

Disassembly:
	0x02DE376C BL 0x3EB1AC0
	0x02DE3770 CBZ X21, 0x2DE3800
	0x02DE3774 LDR X8, [X24 + 0xC0]
	0x02DE3778 LDR X9, [X8]
	0x02DE377C LDR X1, [X8 + 0x58]
	0x02DE3780 LDR W8, [X9 + 0x28]
	0x02DE3784 LDR X0, [X1]
	0x02DE3788 TBNZ X8, 0x1F, 0x2DE3790
	0x02DE378C LDR X22, [X22]
	0x02DE3790 SUB X8, X29, 0x2C
	0x02DE3794 STP X22, X8, [X29 - 0x20]
	0x02DE3798 LDR X8, [X1 + 0x10]
	0x02DE379C SUB X3, X29, 0x20
	0x02DE37A0 SUB X4, X29, 0xC
	0x02DE37A4 MOV X2, X21
	0x02DE37A8 BLR X8
	0x02DE37AC LDURB W21, [X29 - 0xC]
	0x02DE37B0 CBZ W21, 0x2DE37D0
	0x02DE37B4 LDR X8, [X19 + 0x20]
	0x02DE37B8 LDUR W1, [X29 - 0x2C]
	0x02DE37BC MOV X0, X20
	0x02DE37C0 LDR X8, [X8 + 0xC0]
	0x02DE37C4 LDR X2, [X8 + 0x68]
	0x02DE37C8 LDR X8, [X2]
	0x02DE37CC BLR X8
	0x02DE37D0 LDR X8, [X23 + 0x28]
	0x02DE37D4 LDUR X9, [X29 - 0x8]
	0x02DE37D8 CMP W21, 0x0
	0x02DE37DC CSET W0, NE
	0x02DE37E0 CMP X8, X9
	0x02DE37E4 B.NE 0x2DE3804
	0x02DE37E8 ADD X31, X29, 0x0
	0x02DE37EC LDP X20, X19, [X31 + 0x30]
	0x02DE37F0 LDP X22, X21, [X31 + 0x20]
	0x02DE37F4 LDP X24, X23, [X31 + 0x10]
	0x02DE37F8 LDP X29, X30, [X31], #0x40
	0x02DE37FC RET
	0x02DE3800 BL 0x1C16F20
	0x02DE3804 BL 0x3EB1B20
	0x02DE3808 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, X0
	007 Move X0, [X0+24]
	008 Compare X0, 0
	009 JumpIfEqual {49}
	010 Move X8, [X3+32]
	011 Move W22, W2
	012 Move X20, X3
	013 Move X19, X1
	014 Move X8, [X8+192]
	015 Move X2, [X8+72]
	016 Call Dictionary`2<Object, Int32>.ContainsKey, X0, X1
	017 Move X8, [X20+32]
	018 Move W20, W0
	019 Move X8, [X8+192]
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {32}
	024 Move TEMP, X22
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {37}
	028 Move X2, [X8+64]
	029 Move X0, X21
	030 Move X1, X19
	031 Call 0x2DE380C, X0, X1
	032 Move X3, [X8+8]
	033 And W2, W22, 1
	034 Move X0, X21
	035 Move X1, X19
	036 Call 0x2DE3688, X0, X1, X2
	037 Move X2, [X8+80]
	038 Move X0, X21
	039 Move X1, X19
	040 Call 0x2DE3890, X0, X1
	041 NotImplemented "Instruction ORN not yet implemented."
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 And W0, W8, 1
	047 Move X30, [X31+48]
	048 Return X0
	049 Call 0x1C17F20

Method: System.Boolean EnableItem(T item)

Disassembly:
	0x02DE380C STP X20, X19, [X31 + 0x10]
	0x02DE3810 ADRP X0, 0x1319000
	0x02DE3814 LDR X0, [X0 + 0x758]
	0x02DE3818 MOV X19, X1
	0x02DE381C BL 0x1C16D08
	0x02DE3820 BL 0x1C16F10
	0x02DE3824 MOV X1, X31
	0x02DE3828 MOV X20, X0
	0x02DE382C BL 0x3380288
	0x02DE3830 MOV X0, X20
	0x02DE3834 MOV X1, X19
	0x02DE3838 BL 0x1C16DEC
	0x02DE383C LDR X8, [X1 + 0x20]
	0x02DE3840 LDR X8, [X8 + 0xC0]
	0x02DE3844 LDR X1, [X8 + 0x78]
	0x02DE3848 LDR X2, [X1]
	0x02DE384C BR X2
	0x02DE3850 STR X30, [X31 - 0x20]!
	0x02DE3854 STP X20, X19, [X31 + 0x10]
	0x02DE3858 MOV X19, X0
	0x02DE385C LDR X0, [X0 + 0x10]
	0x02DE3860 CBZ X0, 0x2DE38A8
	0x02DE3864 LDR X8, [X1 + 0x20]
	0x02DE3868 MOV X20, X1
	0x02DE386C LDR X8, [X8 + 0xC0]
	0x02DE3870 LDR X1, [X8 + 0x80]
	0x02DE3874 LDR X8, [X1]
	0x02DE3878 BLR X8
	0x02DE387C LDR X0, [X19 + 0x18]
	0x02DE3880 CBZ X0, 0x2DE38A8
	0x02DE3884 LDR X8, [X20 + 0x20]
	0x02DE3888 LDR X8, [X8 + 0xC0]
	0x02DE388C LDR X1, [X8 + 0x88]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move [X31+12], W31
	005 Move X19, X0
	006 Move X0, [X0+24]
	007 Compare X0, 0
	008 JumpIfEqual {36}
	009 Move X8, [X2+32]
	010 Move X20, X2
	011 Add X2, X31, 12
	012 Move X8, [X8+192]
	013 Move X3, [X8+88]
	014 Call Dictionary`2<Object, Int32>.TryGetValue, X0, X1, X2
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {31}
	019 Move W2, [X31+12]
	020 Move W1, [X19+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X8, [X20+32]
	023 Move X0, X19
	024 Move X8, [X8+192]
	025 Move X3, [X8+96]
	026 Call 0x2DE3C40, X0, X1, X2
	027 Move W1, [X19+32]
	028 Add W8, W1, 1
	029 Move [X19+32], W8
	030 Move W0, 1
	031 Move W0, W31
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0
	036 Call 0x1C17F20

Method: System.Boolean DisableItem(T item)

Disassembly:
	0x02DE3890 LDR X8, [X1]
	0x02DE3894 BLR X8
	0x02DE3898 STR W31, [X19 + 0x20]
	0x02DE389C LDP X20, X19, [X31 + 0x10]
	0x02DE38A0 LDR X30, [X31], #0x20
	0x02DE38A4 RET
	0x02DE38A8 BL 0x1C16F20
	0x02DE38AC STP X29, X30, [X31 - 0x30]!
	0x02DE38B0 STP X22, X21, [X31 + 0x10]
	0x02DE38B4 STP X20, X19, [X31 + 0x20]
	0x02DE38B8 ADD X29, X31, 0x0
	0x02DE38BC SUB X31, X31, 0x20
	0x02DE38C0 MRS X21, 0xC000
	0x02DE38C4 LDR X8, [X21 + 0x28]
	0x02DE38C8 ADD X9, X31, 0x0
	0x02DE38CC STUR X8, [X29 - 0x8]
	0x02DE38D0 STUR X1, [X29 - 0x20]
	0x02DE38D4 LDR X22, [X2 + 0x20]
	0x02DE38D8 LDR X8, [X22 + 0xC0]
	0x02DE38DC LDR X8, [X8]
	0x02DE38E0 LDR W2, [X8 + 0xFC]
	0x02DE38E4 ADD X10, X2, 0xF
	0x02DE38E8 AND X10, X10, 0x1FFFFFFFF
	0x02DE38EC SUB X20, X9, X10
	0x02DE38F0 ADD X31, X20, 0x0
	0x02DE38F4 LDR W8, [X8 + 0x28]
	0x02DE38F8 LDR X19, [X0 + 0x18]
	0x02DE38FC MOV X0, X20
	0x02DE3900 CMP W8, 0x0
	0x02DE3904 SUB X8, X29, 0x20
	0x02DE3908 CSEL X1, X1, X8, LT
	0x02DE390C BL 0x3EB1AC0
	0x02DE3910 CBZ X19, 0x2DE3978
	0x02DE3914 LDR X8, [X22 + 0xC0]
	0x02DE3918 LDR X9, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move [X31+12], W31
	005 Move X19, X0
	006 Move X0, [X0+24]
	007 Compare X0, 0
	008 JumpIfEqual {38}
	009 Move X8, [X2+32]
	010 Move X20, X2
	011 Add X2, X31, 12
	012 Move X8, [X8+192]
	013 Move X3, [X8+88]
	014 Call Dictionary`2<Object, Int32>.TryGetValue, X0, X1, X2
	015 Move TEMP, X0
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfNotEqual {33}
	019 Move W1, [X31+12]
	020 Move W8, [X19+32]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Subtract W2, W8, 1
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X8, [X20+32]
	025 Move X0, X19
	026 Move X8, [X8+192]
	027 Move X3, [X8+96]
	028 Call 0x2DE3C40, X0, X1, X2
	029 Move W8, [X19+32]
	030 Subtract W2, W8, 1
	031 Move [X19+32], W2
	032 Move W0, 1
	033 Move W0, W31
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return X0
	038 Call 0x1C17F20

Method: System.Boolean Remove(T item)

Disassembly:
	0x02DE391C LDR X1, [X8 + 0x48]
	0x02DE3920 LDR W8, [X9 + 0x28]
	0x02DE3924 LDR X0, [X1]
	0x02DE3928 TBNZ X8, 0x1F, 0x2DE3930
	0x02DE392C LDR X20, [X20]
	0x02DE3930 STUR X20, [X29 - 0x18]
	0x02DE3934 LDR X8, [X1 + 0x10]
	0x02DE3938 SUB X3, X29, 0x18
	0x02DE393C SUB X4, X29, 0xC
	0x02DE3940 MOV X2, X19
	0x02DE3944 BLR X8
	0x02DE3948 LDURB W8, [X29 - 0xC]
	0x02DE394C LDR X9, [X21 + 0x28]
	0x02DE3950 LDUR X10, [X29 - 0x8]
	0x02DE3954 CMP W8, 0x0
	0x02DE3958 CSET W0, NE
	0x02DE395C CMP X9, X10
	0x02DE3960 B.NE 0x2DE397C
	0x02DE3964 ADD X31, X29, 0x0
	0x02DE3968 LDP X20, X19, [X31 + 0x20]
	0x02DE396C LDP X22, X21, [X31 + 0x10]
	0x02DE3970 LDP X29, X30, [X31], #0x30
	0x02DE3974 RET
	0x02DE3978 BL 0x1C16F20
	0x02DE397C BL 0x3EB1B20
	0x02DE3980 STR X30, [X31 - 0x10]!
	0x02DE3984 LDR X0, [X0 + 0x10]
	0x02DE3988 CBZ X0, 0x2DE39A4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move TEMP, 0
	007 Not TEMP
	008 Move W8, TEMP
	009 Move [X31+12], W8
	010 Move X19, X0
	011 Move X0, [X0+24]
	012 Compare X0, 0
	013 JumpIfEqual {38}
	014 Move X8, [X2+32]
	015 Move X20, X2
	016 Add X2, X31, 12
	017 Move X8, [X8+192]
	018 Move X3, [X8+88]
	019 Call Dictionary`2<Object, Int32>.TryGetValue, X0, X1, X2
	020 Move W21, W0
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {31}
	025 Move X8, [X20+32]
	026 Move W1, [X31+12]
	027 Move X0, X19
	028 Move X8, [X8+192]
	029 Move X2, [X8+104]
	030 Call 0x2DE3B38, X0, X1
	031 And W0, W21, 1
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X30, [X31+16]
	035 Move X21, [X31+24]
	036 Add X31, X31, 48
	037 Return X0
	038 Call 0x1C17F20

Method: System.Collections.Generic.IEnumerator`1<T> GetEnumerator()

Disassembly:
	0x02DE398C LDR X8, [X3 + 0x20]
	0x02DE3990 LDR X8, [X8 + 0xC0]
	0x02DE3994 LDR X3, [X8 + 0x98]
	0x02DE3998 LDR X4, [X3]
	0x02DE399C LDR X30, [X31], #0x10
	0x02DE39A0 BR X4
	0x02DE39A4 BL 0x1C16F20
	0x02DE39A8 LDR W0, [X0 + 0x20]
	0x02DE39AC RET
	0x02DE39B0 STR X30, [X31 - 0x10]!
	0x02DE39B4 LDR X0, [X0 + 0x10]
	0x02DE39B8 CBZ X0, 0x2DE39D4
	0x02DE39BC LDR X8, [X1 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x131A000
	005 Move X0, [X0+1880]
	006 Move X19, X1
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X1, X31
	010 Move X20, X0
	011 Call NotImplementedException..ctor, X0
	012 Move X0, X20
	013 Move X1, X19
	014 Call 0x1C17DEC

Method: System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()

Disassembly:
	0x02DE39C0 LDR X8, [X8 + 0xC0]
	0x02DE39C4 LDR X1, [X8 + 0x30]
	0x02DE39C8 LDR X2, [X1]
	0x02DE39CC LDR X30, [X31], #0x10
	0x02DE39D0 BR X2

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X1+32]
	003 Move X8, [X8+192]
	004 Move X1, [X8+120]
	005 Call 0x2DE398C, X0

Method: System.Void Clear()

Disassembly:
	0x02DE39D4 BL 0x1C16F20
	0x02DE39D8 MOV W0, W31
	0x02DE39DC RET
	0x02DE39E0 STP X29, X30, [X31 - 0x30]!
	0x02DE39E4 STP X22, X21, [X31 + 0x10]
	0x02DE39E8 STP X20, X19, [X31 + 0x20]
	0x02DE39EC ADD X29, X31, 0x0
	0x02DE39F0 SUB X31, X31, 0x30
	0x02DE39F4 MRS X21, 0xC000
	0x02DE39F8 LDR X8, [X21 + 0x28]
	0x02DE39FC ADD X9, X31, 0x0
	0x02DE3A00 STUR X8, [X29 - 0x8]
	0x02DE3A04 STUR X1, [X29 - 0x28]
	0x02DE3A08 LDR X22, [X2 + 0x20]
	0x02DE3A0C LDR X8, [X22 + 0xC0]
	0x02DE3A10 LDR X8, [X8]
	0x02DE3A14 LDR W2, [X8 + 0xFC]
	0x02DE3A18 ADD X10, X2, 0xF
	0x02DE3A1C AND X10, X10, 0x1FFFFFFFF
	0x02DE3A20 SUB X20, X9, X10
	0x02DE3A24 ADD X31, X20, 0x0
	0x02DE3A28 MOVN W9, 0x0
	0x02DE3A2C STUR W9, [X29 - 0x2C]
	0x02DE3A30 LDR W8, [X8 + 0x28]
	0x02DE3A34 LDR X19, [X0 + 0x18]
	0x02DE3A38 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+16]
	005 Compare X8, 0
	006 JumpIfEqual {31}
	007 Move W2, [X8+24]
	008 Move W9, [X8+28]
	009 Move X19, X0
	010 Move X20, X1
	011 Add W9, W9, 1
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move [X8+24], W31
	014 Move [X8+28], W9
	015 Move X0, [X8+16]
	016 Move W1, W31
	017 Move X3, X31
	018 Call Array.Clear, X0, X1, X2
	019 Move X0, [X19+24]
	020 Compare X0, 0
	021 JumpIfEqual {31}
	022 Move X8, [X20+32]
	023 Move X8, [X8+192]
	024 Move X1, [X8+136]
	025 Call Dictionary`2<Object, Int32>.Clear, X0
	026 Move [X19+32], W31
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move X30, [X31+32]
	030 Return 
	031 Call 0x1C17F20

Method: System.Boolean Contains(T item)

Disassembly:
	0x02DE3A3C CMP W8, 0x0
	0x02DE3A40 SUB X8, X29, 0x28
	0x02DE3A44 CSEL X1, X1, X8, LT
	0x02DE3A48 BL 0x3EB1AC0
	0x02DE3A4C CBZ X19, 0x2DE3ABC
	0x02DE3A50 LDR X8, [X22 + 0xC0]
	0x02DE3A54 LDR X9, [X8]
	0x02DE3A58 LDR X1, [X8 + 0x58]
	0x02DE3A5C LDR W8, [X9 + 0x28]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+24]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X2+32]
	006 Move X8, [X8+192]
	007 Move X2, [X8+72]
	008 Move X30, [X31+16]
	009 Call Dictionary`2<Object, Int32>.ContainsKey, X0, X1
	010 Return X0
	011 Call 0x1C17F20

Method: System.Void CopyTo(T[] array, System.Int32 arrayIndex)

Disassembly:
	0x02DE3A60 LDR X0, [X1]
	0x02DE3A64 TBNZ X8, 0x1F, 0x2DE3A6C
	0x02DE3A68 LDR X20, [X20]
	0x02DE3A6C SUB X8, X29, 0x2C
	0x02DE3A70 STP X20, X8, [X29 - 0x20]
	0x02DE3A74 LDR X8, [X1 + 0x10]
	0x02DE3A78 SUB X3, X29, 0x20
	0x02DE3A7C SUB X4, X29, 0xC
	0x02DE3A80 MOV X2, X19

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {11}
	005 Move X8, [X3+32]
	006 Move X8, [X8+192]
	007 Move X3, [X8+152]
	008 Move X30, [X31+16]
	009 Call List`1<Object>.CopyTo, X0, X1, X2
	010 Return 
	011 Call 0x1C17F20

Method: System.Int32 get_Count()

Disassembly:
	0x02DE3A84 BLR X8
	0x02DE3A88 LDURB W8, [X29 - 0xC]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Int32 get_Capacity()

Disassembly:
	0x02DE3A8C LDUR W9, [X29 - 0x2C]
	0x02DE3A90 LDR X10, [X21 + 0x28]
	0x02DE3A94 LDUR X11, [X29 - 0x8]
	0x02DE3A98 CMP W8, 0x0
	0x02DE3A9C CSINV W0, W9, W31, NE
	0x02DE3AA0 CMP X10, X11
	0x02DE3AA4 B.NE 0x2DE3AC0

ISIL:
	001 Move [X31-16], X30
	002 Move X8, [X0+16]
	003 Compare X8, 0
	004 JumpIfEqual {8}
	005 Move W0, [X8+24]
	006 Move X30, [X31+16]
	007 Return X0
	008 Call 0x1C17F20

Method: System.Boolean get_IsReadOnly()

Disassembly:
	0x02DE3AA8 ADD X31, X29, 0x0
	0x02DE3AAC LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Int32 IndexOf(T item)

Disassembly:
	0x02DE3AB0 LDP X22, X21, [X31 + 0x10]
	0x02DE3AB4 LDP X29, X30, [X31], #0x30
	0x02DE3AB8 RET
	0x02DE3ABC BL 0x1C16F20
	0x02DE3AC0 BL 0x3EB1B20
	0x02DE3AC4 STR X30, [X31 - 0x20]!
	0x02DE3AC8 STP X20, X19, [X31 + 0x10]
	0x02DE3ACC ADRP X0, 0x1310000
	0x02DE3AD0 LDR X0, [X0 + 0xB40]
	0x02DE3AD4 MOV X19, X3
	0x02DE3AD8 BL 0x1C16D08
	0x02DE3ADC BL 0x1C16F10
	0x02DE3AE0 MOV X20, X0
	0x02DE3AE4 ADRP X0, 0x133B000
	0x02DE3AE8 LDR X0, [X0 + 0xF40]
	0x02DE3AEC BL 0x1C16D08

ISIL:
	001 Move [X31-16], X30
	002 Move TEMP, 0
	003 Not TEMP
	004 Move W8, TEMP
	005 Move [X31+12], W8
	006 Move X0, [X0+24]
	007 Compare X0, 0
	008 JumpIfEqual {19}
	009 Move X8, [X2+32]
	010 Add X2, X31, 12
	011 Move X8, [X8+192]
	012 Move X3, [X8+88]
	013 Call Dictionary`2<Object, Int32>.TryGetValue, X0, X1, X2
	014 Move W8, [X31+12]
	015 And W31, W0, 1
	016 NotImplemented "Instruction CSINV not yet implemented."
	017 Move X30, [X31+16]
	018 Return X0
	019 Call 0x1C17F20

Method: System.Void Insert(System.Int32 index, T item)

Disassembly:
	0x02DE3AF0 MOV X1, X0
	0x02DE3AF4 MOV X0, X20
	0x02DE3AF8 MOV X2, X31
	0x02DE3AFC BL 0x3379A44
	0x02DE3B00 MOV X0, X20
	0x02DE3B04 MOV X1, X19
	0x02DE3B08 BL 0x1C16DEC
	0x02DE3B0C STP X29, X30, [X31 - 0x50]!
	0x02DE3B10 STP X26, X25, [X31 + 0x10]
	0x02DE3B14 STP X24, X23, [X31 + 0x20]
	0x02DE3B18 STP X22, X21, [X31 + 0x30]
	0x02DE3B1C STP X20, X19, [X31 + 0x40]
	0x02DE3B20 ADD X29, X31, 0x0
	0x02DE3B24 SUB X31, X31, 0x20
	0x02DE3B28 MRS X26, 0xC000
	0x02DE3B2C LDR X8, [X26 + 0x28]
	0x02DE3B30 MOV X20, X2
	0x02DE3B34 MOV W24, W1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X0, 0x1311000
	005 Move X0, [X0+2880]
	006 Move X19, X3
	007 Call 0x1C17D08
	008 Call 0x1C17F10
	009 Move X20, X0
	010 Move X0, 0x133C000
	011 Move X0, [X0+3904]
	012 Call 0x1C17D08
	013 Move X1, X0
	014 Move X0, X20
	015 Move X2, X31
	016 Call NotSupportedException..ctor, X0, X1
	017 Move X0, X20
	018 Move X1, X19
	019 Call 0x1C17DEC

Method: System.Void RemoveAt(System.Int32 index)

Disassembly:
	0x02DE3B38 MOV X22, X0
	0x02DE3B3C STUR X8, [X29 - 0x8]
	0x02DE3B40 LDR X8, [X2 + 0x20]
	0x02DE3B44 LDR X25, [X8 + 0xC0]
	0x02DE3B48 LDR X8, [X25]
	0x02DE3B4C LDR W21, [X8 + 0xFC]
	0x02DE3B50 ADD X8, X31, 0x0
	0x02DE3B54 ADD X9, X21, 0xF
	0x02DE3B58 AND X9, X9, 0x1FFFFFFFF
	0x02DE3B5C SUB X19, X8, X9
	0x02DE3B60 ADD X31, X19, 0x0
	0x02DE3B64 ADD X8, X31, 0x0
	0x02DE3B68 SUB X23, X8, X9
	0x02DE3B6C ADD X31, X23, 0x0
	0x02DE3B70 MOV X0, X23
	0x02DE3B74 MOV W1, W31
	0x02DE3B78 MOV X2, X21
	0x02DE3B7C BL 0x3EB1B10
	0x02DE3B80 LDR X2, [X22 + 0x10]
	0x02DE3B84 CBZ X2, 0x2DE3D48
	0x02DE3B88 LDR X1, [X25 + 0xA0]
	0x02DE3B8C SUB X8, X29, 0xC
	0x02DE3B90 SUB X3, X29, 0x20
	0x02DE3B94 MOV X4, X19
	0x02DE3B98 LDR X0, [X1]
	0x02DE3B9C STUR W24, [X29 - 0xC]
	0x02DE3BA0 STP X8, X19, [X29 - 0x20]
	0x02DE3BA4 LDR X8, [X1 + 0x10]
	0x02DE3BA8 BLR X8
	0x02DE3BAC MOV X0, X23
	0x02DE3BB0 MOV X1, X19
	0x02DE3BB4 MOV X2, X21
	0x02DE3BB8 BL 0x3EB1AC0
	0x02DE3BBC LDR X0, [X22 + 0x10]
	0x02DE3BC0 CBZ X0, 0x2DE3D48
	0x02DE3BC4 LDR X8, [X20 + 0x20]
	0x02DE3BC8 LDR X8, [X8 + 0xC0]
	0x02DE3BCC LDR X1, [X8 + 0x30]
	0x02DE3BD0 LDR X8, [X1]
	0x02DE3BD4 BLR X8
	0x02DE3BD8 SUB W8, W0, 0x1
	0x02DE3BDC CMP W8, W24
	0x02DE3BE0 B.NE 0x2DE3C2C
	0x02DE3BE4 LDR X0, [X22 + 0x10]
	0x02DE3BE8 CBZ X0, 0x2DE3D48
	0x02DE3BEC LDR X8, [X20 + 0x20]
	0x02DE3BF0 LDR W25, [X22 + 0x20]
	0x02DE3BF4 LDR X8, [X8 + 0xC0]
	0x02DE3BF8 LDR X1, [X8 + 0x30]
	0x02DE3BFC LDR X8, [X1]
	0x02DE3C00 BLR X8
	0x02DE3C04 CMP W25, W0
	0x02DE3C08 B.NE 0x2DE3C18
	0x02DE3C0C LDR W8, [X22 + 0x20]
	0x02DE3C10 SUB W8, W8, 0x1
	0x02DE3C14 STR W8, [X22 + 0x20]
	0x02DE3C18 LDR X0, [X22 + 0x10]
	0x02DE3C1C CBZ X0, 0x2DE3D48
	0x02DE3C20 LDR X8, [X20 + 0x20]
	0x02DE3C24 MOV W1, W24
	0x02DE3C28 B 0x2DE3CBC
	0x02DE3C2C LDR X0, [X22 + 0x10]
	0x02DE3C30 CBZ X0, 0x2DE3D48
	0x02DE3C34 LDR X8, [X20 + 0x20]
	0x02DE3C38 LDR X8, [X8 + 0xC0]
	0x02DE3C3C LDR X1, [X8 + 0x30]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, X0
	008 Move X0, [X0+16]
	009 Compare X0, 0
	010 JumpIfEqual {71}
	011 Move X8, [X2+32]
	012 Move X19, X2
	013 Move W22, W1
	014 Move X8, [X8+192]
	015 Move X2, [X8+160]
	016 Call List`1<Object>.get_Item, X0, X1
	017 Move X8, [X20+16]
	018 Compare X8, 0
	019 JumpIfEqual {71}
	020 Move X9, [X19+32]
	021 Move W11, [X8+24]
	022 Move W10, [X20+32]
	023 Move X21, X0
	024 Move X9, [X9+192]
	025 Subtract W23, W11, 1
	026 NotImplemented "Instruction CMP not yet implemented."
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move [X20+32], W22
	029 Move X2, [X9+168]
	030 Move X0, X8
	031 Move W1, W22
	032 Subtract W1, W10, 1
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move [X20+32], W1
	035 Move X3, [X9+96]
	036 Move X0, X20
	037 Move W2, W22
	038 Call 0x2DE3C40, X0, X1, X2
	039 Move X8, [X19+32]
	040 Move W22, [X20+32]
	041 Move X9, [X8+192]
	042 Move [X20+32], W22
	043 Move X3, [X9+96]
	044 Move X0, X20
	045 Move W1, W23
	046 Move W2, W22
	047 Call 0x2DE3C40, X0, X1, X2
	048 Move X0, [X20+16]
	049 Compare X0, 0
	050 JumpIfEqual {71}
	051 Move X8, [X19+32]
	052 Move W1, W23
	053 Move X8, [X8+192]
	054 Move X2, [X8+168]
	055 Call List`1<Object>.RemoveAt, X0, X1
	056 Move X0, [X20+24]
	057 Compare X0, 0
	058 JumpIfEqual {71}
	059 Move X8, [X19+32]
	060 Move X1, X21
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X8, [X8+192]
	066 Move X2, [X8+176]
	067 Move X30, [X31+48]
	068 Move X23, [X31+56]
	069 Call Dictionary`2<Object, Int32>.Remove, X0, X1
	070 Return 
	071 Call 0x1C17F20

Method: System.Void Swap(System.Int32 index1, System.Int32 index2)

Disassembly:
	0x02DE3C40 LDR X8, [X1]
	0x02DE3C44 BLR X8
	0x02DE3C48 LDR W8, [X22 + 0x20]
	0x02DE3C4C SUB W25, W0, 0x1
	0x02DE3C50 SUB W1, W8, 0x1
	0x02DE3C54 CMP W1, W24
	0x02DE3C58 B.LE 0x2DE3C84
	0x02DE3C5C STR W1, [X22 + 0x20]
	0x02DE3C60 LDR X8, [X20 + 0x20]
	0x02DE3C64 MOV X0, X22
	0x02DE3C68 MOV W2, W24
	0x02DE3C6C LDR X8, [X8 + 0xC0]
	0x02DE3C70 LDR X3, [X8 + 0x60]
	0x02DE3C74 LDR X8, [X3]
	0x02DE3C78 BLR X8
	0x02DE3C7C LDR W24, [X22 + 0x20]
	0x02DE3C80 B 0x2DE3C8C
	0x02DE3C84 B.NE 0x2DE3C8C
	0x02DE3C88 STR W24, [X22 + 0x20]
	0x02DE3C8C LDR X8, [X20 + 0x20]
	0x02DE3C90 MOV X0, X22
	0x02DE3C94 MOV W1, W25
	0x02DE3C98 MOV W2, W24
	0x02DE3C9C LDR X8, [X8 + 0xC0]
	0x02DE3CA0 LDR X3, [X8 + 0x60]
	0x02DE3CA4 LDR X8, [X3]
	0x02DE3CA8 BLR X8
	0x02DE3CAC LDR X0, [X22 + 0x10]
	0x02DE3CB0 CBZ X0, 0x2DE3D48
	0x02DE3CB4 LDR X8, [X20 + 0x20]
	0x02DE3CB8 MOV W1, W25
	0x02DE3CBC LDR X8, [X8 + 0xC0]
	0x02DE3CC0 LDR X2, [X8 + 0xA8]
	0x02DE3CC4 LDR X8, [X2]
	0x02DE3CC8 BLR X8
	0x02DE3CCC LDR X22, [X22 + 0x18]
	0x02DE3CD0 MOV X0, X19
	0x02DE3CD4 MOV X1, X23
	0x02DE3CD8 MOV X2, X21
	0x02DE3CDC BL 0x3EB1AC0
	0x02DE3CE0 CBZ X22, 0x2DE3D48
	0x02DE3CE4 LDR X8, [X20 + 0x20]
	0x02DE3CE8 LDR X8, [X8 + 0xC0]
	0x02DE3CEC LDR X9, [X8]
	0x02DE3CF0 LDR X1, [X8 + 0xB0]
	0x02DE3CF4 LDR W8, [X9 + 0x28]
	0x02DE3CF8 LDR X0, [X1]
	0x02DE3CFC TBNZ X8, 0x1F, 0x2DE3D04
	0x02DE3D00 LDR X19, [X19]
	0x02DE3D04 STUR X19, [X29 - 0x20]
	0x02DE3D08 LDR X8, [X1 + 0x10]
	0x02DE3D0C SUB X3, X29, 0x20
	0x02DE3D10 SUB X4, X29, 0xC
	0x02DE3D14 MOV X2, X22
	0x02DE3D18 BLR X8
	0x02DE3D1C LDR X8, [X26 + 0x28]
	0x02DE3D20 LDUR X9, [X29 - 0x8]
	0x02DE3D24 CMP X8, X9
	0x02DE3D28 B.NE 0x2DE3D4C
	0x02DE3D2C ADD X31, X29, 0x0
	0x02DE3D30 LDP X20, X19, [X31 + 0x40]
	0x02DE3D34 LDP X22, X21, [X31 + 0x30]
	0x02DE3D38 LDP X24, X23, [X31 + 0x20]
	0x02DE3D3C LDP X26, X25, [X31 + 0x10]
	0x02DE3D40 LDP X29, X30, [X31], #0x50
	0x02DE3D44 RET
	0x02DE3D48 BL 0x1C16F20
	0x02DE3D4C BL 0x3EB1B20
	0x02DE3D50 STP X29, X30, [X31 - 0x60]!

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X20, [X31+48]
	010 Move X19, [X31+56]
	011 Move X22, [X31+32]
	012 Move X21, [X31+40]
	013 Move X24, [X31+16]
	014 Move X23, [X31+24]
	015 Move X30, [X31+64]
	016 Return 
	017 Move X21, X0
	018 Move X0, [X0+16]
	019 Compare X0, 0
	020 JumpIfEqual {84}
	021 Move X8, [X3+32]
	022 Move W19, W2
	023 Move X20, X3
	024 Move W22, W1
	025 Move X8, [X8+192]
	026 Move X2, [X8+160]
	027 Call List`1<Object>.get_Item, X0, X1
	028 Move X8, [X21+16]
	029 Compare X8, 0
	030 JumpIfEqual {84}
	031 Move X9, [X20+32]
	032 Move X23, X0
	033 Move X0, X8
	034 Move W1, W19
	035 Move X9, [X9+192]
	036 Move X2, [X9+160]
	037 Call List`1<Object>.get_Item, X0, X1
	038 Move X8, [X21+16]
	039 Compare X8, 0
	040 JumpIfEqual {84}
	041 Move X9, [X20+32]
	042 Move X24, X0
	043 Move X0, X8
	044 Move W1, W22
	045 Move X9, [X9+192]
	046 Move X2, X24
	047 Move X3, [X9+184]
	048 Call List`1<Object>.set_Item, X0, X1, X2
	049 Move X0, [X21+16]
	050 Compare X0, 0
	051 JumpIfEqual {84}
	052 Move X8, [X20+32]
	053 Move W1, W19
	054 Move X2, X23
	055 Move X8, [X8+192]
	056 Move X3, [X8+184]
	057 Call List`1<Object>.set_Item, X0, X1, X2
	058 Move X0, [X21+24]
	059 Compare X0, 0
	060 JumpIfEqual {84}
	061 Move X8, [X20+32]
	062 Move X1, X24
	063 Move W2, W22
	064 Move X8, [X8+192]
	065 Move X3, [X8+192]
	066 Call Dictionary`2<Object, Int32>.set_Item, X0, X1, X2
	067 Move X0, [X21+24]
	068 Compare X0, 0
	069 JumpIfEqual {84}
	070 Move X8, [X20+32]
	071 Move X1, X23
	072 Move W2, W19
	073 Move X20, [X31+48]
	074 Move X19, [X31+56]
	075 Move X8, [X8+192]
	076 Move X22, [X31+32]
	077 Move X21, [X31+40]
	078 Move X24, [X31+16]
	079 Move X23, [X31+24]
	080 Move X3, [X8+192]
	081 Move X30, [X31+64]
	082 Call Dictionary`2<Object, Int32>.set_Item, X0, X1, X2
	083 Return 
	084 Call 0x1C17F20

Method: T get_Item(System.Int32 index)

Disassembly:
	0x02DE3D54 STP X28, X27, [X31 + 0x10]
	0x02DE3D58 STP X26, X25, [X31 + 0x20]
	0x02DE3D5C STP X24, X23, [X31 + 0x30]
	0x02DE3D60 STP X22, X21, [X31 + 0x40]
	0x02DE3D64 STP X20, X19, [X31 + 0x50]
	0x02DE3D68 ADD X29, X31, 0x0
	0x02DE3D6C SUB X31, X31, 0x50
	0x02DE3D70 MRS X8, 0xC000
	0x02DE3D74 STUR X8, [X29 - 0x30]
	0x02DE3D78 LDR X8, [X8 + 0x28]
	0x02DE3D7C MOV X26, X0
	0x02DE3D80 MOV W20, W2
	0x02DE3D84 MOV W25, W1
	0x02DE3D88 STUR X8, [X29 - 0x8]
	0x02DE3D8C LDR X8, [X3 + 0x20]
	0x02DE3D90 LDR X23, [X8 + 0xC0]
	0x02DE3D94 LDR X8, [X23]
	0x02DE3D98 LDR W21, [X8 + 0xFC]
	0x02DE3D9C ADD X8, X31, 0x0
	0x02DE3DA0 ADD X9, X21, 0xF
	0x02DE3DA4 AND X28, X9, 0x1FFFFFFFF
	0x02DE3DA8 SUB X22, X8, X28
	0x02DE3DAC ADD X31, X22, 0x0
	0x02DE3DB0 ADD X8, X31, 0x0
	0x02DE3DB4 SUB X24, X8, X28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+32]
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move X0, [X0+16]
	007 Compare X0, 0
	008 JumpIfEqual {28}
	009 Move X8, [X2+32]
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X8, [X8+192]
	013 Move X2, [X8+160]
	014 Move X30, [X31+32]
	015 Call List`1<Object>.get_Item, X0, X1
	016 Return X0
	017 Move X0, 0x131B000
	018 Move X0, [X0+3960]
	019 Move X19, X2
	020 Call 0x1C17D08
	021 Call 0x1C17F10
	022 Move X1, X31
	023 Move X20, X0
	024 Call IndexOutOfRangeException..ctor, X0
	025 Move X0, X20
	026 Move X1, X19
	027 Call 0x1C17DEC
	028 Call 0x1C17F20

Method: System.Void set_Item(System.Int32 index, T value)

Disassembly:
	0x02DE3DB8 ADD X31, X24, 0x0
	0x02DE3DBC ADD X8, X31, 0x0
	0x02DE3DC0 SUB X19, X8, X28
	0x02DE3DC4 ADD X31, X19, 0x0
	0x02DE3DC8 ADD X8, X31, 0x0
	0x02DE3DCC SUB X8, X8, X28
	0x02DE3DD0 STP X8, X3, [X29 - 0x40]
	0x02DE3DD4 ADD X31, X8, 0x0
	0x02DE3DD8 ADD X8, X31, 0x0
	0x02DE3DDC SUB X8, X8, X28
	0x02DE3DE0 STUR X8, [X29 - 0x48]
	0x02DE3DE4 ADD X31, X8, 0x0
	0x02DE3DE8 ADD X8, X31, 0x0
	0x02DE3DEC SUB X8, X8, X28
	0x02DE3DF0 STUR X8, [X29 - 0x50]
	0x02DE3DF4 ADD X31, X8, 0x0
	0x02DE3DF8 ADD X8, X31, 0x0
	0x02DE3DFC SUB X0, X8, X28
	0x02DE3E00 ADD X31, X0, 0x0
	0x02DE3E04 MOV W1, W31
	0x02DE3E08 MOV X2, X21
	0x02DE3E0C MOV X27, X0
	0x02DE3E10 BL 0x3EB1B10
	0x02DE3E14 ADD X8, X31, 0x0
	0x02DE3E18 SUB X28, X8, X28
	0x02DE3E1C ADD X31, X28, 0x0
	0x02DE3E20 MOV X0, X28
	0x02DE3E24 MOV W1, W31
	0x02DE3E28 MOV X2, X21
	0x02DE3E2C BL 0x3EB1B10
	0x02DE3E30 CMP W25, W20
	0x02DE3E34 STP W20, W25, [X29 - 0x28]
	0x02DE3E38 B.EQ 0x2DE4048
	0x02DE3E3C LDR X2, [X26 + 0x10]
	0x02DE3E40 CBZ X2, 0x2DE407C
	0x02DE3E44 LDR X1, [X23 + 0xA0]
	0x02DE3E48 LDUR W8, [X29 - 0x24]
	0x02DE3E4C SUB X23, X29, 0xC
	0x02DE3E50 SUB X3, X29, 0x20
	0x02DE3E54 LDR X0, [X1]
	0x02DE3E58 STUR W8, [X29 - 0xC]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, X0
	007 Move X0, [X0+16]
	008 Compare X0, 0
	009 JumpIfEqual {50}
	010 Move X8, [X3+32]
	011 Move X19, X2
	012 Move X21, X3
	013 Move W20, W1
	014 Move X8, [X8+192]
	015 Move X2, [X8+160]
	016 Call List`1<Object>.get_Item, X0, X1
	017 Move X8, [X22+24]
	018 Compare X8, 0
	019 JumpIfEqual {50}
	020 Move X9, [X21+32]
	021 Move X1, X0
	022 Move X0, X8
	023 Move X9, [X9+192]
	024 Move X2, [X9+176]
	025 Call Dictionary`2<Object, Int32>.Remove, X0, X1
	026 Move X0, [X22+16]
	027 Compare X0, 0
	028 JumpIfEqual {50}
	029 Move X8, [X21+32]
	030 Move W1, W20
	031 Move X2, X19
	032 Move X8, [X8+192]
	033 Move X3, [X8+184]
	034 Call List`1<Object>.set_Item, X0, X1, X2
	035 Move X0, [X22+24]
	036 Compare X0, 0
	037 JumpIfEqual {50}
	038 Move X8, [X21+32]
	039 Move X1, X19
	040 Move W2, W20
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X8, [X8+192]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X3, [X8+56]
	047 Move X30, [X31+48]
	048 Call Dictionary`2<Object, Int32>.Add, X0, X1, X2
	049 Return 
	050 Call 0x1C17F20

Method: System.Void RemoveAll(System.Predicate`1<T> match)

Disassembly:
	0x02DE3E5C STP X23, X22, [X29 - 0x20]
	0x02DE3E60 LDR X8, [X1 + 0x10]
	0x02DE3E64 MOV X4, X22
	0x02DE3E68 BLR X8
	0x02DE3E6C MOV X0, X27
	0x02DE3E70 MOV X1, X22
	0x02DE3E74 MOV X2, X21
	0x02DE3E78 BL 0x3EB1AC0
	0x02DE3E7C LDR X2, [X26 + 0x10]
	0x02DE3E80 LDUR X20, [X29 - 0x38]
	0x02DE3E84 CBZ X2, 0x2DE407C
	0x02DE3E88 LDR X8, [X20 + 0x20]
	0x02DE3E8C SUB X3, X29, 0x20
	0x02DE3E90 MOV X4, X24
	0x02DE3E94 LDR X8, [X8 + 0xC0]
	0x02DE3E98 LDR X1, [X8 + 0xA0]
	0x02DE3E9C LDUR W8, [X29 - 0x28]
	0x02DE3EA0 LDR X0, [X1]
	0x02DE3EA4 STUR W8, [X29 - 0xC]
	0x02DE3EA8 STP X23, X24, [X29 - 0x20]
	0x02DE3EAC LDR X8, [X1 + 0x10]
	0x02DE3EB0 BLR X8
	0x02DE3EB4 MOV X0, X28
	0x02DE3EB8 MOV X1, X24
	0x02DE3EBC MOV X2, X21
	0x02DE3EC0 BL 0x3EB1AC0
	0x02DE3EC4 LDR X22, [X26 + 0x10]
	0x02DE3EC8 MOV X0, X19
	0x02DE3ECC MOV X1, X28
	0x02DE3ED0 MOV X2, X21
	0x02DE3ED4 MOV X23, X26
	0x02DE3ED8 BL 0x3EB1AC0
	0x02DE3EDC CBZ X22, 0x2DE407C
	0x02DE3EE0 LDR X8, [X20 + 0x20]
	0x02DE3EE4 LDUR X24, [X29 - 0x40]
	0x02DE3EE8 LDR X8, [X8 + 0xC0]
	0x02DE3EEC LDR X9, [X8]
	0x02DE3EF0 LDR X1, [X8 + 0xB8]
	0x02DE3EF4 LDR W8, [X9 + 0x28]
	0x02DE3EF8 LDR X0, [X1]
	0x02DE3EFC TBNZ X8, 0x1F, 0x2DE3F04
	0x02DE3F00 LDR X19, [X19]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, X0
	008 Move X0, [X0+16]
	009 Compare X0, 0
	010 JumpIfEqual {46}
	011 Move X19, X2
	012 Move X21, X1
	013 Move W22, W31
	014 Move W8, [X0+24]
	015 NotImplemented "Instruction CMP not yet implemented."
	016 Move X8, [X19+32]
	017 Move W1, W22
	018 Move X8, [X8+192]
	019 Move X2, [X8+160]
	020 Call List`1<Object>.get_Item, X0, X1
	021 Compare X21, 0
	022 JumpIfEqual {46}
	023 Move X23, X0
	024 Move X8, [X21+24]
	025 Move X0, [X21+64]
	026 Move X2, [X21+40]
	027 Move X1, X23
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {42}
	033 Move X8, [X19+32]
	034 Move X0, X20
	035 Move X1, X23
	036 Move X8, [X8+192]
	037 Move X2, [X8+216]
	038 Call 0x2DE391C, X0, X1
	039 Move X0, [X20+16]
	040 Compare X0, 0
	041 JumpIfNotEqual {14}
	042 Move X0, [X20+16]
	043 Add W22, W22, 1
	044 Compare X0, 0
	045 JumpIfNotEqual {14}
	046 Call 0x1C17F20
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X22, [X31+16]
	050 Move X21, [X31+24]
	051 Move X30, [X31+48]
	052 Move X23, [X31+56]
	053 Return 

Method: System.Void Sort(System.Comparison`1<T> sortLayoutFunction)

Disassembly:
	0x02DE3F04 LDUR W8, [X29 - 0x24]
	0x02DE3F08 SUB X3, X29, 0x20
	0x02DE3F0C MOV X2, X22
	0x02DE3F10 MOV X4, X19
	0x02DE3F14 STUR W8, [X29 - 0xC]
	0x02DE3F18 SUB X8, X29, 0xC
	0x02DE3F1C STP X8, X19, [X29 - 0x20]
	0x02DE3F20 LDR X8, [X1 + 0x10]
	0x02DE3F24 BLR X8
	0x02DE3F28 LDR X19, [X23 + 0x10]
	0x02DE3F2C MOV X0, X24
	0x02DE3F30 MOV X1, X27
	0x02DE3F34 MOV X2, X21
	0x02DE3F38 MOV X22, X23
	0x02DE3F3C BL 0x3EB1AC0
	0x02DE3F40 CBZ X19, 0x2DE407C
	0x02DE3F44 LDR X8, [X20 + 0x20]
	0x02DE3F48 LDUR X23, [X29 - 0x48]
	0x02DE3F4C LDR X8, [X8 + 0xC0]
	0x02DE3F50 LDR X9, [X8]
	0x02DE3F54 LDR X1, [X8 + 0xB8]
	0x02DE3F58 LDR W8, [X9 + 0x28]
	0x02DE3F5C LDR X0, [X1]
	0x02DE3F60 TBNZ X8, 0x1F, 0x2DE3F68
	0x02DE3F64 LDR X24, [X24]
	0x02DE3F68 LDUR W8, [X29 - 0x28]
	0x02DE3F6C SUB X3, X29, 0x20
	0x02DE3F70 MOV X2, X19
	0x02DE3F74 MOV X4, X24
	0x02DE3F78 STUR W8, [X29 - 0xC]
	0x02DE3F7C SUB X8, X29, 0xC
	0x02DE3F80 STP X8, X24, [X29 - 0x20]
	0x02DE3F84 LDR X8, [X1 + 0x10]
	0x02DE3F88 BLR X8
	0x02DE3F8C LDR X19, [X22 + 0x18]
	0x02DE3F90 MOV X0, X23
	0x02DE3F94 MOV X1, X28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X0
	006 Move X0, [X0+16]
	007 Compare X0, 0
	008 JumpIfEqual {39}
	009 Move X8, [X2+32]
	010 Move X19, X2
	011 Move X8, [X8+192]
	012 Move X2, [X8+232]
	013 Call List`1<Object>.Sort, X0, X1
	014 Move X0, [X20+16]
	015 Compare X0, 0
	016 JumpIfEqual {39}
	017 Move W21, W31
	018 Move W8, [X0+24]
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X8, [X19+32]
	021 Move W1, W21
	022 Move X8, [X8+192]
	023 Move X2, [X8+160]
	024 Call List`1<Object>.get_Item, X0, X1
	025 Move X8, [X20+24]
	026 Compare X8, 0
	027 JumpIfEqual {39}
	028 Move X9, [X19+32]
	029 Move X1, X0
	030 Move X0, X8
	031 Move W2, W21
	032 Move X9, [X9+192]
	033 Move X3, [X9+192]
	034 Call Dictionary`2<Object, Int32>.set_Item, X0, X1, X2
	035 Move X0, [X20+16]
	036 Add W21, W21, 1
	037 Compare X0, 0
	038 JumpIfNotEqual {18}
	039 Call 0x1C17F20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 

Method: System.Void .ctor()

Disassembly:
	0x02DE3F98 MOV X2, X21
	0x02DE3F9C BL 0x3EB1AC0
	0x02DE3FA0 CBZ X19, 0x2DE407C
	0x02DE3FA4 LDR X8, [X20 + 0x20]
	0x02DE3FA8 LDR X8, [X8 + 0xC0]
	0x02DE3FAC LDR X9, [X8]
	0x02DE3FB0 LDR X1, [X8 + 0xC0]
	0x02DE3FB4 LDR W8, [X9 + 0x28]
	0x02DE3FB8 LDR X0, [X1]
	0x02DE3FBC TBNZ X8, 0x1F, 0x2DE3FC4
	0x02DE3FC0 LDR X23, [X23]
	0x02DE3FC4 LDUR W8, [X29 - 0x24]
	0x02DE3FC8 SUB X3, X29, 0x20
	0x02DE3FCC SUB X4, X29, 0xC
	0x02DE3FD0 MOV X2, X19
	0x02DE3FD4 STUR W8, [X29 - 0xC]
	0x02DE3FD8 SUB X8, X29, 0xC
	0x02DE3FDC STP X23, X8, [X29 - 0x20]
	0x02DE3FE0 LDR X8, [X1 + 0x10]
	0x02DE3FE4 BLR X8
	0x02DE3FE8 LDR X19, [X22 + 0x18]
	0x02DE3FEC LDUR X22, [X29 - 0x50]
	0x02DE3FF0 MOV X1, X27
	0x02DE3FF4 MOV X2, X21
	0x02DE3FF8 MOV X0, X22
	0x02DE3FFC BL 0x3EB1AC0
	0x02DE4000 CBZ X19, 0x2DE407C
	0x02DE4004 LDR X8, [X20 + 0x20]
	0x02DE4008 LDR X8, [X8 + 0xC0]
	0x02DE400C LDR X9, [X8]
	0x02DE4010 LDR X1, [X8 + 0xC0]
	0x02DE4014 LDR W8, [X9 + 0x28]
	0x02DE4018 LDR X0, [X1]
	0x02DE401C TBNZ X8, 0x1F, 0x2DE4024
	0x02DE4020 LDR X22, [X22]
	0x02DE4024 LDUR W8, [X29 - 0x28]
	0x02DE4028 SUB X3, X29, 0x20
	0x02DE402C SUB X4, X29, 0xC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X1+32]
	006 Move X20, X1
	007 Move X19, X0
	008 Move X8, [X8+192]
	009 Move X8, [X8+24]
	010 Move W9, [X8+309]
	011 Move TEMP, X9
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {18}
	015 Move X0, X8
	016 Call 0x1C5D684
	017 Move X8, X0
	018 Move X0, X8
	019 Call 0x1C17F10
	020 Move X8, [X20+32]
	021 Move X21, X0
	022 Move X8, [X8+192]
	023 Move X1, [X8+240]
	024 Call List`1<Object>..ctor, X0
	025 Move [X19+16], X21
	026 Move X8, [X20+32]
	027 Move X8, [X8+192]
	028 Move X0, [X8+40]
	029 Move W8, [X0+309]
	030 Move TEMP, X8
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {35}
	034 Call 0x1C5D684
	035 Call 0x1C17F10
	036 Move X8, [X20+32]
	037 Move X20, X0
	038 Move X8, [X8+192]
	039 Move X1, [X8+248]
	040 Call Dictionary`2<Object, Int32>..ctor, X0
	041 Move [X19+24], X20
	042 Move X0, X19
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X1, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Call Object..ctor, X0
	049 Return 

