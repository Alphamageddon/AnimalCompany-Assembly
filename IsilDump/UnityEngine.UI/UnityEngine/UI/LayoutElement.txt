Type: UnityEngine.UI.LayoutElement

Method: System.Boolean get_ignoreLayout()

Disassembly:
	0x03E34264 MOVZ W8, 0x1
	0x03E34268 STRB W8, [X21 + 0x74B]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_ignoreLayout(System.Boolean value)

Disassembly:
	0x03E3426C CMP W20, 0x1
	0x03E34270 B.NE 0x3E34498
	0x03E34274 ADRP X23, 0x337000
	0x03E34278 LDR X23, [X23 + 0xE8]
	0x03E3427C LDR X20, [X19 + 0x10]
	0x03E34280 LDR X0, [X23]
	0x03E34284 LDR W8, [X0 + 0xE0]
	0x03E34288 CBNZ W8, 0x3E34294
	0x03E3428C BL 0x1C16DFC
	0x03E34290 LDR X0, [X23]
	0x03E34294 LDR X8, [X0 + 0xB8]
	0x03E34298 LDR X21, [X8 + 0x10]
	0x03E3429C CBNZ X21, 0x3E342F0
	0x03E342A0 LDR W8, [X0 + 0xE0]
	0x03E342A4 CBNZ W8, 0x3E342B0
	0x03E342A8 BL 0x1C16DFC
	0x03E342AC LDR X0, [X23]
	0x03E342B0 ADRP X9, 0x337000
	0x03E342B4 LDR X8, [X0 + 0xB8]
	0x03E342B8 LDR X9, [X9 + 0x170]
	0x03E342BC LDR X22, [X8]
	0x03E342C0 LDR X0, [X9]
	0x03E342C4 BL 0x1C16F10
	0x03E342C8 ADRP X8, 0x337000
	0x03E342CC LDR X8, [X8 + 0x150]
	0x03E342D0 MOV X1, X22
	0x03E342D4 MOV X3, X31
	0x03E342D8 MOV X21, X0
	0x03E342DC LDR X2, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B5000
	007 Move X21, 0x32F000
	008 Move W8, [X22+1839]
	009 Move X21, [X21+1424]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x32F000
	017 Move X0, [X0+1424]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1839], W8
	021 Move X2, [X21]
	022 Add X0, X19, 32
	023 And W1, W20, 1
	024 Call 0x22551E0, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {35}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X22, [X31+16]
	038 Move X21, [X31+24]
	039 Move X30, [X31+48]
	040 Return 

Method: System.Void CalculateLayoutInputHorizontal()

Disassembly:
	0x03E34398 LDR X0, [X23]

ISIL:
	001 Return 

Method: System.Void CalculateLayoutInputVertical()

Disassembly:
	0x03E3439C LDR X8, [X0 + 0xB8]

ISIL:
	001 Return 

Method: System.Single get_minWidth()

Disassembly:
	0x03E343A0 LDR X21, [X8 + 0x20]
	0x03E343A4 CBNZ X21, 0x3E343F8

ISIL:
	001 Move V0, [X0+36]
	002 Return V0

Method: System.Void set_minWidth(System.Single value)

Disassembly:
	0x03E343A8 LDR W8, [X0 + 0xE0]
	0x03E343AC CBNZ W8, 0x3E343B8
	0x03E343B0 BL 0x1C16DFC
	0x03E343B4 LDR X0, [X23]
	0x03E343B8 ADRP X9, 0x337000
	0x03E343BC LDR X8, [X0 + 0xB8]
	0x03E343C0 LDR X9, [X9 + 0x170]
	0x03E343C4 LDR X22, [X8]
	0x03E343C8 LDR X0, [X9]
	0x03E343CC BL 0x1C16F10
	0x03E343D0 ADRP X8, 0x337000
	0x03E343D4 LDR X8, [X8 + 0x160]
	0x03E343D8 MOV X1, X22
	0x03E343DC MOV X3, X31
	0x03E343E0 MOV X21, X0
	0x03E343E4 LDR X2, [X8]
	0x03E343E8 BL 0x2725C6C
	0x03E343EC LDR X8, [X23]
	0x03E343F0 LDR X8, [X8 + 0xB8]
	0x03E343F4 STR X21, [X8 + 0x20]
	0x03E343F8 MOV X0, X19
	0x03E343FC MOV X1, X20
	0x03E34400 MOV X2, X21
	0x03E34404 BL 0x3E344A8
	0x03E34408 LDR X0, [X23]
	0x03E3440C LDR X20, [X19 + 0x10]
	0x03E34410 LDR W8, [X0 + 0xE0]
	0x03E34414 CBNZ W8, 0x3E34420
	0x03E34418 BL 0x1C16DFC

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5B5000
	007 Move X20, 0x32F000
	008 Move W8, [X21+1840]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x32F000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1840], W8
	021 Move X1, [X20]
	022 Add X0, X19, 36
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Call LayoutElement.SetDirty, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Return 

Method: System.Single get_minHeight()

Disassembly:
	0x03E3441C LDR X0, [X23]
	0x03E34420 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move V0, [X0+40]
	002 Return V0

Method: System.Void set_minHeight(System.Single value)

Disassembly:
	0x03E34424 LDR X21, [X8 + 0x28]
	0x03E34428 CBNZ X21, 0x3E3447C
	0x03E3442C LDR W8, [X0 + 0xE0]
	0x03E34430 CBNZ W8, 0x3E3443C
	0x03E34434 BL 0x1C16DFC
	0x03E34438 LDR X0, [X23]
	0x03E3443C ADRP X9, 0x337000
	0x03E34440 LDR X8, [X0 + 0xB8]
	0x03E34444 LDR X9, [X9 + 0x170]
	0x03E34448 LDR X22, [X8]
	0x03E3444C LDR X0, [X9]
	0x03E34450 BL 0x1C16F10
	0x03E34454 ADRP X8, 0x337000
	0x03E34458 LDR X8, [X8 + 0x168]
	0x03E3445C MOV X1, X22
	0x03E34460 MOV X3, X31
	0x03E34464 MOV X21, X0
	0x03E34468 LDR X2, [X8]
	0x03E3446C BL 0x2725C6C
	0x03E34470 LDR X8, [X23]
	0x03E34474 LDR X8, [X8 + 0xB8]
	0x03E34478 STR X21, [X8 + 0x28]
	0x03E3447C MOV X0, X19
	0x03E34480 MOV X1, X20
	0x03E34484 MOV X2, X21
	0x03E34488 LDP X20, X19, [X31 + 0x20]
	0x03E3448C LDP X22, X21, [X31 + 0x10]
	0x03E34490 LDP X30, X23, [X31], #0x30
	0x03E34494 B 0x3E34778

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5B5000
	007 Move X20, 0x32F000
	008 Move W8, [X21+1841]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x32F000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1841], W8
	021 Move X1, [X20]
	022 Add X0, X19, 40
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Call LayoutElement.SetDirty, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Return 

Method: System.Single get_preferredWidth()

Disassembly:
	0x03E34498 LDP X20, X19, [X31 + 0x20]
	0x03E3449C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move V0, [X0+44]
	002 Return V0

Method: System.Void set_preferredWidth(System.Single value)

Disassembly:
	0x03E344A0 LDP X30, X23, [X31], #0x30
	0x03E344A4 RET
	0x03E344A8 SUB X31, X31, 0x50
	0x03E344AC STP X30, X25, [X31 + 0x10]
	0x03E344B0 STP X24, X23, [X31 + 0x20]
	0x03E344B4 STP X22, X21, [X31 + 0x30]
	0x03E344B8 STP X20, X19, [X31 + 0x40]
	0x03E344BC ADRP X23, 0x5B4000
	0x03E344C0 ADRP X22, 0x2BF000
	0x03E344C4 LDRB W8, [X23 + 0x74D]
	0x03E344C8 LDR X22, [X22 + 0x598]
	0x03E344CC MOV X19, X2
	0x03E344D0 MOV X20, X1
	0x03E344D4 MOV X21, X0
	0x03E344D8 TBNZ X8, 0x0, 0x3E34568
	0x03E344DC ADRP X0, 0x2E7000
	0x03E344E0 LDR X0, [X0 + 0xA18]
	0x03E344E4 BL 0x1C16CF4
	0x03E344E8 ADRP X0, 0x2E7000
	0x03E344EC LDR X0, [X0 + 0xA20]
	0x03E344F0 BL 0x1C16CF4
	0x03E344F4 ADRP X0, 0x2E7000
	0x03E344F8 LDR X0, [X0 + 0xA28]
	0x03E344FC BL 0x1C16CF4
	0x03E34500 ADRP X0, 0x337000
	0x03E34504 LDR X0, [X0 + 0x178]
	0x03E34508 BL 0x1C16CF4
	0x03E3450C ADRP X0, 0x337000
	0x03E34510 LDR X0, [X0 + 0x38]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5B5000
	007 Move X20, 0x32F000
	008 Move W8, [X21+1842]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x32F000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1842], W8
	021 Move X1, [X20]
	022 Add X0, X19, 44
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Call LayoutElement.SetDirty, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Return 

Method: System.Single get_preferredHeight()

Disassembly:
	0x03E34514 BL 0x1C16CF4
	0x03E34518 ADRP X0, 0x2C2000

ISIL:
	001 Move V0, [X0+48]
	002 Return V0

Method: System.Void set_preferredHeight(System.Single value)

Disassembly:
	0x03E3451C LDR X0, [X0 + 0x920]
	0x03E34520 BL 0x1C16CF4
	0x03E34524 ADRP X0, 0x2E7000
	0x03E34528 LDR X0, [X0 + 0xA40]
	0x03E3452C BL 0x1C16CF4
	0x03E34530 ADRP X0, 0x2E7000
	0x03E34534 LDR X0, [X0 + 0xA48]
	0x03E34538 BL 0x1C16CF4
	0x03E3453C ADRP X0, 0x2BF000
	0x03E34540 LDR X0, [X0 + 0x598]
	0x03E34544 BL 0x1C16CF4
	0x03E34548 ADRP X0, 0x2E6000
	0x03E3454C LDR X0, [X0 + 0xC70]
	0x03E34550 BL 0x1C16CF4
	0x03E34554 ADRP X0, 0x2BF000
	0x03E34558 LDR X0, [X0 + 0x6C0]
	0x03E3455C BL 0x1C16CF4
	0x03E34560 MOVZ W8, 0x1
	0x03E34564 STRB W8, [X23 + 0x74D]
	0x03E34568 LDR X0, [X22]
	0x03E3456C STR X31, [X31 + 0x8]
	0x03E34570 LDR W8, [X0 + 0xE0]
	0x03E34574 CBNZ W8, 0x3E3457C
	0x03E34578 BL 0x1C16DFC
	0x03E3457C MOV X0, X20
	0x03E34580 MOV X1, X31
	0x03E34584 MOV X2, X31
	0x03E34588 BL 0x3C3883C
	0x03E3458C TBNZ X0, 0x0, 0x3E3475C

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5B5000
	007 Move X20, 0x32F000
	008 Move W8, [X21+1843]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x32F000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1843], W8
	021 Move X1, [X20]
	022 Add X0, X19, 48
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Call LayoutElement.SetDirty, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Return 

Method: System.Single get_flexibleWidth()

Disassembly:
	0x03E34590 ADRP X24, 0x2E7000
	0x03E34594 LDR X24, [X24 + 0xA28]

ISIL:
	001 Move V0, [X0+52]
	002 Return V0

Method: System.Void set_flexibleWidth(System.Single value)

Disassembly:
	0x03E34598 ADRP X23, 0x2E7000
	0x03E3459C ADRP X22, 0x337000
	0x03E345A0 ADRP X25, 0x2BF000
	0x03E345A4 LDR X0, [X24]
	0x03E345A8 LDR W8, [X0 + 0xE0]
	0x03E345AC LDR X23, [X23 + 0xA18]
	0x03E345B0 LDR X22, [X22 + 0x178]
	0x03E345B4 LDR X25, [X25 + 0x6C0]
	0x03E345B8 CBNZ W8, 0x3E345C0
	0x03E345BC BL 0x1C16DFC
	0x03E345C0 LDR X0, [X23]
	0x03E345C4 BL 0x28F98D4
	0x03E345C8 LDR X8, [X25]
	0x03E345CC LDR X23, [X22]
	0x03E345D0 MOV X22, X0
	0x03E345D4 LDR W9, [X8 + 0xE0]
	0x03E345D8 CBNZ W9, 0x3E345E4
	0x03E345DC MOV X0, X8
	0x03E345E0 BL 0x1C16DFC
	0x03E345E4 MOV X0, X23
	0x03E345E8 MOV X1, X31
	0x03E345EC BL 0x338C698
	0x03E345F0 CBZ X20, 0x3E34774
	0x03E345F4 MOV X1, X0
	0x03E345F8 MOV X0, X20
	0x03E345FC MOV X2, X22
	0x03E34600 MOV X3, X31
	0x03E34604 BL 0x3C33320
	0x03E34608 ADRP X8, 0x2C2000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5B5000
	007 Move X20, 0x32F000
	008 Move W8, [X21+1844]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x32F000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1844], W8
	021 Move X1, [X20]
	022 Add X0, X19, 52
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Call LayoutElement.SetDirty, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Return 

Method: System.Single get_flexibleHeight()

Disassembly:
	0x03E3460C LDR X8, [X8 + 0x920]
	0x03E34610 LDR X0, [X8]

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_flexibleHeight(System.Single value)

Disassembly:
	0x03E34614 LDR W8, [X0 + 0xE0]
	0x03E34618 CBNZ W8, 0x3E34620
	0x03E3461C BL 0x1C16DFC
	0x03E34620 MOV X0, X22
	0x03E34624 BL 0x3E34028
	0x03E34628 CBZ X22, 0x3E34774
	0x03E3462C LDR W8, [X22 + 0x18]
	0x03E34630 CMP W8, 0x0
	0x03E34634 B.GT 0x3E34678
	0x03E34638 ADRP X8, 0x337000
	0x03E3463C LDR X0, [X25]
	0x03E34640 LDR X8, [X8 + 0x38]
	0x03E34644 LDR W9, [X0 + 0xE0]
	0x03E34648 LDR X23, [X8]
	0x03E3464C CBNZ W9, 0x3E34654
	0x03E34650 BL 0x1C16DFC
	0x03E34654 MOV X0, X23
	0x03E34658 MOV X1, X31
	0x03E3465C BL 0x338C698
	0x03E34660 MOV X1, X0
	0x03E34664 ADD X2, X31, 0x8
	0x03E34668 MOV X0, X20
	0x03E3466C MOV X3, X31
	0x03E34670 BL 0x3C33018
	0x03E34674 TBZ X0, 0x0, 0x3E34738
	0x03E34678 MOV X0, X20
	0x03E3467C MOV X1, X31
	0x03E34680 BL 0x3C40C8C
	0x03E34684 CMP W0, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x5B5000
	007 Move X20, 0x32F000
	008 Move W8, [X21+1845]
	009 Move X20, [X20+1440]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x32F000
	017 Move X0, [X0+1440]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1845], W8
	021 Move X1, [X20]
	022 Add X0, X19, 56
	023 Move V0, V8
	024 Call SetPropertyUtility.SetStruct, X0, V0
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X30, [X31+16]
	033 Move X21, [X31+24]
	034 Move V8, [X31+48]
	035 Call LayoutElement.SetDirty, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X30, [X31+16]
	040 Move X21, [X31+24]
	041 Move V8, [X31+48]
	042 Return 

Method: System.Int32 get_layoutPriority()

Disassembly:
	0x03E34688 B.LT 0x3E346E8
	0x03E3468C ADRP X25, 0x2E6000

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.Void set_layoutPriority(System.Int32 value)

Disassembly:
	0x03E34690 LDR X25, [X25 + 0xC70]
	0x03E34694 MOV W23, W31
	0x03E34698 MOV X0, X20
	0x03E3469C MOV W1, W23
	0x03E346A0 MOV X2, X31
	0x03E346A4 BL 0x3C410A0
	0x03E346A8 CBZ X0, 0x3E346C0
	0x03E346AC LDR X8, [X25]
	0x03E346B0 LDR X9, [X0]
	0x03E346B4 CMP X9, X8
	0x03E346B8 CSEL X1, X0, X31, EQ
	0x03E346BC B 0x3E346C4
	0x03E346C0 MOV X1, X31
	0x03E346C4 MOV X0, X21
	0x03E346C8 MOV X2, X19
	0x03E346CC BL 0x3E344A8
	0x03E346D0 MOV X0, X20
	0x03E346D4 MOV X1, X31
	0x03E346D8 ADD W23, W23, 0x1
	0x03E346DC BL 0x3C40C8C
	0x03E346E0 CMP W23, W0
	0x03E346E4 B.LT 0x3E34698
	0x03E346E8 LDR W8, [X22 + 0x18]
	0x03E346EC CMP W8, 0x1
	0x03E346F0 B.LT 0x3E34738
	0x03E346F4 ADRP X21, 0x2E7000
	0x03E346F8 LDR X21, [X21 + 0xA48]
	0x03E346FC MOV W20, W31
	0x03E34700 LDR X2, [X21]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x5B5000
	007 Move X21, 0x32F000
	008 Move W8, [X22+1846]
	009 Move X21, [X21+1448]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x32F000
	017 Move X0, [X0+1448]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+1846], W8
	021 Move X2, [X21]
	022 Add X0, X19, 60
	023 Move W1, W20
	024 Call SetPropertyUtility.SetStruct, X0, X1
	025 Move TEMP, X0
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfNotEqual {37}
	029 Move X0, X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Call LayoutElement.SetDirty, X0
	036 Return 
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Void .ctor()

Disassembly:
	0x03E34704 MOV X0, X22
	0x03E34708 MOV W1, W20
	0x03E3470C BL 0x301BCCC
	0x03E34710 CBZ X19, 0x3E34774
	0x03E34714 MOV X1, X0
	0x03E34718 LDR X8, [X19 + 0x18]
	0x03E3471C LDR X0, [X19 + 0x40]
	0x03E34720 LDR X2, [X19 + 0x28]

ISIL:
	001 Move V0, 0
	002 Move V1, 0
	003 Move W8, 1
	004 Move X1, X31
	005 Move [X0+36], V0
	006 Move [X0+52], D1
	007 Move [X0+60], W8
	008 Call UIBehaviour..ctor, X0
	009 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03E34724 BLR X8
	0x03E34728 LDR W8, [X22 + 0x18]
	0x03E3472C ADD W20, W20, 0x1
	0x03E34730 CMP W20, W8
	0x03E34734 B.LT 0x3E34700
	0x03E34738 LDR X0, [X24]
	0x03E3473C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call UIBehaviour.OnEnable, X0
	006 Move X0, X19
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Call LayoutElement.SetDirty, X0
	010 Return 

Method: System.Void OnTransformParentChanged()

Disassembly:
	0x03E34740 CBNZ W8, 0x3E34748

ISIL:
	001 Call LayoutElement.SetDirty, X0
	002 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03E34744 BL 0x1C16DFC
	0x03E34748 ADRP X8, 0x2E7000
	0x03E3474C LDR X8, [X8 + 0xA20]
	0x03E34750 MOV X0, X22
	0x03E34754 LDR X1, [X8]
	0x03E34758 BL 0x28F9A14
	0x03E3475C LDP X20, X19, [X31 + 0x40]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call LayoutElement.SetDirty, X0
	005 Move X0, X19
	006 Move X1, X31
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Call UIBehaviour.OnDisable, X0
	010 Return 

Method: System.Void OnDidApplyAnimationProperties()

Disassembly:
	0x03E34760 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Call LayoutElement.SetDirty, X0
	002 Return 

Method: System.Void OnBeforeTransformParentChanged()

Disassembly:
	0x03E34764 LDP X24, X23, [X31 + 0x20]

ISIL:
	001 Call LayoutElement.SetDirty, X0
	002 Return 

Method: System.Void SetDirty()

Disassembly:
	0x03E342E0 BL 0x2725C6C
	0x03E342E4 LDR X8, [X23]
	0x03E342E8 LDR X8, [X8 + 0xB8]
	0x03E342EC STR X21, [X8 + 0x10]
	0x03E342F0 MOV X0, X19
	0x03E342F4 MOV X1, X20
	0x03E342F8 MOV X2, X21
	0x03E342FC BL 0x3E344A8
	0x03E34300 LDR X0, [X23]
	0x03E34304 LDR X20, [X19 + 0x10]
	0x03E34308 LDR W8, [X0 + 0xE0]
	0x03E3430C CBNZ W8, 0x3E34318
	0x03E34310 BL 0x1C16DFC
	0x03E34314 LDR X0, [X23]
	0x03E34318 LDR X8, [X0 + 0xB8]
	0x03E3431C LDR X21, [X8 + 0x18]
	0x03E34320 CBNZ X21, 0x3E34374
	0x03E34324 LDR W8, [X0 + 0xE0]
	0x03E34328 CBNZ W8, 0x3E34334
	0x03E3432C BL 0x1C16DFC
	0x03E34330 LDR X0, [X23]
	0x03E34334 ADRP X9, 0x337000
	0x03E34338 LDR X8, [X0 + 0xB8]
	0x03E3433C LDR X9, [X9 + 0x170]
	0x03E34340 LDR X22, [X8]
	0x03E34344 LDR X0, [X9]
	0x03E34348 BL 0x1C16F10
	0x03E3434C ADRP X8, 0x337000
	0x03E34350 LDR X8, [X8 + 0x158]
	0x03E34354 MOV X1, X22
	0x03E34358 MOV X3, X31
	0x03E3435C MOV X21, X0
	0x03E34360 LDR X2, [X8]
	0x03E34364 BL 0x2725C6C
	0x03E34368 LDR X8, [X23]
	0x03E3436C LDR X8, [X8 + 0xB8]
	0x03E34370 STR X21, [X8 + 0x18]
	0x03E34374 MOV X0, X19
	0x03E34378 MOV X1, X20
	0x03E3437C MOV X2, X21
	0x03E34380 BL 0x3E34778
	0x03E34384 LDR X0, [X23]
	0x03E34388 LDR X20, [X19 + 0x10]
	0x03E3438C LDR W8, [X0 + 0xE0]
	0x03E34390 CBNZ W8, 0x3E3439C
	0x03E34394 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x5B5000
	005 Move W8, [X20+1847]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2C3000
	012 Move X0, [X0+2336]
	013 Call 0x1C17CF4
	014 Move X0, 0x2E7000
	015 Move X0, [X0+3184]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1847], W8
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X9, [X8+456]
	022 Move X1, [X8+464]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move TEMP, X0
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfNotEqual {46}
	028 Move X20, 0x2C3000
	029 Move X20, [X20+2336]
	030 Move X0, X19
	031 Move X1, X31
	032 Call Component.get_transform, X0
	033 Move X8, [X20]
	034 Move X19, X0
	035 Move W9, [X8+224]
	036 Compare W9, 0
	037 JumpIfEqual {50}
	038 Compare X19, 0
	039 JumpIfEqual {54}
	040 Move X8, 0x2E7000
	041 Move X8, [X8+3184]
	042 Move X9, [X19]
	043 Move X8, [X8]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 NotImplemented "Instruction CSEL not yet implemented."
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return 
	050 Move X0, X8
	051 Call 0x1C17DFC
	052 Compare X19, 0
	053 JumpIfNotEqual {40}
	054 Move X0, X31
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Call LayoutRebuilder.MarkLayoutForRebuild, X0
	059 Return 

