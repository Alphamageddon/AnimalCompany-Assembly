Type: UnityEngine.UI.GraphicRaycaster

Method: System.Int32 get_sortOrderPriority()

Disassembly:
	0x03CDF1C8 LDRSW X9, [X10]
	0x03CDF1CC ADD X8, X8, X9, 0x4, LSL
	0x03CDF1D0 ADD X0, X8, 0x138
	0x03CDF1D4 LDP X8, X1, [X0]
	0x03CDF1D8 ADRP X26, 0x483000
	0x03CDF1DC ADRP X27, 0x483000
	0x03CDF1E0 LDR X26, [X26 + 0x4F0]
	0x03CDF1E4 LDR X27, [X27 + 0x518]
	0x03CDF1E8 MOV X0, X20
	0x03CDF1EC BLR X8
	0x03CDF1F0 CMP W0, 0x1
	0x03CDF1F4 B.LT 0x3CDF40C
	0x03CDF1F8 ADRP X28, 0x46A000
	0x03CDF1FC ADRP X29, 0x46A000
	0x03CDF200 LDR X28, [X28 + 0x598]
	0x03CDF204 LDR X29, [X29 + 0x6B8]
	0x03CDF208 MOV W22, W0
	0x03CDF20C MOV W23, W31

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call GraphicRaycaster.get_canvas, X0
	005 Compare X0, 0
	006 JumpIfEqual {26}
	007 Move X1, X31
	008 Call Canvas.get_renderMode, X0
	009 Compare W0, 0
	010 JumpIfEqual {17}
	011 Move X0, X19
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call BaseRaycaster.get_sortOrderPriority, X0
	016 Return X0
	017 Move X0, X19
	018 Call GraphicRaycaster.get_canvas, X0
	019 Compare X0, 0
	020 JumpIfEqual {26}
	021 Move X1, X31
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 Call Canvas.get_sortingOrder, X0
	025 Return X0
	026 Call 0x1C17F20

Method: System.Int32 get_renderOrderPriority()

Disassembly:
	0x03CDF2A4 BL 0x3CDBD10
	0x03CDF2A8 ADDS W31, W0, 0x1
	0x03CDF2AC B.EQ 0x3CDF400
	0x03CDF2B0 MOV X0, X24
	0x03CDF2B4 BL 0x3CDB488
	0x03CDF2B8 LDR X8, [X29]
	0x03CDF2BC LDP S13, S11, [X24 + 0x3C]
	0x03CDF2C0 LDP S12, S10, [X24 + 0x44]
	0x03CDF2C4 MOV X25, X0
	0x03CDF2C8 LDR W9, [X8 + 0xE0]
	0x03CDF2CC CBNZ W9, 0x3CDF2D8
	0x03CDF2D0 MOV X0, X8
	0x03CDF2D4 BL 0x1C16DFC
	0x03CDF2D8 MOV X0, X25
	0x03CDF2DC MOV V0.16B, V9.16B
	0x03CDF2E0 MOV V1.16B, V8.16B
	0x03CDF2E4 MOV X1, X21
	0x03CDF2E8 MOV V2.16B, V13.16B
	0x03CDF2EC MOV V3.16B, V11.16B
	0x03CDF2F0 MOV V4.16B, V12.16B
	0x03CDF2F4 MOV V5.16B, V10.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call GraphicRaycaster.get_canvas, X0
	005 Compare X0, 0
	006 JumpIfEqual {30}
	007 Move X1, X31
	008 Call Canvas.get_renderMode, X0
	009 Compare W0, 0
	010 JumpIfEqual {17}
	011 Move X0, X19
	012 Move X1, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call BaseRaycaster.get_renderOrderPriority, X0
	016 Return X0
	017 Move X0, X19
	018 Call GraphicRaycaster.get_canvas, X0
	019 Compare X0, 0
	020 JumpIfEqual {30}
	021 Move X1, X31
	022 Call Canvas.get_rootCanvas, X0
	023 Compare X0, 0
	024 JumpIfEqual {30}
	025 Move X1, X31
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Call Canvas.get_renderOrder, X0
	029 Return X0
	030 Call 0x1C17F20

Method: System.Boolean get_ignoreReversedGraphics()

Disassembly:
	0x03CDF2F8 MOV X2, X31
	0x03CDF2FC BL 0x3E23410

ISIL:
	001 Move W0, [X0+40]
	002 Return X0

Method: System.Void set_ignoreReversedGraphics(System.Boolean value)

Disassembly:
	0x03CDF300 TBZ X0, 0x0, 0x3CDF400
	0x03CDF304 ADRP X8, 0x414000
	0x03CDF308 LDR X8, [X8 + 0x598]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+40], W8
	003 Return 

Method: UnityEngine.UI.GraphicRaycaster/BlockingObjects get_blockingObjects()

Disassembly:
	0x03CDF30C LDR X0, [X8]
	0x03CDF310 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+44]
	002 Return X0

Method: System.Void set_blockingObjects(UnityEngine.UI.GraphicRaycaster/BlockingObjects value)

Disassembly:
	0x03CDF314 CBNZ W8, 0x3CDF31C
	0x03CDF318 BL 0x1C16DFC

ISIL:
	001 Move [X0+44], W1
	002 Return 

Method: UnityEngine.LayerMask get_blockingMask()

Disassembly:
	0x03CDF31C MOV X0, X21
	0x03CDF320 MOV X1, X31

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_blockingMask(UnityEngine.LayerMask value)

Disassembly:
	0x03CDF324 MOV X2, X31
	0x03CDF328 BL 0x3C354F8

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x03CDF32C TBZ X0, 0x0, 0x3CDF36C
	0x03CDF330 MOV X0, X24
	0x03CDF334 BL 0x3CDB488
	0x03CDF338 CBZ X0, 0x3CDF5F8
	0x03CDF33C MOV X1, X31
	0x03CDF340 BL 0x3C3F58C
	0x03CDF344 CBZ X21, 0x3CDF5F8
	0x03CDF348 MOV X0, X21
	0x03CDF34C MOV X1, X31
	0x03CDF350 BL 0x3C045DC
	0x03CDF354 MOV X0, X21
	0x03CDF358 MOV X1, X31
	0x03CDF35C MOV V10.16B, V2.16B
	0x03CDF360 BL 0x3C03618
	0x03CDF364 FCMP S10, S0
	0x03CDF368 B.GT 0x3CDF400
	0x03CDF36C LDR X8, [X24]
	0x03CDF370 MOV X0, X24
	0x03CDF374 MOV V0.16B, V9.16B
	0x03CDF378 MOV V1.16B, V8.16B
	0x03CDF37C LDR X9, [X8 + 0x418]
	0x03CDF380 LDR X2, [X8 + 0x420]
	0x03CDF384 MOV X1, X21
	0x03CDF388 BLR X9
	0x03CDF38C TBZ X0, 0x0, 0x3CDF400
	0x03CDF390 LDR X0, [X26]
	0x03CDF394 LDR W8, [X0 + 0xE0]
	0x03CDF398 CBNZ W8, 0x3CDF3A4
	0x03CDF39C BL 0x1C16DFC
	0x03CDF3A0 LDR X0, [X26]
	0x03CDF3A4 LDR X8, [X0 + 0xB8]
	0x03CDF3A8 LDR X0, [X8]
	0x03CDF3AC CBZ X0, 0x3CDF5F8
	0x03CDF3B0 LDR W10, [X0 + 0x1C]
	0x03CDF3B4 LDR X8, [X0 + 0x10]
	0x03CDF3B8 LDR X9, [X27]
	0x03CDF3BC ADD W10, W10, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x709000
	007 Move X21, 0x484000
	008 Move X20, 0x484000
	009 Move W8, [X22+1206]
	010 Move X21, [X21+1248]
	011 Move X20, [X20+1256]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x484000
	018 Move X0, [X0+1256]
	019 Call 0x1C17CF4
	020 Move X0, 0x484000
	021 Move X0, [X0+1248]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+1206], W8
	025 Move W8, 1
	026 Move TEMP, 0
	027 Not TEMP
	028 Move W0, TEMP
	029 Move X1, X31
	030 Move [X19+40], W8
	031 Call LayerMask.op_Implicit, X0
	032 Move [X19+48], W0
	033 Move X0, [X21]
	034 Call 0x1C17F10
	035 Move X1, [X20]
	036 Move X20, X0
	037 Call List`1<Object>..ctor, X0
	038 Move [X19+64], X20
	039 Move X0, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X1, X31
	045 Move X30, [X31+48]
	046 Call BaseRaycaster..ctor, X0
	047 Return 

Method: UnityEngine.Canvas get_canvas()

Disassembly:
	0x03CDF210 LDR X8, [X20]
	0x03CDF214 LDR X1, [X28]
	0x03CDF218 LDRH W9, [X8 + 0x12E]
	0x03CDF21C CBZ X9, 0x3CDF240
	0x03CDF220 LDR X10, [X8 + 0xB0]
	0x03CDF224 ADD X10, X10, 0x8
	0x03CDF228 LDUR X11, [X10 - 0x8]
	0x03CDF22C CMP X11, X1
	0x03CDF230 B.EQ 0x3CDF250
	0x03CDF234 SUBS X9, X9, 0x1
	0x03CDF238 ADD X10, X10, 0x10
	0x03CDF23C B.NE 0x3CDF228
	0x03CDF240 MOV X0, X20
	0x03CDF244 MOV W2, W31
	0x03CDF248 BL 0x1C5C788
	0x03CDF24C B 0x3CDF25C
	0x03CDF250 LDRSW X9, [X10]
	0x03CDF254 ADD X8, X8, X9, 0x4, LSL
	0x03CDF258 ADD X0, X8, 0x138
	0x03CDF25C LDP X8, X2, [X0]
	0x03CDF260 MOV X0, X20
	0x03CDF264 MOV W1, W23
	0x03CDF268 BLR X8
	0x03CDF26C CBZ X0, 0x3CDF5F8
	0x03CDF270 LDR X8, [X0]
	0x03CDF274 MOV X24, X0
	0x03CDF278 LDR X9, [X8 + 0x2B8]
	0x03CDF27C LDR X1, [X8 + 0x2C0]
	0x03CDF280 BLR X9
	0x03CDF284 TBZ X0, 0x0, 0x3CDF400
	0x03CDF288 MOV X0, X24
	0x03CDF28C BL 0x3CDBD2C
	0x03CDF290 CBZ X0, 0x3CDF5F8
	0x03CDF294 MOV X1, X31
	0x03CDF298 BL 0x3E22628
	0x03CDF29C TBNZ X0, 0x0, 0x3CDF400
	0x03CDF2A0 MOV X0, X24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x709000
	006 Move X20, 0x415000
	007 Move W8, [X21+1207]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x46B000
	015 Move X0, [X0+1376]
	016 Call 0x1C17CF4
	017 Move X0, 0x415000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+1207], W8
	022 Move X0, [X20]
	023 Move X20, [X19+56]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {37}
	036 Move X0, [X19+56]
	037 Move X8, 0x46B000
	038 Move X8, [X8+1376]
	039 Move X0, X19
	040 Move X1, [X8]
	041 Call 0x21A4894, X0
	042 Move [X19+56], X0
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X30, [X31+32]
	046 Move X21, [X31+40]
	047 Return X0

Method: System.Void Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)

Disassembly:
	0x03CDF3C0 STR W10, [X0 + 0x1C]
	0x03CDF3C4 CBZ X8, 0x3CDF5F8
	0x03CDF3C8 LDRSW X10, [X0 + 0x18]
	0x03CDF3CC LDR W11, [X8 + 0x18]
	0x03CDF3D0 CMP W10, W11
	0x03CDF3D4 B.CS 0x3CDF3EC
	0x03CDF3D8 ADD W9, W10, 0x1
	0x03CDF3DC ADD X8, X8, X10, 0x3, LSL
	0x03CDF3E0 STR W9, [X0 + 0x18]
	0x03CDF3E4 STR X24, [X8 + 0x20]
	0x03CDF3E8 B 0x3CDF400
	0x03CDF3EC LDR X8, [X9 + 0x20]
	0x03CDF3F0 MOV X1, X24
	0x03CDF3F4 LDR X8, [X8 + 0xC0]
	0x03CDF3F8 LDR X2, [X8 + 0x70]
	0x03CDF3FC BL 0x301BF90
	0x03CDF400 ADD W23, W23, 0x1
	0x03CDF404 CMP W23, W22
	0x03CDF408 B.NE 0x3CDF210
	0x03CDF40C LDR X8, [X26]
	0x03CDF410 ADRP X23, 0x483000
	0x03CDF414 LDR W9, [X8 + 0xE0]
	0x03CDF418 LDR X23, [X23 + 0x530]
	0x03CDF41C CBNZ W9, 0x3CDF42C
	0x03CDF420 MOV X0, X8
	0x03CDF424 BL 0x1C16DFC
	0x03CDF428 LDR X8, [X26]
	0x03CDF42C LDR X0, [X23]
	0x03CDF430 LDR X8, [X8 + 0xB8]
	0x03CDF434 LDR W9, [X0 + 0xE0]
	0x03CDF438 LDR X20, [X8]
	0x03CDF43C CBNZ W9, 0x3CDF448
	0x03CDF440 BL 0x1C16DFC
	0x03CDF444 LDR X0, [X23]
	0x03CDF448 LDR X8, [X0 + 0xB8]
	0x03CDF44C LDR X21, [X8 + 0x8]
	0x03CDF450 CBNZ X21, 0x3CDF4A4
	0x03CDF454 LDR W8, [X0 + 0xE0]
	0x03CDF458 CBNZ W8, 0x3CDF464
	0x03CDF45C BL 0x1C16DFC
	0x03CDF460 LDR X0, [X23]
	0x03CDF464 ADRP X9, 0x483000
	0x03CDF468 LDR X8, [X0 + 0xB8]
	0x03CDF46C LDR X9, [X9 + 0x510]
	0x03CDF470 LDR X22, [X8]
	0x03CDF474 LDR X0, [X9]
	0x03CDF478 BL 0x1C16F10
	0x03CDF47C ADRP X8, 0x483000
	0x03CDF480 LDR X8, [X8 + 0x528]
	0x03CDF484 MOV X1, X22
	0x03CDF488 MOV X3, X31
	0x03CDF48C MOV X21, X0
	0x03CDF490 LDR X2, [X8]
	0x03CDF494 BL 0x295A080
	0x03CDF498 LDR X8, [X23]
	0x03CDF49C LDR X8, [X8 + 0xB8]
	0x03CDF4A0 STR X21, [X8 + 0x8]
	0x03CDF4A4 CBZ X20, 0x3CDF5F8
	0x03CDF4A8 ADRP X8, 0x483000
	0x03CDF4AC LDR X8, [X8 + 0x520]
	0x03CDF4B0 MOV X0, X20
	0x03CDF4B4 MOV X1, X21
	0x03CDF4B8 LDR X2, [X8]
	0x03CDF4BC BL 0x301DD30
	0x03CDF4C0 LDR X0, [X26]
	0x03CDF4C4 LDR W8, [X0 + 0xE0]
	0x03CDF4C8 CBNZ W8, 0x3CDF4D4
	0x03CDF4CC BL 0x1C16DFC
	0x03CDF4D0 LDR X0, [X26]
	0x03CDF4D4 LDR X8, [X0 + 0xB8]
	0x03CDF4D8 LDR X8, [X8]
	0x03CDF4DC CBZ X8, 0x3CDF5F8
	0x03CDF4E0 LDR W8, [X8 + 0x18]
	0x03CDF4E4 ADRP X21, 0x483000
	0x03CDF4E8 LDR X21, [X21 + 0x508]
	0x03CDF4EC MOV W20, W31
	0x03CDF4F0 BIC W22, W8, W8, 0x1F
	0x03CDF4F4 LDR W8, [X0 + 0xE0]
	0x03CDF4F8 CBNZ W8, 0x3CDF504
	0x03CDF4FC BL 0x1C16DFC
	0x03CDF500 LDR X0, [X26]
	0x03CDF504 LDR X8, [X0 + 0xB8]
	0x03CDF508 LDR X0, [X8]
	0x03CDF50C CBZ X0, 0x3CDF5F8
	0x03CDF510 CMP W22, W20
	0x03CDF514 B.EQ 0x3CDF588
	0x03CDF518 LDR X2, [X21]
	0x03CDF51C MOV W1, W20
	0x03CDF520 BL 0x301BCCC
	0x03CDF524 CBZ X19, 0x3CDF5F8
	0x03CDF528 LDR W10, [X19 + 0x1C]
	0x03CDF52C LDR X8, [X19 + 0x10]
	0x03CDF530 LDR X9, [X27]
	0x03CDF534 ADD W10, W10, 0x1
	0x03CDF538 STR W10, [X19 + 0x1C]
	0x03CDF53C CBZ X8, 0x3CDF5F8
	0x03CDF540 LDRSW X10, [X19 + 0x18]
	0x03CDF544 LDR W11, [X8 + 0x18]
	0x03CDF548 MOV X1, X0
	0x03CDF54C CMP W10, W11
	0x03CDF550 B.CS 0x3CDF568
	0x03CDF554 ADD W9, W10, 0x1
	0x03CDF558 ADD X8, X8, X10, 0x3, LSL
	0x03CDF55C STR W9, [X19 + 0x18]
	0x03CDF560 STR X1, [X8 + 0x20]
	0x03CDF564 B 0x3CDF57C
	0x03CDF568 LDR X8, [X9 + 0x20]
	0x03CDF56C MOV X0, X19
	0x03CDF570 LDR X8, [X8 + 0xC0]
	0x03CDF574 LDR X2, [X8 + 0x70]
	0x03CDF578 BL 0x301BF90
	0x03CDF57C LDR X0, [X26]
	0x03CDF580 ADD W20, W20, 0x1
	0x03CDF584 B 0x3CDF4F4
	0x03CDF588 LDP W2, W8, [X0 + 0x18]
	0x03CDF58C ADD W8, W8, 0x1
	0x03CDF590 CMP W2, 0x1
	0x03CDF594 STP W31, W8, [X0 + 0x18]
	0x03CDF598 B.LT 0x3CDF5D0
	0x03CDF59C LDR X0, [X0 + 0x10]
	0x03CDF5A0 LDP X20, X19, [X31 + 0x80]
	0x03CDF5A4 LDP X22, X21, [X31 + 0x70]
	0x03CDF5A8 LDP X24, X23, [X31 + 0x60]
	0x03CDF5AC LDP X26, X25, [X31 + 0x50]
	0x03CDF5B0 LDP X28, X27, [X31 + 0x40]
	0x03CDF5B4 LDP X29, X30, [X31 + 0x30]
	0x03CDF5B8 LDP D9, D8, [X31 + 0x20]
	0x03CDF5BC LDP D11, D10, [X31 + 0x10]
	0x03CDF5C0 MOV W1, W31
	0x03CDF5C4 MOV X3, X31
	0x03CDF5C8 LDP D13, D12, [X31], #0x90
	0x03CDF5CC B 0x339FA34
	0x03CDF5D0 LDP X20, X19, [X31 + 0x80]
	0x03CDF5D4 LDP X22, X21, [X31 + 0x70]
	0x03CDF5D8 LDP X24, X23, [X31 + 0x60]
	0x03CDF5DC LDP X26, X25, [X31 + 0x50]
	0x03CDF5E0 LDP X28, X27, [X31 + 0x40]
	0x03CDF5E4 LDP X29, X30, [X31 + 0x30]
	0x03CDF5E8 LDP D9, D8, [X31 + 0x20]
	0x03CDF5EC LDP D11, D10, [X31 + 0x10]
	0x03CDF5F0 LDP D13, D12, [X31], #0x90
	0x03CDF5F4 RET
	0x03CDF5F8 BL 0x1C16F20
	0x03CDF5FC STR X30, [X31 - 0x20]!
	0x03CDF600 STP X20, X19, [X31 + 0x10]
	0x03CDF604 ADRP X20, 0x708000
	0x03CDF608 LDRB W8, [X20 + 0x4B9]
	0x03CDF60C MOV X19, X0
	0x03CDF610 TBNZ X8, 0x0, 0x3CDF628
	0x03CDF614 ADRP X0, 0x414000
	0x03CDF618 LDR X0, [X0 + 0x598]
	0x03CDF61C BL 0x1C16CF4
	0x03CDF620 MOVZ W8, 0x1
	0x03CDF624 STRB W8, [X20 + 0x4B9]
	0x03CDF628 MOV X0, X19
	0x03CDF62C BL 0x3CDE210
	0x03CDF630 CBZ X0, 0x3CDF6C0
	0x03CDF634 MOV X1, X31
	0x03CDF638 MOV X19, X0
	0x03CDF63C BL 0x3E244BC
	0x03CDF640 CBZ W0, 0x3CDF6B0
	0x03CDF644 CMP W0, 0x1
	0x03CDF648 B.NE 0x3CDF694
	0x03CDF64C MOV X0, X19
	0x03CDF650 MOV X1, X31
	0x03CDF654 BL 0x3E24E68
	0x03CDF658 ADRP X8, 0x414000
	0x03CDF65C LDR X8, [X8 + 0x598]
	0x03CDF660 MOV X20, X0
	0x03CDF664 LDR X8, [X8]
	0x03CDF668 LDR W9, [X8 + 0xE0]
	0x03CDF66C CBNZ W9, 0x3CDF678
	0x03CDF670 MOV X0, X8
	0x03CDF674 BL 0x1C16DFC
	0x03CDF678 MOV X0, X20
	0x03CDF67C MOV X1, X31
	0x03CDF680 MOV X2, X31
	0x03CDF684 BL 0x3C3883C
	0x03CDF688 MOV W8, W0
	0x03CDF68C MOV X0, X31
	0x03CDF690 TBNZ X8, 0x0, 0x3CDF6B4
	0x03CDF694 MOV X0, X19
	0x03CDF698 MOV X1, X31
	0x03CDF69C BL 0x3E24E68
	0x03CDF6A0 CBNZ X0, 0x3CDF6B4
	0x03CDF6A4 LDP X20, X19, [X31 + 0x10]
	0x03CDF6A8 LDR X30, [X31], #0x20
	0x03CDF6AC B 0x3C047F8
	0x03CDF6B0 MOV X0, X31
	0x03CDF6B4 LDP X20, X19, [X31 + 0x10]
	0x03CDF6B8 LDR X30, [X31], #0x20
	0x03CDF6BC RET
	0x03CDF6C0 BL 0x1C16F20
	0x03CDF6C4 STR X30, [X31 - 0x30]!
	0x03CDF6C8 STP X22, X21, [X31 + 0x10]
	0x03CDF6CC STP X20, X19, [X31 + 0x20]
	0x03CDF6D0 ADRP X21, 0x708000
	0x03CDF6D4 ADRP X22, 0x483000
	0x03CDF6D8 ADRP X19, 0x483000
	0x03CDF6DC ADRP X20, 0x483000
	0x03CDF6E0 LDRB W8, [X21 + 0x4BB]
	0x03CDF6E4 LDR X22, [X22 + 0x4E0]
	0x03CDF6E8 LDR X19, [X19 + 0x4E8]
	0x03CDF6EC LDR X20, [X20 + 0x4F0]
	0x03CDF6F0 TBNZ X8, 0x0, 0x3CDF720
	0x03CDF6F4 ADRP X0, 0x483000
	0x03CDF6F8 LDR X0, [X0 + 0x4F0]
	0x03CDF6FC BL 0x1C16CF4
	0x03CDF700 ADRP X0, 0x483000
	0x03CDF704 LDR X0, [X0 + 0x4E8]
	0x03CDF708 BL 0x1C16CF4
	0x03CDF70C ADRP X0, 0x483000
	0x03CDF710 LDR X0, [X0 + 0x4E0]
	0x03CDF714 BL 0x1C16CF4
	0x03CDF718 MOVZ W8, 0x1
	0x03CDF71C STRB W8, [X21 + 0x4BB]
	0x03CDF720 LDR X0, [X22]
	0x03CDF724 BL 0x1C16F10
	0x03CDF728 LDR X1, [X19]
	0x03CDF72C MOV X19, X0
	0x03CDF730 BL 0x301B7C4
	0x03CDF734 LDR X8, [X20]
	0x03CDF738 LDP X22, X21, [X31 + 0x10]
	0x03CDF73C LDR X8, [X8 + 0xB8]
	0x03CDF740 STR X19, [X8]
	0x03CDF744 LDP X20, X19, [X31 + 0x20]
	0x03CDF748 LDR X30, [X31], #0x30
	0x03CDF74C RET
	0x03CDF750 STR X30, [X31 - 0x20]!
	0x03CDF754 STP X20, X19, [X31 + 0x10]
	0x03CDF758 ADRP X19, 0x708000
	0x03CDF75C ADRP X20, 0x483000
	0x03CDF760 LDRB W8, [X19 + 0x4BC]
	0x03CDF764 LDR X20, [X20 + 0x530]
	0x03CDF768 TBNZ X8, 0x0, 0x3CDF780
	0x03CDF76C ADRP X0, 0x483000
	0x03CDF770 LDR X0, [X0 + 0x530]
	0x03CDF774 BL 0x1C16CF4
	0x03CDF778 MOVZ W8, 0x1
	0x03CDF77C STRB W8, [X19 + 0x4BC]
	0x03CDF780 LDR X0, [X20]
	0x03CDF784 BL 0x1C16F10
	0x03CDF788 MOV X1, X31
	0x03CDF78C MOV X19, X0
	0x03CDF790 BL 0x33BDD8C
	0x03CDF794 LDR X8, [X20]
	0x03CDF798 LDR X8, [X8 + 0xB8]
	0x03CDF79C STR X19, [X8]
	0x03CDF7A0 LDP X20, X19, [X31 + 0x10]
	0x03CDF7A4 LDR X30, [X31], #0x20
	0x03CDF7A8 RET
	0x03CDF7AC MOV X1, X31
	0x03CDF7B0 B 0x33BDD8C
	0x03CDF7B4 SUB X31, X31, 0x20
	0x03CDF7B8 STP X30, X19, [X31 + 0x10]
	0x03CDF7BC CBZ X2, 0x3CDF7F8
	0x03CDF7C0 MOV X0, X2
	0x03CDF7C4 MOV X19, X1
	0x03CDF7C8 BL 0x3CDBD10
	0x03CDF7CC STR W0, [X31 + 0xC]
	0x03CDF7D0 CBZ X19, 0x3CDF7F8
	0x03CDF7D4 MOV X0, X19
	0x03CDF7D8 BL 0x3CDBD10
	0x03CDF7DC MOV W1, W0
	0x03CDF7E0 ADD X0, X31, 0xC
	0x03CDF7E4 MOV X2, X31
	0x03CDF7E8 BL 0x337B634
	0x03CDF7EC LDP X30, X19, [X31 + 0x10]
	0x03CDF7F0 ADD X31, X31, 0x20
	0x03CDF7F4 RET
	0x03CDF7F8 BL 0x1C16F20
	0x03CDF7FC STP X29, X30, [X31 - 0x60]!
	0x03CDF800 STP X28, X27, [X31 + 0x10]
	0x03CDF804 STP X26, X25, [X31 + 0x20]
	0x03CDF808 STP X24, X23, [X31 + 0x30]
	0x03CDF80C STP X22, X21, [X31 + 0x40]
	0x03CDF810 STP X20, X19, [X31 + 0x50]
	0x03CDF814 ADRP X20, 0x708000
	0x03CDF818 ADRP X27, 0x483000
	0x03CDF81C ADRP X25, 0x483000
	0x03CDF820 ADRP X23, 0x483000
	0x03CDF824 ADRP X22, 0x483000
	0x03CDF828 ADRP X21, 0x41B000
	0x03CDF82C LDRB W8, [X20 + 0x4BD]
	0x03CDF830 LDR X27, [X27 + 0x538]
	0x03CDF834 LDR X25, [X25 + 0x540]
	0x03CDF838 LDR X23, [X23 + 0x548]
	0x03CDF83C LDR X22, [X22 + 0x550]
	0x03CDF840 LDR X21, [X21 + 0xC10]
	0x03CDF844 MOV X19, X0
	0x03CDF848 TBNZ X8, 0x0, 0x3CDF8C0
	0x03CDF84C ADRP X0, 0x483000
	0x03CDF850 LDR X0, [X0 + 0x540]
	0x03CDF854 BL 0x1C16CF4
	0x03CDF858 ADRP X0, 0x483000
	0x03CDF85C LDR X0, [X0 + 0x558]
	0x03CDF860 BL 0x1C16CF4
	0x03CDF864 ADRP X0, 0x483000
	0x03CDF868 LDR X0, [X0 + 0x550]
	0x03CDF86C BL 0x1C16CF4
	0x03CDF870 ADRP X0, 0x483000
	0x03CDF874 LDR X0, [X0 + 0x560]
	0x03CDF878 BL 0x1C16CF4
	0x03CDF87C ADRP X0, 0x483000
	0x03CDF880 LDR X0, [X0 + 0x568]
	0x03CDF884 BL 0x1C16CF4
	0x03CDF888 ADRP X0, 0x483000
	0x03CDF88C LDR X0, [X0 + 0x548]
	0x03CDF890 BL 0x1C16CF4
	0x03CDF894 ADRP X0, 0x483000
	0x03CDF898 LDR X0, [X0 + 0x570]
	0x03CDF89C BL 0x1C16CF4
	0x03CDF8A0 ADRP X0, 0x483000
	0x03CDF8A4 LDR X0, [X0 + 0x538]
	0x03CDF8A8 BL 0x1C16CF4
	0x03CDF8AC ADRP X0, 0x41B000
	0x03CDF8B0 LDR X0, [X0 + 0xC10]
	0x03CDF8B4 BL 0x1C16CF4
	0x03CDF8B8 MOVZ W8, 0x1
	0x03CDF8BC STRB W8, [X20 + 0x4BD]
	0x03CDF8C0 ADRP X29, 0x483000
	0x03CDF8C4 LDR X29, [X29 + 0x568]
	0x03CDF8C8 LDR X0, [X27]
	0x03CDF8CC ADRP X28, 0x483000
	0x03CDF8D0 ADRP X26, 0x483000
	0x03CDF8D4 ADRP X24, 0x483000
	0x03CDF8D8 LDR X28, [X28 + 0x558]
	0x03CDF8DC LDR X26, [X26 + 0x570]
	0x03CDF8E0 LDR X24, [X24 + 0x560]
	0x03CDF8E4 BL 0x1C16F10
	0x03CDF8E8 LDR X1, [X25]
	0x03CDF8EC MOV X20, X0
	0x03CDF8F0 BL 0x2AA4804
	0x03CDF8F4 STR X20, [X19 + 0x10]
	0x03CDF8F8 LDR X0, [X27]
	0x03CDF8FC BL 0x1C16F10
	0x03CDF900 LDR X1, [X25]
	0x03CDF904 MOV X20, X0
	0x03CDF908 BL 0x2AA4804
	0x03CDF90C MOV X0, X19
	0x03CDF910 MOV X1, X31
	0x03CDF914 STR X20, [X19 + 0x18]
	0x03CDF918 BL 0x33BDD8C
	0x03CDF91C LDR X0, [X23]
	0x03CDF920 BL 0x1C16F10
	0x03CDF924 LDR X1, [X22]
	0x03CDF928 MOV X19, X0
	0x03CDF92C BL 0x2A9E704
	0x03CDF930 LDR X0, [X21]
	0x03CDF934 LDR W8, [X0 + 0xE0]
	0x03CDF938 CBNZ W8, 0x3CDF940
	0x03CDF93C BL 0x1C16DFC
	0x03CDF940 MOV X0, X19
	0x03CDF944 MOV X1, X31
	0x03CDF948 BL 0x33B3E94
	0x03CDF94C LDR X0, [X29]
	0x03CDF950 BL 0x1C16F10
	0x03CDF954 LDR X1, [X28]
	0x03CDF958 MOV X19, X0
	0x03CDF95C BL 0x2A9E704
	0x03CDF960 MOV X0, X19
	0x03CDF964 MOV X1, X31
	0x03CDF968 BL 0x33B3E94
	0x03CDF96C LDR X0, [X26]
	0x03CDF970 BL 0x1C16F10
	0x03CDF974 LDR X1, [X24]
	0x03CDF978 MOV X19, X0
	0x03CDF97C BL 0x2A9E704
	0x03CDF980 MOV X0, X19
	0x03CDF984 LDP X20, X19, [X31 + 0x50]
	0x03CDF988 LDP X22, X21, [X31 + 0x40]
	0x03CDF98C LDP X24, X23, [X31 + 0x30]
	0x03CDF990 LDP X26, X25, [X31 + 0x20]
	0x03CDF994 LDP X28, X27, [X31 + 0x10]
	0x03CDF998 MOV X1, X31
	0x03CDF99C LDP X29, X30, [X31], #0x60
	0x03CDF9A0 B 0x33B3E94
	0x03CDF9A4 STR X30, [X31 - 0x20]!
	0x03CDF9A8 STP X20, X19, [X31 + 0x10]
	0x03CDF9AC ADRP X19, 0x708000
	0x03CDF9B0 ADRP X20, 0x46A000
	0x03CDF9B4 LDRB W8, [X19 + 0x4BE]
	0x03CDF9B8 LDR X20, [X20 + 0x580]
	0x03CDF9BC TBNZ X8, 0x0, 0x3CDF9D4
	0x03CDF9C0 ADRP X0, 0x46A000
	0x03CDF9C4 LDR X0, [X0 + 0x580]
	0x03CDF9C8 BL 0x1C16CF4
	0x03CDF9CC MOVZ W8, 0x1
	0x03CDF9D0 STRB W8, [X19 + 0x4BE]
	0x03CDF9D4 LDR X0, [X20]
	0x03CDF9D8 LDR W8, [X0 + 0xE0]
	0x03CDF9DC CBNZ W8, 0x3CDF9E8
	0x03CDF9E0 BL 0x1C16DFC
	0x03CDF9E4 LDR X0, [X20]
	0x03CDF9E8 LDR X8, [X0 + 0xB8]
	0x03CDF9EC LDR X8, [X8]
	0x03CDF9F0 CBNZ X8, 0x3CDFA20
	0x03CDF9F4 BL 0x1C16F10
	0x03CDF9F8 MOV X19, X0
	0x03CDF9FC BL 0x3CDF7FC
	0x03CDFA00 LDR X0, [X20]
	0x03CDFA04 LDR W8, [X0 + 0xE0]
	0x03CDFA08 CBNZ W8, 0x3CDFA14
	0x03CDFA0C BL 0x1C16DFC
	0x03CDFA10 LDR X0, [X20]
	0x03CDFA14 LDR X8, [X0 + 0xB8]
	0x03CDFA18 STR X19, [X8]
	0x03CDFA1C LDR X0, [X20]
	0x03CDFA20 LDR W8, [X0 + 0xE0]
	0x03CDFA24 CBNZ W8, 0x3CDFA30
	0x03CDFA28 BL 0x1C16DFC
	0x03CDFA2C LDR X0, [X20]
	0x03CDFA30 LDR X8, [X0 + 0xB8]
	0x03CDFA34 LDP X20, X19, [X31 + 0x10]
	0x03CDFA38 LDR X0, [X8]
	0x03CDFA3C LDR X30, [X31], #0x20
	0x03CDFA40 RET
	0x03CDFA44 STR X30, [X31 - 0x30]!
	0x03CDFA48 STP X22, X21, [X31 + 0x10]
	0x03CDFA4C STP X20, X19, [X31 + 0x20]
	0x03CDFA50 ADRP X22, 0x708000
	0x03CDFA54 ADRP X21, 0x414000
	0x03CDFA58 LDRB W8, [X22 + 0x4C4]
	0x03CDFA5C LDR X21, [X21 + 0x598]
	0x03CDFA60 MOV X20, X1
	0x03CDFA64 MOV X19, X0
	0x03CDFA68 TBNZ X8, 0x0, 0x3CDFABC
	0x03CDFA6C ADRP X0, 0x483000
	0x03CDFA70 LDR X0, [X0 + 0x400]
	0x03CDFA74 BL 0x1C16CF4
	0x03CDFA78 ADRP X0, 0x483000
	0x03CDFA7C LDR X0, [X0 + 0x408]
	0x03CDFA80 BL 0x1C16CF4
	0x03CDFA84 ADRP X0, 0x46A000
	0x03CDFA88 LDR X0, [X0 + 0x580]
	0x03CDFA8C BL 0x1C16CF4
	0x03CDFA90 ADRP X0, 0x483000
	0x03CDFA94 LDR X0, [X0 + 0x480]
	0x03CDFA98 BL 0x1C16CF4
	0x03CDFA9C ADRP X0, 0x483000
	0x03CDFAA0 LDR X0, [X0 + 0x460]
	0x03CDFAA4 BL 0x1C16CF4
	0x03CDFAA8 ADRP X0, 0x414000
	0x03CDFAAC LDR X0, [X0 + 0x598]
	0x03CDFAB0 BL 0x1C16CF4
	0x03CDFAB4 MOVZ W8, 0x1
	0x03CDFAB8 STRB W8, [X22 + 0x4C4]
	0x03CDFABC LDR X0, [X21]
	0x03CDFAC0 STR X31, [X31 + 0x8]
	0x03CDFAC4 LDR W8, [X0 + 0xE0]
	0x03CDFAC8 CBNZ W8, 0x3CDFAD0
	0x03CDFACC BL 0x1C16DFC
	0x03CDFAD0 MOV X0, X19
	0x03CDFAD4 MOV X1, X31
	0x03CDFAD8 MOV X2, X31
	0x03CDFADC BL 0x3C3883C
	0x03CDFAE0 TBNZ X0, 0x0, 0x3CDFBB0
	0x03CDFAE4 CBZ X20, 0x3CDFBC0
	0x03CDFAE8 LDR X8, [X20]
	0x03CDFAEC MOV X0, X20
	0x03CDFAF0 LDR X9, [X8 + 0x2B8]
	0x03CDFAF4 LDR X1, [X8 + 0x2C0]
	0x03CDFAF8 BLR X9
	0x03CDFAFC TBZ X0, 0x0, 0x3CDFBB0
	0x03CDFB00 ADRP X21, 0x46A000
	0x03CDFB04 LDR X21, [X21 + 0x580]
	0x03CDFB08 LDR X0, [X21]
	0x03CDFB0C LDR W8, [X0 + 0xE0]
	0x03CDFB10 CBNZ W8, 0x3CDFB18
	0x03CDFB14 BL 0x1C16DFC
	0x03CDFB18 BL 0x3CDF9A4
	0x03CDFB1C CBZ X0, 0x3CDFBC0
	0x03CDFB20 LDR X0, [X0 + 0x18]
	0x03CDFB24 CBZ X0, 0x3CDFBC0
	0x03CDFB28 ADRP X8, 0x483000
	0x03CDFB2C LDR X8, [X8 + 0x408]
	0x03CDFB30 ADD X2, X31, 0x8
	0x03CDFB34 MOV X1, X19
	0x03CDFB38 LDR X3, [X8]
	0x03CDFB3C BL 0x2AA6B2C
	0x03CDFB40 TBZ X0, 0x0, 0x3CDFBB0
	0x03CDFB44 LDR X0, [X31 + 0x8]
	0x03CDFB48 CBZ X0, 0x3CDFBC0
	0x03CDFB4C ADRP X8, 0x483000
	0x03CDFB50 LDR X8, [X8 + 0x480]
	0x03CDFB54 MOV X1, X20
	0x03CDFB58 LDR X2, [X8]
	0x03CDFB5C BL 0x2DE2890
	0x03CDFB60 LDR X0, [X31 + 0x8]
	0x03CDFB64 CBZ X0, 0x3CDFBC0
	0x03CDFB68 ADRP X8, 0x483000
	0x03CDFB6C LDR X8, [X8 + 0x460]
	0x03CDFB70 LDR X1, [X8]
	0x03CDFB74 BL 0x2DE2A8C
	0x03CDFB78 CBNZ W0, 0x3CDFBB0
	0x03CDFB7C LDR X0, [X21]
	0x03CDFB80 LDR W8, [X0 + 0xE0]
	0x03CDFB84 CBNZ W8, 0x3CDFB8C
	0x03CDFB88 BL 0x1C16DFC
	0x03CDFB8C BL 0x3CDF9A4
	0x03CDFB90 CBZ X0, 0x3CDFBC0
	0x03CDFB94 LDR X0, [X0 + 0x18]
	0x03CDFB98 CBZ X0, 0x3CDFBC0
	0x03CDFB9C ADRP X8, 0x483000
	0x03CDFBA0 LDR X8, [X8 + 0x400]
	0x03CDFBA4 MOV X1, X19
	0x03CDFBA8 LDR X2, [X8]
	0x03CDFBAC BL 0x2AA64F8
	0x03CDFBB0 LDP X20, X19, [X31 + 0x20]
	0x03CDFBB4 LDP X22, X21, [X31 + 0x10]
	0x03CDFBB8 LDR X30, [X31], #0x30
	0x03CDFBBC RET
	0x03CDFBC0 BL 0x1C16F20
	0x03CDFBC4 SUB X31, X31, 0x30
	0x03CDFBC8 STP X30, X21, [X31 + 0x10]
	0x03CDFBCC STP X20, X19, [X31 + 0x20]
	0x03CDFBD0 ADRP X21, 0x708000
	0x03CDFBD4 ADRP X20, 0x46A000
	0x03CDFBD8 LDRB W8, [X21 + 0x4C5]
	0x03CDFBDC LDR X20, [X20 + 0x580]
	0x03CDFBE0 MOV X19, X0
	0x03CDFBE4 TBNZ X8, 0x0, 0x3CDFC08
	0x03CDFBE8 ADRP X0, 0x483000
	0x03CDFBEC LDR X0, [X0 + 0x408]
	0x03CDFBF0 BL 0x1C16CF4
	0x03CDFBF4 ADRP X0, 0x46A000
	0x03CDFBF8 LDR X0, [X0 + 0x580]
	0x03CDFBFC BL 0x1C16CF4
	0x03CDFC00 MOVZ W8, 0x1
	0x03CDFC04 STRB W8, [X21 + 0x4C5]
	0x03CDFC08 LDR X0, [X20]
	0x03CDFC0C STR X31, [X31 + 0x8]
	0x03CDFC10 LDR W8, [X0 + 0xE0]
	0x03CDFC14 CBNZ W8, 0x3CDFC1C
	0x03CDFC18 BL 0x1C16DFC
	0x03CDFC1C BL 0x3CDF9A4
	0x03CDFC20 CBZ X0, 0x3CDFC7C
	0x03CDFC24 LDR X0, [X0 + 0x10]
	0x03CDFC28 CBZ X0, 0x3CDFC7C
	0x03CDFC2C ADRP X8, 0x483000
	0x03CDFC30 LDR X8, [X8 + 0x408]
	0x03CDFC34 ADD X2, X31, 0x8
	0x03CDFC38 MOV X1, X19
	0x03CDFC3C ADD X21, X31, 0x8
	0x03CDFC40 LDR X3, [X8]
	0x03CDFC44 BL 0x2AA6B2C
	0x03CDFC48 TBNZ X0, 0x0, 0x3CDFC68
	0x03CDFC4C LDR X0, [X20]
	0x03CDFC50 LDR W8, [X0 + 0xE0]
	0x03CDFC54 CBNZ W8, 0x3CDFC60
	0x03CDFC58 BL 0x1C16DFC
	0x03CDFC5C LDR X0, [X20]
	0x03CDFC60 LDR X8, [X0 + 0xB8]
	0x03CDFC64 ADD X21, X8, 0x8
	0x03CDFC68 LDR X0, [X21]
	0x03CDFC6C LDP X20, X19, [X31 + 0x20]
	0x03CDFC70 LDP X30, X21, [X31 + 0x10]
	0x03CDFC74 ADD X31, X31, 0x30
	0x03CDFC78 RET
	0x03CDFC7C BL 0x1C16F20
	0x03CDFC80 STR X30, [X31 - 0x30]!
	0x03CDFC84 STP X22, X21, [X31 + 0x10]
	0x03CDFC88 STP X20, X19, [X31 + 0x20]
	0x03CDFC8C ADRP X21, 0x708000
	0x03CDFC90 ADRP X22, 0x483000
	0x03CDFC94 ADRP X19, 0x483000
	0x03CDFC98 ADRP X20, 0x46A000
	0x03CDFC9C LDRB W8, [X21 + 0x4C7]
	0x03CDFCA0 LDR X22, [X22 + 0x4E0]
	0x03CDFCA4 LDR X19, [X19 + 0x4E8]
	0x03CDFCA8 LDR X20, [X20 + 0x580]
	0x03CDFCAC TBNZ X8, 0x0, 0x3CDFCDC
	0x03CDFCB0 ADRP X0, 0x46A000
	0x03CDFCB4 LDR X0, [X0 + 0x580]
	0x03CDFCB8 BL 0x1C16CF4
	0x03CDFCBC ADRP X0, 0x483000
	0x03CDFCC0 LDR X0, [X0 + 0x4E8]
	0x03CDFCC4 BL 0x1C16CF4
	0x03CDFCC8 ADRP X0, 0x483000
	0x03CDFCCC LDR X0, [X0 + 0x4E0]
	0x03CDFCD0 BL 0x1C16CF4
	0x03CDFCD4 MOVZ W8, 0x1
	0x03CDFCD8 STRB W8, [X21 + 0x4C7]
	0x03CDFCDC LDR X0, [X22]
	0x03CDFCE0 BL 0x1C16F10
	0x03CDFCE4 LDR X1, [X19]
	0x03CDFCE8 MOV X19, X0
	0x03CDFCEC BL 0x301B7C4
	0x03CDFCF0 LDR X8, [X20]
	0x03CDFCF4 LDP X22, X21, [X31 + 0x10]
	0x03CDFCF8 LDR X8, [X8 + 0xB8]
	0x03CDFCFC STR X19, [X8 + 0x8]
	0x03CDFD00 LDP X20, X19, [X31 + 0x20]
	0x03CDFD04 LDR X30, [X31], #0x30
	0x03CDFD08 RET
	0x03CDFD0C LDR X0, [X0 + 0xD8]
	0x03CDFD10 RET
	0x03CDFD14 STR X30, [X31 - 0x20]!
	0x03CDFD18 STP X20, X19, [X31 + 0x10]
	0x03CDFD1C ADRP X20, 0x708000
	0x03CDFD20 LDRB W8, [X20 + 0x4EC]
	0x03CDFD24 MOV X19, X0
	0x03CDFD28 TBNZ X8, 0x0, 0x3CDFD4C
	0x03CDFD2C ADRP X0, 0x414000
	0x03CDFD30 LDR X0, [X0 + 0xA28]
	0x03CDFD34 BL 0x1C16CF4
	0x03CDFD38 ADRP X0, 0x483000
	0x03CDFD3C LDR X0, [X0 + 0x578]
	0x03CDFD40 BL 0x1C16CF4
	0x03CDFD44 MOVZ W8, 0x1
	0x03CDFD48 STRB W8, [X20 + 0x4EC]
	0x03CDFD4C MOV X0, X19
	0x03CDFD50 BL 0x3CE49F8
	0x03CDFD54 TBNZ X0, 0x0, 0x3CDFD98
	0x03CDFD58 LDR V0, [X19 + 0x100]
	0x03CDFD5C FCMP S0, 0x0
	0x03CDFD60 B.LE 0x3CDFD98
	0x03CDFD64 ADRP X8, 0x414000
	0x03CDFD68 LDR X8, [X8 + 0xA28]
	0x03CDFD6C LDR X0, [X8]
	0x03CDFD70 LDR W8, [X0 + 0xE0]
	0x03CDFD74 CBNZ W8, 0x3CDFD7C
	0x03CDFD78 BL 0x1C16DFC
	0x03CDFD7C ADRP X8, 0x483000
	0x03CDFD80 LDR X8, [X8 + 0x578]
	0x03CDFD84 MOV X1, X19
	0x03CDFD88 MOV X2, X31
	0x03CDFD8C LDR X0, [X8]
	0x03CDFD90 BL 0x3C06B0C
	0x03CDFD94 STR W31, [X19 + 0x100]
	0x03CDFD98 LDP X20, X19, [X31 + 0x10]
	0x03CDFD9C LDR X30, [X31], #0x20
	0x03CDFDA0 RET
	0x03CDFDA4 STP X30, X21, [X31 - 0x20]!
	0x03CDFDA8 STP X20, X19, [X31 + 0x10]
	0x03CDFDAC ADRP X20, 0x708000
	0x03CDFDB0 ADRP X21, 0x414000
	0x03CDFDB4 LDRB W8, [X20 + 0x4DC]
	0x03CDFDB8 LDR X21, [X21 + 0x598]
	0x03CDFDBC MOV X19, X0
	0x03CDFDC0 TBNZ X8, 0x0, 0x3CDFDE4
	0x03CDFDC4 ADRP X0, 0x483000
	0x03CDFDC8 LDR X0, [X0 + 0x580]
	0x03CDFDCC BL 0x1C16CF4
	0x03CDFDD0 ADRP X0, 0x414000
	0x03CDFDD4 LDR X0, [X0 + 0x598]
	0x03CDFDD8 BL 0x1C16CF4
	0x03CDFDDC MOVZ W8, 0x1
	0x03CDFDE0 STRB W8, [X20 + 0x4DC]
	0x03CDFDE4 MOV X0, X19
	0x03CDFDE8 BL 0x3CDFE9C
	0x03CDFDEC LDR X8, [X21]
	0x03CDFDF0 MOV X20, X0
	0x03CDFDF4 LDR W9, [X8 + 0xE0]
	0x03CDFDF8 CBNZ W9, 0x3CDFE04
	0x03CDFDFC MOV X0, X8
	0x03CDFE00 BL 0x1C16DFC
	0x03CDFE04 MOV X0, X20
	0x03CDFE08 MOV X1, X31
	0x03CDFE0C MOV X2, X31
	0x03CDFE10 BL 0x3C354F8
	0x03CDFE14 TBZ X0, 0x0, 0x3CDFE80
	0x03CDFE18 MOV X0, X19
	0x03CDFE1C BL 0x3CDFE9C
	0x03CDFE20 CBZ X0, 0x3CDFE8C
	0x03CDFE24 MOV X1, X31
	0x03CDFE28 BL 0x3C41990
	0x03CDFE2C LDR X8, [X21]
	0x03CDFE30 MOV X20, X0
	0x03CDFE34 LDR W9, [X8 + 0xE0]
	0x03CDFE38 CBNZ W9, 0x3CDFE44
	0x03CDFE3C MOV X0, X8
	0x03CDFE40 BL 0x1C16DFC
	0x03CDFE44 MOV X0, X20
	0x03CDFE48 MOV X1, X31
	0x03CDFE4C MOV X2, X31
	0x03CDFE50 BL 0x3C3883C
	0x03CDFE54 TBZ X0, 0x0, 0x3CDFE80
	0x03CDFE58 ADRP X8, 0x483000
	0x03CDFE5C LDR X8, [X8 + 0x580]
	0x03CDFE60 LDR X0, [X8]
	0x03CDFE64 LDR W8, [X0 + 0xE0]
	0x03CDFE68 CBNZ W8, 0x3CDFE70
	0x03CDFE6C BL 0x1C16DFC
	0x03CDFE70 MOV X0, X19
	0x03CDFE74 BL 0x3CE32A4
	0x03CDFE78 MOVZ W8, 0x1
	0x03CDFE7C STRB W8, [X19 + 0x104]
	0x03CDFE80 LDP X20, X19, [X31 + 0x10]
	0x03CDFE84 LDP X30, X21, [X31], #0x20
	0x03CDFE88 RET
	0x03CDFE8C BL 0x1C16F20
	0x03CDFE90 STRH W31, [X0 + 0x38]
	0x03CDFE94 RET
	0x03CDFE98 B 0x3CDFE9C
	0x03CDFE9C STP X30, X21, [X31 - 0x20]!
	0x03CDFEA0 STP X20, X19, [X31 + 0x10]
	0x03CDFEA4 ADRP X21, 0x708000
	0x03CDFEA8 ADRP X20, 0x414000
	0x03CDFEAC LDRB W8, [X21 + 0x4CA]
	0x03CDFEB0 LDR X20, [X20 + 0x598]
	0x03CDFEB4 MOV X19, X0
	0x03CDFEB8 TBNZ X8, 0x0, 0x3CDFED0
	0x03CDFEBC ADRP X0, 0x414000
	0x03CDFEC0 LDR X0, [X0 + 0x598]
	0x03CDFEC4 BL 0x1C16CF4
	0x03CDFEC8 MOVZ W8, 0x1
	0x03CDFECC STRB W8, [X21 + 0x4CA]
	0x03CDFED0 LDR X0, [X20]
	0x03CDFED4 LDR X20, [X19 + 0xE0]
	0x03CDFED8 LDR W8, [X0 + 0xE0]
	0x03CDFEDC CBNZ W8, 0x3CDFEE4
	0x03CDFEE0 BL 0x1C16DFC
	0x03CDFEE4 MOV X0, X20
	0x03CDFEE8 MOV X1, X31
	0x03CDFEEC MOV X2, X31
	0x03CDFEF0 BL 0x3C354F8
	0x03CDFEF4 ANDS W31, W0, 0x1
	0x03CDFEF8 MOVZ W8, 0xD8
	0x03CDFEFC MOVZ W9, 0xE0
	0x03CDFF00 CSEL X8, X9, X8, NE
	0x03CDFF04 LDR X0, [X19, X8, LSL]
	0x03CDFF08 LDP X20, X19, [X31 + 0x10]
	0x03CDFF0C LDP X30, X21, [X31], #0x20
	0x03CDFF10 RET
	0x03CDFF14 STR X30, [X31 - 0x30]!
	0x03CDFF18 STP X22, X21, [X31 + 0x10]
	0x03CDFF1C STP X20, X19, [X31 + 0x20]
	0x03CDFF20 ADRP X22, 0x708000
	0x03CDFF24 ADRP X21, 0x483000
	0x03CDFF28 LDRB W8, [X22 + 0x4C9]
	0x03CDFF2C LDR X21, [X21 + 0x588]
	0x03CDFF30 MOV X20, X1
	0x03CDFF34 MOV X19, X0
	0x03CDFF38 TBNZ X8, 0x0, 0x3CDFF50
	0x03CDFF3C ADRP X0, 0x483000
	0x03CDFF40 LDR X0, [X0 + 0x588]
	0x03CDFF44 BL 0x1C16CF4
	0x03CDFF48 MOVZ W8, 0x1
	0x03CDFF4C STRB W8, [X22 + 0x4C9]
	0x03CDFF50 LDR X2, [X21]
	0x03CDFF54 ADD X0, X19, 0xE0
	0x03CDFF58 MOV X1, X20
	0x03CDFF5C BL 0x2254190
	0x03CDFF60 TBZ X0, 0x0, 0x3CDFF8C
	0x03CDFF64 LDR X8, [X19]
	0x03CDFF68 MOV X0, X19
	0x03CDFF6C LDR X9, [X8 + 0x2D8]
	0x03CDFF70 LDR X1, [X8 + 0x2E0]
	0x03CDFF74 BLR X9
	0x03CDFF78 MOV X0, X19
	0x03CDFF7C LDP X20, X19, [X31 + 0x20]
	0x03CDFF80 LDP X22, X21, [X31 + 0x10]
	0x03CDFF84 LDR X30, [X31], #0x30
	0x03CDFF88 B 0x3CDFDA4
	0x03CDFF8C LDP X20, X19, [X31 + 0x20]
	0x03CDFF90 LDP X22, X21, [X31 + 0x10]
	0x03CDFF94 LDR X30, [X31], #0x30
	0x03CDFF98 RET
	0x03CDFF9C LDR W0, [X0 + 0xE8]
	0x03CDFFA0 RET
	0x03CDFFA4 LDRB W0, [X0 + 0xEC]
	0x03CDFFA8 RET
	0x03CDFFAC STR X30, [X31 - 0x30]!
	0x03CDFFB0 STP X22, X21, [X31 + 0x10]
	0x03CDFFB4 STP X20, X19, [X31 + 0x20]
	0x03CDFFB8 ADRP X22, 0x708000
	0x03CDFFBC ADRP X21, 0x483000
	0x03CDFFC0 LDRB W8, [X22 + 0x4CC]
	0x03CDFFC4 LDR X21, [X21 + 0x590]
	0x03CDFFC8 MOV W20, W1
	0x03CDFFCC MOV X19, X0
	0x03CDFFD0 TBNZ X8, 0x0, 0x3CDFFE8
	0x03CDFFD4 ADRP X0, 0x483000

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+208], D15
	003 Move [X31+216], D14
	004 Move [X31+224], D13
	005 Move [X31+232], D12
	006 Move [X31+240], D11
	007 Move [X31+248], D10
	008 Move [X31+256], D9
	009 Move [X31+264], D8
	010 Move [X31+272], X29
	011 Move [X31+280], X30
	012 Move [X31+288], X28
	013 Move [X31+296], X27
	014 Move [X31+304], X26
	015 Move [X31+312], X25
	016 Move [X31+320], X24
	017 Move [X31+328], X23
	018 Move [X31+336], X22
	019 Move [X31+344], X21
	020 Move [X31+352], X20
	021 Move [X31+360], X19
	022 Move [X31+72], X2
	023 Move X21, 0x709000
	024 Move X28, 0x415000
	025 Move W8, [X21+1208]
	026 Move X28, [X28+1432]
	027 Move X24, X1
	028 Move X20, X0
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {65}
	033 Move X0, 0x479000
	034 Move X0, [X0+1096]
	035 Call 0x1C17CF4
	036 Move X0, 0x484000
	037 Move X0, [X0+1264]
	038 Call 0x1C17CF4
	039 Move X0, 0x46B000
	040 Move X0, [X0+1408]
	041 Call 0x1C17CF4
	042 Move X0, 0x46B000
	043 Move X0, [X0+1424]
	044 Call 0x1C17CF4
	045 Move X0, 0x46B000
	046 Move X0, [X0+856]
	047 Call 0x1C17CF4
	048 Move X0, 0x484000
	049 Move X0, [X0+1272]
	050 Call 0x1C17CF4
	051 Move X0, 0x484000
	052 Move X0, [X0+1280]
	053 Call 0x1C17CF4
	054 Move X0, 0x46B000
	055 Move X0, [X0+816]
	056 Call 0x1C17CF4
	057 Move X0, 0x484000
	058 Move X0, [X0+1288]
	059 Call 0x1C17CF4
	060 Move X0, 0x415000
	061 Move X0, [X0+1432]
	062 Call 0x1C17CF4
	063 Move W8, 1
	064 Move [X21+1208], W8
	065 NotImplemented "Instruction MOVI not yet implemented."
	066 Move X0, X20
	067 Move [X31+108], V0
	068 Move [X31+80], V0
	069 Move [X31+88], V0
	070 Call GraphicRaycaster.get_canvas, X0
	071 Move X8, [X28]
	072 Move X21, X0
	073 Move W9, [X8+224]
	074 Compare W9, 0
	075 JumpIfNotEqual {78}
	076 Move X0, X8
	077 Call 0x1C17DFC
	078 Move X0, X21
	079 Move X1, X31
	080 Move X2, X31
	081 Call Object.op_Equality, X0, X1
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {754}
	086 Move X0, X20
	087 Call GraphicRaycaster.get_canvas, X0
	088 Move X8, 0x46B000
	089 Move X8, [X8+1408]
	090 Move X21, X0
	091 Move X8, [X8]
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {97}
	095 Move X0, X8
	096 Call 0x1C17DFC
	097 Move X0, X21
	098 Call GraphicRegistry.GetRaycastableGraphicsForCanvas, X0
	099 Compare X0, 0
	100 JumpIfEqual {754}
	101 Move X10, 0x46B000
	102 Move X8, [X0]
	103 Move X10, [X10+1424]
	104 Move X23, X0
	105 NotImplemented "Instruction LDRH not yet implemented."
	106 Move X1, [X10]
	107 Compare X9, 0
	108 JumpIfEqual {115}
	109 Move X10, [X8+176]
	110 Add X10, X10, 8
	111 NotImplemented "Instruction LDUR not yet implemented."
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Subtract X9, X9, 1
	114 Add X10, X10, 16
	115 Move X0, X23
	116 Move W2, W31
	117 Call 0x1C5D788
	118 NotImplemented "Instruction LDRSW not yet implemented."
	119 Add X8, X8, X9
	120 Add X0, X8, 312
	121 Move X8, [X0]
	122 Move X1, [X0+8]
	123 Move X0, X23
	124 NotImplemented "Instruction BLR not yet implemented."
	125 Compare W0, 0
	126 JumpIfEqual {754}
	127 Move X8, [X20]
	128 Move X0, X20
	129 Move X9, [X8+600]
	130 Move X1, [X8+608]
	131 NotImplemented "Instruction BLR not yet implemented."
	132 Move X27, X0
	133 Move X0, X20
	134 Call GraphicRaycaster.get_canvas, X0
	135 Compare X0, 0
	136 JumpIfEqual {753}
	137 Move X1, X31
	138 Call Canvas.get_renderMode, X0
	139 Compare W0, 0
	140 JumpIfEqual {154}
	141 Move X0, [X28]
	142 Move W8, [X0+224]
	143 Compare W8, 0
	144 JumpIfNotEqual {146}
	145 Call 0x1C17DFC
	146 Move X0, X27
	147 Move X1, X31
	148 Move X2, X31
	149 Call Object.op_Equality, X0, X1
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfNotEqual {160}
	154 Move X0, X20
	155 Call GraphicRaycaster.get_canvas, X0
	156 Compare X0, 0
	157 JumpIfEqual {753}
	158 Move X1, X31
	159 Call Canvas.get_targetDisplay, X0
	160 Compare X27, 0
	161 JumpIfEqual {753}
	162 Move X0, X27
	163 Move X1, X31
	164 Call Camera.get_targetDisplay, X0
	165 Move W19, W0
	166 Move X0, X24
	167 Move X1, X31
	168 Call MultipleDisplayUtilities.GetRelativeMousePositionForRaycast, X0
	169 Move W8, 0x7F800000
	170 Move V15, V0
	171 Move S0, W8
	172 NotImplemented "Instruction FCVTZS not yet implemented."
	173 NotImplemented "Instruction FCMP not yet implemented."
	174 Move W8, 0x80000000
	175 NotImplemented "Instruction CSEL not yet implemented."
	176 NotImplemented "Instruction CMP not yet implemented."
	177 Move [X31+32], W19
	178 Move X0, [X28]
	179 Move V10, V2
	180 Move V14, V1
	181 Move W8, [X0+224]
	182 Compare W8, 0
	183 JumpIfNotEqual {185}
	184 Call 0x1C17DFC
	185 Move X0, X27
	186 Move X1, X31
	187 Move X2, X31
	188 Call Object.op_Equality, X0, X1
	189 Move W19, [X31+32]
	190 Move TEMP, X0
	191 And TEMP, TEMP, 1
	192 Compare TEMP, 1
	193 JumpIfNotEqual {252}
	194 Move X0, X31
	195 Call Screen.get_width
	196 Move W24, W0
	197 Move X0, X31
	198 Call Screen.get_height
	199 NotImplemented "Instruction CMP not yet implemented."
	200 Move W25, W0
	201 Move X22, 0x479000
	202 Move X22, [X22+1096]
	203 Move X0, [X22]
	204 Move W8, [X0+224]
	205 Compare W8, 0
	206 JumpIfNotEqual {209}
	207 Call 0x1C17DFC
	208 Move X0, [X22]
	209 Move X8, [X0+184]
	210 Move X8, [X8]
	211 Compare X8, 0
	212 JumpIfEqual {753}
	213 Move W9, [X8+24]
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Move W9, [X0+224]
	216 Compare W9, 0
	217 JumpIfNotEqual {224}
	218 Call 0x1C17DFC
	219 Move X8, [X22]
	220 Move X8, [X8+184]
	221 Move X8, [X8]
	222 Compare X8, 0
	223 JumpIfEqual {753}
	224 Move W9, [X8+24]
	225 NotImplemented "Instruction CMP not yet implemented."
	226 Move W25, W19
	227 Add X8, X8, X25
	228 Move X0, [X8+32]
	229 Compare X0, 0
	230 JumpIfEqual {753}
	231 Move X1, X31
	232 Call Display.get_systemWidth, X0
	233 Move X8, [X22]
	234 Move X8, [X8+184]
	235 Move X8, [X8]
	236 Compare X8, 0
	237 JumpIfEqual {753}
	238 Move W9, [X8+24]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Add X8, X8, X25
	241 Move W24, W0
	242 Move X0, [X8+32]
	243 Compare X0, 0
	244 JumpIfEqual {753}
	245 Move X1, X31
	246 Call Display.get_systemHeight, X0
	247 Move W25, W0
	248 NotImplemented "Instruction SCVTF not yet implemented."
	249 NotImplemented "Instruction SCVTF not yet implemented."
	250 NotImplemented "Instruction FDIV not yet implemented."
	251 NotImplemented "Instruction FDIV not yet implemented."
	252 Compare X27, 0
	253 JumpIfEqual {753}
	254 Move X0, X27
	255 Move V0, V15
	256 Move V1, V14
	257 Move V2, V10
	258 Move X1, X31
	259 Call Camera.ScreenToViewportPoint, X0, X1
	260 Move S2, 1
	261 NotImplemented "Instruction FCMP not yet implemented."
	262 NotImplemented "Instruction FCMP not yet implemented."
	263 Move S2, 1
	264 NotImplemented "Instruction FCMP not yet implemented."
	265 NotImplemented "Instruction FCMP not yet implemented."
	266 Move X0, [X28]
	267 Move W8, [X0+224]
	268 Compare W8, 0
	269 JumpIfNotEqual {271}
	270 Call 0x1C17DFC
	271 Move X0, X27
	272 Move X1, X31
	273 Move X2, X31
	274 Call Object.op_Inequality, X0, X1
	275 Move S0, W31
	276 Move [X31+56], S0
	277 Move S0, W31
	278 Move [X31+52], S0
	279 Move S0, W31
	280 Move [X31+48], S0
	281 Move S0, W31
	282 Move [X31+44], S0
	283 Move S0, W31
	284 Move [X31+40], S0
	285 Move S0, W31
	286 Move [X31+36], S0
	287 Move TEMP, X0
	288 And TEMP, TEMP, 1
	289 Compare TEMP, 1
	290 JumpIfNotEqual {312}
	291 Compare X27, 0
	292 JumpIfEqual {753}
	293 Add X8, X31, 128
	294 Move X0, X27
	295 Move V0, V15
	296 Move V1, V14
	297 Move V2, V10
	298 Move X1, X31
	299 Call Camera.ScreenPointToRay, X0, X1
	300 Move V3, [X31+128]
	301 Move V0, [X31+132]
	302 Move [X31+36], S3
	303 Move [X31+44], S0
	304 Move V3, [X31+136]
	305 Move V0, [X31+140]
	306 Move [X31+44], S3
	307 Move [X31+52], S0
	308 Move V3, [X31+144]
	309 Move V0, [X31+148]
	310 Move [X31+52], S3
	311 Move [X31+60], S0
	312 Move X0, X20
	313 Call GraphicRaycaster.get_canvas, X0
	314 Compare X0, 0
	315 JumpIfEqual {753}
	316 Move X1, X31
	317 Call Canvas.get_renderMode, X0
	318 Compare W0, 0
	319 JumpIfEqual {361}
	320 Move W8, [X20+44]
	321 Compare W8, 0
	322 JumpIfEqual {361}
	323 Move X0, [X28]
	324 Move W8, [X0+224]
	325 Compare W8, 0
	326 JumpIfNotEqual {328}
	327 Call 0x1C17DFC
	328 Move X0, X27
	329 Move X1, X31
	330 Move X2, X31
	331 Call Object.op_Inequality, X0, X1
	332 Move TEMP, X0
	333 And TEMP, TEMP, 1
	334 Compare TEMP, 1
	335 JumpIfNotEqual {776}
	336 Move X22, 0x6FB000
	337 Move W8, [X22+1450]
	338 Compare W8, 0
	339 JumpIfNotEqual {345}
	340 Move X0, 0x41C000
	341 Move X0, [X0+1208]
	342 Call 0x1C17CF4
	343 Move W8, 1
	344 Move [X22+1450], W8
	345 Move X8, 0x41C000
	346 Move X8, [X8+1208]
	347 Move X9, -52379648
	348 Move V2, [X31+56]
	349 Move V0, [X9+576]
	350 Move X8, [X8]
	351 Move S3, 8
	352 NotImplemented "Instruction FABS not yet implemented."
	353 Multiply S0, S2, S0
	354 Move X8, [X8+184]
	355 Move V1, [X8]
	356 Multiply S1, S1, S3
	357 NotImplemented "Instruction FCMP not yet implemented."
	358 NotImplemented "Instruction FCSEL not yet implemented."
	359 NotImplemented "Instruction FCMP not yet implemented."
	360 Move W8, 0x7F800000
	361 Move TEMP, 0x80800000
	362 Not TEMP
	363 Move W8, TEMP
	364 Move [X31+68], W8
	365 Move X8, [X20+64]
	366 Compare X8, 0
	367 JumpIfEqual {753}
	368 Move W2, [X8+24]
	369 Move W9, [X8+28]
	370 Add W9, W9, 1
	371 NotImplemented "Instruction CMP not yet implemented."
	372 Move [X8+24], W31
	373 Move [X8+28], W9
	374 Move X0, [X8+16]
	375 Move W1, W31
	376 Move X3, X31
	377 Call Array.Clear, X0, X1, X2
	378 Move X0, X20
	379 Call GraphicRaycaster.get_canvas, X0
	380 Move X8, 0x484000
	381 Move X8, [X8+1264]
	382 Move X24, [X20+64]
	383 Move X0, [X8]
	384 Move W8, [X0+224]
	385 Compare W8, 0
	386 JumpIfNotEqual {388}
	387 Call 0x1C17DFC
	388 Move X1, X27
	389 Move V0, V15
	390 Move V1, V14
	391 Move X2, X23
	392 Move X3, X24
	393 Call GraphicRaycaster.Raycast, X0, X1, X2, X3, X4
	394 Move X0, [X20+64]
	395 Compare X0, 0
	396 JumpIfEqual {753}
	397 Move W8, [X0+24]
	398 Subtract W29, W8, 1
	399 Move X22, 0x484000
	400 Move X19, 0x415000
	401 Move X22, [X22+1288]
	402 Move X19, [X19+1440]
	403 Move W23, W31
	404 Move X24, 0x6FA000
	405 Move [X31+24], S14
	406 Move [X31+32], S15
	407 Move [X31+16], X27
	408 Move X2, [X22]
	409 Move W1, W23
	410 Call List`1<Object>.get_Item, X0, X1
	411 Compare X0, 0
	412 JumpIfEqual {753}
	413 Move X1, X31
	414 Call Component.get_gameObject, X0
	415 Move W8, [X20+40]
	416 Move X25, X0
	417 Compare W8, 0
	418 JumpIfEqual {484}
	419 Move X0, [X28]
	420 Move W8, [X0+224]
	421 Compare W8, 0
	422 JumpIfNotEqual {424}
	423 Call 0x1C17DFC
	424 Move X0, X27
	425 Move X1, X31
	426 Move X2, X31
	427 Call Object.op_Equality, X0, X1
	428 Move TEMP, X0
	429 And TEMP, TEMP, 1
	430 Compare TEMP, 1
	431 JumpIfNotEqual {486}
	432 Compare X25, 0
	433 JumpIfEqual {753}
	434 Move X0, X25
	435 Move X1, X31
	436 Call GameObject.get_transform, X0
	437 Compare X0, 0
	438 JumpIfEqual {753}
	439 Move X1, X31
	440 Call Transform.get_rotation, X0
	441 Move W8, [X24+2591]
	442 Move V8, V0
	443 Move V9, V1
	444 Move V11, V2
	445 Move V12, V3
	446 Compare W8, 0
	447 JumpIfNotEqual {452}
	448 Move X0, X19
	449 Call 0x1C17CF4
	450 Move W8, 1
	451 Move [X24+2591], W8
	452 Move X8, [X19]
	453 Move V0, V8
	454 Move V1, V9
	455 Move V2, V11
	456 Move X8, [X8+184]
	457 Move V3, V12
	458 Move X0, X31
	459 Move S4, [X8+72]
	460 Move S5, [X8+76]
	461 Move V6, [X8+80]
	462 Call Quaternion.op_Multiply, X0, X1
	463 Move W8, [X24+2591]
	464 Move V8, V0
	465 Move V9, V1
	466 Move V10, V2
	467 Compare W8, 0
	468 JumpIfNotEqual {473}
	469 Move X0, X19
	470 Call 0x1C17CF4
	471 Move W8, 1
	472 Move [X24+2591], W8
	473 Move X8, [X19]
	474 Move X8, [X8+184]
	475 Move S0, [X8+72]
	476 Move S1, [X8+76]
	477 Move V2, [X8+80]
	478 Multiply S0, S8, S0
	479 Multiply S1, S9, S1
	480 Add S0, S0, S1
	481 Multiply S1, S10, S2
	482 Add S0, S1, S0
	483 NotImplemented "Instruction FCMP not yet implemented."
	484 Compare X25, 0
	485 JumpIfNotEqual {574}
	486 Compare X27, 0
	487 JumpIfEqual {753}
	488 Move X0, X27
	489 Move X1, X31
	490 Call Component.get_transform, X0
	491 Compare X0, 0
	492 JumpIfEqual {753}
	493 Move X1, X31
	494 Call Transform.get_rotation, X0
	495 Move W8, [X24+2591]
	496 Move V8, V0
	497 Move V9, V1
	498 Move V11, V2
	499 Move V12, V3
	500 Compare W8, 0
	501 JumpIfNotEqual {506}
	502 Move X0, X19
	503 Call 0x1C17CF4
	504 Move W8, 1
	505 Move [X24+2591], W8
	506 Move X8, [X19]
	507 Move V0, V8
	508 Move V1, V9
	509 Move V2, V11
	510 Move X8, [X8+184]
	511 Move V3, V12
	512 Move X0, X31
	513 Move S4, [X8+72]
	514 Move S5, [X8+76]
	515 Move V6, [X8+80]
	516 Call Quaternion.op_Multiply, X0, X1
	517 Move X0, X27
	518 Move X1, X31
	519 Move V13, V0
	520 Move V9, V1
	521 Move V10, V2
	522 Call Camera.get_nearClipPlane, X0
	523 Compare X25, 0
	524 JumpIfEqual {753}
	525 Move X0, X25
	526 Move X1, X31
	527 Move V14, V0
	528 Call GameObject.get_transform, X0
	529 Compare X0, 0
	530 JumpIfEqual {753}
	531 Move X1, X31
	532 Move [X31+60], S10
	533 Move [X31+68], S9
	534 Call Transform.get_position, X0
	535 Move X0, X27
	536 Move X1, X31
	537 Move V15, V0
	538 Move V8, V1
	539 Move V9, V2
	540 Call Component.get_transform, X0
	541 Compare X0, 0
	542 JumpIfEqual {753}
	543 Move X1, X31
	544 Call Transform.get_position, X0
	545 Move X0, X25
	546 Move X1, X31
	547 Move V10, V0
	548 Move V11, V1
	549 Move V12, V2
	550 Call GameObject.get_transform, X0
	551 Compare X0, 0
	552 JumpIfEqual {753}
	553 Move S2, [X31+60]
	554 Move S1, [X31+64]
	555 Multiply S0, S13, S14
	556 Subtract S3, S9, S12
	557 Subtract S4, S8, S11
	558 Multiply S1, S1, S14
	559 Multiply S2, S2, S14
	560 Subtract S5, S15, S10
	561 Move X1, X31
	562 Subtract S8, S3, S2
	563 Subtract S9, S4, S1
	564 Subtract S10, S5, S0
	565 Call Transform.get_forward, X0
	566 Multiply S0, S10, S0
	567 Multiply S1, S9, S1
	568 Move S14, [X31+24]
	569 Move S15, [X31+28]
	570 Add S0, S0, S1
	571 Multiply S1, S8, S2
	572 Add S0, S1, S0
	573 NotImplemented "Instruction FCMP not yet implemented."
	574 Move X0, X25
	575 Move X1, X31
	576 Call GameObject.get_transform, X0
	577 Compare X0, 0
	578 JumpIfEqual {753}
	579 Move X1, X31
	580 Move X26, X0
	581 Call Transform.get_forward, X0
	582 Move X0, [X28]
	583 Move V11, V0
	584 Move V12, V1
	585 Move V13, V2
	586 Move W8, [X0+224]
	587 Compare W8, 0
	588 JumpIfNotEqual {590}
	589 Call 0x1C17DFC
	590 Move X0, X27
	591 Move X1, X31
	592 Move X2, X31
	593 Call Object.op_Equality, X0, X1
	594 Move S8, W31
	595 Move TEMP, X0
	596 And TEMP, TEMP, 1
	597 Compare TEMP, 1
	598 JumpIfEqual {631}
	599 Move X0, X20
	600 Call GraphicRaycaster.get_canvas, X0
	601 Compare X0, 0
	602 JumpIfEqual {753}
	603 Move X1, X31
	604 Call Canvas.get_renderMode, X0
	605 Compare W0, 0
	606 JumpIfEqual {631}
	607 Move X0, X26
	608 Move X1, X31
	609 Call Transform.get_position, X0
	610 Move S3, [X31+48]
	611 Move S4, [X31+52]
	612 Multiply S3, S3, S11
	613 Multiply S4, S4, S12
	614 Add S3, S3, S4
	615 Move V4, [X31+36]
	616 Subtract S0, S0, S4
	617 Move V4, [X31+40]
	618 Multiply S0, S11, S0
	619 Subtract S1, S1, S4
	620 Multiply S1, S12, S1
	621 Add S0, S0, S1
	622 Move V1, [X31+44]
	623 Subtract S1, S2, S1
	624 Multiply S1, S13, S1
	625 Add S0, S1, S0
	626 Move V1, [X31+56]
	627 Multiply S1, S1, S13
	628 Add S1, S1, S3
	629 NotImplemented "Instruction FDIV not yet implemented."
	630 NotImplemented "Instruction FCMP not yet implemented."
	631 Move V0, [X31+68]
	632 NotImplemented "Instruction FCMP not yet implemented."
	633 Move X8, [X31+72]
	634 Compare X8, 0
	635 JumpIfEqual {753}
	636 Move X0, [X20+64]
	637 Move X21, X20
	638 Compare X0, 0
	639 JumpIfEqual {753}
	640 Move X2, [X22]
	641 Move V9, [X8+24]
	642 Move W1, W23
	643 Move W19, W29
	644 Move X29, X28
	645 Move X28, X24
	646 Move X24, X22
	647 Call List`1<Object>.get_Item, X0, X1
	648 Compare X0, 0
	649 JumpIfEqual {753}
	650 Move W22, [X31+32]
	651 Call Graphic.get_depth, X0
	652 Move W26, W0
	653 Move X0, X21
	654 Move X20, X21
	655 Call GraphicRaycaster.get_canvas, X0
	656 Compare X0, 0
	657 JumpIfEqual {753}
	658 Move X1, X31
	659 Call Canvas.get_sortingLayerID, X0
	660 Move W27, W0
	661 Move X0, X20
	662 Call GraphicRaycaster.get_canvas, X0
	663 Compare X0, 0
	664 JumpIfEqual {753}
	665 Move X1, X31
	666 Call Canvas.get_sortingOrder, X0
	667 Move X12, [X31+72]
	668 Move X9, 0x46B000
	669 Move W10, [X12+28]
	670 Move X8, [X12+16]
	671 Move X9, [X9+856]
	672 Add W10, W10, 1
	673 Move X9, [X9]
	674 Move [X12+28], W10
	675 Compare X8, 0
	676 JumpIfEqual {753}
	677 Move S0, [X31+48]
	678 Move S1, [X31+52]
	679 Move V4, [X31+36]
	680 Move V3, [X31+56]
	681 NotImplemented "Instruction LDRSW not yet implemented."
	682 Multiply S0, S0, S8
	683 Add S6, S4, S0
	684 Move V0, [X31+40]
	685 Multiply S1, S1, S8
	686 Move W11, [X8+24]
	687 Multiply S3, S3, S8
	688 Add S5, S0, S1
	689 Move V0, [X31+44]
	690 NotImplemented "Instruction SCVTF not yet implemented."
	691 NotImplemented "Instruction FNEG not yet implemented."
	692 NotImplemented "Instruction CMP not yet implemented."
	693 Add S4, S0, S3
	694 NotImplemented "Instruction FNEG not yet implemented."
	695 NotImplemented "Instruction FNEG not yet implemented."
	696 Move W11, 80
	697 Add W9, W10, 1
	698 NotImplemented "Instruction MADD not yet implemented."
	699 Move [X12+24], W9
	700 Move [X8+32], X25
	701 Move [X8+40], X21
	702 Move [X8+48], S8
	703 Move [X8+56], S2
	704 Move [X8+56], W26
	705 Move [X8+60], X31
	706 Move [X8+68], W27
	707 Move [X8+72], W0
	708 Move [X8+76], S6
	709 Move [X8+84], S5
	710 Move [X8+84], S4
	711 Move [X8+92], S3
	712 Move [X8+92], S1
	713 Move [X8+100], S0
	714 Move [X8+100], S15
	715 Move [X8+108], S14
	716 Move [X8+108], W22
	717 Move X8, [X9+32]
	718 Add X1, X31, 128
	719 Move X8, [X8+192]
	720 Move X2, [X8+112]
	721 Move [X31+164], W27
	722 Move [X31+168], W0
	723 Move X0, X12
	724 Move [X31+128], X25
	725 Move [X31+136], X21
	726 Move [X31+144], S8
	727 Move [X31+152], S2
	728 Move [X31+152], W26
	729 Move [X31+156], X31
	730 Move [X31+172], S6
	731 Move [X31+180], S5
	732 Move [X31+180], S4
	733 Move [X31+188], S3
	734 Move [X31+188], S1
	735 Move [X31+196], S0
	736 Move [X31+196], S15
	737 Move [X31+204], S14
	738 Move [X31+204], W22
	739 Call List`1<RaycastResult>.AddWithResize, X0, X1
	740 Move X22, X24
	741 Move X24, X28
	742 Move X28, X29
	743 Move W29, W19
	744 Move X19, 0x415000
	745 Move X19, [X19+1440]
	746 Move X27, [X31+16]
	747 Move X20, X21
	748 NotImplemented "Instruction CMP not yet implemented."
	749 Move X0, [X20+64]
	750 Add W23, W23, 1
	751 Compare X0, 0
	752 JumpIfNotEqual {408}
	753 Call 0x1C17F20
	754 Move X20, [X31+352]
	755 Move X19, [X31+360]
	756 Move X22, [X31+336]
	757 Move X21, [X31+344]
	758 Move X24, [X31+320]
	759 Move X23, [X31+328]
	760 Move X26, [X31+304]
	761 Move X25, [X31+312]
	762 Move X28, [X31+288]
	763 Move X27, [X31+296]
	764 Move X29, [X31+272]
	765 Move X30, [X31+280]
	766 Move D9, [X31+256]
	767 Move D8, [X31+264]
	768 Move D11, [X31+240]
	769 Move D10, [X31+248]
	770 Move D13, [X31+224]
	771 Move D12, [X31+232]
	772 Move D15, [X31+208]
	773 Move D14, [X31+216]
	774 Add X31, X31, 368
	775 Return 
	776 Move W8, 0x42C80000
	777 Move S11, W8
	778 Compare X27, 0
	779 JumpIfEqual {753}
	780 Move X0, X27
	781 Move X1, X31
	782 Call Camera.get_farClipPlane, X0
	783 Move X0, X27
	784 Move X1, X31
	785 Move V8, V0
	786 Call Camera.get_nearClipPlane, X0
	787 Move V1, [X31+56]
	788 Subtract S0, S8, S0
	789 NotImplemented "Instruction FDIV not yet implemented."
	790 NotImplemented "Instruction FABS not yet implemented."
	791 Move W8, [X20+44]
	792 And W9, W8, 0xFFFFFFFE
	793 NotImplemented "Instruction CMP not yet implemented."
	794 Move X0, X31
	795 Call ReflectionMethodsCache.get_Singleton
	796 Compare X0, 0
	797 JumpIfEqual {753}
	798 Move X8, [X0+16]
	799 Compare X8, 0
	800 JumpIfEqual {843}
	801 Move X0, X31
	802 Call ReflectionMethodsCache.get_Singleton
	803 Compare X0, 0
	804 JumpIfEqual {753}
	805 Move X22, [X0+16]
	806 Move W0, [X20+48]
	807 Move X1, X31
	808 Call LayerMask.op_Implicit, X0
	809 Compare X22, 0
	810 JumpIfEqual {753}
	811 Move V1, [X31+36]
	812 Move V0, [X31+40]
	813 Move W3, W0
	814 Move X8, [X22+24]
	815 Move X0, [X22+64]
	816 Move [X31+128], S1
	817 Move [X31+136], S0
	818 Move V1, [X31+44]
	819 Move V0, [X31+48]
	820 Add X1, X31, 128
	821 Add X2, X31, 80
	822 Move [X31+136], S1
	823 Move [X31+144], S0
	824 Move V1, [X31+52]
	825 Move V0, [X31+56]
	826 Move [X31+144], S1
	827 Move [X31+152], S0
	828 Move X4, [X22+40]
	829 Move V0, V11
	830 NotImplemented "Instruction BLR not yet implemented."
	831 Move TEMP, X0
	832 And TEMP, TEMP, 1
	833 Compare TEMP, 1
	834 JumpIfNotEqual {843}
	835 Add X0, X31, 80
	836 Move X1, X31
	837 Call RaycastHit.get_distance, X0
	838 Move [X31+68], S0
	839 Move TEMP, 0x80800000
	840 Not TEMP
	841 Move W9, TEMP
	842 Move [X31+68], W9
	843 Move TEMP, 0x80800000
	844 Not TEMP
	845 Move W8, TEMP
	846 Move [X31+68], W8
	847 Move W8, [X20+44]
	848 Or W8, W8, 2
	849 NotImplemented "Instruction CMP not yet implemented."
	850 Move X0, X31
	851 Call ReflectionMethodsCache.get_Singleton
	852 Compare X0, 0
	853 JumpIfEqual {753}
	854 Move X8, [X0+40]
	855 Compare X8, 0
	856 JumpIfEqual {365}
	857 Move X0, X31
	858 Call ReflectionMethodsCache.get_Singleton
	859 Compare X0, 0
	860 JumpIfEqual {753}
	861 Move X22, [X0+48]
	862 Move W0, [X20+48]
	863 Move X1, X31
	864 Call LayerMask.op_Implicit, X0
	865 Compare X22, 0
	866 JumpIfEqual {753}
	867 Move V1, [X31+36]
	868 Move V0, [X31+40]
	869 Move W2, W0
	870 Move X8, [X22+24]
	871 Move X0, [X22+64]
	872 Move [X31+128], S1
	873 Move [X31+136], S0
	874 Move V1, [X31+44]
	875 Move V0, [X31+48]
	876 Add X1, X31, 128
	877 Move [X31+136], S1
	878 Move [X31+144], S0
	879 Move V1, [X31+52]
	880 Move V0, [X31+56]
	881 Move [X31+144], S1
	882 Move [X31+152], S0
	883 Move X3, [X22+40]
	884 Move V0, V11
	885 NotImplemented "Instruction BLR not yet implemented."
	886 Compare X0, 0
	887 JumpIfEqual {753}
	888 Move X8, [X0+24]
	889 Compare X8, 0
	890 JumpIfEqual {365}
	891 Compare W8, 0
	892 JumpIfEqual {897}
	893 Add X0, X0, 32
	894 Move X1, X31
	895 Call RaycastHit2D.get_distance, X0
	896 Move [X31+68], S0
	897 Call 0x1C17F28

Method: UnityEngine.Camera get_eventCamera()

Disassembly:
	0x03CE05FC MOV X19, X0
	0x03CE0600 TBNZ X8, 0x0, 0x3CE0624
	0x03CE0604 ADRP X0, 0x479000
	0x03CE0608 LDR X0, [X0 + 0x118]
	0x03CE060C BL 0x1C16CF4
	0x03CE0610 ADRP X0, 0x413000
	0x03CE0614 LDR X0, [X0 + 0x598]
	0x03CE0618 BL 0x1C16CF4
	0x03CE061C MOVZ W8, 0x1
	0x03CE0620 STRB W8, [X20 + 0x4D5]
	0x03CE0624 MOV X0, X19
	0x03CE0628 BL 0x3CDFE9C
	0x03CE062C LDR X8, [X21]
	0x03CE0630 MOV X20, X0
	0x03CE0634 LDR W9, [X8 + 0xE0]
	0x03CE0638 CBNZ W9, 0x3CE0644
	0x03CE063C MOV X0, X8
	0x03CE0640 BL 0x1C16DFC
	0x03CE0644 MOV X0, X20
	0x03CE0648 MOV X1, X31
	0x03CE064C MOV X2, X31
	0x03CE0650 BL 0x3C3883C
	0x03CE0654 TBZ X0, 0x0, 0x3CE070C
	0x03CE0658 LDR X8, [X19]
	0x03CE065C MOV X0, X19
	0x03CE0660 LDR X9, [X8 + 0x338]
	0x03CE0664 LDR X1, [X8 + 0x340]
	0x03CE0668 BLR X9
	0x03CE066C LDR X8, [X21]
	0x03CE0670 MOV X20, X0
	0x03CE0674 LDR W9, [X8 + 0xE0]
	0x03CE0678 CBNZ W9, 0x3CE0684
	0x03CE067C MOV X0, X8
	0x03CE0680 BL 0x1C16DFC
	0x03CE0684 MOV X0, X20
	0x03CE0688 MOV X1, X31
	0x03CE068C MOV X2, X31
	0x03CE0690 BL 0x3C354F8
	0x03CE0694 TBZ X0, 0x0, 0x3CE0728
	0x03CE0698 LDR X8, [X19]
	0x03CE069C MOV X0, X19
	0x03CE06A0 LDR X9, [X8 + 0x338]
	0x03CE06A4 LDR X1, [X8 + 0x340]
	0x03CE06A8 BLR X9
	0x03CE06AC CBZ X0, 0x3CE0758
	0x03CE06B0 MOV X1, X31
	0x03CE06B4 BL 0x3C14A08
	0x03CE06B8 LDR X8, [X21]
	0x03CE06BC MOV X20, X0
	0x03CE06C0 LDR W9, [X8 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x708000
	005 Move W8, [X20+1209]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x414000
	012 Move X0, [X0+1432]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+1209], W8
	016 Move X0, X19
	017 Call GraphicRaycaster.get_canvas, X0
	018 Compare X0, 0
	019 JumpIfEqual {63}
	020 Move X1, X31
	021 Move X19, X0
	022 Call Canvas.get_renderMode, X0
	023 Compare W0, 0
	024 JumpIfEqual {58}
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, X19
	027 Move X1, X31
	028 Call Canvas.get_worldCamera, X0
	029 Move X8, 0x414000
	030 Move X8, [X8+1432]
	031 Move X20, X0
	032 Move X8, [X8]
	033 Move W9, [X8+224]
	034 Compare W9, 0
	035 JumpIfNotEqual {38}
	036 Move X0, X8
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Equality, X0, X1
	042 Move W8, W0
	043 Move X0, X31
	044 Move TEMP, X8
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {59}
	048 Move X0, X19
	049 Move X1, X31
	050 Call Canvas.get_worldCamera, X0
	051 Compare X0, 0
	052 JumpIfNotEqual {59}
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X30, [X31+32]
	056 Call Camera.get_main
	057 Return X0
	058 Move X0, X31
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Return X0
	063 Call 0x1C17F20

Method: System.Void Raycast(UnityEngine.Canvas canvas, UnityEngine.Camera eventCamera, UnityEngine.Vector2 pointerPosition, System.Collections.Generic.IList`1<UnityEngine.UI.Graphic> foundGraphics, System.Collections.Generic.List`1<UnityEngine.UI.Graphic> results)

Disassembly:
	0x03CE0094 LDR X2, [X8 + 0x2F8]
	0x03CE0098 LDR X1, [X8 + 0x300]
	0x03CE009C LDR X30, [X31], #0x30
	0x03CE00A0 BR X2
	0x03CE00A4 LDP X20, X19, [X31 + 0x20]
	0x03CE00A8 LDP X22, X21, [X31 + 0x10]
	0x03CE00AC LDR X30, [X31], #0x30
	0x03CE00B0 RET
	0x03CE00B4 LDR W0, [X0 + 0xF0]
	0x03CE00B8 RET
	0x03CE00BC STR X30, [X31 - 0x30]!
	0x03CE00C0 STP X22, X21, [X31 + 0x10]
	0x03CE00C4 STP X20, X19, [X31 + 0x20]
	0x03CE00C8 ADRP X22, 0x707000
	0x03CE00CC ADRP X21, 0x482000
	0x03CE00D0 LDRB W8, [X22 + 0x4CE]
	0x03CE00D4 LDR X21, [X21 + 0x598]
	0x03CE00D8 MOV W20, W1
	0x03CE00DC MOV X19, X0
	0x03CE00E0 TBNZ X8, 0x0, 0x3CE00F8
	0x03CE00E4 ADRP X0, 0x482000
	0x03CE00E8 LDR X0, [X0 + 0x598]
	0x03CE00EC BL 0x1C16CF4
	0x03CE00F0 MOVZ W8, 0x1
	0x03CE00F4 STRB W8, [X22 + 0x4CE]
	0x03CE00F8 LDR X2, [X21]
	0x03CE00FC ADD X0, X19, 0xF0
	0x03CE0100 MOV W1, W20
	0x03CE0104 BL 0x22543F8
	0x03CE0108 TBZ X0, 0x0, 0x3CE0124
	0x03CE010C LDR X8, [X19]
	0x03CE0110 MOV X0, X19
	0x03CE0114 LDR X9, [X8 + 0x2F8]
	0x03CE0118 LDR X1, [X8 + 0x300]
	0x03CE011C BLR X9
	0x03CE0120 STR W31, [X19 + 0xFC]
	0x03CE0124 LDP X20, X19, [X31 + 0x20]
	0x03CE0128 LDP X22, X21, [X31 + 0x10]
	0x03CE012C LDR X30, [X31], #0x30
	0x03CE0130 RET
	0x03CE0134 LDR V0, [X0 + 0xF4]
	0x03CE0138 RET
	0x03CE013C STR D8, [X31 - 0x30]!
	0x03CE0140 STP X30, X21, [X31 + 0x10]
	0x03CE0144 STP X20, X19, [X31 + 0x20]
	0x03CE0148 ADRP X21, 0x707000
	0x03CE014C ADRP X20, 0x482000
	0x03CE0150 LDRB W8, [X21 + 0x4CF]
	0x03CE0154 LDR X20, [X20 + 0x5A0]
	0x03CE0158 MOV V8.16B, V0.16B
	0x03CE015C MOV X19, X0
	0x03CE0160 TBNZ X8, 0x0, 0x3CE0178
	0x03CE0164 ADRP X0, 0x482000
	0x03CE0168 LDR X0, [X0 + 0x5A0]
	0x03CE016C BL 0x1C16CF4
	0x03CE0170 MOVZ W8, 0x1
	0x03CE0174 STRB W8, [X21 + 0x4CF]
	0x03CE0178 LDR X1, [X20]
	0x03CE017C FMOV S0, 1
	0x03CE0180 FMIN S0, S8, S0
	0x03CE0184 FCMP S8, 0x0
	0x03CE0188 FMOV S1, W31
	0x03CE018C ADD X0, X19, 0xF4
	0x03CE0190 FCSEL S0, S0, S1, PL
	0x03CE0194 BL 0x2254520
	0x03CE0198 TBZ X0, 0x0, 0x3CE01BC
	0x03CE019C LDR X8, [X19]
	0x03CE01A0 MOV X0, X19
	0x03CE01A4 LDP X20, X19, [X31 + 0x20]
	0x03CE01A8 LDP X30, X21, [X31 + 0x10]
	0x03CE01AC LDR X2, [X8 + 0x2F8]
	0x03CE01B0 LDR X1, [X8 + 0x300]
	0x03CE01B4 LDR V8, [X31], #0x30
	0x03CE01B8 BR X2
	0x03CE01BC LDP X20, X19, [X31 + 0x20]
	0x03CE01C0 LDP X30, X21, [X31 + 0x10]
	0x03CE01C4 LDR V8, [X31], #0x30
	0x03CE01C8 RET
	0x03CE01CC LDRB W0, [X0 + 0xF8]
	0x03CE01D0 RET
	0x03CE01D4 STR X30, [X31 - 0x30]!
	0x03CE01D8 STP X22, X21, [X31 + 0x10]
	0x03CE01DC STP X20, X19, [X31 + 0x20]
	0x03CE01E0 ADRP X22, 0x707000
	0x03CE01E4 ADRP X21, 0x482000
	0x03CE01E8 LDRB W8, [X22 + 0x4D0]
	0x03CE01EC LDR X21, [X21 + 0x590]
	0x03CE01F0 MOV W20, W1
	0x03CE01F4 MOV X19, X0
	0x03CE01F8 TBNZ X8, 0x0, 0x3CE0210
	0x03CE01FC ADRP X0, 0x482000
	0x03CE0200 LDR X0, [X0 + 0x590]
	0x03CE0204 BL 0x1C16CF4
	0x03CE0208 MOVZ W8, 0x1
	0x03CE020C STRB W8, [X22 + 0x4D0]
	0x03CE0210 LDR X2, [X21]
	0x03CE0214 ADD X0, X19, 0xF8
	0x03CE0218 AND W1, W20, 0x1
	0x03CE021C BL 0x22541E0
	0x03CE0220 TBZ X0, 0x0, 0x3CE0244
	0x03CE0224 LDR X8, [X19]
	0x03CE0228 MOV X0, X19
	0x03CE022C LDP X20, X19, [X31 + 0x20]
	0x03CE0230 LDP X22, X21, [X31 + 0x10]
	0x03CE0234 LDR X2, [X8 + 0x2F8]
	0x03CE0238 LDR X1, [X8 + 0x300]
	0x03CE023C LDR X30, [X31], #0x30
	0x03CE0240 BR X2
	0x03CE0244 LDP X20, X19, [X31 + 0x20]
	0x03CE0248 LDP X22, X21, [X31 + 0x10]
	0x03CE024C LDR X30, [X31], #0x30
	0x03CE0250 RET
	0x03CE0254 LDR W0, [X0 + 0xFC]
	0x03CE0258 RET
	0x03CE025C STR X30, [X31 - 0x30]!
	0x03CE0260 STP X22, X21, [X31 + 0x10]
	0x03CE0264 STP X20, X19, [X31 + 0x20]
	0x03CE0268 ADRP X22, 0x707000
	0x03CE026C ADRP X21, 0x482000
	0x03CE0270 LDRB W8, [X22 + 0x4D1]
	0x03CE0274 LDR X21, [X21 + 0x5A8]
	0x03CE0278 MOV W20, W1
	0x03CE027C MOV X19, X0
	0x03CE0280 TBNZ X8, 0x0, 0x3CE0298
	0x03CE0284 ADRP X0, 0x482000
	0x03CE0288 LDR X0, [X0 + 0x5A8]
	0x03CE028C BL 0x1C16CF4
	0x03CE0290 MOVZ W8, 0x1
	0x03CE0294 STRB W8, [X22 + 0x4D1]
	0x03CE0298 LDR X2, [X21]
	0x03CE029C ADD X0, X19, 0xFC
	0x03CE02A0 MOV W1, W20
	0x03CE02A4 BL 0x2254390
	0x03CE02A8 TBZ X0, 0x0, 0x3CE02CC
	0x03CE02AC LDR X8, [X19]
	0x03CE02B0 MOV X0, X19
	0x03CE02B4 LDP X20, X19, [X31 + 0x20]
	0x03CE02B8 LDP X22, X21, [X31 + 0x10]
	0x03CE02BC LDR X2, [X8 + 0x2F8]
	0x03CE02C0 LDR X1, [X8 + 0x300]
	0x03CE02C4 LDR X30, [X31], #0x30
	0x03CE02C8 BR X2
	0x03CE02CC LDP X20, X19, [X31 + 0x20]
	0x03CE02D0 LDP X22, X21, [X31 + 0x10]
	0x03CE02D4 LDR X30, [X31], #0x30
	0x03CE02D8 RET
	0x03CE02DC LDR V0, [X0 + 0x100]
	0x03CE02E0 FMOV S1, 1
	0x03CE02E4 FSUB S0, S1, S0
	0x03CE02E8 RET
	0x03CE02EC FMOV S1, 1
	0x03CE02F0 FSUB S0, S1, S0
	0x03CE02F4 B 0x3CE02F8
	0x03CE02F8 STR D8, [X31 - 0x30]!
	0x03CE02FC STP X30, X21, [X31 + 0x10]
	0x03CE0300 STP X20, X19, [X31 + 0x20]
	0x03CE0304 ADRP X21, 0x707000
	0x03CE0308 ADRP X20, 0x413000
	0x03CE030C LDRB W8, [X21 + 0x4D2]
	0x03CE0310 LDR X20, [X20 + 0x598]
	0x03CE0314 MOV V8.16B, V0.16B
	0x03CE0318 MOV X19, X0
	0x03CE031C TBNZ X8, 0x0, 0x3CE0340
	0x03CE0320 ADRP X0, 0x473000
	0x03CE0324 LDR X0, [X0 + 0x90]
	0x03CE0328 BL 0x1C16CF4
	0x03CE032C ADRP X0, 0x413000
	0x03CE0330 LDR X0, [X0 + 0x598]
	0x03CE0334 BL 0x1C16CF4
	0x03CE0338 MOVZ W8, 0x1
	0x03CE033C STRB W8, [X21 + 0x4D2]
	0x03CE0340 LDR X0, [X20]
	0x03CE0344 LDR X20, [X19 + 0xD8]
	0x03CE0348 LDR W8, [X0 + 0xE0]
	0x03CE034C CBNZ W8, 0x3CE0354
	0x03CE0350 BL 0x1C16DFC
	0x03CE0354 MOV X0, X20
	0x03CE0358 MOV X1, X31
	0x03CE035C MOV X2, X31
	0x03CE0360 BL 0x3C354F8
	0x03CE0364 TBZ X0, 0x0, 0x3CE03D8
	0x03CE0368 LDR X0, [X19 + 0xD8]
	0x03CE036C CBZ X0, 0x3CE03EC
	0x03CE0370 MOV X1, X31
	0x03CE0374 BL 0x3C41990
	0x03CE0378 CBZ X0, 0x3CE03EC
	0x03CE037C MOV X1, X31
	0x03CE0380 BL 0x3C1B334
	0x03CE0384 ADRP X8, 0x473000
	0x03CE0388 LDR X8, [X8 + 0x90]
	0x03CE038C MOV W20, W0
	0x03CE0390 LDR X8, [X8]
	0x03CE0394 LDR W9, [X8 + 0xE0]
	0x03CE0398 CBNZ W9, 0x3CE03A4
	0x03CE039C MOV X0, X8
	0x03CE03A0 BL 0x1C16DFC
	0x03CE03A4 MOV W0, W20
	0x03CE03A8 MOV X1, X31
	0x03CE03AC BL 0x3C61CEC
	0x03CE03B0 TBNZ X0, 0x0, 0x3CE03F0
	0x03CE03B4 LDR X0, [X19 + 0xD8]
	0x03CE03B8 CBZ X0, 0x3CE03EC
	0x03CE03BC MOV X1, X31
	0x03CE03C0 BL 0x3C41990
	0x03CE03C4 CBZ X0, 0x3CE03EC
	0x03CE03C8 LDR X8, [X0]
	0x03CE03CC LDP X9, X1, [X8 + 0x1E8]
	0x03CE03D0 BLR X9
	0x03CE03D4 TBZ X0, 0x0, 0x3CE03F0
	0x03CE03D8 STR S8, [X19 + 0x100]
	0x03CE03DC LDP X20, X19, [X31 + 0x20]
	0x03CE03E0 LDP X30, X21, [X31 + 0x10]
	0x03CE03E4 LDR V8, [X31], #0x30
	0x03CE03E8 RET
	0x03CE03EC BL 0x1C16F20
	0x03CE03F0 ADRP X0, 0x413000
	0x03CE03F4 LDR X0, [X0 + 0x5B0]
	0x03CE03F8 BL 0x1C16D08
	0x03CE03FC BL 0x1C16F10
	0x03CE0400 MOV X19, X0
	0x03CE0404 ADRP X0, 0x482000
	0x03CE0408 LDR X0, [X0 + 0x5B0]
	0x03CE040C BL 0x1C16D08
	0x03CE0410 MOV X1, X0
	0x03CE0414 MOV X0, X19
	0x03CE0418 MOV X2, X31
	0x03CE041C BL 0x337DF1C
	0x03CE0420 ADRP X0, 0x482000
	0x03CE0424 LDR X0, [X0 + 0x5B8]
	0x03CE0428 BL 0x1C16D08
	0x03CE042C MOV X1, X0
	0x03CE0430 MOV X0, X19
	0x03CE0434 BL 0x1C16DEC
	0x03CE0438 LDR V0, [X0 + 0x100]
	0x03CE043C RET
	0x03CE0440 LDRB W0, [X0 + 0x105]
	0x03CE0444 RET
	0x03CE0448 STR X30, [X31 - 0x30]!
	0x03CE044C STP X22, X21, [X31 + 0x10]
	0x03CE0450 STP X20, X19, [X31 + 0x20]
	0x03CE0454 ADRP X22, 0x707000
	0x03CE0458 ADRP X21, 0x482000
	0x03CE045C LDRB W8, [X22 + 0x4D3]
	0x03CE0460 LDR X21, [X21 + 0x590]
	0x03CE0464 MOV W20, W1
	0x03CE0468 MOV X19, X0
	0x03CE046C TBNZ X8, 0x0, 0x3CE0484
	0x03CE0470 ADRP X0, 0x482000
	0x03CE0474 LDR X0, [X0 + 0x590]
	0x03CE0478 BL 0x1C16CF4
	0x03CE047C MOVZ W8, 0x1
	0x03CE0480 STRB W8, [X22 + 0x4D3]
	0x03CE0484 LDR X2, [X21]
	0x03CE0488 ADD X0, X19, 0x105
	0x03CE048C AND W1, W20, 0x1
	0x03CE0490 BL 0x22541E0
	0x03CE0494 TBZ X0, 0x0, 0x3CE04B8
	0x03CE0498 LDR X8, [X19]
	0x03CE049C MOV X0, X19
	0x03CE04A0 LDP X20, X19, [X31 + 0x20]
	0x03CE04A4 LDP X22, X21, [X31 + 0x10]
	0x03CE04A8 LDR X2, [X8 + 0x2F8]
	0x03CE04AC LDR X1, [X8 + 0x300]
	0x03CE04B0 LDR X30, [X31], #0x30
	0x03CE04B4 BR X2
	0x03CE04B8 LDP X20, X19, [X31 + 0x20]
	0x03CE04BC LDP X22, X21, [X31 + 0x10]
	0x03CE04C0 LDR X30, [X31], #0x30
	0x03CE04C4 RET
	0x03CE04C8 STP X30, X19, [X31 - 0x10]!
	0x03CE04CC ADRP X9, 0xFFFFFFFFFCE0E000
	0x03CE04D0 LDR V0, [X9 + 0x3E8]
	0x03CE04D4 MOVZ X9, 0x4
	0x03CE04D8 MOVZ W8, 0x1
	0x03CE04DC MOVK X9, 0x3F800000
	0x03CE04E0 MOV X1, X31
	0x03CE04E4 MOV X19, X0
	0x03CE04E8 STRB W8, [X0 + 0xED]
	0x03CE04EC STR X9, [X0 + 0xF0]
	0x03CE04F0 STRB W8, [X0 + 0xF8]
	0x03CE04F4 STR D0, [X0 + 0x108]
	0x03CE04F8 BL 0x3E37FD0
	0x03CE04FC STRB W31, [X19 + 0xA0]
	0x03CE0500 LDP X30, X19, [X31], #0x10
	0x03CE0504 RET
	0x03CE0508 STR X30, [X31 - 0x20]!
	0x03CE050C STP X20, X19, [X31 + 0x10]
	0x03CE0510 ADRP X19, 0x707000
	0x03CE0514 ADRP X20, 0x482000
	0x03CE0518 LDRB W8, [X19 + 0x4D4]
	0x03CE051C LDR X20, [X20 + 0x580]
	0x03CE0520 TBNZ X8, 0x0, 0x3CE0544
	0x03CE0524 ADRP X0, 0x482000
	0x03CE0528 LDR X0, [X0 + 0x580]
	0x03CE052C BL 0x1C16CF4
	0x03CE0530 ADRP X0, 0x413000
	0x03CE0534 LDR X0, [X0 + 0x598]
	0x03CE0538 BL 0x1C16CF4
	0x03CE053C MOVZ W8, 0x1
	0x03CE0540 STRB W8, [X19 + 0x4D4]
	0x03CE0544 LDR X0, [X20]
	0x03CE0548 ADRP X19, 0x413000
	0x03CE054C LDR W8, [X0 + 0xE0]
	0x03CE0550 LDR X19, [X19 + 0x598]
	0x03CE0554 CBNZ W8, 0x3CE0560
	0x03CE0558 BL 0x1C16DFC
	0x03CE055C LDR X0, [X20]
	0x03CE0560 LDR X8, [X19]
	0x03CE0564 LDR X9, [X0 + 0xB8]
	0x03CE0568 LDR W10, [X8 + 0xE0]
	0x03CE056C LDR X19, [X9]
	0x03CE0570 CBNZ W10, 0x3CE057C
	0x03CE0574 MOV X0, X8
	0x03CE0578 BL 0x1C16DFC
	0x03CE057C MOV X0, X19
	0x03CE0580 MOV X1, X31
	0x03CE0584 MOV X2, X31
	0x03CE0588 BL 0x3C3883C
	0x03CE058C TBZ X0, 0x0, 0x3CE05BC
	0x03CE0590 MOV X0, X31
	0x03CE0594 BL 0x3E24F54
	0x03CE0598 LDR X8, [X20]
	0x03CE059C MOV X19, X0
	0x03CE05A0 LDR W9, [X8 + 0xE0]
	0x03CE05A4 CBNZ W9, 0x3CE05B4
	0x03CE05A8 MOV X0, X8
	0x03CE05AC BL 0x1C16DFC
	0x03CE05B0 LDR X8, [X20]
	0x03CE05B4 LDR X8, [X8 + 0xB8]
	0x03CE05B8 STR X19, [X8]
	0x03CE05BC LDR X0, [X20]
	0x03CE05C0 LDR W8, [X0 + 0xE0]
	0x03CE05C4 CBNZ W8, 0x3CE05D0
	0x03CE05C8 BL 0x1C16DFC
	0x03CE05CC LDR X0, [X20]
	0x03CE05D0 LDR X8, [X0 + 0xB8]
	0x03CE05D4 LDP X20, X19, [X31 + 0x10]
	0x03CE05D8 LDR X0, [X8]
	0x03CE05DC LDR X30, [X31], #0x20
	0x03CE05E0 RET
	0x03CE05E4 STP X30, X21, [X31 - 0x20]!
	0x03CE05E8 STP X20, X19, [X31 + 0x10]
	0x03CE05EC ADRP X20, 0x707000
	0x03CE05F0 ADRP X21, 0x413000
	0x03CE05F4 LDRB W8, [X20 + 0x4D5]
	0x03CE05F8 LDR X21, [X21 + 0x598]

ISIL:
	001 Move [X31-144], D13
	002 Move [X31-136], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X29
	008 Move [X31+56], X30
	009 Move [X31+64], X28
	010 Move [X31+72], X27
	011 Move [X31+80], X26
	012 Move [X31+88], X25
	013 Move [X31+96], X24
	014 Move [X31+104], X23
	015 Move [X31+112], X22
	016 Move [X31+120], X21
	017 Move [X31+128], X20
	018 Move [X31+136], X19
	019 Move X22, 0x708000
	020 Move W8, [X22+1210]
	021 Move X19, X3
	022 Move X20, X2
	023 Move V8, V1
	024 Move V9, V0
	025 Move X21, X1
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {71}
	030 Move X0, 0x483000
	031 Move X0, [X0+1296]
	032 Call 0x1C17CF4
	033 Move X0, 0x483000
	034 Move X0, [X0+1264]
	035 Call 0x1C17CF4
	036 Move X0, 0x46A000
	037 Move X0, [X0+1424]
	038 Call 0x1C17CF4
	039 Move X0, 0x46A000
	040 Move X0, [X0+1432]
	041 Call 0x1C17CF4
	042 Move X0, 0x483000
	043 Move X0, [X0+1304]
	044 Call 0x1C17CF4
	045 Move X0, 0x483000
	046 Move X0, [X0+1272]
	047 Call 0x1C17CF4
	048 Move X0, 0x483000
	049 Move X0, [X0+1312]
	050 Call 0x1C17CF4
	051 Move X0, 0x483000
	052 Move X0, [X0+1280]
	053 Call 0x1C17CF4
	054 Move X0, 0x483000
	055 Move X0, [X0+1288]
	056 Call 0x1C17CF4
	057 Move X0, 0x414000
	058 Move X0, [X0+1432]
	059 Call 0x1C17CF4
	060 Move X0, 0x46A000
	061 Move X0, [X0+1720]
	062 Call 0x1C17CF4
	063 Move X0, 0x483000
	064 Move X0, [X0+1320]
	065 Call 0x1C17CF4
	066 Move X0, 0x483000
	067 Move X0, [X0+1328]
	068 Call 0x1C17CF4
	069 Move W8, 1
	070 Move [X22+1210], W8
	071 Compare X20, 0
	072 JumpIfEqual {404}
	073 Move X10, 0x46A000
	074 Move X8, [X20]
	075 Move X10, [X10+1424]
	076 NotImplemented "Instruction LDRH not yet implemented."
	077 Move X1, [X10]
	078 Compare X9, 0
	079 JumpIfEqual {86}
	080 Move X10, [X8+176]
	081 Add X10, X10, 8
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Subtract X9, X9, 1
	085 Add X10, X10, 16
	086 Move X0, X20
	087 Move W2, W31
	088 Call 0x1C5D788
	089 NotImplemented "Instruction LDRSW not yet implemented."
	090 Add X8, X8, X9
	091 Add X0, X8, 312
	092 Move X8, [X0]
	093 Move X1, [X0+8]
	094 Move X26, 0x483000
	095 Move X27, 0x483000
	096 Move X26, [X26+1264]
	097 Move X27, [X27+1304]
	098 Move X0, X20
	099 NotImplemented "Instruction BLR not yet implemented."
	100 NotImplemented "Instruction CMP not yet implemented."
	101 Move X28, 0x46A000
	102 Move X29, 0x46A000
	103 Move X28, [X28+1432]
	104 Move X29, [X29+1720]
	105 Move W22, W0
	106 Move W23, W31
	107 Move X8, [X20]
	108 Move X1, [X28]
	109 NotImplemented "Instruction LDRH not yet implemented."
	110 Compare X9, 0
	111 JumpIfEqual {118}
	112 Move X10, [X8+176]
	113 Add X10, X10, 8
	114 NotImplemented "Instruction LDUR not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Subtract X9, X9, 1
	117 Add X10, X10, 16
	118 Move X0, X20
	119 Move W2, W31
	120 Call 0x1C5D788
	121 NotImplemented "Instruction LDRSW not yet implemented."
	122 Add X8, X8, X9
	123 Add X0, X8, 312
	124 Move X8, [X0]
	125 Move X2, [X0+8]
	126 Move X0, X20
	127 Move W1, W23
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Compare X0, 0
	130 JumpIfEqual {404}
	131 Move X8, [X0]
	132 Move X24, X0
	133 Move X9, [X8+696]
	134 Move X1, [X8+704]
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Move TEMP, X0
	137 And TEMP, TEMP, 1
	138 Compare TEMP, 1
	139 JumpIfNotEqual {252}
	140 Move X0, X24
	141 Call Graphic.get_canvasRenderer, X0
	142 Compare X0, 0
	143 JumpIfEqual {404}
	144 Move X1, X31
	145 Call CanvasRenderer.get_cull, X0
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfEqual {252}
	150 Move X0, X24
	151 Call Graphic.get_depth, X0
	152 Add W31, W0, 1
	153 Move X0, X24
	154 Call Graphic.get_rectTransform, X0
	155 Move X8, [X29]
	156 Move S13, [X24+60]
	157 Move S11, [X24+64]
	158 Move S12, [X24+68]
	159 Move S10, [X24+72]
	160 Move X25, X0
	161 Move W9, [X8+224]
	162 Compare W9, 0
	163 JumpIfNotEqual {166}
	164 Move X0, X8
	165 Call 0x1C17DFC
	166 Move X0, X25
	167 Move V0, V9
	168 Move V1, V8
	169 Move X1, X21
	170 Move V2, V13
	171 Move V3, V11
	172 Move V4, V12
	173 Move V5, V10
	174 Move X2, X31
	175 Call RectTransformUtility.RectangleContainsScreenPoint, X0, X1, X2, X3
	176 Move TEMP, X0
	177 And TEMP, TEMP, 1
	178 Compare TEMP, 1
	179 JumpIfNotEqual {252}
	180 Move X8, 0x414000
	181 Move X8, [X8+1432]
	182 Move X0, [X8]
	183 Move W8, [X0+224]
	184 Compare W8, 0
	185 JumpIfNotEqual {187}
	186 Call 0x1C17DFC
	187 Move X0, X21
	188 Move X1, X31
	189 Move X2, X31
	190 Call Object.op_Inequality, X0, X1
	191 Move TEMP, X0
	192 And TEMP, TEMP, 1
	193 Compare TEMP, 1
	194 JumpIfNotEqual {211}
	195 Move X0, X24
	196 Call Graphic.get_rectTransform, X0
	197 Compare X0, 0
	198 JumpIfEqual {404}
	199 Move X1, X31
	200 Call Transform.get_position, X0
	201 Compare X21, 0
	202 JumpIfEqual {404}
	203 Move X0, X21
	204 Move X1, X31
	205 Call Camera.WorldToScreenPoint, X0, X1
	206 Move X0, X21
	207 Move X1, X31
	208 Move V10, V2
	209 Call Camera.get_farClipPlane, X0
	210 NotImplemented "Instruction FCMP not yet implemented."
	211 Move X8, [X24]
	212 Move X0, X24
	213 Move V0, V9
	214 Move V1, V8
	215 Move X9, [X8+1048]
	216 Move X2, [X8+1056]
	217 Move X1, X21
	218 NotImplemented "Instruction BLR not yet implemented."
	219 Move TEMP, X0
	220 And TEMP, TEMP, 1
	221 Compare TEMP, 1
	222 JumpIfNotEqual {252}
	223 Move X0, [X26]
	224 Move W8, [X0+224]
	225 Compare W8, 0
	226 JumpIfNotEqual {229}
	227 Call 0x1C17DFC
	228 Move X0, [X26]
	229 Move X8, [X0+184]
	230 Move X0, [X8]
	231 Compare X0, 0
	232 JumpIfEqual {404}
	233 Move W10, [X0+28]
	234 Move X8, [X0+16]
	235 Move X9, [X27]
	236 Add W10, W10, 1
	237 Move [X0+28], W10
	238 Compare X8, 0
	239 JumpIfEqual {404}
	240 NotImplemented "Instruction LDRSW not yet implemented."
	241 Move W11, [X8+24]
	242 NotImplemented "Instruction CMP not yet implemented."
	243 Add W9, W10, 1
	244 Add X8, X8, X10
	245 Move [X0+24], W9
	246 Move [X8+32], X24
	247 Move X8, [X9+32]
	248 Move X1, X24
	249 Move X8, [X8+192]
	250 Move X2, [X8+112]
	251 Call List`1<Object>.AddWithResize, X0, X1
	252 Add W23, W23, 1
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move X8, [X26]
	255 Move X23, 0x483000
	256 Move W9, [X8+224]
	257 Move X23, [X23+1328]
	258 Compare W9, 0
	259 JumpIfNotEqual {263}
	260 Move X0, X8
	261 Call 0x1C17DFC
	262 Move X8, [X26]
	263 Move X0, [X23]
	264 Move X8, [X8+184]
	265 Move W9, [X0+224]
	266 Move X20, [X8]
	267 Compare W9, 0
	268 JumpIfNotEqual {271}
	269 Call 0x1C17DFC
	270 Move X0, [X23]
	271 Move X8, [X0+184]
	272 Move X21, [X8+8]
	273 Compare X21, 0
	274 JumpIfNotEqual {296}
	275 Move W8, [X0+224]
	276 Compare W8, 0
	277 JumpIfNotEqual {280}
	278 Call 0x1C17DFC
	279 Move X0, [X23]
	280 Move X9, 0x483000
	281 Move X8, [X0+184]
	282 Move X9, [X9+1296]
	283 Move X22, [X8]
	284 Move X0, [X9]
	285 Call 0x1C17F10
	286 Move X8, 0x483000
	287 Move X8, [X8+1320]
	288 Move X1, X22
	289 Move X3, X31
	290 Move X21, X0
	291 Move X2, [X8]
	292 Call Comparison`1<Object>..ctor, X0, X1, X2
	293 Move X8, [X23]
	294 Move X8, [X8+184]
	295 Move [X8+8], X21
	296 Compare X20, 0
	297 JumpIfEqual {404}
	298 Move X8, 0x483000
	299 Move X8, [X8+1312]
	300 Move X0, X20
	301 Move X1, X21
	302 Move X2, [X8]
	303 Call List`1<Object>.Sort, X0, X1
	304 Move X0, [X26]
	305 Move W8, [X0+224]
	306 Compare W8, 0
	307 JumpIfNotEqual {310}
	308 Call 0x1C17DFC
	309 Move X0, [X26]
	310 Move X8, [X0+184]
	311 Move X8, [X8]
	312 Compare X8, 0
	313 JumpIfEqual {404}
	314 Move W8, [X8+24]
	315 Move X21, 0x483000
	316 Move X21, [X21+1288]
	317 Move W20, W31
	318 NotImplemented "Instruction BIC not yet implemented."
	319 Move W8, [X0+224]
	320 Compare W8, 0
	321 JumpIfNotEqual {324}
	322 Call 0x1C17DFC
	323 Move X0, [X26]
	324 Move X8, [X0+184]
	325 Move X0, [X8]
	326 Compare X0, 0
	327 JumpIfEqual {404}
	328 NotImplemented "Instruction CMP not yet implemented."
	329 Move X2, [X21]
	330 Move W1, W20
	331 Call List`1<Object>.get_Item, X0, X1
	332 Compare X19, 0
	333 JumpIfEqual {404}
	334 Move W10, [X19+28]
	335 Move X8, [X19+16]
	336 Move X9, [X27]
	337 Add W10, W10, 1
	338 Move [X19+28], W10
	339 Compare X8, 0
	340 JumpIfEqual {404}
	341 NotImplemented "Instruction LDRSW not yet implemented."
	342 Move W11, [X8+24]
	343 Move X1, X0
	344 NotImplemented "Instruction CMP not yet implemented."
	345 Add W9, W10, 1
	346 Add X8, X8, X10
	347 Move [X19+24], W9
	348 Move [X8+32], X1
	349 Move X8, [X9+32]
	350 Move X0, X19
	351 Move X8, [X8+192]
	352 Move X2, [X8+112]
	353 Call List`1<Object>.AddWithResize, X0, X1
	354 Move X0, [X26]
	355 Add W20, W20, 1
	356 Move W2, [X0+24]
	357 Move W8, [X0+28]
	358 Add W8, W8, 1
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Move [X0+24], W31
	361 Move [X0+28], W8
	362 Move X0, [X0+16]
	363 Move X20, [X31+128]
	364 Move X19, [X31+136]
	365 Move X22, [X31+112]
	366 Move X21, [X31+120]
	367 Move X24, [X31+96]
	368 Move X23, [X31+104]
	369 Move X26, [X31+80]
	370 Move X25, [X31+88]
	371 Move X28, [X31+64]
	372 Move X27, [X31+72]
	373 Move X29, [X31+48]
	374 Move X30, [X31+56]
	375 Move D9, [X31+32]
	376 Move D8, [X31+40]
	377 Move D11, [X31+16]
	378 Move D10, [X31+24]
	379 Move W1, W31
	380 Move X3, X31
	381 Move D13, [X31+144]
	382 Move D12, [X31+152]
	383 Call Array.Clear, X0, X1, X2
	384 Return 
	385 Move X20, [X31+128]
	386 Move X19, [X31+136]
	387 Move X22, [X31+112]
	388 Move X21, [X31+120]
	389 Move X24, [X31+96]
	390 Move X23, [X31+104]
	391 Move X26, [X31+80]
	392 Move X25, [X31+88]
	393 Move X28, [X31+64]
	394 Move X27, [X31+72]
	395 Move X29, [X31+48]
	396 Move X30, [X31+56]
	397 Move D9, [X31+32]
	398 Move D8, [X31+40]
	399 Move D11, [X31+16]
	400 Move D10, [X31+24]
	401 Move D13, [X31+144]
	402 Move D12, [X31+152]
	403 Return 
	404 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03CE06C4 CBNZ W9, 0x3CE06D0
	0x03CE06C8 MOV X0, X8
	0x03CE06CC BL 0x1C16DFC
	0x03CE06D0 MOV X0, X20
	0x03CE06D4 MOV X1, X31
	0x03CE06D8 MOV X2, X31
	0x03CE06DC BL 0x3C354F8
	0x03CE06E0 TBZ X0, 0x0, 0x3CE0728
	0x03CE06E4 LDR X8, [X19]
	0x03CE06E8 MOV X0, X19
	0x03CE06EC LDR X9, [X8 + 0x338]
	0x03CE06F0 LDR X1, [X8 + 0x340]
	0x03CE06F4 BLR X9
	0x03CE06F8 CBZ X0, 0x3CE0758
	0x03CE06FC LDP X20, X19, [X31 + 0x10]
	0x03CE0700 MOV X1, X31
	0x03CE0704 LDP X30, X21, [X31], #0x20
	0x03CE0708 B 0x3C14A08
	0x03CE070C MOV X0, X19
	0x03CE0710 BL 0x3CDFE9C
	0x03CE0714 CBZ X0, 0x3CE0758
	0x03CE0718 LDP X20, X19, [X31 + 0x10]
	0x03CE071C MOV X1, X31
	0x03CE0720 LDP X30, X21, [X31], #0x20
	0x03CE0724 B 0x3C41990
	0x03CE0728 ADRP X19, 0x479000
	0x03CE072C LDR X19, [X19 + 0x118]
	0x03CE0730 LDR X0, [X19]
	0x03CE0734 LDR W8, [X0 + 0xE0]
	0x03CE0738 CBNZ W8, 0x3CE0744
	0x03CE073C BL 0x1C16DFC
	0x03CE0740 LDR X0, [X19]
	0x03CE0744 LDR X8, [X0 + 0xB8]
	0x03CE0748 LDP X20, X19, [X31 + 0x10]
	0x03CE074C LDR X0, [X8 + 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x708000
	007 Move X22, 0x483000
	008 Move X19, 0x483000
	009 Move X20, 0x483000
	010 Move W8, [X21+1211]
	011 Move X22, [X22+1248]
	012 Move X19, [X19+1256]
	013 Move X20, [X20+1264]
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {29}
	018 Move X0, 0x483000
	019 Move X0, [X0+1264]
	020 Call 0x1C17CF4
	021 Move X0, 0x483000
	022 Move X0, [X0+1256]
	023 Call 0x1C17CF4
	024 Move X0, 0x483000
	025 Move X0, [X0+1248]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+1211], W8
	029 Move X0, [X22]
	030 Call 0x1C17F10
	031 Move X1, [X19]
	032 Move X19, X0
	033 Call List`1<Object>..ctor, X0
	034 Move X8, [X20]
	035 Move X22, [X31+16]
	036 Move X21, [X31+24]
	037 Move X8, [X8+184]
	038 Move [X8], X19
	039 Move X20, [X31+32]
	040 Move X19, [X31+40]
	041 Move X30, [X31+48]
	042 Return 

