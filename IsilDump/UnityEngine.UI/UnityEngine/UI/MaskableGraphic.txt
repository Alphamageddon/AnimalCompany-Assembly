Type: UnityEngine.UI.MaskableGraphic

Method: UnityEngine.UI.MaskableGraphic/CullStateChangedEvent get_onCullStateChanged()

Disassembly:
	0x03E382E8 BLR X8
	0x03E382EC LDR W8, [X20 + 0x18]

ISIL:
	001 Move X0, [X0+192]
	002 Return X0

Method: System.Void set_onCullStateChanged(UnityEngine.UI.MaskableGraphic/CullStateChangedEvent value)

Disassembly:
	0x03E382F0 ADD W21, W21, 0x1
	0x03E382F4 CMP W21, W8

ISIL:
	001 Move [X0+192], X1
	002 Return 

Method: System.Boolean get_maskable()

Disassembly:
	0x03E382F8 B.LT 0x3E381DC
	0x03E382FC LDR X0, [X24]

ISIL:
	001 Move W0, [X0+184]
	002 Return X0

Method: System.Void set_maskable(System.Boolean value)

Disassembly:
	0x03E38300 ADRP X19, 0x2E3000
	0x03E38304 LDR W8, [X0 + 0xE0]
	0x03E38308 LDR X19, [X19 + 0xA20]
	0x03E3830C CBNZ W8, 0x3E38314
	0x03E38310 BL 0x1C16DFC
	0x03E38314 LDR X1, [X19]
	0x03E38318 MOV X0, X20
	0x03E3831C LDP X20, X19, [X31 + 0x40]
	0x03E38320 LDP X22, X21, [X31 + 0x30]
	0x03E38324 LDP X24, X23, [X31 + 0x20]
	0x03E38328 LDP X26, X25, [X31 + 0x10]
	0x03E3832C LDP X30, X27, [X31], #0x50

ISIL:
	001 Move W9, [X0+184]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Return 
	005 Move X9, [X0]
	006 Move [X0+184], W8
	007 Move W8, 1
	008 Move [X0+161], W8
	009 Move X2, [X9+776]
	010 Move X1, [X9+784]
	011 CallNoReturn X2

Method: System.Boolean get_isMaskingGraphic()

Disassembly:
	0x03E38330 B 0x28F9A14
	0x03E38334 BL 0x1C16F20

ISIL:
	001 Move W0, [X0+185]
	002 Return X0

Method: System.Void set_isMaskingGraphic(System.Boolean value)

Disassembly:
	0x03E3774C MOV X1, X19
	0x03E37750 MOV X2, X31
	0x03E37754 LDR X0, [X8]
	0x03E37758 BL 0x3E252BC
	0x03E3775C LDR X0, [X19 + 0xC0]
	0x03E37760 CBZ X0, 0x3E377A0

ISIL:
	001 Move W9, [X0+185]
	002 And W8, W1, 1
	003 NotImplemented "Instruction CMP not yet implemented."
	004 Move [X0+185], W8
	005 Return 

Method: UnityEngine.Material GetModifiedMaterial(UnityEngine.Material baseMaterial)

Disassembly:
	0x03E38338 STP X30, X23, [X31 - 0x30]!
	0x03E3833C STP X22, X21, [X31 + 0x10]
	0x03E38340 STP X20, X19, [X31 + 0x20]
	0x03E38344 ADRP X21, 0x5B0000
	0x03E38348 ADRP X23, 0x2BB000
	0x03E3834C LDRB W8, [X21 + 0x77E]
	0x03E38350 LDR X23, [X23 + 0x598]
	0x03E38354 MOV X20, X1
	0x03E38358 MOV X19, X0
	0x03E3835C TBNZ X8, 0x0, 0x3E38374
	0x03E38360 ADRP X0, 0x2BB000
	0x03E38364 LDR X0, [X0 + 0x598]
	0x03E38368 BL 0x1C16CF4
	0x03E3836C MOVZ W8, 0x1
	0x03E38370 STRB W8, [X21 + 0x77E]
	0x03E38374 LDR X0, [X23]
	0x03E38378 LDR W8, [X0 + 0xE0]
	0x03E3837C CBNZ W8, 0x3E38384
	0x03E38380 BL 0x1C16DFC
	0x03E38384 MOV X0, X19
	0x03E38388 MOV X1, X31
	0x03E3838C MOV X2, X31
	0x03E38390 BL 0x3C3883C
	0x03E38394 TBNZ X0, 0x0, 0x3E383BC
	0x03E38398 LDR X0, [X23]
	0x03E3839C LDR W8, [X0 + 0xE0]
	0x03E383A0 CBNZ W8, 0x3E383A8
	0x03E383A4 BL 0x1C16DFC
	0x03E383A8 MOV X0, X20
	0x03E383AC MOV X1, X31
	0x03E383B0 MOV X2, X31
	0x03E383B4 BL 0x3C3883C
	0x03E383B8 TBZ X0, 0x0, 0x3E383D4
	0x03E383BC MOV W21, W31
	0x03E383C0 AND W0, W21, 0x1
	0x03E383C4 LDP X20, X19, [X31 + 0x20]
	0x03E383C8 LDP X22, X21, [X31 + 0x10]
	0x03E383CC LDP X30, X23, [X31], #0x30
	0x03E383D0 RET
	0x03E383D4 LDR X0, [X23]
	0x03E383D8 LDR W8, [X0 + 0xE0]
	0x03E383DC CBNZ W8, 0x3E383E4
	0x03E383E0 BL 0x1C16DFC
	0x03E383E4 MOV X0, X19
	0x03E383E8 MOV X1, X20
	0x03E383EC MOV X2, X31
	0x03E383F0 BL 0x3C3883C
	0x03E383F4 TBZ X0, 0x0, 0x3E38400
	0x03E383F8 MOVZ W21, 0x1
	0x03E383FC B 0x3E383C0
	0x03E38400 CBZ X20, 0x3E3848C
	0x03E38404 MOV X0, X20
	0x03E38408 MOV X1, X31
	0x03E3840C BL 0x3C3F49C
	0x03E38410 LDR X8, [X23]
	0x03E38414 MOV X21, X0
	0x03E38418 LDR W9, [X8 + 0xE0]
	0x03E3841C CBNZ W9, 0x3E38428
	0x03E38420 MOV X0, X8
	0x03E38424 BL 0x1C16DFC
	0x03E38428 MOV X0, X21
	0x03E3842C MOV X1, X31
	0x03E38430 MOV X2, X31
	0x03E38434 BL 0x3C354F8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B1000
	006 Move W8, [X21+1906]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x321000
	014 Move X0, [X0+1848]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+1906], W8
	018 Move W8, [X20+161]
	019 Compare W8, 0
	020 JumpIfEqual {35}
	021 Move W8, [X20+184]
	022 Compare W8, 0
	023 JumpIfEqual {36}
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_transform, X0
	027 Call MaskUtilities.FindRootSortOverrideCanvas, X0
	028 Move X21, X0
	029 Move X0, X20
	030 Move X1, X31
	031 Call Component.get_transform, X0
	032 Move X1, X21
	033 Call MaskUtilities.GetStencilDepth, X0, X1
	034 Move W21, W0
	035 Move W21, [X20+204]
	036 Move W21, W31
	037 Move [X20+204], W21
	038 Move [X20+161], W31
	039 NotImplemented "Instruction CMP not yet implemented."
	040 Move W8, [X20+185]
	041 Compare W8, 0
	042 JumpIfNotEqual {69}
	043 Move X8, 0x321000
	044 Move X8, [X8+1848]
	045 Move X0, [X8]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move TEMP, 0
	051 Not TEMP
	052 Move W8, TEMP
	053 NotImplemented "Instruction LSLV not yet implemented."
	054 NotImplemented "Instruction ORN not yet implemented."
	055 Move W3, 3
	056 Move W4, 15
	057 Move X0, X19
	058 Move W2, W31
	059 Move W5, W1
	060 Move W6, W31
	061 Move X7, X31
	062 Call StencilMaterial.Add, X0, X1, X2, X3, X4, X5, X6
	063 Move X8, [X20+168]
	064 Move X19, X0
	065 Move X1, X31
	066 Move X0, X8
	067 Call StencilMaterial.Remove, X0
	068 Move [X20+168], X19
	069 Move X0, X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move X30, [X31+32]
	073 Move X21, [X31+40]
	074 Return X0

Method: System.Void Cull(UnityEngine.Rect clipRect, System.Boolean validRect)

Disassembly:
	0x03E38438 MOV W21, W0
	0x03E3843C TBZ X0, 0x0, 0x3E383C0
	0x03E38440 MOV X0, X20
	0x03E38444 MOV X1, X31
	0x03E38448 BL 0x3C3F49C
	0x03E3844C LDR X8, [X23]
	0x03E38450 MOV X22, X0
	0x03E38454 LDR W9, [X8 + 0xE0]
	0x03E38458 CBNZ W9, 0x3E38464
	0x03E3845C MOV X0, X8
	0x03E38460 BL 0x1C16DFC
	0x03E38464 MOV X0, X22
	0x03E38468 MOV X1, X19
	0x03E3846C MOV X2, X31
	0x03E38470 BL 0x3C3883C
	0x03E38474 TBNZ X0, 0x0, 0x3E383C0
	0x03E38478 MOV X0, X20
	0x03E3847C MOV X1, X31
	0x03E38480 BL 0x3C3F49C
	0x03E38484 MOV X20, X0
	0x03E38488 CBNZ X0, 0x3E38404
	0x03E3848C BL 0x1C16F20
	0x03E38490 STP X29, X30, [X31 - 0x60]!
	0x03E38494 STP X28, X27, [X31 + 0x10]
	0x03E38498 STP X26, X25, [X31 + 0x20]
	0x03E3849C STP X24, X23, [X31 + 0x30]
	0x03E384A0 STP X22, X21, [X31 + 0x40]
	0x03E384A4 STP X20, X19, [X31 + 0x50]
	0x03E384A8 ADRP X20, 0x5B0000
	0x03E384AC LDRB W8, [X20 + 0x780]
	0x03E384B0 MOV X19, X1
	0x03E384B4 MOV X22, X0
	0x03E384B8 TBNZ X8, 0x0, 0x3E3856C
	0x03E384BC ADRP X0, 0x32A000
	0x03E384C0 LDR X0, [X0 + 0x2F8]
	0x03E384C4 BL 0x1C16CF4
	0x03E384C8 ADRP X0, 0x333000
	0x03E384CC LDR X0, [X0 + 0x248]
	0x03E384D0 BL 0x1C16CF4
	0x03E384D4 ADRP X0, 0x32A000
	0x03E384D8 LDR X0, [X0 + 0x300]
	0x03E384DC BL 0x1C16CF4
	0x03E384E0 ADRP X0, 0x333000
	0x03E384E4 LDR X0, [X0 + 0x250]
	0x03E384E8 BL 0x1C16CF4
	0x03E384EC ADRP X0, 0x32A000
	0x03E384F0 LDR X0, [X0 + 0x308]
	0x03E384F4 BL 0x1C16CF4
	0x03E384F8 ADRP X0, 0x333000
	0x03E384FC LDR X0, [X0 + 0x240]
	0x03E38500 BL 0x1C16CF4
	0x03E38504 ADRP X0, 0x321000

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move TEMP, X1
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {49}
	012 Move X0, X19
	013 Move V8, V3
	014 Move V10, V2
	015 Move V9, V1
	016 Move V11, V0
	017 Call MaskableGraphic.get_rootCanvasRect, X0
	018 Add S5, S11, S10
	019 Add S4, S9, S8
	020 Subtract S6, S11, S5
	021 NotImplemented "Instruction FCMP not yet implemented."
	022 Add S16, S2, S0
	023 NotImplemented "Instruction FCSEL not yet implemented."
	024 NotImplemented "Instruction FCSEL not yet implemented."
	025 NotImplemented "Instruction FCMP not yet implemented."
	026 Subtract S17, S0, S16
	027 NotImplemented "Instruction FCSEL not yet implemented."
	028 NotImplemented "Instruction FCMP not yet implemented."
	029 NotImplemented "Instruction FCSEL not yet implemented."
	030 Add S17, S3, S1
	031 NotImplemented "Instruction FCSEL not yet implemented."
	032 Subtract S0, S1, S17
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 NotImplemented "Instruction FCSEL not yet implemented."
	035 NotImplemented "Instruction FCSEL not yet implemented."
	036 Add S1, S0, S3
	037 NotImplemented "Instruction FCMP not yet implemented."
	038 Move W1, 1
	039 Add S1, S6, S7
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Add S1, S16, S2
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 Subtract S1, S9, S4
	044 NotImplemented "Instruction FCMP not yet implemented."
	045 NotImplemented "Instruction FCSEL not yet implemented."
	046 Add S1, S5, S1
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Move W1, 1
	050 Move X0, X19
	051 Move X30, [X31+32]
	052 Move X19, [X31+40]
	053 Move D9, [X31+16]
	054 Move D8, [X31+24]
	055 Move D11, [X31+48]
	056 Move D10, [X31+56]
	057 Call MaskableGraphic.UpdateCull, X0, X1
	058 Return 

Method: System.Void UpdateCull(System.Boolean cull)

Disassembly:
	0x03E386C0 MOV X1, X31
	0x03E386C4 BL 0x3C32E90
	0x03E386C8 LDR X2, [X27]
	0x03E386CC MOV X24, X0
	0x03E386D0 MOV X0, X21
	0x03E386D4 MOV W1, W22
	0x03E386D8 BL 0x301BCCC
	0x03E386DC CBZ X0, 0x3E387EC
	0x03E386E0 MOV X1, X31
	0x03E386E4 BL 0x3C32E90
	0x03E386E8 MOV X1, X0
	0x03E386EC MOV X0, X24
	0x03E386F0 BL 0x3E38338
	0x03E386F4 TBNZ X0, 0x0, 0x3E38718
	0x03E386F8 LDR X2, [X28]
	0x03E386FC MOV X0, X20
	0x03E38700 MOV W1, W23
	0x03E38704 BL 0x301BCCC
	0x03E38708 CBZ X0, 0x3E387EC
	0x03E3870C MOV X1, X31
	0x03E38710 BL 0x3E248A4
	0x03E38714 TBNZ X0, 0x0, 0x3E38784
	0x03E38718 SUBS W23, W23, 0x1
	0x03E3871C B.PL 0x3E386AC
	0x03E38720 LDR X2, [X27]
	0x03E38724 MOV X0, X21
	0x03E38728 MOV W1, W22
	0x03E3872C BL 0x301BCCC
	0x03E38730 LDR W10, [X19 + 0x1C]
	0x03E38734 LDR X8, [X19 + 0x10]
	0x03E38738 LDR X9, [X29]
	0x03E3873C ADD W10, W10, 0x1
	0x03E38740 STR W10, [X19 + 0x1C]
	0x03E38744 CBZ X8, 0x3E387EC
	0x03E38748 LDRSW X10, [X19 + 0x18]
	0x03E3874C LDR W11, [X8 + 0x18]
	0x03E38750 MOV X1, X0
	0x03E38754 CMP W10, W11
	0x03E38758 B.CS 0x3E38770
	0x03E3875C ADD W9, W10, 0x1
	0x03E38760 ADD X8, X8, X10, 0x3, LSL
	0x03E38764 STR W9, [X19 + 0x18]
	0x03E38768 STR X1, [X8 + 0x20]
	0x03E3876C B 0x3E38784
	0x03E38770 LDR X8, [X9 + 0x20]
	0x03E38774 MOV X0, X19
	0x03E38778 LDR X8, [X8 + 0xC0]
	0x03E3877C LDR X2, [X8 + 0x70]
	0x03E38780 BL 0x301BF90
	0x03E38784 SUBS W22, W22, 0x1
	0x03E38788 B.PL 0x3E38678
	0x03E3878C LDR X0, [X26]
	0x03E38790 ADRP X19, 0x333000
	0x03E38794 LDR W8, [X0 + 0xE0]
	0x03E38798 LDR X19, [X19 + 0x250]
	0x03E3879C CBNZ W8, 0x3E387A4
	0x03E387A0 BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B1000
	006 Move W8, [X21+1907]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x321000
	014 Move X0, [X0+1856]
	015 Call 0x1C17CF4
	016 Move X0, 0x334000
	017 Move X0, [X0+568]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1907], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call Graphic.get_canvasRenderer, X0
	024 Compare X0, 0
	025 JumpIfEqual {68}
	026 Move X1, X31
	027 Call CanvasRenderer.get_cull, X0
	028 And W8, W0, 1
	029 And W9, W20, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X0, X19
	032 Move X1, X31
	033 Call Graphic.get_canvasRenderer, X0
	034 Compare X0, 0
	035 JumpIfEqual {68}
	036 And W20, W20, 1
	037 Move W1, W20
	038 Move X2, X31
	039 Call CanvasRenderer.set_cull, X0, X1
	040 Move X8, 0x334000
	041 Move X8, [X8+568]
	042 Move X1, X19
	043 Move X2, X31
	044 Move X0, [X8]
	045 Call UISystemProfilerApi.AddMarker, X0, X1
	046 Move X0, [X19+192]
	047 Compare X0, 0
	048 JumpIfEqual {68}
	049 Move X8, 0x321000
	050 Move X8, [X8+1856]
	051 Move W1, W20
	052 Move X2, [X8]
	053 Call 0x2729B08, X0, X1
	054 Move X8, [X19]
	055 Move X0, X19
	056 Move X20, [X31+16]
	057 Move X19, [X31+24]
	058 Move X2, [X8+888]
	059 Move X1, [X8+896]
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 CallNoReturn X2
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return 
	068 Call 0x1C17F20

Method: System.Void SetClipRect(UnityEngine.Rect clipRect, System.Boolean validRect)

Disassembly:
	0x03E387A4 LDR X1, [X19]
	0x03E387A8 ADRP X19, 0x32A000
	0x03E387AC LDR X19, [X19 + 0x300]
	0x03E387B0 MOV X0, X21
	0x03E387B4 BL 0x28F9A14
	0x03E387B8 LDR X0, [X25]
	0x03E387BC LDR W8, [X0 + 0xE0]
	0x03E387C0 CBNZ W8, 0x3E387C8
	0x03E387C4 BL 0x1C16DFC
	0x03E387C8 LDR X1, [X19]
	0x03E387CC MOV X0, X20
	0x03E387D0 LDP X20, X19, [X31 + 0x50]
	0x03E387D4 LDP X22, X21, [X31 + 0x40]
	0x03E387D8 LDP X24, X23, [X31 + 0x30]
	0x03E387DC LDP X26, X25, [X31 + 0x20]
	0x03E387E0 LDP X28, X27, [X31 + 0x10]
	0x03E387E4 LDP X29, X30, [X31], #0x60
	0x03E387E8 B 0x28F9A14
	0x03E387EC BL 0x1C16F20
	0x03E387F0 MOV X1, X31
	0x03E387F4 B 0x33BDD8C
	0x03E387F8 STP X30, X21, [X31 - 0x20]!
	0x03E387FC STP X20, X19, [X31 + 0x10]
	0x03E38800 ADRP X21, 0x5B0000
	0x03E38804 ADRP X20, 0x2BB000
	0x03E38808 LDRB W8, [X21 + 0x781]
	0x03E3880C LDR X20, [X20 + 0x598]

ISIL:
	001 Move [X31-48], D11
	002 Move [X31-40], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X19
	007 Move W19, W1
	008 Move X1, X31
	009 Move V8, V3
	010 Move V9, V2
	011 Move V10, V1
	012 Move V11, V0
	013 Call Graphic.get_canvasRenderer, X0
	014 Compare X0, 0
	015 JumpIfEqual {42}
	016 Move TEMP, X19
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {33}
	020 Move V2, V9
	021 Move V3, V8
	022 Move X30, [X31+32]
	023 Move X19, [X31+40]
	024 Move D9, [X31+16]
	025 Move D8, [X31+24]
	026 Move V0, V11
	027 Move V1, V10
	028 Move X1, X31
	029 Move D11, [X31+48]
	030 Move D10, [X31+56]
	031 Call CanvasRenderer.EnableRectClipping, X0, X1
	032 Return 
	033 Move X30, [X31+32]
	034 Move X19, [X31+40]
	035 Move D9, [X31+16]
	036 Move D8, [X31+24]
	037 Move X1, X31
	038 Move D11, [X31+48]
	039 Move D10, [X31+56]
	040 Call CanvasRenderer.DisableRectClipping, X0
	041 Return 
	042 Call 0x1C17F20

Method: System.Void SetClipSoftness(UnityEngine.Vector2 clipSoftness)

Disassembly:
	0x03E38810 MOV X19, X0
	0x03E38814 TBNZ X8, 0x0, 0x3E38844
	0x03E38818 ADRP X0, 0x2BB000
	0x03E3881C LDR X0, [X0 + 0x970]
	0x03E38820 BL 0x1C16CF4
	0x03E38824 ADRP X0, 0x2BB000
	0x03E38828 LDR X0, [X0 + 0xA58]
	0x03E3882C BL 0x1C16CF4
	0x03E38830 ADRP X0, 0x2BB000
	0x03E38834 LDR X0, [X0 + 0x598]
	0x03E38838 BL 0x1C16CF4
	0x03E3883C MOVZ W8, 0x1
	0x03E38840 STRB W8, [X21 + 0x781]
	0x03E38844 LDR X0, [X20]

ISIL:
	001 Move [X31-32], D9
	002 Move [X31-24], D8
	003 Move [X31+16], X30
	004 Move X1, X31
	005 Move V8, V1
	006 Move V9, V0
	007 Call Graphic.get_canvasRenderer, X0
	008 Compare X0, 0
	009 JumpIfEqual {18}
	010 Move X30, [X31+16]
	011 Move V0, V9
	012 Move V1, V8
	013 Move X1, X31
	014 Move D9, [X31+32]
	015 Move D8, [X31+40]
	016 Call CanvasRenderer.set_clippingSoftness, X0, X1
	017 Return 
	018 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03E38848 LDR W8, [X0 + 0xE0]
	0x03E3884C CBNZ W8, 0x3E38854
	0x03E38850 BL 0x1C16DFC
	0x03E38854 MOV X0, X19
	0x03E38858 MOV X1, X31
	0x03E3885C MOV X2, X31
	0x03E38860 BL 0x3C354F8
	0x03E38864 TBZ X0, 0x0, 0x3E388E8
	0x03E38868 ADRP X8, 0x2BB000
	0x03E3886C LDR X8, [X8 + 0x970]
	0x03E38870 LDR X0, [X8]
	0x03E38874 LDR W8, [X0 + 0xE0]
	0x03E38878 CBNZ W8, 0x3E38880
	0x03E3887C BL 0x1C16DFC
	0x03E38880 MOV X0, X31
	0x03E38884 BL 0x3C018E4
	0x03E38888 TBZ X0, 0x0, 0x3E388F4
	0x03E3888C CBZ X19, 0x3E388C4
	0x03E38890 ADRP X8, 0x2BB000
	0x03E38894 LDR X8, [X8 + 0xA58]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Graphic.OnEnable, X0
	006 Move W8, 1
	007 Move X0, X19
	008 Move [X19+161], W8
	009 Call MaskableGraphic.UpdateClipParent, X0
	010 Move X8, [X19]
	011 Move X0, X19
	012 Move X9, [X8+776]
	013 Move X1, [X8+784]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move W8, [X19+185]
	016 Compare W8, 0
	017 JumpIfEqual {23}
	018 Move X0, X19
	019 Move X30, [X31+16]
	020 Move X19, [X31+24]
	021 Call MaskUtilities.NotifyStencilStateChanged, X0
	022 Return 
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03E389EC STP X20, X19, [X31 + 0x10]
	0x03E389F0 CBZ X0, 0x3E38A50
	0x03E389F4 LDR V0, [X0 + 0x104]
	0x03E389F8 LDR V1, [X0 + 0x108]
	0x03E389FC LDR W21, [X0 + 0xEC]
	0x03E38A00 MOV X19, X1
	0x03E38A04 MOV X20, X0
	0x03E38A08 BL 0x3E38A54
	0x03E38A0C MOVZ W8, 0x7F800000
	0x03E38A10 FMOV S3, W8
	0x03E38A14 FCVTZS W9, S2
	0x03E38A18 FCMP S2, S3
	0x03E38A1C MOVZ W8, 0x80000000
	0x03E38A20 CSEL W8, W8, W9, EQ
	0x03E38A24 CMP W8, W21
	0x03E38A28 B.NE 0x3E38A3C
	0x03E38A2C CBNZ W21, 0x3E38A38
	0x03E38A30 LDR V0, [X20 + 0x104]
	0x03E38A34 LDR V1, [X20 + 0x108]
	0x03E38A38 STP S0, S1, [X19]
	0x03E38A3C LDP X20, X19, [X31 + 0x10]
	0x03E38A40 CMP W8, W21
	0x03E38A44 CSET W0, EQ
	0x03E38A48 LDP X30, X21, [X31], #0x20
	0x03E38A4C RET
	0x03E38A50 BL 0x1C16F20
	0x03E38A54 STR D14, [X31 - 0x80]!
	0x03E38A58 STP D13, D12, [X31 + 0x10]
	0x03E38A5C STP D11, D10, [X31 + 0x20]
	0x03E38A60 STP D9, D8, [X31 + 0x30]
	0x03E38A64 STP X30, X25, [X31 + 0x40]
	0x03E38A68 STP X24, X23, [X31 + 0x50]
	0x03E38A6C STP X22, X21, [X31 + 0x60]
	0x03E38A70 STP X20, X19, [X31 + 0x70]
	0x03E38A74 ADRP X19, 0x5B0000
	0x03E38A78 ADRP X25, 0x31F000
	0x03E38A7C LDRB W8, [X19 + 0x783]
	0x03E38A80 LDR X25, [X25 + 0x448]
	0x03E38A84 MOV V8.16B, V1.16B
	0x03E38A88 MOV V9.16B, V0.16B
	0x03E38A8C TBNZ X8, 0x0, 0x3E38AA4
	0x03E38A90 ADRP X0, 0x31F000
	0x03E38A94 LDR X0, [X0 + 0x448]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B1000
	006 Move X20, 0x321000
	007 Move W8, [X21+1908]
	008 Move X20, [X20+1848]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x321000
	015 Move X0, [X0+1848]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1908], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Graphic.OnDisable, X0
	022 Move X8, [X19]
	023 Move W9, 1
	024 Move [X19+161], W9
	025 Move X0, X19
	026 Move X9, [X8+776]
	027 Move X1, [X8+784]
	028 NotImplemented "Instruction BLR not yet implemented."
	029 Move X0, X19
	030 Call MaskableGraphic.UpdateClipParent, X0
	031 Move X0, [X20]
	032 Move X20, [X19+168]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X20
	038 Move X1, X31
	039 Call StencilMaterial.Remove, X0
	040 Move W8, [X19+185]
	041 Move [X19+168], X31
	042 Compare W8, 0
	043 JumpIfEqual {51}
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call MaskUtilities.NotifyStencilStateChanged, X0
	050 Return 
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return 

Method: System.Void OnTransformParentChanged()

Disassembly:
	0x03E38A98 BL 0x1C16CF4
	0x03E38A9C MOVZ W8, 0x1
	0x03E38AA0 STRB W8, [X19 + 0x783]
	0x03E38AA4 LDR X0, [X25]
	0x03E38AA8 LDR W8, [X0 + 0xE0]
	0x03E38AAC CBNZ W8, 0x3E38AB4
	0x03E38AB0 BL 0x1C16DFC
	0x03E38AB4 MOV X0, X31
	0x03E38AB8 BL 0x3C0DB98
	0x03E38ABC CBZ X0, 0x3E38EBC
	0x03E38AC0 MOV X1, X31
	0x03E38AC4 BL 0x3C0D6D0
	0x03E38AC8 MOV W19, W0
	0x03E38ACC MOV X0, X31
	0x03E38AD0 BL 0x3C0DB98
	0x03E38AD4 CBZ X0, 0x3E38EBC
	0x03E38AD8 MOV X1, X31
	0x03E38ADC BL 0x3C0D84C
	0x03E38AE0 CMP W19, W0
	0x03E38AE4 B.NE 0x3E38B54

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Graphic.OnTransformParentChanged, X0
	006 Move X0, X19
	007 Move X1, X31
	008 Call Behaviour.get_isActiveAndEnabled, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {24}
	013 Move W8, 1
	014 Move X0, X19
	015 Move [X19+161], W8
	016 Call MaskableGraphic.UpdateClipParent, X0
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+776]
	020 Move X1, [X8+784]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 

Method: System.Void ParentMaskStateChanged()

Disassembly:
	0x03E38AE8 LDR X0, [X25]

ISIL:
	001 Return 

Method: System.Void OnCanvasHierarchyChanged()

Disassembly:
	0x03E38AEC LDR W8, [X0 + 0xE0]
	0x03E38AF0 CBNZ W8, 0x3E38AF8
	0x03E38AF4 BL 0x1C16DFC
	0x03E38AF8 MOV X0, X31
	0x03E38AFC BL 0x3C0DB98
	0x03E38B00 CBZ X0, 0x3E38EBC
	0x03E38B04 MOV X1, X31
	0x03E38B08 BL 0x3C0D7B8
	0x03E38B0C MOV W19, W0
	0x03E38B10 MOV X0, X31
	0x03E38B14 BL 0x3C0DB98
	0x03E38B18 CBZ X0, 0x3E38EBC
	0x03E38B1C MOV X1, X31
	0x03E38B20 BL 0x3C0D934
	0x03E38B24 CMP W19, W0
	0x03E38B28 B.NE 0x3E38B54
	0x03E38B2C LDR X0, [X25]
	0x03E38B30 LDR W8, [X0 + 0xE0]
	0x03E38B34 CBNZ W8, 0x3E38B3C
	0x03E38B38 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Graphic.OnCanvasHierarchyChanged, X0
	006 Move X0, X19
	007 Move X1, X31
	008 Call Behaviour.get_isActiveAndEnabled, X0
	009 Move TEMP, X0
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfNotEqual {24}
	013 Move W8, 1
	014 Move X0, X19
	015 Move [X19+161], W8
	016 Call MaskableGraphic.UpdateClipParent, X0
	017 Move X8, [X19]
	018 Move X0, X19
	019 Move X2, [X8+776]
	020 Move X1, [X8+784]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2
	024 Move X30, [X31+16]
	025 Move X19, [X31+24]
	026 Return 

Method: UnityEngine.Rect get_rootCanvasRect()

Disassembly:
	0x03E38508 LDR X0, [X0 + 0x700]
	0x03E3850C BL 0x1C16CF4
	0x03E38510 ADRP X0, 0x333000
	0x03E38514 LDR X0, [X0 + 0x270]
	0x03E38518 BL 0x1C16CF4
	0x03E3851C ADRP X0, 0x333000
	0x03E38520 LDR X0, [X0 + 0x278]
	0x03E38524 BL 0x1C16CF4
	0x03E38528 ADRP X0, 0x333000
	0x03E3852C LDR X0, [X0 + 0x280]
	0x03E38530 BL 0x1C16CF4
	0x03E38534 ADRP X0, 0x32A000
	0x03E38538 LDR X0, [X0 + 0x138]
	0x03E3853C BL 0x1C16CF4
	0x03E38540 ADRP X0, 0x320000
	0x03E38544 LDR X0, [X0 + 0x770]
	0x03E38548 BL 0x1C16CF4
	0x03E3854C ADRP X0, 0x320000
	0x03E38550 LDR X0, [X0 + 0x778]
	0x03E38554 BL 0x1C16CF4
	0x03E38558 ADRP X0, 0x32A000
	0x03E3855C LDR X0, [X0 + 0x140]
	0x03E38560 BL 0x1C16CF4
	0x03E38564 MOVZ W8, 0x1
	0x03E38568 STRB W8, [X20 + 0x780]
	0x03E3856C CBZ X19, 0x3E387EC
	0x03E38570 LDP W2, W8, [X19 + 0x18]
	0x03E38574 ADRP X25, 0x32A000
	0x03E38578 LDR X25, [X25 + 0x308]
	0x03E3857C ADD W8, W8, 0x1
	0x03E38580 CMP W2, 0x1
	0x03E38584 STP W31, W8, [X19 + 0x18]
	0x03E38588 B.LT 0x3E3859C
	0x03E3858C LDR X0, [X19 + 0x10]
	0x03E38590 MOV W1, W31
	0x03E38594 MOV X3, X31
	0x03E38598 BL 0x339FA34
	0x03E3859C LDR X0, [X25]
	0x03E385A0 ADRP X20, 0x32A000
	0x03E385A4 ADRP X26, 0x333000
	0x03E385A8 LDR W8, [X0 + 0xE0]
	0x03E385AC LDR X20, [X20 + 0x2F8]
	0x03E385B0 LDR X26, [X26 + 0x240]
	0x03E385B4 CBNZ W8, 0x3E385BC
	0x03E385B8 BL 0x1C16DFC
	0x03E385BC LDR X0, [X20]
	0x03E385C0 ADRP X21, 0x333000
	0x03E385C4 LDR X21, [X21 + 0x248]
	0x03E385C8 BL 0x28F98D4
	0x03E385CC LDR X8, [X26]
	0x03E385D0 MOV X20, X0
	0x03E385D4 LDR W9, [X8 + 0xE0]
	0x03E385D8 CBNZ W9, 0x3E385E4
	0x03E385DC MOV X0, X8
	0x03E385E0 BL 0x1C16DFC
	0x03E385E4 LDR X0, [X21]
	0x03E385E8 BL 0x28F98D4
	0x03E385EC CBZ X22, 0x3E387EC
	0x03E385F0 MOV X21, X0
	0x03E385F4 MOV X0, X22
	0x03E385F8 MOV X1, X31
	0x03E385FC BL 0x3C32E90
	0x03E38600 CBZ X0, 0x3E387EC
	0x03E38604 ADRP X8, 0x333000
	0x03E38608 LDR X8, [X8 + 0x270]
	0x03E3860C MOV W1, W31
	0x03E38610 MOV X2, X21
	0x03E38614 LDR X3, [X8]
	0x03E38618 BL 0x21A48CC
	0x03E3861C CBZ X21, 0x3E387EC
	0x03E38620 LDR W8, [X21 + 0x18]
	0x03E38624 CMP W8, 0x1
	0x03E38628 B.LT 0x3E3878C
	0x03E3862C MOV X0, X22
	0x03E38630 MOV X1, X31
	0x03E38634 BL 0x3C32E90
	0x03E38638 CBZ X0, 0x3E387EC
	0x03E3863C ADRP X8, 0x321000
	0x03E38640 LDR X8, [X8 + 0x700]
	0x03E38644 MOV W1, W31
	0x03E38648 MOV X2, X20
	0x03E3864C LDR X3, [X8]
	0x03E38650 BL 0x21A48CC
	0x03E38654 LDR W8, [X21 + 0x18]
	0x03E38658 SUBS W22, W8, 0x1
	0x03E3865C B.MI 0x3E3878C
	0x03E38660 ADRP X27, 0x32A000
	0x03E38664 ADRP X28, 0x320000
	0x03E38668 ADRP X29, 0x333000
	0x03E3866C LDR X27, [X27 + 0x140]
	0x03E38670 LDR X28, [X28 + 0x778]
	0x03E38674 LDR X29, [X29 + 0x278]
	0x03E38678 LDR X2, [X27]
	0x03E3867C MOV X0, X21
	0x03E38680 MOV W1, W22
	0x03E38684 BL 0x301BCCC
	0x03E38688 CBZ X0, 0x3E387EC
	0x03E3868C LDR X8, [X0]
	0x03E38690 LDP X9, X1, [X8 + 0x1C8]
	0x03E38694 BLR X9
	0x03E38698 TBZ X0, 0x0, 0x3E38784
	0x03E3869C CBZ X20, 0x3E387EC
	0x03E386A0 LDR W8, [X20 + 0x18]
	0x03E386A4 SUBS W23, W8, 0x1
	0x03E386A8 B.MI 0x3E38720
	0x03E386AC LDR X2, [X28]
	0x03E386B0 MOV X0, X20
	0x03E386B4 MOV W1, W23
	0x03E386B8 BL 0x301BCCC
	0x03E386BC CBZ X0, 0x3E387EC

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+128], X30
	003 Move [X31+136], X23
	004 Move [X31+144], X22
	005 Move [X31+152], X21
	006 Move [X31+160], X20
	007 Move [X31+168], X19
	008 Move X20, 0x5B1000
	009 Move W8, [X20+1909]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x2BC000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1909], W8
	020 NotImplemented "Instruction MOVI not yet implemented."
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X31+96], V0
	024 Move [X31+104], V0
	025 Move [X31+64], V0
	026 Move [X31+72], V0
	027 Call Graphic.get_rectTransform, X0
	028 Compare X0, 0
	029 JumpIfEqual {135}
	030 Move X1, [X19+208]
	031 Move X20, 0x2BC000
	032 Move X20, [X20+1432]
	033 Move X2, X31
	034 Call RectTransform.GetWorldCorners, X0, X1
	035 Move X0, X19
	036 Move X1, X31
	037 Call Graphic.get_canvas, X0
	038 Move X8, [X20]
	039 Move X20, X0
	040 Move W9, [X8+224]
	041 Compare W9, 0
	042 JumpIfNotEqual {45}
	043 Move X0, X8
	044 Call 0x1C17DFC
	045 Move X0, X20
	046 Move X1, X31
	047 Call Object.op_Implicit, X0
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {98}
	052 Move X0, X19
	053 Move X1, X31
	054 Call Graphic.get_canvas, X0
	055 Compare X0, 0
	056 JumpIfEqual {135}
	057 Move X1, X31
	058 Call Canvas.get_rootCanvas, X0
	059 Compare X0, 0
	060 JumpIfEqual {135}
	061 Move X1, X31
	062 Call Component.get_transform, X0
	063 Compare X0, 0
	064 JumpIfEqual {135}
	065 Add X8, X31, 0
	066 Move X1, X31
	067 Call Transform.get_worldToLocalMatrix, X0
	068 Move V0, [X31]
	069 Move V1, [X31+16]
	070 Move V2, [X31+32]
	071 Move V3, [X31+48]
	072 Move X20, X31
	073 Move X21, X31
	074 Move [X31+64], V0
	075 Move [X31+72], V1
	076 Move [X31+96], V2
	077 Move [X31+104], V3
	078 Move X23, [X19+208]
	079 Compare X23, 0
	080 JumpIfEqual {135}
	081 Move W8, [X23+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Add X22, X23, X20
	084 Move S0, [X22+32]
	085 Move S1, [X22+36]
	086 Move V2, [X22+40]
	087 Add X0, X31, 64
	088 Move X1, X31
	089 Call Matrix4x4.MultiplyPoint, X0, X1
	090 Move W8, [X23+24]
	091 NotImplemented "Instruction CMP not yet implemented."
	092 Add X21, X21, 1
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Add X20, X20, 12
	095 Move [X22+32], S0
	096 Move [X22+40], S1
	097 Move [X22+40], S2
	098 Move X8, [X19+208]
	099 Compare X8, 0
	100 JumpIfEqual {135}
	101 Move W10, [X8+24]
	102 Compare W10, 0
	103 JumpIfEqual {134}
	104 Move S0, [X8+32]
	105 Move S1, [X8+36]
	106 Move X9, X31
	107 Subtract W10, W10, 1
	108 Move V2, V0
	109 Move V3, V1
	110 NotImplemented "Instruction CMP not yet implemented."
	111 Add X11, X8, X9
	112 Move S4, [X11+44]
	113 Move S5, [X11+48]
	114 Add X9, X9, 12
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 NotImplemented "Instruction FCSEL not yet implemented."
	117 NotImplemented "Instruction FCMP not yet implemented."
	118 NotImplemented "Instruction FCSEL not yet implemented."
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 NotImplemented "Instruction FCSEL not yet implemented."
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 NotImplemented "Instruction FCSEL not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X20, [X31+160]
	125 Move X19, [X31+168]
	126 Move X22, [X31+144]
	127 Move X21, [X31+152]
	128 Move X30, [X31+128]
	129 Move X23, [X31+136]
	130 Subtract S2, S2, S0
	131 Subtract S3, S3, S1
	132 Add X31, X31, 176
	133 Return X0
	134 Call 0x1C17F28
	135 Call 0x1C17F20

Method: System.Void UpdateClipParent()

Disassembly:
	0x03E38898 LDR X9, [X19]
	0x03E3889C LDR X8, [X8]
	0x03E388A0 CMP X9, X8
	0x03E388A4 B.NE 0x3E388C4
	0x03E388A8 MOV X0, X19
	0x03E388AC MOV X1, X31
	0x03E388B0 BL 0x3C356F8
	0x03E388B4 CBZ X0, 0x3E38918
	0x03E388B8 MOV X1, X31
	0x03E388BC MOV X2, X31
	0x03E388C0 BL 0x3C3FD20
	0x03E388C4 LDR X0, [X20]
	0x03E388C8 LDR W8, [X0 + 0xE0]
	0x03E388CC CBNZ W8, 0x3E388D4
	0x03E388D0 BL 0x1C16DFC
	0x03E388D4 MOV X0, X19
	0x03E388D8 LDP X20, X19, [X31 + 0x10]
	0x03E388DC MOV X1, X31
	0x03E388E0 LDP X30, X21, [X31], #0x20
	0x03E388E4 B 0x3C394A8
	0x03E388E8 LDP X20, X19, [X31 + 0x10]
	0x03E388EC LDP X30, X21, [X31], #0x20
	0x03E388F0 RET
	0x03E388F4 LDR X0, [X20]
	0x03E388F8 LDR W8, [X0 + 0xE0]
	0x03E388FC CBNZ W8, 0x3E38904
	0x03E38900 BL 0x1C16DFC
	0x03E38904 MOV X0, X19
	0x03E38908 LDP X20, X19, [X31 + 0x10]
	0x03E3890C MOV X1, X31
	0x03E38910 LDP X30, X21, [X31], #0x20
	0x03E38914 B 0x3C39564
	0x03E38918 BL 0x1C16F20
	0x03E3891C STP X30, X21, [X31 - 0x20]!
	0x03E38920 STP X20, X19, [X31 + 0x10]
	0x03E38924 ADRP X21, 0x5B0000
	0x03E38928 ADRP X20, 0x2BB000
	0x03E3892C LDRB W8, [X21 + 0x782]
	0x03E38930 LDR X20, [X20 + 0x598]
	0x03E38934 MOV X19, X0
	0x03E38938 TBNZ X8, 0x0, 0x3E3895C
	0x03E3893C ADRP X0, 0x2BB000
	0x03E38940 LDR X0, [X0 + 0x970]
	0x03E38944 BL 0x1C16CF4
	0x03E38948 ADRP X0, 0x2BB000
	0x03E3894C LDR X0, [X0 + 0x598]
	0x03E38950 BL 0x1C16CF4
	0x03E38954 MOVZ W8, 0x1
	0x03E38958 STRB W8, [X21 + 0x782]
	0x03E3895C LDR X0, [X20]
	0x03E38960 LDR W8, [X0 + 0xE0]
	0x03E38964 CBNZ W8, 0x3E3896C
	0x03E38968 BL 0x1C16DFC
	0x03E3896C MOV X0, X19
	0x03E38970 MOV X1, X31
	0x03E38974 MOV X2, X31
	0x03E38978 BL 0x3C354F8
	0x03E3897C TBZ X0, 0x0, 0x3E389D0
	0x03E38980 ADRP X8, 0x2BB000
	0x03E38984 LDR X8, [X8 + 0x970]
	0x03E38988 LDR X0, [X8]
	0x03E3898C LDR W8, [X0 + 0xE0]
	0x03E38990 CBNZ W8, 0x3E38998
	0x03E38994 BL 0x1C16DFC
	0x03E38998 MOV X0, X31
	0x03E3899C BL 0x3C03278
	0x03E389A0 LDR X8, [X20]
	0x03E389A4 MOV W20, W0
	0x03E389A8 LDR W9, [X8 + 0xE0]
	0x03E389AC CBNZ W9, 0x3E389B8
	0x03E389B0 MOV X0, X8
	0x03E389B4 BL 0x1C16DFC
	0x03E389B8 MOV X0, X19
	0x03E389BC MOV X1, X31
	0x03E389C0 TBZ X20, 0x0, 0x3E389DC
	0x03E389C4 LDP X20, X19, [X31 + 0x10]
	0x03E389C8 LDP X30, X21, [X31], #0x20
	0x03E389CC B 0x3C39564
	0x03E389D0 LDP X20, X19, [X31 + 0x10]
	0x03E389D4 LDP X30, X21, [X31], #0x20
	0x03E389D8 RET
	0x03E389DC LDP X20, X19, [X31 + 0x10]
	0x03E389E0 LDP X30, X21, [X31], #0x20
	0x03E389E4 B 0x3C394A8
	0x03E389E8 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x5B1000
	007 Move W8, [X20+1910]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x2BC000
	014 Move X0, [X0+1432]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+1910], W8
	018 Move X22, 0x2BC000
	019 Move W8, [X19+184]
	020 Move X22, [X22+1432]
	021 Compare W8, 0
	022 JumpIfEqual {35}
	023 Move X8, [X19]
	024 Move X0, X19
	025 Move X9, [X8+456]
	026 Move X1, [X8+464]
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {35}
	032 Move X0, X19
	033 Call MaskUtilities.GetRectMaskForClippable, X0
	034 Move X20, X0
	035 Move X20, X31
	036 Move X0, [X22]
	037 Move X21, [X19+176]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X21
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {84}
	050 Move X0, [X22]
	051 Move X21, [X19+176]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X20
	057 Move X1, X21
	058 Move X2, X31
	059 Call Object.op_Inequality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfEqual {75}
	064 Compare X20, 0
	065 JumpIfEqual {119}
	066 Move X8, [X20]
	067 Move X0, X20
	068 Move X9, [X8+456]
	069 Move X1, [X8+464]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfEqual {84}
	075 Move X0, [X19+176]
	076 Compare X0, 0
	077 JumpIfEqual {119}
	078 Move X1, X19
	079 Move X2, X31
	080 Call RectMask2D.RemoveClippable, X0, X1
	081 Move X0, X19
	082 Move W1, W31
	083 Call MaskableGraphic.UpdateCull, X0, X1
	084 Move X0, [X22]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X0, X20
	090 Move X1, X31
	091 Move X2, X31
	092 Call Object.op_Inequality, X0, X1
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {112}
	097 Compare X20, 0
	098 JumpIfEqual {119}
	099 Move X8, [X20]
	100 Move X0, X20
	101 Move X9, [X8+456]
	102 Move X1, [X8+464]
	103 NotImplemented "Instruction BLR not yet implemented."
	104 Move TEMP, X0
	105 And TEMP, TEMP, 1
	106 Compare TEMP, 1
	107 JumpIfNotEqual {112}
	108 Move X0, X20
	109 Move X1, X19
	110 Move X2, X31
	111 Call RectMask2D.AddClippable, X0, X1
	112 Move [X19+176], X20
	113 Move X20, [X31+32]
	114 Move X19, [X31+40]
	115 Move X22, [X31+16]
	116 Move X21, [X31+24]
	117 Move X30, [X31+48]
	118 Return 
	119 Call 0x1C17F20

Method: System.Void RecalculateClipping()

Disassembly:
	0x03E38F50 FCMP S0, S1

ISIL:
	001 Call MaskableGraphic.UpdateClipParent, X0
	002 Return 

Method: System.Void RecalculateMasking()

Disassembly:
	0x03E38F54 B.PL 0x3E38F64
	0x03E38F58 LDR V8, [X19 + 0x104]
	0x03E38F5C LDR V9, [X19 + 0x108]
	0x03E38F60 FMOV S10, W31
	0x03E38F64 LDR W8, [X19 + 0xFC]
	0x03E38F68 MOV V1.16B, V9.16B
	0x03E38F6C LDP X20, X19, [X31 + 0x20]
	0x03E38F70 LDR X30, [X31 + 0x18]
	0x03E38F74 SCVTF S0, W8
	0x03E38F78 CMP W8, 0x0
	0x03E38F7C FCSEL S2, S0, S10, GT
	0x03E38F80 MOV V0.16B, V8.16B
	0x03E38F84 LDP D9, D8, [X31 + 0x8]
	0x03E38F88 LDR V10, [X31], #0x30
	0x03E38F8C RET
	0x03E38F90 BL 0x1C16F20
	0x03E38F94 LDR W0, [X0]
	0x03E38F98 RET
	0x03E38F9C STR W1, [X0]
	0x03E38FA0 RET
	0x03E38FA4 LDRB W0, [X0 + 0x4]
	0x03E38FA8 RET
	0x03E38FAC AND W8, W1, 0x1
	0x03E38FB0 STRB W8, [X0 + 0x4]
	0x03E38FB4 RET
	0x03E38FB8 LDR X0, [X0 + 0x8]
	0x03E38FBC RET
	0x03E38FC0 STR X1, [X0 + 0x8]
	0x03E38FC4 RET
	0x03E38FC8 LDR X0, [X0 + 0x10]
	0x03E38FCC RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x5B1000
	006 Move X20, 0x321000
	007 Move W8, [X21+1911]
	008 Move X20, [X20+1848]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x321000
	015 Move X0, [X0+1848]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1911], W8
	019 Move X0, [X20]
	020 Move X20, [X19+168]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Call StencilMaterial.Remove, X0
	028 Move X8, [X19]
	029 Move W9, 1
	030 Move [X19+168], X31
	031 Move [X19+161], W9
	032 Move X2, [X8+776]
	033 Move X1, [X8+784]
	034 Move X0, X19
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Move X21, [X31+40]
	039 CallNoReturn X2

Method: System.Void .ctor()

Disassembly:
	0x03E38FD0 STR X1, [X0 + 0x10]
	0x03E38FD4 RET
	0x03E38FD8 LDR X0, [X0 + 0x18]
	0x03E38FDC RET
	0x03E38FE0 STR X1, [X0 + 0x18]
	0x03E38FE4 RET
	0x03E38FE8 LDR X0, [X0 + 0x20]
	0x03E38FEC RET
	0x03E38FF0 STR X1, [X0 + 0x20]
	0x03E38FF4 RET
	0x03E38FF8 MOVZ W9, 0x3
	0x03E38FFC MOVI V0.2D, 0x0
	0x03E39000 STRB W31, [X8 + 0x4]
	0x03E39004 STR W9, [X8]
	0x03E39008 STUR V0, [X8 + 0x5]
	0x03E3900C STUR V0, [X8 + 0x15]
	0x03E39010 STR W31, [X8 + 0x24]
	0x03E39014 RET
	0x03E39018 STP X30, X23, [X31 - 0x30]!
	0x03E3901C STP X22, X21, [X31 + 0x10]
	0x03E39020 STP X20, X19, [X31 + 0x20]
	0x03E39024 ADRP X21, 0x5AF000
	0x03E39028 LDRB W8, [X21 + 0x784]
	0x03E3902C MOV X19, X1
	0x03E39030 MOV X20, X0
	0x03E39034 TBNZ X8, 0x0, 0x3E3904C
	0x03E39038 ADRP X0, 0x2BA000
	0x03E3903C LDR X0, [X0 + 0x598]
	0x03E39040 BL 0x1C16CF4
	0x03E39044 MOVZ W8, 0x1
	0x03E39048 STRB W8, [X21 + 0x784]
	0x03E3904C LDR W8, [X20]
	0x03E39050 LDR W9, [X19]
	0x03E39054 CMP W8, W9
	0x03E39058 B.NE 0x3E3911C
	0x03E3905C ADRP X23, 0x2BA000
	0x03E39060 LDR X23, [X23 + 0x598]
	0x03E39064 LDR X21, [X20 + 0x8]
	0x03E39068 LDR X22, [X19 + 0x8]
	0x03E3906C LDR X0, [X23]
	0x03E39070 LDR W8, [X0 + 0xE0]
	0x03E39074 CBNZ W8, 0x3E3907C
	0x03E39078 BL 0x1C16DFC
	0x03E3907C MOV X0, X21
	0x03E39080 MOV X1, X22
	0x03E39084 MOV X2, X31
	0x03E39088 BL 0x3C3883C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x5B1000
	008 Move X20, 0x334000
	009 Move X22, 0x2BE000
	010 Move X21, 0x322000
	011 Move W8, [X23+1912]
	012 Move X20, [X20+616]
	013 Move X22, [X22+2480]
	014 Move X21, [X21+280]
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {31}
	020 Move X0, 0x333000
	021 Move X0, [X0+616]
	022 Call 0x1C17CF4
	023 Move X0, 0x321000
	024 Move X0, [X0+280]
	025 Call 0x1C17CF4
	026 Move X0, 0x2BD000
	027 Move X0, [X0+2480]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X23+1912], W8
	031 Move W23, 1
	032 Move [X19+161], W23
	033 Move [X19+184], W23
	034 Move X0, [X20]
	035 Call 0x1C17F10
	036 Move X20, X0
	037 Call CullStateChangedEvent..ctor, X0
	038 Move [X19+192], X20
	039 Move [X19+200], W23
	040 Move X0, [X22]
	041 Move W1, 4
	042 Call 0x1C17D6C
	043 Move [X19+208], X0
	044 Move X0, [X21]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X19
	050 Move X20, [X31+32]
	051 Move X19, [X31+40]
	052 Move X22, [X31+16]
	053 Move X21, [X31+24]
	054 Move X1, X31
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Call Graphic..ctor, X0
	058 Return 

Method: UnityEngine.GameObject UnityEngine.UI.IClippable.get_gameObject()

Disassembly:
	0x03E390D4 MOV X0, X21
	0x03E390D8 MOV X1, X22

ISIL:
	001 Move X1, X31
	002 Call Component.get_gameObject, X0
	003 Return X0

