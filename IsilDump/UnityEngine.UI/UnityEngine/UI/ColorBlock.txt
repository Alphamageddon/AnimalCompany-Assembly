Type: UnityEngine.UI.ColorBlock

Method: UnityEngine.Color get_normalColor()

Disassembly:
	0x03CD3040 MOV X0, X20
	0x03CD3044 MOV X1, X31
	0x03CD3048 BL 0x3C356F8

ISIL:
	001 Move S0, [X0]
	002 Move S1, [X0+4]
	003 Move S2, [X0+8]
	004 Move S3, [X0+12]
	005 Return X0

Method: System.Void set_normalColor(UnityEngine.Color value)

Disassembly:
	0x03CD304C CBZ X0, 0x3CD30D8
	0x03CD3050 MOV X1, X31
	0x03CD3054 MOV X20, X0

ISIL:
	001 Move [X0], S0
	002 Move [X0+8], S1
	003 Move [X0+8], S2
	004 Move [X0+16], S3
	005 Return 

Method: UnityEngine.Color get_highlightedColor()

Disassembly:
	0x03CD3058 BL 0x3C40C8C
	0x03CD305C CMP W0, 0x1
	0x03CD3060 B.LT 0x3CD30C8

ISIL:
	001 Move S0, [X0+16]
	002 Move S1, [X0+20]
	003 Move S2, [X0+24]
	004 Move S3, [X0+28]
	005 Return X0

Method: System.Void set_highlightedColor(UnityEngine.Color value)

Disassembly:
	0x03CD3064 ADRP X23, 0x48F000
	0x03CD3068 LDR X23, [X23 + 0x148]
	0x03CD306C MOV W21, W31

ISIL:
	001 Move [X0+16], S0
	002 Move [X0+24], S1
	003 Move [X0+24], S2
	004 Move [X0+32], S3
	005 Return 

Method: UnityEngine.Color get_pressedColor()

Disassembly:
	0x03CD3070 MOV X0, X20
	0x03CD3074 MOV W1, W21
	0x03CD3078 MOV X2, X31

ISIL:
	001 Move S0, [X0+32]
	002 Move S1, [X0+36]
	003 Move S2, [X0+40]
	004 Move S3, [X0+44]
	005 Return X0

Method: System.Void set_pressedColor(UnityEngine.Color value)

Disassembly:
	0x03CD307C BL 0x3C410A0
	0x03CD3080 CBZ X0, 0x3CD30D8
	0x03CD3084 MOV X1, X31

ISIL:
	001 Move [X0+32], S0
	002 Move [X0+40], S1
	003 Move [X0+40], S2
	004 Move [X0+48], S3
	005 Return 

Method: UnityEngine.Color get_selectedColor()

Disassembly:
	0x03CD3088 BL 0x3C32ECC
	0x03CD308C LDR X8, [X23]
	0x03CD3090 MOV X22, X0

ISIL:
	001 Move S0, [X0+48]
	002 Move S1, [X0+52]
	003 Move S2, [X0+56]
	004 Move S3, [X0+60]
	005 Return X0

Method: System.Void set_selectedColor(UnityEngine.Color value)

Disassembly:
	0x03CD3094 LDR W9, [X8 + 0xE0]
	0x03CD3098 CBNZ W9, 0x3CD30A4
	0x03CD309C MOV X0, X8

ISIL:
	001 Move [X0+48], S0
	002 Move [X0+56], S1
	003 Move [X0+56], S2
	004 Move [X0+64], S3
	005 Return 

Method: UnityEngine.Color get_disabledColor()

Disassembly:
	0x03CD30A0 BL 0x1C16DFC
	0x03CD30A4 MOV X0, X22
	0x03CD30A8 MOV W1, W19

ISIL:
	001 Move S0, [X0+64]
	002 Move S1, [X0+68]
	003 Move S2, [X0+72]
	004 Move S3, [X0+76]
	005 Return X0

Method: System.Void set_disabledColor(UnityEngine.Color value)

Disassembly:
	0x03CD30AC BL 0x3CD2FF8
	0x03CD30B0 MOV X0, X20
	0x03CD30B4 MOV X1, X31

ISIL:
	001 Move [X0+64], S0
	002 Move [X0+72], S1
	003 Move [X0+72], S2
	004 Move [X0+80], S3
	005 Return 

Method: System.Single get_colorMultiplier()

Disassembly:
	0x03CD30B8 ADD W21, W21, 0x1
	0x03CD30BC BL 0x3C40C8C

ISIL:
	001 Move V0, [X0+80]
	002 Return V0

Method: System.Void set_colorMultiplier(System.Single value)

Disassembly:
	0x03CD30C0 CMP W21, W0
	0x03CD30C4 B.LT 0x3CD3070

ISIL:
	001 Move [X0+80], S0
	002 Return 

Method: System.Single get_fadeDuration()

Disassembly:
	0x03CD30C8 LDP X20, X19, [X31 + 0x20]
	0x03CD30CC LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move V0, [X0+84]
	002 Return V0

Method: System.Void set_fadeDuration(System.Single value)

Disassembly:
	0x03CD30D0 LDP X30, X23, [X31], #0x30
	0x03CD30D4 RET

ISIL:
	001 Move [X0+84], S0
	002 Return 

Method: System.Void .cctor()

Disassembly:
	0x03CD30D8 BL 0x1C16F20
	0x03CD30DC STP D9, D8, [X31 - 0x50]!
	0x03CD30E0 STP X30, X25, [X31 + 0x10]
	0x03CD30E4 STP X24, X23, [X31 + 0x20]
	0x03CD30E8 STP X22, X21, [X31 + 0x30]
	0x03CD30EC STP X20, X19, [X31 + 0x40]
	0x03CD30F0 ADRP X20, 0x714000
	0x03CD30F4 ADRP X22, 0x48F000
	0x03CD30F8 LDRB W8, [X20 + 0x45B]
	0x03CD30FC LDR X22, [X22 + 0x148]
	0x03CD3100 MOV X19, X0
	0x03CD3104 TBNZ X8, 0x0, 0x3CD3164
	0x03CD3108 ADRP X0, 0x48F000
	0x03CD310C LDR X0, [X0 + 0x148]
	0x03CD3110 BL 0x1C16CF4
	0x03CD3114 ADRP X0, 0x476000
	0x03CD3118 LDR X0, [X0 + 0x6D8]
	0x03CD311C BL 0x1C16CF4
	0x03CD3120 ADRP X0, 0x480000
	0x03CD3124 LDR X0, [X0 + 0xB40]
	0x03CD3128 BL 0x1C16CF4
	0x03CD312C ADRP X0, 0x476000
	0x03CD3130 LDR X0, [X0 + 0x6E0]
	0x03CD3134 BL 0x1C16CF4
	0x03CD3138 ADRP X0, 0x428000
	0x03CD313C LDR X0, [X0 + 0xC60]
	0x03CD3140 BL 0x1C16CF4
	0x03CD3144 ADRP X0, 0x420000
	0x03CD3148 LDR X0, [X0 + 0x6C0]
	0x03CD314C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x715000
	005 Move X20, 0x449000
	006 Move W8, [X19+1093]
	007 Move X20, [X20+1512]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x449000
	013 Move X0, [X0+1512]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1093], W8
	017 Move X8, [X20]
	018 Move X9, -52330496
	019 Move V1, [X9+207]
	020 Move X9, -52326400
	021 Move V2, [X9+41]
	022 Move X9, -52326400
	023 Move V3, [X9+66]
	024 Move X9, -52318208
	025 Move X8, [X8+184]
	026 Move V4, [X9+1160]
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move V0, 0
	030 Move [X8], V0
	031 Move [X8+8], V1
	032 Move [X8+32], V2
	033 Move [X8+40], V1
	034 Move [X8+4], V3
	035 Move [X8+80], D4
	036 Move X30, [X31+32]
	037 Return 

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03CD3150 ADRP X0, 0x48F000
	0x03CD3154 LDR X0, [X0 + 0x158]
	0x03CD3158 BL 0x1C16CF4
	0x03CD315C MOVZ W8, 0x1
	0x03CD3160 STRB W8, [X20 + 0x45B]
	0x03CD3164 LDR X0, [X22]
	0x03CD3168 ADRP X23, 0x428000
	0x03CD316C ADRP X20, 0x476000
	0x03CD3170 ADRP X21, 0x420000
	0x03CD3174 LDR W8, [X0 + 0xE0]
	0x03CD3178 LDR X23, [X23 + 0xC60]
	0x03CD317C LDR X20, [X20 + 0x6E0]
	0x03CD3180 LDR X21, [X21 + 0x6C0]
	0x03CD3184 CBNZ W8, 0x3CD3190
	0x03CD3188 BL 0x1C16DFC
	0x03CD318C LDR X0, [X22]
	0x03CD3190 LDR X8, [X0 + 0xB8]
	0x03CD3194 LDR X0, [X23]
	0x03CD3198 MOVZ W1, 0x1
	0x03CD319C LDP S8, S9, [X8 + 0x8]
	0x03CD31A0 BL 0x1C16D6C
	0x03CD31A4 LDR X8, [X21]
	0x03CD31A8 LDR X21, [X20]
	0x03CD31AC MOV X20, X0
	0x03CD31B0 LDR W9, [X8 + 0xE0]
	0x03CD31B4 CBNZ W9, 0x3CD31C0
	0x03CD31B8 MOV X0, X8
	0x03CD31BC BL 0x1C16DFC
	0x03CD31C0 MOV X0, X21
	0x03CD31C4 MOV X1, X31
	0x03CD31C8 BL 0x338C698
	0x03CD31CC CBZ X20, 0x3CD3384
	0x03CD31D0 MOV X21, X0
	0x03CD31D4 CBZ X0, 0x3CD31EC
	0x03CD31D8 LDR X8, [X20]
	0x03CD31DC MOV X0, X21
	0x03CD31E0 LDR X1, [X8 + 0x40]
	0x03CD31E4 BL 0x1C16E00
	0x03CD31E8 CBZ X0, 0x3CD338C
	0x03CD31EC LDR W8, [X20 + 0x18]
	0x03CD31F0 CBZ W8, 0x3CD3388
	0x03CD31F4 ADRP X8, 0x48F000
	0x03CD31F8 LDR X8, [X8 + 0x158]
	0x03CD31FC STR X21, [X20 + 0x20]
	0x03CD3200 MOV V0.16B, V8.16B
	0x03CD3204 MOV V1.16B, V9.16B
	0x03CD3208 LDR X0, [X8]
	0x03CD320C MOV X1, X20

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+104], X21
	004 Move [X31+112], X20
	005 Move [X31+120], X19
	006 Move X21, 0x715000
	007 Move W8, [X21+1094]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x449000
	015 Move X0, [X0+1512]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1094], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X21, 0x449000
	022 Move X21, [X21+1512]
	023 Move X8, [X20]
	024 Move X0, [X21]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfEqual {31}
	030 Move X1, X0
	031 Call 0x1C17DFC
	032 Move X1, [X21]
	033 Move X0, [X20]
	034 Move X8, [X0+64]
	035 Move X9, [X1+64]
	036 Move X0, X20
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Call 0x1C17E08
	039 Move X1, X0
	040 Add X0, X31, 8
	041 Move W2, 88
	042 Call 0x3EB2AC0
	043 Add X1, X31, 8
	044 Move X0, X19
	045 Call ColorBlock.Equals, X0, X1
	046 Move X20, [X31+112]
	047 Move X19, [X31+120]
	048 Move X30, [X31+96]
	049 Move X21, [X31+104]
	050 And W0, W0, 1
	051 Add X31, X31, 128
	052 Return X0
	053 Call 0x1C181E0

Method: System.Boolean Equals(UnityEngine.UI.ColorBlock other)

Disassembly:
	0x03CD3210 BL 0x3CD2B34
	0x03CD3214 CBZ X0, 0x3CD3384
	0x03CD3218 ADRP X8, 0x480000
	0x03CD321C LDR X8, [X8 + 0xB40]
	0x03CD3220 MOV X20, X0
	0x03CD3224 LDR X1, [X8]
	0x03CD3228 BL 0x21E52E4
	0x03CD322C ADRP X23, 0x706000
	0x03CD3230 LDRB W8, [X23 + 0x78F]
	0x03CD3234 MOV X21, X0
	0x03CD3238 CBNZ W8, 0x3CD3250
	0x03CD323C ADRP X0, 0x428000
	0x03CD3240 LDR X0, [X0 + 0xF08]
	0x03CD3244 BL 0x1C16CF4
	0x03CD3248 MOVZ W8, 0x1
	0x03CD324C STRB W8, [X23 + 0x78F]
	0x03CD3250 CBZ X21, 0x3CD3384
	0x03CD3254 ADRP X24, 0x428000
	0x03CD3258 LDR X24, [X24 + 0xF08]
	0x03CD325C MOV X0, X21
	0x03CD3260 MOV X1, X31
	0x03CD3264 LDR X8, [X24]
	0x03CD3268 LDR X8, [X8 + 0xB8]
	0x03CD326C LDP S0, S1, [X8]
	0x03CD3270 BL 0x3C3E648
	0x03CD3274 ADRP X25, 0x70E000
	0x03CD3278 LDRB W8, [X25 + 0xA48]
	0x03CD327C CBNZ W8, 0x3CD3294
	0x03CD3280 ADRP X0, 0x428000
	0x03CD3284 LDR X0, [X0 + 0xF08]
	0x03CD3288 BL 0x1C16CF4
	0x03CD328C MOVZ W8, 0x1
	0x03CD3290 STRB W8, [X25 + 0xA48]
	0x03CD3294 LDR X8, [X24]
	0x03CD3298 MOV X0, X21
	0x03CD329C MOV X1, X31
	0x03CD32A0 LDR X8, [X8 + 0xB8]
	0x03CD32A4 LDP S0, S1, [X8 + 0x8]
	0x03CD32A8 BL 0x3C3E764
	0x03CD32AC LDRB W8, [X23 + 0x78F]
	0x03CD32B0 CBNZ W8, 0x3CD32C8
	0x03CD32B4 ADRP X0, 0x428000
	0x03CD32B8 LDR X0, [X0 + 0xF08]
	0x03CD32BC BL 0x1C16CF4
	0x03CD32C0 MOVZ W8, 0x1
	0x03CD32C4 STRB W8, [X23 + 0x78F]
	0x03CD32C8 LDR X8, [X24]
	0x03CD32CC ADRP X25, 0x476000
	0x03CD32D0 MOV X0, X21
	0x03CD32D4 MOV X1, X31
	0x03CD32D8 LDR X8, [X8 + 0xB8]
	0x03CD32DC LDP S0, S1, [X8]
	0x03CD32E0 LDR X25, [X25 + 0x6D8]
	0x03CD32E4 BL 0x3C3E880
	0x03CD32E8 LDRB W8, [X23 + 0x78F]
	0x03CD32EC CBNZ W8, 0x3CD3304
	0x03CD32F0 ADRP X0, 0x428000
	0x03CD32F4 LDR X0, [X0 + 0xF08]
	0x03CD32F8 BL 0x1C16CF4
	0x03CD32FC MOVZ W8, 0x1
	0x03CD3300 STRB W8, [X23 + 0x78F]
	0x03CD3304 LDR X8, [X24]
	0x03CD3308 MOV X0, X21
	0x03CD330C MOV X1, X31
	0x03CD3310 LDR X8, [X8 + 0xB8]
	0x03CD3314 LDP S0, S1, [X8]
	0x03CD3318 BL 0x3C3E99C
	0x03CD331C LDR X1, [X25]
	0x03CD3320 MOV X0, X20
	0x03CD3324 BL 0x21E52E4
	0x03CD3328 CBZ X0, 0x3CD3384
	0x03CD332C LDR X1, [X19 + 0x8]
	0x03CD3330 MOV X21, X0
	0x03CD3334 BL 0x3CD3398
	0x03CD3338 MOVZ W1, 0x1
	0x03CD333C MOV X0, X21
	0x03CD3340 BL 0x3CD364C
	0x03CD3344 LDR X8, [X22]
	0x03CD3348 LDR X9, [X21]
	0x03CD334C MOV X0, X21
	0x03CD3350 LDR X8, [X8 + 0xB8]
	0x03CD3354 LDR X10, [X9 + 0x2A8]
	0x03CD3358 LDR X1, [X9 + 0x2B0]
	0x03CD335C LDP S0, S1, [X8 + 0x30]
	0x03CD3360 LDP S2, S3, [X8 + 0x38]
	0x03CD3364 BLR X10
	0x03CD3368 MOV X0, X20
	0x03CD336C LDP X20, X19, [X31 + 0x40]
	0x03CD3370 LDP X22, X21, [X31 + 0x30]
	0x03CD3374 LDP X24, X23, [X31 + 0x20]
	0x03CD3378 LDP X30, X25, [X31 + 0x10]
	0x03CD337C LDP D9, D8, [X31], #0x50
	0x03CD3380 RET
	0x03CD3384 BL 0x1C16F20
	0x03CD3388 BL 0x1C16F28
	0x03CD338C BL 0x1C16F44
	0x03CD3390 MOV X1, X31
	0x03CD3394 BL 0x1C16DEC
	0x03CD3398 SUB X31, X31, 0x50
	0x03CD339C STP D9, D8, [X31 + 0x10]
	0x03CD33A0 STP X30, X23, [X31 + 0x20]
	0x03CD33A4 STP X22, X21, [X31 + 0x30]
	0x03CD33A8 STP X20, X19, [X31 + 0x40]
	0x03CD33AC ADRP X21, 0x714000
	0x03CD33B0 ADRP X23, 0x420000
	0x03CD33B4 LDRB W8, [X21 + 0x4C8]
	0x03CD33B8 LDR X23, [X23 + 0x598]
	0x03CD33BC MOV X20, X1
	0x03CD33C0 MOV X19, X0
	0x03CD33C4 TBNZ X8, 0x0, 0x3CD33DC
	0x03CD33C8 ADRP X0, 0x420000
	0x03CD33CC LDR X0, [X0 + 0x598]
	0x03CD33D0 BL 0x1C16CF4
	0x03CD33D4 MOVZ W8, 0x1
	0x03CD33D8 STRB W8, [X21 + 0x4C8]
	0x03CD33DC LDR X0, [X23]
	0x03CD33E0 LDR X21, [X19 + 0xD8]
	0x03CD33E4 LDR W8, [X0 + 0xE0]
	0x03CD33E8 CBNZ W8, 0x3CD33F0
	0x03CD33EC BL 0x1C16DFC
	0x03CD33F0 MOV X0, X21
	0x03CD33F4 MOV X1, X31
	0x03CD33F8 MOV X2, X31
	0x03CD33FC BL 0x3C354F8
	0x03CD3400 TBZ X0, 0x0, 0x3CD3478
	0x03CD3404 LDR X0, [X23]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x715000
	008 Move X21, 0x449000
	009 Move W8, [X22+1095]
	010 Move X21, [X21+1512]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x449000
	018 Move X0, [X0+1512]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1095], W8
	022 Move X0, [X21]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move D0, [X19]
	028 Move D3, [X19+8]
	029 Move D1, [X20]
	030 Move D2, [X20+8]
	031 Move X8, -52334592
	032 Move V8, [X8+3872]
	033 Subtract V0, V1, V0
	034 NotImplemented "Instruction INVALID not yet implemented."
	035 Subtract V1, V2, V3
	036 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	037 NotImplemented "Instruction INVALID not yet implemented."
	038 Add V0, V0, V2
	039 Add V0, V1, V0
	040 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	041 Add V0, V1, V0
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 Move X0, [X21]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move D0, [X20+16]
	049 Move D1, [X20+24]
	050 Move D2, [X19+16]
	051 Move D3, [X19+24]
	052 Subtract V0, V0, V2
	053 NotImplemented "Instruction INVALID not yet implemented."
	054 Subtract V1, V1, V3
	055 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	056 NotImplemented "Instruction INVALID not yet implemented."
	057 Add V0, V0, V2
	058 Add V0, V1, V0
	059 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	060 Add V0, V1, V0
	061 NotImplemented "Instruction FCMP not yet implemented."
	062 Move X0, [X21]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move D0, [X20+32]
	068 Move D1, [X20+40]
	069 Move D2, [X19+32]
	070 Move D3, [X19+40]
	071 Subtract V0, V0, V2
	072 NotImplemented "Instruction INVALID not yet implemented."
	073 Subtract V1, V1, V3
	074 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	075 NotImplemented "Instruction INVALID not yet implemented."
	076 Add V0, V0, V2
	077 Add V0, V1, V0
	078 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	079 Add V0, V1, V0
	080 NotImplemented "Instruction FCMP not yet implemented."
	081 Move X0, [X21]
	082 Move W8, [X0+224]
	083 Compare W8, 0
	084 JumpIfNotEqual {86}
	085 Call 0x1C17DFC
	086 Move D0, [X20+48]
	087 Move D1, [X20+56]
	088 Move D2, [X19+48]
	089 Move D3, [X19+56]
	090 Subtract V0, V0, V2
	091 NotImplemented "Instruction INVALID not yet implemented."
	092 Subtract V1, V1, V3
	093 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	094 NotImplemented "Instruction INVALID not yet implemented."
	095 Add V0, V0, V2
	096 Add V0, V1, V0
	097 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	098 Add V0, V1, V0
	099 NotImplemented "Instruction FCMP not yet implemented."
	100 Move X0, [X21]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move D0, [X20+64]
	106 Move D1, [X20+72]
	107 Move D2, [X19+64]
	108 Move D3, [X19+72]
	109 Subtract V0, V0, V2
	110 NotImplemented "Instruction INVALID not yet implemented."
	111 Subtract V1, V1, V3
	112 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	113 NotImplemented "Instruction INVALID not yet implemented."
	114 Add V0, V0, V2
	115 Add V0, V1, V0
	116 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	117 Add V0, V1, V0
	118 NotImplemented "Instruction FCMP not yet implemented."
	119 Move X0, [X21]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Move V0, [X20+80]
	125 Move V1, [X19+80]
	126 NotImplemented "Instruction FCMP not yet implemented."
	127 Move X0, [X21]
	128 Move W8, [X0+224]
	129 Compare W8, 0
	130 JumpIfNotEqual {132}
	131 Call 0x1C17DFC
	132 Move V0, [X20+84]
	133 Move V1, [X19+84]
	134 NotImplemented "Instruction FCMP not yet implemented."
	135 NotImplemented "Instruction CSET not yet implemented."
	136 Move W0, W31
	137 Move X20, [X31+32]
	138 Move X19, [X31+40]
	139 Move X22, [X31+16]
	140 Move X21, [X31+24]
	141 Move X30, [X31+8]
	142 Move V8, [X31+48]
	143 Return X0

Method: System.Boolean op_Equality(UnityEngine.UI.ColorBlock point1, UnityEngine.UI.ColorBlock point2)

Disassembly:
	0x03CD3408 LDR X21, [X19 + 0xD8]
	0x03CD340C LDR W8, [X0 + 0xE0]
	0x03CD3410 CBNZ W8, 0x3CD3418
	0x03CD3414 BL 0x1C16DFC
	0x03CD3418 MOV X0, X21
	0x03CD341C MOV X1, X20
	0x03CD3420 MOV X2, X31
	0x03CD3424 BL 0x3C354F8
	0x03CD3428 TBZ X0, 0x0, 0x3CD3630
	0x03CD342C LDR X0, [X19 + 0xD8]
	0x03CD3430 CBZ X0, 0x3CD3648
	0x03CD3434 MOV X1, X31
	0x03CD3438 BL 0x3C41858
	0x03CD343C LDR X0, [X23]
	0x03CD3440 STR S2, [X31 + 0x8]
	0x03CD3444 MOV V8.16B, V3.16B
	0x03CD3448 LDR W8, [X0 + 0xE0]
	0x03CD344C CBNZ W8, 0x3CD3454
	0x03CD3450 BL 0x1C16DFC
	0x03CD3454 MOV X0, X20
	0x03CD3458 MOV X1, X31
	0x03CD345C BL 0x3C38948
	0x03CD3460 TBZ X0, 0x0, 0x3CD3540
	0x03CD3464 CBZ X20, 0x3CD3648
	0x03CD3468 MOV X0, X20
	0x03CD346C MOV X1, X31
	0x03CD3470 BL 0x3C41858
	0x03CD3474 B 0x3CD3574
	0x03CD3478 LDR X0, [X23]
	0x03CD347C LDR W8, [X0 + 0xE0]
	0x03CD3480 CBNZ W8, 0x3CD3488
	0x03CD3484 BL 0x1C16DFC
	0x03CD3488 MOV X0, X20
	0x03CD348C MOV X1, X31
	0x03CD3490 MOV X2, X31
	0x03CD3494 BL 0x3C354F8
	0x03CD3498 TBZ X0, 0x0, 0x3CD3630

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+176], X30
	003 Move [X31+192], X22
	004 Move [X31+200], X21
	005 Move [X31+208], X20
	006 Move [X31+216], X19
	007 Move X22, 0x715000
	008 Move X21, 0x449000
	009 Move W8, [X22+1096]
	010 Move X21, [X21+1512]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x449000
	018 Move X0, [X0+1512]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1096], W8
	022 Add X0, X31, 88
	023 Move W2, 88
	024 Move X1, X20
	025 Call 0x3EB2AC0
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 0
	032 Add X1, X31, 88
	033 Move W2, 88
	034 Call 0x3EB2AC0
	035 Add X1, X31, 0
	036 Move X0, X19
	037 Call ColorBlock.Equals, X0, X1
	038 Move X20, [X31+208]
	039 Move X19, [X31+216]
	040 Move X22, [X31+192]
	041 Move X21, [X31+200]
	042 Move X30, [X31+176]
	043 And W0, W0, 1
	044 Add X31, X31, 224
	045 Return X0

Method: System.Boolean op_Inequality(UnityEngine.UI.ColorBlock point1, UnityEngine.UI.ColorBlock point2)

Disassembly:
	0x03CD349C CBZ X20, 0x3CD3648
	0x03CD34A0 MOV X0, X20
	0x03CD34A4 MOV X1, X31
	0x03CD34A8 BL 0x3C41858
	0x03CD34AC ADRP X21, 0x706000
	0x03CD34B0 LDRB W8, [X21 + 0x78F]
	0x03CD34B4 MOV V8.16B, V2.16B
	0x03CD34B8 MOV V9.16B, V3.16B
	0x03CD34BC CBNZ W8, 0x3CD34D4
	0x03CD34C0 ADRP X0, 0x428000
	0x03CD34C4 LDR X0, [X0 + 0xF08]
	0x03CD34C8 BL 0x1C16CF4
	0x03CD34CC MOVZ W8, 0x1
	0x03CD34D0 STRB W8, [X21 + 0x78F]
	0x03CD34D4 ADRP X8, 0x428000
	0x03CD34D8 LDR X8, [X8 + 0xF08]
	0x03CD34DC MOV X0, X20
	0x03CD34E0 MOV X1, X31
	0x03CD34E4 LDR X8, [X8]
	0x03CD34E8 LDR X8, [X8 + 0xB8]
	0x03CD34EC LDP S0, S1, [X8]
	0x03CD34F0 ADRP X8, 0xFFFFFFFFFCE16000
	0x03CD34F4 LDR V2, [X8 + 0xF20]
	0x03CD34F8 FSUB S0, S8, S0
	0x03CD34FC FSUB S1, S9, S1
	0x03CD3500 FMUL S0, S0, S0
	0x03CD3504 FMUL S1, S1, S1
	0x03CD3508 FADD S0, S0, S1
	0x03CD350C FCMP S0, S2
	0x03CD3510 CSET W8, MI
	0x03CD3514 STRB W8, [X19 + 0x38]
	0x03CD3518 BL 0x3C41990
	0x03CD351C LDR X8, [X23]
	0x03CD3520 MOV X21, X0
	0x03CD3524 LDR W9, [X8 + 0xE0]
	0x03CD3528 CBNZ W9, 0x3CD3534
	0x03CD352C MOV X0, X8
	0x03CD3530 BL 0x1C16DFC

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+176], X30
	003 Move [X31+192], X22
	004 Move [X31+200], X21
	005 Move [X31+208], X20
	006 Move [X31+216], X19
	007 Move X22, 0x715000
	008 Move X21, 0x449000
	009 Move W8, [X22+1097]
	010 Move X21, [X21+1512]
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x449000
	018 Move X0, [X0+1512]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X22+1097], W8
	022 Add X0, X31, 88
	023 Move W2, 88
	024 Move X1, X20
	025 Call 0x3EB2AC0
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 0
	032 Add X1, X31, 88
	033 Move W2, 88
	034 Call 0x3EB2AC0
	035 Add X1, X31, 0
	036 Move X0, X19
	037 Call ColorBlock.Equals, X0, X1
	038 Move X20, [X31+208]
	039 Move X19, [X31+216]
	040 Move X22, [X31+192]
	041 Move X21, [X31+200]
	042 Move X30, [X31+176]
	043 NotImplemented "Instruction ORN not yet implemented."
	044 And W0, W8, 1
	045 Add X31, X31, 224
	046 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03CD3534 MOV X0, X21
	0x03CD3538 MOV X1, X31
	0x03CD353C B 0x3CD35F8
	0x03CD3540 ADRP X21, 0x706000
	0x03CD3544 LDRB W8, [X21 + 0x78F]
	0x03CD3548 CBNZ W8, 0x3CD3560
	0x03CD354C ADRP X0, 0x428000
	0x03CD3550 LDR X0, [X0 + 0xF08]
	0x03CD3554 BL 0x1C16CF4
	0x03CD3558 MOVZ W8, 0x1
	0x03CD355C STRB W8, [X21 + 0x78F]
	0x03CD3560 ADRP X8, 0x428000
	0x03CD3564 LDR X8, [X8 + 0xF08]
	0x03CD3568 LDR X8, [X8]
	0x03CD356C LDR X8, [X8 + 0xB8]
	0x03CD3570 LDP S2, S3, [X8]
	0x03CD3574 LDR V0, [X31 + 0x8]
	0x03CD3578 LDR X0, [X19 + 0xD8]
	0x03CD357C FCMP S0, S2
	0x03CD3580 CSET W8, EQ
	0x03CD3584 FCMP S8, S3
	0x03CD3588 CSET W9, EQ
	0x03CD358C AND W8, W8, W9, 0x0
	0x03CD3590 STRB W8, [X19 + 0x38]
	0x03CD3594 CBZ X0, 0x3CD3648
	0x03CD3598 MOV X1, X31
	0x03CD359C BL 0x3C41990

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+96], X30
	003 Move [X31+104], X21
	004 Move [X31+112], X20
	005 Move [X31+120], X19
	006 Move X21, 0x715000
	007 Move X20, 0x449000
	008 Move W8, [X21+1098]
	009 Move X20, [X20+1512]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x449000
	016 Move X0, [X0+1512]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+1098], W8
	020 Add X0, X31, 8
	021 Move W2, 88
	022 Move X1, X19
	023 Call 0x3EB2AC0
	024 Move X0, [X20]
	025 Add X1, X31, 8
	026 Call 0x1C17E04
	027 Move X1, X31
	028 Call ValueType.GetHashCode, X0
	029 Move X20, [X31+112]
	030 Move X19, [X31+120]
	031 Move X30, [X31+96]
	032 Move X21, [X31+104]
	033 Add X31, X31, 128
	034 Return X0

