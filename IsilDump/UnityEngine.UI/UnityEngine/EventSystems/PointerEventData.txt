Type: UnityEngine.EventSystems.PointerEventData

Method: UnityEngine.GameObject get_pointerEnter()

Disassembly:
	0x03E4FE7C LDR X1, [X8 + 0x280]
	0x03E4FE80 BLR X9

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_pointerEnter(UnityEngine.GameObject value)

Disassembly:
	0x03E4FE84 STR W0, [X31 + 0xC]
	0x03E4FE88 ADD X0, X31, 0xC

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: UnityEngine.GameObject get_lastPress()

Disassembly:
	0x03E4FE8C MOV X1, X31
	0x03E4FE90 BL 0x337B6E0

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_lastPress(UnityEngine.GameObject value)

Disassembly:
	0x03E4FE94 LDR W8, [X20 + 0x18]
	0x03E4FE98 CMP W8, 0x11

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: UnityEngine.GameObject get_rawPointerPress()

Disassembly:
	0x03E4FE9C B.LS 0x3E4FF88
	0x03E4FEA0 CMP W8, 0x12

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_rawPointerPress(UnityEngine.GameObject value)

Disassembly:
	0x03E4FEA4 STR X0, [X20 + 0xA8]
	0x03E4FEA8 B.EQ 0x3E4FF88

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: UnityEngine.GameObject get_pointerDrag()

Disassembly:
	0x03E4FEAC ADRP X8, 0x31C000
	0x03E4FEB0 LDR X8, [X8 + 0x880]

ISIL:
	001 Move X0, [X0+64]
	002 Return X0

Method: System.Void set_pointerDrag(UnityEngine.GameObject value)

Disassembly:
	0x03E4FEB4 LDR X8, [X8]
	0x03E4FEB8 STR X8, [X20 + 0xB0]

ISIL:
	001 Move [X0+64], X1
	002 Return 

Method: UnityEngine.GameObject get_pointerClick()

Disassembly:
	0x03E4FEBC LDR X0, [X19 + 0x8]
	0x03E4FEC0 CBZ X0, 0x3E4FF8C

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_pointerClick(UnityEngine.GameObject value)

Disassembly:
	0x03E4FEC4 LDR X8, [X0]
	0x03E4FEC8 LDR X9, [X8 + 0x288]

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: UnityEngine.EventSystems.RaycastResult get_pointerCurrentRaycast()

Disassembly:
	0x03E4FECC LDR X1, [X8 + 0x290]
	0x03E4FED0 BLR X9
	0x03E4FED4 STR W0, [X31 + 0xC]
	0x03E4FED8 ADD X0, X31, 0xC

ISIL:
	001 Add X1, X0, 80
	002 Move W2, 80
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_pointerCurrentRaycast(UnityEngine.EventSystems.RaycastResult value)

Disassembly:
	0x03E4FEDC MOV X1, X31
	0x03E4FEE0 BL 0x337B6E0
	0x03E4FEE4 LDR W8, [X20 + 0x18]
	0x03E4FEE8 CMP W8, 0x13
	0x03E4FEEC B.LS 0x3E4FF88
	0x03E4FEF0 CMP W8, 0x14

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 80
	003 Move W2, 80
	004 Call 0x3EB2B30
	005 Move X30, [X31+16]
	006 Return 

Method: UnityEngine.EventSystems.RaycastResult get_pointerPressRaycast()

Disassembly:
	0x03E4FEF4 STR X0, [X20 + 0xB8]
	0x03E4FEF8 B.EQ 0x3E4FF88
	0x03E4FEFC ADRP X8, 0x31C000
	0x03E4FF00 LDR X8, [X8 + 0x898]

ISIL:
	001 Add X1, X0, 160
	002 Move W2, 80
	003 Move X0, X8
	004 Call 0x3EB2AC0
	005 Return X0

Method: System.Void set_pointerPressRaycast(UnityEngine.EventSystems.RaycastResult value)

Disassembly:
	0x03E4FF04 ADD X0, X19, 0x24
	0x03E4FF08 MOV X1, X31
	0x03E4FF0C LDR X8, [X8]
	0x03E4FF10 STR X8, [X20 + 0xC0]
	0x03E4FF14 BL 0x337B6E0
	0x03E4FF18 LDR W8, [X20 + 0x18]

ISIL:
	001 Move [X31-16], X30
	002 Add X0, X0, 160
	003 Move W2, 80
	004 Call 0x3EB2B30
	005 Move X30, [X31+16]
	006 Return 

Method: System.Boolean get_eligibleForClick()

Disassembly:
	0x03E4FF1C CMP W8, 0x15
	0x03E4FF20 B.LS 0x3E4FF88

ISIL:
	001 Move W0, [X0+248]
	002 Return X0

Method: System.Void set_eligibleForClick(System.Boolean value)

Disassembly:
	0x03E4FF24 CMP W8, 0x16
	0x03E4FF28 STR X0, [X20 + 0xC8]
	0x03E4FF2C B.EQ 0x3E4FF88

ISIL:
	001 And W8, W1, 1
	002 Move [X0+248], W8
	003 Return 

Method: System.Int32 get_displayIndex()

Disassembly:
	0x03E4FF30 ADRP X8, 0x31C000
	0x03E4FF34 LDR X8, [X8 + 0x8A0]

ISIL:
	001 Move W0, [X0+252]
	002 Return X0

Method: System.Void set_displayIndex(System.Int32 value)

Disassembly:
	0x03E4FF38 ADD X0, X19, 0x28
	0x03E4FF3C MOV X1, X31

ISIL:
	001 Move [X0+252], W1
	002 Return 

Method: System.Int32 get_pointerId()

Disassembly:
	0x03E4FF40 LDR X8, [X8]
	0x03E4FF44 STR X8, [X20 + 0xD0]

ISIL:
	001 Move W0, [X0+256]
	002 Return X0

Method: System.Void set_pointerId(System.Int32 value)

Disassembly:
	0x03E4FF48 BL 0x337B6E0
	0x03E4FF4C LDR W8, [X20 + 0x18]

ISIL:
	001 Move [X0+256], W1
	002 Return 

Method: UnityEngine.Vector2 get_position()

Disassembly:
	0x03E4FF50 CMP W8, 0x17
	0x03E4FF54 B.LS 0x3E4FF88
	0x03E4FF58 STR X0, [X20 + 0xD8]

ISIL:
	001 Move V0, [X0+260]
	002 Move V1, [X0+264]
	003 Return X0

Method: System.Void set_position(UnityEngine.Vector2 value)

Disassembly:
	0x03E4FF5C MOV X0, X20
	0x03E4FF60 MOV X1, X31
	0x03E4FF64 BL 0x32278CC

ISIL:
	001 Move [X0+260], S0
	002 Move [X0+264], S1
	003 Return 

Method: UnityEngine.Vector2 get_delta()

Disassembly:
	0x03E4FF68 B 0x3E4FF78
	0x03E4FF6C ADRP X8, 0x2A4000
	0x03E4FF70 LDR X8, [X8 + 0x988]

ISIL:
	001 Move V0, [X0+268]
	002 Move V1, [X0+272]
	003 Return X0

Method: System.Void set_delta(UnityEngine.Vector2 value)

Disassembly:
	0x03E4FF74 LDR X0, [X8]
	0x03E4FF78 LDP X20, X19, [X31 + 0x30]
	0x03E4FF7C LDR X30, [X31 + 0x20]

ISIL:
	001 Move [X0+268], S0
	002 Move [X0+272], S1
	003 Return 

Method: UnityEngine.Vector2 get_pressPosition()

Disassembly:
	0x03E4FF80 ADD X31, X31, 0x40
	0x03E4FF84 RET
	0x03E4FF88 BL 0x1C16F28

ISIL:
	001 Move V0, [X0+276]
	002 Move V1, [X0+280]
	003 Return X0

Method: System.Void set_pressPosition(UnityEngine.Vector2 value)

Disassembly:
	0x03E4FF8C BL 0x1C16F20
	0x03E4FF90 STR X30, [X31 - 0x20]!
	0x03E4FF94 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X0+276], S0
	002 Move [X0+280], S1
	003 Return 

Method: UnityEngine.Vector3 get_worldPosition()

Disassembly:
	0x03E4FF98 ADRP X20, 0x599000
	0x03E4FF9C ADRP X19, 0x2CB000
	0x03E4FFA0 LDRB W8, [X20 + 0x859]
	0x03E4FFA4 LDR X19, [X19 + 0xDF8]

ISIL:
	001 Move V0, [X0+284]
	002 Move V1, [X0+288]
	003 Move V2, [X0+292]
	004 Return X0

Method: System.Void set_worldPosition(UnityEngine.Vector3 value)

Disassembly:
	0x03E4FFA8 TBNZ X8, 0x0, 0x3E4FFD8
	0x03E4FFAC ADRP X0, 0x2CB000
	0x03E4FFB0 LDR X0, [X0 + 0xDF8]
	0x03E4FFB4 BL 0x1C16CF4

ISIL:
	001 Move [X0+284], S0
	002 Move [X0+288], S1
	003 Move [X0+292], S2
	004 Return 

Method: UnityEngine.Vector3 get_worldNormal()

Disassembly:
	0x03E4FFB8 ADRP X0, 0x31C000
	0x03E4FFBC LDR X0, [X0 + 0x8D8]
	0x03E4FFC0 BL 0x1C16CF4
	0x03E4FFC4 ADRP X0, 0x31C000

ISIL:
	001 Move V0, [X0+296]
	002 Move V1, [X0+300]
	003 Move V2, [X0+304]
	004 Return X0

Method: System.Void set_worldNormal(UnityEngine.Vector3 value)

Disassembly:
	0x03E4FFC8 LDR X0, [X0 + 0x8E0]
	0x03E4FFCC BL 0x1C16CF4
	0x03E4FFD0 MOVZ W8, 0x1
	0x03E4FFD4 STRB W8, [X20 + 0x859]

ISIL:
	001 Move [X0+296], S0
	002 Move [X0+300], S1
	003 Move [X0+304], S2
	004 Return 

Method: System.Single get_clickTime()

Disassembly:
	0x03E4FFD8 LDR X0, [X19]
	0x03E4FFDC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move V0, [X0+308]
	002 Return V0

Method: System.Void set_clickTime(System.Single value)

Disassembly:
	0x03E4FFE0 CBNZ W8, 0x3E4FFEC
	0x03E4FFE4 BL 0x1C16DFC

ISIL:
	001 Move [X0+308], S0
	002 Return 

Method: System.Int32 get_clickCount()

Disassembly:
	0x03E4FFE8 LDR X0, [X19]
	0x03E4FFEC LDR X8, [X0 + 0xB8]

ISIL:
	001 Move W0, [X0+312]
	002 Return X0

Method: System.Void set_clickCount(System.Int32 value)

Disassembly:
	0x03E4FFF0 LDR X8, [X8]
	0x03E4FFF4 CBZ X8, 0x3E50050

ISIL:
	001 Move [X0+312], W1
	002 Return 

Method: UnityEngine.Vector2 get_scrollDelta()

Disassembly:
	0x03E4FFF8 LDR W9, [X8 + 0x18]
	0x03E4FFFC CMP W9, 0x1
	0x03E50000 B.LT 0x3E50040

ISIL:
	001 Move V0, [X0+316]
	002 Move V1, [X0+320]
	003 Return X0

Method: System.Void set_scrollDelta(UnityEngine.Vector2 value)

Disassembly:
	0x03E50004 LDR W9, [X0 + 0xE0]
	0x03E50008 CBNZ W9, 0x3E50020
	0x03E5000C BL 0x1C16DFC

ISIL:
	001 Move [X0+316], S0
	002 Move [X0+320], S1
	003 Return 

Method: System.Boolean get_useDragThreshold()

Disassembly:
	0x03E50010 LDR X8, [X19]
	0x03E50014 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move W0, [X0+324]
	002 Return X0

Method: System.Void set_useDragThreshold(System.Boolean value)

Disassembly:
	0x03E50018 LDR X8, [X8]
	0x03E5001C CBZ X8, 0x3E50050
	0x03E50020 ADRP X9, 0x31B000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+324], W8
	003 Return 

Method: System.Boolean get_dragging()

Disassembly:
	0x03E50024 LDR X9, [X9 + 0x8E0]
	0x03E50028 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+325]
	002 Return X0

Method: System.Void set_dragging(System.Boolean value)

Disassembly:
	0x03E5002C MOV X0, X8
	0x03E50030 MOV W1, W31
	0x03E50034 LDR X2, [X9]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+325], W8
	003 Return 

Method: UnityEngine.EventSystems.PointerEventData/InputButton get_button()

Disassembly:
	0x03E50038 LDR X30, [X31], #0x20
	0x03E5003C B 0x301BCCC

ISIL:
	001 Move W0, [X0+328]
	002 Return X0

Method: System.Void set_button(UnityEngine.EventSystems.PointerEventData/InputButton value)

Disassembly:
	0x03E50040 LDP X20, X19, [X31 + 0x10]
	0x03E50044 MOV X0, X31

ISIL:
	001 Move [X0+328], W1
	002 Return 

Method: System.Single get_pressure()

Disassembly:
	0x03E50048 LDR X30, [X31], #0x20
	0x03E5004C RET

ISIL:
	001 Move V0, [X0+332]
	002 Return V0

Method: System.Void set_pressure(System.Single value)

Disassembly:
	0x03E50050 BL 0x1C16F20
	0x03E50054 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X0+332], S0
	002 Return 

Method: System.Single get_tangentialPressure()

Disassembly:
	0x03E50058 STP X20, X19, [X31 + 0x10]
	0x03E5005C ADRP X20, 0x598000

ISIL:
	001 Move V0, [X0+336]
	002 Return V0

Method: System.Void set_tangentialPressure(System.Single value)

Disassembly:
	0x03E50060 ADRP X21, 0x2CA000
	0x03E50064 LDRB W8, [X20 + 0x85A]

ISIL:
	001 Move [X0+336], S0
	002 Return 

Method: System.Single get_altitudeAngle()

Disassembly:
	0x03E50068 LDR X21, [X21 + 0xDF8]
	0x03E5006C MOV X19, X0

ISIL:
	001 Move V0, [X0+340]
	002 Return V0

Method: System.Void set_altitudeAngle(System.Single value)

Disassembly:
	0x03E50070 TBNZ X8, 0x0, 0x3E500C4
	0x03E50074 ADRP X0, 0x2A3000

ISIL:
	001 Move [X0+340], S0
	002 Return 

Method: System.Single get_azimuthAngle()

Disassembly:
	0x03E50078 LDR X0, [X0 + 0xA28]
	0x03E5007C BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+344]
	002 Return V0

Method: System.Void set_azimuthAngle(System.Single value)

Disassembly:
	0x03E50080 ADRP X0, 0x2CA000
	0x03E50084 LDR X0, [X0 + 0xDF8]

ISIL:
	001 Move [X0+344], S0
	002 Return 

Method: System.Single get_twist()

Disassembly:
	0x03E50088 BL 0x1C16CF4
	0x03E5008C ADRP X0, 0x31B000

ISIL:
	001 Move V0, [X0+348]
	002 Return V0

Method: System.Void set_twist(System.Single value)

Disassembly:
	0x03E50090 LDR X0, [X0 + 0x8E8]
	0x03E50094 BL 0x1C16CF4

ISIL:
	001 Move [X0+348], S0
	002 Return 

Method: UnityEngine.Vector2 get_tilt()

Disassembly:
	0x03E50098 ADRP X0, 0x31B000
	0x03E5009C LDR X0, [X0 + 0x8F0]
	0x03E500A0 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+352]
	002 Move V1, [X0+356]
	003 Return X0

Method: System.Void set_tilt(UnityEngine.Vector2 value)

Disassembly:
	0x03E500A4 ADRP X0, 0x31B000
	0x03E500A8 LDR X0, [X0 + 0x8F8]
	0x03E500AC BL 0x1C16CF4

ISIL:
	001 Move [X0+352], S0
	002 Move [X0+356], S1
	003 Return 

Method: UnityEngine.PenStatus get_penStatus()

Disassembly:
	0x03E500B0 ADRP X0, 0x31B000
	0x03E500B4 LDR X0, [X0 + 0x900]

ISIL:
	001 Move W0, [X0+360]
	002 Return X0

Method: System.Void set_penStatus(UnityEngine.PenStatus value)

Disassembly:
	0x03E500B8 BL 0x1C16CF4
	0x03E500BC MOVZ W8, 0x1

ISIL:
	001 Move [X0+360], W1
	002 Return 

Method: UnityEngine.Vector2 get_radius()

Disassembly:
	0x03E500C0 STRB W8, [X20 + 0x85A]
	0x03E500C4 LDR X0, [X21]
	0x03E500C8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move V0, [X0+364]
	002 Move V1, [X0+368]
	003 Return X0

Method: System.Void set_radius(UnityEngine.Vector2 value)

Disassembly:
	0x03E500CC CBNZ W8, 0x3E500D8
	0x03E500D0 BL 0x1C16DFC
	0x03E500D4 LDR X0, [X21]

ISIL:
	001 Move [X0+364], S0
	002 Move [X0+368], S1
	003 Return 

Method: UnityEngine.Vector2 get_radiusVariance()

Disassembly:
	0x03E500D8 LDR X8, [X0 + 0xB8]
	0x03E500DC LDR X0, [X8]
	0x03E500E0 CBZ X0, 0x3E501E4

ISIL:
	001 Move V0, [X0+372]
	002 Move V1, [X0+376]
	003 Return X0

Method: System.Void set_radiusVariance(UnityEngine.Vector2 value)

Disassembly:
	0x03E500E4 ADRP X8, 0x31B000
	0x03E500E8 LDR X8, [X8 + 0x8E8]
	0x03E500EC MOV X1, X19

ISIL:
	001 Move [X0+372], S0
	002 Move [X0+376], S1
	003 Return 

Method: System.Boolean get_fullyExited()

Disassembly:
	0x03E500F0 LDR X2, [X8]
	0x03E500F4 BL 0x301CD00

ISIL:
	001 Move W0, [X0+380]
	002 Return X0

Method: System.Void set_fullyExited(System.Boolean value)

Disassembly:
	0x03E500F8 MOV W20, W0
	0x03E500FC CMP W0, 0x1
	0x03E50100 B.LT 0x3E50168

ISIL:
	001 And W8, W1, 1
	002 Move [X0+380], W8
	003 Return 

Method: System.Boolean get_reentered()

Disassembly:
	0x03E50104 LDR X0, [X21]
	0x03E50108 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+381]
	002 Return X0

Method: System.Void set_reentered(System.Boolean value)

Disassembly:
	0x03E5010C CBNZ W8, 0x3E50118
	0x03E50110 BL 0x1C16DFC
	0x03E50114 LDR X0, [X21]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+381], W8
	003 Return 

Method: System.Void .ctor(UnityEngine.EventSystems.EventSystem eventSystem)

Disassembly:
	0x03E50118 LDR X8, [X0 + 0xB8]
	0x03E5011C LDR X0, [X8]
	0x03E50120 CBZ X0, 0x3E501E4
	0x03E50124 ADRP X8, 0x31B000
	0x03E50128 LDR X8, [X8 + 0x8F8]
	0x03E5012C MOV W1, W20
	0x03E50130 LDR X2, [X8]
	0x03E50134 BL 0x301DA48
	0x03E50138 LDR X8, [X21]
	0x03E5013C LDR X8, [X8 + 0xB8]
	0x03E50140 LDR X0, [X8]
	0x03E50144 CBZ X0, 0x3E501E4
	0x03E50148 ADRP X8, 0x31B000
	0x03E5014C LDR X8, [X8 + 0x8F0]
	0x03E50150 MOV X2, X19
	0x03E50154 LDP X20, X19, [X31 + 0x10]
	0x03E50158 MOV W1, W31
	0x03E5015C LDR X3, [X8]
	0x03E50160 LDP X30, X21, [X31], #0x20
	0x03E50164 B 0x301CEEC
	0x03E50168 CBZ W20, 0x3E50194
	0x03E5016C ADRP X8, 0x31B000
	0x03E50170 LDR X8, [X8 + 0x900]
	0x03E50174 LDR X20, [X8]
	0x03E50178 CBZ X19, 0x3E501A0
	0x03E5017C LDR X8, [X19]
	0x03E50180 MOV X0, X19
	0x03E50184 LDP X9, X1, [X8 + 0x168]
	0x03E50188 BLR X9
	0x03E5018C MOV X1, X0
	0x03E50190 B 0x3E501A4
	0x03E50194 LDP X20, X19, [X31 + 0x10]
	0x03E50198 LDP X30, X21, [X31], #0x20
	0x03E5019C RET
	0x03E501A0 MOV X1, X31
	0x03E501A4 MOV X0, X20
	0x03E501A8 MOV X2, X31
	0x03E501AC BL 0x321B938
	0x03E501B0 ADRP X8, 0x2A3000
	0x03E501B4 LDR X8, [X8 + 0xA28]
	0x03E501B8 MOV X19, X0
	0x03E501BC LDR X8, [X8]
	0x03E501C0 LDR W9, [X8 + 0xE0]
	0x03E501C4 CBNZ W9, 0x3E501D0
	0x03E501C8 MOV X0, X8
	0x03E501CC BL 0x1C16DFC
	0x03E501D0 MOV X0, X19
	0x03E501D4 LDP X20, X19, [X31 + 0x10]
	0x03E501D8 MOV X1, X31
	0x03E501DC LDP X30, X21, [X31], #0x20
	0x03E501E0 B 0x3C0649C
	0x03E501E4 BL 0x1C16F20
	0x03E501E8 LDRB W0, [X0 + 0x38]
	0x03E501EC RET
	0x03E501F0 AND W8, W1, 0x1
	0x03E501F4 STRB W8, [X0 + 0x38]
	0x03E501F8 RET
	0x03E501FC LDR W0, [X0 + 0x3C]
	0x03E50200 RET
	0x03E50204 STR W1, [X0 + 0x3C]
	0x03E50208 RET
	0x03E5020C LDR X0, [X0 + 0x28]
	0x03E50210 RET
	0x03E50214 LDR X0, [X0 + 0x30]
	0x03E50218 RET
	0x03E5021C STR X1, [X0 + 0x30]
	0x03E50220 RET
	0x03E50224 LDR X0, [X0 + 0x40]
	0x03E50228 RET
	0x03E5022C MOV X0, X31
	0x03E50230 RET
	0x03E50234 LDRB W0, [X0 + 0x48]
	0x03E50238 RET
	0x03E5023C STR X30, [X31 - 0x30]!
	0x03E50240 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x599000
	008 Move X22, 0x2AA000
	009 Move X21, 0x2AA000
	010 Move W8, [X23+2132]
	011 Move X22, [X22+1352]
	012 Move X21, [X21+1360]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {27}
	019 Move X0, 0x2AA000
	020 Move X0, [X0+1360]
	021 Call 0x1C17CF4
	022 Move X0, 0x2AA000
	023 Move X0, [X0+1352]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X23+2132], W8
	027 Move X0, [X22]
	028 Add X22, X19, 260
	029 Call 0x1C17F10
	030 Move X1, [X21]
	031 Move X21, X0
	032 Call List`1<Object>..ctor, X0
	033 Move X0, X19
	034 Move X1, X31
	035 Move [X19+240], X21
	036 Call Object..ctor, X0
	037 NotImplemented "Instruction MOVI not yet implemented."
	038 Move [X19+24], X20
	039 Move [X19+248], W31
	040 Move [X19+252], D0
	041 Move X20, 0x58A000
	042 Move W8, [X20+1935]
	043 Compare W8, 0
	044 JumpIfNotEqual {50}
	045 Move X0, 0x2AC000
	046 Move X0, [X0+3848]
	047 Call 0x1C17CF4
	048 Move W8, 1
	049 Move [X20+1935], W8
	050 Move X8, 0x2AC000
	051 Move X8, [X8+3848]
	052 Move X8, [X8]
	053 Move X9, [X8+184]
	054 Move V0, [X9]
	055 Move [X22], D0
	056 Move X9, [X8+184]
	057 Move V0, [X9]
	058 Move [X22+8], D0
	059 Move X9, [X8+184]
	060 Move V0, [X9]
	061 Add X9, X19, 308
	062 Move [X22+16], D0
	063 Move [X9], X31
	064 Move X9, [X8+184]
	065 Move V0, [X9]
	066 Move W9, 1
	067 Move [X22+56], D0
	068 NotImplemented "Instruction STRH not yet implemented."
	069 Add X9, X19, 328
	070 NotImplemented "Instruction MOVI not yet implemented."
	071 Move [X9], V0
	072 Move [X9+8], V0
	073 Move [X9+32], W31
	074 Move X9, [X8+184]
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move V0, [X9]
	078 Move [X22+104], D0
	079 Move X8, [X8+184]
	080 Move V0, [X8]
	081 Move [X22+112], D0
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X30, [X31+48]
	085 Move X23, [X31+56]
	086 Return 

Method: System.Boolean IsPointerMoving()

Disassembly:
	0x03E50244 STP X20, X19, [X31 + 0x20]
	0x03E50248 ADRP X21, 0x598000
	0x03E5024C ADRP X22, 0x31B000
	0x03E50250 ADRP X20, 0x31B000
	0x03E50254 LDRB W8, [X21 + 0x85B]
	0x03E50258 LDR X22, [X22 + 0x908]
	0x03E5025C LDR X20, [X20 + 0x910]
	0x03E50260 MOV X19, X0

ISIL:
	001 Move V0, [X0+268]
	002 Move V1, [X0+272]
	003 Multiply S0, S0, S0
	004 Multiply S1, S1, S1
	005 Add S0, S0, S1
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: System.Boolean IsScrolling()

Disassembly:
	0x03E50264 TBNZ X8, 0x0, 0x3E50288
	0x03E50268 ADRP X0, 0x31B000
	0x03E5026C LDR X0, [X0 + 0x910]
	0x03E50270 BL 0x1C16CF4
	0x03E50274 ADRP X0, 0x31B000
	0x03E50278 LDR X0, [X0 + 0x908]
	0x03E5027C BL 0x1C16CF4
	0x03E50280 MOVZ W8, 0x1

ISIL:
	001 Move V0, [X0+316]
	002 Move V1, [X0+320]
	003 Multiply S0, S0, S0
	004 Multiply S1, S1, S1
	005 Add S0, S0, S1
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction CSET not yet implemented."
	008 Return X0

Method: UnityEngine.Camera get_enterEventCamera()

Disassembly:
	0x03E50284 STRB W8, [X21 + 0x85B]
	0x03E50288 LDR X0, [X22]
	0x03E5028C BL 0x1C16F10
	0x03E50290 LDR X1, [X20]
	0x03E50294 MOV X20, X0
	0x03E50298 BL 0x301B7C4
	0x03E5029C MOVZ W8, 0x1
	0x03E502A0 MOVZ W9, 0xA
	0x03E502A4 STR X20, [X19 + 0x20]
	0x03E502A8 STRB W8, [X19 + 0x38]
	0x03E502AC STR W9, [X19 + 0x3C]
	0x03E502B0 STRB W8, [X19 + 0x48]
	0x03E502B4 MOV X0, X19
	0x03E502B8 LDP X20, X19, [X31 + 0x20]
	0x03E502BC LDP X22, X21, [X31 + 0x10]
	0x03E502C0 MOV X1, X31
	0x03E502C4 LDR X30, [X31], #0x30
	0x03E502C8 B 0x3C36C30
	0x03E502CC STR X30, [X31 - 0x40]!
	0x03E502D0 STP X24, X23, [X31 + 0x10]
	0x03E502D4 STP X22, X21, [X31 + 0x20]
	0x03E502D8 STP X20, X19, [X31 + 0x30]
	0x03E502DC ADRP X21, 0x598000
	0x03E502E0 ADRP X20, 0x31B000
	0x03E502E4 LDRB W8, [X21 + 0x85C]
	0x03E502E8 LDR X20, [X20 + 0x918]
	0x03E502EC MOV X19, X0
	0x03E502F0 TBNZ X8, 0x0, 0x3E50338
	0x03E502F4 ADRP X0, 0x31B000
	0x03E502F8 LDR X0, [X0 + 0x918]
	0x03E502FC BL 0x1C16CF4
	0x03E50300 ADRP X0, 0x31B000
	0x03E50304 LDR X0, [X0 + 0x920]
	0x03E50308 BL 0x1C16CF4
	0x03E5030C ADRP X0, 0x31B000
	0x03E50310 LDR X0, [X0 + 0x928]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x599000
	006 Move X20, 0x2A4000
	007 Move W8, [X21+2133]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2A4000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2133], W8
	019 Move X0, [X20]
	020 Move X20, [X19+88]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {39}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X0, X31
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0
	039 Move X0, [X19+88]
	040 Compare X0, 0
	041 JumpIfEqual {50}
	042 Move X8, [X0]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X2, [X8+600]
	046 Move X1, [X8+608]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 CallNoReturn X2
	050 Call 0x1C17F20

Method: UnityEngine.Camera get_pressEventCamera()

Disassembly:
	0x03E50314 BL 0x1C16CF4
	0x03E50318 ADRP X0, 0x31B000
	0x03E5031C LDR X0, [X0 + 0x930]
	0x03E50320 BL 0x1C16CF4
	0x03E50324 ADRP X0, 0x2A3000
	0x03E50328 LDR X0, [X0 + 0x598]
	0x03E5032C BL 0x1C16CF4
	0x03E50330 MOVZ W8, 0x1
	0x03E50334 STRB W8, [X21 + 0x85C]
	0x03E50338 LDR X1, [X19 + 0x20]
	0x03E5033C LDR X2, [X20]
	0x03E50340 MOV X0, X19
	0x03E50344 BL 0x21A443C
	0x03E50348 LDR X0, [X19 + 0x20]
	0x03E5034C CBZ X0, 0x3E503F4
	0x03E50350 LDR W8, [X0 + 0x18]
	0x03E50354 SUBS W20, W8, 0x1
	0x03E50358 B.MI 0x3E503F8
	0x03E5035C ADRP X22, 0x31B000
	0x03E50360 ADRP X23, 0x2A3000
	0x03E50364 ADRP X24, 0x31B000
	0x03E50368 LDR X22, [X22 + 0x930]
	0x03E5036C LDR X23, [X23 + 0x598]
	0x03E50370 LDR X24, [X24 + 0x920]
	0x03E50374 LDR X2, [X22]
	0x03E50378 MOV W1, W20
	0x03E5037C BL 0x301BCCC
	0x03E50380 LDR X8, [X23]
	0x03E50384 MOV X21, X0
	0x03E50388 LDR W9, [X8 + 0xE0]
	0x03E5038C CBNZ W9, 0x3E50398
	0x03E50390 MOV X0, X8
	0x03E50394 BL 0x1C16DFC
	0x03E50398 MOV X0, X21
	0x03E5039C MOV X1, X31
	0x03E503A0 BL 0x3C38948

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x599000
	006 Move X20, 0x2A4000
	007 Move W8, [X21+2134]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2A4000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2134], W8
	019 Move X0, [X20]
	020 Move X20, [X19+168]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {39}
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X0, X31
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return X0
	039 Move X0, [X19+168]
	040 Compare X0, 0
	041 JumpIfEqual {50}
	042 Move X8, [X0]
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X2, [X8+600]
	046 Move X1, [X8+608]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 CallNoReturn X2
	050 Call 0x1C17F20

Method: UnityEngine.GameObject get_pointerPress()

Disassembly:
	0x03E503A4 TBZ X0, 0x0, 0x3E503D0
	0x03E503A8 LDR X0, [X19 + 0x20]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_pointerPress(UnityEngine.GameObject value)

Disassembly:
	0x03E503AC CBZ X0, 0x3E503F4
	0x03E503B0 LDR X2, [X22]
	0x03E503B4 MOV W1, W20
	0x03E503B8 BL 0x301BCCC
	0x03E503BC CBZ X0, 0x3E503F4
	0x03E503C0 LDR X8, [X0]
	0x03E503C4 LDP X9, X1, [X8 + 0x1C8]
	0x03E503C8 BLR X9
	0x03E503CC TBNZ X0, 0x0, 0x3E503E4
	0x03E503D0 LDR X0, [X19 + 0x20]
	0x03E503D4 CBZ X0, 0x3E503F4
	0x03E503D8 LDR X2, [X24]
	0x03E503DC MOV W1, W20
	0x03E503E0 BL 0x301DA48
	0x03E503E4 SUBS W20, W20, 0x1
	0x03E503E8 B.MI 0x3E503F8
	0x03E503EC LDR X0, [X19 + 0x20]
	0x03E503F0 CBNZ X0, 0x3E50374
	0x03E503F4 BL 0x1C16F20
	0x03E503F8 LDP X20, X19, [X31 + 0x30]
	0x03E503FC LDP X22, X21, [X31 + 0x20]
	0x03E50400 LDP X24, X23, [X31 + 0x10]
	0x03E50404 LDR X30, [X31], #0x40
	0x03E50408 RET
	0x03E5040C LDRB W0, [X0 + 0x49]
	0x03E50410 RET
	0x03E50414 STR X30, [X31 - 0x20]!
	0x03E50418 STP X20, X19, [X31 + 0x10]
	0x03E5041C ADRP X20, 0x598000
	0x03E50420 LDRB W8, [X20 + 0x85E]
	0x03E50424 MOV X19, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x599000
	007 Move X21, 0x2A4000
	008 Move W8, [X22+2135]
	009 Move X21, [X21+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2A4000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2135], W8
	021 Move X0, [X21]
	022 Move X21, [X20+40]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X19
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfEqual {38}
	035 Move X8, [X20+40]
	036 Move [X20+40], X19
	037 Move [X20+48], X8
	038 Move X20, [X31+32]
	039 Move X19, [X31+40]
	040 Move X22, [X31+16]
	041 Move X21, [X31+24]
	042 Move X30, [X31+48]
	043 Return 

Method: System.String ToString()

Disassembly:
	0x03E50428 TBNZ X8, 0x0, 0x3E50440
	0x03E5042C ADRP X0, 0x31B000
	0x03E50430 LDR X0, [X0 + 0x938]
	0x03E50434 BL 0x1C16CF4
	0x03E50438 MOVZ W8, 0x1
	0x03E5043C STRB W8, [X20 + 0x85E]
	0x03E50440 LDR X20, [X19 + 0x50]
	0x03E50444 CBNZ X20, 0x3E5046C
	0x03E50448 ADRP X8, 0x31B000
	0x03E5044C LDR X8, [X8 + 0x938]
	0x03E50450 LDR X0, [X8]
	0x03E50454 BL 0x1C16F10
	0x03E50458 MOV X1, X31
	0x03E5045C MOV X20, X0
	0x03E50460 BL 0x33BDD8C
	0x03E50464 STR X19, [X20 + 0x18]
	0x03E50468 STR X20, [X19 + 0x50]
	0x03E5046C MOV X0, X20
	0x03E50470 LDP X20, X19, [X31 + 0x10]
	0x03E50474 LDR X30, [X31], #0x20
	0x03E50478 RET
	0x03E5047C STR D8, [X31 - 0x40]!
	0x03E50480 STP X30, X23, [X31 + 0x10]
	0x03E50484 STP X22, X21, [X31 + 0x20]
	0x03E50488 STP X20, X19, [X31 + 0x30]
	0x03E5048C ADRP X21, 0x598000
	0x03E50490 ADRP X23, 0x2A3000
	0x03E50494 LDRB W8, [X21 + 0x85F]
	0x03E50498 LDR X23, [X23 + 0x598]
	0x03E5049C MOV X20, X1
	0x03E504A0 MOV X19, X0
	0x03E504A4 TBNZ X8, 0x0, 0x3E504BC
	0x03E504A8 ADRP X0, 0x2A3000
	0x03E504AC LDR X0, [X0 + 0x598]
	0x03E504B0 BL 0x1C16CF4
	0x03E504B4 MOVZ W8, 0x1
	0x03E504B8 STRB W8, [X21 + 0x85F]
	0x03E504BC LDR X0, [X23]
	0x03E504C0 STR X31, [X31 + 0x8]
	0x03E504C4 LDR X21, [X19 + 0x8]
	0x03E504C8 LDR X22, [X20 + 0x8]
	0x03E504CC LDR W8, [X0 + 0xE0]
	0x03E504D0 CBNZ W8, 0x3E504D8
	0x03E504D4 BL 0x1C16DFC
	0x03E504D8 MOV X0, X21
	0x03E504DC MOV X1, X22
	0x03E504E0 MOV X2, X31
	0x03E504E4 BL 0x3C354F8
	0x03E504E8 TBZ X0, 0x0, 0x3E50620
	0x03E504EC LDR X0, [X19 + 0x8]
	0x03E504F0 CBZ X0, 0x3E50830
	0x03E504F4 LDR X8, [X0]
	0x03E504F8 LDR X9, [X8 + 0x258]
	0x03E504FC LDR X1, [X8 + 0x260]
	0x03E50500 BLR X9
	0x03E50504 LDR X8, [X20 + 0x8]
	0x03E50508 CBZ X8, 0x3E50830
	0x03E5050C LDR X9, [X8]
	0x03E50510 MOV X21, X0
	0x03E50514 MOV X0, X8
	0x03E50518 LDR X10, [X9 + 0x258]
	0x03E5051C LDR X1, [X9 + 0x260]
	0x03E50520 BLR X10
	0x03E50524 LDR X8, [X23]
	0x03E50528 MOV X22, X0
	0x03E5052C LDR W9, [X8 + 0xE0]
	0x03E50530 CBNZ W9, 0x3E5053C
	0x03E50534 MOV X0, X8
	0x03E50538 BL 0x1C16DFC
	0x03E5053C MOV X0, X21
	0x03E50540 MOV X1, X31
	0x03E50544 MOV X2, X31
	0x03E50548 BL 0x3C354F8
	0x03E5054C TBZ X0, 0x0, 0x3E505A0
	0x03E50550 LDR X0, [X23]
	0x03E50554 LDR W8, [X0 + 0xE0]
	0x03E50558 CBNZ W8, 0x3E50560
	0x03E5055C BL 0x1C16DFC
	0x03E50560 MOV X0, X22
	0x03E50564 MOV X1, X31
	0x03E50568 MOV X2, X31
	0x03E5056C BL 0x3C354F8
	0x03E50570 TBZ X0, 0x0, 0x3E505A0
	0x03E50574 CBZ X21, 0x3E50830
	0x03E50578 MOV X0, X21
	0x03E5057C MOV X1, X31
	0x03E50580 BL 0x3C039A0
	0x03E50584 CBZ X22, 0x3E50830
	0x03E50588 MOV X0, X22
	0x03E5058C MOV X1, X31
	0x03E50590 MOV V8.16B, V0.16B
	0x03E50594 BL 0x3C039A0
	0x03E50598 FCMP S8, S0
	0x03E5059C B.NE 0x3E507B0
	0x03E505A0 LDR X0, [X19 + 0x8]
	0x03E505A4 CBZ X0, 0x3E50830
	0x03E505A8 LDR X8, [X0]
	0x03E505AC LDR X9, [X8 + 0x278]
	0x03E505B0 LDR X1, [X8 + 0x280]
	0x03E505B4 BLR X9
	0x03E505B8 LDR X8, [X20 + 0x8]
	0x03E505BC CBZ X8, 0x3E50830
	0x03E505C0 LDR X9, [X8]
	0x03E505C4 MOV W21, W0
	0x03E505C8 MOV X0, X8
	0x03E505CC LDR X10, [X9 + 0x278]
	0x03E505D0 LDR X1, [X9 + 0x280]
	0x03E505D4 BLR X10
	0x03E505D8 CMP W21, W0
	0x03E505DC B.NE 0x3E506D4
	0x03E505E0 LDR X0, [X19 + 0x8]
	0x03E505E4 CBZ X0, 0x3E50830
	0x03E505E8 LDR X8, [X0]
	0x03E505EC LDR X9, [X8 + 0x288]
	0x03E505F0 LDR X1, [X8 + 0x290]
	0x03E505F4 BLR X9
	0x03E505F8 LDR X8, [X20 + 0x8]
	0x03E505FC CBZ X8, 0x3E50830
	0x03E50600 LDR X9, [X8]
	0x03E50604 MOV W21, W0
	0x03E50608 MOV X0, X8
	0x03E5060C LDR X10, [X9 + 0x288]
	0x03E50610 LDR X1, [X9 + 0x290]
	0x03E50614 BLR X10
	0x03E50618 CMP W21, W0
	0x03E5061C B.NE 0x3E50758
	0x03E50620 LDR W8, [X19 + 0x24]
	0x03E50624 LDR W0, [X20 + 0x24]
	0x03E50628 CMP W8, W0
	0x03E5062C B.NE 0x3E506B0
	0x03E50630 ADD X0, X20, 0x28
	0x03E50634 LDR W1, [X19 + 0x28]
	0x03E50638 LDR W8, [X0]
	0x03E5063C CMP W1, W8
	0x03E50640 B.NE 0x3E50794
	0x03E50644 MOV X21, X20
	0x03E50648 LDR W8, [X19 + 0x18]
	0x03E5064C LDR W9, [X21 + 0x18]!
	0x03E50650 CMP W8, W9
	0x03E50654 B.EQ 0x3E50708
	0x03E50658 LDR X0, [X19 + 0x8]
	0x03E5065C CBZ X0, 0x3E50830
	0x03E50660 BL 0x3E50834
	0x03E50664 LDR X8, [X20 + 0x8]
	0x03E50668 CBZ X8, 0x3E50830
	0x03E5066C MOV X22, X0
	0x03E50670 MOV X0, X8
	0x03E50674 BL 0x3E50834
	0x03E50678 LDR X8, [X23]
	0x03E5067C MOV X23, X0
	0x03E50680 LDR W9, [X8 + 0xE0]
	0x03E50684 CBNZ W9, 0x3E50690
	0x03E50688 MOV X0, X8
	0x03E5068C BL 0x1C16DFC
	0x03E50690 MOV X0, X22
	0x03E50694 MOV X1, X23
	0x03E50698 MOV X2, X31
	0x03E5069C BL 0x3C3883C
	0x03E506A0 TBZ X0, 0x0, 0x3E50708
	0x03E506A4 LDR W1, [X19 + 0x18]
	0x03E506A8 MOV X0, X21
	0x03E506AC B 0x3E50794
	0x03E506B0 MOV X1, X31
	0x03E506B4 BL 0x3C00914
	0x03E506B8 STR W0, [X31 + 0x8]
	0x03E506BC LDR W0, [X19 + 0x24]
	0x03E506C0 MOV X1, X31
	0x03E506C4 BL 0x3C00914
	0x03E506C8 MOV W1, W0
	0x03E506CC ADD X0, X31, 0x8
	0x03E506D0 B 0x3E50794
	0x03E506D4 LDR X0, [X20 + 0x8]
	0x03E506D8 CBZ X0, 0x3E50830
	0x03E506DC LDR X8, [X0]
	0x03E506E0 LDR X9, [X8 + 0x278]
	0x03E506E4 LDR X1, [X8 + 0x280]
	0x03E506E8 BLR X9
	0x03E506EC STR W0, [X31 + 0xC]
	0x03E506F0 LDR X0, [X19 + 0x8]
	0x03E506F4 CBZ X0, 0x3E50830
	0x03E506F8 LDR X8, [X0]
	0x03E506FC LDR X9, [X8 + 0x278]
	0x03E50700 LDR X1, [X8 + 0x280]
	0x03E50704 B 0x3E50788
	0x03E50708 ADD X0, X19, 0x10
	0x03E5070C LDR V1, [X0]
	0x03E50710 LDR V0, [X20 + 0x10]
	0x03E50714 FCMP S1, S0
	0x03E50718 B.NE 0x3E5074C
	0x03E5071C LDR W21, [X19 + 0x1C]
	0x03E50720 MOV X0, X31
	0x03E50724 BL 0x3C5D704
	0x03E50728 CMP W21, W0
	0x03E5072C B.EQ 0x3E50744
	0x03E50730 LDR W21, [X20 + 0x1C]
	0x03E50734 MOV X0, X31
	0x03E50738 BL 0x3C5D704
	0x03E5073C CMP W21, W0
	0x03E50740 B.NE 0x3E50804
	0x03E50744 LDR V0, [X20 + 0x14]
	0x03E50748 ADD X0, X19, 0x14
	0x03E5074C MOV X1, X31
	0x03E50750 BL 0x338FCB8
	0x03E50754 B 0x3E5079C
	0x03E50758 LDR X0, [X20 + 0x8]
	0x03E5075C CBZ X0, 0x3E50830
	0x03E50760 LDR X8, [X0]
	0x03E50764 LDR X9, [X8 + 0x288]
	0x03E50768 LDR X1, [X8 + 0x290]
	0x03E5076C BLR X9
	0x03E50770 STR W0, [X31 + 0xC]
	0x03E50774 LDR X0, [X19 + 0x8]
	0x03E50778 CBZ X0, 0x3E50830
	0x03E5077C LDR X8, [X0]
	0x03E50780 LDR X9, [X8 + 0x288]
	0x03E50784 LDR X1, [X8 + 0x290]
	0x03E50788 BLR X9
	0x03E5078C MOV W1, W0
	0x03E50790 ADD X0, X31, 0xC
	0x03E50794 MOV X2, X31
	0x03E50798 BL 0x337B634
	0x03E5079C LDP X20, X19, [X31 + 0x30]
	0x03E507A0 LDP X22, X21, [X31 + 0x20]
	0x03E507A4 LDP X30, X23, [X31 + 0x10]
	0x03E507A8 LDR V8, [X31], #0x40
	0x03E507AC RET
	0x03E507B0 MOV X0, X21
	0x03E507B4 MOV X1, X31
	0x03E507B8 BL 0x3C039A0
	0x03E507BC MOV X0, X22
	0x03E507C0 MOV X1, X31
	0x03E507C4 MOV V8.16B, V0.16B
	0x03E507C8 BL 0x3C039A0
	0x03E507CC FCMP S8, S0
	0x03E507D0 B.MI 0x3E507FC
	0x03E507D4 MOV X0, X21
	0x03E507D8 MOV X1, X31
	0x03E507DC BL 0x3C039A0
	0x03E507E0 MOV X0, X22
	0x03E507E4 MOV X1, X31
	0x03E507E8 MOV V8.16B, V0.16B
	0x03E507EC BL 0x3C039A0
	0x03E507F0 FCMP S8, S0
	0x03E507F4 CSINV W0, W31, W31, EQ
	0x03E507F8 B 0x3E5079C
	0x03E507FC MOVZ W0, 0x1
	0x03E50800 B 0x3E5079C
	0x03E50804 ADD X0, X19, 0x1C
	0x03E50808 LDR W8, [X0]
	0x03E5080C LDR W1, [X20 + 0x1C]
	0x03E50810 CMP W8, W1
	0x03E50814 B.NE 0x3E50794
	0x03E50818 ADD X0, X20, 0x20
	0x03E5081C LDR W1, [X19 + 0x20]
	0x03E50820 LDR W8, [X0]
	0x03E50824 CMP W1, W8
	0x03E50828 B.EQ 0x3E50744
	0x03E5082C B 0x3E50794
	0x03E50830 BL 0x1C16F20
	0x03E50834 STP X30, X21, [X31 - 0x20]!
	0x03E50838 STP X20, X19, [X31 + 0x10]
	0x03E5083C ADRP X21, 0x598000
	0x03E50840 ADRP X20, 0x2A3000
	0x03E50844 LDRB W8, [X21 + 0x8C3]
	0x03E50848 LDR X20, [X20 + 0x598]
	0x03E5084C MOV X19, X0
	0x03E50850 TBNZ X8, 0x0, 0x3E50874
	0x03E50854 ADRP X0, 0x31B000
	0x03E50858 LDR X0, [X0 + 0x940]
	0x03E5085C BL 0x1C16CF4
	0x03E50860 ADRP X0, 0x2A3000
	0x03E50864 LDR X0, [X0 + 0x598]
	0x03E50868 BL 0x1C16CF4
	0x03E5086C MOVZ W8, 0x1
	0x03E50870 STRB W8, [X21 + 0x8C3]
	0x03E50874 LDR X0, [X20]
	0x03E50878 LDR X20, [X19 + 0x20]
	0x03E5087C LDR W8, [X0 + 0xE0]
	0x03E50880 CBNZ W8, 0x3E50888
	0x03E50884 BL 0x1C16DFC
	0x03E50888 MOV X0, X20
	0x03E5088C MOV X1, X31
	0x03E50890 MOV X2, X31
	0x03E50894 BL 0x3C3883C
	0x03E50898 TBZ X0, 0x0, 0x3E508D4
	0x03E5089C ADRP X8, 0x31B000
	0x03E508A0 LDR X8, [X8 + 0x940]
	0x03E508A4 MOV X0, X19
	0x03E508A8 LDR X1, [X8]
	0x03E508AC BL 0x21A47AC
	0x03E508B0 CBZ X0, 0x3E508E4
	0x03E508B4 LDR X8, [X0 + 0x18]
	0x03E508B8 CBZ X8, 0x3E508D4
	0x03E508BC CBZ W8, 0x3E508E8
	0x03E508C0 MOV X9, INVALID
	0x03E508C4 ADD X8, X9, X8, 0x20, LSL
	0x03E508C8 ADD X8, X0, X8, 0x1D, ASR
	0x03E508CC LDR X8, [X8 + 0x20]
	0x03E508D0 STR X8, [X19 + 0x20]
	0x03E508D4 LDR X0, [X19 + 0x20]
	0x03E508D8 LDP X20, X19, [X31 + 0x10]
	0x03E508DC LDP X30, X21, [X31], #0x20
	0x03E508E0 RET
	0x03E508E4 BL 0x1C16F20
	0x03E508E8 BL 0x1C16F28
	0x03E508EC STR X30, [X31 - 0x50]!
	0x03E508F0 STP X26, X25, [X31 + 0x10]
	0x03E508F4 STP X24, X23, [X31 + 0x20]
	0x03E508F8 STP X22, X21, [X31 + 0x30]
	0x03E508FC STP X20, X19, [X31 + 0x40]
	0x03E50900 ADRP X21, 0x598000
	0x03E50904 LDRB W8, [X21 + 0x860]
	0x03E50908 MOV X19, X2
	0x03E5090C MOV X20, X1
	0x03E50910 TBNZ X8, 0x0, 0x3E50970
	0x03E50914 ADRP X0, 0x2CA000
	0x03E50918 LDR X0, [X0 + 0xDF8]
	0x03E5091C BL 0x1C16CF4
	0x03E50920 ADRP X0, 0x2F9000
	0x03E50924 LDR X0, [X0 + 0x328]
	0x03E50928 BL 0x1C16CF4
	0x03E5092C ADRP X0, 0x31B000
	0x03E50930 LDR X0, [X0 + 0x948]
	0x03E50934 BL 0x1C16CF4
	0x03E50938 ADRP X0, 0x31B000
	0x03E5093C LDR X0, [X0 + 0x950]
	0x03E50940 BL 0x1C16CF4
	0x03E50944 ADRP X0, 0x31B000
	0x03E50948 LDR X0, [X0 + 0x958]
	0x03E5094C BL 0x1C16CF4
	0x03E50950 ADRP X0, 0x2A3000
	0x03E50954 LDR X0, [X0 + 0x598]
	0x03E50958 BL 0x1C16CF4
	0x03E5095C ADRP X0, 0x31B000
	0x03E50960 LDR X0, [X0 + 0x960]
	0x03E50964 BL 0x1C16CF4
	0x03E50968 MOVZ W8, 0x1
	0x03E5096C STRB W8, [X21 + 0x860]
	0x03E50970 CBZ X19, 0x3E50AD8
	0x03E50974 LDP W2, W8, [X19 + 0x18]
	0x03E50978 ADRP X21, 0x31B000
	0x03E5097C LDR X21, [X21 + 0x960]
	0x03E50980 ADD W8, W8, 0x1
	0x03E50984 CMP W2, 0x1
	0x03E50988 STP W31, W8, [X19 + 0x18]
	0x03E5098C B.LT 0x3E509A0
	0x03E50990 LDR X0, [X19 + 0x10]
	0x03E50994 MOV W1, W31
	0x03E50998 MOV X3, X31
	0x03E5099C BL 0x339FA34
	0x03E509A0 LDR X0, [X21]
	0x03E509A4 LDR W8, [X0 + 0xE0]
	0x03E509A8 CBNZ W8, 0x3E509B0
	0x03E509AC BL 0x1C16DFC
	0x03E509B0 ADRP X22, 0x598000
	0x03E509B4 LDRB W8, [X22 + 0x8D3]
	0x03E509B8 CBNZ W8, 0x3E509D0
	0x03E509BC ADRP X0, 0x31B000
	0x03E509C0 LDR X0, [X0 + 0x960]
	0x03E509C4 BL 0x1C16CF4
	0x03E509C8 MOVZ W8, 0x1
	0x03E509CC STRB W8, [X22 + 0x8D3]
	0x03E509D0 LDR X0, [X21]
	0x03E509D4 LDR W8, [X0 + 0xE0]
	0x03E509D8 CBNZ W8, 0x3E509E4
	0x03E509DC BL 0x1C16DFC
	0x03E509E0 LDR X0, [X21]
	0x03E509E4 LDR X8, [X0 + 0xB8]
	0x03E509E8 LDR X21, [X8]
	0x03E509EC CBZ X21, 0x3E50AD8
	0x03E509F0 LDR W24, [X21 + 0x18]
	0x03E509F4 CMP W24, 0x1
	0x03E509F8 B.LT 0x3E50A8C
	0x03E509FC ADRP X25, 0x31B000
	0x03E50A00 ADRP X26, 0x2A3000
	0x03E50A04 LDR X25, [X25 + 0x958]
	0x03E50A08 LDR X26, [X26 + 0x598]
	0x03E50A0C MOV W22, W31
	0x03E50A10 LDR X2, [X25]
	0x03E50A14 MOV X0, X21
	0x03E50A18 MOV W1, W22
	0x03E50A1C BL 0x301BCCC
	0x03E50A20 LDR X8, [X26]
	0x03E50A24 MOV X23, X0
	0x03E50A28 LDR W9, [X8 + 0xE0]
	0x03E50A2C CBNZ W9, 0x3E50A38
	0x03E50A30 MOV X0, X8
	0x03E50A34 BL 0x1C16DFC
	0x03E50A38 MOV X0, X23
	0x03E50A3C MOV X1, X31
	0x03E50A40 MOV X2, X31
	0x03E50A44 BL 0x3C3883C
	0x03E50A48 TBNZ X0, 0x0, 0x3E50A80
	0x03E50A4C CBZ X23, 0x3E50AD8
	0x03E50A50 LDR X8, [X23]
	0x03E50A54 MOV X0, X23
	0x03E50A58 LDP X9, X1, [X8 + 0x1C8]
	0x03E50A5C BLR X9
	0x03E50A60 TBZ X0, 0x0, 0x3E50A80
	0x03E50A64 LDR X8, [X23]
	0x03E50A68 MOV X0, X23
	0x03E50A6C MOV X1, X20
	0x03E50A70 MOV X2, X19
	0x03E50A74 LDR X9, [X8 + 0x248]
	0x03E50A78 LDR X3, [X8 + 0x250]
	0x03E50A7C BLR X9
	0x03E50A80 ADD W22, W22, 0x1
	0x03E50A84 CMP W24, W22
	0x03E50A88 B.NE 0x3E50A10
	0x03E50A8C ADRP X21, 0x2CA000
	0x03E50A90 LDR X21, [X21 + 0xDF8]
	0x03E50A94 ADRP X20, 0x31B000
	0x03E50A98 LDR X0, [X21]
	0x03E50A9C LDR W8, [X0 + 0xE0]
	0x03E50AA0 LDR X20, [X20 + 0x948]
	0x03E50AA4 CBNZ W8, 0x3E50AB0
	0x03E50AA8 BL 0x1C16DFC
	0x03E50AAC LDR X0, [X21]
	0x03E50AB0 LDR X8, [X0 + 0xB8]
	0x03E50AB4 LDR X2, [X20]
	0x03E50AB8 MOV X0, X19
	0x03E50ABC LDP X20, X19, [X31 + 0x40]
	0x03E50AC0 LDR X1, [X8 + 0x8]
	0x03E50AC4 LDP X22, X21, [X31 + 0x30]
	0x03E50AC8 LDP X24, X23, [X31 + 0x20]
	0x03E50ACC LDP X26, X25, [X31 + 0x10]
	0x03E50AD0 LDR X30, [X31], #0x50
	0x03E50AD4 B 0x30382B8
	0x03E50AD8 BL 0x1C16F20
	0x03E50ADC MOVN W1, 0x0
	0x03E50AE0 B 0x3E50AE4
	0x03E50AE4 STR X30, [X31 - 0x30]!
	0x03E50AE8 STP X22, X21, [X31 + 0x10]
	0x03E50AEC STP X20, X19, [X31 + 0x20]
	0x03E50AF0 ADRP X22, 0x598000
	0x03E50AF4 ADRP X21, 0x2A3000
	0x03E50AF8 LDRB W8, [X22 + 0x861]
	0x03E50AFC LDR X21, [X21 + 0x598]
	0x03E50B00 MOV W19, W1
	0x03E50B04 MOV X20, X0
	0x03E50B08 TBNZ X8, 0x0, 0x3E50B20
	0x03E50B0C ADRP X0, 0x2A3000
	0x03E50B10 LDR X0, [X0 + 0x598]
	0x03E50B14 BL 0x1C16CF4
	0x03E50B18 MOVZ W8, 0x1
	0x03E50B1C STRB W8, [X22 + 0x861]
	0x03E50B20 LDR X0, [X21]
	0x03E50B24 LDR X21, [X20 + 0x28]
	0x03E50B28 LDR W8, [X0 + 0xE0]
	0x03E50B2C CBNZ W8, 0x3E50B34
	0x03E50B30 BL 0x1C16DFC
	0x03E50B34 MOV X0, X21
	0x03E50B38 MOV X1, X31
	0x03E50B3C MOV X2, X31
	0x03E50B40 BL 0x3C354F8
	0x03E50B44 TBZ X0, 0x0, 0x3E50B70
	0x03E50B48 LDR X0, [X20 + 0x28]
	0x03E50B4C CBZ X0, 0x3E50B84
	0x03E50B50 LDR X8, [X0]
	0x03E50B54 MOV W1, W19
	0x03E50B58 LDP X20, X19, [X31 + 0x20]
	0x03E50B5C LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 224
	002 Move [X31+128], X29
	003 Move [X31+136], X30
	004 Move [X31+144], X28
	005 Move [X31+152], X27
	006 Move [X31+160], X26
	007 Move [X31+168], X25
	008 Move [X31+176], X24
	009 Move [X31+184], X23
	010 Move [X31+192], X22
	011 Move [X31+200], X21
	012 Move [X31+208], X20
	013 Move [X31+216], X19
	014 Move X23, 0x599000
	015 Move X20, 0x2A4000
	016 Move X21, 0x31C000
	017 Move W8, [X23+2136]
	018 Move X20, [X20+2288]
	019 Move X21, [X21+2008]
	020 Move X19, X0
	021 Add X22, X0, 260
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {97}
	026 Move X0, 0x2A4000
	027 Move X0, [X0+2904]
	028 Call 0x1C17CF4
	029 Move X0, 0x31C000
	030 Move X0, [X0+2016]
	031 Call 0x1C17CF4
	032 Move X0, 0x2A4000
	033 Move X0, [X0+2288]
	034 Call 0x1C17CF4
	035 Move X0, 0x31C000
	036 Move X0, [X0+2024]
	037 Call 0x1C17CF4
	038 Move X0, 0x31C000
	039 Move X0, [X0+2032]
	040 Call 0x1C17CF4
	041 Move X0, 0x31C000
	042 Move X0, [X0+2040]
	043 Call 0x1C17CF4
	044 Move X0, 0x31C000
	045 Move X0, [X0+2048]
	046 Call 0x1C17CF4
	047 Move X0, 0x31C000
	048 Move X0, [X0+2056]
	049 Call 0x1C17CF4
	050 Move X0, 0x31C000
	051 Move X0, [X0+2064]
	052 Call 0x1C17CF4
	053 Move X0, 0x31C000
	054 Move X0, [X0+2072]
	055 Call 0x1C17CF4
	056 Move X0, 0x31C000
	057 Move X0, [X0+2080]
	058 Call 0x1C17CF4
	059 Move X0, 0x31C000
	060 Move X0, [X0+2008]
	061 Call 0x1C17CF4
	062 Move X0, 0x31C000
	063 Move X0, [X0+2088]
	064 Call 0x1C17CF4
	065 Move X0, 0x31C000
	066 Move X0, [X0+2096]
	067 Call 0x1C17CF4
	068 Move X0, 0x31C000
	069 Move X0, [X0+2104]
	070 Call 0x1C17CF4
	071 Move X0, 0x31C000
	072 Move X0, [X0+2112]
	073 Call 0x1C17CF4
	074 Move X0, 0x31C000
	075 Move X0, [X0+2120]
	076 Call 0x1C17CF4
	077 Move X0, 0x31C000
	078 Move X0, [X0+2128]
	079 Call 0x1C17CF4
	080 Move X0, 0x31C000
	081 Move X0, [X0+2136]
	082 Call 0x1C17CF4
	083 Move X0, 0x31C000
	084 Move X0, [X0+2144]
	085 Call 0x1C17CF4
	086 Move X0, 0x31C000
	087 Move X0, [X0+2152]
	088 Call 0x1C17CF4
	089 Move X0, 0x31C000
	090 Move X0, [X0+2160]
	091 Call 0x1C17CF4
	092 Move X0, 0x31C000
	093 Move X0, [X0+2168]
	094 Call 0x1C17CF4
	095 Move W8, 1
	096 Move [X23+2136], W8
	097 Move X0, [X20]
	098 NotImplemented "Instruction MOVI not yet implemented."
	099 Move [X31+116], W31
	100 Move [X31+80], V0
	101 Move [X31+88], V0
	102 Move [X31+48], V0
	103 Move [X31+56], V0
	104 Move [X31+2], V0
	105 Move [X31+24], X31
	106 Call 0x1C17F10
	107 Move X1, X31
	108 Move X20, X0
	109 Call StringBuilder..ctor, X0
	110 Move V0, [X22]
	111 Add X0, X31, 120
	112 Move X1, X31
	113 Move X2, X31
	114 Move X3, X31
	115 Move [X31+120], D0
	116 Call 0x25F44C4
	117 Move X8, [X21]
	118 Move X1, X0
	119 Move X2, X31
	120 Move X0, X8
	121 Call String.Concat, X0, X1
	122 Compare X20, 0
	123 JumpIfEqual {490}
	124 Move X23, 0x31C000
	125 Move X28, 0x2A4000
	126 Move X24, 0x31C000
	127 Move X21, 0x31C000
	128 Move X23, [X23+2136]
	129 Move X28, [X28+2904]
	130 Move X24, [X24+2104]
	131 Move X21, [X21+2080]
	132 Move X1, X0
	133 Move X0, X20
	134 Move X2, X31
	135 Call StringBuilder.AppendLine, X0, X1
	136 Move V0, [X22+8]
	137 Add X0, X31, 120
	138 Move X1, X31
	139 Move X2, X31
	140 Move X3, X31
	141 Move [X31+120], D0
	142 Call 0x25F44C4
	143 Move X8, [X23]
	144 Move X1, X0
	145 Move X2, X31
	146 Move X0, X8
	147 Call String.Concat, X0, X1
	148 Move X1, X0
	149 Move X0, X20
	150 Move X2, X31
	151 Call StringBuilder.AppendLine, X0, X1
	152 Move W8, [X19+248]
	153 Move X0, [X28]
	154 Move [X31+116], W8
	155 Move W8, [X0+224]
	156 Compare W8, 0
	157 JumpIfNotEqual {159}
	158 Call 0x1C17DFC
	159 Move X23, 0x31C000
	160 Move X23, [X23+2120]
	161 Add X0, X31, 116
	162 Move X1, X31
	163 Call Boolean.ToString, X0
	164 Move X8, [X24]
	165 Move X1, X0
	166 Move X2, X31
	167 Move X0, X8
	168 Call String.Concat, X0, X1
	169 Move X1, X0
	170 Move X0, X20
	171 Move X2, X31
	172 Call StringBuilder.AppendLine, X0, X1
	173 Move X0, [X19+32]
	174 Move X21, [X21]
	175 Compare X0, 0
	176 JumpIfEqual {182}
	177 Move X8, [X0]
	178 Move X9, [X8+360]
	179 Move X1, [X8+368]
	180 NotImplemented "Instruction BLR not yet implemented."
	181 Move X1, X0
	182 Move X1, X31
	183 Move X24, 0x31C000
	184 Move X24, [X24+2032]
	185 Move X0, X21
	186 Move X2, X31
	187 Call String.Concat, X0, X1
	188 Move X1, X0
	189 Move X0, X20
	190 Move X2, X31
	191 Call StringBuilder.AppendLine, X0, X1
	192 Move X0, [X19+40]
	193 Move X21, [X23]
	194 Compare X0, 0
	195 JumpIfEqual {201}
	196 Move X8, [X0]
	197 Move X9, [X8+360]
	198 Move X1, [X8+368]
	199 NotImplemented "Instruction BLR not yet implemented."
	200 Move X1, X0
	201 Move X1, X31
	202 Move X23, 0x31C000
	203 Move X23, [X23+2024]
	204 Move X0, X21
	205 Move X2, X31
	206 Call String.Concat, X0, X1
	207 Move X1, X0
	208 Move X0, X20
	209 Move X2, X31
	210 Call StringBuilder.AppendLine, X0, X1
	211 Move X0, [X19+48]
	212 Move X21, [X24]
	213 Compare X0, 0
	214 JumpIfEqual {220}
	215 Move X8, [X0]
	216 Move X9, [X8+360]
	217 Move X1, [X8+368]
	218 NotImplemented "Instruction BLR not yet implemented."
	219 Move X1, X0
	220 Move X1, X31
	221 Move X0, X21
	222 Move X2, X31
	223 Call String.Concat, X0, X1
	224 Move X1, X0
	225 Move X0, X20
	226 Move X2, X31
	227 Call StringBuilder.AppendLine, X0, X1
	228 Move X0, [X19+64]
	229 Move X21, [X23]
	230 Compare X0, 0
	231 JumpIfEqual {237}
	232 Move X8, [X0]
	233 Move X9, [X8+360]
	234 Move X1, [X8+368]
	235 NotImplemented "Instruction BLR not yet implemented."
	236 Move X1, X0
	237 Move X1, X31
	238 Move X24, 0x31C000
	239 Move X23, 0x31C000
	240 Move X29, 0x31C000
	241 Move X27, 0x31C000
	242 Move X26, 0x31C000
	243 Move X25, 0x31C000
	244 Move X24, [X24+2064]
	245 Move X23, [X23+2056]
	246 Move X29, [X29+2048]
	247 Move X27, [X27+2168]
	248 Move X26, [X26+2096]
	249 Move X25, [X25+2112]
	250 Move X0, X21
	251 Move X2, X31
	252 Call String.Concat, X0, X1
	253 Move X1, X0
	254 Move X0, X20
	255 Move X2, X31
	256 Call StringBuilder.AppendLine, X0, X1
	257 Move W8, [X19+324]
	258 Move X0, [X28]
	259 Move [X31+116], W8
	260 Move W8, [X0+224]
	261 Compare W8, 0
	262 JumpIfNotEqual {264}
	263 Call 0x1C17DFC
	264 Add X0, X31, 116
	265 Move X1, X31
	266 Call Boolean.ToString, X0
	267 Move X8, [X24]
	268 Move X1, X0
	269 Move X2, X31
	270 Move X0, X8
	271 Call String.Concat, X0, X1
	272 Move X1, X0
	273 Move X0, X20
	274 Move X2, X31
	275 Call StringBuilder.AppendLine, X0, X1
	276 Move X1, [X23]
	277 Move X0, X20
	278 Move X2, X31
	279 Call StringBuilder.AppendLine, X0, X1
	280 Add X1, X19, 80
	281 Add X0, X31, 32
	282 Move W2, 80
	283 Call 0x3EB2AC0
	284 Add X0, X31, 32
	285 Call RaycastResult.ToString, X0
	286 Move X1, X0
	287 Move X0, X20
	288 Move X2, X31
	289 Call StringBuilder.AppendLine, X0, X1
	290 Move X1, [X29]
	291 Move X0, X20
	292 Move X2, X31
	293 Call StringBuilder.AppendLine, X0, X1
	294 Add X1, X19, 160
	295 Add X0, X31, 32
	296 Move W2, 80
	297 Call 0x3EB2AC0
	298 Add X0, X31, 32
	299 Call RaycastResult.ToString, X0
	300 Move X1, X0
	301 Move X0, X20
	302 Move X2, X31
	303 Call StringBuilder.AppendLine, X0, X1
	304 Move X1, [X27]
	305 Move X0, X20
	306 Move X2, X31
	307 Call StringBuilder.AppendLine, X0, X1
	308 Move W8, [X19+252]
	309 Add X0, X31, 28
	310 Move X1, X31
	311 Move [X31+28], W8
	312 Call Int32.ToString, X0
	313 Move X1, X0
	314 Move X0, X20
	315 Move X2, X31
	316 Call StringBuilder.AppendLine, X0, X1
	317 Move V0, [X19+332]
	318 Add X0, X31, 24
	319 Move X1, X31
	320 Move [X31+24], S0
	321 Call Single.ToString, X0
	322 Move X8, [X26]
	323 Move X1, X0
	324 Move X2, X31
	325 Move X0, X8
	326 Call String.Concat, X0, X1
	327 Move X1, X0
	328 Move X0, X20
	329 Move X2, X31
	330 Call StringBuilder.AppendLine, X0, X1
	331 Move V0, [X19+336]
	332 Add X0, X31, 24
	333 Move X1, X31
	334 Move [X31+24], S0
	335 Call Single.ToString, X0
	336 Move X8, [X25]
	337 Move X1, X0
	338 Move X2, X31
	339 Move X0, X8
	340 Call String.Concat, X0, X1
	341 Move X1, X0
	342 Move X0, X20
	343 Move X2, X31
	344 Call StringBuilder.AppendLine, X0, X1
	345 Move V0, [X19+340]
	346 Add X0, X31, 24
	347 Move X1, X31
	348 Move [X31+24], S0
	349 Call Single.ToString, X0
	350 Move X8, 0x31C000
	351 Move X8, [X8+2160]
	352 Move X1, X0
	353 Move X2, X31
	354 Move X8, [X8]
	355 Move X0, X8
	356 Call String.Concat, X0, X1
	357 Move X1, X0
	358 Move X0, X20
	359 Move X2, X31
	360 Call StringBuilder.AppendLine, X0, X1
	361 Move V0, [X19+344]
	362 Add X0, X31, 24
	363 Move X1, X31
	364 Move [X31+24], S0
	365 Call Single.ToString, X0
	366 Move X8, 0x31C000
	367 Move X8, [X8+2152]
	368 Move X1, X0
	369 Move X2, X31
	370 Move X8, [X8]
	371 Move X0, X8
	372 Call String.Concat, X0, X1
	373 Move X1, X0
	374 Move X0, X20
	375 Move X2, X31
	376 Call StringBuilder.AppendLine, X0, X1
	377 Move V0, [X19+348]
	378 Add X0, X31, 24
	379 Move X1, X31
	380 Move [X31+24], S0
	381 Call Single.ToString, X0
	382 Move X8, 0x31C000
	383 Move X8, [X8+2128]
	384 Move X1, X0
	385 Move X2, X31
	386 Move X8, [X8]
	387 Move X0, X8
	388 Call String.Concat, X0, X1
	389 Move X1, X0
	390 Move X0, X20
	391 Move X2, X31
	392 Call StringBuilder.AppendLine, X0, X1
	393 Move V0, [X19+352]
	394 Add X0, X31, 120
	395 Move X1, X31
	396 Move X2, X31
	397 Move X3, X31
	398 Move [X31+120], D0
	399 Call 0x25F44C4
	400 Move X8, 0x31C000
	401 Move X8, [X8+2088]
	402 Move X1, X0
	403 Move X2, X31
	404 Move X8, [X8]
	405 Move X0, X8
	406 Call String.Concat, X0, X1
	407 Move X1, X0
	408 Move X0, X20
	409 Move X2, X31
	410 Call StringBuilder.AppendLine, X0, X1
	411 Move X8, 0x31C000
	412 Move X8, [X8+2016]
	413 Move W9, [X19+360]
	414 Move TEMP, 0
	415 Not TEMP
	416 Move X10, TEMP
	417 Add X0, X31, 0
	418 Move X8, [X8]
	419 Move X1, X31
	420 Move [X31+16], W9
	421 Move [X31], X8
	422 Move [X31+8], X10
	423 Call Enum.ToString, X0
	424 Move X8, 0x31C000
	425 Move X8, [X8+2040]
	426 Move X1, X0
	427 Move X2, X31
	428 Move X8, [X8]
	429 Move X0, X8
	430 Call String.Concat, X0, X1
	431 Move X1, X0
	432 Move X0, X20
	433 Move X2, X31
	434 Call StringBuilder.AppendLine, X0, X1
	435 Move V0, [X22+104]
	436 Add X0, X31, 120
	437 Move X1, X31
	438 Move X2, X31
	439 Move X3, X31
	440 Move [X31+120], D0
	441 Call 0x25F44C4
	442 Move X8, 0x31C000
	443 Move X8, [X8+2144]
	444 Move X1, X0
	445 Move X2, X31
	446 Move X8, [X8]
	447 Move X0, X8
	448 Call String.Concat, X0, X1
	449 Move X1, X0
	450 Move X0, X20
	451 Move X2, X31
	452 Call StringBuilder.AppendLine, X0, X1
	453 Move V0, [X22+112]
	454 Add X0, X31, 120
	455 Move X1, X31
	456 Move X2, X31
	457 Move X3, X31
	458 Move [X31+120], D0
	459 Call 0x25F44C4
	460 Move X8, 0x31C000
	461 Move X8, [X8+2072]
	462 Move X1, X0
	463 Move X2, X31
	464 Move X8, [X8]
	465 Move X0, X8
	466 Call String.Concat, X0, X1
	467 Move X1, X0
	468 Move X0, X20
	469 Move X2, X31
	470 Call StringBuilder.AppendLine, X0, X1
	471 Move X8, [X20]
	472 Move X0, X20
	473 Move X9, [X8+360]
	474 Move X1, [X8+368]
	475 NotImplemented "Instruction BLR not yet implemented."
	476 Move X20, [X31+208]
	477 Move X19, [X31+216]
	478 Move X22, [X31+192]
	479 Move X21, [X31+200]
	480 Move X24, [X31+176]
	481 Move X23, [X31+184]
	482 Move X26, [X31+160]
	483 Move X25, [X31+168]
	484 Move X28, [X31+144]
	485 Move X27, [X31+152]
	486 Move X29, [X31+128]
	487 Move X30, [X31+136]
	488 Add X31, X31, 224
	489 Return X0
	490 Call 0x1C17F20

