Type: UnityEngine.EventSystems.TouchInputModule

Method: System.Void .ctor()

Disassembly:
	0x03E59788 LDR X8, [X8 + 0xCB0]

ISIL:
	001 Call PointerInputModule..ctor, X0
	002 Return 

Method: System.Boolean get_allowActivationOnStandalone()

Disassembly:
	0x03E5978C MOV X1, X19
	0x03E59790 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move W0, [X0+128]
	002 Return X0

Method: System.Void set_allowActivationOnStandalone(System.Boolean value)

Disassembly:
	0x03E59794 LDR X2, [X8]
	0x03E59798 LDP X30, X21, [X31], #0x20
	0x03E5979C B 0x301D7A8

ISIL:
	001 And W8, W1, 1
	002 Move [X0+128], W8
	003 Return 

Method: System.Boolean get_forceModuleActive()

Disassembly:
	0x03E597A0 LDP X20, X19, [X31 + 0x10]
	0x03E597A4 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move W0, [X0+128]
	002 Return X0

Method: System.Void set_forceModuleActive(System.Boolean value)

Disassembly:
	0x03E597A8 RET
	0x03E597AC BL 0x1C16F20
	0x03E597B0 STR X30, [X31 - 0x30]!

ISIL:
	001 And W8, W1, 1
	002 Move [X0+128], W8
	003 Return 

Method: System.Void UpdateModule()

Disassembly:
	0x03E597B4 STP X22, X21, [X31 + 0x10]
	0x03E597B8 STP X20, X19, [X31 + 0x20]
	0x03E597BC ADRP X21, 0x58F000
	0x03E597C0 ADRP X22, 0x312000
	0x03E597C4 ADRP X19, 0x312000
	0x03E597C8 ADRP X20, 0x312000
	0x03E597CC LDRB W8, [X21 + 0x8C2]
	0x03E597D0 LDR X22, [X22 + 0xCB8]
	0x03E597D4 LDR X19, [X19 + 0xCC0]
	0x03E597D8 LDR X20, [X20 + 0x960]
	0x03E597DC TBNZ X8, 0x0, 0x3E5980C
	0x03E597E0 ADRP X0, 0x312000
	0x03E597E4 LDR X0, [X0 + 0xCC0]
	0x03E597E8 BL 0x1C16CF4
	0x03E597EC ADRP X0, 0x312000
	0x03E597F0 LDR X0, [X0 + 0xCB8]
	0x03E597F4 BL 0x1C16CF4
	0x03E597F8 ADRP X0, 0x312000
	0x03E597FC LDR X0, [X0 + 0x960]
	0x03E59800 BL 0x1C16CF4
	0x03E59804 MOVZ W8, 0x1
	0x03E59808 STRB W8, [X21 + 0x8C2]
	0x03E5980C LDR X0, [X22]
	0x03E59810 BL 0x1C16F10
	0x03E59814 LDR X1, [X19]
	0x03E59818 MOV X19, X0
	0x03E5981C BL 0x301B7C4
	0x03E59820 LDR X8, [X20]
	0x03E59824 LDP X22, X21, [X31 + 0x10]
	0x03E59828 LDR X8, [X8 + 0xB8]
	0x03E5982C STR X19, [X8]
	0x03E59830 LDP X20, X19, [X31 + 0x20]
	0x03E59834 LDR X30, [X31], #0x30
	0x03E59838 RET
	0x03E5983C MOV W0, W31
	0x03E59840 RET
	0x03E59844 MOVZ W0, 0x80000000
	0x03E59848 RET
	0x03E5984C MOVZ W0, 0x80000000
	0x03E59850 RET
	0x03E59854 SUB X31, X31, 0x30
	0x03E59858 STP X30, X21, [X31 + 0x10]
	0x03E5985C STP X20, X19, [X31 + 0x20]
	0x03E59860 ADRP X20, 0x58F000
	0x03E59864 ADRP X21, 0x29A000
	0x03E59868 LDRB W8, [X20 + 0x8C4]
	0x03E5986C LDR X21, [X21 + 0xAC8]
	0x03E59870 MOV X19, X0
	0x03E59874 TBNZ X8, 0x0, 0x3E598BC
	0x03E59878 ADRP X0, 0x29A000
	0x03E5987C LDR X0, [X0 + 0xAC8]
	0x03E59880 BL 0x1C16CF4
	0x03E59884 ADRP X0, 0x312000
	0x03E59888 LDR X0, [X0 + 0xCC8]
	0x03E5988C BL 0x1C16CF4
	0x03E59890 ADRP X0, 0x29B000
	0x03E59894 LDR X0, [X0 + 0xEE0]
	0x03E59898 BL 0x1C16CF4
	0x03E5989C ADRP X0, 0x312000
	0x03E598A0 LDR X0, [X0 + 0xCD0]
	0x03E598A4 BL 0x1C16CF4
	0x03E598A8 ADRP X0, 0x312000
	0x03E598AC LDR X0, [X0 + 0xCD8]
	0x03E598B0 BL 0x1C16CF4
	0x03E598B4 MOVZ W8, 0x1
	0x03E598B8 STRB W8, [X20 + 0x8C4]
	0x03E598BC LDR X0, [X21]
	0x03E598C0 MOVZ W1, 0x8
	0x03E598C4 BL 0x1C16D6C
	0x03E598C8 CBZ X0, 0x3E59A18
	0x03E598CC LDR W8, [X0 + 0x18]
	0x03E598D0 MOV X20, X0
	0x03E598D4 CBZ W8, 0x3E59A14
	0x03E598D8 ADRP X8, 0x29B000
	0x03E598DC LDR X8, [X8 + 0xEE0]
	0x03E598E0 MOV X0, X19
	0x03E598E4 MOV X1, X31
	0x03E598E8 LDR X8, [X8]
	0x03E598EC STR X8, [X20 + 0x20]
	0x03E598F0 BL 0x3C32ECC
	0x03E598F4 CBZ X0, 0x3E59904
	0x03E598F8 LDR X8, [X0]
	0x03E598FC LDP X9, X1, [X8 + 0x168]
	0x03E59900 BLR X9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x590000
	008 Move W8, [X20+2236]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x2F1000
	015 Move X0, [X0+912]
	016 Call 0x1C17CF4
	017 Move X0, 0x2C3000
	018 Move X0, [X0+2552]
	019 Call 0x1C17CF4
	020 Move X0, 0x29B000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2236], W8
	025 Move X8, [X19+56]
	026 Compare X8, 0
	027 JumpIfEqual {107}
	028 Move W8, [X8+72]
	029 Compare W8, 0
	030 JumpIfNotEqual {88}
	031 Move X8, [X19+120]
	032 Compare X8, 0
	033 JumpIfEqual {87}
	034 Move X9, 0x29B000
	035 Move X9, [X9+1432]
	036 Move X20, [X8+64]
	037 Move X0, [X9]
	038 Move W9, [X0+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {87}
	050 Move X20, [X19+120]
	051 Compare X20, 0
	052 JumpIfEqual {107}
	053 Move W8, [X20+325]
	054 Compare W8, 0
	055 JumpIfEqual {87}
	056 Move X22, 0x2C3000
	057 Move X22, [X22+2552]
	058 Move X21, [X20+64]
	059 Move X0, [X22]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X23, 0x589000
	065 Move W8, [X23+907]
	066 Compare W8, 0
	067 JumpIfNotEqual {73}
	068 Move X0, 0x2C3000
	069 Move X0, [X0+2552]
	070 Call 0x1C17CF4
	071 Move W8, 1
	072 Move [X23+907], W8
	073 Move X0, [X22]
	074 Move W8, [X0+224]
	075 Compare W8, 0
	076 JumpIfNotEqual {79}
	077 Call 0x1C17DFC
	078 Move X0, [X22]
	079 Move X9, 0x2F1000
	080 Move X8, [X0+184]
	081 Move X9, [X9+912]
	082 Move X0, X21
	083 Move X1, X20
	084 Move X2, [X8+72]
	085 Move X3, [X9]
	086 Call 0x21DE088, X0, X1, X2
	087 Move [X19+120], X31
	088 Move X8, [X19+112]
	089 Move X0, X19
	090 Move [X19+104], X8
	091 Call BaseInputModule.get_input, X0
	092 Compare X0, 0
	093 JumpIfEqual {107}
	094 Move X8, [X0]
	095 Move X9, [X8+728]
	096 Move X1, [X8+736]
	097 NotImplemented "Instruction BLR not yet implemented."
	098 Move [X19+112], S0
	099 Move [X19+120], S1
	100 Move X20, [X31+32]
	101 Move X19, [X31+40]
	102 Move X22, [X31+16]
	103 Move X21, [X31+24]
	104 Move X30, [X31+48]
	105 Move X23, [X31+56]
	106 Return 
	107 Call 0x1C17F20

Method: System.Boolean IsModuleSupported()

Disassembly:
	0x03E59904 LDR W8, [X20 + 0x18]
	0x03E59908 CMP W8, 0x1
	0x03E5990C B.LS 0x3E59A14
	0x03E59910 CMP W8, 0x2
	0x03E59914 STR X0, [X20 + 0x28]
	0x03E59918 B.EQ 0x3E59A14
	0x03E5991C ADRP X8, 0x312000
	0x03E59920 LDR X8, [X8 + 0xCD8]
	0x03E59924 MOV X0, X19
	0x03E59928 LDR X8, [X8]
	0x03E5992C STR X8, [X20 + 0x30]
	0x03E59930 LDR X8, [X19]
	0x03E59934 LDR X9, [X8 + 0x258]
	0x03E59938 LDR X1, [X8 + 0x260]

ISIL:
	001 Move [X31-16], X30
	002 Move W8, [X0+128]
	003 Compare W8, 0
	004 JumpIfEqual {8}
	005 Move W0, 1
	006 Move X30, [X31+16]
	007 Return X0
	008 Call BaseInputModule.get_input, X0
	009 Compare X0, 0
	010 JumpIfEqual {16}
	011 Move X8, [X0]
	012 Move X2, [X8+760]
	013 Move X1, [X8+768]
	014 Move X30, [X31+16]
	015 CallNoReturn X2
	016 Call 0x1C17F20

Method: System.Boolean ShouldActivateModule()

Disassembly:
	0x03E5993C BLR X9
	0x03E59940 CBZ X0, 0x3E59950
	0x03E59944 LDR X8, [X0]
	0x03E59948 LDP X9, X1, [X8 + 0x168]
	0x03E5994C BLR X9
	0x03E59950 LDR W8, [X20 + 0x18]
	0x03E59954 CMP W8, 0x3
	0x03E59958 B.LS 0x3E59A14
	0x03E5995C CMP W8, 0x4
	0x03E59960 STR X0, [X20 + 0x38]
	0x03E59964 B.EQ 0x3E59A14
	0x03E59968 ADRP X8, 0x312000
	0x03E5996C LDR X8, [X8 + 0xCC8]
	0x03E59970 MOV X0, X19
	0x03E59974 LDR X8, [X8]
	0x03E59978 STR X8, [X20 + 0x40]
	0x03E5997C LDR X8, [X19]
	0x03E59980 LDR X9, [X8 + 0x278]
	0x03E59984 LDR X1, [X8 + 0x280]
	0x03E59988 BLR X9
	0x03E5998C STR W0, [X31 + 0xC]
	0x03E59990 ADD X0, X31, 0xC
	0x03E59994 MOV X1, X31
	0x03E59998 BL 0x337B6E0
	0x03E5999C LDR W8, [X20 + 0x18]
	0x03E599A0 CMP W8, 0x5
	0x03E599A4 B.LS 0x3E59A14
	0x03E599A8 CMP W8, 0x6
	0x03E599AC STR X0, [X20 + 0x48]
	0x03E599B0 B.EQ 0x3E59A14
	0x03E599B4 ADRP X8, 0x312000
	0x03E599B8 LDR X8, [X8 + 0xCD0]
	0x03E599BC MOV X0, X19
	0x03E599C0 LDR X8, [X8]
	0x03E599C4 STR X8, [X20 + 0x50]
	0x03E599C8 LDR X8, [X19]
	0x03E599CC LDR X9, [X8 + 0x288]
	0x03E599D0 LDR X1, [X8 + 0x290]
	0x03E599D4 BLR X9
	0x03E599D8 STR W0, [X31 + 0xC]
	0x03E599DC ADD X0, X31, 0xC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call BaseInputModule.ShouldActivateModule, X0
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {14}
	010 Move W8, [X19+128]
	011 Compare W8, 0
	012 JumpIfEqual {20}
	013 Move W8, 1
	014 Move W8, W31
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 And W0, W8, 1
	018 Move X30, [X31+32]
	019 Return X0
	020 Move X0, X19
	021 Call TouchInputModule.UseFakeInput, X0
	022 Move W20, W0
	023 Move X0, X19
	024 Call BaseInputModule.get_input, X0
	025 Compare X0, 0
	026 JumpIfEqual {49}
	027 Move X8, [X0]
	028 Move TEMP, X20
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {44}
	032 Move X9, [X8+680]
	033 Move X2, [X8+688]
	034 Move W1, W31
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move D1, [X19+104]
	037 Move D0, [X19+112]
	038 Subtract V0, V0, V1
	039 NotImplemented "Instruction INVALID not yet implemented."
	040 NotImplemented "Instruction FADDP not yet implemented."
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 NotImplemented "Instruction CSET not yet implemented."
	043 Or W8, W0, W8
	044 Move X9, [X8+776]
	045 Move X1, [X8+784]
	046 NotImplemented "Instruction BLR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSET not yet implemented."
	049 Call 0x1C17F20

Method: System.Boolean UseFakeInput()

Disassembly:
	0x03E599E0 MOV X1, X31
	0x03E599E4 BL 0x337B6E0
	0x03E599E8 LDR W8, [X20 + 0x18]
	0x03E599EC CMP W8, 0x7
	0x03E599F0 B.LS 0x3E59A14
	0x03E599F4 STR X0, [X20 + 0x58]
	0x03E599F8 MOV X0, X20
	0x03E599FC MOV X1, X31
	0x03E59A00 BL 0x32278CC
	0x03E59A04 LDP X20, X19, [X31 + 0x20]
	0x03E59A08 LDP X30, X21, [X31 + 0x10]
	0x03E59A0C ADD X31, X31, 0x30

ISIL:
	001 Move [X31-16], X30
	002 Call BaseInputModule.get_input, X0
	003 Compare X0, 0
	004 JumpIfEqual {13}
	005 Move X8, [X0]
	006 Move X9, [X8+760]
	007 Move X1, [X8+768]
	008 NotImplemented "Instruction BLR not yet implemented."
	009 NotImplemented "Instruction ORN not yet implemented."
	010 And W0, W8, 1
	011 Move X30, [X31+16]
	012 Return X0
	013 Call 0x1C17F20

Method: System.Void Process()

Disassembly:
	0x03E59A10 RET
	0x03E59A14 BL 0x1C16F28
	0x03E59A18 BL 0x1C16F20
	0x03E59A1C STP X30, X21, [X31 - 0x20]!
	0x03E59A20 STP X20, X19, [X31 + 0x10]
	0x03E59A24 ADRP X20, 0x58F000
	0x03E59A28 ADRP X21, 0x312000
	0x03E59A2C LDRB W8, [X20 + 0x8C5]
	0x03E59A30 LDR X21, [X21 + 0x960]
	0x03E59A34 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call TouchInputModule.UseFakeInput, X0
	005 Move TEMP, X0
	006 And TEMP, TEMP, 1
	007 Compare TEMP, 1
	008 JumpIfNotEqual {12}
	009 Move X0, X19
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call TouchInputModule.ProcessTouchEvents, X0
	016 Return 

Method: System.Void FakeTouches()

Disassembly:
	0x03E59A38 TBNZ X8, 0x0, 0x3E59A50
	0x03E59A3C ADRP X0, 0x312000
	0x03E59A40 LDR X0, [X0 + 0x960]
	0x03E59A44 BL 0x1C16CF4
	0x03E59A48 MOVZ W8, 0x1
	0x03E59A4C STRB W8, [X20 + 0x8C5]
	0x03E59A50 LDR X0, [X21]
	0x03E59A54 LDR W8, [X0 + 0xE0]
	0x03E59A58 CBNZ W8, 0x3E59A60
	0x03E59A5C BL 0x1C16DFC
	0x03E59A60 MOV X0, X19
	0x03E59A64 LDP X20, X19, [X31 + 0x10]
	0x03E59A68 LDP X30, X21, [X31], #0x20
	0x03E59A6C B 0x3E59578
	0x03E59A70 STP X30, X21, [X31 - 0x20]!
	0x03E59A74 STP X20, X19, [X31 + 0x10]
	0x03E59A78 ADRP X20, 0x58F000
	0x03E59A7C ADRP X21, 0x312000
	0x03E59A80 LDRB W8, [X20 + 0x8C6]
	0x03E59A84 LDR X21, [X21 + 0x960]
	0x03E59A88 MOV X19, X0
	0x03E59A8C TBNZ X8, 0x0, 0x3E59AA4
	0x03E59A90 ADRP X0, 0x312000
	0x03E59A94 LDR X0, [X0 + 0x960]
	0x03E59A98 BL 0x1C16CF4
	0x03E59A9C MOVZ W8, 0x1
	0x03E59AA0 STRB W8, [X20 + 0x8C6]
	0x03E59AA4 LDR X0, [X21]
	0x03E59AA8 LDR W8, [X0 + 0xE0]
	0x03E59AAC CBNZ W8, 0x3E59AB4
	0x03E59AB0 BL 0x1C16DFC
	0x03E59AB4 MOV X0, X19
	0x03E59AB8 LDP X20, X19, [X31 + 0x10]
	0x03E59ABC LDP X30, X21, [X31], #0x20
	0x03E59AC0 B 0x3E596E0
	0x03E59AC4 STR X31, [X0 + 0x20]
	0x03E59AC8 RET
	0x03E59ACC RET
	0x03E59AD0 STR X31, [X0 + 0x20]
	0x03E59AD4 RET
	0x03E59AD8 RET
	0x03E59ADC STP X30, X19, [X31 - 0x10]!
	0x03E59AE0 MOV X19, X0
	0x03E59AE4 MOVN W0, 0x0
	0x03E59AE8 MOV X1, X31
	0x03E59AEC BL 0x3C35CBC
	0x03E59AF0 STR W0, [X19 + 0x30]
	0x03E59AF4 MOV X0, X19
	0x03E59AF8 MOV X1, X31
	0x03E59AFC LDP X30, X19, [X31], #0x10
	0x03E59B00 B 0x3C36C30
	0x03E59B04 STP X30, X19, [X31 - 0x10]!
	0x03E59B08 MOV X19, X0
	0x03E59B0C MOVN W0, 0x0
	0x03E59B10 MOV X1, X31
	0x03E59B14 BL 0x3C35CBC
	0x03E59B18 STR W0, [X19 + 0x30]
	0x03E59B1C MOV X0, X19
	0x03E59B20 MOV X1, X31
	0x03E59B24 LDP X30, X19, [X31], #0x10
	0x03E59B28 B 0x3C36C30
	0x03E59B2C SUB X31, X31, 0x1E0
	0x03E59B30 STR D10, [X31 + 0x160]
	0x03E59B34 STP D9, D8, [X31 + 0x170]
	0x03E59B38 STP X29, X30, [X31 + 0x180]
	0x03E59B3C STP X28, X27, [X31 + 0x190]
	0x03E59B40 STP X26, X25, [X31 + 0x1A0]
	0x03E59B44 STP X24, X23, [X31 + 0x1B0]
	0x03E59B48 STP X22, X21, [X31 + 0x1C0]
	0x03E59B4C STP X20, X19, [X31 + 0x1D0]
	0x03E59B50 ADRP X20, 0x58F000
	0x03E59B54 LDRB W8, [X20 + 0x8C7]
	0x03E59B58 MOV X19, X2
	0x03E59B5C MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X0]
	007 Move W1, W31
	008 Move X19, X0
	009 Move X9, [X8+760]
	010 Move X2, [X8+768]
	011 NotImplemented "Instruction BLR not yet implemented."
	012 Compare X0, 0
	013 JumpIfEqual {88}
	014 Move W1, W31
	015 Call MouseState.GetButtonState, X0, X1
	016 Compare X0, 0
	017 JumpIfEqual {88}
	018 Move X20, [X0+24]
	019 Compare X20, 0
	020 JumpIfEqual {88}
	021 Move W8, [X20+16]
	022 And W9, W8, 0xFFFFFFFD
	023 Move X22, 0x581000
	024 Move W8, [X22+1935]
	025 Move X21, [X20+24]
	026 Compare W8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, 0x2A3000
	029 Move X0, [X0+3848]
	030 Call 0x1C17CF4
	031 Move W8, 1
	032 Move [X22+1935], W8
	033 Compare X21, 0
	034 JumpIfEqual {88}
	035 Move X8, 0x2A3000
	036 Move X8, [X8+3848]
	037 Move X8, [X8]
	038 Move X8, [X8+184]
	039 Move V0, [X8]
	040 Add X8, X21, 268
	041 Move [X8], D0
	042 Move W8, [X20+16]
	043 And W9, W8, 0xFFFFFFFD
	044 Move X1, [X20+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Subtract W8, W8, 1
	047 NotImplemented "Instruction CSET not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 NotImplemented "Instruction CSET not yet implemented."
	050 Move X0, X19
	051 Call TouchInputModule.ProcessTouchPress, X0, X1, X2, X3
	052 Move X0, X19
	053 Call BaseInputModule.get_input, X0
	054 Compare X0, 0
	055 JumpIfEqual {88}
	056 Move X8, [X0]
	057 Move W1, W31
	058 Move X9, [X8+712]
	059 Move X2, [X8+720]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {82}
	065 Move X8, [X19]
	066 Move X1, [X20+24]
	067 Move X0, X19
	068 Move X9, [X8+776]
	069 Move X2, [X8+784]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move X8, [X19]
	072 Move X1, [X20+24]
	073 Move X0, X19
	074 Move X20, [X31+32]
	075 Move X19, [X31+40]
	076 Move X3, [X8+792]
	077 Move X2, [X8+800]
	078 Move X22, [X31+16]
	079 Move X21, [X31+24]
	080 Move X30, [X31+48]
	081 CallNoReturn X3
	082 Move X20, [X31+32]
	083 Move X19, [X31+40]
	084 Move X22, [X31+16]
	085 Move X21, [X31+24]
	086 Move X30, [X31+48]
	087 Return 
	088 Call 0x1C17F20

Method: System.Void ProcessTouchEvents()

Disassembly:
	0x03E59B60 STR X1, [X31 + 0x168]
	0x03E59B64 TBNZ X8, 0x0, 0x3E59BD0
	0x03E59B68 ADRP X0, 0x2C6000
	0x03E59B6C LDR X0, [X0 + 0x9B0]
	0x03E59B70 BL 0x1C16CF4
	0x03E59B74 ADRP X0, 0x2F0000
	0x03E59B78 LDR X0, [X0 + 0x358]
	0x03E59B7C BL 0x1C16CF4
	0x03E59B80 ADRP X0, 0x2F0000
	0x03E59B84 LDR X0, [X0 + 0x330]
	0x03E59B88 BL 0x1C16CF4
	0x03E59B8C ADRP X0, 0x29A000
	0x03E59B90 LDR X0, [X0 + 0x598]
	0x03E59B94 BL 0x1C16CF4
	0x03E59B98 ADRP X0, 0x2A4000
	0x03E59B9C LDR X0, [X0 + 0xE00]
	0x03E59BA0 BL 0x1C16CF4
	0x03E59BA4 ADRP X0, 0x312000
	0x03E59BA8 LDR X0, [X0 + 0xCE0]
	0x03E59BAC BL 0x1C16CF4
	0x03E59BB0 ADRP X0, 0x312000
	0x03E59BB4 LDR X0, [X0 + 0xCE8]
	0x03E59BB8 BL 0x1C16CF4
	0x03E59BBC ADRP X0, 0x312000
	0x03E59BC0 LDR X0, [X0 + 0xCF0]
	0x03E59BC4 BL 0x1C16CF4
	0x03E59BC8 MOVZ W8, 0x1
	0x03E59BCC STRB W8, [X20 + 0x8C7]
	0x03E59BD0 LDR X1, [X31 + 0x168]
	0x03E59BD4 MOVI V0.2D, 0x0
	0x03E59BD8 ADD X2, X31, 0xB8
	0x03E59BDC ADD X3, X31, 0xB0
	0x03E59BE0 ADD X4, X31, 0xB4
	0x03E59BE4 MOV X0, X21
	0x03E59BE8 STP X31, X31, [X31 + 0xA0]
	0x03E59BEC STR W31, [X31 + 0x90]
	0x03E59BF0 STP X31, X31, [X31 + 0xC0]
	0x03E59BF4 STP X31, X31, [X31 + 0xB0]
	0x03E59BF8 STP V0, V0, [X31 + 0x70]
	0x03E59BFC BL 0x3E5A218
	0x03E59C00 TBZ X0, 0x0, 0x3E5A1E8
	0x03E59C04 LDR W20, [X21 + 0x34]
	0x03E59C08 MOV X0, X31
	0x03E59C0C BL 0x3E48798
	0x03E59C10 CBZ X0, 0x3E5A210
	0x03E59C14 CBZ W20, 0x3E59CB4
	0x03E59C18 LDR X8, [X0 + 0x38]
	0x03E59C1C CBZ X8, 0x3E5A1E8
	0x03E59C20 LDP W1, W8, [X21 + 0x34]
	0x03E59C24 CMP W8, W1
	0x03E59C28 B.EQ 0x3E59C48
	0x03E59C2C ADRP X8, 0x2A4000
	0x03E59C30 LDR X8, [X8 + 0xE00]
	0x03E59C34 LDR X0, [X8]
	0x03E59C38 BL 0x1C16D6C
	0x03E59C3C LDR W8, [X21 + 0x34]
	0x03E59C40 STR X0, [X21 + 0x48]
	0x03E59C44 STR W8, [X21 + 0x38]
	0x03E59C48 MOV X0, X31
	0x03E59C4C BL 0x3E48798
	0x03E59C50 CBZ X0, 0x3E5A210
	0x03E59C54 ADD X8, X31, 0xB8
	0x03E59C58 LDR V0, [X8]
	0x03E59C5C LDR X8, [X31 + 0xC8]
	0x03E59C60 LDR X20, [X0 + 0x38]
	0x03E59C64 LDR V8, [X31 + 0xB4]
	0x03E59C68 STR V0, [X31 + 0x2]
	0x03E59C6C STR X8, [X31 + 0x30]
	0x03E59C70 LDR X22, [X21 + 0x48]
	0x03E59C74 MOV X0, X21
	0x03E59C78 BL 0x3E5A510
	0x03E59C7C CBZ X20, 0x3E5A210
	0x03E59C80 LDR V0, [X31 + 0x2]
	0x03E59C84 LDR X8, [X31 + 0x30]
	0x03E59C88 MOV W3, W0
	0x03E59C8C LDR X9, [X20 + 0x18]
	0x03E59C90 LDR X0, [X20 + 0x40]
	0x03E59C94 STR V0, [X31 + 0x11]
	0x03E59C98 STR X8, [X31 + 0x120]
	0x03E59C9C LDR X4, [X20 + 0x28]
	0x03E59CA0 ADD X1, X31, 0x110
	0x03E59CA4 MOV X2, X22

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+240], X29
	003 Move [X31+248], X30
	004 Move [X31+256], X22
	005 Move [X31+264], X21
	006 Move [X31+272], X20
	007 Move [X31+280], X19
	008 Add X8, X31, 160
	009 NotImplemented "Instruction MOVI not yet implemented."
	010 Move X19, X0
	011 Move [X31+224], W31
	012 Move [X31+156], W31
	013 Move [X8+32], V0
	014 Move [X8+40], V0
	015 Move [X8], V0
	016 Move [X8+8], V0
	017 Move [X31+152], W31
	018 Call BaseInputModule.get_input, X0
	019 Compare X0, 0
	020 JumpIfEqual {83}
	021 Move W20, W31
	022 Move X8, [X0]
	023 Move X9, [X8+776]
	024 Move X1, [X8+784]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X0, X19
	028 Call BaseInputModule.get_input, X0
	029 Compare X0, 0
	030 JumpIfEqual {83}
	031 Move X8, [X0]
	032 Move W1, W20
	033 Move X9, [X8+792]
	034 Move X2, [X8+800]
	035 Add X8, X31, 80
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Add X0, X31, 160
	038 Add X1, X31, 80
	039 Move W2, 68
	040 Call 0x3EB2AC0
	041 Add X0, X31, 160
	042 Move X1, X31
	043 Call Touch.get_type, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Add X0, X31, 8
	046 Add X1, X31, 160
	047 Move W2, 68
	048 Call 0x3EB2AC0
	049 Add X1, X31, 8
	050 Add X2, X31, 152
	051 Add X3, X31, 156
	052 Move X0, X19
	053 Call PointerInputModule.GetTouchPointerEventData, X0, X1, X2, X3
	054 Move W22, [X31+156]
	055 Move W2, [X31+152]
	056 Move X21, X0
	057 Move X0, X19
	058 Move X1, X21
	059 Move W3, W22
	060 Call TouchInputModule.ProcessTouchPress, X0, X1, X2, X3
	061 Compare W22, 0
	062 JumpIfEqual {66}
	063 Move X0, X19
	064 Move X1, X21
	065 Call PointerInputModule.RemovePointerData, X0, X1
	066 Move X8, [X19]
	067 Move X0, X19
	068 Move X1, X21
	069 Move X9, [X8+776]
	070 Move X2, [X8+784]
	071 NotImplemented "Instruction BLR not yet implemented."
	072 Move X8, [X19]
	073 Move X0, X19
	074 Move X1, X21
	075 Move X9, [X8+792]
	076 Move X2, [X8+800]
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move X0, X19
	079 Add W20, W20, 1
	080 Call BaseInputModule.get_input, X0
	081 Compare X0, 0
	082 JumpIfNotEqual {22}
	083 Call 0x1C17F20
	084 Move X20, [X31+272]
	085 Move X19, [X31+280]
	086 Move X22, [X31+256]
	087 Move X21, [X31+264]
	088 Move X29, [X31+240]
	089 Move X30, [X31+248]
	090 Add X31, X31, 288
	091 Return 

Method: System.Void ProcessTouchPress(UnityEngine.EventSystems.PointerEventData pointerEvent, System.Boolean pressed, System.Boolean released)

Disassembly:
	0x03E59CA8 MOV V0.16B, V8.16B
	0x03E59CAC BLR X9
	0x03E59CB0 B 0x3E59D28
	0x03E59CB4 LDR X8, [X0 + 0x30]
	0x03E59CB8 CBZ X8, 0x3E5A1E8
	0x03E59CBC MOV X0, X31
	0x03E59CC0 BL 0x3E48798
	0x03E59CC4 CBZ X0, 0x3E5A210
	0x03E59CC8 ADD X8, X31, 0xB8
	0x03E59CCC LDR V0, [X8]
	0x03E59CD0 LDR X8, [X31 + 0xC8]
	0x03E59CD4 LDR X20, [X0 + 0x30]
	0x03E59CD8 LDR V8, [X31 + 0xB4]
	0x03E59CDC MOV X0, X21
	0x03E59CE0 STR V0, [X31 + 0x2]
	0x03E59CE4 STR X8, [X31 + 0x30]
	0x03E59CE8 BL 0x3E5A510
	0x03E59CEC CBZ X20, 0x3E5A210
	0x03E59CF0 LDR V0, [X31 + 0x2]
	0x03E59CF4 LDR X8, [X31 + 0x30]
	0x03E59CF8 MOV W2, W0
	0x03E59CFC LDR X9, [X20 + 0x18]
	0x03E59D00 LDR X0, [X20 + 0x40]
	0x03E59D04 STR V0, [X31 + 0x11]
	0x03E59D08 STR X8, [X31 + 0x120]
	0x03E59D0C LDR X3, [X20 + 0x28]
	0x03E59D10 ADD X1, X31, 0x110
	0x03E59D14 MOV V0.16B, V8.16B
	0x03E59D18 BLR X9
	0x03E59D1C STR X0, [X21 + 0x48]
	0x03E59D20 CBZ X0, 0x3E5A210
	0x03E59D24 LDR W0, [X0 + 0x18]
	0x03E59D28 CMP W0, 0x1
	0x03E59D2C B.LT 0x3E5A1E8
	0x03E59D30 LDR X8, [X31 + 0x168]
	0x03E59D34 MOV W10, W0
	0x03E59D38 ADRP X24, 0x29A000
	0x03E59D3C ADD X9, X31, 0x110
	0x03E59D40 ADD X11, X8, 0x104
	0x03E59D44 STP X10, X11, [X31 + 0x10]
	0x03E59D48 LDR X24, [X24 + 0x598]
	0x03E59D4C ADD X8, X31, 0x20
	0x03E59D50 MOV X26, X31
	0x03E59D54 MOVZ W29, 0x20
	0x03E59D58 ADD X20, X8, 0x2C
	0x03E59D5C ADD X8, X9, 0x2C
	0x03E59D60 STR X8, [X31 + 0x8]
	0x03E59D64 LDR X8, [X21 + 0x48]
	0x03E59D68 CBZ X8, 0x3E5A210
	0x03E59D6C LDR W9, [X8 + 0x18]
	0x03E59D70 CMP X26, X9
	0x03E59D74 B.CS 0x3E5A214
	0x03E59D78 ADD X0, X8, X29
	0x03E59D7C MOV X1, X31
	0x03E59D80 BL 0x3C896B8
	0x03E59D84 CBZ X0, 0x3E5A210
	0x03E59D88 MOV X1, X31
	0x03E59D8C BL 0x3C32ECC
	0x03E59D90 CBZ X0, 0x3E5A210
	0x03E59D94 ADRP X8, 0x2C6000
	0x03E59D98 LDR X8, [X8 + 0x9B0]
	0x03E59D9C LDR X1, [X8]
	0x03E59DA0 BL 0x21E52E4
	0x03E59DA4 LDR X8, [X24]
	0x03E59DA8 MOV X23, X0
	0x03E59DAC LDR W9, [X8 + 0xE0]
	0x03E59DB0 CBNZ W9, 0x3E59DBC
	0x03E59DB4 MOV X0, X8
	0x03E59DB8 BL 0x1C16DFC
	0x03E59DBC MOV X0, X23
	0x03E59DC0 MOV X1, X31
	0x03E59DC4 MOV X2, X31
	0x03E59DC8 BL 0x3C354F8
	0x03E59DCC MOV X22, X31
	0x03E59DD0 TBZ X0, 0x0, 0x3E59E44
	0x03E59DD4 CBZ X23, 0x3E59E34
	0x03E59DD8 ADRP X8, 0x312000
	0x03E59DDC LDR X9, [X23]
	0x03E59DE0 LDR X8, [X8 + 0xCE8]
	0x03E59DE4 ADRP X10, 0x312000
	0x03E59DE8 LDR X11, [X8]
	0x03E59DEC ADRP X8, 0x312000
	0x03E59DF0 LDR X8, [X8 + 0xCF0]
	0x03E59DF4 LDR X8, [X8]
	0x03E59DF8 LDR X10, [X10 + 0xCE0]
	0x03E59DFC LDRB W13, [X9 + 0x130]
	0x03E59E00 LDRB W12, [X11 + 0x130]
	0x03E59E04 CMP X9, X8
	0x03E59E08 LDR X10, [X10]
	0x03E59E0C CCMP X9, X10, 0x4, NE
	0x03E59E10 CSEL X8, X23, X31, EQ
	0x03E59E14 CMP W13, W12
	0x03E59E18 B.CC 0x3E59E38
	0x03E59E1C LDR X9, [X9 + 0xC8]
	0x03E59E20 ADD X9, X9, X12, 0x3, LSL
	0x03E59E24 LDUR X9, [X9 - 0x8]
	0x03E59E28 CMP X9, X11
	0x03E59E2C CSEL X10, X23, X31, EQ
	0x03E59E30 B 0x3E59E3C
	0x03E59E34 MOV X8, X31
	0x03E59E38 MOV X10, X31
	0x03E59E3C CMP X10, 0x0
	0x03E59E40 CSEL X22, X8, X23, EQ
	0x03E59E44 MOVI V0.2D, 0x0
	0x03E59E48 STP V0, V0, [X31 + 0x50]
	0x03E59E4C STP V0, V0, [X31 + 0x30]
	0x03E59E50 STR V0, [X31 + 0x2]
	0x03E59E54 LDR X8, [X21 + 0x48]
	0x03E59E58 CBZ X8, 0x3E5A210
	0x03E59E5C LDR W9, [X8 + 0x18]
	0x03E59E60 CMP X26, X9
	0x03E59E64 B.CS 0x3E5A214
	0x03E59E68 ADD X0, X8, X29
	0x03E59E6C MOV X1, X31
	0x03E59E70 BL 0x3C896B8
	0x03E59E74 CBZ X0, 0x3E5A210
	0x03E59E78 MOV X1, X31
	0x03E59E7C BL 0x3C32ECC
	0x03E59E80 STP X0, X21, [X31 + 0x20]
	0x03E59E84 LDR X8, [X21 + 0x48]
	0x03E59E88 CBZ X8, 0x3E5A210
	0x03E59E8C LDR W9, [X8 + 0x18]
	0x03E59E90 CMP X26, X9
	0x03E59E94 B.CS 0x3E5A214
	0x03E59E98 ADD X0, X8, X29
	0x03E59E9C MOV X1, X31
	0x03E59EA0 BL 0x3C896B0
	0x03E59EA4 STR S0, [X31 + 0x30]
	0x03E59EA8 LDR X8, [X21 + 0x48]
	0x03E59EAC CBZ X8, 0x3E5A210
	0x03E59EB0 LDR W9, [X8 + 0x18]
	0x03E59EB4 CMP X26, X9
	0x03E59EB8 B.CS 0x3E5A214
	0x03E59EBC ADD X0, X8, X29
	0x03E59EC0 MOV X1, X31
	0x03E59EC4 BL 0x3C896A0
	0x03E59EC8 STP S0, S1, [X31 + 0x4C]
	0x03E59ECC STR W31, [X31 + 0x54]
	0x03E59ED0 LDR X8, [X21 + 0x48]
	0x03E59ED4 CBZ X8, 0x3E5A210
	0x03E59ED8 LDR W9, [X8 + 0x18]
	0x03E59EDC CMP X26, X9
	0x03E59EE0 B.CS 0x3E5A214
	0x03E59EE4 ADD X0, X8, X29
	0x03E59EE8 MOV X1, X31
	0x03E59EEC BL 0x3C896A8
	0x03E59EF0 LDR X8, [X31 + 0x168]
	0x03E59EF4 STP S0, S1, [X31 + 0x58]
	0x03E59EF8 STR W31, [X31 + 0x60]
	0x03E59EFC CBZ X8, 0x3E5A210
	0x03E59F00 LDR X8, [X31 + 0x18]
	0x03E59F04 LDR V0, [X8]
	0x03E59F08 LDR W8, [X31 + 0xB0]
	0x03E59F0C STUR D0, [X31 + 0x64]
	0x03E59F10 STR W8, [X31 + 0x6C]
	0x03E59F14 CBZ X19, 0x3E5A210
	0x03E59F18 LDR V0, [X19 + 0x18]
	0x03E59F1C LDR X0, [X24]
	0x03E59F20 SCVTF S0, S0
	0x03E59F24 STR S0, [X31 + 0x34]
	0x03E59F28 LDR W8, [X0 + 0xE0]
	0x03E59F2C CBNZ W8, 0x3E59F34
	0x03E59F30 BL 0x1C16DFC
	0x03E59F34 MOV X0, X22
	0x03E59F38 MOV X1, X31
	0x03E59F3C MOV X2, X31
	0x03E59F40 BL 0x3C354F8
	0x03E59F44 TBZ X0, 0x0, 0x3E59F5C
	0x03E59F48 CBZ X22, 0x3E5A210
	0x03E59F4C MOV X0, X22
	0x03E59F50 MOV X1, X31
	0x03E59F54 BL 0x3C13200
	0x03E59F58 B 0x3E59F64
	0x03E59F5C MOV X0, X31
	0x03E59F60 BL 0x3C5D704
	0x03E59F64 LDR X8, [X24]
	0x03E59F68 STR W0, [X31 + 0x3C]
	0x03E59F6C LDR W9, [X8 + 0xE0]
	0x03E59F70 CBNZ W9, 0x3E59F7C
	0x03E59F74 MOV X0, X8
	0x03E59F78 BL 0x1C16DFC
	0x03E59F7C MOV X0, X22
	0x03E59F80 MOV X1, X31
	0x03E59F84 MOV X2, X31
	0x03E59F88 BL 0x3C354F8
	0x03E59F8C TBZ X0, 0x0, 0x3E59FA4
	0x03E59F90 CBZ X22, 0x3E5A210
	0x03E59F94 MOV X0, X22
	0x03E59F98 MOV X1, X31
	0x03E59F9C BL 0x3C1323C
	0x03E59FA0 B 0x3E59FA8
	0x03E59FA4 MOV W0, W31
	0x03E59FA8 LDR X8, [X24]
	0x03E59FAC STR W0, [X31 + 0x40]
	0x03E59FB0 LDR W9, [X8 + 0xE0]
	0x03E59FB4 CBNZ W9, 0x3E59FC0
	0x03E59FB8 MOV X0, X8
	0x03E59FBC BL 0x1C16DFC
	0x03E59FC0 MOV X0, X22
	0x03E59FC4 MOV X1, X31
	0x03E59FC8 MOV X2, X31
	0x03E59FCC BL 0x3C354F8
	0x03E59FD0 TBZ X0, 0x0, 0x3E59FE8
	0x03E59FD4 CBZ X22, 0x3E5A210
	0x03E59FD8 MOV X0, X22
	0x03E59FDC MOV X1, X31
	0x03E59FE0 BL 0x3C13100
	0x03E59FE4 B 0x3E59FEC
	0x03E59FE8 MOV W0, W31
	0x03E59FEC LDR X8, [X24]
	0x03E59FF0 STR W0, [X31 + 0x44]
	0x03E59FF4 LDR W9, [X8 + 0xE0]
	0x03E59FF8 CBNZ W9, 0x3E5A004
	0x03E59FFC MOV X0, X8
	0x03E5A000 BL 0x1C16DFC
	0x03E5A004 MOV X0, X22
	0x03E5A008 MOV X1, X31
	0x03E5A00C MOV X2, X31
	0x03E5A010 BL 0x3C354F8
	0x03E5A014 TBZ X0, 0x0, 0x3E5A030
	0x03E5A018 CBZ X22, 0x3E5A210
	0x03E5A01C MOV X0, X22
	0x03E5A020 MOV X1, X31
	0x03E5A024 BL 0x3C13180
	0x03E5A028 MOV W23, W0
	0x03E5A02C B 0x3E5A034
	0x03E5A030 MOV W23, W31
	0x03E5A034 STR W23, [X31 + 0x48]
	0x03E5A038 LDR V0, [X31 + 0x2]
	0x03E5A03C LDR W8, [X20 + 0x20]
	0x03E5A040 LDP V2, V1, [X20]
	0x03E5A044 LDR V8, [X31 + 0x30]
	0x03E5A048 LDUR X25, [X31 + 0x34]
	0x03E5A04C LDP W27, W28, [X31 + 0x3C]
	0x03E5A050 LDR W24, [X31 + 0x44]
	0x03E5A054 MOV X0, X31
	0x03E5A058 STR V0, [X31 + 0xA]
	0x03E5A05C STR W8, [X31 + 0x90]
	0x03E5A060 STP V2, V1, [X31 + 0x70]
	0x03E5A064 BL 0x3C5D704
	0x03E5A068 CMP W27, W0
	0x03E5A06C B.EQ 0x3E5A0F4
	0x03E5A070 CBZ X22, 0x3E5A210
	0x03E5A074 MOV X0, X22
	0x03E5A078 MOV X1, X31
	0x03E5A07C BL 0x3C13200
	0x03E5A080 MOV X1, X31
	0x03E5A084 BL 0x3C5D72C
	0x03E5A088 CBZ X0, 0x3E5A0F4
	0x03E5A08C LDP S9, S10, [X31 + 0xC4]
	0x03E5A090 LDR V8, [X31 + 0xCC]
	0x03E5A094 MOV X1, X31
	0x03E5A098 MOV X22, X0
	0x03E5A09C BL 0x3C32E90
	0x03E5A0A0 CBZ X0, 0x3E5A210
	0x03E5A0A4 MOV X1, X31
	0x03E5A0A8 BL 0x3C3F58C
	0x03E5A0AC LDP S3, S4, [X31 + 0xB8]
	0x03E5A0B0 LDR V5, [X31 + 0xC0]
	0x03E5A0B4 MOV X0, X22
	0x03E5A0B8 MOV X1, X31
	0x03E5A0BC FSUB S0, S0, S3
	0x03E5A0C0 FSUB S1, S1, S4
	0x03E5A0C4 FSUB S2, S2, S5
	0x03E5A0C8 FMUL S0, S9, S0
	0x03E5A0CC FMUL S1, S10, S1
	0x03E5A0D0 FADD S0, S0, S1
	0x03E5A0D4 FMUL S1, S8, S2
	0x03E5A0D8 FADD S8, S1, S0
	0x03E5A0DC BL 0x3C5D768
	0x03E5A0E0 MOV W24, W0
	0x03E5A0E4 MOV X0, X22
	0x03E5A0E8 MOV X1, X31
	0x03E5A0EC BL 0x3C5D7A4
	0x03E5A0F0 MOV W23, W0
	0x03E5A0F4 LDR V0, [X31 + 0xA]
	0x03E5A0F8 LDP V1, V2, [X31 + 0x70]
	0x03E5A0FC LDR W8, [X31 + 0x90]
	0x03E5A100 ADRP X9, 0x2EF000
	0x03E5A104 STR V0, [X31 + 0x10]
	0x03E5A108 STP V1, V2, [X31 + 0xD0]
	0x03E5A10C STR W8, [X31 + 0xF0]
	0x03E5A110 LDR W10, [X19 + 0x1C]
	0x03E5A114 LDR X8, [X19 + 0x10]
	0x03E5A118 LDR X9, [X9 + 0x358]
	0x03E5A11C ADD W10, W10, 0x1
	0x03E5A120 LDR X9, [X9]
	0x03E5A124 STR W10, [X19 + 0x1C]
	0x03E5A128 CBZ X8, 0x3E5A210
	0x03E5A12C LDRSW X10, [X19 + 0x18]
	0x03E5A130 LDR W11, [X8 + 0x18]
	0x03E5A134 CMP W10, W11
	0x03E5A138 B.CS 0x3E5A17C
	0x03E5A13C ADD W9, W10, 0x1
	0x03E5A140 STR W9, [X19 + 0x18]
	0x03E5A144 LDR V0, [X31 + 0x10]
	0x03E5A148 MOVZ W11, 0x50
	0x03E5A14C MADD X8, X10, X11, X8
	0x03E5A150 STR S8, [X8 + 0x30]
	0x03E5A154 STUR X25, [X8 + 0x34]
	0x03E5A158 STP W27, W28, [X8 + 0x3C]
	0x03E5A15C STP W24, W23, [X8 + 0x44]
	0x03E5A160 STR V0, [X8 + 0x2]
	0x03E5A164 LDP V1, V0, [X31 + 0xD0]
	0x03E5A168 LDR W9, [X31 + 0xF0]
	0x03E5A16C STUR V0, [X8 + 0x5C]
	0x03E5A170 STR W9, [X8 + 0x6C]
	0x03E5A174 STUR V1, [X8 + 0x4C]
	0x03E5A178 B 0x3E5A1CC
	0x03E5A17C LDR X8, [X9 + 0x20]
	0x03E5A180 LDR V0, [X31 + 0x10]
	0x03E5A184 LDR X9, [X31 + 0x8]
	0x03E5A188 ADD X1, X31, 0x110
	0x03E5A18C LDR X8, [X8 + 0xC0]
	0x03E5A190 MOV X0, X19
	0x03E5A194 LDR X2, [X8 + 0x70]
	0x03E5A198 ADD X8, X31, 0xB8
	0x03E5A19C STR V0, [X31 + 0x11]
	0x03E5A1A0 STR S8, [X31 + 0x120]
	0x03E5A1A4 LDP V0, V1, [X31 + 0xD0]
	0x03E5A1A8 STUR X25, [X8 + 0x6C]
	0x03E5A1AC LDR W8, [X31 + 0xF0]
	0x03E5A1B0 STR W27, [X31 + 0x12C]
	0x03E5A1B4 STR W28, [X31 + 0x130]
	0x03E5A1B8 STR W24, [X31 + 0x134]
	0x03E5A1BC STR W23, [X31 + 0x138]
	0x03E5A1C0 STR W8, [X9 + 0x20]
	0x03E5A1C4 STP V0, V1, [X9]
	0x03E5A1C8 BL 0x3035DFC
	0x03E5A1CC LDR X8, [X31 + 0x10]
	0x03E5A1D0 ADRP X24, 0x299000
	0x03E5A1D4 LDR X24, [X24 + 0x598]
	0x03E5A1D8 ADD X26, X26, 0x1
	0x03E5A1DC CMP X8, X26
	0x03E5A1E0 ADD X29, X29, 0x24
	0x03E5A1E4 B.NE 0x3E59D64
	0x03E5A1E8 LDP X20, X19, [X31 + 0x1D0]
	0x03E5A1EC LDP X22, X21, [X31 + 0x1C0]
	0x03E5A1F0 LDP X24, X23, [X31 + 0x1B0]
	0x03E5A1F4 LDP X26, X25, [X31 + 0x1A0]
	0x03E5A1F8 LDP X28, X27, [X31 + 0x190]
	0x03E5A1FC LDP X29, X30, [X31 + 0x180]
	0x03E5A200 LDP D9, D8, [X31 + 0x170]
	0x03E5A204 LDR V10, [X31 + 0x160]
	0x03E5A208 ADD X31, X31, 0x1E0
	0x03E5A20C RET
	0x03E5A210 BL 0x1C16F20
	0x03E5A214 BL 0x1C16F28
	0x03E5A218 SUB X31, X31, 0xA0
	0x03E5A21C STR D10, [X31 + 0x40]
	0x03E5A220 STP D9, D8, [X31 + 0x50]
	0x03E5A224 STP X30, X25, [X31 + 0x60]
	0x03E5A228 STP X24, X23, [X31 + 0x70]
	0x03E5A22C STP X22, X21, [X31 + 0x80]
	0x03E5A230 STP X20, X19, [X31 + 0x90]
	0x03E5A234 ADRP X25, 0x58E000
	0x03E5A238 ADRP X24, 0x299000
	0x03E5A23C LDRB W8, [X25 + 0x8CB]
	0x03E5A240 LDR X24, [X24 + 0x598]
	0x03E5A244 MOV X19, X4
	0x03E5A248 MOV X22, X3
	0x03E5A24C MOV X21, X2
	0x03E5A250 MOV X23, X1
	0x03E5A254 MOV X20, X0
	0x03E5A258 TBNZ X8, 0x0, 0x3E5A270
	0x03E5A25C ADRP X0, 0x299000
	0x03E5A260 LDR X0, [X0 + 0x598]
	0x03E5A264 BL 0x1C16CF4
	0x03E5A268 MOVZ W8, 0x1
	0x03E5A26C STRB W8, [X25 + 0x8CB]
	0x03E5A270 LDR X8, [X20]
	0x03E5A274 MOV X0, X20
	0x03E5A278 LDR X9, [X8 + 0x258]
	0x03E5A27C LDR X1, [X8 + 0x260]
	0x03E5A280 BLR X9
	0x03E5A284 LDR X8, [X24]
	0x03E5A288 MOV X24, X0
	0x03E5A28C LDR W9, [X8 + 0xE0]
	0x03E5A290 CBNZ W9, 0x3E5A29C
	0x03E5A294 MOV X0, X8
	0x03E5A298 BL 0x1C16DFC
	0x03E5A29C MOV X0, X24
	0x03E5A2A0 MOV X1, X31
	0x03E5A2A4 MOV X2, X31
	0x03E5A2A8 BL 0x3C3883C
	0x03E5A2AC TBZ X0, 0x0, 0x3E5A2B8
	0x03E5A2B0 MOV W0, W31
	0x03E5A2B4 B 0x3E5A4EC
	0x03E5A2B8 CBZ X23, 0x3E5A50C
	0x03E5A2BC LDR V0, [X23 + 0x104]
	0x03E5A2C0 LDR V1, [X23 + 0x108]
	0x03E5A2C4 MOV X0, X31
	0x03E5A2C8 BL 0x3E38A54
	0x03E5A2CC ADRP X24, 0x57E000
	0x03E5A2D0 LDRB W8, [X24 + 0x783]
	0x03E5A2D4 MOV V8.16B, V0.16B
	0x03E5A2D8 MOV V9.16B, V1.16B
	0x03E5A2DC MOV V10.16B, V2.16B
	0x03E5A2E0 CBNZ W8, 0x3E5A2F8
	0x03E5A2E4 ADRP X0, 0x299000
	0x03E5A2E8 LDR X0, [X0 + 0x5A0]
	0x03E5A2EC BL 0x1C16CF4
	0x03E5A2F0 MOVZ W8, 0x1
	0x03E5A2F4 STRB W8, [X24 + 0x783]
	0x03E5A2F8 ADRP X8, 0x299000
	0x03E5A2FC LDR X8, [X8 + 0x5A0]
	0x03E5A300 LDR X8, [X8]
	0x03E5A304 LDR X8, [X8 + 0xB8]
	0x03E5A308 LDP S0, S1, [X8]
	0x03E5A30C LDR V2, [X8 + 0x8]
	0x03E5A310 ADRP X8, 0xFFFFFFFFFCC8F000
	0x03E5A314 FSUB S0, S8, S0
	0x03E5A318 FSUB S1, S9, S1
	0x03E5A31C FMUL S0, S0, S0
	0x03E5A320 FMUL S1, S1, S1
	0x03E5A324 FADD S0, S0, S1
	0x03E5A328 LDR V1, [X8 + 0xF20]

ISIL:
	001 Move [X31-80], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X26
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X21, 0x590000
	012 Move W8, [X21+2237]
	013 Move W22, W3
	014 Move W23, W2
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {56}
	021 Move X0, 0x2F1000
	022 Move X0, [X0+896]
	023 Call 0x1C17CF4
	024 Move X0, 0x2F1000
	025 Move X0, [X0+904]
	026 Call 0x1C17CF4
	027 Move X0, 0x313000
	028 Move X0, [X0+3200]
	029 Call 0x1C17CF4
	030 Move X0, 0x2F1000
	031 Move X0, [X0+912]
	032 Call 0x1C17CF4
	033 Move X0, 0x2F1000
	034 Move X0, [X0+920]
	035 Call 0x1C17CF4
	036 Move X0, 0x2F1000
	037 Move X0, [X0+928]
	038 Call 0x1C17CF4
	039 Move X0, 0x2F1000
	040 Move X0, [X0+936]
	041 Call 0x1C17CF4
	042 Move X0, 0x2F1000
	043 Move X0, [X0+944]
	044 Call 0x1C17CF4
	045 Move X0, 0x2F1000
	046 Move X0, [X0+952]
	047 Call 0x1C17CF4
	048 Move X0, 0x2C3000
	049 Move X0, [X0+2552]
	050 Call 0x1C17CF4
	051 Move X0, 0x29B000
	052 Move X0, [X0+1432]
	053 Call 0x1C17CF4
	054 Move W8, 1
	055 Move [X21+2237], W8
	056 Compare X19, 0
	057 JumpIfEqual {488}
	058 Move X21, [X19+80]
	059 Move TEMP, X23
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {258}
	063 Move W24, 1
	064 Move [X19+248], W24
	065 Move X25, 0x581000
	066 Move W8, [X25+1935]
	067 Add X23, X19, 260
	068 Compare W8, 0
	069 JumpIfNotEqual {74}
	070 Move X0, 0x2A3000
	071 Move X0, [X0+3848]
	072 Call 0x1C17CF4
	073 Move [X25+1935], W24
	074 Move X8, 0x2A3000
	075 Move X8, [X8+3848]
	076 Add X1, X19, 80
	077 Add X0, X19, 160
	078 Move W2, 80
	079 Move X8, [X8]
	080 Move X8, [X8+184]
	081 Move V1, [X8]
	082 NotImplemented "Instruction STRH not yet implemented."
	083 Move V0, [X23]
	084 Move [X23+8], D1
	085 Move [X23+16], D0
	086 Call 0x3EB2AC0
	087 Move X0, X20
	088 Move X1, X21
	089 Move X2, X19
	090 Call PointerInputModule.DeselectIfSelectionChanged, X0, X1, X2
	091 Move X26, 0x29B000
	092 Move X26, [X26+1432]
	093 Move X23, [X19+32]
	094 Move X0, [X26]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X0, X23
	100 Move X1, X21
	101 Move X2, X31
	102 Call Object.op_Inequality, X0, X1
	103 Move TEMP, X0
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfNotEqual {112}
	107 Move X0, X20
	108 Move X1, X19
	109 Move X2, X21
	110 Call BaseInputModule.HandlePointerExitAndEnter, X0, X1, X2
	111 Move [X19+32], X21
	112 Move X25, 0x2C3000
	113 Move X25, [X25+2552]
	114 Move X0, [X25]
	115 Move W8, [X0+224]
	116 Compare W8, 0
	117 JumpIfNotEqual {119}
	118 Call 0x1C17DFC
	119 Move X23, 0x589000
	120 Move W8, [X23+902]
	121 Compare W8, 0
	122 JumpIfNotEqual {128}
	123 Move X0, 0x2C3000
	124 Move X0, [X0+2552]
	125 Call 0x1C17CF4
	126 Move W8, 1
	127 Move [X23+902], W8
	128 Move X0, [X25]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {134}
	132 Call 0x1C17DFC
	133 Move X0, [X25]
	134 Move X9, 0x2F1000
	135 Move X8, [X0+184]
	136 Move X9, [X9+904]
	137 Move X0, X21
	138 Move X1, X19
	139 Move X2, [X8+24]
	140 Move X3, [X9]
	141 Call 0x21DE8A8, X0, X1, X2
	142 Move X8, [X26]
	143 Move X23, X0
	144 Move W9, [X8+224]
	145 Compare W9, 0
	146 JumpIfNotEqual {149}
	147 Move X0, X8
	148 Call 0x1C17DFC
	149 Move X0, X23
	150 Move X1, X31
	151 Move X2, X31
	152 Call Object.op_Equality, X0, X1
	153 Move TEMP, X0
	154 And TEMP, TEMP, 1
	155 Compare TEMP, 1
	156 JumpIfNotEqual {168}
	157 Move X0, [X25]
	158 Move W8, [X0+224]
	159 Compare W8, 0
	160 JumpIfNotEqual {162}
	161 Call 0x1C17DFC
	162 Move X8, 0x2F1000
	163 Move X8, [X8+952]
	164 Move X0, X21
	165 Move X1, [X8]
	166 Call 0x21DEB64, X0
	167 Move X23, X0
	168 Move X0, X31
	169 Call Time.get_unscaledTime
	170 Move X0, [X26]
	171 Move X24, [X19+48]
	172 Move V8, V0
	173 Move W8, [X0+224]
	174 Compare W8, 0
	175 JumpIfNotEqual {177}
	176 Call 0x1C17DFC
	177 Move X0, X23
	178 Move X1, X24
	179 Move X2, X31
	180 Call Object.op_Equality, X0, X1
	181 Move TEMP, X0
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfNotEqual {192}
	185 Move V0, [X19+308]
	186 Move X8, -53927936
	187 Move V1, [X8+1100]
	188 Subtract S0, S8, S0
	189 NotImplemented "Instruction FCMP not yet implemented."
	190 Move W8, [X19+312]
	191 Add W8, W8, 1
	192 Move W8, 1
	193 Move [X19+312], W8
	194 Move W8, 1
	195 Move [X19+312], W8
	196 Move [X19+308], S8
	197 Move X0, X19
	198 Move X1, X23
	199 Call PointerEventData.set_pointerPress, X0, X1
	200 Move [X19+56], X21
	201 Move [X19+308], S8
	202 Move X0, [X25]
	203 Move W8, [X0+224]
	204 Compare W8, 0
	205 JumpIfNotEqual {207}
	206 Call 0x1C17DFC
	207 Move X8, 0x2F1000
	208 Move X8, [X8+944]
	209 Move X0, X21
	210 Move X1, [X8]
	211 Call 0x21DEB64, X0
	212 Move [X19+64], X0
	213 Move X23, X0
	214 Move X0, [X26]
	215 Move W8, [X0+224]
	216 Compare W8, 0
	217 JumpIfNotEqual {219}
	218 Call 0x1C17DFC
	219 Move X0, X23
	220 Move X1, X31
	221 Move X2, X31
	222 Call Object.op_Inequality, X0, X1
	223 Move TEMP, X0
	224 And TEMP, TEMP, 1
	225 Compare TEMP, 1
	226 JumpIfNotEqual {257}
	227 Move X0, [X25]
	228 Move X23, [X19+64]
	229 Move W8, [X0+224]
	230 Compare W8, 0
	231 JumpIfNotEqual {233}
	232 Call 0x1C17DFC
	233 Move X24, 0x589000
	234 Move W8, [X24+903]
	235 Compare W8, 0
	236 JumpIfNotEqual {242}
	237 Move X0, 0x2C3000
	238 Move X0, [X0+2552]
	239 Call 0x1C17CF4
	240 Move W8, 1
	241 Move [X24+903], W8
	242 Move X0, [X25]
	243 Move W8, [X0+224]
	244 Compare W8, 0
	245 JumpIfNotEqual {248}
	246 Call 0x1C17DFC
	247 Move X0, [X25]
	248 Move X9, 0x2F1000
	249 Move X8, [X0+184]
	250 Call 0x3EB2A5C
	251 Return 
	252 Move X0, X23
	253 Move X1, X19
	254 Move X2, [X8+48]
	255 Move X3, [X9]
	256 Call 0x21DE088, X0, X1, X2
	257 Move [X20+120], X19
	258 Move TEMP, X22
	259 And TEMP, TEMP, 1
	260 Compare TEMP, 1
	261 JumpIfNotEqual {477}
	262 Move X24, 0x2C2000
	263 Move X24, [X24+2552]
	264 Move X22, [X19+40]
	265 Move X0, [X24]
	266 Move W8, [X0+224]
	267 Compare W8, 0
	268 JumpIfNotEqual {270}
	269 Call 0x1C17DFC
	270 Move X23, 0x588000
	271 Move W8, [X23+904]
	272 Compare W8, 0
	273 JumpIfNotEqual {279}
	274 Move X0, 0x2C2000
	275 Move X0, [X0+2552]
	276 Call 0x1C17CF4
	277 Move W8, 1
	278 Move [X23+904], W8
	279 Move X0, [X24]
	280 Move W8, [X0+224]
	281 Compare W8, 0
	282 JumpIfNotEqual {285}
	283 Call 0x1C17DFC
	284 Move X0, [X24]
	285 Move X9, 0x2F0000
	286 Move X8, [X0+184]
	287 Move X9, [X9+936]
	288 Move X0, X22
	289 Move X1, X19
	290 Move X2, [X8+32]
	291 Move X3, [X9]
	292 Call 0x21DE088, X0, X1, X2
	293 Move X8, 0x2F0000
	294 Move X8, [X8+952]
	295 Move X0, X21
	296 Move X1, [X8]
	297 Call 0x21DEB64, X0
	298 Move X25, 0x29A000
	299 Move X25, [X25+1432]
	300 Move X23, [X19+40]
	301 Move X22, X0
	302 Move X8, [X25]
	303 Move W9, [X8+224]
	304 Compare W9, 0
	305 JumpIfNotEqual {308}
	306 Move X0, X8
	307 Call 0x1C17DFC
	308 Move X0, X23
	309 Move X1, X22
	310 Move X2, X31
	311 Call Object.op_Equality, X0, X1
	312 Move TEMP, X0
	313 And TEMP, TEMP, 1
	314 Compare TEMP, 1
	315 JumpIfNotEqual {348}
	316 Move W8, [X19+248]
	317 Compare W8, 0
	318 JumpIfEqual {348}
	319 Move X0, [X24]
	320 Move X21, [X19+40]
	321 Move W8, [X0+224]
	322 Compare W8, 0
	323 JumpIfNotEqual {325}
	324 Call 0x1C17DFC
	325 Move X22, 0x588000
	326 Move W8, [X22+905]
	327 Compare W8, 0
	328 JumpIfNotEqual {334}
	329 Move X0, 0x2C2000
	330 Move X0, [X0+2552]
	331 Call 0x1C17CF4
	332 Move W8, 1
	333 Move [X22+905], W8
	334 Move X0, [X24]
	335 Move W8, [X0+224]
	336 Compare W8, 0
	337 JumpIfNotEqual {340}
	338 Call 0x1C17DFC
	339 Move X0, [X24]
	340 Move X9, 0x2F0000
	341 Move X8, [X0+184]
	342 Move X9, [X9+928]
	343 Move X0, X21
	344 Move X1, X19
	345 Move X2, [X8+40]
	346 Move X3, [X9]
	347 Call 0x21DE088, X0, X1, X2
	348 Move X0, [X25]
	349 Move X22, [X19+64]
	350 Move W8, [X0+224]
	351 Compare W8, 0
	352 JumpIfNotEqual {354}
	353 Call 0x1C17DFC
	354 Move X0, X22
	355 Move X1, X31
	356 Move X2, X31
	357 Call Object.op_Inequality, X0, X1
	358 Move TEMP, X0
	359 And TEMP, TEMP, 1
	360 Compare TEMP, 1
	361 JumpIfNotEqual {393}
	362 Move W8, [X19+325]
	363 Compare W8, 0
	364 JumpIfEqual {393}
	365 Move X0, [X24]
	366 Move W8, [X0+224]
	367 Compare W8, 0
	368 JumpIfNotEqual {370}
	369 Call 0x1C17DFC
	370 Move X22, 0x588000
	371 Move W8, [X22+906]
	372 Compare W8, 0
	373 JumpIfNotEqual {379}
	374 Move X0, 0x2C2000
	375 Move X0, [X0+2552]
	376 Call 0x1C17CF4
	377 Move W8, 1
	378 Move [X22+906], W8
	379 Move X0, [X24]
	380 Move W8, [X0+224]
	381 Compare W8, 0
	382 JumpIfNotEqual {385}
	383 Call 0x1C17DFC
	384 Move X0, [X24]
	385 Move X9, 0x2F0000
	386 Move X8, [X0+184]
	387 Move X9, [X9+896]
	388 Move X0, X21
	389 Move X1, X19
	390 Move X2, [X8+80]
	391 Move X3, [X9]
	392 Call 0x21DE8A8, X0, X1, X2
	393 Move X0, X19
	394 Move X1, X31
	395 Move [X19+248], W31
	396 Call PointerEventData.set_pointerPress, X0, X1
	397 Move [X19+56], X31
	398 Move X0, [X25]
	399 Move X21, [X19+64]
	400 Move W8, [X0+224]
	401 Compare W8, 0
	402 JumpIfNotEqual {404}
	403 Call 0x1C17DFC
	404 Move X0, X21
	405 Move X1, X31
	406 Move X2, X31
	407 Call Object.op_Inequality, X0, X1
	408 Move TEMP, X0
	409 And TEMP, TEMP, 1
	410 Compare TEMP, 1
	411 JumpIfNotEqual {444}
	412 Move W8, [X19+325]
	413 Compare W8, 0
	414 JumpIfEqual {444}
	415 Move X0, [X24]
	416 Move X21, [X19+64]
	417 Move W8, [X0+224]
	418 Compare W8, 0
	419 JumpIfNotEqual {421}
	420 Call 0x1C17DFC
	421 Move X22, 0x588000
	422 Move W8, [X22+907]
	423 Compare W8, 0
	424 JumpIfNotEqual {430}
	425 Move X0, 0x2C2000
	426 Move X0, [X0+2552]
	427 Call 0x1C17CF4
	428 Move W8, 1
	429 Move [X22+907], W8
	430 Move X0, [X24]
	431 Move W8, [X0+224]
	432 Compare W8, 0
	433 JumpIfNotEqual {436}
	434 Call 0x1C17DFC
	435 Move X0, [X24]
	436 Move X9, 0x2F0000
	437 Move X8, [X0+184]
	438 Move X9, [X9+912]
	439 Move X0, X21
	440 Move X1, X19
	441 Move X2, [X8+72]
	442 Move X3, [X9]
	443 Call 0x21DE088, X0, X1, X2
	444 Move [X19+325], W31
	445 Move [X19+64], X31
	446 Move X0, [X24]
	447 Move X21, [X19+32]
	448 Move W8, [X0+224]
	449 Compare W8, 0
	450 JumpIfNotEqual {452}
	451 Call 0x1C17DFC
	452 Move X22, 0x588000
	453 Move W8, [X22+900]
	454 Compare W8, 0
	455 JumpIfNotEqual {461}
	456 Move X0, 0x2C2000
	457 Move X0, [X0+2552]
	458 Call 0x1C17CF4
	459 Move W8, 1
	460 Move [X22+900], W8
	461 Move X0, [X24]
	462 Move W8, [X0+224]
	463 Compare W8, 0
	464 JumpIfNotEqual {467}
	465 Call 0x1C17DFC
	466 Move X0, [X24]
	467 Move X9, 0x312000
	468 Move X8, [X0+184]
	469 Move X9, [X9+3200]
	470 Move X0, X21
	471 Move X1, X19
	472 Move X2, [X8+16]
	473 Move X3, [X9]
	474 Call 0x21DE8A8, X0, X1, X2
	475 Move [X19+32], X31
	476 Move [X20+120], X19
	477 Move X20, [X31+64]
	478 Move X19, [X31+72]
	479 Move X22, [X31+48]
	480 Move X21, [X31+56]
	481 Move X24, [X31+32]
	482 Move X23, [X31+40]
	483 Move X26, [X31+16]
	484 Move X25, [X31+24]
	485 Move X30, [X31+8]
	486 Move V8, [X31+80]
	487 Return 
	488 Call 0x1C17F20

Method: System.Void DeactivateModule()

Disassembly:
	0x03E5A32C FSUB S2, S10, S2

ISIL:
	001 Call PointerInputModule.ClearSelection, X0
	002 Return 

Method: System.String ToString()

Disassembly:
	0x03E5A330 FMUL S2, S2, S2
	0x03E5A334 FADD S0, S2, S0
	0x03E5A338 FCMP S0, S1
	0x03E5A33C B.MI 0x3E5A388
	0x03E5A340 MOVZ W9, 0x7F800000
	0x03E5A344 FMOV S0, W9
	0x03E5A348 FCVTZS W8, S10
	0x03E5A34C MOVZ W10, 0x80000000
	0x03E5A350 FCMP S10, S0
	0x03E5A354 CSEL W23, W10, W8, EQ
	0x03E5A358 STR W23, [X22]
	0x03E5A35C LDR X8, [X20]
	0x03E5A360 MOV X0, X20
	0x03E5A364 LDR X9, [X8 + 0x258]
	0x03E5A368 LDR X1, [X8 + 0x260]
	0x03E5A36C BLR X9
	0x03E5A370 CBZ X0, 0x3E5A50C
	0x03E5A374 MOV X1, X31
	0x03E5A378 BL 0x3C04134
	0x03E5A37C CMP W23, W0
	0x03E5A380 B.NE 0x3E5A2B0
	0x03E5A384 B 0x3E5A394
	0x03E5A388 LDR V8, [X23 + 0x104]
	0x03E5A38C LDR V9, [X23 + 0x108]
	0x03E5A390 FMOV S10, W31
	0x03E5A394 LDR X8, [X20]
	0x03E5A398 MOV X0, X20
	0x03E5A39C LDR X9, [X8 + 0x258]
	0x03E5A3A0 LDR X1, [X8 + 0x260]
	0x03E5A3A4 BLR X9
	0x03E5A3A8 CBZ X0, 0x3E5A50C
	0x03E5A3AC MOV X1, X31
	0x03E5A3B0 BL 0x3C03F08
	0x03E5A3B4 FADD S3, S1, S3
	0x03E5A3B8 FCMP S9, S3
	0x03E5A3BC MOV W0, W31
	0x03E5A3C0 B.PL 0x3E5A4EC
	0x03E5A3C4 FCMP S9, S1
	0x03E5A3C8 B.LT 0x3E5A4EC
	0x03E5A3CC FCMP S8, S0
	0x03E5A3D0 B.LT 0x3E5A4EC
	0x03E5A3D4 FADD S0, S0, S2
	0x03E5A3D8 FCMP S8, S0
	0x03E5A3DC B.PL 0x3E5A4EC
	0x03E5A3E0 LDR X8, [X20]
	0x03E5A3E4 MOV X0, X20
	0x03E5A3E8 LDR X9, [X8 + 0x258]
	0x03E5A3EC LDR X1, [X8 + 0x260]
	0x03E5A3F0 BLR X9
	0x03E5A3F4 CBZ X0, 0x3E5A50C
	0x03E5A3F8 ADD X8, X31, 0x8
	0x03E5A3FC MOV V0.16B, V8.16B
	0x03E5A400 MOV V1.16B, V9.16B
	0x03E5A404 MOV V2.16B, V10.16B
	0x03E5A408 MOV X1, X31
	0x03E5A40C BL 0x3C047B4
	0x03E5A410 LDR X8, [X31 + 0x18]
	0x03E5A414 LDUR V0, [X31 + 0x8]
	0x03E5A418 ADRP X22, 0x57F000
	0x03E5A41C STR X8, [X31 + 0x30]
	0x03E5A420 STR V0, [X31 + 0x2]
	0x03E5A424 STR X8, [X21 + 0x10]
	0x03E5A428 STR V0, [X21]
	0x03E5A42C LDRB W8, [X22 + 0x5AA]
	0x03E5A430 LDR V9, [X21 + 0x14]
	0x03E5A434 CBNZ W8, 0x3E5A44C
	0x03E5A438 ADRP X0, 0x2A0000
	0x03E5A43C LDR X0, [X0 + 0x4B8]
	0x03E5A440 BL 0x1C16CF4
	0x03E5A444 MOVZ W8, 0x1
	0x03E5A448 STRB W8, [X22 + 0x5AA]
	0x03E5A44C ADRP X8, 0x2A0000
	0x03E5A450 LDR X8, [X8 + 0x4B8]
	0x03E5A454 ADRP X9, 0xFFFFFFFFFCC90000
	0x03E5A458 LDR V0, [X9 + 0x240]
	0x03E5A45C FABS S2, S9
	0x03E5A460 LDR X8, [X8]
	0x03E5A464 FMOV S3, 8
	0x03E5A468 FMUL S0, S2, S0
	0x03E5A46C LDR X8, [X8 + 0xB8]
	0x03E5A470 LDR V1, [X8]
	0x03E5A474 FMUL S1, S1, S3
	0x03E5A478 FCMP S0, S1
	0x03E5A47C FCSEL S0, S0, S1, GT
	0x03E5A480 FCMP S2, S0
	0x03E5A484 B.PL 0x3E5A494
	0x03E5A488 MOVZ W8, 0x7F800000
	0x03E5A48C FMOV S0, W8
	0x03E5A490 B 0x3E5A4E4
	0x03E5A494 LDR X8, [X20]
	0x03E5A498 MOV X0, X20
	0x03E5A49C LDR X9, [X8 + 0x258]
	0x03E5A4A0 LDR X1, [X8 + 0x260]
	0x03E5A4A4 BLR X9
	0x03E5A4A8 CBZ X0, 0x3E5A50C
	0x03E5A4AC MOV X1, X31
	0x03E5A4B0 BL 0x3C03618
	0x03E5A4B4 LDR X8, [X20]
	0x03E5A4B8 MOV X0, X20
	0x03E5A4BC MOV V8.16B, V0.16B
	0x03E5A4C0 LDR X9, [X8 + 0x258]
	0x03E5A4C4 LDR X1, [X8 + 0x260]
	0x03E5A4C8 BLR X9
	0x03E5A4CC CBZ X0, 0x3E5A50C
	0x03E5A4D0 MOV X1, X31
	0x03E5A4D4 BL 0x3C035DC
	0x03E5A4D8 FSUB S0, S8, S0
	0x03E5A4DC FDIV S0, S0, S9
	0x03E5A4E0 FABS S0, S0
	0x03E5A4E4 MOVZ W0, 0x1
	0x03E5A4E8 STR S0, [X19]
	0x03E5A4EC LDP X20, X19, [X31 + 0x90]
	0x03E5A4F0 LDP X22, X21, [X31 + 0x80]
	0x03E5A4F4 LDP X24, X23, [X31 + 0x70]
	0x03E5A4F8 LDP X30, X25, [X31 + 0x60]
	0x03E5A4FC LDP D9, D8, [X31 + 0x50]
	0x03E5A500 LDR V10, [X31 + 0x40]
	0x03E5A504 ADD X31, X31, 0xA0
	0x03E5A508 RET
	0x03E5A50C BL 0x1C16F20
	0x03E5A510 STP X30, X21, [X31 - 0x20]!
	0x03E5A514 STP X20, X19, [X31 + 0x10]
	0x03E5A518 ADRP X21, 0x58E000
	0x03E5A51C ADRP X20, 0x299000
	0x03E5A520 LDRB W8, [X21 + 0x8CA]
	0x03E5A524 LDR X20, [X20 + 0x598]
	0x03E5A528 MOV X19, X0
	0x03E5A52C TBNZ X8, 0x0, 0x3E5A544
	0x03E5A530 ADRP X0, 0x299000
	0x03E5A534 LDR X0, [X0 + 0x598]
	0x03E5A538 BL 0x1C16CF4
	0x03E5A53C MOVZ W8, 0x1
	0x03E5A540 STRB W8, [X21 + 0x8CA]
	0x03E5A544 LDR X8, [X19]
	0x03E5A548 MOV X0, X19
	0x03E5A54C LDR X9, [X8 + 0x258]
	0x03E5A550 LDR X1, [X8 + 0x260]
	0x03E5A554 BLR X9
	0x03E5A558 LDR X8, [X20]
	0x03E5A55C MOV X20, X0
	0x03E5A560 LDR W9, [X8 + 0xE0]
	0x03E5A564 CBNZ W9, 0x3E5A570
	0x03E5A568 MOV X0, X8
	0x03E5A56C BL 0x1C16DFC
	0x03E5A570 MOV X0, X20
	0x03E5A574 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x58F000
	007 Move X19, 0x29A000
	008 Move W8, [X21+2238]
	009 Move X19, [X19+2288]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {41}
	015 Move X0, 0x312000
	016 Move X0, [X0+3080]
	017 Call 0x1C17CF4
	018 Move X0, 0x312000
	019 Move X0, [X0+3088]
	020 Call 0x1C17CF4
	021 Move X0, 0x312000
	022 Move X0, [X0+3096]
	023 Call 0x1C17CF4
	024 Move X0, 0x312000
	025 Move X0, [X0+3104]
	026 Call 0x1C17CF4
	027 Move X0, 0x312000
	028 Move X0, [X0+3208]
	029 Call 0x1C17CF4
	030 Move X0, 0x29A000
	031 Move X0, [X0+2288]
	032 Call 0x1C17CF4
	033 Move X0, 0x312000
	034 Move X0, [X0+3216]
	035 Call 0x1C17CF4
	036 Move X0, 0x312000
	037 Move X0, [X0+3224]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+2238], W8
	041 Move X0, [X19]
	042 NotImplemented "Instruction MOVI not yet implemented."
	043 Move [X31+48], X31
	044 Move [X31+16], V0
	045 Move [X31+24], V0
	046 Move [X31], X31
	047 Move [X31+8], X31
	048 Call 0x1C17F10
	049 Move X1, X31
	050 Move X19, X0
	051 Call StringBuilder..ctor, X0
	052 Move X0, X20
	053 Call TouchInputModule.UseFakeInput, X0
	054 Compare X19, 0
	055 JumpIfEqual {135}
	056 Move X8, 0x312000
	057 Move X9, 0x312000
	058 Move X8, [X8+3224]
	059 Move X9, [X9+3216]
	060 And W31, W0, 1
	061 Move X0, X19
	062 Move X2, X31
	063 NotImplemented "Instruction CSEL not yet implemented."
	064 Move X1, [X8]
	065 Call StringBuilder.AppendLine, X0, X1
	066 Move X0, X20
	067 Call TouchInputModule.UseFakeInput, X0
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {91}
	072 Add X2, X31, 56
	073 Move TEMP, 0
	074 Not TEMP
	075 Move W1, TEMP
	076 Move X0, X20
	077 Move W3, W31
	078 Move [X31+56], X31
	079 Call PointerInputModule.GetPointerData, X0, X1, X2, X3
	080 Move X0, [X31+56]
	081 Compare X0, 0
	082 JumpIfEqual {124}
	083 Move X8, [X0]
	084 Move X9, [X8+360]
	085 Move X1, [X8+368]
	086 NotImplemented "Instruction BLR not yet implemented."
	087 Move X1, X0
	088 Move X0, X19
	089 Move X2, X31
	090 Call StringBuilder.AppendLine, X0, X1
	091 Move X0, [X20+88]
	092 Compare X0, 0
	093 JumpIfEqual {135}
	094 Move X8, 0x312000
	095 Move X8, [X8+3080]
	096 Move X1, [X8]
	097 Add X8, X31, 16
	098 Call Dictionary`2<Int32, Object>.GetEnumerator, X0
	099 Move X20, 0x312000
	100 Move X21, 0x312000
	101 Move X20, [X20+3096]
	102 Move X21, [X21+3208]
	103 Move X1, [X20]
	104 Add X0, X31, 16
	105 Call Enumerator<Int32, Object>.MoveNext, X0
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {119}
	110 Move V0, [X31+2]
	111 Move X1, [X21]
	112 Move [X31], V0
	113 Add X0, X31, 0
	114 Call KeyValuePair`2<Int32, Object>.ToString, X0
	115 Move X1, X0
	116 Move X0, X19
	117 Move X2, X31
	118 Call StringBuilder.AppendLine, X0, X1
	119 Move X8, 0x312000
	120 Move X8, [X8+3088]
	121 Add X0, X31, 16
	122 Move X1, [X8]
	123 Call Enumerator<Int32, Object>.Dispose, X0
	124 Move X8, [X19]
	125 Move X0, X19
	126 Move X9, [X8+360]
	127 Move X1, [X8+368]
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Move X20, [X31+80]
	130 Move X19, [X31+88]
	131 Move X30, [X31+64]
	132 Move X21, [X31+72]
	133 Add X31, X31, 96
	134 Return X0
	135 Call 0x1C17F20
	136 Move X20, X0
	137 NotImplemented "Instruction CMP not yet implemented."
	138 Move X0, X20
	139 Call 0x3EB2AD0
	140 Move X21, [X0]
	141 Call 0x3EB2AE0
	142 Move X8, 0x312000
	143 Move X8, [X8+3088]
	144 Add X0, X31, 16
	145 Move X1, [X8]
	146 Call Enumerator<Int32, Object>.Dispose, X0
	147 Compare X21, 0
	148 JumpIfEqual {124}
	149 Move X0, X21
	150 Call 0x1C17F18
	151 Move X21, X31
	152 Move X20, X0
	153 Move X8, 0x312000
	154 Move X8, [X8+3088]
	155 Move X1, [X8]
	156 Add X0, X31, 16
	157 Call Enumerator<Int32, Object>.Dispose, X0
	158 Compare X21, 0
	159 JumpIfNotEqual {162}
	160 Move X0, X20
	161 Call 0x1D2D690
	162 Move X0, X21
	163 Call 0x1C17F18
	164 Call 0x1991590

