Type: UnityEngine.EventSystems.PhysicsRaycaster

Method: System.Void .ctor()

Disassembly:
	0x03E5AB04 LDR X8, [X10 + 0x20]
	0x03E5AB08 LDR X9, [X31 + 0x10]
	0x03E5AB0C LDR W10, [X31 + 0x18]
	0x03E5AB10 ADD X1, X31, 0x60
	0x03E5AB14 LDR X8, [X8 + 0xC0]
	0x03E5AB18 MOV X0, X19
	0x03E5AB1C LDR X2, [X8 + 0x70]
	0x03E5AB20 STP X22, X21, [X31 + 0x60]
	0x03E5AB24 STP S8, S5, [X31 + 0x70]
	0x03E5AB28 STR W10, [X26 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move TEMP, 0
	005 Not TEMP
	006 Move W0, TEMP
	007 Move X1, X31
	008 Call LayerMask.op_Implicit, X0
	009 Move [X19+48], W0
	010 Move X0, X19
	011 Move X1, X31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call MonoBehaviour..ctor, X0
	015 Return 

Method: UnityEngine.Camera get_eventCamera()

Disassembly:
	0x03E5B5D4 B 0x3E5B414
	0x03E5B5D8 MOV X0, X19
	0x03E5B5DC MOV X1, X31
	0x03E5B5E0 BL 0x361C058
	0x03E5B5E4 MOV X1, X0
	0x03E5B5E8 MOV X0, X20
	0x03E5B5EC MOV X2, X31
	0x03E5B5F0 BL 0x32333E0
	0x03E5B5F4 MOV X0, X19
	0x03E5B5F8 MOV X1, X31
	0x03E5B5FC BL 0x361CDF0
	0x03E5B600 MOV X1, X0
	0x03E5B604 MOV X0, X20
	0x03E5B608 MOV X2, X31
	0x03E5B60C BL 0x32333E0
	0x03E5B610 LDR X8, [X20]
	0x03E5B614 MOV X0, X20
	0x03E5B618 LDP X20, X19, [X31 + 0x20]
	0x03E5B61C LDP X22, X21, [X31 + 0x10]
	0x03E5B620 LDP X2, X1, [X8 + 0x168]
	0x03E5B624 LDR X30, [X31], #0x30
	0x03E5B628 BR X2
	0x03E5B62C ADRP X8, 0x2E0000
	0x03E5B630 LDR X8, [X8 + 0xC0]
	0x03E5B634 MOV X0, X20
	0x03E5B638 MOV X2, X31
	0x03E5B63C LDR X1, [X8]
	0x03E5B640 BL 0x32333E0
	0x03E5B644 MOVZ W1, 0x5
	0x03E5B648 MOV X0, X19
	0x03E5B64C MOV X2, X31
	0x03E5B650 BL 0x322B484
	0x03E5B654 B 0x3E5B600
	0x03E5B658 BL 0x1C16F20
	0x03E5B65C STR X30, [X31 - 0x20]!
	0x03E5B660 STP X20, X19, [X31 + 0x10]
	0x03E5B664 ADRP X20, 0x58D000
	0x03E5B668 LDRB W8, [X20 + 0x8D7]
	0x03E5B66C MOV X19, X0
	0x03E5B670 TBNZ X8, 0x0, 0x3E5B688
	0x03E5B674 ADRP X0, 0x310000
	0x03E5B678 LDR X0, [X0 + 0xD28]
	0x03E5B67C BL 0x1C16CF4
	0x03E5B680 MOVZ W8, 0x1
	0x03E5B684 STRB W8, [X20 + 0x8D7]
	0x03E5B688 MOV X0, X31
	0x03E5B68C BL 0x3241948
	0x03E5B690 CBZ X0, 0x3E5B6FC
	0x03E5B694 LDR X8, [X0]
	0x03E5B698 ADRP X20, 0x310000
	0x03E5B69C MOV X1, X19
	0x03E5B6A0 LDR X9, [X8 + 0x268]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x58E000
	006 Move X21, 0x299000
	007 Move W8, [X20+2248]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x2C1000
	015 Move X0, [X0+712]
	016 Call 0x1C17CF4
	017 Move X0, 0x299000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2248], W8
	022 Move X0, [X21]
	023 Move X20, [X19+40]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {43}
	036 Move X8, 0x2C1000
	037 Move X8, [X8+712]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move X20, X0
	042 Move [X19+40], X0
	043 Move X20, [X19+40]
	044 Move X0, [X21]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {64}
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X0, X31
	060 Move X30, [X31+32]
	061 Move X21, [X31+40]
	062 Call Camera.get_main
	063 Return X0
	064 Move X0, [X19+40]
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Return X0

Method: System.Int32 get_depth()

Disassembly:
	0x03E5B6A4 LDR X2, [X8 + 0x270]
	0x03E5B6A8 LDR X20, [X20 + 0xD28]
	0x03E5B6AC BLR X9
	0x03E5B6B0 LDR X8, [X20]
	0x03E5B6B4 MOV X19, X0
	0x03E5B6B8 LDR W9, [X8 + 0xE0]
	0x03E5B6BC CBNZ W9, 0x3E5B6C8
	0x03E5B6C0 MOV X0, X8
	0x03E5B6C4 BL 0x1C16DFC
	0x03E5B6C8 MOV X0, X19
	0x03E5B6CC BL 0x3E5B700
	0x03E5B6D0 MOV X19, X0
	0x03E5B6D4 MOV X0, X31
	0x03E5B6D8 BL 0x3241948
	0x03E5B6DC CBZ X0, 0x3E5B6FC
	0x03E5B6E0 LDR X8, [X0]
	0x03E5B6E4 MOV X1, X19
	0x03E5B6E8 LDP X20, X19, [X31 + 0x10]
	0x03E5B6EC LDR X3, [X8 + 0x378]
	0x03E5B6F0 LDR X2, [X8 + 0x380]
	0x03E5B6F4 LDR X30, [X31], #0x20
	0x03E5B6F8 BR X3
	0x03E5B6FC BL 0x1C16F20
	0x03E5B700 STP X30, X21, [X31 - 0x20]!
	0x03E5B704 STP X20, X19, [X31 + 0x10]
	0x03E5B708 ADRP X21, 0x58D000
	0x03E5B70C ADRP X20, 0x310000
	0x03E5B710 LDRB W8, [X21 + 0x8E3]
	0x03E5B714 LDR X20, [X20 + 0xD28]
	0x03E5B718 MOV X19, X0
	0x03E5B71C TBNZ X8, 0x0, 0x3E5B734
	0x03E5B720 ADRP X0, 0x310000
	0x03E5B724 LDR X0, [X0 + 0xD28]
	0x03E5B728 BL 0x1C16CF4
	0x03E5B72C MOVZ W8, 0x1
	0x03E5B730 STRB W8, [X21 + 0x8E3]
	0x03E5B734 LDR X0, [X20]
	0x03E5B738 LDR W8, [X0 + 0xE0]
	0x03E5B73C CBNZ W8, 0x3E5B748
	0x03E5B740 BL 0x1C16DFC
	0x03E5B744 LDR X0, [X20]
	0x03E5B748 LDR X8, [X0 + 0xB8]
	0x03E5B74C MOV X0, X19
	0x03E5B750 LDP X20, X19, [X31 + 0x10]
	0x03E5B754 LDR X2, [X8 + 0x18]
	0x03E5B758 LDRB W1, [X8 + 0x10]
	0x03E5B75C LDP X30, X21, [X31], #0x20
	0x03E5B760 B 0x3E5D64C
	0x03E5B764 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x58E000
	006 Move X20, 0x299000
	007 Move W8, [X21+2249]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x299000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2249], W8
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X9, [X8+600]
	022 Move X1, [X8+608]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X8, [X20]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {54}
	039 Move X8, [X19]
	040 Move X0, X19
	041 Move X9, [X8+600]
	042 Move X1, [X8+608]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X0, 0
	045 JumpIfEqual {62}
	046 Move X1, X31
	047 Call Camera.get_depth, X0
	048 Move W8, 0x7F800000
	049 Move S1, W8
	050 NotImplemented "Instruction FCVTZS not yet implemented."
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 Move W8, 0x80000000
	053 NotImplemented "Instruction CSEL not yet implemented."
	054 Move TEMP, 0xFF000000
	055 Not TEMP
	056 Move W0, TEMP
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20

Method: System.Int32 get_finalEventMask()

Disassembly:
	0x03E5B510 MOV X0, X22
	0x03E5B514 MOV X2, X31
	0x03E5B518 LDR X1, [X8]
	0x03E5B51C BL 0x321BA08
	0x03E5B520 TBZ X0, 0x0, 0x3E5B5D8
	0x03E5B524 MOV X0, X19
	0x03E5B528 MOV X1, X31
	0x03E5B52C BL 0x361B448
	0x03E5B530 CBZ X0, 0x3E5B658
	0x03E5B534 ADRP X8, 0x2C2000
	0x03E5B538 LDR X8, [X8 + 0xB08]
	0x03E5B53C MOV X2, X31
	0x03E5B540 MOV X19, X0
	0x03E5B544 LDR X1, [X8]
	0x03E5B548 BL 0x322BD1C
	0x03E5B54C TBZ X0, 0x0, 0x3E5B578
	0x03E5B550 ADRP X8, 0x310000
	0x03E5B554 LDR X8, [X8 + 0xD08]
	0x03E5B558 LDR X0, [X8]
	0x03E5B55C LDR W8, [X0 + 0xE0]
	0x03E5B560 CBNZ W8, 0x3E5B568
	0x03E5B564 BL 0x1C16DFC
	0x03E5B568 MOV X0, X19
	0x03E5B56C BL 0x3E5B65C
	0x03E5B570 MOV X19, X0
	0x03E5B574 CBZ X0, 0x3E5B658
	0x03E5B578 ADRP X8, 0x310000
	0x03E5B57C LDR X8, [X8 + 0xD18]
	0x03E5B580 MOV X0, X19
	0x03E5B584 MOV X2, X31
	0x03E5B588 LDR X1, [X8]
	0x03E5B58C BL 0x3226F64
	0x03E5B590 TBZ X0, 0x0, 0x3E5B5BC
	0x03E5B594 LDR W8, [X19 + 0x10]
	0x03E5B598 CMP W8, 0x7
	0x03E5B59C B.LT 0x3E5B5BC
	0x03E5B5A0 MOVZ W1, 0x6
	0x03E5B5A4 MOV X0, X19
	0x03E5B5A8 MOV X2, X31
	0x03E5B5AC BL 0x3222A1C
	0x03E5B5B0 AND W8, W0, 0xFFFF
	0x03E5B5B4 CMP W8, 0x2F
	0x03E5B5B8 B.NE 0x3E5B62C
	0x03E5B5BC MOV X0, X20
	0x03E5B5C0 MOV X1, X19
	0x03E5B5C4 B 0x3E5B608
	0x03E5B5C8 ADRP X8, 0x2E0000
	0x03E5B5CC LDR X8, [X8 + 0xC0]
	0x03E5B5D0 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x58E000
	006 Move X20, 0x299000
	007 Move W8, [X21+2250]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x299000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2250], W8
	019 Move X8, [X19]
	020 Move X0, X19
	021 Move X9, [X8+600]
	022 Move X1, [X8+608]
	023 NotImplemented "Instruction BLR not yet implemented."
	024 Move X8, [X20]
	025 Move X20, X0
	026 Move W9, [X8+224]
	027 Compare W9, 0
	028 JumpIfNotEqual {31}
	029 Move X0, X8
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {54}
	039 Move X8, [X19]
	040 Move X0, X19
	041 Move X9, [X8+600]
	042 Move X1, [X8+608]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Compare X0, 0
	045 JumpIfEqual {62}
	046 Move X1, X31
	047 Call Camera.get_cullingMask, X0
	048 Move W8, [X19+48]
	049 Move W19, W0
	050 Move X1, X31
	051 Move X0, X8
	052 Call LayerMask.op_Implicit, X0
	053 And W0, W0, W19
	054 Move TEMP, 0
	055 Not TEMP
	056 Move W0, TEMP
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X30, [X31+32]
	060 Move X21, [X31+40]
	061 Return X0
	062 Call 0x1C17F20

Method: UnityEngine.LayerMask get_eventMask()

Disassembly:
	0x03E5B768 STP X22, X21, [X31 + 0x10]
	0x03E5B76C STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_eventMask(UnityEngine.LayerMask value)

Disassembly:
	0x03E5B770 ADRP X21, 0x58D000
	0x03E5B774 ADRP X22, 0x2A0000

ISIL:
	001 Move [X0+48], W1
	002 Return 

Method: System.Int32 get_maxRayIntersections()

Disassembly:
	0x03E5B778 ADRP X19, 0x310000
	0x03E5B77C ADRP X20, 0x310000

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_maxRayIntersections(System.Int32 value)

Disassembly:
	0x03E5B780 LDRB W8, [X21 + 0x8D8]
	0x03E5B784 LDR X22, [X22 + 0x600]

ISIL:
	001 Move [X0+52], W1
	002 Return 

Method: System.Boolean ComputeRayAndDistance(UnityEngine.EventSystems.PointerEventData eventData, ref UnityEngine.Ray ray, ref System.Int32 eventDisplayIndex, ref System.Single distanceToClipPlane)

Disassembly:
	0x03E5B218 B.NE 0x3E5B208
	0x03E5B21C MOV X0, X24
	0x03E5B220 BL 0x3EB1AD0
	0x03E5B224 MOV X23, X0
	0x03E5B228 ADRP X0, 0x2C5000
	0x03E5B22C LDR X0, [X0 + 0xC08]
	0x03E5B230 BL 0x1C16D08
	0x03E5B234 LDR X8, [X23]
	0x03E5B238 LDR X1, [X8]
	0x03E5B23C BL 0x1C17270
	0x03E5B240 TBZ X0, 0x0, 0x3E5B250
	0x03E5B244 LDR X23, [X23]
	0x03E5B248 BL 0x3EB1AE0
	0x03E5B24C B 0x3E5B0F8
	0x03E5B250 MOVZ W0, 0x8
	0x03E5B254 BL 0x3EB1AF0
	0x03E5B258 LDR X8, [X23]
	0x03E5B25C STR X8, [X0]
	0x03E5B260 ADRP X1, 0x59000
	0x03E5B264 ADD X1, X1, 0xE58
	0x03E5B268 MOV X2, X31
	0x03E5B26C BL 0x3EB1B00
	0x03E5B270 MOV X24, X0
	0x03E5B274 BL 0x3EB1AE0
	0x03E5B278 B 0x3E5B208
	0x03E5B27C BL 0x1990590
	0x03E5B280 STR X30, [X31 - 0x30]!
	0x03E5B284 STP X22, X21, [X31 + 0x10]
	0x03E5B288 STP X20, X19, [X31 + 0x20]
	0x03E5B28C ADRP X22, 0x58D000
	0x03E5B290 LDRB W8, [X22 + 0x8D6]
	0x03E5B294 MOV W21, W2
	0x03E5B298 MOV X20, X1
	0x03E5B29C MOV X19, X0
	0x03E5B2A0 TBNZ X8, 0x0, 0x3E5B30C
	0x03E5B2A4 ADRP X0, 0x298000
	0x03E5B2A8 LDR X0, [X0 + 0x8F0]
	0x03E5B2AC BL 0x1C16CF4
	0x03E5B2B0 ADRP X0, 0x310000
	0x03E5B2B4 LDR X0, [X0 + 0xD08]
	0x03E5B2B8 BL 0x1C16CF4
	0x03E5B2BC ADRP X0, 0x2E0000
	0x03E5B2C0 LDR X0, [X0 + 0xC0]
	0x03E5B2C4 BL 0x1C16CF4
	0x03E5B2C8 ADRP X0, 0x310000
	0x03E5B2CC LDR X0, [X0 + 0xD18]
	0x03E5B2D0 BL 0x1C16CF4
	0x03E5B2D4 ADRP X0, 0x2C2000
	0x03E5B2D8 LDR X0, [X0 + 0xB08]
	0x03E5B2DC BL 0x1C16CF4
	0x03E5B2E0 ADRP X0, 0x299000
	0x03E5B2E4 LDR X0, [X0 + 0xEC8]
	0x03E5B2E8 BL 0x1C16CF4
	0x03E5B2EC ADRP X0, 0x2E0000
	0x03E5B2F0 LDR X0, [X0 + 0xD0]
	0x03E5B2F4 BL 0x1C16CF4
	0x03E5B2F8 ADRP X0, 0x310000
	0x03E5B2FC LDR X0, [X0 + 0xD20]
	0x03E5B300 BL 0x1C16CF4
	0x03E5B304 MOVZ W8, 0x1
	0x03E5B308 STRB W8, [X22 + 0x8D6]
	0x03E5B30C CBZ X19, 0x3E5B658
	0x03E5B310 MOV X0, X19
	0x03E5B314 MOV X1, X31
	0x03E5B318 BL 0x361BF18
	0x03E5B31C TBZ X0, 0x0, 0x3E5B42C
	0x03E5B320 MOV X0, X19
	0x03E5B324 MOV X1, X31
	0x03E5B328 BL 0x361BFD8
	0x03E5B32C TBZ X0, 0x0, 0x3E5B49C
	0x03E5B330 MOV X0, X19
	0x03E5B334 MOV X1, X31
	0x03E5B338 BL 0x361B448
	0x03E5B33C CBZ X0, 0x3E5B658
	0x03E5B340 ADRP X8, 0x2C2000
	0x03E5B344 LDR X8, [X8 + 0xB08]
	0x03E5B348 MOV X2, X31
	0x03E5B34C MOV X20, X0
	0x03E5B350 LDR X1, [X8]
	0x03E5B354 BL 0x322BD1C
	0x03E5B358 TBZ X0, 0x0, 0x3E5B3C4
	0x03E5B35C MOVZ W1, 0x2B
	0x03E5B360 MOV X0, X20
	0x03E5B364 MOV X2, X31
	0x03E5B368 BL 0x322BD74
	0x03E5B36C TBZ X0, 0x0, 0x3E5B39C
	0x03E5B370 MOV X0, X19
	0x03E5B374 MOV X1, X31
	0x03E5B378 BL 0x361A77C
	0x03E5B37C CBZ X0, 0x3E5B658
	0x03E5B380 ADRP X8, 0x2E0000
	0x03E5B384 LDR X8, [X8 + 0xD0]
	0x03E5B388 MOV X2, X31
	0x03E5B38C MOV X19, X0
	0x03E5B390 LDR X1, [X8]
	0x03E5B394 BL 0x3226F64
	0x03E5B398 TBZ X0, 0x0, 0x3E5B5C8
	0x03E5B39C ADRP X8, 0x310000
	0x03E5B3A0 LDR X8, [X8 + 0xD08]
	0x03E5B3A4 LDR X0, [X8]
	0x03E5B3A8 LDR W8, [X0 + 0xE0]
	0x03E5B3AC CBNZ W8, 0x3E5B3B4
	0x03E5B3B0 BL 0x1C16DFC
	0x03E5B3B4 MOV X0, X20
	0x03E5B3B8 BL 0x3E5B65C
	0x03E5B3BC MOV X20, X0
	0x03E5B3C0 CBZ X0, 0x3E5B658
	0x03E5B3C4 LDR W8, [X20 + 0x10]
	0x03E5B3C8 CMP W8, 0x1
	0x03E5B3CC B.LT 0x3E5B408
	0x03E5B3D0 MOV X0, X20
	0x03E5B3D4 MOV W1, W31
	0x03E5B3D8 MOV X2, X31
	0x03E5B3DC BL 0x3222A1C
	0x03E5B3E0 AND W8, W0, 0xFFFF
	0x03E5B3E4 CMP W8, 0x2F
	0x03E5B3E8 B.EQ 0x3E5B408
	0x03E5B3EC ADRP X8, 0x299000
	0x03E5B3F0 LDR X8, [X8 + 0xEC8]
	0x03E5B3F4 MOV X1, X20
	0x03E5B3F8 MOV X2, X31
	0x03E5B3FC LDR X0, [X8]
	0x03E5B400 BL 0x321B938
	0x03E5B404 MOV X20, X0
	0x03E5B408 ADRP X8, 0x2E0000
	0x03E5B40C LDR X8, [X8 + 0xC0]
	0x03E5B410 MOV X1, X20
	0x03E5B414 LDR X0, [X8]
	0x03E5B418 LDP X20, X19, [X31 + 0x20]
	0x03E5B41C LDP X22, X21, [X31 + 0x10]
	0x03E5B420 MOV X2, X31
	0x03E5B424 LDR X30, [X31], #0x30
	0x03E5B428 B 0x321B938
	0x03E5B42C MOV X0, X19
	0x03E5B430 MOV X1, X31
	0x03E5B434 BL 0x361CEF0
	0x03E5B438 TBZ X21, 0x0, 0x3E5B444
	0x03E5B43C CBNZ X20, 0x3E5B480
	0x03E5B440 B 0x3E5B658
	0x03E5B444 CBZ X20, 0x3E5B658
	0x03E5B448 MOV X22, X0
	0x03E5B44C CBZ X0, 0x3E5B658
	0x03E5B450 LDR W8, [X22 + 0x10]
	0x03E5B454 LDR W9, [X20 + 0x10]
	0x03E5B458 ADD W10, W8, 0x2
	0x03E5B45C CMP W9, W10
	0x03E5B460 B.LT 0x3E5B480
	0x03E5B464 ADD W1, W8, 0x1
	0x03E5B468 MOV X0, X20
	0x03E5B46C MOV X2, X31
	0x03E5B470 BL 0x3222A1C
	0x03E5B474 AND W8, W0, 0xFFFF
	0x03E5B478 CMP W8, 0x2F
	0x03E5B47C B.NE 0x3E5B4CC
	0x03E5B480 ADRP X8, 0x2C2000
	0x03E5B484 LDR X8, [X8 + 0xB08]
	0x03E5B488 MOV X0, X20
	0x03E5B48C MOV X2, X31
	0x03E5B490 LDR X1, [X8]
	0x03E5B494 BL 0x322BD1C
	0x03E5B498 TBZ X0, 0x0, 0x3E5B4B4
	0x03E5B49C MOV X0, X19
	0x03E5B4A0 LDP X20, X19, [X31 + 0x20]
	0x03E5B4A4 LDP X22, X21, [X31 + 0x10]
	0x03E5B4A8 MOV X1, X31
	0x03E5B4AC LDR X30, [X31], #0x30
	0x03E5B4B0 B 0x361A77C
	0x03E5B4B4 MOV X0, X19
	0x03E5B4B8 LDP X20, X19, [X31 + 0x20]
	0x03E5B4BC LDP X22, X21, [X31 + 0x10]
	0x03E5B4C0 MOV X1, X31
	0x03E5B4C4 LDR X30, [X31], #0x30
	0x03E5B4C8 B 0x361B5B0
	0x03E5B4CC ADRP X8, 0x298000
	0x03E5B4D0 LDR W21, [X20 + 0x10]
	0x03E5B4D4 LDR X8, [X8 + 0x8F0]
	0x03E5B4D8 LDR X0, [X8]
	0x03E5B4DC BL 0x1C16F10
	0x03E5B4E0 MOV X1, X22
	0x03E5B4E4 MOV W2, W21
	0x03E5B4E8 MOV X3, X31
	0x03E5B4EC MOV X20, X0
	0x03E5B4F0 BL 0x3231D14
	0x03E5B4F4 CBZ X20, 0x3E5B658
	0x03E5B4F8 MOVZ W1, 0x3A
	0x03E5B4FC MOV X0, X20
	0x03E5B500 MOV X2, X31
	0x03E5B504 BL 0x3233D30
	0x03E5B508 ADRP X8, 0x310000
	0x03E5B50C LDR X8, [X8 + 0xD20]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D10
	003 Move [X31+80], D9
	004 Move [X31+88], D8
	005 Move [X31+96], X30
	006 Move [X31+104], X25
	007 Move [X31+112], X24
	008 Move [X31+120], X23
	009 Move [X31+128], X22
	010 Move [X31+136], X21
	011 Move [X31+144], X20
	012 Move [X31+152], X19
	013 Move X25, 0x58E000
	014 Move X24, 0x299000
	015 Move W8, [X25+2251]
	016 Move X24, [X24+1432]
	017 Move X19, X4
	018 Move X22, X3
	019 Move X21, X2
	020 Move X23, X1
	021 Move X20, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x299000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X25+2251], W8
	031 Move X8, [X20]
	032 Move X0, X20
	033 Move X9, [X8+600]
	034 Move X1, [X8+608]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X8, [X24]
	037 Move X24, X0
	038 Move W9, [X8+224]
	039 Compare W9, 0
	040 JumpIfNotEqual {43}
	041 Move X0, X8
	042 Call 0x1C17DFC
	043 Move X0, X24
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {52}
	051 Move W0, W31
	052 Compare X23, 0
	053 JumpIfEqual {206}
	054 Move V0, [X23+260]
	055 Move V1, [X23+264]
	056 Move X0, X31
	057 Call MultipleDisplayUtilities.RelativeMouseAtScaled, X0
	058 Move X24, 0x57E000
	059 Move W8, [X24+1923]
	060 Move V8, V0
	061 Move V9, V1
	062 Move V10, V2
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x299000
	066 Move X0, [X0+1440]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X24+1923], W8
	070 Move X8, 0x299000
	071 Move X8, [X8+1440]
	072 Move X8, [X8]
	073 Move X8, [X8+184]
	074 Move S0, [X8]
	075 Move S1, [X8+4]
	076 Move V2, [X8+8]
	077 Move X8, -53940224
	078 Subtract S0, S8, S0
	079 Subtract S1, S9, S1
	080 Multiply S0, S0, S0
	081 Multiply S1, S1, S1
	082 Add S0, S0, S1
	083 Move V1, [X8+3872]
	084 Subtract S2, S10, S2
	085 Multiply S2, S2, S2
	086 Add S0, S2, S0
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 Move W9, 0x7F800000
	089 Move S0, W9
	090 NotImplemented "Instruction FCVTZS not yet implemented."
	091 Move W10, 0x80000000
	092 NotImplemented "Instruction FCMP not yet implemented."
	093 NotImplemented "Instruction CSEL not yet implemented."
	094 Move [X22], W23
	095 Move X8, [X20]
	096 Move X0, X20
	097 Move X9, [X8+600]
	098 Move X1, [X8+608]
	099 NotImplemented "Instruction BLR not yet implemented."
	100 Compare X0, 0
	101 JumpIfEqual {206}
	102 Move X1, X31
	103 Call Camera.get_targetDisplay, X0
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move V8, [X23+260]
	106 Move V9, [X23+264]
	107 Move S10, W31
	108 Move X8, [X20]
	109 Move X0, X20
	110 Move X9, [X8+600]
	111 Move X1, [X8+608]
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Compare X0, 0
	114 JumpIfEqual {206}
	115 Move X1, X31
	116 Call Camera.get_pixelRect, X0
	117 Add S3, S1, S3
	118 NotImplemented "Instruction FCMP not yet implemented."
	119 Move W0, W31
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 Add S0, S0, S2
	123 NotImplemented "Instruction FCMP not yet implemented."
	124 Move X8, [X20]
	125 Move X0, X20
	126 Move X9, [X8+600]
	127 Move X1, [X8+608]
	128 NotImplemented "Instruction BLR not yet implemented."
	129 Compare X0, 0
	130 JumpIfEqual {206}
	131 Add X8, X31, 8
	132 Move V0, V8
	133 Move V1, V9
	134 Move V2, V10
	135 Move X1, X31
	136 Call Camera.ScreenPointToRay, X0, X1
	137 Move X8, [X31+24]
	138 NotImplemented "Instruction LDUR not yet implemented."
	139 Move X22, 0x57F000
	140 Move [X31+48], X8
	141 Move [X31+2], V0
	142 Move [X21+16], X8
	143 Move [X21], V0
	144 Move W8, [X22+1450]
	145 Move V9, [X21+20]
	146 Compare W8, 0
	147 JumpIfNotEqual {153}
	148 Move X0, 0x2A0000
	149 Move X0, [X0+1208]
	150 Call 0x1C17CF4
	151 Move W8, 1
	152 Move [X22+1450], W8
	153 Move X8, 0x2A0000
	154 Move X8, [X8+1208]
	155 Move X9, -53936128
	156 Move V0, [X9+576]
	157 NotImplemented "Instruction FABS not yet implemented."
	158 Move X8, [X8]
	159 Move S3, 8
	160 Multiply S0, S2, S0
	161 Move X8, [X8+184]
	162 Move V1, [X8]
	163 Multiply S1, S1, S3
	164 NotImplemented "Instruction FCMP not yet implemented."
	165 NotImplemented "Instruction FCSEL not yet implemented."
	166 NotImplemented "Instruction FCMP not yet implemented."
	167 Move W8, 0x7F800000
	168 Move S0, W8
	169 Move X8, [X20]
	170 Move X0, X20
	171 Move X9, [X8+600]
	172 Move X1, [X8+608]
	173 NotImplemented "Instruction BLR not yet implemented."
	174 Compare X0, 0
	175 JumpIfEqual {206}
	176 Move X1, X31
	177 Call Camera.get_farClipPlane, X0
	178 Move X8, [X20]
	179 Move X0, X20
	180 Move V8, V0
	181 Move X9, [X8+600]
	182 Move X1, [X8+608]
	183 NotImplemented "Instruction BLR not yet implemented."
	184 Compare X0, 0
	185 JumpIfEqual {206}
	186 Move X1, X31
	187 Call Camera.get_nearClipPlane, X0
	188 Subtract S0, S8, S0
	189 NotImplemented "Instruction FDIV not yet implemented."
	190 NotImplemented "Instruction FABS not yet implemented."
	191 Move W0, 1
	192 Move [X19], S0
	193 Move X20, [X31+144]
	194 Move X19, [X31+152]
	195 Move X22, [X31+128]
	196 Move X21, [X31+136]
	197 Move X24, [X31+112]
	198 Move X23, [X31+120]
	199 Move X30, [X31+96]
	200 Move X25, [X31+104]
	201 Move D9, [X31+80]
	202 Move D8, [X31+88]
	203 Move V10, [X31+64]
	204 Add X31, X31, 160
	205 Return X0
	206 Call 0x1C17F20

Method: System.Void Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)

Disassembly:
	0x03E5B788 LDR X19, [X19 + 0xD30]
	0x03E5B78C LDR X20, [X20 + 0xD08]
	0x03E5B790 TBNZ X8, 0x0, 0x3E5B7C0
	0x03E5B794 ADRP X0, 0x2A0000
	0x03E5B798 LDR X0, [X0 + 0x600]
	0x03E5B79C BL 0x1C16CF4
	0x03E5B7A0 ADRP X0, 0x310000
	0x03E5B7A4 LDR X0, [X0 + 0xD08]
	0x03E5B7A8 BL 0x1C16CF4
	0x03E5B7AC ADRP X0, 0x310000
	0x03E5B7B0 LDR X0, [X0 + 0xD30]
	0x03E5B7B4 BL 0x1C16CF4
	0x03E5B7B8 MOVZ W8, 0x1
	0x03E5B7BC STRB W8, [X21 + 0x8D8]
	0x03E5B7C0 LDR X0, [X22]
	0x03E5B7C4 BL 0x1C16F10
	0x03E5B7C8 LDR X1, [X19]
	0x03E5B7CC MOV X2, X31
	0x03E5B7D0 MOV X19, X0
	0x03E5B7D4 BL 0x36334A0
	0x03E5B7D8 LDR X8, [X20]
	0x03E5B7DC LDP X22, X21, [X31 + 0x10]
	0x03E5B7E0 LDR X8, [X8 + 0xB8]
	0x03E5B7E4 STR X19, [X8]
	0x03E5B7E8 LDP X20, X19, [X31 + 0x20]
	0x03E5B7EC LDR X30, [X31], #0x30
	0x03E5B7F0 RET
	0x03E5B7F4 MOV X0, X31
	0x03E5B7F8 B 0x3242EC8
	0x03E5B7FC STP X30, X25, [X31 - 0x40]!
	0x03E5B800 STP X24, X23, [X31 + 0x10]
	0x03E5B804 STP X22, X21, [X31 + 0x20]
	0x03E5B808 STP X20, X19, [X31 + 0x30]
	0x03E5B80C ADRP X25, 0x58D000
	0x03E5B810 ADRP X24, 0x2A3000
	0x03E5B814 ADRP X20, 0x2A3000
	0x03E5B818 ADRP X23, 0x299000
	0x03E5B81C ADRP X22, 0x299000
	0x03E5B820 ADRP X21, 0x298000
	0x03E5B824 LDRB W8, [X25 + 0x8D9]
	0x03E5B828 LDR X24, [X24 + 0xEC8]
	0x03E5B82C LDR X20, [X20 + 0xEC0]
	0x03E5B830 LDR X23, [X23 + 0x1D0]
	0x03E5B834 LDR X22, [X22 + 0x1C0]
	0x03E5B838 LDR X21, [X21 + 0x618]
	0x03E5B83C MOV X19, X0
	0x03E5B840 TBNZ X8, 0x0, 0x3E5B888
	0x03E5B844 ADRP X0, 0x298000
	0x03E5B848 LDR X0, [X0 + 0x618]
	0x03E5B84C BL 0x1C16CF4
	0x03E5B850 ADRP X0, 0x2A3000
	0x03E5B854 LDR X0, [X0 + 0xEC0]
	0x03E5B858 BL 0x1C16CF4
	0x03E5B85C ADRP X0, 0x299000
	0x03E5B860 LDR X0, [X0 + 0x1C0]
	0x03E5B864 BL 0x1C16CF4
	0x03E5B868 ADRP X0, 0x2A3000
	0x03E5B86C LDR X0, [X0 + 0xEC8]
	0x03E5B870 BL 0x1C16CF4
	0x03E5B874 ADRP X0, 0x299000
	0x03E5B878 LDR X0, [X0 + 0x1D0]
	0x03E5B87C BL 0x1C16CF4
	0x03E5B880 MOVZ W8, 0x1
	0x03E5B884 STRB W8, [X25 + 0x8D9]
	0x03E5B888 MOV X0, X19
	0x03E5B88C MOV X1, X31
	0x03E5B890 STRB W31, [X19 + 0x38]
	0x03E5B894 BL 0x33BDD8C
	0x03E5B898 LDR X0, [X24]
	0x03E5B89C BL 0x1C16F10
	0x03E5B8A0 LDR X1, [X20]
	0x03E5B8A4 MOV X20, X0
	0x03E5B8A8 BL 0x301B7C4
	0x03E5B8AC STR X20, [X19 + 0x10]
	0x03E5B8B0 LDR X0, [X23]
	0x03E5B8B4 BL 0x1C16F10
	0x03E5B8B8 LDR X1, [X22]
	0x03E5B8BC MOV X20, X0
	0x03E5B8C0 BL 0x301B7C4
	0x03E5B8C4 STR X20, [X19 + 0x18]
	0x03E5B8C8 LDR X0, [X23]
	0x03E5B8CC BL 0x1C16F10
	0x03E5B8D0 LDR X1, [X22]
	0x03E5B8D4 MOV X20, X0
	0x03E5B8D8 BL 0x301B7C4
	0x03E5B8DC STR X20, [X19 + 0x20]
	0x03E5B8E0 LDR X0, [X23]
	0x03E5B8E4 BL 0x1C16F10
	0x03E5B8E8 LDR X1, [X22]
	0x03E5B8EC MOV X20, X0
	0x03E5B8F0 BL 0x301B7C4
	0x03E5B8F4 STR X20, [X19 + 0x28]
	0x03E5B8F8 LDR X0, [X21]
	0x03E5B8FC MOVZ W1, 0x28
	0x03E5B900 BL 0x1C16D6C
	0x03E5B904 MOV X20, X31
	0x03E5B908 STR X0, [X19 + 0x30]
	0x03E5B90C MOVZ W0, 0x30
	0x03E5B910 MOVZ W1, 0x6E
	0x03E5B914 MOV X2, X31
	0x03E5B918 BL 0x3C309A8
	0x03E5B91C LDR X8, [X19 + 0x30]
	0x03E5B920 CBZ X8, 0x3E5B970
	0x03E5B924 LDR W9, [X8 + 0x18]
	0x03E5B928 CMP X20, X9
	0x03E5B92C B.CS 0x3E5B974
	0x03E5B930 ADD W9, W0, 0x7
	0x03E5B934 ADD W10, W0, 0xD
	0x03E5B938 CMP W9, 0x5A
	0x03E5B93C ADD X8, X8, X20
	0x03E5B940 ADD X20, X20, 0x1
	0x03E5B944 CSEL W9, W10, W9, GT
	0x03E5B948 CMP W0, 0x39
	0x03E5B94C CSEL W9, W9, W0, GT
	0x03E5B950 CMP X20, 0x28
	0x03E5B954 STRB W9, [X8 + 0x20]
	0x03E5B958 B.NE 0x3E5B90C
	0x03E5B95C LDP X20, X19, [X31 + 0x30]
	0x03E5B960 LDP X22, X21, [X31 + 0x20]
	0x03E5B964 LDP X24, X23, [X31 + 0x10]
	0x03E5B968 LDP X30, X25, [X31], #0x40
	0x03E5B96C RET
	0x03E5B970 BL 0x1C16F20
	0x03E5B974 BL 0x1C16F28
	0x03E5B978 STP X30, X21, [X31 - 0x20]!
	0x03E5B97C STP X20, X19, [X31 + 0x10]
	0x03E5B980 MOV X21, X0
	0x03E5B984 MOV X0, X31
	0x03E5B988 MOV X19, X2
	0x03E5B98C MOV X20, X1
	0x03E5B990 BL 0x3241948
	0x03E5B994 MOV X1, X20
	0x03E5B998 MOV X2, X19
	0x03E5B99C LDP X20, X19, [X31 + 0x10]
	0x03E5B9A0 MOV X3, X0
	0x03E5B9A4 MOV X0, X21
	0x03E5B9A8 LDP X30, X21, [X31], #0x20
	0x03E5B9AC B 0x3E5B9B0
	0x03E5B9B0 STR X30, [X31 - 0x40]!
	0x03E5B9B4 STP X24, X23, [X31 + 0x10]
	0x03E5B9B8 STP X22, X21, [X31 + 0x20]
	0x03E5B9BC STP X20, X19, [X31 + 0x30]
	0x03E5B9C0 ADRP X23, 0x58D000
	0x03E5B9C4 LDRB W8, [X23 + 0x8DA]
	0x03E5B9C8 MOV X19, X3
	0x03E5B9CC MOV X21, X2
	0x03E5B9D0 MOV X22, X1
	0x03E5B9D4 MOV X20, X0
	0x03E5B9D8 TBNZ X8, 0x0, 0x3E5BA14
	0x03E5B9DC ADRP X0, 0x2A3000
	0x03E5B9E0 LDR X0, [X0 + 0xEB0]
	0x03E5B9E4 BL 0x1C16CF4
	0x03E5B9E8 ADRP X0, 0x299000
	0x03E5B9EC LDR X0, [X0 + 0x1B8]
	0x03E5B9F0 BL 0x1C16CF4
	0x03E5B9F4 ADRP X0, 0x310000
	0x03E5B9F8 LDR X0, [X0 + 0xD38]
	0x03E5B9FC BL 0x1C16CF4
	0x03E5BA00 ADRP X0, 0x2A3000
	0x03E5BA04 LDR X0, [X0 + 0xCD8]
	0x03E5BA08 BL 0x1C16CF4
	0x03E5BA0C MOVZ W8, 0x1
	0x03E5BA10 STRB W8, [X23 + 0x8DA]
	0x03E5BA14 LDR X0, [X20 + 0x18]
	0x03E5BA18 CBZ X0, 0x3E5BC00
	0x03E5BA1C ADRP X23, 0x299000
	0x03E5BA20 LDR X23, [X23 + 0x1B8]
	0x03E5BA24 LDR W10, [X0 + 0x1C]
	0x03E5BA28 LDR X8, [X0 + 0x10]
	0x03E5BA2C LDR X9, [X23]
	0x03E5BA30 ADD W10, W10, 0x1
	0x03E5BA34 STR W10, [X0 + 0x1C]
	0x03E5BA38 CBZ X8, 0x3E5BC00
	0x03E5BA3C LDRSW X10, [X0 + 0x18]
	0x03E5BA40 LDR W11, [X8 + 0x18]
	0x03E5BA44 CMP W10, W11
	0x03E5BA48 B.CS 0x3E5BA60
	0x03E5BA4C ADD W9, W10, 0x1
	0x03E5BA50 ADD X8, X8, X10, 0x3, LSL
	0x03E5BA54 STR W9, [X0 + 0x18]
	0x03E5BA58 STR X22, [X8 + 0x20]
	0x03E5BA5C B 0x3E5BA74
	0x03E5BA60 LDR X8, [X9 + 0x20]
	0x03E5BA64 MOV X1, X22
	0x03E5BA68 LDR X8, [X8 + 0xC0]
	0x03E5BA6C LDR X2, [X8 + 0x70]
	0x03E5BA70 BL 0x301BF90
	0x03E5BA74 LDR X0, [X20 + 0x20]
	0x03E5BA78 CBZ X0, 0x3E5BC00
	0x03E5BA7C LDR W10, [X0 + 0x1C]
	0x03E5BA80 LDR X8, [X0 + 0x10]
	0x03E5BA84 LDR X9, [X23]
	0x03E5BA88 ADD W10, W10, 0x1
	0x03E5BA8C STR W10, [X0 + 0x1C]
	0x03E5BA90 CBZ X8, 0x3E5BC00
	0x03E5BA94 LDRSW X10, [X0 + 0x18]
	0x03E5BA98 LDR W11, [X8 + 0x18]
	0x03E5BA9C CMP W10, W11
	0x03E5BAA0 B.CS 0x3E5BAB8
	0x03E5BAA4 ADD W9, W10, 0x1
	0x03E5BAA8 ADD X8, X8, X10, 0x3, LSL
	0x03E5BAAC STR W9, [X0 + 0x18]
	0x03E5BAB0 STR X31, [X8 + 0x20]
	0x03E5BAB4 B 0x3E5BACC
	0x03E5BAB8 LDR X8, [X9 + 0x20]
	0x03E5BABC MOV X1, X31
	0x03E5BAC0 LDR X8, [X8 + 0xC0]
	0x03E5BAC4 LDR X2, [X8 + 0x70]
	0x03E5BAC8 BL 0x301BF90
	0x03E5BACC CBZ X19, 0x3E5BC00
	0x03E5BAD0 LDR X8, [X19]
	0x03E5BAD4 LDR X22, [X20 + 0x10]
	0x03E5BAD8 MOV X0, X19
	0x03E5BADC MOV X1, X21
	0x03E5BAE0 LDR X9, [X8 + 0x268]
	0x03E5BAE4 LDR X2, [X8 + 0x270]
	0x03E5BAE8 BLR X9
	0x03E5BAEC CBZ X22, 0x3E5BC00
	0x03E5BAF0 ADRP X9, 0x2A3000
	0x03E5BAF4 LDR X9, [X9 + 0xEB0]
	0x03E5BAF8 LDR W10, [X22 + 0x1C]
	0x03E5BAFC LDR X8, [X22 + 0x10]
	0x03E5BB00 LDR X9, [X9]
	0x03E5BB04 ADD W10, W10, 0x1
	0x03E5BB08 STR W10, [X22 + 0x1C]
	0x03E5BB0C CBZ X8, 0x3E5BC00
	0x03E5BB10 LDRSW X10, [X22 + 0x18]
	0x03E5BB14 LDR W11, [X8 + 0x18]
	0x03E5BB18 ADRP X21, 0x310000
	0x03E5BB1C ADRP X24, 0x2A3000
	0x03E5BB20 LDR X21, [X21 + 0xD38]
	0x03E5BB24 LDR X24, [X24 + 0xCD8]
	0x03E5BB28 MOV X1, X0
	0x03E5BB2C CMP W10, W11
	0x03E5BB30 B.CS 0x3E5BB48
	0x03E5BB34 ADD W9, W10, 0x1
	0x03E5BB38 ADD X8, X8, X10, 0x3, LSL
	0x03E5BB3C STR W9, [X22 + 0x18]
	0x03E5BB40 STR X1, [X8 + 0x20]
	0x03E5BB44 B 0x3E5BB5C
	0x03E5BB48 LDR X8, [X9 + 0x20]
	0x03E5BB4C MOV X0, X22
	0x03E5BB50 LDR X8, [X8 + 0xC0]
	0x03E5BB54 LDR X2, [X8 + 0x70]
	0x03E5BB58 BL 0x301BF90
	0x03E5BB5C LDR X8, [X19]
	0x03E5BB60 LDR X20, [X20 + 0x28]
	0x03E5BB64 MOV X0, X19
	0x03E5BB68 LDP X9, X1, [X8 + 0x1D8]
	0x03E5BB6C BLR X9
	0x03E5BB70 LDR X8, [X21]
	0x03E5BB74 LDR X2, [X24]
	0x03E5BB78 MOV X1, X0
	0x03E5BB7C MOV X3, X31
	0x03E5BB80 MOV X0, X8
	0x03E5BB84 BL 0x32274B8
	0x03E5BB88 CBZ X20, 0x3E5BC00

ISIL:
	001 Subtract X31, X31, 304
	002 Move [X31+176], D11
	003 Move [X31+184], D10
	004 Move [X31+192], D9
	005 Move [X31+200], D8
	006 Move [X31+208], X29
	007 Move [X31+216], X30
	008 Move [X31+224], X28
	009 Move [X31+232], X27
	010 Move [X31+240], X26
	011 Move [X31+248], X25
	012 Move [X31+256], X24
	013 Move [X31+264], X23
	014 Move [X31+272], X22
	015 Move [X31+280], X21
	016 Move [X31+288], X20
	017 Move [X31+296], X19
	018 Move X22, 0x58E000
	019 Move W8, [X22+2252]
	020 Move X19, X2
	021 Move X20, X1
	022 Move X21, X0
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfEqual {44}
	027 Move X0, 0x311000
	028 Move X0, [X0+3320]
	029 Call 0x1C17CF4
	030 Move X0, 0x2EF000
	031 Move X0, [X0+856]
	032 Call 0x1C17CF4
	033 Move X0, 0x2EF000
	034 Move X0, [X0+816]
	035 Call 0x1C17CF4
	036 Move X0, 0x311000
	037 Move X0, [X0+3328]
	038 Call 0x1C17CF4
	039 Move X0, 0x29F000
	040 Move X0, [X0+1160]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X22+2252], W8
	044 Add X2, X31, 72
	045 Add X3, X31, 68
	046 Add X4, X31, 64
	047 Move X0, X21
	048 Move X1, X20
	049 Move [X31+80], X31
	050 Move [X31+88], X31
	051 Move [X31+64], X31
	052 Move [X31+72], X31
	053 Call PhysicsRaycaster.ComputeRayAndDistance, X0, X1, X2, X3, X4
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {286}
	058 Move W22, [X21+52]
	059 Move X0, X31
	060 Call ReflectionMethodsCache.get_Singleton
	061 Compare X0, 0
	062 JumpIfEqual {304}
	063 Compare W22, 0
	064 JumpIfEqual {108}
	065 Move X8, [X0+32]
	066 Compare X8, 0
	067 JumpIfEqual {286}
	068 Move W1, [X21+52]
	069 Move W8, [X21+56]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X8, 0x29F000
	072 Move X8, [X8+1160]
	073 Move X0, [X8]
	074 Call 0x1C17D6C
	075 Move W8, [X21+52]
	076 Move [X21+64], X0
	077 Move [X21+56], W8
	078 Move X0, X31
	079 Call ReflectionMethodsCache.get_Singleton
	080 Compare X0, 0
	081 JumpIfEqual {304}
	082 NotImplemented "Instruction LDUR not yet implemented."
	083 Move X8, [X31+88]
	084 Move X23, [X0+32]
	085 Move V8, [X31+64]
	086 Move [X31+1], V0
	087 Move [X31+32], X8
	088 Move X22, [X21+64]
	089 Move X0, X21
	090 Call PhysicsRaycaster.get_finalEventMask, X0
	091 Compare X23, 0
	092 JumpIfEqual {304}
	093 Move V0, [X31+1]
	094 Move X8, [X31+32]
	095 Move W3, W0
	096 Move X9, [X23+24]
	097 Move X0, [X23+64]
	098 Move [X31+6], V0
	099 Move [X31+112], X8
	100 Move X4, [X23+40]
	101 Add X1, X31, 96
	102 Move X2, X22
	103 Move V0, V8
	104 NotImplemented "Instruction BLR not yet implemented."
	105 Move W22, W0
	106 Compare W22, 0
	107 JumpIfNotEqual {142}
	108 Move X8, [X0+24]
	109 Compare X8, 0
	110 JumpIfEqual {286}
	111 Move X0, X31
	112 Call ReflectionMethodsCache.get_Singleton
	113 Compare X0, 0
	114 JumpIfEqual {304}
	115 NotImplemented "Instruction LDUR not yet implemented."
	116 Move X8, [X31+88]
	117 Move X22, [X0+24]
	118 Move V8, [X31+64]
	119 Move X0, X21
	120 Move [X31+1], V0
	121 Move [X31+32], X8
	122 Call PhysicsRaycaster.get_finalEventMask, X0
	123 Compare X22, 0
	124 JumpIfEqual {304}
	125 Move V0, [X31+1]
	126 Move X8, [X31+32]
	127 Move W2, W0
	128 Move X9, [X22+24]
	129 Move X0, [X22+64]
	130 Move [X31+6], V0
	131 Move [X31+112], X8
	132 Move X3, [X22+40]
	133 Add X1, X31, 96
	134 Move V0, V8
	135 NotImplemented "Instruction BLR not yet implemented."
	136 Move [X21+64], X0
	137 Compare X0, 0
	138 JumpIfEqual {304}
	139 Move W22, [X0+24]
	140 Compare W22, 0
	141 JumpIfEqual {286}
	142 NotImplemented "Instruction CMP not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Move X24, 0x311000
	145 Move X24, [X24+3328]
	146 Move X23, [X21+64]
	147 Move X0, [X24]
	148 Move W8, [X0+224]
	149 Compare W8, 0
	150 JumpIfNotEqual {153}
	151 Call 0x1C17DFC
	152 Move X0, [X24]
	153 Move X9, 0x311000
	154 Move X8, [X0+184]
	155 Move X9, [X9+3320]
	156 Move X0, X23
	157 Move W1, W31
	158 Move X3, [X8]
	159 Move X4, [X9]
	160 Move W2, W22
	161 Call Array.Sort, X0, X1, X2, X3
	162 Move X28, 0x2EF000
	163 Move W24, [X31+68]
	164 Move X28, [X28+856]
	165 Add X8, X31, 96
	166 Move X23, X31
	167 Move W25, W22
	168 Add X26, X8, 24
	169 Move W27, 32
	170 Move W29, 80
	171 Move [X31+56], W31
	172 Move [X31+48], X31
	173 Move X8, [X21+64]
	174 Compare X8, 0
	175 JumpIfEqual {304}
	176 Move W9, [X8+24]
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Add X0, X8, X27
	179 Move X1, X31
	180 Call RaycastHit.get_collider, X0
	181 Compare X0, 0
	182 JumpIfEqual {304}
	183 Move X1, X31
	184 Call Component.get_gameObject, X0
	185 Move X8, [X21+64]
	186 Compare X8, 0
	187 JumpIfEqual {304}
	188 Move W9, [X8+24]
	189 NotImplemented "Instruction CMP not yet implemented."
	190 Move X22, X0
	191 Add X0, X8, X27
	192 Move X1, X31
	193 Call RaycastHit.get_distance, X0
	194 Move X8, [X21+64]
	195 Compare X8, 0
	196 JumpIfEqual {304}
	197 Move W9, [X8+24]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Add X0, X8, X27
	200 Move X1, X31
	201 Move V8, V0
	202 Call RaycastHit.get_point, X0
	203 Move X8, [X21+64]
	204 Compare X8, 0
	205 JumpIfEqual {304}
	206 Move W9, [X8+24]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Add X0, X8, X27
	209 Move X1, X31
	210 Move V11, V0
	211 Move V9, V1
	212 Move V10, V2
	213 Call RaycastHit.get_normal, X0
	214 Compare X20, 0
	215 JumpIfEqual {304}
	216 Compare X19, 0
	217 JumpIfEqual {304}
	218 Move X9, [X31+48]
	219 Move W10, [X31+56]
	220 Move V3, [X20+260]
	221 Move V4, [X20+264]
	222 Move W8, [X19+24]
	223 Move W11, [X19+28]
	224 Move [X31+16], X9
	225 Move [X31+24], W10
	226 Move X9, [X19+16]
	227 Move X10, [X28]
	228 Add W11, W11, 1
	229 Move X8, W8
	230 Move [X19+28], W11
	231 Compare X9, 0
	232 JumpIfEqual {304}
	233 Move W11, [X9+24]
	234 NotImplemented "Instruction SCVTF not yet implemented."
	235 NotImplemented "Instruction CMP not yet implemented."
	236 Add W10, W8, 1
	237 NotImplemented "Instruction MADD not yet implemented."
	238 Move [X19+24], W10
	239 Move [X8+32], X22
	240 Move [X8+40], X21
	241 Move [X8+48], S8
	242 Move [X8+56], S5
	243 Move X9, [X31+16]
	244 Move W10, [X31+24]
	245 Move [X8+68], W31
	246 Move [X8+72], W31
	247 Move [X8+76], S11
	248 Move [X8+84], S9
	249 Move [X8+84], S10
	250 Move [X8+92], S0
	251 Move [X8+92], S1
	252 Move [X8+100], S2
	253 Move [X8+100], S3
	254 Move [X8+108], S4
	255 Move [X8+56], X9
	256 Move [X8+64], W10
	257 Move [X8+108], W24
	258 Move X8, [X10+32]
	259 Move X9, [X31+16]
	260 Move W10, [X31+24]
	261 Add X1, X31, 96
	262 Move X8, [X8+192]
	263 Move X0, X19
	264 Move X2, [X8+112]
	265 Move [X31+96], X22
	266 Move [X31+104], X21
	267 Move [X31+112], S8
	268 Move [X31+120], S5
	269 Move [X26+8], W10
	270 Move [X26], X9
	271 Move [X31+132], W31
	272 Move [X31+136], W31
	273 Move [X31+140], S11
	274 Move [X31+148], S9
	275 Move [X31+148], S10
	276 Move [X31+156], S0
	277 Move [X31+156], S1
	278 Move [X31+164], S2
	279 Move [X31+164], S3
	280 Move [X31+172], S4
	281 Move [X31+172], W24
	282 Call List`1<RaycastResult>.AddWithResize, X0, X1
	283 Add X23, X23, 1
	284 NotImplemented "Instruction CMP not yet implemented."
	285 Add X27, X27, 44
	286 Move X20, [X31+288]
	287 Move X19, [X31+296]
	288 Move X22, [X31+272]
	289 Move X21, [X31+280]
	290 Move X24, [X31+256]
	291 Move X23, [X31+264]
	292 Move X26, [X31+240]
	293 Move X25, [X31+248]
	294 Move X28, [X31+224]
	295 Move X27, [X31+232]
	296 Move X29, [X31+208]
	297 Move X30, [X31+216]
	298 Move D9, [X31+192]
	299 Move D8, [X31+200]
	300 Move D11, [X31+176]
	301 Move D10, [X31+184]
	302 Add X31, X31, 304
	303 Return 
	304 Call 0x1C17F20
	305 Call 0x1C17F28

