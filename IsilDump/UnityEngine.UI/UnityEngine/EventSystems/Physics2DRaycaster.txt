Type: UnityEngine.EventSystems.Physics2DRaycaster

Method: System.Void .ctor()

Disassembly:
	0x03E5AADC LDR W10, [X31 + 0x18]
	0x03E5AAE0 STP W31, W31, [X8 + 0x44]
	0x03E5AAE4 STP S11, S9, [X8 + 0x4C]
	0x03E5AAE8 STP S10, S0, [X8 + 0x54]
	0x03E5AAEC STP S1, S2, [X8 + 0x5C]
	0x03E5AAF0 STP S3, S4, [X8 + 0x64]
	0x03E5AAF4 STR X9, [X8 + 0x38]
	0x03E5AAF8 STR W10, [X8 + 0x40]
	0x03E5AAFC STR W24, [X8 + 0x6C]
	0x03E5AB00 B 0x3E5AB4C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move TEMP, 0
	005 Not TEMP
	006 Move W0, TEMP
	007 Move X1, X31
	008 Call LayerMask.op_Implicit, X0
	009 Move [X19+48], W0
	010 Move X0, X19
	011 Move X1, X31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call MonoBehaviour..ctor, X0
	015 Return 

Method: System.Void Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> resultAppendList)

Disassembly:
	0x03E5AB2C STR X9, [X26]
	0x03E5AB30 STP W31, W31, [X31 + 0x84]
	0x03E5AB34 STP S11, S9, [X31 + 0x8C]
	0x03E5AB38 STP S10, S0, [X31 + 0x94]
	0x03E5AB3C STP S1, S2, [X31 + 0x9C]
	0x03E5AB40 STP S3, S4, [X31 + 0xA4]
	0x03E5AB44 STR W24, [X31 + 0xAC]
	0x03E5AB48 BL 0x3035DFC
	0x03E5AB4C ADD X23, X23, 0x1
	0x03E5AB50 CMP X25, X23
	0x03E5AB54 ADD X27, X27, 0x2C
	0x03E5AB58 B.NE 0x3E5A9D0
	0x03E5AB5C LDP X20, X19, [X31 + 0x120]
	0x03E5AB60 LDP X22, X21, [X31 + 0x110]
	0x03E5AB64 LDP X24, X23, [X31 + 0x100]
	0x03E5AB68 LDP X26, X25, [X31 + 0xF0]
	0x03E5AB6C LDP X28, X27, [X31 + 0xE0]
	0x03E5AB70 LDP X29, X30, [X31 + 0xD0]
	0x03E5AB74 LDP D9, D8, [X31 + 0xC0]
	0x03E5AB78 LDP D11, D10, [X31 + 0xB0]
	0x03E5AB7C ADD X31, X31, 0x130
	0x03E5AB80 RET
	0x03E5AB84 BL 0x1C16F20
	0x03E5AB88 BL 0x1C16F28
	0x03E5AB8C SUB X31, X31, 0x20
	0x03E5AB90 STP X30, X19, [X31 + 0x10]
	0x03E5AB94 MOV X0, X1
	0x03E5AB98 MOV X1, X31
	0x03E5AB9C MOV X19, X2
	0x03E5ABA0 BL 0x3C8E684
	0x03E5ABA4 MOV X0, X19
	0x03E5ABA8 MOV X1, X31
	0x03E5ABAC STR S0, [X31 + 0xC]
	0x03E5ABB0 BL 0x3C8E684
	0x03E5ABB4 ADD X0, X31, 0xC
	0x03E5ABB8 MOV X1, X31
	0x03E5ABBC BL 0x338FCB8
	0x03E5ABC0 LDP X30, X19, [X31 + 0x10]
	0x03E5ABC4 ADD X31, X31, 0x20
	0x03E5ABC8 RET
	0x03E5ABCC MOV X1, X31
	0x03E5ABD0 B 0x33BDD8C
	0x03E5ABD4 STR X30, [X31 - 0x20]!
	0x03E5ABD8 STP X20, X19, [X31 + 0x10]
	0x03E5ABDC ADRP X19, 0x58E000
	0x03E5ABE0 ADRP X20, 0x311000
	0x03E5ABE4 LDRB W8, [X19 + 0x8CD]
	0x03E5ABE8 LDR X20, [X20 + 0xD00]
	0x03E5ABEC TBNZ X8, 0x0, 0x3E5AC04
	0x03E5ABF0 ADRP X0, 0x311000
	0x03E5ABF4 LDR X0, [X0 + 0xD00]
	0x03E5ABF8 BL 0x1C16CF4
	0x03E5ABFC MOVZ W8, 0x1
	0x03E5AC00 STRB W8, [X19 + 0x8CD]
	0x03E5AC04 LDR X0, [X20]
	0x03E5AC08 BL 0x1C16F10
	0x03E5AC0C MOV X1, X31
	0x03E5AC10 MOV X19, X0
	0x03E5AC14 BL 0x33BDD8C
	0x03E5AC18 LDR X8, [X20]
	0x03E5AC1C LDR X8, [X8 + 0xB8]
	0x03E5AC20 STR X19, [X8]
	0x03E5AC24 LDP X20, X19, [X31 + 0x10]
	0x03E5AC28 LDR X30, [X31], #0x20
	0x03E5AC2C RET
	0x03E5AC30 LDR X0, [X0]
	0x03E5AC34 RET
	0x03E5AC38 STR X1, [X0]
	0x03E5AC3C RET
	0x03E5AC40 STP X30, X21, [X31 - 0x20]!
	0x03E5AC44 STP X20, X19, [X31 + 0x10]
	0x03E5AC48 ADRP X20, 0x58E000
	0x03E5AC4C ADRP X21, 0x299000
	0x03E5AC50 LDRB W8, [X20 + 0x8CE]
	0x03E5AC54 LDR X21, [X21 + 0x598]
	0x03E5AC58 MOV X19, X0
	0x03E5AC5C TBNZ X8, 0x0, 0x3E5AC74
	0x03E5AC60 ADRP X0, 0x299000
	0x03E5AC64 LDR X0, [X0 + 0x598]
	0x03E5AC68 BL 0x1C16CF4
	0x03E5AC6C MOVZ W8, 0x1
	0x03E5AC70 STRB W8, [X20 + 0x8CE]
	0x03E5AC74 LDR X0, [X21]
	0x03E5AC78 LDR X20, [X19 + 0x8]
	0x03E5AC7C LDR W8, [X0 + 0xE0]
	0x03E5AC80 CBNZ W8, 0x3E5AC88
	0x03E5AC84 BL 0x1C16DFC
	0x03E5AC88 MOV X0, X20
	0x03E5AC8C MOV X1, X31
	0x03E5AC90 MOV X2, X31
	0x03E5AC94 BL 0x3C354F8
	0x03E5AC98 TBZ X0, 0x0, 0x3E5ACC8
	0x03E5AC9C LDR X0, [X21]
	0x03E5ACA0 LDR X19, [X19]
	0x03E5ACA4 LDR W8, [X0 + 0xE0]
	0x03E5ACA8 CBNZ W8, 0x3E5ACB0
	0x03E5ACAC BL 0x1C16DFC
	0x03E5ACB0 MOV X0, X19
	0x03E5ACB4 LDP X20, X19, [X31 + 0x10]
	0x03E5ACB8 MOV X1, X31
	0x03E5ACBC MOV X2, X31
	0x03E5ACC0 LDP X30, X21, [X31], #0x20
	0x03E5ACC4 B 0x3C354F8
	0x03E5ACC8 LDP X20, X19, [X31 + 0x10]
	0x03E5ACCC MOV W0, W31
	0x03E5ACD0 LDP X30, X21, [X31], #0x20
	0x03E5ACD4 RET
	0x03E5ACD8 STP X30, X21, [X31 - 0x20]!
	0x03E5ACDC STP X20, X19, [X31 + 0x10]
	0x03E5ACE0 STP W31, W31, [X0 + 0x24]
	0x03E5ACE4 STP X31, X31, [X0 + 0x8]
	0x03E5ACE8 STR X31, [X0]
	0x03E5ACEC STR W31, [X0 + 0x18]
	0x03E5ACF0 ADRP X20, 0x57E000
	0x03E5ACF4 LDRB W8, [X20 + 0x786]
	0x03E5ACF8 MOV X19, X0
	0x03E5ACFC CBNZ W8, 0x3E5AD14
	0x03E5AD00 ADRP X0, 0x299000
	0x03E5AD04 LDR X0, [X0 + 0x5A0]
	0x03E5AD08 BL 0x1C16CF4
	0x03E5AD0C MOVZ W8, 0x1
	0x03E5AD10 STRB W8, [X20 + 0x786]
	0x03E5AD14 ADRP X20, 0x299000
	0x03E5AD18 LDR X20, [X20 + 0x5A0]
	0x03E5AD1C ADRP X21, 0x57E000
	0x03E5AD20 LDR X8, [X20]
	0x03E5AD24 LDR X9, [X8 + 0xB8]
	0x03E5AD28 LDR V0, [X9 + 0x18]
	0x03E5AD2C LDR V1, [X9 + 0x20]
	0x03E5AD30 STR D0, [X19 + 0x38]
	0x03E5AD34 STR S1, [X19 + 0x40]
	0x03E5AD38 LDRB W9, [X21 + 0x783]
	0x03E5AD3C CBNZ W9, 0x3E5AD54
	0x03E5AD40 MOV X0, X20
	0x03E5AD44 BL 0x1C16CF4
	0x03E5AD48 LDR X8, [X20]
	0x03E5AD4C MOVZ W9, 0x1
	0x03E5AD50 STRB W9, [X21 + 0x783]
	0x03E5AD54 LDR X9, [X8 + 0xB8]
	0x03E5AD58 LDR V0, [X9]
	0x03E5AD5C LDR V1, [X9 + 0x8]
	0x03E5AD60 STUR D0, [X19 + 0x2C]
	0x03E5AD64 STR S1, [X19 + 0x34]
	0x03E5AD68 LDR X8, [X8 + 0xB8]
	0x03E5AD6C LDR V0, [X8]
	0x03E5AD70 STUR D0, [X19 + 0x44]
	0x03E5AD74 LDP X20, X19, [X31 + 0x10]
	0x03E5AD78 LDP X30, X21, [X31], #0x20
	0x03E5AD7C RET
	0x03E5AD80 RET
	0x03E5AD84 RET
	0x03E5AD88 MOV X1, X31
	0x03E5AD8C B 0x3C32454
	0x03E5AD90 RET
	0x03E5AD94 RET
	0x03E5AD98 RET
	0x03E5AD9C RET
	0x03E5ADA0 STP X30, X21, [X31 - 0x20]!
	0x03E5ADA4 STP X20, X19, [X31 + 0x10]
	0x03E5ADA8 ADRP X20, 0x58E000
	0x03E5ADAC ADRP X21, 0x299000
	0x03E5ADB0 LDRB W8, [X20 + 0x8D0]
	0x03E5ADB4 LDR X21, [X21 + 0x598]
	0x03E5ADB8 MOV X19, X0
	0x03E5ADBC TBNZ X8, 0x0, 0x3E5ADD4
	0x03E5ADC0 ADRP X0, 0x299000
	0x03E5ADC4 LDR X0, [X0 + 0x598]
	0x03E5ADC8 BL 0x1C16CF4
	0x03E5ADCC MOVZ W8, 0x1
	0x03E5ADD0 STRB W8, [X20 + 0x8D0]
	0x03E5ADD4 LDR X0, [X21]
	0x03E5ADD8 LDR W8, [X0 + 0xE0]
	0x03E5ADDC CBNZ W8, 0x3E5ADE4
	0x03E5ADE0 BL 0x1C16DFC
	0x03E5ADE4 MOV X0, X19
	0x03E5ADE8 LDP X20, X19, [X31 + 0x10]
	0x03E5ADEC MOV X1, X31
	0x03E5ADF0 MOV X2, X31
	0x03E5ADF4 LDP X30, X21, [X31], #0x20
	0x03E5ADF8 B 0x3C3883C
	0x03E5ADFC CBZ X0, 0x3E5AE08
	0x03E5AE00 MOV X1, X31
	0x03E5AE04 B 0x3C14E00
	0x03E5AE08 STR X30, [X31 - 0x10]!
	0x03E5AE0C BL 0x1C16F20
	0x03E5AE10 CBZ X0, 0x3E5AE1C
	0x03E5AE14 MOV X1, X31
	0x03E5AE18 B 0x3C14E00
	0x03E5AE1C STR X30, [X31 - 0x10]!
	0x03E5AE20 BL 0x1C16F20
	0x03E5AE24 STP X30, X23, [X31 - 0x30]!
	0x03E5AE28 STP X22, X21, [X31 + 0x10]
	0x03E5AE2C STP X20, X19, [X31 + 0x20]
	0x03E5AE30 ADRP X20, 0x58E000
	0x03E5AE34 LDRB W8, [X20 + 0x8D4]
	0x03E5AE38 MOV X21, X1
	0x03E5AE3C MOV X19, X0
	0x03E5AE40 TBNZ X8, 0x0, 0x3E5AE58
	0x03E5AE44 ADRP X0, 0x29B000
	0x03E5AE48 LDR X0, [X0 + 0xA28]
	0x03E5AE4C BL 0x1C16CF4
	0x03E5AE50 MOVZ W8, 0x1
	0x03E5AE54 STRB W8, [X20 + 0x8D4]
	0x03E5AE58 CBZ X21, 0x3E5AF0C
	0x03E5AE5C ADRP X22, 0x29B000
	0x03E5AE60 LDR X22, [X22 + 0xA28]
	0x03E5AE64 MOV X0, X21
	0x03E5AE68 MOV W1, W31
	0x03E5AE6C MOV X2, X31
	0x03E5AE70 BL 0x3222A1C
	0x03E5AE74 LDR X8, [X22]
	0x03E5AE78 AND W9, W0, 0xFFFF
	0x03E5AE7C CMP W9, 0x2F
	0x03E5AE80 CSET W23, EQ
	0x03E5AE84 MOV X0, X8
	0x03E5AE88 BL 0x1C16F10
	0x03E5AE8C UBFM W2, W23, 0x1F, 0x1E
	0x03E5AE90 MOV X1, X21
	0x03E5AE94 MOV X3, X31
	0x03E5AE98 MOV X20, X0
	0x03E5AE9C BL 0x36198E0
	0x03E5AEA0 CBZ X20, 0x3E5AF0C
	0x03E5AEA4 MOV X0, X20
	0x03E5AEA8 MOV X1, X31
	0x03E5AEAC BL 0x3619A24
	0x03E5AEB0 TBNZ X0, 0x0, 0x3E5AEF4
	0x03E5AEB4 LDR X0, [X22]
	0x03E5AEB8 BL 0x1C16F10
	0x03E5AEBC MOVZ W2, 0x1
	0x03E5AEC0 MOV X1, X19
	0x03E5AEC4 MOV X3, X31
	0x03E5AEC8 MOV X21, X0
	0x03E5AECC BL 0x36198E0
	0x03E5AED0 LDR X0, [X22]
	0x03E5AED4 BL 0x1C16F10
	0x03E5AED8 MOV X1, X21
	0x03E5AEDC MOV X2, X20
	0x03E5AEE0 MOV X3, X31
	0x03E5AEE4 MOV X19, X0
	0x03E5AEE8 BL 0x361A1F8
	0x03E5AEEC MOV X20, X19
	0x03E5AEF0 CBZ X19, 0x3E5AF0C
	0x03E5AEF4 MOV X0, X20
	0x03E5AEF8 LDP X20, X19, [X31 + 0x20]
	0x03E5AEFC LDP X22, X21, [X31 + 0x10]
	0x03E5AF00 MOV X1, X31
	0x03E5AF04 LDP X30, X23, [X31], #0x30
	0x03E5AF08 B 0x361B5B0
	0x03E5AF0C BL 0x1C16F20
	0x03E5AF10 STP X30, X25, [X31 - 0x40]!
	0x03E5AF14 STP X24, X23, [X31 + 0x10]
	0x03E5AF18 STP X22, X21, [X31 + 0x20]
	0x03E5AF1C STP X20, X19, [X31 + 0x30]
	0x03E5AF20 ADRP X20, 0x58E000
	0x03E5AF24 LDRB W8, [X20 + 0x8D5]
	0x03E5AF28 MOV X21, X1
	0x03E5AF2C MOV X19, X0
	0x03E5AF30 TBNZ X8, 0x0, 0x3E5AF6C
	0x03E5AF34 ADRP X0, 0x29B000
	0x03E5AF38 LDR X0, [X0 + 0xA28]
	0x03E5AF3C BL 0x1C16CF4
	0x03E5AF40 ADRP X0, 0x311000
	0x03E5AF44 LDR X0, [X0 + 0xD08]
	0x03E5AF48 BL 0x1C16CF4
	0x03E5AF4C ADRP X0, 0x2D9000
	0x03E5AF50 LDR X0, [X0 + 0xB48]
	0x03E5AF54 BL 0x1C16CF4
	0x03E5AF58 ADRP X0, 0x299000
	0x03E5AF5C LDR X0, [X0 + 0x988]
	0x03E5AF60 BL 0x1C16CF4
	0x03E5AF64 MOVZ W8, 0x1
	0x03E5AF68 STRB W8, [X20 + 0x8D5]
	0x03E5AF6C MOV X0, X19
	0x03E5AF70 MOV X1, X31
	0x03E5AF74 BL 0x32277A8
	0x03E5AF78 TBZ X0, 0x0, 0x3E5AF9C
	0x03E5AF7C ADRP X8, 0x299000
	0x03E5AF80 LDR X8, [X8 + 0x988]
	0x03E5AF84 LDP X20, X19, [X31 + 0x30]
	0x03E5AF88 LDP X22, X21, [X31 + 0x20]
	0x03E5AF8C LDP X24, X23, [X31 + 0x10]
	0x03E5AF90 LDR X0, [X8]
	0x03E5AF94 LDP X30, X25, [X31], #0x40
	0x03E5AF98 RET
	0x03E5AF9C ADRP X25, 0x29B000
	0x03E5AFA0 LDR X25, [X25 + 0xA28]
	0x03E5AFA4 LDR X0, [X25]
	0x03E5AFA8 BL 0x1C16F10
	0x03E5AFAC MOV X1, X21
	0x03E5AFB0 MOV X2, X31
	0x03E5AFB4 MOV X20, X0
	0x03E5AFB8 BL 0x36196A8
	0x03E5AFBC CBZ X19, 0x3E5B174
	0x03E5AFC0 MOV X0, X19
	0x03E5AFC4 MOV W1, W31
	0x03E5AFC8 MOV X2, X31
	0x03E5AFCC BL 0x3222A1C
	0x03E5AFD0 AND W8, W0, 0xFFFF
	0x03E5AFD4 CMP W8, 0x2F
	0x03E5AFD8 MOV X21, X31
	0x03E5AFDC CSET W22, EQ
	0x03E5AFE0 B.NE 0x3E5B000
	0x03E5AFE4 LDR X0, [X25]
	0x03E5AFE8 BL 0x1C16F10
	0x03E5AFEC MOV X1, X20
	0x03E5AFF0 MOV X2, X19
	0x03E5AFF4 MOV X3, X31
	0x03E5AFF8 MOV X21, X0
	0x03E5AFFC BL 0x3619964
	0x03E5B000 LDR X0, [X25]
	0x03E5B004 LDR W8, [X0 + 0xE0]
	0x03E5B008 CBNZ W8, 0x3E5B010
	0x03E5B00C BL 0x1C16DFC
	0x03E5B010 MOV X0, X21
	0x03E5B014 MOV X1, X31
	0x03E5B018 MOV X2, X31
	0x03E5B01C BL 0x361DC84
	0x03E5B020 TBZ X0, 0x0, 0x3E5B08C
	0x03E5B024 ADRP X23, 0x310000
	0x03E5B028 LDR X23, [X23 + 0xD08]
	0x03E5B02C LDR X0, [X23]
	0x03E5B030 LDR W8, [X0 + 0xE0]
	0x03E5B034 CBNZ W8, 0x3E5B040
	0x03E5B038 BL 0x1C16DFC
	0x03E5B03C LDR X0, [X23]
	0x03E5B040 LDR X8, [X0 + 0xB8]
	0x03E5B044 LDR X0, [X8]
	0x03E5B048 CBZ X0, 0x3E5B174
	0x03E5B04C MOV X1, X19
	0x03E5B050 MOV X2, X31
	0x03E5B054 BL 0x3632A38
	0x03E5B058 TBZ X0, 0x0, 0x3E5B08C
	0x03E5B05C CBZ X20, 0x3E5B174
	0x03E5B060 MOV X0, X20
	0x03E5B064 MOV X1, X31
	0x03E5B068 BL 0x361CEF0
	0x03E5B06C ADRP X8, 0x2D8000
	0x03E5B070 LDR X8, [X8 + 0xB48]
	0x03E5B074 MOV X2, X19
	0x03E5B078 MOV X3, X31
	0x03E5B07C LDR X1, [X8]
	0x03E5B080 BL 0x32274B8
	0x03E5B084 MOV X19, X0
	0x03E5B088 MOVZ W22, 0x1
	0x03E5B08C LDR X0, [X25]
	0x03E5B090 LDR W8, [X0 + 0xE0]
	0x03E5B094 CBNZ W8, 0x3E5B09C
	0x03E5B098 BL 0x1C16DFC
	0x03E5B09C MOV X0, X21
	0x03E5B0A0 MOV X1, X31
	0x03E5B0A4 MOV X2, X31
	0x03E5B0A8 BL 0x361DC84
	0x03E5B0AC TBZ X0, 0x0, 0x3E5B0D0
	0x03E5B0B0 CBZ X19, 0x3E5B178
	0x03E5B0B4 MOV X0, X19
	0x03E5B0B8 MOV W1, W31
	0x03E5B0BC MOV X2, X31
	0x03E5B0C0 BL 0x3222A1C
	0x03E5B0C4 AND W8, W0, 0xFFFF
	0x03E5B0C8 CMP W8, 0x2E
	0x03E5B0CC B.NE 0x3E5B0D8
	0x03E5B0D0 MOV X23, X31
	0x03E5B0D4 B 0x3E5B0F8
	0x03E5B0D8 LDR X0, [X25]
	0x03E5B0DC BL 0x1C16F10
	0x03E5B0E0 MOV X24, X0
	0x03E5B0E4 MOV X1, X19
	0x03E5B0E8 MOV X2, X31
	0x03E5B0EC BL 0x36196A8
	0x03E5B0F0 MOV X23, X31
	0x03E5B0F4 MOV X21, X24
	0x03E5B0F8 LDR X0, [X25]
	0x03E5B0FC LDR W8, [X0 + 0xE0]
	0x03E5B100 CBNZ W8, 0x3E5B108
	0x03E5B104 BL 0x1C16DFC
	0x03E5B108 MOV X0, X21
	0x03E5B10C MOV X1, X31
	0x03E5B110 MOV X2, X31
	0x03E5B114 BL 0x361DC84
	0x03E5B118 TBZ X0, 0x0, 0x3E5B13C
	0x03E5B11C LDR X0, [X25]
	0x03E5B120 BL 0x1C16F10
	0x03E5B124 MOV X21, X0
	0x03E5B128 MOV X1, X20
	0x03E5B12C MOV X2, X19
	0x03E5B130 MOV X3, X31
	0x03E5B134 BL 0x3619964
	0x03E5B138 MOVZ W22, 0x1
	0x03E5B13C ADRP X8, 0x310000
	0x03E5B140 LDR X8, [X8 + 0xD08]
	0x03E5B144 LDR X0, [X8]
	0x03E5B148 LDR W8, [X0 + 0xE0]
	0x03E5B14C CBNZ W8, 0x3E5B154
	0x03E5B150 BL 0x1C16DFC
	0x03E5B154 MOV X0, X21
	0x03E5B158 MOV X1, X19
	0x03E5B15C MOV W2, W22
	0x03E5B160 LDP X20, X19, [X31 + 0x30]
	0x03E5B164 LDP X22, X21, [X31 + 0x20]
	0x03E5B168 LDP X24, X23, [X31 + 0x10]
	0x03E5B16C LDP X30, X25, [X31], #0x40
	0x03E5B170 B 0x3E5B280
	0x03E5B174 BL 0x1C16F20
	0x03E5B178 BL 0x1C16F20
	0x03E5B17C B 0x3E5B210
	0x03E5B180 B 0x3E5B210
	0x03E5B184 B 0x3E5B210
	0x03E5B188 B 0x3E5B210
	0x03E5B18C CMP W1, 0x1
	0x03E5B190 MOV X24, X0
	0x03E5B194 B.NE 0x3E5B208
	0x03E5B198 MOV X0, X24
	0x03E5B19C BL 0x3EB1AD0
	0x03E5B1A0 MOV X19, X0
	0x03E5B1A4 ADRP X0, 0x2C5000
	0x03E5B1A8 LDR X0, [X0 + 0xC08]
	0x03E5B1AC BL 0x1C16D08
	0x03E5B1B0 LDR X8, [X19]
	0x03E5B1B4 LDR X1, [X8]
	0x03E5B1B8 BL 0x1C17270
	0x03E5B1BC TBZ X0, 0x0, 0x3E5B1DC
	0x03E5B1C0 BL 0x3EB1AE0
	0x03E5B1C4 ADRP X0, 0x310000
	0x03E5B1C8 LDR X0, [X0 + 0xD10]
	0x03E5B1CC BL 0x1C16D08
	0x03E5B1D0 MOV X1, X0
	0x03E5B1D4 MOV X0, X23
	0x03E5B1D8 BL 0x1C16DEC
	0x03E5B1DC MOVZ W0, 0x8
	0x03E5B1E0 BL 0x3EB1AF0
	0x03E5B1E4 LDR X8, [X19]
	0x03E5B1E8 STR X8, [X0]
	0x03E5B1EC ADRP X1, 0x59000
	0x03E5B1F0 ADD X1, X1, 0xE58
	0x03E5B1F4 MOV X2, X31
	0x03E5B1F8 BL 0x3EB1B00
	0x03E5B1FC B 0x3E5B270
	0x03E5B200 MOV X24, X0
	0x03E5B204 BL 0x3EB1AE0
	0x03E5B208 MOV X0, X24
	0x03E5B20C BL 0x1D2C690
	0x03E5B210 MOV X24, X0
	0x03E5B214 CMP W1, 0x1

ISIL:
	001 Subtract X31, X31, 480
	002 Move [X31+352], D10
	003 Move [X31+368], D9
	004 Move [X31+376], D8
	005 Move [X31+384], X29
	006 Move [X31+392], X30
	007 Move [X31+400], X28
	008 Move [X31+408], X27
	009 Move [X31+416], X26
	010 Move [X31+424], X25
	011 Move [X31+432], X24
	012 Move [X31+440], X23
	013 Move [X31+448], X22
	014 Move [X31+456], X21
	015 Move [X31+464], X20
	016 Move [X31+472], X19
	017 Move X20, 0x58F000
	018 Move W8, [X20+2247]
	019 Move X19, X2
	020 Move X21, X0
	021 Move [X31+360], X1
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {52}
	026 Move X0, 0x2C6000
	027 Move X0, [X0+2480]
	028 Call 0x1C17CF4
	029 Move X0, 0x2F0000
	030 Move X0, [X0+856]
	031 Call 0x1C17CF4
	032 Move X0, 0x2F0000
	033 Move X0, [X0+816]
	034 Call 0x1C17CF4
	035 Move X0, 0x29A000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move X0, 0x2A4000
	039 Move X0, [X0+3584]
	040 Call 0x1C17CF4
	041 Move X0, 0x312000
	042 Move X0, [X0+3296]
	043 Call 0x1C17CF4
	044 Move X0, 0x312000
	045 Move X0, [X0+3304]
	046 Call 0x1C17CF4
	047 Move X0, 0x312000
	048 Move X0, [X0+3312]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X20+2247], W8
	052 Move X1, [X31+360]
	053 NotImplemented "Instruction MOVI not yet implemented."
	054 Add X2, X31, 184
	055 Add X3, X31, 176
	056 Add X4, X31, 180
	057 Move X0, X21
	058 Move [X31+160], X31
	059 Move [X31+168], X31
	060 Move [X31+144], W31
	061 Move [X31+192], X31
	062 Move [X31+200], X31
	063 Move [X31+176], X31
	064 Move [X31+184], X31
	065 Move [X31+112], V0
	066 Move [X31+120], V0
	067 Call PhysicsRaycaster.ComputeRayAndDistance, X0, X1, X2, X3, X4
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {498}
	072 Move W20, [X21+52]
	073 Move X0, X31
	074 Call ReflectionMethodsCache.get_Singleton
	075 Compare X0, 0
	076 JumpIfEqual {515}
	077 Compare W20, 0
	078 JumpIfEqual {120}
	079 Move X8, [X0+56]
	080 Compare X8, 0
	081 JumpIfEqual {498}
	082 Move W1, [X21+52]
	083 Move W8, [X21+56]
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X8, 0x2A4000
	086 Move X8, [X8+3584]
	087 Move X0, [X8]
	088 Call 0x1C17D6C
	089 Move W8, [X21+52]
	090 Move [X21+72], X0
	091 Move [X21+56], W8
	092 Move X0, X31
	093 Call ReflectionMethodsCache.get_Singleton
	094 Compare X0, 0
	095 JumpIfEqual {515}
	096 Add X8, X31, 184
	097 Move V0, [X8]
	098 Move X8, [X31+200]
	099 Move X20, [X0+56]
	100 Move V8, [X31+180]
	101 Move [X31+2], V0
	102 Move [X31+48], X8
	103 Move X22, [X21+72]
	104 Move X0, X21
	105 Call PhysicsRaycaster.get_finalEventMask, X0
	106 Compare X20, 0
	107 JumpIfEqual {515}
	108 Move V0, [X31+2]
	109 Move X8, [X31+48]
	110 Move W3, W0
	111 Move X9, [X20+24]
	112 Move X0, [X20+64]
	113 Move [X31+17], V0
	114 Move [X31+288], X8
	115 Move X4, [X20+40]
	116 Add X1, X31, 272
	117 Move X2, X22
	118 Move V0, V8
	119 NotImplemented "Instruction BLR not yet implemented."
	120 Move X8, [X0+48]
	121 Compare X8, 0
	122 JumpIfEqual {498}
	123 Move X0, X31
	124 Call ReflectionMethodsCache.get_Singleton
	125 Compare X0, 0
	126 JumpIfEqual {515}
	127 Add X8, X31, 184
	128 Move V0, [X8]
	129 Move X8, [X31+200]
	130 Move X20, [X0+48]
	131 Move V8, [X31+180]
	132 Move X0, X21
	133 Move [X31+2], V0
	134 Move [X31+48], X8
	135 Call PhysicsRaycaster.get_finalEventMask, X0
	136 Compare X20, 0
	137 JumpIfEqual {515}
	138 Move V0, [X31+2]
	139 Move X8, [X31+48]
	140 Move W2, W0
	141 Move X9, [X20+24]
	142 Move X0, [X20+64]
	143 Move [X31+17], V0
	144 Move [X31+288], X8
	145 Move X3, [X20+40]
	146 Add X1, X31, 272
	147 Move V0, V8
	148 NotImplemented "Instruction BLR not yet implemented."
	149 Move [X21+72], X0
	150 Compare X0, 0
	151 JumpIfEqual {515}
	152 Move W0, [X0+24]
	153 NotImplemented "Instruction CMP not yet implemented."
	154 Move X8, [X31+360]
	155 Move W10, W0
	156 Move X24, 0x29A000
	157 Add X9, X31, 272
	158 Add X11, X8, 260
	159 Move [X31+16], X10
	160 Move [X31+24], X11
	161 Move X24, [X24+1432]
	162 Add X8, X31, 32
	163 Move X26, X31
	164 Move W29, 32
	165 Add X20, X8, 44
	166 Add X8, X9, 44
	167 Move [X31+8], X8
	168 Move X8, [X21+72]
	169 Compare X8, 0
	170 JumpIfEqual {515}
	171 Move W9, [X8+24]
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Add X0, X8, X29
	174 Move X1, X31
	175 Call RaycastHit2D.get_collider, X0
	176 Compare X0, 0
	177 JumpIfEqual {515}
	178 Move X1, X31
	179 Call Component.get_gameObject, X0
	180 Compare X0, 0
	181 JumpIfEqual {515}
	182 Move X8, 0x2C6000
	183 Move X8, [X8+2480]
	184 Move X1, [X8]
	185 Call 0x21E62E4, X0
	186 Move X8, [X24]
	187 Move X23, X0
	188 Move W9, [X8+224]
	189 Compare W9, 0
	190 JumpIfNotEqual {193}
	191 Move X0, X8
	192 Call 0x1C17DFC
	193 Move X0, X23
	194 Move X1, X31
	195 Move X2, X31
	196 Call Object.op_Inequality, X0, X1
	197 Move X22, X31
	198 Move TEMP, X0
	199 And TEMP, TEMP, 1
	200 Compare TEMP, 1
	201 JumpIfNotEqual {229}
	202 Compare X23, 0
	203 JumpIfEqual {225}
	204 Move X8, 0x312000
	205 Move X9, [X23]
	206 Move X8, [X8+3304]
	207 Move X10, 0x312000
	208 Move X11, [X8]
	209 Move X8, 0x312000
	210 Move X8, [X8+3312]
	211 Move X8, [X8]
	212 Move X10, [X10+3296]
	213 Move W13, [X9+304]
	214 Move W12, [X11+304]
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move X10, [X10]
	217 NotImplemented "Instruction CCMP not yet implemented."
	218 NotImplemented "Instruction CSEL not yet implemented."
	219 NotImplemented "Instruction CMP not yet implemented."
	220 Move X9, [X9+200]
	221 Add X9, X9, X12
	222 NotImplemented "Instruction LDUR not yet implemented."
	223 NotImplemented "Instruction CMP not yet implemented."
	224 NotImplemented "Instruction CSEL not yet implemented."
	225 Move X8, X31
	226 Move X10, X31
	227 NotImplemented "Instruction CMP not yet implemented."
	228 NotImplemented "Instruction CSEL not yet implemented."
	229 NotImplemented "Instruction MOVI not yet implemented."
	230 Move [X31+80], V0
	231 Move [X31+88], V0
	232 Move [X31+48], V0
	233 Move [X31+56], V0
	234 Move [X31+2], V0
	235 Move X8, [X21+72]
	236 Compare X8, 0
	237 JumpIfEqual {515}
	238 Move W9, [X8+24]
	239 NotImplemented "Instruction CMP not yet implemented."
	240 Add X0, X8, X29
	241 Move X1, X31
	242 Call RaycastHit2D.get_collider, X0
	243 Compare X0, 0
	244 JumpIfEqual {515}
	245 Move X1, X31
	246 Call Component.get_gameObject, X0
	247 Move [X31+32], X0
	248 Move [X31+40], X21
	249 Move X8, [X21+72]
	250 Compare X8, 0
	251 JumpIfEqual {515}
	252 Move W9, [X8+24]
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Add X0, X8, X29
	255 Move X1, X31
	256 Call RaycastHit2D.get_distance, X0
	257 Move [X31+48], S0
	258 Move X8, [X21+72]
	259 Compare X8, 0
	260 JumpIfEqual {515}
	261 Move W9, [X8+24]
	262 NotImplemented "Instruction CMP not yet implemented."
	263 Add X0, X8, X29
	264 Move X1, X31
	265 Call RaycastHit2D.get_point, X0
	266 Move [X31+76], S0
	267 Move [X31+84], S1
	268 Move [X31+84], W31
	269 Move X8, [X21+72]
	270 Compare X8, 0
	271 JumpIfEqual {515}
	272 Move W9, [X8+24]
	273 NotImplemented "Instruction CMP not yet implemented."
	274 Add X0, X8, X29
	275 Move X1, X31
	276 Call RaycastHit2D.get_normal, X0
	277 Move X8, [X31+360]
	278 Move [X31+88], S0
	279 Move [X31+96], S1
	280 Move [X31+96], W31
	281 Compare X8, 0
	282 JumpIfEqual {515}
	283 Move X8, [X31+24]
	284 Move V0, [X8]
	285 Move W8, [X31+176]
	286 Move [X31+100], D0
	287 Move [X31+108], W8
	288 Compare X19, 0
	289 JumpIfEqual {515}
	290 Move V0, [X19+24]
	291 Move X0, [X24]
	292 NotImplemented "Instruction SCVTF not yet implemented."
	293 Move [X31+52], S0
	294 Move W8, [X0+224]
	295 Compare W8, 0
	296 JumpIfNotEqual {298}
	297 Call 0x1C17DFC
	298 Move X0, X22
	299 Move X1, X31
	300 Move X2, X31
	301 Call Object.op_Inequality, X0, X1
	302 Move TEMP, X0
	303 And TEMP, TEMP, 1
	304 Compare TEMP, 1
	305 JumpIfNotEqual {311}
	306 Compare X22, 0
	307 JumpIfEqual {515}
	308 Move X0, X22
	309 Move X1, X31
	310 Call Renderer.get_sortingGroupID, X0
	311 Move X0, X31
	312 Call SortingGroup.get_invalidSortingGroupID
	313 Move X8, [X24]
	314 Move [X31+60], W0
	315 Move W9, [X8+224]
	316 Compare W9, 0
	317 JumpIfNotEqual {320}
	318 Move X0, X8
	319 Call 0x1C17DFC
	320 Move X0, X22
	321 Move X1, X31
	322 Move X2, X31
	323 Call Object.op_Inequality, X0, X1
	324 Move TEMP, X0
	325 And TEMP, TEMP, 1
	326 Compare TEMP, 1
	327 JumpIfNotEqual {333}
	328 Compare X22, 0
	329 JumpIfEqual {515}
	330 Move X0, X22
	331 Move X1, X31
	332 Call Renderer.get_sortingGroupOrder, X0
	333 Move W0, W31
	334 Move X8, [X24]
	335 Move [X31+64], W0
	336 Move W9, [X8+224]
	337 Compare W9, 0
	338 JumpIfNotEqual {341}
	339 Move X0, X8
	340 Call 0x1C17DFC
	341 Move X0, X22
	342 Move X1, X31
	343 Move X2, X31
	344 Call Object.op_Inequality, X0, X1
	345 Move TEMP, X0
	346 And TEMP, TEMP, 1
	347 Compare TEMP, 1
	348 JumpIfNotEqual {354}
	349 Compare X22, 0
	350 JumpIfEqual {515}
	351 Move X0, X22
	352 Move X1, X31
	353 Call Renderer.get_sortingLayerID, X0
	354 Move W0, W31
	355 Move X8, [X24]
	356 Move [X31+68], W0
	357 Move W9, [X8+224]
	358 Compare W9, 0
	359 JumpIfNotEqual {362}
	360 Move X0, X8
	361 Call 0x1C17DFC
	362 Move X0, X22
	363 Move X1, X31
	364 Move X2, X31
	365 Call Object.op_Inequality, X0, X1
	366 Move TEMP, X0
	367 And TEMP, TEMP, 1
	368 Compare TEMP, 1
	369 JumpIfNotEqual {376}
	370 Compare X22, 0
	371 JumpIfEqual {515}
	372 Move X0, X22
	373 Move X1, X31
	374 Call Renderer.get_sortingOrder, X0
	375 Move W23, W0
	376 Move W23, W31
	377 Move [X31+72], W23
	378 Move V0, [X31+2]
	379 Move W8, [X20+32]
	380 Move V2, [X20]
	381 Move V1, [X20+16]
	382 Move V8, [X31+48]
	383 NotImplemented "Instruction LDUR not yet implemented."
	384 Move W27, [X31+60]
	385 Move W28, [X31+64]
	386 Move W24, [X31+68]
	387 Move X0, X31
	388 Move [X31+10], V0
	389 Move [X31+144], W8
	390 Move [X31+112], V2
	391 Move [X31+120], V1
	392 Call SortingGroup.get_invalidSortingGroupID
	393 NotImplemented "Instruction CMP not yet implemented."
	394 Compare X22, 0
	395 JumpIfEqual {515}
	396 Move X0, X22
	397 Move X1, X31
	398 Call Renderer.get_sortingGroupID, X0
	399 Move X1, X31
	400 Call SortingGroup.GetSortingGroupByIndex, X0
	401 Compare X0, 0
	402 JumpIfEqual {432}
	403 Move S9, [X31+196]
	404 Move S10, [X31+200]
	405 Move V8, [X31+204]
	406 Move X1, X31
	407 Move X22, X0
	408 Call Component.get_transform, X0
	409 Compare X0, 0
	410 JumpIfEqual {515}
	411 Move X1, X31
	412 Call Transform.get_position, X0
	413 Move S3, [X31+184]
	414 Move S4, [X31+188]
	415 Move V5, [X31+192]
	416 Move X0, X22
	417 Move X1, X31
	418 Subtract S0, S0, S3
	419 Subtract S1, S1, S4
	420 Subtract S2, S2, S5
	421 Multiply S0, S9, S0
	422 Multiply S1, S10, S1
	423 Add S0, S0, S1
	424 Multiply S1, S8, S2
	425 Add S8, S1, S0
	426 Call SortingGroup.get_sortingLayerID, X0
	427 Move W24, W0
	428 Move X0, X22
	429 Move X1, X31
	430 Call SortingGroup.get_sortingOrder, X0
	431 Move W23, W0
	432 Move V0, [X31+10]
	433 Move V1, [X31+112]
	434 Move V2, [X31+128]
	435 Move W8, [X31+144]
	436 Move X9, 0x2EF000
	437 Move [X31+16], V0
	438 Move [X31+208], V1
	439 Move [X31+216], V2
	440 Move [X31+240], W8
	441 Move W10, [X19+28]
	442 Move X8, [X19+16]
	443 Move X9, [X9+856]
	444 Add W10, W10, 1
	445 Move X9, [X9]
	446 Move [X19+28], W10
	447 Compare X8, 0
	448 JumpIfEqual {515}
	449 NotImplemented "Instruction LDRSW not yet implemented."
	450 Move W11, [X8+24]
	451 NotImplemented "Instruction CMP not yet implemented."
	452 Add W9, W10, 1
	453 Move [X19+24], W9
	454 Move V0, [X31+16]
	455 Move W11, 80
	456 NotImplemented "Instruction MADD not yet implemented."
	457 Move [X8+48], S8
	458 Move [X8+52], X25
	459 Move [X8+60], W27
	460 Move [X8+64], W28
	461 Move [X8+68], W24
	462 Move [X8+72], W23
	463 Move [X8+2], V0
	464 Move V1, [X31+208]
	465 Move V0, [X31+224]
	466 Move W9, [X31+240]
	467 Move [X8+92], V0
	468 Move [X8+108], W9
	469 Move [X8+76], V1
	470 Move X8, [X9+32]
	471 Move V0, [X31+16]
	472 Move X9, [X31+8]
	473 Add X1, X31, 272
	474 Move X8, [X8+192]
	475 Move X0, X19
	476 Move X2, [X8+112]
	477 Add X8, X31, 184
	478 Move [X31+17], V0
	479 Move [X31+288], S8
	480 Move V0, [X31+208]
	481 Move V1, [X31+224]
	482 Move [X8+108], X25
	483 Move W8, [X31+240]
	484 Move [X31+300], W27
	485 Move [X31+304], W28
	486 Move [X31+308], W24
	487 Move [X31+312], W23
	488 Move [X9+32], W8
	489 Move [X9], V0
	490 Move [X9+8], V1
	491 Call List`1<RaycastResult>.AddWithResize, X0, X1
	492 Move X8, [X31+16]
	493 Move X24, 0x299000
	494 Move X24, [X24+1432]
	495 Add X26, X26, 1
	496 NotImplemented "Instruction CMP not yet implemented."
	497 Add X29, X29, 36
	498 Move X20, [X31+464]
	499 Move X19, [X31+472]
	500 Move X22, [X31+448]
	501 Move X21, [X31+456]
	502 Move X24, [X31+432]
	503 Move X23, [X31+440]
	504 Move X26, [X31+416]
	505 Move X25, [X31+424]
	506 Move X28, [X31+400]
	507 Move X27, [X31+408]
	508 Move X29, [X31+384]
	509 Move X30, [X31+392]
	510 Move D9, [X31+368]
	511 Move D8, [X31+376]
	512 Move V10, [X31+352]
	513 Add X31, X31, 480
	514 Return 
	515 Call 0x1C17F20
	516 Call 0x1C17F28

