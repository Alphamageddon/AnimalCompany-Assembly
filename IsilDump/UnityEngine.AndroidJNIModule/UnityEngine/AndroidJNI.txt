Type: UnityEngine.AndroidJNI

Method: System.IntPtr GetJavaVM()

Disassembly:
	0x03BE7ACC MOV X0, X20
	0x03BE7AD0 MOV X1, X19
	0x03BE7AD4 LDP X20, X19, [X31 + 0x20]
	0x03BE7AD8 LDP X22, X21, [X31 + 0x10]
	0x03BE7ADC LDR X30, [X31], #0x30
	0x03BE7AE0 B 0x3BE7AE4
	0x03BE7AE4 SUB X31, X31, 0x40
	0x03BE7AE8 STP X3, X30, [X31 + 0x8]
	0x03BE7AEC STP X22, X21, [X31 + 0x20]
	0x03BE7AF0 STP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7FD000
	004 Move X0, [X19+408]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51187712
	008 Add X0, X0, 4012
	009 Call 0x1C17CB8
	010 Move [X19+408], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 AttachCurrentThread()

Disassembly:
	0x03BE7AF4 ADRP X21, 0x7FC000
	0x03BE7AF8 STR X2, [X31]
	0x03BE7AFC ADRP X22, 0x577000
	0x03BE7B00 LDRB W8, [X21 + 0x331]
	0x03BE7B04 LDR X22, [X22 + 0x458]
	0x03BE7B08 MOV X19, X1
	0x03BE7B0C MOV X20, X0
	0x03BE7B10 TBNZ X8, 0x0, 0x3BE7B28
	0x03BE7B14 ADRP X0, 0x577000
	0x03BE7B18 LDR X0, [X0 + 0x458]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7FD000
	004 Move X0, [X19+416]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51097600
	008 Add X0, X0, 4094
	009 Call 0x1C17CB8
	010 Move [X19+416], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 DetachCurrentThread()

Disassembly:
	0x03BE7B1C BL 0x1C16CF4
	0x03BE7B20 MOVZ W8, 0x1
	0x03BE7B24 STRB W8, [X21 + 0x331]
	0x03BE7B28 LDR X1, [X22]
	0x03BE7B2C ADD X0, X31, 0x0
	0x03BE7B30 BL 0x25FF02C
	0x03BE7B34 ADRP X22, 0x7FC000
	0x03BE7B38 LDR X8, [X22 + 0x338]
	0x03BE7B3C MOV X21, X0
	0x03BE7B40 CBNZ X8, 0x3BE7B58

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7FD000
	004 Move X0, [X19+424]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51150848
	008 Add X0, X0, 939
	009 Call 0x1C17CB8
	010 Move [X19+424], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 GetVersion()

Disassembly:
	0x03BE7B44 ADRP X0, 0xFFFFFFFFFCF45000
	0x03BE7B48 ADD X0, X0, 0xBF
	0x03BE7B4C BL 0x1C16CB8
	0x03BE7B50 MOV X8, X0
	0x03BE7B54 STR X0, [X22 + 0x338]
	0x03BE7B58 MOV X0, X20
	0x03BE7B5C MOV X1, X19
	0x03BE7B60 MOV X2, X21
	0x03BE7B64 BLR X8
	0x03BE7B68 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7FD000
	004 Move X0, [X19+432]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51093504
	008 Add X0, X0, 44
	009 Call 0x1C17CB8
	010 Move [X19+432], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.IntPtr FindClass(System.String name)

Disassembly:
	0x03BE7B6C LDP X22, X21, [X31 + 0x20]
	0x03BE7B70 LDR X30, [X31 + 0x10]
	0x03BE7B74 AND W0, W0, 0x1
	0x03BE7B78 ADD X31, X31, 0x40
	0x03BE7B7C RET
	0x03BE7B80 STR X30, [X31 - 0x30]!
	0x03BE7B84 STP X22, X21, [X31 + 0x10]
	0x03BE7B88 STP X20, X19, [X31 + 0x20]
	0x03BE7B8C ADRP X22, 0x7FC000
	0x03BE7B90 LDR X3, [X22 + 0x338]
	0x03BE7B94 MOV X19, X2
	0x03BE7B98 MOV X20, X1
	0x03BE7B9C MOV X21, X0
	0x03BE7BA0 CBNZ X3, 0x3BE7BB8
	0x03BE7BA4 ADRP X0, 0xFFFFFFFFFCF45000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+440]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51109888
	010 Add X0, X0, 217
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+440], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr FromReflectedMethod(System.IntPtr refMethod)

Disassembly:
	0x03BE7BA8 ADD X0, X0, 0xBF
	0x03BE7BAC BL 0x1C16CB8
	0x03BE7BB0 MOV X3, X0
	0x03BE7BB4 STR X0, [X22 + 0x338]
	0x03BE7BB8 MOV X0, X21
	0x03BE7BBC MOV X1, X20
	0x03BE7BC0 MOV X2, X19
	0x03BE7BC4 LDP X20, X19, [X31 + 0x20]
	0x03BE7BC8 LDP X22, X21, [X31 + 0x10]
	0x03BE7BCC LDR X30, [X31], #0x30
	0x03BE7BD0 BR X3
	0x03BE7BD4 STR X30, [X31 - 0x30]!
	0x03BE7BD8 STP X22, X21, [X31 + 0x10]
	0x03BE7BDC STP X20, X19, [X31 + 0x20]
	0x03BE7BE0 ADRP X22, 0x7FC000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+448]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51339264
	010 Add X0, X0, 1875
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+448], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr FromReflectedField(System.IntPtr refField)

Disassembly:
	0x03BE7BE4 LDRB W8, [X22 + 0x340]
	0x03BE7BE8 MOV X21, X2
	0x03BE7BEC MOV X19, X1
	0x03BE7BF0 MOV X20, X0
	0x03BE7BF4 TBNZ X8, 0x0, 0x3BE7C0C
	0x03BE7BF8 ADRP X0, 0x577000
	0x03BE7BFC LDR X0, [X0 + 0x450]
	0x03BE7C00 BL 0x1C16CF4
	0x03BE7C04 MOVZ W8, 0x1
	0x03BE7C08 STRB W8, [X22 + 0x340]
	0x03BE7C0C CBZ X21, 0x3BE7C1C
	0x03BE7C10 LDR W3, [X21 + 0x18]
	0x03BE7C14 ADD X2, X21, 0x20
	0x03BE7C18 B 0x3BE7C24
	0x03BE7C1C MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+456]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51118080
	010 Add X0, X0, 2138
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+456], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr ToReflectedMethod(System.IntPtr clazz, System.IntPtr methodID, System.Boolean isStatic)

Disassembly:
	0x03BE7C20 MOV X3, X31
	0x03BE7C24 MOV X0, X20
	0x03BE7C28 MOV X1, X19
	0x03BE7C2C LDP X20, X19, [X31 + 0x20]
	0x03BE7C30 LDP X22, X21, [X31 + 0x10]
	0x03BE7C34 LDR X30, [X31], #0x30
	0x03BE7C38 B 0x3BE7C3C
	0x03BE7C3C SUB X31, X31, 0x40
	0x03BE7C40 STP X3, X30, [X31 + 0x8]
	0x03BE7C44 STP X22, X21, [X31 + 0x20]
	0x03BE7C48 STP X20, X19, [X31 + 0x30]
	0x03BE7C4C ADRP X21, 0x7FC000
	0x03BE7C50 STR X2, [X31]
	0x03BE7C54 ADRP X22, 0x577000
	0x03BE7C58 LDRB W8, [X21 + 0x341]
	0x03BE7C5C LDR X22, [X22 + 0x458]
	0x03BE7C60 MOV X19, X1
	0x03BE7C64 MOV X20, X0
	0x03BE7C68 TBNZ X8, 0x0, 0x3BE7C80
	0x03BE7C6C ADRP X0, 0x577000
	0x03BE7C70 LDR X0, [X0 + 0x458]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FD000
	007 Move X3, [X22+464]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51298304
	014 Add X0, X0, 3118
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+464], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move X1, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr ToReflectedField(System.IntPtr clazz, System.IntPtr fieldID, System.Boolean isStatic)

Disassembly:
	0x03BE7C74 BL 0x1C16CF4
	0x03BE7C78 MOVZ W8, 0x1
	0x03BE7C7C STRB W8, [X21 + 0x341]
	0x03BE7C80 LDR X1, [X22]
	0x03BE7C84 ADD X0, X31, 0x0
	0x03BE7C88 BL 0x25FF02C
	0x03BE7C8C ADRP X22, 0x7FC000
	0x03BE7C90 LDR X8, [X22 + 0x348]
	0x03BE7C94 MOV X21, X0
	0x03BE7C98 CBNZ X8, 0x3BE7CB0
	0x03BE7C9C ADRP X0, 0xFFFFFFFFFCF25000
	0x03BE7CA0 ADD X0, X0, 0x706
	0x03BE7CA4 BL 0x1C16CB8
	0x03BE7CA8 MOV X8, X0
	0x03BE7CAC STR X0, [X22 + 0x348]
	0x03BE7CB0 MOV X0, X20
	0x03BE7CB4 MOV X1, X19
	0x03BE7CB8 MOV X2, X21
	0x03BE7CBC BLR X8
	0x03BE7CC0 LDP X20, X19, [X31 + 0x30]
	0x03BE7CC4 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FD000
	007 Move X3, [X22+472]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51159040
	014 Add X0, X0, 1809
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+472], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move X1, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr GetSuperclass(System.IntPtr clazz)

Disassembly:
	0x03BE7CC8 LDR X30, [X31 + 0x10]
	0x03BE7CCC ADD X31, X31, 0x40
	0x03BE7CD0 RET
	0x03BE7CD4 STR X30, [X31 - 0x30]!
	0x03BE7CD8 STP X22, X21, [X31 + 0x10]
	0x03BE7CDC STP X20, X19, [X31 + 0x20]
	0x03BE7CE0 ADRP X22, 0x7FC000
	0x03BE7CE4 LDR X3, [X22 + 0x348]
	0x03BE7CE8 MOV X19, X2
	0x03BE7CEC MOV X20, X1
	0x03BE7CF0 MOV X21, X0
	0x03BE7CF4 CBNZ X3, 0x3BE7D0C
	0x03BE7CF8 ADRP X0, 0xFFFFFFFFFCF25000
	0x03BE7CFC ADD X0, X0, 0x706
	0x03BE7D00 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+480]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51240960
	010 Add X0, X0, 2345
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+480], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean IsAssignableFrom(System.IntPtr clazz1, System.IntPtr clazz2)

Disassembly:
	0x03BE7D04 MOV X3, X0
	0x03BE7D08 STR X0, [X22 + 0x348]
	0x03BE7D0C MOV X0, X21
	0x03BE7D10 MOV X1, X20
	0x03BE7D14 MOV X2, X19
	0x03BE7D18 LDP X20, X19, [X31 + 0x20]
	0x03BE7D1C LDP X22, X21, [X31 + 0x10]
	0x03BE7D20 LDR X30, [X31], #0x30
	0x03BE7D24 BR X3
	0x03BE7D28 B 0x3BE7D2C
	0x03BE7D2C STR X30, [X31 - 0x30]!
	0x03BE7D30 STP X22, X21, [X31 + 0x10]
	0x03BE7D34 STP X20, X19, [X31 + 0x20]
	0x03BE7D38 ADRP X22, 0x7FC000
	0x03BE7D3C LDRB W8, [X22 + 0x350]
	0x03BE7D40 MOV X21, X2
	0x03BE7D44 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FD000
	006 Move X2, [X21+488]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51232768
	012 Add X0, X0, 2930
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+488], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 Throw(System.IntPtr obj)

Disassembly:
	0x03BE7D48 MOV X20, X0
	0x03BE7D4C TBNZ X8, 0x0, 0x3BE7D64
	0x03BE7D50 ADRP X0, 0x577000
	0x03BE7D54 LDR X0, [X0 + 0x450]
	0x03BE7D58 BL 0x1C16CF4
	0x03BE7D5C MOVZ W8, 0x1
	0x03BE7D60 STRB W8, [X22 + 0x350]
	0x03BE7D64 CBZ X21, 0x3BE7D74
	0x03BE7D68 LDR W3, [X21 + 0x18]
	0x03BE7D6C ADD X2, X21, 0x20
	0x03BE7D70 B 0x3BE7D7C
	0x03BE7D74 MOV X2, X31
	0x03BE7D78 MOV X3, X31
	0x03BE7D7C MOV X0, X20
	0x03BE7D80 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+496]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51191808
	010 Add X0, X0, 739
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+496], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 ThrowNew(System.IntPtr clazz, System.String message)

Disassembly:
	0x03BE7D84 LDP X20, X19, [X31 + 0x20]
	0x03BE7D88 LDP X22, X21, [X31 + 0x10]
	0x03BE7D8C LDR X30, [X31], #0x30
	0x03BE7D90 B 0x3BE7D94
	0x03BE7D94 SUB X31, X31, 0x40
	0x03BE7D98 STP X3, X30, [X31 + 0x8]
	0x03BE7D9C STP X22, X21, [X31 + 0x20]
	0x03BE7DA0 STP X20, X19, [X31 + 0x30]
	0x03BE7DA4 ADRP X21, 0x7FC000
	0x03BE7DA8 STR X2, [X31]
	0x03BE7DAC ADRP X22, 0x577000
	0x03BE7DB0 LDRB W8, [X21 + 0x351]
	0x03BE7DB4 LDR X22, [X22 + 0x458]
	0x03BE7DB8 MOV X19, X1
	0x03BE7DBC MOV X20, X0
	0x03BE7DC0 TBNZ X8, 0x0, 0x3BE7DD8
	0x03BE7DC4 ADRP X0, 0x577000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FD000
	006 Move X2, [X21+504]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51101696
	012 Add X0, X0, 453
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+504], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr ExceptionOccurred()

Disassembly:
	0x03BE7DC8 LDR X0, [X0 + 0x458]
	0x03BE7DCC BL 0x1C16CF4
	0x03BE7DD0 MOVZ W8, 0x1
	0x03BE7DD4 STRB W8, [X21 + 0x351]
	0x03BE7DD8 LDR X1, [X22]
	0x03BE7DDC ADD X0, X31, 0x0
	0x03BE7DE0 BL 0x25FF02C
	0x03BE7DE4 ADRP X22, 0x7FC000
	0x03BE7DE8 LDR X8, [X22 + 0x358]
	0x03BE7DEC MOV X21, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7FD000
	004 Move X0, [X19+512]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51281920
	008 Add X0, X0, 1763
	009 Call 0x1C17CB8
	010 Move [X19+512], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void ExceptionDescribe()

Disassembly:
	0x03BE7DF0 CBNZ X8, 0x3BE7E08
	0x03BE7DF4 ADRP X0, 0xFFFFFFFFFCF3B000
	0x03BE7DF8 ADD X0, X0, 0x9CC
	0x03BE7DFC BL 0x1C16CB8
	0x03BE7E00 MOV X8, X0
	0x03BE7E04 STR X0, [X22 + 0x358]
	0x03BE7E08 MOV X0, X20
	0x03BE7E0C MOV X1, X19
	0x03BE7E10 MOV X2, X21
	0x03BE7E14 BLR X8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7FD000
	004 Move X0, [X19+520]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51298304
	008 Add X0, X0, 3204
	009 Call 0x1C17CB8
	010 Move [X19+520], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void ExceptionClear()

Disassembly:
	0x03BE7E18 LDP X20, X19, [X31 + 0x30]
	0x03BE7E1C LDP X22, X21, [X31 + 0x20]
	0x03BE7E20 LDR X30, [X31 + 0x10]
	0x03BE7E24 ADD X31, X31, 0x40
	0x03BE7E28 RET
	0x03BE7E2C STR X30, [X31 - 0x30]!
	0x03BE7E30 STP X22, X21, [X31 + 0x10]
	0x03BE7E34 STP X20, X19, [X31 + 0x20]
	0x03BE7E38 ADRP X22, 0x7FC000
	0x03BE7E3C LDR X3, [X22 + 0x358]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7FD000
	004 Move X0, [X19+528]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51281920
	008 Add X0, X0, 1807
	009 Call 0x1C17CB8
	010 Move [X19+528], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void FatalError(System.String message)

Disassembly:
	0x03BE7E40 MOV X19, X2
	0x03BE7E44 MOV X20, X1
	0x03BE7E48 MOV X21, X0
	0x03BE7E4C CBNZ X3, 0x3BE7E64
	0x03BE7E50 ADRP X0, 0xFFFFFFFFFCF3B000
	0x03BE7E54 ADD X0, X0, 0x9CC
	0x03BE7E58 BL 0x1C16CB8
	0x03BE7E5C MOV X3, X0
	0x03BE7E60 STR X0, [X22 + 0x358]
	0x03BE7E64 MOV X0, X21
	0x03BE7E68 MOV X1, X20
	0x03BE7E6C MOV X2, X19
	0x03BE7E70 LDP X20, X19, [X31 + 0x20]
	0x03BE7E74 LDP X22, X21, [X31 + 0x10]
	0x03BE7E78 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+536]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51101696
	010 Add X0, X0, 515
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+536], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 PushLocalFrame(System.Int32 capacity)

Disassembly:
	0x03BE7E7C BR X3
	0x03BE7E80 STR X30, [X31 - 0x30]!
	0x03BE7E84 STP X22, X21, [X31 + 0x10]
	0x03BE7E88 STP X20, X19, [X31 + 0x20]
	0x03BE7E8C ADRP X22, 0x7FC000
	0x03BE7E90 LDRB W8, [X22 + 0x360]
	0x03BE7E94 MOV X21, X2
	0x03BE7E98 MOV X19, X1
	0x03BE7E9C MOV X20, X0
	0x03BE7EA0 TBNZ X8, 0x0, 0x3BE7EB8
	0x03BE7EA4 ADRP X0, 0x577000
	0x03BE7EA8 LDR X0, [X0 + 0x450]
	0x03BE7EAC BL 0x1C16CF4
	0x03BE7EB0 MOVZ W8, 0x1
	0x03BE7EB4 STRB W8, [X22 + 0x360]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+544]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51126272
	010 Add X0, X0, 1617
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+544], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr PopLocalFrame(System.IntPtr ptr)

Disassembly:
	0x03BE7EB8 CBZ X21, 0x3BE7EC8
	0x03BE7EBC LDR W3, [X21 + 0x18]
	0x03BE7EC0 ADD X2, X21, 0x20
	0x03BE7EC4 B 0x3BE7ED0
	0x03BE7EC8 MOV X2, X31
	0x03BE7ECC MOV X3, X31
	0x03BE7ED0 MOV X0, X20
	0x03BE7ED4 MOV X1, X19
	0x03BE7ED8 LDP X20, X19, [X31 + 0x20]
	0x03BE7EDC LDP X22, X21, [X31 + 0x10]
	0x03BE7EE0 LDR X30, [X31], #0x30
	0x03BE7EE4 B 0x3BE7EE8
	0x03BE7EE8 SUB X31, X31, 0x40
	0x03BE7EEC STP X3, X30, [X31 + 0x8]
	0x03BE7EF0 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+552]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51273728
	010 Add X0, X0, 1989
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+552], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewGlobalRef(System.IntPtr obj)

Disassembly:
	0x03BE7EF4 STP X20, X19, [X31 + 0x30]
	0x03BE7EF8 ADRP X21, 0x7FC000
	0x03BE7EFC STR X2, [X31]
	0x03BE7F00 ADRP X22, 0x577000
	0x03BE7F04 LDRB W8, [X21 + 0x361]
	0x03BE7F08 LDR X22, [X22 + 0x458]
	0x03BE7F0C MOV X19, X1
	0x03BE7F10 MOV X20, X0
	0x03BE7F14 TBNZ X8, 0x0, 0x3BE7F2C
	0x03BE7F18 ADRP X0, 0x577000
	0x03BE7F1C LDR X0, [X0 + 0x458]
	0x03BE7F20 BL 0x1C16CF4
	0x03BE7F24 MOVZ W8, 0x1
	0x03BE7F28 STRB W8, [X21 + 0x361]
	0x03BE7F2C LDR X1, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+560]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51249152
	010 Add X0, X0, 2547
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+560], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void DeleteGlobalRef(System.IntPtr obj)

Disassembly:
	0x03BE7F30 ADD X0, X31, 0x0
	0x03BE7F34 BL 0x25FF02C
	0x03BE7F38 ADRP X22, 0x7FC000
	0x03BE7F3C LDR X8, [X22 + 0x368]
	0x03BE7F40 MOV X21, X0
	0x03BE7F44 CBNZ X8, 0x3BE7F5C
	0x03BE7F48 ADRP X0, 0xFFFFFFFFFCF09000
	0x03BE7F4C ADD X0, X0, 0x816
	0x03BE7F50 BL 0x1C16CB8
	0x03BE7F54 MOV X8, X0
	0x03BE7F58 STR X0, [X22 + 0x368]
	0x03BE7F5C MOV X0, X20
	0x03BE7F60 MOV X1, X19
	0x03BE7F64 MOV X2, X21
	0x03BE7F68 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+568]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51134464
	010 Add X0, X0, 2453
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+568], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void QueueDeleteGlobalRef(System.IntPtr obj)

Disassembly:
	0x03BE7F6C LDP X20, X19, [X31 + 0x30]
	0x03BE7F70 LDP X22, X21, [X31 + 0x20]
	0x03BE7F74 LDR X30, [X31 + 0x10]
	0x03BE7F78 ADD X31, X31, 0x40
	0x03BE7F7C RET
	0x03BE7F80 STR X30, [X31 - 0x30]!
	0x03BE7F84 STP X22, X21, [X31 + 0x10]
	0x03BE7F88 STP X20, X19, [X31 + 0x20]
	0x03BE7F8C ADRP X22, 0x7FC000
	0x03BE7F90 LDR X3, [X22 + 0x368]
	0x03BE7F94 MOV X19, X2
	0x03BE7F98 MOV X20, X1
	0x03BE7F9C MOV X21, X0
	0x03BE7FA0 CBNZ X3, 0x3BE7FB8
	0x03BE7FA4 ADRP X0, 0xFFFFFFFFFCF09000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+576]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51167232
	010 Add X0, X0, 1053
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+576], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.UInt32 GetQueueGlobalRefsCount()

Disassembly:
	0x03BE7FA8 ADD X0, X0, 0x816
	0x03BE7FAC BL 0x1C16CB8
	0x03BE7FB0 MOV X3, X0
	0x03BE7FB4 STR X0, [X22 + 0x368]
	0x03BE7FB8 MOV X0, X21
	0x03BE7FBC MOV X1, X20
	0x03BE7FC0 MOV X2, X19
	0x03BE7FC4 LDP X20, X19, [X31 + 0x20]
	0x03BE7FC8 LDP X22, X21, [X31 + 0x10]
	0x03BE7FCC LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x7FD000
	004 Move X0, [X19+584]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51167232
	008 Add X0, X0, 1113
	009 Call 0x1C17CB8
	010 Move [X19+584], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.IntPtr NewWeakGlobalRef(System.IntPtr obj)

Disassembly:
	0x03BE7FD0 BR X3
	0x03BE7FD4 STR X30, [X31 - 0x30]!
	0x03BE7FD8 STP X22, X21, [X31 + 0x10]
	0x03BE7FDC STP X20, X19, [X31 + 0x20]
	0x03BE7FE0 ADRP X22, 0x7FC000
	0x03BE7FE4 LDRB W8, [X22 + 0x370]
	0x03BE7FE8 MOV X21, X2
	0x03BE7FEC MOV X19, X1
	0x03BE7FF0 MOV X20, X0
	0x03BE7FF4 TBNZ X8, 0x0, 0x3BE800C
	0x03BE7FF8 ADRP X0, 0x577000
	0x03BE7FFC LDR X0, [X0 + 0x450]
	0x03BE8000 BL 0x1C16CF4
	0x03BE8004 MOVZ W8, 0x1
	0x03BE8008 STRB W8, [X22 + 0x370]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FD000
	005 Move X1, [X20+592]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51093504
	010 Add X0, X0, 81
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+592], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void DeleteWeakGlobalRef(System.IntPtr obj)

Disassembly:
	0x03BE800C CBZ X21, 0x3BE801C
	0x03BE8010 LDR W3, [X21 + 0x18]
	0x03BE8014 ADD X2, X21, 0x20
	0x03BE8018 B 0x3BE8024
	0x03BE801C MOV X2, X31
	0x03BE8020 MOV X3, X31
	0x03BE8024 MOV X0, X20
	0x03BE8028 MOV X1, X19
	0x03BE802C LDP X20, X19, [X31 + 0x20]
	0x03BE8030 LDP X22, X21, [X31 + 0x10]
	0x03BE8034 LDR X30, [X31], #0x30
	0x03BE8038 B 0x3BE803C
	0x03BE803C SUB X31, X31, 0x40
	0x03BE8040 STP X3, X30, [X31 + 0x8]
	0x03BE8044 STP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+600]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51163136
	010 Add X0, X0, 1894
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+600], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewLocalRef(System.IntPtr obj)

Disassembly:
	0x03BE8048 STP X20, X19, [X31 + 0x30]
	0x03BE804C ADRP X21, 0x7FB000
	0x03BE8050 STR X2, [X31]
	0x03BE8054 ADRP X22, 0x576000
	0x03BE8058 LDRB W8, [X21 + 0x371]
	0x03BE805C LDR X22, [X22 + 0x458]
	0x03BE8060 MOV X19, X1
	0x03BE8064 MOV X20, X0
	0x03BE8068 TBNZ X8, 0x0, 0x3BE8080
	0x03BE806C ADRP X0, 0x576000
	0x03BE8070 LDR X0, [X0 + 0x458]
	0x03BE8074 BL 0x1C16CF4
	0x03BE8078 MOVZ W8, 0x1
	0x03BE807C STRB W8, [X21 + 0x371]
	0x03BE8080 LDR X1, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+608]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51105792
	010 Add X0, X0, 565
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+608], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void DeleteLocalRef(System.IntPtr obj)

Disassembly:
	0x03BE8084 ADD X0, X31, 0x0
	0x03BE8088 BL 0x25FF02C
	0x03BE808C ADRP X22, 0x7FB000
	0x03BE8090 LDR X8, [X22 + 0x378]
	0x03BE8094 MOV X21, X0
	0x03BE8098 CBNZ X8, 0x3BE80B0
	0x03BE809C ADRP X0, 0xFFFFFFFFFCF26000
	0x03BE80A0 ADD X0, X0, 0x905
	0x03BE80A4 BL 0x1C16CB8
	0x03BE80A8 MOV X8, X0
	0x03BE80AC STR X0, [X22 + 0x378]
	0x03BE80B0 MOV X0, X20
	0x03BE80B4 MOV X1, X19
	0x03BE80B8 MOV X2, X21
	0x03BE80BC BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+616]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51212288
	010 Add X0, X0, 2412
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+616], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean IsSameObject(System.IntPtr obj1, System.IntPtr obj2)

Disassembly:
	0x03BE80C0 LDP X20, X19, [X31 + 0x30]
	0x03BE80C4 LDP X22, X21, [X31 + 0x20]
	0x03BE80C8 LDR X30, [X31 + 0x10]
	0x03BE80CC ADD X31, X31, 0x40
	0x03BE80D0 RET
	0x03BE80D4 STR X30, [X31 - 0x30]!
	0x03BE80D8 STP X22, X21, [X31 + 0x10]
	0x03BE80DC STP X20, X19, [X31 + 0x20]
	0x03BE80E0 ADRP X22, 0x7FB000
	0x03BE80E4 LDR X3, [X22 + 0x378]
	0x03BE80E8 MOV X19, X2
	0x03BE80EC MOV X20, X1
	0x03BE80F0 MOV X21, X0
	0x03BE80F4 CBNZ X3, 0x3BE810C
	0x03BE80F8 ADRP X0, 0xFFFFFFFFFCF26000
	0x03BE80FC ADD X0, X0, 0x905
	0x03BE8100 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FC000
	006 Move X2, [X21+624]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51146752
	012 Add X0, X0, 1164
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+624], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 EnsureLocalCapacity(System.Int32 capacity)

Disassembly:
	0x03BE8104 MOV X3, X0
	0x03BE8108 STR X0, [X22 + 0x378]
	0x03BE810C MOV X0, X21
	0x03BE8110 MOV X1, X20
	0x03BE8114 MOV X2, X19
	0x03BE8118 LDP X20, X19, [X31 + 0x20]
	0x03BE811C LDP X22, X21, [X31 + 0x10]
	0x03BE8120 LDR X30, [X31], #0x30
	0x03BE8124 BR X3
	0x03BE8128 STR X30, [X31 - 0x30]!
	0x03BE812C STP X22, X21, [X31 + 0x10]
	0x03BE8130 STP X20, X19, [X31 + 0x20]
	0x03BE8134 ADRP X22, 0x7FB000
	0x03BE8138 LDRB W8, [X22 + 0x380]
	0x03BE813C MOV X21, X2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+632]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51220480
	010 Add X0, X0, 2251
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+632], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr AllocObject(System.IntPtr clazz)

Disassembly:
	0x03BE8140 MOV X19, X1
	0x03BE8144 MOV X20, X0
	0x03BE8148 TBNZ X8, 0x0, 0x3BE8160
	0x03BE814C ADRP X0, 0x576000
	0x03BE8150 LDR X0, [X0 + 0x450]
	0x03BE8154 BL 0x1C16CF4
	0x03BE8158 MOVZ W8, 0x1
	0x03BE815C STRB W8, [X22 + 0x380]
	0x03BE8160 CBZ X21, 0x3BE8170
	0x03BE8164 LDR W3, [X21 + 0x18]
	0x03BE8168 ADD X2, X21, 0x20
	0x03BE816C B 0x3BE8178
	0x03BE8170 MOV X2, X31
	0x03BE8174 MOV X3, X31
	0x03BE8178 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+640]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51343360
	010 Add X0, X0, 1934
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+640], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewObject(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE817C MOV X1, X19
	0x03BE8180 LDP X20, X19, [X31 + 0x20]
	0x03BE8184 LDP X22, X21, [X31 + 0x10]
	0x03BE8188 LDR X30, [X31], #0x30
	0x03BE818C B 0x3BE8190
	0x03BE8190 SUB X31, X31, 0x40
	0x03BE8194 STP X3, X30, [X31 + 0x8]
	0x03BE8198 STP X22, X21, [X31 + 0x20]
	0x03BE819C STP X20, X19, [X31 + 0x30]
	0x03BE81A0 ADRP X21, 0x7FB000
	0x03BE81A4 STR X2, [X31]
	0x03BE81A8 ADRP X22, 0x576000
	0x03BE81AC LDRB W8, [X21 + 0x381]
	0x03BE81B0 LDR X22, [X22 + 0x458]
	0x03BE81B4 MOV X19, X1
	0x03BE81B8 MOV X20, X0
	0x03BE81BC TBNZ X8, 0x0, 0x3BE81D4
	0x03BE81C0 ADRP X0, 0x576000
	0x03BE81C4 LDR X0, [X0 + 0x458]
	0x03BE81C8 BL 0x1C16CF4
	0x03BE81CC MOVZ W8, 0x1
	0x03BE81D0 STRB W8, [X21 + 0x381]
	0x03BE81D4 LDR X1, [X22]
	0x03BE81D8 ADD X0, X31, 0x0
	0x03BE81DC BL 0x25FF02C
	0x03BE81E0 ADRP X22, 0x7FB000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+648]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+648], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.IntPtr NewObject(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE81E4 LDR X8, [X22 + 0x388]
	0x03BE81E8 MOV X21, X0
	0x03BE81EC CBNZ X8, 0x3BE8204
	0x03BE81F0 ADRP X0, 0xFFFFFFFFFCF3A000
	0x03BE81F4 ADD X0, X0, 0xA2B
	0x03BE81F8 BL 0x1C16CB8
	0x03BE81FC MOV X8, X0
	0x03BE8200 STR X0, [X22 + 0x388]
	0x03BE8204 MOV X0, X20
	0x03BE8208 MOV X1, X19
	0x03BE820C MOV X2, X21
	0x03BE8210 BLR X8
	0x03BE8214 LDP X20, X19, [X31 + 0x30]
	0x03BE8218 LDP X22, X21, [X31 + 0x20]
	0x03BE821C LDR X30, [X31 + 0x10]
	0x03BE8220 ADD X31, X31, 0x40
	0x03BE8224 RET
	0x03BE8228 STR X30, [X31 - 0x30]!
	0x03BE822C STP X22, X21, [X31 + 0x10]
	0x03BE8230 STP X20, X19, [X31 + 0x20]
	0x03BE8234 ADRP X22, 0x7FB000
	0x03BE8238 LDR X3, [X22 + 0x388]
	0x03BE823C MOV X19, X2
	0x03BE8240 MOV X20, X1
	0x03BE8244 MOV X21, X0
	0x03BE8248 CBNZ X3, 0x3BE8260
	0x03BE824C ADRP X0, 0xFFFFFFFFFCF3A000
	0x03BE8250 ADD X0, X0, 0xA2B
	0x03BE8254 BL 0x1C16CB8
	0x03BE8258 MOV X3, X0
	0x03BE825C STR X0, [X22 + 0x388]
	0x03BE8260 MOV X0, X21
	0x03BE8264 MOV X1, X20
	0x03BE8268 MOV X2, X19
	0x03BE826C LDP X20, X19, [X31 + 0x20]
	0x03BE8270 LDP X22, X21, [X31 + 0x10]
	0x03BE8274 LDR X30, [X31], #0x30
	0x03BE8278 BR X3

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FC000
	009 Move [X31], X2
	010 Move X22, 0x577000
	011 Move W8, [X21+649]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x577000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+649], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FC000
	028 Move X8, [X22+656]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51179520
	033 Add X0, X0, 307
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+656], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.IntPtr NewObjectA(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE827C STR X30, [X31 - 0x30]!
	0x03BE8280 STP X22, X21, [X31 + 0x10]
	0x03BE8284 STP X20, X19, [X31 + 0x20]
	0x03BE8288 ADRP X22, 0x7FB000
	0x03BE828C LDRB W8, [X22 + 0x390]
	0x03BE8290 MOV X21, X2
	0x03BE8294 MOV X19, X1
	0x03BE8298 MOV X20, X0
	0x03BE829C TBNZ X8, 0x0, 0x3BE82B4
	0x03BE82A0 ADRP X0, 0x576000
	0x03BE82A4 LDR X0, [X0 + 0x450]
	0x03BE82A8 BL 0x1C16CF4
	0x03BE82AC MOVZ W8, 0x1
	0x03BE82B0 STRB W8, [X22 + 0x390]
	0x03BE82B4 CBZ X21, 0x3BE82C4
	0x03BE82B8 LDR W3, [X21 + 0x18]
	0x03BE82BC ADD X2, X21, 0x20
	0x03BE82C0 B 0x3BE82CC
	0x03BE82C4 MOV X2, X31
	0x03BE82C8 MOV X3, X31
	0x03BE82CC MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+656]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51179520
	014 Add X0, X0, 307
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+656], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr GetObjectClass(System.IntPtr obj)

Disassembly:
	0x03BE82D0 MOV X1, X19
	0x03BE82D4 LDP X20, X19, [X31 + 0x20]
	0x03BE82D8 LDP X22, X21, [X31 + 0x10]
	0x03BE82DC LDR X30, [X31], #0x30
	0x03BE82E0 B 0x3BE82E4
	0x03BE82E4 SUB X31, X31, 0x40
	0x03BE82E8 STP X3, X30, [X31 + 0x8]
	0x03BE82EC STP X22, X21, [X31 + 0x20]
	0x03BE82F0 STP X20, X19, [X31 + 0x30]
	0x03BE82F4 ADRP X21, 0x7FB000
	0x03BE82F8 STR X2, [X31]
	0x03BE82FC ADRP X22, 0x576000
	0x03BE8300 LDRB W8, [X21 + 0x391]
	0x03BE8304 LDR X22, [X22 + 0x458]
	0x03BE8308 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+664]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51097600
	010 Add X0, X0, 137
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+664], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean IsInstanceOf(System.IntPtr obj, System.IntPtr clazz)

Disassembly:
	0x03BE830C MOV X20, X0
	0x03BE8310 TBNZ X8, 0x0, 0x3BE8328
	0x03BE8314 ADRP X0, 0x576000
	0x03BE8318 LDR X0, [X0 + 0x458]
	0x03BE831C BL 0x1C16CF4
	0x03BE8320 MOVZ W8, 0x1
	0x03BE8324 STRB W8, [X21 + 0x391]
	0x03BE8328 LDR X1, [X22]
	0x03BE832C ADD X0, X31, 0x0
	0x03BE8330 BL 0x25FF02C
	0x03BE8334 ADRP X22, 0x7FB000
	0x03BE8338 LDR X8, [X22 + 0x398]
	0x03BE833C MOV X21, X0
	0x03BE8340 CBNZ X8, 0x3BE8358
	0x03BE8344 ADRP X0, 0xFFFFFFFFFCF2C000
	0x03BE8348 ADD X0, X0, 0x310
	0x03BE834C BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FC000
	006 Move X2, [X21+672]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51228672
	012 Add X0, X0, 1677
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+672], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr GetMethodID(System.IntPtr clazz, System.String name, System.String sig)

Disassembly:
	0x03BE8350 MOV X8, X0
	0x03BE8354 STR X0, [X22 + 0x398]
	0x03BE8358 MOV X0, X20
	0x03BE835C MOV X1, X19
	0x03BE8360 MOV X2, X21
	0x03BE8364 BLR X8
	0x03BE8368 LDP X20, X19, [X31 + 0x30]
	0x03BE836C LDP X22, X21, [X31 + 0x20]
	0x03BE8370 LDR X30, [X31 + 0x10]
	0x03BE8374 ADD X31, X31, 0x40
	0x03BE8378 RET
	0x03BE837C STR X30, [X31 - 0x30]!
	0x03BE8380 STP X22, X21, [X31 + 0x10]
	0x03BE8384 STP X20, X19, [X31 + 0x20]
	0x03BE8388 ADRP X22, 0x7FB000
	0x03BE838C LDR X3, [X22 + 0x398]
	0x03BE8390 MOV X19, X2
	0x03BE8394 MOV X20, X1
	0x03BE8398 MOV X21, X0
	0x03BE839C CBNZ X3, 0x3BE83B4
	0x03BE83A0 ADRP X0, 0xFFFFFFFFFCF2C000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+680]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51310592
	014 Add X0, X0, 2734
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+680], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr GetFieldID(System.IntPtr clazz, System.String name, System.String sig)

Disassembly:
	0x03BE83A4 ADD X0, X0, 0x310
	0x03BE83A8 BL 0x1C16CB8
	0x03BE83AC MOV X3, X0
	0x03BE83B0 STR X0, [X22 + 0x398]
	0x03BE83B4 MOV X0, X21
	0x03BE83B8 MOV X1, X20
	0x03BE83BC MOV X2, X19
	0x03BE83C0 LDP X20, X19, [X31 + 0x20]
	0x03BE83C4 LDP X22, X21, [X31 + 0x10]
	0x03BE83C8 LDR X30, [X31], #0x30
	0x03BE83CC BR X3
	0x03BE83D0 STR X30, [X31 - 0x30]!
	0x03BE83D4 STP X22, X21, [X31 + 0x10]
	0x03BE83D8 STP X20, X19, [X31 + 0x20]
	0x03BE83DC ADRP X22, 0x7FB000
	0x03BE83E0 LDRB W8, [X22 + 0x3A0]
	0x03BE83E4 MOV X21, X2
	0x03BE83E8 MOV X19, X1
	0x03BE83EC MOV X20, X0
	0x03BE83F0 TBNZ X8, 0x0, 0x3BE8408
	0x03BE83F4 ADRP X0, 0x576000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+688]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51236864
	014 Add X0, X0, 3000
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+688], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr GetStaticMethodID(System.IntPtr clazz, System.String name, System.String sig)

Disassembly:
	0x03BE83F8 LDR X0, [X0 + 0x450]
	0x03BE83FC BL 0x1C16CF4
	0x03BE8400 MOVZ W8, 0x1
	0x03BE8404 STRB W8, [X22 + 0x3A0]
	0x03BE8408 CBZ X21, 0x3BE8418
	0x03BE840C LDR W3, [X21 + 0x18]
	0x03BE8410 ADD X2, X21, 0x20
	0x03BE8414 B 0x3BE8420
	0x03BE8418 MOV X2, X31
	0x03BE841C MOV X3, X31
	0x03BE8420 MOV X0, X20
	0x03BE8424 MOV X1, X19
	0x03BE8428 LDP X20, X19, [X31 + 0x20]
	0x03BE842C LDP X22, X21, [X31 + 0x10]
	0x03BE8430 LDR X30, [X31], #0x30
	0x03BE8434 B 0x3BE8438
	0x03BE8438 SUB X31, X31, 0x40
	0x03BE843C STP X3, X30, [X31 + 0x8]
	0x03BE8440 STP X22, X21, [X31 + 0x20]
	0x03BE8444 STP X20, X19, [X31 + 0x30]
	0x03BE8448 ADRP X21, 0x7FB000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+696]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51343360
	014 Add X0, X0, 1985
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+696], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr GetStaticFieldID(System.IntPtr clazz, System.String name, System.String sig)

Disassembly:
	0x03BE844C STR X2, [X31]
	0x03BE8450 ADRP X22, 0x576000
	0x03BE8454 LDRB W8, [X21 + 0x3A1]
	0x03BE8458 LDR X22, [X22 + 0x458]
	0x03BE845C MOV X19, X1
	0x03BE8460 MOV X20, X0
	0x03BE8464 TBNZ X8, 0x0, 0x3BE847C
	0x03BE8468 ADRP X0, 0x576000
	0x03BE846C LDR X0, [X0 + 0x458]
	0x03BE8470 BL 0x1C16CF4
	0x03BE8474 MOVZ W8, 0x1
	0x03BE8478 STRB W8, [X21 + 0x3A1]
	0x03BE847C LDR X1, [X22]
	0x03BE8480 ADD X0, X31, 0x0
	0x03BE8484 BL 0x25FF02C
	0x03BE8488 ADRP X22, 0x7FB000
	0x03BE848C LDR X8, [X22 + 0x3A8]
	0x03BE8490 MOV X21, X0
	0x03BE8494 CBNZ X8, 0x3BE84AC
	0x03BE8498 ADRP X0, 0xFFFFFFFFFCF3C000
	0x03BE849C ADD X0, X0, 0x6BA

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+704]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51122176
	014 Add X0, X0, 2196
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+704], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr NewString(System.String chars)

Disassembly:
	0x03BE84A0 BL 0x1C16CB8
	0x03BE84A4 MOV X8, X0
	0x03BE84A8 STR X0, [X22 + 0x3A8]
	0x03BE84AC MOV X0, X20
	0x03BE84B0 MOV X1, X19
	0x03BE84B4 MOV X2, X21
	0x03BE84B8 BLR X8
	0x03BE84BC LDP X20, X19, [X31 + 0x30]
	0x03BE84C0 LDP X22, X21, [X31 + 0x20]
	0x03BE84C4 LDR X30, [X31 + 0x10]
	0x03BE84C8 ADD X31, X31, 0x40
	0x03BE84CC RET
	0x03BE84D0 STR X30, [X31 - 0x30]!
	0x03BE84D4 STP X22, X21, [X31 + 0x10]
	0x03BE84D8 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+712]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51294208
	010 Add X0, X0, 2817
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+712], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewStringFromStr(System.String chars)

Disassembly:
	0x03BE84DC ADRP X22, 0x7FB000
	0x03BE84E0 LDR X3, [X22 + 0x3A8]
	0x03BE84E4 MOV X19, X2
	0x03BE84E8 MOV X20, X1
	0x03BE84EC MOV X21, X0
	0x03BE84F0 CBNZ X3, 0x3BE8508
	0x03BE84F4 ADRP X0, 0xFFFFFFFFFCF3C000
	0x03BE84F8 ADD X0, X0, 0x6BA
	0x03BE84FC BL 0x1C16CB8
	0x03BE8500 MOV X3, X0
	0x03BE8504 STR X0, [X22 + 0x3A8]
	0x03BE8508 MOV X0, X21
	0x03BE850C MOV X1, X20
	0x03BE8510 MOV X2, X19
	0x03BE8514 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+712]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51294208
	010 Add X0, X0, 2817
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+712], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewString(System.Char[] chars)

Disassembly:
	0x03BE8518 LDP X22, X21, [X31 + 0x10]
	0x03BE851C LDR X30, [X31], #0x30
	0x03BE8520 BR X3
	0x03BE8524 STP X30, X21, [X31 - 0x20]!
	0x03BE8528 STP X20, X19, [X31 + 0x10]
	0x03BE852C ADRP X21, 0x7FB000
	0x03BE8530 LDR X2, [X21 + 0x3B0]
	0x03BE8534 MOV X19, X1
	0x03BE8538 MOV X20, X0
	0x03BE853C CBNZ X2, 0x3BE8554
	0x03BE8540 ADRP X0, 0xFFFFFFFFFCF28000
	0x03BE8544 ADD X0, X0, 0x9A2
	0x03BE8548 BL 0x1C16CB8
	0x03BE854C MOV X2, X0
	0x03BE8550 STR X0, [X21 + 0x3B0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+720]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51253248
	010 Add X0, X0, 2599
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+720], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewStringUTF(System.String bytes)

Disassembly:
	0x03BE8554 MOV X0, X20
	0x03BE8558 MOV X1, X19
	0x03BE855C LDP X20, X19, [X31 + 0x10]
	0x03BE8560 LDP X30, X21, [X31], #0x20
	0x03BE8564 BR X2
	0x03BE8568 STP X30, X21, [X31 - 0x20]!
	0x03BE856C STP X20, X19, [X31 + 0x10]
	0x03BE8570 ADRP X21, 0x7FB000
	0x03BE8574 LDR X2, [X21 + 0x3B8]
	0x03BE8578 MOV X19, X1
	0x03BE857C MOV X20, X0
	0x03BE8580 CBNZ X2, 0x3BE8598
	0x03BE8584 ADRP X0, 0xFFFFFFFFFCF32000
	0x03BE8588 ADD X0, X0, 0x48B
	0x03BE858C BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+728]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51130368
	010 Add X0, X0, 1670
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+728], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.String GetStringChars(System.IntPtr str)

Disassembly:
	0x03BE8590 MOV X2, X0
	0x03BE8594 STR X0, [X21 + 0x3B8]
	0x03BE8598 MOV X0, X20
	0x03BE859C MOV X1, X19
	0x03BE85A0 LDP X20, X19, [X31 + 0x10]
	0x03BE85A4 LDP X30, X21, [X31], #0x20
	0x03BE85A8 BR X2
	0x03BE85AC STP X30, X21, [X31 - 0x20]!
	0x03BE85B0 STP X20, X19, [X31 + 0x10]
	0x03BE85B4 ADRP X21, 0x7FB000
	0x03BE85B8 LDR X2, [X21 + 0x3C0]
	0x03BE85BC MOV X19, X1
	0x03BE85C0 MOV X20, X0
	0x03BE85C4 CBNZ X2, 0x3BE85DC
	0x03BE85C8 ADRP X0, 0xFFFFFFFFFCF38000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+736]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51277824
	010 Add X0, X0, 2042
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+736], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetStringLength(System.IntPtr str)

Disassembly:
	0x03BE85CC ADD X0, X0, 0x4CE
	0x03BE85D0 BL 0x1C16CB8
	0x03BE85D4 MOV X2, X0
	0x03BE85D8 STR X0, [X21 + 0x3C0]
	0x03BE85DC MOV X0, X20
	0x03BE85E0 MOV X1, X19
	0x03BE85E4 LDP X20, X19, [X31 + 0x10]
	0x03BE85E8 LDP X30, X21, [X31], #0x20
	0x03BE85EC BR X2
	0x03BE85F0 STP X30, X21, [X31 - 0x20]!
	0x03BE85F4 STP X20, X19, [X31 + 0x10]
	0x03BE85F8 ADRP X21, 0x7FB000
	0x03BE85FC LDR X2, [X21 + 0x3C8]
	0x03BE8600 MOV X19, X1
	0x03BE8604 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+744]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51228672
	010 Add X0, X0, 1743
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+744], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetStringUTFLength(System.IntPtr str)

Disassembly:
	0x03BE8608 CBNZ X2, 0x3BE8620
	0x03BE860C ADRP X0, 0xFFFFFFFFFCF22000
	0x03BE8610 ADD X0, X0, 0xC06
	0x03BE8614 BL 0x1C16CB8
	0x03BE8618 MOV X2, X0
	0x03BE861C STR X0, [X21 + 0x3C8]
	0x03BE8620 MOV X0, X20
	0x03BE8624 MOV X1, X19
	0x03BE8628 LDP X20, X19, [X31 + 0x10]
	0x03BE862C LDP X30, X21, [X31], #0x20
	0x03BE8630 BR X2
	0x03BE8634 STP X30, X21, [X31 - 0x20]!
	0x03BE8638 STP X20, X19, [X31 + 0x10]
	0x03BE863C ADRP X21, 0x7FB000
	0x03BE8640 LDR X2, [X21 + 0x3C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+752]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51261440
	010 Add X0, X0, 2757
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+752], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.String GetStringUTFChars(System.IntPtr str)

Disassembly:
	0x03BE8644 MOV X19, X1
	0x03BE8648 MOV X20, X0
	0x03BE864C CBNZ X2, 0x3BE8664
	0x03BE8650 ADRP X0, 0xFFFFFFFFFCF22000
	0x03BE8654 ADD X0, X0, 0xC06
	0x03BE8658 BL 0x1C16CB8
	0x03BE865C MOV X2, X0
	0x03BE8660 STR X0, [X21 + 0x3C8]
	0x03BE8664 MOV X0, X20
	0x03BE8668 MOV X1, X19
	0x03BE866C LDP X20, X19, [X31 + 0x10]
	0x03BE8670 LDP X30, X21, [X31], #0x20
	0x03BE8674 BR X2
	0x03BE8678 STP X30, X21, [X31 - 0x20]!
	0x03BE867C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7FC000
	005 Move X1, [X20+760]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51179520
	010 Add X0, X0, 391
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+760], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.String CallStringMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE8680 ADRP X21, 0x7FB000
	0x03BE8684 LDR X2, [X21 + 0x3D0]
	0x03BE8688 MOV X19, X1
	0x03BE868C MOV X20, X0
	0x03BE8690 CBNZ X2, 0x3BE86A8
	0x03BE8694 ADRP X0, 0xFFFFFFFFFCF42000
	0x03BE8698 ADD X0, X0, 0x268
	0x03BE869C BL 0x1C16CB8
	0x03BE86A0 MOV X2, X0
	0x03BE86A4 STR X0, [X21 + 0x3D0]
	0x03BE86A8 MOV X0, X20
	0x03BE86AC MOV X1, X19
	0x03BE86B0 LDP X20, X19, [X31 + 0x10]
	0x03BE86B4 LDP X30, X21, [X31], #0x20
	0x03BE86B8 BR X2
	0x03BE86BC STP X30, X21, [X31 - 0x20]!
	0x03BE86C0 STP X20, X19, [X31 + 0x10]
	0x03BE86C4 ADRP X21, 0x7FB000
	0x03BE86C8 LDR X2, [X21 + 0x3D8]
	0x03BE86CC MOV X19, X1
	0x03BE86D0 MOV X20, X0
	0x03BE86D4 CBNZ X2, 0x3BE86EC
	0x03BE86D8 ADRP X0, 0xFFFFFFFFFCF16000
	0x03BE86DC ADD X0, X0, 0x738
	0x03BE86E0 BL 0x1C16CB8
	0x03BE86E4 MOV X2, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+768]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+768], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.String CallStringMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE86E8 STR X0, [X21 + 0x3D8]
	0x03BE86EC MOV X0, X20
	0x03BE86F0 MOV X1, X19
	0x03BE86F4 LDP X20, X19, [X31 + 0x10]
	0x03BE86F8 LDP X30, X21, [X31], #0x20
	0x03BE86FC BR X2
	0x03BE8700 STP X30, X21, [X31 - 0x20]!
	0x03BE8704 STP X20, X19, [X31 + 0x10]
	0x03BE8708 ADRP X21, 0x7FB000
	0x03BE870C LDR X2, [X21 + 0x3E0]
	0x03BE8710 MOV X19, X1
	0x03BE8714 MOV X20, X0
	0x03BE8718 CBNZ X2, 0x3BE8730
	0x03BE871C ADRP X0, 0xFFFFFFFFFCF20000
	0x03BE8720 ADD X0, X0, 0x95E
	0x03BE8724 BL 0x1C16CB8
	0x03BE8728 MOV X2, X0
	0x03BE872C STR X0, [X21 + 0x3E0]
	0x03BE8730 MOV X0, X20
	0x03BE8734 MOV X1, X19
	0x03BE8738 LDP X20, X19, [X31 + 0x10]
	0x03BE873C LDP X30, X21, [X31], #0x20
	0x03BE8740 BR X2
	0x03BE8744 STP X30, X21, [X31 - 0x20]!
	0x03BE8748 STP X20, X19, [X31 + 0x10]
	0x03BE874C ADRP X21, 0x7FB000
	0x03BE8750 LDR X2, [X21 + 0x3E8]
	0x03BE8754 MOV X19, X1
	0x03BE8758 MOV X20, X0
	0x03BE875C CBNZ X2, 0x3BE8774
	0x03BE8760 ADRP X0, 0xFFFFFFFFFCF0C000
	0x03BE8764 ADD X0, X0, 0xC9F
	0x03BE8768 BL 0x1C16CB8
	0x03BE876C MOV X2, X0
	0x03BE8770 STR X0, [X21 + 0x3E8]
	0x03BE8774 MOV X0, X20
	0x03BE8778 MOV X1, X19
	0x03BE877C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FC000
	009 Move [X31], X2
	010 Move X22, 0x577000
	011 Move W8, [X21+769]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x577000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+769], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FC000
	028 Move X8, [X22+776]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51277824
	033 Add X0, X0, 2096
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+776], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.String CallStringMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE8780 LDP X30, X21, [X31], #0x20
	0x03BE8784 BR X2
	0x03BE8788 STP X30, X21, [X31 - 0x20]!
	0x03BE878C STP X20, X19, [X31 + 0x10]
	0x03BE8790 ADRP X21, 0x7FB000
	0x03BE8794 LDR X2, [X21 + 0x3F0]
	0x03BE8798 MOV X19, X1
	0x03BE879C MOV X20, X0
	0x03BE87A0 CBNZ X2, 0x3BE87B8
	0x03BE87A4 ADRP X0, 0xFFFFFFFFFCF24000
	0x03BE87A8 ADD X0, X0, 0x765
	0x03BE87AC BL 0x1C16CB8
	0x03BE87B0 MOV X2, X0
	0x03BE87B4 STR X0, [X21 + 0x3F0]
	0x03BE87B8 MOV X0, X20
	0x03BE87BC MOV X1, X19
	0x03BE87C0 LDP X20, X19, [X31 + 0x10]
	0x03BE87C4 LDP X30, X21, [X31], #0x20
	0x03BE87C8 BR X2
	0x03BE87CC STP X30, X21, [X31 - 0x20]!
	0x03BE87D0 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+776]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51277824
	014 Add X0, X0, 2096
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+776], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr CallObjectMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE87D4 ADRP X21, 0x7FB000
	0x03BE87D8 LDR X2, [X21 + 0x3F8]
	0x03BE87DC MOV X19, X1
	0x03BE87E0 MOV X20, X0
	0x03BE87E4 CBNZ X2, 0x3BE87FC
	0x03BE87E8 ADRP X0, 0xFFFFFFFFFCF10000
	0x03BE87EC ADD X0, X0, 0xAFD
	0x03BE87F0 BL 0x1C16CB8
	0x03BE87F4 MOV X2, X0
	0x03BE87F8 STR X0, [X21 + 0x3F8]
	0x03BE87FC MOV X0, X20
	0x03BE8800 MOV X1, X19
	0x03BE8804 LDP X20, X19, [X31 + 0x10]
	0x03BE8808 LDP X30, X21, [X31], #0x20
	0x03BE880C BR X2
	0x03BE8810 STR X30, [X31 - 0x30]!
	0x03BE8814 STP X22, X21, [X31 + 0x10]
	0x03BE8818 STP X20, X19, [X31 + 0x20]
	0x03BE881C ADRP X22, 0x7FB000
	0x03BE8820 LDR X3, [X22 + 0x400]
	0x03BE8824 MOV X19, X2
	0x03BE8828 MOV X20, X1
	0x03BE882C MOV X21, X0
	0x03BE8830 CBNZ X3, 0x3BE8848
	0x03BE8834 ADRP X0, 0xFFFFFFFFFCF08000
	0x03BE8838 ADD X0, X0, 0x874

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+784]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+784], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.IntPtr CallObjectMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE883C BL 0x1C16CB8
	0x03BE8840 MOV X3, X0
	0x03BE8844 STR X0, [X22 + 0x400]
	0x03BE8848 MOV X0, X21
	0x03BE884C MOV X1, X20
	0x03BE8850 MOV X2, X19
	0x03BE8854 LDP X20, X19, [X31 + 0x20]
	0x03BE8858 LDP X22, X21, [X31 + 0x10]
	0x03BE885C LDR X30, [X31], #0x30
	0x03BE8860 BR X3
	0x03BE8864 STR X30, [X31 - 0x30]!
	0x03BE8868 STP X22, X21, [X31 + 0x10]
	0x03BE886C STP X20, X19, [X31 + 0x20]
	0x03BE8870 ADRP X22, 0x7FB000
	0x03BE8874 LDR X3, [X22 + 0x408]
	0x03BE8878 MOV X19, X2
	0x03BE887C MOV X20, X1
	0x03BE8880 MOV X21, X0
	0x03BE8884 CBNZ X3, 0x3BE889C
	0x03BE8888 ADRP X0, 0xFFFFFFFFFCF2D000
	0x03BE888C ADD X0, X0, 0xFD0
	0x03BE8890 BL 0x1C16CB8
	0x03BE8894 MOV X3, X0
	0x03BE8898 STR X0, [X22 + 0x408]
	0x03BE889C MOV X0, X21
	0x03BE88A0 MOV X1, X20
	0x03BE88A4 MOV X2, X19
	0x03BE88A8 LDP X20, X19, [X31 + 0x20]
	0x03BE88AC LDP X22, X21, [X31 + 0x10]
	0x03BE88B0 LDR X30, [X31], #0x30
	0x03BE88B4 BR X3
	0x03BE88B8 STR X30, [X31 - 0x30]!
	0x03BE88BC STP X22, X21, [X31 + 0x10]
	0x03BE88C0 STP X20, X19, [X31 + 0x20]
	0x03BE88C4 ADRP X22, 0x7FB000
	0x03BE88C8 LDR X3, [X22 + 0x410]
	0x03BE88CC MOV W20, W2
	0x03BE88D0 MOV X19, X1

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FC000
	009 Move [X31], X2
	010 Move X22, 0x577000
	011 Move W8, [X21+785]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x577000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+785], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FC000
	028 Move X8, [X22+792]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51318784
	033 Add X0, X0, 2849
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+792], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.IntPtr CallObjectMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE88D4 MOV X21, X0
	0x03BE88D8 CBNZ X3, 0x3BE88F0
	0x03BE88DC ADRP X0, 0xFFFFFFFFFCF22000
	0x03BE88E0 ADD X0, X0, 0xC49
	0x03BE88E4 BL 0x1C16CB8
	0x03BE88E8 MOV X3, X0
	0x03BE88EC STR X0, [X22 + 0x410]
	0x03BE88F0 AND W2, W20, 0x1
	0x03BE88F4 MOV X0, X21
	0x03BE88F8 MOV X1, X19
	0x03BE88FC LDP X20, X19, [X31 + 0x20]
	0x03BE8900 LDP X22, X21, [X31 + 0x10]
	0x03BE8904 LDR X30, [X31], #0x30
	0x03BE8908 BR X3
	0x03BE890C STR X30, [X31 - 0x30]!
	0x03BE8910 STP X22, X21, [X31 + 0x10]
	0x03BE8914 STP X20, X19, [X31 + 0x20]
	0x03BE8918 ADRP X22, 0x7FB000
	0x03BE891C LDR X3, [X22 + 0x418]
	0x03BE8920 MOV W19, W2
	0x03BE8924 MOV X20, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+792]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51318784
	014 Add X0, X0, 2849
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+792], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int32 CallIntMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE8928 MOV X21, X0
	0x03BE892C CBNZ X3, 0x3BE8944
	0x03BE8930 ADRP X0, 0xFFFFFFFFFCF36000
	0x03BE8934 ADD X0, X0, 0x3D9
	0x03BE8938 BL 0x1C16CB8
	0x03BE893C MOV X3, X0
	0x03BE8940 STR X0, [X22 + 0x418]
	0x03BE8944 MOV X0, X21
	0x03BE8948 MOV X1, X20
	0x03BE894C MOV W2, W19
	0x03BE8950 LDP X20, X19, [X31 + 0x20]
	0x03BE8954 LDP X22, X21, [X31 + 0x10]
	0x03BE8958 LDR X30, [X31], #0x30
	0x03BE895C BR X3
	0x03BE8960 STR X30, [X31 - 0x30]!
	0x03BE8964 STP X22, X21, [X31 + 0x10]
	0x03BE8968 STP X20, X19, [X31 + 0x20]
	0x03BE896C ADRP X22, 0x7FB000
	0x03BE8970 LDR X3, [X22 + 0x418]
	0x03BE8974 MOV W19, W2
	0x03BE8978 MOV X20, X1
	0x03BE897C MOV X21, X0
	0x03BE8980 CBNZ X3, 0x3BE8998
	0x03BE8984 ADRP X0, 0xFFFFFFFFFCF36000
	0x03BE8988 ADD X0, X0, 0x3D9
	0x03BE898C BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+800]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+800], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Int32 CallIntMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE8990 MOV X3, X0
	0x03BE8994 STR X0, [X22 + 0x418]
	0x03BE8998 MOV X0, X21
	0x03BE899C MOV X1, X20
	0x03BE89A0 MOV W2, W19
	0x03BE89A4 LDP X20, X19, [X31 + 0x20]
	0x03BE89A8 LDP X22, X21, [X31 + 0x10]
	0x03BE89AC LDR X30, [X31], #0x30
	0x03BE89B0 BR X3
	0x03BE89B4 STR X30, [X31 - 0x30]!
	0x03BE89B8 STP X22, X21, [X31 + 0x10]
	0x03BE89BC STP X20, X19, [X31 + 0x20]
	0x03BE89C0 ADRP X22, 0x7FB000
	0x03BE89C4 LDR X3, [X22 + 0x420]
	0x03BE89C8 MOV W19, W2
	0x03BE89CC MOV X20, X1
	0x03BE89D0 MOV X21, X0
	0x03BE89D4 CBNZ X3, 0x3BE89EC
	0x03BE89D8 ADRP X0, 0xFFFFFFFFFCF24000
	0x03BE89DC ADD X0, X0, 0x7A8
	0x03BE89E0 BL 0x1C16CB8
	0x03BE89E4 MOV X3, X0
	0x03BE89E8 STR X0, [X22 + 0x420]
	0x03BE89EC MOV X0, X21
	0x03BE89F0 MOV X1, X20
	0x03BE89F4 MOV W2, W19
	0x03BE89F8 LDP X20, X19, [X31 + 0x20]
	0x03BE89FC LDP X22, X21, [X31 + 0x10]
	0x03BE8A00 LDR X30, [X31], #0x30
	0x03BE8A04 BR X3
	0x03BE8A08 STR X30, [X31 - 0x30]!
	0x03BE8A0C STP X22, X21, [X31 + 0x10]
	0x03BE8A10 STP X20, X19, [X31 + 0x20]
	0x03BE8A14 ADRP X22, 0x7FB000
	0x03BE8A18 LDR X3, [X22 + 0x428]
	0x03BE8A1C MOV W19, W2
	0x03BE8A20 MOV X20, X1
	0x03BE8A24 MOV X21, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FC000
	009 Move [X31], X2
	010 Move X22, 0x577000
	011 Move W8, [X21+801]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x577000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+801], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FC000
	028 Move X8, [X22+808]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51179520
	033 Add X0, X0, 448
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+808], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Int32 CallIntMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE8A28 CBNZ X3, 0x3BE8A40
	0x03BE8A2C ADRP X0, 0xFFFFFFFFFCF14000
	0x03BE8A30 ADD X0, X0, 0xB39
	0x03BE8A34 BL 0x1C16CB8
	0x03BE8A38 MOV X3, X0
	0x03BE8A3C STR X0, [X22 + 0x428]
	0x03BE8A40 MOV X0, X21
	0x03BE8A44 MOV X1, X20
	0x03BE8A48 MOV W2, W19
	0x03BE8A4C LDP X20, X19, [X31 + 0x20]
	0x03BE8A50 LDP X22, X21, [X31 + 0x10]
	0x03BE8A54 LDR X30, [X31], #0x30
	0x03BE8A58 BR X3
	0x03BE8A5C STR X30, [X31 - 0x30]!
	0x03BE8A60 STP X22, X21, [X31 + 0x10]
	0x03BE8A64 STP X20, X19, [X31 + 0x20]
	0x03BE8A68 ADRP X22, 0x7FB000
	0x03BE8A6C LDR X3, [X22 + 0x430]
	0x03BE8A70 MOV W19, W2
	0x03BE8A74 MOV X20, X1
	0x03BE8A78 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+808]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51179520
	014 Add X0, X0, 448
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+808], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean CallBooleanMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE8A7C CBNZ X3, 0x3BE8A94
	0x03BE8A80 ADRP X0, 0xFFFFFFFFFCF24000
	0x03BE8A84 ADD X0, X0, 0x7F6
	0x03BE8A88 BL 0x1C16CB8
	0x03BE8A8C MOV X3, X0
	0x03BE8A90 STR X0, [X22 + 0x430]
	0x03BE8A94 MOV X0, X21
	0x03BE8A98 MOV X1, X20
	0x03BE8A9C MOV W2, W19
	0x03BE8AA0 LDP X20, X19, [X31 + 0x20]
	0x03BE8AA4 LDP X22, X21, [X31 + 0x10]
	0x03BE8AA8 LDR X30, [X31], #0x30
	0x03BE8AAC BR X3
	0x03BE8AB0 STR X30, [X31 - 0x30]!
	0x03BE8AB4 STP X22, X21, [X31 + 0x10]
	0x03BE8AB8 STP X20, X19, [X31 + 0x20]
	0x03BE8ABC ADRP X22, 0x7FB000
	0x03BE8AC0 LDR X3, [X22 + 0x438]
	0x03BE8AC4 MOV X19, X2
	0x03BE8AC8 MOV X20, X1
	0x03BE8ACC MOV X21, X0
	0x03BE8AD0 CBNZ X3, 0x3BE8AE8
	0x03BE8AD4 ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BE8AD8 ADD X0, X0, 0x6C2
	0x03BE8ADC BL 0x1C16CB8
	0x03BE8AE0 MOV X3, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+816]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+816], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Boolean CallBooleanMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE8AE4 STR X0, [X22 + 0x438]
	0x03BE8AE8 MOV X0, X21
	0x03BE8AEC MOV X1, X20
	0x03BE8AF0 MOV X2, X19
	0x03BE8AF4 LDP X20, X19, [X31 + 0x20]
	0x03BE8AF8 LDP X22, X21, [X31 + 0x10]
	0x03BE8AFC LDR X30, [X31], #0x30
	0x03BE8B00 BR X3
	0x03BE8B04 STR D8, [X31 - 0x30]!
	0x03BE8B08 STP X30, X21, [X31 + 0x10]
	0x03BE8B0C STP X20, X19, [X31 + 0x20]
	0x03BE8B10 ADRP X21, 0x7FB000
	0x03BE8B14 LDR X2, [X21 + 0x440]
	0x03BE8B18 MOV V8.16B, V0.16B
	0x03BE8B1C MOV X19, X1
	0x03BE8B20 MOV X20, X0
	0x03BE8B24 CBNZ X2, 0x3BE8B3C
	0x03BE8B28 ADRP X0, 0xFFFFFFFFFCF18000
	0x03BE8B2C ADD X0, X0, 0x890
	0x03BE8B30 BL 0x1C16CB8
	0x03BE8B34 MOV X2, X0
	0x03BE8B38 STR X0, [X21 + 0x440]
	0x03BE8B3C MOV X0, X20
	0x03BE8B40 MOV X1, X19
	0x03BE8B44 LDP X20, X19, [X31 + 0x20]
	0x03BE8B48 LDP X30, X21, [X31 + 0x10]
	0x03BE8B4C MOV V0.16B, V8.16B
	0x03BE8B50 LDR V8, [X31], #0x30
	0x03BE8B54 BR X2
	0x03BE8B58 STR D8, [X31 - 0x30]!
	0x03BE8B5C STP X30, X21, [X31 + 0x10]
	0x03BE8B60 STP X20, X19, [X31 + 0x20]
	0x03BE8B64 ADRP X21, 0x7FB000
	0x03BE8B68 LDR X2, [X21 + 0x448]
	0x03BE8B6C MOV V8.16B, V0.16B
	0x03BE8B70 MOV X19, X1
	0x03BE8B74 MOV X20, X0
	0x03BE8B78 CBNZ X2, 0x3BE8B90
	0x03BE8B7C ADRP X0, 0xFFFFFFFFFCF3E000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FC000
	009 Move [X31], X2
	010 Move X22, 0x577000
	011 Move W8, [X21+817]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x577000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+817], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FC000
	028 Move X8, [X22+824]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51097600
	033 Add X0, X0, 191
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+824], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 And W0, W0, 1
	047 Add X31, X31, 64
	048 Return X0

Method: System.Boolean CallBooleanMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE8B80 ADD X0, X0, 0x8E8
	0x03BE8B84 BL 0x1C16CB8
	0x03BE8B88 MOV X2, X0
	0x03BE8B8C STR X0, [X21 + 0x448]
	0x03BE8B90 MOV X0, X20
	0x03BE8B94 MOV X1, X19
	0x03BE8B98 LDP X20, X19, [X31 + 0x20]
	0x03BE8B9C LDP X30, X21, [X31 + 0x10]
	0x03BE8BA0 MOV V0.16B, V8.16B
	0x03BE8BA4 LDR V8, [X31], #0x30
	0x03BE8BA8 BR X2
	0x03BE8BAC STR X30, [X31 - 0x30]!
	0x03BE8BB0 STP X22, X21, [X31 + 0x10]
	0x03BE8BB4 STP X20, X19, [X31 + 0x20]
	0x03BE8BB8 ADRP X22, 0x7FB000
	0x03BE8BBC LDRB W8, [X22 + 0x450]
	0x03BE8BC0 MOV X21, X2
	0x03BE8BC4 MOV X19, X1
	0x03BE8BC8 MOV X20, X0
	0x03BE8BCC TBNZ X8, 0x0, 0x3BE8BE4
	0x03BE8BD0 ADRP X0, 0x576000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+824]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51097600
	014 Add X0, X0, 191
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+824], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int16 CallShortMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE8BD4 LDR X0, [X0 + 0x450]
	0x03BE8BD8 BL 0x1C16CF4
	0x03BE8BDC MOVZ W8, 0x1
	0x03BE8BE0 STRB W8, [X22 + 0x450]
	0x03BE8BE4 CBZ X21, 0x3BE8BF4
	0x03BE8BE8 LDR W3, [X21 + 0x18]
	0x03BE8BEC ADD X2, X21, 0x20
	0x03BE8BF0 B 0x3BE8BFC
	0x03BE8BF4 MOV X2, X31
	0x03BE8BF8 MOV X3, X31
	0x03BE8BFC MOV X0, X20
	0x03BE8C00 MOV X1, X19
	0x03BE8C04 LDP X20, X19, [X31 + 0x20]
	0x03BE8C08 LDP X22, X21, [X31 + 0x10]
	0x03BE8C0C LDR X30, [X31], #0x30
	0x03BE8C10 B 0x3BE8C14
	0x03BE8C14 SUB X31, X31, 0x40
	0x03BE8C18 STP X3, X30, [X31 + 0x8]
	0x03BE8C1C STP X22, X21, [X31 + 0x20]
	0x03BE8C20 STP X20, X19, [X31 + 0x30]
	0x03BE8C24 ADRP X21, 0x7FB000
	0x03BE8C28 STR X2, [X31]
	0x03BE8C2C ADRP X22, 0x576000
	0x03BE8C30 LDRB W8, [X21 + 0x451]
	0x03BE8C34 LDR X22, [X22 + 0x458]
	0x03BE8C38 MOV X19, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+832]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+832], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Int16 CallShortMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE8C3C MOV X20, X0
	0x03BE8C40 TBNZ X8, 0x0, 0x3BE8C58
	0x03BE8C44 ADRP X0, 0x576000
	0x03BE8C48 LDR X0, [X0 + 0x458]
	0x03BE8C4C BL 0x1C16CF4
	0x03BE8C50 MOVZ W8, 0x1
	0x03BE8C54 STRB W8, [X21 + 0x451]
	0x03BE8C58 LDR X1, [X22]
	0x03BE8C5C ADD X0, X31, 0x0
	0x03BE8C60 BL 0x25FF02C
	0x03BE8C64 ADRP X22, 0x7FB000
	0x03BE8C68 LDR X8, [X22 + 0x458]
	0x03BE8C6C MOV X21, X0
	0x03BE8C70 CBNZ X8, 0x3BE8C88
	0x03BE8C74 ADRP X0, 0xFFFFFFFFFCF14000
	0x03BE8C78 ADD X0, X0, 0xB89
	0x03BE8C7C BL 0x1C16CB8
	0x03BE8C80 MOV X8, X0
	0x03BE8C84 STR X0, [X22 + 0x458]
	0x03BE8C88 MOV X0, X20
	0x03BE8C8C MOV X1, X19
	0x03BE8C90 MOV X2, X21
	0x03BE8C94 BLR X8
	0x03BE8C98 LDP X20, X19, [X31 + 0x30]
	0x03BE8C9C LDP X22, X21, [X31 + 0x20]
	0x03BE8CA0 LDR X30, [X31 + 0x10]
	0x03BE8CA4 ADD X31, X31, 0x40
	0x03BE8CA8 RET
	0x03BE8CAC STR X30, [X31 - 0x30]!
	0x03BE8CB0 STP X22, X21, [X31 + 0x10]
	0x03BE8CB4 STP X20, X19, [X31 + 0x20]
	0x03BE8CB8 ADRP X22, 0x7FB000
	0x03BE8CBC LDR X3, [X22 + 0x458]
	0x03BE8CC0 MOV X19, X2
	0x03BE8CC4 MOV X20, X1
	0x03BE8CC8 MOV X21, X0
	0x03BE8CCC CBNZ X3, 0x3BE8CE4
	0x03BE8CD0 ADRP X0, 0xFFFFFFFFFCF14000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FC000
	009 Move [X31], X2
	010 Move X22, 0x577000
	011 Move W8, [X21+833]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x577000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+833], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FC000
	028 Move X8, [X22+840]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51228672
	033 Add X0, X0, 1798
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+840], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Int16 CallShortMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE8CD4 ADD X0, X0, 0xB89
	0x03BE8CD8 BL 0x1C16CB8
	0x03BE8CDC MOV X3, X0
	0x03BE8CE0 STR X0, [X22 + 0x458]
	0x03BE8CE4 MOV X0, X21
	0x03BE8CE8 MOV X1, X20
	0x03BE8CEC MOV X2, X19
	0x03BE8CF0 LDP X20, X19, [X31 + 0x20]
	0x03BE8CF4 LDP X22, X21, [X31 + 0x10]
	0x03BE8CF8 LDR X30, [X31], #0x30
	0x03BE8CFC BR X3
	0x03BE8D00 STR X30, [X31 - 0x30]!
	0x03BE8D04 STP X22, X21, [X31 + 0x10]
	0x03BE8D08 STP X20, X19, [X31 + 0x20]
	0x03BE8D0C ADRP X22, 0x7FB000
	0x03BE8D10 LDRB W8, [X22 + 0x460]
	0x03BE8D14 MOV X21, X2
	0x03BE8D18 MOV X19, X1
	0x03BE8D1C MOV X20, X0
	0x03BE8D20 TBNZ X8, 0x0, 0x3BE8D38
	0x03BE8D24 ADRP X0, 0x576000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+840]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51228672
	014 Add X0, X0, 1798
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+840], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Byte CallByteMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE8D28 LDR X0, [X0 + 0x450]

ISIL:
No ISIL was generated
Method: System.SByte CallSByteMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE8D2C BL 0x1C16CF4
	0x03BE8D30 MOVZ W8, 0x1
	0x03BE8D34 STRB W8, [X22 + 0x460]
	0x03BE8D38 CBZ X21, 0x3BE8D48
	0x03BE8D3C LDR W3, [X21 + 0x18]
	0x03BE8D40 ADD X2, X21, 0x20
	0x03BE8D44 B 0x3BE8D50
	0x03BE8D48 MOV X2, X31
	0x03BE8D4C MOV X3, X31
	0x03BE8D50 MOV X0, X20
	0x03BE8D54 MOV X1, X19
	0x03BE8D58 LDP X20, X19, [X31 + 0x20]
	0x03BE8D5C LDP X22, X21, [X31 + 0x10]
	0x03BE8D60 LDR X30, [X31], #0x30
	0x03BE8D64 B 0x3BE8D68
	0x03BE8D68 SUB X31, X31, 0x40
	0x03BE8D6C STP X3, X30, [X31 + 0x8]
	0x03BE8D70 STP X22, X21, [X31 + 0x20]
	0x03BE8D74 STP X20, X19, [X31 + 0x30]
	0x03BE8D78 ADRP X21, 0x7FB000
	0x03BE8D7C STR X2, [X31]
	0x03BE8D80 ADRP X22, 0x576000
	0x03BE8D84 LDRB W8, [X21 + 0x461]
	0x03BE8D88 LDR X22, [X22 + 0x458]
	0x03BE8D8C MOV X19, X1
	0x03BE8D90 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+848]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+848], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.SByte CallSByteMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE8D94 TBNZ X8, 0x0, 0x3BE8DAC
	0x03BE8D98 ADRP X0, 0x576000
	0x03BE8D9C LDR X0, [X0 + 0x458]
	0x03BE8DA0 BL 0x1C16CF4
	0x03BE8DA4 MOVZ W8, 0x1
	0x03BE8DA8 STRB W8, [X21 + 0x461]
	0x03BE8DAC LDR X1, [X22]
	0x03BE8DB0 ADD X0, X31, 0x0
	0x03BE8DB4 BL 0x25FF02C
	0x03BE8DB8 ADRP X22, 0x7FB000
	0x03BE8DBC LDR X8, [X22 + 0x468]
	0x03BE8DC0 MOV X21, X0
	0x03BE8DC4 CBNZ X8, 0x3BE8DDC
	0x03BE8DC8 ADRP X0, 0xFFFFFFFFFCF0E000
	0x03BE8DCC ADD X0, X0, 0xB81
	0x03BE8DD0 BL 0x1C16CB8
	0x03BE8DD4 MOV X8, X0
	0x03BE8DD8 STR X0, [X22 + 0x468]
	0x03BE8DDC MOV X0, X20
	0x03BE8DE0 MOV X1, X19
	0x03BE8DE4 MOV X2, X21
	0x03BE8DE8 BLR X8
	0x03BE8DEC LDP X20, X19, [X31 + 0x30]
	0x03BE8DF0 LDP X22, X21, [X31 + 0x20]
	0x03BE8DF4 LDR X30, [X31 + 0x10]
	0x03BE8DF8 ADD X31, X31, 0x40
	0x03BE8DFC RET
	0x03BE8E00 STR X30, [X31 - 0x30]!
	0x03BE8E04 STP X22, X21, [X31 + 0x10]
	0x03BE8E08 STP X20, X19, [X31 + 0x20]
	0x03BE8E0C ADRP X22, 0x7FB000
	0x03BE8E10 LDR X3, [X22 + 0x468]
	0x03BE8E14 MOV X19, X2
	0x03BE8E18 MOV X20, X1
	0x03BE8E1C MOV X21, X0
	0x03BE8E20 CBNZ X3, 0x3BE8E38
	0x03BE8E24 ADRP X0, 0xFFFFFFFFFCF0E000
	0x03BE8E28 ADD X0, X0, 0xB81

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FC000
	009 Move [X31], X2
	010 Move X22, 0x577000
	011 Move W8, [X21+849]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x577000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+849], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FC000
	028 Move X8, [X22+856]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51138560
	033 Add X0, X0, 2508
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+856], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.SByte CallSByteMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE8E2C BL 0x1C16CB8
	0x03BE8E30 MOV X3, X0
	0x03BE8E34 STR X0, [X22 + 0x468]
	0x03BE8E38 MOV X0, X21
	0x03BE8E3C MOV X1, X20
	0x03BE8E40 MOV X2, X19
	0x03BE8E44 LDP X20, X19, [X31 + 0x20]
	0x03BE8E48 LDP X22, X21, [X31 + 0x10]
	0x03BE8E4C LDR X30, [X31], #0x30
	0x03BE8E50 BR X3
	0x03BE8E54 STR X30, [X31 - 0x30]!
	0x03BE8E58 STP X22, X21, [X31 + 0x10]
	0x03BE8E5C STP X20, X19, [X31 + 0x20]
	0x03BE8E60 ADRP X22, 0x7FB000
	0x03BE8E64 LDRB W8, [X22 + 0x470]
	0x03BE8E68 MOV X21, X2
	0x03BE8E6C MOV X19, X1
	0x03BE8E70 MOV X20, X0
	0x03BE8E74 TBNZ X8, 0x0, 0x3BE8E8C
	0x03BE8E78 ADRP X0, 0x576000
	0x03BE8E7C LDR X0, [X0 + 0x450]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+856]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51138560
	014 Add X0, X0, 2508
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+856], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Char CallCharMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE8E80 BL 0x1C16CF4
	0x03BE8E84 MOVZ W8, 0x1
	0x03BE8E88 STRB W8, [X22 + 0x470]
	0x03BE8E8C CBZ X21, 0x3BE8E9C
	0x03BE8E90 LDR W3, [X21 + 0x18]
	0x03BE8E94 ADD X2, X21, 0x20
	0x03BE8E98 B 0x3BE8EA4
	0x03BE8E9C MOV X2, X31
	0x03BE8EA0 MOV X3, X31
	0x03BE8EA4 MOV X0, X20
	0x03BE8EA8 MOV X1, X19
	0x03BE8EAC LDP X20, X19, [X31 + 0x20]
	0x03BE8EB0 LDP X22, X21, [X31 + 0x10]
	0x03BE8EB4 LDR X30, [X31], #0x30
	0x03BE8EB8 B 0x3BE8EBC
	0x03BE8EBC SUB X31, X31, 0x40
	0x03BE8EC0 STP X3, X30, [X31 + 0x8]
	0x03BE8EC4 STP X22, X21, [X31 + 0x20]
	0x03BE8EC8 STP X20, X19, [X31 + 0x30]
	0x03BE8ECC ADRP X21, 0x7FB000
	0x03BE8ED0 STR X2, [X31]
	0x03BE8ED4 ADRP X22, 0x576000
	0x03BE8ED8 LDRB W8, [X21 + 0x471]
	0x03BE8EDC LDR X22, [X22 + 0x458]
	0x03BE8EE0 MOV X19, X1
	0x03BE8EE4 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+864]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+864], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Char CallCharMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE8EE8 TBNZ X8, 0x0, 0x3BE8F00
	0x03BE8EEC ADRP X0, 0x576000
	0x03BE8EF0 LDR X0, [X0 + 0x458]
	0x03BE8EF4 BL 0x1C16CF4
	0x03BE8EF8 MOVZ W8, 0x1
	0x03BE8EFC STRB W8, [X21 + 0x471]
	0x03BE8F00 LDR X1, [X22]
	0x03BE8F04 ADD X0, X31, 0x0
	0x03BE8F08 BL 0x25FF02C
	0x03BE8F0C ADRP X22, 0x7FB000
	0x03BE8F10 LDR X8, [X22 + 0x478]
	0x03BE8F14 MOV X21, X0
	0x03BE8F18 CBNZ X8, 0x3BE8F30
	0x03BE8F1C ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BE8F20 ADD X0, X0, 0x711
	0x03BE8F24 BL 0x1C16CB8
	0x03BE8F28 MOV X8, X0
	0x03BE8F2C STR X0, [X22 + 0x478]
	0x03BE8F30 MOV X0, X20
	0x03BE8F34 MOV X1, X19
	0x03BE8F38 MOV X2, X21
	0x03BE8F3C BLR X8
	0x03BE8F40 LDP X20, X19, [X31 + 0x30]
	0x03BE8F44 LDP X22, X21, [X31 + 0x20]
	0x03BE8F48 LDR X30, [X31 + 0x10]
	0x03BE8F4C ADD X31, X31, 0x40
	0x03BE8F50 RET
	0x03BE8F54 STR X30, [X31 - 0x30]!
	0x03BE8F58 STP X22, X21, [X31 + 0x10]
	0x03BE8F5C STP X20, X19, [X31 + 0x20]
	0x03BE8F60 ADRP X22, 0x7FB000
	0x03BE8F64 LDR X3, [X22 + 0x478]
	0x03BE8F68 MOV X19, X2
	0x03BE8F6C MOV X20, X1
	0x03BE8F70 MOV X21, X0
	0x03BE8F74 CBNZ X3, 0x3BE8F8C
	0x03BE8F78 ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BE8F7C ADD X0, X0, 0x711

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FC000
	009 Move [X31], X2
	010 Move X22, 0x577000
	011 Move W8, [X21+865]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x577000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+865], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FC000
	028 Move X8, [X22+872]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51343360
	033 Add X0, X0, 2070
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+872], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Char CallCharMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE8F80 BL 0x1C16CB8
	0x03BE8F84 MOV X3, X0
	0x03BE8F88 STR X0, [X22 + 0x478]
	0x03BE8F8C MOV X0, X21
	0x03BE8F90 MOV X1, X20
	0x03BE8F94 MOV X2, X19
	0x03BE8F98 LDP X20, X19, [X31 + 0x20]
	0x03BE8F9C LDP X22, X21, [X31 + 0x10]
	0x03BE8FA0 LDR X30, [X31], #0x30
	0x03BE8FA4 BR X3
	0x03BE8FA8 STR X30, [X31 - 0x30]!
	0x03BE8FAC STP X22, X21, [X31 + 0x10]
	0x03BE8FB0 STP X20, X19, [X31 + 0x20]
	0x03BE8FB4 ADRP X22, 0x7FB000
	0x03BE8FB8 LDRB W8, [X22 + 0x480]
	0x03BE8FBC MOV X21, X2
	0x03BE8FC0 MOV X19, X1
	0x03BE8FC4 MOV X20, X0
	0x03BE8FC8 TBNZ X8, 0x0, 0x3BE8FE0
	0x03BE8FCC ADRP X0, 0x576000
	0x03BE8FD0 LDR X0, [X0 + 0x450]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move X3, [X22+872]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51343360
	014 Add X0, X0, 2070
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+872], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Single CallFloatMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE8FD4 BL 0x1C16CF4
	0x03BE8FD8 MOVZ W8, 0x1
	0x03BE8FDC STRB W8, [X22 + 0x480]
	0x03BE8FE0 CBZ X21, 0x3BE8FF0
	0x03BE8FE4 LDR W3, [X21 + 0x18]
	0x03BE8FE8 ADD X2, X21, 0x20
	0x03BE8FEC B 0x3BE8FF8
	0x03BE8FF0 MOV X2, X31
	0x03BE8FF4 MOV X3, X31
	0x03BE8FF8 MOV X0, X20
	0x03BE8FFC MOV X1, X19
	0x03BE9000 LDP X20, X19, [X31 + 0x20]
	0x03BE9004 LDP X22, X21, [X31 + 0x10]
	0x03BE9008 LDR X30, [X31], #0x30
	0x03BE900C B 0x3BE9010
	0x03BE9010 SUB X31, X31, 0x40
	0x03BE9014 STP X3, X30, [X31 + 0x8]
	0x03BE9018 STP X22, X21, [X31 + 0x20]
	0x03BE901C STP X20, X19, [X31 + 0x30]
	0x03BE9020 ADRP X21, 0x7FA000
	0x03BE9024 STR X2, [X31]
	0x03BE9028 ADRP X22, 0x575000
	0x03BE902C LDRB W8, [X21 + 0x481]
	0x03BE9030 LDR X22, [X22 + 0x458]
	0x03BE9034 MOV X19, X1
	0x03BE9038 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FC000
	007 Move W8, [X22+880]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x577000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+880], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Single CallFloatMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE903C TBNZ X8, 0x0, 0x3BE9054
	0x03BE9040 ADRP X0, 0x575000
	0x03BE9044 LDR X0, [X0 + 0x458]
	0x03BE9048 BL 0x1C16CF4
	0x03BE904C MOVZ W8, 0x1
	0x03BE9050 STRB W8, [X21 + 0x481]
	0x03BE9054 LDR X1, [X22]
	0x03BE9058 ADD X0, X31, 0x0
	0x03BE905C BL 0x25FF02C
	0x03BE9060 ADRP X22, 0x7FA000
	0x03BE9064 LDR X8, [X22 + 0x488]
	0x03BE9068 MOV X21, X0
	0x03BE906C CBNZ X8, 0x3BE9084
	0x03BE9070 ADRP X0, 0xFFFFFFFFFCF31000
	0x03BE9074 ADD X0, X0, 0x4CF
	0x03BE9078 BL 0x1C16CB8
	0x03BE907C MOV X8, X0
	0x03BE9080 STR X0, [X22 + 0x488]
	0x03BE9084 MOV X0, X20
	0x03BE9088 MOV X1, X19
	0x03BE908C MOV X2, X21
	0x03BE9090 BLR X8
	0x03BE9094 LDP X20, X19, [X31 + 0x30]
	0x03BE9098 LDP X22, X21, [X31 + 0x20]
	0x03BE909C LDR X30, [X31 + 0x10]
	0x03BE90A0 AND W0, W0, 0x1
	0x03BE90A4 ADD X31, X31, 0x40
	0x03BE90A8 RET
	0x03BE90AC STR X30, [X31 - 0x30]!
	0x03BE90B0 STP X22, X21, [X31 + 0x10]
	0x03BE90B4 STP X20, X19, [X31 + 0x20]
	0x03BE90B8 ADRP X22, 0x7FA000
	0x03BE90BC LDR X3, [X22 + 0x488]
	0x03BE90C0 MOV X19, X2
	0x03BE90C4 MOV X20, X1
	0x03BE90C8 MOV X21, X0
	0x03BE90CC CBNZ X3, 0x3BE90E4
	0x03BE90D0 ADRP X0, 0xFFFFFFFFFCF31000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FB000
	009 Move [X31], X2
	010 Move X22, 0x576000
	011 Move W8, [X21+881]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x576000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+881], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FB000
	028 Move X8, [X22+888]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51224576
	033 Add X0, X0, 2309
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+888], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return V0

Method: System.Single CallFloatMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE90D4 ADD X0, X0, 0x4CF
	0x03BE90D8 BL 0x1C16CB8
	0x03BE90DC MOV X3, X0
	0x03BE90E0 STR X0, [X22 + 0x488]
	0x03BE90E4 MOV X0, X21
	0x03BE90E8 MOV X1, X20
	0x03BE90EC MOV X2, X19
	0x03BE90F0 LDP X20, X19, [X31 + 0x20]
	0x03BE90F4 LDP X22, X21, [X31 + 0x10]
	0x03BE90F8 LDR X30, [X31], #0x30
	0x03BE90FC BR X3
	0x03BE9100 STR X30, [X31 - 0x30]!
	0x03BE9104 STP X22, X21, [X31 + 0x10]
	0x03BE9108 STP X20, X19, [X31 + 0x20]
	0x03BE910C ADRP X22, 0x7FA000
	0x03BE9110 LDRB W8, [X22 + 0x490]
	0x03BE9114 MOV X21, X2
	0x03BE9118 MOV X19, X1
	0x03BE911C MOV X20, X0
	0x03BE9120 TBNZ X8, 0x0, 0x3BE9138
	0x03BE9124 ADRP X0, 0x575000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+888]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51224576
	014 Add X0, X0, 2309
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+888], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Double CallDoubleMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE9128 LDR X0, [X0 + 0x450]
	0x03BE912C BL 0x1C16CF4
	0x03BE9130 MOVZ W8, 0x1
	0x03BE9134 STRB W8, [X22 + 0x490]
	0x03BE9138 CBZ X21, 0x3BE9148
	0x03BE913C LDR W3, [X21 + 0x18]
	0x03BE9140 ADD X2, X21, 0x20
	0x03BE9144 B 0x3BE9150
	0x03BE9148 MOV X2, X31
	0x03BE914C MOV X3, X31
	0x03BE9150 MOV X0, X20
	0x03BE9154 MOV X1, X19
	0x03BE9158 LDP X20, X19, [X31 + 0x20]
	0x03BE915C LDP X22, X21, [X31 + 0x10]
	0x03BE9160 LDR X30, [X31], #0x30
	0x03BE9164 B 0x3BE9168
	0x03BE9168 SUB X31, X31, 0x40
	0x03BE916C STP X3, X30, [X31 + 0x8]
	0x03BE9170 STP X22, X21, [X31 + 0x20]
	0x03BE9174 STP X20, X19, [X31 + 0x30]
	0x03BE9178 ADRP X21, 0x7FA000
	0x03BE917C STR X2, [X31]
	0x03BE9180 ADRP X22, 0x575000
	0x03BE9184 LDRB W8, [X21 + 0x491]
	0x03BE9188 LDR X22, [X22 + 0x458]
	0x03BE918C MOV X19, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move W8, [X22+896]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x576000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+896], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Double CallDoubleMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE9190 MOV X20, X0
	0x03BE9194 TBNZ X8, 0x0, 0x3BE91AC
	0x03BE9198 ADRP X0, 0x575000
	0x03BE919C LDR X0, [X0 + 0x458]
	0x03BE91A0 BL 0x1C16CF4
	0x03BE91A4 MOVZ W8, 0x1
	0x03BE91A8 STRB W8, [X21 + 0x491]
	0x03BE91AC LDR X1, [X22]
	0x03BE91B0 ADD X0, X31, 0x0
	0x03BE91B4 BL 0x25FF02C
	0x03BE91B8 ADRP X22, 0x7FA000
	0x03BE91BC LDR X8, [X22 + 0x498]
	0x03BE91C0 MOV X21, X0
	0x03BE91C4 CBNZ X8, 0x3BE91DC
	0x03BE91C8 ADRP X0, 0xFFFFFFFFFCF37000
	0x03BE91CC ADD X0, X0, 0x513
	0x03BE91D0 BL 0x1C16CB8
	0x03BE91D4 MOV X8, X0
	0x03BE91D8 STR X0, [X22 + 0x498]
	0x03BE91DC MOV X0, X20
	0x03BE91E0 MOV X1, X19
	0x03BE91E4 MOV X2, X21
	0x03BE91E8 BLR X8
	0x03BE91EC LDP X20, X19, [X31 + 0x30]
	0x03BE91F0 LDP X22, X21, [X31 + 0x20]
	0x03BE91F4 LDR X30, [X31 + 0x10]
	0x03BE91F8 ADD X31, X31, 0x40
	0x03BE91FC RET
	0x03BE9200 STR X30, [X31 - 0x30]!
	0x03BE9204 STP X22, X21, [X31 + 0x10]
	0x03BE9208 STP X20, X19, [X31 + 0x20]
	0x03BE920C ADRP X22, 0x7FA000
	0x03BE9210 LDR X3, [X22 + 0x498]
	0x03BE9214 MOV X19, X2
	0x03BE9218 MOV X20, X1
	0x03BE921C MOV X21, X0
	0x03BE9220 CBNZ X3, 0x3BE9238
	0x03BE9224 ADRP X0, 0xFFFFFFFFFCF37000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FB000
	009 Move [X31], X2
	010 Move X22, 0x576000
	011 Move W8, [X21+897]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x576000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+897], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FB000
	028 Move X8, [X22+904]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51142656
	033 Add X0, X0, 2603
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+904], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return V0

Method: System.Double CallDoubleMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE9228 ADD X0, X0, 0x513
	0x03BE922C BL 0x1C16CB8
	0x03BE9230 MOV X3, X0
	0x03BE9234 STR X0, [X22 + 0x498]
	0x03BE9238 MOV X0, X21
	0x03BE923C MOV X1, X20
	0x03BE9240 MOV X2, X19
	0x03BE9244 LDP X20, X19, [X31 + 0x20]
	0x03BE9248 LDP X22, X21, [X31 + 0x10]
	0x03BE924C LDR X30, [X31], #0x30
	0x03BE9250 BR X3
	0x03BE9254 B 0x3BE9258
	0x03BE9258 STR X30, [X31 - 0x30]!
	0x03BE925C STP X22, X21, [X31 + 0x10]
	0x03BE9260 STP X20, X19, [X31 + 0x20]
	0x03BE9264 ADRP X22, 0x7FA000
	0x03BE9268 LDRB W8, [X22 + 0x4A0]
	0x03BE926C MOV X21, X2
	0x03BE9270 MOV X19, X1
	0x03BE9274 MOV X20, X0
	0x03BE9278 TBNZ X8, 0x0, 0x3BE9290

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+904]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51142656
	014 Add X0, X0, 2603
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+904], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int64 CallLongMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE927C ADRP X0, 0x575000
	0x03BE9280 LDR X0, [X0 + 0x450]
	0x03BE9284 BL 0x1C16CF4
	0x03BE9288 MOVZ W8, 0x1
	0x03BE928C STRB W8, [X22 + 0x4A0]
	0x03BE9290 CBZ X21, 0x3BE92A0
	0x03BE9294 LDR W3, [X21 + 0x18]
	0x03BE9298 ADD X2, X21, 0x20
	0x03BE929C B 0x3BE92A8
	0x03BE92A0 MOV X2, X31
	0x03BE92A4 MOV X3, X31
	0x03BE92A8 MOV X0, X20
	0x03BE92AC MOV X1, X19
	0x03BE92B0 LDP X20, X19, [X31 + 0x20]
	0x03BE92B4 LDP X22, X21, [X31 + 0x10]
	0x03BE92B8 LDR X30, [X31], #0x30
	0x03BE92BC B 0x3BE92C0
	0x03BE92C0 SUB X31, X31, 0x40
	0x03BE92C4 STP X3, X30, [X31 + 0x8]
	0x03BE92C8 STP X22, X21, [X31 + 0x20]
	0x03BE92CC STP X20, X19, [X31 + 0x30]
	0x03BE92D0 ADRP X21, 0x7FA000
	0x03BE92D4 STR X2, [X31]
	0x03BE92D8 ADRP X22, 0x575000
	0x03BE92DC LDRB W8, [X21 + 0x4A1]
	0x03BE92E0 LDR X22, [X22 + 0x458]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move W8, [X22+912]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x576000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+912], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Int64 CallLongMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE92E4 MOV X19, X1
	0x03BE92E8 MOV X20, X0
	0x03BE92EC TBNZ X8, 0x0, 0x3BE9304
	0x03BE92F0 ADRP X0, 0x575000
	0x03BE92F4 LDR X0, [X0 + 0x458]
	0x03BE92F8 BL 0x1C16CF4
	0x03BE92FC MOVZ W8, 0x1
	0x03BE9300 STRB W8, [X21 + 0x4A1]
	0x03BE9304 LDR X1, [X22]
	0x03BE9308 ADD X0, X31, 0x0
	0x03BE930C BL 0x25FF02C
	0x03BE9310 ADRP X22, 0x7FA000
	0x03BE9314 LDR X8, [X22 + 0x4A8]
	0x03BE9318 MOV X21, X0
	0x03BE931C CBNZ X8, 0x3BE9334
	0x03BE9320 ADRP X0, 0xFFFFFFFFFCF1B000
	0x03BE9324 ADD X0, X0, 0xAFF
	0x03BE9328 BL 0x1C16CB8
	0x03BE932C MOV X8, X0
	0x03BE9330 STR X0, [X22 + 0x4A8]
	0x03BE9334 MOV X0, X20
	0x03BE9338 MOV X1, X19
	0x03BE933C MOV X2, X21
	0x03BE9340 BLR X8
	0x03BE9344 LDP X20, X19, [X31 + 0x30]
	0x03BE9348 LDP X22, X21, [X31 + 0x20]
	0x03BE934C LDR X30, [X31 + 0x10]
	0x03BE9350 ADD X31, X31, 0x40
	0x03BE9354 RET
	0x03BE9358 STR X30, [X31 - 0x30]!
	0x03BE935C STP X22, X21, [X31 + 0x10]
	0x03BE9360 STP X20, X19, [X31 + 0x20]
	0x03BE9364 ADRP X22, 0x7FA000
	0x03BE9368 LDR X3, [X22 + 0x4A8]
	0x03BE936C MOV X19, X2
	0x03BE9370 MOV X20, X1
	0x03BE9374 MOV X21, X0
	0x03BE9378 CBNZ X3, 0x3BE9390

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FB000
	009 Move [X31], X2
	010 Move X22, 0x576000
	011 Move W8, [X21+913]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x576000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+913], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FB000
	028 Move X8, [X22+920]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51200000
	033 Add X0, X0, 784
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+920], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Int64 CallLongMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE937C ADRP X0, 0xFFFFFFFFFCF1B000
	0x03BE9380 ADD X0, X0, 0xAFF
	0x03BE9384 BL 0x1C16CB8
	0x03BE9388 MOV X3, X0
	0x03BE938C STR X0, [X22 + 0x4A8]
	0x03BE9390 MOV X0, X21
	0x03BE9394 MOV X1, X20
	0x03BE9398 MOV X2, X19
	0x03BE939C LDP X20, X19, [X31 + 0x20]
	0x03BE93A0 LDP X22, X21, [X31 + 0x10]
	0x03BE93A4 LDR X30, [X31], #0x30
	0x03BE93A8 BR X3
	0x03BE93AC STR X30, [X31 - 0x30]!
	0x03BE93B0 STP X22, X21, [X31 + 0x10]
	0x03BE93B4 STP X20, X19, [X31 + 0x20]
	0x03BE93B8 ADRP X22, 0x7FA000
	0x03BE93BC LDRB W8, [X22 + 0x4B0]
	0x03BE93C0 MOV X21, X2
	0x03BE93C4 MOV X19, X1
	0x03BE93C8 MOV X20, X0
	0x03BE93CC TBNZ X8, 0x0, 0x3BE93E4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+920]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51200000
	014 Add X0, X0, 784
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+920], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void CallVoidMethod(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE93D0 ADRP X0, 0x575000
	0x03BE93D4 LDR X0, [X0 + 0x450]
	0x03BE93D8 BL 0x1C16CF4
	0x03BE93DC MOVZ W8, 0x1
	0x03BE93E0 STRB W8, [X22 + 0x4B0]
	0x03BE93E4 CBZ X21, 0x3BE93F4
	0x03BE93E8 LDR W3, [X21 + 0x18]
	0x03BE93EC ADD X2, X21, 0x20
	0x03BE93F0 B 0x3BE93FC
	0x03BE93F4 MOV X2, X31
	0x03BE93F8 MOV X3, X31
	0x03BE93FC MOV X0, X20
	0x03BE9400 MOV X1, X19
	0x03BE9404 LDP X20, X19, [X31 + 0x20]
	0x03BE9408 LDP X22, X21, [X31 + 0x10]
	0x03BE940C LDR X30, [X31], #0x30
	0x03BE9410 B 0x3BE9414
	0x03BE9414 SUB X31, X31, 0x40
	0x03BE9418 STP X3, X30, [X31 + 0x8]
	0x03BE941C STP X22, X21, [X31 + 0x20]
	0x03BE9420 STP X20, X19, [X31 + 0x30]
	0x03BE9424 ADRP X21, 0x7FA000
	0x03BE9428 STR X2, [X31]
	0x03BE942C ADRP X22, 0x575000
	0x03BE9430 LDRB W8, [X21 + 0x4B1]
	0x03BE9434 LDR X22, [X22 + 0x458]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move W8, [X22+928]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x576000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+928], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Void CallVoidMethod(System.IntPtr obj, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE9438 MOV X19, X1
	0x03BE943C MOV X20, X0
	0x03BE9440 TBNZ X8, 0x0, 0x3BE9458
	0x03BE9444 ADRP X0, 0x575000
	0x03BE9448 LDR X0, [X0 + 0x458]
	0x03BE944C BL 0x1C16CF4
	0x03BE9450 MOVZ W8, 0x1
	0x03BE9454 STRB W8, [X21 + 0x4B1]
	0x03BE9458 LDR X1, [X22]
	0x03BE945C ADD X0, X31, 0x0
	0x03BE9460 BL 0x25FF02C
	0x03BE9464 ADRP X22, 0x7FA000
	0x03BE9468 LDR X8, [X22 + 0x4B8]
	0x03BE946C MOV X21, X0
	0x03BE9470 CBNZ X8, 0x3BE9488
	0x03BE9474 ADRP X0, 0xFFFFFFFFFCF39000
	0x03BE9478 ADD X0, X0, 0xA8B
	0x03BE947C BL 0x1C16CB8
	0x03BE9480 MOV X8, X0
	0x03BE9484 STR X0, [X22 + 0x4B8]
	0x03BE9488 MOV X0, X20
	0x03BE948C MOV X1, X19
	0x03BE9490 MOV X2, X21
	0x03BE9494 BLR X8
	0x03BE9498 LDP X20, X19, [X31 + 0x30]
	0x03BE949C LDP X22, X21, [X31 + 0x20]
	0x03BE94A0 LDR X30, [X31 + 0x10]
	0x03BE94A4 ADD X31, X31, 0x40
	0x03BE94A8 RET
	0x03BE94AC STR X30, [X31 - 0x30]!
	0x03BE94B0 STP X22, X21, [X31 + 0x10]
	0x03BE94B4 STP X20, X19, [X31 + 0x20]
	0x03BE94B8 ADRP X22, 0x7FA000
	0x03BE94BC LDR X3, [X22 + 0x4B8]
	0x03BE94C0 MOV X19, X2
	0x03BE94C4 MOV X20, X1
	0x03BE94C8 MOV X21, X0
	0x03BE94CC CBNZ X3, 0x3BE94E4

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FB000
	009 Move [X31], X2
	010 Move X22, 0x576000
	011 Move W8, [X21+929]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x576000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+929], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FB000
	028 Move X8, [X22+936]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51134464
	033 Add X0, X0, 1722
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+936], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return 

Method: System.Void CallVoidMethodUnsafe(System.IntPtr obj, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE94D0 ADRP X0, 0xFFFFFFFFFCF39000
	0x03BE94D4 ADD X0, X0, 0xA8B
	0x03BE94D8 BL 0x1C16CB8
	0x03BE94DC MOV X3, X0
	0x03BE94E0 STR X0, [X22 + 0x4B8]
	0x03BE94E4 MOV X0, X21
	0x03BE94E8 MOV X1, X20
	0x03BE94EC MOV X2, X19
	0x03BE94F0 LDP X20, X19, [X31 + 0x20]
	0x03BE94F4 LDP X22, X21, [X31 + 0x10]
	0x03BE94F8 LDR X30, [X31], #0x30
	0x03BE94FC BR X3
	0x03BE9500 STR X30, [X31 - 0x30]!
	0x03BE9504 STP X22, X21, [X31 + 0x10]
	0x03BE9508 STP X20, X19, [X31 + 0x20]
	0x03BE950C ADRP X22, 0x7FA000
	0x03BE9510 LDRB W8, [X22 + 0x4C0]
	0x03BE9514 MOV X21, X2
	0x03BE9518 MOV X19, X1
	0x03BE951C MOV X20, X0
	0x03BE9520 TBNZ X8, 0x0, 0x3BE9538

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+936]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51134464
	014 Add X0, X0, 1722
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+936], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.String GetStringField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE9524 ADRP X0, 0x575000
	0x03BE9528 LDR X0, [X0 + 0x450]
	0x03BE952C BL 0x1C16CF4
	0x03BE9530 MOVZ W8, 0x1
	0x03BE9534 STRB W8, [X22 + 0x4C0]
	0x03BE9538 CBZ X21, 0x3BE9548
	0x03BE953C LDR W3, [X21 + 0x18]
	0x03BE9540 ADD X2, X21, 0x20
	0x03BE9544 B 0x3BE9550
	0x03BE9548 MOV X2, X31
	0x03BE954C MOV X3, X31
	0x03BE9550 MOV X0, X20
	0x03BE9554 MOV X1, X19
	0x03BE9558 LDP X20, X19, [X31 + 0x20]
	0x03BE955C LDP X22, X21, [X31 + 0x10]
	0x03BE9560 LDR X30, [X31], #0x30
	0x03BE9564 B 0x3BE9568

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+944]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51216384
	012 Add X0, X0, 2466
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+944], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr GetObjectField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE9568 SUB X31, X31, 0x40
	0x03BE956C STP X3, X30, [X31 + 0x8]
	0x03BE9570 STP X22, X21, [X31 + 0x20]
	0x03BE9574 STP X20, X19, [X31 + 0x30]
	0x03BE9578 ADRP X21, 0x7FA000
	0x03BE957C STR X2, [X31]
	0x03BE9580 ADRP X22, 0x575000
	0x03BE9584 LDRB W8, [X21 + 0x4C1]
	0x03BE9588 LDR X22, [X22 + 0x458]
	0x03BE958C MOV X19, X1
	0x03BE9590 MOV X20, X0
	0x03BE9594 TBNZ X8, 0x0, 0x3BE95AC
	0x03BE9598 ADRP X0, 0x575000
	0x03BE959C LDR X0, [X0 + 0x458]
	0x03BE95A0 BL 0x1C16CF4
	0x03BE95A4 MOVZ W8, 0x1
	0x03BE95A8 STRB W8, [X21 + 0x4C1]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+952]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51175424
	012 Add X0, X0, 1163
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+952], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean GetBooleanField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE95AC LDR X1, [X22]
	0x03BE95B0 ADD X0, X31, 0x0
	0x03BE95B4 BL 0x25FF02C
	0x03BE95B8 ADRP X22, 0x7FA000
	0x03BE95BC LDR X8, [X22 + 0x4C8]
	0x03BE95C0 MOV X21, X0
	0x03BE95C4 CBNZ X8, 0x3BE95DC
	0x03BE95C8 ADRP X0, 0xFFFFFFFFFCF1B000
	0x03BE95CC ADD X0, X0, 0xB64
	0x03BE95D0 BL 0x1C16CB8
	0x03BE95D4 MOV X8, X0
	0x03BE95D8 STR X0, [X22 + 0x4C8]
	0x03BE95DC MOV X0, X20
	0x03BE95E0 MOV X1, X19
	0x03BE95E4 MOV X2, X21
	0x03BE95E8 BLR X8
	0x03BE95EC LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+960]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51150848
	012 Add X0, X0, 1230
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+960], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Byte GetByteField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE95F0 LDP X22, X21, [X31 + 0x20]
	0x03BE95F4 LDR X30, [X31 + 0x10]
	0x03BE95F8 ADD X31, X31, 0x40
	0x03BE95FC RET
	0x03BE9600 STR X30, [X31 - 0x30]!
	0x03BE9604 STP X22, X21, [X31 + 0x10]
	0x03BE9608 STP X20, X19, [X31 + 0x20]
	0x03BE960C ADRP X22, 0x7FA000
	0x03BE9610 LDR X3, [X22 + 0x4C8]
	0x03BE9614 MOV X19, X2
	0x03BE9618 MOV X20, X1
	0x03BE961C MOV X21, X0
	0x03BE9620 CBNZ X3, 0x3BE9638
	0x03BE9624 ADRP X0, 0xFFFFFFFFFCF1B000
	0x03BE9628 ADD X0, X0, 0xB64
	0x03BE962C BL 0x1C16CB8
	0x03BE9630 MOV X3, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+968]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51240960
	012 Add X0, X0, 3078
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+968], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.SByte GetSByteField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE9634 STR X0, [X22 + 0x4C8]
	0x03BE9638 MOV X0, X21
	0x03BE963C MOV X1, X20
	0x03BE9640 MOV X2, X19
	0x03BE9644 LDP X20, X19, [X31 + 0x20]
	0x03BE9648 LDP X22, X21, [X31 + 0x10]
	0x03BE964C LDR X30, [X31], #0x30
	0x03BE9650 BR X3
	0x03BE9654 STR X30, [X31 - 0x30]!
	0x03BE9658 STP X22, X21, [X31 + 0x10]
	0x03BE965C STP X20, X19, [X31 + 0x20]
	0x03BE9660 ADRP X22, 0x7FA000
	0x03BE9664 LDRB W8, [X22 + 0x4D0]
	0x03BE9668 MOV X21, X2
	0x03BE966C MOV X19, X1
	0x03BE9670 MOV X20, X0
	0x03BE9674 TBNZ X8, 0x0, 0x3BE968C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+968]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51240960
	012 Add X0, X0, 3078
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+968], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Char GetCharField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE9678 ADRP X0, 0x575000
	0x03BE967C LDR X0, [X0 + 0x450]
	0x03BE9680 BL 0x1C16CF4
	0x03BE9684 MOVZ W8, 0x1
	0x03BE9688 STRB W8, [X22 + 0x4D0]
	0x03BE968C CBZ X21, 0x3BE969C
	0x03BE9690 LDR W3, [X21 + 0x18]
	0x03BE9694 ADD X2, X21, 0x20
	0x03BE9698 B 0x3BE96A4
	0x03BE969C MOV X2, X31
	0x03BE96A0 MOV X3, X31
	0x03BE96A4 MOV X0, X20
	0x03BE96A8 MOV X1, X19
	0x03BE96AC LDP X20, X19, [X31 + 0x20]
	0x03BE96B0 LDP X22, X21, [X31 + 0x10]
	0x03BE96B4 LDR X30, [X31], #0x30
	0x03BE96B8 B 0x3BE96BC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+976]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51109888
	012 Add X0, X0, 616
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+976], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int16 GetShortField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE96BC SUB X31, X31, 0x40
	0x03BE96C0 STP X3, X30, [X31 + 0x8]
	0x03BE96C4 STP X22, X21, [X31 + 0x20]
	0x03BE96C8 STP X20, X19, [X31 + 0x30]
	0x03BE96CC ADRP X21, 0x7FA000
	0x03BE96D0 STR X2, [X31]
	0x03BE96D4 ADRP X22, 0x575000
	0x03BE96D8 LDRB W8, [X21 + 0x4D1]
	0x03BE96DC LDR X22, [X22 + 0x458]
	0x03BE96E0 MOV X19, X1
	0x03BE96E4 MOV X20, X0
	0x03BE96E8 TBNZ X8, 0x0, 0x3BE9700
	0x03BE96EC ADRP X0, 0x575000
	0x03BE96F0 LDR X0, [X0 + 0x458]
	0x03BE96F4 BL 0x1C16CF4
	0x03BE96F8 MOVZ W8, 0x1
	0x03BE96FC STRB W8, [X21 + 0x4D1]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+984]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51290112
	012 Add X0, X0, 1848
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+984], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 GetIntField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE9700 LDR X1, [X22]
	0x03BE9704 ADD X0, X31, 0x0
	0x03BE9708 BL 0x25FF02C
	0x03BE970C ADRP X22, 0x7FA000
	0x03BE9710 LDR X8, [X22 + 0x4D8]
	0x03BE9714 MOV X21, X0
	0x03BE9718 CBNZ X8, 0x3BE9730
	0x03BE971C ADRP X0, 0xFFFFFFFFFCF0F000
	0x03BE9720 ADD X0, X0, 0xB41
	0x03BE9724 BL 0x1C16CB8
	0x03BE9728 MOV X8, X0
	0x03BE972C STR X0, [X22 + 0x4D8]
	0x03BE9730 MOV X0, X20
	0x03BE9734 MOV X1, X19
	0x03BE9738 MOV X2, X21
	0x03BE973C BLR X8
	0x03BE9740 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+992]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51249152
	012 Add X0, X0, 2398
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+992], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int64 GetLongField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE9744 LDP X22, X21, [X31 + 0x20]
	0x03BE9748 LDR X30, [X31 + 0x10]
	0x03BE974C ADD X31, X31, 0x40
	0x03BE9750 RET
	0x03BE9754 STR X30, [X31 - 0x30]!
	0x03BE9758 STP X22, X21, [X31 + 0x10]
	0x03BE975C STP X20, X19, [X31 + 0x20]
	0x03BE9760 ADRP X22, 0x7FA000
	0x03BE9764 LDR X3, [X22 + 0x4D8]
	0x03BE9768 MOV X19, X2
	0x03BE976C MOV X20, X1
	0x03BE9770 MOV X21, X0
	0x03BE9774 CBNZ X3, 0x3BE978C
	0x03BE9778 ADRP X0, 0xFFFFFFFFFCF0F000
	0x03BE977C ADD X0, X0, 0xB41
	0x03BE9780 BL 0x1C16CB8
	0x03BE9784 MOV X3, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+1000]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51331072
	012 Add X0, X0, 3231
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1000], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Single GetFloatField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE9788 STR X0, [X22 + 0x4D8]
	0x03BE978C MOV X0, X21
	0x03BE9790 MOV X1, X20
	0x03BE9794 MOV X2, X19
	0x03BE9798 LDP X20, X19, [X31 + 0x20]
	0x03BE979C LDP X22, X21, [X31 + 0x10]
	0x03BE97A0 LDR X30, [X31], #0x30
	0x03BE97A4 BR X3
	0x03BE97A8 STR X30, [X31 - 0x30]!
	0x03BE97AC STP X22, X21, [X31 + 0x10]
	0x03BE97B0 STP X20, X19, [X31 + 0x20]
	0x03BE97B4 ADRP X22, 0x7FA000
	0x03BE97B8 LDRB W8, [X22 + 0x4E0]
	0x03BE97BC MOV X21, X2
	0x03BE97C0 MOV X19, X1
	0x03BE97C4 MOV X20, X0
	0x03BE97C8 TBNZ X8, 0x0, 0x3BE97E0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+1008]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51232768
	012 Add X0, X0, 1893
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1008], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Double GetDoubleField(System.IntPtr obj, System.IntPtr fieldID)

Disassembly:
	0x03BE97CC ADRP X0, 0x575000
	0x03BE97D0 LDR X0, [X0 + 0x450]
	0x03BE97D4 BL 0x1C16CF4
	0x03BE97D8 MOVZ W8, 0x1
	0x03BE97DC STRB W8, [X22 + 0x4E0]
	0x03BE97E0 CBZ X21, 0x3BE97F0
	0x03BE97E4 LDR W3, [X21 + 0x18]
	0x03BE97E8 ADD X2, X21, 0x20
	0x03BE97EC B 0x3BE97F8
	0x03BE97F0 MOV X2, X31
	0x03BE97F4 MOV X3, X31
	0x03BE97F8 MOV X0, X20
	0x03BE97FC MOV X1, X19
	0x03BE9800 LDP X20, X19, [X31 + 0x20]
	0x03BE9804 LDP X22, X21, [X31 + 0x10]
	0x03BE9808 LDR X30, [X31], #0x30
	0x03BE980C B 0x3BE9810

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FB000
	006 Move X2, [X21+1016]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51314688
	012 Add X0, X0, 2813
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1016], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetStringField(System.IntPtr obj, System.IntPtr fieldID, System.String val)

Disassembly:
	0x03BE9810 SUB X31, X31, 0x40
	0x03BE9814 STP X3, X30, [X31 + 0x8]
	0x03BE9818 STP X22, X21, [X31 + 0x20]
	0x03BE981C STP X20, X19, [X31 + 0x30]
	0x03BE9820 ADRP X21, 0x7FA000
	0x03BE9824 STR X2, [X31]
	0x03BE9828 ADRP X22, 0x575000
	0x03BE982C LDRB W8, [X21 + 0x4E1]
	0x03BE9830 LDR X22, [X22 + 0x458]
	0x03BE9834 MOV X19, X1
	0x03BE9838 MOV X20, X0
	0x03BE983C TBNZ X8, 0x0, 0x3BE9854
	0x03BE9840 ADRP X0, 0x575000
	0x03BE9844 LDR X0, [X0 + 0x458]
	0x03BE9848 BL 0x1C16CF4
	0x03BE984C MOVZ W8, 0x1
	0x03BE9850 STRB W8, [X21 + 0x4E1]
	0x03BE9854 LDR X1, [X22]
	0x03BE9858 ADD X0, X31, 0x0
	0x03BE985C BL 0x25FF02C
	0x03BE9860 ADRP X22, 0x7FA000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1024]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51347456
	014 Add X0, X0, 2164
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1024], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetObjectField(System.IntPtr obj, System.IntPtr fieldID, System.IntPtr val)

Disassembly:
	0x03BE9864 LDR X8, [X22 + 0x4E8]
	0x03BE9868 MOV X21, X0
	0x03BE986C CBNZ X8, 0x3BE9884
	0x03BE9870 ADRP X0, 0xFFFFFFFFFCF21000
	0x03BE9874 ADD X0, X0, 0xC9D
	0x03BE9878 BL 0x1C16CB8
	0x03BE987C MOV X8, X0
	0x03BE9880 STR X0, [X22 + 0x4E8]
	0x03BE9884 MOV X0, X20
	0x03BE9888 MOV X1, X19
	0x03BE988C MOV X2, X21
	0x03BE9890 BLR X8
	0x03BE9894 LDP X20, X19, [X31 + 0x30]
	0x03BE9898 LDP X22, X21, [X31 + 0x20]
	0x03BE989C LDR X30, [X31 + 0x10]
	0x03BE98A0 ADD X31, X31, 0x40
	0x03BE98A4 RET
	0x03BE98A8 STR X30, [X31 - 0x30]!
	0x03BE98AC STP X22, X21, [X31 + 0x10]
	0x03BE98B0 STP X20, X19, [X31 + 0x20]
	0x03BE98B4 ADRP X22, 0x7FA000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1032]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51195904
	014 Add X0, X0, 4048
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1032], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetBooleanField(System.IntPtr obj, System.IntPtr fieldID, System.Boolean val)

Disassembly:
	0x03BE98B8 LDR X3, [X22 + 0x4E8]
	0x03BE98BC MOV X19, X2
	0x03BE98C0 MOV X20, X1
	0x03BE98C4 MOV X21, X0
	0x03BE98C8 CBNZ X3, 0x3BE98E0
	0x03BE98CC ADRP X0, 0xFFFFFFFFFCF21000
	0x03BE98D0 ADD X0, X0, 0xC9D
	0x03BE98D4 BL 0x1C16CB8
	0x03BE98D8 MOV X3, X0
	0x03BE98DC STR X0, [X22 + 0x4E8]
	0x03BE98E0 MOV X0, X21
	0x03BE98E4 MOV X1, X20
	0x03BE98E8 MOV X2, X19
	0x03BE98EC LDP X20, X19, [X31 + 0x20]
	0x03BE98F0 LDP X22, X21, [X31 + 0x10]
	0x03BE98F4 LDR X30, [X31], #0x30
	0x03BE98F8 BR X3
	0x03BE98FC STR X30, [X31 - 0x30]!
	0x03BE9900 STP X22, X21, [X31 + 0x10]
	0x03BE9904 STP X20, X19, [X31 + 0x20]
	0x03BE9908 ADRP X22, 0x7FA000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1040]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51240960
	014 Add X0, X0, 3145
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1040], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move X1, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetByteField(System.IntPtr obj, System.IntPtr fieldID, System.Byte val)

Disassembly:
	0x03BE990C LDRB W8, [X22 + 0x4F0]
	0x03BE9910 MOV X21, X2
	0x03BE9914 MOV X19, X1
	0x03BE9918 MOV X20, X0
	0x03BE991C TBNZ X8, 0x0, 0x3BE9934
	0x03BE9920 ADRP X0, 0x575000
	0x03BE9924 LDR X0, [X0 + 0x450]
	0x03BE9928 BL 0x1C16CF4
	0x03BE992C MOVZ W8, 0x1
	0x03BE9930 STRB W8, [X22 + 0x4F0]
	0x03BE9934 CBZ X21, 0x3BE9944
	0x03BE9938 LDR W3, [X21 + 0x18]
	0x03BE993C ADD X2, X21, 0x20
	0x03BE9940 B 0x3BE994C
	0x03BE9944 MOV X2, X31
	0x03BE9948 MOV X3, X31
	0x03BE994C MOV X0, X20
	0x03BE9950 MOV X1, X19
	0x03BE9954 LDP X20, X19, [X31 + 0x20]
	0x03BE9958 LDP X22, X21, [X31 + 0x10]
	0x03BE995C LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1048]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51159040
	014 Add X0, X0, 985
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1048], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetSByteField(System.IntPtr obj, System.IntPtr fieldID, System.SByte val)

Disassembly:
	0x03BE9960 B 0x3BE9964
	0x03BE9964 SUB X31, X31, 0x40
	0x03BE9968 STP X3, X30, [X31 + 0x8]
	0x03BE996C STP X22, X21, [X31 + 0x20]
	0x03BE9970 STP X20, X19, [X31 + 0x30]
	0x03BE9974 ADRP X21, 0x7FA000
	0x03BE9978 STR X2, [X31]
	0x03BE997C ADRP X22, 0x575000
	0x03BE9980 LDRB W8, [X21 + 0x4F1]
	0x03BE9984 LDR X22, [X22 + 0x458]
	0x03BE9988 MOV X19, X1
	0x03BE998C MOV X20, X0
	0x03BE9990 TBNZ X8, 0x0, 0x3BE99A8
	0x03BE9994 ADRP X0, 0x575000
	0x03BE9998 LDR X0, [X0 + 0x458]
	0x03BE999C BL 0x1C16CF4
	0x03BE99A0 MOVZ W8, 0x1
	0x03BE99A4 STRB W8, [X21 + 0x4F1]
	0x03BE99A8 LDR X1, [X22]
	0x03BE99AC ADD X0, X31, 0x0
	0x03BE99B0 BL 0x25FF02C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1048]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51159040
	014 Add X0, X0, 985
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1048], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetCharField(System.IntPtr obj, System.IntPtr fieldID, System.Char val)

Disassembly:
	0x03BE99B4 ADRP X22, 0x7FA000
	0x03BE99B8 LDR X8, [X22 + 0x4F8]
	0x03BE99BC MOV X21, X0
	0x03BE99C0 CBNZ X8, 0x3BE99D8
	0x03BE99C4 ADRP X0, 0xFFFFFFFFFCF19000
	0x03BE99C8 ADD X0, X0, 0x895
	0x03BE99CC BL 0x1C16CB8
	0x03BE99D0 MOV X8, X0
	0x03BE99D4 STR X0, [X22 + 0x4F8]
	0x03BE99D8 MOV X0, X20
	0x03BE99DC MOV X1, X19
	0x03BE99E0 MOV X2, X21
	0x03BE99E4 BLR X8
	0x03BE99E8 LDP X20, X19, [X31 + 0x30]
	0x03BE99EC LDP X22, X21, [X31 + 0x20]
	0x03BE99F0 LDR X30, [X31 + 0x10]
	0x03BE99F4 ADD X31, X31, 0x40
	0x03BE99F8 RET
	0x03BE99FC STR X30, [X31 - 0x30]!
	0x03BE9A00 STP X22, X21, [X31 + 0x10]
	0x03BE9A04 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1056]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51232768
	014 Add X0, X0, 1960
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1056], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetShortField(System.IntPtr obj, System.IntPtr fieldID, System.Int16 val)

Disassembly:
	0x03BE9A08 ADRP X22, 0x7FA000
	0x03BE9A0C LDR X3, [X22 + 0x4F8]
	0x03BE9A10 MOV X19, X2
	0x03BE9A14 MOV X20, X1
	0x03BE9A18 MOV X21, X0
	0x03BE9A1C CBNZ X3, 0x3BE9A34
	0x03BE9A20 ADRP X0, 0xFFFFFFFFFCF19000
	0x03BE9A24 ADD X0, X0, 0x895
	0x03BE9A28 BL 0x1C16CB8
	0x03BE9A2C MOV X3, X0
	0x03BE9A30 STR X0, [X22 + 0x4F8]
	0x03BE9A34 MOV X0, X21
	0x03BE9A38 MOV X1, X20
	0x03BE9A3C MOV X2, X19
	0x03BE9A40 LDP X20, X19, [X31 + 0x20]
	0x03BE9A44 LDP X22, X21, [X31 + 0x10]
	0x03BE9A48 LDR X30, [X31], #0x30
	0x03BE9A4C BR X3
	0x03BE9A50 STP X30, X21, [X31 - 0x20]!
	0x03BE9A54 STP X20, X19, [X31 + 0x10]
	0x03BE9A58 ADRP X21, 0x7FA000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1064]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51298304
	014 Add X0, X0, 2873
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1064], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetIntField(System.IntPtr obj, System.IntPtr fieldID, System.Int32 val)

Disassembly:
	0x03BE9A5C LDR X2, [X21 + 0x500]
	0x03BE9A60 MOV X19, X1
	0x03BE9A64 MOV X20, X0
	0x03BE9A68 CBNZ X2, 0x3BE9A80
	0x03BE9A6C ADRP X0, 0xFFFFFFFFFCF27000
	0x03BE9A70 ADD X0, X0, 0x9E6
	0x03BE9A74 BL 0x1C16CB8
	0x03BE9A78 MOV X2, X0
	0x03BE9A7C STR X0, [X21 + 0x500]
	0x03BE9A80 MOV X0, X20
	0x03BE9A84 MOV X1, X19
	0x03BE9A88 LDP X20, X19, [X31 + 0x10]
	0x03BE9A8C LDP X30, X21, [X31], #0x20
	0x03BE9A90 BR X2
	0x03BE9A94 STP X30, X21, [X31 - 0x20]!
	0x03BE9A98 STP X20, X19, [X31 + 0x10]
	0x03BE9A9C ADRP X21, 0x7FA000
	0x03BE9AA0 LDR X2, [X21 + 0x508]
	0x03BE9AA4 MOV X19, X1
	0x03BE9AA8 MOV X20, X0
	0x03BE9AAC CBNZ X2, 0x3BE9AC4

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1072]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51232768
	014 Add X0, X0, 2038
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1072], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetLongField(System.IntPtr obj, System.IntPtr fieldID, System.Int64 val)

Disassembly:
	0x03BE9AB0 ADRP X0, 0xFFFFFFFFFCF39000
	0x03BE9AB4 ADD X0, X0, 0xAEF
	0x03BE9AB8 BL 0x1C16CB8
	0x03BE9ABC MOV X2, X0
	0x03BE9AC0 STR X0, [X21 + 0x508]
	0x03BE9AC4 MOV X0, X20
	0x03BE9AC8 MOV X1, X19
	0x03BE9ACC LDP X20, X19, [X31 + 0x10]
	0x03BE9AD0 LDP X30, X21, [X31], #0x20
	0x03BE9AD4 BR X2
	0x03BE9AD8 STP X30, X21, [X31 - 0x20]!
	0x03BE9ADC STP X20, X19, [X31 + 0x10]
	0x03BE9AE0 ADRP X21, 0x7FA000
	0x03BE9AE4 LDR X2, [X21 + 0x510]
	0x03BE9AE8 MOV X19, X1
	0x03BE9AEC MOV X20, X0
	0x03BE9AF0 CBNZ X2, 0x3BE9B08
	0x03BE9AF4 ADRP X0, 0xFFFFFFFFFCF2F000
	0x03BE9AF8 ADD X0, X0, 0x21D
	0x03BE9AFC BL 0x1C16CB8
	0x03BE9B00 MOV X2, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1080]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51208192
	014 Add X0, X0, 1730
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1080], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetFloatField(System.IntPtr obj, System.IntPtr fieldID, System.Single val)

Disassembly:
	0x03BE9B04 STR X0, [X21 + 0x510]
	0x03BE9B08 MOV X0, X20
	0x03BE9B0C MOV X1, X19
	0x03BE9B10 LDP X20, X19, [X31 + 0x10]
	0x03BE9B14 LDP X30, X21, [X31], #0x20
	0x03BE9B18 BR X2
	0x03BE9B1C STP X30, X21, [X31 - 0x20]!
	0x03BE9B20 STP X20, X19, [X31 + 0x10]
	0x03BE9B24 ADRP X21, 0x7FA000
	0x03BE9B28 LDR X2, [X21 + 0x518]
	0x03BE9B2C MOV X19, X1
	0x03BE9B30 MOV X20, X0
	0x03BE9B34 CBNZ X2, 0x3BE9B4C
	0x03BE9B38 ADRP X0, 0xFFFFFFFFFCF1F000
	0x03BE9B3C ADD X0, X0, 0x99F
	0x03BE9B40 BL 0x1C16CB8
	0x03BE9B44 MOV X2, X0
	0x03BE9B48 STR X0, [X21 + 0x518]
	0x03BE9B4C MOV X0, X20
	0x03BE9B50 MOV X1, X19
	0x03BE9B54 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7FB000
	007 Move X2, [X21+1088]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51281920
	014 Add X0, X0, 2192
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+1088], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.Void SetDoubleField(System.IntPtr obj, System.IntPtr fieldID, System.Double val)

Disassembly:
	0x03BE9B58 LDP X30, X21, [X31], #0x20
	0x03BE9B5C BR X2
	0x03BE9B60 STP X30, X21, [X31 - 0x20]!
	0x03BE9B64 STP X20, X19, [X31 + 0x10]
	0x03BE9B68 ADRP X21, 0x7FA000
	0x03BE9B6C LDR X2, [X21 + 0x518]
	0x03BE9B70 MOV X19, X1
	0x03BE9B74 MOV X20, X0
	0x03BE9B78 CBNZ X2, 0x3BE9B90
	0x03BE9B7C ADRP X0, 0xFFFFFFFFFCF1F000
	0x03BE9B80 ADD X0, X0, 0x99F
	0x03BE9B84 BL 0x1C16CB8
	0x03BE9B88 MOV X2, X0
	0x03BE9B8C STR X0, [X21 + 0x518]
	0x03BE9B90 MOV X0, X20
	0x03BE9B94 MOV X1, X19
	0x03BE9B98 LDP X20, X19, [X31 + 0x10]
	0x03BE9B9C LDP X30, X21, [X31], #0x20
	0x03BE9BA0 BR X2
	0x03BE9BA4 STP X30, X21, [X31 - 0x20]!
	0x03BE9BA8 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7FB000
	007 Move X2, [X21+1096]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51126272
	014 Add X0, X0, 2280
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+1096], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.String CallStaticStringMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE9BAC ADRP X21, 0x7FA000
	0x03BE9BB0 LDR X2, [X21 + 0x520]
	0x03BE9BB4 MOV X19, X1
	0x03BE9BB8 MOV X20, X0
	0x03BE9BBC CBNZ X2, 0x3BE9BD4
	0x03BE9BC0 ADRP X0, 0xFFFFFFFFFCF11000
	0x03BE9BC4 ADD X0, X0, 0xCB0
	0x03BE9BC8 BL 0x1C16CB8
	0x03BE9BCC MOV X2, X0
	0x03BE9BD0 STR X0, [X21 + 0x520]
	0x03BE9BD4 MOV X0, X20
	0x03BE9BD8 MOV X1, X19
	0x03BE9BDC LDP X20, X19, [X31 + 0x10]
	0x03BE9BE0 LDP X30, X21, [X31], #0x20
	0x03BE9BE4 BR X2
	0x03BE9BE8 STP X30, X21, [X31 - 0x20]!
	0x03BE9BEC STP X20, X19, [X31 + 0x10]
	0x03BE9BF0 ADRP X21, 0x7FA000
	0x03BE9BF4 LDR X2, [X21 + 0x528]
	0x03BE9BF8 MOV X19, X1
	0x03BE9BFC MOV X20, X0
	0x03BE9C00 CBNZ X2, 0x3BE9C18
	0x03BE9C04 ADRP X0, 0xFFFFFFFFFCF17000
	0x03BE9C08 ADD X0, X0, 0x8E1
	0x03BE9C0C BL 0x1C16CB8
	0x03BE9C10 MOV X2, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move W8, [X22+1104]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x576000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1104], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.String CallStaticStringMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE9C14 STR X0, [X21 + 0x528]
	0x03BE9C18 MOV X0, X20
	0x03BE9C1C MOV X1, X19
	0x03BE9C20 LDP X20, X19, [X31 + 0x10]
	0x03BE9C24 LDP X30, X21, [X31], #0x20
	0x03BE9C28 BR X2
	0x03BE9C2C STP X30, X21, [X31 - 0x20]!
	0x03BE9C30 STP X20, X19, [X31 + 0x10]
	0x03BE9C34 ADRP X21, 0x7FA000
	0x03BE9C38 LDR X2, [X21 + 0x530]
	0x03BE9C3C MOV X19, X1
	0x03BE9C40 MOV X20, X0
	0x03BE9C44 CBNZ X2, 0x3BE9C5C
	0x03BE9C48 ADRP X0, 0xFFFFFFFFFCF29000
	0x03BE9C4C ADD X0, X0, 0x774
	0x03BE9C50 BL 0x1C16CB8
	0x03BE9C54 MOV X2, X0
	0x03BE9C58 STR X0, [X21 + 0x530]
	0x03BE9C5C MOV X0, X20
	0x03BE9C60 MOV X1, X19
	0x03BE9C64 LDP X20, X19, [X31 + 0x10]
	0x03BE9C68 LDP X30, X21, [X31], #0x20
	0x03BE9C6C BR X2
	0x03BE9C70 STP X30, X21, [X31 - 0x20]!
	0x03BE9C74 STP X20, X19, [X31 + 0x10]
	0x03BE9C78 ADRP X21, 0x7FA000
	0x03BE9C7C LDR X2, [X21 + 0x538]
	0x03BE9C80 MOV X19, X1
	0x03BE9C84 MOV X20, X0
	0x03BE9C88 CBNZ X2, 0x3BE9CA0
	0x03BE9C8C ADRP X0, 0xFFFFFFFFFCF27000
	0x03BE9C90 ADD X0, X0, 0xA30
	0x03BE9C94 BL 0x1C16CB8
	0x03BE9C98 MOV X2, X0
	0x03BE9C9C STR X0, [X21 + 0x538]
	0x03BE9CA0 MOV X0, X20
	0x03BE9CA4 MOV X1, X19
	0x03BE9CA8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FB000
	009 Move [X31], X2
	010 Move X22, 0x576000
	011 Move W8, [X21+1105]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x576000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1105], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FB000
	028 Move X8, [X22+1112]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51298304
	033 Add X0, X0, 2953
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1112], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.String CallStaticStringMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE9CAC LDP X30, X21, [X31], #0x20
	0x03BE9CB0 BR X2
	0x03BE9CB4 STP X30, X21, [X31 - 0x20]!
	0x03BE9CB8 STP X20, X19, [X31 + 0x10]
	0x03BE9CBC ADRP X21, 0x7FA000
	0x03BE9CC0 LDR X2, [X21 + 0x540]
	0x03BE9CC4 MOV X19, X1
	0x03BE9CC8 MOV X20, X0
	0x03BE9CCC CBNZ X2, 0x3BE9CE4
	0x03BE9CD0 ADRP X0, 0xFFFFFFFFFCF13000
	0x03BE9CD4 ADD X0, X0, 0xBEF
	0x03BE9CD8 BL 0x1C16CB8
	0x03BE9CDC MOV X2, X0
	0x03BE9CE0 STR X0, [X21 + 0x540]
	0x03BE9CE4 MOV X0, X20
	0x03BE9CE8 MOV X1, X19
	0x03BE9CEC LDP X20, X19, [X31 + 0x10]
	0x03BE9CF0 LDP X30, X21, [X31], #0x20
	0x03BE9CF4 BR X2
	0x03BE9CF8 STP X30, X21, [X31 - 0x20]!
	0x03BE9CFC STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1112]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51298304
	014 Add X0, X0, 2953
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1112], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr CallStaticObjectMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE9D00 ADRP X21, 0x7FA000
	0x03BE9D04 LDR X2, [X21 + 0x548]
	0x03BE9D08 MOV X19, X1
	0x03BE9D0C MOV X20, X0
	0x03BE9D10 CBNZ X2, 0x3BE9D28
	0x03BE9D14 ADRP X0, 0xFFFFFFFFFCF2F000
	0x03BE9D18 ADD X0, X0, 0x268
	0x03BE9D1C BL 0x1C16CB8
	0x03BE9D20 MOV X2, X0
	0x03BE9D24 STR X0, [X21 + 0x548]
	0x03BE9D28 MOV X0, X20
	0x03BE9D2C MOV X1, X19
	0x03BE9D30 LDP X20, X19, [X31 + 0x10]
	0x03BE9D34 LDP X30, X21, [X31], #0x20
	0x03BE9D38 BR X2
	0x03BE9D3C STR X30, [X31 - 0x30]!
	0x03BE9D40 STP X22, X21, [X31 + 0x10]
	0x03BE9D44 STP X20, X19, [X31 + 0x20]
	0x03BE9D48 ADRP X22, 0x7FA000
	0x03BE9D4C LDR X3, [X22 + 0x550]
	0x03BE9D50 MOV X19, X2
	0x03BE9D54 MOV X20, X1
	0x03BE9D58 MOV X21, X0
	0x03BE9D5C CBNZ X3, 0x3BE9D74
	0x03BE9D60 ADRP X0, 0xFFFFFFFFFCF43000
	0x03BE9D64 ADD X0, X0, 0x120

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move W8, [X22+1120]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x576000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1120], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.IntPtr CallStaticObjectMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE9D68 BL 0x1C16CB8
	0x03BE9D6C MOV X3, X0
	0x03BE9D70 STR X0, [X22 + 0x550]
	0x03BE9D74 MOV X0, X21
	0x03BE9D78 MOV X1, X20
	0x03BE9D7C MOV X2, X19
	0x03BE9D80 LDP X20, X19, [X31 + 0x20]
	0x03BE9D84 LDP X22, X21, [X31 + 0x10]
	0x03BE9D88 LDR X30, [X31], #0x30
	0x03BE9D8C BR X3
	0x03BE9D90 STR X30, [X31 - 0x30]!
	0x03BE9D94 STP X22, X21, [X31 + 0x10]
	0x03BE9D98 STP X20, X19, [X31 + 0x20]
	0x03BE9D9C ADRP X22, 0x7FA000
	0x03BE9DA0 LDR X3, [X22 + 0x558]
	0x03BE9DA4 MOV X19, X2
	0x03BE9DA8 MOV X20, X1
	0x03BE9DAC MOV X21, X0
	0x03BE9DB0 CBNZ X3, 0x3BE9DC8
	0x03BE9DB4 ADRP X0, 0xFFFFFFFFFCF19000
	0x03BE9DB8 ADD X0, X0, 0x8F9
	0x03BE9DBC BL 0x1C16CB8
	0x03BE9DC0 MOV X3, X0
	0x03BE9DC4 STR X0, [X22 + 0x558]
	0x03BE9DC8 MOV X0, X21
	0x03BE9DCC MOV X1, X20
	0x03BE9DD0 MOV X2, X19
	0x03BE9DD4 LDP X20, X19, [X31 + 0x20]
	0x03BE9DD8 LDP X22, X21, [X31 + 0x10]
	0x03BE9DDC LDR X30, [X31], #0x30
	0x03BE9DE0 BR X3
	0x03BE9DE4 STR X30, [X31 - 0x30]!
	0x03BE9DE8 STP X22, X21, [X31 + 0x10]
	0x03BE9DEC STP X20, X19, [X31 + 0x20]
	0x03BE9DF0 ADRP X22, 0x7FA000
	0x03BE9DF4 LDR X3, [X22 + 0x560]
	0x03BE9DF8 MOV W20, W2
	0x03BE9DFC MOV X19, X1

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FB000
	009 Move [X31], X2
	010 Move X22, 0x576000
	011 Move W8, [X21+1121]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x576000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1121], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FB000
	028 Move X8, [X22+1128]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51322880
	033 Add X0, X0, 2945
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1128], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.IntPtr CallStaticObjectMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE9E00 MOV X21, X0
	0x03BE9E04 CBNZ X3, 0x3BE9E1C
	0x03BE9E08 ADRP X0, 0xFFFFFFFFFCF13000
	0x03BE9E0C ADD X0, X0, 0xC38
	0x03BE9E10 BL 0x1C16CB8
	0x03BE9E14 MOV X3, X0
	0x03BE9E18 STR X0, [X22 + 0x560]
	0x03BE9E1C AND W2, W20, 0x1
	0x03BE9E20 MOV X0, X21
	0x03BE9E24 MOV X1, X19
	0x03BE9E28 LDP X20, X19, [X31 + 0x20]
	0x03BE9E2C LDP X22, X21, [X31 + 0x10]
	0x03BE9E30 LDR X30, [X31], #0x30
	0x03BE9E34 BR X3
	0x03BE9E38 STR X30, [X31 - 0x30]!
	0x03BE9E3C STP X22, X21, [X31 + 0x10]
	0x03BE9E40 STP X20, X19, [X31 + 0x20]
	0x03BE9E44 ADRP X22, 0x7FA000
	0x03BE9E48 LDR X3, [X22 + 0x568]
	0x03BE9E4C MOV W19, W2
	0x03BE9E50 MOV X20, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1128]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51322880
	014 Add X0, X0, 2945
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1128], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int32 CallStaticIntMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE9E54 MOV X21, X0
	0x03BE9E58 CBNZ X3, 0x3BE9E70
	0x03BE9E5C ADRP X0, 0xFFFFFFFFFCF25000
	0x03BE9E60 ADD X0, X0, 0x964
	0x03BE9E64 BL 0x1C16CB8
	0x03BE9E68 MOV X3, X0
	0x03BE9E6C STR X0, [X22 + 0x568]
	0x03BE9E70 MOV X0, X21
	0x03BE9E74 MOV X1, X20
	0x03BE9E78 MOV W2, W19
	0x03BE9E7C LDP X20, X19, [X31 + 0x20]
	0x03BE9E80 LDP X22, X21, [X31 + 0x10]
	0x03BE9E84 LDR X30, [X31], #0x30
	0x03BE9E88 BR X3
	0x03BE9E8C STR X30, [X31 - 0x30]!
	0x03BE9E90 STP X22, X21, [X31 + 0x10]
	0x03BE9E94 STP X20, X19, [X31 + 0x20]
	0x03BE9E98 ADRP X22, 0x7FA000
	0x03BE9E9C LDR X3, [X22 + 0x568]
	0x03BE9EA0 MOV W19, W2
	0x03BE9EA4 MOV X20, X1
	0x03BE9EA8 MOV X21, X0
	0x03BE9EAC CBNZ X3, 0x3BE9EC4
	0x03BE9EB0 ADRP X0, 0xFFFFFFFFFCF25000
	0x03BE9EB4 ADD X0, X0, 0x964
	0x03BE9EB8 BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move W8, [X22+1136]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x576000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1136], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Int32 CallStaticIntMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BE9EBC MOV X3, X0
	0x03BE9EC0 STR X0, [X22 + 0x568]
	0x03BE9EC4 MOV X0, X21
	0x03BE9EC8 MOV X1, X20
	0x03BE9ECC MOV W2, W19
	0x03BE9ED0 LDP X20, X19, [X31 + 0x20]
	0x03BE9ED4 LDP X22, X21, [X31 + 0x10]
	0x03BE9ED8 LDR X30, [X31], #0x30
	0x03BE9EDC BR X3
	0x03BE9EE0 STR X30, [X31 - 0x30]!
	0x03BE9EE4 STP X22, X21, [X31 + 0x10]
	0x03BE9EE8 STP X20, X19, [X31 + 0x20]
	0x03BE9EEC ADRP X22, 0x7FA000
	0x03BE9EF0 LDR X3, [X22 + 0x570]
	0x03BE9EF4 MOV W19, W2
	0x03BE9EF8 MOV X20, X1
	0x03BE9EFC MOV X21, X0
	0x03BE9F00 CBNZ X3, 0x3BE9F18
	0x03BE9F04 ADRP X0, 0xFFFFFFFFFCF0D000
	0x03BE9F08 ADD X0, X0, 0xBE7
	0x03BE9F0C BL 0x1C16CB8
	0x03BE9F10 MOV X3, X0
	0x03BE9F14 STR X0, [X22 + 0x570]
	0x03BE9F18 MOV X0, X21
	0x03BE9F1C MOV X1, X20
	0x03BE9F20 MOV W2, W19
	0x03BE9F24 LDP X20, X19, [X31 + 0x20]
	0x03BE9F28 LDP X22, X21, [X31 + 0x10]
	0x03BE9F2C LDR X30, [X31], #0x30
	0x03BE9F30 BR X3
	0x03BE9F34 STR X30, [X31 - 0x30]!
	0x03BE9F38 STP X22, X21, [X31 + 0x10]
	0x03BE9F3C STP X20, X19, [X31 + 0x20]
	0x03BE9F40 ADRP X22, 0x7FA000
	0x03BE9F44 LDR X3, [X22 + 0x578]
	0x03BE9F48 MOV W19, W2
	0x03BE9F4C MOV X20, X1
	0x03BE9F50 MOV X21, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FB000
	009 Move [X31], X2
	010 Move X22, 0x576000
	011 Move W8, [X21+1137]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x576000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1137], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FB000
	028 Move X8, [X22+1144]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51208192
	033 Add X0, X0, 1809
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1144], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Int32 CallStaticIntMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BE9F54 CBNZ X3, 0x3BE9F6C
	0x03BE9F58 ADRP X0, 0xFFFFFFFFFCF0D000
	0x03BE9F5C ADD X0, X0, 0xC3B
	0x03BE9F60 BL 0x1C16CB8
	0x03BE9F64 MOV X3, X0
	0x03BE9F68 STR X0, [X22 + 0x578]
	0x03BE9F6C MOV X0, X21
	0x03BE9F70 MOV X1, X20
	0x03BE9F74 MOV W2, W19
	0x03BE9F78 LDP X20, X19, [X31 + 0x20]
	0x03BE9F7C LDP X22, X21, [X31 + 0x10]
	0x03BE9F80 LDR X30, [X31], #0x30
	0x03BE9F84 BR X3
	0x03BE9F88 STR X30, [X31 - 0x30]!
	0x03BE9F8C STP X22, X21, [X31 + 0x10]
	0x03BE9F90 STP X20, X19, [X31 + 0x20]
	0x03BE9F94 ADRP X22, 0x7FA000
	0x03BE9F98 LDR X3, [X22 + 0x580]
	0x03BE9F9C MOV W19, W2
	0x03BE9FA0 MOV X20, X1
	0x03BE9FA4 MOV X21, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move X3, [X22+1144]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51208192
	014 Add X0, X0, 1809
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1144], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean CallStaticBooleanMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BE9FA8 CBNZ X3, 0x3BE9FC0
	0x03BE9FAC ADRP X0, 0xFFFFFFFFFCF3F000
	0x03BE9FB0 ADD X0, X0, 0x10A
	0x03BE9FB4 BL 0x1C16CB8
	0x03BE9FB8 MOV X3, X0
	0x03BE9FBC STR X0, [X22 + 0x580]
	0x03BE9FC0 MOV X0, X21
	0x03BE9FC4 MOV X1, X20
	0x03BE9FC8 MOV W2, W19
	0x03BE9FCC LDP X20, X19, [X31 + 0x20]
	0x03BE9FD0 LDP X22, X21, [X31 + 0x10]
	0x03BE9FD4 LDR X30, [X31], #0x30
	0x03BE9FD8 BR X3
	0x03BE9FDC STR X30, [X31 - 0x30]!
	0x03BE9FE0 STP X22, X21, [X31 + 0x10]
	0x03BE9FE4 STP X20, X19, [X31 + 0x20]
	0x03BE9FE8 ADRP X22, 0x7FA000
	0x03BE9FEC LDR X3, [X22 + 0x588]
	0x03BE9FF0 MOV X19, X2
	0x03BE9FF4 MOV X20, X1
	0x03BE9FF8 MOV X21, X0
	0x03BE9FFC CBNZ X3, 0x3BEA014
	0x03BEA000 ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BEA004 ADD X0, X0, 0x36E
	0x03BEA008 BL 0x1C16CB8
	0x03BEA00C MOV X3, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FB000
	007 Move W8, [X22+1152]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x576000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1152], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Boolean CallStaticBooleanMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BEA010 STR X0, [X22 + 0x588]
	0x03BEA014 MOV X0, X21
	0x03BEA018 MOV X1, X20
	0x03BEA01C MOV X2, X19
	0x03BEA020 LDP X20, X19, [X31 + 0x20]
	0x03BEA024 LDP X22, X21, [X31 + 0x10]
	0x03BEA028 LDR X30, [X31], #0x30
	0x03BEA02C BR X3
	0x03BEA030 STR D8, [X31 - 0x30]!
	0x03BEA034 STP X30, X21, [X31 + 0x10]
	0x03BEA038 STP X20, X19, [X31 + 0x20]
	0x03BEA03C ADRP X21, 0x7F9000
	0x03BEA040 LDR X2, [X21 + 0x590]
	0x03BEA044 MOV V8.16B, V0.16B
	0x03BEA048 MOV X19, X1
	0x03BEA04C MOV X20, X0
	0x03BEA050 CBNZ X2, 0x3BEA068
	0x03BEA054 ADRP X0, 0xFFFFFFFFFCF1E000
	0x03BEA058 ADD X0, X0, 0x9E8
	0x03BEA05C BL 0x1C16CB8
	0x03BEA060 MOV X2, X0
	0x03BEA064 STR X0, [X21 + 0x590]
	0x03BEA068 MOV X0, X20
	0x03BEA06C MOV X1, X19
	0x03BEA070 LDP X20, X19, [X31 + 0x20]
	0x03BEA074 LDP X30, X21, [X31 + 0x10]
	0x03BEA078 MOV V0.16B, V8.16B
	0x03BEA07C LDR V8, [X31], #0x30
	0x03BEA080 BR X2
	0x03BEA084 STR D8, [X31 - 0x30]!
	0x03BEA088 STP X30, X21, [X31 + 0x10]
	0x03BEA08C STP X20, X19, [X31 + 0x20]
	0x03BEA090 ADRP X21, 0x7F9000
	0x03BEA094 LDR X2, [X21 + 0x598]
	0x03BEA098 MOV V8.16B, V0.16B
	0x03BEA09C MOV X19, X1
	0x03BEA0A0 MOV X20, X0
	0x03BEA0A4 CBNZ X2, 0x3BEA0BC
	0x03BEA0A8 ADRP X0, 0xFFFFFFFFFCF18000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FA000
	009 Move [X31], X2
	010 Move X22, 0x575000
	011 Move W8, [X21+1153]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x575000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1153], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FA000
	028 Move X8, [X22+1160]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51179520
	033 Add X0, X0, 1231
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1160], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 And W0, W0, 1
	047 Add X31, X31, 64
	048 Return X0

Method: System.Boolean CallStaticBooleanMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BEA0AC ADD X0, X0, 0x951
	0x03BEA0B0 BL 0x1C16CB8
	0x03BEA0B4 MOV X2, X0
	0x03BEA0B8 STR X0, [X21 + 0x598]
	0x03BEA0BC MOV X0, X20
	0x03BEA0C0 MOV X1, X19
	0x03BEA0C4 LDP X20, X19, [X31 + 0x20]
	0x03BEA0C8 LDP X30, X21, [X31 + 0x10]
	0x03BEA0CC MOV V0.16B, V8.16B
	0x03BEA0D0 LDR V8, [X31], #0x30
	0x03BEA0D4 BR X2
	0x03BEA0D8 STR X30, [X31 - 0x20]!
	0x03BEA0DC STP X20, X19, [X31 + 0x10]
	0x03BEA0E0 ADRP X20, 0x7F9000
	0x03BEA0E4 LDR X1, [X20 + 0x5A0]
	0x03BEA0E8 MOV X19, X0
	0x03BEA0EC CBNZ X1, 0x3BEA104
	0x03BEA0F0 ADRP X0, 0xFFFFFFFFFCF36000
	0x03BEA0F4 ADD X0, X0, 0x578
	0x03BEA0F8 BL 0x1C16CB8
	0x03BEA0FC MOV X1, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1160]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51179520
	014 Add X0, X0, 1231
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1160], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int16 CallStaticShortMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BEA100 STR X0, [X20 + 0x5A0]
	0x03BEA104 MOV X0, X19
	0x03BEA108 LDP X20, X19, [X31 + 0x10]
	0x03BEA10C LDR X30, [X31], #0x20
	0x03BEA110 BR X1
	0x03BEA114 STR X30, [X31 - 0x20]!
	0x03BEA118 STP X20, X19, [X31 + 0x10]
	0x03BEA11C ADRP X20, 0x7F9000
	0x03BEA120 LDR X1, [X20 + 0x5A8]
	0x03BEA124 MOV X19, X0
	0x03BEA128 CBNZ X1, 0x3BEA140
	0x03BEA12C ADRP X0, 0xFFFFFFFFFCF36000
	0x03BEA130 ADD X0, X0, 0x5B1
	0x03BEA134 BL 0x1C16CB8
	0x03BEA138 MOV X1, X0
	0x03BEA13C STR X0, [X20 + 0x5A8]
	0x03BEA140 MOV X0, X19
	0x03BEA144 LDP X20, X19, [X31 + 0x10]
	0x03BEA148 LDR X30, [X31], #0x20
	0x03BEA14C BR X1
	0x03BEA150 CBZ X0, 0x3BEA1A0
	0x03BEA154 STP X30, X21, [X31 - 0x20]!
	0x03BEA158 STP X20, X19, [X31 + 0x10]
	0x03BEA15C LDR W19, [X0 + 0x18]
	0x03BEA160 ADRP X21, 0x7F9000
	0x03BEA164 LDR X2, [X21 + 0x5B0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move W8, [X22+1168]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x575000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1168], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Int16 CallStaticShortMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BEA168 ADD X8, X0, 0x20
	0x03BEA16C CMP W19, 0x0
	0x03BEA170 CSEL X20, X31, X8, EQ
	0x03BEA174 CBNZ X2, 0x3BEA18C
	0x03BEA178 ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BEA17C ADD X0, X0, 0x3C3
	0x03BEA180 BL 0x1C16CB8
	0x03BEA184 MOV X2, X0
	0x03BEA188 STR X0, [X21 + 0x5B0]
	0x03BEA18C MOV X0, X20
	0x03BEA190 MOV W1, W19
	0x03BEA194 LDP X20, X19, [X31 + 0x10]
	0x03BEA198 LDP X30, X21, [X31], #0x20
	0x03BEA19C BR X2
	0x03BEA1A0 RET
	0x03BEA1A4 STP X30, X21, [X31 - 0x20]!
	0x03BEA1A8 STP X20, X19, [X31 + 0x10]
	0x03BEA1AC ADRP X21, 0x7F9000
	0x03BEA1B0 LDR X2, [X21 + 0x5B0]
	0x03BEA1B4 MOV W19, W1
	0x03BEA1B8 MOV X20, X0
	0x03BEA1BC CBNZ X2, 0x3BEA1D4
	0x03BEA1C0 ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BEA1C4 ADD X0, X0, 0x3C3
	0x03BEA1C8 BL 0x1C16CB8
	0x03BEA1CC MOV X2, X0
	0x03BEA1D0 STR X0, [X21 + 0x5B0]
	0x03BEA1D4 MOV X0, X20
	0x03BEA1D8 MOV W1, W19
	0x03BEA1DC LDP X20, X19, [X31 + 0x10]
	0x03BEA1E0 LDP X30, X21, [X31], #0x20
	0x03BEA1E4 BR X2
	0x03BEA1E8 CBZ X0, 0x3BEA238
	0x03BEA1EC STP X30, X21, [X31 - 0x20]!
	0x03BEA1F0 STP X20, X19, [X31 + 0x10]
	0x03BEA1F4 LDR W19, [X0 + 0x18]
	0x03BEA1F8 ADRP X21, 0x7F9000
	0x03BEA1FC LDR X2, [X21 + 0x5B8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FA000
	009 Move [X31], X2
	010 Move X22, 0x575000
	011 Move W8, [X21+1169]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x575000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1169], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FA000
	028 Move X8, [X22+1176]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51154944
	033 Add X0, X0, 1299
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1176], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Int16 CallStaticShortMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BEA200 ADD X8, X0, 0x20
	0x03BEA204 CMP W19, 0x0
	0x03BEA208 CSEL X20, X31, X8, EQ
	0x03BEA20C CBNZ X2, 0x3BEA224
	0x03BEA210 ADRP X0, 0xFFFFFFFFFCF14000
	0x03BEA214 ADD X0, X0, 0x77B
	0x03BEA218 BL 0x1C16CB8
	0x03BEA21C MOV X2, X0
	0x03BEA220 STR X0, [X21 + 0x5B8]
	0x03BEA224 MOV X0, X20
	0x03BEA228 MOV W1, W19
	0x03BEA22C LDP X20, X19, [X31 + 0x10]
	0x03BEA230 LDP X30, X21, [X31], #0x20
	0x03BEA234 BR X2
	0x03BEA238 RET
	0x03BEA23C STP X30, X21, [X31 - 0x20]!
	0x03BEA240 STP X20, X19, [X31 + 0x10]
	0x03BEA244 ADRP X21, 0x7F9000
	0x03BEA248 LDR X2, [X21 + 0x5B8]
	0x03BEA24C MOV W19, W1
	0x03BEA250 MOV X20, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1176]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51154944
	014 Add X0, X0, 1299
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1176], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Byte CallStaticByteMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BEA254 CBNZ X2, 0x3BEA26C

ISIL:
No ISIL was generated
Method: System.SByte CallStaticSByteMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BEA258 ADRP X0, 0xFFFFFFFFFCF14000
	0x03BEA25C ADD X0, X0, 0x77B
	0x03BEA260 BL 0x1C16CB8
	0x03BEA264 MOV X2, X0
	0x03BEA268 STR X0, [X21 + 0x5B8]
	0x03BEA26C MOV X0, X20
	0x03BEA270 MOV W1, W19
	0x03BEA274 LDP X20, X19, [X31 + 0x10]
	0x03BEA278 LDP X30, X21, [X31], #0x20
	0x03BEA27C BR X2
	0x03BEA280 CBZ X0, 0x3BEA2D0
	0x03BEA284 STP X30, X21, [X31 - 0x20]!
	0x03BEA288 STP X20, X19, [X31 + 0x10]
	0x03BEA28C LDR W19, [X0 + 0x18]
	0x03BEA290 ADRP X21, 0x7F9000
	0x03BEA294 LDR X2, [X21 + 0x5C0]
	0x03BEA298 ADD X8, X0, 0x20
	0x03BEA29C CMP W19, 0x0
	0x03BEA2A0 CSEL X20, X31, X8, EQ
	0x03BEA2A4 CBNZ X2, 0x3BEA2BC
	0x03BEA2A8 ADRP X0, 0xFFFFFFFFFCF22000
	0x03BEA2AC ADD X0, X0, 0x844
	0x03BEA2B0 BL 0x1C16CB8
	0x03BEA2B4 MOV X2, X0
	0x03BEA2B8 STR X0, [X21 + 0x5C0]
	0x03BEA2BC MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move W8, [X22+1184]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x575000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1184], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.SByte CallStaticSByteMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BEA2C0 MOV W1, W19
	0x03BEA2C4 LDP X20, X19, [X31 + 0x10]
	0x03BEA2C8 LDP X30, X21, [X31], #0x20
	0x03BEA2CC BR X2
	0x03BEA2D0 RET
	0x03BEA2D4 STP X30, X21, [X31 - 0x20]!
	0x03BEA2D8 STP X20, X19, [X31 + 0x10]
	0x03BEA2DC ADRP X21, 0x7F9000
	0x03BEA2E0 LDR X2, [X21 + 0x5C0]
	0x03BEA2E4 MOV W19, W1
	0x03BEA2E8 MOV X20, X0
	0x03BEA2EC CBNZ X2, 0x3BEA304
	0x03BEA2F0 ADRP X0, 0xFFFFFFFFFCF22000
	0x03BEA2F4 ADD X0, X0, 0x844
	0x03BEA2F8 BL 0x1C16CB8
	0x03BEA2FC MOV X2, X0
	0x03BEA300 STR X0, [X21 + 0x5C0]
	0x03BEA304 MOV X0, X20
	0x03BEA308 MOV W1, W19
	0x03BEA30C LDP X20, X19, [X31 + 0x10]
	0x03BEA310 LDP X30, X21, [X31], #0x20
	0x03BEA314 BR X2
	0x03BEA318 CBZ X0, 0x3BEA368
	0x03BEA31C STP X30, X21, [X31 - 0x20]!
	0x03BEA320 STP X20, X19, [X31 + 0x10]
	0x03BEA324 LDR W19, [X0 + 0x18]
	0x03BEA328 ADRP X21, 0x7F9000
	0x03BEA32C LDR X2, [X21 + 0x5C8]
	0x03BEA330 ADD X8, X0, 0x20
	0x03BEA334 CMP W19, 0x0
	0x03BEA338 CSEL X20, X31, X8, EQ
	0x03BEA33C CBNZ X2, 0x3BEA354
	0x03BEA340 ADRP X0, 0xFFFFFFFFFCF20000
	0x03BEA344 ADD X0, X0, 0xD01
	0x03BEA348 BL 0x1C16CB8
	0x03BEA34C MOV X2, X0
	0x03BEA350 STR X0, [X21 + 0x5C8]
	0x03BEA354 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FA000
	009 Move [X31], X2
	010 Move X22, 0x575000
	011 Move W8, [X21+1185]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x575000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1185], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FA000
	028 Move X8, [X22+1192]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51269632
	033 Add X0, X0, 2815
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1192], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.SByte CallStaticSByteMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BEA358 MOV W1, W19
	0x03BEA35C LDP X20, X19, [X31 + 0x10]
	0x03BEA360 LDP X30, X21, [X31], #0x20
	0x03BEA364 BR X2
	0x03BEA368 RET
	0x03BEA36C STP X30, X21, [X31 - 0x20]!
	0x03BEA370 STP X20, X19, [X31 + 0x10]
	0x03BEA374 ADRP X21, 0x7F9000
	0x03BEA378 LDR X2, [X21 + 0x5C8]
	0x03BEA37C MOV W19, W1
	0x03BEA380 MOV X20, X0
	0x03BEA384 CBNZ X2, 0x3BEA39C
	0x03BEA388 ADRP X0, 0xFFFFFFFFFCF20000
	0x03BEA38C ADD X0, X0, 0xD01
	0x03BEA390 BL 0x1C16CB8
	0x03BEA394 MOV X2, X0
	0x03BEA398 STR X0, [X21 + 0x5C8]
	0x03BEA39C MOV X0, X20
	0x03BEA3A0 MOV W1, W19
	0x03BEA3A4 LDP X20, X19, [X31 + 0x10]
	0x03BEA3A8 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1192]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51269632
	014 Add X0, X0, 2815
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1192], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Char CallStaticCharMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BEA3AC BR X2
	0x03BEA3B0 CBZ X0, 0x3BEA400
	0x03BEA3B4 STP X30, X21, [X31 - 0x20]!
	0x03BEA3B8 STP X20, X19, [X31 + 0x10]
	0x03BEA3BC LDR W19, [X0 + 0x18]
	0x03BEA3C0 ADRP X21, 0x7F9000
	0x03BEA3C4 LDR X2, [X21 + 0x5D0]
	0x03BEA3C8 ADD X8, X0, 0x20
	0x03BEA3CC CMP W19, 0x0
	0x03BEA3D0 CSEL X20, X31, X8, EQ
	0x03BEA3D4 CBNZ X2, 0x3BEA3EC
	0x03BEA3D8 ADRP X0, 0xFFFFFFFFFCF26000
	0x03BEA3DC ADD X0, X0, 0xA78
	0x03BEA3E0 BL 0x1C16CB8
	0x03BEA3E4 MOV X2, X0
	0x03BEA3E8 STR X0, [X21 + 0x5D0]
	0x03BEA3EC MOV X0, X20
	0x03BEA3F0 MOV W1, W19
	0x03BEA3F4 LDP X20, X19, [X31 + 0x10]
	0x03BEA3F8 LDP X30, X21, [X31], #0x20
	0x03BEA3FC BR X2
	0x03BEA400 RET
	0x03BEA404 STP X30, X21, [X31 - 0x20]!
	0x03BEA408 STP X20, X19, [X31 + 0x10]
	0x03BEA40C ADRP X21, 0x7F9000
	0x03BEA410 LDR X2, [X21 + 0x5D0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move W8, [X22+1200]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x575000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1200], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Char CallStaticCharMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BEA414 MOV W19, W1
	0x03BEA418 MOV X20, X0
	0x03BEA41C CBNZ X2, 0x3BEA434
	0x03BEA420 ADRP X0, 0xFFFFFFFFFCF26000
	0x03BEA424 ADD X0, X0, 0xA78
	0x03BEA428 BL 0x1C16CB8
	0x03BEA42C MOV X2, X0
	0x03BEA430 STR X0, [X21 + 0x5D0]
	0x03BEA434 MOV X0, X20
	0x03BEA438 MOV W1, W19
	0x03BEA43C LDP X20, X19, [X31 + 0x10]
	0x03BEA440 LDP X30, X21, [X31], #0x20
	0x03BEA444 BR X2
	0x03BEA448 CBZ X0, 0x3BEA498
	0x03BEA44C STP X30, X21, [X31 - 0x20]!
	0x03BEA450 STP X20, X19, [X31 + 0x10]
	0x03BEA454 LDR W19, [X0 + 0x18]
	0x03BEA458 ADRP X21, 0x7F9000
	0x03BEA45C LDR X2, [X21 + 0x5D8]
	0x03BEA460 ADD X8, X0, 0x20
	0x03BEA464 CMP W19, 0x0
	0x03BEA468 CSEL X20, X31, X8, EQ
	0x03BEA46C CBNZ X2, 0x3BEA484
	0x03BEA470 ADRP X0, 0xFFFFFFFFFCF34000
	0x03BEA474 ADD X0, X0, 0x429
	0x03BEA478 BL 0x1C16CB8
	0x03BEA47C MOV X2, X0
	0x03BEA480 STR X0, [X21 + 0x5D8]
	0x03BEA484 MOV X0, X20
	0x03BEA488 MOV W1, W19
	0x03BEA48C LDP X20, X19, [X31 + 0x10]
	0x03BEA490 LDP X30, X21, [X31], #0x20
	0x03BEA494 BR X2
	0x03BEA498 RET
	0x03BEA49C STP X30, X21, [X31 - 0x20]!
	0x03BEA4A0 STP X20, X19, [X31 + 0x10]
	0x03BEA4A4 ADRP X21, 0x7F9000
	0x03BEA4A8 LDR X2, [X21 + 0x5D8]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FA000
	009 Move [X31], X2
	010 Move X22, 0x575000
	011 Move W8, [X21+1201]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x575000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1201], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FA000
	028 Move X8, [X22+1208]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51146752
	033 Add X0, X0, 2699
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1208], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Char CallStaticCharMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BEA4AC MOV W19, W1
	0x03BEA4B0 MOV X20, X0
	0x03BEA4B4 CBNZ X2, 0x3BEA4CC
	0x03BEA4B8 ADRP X0, 0xFFFFFFFFFCF34000
	0x03BEA4BC ADD X0, X0, 0x429
	0x03BEA4C0 BL 0x1C16CB8
	0x03BEA4C4 MOV X2, X0
	0x03BEA4C8 STR X0, [X21 + 0x5D8]
	0x03BEA4CC MOV X0, X20
	0x03BEA4D0 MOV W1, W19
	0x03BEA4D4 LDP X20, X19, [X31 + 0x10]
	0x03BEA4D8 LDP X30, X21, [X31], #0x20
	0x03BEA4DC BR X2
	0x03BEA4E0 CBZ X0, 0x3BEA530
	0x03BEA4E4 STP X30, X21, [X31 - 0x20]!
	0x03BEA4E8 STP X20, X19, [X31 + 0x10]
	0x03BEA4EC LDR W19, [X0 + 0x18]
	0x03BEA4F0 ADRP X21, 0x7F9000
	0x03BEA4F4 LDR X2, [X21 + 0x5E0]
	0x03BEA4F8 ADD X8, X0, 0x20
	0x03BEA4FC CMP W19, 0x0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1208]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51146752
	014 Add X0, X0, 2699
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1208], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Single CallStaticFloatMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BEA500 CSEL X20, X31, X8, EQ
	0x03BEA504 CBNZ X2, 0x3BEA51C
	0x03BEA508 ADRP X0, 0xFFFFFFFFFCF30000
	0x03BEA50C ADD X0, X0, 0x536
	0x03BEA510 BL 0x1C16CB8
	0x03BEA514 MOV X2, X0
	0x03BEA518 STR X0, [X21 + 0x5E0]
	0x03BEA51C MOV X0, X20
	0x03BEA520 MOV W1, W19
	0x03BEA524 LDP X20, X19, [X31 + 0x10]
	0x03BEA528 LDP X30, X21, [X31], #0x20
	0x03BEA52C BR X2
	0x03BEA530 RET
	0x03BEA534 STP X30, X21, [X31 - 0x20]!
	0x03BEA538 STP X20, X19, [X31 + 0x10]
	0x03BEA53C ADRP X21, 0x7F9000
	0x03BEA540 LDR X2, [X21 + 0x5E0]
	0x03BEA544 MOV W19, W1
	0x03BEA548 MOV X20, X0
	0x03BEA54C CBNZ X2, 0x3BEA564
	0x03BEA550 ADRP X0, 0xFFFFFFFFFCF30000
	0x03BEA554 ADD X0, X0, 0x536
	0x03BEA558 BL 0x1C16CB8
	0x03BEA55C MOV X2, X0
	0x03BEA560 STR X0, [X21 + 0x5E0]
	0x03BEA564 MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move W8, [X22+1216]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x575000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1216], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Single CallStaticFloatMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BEA568 MOV W1, W19
	0x03BEA56C LDP X20, X19, [X31 + 0x10]
	0x03BEA570 LDP X30, X21, [X31], #0x20
	0x03BEA574 BR X2
	0x03BEA578 STR X30, [X31 - 0x30]!
	0x03BEA57C STP X22, X21, [X31 + 0x10]
	0x03BEA580 STP X20, X19, [X31 + 0x20]
	0x03BEA584 ADRP X22, 0x7F9000
	0x03BEA588 LDR X3, [X22 + 0x5E8]
	0x03BEA58C MOV X19, X2
	0x03BEA590 MOV W20, W1
	0x03BEA594 MOV X21, X0
	0x03BEA598 CBNZ X3, 0x3BEA5B0
	0x03BEA59C ADRP X0, 0xFFFFFFFFFCF3A000
	0x03BEA5A0 ADD X0, X0, 0x718
	0x03BEA5A4 BL 0x1C16CB8
	0x03BEA5A8 MOV X3, X0
	0x03BEA5AC STR X0, [X22 + 0x5E8]
	0x03BEA5B0 MOV X0, X21
	0x03BEA5B4 MOV W1, W20
	0x03BEA5B8 MOV X2, X19
	0x03BEA5BC LDP X20, X19, [X31 + 0x20]
	0x03BEA5C0 LDP X22, X21, [X31 + 0x10]
	0x03BEA5C4 LDR X30, [X31], #0x30
	0x03BEA5C8 BR X3
	0x03BEA5CC CBZ X0, 0x3BEA62C
	0x03BEA5D0 STR X30, [X31 - 0x30]!
	0x03BEA5D4 STP X22, X21, [X31 + 0x10]
	0x03BEA5D8 STP X20, X19, [X31 + 0x20]
	0x03BEA5DC LDR W20, [X0 + 0x18]
	0x03BEA5E0 ADRP X22, 0x7F9000
	0x03BEA5E4 LDR X3, [X22 + 0x5E8]
	0x03BEA5E8 ADD X8, X0, 0x20
	0x03BEA5EC CMP W20, 0x0
	0x03BEA5F0 MOV X19, X1
	0x03BEA5F4 CSEL X21, X31, X8, EQ
	0x03BEA5F8 CBNZ X3, 0x3BEA610
	0x03BEA5FC ADRP X0, 0xFFFFFFFFFCF3A000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FA000
	009 Move [X31], X2
	010 Move X22, 0x575000
	011 Move W8, [X21+1217]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x575000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1217], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FA000
	028 Move X8, [X22+1224]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51269632
	033 Add X0, X0, 2916
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1224], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return V0

Method: System.Single CallStaticFloatMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BEA600 ADD X0, X0, 0x718
	0x03BEA604 BL 0x1C16CB8
	0x03BEA608 MOV X3, X0
	0x03BEA60C STR X0, [X22 + 0x5E8]
	0x03BEA610 MOV X0, X21
	0x03BEA614 MOV W1, W20
	0x03BEA618 MOV X2, X19
	0x03BEA61C LDP X20, X19, [X31 + 0x20]
	0x03BEA620 LDP X22, X21, [X31 + 0x10]
	0x03BEA624 LDR X30, [X31], #0x30
	0x03BEA628 BR X3
	0x03BEA62C RET
	0x03BEA630 MOV X1, X31
	0x03BEA634 B 0x3BEA5CC
	0x03BEA638 STR X30, [X31 - 0x20]!
	0x03BEA63C STP X20, X19, [X31 + 0x10]
	0x03BEA640 ADRP X20, 0x7F9000
	0x03BEA644 LDR X1, [X20 + 0x5F0]
	0x03BEA648 MOV X19, X0
	0x03BEA64C CBNZ X1, 0x3BEA664
	0x03BEA650 ADRP X0, 0xFFFFFFFFFCF26000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1224]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51269632
	014 Add X0, X0, 2916
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1224], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Double CallStaticDoubleMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BEA654 ADD X0, X0, 0xAB8
	0x03BEA658 BL 0x1C16CB8
	0x03BEA65C MOV X1, X0
	0x03BEA660 STR X0, [X20 + 0x5F0]
	0x03BEA664 MOV X0, X19
	0x03BEA668 LDP X20, X19, [X31 + 0x10]
	0x03BEA66C LDR X30, [X31], #0x20
	0x03BEA670 BR X1
	0x03BEA674 STR X30, [X31 - 0x20]!
	0x03BEA678 STP X20, X19, [X31 + 0x10]
	0x03BEA67C ADRP X20, 0x7F9000
	0x03BEA680 LDR X1, [X20 + 0x5F8]
	0x03BEA684 MOV X19, X0
	0x03BEA688 CBNZ X1, 0x3BEA6A0
	0x03BEA68C ADRP X0, 0xFFFFFFFFFCF04000
	0x03BEA690 ADD X0, X0, 0xB1C
	0x03BEA694 BL 0x1C16CB8
	0x03BEA698 MOV X1, X0
	0x03BEA69C STR X0, [X20 + 0x5F8]
	0x03BEA6A0 MOV X0, X19
	0x03BEA6A4 LDP X20, X19, [X31 + 0x10]
	0x03BEA6A8 LDR X30, [X31], #0x20
	0x03BEA6AC BR X1
	0x03BEA6B0 STR X30, [X31 - 0x20]!
	0x03BEA6B4 STP X20, X19, [X31 + 0x10]
	0x03BEA6B8 ADRP X20, 0x7F9000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move W8, [X22+1232]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x575000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1232], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Double CallStaticDoubleMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BEA6BC LDR X1, [X20 + 0x600]
	0x03BEA6C0 MOV X19, X0
	0x03BEA6C4 CBNZ X1, 0x3BEA6DC
	0x03BEA6C8 ADRP X0, 0xFFFFFFFFFCF2E000
	0x03BEA6CC ADD X0, X0, 0x2B2
	0x03BEA6D0 BL 0x1C16CB8
	0x03BEA6D4 MOV X1, X0
	0x03BEA6D8 STR X0, [X20 + 0x600]
	0x03BEA6DC MOV X0, X19
	0x03BEA6E0 LDP X20, X19, [X31 + 0x10]
	0x03BEA6E4 LDR X30, [X31], #0x20
	0x03BEA6E8 BR X1
	0x03BEA6EC STR X30, [X31 - 0x20]!
	0x03BEA6F0 STP X20, X19, [X31 + 0x10]
	0x03BEA6F4 ADRP X20, 0x7F9000
	0x03BEA6F8 LDR X1, [X20 + 0x608]
	0x03BEA6FC MOV X19, X0
	0x03BEA700 CBNZ X1, 0x3BEA718
	0x03BEA704 ADRP X0, 0xFFFFFFFFFCF14000
	0x03BEA708 ADD X0, X0, 0x7BA
	0x03BEA70C BL 0x1C16CB8
	0x03BEA710 MOV X1, X0
	0x03BEA714 STR X0, [X20 + 0x608]
	0x03BEA718 MOV X0, X19
	0x03BEA71C LDP X20, X19, [X31 + 0x10]
	0x03BEA720 LDR X30, [X31], #0x20
	0x03BEA724 BR X1
	0x03BEA728 STR X30, [X31 - 0x20]!
	0x03BEA72C STP X20, X19, [X31 + 0x10]
	0x03BEA730 ADRP X20, 0x7F9000
	0x03BEA734 LDR X1, [X20 + 0x610]
	0x03BEA738 MOV X19, X0
	0x03BEA73C CBNZ X1, 0x3BEA754
	0x03BEA740 ADRP X0, 0xFFFFFFFFFCF22000
	0x03BEA744 ADD X0, X0, 0x885
	0x03BEA748 BL 0x1C16CB8
	0x03BEA74C MOV X1, X0
	0x03BEA750 STR X0, [X20 + 0x610]

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FA000
	009 Move [X31], X2
	010 Move X22, 0x575000
	011 Move W8, [X21+1233]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x575000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1233], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FA000
	028 Move X8, [X22+1240]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51318784
	033 Add X0, X0, 2881
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1240], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return V0

Method: System.Double CallStaticDoubleMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BEA754 MOV X0, X19
	0x03BEA758 LDP X20, X19, [X31 + 0x10]
	0x03BEA75C LDR X30, [X31], #0x20
	0x03BEA760 BR X1
	0x03BEA764 STR X30, [X31 - 0x20]!
	0x03BEA768 STP X20, X19, [X31 + 0x10]
	0x03BEA76C ADRP X20, 0x7F9000
	0x03BEA770 LDR X1, [X20 + 0x618]
	0x03BEA774 MOV X19, X0
	0x03BEA778 CBNZ X1, 0x3BEA790
	0x03BEA77C ADRP X0, 0xFFFFFFFFFCF12000
	0x03BEA780 ADD X0, X0, 0xC92
	0x03BEA784 BL 0x1C16CB8
	0x03BEA788 MOV X1, X0
	0x03BEA78C STR X0, [X20 + 0x618]
	0x03BEA790 MOV X0, X19
	0x03BEA794 LDP X20, X19, [X31 + 0x10]
	0x03BEA798 LDR X30, [X31], #0x20
	0x03BEA79C BR X1
	0x03BEA7A0 STR X30, [X31 - 0x20]!
	0x03BEA7A4 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1240]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51318784
	014 Add X0, X0, 2881
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1240], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int64 CallStaticLongMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BEA7A8 ADRP X20, 0x7F9000
	0x03BEA7AC LDR X1, [X20 + 0x620]
	0x03BEA7B0 MOV X19, X0
	0x03BEA7B4 CBNZ X1, 0x3BEA7CC
	0x03BEA7B8 ADRP X0, 0xFFFFFFFFFCF36000
	0x03BEA7BC ADD X0, X0, 0x5E4
	0x03BEA7C0 BL 0x1C16CB8
	0x03BEA7C4 MOV X1, X0
	0x03BEA7C8 STR X0, [X20 + 0x620]
	0x03BEA7CC MOV X0, X19
	0x03BEA7D0 LDP X20, X19, [X31 + 0x10]
	0x03BEA7D4 LDR X30, [X31], #0x20
	0x03BEA7D8 BR X1
	0x03BEA7DC STR X30, [X31 - 0x20]!
	0x03BEA7E0 STP X20, X19, [X31 + 0x10]
	0x03BEA7E4 ADRP X20, 0x7F9000
	0x03BEA7E8 LDR X1, [X20 + 0x628]
	0x03BEA7EC MOV X19, X0
	0x03BEA7F0 CBNZ X1, 0x3BEA808
	0x03BEA7F4 ADRP X0, 0xFFFFFFFFFCF2A000
	0x03BEA7F8 ADD X0, X0, 0x404
	0x03BEA7FC BL 0x1C16CB8
	0x03BEA800 MOV X1, X0
	0x03BEA804 STR X0, [X20 + 0x628]
	0x03BEA808 MOV X0, X19
	0x03BEA80C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move W8, [X22+1248]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x575000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1248], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Int64 CallStaticLongMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BEA810 LDR X30, [X31], #0x20
	0x03BEA814 BR X1
	0x03BEA818 STR X30, [X31 - 0x20]!
	0x03BEA81C STP X20, X19, [X31 + 0x10]
	0x03BEA820 ADRP X20, 0x7F9000
	0x03BEA824 LDR X1, [X20 + 0x630]
	0x03BEA828 MOV X19, X0
	0x03BEA82C CBNZ X1, 0x3BEA844
	0x03BEA830 ADRP X0, 0xFFFFFFFFFCF18000
	0x03BEA834 ADD X0, X0, 0x9A9
	0x03BEA838 BL 0x1C16CB8
	0x03BEA83C MOV X1, X0
	0x03BEA840 STR X0, [X20 + 0x630]
	0x03BEA844 MOV X0, X19
	0x03BEA848 LDP X20, X19, [X31 + 0x10]
	0x03BEA84C LDR X30, [X31], #0x20
	0x03BEA850 BR X1
	0x03BEA854 STR X30, [X31 - 0x20]!
	0x03BEA858 STP X20, X19, [X31 + 0x10]
	0x03BEA85C ADRP X20, 0x7F9000
	0x03BEA860 LDR X1, [X20 + 0x638]
	0x03BEA864 MOV X19, X0
	0x03BEA868 CBNZ X1, 0x3BEA880
	0x03BEA86C ADRP X0, 0xFFFFFFFFFCF12000
	0x03BEA870 ADD X0, X0, 0xCC6
	0x03BEA874 BL 0x1C16CB8
	0x03BEA878 MOV X1, X0
	0x03BEA87C STR X0, [X20 + 0x638]
	0x03BEA880 MOV X0, X19
	0x03BEA884 LDP X20, X19, [X31 + 0x10]
	0x03BEA888 LDR X30, [X31], #0x20
	0x03BEA88C BR X1
	0x03BEA890 STR X30, [X31 - 0x20]!
	0x03BEA894 STP X20, X19, [X31 + 0x10]
	0x03BEA898 ADRP X20, 0x7F9000
	0x03BEA89C LDR X1, [X20 + 0x640]
	0x03BEA8A0 MOV X19, X0
	0x03BEA8A4 CBNZ X1, 0x3BEA8BC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FA000
	009 Move [X31], X2
	010 Move X22, 0x575000
	011 Move W8, [X21+1249]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x575000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1249], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FA000
	028 Move X8, [X22+1256]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51245056
	033 Add X0, X0, 3229
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1256], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return X0

Method: System.Int64 CallStaticLongMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BEA8A8 ADRP X0, 0xFFFFFFFFFCF42000
	0x03BEA8AC ADD X0, X0, 0x178
	0x03BEA8B0 BL 0x1C16CB8
	0x03BEA8B4 MOV X1, X0
	0x03BEA8B8 STR X0, [X20 + 0x640]
	0x03BEA8BC MOV X0, X19
	0x03BEA8C0 LDP X20, X19, [X31 + 0x10]
	0x03BEA8C4 LDR X30, [X31], #0x20
	0x03BEA8C8 BR X1
	0x03BEA8CC STR X30, [X31 - 0x20]!
	0x03BEA8D0 STP X20, X19, [X31 + 0x10]
	0x03BEA8D4 ADRP X20, 0x7F9000
	0x03BEA8D8 LDR X1, [X20 + 0x648]
	0x03BEA8DC MOV W19, W0
	0x03BEA8E0 CBNZ X1, 0x3BEA8F8
	0x03BEA8E4 ADRP X0, 0xFFFFFFFFFCF16000
	0x03BEA8E8 ADD X0, X0, 0x92A
	0x03BEA8EC BL 0x1C16CB8
	0x03BEA8F0 MOV X1, X0
	0x03BEA8F4 STR X0, [X20 + 0x648]
	0x03BEA8F8 MOV W0, W19

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1256]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51245056
	014 Add X0, X0, 3229
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1256], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void CallStaticVoidMethod(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue[] args)

Disassembly:
	0x03BEA8FC LDP X20, X19, [X31 + 0x10]
	0x03BEA900 LDR X30, [X31], #0x20
	0x03BEA904 BR X1
	0x03BEA908 STR X30, [X31 - 0x20]!
	0x03BEA90C STP X20, X19, [X31 + 0x10]
	0x03BEA910 ADRP X20, 0x7F9000
	0x03BEA914 LDR X1, [X20 + 0x650]
	0x03BEA918 MOV W19, W0
	0x03BEA91C CBNZ X1, 0x3BEA934
	0x03BEA920 ADRP X0, 0xFFFFFFFFFCF1A000
	0x03BEA924 ADD X0, X0, 0xBC9
	0x03BEA928 BL 0x1C16CB8
	0x03BEA92C MOV X1, X0
	0x03BEA930 STR X0, [X20 + 0x650]
	0x03BEA934 MOV W0, W19
	0x03BEA938 LDP X20, X19, [X31 + 0x10]
	0x03BEA93C LDR X30, [X31], #0x20
	0x03BEA940 BR X1
	0x03BEA944 STR X30, [X31 - 0x20]!
	0x03BEA948 STP X20, X19, [X31 + 0x10]
	0x03BEA94C ADRP X20, 0x7F9000
	0x03BEA950 LDR X1, [X20 + 0x650]
	0x03BEA954 MOV W19, W0
	0x03BEA958 CBNZ X1, 0x3BEA970
	0x03BEA95C ADRP X0, 0xFFFFFFFFFCF1A000
	0x03BEA960 ADD X0, X0, 0xBC9

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move W8, [X22+1264]
	008 Move X21, X2
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x575000
	016 Move X0, [X0+1104]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+1264], W8
	020 Compare X21, 0
	021 JumpIfEqual {24}
	022 Move W3, [X21+24]
	023 Add X2, X21, 32
	024 Move X2, X31
	025 Move X3, X31
	026 Move X0, X20
	027 Move X1, X19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]

Method: System.Void CallStaticVoidMethod(System.IntPtr clazz, System.IntPtr methodID, System.Span`1<UnityEngine.jvalue> args)

Disassembly:
	0x03BEA964 BL 0x1C16CB8
	0x03BEA968 MOV X1, X0
	0x03BEA96C STR X0, [X20 + 0x650]
	0x03BEA970 MOV W0, W19
	0x03BEA974 LDP X20, X19, [X31 + 0x10]
	0x03BEA978 LDR X30, [X31], #0x20
	0x03BEA97C BR X1
	0x03BEA980 STR X30, [X31 - 0x20]!
	0x03BEA984 STP X20, X19, [X31 + 0x10]
	0x03BEA988 ADRP X20, 0x7F9000
	0x03BEA98C LDR X1, [X20 + 0x658]
	0x03BEA990 MOV W19, W0
	0x03BEA994 CBNZ X1, 0x3BEA9AC
	0x03BEA998 ADRP X0, 0xFFFFFFFFFCF2E000
	0x03BEA99C ADD X0, X0, 0x2E8
	0x03BEA9A0 BL 0x1C16CB8
	0x03BEA9A4 MOV X1, X0
	0x03BEA9A8 STR X0, [X20 + 0x658]
	0x03BEA9AC MOV W0, W19
	0x03BEA9B0 LDP X20, X19, [X31 + 0x10]
	0x03BEA9B4 LDR X30, [X31], #0x20
	0x03BEA9B8 BR X1
	0x03BEA9BC STR X30, [X31 - 0x20]!
	0x03BEA9C0 STP X20, X19, [X31 + 0x10]
	0x03BEA9C4 ADRP X20, 0x7F9000
	0x03BEA9C8 LDR X1, [X20 + 0x660]
	0x03BEA9CC MOV W19, W0
	0x03BEA9D0 CBNZ X1, 0x3BEA9E8
	0x03BEA9D4 ADRP X0, 0xFFFFFFFFFCF26000
	0x03BEA9D8 ADD X0, X0, 0xAF0
	0x03BEA9DC BL 0x1C16CB8
	0x03BEA9E0 MOV X1, X0
	0x03BEA9E4 STR X0, [X20 + 0x660]
	0x03BEA9E8 MOV W0, W19
	0x03BEA9EC LDP X20, X19, [X31 + 0x10]
	0x03BEA9F0 LDR X30, [X31], #0x20
	0x03BEA9F4 BR X1
	0x03BEA9F8 STR X30, [X31 - 0x20]!

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+8], X3
	003 Move [X31+16], X30
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x7FA000
	009 Move [X31], X2
	010 Move X22, 0x575000
	011 Move W8, [X21+1265]
	012 Move X22, [X22+1112]
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x575000
	020 Move X0, [X0+1112]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+1265], W8
	024 Move X1, [X22]
	025 Add X0, X31, 0
	026 Call Span`1<jvalue>.GetPinnableReference, X0
	027 Move X22, 0x7FA000
	028 Move X8, [X22+1272]
	029 Move X21, X0
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51277824
	033 Add X0, X0, 2197
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X22+1272], X0
	037 Move X0, X20
	038 Move X1, X19
	039 Move X2, X21
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+48]
	042 Move X19, [X31+56]
	043 Move X22, [X31+32]
	044 Move X21, [X31+40]
	045 Move X30, [X31+16]
	046 Add X31, X31, 64
	047 Return 

Method: System.Void CallStaticVoidMethodUnsafe(System.IntPtr clazz, System.IntPtr methodID, UnityEngine.jvalue* args)

Disassembly:
	0x03BEA9FC STP X20, X19, [X31 + 0x10]
	0x03BEAA00 ADRP X20, 0x7F9000
	0x03BEAA04 LDR X1, [X20 + 0x668]
	0x03BEAA08 MOV W19, W0
	0x03BEAA0C CBNZ X1, 0x3BEAA24
	0x03BEAA10 ADRP X0, 0xFFFFFFFFFCF1A000
	0x03BEAA14 ADD X0, X0, 0xBFD
	0x03BEAA18 BL 0x1C16CB8
	0x03BEAA1C MOV X1, X0
	0x03BEAA20 STR X0, [X20 + 0x668]
	0x03BEAA24 MOV W0, W19
	0x03BEAA28 LDP X20, X19, [X31 + 0x10]
	0x03BEAA2C LDR X30, [X31], #0x20
	0x03BEAA30 BR X1
	0x03BEAA34 STR X30, [X31 - 0x20]!
	0x03BEAA38 STP X20, X19, [X31 + 0x10]
	0x03BEAA3C ADRP X20, 0x7F9000
	0x03BEAA40 LDR X1, [X20 + 0x670]
	0x03BEAA44 MOV W19, W0
	0x03BEAA48 CBNZ X1, 0x3BEAA60
	0x03BEAA4C ADRP X0, 0xFFFFFFFFFCF34000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1272]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51277824
	014 Add X0, X0, 2197
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1272], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.String GetStaticStringField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEAA50 ADD X0, X0, 0x46B
	0x03BEAA54 BL 0x1C16CB8
	0x03BEAA58 MOV X1, X0
	0x03BEAA5C STR X0, [X20 + 0x670]
	0x03BEAA60 MOV W0, W19
	0x03BEAA64 LDP X20, X19, [X31 + 0x10]
	0x03BEAA68 LDR X30, [X31], #0x20
	0x03BEAA6C BR X1
	0x03BEAA70 STR X30, [X31 - 0x20]!
	0x03BEAA74 STP X20, X19, [X31 + 0x10]
	0x03BEAA78 ADRP X20, 0x7F9000
	0x03BEAA7C LDR X1, [X20 + 0x678]
	0x03BEAA80 MOV W19, W0
	0x03BEAA84 CBNZ X1, 0x3BEAA9C
	0x03BEAA88 ADRP X0, 0xFFFFFFFFFCF06000
	0x03BEAA8C ADD X0, X0, 0x8C6
	0x03BEAA90 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1280]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51220480
	012 Add X0, X0, 2534
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1280], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr GetStaticObjectField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEAA94 MOV X1, X0
	0x03BEAA98 STR X0, [X20 + 0x678]
	0x03BEAA9C MOV W0, W19
	0x03BEAAA0 LDP X20, X19, [X31 + 0x10]
	0x03BEAAA4 LDR X30, [X31], #0x20
	0x03BEAAA8 BR X1
	0x03BEAAAC STR X30, [X31 - 0x20]!
	0x03BEAAB0 STP X20, X19, [X31 + 0x10]
	0x03BEAAB4 ADRP X20, 0x7F9000
	0x03BEAAB8 LDR X1, [X20 + 0x680]
	0x03BEAABC MOV W19, W0
	0x03BEAAC0 CBNZ X1, 0x3BEAAD8
	0x03BEAAC4 ADRP X0, 0xFFFFFFFFFCF32000
	0x03BEAAC8 ADD X0, X0, 0x7A1
	0x03BEAACC BL 0x1C16CB8
	0x03BEAAD0 MOV X1, X0
	0x03BEAAD4 STR X0, [X20 + 0x680]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1288]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51146752
	012 Add X0, X0, 2799
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1288], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean GetStaticBooleanField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEAAD8 MOV W0, W19
	0x03BEAADC LDP X20, X19, [X31 + 0x10]
	0x03BEAAE0 LDR X30, [X31], #0x20
	0x03BEAAE4 BR X1
	0x03BEAAE8 STR X30, [X31 - 0x30]!
	0x03BEAAEC STP X22, X21, [X31 + 0x10]
	0x03BEAAF0 STP X20, X19, [X31 + 0x20]
	0x03BEAAF4 ADRP X22, 0x7F9000
	0x03BEAAF8 LDR X3, [X22 + 0x688]
	0x03BEAAFC MOV X19, X2
	0x03BEAB00 MOV X20, X1
	0x03BEAB04 MOV W21, W0
	0x03BEAB08 CBNZ X3, 0x3BEAB20
	0x03BEAB0C ADRP X0, 0xFFFFFFFFFCF14000
	0x03BEAB10 ADD X0, X0, 0x7EF
	0x03BEAB14 BL 0x1C16CB8
	0x03BEAB18 MOV X3, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1296]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51187712
	012 Add X0, X0, 541
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1296], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Byte GetStaticByteField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEAB1C STR X0, [X22 + 0x688]
	0x03BEAB20 MOV W0, W21
	0x03BEAB24 MOV X1, X20
	0x03BEAB28 MOV X2, X19
	0x03BEAB2C LDP X20, X19, [X31 + 0x20]
	0x03BEAB30 LDP X22, X21, [X31 + 0x10]
	0x03BEAB34 LDR X30, [X31], #0x30
	0x03BEAB38 BR X3
	0x03BEAB3C STP X30, X21, [X31 - 0x20]!
	0x03BEAB40 STP X20, X19, [X31 + 0x10]
	0x03BEAB44 ADRP X21, 0x7F9000
	0x03BEAB48 LDR X2, [X21 + 0x690]
	0x03BEAB4C MOV W19, W1
	0x03BEAB50 MOV X20, X0
	0x03BEAB54 CBNZ X2, 0x3BEAB6C
	0x03BEAB58 ADRP X0, 0xFFFFFFFFFCF0C000
	0x03BEAB5C ADD X0, X0, 0xC91

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1304]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51253248
	012 Add X0, X0, 2463
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1304], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.SByte GetStaticSByteField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEAB60 BL 0x1C16CB8
	0x03BEAB64 MOV X2, X0
	0x03BEAB68 STR X0, [X21 + 0x690]
	0x03BEAB6C MOV X0, X20
	0x03BEAB70 MOV W1, W19
	0x03BEAB74 LDP X20, X19, [X31 + 0x10]
	0x03BEAB78 LDP X30, X21, [X31], #0x20
	0x03BEAB7C BR X2
	0x03BEAB80 STP X30, X21, [X31 - 0x20]!
	0x03BEAB84 STP X20, X19, [X31 + 0x10]
	0x03BEAB88 ADRP X21, 0x7F9000
	0x03BEAB8C LDR X2, [X21 + 0x698]
	0x03BEAB90 MOV W19, W1
	0x03BEAB94 MOV X20, X0
	0x03BEAB98 CBNZ X2, 0x3BEABB0
	0x03BEAB9C ADRP X0, 0xFFFFFFFFFCF06000
	0x03BEABA0 ADD X0, X0, 0x8FA

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1304]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51253248
	012 Add X0, X0, 2463
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1304], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Char GetStaticCharField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEABA4 BL 0x1C16CB8
	0x03BEABA8 MOV X2, X0
	0x03BEABAC STR X0, [X21 + 0x698]
	0x03BEABB0 MOV X0, X20
	0x03BEABB4 MOV W1, W19
	0x03BEABB8 LDP X20, X19, [X31 + 0x10]
	0x03BEABBC LDP X30, X21, [X31], #0x20
	0x03BEABC0 BR X2
	0x03BEABC4 STP X30, X21, [X31 - 0x20]!
	0x03BEABC8 STP X20, X19, [X31 + 0x10]
	0x03BEABCC ADRP X21, 0x7F9000
	0x03BEABD0 LDR X2, [X21 + 0x698]
	0x03BEABD4 MOV W19, W1
	0x03BEABD8 MOV X20, X0
	0x03BEABDC CBNZ X2, 0x3BEABF4
	0x03BEABE0 ADRP X0, 0xFFFFFFFFFCF06000
	0x03BEABE4 ADD X0, X0, 0x8FA

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1312]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51310592
	012 Add X0, X0, 3248
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1312], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int16 GetStaticShortField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEABE8 BL 0x1C16CB8
	0x03BEABEC MOV X2, X0
	0x03BEABF0 STR X0, [X21 + 0x698]
	0x03BEABF4 MOV X0, X20
	0x03BEABF8 MOV W1, W19
	0x03BEABFC LDP X20, X19, [X31 + 0x10]
	0x03BEAC00 LDP X30, X21, [X31], #0x20
	0x03BEAC04 BR X2
	0x03BEAC08 STP X30, X21, [X31 - 0x20]!
	0x03BEAC0C STP X20, X19, [X31 + 0x10]
	0x03BEAC10 ADRP X21, 0x7F9000
	0x03BEAC14 LDR X2, [X21 + 0x6A0]
	0x03BEAC18 MOV W19, W1
	0x03BEAC1C MOV X20, X0
	0x03BEAC20 CBNZ X2, 0x3BEAC38
	0x03BEAC24 ADRP X0, 0xFFFFFFFFFCF26000
	0x03BEAC28 ADD X0, X0, 0xB24

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1320]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51286016
	012 Add X0, X0, 2273
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1320], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 GetStaticIntField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEAC2C BL 0x1C16CB8
	0x03BEAC30 MOV X2, X0
	0x03BEAC34 STR X0, [X21 + 0x6A0]
	0x03BEAC38 MOV X0, X20
	0x03BEAC3C MOV W1, W19
	0x03BEAC40 LDP X20, X19, [X31 + 0x10]
	0x03BEAC44 LDP X30, X21, [X31], #0x20
	0x03BEAC48 BR X2
	0x03BEAC4C STP X30, X21, [X31 - 0x20]!
	0x03BEAC50 STP X20, X19, [X31 + 0x10]
	0x03BEAC54 ADRP X21, 0x7F9000
	0x03BEAC58 LDR X2, [X21 + 0x6A8]
	0x03BEAC5C MOV W19, W1
	0x03BEAC60 MOV X20, X0
	0x03BEAC64 CBNZ X2, 0x3BEAC7C
	0x03BEAC68 ADRP X0, 0xFFFFFFFFFCF38000
	0x03BEAC6C ADD X0, X0, 0xB39

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1328]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51212288
	012 Add X0, X0, 1908
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1328], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int64 GetStaticLongField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEAC70 BL 0x1C16CB8
	0x03BEAC74 MOV X2, X0
	0x03BEAC78 STR X0, [X21 + 0x6A8]
	0x03BEAC7C MOV X0, X20
	0x03BEAC80 MOV W1, W19
	0x03BEAC84 LDP X20, X19, [X31 + 0x10]
	0x03BEAC88 LDP X30, X21, [X31], #0x20
	0x03BEAC8C BR X2
	0x03BEAC90 STP X30, X21, [X31 - 0x20]!
	0x03BEAC94 STP X20, X19, [X31 + 0x10]
	0x03BEAC98 ADRP X21, 0x7F9000
	0x03BEAC9C LDR X2, [X21 + 0x6B0]
	0x03BEACA0 MOV W19, W1
	0x03BEACA4 MOV X20, X0
	0x03BEACA8 CBNZ X2, 0x3BEACC0
	0x03BEACAC ADRP X0, 0xFFFFFFFFFCF0A000
	0x03BEACB0 ADD X0, X0, 0xCE1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1336]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51220480
	012 Add X0, X0, 2608
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1336], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Single GetStaticFloatField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEACB4 BL 0x1C16CB8
	0x03BEACB8 MOV X2, X0
	0x03BEACBC STR X0, [X21 + 0x6B0]
	0x03BEACC0 MOV X0, X20
	0x03BEACC4 MOV W1, W19
	0x03BEACC8 LDP X20, X19, [X31 + 0x10]
	0x03BEACCC LDP X30, X21, [X31], #0x20
	0x03BEACD0 BR X2
	0x03BEACD4 STP X30, X21, [X31 - 0x20]!
	0x03BEACD8 STP X20, X19, [X31 + 0x10]
	0x03BEACDC ADRP X21, 0x7F9000
	0x03BEACE0 LDR X2, [X21 + 0x6B8]
	0x03BEACE4 MOV W19, W1
	0x03BEACE8 MOV X20, X0
	0x03BEACEC CBNZ X2, 0x3BEAD04
	0x03BEACF0 ADRP X0, 0xFFFFFFFFFCF30000
	0x03BEACF4 ADD X0, X0, 0x579

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1344]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51302400
	012 Add X0, X0, 3055
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1344], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Double GetStaticDoubleField(System.IntPtr clazz, System.IntPtr fieldID)

Disassembly:
	0x03BEACF8 BL 0x1C16CB8
	0x03BEACFC MOV X2, X0
	0x03BEAD00 STR X0, [X21 + 0x6B8]
	0x03BEAD04 MOV X0, X20
	0x03BEAD08 MOV W1, W19
	0x03BEAD0C LDP X20, X19, [X31 + 0x10]
	0x03BEAD10 LDP X30, X21, [X31], #0x20
	0x03BEAD14 BR X2
	0x03BEAD18 STP X30, X21, [X31 - 0x20]!
	0x03BEAD1C STP X20, X19, [X31 + 0x10]
	0x03BEAD20 ADRP X21, 0x7F9000
	0x03BEAD24 LDR X2, [X21 + 0x6C0]
	0x03BEAD28 MOV W19, W1
	0x03BEAD2C MOV X20, X0
	0x03BEAD30 CBNZ X2, 0x3BEAD48
	0x03BEAD34 ADRP X0, 0xFFFFFFFFFCF34000
	0x03BEAD38 ADD X0, X0, 0x49E

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7FA000
	006 Move X2, [X21+1352]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51187712
	012 Add X0, X0, 616
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1352], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetStaticStringField(System.IntPtr clazz, System.IntPtr fieldID, System.String val)

Disassembly:
	0x03BEAD3C BL 0x1C16CB8
	0x03BEAD40 MOV X2, X0
	0x03BEAD44 STR X0, [X21 + 0x6C0]
	0x03BEAD48 MOV X0, X20
	0x03BEAD4C MOV W1, W19
	0x03BEAD50 LDP X20, X19, [X31 + 0x10]
	0x03BEAD54 LDP X30, X21, [X31], #0x20
	0x03BEAD58 BR X2
	0x03BEAD5C STP X30, X21, [X31 - 0x20]!
	0x03BEAD60 STP X20, X19, [X31 + 0x10]
	0x03BEAD64 ADRP X21, 0x7F9000
	0x03BEAD68 LDR X2, [X21 + 0x6C8]
	0x03BEAD6C MOV W19, W1
	0x03BEAD70 MOV X20, X0
	0x03BEAD74 CBNZ X2, 0x3BEAD8C
	0x03BEAD78 ADRP X0, 0xFFFFFFFFFCF26000
	0x03BEAD7C ADD X0, X0, 0xB6C
	0x03BEAD80 BL 0x1C16CB8
	0x03BEAD84 MOV X2, X0
	0x03BEAD88 STR X0, [X21 + 0x6C8]
	0x03BEAD8C MOV X0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1360]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51105792
	014 Add X0, X0, 288
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1360], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticObjectField(System.IntPtr clazz, System.IntPtr fieldID, System.IntPtr val)

Disassembly:
	0x03BEAD90 MOV W1, W19
	0x03BEAD94 LDP X20, X19, [X31 + 0x10]
	0x03BEAD98 LDP X30, X21, [X31], #0x20
	0x03BEAD9C BR X2
	0x03BEADA0 STP X30, X21, [X31 - 0x20]!
	0x03BEADA4 STP X20, X19, [X31 + 0x10]
	0x03BEADA8 ADRP X21, 0x7F9000
	0x03BEADAC LDR X2, [X21 + 0x6D0]
	0x03BEADB0 MOV W19, W1
	0x03BEADB4 MOV X20, X0
	0x03BEADB8 CBNZ X2, 0x3BEADD0
	0x03BEADBC ADRP X0, 0xFFFFFFFFFCF30000
	0x03BEADC0 ADD X0, X0, 0x5C1
	0x03BEADC4 BL 0x1C16CB8
	0x03BEADC8 MOV X2, X0
	0x03BEADCC STR X0, [X21 + 0x6D0]
	0x03BEADD0 MOV X0, X20
	0x03BEADD4 MOV W1, W19
	0x03BEADD8 LDP X20, X19, [X31 + 0x10]
	0x03BEADDC LDP X30, X21, [X31], #0x20
	0x03BEADE0 BR X2

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1368]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51277824
	014 Add X0, X0, 2297
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1368], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticBooleanField(System.IntPtr clazz, System.IntPtr fieldID, System.Boolean val)

Disassembly:
	0x03BEADE4 STR X30, [X31 - 0x30]!
	0x03BEADE8 STP X22, X21, [X31 + 0x10]
	0x03BEADEC STP X20, X19, [X31 + 0x20]
	0x03BEADF0 ADRP X22, 0x7F9000
	0x03BEADF4 LDR X3, [X22 + 0x6D8]
	0x03BEADF8 MOV W20, W2
	0x03BEADFC MOV W19, W1
	0x03BEAE00 MOV X21, X0
	0x03BEAE04 CBNZ X3, 0x3BEAE1C
	0x03BEAE08 ADRP X0, 0xFFFFFFFFFCF20000
	0x03BEAE0C ADD X0, X0, 0xD40
	0x03BEAE10 BL 0x1C16CB8
	0x03BEAE14 MOV X3, X0
	0x03BEAE18 STR X0, [X22 + 0x6D8]
	0x03BEAE1C ANDS W31, W20, 0xFF
	0x03BEAE20 MOV X0, X21
	0x03BEAE24 MOV W1, W19
	0x03BEAE28 LDP X20, X19, [X31 + 0x20]
	0x03BEAE2C LDP X22, X21, [X31 + 0x10]
	0x03BEAE30 CSET W2, NE
	0x03BEAE34 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1376]
	008 Move W20, W2
	009 Move X19, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51302400
	014 Add X0, X0, 3128
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1376], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move X1, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticByteField(System.IntPtr clazz, System.IntPtr fieldID, System.Byte val)

Disassembly:
	0x03BEAE38 BR X3
	0x03BEAE3C STR X30, [X31 - 0x30]!
	0x03BEAE40 STP X22, X21, [X31 + 0x10]
	0x03BEAE44 STP X20, X19, [X31 + 0x20]
	0x03BEAE48 ADRP X22, 0x7F9000
	0x03BEAE4C LDR X3, [X22 + 0x6D8]
	0x03BEAE50 MOV W20, W2
	0x03BEAE54 MOV W19, W1
	0x03BEAE58 MOV X21, X0
	0x03BEAE5C CBNZ X3, 0x3BEAE74
	0x03BEAE60 ADRP X0, 0xFFFFFFFFFCF20000
	0x03BEAE64 ADD X0, X0, 0xD40
	0x03BEAE68 BL 0x1C16CB8
	0x03BEAE6C MOV X3, X0
	0x03BEAE70 STR X0, [X22 + 0x6D8]
	0x03BEAE74 AND W2, W20, 0x1
	0x03BEAE78 MOV X0, X21
	0x03BEAE7C MOV W1, W19
	0x03BEAE80 LDP X20, X19, [X31 + 0x20]
	0x03BEAE84 LDP X22, X21, [X31 + 0x10]
	0x03BEAE88 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1384]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51228672
	014 Add X0, X0, 2404
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1384], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticSByteField(System.IntPtr clazz, System.IntPtr fieldID, System.SByte val)

Disassembly:
	0x03BEAE8C BR X3
	0x03BEAE90 STR X30, [X31 - 0x30]!
	0x03BEAE94 STP X22, X21, [X31 + 0x10]
	0x03BEAE98 STP X20, X19, [X31 + 0x20]
	0x03BEAE9C ADRP X22, 0x7F9000
	0x03BEAEA0 LDR X3, [X22 + 0x6E0]
	0x03BEAEA4 MOV W19, W2
	0x03BEAEA8 MOV W20, W1
	0x03BEAEAC MOV X21, X0
	0x03BEAEB0 CBNZ X3, 0x3BEAEC8
	0x03BEAEB4 ADRP X0, 0xFFFFFFFFFCF0C000
	0x03BEAEB8 ADD X0, X0, 0xCDC
	0x03BEAEBC BL 0x1C16CB8
	0x03BEAEC0 MOV X3, X0
	0x03BEAEC4 STR X0, [X22 + 0x6E0]
	0x03BEAEC8 MOV X0, X21
	0x03BEAECC MOV W1, W20
	0x03BEAED0 MOV W2, W19
	0x03BEAED4 LDP X20, X19, [X31 + 0x20]
	0x03BEAED8 LDP X22, X21, [X31 + 0x10]
	0x03BEAEDC LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1384]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51228672
	014 Add X0, X0, 2404
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1384], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticCharField(System.IntPtr clazz, System.IntPtr fieldID, System.Char val)

Disassembly:
	0x03BEAEE0 BR X3
	0x03BEAEE4 STR X30, [X31 - 0x30]!
	0x03BEAEE8 STP X22, X21, [X31 + 0x10]
	0x03BEAEEC STP X20, X19, [X31 + 0x20]
	0x03BEAEF0 ADRP X22, 0x7F9000
	0x03BEAEF4 LDR X3, [X22 + 0x6E0]
	0x03BEAEF8 MOV W19, W2
	0x03BEAEFC MOV W20, W1
	0x03BEAF00 MOV X21, X0
	0x03BEAF04 CBNZ X3, 0x3BEAF1C
	0x03BEAF08 ADRP X0, 0xFFFFFFFFFCF0C000
	0x03BEAF0C ADD X0, X0, 0xCDC
	0x03BEAF10 BL 0x1C16CB8
	0x03BEAF14 MOV X3, X0
	0x03BEAF18 STR X0, [X22 + 0x6E0]
	0x03BEAF1C MOV X0, X21
	0x03BEAF20 MOV W1, W20
	0x03BEAF24 MOV W2, W19
	0x03BEAF28 LDP X20, X19, [X31 + 0x20]
	0x03BEAF2C LDP X22, X21, [X31 + 0x10]
	0x03BEAF30 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1392]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51326976
	014 Add X0, X0, 3047
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1392], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticShortField(System.IntPtr clazz, System.IntPtr fieldID, System.Int16 val)

Disassembly:
	0x03BEAF34 BR X3
	0x03BEAF38 STR X30, [X31 - 0x30]!
	0x03BEAF3C STP X22, X21, [X31 + 0x10]
	0x03BEAF40 STP X20, X19, [X31 + 0x20]
	0x03BEAF44 ADRP X22, 0x7F9000
	0x03BEAF48 LDR X3, [X22 + 0x6E8]
	0x03BEAF4C MOV W19, W2
	0x03BEAF50 MOV W20, W1
	0x03BEAF54 MOV X21, X0
	0x03BEAF58 CBNZ X3, 0x3BEAF70
	0x03BEAF5C ADRP X0, 0xFFFFFFFFFCF12000
	0x03BEAF60 ADD X0, X0, 0xCFD
	0x03BEAF64 BL 0x1C16CB8
	0x03BEAF68 MOV X3, X0
	0x03BEAF6C STR X0, [X22 + 0x6E8]
	0x03BEAF70 MOV X0, X21
	0x03BEAF74 MOV W1, W20
	0x03BEAF78 MOV W2, W19
	0x03BEAF7C LDP X20, X19, [X31 + 0x20]
	0x03BEAF80 LDP X22, X21, [X31 + 0x10]
	0x03BEAF84 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1400]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51326976
	014 Add X0, X0, 3131
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1400], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticIntField(System.IntPtr clazz, System.IntPtr fieldID, System.Int32 val)

Disassembly:
	0x03BEAF88 BR X3
	0x03BEAF8C STR X30, [X31 - 0x30]!
	0x03BEAF90 STP X22, X21, [X31 + 0x10]
	0x03BEAF94 STP X20, X19, [X31 + 0x20]
	0x03BEAF98 ADRP X22, 0x7F9000
	0x03BEAF9C LDR X3, [X22 + 0x6F0]
	0x03BEAFA0 MOV W19, W2
	0x03BEAFA4 MOV W20, W1
	0x03BEAFA8 MOV X21, X0
	0x03BEAFAC CBNZ X3, 0x3BEAFC4
	0x03BEAFB0 ADRP X0, 0xFFFFFFFFFCF24000
	0x03BEAFB4 ADD X0, X0, 0x9BA
	0x03BEAFB8 BL 0x1C16CB8
	0x03BEAFBC MOV X3, X0
	0x03BEAFC0 STR X0, [X22 + 0x6F0]
	0x03BEAFC4 MOV X0, X21
	0x03BEAFC8 MOV W1, W20
	0x03BEAFCC MOV W2, W19
	0x03BEAFD0 LDP X20, X19, [X31 + 0x20]
	0x03BEAFD4 LDP X22, X21, [X31 + 0x10]
	0x03BEAFD8 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1408]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51122176
	014 Add X0, X0, 266
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1408], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticLongField(System.IntPtr clazz, System.IntPtr fieldID, System.Int64 val)

Disassembly:
	0x03BEAFDC BR X3
	0x03BEAFE0 STR X30, [X31 - 0x30]!
	0x03BEAFE4 STP X22, X21, [X31 + 0x10]
	0x03BEAFE8 STP X20, X19, [X31 + 0x20]
	0x03BEAFEC ADRP X22, 0x7F9000
	0x03BEAFF0 LDR X3, [X22 + 0x6F8]
	0x03BEAFF4 MOV W19, W2
	0x03BEAFF8 MOV W20, W1
	0x03BEAFFC MOV X21, X0
	0x03BEB000 CBNZ X3, 0x3BEB018
	0x03BEB004 ADRP X0, 0xFFFFFFFFFCF31000
	0x03BEB008 ADD X0, X0, 0x7D6
	0x03BEB00C BL 0x1C16CB8
	0x03BEB010 MOV X3, X0
	0x03BEB014 STR X0, [X22 + 0x6F8]
	0x03BEB018 MOV X0, X21
	0x03BEB01C MOV W1, W20
	0x03BEB020 MOV W2, W19
	0x03BEB024 LDP X20, X19, [X31 + 0x20]
	0x03BEB028 LDP X22, X21, [X31 + 0x10]
	0x03BEB02C LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7FA000
	007 Move X3, [X22+1416]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51208192
	014 Add X0, X0, 878
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1416], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetStaticFloatField(System.IntPtr clazz, System.IntPtr fieldID, System.Single val)

Disassembly:
	0x03BEB030 BR X3
	0x03BEB034 STR X30, [X31 - 0x30]!
	0x03BEB038 STP X22, X21, [X31 + 0x10]
	0x03BEB03C STP X20, X19, [X31 + 0x20]
	0x03BEB040 ADRP X22, 0x7F8000
	0x03BEB044 LDR X3, [X22 + 0x700]
	0x03BEB048 MOV X19, X2
	0x03BEB04C MOV W20, W1
	0x03BEB050 MOV X21, X0
	0x03BEB054 CBNZ X3, 0x3BEB06C
	0x03BEB058 ADRP X0, 0xFFFFFFFFFCF41000
	0x03BEB05C ADD X0, X0, 0x1AE
	0x03BEB060 BL 0x1C16CB8
	0x03BEB064 MOV X3, X0
	0x03BEB068 STR X0, [X22 + 0x700]
	0x03BEB06C MOV X0, X21
	0x03BEB070 MOV W1, W20
	0x03BEB074 MOV X2, X19
	0x03BEB078 LDP X20, X19, [X31 + 0x20]
	0x03BEB07C LDP X22, X21, [X31 + 0x10]
	0x03BEB080 LDR X30, [X31], #0x30

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7F9000
	007 Move X2, [X21+1424]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51257344
	014 Add X0, X0, 2536
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+1424], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.Void SetStaticDoubleField(System.IntPtr clazz, System.IntPtr fieldID, System.Double val)

Disassembly:
	0x03BEB084 BR X3
	0x03BEB088 STR D8, [X31 - 0x30]!
	0x03BEB08C STP X30, X21, [X31 + 0x10]
	0x03BEB090 STP X20, X19, [X31 + 0x20]
	0x03BEB094 ADRP X21, 0x7F8000
	0x03BEB098 LDR X2, [X21 + 0x708]
	0x03BEB09C MOV V8.16B, V0.16B
	0x03BEB0A0 MOV W19, W1
	0x03BEB0A4 MOV X20, X0
	0x03BEB0A8 CBNZ X2, 0x3BEB0C0
	0x03BEB0AC ADRP X0, 0xFFFFFFFFFCF33000
	0x03BEB0B0 ADD X0, X0, 0x4E7
	0x03BEB0B4 BL 0x1C16CB8
	0x03BEB0B8 MOV X2, X0
	0x03BEB0BC STR X0, [X21 + 0x708]
	0x03BEB0C0 MOV X0, X20
	0x03BEB0C4 MOV W1, W19
	0x03BEB0C8 LDP X20, X19, [X31 + 0x20]
	0x03BEB0CC LDP X30, X21, [X31 + 0x10]
	0x03BEB0D0 MOV V0.16B, V8.16B
	0x03BEB0D4 LDR V8, [X31], #0x30

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7F9000
	007 Move X2, [X21+1432]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51281920
	014 Add X0, X0, 2385
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+1432], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.IntPtr ToBooleanArray(System.Boolean[] array)

Disassembly:
	0x03BEB0D8 BR X2
	0x03BEB0DC STR D8, [X31 - 0x30]!
	0x03BEB0E0 STP X30, X21, [X31 + 0x10]
	0x03BEB0E4 STP X20, X19, [X31 + 0x20]
	0x03BEB0E8 ADRP X21, 0x7F8000
	0x03BEB0EC LDR X2, [X21 + 0x710]
	0x03BEB0F0 MOV V8.16B, V0.16B
	0x03BEB0F4 MOV W19, W1
	0x03BEB0F8 MOV X20, X0
	0x03BEB0FC CBNZ X2, 0x3BEB114
	0x03BEB100 ADRP X0, 0xFFFFFFFFFCF05000
	0x03BEB104 ADD X0, X0, 0x943
	0x03BEB108 BL 0x1C16CB8
	0x03BEB10C MOV X2, X0
	0x03BEB110 STR X0, [X21 + 0x710]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1440]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51159040
	010 Add X0, X0, 1400
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1440], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr ToByteArray(System.Byte[] array)

Disassembly:
	0x03BEB114 MOV X0, X20
	0x03BEB118 MOV W1, W19
	0x03BEB11C LDP X20, X19, [X31 + 0x20]
	0x03BEB120 LDP X30, X21, [X31 + 0x10]
	0x03BEB124 MOV V0.16B, V8.16B
	0x03BEB128 LDR V8, [X31], #0x30
	0x03BEB12C BR X2
	0x03BEB130 STR X30, [X31 - 0x30]!
	0x03BEB134 STP X22, X21, [X31 + 0x10]
	0x03BEB138 STP X20, X19, [X31 + 0x20]
	0x03BEB13C ADRP X22, 0x7F8000
	0x03BEB140 LDR X3, [X22 + 0x718]
	0x03BEB144 MOV X19, X2
	0x03BEB148 MOV W20, W1
	0x03BEB14C MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1448]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51159040
	010 Add X0, X0, 1457
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1448], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr ToSByteArray(System.SByte[] array)

Disassembly:
	0x03BEB150 CBNZ X3, 0x3BEB168
	0x03BEB154 ADRP X0, 0xFFFFFFFFFCF11000
	0x03BEB158 ADD X0, X0, 0xD51
	0x03BEB15C BL 0x1C16CB8
	0x03BEB160 MOV X3, X0
	0x03BEB164 STR X0, [X22 + 0x718]
	0x03BEB168 MOV X0, X21
	0x03BEB16C MOV W1, W20
	0x03BEB170 MOV X2, X19
	0x03BEB174 LDP X20, X19, [X31 + 0x20]
	0x03BEB178 LDP X22, X21, [X31 + 0x10]
	0x03BEB17C LDR X30, [X31], #0x30
	0x03BEB180 BR X3
	0x03BEB184 STP X30, X21, [X31 - 0x20]!
	0x03BEB188 STP X20, X19, [X31 + 0x10]
	0x03BEB18C ADRP X21, 0x7F8000
	0x03BEB190 LDR X2, [X21 + 0x720]
	0x03BEB194 MOV X19, X1
	0x03BEB198 MOV X20, X0
	0x03BEB19C CBNZ X2, 0x3BEB1B4
	0x03BEB1A0 ADRP X0, 0xFFFFFFFFFCF23000

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {27}
	003 Move [X31-32], X30
	004 Move [X31-24], X21
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move W19, [X0+24]
	008 Move X21, 0x7F9000
	009 Move X2, [X21+1456]
	010 Add X8, X0, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Compare X2, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51208192
	016 Add X0, X0, 963
	017 Call 0x1C17CB8
	018 Move X2, X0
	019 Move [X21+1456], X0
	020 Move X0, X20
	021 Move W1, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 CallNoReturn X2
	027 Return X0

Method: System.IntPtr ToSByteArray(System.SByte* array, System.Int32 length)

Disassembly:
	0x03BEB1A4 ADD X0, X0, 0xA10
	0x03BEB1A8 BL 0x1C16CB8
	0x03BEB1AC MOV X2, X0
	0x03BEB1B0 STR X0, [X21 + 0x720]
	0x03BEB1B4 MOV X0, X20
	0x03BEB1B8 MOV X1, X19
	0x03BEB1BC LDP X20, X19, [X31 + 0x10]
	0x03BEB1C0 LDP X30, X21, [X31], #0x20
	0x03BEB1C4 BR X2
	0x03BEB1C8 STR X30, [X31 - 0x30]!
	0x03BEB1CC STP X22, X21, [X31 + 0x10]
	0x03BEB1D0 STP X20, X19, [X31 + 0x20]
	0x03BEB1D4 ADRP X21, 0x7F8000
	0x03BEB1D8 ADRP X22, 0x573000
	0x03BEB1DC LDRB W8, [X21 + 0x728]
	0x03BEB1E0 LDR X22, [X22 + 0x460]
	0x03BEB1E4 MOV X19, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1456]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51208192
	012 Add X0, X0, 963
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1456], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr ToCharArray(System.Char[] array)

Disassembly:
	0x03BEB1E8 MOV X20, X0
	0x03BEB1EC TBNZ X8, 0x0, 0x3BEB204
	0x03BEB1F0 ADRP X0, 0x573000
	0x03BEB1F4 LDR X0, [X0 + 0x460]
	0x03BEB1F8 BL 0x1C16CF4
	0x03BEB1FC MOVZ W8, 0x1
	0x03BEB200 STRB W8, [X21 + 0x728]
	0x03BEB204 LDR X2, [X22]
	0x03BEB208 MOV X0, X20
	0x03BEB20C MOV X1, X19
	0x03BEB210 LDP X20, X19, [X31 + 0x20]
	0x03BEB214 LDP X22, X21, [X31 + 0x10]
	0x03BEB218 LDR X30, [X31], #0x30
	0x03BEB21C B 0x2279DEC
	0x03BEB220 STR X30, [X31 - 0x30]!
	0x03BEB224 STP X22, X21, [X31 + 0x10]
	0x03BEB228 STP X20, X19, [X31 + 0x20]
	0x03BEB22C ADRP X21, 0x7F8000
	0x03BEB230 ADRP X22, 0x573000
	0x03BEB234 LDRB W8, [X21 + 0x729]
	0x03BEB238 LDR X22, [X22 + 0x468]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {27}
	003 Move [X31-32], X30
	004 Move [X31-24], X21
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move W19, [X0+24]
	008 Move X21, 0x7F9000
	009 Move X2, [X21+1464]
	010 Add X8, X0, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Compare X2, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51298304
	016 Add X0, X0, 1915
	017 Call 0x1C17CB8
	018 Move X2, X0
	019 Move [X21+1464], X0
	020 Move X0, X20
	021 Move W1, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 CallNoReturn X2
	027 Return X0

Method: System.IntPtr ToCharArray(System.Char* array, System.Int32 length)

Disassembly:
	0x03BEB23C MOV X19, X1
	0x03BEB240 MOV X20, X0
	0x03BEB244 TBNZ X8, 0x0, 0x3BEB25C
	0x03BEB248 ADRP X0, 0x573000
	0x03BEB24C LDR X0, [X0 + 0x468]
	0x03BEB250 BL 0x1C16CF4
	0x03BEB254 MOVZ W8, 0x1
	0x03BEB258 STRB W8, [X21 + 0x729]
	0x03BEB25C LDR X2, [X22]
	0x03BEB260 MOV X0, X20
	0x03BEB264 MOV X1, X19
	0x03BEB268 LDP X20, X19, [X31 + 0x20]
	0x03BEB26C LDP X22, X21, [X31 + 0x10]
	0x03BEB270 LDR X30, [X31], #0x30
	0x03BEB274 B 0x2279E5C
	0x03BEB278 STR X30, [X31 - 0x20]!
	0x03BEB27C STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1464]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51298304
	012 Add X0, X0, 1915
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1464], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr ToShortArray(System.Int16[] array)

Disassembly:
	0x03BEB280 ADRP X20, 0x7F8000
	0x03BEB284 LDR X1, [X20 + 0x730]
	0x03BEB288 MOV X19, X0
	0x03BEB28C CBNZ X1, 0x3BEB2A4
	0x03BEB290 ADRP X0, 0xFFFFFFFFFCF25000
	0x03BEB294 ADD X0, X0, 0xBB6
	0x03BEB298 BL 0x1C16CB8
	0x03BEB29C MOV X1, X0
	0x03BEB2A0 STR X0, [X20 + 0x730]
	0x03BEB2A4 MOV X0, X19
	0x03BEB2A8 LDP X20, X19, [X31 + 0x10]
	0x03BEB2AC LDR X30, [X31], #0x20
	0x03BEB2B0 BR X1
	0x03BEB2B4 STR X30, [X31 - 0x20]!
	0x03BEB2B8 STP X20, X19, [X31 + 0x10]
	0x03BEB2BC ADRP X20, 0x7F8000
	0x03BEB2C0 LDR X1, [X20 + 0x738]
	0x03BEB2C4 MOV X19, X0
	0x03BEB2C8 CBNZ X1, 0x3BEB2E0
	0x03BEB2CC ADRP X0, 0xFFFFFFFFFCF13000
	0x03BEB2D0 ADD X0, X0, 0x840

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {27}
	003 Move [X31-32], X30
	004 Move [X31-24], X21
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move W19, [X0+24]
	008 Move X21, 0x7F9000
	009 Move X2, [X21+1472]
	010 Add X8, X0, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Compare X2, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51240960
	016 Add X0, X0, 2116
	017 Call 0x1C17CB8
	018 Move X2, X0
	019 Move [X21+1472], X0
	020 Move X0, X20
	021 Move W1, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 CallNoReturn X2
	027 Return X0

Method: System.IntPtr ToShortArray(System.Int16* array, System.Int32 length)

Disassembly:
	0x03BEB2D4 BL 0x1C16CB8
	0x03BEB2D8 MOV X1, X0
	0x03BEB2DC STR X0, [X20 + 0x738]
	0x03BEB2E0 MOV X0, X19
	0x03BEB2E4 LDP X20, X19, [X31 + 0x10]
	0x03BEB2E8 LDR X30, [X31], #0x20
	0x03BEB2EC BR X1
	0x03BEB2F0 STP X30, X21, [X31 - 0x20]!
	0x03BEB2F4 STP X20, X19, [X31 + 0x10]
	0x03BEB2F8 ADRP X20, 0x7F8000
	0x03BEB2FC ADRP X21, 0x573000
	0x03BEB300 LDRB W8, [X20 + 0x740]
	0x03BEB304 LDR X21, [X21 + 0x470]
	0x03BEB308 MOV X19, X0
	0x03BEB30C TBNZ X8, 0x0, 0x3BEB324
	0x03BEB310 ADRP X0, 0x573000
	0x03BEB314 LDR X0, [X0 + 0x470]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1472]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51240960
	012 Add X0, X0, 2116
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1472], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr ToIntArray(System.Int32[] array)

Disassembly:
	0x03BEB318 BL 0x1C16CF4
	0x03BEB31C MOVZ W8, 0x1
	0x03BEB320 STRB W8, [X20 + 0x740]
	0x03BEB324 LDR X1, [X21]
	0x03BEB328 MOV X0, X19
	0x03BEB32C LDP X20, X19, [X31 + 0x10]
	0x03BEB330 LDP X30, X21, [X31], #0x20
	0x03BEB334 B 0x2279A70
	0x03BEB338 STP X30, X21, [X31 - 0x20]!
	0x03BEB33C STP X20, X19, [X31 + 0x10]
	0x03BEB340 ADRP X20, 0x7F8000
	0x03BEB344 ADRP X21, 0x573000
	0x03BEB348 LDRB W8, [X20 + 0x741]
	0x03BEB34C LDR X21, [X21 + 0x478]
	0x03BEB350 MOV X19, X0
	0x03BEB354 TBNZ X8, 0x0, 0x3BEB36C
	0x03BEB358 ADRP X0, 0x573000
	0x03BEB35C LDR X0, [X0 + 0x478]
	0x03BEB360 BL 0x1C16CF4
	0x03BEB364 MOVZ W8, 0x1
	0x03BEB368 STRB W8, [X20 + 0x741]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {27}
	003 Move [X31-32], X30
	004 Move [X31-24], X21
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move W19, [X0+24]
	008 Move X21, 0x7F9000
	009 Move X2, [X21+1480]
	010 Add X8, X0, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Compare X2, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51249152
	016 Add X0, X0, 3329
	017 Call 0x1C17CB8
	018 Move X2, X0
	019 Move [X21+1480], X0
	020 Move X0, X20
	021 Move W1, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 CallNoReturn X2
	027 Return X0

Method: System.IntPtr ToIntArray(System.Int32* array, System.Int32 length)

Disassembly:
	0x03BEB36C LDR X1, [X21]
	0x03BEB370 MOV X0, X19
	0x03BEB374 LDP X20, X19, [X31 + 0x10]
	0x03BEB378 LDP X30, X21, [X31], #0x20
	0x03BEB37C B 0x2279B98
	0x03BEB380 STR X30, [X31 - 0x60]!
	0x03BEB384 STP X28, X27, [X31 + 0x10]
	0x03BEB388 STP X26, X25, [X31 + 0x20]
	0x03BEB38C STP X24, X23, [X31 + 0x30]
	0x03BEB390 STP X22, X21, [X31 + 0x40]
	0x03BEB394 STP X20, X19, [X31 + 0x50]
	0x03BEB398 CBZ X1, 0x3BEB4EC
	0x03BEB39C LDR X21, [X1 + 0x18]
	0x03BEB3A0 MOV X20, X1
	0x03BEB3A4 CBZ W21, 0x3BEB4EC
	0x03BEB3A8 MOV X19, X0
	0x03BEB3AC CMP W21, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1480]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51249152
	012 Add X0, X0, 3329
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1480], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr ToLongArray(System.Int64[] array)

Disassembly:
	0x03BEB3B0 B.LT 0x3BEB3FC
	0x03BEB3B4 MOV X22, X31
	0x03BEB3B8 AND X21, X21, 0x0
	0x03BEB3BC ADD X23, X20, 0x28
	0x03BEB3C0 CMP X22, W21, UXTW
	0x03BEB3C4 B.CS 0x3BEB50C
	0x03BEB3C8 LDP X0, X21, [X23 - 0x8]
	0x03BEB3CC MOV X1, X31
	0x03BEB3D0 BL 0x32277A8
	0x03BEB3D4 TBNZ X0, 0x0, 0x3BEB4EC
	0x03BEB3D8 MOV X0, X21
	0x03BEB3DC MOV X1, X31
	0x03BEB3E0 BL 0x32277A8
	0x03BEB3E4 TBNZ X0, 0x0, 0x3BEB4EC
	0x03BEB3E8 LDR W21, [X20 + 0x18]
	0x03BEB3EC ADD X22, X22, 0x1
	0x03BEB3F0 ADD X23, X23, 0x18
	0x03BEB3F4 CMP X22, W21, SXTW
	0x03BEB3F8 B.LT 0x3BEB3C0
	0x03BEB3FC ADRP X22, 0x7F8000
	0x03BEB400 LDR X8, [X22 + 0x748]

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {27}
	003 Move [X31-32], X30
	004 Move [X31-24], X21
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move W19, [X0+24]
	008 Move X21, 0x7F9000
	009 Move X2, [X21+1488]
	010 Add X8, X0, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Compare X2, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51224576
	016 Add X0, X0, 2680
	017 Call 0x1C17CB8
	018 Move X2, X0
	019 Move [X21+1488], X0
	020 Move X0, X20
	021 Move W1, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 CallNoReturn X2
	027 Return X0

Method: System.IntPtr ToLongArray(System.Int64* array, System.Int32 length)

Disassembly:
	0x03BEB404 CBNZ X8, 0x3BEB41C
	0x03BEB408 ADRP X0, 0xFFFFFFFFFCF33000
	0x03BEB40C ADD X0, X0, 0x53E
	0x03BEB410 BL 0x1C16CB8
	0x03BEB414 MOV X8, X0
	0x03BEB418 STR X0, [X22 + 0x748]
	0x03BEB41C MOV W0, W21
	0x03BEB420 BLR X8
	0x03BEB424 LDR X23, [X20 + 0x18]
	0x03BEB428 MOV X21, X0
	0x03BEB42C CMP W23, 0x1
	0x03BEB430 B.LT 0x3BEB4A4
	0x03BEB434 AND X8, X23, 0x0
	0x03BEB438 ADRP X23, 0xFFFFFFFFFCF05000
	0x03BEB43C MOV X22, X31
	0x03BEB440 ADD X27, X20, 0x30
	0x03BEB444 ADRP X28, 0x7F8000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1488]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51224576
	012 Add X0, X0, 2680
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1488], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr ToFloatArray(System.Single[] array)

Disassembly:
	0x03BEB448 ADD X23, X23, 0x99B
	0x03BEB44C CMP X22, W8, UXTW
	0x03BEB450 B.CS 0x3BEB50C
	0x03BEB454 LDP X24, X25, [X27 - 0x10]
	0x03BEB458 LDR X8, [X28 + 0x750]
	0x03BEB45C LDR X26, [X27]
	0x03BEB460 CBNZ X8, 0x3BEB474
	0x03BEB464 MOV X0, X23
	0x03BEB468 BL 0x1C16CB8
	0x03BEB46C MOV X8, X0
	0x03BEB470 STR X0, [X28 + 0x750]
	0x03BEB474 MOV X0, X21
	0x03BEB478 MOV W1, W22
	0x03BEB47C MOV X2, X24
	0x03BEB480 MOV X3, X25
	0x03BEB484 MOV X4, X26
	0x03BEB488 BLR X8
	0x03BEB48C LDR W8, [X20 + 0x18]
	0x03BEB490 ADD X22, X22, 0x1
	0x03BEB494 ADD X27, X27, 0x18
	0x03BEB498 CMP X22, W8, SXTW

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {27}
	003 Move [X31-32], X30
	004 Move [X31-24], X21
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move W19, [X0+24]
	008 Move X21, 0x7F9000
	009 Move X2, [X21+1496]
	010 Add X8, X0, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Compare X2, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51167232
	016 Add X0, X0, 1065
	017 Call 0x1C17CB8
	018 Move X2, X0
	019 Move [X21+1496], X0
	020 Move X0, X20
	021 Move W1, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 CallNoReturn X2
	027 Return X0

Method: System.IntPtr ToFloatArray(System.Single* array, System.Int32 length)

Disassembly:
	0x03BEB49C B.LT 0x3BEB44C
	0x03BEB4A0 MOV W23, W8
	0x03BEB4A4 ADRP X20, 0x7F8000
	0x03BEB4A8 LDR X3, [X20 + 0x758]
	0x03BEB4AC CBNZ X3, 0x3BEB4C4
	0x03BEB4B0 ADRP X0, 0xFFFFFFFFFCF0B000
	0x03BEB4B4 ADD X0, X0, 0xD32
	0x03BEB4B8 BL 0x1C16CB8
	0x03BEB4BC MOV X3, X0
	0x03BEB4C0 STR X0, [X20 + 0x758]
	0x03BEB4C4 MOV X0, X19
	0x03BEB4C8 MOV X1, X21
	0x03BEB4CC MOV W2, W23
	0x03BEB4D0 LDP X20, X19, [X31 + 0x50]
	0x03BEB4D4 LDP X22, X21, [X31 + 0x40]
	0x03BEB4D8 LDP X24, X23, [X31 + 0x30]
	0x03BEB4DC LDP X26, X25, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1496]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51167232
	012 Add X0, X0, 1065
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1496], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr ToDoubleArray(System.Double[] array)

Disassembly:
	0x03BEB4E0 LDP X28, X27, [X31 + 0x10]
	0x03BEB4E4 LDR X30, [X31], #0x60
	0x03BEB4E8 BR X3
	0x03BEB4EC LDP X20, X19, [X31 + 0x50]
	0x03BEB4F0 LDP X22, X21, [X31 + 0x40]
	0x03BEB4F4 LDP X24, X23, [X31 + 0x30]
	0x03BEB4F8 LDP X26, X25, [X31 + 0x20]
	0x03BEB4FC LDP X28, X27, [X31 + 0x10]
	0x03BEB500 MOVN W0, 0x0
	0x03BEB504 LDR X30, [X31], #0x60
	0x03BEB508 RET
	0x03BEB50C BL 0x1C16F28
	0x03BEB510 STR X30, [X31 - 0x20]!
	0x03BEB514 STP X20, X19, [X31 + 0x10]
	0x03BEB518 ADRP X20, 0x7F8000
	0x03BEB51C LDR X1, [X20 + 0x748]
	0x03BEB520 MOV W19, W0
	0x03BEB524 CBNZ X1, 0x3BEB53C
	0x03BEB528 ADRP X0, 0xFFFFFFFFFCF33000
	0x03BEB52C ADD X0, X0, 0x53E
	0x03BEB530 BL 0x1C16CB8

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {27}
	003 Move [X31-32], X30
	004 Move [X31-24], X21
	005 Move [X31+16], X20
	006 Move [X31+24], X19
	007 Move W19, [X0+24]
	008 Move X21, 0x7F9000
	009 Move X2, [X21+1504]
	010 Add X8, X0, 32
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSEL not yet implemented."
	013 Compare X2, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51183616
	016 Add X0, X0, 1334
	017 Call 0x1C17CB8
	018 Move X2, X0
	019 Move [X21+1504], X0
	020 Move X0, X20
	021 Move W1, W19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 CallNoReturn X2
	027 Return X0

Method: System.IntPtr ToDoubleArray(System.Double* array, System.Int32 length)

Disassembly:
	0x03BEB534 MOV X1, X0
	0x03BEB538 STR X0, [X20 + 0x748]
	0x03BEB53C MOV W0, W19
	0x03BEB540 LDP X20, X19, [X31 + 0x10]
	0x03BEB544 LDR X30, [X31], #0x20
	0x03BEB548 BR X1
	0x03BEB54C STR X30, [X31 - 0x40]!
	0x03BEB550 STP X24, X23, [X31 + 0x10]
	0x03BEB554 STP X22, X21, [X31 + 0x20]
	0x03BEB558 STP X20, X19, [X31 + 0x30]
	0x03BEB55C ADRP X24, 0x7F8000
	0x03BEB560 LDR X5, [X24 + 0x750]
	0x03BEB564 MOV X19, X4
	0x03BEB568 MOV X20, X3
	0x03BEB56C MOV X21, X2
	0x03BEB570 MOV W22, W1
	0x03BEB574 MOV X23, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1504]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51183616
	012 Add X0, X0, 1334
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1504], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr ToObjectArray(System.IntPtr* array, System.Int32 length, System.IntPtr arrayClass)

Disassembly:
	0x03BEB578 CBNZ X5, 0x3BEB590
	0x03BEB57C ADRP X0, 0xFFFFFFFFFCF05000
	0x03BEB580 ADD X0, X0, 0x99B
	0x03BEB584 BL 0x1C16CB8
	0x03BEB588 MOV X5, X0
	0x03BEB58C STR X0, [X24 + 0x750]
	0x03BEB590 MOV X0, X23
	0x03BEB594 MOV W1, W22
	0x03BEB598 MOV X2, X21
	0x03BEB59C MOV X3, X20
	0x03BEB5A0 MOV X4, X19
	0x03BEB5A4 LDP X20, X19, [X31 + 0x30]
	0x03BEB5A8 LDP X22, X21, [X31 + 0x20]
	0x03BEB5AC LDP X24, X23, [X31 + 0x10]
	0x03BEB5B0 LDR X30, [X31], #0x40
	0x03BEB5B4 BR X5
	0x03BEB5B8 STR X30, [X31 - 0x30]!
	0x03BEB5BC STP X22, X21, [X31 + 0x10]
	0x03BEB5C0 STP X20, X19, [X31 + 0x20]
	0x03BEB5C4 ADRP X22, 0x7F8000
	0x03BEB5C8 LDR X3, [X22 + 0x758]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1512]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51142656
	014 Add X0, X0, 1816
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1512], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr ToObjectArray(System.IntPtr[] array, System.IntPtr arrayClass)

Disassembly:
	0x03BEB5CC MOV W19, W2
	0x03BEB5D0 MOV X20, X1
	0x03BEB5D4 MOV X21, X0
	0x03BEB5D8 CBNZ X3, 0x3BEB5F0
	0x03BEB5DC ADRP X0, 0xFFFFFFFFFCF0B000
	0x03BEB5E0 ADD X0, X0, 0xD32
	0x03BEB5E4 BL 0x1C16CB8
	0x03BEB5E8 MOV X3, X0
	0x03BEB5EC STR X0, [X22 + 0x758]
	0x03BEB5F0 MOV X0, X21
	0x03BEB5F4 MOV X1, X20
	0x03BEB5F8 MOV W2, W19
	0x03BEB5FC LDP X20, X19, [X31 + 0x20]
	0x03BEB600 LDP X22, X21, [X31 + 0x10]
	0x03BEB604 LDR X30, [X31], #0x30
	0x03BEB608 BR X3
	0x03BEB60C STR X30, [X31 - 0x20]!
	0x03BEB610 STP X20, X19, [X31 + 0x10]
	0x03BEB614 ADRP X20, 0x7F8000
	0x03BEB618 LDR X1, [X20 + 0x760]
	0x03BEB61C MOV X19, X0
	0x03BEB620 CBNZ X1, 0x3BEB638
	0x03BEB624 ADRP X0, 0xFFFFFFFFFCF25000
	0x03BEB628 ADD X0, X0, 0xBF4
	0x03BEB62C BL 0x1C16CB8

ISIL:
	001 Compare X0, 0
	002 JumpIfEqual {31}
	003 Move [X31-48], X30
	004 Move [X31+16], X22
	005 Move [X31+24], X21
	006 Move [X31+32], X20
	007 Move [X31+40], X19
	008 Move W20, [X0+24]
	009 Move X22, 0x7F9000
	010 Move X3, [X22+1512]
	011 Add X8, X0, 32
	012 NotImplemented "Instruction CMP not yet implemented."
	013 Move X19, X1
	014 NotImplemented "Instruction CSEL not yet implemented."
	015 Compare X3, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51142656
	018 Add X0, X0, 1816
	019 Call 0x1C17CB8
	020 Move X3, X0
	021 Move [X22+1512], X0
	022 Move X0, X21
	023 Move W1, W20
	024 Move X2, X19
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X22, [X31+16]
	028 Move X21, [X31+24]
	029 Move X30, [X31+48]
	030 CallNoReturn X3
	031 Return X0

Method: System.IntPtr ToObjectArray(System.IntPtr[] array)

Disassembly:
	0x03BEB630 MOV X1, X0
	0x03BEB634 STR X0, [X20 + 0x760]

ISIL:
	001 Move X1, X31
	002 Call AndroidJNI.ToObjectArray, X0, X1
	003 Return X0

Method: System.Boolean[] FromBooleanArray(System.IntPtr array)

Disassembly:
	0x03BEB638 MOV X0, X19
	0x03BEB63C LDP X20, X19, [X31 + 0x10]
	0x03BEB640 LDR X30, [X31], #0x20
	0x03BEB644 BR X1
	0x03BEB648 STP X30, X25, [X31 - 0x40]!
	0x03BEB64C STP X24, X23, [X31 + 0x10]
	0x03BEB650 STP X22, X21, [X31 + 0x20]
	0x03BEB654 STP X20, X19, [X31 + 0x30]
	0x03BEB658 ADRP X19, 0x7F8000
	0x03BEB65C LDR X8, [X19 + 0x200]
	0x03BEB660 CBNZ X8, 0x3BEB678
	0x03BEB664 ADRP X0, 0xFFFFFFFFFCF13000
	0x03BEB668 ADD X0, X0, 0x6E3
	0x03BEB66C BL 0x1C16CB8
	0x03BEB670 MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1520]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51224576
	010 Add X0, X0, 2744
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1520], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Byte[] FromByteArray(System.IntPtr array)

Disassembly:
	0x03BEB674 STR X0, [X19 + 0x200]
	0x03BEB678 BLR X8
	0x03BEB67C MOV X1, X31
	0x03BEB680 MOV X2, X31
	0x03BEB684 MOV X19, X0
	0x03BEB688 BL 0x33C5D2C
	0x03BEB68C TBNZ X0, 0x0, 0x3BEB6A4
	0x03BEB690 LDP X20, X19, [X31 + 0x30]
	0x03BEB694 LDP X22, X21, [X31 + 0x20]
	0x03BEB698 LDP X24, X23, [X31 + 0x10]
	0x03BEB69C LDP X30, X25, [X31], #0x40
	0x03BEB6A0 RET
	0x03BEB6A4 ADRP X20, 0x7F8000
	0x03BEB6A8 LDR X0, [X20 + 0x210]
	0x03BEB6AC CBNZ X0, 0x3BEB6C0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1528]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51363840
	010 Add X0, X0, 2844
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1528], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.SByte[] FromSByteArray(System.IntPtr array)

Disassembly:
	0x03BEB6B0 ADRP X0, 0xFFFFFFFFFCF13000
	0x03BEB6B4 ADD X0, X0, 0x70F
	0x03BEB6B8 BL 0x1C16CB8
	0x03BEB6BC STR X0, [X20 + 0x210]
	0x03BEB6C0 BLR X0
	0x03BEB6C4 ADRP X0, 0x573000
	0x03BEB6C8 LDR X0, [X0 + 0x480]
	0x03BEB6CC BL 0x1C16D08
	0x03BEB6D0 ADRP X22, 0x7F8000
	0x03BEB6D4 LDR X8, [X22 + 0x1B8]
	0x03BEB6D8 MOV X20, X0
	0x03BEB6DC CBNZ X8, 0x3BEB6F4
	0x03BEB6E0 ADRP X0, 0xFFFFFFFFFCF3D000
	0x03BEB6E4 ADD X0, X0, 0xD9
	0x03BEB6E8 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1536]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51191808
	010 Add X0, X0, 690
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1536], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Char[] FromCharArray(System.IntPtr array)

Disassembly:
	0x03BEB6EC MOV X8, X0
	0x03BEB6F0 STR X0, [X22 + 0x1B8]
	0x03BEB6F4 MOV X0, X20
	0x03BEB6F8 BLR X8
	0x03BEB6FC MOV X20, X0
	0x03BEB700 ADRP X0, 0x573000
	0x03BEB704 LDR X0, [X0 + 0x488]
	0x03BEB708 BL 0x1C16D08
	0x03BEB70C LDR X8, [X22 + 0x1B8]
	0x03BEB710 MOV X21, X0
	0x03BEB714 CBNZ X8, 0x3BEB72C
	0x03BEB718 ADRP X0, 0xFFFFFFFFFCF3D000
	0x03BEB71C ADD X0, X0, 0xD9
	0x03BEB720 BL 0x1C16CB8
	0x03BEB724 MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1544]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51298304
	010 Add X0, X0, 1978
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1544], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int16[] FromShortArray(System.IntPtr array)

Disassembly:
	0x03BEB728 STR X0, [X22 + 0x1B8]
	0x03BEB72C MOV X0, X21
	0x03BEB730 BLR X8
	0x03BEB734 MOV X21, X0
	0x03BEB738 ADRP X0, 0x573000
	0x03BEB73C LDR X0, [X0 + 0x490]
	0x03BEB740 BL 0x1C16D08
	0x03BEB744 MOV X22, X0
	0x03BEB748 ADRP X0, 0x573000
	0x03BEB74C LDR X0, [X0 + 0x498]
	0x03BEB750 BL 0x1C16D08
	0x03BEB754 ADRP X24, 0x7F8000
	0x03BEB758 LDR X8, [X24 + 0x2A8]
	0x03BEB75C MOV X23, X0
	0x03BEB760 CBNZ X8, 0x3BEB778

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1552]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51240960
	010 Add X0, X0, 2181
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1552], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32[] FromIntArray(System.IntPtr array)

Disassembly:
	0x03BEB764 ADRP X0, 0xFFFFFFFFFCF0D000
	0x03BEB768 ADD X0, X0, 0xAAE
	0x03BEB76C BL 0x1C16CB8
	0x03BEB770 MOV X8, X0
	0x03BEB774 STR X0, [X24 + 0x2A8]
	0x03BEB778 MOV X0, X20
	0x03BEB77C MOV X1, X22
	0x03BEB780 MOV X2, X23
	0x03BEB784 BLR X8
	0x03BEB788 MOV X22, X0
	0x03BEB78C ADRP X0, 0x573000
	0x03BEB790 LDR X0, [X0 + 0x4A0]
	0x03BEB794 BL 0x1C16D08
	0x03BEB798 MOV X23, X0
	0x03BEB79C ADRP X0, 0x573000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1560]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51306496
	010 Add X0, X0, 3218
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1560], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int64[] FromLongArray(System.IntPtr array)

Disassembly:
	0x03BEB7A0 LDR X0, [X0 + 0x4A8]
	0x03BEB7A4 BL 0x1C16D08
	0x03BEB7A8 ADRP X25, 0x7F8000
	0x03BEB7AC LDR X8, [X25 + 0x2B8]
	0x03BEB7B0 MOV X24, X0
	0x03BEB7B4 CBNZ X8, 0x3BEB7CC
	0x03BEB7B8 ADRP X0, 0xFFFFFFFFFCF05000
	0x03BEB7BC ADD X0, X0, 0x7C1
	0x03BEB7C0 BL 0x1C16CB8
	0x03BEB7C4 MOV X8, X0
	0x03BEB7C8 STR X0, [X25 + 0x2B8]
	0x03BEB7CC MOV X0, X21
	0x03BEB7D0 MOV X1, X23
	0x03BEB7D4 MOV X2, X24
	0x03BEB7D8 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1568]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51159040
	010 Add X0, X0, 1508
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1568], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single[] FromFloatArray(System.IntPtr array)

Disassembly:
	0x03BEB7DC MOV X23, X0
	0x03BEB7E0 ADRP X0, 0x54A000
	0x03BEB7E4 LDR X0, [X0 + 0xEE8]
	0x03BEB7E8 BL 0x1C16D08
	0x03BEB7EC MOV W1, W31
	0x03BEB7F0 BL 0x1C16D6C
	0x03BEB7F4 MOV X2, X0
	0x03BEB7F8 MOV X0, X19
	0x03BEB7FC MOV X1, X22
	0x03BEB800 BL 0x3BE7680
	0x03BEB804 MOV X22, X0
	0x03BEB808 ADRP X0, 0x54A000
	0x03BEB80C LDR X0, [X0 + 0xEE8]
	0x03BEB810 BL 0x1C16D08
	0x03BEB814 MOVZ W1, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1576]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51208192
	010 Add X0, X0, 1028
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1576], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Double[] FromDoubleArray(System.IntPtr array)

Disassembly:
	0x03BEB818 BL 0x1C16D6C
	0x03BEB81C MOV X2, X0
	0x03BEB820 CBNZ X0, 0x3BEB828
	0x03BEB824 BL 0x1C16F20
	0x03BEB828 LDR W8, [X2 + 0x18]
	0x03BEB82C CBNZ W8, 0x3BEB834
	0x03BEB830 BL 0x1C16F28
	0x03BEB834 STR X19, [X2 + 0x20]
	0x03BEB838 MOV X0, X21
	0x03BEB83C MOV X1, X23
	0x03BEB840 BL 0x3BE8BAC
	0x03BEB844 MOV X23, X0
	0x03BEB848 ADRP X0, 0x573000
	0x03BEB84C LDR X0, [X0 + 0x4B0]
	0x03BEB850 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1584]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51281920
	010 Add X0, X0, 2473
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1584], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr[] FromObjectArray(System.IntPtr array)

Disassembly:
	0x03BEB854 BL 0x1C16F10
	0x03BEB858 MOV X24, X0
	0x03BEB85C MOV X1, X22
	0x03BEB860 MOV X2, X23
	0x03BEB864 BL 0x3BEB91C
	0x03BEB868 ADRP X0, 0x573000
	0x03BEB86C LDR X0, [X0 + 0x4B8]
	0x03BEB870 BL 0x1C16D08
	0x03BEB874 MOV X1, X0
	0x03BEB878 MOV X0, X24
	0x03BEB87C BL 0x1C16DEC
	0x03BEB880 B 0x3BEB8A0
	0x03BEB884 B 0x3BEB8A0
	0x03BEB888 B 0x3BEB8A0
	0x03BEB88C B 0x3BEB8A0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1592]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51306496
	010 Add X0, X0, 3270
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1592], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 GetArrayLength(System.IntPtr array)

Disassembly:
	0x03BEB890 B 0x3BEB8A0
	0x03BEB894 B 0x3BEB8A0
	0x03BEB898 B 0x3BEB8A0
	0x03BEB89C B 0x3BEB8A0
	0x03BEB8A0 MOV X22, X0
	0x03BEB8A4 CMP W1, 0x1
	0x03BEB8A8 B.NE 0x3BEB8E0
	0x03BEB8AC MOV X0, X22
	0x03BEB8B0 BL 0x3EB1AD0
	0x03BEB8B4 LDR X23, [X0]
	0x03BEB8B8 BL 0x3EB1AE0
	0x03BEB8BC MOV X0, X19
	0x03BEB8C0 BL 0x3BEBA40
	0x03BEB8C4 MOV X0, X20
	0x03BEB8C8 BL 0x3BEBA40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1600]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51109888
	010 Add X0, X0, 376
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1600], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewBooleanArray(System.Int32 size)

Disassembly:
	0x03BEB8CC MOV X0, X21
	0x03BEB8D0 BL 0x3BEBA40
	0x03BEB8D4 CBZ X23, 0x3BEB690
	0x03BEB8D8 MOV X0, X23
	0x03BEB8DC BL 0x1C16F18
	0x03BEB8E0 MOV X23, X31
	0x03BEB8E4 B 0x3BEB8EC
	0x03BEB8E8 MOV X22, X0
	0x03BEB8EC MOV X0, X19
	0x03BEB8F0 BL 0x3BEBA40
	0x03BEB8F4 MOV X0, X20
	0x03BEB8F8 BL 0x3BEBA40
	0x03BEB8FC MOV X0, X21
	0x03BEB900 BL 0x3BEBA40
	0x03BEB904 CBNZ X23, 0x3BEB910

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1608]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51290112
	010 Add X0, X0, 2346
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1608], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewByteArray(System.Int32 size)

Disassembly:
	0x03BEB908 MOV X0, X22
	0x03BEB90C BL 0x1D2C690
	0x03BEB910 MOV X0, X23
	0x03BEB914 BL 0x1C16F18
	0x03BEB918 BL 0x1990590
	0x03BEB91C STP X30, X23, [X31 - 0x30]!
	0x03BEB920 STP X22, X21, [X31 + 0x10]
	0x03BEB924 STP X20, X19, [X31 + 0x20]
	0x03BEB928 ADRP X22, 0x7F8000
	0x03BEB92C ADRP X23, 0x508000
	0x03BEB930 LDRB W8, [X22 + 0x76C]
	0x03BEB934 LDR X23, [X23 + 0x7D0]
	0x03BEB938 MOV X19, X2
	0x03BEB93C MOV X21, X1
	0x03BEB940 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1616]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51273728
	010 Add X0, X0, 3017
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1616], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewSByteArray(System.Int32 size)

Disassembly:
	0x03BEB944 TBNZ X8, 0x0, 0x3BEB95C
	0x03BEB948 ADRP X0, 0x508000
	0x03BEB94C LDR X0, [X0 + 0x7D0]
	0x03BEB950 BL 0x1C16CF4
	0x03BEB954 MOVZ W8, 0x1
	0x03BEB958 STRB W8, [X22 + 0x76C]
	0x03BEB95C LDR X0, [X23]
	0x03BEB960 LDR W8, [X0 + 0xE0]
	0x03BEB964 CBNZ W8, 0x3BEB96C
	0x03BEB968 BL 0x1C16DFC
	0x03BEB96C MOV X0, X20
	0x03BEB970 MOV X1, X21
	0x03BEB974 MOV X2, X31
	0x03BEB978 BL 0x33B2C70
	0x03BEB97C STR X19, [X20 + 0x90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1616]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51273728
	010 Add X0, X0, 3017
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1616], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewCharArray(System.Int32 size)

Disassembly:
	0x03BEB980 LDP X20, X19, [X31 + 0x20]
	0x03BEB984 LDP X22, X21, [X31 + 0x10]
	0x03BEB988 LDP X30, X23, [X31], #0x30
	0x03BEB98C RET
	0x03BEB990 STR X30, [X31 - 0x20]!
	0x03BEB994 STP X20, X19, [X31 + 0x10]
	0x03BEB998 MOV X1, X31
	0x03BEB99C MOV X2, X31
	0x03BEB9A0 MOV X19, X0
	0x03BEB9A4 BL 0x33C5D2C
	0x03BEB9A8 TBZ X0, 0x0, 0x3BEB9DC
	0x03BEB9AC ADRP X20, 0x7F8000
	0x03BEB9B0 LDR X1, [X20 + 0x240]
	0x03BEB9B4 CBNZ X1, 0x3BEB9CC
	0x03BEB9B8 ADRP X0, 0xFFFFFFFFFCF2F000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1624]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51191808
	010 Add X0, X0, 744
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1624], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewShortArray(System.Int32 size)

Disassembly:
	0x03BEB9BC ADD X0, X0, 0x41D
	0x03BEB9C0 BL 0x1C16CB8
	0x03BEB9C4 MOV X1, X0
	0x03BEB9C8 STR X0, [X20 + 0x240]
	0x03BEB9CC MOV X0, X19
	0x03BEB9D0 LDP X20, X19, [X31 + 0x10]
	0x03BEB9D4 LDR X30, [X31], #0x20
	0x03BEB9D8 BR X1
	0x03BEB9DC LDP X20, X19, [X31 + 0x10]
	0x03BEB9E0 LDR X30, [X31], #0x20
	0x03BEB9E4 RET
	0x03BEB9E8 STR X30, [X31 - 0x20]!
	0x03BEB9EC STP X20, X19, [X31 + 0x10]
	0x03BEB9F0 MOV X1, X31
	0x03BEB9F4 MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1632]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51224576
	010 Add X0, X0, 2800
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1632], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewIntArray(System.Int32 size)

Disassembly:
	0x03BEB9F8 MOV X19, X0
	0x03BEB9FC BL 0x33C5D2C
	0x03BEBA00 TBZ X0, 0x0, 0x3BEBA34
	0x03BEBA04 ADRP X20, 0x7F8000
	0x03BEBA08 LDR X1, [X20 + 0x258]
	0x03BEBA0C CBNZ X1, 0x3BEBA24
	0x03BEBA10 ADRP X0, 0xFFFFFFFFFCF31000
	0x03BEBA14 ADD X0, X0, 0x766
	0x03BEBA18 BL 0x1C16CB8
	0x03BEBA1C MOV X1, X0
	0x03BEBA20 STR X0, [X20 + 0x258]
	0x03BEBA24 MOV X0, X19
	0x03BEBA28 LDP X20, X19, [X31 + 0x10]
	0x03BEBA2C LDR X30, [X31], #0x20
	0x03BEBA30 BR X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1640]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51273728
	010 Add X0, X0, 3069
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1640], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewLongArray(System.Int32 size)

Disassembly:
	0x03BEBA34 LDP X20, X19, [X31 + 0x10]
	0x03BEBA38 LDR X30, [X31], #0x20
	0x03BEBA3C RET
	0x03BEBA40 STR X30, [X31 - 0x20]!
	0x03BEBA44 STP X20, X19, [X31 + 0x10]
	0x03BEBA48 MOV X1, X31
	0x03BEBA4C MOV X2, X31
	0x03BEBA50 MOV X19, X0
	0x03BEBA54 BL 0x33C5D2C
	0x03BEBA58 TBZ X0, 0x0, 0x3BEBA8C
	0x03BEBA5C ADRP X20, 0x7F8000
	0x03BEBA60 LDR X1, [X20 + 0x268]
	0x03BEBA64 CBNZ X1, 0x3BEBA7C
	0x03BEBA68 ADRP X0, 0xFFFFFFFFFCF25000
	0x03BEBA6C ADD X0, X0, 0x96C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1648]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51167232
	010 Add X0, X0, 1131
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1648], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewFloatArray(System.Int32 size)

Disassembly:
	0x03BEBA70 BL 0x1C16CB8
	0x03BEBA74 MOV X1, X0
	0x03BEBA78 STR X0, [X20 + 0x268]
	0x03BEBA7C MOV X0, X19
	0x03BEBA80 LDP X20, X19, [X31 + 0x10]
	0x03BEBA84 LDR X30, [X31], #0x20
	0x03BEBA88 BR X1
	0x03BEBA8C LDP X20, X19, [X31 + 0x10]
	0x03BEBA90 LDR X30, [X31], #0x20
	0x03BEBA94 RET
	0x03BEBA98 STR X30, [X31 - 0x20]!
	0x03BEBA9C STP X20, X19, [X31 + 0x10]
	0x03BEBAA0 ADRP X20, 0x7F8000
	0x03BEBAA4 LDR X8, [X20 + 0x2C8]
	0x03BEBAA8 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1656]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51355648
	010 Add X0, X0, 2246
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1656], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewDoubleArray(System.Int32 size)

Disassembly:
	0x03BEBAAC CBNZ X8, 0x3BEBAC4
	0x03BEBAB0 ADRP X0, 0xFFFFFFFFFCF11000
	0x03BEBAB4 ADD X0, X0, 0xB01
	0x03BEBAB8 BL 0x1C16CB8
	0x03BEBABC MOV X8, X0
	0x03BEBAC0 STR X0, [X20 + 0x2C8]
	0x03BEBAC4 MOV X0, X19
	0x03BEBAC8 BLR X8
	0x03BEBACC MOV X19, X0
	0x03BEBAD0 BL 0x3BEB648
	0x03BEBAD4 MOV X0, X19
	0x03BEBAD8 LDP X20, X19, [X31 + 0x10]
	0x03BEBADC LDR X30, [X31], #0x20
	0x03BEBAE0 RET
	0x03BEBAE4 CMP W1, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F9000
	005 Move X1, [X20+1664]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51175424
	010 Add X0, X0, 1953
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1664], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr NewObjectArray(System.Int32 size, System.IntPtr clazz, System.IntPtr obj)

Disassembly:
	0x03BEBAE8 MOV X20, X0
	0x03BEBAEC B.NE 0x3BEBB10
	0x03BEBAF0 MOV X0, X20
	0x03BEBAF4 BL 0x3EB1AD0
	0x03BEBAF8 LDR X19, [X0]
	0x03BEBAFC BL 0x3EB1AE0
	0x03BEBB00 BL 0x3BEB648
	0x03BEBB04 CBZ X19, 0x3BEBAD4
	0x03BEBB08 MOV X0, X19
	0x03BEBB0C BL 0x1C16F18
	0x03BEBB10 MOV X19, X31
	0x03BEBB14 B 0x3BEBB1C
	0x03BEBB18 MOV X20, X0
	0x03BEBB1C BL 0x3BEB648
	0x03BEBB20 CBNZ X19, 0x3BEBB2C
	0x03BEBB24 MOV X0, X20
	0x03BEBB28 BL 0x1D2C690
	0x03BEBB2C MOV X0, X19
	0x03BEBB30 BL 0x1C16F18
	0x03BEBB34 BL 0x1990590
	0x03BEBB38 STR X30, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1672]
	008 Move X19, X2
	009 Move X20, X1
	010 Move W21, W0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51298304
	014 Add X0, X0, 2031
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1672], X0
	018 Move W0, W21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Boolean GetBooleanArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBB3C STP X20, X19, [X31 + 0x10]
	0x03BEBB40 ADRP X20, 0x7F8000
	0x03BEBB44 LDR X8, [X20 + 0x2E0]
	0x03BEBB48 MOV X19, X0
	0x03BEBB4C CBNZ X8, 0x3BEBB64
	0x03BEBB50 ADRP X0, 0xFFFFFFFFFCF15000
	0x03BEBB54 ADD X0, X0, 0x7FA
	0x03BEBB58 BL 0x1C16CB8
	0x03BEBB5C MOV X8, X0
	0x03BEBB60 STR X0, [X20 + 0x2E0]
	0x03BEBB64 MOV X0, X19
	0x03BEBB68 BLR X8
	0x03BEBB6C MOV X19, X0
	0x03BEBB70 BL 0x3BEB648
	0x03BEBB74 MOV X0, X19
	0x03BEBB78 LDP X20, X19, [X31 + 0x10]
	0x03BEBB7C LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1680]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51331072
	012 Add X0, X0, 3217
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1680], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Byte GetByteArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBB80 RET
	0x03BEBB84 CMP W1, 0x1
	0x03BEBB88 MOV X20, X0
	0x03BEBB8C B.NE 0x3BEBBB0
	0x03BEBB90 MOV X0, X20
	0x03BEBB94 BL 0x3EB1AD0
	0x03BEBB98 LDR X19, [X0]
	0x03BEBB9C BL 0x3EB1AE0
	0x03BEBBA0 BL 0x3BEB648
	0x03BEBBA4 CBZ X19, 0x3BEBB74
	0x03BEBBA8 MOV X0, X19
	0x03BEBBAC BL 0x1C16F18
	0x03BEBBB0 MOV X19, X31
	0x03BEBBB4 B 0x3BEBBBC
	0x03BEBBB8 MOV X20, X0
	0x03BEBBBC BL 0x3BEB648
	0x03BEBBC0 CBNZ X19, 0x3BEBBCC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1688]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51355648
	012 Add X0, X0, 2298
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1688], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.SByte GetSByteArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBBC4 MOV X0, X20
	0x03BEBBC8 BL 0x1D2C690
	0x03BEBBCC MOV X0, X19
	0x03BEBBD0 BL 0x1C16F18
	0x03BEBBD4 BL 0x1990590
	0x03BEBBD8 STR X30, [X31 - 0x30]!
	0x03BEBBDC STP X22, X21, [X31 + 0x10]
	0x03BEBBE0 STP X20, X19, [X31 + 0x20]
	0x03BEBBE4 ADRP X22, 0x7F8000
	0x03BEBBE8 LDR X8, [X22 + 0x2B0]
	0x03BEBBEC MOV X19, X2
	0x03BEBBF0 MOV X20, X1
	0x03BEBBF4 MOV X21, X0
	0x03BEBBF8 CBNZ X8, 0x3BEBC10
	0x03BEBBFC ADRP X0, 0xFFFFFFFFFCF1F000
	0x03BEBC00 ADD X0, X0, 0xBB8
	0x03BEBC04 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1688]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51355648
	012 Add X0, X0, 2298
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1688], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Char GetCharArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBC08 MOV X8, X0
	0x03BEBC0C STR X0, [X22 + 0x2B0]
	0x03BEBC10 MOV X0, X21
	0x03BEBC14 MOV X1, X20
	0x03BEBC18 MOV X2, X19
	0x03BEBC1C BLR X8
	0x03BEBC20 MOV X19, X0
	0x03BEBC24 BL 0x3BEB648
	0x03BEBC28 MOV X0, X19
	0x03BEBC2C LDP X20, X19, [X31 + 0x20]
	0x03BEBC30 LDP X22, X21, [X31 + 0x10]
	0x03BEBC34 LDR X30, [X31], #0x30
	0x03BEBC38 RET
	0x03BEBC3C CMP W1, 0x1
	0x03BEBC40 MOV X20, X0
	0x03BEBC44 B.NE 0x3BEBC68
	0x03BEBC48 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1696]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51224576
	012 Add X0, X0, 2852
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1696], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int16 GetShortArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBC4C BL 0x3EB1AD0
	0x03BEBC50 LDR X19, [X0]
	0x03BEBC54 BL 0x3EB1AE0
	0x03BEBC58 BL 0x3BEB648
	0x03BEBC5C CBZ X19, 0x3BEBC28
	0x03BEBC60 MOV X0, X19
	0x03BEBC64 BL 0x1C16F18
	0x03BEBC68 MOV X19, X31
	0x03BEBC6C B 0x3BEBC74
	0x03BEBC70 MOV X20, X0
	0x03BEBC74 BL 0x3BEB648
	0x03BEBC78 CBNZ X19, 0x3BEBC84
	0x03BEBC7C MOV X0, X20
	0x03BEBC80 BL 0x1D2C690
	0x03BEBC84 MOV X0, X19
	0x03BEBC88 BL 0x1C16F18
	0x03BEBC8C BL 0x1990590

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1704]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51150848
	012 Add X0, X0, 2873
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1704], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 GetIntArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBC90 STR X30, [X31 - 0x30]!
	0x03BEBC94 STP X22, X21, [X31 + 0x10]
	0x03BEBC98 STP X20, X19, [X31 + 0x20]
	0x03BEBC9C ADRP X22, 0x7F8000
	0x03BEBCA0 LDR X8, [X22 + 0x2C0]
	0x03BEBCA4 MOV X19, X2
	0x03BEBCA8 MOV X20, X1
	0x03BEBCAC MOV X21, X0
	0x03BEBCB0 CBNZ X8, 0x3BEBCC8
	0x03BEBCB4 ADRP X0, 0xFFFFFFFFFCF3B000
	0x03BEBCB8 ADD X0, X0, 0x894
	0x03BEBCBC BL 0x1C16CB8
	0x03BEBCC0 MOV X8, X0
	0x03BEBCC4 STR X0, [X22 + 0x2C0]
	0x03BEBCC8 MOV X0, X21
	0x03BEBCCC MOV X1, X20
	0x03BEBCD0 MOV X2, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1712]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51339264
	012 Add X0, X0, 3297
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1712], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int64 GetLongArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBCD4 BLR X8
	0x03BEBCD8 MOV X19, X0
	0x03BEBCDC BL 0x3BEB648
	0x03BEBCE0 MOV X0, X19
	0x03BEBCE4 LDP X20, X19, [X31 + 0x20]
	0x03BEBCE8 LDP X22, X21, [X31 + 0x10]
	0x03BEBCEC LDR X30, [X31], #0x30
	0x03BEBCF0 RET
	0x03BEBCF4 CMP W1, 0x1
	0x03BEBCF8 MOV X20, X0
	0x03BEBCFC B.NE 0x3BEBD20
	0x03BEBD00 MOV X0, X20
	0x03BEBD04 BL 0x3EB1AD0
	0x03BEBD08 LDR X19, [X0]
	0x03BEBD0C BL 0x3EB1AE0
	0x03BEBD10 BL 0x3BEB648
	0x03BEBD14 CBZ X19, 0x3BEBCE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1720]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51183616
	012 Add X0, X0, 1401
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1720], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Single GetFloatArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBD18 MOV X0, X19
	0x03BEBD1C BL 0x1C16F18
	0x03BEBD20 MOV X19, X31
	0x03BEBD24 B 0x3BEBD2C
	0x03BEBD28 MOV X20, X0
	0x03BEBD2C BL 0x3BEB648
	0x03BEBD30 CBNZ X19, 0x3BEBD3C
	0x03BEBD34 MOV X0, X20
	0x03BEBD38 BL 0x1D2C690
	0x03BEBD3C MOV X0, X19
	0x03BEBD40 BL 0x1C16F18
	0x03BEBD44 BL 0x1990590
	0x03BEBD48 STR X30, [X31 - 0x20]!
	0x03BEBD4C STP X20, X19, [X31 + 0x10]
	0x03BEBD50 ADRP X20, 0x7F8000
	0x03BEBD54 LDR X8, [X20 + 0x1C0]
	0x03BEBD58 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1728]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51167232
	012 Add X0, X0, 1182
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1728], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Double GetDoubleArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBD5C CBNZ X8, 0x3BEBD74
	0x03BEBD60 ADRP X0, 0xFFFFFFFFFCF05000
	0x03BEBD64 ADD X0, X0, 0x753
	0x03BEBD68 BL 0x1C16CB8
	0x03BEBD6C MOV X8, X0
	0x03BEBD70 STR X0, [X20 + 0x1C0]
	0x03BEBD74 MOV X0, X19
	0x03BEBD78 BLR X8
	0x03BEBD7C MOV X19, X0
	0x03BEBD80 BL 0x3BEB648
	0x03BEBD84 MOV X0, X19
	0x03BEBD88 LDP X20, X19, [X31 + 0x10]
	0x03BEBD8C LDR X30, [X31], #0x20
	0x03BEBD90 RET
	0x03BEBD94 CMP W1, 0x1
	0x03BEBD98 MOV X20, X0
	0x03BEBD9C B.NE 0x3BEBDC0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1736]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51224576
	012 Add X0, X0, 2924
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1736], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr GetObjectArrayElement(System.IntPtr array, System.Int32 index)

Disassembly:
	0x03BEBDA0 MOV X0, X20
	0x03BEBDA4 BL 0x3EB1AD0
	0x03BEBDA8 LDR X19, [X0]
	0x03BEBDAC BL 0x3EB1AE0
	0x03BEBDB0 BL 0x3BEB648
	0x03BEBDB4 CBZ X19, 0x3BEBD84
	0x03BEBDB8 MOV X0, X19
	0x03BEBDBC BL 0x1C16F18
	0x03BEBDC0 MOV X19, X31
	0x03BEBDC4 B 0x3BEBDCC
	0x03BEBDC8 MOV X20, X0
	0x03BEBDCC BL 0x3BEB648
	0x03BEBDD0 CBNZ X19, 0x3BEBDDC
	0x03BEBDD4 MOV X0, X20
	0x03BEBDD8 BL 0x1D2C690
	0x03BEBDDC MOV X0, X19
	0x03BEBDE0 BL 0x1C16F18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F9000
	006 Move X2, [X21+1744]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51183616
	012 Add X0, X0, 1473
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1744], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void SetBooleanArrayElement(System.IntPtr array, System.Int32 index, System.Byte val)

Disassembly:
	0x03BEBDE4 BL 0x1990590
	0x03BEBDE8 STR X30, [X31 - 0x20]!
	0x03BEBDEC STP X20, X19, [X31 + 0x10]
	0x03BEBDF0 BL 0x3BE71E4
	0x03BEBDF4 MOV X19, X0
	0x03BEBDF8 BL 0x3BEB648
	0x03BEBDFC MOV X0, X19
	0x03BEBE00 LDP X20, X19, [X31 + 0x10]
	0x03BEBE04 LDR X30, [X31], #0x20
	0x03BEBE08 RET
	0x03BEBE0C CMP W1, 0x1
	0x03BEBE10 MOV X20, X0
	0x03BEBE14 B.NE 0x3BEBE38
	0x03BEBE18 MOV X0, X20
	0x03BEBE1C BL 0x3EB1AD0
	0x03BEBE20 LDR X19, [X0]
	0x03BEBE24 BL 0x3EB1AE0
	0x03BEBE28 BL 0x3BEB648
	0x03BEBE2C CBZ X19, 0x3BEBDFC
	0x03BEBE30 MOV X0, X19
	0x03BEBE34 BL 0x1C16F18
	0x03BEBE38 MOV X19, X31

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1752]
	008 Move W20, W2
	009 Move W19, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51249152
	014 Add X0, X0, 3392
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1752], X0
	018 And W31, W20, 255
	019 Move X0, X21
	020 Move W1, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 NotImplemented "Instruction CSET not yet implemented."
	026 Move X30, [X31+48]
	027 CallNoReturn X3

Method: System.Void SetBooleanArrayElement(System.IntPtr array, System.Int32 index, System.Boolean val)

Disassembly:
	0x03BEBE3C B 0x3BEBE44
	0x03BEBE40 MOV X20, X0
	0x03BEBE44 BL 0x3BEB648
	0x03BEBE48 CBNZ X19, 0x3BEBE54
	0x03BEBE4C MOV X0, X20
	0x03BEBE50 BL 0x1D2C690
	0x03BEBE54 MOV X0, X19
	0x03BEBE58 BL 0x1C16F18
	0x03BEBE5C BL 0x1990590
	0x03BEBE60 STR X30, [X31 - 0x30]!
	0x03BEBE64 STP X22, X21, [X31 + 0x10]
	0x03BEBE68 STP X20, X19, [X31 + 0x20]
	0x03BEBE6C ADRP X22, 0x7F8000
	0x03BEBE70 LDR X8, [X22 + 0x558]
	0x03BEBE74 MOV X19, X2
	0x03BEBE78 MOV X20, X1
	0x03BEBE7C MOV X21, X0
	0x03BEBE80 CBNZ X8, 0x3BEBE98
	0x03BEBE84 ADRP X0, 0xFFFFFFFFFCF17000
	0x03BEBE88 ADD X0, X0, 0x8F9
	0x03BEBE8C BL 0x1C16CB8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1752]
	008 Move W20, W2
	009 Move W19, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51249152
	014 Add X0, X0, 3392
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1752], X0
	018 And W2, W20, 1
	019 Move X0, X21
	020 Move W1, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetByteArrayElement(System.IntPtr array, System.Int32 index, System.SByte val)

Disassembly:
	0x03BEBE90 MOV X8, X0
	0x03BEBE94 STR X0, [X22 + 0x558]
	0x03BEBE98 MOV X0, X21
	0x03BEBE9C MOV X1, X20
	0x03BEBEA0 MOV X2, X19
	0x03BEBEA4 BLR X8
	0x03BEBEA8 LDP X20, X19, [X31 + 0x20]
	0x03BEBEAC LDP X22, X21, [X31 + 0x10]
	0x03BEBEB0 LDR X30, [X31], #0x30
	0x03BEBEB4 B 0x3BEB648
	0x03BEBEB8 CMP W1, 0x1
	0x03BEBEBC MOV X20, X0
	0x03BEBEC0 B.NE 0x3BEBEEC
	0x03BEBEC4 MOV X0, X20
	0x03BEBEC8 BL 0x3EB1AD0
	0x03BEBECC LDR X19, [X0]
	0x03BEBED0 BL 0x3EB1AE0
	0x03BEBED4 BL 0x3BEB648
	0x03BEBED8 CBNZ X19, 0x3BEBEF4
	0x03BEBEDC LDP X20, X19, [X31 + 0x20]
	0x03BEBEE0 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1760]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51331072
	014 Add X0, X0, 3292
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1760], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetSByteArrayElement(System.IntPtr array, System.Int32 index, System.SByte val)

Disassembly:
	0x03BEBEE4 LDR X30, [X31], #0x30
	0x03BEBEE8 RET
	0x03BEBEEC MOV X19, X31
	0x03BEBEF0 B 0x3BEBF00
	0x03BEBEF4 MOV X0, X19
	0x03BEBEF8 BL 0x1C16F18
	0x03BEBEFC MOV X20, X0
	0x03BEBF00 BL 0x3BEB648
	0x03BEBF04 CBNZ X19, 0x3BEBF10
	0x03BEBF08 MOV X0, X20
	0x03BEBF0C BL 0x1D2C690
	0x03BEBF10 MOV X0, X19
	0x03BEBF14 BL 0x1C16F18
	0x03BEBF18 BL 0x1990590
	0x03BEBF1C STR X30, [X31 - 0x30]!
	0x03BEBF20 STP X22, X21, [X31 + 0x10]
	0x03BEBF24 STP X20, X19, [X31 + 0x20]
	0x03BEBF28 ADRP X22, 0x7F8000
	0x03BEBF2C LDR X8, [X22 + 0x550]
	0x03BEBF30 MOV X19, X2
	0x03BEBF34 MOV X20, X1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1760]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51331072
	014 Add X0, X0, 3292
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1760], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetCharArrayElement(System.IntPtr array, System.Int32 index, System.Char val)

Disassembly:
	0x03BEBF38 MOV X21, X0
	0x03BEBF3C CBNZ X8, 0x3BEBF54
	0x03BEBF40 ADRP X0, 0xFFFFFFFFFCF41000
	0x03BEBF44 ADD X0, X0, 0x120
	0x03BEBF48 BL 0x1C16CB8
	0x03BEBF4C MOV X8, X0
	0x03BEBF50 STR X0, [X22 + 0x550]
	0x03BEBF54 MOV X0, X21
	0x03BEBF58 MOV X1, X20
	0x03BEBF5C MOV X2, X19
	0x03BEBF60 BLR X8
	0x03BEBF64 LDP X20, X19, [X31 + 0x20]
	0x03BEBF68 LDP X22, X21, [X31 + 0x10]
	0x03BEBF6C LDR X30, [X31], #0x30
	0x03BEBF70 B 0x3BEB648
	0x03BEBF74 CMP W1, 0x1
	0x03BEBF78 MOV X20, X0
	0x03BEBF7C B.NE 0x3BEBFA8
	0x03BEBF80 MOV X0, X20
	0x03BEBF84 BL 0x3EB1AD0
	0x03BEBF88 LDR X19, [X0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1768]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51306496
	014 Add X0, X0, 3325
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1768], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetShortArrayElement(System.IntPtr array, System.Int32 index, System.Int16 val)

Disassembly:
	0x03BEBF8C BL 0x3EB1AE0
	0x03BEBF90 BL 0x3BEB648
	0x03BEBF94 CBNZ X19, 0x3BEBFB0
	0x03BEBF98 LDP X20, X19, [X31 + 0x20]
	0x03BEBF9C LDP X22, X21, [X31 + 0x10]
	0x03BEBFA0 LDR X30, [X31], #0x30
	0x03BEBFA4 RET
	0x03BEBFA8 MOV X19, X31
	0x03BEBFAC B 0x3BEBFBC
	0x03BEBFB0 MOV X0, X19
	0x03BEBFB4 BL 0x1C16F18
	0x03BEBFB8 MOV X20, X0
	0x03BEBFBC BL 0x3BEB648
	0x03BEBFC0 CBNZ X19, 0x3BEBFCC
	0x03BEBFC4 MOV X0, X20
	0x03BEBFC8 BL 0x1D2C690
	0x03BEBFCC MOV X0, X19
	0x03BEBFD0 BL 0x1C16F18
	0x03BEBFD4 BL 0x1990590
	0x03BEBFD8 STR X30, [X31 - 0x30]!
	0x03BEBFDC STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1776]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51232768
	014 Add X0, X0, 2490
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1776], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetIntArrayElement(System.IntPtr array, System.Int32 index, System.Int32 val)

Disassembly:
	0x03BEBFE0 STP X20, X19, [X31 + 0x20]
	0x03BEBFE4 ADRP X22, 0x7F8000
	0x03BEBFE8 LDR X8, [X22 + 0x570]
	0x03BEBFEC MOV W19, W2
	0x03BEBFF0 MOV X20, X1
	0x03BEBFF4 MOV X21, X0
	0x03BEBFF8 CBNZ X8, 0x3BEC010
	0x03BEBFFC ADRP X0, 0xFFFFFFFFFCF0B000
	0x03BEC000 ADD X0, X0, 0xBE7
	0x03BEC004 BL 0x1C16CB8
	0x03BEC008 MOV X8, X0
	0x03BEC00C STR X0, [X22 + 0x570]
	0x03BEC010 MOV X0, X21
	0x03BEC014 MOV X1, X20
	0x03BEC018 MOV W2, W19
	0x03BEC01C BLR X8
	0x03BEC020 LDP X20, X19, [X31 + 0x20]
	0x03BEC024 LDP X22, X21, [X31 + 0x10]
	0x03BEC028 LDR X30, [X31], #0x30
	0x03BEC02C B 0x3BEB648
	0x03BEC030 CMP W1, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F9000
	007 Move X3, [X22+1784]
	008 Move W19, W2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51179520
	014 Add X0, X0, 2006
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1784], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetLongArrayElement(System.IntPtr array, System.Int32 index, System.Int64 val)

Disassembly:
	0x03BEC034 MOV X20, X0
	0x03BEC038 B.NE 0x3BEC064
	0x03BEC03C MOV X0, X20
	0x03BEC040 BL 0x3EB1AD0
	0x03BEC044 LDR X19, [X0]
	0x03BEC048 BL 0x3EB1AE0
	0x03BEC04C BL 0x3BEB648
	0x03BEC050 CBNZ X19, 0x3BEC06C
	0x03BEC054 LDP X20, X19, [X31 + 0x20]
	0x03BEC058 LDP X22, X21, [X31 + 0x10]
	0x03BEC05C LDR X30, [X31], #0x30
	0x03BEC060 RET
	0x03BEC064 MOV X19, X31
	0x03BEC068 B 0x3BEC078
	0x03BEC06C MOV X0, X19
	0x03BEC070 BL 0x1C16F18
	0x03BEC074 MOV X20, X0
	0x03BEC078 BL 0x3BEB648
	0x03BEC07C CBNZ X19, 0x3BEC088
	0x03BEC080 MOV X0, X20
	0x03BEC084 BL 0x1D2C690

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F8000
	007 Move X3, [X22+1792]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51113984
	014 Add X0, X0, 430
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1792], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetFloatArrayElement(System.IntPtr array, System.Int32 index, System.Single val)

Disassembly:
	0x03BEC088 MOV X0, X19
	0x03BEC08C BL 0x1C16F18
	0x03BEC090 BL 0x1990590
	0x03BEC094 STR D8, [X31 - 0x30]!
	0x03BEC098 STP X30, X21, [X31 + 0x10]
	0x03BEC09C STP X20, X19, [X31 + 0x20]
	0x03BEC0A0 ADRP X21, 0x7F7000
	0x03BEC0A4 LDR X8, [X21 + 0x598]
	0x03BEC0A8 MOV V8.16B, V0.16B
	0x03BEC0AC MOV X19, X1
	0x03BEC0B0 MOV X20, X0
	0x03BEC0B4 CBNZ X8, 0x3BEC0CC
	0x03BEC0B8 ADRP X0, 0xFFFFFFFFFCF16000
	0x03BEC0BC ADD X0, X0, 0x951
	0x03BEC0C0 BL 0x1C16CB8
	0x03BEC0C4 MOV X8, X0
	0x03BEC0C8 STR X0, [X21 + 0x598]
	0x03BEC0CC MOV X0, X20
	0x03BEC0D0 MOV X1, X19
	0x03BEC0D4 MOV V0.16B, V8.16B
	0x03BEC0D8 BLR X8

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7F8000
	007 Move X2, [X21+1800]
	008 Move V8, V0
	009 Move W19, W1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51171328
	014 Add X0, X0, 1255
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+1800], X0
	018 Move X0, X20
	019 Move W1, W19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.Void SetDoubleArrayElement(System.IntPtr array, System.Int32 index, System.Double val)

Disassembly:
	0x03BEC0DC LDP X20, X19, [X31 + 0x20]
	0x03BEC0E0 LDP X30, X21, [X31 + 0x10]
	0x03BEC0E4 LDR V8, [X31], #0x30
	0x03BEC0E8 B 0x3BEB648
	0x03BEC0EC CMP W1, 0x1
	0x03BEC0F0 MOV X20, X0
	0x03BEC0F4 B.NE 0x3BEC120
	0x03BEC0F8 MOV X0, X20
	0x03BEC0FC BL 0x3EB1AD0
	0x03BEC100 LDR X19, [X0]
	0x03BEC104 BL 0x3EB1AE0
	0x03BEC108 BL 0x3BEB648
	0x03BEC10C CBNZ X19, 0x3BEC128
	0x03BEC110 LDP X20, X19, [X31 + 0x20]
	0x03BEC114 LDP X30, X21, [X31 + 0x10]
	0x03BEC118 LDR V8, [X31], #0x30
	0x03BEC11C RET
	0x03BEC120 MOV X19, X31
	0x03BEC124 B 0x3BEC134
	0x03BEC128 MOV X0, X19
	0x03BEC12C BL 0x1C16F18

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7F8000
	007 Move X2, [X21+1808]
	008 Move V8, V0
	009 Move W19, W1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51359744
	014 Add X0, X0, 2371
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+1808], X0
	018 Move X0, X20
	019 Move W1, W19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.Void SetObjectArrayElement(System.IntPtr array, System.Int32 index, System.IntPtr obj)

Disassembly:
	0x03BEC130 MOV X20, X0
	0x03BEC134 BL 0x3BEB648
	0x03BEC138 CBNZ X19, 0x3BEC144
	0x03BEC13C MOV X0, X20
	0x03BEC140 BL 0x1D2C690
	0x03BEC144 MOV X0, X19
	0x03BEC148 BL 0x1C16F18
	0x03BEC14C BL 0x1990590
	0x03BEC150 STR D8, [X31 - 0x30]!
	0x03BEC154 STP X30, X21, [X31 + 0x10]
	0x03BEC158 STP X20, X19, [X31 + 0x20]
	0x03BEC15C ADRP X21, 0x7F7000
	0x03BEC160 LDR X8, [X21 + 0x590]
	0x03BEC164 MOV V8.16B, V0.16B
	0x03BEC168 MOV X19, X1
	0x03BEC16C MOV X20, X0
	0x03BEC170 CBNZ X8, 0x3BEC188
	0x03BEC174 ADRP X0, 0xFFFFFFFFFCF1C000
	0x03BEC178 ADD X0, X0, 0x9E8
	0x03BEC17C BL 0x1C16CB8
	0x03BEC180 MOV X8, X0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F8000
	007 Move X3, [X22+1816]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51310592
	014 Add X0, X0, 3409
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1816], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.IntPtr NewDirectByteBuffer(System.Byte* buffer, System.Int64 capacity)

Disassembly:
	0x03BEC184 STR X0, [X21 + 0x590]
	0x03BEC188 MOV X0, X20
	0x03BEC18C MOV X1, X19
	0x03BEC190 MOV V0.16B, V8.16B
	0x03BEC194 BLR X8
	0x03BEC198 LDP X20, X19, [X31 + 0x20]
	0x03BEC19C LDP X30, X21, [X31 + 0x10]
	0x03BEC1A0 LDR V8, [X31], #0x30
	0x03BEC1A4 B 0x3BEB648
	0x03BEC1A8 CMP W1, 0x1
	0x03BEC1AC MOV X20, X0
	0x03BEC1B0 B.NE 0x3BEC1DC
	0x03BEC1B4 MOV X0, X20
	0x03BEC1B8 BL 0x3EB1AD0
	0x03BEC1BC LDR X19, [X0]
	0x03BEC1C0 BL 0x3EB1AE0
	0x03BEC1C4 BL 0x3BEB648

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x7F8000
	006 Move X2, [X21+1824]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51236864
	012 Add X0, X0, 2576
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1824], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr NewDirectByteBuffer(Unity.Collections.NativeArray`1<System.Byte> buffer)

Disassembly:
	0x03BEC1C8 CBNZ X19, 0x3BEC1E4
	0x03BEC1CC LDP X20, X19, [X31 + 0x20]
	0x03BEC1D0 LDP X30, X21, [X31 + 0x10]
	0x03BEC1D4 LDR V8, [X31], #0x30
	0x03BEC1D8 RET
	0x03BEC1DC MOV X19, X31
	0x03BEC1E0 B 0x3BEC1F0
	0x03BEC1E4 MOV X0, X19
	0x03BEC1E8 BL 0x1C16F18
	0x03BEC1EC MOV X20, X0
	0x03BEC1F0 BL 0x3BEB648
	0x03BEC1F4 CBNZ X19, 0x3BEC200
	0x03BEC1F8 MOV X0, X20
	0x03BEC1FC BL 0x1D2C690
	0x03BEC200 MOV X0, X19
	0x03BEC204 BL 0x1C16F18
	0x03BEC208 BL 0x1990590
	0x03BEC20C STR X30, [X31 - 0x30]!
	0x03BEC210 STP X22, X21, [X31 + 0x10]
	0x03BEC214 STP X20, X19, [X31 + 0x20]
	0x03BEC218 ADRP X22, 0x7F7000
	0x03BEC21C LDR X8, [X22 + 0x588]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7F8000
	007 Move X22, 0x573000
	008 Move W8, [X21+1832]
	009 Move X22, [X22+1120]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x573000
	017 Move X0, [X0+1120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1832], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call 0x227ADEC, X0
	030 Return X0

Method: System.IntPtr NewDirectByteBuffer(Unity.Collections.NativeArray`1<System.SByte> buffer)

Disassembly:
	0x03BEC220 MOV X19, X2
	0x03BEC224 MOV X20, X1
	0x03BEC228 MOV X21, X0
	0x03BEC22C CBNZ X8, 0x3BEC244
	0x03BEC230 ADRP X0, 0xFFFFFFFFFCF28000
	0x03BEC234 ADD X0, X0, 0x36E
	0x03BEC238 BL 0x1C16CB8
	0x03BEC23C MOV X8, X0
	0x03BEC240 STR X0, [X22 + 0x588]
	0x03BEC244 MOV X0, X21
	0x03BEC248 MOV X1, X20
	0x03BEC24C MOV X2, X19
	0x03BEC250 BLR X8
	0x03BEC254 LDP X20, X19, [X31 + 0x20]
	0x03BEC258 LDP X22, X21, [X31 + 0x10]
	0x03BEC25C LDR X30, [X31], #0x30
	0x03BEC260 B 0x3BEB648
	0x03BEC264 CMP W1, 0x1
	0x03BEC268 MOV X20, X0
	0x03BEC26C B.NE 0x3BEC298
	0x03BEC270 MOV X0, X20
	0x03BEC274 BL 0x3EB1AD0

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x7F8000
	007 Move X22, 0x573000
	008 Move W8, [X21+1833]
	009 Move X22, [X22+1128]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x573000
	017 Move X0, [X0+1128]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1833], W8
	021 Move X2, [X22]
	022 Move X0, X20
	023 Move X1, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Call AndroidJNI.NewDirectByteBufferFromNativeArray, X0
	030 Return X0

Method: System.IntPtr NewDirectByteBufferFromNativeArray(Unity.Collections.NativeArray`1<T> buffer)

Disassembly:
	0x0227ADEC ADD X8, X31, 0x0
	0x0227ADF0 SUB X26, X8, X9
	0x0227ADF4 ADD X31, X26, 0x0
	0x0227ADF8 MOV X0, X26
	0x0227ADFC MOV W1, W31
	0x0227AE00 MOV X2, X23
	0x0227AE04 BL 0x3EB1B10
	0x0227AE08 ADRP X8, 0x1E79000
	0x0227AE0C LDR X8, [X8 + 0x9D0]
	0x0227AE10 MOVZ W1, 0x1
	0x0227AE14 LDR X0, [X8]
	0x0227AE18 BL 0x1C16D6C
	0x0227AE1C CBZ X0, 0x227AED4
	0x0227AE20 MOV X27, X0
	0x0227AE24 CBZ X24, 0x227AE3C
	0x0227AE28 LDR X8, [X27]
	0x0227AE2C MOV X0, X24
	0x0227AE30 LDR X1, [X8 + 0x40]
	0x0227AE34 BL 0x1C16E00
	0x0227AE38 CBZ X0, 0x227AEDC
	0x0227AE3C LDR W8, [X27 + 0x18]
	0x0227AE40 CBZ W8, 0x227AED8
	0x0227AE44 STR X24, [X27 + 0x20]
	0x0227AE48 LDR X8, [X22 + 0x38]
	0x0227AE4C SUB X3, X29, 0x28
	0x0227AE50 MOV X2, X20
	0x0227AE54 MOV X4, X25
	0x0227AE58 LDR X1, [X8 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X8, [X2+56]
	006 Move X20, X2
	007 Move X19, X1
	008 Move X21, X0
	009 Compare X8, 0
	010 JumpIfEqual {13}
	011 Compare X21, 0
	012 JumpIfNotEqual {17}
	013 Move X0, X20
	014 Call 0x1C5D6E0
	015 Compare X21, 0
	016 JumpIfEqual {31}
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move X8, [X20+56]
	019 Move X0, X21
	020 Move X1, X19
	021 Move X2, [X8+32]
	022 Call 0x2223688, X0
	023 And X1, X19, 0
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X2, X31
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call AndroidJNI.NewDirectByteBuffer, X0, X1
	030 Return X0
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X0, X31
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.SByte* GetDirectBufferAddress(System.IntPtr buffer)

Disassembly:
	0x03BEC278 LDR X19, [X0]
	0x03BEC27C BL 0x3EB1AE0
	0x03BEC280 BL 0x3BEB648
	0x03BEC284 CBNZ X19, 0x3BEC2A0
	0x03BEC288 LDP X20, X19, [X31 + 0x20]
	0x03BEC28C LDP X22, X21, [X31 + 0x10]
	0x03BEC290 LDR X30, [X31], #0x30
	0x03BEC294 RET
	0x03BEC298 MOV X19, X31
	0x03BEC29C B 0x3BEC2AC
	0x03BEC2A0 MOV X0, X19
	0x03BEC2A4 BL 0x1C16F18
	0x03BEC2A8 MOV X20, X0
	0x03BEC2AC BL 0x3BEB648
	0x03BEC2B0 CBNZ X19, 0x3BEC2BC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F8000
	005 Move X1, [X20+1840]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51228672
	010 Add X0, X0, 2998
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1840], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int64 GetDirectBufferCapacity(System.IntPtr buffer)

Disassembly:
	0x03BEC2B4 MOV X0, X20
	0x03BEC2B8 BL 0x1D2C690
	0x03BEC2BC MOV X0, X19
	0x03BEC2C0 BL 0x1C16F18
	0x03BEC2C4 BL 0x1990590
	0x03BEC2C8 STR X30, [X31 - 0x30]!
	0x03BEC2CC STP X22, X21, [X31 + 0x10]
	0x03BEC2D0 STP X20, X19, [X31 + 0x20]
	0x03BEC2D4 ADRP X22, 0x7F7000
	0x03BEC2D8 LDR X8, [X22 + 0x578]
	0x03BEC2DC MOV W19, W2
	0x03BEC2E0 MOV X20, X1
	0x03BEC2E4 MOV X21, X0
	0x03BEC2E8 CBNZ X8, 0x3BEC300
	0x03BEC2EC ADRP X0, 0xFFFFFFFFFCF0A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F8000
	005 Move X1, [X20+1848]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51302400
	010 Add X0, X0, 2112
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1848], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: Unity.Collections.NativeArray`1<T> GetDirectBuffer(System.IntPtr buffer)

Disassembly:
	0x0227AA70 LDR X1, [X27]
	0x0227AA74 SUB X8, X29, 0x10
	0x0227AA78 SUB X3, X29, 0x28
	0x0227AA7C MOV X2, X20
	0x0227AA80 LDR X0, [X1]
	0x0227AA84 STP X24, X22, [X29 - 0x18]
	0x0227AA88 STP X8, X21, [X29 - 0x28]
	0x0227AA8C LDR X8, [X1 + 0x10]
	0x0227AA90 MOV X4, X24
	0x0227AA94 BLR X8
	0x0227AA98 MOV X0, X25
	0x0227AA9C MOV X1, X24
	0x0227AAA0 MOV X2, X23
	0x0227AAA4 BL 0x3EB1AC0
	0x0227AAA8 MOV X0, X24
	0x0227AAAC MOV X1, X25
	0x0227AAB0 MOV X2, X23
	0x0227AAB4 BL 0x3EB1AC0
	0x0227AAB8 MOV X0, X19
	0x0227AABC MOV X1, X24
	0x0227AAC0 MOV X2, X23
	0x0227AAC4 BL 0x3EB1AC0
	0x0227AAC8 LDR X8, [X26 + 0x28]
	0x0227AACC LDUR X9, [X29 - 0x8]
	0x0227AAD0 CMP X8, X9
	0x0227AAD4 B.NE 0x227AAF8
	0x0227AAD8 ADD X31, X29, 0x0
	0x0227AADC LDP X20, X19, [X31 + 0x50]
	0x0227AAE0 LDP X22, X21, [X31 + 0x40]
	0x0227AAE4 LDP X24, X23, [X31 + 0x30]
	0x0227AAE8 LDP X26, X25, [X31 + 0x20]
	0x0227AAEC LDR X27, [X31 + 0x10]
	0x0227AAF0 LDP X29, X30, [X31], #0x60
	0x0227AAF4 RET
	0x0227AAF8 BL 0x3EB1B20
	0x0227AAFC STP X29, X30, [X31 - 0x60]!
	0x0227AB00 STR X27, [X31 + 0x10]
	0x0227AB04 STP X26, X25, [X31 + 0x20]
	0x0227AB08 STP X24, X23, [X31 + 0x30]
	0x0227AB0C STP X22, X21, [X31 + 0x40]
	0x0227AB10 STP X20, X19, [X31 + 0x50]
	0x0227AB14 ADD X29, X31, 0x0
	0x0227AB18 SUB X31, X31, 0x20
	0x0227AB1C MRS X26, 0xC000
	0x0227AB20 LDR X8, [X26 + 0x28]
	0x0227AB24 MOV X19, X3
	0x0227AB28 MOV X21, X2
	0x0227AB2C MOV X22, X1
	0x0227AB30 STUR X8, [X29 - 0x8]
	0x0227AB34 LDR X27, [X4 + 0x38]
	0x0227AB38 MOV X20, X0
	0x0227AB3C CBNZ X27, 0x227AB50
	0x0227AB40 MOV X0, X4
	0x0227AB44 MOV X23, X4
	0x0227AB48 BL 0x1C5C6E0
	0x0227AB4C LDR X27, [X23 + 0x38]
	0x0227AB50 LDR X8, [X27 + 0x8]
	0x0227AB54 LDR W23, [X8 + 0xFC]
	0x0227AB58 ADD X8, X31, 0x0
	0x0227AB5C ADD X9, X23, 0xF
	0x0227AB60 AND X9, X9, 0x1FFFFFFFF
	0x0227AB64 SUB X24, X8, X9
	0x0227AB68 ADD X31, X24, 0x0
	0x0227AB6C ADD X8, X31, 0x0
	0x0227AB70 SUB X25, X8, X9
	0x0227AB74 ADD X31, X25, 0x0
	0x0227AB78 MOV X0, X25
	0x0227AB7C MOV W1, W31
	0x0227AB80 MOV X2, X23
	0x0227AB84 BL 0x3EB1B10
	0x0227AB88 LDR X1, [X27]
	0x0227AB8C SUB X3, X29, 0x20
	0x0227AB90 MOV X2, X20
	0x0227AB94 MOV X4, X24

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X8, [X1+56]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X8, 0
	010 JumpIfNotEqual {13}
	011 Move X0, X19
	012 Call 0x1C5D6E0
	013 Move X0, X20
	014 Move X1, X31
	015 Move X2, X31
	016 Call IntPtr.op_Equality, X0, X1
	017 Move W8, W0
	018 Move X0, X31
	019 Move X1, X31
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {42}
	024 Move X0, X20
	025 Move X1, X31
	026 Call AndroidJNI.GetDirectBufferAddress, X0
	027 Compare X0, 0
	028 JumpIfEqual {41}
	029 Move X21, X0
	030 Move X0, X20
	031 Move X1, X31
	032 Call AndroidJNI.GetDirectBufferCapacity, X0
	033 Move W8, 0x80000000
	034 Move X1, X0
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Move X8, [X19+56]
	037 Move W2, 1
	038 Move X0, X21
	039 Move X3, [X8+8]
	040 Call NativeArrayUnsafeUtility.ConvertExistingDataToNativeArray, X0, X1, X2
	041 Move X1, X31
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X30, [X31+16]
	045 Move X21, [X31+24]
	046 Add X31, X31, 48
	047 Return X0
	048 Move [X31+8], X1
	049 Move X0, 0x1E7C000
	050 Move X0, [X0+2656]
	051 Call 0x1C17D08
	052 Add X1, X31, 8
	053 Call 0x1C17E04
	054 Move TEMP, 0x80000000
	055 Not TEMP
	056 Move W8, TEMP
	057 Move X20, X0
	058 Move [X31+4], W8
	059 Move X0, 0x1E7A000
	060 Move X0, [X0+1880]
	061 Call 0x1C17D08
	062 Add X1, X31, 4
	063 Call 0x1C17E04
	064 Move X21, X0
	065 Move X0, 0x1EA3000
	066 Move X0, [X0+1672]
	067 Call 0x1C17D08
	068 Move X1, X20
	069 Move X2, X21
	070 Move X3, X31
	071 Call String.Format, X0, X1, X2
	072 Move X20, X0
	073 Move X0, 0x1E7A000
	074 Move X0, [X0+2000]
	075 Call 0x1C17D08
	076 Call 0x1C17F10
	077 Move X1, X20
	078 Move X2, X31
	079 Move X21, X0
	080 Call Exception..ctor, X0, X1
	081 Move X0, X21
	082 Move X1, X19
	083 Call 0x1C17DEC

Method: Unity.Collections.NativeArray`1<System.Byte> GetDirectByteBuffer(System.IntPtr buffer)

Disassembly:
	0x03BEC2F0 ADD X0, X0, 0xC3B
	0x03BEC2F4 BL 0x1C16CB8
	0x03BEC2F8 MOV X8, X0
	0x03BEC2FC STR X0, [X22 + 0x578]
	0x03BEC300 MOV X0, X21
	0x03BEC304 MOV X1, X20
	0x03BEC308 MOV W2, W19
	0x03BEC30C BLR X8
	0x03BEC310 LDP X20, X19, [X31 + 0x20]
	0x03BEC314 LDP X22, X21, [X31 + 0x10]
	0x03BEC318 LDR X30, [X31], #0x30
	0x03BEC31C B 0x3BEB648
	0x03BEC320 CMP W1, 0x1
	0x03BEC324 MOV X20, X0
	0x03BEC328 B.NE 0x3BEC354
	0x03BEC32C MOV X0, X20
	0x03BEC330 BL 0x3EB1AD0
	0x03BEC334 LDR X19, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7F8000
	006 Move X21, 0x573000
	007 Move W8, [X20+1856]
	008 Move X21, [X21+1136]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x573000
	015 Move X0, [X0+1136]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1856], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x227AA70, X0
	026 Return X0

Method: Unity.Collections.NativeArray`1<System.SByte> GetDirectSByteBuffer(System.IntPtr buffer)

Disassembly:
	0x03BEC338 BL 0x3EB1AE0
	0x03BEC33C BL 0x3BEB648
	0x03BEC340 CBNZ X19, 0x3BEC35C
	0x03BEC344 LDP X20, X19, [X31 + 0x20]
	0x03BEC348 LDP X22, X21, [X31 + 0x10]
	0x03BEC34C LDR X30, [X31], #0x30
	0x03BEC350 RET
	0x03BEC354 MOV X19, X31
	0x03BEC358 B 0x3BEC368
	0x03BEC35C MOV X0, X19
	0x03BEC360 BL 0x1C16F18
	0x03BEC364 MOV X20, X0
	0x03BEC368 BL 0x3BEB648
	0x03BEC36C CBNZ X19, 0x3BEC378
	0x03BEC370 MOV X0, X20
	0x03BEC374 BL 0x1D2C690
	0x03BEC378 MOV X0, X19
	0x03BEC37C BL 0x1C16F18

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x7F8000
	006 Move X21, 0x573000
	007 Move W8, [X20+1857]
	008 Move X21, [X21+1144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x573000
	015 Move X0, [X0+1144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1857], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call AndroidJNI.GetDirectBuffer, X0
	026 Return X0

Method: System.Int32 RegisterNatives(System.IntPtr clazz, UnityEngine.JNINativeMethod[] methods)

Disassembly:
	0x03BEC380 BL 0x1990590
	0x03BEC384 STR X30, [X31 - 0x30]!
	0x03BEC388 STP X22, X21, [X31 + 0x10]
	0x03BEC38C STP X20, X19, [X31 + 0x20]
	0x03BEC390 ADRP X22, 0x7F7000
	0x03BEC394 LDR X8, [X22 + 0x568]
	0x03BEC398 MOV W19, W2
	0x03BEC39C MOV X20, X1
	0x03BEC3A0 MOV X21, X0
	0x03BEC3A4 CBNZ X8, 0x3BEC3BC
	0x03BEC3A8 ADRP X0, 0xFFFFFFFFFCF22000
	0x03BEC3AC ADD X0, X0, 0x964
	0x03BEC3B0 BL 0x1C16CB8
	0x03BEC3B4 MOV X8, X0
	0x03BEC3B8 STR X0, [X22 + 0x568]
	0x03BEC3BC MOV X0, X21
	0x03BEC3C0 MOV X1, X20
	0x03BEC3C4 MOV W2, W19
	0x03BEC3C8 BLR X8
	0x03BEC3CC LDP X20, X19, [X31 + 0x20]
	0x03BEC3D0 LDP X22, X21, [X31 + 0x10]
	0x03BEC3D4 LDR X30, [X31], #0x30
	0x03BEC3D8 B 0x3BEB648
	0x03BEC3DC CMP W1, 0x1
	0x03BEC3E0 MOV X20, X0
	0x03BEC3E4 B.NE 0x3BEC410
	0x03BEC3E8 MOV X0, X20
	0x03BEC3EC BL 0x3EB1AD0
	0x03BEC3F0 LDR X19, [X0]
	0x03BEC3F4 BL 0x3EB1AE0
	0x03BEC3F8 BL 0x3BEB648
	0x03BEC3FC CBNZ X19, 0x3BEC418
	0x03BEC400 LDP X20, X19, [X31 + 0x20]
	0x03BEC404 LDP X22, X21, [X31 + 0x10]
	0x03BEC408 LDR X30, [X31], #0x30
	0x03BEC40C RET
	0x03BEC410 MOV X19, X31
	0x03BEC414 B 0x3BEC424
	0x03BEC418 MOV X0, X19
	0x03BEC41C BL 0x1C16F18
	0x03BEC420 MOV X20, X0
	0x03BEC424 BL 0x3BEB648
	0x03BEC428 CBNZ X19, 0x3BEC434
	0x03BEC42C MOV X0, X20
	0x03BEC430 BL 0x1D2C690
	0x03BEC434 MOV X0, X19
	0x03BEC438 BL 0x1C16F18
	0x03BEC43C BL 0x1990590
	0x03BEC440 STR X30, [X31 - 0x30]!
	0x03BEC444 STP X22, X21, [X31 + 0x10]
	0x03BEC448 STP X20, X19, [X31 + 0x20]
	0x03BEC44C ADRP X22, 0x7F7000
	0x03BEC450 LDR X8, [X22 + 0x560]
	0x03BEC454 MOV W20, W2
	0x03BEC458 MOV X19, X1
	0x03BEC45C MOV X21, X0
	0x03BEC460 CBNZ X8, 0x3BEC478
	0x03BEC464 ADRP X0, 0xFFFFFFFFFCF10000
	0x03BEC468 ADD X0, X0, 0xC38
	0x03BEC46C BL 0x1C16CB8
	0x03BEC470 MOV X8, X0
	0x03BEC474 STR X0, [X22 + 0x560]
	0x03BEC478 AND W2, W20, 0x1
	0x03BEC47C MOV X0, X21
	0x03BEC480 MOV X1, X19
	0x03BEC484 BLR X8
	0x03BEC488 LDP X20, X19, [X31 + 0x20]
	0x03BEC48C LDP X22, X21, [X31 + 0x10]
	0x03BEC490 LDR X30, [X31], #0x30
	0x03BEC494 B 0x3BEB648
	0x03BEC498 CMP W1, 0x1
	0x03BEC49C MOV X20, X0
	0x03BEC4A0 B.NE 0x3BEC4CC
	0x03BEC4A4 MOV X0, X20
	0x03BEC4A8 BL 0x3EB1AD0
	0x03BEC4AC LDR X19, [X0]
	0x03BEC4B0 BL 0x3EB1AE0
	0x03BEC4B4 BL 0x3BEB648
	0x03BEC4B8 CBNZ X19, 0x3BEC4D4
	0x03BEC4BC LDP X20, X19, [X31 + 0x20]
	0x03BEC4C0 LDP X22, X21, [X31 + 0x10]
	0x03BEC4C4 LDR X30, [X31], #0x30
	0x03BEC4C8 RET
	0x03BEC4CC MOV X19, X31
	0x03BEC4D0 B 0x3BEC4E0
	0x03BEC4D4 MOV X0, X19
	0x03BEC4D8 BL 0x1C16F18
	0x03BEC4DC MOV X20, X0
	0x03BEC4E0 BL 0x3BEB648
	0x03BEC4E4 CBNZ X19, 0x3BEC4F0
	0x03BEC4E8 MOV X0, X20
	0x03BEC4EC BL 0x1D2C690
	0x03BEC4F0 MOV X0, X19
	0x03BEC4F4 BL 0x1C16F18
	0x03BEC4F8 BL 0x1990590
	0x03BEC4FC STR X30, [X31 - 0x30]!
	0x03BEC500 STP X22, X21, [X31 + 0x10]
	0x03BEC504 STP X20, X19, [X31 + 0x20]
	0x03BEC508 ADRP X22, 0x7F7000
	0x03BEC50C LDR X8, [X22 + 0x580]

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Compare X1, 0
	013 JumpIfEqual {109}
	014 Move X21, [X1+24]
	015 Move X20, X1
	016 Compare W21, 0
	017 JumpIfEqual {109}
	018 Move X19, X0
	019 NotImplemented "Instruction CMP not yet implemented."
	020 Move X22, X31
	021 And X21, X21, 0
	022 Add X23, X20, 40
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, [X23-8]
	025 Move X21, [X23]
	026 Move X1, X31
	027 Call String.IsNullOrEmpty, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {109}
	032 Move X0, X21
	033 Move X1, X31
	034 Call String.IsNullOrEmpty, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {109}
	039 Move W21, [X20+24]
	040 Add X22, X22, 1
	041 Add X23, X23, 24
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X22, 0x7F8000
	044 Move X8, [X22+1864]
	045 Compare X8, 0
	046 JumpIfNotEqual {52}
	047 Move X0, -51171328
	048 Add X0, X0, 1342
	049 Call 0x1C17CB8
	050 Move X8, X0
	051 Move [X22+1864], X0
	052 Move W0, W21
	053 NotImplemented "Instruction BLR not yet implemented."
	054 Move X23, [X20+24]
	055 Move X21, X0
	056 NotImplemented "Instruction CMP not yet implemented."
	057 And X8, X23, 0
	058 Move X23, -51359744
	059 Move X22, X31
	060 Add X27, X20, 48
	061 Move X28, 0x7F8000
	062 Add X23, X23, 2459
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X24, [X27-16]
	065 Move X25, [X27-8]
	066 Move X8, [X28+1872]
	067 Move X26, [X27]
	068 Compare X8, 0
	069 JumpIfNotEqual {74}
	070 Move X0, X23
	071 Call 0x1C17CB8
	072 Move X8, X0
	073 Move [X28+1872], X0
	074 Move X0, X21
	075 Move W1, W22
	076 Move X2, X24
	077 Move X3, X25
	078 Move X4, X26
	079 NotImplemented "Instruction BLR not yet implemented."
	080 Move W8, [X20+24]
	081 Add X22, X22, 1
	082 Add X27, X27, 24
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move W23, W8
	085 Move X20, 0x7F8000
	086 Move X3, [X20+1880]
	087 Compare X3, 0
	088 JumpIfNotEqual {94}
	089 Move X0, -51335168
	090 Add X0, X0, 3378
	091 Call 0x1C17CB8
	092 Move X3, X0
	093 Move [X20+1880], X0
	094 Move X0, X19
	095 Move X1, X21
	096 Move W2, W23
	097 Move X20, [X31+80]
	098 Move X19, [X31+88]
	099 Move X22, [X31+64]
	100 Move X21, [X31+72]
	101 Move X24, [X31+48]
	102 Move X23, [X31+56]
	103 Move X26, [X31+32]
	104 Move X25, [X31+40]
	105 Move X28, [X31+16]
	106 Move X27, [X31+24]
	107 Move X30, [X31+96]
	108 CallNoReturn X3
	109 Move X20, [X31+80]
	110 Move X19, [X31+88]
	111 Move X22, [X31+64]
	112 Move X21, [X31+72]
	113 Move X24, [X31+48]
	114 Move X23, [X31+56]
	115 Move X26, [X31+32]
	116 Move X25, [X31+40]
	117 Move X28, [X31+16]
	118 Move X27, [X31+24]
	119 Move TEMP, 0
	120 Not TEMP
	121 Move W0, TEMP
	122 Move X30, [X31+96]
	123 Return X0
	124 Call 0x1C17F28

Method: System.IntPtr RegisterNativesAllocate(System.Int32 length)

Disassembly:
	0x03BEC510 MOV W19, W2
	0x03BEC514 MOV X20, X1
	0x03BEC518 MOV X21, X0
	0x03BEC51C CBNZ X8, 0x3BEC534
	0x03BEC520 ADRP X0, 0xFFFFFFFFFCF3C000
	0x03BEC524 ADD X0, X0, 0x10A
	0x03BEC528 BL 0x1C16CB8
	0x03BEC52C MOV X8, X0
	0x03BEC530 STR X0, [X22 + 0x580]
	0x03BEC534 MOV X0, X21
	0x03BEC538 MOV X1, X20
	0x03BEC53C MOV W2, W19
	0x03BEC540 BLR X8
	0x03BEC544 LDP X20, X19, [X31 + 0x20]
	0x03BEC548 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F8000
	005 Move X1, [X20+1864]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51171328
	010 Add X0, X0, 1342
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1864], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void RegisterNativesSet(System.IntPtr natives, System.Int32 idx, System.String name, System.String signature, System.IntPtr fnPtr)

Disassembly:
	0x03BEC54C LDR X30, [X31], #0x30
	0x03BEC550 B 0x3BEB648
	0x03BEC554 CMP W1, 0x1
	0x03BEC558 MOV X20, X0
	0x03BEC55C B.NE 0x3BEC588
	0x03BEC560 MOV X0, X20
	0x03BEC564 BL 0x3EB1AD0
	0x03BEC568 LDR X19, [X0]
	0x03BEC56C BL 0x3EB1AE0
	0x03BEC570 BL 0x3BEB648
	0x03BEC574 CBNZ X19, 0x3BEC590
	0x03BEC578 LDP X20, X19, [X31 + 0x20]
	0x03BEC57C LDP X22, X21, [X31 + 0x10]
	0x03BEC580 LDR X30, [X31], #0x30
	0x03BEC584 RET
	0x03BEC588 MOV X19, X31
	0x03BEC58C B 0x3BEC59C
	0x03BEC590 MOV X0, X19
	0x03BEC594 BL 0x1C16F18
	0x03BEC598 MOV X20, X0
	0x03BEC59C BL 0x3BEB648
	0x03BEC5A0 CBNZ X19, 0x3BEC5AC
	0x03BEC5A4 MOV X0, X20
	0x03BEC5A8 BL 0x1D2C690
	0x03BEC5AC MOV X0, X19
	0x03BEC5B0 BL 0x1C16F18
	0x03BEC5B4 BL 0x1990590

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x7F8000
	009 Move X5, [X24+1872]
	010 Move X19, X4
	011 Move X20, X3
	012 Move X21, X2
	013 Move W22, W1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51359744
	018 Add X0, X0, 2459
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+1872], X0
	022 Move X0, X23
	023 Move W1, W22
	024 Move X2, X21
	025 Move X3, X20
	026 Move X4, X19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Int32 RegisterNativesAndFree(System.IntPtr clazz, System.IntPtr natives, System.Int32 n)

Disassembly:
	0x03BEC5B8 STP X30, X21, [X31 - 0x20]!
	0x03BEC5BC STP X20, X19, [X31 + 0x10]
	0x03BEC5C0 ADRP X21, 0x7F7000
	0x03BEC5C4 LDR X8, [X21 + 0x508]
	0x03BEC5C8 MOV X19, X1
	0x03BEC5CC MOV X20, X0
	0x03BEC5D0 CBNZ X8, 0x3BEC5E8
	0x03BEC5D4 ADRP X0, 0xFFFFFFFFFCF36000
	0x03BEC5D8 ADD X0, X0, 0xAEF
	0x03BEC5DC BL 0x1C16CB8
	0x03BEC5E0 MOV X8, X0
	0x03BEC5E4 STR X0, [X21 + 0x508]
	0x03BEC5E8 MOV X0, X20
	0x03BEC5EC MOV X1, X19
	0x03BEC5F0 BLR X8
	0x03BEC5F4 MOV X19, X0
	0x03BEC5F8 BL 0x3BEB648
	0x03BEC5FC MOV X0, X19
	0x03BEC600 LDP X20, X19, [X31 + 0x10]
	0x03BEC604 LDP X30, X21, [X31], #0x20
	0x03BEC608 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x7F8000
	007 Move X3, [X22+1880]
	008 Move W19, W2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51335168
	014 Add X0, X0, 3378
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1880], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move W2, W19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Int32 UnregisterNatives(System.IntPtr clazz)

Disassembly:
	0x03BEC60C CMP W1, 0x1
	0x03BEC610 MOV X20, X0
	0x03BEC614 B.NE 0x3BEC638
	0x03BEC618 MOV X0, X20
	0x03BEC61C BL 0x3EB1AD0
	0x03BEC620 LDR X19, [X0]
	0x03BEC624 BL 0x3EB1AE0
	0x03BEC628 BL 0x3BEB648
	0x03BEC62C CBZ X19, 0x3BEC5FC
	0x03BEC630 MOV X0, X19
	0x03BEC634 BL 0x1C16F18
	0x03BEC638 MOV X19, X31
	0x03BEC63C B 0x3BEC644
	0x03BEC640 MOV X20, X0
	0x03BEC644 BL 0x3BEB648

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x7F8000
	005 Move X1, [X20+1888]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51228672
	010 Add X0, X0, 3060
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1888], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

