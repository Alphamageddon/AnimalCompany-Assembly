Type: Fusion.RunnerVisibilityLink

Method: System.Boolean get_IsOnSingleRunner()

Disassembly:
	0x01F95010 MOV X23, X31
	0x01F95014 MOV X0, X20

ISIL:
	001 Move W0, [X0+48]
	002 Return X0

Method: System.Void set_IsOnSingleRunner(System.Boolean value)

Disassembly:
	0x01F95018 MOV W1, W22
	0x01F9501C BL 0x1F9518C
	0x01F95020 CBZ X21, 0x1F9509C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+48], W8
	003 Return 

Method: System.Boolean get_DefaultState()

Disassembly:
	0x01F95024 LDR W8, [X21 + 0x18]
	0x01F95028 CMP X23, X8

ISIL:
	001 Move W0, [X0+96]
	002 Return X0

Method: System.Void set_DefaultState(System.Boolean value)

Disassembly:
	0x01F9502C B.CS 0x1F950A0
	0x01F95030 LDR V1, [X19 + 0xF8]
	0x01F95034 ADD X8, X21, X23, 0x2, LSL

ISIL:
	001 And W8, W1, 1
	002 Move [X0+96], W8
	003 Return 

Method: System.Boolean get_Enabled()

Disassembly:
	0x01F95038 FMUL S0, S0, S1
	0x01F9503C STR S0, [X8 + 0x20]
	0x01F95040 LDR X8, [X19 + 0xA8]
	0x01F95044 CBZ X8, 0x1F9509C
	0x01F95048 LDR W8, [X8 + 0x18]
	0x01F9504C LDRSW X9, [X19 + 0x8C]
	0x01F95050 LDR X21, [X19 + 0xE0]
	0x01F95054 ADD W10, W22, 0x1
	0x01F95058 ADD X23, X23, 0x1
	0x01F9505C SDIV W11, W10, W8
	0x01F95060 CMP X23, X9
	0x01F95064 MSUB W22, W11, W8, W10
	0x01F95068 B.LT 0x1F95014
	0x01F9506C LDR X8, [X19]
	0x01F95070 MOV X0, X19
	0x01F95074 MOV X1, X21
	0x01F95078 LDP X9, X2, [X8 + 0x1F8]
	0x01F9507C BLR X9
	0x01F95080 LDR X8, [X19]
	0x01F95084 MOV X0, X19
	0x01F95088 LDP X20, X19, [X31 + 0x20]
	0x01F9508C LDP X22, X21, [X31 + 0x10]
	0x01F95090 LDP X2, X1, [X8 + 0x1E8]
	0x01F95094 LDP X30, X23, [X31], #0x30
	0x01F95098 BR X2
	0x01F9509C BL 0x1C16F20
	0x01F950A0 BL 0x1C16F28
	0x01F950A4 STR D8, [X31 - 0x40]!
	0x01F950A8 STP X30, X23, [X31 + 0x10]
	0x01F950AC STP X22, X21, [X31 + 0x20]
	0x01F950B0 STP X20, X19, [X31 + 0x30]
	0x01F950B4 ADRP X22, 0x2444000
	0x01F950B8 ADRP X21, 0x215F000
	0x01F950BC LDRB W8, [X22 + 0x757]
	0x01F950C0 LDR X21, [X21 + 0x9F0]
	0x01F950C4 MOV X19, X1
	0x01F950C8 MOV V8.16B, V0.16B
	0x01F950CC MOV X20, X0
	0x01F950D0 TBNZ X8, 0x0, 0x1F950F4
	0x01F950D4 ADRP X0, 0x215F000
	0x01F950D8 LDR X0, [X0 + 0x9F0]
	0x01F950DC BL 0x1C16CF4
	0x01F950E0 ADRP X0, 0x2160000
	0x01F950E4 LDR X0, [X0 + 0x570]
	0x01F950E8 BL 0x1C16CF4
	0x01F950EC MOVZ W8, 0x1
	0x01F950F0 STRB W8, [X22 + 0x757]
	0x01F950F4 LDR V0, [X20 + 0x28]
	0x01F950F8 ADRP X23, 0x2160000
	0x01F950FC FADD S0, S0, S8
	0x01F95100 STR S0, [X20 + 0x28]
	0x01F95104 LDR X0, [X21]
	0x01F95108 LDR X22, [X19]
	0x01F9510C LDR X21, [X20 + 0x30]
	0x01F95110 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x2445000
	005 Move W8, [X20+1860]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x2186000
	012 Move X0, [X0+1760]
	013 Call 0x1C17CF4
	014 Move X0, 0x2186000
	015 Move X0, [X0+1776]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1860], W8
	019 Move W8, [X19+80]
	020 Move X0, [X19+40]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Compare X0, 0
	023 JumpIfEqual {60}
	024 Move X8, 0x2186000
	025 Move X8, [X8+1776]
	026 Move X9, [X0]
	027 Move X8, [X8]
	028 Move W11, [X9+304]
	029 Move W10, [X8+304]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 Move X9, [X9+200]
	032 Add X9, X9, X10
	033 NotImplemented "Instruction LDUR not yet implemented."
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X1, X31
	038 Move X30, [X31+32]
	039 Call Renderer.get_enabled, X0
	040 Return X0
	041 Compare X0, 0
	042 JumpIfEqual {60}
	043 Move X8, 0x2186000
	044 Move X8, [X8+1760]
	045 Move X9, [X0]
	046 Move X8, [X8]
	047 Move W11, [X9+304]
	048 Move W10, [X8+304]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X9, [X9+200]
	051 Add X9, X9, X10
	052 NotImplemented "Instruction LDUR not yet implemented."
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X1, X31
	057 Move X30, [X31+32]
	058 Call Behaviour.get_enabled, X0
	059 Return X0
	060 Call 0x1C17F20

Method: System.Void set_Enabled(System.Boolean value)

Disassembly:
	0x01F8AE9C MOV X20, X0
	0x01F8AEA0 CMP W1, 0x1
	0x01F8AEA4 B.NE 0x1F8AED0
	0x01F8AEA8 MOV X0, X20
	0x01F8AEAC BL 0x3EB1AD0
	0x01F8AEB0 LDR X21, [X0]
	0x01F8AEB4 BL 0x3EB1AE0
	0x01F8AEB8 LDR X1, [X25]
	0x01F8AEBC ADD X0, X31, 0x20
	0x01F8AEC0 BL 0x2BC434C
	0x01F8AEC4 CBZ X21, 0x1F8ADE8
	0x01F8AEC8 MOV X0, X21
	0x01F8AECC BL 0x1C16F18
	0x01F8AED0 MOV X21, X31
	0x01F8AED4 B 0x1F8AEDC
	0x01F8AED8 MOV X20, X0
	0x01F8AEDC LDR X1, [X25]
	0x01F8AEE0 ADD X0, X31, 0x20
	0x01F8AEE4 BL 0x2BC434C
	0x01F8AEE8 CBNZ X21, 0x1F8AEF4
	0x01F8AEEC MOV X0, X20
	0x01F8AEF0 BL 0x1D2C690
	0x01F8AEF4 MOV X0, X21
	0x01F8AEF8 BL 0x1C16F18
	0x01F8AEFC BL 0x1990590
	0x01F8AF00 SUB X31, X31, 0x30
	0x01F8AF04 STP X30, X21, [X31 + 0x10]
	0x01F8AF08 STP X20, X19, [X31 + 0x20]
	0x01F8AF0C ADRP X21, 0x244F000
	0x01F8AF10 LDRB W8, [X21 + 0x6F3]
	0x01F8AF14 MOV W20, W1
	0x01F8AF18 MOV X19, X0
	0x01F8AF1C TBNZ X8, 0x0, 0x1F8AF40
	0x01F8AF20 ADRP X0, 0x2169000
	0x01F8AF24 LDR X0, [X0 + 0xA28]
	0x01F8AF28 BL 0x1C16CF4
	0x01F8AF2C ADRP X0, 0x2190000
	0x01F8AF30 LDR X0, [X0 + 0x770]
	0x01F8AF34 BL 0x1C16CF4
	0x01F8AF38 MOVZ W8, 0x1
	0x01F8AF3C STRB W8, [X21 + 0x6F3]
	0x01F8AF40 MOV X0, X31
	0x01F8AF44 STR W31, [X31 + 0x8]
	0x01F8AF48 BL 0x1EB7374
	0x01F8AF4C CBZ X0, 0x1F8AFCC
	0x01F8AF50 LDR W8, [X0 + 0x20]
	0x01F8AF54 CMP W8, 0x1
	0x01F8AF58 B.NE 0x1F8AF90
	0x01F8AF5C ADD X1, X31, 0x8
	0x01F8AF60 BL 0x1F8A788
	0x01F8AF64 TBZ X0, 0x0, 0x1F8AFBC
	0x01F8AF68 LDR W2, [X31 + 0x8]
	0x01F8AF6C MOVZ W1, 0x3
	0x01F8AF70 MOV X0, X19
	0x01F8AF74 MOV W3, W20
	0x01F8AF78 BL 0x1F8A858
	0x01F8AF7C MOV X1, X0
	0x01F8AF80 MOV X0, X19
	0x01F8AF84 MOV X2, X31
	0x01F8AF88 BL 0x3C366FC
	0x01F8AF8C B 0x1F8AFBC
	0x01F8AF90 ADRP X8, 0x2169000
	0x01F8AF94 LDR X8, [X8 + 0xA28]
	0x01F8AF98 LDR X0, [X8]
	0x01F8AF9C LDR W8, [X0 + 0xE0]
	0x01F8AFA0 CBNZ W8, 0x1F8AFA8
	0x01F8AFA4 BL 0x1C16DFC
	0x01F8AFA8 ADRP X8, 0x2190000
	0x01F8AFAC LDR X8, [X8 + 0x770]
	0x01F8AFB0 MOV X1, X31
	0x01F8AFB4 LDR X0, [X8]
	0x01F8AFB8 BL 0x3C06A04
	0x01F8AFBC LDP X20, X19, [X31 + 0x20]
	0x01F8AFC0 LDP X30, X21, [X31 + 0x10]
	0x01F8AFC4 ADD X31, X31, 0x30
	0x01F8AFC8 RET
	0x01F8AFCC BL 0x1C16F20
	0x01F8AFD0 SUB X31, X31, 0x30
	0x01F8AFD4 STP X30, X21, [X31 + 0x10]
	0x01F8AFD8 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x2450000
	007 Move X21, 0x216A000
	008 Move W8, [X22+1861]
	009 Move X21, [X21+1432]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x2191000
	017 Move X0, [X0+1760]
	018 Call 0x1C17CF4
	019 Move X0, 0x216A000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x2191000
	023 Move X0, [X0+1776]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+1861], W8
	027 Move X0, [X21]
	028 Move X21, [X20+40]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X21
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Equality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {47}
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X22, [X31+16]
	044 Move X21, [X31+24]
	045 Move X30, [X31+48]
	046 Return 
	047 Move W8, [X20+80]
	048 Move X0, [X20+40]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Compare X0, 0
	051 JumpIfEqual {94}
	052 Move X8, 0x2191000
	053 Move X8, [X8+1776]
	054 Move X9, [X0]
	055 Move X8, [X8]
	056 Move W11, [X9+304]
	057 Move W10, [X8+304]
	058 NotImplemented "Instruction CMP not yet implemented."
	059 Move X9, [X9+200]
	060 Add X9, X9, X10
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 NotImplemented "Instruction CMP not yet implemented."
	063 And W1, W19, 1
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X2, X31
	069 Move X30, [X31+48]
	070 Call Renderer.set_enabled, X0, X1
	071 Return 
	072 Compare X0, 0
	073 JumpIfEqual {94}
	074 Move X8, 0x2191000
	075 Move X8, [X8+1760]
	076 Move X9, [X0]
	077 Move X8, [X8]
	078 Move W11, [X9+304]
	079 Move W10, [X8+304]
	080 NotImplemented "Instruction CMP not yet implemented."
	081 Move X9, [X9+200]
	082 Add X9, X9, X10
	083 NotImplemented "Instruction LDUR not yet implemented."
	084 NotImplemented "Instruction CMP not yet implemented."
	085 And W1, W19, 1
	086 Move X20, [X31+32]
	087 Move X19, [X31+40]
	088 Move X22, [X31+16]
	089 Move X21, [X31+24]
	090 Move X2, X31
	091 Move X30, [X31+48]
	092 Call Behaviour.set_enabled, X0, X1
	093 Return 
	094 Call 0x1C17F20

Method: System.Void Reset()

Disassembly:
	0x01F95114 LDR X23, [X23 + 0x570]
	0x01F95118 CBNZ W8, 0x1F95120
	0x01F9511C BL 0x1C16DFC
	0x01F95120 MOV X0, X22
	0x01F95124 MOV X1, X21
	0x01F95128 MOV X2, X31
	0x01F9512C BL 0x3363010
	0x01F95130 LDR X8, [X23]
	0x01F95134 LDR X21, [X20 + 0x18]
	0x01F95138 MOV X22, X0
	0x01F9513C LDR W9, [X8 + 0xE0]
	0x01F95140 CBNZ W9, 0x1F9514C
	0x01F95144 MOV X0, X8
	0x01F95148 BL 0x1C16DFC
	0x01F9514C MOV X0, X22

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move W8, 1
	005 Move X19, X0
	006 Move [X0+64], W8
	007 Move X0, X31
	008 Call Guid.NewGuid
	009 Move [X31], X0
	010 Move [X31+8], X1
	011 Add X0, X31, 0
	012 Move X1, X31
	013 Call Guid.ToString, X0
	014 Move [X19+56], X0
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Add X31, X31, 32
	018 Return 

Method: System.Boolean AssociateComponent(UnityEngine.Component component)

Disassembly:
	0x01F95150 MOV X1, X21
	0x01F95154 MOV X2, X31
	0x01F95158 BL 0x3394D14
	0x01F9515C TBZ X0, 0x0, 0x1F95178
	0x01F95160 LDR V0, [X20 + 0x28]
	0x01F95164 MOV X0, X20
	0x01F95168 BL 0x1F95D94
	0x01F9516C STR W31, [X20 + 0x28]
	0x01F95170 LDR X8, [X19]
	0x01F95174 STR X8, [X20 + 0x30]
	0x01F95178 LDP X20, X19, [X31 + 0x30]
	0x01F9517C LDP X22, X21, [X31 + 0x20]
	0x01F95180 LDP X30, X23, [X31 + 0x10]
	0x01F95184 LDR V8, [X31], #0x40
	0x01F95188 RET
	0x01F9518C STR X30, [X31 - 0x10]!
	0x01F95190 LDR X8, [X0]
	0x01F95194 CBZ X8, 0x1F951B4
	0x01F95198 LDR W9, [X8 + 0x18]
	0x01F9519C CMP W9, W1
	0x01F951A0 B.LS 0x1F951B8
	0x01F951A4 ADD X8, X8, W1, 0x2, SXTW
	0x01F951A8 LDR V0, [X8 + 0x20]
	0x01F951AC LDR X30, [X31], #0x10
	0x01F951B0 RET
	0x01F951B4 BL 0x1C16F20
	0x01F951B8 BL 0x1C16F28
	0x01F951BC STR X30, [X31 - 0x10]!
	0x01F951C0 LDR X8, [X0]
	0x01F951C4 CBZ X8, 0x1F951D4
	0x01F951C8 LDR W0, [X8 + 0x18]
	0x01F951CC LDR X30, [X31], #0x10
	0x01F951D0 RET
	0x01F951D4 BL 0x1C16F20
	0x01F951D8 STR D8, [X31 - 0x20]!
	0x01F951DC STR X30, [X31 + 0x8]
	0x01F951E0 STP X20, X19, [X31 + 0x10]
	0x01F951E4 ADRP X20, 0x2444000
	0x01F951E8 LDRB W8, [X20 + 0x751]
	0x01F951EC MOV X19, X0
	0x01F951F0 TBNZ X8, 0x0, 0x1F95208
	0x01F951F4 ADRP X0, 0x2185000
	0x01F951F8 LDR X0, [X0 + 0xC70]
	0x01F951FC BL 0x1C16CF4
	0x01F95200 MOVZ W8, 0x1
	0x01F95204 STRB W8, [X20 + 0x751]
	0x01F95208 MOV X0, X19
	0x01F9520C MOV X1, X31
	0x01F95210 BL 0x3C32E90
	0x01F95214 LDR X8, [X19 + 0x38]
	0x01F95218 CBZ X8, 0x1F952E4
	0x01F9521C MOV X20, X0
	0x01F95220 MOV X0, X8
	0x01F95224 MOV X1, X31
	0x01F95228 BL 0x3C32ECC
	0x01F9522C CBZ X0, 0x1F952E4
	0x01F95230 MOV X1, X31
	0x01F95234 BL 0x3C357F8
	0x01F95238 CBZ X20, 0x1F95254
	0x01F9523C ADRP X8, 0x2185000
	0x01F95240 LDR X8, [X8 + 0xC70]
	0x01F95244 LDR X1, [X8]
	0x01F95248 LDR X8, [X20]
	0x01F9524C CMP X8, X1
	0x01F95250 B.NE 0x1F952E8
	0x01F95254 FMOV S8, W31
	0x01F95258 TBZ X0, 0x0, 0x1F95268
	0x01F9525C LDR V0, [X19 + 0xEC]
	0x01F95260 FMOV S1, W31
	0x01F95264 FADD S8, S0, S1
	0x01F95268 LDR X0, [X19 + 0x40]
	0x01F9526C CBZ X0, 0x1F952E4
	0x01F95270 MOV X1, X31
	0x01F95274 BL 0x3C32ECC
	0x01F95278 CBZ X0, 0x1F952E4
	0x01F9527C MOV X1, X31
	0x01F95280 BL 0x3C357F8
	0x01F95284 TBZ X0, 0x0, 0x1F95290
	0x01F95288 LDR V0, [X19 + 0xE8]
	0x01F9528C FADD S8, S8, S0
	0x01F95290 CBZ X20, 0x1F952E4
	0x01F95294 MOV X0, X20
	0x01F95298 MOV X1, X31
	0x01F9529C BL 0x3C3E90C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2445000
	007 Move W8, [X21+1862]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x2186000
	015 Move X0, [X0+1760]
	016 Call 0x1C17CF4
	017 Move X0, 0x215F000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x2186000
	021 Move X0, [X0+1776]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1862], W8
	025 Move [X19+40], X20
	026 Compare X20, 0
	027 JumpIfEqual {94}
	028 Move X21, 0x215F000
	029 Move X22, 0x2186000
	030 Move X21, [X21+1432]
	031 Move X22, [X22+1776]
	032 Move X0, X20
	033 Move X1, X31
	034 Call "il2cpp_vm_object_is_inst", X0
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X9, [X20]
	041 Move X8, [X22]
	042 Move W11, [X9+304]
	043 Move W10, [X8+304]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X31
	046 Move X9, [X9+200]
	047 Add X9, X9, X10
	048 NotImplemented "Instruction LDUR not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSEL not yet implemented."
	051 Move X1, X31
	052 Move X2, X31
	053 Call Object.op_Inequality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfNotEqual {59}
	058 Move W8, 1
	059 Move X0, [X21]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X8, 0x2186000
	065 Move X8, [X8+1760]
	066 Move X9, [X20]
	067 Move X8, [X8]
	068 Move W11, [X9+304]
	069 Move W10, [X8+304]
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move X0, X31
	072 Move X9, [X9+200]
	073 Add X9, X9, X10
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 NotImplemented "Instruction CMP not yet implemented."
	076 NotImplemented "Instruction CSEL not yet implemented."
	077 Move X1, X31
	078 Move X2, X31
	079 Call Object.op_Inequality, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {87}
	084 Move W8, 2
	085 Move W0, 1
	086 Move [X19+80], W8
	087 Move W0, W31
	088 Move X20, [X31+32]
	089 Move X19, [X31+40]
	090 Move X22, [X31+16]
	091 Move X21, [X31+24]
	092 Move X30, [X31+48]
	093 Return X0
	094 Call 0x1C17F20

Method: System.Void OnValidate()

Disassembly:
	0x01F952A0 MOV X0, X20
	0x01F952A4 MOV V1.16B, V8.16B
	0x01F952A8 MOV X1, X31
	0x01F952AC BL 0x3C3E99C
	0x01F952B0 LDR X0, [X19 + 0xF0]
	0x01F952B4 CBZ X0, 0x1F952E4
	0x01F952B8 MOV W1, W31
	0x01F952BC MOV X2, X31
	0x01F952C0 BL 0x3C32410
	0x01F952C4 LDR X0, [X19 + 0xF0]
	0x01F952C8 CBZ X0, 0x1F952E4
	0x01F952CC LDP X20, X19, [X31 + 0x10]
	0x01F952D0 LDR X30, [X31 + 0x8]
	0x01F952D4 MOVZ W1, 0x1
	0x01F952D8 MOV X2, X31
	0x01F952DC LDR V8, [X31], #0x20
	0x01F952E0 B 0x3C32410
	0x01F952E4 BL 0x1C16F20
	0x01F952E8 MOV X0, X20
	0x01F952EC BL 0x1C171E0
	0x01F952F0 STP X30, X21, [X31 - 0x20]!
	0x01F952F4 STP X20, X19, [X31 + 0x10]
	0x01F952F8 ADRP X20, 0x2444000
	0x01F952FC LDRB W8, [X20 + 0x752]
	0x01F95300 MOV X19, X0
	0x01F95304 TBNZ X8, 0x0, 0x1F9531C
	0x01F95308 ADRP X0, 0x216B000
	0x01F9530C LDR X0, [X0 + 0xE28]
	0x01F95310 BL 0x1C16CF4
	0x01F95314 MOVZ W8, 0x1
	0x01F95318 STRB W8, [X20 + 0x752]
	0x01F9531C LDR X8, [X19 + 0xE0]
	0x01F95320 CBZ X8, 0x1F9538C
	0x01F95324 ADRP X21, 0x216B000
	0x01F95328 LDR X21, [X21 + 0xE28]
	0x01F9532C LDR X20, [X19 + 0x100]
	0x01F95330 LDR X0, [X21]
	0x01F95334 LDR W8, [X0 + 0xE0]
	0x01F95338 CBNZ W8, 0x1F95340
	0x01F9533C BL 0x1C16DFC
	0x01F95340 CBZ X20, 0x1F95398
	0x01F95344 LDR X8, [X21]
	0x01F95348 LDR W2, [X19 + 0x8C]
	0x01F9534C MOV X0, X20
	0x01F95350 MOV X3, X31
	0x01F95354 LDR X8, [X8 + 0xB8]
	0x01F95358 LDR W1, [X8]
	0x01F9535C BL 0x3C15D2C
	0x01F95360 LDR X0, [X19 + 0xE0]
	0x01F95364 LDR W2, [X19 + 0x8C]
	0x01F95368 MOV W1, W31
	0x01F9536C MOV X3, X31
	0x01F95370 BL 0x339FA34
	0x01F95374 LDR X8, [X19]
	0x01F95378 MOV X0, X19
	0x01F9537C LDP X20, X19, [X31 + 0x10]
	0x01F95380 LDP X2, X1, [X8 + 0x1B8]
	0x01F95384 LDP X30, X21, [X31], #0x20
	0x01F95388 BR X2
	0x01F9538C LDP X20, X19, [X31 + 0x10]
	0x01F95390 LDP X30, X21, [X31], #0x20
	0x01F95394 RET
	0x01F95398 BL 0x1C16F20
	0x01F9539C STP X30, X21, [X31 - 0x20]!
	0x01F953A0 STP X20, X19, [X31 + 0x10]
	0x01F953A4 MOV X19, X0
	0x01F953A8 LDR X0, [X0 + 0x38]
	0x01F953AC CBZ X0, 0x1F954C8
	0x01F953B0 MOV X1, X31
	0x01F953B4 BL 0x3C32ECC
	0x01F953B8 CBZ X0, 0x1F954C8
	0x01F953BC MOV X1, X31
	0x01F953C0 BL 0x3C357F8
	0x01F953C4 LDR X8, [X19 + 0x38]
	0x01F953C8 CBZ X8, 0x1F954C8
	0x01F953CC MOV W20, W0
	0x01F953D0 MOV X0, X8
	0x01F953D4 MOV X1, X31
	0x01F953D8 BL 0x3C32ECC
	0x01F953DC CBZ X0, 0x1F954C8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2445000
	006 Move X21, 0x215F000
	007 Move W8, [X20+1863]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x215F000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x215F000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x2186000
	021 Move X0, [X0+3120]
	022 Call 0x1C17CF4
	023 Move X0, 0x2186000
	024 Move X0, [X0+3128]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+1863], W8
	028 Move X0, [X21]
	029 Move X20, [X19+40]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Inequality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {95}
	042 Move X0, [X19+40]
	043 Compare X0, 0
	044 JumpIfEqual {100}
	045 Move X1, X31
	046 Call Component.get_transform, X0
	047 Move X20, X0
	048 Move X0, X19
	049 Move X1, X31
	050 Call Component.get_transform, X0
	051 Move X8, [X21]
	052 Move X21, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X20
	059 Move X1, X21
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {75}
	066 Move X8, 0x215F000
	067 Move X8, [X8+2600]
	068 Move X0, [X8]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Move X8, 0x2186000
	074 Move X8, [X8+3128]
	075 Move X1, [X19+40]
	076 Move X0, X19
	077 Call RunnerVisibilityLink.AssociateComponent, X0, X1
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfEqual {95}
	082 Move X8, 0x215F000
	083 Move X8, [X8+2600]
	084 Move X0, [X8]
	085 Move W8, [X0+224]
	086 Compare W8, 0
	087 JumpIfNotEqual {89}
	088 Call 0x1C17DFC
	089 Move X8, 0x2186000
	090 Move X8, [X8+3120]
	091 Move X0, [X8]
	092 Move X1, X31
	093 Call Debug.LogWarning, X0
	094 Move [X19+40], X31
	095 Move X20, [X31+16]
	096 Move X19, [X31+24]
	097 Move X30, [X31+32]
	098 Move X21, [X31+40]
	099 Return 
	100 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x01F953E0 ORN W20, W31, W20, 0x0
	0x01F953E4 AND W1, W20, 0x1
	0x01F953E8 MOV X2, X31
	0x01F953EC BL 0x3C357B4
	0x01F953F0 TBNZ X20, 0x0, 0x1F95444
	0x01F953F4 LDR X8, [X19]

ISIL:
	001 Move W8, [X0+64]
	002 Compare W8, 0
	003 JumpIfEqual {5}
	004 Return 
	005 Move W1, 2
	006 Move X2, X31
	007 Call Object.set_hideFlags, X0, X1
	008 Return 

Method: System.Void OnDestroy()

Disassembly:
	0x01F953F8 MOV X0, X19
	0x01F953FC LDP X9, X1, [X8 + 0x198]
	0x01F95400 BLR X9
	0x01F95404 LDR X0, [X19 + 0x50]
	0x01F95408 CBZ X0, 0x1F954C8
	0x01F9540C MOV X1, X31
	0x01F95410 BL 0x3C32E90
	0x01F95414 ADRP X8, 0xFFFFFFFFFEB55000
	0x01F95418 LDR V2, [X8 + 0x180]
	0x01F9541C MOV X20, X0
	0x01F95420 FMOV S0, W31
	0x01F95424 FMOV S1, W31
	0x01F95428 MOV X0, X31
	0x01F9542C BL 0x3C2A574
	0x01F95430 CBZ X20, 0x1F954C8
	0x01F95434 MOV X0, X20
	0x01F95438 MOV X1, X31
	0x01F9543C BL 0x3C3F7AC
	0x01F95440 B 0x1F954B0
	0x01F95444 LDR X0, [X19 + 0x50]
	0x01F95448 CBZ X0, 0x1F954C8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x2445000
	006 Move X21, 0x2186000
	007 Move W8, [X20+1864]
	008 Move X21, [X21+1352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x2186000
	015 Move X0, [X0+1352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1864], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call NetworkRunnerVisibilityExtensions.UnregisterNode, X0
	030 Return 

Method: System.Void Initialize(UnityEngine.Component comp, Fusion.NetworkRunner runner)

Disassembly:
	0x01F8A8F8 MOV X19, X0
	0x01F8A8FC TBNZ X8, 0x0, 0x1F8A920
	0x01F8A900 ADRP X0, 0x2190000
	0x01F8A904 LDR X0, [X0 + 0x760]
	0x01F8A908 BL 0x1C16CF4
	0x01F8A90C ADRP X0, 0x2190000
	0x01F8A910 LDR X0, [X0 + 0x768]
	0x01F8A914 BL 0x1C16CF4
	0x01F8A918 MOVZ W8, 0x1
	0x01F8A91C STRB W8, [X21 + 0x6F1]
	0x01F8A920 LDR X2, [X20]
	0x01F8A924 ADD X1, X31, 0x8
	0x01F8A928 MOV X0, X19
	0x01F8A92C STR X31, [X31 + 0x8]
	0x01F8A930 BL 0x21A4990
	0x01F8A934 TBZ X0, 0x0, 0x1F8A940
	0x01F8A938 LDR X0, [X31 + 0x8]
	0x01F8A93C B 0x1F8A964
	0x01F8A940 MOV X0, X19
	0x01F8A944 MOV X1, X31
	0x01F8A948 BL 0x3C32ECC
	0x01F8A94C CBZ X0, 0x1F8A984
	0x01F8A950 ADRP X8, 0x2190000
	0x01F8A954 LDR X8, [X8 + 0x768]
	0x01F8A958 LDR X1, [X8]
	0x01F8A95C BL 0x21E51FC
	0x01F8A960 STR X0, [X31 + 0x8]
	0x01F8A964 CBZ X0, 0x1F8A984
	0x01F8A968 MOVZ W1, 0x1
	0x01F8A96C MOV X2, X31
	0x01F8A970 BL 0x3C32410
	0x01F8A974 LDP X20, X19, [X31 + 0x20]
	0x01F8A978 LDP X30, X21, [X31 + 0x10]
	0x01F8A97C ADD X31, X31, 0x30
	0x01F8A980 RET
	0x01F8A984 BL 0x1C16F20
	0x01F8A988 SUB X31, X31, 0x20
	0x01F8A98C STP X30, X19, [X31 + 0x10]
	0x01F8A990 ADD X1, X31, 0x8
	0x01F8A994 MOV X19, X0
	0x01F8A998 STR W31, [X31 + 0x8]
	0x01F8A99C BL 0x1F8A788
	0x01F8A9A0 TBZ X0, 0x0, 0x1F8A9C8
	0x01F8A9A4 LDR W2, [X31 + 0x8]
	0x01F8A9A8 MOVZ W1, 0x1
	0x01F8A9AC MOV X0, X19
	0x01F8A9B0 MOV W3, W31
	0x01F8A9B4 BL 0x1F8A858
	0x01F8A9B8 MOV X1, X0
	0x01F8A9BC MOV X0, X19
	0x01F8A9C0 MOV X2, X31
	0x01F8A9C4 BL 0x3C366FC
	0x01F8A9C8 LDP X30, X19, [X31 + 0x10]
	0x01F8A9CC ADD X31, X31, 0x20
	0x01F8A9D0 RET
	0x01F8A9D4 SUB X31, X31, 0x20
	0x01F8A9D8 STP X30, X19, [X31 + 0x10]
	0x01F8A9DC ADD X1, X31, 0x8
	0x01F8A9E0 MOV X19, X0
	0x01F8A9E4 STR W31, [X31 + 0x8]
	0x01F8A9E8 BL 0x1F8A788
	0x01F8A9EC TBZ X0, 0x0, 0x1F8AA14
	0x01F8A9F0 LDR W2, [X31 + 0x8]
	0x01F8A9F4 MOVZ W1, 0x3
	0x01F8A9F8 MOV X0, X19
	0x01F8A9FC MOV W3, W31
	0x01F8AA00 BL 0x1F8A858
	0x01F8AA04 MOV X1, X0
	0x01F8AA08 MOV X0, X19
	0x01F8AA0C MOV X2, X31
	0x01F8AA10 BL 0x3C366FC
	0x01F8AA14 LDP X30, X19, [X31 + 0x10]
	0x01F8AA18 ADD X31, X31, 0x20
	0x01F8AA1C RET
	0x01F8AA20 SUB X31, X31, 0x20
	0x01F8AA24 STP X30, X19, [X31 + 0x10]
	0x01F8AA28 ADD X1, X31, 0x8
	0x01F8AA2C MOV X19, X0
	0x01F8AA30 STR W31, [X31 + 0x8]
	0x01F8AA34 BL 0x1F8A788
	0x01F8AA38 TBZ X0, 0x0, 0x1F8AA60
	0x01F8AA3C LDR W2, [X31 + 0x8]
	0x01F8AA40 MOVZ W1, 0x4
	0x01F8AA44 MOV X0, X19
	0x01F8AA48 MOV W3, W31
	0x01F8AA4C BL 0x1F8A858
	0x01F8AA50 MOV X1, X0
	0x01F8AA54 MOV X0, X19
	0x01F8AA58 MOV X2, X31
	0x01F8AA5C BL 0x3C366FC
	0x01F8AA60 LDP X30, X19, [X31 + 0x10]
	0x01F8AA64 ADD X31, X31, 0x20
	0x01F8AA68 RET
	0x01F8AA6C STP X30, X19, [X31 - 0x10]!
	0x01F8AA70 MOVZ W1, 0x5
	0x01F8AA74 MOVZ W3, 0x1
	0x01F8AA78 MOV X2, X31
	0x01F8AA7C MOV X19, X0
	0x01F8AA80 BL 0x1F8A858
	0x01F8AA84 MOV X1, X0
	0x01F8AA88 MOV X0, X19
	0x01F8AA8C MOV X2, X31
	0x01F8AA90 LDP X30, X19, [X31], #0x10
	0x01F8AA94 B 0x3C366FC
	0x01F8AA98 SUB X31, X31, 0x20
	0x01F8AA9C STP X30, X19, [X31 + 0x10]
	0x01F8AAA0 ADD X1, X31, 0x8
	0x01F8AAA4 MOV X19, X0
	0x01F8AAA8 STR W31, [X31 + 0x8]
	0x01F8AAAC BL 0x1F8A788
	0x01F8AAB0 TBZ X0, 0x0, 0x1F8AAD8
	0x01F8AAB4 LDR W2, [X31 + 0x8]
	0x01F8AAB8 MOVZ W1, 0x2
	0x01F8AABC MOVZ W3, 0x1
	0x01F8AAC0 MOV X0, X19
	0x01F8AAC4 BL 0x1F8A858
	0x01F8AAC8 MOV X1, X0
	0x01F8AACC MOV X0, X19
	0x01F8AAD0 MOV X2, X31
	0x01F8AAD4 BL 0x3C366FC
	0x01F8AAD8 LDP X30, X19, [X31 + 0x10]
	0x01F8AADC ADD X31, X31, 0x20
	0x01F8AAE0 RET
	0x01F8AAE4 SUB X31, X31, 0x20
	0x01F8AAE8 STP X30, X19, [X31 + 0x10]
	0x01F8AAEC ADD X1, X31, 0x8
	0x01F8AAF0 MOV X19, X0
	0x01F8AAF4 STR W31, [X31 + 0x8]
	0x01F8AAF8 BL 0x1F8A788
	0x01F8AAFC TBZ X0, 0x0, 0x1F8AB24
	0x01F8AB00 LDR W2, [X31 + 0x8]
	0x01F8AB04 MOVZ W1, 0x6
	0x01F8AB08 MOVZ W3, 0x1
	0x01F8AB0C MOV X0, X19
	0x01F8AB10 BL 0x1F8A858
	0x01F8AB14 MOV X1, X0
	0x01F8AB18 MOV X0, X19
	0x01F8AB1C MOV X2, X31
	0x01F8AB20 BL 0x3C366FC
	0x01F8AB24 LDP X30, X19, [X31 + 0x10]
	0x01F8AB28 ADD X31, X31, 0x20
	0x01F8AB2C RET
	0x01F8AB30 LDR X8, [X0]
	0x01F8AB34 LDR W1, [X0 + 0x34]
	0x01F8AB38 LDR X3, [X8 + 0x218]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x2450000
	009 Move X22, 0x2191000
	010 Move X23, 0x216A000
	011 Move W8, [X24+1865]
	012 Move X22, [X22+1752]
	013 Move X23, [X23+1432]
	014 Move X21, X2
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {41}
	021 Move X0, 0x2191000
	022 Move X0, [X0+1760]
	023 Call 0x1C17CF4
	024 Move X0, 0x2191000
	025 Move X0, [X0+1752]
	026 Call 0x1C17CF4
	027 Move X0, 0x2191000
	028 Move X0, [X0+1768]
	029 Call 0x1C17CF4
	030 Move X0, 0x2191000
	031 Move X0, [X0+1352]
	032 Call 0x1C17CF4
	033 Move X0, 0x216A000
	034 Move X0, [X0+1432]
	035 Call 0x1C17CF4
	036 Move X0, 0x2191000
	037 Move X0, [X0+1776]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X24+1865], W8
	041 Move [X20+72], X21
	042 Move X1, [X22]
	043 Move X0, X20
	044 Call 0x21A4AF8, X0
	045 Move [X20+88], X0
	046 Move X22, X0
	047 Move X0, [X23]
	048 Move W8, [X0+224]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X22
	053 Move X1, X31
	054 Call Object.op_Implicit, X0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {60}
	059 Move X22, [X20+88]
	060 Move X8, 0x2191000
	061 Move X8, [X8+1768]
	062 Move X0, X20
	063 Move X1, [X8]
	064 Call 0x21A4F50, X0
	065 Move X22, X0
	066 Move [X20+88], X0
	067 Move X0, [X23]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X22
	073 Move X1, X31
	074 Call Object.op_Implicit, X0
	075 Compare X19, 0
	076 JumpIfEqual {155}
	077 Move X9, 0x2191000
	078 Move X9, [X9+1776]
	079 Move X8, [X19]
	080 Move X10, [X9]
	081 Move W9, [X8+304]
	082 Move W11, [X10+304]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X12, [X8+200]
	085 Add X11, X12, X11
	086 NotImplemented "Instruction LDUR not yet implemented."
	087 NotImplemented "Instruction CMP not yet implemented."
	088 Move X10, 0x2191000
	089 Move X10, [X10+1760]
	090 Move X10, [X10]
	091 Move W11, [X10+304]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X8, [X8+200]
	094 Add X8, X8, X11
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 NotImplemented "Instruction CSEL not yet implemented."
	098 Compare X22, 0
	099 JumpIfEqual {155}
	100 Move W8, 2
	101 Move X0, X22
	102 Move X1, X31
	103 Move [X20+80], W8
	104 Call Behaviour.get_enabled, X0
	105 And W8, W0, 1
	106 Move [X20+96], W8
	107 Move X8, 0x2191000
	108 Move X8, [X8+1352]
	109 Move X0, [X8]
	110 Move W8, [X0+224]
	111 Compare W8, 0
	112 JumpIfNotEqual {114}
	113 Call 0x1C17DFC
	114 Move X0, X21
	115 Call NetworkRunnerVisibilityExtensions.GetVisible, X0
	116 Move TEMP, X0
	117 And TEMP, TEMP, 1
	118 Compare TEMP, 1
	119 JumpIfNotEqual {146}
	120 Move W8, [X20+96]
	121 NotImplemented "Instruction CMP not yet implemented."
	122 NotImplemented "Instruction CSET not yet implemented."
	123 Move W8, 1
	124 Move X0, X19
	125 Move X1, X31
	126 Move [X20+80], W8
	127 Call Renderer.get_enabled, X0
	128 And W8, W0, 1
	129 Move [X20+96], W8
	130 Move X8, 0x2191000
	131 Move X8, [X8+1352]
	132 Move X0, [X8]
	133 Move W8, [X0+224]
	134 Compare W8, 0
	135 JumpIfNotEqual {137}
	136 Call 0x1C17DFC
	137 Move X0, X21
	138 Call NetworkRunnerVisibilityExtensions.GetVisible, X0
	139 Move TEMP, X0
	140 And TEMP, TEMP, 1
	141 Compare TEMP, 1
	142 JumpIfNotEqual {150}
	143 Move W8, [X20+96]
	144 NotImplemented "Instruction CMP not yet implemented."
	145 NotImplemented "Instruction CSET not yet implemented."
	146 Move W1, W31
	147 Move X0, X22
	148 Move X2, X31
	149 Call Behaviour.set_enabled, X0, X1
	150 Move W1, W31
	151 Move X0, X19
	152 Move X2, X31
	153 Call Renderer.set_enabled, X0, X1
	154 Move [X20+40], X19
	155 Move X20, [X31+48]
	156 Move X19, [X31+56]
	157 Move X22, [X31+32]
	158 Move X21, [X31+40]
	159 Move X24, [X31+16]
	160 Move X23, [X31+24]
	161 Move X30, [X31+64]
	162 Return 

Method: System.Void SetEnabled(System.Boolean enabled)

Disassembly:
	0x01F8ADB8 BL 0x1E9E7CC
	0x01F8ADBC TBZ X0, 0x0, 0x1F8AD74
	0x01F8ADC0 MOVZ W1, 0x1
	0x01F8ADC4 MOV X0, X20
	0x01F8ADC8 MOV W2, W31
	0x01F8ADCC MOV W3, W31
	0x01F8ADD0 MOV X4, X31
	0x01F8ADD4 BL 0x1E9EECC
	0x01F8ADD8 B 0x1F8AD74
	0x01F8ADDC LDR X1, [X21]
	0x01F8ADE0 ADD X0, X31, 0x20
	0x01F8ADE4 BL 0x2BC434C
	0x01F8ADE8 LDR X8, [X24]
	0x01F8ADEC LDR X0, [X23]
	0x01F8ADF0 LDR X8, [X8 + 0xB8]
	0x01F8ADF4 LDR W9, [X0 + 0xE0]
	0x01F8ADF8 LDR X20, [X8]
	0x01F8ADFC CBNZ W9, 0x1F8AE04
	0x01F8AE00 BL 0x1C16DFC

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move TEMP, X1
	005 And TEMP, TEMP, 1
	006 Compare TEMP, 1
	007 JumpIfNotEqual {21}
	008 Move W8, [X19+96]
	009 Compare W8, 0
	010 JumpIfNotEqual {19}
	011 Move X0, X19
	012 Call RunnerVisibilityLink.get_Enabled, X0
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {27}
	017 Move W8, 1
	018 Move [X19+96], W8
	019 Move W1, 1
	020 Move X0, X19
	021 Move X0, X19
	022 Move W1, W31
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call RunnerVisibilityLink.set_Enabled, X0, X1
	026 Return 
	027 Move X30, [X31+16]
	028 Move X19, [X31+24]
	029 Return 

Method: System.Boolean IsInputAuth()

Disassembly:
	0x01F8AE04 MOV X0, X20
	0x01F8AE08 MOV X1, X31
	0x01F8AE0C BL 0x3C47B34
	0x01F8AE10 LDR X0, [X19 + 0x20]
	0x01F8AE14 CBZ X0, 0x1F8AE80
	0x01F8AE18 MOV X1, X31
	0x01F8AE1C BL 0x3C32ECC
	0x01F8AE20 LDR X8, [X22]
	0x01F8AE24 MOV X20, X0
	0x01F8AE28 LDR W9, [X8 + 0xE0]
	0x01F8AE2C CBNZ W9, 0x1F8AE38
	0x01F8AE30 MOV X0, X8
	0x01F8AE34 BL 0x1C16DFC
	0x01F8AE38 MOV X0, X20
	0x01F8AE3C MOV X1, X31
	0x01F8AE40 BL 0x3C394A8
	0x01F8AE44 MOV X0, X19
	0x01F8AE48 MOV X1, X31
	0x01F8AE4C BL 0x3C32ECC
	0x01F8AE50 MOV X1, X31
	0x01F8AE54 BL 0x3C394A8
	0x01F8AE58 STR W31, [X19 + 0x58]
	0x01F8AE5C STR W31, [X19 + 0x68]
	0x01F8AE60 LDP X20, X19, [X31 + 0x70]
	0x01F8AE64 LDP X22, X21, [X31 + 0x60]
	0x01F8AE68 LDP X24, X23, [X31 + 0x50]
	0x01F8AE6C LDP X30, X25, [X31 + 0x40]
	0x01F8AE70 ADD X31, X31, 0x80
	0x01F8AE74 RET
	0x01F8AE78 MOV X25, X21
	0x01F8AE7C BL 0x1C16F20
	0x01F8AE80 BL 0x1C16F20
	0x01F8AE84 B 0x1F8AE98
	0x01F8AE88 B 0x1F8AE98
	0x01F8AE8C B 0x1F8AE9C
	0x01F8AE90 B 0x1F8AE98
	0x01F8AE94 B 0x1F8AE98
	0x01F8AE98 MOV X25, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x2450000
	006 Move X20, 0x216A000
	007 Move W8, [X21+1866]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x216A000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1866], W8
	019 Move X0, [X20]
	020 Move X20, [X19+88]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Call Object.op_Implicit, X0
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {51}
	032 Move X0, [X19+88]
	033 Compare X0, 0
	034 JumpIfEqual {57}
	035 Move X1, X31
	036 Call NetworkObject.get_IsValid, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {51}
	041 Move X0, [X19+88]
	042 Compare X0, 0
	043 JumpIfEqual {57}
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X1, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call NetworkObject.get_HasInputAuthority, X0
	050 Return X0
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move W0, W31
	054 Move X30, [X31+32]
	055 Move X21, [X31+40]
	056 Return X0
	057 Call 0x1C17F20

Method: System.Void SetupOnSingleRunnerLink(Fusion.RunnerVisibilityLink/PreferredRunners preferredRunner)

Disassembly:
	0x01F93420 LDR X20, [X20 + 0x598]
	0x01F93424 MOV X19, X0
	0x01F93428 TBNZ X8, 0x0, 0x1F9344C
	0x01F9342C ADRP X0, 0x2187000

ISIL:
	001 Move W8, 1
	002 Move [X0+32], W1
	003 Move [X0+48], W8
	004 Return 

Method: System.Void InvokeRefreshCommonObjectVisibilities(System.Single time)

Disassembly:
	0x01F8AFDC ADRP X21, 0x244F000
	0x01F8AFE0 LDRB W8, [X21 + 0x6F5]
	0x01F8AFE4 MOV W20, W1
	0x01F8AFE8 MOV X19, X0
	0x01F8AFEC TBNZ X8, 0x0, 0x1F8B010
	0x01F8AFF0 ADRP X0, 0x2169000
	0x01F8AFF4 LDR X0, [X0 + 0xA28]
	0x01F8AFF8 BL 0x1C16CF4
	0x01F8AFFC ADRP X0, 0x2190000
	0x01F8B000 LDR X0, [X0 + 0x770]
	0x01F8B004 BL 0x1C16CF4
	0x01F8B008 MOVZ W8, 0x1
	0x01F8B00C STRB W8, [X21 + 0x6F5]
	0x01F8B010 MOV X0, X31
	0x01F8B014 STR W31, [X31 + 0x8]
	0x01F8B018 BL 0x1EB7374
	0x01F8B01C CBZ X0, 0x1F8B09C
	0x01F8B020 LDR W8, [X0 + 0x20]
	0x01F8B024 CMP W8, 0x1
	0x01F8B028 B.NE 0x1F8B060
	0x01F8B02C ADD X1, X31, 0x8
	0x01F8B030 BL 0x1F8A788
	0x01F8B034 TBZ X0, 0x0, 0x1F8B08C
	0x01F8B038 LDR W2, [X31 + 0x8]
	0x01F8B03C MOVZ W1, 0x5
	0x01F8B040 MOV X0, X19

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x2450000
	007 Move X20, 0x2191000
	008 Move W8, [X21+1867]
	009 Move X20, [X20+1824]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x2190000
	017 Move X0, [X0+1824]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+1867], W8
	021 Move X0, X19
	022 Move X1, X31
	023 Call MonoBehaviour.StopAllCoroutines, X0
	024 Move X1, [X20]
	025 Move X0, X19
	026 Move X20, [X31+32]
	027 Move X19, [X31+40]
	028 Move X30, [X31+16]
	029 Move X21, [X31+24]
	030 Move V0, V8
	031 Move X2, X31
	032 Move V8, [X31+48]
	033 Call MonoBehaviour.Invoke, X0, X1, V0
	034 Return 

Method: System.Void RetryRefreshCommonLinks()

Disassembly:
	0x01F9544C MOV X1, X31
	0x01F95450 BL 0x3C32E90
	0x01F95454 ADRP X21, 0x2443000
	0x01F95458 LDRB W8, [X21 + 0x793]
	0x01F9545C MOV X20, X0
	0x01F95460 CBNZ W8, 0x1F95478
	0x01F95464 ADRP X0, 0x215F000
	0x01F95468 LDR X0, [X0 + 0x5A8]
	0x01F9546C BL 0x1C16CF4
	0x01F95470 MOVZ W8, 0x1
	0x01F95474 STRB W8, [X21 + 0x793]
	0x01F95478 CBZ X20, 0x1F954C8
	0x01F9547C ADRP X8, 0x215F000
	0x01F95480 LDR X8, [X8 + 0x5A8]
	0x01F95484 MOV X0, X20
	0x01F95488 MOV X1, X31
	0x01F9548C LDR X8, [X8]
	0x01F95490 LDR X8, [X8 + 0xB8]
	0x01F95494 LDP S2, S3, [X8 + 0x8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x2445000
	005 Move X20, 0x2186000
	006 Move W8, [X19+1868]
	007 Move X20, [X20+1352]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x2186000
	013 Move X0, [X0+1352]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1868], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Call NetworkRunnerVisibilityExtensions.RetryRefreshCommonLinks
	026 Return 

Method: System.Void .ctor()

Disassembly:
	0x01F95498 LDP S0, S1, [X8]
	0x01F9549C BL 0x3C3F7AC

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

