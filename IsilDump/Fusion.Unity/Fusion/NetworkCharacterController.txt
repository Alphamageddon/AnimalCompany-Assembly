Type: Fusion.NetworkCharacterController

Method: Fusion.NetworkCCData get_Data()

Disassembly:
	0x01F8ECC0 BL 0x1C16CF4
	0x01F8ECC4 ADRP X0, 0x218C000
	0x01F8ECC8 LDR X0, [X0 + 0x968]
	0x01F8ECCC BL 0x1C16CF4
	0x01F8ECD0 ADRP X0, 0x218C000
	0x01F8ECD4 LDR X0, [X0 + 0x950]
	0x01F8ECD8 BL 0x1C16CF4
	0x01F8ECDC ADRP X0, 0x218C000
	0x01F8ECE0 LDR X0, [X0 + 0x960]
	0x01F8ECE4 BL 0x1C16CF4
	0x01F8ECE8 ADRP X0, 0x2165000
	0x01F8ECEC LDR X0, [X0 + 0xC90]
	0x01F8ECF0 BL 0x1C16CF4
	0x01F8ECF4 ADRP X0, 0x218C000
	0x01F8ECF8 LDR X0, [X0 + 0x980]
	0x01F8ECFC BL 0x1C16CF4
	0x01F8ED00 ADRP X0, 0x218C000
	0x01F8ED04 LDR X0, [X0 + 0x978]
	0x01F8ED08 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x244C000
	006 Move X21, 0x218D000
	007 Move W8, [X20+1807]
	008 Move X21, [X21+2336]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x218D000
	015 Move X0, [X0+2336]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+1807], W8
	019 Move X2, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move W1, W31
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call NetworkBehaviour.ReinterpretState, X0, X1
	027 Return X0

Method: UnityEngine.Vector3 get_Velocity()

Disassembly:
	0x01F8ED0C ADRP X0, 0x218C000
	0x01F8ED10 LDR X0, [X0 + 0x988]
	0x01F8ED14 BL 0x1C16CF4
	0x01F8ED18 MOVZ W8, 0x1
	0x01F8ED1C STRB W8, [X24 + 0x71A]
	0x01F8ED20 LDR X0, [X19]
	0x01F8ED24 ADRP X26, 0x218C000
	0x01F8ED28 ADRP X25, 0x218C000

ISIL:
	001 Move [X31-16], X30
	002 Call NetworkCharacterController.get_Data, X0
	003 NotImplemented "Instruction LDUR not yet implemented."
	004 Move W1, [X0+68]
	005 Move X2, X31
	006 Move X0, X8
	007 Move X30, [X31+16]
	008 Call 0x1E2F6F8
	009 Return X0

Method: System.Void set_Velocity(UnityEngine.Vector3 value)

Disassembly:
	0x01F8ED2C ADRP X24, 0x2165000
	0x01F8ED30 LDR X26, [X26 + 0x988]
	0x01F8ED34 LDR X25, [X25 + 0x980]
	0x01F8ED38 LDR X24, [X24 + 0xC90]
	0x01F8ED3C BL 0x1C16F10
	0x01F8ED40 MOV X1, X31
	0x01F8ED44 MOV X19, X0
	0x01F8ED48 BL 0x33BDD8C
	0x01F8ED4C LDR X0, [X23]
	0x01F8ED50 BL 0x1C16F10
	0x01F8ED54 LDR X2, [X20]
	0x01F8ED58 MOV X1, X19
	0x01F8ED5C MOV X20, X0
	0x01F8ED60 BL 0x2AE976C
	0x01F8ED64 LDR X8, [X22]
	0x01F8ED68 LDR X8, [X8 + 0xB8]
	0x01F8ED6C STR X20, [X8]
	0x01F8ED70 LDR X0, [X21]
	0x01F8ED74 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move V8, V2
	007 Move V9, V1
	008 Move V10, V0
	009 Call NetworkCharacterController.get_Data, X0
	010 Move X19, X0
	011 Move V0, V10
	012 Move V1, V9
	013 Move V2, V8
	014 Move X0, X31
	015 Call 0x1E2F540
	016 Move [X19+60], X0
	017 Move [X19+68], W1
	018 Move X30, [X31+32]
	019 Move X19, [X31+40]
	020 Move D9, [X31+16]
	021 Move D8, [X31+24]
	022 Move V10, [X31+48]
	023 Return 

Method: System.Boolean get_Grounded()

Disassembly:
	0x01F8ED78 CBNZ W8, 0x1F8ED84
	0x01F8ED7C BL 0x1C16DFC
	0x01F8ED80 LDR X0, [X21]
	0x01F8ED84 LDR X8, [X0 + 0xB8]
	0x01F8ED88 LDR X0, [X26]
	0x01F8ED8C LDR X20, [X8]
	0x01F8ED90 BL 0x1C16F10

ISIL:
	001 Move [X31-16], X30
	002 Call NetworkCharacterController.get_Data, X0
	003 Move W8, [X0+56]
	004 NotImplemented "Instruction CMP not yet implemented."
	005 NotImplemented "Instruction CSET not yet implemented."
	006 Move X30, [X31+16]
	007 Return X0

Method: System.Void set_Grounded(System.Boolean value)

Disassembly:
	0x01F8ED94 LDR X2, [X25]
	0x01F8ED98 MOV X1, X20
	0x01F8ED9C MOV X3, X31
	0x01F8EDA0 MOV X19, X0
	0x01F8EDA4 BL 0x2725E20
	0x01F8EDA8 LDR X0, [X24]
	0x01F8EDAC LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W19, W1
	004 Call NetworkCharacterController.get_Data, X0
	005 And W8, W19, 1
	006 Move [X0+56], W8
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 

Method: System.Void Teleport(System.Nullable`1<UnityEngine.Vector3> position = null, System.Nullable`1<UnityEngine.Quaternion> rotation = null)

Disassembly:
	0x01F8EDB0 CBNZ W8, 0x1F8EDB8
	0x01F8EDB4 BL 0x1C16DFC
	0x01F8EDB8 MOV X0, X19
	0x01F8EDBC LDP X20, X19, [X31 + 0x40]
	0x01F8EDC0 LDP X22, X21, [X31 + 0x30]
	0x01F8EDC4 LDP X24, X23, [X31 + 0x20]
	0x01F8EDC8 LDP X26, X25, [X31 + 0x10]
	0x01F8EDCC MOV X1, X31
	0x01F8EDD0 LDR X30, [X31], #0x50
	0x01F8EDD4 B 0x3C4780C
	0x01F8EDD8 SUB X31, X31, 0x30
	0x01F8EDDC STP X30, X21, [X31 + 0x10]
	0x01F8EDE0 STP X20, X19, [X31 + 0x20]
	0x01F8EDE4 ADRP X21, 0x244B000
	0x01F8EDE8 LDRB W8, [X21 + 0x71B]
	0x01F8EDEC MOV X20, X1
	0x01F8EDF0 MOV X19, X0
	0x01F8EDF4 TBNZ X8, 0x0, 0x1F8EE3C
	0x01F8EDF8 ADRP X0, 0x2165000
	0x01F8EDFC LDR X0, [X0 + 0xA58]
	0x01F8EE00 BL 0x1C16CF4
	0x01F8EE04 ADRP X0, 0x2168000
	0x01F8EE08 LDR X0, [X0 + 0xE40]
	0x01F8EE0C BL 0x1C16CF4
	0x01F8EE10 ADRP X0, 0x2165000
	0x01F8EE14 LDR X0, [X0 + 0xC90]
	0x01F8EE18 BL 0x1C16CF4
	0x01F8EE1C ADRP X0, 0x2165000
	0x01F8EE20 LDR X0, [X0 + 0xCA8]
	0x01F8EE24 BL 0x1C16CF4
	0x01F8EE28 ADRP X0, 0x218C000
	0x01F8EE2C LDR X0, [X0 + 0x990]
	0x01F8EE30 BL 0x1C16CF4
	0x01F8EE34 MOVZ W8, 0x1
	0x01F8EE38 STRB W8, [X21 + 0x71B]
	0x01F8EE3C MOV X0, X19
	0x01F8EE40 STR X20, [X19 + 0x50]
	0x01F8EE44 BL 0x1F8EBCC

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X19, X0
	008 Move X0, [X0+160]
	009 Compare X0, 0
	010 JumpIfEqual {44}
	011 Move X20, X2
	012 Move X21, X1
	013 Move W1, W31
	014 Move X2, X31
	015 Move X22, X3
	016 Call Collider.set_enabled, X0, X1
	017 Move X0, X19
	018 Move X1, X31
	019 Call Component.get_transform, X0
	020 Move V0, [X22]
	021 Move W8, [X22+16]
	022 Move X1, X0
	023 Add X4, X31, 0
	024 Move X0, X19
	025 Move X2, X21
	026 Move X3, X20
	027 Move X5, X31
	028 Move [X31], V0
	029 Move [X31+16], W8
	030 Call NetworkTRSP.Teleport, X0, X1, X2, X3
	031 Move X0, [X19+160]
	032 Compare X0, 0
	033 JumpIfEqual {44}
	034 Move W1, 1
	035 Move X2, X31
	036 Call Collider.set_enabled, X0, X1
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X22, [X31+48]
	040 Move X21, [X31+56]
	041 Move X30, [X31+32]
	042 Add X31, X31, 80
	043 Return 
	044 Call 0x1C17F20

Method: System.Void Jump(System.Boolean ignoreGrounded = False, System.Nullable`1<System.Single> overrideImpulse = null)

Disassembly:
	0x01F8EE48 TBZ X0, 0x0, 0x1F8EF40
	0x01F8EE4C CBZ X20, 0x1F8EF50
	0x01F8EE50 MOV X0, X20
	0x01F8EE54 MOV X1, X31
	0x01F8EE58 BL 0x3C389D4
	0x01F8EE5C MOV X21, X0
	0x01F8EE60 MOV X0, X20
	0x01F8EE64 MOV X1, X31
	0x01F8EE68 BL 0x1E9EA20
	0x01F8EE6C ADRP X8, 0x2168000
	0x01F8EE70 LDR X8, [X8 + 0xE40]
	0x01F8EE74 STR W0, [X31 + 0x8]
	0x01F8EE78 ADD X1, X31, 0x8
	0x01F8EE7C LDR X8, [X8]
	0x01F8EE80 MOV X0, X8
	0x01F8EE84 BL 0x1C16E04
	0x01F8EE88 ADRP X8, 0x2165000
	0x01F8EE8C LDR X8, [X8 + 0xCA8]
	0x01F8EE90 MOV X2, X0
	0x01F8EE94 MOV X1, X21
	0x01F8EE98 MOV X3, X31
	0x01F8EE9C LDR X8, [X8]
	0x01F8EEA0 MOV X0, X8
	0x01F8EEA4 BL 0x3227BD4
	0x01F8EEA8 MOV X20, X0
	0x01F8EEAC ADD X0, X31, 0x0
	0x01F8EEB0 MOVZ W1, 0x3
	0x01F8EEB4 MOV X2, X31
	0x01F8EEB8 STR W31, [X31]
	0x01F8EEBC BL 0x3C47A54
	0x01F8EEC0 ADRP X8, 0x2165000
	0x01F8EEC4 LDR X8, [X8 + 0xC90]
	0x01F8EEC8 LDR X0, [X8]
	0x01F8EECC LDR W8, [X0 + 0xE0]
	0x01F8EED0 CBNZ W8, 0x1F8EED8
	0x01F8EED4 BL 0x1C16DFC
	0x01F8EED8 LDR W1, [X31]
	0x01F8EEDC MOV X0, X20
	0x01F8EEE0 MOV X2, X31
	0x01F8EEE4 BL 0x3C470AC
	0x01F8EEE8 STR W0, [X19 + 0x44]
	0x01F8EEEC ADRP X8, 0x2165000
	0x01F8EEF0 LDR X8, [X8 + 0xA58]
	0x01F8EEF4 LDR X0, [X8]
	0x01F8EEF8 BL 0x1C16F10
	0x01F8EEFC ADRP X8, 0x218C000
	0x01F8EF00 LDR X8, [X8 + 0x990]
	0x01F8EF04 MOV X2, X31
	0x01F8EF08 MOV X20, X0
	0x01F8EF0C LDR X1, [X8]
	0x01F8EF10 BL 0x3C35934
	0x01F8EF14 CBZ X20, 0x1F8EF50
	0x01F8EF18 MOV X0, X20
	0x01F8EF1C MOV X1, X31
	0x01F8EF20 BL 0x3C356F8
	0x01F8EF24 STR X0, [X19 + 0x48]
	0x01F8EF28 CBZ X0, 0x1F8EF50

ISIL:
	001 Move [X31-64], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X22, 0x244C000
	010 Move W8, [X22+1808]
	011 Move X20, X2
	012 Move W21, W1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x218D000
	019 Move X0, [X0+2344]
	020 Call 0x1C17CF4
	021 Move X0, 0x216A000
	022 Move X0, [X0+192]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+1808], W8
	026 Move X0, X19
	027 Call NetworkCharacterController.get_Data, X0
	028 Move W8, [X0+56]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move TEMP, X21
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {60}
	034 Move X0, X19
	035 Call NetworkCharacterController.get_Data, X0
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 Move W1, [X0+68]
	038 Move X2, X31
	039 Move X0, X8
	040 Call 0x1E2F6F8
	041 Move V8, V0
	042 And W31, W20, 255
	043 Move V9, V2
	044 Move X8, X20
	045 ShiftRight X8, 32
	046 And X8, X8, 0x7FFFFFFF
	047 Move S0, W8
	048 Move V0, [X19+136]
	049 Move X0, X19
	050 Add S10, S1, S0
	051 Call NetworkCharacterController.get_Data, X0
	052 Move X19, X0
	053 Move V0, V8
	054 Move V1, V10
	055 Move V2, V9
	056 Move X0, X31
	057 Call 0x1E2F540
	058 Move [X19+60], X0
	059 Move [X19+68], W1
	060 Move X20, [X31+48]
	061 Move X19, [X31+56]
	062 Move X22, [X31+32]
	063 Move X21, [X31+40]
	064 Move X30, [X31+24]
	065 Move D9, [X31+8]
	066 Move D8, [X31+16]
	067 Move V10, [X31+64]
	068 Return 

Method: System.Void Move(UnityEngine.Vector3 direction)

Disassembly:
	0x01F8EF2C MOV X1, X31
	0x01F8EF30 BL 0x3C32ECC
	0x01F8EF34 LDR W1, [X19 + 0x44]
	0x01F8EF38 MOV X2, X31
	0x01F8EF3C BL 0x3C474F0
	0x01F8EF40 LDP X20, X19, [X31 + 0x20]
	0x01F8EF44 LDP X30, X21, [X31 + 0x10]
	0x01F8EF48 ADD X31, X31, 0x30
	0x01F8EF4C RET
	0x01F8EF50 BL 0x1C16F20
	0x01F8EF54 SUB X31, X31, 0x90
	0x01F8EF58 STR X30, [X31 + 0x40]
	0x01F8EF5C STP X26, X25, [X31 + 0x50]
	0x01F8EF60 STP X24, X23, [X31 + 0x60]
	0x01F8EF64 STP X22, X21, [X31 + 0x70]
	0x01F8EF68 STP X20, X19, [X31 + 0x80]
	0x01F8EF6C ADRP X20, 0x244B000
	0x01F8EF70 ADRP X23, 0x218C000
	0x01F8EF74 LDRB W8, [X20 + 0x71C]
	0x01F8EF78 LDR X23, [X23 + 0x950]
	0x01F8EF7C MOV X19, X0
	0x01F8EF80 TBNZ X8, 0x0, 0x1F8F064
	0x01F8EF84 ADRP X0, 0x218C000
	0x01F8EF88 LDR X0, [X0 + 0x998]
	0x01F8EF8C BL 0x1C16CF4
	0x01F8EF90 ADRP X0, 0x218C000
	0x01F8EF94 LDR X0, [X0 + 0x9A0]
	0x01F8EF98 BL 0x1C16CF4
	0x01F8EF9C ADRP X0, 0x218C000
	0x01F8EFA0 LDR X0, [X0 + 0x9A8]
	0x01F8EFA4 BL 0x1C16CF4
	0x01F8EFA8 ADRP X0, 0x218C000
	0x01F8EFAC LDR X0, [X0 + 0x9B0]
	0x01F8EFB0 BL 0x1C16CF4
	0x01F8EFB4 ADRP X0, 0x218C000
	0x01F8EFB8 LDR X0, [X0 + 0x9B8]
	0x01F8EFBC BL 0x1C16CF4
	0x01F8EFC0 ADRP X0, 0x218C000
	0x01F8EFC4 LDR X0, [X0 + 0x9C0]
	0x01F8EFC8 BL 0x1C16CF4
	0x01F8EFCC ADRP X0, 0x218C000
	0x01F8EFD0 LDR X0, [X0 + 0x9C8]
	0x01F8EFD4 BL 0x1C16CF4
	0x01F8EFD8 ADRP X0, 0x218C000
	0x01F8EFDC LDR X0, [X0 + 0x9D0]
	0x01F8EFE0 BL 0x1C16CF4
	0x01F8EFE4 ADRP X0, 0x218C000
	0x01F8EFE8 LDR X0, [X0 + 0x9D8]
	0x01F8EFEC BL 0x1C16CF4
	0x01F8EFF0 ADRP X0, 0x218C000
	0x01F8EFF4 LDR X0, [X0 + 0x538]
	0x01F8EFF8 BL 0x1C16CF4
	0x01F8EFFC ADRP X0, 0x218C000
	0x01F8F000 LDR X0, [X0 + 0x9E0]
	0x01F8F004 BL 0x1C16CF4
	0x01F8F008 ADRP X0, 0x218B000
	0x01F8F00C LDR X0, [X0 + 0x9E8]
	0x01F8F010 BL 0x1C16CF4
	0x01F8F014 ADRP X0, 0x218B000
	0x01F8F018 LDR X0, [X0 + 0x9F0]
	0x01F8F01C BL 0x1C16CF4
	0x01F8F020 ADRP X0, 0x218B000
	0x01F8F024 LDR X0, [X0 + 0x950]
	0x01F8F028 BL 0x1C16CF4
	0x01F8F02C ADRP X0, 0x2164000
	0x01F8F030 LDR X0, [X0 + 0xC90]
	0x01F8F034 BL 0x1C16CF4
	0x01F8F038 ADRP X0, 0x218B000
	0x01F8F03C LDR X0, [X0 + 0x9F8]
	0x01F8F040 BL 0x1C16CF4
	0x01F8F044 ADRP X0, 0x218B000
	0x01F8F048 LDR X0, [X0 + 0x978]
	0x01F8F04C BL 0x1C16CF4
	0x01F8F050 ADRP X0, 0x218B000
	0x01F8F054 LDR X0, [X0 + 0xA00]
	0x01F8F058 BL 0x1C16CF4
	0x01F8F05C MOVZ W8, 0x1
	0x01F8F060 STRB W8, [X20 + 0x71C]
	0x01F8F064 STR W31, [X31 + 0x48]
	0x01F8F068 STP X31, X31, [X31 + 0x20]
	0x01F8F06C STR X31, [X31 + 0x30]
	0x01F8F070 STR X31, [X19 + 0x50]
	0x01F8F074 LDR X0, [X23]
	0x01F8F078 ADRP X25, 0x218B000
	0x01F8F07C ADRP X21, 0x218B000
	0x01F8F080 ADRP X22, 0x218B000
	0x01F8F084 ADRP X24, 0x218B000
	0x01F8F088 LDR W8, [X0 + 0xE0]
	0x01F8F08C LDR X25, [X25 + 0x9D0]
	0x01F8F090 LDR X21, [X21 + 0x9F0]
	0x01F8F094 LDR X22, [X22 + 0x9B0]
	0x01F8F098 LDR X24, [X24 + 0x978]
	0x01F8F09C CBNZ W8, 0x1F8F0A8
	0x01F8F0A0 BL 0x1C16DFC
	0x01F8F0A4 LDR X0, [X23]
	0x01F8F0A8 LDR X8, [X0 + 0xB8]
	0x01F8F0AC LDR X0, [X25]
	0x01F8F0B0 LDR X20, [X8]
	0x01F8F0B4 BL 0x1C16F10
	0x01F8F0B8 LDR X2, [X21]
	0x01F8F0BC MOV X1, X19
	0x01F8F0C0 MOV X3, X31
	0x01F8F0C4 MOV X21, X0
	0x01F8F0C8 BL 0x2D2AAD4
	0x01F8F0CC LDR X2, [X22]
	0x01F8F0D0 MOV X0, X20
	0x01F8F0D4 MOV X1, X21
	0x01F8F0D8 BL 0x21D8B1C
	0x01F8F0DC LDR X8, [X24]
	0x01F8F0E0 MOV X20, X0
	0x01F8F0E4 LDR W9, [X8 + 0xE0]
	0x01F8F0E8 CBNZ W9, 0x1F8F0F8
	0x01F8F0EC MOV X0, X8
	0x01F8F0F0 BL 0x1C16DFC
	0x01F8F0F4 LDR X8, [X24]
	0x01F8F0F8 LDR X9, [X8 + 0xB8]
	0x01F8F0FC ADRP X26, 0x218B000
	0x01F8F100 ADRP X25, 0x218B000
	0x01F8F104 LDR X21, [X9 + 0x8]
	0x01F8F108 LDR X26, [X26 + 0x9A0]
	0x01F8F10C LDR X25, [X25 + 0x9A8]
	0x01F8F110 CBNZ X21, 0x1F8F168
	0x01F8F114 LDR W9, [X8 + 0xE0]
	0x01F8F118 CBNZ W9, 0x1F8F128
	0x01F8F11C MOV X0, X8
	0x01F8F120 BL 0x1C16DFC
	0x01F8F124 LDR X8, [X24]
	0x01F8F128 ADRP X9, 0x218B000
	0x01F8F12C LDR X8, [X8 + 0xB8]
	0x01F8F130 LDR X9, [X9 + 0x9D8]
	0x01F8F134 LDR X22, [X8]
	0x01F8F138 LDR X0, [X9]
	0x01F8F13C BL 0x1C16F10
	0x01F8F140 ADRP X8, 0x218B000
	0x01F8F144 LDR X8, [X8 + 0x9F8]
	0x01F8F148 MOV X1, X22
	0x01F8F14C MOV X3, X31
	0x01F8F150 MOV X21, X0
	0x01F8F154 LDR X2, [X8]
	0x01F8F158 BL 0x2D2AB74
	0x01F8F15C LDR X8, [X24]
	0x01F8F160 LDR X8, [X8 + 0xB8]
	0x01F8F164 STR X21, [X8 + 0x8]
	0x01F8F168 LDR X2, [X26]
	0x01F8F16C MOV X0, X20
	0x01F8F170 MOV X1, X21
	0x01F8F174 BL 0x21CB5E0
	0x01F8F178 LDR X1, [X25]
	0x01F8F17C BL 0x21D7A70
	0x01F8F180 CBZ X0, 0x1F8F2FC
	0x01F8F184 ADRP X8, 0x218B000
	0x01F8F188 LDR X8, [X8 + 0x9E8]
	0x01F8F18C ADRP X21, 0x218B000
	0x01F8F190 ADRP X24, 0x218B000
	0x01F8F194 ADRP X22, 0x218B000
	0x01F8F198 LDR X1, [X8]
	0x01F8F19C LDR X21, [X21 + 0x9C0]
	0x01F8F1A0 LDR X24, [X24 + 0x998]
	0x01F8F1A4 LDR X22, [X22 + 0x9B8]
	0x01F8F1A8 ADD X8, X31, 0x8
	0x01F8F1AC BL 0x3055764
	0x01F8F1B0 LDUR V0, [X31 + 0x8]
	0x01F8F1B4 LDR X8, [X31 + 0x18]
	0x01F8F1B8 STR V0, [X31 + 0x2]
	0x01F8F1BC STR X8, [X31 + 0x30]
	0x01F8F1C0 LDR X1, [X21]
	0x01F8F1C4 ADD X0, X31, 0x20
	0x01F8F1C8 BL 0x2BC9658
	0x01F8F1CC TBZ X0, 0x0, 0x1F8F204
	0x01F8F1D0 LDR X0, [X23]
	0x01F8F1D4 LDR W20, [X31 + 0x30]
	0x01F8F1D8 LDR W8, [X0 + 0xE0]
	0x01F8F1DC CBNZ W8, 0x1F8F1E8
	0x01F8F1E0 BL 0x1C16DFC
	0x01F8F1E4 LDR X0, [X23]
	0x01F8F1E8 LDR X8, [X0 + 0xB8]
	0x01F8F1EC LDR X0, [X8]
	0x01F8F1F0 CBZ X0, 0x1F8F2F8
	0x01F8F1F4 LDR X2, [X24]
	0x01F8F1F8 MOV X1, X20
	0x01F8F1FC BL 0x2AEB414
	0x01F8F200 B 0x1F8F1C0
	0x01F8F204 LDR X1, [X22]
	0x01F8F208 ADD X0, X31, 0x20
	0x01F8F20C BL 0x2BC9654
	0x01F8F210 LDR X8, [X19 + 0x28]
	0x01F8F214 CBZ X8, 0x1F8F2FC
	0x01F8F218 LDP W2, W9, [X8 + 0x18]
	0x01F8F21C ADD W9, W9, 0x1
	0x01F8F220 CMP W2, 0x1
	0x01F8F224 STP W31, W9, [X8 + 0x18]
	0x01F8F228 B.LT 0x1F8F23C
	0x01F8F22C LDR X0, [X8 + 0x10]
	0x01F8F230 MOV W1, W31
	0x01F8F234 MOV X3, X31
	0x01F8F238 BL 0x339FA34
	0x01F8F23C LDR W8, [X19 + 0x44]
	0x01F8F240 ADD X0, X31, 0x48
	0x01F8F244 MOV X1, X31
	0x01F8F248 STR X31, [X19 + 0x30]
	0x01F8F24C STR X31, [X19 + 0x48]
	0x01F8F250 STR W8, [X31 + 0x48]
	0x01F8F254 STR W31, [X19 + 0x44]
	0x01F8F258 BL 0x3C463D8
	0x01F8F25C TBZ X0, 0x0, 0x1F8F2DC
	0x01F8F260 ADRP X8, 0x218B000
	0x01F8F264 LDR X8, [X8 + 0x538]
	0x01F8F268 LDR W19, [X31 + 0x48]
	0x01F8F26C LDR X0, [X8]
	0x01F8F270 LDR W8, [X0 + 0xE0]
	0x01F8F274 CBNZ W8, 0x1F8F27C
	0x01F8F278 BL 0x1C16DFC
	0x01F8F27C MOV X0, X19
	0x01F8F280 BL 0x1F87124
	0x01F8F284 TBNZ X0, 0x0, 0x1F8F2B4
	0x01F8F288 ADRP X8, 0x2164000
	0x01F8F28C LDR X8, [X8 + 0xC90]
	0x01F8F290 LDR X0, [X8]
	0x01F8F294 LDR W8, [X0 + 0xE0]
	0x01F8F298 CBNZ W8, 0x1F8F2A0
	0x01F8F29C BL 0x1C16DFC
	0x01F8F2A0 ADRP X8, 0x218B000
	0x01F8F2A4 LDR X8, [X8 + 0xA00]
	0x01F8F2A8 MOV X1, X31
	0x01F8F2AC LDR X0, [X8]
	0x01F8F2B0 BL 0x3C479F4
	0x01F8F2B4 ADRP X8, 0x2164000
	0x01F8F2B8 LDR X8, [X8 + 0xC90]
	0x01F8F2BC LDR W19, [X31 + 0x48]
	0x01F8F2C0 LDR X0, [X8]
	0x01F8F2C4 LDR W8, [X0 + 0xE0]
	0x01F8F2C8 CBNZ W8, 0x1F8F2D0
	0x01F8F2CC BL 0x1C16DFC
	0x01F8F2D0 MOV X0, X19
	0x01F8F2D4 MOV X1, X31
	0x01F8F2D8 BL 0x3C47C80
	0x01F8F2DC LDP X20, X19, [X31 + 0x80]
	0x01F8F2E0 LDP X22, X21, [X31 + 0x70]
	0x01F8F2E4 LDP X24, X23, [X31 + 0x60]
	0x01F8F2E8 LDP X26, X25, [X31 + 0x50]
	0x01F8F2EC LDR X30, [X31 + 0x40]
	0x01F8F2F0 ADD X31, X31, 0x90
	0x01F8F2F4 RET
	0x01F8F2F8 BL 0x1C16F20
	0x01F8F2FC BL 0x1C16F20
	0x01F8F300 B 0x1F8F30C
	0x01F8F304 B 0x1F8F30C
	0x01F8F308 B 0x1F8F30C
	0x01F8F30C MOV X20, X0
	0x01F8F310 CMP W1, 0x1
	0x01F8F314 B.NE 0x1F8F340
	0x01F8F318 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+120], X21
	012 Move [X31+128], X20
	013 Move [X31+136], X19
	014 Move X19, X0
	015 Move X0, [X0+56]
	016 Compare X0, 0
	017 JumpIfEqual {283}
	018 Move X1, X31
	019 Move V8, V2
	020 Move V12, V1
	021 Move V13, V0
	022 Call NetworkRunner.get_DeltaTime, X0
	023 Move X0, X19
	024 Move X1, X31
	025 Move V11, V0
	026 Call Component.get_transform, X0
	027 Compare X0, 0
	028 JumpIfEqual {283}
	029 Move X1, X31
	030 Call Transform.get_position, X0
	031 Move X0, X19
	032 Move V15, V0
	033 Move V9, V1
	034 Move [X31+28], S2
	035 Call NetworkCharacterController.get_Data, X0
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 Move W1, [X0+68]
	038 Move X2, X31
	039 Move X0, X8
	040 Call 0x1E2F6F8
	041 Move X20, 0x244B000
	042 Move W8, [X20+1925]
	043 Move V10, V1
	044 Move [X31+40], S2
	045 Move [X31+48], S0
	046 Compare W8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, 0x2166000
	049 Move X0, [X0+1448]
	050 Call 0x1C17CF4
	051 Move W8, 1
	052 Move [X20+1925], W8
	053 Move X20, 0x2166000
	054 Move X20, [X20+1448]
	055 Move X0, [X20]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Multiply S0, S13, S13
	061 Multiply S1, S12, S12
	062 Move X8, -21639168
	063 Add S0, S0, S1
	064 Move V1, [X8+380]
	065 Multiply S2, S8, S8
	066 Add S0, S2, S0
	067 NotImplemented "Instruction FSQRT not yet implemented."
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 NotImplemented "Instruction FDIV not yet implemented."
	070 NotImplemented "Instruction FDIV not yet implemented."
	071 NotImplemented "Instruction FDIV not yet implemented."
	072 Move X21, 0x244A000
	073 Move W8, [X21+1923]
	074 Compare W8, 0
	075 JumpIfNotEqual {81}
	076 Move X0, 0x2165000
	077 Move X0, [X0+1440]
	078 Call 0x1C17CF4
	079 Move W8, 1
	080 Move [X21+1923], W8
	081 Move X8, 0x2165000
	082 Move X8, [X8+1440]
	083 Move X8, [X8]
	084 Move X8, [X8+184]
	085 Move S13, [X8]
	086 Move S14, [X8+4]
	087 Move V8, [X8+8]
	088 Move X0, X19
	089 Call NetworkCharacterController.get_Data, X0
	090 Move X8, [X19+56]
	091 Compare X8, 0
	092 JumpIfEqual {283}
	093 Move W9, [X0+56]
	094 Move V1, [X19+132]
	095 Move S12, W31
	096 Move X0, X8
	097 NotImplemented "Instruction CMP not yet implemented."
	098 NotImplemented "Instruction FCCMP not yet implemented."
	099 NotImplemented "Instruction FCSEL not yet implemented."
	100 Move X1, X31
	101 Move [X31+32], S0
	102 Move [X31+40], S1
	103 Call NetworkRunner.get_DeltaTime, X0
	104 Move X8, -21647360
	105 Move V3, [X8+3872]
	106 Multiply S1, S13, S13
	107 Multiply S2, S14, S14
	108 Add S1, S1, S2
	109 Multiply S2, S8, S8
	110 Add S1, S2, S1
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 Move V4, V0
	113 Move V0, [X19+144]
	114 Move S6, [X31+40]
	115 Move S5, [X31+44]
	116 Move S1, 1
	117 Multiply S0, S11, S0
	118 NotImplemented "Instruction FMIN not yet implemented."
	119 NotImplemented "Instruction FCMP not yet implemented."
	120 Subtract S2, S12, S5
	121 Subtract S3, S12, S6
	122 NotImplemented "Instruction FCSEL not yet implemented."
	123 Multiply S1, S2, S0
	124 Multiply S0, S3, S0
	125 Add S10, S5, S1
	126 Add S12, S6, S0
	127 Move V0, [X19+140]
	128 Move V3, [X31+44]
	129 Move X21, 0x244B000
	130 Move [X31+20], S9
	131 Move [X31+28], S15
	132 Multiply S1, S13, S0
	133 Multiply S1, S11, S1
	134 Add S10, S3, S1
	135 Move V1, [X31+40]
	136 Move V15, [X19+148]
	137 Move W8, [X21+1891]
	138 Multiply S2, S14, S0
	139 Multiply S0, S8, S0
	140 Multiply S2, S11, S2
	141 Multiply S0, S11, S0
	142 Add S9, S2, S12
	143 Add S12, S1, S0
	144 Move [X31+44], S4
	145 Compare W8, 0
	146 JumpIfNotEqual {152}
	147 Move X0, 0x2165000
	148 Move X0, [X0+1448]
	149 Call 0x1C17CF4
	150 Move W8, 1
	151 Move [X21+1891], W8
	152 Multiply S0, S10, S10
	153 Multiply S1, S9, S9
	154 Multiply S2, S12, S12
	155 Add S0, S0, S1
	156 Add S9, S2, S0
	157 Multiply S0, S15, S15
	158 NotImplemented "Instruction FCMP not yet implemented."
	159 Move X0, [X20]
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {164}
	163 Call 0x1C17DFC
	164 NotImplemented "Instruction FSQRT not yet implemented."
	165 NotImplemented "Instruction FDIV not yet implemented."
	166 NotImplemented "Instruction FDIV not yet implemented."
	167 Multiply S10, S15, S1
	168 Multiply S12, S15, S0
	169 Move X0, X19
	170 Move X1, X31
	171 Call Component.get_transform, X0
	172 Move X20, X0
	173 Move X0, X19
	174 Move X1, X31
	175 Call Component.get_transform, X0
	176 Compare X0, 0
	177 JumpIfEqual {283}
	178 Move X1, X31
	179 Call Transform.get_rotation, X0
	180 Move [X31+40], S0
	181 Move [X31+12], S2
	182 Move [X31+20], S1
	183 Move V0, V13
	184 Move V1, V14
	185 Move V2, V8
	186 Move X0, X31
	187 Move [X31+8], S3
	188 Call Quaternion.LookRotation, X0
	189 Move X0, [X19+56]
	190 Compare X0, 0
	191 JumpIfEqual {283}
	192 Move V15, [X19+152]
	193 Move X1, X31
	194 Move V8, V0
	195 Move V13, V1
	196 Move V14, V2
	197 Move V9, V3
	198 Call NetworkRunner.get_DeltaTime, X0
	199 Multiply S0, S15, S0
	200 Move [X31], S0
	201 Move V0, [X31+40]
	202 Move S2, [X31+12]
	203 Move S1, [X31+16]
	204 Move V3, [X31+8]
	205 Move V4, V8
	206 Move V5, V13
	207 Move V6, V14
	208 Move V7, V9
	209 Move X0, X31
	210 Call Quaternion.Slerp, X0, X1, V0
	211 Compare X20, 0
	212 JumpIfEqual {283}
	213 Move X0, X20
	214 Move X1, X31
	215 Call Transform.set_rotation, X0, X1
	216 Move S9, [X31+20]
	217 Move S15, [X31+24]
	218 Move V4, [X31+44]
	219 Move X0, [X19+160]
	220 Compare X0, 0
	221 JumpIfEqual {283}
	222 Move S1, [X31+32]
	223 Move S0, [X31+36]
	224 Multiply S2, S11, S12
	225 Move X1, X31
	226 Multiply S0, S0, S4
	227 Add S0, S0, S1
	228 Multiply S1, S11, S0
	229 Multiply S0, S11, S10
	230 Call CharacterController.Move, X0, X1
	231 Move X0, X19
	232 Call NetworkCharacterController.get_Data, X0
	233 Move X20, X0
	234 Move X0, X19
	235 Move X1, X31
	236 Call Component.get_transform, X0
	237 Compare X0, 0
	238 JumpIfEqual {283}
	239 Move X1, X31
	240 Call Transform.get_position, X0
	241 Move X0, [X19+56]
	242 Compare X0, 0
	243 JumpIfEqual {283}
	244 Move V3, [X31+28]
	245 Move X1, X31
	246 Subtract S9, S1, S9
	247 Subtract S10, S0, S15
	248 Subtract S8, S2, S3
	249 Call NetworkRunner.get_TickRate, X0
	250 NotImplemented "Instruction SCVTF not yet implemented."
	251 Multiply S0, S10, S2
	252 Multiply S1, S9, S2
	253 Multiply S2, S8, S2
	254 Move X0, X31
	255 Call 0x1E2F540
	256 Move [X20+60], X0
	257 Move X0, X19
	258 Move [X20+68], W1
	259 Call NetworkCharacterController.get_Data, X0
	260 Move X8, [X19+160]
	261 Compare X8, 0
	262 JumpIfEqual {283}
	263 Move X19, X0
	264 Move X0, X8
	265 Move X1, X31
	266 Call CharacterController.get_isGrounded, X0
	267 And W8, W0, 1
	268 Move [X19+56], W8
	269 Move X20, [X31+128]
	270 Move X19, [X31+136]
	271 Move X30, [X31+112]
	272 Move X21, [X31+120]
	273 Move D9, [X31+96]
	274 Move D8, [X31+104]
	275 Move D11, [X31+80]
	276 Move D10, [X31+88]
	277 Move D13, [X31+64]
	278 Move D12, [X31+72]
	279 Move D15, [X31+48]
	280 Move D14, [X31+56]
	281 Add X31, X31, 144
	282 Return 
	283 Call 0x1C17F20

Method: System.Void Spawned()

Disassembly:
	0x01F8F31C BL 0x3EB1AD0
	0x01F8F320 LDR X21, [X0]
	0x01F8F324 BL 0x3EB1AE0
	0x01F8F328 LDR X1, [X22]
	0x01F8F32C ADD X0, X31, 0x20
	0x01F8F330 BL 0x2BC9654
	0x01F8F334 CBZ X21, 0x1F8F210
	0x01F8F338 MOV X0, X21
	0x01F8F33C BL 0x1C16F18
	0x01F8F340 MOV X21, X31
	0x01F8F344 B 0x1F8F34C
	0x01F8F348 MOV X20, X0
	0x01F8F34C LDR X1, [X22]
	0x01F8F350 ADD X0, X31, 0x20
	0x01F8F354 BL 0x2BC9654
	0x01F8F358 CBNZ X21, 0x1F8F364
	0x01F8F35C MOV X0, X20
	0x01F8F360 BL 0x1D2C690
	0x01F8F364 MOV X0, X21
	0x01F8F368 BL 0x1C16F18
	0x01F8F36C BL 0x1990590
	0x01F8F370 STR X30, [X31 - 0x20]!
	0x01F8F374 STP X20, X19, [X31 + 0x10]
	0x01F8F378 ADRP X20, 0x244A000
	0x01F8F37C LDRB W8, [X20 + 0x71D]
	0x01F8F380 MOV X19, X0
	0x01F8F384 TBNZ X8, 0x0, 0x1F8F39C
	0x01F8F388 ADRP X0, 0x218B000
	0x01F8F38C LDR X0, [X0 + 0xA08]
	0x01F8F390 BL 0x1C16CF4
	0x01F8F394 MOVZ W8, 0x1
	0x01F8F398 STRB W8, [X20 + 0x71D]
	0x01F8F39C LDRB W8, [X19 + 0x58]
	0x01F8F3A0 CBZ W8, 0x1F8F3AC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x244B000
	006 Move X20, 0x218C000
	007 Move W8, [X21+1809]
	008 Move X20, [X20+2352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x218C000
	015 Move X0, [X0+2352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1809], W8
	019 Move [X19+156], W31
	020 Move X2, [X20]
	021 Add X20, X19, 160
	022 Move X0, X19
	023 Move X1, X20
	024 Call 0x21A5990, X0, X1
	025 Move X0, [X19+160]
	026 Compare X0, 0
	027 JumpIfEqual {42}
	028 Move W1, W31
	029 Move X2, X31
	030 Call Collider.set_enabled, X0, X1
	031 Move X0, [X20]
	032 Compare X0, 0
	033 JumpIfEqual {42}
	034 Move W1, 1
	035 Move X2, X31
	036 Call Collider.set_enabled, X0, X1
	037 Move X0, X19
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Call 0x1C17F20

Method: System.Void Render()

Disassembly:
	0x01F8F414 LDR W0, [X19 + 0x44]
	0x01F8F418 B 0x1F8F43C
	0x01F8F41C ADRP X8, 0x2164000
	0x01F8F420 LDR X8, [X8 + 0xC90]
	0x01F8F424 LDR X0, [X8]
	0x01F8F428 LDR W8, [X0 + 0xE0]
	0x01F8F42C CBNZ W8, 0x1F8F434
	0x01F8F430 BL 0x1C16DFC
	0x01F8F434 MOV X0, X31
	0x01F8F438 BL 0x3C46DFC
	0x01F8F43C LDP X20, X19, [X31 + 0x10]
	0x01F8F440 AND X0, X0, 0x0
	0x01F8F444 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Component.get_transform, X0
	006 Add X5, X19, 156
	007 Move X1, X0
	008 Move X0, X19
	009 Move W2, W31
	010 Move W3, W31
	011 Move W4, W31
	012 Move X6, X31
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Call NetworkTRSP.Render, X0, X1, X2, X3, X4, X5
	016 Return 

Method: System.Void Fusion.IBeforeAllTicks.BeforeAllTicks(System.Boolean resimulation, System.Int32 tickCount)

Disassembly:
	0x01F8F448 RET

ISIL:
No ISIL was generated
Method: System.Void Fusion.IAfterAllTicks.AfterAllTicks(System.Boolean resimulation, System.Int32 tickCount)

Disassembly:
	0x01F8F4E8 RET

ISIL:
	001 Call NetworkCharacterController.CopyToBuffer, X0
	002 Return 

Method: System.Void Fusion.IBeforeCopyPreviousState.BeforeCopyPreviousState()

Disassembly:
	0x01F8F4EC STR X30, [X31 - 0x20]!

ISIL:
	001 Call NetworkCharacterController.CopyToBuffer, X0
	002 Return 

Method: System.Void Awake()

Disassembly:
	0x01F8F4F0 STP X20, X19, [X31 + 0x10]
	0x01F8F4F4 LDR X8, [X0]
	0x01F8F4F8 MOV X19, X1
	0x01F8F4FC LDR X9, [X8 + 0x2A8]
	0x01F8F500 LDR X8, [X8 + 0x2B0]
	0x01F8F504 MOV X1, X8
	0x01F8F508 BLR X9
	0x01F8F50C STR W0, [X31 + 0x8]
	0x01F8F510 ADD X0, X31, 0x8
	0x01F8F514 MOV X1, X31
	0x01F8F518 BL 0x3C46324
	0x01F8F51C MOV W20, W0
	0x01F8F520 TBZ X0, 0x0, 0x1F8F538
	0x01F8F524 LDR W0, [X31 + 0x8]
	0x01F8F528 MOV X1, X31
	0x01F8F52C BL 0x3C90E1C
	0x01F8F530 STR W0, [X19]
	0x01F8F534 B 0x1F8F53C
	0x01F8F538 STR W31, [X19]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x244B000
	006 Move X20, 0x218C000
	007 Move W8, [X21+1810]
	008 Move X20, [X20+2352]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x218C000
	015 Move X0, [X0+2352]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1810], W8
	019 Move X2, [X20]
	020 Add X1, X19, 160
	021 Move X0, X19
	022 Move X20, [X31+16]
	023 Move X19, [X31+24]
	024 Move X30, [X31+32]
	025 Move X21, [X31+40]
	026 Call 0x21A5990, X0, X1
	027 Return 

Method: System.Void CopyToBuffer()

Disassembly:
	0x01F8F3A4 MOVZ W0, 0x1
	0x01F8F3A8 B 0x1F8F3CC
	0x01F8F3AC MOV X0, X19
	0x01F8F3B0 BL 0x1F8EBCC
	0x01F8F3B4 TBZ X0, 0x0, 0x1F8F3C8
	0x01F8F3B8 LDR X8, [X19 + 0x28]
	0x01F8F3BC CBZ X8, 0x1F8F3D8
	0x01F8F3C0 LDR W8, [X8 + 0x18]
	0x01F8F3C4 CBZ W8, 0x1F8F3A4
	0x01F8F3C8 MOV W0, W31
	0x01F8F3CC LDP X20, X19, [X31 + 0x10]
	0x01F8F3D0 LDR X30, [X31], #0x20
	0x01F8F3D4 RET
	0x01F8F3D8 BL 0x1C16F20
	0x01F8F3DC STR X30, [X31 - 0x20]!
	0x01F8F3E0 STP X20, X19, [X31 + 0x10]
	0x01F8F3E4 ADRP X20, 0x244A000
	0x01F8F3E8 LDRB W8, [X20 + 0x71E]
	0x01F8F3EC MOV X19, X0
	0x01F8F3F0 TBNZ X8, 0x0, 0x1F8F408
	0x01F8F3F4 ADRP X0, 0x2164000
	0x01F8F3F8 LDR X0, [X0 + 0xC90]
	0x01F8F3FC BL 0x1C16CF4
	0x01F8F400 MOVZ W8, 0x1
	0x01F8F404 STRB W8, [X20 + 0x71E]
	0x01F8F408 MOV X0, X19
	0x01F8F40C BL 0x1F8EBCC
	0x01F8F410 TBZ X0, 0x0, 0x1F8F41C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Call NetworkCharacterController.get_Data, X0
	006 Move X20, X0
	007 Move X0, X19
	008 Move X1, X31
	009 Call Component.get_transform, X0
	010 Compare X0, 0
	011 JumpIfEqual {35}
	012 Move X1, X31
	013 Call Transform.get_position, X0
	014 Move X0, X19
	015 Move [X20+8], S0
	016 Move [X20+16], S1
	017 Move [X20+16], S2
	018 Call NetworkCharacterController.get_Data, X0
	019 Move X20, X0
	020 Move X0, X19
	021 Move X1, X31
	022 Call Component.get_transform, X0
	023 Compare X0, 0
	024 JumpIfEqual {35}
	025 Move X1, X31
	026 Call Transform.get_rotation, X0
	027 Move [X20+20], S0
	028 Move [X20+28], S1
	029 Move [X20+28], S2
	030 Move [X20+36], S3
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return 
	035 Call 0x1C17F20

Method: System.Void CopyToEngine()

Disassembly:
	0x01F8F44C STR X30, [X31 - 0x20]!
	0x01F8F450 STP X20, X19, [X31 + 0x10]
	0x01F8F454 MOV X19, X1
	0x01F8F458 MOV X20, X0
	0x01F8F45C BL 0x1F8EBCC
	0x01F8F460 TBZ X0, 0x0, 0x1F8F47C
	0x01F8F464 LDR W1, [X20 + 0x44]
	0x01F8F468 AND X0, X19, 0x0
	0x01F8F46C LDP X20, X19, [X31 + 0x10]
	0x01F8F470 MOV X2, X31
	0x01F8F474 LDR X30, [X31], #0x20
	0x01F8F478 B 0x3C46850
	0x01F8F47C LDP X20, X19, [X31 + 0x10]
	0x01F8F480 MOVZ W0, 0x1
	0x01F8F484 LDR X30, [X31], #0x20
	0x01F8F488 RET
	0x01F8F48C STR X30, [X31 - 0x20]!
	0x01F8F490 STP X20, X19, [X31 + 0x10]
	0x01F8F494 LDR X8, [X0]
	0x01F8F498 MOV X19, X1
	0x01F8F49C LDR X9, [X8 + 0x2A8]
	0x01F8F4A0 LDR X8, [X8 + 0x2B0]
	0x01F8F4A4 MOV X1, X8
	0x01F8F4A8 BLR X9
	0x01F8F4AC STR W0, [X31 + 0x8]
	0x01F8F4B0 ADD X0, X31, 0x8
	0x01F8F4B4 MOV X1, X31
	0x01F8F4B8 BL 0x3C46324
	0x01F8F4BC MOV W20, W0
	0x01F8F4C0 TBZ X0, 0x0, 0x1F8F4D8
	0x01F8F4C4 LDR W0, [X31 + 0x8]
	0x01F8F4C8 MOV X1, X31
	0x01F8F4CC BL 0x3C88600
	0x01F8F4D0 STR W0, [X19]
	0x01F8F4D4 B 0x1F8F4DC
	0x01F8F4D8 STR W31, [X19]
	0x01F8F4DC AND W0, W20, 0x1
	0x01F8F4E0 LDP X20, X19, [X31 + 0x10]
	0x01F8F4E4 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X19, X0
	008 Move X0, [X0+160]
	009 Compare X0, 0
	010 JumpIfEqual {50}
	011 Move W1, W31
	012 Move X2, X31
	013 Call Collider.set_enabled, X0, X1
	014 Move X0, X19
	015 Move X1, X31
	016 Call Component.get_transform, X0
	017 Move X20, X0
	018 Move X0, X19
	019 Call NetworkCharacterController.get_Data, X0
	020 Move S8, [X0+8]
	021 Move S9, [X0+12]
	022 Move V10, [X0+16]
	023 Move X0, X19
	024 Call NetworkCharacterController.get_Data, X0
	025 Compare X20, 0
	026 JumpIfEqual {50}
	027 Move S5, [X0+28]
	028 Move S6, [X0+32]
	029 Move S3, [X0+20]
	030 Move S4, [X0+24]
	031 Move X0, X20
	032 Move V0, V8
	033 Move V1, V9
	034 Move V2, V10
	035 Move X1, X31
	036 Call Transform.SetPositionAndRotation, X0, X1, X2
	037 Move X0, [X19+160]
	038 Compare X0, 0
	039 JumpIfEqual {50}
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X30, [X31+24]
	043 Move D9, [X31+8]
	044 Move D8, [X31+16]
	045 Move W1, 1
	046 Move X2, X31
	047 Move V10, [X31+48]
	048 Call Collider.set_enabled, X0, X1
	049 Return 
	050 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x01F8F53C AND W0, W20, 0x1
	0x01F8F540 LDP X20, X19, [X31 + 0x10]
	0x01F8F544 LDR X30, [X31], #0x20
	0x01F8F548 RET
	0x01F8F54C STP X30, X21, [X31 - 0x20]!
	0x01F8F550 STP X20, X19, [X31 + 0x10]
	0x01F8F554 ADRP X21, 0x244A000
	0x01F8F558 LDRB W8, [X21 + 0x71F]

ISIL:
	001 Move X8, -21639168
	002 Move X9, -21630976
	003 Move V0, [X8+150]
	004 Move V1, [X9+2560]
	005 Move X1, X31
	006 Move [X0+132], V0
	007 Move [X0+148], D1
	008 Call NetworkTRSP..ctor, X0
	009 Return 

