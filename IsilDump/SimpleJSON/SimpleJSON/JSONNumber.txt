Type: SimpleJSON.JSONNumber

Method: SimpleJSON.JSONNodeType get_Tag()

Disassembly:
	0x035B8EA4 LDR X2, [X21]
	0x035B8EA8 MOV X0, X19

ISIL:
	001 Move W0, 4
	002 Return X0

Method: System.Boolean get_IsNumber()

Disassembly:
	0x035B8EAC MOV X1, X20
	0x035B8EB0 BL 0x220D364

ISIL:
	001 Move W0, 1
	002 Return X0

Method: SimpleJSON.JSONNode/Enumerator GetEnumerator()

Disassembly:
	0x035B8EB4 LDP X20, X19, [X31 + 0x20]
	0x035B8EB8 LDP X22, X21, [X31 + 0x10]
	0x035B8EBC MOV W0, W31
	0x035B8EC0 LDR X30, [X31], #0x30
	0x035B8EC4 RET

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X8+64], X31
	003 Move [X8+32], V0
	004 Move [X8+40], V0
	005 Move [X8], V0
	006 Move [X8+8], V0
	007 Return X0

Method: System.String get_Value()

Disassembly:
	0x035B8EC8 STP X30, X23, [X31 - 0x30]!
	0x035B8ECC STP X22, X21, [X31 + 0x10]
	0x035B8ED0 STP X20, X19, [X31 + 0x20]
	0x035B8ED4 ADRP X21, 0xE28000
	0x035B8ED8 ADRP X23, 0xB65000
	0x035B8EDC ADRP X22, 0xB7F000
	0x035B8EE0 LDRB W8, [X21 + 0x100]
	0x035B8EE4 LDR X23, [X23 + 0x400]
	0x035B8EE8 LDR X22, [X22 + 0x8E8]
	0x035B8EEC MOV W20, W1
	0x035B8EF0 MOV X19, X0
	0x035B8EF4 TBNZ X8, 0x0, 0x35B8F18
	0x035B8EF8 ADRP X0, 0xB7F000
	0x035B8EFC LDR X0, [X0 + 0x8E8]
	0x035B8F00 BL 0x1C16CF4
	0x035B8F04 ADRP X0, 0xB65000
	0x035B8F08 LDR X0, [X0 + 0x400]
	0x035B8F0C BL 0x1C16CF4
	0x035B8F10 MOVZ W8, 0x1
	0x035B8F14 STRB W8, [X21 + 0x100]
	0x035B8F18 LDR X0, [X23]
	0x035B8F1C BL 0x1C16F10
	0x035B8F20 SCVTF D0, W20
	0x035B8F24 MOV X21, X0
	0x035B8F28 BL 0x35AD340
	0x035B8F2C LDR X2, [X22]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE29000
	006 Move X21, 0xB3E000
	007 Move W8, [X20+225]
	008 Move X21, [X21+3144]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB3E000
	015 Move X0, [X0+3144]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+225], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Add X19, X19, 16
	026 Call CultureInfo.get_InvariantCulture
	027 Move X1, X0
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X2, X31
	032 Move X30, [X31+32]
	033 Move X21, [X31+40]
	034 Call Double.ToString, X0, X1
	035 Return X0

Method: System.Void set_Value(System.String value)

Disassembly:
	0x035B8F30 MOV X0, X19
	0x035B8F34 MOV X1, X21
	0x035B8F38 LDP X20, X19, [X31 + 0x20]
	0x035B8F3C LDP X22, X21, [X31 + 0x10]
	0x035B8F40 LDP X30, X23, [X31], #0x30
	0x035B8F44 B 0x220D364
	0x035B8F48 STR X30, [X31 - 0x30]!
	0x035B8F4C STP X22, X21, [X31 + 0x10]
	0x035B8F50 STP X20, X19, [X31 + 0x20]
	0x035B8F54 ADRP X20, 0xE28000
	0x035B8F58 ADRP X22, 0xB65000
	0x035B8F5C ADRP X21, 0xB7F000
	0x035B8F60 LDRB W8, [X20 + 0x101]
	0x035B8F64 LDR X22, [X22 + 0x400]
	0x035B8F68 LDR X21, [X21 + 0x8E8]
	0x035B8F6C MOV X19, X0
	0x035B8F70 TBNZ X8, 0x0, 0x35B8F94
	0x035B8F74 ADRP X0, 0xB7F000
	0x035B8F78 LDR X0, [X0 + 0x8E8]
	0x035B8F7C BL 0x1C16CF4
	0x035B8F80 ADRP X0, 0xB65000
	0x035B8F84 LDR X0, [X0 + 0x400]
	0x035B8F88 BL 0x1C16CF4
	0x035B8F8C MOVZ W8, 0x1
	0x035B8F90 STRB W8, [X20 + 0x101]
	0x035B8F94 LDR X0, [X22]
	0x035B8F98 BL 0x1C16F10
	0x035B8F9C FMOV D0, X31
	0x035B8FA0 MOV X20, X0
	0x035B8FA4 BL 0x35AD340
	0x035B8FA8 LDR X2, [X21]
	0x035B8FAC MOV X0, X19
	0x035B8FB0 MOV X1, X20
	0x035B8FB4 BL 0x220D364
	0x035B8FB8 LDP X20, X19, [X31 + 0x20]
	0x035B8FBC LDP X22, X21, [X31 + 0x10]
	0x035B8FC0 FMOV S0, W31
	0x035B8FC4 LDR X30, [X31], #0x30
	0x035B8FC8 RET
	0x035B8FCC STR D8, [X31 - 0x30]!
	0x035B8FD0 STR X30, [X31 + 0x8]
	0x035B8FD4 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xE29000
	007 Move X21, 0xB3E000
	008 Move W8, [X22+226]
	009 Move X21, [X21+3144]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB3E000
	017 Move X0, [X0+3144]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+226], W8
	021 Move X0, [X21]
	022 Move [X31+8], X31
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X31
	028 Call CultureInfo.get_InvariantCulture
	029 Move X2, X0
	030 Add X3, X31, 8
	031 Move W1, 167
	032 Move X0, X20
	033 Move X4, X31
	034 Call Double.TryParse, X0, X1, X2, X3
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {42}
	039 Move V0, [X31+8]
	040 Move X8, D0
	041 Move [X19+16], D0
	042 Move X8, [X19+16]
	043 NotImplemented "Instruction ORN not yet implemented."
	044 And X31, X8, 0x7FFFFFFFFFFFFFFF
	045 Move [X19+16], X31
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Return 

Method: System.Double get_AsDouble()

Disassembly:
	0x035B8FD8 STP X20, X19, [X31 + 0x20]
	0x035B8FDC ADRP X20, 0xE28000

ISIL:
	001 Move V0, [X0+16]
	002 Return V0

Method: System.Void set_AsDouble(System.Double value)

Disassembly:
	0x035B8FE0 ADRP X22, 0xB65000
	0x035B8FE4 ADRP X21, 0xB7F000
	0x035B8FE8 LDRB W8, [X20 + 0x102]
	0x035B8FEC LDR X22, [X22 + 0x400]
	0x035B8FF0 LDR X21, [X21 + 0x8E8]
	0x035B8FF4 MOV V8.16B, V0.16B
	0x035B8FF8 MOV X19, X0

ISIL:
	001 Move X8, D0
	002 Move X9, 0x7FF00000
	003 NotImplemented "Instruction BICS not yet implemented."
	004 Move D1, X31
	005 NotImplemented "Instruction FCSEL not yet implemented."
	006 Move [X0+16], D0
	007 Return 

Method: System.Int64 get_AsLong()

Disassembly:
	0x035B8FFC TBNZ X8, 0x0, 0x35B9020
	0x035B9000 ADRP X0, 0xB7E000
	0x035B9004 LDR X0, [X0 + 0x8E8]
	0x035B9008 BL 0x1C16CF4
	0x035B900C ADRP X0, 0xB64000
	0x035B9010 LDR X0, [X0 + 0x400]
	0x035B9014 BL 0x1C16CF4
	0x035B9018 MOVZ W8, 0x1

ISIL:
	001 Move V0, [X0+16]
	002 Move X8, 0x7FF00000
	003 Move D1, X8
	004 Move X9, 0x80000000
	005 NotImplemented "Instruction FCVTZS not yet implemented."
	006 NotImplemented "Instruction FCMP not yet implemented."
	007 NotImplemented "Instruction CSEL not yet implemented."
	008 Return X0

Method: System.Void set_AsLong(System.Int64 value)

Disassembly:
	0x035B901C STRB W8, [X20 + 0x102]
	0x035B9020 LDR X0, [X22]
	0x035B9024 BL 0x1C16F10

ISIL:
	001 NotImplemented "Instruction SCVTF not yet implemented."
	002 Move [X0+16], D0
	003 Return 

Method: System.UInt64 get_AsULong()

Disassembly:
	0x035B9028 FCVT S0, S8
	0x035B902C MOV X20, X0
	0x035B9030 BL 0x35AD340
	0x035B9034 LDR X2, [X21]
	0x035B9038 MOV X0, X19
	0x035B903C MOV X1, X20

ISIL:
	001 Move V0, [X0+16]
	002 NotImplemented "Instruction FCVTZS not yet implemented."
	003 NotImplemented "Instruction FCVTZU not yet implemented."
	004 NotImplemented "Instruction FCMP not yet implemented."
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Return X0

Method: System.Void set_AsULong(System.UInt64 value)

Disassembly:
	0x035B9040 LDP X20, X19, [X31 + 0x20]
	0x035B9044 LDP X22, X21, [X31 + 0x10]
	0x035B9048 LDR X30, [X31 + 0x8]

ISIL:
	001 NotImplemented "Instruction UCVTF not yet implemented."
	002 Move [X0+16], D0
	003 Return 

Method: System.Void .ctor(System.Double aData)

Disassembly:
	0x035AE340 MOV X0, X21
	0x035AE344 MOV X1, X25
	0x035AE348 LDR X2, [X8]
	0x035AE34C BL 0x2602314
	0x035AE350 LDR X0, [X26]
	0x035AE354 LDR W8, [X0 + 0xE0]
	0x035AE358 CBNZ W8, 0x35AE360
	0x035AE35C BL 0x1C16DFC
	0x035AE360 MOV X0, X22
	0x035AE364 MOV X1, X31
	0x035AE368 BL 0x35ADA5C
	0x035AE36C TBZ X0, 0x0, 0x35AE3A4
	0x035AE370 ADRP X8, 0xB89000
	0x035AE374 LDR X8, [X8 + 0x680]
	0x035AE378 MOV X0, X21
	0x035AE37C LDR X1, [X8]
	0x035AE380 BL 0x260227C
	0x035AE384 CBZ X22, 0x35AE7F8
	0x035AE388 LDR X8, [X22]
	0x035AE38C MOV X2, X0
	0x035AE390 MOV X0, X22
	0x035AE394 MOV X1, X23
	0x035AE398 LDR X9, [X8 + 0x278]
	0x035AE39C LDR X3, [X8 + 0x280]
	0x035AE3A0 BLR X9
	0x035AE3A4 CBZ X20, 0x35AE7F8
	0x035AE3A8 ADRP X8, 0xB45000
	0x035AE3AC LDR X8, [X8 + 0x988]
	0x035AE3B0 MOV X0, X20
	0x035AE3B4 MOV W1, W31
	0x035AE3B8 MOV X2, X31
	0x035AE3BC LDR X23, [X8]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xE33000
	007 Move X21, 0xB47000
	008 Move W8, [X20+227]
	009 Move X21, [X21+1120]
	010 Move V8, V0
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB47000
	017 Move X0, [X0+1120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+227], W8
	021 Move X0, [X21]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object..ctor, X0
	029 Move X8, D8
	030 Move X9, 0x7FF00000
	031 NotImplemented "Instruction BICS not yet implemented."
	032 Move D0, X31
	033 NotImplemented "Instruction FCSEL not yet implemented."
	034 Move [X19+16], D0
	035 Move X20, [X31+32]
	036 Move X19, [X31+40]
	037 Move X30, [X31+16]
	038 Move X21, [X31+24]
	039 Move V8, [X31+48]
	040 Return 

Method: System.Void .ctor(System.String aData)

Disassembly:
	0x035B904C LDR V8, [X31], #0x30
	0x035B9050 B 0x220D364
	0x035B9054 STR X30, [X31 - 0x30]!
	0x035B9058 STP X22, X21, [X31 + 0x10]
	0x035B905C STP X20, X19, [X31 + 0x20]
	0x035B9060 ADRP X20, 0xE27000
	0x035B9064 ADRP X22, 0xB64000
	0x035B9068 ADRP X21, 0xB7E000
	0x035B906C LDRB W8, [X20 + 0x103]
	0x035B9070 LDR X22, [X22 + 0x400]
	0x035B9074 LDR X21, [X21 + 0x8E8]
	0x035B9078 MOV X19, X0
	0x035B907C TBNZ X8, 0x0, 0x35B90A0
	0x035B9080 ADRP X0, 0xB7E000
	0x035B9084 LDR X0, [X0 + 0x8E8]
	0x035B9088 BL 0x1C16CF4
	0x035B908C ADRP X0, 0xB64000
	0x035B9090 LDR X0, [X0 + 0x400]
	0x035B9094 BL 0x1C16CF4
	0x035B9098 MOVZ W8, 0x1
	0x035B909C STRB W8, [X20 + 0x103]
	0x035B90A0 LDR X0, [X22]
	0x035B90A4 BL 0x1C16F10
	0x035B90A8 FMOV D0, X31
	0x035B90AC MOV X20, X0
	0x035B90B0 BL 0x35AD340
	0x035B90B4 LDR X2, [X21]
	0x035B90B8 MOV X0, X19
	0x035B90BC MOV X1, X20
	0x035B90C0 BL 0x220D364

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE28000
	007 Move X22, 0xB3C000
	008 Move W8, [X21+228]
	009 Move X22, [X22+1120]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB3C000
	017 Move X0, [X0+1120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+228], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call Object..ctor, X0
	029 Move X8, [X20]
	030 Move X0, X20
	031 Move X1, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X3, [X8+472]
	035 Move X2, [X8+480]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 CallNoReturn X3

Method: SimpleJSON.JSONNode Clone()

Disassembly:
	0x035B90C4 LDP X20, X19, [X31 + 0x20]
	0x035B90C8 LDP X22, X21, [X31 + 0x10]
	0x035B90CC FMOV D0, X31
	0x035B90D0 LDR X30, [X31], #0x30
	0x035B90D4 RET
	0x035B90D8 STR D8, [X31 - 0x30]!
	0x035B90DC STR X30, [X31 + 0x8]
	0x035B90E0 STP X22, X21, [X31 + 0x10]
	0x035B90E4 STP X20, X19, [X31 + 0x20]
	0x035B90E8 ADRP X20, 0xE27000
	0x035B90EC ADRP X22, 0xB64000
	0x035B90F0 ADRP X21, 0xB7E000
	0x035B90F4 LDRB W8, [X20 + 0x104]
	0x035B90F8 LDR X22, [X22 + 0x400]
	0x035B90FC LDR X21, [X21 + 0x8E8]
	0x035B9100 MOV V8.16B, V0.16B
	0x035B9104 MOV X19, X0
	0x035B9108 TBNZ X8, 0x0, 0x35B912C
	0x035B910C ADRP X0, 0xB7E000
	0x035B9110 LDR X0, [X0 + 0x8E8]
	0x035B9114 BL 0x1C16CF4
	0x035B9118 ADRP X0, 0xB64000
	0x035B911C LDR X0, [X0 + 0x400]
	0x035B9120 BL 0x1C16CF4
	0x035B9124 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE28000
	007 Move X20, 0xB65000
	008 Move W8, [X21+229]
	009 Move X20, [X20+1024]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0xB65000
	016 Move X0, [X0+1024]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+229], W8
	020 Move X0, [X20]
	021 Move V8, [X19+16]
	022 Call 0x1C17F10
	023 Move V0, V8
	024 Move X19, X0
	025 Call JSONNumber..ctor, X0, V0
	026 Move X0, X19
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Move V8, [X31+48]
	032 Return X0

Method: System.Void WriteToStringBuilder(System.Text.StringBuilder aSB, System.Int32 aIndent, System.Int32 aIndentInc, SimpleJSON.JSONTextMode aMode)

Disassembly:
	0x035B9128 STRB W8, [X20 + 0x104]
	0x035B912C LDR X0, [X22]
	0x035B9130 BL 0x1C16F10
	0x035B9134 MOV V0.16B, V8.16B
	0x035B9138 MOV X20, X0
	0x035B913C BL 0x35AD340
	0x035B9140 LDR X2, [X21]
	0x035B9144 MOV X0, X19
	0x035B9148 MOV X1, X20
	0x035B914C LDP X20, X19, [X31 + 0x20]
	0x035B9150 LDP X22, X21, [X31 + 0x10]
	0x035B9154 LDR X30, [X31 + 0x8]
	0x035B9158 LDR V8, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, X1
	005 Move X9, [X8+456]
	006 Move X8, [X8+464]
	007 Move X1, X8
	008 NotImplemented "Instruction BLR not yet implemented."
	009 Compare X19, 0
	010 JumpIfEqual {18}
	011 Move X1, X0
	012 Move X0, X19
	013 Move X2, X31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Call StringBuilder.Append, X0, X1
	017 Return 
	018 Call 0x1C17F20

Method: System.Boolean IsNumeric(System.Object value)

Disassembly:
	0x035B915C B 0x220D364
	0x035B9160 STP X30, X21, [X31 - 0x20]!
	0x035B9164 STP X20, X19, [X31 + 0x10]
	0x035B9168 ADRP X21, 0xE27000
	0x035B916C ADRP X20, 0xB3B000
	0x035B9170 LDRB W8, [X21 + 0x105]
	0x035B9174 LDR X20, [X20 + 0x460]
	0x035B9178 MOV X19, X0
	0x035B917C TBNZ X8, 0x0, 0x35B91D0
	0x035B9180 ADRP X0, 0xB7E000
	0x035B9184 LDR X0, [X0 + 0x8E8]
	0x035B9188 BL 0x1C16CF4
	0x035B918C ADRP X0, 0xB7E000
	0x035B9190 LDR X0, [X0 + 0x8F0]
	0x035B9194 BL 0x1C16CF4
	0x035B9198 ADRP X0, 0xB3B000
	0x035B919C LDR X0, [X0 + 0x460]
	0x035B91A0 BL 0x1C16CF4
	0x035B91A4 ADRP X0, 0xB64000
	0x035B91A8 LDR X0, [X0 + 0x400]
	0x035B91AC BL 0x1C16CF4
	0x035B91B0 ADRP X0, 0xB7E000
	0x035B91B4 LDR X0, [X0 + 0x650]
	0x035B91B8 BL 0x1C16CF4
	0x035B91BC ADRP X0, 0xB3C000
	0x035B91C0 LDR X0, [X0 + 0x4B0]
	0x035B91C4 BL 0x1C16CF4
	0x035B91C8 MOVZ W8, 0x1
	0x035B91CC STRB W8, [X21 + 0x105]
	0x035B91D0 LDR X0, [X20]
	0x035B91D4 LDR W8, [X0 + 0xE0]
	0x035B91D8 CBNZ W8, 0x35B91E4
	0x035B91DC BL 0x1C16DFC
	0x035B91E0 LDR X0, [X20]
	0x035B91E4 LDR X8, [X0 + 0xB8]
	0x035B91E8 LDRB W8, [X8 + 0x1]
	0x035B91EC CBZ W8, 0x35B9220
	0x035B91F0 ADRP X8, 0xB7E000
	0x035B91F4 LDR X8, [X8 + 0x650]
	0x035B91F8 ADRP X20, 0xB3C000
	0x035B91FC LDR X0, [X8]
	0x035B9200 LDR X20, [X20 + 0x4B0]
	0x035B9204 BL 0x1C16F10
	0x035B9208 LDR X1, [X20]
	0x035B920C MOV X20, X0
	0x035B9210 BL 0x35ACFF8
	0x035B9214 ADRP X8, 0xB7E000
	0x035B9218 LDR X8, [X8 + 0x8F0]
	0x035B921C B 0x35B9244
	0x035B9220 ADRP X8, 0xB64000
	0x035B9224 LDR X8, [X8 + 0x400]
	0x035B9228 LDR X0, [X8]
	0x035B922C BL 0x1C16F10
	0x035B9230 FMOV D0, X31
	0x035B9234 MOV X20, X0
	0x035B9238 BL 0x35AD340
	0x035B923C ADRP X8, 0xB7E000
	0x035B9240 LDR X8, [X8 + 0x8E8]
	0x035B9244 LDR X2, [X8]
	0x035B9248 MOV X0, X19
	0x035B924C MOV X1, X20
	0x035B9250 BL 0x220D364
	0x035B9254 LDP X20, X19, [X31 + 0x10]
	0x035B9258 MOV X0, X31
	0x035B925C LDP X30, X21, [X31], #0x20
	0x035B9260 RET
	0x035B9264 STR X30, [X31 - 0x30]!
	0x035B9268 STP X22, X21, [X31 + 0x10]
	0x035B926C STP X20, X19, [X31 + 0x20]
	0x035B9270 ADRP X22, 0xE27000
	0x035B9274 STR X1, [X31 + 0x8]
	0x035B9278 ADRP X21, 0xB3B000
	0x035B927C LDRB W8, [X22 + 0x106]
	0x035B9280 LDR X21, [X21 + 0x460]
	0x035B9284 MOV X20, X1
	0x035B9288 MOV X19, X0
	0x035B928C TBNZ X8, 0x0, 0x35B92D4
	0x035B9290 ADRP X0, 0xB7E000
	0x035B9294 LDR X0, [X0 + 0x8E8]
	0x035B9298 BL 0x1C16CF4
	0x035B929C ADRP X0, 0xB7E000
	0x035B92A0 LDR X0, [X0 + 0x8F0]
	0x035B92A4 BL 0x1C16CF4
	0x035B92A8 ADRP X0, 0xB3B000
	0x035B92AC LDR X0, [X0 + 0x460]
	0x035B92B0 BL 0x1C16CF4
	0x035B92B4 ADRP X0, 0xB64000
	0x035B92B8 LDR X0, [X0 + 0x400]
	0x035B92BC BL 0x1C16CF4
	0x035B92C0 ADRP X0, 0xB7E000
	0x035B92C4 LDR X0, [X0 + 0x650]
	0x035B92C8 BL 0x1C16CF4
	0x035B92CC MOVZ W8, 0x1
	0x035B92D0 STRB W8, [X22 + 0x106]
	0x035B92D4 LDR X0, [X21]
	0x035B92D8 LDR W8, [X0 + 0xE0]
	0x035B92DC CBNZ W8, 0x35B92E8
	0x035B92E0 BL 0x1C16DFC
	0x035B92E4 LDR X0, [X21]
	0x035B92E8 LDR X8, [X0 + 0xB8]
	0x035B92EC LDRB W8, [X8 + 0x1]
	0x035B92F0 CBZ W8, 0x35B934C
	0x035B92F4 ADRP X20, 0xB7E000
	0x035B92F8 ADRP X22, 0xB7E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0xE28000
	005 Move W8, [X20+230]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {46}
	011 Move X0, 0xB3C000
	012 Move X0, [X0+2520]
	013 Call 0x1C17CF4
	014 Move X0, 0xB63000
	015 Move X0, [X0+1520]
	016 Call 0x1C17CF4
	017 Move X0, 0xB3E000
	018 Move X0, [X0+2424]
	019 Call 0x1C17CF4
	020 Move X0, 0xB3F000
	021 Move X0, [X0+1576]
	022 Call 0x1C17CF4
	023 Move X0, 0xB3B000
	024 Move X0, [X0+1880]
	025 Call 0x1C17CF4
	026 Move X0, 0xB3D000
	027 Move X0, [X0+2656]
	028 Call 0x1C17CF4
	029 Move X0, 0xB64000
	030 Move X0, [X0+1712]
	031 Call 0x1C17CF4
	032 Move X0, 0xB3B000
	033 Move X0, [X0+2704]
	034 Call 0x1C17CF4
	035 Move X0, 0xB40000
	036 Move X0, [X0+1624]
	037 Call 0x1C17CF4
	038 Move X0, 0xB43000
	039 Move X0, [X0+1824]
	040 Call 0x1C17CF4
	041 Move X0, 0xB3C000
	042 Move X0, [X0+1880]
	043 Call 0x1C17CF4
	044 Move W8, 1
	045 Move [X20+230], W8
	046 Compare X19, 0
	047 JumpIfEqual {95}
	048 Move X8, 0xB3B000
	049 Move X8, [X8+1880]
	050 Move W0, 1
	051 Move X9, [X8]
	052 Move X8, [X19]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X9, 0xB43000
	055 Move X9, [X9+1824]
	056 Move X9, [X9]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X9, 0xB3B000
	059 Move X9, [X9+2704]
	060 Move X9, [X9]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X9, 0xB3E000
	063 Move X9, [X9+2424]
	064 Move X9, [X9]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X9, 0xB63000
	067 Move X9, [X9+1520]
	068 Move X9, [X9]
	069 NotImplemented "Instruction CMP not yet implemented."
	070 Move X9, 0xB3D000
	071 Move X9, [X9+2656]
	072 Move X9, [X9]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Move X9, 0xB3C000
	075 Move X9, [X9+1880]
	076 Move X9, [X9]
	077 NotImplemented "Instruction CMP not yet implemented."
	078 Move X9, 0xB3F000
	079 Move X9, [X9+1576]
	080 Move X9, [X9]
	081 NotImplemented "Instruction CMP not yet implemented."
	082 Move X9, 0xB40000
	083 Move X9, [X9+1624]
	084 Move X9, [X9]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X9, 0xB64000
	087 Move X9, [X9+1712]
	088 Move X9, [X9]
	089 NotImplemented "Instruction CMP not yet implemented."
	090 Move X9, 0xB3C000
	091 Move X9, [X9+2520]
	092 Move X9, [X9]
	093 NotImplemented "Instruction CMP not yet implemented."
	094 NotImplemented "Instruction CSET not yet implemented."
	095 Move W0, W31
	096 Move X20, [X31+16]
	097 Move X19, [X31+24]
	098 Move X30, [X31+32]
	099 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x035B92FC LDR X20, [X20 + 0x650]
	0x035B9300 LDR X22, [X22 + 0x8F0]
	0x035B9304 ADD X0, X31, 0x8
	0x035B9308 MOV X1, X31
	0x035B930C BL 0x337C96C
	0x035B9310 LDR X8, [X20]
	0x035B9314 MOV X20, X0
	0x035B9318 MOV X0, X8
	0x035B931C BL 0x1C16F10
	0x035B9320 MOV X1, X20
	0x035B9324 MOV X21, X0
	0x035B9328 BL 0x35ACFF8
	0x035B932C LDR X2, [X22]
	0x035B9330 MOV X0, X19
	0x035B9334 MOV X1, X21
	0x035B9338 BL 0x220D364
	0x035B933C LDP X20, X19, [X31 + 0x20]
	0x035B9340 LDP X22, X21, [X31 + 0x10]
	0x035B9344 LDR X30, [X31], #0x30
	0x035B9348 RET
	0x035B934C ADRP X8, 0xB64000
	0x035B9350 LDR X8, [X8 + 0x400]
	0x035B9354 LDR X0, [X8]
	0x035B9358 BL 0x1C16F10
	0x035B935C SCVTF D0, X20
	0x035B9360 MOV X21, X0
	0x035B9364 BL 0x35AD340
	0x035B9368 ADRP X8, 0xB7E000
	0x035B936C LDR X8, [X8 + 0x8E8]
	0x035B9370 MOV X0, X19
	0x035B9374 MOV X1, X21
	0x035B9378 LDP X20, X19, [X31 + 0x20]
	0x035B937C LDR X2, [X8]
	0x035B9380 LDP X22, X21, [X31 + 0x10]
	0x035B9384 LDR X30, [X31], #0x30
	0x035B9388 B 0x220D364
	0x035B938C STP X30, X21, [X31 - 0x20]!
	0x035B9390 STP X20, X19, [X31 + 0x10]
	0x035B9394 ADRP X21, 0xE27000
	0x035B9398 ADRP X20, 0xB3B000
	0x035B939C LDRB W8, [X21 + 0x107]
	0x035B93A0 LDR X20, [X20 + 0x460]
	0x035B93A4 MOV X19, X0
	0x035B93A8 TBNZ X8, 0x0, 0x35B93FC
	0x035B93AC ADRP X0, 0xB7E000
	0x035B93B0 LDR X0, [X0 + 0x8E8]
	0x035B93B4 BL 0x1C16CF4
	0x035B93B8 ADRP X0, 0xB7E000
	0x035B93BC LDR X0, [X0 + 0x8F0]
	0x035B93C0 BL 0x1C16CF4
	0x035B93C4 ADRP X0, 0xB3B000
	0x035B93C8 LDR X0, [X0 + 0x460]
	0x035B93CC BL 0x1C16CF4
	0x035B93D0 ADRP X0, 0xB64000
	0x035B93D4 LDR X0, [X0 + 0x400]
	0x035B93D8 BL 0x1C16CF4
	0x035B93DC ADRP X0, 0xB7E000
	0x035B93E0 LDR X0, [X0 + 0x650]
	0x035B93E4 BL 0x1C16CF4
	0x035B93E8 ADRP X0, 0xB3C000
	0x035B93EC LDR X0, [X0 + 0x4B0]
	0x035B93F0 BL 0x1C16CF4
	0x035B93F4 MOVZ W8, 0x1
	0x035B93F8 STRB W8, [X21 + 0x107]
	0x035B93FC LDR X0, [X20]
	0x035B9400 LDR W8, [X0 + 0xE0]
	0x035B9404 CBNZ W8, 0x35B9410
	0x035B9408 BL 0x1C16DFC
	0x035B940C LDR X0, [X20]
	0x035B9410 LDR X8, [X0 + 0xB8]
	0x035B9414 LDRB W8, [X8 + 0x1]
	0x035B9418 CBZ W8, 0x35B944C
	0x035B941C ADRP X8, 0xB7E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE28000
	006 Move W8, [X21+231]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xB44000
	014 Move X0, [X0+2536]
	015 Call 0x1C17CF4
	016 Move X0, 0xB3C000
	017 Move X0, [X0+1120]
	018 Call 0x1C17CF4
	019 Move X0, 0xB65000
	020 Move X0, [X0+1024]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+231], W8
	024 Compare X20, 0
	025 JumpIfEqual {78}
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Move X8, 0xB65000
	028 Move X8, [X8+1024]
	029 Move X9, [X20]
	030 Move X8, [X8]
	031 Move W11, [X9+304]
	032 Move W10, [X8+304]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X21, X31
	035 Move W0, 1
	036 Move X9, [X9+200]
	037 Add X9, X9, X10
	038 NotImplemented "Instruction LDUR not yet implemented."
	039 NotImplemented "Instruction CMP not yet implemented."
	040 NotImplemented "Instruction CSEL not yet implemented."
	041 Move X8, 0xB3C000
	042 Move X8, [X8+1120]
	043 Move X0, [X8]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X21
	049 Move X1, X31
	050 Call JSONNode.op_Inequality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {59}
	055 Compare X21, 0
	056 JumpIfEqual {84}
	057 Move V0, [X19+16]
	058 Move V1, [X21+16]
	059 Move X0, X20
	060 Call JSONNumber.IsNumeric, X0
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {78}
	065 Move X8, 0xB44000
	066 Move X8, [X8+2536]
	067 Move X0, [X8]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X0, X20
	073 Move X1, X31
	074 Call Convert.ToDouble, X0
	075 Move V1, [X19+16]
	076 NotImplemented "Instruction FCMP not yet implemented."
	077 NotImplemented "Instruction CSET not yet implemented."
	078 Move W0, W31
	079 Move X20, [X31+16]
	080 Move X19, [X31+24]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Return X0
	084 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x035B9420 LDR X8, [X8 + 0x650]
	0x035B9424 ADRP X20, 0xB3C000
	0x035B9428 LDR X0, [X8]
	0x035B942C LDR X20, [X20 + 0x4B0]
	0x035B9430 BL 0x1C16F10
	0x035B9434 LDR X1, [X20]
	0x035B9438 MOV X20, X0
	0x035B943C BL 0x35ACFF8

ISIL:
	001 Move X8, [X0+16]
	002 Subtract X9, X31, X8
	003 And X10, X8, 0x7FFFFFFFFFFFFFFF
	004 And X31, X9, 0x7FFFFFFFFFFFFFFF
	005 NotImplemented "Instruction CSEL not yet implemented."
	006 Move X9, X8
	007 ShiftRight X9, 32
	008 And X9, X9, 0x7FFFFFFF
	009 Xor W0, W9, W8
	010 Return X0

Method: System.Void Clear()

Disassembly:
	0x035B9440 ADRP X8, 0xB7E000
	0x035B9444 LDR X8, [X8 + 0x8F0]

ISIL:
	001 Move [X0+16], X31
	002 Return 

Method: System.Void SerializeBinary(System.IO.BinaryWriter aWriter)

Disassembly:
	0x035B9448 B 0x35B9470
	0x035B944C ADRP X8, 0xB64000
	0x035B9450 LDR X8, [X8 + 0x400]
	0x035B9454 LDR X0, [X8]
	0x035B9458 BL 0x1C16F10
	0x035B945C FMOV D0, X31
	0x035B9460 MOV X20, X0
	0x035B9464 BL 0x35AD340
	0x035B9468 ADRP X8, 0xB7E000
	0x035B946C LDR X8, [X8 + 0x8E8]
	0x035B9470 LDR X2, [X8]
	0x035B9474 MOV X0, X19
	0x035B9478 MOV X1, X20
	0x035B947C BL 0x220D364
	0x035B9480 LDP X20, X19, [X31 + 0x10]
	0x035B9484 MOV X0, X31
	0x035B9488 LDP X30, X21, [X31], #0x20
	0x035B948C RET
	0x035B9490 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {23}
	006 Move X8, [X1]
	007 Move X19, X1
	008 Move X20, X0
	009 Move W1, 4
	010 Move X9, [X8+456]
	011 Move X2, [X8+464]
	012 Move X0, X19
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X8, [X19]
	015 Move V0, [X20+16]
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X2, [X8+536]
	020 Move X1, [X8+544]
	021 Move X30, [X31+32]
	022 CallNoReturn X2
	023 Call 0x1C17F20

