Type: SimpleJSON.JSONString

Method: SimpleJSON.JSONNodeType get_Tag()

Disassembly:
	0x035B8BB0 ADRP X21, 0xE28000
	0x035B8BB4 ADRP X22, 0xB7F000

ISIL:
	001 Move W0, 3
	002 Return X0

Method: System.Boolean get_IsString()

Disassembly:
	0x035B8BB8 LDRB W8, [X21 + 0xFB]
	0x035B8BBC LDR X22, [X22 + 0x658]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: SimpleJSON.JSONNode/Enumerator GetEnumerator()

Disassembly:
	0x035B8BC0 MOV X19, X1
	0x035B8BC4 MOV X20, X0
	0x035B8BC8 TBNZ X8, 0x0, 0x35B8BE0
	0x035B8BCC ADRP X0, 0xB7F000
	0x035B8BD0 LDR X0, [X0 + 0x658]

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X8+64], X31
	003 Move [X8+32], V0
	004 Move [X8+40], V0
	005 Move [X8], V0
	006 Move [X8+8], V0
	007 Return X0

Method: System.String get_Value()

Disassembly:
	0x035B8BD4 BL 0x1C16CF4
	0x035B8BD8 MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_Value(System.String value)

Disassembly:
	0x035B8BDC STRB W8, [X21 + 0xFB]
	0x035B8BE0 LDR X0, [X22]

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Void .ctor(System.String aData)

Disassembly:
	0x035ADFF8 MOV X2, X31
	0x035ADFFC LDR X1, [X8]
	0x035AE000 BL 0x321BA08
	0x035AE004 ADRP X8, 0xB46000
	0x035AE008 LDR X8, [X8 + 0x460]
	0x035AE00C MOV W19, W0
	0x035AE010 LDR X8, [X8]
	0x035AE014 LDR W9, [X8 + 0xE0]
	0x035AE018 CBNZ W9, 0x35AE024
	0x035AE01C MOV X0, X8
	0x035AE020 BL 0x1C16DFC
	0x035AE024 AND W0, W19, 0x1
	0x035AE028 BL 0x35AD8D0
	0x035AE02C LDP X20, X19, [X31 + 0x20]
	0x035AE030 LDP X30, X21, [X31 + 0x10]
	0x035AE034 LDR V8, [X31], #0x30
	0x035AE038 RET
	0x035AE03C ADRP X8, 0xB45000
	0x035AE040 LDR X8, [X8 + 0x830]
	0x035AE044 MOV X0, X20
	0x035AE048 MOV X2, X31
	0x035AE04C LDR X1, [X8]
	0x035AE050 BL 0x321BA08
	0x035AE054 TBZ X0, 0x0, 0x35ADF28
	0x035AE058 ADRP X8, 0xB89000
	0x035AE05C LDR X8, [X8 + 0x648]
	0x035AE060 LDR X0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE33000
	007 Move X22, 0xB47000
	008 Move W8, [X21+220]
	009 Move X22, [X22+1120]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB47000
	017 Move X0, [X0+1120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+220], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call Object..ctor, X0
	029 Move [X20+16], X19
	030 Move X20, [X31+32]
	031 Move X19, [X31+40]
	032 Move X22, [X31+16]
	033 Move X21, [X31+24]
	034 Move X30, [X31+48]
	035 Return 

Method: SimpleJSON.JSONNode Clone()

Disassembly:
	0x035B8BE4 BL 0x1C16F10
	0x035B8BE8 MOV X1, X20
	0x035B8BEC MOV X2, X19
	0x035B8BF0 MOV X21, X0
	0x035B8BF4 BL 0x35B66D0
	0x035B8BF8 MOV X0, X21
	0x035B8BFC LDP X20, X19, [X31 + 0x20]
	0x035B8C00 LDP X22, X21, [X31 + 0x10]
	0x035B8C04 LDR X30, [X31], #0x30
	0x035B8C08 RET
	0x035B8C0C STR X30, [X31 - 0x40]!
	0x035B8C10 STP X24, X23, [X31 + 0x10]
	0x035B8C14 STP X22, X21, [X31 + 0x20]
	0x035B8C18 STP X20, X19, [X31 + 0x30]
	0x035B8C1C ADRP X22, 0xE28000
	0x035B8C20 ADRP X24, 0xB63000
	0x035B8C24 ADRP X23, 0xB7F000
	0x035B8C28 LDRB W8, [X22 + 0xFC]
	0x035B8C2C LDR X24, [X24 + 0xBC0]
	0x035B8C30 LDR X23, [X23 + 0x8E0]
	0x035B8C34 MOV X19, X2
	0x035B8C38 MOV X20, X1
	0x035B8C3C MOV X21, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE29000
	006 Move X20, 0xB80000
	007 Move W8, [X21+221]
	008 Move X20, [X20+1616]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB80000
	015 Move X0, [X0+1616]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+221], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Call 0x1C17F10
	022 Move X1, X19
	023 Move X20, X0
	024 Call JSONString..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Void WriteToStringBuilder(System.Text.StringBuilder aSB, System.Int32 aIndent, System.Int32 aIndentInc, SimpleJSON.JSONTextMode aMode)

Disassembly:
	0x035B8C40 TBNZ X8, 0x0, 0x35B8C64
	0x035B8C44 ADRP X0, 0xB7F000
	0x035B8C48 LDR X0, [X0 + 0x8E0]
	0x035B8C4C BL 0x1C16CF4
	0x035B8C50 ADRP X0, 0xB63000
	0x035B8C54 LDR X0, [X0 + 0xBC0]
	0x035B8C58 BL 0x1C16CF4
	0x035B8C5C MOVZ W8, 0x1
	0x035B8C60 STRB W8, [X22 + 0xFC]
	0x035B8C64 LDR X0, [X24]
	0x035B8C68 BL 0x1C16F10
	0x035B8C6C MOV X22, X0
	0x035B8C70 BL 0x35AE864
	0x035B8C74 LDR X2, [X23]
	0x035B8C78 MOV X0, X21
	0x035B8C7C MOV X1, X22
	0x035B8C80 BL 0x220D364
	0x035B8C84 CBZ X0, 0x35B8CB0
	0x035B8C88 LDR X8, [X0]
	0x035B8C8C MOV X1, X20
	0x035B8C90 MOV X2, X19
	0x035B8C94 LDP X20, X19, [X31 + 0x30]
	0x035B8C98 LDR X4, [X8 + 0x278]
	0x035B8C9C LDR X3, [X8 + 0x280]
	0x035B8CA0 LDP X22, X21, [X31 + 0x20]
	0x035B8CA4 LDP X24, X23, [X31 + 0x10]
	0x035B8CA8 LDR X30, [X31], #0x40
	0x035B8CAC BR X4
	0x035B8CB0 BL 0x1C16F20
	0x035B8CB4 STP X30, X23, [X31 - 0x30]!
	0x035B8CB8 STP X22, X21, [X31 + 0x10]
	0x035B8CBC STP X20, X19, [X31 + 0x20]
	0x035B8CC0 ADRP X21, 0xE28000
	0x035B8CC4 ADRP X23, 0xB65000
	0x035B8CC8 ADRP X22, 0xB7F000
	0x035B8CCC LDRB W8, [X21 + 0xFD]
	0x035B8CD0 LDR X23, [X23 + 0x370]
	0x035B8CD4 LDR X22, [X22 + 0x8D8]
	0x035B8CD8 MOV X19, X1
	0x035B8CDC MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE29000
	006 Move W8, [X21+222]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB3D000
	014 Move X0, [X0+1120]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+222], W8
	018 Compare X20, 0
	019 JumpIfEqual {52}
	020 Move X21, 0xB3D000
	021 Move X21, [X21+1120]
	022 Move W1, 34
	023 Move X0, X20
	024 Move X2, X31
	025 Call StringBuilder.Append, X0, X1
	026 Move X8, [X21]
	027 Move X20, [X19+16]
	028 Move X19, X0
	029 Move W9, [X8+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {34}
	032 Move X0, X8
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Call JSONNode.Escape, X0
	036 Compare X19, 0
	037 JumpIfEqual {52}
	038 Move X1, X0
	039 Move X0, X19
	040 Move X2, X31
	041 Call StringBuilder.Append, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {52}
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move W1, 34
	047 Move X2, X31
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call StringBuilder.Append, X0, X1
	051 Return 
	052 Call 0x1C17F20

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x035B8CE0 TBNZ X8, 0x0, 0x35B8D04
	0x035B8CE4 ADRP X0, 0xB65000
	0x035B8CE8 LDR X0, [X0 + 0x370]
	0x035B8CEC BL 0x1C16CF4
	0x035B8CF0 ADRP X0, 0xB7F000
	0x035B8CF4 LDR X0, [X0 + 0x8D8]
	0x035B8CF8 BL 0x1C16CF4
	0x035B8CFC MOVZ W8, 0x1
	0x035B8D00 STRB W8, [X21 + 0xFD]
	0x035B8D04 LDR X0, [X23]
	0x035B8D08 BL 0x1C16F10
	0x035B8D0C MOV X21, X0
	0x035B8D10 BL 0x35AE904
	0x035B8D14 LDR X2, [X22]
	0x035B8D18 MOV X0, X20
	0x035B8D1C MOV X1, X21
	0x035B8D20 BL 0x220D364
	0x035B8D24 CBZ X0, 0x35B8D48
	0x035B8D28 LDR X8, [X0]
	0x035B8D2C MOV X1, X19
	0x035B8D30 LDP X20, X19, [X31 + 0x20]
	0x035B8D34 LDP X22, X21, [X31 + 0x10]
	0x035B8D38 LDR X3, [X8 + 0x288]
	0x035B8D3C LDR X2, [X8 + 0x290]
	0x035B8D40 LDP X30, X23, [X31], #0x30
	0x035B8D44 BR X3
	0x035B8D48 BL 0x1C16F20
	0x035B8D4C STR X30, [X31 - 0x40]!
	0x035B8D50 STP X24, X23, [X31 + 0x10]
	0x035B8D54 STP X22, X21, [X31 + 0x20]
	0x035B8D58 STP X20, X19, [X31 + 0x30]
	0x035B8D5C ADRP X22, 0xE28000
	0x035B8D60 ADRP X24, 0xB63000
	0x035B8D64 ADRP X23, 0xB7F000
	0x035B8D68 LDRB W8, [X22 + 0xFE]
	0x035B8D6C LDR X24, [X24 + 0xBC0]
	0x035B8D70 LDR X23, [X23 + 0x8E0]
	0x035B8D74 MOV X19, X2
	0x035B8D78 MOV X20, X1
	0x035B8D7C MOV X21, X0
	0x035B8D80 TBNZ X8, 0x0, 0x35B8DA4
	0x035B8D84 ADRP X0, 0xB7F000
	0x035B8D88 LDR X0, [X0 + 0x8E0]
	0x035B8D8C BL 0x1C16CF4
	0x035B8D90 ADRP X0, 0xB63000
	0x035B8D94 LDR X0, [X0 + 0xBC0]
	0x035B8D98 BL 0x1C16CF4
	0x035B8D9C MOVZ W8, 0x1
	0x035B8DA0 STRB W8, [X22 + 0xFE]
	0x035B8DA4 LDR X0, [X24]
	0x035B8DA8 BL 0x1C16F10
	0x035B8DAC MOV X22, X0
	0x035B8DB0 BL 0x35AE864
	0x035B8DB4 LDR X2, [X23]
	0x035B8DB8 MOV X0, X21
	0x035B8DBC MOV X1, X22
	0x035B8DC0 BL 0x220D364
	0x035B8DC4 CBZ X0, 0x35B8DF0
	0x035B8DC8 LDR X8, [X0]
	0x035B8DCC MOV X1, X20
	0x035B8DD0 MOV X2, X19
	0x035B8DD4 LDP X20, X19, [X31 + 0x30]
	0x035B8DD8 LDR X4, [X8 + 0x278]
	0x035B8DDC LDR X3, [X8 + 0x280]
	0x035B8DE0 LDP X22, X21, [X31 + 0x20]
	0x035B8DE4 LDP X24, X23, [X31 + 0x10]
	0x035B8DE8 LDR X30, [X31], #0x40
	0x035B8DEC BR X4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE29000
	006 Move W8, [X21+223]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0xB3D000
	014 Move X0, [X0+1120]
	015 Call 0x1C17CF4
	016 Move X0, 0xB80000
	017 Move X0, [X0+1616]
	018 Call 0x1C17CF4
	019 Move X0, 0xB3E000
	020 Move X0, [X0+632]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+223], W8
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Compare X20, 0
	026 JumpIfEqual {47}
	027 Move X8, 0xB3E000
	028 Move X8, [X8+632]
	029 Move X9, [X8]
	030 Move X8, [X20]
	031 NotImplemented "Instruction CMP not yet implemented."
	032 Move X9, 0xB80000
	033 Move X9, [X9+1616]
	034 Move W11, [X8+304]
	035 Move X9, [X9]
	036 Move W10, [X9+304]
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Move X20, X31
	039 Move W0, 1
	040 Move X0, [X19+16]
	041 Move X1, X20
	042 Move X8, [X8+200]
	043 Add X8, X8, X10
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSEL not yet implemented."
	047 Move X8, 0xB3D000
	048 Move X8, [X8+1120]
	049 Move X0, [X8]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Call JSONNode.op_Inequality, X0, X1
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {72}
	061 Compare X20, 0
	062 JumpIfEqual {78}
	063 Move X0, [X19+16]
	064 Move X1, [X20+16]
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X2, X31
	068 Move X30, [X31+32]
	069 Move X21, [X31+40]
	070 Call String.op_Equality, X0, X1
	071 Return X0
	072 Move W0, W31
	073 Move X20, [X31+16]
	074 Move X19, [X31+24]
	075 Move X30, [X31+32]
	076 Move X21, [X31+40]
	077 Return X0
	078 Call 0x1C17F20

Method: System.Int32 GetHashCode()

Disassembly:
	0x035B8DF0 BL 0x1C16F20
	0x035B8DF4 CMP X1, 0x0
	0x035B8DF8 CSET W8, EQ
	0x035B8DFC CMP X0, X1
	0x035B8E00 CSET W9, EQ
	0x035B8E04 ORR W0, W8, W9, 0x0
	0x035B8E08 RET
	0x035B8E0C CMP X1, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+16]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X2, [X8+344]
	007 Move X1, [X8+352]
	008 Move X30, [X31+16]
	009 CallNoReturn X2
	010 Call 0x1C17F20

Method: System.Void Clear()

Disassembly:
	0x035B8E10 CSET W8, NE
	0x035B8E14 CMP X0, X1
	0x035B8E18 CSET W9, NE
	0x035B8E1C AND W0, W8, W9, 0x0
	0x035B8E20 RET
	0x035B8E24 CMP X1, 0x0
	0x035B8E28 CSET W8, EQ
	0x035B8E2C CMP X0, X1
	0x035B8E30 CSET W9, EQ
	0x035B8E34 ORR W0, W8, W9, 0x0
	0x035B8E38 RET
	0x035B8E3C MOV W0, W31
	0x035B8E40 RET
	0x035B8E44 STR X30, [X31 - 0x30]!
	0x035B8E48 STP X22, X21, [X31 + 0x10]
	0x035B8E4C STP X20, X19, [X31 + 0x20]
	0x035B8E50 ADRP X20, 0xE28000
	0x035B8E54 ADRP X22, 0xB65000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE29000
	006 Move X21, 0xB3C000
	007 Move W8, [X20+224]
	008 Move X21, [X21+2440]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB3C000
	015 Move X0, [X0+2440]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+224], W8
	019 Move X8, [X21]
	020 Move [X19+16], X8
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Return 

Method: System.Void SerializeBinary(System.IO.BinaryWriter aWriter)

Disassembly:
	0x035B8E58 ADRP X21, 0xB7F000
	0x035B8E5C LDRB W8, [X20 + 0xFF]
	0x035B8E60 LDR X22, [X22 + 0x400]
	0x035B8E64 LDR X21, [X21 + 0x8E8]
	0x035B8E68 MOV X19, X0
	0x035B8E6C TBNZ X8, 0x0, 0x35B8E90
	0x035B8E70 ADRP X0, 0xB7F000
	0x035B8E74 LDR X0, [X0 + 0x8E8]
	0x035B8E78 BL 0x1C16CF4
	0x035B8E7C ADRP X0, 0xB65000
	0x035B8E80 LDR X0, [X0 + 0x400]
	0x035B8E84 BL 0x1C16CF4
	0x035B8E88 MOVZ W8, 0x1
	0x035B8E8C STRB W8, [X20 + 0xFF]
	0x035B8E90 LDR X0, [X22]
	0x035B8E94 BL 0x1C16F10
	0x035B8E98 FMOV D0, X31
	0x035B8E9C MOV X20, X0
	0x035B8EA0 BL 0x35AD340

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {23}
	006 Move X8, [X1]
	007 Move X19, X1
	008 Move X20, X0
	009 Move W1, 3
	010 Move X9, [X8+456]
	011 Move X2, [X8+464]
	012 Move X0, X19
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X8, [X19]
	015 Move X1, [X20+16]
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X3, [X8+664]
	020 Move X2, [X8+672]
	021 Move X30, [X31+32]
	022 CallNoReturn X3
	023 Call 0x1C17F20

