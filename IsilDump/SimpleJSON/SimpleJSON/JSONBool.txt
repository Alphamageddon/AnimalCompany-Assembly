Type: SimpleJSON.JSONBool

Method: SimpleJSON.JSONNodeType get_Tag()

Disassembly:
	0x035B9494 STP X22, X21, [X31 + 0x10]
	0x035B9498 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W0, 6
	002 Return X0

Method: System.Boolean get_IsBoolean()

Disassembly:
	0x035B949C ADRP X22, 0xE27000
	0x035B94A0 STR X1, [X31 + 0x8]

ISIL:
	001 Move W0, 1
	002 Return X0

Method: SimpleJSON.JSONNode/Enumerator GetEnumerator()

Disassembly:
	0x035B94A4 ADRP X21, 0xB3B000
	0x035B94A8 LDRB W8, [X22 + 0x108]
	0x035B94AC LDR X21, [X21 + 0x460]
	0x035B94B0 MOV X20, X1
	0x035B94B4 MOV X19, X0

ISIL:
	001 NotImplemented "Instruction MOVI not yet implemented."
	002 Move [X8+64], X31
	003 Move [X8+32], V0
	004 Move [X8+40], V0
	005 Move [X8], V0
	006 Move [X8+8], V0
	007 Return X0

Method: System.String get_Value()

Disassembly:
	0x035B94B8 TBNZ X8, 0x0, 0x35B9500
	0x035B94BC ADRP X0, 0xB7E000
	0x035B94C0 LDR X0, [X0 + 0x8E8]
	0x035B94C4 BL 0x1C16CF4
	0x035B94C8 ADRP X0, 0xB7E000
	0x035B94CC LDR X0, [X0 + 0x8F0]
	0x035B94D0 BL 0x1C16CF4
	0x035B94D4 ADRP X0, 0xB3B000
	0x035B94D8 LDR X0, [X0 + 0x460]
	0x035B94DC BL 0x1C16CF4
	0x035B94E0 ADRP X0, 0xB64000
	0x035B94E4 LDR X0, [X0 + 0x400]
	0x035B94E8 BL 0x1C16CF4
	0x035B94EC ADRP X0, 0xB7E000
	0x035B94F0 LDR X0, [X0 + 0x650]
	0x035B94F4 BL 0x1C16CF4
	0x035B94F8 MOVZ W8, 0x1
	0x035B94FC STRB W8, [X22 + 0x108]
	0x035B9500 LDR X0, [X21]
	0x035B9504 LDR W8, [X0 + 0xE0]
	0x035B9508 CBNZ W8, 0x35B9514
	0x035B950C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE28000
	006 Move X21, 0xB3B000
	007 Move W8, [X20+232]
	008 Move X21, [X21+2904]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB3B000
	015 Move X0, [X0+2904]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+232], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Add X0, X19, 16
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Boolean.ToString, X0
	031 Return X0

Method: System.Void set_Value(System.String value)

Disassembly:
	0x035B9510 LDR X0, [X21]
	0x035B9514 LDR X8, [X0 + 0xB8]
	0x035B9518 LDRB W8, [X8 + 0x1]
	0x035B951C CBZ W8, 0x35B9578
	0x035B9520 ADRP X20, 0xB7E000
	0x035B9524 ADRP X22, 0xB7E000
	0x035B9528 LDR X20, [X20 + 0x650]
	0x035B952C LDR X22, [X22 + 0x8F0]
	0x035B9530 ADD X0, X31, 0x8
	0x035B9534 MOV X1, X31
	0x035B9538 BL 0x339A968
	0x035B953C LDR X8, [X20]
	0x035B9540 MOV X20, X0
	0x035B9544 MOV X0, X8
	0x035B9548 BL 0x1C16F10
	0x035B954C MOV X1, X20
	0x035B9550 MOV X21, X0
	0x035B9554 BL 0x35ACFF8
	0x035B9558 LDR X2, [X22]
	0x035B955C MOV X0, X19
	0x035B9560 MOV X1, X21
	0x035B9564 BL 0x220D364
	0x035B9568 LDP X20, X19, [X31 + 0x20]
	0x035B956C LDP X22, X21, [X31 + 0x10]
	0x035B9570 LDR X30, [X31], #0x30
	0x035B9574 RET
	0x035B9578 ADRP X8, 0xB64000
	0x035B957C LDR X8, [X8 + 0x400]
	0x035B9580 LDR X0, [X8]
	0x035B9584 BL 0x1C16F10
	0x035B9588 UCVTF D0, X20

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xE28000
	007 Move X21, 0xB3B000
	008 Move W8, [X22+233]
	009 Move X21, [X21+2904]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB3B000
	017 Move X0, [X0+2904]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+233], W8
	021 Move X0, [X21]
	022 Move [X31+12], W31
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Add X1, X31, 12
	028 Move X0, X20
	029 Move X2, X31
	030 Call Boolean.TryParse, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {37}
	035 Move W8, [X31+12]
	036 Move [X19+16], W8
	037 Move X20, [X31+32]
	038 Move X19, [X31+40]
	039 Move X22, [X31+16]
	040 Move X21, [X31+24]
	041 Move X30, [X31+48]
	042 Return 

Method: System.Boolean get_AsBool()

Disassembly:
	0x035B958C MOV X21, X0
	0x035B9590 BL 0x35AD340

ISIL:
	001 Move W0, [X0+16]
	002 Return X0

Method: System.Void set_AsBool(System.Boolean value)

Disassembly:
	0x035B9594 ADRP X8, 0xB7E000
	0x035B9598 LDR X8, [X8 + 0x8E8]
	0x035B959C MOV X0, X19

ISIL:
	001 And W8, W1, 1
	002 Move [X0+16], W8
	003 Return 

Method: System.Void .ctor(System.Boolean aData)

Disassembly:
	0x035AE928 LDR X20, [X20 + 0x6D0]
	0x035AE92C LDR X21, [X21 + 0x460]
	0x035AE930 MOV X19, X0
	0x035AE934 TBNZ X8, 0x0, 0x35AE964
	0x035AE938 ADRP X0, 0xB46000
	0x035AE93C LDR X0, [X0 + 0x460]
	0x035AE940 BL 0x1C16CF4
	0x035AE944 ADRP X0, 0xB89000
	0x035AE948 LDR X0, [X0 + 0x6D0]
	0x035AE94C BL 0x1C16CF4
	0x035AE950 ADRP X0, 0xB89000
	0x035AE954 LDR X0, [X0 + 0x6C8]
	0x035AE958 BL 0x1C16CF4
	0x035AE95C MOVZ W8, 0x1
	0x035AE960 STRB W8, [X22 + 0xC2]
	0x035AE964 LDR X0, [X23]
	0x035AE968 BL 0x1C16F10
	0x035AE96C LDR X1, [X20]
	0x035AE970 MOV X20, X0
	0x035AE974 BL 0x301B7C4
	0x035AE978 STR X20, [X19 + 0x10]
	0x035AE97C LDR X0, [X21]
	0x035AE980 LDR W8, [X0 + 0xE0]
	0x035AE984 CBNZ W8, 0x35AE98C
	0x035AE988 BL 0x1C16DFC
	0x035AE98C MOV X0, X19
	0x035AE990 LDP X20, X19, [X31 + 0x20]
	0x035AE994 LDP X22, X21, [X31 + 0x10]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE33000
	007 Move X22, 0xB47000
	008 Move W8, [X21+234]
	009 Move X22, [X22+1120]
	010 Move W20, W1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB47000
	017 Move X0, [X0+1120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+234], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Move X1, X31
	028 And W20, W20, 1
	029 Call Object..ctor, X0
	030 Move [X19+16], W20
	031 Move X20, [X31+32]
	032 Move X19, [X31+40]
	033 Move X22, [X31+16]
	034 Move X21, [X31+24]
	035 Move X30, [X31+48]
	036 Return 

Method: System.Void .ctor(System.String aData)

Disassembly:
	0x035B95A0 MOV X1, X21
	0x035B95A4 LDP X20, X19, [X31 + 0x20]
	0x035B95A8 LDR X2, [X8]
	0x035B95AC LDP X22, X21, [X31 + 0x10]
	0x035B95B0 LDR X30, [X31], #0x30
	0x035B95B4 B 0x220D364
	0x035B95B8 STR X30, [X31 - 0x30]!
	0x035B95BC STP X22, X21, [X31 + 0x10]
	0x035B95C0 STP X20, X19, [X31 + 0x20]
	0x035B95C4 ADRP X20, 0xE27000
	0x035B95C8 ADRP X22, 0xB7E000
	0x035B95CC ADRP X21, 0xB7E000
	0x035B95D0 LDRB W8, [X20 + 0x109]
	0x035B95D4 LDR X22, [X22 + 0x660]
	0x035B95D8 LDR X21, [X21 + 0x8F8]
	0x035B95DC MOV X19, X0
	0x035B95E0 TBNZ X8, 0x0, 0x35B9604
	0x035B95E4 ADRP X0, 0xB7E000
	0x035B95E8 LDR X0, [X0 + 0x660]
	0x035B95EC BL 0x1C16CF4
	0x035B95F0 ADRP X0, 0xB7E000
	0x035B95F4 LDR X0, [X0 + 0x8F8]
	0x035B95F8 BL 0x1C16CF4
	0x035B95FC MOVZ W8, 0x1
	0x035B9600 STRB W8, [X20 + 0x109]
	0x035B9604 LDR X0, [X22]
	0x035B9608 BL 0x1C16F10
	0x035B960C MOV W1, W31
	0x035B9610 MOV X20, X0
	0x035B9614 BL 0x35AD928

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0xE28000
	007 Move X22, 0xB3C000
	008 Move W8, [X21+235]
	009 Move X22, [X22+1120]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0xB3C000
	017 Move X0, [X0+1120]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+235], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Call Object..ctor, X0
	029 Move X8, [X20]
	030 Move X0, X20
	031 Move X1, X19
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X3, [X8+472]
	035 Move X2, [X8+480]
	036 Move X22, [X31+16]
	037 Move X21, [X31+24]
	038 Move X30, [X31+48]
	039 CallNoReturn X3

Method: SimpleJSON.JSONNode Clone()

Disassembly:
	0x035B9618 LDR X2, [X21]
	0x035B961C MOV X0, X19
	0x035B9620 MOV X1, X20
	0x035B9624 BL 0x220D364
	0x035B9628 LDP X20, X19, [X31 + 0x20]
	0x035B962C LDP X22, X21, [X31 + 0x10]
	0x035B9630 MOV W0, W31
	0x035B9634 LDR X30, [X31], #0x30
	0x035B9638 RET
	0x035B963C STP X30, X23, [X31 - 0x30]!
	0x035B9640 STP X22, X21, [X31 + 0x10]
	0x035B9644 STP X20, X19, [X31 + 0x20]
	0x035B9648 ADRP X21, 0xE27000
	0x035B964C ADRP X23, 0xB7E000
	0x035B9650 ADRP X22, 0xB7E000
	0x035B9654 LDRB W8, [X21 + 0x10A]
	0x035B9658 LDR X23, [X23 + 0x660]
	0x035B965C LDR X22, [X22 + 0x8F8]
	0x035B9660 MOV W20, W1
	0x035B9664 MOV X19, X0
	0x035B9668 TBNZ X8, 0x0, 0x35B968C
	0x035B966C ADRP X0, 0xB7E000
	0x035B9670 LDR X0, [X0 + 0x660]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE28000
	006 Move X20, 0xB7F000
	007 Move W8, [X21+236]
	008 Move X20, [X20+1632]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB7F000
	015 Move X0, [X0+1632]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+236], W8
	019 Move X0, [X20]
	020 Move W19, [X19+16]
	021 Call 0x1C17F10
	022 Move W1, W19
	023 Move X20, X0
	024 Call JSONBool..ctor, X0, X1
	025 Move X0, X20
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Return X0

Method: System.Void WriteToStringBuilder(System.Text.StringBuilder aSB, System.Int32 aIndent, System.Int32 aIndentInc, SimpleJSON.JSONTextMode aMode)

Disassembly:
	0x035B9674 BL 0x1C16CF4
	0x035B9678 ADRP X0, 0xB7E000
	0x035B967C LDR X0, [X0 + 0x8F8]
	0x035B9680 BL 0x1C16CF4
	0x035B9684 MOVZ W8, 0x1
	0x035B9688 STRB W8, [X21 + 0x10A]
	0x035B968C LDR X0, [X23]
	0x035B9690 BL 0x1C16F10
	0x035B9694 AND W1, W20, 0x1
	0x035B9698 MOV X21, X0
	0x035B969C BL 0x35AD928
	0x035B96A0 LDR X2, [X22]
	0x035B96A4 MOV X0, X19
	0x035B96A8 MOV X1, X21
	0x035B96AC LDP X20, X19, [X31 + 0x20]
	0x035B96B0 LDP X22, X21, [X31 + 0x10]
	0x035B96B4 LDP X30, X23, [X31], #0x30
	0x035B96B8 B 0x220D364
	0x035B96BC STR X30, [X31 - 0x30]!
	0x035B96C0 STP X22, X21, [X31 + 0x10]
	0x035B96C4 STP X20, X19, [X31 + 0x20]
	0x035B96C8 ADRP X20, 0xE27000
	0x035B96CC ADRP X22, 0xB64000
	0x035B96D0 ADRP X21, 0xB7E000
	0x035B96D4 LDRB W8, [X20 + 0x10B]
	0x035B96D8 LDR X22, [X22 + 0x370]
	0x035B96DC LDR X21, [X21 + 0x8D8]
	0x035B96E0 MOV X19, X0
	0x035B96E4 TBNZ X8, 0x0, 0x35B9708
	0x035B96E8 ADRP X0, 0xB64000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE28000
	006 Move W8, [X21+237]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0xB45000
	014 Move X0, [X0+4088]
	015 Call 0x1C17CF4
	016 Move X0, 0xB46000
	017 Move X0, [X0]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+237], W8
	021 Compare X19, 0
	022 JumpIfEqual {39}
	023 Move W8, [X20+16]
	024 Move X9, 0xB45000
	025 Move X10, 0xB46000
	026 Move X9, [X9+4088]
	027 Move X10, [X10]
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Move X0, X19
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 NotImplemented "Instruction CSEL not yet implemented."
	033 Move X1, [X8]
	034 Move X2, X31
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Call StringBuilder.Append, X0, X1
	038 Return 
	039 Call 0x1C17F20

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x035B96EC LDR X0, [X0 + 0x370]
	0x035B96F0 BL 0x1C16CF4
	0x035B96F4 ADRP X0, 0xB7E000
	0x035B96F8 LDR X0, [X0 + 0x8D8]
	0x035B96FC BL 0x1C16CF4
	0x035B9700 MOVZ W8, 0x1
	0x035B9704 STRB W8, [X20 + 0x10B]
	0x035B9708 LDR X0, [X22]
	0x035B970C BL 0x1C16F10
	0x035B9710 MOV X20, X0
	0x035B9714 BL 0x35AE904
	0x035B9718 LDR X2, [X21]
	0x035B971C MOV X0, X19
	0x035B9720 MOV X1, X20
	0x035B9724 LDP X20, X19, [X31 + 0x20]
	0x035B9728 LDP X22, X21, [X31 + 0x10]
	0x035B972C LDR X30, [X31], #0x30
	0x035B9730 B 0x220D364
	0x035B9734 STR X30, [X31 - 0x30]!
	0x035B9738 STP X22, X21, [X31 + 0x10]
	0x035B973C STP X20, X19, [X31 + 0x20]
	0x035B9740 ADRP X20, 0xE27000
	0x035B9744 ADRP X22, 0xB62000
	0x035B9748 ADRP X21, 0xB7E000
	0x035B974C LDRB W8, [X20 + 0x10C]
	0x035B9750 LDR X22, [X22 + 0xBC0]
	0x035B9754 LDR X21, [X21 + 0x8E0]
	0x035B9758 MOV X19, X0
	0x035B975C TBNZ X8, 0x0, 0x35B9780
	0x035B9760 ADRP X0, 0xB7E000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE28000
	006 Move W8, [X21+238]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB3B000
	014 Move X0, [X0+2904]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+238], W8
	018 Compare X19, 0
	019 JumpIfEqual {25}
	020 Move X8, 0xB3B000
	021 Move X8, [X8+2904]
	022 Move X9, [X19]
	023 Move X8, [X8]
	024 NotImplemented "Instruction CMP not yet implemented."
	025 Move W0, W31
	026 Move W20, [X20+16]
	027 Move X0, X19
	028 Call 0x1C17E08
	029 Move W8, [X0]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x035B9764 LDR X0, [X0 + 0x8E0]
	0x035B9768 BL 0x1C16CF4
	0x035B976C ADRP X0, 0xB62000
	0x035B9770 LDR X0, [X0 + 0xBC0]
	0x035B9774 BL 0x1C16CF4
	0x035B9778 MOVZ W8, 0x1
	0x035B977C STRB W8, [X20 + 0x10C]
	0x035B9780 LDR X0, [X22]
	0x035B9784 BL 0x1C16F10
	0x035B9788 MOV X20, X0
	0x035B978C BL 0x35AE864
	0x035B9790 LDR X2, [X21]
	0x035B9794 MOV X0, X19
	0x035B9798 MOV X1, X20
	0x035B979C LDP X20, X19, [X31 + 0x20]
	0x035B97A0 LDP X22, X21, [X31 + 0x10]
	0x035B97A4 LDR X30, [X31], #0x30
	0x035B97A8 B 0x220D364
	0x035B97AC STR X30, [X31 - 0x20]!
	0x035B97B0 STP X20, X19, [X31 + 0x10]
	0x035B97B4 ADRP X20, 0xE27000
	0x035B97B8 LDRB W8, [X20 + 0x10D]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE28000
	006 Move X21, 0xB3B000
	007 Move W8, [X20+239]
	008 Move X21, [X21+2904]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB3B000
	015 Move X0, [X0+2904]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+239], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Add X0, X19, 16
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X1, X31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call Boolean.GetHashCode, X0
	031 Return X0

Method: System.Void Clear()

Disassembly:
	0x035B97BC MOV X19, X1
	0x035B97C0 TBNZ X8, 0x0, 0x35B97D8

ISIL:
	001 Move [X0+16], W31
	002 Return 

Method: System.Void SerializeBinary(System.IO.BinaryWriter aWriter)

Disassembly:
	0x035B97C4 ADRP X0, 0xB3A000
	0x035B97C8 LDR X0, [X0 + 0x830]
	0x035B97CC BL 0x1C16CF4
	0x035B97D0 MOVZ W8, 0x1
	0x035B97D4 STRB W8, [X20 + 0x10D]
	0x035B97D8 CBZ X19, 0x35B97FC
	0x035B97DC ADRP X8, 0xB3A000
	0x035B97E0 LDR X8, [X8 + 0x830]
	0x035B97E4 MOV X0, X19
	0x035B97E8 LDP X20, X19, [X31 + 0x10]
	0x035B97EC MOV X2, X31
	0x035B97F0 LDR X1, [X8]
	0x035B97F4 LDR X30, [X31], #0x20
	0x035B97F8 B 0x32333E0
	0x035B97FC BL 0x1C16F20
	0x035B9800 RET
	0x035B9804 STP X30, X21, [X31 - 0x20]!
	0x035B9808 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {23}
	006 Move X8, [X1]
	007 Move X19, X1
	008 Move X20, X0
	009 Move W1, 6
	010 Move X9, [X8+456]
	011 Move X2, [X8+464]
	012 Move X0, X19
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move X8, [X19]
	015 Move W1, [X20+16]
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X3, [X8+440]
	020 Move X2, [X8+448]
	021 Move X30, [X31+32]
	022 CallNoReturn X3
	023 Call 0x1C17F20

