Type: UnityEngine.Input

Method: System.Single GetAxis(System.String axisName)

Disassembly:
	0x03C857C0 LDR X20, [X20 + 0x448]
	0x03C857C4 LDR X0, [X20]
	0x03C857C8 LDR W8, [X0 + 0xE0]
	0x03C857CC CBNZ W8, 0x3C857D8
	0x03C857D0 BL 0x1C16DFC
	0x03C857D4 LDR X0, [X20]
	0x03C857D8 LDR X8, [X0 + 0xB8]
	0x03C857DC LDR X8, [X8]
	0x03C857E0 CBZ X8, 0x3C85D78
	0x03C857E4 LDR W9, [X8 + 0x18]
	0x03C857E8 MOV X20, X21
	0x03C857EC MOV X21, X23
	0x03C857F0 MOV X23, X29
	0x03C857F4 CMP W25, W9
	0x03C857F8 MOV X29, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2752]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51982336
	010 Add X0, X0, 1626
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2752], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single GetAxisRaw(System.String axisName)

Disassembly:
	0x03C85838 LDR X0, [X8 + 0x20]
	0x03C8583C CBZ X0, 0x3C85D78
	0x03C85840 MOV X1, X31
	0x03C85844 BL 0x3C0D84C
	0x03C85848 ADRP X8, 0x4D2000
	0x03C8584C LDR X8, [X8 + 0x448]
	0x03C85850 LDR X8, [X8]
	0x03C85854 LDR X8, [X8 + 0xB8]
	0x03C85858 LDR X8, [X8]
	0x03C8585C CBZ X8, 0x3C85D78
	0x03C85860 LDR W9, [X8 + 0x18]
	0x03C85864 CMP W25, W9
	0x03C85868 B.CS 0x3C85D7C
	0x03C8586C ADD X8, X8, X27, 0x3, LSL
	0x03C85870 MOV W26, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2768]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51982336
	010 Add X0, X0, 1690
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2768], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetButton(System.String buttonName)

Disassembly:
	0x03C858B0 SCVTF S0, W26
	0x03C858B4 FDIV S0, S10, S0
	0x03C858B8 FCMP S0, 0x0
	0x03C858BC B.MI 0x3C85CBC
	0x03C858C0 FMOV S1, 1
	0x03C858C4 FCMP S0, S1
	0x03C858C8 B.GT 0x3C85CBC
	0x03C858CC MOV V13.16B, V10.16B
	0x03C858D0 MOV V14.16B, V11.16B
	0x03C858D4 MOV V15.16B, V12.16B
	0x03C858D8 MOV V9.16B, V11.16B
	0x03C858DC MOV V8.16B, V10.16B
	0x03C858E0 MOV X0, X24
	0x03C858E4 MOV X1, X31
	0x03C858E8 BL 0x3C03F08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2784]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51900416
	010 Add X0, X0, 1828
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2784], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetButtonDown(System.String buttonName)

Disassembly:
	0x03C85928 MOV X0, X24
	0x03C8592C MOV V0.16B, V13.16B
	0x03C85930 MOV V1.16B, V14.16B
	0x03C85934 MOV V2.16B, V15.16B
	0x03C85938 MOV X1, X31
	0x03C8593C BL 0x3C047B4
	0x03C85940 ADRP X10, 0x754000
	0x03C85944 LDR X8, [X31 + 0x58]
	0x03C85948 LDR W9, [X31 + 0x60]
	0x03C8594C LDP S11, S12, [X31 + 0x64]
	0x03C85950 LDRB W10, [X10 + 0x5AA]
	0x03C85954 LDR V13, [X31 + 0x6C]
	0x03C85958 STR X8, [X31 + 0x70]
	0x03C8595C STR W9, [X31 + 0x78]
	0x03C85960 CBNZ W10, 0x3C8597C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2800]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51884032
	010 Add X0, X0, 2723
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2800], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetKeyInt(UnityEngine.KeyCode key)

Disassembly:
	0x03C859A0 FMUL S0, S0, S3
	0x03C859A4 FCMP S2, S0
	0x03C859A8 FCSEL S0, S2, S0, GT
	0x03C859AC FCMP S1, S0
	0x03C859B0 B.PL 0x3C859C0
	0x03C859B4 MOVZ W8, 0x7F800000
	0x03C859B8 FMOV S10, W8
	0x03C859BC B 0x3C859E8
	0x03C859C0 MOV X0, X24
	0x03C859C4 MOV X1, X31
	0x03C859C8 BL 0x3C03618
	0x03C859CC MOV X0, X24
	0x03C859D0 MOV X1, X31
	0x03C859D4 MOV V10.16B, V0.16B
	0x03C859D8 BL 0x3C035DC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2536]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51826688
	010 Add X0, X0, 381
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2536], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetKeyUpInt(UnityEngine.KeyCode key)

Disassembly:
	0x03C859DC FSUB S0, S10, S0
	0x03C859E0 FDIV S0, S0, S13
	0x03C859E4 FABS S10, S0
	0x03C859E8 MOV X0, X24
	0x03C859EC MOV X1, X31
	0x03C859F0 BL 0x3C03A18
	0x03C859F4 MOV W25, W0
	0x03C859F8 MOV X0, X24
	0x03C859FC MOV X1, X31
	0x03C85A00 BL 0x3C03A98
	0x03C85A04 ADRP X8, 0x761000
	0x03C85A08 LDR X9, [X31 + 0x70]
	0x03C85A0C LDR W10, [X31 + 0x78]
	0x03C85A10 LDR X8, [X8 + 0x9D8]
	0x03C85A14 MOV W26, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2544]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51761152
	010 Add X0, X0, 797
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2544], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetKeyDownInt(UnityEngine.KeyCode key)

Disassembly:
	0x03C85A18 STP S11, S12, [X31 + 0x4C]
	0x03C85A1C STR X9, [X31 + 0x40]
	0x03C85A20 STR W10, [X31 + 0x48]
	0x03C85A24 STR S13, [X31 + 0x54]
	0x03C85A28 CBNZ X8, 0x3C85A44
	0x03C85A2C ADRP X0, 0xFFFFFFFFFCEA3000
	0x03C85A30 ADD X0, X0, 0xF39
	0x03C85A34 BL 0x1C16CB8
	0x03C85A38 MOV X8, X0
	0x03C85A3C ADRP X9, 0x761000
	0x03C85A40 STR X0, [X9 + 0x9D8]
	0x03C85A44 AND W2, W26, W25, 0x0
	0x03C85A48 ADD X1, X31, 0x40
	0x03C85A4C MOV X0, X24
	0x03C85A50 MOV V0.16B, V10.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2552]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51941376
	010 Add X0, X0, 2353
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2552], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetMouseButton(System.Int32 button)

Disassembly:
	0x03C85A54 BLR X8
	0x03C85A58 LDR X8, [X20]
	0x03C85A5C MOV X25, X0
	0x03C85A60 LDR W9, [X8 + 0xE0]
	0x03C85A64 CBNZ W9, 0x3C85A70
	0x03C85A68 MOV X0, X8
	0x03C85A6C BL 0x1C16DFC
	0x03C85A70 MOV X0, X25
	0x03C85A74 MOV X1, X31
	0x03C85A78 MOV X2, X31
	0x03C85A7C BL 0x3C354F8
	0x03C85A80 TBZ X0, 0x0, 0x3C85AD8
	0x03C85A84 LDR X0, [X28]
	0x03C85A88 LDR W8, [X0 + 0xE0]
	0x03C85A8C CBNZ W8, 0x3C85A98

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2560]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51933184
	010 Add X0, X0, 2313
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2560], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetMouseButtonDown(System.Int32 button)

Disassembly:
	0x03C85A90 BL 0x1C16DFC
	0x03C85A94 LDR X0, [X28]
	0x03C85A98 LDR X8, [X0 + 0xB8]
	0x03C85A9C LDR X8, [X8 + 0x18]
	0x03C85AA0 CBZ X8, 0x3C85D78
	0x03C85AA4 LDR W9, [X8 + 0x18]
	0x03C85AA8 CMP W9, 0x1
	0x03C85AAC B.LS 0x3C85D7C
	0x03C85AB0 STR X25, [X8 + 0x30]
	0x03C85AB4 LDR X8, [X28]
	0x03C85AB8 LDR X8, [X8 + 0xB8]
	0x03C85ABC LDR X8, [X8 + 0x18]
	0x03C85AC0 CBZ X8, 0x3C85D78
	0x03C85AC4 LDR W9, [X8 + 0x18]
	0x03C85AC8 CMP W9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2568]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51769344
	010 Add X0, X0, 1391
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2568], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetMouseButtonUp(System.Int32 button)

Disassembly:
	0x03C85ACC MOV X9, X24
	0x03C85AD0 B.HI 0x3C85B50
	0x03C85AD4 B 0x3C85D7C
	0x03C85AD8 MOV X0, X24
	0x03C85ADC MOV X1, X31
	0x03C85AE0 BL 0x3C03C44
	0x03C85AE4 CMP W0, 0x1
	0x03C85AE8 B.EQ 0x3C85B00
	0x03C85AEC MOV X0, X24
	0x03C85AF0 MOV X1, X31
	0x03C85AF4 BL 0x3C03C44
	0x03C85AF8 CMP W0, 0x2
	0x03C85AFC B.NE 0x3C85B54
	0x03C85B00 LDR X0, [X28]
	0x03C85B04 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2576]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51810304
	010 Add X0, X0, 927
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2576], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.String[] GetJoystickNames()

Disassembly:
	0x03C85B08 CBNZ W8, 0x3C85B14
	0x03C85B0C BL 0x1C16DFC
	0x03C85B10 LDR X0, [X28]
	0x03C85B14 LDR X8, [X0 + 0xB8]
	0x03C85B18 LDR X8, [X8 + 0x18]
	0x03C85B1C CBZ X8, 0x3C85D78
	0x03C85B20 LDR W9, [X8 + 0x18]
	0x03C85B24 CMP W9, 0x1
	0x03C85B28 B.LS 0x3C85D7C
	0x03C85B2C STR X31, [X8 + 0x30]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x762000
	004 Move X0, [X19+2584]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51826688
	008 Add X0, X0, 431
	009 Call 0x1C17CB8
	010 Move [X19+2584], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Touch GetTouch(System.Int32 index)

Disassembly:
	0x03C85B30 LDR X8, [X28]
	0x03C85B34 LDR X8, [X8 + 0xB8]
	0x03C85B38 LDR X8, [X8 + 0x18]
	0x03C85B3C CBZ X8, 0x3C85D78
	0x03C85B40 LDR W9, [X8 + 0x18]
	0x03C85B44 CMP W9, 0x1
	0x03C85B48 B.LS 0x3C85D7C
	0x03C85B4C MOV X9, X31
	0x03C85B50 STR X9, [X8 + 0x38]
	0x03C85B54 MOV X0, X24
	0x03C85B58 MOV X1, X31
	0x03C85B5C BL 0x3C03A18
	0x03C85B60 MOV W25, W0
	0x03C85B64 MOV X0, X24
	0x03C85B68 MOV X1, X31
	0x03C85B6C BL 0x3C03A98
	0x03C85B70 ADRP X8, 0x761000
	0x03C85B74 LDR X9, [X31 + 0x70]
	0x03C85B78 LDR W10, [X31 + 0x78]
	0x03C85B7C LDR X8, [X8 + 0x9E0]
	0x03C85B80 MOV W26, W0
	0x03C85B84 STP S11, S12, [X31 + 0x34]
	0x03C85B88 STR X9, [X31 + 0x28]
	0x03C85B8C STR W10, [X31 + 0x30]
	0x03C85B90 STR S13, [X31 + 0x3C]
	0x03C85B94 CBNZ X8, 0x3C85BB0
	0x03C85B98 ADRP X0, 0xFFFFFFFFFCE6A000
	0x03C85B9C ADD X0, X0, 0x668

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+80], X30
	003 Move [X31+88], X21
	004 Move [X31+96], X20
	005 Move [X31+104], X19
	006 Move X21, 0x762000
	007 Move X19, X8
	008 Move X8, [X21+2672]
	009 Move W20, W0
	010 NotImplemented "Instruction MOVI not yet implemented."
	011 Move [X31+64], W31
	012 Move [X31+32], V0
	013 Move [X31+40], V0
	014 Move [X31], V0
	015 Move [X31+8], V0
	016 Compare X8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, -51810304
	019 Add X0, X0, 977
	020 Call 0x1C17CB8
	021 Move X8, X0
	022 Move [X21+2672], X0
	023 Add X1, X31, 0
	024 Move W0, W20
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Add X1, X31, 0
	027 Move W2, 68
	028 Move X0, X19
	029 Call 0x3EB2AC0
	030 Move X20, [X31+96]
	031 Move X19, [X31+104]
	032 Move X30, [X31+80]
	033 Move X21, [X31+88]
	034 Add X31, X31, 112
	035 Return X0

Method: UnityEngine.PenData GetLastPenContactEvent()

Disassembly:
	0x03C85BE4 MOV X2, X31
	0x03C85BE8 BL 0x3C354F8
	0x03C85BEC TBZ X0, 0x0, 0x3C85C44
	0x03C85BF0 LDR X0, [X28]
	0x03C85BF4 LDR W8, [X0 + 0xE0]
	0x03C85BF8 CBNZ W8, 0x3C85C04
	0x03C85BFC BL 0x1C16DFC
	0x03C85C00 LDR X0, [X28]
	0x03C85C04 LDR X8, [X0 + 0xB8]
	0x03C85C08 LDR X8, [X8 + 0x18]
	0x03C85C0C CBZ X8, 0x3C85D78
	0x03C85C10 LDR W9, [X8 + 0x18]
	0x03C85C14 CMP W9, 0x2
	0x03C85C18 B.LS 0x3C85D7C
	0x03C85C1C STR X25, [X8 + 0x40]
	0x03C85C20 LDR X8, [X28]
	0x03C85C24 LDR X8, [X8 + 0xB8]
	0x03C85C28 LDR X8, [X8 + 0x18]
	0x03C85C2C CBZ X8, 0x3C85D78
	0x03C85C30 LDR W9, [X8 + 0x18]
	0x03C85C34 CMP W9, 0x2
	0x03C85C38 B.LS 0x3C85D7C
	0x03C85C3C STR X24, [X8 + 0x48]
	0x03C85C40 B 0x3C85CBC
	0x03C85C44 MOV X0, X24

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+48], X30
	003 Move [X31+64], X20
	004 Move [X31+72], X19
	005 Move X20, 0x762000
	006 Move X19, X8
	007 Move X8, [X20+2680]
	008 NotImplemented "Instruction MOVI not yet implemented."
	009 Move [X31+32], X31
	010 Move [X31], V0
	011 Move [X31+8], V0
	012 Compare X8, 0
	013 JumpIfNotEqual {19}
	014 Move X0, -51818496
	015 Add X0, X0, 451
	016 Call 0x1C17CB8
	017 Move X8, X0
	018 Move [X20+2680], X0
	019 Add X0, X31, 0
	020 NotImplemented "Instruction BLR not yet implemented."
	021 Move X8, [X31+32]
	022 Move V1, [X31]
	023 Move V0, [X31+16]
	024 Move X30, [X31+48]
	025 Move [X19+32], X8
	026 Move [X19], V1
	027 Move [X19+8], V0
	028 Move X20, [X31+64]
	029 Move X19, [X31+72]
	030 Add X31, X31, 80
	031 Return X0

Method: System.Void ClearLastPenContactEvent()

Disassembly:
	0x03C85C84 LDR X8, [X8 + 0x18]
	0x03C85C88 CBZ X8, 0x3C85D78
	0x03C85C8C LDR W9, [X8 + 0x18]
	0x03C85C90 CMP W9, 0x2
	0x03C85C94 B.LS 0x3C85D7C
	0x03C85C98 STR X31, [X8 + 0x40]
	0x03C85C9C LDR X8, [X28]
	0x03C85CA0 LDR X8, [X8 + 0xB8]
	0x03C85CA4 LDR X8, [X8 + 0x18]
	0x03C85CA8 CBZ X8, 0x3C85D78

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x762000
	004 Move X0, [X19+2592]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51990528
	008 Add X0, X0, 1759
	009 Call 0x1C17CB8
	010 Move [X19+2592], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean GetKey(UnityEngine.KeyCode key)

Disassembly:
	0x03C85CAC LDR W9, [X8 + 0x18]
	0x03C85CB0 CMP W9, 0x2
	0x03C85CB4 B.LS 0x3C85D7C
	0x03C85CB8 STR X31, [X8 + 0x48]
	0x03C85CBC LDR W8, [X29 + 0x18]
	0x03C85CC0 ADD X22, X22, 0x1
	0x03C85CC4 CMP X22, W8, SXTW
	0x03C85CC8 B.LT 0x3C85640
	0x03C85CCC MOV X20, X31
	0x03C85CD0 MOV X19, X31
	0x03C85CD4 LDR X0, [X28]
	0x03C85CD8 LDR W8, [X0 + 0xE0]
	0x03C85CDC CBNZ W8, 0x3C85CE8
	0x03C85CE0 BL 0x1C16DFC
	0x03C85CE4 LDR X0, [X28]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2536]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51826688
	010 Add X0, X0, 381
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2536], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetKeyUp(UnityEngine.KeyCode key)

Disassembly:
	0x03C85CE8 LDR X8, [X0 + 0xB8]
	0x03C85CEC LDR X9, [X8 + 0x18]
	0x03C85CF0 CBZ X9, 0x3C85D78
	0x03C85CF4 LDR W10, [X0 + 0xE0]
	0x03C85CF8 LDRSW X21, [X9 + 0x18]
	0x03C85CFC CBNZ W10, 0x3C85D0C
	0x03C85D00 BL 0x1C16DFC
	0x03C85D04 LDR X8, [X28]
	0x03C85D08 LDR X8, [X8 + 0xB8]
	0x03C85D0C CMP X19, X21
	0x03C85D10 B.GE 0x3C85D44
	0x03C85D14 LDR X8, [X8 + 0x18]
	0x03C85D18 CBZ X8, 0x3C85D78
	0x03C85D1C LDR W9, [X8 + 0x18]
	0x03C85D20 CMP X19, X9

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2544]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51761152
	010 Add X0, X0, 797
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2544], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean GetKeyDown(UnityEngine.KeyCode key)

Disassembly:
	0x03C85D24 B.CS 0x3C85D7C
	0x03C85D28 ADD X8, X8, X20
	0x03C85D2C LDP X1, X2, [X8 + 0x20]
	0x03C85D30 MOV W0, W19
	0x03C85D34 BL 0x3C85D80
	0x03C85D38 ADD X19, X19, 0x1
	0x03C85D3C ADD X20, X20, 0x10
	0x03C85D40 B 0x3C85CD4
	0x03C85D44 LDP X20, X19, [X31 + 0x110]
	0x03C85D48 LDP X22, X21, [X31 + 0x100]
	0x03C85D4C LDP X24, X23, [X31 + 0xF0]
	0x03C85D50 LDP X26, X25, [X31 + 0xE0]
	0x03C85D54 LDP X28, X27, [X31 + 0xD0]
	0x03C85D58 LDP X29, X30, [X31 + 0xC0]
	0x03C85D5C LDP D9, D8, [X31 + 0xB0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2552]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51941376
	010 Add X0, X0, 2353
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2552], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_anyKey()

Disassembly:
	0x03C85D60 LDP D11, D10, [X31 + 0xA0]
	0x03C85D64 LDP D13, D12, [X31 + 0x90]
	0x03C85D68 LDP D15, D14, [X31 + 0x80]
	0x03C85D6C STRB W31, [X8]
	0x03C85D70 ADD X31, X31, 0x120
	0x03C85D74 RET
	0x03C85D78 BL 0x1C16F20
	0x03C85D7C BL 0x1C16F28
	0x03C85D80 SUB X31, X31, 0x50
	0x03C85D84 STP X2, X30, [X31 + 0x8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x762000
	004 Move X0, [X19+2600]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51867648
	008 Add X0, X0, 1553
	009 Call 0x1C17CB8
	010 Move [X19+2600], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Vector3 get_mousePosition()

Disassembly:
	0x03C85D88 STP X24, X23, [X31 + 0x20]
	0x03C85D8C STP X22, X21, [X31 + 0x30]
	0x03C85D90 STP X20, X19, [X31 + 0x40]
	0x03C85D94 ADRP X23, 0x761000
	0x03C85D98 STR X1, [X31]
	0x03C85D9C ADRP X22, 0x4DB000
	0x03C85DA0 LDRB W8, [X23 + 0xAA3]
	0x03C85DA4 LDR X22, [X22 + 0x7F0]
	0x03C85DA8 MOV X19, X2
	0x03C85DAC MOV X20, X1
	0x03C85DB0 MOV W21, W0
	0x03C85DB4 TBNZ X8, 0x0, 0x3C85E20
	0x03C85DB8 ADRP X0, 0x4DB000
	0x03C85DBC LDR X0, [X0 + 0x7F0]
	0x03C85DC0 BL 0x1C16CF4
	0x03C85DC4 ADRP X0, 0x4DB000
	0x03C85DC8 LDR X0, [X0 + 0x808]
	0x03C85DCC BL 0x1C16CF4
	0x03C85DD0 ADRP X0, 0x4DB000

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x762000
	005 Move X8, [X19+2688]
	006 Move [X31+8], W31
	007 Move [X31], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51810304
	011 Add X0, X0, 1047
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X19+2688], X0
	015 Add X0, X31, 0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move S0, [X31]
	018 Move S1, [X31+4]
	019 Move V2, [X31+8]
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Add X31, X31, 32
	023 Return X0

Method: UnityEngine.Vector2 get_mouseScrollDelta()

Disassembly:
	0x03C85E10 LDR X0, [X0 + 0x838]
	0x03C85E14 BL 0x1C16CF4
	0x03C85E18 MOVZ W8, 0x1
	0x03C85E1C STRB W8, [X23 + 0xAA3]
	0x03C85E20 LDR X0, [X22]
	0x03C85E24 LDR W8, [X0 + 0xE0]
	0x03C85E28 CBNZ W8, 0x3C85E34
	0x03C85E2C BL 0x1C16DFC
	0x03C85E30 LDR X0, [X22]
	0x03C85E34 LDR X8, [X0 + 0xB8]
	0x03C85E38 LDRB W9, [X8 + 0x38]
	0x03C85E3C CBZ W9, 0x3C85EB8
	0x03C85E40 MOV X0, X20
	0x03C85E44 MOV X1, X19
	0x03C85E48 BL 0x3C861A8
	0x03C85E4C TBZ X0, 0x0, 0x3C85F44
	0x03C85E50 LDR X0, [X22]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x762000
	005 Move X8, [X19+2696]
	006 Move [X31+8], X31
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51785728
	010 Add X0, X0, 641
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X19+2696], X0
	014 Add X0, X31, 8
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move S0, [X31+8]
	017 Move S1, [X31+12]
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Add X31, X31, 32
	021 Return X0

Method: UnityEngine.IMECompositionMode get_imeCompositionMode()

Disassembly:
	0x03C85E90 LDR X9, [X9 + 0x10]
	0x03C85E94 CBZ X9, 0x3C861A0
	0x03C85E98 LDR W10, [X9 + 0x18]
	0x03C85E9C CMP W10, W21
	0x03C85EA0 B.LS 0x3C861A4
	0x03C85EA4 ADRP X10, 0x4DB000
	0x03C85EA8 LDR X10, [X10 + 0x838]
	0x03C85EAC ADD X8, X9, X8, 0x4, LSL
	0x03C85EB0 LDR X1, [X10]
	0x03C85EB4 B 0x3C85F3C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x762000
	004 Move X0, [X19+2608]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51859456
	008 Add X0, X0, 2587
	009 Call 0x1C17CB8
	010 Move [X19+2608], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void set_imeCompositionMode(UnityEngine.IMECompositionMode value)

Disassembly:
	0x03C85EB8 LDR W9, [X0 + 0xE0]
	0x03C85EBC LDRB W24, [X8 + 0x39]
	0x03C85EC0 CBNZ W9, 0x3C85ED0
	0x03C85EC4 BL 0x1C16DFC
	0x03C85EC8 LDR X8, [X22]
	0x03C85ECC LDR X8, [X8 + 0xB8]
	0x03C85ED0 LDR X8, [X8 + 0x10]
	0x03C85ED4 CBZ X8, 0x3C861A0
	0x03C85ED8 LDR W9, [X8 + 0x18]
	0x03C85EDC CMP W9, W21
	0x03C85EE0 B.LS 0x3C861A4
	0x03C85EE4 MOV W9, W21
	0x03C85EE8 SXTW X23, W9
	0x03C85EEC ADD X8, X8, X23, 0x4, LSL
	0x03C85EF0 LDP X0, X1, [X8 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2616]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51933184
	010 Add X0, X0, 2361
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2616], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.String get_compositionString()

Disassembly:
	0x03C85EF4 BL 0x3C861A8
	0x03C85EF8 CBZ W24, 0x3C860A8
	0x03C85EFC TBZ X0, 0x0, 0x3C85F44
	0x03C85F00 LDR X0, [X22]
	0x03C85F04 LDR W8, [X0 + 0xE0]
	0x03C85F08 CBNZ W8, 0x3C85F14
	0x03C85F0C BL 0x1C16DFC
	0x03C85F10 LDR X0, [X22]
	0x03C85F14 LDR X8, [X0 + 0xB8]
	0x03C85F18 LDR X8, [X8 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x762000
	004 Move X0, [X19+2624]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51933184
	008 Add X0, X0, 2435
	009 Call 0x1C17CB8
	010 Move [X19+2624], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Vector2 get_compositionCursorPos()

Disassembly:
	0x03C85F1C CBZ X8, 0x3C861A0
	0x03C85F20 LDR W9, [X8 + 0x18]
	0x03C85F24 CMP W9, W21
	0x03C85F28 B.LS 0x3C861A4
	0x03C85F2C ADRP X9, 0x4DB000
	0x03C85F30 LDR X9, [X9 + 0x808]
	0x03C85F34 ADD X8, X8, X23, 0x4, LSL
	0x03C85F38 LDR X1, [X9]
	0x03C85F3C ADD X0, X8, 0x20
	0x03C85F40 BL 0x3C86248
	0x03C85F44 LDR X0, [X22]
	0x03C85F48 LDR W8, [X0 + 0xE0]
	0x03C85F4C CBNZ W8, 0x3C85F58
	0x03C85F50 BL 0x1C16DFC
	0x03C85F54 LDR X0, [X22]
	0x03C85F58 LDR X8, [X0 + 0xB8]
	0x03C85F5C LDR X8, [X8 + 0x8]

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x762000
	005 Move X8, [X19+2704]
	006 Move [X31+8], X31
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51941376
	010 Add X0, X0, 2407
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X19+2704], X0
	014 Add X0, X31, 8
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move S0, [X31+8]
	017 Move S1, [X31+12]
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Add X31, X31, 32
	021 Return X0

Method: System.Void set_compositionCursorPos(UnityEngine.Vector2 value)

Disassembly:
	0x03C85F9C TBNZ X0, 0x0, 0x3C86048
	0x03C85FA0 B 0x3C8605C
	0x03C85FA4 LDR X0, [X22]
	0x03C85FA8 LDR W8, [X0 + 0xE0]
	0x03C85FAC CBNZ W8, 0x3C85FB8
	0x03C85FB0 BL 0x1C16DFC
	0x03C85FB4 LDR X0, [X22]
	0x03C85FB8 LDR X8, [X0 + 0xB8]
	0x03C85FBC LDR X8, [X8 + 0x8]
	0x03C85FC0 CBZ X8, 0x3C861A0
	0x03C85FC4 LDR W9, [X8 + 0x18]
	0x03C85FC8 CMP W9, W21
	0x03C85FCC B.LS 0x3C861A4
	0x03C85FD0 ADD X8, X8, X23, 0x4, LSL
	0x03C85FD4 LDP X0, X1, [X8 + 0x20]
	0x03C85FD8 BL 0x3C861A8

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x762000
	005 Move X8, [X19+2712]
	006 Move [X31+8], S0
	007 Move [X31+16], S1
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51974144
	011 Add X0, X0, 2442
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X19+2712], X0
	015 Add X0, X31, 8
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 Add X31, X31, 32
	020 Return 

Method: System.Boolean get_mousePresent()

Disassembly:
	0x03C86018 ADD X0, X8, 0x20
	0x03C8601C LDR X1, [X9]
	0x03C86020 BL 0x3C86248
	0x03C86024 MOV X0, X20
	0x03C86028 MOV X1, X19
	0x03C8602C BL 0x3C861A8
	0x03C86030 TBZ X0, 0x0, 0x3C8605C
	0x03C86034 ADRP X8, 0x4DA000
	0x03C86038 LDR X8, [X8 + 0x830]
	0x03C8603C ADD X0, X31, 0x0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x761000
	004 Move X0, [X19+2632]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51888128
	008 Add X0, X0, 2685
	009 Call 0x1C17CB8
	010 Move [X19+2632], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 get_touchCount()

Disassembly:
	0x03C86040 LDR X1, [X8]
	0x03C86044 BL 0x3C86248
	0x03C86048 ADRP X8, 0x4DA000
	0x03C8604C LDR X8, [X8 + 0x810]
	0x03C86050 ADD X0, X31, 0x0
	0x03C86054 LDR X1, [X8]
	0x03C86058 BL 0x3C86248
	0x03C8605C LDR X0, [X22]
	0x03C86060 LDR W8, [X0 + 0xE0]
	0x03C86064 CBNZ W8, 0x3C86070

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x761000
	004 Move X0, [X19+2640]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51798016
	008 Add X0, X0, 1095
	009 Call 0x1C17CB8
	010 Move [X19+2640], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean get_touchSupported()

Disassembly:
	0x03C86068 BL 0x1C16DFC
	0x03C8606C LDR X0, [X22]
	0x03C86070 LDR X8, [X0 + 0xB8]
	0x03C86074 LDR X8, [X8 + 0x8]
	0x03C86078 CBZ X8, 0x3C861A0
	0x03C8607C LDR W9, [X8 + 0x18]
	0x03C86080 CMP W9, W21
	0x03C86084 B.LS 0x3C861A4
	0x03C86088 ADD X8, X8, X23, 0x4, LSL
	0x03C8608C STP X20, X19, [X8 + 0x20]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x761000
	004 Move X0, [X19+2648]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51822592
	008 Add X0, X0, 376
	009 Call 0x1C17CB8
	010 Move [X19+2648], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Touch[] get_touches()

Disassembly:
	0x03C86090 LDP X20, X19, [X31 + 0x40]
	0x03C86094 LDP X22, X21, [X31 + 0x30]
	0x03C86098 LDP X24, X23, [X31 + 0x20]
	0x03C8609C LDR X30, [X31 + 0x10]
	0x03C860A0 ADD X31, X31, 0x50
	0x03C860A4 RET
	0x03C860A8 TBZ X0, 0x0, 0x3C85F44
	0x03C860AC LDR X0, [X22]
	0x03C860B0 LDR W8, [X0 + 0xE0]
	0x03C860B4 CBNZ W8, 0x3C860C0
	0x03C860B8 BL 0x1C16DFC
	0x03C860BC LDR X0, [X22]
	0x03C860C0 LDR X8, [X0 + 0xB8]
	0x03C860C4 LDR X8, [X8 + 0x10]
	0x03C860C8 CBZ X8, 0x3C861A0
	0x03C860CC LDR W9, [X8 + 0x18]
	0x03C860D0 CMP W9, W21
	0x03C860D4 B.LS 0x3C861A4
	0x03C860D8 ADD X8, X8, X23, 0x4, LSL
	0x03C860DC LDP X2, X3, [X8 + 0x20]
	0x03C860E0 MOV X0, X20
	0x03C860E4 MOV X1, X19
	0x03C860E8 BL 0x3C8626C
	0x03C860EC TBZ X0, 0x0, 0x3C86134
	0x03C860F0 LDR X0, [X22]
	0x03C860F4 LDR W8, [X0 + 0xE0]
	0x03C860F8 CBNZ W8, 0x3C86104
	0x03C860FC BL 0x1C16DFC
	0x03C86100 LDR X0, [X22]
	0x03C86104 LDR X8, [X0 + 0xB8]
	0x03C86108 LDR X8, [X8 + 0x10]
	0x03C8610C CBZ X8, 0x3C861A0
	0x03C86110 LDR W9, [X8 + 0x18]
	0x03C86114 CMP W9, W21
	0x03C86118 B.LS 0x3C861A4
	0x03C8611C ADRP X9, 0x4DA000
	0x03C86120 LDR X9, [X9 + 0x828]
	0x03C86124 ADD X8, X8, X23, 0x4, LSL
	0x03C86128 ADD X0, X8, 0x20
	0x03C8612C LDR X1, [X9]
	0x03C86130 BL 0x3C86248
	0x03C86134 LDR X0, [X22]
	0x03C86138 LDR W8, [X0 + 0xE0]
	0x03C8613C CBNZ W8, 0x3C86148
	0x03C86140 BL 0x1C16DFC
	0x03C86144 LDR X0, [X22]
	0x03C86148 LDR X8, [X0 + 0xB8]
	0x03C8614C LDR X8, [X8 + 0x10]
	0x03C86150 CBZ X8, 0x3C861A0
	0x03C86154 LDR W9, [X8 + 0x18]
	0x03C86158 CMP W9, W21
	0x03C8615C B.LS 0x3C861A4
	0x03C86160 ADRP X9, 0x4DA000
	0x03C86164 LDR X9, [X9 + 0x820]
	0x03C86168 ADD X8, X8, X23, 0x4, LSL
	0x03C8616C ADD X0, X8, 0x20
	0x03C86170 LDR X1, [X9]
	0x03C86174 BL 0x3C86248
	0x03C86178 LDR X8, [X22]
	0x03C8617C LDR X8, [X8 + 0xB8]
	0x03C86180 LDR X8, [X8 + 0x10]
	0x03C86184 CBZ X8, 0x3C861A0
	0x03C86188 LDR W9, [X8 + 0x18]
	0x03C8618C CMP W9, W21
	0x03C86190 B.LS 0x3C861A4
	0x03C86194 ADD X8, X8, X23, 0x4, LSL
	0x03C86198 STP X31, X31, [X8 + 0x20]
	0x03C8619C B 0x3C85F44
	0x03C861A0 BL 0x1C16F20
	0x03C861A4 BL 0x1C16F28
	0x03C861A8 STR X30, [X31 - 0x30]!
	0x03C861AC STP X22, X21, [X31 + 0x10]
	0x03C861B0 STP X20, X19, [X31 + 0x20]
	0x03C861B4 ADRP X22, 0x760000
	0x03C861B8 ADRP X21, 0x46D000
	0x03C861BC LDRB W8, [X22 + 0xAA5]
	0x03C861C0 LDR X21, [X21 + 0x598]
	0x03C861C4 MOV X19, X1
	0x03C861C8 MOV X20, X0
	0x03C861CC TBNZ X8, 0x0, 0x3C861E4

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+224], X29
	003 Move [X31+232], X30
	004 Move [X31+240], X24
	005 Move [X31+248], X23
	006 Move [X31+256], X22
	007 Move [X31+264], X21
	008 Move [X31+272], X20
	009 Move [X31+280], X19
	010 Move X19, 0x761000
	011 Move W8, [X19+2656]
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4DB000
	017 Move X0, [X0+2024]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X19+2656], W8
	021 Move X20, 0x761000
	022 Move X19, 0x4DB000
	023 Move X8, [X20+2640]
	024 Move X19, [X19+2024]
	025 Compare X8, 0
	026 JumpIfNotEqual {32}
	027 Move X0, -51798016
	028 Add X0, X0, 1095
	029 Call 0x1C17CB8
	030 Move X8, X0
	031 Move [X20+2640], X0
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X8, [X19]
	034 Move W21, W0
	035 Move W1, W21
	036 Move X0, X8
	037 Call 0x1C17D6C
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X19, X0
	040 Move X22, -51814400
	041 Move X20, X31
	042 Move W23, W21
	043 Add X21, X19, 32
	044 Move X24, 0x761000
	045 Add X22, X22, 977
	046 Move X8, [X24+2672]
	047 NotImplemented "Instruction MOVI not yet implemented."
	048 Move [X31+208], W31
	049 Move [X31+176], V0
	050 Move [X31+184], V0
	051 Move [X31+144], V0
	052 Move [X31+152], V0
	053 Compare X8, 0
	054 JumpIfNotEqual {59}
	055 Move X0, X22
	056 Call 0x1C17CB8
	057 Move X8, X0
	058 Move [X24+2672], X0
	059 Add X1, X31, 144
	060 Move W0, W20
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Add X0, X31, 72
	063 Add X1, X31, 144
	064 Move W2, 68
	065 Call 0x3EB2AC0
	066 Compare X19, 0
	067 JumpIfEqual {92}
	068 Add X0, X31, 0
	069 Add X1, X31, 72
	070 Move W2, 68
	071 Call 0x3EB2AC0
	072 Move W8, [X19+24]
	073 NotImplemented "Instruction CMP not yet implemented."
	074 Add X1, X31, 0
	075 Move W2, 68
	076 Move X0, X21
	077 Call 0x3EB2AC0
	078 Add X20, X20, 1
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Add X21, X21, 68
	081 Move X0, X19
	082 Move X20, [X31+272]
	083 Move X19, [X31+280]
	084 Move X22, [X31+256]
	085 Move X21, [X31+264]
	086 Move X24, [X31+240]
	087 Move X23, [X31+248]
	088 Move X29, [X31+224]
	089 Move X30, [X31+232]
	090 Add X31, X31, 288
	091 Return X0
	092 Call 0x1C17F20
	093 Call 0x1C17F28

Method: System.Boolean CheckDisabled()

Disassembly:
	0x03C861D0 ADRP X0, 0x46D000
	0x03C861D4 LDR X0, [X0 + 0x598]
	0x03C861D8 BL 0x1C16CF4
	0x03C861DC MOVZ W8, 0x1
	0x03C861E0 STRB W8, [X22 + 0xAA5]
	0x03C861E4 LDR X0, [X21]
	0x03C861E8 LDR W8, [X0 + 0xE0]
	0x03C861EC CBNZ W8, 0x3C861F4
	0x03C861F0 BL 0x1C16DFC
	0x03C861F4 MOV X0, X20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x761000
	004 Move X0, [X19+2664]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51822592
	008 Add X0, X0, 416
	009 Call 0x1C17CB8
	010 Move [X19+2664], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void GetTouch_Injected(System.Int32 index, out UnityEngine.Touch ret)

Disassembly:
	0x03C85BA0 BL 0x1C16CB8
	0x03C85BA4 MOV X8, X0
	0x03C85BA8 ADRP X9, 0x761000
	0x03C85BAC STR X0, [X9 + 0x9E0]
	0x03C85BB0 AND W2, W26, W25, 0x0
	0x03C85BB4 ADD X1, X31, 0x28
	0x03C85BB8 MOV X0, X24
	0x03C85BBC MOV V0.16B, V10.16B
	0x03C85BC0 BLR X8
	0x03C85BC4 LDR X8, [X20]
	0x03C85BC8 MOV X25, X0
	0x03C85BCC LDR W9, [X8 + 0xE0]
	0x03C85BD0 CBNZ W9, 0x3C85BDC
	0x03C85BD4 MOV X0, X8
	0x03C85BD8 BL 0x1C16DFC
	0x03C85BDC MOV X0, X25
	0x03C85BE0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x762000
	006 Move X2, [X21+2672]
	007 Move X19, X1
	008 Move W20, W0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51810304
	012 Add X0, X0, 977
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2672], X0
	016 Move W0, W20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void GetLastPenContactEvent_Injected(out UnityEngine.PenData ret)

Disassembly:
	0x03C85C48 MOV X1, X31
	0x03C85C4C BL 0x3C03C44
	0x03C85C50 CMP W0, 0x1
	0x03C85C54 B.EQ 0x3C85C6C
	0x03C85C58 MOV X0, X24
	0x03C85C5C MOV X1, X31
	0x03C85C60 BL 0x3C03C44
	0x03C85C64 CMP W0, 0x2
	0x03C85C68 B.NE 0x3C85CBC
	0x03C85C6C LDR X0, [X28]
	0x03C85C70 LDR W8, [X0 + 0xE0]
	0x03C85C74 CBNZ W8, 0x3C85C80
	0x03C85C78 BL 0x1C16DFC
	0x03C85C7C LDR X0, [X28]
	0x03C85C80 LDR X8, [X0 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2680]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51818496
	010 Add X0, X0, 451
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2680], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void get_mousePosition_Injected(out UnityEngine.Vector3 ret)

Disassembly:
	0x03C85DD4 LDR X0, [X0 + 0x810]
	0x03C85DD8 BL 0x1C16CF4
	0x03C85DDC ADRP X0, 0x4DB000
	0x03C85DE0 LDR X0, [X0 + 0x818]
	0x03C85DE4 BL 0x1C16CF4
	0x03C85DE8 ADRP X0, 0x4DB000
	0x03C85DEC LDR X0, [X0 + 0x820]
	0x03C85DF0 BL 0x1C16CF4
	0x03C85DF4 ADRP X0, 0x4DB000
	0x03C85DF8 LDR X0, [X0 + 0x828]
	0x03C85DFC BL 0x1C16CF4
	0x03C85E00 ADRP X0, 0x4DB000
	0x03C85E04 LDR X0, [X0 + 0x830]
	0x03C85E08 BL 0x1C16CF4
	0x03C85E0C ADRP X0, 0x4DB000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2688]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51810304
	010 Add X0, X0, 1047
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2688], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void get_mouseScrollDelta_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C85E54 LDR W8, [X0 + 0xE0]
	0x03C85E58 CBNZ W8, 0x3C85E64
	0x03C85E5C BL 0x1C16DFC
	0x03C85E60 LDR X0, [X22]
	0x03C85E64 LDR X8, [X0 + 0xB8]
	0x03C85E68 LDR X9, [X8 + 0x10]
	0x03C85E6C CBZ X9, 0x3C861A0
	0x03C85E70 LDR W8, [X9 + 0x18]
	0x03C85E74 CMP W8, W21
	0x03C85E78 B.LS 0x3C861A4
	0x03C85E7C SXTW X8, W21
	0x03C85E80 ADD X9, X9, X8, 0x4, LSL
	0x03C85E84 STP X20, X19, [X9 + 0x20]
	0x03C85E88 LDR X9, [X22]
	0x03C85E8C LDR X9, [X9 + 0xB8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2696]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51785728
	010 Add X0, X0, 641
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2696], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void get_compositionCursorPos_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C85F60 CBZ X8, 0x3C861A0
	0x03C85F64 LDR W9, [X8 + 0x18]
	0x03C85F68 CMP W9, W21
	0x03C85F6C B.LS 0x3C861A4
	0x03C85F70 MOV W9, W21
	0x03C85F74 SXTW X23, W9
	0x03C85F78 ADD X8, X8, X23, 0x4, LSL
	0x03C85F7C LDP X2, X3, [X8 + 0x20]
	0x03C85F80 MOV X0, X20
	0x03C85F84 MOV X1, X19
	0x03C85F88 BL 0x3C8626C
	0x03C85F8C TBZ X0, 0x0, 0x3C85FA4
	0x03C85F90 MOV X0, X20
	0x03C85F94 MOV X1, X19
	0x03C85F98 BL 0x3C861A8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2704]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51941376
	010 Add X0, X0, 2407
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2704], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_compositionCursorPos_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C85FDC TBZ X0, 0x0, 0x3C86024
	0x03C85FE0 LDR X0, [X22]
	0x03C85FE4 LDR W8, [X0 + 0xE0]
	0x03C85FE8 CBNZ W8, 0x3C85FF4
	0x03C85FEC BL 0x1C16DFC
	0x03C85FF0 LDR X0, [X22]
	0x03C85FF4 LDR X8, [X0 + 0xB8]
	0x03C85FF8 LDR X8, [X8 + 0x8]
	0x03C85FFC CBZ X8, 0x3C861A0
	0x03C86000 LDR W9, [X8 + 0x18]
	0x03C86004 CMP W9, W21
	0x03C86008 B.LS 0x3C861A4
	0x03C8600C ADRP X9, 0x4DA000
	0x03C86010 LDR X9, [X9 + 0x818]
	0x03C86014 ADD X8, X8, X23, 0x4, LSL

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x762000
	005 Move X1, [X20+2712]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51974144
	010 Add X0, X0, 2442
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2712], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

