Type: Satori.Session

Method: System.String get_AuthToken()

Disassembly:
	0x035A9980 MOV X0, X8
	0x035A9984 MOV X2, X31

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_AuthToken(System.String value)

Disassembly:
	0x035A9988 BL 0x322BD98
	0x035A998C TBNZ X0, 0x1F, 0x35A99B0

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Int64 get_ExpireTime()

Disassembly:
	0x035A9990 MOV W1, W0
	0x035A9994 LDR X0, [X24]

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void set_ExpireTime(System.Int64 value)

Disassembly:
	0x035A9998 CBZ X0, 0x35AA4B8
	0x035A999C MOV X2, X31

ISIL:
	001 Move [X0+24], X1
	002 Return 

Method: System.Boolean get_IsExpired()

Disassembly:
	0x035A99A0 BL 0x3222A1C
	0x035A99A4 CBZ X20, 0x35AA4B8
	0x035A99A8 MOV W1, W0
	0x035A99AC B 0x35A9A34
	0x035A99B0 MOV X0, X19
	0x035A99B4 MOV W1, W22
	0x035A99B8 MOV X2, X31
	0x035A99BC BL 0x3222A1C
	0x035A99C0 AND W8, W0, 0xFFFF
	0x035A99C4 CMP W8, 0x75
	0x035A99C8 B.NE 0x35A9A18
	0x035A99CC LDR W8, [X19 + 0x10]
	0x035A99D0 ADD W22, W21, 0x5
	0x035A99D4 SUB W8, W8, 0x1
	0x035A99D8 CMP W22, W8
	0x035A99DC B.GE 0x35A9A18
	0x035A99E0 ADD W1, W21, 0x2
	0x035A99E4 MOVZ W2, 0x4
	0x035A99E8 MOV X0, X19
	0x035A99EC MOV X3, X31
	0x035A99F0 BL 0x3228DE4
	0x035A99F4 ADD X3, X31, 0x2C
	0x035A99F8 MOVZ W1, 0x200
	0x035A99FC MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE38000
	006 Move X21, 0xB4C000
	007 Move W8, [X20+40]
	008 Move X21, [X21+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB4C000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+40], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call DateTime.get_UtcNow
	026 Move X1, X0
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]

Method: System.Boolean get_IsRefreshExpired()

Disassembly:
	0x035A9AE4 LDR X8, [X8 + 0x140]
	0x035A9AE8 LDR W9, [X0 + 0xE0]
	0x035A9AEC LDR X21, [X8]
	0x035A9AF0 CBNZ W9, 0x35A9AF8
	0x035A9AF4 BL 0x1C16DFC
	0x035A9AF8 MOV X0, X21
	0x035A9AFC MOV X1, X31
	0x035A9B00 BL 0x338C698
	0x035A9B04 MOV X1, X0
	0x035A9B08 MOV X0, X20
	0x035A9B0C MOV X2, X31
	0x035A9B10 BL 0x3395194
	0x035A9B14 TBZ X0, 0x0, 0x35A9B88
	0x035A9B18 ADRP X8, 0xB4C000
	0x035A9B1C LDR X8, [X8 + 0xC48]
	0x035A9B20 LDR X0, [X8]
	0x035A9B24 LDR W8, [X0 + 0xE0]
	0x035A9B28 CBNZ W8, 0x35A9B30
	0x035A9B2C BL 0x1C16DFC
	0x035A9B30 MOV X0, X31
	0x035A9B34 BL 0x3338524
	0x035A9B38 ADRP X21, 0xB72000
	0x035A9B3C LDR X21, [X21 + 0x5F0]
	0x035A9B40 MOV X20, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0xE38000
	006 Move X21, 0xB4C000
	007 Move W8, [X20+41]
	008 Move X21, [X21+2544]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0xB4C000
	015 Move X0, [X0+2544]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+41], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X31
	025 Call DateTime.get_UtcNow
	026 Move X1, X0
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]

Method: System.Int64 get_RefreshExpireTime()

Disassembly:
	0x035A9C28 B 0x35A9C48
	0x035A9C2C MOV X21, X19

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_RefreshExpireTime(System.Int64 value)

Disassembly:
	0x035A9C30 B 0x35A9C4C
	0x035A9C34 CBZ X20, 0x35AA4B8

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.String get_RefreshToken()

Disassembly:
	0x035A9C38 LDR X8, [X20]
	0x035A9C3C MOV X0, X20

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_RefreshToken(System.String value)

Disassembly:
	0x035A9C40 LDP X9, X1, [X8 + 0x168]
	0x035A9C44 BLR X9

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: System.String get_IdentityId()

Disassembly:
	0x035A9C48 MOV X21, X0
	0x035A9C4C LDR X8, [X25 + 0x28]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_IdentityId(System.String value)

Disassembly:
	0x035A9C50 LDR X9, [X31 + 0x58]
	0x035A9C54 CMP X8, X9

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Boolean HasExpired(System.DateTime offset)

Disassembly:
	0x035A9A00 MOV X4, X31
	0x035A9A04 BL 0x339A164
	0x035A9A08 TBZ X0, 0x0, 0x35A9A18
	0x035A9A0C CBZ X20, 0x35AA4B8
	0x035A9A10 LDR W1, [X31 + 0x2C]
	0x035A9A14 B 0x35A9A34
	0x035A9A18 MOV X0, X19
	0x035A9A1C MOV W1, W21
	0x035A9A20 MOV X2, X31
	0x035A9A24 BL 0x3222A1C
	0x035A9A28 CBZ X20, 0x35AA4B8
	0x035A9A2C MOV W1, W0
	0x035A9A30 MOV W22, W21
	0x035A9A34 MOV X0, X20
	0x035A9A38 MOV X2, X31
	0x035A9A3C BL 0x3233D30
	0x035A9A40 LDR W8, [X19 + 0x10]
	0x035A9A44 ADD W21, W22, 0x1
	0x035A9A48 SUB W8, W8, 0x1
	0x035A9A4C CMP W21, W8
	0x035A9A50 B.LT 0x35A9934
	0x035A9A54 B 0x35A9C38
	0x035A9A58 CBZ X20, 0x35AA4B8
	0x035A9A5C MOV X0, X20
	0x035A9A60 MOV X1, X31
	0x035A9A64 BL 0x3397374
	0x035A9A68 TBZ X0, 0x0, 0x35A9ADC
	0x035A9A6C ADRP X8, 0xB4C000
	0x035A9A70 LDR X8, [X8 + 0xC48]
	0x035A9A74 LDR X0, [X8]
	0x035A9A78 LDR W8, [X0 + 0xE0]
	0x035A9A7C CBNZ W8, 0x35A9A84
	0x035A9A80 BL 0x1C16DFC
	0x035A9A84 MOV X0, X31
	0x035A9A88 BL 0x3338524
	0x035A9A8C ADRP X8, 0xB53000
	0x035A9A90 LDR X8, [X8 + 0x9E8]
	0x035A9A94 MOV X21, X0
	0x035A9A98 LDR X8, [X8]
	0x035A9A9C LDR W9, [X8 + 0xE0]
	0x035A9AA0 CBNZ W9, 0x35A9AAC
	0x035A9AA4 MOV X0, X8
	0x035A9AA8 BL 0x1C16DFC
	0x035A9AAC MOV X0, X19
	0x035A9AB0 MOV X1, X20
	0x035A9AB4 MOV X2, X21
	0x035A9AB8 MOV X3, X31
	0x035A9ABC BL 0x331D2EC
	0x035A9AC0 B 0x35A9C48
	0x035A9AC4 ADRP X8, 0xB4C000
	0x035A9AC8 LDR X8, [X8 + 0x278]
	0x035A9ACC LDR X8, [X8]
	0x035A9AD0 LDR X8, [X8 + 0xB8]
	0x035A9AD4 LDR X21, [X8]
	0x035A9AD8 B 0x35A9C4C
	0x035A9ADC ADRP X8, 0xB7C000
	0x035A9AE0 LDR X0, [X24]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xE38000
	007 Move X21, 0xB8F000
	008 Move W8, [X22+42]
	009 Move X21, [X21+872]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xB4C000
	017 Move X0, [X0+2544]
	018 Call 0x1C17CF4
	019 Move X0, 0xB8F000
	020 Move X0, [X0+872]
	021 Call 0x1C17CF4
	022 Move X0, 0xB4D000
	023 Move X0, [X0+1392]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+42], W8
	027 Move X0, [X21]
	028 Move X22, 0xB4D000
	029 Move W8, [X0+224]
	030 Move X22, [X22+1392]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X21]
	035 Move X8, [X0+184]
	036 Move X0, [X22]
	037 Move X22, [X20+24]
	038 Move X20, 0xB4C000
	039 Move X21, [X8]
	040 Move W8, [X0+224]
	041 Move X20, [X20+2544]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 NotImplemented "Instruction SCVTF not yet implemented."
	046 Move X0, X31
	047 Call TimeSpan.FromSeconds, V0
	048 Move X8, [X20]
	049 Move X20, X0
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 Move X0, X21
	056 Move X1, X20
	057 Move X2, X31
	058 Call DateTime.op_Addition, X0, X1
	059 Move X1, X0
	060 Move X0, X19
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X2, X31
	066 Move X30, [X31+48]
	067 Call DateTime.op_GreaterThan, X0, X1
	068 Return X0

Method: System.Boolean HasRefreshExpired(System.DateTime offset)

Disassembly:
	0x035A9B44 LDR X8, [X21]
	0x035A9B48 LDR W9, [X8 + 0xE0]
	0x035A9B4C CBNZ W9, 0x35A9B58
	0x035A9B50 MOV X0, X8
	0x035A9B54 BL 0x1C16DFC
	0x035A9B58 ADD X3, X31, 0x48
	0x035A9B5C MOVZ W1, 0xA7
	0x035A9B60 MOV X0, X19
	0x035A9B64 MOV X2, X20
	0x035A9B68 MOV X4, X31
	0x035A9B6C BL 0x33D7998
	0x035A9B70 LDUR V0, [X31 + 0x48]
	0x035A9B74 LDR X0, [X21]
	0x035A9B78 STR V0, [X31 + 0x3]
	0x035A9B7C ADD X1, X31, 0x30
	0x035A9B80 BL 0x1C16E04
	0x035A9B84 B 0x35A9C48
	0x035A9B88 ADRP X8, 0xB4A000
	0x035A9B8C LDR X8, [X8 + 0x830]
	0x035A9B90 MOV X0, X19
	0x035A9B94 MOV X2, X31
	0x035A9B98 LDR X1, [X8]
	0x035A9B9C BL 0x321BA08
	0x035A9BA0 MOV X21, X31
	0x035A9BA4 TBNZ X0, 0x0, 0x35A9C4C
	0x035A9BA8 LDR X8, [X20]
	0x035A9BAC MOV X0, X20
	0x035A9BB0 LDR X9, [X8 + 0x588]
	0x035A9BB4 LDR X1, [X8 + 0x590]
	0x035A9BB8 BLR X9
	0x035A9BBC TBZ X0, 0x0, 0x35A9C7C
	0x035A9BC0 CBZ X19, 0x35AA4B8
	0x035A9BC4 MOV X0, X19
	0x035A9BC8 MOV W1, W31
	0x035A9BCC MOV X2, X31
	0x035A9BD0 BL 0x3222A1C
	0x035A9BD4 AND W8, W0, 0xFFFF
	0x035A9BD8 CMP W8, 0x22
	0x035A9BDC B.NE 0x35A9BFC
	0x035A9BE0 LDR W8, [X19 + 0x10]
	0x035A9BE4 MOVZ W1, 0x1
	0x035A9BE8 MOV X0, X19
	0x035A9BEC MOV X3, X31
	0x035A9BF0 SUB W2, W8, 0x2
	0x035A9BF4 BL 0x3228DE4
	0x035A9BF8 MOV X19, X0
	0x035A9BFC ADRP X8, 0xB4A000
	0x035A9C00 LDR X8, [X8 + 0xDF8]
	0x035A9C04 LDR X0, [X8]
	0x035A9C08 LDR W8, [X0 + 0xE0]
	0x035A9C0C CBNZ W8, 0x35A9C14
	0x035A9C10 BL 0x1C16DFC
	0x035A9C14 MOV X0, X20
	0x035A9C18 MOV X1, X19
	0x035A9C1C MOV W2, W31
	0x035A9C20 MOV X3, X31
	0x035A9C24 BL 0x33AF1B8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0xE38000
	007 Move X21, 0xB8F000
	008 Move W8, [X22+43]
	009 Move X21, [X21+872]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xB4C000
	017 Move X0, [X0+2544]
	018 Call 0x1C17CF4
	019 Move X0, 0xB8F000
	020 Move X0, [X0+872]
	021 Call 0x1C17CF4
	022 Move X0, 0xB4D000
	023 Move X0, [X0+1392]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X22+43], W8
	027 Move X0, [X21]
	028 Move X22, 0xB4D000
	029 Move W8, [X0+224]
	030 Move X22, [X22+1392]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X21]
	035 Move X8, [X0+184]
	036 Move X0, [X22]
	037 Move X22, [X20+32]
	038 Move X20, 0xB4C000
	039 Move X21, [X8]
	040 Move W8, [X0+224]
	041 Move X20, [X20+2544]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 NotImplemented "Instruction SCVTF not yet implemented."
	046 Move X0, X31
	047 Call TimeSpan.FromSeconds, V0
	048 Move X8, [X20]
	049 Move X20, X0
	050 Move W9, [X8+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {55}
	053 Move X0, X8
	054 Call 0x1C17DFC
	055 Move X0, X21
	056 Move X1, X20
	057 Move X2, X31
	058 Call DateTime.op_Addition, X0, X1
	059 Move X1, X0
	060 Move X0, X19
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X22, [X31+16]
	064 Move X21, [X31+24]
	065 Move X2, X31
	066 Move X30, [X31+48]
	067 Call DateTime.op_GreaterThan, X0, X1
	068 Return X0

Method: System.String ToString()

Disassembly:
	0x035A9C58 B.NE 0x35AA4D0
	0x035A9C5C MOV X0, X21
	0x035A9C60 LDP X20, X19, [X31 + 0xA0]
	0x035A9C64 LDP X22, X21, [X31 + 0x90]
	0x035A9C68 LDP X24, X23, [X31 + 0x80]
	0x035A9C6C LDP X26, X25, [X31 + 0x70]
	0x035A9C70 LDP X30, X27, [X31 + 0x60]
	0x035A9C74 ADD X31, X31, 0xB0
	0x035A9C78 RET
	0x035A9C7C MOV X0, X20
	0x035A9C80 MOV X1, X31
	0x035A9C84 BL 0x3396BF8
	0x035A9C88 LDR X8, [X20]
	0x035A9C8C TBZ X0, 0x0, 0x35A9D70
	0x035A9C90 LDR X9, [X8 + 0x428]
	0x035A9C94 LDR X1, [X8 + 0x430]
	0x035A9C98 MOV X0, X20
	0x035A9C9C BLR X9
	0x035A9CA0 CBZ X19, 0x35AA4B8
	0x035A9CA4 MOV X20, X0
	0x035A9CA8 MOV X0, X19
	0x035A9CAC MOV W1, W31
	0x035A9CB0 MOV X2, X31
	0x035A9CB4 BL 0x3222A1C
	0x035A9CB8 AND W8, W0, 0xFFFF
	0x035A9CBC CMP W8, 0x5B
	0x035A9CC0 MOV X21, X31
	0x035A9CC4 B.NE 0x35A9C4C
	0x035A9CC8 LDR W8, [X19 + 0x10]
	0x035A9CCC MOV X0, X19
	0x035A9CD0 MOV X2, X31
	0x035A9CD4 SUB W1, W8, 0x1
	0x035A9CD8 BL 0x3222A1C
	0x035A9CDC AND W8, W0, 0xFFFF
	0x035A9CE0 CMP W8, 0x5D
	0x035A9CE4 MOV X21, X31
	0x035A9CE8 B.NE 0x35A9C4C
	0x035A9CEC MOV X0, X19
	0x035A9CF0 BL 0x35A9274
	0x035A9CF4 CBZ X0, 0x35AA4B8
	0x035A9CF8 LDR W1, [X0 + 0x18]
	0x035A9CFC MOV X19, X0
	0x035A9D00 MOV X0, X20
	0x035A9D04 MOV X2, X31
	0x035A9D08 BL 0x33A2DF8
	0x035A9D0C LDR W8, [X19 + 0x18]
	0x035A9D10 MOV X21, X0
	0x035A9D14 CMP W8, 0x1
	0x035A9D18 B.LT 0x35AA360
	0x035A9D1C ADRP X23, 0xB72000
	0x035A9D20 LDR X23, [X23 + 0xB58]
	0x035A9D24 MOV W22, W31
	0x035A9D28 LDR X2, [X23]
	0x035A9D2C MOV X0, X19
	0x035A9D30 MOV W1, W22
	0x035A9D34 BL 0x301BCCC
	0x035A9D38 MOV X1, X0
	0x035A9D3C MOV X0, X20
	0x035A9D40 BL 0x35A963C
	0x035A9D44 CBZ X21, 0x35AA4B8
	0x035A9D48 MOV X1, X0
	0x035A9D4C MOV X0, X21
	0x035A9D50 MOV W2, W22
	0x035A9D54 MOV X3, X31
	0x035A9D58 BL 0x339F798
	0x035A9D5C LDR W8, [X19 + 0x18]
	0x035A9D60 ADD W22, W22, 0x1
	0x035A9D64 CMP W22, W8
	0x035A9D68 B.LT 0x35A9D28
	0x035A9D6C B 0x35AA360
	0x035A9D70 LDR X9, [X8 + 0x3C8]
	0x035A9D74 LDR X1, [X8 + 0x3D0]
	0x035A9D78 MOV X0, X20
	0x035A9D7C BLR X9
	0x035A9D80 TBZ X0, 0x0, 0x35A9F88
	0x035A9D84 LDR X8, [X20]
	0x035A9D88 MOV X0, X20
	0x035A9D8C LDR X9, [X8 + 0x448]
	0x035A9D90 LDR X1, [X8 + 0x450]
	0x035A9D94 BLR X9
	0x035A9D98 ADRP X9, 0xB73000
	0x035A9D9C LDR X8, [X24]
	0x035A9DA0 LDR X9, [X9 + 0x20]
	0x035A9DA4 MOV X21, X0
	0x035A9DA8 LDR W10, [X8 + 0xE0]
	0x035A9DAC LDR X22, [X9]
	0x035A9DB0 CBNZ W10, 0x35A9DBC
	0x035A9DB4 MOV X0, X8
	0x035A9DB8 BL 0x1C16DFC
	0x035A9DBC MOV X0, X22
	0x035A9DC0 MOV X1, X31
	0x035A9DC4 BL 0x338C698
	0x035A9DC8 MOV X1, X0
	0x035A9DCC MOV X0, X21
	0x035A9DD0 MOV X2, X31
	0x035A9DD4 BL 0x3395194
	0x035A9DD8 TBZ X0, 0x0, 0x35A9F88
	0x035A9DDC LDR X8, [X20]
	0x035A9DE0 MOV X0, X20
	0x035A9DE4 LDR X9, [X8 + 0x468]
	0x035A9DE8 LDR X1, [X8 + 0x470]
	0x035A9DEC BLR X9
	0x035A9DF0 CBZ X0, 0x35AA4B8
	0x035A9DF4 LDR W8, [X0 + 0x18]
	0x035A9DF8 CBZ W8, 0x35AA4BC
	0x035A9DFC CBZ X19, 0x35AA4B8
	0x035A9E00 LDR X22, [X0 + 0x20]
	0x035A9E04 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X19, 0xE38000
	008 Move X21, 0xB4B000
	009 Move W8, [X19+44]
	010 Move X21, [X21+2512]
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0xB4D000
	017 Move X0, [X0+2656]
	018 Call 0x1C17CF4
	019 Move X0, 0xB4B000
	020 Move X0, [X0+2512]
	021 Call 0x1C17CF4
	022 Move X0, 0xB8F000
	023 Move X0, [X0+1544]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X19+44], W8
	027 Move X0, [X21]
	028 Move W1, 5
	029 Call 0x1C17D6C
	030 Compare X0, 0
	031 JumpIfEqual {123}
	032 Move X21, [X20+16]
	033 Move X19, X0
	034 Compare X21, 0
	035 JumpIfEqual {42}
	036 Move X8, [X19]
	037 Move X0, X21
	038 Move X1, [X8+64]
	039 Call 0x1C17E00
	040 Compare X0, 0
	041 JumpIfEqual {120}
	042 Move W8, [X19+24]
	043 Compare W8, 0
	044 JumpIfEqual {119}
	045 Move X22, 0xB4D000
	046 Move X22, [X22+2656]
	047 Move [X19+32], X21
	048 Move X8, [X20+24]
	049 Add X1, X31, 24
	050 Move X0, [X22]
	051 Move [X31+24], X8
	052 Call 0x1C17E04
	053 Move X21, X0
	054 Compare X0, 0
	055 JumpIfEqual {62}
	056 Move X8, [X19]
	057 Move X0, X21
	058 Move X1, [X8+64]
	059 Call 0x1C17E00
	060 Compare X0, 0
	061 JumpIfEqual {120}
	062 Move W8, [X19+24]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move [X19+40], X21
	065 Move X21, [X20+40]
	066 Compare X21, 0
	067 JumpIfEqual {75}
	068 Move X8, [X19]
	069 Move X0, X21
	070 Move X1, [X8+64]
	071 Call 0x1C17E00
	072 Compare X0, 0
	073 JumpIfEqual {120}
	074 Move W8, [X19+24]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move [X19+48], X21
	077 Move X8, [X20+32]
	078 Move X0, [X22]
	079 Add X1, X31, 8
	080 Move [X31+8], X8
	081 Call 0x1C17E04
	082 Move X21, X0
	083 Compare X0, 0
	084 JumpIfEqual {91}
	085 Move X8, [X19]
	086 Move X0, X21
	087 Move X1, [X8+64]
	088 Call 0x1C17E00
	089 Compare X0, 0
	090 JumpIfEqual {120}
	091 Move W8, [X19+24]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move [X19+56], X21
	094 Move X20, [X20+48]
	095 Compare X20, 0
	096 JumpIfEqual {104}
	097 Move X8, [X19]
	098 Move X0, X20
	099 Move X1, [X8+64]
	100 Call 0x1C17E00
	101 Compare X0, 0
	102 JumpIfEqual {120}
	103 Move W8, [X19+24]
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Move X8, 0xB8F000
	106 Move X8, [X8+1544]
	107 Move [X19+64], X20
	108 Move X1, X19
	109 Move X2, X31
	110 Move X0, [X8]
	111 Call String.Format, X0, X1
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X30, [X31+16]
	117 Add X31, X31, 64
	118 Return X0
	119 Call 0x1C17F28
	120 Call 0x1C17F44
	121 Move X1, X31
	122 Call 0x1C17DEC
	123 Call 0x1C17F20

Method: System.Void .ctor(System.String authToken, System.String refreshToken)

Disassembly:
	0x035A11C0 LDR X0, [X23]
	0x035A11C4 LDR W8, [X0 + 0xE0]
	0x035A11C8 CBNZ W8, 0x35A11D0
	0x035A11CC BL 0x1C16DFC
	0x035A11D0 MOV X0, X19
	0x035A11D4 MOV X1, X31
	0x035A11D8 BL 0x32C4864
	0x035A11DC B 0x35A121C
	0x035A11E0 MOVZ W8, 0x1
	0x035A11E4 STR W8, [X19]
	0x035A11E8 LDR X8, [X31]
	0x035A11EC STR X8, [X19 + 0x50]
	0x035A11F0 LDR X0, [X23]
	0x035A11F4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, X1
	006 Move X1, X31
	007 Move X19, X2
	008 Move X21, X0
	009 Call Object..ctor, X0
	010 Move X1, X20
	011 Move X2, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move [X21+32], X31
	015 Move X0, X21
	016 Move X30, [X31+32]
	017 Move X21, [X31+40]
	018 Call Session.Update, X0, X1, X2
	019 Return 

Method: System.Void Update(System.String authToken, System.String refreshToken)

Disassembly:
	0x035A6AE0 ADRP X0, 0xB4D000
	0x035A6AE4 LDR X0, [X0 + 0xE00]
	0x035A6AE8 BL 0x1C16CF4
	0x035A6AEC ADRP X0, 0xB50000
	0x035A6AF0 LDR X0, [X0 + 0x260]
	0x035A6AF4 BL 0x1C16CF4
	0x035A6AF8 ADRP X0, 0xB4D000
	0x035A6AFC LDR X0, [X0 + 0xE18]
	0x035A6B00 BL 0x1C16CF4
	0x035A6B04 ADRP X0, 0xB50000
	0x035A6B08 LDR X0, [X0 + 0x268]
	0x035A6B0C BL 0x1C16CF4
	0x035A6B10 ADRP X0, 0xB50000
	0x035A6B14 LDR X0, [X0 + 0x270]
	0x035A6B18 BL 0x1C16CF4
	0x035A6B1C ADRP X0, 0xB50000
	0x035A6B20 LDR X0, [X0 + 0x278]
	0x035A6B24 BL 0x1C16CF4
	0x035A6B28 MOVZ W8, 0x1
	0x035A6B2C STRB W8, [X21 + 0x1C]
	0x035A6B30 MOV X0, X19
	0x035A6B34 MOV X1, X31
	0x035A6B38 BL 0x35F978C
	0x035A6B3C STR X20, [X19 + 0x28]
	0x035A6B40 CBZ X20, 0x35A6D68
	0x035A6B44 MOV X0, X20
	0x035A6B48 MOV X1, X31
	0x035A6B4C BL 0x35F6E80
	0x035A6B50 CBZ X0, 0x35A6D68
	0x035A6B54 ADRP X23, 0xB4D000
	0x035A6B58 LDR X23, [X23 + 0xE00]
	0x035A6B5C MOV X1, X31
	0x035A6B60 BL 0x35F6A98
	0x035A6B64 MOV X20, X0
	0x035A6B68 CBZ X0, 0x35A6D6C
	0x035A6B6C ADRP X24, 0xB4D000
	0x035A6B70 ADRP X25, 0xB50000
	0x035A6B74 LDR X24, [X24 + 0xE18]
	0x035A6B78 LDR X25, [X25 + 0x260]
	0x035A6B7C LDR X8, [X20]
	0x035A6B80 LDR X1, [X24]
	0x035A6B84 LDRH W9, [X8 + 0x12E]
	0x035A6B88 CBZ X9, 0x35A6BAC
	0x035A6B8C LDR X10, [X8 + 0xB0]
	0x035A6B90 ADD X10, X10, 0x8
	0x035A6B94 LDUR X11, [X10 - 0x8]
	0x035A6B98 CMP X11, X1
	0x035A6B9C B.EQ 0x35A6BBC
	0x035A6BA0 SUBS X9, X9, 0x1
	0x035A6BA4 ADD X10, X10, 0x10
	0x035A6BA8 B.NE 0x35A6B94
	0x035A6BAC MOV X0, X20
	0x035A6BB0 MOV W2, W31
	0x035A6BB4 BL 0x1C5C788
	0x035A6BB8 B 0x35A6BC8
	0x035A6BBC LDRSW X9, [X10]
	0x035A6BC0 ADD X8, X8, X9, 0x4, LSL
	0x035A6BC4 ADD X0, X8, 0x138
	0x035A6BC8 LDP X8, X1, [X0]
	0x035A6BCC MOV X0, X20
	0x035A6BD0 BLR X8
	0x035A6BD4 TBZ X0, 0x0, 0x35A6C5C
	0x035A6BD8 LDR X8, [X20]
	0x035A6BDC LDR X1, [X25]
	0x035A6BE0 LDRH W9, [X8 + 0x12E]
	0x035A6BE4 CBZ X9, 0x35A6C08
	0x035A6BE8 LDR X10, [X8 + 0xB0]
	0x035A6BEC ADD X10, X10, 0x8
	0x035A6BF0 LDUR X11, [X10 - 0x8]
	0x035A6BF4 CMP X11, X1
	0x035A6BF8 B.EQ 0x35A6C18
	0x035A6BFC SUBS X9, X9, 0x1
	0x035A6C00 ADD X10, X10, 0x10
	0x035A6C04 B.NE 0x35A6BF0
	0x035A6C08 MOV X0, X20
	0x035A6C0C MOV W2, W31
	0x035A6C10 BL 0x1C5C788
	0x035A6C14 B 0x35A6C24
	0x035A6C18 LDRSW X9, [X10]
	0x035A6C1C ADD X8, X8, X9, 0x4, LSL
	0x035A6C20 ADD X0, X8, 0x138
	0x035A6C24 LDP X8, X1, [X0]
	0x035A6C28 MOV X0, X20
	0x035A6C2C BLR X8
	0x035A6C30 MOV X21, X0
	0x035A6C34 MOV X22, X1
	0x035A6C38 MOV X0, X19
	0x035A6C3C MOV X1, X31
	0x035A6C40 BL 0x35F6E80
	0x035A6C44 CBZ X0, 0x35A6D64
	0x035A6C48 MOV X1, X21
	0x035A6C4C MOV X2, X22
	0x035A6C50 MOV X3, X31
	0x035A6C54 BL 0x35F6F44
	0x035A6C58 B 0x35A6B7C
	0x035A6C5C MOV X21, X31
	0x035A6C60 CBZ X20, 0x35A6CBC
	0x035A6C64 LDR X8, [X20]
	0x035A6C68 LDR X1, [X23]
	0x035A6C6C LDRH W9, [X8 + 0x12E]
	0x035A6C70 CBZ X9, 0x35A6C94
	0x035A6C74 LDR X10, [X8 + 0xB0]
	0x035A6C78 ADD X10, X10, 0x8
	0x035A6C7C LDUR X11, [X10 - 0x8]
	0x035A6C80 CMP X11, X1
	0x035A6C84 B.EQ 0x35A6CA4
	0x035A6C88 SUBS X9, X9, 0x1
	0x035A6C8C ADD X10, X10, 0x10
	0x035A6C90 B.NE 0x35A6C7C
	0x035A6C94 MOV X0, X20
	0x035A6C98 MOV W2, W31
	0x035A6C9C BL 0x1C5C788

ISIL:
	001 Move [X31-96], X30
	002 Move [X31+16], X28
	003 Move [X31+24], X27
	004 Move [X31+32], X26
	005 Move [X31+40], X25
	006 Move [X31+48], X24
	007 Move [X31+56], X23
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X22, 0xE3B000
	013 Move X23, 0xB92000
	014 Move W8, [X22+45]
	015 Move X23, [X23+872]
	016 Move X20, X2
	017 Move X21, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {43}
	023 Move X0, 0xB57000
	024 Move X0, [X0+2536]
	025 Call 0x1C17CF4
	026 Move X0, 0xB50000
	027 Move X0, [X0+616]
	028 Call 0x1C17CF4
	029 Move X0, 0xB92000
	030 Move X0, [X0+1408]
	031 Call 0x1C17CF4
	032 Move X0, 0xB92000
	033 Move X0, [X0+872]
	034 Call 0x1C17CF4
	035 Move X0, 0xB92000
	036 Move X0, [X0+1416]
	037 Call 0x1C17CF4
	038 Move X0, 0xB8B000
	039 Move X0, [X0+1176]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X22+45], W8
	043 Move [X19+16], X21
	044 Move [X19+40], X20
	045 Move X0, [X23]
	046 Move X24, 0xB92000
	047 Move W8, [X0+224]
	048 Move X24, [X24+1408]
	049 Compare W8, 0
	050 JumpIfNotEqual {52}
	051 Call 0x1C17DFC
	052 Move X0, X21
	053 Call Session.JwtUnpack, X0
	054 Move X1, [X24]
	055 Call 0x22119A8, X0
	056 Compare X0, 0
	057 JumpIfEqual {136}
	058 Move X26, 0xB8B000
	059 Move X27, 0xB50000
	060 Move X26, [X26+1176]
	061 Move X27, [X27+616]
	062 Move X25, 0xB57000
	063 Move X28, 0xB92000
	064 Move X1, [X26]
	065 Move X2, [X27]
	066 Move X25, [X25+2536]
	067 Move X28, [X28+1416]
	068 Move X21, X0
	069 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	070 Move X8, [X25]
	071 Move X22, X0
	072 Move W9, [X8+224]
	073 Compare W9, 0
	074 JumpIfNotEqual {77}
	075 Move X0, X8
	076 Call 0x1C17DFC
	077 Move X0, X22
	078 Move X1, X31
	079 Call Convert.ToInt64, X0
	080 Move [X19+24], X0
	081 Move X1, [X28]
	082 Move X2, [X27]
	083 Move X0, X21
	084 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	085 Compare X0, 0
	086 JumpIfEqual {136}
	087 Move X8, [X0]
	088 Move X9, [X8+360]
	089 Move X1, [X8+368]
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move [X19+48], X0
	092 Move X0, X20
	093 Move X1, X31
	094 Call String.IsNullOrEmpty, X0
	095 Move TEMP, X0
	096 And TEMP, TEMP, 1
	097 Compare TEMP, 1
	098 JumpIfEqual {124}
	099 Move X0, [X23]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X0, X20
	105 Call Session.JwtUnpack, X0
	106 Move X1, [X24]
	107 Call 0x22119A8, X0
	108 Compare X0, 0
	109 JumpIfEqual {136}
	110 Move X1, [X26]
	111 Move X2, [X27]
	112 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	113 Move X8, [X25]
	114 Move X20, X0
	115 Move W9, [X8+224]
	116 Compare W9, 0
	117 JumpIfNotEqual {120}
	118 Move X0, X8
	119 Call 0x1C17DFC
	120 Move X0, X20
	121 Move X1, X31
	122 Call Convert.ToInt64, X0
	123 Move [X19+32], X0
	124 Move X20, [X31+80]
	125 Move X19, [X31+88]
	126 Move X22, [X31+64]
	127 Move X21, [X31+72]
	128 Move X24, [X31+48]
	129 Move X23, [X31+56]
	130 Move X26, [X31+32]
	131 Move X25, [X31+40]
	132 Move X28, [X31+16]
	133 Move X27, [X31+24]
	134 Move X30, [X31+96]
	135 Return 
	136 Call 0x1C17F20

Method: Satori.ISession Restore(System.String authToken, System.String refreshToken = null)

Disassembly:
	0x035A9F84 BL 0x1C171E0
	0x035A9F88 LDR X8, [X20]
	0x035A9F8C MOV X0, X20
	0x035A9F90 LDR X9, [X8 + 0x3C8]
	0x035A9F94 LDR X1, [X8 + 0x3D0]
	0x035A9F98 BLR X9
	0x035A9F9C TBZ X0, 0x0, 0x35AA1F0
	0x035A9FA0 LDR X8, [X20]
	0x035A9FA4 MOV X0, X20
	0x035A9FA8 LDR X9, [X8 + 0x448]
	0x035A9FAC LDR X1, [X8 + 0x450]
	0x035A9FB0 BLR X9
	0x035A9FB4 ADRP X9, 0xB73000
	0x035A9FB8 LDR X8, [X24]
	0x035A9FBC LDR X9, [X9 + 0x388]
	0x035A9FC0 MOV X21, X0
	0x035A9FC4 LDR W10, [X8 + 0xE0]
	0x035A9FC8 LDR X22, [X9]
	0x035A9FCC CBNZ W10, 0x35A9FD8
	0x035A9FD0 MOV X0, X8
	0x035A9FD4 BL 0x1C16DFC
	0x035A9FD8 MOV X0, X22
	0x035A9FDC MOV X1, X31
	0x035A9FE0 BL 0x338C698
	0x035A9FE4 MOV X1, X0
	0x035A9FE8 MOV X0, X21
	0x035A9FEC MOV X2, X31
	0x035A9FF0 BL 0x3395194
	0x035A9FF4 TBZ X0, 0x0, 0x35AA1F0
	0x035A9FF8 LDR X8, [X20]
	0x035A9FFC MOV X0, X20
	0x035AA000 LDR X9, [X8 + 0x468]
	0x035AA004 LDR X1, [X8 + 0x470]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0xE38000
	006 Move W8, [X21+46]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB8F000
	014 Move X0, [X0+872]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+46], W8
	018 Move X0, X20
	019 Move X1, X31
	020 Call String.IsNullOrEmpty, X0
	021 Move X21, X31
	022 Move TEMP, X0
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {38}
	026 Move X8, 0xB8F000
	027 Move X8, [X8+872]
	028 Move X0, [X8]
	029 Call 0x1C17F10
	030 Move X1, X31
	031 Move X21, X0
	032 Call Object..ctor, X0
	033 Move X0, X21
	034 Move X1, X20
	035 Move X2, X19
	036 Move [X21+32], X31
	037 Call Session.Update, X0, X1, X2
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X0, X21
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return X0

Method: System.String JwtUnpack(System.String jwt)

Disassembly:
	0x035A9E08 MOV W1, W31
	0x035A9E0C MOV X2, X31
	0x035A9E10 BL 0x3222A1C
	0x035A9E14 AND W8, W0, 0xFFFF
	0x035A9E18 CMP W8, 0x5B
	0x035A9E1C MOV X21, X31
	0x035A9E20 B.NE 0x35A9C4C
	0x035A9E24 LDR W8, [X19 + 0x10]
	0x035A9E28 MOV X0, X19
	0x035A9E2C MOV X2, X31
	0x035A9E30 SUB W1, W8, 0x1
	0x035A9E34 BL 0x3222A1C
	0x035A9E38 AND W8, W0, 0xFFFF
	0x035A9E3C CMP W8, 0x5D
	0x035A9E40 MOV X21, X31
	0x035A9E44 B.NE 0x35A9C4C
	0x035A9E48 MOV X0, X19
	0x035A9E4C BL 0x35A9274
	0x035A9E50 ADRP X8, 0xB52000
	0x035A9E54 LDR X8, [X8 + 0xC60]
	0x035A9E58 MOV X19, X0
	0x035A9E5C MOVZ W1, 0x1
	0x035A9E60 LDR X8, [X8]
	0x035A9E64 MOV X0, X8
	0x035A9E68 BL 0x1C16D6C
	0x035A9E6C ADRP X9, 0xB71000
	0x035A9E70 LDR X8, [X24]
	0x035A9E74 LDR X9, [X9 + 0xD80]
	0x035A9E78 MOV X21, X0
	0x035A9E7C LDR W10, [X8 + 0xE0]
	0x035A9E80 LDR X23, [X9]
	0x035A9E84 CBNZ W10, 0x35A9E90
	0x035A9E88 MOV X0, X8
	0x035A9E8C BL 0x1C16DFC
	0x035A9E90 MOV X0, X23
	0x035A9E94 MOV X1, X31
	0x035A9E98 BL 0x338C698
	0x035A9E9C CBZ X21, 0x35AA4B8
	0x035A9EA0 MOV X23, X0
	0x035A9EA4 CBZ X0, 0x35A9EBC
	0x035A9EA8 LDR X8, [X21]
	0x035A9EAC MOV X0, X23
	0x035A9EB0 LDR X1, [X8 + 0x40]
	0x035A9EB4 BL 0x1C16E00
	0x035A9EB8 CBZ X0, 0x35AA4C4
	0x035A9EBC LDR W8, [X21 + 0x18]
	0x035A9EC0 CBZ W8, 0x35AA4BC
	0x035A9EC4 MOV X0, X20
	0x035A9EC8 MOV X1, X21
	0x035A9ECC MOV X2, X31
	0x035A9ED0 STR X23, [X21 + 0x20]
	0x035A9ED4 BL 0x3397418
	0x035A9ED8 ADRP X8, 0xB4A000
	0x035A9EDC LDR X8, [X8 + 0x9D0]
	0x035A9EE0 MOV X20, X0
	0x035A9EE4 MOVZ W1, 0x1
	0x035A9EE8 LDR X8, [X8]
	0x035A9EEC MOV X0, X8
	0x035A9EF0 BL 0x1C16D6C
	0x035A9EF4 CBZ X19, 0x35AA4B8
	0x035A9EF8 ADRP X9, 0xB4A000
	0x035A9EFC LDR W8, [X19 + 0x18]
	0x035A9F00 LDR X9, [X9 + 0x758]
	0x035A9F04 MOV X21, X0
	0x035A9F08 ADD X1, X31, 0xC
	0x035A9F0C STR W8, [X31 + 0xC]
	0x035A9F10 LDR X0, [X9]
	0x035A9F14 BL 0x1C16E04
	0x035A9F18 CBZ X21, 0x35AA4B8
	0x035A9F1C MOV X23, X0
	0x035A9F20 CBZ X0, 0x35A9F38
	0x035A9F24 LDR X8, [X21]
	0x035A9F28 MOV X0, X23
	0x035A9F2C LDR X1, [X8 + 0x40]
	0x035A9F30 BL 0x1C16E00
	0x035A9F34 CBZ X0, 0x35AA4C4
	0x035A9F38 LDR W8, [X21 + 0x18]
	0x035A9F3C CBZ W8, 0x35AA4BC
	0x035A9F40 STR X23, [X21 + 0x20]
	0x035A9F44 CBZ X20, 0x35AA4B8
	0x035A9F48 MOV X0, X20
	0x035A9F4C MOV X1, X21
	0x035A9F50 MOV X2, X31
	0x035A9F54 BL 0x32CC7E8
	0x035A9F58 ADRP X24, 0xB51000
	0x035A9F5C LDR X24, [X24 + 0x2F8]
	0x035A9F60 CBZ X0, 0x35AA290
	0x035A9F64 LDR X23, [X24]
	0x035A9F68 MOV X20, X0
	0x035A9F6C MOV X1, X23
	0x035A9F70 BL 0x1C16E00
	0x035A9F74 MOV X21, X0
	0x035A9F78 CBNZ X0, 0x35AA294
	0x035A9F7C MOV X0, X20
	0x035A9F80 MOV X1, X23

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0xE38000
	007 Move X21, 0xB54000
	008 Move W8, [X20+47]
	009 Move X21, [X21+2264]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0xB54000
	016 Move X0, [X0+2264]
	017 Call 0x1C17CF4
	018 Move X0, 0xB54000
	019 Move X0, [X0+2536]
	020 Call 0x1C17CF4
	021 Move X0, 0xB4B000
	022 Move X0, [X0+1448]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+47], W8
	026 Move X0, [X21]
	027 Move W1, 1
	028 Call 0x1C17D6C
	029 Compare X0, 0
	030 JumpIfEqual {110}
	031 Move W8, [X0+24]
	032 Move X1, X0
	033 Compare W8, 0
	034 JumpIfEqual {111}
	035 Move W8, 46
	036 NotImplemented "Instruction STRH not yet implemented."
	037 Compare X19, 0
	038 JumpIfEqual {110}
	039 Move X0, X19
	040 Move X2, X31
	041 Call String.Split, X0, X1
	042 Compare X0, 0
	043 JumpIfEqual {110}
	044 Move W8, [X0+24]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move X19, [X0+40]
	047 Compare X19, 0
	048 JumpIfEqual {110}
	049 Move X8, 0xB4B000
	050 Move X8, [X8+1448]
	051 Move X21, 0xB54000
	052 Move W20, [X19+16]
	053 Move X0, [X8]
	054 Move W8, [X0+224]
	055 Move X21, [X21+2536]
	056 Compare W8, 0
	057 JumpIfNotEqual {59}
	058 Call 0x1C17DFC
	059 Move X0, [X21]
	060 NotImplemented "Instruction SCVTF not yet implemented."
	061 Move D1, 0.25
	062 Multiply D0, D0, D1
	063 Move W8, [X0+224]
	064 NotImplemented "Instruction FRINTP not yet implemented."
	065 Move D1, 4
	066 Multiply D8, D0, D1
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move V0, V8
	071 Move X0, X31
	072 Call Convert.ToInt32, V0
	073 Move W1, W0
	074 Move W2, 61
	075 Move X0, X19
	076 Move X3, X31
	077 Call String.PadRight, X0, X1, X2
	078 Compare X0, 0
	079 JumpIfEqual {110}
	080 Move W1, 45
	081 Move W2, 43
	082 Move X3, X31
	083 Call String.Replace, X0, X1, X2
	084 Compare X0, 0
	085 JumpIfEqual {110}
	086 Move W1, 95
	087 Move W2, 47
	088 Move X3, X31
	089 Call String.Replace, X0, X1, X2
	090 Move X20, X0
	091 Move X0, X31
	092 Call Encoding.get_UTF8
	093 Move X19, X0
	094 Move X0, X20
	095 Move X1, X31
	096 Call Convert.FromBase64String, X0
	097 Compare X19, 0
	098 JumpIfEqual {110}
	099 Move X8, [X19]
	100 Move X1, X0
	101 Move X0, X19
	102 Move X20, [X31+32]
	103 Move X19, [X31+40]
	104 Move X3, [X8+888]
	105 Move X2, [X8+896]
	106 Move X30, [X31+16]
	107 Move X21, [X31+24]
	108 Move V8, [X31+48]
	109 CallNoReturn X3
	110 Call 0x1C17F20
	111 Call 0x1C17F28

Method: System.Void .cctor()

Disassembly:
	0x035AA008 BLR X9
	0x035AA00C CBZ X0, 0x35AA4B8
	0x035AA010 LDR W8, [X0 + 0x18]
	0x035AA014 CBZ W8, 0x35AA4BC
	0x035AA018 CMP W8, 0x1
	0x035AA01C B.EQ 0x35AA4BC
	0x035AA020 LDR X8, [X24]
	0x035AA024 LDP X21, X22, [X0 + 0x20]
	0x035AA028 LDR X23, [X23]
	0x035AA02C LDR W9, [X8 + 0xE0]
	0x035AA030 CBNZ W9, 0x35AA03C
	0x035AA034 MOV X0, X8
	0x035AA038 BL 0x1C16DFC
	0x035AA03C MOV X0, X23
	0x035AA040 MOV X1, X31
	0x035AA044 BL 0x338C698
	0x035AA048 MOV X1, X0
	0x035AA04C MOV X0, X21
	0x035AA050 MOV X2, X31
	0x035AA054 BL 0x3395F0C
	0x035AA058 MOV X21, X31
	0x035AA05C TBNZ X0, 0x0, 0x35A9C4C
	0x035AA060 CBZ X19, 0x35AA4B8
	0x035AA064 MOV X0, X19
	0x035AA068 MOV W1, W31
	0x035AA06C MOV X2, X31
	0x035AA070 BL 0x3222A1C
	0x035AA074 AND W8, W0, 0xFFFF
	0x035AA078 CMP W8, 0x7B
	0x035AA07C MOV X21, X31
	0x035AA080 B.NE 0x35A9C4C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+32], X20
	004 Move [X31+40], X19
	005 Move X20, 0xE37000
	006 Move X19, 0xB8E000
	007 Move W8, [X20+48]
	008 Move X19, [X19+872]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0xB8E000
	014 Move X0, [X0+872]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X20+48], W8
	018 Add X0, X31, 24
	019 Move W1, 1970
	020 Move W2, 1
	021 Move W3, 1
	022 Move W7, 1
	023 Move W4, W31
	024 Move W5, W31
	025 Move W6, W31
	026 Move [X31+24], X31
	027 Move [X31], X31
	028 Call DateTime..ctor, X0, X1, X2, X3, X4, X5, X6, X7
	029 Move X8, [X19]
	030 Move X30, [X31+16]
	031 Move X9, [X31+24]
	032 Move X20, [X31+32]
	033 Move X19, [X31+40]
	034 Move X8, [X8+184]
	035 Move [X8], X9
	036 Add X31, X31, 48
	037 Return 

