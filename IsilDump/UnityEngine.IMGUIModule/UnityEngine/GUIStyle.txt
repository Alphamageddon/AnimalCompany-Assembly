Type: UnityEngine.GUIStyle

Method: System.String get_rawName()

Disassembly:
	0x03C74380 TBNZ X8, 0x0, 0x3C743B0
	0x03C74384 ADRP X0, 0x47F000
	0x03C74388 LDR X0, [X0 + 0xA28]
	0x03C7438C BL 0x1C16CF4
	0x03C74390 ADRP X0, 0x4A6000
	0x03C74394 LDR X0, [X0 + 0x890]
	0x03C74398 BL 0x1C16CF4
	0x03C7439C ADRP X0, 0x4EC000
	0x03C743A0 LDR X0, [X0 + 0x540]
	0x03C743A4 BL 0x1C16CF4
	0x03C743A8 MOVZ W8, 0x1
	0x03C743AC STRB W8, [X21 + 0x7E1]
	0x03C743B0 ADRP X21, 0x4A6000
	0x03C743B4 LDR X21, [X21 + 0x890]
	0x03C743B8 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1816]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51855360
	010 Add X0, X0, 2153
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1816], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_rawName(System.String value)

Disassembly:
	0x03C743BC MOV X1, X31
	0x03C743C0 BL 0x33BDD8C
	0x03C743C4 CBNZ X20, 0x3C743FC
	0x03C743C8 ADRP X8, 0x47F000
	0x03C743CC LDR X8, [X8 + 0xA28]
	0x03C743D0 LDR X0, [X8]
	0x03C743D4 LDR W8, [X0 + 0xE0]
	0x03C743D8 CBNZ W8, 0x3C743E0
	0x03C743DC BL 0x1C16DFC
	0x03C743E0 ADRP X8, 0x4EC000
	0x03C743E4 LDR X8, [X8 + 0x540]
	0x03C743E8 MOV X1, X31
	0x03C743EC LDR X0, [X8]
	0x03C743F0 BL 0x3C0649C
	0x03C743F4 BL 0x3C71888
	0x03C743F8 MOV X20, X0
	0x03C743FC LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+1824]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51830784
	012 Add X0, X0, 1498
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1824], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.Font get_font()

Disassembly:
	0x03C6BBF0 ADRP X20, 0x4B4000
	0x03C6BBF4 LDRB W8, [X19 + 0x5D9]
	0x03C6BBF8 LDR X20, [X20 + 0x5C8]
	0x03C6BBFC TBNZ X8, 0x0, 0x3C6BC14
	0x03C6BC00 ADRP X0, 0x4B4000
	0x03C6BC04 LDR X0, [X0 + 0x5C8]
	0x03C6BC08 BL 0x1C16CF4
	0x03C6BC0C MOVZ W8, 0x1
	0x03C6BC10 STRB W8, [X19 + 0x5D9]
	0x03C6BC14 LDR X0, [X20]
	0x03C6BC18 LDR W8, [X0 + 0xE0]
	0x03C6BC1C CBNZ W8, 0x3C6BC24
	0x03C6BC20 BL 0x1C16DFC
	0x03C6BC24 BL 0x3C67304
	0x03C6BC28 ADRP X19, 0x77B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77C000
	005 Move X1, [X20+1832]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51785728
	010 Add X0, X0, 2374
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1832], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.ImagePosition get_imagePosition()

Disassembly:
	0x03C74400 LDR W8, [X0 + 0xE0]
	0x03C74404 CBNZ W8, 0x3C7440C
	0x03C74408 BL 0x1C16DFC
	0x03C7440C ADRP X21, 0x772000
	0x03C74410 LDR X8, [X21 + 0x788]
	0x03C74414 CBNZ X8, 0x3C7442C
	0x03C74418 ADRP X0, 0xFFFFFFFFFCEAF000
	0x03C7441C ADD X0, X0, 0x672
	0x03C74420 BL 0x1C16CB8
	0x03C74424 MOV X8, X0
	0x03C74428 STR X0, [X21 + 0x788]
	0x03C7442C MOV X0, X19
	0x03C74430 MOV X1, X20
	0x03C74434 BLR X8
	0x03C74438 STR X0, [X19 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1840]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51871744
	010 Add X0, X0, 2231
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1840], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_alignment(UnityEngine.TextAnchor value)

Disassembly:
	0x03C7443C LDP X20, X19, [X31 + 0x10]
	0x03C74440 LDP X30, X21, [X31], #0x20
	0x03C74444 RET
	0x03C74448 STP X30, X21, [X31 - 0x20]!
	0x03C7444C STP X20, X19, [X31 + 0x10]
	0x03C74450 ADRP X20, 0x772000
	0x03C74454 LDRB W8, [X20 + 0x7E2]
	0x03C74458 MOV X19, X0
	0x03C7445C TBNZ X8, 0x0, 0x3C74474
	0x03C74460 ADRP X0, 0x4A6000
	0x03C74464 LDR X0, [X0 + 0x890]
	0x03C74468 BL 0x1C16CF4
	0x03C7446C MOVZ W8, 0x1
	0x03C74470 STRB W8, [X20 + 0x7E2]
	0x03C74474 LDR X0, [X19 + 0x10]
	0x03C74478 MOV X1, X31
	0x03C7447C MOV X2, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+1848]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51822592
	012 Add X0, X0, 2407
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1848], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean get_wordWrap()

Disassembly:
	0x03C74480 BL 0x33C5D2C
	0x03C74484 TBZ X0, 0x0, 0x3C744D0
	0x03C74488 ADRP X8, 0x4A6000
	0x03C7448C LDR X8, [X8 + 0x890]
	0x03C74490 LDR X20, [X19 + 0x10]
	0x03C74494 LDR X0, [X8]
	0x03C74498 LDR W8, [X0 + 0xE0]
	0x03C7449C CBNZ W8, 0x3C744A4
	0x03C744A0 BL 0x1C16DFC
	0x03C744A4 ADRP X21, 0x772000
	0x03C744A8 LDR X8, [X21 + 0x790]
	0x03C744AC CBNZ X8, 0x3C744C4
	0x03C744B0 ADRP X0, 0xFFFFFFFFFCE7D000
	0x03C744B4 ADD X0, X0, 0x5EF
	0x03C744B8 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1856]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51699712
	010 Add X0, X0, 1157
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1856], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Vector2 get_contentOffset()

Disassembly:
	0x03C744BC MOV X8, X0
	0x03C744C0 STR X0, [X21 + 0x790]
	0x03C744C4 MOV X0, X20
	0x03C744C8 BLR X8
	0x03C744CC STR X31, [X19 + 0x10]
	0x03C744D0 MOV X0, X19
	0x03C744D4 LDP X20, X19, [X31 + 0x10]
	0x03C744D8 MOV X1, X31
	0x03C744DC LDP X30, X21, [X31], #0x20
	0x03C744E0 B 0x33CB4DC
	0x03C744E4 B 0x3C744E8
	0x03C744E8 MOV X21, X0
	0x03C744EC CMP W1, 0x1
	0x03C744F0 B.NE 0x3C74520
	0x03C744F4 MOV X0, X21
	0x03C744F8 BL 0x3EB1AD0
	0x03C744FC LDR X20, [X0]
	0x03C74500 BL 0x3EB1AE0
	0x03C74504 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X8, [X20+2032]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51814400
	011 Add X0, X0, 2484
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+2032], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_contentOffset(UnityEngine.Vector2 value)

Disassembly:
	0x03C7454C MOV X0, X20
	0x03C74550 BL 0x1C16F18
	0x03C74554 BL 0x1990590
	0x03C74558 STR X30, [X31 - 0x20]!
	0x03C7455C STP X20, X19, [X31 + 0x10]
	0x03C74560 MOV X19, X0
	0x03C74564 LDR X0, [X0 + 0x20]
	0x03C74568 CBNZ X0, 0x3C745A8
	0x03C7456C ADRP X20, 0x772000
	0x03C74570 LDR X8, [X20 + 0x798]
	0x03C74574 CBNZ X8, 0x3C7458C
	0x03C74578 ADRP X0, 0xFFFFFFFFFCE7D000
	0x03C7457C ADD X0, X0, 0x625
	0x03C74580 BL 0x1C16CB8
	0x03C74584 MOV X8, X0
	0x03C74588 STR X0, [X20 + 0x798]
	0x03C7458C MOVZ W1, 0x1
	0x03C74590 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X8, [X20+2040]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51699712
	012 Add X0, X0, 1261
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+2040], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: System.Single get_fixedWidth()

Disassembly:
	0x03C745D8 ADD X0, X0, 0x625
	0x03C745DC BL 0x1C16CB8
	0x03C745E0 MOV X8, X0
	0x03C745E4 STR X0, [X20 + 0x798]
	0x03C745E8 MOVZ W1, 0x2
	0x03C745EC MOV X0, X19
	0x03C745F0 BLR X8
	0x03C745F4 MOV X1, X0
	0x03C745F8 MOV X0, X19
	0x03C745FC BL 0x3C73254
	0x03C74600 STR X0, [X19 + 0x28]
	0x03C74604 LDP X20, X19, [X31 + 0x10]
	0x03C74608 LDR X30, [X31], #0x20
	0x03C7460C RET
	0x03C74610 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1864]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51732480
	010 Add X0, X0, 1535
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1864], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single get_fixedHeight()

Disassembly:
	0x03C74614 STP X20, X19, [X31 + 0x10]
	0x03C74618 CBZ X1, 0x3C7465C
	0x03C7461C ADRP X21, 0x772000
	0x03C74620 LDR X3, [X21 + 0x7A8]
	0x03C74624 LDR X20, [X1 + 0x10]
	0x03C74628 MOV X19, X0
	0x03C7462C CBNZ X3, 0x3C74644
	0x03C74630 ADRP X0, 0xFFFFFFFFFCEB1000
	0x03C74634 ADD X0, X0, 0x4AA
	0x03C74638 BL 0x1C16CB8
	0x03C7463C MOV X3, X0
	0x03C74640 STR X0, [X21 + 0x7A8]
	0x03C74644 MOV X0, X19
	0x03C74648 MOV X2, X20
	0x03C7464C LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1872]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51822592
	010 Add X0, X0, 2467
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1872], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_stretchWidth()

Disassembly:
	0x03C74650 MOV W1, W31
	0x03C74654 LDP X30, X21, [X31], #0x20
	0x03C74658 BR X3
	0x03C7465C BL 0x1C16F20
	0x03C74660 STP X30, X21, [X31 - 0x20]!
	0x03C74664 STP X20, X19, [X31 + 0x10]
	0x03C74668 ADRP X20, 0x772000
	0x03C7466C LDRB W8, [X20 + 0x7E3]
	0x03C74670 MOV X19, X0
	0x03C74674 TBNZ X8, 0x0, 0x3C7468C
	0x03C74678 ADRP X0, 0x4A6000
	0x03C7467C LDR X0, [X0 + 0x4C8]
	0x03C74680 BL 0x1C16CF4
	0x03C74684 MOVZ W8, 0x1
	0x03C74688 STRB W8, [X20 + 0x7E3]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1880]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51769344
	010 Add X0, X0, 4006
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1880], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_stretchHeight()

Disassembly:
	0x03C7468C LDR X20, [X19 + 0x68]
	0x03C74690 CBNZ X20, 0x3C746F0
	0x03C74694 ADRP X20, 0x772000
	0x03C74698 LDR X8, [X20 + 0x7A0]
	0x03C7469C CBNZ X8, 0x3C746B4
	0x03C746A0 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C746A4 ADD X0, X0, 0x7DA
	0x03C746A8 BL 0x1C16CB8
	0x03C746AC MOV X8, X0
	0x03C746B0 STR X0, [X20 + 0x7A0]
	0x03C746B4 MOVZ W1, 0x1
	0x03C746B8 MOV X0, X19
	0x03C746BC BLR X8
	0x03C746C0 ADRP X8, 0x4A6000
	0x03C746C4 LDR X8, [X8 + 0x4C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1888]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51769344
	010 Add X0, X0, 4047
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1888], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_stretchHeight(System.Boolean value)

Disassembly:
	0x03C73960 LDP X22, X21, [X31 + 0x10]
	0x03C73964 LDR X30, [X31], #0x30
	0x03C73968 BR X3
	0x03C7396C STR X30, [X31 - 0x20]!
	0x03C73970 STP X20, X19, [X31 + 0x10]
	0x03C73974 ADRP X20, 0x773000
	0x03C73978 LDR X1, [X20 + 0x7B0]
	0x03C7397C MOV X19, X0
	0x03C73980 CBNZ X1, 0x3C73998
	0x03C73984 ADRP X0, 0xFFFFFFFFFCEB0000
	0x03C73988 ADD X0, X0, 0x6C1
	0x03C7398C BL 0x1C16CB8
	0x03C73990 MOV X1, X0
	0x03C73994 STR X0, [X20 + 0x7B0]
	0x03C73998 MOV X0, X19
	0x03C7399C LDP X20, X19, [X31 + 0x10]
	0x03C739A0 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x774000
	006 Move X2, [X21+1896]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51826688
	012 Add X0, X0, 1547
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1896], X0
	016 And W1, W19, 1
	017 Move X0, X20
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_fontSize()

Disassembly:
	0x03C746C8 MOV X21, X0
	0x03C746CC LDR X8, [X8]
	0x03C746D0 MOV X0, X8
	0x03C746D4 BL 0x1C16F10
	0x03C746D8 MOV X1, X19
	0x03C746DC MOV X2, X21
	0x03C746E0 MOV X3, X31
	0x03C746E4 MOV X20, X0
	0x03C746E8 BL 0x3C0C2B4
	0x03C746EC STR X20, [X19 + 0x68]
	0x03C746F0 MOV X0, X20
	0x03C746F4 LDP X20, X19, [X31 + 0x10]
	0x03C746F8 LDP X30, X21, [X31], #0x20
	0x03C746FC RET
	0x03C74700 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1904]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51806208
	010 Add X0, X0, 2231
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1904], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_fontSize(System.Int32 value)

Disassembly:
	0x03C74704 STP X20, X19, [X31 + 0x10]
	0x03C74708 CBZ X1, 0x3C7474C
	0x03C7470C ADRP X21, 0x772000
	0x03C74710 LDR X3, [X21 + 0x7A8]
	0x03C74714 LDR X20, [X1 + 0x10]
	0x03C74718 MOV X19, X0
	0x03C7471C CBNZ X3, 0x3C74734
	0x03C74720 ADRP X0, 0xFFFFFFFFFCEB1000
	0x03C74724 ADD X0, X0, 0x4AA
	0x03C74728 BL 0x1C16CB8
	0x03C7472C MOV X3, X0
	0x03C74730 STR X0, [X21 + 0x7A8]
	0x03C74734 MOV X0, X19
	0x03C74738 MOV X2, X20
	0x03C7473C LDP X20, X19, [X31 + 0x10]
	0x03C74740 MOVZ W1, 0x1
	0x03C74744 LDP X30, X21, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+1912]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51757056
	012 Add X0, X0, 224
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1912], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_Internal_clipOffset(UnityEngine.Vector2 value)

Disassembly:
	0x03C74748 BR X3
	0x03C7474C BL 0x1C16F20
	0x03C74750 STP X30, X21, [X31 - 0x20]!
	0x03C74754 STP X20, X19, [X31 + 0x10]
	0x03C74758 ADRP X20, 0x772000
	0x03C7475C LDRB W8, [X20 + 0x7E4]
	0x03C74760 MOV X19, X0
	0x03C74764 TBNZ X8, 0x0, 0x3C7477C
	0x03C74768 ADRP X0, 0x4A6000
	0x03C7476C LDR X0, [X0 + 0x4C8]
	0x03C74770 BL 0x1C16CF4
	0x03C74774 MOVZ W8, 0x1
	0x03C74778 STRB W8, [X20 + 0x7E4]
	0x03C7477C LDR X20, [X19 + 0x60]
	0x03C74780 CBNZ X20, 0x3C747E0
	0x03C74784 ADRP X20, 0x772000
	0x03C74788 LDR X8, [X20 + 0x7A0]
	0x03C7478C CBNZ X8, 0x3C747A4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X8, [X20+2048]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51707904
	012 Add X0, X0, 1789
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+2048], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: System.IntPtr Internal_Create(UnityEngine.GUIStyle self)

Disassembly:
	0x03C747D4 MOV X20, X0
	0x03C747D8 BL 0x3C0C2B4
	0x03C747DC STR X20, [X19 + 0x60]
	0x03C747E0 MOV X0, X20
	0x03C747E4 LDP X20, X19, [X31 + 0x10]
	0x03C747E8 LDP X30, X21, [X31], #0x20
	0x03C747EC RET
	0x03C747F0 STP X30, X21, [X31 - 0x20]!
	0x03C747F4 STP X20, X19, [X31 + 0x10]
	0x03C747F8 CBZ X1, 0x3C7483C
	0x03C747FC ADRP X21, 0x772000
	0x03C74800 LDR X3, [X21 + 0x7A8]
	0x03C74804 LDR X20, [X1 + 0x10]
	0x03C74808 MOV X19, X0
	0x03C7480C CBNZ X3, 0x3C74824

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1920]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51789824
	010 Add X0, X0, 2419
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1920], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr Internal_Copy(UnityEngine.GUIStyle self, UnityEngine.GUIStyle other)

Disassembly:
	0x03C74810 ADRP X0, 0xFFFFFFFFFCEB1000
	0x03C74814 ADD X0, X0, 0x4AA
	0x03C74818 BL 0x1C16CB8
	0x03C7481C MOV X3, X0
	0x03C74820 STR X0, [X21 + 0x7A8]
	0x03C74824 MOV X0, X19
	0x03C74828 MOV X2, X20
	0x03C7482C LDP X20, X19, [X31 + 0x10]
	0x03C74830 MOVZ W1, 0x2
	0x03C74834 LDP X30, X21, [X31], #0x20
	0x03C74838 BR X3
	0x03C7483C BL 0x1C16F20
	0x03C74840 STR D8, [X31 - 0x30]!
	0x03C74844 STP X30, X21, [X31 + 0x10]
	0x03C74848 STP X20, X19, [X31 + 0x20]
	0x03C7484C ADRP X21, 0x772000
	0x03C74850 ADRP X20, 0x4A6000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+1928]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51707904
	012 Add X0, X0, 1650
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1928], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Internal_Destroy(System.IntPtr self)

Disassembly:
	0x03C74854 LDRB W8, [X21 + 0x7E5]
	0x03C74858 LDR X20, [X20 + 0x890]
	0x03C7485C MOV X19, X0
	0x03C74860 TBNZ X8, 0x0, 0x3C74878
	0x03C74864 ADRP X0, 0x4A6000
	0x03C74868 LDR X0, [X0 + 0x890]
	0x03C7486C BL 0x1C16CF4
	0x03C74870 MOVZ W8, 0x1
	0x03C74874 STRB W8, [X21 + 0x7E5]
	0x03C74878 LDR X0, [X20]
	0x03C7487C LDR X19, [X19 + 0x10]
	0x03C74880 LDR W8, [X0 + 0xE0]
	0x03C74884 CBNZ W8, 0x3C7488C
	0x03C74888 BL 0x1C16DFC
	0x03C7488C ADRP X20, 0x772000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1936]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51912704
	010 Add X0, X0, 1519
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1936], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr GetStyleStatePtr(System.Int32 idx)

Disassembly:
	0x03C74890 LDR X8, [X20 + 0x7B0]
	0x03C74894 CBNZ X8, 0x3C748AC
	0x03C74898 ADRP X0, 0xFFFFFFFFFCEAF000
	0x03C7489C ADD X0, X0, 0x6C1
	0x03C748A0 BL 0x1C16CB8
	0x03C748A4 MOV X8, X0
	0x03C748A8 STR X0, [X20 + 0x7B0]
	0x03C748AC MOV X0, X19
	0x03C748B0 BLR X8
	0x03C748B4 MOV V8.16B, V0.16B
	0x03C748B8 FCVT S0, S0
	0x03C748BC ADD X0, X31, 0x8
	0x03C748C0 BL 0x3EB1C00
	0x03C748C4 FCMP S8, 0x0
	0x03C748C8 B.GE 0x3C748E4
	0x03C748CC FMOV D1, -0.5
	0x03C748D0 FCMP D0, D1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+1944]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51912704
	012 Add X0, X0, 1573
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1944], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.IntPtr GetRectOffsetPtr(System.Int32 idx)

Disassembly:
	0x03C748D4 B.NE 0x3C74910
	0x03C748D8 LDR V0, [X31 + 0x8]
	0x03C748DC FMOV S1, -1
	0x03C748E0 B 0x3C748F8
	0x03C748E4 FMOV D1, 0.5
	0x03C748E8 FCMP D0, D1
	0x03C748EC B.NE 0x3C74920
	0x03C748F0 LDR V0, [X31 + 0x8]
	0x03C748F4 FMOV S1, 1
	0x03C748F8 FCVTZS X8, D0
	0x00000000 INVALID
	0x03C74900 FADD S1, S0, S1
	0x03C74904 ANDS X31, X8, 0x1
	0x03C74908 FCSEL S0, S0, S1, EQ
	0x03C7490C B 0x3C7492C
	0x03C74910 FMOV S0, -0.5
	0x03C74914 FADD S0, S8, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+1952]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51838976
	012 Add X0, X0, 2010
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1952], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void AssignRectOffset(System.Int32 idx, System.IntPtr srcRectOffset)

Disassembly:
	0x03C74918 FRINTP S0, S0
	0x03C7491C B 0x3C7492C
	0x03C74920 FMOV S0, 0.5
	0x03C74924 FADD S0, S8, S0
	0x03C74928 FRINTM S0, S0
	0x03C7492C LDP X20, X19, [X31 + 0x20]
	0x03C74930 LDP X30, X21, [X31 + 0x10]
	0x03C74934 LDR V8, [X31], #0x30
	0x03C74938 RET
	0x03C7493C ADDS W31, W2, 0x1
	0x03C74940 B.EQ 0x3C7494C
	0x03C74944 AND W3, W5, 0x1
	0x03C74948 B 0x3C73AB8
	0x03C7494C AND W2, W3, 0x1
	0x03C74950 AND W3, W4, 0x1
	0x03C74954 AND W4, W5, 0x1
	0x03C74958 AND W5, W6, 0x1
	0x03C7495C B 0x3C739A8
	0x03C74960 STP X30, X21, [X31 - 0x20]!
	0x03C74964 STP X20, X19, [X31 + 0x10]
	0x03C74968 ADRP X21, 0x772000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x773000
	007 Move X3, [X22+1960]
	008 Move X19, X2
	009 Move W20, W1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51699712
	014 Add X0, X0, 1194
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1960], X0
	018 Move X0, X21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Single Internal_GetLineHeight(System.IntPtr target)

Disassembly:
	0x03C7496C ADRP X20, 0x4AB000
	0x03C74970 LDRB W8, [X21 + 0x943]
	0x03C74974 LDR X20, [X20 + 0x5C8]
	0x03C74978 MOV W19, W0
	0x03C7497C TBNZ X8, 0x0, 0x3C74994
	0x03C74980 ADRP X0, 0x4AB000
	0x03C74984 LDR X0, [X0 + 0x5C8]
	0x03C74988 BL 0x1C16CF4
	0x03C7498C MOVZ W8, 0x1
	0x03C74990 STRB W8, [X21 + 0x943]
	0x03C74994 LDR X0, [X20]
	0x03C74998 LDR W8, [X0 + 0xE0]
	0x03C7499C CBNZ W8, 0x3C749A4
	0x03C749A0 BL 0x1C16DFC
	0x03C749A4 BL 0x3C6AA80

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x773000
	005 Move X1, [X20+1968]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51707904
	010 Add X0, X0, 1729
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1968], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_Draw(UnityEngine.Rect screenRect, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)

Disassembly:
	0x03C749A8 CMP W0, W19
	0x03C749AC B.NE 0x3C74A04
	0x03C749B0 LDR X0, [X20]
	0x03C749B4 LDR W8, [X0 + 0xE0]
	0x03C749B8 CBNZ W8, 0x3C749C4
	0x03C749BC BL 0x1C16DFC
	0x03C749C0 LDR X0, [X20]
	0x03C749C4 LDR X8, [X0 + 0xB8]
	0x03C749C8 LDR X8, [X8 + 0x58]
	0x03C749CC CBZ X8, 0x3C74A0C
	0x03C749D0 LDR W9, [X0 + 0xE0]
	0x03C749D4 CBNZ W9, 0x3C749EC
	0x03C749D8 BL 0x1C16DFC
	0x03C749DC LDR X8, [X20]
	0x03C749E0 LDR X8, [X8 + 0xB8]
	0x03C749E4 LDR X8, [X8 + 0x58]
	0x03C749E8 CBZ X8, 0x3C74A1C
	0x03C749EC LDR X2, [X8 + 0x18]
	0x03C749F0 LDR X0, [X8 + 0x40]
	0x03C749F4 LDR X1, [X8 + 0x28]
	0x03C749F8 LDP X20, X19, [X31 + 0x10]
	0x03C749FC LDP X30, X21, [X31], #0x20
	0x03C74A00 BR X2
	0x03C74A04 MOV W0, W31
	0x03C74A08 B 0x3C74A10
	0x03C74A0C MOVZ W0, 0x1
	0x03C74A10 LDP X20, X19, [X31 + 0x10]
	0x03C74A14 LDP X30, X21, [X31], #0x20
	0x03C74A18 RET
	0x03C74A1C BL 0x1C16F20
	0x03C74A20 STP D13, D12, [X31 - 0x60]!
	0x03C74A24 STP D11, D10, [X31 + 0x10]
	0x03C74A28 STP D9, D8, [X31 + 0x20]
	0x03C74A2C STP X30, X23, [X31 + 0x30]
	0x03C74A30 STP X22, X21, [X31 + 0x40]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+16], X30
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X25, 0x773000
	011 Move X8, [X25+2056]
	012 Move W20, W5
	013 Move W21, W4
	014 Move W22, W3
	015 Move W24, W2
	016 Move X19, X1
	017 Move X23, X0
	018 Move [X31], S0
	019 Move [X31+8], S1
	020 Move [X31+8], S2
	021 Move [X31+16], S3
	022 Compare X8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -51781632
	025 Add X0, X0, 1458
	026 Call 0x1C17CB8
	027 Move X8, X0
	028 Move [X25+2056], X0
	029 And W3, W24, 1
	030 And W4, W22, 1
	031 And W5, W21, 1
	032 And W6, W20, 1
	033 Add X1, X31, 0
	034 Move X0, X23
	035 Move X2, X19
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X20, [X31+64]
	038 Move X19, [X31+72]
	039 Move X22, [X31+48]
	040 Move X21, [X31+56]
	041 Move X24, [X31+32]
	042 Move X23, [X31+40]
	043 Move X30, [X31+16]
	044 Move X25, [X31+24]
	045 Add X31, X31, 80
	046 Return 

Method: System.Void Internal_Draw2(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Boolean on)

Disassembly:
	0x03C74AB8 ADRP X23, 0x772000
	0x03C74ABC LDR X8, [X23 + 0x4A8]
	0x03C74AC0 CBNZ X8, 0x3C74AD8
	0x03C74AC4 ADRP X0, 0xFFFFFFFFFCE7D000
	0x03C74AC8 ADD X0, X0, 0x566
	0x03C74ACC BL 0x1C16CB8
	0x03C74AD0 MOV X8, X0
	0x03C74AD4 STR X0, [X23 + 0x4A8]
	0x03C74AD8 MOV X0, X22
	0x03C74ADC BLR X8
	0x03C74AE0 CMP W0, 0x7
	0x03C74AE4 B.NE 0x3C74C18
	0x03C74AE8 ADRP X22, 0x4A6000
	0x03C74AEC LDR X22, [X22 + 0x4C0]
	0x03C74AF0 LDR X0, [X22]
	0x03C74AF4 LDR W8, [X0 + 0xE0]
	0x03C74AF8 CBNZ W8, 0x3C74B00
	0x03C74AFC BL 0x1C16DFC
	0x03C74B00 BL 0x3C6748C
	0x03C74B04 CBZ X0, 0x3C74C34
	0x03C74B08 LDR X8, [X0 + 0xE0]
	0x03C74B0C CBZ X8, 0x3C74C34
	0x03C74B10 LDR V12, [X8 + 0x24]
	0x03C74B14 FCMP S12, 0x0
	0x03C74B18 B.GE 0x3C74B40
	0x03C74B1C ADRP X23, 0x772000
	0x03C74B20 LDR X0, [X23 + 0x6C8]
	0x03C74B24 CBNZ X0, 0x3C74B38
	0x03C74B28 ADRP X0, 0xFFFFFFFFFCEB6000

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x773000
	009 Move X8, [X23+2064]
	010 Move W21, W3
	011 Move W19, W2
	012 Move X20, X1
	013 Move X22, X0
	014 Move [X31], S0
	015 Move [X31+8], S1
	016 Move [X31+8], S2
	017 Move [X31+16], S3
	018 Compare X8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, -51847168
	021 Add X0, X0, 1363
	022 Call 0x1C17CB8
	023 Move X8, X0
	024 Move [X23+2064], X0
	025 And W4, W21, 1
	026 Add X1, X31, 0
	027 Move X0, X22
	028 Move X2, X20
	029 Move W3, W19
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X22, [X31+32]
	034 Move X21, [X31+40]
	035 Move X30, [X31+16]
	036 Move X23, [X31+24]
	037 Add X31, X31, 64
	038 Return 

Method: System.Void Internal_DrawCursor(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 pos, UnityEngine.Color cursorColor)

Disassembly:
	0x03C74B98 FDIV S0, S0, S12
	0x03C74B9C FMOV S1, 0.5
	0x03C74BA0 FMOV S4, W31
	0x03C74BA4 FMOV S5, W31
	0x03C74BA8 FCMP S0, S1
	0x03C74BAC FMOV S6, W31
	0x03C74BB0 FMOV S7, W31
	0x03C74BB4 B.PL 0x3C74BE0
	0x03C74BB8 LDR X0, [X22]
	0x03C74BBC LDR W8, [X0 + 0xE0]
	0x03C74BC0 CBNZ W8, 0x3C74BC8
	0x03C74BC4 BL 0x1C16DFC
	0x03C74BC8 BL 0x3C6748C
	0x03C74BCC CBZ X0, 0x3C74C34
	0x03C74BD0 LDR X8, [X0 + 0xE0]
	0x03C74BD4 CBZ X8, 0x3C74C34
	0x03C74BD8 LDP S4, S5, [X8 + 0x14]
	0x03C74BDC LDP S6, S7, [X8 + 0x1C]
	0x03C74BE0 MOV X0, X21
	0x03C74BE4 MOV V0.16B, V11.16B
	0x03C74BE8 MOV V1.16B, V10.16B
	0x03C74BEC MOV V2.16B, V9.16B
	0x03C74BF0 MOV V3.16B, V8.16B
	0x03C74BF4 MOV X1, X20
	0x03C74BF8 MOV W2, W19
	0x03C74BFC LDP X20, X19, [X31 + 0x50]
	0x03C74C00 LDP X22, X21, [X31 + 0x40]
	0x03C74C04 LDP X30, X23, [X31 + 0x30]
	0x03C74C08 LDP D9, D8, [X31 + 0x20]
	0x03C74C0C LDP D11, D10, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x773000
	008 Move X8, [X22+2072]
	009 Move W19, W2
	010 Move X20, X1
	011 Move X21, X0
	012 Move [X31+16], S0
	013 Move [X31+24], S1
	014 Move [X31+24], S2
	015 Move [X31+32], S3
	016 Move [X31], S4
	017 Move [X31+8], S5
	018 Move [X31+8], S6
	019 Move [X31+16], S7
	020 Compare X8, 0
	021 JumpIfNotEqual {27}
	022 Move X0, -51671040
	023 Add X0, X0, 3224
	024 Call 0x1C17CB8
	025 Move X8, X0
	026 Move [X22+2072], X0
	027 Add X1, X31, 16
	028 Add X4, X31, 0
	029 Move X0, X21
	030 Move X2, X20
	031 Move W3, W19
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X20, [X31+64]
	034 Move X19, [X31+72]
	035 Move X22, [X31+48]
	036 Move X21, [X31+56]
	037 Move X30, [X31+32]
	038 Add X31, X31, 80
	039 Return 

Method: System.Void Internal_DrawWithTextSelection(UnityEngine.Rect screenRect, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus, System.Boolean drawSelectionAsComposition, System.Int32 cursorFirst, System.Int32 cursorLast, UnityEngine.Color cursorColor, UnityEngine.Color selectionColor)

Disassembly:
	0x03C74C7C MOV V10.16B, V6.16B
	0x03C74C80 MOV V13.16B, V5.16B
	0x03C74C84 MOV V11.16B, V4.16B
	0x03C74C88 MOV W21, W6
	0x03C74C8C MOV W24, W5
	0x03C74C90 MOV W19, W4
	0x03C74C94 MOV W22, W3
	0x03C74C98 MOV W23, W2
	0x03C74C9C MOV X20, X1
	0x03C74CA0 MOV V12.16B, V1.16B
	0x03C74CA4 MOV V15.16B, V0.16B
	0x03C74CA8 MOV X25, X0
	0x03C74CAC TBNZ X8, 0x0, 0x3C74CD0
	0x03C74CB0 ADRP X0, 0x4A6000
	0x03C74CB4 LDR X0, [X0 + 0x890]
	0x03C74CB8 BL 0x1C16CF4
	0x03C74CBC ADRP X0, 0x4A6000
	0x03C74CC0 LDR X0, [X0 + 0x4C0]
	0x03C74CC4 BL 0x1C16CF4
	0x03C74CC8 MOVZ W8, 0x1
	0x03C74CCC STRB W8, [X27 + 0x7E8]
	0x03C74CD0 LDR X0, [X26]
	0x03C74CD4 LDR W8, [X0 + 0xE0]
	0x03C74CD8 CBNZ W8, 0x3C74CE0
	0x03C74CDC BL 0x1C16DFC
	0x03C74CE0 BL 0x3C6748C
	0x03C74CE4 CBZ X0, 0x3C74EB8
	0x03C74CE8 LDR X8, [X0 + 0xE0]
	0x03C74CEC CBZ X8, 0x3C74EB8
	0x03C74CF0 LDR V8, [X8 + 0x24]
	0x03C74CF4 ADRP X27, 0x4A6000
	0x03C74CF8 LDR X27, [X27 + 0x890]
	0x03C74CFC FCMP S8, 0x0
	0x03C74D00 B.GE 0x3C74D28
	0x03C74D04 ADRP X28, 0x772000
	0x03C74D08 LDR X0, [X28 + 0x6C8]
	0x03C74D0C CBNZ X0, 0x3C74D20
	0x03C74D10 ADRP X0, 0xFFFFFFFFFCEB6000
	0x03C74D14 ADD X0, X0, 0xF4E
	0x03C74D18 BL 0x1C16CB8
	0x03C74D1C STR X0, [X28 + 0x6C8]
	0x03C74D20 BLR X0
	0x03C74D24 MOV V8.16B, V0.16B
	0x03C74D28 MOV X0, X31
	0x03C74D2C STP S9, S10, [X31 + 0x28]
	0x03C74D30 BL 0x3C3A708
	0x03C74D34 LDR X0, [X27]
	0x03C74D38 MOV V9.16B, V0.16B
	0x03C74D3C LDR W8, [X0 + 0xE0]
	0x03C74D40 CBNZ W8, 0x3C74D48
	0x03C74D44 BL 0x1C16DFC
	0x03C74D48 ADRP X27, 0x772000

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+80], X30
	003 Move [X31+96], X28
	004 Move [X31+104], X27
	005 Move [X31+112], X26
	006 Move [X31+120], X25
	007 Move [X31+128], X24
	008 Move [X31+136], X23
	009 Move [X31+144], X22
	010 Move [X31+152], X21
	011 Move [X31+160], X20
	012 Move [X31+168], X19
	013 Move X28, 0x773000
	014 Move W27, [X31+176]
	015 NotImplemented "Instruction LDUR not yet implemented."
	016 Move X8, [X28+2080]
	017 Move W19, W7
	018 Move W21, W6
	019 Move W22, W5
	020 Move W23, W4
	021 Move W25, W3
	022 Move W26, W2
	023 Move X20, X1
	024 Move X24, X0
	025 Move [X31+64], S0
	026 Move [X31+72], S1
	027 Move [X31+72], S2
	028 Move [X31+80], S3
	029 Move [X31+48], S4
	030 Move [X31+56], S5
	031 Move [X31+56], S6
	032 Move [X31+64], S7
	033 Move [X31+2], V16
	034 Compare X8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, -51773440
	037 Add X0, X0, 911
	038 Call 0x1C17CB8
	039 Move X8, X0
	040 Move [X28+2080], X0
	041 Add X9, X31, 32
	042 Add X10, X31, 48
	043 And W3, W26, 1
	044 And W4, W25, 1
	045 And W5, W23, 1
	046 And W6, W22, 1
	047 And W7, W21, 1
	048 Add X1, X31, 64
	049 Move X0, X24
	050 Move X2, X20
	051 Move [X31+8], W27
	052 Move [X31+16], X10
	053 Move [X31+24], X9
	054 Move [X31], W19
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move X20, [X31+160]
	057 Move X19, [X31+168]
	058 Move X22, [X31+144]
	059 Move X21, [X31+152]
	060 Move X24, [X31+128]
	061 Move X23, [X31+136]
	062 Move X26, [X31+112]
	063 Move X25, [X31+120]
	064 Move X28, [X31+96]
	065 Move X27, [X31+104]
	066 Move X30, [X31+80]
	067 Add X31, X31, 176
	068 Return 

Method: UnityEngine.Vector2 Internal_GetCursorPixelPosition(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 cursorStringIndex)

Disassembly:
	0x03C74E08 MOV W2, W31
	0x03C74E0C B.LT 0x3C74E38
	0x03C74E10 LDP S2, S3, [X31 + 0x78]
	0x03C74E14 FCMP S0, S15
	0x03C74E18 B.LT 0x3C74E3C
	0x03C74E1C FADD S4, S15, S2
	0x03C74E20 FCMP S0, S4
	0x03C74E24 B.PL 0x3C74E3C
	0x03C74E28 FADD S0, S12, S3
	0x03C74E2C FCMP S1, S0
	0x03C74E30 CSET W2, MI
	0x03C74E34 B 0x3C74E3C
	0x03C74E38 LDP S2, S3, [X31 + 0x78]
	0x03C74E3C LDR V1, [X31 + 0x2C]
	0x03C74E40 LDR V0, [X31 + 0x28]
	0x03C74E44 AND W3, W23, 0x1
	0x03C74E48 AND W5, W22, 0x1
	0x03C74E4C AND W6, W21, 0x1
	0x03C74E50 STP S1, S0, [X31 + 0x10]
	0x03C74E54 MOV X0, X25
	0x03C74E58 MOV V0.16B, V15.16B
	0x03C74E5C MOV V1.16B, V12.16B
	0x03C74E60 MOV X1, X20
	0x03C74E64 MOV W4, W31
	0x03C74E68 MOV W7, W19
	0x03C74E6C MOV V4.16B, V8.16B
	0x03C74E70 MOV V5.16B, V9.16B
	0x03C74E74 MOV V6.16B, V13.16B
	0x03C74E78 MOV V7.16B, V14.16B

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X31
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X22, 0x773000
	009 Move X8, [X22+2088]
	010 Move W19, W2
	011 Move X20, X1
	012 Move X21, X0
	013 Move [X31], S0
	014 Move [X31+8], S1
	015 Move [X31+8], S2
	016 Move [X31+16], S3
	017 Compare X8, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -51769344
	020 Add X0, X0, 4089
	021 Call 0x1C17CB8
	022 Move X8, X0
	023 Move [X22+2088], X0
	024 Add X1, X31, 0
	025 Add X4, X31, 24
	026 Move X0, X21
	027 Move X2, X20
	028 Move W3, W19
	029 NotImplemented "Instruction BLR not yet implemented."
	030 Move S0, [X31+24]
	031 Move S1, [X31+28]
	032 Move X20, [X31+48]
	033 Move X19, [X31+56]
	034 Move X22, [X31+32]
	035 Move X21, [X31+40]
	036 Move X30, [X31+16]
	037 Add X31, X31, 64
	038 Return X0

Method: System.Int32 Internal_GetCursorStringIndex(UnityEngine.Rect position, UnityEngine.GUIContent content, UnityEngine.Vector2 cursorPixelPosition)

Disassembly:
	0x03C74EE8 MOV W23, W5
	0x03C74EEC MOV W19, W4
	0x03C74EF0 MOV W20, W3
	0x03C74EF4 MOV W24, W2
	0x03C74EF8 MOV X21, X1
	0x03C74EFC MOV V8.16B, V3.16B
	0x03C74F00 MOV V9.16B, V2.16B
	0x03C74F04 MOV V10.16B, V1.16B
	0x03C74F08 MOV V11.16B, V0.16B
	0x03C74F0C MOV X22, X0
	0x03C74F10 TBNZ X8, 0x0, 0x3C74F40
	0x03C74F14 ADRP X0, 0x4A6000
	0x03C74F18 LDR X0, [X0 + 0x890]
	0x03C74F1C BL 0x1C16CF4
	0x03C74F20 ADRP X0, 0x4AB000
	0x03C74F24 LDR X0, [X0 + 0x5C8]
	0x03C74F28 BL 0x1C16CF4
	0x03C74F2C ADRP X0, 0x4A6000
	0x03C74F30 LDR X0, [X0 + 0x4C0]
	0x03C74F34 BL 0x1C16CF4
	0x03C74F38 MOVZ W8, 0x1
	0x03C74F3C STRB W8, [X25 + 0x7E9]
	0x03C74F40 LDR X0, [X26]
	0x03C74F44 LDR W8, [X0 + 0xE0]
	0x03C74F48 CBNZ W8, 0x3C74F50

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+40], X21
	004 Move [X31+48], X20
	005 Move [X31+56], X19
	006 Move X21, 0x773000
	007 Move X8, [X21+2096]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31+16], S0
	011 Move [X31+24], S1
	012 Move [X31+24], S2
	013 Move [X31+32], S3
	014 Move [X31+8], S4
	015 Move [X31+16], S5
	016 Compare X8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, -51671040
	019 Add X0, X0, 3349
	020 Call 0x1C17CB8
	021 Move X8, X0
	022 Move [X21+2096], X0
	023 Add X1, X31, 16
	024 Add X3, X31, 8
	025 Move X0, X20
	026 Move X2, X19
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X20, [X31+48]
	029 Move X19, [X31+56]
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Add X31, X31, 64
	033 Return X0

Method: System.String Internal_GetSelectedRenderedText(UnityEngine.Rect localPosition, UnityEngine.GUIContent mContent, System.Int32 selectIndex, System.Int32 cursorIndex)

Disassembly:
	0x03C74FA8 CBNZ W8, 0x3C74FB0
	0x03C74FAC BL 0x1C16DFC
	0x03C74FB0 BL 0x3C6748C
	0x03C74FB4 CBZ X0, 0x3C7501C
	0x03C74FB8 LDR X8, [X0 + 0xE0]
	0x03C74FBC CBZ X8, 0x3C7501C
	0x03C74FC0 CBZ X22, 0x3C7501C
	0x03C74FC4 LDP S6, S7, [X8 + 0x30]
	0x03C74FC8 LDP S4, S5, [X8 + 0x28]
	0x03C74FCC CMP W25, W24
	0x03C74FD0 AND W6, W23, 0x1
	0x03C74FD4 MOV V2.16B, V9.16B
	0x03C74FD8 MOV V3.16B, V8.16B
	0x03C74FDC MOV X0, X22
	0x03C74FE0 MOV X1, X21
	0x03C74FE4 MOV W3, W26
	0x03C74FE8 MOV W4, W20
	0x03C74FEC MOV W5, W19
	0x03C74FF0 LDP X20, X19, [X31 + 0x60]
	0x03C74FF4 LDP X22, X21, [X31 + 0x50]
	0x03C74FF8 LDP X24, X23, [X31 + 0x40]
	0x03C74FFC LDP X26, X25, [X31 + 0x30]
	0x03C75000 LDP X30, X27, [X31 + 0x20]
	0x03C75004 LDP D9, D8, [X31 + 0x10]
	0x03C75008 CSET W2, EQ
	0x03C7500C MOV V0.16B, V11.16B
	0x03C75010 MOV V1.16B, V10.16B
	0x03C75014 LDP D11, D10, [X31], #0x70
	0x03C75018 B 0x3C74C38

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x773000
	009 Move X8, [X23+2104]
	010 Move W19, W3
	011 Move W20, W2
	012 Move X21, X1
	013 Move X22, X0
	014 Move [X31], S0
	015 Move [X31+8], S1
	016 Move [X31+8], S2
	017 Move [X31+16], S3
	018 Compare X8, 0
	019 JumpIfNotEqual {25}
	020 Move X0, -51838976
	021 Add X0, X0, 2063
	022 Call 0x1C17CB8
	023 Move X8, X0
	024 Move [X23+2104], X0
	025 Add X1, X31, 0
	026 Move X0, X22
	027 Move X2, X21
	028 Move W3, W20
	029 Move W4, W19
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move X20, [X31+48]
	032 Move X19, [X31+56]
	033 Move X22, [X31+32]
	034 Move X21, [X31+40]
	035 Move X30, [X31+16]
	036 Move X23, [X31+24]
	037 Add X31, X31, 64
	038 Return X0

Method: UnityEngine.Vector2 Internal_CalcSize(UnityEngine.GUIContent content)

Disassembly:
	0x03C75088 STR X30, [X31 - 0x20]!
	0x03C7508C STP X20, X19, [X31 + 0x10]
	0x03C75090 MOV X19, X3
	0x03C75094 MOV X20, X2
	0x03C75098 BL 0x3C7424C
	0x03C7509C STR S0, [X20]
	0x03C750A0 STR S1, [X19]
	0x03C750A4 LDP X20, X19, [X31 + 0x10]
	0x03C750A8 LDR X30, [X31], #0x20
	0x03C750AC RET
	0x03C750B0 STP X30, X21, [X31 - 0x20]!
	0x03C750B4 STP X20, X19, [X31 + 0x10]
	0x03C750B8 ADRP X19, 0x771000
	0x03C750BC ADRP X21, 0x47E000
	0x03C750C0 LDRB W8, [X19 + 0x7EB]
	0x03C750C4 LDR X21, [X21 + 0x9D0]
	0x03C750C8 MOV X20, X0
	0x03C750CC TBNZ X8, 0x0, 0x3C750F0
	0x03C750D0 ADRP X0, 0x47E000
	0x03C750D4 LDR X0, [X0 + 0x9D0]
	0x03C750D8 BL 0x1C16CF4
	0x03C750DC ADRP X0, 0x4EB000
	0x03C750E0 LDR X0, [X0 + 0x548]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x772000
	007 Move X8, [X21+2112]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31+8], X31
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51679232
	014 Add X0, X0, 44
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X21+2112], X0
	018 Add X2, X31, 8
	019 Move X0, X20
	020 Move X1, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move S0, [X31+8]
	023 Move S1, [X31+12]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Move X21, [X31+24]
	028 Add X31, X31, 48
	029 Return X0

Method: UnityEngine.Vector2 Internal_CalcSizeWithConstraints(UnityEngine.GUIContent content, UnityEngine.Vector2 maxSize)

Disassembly:
	0x03C75138 CBZ X19, 0x3C75180
	0x03C7513C CBZ X21, 0x3C75154
	0x03C75140 LDR X8, [X19]
	0x03C75144 MOV X0, X21
	0x03C75148 LDR X1, [X8 + 0x40]
	0x03C7514C BL 0x1C16E00
	0x03C75150 CBZ X0, 0x3C75188
	0x03C75154 LDR W8, [X19 + 0x18]
	0x03C75158 CBZ W8, 0x3C75184
	0x03C7515C ADRP X8, 0x4EB000
	0x03C75160 LDR X8, [X8 + 0x548]
	0x03C75164 STR X21, [X19 + 0x20]
	0x03C75168 MOV X1, X19
	0x03C7516C LDP X20, X19, [X31 + 0x10]
	0x03C75170 LDR X0, [X8]
	0x03C75174 MOV X2, X31
	0x03C75178 LDP X30, X21, [X31], #0x20
	0x03C7517C B 0x3C96574
	0x03C75180 BL 0x1C16F20
	0x03C75184 BL 0x1C16F28
	0x03C75188 BL 0x1C16F44
	0x03C7518C MOV X1, X31
	0x03C75190 BL 0x1C16DEC
	0x03C75194 STR X30, [X31 - 0x20]!
	0x03C75198 STP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x772000
	007 Move X8, [X21+2120]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31+8], S0
	011 Move [X31+16], S1
	012 Move [X31], X31
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51818496
	016 Add X0, X0, 2555
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X21+2120], X0
	020 Add X2, X31, 8
	021 Add X3, X31, 0
	022 Move X0, X20
	023 Move X1, X19
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move S0, [X31]
	026 Move S1, [X31+4]
	027 Move X20, [X31+32]
	028 Move X19, [X31+40]
	029 Move X30, [X31+16]
	030 Move X21, [X31+24]
	031 Add X31, X31, 48
	032 Return X0

Method: System.Single Internal_CalcHeight(UnityEngine.GUIContent content, System.Single width)

Disassembly:
	0x03C751F8 MOV X19, X1
	0x03C751FC MOV X20, X0
	0x03C75200 TBNZ X8, 0x0, 0x3C75230
	0x03C75204 ADRP X0, 0x4EB000
	0x03C75208 LDR X0, [X0 + 0x550]
	0x03C7520C BL 0x1C16CF4
	0x03C75210 ADRP X0, 0x4EB000
	0x03C75214 LDR X0, [X0 + 0x558]
	0x03C75218 BL 0x1C16CF4
	0x03C7521C ADRP X0, 0x47E000
	0x03C75220 LDR X0, [X0 + 0x6C0]
	0x03C75224 BL 0x1C16CF4
	0x03C75228 MOVZ W8, 0x1
	0x03C7522C STRB W8, [X21 + 0x860]
	0x03C75230 CBZ X20, 0x3C75370
	0x03C75234 MOVZ W2, 0x34
	0x03C75238 MOV X0, X20
	0x03C7523C MOV X1, X19
	0x03C75240 MOV X3, X31
	0x03C75244 BL 0x3397600
	0x03C75248 MOV X1, X31

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x772000
	007 Move X2, [X21+1976]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51875840
	014 Add X0, X0, 2273
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+1976], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: UnityEngine.Vector2 Internal_CalcMinMaxWidth(UnityEngine.GUIContent content)

Disassembly:
	0x03C7524C MOV X2, X31
	0x03C75250 MOV X19, X0
	0x03C75254 BL 0x32CE528
	0x03C75258 TBZ X0, 0x0, 0x3C75304
	0x03C7525C CBZ X19, 0x3C75370
	0x03C75260 LDR X8, [X19]
	0x03C75264 MOVZ W1, 0x1
	0x03C75268 MOV X0, X19
	0x03C7526C LDP X9, X2, [X8 + 0x1F8]
	0x03C75270 BLR X9
	0x03C75274 CBZ X0, 0x3C75304
	0x03C75278 LDR W8, [X0 + 0x18]
	0x03C7527C MOV X19, X0
	0x03C75280 CMP W8, 0x1
	0x03C75284 B.LT 0x3C75304
	0x03C75288 ADRP X24, 0x4EB000
	0x03C7528C ADRP X25, 0x47E000
	0x03C75290 LDR X24, [X24 + 0x550]
	0x03C75294 LDR X25, [X25 + 0x6C0]
	0x03C75298 MOV X22, X31
	0x03C7529C ADD X23, X19, 0x20
	0x03C752A0 CMP W22, W8
	0x03C752A4 B.CS 0x3C75374

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x772000
	007 Move X8, [X21+2128]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31+8], X31
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51802112
	014 Add X0, X0, 1452
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X21+2128], X0
	018 Add X2, X31, 8
	019 Move X0, X20
	020 Move X1, X19
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move S0, [X31+8]
	023 Move S1, [X31+12]
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X30, [X31+16]
	027 Move X21, [X31+24]
	028 Add X31, X31, 48
	029 Return X0

Method: System.Void SetMouseTooltip(System.String tooltip, UnityEngine.Rect screenRect)

Disassembly:
	0x03C6C468 LDRB W8, [X25 + 0x510]
	0x03C6C46C LDR X26, [X26 + 0x20]
	0x03C6C470 MOV X19, X0
	0x03C6C474 TBNZ X8, 0x0, 0x3C6C488
	0x03C6C478 ADRP X0, 0x4ED000
	0x03C6C47C LDR X0, [X0 + 0x20]
	0x03C6C480 BL 0x1C16CF4
	0x03C6C484 STRB W23, [X25 + 0x510]
	0x03C6C488 LDR X8, [X26]
	0x03C6C48C LDR X8, [X8 + 0xB8]
	0x03C6C490 LDR X23, [X8]
	0x03C6C494 CBZ X23, 0x3C6C660
	0x03C6C498 ADRP X25, 0x77A000
	0x03C6C49C LDR X8, [X25 + 0x4A8]
	0x03C6C4A0 CBNZ X8, 0x3C6C4B8
	0x03C6C4A4 ADRP X0, 0xFFFFFFFFFCE85000
	0x03C6C4A8 ADD X0, X0, 0x566
	0x03C6C4AC BL 0x1C16CB8
	0x03C6C4B0 MOV X8, X0
	0x03C6C4B4 STR X0, [X25 + 0x4A8]
	0x03C6C4B8 MOV X0, X23
	0x03C6C4BC BLR X8
	0x03C6C4C0 LDR X8, [X24]
	0x03C6C4C4 MOV W23, W0
	0x03C6C4C8 LDR W9, [X8 + 0xE0]
	0x03C6C4CC CBNZ W9, 0x3C6C4DC
	0x03C6C4D0 MOV X0, X8
	0x03C6C4D4 BL 0x1C16DFC
	0x03C6C4D8 LDR X8, [X24]
	0x03C6C4DC LDR X8, [X8 + 0xB8]
	0x03C6C4E0 CMP W23, 0x8
	0x03C6C4E4 LDR X26, [X8 + 0x10]
	0x03C6C4E8 B.NE 0x3C6C628
	0x03C6C4EC ADRP X25, 0x4F4000
	0x03C6C4F0 LDR X25, [X25 + 0x2D0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x77B000
	007 Move [X31], S0
	008 Move [X31+8], S1
	009 Move [X31+8], S2
	010 Move [X31+16], S3
	011 Move X21, 0x4AF000
	012 Move W8, [X20+1984]
	013 Move X21, [X21+2192]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x4AF000
	020 Move X0, [X0+2192]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+1984], W8
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X20, 0x77B000
	030 Move X8, [X20+2136]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -51691520
	034 Add X0, X0, 1015
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X20+2136], X0
	038 Add X1, X31, 0
	039 Move X0, X19
	040 NotImplemented "Instruction BLR not yet implemented."
	041 Move X20, [X31+32]
	042 Move X19, [X31+40]
	043 Move X30, [X31+16]
	044 Move X21, [X31+24]
	045 Add X31, X31, 48
	046 Return 

Method: System.Boolean IsTooltipActive(System.String tooltip)

Disassembly:
	0x03C6C42C ADRP X0, 0x4F4000
	0x03C6C430 LDR X0, [X0 + 0x2B0]
	0x03C6C434 BL 0x1C16CF4
	0x03C6C438 MOVZ W8, 0x1
	0x03C6C43C STRB W8, [X19 + 0x69C]
	0x03C6C440 LDR X0, [X24]
	0x03C6C444 LDR W8, [X0 + 0xE0]
	0x03C6C448 CBNZ W8, 0x3C6C450
	0x03C6C44C BL 0x1C16DFC
	0x03C6C450 MOVZ W1, 0x1
	0x03C6C454 MOV W0, W21
	0x03C6C458 MOVZ W23, 0x1
	0x03C6C45C BL 0x3C6C17C
	0x03C6C460 ADRP X25, 0x77A000
	0x03C6C464 ADRP X26, 0x4ED000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77B000
	005 Move X1, [X20+1992]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51707904
	010 Add X0, X0, 766
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1992], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single Internal_GetCursorFlashOffset()

Disassembly:
	0x03C75340 LDR X9, [X9]
	0x03C75344 LDRB W12, [X10 + 0x130]
	0x03C75348 LDRB W11, [X9 + 0x130]
	0x03C7534C CMP W12, W11
	0x03C75350 B.CC 0x3C75370
	0x03C75354 LDR X10, [X10 + 0xC8]
	0x03C75358 ADD X10, X10, X11, 0x3, LSL
	0x03C7535C LDUR X10, [X10 - 0x8]
	0x03C75360 CMP X10, X9
	0x03C75364 B.NE 0x3C75370

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x772000
	004 Move X0, [X19+2000]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51683328
	008 Add X0, X0, 4086
	009 Call 0x1C17CB8
	010 Move [X19+2000], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void SetDefaultFont(UnityEngine.Font font)

Disassembly:
	0x03C7270C MOV X21, X0
	0x03C72710 BL 0x3C71974
	0x03C72714 STR X21, [X20]
	0x03C72718 CBZ X21, 0x3C7290C
	0x03C7271C ADRP X8, 0x4EE000
	0x03C72720 LDR X8, [X8 + 0x458]
	0x03C72724 LDR X22, [X8]
	0x03C72728 STR X22, [X21 + 0x78]
	0x03C7272C LDR X8, [X23 + 0x720]
	0x03C72730 CBNZ X8, 0x3C72748
	0x03C72734 ADRP X0, 0xFFFFFFFFFCE93000
	0x03C72738 ADD X0, X0, 0x5DA
	0x03C7273C BL 0x1C16CB8
	0x03C72740 MOV X8, X0
	0x03C72744 STR X0, [X23 + 0x720]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x775000
	005 Move X1, [X20+2008]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51740672
	010 Add X0, X0, 274
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2008], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void .ctor()

Disassembly:
	0x03C72974 MOV X20, X0
	0x03C72978 CBNZ X2, 0x3C72990
	0x03C7297C ADRP X0, 0xFFFFFFFFFCE93000
	0x03C72980 ADD X0, X0, 0x60B
	0x03C72984 BL 0x1C16CB8
	0x03C72988 MOV X2, X0
	0x03C7298C STR X0, [X21 + 0x768]
	0x03C72990 AND W1, W19, 0x1
	0x03C72994 MOV X0, X20
	0x03C72998 LDP X20, X19, [X31 + 0x10]
	0x03C7299C LDP X30, X21, [X31], #0x20
	0x03C729A0 BR X2
	0x03C729A4 STR X30, [X31 - 0x20]!
	0x03C729A8 STP X20, X19, [X31 + 0x10]
	0x03C729AC MOV X19, X0
	0x03C729B0 LDR X0, [X0 + 0x18]
	0x03C729B4 CBNZ X0, 0x3C729F4
	0x03C729B8 ADRP X20, 0x774000
	0x03C729BC LDR X8, [X20 + 0x798]
	0x03C729C0 CBNZ X8, 0x3C729D8
	0x03C729C4 ADRP X0, 0xFFFFFFFFFCE7F000
	0x03C729C8 ADD X0, X0, 0x625
	0x03C729CC BL 0x1C16CB8
	0x03C729D0 MOV X8, X0
	0x03C729D4 STR X0, [X20 + 0x798]
	0x03C729D8 MOV X0, X19
	0x03C729DC MOV W1, W31
	0x03C729E0 BLR X8
	0x03C729E4 MOV X1, X0
	0x03C729E8 MOV X0, X19
	0x03C729EC BL 0x3C73254
	0x03C729F0 STR X0, [X19 + 0x18]
	0x03C729F4 LDP X20, X19, [X31 + 0x10]
	0x03C729F8 LDR X30, [X31], #0x20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x775000
	006 Move X20, 0x4A9000
	007 Move W8, [X21+2016]
	008 Move X20, [X20+2192]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4A9000
	015 Move X0, [X0+2192]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2016], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call Object..ctor, X0
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X20, 0x775000
	028 Move X8, [X20+1920]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51781632
	032 Add X0, X0, 2419
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X20+1920], X0
	036 Move X0, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move [X19+16], X0
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 

Method: System.Void .ctor(UnityEngine.GUIStyle other)

Disassembly:
	0x03C75368 LDR W0, [X8 + 0x10]
	0x03C7536C B 0x3C75308
	0x03C75370 BL 0x1C16F20
	0x03C75374 BL 0x1C16F28
	0x03C75378 STP X30, X19, [X31 - 0x10]!
	0x03C7537C ADRP X19, 0x771000
	0x03C75380 LDR X0, [X19 + 0x870]
	0x03C75384 CBNZ X0, 0x3C75398
	0x03C75388 ADRP X0, 0xFFFFFFFFFCEB6000
	0x03C7538C ADD X0, X0, 0xB7
	0x03C75390 BL 0x1C16CB8
	0x03C75394 STR X0, [X19 + 0x870]
	0x03C75398 LDP X30, X19, [X31], #0x10
	0x03C7539C BR X0
	0x03C753A0 STP X30, X19, [X31 - 0x10]!
	0x03C753A4 ADRP X19, 0x771000
	0x03C753A8 LDR X0, [X19 + 0x890]
	0x03C753AC CBNZ X0, 0x3C753C0
	0x03C753B0 ADRP X0, 0xFFFFFFFFFCEA0000
	0x03C753B4 ADD X0, X0, 0x84
	0x03C753B8 BL 0x1C16CB8
	0x03C753BC STR X0, [X19 + 0x890]
	0x03C753C0 LDP X30, X19, [X31], #0x10
	0x03C753C4 BR X0
	0x03C753C8 STR X30, [X31 - 0x20]!
	0x03C753CC STP X20, X19, [X31 + 0x10]
	0x03C753D0 ADRP X20, 0x771000
	0x03C753D4 LDR X1, [X20 + 0x898]
	0x03C753D8 MOV X19, X0
	0x03C753DC CBNZ X1, 0x3C753F4
	0x03C753E0 ADRP X0, 0xFFFFFFFFFCEA2000
	0x03C753E4 ADD X0, X0, 0x111
	0x03C753E8 BL 0x1C16CB8
	0x03C753EC MOV X1, X0
	0x03C753F0 STR X0, [X20 + 0x898]
	0x03C753F4 MOV X0, X19
	0x03C753F8 LDP X20, X19, [X31 + 0x10]
	0x03C753FC LDR X30, [X31], #0x20
	0x03C75400 BR X1
	0x03C75404 SUB X31, X31, 0x40
	0x03C75408 STR X30, [X31 + 0x10]
	0x03C7540C STP X22, X21, [X31 + 0x20]
	0x03C75410 STP X20, X19, [X31 + 0x30]
	0x03C75414 ADRP X21, 0x771000
	0x03C75418 STP S0, S1, [X31]
	0x03C7541C STP S2, S3, [X31 + 0x8]
	0x03C75420 ADRP X22, 0x4AA000
	0x03C75424 LDRB W8, [X21 + 0x8A0]
	0x03C75428 LDR X22, [X22 + 0x5C8]
	0x03C7542C MOV W19, W1
	0x03C75430 MOV W20, W0
	0x03C75434 TBNZ X8, 0x0, 0x3C7544C
	0x03C75438 ADRP X0, 0x4AA000
	0x03C7543C LDR X0, [X0 + 0x5C8]
	0x03C75440 BL 0x1C16CF4
	0x03C75444 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x772000
	006 Move W8, [X21+2017]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x47F000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x4A6000
	017 Move X0, [X0+2192]
	018 Call 0x1C17CF4
	019 Move X0, 0x4EC000
	020 Move X0, [X0+1344]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2017], W8
	024 Move X21, 0x4A6000
	025 Move X21, [X21+2192]
	026 Move X0, X19
	027 Move X1, X31
	028 Call Object..ctor, X0
	029 Compare X20, 0
	030 JumpIfNotEqual {45}
	031 Move X8, 0x47F000
	032 Move X8, [X8+2600]
	033 Move X0, [X8]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X8, 0x4EC000
	039 Move X8, [X8+1344]
	040 Move X1, X31
	041 Move X0, [X8]
	042 Call Debug.LogError, X0
	043 Call GUISkin.get_error
	044 Move X20, X0
	045 Move X0, [X21]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 Move X21, 0x772000
	051 Move X8, [X21+1928]
	052 Compare X8, 0
	053 JumpIfNotEqual {59}
	054 Move X0, -51712000
	055 Add X0, X0, 1650
	056 Call 0x1C17CB8
	057 Move X8, X0
	058 Move [X21+1928], X0
	059 Move X0, X19
	060 Move X1, X20
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move [X19+16], X0
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return 

Method: System.Void Finalize()

Disassembly:
	0x03C75448 STRB W8, [X21 + 0x8A0]
	0x03C7544C LDR X0, [X22]
	0x03C75450 LDR W8, [X0 + 0xE0]
	0x03C75454 CBNZ W8, 0x3C7545C
	0x03C75458 BL 0x1C16DFC
	0x03C7545C ADRP X21, 0x771000
	0x03C75460 LDR X8, [X21 + 0x958]
	0x03C75464 CBNZ X8, 0x3C7547C
	0x03C75468 ADRP X0, 0xFFFFFFFFFCEAE000
	0x03C7546C ADD X0, X0, 0x74A
	0x03C75470 BL 0x1C16CB8
	0x03C75474 MOV X8, X0
	0x03C75478 STR X0, [X21 + 0x958]
	0x03C7547C ADD X2, X31, 0x0
	0x03C75480 MOV W0, W20
	0x03C75484 MOV W1, W19
	0x03C75488 BLR X8
	0x03C7548C LDP X20, X19, [X31 + 0x30]
	0x03C75490 LDP X22, X21, [X31 + 0x20]
	0x03C75494 LDR X30, [X31 + 0x10]
	0x03C75498 ADD X31, X31, 0x40
	0x03C7549C RET
	0x03C754A0 STR X30, [X31 - 0x30]!
	0x03C754A4 STP X22, X21, [X31 + 0x10]
	0x03C754A8 STP X20, X19, [X31 + 0x20]
	0x03C754AC ADRP X22, 0x771000
	0x03C754B0 LDR X3, [X22 + 0x958]
	0x03C754B4 MOV X19, X2
	0x03C754B8 MOV W20, W1
	0x03C754BC MOV W21, W0
	0x03C754C0 CBNZ X3, 0x3C754D8
	0x03C754C4 ADRP X0, 0xFFFFFFFFFCEAE000
	0x03C754C8 ADD X0, X0, 0x74A
	0x03C754CC BL 0x1C16CB8
	0x03C754D0 MOV X3, X0
	0x03C754D4 STR X0, [X22 + 0x958]
	0x03C754D8 MOV W0, W21
	0x03C754DC MOV W1, W20
	0x03C754E0 MOV X2, X19
	0x03C754E4 LDP X20, X19, [X31 + 0x20]
	0x03C754E8 LDP X22, X21, [X31 + 0x10]
	0x03C754EC LDR X30, [X31], #0x30
	0x03C754F0 BR X3
	0x03C754F4 STR X30, [X31 - 0x20]!
	0x03C754F8 STP X20, X19, [X31 + 0x10]
	0x03C754FC ADRP X20, 0x771000
	0x03C75500 LDR X1, [X20 + 0x8A8]
	0x03C75504 MOV X19, X0
	0x03C75508 CBNZ X1, 0x3C75520
	0x03C7550C ADRP X0, 0xFFFFFFFFFCE7A000
	0x03C75510 ADD X0, X0, 0x61A
	0x03C75514 BL 0x1C16CB8
	0x03C75518 MOV X1, X0
	0x03C7551C STR X0, [X20 + 0x8A8]
	0x03C75520 MOV X0, X19
	0x03C75524 LDP X20, X19, [X31 + 0x10]
	0x03C75528 LDR X30, [X31], #0x20
	0x03C7552C BR X1
	0x03C75530 STR X30, [X31 - 0x20]!
	0x03C75534 STP X20, X19, [X31 + 0x10]
	0x03C75538 ADRP X20, 0x771000
	0x03C7553C LDR X1, [X20 + 0x8B0]
	0x03C75540 MOV X19, X0
	0x03C75544 CBNZ X1, 0x3C7555C
	0x03C75548 ADRP X0, 0xFFFFFFFFFCE80000
	0x03C7554C ADD X0, X0, 0x7A3
	0x03C75550 BL 0x1C16CB8
	0x03C75554 MOV X1, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x772000
	006 Move W8, [X20+2018]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4A6000
	013 Move X0, [X0+2192]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2018], W8
	017 Move X0, [X19+16]
	018 Move X1, X31
	019 Move X2, X31
	020 Call IntPtr.op_Inequality, X0, X1
	021 Move TEMP, X0
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {45}
	025 Move X8, 0x4A6000
	026 Move X8, [X8+2192]
	027 Move X20, [X19+16]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X21, 0x772000
	034 Move X8, [X21+1936]
	035 Compare X8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, -51916800
	038 Add X0, X0, 1519
	039 Call 0x1C17CB8
	040 Move X8, X0
	041 Move [X21+1936], X0
	042 Move X0, X20
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move [X19+16], X31
	045 Move X0, X19
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X1, X31
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Call Object.Finalize, X0
	052 Return 
	053 Move X21, X0
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X0, X21
	056 Call 0x3EB2AD0
	057 Move X20, [X0]
	058 Call 0x3EB2AE0
	059 Move X0, X19
	060 Move X1, X31
	061 Call Object.Finalize, X0
	062 Compare X20, 0
	063 JumpIfNotEqual {70}
	064 Move X20, [X31+16]
	065 Move X19, [X31+24]
	066 Move X30, [X31+32]
	067 Move X21, [X31+40]
	068 Return 
	069 Move X20, X31
	070 Move X0, X20
	071 Call 0x1C17F18
	072 Move X21, X0
	073 Move X0, X19
	074 Move X1, X31
	075 Call Object.Finalize, X0
	076 Compare X20, 0
	077 JumpIfNotEqual {80}
	078 Move X0, X21
	079 Call 0x1D2D690
	080 Move X0, X20
	081 Call 0x1C17F18
	082 Call 0x1991590

Method: System.String get_name()

Disassembly:
	0x03C73914 BR X2
	0x03C73918 STR X30, [X31 - 0x30]!
	0x03C7391C STP X22, X21, [X31 + 0x10]
	0x03C73920 STP X20, X19, [X31 + 0x20]
	0x03C73924 ADRP X22, 0x773000
	0x03C73928 LDR X3, [X22 + 0x7A8]
	0x03C7392C MOV X19, X2
	0x03C73930 MOV W20, W1
	0x03C73934 MOV X21, X0
	0x03C73938 CBNZ X3, 0x3C73950
	0x03C7393C ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C73940 ADD X0, X0, 0x4AA
	0x03C73944 BL 0x1C16CB8
	0x03C73948 MOV X3, X0
	0x03C7394C STR X0, [X22 + 0x7A8]
	0x03C73950 MOV X0, X21
	0x03C73954 MOV W1, W20
	0x03C73958 MOV X2, X19
	0x03C7395C LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+120]
	006 Compare X0, 0
	007 JumpIfNotEqual {20}
	008 Move X20, 0x774000
	009 Move X8, [X20+1816]
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51851264
	013 Add X0, X0, 2153
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+1816], X0
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move [X19+120], X0
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_name(System.String value)

Disassembly:
	0x03C729FC RET
	0x03C72A00 SUB X31, X31, 0x30
	0x03C72A04 STR X30, [X31 + 0x10]
	0x03C72A08 STP X20, X19, [X31 + 0x20]
	0x03C72A0C ADRP X20, 0x774000
	0x03C72A10 LDR X8, [X20 + 0x710]
	0x03C72A14 MOV X19, X0
	0x03C72A18 STP S0, S1, [X31]
	0x03C72A1C STP S2, S3, [X31 + 0x8]
	0x03C72A20 CBNZ X8, 0x3C72A38
	0x03C72A24 ADRP X0, 0xFFFFFFFFFCE7D000
	0x03C72A28 ADD X0, X0, 0x5D4
	0x03C72A2C BL 0x1C16CB8
	0x03C72A30 MOV X8, X0
	0x03C72A34 STR X0, [X20 + 0x710]
	0x03C72A38 ADD X1, X31, 0x0
	0x03C72A3C MOV X0, X19
	0x03C72A40 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move [X0+120], X1
	006 Move X21, 0x775000
	007 Move X2, [X21+1824]
	008 Move X19, X1
	009 Move X20, X0
	010 Compare X2, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51822592
	013 Add X0, X0, 1498
	014 Call 0x1C17CB8
	015 Move X2, X0
	016 Move [X21+1824], X0
	017 Move X0, X20
	018 Move X1, X19
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Move X21, [X31+40]
	023 CallNoReturn X2

Method: UnityEngine.GUIStyleState get_normal()

Disassembly:
	0x03C739A4 BR X1
	0x03C739A8 SUB X31, X31, 0x50
	0x03C739AC STP X30, X25, [X31 + 0x10]
	0x03C739B0 STP X24, X23, [X31 + 0x20]
	0x03C739B4 STP X22, X21, [X31 + 0x30]
	0x03C739B8 STP X20, X19, [X31 + 0x40]
	0x03C739BC ADRP X25, 0x773000
	0x03C739C0 LDR X8, [X25 + 0x808]
	0x03C739C4 MOV W20, W5
	0x03C739C8 MOV W21, W4
	0x03C739CC MOV W22, W3
	0x03C739D0 MOV W24, W2
	0x03C739D4 MOV X19, X1
	0x03C739D8 MOV X23, X0
	0x03C739DC STP S0, S1, [X31]
	0x03C739E0 STP S2, S3, [X31 + 0x8]
	0x03C739E4 CBNZ X8, 0x3C739FC
	0x03C739E8 ADRP X0, 0xFFFFFFFFFCE9E000
	0x03C739EC ADD X0, X0, 0x5B2
	0x03C739F0 BL 0x1C16CB8
	0x03C739F4 MOV X8, X0
	0x03C739F8 STR X0, [X25 + 0x808]
	0x03C739FC AND W3, W24, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+24]
	006 Compare X0, 0
	007 JumpIfNotEqual {24}
	008 Move X20, 0x774000
	009 Move X8, [X20+1944]
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51908608
	013 Add X0, X0, 1573
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+1944], X0
	017 Move X0, X19
	018 Move W1, W31
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X1, X0
	021 Move X0, X19
	022 Call GUIStyleState.GetGUIStyleState, X0, X1
	023 Move [X19+24], X0
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: UnityEngine.GUIStyleState get_hover()

Disassembly:
	0x03C75558 STR X0, [X20 + 0x8B0]
	0x03C7555C MOV X0, X19
	0x03C75560 LDP X20, X19, [X31 + 0x10]
	0x03C75564 LDR X30, [X31], #0x20
	0x03C75568 BR X1
	0x03C7556C STP X30, X19, [X31 - 0x10]!
	0x03C75570 ADRP X19, 0x771000
	0x03C75574 LDR X0, [X19 + 0x8B8]
	0x03C75578 CBNZ X0, 0x3C7558C
	0x03C7557C ADRP X0, 0xFFFFFFFFFCE90000
	0x03C75580 ADD X0, X0, 0x643
	0x03C75584 BL 0x1C16CB8
	0x03C75588 STR X0, [X19 + 0x8B8]
	0x03C7558C LDP X30, X19, [X31], #0x10
	0x03C75590 BR X0
	0x03C75594 STR X30, [X31 - 0x20]!
	0x03C75598 STP X20, X19, [X31 + 0x10]
	0x03C7559C ADRP X20, 0x771000
	0x03C755A0 LDR X1, [X20 + 0x8C0]
	0x03C755A4 MOV X19, X0
	0x03C755A8 CBNZ X1, 0x3C755C0
	0x03C755AC ADRP X0, 0xFFFFFFFFFCEB6000
	0x03C755B0 ADD X0, X0, 0xDE

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+32]
	006 Compare X0, 0
	007 JumpIfNotEqual {24}
	008 Move X20, 0x772000
	009 Move X8, [X20+1944]
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51916800
	013 Add X0, X0, 1573
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+1944], X0
	017 Move W1, 1
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X1, X0
	021 Move X0, X19
	022 Call GUIStyleState.GetGUIStyleState, X0, X1
	023 Move [X19+32], X0
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: UnityEngine.GUIStyleState get_active()

Disassembly:
	0x03C755B4 BL 0x1C16CB8
	0x03C755B8 MOV X1, X0
	0x03C755BC STR X0, [X20 + 0x8C0]
	0x03C755C0 MOV X0, X19
	0x03C755C4 LDP X20, X19, [X31 + 0x10]
	0x03C755C8 LDR X30, [X31], #0x20
	0x03C755CC BR X1
	0x03C755D0 STP X30, X19, [X31 - 0x10]!
	0x03C755D4 ADRP X19, 0x771000
	0x03C755D8 LDR X0, [X19 + 0x8C8]
	0x03C755DC CBNZ X0, 0x3C755F0
	0x03C755E0 ADRP X0, 0xFFFFFFFFFCE90000
	0x03C755E4 ADD X0, X0, 0x673
	0x03C755E8 BL 0x1C16CB8
	0x03C755EC STR X0, [X19 + 0x8C8]
	0x03C755F0 LDP X30, X19, [X31], #0x10
	0x03C755F4 BR X0
	0x03C755F8 STP X30, X19, [X31 - 0x10]!
	0x03C755FC ADRP X19, 0x771000
	0x03C75600 LDR X0, [X19 + 0x8D0]
	0x03C75604 CBNZ X0, 0x3C75618
	0x03C75608 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C7560C ADD X0, X0, 0x5C7

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X0
	005 Move X0, [X0+40]
	006 Compare X0, 0
	007 JumpIfNotEqual {24}
	008 Move X20, 0x772000
	009 Move X8, [X20+1944]
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51916800
	013 Add X0, X0, 1573
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+1944], X0
	017 Move W1, 2
	018 Move X0, X19
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move X1, X0
	021 Move X0, X19
	022 Call GUIStyleState.GetGUIStyleState, X0, X1
	023 Move [X19+40], X0
	024 Move X20, [X31+16]
	025 Move X19, [X31+24]
	026 Move X30, [X31+32]
	027 Return X0

Method: System.Void set_border(UnityEngine.RectOffset value)

Disassembly:
	0x03C75610 BL 0x1C16CB8
	0x03C75614 STR X0, [X19 + 0x8D0]
	0x03C75618 LDP X30, X19, [X31], #0x10
	0x03C7561C BR X0
	0x03C75620 STP X30, X19, [X31 - 0x10]!
	0x03C75624 ADRP X19, 0x771000
	0x03C75628 LDR X0, [X19 + 0x8D8]
	0x03C7562C CBNZ X0, 0x3C75640
	0x03C75630 ADRP X0, 0xFFFFFFFFFCEA4000
	0x03C75634 ADD X0, X0, 0x149
	0x03C75638 BL 0x1C16CB8
	0x03C7563C STR X0, [X19 + 0x8D8]
	0x03C75640 LDP X30, X19, [X31], #0x10
	0x03C75644 BR X0
	0x03C75648 STR X30, [X31 - 0x20]!
	0x03C7564C STP X20, X19, [X31 + 0x10]
	0x03C75650 ADRP X20, 0x771000
	0x03C75654 LDR X1, [X20 + 0x8E0]
	0x03C75658 MOV W19, W0
	0x03C7565C CBNZ X1, 0x3C75674

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {26}
	007 Move X21, 0x772000
	008 Move X3, [X21+1960]
	009 Move X20, [X1+16]
	010 Move X19, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51703808
	014 Add X0, X0, 1194
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X21+1960], X0
	018 Move X0, X19
	019 Move X2, X20
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move W1, W31
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 CallNoReturn X3
	026 Call 0x1C17F20

Method: UnityEngine.RectOffset get_margin()

Disassembly:
	0x03C75660 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C75664 ADD X0, X0, 0x603
	0x03C75668 BL 0x1C16CB8
	0x03C7566C MOV X1, X0
	0x03C75670 STR X0, [X20 + 0x8E0]
	0x03C75674 MOV W0, W19
	0x03C75678 LDP X20, X19, [X31 + 0x10]
	0x03C7567C LDR X30, [X31], #0x20
	0x03C75680 BR X1
	0x03C75684 SUB X31, X31, 0x50
	0x03C75688 STR X30, [X31 + 0x20]
	0x03C7568C STP X22, X21, [X31 + 0x30]
	0x03C75690 STP X20, X19, [X31 + 0x40]
	0x03C75694 ADRP X22, 0x771000
	0x03C75698 STP S0, S1, [X31 + 0x10]
	0x03C7569C STP S2, S3, [X31 + 0x18]
	0x03C756A0 ADRP X21, 0x4AA000
	0x03C756A4 LDRB W8, [X22 + 0x8E8]
	0x03C756A8 LDR X21, [X21 + 0x5C8]
	0x03C756AC MOV X19, X1
	0x03C756B0 MOV X20, X0
	0x03C756B4 TBNZ X8, 0x0, 0x3C756CC
	0x03C756B8 ADRP X0, 0x4AA000
	0x03C756BC LDR X0, [X0 + 0x5C8]
	0x03C756C0 BL 0x1C16CF4
	0x03C756C4 MOVZ W8, 0x1
	0x03C756C8 STRB W8, [X22 + 0x8E8]
	0x03C756CC LDR X0, [X21]
	0x03C756D0 STP X31, X31, [X31]
	0x03C756D4 LDR W8, [X0 + 0xE0]
	0x03C756D8 CBNZ W8, 0x3C756E0
	0x03C756DC BL 0x1C16DFC
	0x03C756E0 ADRP X21, 0x771000
	0x03C756E4 LDR X8, [X21 + 0x960]
	0x03C756E8 CBNZ X8, 0x3C75700
	0x03C756EC ADRP X0, 0xFFFFFFFFFCE90000
	0x03C756F0 ADD X0, X0, 0x6B0
	0x03C756F4 BL 0x1C16CB8
	0x03C756F8 MOV X8, X0
	0x03C756FC STR X0, [X21 + 0x960]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x772000
	006 Move W8, [X20+2019]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4A6000
	013 Move X0, [X0+1224]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2019], W8
	017 Move X20, [X19+104]
	018 Compare X20, 0
	019 JumpIfNotEqual {44}
	020 Move X20, 0x772000
	021 Move X8, [X20+1952]
	022 Compare X8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -51843072
	025 Add X0, X0, 2010
	026 Call 0x1C17CB8
	027 Move X8, X0
	028 Move [X20+1952], X0
	029 Move W1, 1
	030 Move X0, X19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X8, 0x4A6000
	033 Move X8, [X8+1224]
	034 Move X21, X0
	035 Move X8, [X8]
	036 Move X0, X8
	037 Call 0x1C17F10
	038 Move X1, X19
	039 Move X2, X21
	040 Move X3, X31
	041 Move X20, X0
	042 Call RectOffset..ctor, X0, X1, X2
	043 Move [X19+104], X20
	044 Move X0, X20
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: System.Void set_margin(UnityEngine.RectOffset value)

Disassembly:
	0x03C75700 ADD X0, X31, 0x10
	0x03C75704 ADD X3, X31, 0x0
	0x03C75708 MOV X1, X20
	0x03C7570C MOV X2, X19
	0x03C75710 BLR X8
	0x03C75714 LDP S0, S1, [X31]
	0x03C75718 LDP S2, S3, [X31 + 0x8]
	0x03C7571C LDP X20, X19, [X31 + 0x40]
	0x03C75720 LDP X22, X21, [X31 + 0x30]
	0x03C75724 LDR X30, [X31 + 0x20]
	0x03C75728 ADD X31, X31, 0x50
	0x03C7572C RET
	0x03C75730 STP X30, X23, [X31 - 0x30]!
	0x03C75734 STP X22, X21, [X31 + 0x10]
	0x03C75738 STP X20, X19, [X31 + 0x20]
	0x03C7573C ADRP X23, 0x771000
	0x03C75740 LDR X4, [X23 + 0x960]
	0x03C75744 MOV X19, X3
	0x03C75748 MOV X20, X2
	0x03C7574C MOV X21, X1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {26}
	007 Move X21, 0x772000
	008 Move X3, [X21+1960]
	009 Move X20, [X1+16]
	010 Move X19, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51703808
	014 Add X0, X0, 1194
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X21+1960], X0
	018 Move X0, X19
	019 Move X2, X20
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move W1, 1
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 CallNoReturn X3
	026 Call 0x1C17F20

Method: UnityEngine.RectOffset get_padding()

Disassembly:
	0x03C75750 MOV X22, X0
	0x03C75754 CBNZ X4, 0x3C7576C
	0x03C75758 ADRP X0, 0xFFFFFFFFFCE90000
	0x03C7575C ADD X0, X0, 0x6B0
	0x03C75760 BL 0x1C16CB8
	0x03C75764 MOV X4, X0
	0x03C75768 STR X0, [X23 + 0x960]
	0x03C7576C MOV X0, X22
	0x03C75770 MOV X1, X21
	0x03C75774 MOV X2, X20
	0x03C75778 MOV X3, X19
	0x03C7577C LDP X20, X19, [X31 + 0x20]
	0x03C75780 LDP X22, X21, [X31 + 0x10]
	0x03C75784 LDP X30, X23, [X31], #0x30
	0x03C75788 BR X4
	0x03C7578C STR X30, [X31 - 0x20]!
	0x03C75790 STP X20, X19, [X31 + 0x10]
	0x03C75794 ADRP X20, 0x771000
	0x03C75798 LDR X1, [X20 + 0x8F8]
	0x03C7579C MOV W19, W0
	0x03C757A0 CBNZ X1, 0x3C757B8
	0x03C757A4 ADRP X0, 0xFFFFFFFFFCE96000
	0x03C757A8 ADD X0, X0, 0x8DC
	0x03C757AC BL 0x1C16CB8
	0x03C757B0 MOV X1, X0
	0x03C757B4 STR X0, [X20 + 0x8F8]
	0x03C757B8 MOV W0, W19
	0x03C757BC LDP X20, X19, [X31 + 0x10]
	0x03C757C0 LDR X30, [X31], #0x20
	0x03C757C4 BR X1
	0x03C757C8 STR X30, [X31 - 0x20]!
	0x03C757CC STP X20, X19, [X31 + 0x10]
	0x03C757D0 ADRP X19, 0x771000
	0x03C757D4 STP S0, S1, [X31 + 0x8]
	0x03C757D8 ADRP X20, 0x4AA000
	0x03C757DC LDRB W8, [X19 + 0x900]
	0x03C757E0 LDR X20, [X20 + 0x5C8]
	0x03C757E4 TBNZ X8, 0x0, 0x3C757FC
	0x03C757E8 ADRP X0, 0x4AA000
	0x03C757EC LDR X0, [X0 + 0x5C8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x772000
	006 Move W8, [X20+2020]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4A6000
	013 Move X0, [X0+1224]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2020], W8
	017 Move X20, [X19+96]
	018 Compare X20, 0
	019 JumpIfNotEqual {44}
	020 Move X20, 0x772000
	021 Move X8, [X20+1952]
	022 Compare X8, 0
	023 JumpIfNotEqual {29}
	024 Move X0, -51843072
	025 Add X0, X0, 2010
	026 Call 0x1C17CB8
	027 Move X8, X0
	028 Move [X20+1952], X0
	029 Move W1, 2
	030 Move X0, X19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X8, 0x4A6000
	033 Move X8, [X8+1224]
	034 Move X21, X0
	035 Move X8, [X8]
	036 Move X0, X8
	037 Call 0x1C17F10
	038 Move X1, X19
	039 Move X2, X21
	040 Move X3, X31
	041 Move X20, X0
	042 Call RectOffset..ctor, X0, X1, X2
	043 Move [X19+96], X20
	044 Move X0, X20
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Return X0

Method: System.Void set_padding(UnityEngine.RectOffset value)

Disassembly:
	0x03C757F0 BL 0x1C16CF4
	0x03C757F4 MOVZ W8, 0x1
	0x03C757F8 STRB W8, [X19 + 0x900]
	0x03C757FC LDR X0, [X20]
	0x03C75800 LDR W8, [X0 + 0xE0]
	0x03C75804 CBNZ W8, 0x3C7580C
	0x03C75808 BL 0x1C16DFC
	0x03C7580C ADRP X19, 0x771000
	0x03C75810 LDR X8, [X19 + 0x968]
	0x03C75814 CBNZ X8, 0x3C7582C
	0x03C75818 ADRP X0, 0xFFFFFFFFFCE80000
	0x03C7581C ADD X0, X0, 0x7E6
	0x03C75820 BL 0x1C16CB8
	0x03C75824 MOV X8, X0
	0x03C75828 STR X0, [X19 + 0x968]
	0x03C7582C ADD X0, X31, 0x8
	0x03C75830 BLR X8
	0x03C75834 LDP X20, X19, [X31 + 0x10]
	0x03C75838 LDR X30, [X31], #0x20
	0x03C7583C RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {26}
	007 Move X21, 0x772000
	008 Move X3, [X21+1960]
	009 Move X20, [X1+16]
	010 Move X19, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51703808
	014 Add X0, X0, 1194
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X21+1960], X0
	018 Move X0, X19
	019 Move X2, X20
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move W1, 2
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 CallNoReturn X3
	026 Call 0x1C17F20

Method: System.Single get_lineHeight()

Disassembly:
	0x03C75840 STR X30, [X31 - 0x20]!
	0x03C75844 STP X20, X19, [X31 + 0x10]
	0x03C75848 ADRP X20, 0x771000
	0x03C7584C LDR X1, [X20 + 0x968]
	0x03C75850 MOV X19, X0
	0x03C75854 CBNZ X1, 0x3C7586C
	0x03C75858 ADRP X0, 0xFFFFFFFFFCE80000
	0x03C7585C ADD X0, X0, 0x7E6
	0x03C75860 BL 0x1C16CB8
	0x03C75864 MOV X1, X0
	0x03C75868 STR X0, [X20 + 0x968]
	0x03C7586C MOV X0, X19
	0x03C75870 LDP X20, X19, [X31 + 0x10]
	0x03C75874 LDR X30, [X31], #0x20
	0x03C75878 BR X1
	0x03C7587C STP X30, X19, [X31 - 0x10]!
	0x03C75880 ADRP X19, 0x771000
	0x03C75884 LDR X0, [X19 + 0x908]
	0x03C75888 CBNZ X0, 0x3C7589C
	0x03C7588C ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C75890 ADD X0, X0, 0xF08
	0x03C75894 BL 0x1C16CB8
	0x03C75898 STR X0, [X19 + 0x908]
	0x03C7589C LDP X30, X19, [X31], #0x10
	0x03C758A0 BR X0
	0x03C758A4 STP X30, X19, [X31 - 0x10]!
	0x03C758A8 ADRP X19, 0x771000
	0x03C758AC LDR X0, [X19 + 0x910]
	0x03C758B0 CBNZ X0, 0x3C758C4
	0x03C758B4 ADRP X0, 0xFFFFFFFFFCEA6000
	0x03C758B8 ADD X0, X0, 0x369
	0x03C758BC BL 0x1C16CB8
	0x03C758C0 STR X0, [X19 + 0x910]
	0x03C758C4 LDP X30, X19, [X31], #0x10
	0x03C758C8 BR X0
	0x03C758CC STR X30, [X31 - 0x20]!
	0x03C758D0 STP X20, X19, [X31 + 0x10]
	0x03C758D4 ADRP X20, 0x771000
	0x03C758D8 LDR X1, [X20 + 0x918]
	0x03C758DC MOV W19, W0
	0x03C758E0 CBNZ X1, 0x3C758F8
	0x03C758E4 ADRP X0, 0xFFFFFFFFFCEB6000
	0x03C758E8 ADD X0, X0, 0x11A
	0x03C758EC BL 0x1C16CB8
	0x03C758F0 MOV X1, X0
	0x03C758F4 STR X0, [X20 + 0x918]
	0x03C758F8 MOV W0, W19
	0x03C758FC LDP X20, X19, [X31 + 0x10]
	0x03C75900 LDR X30, [X31], #0x20
	0x03C75904 BR X1
	0x03C75908 STR X30, [X31 - 0x20]!
	0x03C7590C STP X20, X19, [X31 + 0x10]
	0x03C75910 ADRP X20, 0x771000
	0x03C75914 LDR X1, [X20 + 0x920]
	0x03C75918 MOV W19, W0
	0x03C7591C CBNZ X1, 0x3C75934
	0x03C75920 ADRP X0, 0xFFFFFFFFFCE88000
	0x03C75924 ADD X0, X0, 0x8C7
	0x03C75928 BL 0x1C16CB8
	0x03C7592C MOV X1, X0
	0x03C75930 STR X0, [X20 + 0x920]
	0x03C75934 MOV W0, W19
	0x03C75938 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x772000
	007 Move X20, 0x4A6000
	008 Move W8, [X21+2021]
	009 Move X20, [X20+2192]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4A6000
	016 Move X0, [X0+2192]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2021], W8
	020 Move X0, [X20]
	021 Move X19, [X19+16]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X20, 0x772000
	027 Move X8, [X20+1968]
	028 Compare X8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, -51712000
	031 Add X0, X0, 1729
	032 Call 0x1C17CB8
	033 Move X8, X0
	034 Move [X20+1968], X0
	035 Move X0, X19
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move V8, V0
	038 NotImplemented "Instruction FCVT not yet implemented."
	039 Add X0, X31, 8
	040 Call 0x3EB2C00
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Move D1, -0.5
	043 NotImplemented "Instruction FCMP not yet implemented."
	044 Move V0, [X31+8]
	045 Move S1, -1
	046 Move D1, 0.5
	047 NotImplemented "Instruction FCMP not yet implemented."
	048 Move V0, [X31+8]
	049 Move S1, 1
	050 NotImplemented "Instruction FCVTZS not yet implemented."
	051 NotImplemented "Instruction INVALID not yet implemented."
	052 Add S1, S0, S1
	053 And X31, X8, 1
	054 NotImplemented "Instruction FCSEL not yet implemented."
	055 Move S0, -0.5
	056 Add S0, S8, S0
	057 NotImplemented "Instruction FRINTP not yet implemented."
	058 Move S0, 0.5
	059 Add S0, S8, S0
	060 NotImplemented "Instruction FRINTM not yet implemented."
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X30, [X31+16]
	064 Move X21, [X31+24]
	065 Move V8, [X31+48]
	066 Return V0

Method: System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)

Disassembly:
	0x03C6C3C8 BL 0x33BDD8C
	0x03C6C3CC MOVZ W8, 0x1
	0x03C6C3D0 STR W8, [X20 + 0x10]
	0x03C6C3D4 STR X19, [X20 + 0x18]
	0x03C6C3D8 MOV X0, X20

ISIL:
	001 And W2, W2, 1
	002 And W3, W3, 1
	003 And W4, W4, 1
	004 And W5, W5, 1
	005 Call GUIStyle.Internal_Draw, X0, X1, X2, X3, X4, X5, X6
	006 Return 

Method: System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID)

Disassembly:
	0x03C6CB8C LDR X2, [X21 + 0x650]
	0x03C6CB90 MOV X19, X1
	0x03C6CB94 MOV X20, X0
	0x03C6CB98 CBNZ X2, 0x3C6CBB0
	0x03C6CB9C ADRP X0, 0xFFFFFFFFFCE87000

ISIL:
	001 Move W3, W31
	002 Move W4, W31
	003 Move W5, W31
	004 Move W6, W31
	005 Call GUIStyle.Draw, X0, X1, X2, X3, X4, X5, X6, X7
	006 Return 

Method: System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Boolean on)

Disassembly:
	0x03C6BB5C BL 0x3C71974
	0x03C6BB60 LDR X0, [X20]
	0x03C6BB64 LDR W8, [X0 + 0xE0]
	0x03C6BB68 CBNZ W8, 0x3C6BB74
	0x03C6BB6C BL 0x1C16DFC

ISIL:
	001 And W5, W3, 1
	002 Move W3, W31
	003 Move W4, W31
	004 Move W6, W31
	005 Call GUIStyle.Draw, X0, X1, X2, X3, X4, X5, X6, X7
	006 Return 

Method: System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Boolean on, System.Boolean hover)

Disassembly:
	0x03C69EF0 LDR X0, [X28]
	0x03C69EF4 LDR X8, [X0 + 0xB8]
	0x03C69EF8 LDR W8, [X8]
	0x03C69EFC ADDS W31, W8, 0x1
	0x03C69F00 B.EQ 0x3C69FD4
	0x03C69F04 LDR W9, [X0 + 0xE0]
	0x03C69F08 CBNZ W9, 0x3C69F1C
	0x03C69F0C BL 0x1C16DFC
	0x03C69F10 LDR X0, [X28]
	0x03C69F14 LDR X8, [X0 + 0xB8]
	0x03C69F18 LDR W8, [X8]
	0x03C69F1C CMP W8, W20
	0x03C69F20 B.EQ 0x3C69FD4
	0x03C69F24 ADRP X8, 0x48A000
	0x03C69F28 LDR X8, [X8 + 0x6C0]
	0x03C69F2C LDR X0, [X8]
	0x03C69F30 ADRP X8, 0x4F7000
	0x03C69F34 LDR X8, [X8 + 0x298]
	0x03C69F38 LDR W9, [X0 + 0xE0]
	0x03C69F3C LDR X25, [X8]
	0x03C69F40 CBNZ W9, 0x3C69F48
	0x03C69F44 BL 0x1C16DFC
	0x03C69F48 MOV X0, X25
	0x03C69F4C MOV X1, X31
	0x03C69F50 BL 0x338C698
	0x03C69F54 LDR X8, [X28]
	0x03C69F58 MOV X25, X0
	0x03C69F5C LDR W9, [X8 + 0xE0]
	0x03C69F60 CBNZ W9, 0x3C69F70
	0x03C69F64 MOV X0, X8
	0x03C69F68 BL 0x1C16DFC
	0x03C69F6C LDR X8, [X28]
	0x03C69F70 LDR X0, [X27]
	0x03C69F74 LDR X8, [X8 + 0xB8]
	0x03C69F78 LDR W9, [X0 + 0xE0]
	0x03C69F7C LDR W26, [X8]
	0x03C69F80 CBNZ W9, 0x3C69F88
	0x03C69F84 BL 0x1C16DFC
	0x03C69F88 MOV X0, X25
	0x03C69F8C MOV W1, W26
	0x03C69F90 BL 0x3C699A0
	0x03C69F94 CBZ X0, 0x3C6A1F0
	0x03C69F98 ADRP X9, 0x4F7000
	0x03C69F9C LDR X9, [X9 + 0x2A0]
	0x03C69FA0 LDR X8, [X0]
	0x03C69FA4 LDR X1, [X9]
	0x03C69FA8 LDRB W10, [X8 + 0x130]
	0x03C69FAC LDRB W9, [X1 + 0x130]
	0x03C69FB0 CMP W10, W9
	0x03C69FB4 B.CC 0x3C6A1F4
	0x03C69FB8 LDR X8, [X8 + 0xC8]
	0x03C69FBC ADD X8, X8, X9, 0x3, LSL

ISIL:
	001 Move [X31-96], D11
	002 Move [X31-88], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X25, 0x77E000
	014 Move X24, 0x4B7000
	015 Move W8, [X25+2022]
	016 Move X24, [X24+1480]
	017 Move W22, W4
	018 Move W21, W3
	019 Move W19, W2
	020 Move X20, X1
	021 Move V8, V3
	022 Move V9, V2
	023 Move V10, V1
	024 Move V11, V0
	025 Move X23, X0
	026 Move TEMP, X8
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfEqual {35}
	030 Move X0, 0x4B7000
	031 Move X0, [X0+1480]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X25+2022], W8
	035 Move X0, [X24]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Call GUIUtility.get_hotControl
	041 Move W24, W0
	042 Move W0, W19
	043 Call GUIUtility.HasKeyFocus, X0
	044 NotImplemented "Instruction CMP not yet implemented."
	045 And W6, W0, 1
	046 And W3, W22, 1
	047 And W5, W21, 1
	048 Move V2, V9
	049 Move V3, V8
	050 Move X0, X23
	051 Move X1, X20
	052 Move W2, W19
	053 Move X20, [X31+80]
	054 Move X19, [X31+88]
	055 Move X22, [X31+64]
	056 Move X21, [X31+72]
	057 Move X24, [X31+48]
	058 Move X23, [X31+56]
	059 Move X30, [X31+32]
	060 Move X25, [X31+40]
	061 Move D9, [X31+16]
	062 Move D8, [X31+24]
	063 NotImplemented "Instruction CSET not yet implemented."
	064 Move V0, V11
	065 Move V1, V10
	066 Move D11, [X31+96]
	067 Move D10, [X31+104]
	068 Call GUIStyle.Draw, X0, X1, X2, X3, X4, X5, X6, X7
	069 Return 

Method: System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlId, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)

Disassembly:
	0x03C7593C LDR X30, [X31], #0x20
	0x03C75940 BR X1
	0x03C75944 STR X30, [X31 - 0x20]!
	0x03C75948 STP X20, X19, [X31 + 0x10]
	0x03C7594C ADRP X20, 0x771000
	0x03C75950 LDR X1, [X20 + 0x928]
	0x03C75954 MOV W19, W0
	0x03C75958 CBNZ X1, 0x3C75970
	0x03C7595C ADRP X0, 0xFFFFFFFFFCE9A000

ISIL:
	001 Add W31, W2, 1
	002 And W3, W5, 1
	003 Call GUIStyle.Internal_Draw2, X0, X1, X2, X3, X4
	004 Return 
	005 And W2, W3, 1
	006 And W3, W4, 1
	007 And W4, W5, 1
	008 And W5, W6, 1
	009 Call GUIStyle.Internal_Draw, X0, X1, X2, X3, X4, X5, X6
	010 Return 

Method: System.Void DrawCursor(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Int32 character)

Disassembly:
	0x03C75A20 STP X20, X19, [X31 + 0x10]
	0x03C75A24 ADRP X21, 0x771000
	0x03C75A28 ADRP X20, 0x4AA000
	0x03C75A2C LDRB W8, [X21 + 0x93C]
	0x03C75A30 LDR X20, [X20 + 0x5C8]
	0x03C75A34 MOV W19, W0
	0x03C75A38 TBNZ X8, 0x0, 0x3C75A50
	0x03C75A3C ADRP X0, 0x4AA000
	0x03C75A40 LDR X0, [X0 + 0x5C8]
	0x03C75A44 BL 0x1C16CF4
	0x03C75A48 MOVZ W8, 0x1
	0x03C75A4C STRB W8, [X21 + 0x93C]
	0x03C75A50 LDR X0, [X20]
	0x03C75A54 LDR W8, [X0 + 0xE0]
	0x03C75A58 CBNZ W8, 0x3C75A64
	0x03C75A5C BL 0x1C16DFC
	0x03C75A60 LDR X0, [X20]
	0x03C75A64 LDR X8, [X0 + 0xB8]
	0x03C75A68 AND W9, W19, 0x1
	0x03C75A6C LDP X20, X19, [X31 + 0x10]
	0x03C75A70 STRB W9, [X8 + 0x50]
	0x03C75A74 LDP X30, X21, [X31], #0x20
	0x03C75A78 RET
	0x03C75A7C STR X30, [X31 - 0x20]!
	0x03C75A80 STP X20, X19, [X31 + 0x10]
	0x03C75A84 ADRP X20, 0x771000
	0x03C75A88 ADRP X19, 0x4AA000
	0x03C75A8C LDRB W8, [X20 + 0x93F]
	0x03C75A90 LDR X19, [X19 + 0x5C8]
	0x03C75A94 TBNZ X8, 0x0, 0x3C75AAC
	0x03C75A98 ADRP X0, 0x4AA000
	0x03C75A9C LDR X0, [X0 + 0x5C8]
	0x03C75AA0 BL 0x1C16CF4
	0x03C75AA4 MOVZ W8, 0x1
	0x03C75AA8 STRB W8, [X20 + 0x93F]
	0x03C75AAC LDR X0, [X19]
	0x03C75AB0 LDR W8, [X0 + 0xE0]
	0x03C75AB4 CBNZ W8, 0x3C75AC0
	0x03C75AB8 BL 0x1C16DFC
	0x03C75ABC LDR X0, [X19]
	0x03C75AC0 LDR X8, [X0 + 0xB8]
	0x03C75AC4 LDR X8, [X8 + 0x10]
	0x03C75AC8 CBZ X8, 0x3C75AE4
	0x03C75ACC LDR X2, [X8 + 0x18]
	0x03C75AD0 LDR X0, [X8 + 0x40]
	0x03C75AD4 LDR X1, [X8 + 0x28]
	0x03C75AD8 LDP X20, X19, [X31 + 0x10]
	0x03C75ADC LDR X30, [X31], #0x20
	0x03C75AE0 BR X2
	0x03C75AE4 LDP X20, X19, [X31 + 0x10]
	0x03C75AE8 LDR X30, [X31], #0x20
	0x03C75AEC RET
	0x03C75AF0 STR X30, [X31 - 0x20]!
	0x03C75AF4 STP X20, X19, [X31 + 0x10]
	0x03C75AF8 ADRP X20, 0x771000
	0x03C75AFC ADRP X19, 0x4AA000
	0x03C75B00 LDRB W8, [X20 + 0x940]
	0x03C75B04 LDR X19, [X19 + 0x5C8]
	0x03C75B08 TBNZ X8, 0x0, 0x3C75B20
	0x03C75B0C ADRP X0, 0x4AA000
	0x03C75B10 LDR X0, [X0 + 0x5C8]
	0x03C75B14 BL 0x1C16CF4
	0x03C75B18 MOVZ W8, 0x1
	0x03C75B1C STRB W8, [X20 + 0x940]
	0x03C75B20 LDR X0, [X19]
	0x03C75B24 LDR W8, [X0 + 0xE0]
	0x03C75B28 CBNZ W8, 0x3C75B34
	0x03C75B2C BL 0x1C16DFC
	0x03C75B30 LDR X0, [X19]
	0x03C75B34 LDR X8, [X0 + 0xB8]
	0x03C75B38 LDR X8, [X8 + 0x18]
	0x03C75B3C CBZ X8, 0x3C75B58
	0x03C75B40 LDR X2, [X8 + 0x18]
	0x03C75B44 LDR X0, [X8 + 0x40]
	0x03C75B48 LDR X1, [X8 + 0x28]
	0x03C75B4C LDP X20, X19, [X31 + 0x10]
	0x03C75B50 LDR X30, [X31], #0x20
	0x03C75B54 BR X2
	0x03C75B58 LDP X20, X19, [X31 + 0x10]
	0x03C75B5C LDR X30, [X31], #0x20
	0x03C75B60 RET
	0x03C75B64 STP X30, X19, [X31 - 0x10]!
	0x03C75B68 ADRP X0, 0x4EB000
	0x03C75B6C LDR X0, [X0 + 0x2F0]
	0x03C75B70 BL 0x1C16D08
	0x03C75B74 BL 0x1C16F10
	0x03C75B78 MOV X19, X0
	0x03C75B7C BL 0x3C75B98
	0x03C75B80 ADRP X0, 0x4EB000
	0x03C75B84 LDR X0, [X0 + 0x560]
	0x03C75B88 BL 0x1C16D08
	0x03C75B8C MOV X1, X0
	0x03C75B90 MOV X0, X19
	0x03C75B94 BL 0x1C16DEC
	0x03C75B98 STP X30, X21, [X31 - 0x20]!
	0x03C75B9C STP X20, X19, [X31 + 0x10]
	0x03C75BA0 ADRP X21, 0x771000
	0x03C75BA4 ADRP X20, 0x47E000
	0x03C75BA8 LDRB W8, [X21 + 0x970]
	0x03C75BAC LDR X20, [X20 + 0x7D0]
	0x03C75BB0 MOV X19, X0
	0x03C75BB4 TBNZ X8, 0x0, 0x3C75BD8
	0x03C75BB8 ADRP X0, 0x47E000
	0x03C75BBC LDR X0, [X0 + 0x7D0]
	0x03C75BC0 BL 0x1C16CF4
	0x03C75BC4 ADRP X0, 0x4AA000
	0x03C75BC8 LDR X0, [X0 + 0x5C8]
	0x03C75BCC BL 0x1C16CF4
	0x03C75BD0 MOVZ W8, 0x1
	0x03C75BD4 STRB W8, [X21 + 0x970]
	0x03C75BD8 LDR X0, [X20]
	0x03C75BDC ADRP X20, 0x4AA000
	0x03C75BE0 LDR W8, [X0 + 0xE0]
	0x03C75BE4 LDR X20, [X20 + 0x5C8]
	0x03C75BE8 CBNZ W8, 0x3C75BF0
	0x03C75BEC BL 0x1C16DFC
	0x03C75BF0 MOV X0, X19
	0x03C75BF4 MOV X1, X31
	0x03C75BF8 BL 0x33B2C54
	0x03C75BFC LDR X0, [X20]
	0x03C75C00 LDR W8, [X0 + 0xE0]
	0x03C75C04 CBNZ W8, 0x3C75C0C
	0x03C75C08 BL 0x1C16DFC
	0x03C75C0C ADRP X19, 0x771000
	0x03C75C10 LDRB W8, [X19 + 0x985]
	0x03C75C14 CBNZ W8, 0x3C75C2C
	0x03C75C18 ADRP X0, 0x4AA000
	0x03C75C1C LDR X0, [X0 + 0x5C8]
	0x03C75C20 BL 0x1C16CF4
	0x03C75C24 MOVZ W8, 0x1
	0x03C75C28 STRB W8, [X19 + 0x985]
	0x03C75C2C LDR X0, [X20]
	0x03C75C30 LDR W8, [X0 + 0xE0]
	0x03C75C34 CBNZ W8, 0x3C75C40

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X22, 0x772000
	014 Move W8, [X22+2023]
	015 Move W19, W3
	016 Move X20, X1
	017 Move V8, V3
	018 Move V9, V2
	019 Move V10, V1
	020 Move V11, V0
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {34}
	026 Move X0, 0x4A6000
	027 Move X0, [X0+2192]
	028 Call 0x1C17CF4
	029 Move X0, 0x4A6000
	030 Move X0, [X0+1216]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X22+2023], W8
	034 Move X22, 0x772000
	035 Move X23, 0x4E5000
	036 Move W8, [X22+1296]
	037 Move X23, [X23+32]
	038 Move TEMP, X8
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {47}
	042 Move X0, 0x4E5000
	043 Move X0, [X0+32]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X22+1296], W8
	047 Move X8, [X23]
	048 Move X8, [X8+184]
	049 Move X22, [X8]
	050 Compare X22, 0
	051 JumpIfEqual {168}
	052 Move X23, 0x772000
	053 Move X8, [X23+1192]
	054 Compare X8, 0
	055 JumpIfNotEqual {61}
	056 Move X0, -51916800
	057 Add X0, X0, 1382
	058 Call 0x1C17CB8
	059 Move X8, X0
	060 Move [X23+1192], X0
	061 Move X0, X22
	062 NotImplemented "Instruction BLR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move X22, 0x4A6000
	065 Move X22, [X22+1216]
	066 Move X0, [X22]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Call GUI.get_skin
	072 Compare X0, 0
	073 JumpIfEqual {168}
	074 Move X8, [X0+224]
	075 Compare X8, 0
	076 JumpIfEqual {168}
	077 Move V12, [X8+36]
	078 NotImplemented "Instruction FCMP not yet implemented."
	079 Move X23, 0x772000
	080 Move X0, [X23+1736]
	081 Compare X0, 0
	082 JumpIfNotEqual {87}
	083 Move X0, -51683328
	084 Add X0, X0, 3918
	085 Call 0x1C17CB8
	086 Move [X23+1736], X0
	087 NotImplemented "Instruction BLR not yet implemented."
	088 Move V12, V0
	089 Move X0, X31
	090 Call Time.get_realtimeSinceStartup
	091 Move X8, 0x4A6000
	092 Move X8, [X8+2192]
	093 Move V13, V0
	094 Move X0, [X8]
	095 Move W8, [X0+224]
	096 Compare W8, 0
	097 JumpIfNotEqual {99}
	098 Call 0x1C17DFC
	099 Move X23, 0x772000
	100 Move X0, [X23+2000]
	101 Compare X0, 0
	102 JumpIfNotEqual {107}
	103 Move X0, -51683328
	104 Add X0, X0, 4086
	105 Call 0x1C17CB8
	106 Move [X23+2000], X0
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Subtract S0, S13, S0
	109 Move V1, V12
	110 Call 0x3EB2BA0
	111 NotImplemented "Instruction FCMP not yet implemented."
	112 NotImplemented "Instruction FDIV not yet implemented."
	113 Move S1, 0.5
	114 Move S4, W31
	115 Move S5, W31
	116 NotImplemented "Instruction FCMP not yet implemented."
	117 Move S6, W31
	118 Move S7, W31
	119 Move X0, [X22]
	120 Move W8, [X0+224]
	121 Compare W8, 0
	122 JumpIfNotEqual {124}
	123 Call 0x1C17DFC
	124 Call GUI.get_skin
	125 Compare X0, 0
	126 JumpIfEqual {168}
	127 Move X8, [X0+224]
	128 Compare X8, 0
	129 JumpIfEqual {168}
	130 Move S4, [X8+20]
	131 Move S5, [X8+24]
	132 Move S6, [X8+28]
	133 Move S7, [X8+32]
	134 Move X0, X21
	135 Move V0, V11
	136 Move V1, V10
	137 Move V2, V9
	138 Move V3, V8
	139 Move X1, X20
	140 Move W2, W19
	141 Move X20, [X31+80]
	142 Move X19, [X31+88]
	143 Move X22, [X31+64]
	144 Move X21, [X31+72]
	145 Move X30, [X31+48]
	146 Move X23, [X31+56]
	147 Move D9, [X31+32]
	148 Move D8, [X31+40]
	149 Move D11, [X31+16]
	150 Move D10, [X31+24]
	151 Move D13, [X31+96]
	152 Move D12, [X31+104]
	153 Call GUIStyle.Internal_DrawCursor, X0, X1, X2, X3, X4
	154 Return 
	155 Move X20, [X31+80]
	156 Move X19, [X31+88]
	157 Move X22, [X31+64]
	158 Move X21, [X31+72]
	159 Move X30, [X31+48]
	160 Move X23, [X31+56]
	161 Move D9, [X31+32]
	162 Move D8, [X31+40]
	163 Move D11, [X31+16]
	164 Move D10, [X31+24]
	165 Move D13, [X31+96]
	166 Move D12, [X31+104]
	167 Return 
	168 Call 0x1C17F20

Method: System.Void DrawWithTextSelection(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Boolean isActive, System.Boolean hasKeyboardFocus, System.Int32 firstSelectedCharacter, System.Int32 lastSelectedCharacter, System.Boolean drawSelectionAsComposition, UnityEngine.Color selectionColor)

Disassembly:
	0x03C75C38 BL 0x1C16DFC
	0x03C75C3C LDR X0, [X20]
	0x03C75C40 LDR X8, [X0 + 0xB8]
	0x03C75C44 LDP X20, X19, [X31 + 0x10]
	0x03C75C48 MOVZ W9, 0x1
	0x03C75C4C STRB W9, [X8 + 0x50]
	0x03C75C50 LDP X30, X21, [X31], #0x20
	0x03C75C54 RET
	0x03C75C58 STR X30, [X31 - 0x50]!
	0x03C75C5C STP X26, X25, [X31 + 0x10]
	0x03C75C60 STP X24, X23, [X31 + 0x20]
	0x03C75C64 STP X22, X21, [X31 + 0x30]
	0x03C75C68 STP X20, X19, [X31 + 0x40]
	0x03C75C6C ADRP X22, 0x771000
	0x03C75C70 ADRP X24, 0x4AA000
	0x03C75C74 LDRB W8, [X22 + 0x945]
	0x03C75C78 LDR X24, [X24 + 0x5C8]
	0x03C75C7C MOV X19, X2
	0x03C75C80 MOV X20, X1
	0x03C75C84 MOV W21, W0
	0x03C75C88 TBNZ X8, 0x0, 0x3C75CA0
	0x03C75C8C ADRP X0, 0x4AA000
	0x03C75C90 LDR X0, [X0 + 0x5C8]
	0x03C75C94 BL 0x1C16CF4
	0x03C75C98 MOVZ W8, 0x1
	0x03C75C9C STRB W8, [X22 + 0x945]
	0x03C75CA0 LDR X0, [X24]
	0x03C75CA4 LDR W8, [X0 + 0xE0]
	0x03C75CA8 CBNZ W8, 0x3C75CB4
	0x03C75CAC BL 0x1C16DFC
	0x03C75CB0 LDR X0, [X24]
	0x03C75CB4 LDR X8, [X0 + 0xB8]
	0x03C75CB8 LDR X9, [X8 + 0x40]
	0x03C75CBC CBZ X9, 0x3C75D9C
	0x03C75CC0 LDR W9, [X0 + 0xE0]
	0x03C75CC4 CBNZ W9, 0x3C75CD4
	0x03C75CC8 BL 0x1C16DFC
	0x03C75CCC LDR X8, [X24]
	0x03C75CD0 LDR X8, [X8 + 0xB8]
	0x03C75CD4 LDR X22, [X8 + 0x48]
	0x03C75CD8 CBZ X22, 0x3C75E14
	0x03C75CDC ADRP X23, 0x771000
	0x03C75CE0 LDR X8, [X23 + 0x4E8]
	0x03C75CE4 CBNZ X8, 0x3C75CFC
	0x03C75CE8 ADRP X0, 0xFFFFFFFFFCEB0000
	0x03C75CEC ADD X0, X0, 0x435
	0x03C75CF0 BL 0x1C16CB8
	0x03C75CF4 MOV X8, X0
	0x03C75CF8 STR X0, [X23 + 0x4E8]
	0x03C75CFC MOV X0, X22
	0x03C75D00 MOV X1, X20
	0x03C75D04 BLR X8
	0x03C75D08 LDR X8, [X24]
	0x03C75D0C LDR X9, [X8 + 0xB8]
	0x03C75D10 LDR X22, [X9 + 0x48]
	0x03C75D14 CBZ X22, 0x3C75E14
	0x03C75D18 ADRP X23, 0x771000
	0x03C75D1C LDR X8, [X23 + 0x4A8]
	0x03C75D20 LDR X25, [X9 + 0x40]
	0x03C75D24 CBNZ X8, 0x3C75D3C
	0x03C75D28 ADRP X0, 0xFFFFFFFFFCE7C000
	0x03C75D2C ADD X0, X0, 0x566
	0x03C75D30 BL 0x1C16CB8
	0x03C75D34 MOV X8, X0
	0x03C75D38 STR X0, [X23 + 0x4A8]
	0x03C75D3C MOV X0, X22
	0x03C75D40 BLR X8
	0x03C75D44 LDR X8, [X24]
	0x03C75D48 LDR X8, [X8 + 0xB8]
	0x03C75D4C LDR X23, [X8 + 0x48]
	0x03C75D50 CBZ X23, 0x3C75E14
	0x03C75D54 ADRP X26, 0x771000
	0x03C75D58 LDR X8, [X26 + 0x488]
	0x03C75D5C MOV W22, W0
	0x03C75D60 CBNZ X8, 0x3C75D78
	0x03C75D64 ADRP X0, 0xFFFFFFFFFCEA8000
	0x03C75D68 ADD X0, X0, 0x5AB
	0x03C75D6C BL 0x1C16CB8
	0x03C75D70 MOV X8, X0
	0x03C75D74 STR X0, [X26 + 0x488]
	0x03C75D78 MOV X0, X23
	0x03C75D7C BLR X8
	0x03C75D80 CBZ X25, 0x3C75E14
	0x03C75D84 MOV W2, W0
	0x03C75D88 LDR X8, [X25 + 0x18]
	0x03C75D8C LDR X0, [X25 + 0x40]
	0x03C75D90 LDR X3, [X25 + 0x28]
	0x03C75D94 MOV W1, W22
	0x03C75D98 BLR X8
	0x03C75D9C STRB W31, [X19]
	0x03C75DA0 LDR X0, [X24]
	0x03C75DA4 LDR W8, [X0 + 0xE0]
	0x03C75DA8 CBNZ W8, 0x3C75DB4
	0x03C75DAC BL 0x1C16DFC
	0x03C75DB0 LDR X0, [X24]
	0x03C75DB4 LDR X8, [X0 + 0xB8]
	0x03C75DB8 LDR X9, [X8 + 0x20]
	0x03C75DBC CBZ X9, 0x3C75DFC
	0x03C75DC0 LDR W9, [X0 + 0xE0]
	0x03C75DC4 CBNZ W9, 0x3C75DD4
	0x03C75DC8 BL 0x1C16DFC
	0x03C75DCC LDR X8, [X24]
	0x03C75DD0 LDR X8, [X8 + 0xB8]
	0x03C75DD4 LDR X8, [X8 + 0x20]
	0x03C75DD8 CBZ X8, 0x3C75E14
	0x03C75DDC LDR X9, [X8 + 0x18]
	0x03C75DE0 LDR X0, [X8 + 0x40]
	0x03C75DE4 LDR X3, [X8 + 0x28]
	0x03C75DE8 MOV W1, W21
	0x03C75DEC MOV X2, X20
	0x03C75DF0 BLR X9
	0x03C75DF4 AND W8, W0, 0x1
	0x03C75DF8 STRB W8, [X19]
	0x03C75DFC LDP X20, X19, [X31 + 0x40]
	0x03C75E00 LDP X22, X21, [X31 + 0x30]
	0x03C75E04 LDP X24, X23, [X31 + 0x20]
	0x03C75E08 LDP X26, X25, [X31 + 0x10]
	0x03C75E0C LDR X30, [X31], #0x50
	0x03C75E10 RET
	0x03C75E14 BL 0x1C16F20
	0x03C75E18 STR X30, [X31 - 0x20]!
	0x03C75E1C STP X20, X19, [X31 + 0x10]
	0x03C75E20 ADRP X19, 0x771000
	0x03C75E24 ADRP X20, 0x4AA000
	0x03C75E28 LDRB W8, [X19 + 0x946]
	0x03C75E2C LDR X20, [X20 + 0x5C8]
	0x03C75E30 TBNZ X8, 0x0, 0x3C75E48
	0x03C75E34 ADRP X0, 0x4AA000
	0x03C75E38 LDR X0, [X0 + 0x5C8]
	0x03C75E3C BL 0x1C16CF4
	0x03C75E40 MOVZ W8, 0x1
	0x03C75E44 STRB W8, [X19 + 0x946]
	0x03C75E48 LDR X0, [X20]
	0x03C75E4C LDR W8, [X0 + 0xE0]
	0x03C75E50 CBNZ W8, 0x3C75E58
	0x03C75E54 BL 0x1C16DFC
	0x03C75E58 ADRP X19, 0x771000
	0x03C75E5C LDR X0, [X19 + 0x8B8]
	0x03C75E60 CBNZ X0, 0x3C75E74
	0x03C75E64 ADRP X0, 0xFFFFFFFFFCE90000
	0x03C75E68 ADD X0, X0, 0x643
	0x03C75E6C BL 0x1C16CB8
	0x03C75E70 STR X0, [X19 + 0x8B8]
	0x03C75E74 BLR X0
	0x03C75E78 ADRP X19, 0x771000
	0x03C75E7C LDR X0, [X19 + 0x930]
	0x03C75E80 CBNZ X0, 0x3C75E94
	0x03C75E84 ADRP X0, 0xFFFFFFFFFCE84000
	0x03C75E88 ADD X0, X0, 0xA91
	0x03C75E8C BL 0x1C16CB8
	0x03C75E90 STR X0, [X19 + 0x930]
	0x03C75E94 LDP X20, X19, [X31 + 0x10]
	0x03C75E98 LDR X30, [X31], #0x20
	0x03C75E9C BR X0
	0x03C75EA0 STP X30, X23, [X31 - 0x30]!
	0x03C75EA4 STP X22, X21, [X31 + 0x10]
	0x03C75EA8 STP X20, X19, [X31 + 0x20]
	0x03C75EAC ADRP X23, 0x771000
	0x03C75EB0 ADRP X22, 0x4AA000
	0x03C75EB4 LDRB W8, [X23 + 0x947]
	0x03C75EB8 LDR X22, [X22 + 0x5C8]

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+48], D15
	003 Move [X31+56], D14
	004 Move [X31+64], D13
	005 Move [X31+72], D12
	006 Move [X31+80], D11
	007 Move [X31+88], D10
	008 Move [X31+96], D9
	009 Move [X31+104], D8
	010 Move [X31+112], X30
	011 Move [X31+128], X28
	012 Move [X31+136], X27
	013 Move [X31+144], X26
	014 Move [X31+152], X25
	015 Move [X31+160], X24
	016 Move [X31+168], X23
	017 Move [X31+176], X22
	018 Move [X31+184], X21
	019 Move [X31+192], X20
	020 Move [X31+200], X19
	021 Move [X31+120], S2
	022 Move [X31+128], S3
	023 Move X27, 0x772000
	024 Move X26, 0x4A6000
	025 Move W8, [X27+2024]
	026 Move X26, [X26+1216]
	027 Move V9, V7
	028 Move V10, V6
	029 Move V13, V5
	030 Move V11, V4
	031 Move W21, W6
	032 Move W24, W5
	033 Move W19, W4
	034 Move W22, W3
	035 Move W23, W2
	036 Move X20, X1
	037 Move V12, V1
	038 Move V15, V0
	039 Move X25, X0
	040 Move TEMP, X8
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {52}
	044 Move X0, 0x4A6000
	045 Move X0, [X0+2192]
	046 Call 0x1C17CF4
	047 Move X0, 0x4A6000
	048 Move X0, [X0+1216]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X27+2024], W8
	052 Move X0, [X26]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Call GUI.get_skin
	058 Compare X0, 0
	059 JumpIfEqual {196}
	060 Move X8, [X0+224]
	061 Compare X8, 0
	062 JumpIfEqual {196}
	063 Move V8, [X8+36]
	064 Move X27, 0x4A6000
	065 Move X27, [X27+2192]
	066 NotImplemented "Instruction FCMP not yet implemented."
	067 Move X28, 0x772000
	068 Move X0, [X28+1736]
	069 Compare X0, 0
	070 JumpIfNotEqual {75}
	071 Move X0, -51683328
	072 Add X0, X0, 3918
	073 Call 0x1C17CB8
	074 Move [X28+1736], X0
	075 NotImplemented "Instruction BLR not yet implemented."
	076 Move V8, V0
	077 Move X0, X31
	078 Move [X31+40], S9
	079 Move [X31+48], S10
	080 Call Time.get_realtimeSinceStartup
	081 Move X0, [X27]
	082 Move V9, V0
	083 Move W8, [X0+224]
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X27, 0x772000
	088 Move X0, [X27+2000]
	089 Move V10, V13
	090 Compare X0, 0
	091 JumpIfNotEqual {96}
	092 Move X0, -51683328
	093 Add X0, X0, 4086
	094 Call 0x1C17CB8
	095 Move [X27+2000], X0
	096 NotImplemented "Instruction BLR not yet implemented."
	097 Subtract S0, S9, S0
	098 Move V1, V8
	099 Call 0x3EB2BA0
	100 NotImplemented "Instruction FCMP not yet implemented."
	101 NotImplemented "Instruction FDIV not yet implemented."
	102 Move S1, 0.5
	103 Move S8, W31
	104 Move S9, W31
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 Move S13, W31
	107 Move S14, W31
	108 Move X0, [X26]
	109 Move W8, [X0+224]
	110 Compare W8, 0
	111 JumpIfNotEqual {113}
	112 Call 0x1C17DFC
	113 Call GUI.get_skin
	114 Compare X0, 0
	115 JumpIfEqual {196}
	116 Move X8, [X0+224]
	117 Compare X8, 0
	118 JumpIfEqual {196}
	119 Move S8, [X8+20]
	120 Move S9, [X8+24]
	121 Move S13, [X8+28]
	122 Move S14, [X8+32]
	123 Move X26, 0x772000
	124 Move X27, 0x4E5000
	125 Move W8, [X26+1296]
	126 Move X27, [X27+32]
	127 Move TEMP, X8
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfEqual {136}
	131 Move X0, 0x4E5000
	132 Move X0, [X0+32]
	133 Call 0x1C17CF4
	134 Move W8, 1
	135 Move [X26+1296], W8
	136 Move X8, [X27]
	137 Move X8, [X8+184]
	138 Move X0, [X8]
	139 Compare X0, 0
	140 JumpIfEqual {196}
	141 Call Event.get_mousePosition, X0
	142 NotImplemented "Instruction FCMP not yet implemented."
	143 Move W2, W31
	144 Move S2, [X31+120]
	145 Move S3, [X31+124]
	146 NotImplemented "Instruction FCMP not yet implemented."
	147 Add S4, S15, S2
	148 NotImplemented "Instruction FCMP not yet implemented."
	149 Add S0, S12, S3
	150 NotImplemented "Instruction FCMP not yet implemented."
	151 NotImplemented "Instruction CSET not yet implemented."
	152 Move S2, [X31+120]
	153 Move S3, [X31+124]
	154 Move V1, [X31+44]
	155 Move V0, [X31+40]
	156 And W3, W23, 1
	157 And W5, W22, 1
	158 And W6, W21, 1
	159 Move [X31+16], S1
	160 Move [X31+24], S0
	161 Move X0, X25
	162 Move V0, V15
	163 Move V1, V12
	164 Move X1, X20
	165 Move W4, W31
	166 Move W7, W19
	167 Move V4, V8
	168 Move V5, V9
	169 Move V6, V13
	170 Move V7, V14
	171 Move [X31+8], S11
	172 Move [X31+16], S10
	173 Move [X31], W24
	174 Call GUIStyle.Internal_DrawWithTextSelection, X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11
	175 Move X20, [X31+192]
	176 Move X19, [X31+200]
	177 Move X22, [X31+176]
	178 Move X21, [X31+184]
	179 Move X24, [X31+160]
	180 Move X23, [X31+168]
	181 Move X26, [X31+144]
	182 Move X25, [X31+152]
	183 Move X28, [X31+128]
	184 Move X27, [X31+136]
	185 Move X30, [X31+112]
	186 Move D9, [X31+96]
	187 Move D8, [X31+104]
	188 Move D11, [X31+80]
	189 Move D10, [X31+88]
	190 Move D13, [X31+64]
	191 Move D12, [X31+72]
	192 Move D15, [X31+48]
	193 Move D14, [X31+56]
	194 Add X31, X31, 208
	195 Return 
	196 Call 0x1C17F20

Method: System.Void DrawWithTextSelection(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Int32 firstSelectedCharacter, System.Int32 lastSelectedCharacter, System.Boolean drawSelectionAsComposition)

Disassembly:
	0x03C75EBC MOV W20, W2
	0x03C75EC0 MOV W19, W1
	0x03C75EC4 MOV W21, W0
	0x03C75EC8 TBNZ X8, 0x0, 0x3C75EEC
	0x03C75ECC ADRP X0, 0x4EB000
	0x03C75ED0 LDR X0, [X0 + 0x2B0]
	0x03C75ED4 BL 0x1C16CF4
	0x03C75ED8 ADRP X0, 0x4AA000
	0x03C75EDC LDR X0, [X0 + 0x5C8]
	0x03C75EE0 BL 0x1C16CF4
	0x03C75EE4 MOVZ W8, 0x1
	0x03C75EE8 STRB W8, [X23 + 0x947]
	0x03C75EEC LDR X0, [X22]
	0x03C75EF0 LDR W8, [X0 + 0xE0]
	0x03C75EF4 CBNZ W8, 0x3C75F00
	0x03C75EF8 BL 0x1C16DFC
	0x03C75EFC LDR X0, [X22]
	0x03C75F00 LDR X8, [X0 + 0xB8]
	0x03C75F04 STP W21, W19, [X8 + 0x4]
	0x03C75F08 BL 0x3C75F4C
	0x03C75F0C CBZ W20, 0x3C75F3C
	0x03C75F10 ADRP X8, 0x4EB000
	0x03C75F14 LDR X8, [X8 + 0x2B0]
	0x03C75F18 LDR X0, [X8]
	0x03C75F1C LDR W8, [X0 + 0xE0]
	0x03C75F20 CBNZ W8, 0x3C75F28
	0x03C75F24 BL 0x1C16DFC
	0x03C75F28 MOV W0, W19
	0x03C75F2C LDP X20, X19, [X31 + 0x20]
	0x03C75F30 LDP X22, X21, [X31 + 0x10]
	0x03C75F34 LDP X30, X23, [X31], #0x30
	0x03C75F38 B 0x3C6F99C
	0x03C75F3C LDP X20, X19, [X31 + 0x20]
	0x03C75F40 LDP X22, X21, [X31 + 0x10]
	0x03C75F44 LDP X30, X23, [X31], #0x30
	0x03C75F48 RET
	0x03C75F4C STP X30, X21, [X31 - 0x20]!
	0x03C75F50 STP X20, X19, [X31 + 0x10]
	0x03C75F54 ADRP X20, 0x771000
	0x03C75F58 ADRP X19, 0x4A5000
	0x03C75F5C LDRB W8, [X20 + 0x94C]
	0x03C75F60 LDR X19, [X19 + 0x4C0]
	0x03C75F64 TBNZ X8, 0x0, 0x3C75F88
	0x03C75F68 ADRP X0, 0x4AA000
	0x03C75F6C LDR X0, [X0 + 0x5C8]
	0x03C75F70 BL 0x1C16CF4
	0x03C75F74 ADRP X0, 0x4A5000
	0x03C75F78 LDR X0, [X0 + 0x4C0]
	0x03C75F7C BL 0x1C16CF4
	0x03C75F80 MOVZ W8, 0x1
	0x03C75F84 STRB W8, [X20 + 0x94C]
	0x03C75F88 LDR X0, [X19]
	0x03C75F8C ADRP X20, 0x4AA000
	0x03C75F90 LDR W8, [X0 + 0xE0]
	0x03C75F94 LDR X20, [X20 + 0x5C8]
	0x03C75F98 CBNZ W8, 0x3C75FA0
	0x03C75F9C BL 0x1C16DFC
	0x03C75FA0 MOV X0, X31
	0x03C75FA4 BL 0x3C67288
	0x03C75FA8 LDR X0, [X20]
	0x03C75FAC LDR W8, [X0 + 0xE0]
	0x03C75FB0 CBNZ W8, 0x3C75FB8
	0x03C75FB4 BL 0x1C16DFC
	0x03C75FB8 ADRP X21, 0x771000
	0x03C75FBC LDRB W8, [X21 + 0x985]
	0x03C75FC0 CBNZ W8, 0x3C75FD8
	0x03C75FC4 ADRP X0, 0x4AA000
	0x03C75FC8 LDR X0, [X0 + 0x5C8]
	0x03C75FCC BL 0x1C16CF4
	0x03C75FD0 MOVZ W8, 0x1
	0x03C75FD4 STRB W8, [X21 + 0x985]
	0x03C75FD8 LDR X0, [X20]
	0x03C75FDC LDR W8, [X0 + 0xE0]
	0x03C75FE0 CBNZ W8, 0x3C75FEC
	0x03C75FE4 BL 0x1C16DFC
	0x03C75FE8 LDR X0, [X20]
	0x03C75FEC LDR X8, [X0 + 0xB8]
	0x03C75FF0 ADRP X20, 0x771000
	0x03C75FF4 STRB W31, [X8 + 0x50]
	0x03C75FF8 LDR X8, [X20 + 0x550]
	0x03C75FFC CBNZ X8, 0x3C76014
	0x03C76000 ADRP X0, 0xFFFFFFFFFCE7F000
	0x03C76004 ADD X0, X0, 0x71D
	0x03C76008 BL 0x1C16CB8
	0x03C7600C MOV X8, X0
	0x03C76010 STR X0, [X20 + 0x550]
	0x03C76014 MOV W0, W31
	0x03C76018 BLR X8
	0x03C7601C ADRP X20, 0x770000

ISIL:
	001 Move [X31-112], D11
	002 Move [X31-104], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X27
	007 Move [X31+48], X26
	008 Move [X31+56], X25
	009 Move [X31+64], X24
	010 Move [X31+72], X23
	011 Move [X31+80], X22
	012 Move [X31+88], X21
	013 Move [X31+96], X20
	014 Move [X31+104], X19
	015 Move X25, 0x772000
	016 Move X26, 0x4AB000
	017 Move W8, [X25+2025]
	018 Move X26, [X26+1480]
	019 Move W23, W5
	020 Move W19, W4
	021 Move W20, W3
	022 Move W24, W2
	023 Move X21, X1
	024 Move V8, V3
	025 Move V9, V2
	026 Move V10, V1
	027 Move V11, V0
	028 Move X22, X0
	029 Move TEMP, X8
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfEqual {44}
	033 Move X0, 0x4A6000
	034 Move X0, [X0+2192]
	035 Call 0x1C17CF4
	036 Move X0, 0x4AB000
	037 Move X0, [X0+1480]
	038 Call 0x1C17CF4
	039 Move X0, 0x4A6000
	040 Move X0, [X0+1216]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X25+2025], W8
	044 Move X0, [X26]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X27, 0x4A6000
	050 Move X27, [X27+1216]
	051 Call GUIUtility.get_hotControl
	052 Move W25, W0
	053 Call GUIUtility.get_keyboardControl
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move X26, 0x4A6000
	056 Move X26, [X26+2192]
	057 Move X0, [X26]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {63}
	061 Call 0x1C17DFC
	062 Move X0, [X26]
	063 Move X8, [X0+184]
	064 Move W8, [X8]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 NotImplemented "Instruction CSET not yet implemented."
	067 Move W26, W31
	068 Move X0, [X27]
	069 Move W8, [X0+224]
	070 Compare W8, 0
	071 JumpIfNotEqual {73}
	072 Call 0x1C17DFC
	073 Call GUI.get_skin
	074 Compare X0, 0
	075 JumpIfEqual {113}
	076 Move X8, [X0+224]
	077 Compare X8, 0
	078 JumpIfEqual {113}
	079 Compare X22, 0
	080 JumpIfEqual {113}
	081 Move S6, [X8+48]
	082 Move S7, [X8+52]
	083 Move S4, [X8+40]
	084 Move S5, [X8+44]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 And W6, W23, 1
	087 Move V2, V9
	088 Move V3, V8
	089 Move X0, X22
	090 Move X1, X21
	091 Move W3, W26
	092 Move W4, W20
	093 Move W5, W19
	094 Move X20, [X31+96]
	095 Move X19, [X31+104]
	096 Move X22, [X31+80]
	097 Move X21, [X31+88]
	098 Move X24, [X31+64]
	099 Move X23, [X31+72]
	100 Move X26, [X31+48]
	101 Move X25, [X31+56]
	102 Move X30, [X31+32]
	103 Move X27, [X31+40]
	104 Move D9, [X31+16]
	105 Move D8, [X31+24]
	106 NotImplemented "Instruction CSET not yet implemented."
	107 Move V0, V11
	108 Move V1, V10
	109 Move D11, [X31+112]
	110 Move D10, [X31+120]
	111 Call GUIStyle.DrawWithTextSelection, X0, X1, X2, X3, X4, X5, X6, X7, X8
	112 Return 
	113 Call 0x1C17F20

Method: System.Void DrawWithTextSelection(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Int32 firstSelectedCharacter, System.Int32 lastSelectedCharacter)

Disassembly:
	0x03C76020 LDRB W8, [X20 + 0x986]
	0x03C76024 CBNZ W8, 0x3C7603C

ISIL:
	001 Move W5, W31
	002 Call GUIStyle.DrawWithTextSelection, X0, X1, X2, X3, X4, X5, X6
	003 Return 

Method: UnityEngine.GUIStyle get_none()

Disassembly:
	0x03C6CB04 MOV X20, X0
	0x03C6CB08 CBNZ X2, 0x3C6CB20
	0x03C6CB0C ADRP X0, 0xFFFFFFFFFCEBE000
	0x03C6CB10 ADD X0, X0, 0xEF6
	0x03C6CB14 BL 0x1C16CB8
	0x03C6CB18 MOV X2, X0
	0x03C6CB1C STR X0, [X21 + 0x648]
	0x03C6CB20 MOV X0, X20
	0x03C6CB24 MOV X1, X19
	0x03C6CB28 LDP X20, X19, [X31 + 0x10]
	0x03C6CB2C LDP X30, X21, [X31], #0x20
	0x03C6CB30 BR X2
	0x03C6CB34 SUB X31, X31, 0x20
	0x03C6CB38 STP X30, X19, [X31 + 0x10]
	0x03C6CB3C ADRP X19, 0x77A000
	0x03C6CB40 LDR X8, [X19 + 0x650]
	0x03C6CB44 STP S0, S1, [X31 + 0x8]
	0x03C6CB48 STR X31, [X31]
	0x03C6CB4C CBNZ X8, 0x3C6CB64
	0x03C6CB50 ADRP X0, 0xFFFFFFFFFCE87000
	0x03C6CB54 ADD X0, X0, 0x8CF
	0x03C6CB58 BL 0x1C16CB8
	0x03C6CB5C MOV X8, X0
	0x03C6CB60 STR X0, [X19 + 0x650]
	0x03C6CB64 ADD X0, X31, 0x8
	0x03C6CB68 ADD X1, X31, 0x0
	0x03C6CB6C BLR X8
	0x03C6CB70 LDP S0, S1, [X31]
	0x03C6CB74 LDP X30, X19, [X31 + 0x10]
	0x03C6CB78 ADD X31, X31, 0x20
	0x03C6CB7C RET
	0x03C6CB80 STP X30, X21, [X31 - 0x20]!
	0x03C6CB84 STP X20, X19, [X31 + 0x10]
	0x03C6CB88 ADRP X21, 0x77A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x77B000
	005 Move X20, 0x4AF000
	006 Move W8, [X19+2026]
	007 Move X20, [X20+2192]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4AF000
	013 Move X0, [X0+2192]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2026], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X20]
	023 Move X8, [X0+184]
	024 Move X19, [X8+8]
	025 Compare X19, 0
	026 JumpIfNotEqual {38}
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Call GUIStyle..ctor, X0
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {36}
	034 Call 0x1C17DFC
	035 Move X0, [X20]
	036 Move X8, [X0+184]
	037 Move [X8+8], X19
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Return X0

Method: UnityEngine.Vector2 GetCursorPixelPosition(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 cursorStringIndex)

Disassembly:
	0x03C76028 ADRP X0, 0x4A4000

ISIL:
	001 Call GUIStyle.Internal_GetCursorPixelPosition, X0, X1, X2, X3
	002 Return X0

Method: System.Int32 GetCursorStringIndex(UnityEngine.Rect position, UnityEngine.GUIContent content, UnityEngine.Vector2 cursorPixelPosition)

Disassembly:
	0x03C7602C LDR X0, [X0 + 0x4C0]

ISIL:
	001 Call GUIStyle.Internal_GetCursorStringIndex, X0, X1, X2, X3
	002 Return X0

Method: UnityEngine.Vector2 CalcSize(UnityEngine.GUIContent content)

Disassembly:
	0x03C76030 BL 0x1C16CF4

ISIL:
	001 Call GUIStyle.Internal_CalcSize, X0, X1
	002 Return X0

Method: UnityEngine.Vector2 CalcSizeWithConstraints(UnityEngine.GUIContent content, UnityEngine.Vector2 constraints)

Disassembly:
	0x03C71F54 MOV X0, X20

ISIL:
	001 Call GUIStyle.Internal_CalcSizeWithConstraints, X0, X1, X2
	002 Return X0

Method: System.Single CalcHeight(UnityEngine.GUIContent content, System.Single width)

Disassembly:
	0x03C76034 MOVZ W8, 0x1
	0x03C76038 STRB W8, [X20 + 0x986]
	0x03C7603C LDR X0, [X19]
	0x03C76040 LDR W8, [X0 + 0xE0]
	0x03C76044 CBNZ W8, 0x3C76050
	0x03C76048 BL 0x1C16DFC
	0x03C7604C LDR X0, [X19]
	0x03C76050 LDR X8, [X0 + 0xB8]
	0x03C76054 LDR X0, [X8 + 0x48]
	0x03C76058 CBZ X0, 0x3C76074
	0x03C7605C LDR X8, [X0]
	0x03C76060 LDP X20, X19, [X31 + 0x10]
	0x03C76064 LDR X2, [X8 + 0x208]
	0x03C76068 LDR X1, [X8 + 0x210]
	0x03C7606C LDP X30, X21, [X31], #0x20
	0x03C76070 BR X2
	0x03C76074 BL 0x1C16F20
	0x03C76078 STP X30, X21, [X31 - 0x20]!
	0x03C7607C STP X20, X19, [X31 + 0x10]
	0x03C76080 ADRP X20, 0x770000
	0x03C76084 ADRP X21, 0x4EA000

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x771000
	007 Move X2, [X21+1976]
	008 Move V8, V0
	009 Move X19, X1
	010 Move X20, X0
	011 Compare X2, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51879936
	014 Add X0, X0, 2273
	015 Call 0x1C17CB8
	016 Move X2, X0
	017 Move [X21+1976], X0
	018 Move X0, X20
	019 Move X1, X19
	020 Move X20, [X31+32]
	021 Move X19, [X31+40]
	022 Move X30, [X31+16]
	023 Move X21, [X31+24]
	024 Move V0, V8
	025 Move V8, [X31+48]
	026 CallNoReturn X2

Method: System.Boolean get_isHeightDependantOnWidth()

Disassembly:
	0x03C71DD4 MOV X20, X0
	0x03C71DD8 BL 0x3C71974
	0x03C71DDC STR X20, [X19 + 0xA0]
	0x03C71DE0 LDR X8, [X19 + 0xA8]
	0x03C71DE4 CBNZ X8, 0x3C71E04
	0x03C71DE8 ADRP X8, 0x4A9000
	0x03C71DEC LDR X8, [X8 + 0x890]
	0x03C71DF0 LDR X0, [X8]
	0x03C71DF4 BL 0x1C16F10
	0x03C71DF8 MOV X20, X0
	0x03C71DFC BL 0x3C71974
	0x03C71E00 STR X20, [X19 + 0xA8]
	0x03C71E04 LDR X8, [X19 + 0xB0]
	0x03C71E08 CBNZ X8, 0x3C71E28
	0x03C71E0C ADRP X8, 0x4A9000
	0x03C71E10 LDR X8, [X8 + 0x890]
	0x03C71E14 LDR X0, [X8]
	0x03C71E18 BL 0x1C16F10
	0x03C71E1C MOV X20, X0
	0x03C71E20 BL 0x3C71974
	0x03C71E24 STR X20, [X19 + 0xB0]
	0x03C71E28 LDR X8, [X19 + 0xB8]
	0x03C71E2C CBNZ X8, 0x3C71E4C
	0x03C71E30 ADRP X8, 0x4A9000
	0x03C71E34 LDR X8, [X8 + 0x890]
	0x03C71E38 LDR X0, [X8]
	0x03C71E3C BL 0x1C16F10
	0x03C71E40 MOV X20, X0
	0x03C71E44 BL 0x3C71974
	0x03C71E48 STR X20, [X19 + 0xB8]
	0x03C71E4C LDR X8, [X19 + 0xC0]
	0x03C71E50 CBNZ X8, 0x3C71E70
	0x03C71E54 ADRP X8, 0x4A9000
	0x03C71E58 LDR X8, [X8 + 0x890]
	0x03C71E5C LDR X0, [X8]
	0x03C71E60 BL 0x1C16F10
	0x03C71E64 MOV X20, X0
	0x03C71E68 BL 0x3C71974
	0x03C71E6C STR X20, [X19 + 0xC0]
	0x03C71E70 LDR X8, [X19 + 0xC8]
	0x03C71E74 CBNZ X8, 0x3C71E94
	0x03C71E78 ADRP X8, 0x4A9000
	0x03C71E7C LDR X8, [X8 + 0x890]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x776000
	005 Move X8, [X20+1872]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51810304
	010 Add X0, X0, 2467
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1872], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 NotImplemented "Instruction FCMP not yet implemented."
	017 Move X20, 0x776000
	018 Move X8, [X20+1856]
	019 Compare X8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, -51687424
	022 Add X0, X0, 1157
	023 Call 0x1C17CB8
	024 Move X8, X0
	025 Move [X20+1856], X0
	026 Move X0, X19
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {45}
	032 Move X20, 0x776000
	033 Move X8, [X20+1840]
	034 Compare X8, 0
	035 JumpIfNotEqual {41}
	036 Move X0, -51859456
	037 Add X0, X0, 2231
	038 Call 0x1C17CB8
	039 Move X8, X0
	040 Move [X20+1840], X0
	041 Move X0, X19
	042 NotImplemented "Instruction BLR not yet implemented."
	043 NotImplemented "Instruction CMP not yet implemented."
	044 NotImplemented "Instruction CSET not yet implemented."
	045 Move W0, W31
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Return X0

Method: System.Void CalcMinMaxWidth(UnityEngine.GUIContent content, out System.Single minWidth, out System.Single maxWidth)

Disassembly:
	0x03C76088 LDRB W8, [X20 + 0x948]
	0x03C7608C LDR X21, [X21 + 0x2B0]
	0x03C76090 MOV W19, W0
	0x03C76094 TBNZ X8, 0x0, 0x3C760AC
	0x03C76098 ADRP X0, 0x4EA000
	0x03C7609C LDR X0, [X0 + 0x2B0]
	0x03C760A0 BL 0x1C16CF4
	0x03C760A4 MOVZ W8, 0x1
	0x03C760A8 STRB W8, [X20 + 0x948]
	0x03C760AC LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X3
	005 Move X20, X2
	006 Call GUIStyle.Internal_CalcMinMaxWidth, X0, X1
	007 Move [X20], S0
	008 Move [X19], S1
	009 Move X20, [X31+16]
	010 Move X19, [X31+24]
	011 Move X30, [X31+32]
	012 Return 

Method: System.String ToString()

Disassembly:
	0x03C760B0 LDR W8, [X0 + 0xE0]
	0x03C760B4 CBNZ W8, 0x3C760BC
	0x03C760B8 BL 0x1C16DFC
	0x03C760BC MOV W0, W19
	0x03C760C0 LDP X20, X19, [X31 + 0x10]
	0x03C760C4 MOV W1, W31
	0x03C760C8 LDP X30, X21, [X31], #0x20
	0x03C760CC B 0x3C6F8C8
	0x03C760D0 STR X30, [X31 - 0x30]!
	0x03C760D4 STP X22, X21, [X31 + 0x10]
	0x03C760D8 STP X20, X19, [X31 + 0x20]
	0x03C760DC ADRP X20, 0x770000
	0x03C760E0 LDRB W8, [X20 + 0x949]
	0x03C760E4 MOV W19, W0
	0x03C760E8 TBNZ X8, 0x0, 0x3C76118
	0x03C760EC ADRP X0, 0x4A8000
	0x03C760F0 LDR X0, [X0 + 0xBD0]
	0x03C760F4 BL 0x1C16CF4
	0x03C760F8 ADRP X0, 0x4EA000
	0x03C760FC LDR X0, [X0 + 0x2B0]
	0x03C76100 BL 0x1C16CF4
	0x03C76104 ADRP X0, 0x4A9000
	0x03C76108 LDR X0, [X0 + 0x5C8]
	0x03C7610C BL 0x1C16CF4
	0x03C76110 MOVZ W8, 0x1
	0x03C76114 STRB W8, [X20 + 0x949]
	0x03C76118 ADRP X20, 0x770000
	0x03C7611C ADRP X21, 0x4A9000
	0x03C76120 LDRB W8, [X20 + 0x510]
	0x03C76124 LDR X21, [X21 + 0x5C8]
	0x03C76128 TBNZ X8, 0x0, 0x3C76140
	0x03C7612C ADRP X0, 0x4E3000
	0x03C76130 LDR X0, [X0 + 0x20]
	0x03C76134 BL 0x1C16CF4
	0x03C76138 MOVZ W8, 0x1
	0x03C7613C STRB W8, [X20 + 0x510]
	0x03C76140 ADRP X8, 0x4E3000
	0x03C76144 LDR X8, [X8 + 0x20]
	0x03C76148 LDR X8, [X8]
	0x03C7614C LDR X8, [X8 + 0xB8]
	0x03C76150 LDR X20, [X8]
	0x03C76154 CBZ X20, 0x3C76274
	0x03C76158 ADRP X22, 0x770000
	0x03C7615C LDR X8, [X22 + 0x4A8]
	0x03C76160 CBNZ X8, 0x3C76178
	0x03C76164 ADRP X0, 0xFFFFFFFFFCE7B000
	0x03C76168 ADD X0, X0, 0x566
	0x03C7616C BL 0x1C16CB8
	0x03C76170 MOV X8, X0
	0x03C76174 STR X0, [X22 + 0x4A8]
	0x03C76178 MOV X0, X20
	0x03C7617C BLR X8
	0x03C76180 ADRP X20, 0x4EA000
	0x03C76184 LDR X20, [X20 + 0x2B0]
	0x03C76188 CMP W0, 0x8
	0x03C7618C B.NE 0x3C761CC
	0x03C76190 CMP W19, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x771000
	006 Move X21, 0x47E000
	007 Move W8, [X19+2027]
	008 Move X21, [X21+2512]
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x47E000
	015 Move X0, [X0+2512]
	016 Call 0x1C17CF4
	017 Move X0, 0x4EB000
	018 Move X0, [X0+1352]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X19+2027], W8
	022 Move X0, [X21]
	023 Move W1, 1
	024 Call 0x1C17D6C
	025 Move X21, [X20+120]
	026 Move X19, X0
	027 Compare X21, 0
	028 JumpIfNotEqual {42}
	029 Move X21, 0x771000
	030 Move X8, [X21+1816]
	031 Compare X8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, -51863552
	034 Add X0, X0, 2153
	035 Call 0x1C17CB8
	036 Move X8, X0
	037 Move [X21+1816], X0
	038 Move X0, X20
	039 NotImplemented "Instruction BLR not yet implemented."
	040 Move X21, X0
	041 Move [X20+120], X0
	042 Compare X19, 0
	043 JumpIfEqual {67}
	044 Compare X21, 0
	045 JumpIfEqual {52}
	046 Move X8, [X19]
	047 Move X0, X21
	048 Move X1, [X8+64]
	049 Call 0x1C17E00
	050 Compare X0, 0
	051 JumpIfEqual {69}
	052 Move W8, [X19+24]
	053 Compare W8, 0
	054 JumpIfEqual {68}
	055 Move X8, 0x4EB000
	056 Move X8, [X8+1352]
	057 Move [X19+32], X21
	058 Move X1, X19
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X0, [X8]
	062 Move X2, X31
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Call UnityString.Format, X0, X1
	066 Return X0
	067 Call 0x1C17F20
	068 Call 0x1C17F28
	069 Call 0x1C17F44
	070 Move X1, X31
	071 Call 0x1C17DEC

Method: System.Void .cctor()

Disassembly:
	0x03C76194 B.EQ 0x3C761B8
	0x03C76198 CMP W19, 0x1
	0x03C7619C B.NE 0x3C761CC
	0x03C761A0 LDR X0, [X20]
	0x03C761A4 LDR W8, [X0 + 0xE0]
	0x03C761A8 CBNZ W8, 0x3C761B0
	0x03C761AC BL 0x1C16DFC
	0x03C761B0 BL 0x3C6C664
	0x03C761B4 B 0x3C761CC
	0x03C761B8 LDR X0, [X20]
	0x03C761BC LDR W8, [X0 + 0xE0]
	0x03C761C0 CBNZ W8, 0x3C761C8
	0x03C761C4 BL 0x1C16DFC
	0x03C761C8 BL 0x3C7012C
	0x03C761CC LDR X0, [X21]
	0x03C761D0 LDR W8, [X0 + 0xE0]
	0x03C761D4 CBNZ W8, 0x3C761E0
	0x03C761D8 BL 0x1C16DFC
	0x03C761DC LDR X0, [X21]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x771000
	005 Move X20, 0x4A5000
	006 Move W8, [X19+2028]
	007 Move X20, [X20+2192]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4A5000
	013 Move X0, [X0+2192]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2028], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move W9, 1
	021 Move X8, [X8+184]
	022 Move [X8], W9
	023 Move X30, [X31+32]
	024 Return 

Method: System.Void get_contentOffset_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C74508 MOV X1, X31
	0x03C7450C BL 0x33CB4DC
	0x03C74510 CBNZ X20, 0x3C74528
	0x03C74514 LDP X20, X19, [X31 + 0x10]
	0x03C74518 LDP X30, X21, [X31], #0x20
	0x03C7451C RET
	0x03C74520 MOV X20, X31
	0x03C74524 B 0x3C74534
	0x03C74528 MOV X0, X20
	0x03C7452C BL 0x1C16F18
	0x03C74530 MOV X21, X0
	0x03C74534 MOV X0, X19
	0x03C74538 MOV X1, X31
	0x03C7453C BL 0x33CB4DC
	0x03C74540 CBNZ X20, 0x3C7454C
	0x03C74544 MOV X0, X21
	0x03C74548 BL 0x1D2C690

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+2032]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51814400
	012 Add X0, X0, 2484
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2032], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_contentOffset_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C74594 BLR X8
	0x03C74598 MOV X1, X0
	0x03C7459C MOV X0, X19
	0x03C745A0 BL 0x3C73254
	0x03C745A4 STR X0, [X19 + 0x20]
	0x03C745A8 LDP X20, X19, [X31 + 0x10]
	0x03C745AC LDR X30, [X31], #0x20
	0x03C745B0 RET
	0x03C745B4 STR X30, [X31 - 0x20]!
	0x03C745B8 STP X20, X19, [X31 + 0x10]
	0x03C745BC MOV X19, X0
	0x03C745C0 LDR X0, [X0 + 0x28]
	0x03C745C4 CBNZ X0, 0x3C74604
	0x03C745C8 ADRP X20, 0x772000
	0x03C745CC LDR X8, [X20 + 0x798]
	0x03C745D0 CBNZ X8, 0x3C745E8
	0x03C745D4 ADRP X0, 0xFFFFFFFFFCE7D000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+2040]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51699712
	012 Add X0, X0, 1261
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2040], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_Internal_clipOffset_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C74790 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C74794 ADD X0, X0, 0x7DA
	0x03C74798 BL 0x1C16CB8
	0x03C7479C MOV X8, X0
	0x03C747A0 STR X0, [X20 + 0x7A0]
	0x03C747A4 MOVZ W1, 0x2
	0x03C747A8 MOV X0, X19
	0x03C747AC BLR X8
	0x03C747B0 ADRP X8, 0x4A6000
	0x03C747B4 LDR X8, [X8 + 0x4C8]
	0x03C747B8 MOV X21, X0
	0x03C747BC LDR X8, [X8]
	0x03C747C0 MOV X0, X8
	0x03C747C4 BL 0x1C16F10
	0x03C747C8 MOV X1, X19
	0x03C747CC MOV X2, X21
	0x03C747D0 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x773000
	006 Move X2, [X21+2048]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51707904
	012 Add X0, X0, 1789
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2048], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Internal_Draw_Injected(ref UnityEngine.Rect screenRect, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)

Disassembly:
	0x03C74A34 STP X20, X19, [X31 + 0x50]
	0x03C74A38 ADRP X22, 0x772000
	0x03C74A3C LDRB W8, [X22 + 0x7E7]
	0x03C74A40 MOV W19, W3
	0x03C74A44 MOV X20, X1
	0x03C74A48 MOV V8.16B, V3.16B
	0x03C74A4C MOV V9.16B, V2.16B
	0x03C74A50 MOV V10.16B, V1.16B
	0x03C74A54 MOV V11.16B, V0.16B
	0x03C74A58 MOV X21, X0
	0x03C74A5C TBNZ X8, 0x0, 0x3C74A80
	0x03C74A60 ADRP X0, 0x4A6000
	0x03C74A64 LDR X0, [X0 + 0x890]
	0x03C74A68 BL 0x1C16CF4
	0x03C74A6C ADRP X0, 0x4A6000
	0x03C74A70 LDR X0, [X0 + 0x4C0]
	0x03C74A74 BL 0x1C16CF4
	0x03C74A78 MOVZ W8, 0x1
	0x03C74A7C STRB W8, [X22 + 0x7E7]
	0x03C74A80 ADRP X22, 0x772000
	0x03C74A84 ADRP X23, 0x4E5000
	0x03C74A88 LDRB W8, [X22 + 0x510]
	0x03C74A8C LDR X23, [X23 + 0x20]
	0x03C74A90 TBNZ X8, 0x0, 0x3C74AA8
	0x03C74A94 ADRP X0, 0x4E5000
	0x03C74A98 LDR X0, [X0 + 0x20]
	0x03C74A9C BL 0x1C16CF4
	0x03C74AA0 MOVZ W8, 0x1
	0x03C74AA4 STRB W8, [X22 + 0x510]
	0x03C74AA8 LDR X8, [X23]
	0x03C74AAC LDR X8, [X8 + 0xB8]
	0x03C74AB0 LDR X22, [X8]
	0x03C74AB4 CBZ X22, 0x3C74C34

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X26, 0x773000
	011 Move X7, [X26+2056]
	012 Move W19, W6
	013 Move W21, W5
	014 Move W23, W4
	015 Move W24, W3
	016 Move X20, X2
	017 Move X22, X1
	018 Move X25, X0
	019 Compare X7, 0
	020 JumpIfNotEqual {26}
	021 Move X0, -51781632
	022 Add X0, X0, 1458
	023 Call 0x1C17CB8
	024 Move X7, X0
	025 Move [X26+2056], X0
	026 And W3, W24, 1
	027 And W4, W23, 1
	028 And W5, W21, 1
	029 And W6, W19, 1
	030 Move X0, X25
	031 Move X1, X22
	032 Move X2, X20
	033 Move X20, [X31+64]
	034 Move X19, [X31+72]
	035 Move X22, [X31+48]
	036 Move X21, [X31+56]
	037 Move X24, [X31+32]
	038 Move X23, [X31+40]
	039 Move X26, [X31+16]
	040 Move X25, [X31+24]
	041 Move X30, [X31+80]
	042 CallNoReturn X7

Method: System.Void Internal_Draw2_Injected(ref UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Boolean on)

Disassembly:
	0x03C74B2C ADD X0, X0, 0xF4E
	0x03C74B30 BL 0x1C16CB8
	0x03C74B34 STR X0, [X23 + 0x6C8]
	0x03C74B38 BLR X0
	0x03C74B3C MOV V12.16B, V0.16B
	0x03C74B40 MOV X0, X31
	0x03C74B44 BL 0x3C3A708
	0x03C74B48 ADRP X8, 0x4A6000
	0x03C74B4C LDR X8, [X8 + 0x890]
	0x03C74B50 MOV V13.16B, V0.16B
	0x03C74B54 LDR X0, [X8]
	0x03C74B58 LDR W8, [X0 + 0xE0]
	0x03C74B5C CBNZ W8, 0x3C74B64
	0x03C74B60 BL 0x1C16DFC
	0x03C74B64 ADRP X23, 0x772000
	0x03C74B68 LDR X0, [X23 + 0x7D0]
	0x03C74B6C CBNZ X0, 0x3C74B80
	0x03C74B70 ADRP X0, 0xFFFFFFFFFCEB6000
	0x03C74B74 ADD X0, X0, 0xFF6
	0x03C74B78 BL 0x1C16CB8
	0x03C74B7C STR X0, [X23 + 0x7D0]
	0x03C74B80 BLR X0
	0x03C74B84 FSUB S0, S13, S0
	0x03C74B88 MOV V1.16B, V12.16B
	0x03C74B8C BL 0x3EB1BA0
	0x03C74B90 FCMP S12, 0x0
	0x03C74B94 B.EQ 0x3C74BB8

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x773000
	009 Move X5, [X24+2064]
	010 Move W21, W4
	011 Move W19, W3
	012 Move X20, X2
	013 Move X22, X1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51847168
	018 Add X0, X0, 1363
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+2064], X0
	022 And W4, W21, 1
	023 Move X0, X23
	024 Move X1, X22
	025 Move X2, X20
	026 Move W3, W19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Void Internal_DrawCursor_Injected(ref UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 pos, ref UnityEngine.Color cursorColor)

Disassembly:
	0x03C74C10 LDP D13, D12, [X31], #0x60
	0x03C74C14 B 0x3C73B98
	0x03C74C18 LDP X20, X19, [X31 + 0x50]
	0x03C74C1C LDP X22, X21, [X31 + 0x40]
	0x03C74C20 LDP X30, X23, [X31 + 0x30]
	0x03C74C24 LDP D9, D8, [X31 + 0x20]
	0x03C74C28 LDP D11, D10, [X31 + 0x10]
	0x03C74C2C LDP D13, D12, [X31], #0x60
	0x03C74C30 RET
	0x03C74C34 BL 0x1C16F20
	0x03C74C38 SUB X31, X31, 0xD0
	0x03C74C3C STP D15, D14, [X31 + 0x30]
	0x03C74C40 STP D13, D12, [X31 + 0x40]
	0x03C74C44 STP D11, D10, [X31 + 0x50]
	0x03C74C48 STP D9, D8, [X31 + 0x60]
	0x03C74C4C STR X30, [X31 + 0x70]
	0x03C74C50 STP X28, X27, [X31 + 0x80]
	0x03C74C54 STP X26, X25, [X31 + 0x90]
	0x03C74C58 STP X24, X23, [X31 + 0xA0]
	0x03C74C5C STP X22, X21, [X31 + 0xB0]
	0x03C74C60 STP X20, X19, [X31 + 0xC0]
	0x03C74C64 STP S2, S3, [X31 + 0x78]
	0x03C74C68 ADRP X27, 0x772000
	0x03C74C6C ADRP X26, 0x4A6000
	0x03C74C70 LDRB W8, [X27 + 0x7E8]
	0x03C74C74 LDR X26, [X26 + 0x4C0]
	0x03C74C78 MOV V9.16B, V7.16B

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x773000
	009 Move X5, [X24+2072]
	010 Move X19, X4
	011 Move W20, W3
	012 Move X21, X2
	013 Move X22, X1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51671040
	018 Add X0, X0, 3224
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+2072], X0
	022 Move X0, X23
	023 Move X1, X22
	024 Move X2, X21
	025 Move W3, W20
	026 Move X4, X19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Void Internal_DrawWithTextSelection_Injected(ref UnityEngine.Rect screenRect, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus, System.Boolean drawSelectionAsComposition, System.Int32 cursorFirst, System.Int32 cursorLast, ref UnityEngine.Color cursorColor, ref UnityEngine.Color selectionColor)

Disassembly:
	0x03C74D4C LDR X0, [X27 + 0x7D0]
	0x03C74D50 MOV V10.16B, V13.16B
	0x03C74D54 CBNZ X0, 0x3C74D68
	0x03C74D58 ADRP X0, 0xFFFFFFFFFCEB6000
	0x03C74D5C ADD X0, X0, 0xFF6
	0x03C74D60 BL 0x1C16CB8
	0x03C74D64 STR X0, [X27 + 0x7D0]
	0x03C74D68 BLR X0
	0x03C74D6C FSUB S0, S9, S0
	0x03C74D70 MOV V1.16B, V8.16B
	0x03C74D74 BL 0x3EB1BA0
	0x03C74D78 FCMP S8, 0x0
	0x03C74D7C B.EQ 0x3C74DA0
	0x03C74D80 FDIV S0, S0, S8
	0x03C74D84 FMOV S1, 0.5
	0x03C74D88 FMOV S8, W31
	0x03C74D8C FMOV S9, W31
	0x03C74D90 FCMP S0, S1
	0x03C74D94 FMOV S13, W31
	0x03C74D98 FMOV S14, W31
	0x03C74D9C B.PL 0x3C74DC8
	0x03C74DA0 LDR X0, [X26]
	0x03C74DA4 LDR W8, [X0 + 0xE0]
	0x03C74DA8 CBNZ W8, 0x3C74DB0
	0x03C74DAC BL 0x1C16DFC
	0x03C74DB0 BL 0x3C6748C
	0x03C74DB4 CBZ X0, 0x3C74EB8
	0x03C74DB8 LDR X8, [X0 + 0xE0]
	0x03C74DBC CBZ X8, 0x3C74EB8
	0x03C74DC0 LDP S8, S9, [X8 + 0x14]
	0x03C74DC4 LDP S13, S14, [X8 + 0x1C]
	0x03C74DC8 ADRP X26, 0x772000
	0x03C74DCC ADRP X27, 0x4E5000
	0x03C74DD0 LDRB W8, [X26 + 0x510]
	0x03C74DD4 LDR X27, [X27 + 0x20]
	0x03C74DD8 TBNZ X8, 0x0, 0x3C74DF0
	0x03C74DDC ADRP X0, 0x4E5000
	0x03C74DE0 LDR X0, [X0 + 0x20]
	0x03C74DE4 BL 0x1C16CF4
	0x03C74DE8 MOVZ W8, 0x1
	0x03C74DEC STRB W8, [X26 + 0x510]
	0x03C74DF0 LDR X8, [X27]
	0x03C74DF4 LDR X8, [X8 + 0xB8]
	0x03C74DF8 LDR X0, [X8]
	0x03C74DFC CBZ X0, 0x3C74EB8
	0x03C74E00 BL 0x3C62C40
	0x03C74E04 FCMP S1, S12

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], X29
	003 Move [X31+24], X30
	004 Move [X31+32], X28
	005 Move [X31+40], X27
	006 Move [X31+48], X26
	007 Move [X31+56], X25
	008 Move [X31+64], X24
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X8, 0x773000
	015 Move X29, [X31+128]
	016 Move X28, [X31+136]
	017 Move W19, [X31+120]
	018 Move X8, [X8+2080]
	019 Move W27, [X31+112]
	020 Move W21, W6
	021 Move W23, W5
	022 Move W24, W4
	023 Move W25, W3
	024 Move X20, X2
	025 Move X22, X1
	026 Move X26, X0
	027 Compare X8, 0
	028 JumpIfNotEqual {37}
	029 Move X0, -51773440
	030 Add X0, X0, 911
	031 Move [X31+12], W7
	032 Call 0x1C17CB8
	033 Move W7, [X31+12]
	034 Move X8, X0
	035 Move X9, 0x773000
	036 Move [X9+2080], X0
	037 Move [X31+128], X29
	038 Move [X31+136], X28
	039 Move [X31+120], W19
	040 And W3, W25, 1
	041 And W4, W24, 1
	042 And W5, W23, 1
	043 And W6, W21, 1
	044 Move [X31+112], W27
	045 Move X0, X26
	046 Move X1, X22
	047 Move X2, X20
	048 Move X20, [X31+96]
	049 Move X19, [X31+104]
	050 Move X22, [X31+80]
	051 Move X21, [X31+88]
	052 Move X24, [X31+64]
	053 Move X23, [X31+72]
	054 Move X26, [X31+48]
	055 Move X25, [X31+56]
	056 Move X28, [X31+32]
	057 Move X27, [X31+40]
	058 Move X29, [X31+16]
	059 Move X30, [X31+24]
	060 And W7, W7, 1
	061 Add X31, X31, 112
	062 CallNoReturn X8

Method: System.Void Internal_GetCursorPixelPosition_Injected(ref UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 cursorStringIndex, out UnityEngine.Vector2 ret)

Disassembly:
	0x03C74E7C STP S11, S10, [X31 + 0x8]
	0x03C74E80 STR W24, [X31]
	0x03C74E84 BL 0x3C73C7C
	0x03C74E88 LDP X20, X19, [X31 + 0xC0]
	0x03C74E8C LDP X22, X21, [X31 + 0xB0]
	0x03C74E90 LDP X24, X23, [X31 + 0xA0]
	0x03C74E94 LDP X26, X25, [X31 + 0x90]
	0x03C74E98 LDP X28, X27, [X31 + 0x80]
	0x03C74E9C LDR X30, [X31 + 0x70]
	0x03C74EA0 LDP D9, D8, [X31 + 0x60]
	0x03C74EA4 LDP D11, D10, [X31 + 0x50]
	0x03C74EA8 LDP D13, D12, [X31 + 0x40]
	0x03C74EAC LDP D15, D14, [X31 + 0x30]
	0x03C74EB0 ADD X31, X31, 0xD0
	0x03C74EB4 RET
	0x03C74EB8 BL 0x1C16F20
	0x03C74EBC STP D11, D10, [X31 - 0x70]!
	0x03C74EC0 STP D9, D8, [X31 + 0x10]
	0x03C74EC4 STP X30, X27, [X31 + 0x20]
	0x03C74EC8 STP X26, X25, [X31 + 0x30]
	0x03C74ECC STP X24, X23, [X31 + 0x40]
	0x03C74ED0 STP X22, X21, [X31 + 0x50]
	0x03C74ED4 STP X20, X19, [X31 + 0x60]
	0x03C74ED8 ADRP X25, 0x772000
	0x03C74EDC ADRP X26, 0x4AB000
	0x03C74EE0 LDRB W8, [X25 + 0x7E9]
	0x03C74EE4 LDR X26, [X26 + 0x5C8]

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x773000
	009 Move X5, [X24+2088]
	010 Move X19, X4
	011 Move W20, W3
	012 Move X21, X2
	013 Move X22, X1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51769344
	018 Add X0, X0, 4089
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+2088], X0
	022 Move X0, X23
	023 Move X1, X22
	024 Move X2, X21
	025 Move W3, W20
	026 Move X4, X19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Int32 Internal_GetCursorStringIndex_Injected(ref UnityEngine.Rect position, UnityEngine.GUIContent content, ref UnityEngine.Vector2 cursorPixelPosition)

Disassembly:
	0x03C74F4C BL 0x1C16DFC
	0x03C74F50 ADRP X27, 0x4A6000
	0x03C74F54 LDR X27, [X27 + 0x4C0]
	0x03C74F58 BL 0x3C6AB88
	0x03C74F5C MOV W25, W0
	0x03C74F60 BL 0x3C6AA80
	0x03C74F64 CMP W0, W24
	0x03C74F68 B.NE 0x3C74F9C
	0x03C74F6C ADRP X26, 0x4A6000
	0x03C74F70 LDR X26, [X26 + 0x890]
	0x03C74F74 LDR X0, [X26]
	0x03C74F78 LDR W8, [X0 + 0xE0]
	0x03C74F7C CBNZ W8, 0x3C74F88
	0x03C74F80 BL 0x1C16DFC
	0x03C74F84 LDR X0, [X26]
	0x03C74F88 LDR X8, [X0 + 0xB8]
	0x03C74F8C LDRB W8, [X8]
	0x03C74F90 CMP W8, 0x0
	0x03C74F94 CSET W26, NE
	0x03C74F98 B 0x3C74FA0
	0x03C74F9C MOV W26, W31
	0x03C74FA0 LDR X0, [X27]
	0x03C74FA4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x773000
	008 Move X4, [X23+2096]
	009 Move X19, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51671040
	016 Add X0, X0, 3349
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+2096], X0
	020 Move X0, X22
	021 Move X1, X21
	022 Move X2, X20
	023 Move X3, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.String Internal_GetSelectedRenderedText_Injected(ref UnityEngine.Rect localPosition, UnityEngine.GUIContent mContent, System.Int32 selectIndex, System.Int32 cursorIndex)

Disassembly:
	0x03C7501C BL 0x1C16F20
	0x03C75020 MOV W5, W31
	0x03C75024 B 0x3C74EBC
	0x03C75028 B 0x3C73E08
	0x03C7502C B 0x3C73EE8
	0x03C75030 B 0x3C74088
	0x03C75034 STR D8, [X31 - 0x30]!
	0x03C75038 STP X30, X21, [X31 + 0x10]
	0x03C7503C STP X20, X19, [X31 + 0x20]
	0x03C75040 ADRP X21, 0x771000
	0x03C75044 LDR X2, [X21 + 0x7B8]
	0x03C75048 MOV V8.16B, V0.16B
	0x03C7504C MOV X19, X1
	0x03C75050 MOV X20, X0
	0x03C75054 CBNZ X2, 0x3C7506C
	0x03C75058 ADRP X0, 0xFFFFFFFFFCE86000
	0x03C7505C ADD X0, X0, 0x8E1
	0x03C75060 BL 0x1C16CB8
	0x03C75064 MOV X2, X0
	0x03C75068 STR X0, [X21 + 0x7B8]
	0x03C7506C MOV X0, X20
	0x03C75070 MOV X1, X19
	0x03C75074 LDP X20, X19, [X31 + 0x20]
	0x03C75078 LDP X30, X21, [X31 + 0x10]
	0x03C7507C MOV V0.16B, V8.16B
	0x03C75080 LDR V8, [X31], #0x30
	0x03C75084 BR X2

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X24, 0x772000
	009 Move X5, [X24+2104]
	010 Move W19, W4
	011 Move W20, W3
	012 Move X21, X2
	013 Move X22, X1
	014 Move X23, X0
	015 Compare X5, 0
	016 JumpIfNotEqual {22}
	017 Move X0, -51843072
	018 Add X0, X0, 2063
	019 Call 0x1C17CB8
	020 Move X5, X0
	021 Move [X24+2104], X0
	022 Move X0, X23
	023 Move X1, X22
	024 Move X2, X21
	025 Move W3, W20
	026 Move W4, W19
	027 Move X20, [X31+48]
	028 Move X19, [X31+56]
	029 Move X22, [X31+32]
	030 Move X21, [X31+40]
	031 Move X24, [X31+16]
	032 Move X23, [X31+24]
	033 Move X30, [X31+64]
	034 CallNoReturn X5

Method: System.Void Internal_CalcSize_Injected(UnityEngine.GUIContent content, out UnityEngine.Vector2 ret)

Disassembly:
	0x03C750E4 BL 0x1C16CF4
	0x03C750E8 MOVZ W8, 0x1
	0x03C750EC STRB W8, [X19 + 0x7EB]
	0x03C750F0 LDR X0, [X21]
	0x03C750F4 MOVZ W1, 0x1
	0x03C750F8 BL 0x1C16D6C
	0x03C750FC LDR X21, [X20 + 0x78]
	0x03C75100 MOV X19, X0
	0x03C75104 CBNZ X21, 0x3C75138
	0x03C75108 ADRP X21, 0x771000
	0x03C7510C LDR X8, [X21 + 0x718]
	0x03C75110 CBNZ X8, 0x3C75128
	0x03C75114 ADRP X0, 0xFFFFFFFFFCE8A000
	0x03C75118 ADD X0, X0, 0x869
	0x03C7511C BL 0x1C16CB8
	0x03C75120 MOV X8, X0
	0x03C75124 STR X0, [X21 + 0x718]
	0x03C75128 MOV X0, X20
	0x03C7512C BLR X8
	0x03C75130 MOV X21, X0
	0x03C75134 STR X0, [X20 + 0x78]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x772000
	007 Move X3, [X22+2112]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51679232
	014 Add X0, X0, 44
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2112], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void Internal_CalcSizeWithConstraints_Injected(UnityEngine.GUIContent content, ref UnityEngine.Vector2 maxSize, out UnityEngine.Vector2 ret)

Disassembly:
	0x03C7519C ADRP X19, 0x771000
	0x03C751A0 ADRP X20, 0x4A5000
	0x03C751A4 LDRB W8, [X19 + 0x7EC]
	0x03C751A8 LDR X20, [X20 + 0x890]
	0x03C751AC TBNZ X8, 0x0, 0x3C751C4
	0x03C751B0 ADRP X0, 0x4A5000
	0x03C751B4 LDR X0, [X0 + 0x890]
	0x03C751B8 BL 0x1C16CF4
	0x03C751BC MOVZ W8, 0x1
	0x03C751C0 STRB W8, [X19 + 0x7EC]
	0x03C751C4 LDR X8, [X20]
	0x03C751C8 LDP X20, X19, [X31 + 0x10]
	0x03C751CC MOVZ W9, 0x1
	0x03C751D0 LDR X8, [X8 + 0xB8]
	0x03C751D4 STRB W9, [X8]
	0x03C751D8 LDR X30, [X31], #0x20
	0x03C751DC RET
	0x03C751E0 STP X30, X25, [X31 - 0x40]!
	0x03C751E4 STP X24, X23, [X31 + 0x10]
	0x03C751E8 STP X22, X21, [X31 + 0x20]
	0x03C751EC STP X20, X19, [X31 + 0x30]
	0x03C751F0 ADRP X21, 0x771000
	0x03C751F4 LDRB W8, [X21 + 0x860]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x772000
	008 Move X4, [X23+2120]
	009 Move X19, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51818496
	016 Add X0, X0, 2555
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+2120], X0
	020 Move X0, X22
	021 Move X1, X21
	022 Move X2, X20
	023 Move X3, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Void Internal_CalcMinMaxWidth_Injected(UnityEngine.GUIContent content, out UnityEngine.Vector2 ret)

Disassembly:
	0x03C752A8 LDR X0, [X23, X22, LSL #3]
	0x03C752AC CBZ X0, 0x3C75370
	0x03C752B0 MOV X1, X31
	0x03C752B4 BL 0x33BE520
	0x03C752B8 LDR X8, [X25]
	0x03C752BC LDR X21, [X24]
	0x03C752C0 MOV X20, X0
	0x03C752C4 LDR W9, [X8 + 0xE0]
	0x03C752C8 CBNZ W9, 0x3C752D4
	0x03C752CC MOV X0, X8
	0x03C752D0 BL 0x1C16DFC
	0x03C752D4 MOV X0, X21
	0x03C752D8 MOV X1, X31
	0x03C752DC BL 0x338C698
	0x03C752E0 MOV X1, X0
	0x03C752E4 MOV X0, X20
	0x03C752E8 MOV X2, X31
	0x03C752EC BL 0x3395F0C
	0x03C752F0 TBZ X0, 0x0, 0x3C7531C
	0x03C752F4 LDR W8, [X19 + 0x18]
	0x03C752F8 ADD X22, X22, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x772000
	007 Move X3, [X22+2128]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51802112
	014 Add X0, X0, 1452
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2128], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void SetMouseTooltip_Injected(System.String tooltip, ref UnityEngine.Rect screenRect)

Disassembly:
	0x03C752FC CMP W22, W8
	0x03C75300 B.LT 0x3C752A0
	0x03C75304 MOVN W0, 0x0
	0x03C75308 LDP X20, X19, [X31 + 0x30]
	0x03C7530C LDP X22, X21, [X31 + 0x20]
	0x03C75310 LDP X24, X23, [X31 + 0x10]
	0x03C75314 LDP X30, X25, [X31], #0x40
	0x03C75318 RET
	0x03C7531C LDR W8, [X19 + 0x18]
	0x03C75320 CMP W22, W8
	0x03C75324 B.CS 0x3C75374
	0x03C75328 ADD X8, X19, 0x20
	0x03C7532C LDR X8, [X8, X22, LSL #3]
	0x03C75330 CBZ X8, 0x3C75370
	0x03C75334 ADRP X9, 0x4EB000
	0x03C75338 LDR X9, [X9 + 0x558]
	0x03C7533C LDR X10, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x772000
	006 Move X2, [X21+2136]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51728384
	012 Add X0, X0, 1015
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+2136], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

