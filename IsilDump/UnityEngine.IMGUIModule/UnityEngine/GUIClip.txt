Type: UnityEngine.GUIClip

Method: UnityEngine.Rect get_visibleRect()

Disassembly:
	0x03C6C3E4 LDR V8, [X31], #0x30
	0x03C6C3E8 RET
	0x03C6C3EC STR X30, [X31 - 0x50]!
	0x03C6C3F0 STP X26, X25, [X31 + 0x10]
	0x03C6C3F4 STP X24, X23, [X31 + 0x20]
	0x03C6C3F8 STP X22, X21, [X31 + 0x30]
	0x03C6C3FC STP X20, X19, [X31 + 0x40]
	0x03C6C400 ADRP X19, 0x77A000
	0x03C6C404 ADRP X24, 0x4F4000
	0x03C6C408 LDRB W8, [X19 + 0x69C]
	0x03C6C40C LDR X24, [X24 + 0x2B0]
	0x03C6C410 MOV X20, X2
	0x03C6C414 MOV X22, X1
	0x03C6C418 MOV W21, W0
	0x03C6C41C TBNZ X8, 0x0, 0x3C6C440
	0x03C6C420 ADRP X0, 0x4F4000
	0x03C6C424 LDR X0, [X0 + 0x2D0]
	0x03C6C428 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x77B000
	005 Move X8, [X19+1592]
	006 Move [X31], X31
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51847168
	011 Add X0, X0, 2576
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X19+1592], X0
	015 Add X0, X31, 0
	016 NotImplemented "Instruction BLR not yet implemented."
	017 Move S0, [X31]
	018 Move S1, [X31+4]
	019 Move S2, [X31+8]
	020 Move S3, [X31+12]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Add X31, X31, 32
	024 Return X0

Method: System.Void Internal_Push(UnityEngine.Rect screenRect, UnityEngine.Vector2 scrollOffset, UnityEngine.Vector2 renderOffset, System.Boolean resetOffset)

Disassembly:
	0x03C6D9BC ADRP X22, 0x4B1000
	0x03C6D9C0 LDRB W8, [X23 + 0x680]
	0x03C6D9C4 LDR X22, [X22 + 0xBD0]
	0x03C6D9C8 MOV X19, X2
	0x03C6D9CC MOV X21, X1
	0x03C6D9D0 MOV W20, W0
	0x03C6D9D4 TBNZ X8, 0x0, 0x3C6D9F8
	0x03C6D9D8 ADRP X0, 0x4B1000
	0x03C6D9DC LDR X0, [X0 + 0xBD0]
	0x03C6D9E0 BL 0x1C16CF4
	0x03C6D9E4 ADRP X0, 0x4AD000
	0x03C6D9E8 LDR X0, [X0 + 0x4C0]
	0x03C6D9EC BL 0x1C16CF4
	0x03C6D9F0 MOVZ W8, 0x1
	0x03C6D9F4 STRB W8, [X23 + 0x680]
	0x03C6D9F8 LDR X0, [X22]
	0x03C6D9FC ADRP X22, 0x4AD000
	0x03C6DA00 LDR W8, [X0 + 0xE0]
	0x03C6DA04 LDR X22, [X22 + 0x4C0]
	0x03C6DA08 CBNZ W8, 0x3C6DA10
	0x03C6DA0C BL 0x1C16DFC
	0x03C6DA10 MOV X0, X21
	0x03C6DA14 BL 0x3C678AC
	0x03C6DA18 LDR X8, [X22]
	0x03C6DA1C MOV X21, X0

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+32], X30
	003 Move [X31+48], X20
	004 Move [X31+56], X19
	005 Move X20, 0x77A000
	006 Move X8, [X20+1600]
	007 Move W19, W0
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+32], S3
	012 Move [X31+40], S4
	013 Move [X31+48], S5
	014 Move [X31+8], S6
	015 Move [X31+16], S7
	016 Compare X8, 0
	017 JumpIfNotEqual {23}
	018 Move X0, -51744768
	019 Add X0, X0, 791
	020 Call 0x1C17CB8
	021 Move X8, X0
	022 Move [X20+1600], X0
	023 And W3, W19, 1
	024 Add X0, X31, 16
	025 Add X1, X31, 40
	026 Add X2, X31, 8
	027 NotImplemented "Instruction BLR not yet implemented."
	028 Move X20, [X31+48]
	029 Move X19, [X31+56]
	030 Move X30, [X31+32]
	031 Add X31, X31, 64
	032 Return 

Method: System.Void Internal_Pop()

Disassembly:
	0x03C6CC50 STP V5, V4, [X31 + 0x60]
	0x03C6CC54 STP V7, V6, [X31 + 0x40]
	0x03C6CC58 LDP V5, V4, [X0 + 0x20]
	0x03C6CC5C LDP V7, V6, [X0]
	0x03C6CC60 ADD X0, X31, 0x40
	0x03C6CC64 STP V5, V4, [X31 + 0x20]
	0x03C6CC68 STP V7, V6, [X31]
	0x03C6CC6C BL 0x3C6CC7C
	0x03C6CC70 LDR X30, [X31 + 0x80]
	0x03C6CC74 ADD X31, X31, 0x90

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x77B000
	004 Move X0, [X19+1568]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51822592
	008 Add X0, X0, 2117
	009 Call 0x1C17CB8
	010 Move [X19+1568], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 Internal_GetCount()

Disassembly:
	0x03C6DA7C ADRP X24, 0x779000
	0x03C6DA80 ADRP X23, 0x4F3000
	0x03C6DA84 LDRB W8, [X24 + 0x681]
	0x03C6DA88 LDR X23, [X23 + 0x2B0]
	0x03C6DA8C MOV X22, X3
	0x03C6DA90 MOV X19, X2
	0x03C6DA94 MOV X20, X1
	0x03C6DA98 MOV W21, W0
	0x03C6DA9C TBNZ X8, 0x0, 0x3C6DAC0
	0x03C6DAA0 ADRP X0, 0x4F3000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x77A000
	004 Move X0, [X19+1576]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51761152
	008 Add X0, X0, 2378
	009 Call 0x1C17CB8
	010 Move [X19+1576], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: UnityEngine.Vector2 Unclip_Vector2(UnityEngine.Vector2 pos)

Disassembly:
	0x03C6DAA4 LDR X0, [X0 + 0x2B0]
	0x03C6DAA8 BL 0x1C16CF4
	0x03C6DAAC ADRP X0, 0x4AD000
	0x03C6DAB0 LDR X0, [X0 + 0x4C0]
	0x03C6DAB4 BL 0x1C16CF4
	0x03C6DAB8 MOVZ W8, 0x1
	0x03C6DABC STRB W8, [X24 + 0x681]
	0x03C6DAC0 LDR X0, [X23]
	0x03C6DAC4 ADRP X23, 0x4AD000
	0x03C6DAC8 LDR W8, [X0 + 0xE0]
	0x03C6DACC LDR X23, [X23 + 0x4C0]
	0x03C6DAD0 CBNZ W8, 0x3C6DAD8
	0x03C6DAD4 BL 0x1C16DFC
	0x03C6DAD8 MOV X0, X20
	0x03C6DADC MOV X1, X19
	0x03C6DAE0 MOV X2, X22
	0x03C6DAE4 BL 0x3C6D33C
	0x03C6DAE8 LDR X0, [X23]
	0x03C6DAEC MOV V8.16B, V0.16B

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x77A000
	005 Move X8, [X19+1608]
	006 Move [X31+8], S0
	007 Move [X31+16], S1
	008 Move [X31], X31
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51650560
	012 Add X0, X0, 3830
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X19+1608], X0
	016 Add X0, X31, 8
	017 Add X1, X31, 0
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move S0, [X31]
	020 Move S1, [X31+4]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Add X31, X31, 32
	024 Return X0

Method: UnityEngine.Vector2 UnclipToWindow_Vector2(UnityEngine.Vector2 pos)

Disassembly:
	0x03C6DB34 MOV V3.16B, V11.16B
	0x03C6DB38 LDP D11, D10, [X31], #0x60
	0x03C6DB3C B 0x3C6AC98
	0x03C6DB40 STR D10, [X31 - 0x40]!
	0x03C6DB44 STP D9, D8, [X31 + 0x10]
	0x03C6DB48 STP X30, X21, [X31 + 0x20]
	0x03C6DB4C STP X20, X19, [X31 + 0x30]
	0x03C6DB50 ADRP X20, 0x779000
	0x03C6DB54 ADRP X21, 0x4AD000
	0x03C6DB58 LDRB W8, [X20 + 0x682]
	0x03C6DB5C LDR X21, [X21 + 0x4C0]
	0x03C6DB60 MOV X19, X0
	0x03C6DB64 MOV V8.16B, V2.16B
	0x03C6DB68 MOV V9.16B, V1.16B
	0x03C6DB6C MOV V10.16B, V0.16B
	0x03C6DB70 TBNZ X8, 0x0, 0x3C6DB88
	0x03C6DB74 ADRP X0, 0x4AD000
	0x03C6DB78 LDR X0, [X0 + 0x4C0]
	0x03C6DB7C BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 32
	002 Move [X31+16], X30
	003 Move [X31+24], X19
	004 Move X19, 0x77A000
	005 Move X8, [X19+1616]
	006 Move [X31+8], S0
	007 Move [X31+16], S1
	008 Move [X31], X31
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51875840
	012 Add X0, X0, 2255
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X19+1616], X0
	016 Add X0, X31, 8
	017 Add X1, X31, 0
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move S0, [X31]
	020 Move S1, [X31+4]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Add X31, X31, 32
	024 Return X0

Method: UnityEngine.Matrix4x4 GetMatrix()

Disassembly:
	0x03C686F0 LDR V17, [X31 + 0x1B4]
	0x03C686F4 FSUB S4, S4, S3
	0x03C686F8 FSUB S5, S5, S2
	0x03C686FC FSUB S6, S6, S1
	0x03C68700 FMUL S4, S4, S4
	0x03C68704 FMUL S5, S5, S5
	0x03C68708 LDR V18, [X31 + 0x1B8]
	0x03C6870C LDR V19, [X31 + 0x1BC]
	0x03C68710 LDR V23, [X31 + 0x1F0]
	0x03C68714 LDR V22, [X31 + 0x1F4]
	0x03C68718 LDR V21, [X31 + 0x1F8]
	0x03C6871C LDR V20, [X31 + 0x1FC]
	0x03C68720 FADD S4, S4, S5
	0x03C68724 FSUB S5, S7, S0
	0x03C68728 FMUL S6, S6, S6
	0x03C6872C FADD S4, S6, S4
	0x03C68730 FMUL S5, S5, S5
	0x03C68734 FADD S4, S5, S4
	0x03C68738 FCMP S4, S9
	0x03C6873C STP S18, S17, [X31 + 0x1C]
	0x03C68740 STP S20, S19, [X31 + 0x14]
	0x03C68744 STP S22, S21, [X31 + 0xC]
	0x03C68748 STR S23, [X31 + 0x8]
	0x03C6874C B.MI 0x3C687DC
	0x03C68750 FSUB S0, S14, S16

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+80], X20
	004 Move [X31+88], X19
	005 Move X20, 0x77F000
	006 Move X19, X8
	007 Move X8, [X20+1624]
	008 NotImplemented "Instruction MOVI not yet implemented."
	009 Move [X31+32], V0
	010 Move [X31+40], V0
	011 Move [X31], V0
	012 Move [X31+8], V0
	013 Compare X8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51830784
	016 Add X0, X0, 2641
	017 Call 0x1C17CB8
	018 Move X8, X0
	019 Move [X20+1624], X0
	020 Add X0, X31, 0
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move V1, [X31+32]
	023 Move V0, [X31+48]
	024 Move V3, [X31]
	025 Move V2, [X31+16]
	026 Move X30, [X31+64]
	027 Move [X19+32], V1
	028 Move [X19+40], V0
	029 Move [X19], V3
	030 Move [X19+8], V2
	031 Move X20, [X31+80]
	032 Move X19, [X31+88]
	033 Add X31, X31, 96
	034 Return X0

Method: System.Void SetMatrix(UnityEngine.Matrix4x4 m)

Disassembly:
	0x03C687A0 FSUB S3, S8, S3
	0x03C687A4 FMUL S2, S2, S2
	0x03C687A8 FADD S0, S0, S1
	0x03C687AC FADD S0, S2, S0
	0x03C687B0 FMUL S1, S3, S3
	0x03C687B4 FADD S0, S1, S0
	0x03C687B8 FCMP S0, S9
	0x03C687BC B.MI 0x3C68898
	0x03C687C0 ADRP X8, 0x4B2000
	0x03C687C4 LDR X8, [X8 + 0x4C0]
	0x03C687C8 LDR X0, [X8]
	0x03C687CC LDR W8, [X0 + 0xE0]
	0x03C687D0 CBNZ W8, 0x3C6891C
	0x03C687D4 BL 0x1C16DFC
	0x03C687D8 B 0x3C6891C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77F000
	005 Move X1, [X20+1632]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51789824
	010 Add X0, X0, 1946
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1632], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_PushParentClip(UnityEngine.Matrix4x4 objectTransform, UnityEngine.Rect clipRect)

Disassembly:
	0x03C6DC3C BL 0x1C16CF4
	0x03C6DC40 ADRP X0, 0x4F3000
	0x03C6DC44 LDR X0, [X0 + 0x2B0]
	0x03C6DC48 BL 0x1C16CF4
	0x03C6DC4C ADRP X0, 0x4AD000
	0x03C6DC50 LDR X0, [X0 + 0x4C0]
	0x03C6DC54 BL 0x1C16CF4
	0x03C6DC58 ADRP X0, 0x4F3000
	0x03C6DC5C LDR X0, [X0 + 0x2D8]
	0x03C6DC60 BL 0x1C16CF4
	0x03C6DC64 MOVZ W8, 0x1
	0x03C6DC68 STRB W8, [X23 + 0x683]
	0x03C6DC6C LDR X0, [X22]
	0x03C6DC70 ADRP X23, 0x4F3000
	0x03C6DC74 ADRP X22, 0x4F3000
	0x03C6DC78 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+128], X30
	003 Move V5, [X0+32]
	004 Move V4, [X0+48]
	005 Move V7, [X0]
	006 Move V6, [X0+16]
	007 Add X1, X31, 0
	008 Move [X31+96], V5
	009 Move [X31+104], V4
	010 Move [X31+64], V7
	011 Move [X31+72], V6
	012 Move V5, [X0+32]
	013 Move V4, [X0+48]
	014 Move V7, [X0]
	015 Move V6, [X0+16]
	016 Add X0, X31, 64
	017 Move [X31+32], V5
	018 Move [X31+40], V4
	019 Move [X31], V7
	020 Move [X31+8], V6
	021 Call GUIClip.Internal_PushParentClip, X0, X1, X2
	022 Move X30, [X31+128]
	023 Add X31, X31, 144
	024 Return 

Method: System.Void Internal_PushParentClip(UnityEngine.Matrix4x4 renderTransform, UnityEngine.Matrix4x4 inputTransform, UnityEngine.Rect clipRect)

Disassembly:
	0x03C6DC7C LDR X23, [X23 + 0x2D8]
	0x03C6DC80 LDR X22, [X22 + 0x2B0]
	0x03C6DC84 CBNZ W8, 0x3C6DC8C
	0x03C6DC88 BL 0x1C16DFC
	0x03C6DC8C LDR X0, [X23]
	0x03C6DC90 ADRP X23, 0x4AD000
	0x03C6DC94 LDR X23, [X23 + 0x4C0]
	0x03C6DC98 BL 0x3C678AC
	0x03C6DC9C LDR X8, [X22]
	0x03C6DCA0 MOV X22, X0
	0x03C6DCA4 LDR W9, [X8 + 0xE0]
	0x03C6DCA8 CBNZ W9, 0x3C6DCB4
	0x03C6DCAC MOV X0, X8
	0x03C6DCB0 BL 0x1C16DFC
	0x03C6DCB4 MOV X0, X22
	0x03C6DCB8 MOV X1, X20
	0x03C6DCBC MOV X2, X21
	0x03C6DCC0 BL 0x3C6D33C
	0x03C6DCC4 LDR X0, [X23]
	0x03C6DCC8 MOV V11.16B, V0.16B
	0x03C6DCCC MOV V12.16B, V1.16B
	0x03C6DCD0 MOV V13.16B, V2.16B
	0x03C6DCD4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x77A000
	007 Move X8, [X21+1640]
	008 Move X19, X1
	009 Move X20, X0
	010 Move [X31], S0
	011 Move [X31+8], S1
	012 Move [X31+8], S2
	013 Move [X31+16], S3
	014 Compare X8, 0
	015 JumpIfNotEqual {21}
	016 Move X0, -51728384
	017 Add X0, X0, 105
	018 Call 0x1C17CB8
	019 Move X8, X0
	020 Move [X21+1640], X0
	021 Add X2, X31, 0
	022 Move X0, X20
	023 Move X1, X19
	024 NotImplemented "Instruction BLR not yet implemented."
	025 Move X20, [X31+32]
	026 Move X19, [X31+40]
	027 Move X30, [X31+16]
	028 Move X21, [X31+24]
	029 Add X31, X31, 48
	030 Return 

Method: System.Void Internal_PopParentClip()

Disassembly:
	0x03C6DD2C STP X20, X19, [X31 + 0x10]
	0x03C6DD30 ADRP X21, 0x779000
	0x03C6DD34 ADRP X20, 0x4B1000
	0x03C6DD38 LDRB W8, [X21 + 0x684]
	0x03C6DD3C LDR X20, [X20 + 0xBD0]
	0x03C6DD40 MOV X19, X0
	0x03C6DD44 TBNZ X8, 0x0, 0x3C6DD68
	0x03C6DD48 ADRP X0, 0x4B1000
	0x03C6DD4C LDR X0, [X0 + 0xBD0]
	0x03C6DD50 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x77A000
	004 Move X0, [X19+1584]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51843072
	008 Add X0, X0, 2185
	009 Call 0x1C17CB8
	010 Move [X19+1584], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void Push(UnityEngine.Rect screenRect, UnityEngine.Vector2 scrollOffset, UnityEngine.Vector2 renderOffset, System.Boolean resetOffset)

Disassembly:
	0x03C6CBDC ADRP X0, 0xFFFFFFFFFCE8D000
	0x03C6CBE0 ADD X0, X0, 0xA51

ISIL:
	001 And W0, W0, 1
	002 Call GUIClip.Internal_Push, X0, X1, X2, X3
	003 Return 

Method: UnityEngine.Vector2 Unclip(UnityEngine.Vector2 pos)

Disassembly:
	0x03C6DD54 ADRP X0, 0x4AD000

ISIL:
	001 Call GUIClip.Unclip_Vector2, X0
	002 Return X0

Method: UnityEngine.Vector2 UnclipToWindow(UnityEngine.Vector2 pos)

Disassembly:
	0x03C6DD58 LDR X0, [X0 + 0x890]

ISIL:
	001 Call GUIClip.UnclipToWindow_Vector2, X0
	002 Return X0

Method: System.Void get_visibleRect_Injected(out UnityEngine.Rect ret)

Disassembly:
	0x03C6D980 MOVZ W8, 0x1
	0x03C6D984 STRB W8, [X20 + 0x939]
	0x03C6D988 LDR X0, [X21]
	0x03C6D98C LDR W8, [X0 + 0xE0]
	0x03C6D990 CBNZ W8, 0x3C6D998
	0x03C6D994 BL 0x1C16DFC
	0x03C6D998 MOV W1, W19
	0x03C6D99C LDP X20, X19, [X31 + 0x10]
	0x03C6D9A0 MOV W0, W31
	0x03C6D9A4 LDP X30, X21, [X31], #0x20
	0x03C6D9A8 B 0x3C68E54
	0x03C6D9AC STP X30, X23, [X31 - 0x30]!
	0x03C6D9B0 STP X22, X21, [X31 + 0x10]
	0x03C6D9B4 STP X20, X19, [X31 + 0x20]
	0x03C6D9B8 ADRP X23, 0x779000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77A000
	005 Move X1, [X20+1592]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51851264
	010 Add X0, X0, 2576
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1592], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_Push_Injected(ref UnityEngine.Rect screenRect, ref UnityEngine.Vector2 scrollOffset, ref UnityEngine.Vector2 renderOffset, System.Boolean resetOffset)

Disassembly:
	0x03C6DA20 LDR W9, [X8 + 0xE0]
	0x03C6DA24 CBNZ W9, 0x3C6DA30
	0x03C6DA28 MOV X0, X8
	0x03C6DA2C BL 0x1C16DFC
	0x03C6DA30 BL 0x3C6748C
	0x03C6DA34 CBZ X0, 0x3C6DA58
	0x03C6DA38 LDR X2, [X0 + 0x30]
	0x03C6DA3C AND W0, W20, 0x1
	0x03C6DA40 MOV X1, X21
	0x03C6DA44 MOV X3, X19
	0x03C6DA48 LDP X20, X19, [X31 + 0x20]
	0x03C6DA4C LDP X22, X21, [X31 + 0x10]
	0x03C6DA50 LDP X30, X23, [X31], #0x30
	0x03C6DA54 B 0x3C6DA64
	0x03C6DA58 BL 0x1C16F20
	0x03C6DA5C LDR X0, [X0 + 0x30]
	0x03C6DA60 RET
	0x03C6DA64 STP D11, D10, [X31 - 0x60]!
	0x03C6DA68 STP D9, D8, [X31 + 0x10]
	0x03C6DA6C STR X30, [X31 + 0x20]
	0x03C6DA70 STP X24, X23, [X31 + 0x30]
	0x03C6DA74 STP X22, X21, [X31 + 0x40]
	0x03C6DA78 STP X20, X19, [X31 + 0x50]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x77A000
	008 Move X4, [X23+1600]
	009 Move W21, W3
	010 Move X19, X2
	011 Move X20, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51744768
	016 Add X0, X0, 791
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+1600], X0
	020 And W3, W21, 1
	021 Move X0, X22
	022 Move X1, X20
	023 Move X2, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Void Unclip_Vector2_Injected(ref UnityEngine.Vector2 pos, out UnityEngine.Vector2 ret)

Disassembly:
	0x03C6DAF0 MOV V9.16B, V1.16B
	0x03C6DAF4 MOV V10.16B, V2.16B
	0x03C6DAF8 LDR W8, [X0 + 0xE0]
	0x03C6DAFC MOV V11.16B, V3.16B
	0x03C6DB00 CBNZ W8, 0x3C6DB08
	0x03C6DB04 BL 0x1C16DFC
	0x03C6DB08 AND W0, W21, 0x1
	0x03C6DB0C MOV V0.16B, V8.16B
	0x03C6DB10 MOV V1.16B, V9.16B
	0x03C6DB14 MOV X1, X20
	0x03C6DB18 MOV X2, X19
	0x03C6DB1C LDP X20, X19, [X31 + 0x50]
	0x03C6DB20 LDP X22, X21, [X31 + 0x40]
	0x03C6DB24 LDP X24, X23, [X31 + 0x30]
	0x03C6DB28 LDR X30, [X31 + 0x20]
	0x03C6DB2C LDP D9, D8, [X31 + 0x10]
	0x03C6DB30 MOV V2.16B, V10.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x77A000
	006 Move X2, [X21+1608]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51650560
	012 Add X0, X0, 3830
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1608], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void UnclipToWindow_Vector2_Injected(ref UnityEngine.Vector2 pos, out UnityEngine.Vector2 ret)

Disassembly:
	0x03C6DB80 MOVZ W8, 0x1
	0x03C6DB84 STRB W8, [X20 + 0x682]
	0x03C6DB88 LDR X0, [X21]
	0x03C6DB8C LDR W8, [X0 + 0xE0]
	0x03C6DB90 CBNZ W8, 0x3C6DB98
	0x03C6DB94 BL 0x1C16DFC
	0x03C6DB98 BL 0x3C6748C
	0x03C6DB9C CBZ X0, 0x3C6DBD8
	0x03C6DBA0 LDR X20, [X0 + 0x58]
	0x03C6DBA4 BL 0x3C6748C
	0x03C6DBA8 CBZ X0, 0x3C6DBD8
	0x03C6DBAC LDR X1, [X0 + 0x60]
	0x03C6DBB0 MOV V1.16B, V9.16B
	0x03C6DBB4 MOV V2.16B, V8.16B
	0x03C6DBB8 MOV X0, X20
	0x03C6DBBC MOV X2, X19
	0x03C6DBC0 LDP X20, X19, [X31 + 0x30]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x77A000
	006 Move X2, [X21+1616]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51875840
	012 Add X0, X0, 2255
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1616], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void GetMatrix_Injected(out UnityEngine.Matrix4x4 ret)

Disassembly:
	0x03C6DBC4 LDP X30, X21, [X31 + 0x20]
	0x03C6DBC8 LDP D9, D8, [X31 + 0x10]
	0x03C6DBCC MOV V0.16B, V10.16B
	0x03C6DBD0 LDR V10, [X31], #0x40
	0x03C6DBD4 B 0x3C6DBEC
	0x03C6DBD8 BL 0x1C16F20
	0x03C6DBDC LDR X0, [X0 + 0x58]
	0x03C6DBE0 RET
	0x03C6DBE4 LDR X0, [X0 + 0x60]
	0x03C6DBE8 RET
	0x03C6DBEC STR D14, [X31 - 0x70]!
	0x03C6DBF0 STP D13, D12, [X31 + 0x10]
	0x03C6DBF4 STP D11, D10, [X31 + 0x20]
	0x03C6DBF8 STP D9, D8, [X31 + 0x30]
	0x03C6DBFC STP X30, X23, [X31 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77A000
	005 Move X1, [X20+1624]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51851264
	010 Add X0, X0, 2641
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1624], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetMatrix_Injected(ref UnityEngine.Matrix4x4 m)

Disassembly:
	0x03C6DC00 STP X22, X21, [X31 + 0x50]
	0x03C6DC04 STP X20, X19, [X31 + 0x60]
	0x03C6DC08 ADRP X23, 0x779000
	0x03C6DC0C ADRP X22, 0x4B1000
	0x03C6DC10 LDRB W8, [X23 + 0x683]
	0x03C6DC14 LDR X22, [X22 + 0xBD0]
	0x03C6DC18 MOV X21, X2
	0x03C6DC1C MOV X19, X1
	0x03C6DC20 MOV X20, X0
	0x03C6DC24 MOV V8.16B, V2.16B
	0x03C6DC28 MOV V9.16B, V1.16B
	0x03C6DC2C MOV V10.16B, V0.16B
	0x03C6DC30 TBNZ X8, 0x0, 0x3C6DC6C
	0x03C6DC34 ADRP X0, 0x4B1000
	0x03C6DC38 LDR X0, [X0 + 0xBD0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77A000
	005 Move X1, [X20+1632]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51810304
	010 Add X0, X0, 1946
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1632], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_PushParentClip_Injected(ref UnityEngine.Matrix4x4 renderTransform, ref UnityEngine.Matrix4x4 inputTransform, ref UnityEngine.Rect clipRect)

Disassembly:
	0x03C6DCD8 MOV V14.16B, V3.16B
	0x03C6DCDC CBNZ W8, 0x3C6DCE4
	0x03C6DCE0 BL 0x1C16DFC
	0x03C6DCE4 MOV V0.16B, V11.16B
	0x03C6DCE8 MOV V1.16B, V12.16B
	0x03C6DCEC MOV V2.16B, V13.16B
	0x03C6DCF0 MOV V4.16B, V10.16B
	0x03C6DCF4 MOV V5.16B, V9.16B
	0x03C6DCF8 MOV V6.16B, V8.16B
	0x03C6DCFC MOV X0, X20
	0x03C6DD00 MOV X1, X19
	0x03C6DD04 LDP X20, X19, [X31 + 0x60]
	0x03C6DD08 LDP X22, X21, [X31 + 0x50]
	0x03C6DD0C LDP X30, X23, [X31 + 0x40]
	0x03C6DD10 LDP D9, D8, [X31 + 0x30]
	0x03C6DD14 LDP D11, D10, [X31 + 0x20]
	0x03C6DD18 LDP D13, D12, [X31 + 0x10]
	0x03C6DD1C MOV V3.16B, V14.16B
	0x03C6DD20 LDR V14, [X31], #0x70
	0x03C6DD24 B 0x3C6B4F4
	0x03C6DD28 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x77A000
	007 Move X3, [X22+1640]
	008 Move X19, X2
	009 Move X20, X1
	010 Move X21, X0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51728384
	014 Add X0, X0, 105
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+1640], X0
	018 Move X0, X21
	019 Move X1, X20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

