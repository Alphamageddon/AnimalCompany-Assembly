Type: UnityEngine.Event

Method: UnityEngine.EventType get_rawType()

Disassembly:
	0x03C63C04 ADRP X0, 0x4E4000
	0x03C63C08 LDR X0, [X0 + 0x138]
	0x03C63C0C BL 0x1C16CF4
	0x03C63C10 ADRP X0, 0x4C1000
	0x03C63C14 LDR X0, [X0 + 0x750]
	0x03C63C18 BL 0x1C16CF4
	0x03C63C1C ADRP X0, 0x4FD000
	0x03C63C20 LDR X0, [X0 + 0x140]
	0x03C63C24 BL 0x1C16CF4
	0x03C63C28 ADRP X0, 0x4FD000
	0x03C63C2C LDR X0, [X0 + 0x148]
	0x03C63C30 BL 0x1C16CF4
	0x03C63C34 ADRP X0, 0x4FD000
	0x03C63C38 LDR X0, [X0 + 0x150]
	0x03C63C3C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X1, [X20+1072]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51810304
	010 Add X0, X0, 2471
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1072], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Vector2 get_mousePosition()

Disassembly:
	0x03C63C40 ADRP X0, 0x4E4000
	0x03C63C44 LDR X0, [X0 + 0x180]
	0x03C63C48 BL 0x1C16CF4
	0x03C63C4C ADRP X0, 0x4FD000
	0x03C63C50 LDR X0, [X0 + 0x158]
	0x03C63C54 BL 0x1C16CF4
	0x03C63C58 ADRP X0, 0x4E2000
	0x03C63C5C LDR X0, [X0 + 0xFB0]
	0x03C63C60 BL 0x1C16CF4
	0x03C63C64 ADRP X0, 0x4E4000
	0x03C63C68 LDR X0, [X0 + 0x1B8]
	0x03C63C6C BL 0x1C16CF4
	0x03C63C70 ADRP X0, 0x4E4000
	0x03C63C74 LDR X0, [X0 + 0x1C8]
	0x03C63C78 BL 0x1C16CF4
	0x03C63C7C ADRP X0, 0x4FD000
	0x03C63C80 LDR X0, [X0 + 0x160]
	0x03C63C84 BL 0x1C16CF4
	0x03C63C88 ADRP X0, 0x4FD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X8, [X20+1304]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51654656
	011 Add X0, X0, 846
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+1304], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_mousePosition(UnityEngine.Vector2 value)

Disassembly:
	0x03C63CD0 ADRP X0, 0x4FD000
	0x03C63CD4 LDR X0, [X0 + 0x180]
	0x03C63CD8 BL 0x1C16CF4
	0x03C63CDC ADRP X0, 0x4FD000
	0x03C63CE0 LDR X0, [X0 + 0x188]
	0x03C63CE4 BL 0x1C16CF4
	0x03C63CE8 ADRP X0, 0x4E4000
	0x03C63CEC LDR X0, [X0 + 0x280]
	0x03C63CF0 BL 0x1C16CF4
	0x03C63CF4 ADRP X0, 0x4E4000
	0x03C63CF8 LDR X0, [X0 + 0x288]
	0x03C63CFC BL 0x1C16CF4
	0x03C63D00 ADRP X0, 0x4E4000
	0x03C63D04 LDR X0, [X0 + 0x290]
	0x03C63D08 BL 0x1C16CF4
	0x03C63D0C ADRP X0, 0x4E4000
	0x03C63D10 LDR X0, [X0 + 0x298]
	0x03C63D14 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X8, [X20+1312]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51843072
	012 Add X0, X0, 1412
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+1312], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: UnityEngine.Vector2 get_delta()

Disassembly:
	0x03C63D5C BL 0x1C16CF4
	0x03C63D60 ADRP X0, 0x4FD000
	0x03C63D64 LDR X0, [X0 + 0x1A8]
	0x03C63D68 BL 0x1C16CF4
	0x03C63D6C ADRP X0, 0x4FD000
	0x03C63D70 LDR X0, [X0 + 0x1B0]
	0x03C63D74 BL 0x1C16CF4
	0x03C63D78 ADRP X0, 0x4E4000
	0x03C63D7C LDR X0, [X0 + 0x348]
	0x03C63D80 BL 0x1C16CF4
	0x03C63D84 ADRP X0, 0x4FD000
	0x03C63D88 LDR X0, [X0 + 0x1B8]
	0x03C63D8C BL 0x1C16CF4
	0x03C63D90 ADRP X0, 0x4FD000
	0x03C63D94 LDR X0, [X0 + 0x1C0]
	0x03C63D98 BL 0x1C16CF4
	0x03C63D9C ADRP X0, 0x4FD000
	0x03C63DA0 LDR X0, [X0 + 0x1C8]
	0x03C63DA4 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X8, [X20+1320]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51654656
	011 Add X0, X0, 914
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+1320], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_delta(UnityEngine.Vector2 value)

Disassembly:
	0x03C63DEC BL 0x1C16CF4
	0x03C63DF0 MOVZ W8, 0x1
	0x03C63DF4 STRB W8, [X19 + 0x512]
	0x03C63DF8 LDR X0, [X21]
	0x03C63DFC BL 0x1C16F10
	0x03C63E00 MOV W1, W31
	0x03C63E04 MOV X19, X0
	0x03C63E08 BL 0x3C63618
	0x03C63E0C CBZ X19, 0x3C656D8
	0x03C63E10 ADRP X21, 0x783000
	0x03C63E14 LDR X8, [X21 + 0x4B0]
	0x03C63E18 CBNZ X8, 0x3C63E30
	0x03C63E1C ADRP X0, 0xFFFFFFFFFCEBA000
	0x03C63E20 ADD X0, X0, 0x5CC
	0x03C63E24 BL 0x1C16CB8
	0x03C63E28 MOV X8, X0
	0x03C63E2C STR X0, [X21 + 0x4B0]
	0x03C63E30 MOVZ W1, 0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X8, [X20+1328]
	006 Move X19, X0
	007 Move [X31+8], S0
	008 Move [X31+16], S1
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51728384
	012 Add X0, X0, 1289
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+1328], X0
	016 Add X1, X31, 8
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: UnityEngine.PointerType get_pointerType()

Disassembly:
	0x03C63E78 MOV X0, X20
	0x03C63E7C MOV W1, W21
	0x03C63E80 MOV X2, X31
	0x03C63E84 BL 0x3222A1C
	0x03C63E88 AND W8, W0, 0xFFFF
	0x03C63E8C CMP W8, 0x25
	0x03C63E90 B.GT 0x3C63EE8
	0x03C63E94 CMP W8, 0x23
	0x03C63E98 B.EQ 0x3C63F3C
	0x03C63E9C CMP W8, 0x25
	0x03C63EA0 B.NE 0x3C63FE4
	0x03C63EA4 LDR X8, [X25 + 0x448]
	0x03C63EA8 CBNZ X8, 0x3C63EBC
	0x03C63EAC MOV X0, X22
	0x03C63EB0 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X1, [X20+1080]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51671040
	010 Add X0, X0, 673
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1080], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_button()

Disassembly:
	0x03C63EB4 MOV X8, X0
	0x03C63EB8 STR X0, [X25 + 0x448]
	0x03C63EBC MOV X0, X19
	0x03C63EC0 BLR X8
	0x03C63EC4 LDR X8, [X26 + 0x450]
	0x03C63EC8 MOV W24, W0
	0x03C63ECC CBNZ X8, 0x3C63EE0
	0x03C63ED0 MOV X0, X23
	0x03C63ED4 BL 0x1C16CB8
	0x03C63ED8 MOV X8, X0
	0x03C63EDC STR X0, [X26 + 0x450]
	0x03C63EE0 ORR W1, W24, 0x8
	0x03C63EE4 B 0x3C63FC0
	0x03C63EE8 CMP W8, 0x26
	0x03C63EEC B.EQ 0x3C63F80

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X1, [X20+1088]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51712000
	010 Add X0, X0, 1334
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1088], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.EventModifiers get_modifiers()

Disassembly:
	0x03C63EF0 CMP W8, 0x5E
	0x03C63EF4 B.NE 0x3C63FE4
	0x03C63EF8 LDR X8, [X25 + 0x448]
	0x03C63EFC CBNZ X8, 0x3C63F10
	0x03C63F00 MOV X0, X22
	0x03C63F04 BL 0x1C16CB8
	0x03C63F08 MOV X8, X0
	0x03C63F0C STR X0, [X25 + 0x448]
	0x03C63F10 MOV X0, X19
	0x03C63F14 BLR X8
	0x03C63F18 LDR X8, [X26 + 0x450]
	0x03C63F1C MOV W24, W0
	0x03C63F20 CBNZ X8, 0x3C63F34
	0x03C63F24 MOV X0, X23
	0x03C63F28 BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X1, [X20+1096]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51777536
	010 Add X0, X0, 1328
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1096], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_modifiers(UnityEngine.EventModifiers value)

Disassembly:
	0x03C63F2C MOV X8, X0
	0x03C63F30 STR X0, [X26 + 0x450]
	0x03C63F34 ORR W1, W24, 0x2
	0x03C63F38 B 0x3C63FC0
	0x03C63F3C LDR X8, [X25 + 0x448]
	0x03C63F40 CBNZ X8, 0x3C63F54
	0x03C63F44 MOV X0, X22
	0x03C63F48 BL 0x1C16CB8
	0x03C63F4C MOV X8, X0
	0x03C63F50 STR X0, [X25 + 0x448]
	0x03C63F54 MOV X0, X19
	0x03C63F58 BLR X8
	0x03C63F5C LDR X8, [X26 + 0x450]
	0x03C63F60 MOV W24, W0
	0x03C63F64 CBNZ X8, 0x3C63F78
	0x03C63F68 MOV X0, X23
	0x03C63F6C BL 0x1C16CB8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x784000
	006 Move X2, [X21+1104]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51720192
	012 Add X0, X0, 2317
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1104], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Single get_pressure()

Disassembly:
	0x03C63F70 MOV X8, X0
	0x03C63F74 STR X0, [X26 + 0x450]
	0x03C63F78 ORR W1, W24, 0x1
	0x03C63F7C B 0x3C63FC0
	0x03C63F80 LDR X8, [X25 + 0x448]
	0x03C63F84 CBNZ X8, 0x3C63F98
	0x03C63F88 MOV X0, X22
	0x03C63F8C BL 0x1C16CB8
	0x03C63F90 MOV X8, X0
	0x03C63F94 STR X0, [X25 + 0x448]
	0x03C63F98 MOV X0, X19
	0x03C63F9C BLR X8
	0x03C63FA0 LDR X8, [X26 + 0x450]
	0x03C63FA4 MOV W24, W0
	0x03C63FA8 CBNZ X8, 0x3C63FBC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X1, [X20+1112]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51834880
	010 Add X0, X0, 2175
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1112], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Single get_twist()

Disassembly:
	0x03C63FAC MOV X0, X23
	0x03C63FB0 BL 0x1C16CB8
	0x03C63FB4 MOV X8, X0
	0x03C63FB8 STR X0, [X26 + 0x450]
	0x03C63FBC ORR W1, W24, 0x4
	0x03C63FC0 MOV X0, X19
	0x03C63FC4 BLR X8
	0x03C63FC8 LDR W8, [X20 + 0x10]
	0x03C63FCC ADD W21, W21, 0x1
	0x03C63FD0 CMP W21, W8
	0x03C63FD4 B.LT 0x3C63E78
	0x03C63FD8 B 0x3C63FE8
	0x03C63FDC MOV W21, W31
	0x03C63FE0 B 0x3C63FE8
	0x03C63FE4 LDR W8, [X20 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X1, [X20+1120]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51699712
	010 Add X0, X0, 3851
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1120], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Vector2 get_tilt()

Disassembly:
	0x03C63FE8 SUB W2, W8, W21
	0x03C63FEC MOV X0, X20
	0x03C63FF0 MOV W1, W21
	0x03C63FF4 MOV X3, X31
	0x03C63FF8 BL 0x3228DE4
	0x03C63FFC CBZ X0, 0x3C656D8
	0x03C64000 MOV X1, X31
	0x03C64004 BL 0x322B6E4
	0x03C64008 MOV X1, X31
	0x03C6400C MOV X20, X0
	0x03C64010 BL 0x3C8452C
	0x03C64014 MOVZ W8, 0xD23A
	0x03C64018 MOVK W8, 0x7A250000
	0x03C6401C CMP W0, W8
	0x03C64020 B.HI 0x3C640C8
	0x03C64024 MOVZ W8, 0xB915
	0x03C64028 MOVK W8, 0x3DB90000
	0x03C6402C CMP W0, W8
	0x03C64030 B.HI 0x3C64128

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x784000
	005 Move X8, [X20+1336]
	006 Move X19, X0
	007 Move [X31+8], X31
	008 Compare X8, 0
	009 JumpIfNotEqual {15}
	010 Move X0, -51703808
	011 Add X0, X0, 3882
	012 Call 0x1C17CB8
	013 Move X8, X0
	014 Move [X20+1336], X0
	015 Add X1, X31, 8
	016 Move X0, X19
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move S0, [X31+8]
	019 Move S1, [X31+12]
	020 Move X20, [X31+16]
	021 Move X19, [X31+24]
	022 Move X30, [X31+32]
	023 Return X0

Method: UnityEngine.PenStatus get_penStatus()

Disassembly:
	0x03C64078 MOVK W8, 0x124A0000
	0x03C6407C CMP W0, W8
	0x03C64080 B.NE 0x3C6542C
	0x03C64084 ADRP X8, 0x4C8000
	0x03C64088 LDR X8, [X8 + 0xB38]
	0x03C6408C MOV X0, X20
	0x03C64090 MOV X2, X31
	0x03C64094 LDR X1, [X8]
	0x03C64098 BL 0x321BA08
	0x03C6409C TBZ X0, 0x0, 0x3C6542C
	0x03C640A0 ADRP X20, 0x782000
	0x03C640A4 LDR X8, [X20 + 0x490]
	0x03C640A8 CBNZ X8, 0x3C640C0
	0x03C640AC ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C640B0 ADD X0, X0, 0x35

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1128]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51658752
	010 Add X0, X0, 773
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1128], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 get_clickCount()

Disassembly:
	0x03C640B4 BL 0x1C16CB8
	0x03C640B8 MOV X8, X0
	0x03C640BC STR X0, [X20 + 0x490]
	0x03C640C0 MOVZ W1, 0x114
	0x03C640C4 B 0x3C653CC
	0x03C640C8 MOVZ W8, 0xEDD9
	0x03C640CC MOVK W8, 0xBA140000
	0x03C640D0 CMP W0, W8
	0x03C640D4 B.HI 0x3C64184
	0x03C640D8 MOVZ W8, 0x9E6C
	0x03C640DC MOVK W8, 0xB6030000
	0x03C640E0 CMP W0, W8
	0x03C640E4 B.HI 0x3C6429C
	0x03C640E8 MOVZ W8, 0x682C
	0x03C640EC MOVK W8, 0x853C0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1136]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51765248
	010 Add X0, X0, 1462
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1136], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Char get_character()

Disassembly:
	0x03C640F0 CMP W0, W8
	0x03C640F4 B.HI 0x3C64520
	0x03C640F8 B.EQ 0x3C64E44
	0x03C640FC MOVZ W8, 0x5F96
	0x03C64100 MOVK W8, 0x7A300000
	0x03C64104 CMP W0, W8
	0x03C64108 B.EQ 0x3C64940
	0x03C6410C MOVZ W8, 0x713A
	0x03C64110 MOVK W8, 0x7F020000
	0x03C64114 CMP W0, W8
	0x03C64118 B.NE 0x3C6542C
	0x03C6411C ADRP X8, 0x4FC000
	0x03C64120 LDR X8, [X8 + 0x180]
	0x03C64124 B 0x3C65210
	0x03C64128 MOVZ W8, 0xC708

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1144]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51814400
	010 Add X0, X0, 2504
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1144], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_character(System.Char value)

Disassembly:
	0x03C6412C MOVK W8, 0x760D0000
	0x03C64130 CMP W0, W8
	0x03C64134 B.HI 0x3C6434C
	0x03C64138 MOVZ W8, 0xB59F
	0x03C6413C MOVK W8, 0x471C0000
	0x03C64140 CMP W0, W8
	0x03C64144 B.HI 0x3C645C0
	0x03C64148 MOVZ W8, 0xD54E
	0x03C6414C MOVK W8, 0x42580000
	0x03C64150 CMP W0, W8
	0x03C64154 B.EQ 0x3C64E88
	0x03C64158 MOVZ W8, 0xB20
	0x03C6415C MOVK W8, 0x43430000
	0x03C64160 CMP W0, W8
	0x03C64164 B.EQ 0x3C649B0
	0x03C64168 MOVZ W8, 0xB59F
	0x03C6416C MOVK W8, 0x471C0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X2, [X21+1152]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51838976
	012 Add X0, X0, 2209
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1152], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.KeyCode get_keyCode()

Disassembly:
	0x03C64170 CMP W0, W8
	0x03C64174 B.NE 0x3C6542C
	0x03C64178 ADRP X8, 0x4FC000
	0x03C6417C LDR X8, [X8 + 0x1B0]
	0x03C64180 B 0x3C65094
	0x03C64184 MOVZ W8, 0x858
	0x03C64188 MOVK W8, 0xFA320000
	0x03C6418C CMP W0, W8
	0x03C64190 B.HI 0x3C643FC
	0x03C64194 MOVZ W8, 0xC28E
	0x03C64198 MOVK W8, 0xD2C80000
	0x03C6419C CMP W0, W8
	0x03C641A0 B.HI 0x3C645FC
	0x03C641A4 MOVZ W8, 0xA99E
	0x03C641A8 MOVK W8, 0xBA1B0000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1160]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51666944
	010 Add X0, X0, 1451
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1160], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_keyCode(UnityEngine.KeyCode value)

Disassembly:
	0x03C641AC CMP W0, W8
	0x03C641B0 B.EQ 0x3C64EF8
	0x03C641B4 MOVZ W8, 0x9628
	0x03C641B8 MOVK W8, 0xC6A30000
	0x03C641BC CMP W0, W8
	0x03C641C0 B.EQ 0x3C649F4
	0x03C641C4 MOVZ W8, 0xC28E
	0x03C641C8 MOVK W8, 0xD2C80000
	0x03C641CC CMP W0, W8
	0x03C641D0 B.NE 0x3C6542C
	0x03C641D4 ADRP X8, 0x4E0000
	0x03C641D8 LDR X8, [X8 + 0xE98]
	0x03C641DC MOV X0, X20
	0x03C641E0 MOV X2, X31
	0x03C641E4 LDR X1, [X8]
	0x03C641E8 BL 0x321BA08
	0x03C641EC TBZ X0, 0x0, 0x3C6542C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X2, [X21+1168]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51691520
	012 Add X0, X0, 53
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1168], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Int32 get_displayIndex()

Disassembly:
	0x03C641F0 ADRP X20, 0x782000
	0x03C641F4 LDR X8, [X20 + 0x490]
	0x03C641F8 CBNZ X8, 0x3C64210
	0x03C641FC ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64200 ADD X0, X0, 0x35
	0x03C64204 BL 0x1C16CB8
	0x03C64208 MOV X8, X0
	0x03C6420C STR X0, [X20 + 0x490]
	0x03C64210 MOVZ W1, 0x116
	0x03C64214 B 0x3C653CC
	0x03C64218 MOVZ W8, 0x76EA
	0x03C6421C MOVK W8, 0x1A220000
	0x03C64220 CMP W0, W8
	0x03C64224 B.HI 0x3C64670
	0x03C64228 MOVZ W8, 0x73C4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1176]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51658752
	010 Add X0, X0, 808
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1176], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_displayIndex(System.Int32 value)

Disassembly:
	0x03C6422C MOVK W8, 0x18220000
	0x03C64230 CMP W0, W8
	0x03C64234 B.EQ 0x3C64F68
	0x03C64238 MOVZ W8, 0x7557
	0x03C6423C MOVK W8, 0x19220000
	0x03C64240 CMP W0, W8
	0x03C64244 B.EQ 0x3C64A38
	0x03C64248 MOVZ W8, 0x76EA
	0x03C6424C MOVK W8, 0x1A220000
	0x03C64250 CMP W0, W8
	0x03C64254 B.NE 0x3C6542C
	0x03C64258 ADRP X8, 0x4E3000
	0x03C6425C LDR X8, [X8 + 0x290]
	0x03C64260 MOV X0, X20
	0x03C64264 MOV X2, X31
	0x03C64268 LDR X1, [X8]
	0x03C6426C BL 0x321BA08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X2, [X21+1184]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51707904
	012 Add X0, X0, 685
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1184], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: UnityEngine.EventType get_type()

Disassembly:
	0x03C64270 TBZ X0, 0x0, 0x3C6542C
	0x03C64274 ADRP X20, 0x782000
	0x03C64278 LDR X8, [X20 + 0x490]
	0x03C6427C CBNZ X8, 0x3C64294
	0x03C64280 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64284 ADD X0, X0, 0x35
	0x03C64288 BL 0x1C16CB8
	0x03C6428C MOV X8, X0
	0x03C64290 STR X0, [X20 + 0x490]
	0x03C64294 MOVZ W1, 0x120
	0x03C64298 B 0x3C653CC
	0x03C6429C MOVZ W8, 0x3B38
	0x03C642A0 MOVK W8, 0xB6350000
	0x03C642A4 CMP W0, W8
	0x03C642A8 B.HI 0x3C646E4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1192]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51847168
	010 Add X0, X0, 1382
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1192], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_type(UnityEngine.EventType value)

Disassembly:
	0x03C642AC MOVZ W8, 0x64BB
	0x03C642B0 MOVK W8, 0xB6190000
	0x03C642B4 CMP W0, W8
	0x03C642B8 B.EQ 0x3C64FAC
	0x03C642BC MOVZ W8, 0xEC73
	0x03C642C0 MOVK W8, 0xB62C0000
	0x03C642C4 CMP W0, W8
	0x03C642C8 B.EQ 0x3C64A7C
	0x03C642CC MOVZ W8, 0x3B38
	0x03C642D0 MOVK W8, 0xB6350000
	0x03C642D4 CMP W0, W8
	0x03C642D8 B.NE 0x3C6542C
	0x03C642DC ADRP X8, 0x4FC000
	0x03C642E0 LDR X8, [X8 + 0x138]
	0x03C642E4 MOV X0, X20
	0x03C642E8 MOV X2, X31
	0x03C642EC LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X2, [X21+1200]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51666944
	012 Add X0, X0, 1484
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1200], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.String get_commandName()

Disassembly:
	0x03C642F0 BL 0x321BA08
	0x03C642F4 TBZ X0, 0x0, 0x3C6542C
	0x03C642F8 ADRP X20, 0x782000
	0x03C642FC LDR X8, [X20 + 0x480]
	0x03C64300 CBNZ X8, 0x3C64318
	0x03C64304 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64308 ADD X0, X0, 0x8A1
	0x03C6430C BL 0x1C16CB8
	0x03C64310 MOV X8, X0
	0x03C64314 STR X0, [X20 + 0x480]
	0x03C64318 MOVZ W1, 0x2D
	0x03C6431C MOV X0, X19
	0x03C64320 BLR X8
	0x03C64324 ADRP X20, 0x782000
	0x03C64328 LDR X8, [X20 + 0x490]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1208]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51814400
	010 Add X0, X0, 2539
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1208], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_commandName(System.String value)

Disassembly:
	0x03C6432C CBNZ X8, 0x3C64344
	0x03C64330 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64334 ADD X0, X0, 0x35
	0x03C64338 BL 0x1C16CB8
	0x03C6433C MOV X8, X0
	0x03C64340 STR X0, [X20 + 0x490]
	0x03C64344 MOVZ W1, 0x10D
	0x03C64348 B 0x3C652FC
	0x03C6434C MOVZ W8, 0x4EC0
	0x03C64350 MOVK W8, 0x76210000
	0x03C64354 CMP W0, W8
	0x03C64358 B.HI 0x3C64784
	0x03C6435C MOVZ W8, 0x59F
	0x03C64360 MOVK W8, 0x76100000
	0x03C64364 CMP W0, W8
	0x03C64368 B.EQ 0x3C6501C
	0x03C6436C MOVZ W8, 0xC164

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X2, [X21+1216]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51748864
	012 Add X0, X0, 2263
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1216], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void Internal_Use()

Disassembly:
	0x03C64370 MOVK W8, 0x76160000
	0x03C64374 CMP W0, W8
	0x03C64378 B.EQ 0x3C64AEC
	0x03C6437C MOVZ W8, 0x4EC0
	0x03C64380 MOVK W8, 0x76210000
	0x03C64384 CMP W0, W8
	0x03C64388 B.NE 0x3C6542C
	0x03C6438C ADRP X8, 0x4FC000
	0x03C64390 LDR X8, [X8 + 0x120]
	0x03C64394 MOV X0, X20
	0x03C64398 MOV X2, X31
	0x03C6439C LDR X1, [X8]
	0x03C643A0 BL 0x321BA08
	0x03C643A4 TBZ X0, 0x0, 0x3C6542C
	0x03C643A8 ADRP X20, 0x782000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1224]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51748864
	010 Add X0, X0, 2313
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1224], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.IntPtr Internal_Create(System.Int32 displayIndex)

Disassembly:
	0x03C643AC LDR X8, [X20 + 0x480]
	0x03C643B0 CBNZ X8, 0x3C643C8
	0x03C643B4 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C643B8 ADD X0, X0, 0x8A1
	0x03C643BC BL 0x1C16CB8
	0x03C643C0 MOV X8, X0
	0x03C643C4 STR X0, [X20 + 0x480]
	0x03C643C8 MOVZ W1, 0x35
	0x03C643CC MOV X0, X19
	0x03C643D0 BLR X8
	0x03C643D4 ADRP X20, 0x782000
	0x03C643D8 LDR X8, [X20 + 0x490]
	0x03C643DC CBNZ X8, 0x3C643F4
	0x03C643E0 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C643E4 ADD X0, X0, 0x35

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1232]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51683328
	010 Add X0, X0, 155
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1232], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_Destroy(System.IntPtr ptr)

Disassembly:
	0x03C643E8 BL 0x1C16CB8
	0x03C643EC MOV X8, X0
	0x03C643F0 STR X0, [X20 + 0x490]
	0x03C643F4 MOVZ W1, 0x105
	0x03C643F8 B 0x3C652FC
	0x03C643FC MOVZ W8, 0xA203
	0x03C64400 MOVK W8, 0xFBF80000
	0x03C64404 CMP W0, W8
	0x03C64408 B.HI 0x3C64824
	0x03C6440C MOVZ W8, 0x8004
	0x03C64410 MOVK W8, 0xFB1D0000
	0x03C64414 CMP W0, W8
	0x03C64418 B.EQ 0x3C6508C
	0x03C6441C MOVZ W8, 0x9EB
	0x03C64420 MOVK W8, 0xFB320000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1240]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51642368
	010 Add X0, X0, 1599
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1240], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.EventType GetTypeForControl(System.Int32 controlID)

Disassembly:
	0x03C64424 CMP W0, W8
	0x03C64428 B.EQ 0x3C64B5C
	0x03C6442C MOVZ W8, 0xA203
	0x03C64430 MOVK W8, 0xFBF80000
	0x03C64434 CMP W0, W8
	0x03C64438 B.NE 0x3C6542C
	0x03C6443C ADRP X8, 0x4FC000
	0x03C64440 LDR X8, [X8 + 0x148]
	0x03C64444 MOV X0, X20
	0x03C64448 MOV X2, X31
	0x03C6444C LDR X1, [X8]
	0x03C64450 BL 0x321BA08
	0x03C64454 TBZ X0, 0x0, 0x3C6542C
	0x03C64458 ADRP X20, 0x782000
	0x03C6445C LDR X8, [X20 + 0x480]
	0x03C64460 CBNZ X8, 0x3C64478
	0x03C64464 ADRP X0, 0xFFFFFFFFFCE8F000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X2, [X21+1248]
	007 Move W19, W1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51732480
	012 Add X0, X0, 1238
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1248], X0
	016 Move X0, X20
	017 Move W1, W19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void CopyFromPtr(System.IntPtr ptr)

Disassembly:
	0x03C64468 ADD X0, X0, 0x8A1
	0x03C6446C BL 0x1C16CB8
	0x03C64470 MOV X8, X0
	0x03C64474 STR X0, [X20 + 0x480]
	0x03C64478 MOVZ W1, 0xA
	0x03C6447C MOV X0, X19
	0x03C64480 BLR X8
	0x03C64484 ADRP X20, 0x782000
	0x03C64488 LDR X8, [X20 + 0x490]
	0x03C6448C CBNZ X8, 0x3C644A4
	0x03C64490 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64494 ADD X0, X0, 0x35
	0x03C64498 BL 0x1C16CB8
	0x03C6449C MOV X8, X0
	0x03C644A0 STR X0, [X20 + 0x490]
	0x03C644A4 MOVZ W1, 0x10F
	0x03C644A8 B 0x3C652FC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X2, [X21+1256]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51634176
	012 Add X0, X0, 1077
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1256], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Boolean PopEvent(UnityEngine.Event outEvent)

Disassembly:
	0x03C644AC MOVZ W8, 0x6D78
	0x03C644B0 MOVK W8, 0x14220000
	0x03C644B4 CMP W0, W8
	0x03C644B8 B.EQ 0x3C650D0
	0x03C644BC MOVZ W8, 0x709E
	0x03C644C0 MOVK W8, 0x16220000
	0x03C644C4 CMP W0, W8
	0x03C644C8 B.EQ 0x3C64BA0
	0x03C644CC MOVZ W8, 0x7231
	0x03C644D0 MOVK W8, 0x17220000
	0x03C644D4 CMP W0, W8
	0x03C644D8 B.NE 0x3C6542C
	0x03C644DC ADRP X8, 0x4E3000
	0x03C644E0 LDR X8, [X8 + 0x180]
	0x03C644E4 MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1264]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51830784
	010 Add X0, X0, 1774
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1264], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_SetNativeEvent(System.IntPtr ptr)

Disassembly:
	0x03C644E8 MOV X2, X31
	0x03C644EC LDR X1, [X8]
	0x03C644F0 BL 0x321BA08
	0x03C644F4 TBZ X0, 0x0, 0x3C6542C
	0x03C644F8 ADRP X20, 0x782000
	0x03C644FC LDR X8, [X20 + 0x490]
	0x03C64500 CBNZ X8, 0x3C64518
	0x03C64504 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64508 ADD X0, X0, 0x35
	0x03C6450C BL 0x1C16CB8
	0x03C64510 MOV X8, X0
	0x03C64514 STR X0, [X20 + 0x490]
	0x03C64518 MOVZ W1, 0x11B
	0x03C6451C B 0x3C653CC
	0x03C64520 MOVZ W8, 0x37BF

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X1, [X20+1272]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51773440
	010 Add X0, X0, 1888
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+1272], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_MakeMasterEventCurrent(System.Int32 displayIndex)

Disassembly:
	0x03C64524 MOVK W8, 0x85EE0000
	0x03C64528 CMP W0, W8
	0x03C6452C B.EQ 0x3C65114
	0x03C64530 MOVZ W8, 0x2E4C
	0x03C64534 MOVK W8, 0x98F70000
	0x03C64538 CMP W0, W8
	0x03C6453C B.EQ 0x3C64BE4
	0x03C64540 MOVZ W8, 0x9E6C
	0x03C64544 MOVK W8, 0xB6030000
	0x03C64548 CMP W0, W8
	0x03C6454C B.NE 0x3C6542C
	0x03C64550 ADRP X8, 0x4FC000
	0x03C64554 LDR X8, [X8 + 0x190]
	0x03C64558 MOV X0, X20
	0x03C6455C MOV X2, X31
	0x03C64560 LDR X1, [X8]
	0x03C64564 BL 0x321BA08
	0x03C64568 TBZ X0, 0x0, 0x3C6542C
	0x03C6456C ADRP X20, 0x782000
	0x03C64570 LDR X8, [X20 + 0x480]
	0x03C64574 CBNZ X8, 0x3C6458C
	0x03C64578 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C6457C ADD X0, X0, 0x8A1
	0x03C64580 BL 0x1C16CB8
	0x03C64584 MOV X8, X0
	0x03C64588 STR X0, [X20 + 0x480]
	0x03C6458C MOVZ W1, 0x39
	0x03C64590 MOV X0, X19
	0x03C64594 BLR X8
	0x03C64598 ADRP X20, 0x782000
	0x03C6459C LDR X8, [X20 + 0x490]
	0x03C645A0 CBNZ X8, 0x3C645B8
	0x03C645A4 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C645A8 ADD X0, X0, 0x35
	0x03C645AC BL 0x1C16CB8
	0x03C645B0 MOV X8, X0
	0x03C645B4 STR X0, [X20 + 0x490]
	0x03C645B8 MOVZ W1, 0x109
	0x03C645BC B 0x3C652FC
	0x03C645C0 MOVZ W8, 0x444A
	0x03C645C4 MOVK W8, 0x67C20000
	0x03C645C8 CMP W0, W8
	0x03C645CC B.EQ 0x3C651C4
	0x03C645D0 MOVZ W8, 0x75AA
	0x03C645D4 MOVK W8, 0x6A8E0000
	0x03C645D8 CMP W0, W8
	0x03C645DC B.EQ 0x3C64C28
	0x03C645E0 MOVZ W8, 0xC708
	0x03C645E4 MOVK W8, 0x760D0000
	0x03C645E8 CMP W0, W8
	0x03C645EC B.NE 0x3C6542C
	0x03C645F0 ADRP X8, 0x4FC000
	0x03C645F4 LDR X8, [X8 + 0x168]
	0x03C645F8 B 0x3C64E90
	0x03C645FC MOVZ W8, 0x3A5
	0x03C64600 MOVK W8, 0xE8D30000
	0x03C64604 CMP W0, W8
	0x03C64608 B.EQ 0x3C65208
	0x03C6460C MOVZ W8, 0x9F12
	0x03C64610 MOVK W8, 0xED7D0000
	0x03C64614 CMP W0, W8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x783000
	007 Move X21, 0x4F6000
	008 Move W8, [X20+1280]
	009 Move X21, [X21+32]
	010 Move W19, W0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4F6000
	016 Move X0, [X0+32]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+1280], W8
	020 Move X0, [X21]
	021 Move X8, [X0+184]
	022 Move X9, [X8+8]
	023 Compare X9, 0
	024 JumpIfNotEqual {32}
	025 Call 0x1C17F10
	026 Move W1, W19
	027 Move X20, X0
	028 Call Event..ctor, X0, X1
	029 Move X8, [X21]
	030 Move X8, [X8+184]
	031 Move [X8+8], X20
	032 Move X20, [X8+8]
	033 Compare X20, 0
	034 JumpIfEqual {73}
	035 Move X22, 0x783000
	036 Move X8, [X22+1184]
	037 Compare X8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, -51707904
	040 Add X0, X0, 685
	041 Call 0x1C17CB8
	042 Move X8, X0
	043 Move [X22+1184], X0
	044 Move X0, X20
	045 Move W1, W19
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X8, [X21]
	048 Move X8, [X8+184]
	049 Move X9, [X8+8]
	050 Move [X8], X9
	051 Move X8, [X21]
	052 Move X8, [X8+184]
	053 Move X8, [X8+8]
	054 Compare X8, 0
	055 JumpIfEqual {73}
	056 Move X20, 0x783000
	057 Move X1, [X20+1272]
	058 Move X19, [X8+16]
	059 Compare X1, 0
	060 JumpIfNotEqual {66}
	061 Move X0, -51773440
	062 Add X0, X0, 1888
	063 Call 0x1C17CB8
	064 Move X1, X0
	065 Move [X20+1272], X0
	066 Move X0, X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 CallNoReturn X1
	073 Call 0x1C17F20

Method: System.Int32 GetDoubleClickTime()

Disassembly:
	0x03C64668 MOVZ W1, 0x123
	0x03C6466C B 0x3C653CC
	0x03C64670 MOVZ W8, 0x787D
	0x03C64674 MOVK W8, 0x1B220000
	0x03C64678 CMP W0, W8
	0x03C6467C B.EQ 0x3C6524C
	0x03C64680 MOVZ W8, 0xE285
	0x03C64684 MOVK W8, 0x35530000
	0x03C64688 CMP W0, W8
	0x03C6468C B.EQ 0x3C64CB0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x783000
	004 Move X0, [X19+1288]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51613696
	008 Add X0, X0, 3754
	009 Call 0x1C17CB8
	010 Move [X19+1288], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void .ctor()

Disassembly:
	0x03C64690 MOVZ W8, 0xB915
	0x03C64694 MOVK W8, 0x3DB90000
	0x03C64698 CMP W0, W8
	0x03C6469C B.NE 0x3C6542C
	0x03C646A0 ADRP X8, 0x4E1000
	0x03C646A4 LDR X8, [X8 + 0xFB0]
	0x03C646A8 MOV X0, X20
	0x03C646AC MOV X2, X31
	0x03C646B0 LDR X1, [X8]
	0x03C646B4 BL 0x321BA08
	0x03C646B8 TBZ X0, 0x0, 0x3C6542C
	0x03C646BC ADRP X20, 0x782000
	0x03C646C0 LDR X8, [X20 + 0x490]
	0x03C646C4 CBNZ X8, 0x3C646DC
	0x03C646C8 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C646CC ADD X0, X0, 0x35
	0x03C646D0 BL 0x1C16CB8
	0x03C646D4 MOV X8, X0
	0x03C646D8 STR X0, [X20 + 0x490]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X1, X31
	005 Move X19, X0
	006 Call Object..ctor, X0
	007 Move X20, 0x783000
	008 Move X8, [X20+1232]
	009 Compare X8, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51683328
	012 Add X0, X0, 155
	013 Call 0x1C17CB8
	014 Move X8, X0
	015 Move [X20+1232], X0
	016 Move W0, W31
	017 NotImplemented "Instruction BLR not yet implemented."
	018 Move [X19+16], X0
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return 

Method: System.Void .ctor(System.Int32 displayIndex)

Disassembly:
	0x03C64618 B.EQ 0x3C64C6C
	0x03C6461C MOVZ W8, 0x858
	0x03C64620 MOVK W8, 0xFA320000
	0x03C64624 CMP W0, W8
	0x03C64628 B.NE 0x3C6542C
	0x03C6462C ADRP X8, 0x4E3000
	0x03C64630 LDR X8, [X8 + 0x280]
	0x03C64634 MOV X0, X20
	0x03C64638 MOV X2, X31
	0x03C6463C LDR X1, [X8]
	0x03C64640 BL 0x321BA08
	0x03C64644 TBZ X0, 0x0, 0x3C6542C
	0x03C64648 ADRP X20, 0x782000
	0x03C6464C LDR X8, [X20 + 0x490]
	0x03C64650 CBNZ X8, 0x3C64668
	0x03C64654 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64658 ADD X0, X0, 0x35
	0x03C6465C BL 0x1C16CB8
	0x03C64660 MOV X8, X0
	0x03C64664 STR X0, [X20 + 0x490]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W20, W1
	006 Move X1, X31
	007 Move X19, X0
	008 Call Object..ctor, X0
	009 Move X21, 0x783000
	010 Move X8, [X21+1232]
	011 Compare X8, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51683328
	014 Add X0, X0, 155
	015 Call 0x1C17CB8
	016 Move X8, X0
	017 Move [X21+1232], X0
	018 Move W0, W20
	019 NotImplemented "Instruction BLR not yet implemented."
	020 Move [X19+16], X0
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Return 

Method: System.Void Finalize()

Disassembly:
	0x03C646DC MOVZ W1, 0x112
	0x03C646E0 B 0x3C653CC
	0x03C646E4 MOVZ W8, 0x6621
	0x03C646E8 MOVK W8, 0xBA010000
	0x03C646EC CMP W0, W8
	0x03C646F0 B.EQ 0x3C65290
	0x03C646F4 MOVZ W8, 0xAF42
	0x03C646F8 MOVK W8, 0xBA120000
	0x03C646FC CMP W0, W8
	0x03C64700 B.EQ 0x3C64D20
	0x03C64704 MOVZ W8, 0xEDD9
	0x03C64708 MOVK W8, 0xBA140000
	0x03C6470C CMP W0, W8
	0x03C64710 B.NE 0x3C6542C
	0x03C64714 ADRP X8, 0x4FC000
	0x03C64718 LDR X8, [X8 + 0x1D8]
	0x03C6471C MOV X0, X20
	0x03C64720 MOV X2, X31
	0x03C64724 LDR X1, [X8]
	0x03C64728 BL 0x321BA08
	0x03C6472C TBZ X0, 0x0, 0x3C6542C
	0x03C64730 ADRP X20, 0x782000
	0x03C64734 LDR X8, [X20 + 0x480]
	0x03C64738 CBNZ X8, 0x3C64750
	0x03C6473C ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64740 ADD X0, X0, 0x8A1
	0x03C64744 BL 0x1C16CB8
	0x03C64748 MOV X8, X0
	0x03C6474C STR X0, [X20 + 0x480]
	0x03C64750 MOVZ W1, 0x30
	0x03C64754 MOV X0, X19
	0x03C64758 BLR X8
	0x03C6475C ADRP X20, 0x782000
	0x03C64760 LDR X8, [X20 + 0x490]
	0x03C64764 CBNZ X8, 0x3C6477C
	0x03C64768 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C6476C ADD X0, X0, 0x35
	0x03C64770 BL 0x1C16CB8
	0x03C64774 MOV X8, X0
	0x03C64778 STR X0, [X20 + 0x490]
	0x03C6477C MOVZ W1, 0x100
	0x03C64780 B 0x3C652FC
	0x03C64784 MOVZ W8, 0x2DE5
	0x03C64788 MOVK W8, 0x78E30000
	0x03C6478C CMP W0, W8
	0x03C64790 B.EQ 0x3C65304
	0x03C64794 MOVZ W8, 0x1675
	0x03C64798 MOVK W8, 0x7A1F0000
	0x03C6479C CMP W0, W8
	0x03C647A0 B.EQ 0x3C64D90
	0x03C647A4 MOVZ W8, 0xD23A
	0x03C647A8 MOVK W8, 0x7A250000
	0x03C647AC CMP W0, W8
	0x03C647B0 B.NE 0x3C6542C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X0
	006 Move X0, [X0+16]
	007 Move X1, X31
	008 Move X2, X31
	009 Call IntPtr.op_Inequality, X0, X1
	010 Move TEMP, X0
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfNotEqual {27}
	014 Move X21, 0x783000
	015 Move X8, [X21+1240]
	016 Move X20, [X19+16]
	017 Compare X8, 0
	018 JumpIfNotEqual {24}
	019 Move X0, -51642368
	020 Add X0, X0, 1599
	021 Call 0x1C17CB8
	022 Move X8, X0
	023 Move [X21+1240], X0
	024 Move X0, X20
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move [X19+16], X31
	027 Move X0, X19
	028 Move X20, [X31+16]
	029 Move X19, [X31+24]
	030 Move X1, X31
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 Call Object.Finalize, X0
	034 Return 
	035 Move X21, X0
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X21
	038 Call 0x3EB2AD0
	039 Move X20, [X0]
	040 Call 0x3EB2AE0
	041 Move X0, X19
	042 Move X1, X31
	043 Call Object.Finalize, X0
	044 Compare X20, 0
	045 JumpIfNotEqual {52}
	046 Move X20, [X31+16]
	047 Move X19, [X31+24]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Return 
	051 Move X20, X31
	052 Move X0, X20
	053 Call 0x1C17F18
	054 Move X21, X0
	055 Move X0, X19
	056 Move X1, X31
	057 Call Object.Finalize, X0
	058 Compare X20, 0
	059 JumpIfNotEqual {62}
	060 Move X0, X21
	061 Call 0x1D2D690
	062 Move X0, X20
	063 Call 0x1C17F18
	064 Call 0x1991590

Method: System.Void CopyFrom(UnityEngine.Event e)

Disassembly:
	0x03C647B4 ADRP X8, 0x4FC000
	0x03C647B8 LDR X8, [X8 + 0x160]
	0x03C647BC MOV X0, X20
	0x03C647C0 MOV X2, X31
	0x03C647C4 LDR X1, [X8]
	0x03C647C8 BL 0x321BA08
	0x03C647CC TBZ X0, 0x0, 0x3C6542C
	0x03C647D0 ADRP X20, 0x782000
	0x03C647D4 LDR X8, [X20 + 0x480]
	0x03C647D8 CBNZ X8, 0x3C647F0
	0x03C647DC ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C647E0 ADD X0, X0, 0x8A1
	0x03C647E4 BL 0x1C16CB8
	0x03C647E8 MOV X8, X0
	0x03C647EC STR X0, [X20 + 0x480]
	0x03C647F0 MOVZ W1, 0x2B
	0x03C647F4 MOV X0, X19
	0x03C647F8 BLR X8
	0x03C647FC ADRP X20, 0x782000
	0x03C64800 LDR X8, [X20 + 0x490]
	0x03C64804 CBNZ X8, 0x3C6481C
	0x03C64808 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C6480C ADD X0, X0, 0x35
	0x03C64810 BL 0x1C16CB8
	0x03C64814 MOV X8, X0
	0x03C64818 STR X0, [X20 + 0x490]
	0x03C6481C MOVZ W1, 0x10E
	0x03C64820 B 0x3C652FC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X1, 0
	006 JumpIfEqual {39}
	007 Move X19, X0
	008 Move X20, X1
	009 Move X0, [X1+16]
	010 Move X1, [X19+16]
	011 Move X2, X31
	012 Call IntPtr.op_Inequality, X0, X1
	013 Move TEMP, X0
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfNotEqual {34}
	017 Move X21, 0x783000
	018 Move X2, [X21+1256]
	019 Move X20, [X20+16]
	020 Compare X2, 0
	021 JumpIfNotEqual {27}
	022 Move X0, -51634176
	023 Add X0, X0, 1077
	024 Call 0x1C17CB8
	025 Move X2, X0
	026 Move [X21+1256], X0
	027 Move X0, X19
	028 Move X1, X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]
	033 CallNoReturn X2
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Return 
	039 Call 0x1C17F20

Method: System.Boolean get_shift()

Disassembly:
	0x03C64824 MOVZ W8, 0xD11
	0x03C64828 MOVK W8, 0xFD320000
	0x03C6482C CMP W0, W8
	0x03C64830 B.HI 0x3C64898
	0x03C64834 MOVZ W8, 0xB7E
	0x03C64838 MOVK W8, 0xFC320000
	0x03C6483C CMP W0, W8
	0x03C64840 B.EQ 0x3C65348
	0x03C64844 MOVZ W8, 0xD11
	0x03C64848 MOVK W8, 0xFD320000
	0x03C6484C CMP W0, W8
	0x03C64850 B.NE 0x3C6542C
	0x03C64854 ADRP X8, 0x4FC000
	0x03C64858 LDR X8, [X8 + 0x188]
	0x03C6485C MOV X0, X20
	0x03C64860 MOV X2, X31
	0x03C64864 LDR X1, [X8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X8, [X20+1096]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51781632
	010 Add X0, X0, 1328
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1096], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 And W0, W0, 1
	019 Move X30, [X31+32]
	020 Return X0

Method: System.Boolean get_control()

Disassembly:
	0x03C64868 BL 0x321BA08
	0x03C6486C TBZ X0, 0x0, 0x3C6542C
	0x03C64870 ADRP X20, 0x782000
	0x03C64874 LDR X8, [X20 + 0x490]
	0x03C64878 CBNZ X8, 0x3C64890
	0x03C6487C ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64880 ADD X0, X0, 0x35
	0x03C64884 BL 0x1C16CB8
	0x03C64888 MOV X8, X0
	0x03C6488C STR X0, [X20 + 0x490]
	0x03C64890 MOVZ W1, 0x126
	0x03C64894 B 0x3C653CC
	0x03C64898 MOVZ W8, 0xEA4
	0x03C6489C MOVK W8, 0xFE320000
	0x03C648A0 CMP W0, W8
	0x03C648A4 B.EQ 0x3C6538C
	0x03C648A8 MOVZ W8, 0x1037

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X8, [X20+1096]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51781632
	010 Add X0, X0, 1328
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1096], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move W0, W0
	019 ShiftRight W0, 1
	020 And W0, W0, 1
	021 Move X30, [X31+32]
	022 Return X0

Method: System.Boolean get_alt()

Disassembly:
	0x03C648AC MOVK W8, 0xFF320000
	0x03C648B0 CMP W0, W8
	0x03C648B4 B.NE 0x3C6542C
	0x03C648B8 ADRP X8, 0x4FC000
	0x03C648BC LDR X8, [X8 + 0x158]
	0x03C648C0 MOV X0, X20
	0x03C648C4 MOV X2, X31
	0x03C648C8 LDR X1, [X8]
	0x03C648CC BL 0x321BA08
	0x03C648D0 TBZ X0, 0x0, 0x3C6542C
	0x03C648D4 ADRP X20, 0x782000
	0x03C648D8 LDR X8, [X20 + 0x490]
	0x03C648DC CBNZ X8, 0x3C648F4
	0x03C648E0 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C648E4 ADD X0, X0, 0x35
	0x03C648E8 BL 0x1C16CB8
	0x03C648EC MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X8, [X20+1096]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51781632
	010 Add X0, X0, 1328
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1096], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move W0, W0
	019 ShiftRight W0, 2
	020 And W0, W0, 3
	021 Move X30, [X31+32]
	022 Return X0

Method: System.Boolean get_command()

Disassembly:
	0x03C648F0 STR X0, [X20 + 0x490]
	0x03C648F4 MOVZ W1, 0x128
	0x03C648F8 B 0x3C653CC
	0x03C648FC ADRP X8, 0x4E3000
	0x03C64900 LDR X8, [X8 + 0x368]
	0x03C64904 MOV X0, X20
	0x03C64908 MOV X2, X31
	0x03C6490C LDR X1, [X8]
	0x03C64910 BL 0x321BA08
	0x03C64914 TBZ X0, 0x0, 0x3C6542C
	0x03C64918 ADRP X20, 0x782000
	0x03C6491C LDR X8, [X20 + 0x490]
	0x03C64920 CBNZ X8, 0x3C64938
	0x03C64924 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64928 ADD X0, X0, 0x35
	0x03C6492C BL 0x1C16CB8
	0x03C64930 MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X8, [X20+1096]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51781632
	010 Add X0, X0, 1328
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1096], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move W0, W0
	019 ShiftRight W0, 3
	020 And W0, W0, 7
	021 Move X30, [X31+32]
	022 Return X0

Method: UnityEngine.Event get_current()

Disassembly:
	0x03C64934 STR X0, [X20 + 0x490]
	0x03C64938 MOVZ W1, 0x121
	0x03C6493C B 0x3C653CC
	0x03C64940 ADRP X8, 0x4FC000
	0x03C64944 LDR X8, [X8 + 0x150]
	0x03C64948 MOV X0, X20
	0x03C6494C MOV X2, X31
	0x03C64950 LDR X1, [X8]
	0x03C64954 BL 0x321BA08
	0x03C64958 TBZ X0, 0x0, 0x3C6542C
	0x03C6495C ADRP X20, 0x782000
	0x03C64960 LDR X8, [X20 + 0x480]
	0x03C64964 CBNZ X8, 0x3C6497C
	0x03C64968 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C6496C ADD X0, X0, 0x8A1
	0x03C64970 BL 0x1C16CB8
	0x03C64974 MOV X8, X0
	0x03C64978 STR X0, [X20 + 0x480]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x783000
	005 Move X20, 0x4F6000
	006 Move W8, [X19+1296]
	007 Move X20, [X20+32]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4F6000
	013 Move X0, [X0+32]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+1296], W8
	017 Move X8, [X20]
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X8, [X8+184]
	021 Move X0, [X8]
	022 Move X30, [X31+32]
	023 Return X0

Method: System.Void set_current(UnityEngine.Event value)

Disassembly:
	0x03C6497C MOVZ W1, 0x2F
	0x03C64980 MOV X0, X19
	0x03C64984 BLR X8
	0x03C64988 ADRP X20, 0x782000
	0x03C6498C LDR X8, [X20 + 0x490]
	0x03C64990 CBNZ X8, 0x3C649A8
	0x03C64994 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64998 ADD X0, X0, 0x35
	0x03C6499C BL 0x1C16CB8
	0x03C649A0 MOV X8, X0
	0x03C649A4 STR X0, [X20 + 0x490]
	0x03C649A8 MOVZ W1, 0x10B
	0x03C649AC B 0x3C652FC
	0x03C649B0 ADRP X8, 0x4E1000
	0x03C649B4 LDR X8, [X8 + 0xFA8]
	0x03C649B8 MOV X0, X20
	0x03C649BC MOV X2, X31
	0x03C649C0 LDR X1, [X8]
	0x03C649C4 BL 0x321BA08
	0x03C649C8 TBZ X0, 0x0, 0x3C6542C
	0x03C649CC ADRP X20, 0x782000
	0x03C649D0 LDR X8, [X20 + 0x490]
	0x03C649D4 CBNZ X8, 0x3C649EC
	0x03C649D8 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C649DC ADD X0, X0, 0x35
	0x03C649E0 BL 0x1C16CB8
	0x03C649E4 MOV X8, X0
	0x03C649E8 STR X0, [X20 + 0x490]
	0x03C649EC MOVZ W1, 0x111
	0x03C649F0 B 0x3C653CC
	0x03C649F4 ADRP X8, 0x4E3000
	0x03C649F8 LDR X8, [X8 + 0x288]
	0x03C649FC MOV X0, X20
	0x03C64A00 MOV X2, X31
	0x03C64A04 LDR X1, [X8]
	0x03C64A08 BL 0x321BA08
	0x03C64A0C TBZ X0, 0x0, 0x3C6542C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X20, 0x4F6000
	007 Move W8, [X21+1297]
	008 Move X20, [X20+32]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4F6000
	015 Move X0, [X0+32]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+1297], W8
	019 Move X8, [X20]
	020 Compare X19, 0
	021 JumpIfNotEqual {24}
	022 Move X9, [X8+184]
	023 Move X19, [X9+8]
	024 Move X8, [X8+184]
	025 Move [X8], X19
	026 Move X8, [X20]
	027 Move X8, [X8+184]
	028 Move X8, [X8]
	029 Compare X8, 0
	030 JumpIfEqual {47}
	031 Move X20, 0x783000
	032 Move X1, [X20+1272]
	033 Move X19, [X8+16]
	034 Compare X1, 0
	035 JumpIfNotEqual {41}
	036 Move X0, -51773440
	037 Add X0, X0, 1888
	038 Call 0x1C17CB8
	039 Move X1, X0
	040 Move [X20+1272], X0
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 CallNoReturn X1
	047 Call 0x1C17F20

Method: System.Boolean get_isKey()

Disassembly:
	0x03C64A10 ADRP X20, 0x782000
	0x03C64A14 LDR X8, [X20 + 0x490]
	0x03C64A18 CBNZ X8, 0x3C64A30
	0x03C64A1C ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64A20 ADD X0, X0, 0x35
	0x03C64A24 BL 0x1C16CB8
	0x03C64A28 MOV X8, X0
	0x03C64A2C STR X0, [X20 + 0x490]
	0x03C64A30 MOVZ W1, 0x115
	0x03C64A34 B 0x3C653CC
	0x03C64A38 ADRP X8, 0x4E3000
	0x03C64A3C LDR X8, [X8 + 0x358]
	0x03C64A40 MOV X0, X20
	0x03C64A44 MOV X2, X31
	0x03C64A48 LDR X1, [X8]
	0x03C64A4C BL 0x321BA08
	0x03C64A50 TBZ X0, 0x0, 0x3C6542C
	0x03C64A54 ADRP X20, 0x782000
	0x03C64A58 LDR X8, [X20 + 0x490]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X8, [X20+1192]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51847168
	010 Add X0, X0, 1382
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1192], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 And W8, W0, 0xFFFFFFFE
	019 NotImplemented "Instruction CMP not yet implemented."
	020 NotImplemented "Instruction CSET not yet implemented."
	021 Move X30, [X31+32]
	022 Return X0

Method: System.Boolean get_isMouse()

Disassembly:
	0x03C64A5C CBNZ X8, 0x3C64A74
	0x03C64A60 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64A64 ADD X0, X0, 0x35
	0x03C64A68 BL 0x1C16CB8
	0x03C64A6C MOV X8, X0
	0x03C64A70 STR X0, [X20 + 0x490]
	0x03C64A74 MOVZ W1, 0x11D
	0x03C64A78 B 0x3C653CC
	0x03C64A7C ADRP X8, 0x4FC000
	0x03C64A80 LDR X8, [X8 + 0x128]
	0x03C64A84 MOV X0, X20
	0x03C64A88 MOV X2, X31
	0x03C64A8C LDR X1, [X8]
	0x03C64A90 BL 0x321BA08
	0x03C64A94 TBZ X0, 0x0, 0x3C6542C
	0x03C64A98 ADRP X20, 0x782000
	0x03C64A9C LDR X8, [X20 + 0x480]
	0x03C64AA0 CBNZ X8, 0x3C64AB8
	0x03C64AA4 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64AA8 ADD X0, X0, 0x8A1
	0x03C64AAC BL 0x1C16CB8
	0x03C64AB0 MOV X8, X0
	0x03C64AB4 STR X0, [X20 + 0x480]
	0x03C64AB8 MOVZ W1, 0x2E
	0x03C64ABC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X8, [X20+1192]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51847168
	010 Add X0, X0, 1382
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1192], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 NotImplemented "Instruction CMP not yet implemented."
	018 Move W0, 1
	019 Move X20, [X31+16]
	020 Move X19, [X31+24]
	021 Move X30, [X31+32]
	022 Return X0
	023 And W8, W0, 0xFFFFFFFE
	024 NotImplemented "Instruction CMP not yet implemented."
	025 NotImplemented "Instruction CSET not yet implemented."

Method: System.Boolean get_isDirectManipulationDevice()

Disassembly:
	0x03C64AC0 BLR X8
	0x03C64AC4 ADRP X20, 0x782000
	0x03C64AC8 LDR X8, [X20 + 0x490]
	0x03C64ACC CBNZ X8, 0x3C64AE4
	0x03C64AD0 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64AD4 ADD X0, X0, 0x35
	0x03C64AD8 BL 0x1C16CB8
	0x03C64ADC MOV X8, X0
	0x03C64AE0 STR X0, [X20 + 0x490]
	0x03C64AE4 MOVZ W1, 0x10A
	0x03C64AE8 B 0x3C652FC
	0x03C64AEC ADRP X8, 0x4FC000
	0x03C64AF0 LDR X8, [X8 + 0x170]
	0x03C64AF4 MOV X0, X20
	0x03C64AF8 MOV X2, X31
	0x03C64AFC LDR X1, [X8]
	0x03C64B00 BL 0x321BA08
	0x03C64B04 TBZ X0, 0x0, 0x3C6542C
	0x03C64B08 ADRP X20, 0x782000
	0x03C64B0C LDR X8, [X20 + 0x480]
	0x03C64B10 CBNZ X8, 0x3C64B28
	0x03C64B14 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64B18 ADD X0, X0, 0x8A1
	0x03C64B1C BL 0x1C16CB8
	0x03C64B20 MOV X8, X0
	0x03C64B24 STR X0, [X20 + 0x480]
	0x03C64B28 MOVZ W1, 0x31
	0x03C64B2C MOV X0, X19
	0x03C64B30 BLR X8
	0x03C64B34 ADRP X20, 0x782000
	0x03C64B38 LDR X8, [X20 + 0x490]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x783000
	005 Move X8, [X20+1080]
	006 Move X19, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51675136
	010 Add X0, X0, 673
	011 Call 0x1C17CB8
	012 Move X8, X0
	013 Move [X20+1080], X0
	014 Move X0, X19
	015 NotImplemented "Instruction BLR not yet implemented."
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move W0, 1
	018 Move X8, [X20+1080]
	019 Compare X8, 0
	020 JumpIfNotEqual {26}
	021 Move X0, -51675136
	022 Add X0, X0, 673
	023 Call 0x1C17CB8
	024 Move X8, X0
	025 Move [X20+1080], X0
	026 Move X0, X19
	027 NotImplemented "Instruction BLR not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 NotImplemented "Instruction CSET not yet implemented."
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return X0

Method: UnityEngine.Event KeyboardEvent(System.String key)

Disassembly:
	0x03C64B3C CBNZ X8, 0x3C64B54
	0x03C64B40 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64B44 ADD X0, X0, 0x35
	0x03C64B48 BL 0x1C16CB8
	0x03C64B4C MOV X8, X0
	0x03C64B50 STR X0, [X20 + 0x490]
	0x03C64B54 MOVZ W1, 0x101
	0x03C64B58 B 0x3C652FC
	0x03C64B5C ADRP X8, 0x4E3000
	0x03C64B60 LDR X8, [X8 + 0xE8]
	0x03C64B64 MOV X0, X20
	0x03C64B68 MOV X2, X31
	0x03C64B6C LDR X1, [X8]
	0x03C64B70 BL 0x321BA08
	0x03C64B74 TBZ X0, 0x0, 0x3C6542C
	0x03C64B78 ADRP X20, 0x782000
	0x03C64B7C LDR X8, [X20 + 0x490]
	0x03C64B80 CBNZ X8, 0x3C64B98
	0x03C64B84 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64B88 ADD X0, X0, 0x35
	0x03C64B8C BL 0x1C16CB8
	0x03C64B90 MOV X8, X0
	0x03C64B94 STR X0, [X20 + 0x490]
	0x03C64B98 MOVZ W1, 0x124
	0x03C64B9C B 0x3C653CC
	0x03C64BA0 ADRP X8, 0x4E3000
	0x03C64BA4 LDR X8, [X8 + 0x318]
	0x03C64BA8 MOV X0, X20
	0x03C64BAC MOV X2, X31
	0x03C64BB0 LDR X1, [X8]
	0x03C64BB4 BL 0x321BA08
	0x03C64BB8 TBZ X0, 0x0, 0x3C6542C
	0x03C64BBC ADRP X20, 0x782000
	0x03C64BC0 LDR X8, [X20 + 0x490]
	0x03C64BC4 CBNZ X8, 0x3C64BDC
	0x03C64BC8 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64BCC ADD X0, X0, 0x35
	0x03C64BD0 BL 0x1C16CB8
	0x03C64BD4 MOV X8, X0
	0x03C64BD8 STR X0, [X20 + 0x490]
	0x03C64BDC MOVZ W1, 0x11C
	0x03C64BE0 B 0x3C653CC
	0x03C64BE4 ADRP X8, 0x4E3000
	0x03C64BE8 LDR X8, [X8 + 0x258]
	0x03C64BEC MOV X0, X20
	0x03C64BF0 MOV X2, X31
	0x03C64BF4 LDR X1, [X8]
	0x03C64BF8 BL 0x321BA08
	0x03C64BFC TBZ X0, 0x0, 0x3C6542C
	0x03C64C00 ADRP X20, 0x782000
	0x03C64C04 LDR X8, [X20 + 0x490]
	0x03C64C08 CBNZ X8, 0x3C64C20
	0x03C64C0C ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64C10 ADD X0, X0, 0x35
	0x03C64C14 BL 0x1C16CB8
	0x03C64C18 MOV X8, X0
	0x03C64C1C STR X0, [X20 + 0x490]
	0x03C64C20 MOVZ W1, 0x9
	0x03C64C24 B 0x3C652FC
	0x03C64C28 ADRP X8, 0x4E3000
	0x03C64C2C LDR X8, [X8 + 0x298]
	0x03C64C30 MOV X0, X20
	0x03C64C34 MOV X2, X31
	0x03C64C38 LDR X1, [X8]
	0x03C64C3C BL 0x321BA08
	0x03C64C40 TBZ X0, 0x0, 0x3C6542C
	0x03C64C44 ADRP X20, 0x782000
	0x03C64C48 LDR X8, [X20 + 0x490]
	0x03C64C4C CBNZ X8, 0x3C64C64
	0x03C64C50 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64C54 ADD X0, X0, 0x35
	0x03C64C58 BL 0x1C16CB8
	0x03C64C5C MOV X8, X0
	0x03C64C60 STR X0, [X20 + 0x490]
	0x03C64C64 MOVZ W1, 0x117
	0x03C64C68 B 0x3C653CC
	0x03C64C6C ADRP X8, 0x4FC000
	0x03C64C70 LDR X8, [X8 + 0x1C8]
	0x03C64C74 MOV X0, X20
	0x03C64C78 MOV X2, X31
	0x03C64C7C LDR X1, [X8]
	0x03C64C80 BL 0x321BA08
	0x03C64C84 TBZ X0, 0x0, 0x3C6542C
	0x03C64C88 ADRP X20, 0x782000
	0x03C64C8C LDR X8, [X20 + 0x490]
	0x03C64C90 CBNZ X8, 0x3C64CA8
	0x03C64C94 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64C98 ADD X0, X0, 0x35
	0x03C64C9C BL 0x1C16CB8
	0x03C64CA0 MOV X8, X0
	0x03C64CA4 STR X0, [X20 + 0x490]
	0x03C64CA8 MOVZ W1, 0x1B
	0x03C64CAC B 0x3C652FC
	0x03C64CB0 ADRP X8, 0x4E3000
	0x03C64CB4 LDR X8, [X8 + 0x348]
	0x03C64CB8 MOV X0, X20
	0x03C64CBC MOV X2, X31
	0x03C64CC0 LDR X1, [X8]
	0x03C64CC4 BL 0x321BA08
	0x03C64CC8 TBZ X0, 0x0, 0x3C6542C
	0x03C64CCC ADRP X20, 0x782000
	0x03C64CD0 LDR X8, [X20 + 0x490]
	0x03C64CD4 CBNZ X8, 0x3C64CEC
	0x03C64CD8 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64CDC ADD X0, X0, 0x35
	0x03C64CE0 BL 0x1C16CB8
	0x03C64CE4 MOV X8, X0
	0x03C64CE8 STR X0, [X20 + 0x490]
	0x03C64CEC MOVZ W1, 0x20
	0x03C64CF0 MOV X0, X19
	0x03C64CF4 BLR X8
	0x03C64CF8 ADRP X20, 0x782000
	0x03C64CFC LDR X8, [X20 + 0x480]
	0x03C64D00 CBNZ X8, 0x3C64D18
	0x03C64D04 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64D08 ADD X0, X0, 0x8A1
	0x03C64D0C BL 0x1C16CB8
	0x03C64D10 MOV X8, X0
	0x03C64D14 STR X0, [X20 + 0x480]
	0x03C64D18 MOVZ W1, 0x20
	0x03C64D1C B 0x3C65180
	0x03C64D20 ADRP X8, 0x4FC000
	0x03C64D24 LDR X8, [X8 + 0x130]
	0x03C64D28 MOV X0, X20
	0x03C64D2C MOV X2, X31
	0x03C64D30 LDR X1, [X8]
	0x03C64D34 BL 0x321BA08
	0x03C64D38 TBZ X0, 0x0, 0x3C6542C
	0x03C64D3C ADRP X20, 0x782000
	0x03C64D40 LDR X8, [X20 + 0x480]
	0x03C64D44 CBNZ X8, 0x3C64D5C
	0x03C64D48 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64D4C ADD X0, X0, 0x8A1
	0x03C64D50 BL 0x1C16CB8
	0x03C64D54 MOV X8, X0
	0x03C64D58 STR X0, [X20 + 0x480]
	0x03C64D5C MOVZ W1, 0x33
	0x03C64D60 MOV X0, X19
	0x03C64D64 BLR X8
	0x03C64D68 ADRP X20, 0x782000
	0x03C64D6C LDR X8, [X20 + 0x490]
	0x03C64D70 CBNZ X8, 0x3C64D88
	0x03C64D74 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64D78 ADD X0, X0, 0x35
	0x03C64D7C BL 0x1C16CB8
	0x03C64D80 MOV X8, X0
	0x03C64D84 STR X0, [X20 + 0x490]
	0x03C64D88 MOVZ W1, 0x103
	0x03C64D8C B 0x3C652FC
	0x03C64D90 ADRP X8, 0x4FC000
	0x03C64D94 LDR X8, [X8 + 0x178]
	0x03C64D98 MOV X0, X20
	0x03C64D9C MOV X2, X31
	0x03C64DA0 LDR X1, [X8]
	0x03C64DA4 BL 0x321BA08
	0x03C64DA8 TBZ X0, 0x0, 0x3C6542C
	0x03C64DAC ADRP X20, 0x782000
	0x03C64DB0 LDR X8, [X20 + 0x480]
	0x03C64DB4 CBNZ X8, 0x3C64DCC
	0x03C64DB8 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64DBC ADD X0, X0, 0x8A1
	0x03C64DC0 BL 0x1C16CB8
	0x03C64DC4 MOV X8, X0
	0x03C64DC8 STR X0, [X20 + 0x480]
	0x03C64DCC MOVZ W1, 0x34
	0x03C64DD0 MOV X0, X19
	0x03C64DD4 BLR X8
	0x03C64DD8 ADRP X20, 0x782000
	0x03C64DDC LDR X8, [X20 + 0x490]
	0x03C64DE0 CBNZ X8, 0x3C64DF8
	0x03C64DE4 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64DE8 ADD X0, X0, 0x35
	0x03C64DEC BL 0x1C16CB8
	0x03C64DF0 MOV X8, X0
	0x03C64DF4 STR X0, [X20 + 0x490]
	0x03C64DF8 MOVZ W1, 0x104
	0x03C64DFC B 0x3C652FC
	0x03C64E00 ADRP X8, 0x4E3000
	0x03C64E04 LDR X8, [X8 + 0x360]
	0x03C64E08 MOV X0, X20
	0x03C64E0C MOV X2, X31
	0x03C64E10 LDR X1, [X8]
	0x03C64E14 BL 0x321BA08
	0x03C64E18 TBZ X0, 0x0, 0x3C6542C
	0x03C64E1C ADRP X20, 0x782000
	0x03C64E20 LDR X8, [X20 + 0x490]
	0x03C64E24 CBNZ X8, 0x3C64E3C
	0x03C64E28 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64E2C ADD X0, X0, 0x35
	0x03C64E30 BL 0x1C16CB8
	0x03C64E34 MOV X8, X0
	0x03C64E38 STR X0, [X20 + 0x490]
	0x03C64E3C MOVZ W1, 0x122
	0x03C64E40 B 0x3C653CC
	0x03C64E44 ADRP X8, 0x4E3000
	0x03C64E48 LDR X8, [X8 + 0x220]
	0x03C64E4C MOV X0, X20
	0x03C64E50 MOV X2, X31
	0x03C64E54 LDR X1, [X8]
	0x03C64E58 BL 0x321BA08
	0x03C64E5C TBZ X0, 0x0, 0x3C6542C
	0x03C64E60 ADRP X20, 0x782000
	0x03C64E64 LDR X8, [X20 + 0x490]
	0x03C64E68 CBNZ X8, 0x3C64E80
	0x03C64E6C ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64E70 ADD X0, X0, 0x35
	0x03C64E74 BL 0x1C16CB8
	0x03C64E78 MOV X8, X0
	0x03C64E7C STR X0, [X20 + 0x490]
	0x03C64E80 MOVZ W1, 0x8
	0x03C64E84 B 0x3C653CC
	0x03C64E88 ADRP X8, 0x4FC000
	0x03C64E8C LDR X8, [X8 + 0x1A0]
	0x03C64E90 LDR X1, [X8]
	0x03C64E94 MOV X0, X20
	0x03C64E98 MOV X2, X31
	0x03C64E9C BL 0x321BA08
	0x03C64EA0 TBZ X0, 0x0, 0x3C6542C
	0x03C64EA4 ADRP X20, 0x782000
	0x03C64EA8 LDR X8, [X20 + 0x480]
	0x03C64EAC CBNZ X8, 0x3C64EC4
	0x03C64EB0 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64EB4 ADD X0, X0, 0x8A1
	0x03C64EB8 BL 0x1C16CB8
	0x03C64EBC MOV X8, X0
	0x03C64EC0 STR X0, [X20 + 0x480]
	0x03C64EC4 MOVZ W1, 0x3D
	0x03C64EC8 MOV X0, X19
	0x03C64ECC BLR X8
	0x03C64ED0 ADRP X20, 0x782000
	0x03C64ED4 LDR X8, [X20 + 0x490]
	0x03C64ED8 CBNZ X8, 0x3C64EF0
	0x03C64EDC ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64EE0 ADD X0, X0, 0x35
	0x03C64EE4 BL 0x1C16CB8
	0x03C64EE8 MOV X8, X0
	0x03C64EEC STR X0, [X20 + 0x490]
	0x03C64EF0 MOVZ W1, 0x110
	0x03C64EF4 B 0x3C652FC
	0x03C64EF8 ADRP X8, 0x4FC000
	0x03C64EFC LDR X8, [X8 + 0x1A8]
	0x03C64F00 MOV X0, X20
	0x03C64F04 MOV X2, X31
	0x03C64F08 LDR X1, [X8]
	0x03C64F0C BL 0x321BA08
	0x03C64F10 TBZ X0, 0x0, 0x3C6542C
	0x03C64F14 ADRP X20, 0x782000
	0x03C64F18 LDR X8, [X20 + 0x480]
	0x03C64F1C CBNZ X8, 0x3C64F34
	0x03C64F20 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64F24 ADD X0, X0, 0x8A1
	0x03C64F28 BL 0x1C16CB8
	0x03C64F2C MOV X8, X0
	0x03C64F30 STR X0, [X20 + 0x480]
	0x03C64F34 MOVZ W1, 0x37
	0x03C64F38 MOV X0, X19
	0x03C64F3C BLR X8
	0x03C64F40 ADRP X20, 0x782000
	0x03C64F44 LDR X8, [X20 + 0x490]
	0x03C64F48 CBNZ X8, 0x3C64F60
	0x03C64F4C ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64F50 ADD X0, X0, 0x35
	0x03C64F54 BL 0x1C16CB8
	0x03C64F58 MOV X8, X0
	0x03C64F5C STR X0, [X20 + 0x490]
	0x03C64F60 MOVZ W1, 0x107
	0x03C64F64 B 0x3C652FC
	0x03C64F68 ADRP X8, 0x4E3000
	0x03C64F6C LDR X8, [X8 + 0x2E8]
	0x03C64F70 MOV X0, X20
	0x03C64F74 MOV X2, X31
	0x03C64F78 LDR X1, [X8]
	0x03C64F7C BL 0x321BA08
	0x03C64F80 TBZ X0, 0x0, 0x3C6542C
	0x03C64F84 ADRP X20, 0x782000
	0x03C64F88 LDR X8, [X20 + 0x490]
	0x03C64F8C CBNZ X8, 0x3C64FA4
	0x03C64F90 ADRP X0, 0xFFFFFFFFFCEB3000
	0x03C64F94 ADD X0, X0, 0x35
	0x03C64F98 BL 0x1C16CB8
	0x03C64F9C MOV X8, X0
	0x03C64FA0 STR X0, [X20 + 0x490]
	0x03C64FA4 MOVZ W1, 0x11E
	0x03C64FA8 B 0x3C653CC
	0x03C64FAC ADRP X8, 0x4FC000
	0x03C64FB0 LDR X8, [X8 + 0x1B8]
	0x03C64FB4 MOV X0, X20
	0x03C64FB8 MOV X2, X31
	0x03C64FBC LDR X1, [X8]
	0x03C64FC0 BL 0x321BA08
	0x03C64FC4 TBZ X0, 0x0, 0x3C6542C
	0x03C64FC8 ADRP X20, 0x782000
	0x03C64FCC LDR X8, [X20 + 0x480]
	0x03C64FD0 CBNZ X8, 0x3C64FE8
	0x03C64FD4 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C64FD8 ADD X0, X0, 0x8A1
	0x03C64FDC BL 0x1C16CB8
	0x03C64FE0 MOV X8, X0
	0x03C64FE4 STR X0, [X20 + 0x480]
	0x03C64FE8 MOVZ W1, 0x36
	0x03C64FEC MOV X0, X19
	0x03C64FF0 BLR X8
	0x03C64FF4 ADRP X20, 0x782000
	0x03C64FF8 LDR X8, [X20 + 0x490]
	0x03C64FFC CBNZ X8, 0x3C65014
	0x03C65000 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C65004 ADD X0, X0, 0x35
	0x03C65008 BL 0x1C16CB8
	0x03C6500C MOV X8, X0
	0x03C65010 STR X0, [X20 + 0x490]
	0x03C65014 MOVZ W1, 0x106
	0x03C65018 B 0x3C652FC
	0x03C6501C ADRP X8, 0x4FB000
	0x03C65020 LDR X8, [X8 + 0x1D0]
	0x03C65024 MOV X0, X20
	0x03C65028 MOV X2, X31
	0x03C6502C LDR X1, [X8]
	0x03C65030 BL 0x321BA08
	0x03C65034 TBZ X0, 0x0, 0x3C6542C
	0x03C65038 ADRP X20, 0x781000
	0x03C6503C LDR X8, [X20 + 0x480]
	0x03C65040 CBNZ X8, 0x3C65058
	0x03C65044 ADRP X0, 0xFFFFFFFFFCE8E000
	0x03C65048 ADD X0, X0, 0x8A1
	0x03C6504C BL 0x1C16CB8
	0x03C65050 MOV X8, X0
	0x03C65054 STR X0, [X20 + 0x480]
	0x03C65058 MOVZ W1, 0x32
	0x03C6505C MOV X0, X19
	0x03C65060 BLR X8
	0x03C65064 ADRP X20, 0x781000
	0x03C65068 LDR X8, [X20 + 0x490]
	0x03C6506C CBNZ X8, 0x3C65084
	0x03C65070 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C65074 ADD X0, X0, 0x35
	0x03C65078 BL 0x1C16CB8
	0x03C6507C MOV X8, X0
	0x03C65080 STR X0, [X20 + 0x490]
	0x03C65084 MOVZ W1, 0x102
	0x03C65088 B 0x3C652FC
	0x03C6508C ADRP X8, 0x4FB000
	0x03C65090 LDR X8, [X8 + 0x198]
	0x03C65094 LDR X1, [X8]
	0x03C65098 MOV X0, X20
	0x03C6509C MOV X2, X31
	0x03C650A0 BL 0x321BA08
	0x03C650A4 TBZ X0, 0x0, 0x3C6542C
	0x03C650A8 ADRP X20, 0x781000
	0x03C650AC LDR X8, [X20 + 0x490]
	0x03C650B0 CBNZ X8, 0x3C650C8
	0x03C650B4 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C650B8 ADD X0, X0, 0x35
	0x03C650BC BL 0x1C16CB8
	0x03C650C0 MOV X8, X0
	0x03C650C4 STR X0, [X20 + 0x490]
	0x03C650C8 MOVZ W1, 0x118
	0x03C650CC B 0x3C653CC
	0x03C650D0 ADRP X8, 0x4E2000
	0x03C650D4 LDR X8, [X8 + 0x1B8]
	0x03C650D8 MOV X0, X20
	0x03C650DC MOV X2, X31
	0x03C650E0 LDR X1, [X8]
	0x03C650E4 BL 0x321BA08
	0x03C650E8 TBZ X0, 0x0, 0x3C6542C
	0x03C650EC ADRP X20, 0x781000
	0x03C650F0 LDR X8, [X20 + 0x490]
	0x03C650F4 CBNZ X8, 0x3C6510C
	0x03C650F8 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C650FC ADD X0, X0, 0x35
	0x03C65100 BL 0x1C16CB8
	0x03C65104 MOV X8, X0
	0x03C65108 STR X0, [X20 + 0x490]
	0x03C6510C MOVZ W1, 0x11A
	0x03C65110 B 0x3C653CC
	0x03C65114 ADRP X8, 0x4BF000
	0x03C65118 LDR X8, [X8 + 0x750]
	0x03C6511C MOV X0, X20
	0x03C65120 MOV X2, X31
	0x03C65124 LDR X1, [X8]
	0x03C65128 BL 0x321BA08
	0x03C6512C TBZ X0, 0x0, 0x3C6542C
	0x03C65130 ADRP X20, 0x781000
	0x03C65134 LDR X8, [X20 + 0x480]
	0x03C65138 CBNZ X8, 0x3C65150
	0x03C6513C ADRP X0, 0xFFFFFFFFFCE8E000
	0x03C65140 ADD X0, X0, 0x8A1
	0x03C65144 BL 0x1C16CB8
	0x03C65148 MOV X8, X0
	0x03C6514C STR X0, [X20 + 0x480]
	0x03C65150 MOVZ W1, 0xA
	0x03C65154 MOV X0, X19
	0x03C65158 BLR X8
	0x03C6515C ADRP X20, 0x781000
	0x03C65160 LDR X8, [X20 + 0x490]
	0x03C65164 CBNZ X8, 0x3C6517C
	0x03C65168 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C6516C ADD X0, X0, 0x35
	0x03C65170 BL 0x1C16CB8
	0x03C65174 MOV X8, X0
	0x03C65178 STR X0, [X20 + 0x490]
	0x03C6517C MOVZ W1, 0xD
	0x03C65180 MOV X0, X19
	0x03C65184 BLR X8
	0x03C65188 ADRP X20, 0x781000
	0x03C6518C LDR X8, [X20 + 0x448]
	0x03C65190 CBNZ X8, 0x3C651A8
	0x03C65194 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C65198 ADD X0, X0, 0x530
	0x03C6519C BL 0x1C16CB8
	0x03C651A0 MOV X8, X0
	0x03C651A4 STR X0, [X20 + 0x448]
	0x03C651A8 MOV X0, X19
	0x03C651AC BLR X8
	0x03C651B0 ADRP X21, 0x781000
	0x03C651B4 LDR X8, [X21 + 0x450]
	0x03C651B8 AND W20, W0, 0xFFFFFFBF
	0x03C651BC CBNZ X8, 0x3C65420
	0x03C651C0 B 0x3C6540C
	0x03C651C4 ADRP X8, 0x4E2000
	0x03C651C8 LDR X8, [X8 + 0xF8]
	0x03C651CC MOV X0, X20
	0x03C651D0 MOV X2, X31
	0x03C651D4 LDR X1, [X8]
	0x03C651D8 BL 0x321BA08
	0x03C651DC TBZ X0, 0x0, 0x3C6542C
	0x03C651E0 ADRP X20, 0x781000
	0x03C651E4 LDR X8, [X20 + 0x490]
	0x03C651E8 CBNZ X8, 0x3C65200
	0x03C651EC ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C651F0 ADD X0, X0, 0x35
	0x03C651F4 BL 0x1C16CB8
	0x03C651F8 MOV X8, X0
	0x03C651FC STR X0, [X20 + 0x490]
	0x03C65200 MOVZ W1, 0x7F
	0x03C65204 B 0x3C653CC
	0x03C65208 ADRP X8, 0x4FB000
	0x03C6520C LDR X8, [X8 + 0x1C0]
	0x03C65210 LDR X1, [X8]
	0x03C65214 MOV X0, X20
	0x03C65218 MOV X2, X31
	0x03C6521C BL 0x321BA08
	0x03C65220 TBZ X0, 0x0, 0x3C6542C
	0x03C65224 ADRP X20, 0x781000
	0x03C65228 LDR X8, [X20 + 0x490]
	0x03C6522C CBNZ X8, 0x3C65244
	0x03C65230 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C65234 ADD X0, X0, 0x35
	0x03C65238 BL 0x1C16CB8
	0x03C6523C MOV X8, X0
	0x03C65240 STR X0, [X20 + 0x490]
	0x03C65244 MOVZ W1, 0x119
	0x03C65248 B 0x3C653CC
	0x03C6524C ADRP X8, 0x4E2000
	0x03C65250 LDR X8, [X8 + 0x1C8]
	0x03C65254 MOV X0, X20
	0x03C65258 MOV X2, X31
	0x03C6525C LDR X1, [X8]
	0x03C65260 BL 0x321BA08
	0x03C65264 TBZ X0, 0x0, 0x3C6542C
	0x03C65268 ADRP X20, 0x781000
	0x03C6526C LDR X8, [X20 + 0x490]
	0x03C65270 CBNZ X8, 0x3C65288
	0x03C65274 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C65278 ADD X0, X0, 0x35
	0x03C6527C BL 0x1C16CB8
	0x03C65280 MOV X8, X0
	0x03C65284 STR X0, [X20 + 0x490]
	0x03C65288 MOVZ W1, 0x11F
	0x03C6528C B 0x3C653CC
	0x03C65290 ADRP X8, 0x4FB000
	0x03C65294 LDR X8, [X8 + 0x140]
	0x03C65298 MOV X0, X20
	0x03C6529C MOV X2, X31
	0x03C652A0 LDR X1, [X8]
	0x03C652A4 BL 0x321BA08
	0x03C652A8 TBZ X0, 0x0, 0x3C6542C
	0x03C652AC ADRP X20, 0x781000
	0x03C652B0 LDR X8, [X20 + 0x480]
	0x03C652B4 CBNZ X8, 0x3C652CC
	0x03C652B8 ADRP X0, 0xFFFFFFFFFCE8E000
	0x03C652BC ADD X0, X0, 0x8A1
	0x03C652C0 BL 0x1C16CB8
	0x03C652C4 MOV X8, X0
	0x03C652C8 STR X0, [X20 + 0x480]
	0x03C652CC MOVZ W1, 0x38
	0x03C652D0 MOV X0, X19
	0x03C652D4 BLR X8
	0x03C652D8 ADRP X20, 0x781000
	0x03C652DC LDR X8, [X20 + 0x490]
	0x03C652E0 CBNZ X8, 0x3C652F8
	0x03C652E4 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C652E8 ADD X0, X0, 0x35
	0x03C652EC BL 0x1C16CB8
	0x03C652F0 MOV X8, X0
	0x03C652F4 STR X0, [X20 + 0x490]
	0x03C652F8 MOVZ W1, 0x108
	0x03C652FC MOV X0, X19
	0x03C65300 B 0x3C65530
	0x03C65304 ADRP X8, 0x4D2000
	0x03C65308 LDR X8, [X8 + 0x760]
	0x03C6530C MOV X0, X20
	0x03C65310 MOV X2, X31
	0x03C65314 LDR X1, [X8]
	0x03C65318 BL 0x321BA08
	0x03C6531C TBZ X0, 0x0, 0x3C6542C
	0x03C65320 ADRP X20, 0x781000
	0x03C65324 LDR X8, [X20 + 0x490]
	0x03C65328 CBNZ X8, 0x3C65340
	0x03C6532C ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C65330 ADD X0, X0, 0x35
	0x03C65334 BL 0x1C16CB8
	0x03C65338 MOV X8, X0
	0x03C6533C STR X0, [X20 + 0x490]
	0x03C65340 MOVZ W1, 0x113
	0x03C65344 B 0x3C653CC
	0x03C65348 ADRP X8, 0x4E2000
	0x03C6534C LDR X8, [X8 + 0x138]
	0x03C65350 MOV X0, X20
	0x03C65354 MOV X2, X31
	0x03C65358 LDR X1, [X8]
	0x03C6535C BL 0x321BA08
	0x03C65360 TBZ X0, 0x0, 0x3C6542C
	0x03C65364 ADRP X20, 0x781000
	0x03C65368 LDR X8, [X20 + 0x490]
	0x03C6536C CBNZ X8, 0x3C65384
	0x03C65370 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C65374 ADD X0, X0, 0x35
	0x03C65378 BL 0x1C16CB8
	0x03C6537C MOV X8, X0
	0x03C65380 STR X0, [X20 + 0x490]
	0x03C65384 MOVZ W1, 0x125
	0x03C65388 B 0x3C653CC
	0x03C6538C ADRP X8, 0x4FB000
	0x03C65390 LDR X8, [X8 + 0x1E0]
	0x03C65394 MOV X0, X20
	0x03C65398 MOV X2, X31
	0x03C6539C LDR X1, [X8]
	0x03C653A0 BL 0x321BA08
	0x03C653A4 TBZ X0, 0x0, 0x3C6542C
	0x03C653A8 ADRP X20, 0x781000
	0x03C653AC LDR X8, [X20 + 0x490]
	0x03C653B0 CBNZ X8, 0x3C653C8
	0x03C653B4 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C653B8 ADD X0, X0, 0x35
	0x03C653BC BL 0x1C16CB8
	0x03C653C0 MOV X8, X0
	0x03C653C4 STR X0, [X20 + 0x490]
	0x03C653C8 MOVZ W1, 0x127
	0x03C653CC MOV X0, X19
	0x03C653D0 BLR X8
	0x03C653D4 ADRP X20, 0x781000
	0x03C653D8 LDR X8, [X20 + 0x448]
	0x03C653DC CBNZ X8, 0x3C653F4
	0x03C653E0 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C653E4 ADD X0, X0, 0x530
	0x03C653E8 BL 0x1C16CB8
	0x03C653EC MOV X8, X0
	0x03C653F0 STR X0, [X20 + 0x448]
	0x03C653F4 MOV X0, X19
	0x03C653F8 BLR X8
	0x03C653FC ADRP X21, 0x781000
	0x03C65400 LDR X8, [X21 + 0x450]
	0x03C65404 ORR W20, W0, 0x40
	0x03C65408 CBNZ X8, 0x3C65420
	0x03C6540C ADRP X0, 0xFFFFFFFFFCEAA000
	0x03C65410 ADD X0, X0, 0x90D
	0x03C65414 BL 0x1C16CB8
	0x03C65418 MOV X8, X0
	0x03C6541C STR X0, [X21 + 0x450]
	0x03C65420 MOV X0, X19
	0x03C65424 MOV W1, W20
	0x03C65428 B 0x3C65530
	0x03C6542C CBZ X20, 0x3C656D8
	0x03C65430 LDR W8, [X20 + 0x10]
	0x03C65434 CMP W8, 0x1
	0x03C65438 B.NE 0x3C65538
	0x03C6543C MOV X0, X20
	0x03C65440 MOV X1, X31
	0x03C65444 BL 0x322B5E4
	0x03C65448 CBZ X0, 0x3C656D8
	0x03C6544C MOV W1, W31
	0x03C65450 MOV X2, X31
	0x03C65454 BL 0x3222A1C
	0x03C65458 ADRP X21, 0x781000
	0x03C6545C LDR X8, [X21 + 0x480]
	0x03C65460 MOV W20, W0
	0x03C65464 CBNZ X8, 0x3C6547C
	0x03C65468 ADRP X0, 0xFFFFFFFFFCE8E000
	0x03C6546C ADD X0, X0, 0x8A1
	0x03C65470 BL 0x1C16CB8
	0x03C65474 MOV X8, X0
	0x03C65478 STR X0, [X21 + 0x480]
	0x03C6547C MOV X0, X19
	0x03C65480 MOV W1, W20
	0x03C65484 BLR X8
	0x03C65488 ADRP X20, 0x781000
	0x03C6548C LDR X8, [X20 + 0x478]
	0x03C65490 CBNZ X8, 0x3C654A8
	0x03C65494 ADRP X0, 0xFFFFFFFFFCE94000
	0x03C65498 ADD X0, X0, 0x9C8
	0x03C6549C BL 0x1C16CB8
	0x03C654A0 MOV X8, X0
	0x03C654A4 STR X0, [X20 + 0x478]
	0x03C654A8 MOV X0, X19
	0x03C654AC BLR X8
	0x03C654B0 ADRP X22, 0x781000
	0x03C654B4 LDR X8, [X22 + 0x490]
	0x03C654B8 AND W20, W0, 0xFFFF
	0x03C654BC CBNZ X8, 0x3C654D4
	0x03C654C0 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C654C4 ADD X0, X0, 0x35
	0x03C654C8 BL 0x1C16CB8
	0x03C654CC MOV X8, X0
	0x03C654D0 STR X0, [X22 + 0x490]
	0x03C654D4 MOV X0, X19
	0x03C654D8 MOV W1, W20
	0x03C654DC BLR X8
	0x03C654E0 ADRP X20, 0x781000
	0x03C654E4 LDR X8, [X20 + 0x448]
	0x03C654E8 CBNZ X8, 0x3C65500
	0x03C654EC ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C654F0 ADD X0, X0, 0x530
	0x03C654F4 BL 0x1C16CB8
	0x03C654F8 MOV X8, X0
	0x03C654FC STR X0, [X20 + 0x448]
	0x03C65500 MOV X0, X19
	0x03C65504 BLR X8
	0x03C65508 CBZ W0, 0x3C655F0
	0x03C6550C LDR X8, [X21 + 0x480]
	0x03C65510 CBNZ X8, 0x3C65528
	0x03C65514 ADRP X0, 0xFFFFFFFFFCE8E000
	0x03C65518 ADD X0, X0, 0x8A1
	0x03C6551C BL 0x1C16CB8
	0x03C65520 MOV X8, X0
	0x03C65524 STR X0, [X21 + 0x480]
	0x03C65528 MOV X0, X19
	0x03C6552C MOV W1, W31
	0x03C65530 BLR X8
	0x03C65534 B 0x3C655F0
	0x03C65538 ADRP X8, 0x48E000
	0x03C6553C LDR X8, [X8 + 0x6C0]
	0x03C65540 LDR X0, [X8]
	0x03C65544 ADRP X8, 0x4FB000
	0x03C65548 LDR X8, [X8 + 0x110]
	0x03C6554C LDR W9, [X0 + 0xE0]
	0x03C65550 LDR X21, [X8]
	0x03C65554 CBNZ W9, 0x3C6555C
	0x03C65558 BL 0x1C16DFC
	0x03C6555C MOV X0, X21
	0x03C65560 MOV X1, X31
	0x03C65564 BL 0x338C698
	0x03C65568 ADRP X8, 0x48E000
	0x03C6556C LDR X8, [X8 + 0xDF8]
	0x03C65570 MOV X21, X0
	0x03C65574 LDR X0, [X8]
	0x03C65578 LDR W8, [X0 + 0xE0]
	0x03C6557C CBNZ W8, 0x3C65584
	0x03C65580 BL 0x1C16DFC
	0x03C65584 MOVZ W2, 0x1
	0x03C65588 MOV X0, X21
	0x03C6558C MOV X1, X20
	0x03C65590 MOV X3, X31
	0x03C65594 BL 0x33AF1B8
	0x03C65598 CBZ X0, 0x3C6560C
	0x03C6559C ADRP X8, 0x4FB000
	0x03C655A0 LDR X8, [X8 + 0x118]
	0x03C655A4 LDR X9, [X0]
	0x03C655A8 LDR X1, [X8]
	0x03C655AC LDR X8, [X9 + 0x40]
	0x03C655B0 LDR X9, [X1 + 0x40]
	0x03C655B4 CMP X8, X9
	0x03C655B8 B.NE 0x3C65610
	0x03C655BC BL 0x1C16E08
	0x03C655C0 ADRP X22, 0x781000
	0x03C655C4 LDR X8, [X22 + 0x490]
	0x03C655C8 LDR W21, [X0]
	0x03C655CC CBNZ X8, 0x3C655E4
	0x03C655D0 ADRP X0, 0xFFFFFFFFFCEB2000
	0x03C655D4 ADD X0, X0, 0x35
	0x03C655D8 BL 0x1C16CB8
	0x03C655DC MOV X8, X0
	0x03C655E0 STR X0, [X22 + 0x490]
	0x03C655E4 MOV X0, X19
	0x03C655E8 MOV W1, W21
	0x03C655EC BLR X8
	0x03C655F0 MOV X0, X19
	0x03C655F4 LDP X20, X19, [X31 + 0x40]
	0x03C655F8 LDP X22, X21, [X31 + 0x30]
	0x03C655FC LDP X24, X23, [X31 + 0x20]
	0x03C65600 LDP X26, X25, [X31 + 0x10]
	0x03C65604 LDR X30, [X31], #0x50
	0x03C65608 RET
	0x03C6560C BL 0x1C16F20
	0x03C65610 BL 0x1C171E0
	0x03C65614 B 0x3C65620
	0x03C65618 B 0x3C65620
	0x03C6561C B 0x3C65620
	0x03C65620 MOV X21, X0
	0x03C65624 CMP W1, 0x1
	0x03C65628 B.NE 0x3C65714
	0x03C6562C MOV X0, X21
	0x03C65630 BL 0x3EB1AD0
	0x03C65634 MOV X21, X0
	0x03C65638 ADRP X0, 0x496000
	0x03C6563C LDR X0, [X0 + 0x578]
	0x03C65640 BL 0x1C16D08
	0x03C65644 LDR X8, [X21]
	0x03C65648 LDR X1, [X8]
	0x03C6564C BL 0x1C17270
	0x03C65650 TBZ X0, 0x0, 0x3C656DC
	0x03C65654 BL 0x3EB1AE0
	0x03C65658 ADRP X0, 0x48E000
	0x03C6565C LDR X0, [X0 + 0x9D0]
	0x03C65660 BL 0x1C16D08
	0x03C65664 MOVZ W1, 0x1
	0x03C65668 BL 0x1C16D6C
	0x03C6566C CBZ X0, 0x3C656D8
	0x03C65670 LDR X8, [X0]
	0x03C65674 MOV X21, X0
	0x03C65678 MOV X0, X20
	0x03C6567C LDR X1, [X8 + 0x40]
	0x03C65680 BL 0x1C16E00
	0x03C65684 CBZ X0, 0x3C656FC
	0x03C65688 LDR W8, [X21 + 0x18]
	0x03C6568C CBZ W8, 0x3C65708
	0x03C65690 STR X20, [X21 + 0x20]
	0x03C65694 ADRP X0, 0x4FB000
	0x03C65698 LDR X0, [X0 + 0x1E8]
	0x03C6569C BL 0x1C16D08
	0x03C656A0 MOV X1, X21
	0x03C656A4 MOV X2, X31
	0x03C656A8 BL 0x3C96574
	0x03C656AC MOV X20, X0
	0x03C656B0 ADRP X0, 0x48E000
	0x03C656B4 LDR X0, [X0 + 0xA28]
	0x03C656B8 BL 0x1C16D08
	0x03C656BC LDR W8, [X0 + 0xE0]
	0x03C656C0 CBNZ W8, 0x3C656C8
	0x03C656C4 BL 0x1C16DFC
	0x03C656C8 MOV X0, X20
	0x03C656CC MOV X1, X31
	0x03C656D0 BL 0x3C0649C
	0x03C656D4 B 0x3C655F0
	0x03C656D8 BL 0x1C16F20
	0x03C656DC MOVZ W0, 0x8
	0x03C656E0 BL 0x3EB1AF0
	0x03C656E4 LDR X8, [X21]
	0x03C656E8 STR X8, [X0]
	0x03C656EC ADRP X1, 0x24F000
	0x03C656F0 ADD X1, X1, 0xE58
	0x03C656F4 MOV X2, X31
	0x03C656F8 BL 0x3EB1B00
	0x03C656FC BL 0x1C16F44
	0x03C65700 MOV X1, X31
	0x03C65704 BL 0x1C16DEC
	0x03C65708 BL 0x1C16F28
	0x03C6570C MOV X21, X0
	0x03C65710 BL 0x3EB1AE0
	0x03C65714 MOV X0, X21
	0x03C65718 BL 0x1D2C690
	0x03C6571C BL 0x1990590
	0x03C65720 SUB X31, X31, 0x30
	0x03C65724 STP X30, X21, [X31 + 0x10]
	0x03C65728 STP X20, X19, [X31 + 0x20]
	0x03C6572C ADRP X20, 0x781000
	0x03C65730 LDR X8, [X20 + 0x4A8]
	0x03C65734 MOV X19, X0
	0x03C65738 STR X31, [X31 + 0x8]
	0x03C6573C CBNZ X8, 0x3C65754
	0x03C65740 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C65744 ADD X0, X0, 0x566
	0x03C65748 BL 0x1C16CB8
	0x03C6574C MOV X8, X0
	0x03C65750 STR X0, [X20 + 0x4A8]
	0x03C65754 MOV X0, X19
	0x03C65758 BLR X8
	0x03C6575C AND W8, W0, 0xFFFFFFFE
	0x03C65760 CMP W8, 0x4
	0x03C65764 B.NE 0x3C65798
	0x03C65768 ADRP X20, 0x781000
	0x03C6576C LDR X8, [X20 + 0x488]
	0x03C65770 CBNZ X8, 0x3C65788
	0x03C65774 ADRP X0, 0xFFFFFFFFFCEB8000
	0x03C65778 ADD X0, X0, 0x5AB
	0x03C6577C BL 0x1C16CB8
	0x03C65780 MOV X8, X0
	0x03C65784 STR X0, [X20 + 0x488]
	0x03C65788 MOV X0, X19
	0x03C6578C BLR X8
	0x03C65790 AND W20, W0, 0xFFFF
	0x03C65794 B 0x3C6579C
	0x03C65798 MOVZ W20, 0x1
	0x03C6579C MOV X0, X19
	0x03C657A0 BL 0x3C63A5C
	0x03C657A4 TBZ X0, 0x0, 0x3C657DC
	0x03C657A8 MOV X0, X19
	0x03C657AC BL 0x3C62C40
	0x03C657B0 ADD X8, X31, 0x8
	0x03C657B4 ADD X0, X31, 0x8
	0x03C657B8 MOV X1, X31
	0x03C657BC ORR X20, X8, 0x7
	0x03C657C0 STP S0, S1, [X31 + 0x8]
	0x03C657C4 BL 0x338FE0C
	0x03C657C8 MOV W21, W0
	0x03C657CC MOV X0, X20
	0x03C657D0 MOV X1, X31
	0x03C657D4 BL 0x338FE0C
	0x03C657D8 EOR W20, W21, W0, 0x2
	0x03C657DC ADRP X21, 0x781000
	0x03C657E0 LDR X8, [X21 + 0x448]
	0x03C657E4 CBNZ X8, 0x3C657FC
	0x03C657E8 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C657EC ADD X0, X0, 0x530
	0x03C657F0 BL 0x1C16CB8
	0x03C657F4 MOV X8, X0
	0x03C657F8 STR X0, [X21 + 0x448]
	0x03C657FC MOV X0, X19
	0x03C65800 BLR X8
	0x03C65804 MOVZ W8, 0x25
	0x03C65808 MUL W8, W20, W8
	0x03C6580C LDP X20, X19, [X31 + 0x20]
	0x03C65810 LDP X30, X21, [X31 + 0x10]
	0x03C65814 ORR W0, W0, W8, 0x0
	0x03C65818 ADD X31, X31, 0x30
	0x03C6581C RET
	0x03C65820 STP D9, D8, [X31 - 0x40]!
	0x03C65824 STP X30, X23, [X31 + 0x10]
	0x03C65828 STP X22, X21, [X31 + 0x20]
	0x03C6582C STP X20, X19, [X31 + 0x30]
	0x03C65830 ADRP X21, 0x781000
	0x03C65834 LDRB W8, [X21 + 0x513]
	0x03C65838 MOV X19, X1
	0x03C6583C MOV X20, X0
	0x03C65840 TBNZ X8, 0x0, 0x3C65864
	0x03C65844 ADRP X0, 0x4F4000
	0x03C65848 LDR X0, [X0 + 0x20]
	0x03C6584C BL 0x1C16CF4
	0x03C65850 ADRP X0, 0x48E000
	0x03C65854 LDR X0, [X0 + 0x6C0]
	0x03C65858 BL 0x1C16CF4
	0x03C6585C MOVZ W8, 0x1
	0x03C65860 STRB W8, [X21 + 0x513]
	0x03C65864 CBZ X19, 0x3C6598C
	0x03C65868 CMP X20, X19
	0x03C6586C B.EQ 0x3C65994
	0x03C65870 MOV X0, X19
	0x03C65874 MOV X1, X31
	0x03C65878 BL 0x33BE520
	0x03C6587C MOV X21, X0
	0x03C65880 MOV X0, X20
	0x03C65884 MOV X1, X31
	0x03C65888 BL 0x33BE520
	0x03C6588C ADRP X8, 0x48E000
	0x03C65890 LDR X8, [X8 + 0x6C0]
	0x03C65894 MOV X22, X0
	0x03C65898 LDR X8, [X8]
	0x03C6589C LDR W9, [X8 + 0xE0]
	0x03C658A0 CBNZ W9, 0x3C658AC
	0x03C658A4 MOV X0, X8
	0x03C658A8 BL 0x1C16DFC
	0x03C658AC MOV X0, X21
	0x03C658B0 MOV X1, X22
	0x03C658B4 MOV X2, X31
	0x03C658B8 BL 0x3395F0C
	0x03C658BC TBNZ X0, 0x0, 0x3C6598C
	0x03C658C0 ADRP X8, 0x4F4000
	0x03C658C4 LDR X8, [X8 + 0x20]
	0x03C658C8 LDR X1, [X8]
	0x03C658CC LDR X8, [X19]
	0x03C658D0 CMP X8, X1
	0x03C658D4 B.NE 0x3C65A84
	0x03C658D8 ADRP X22, 0x781000
	0x03C658DC LDR X8, [X22 + 0x4A8]
	0x03C658E0 CBNZ X8, 0x3C658F8
	0x03C658E4 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C658E8 ADD X0, X0, 0x566
	0x03C658EC BL 0x1C16CB8
	0x03C658F0 MOV X8, X0
	0x03C658F4 STR X0, [X22 + 0x4A8]
	0x03C658F8 MOV X0, X20
	0x03C658FC BLR X8
	0x03C65900 LDR X8, [X22 + 0x4A8]
	0x03C65904 MOV W21, W0
	0x03C65908 CBNZ X8, 0x3C65920
	0x03C6590C ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C65910 ADD X0, X0, 0x566
	0x03C65914 BL 0x1C16CB8
	0x03C65918 MOV X8, X0
	0x03C6591C STR X0, [X22 + 0x4A8]
	0x03C65920 MOV X0, X19
	0x03C65924 BLR X8
	0x03C65928 CMP W21, W0
	0x03C6592C B.NE 0x3C6598C
	0x03C65930 ADRP X23, 0x781000
	0x03C65934 LDR X8, [X23 + 0x448]
	0x03C65938 CBNZ X8, 0x3C65950
	0x03C6593C ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C65940 ADD X0, X0, 0x530
	0x03C65944 BL 0x1C16CB8
	0x03C65948 MOV X8, X0
	0x03C6594C STR X0, [X23 + 0x448]
	0x03C65950 MOV X0, X20
	0x03C65954 BLR X8
	0x03C65958 LDR X8, [X23 + 0x448]
	0x03C6595C MOV W21, W0
	0x03C65960 CBNZ X8, 0x3C65978
	0x03C65964 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C65968 ADD X0, X0, 0x530
	0x03C6596C BL 0x1C16CB8
	0x03C65970 MOV X8, X0
	0x03C65974 STR X0, [X23 + 0x448]
	0x03C65978 MOV X0, X19
	0x03C6597C BLR X8
	0x03C65980 EOR W8, W0, W21, 0x0
	0x03C65984 ANDS W31, W8, 0xFFFFFFDF
	0x03C65988 B.EQ 0x3C659AC
	0x03C6598C MOV W0, W31
	0x03C65990 B 0x3C65998
	0x03C65994 MOVZ W0, 0x1
	0x03C65998 LDP X20, X19, [X31 + 0x30]
	0x03C6599C LDP X22, X21, [X31 + 0x20]
	0x03C659A0 LDP X30, X23, [X31 + 0x10]
	0x03C659A4 LDP D9, D8, [X31], #0x40
	0x03C659A8 RET
	0x03C659AC LDR X8, [X22 + 0x4A8]
	0x03C659B0 CBNZ X8, 0x3C659C8
	0x03C659B4 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C659B8 ADD X0, X0, 0x566
	0x03C659BC BL 0x1C16CB8
	0x03C659C0 MOV X8, X0
	0x03C659C4 STR X0, [X22 + 0x4A8]
	0x03C659C8 MOV X0, X20
	0x03C659CC BLR X8
	0x03C659D0 AND W8, W0, 0xFFFFFFFE
	0x03C659D4 CMP W8, 0x4
	0x03C659D8 B.NE 0x3C65A38
	0x03C659DC ADRP X21, 0x781000
	0x03C659E0 LDR X8, [X21 + 0x488]
	0x03C659E4 CBNZ X8, 0x3C659FC
	0x03C659E8 ADRP X0, 0xFFFFFFFFFCEB8000
	0x03C659EC ADD X0, X0, 0x5AB
	0x03C659F0 BL 0x1C16CB8
	0x03C659F4 MOV X8, X0
	0x03C659F8 STR X0, [X21 + 0x488]
	0x03C659FC MOV X0, X20
	0x03C65A00 BLR X8
	0x03C65A04 LDR X8, [X21 + 0x488]
	0x03C65A08 MOV W20, W0
	0x03C65A0C CBNZ X8, 0x3C65A24
	0x03C65A10 ADRP X0, 0xFFFFFFFFFCEB8000
	0x03C65A14 ADD X0, X0, 0x5AB
	0x03C65A18 BL 0x1C16CB8
	0x03C65A1C MOV X8, X0
	0x03C65A20 STR X0, [X21 + 0x488]
	0x03C65A24 MOV X0, X19
	0x03C65A28 BLR X8
	0x03C65A2C CMP W20, W0
	0x03C65A30 CSET W0, EQ
	0x03C65A34 B 0x3C65998
	0x03C65A38 MOV X0, X20
	0x03C65A3C BL 0x3C63A5C
	0x03C65A40 TBZ X0, 0x0, 0x3C6598C
	0x03C65A44 MOV X0, X20
	0x03C65A48 BL 0x3C62C40
	0x03C65A4C MOV X0, X19
	0x03C65A50 MOV V8.16B, V0.16B
	0x03C65A54 MOV V9.16B, V1.16B
	0x03C65A58 BL 0x3C62C40
	0x03C65A5C ADRP X8, 0xFFFFFFFFFCE84000
	0x03C65A60 LDR V2, [X8 + 0xF20]
	0x03C65A64 FSUB S0, S8, S0
	0x03C65A68 FSUB S1, S9, S1
	0x03C65A6C FMUL S0, S0, S0
	0x03C65A70 FMUL S1, S1, S1
	0x03C65A74 FADD S0, S0, S1
	0x03C65A78 FCMP S0, S2
	0x03C65A7C CSET W0, MI
	0x03C65A80 B 0x3C65998
	0x03C65A84 MOV X0, X19
	0x03C65A88 BL 0x1C171E0
	0x03C65A8C SUB X31, X31, 0x80
	0x03C65A90 STR X30, [X31 + 0x50]
	0x03C65A94 STP X22, X21, [X31 + 0x60]
	0x03C65A98 STP X20, X19, [X31 + 0x70]
	0x03C65A9C ADRP X20, 0x781000
	0x03C65AA0 LDRB W8, [X20 + 0x514]
	0x03C65AA4 MOV X19, X0
	0x03C65AA8 TBNZ X8, 0x0, 0x3C65B5C
	0x03C65AAC ADRP X0, 0x4FB000
	0x03C65AB0 LDR X0, [X0 + 0x1F0]
	0x03C65AB4 BL 0x1C16CF4
	0x03C65AB8 ADRP X0, 0x4B7000
	0x03C65ABC LDR X0, [X0 + 0xE68]
	0x03C65AC0 BL 0x1C16CF4
	0x03C65AC4 ADRP X0, 0x4FB000
	0x03C65AC8 LDR X0, [X0 + 0x118]
	0x03C65ACC BL 0x1C16CF4
	0x03C65AD0 ADRP X0, 0x48E000
	0x03C65AD4 LDR X0, [X0 + 0x9D0]
	0x03C65AD8 BL 0x1C16CF4
	0x03C65ADC ADRP X0, 0x48E000
	0x03C65AE0 LDR X0, [X0 + 0xAC8]
	0x03C65AE4 BL 0x1C16CF4
	0x03C65AE8 ADRP X0, 0x496000
	0x03C65AEC LDR X0, [X0 + 0xF08]
	0x03C65AF0 BL 0x1C16CF4
	0x03C65AF4 ADRP X0, 0x4FB000
	0x03C65AF8 LDR X0, [X0 + 0x1F8]
	0x03C65AFC BL 0x1C16CF4
	0x03C65B00 ADRP X0, 0x4FB000
	0x03C65B04 LDR X0, [X0 + 0x200]
	0x03C65B08 BL 0x1C16CF4
	0x03C65B0C ADRP X0, 0x4FB000
	0x03C65B10 LDR X0, [X0 + 0x208]
	0x03C65B14 BL 0x1C16CF4
	0x03C65B18 ADRP X0, 0x4FB000
	0x03C65B1C LDR X0, [X0 + 0x210]
	0x03C65B20 BL 0x1C16CF4
	0x03C65B24 ADRP X0, 0x4FB000
	0x03C65B28 LDR X0, [X0 + 0x218]
	0x03C65B2C BL 0x1C16CF4
	0x03C65B30 ADRP X0, 0x4FB000
	0x03C65B34 LDR X0, [X0 + 0x220]
	0x03C65B38 BL 0x1C16CF4
	0x03C65B3C ADRP X0, 0x4FB000
	0x03C65B40 LDR X0, [X0 + 0x228]
	0x03C65B44 BL 0x1C16CF4
	0x03C65B48 ADRP X0, 0x48E000
	0x03C65B4C LDR X0, [X0 + 0x988]
	0x03C65B50 BL 0x1C16CF4
	0x03C65B54 MOVZ W8, 0x1
	0x03C65B58 STRB W8, [X20 + 0x514]
	0x03C65B5C ADRP X21, 0x781000
	0x03C65B60 LDR X8, [X21 + 0x4A8]
	0x03C65B64 STR W31, [X31 + 0x5C]
	0x03C65B68 CBNZ X8, 0x3C65B80
	0x03C65B6C ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C65B70 ADD X0, X0, 0x566
	0x03C65B74 BL 0x1C16CB8
	0x03C65B78 MOV X8, X0
	0x03C65B7C STR X0, [X21 + 0x4A8]
	0x03C65B80 MOV X0, X19
	0x03C65B84 BLR X8
	0x03C65B88 AND W8, W0, 0xFFFFFFFE
	0x03C65B8C CMP W8, 0x4
	0x03C65B90 B.NE 0x3C65DA8
	0x03C65B94 ADRP X22, 0x781000
	0x03C65B98 LDR X8, [X22 + 0x478]
	0x03C65B9C CBNZ X8, 0x3C65BB4
	0x03C65BA0 ADRP X0, 0xFFFFFFFFFCE94000
	0x03C65BA4 ADD X0, X0, 0x9C8
	0x03C65BA8 BL 0x1C16CB8
	0x03C65BAC MOV X8, X0
	0x03C65BB0 STR X0, [X22 + 0x478]
	0x03C65BB4 MOV X0, X19
	0x03C65BB8 BLR X8
	0x03C65BBC ANDS W31, W0, 0xFFFF
	0x03C65BC0 B.EQ 0x3C6603C
	0x03C65BC4 ADRP X8, 0x48E000
	0x03C65BC8 LDR X8, [X8 + 0xAC8]
	0x03C65BCC MOVZ W1, 0x8
	0x03C65BD0 LDR X0, [X8]
	0x03C65BD4 BL 0x1C16D6C
	0x03C65BD8 CBZ X0, 0x3C6623C
	0x03C65BDC LDR W8, [X0 + 0x18]
	0x03C65BE0 MOV X20, X0
	0x03C65BE4 CBZ W8, 0x3C6622C
	0x03C65BE8 ADRP X8, 0x4FB000
	0x03C65BEC LDR X8, [X8 + 0x208]
	0x03C65BF0 LDR X8, [X8]
	0x03C65BF4 STR X8, [X20 + 0x20]
	0x03C65BF8 LDR X8, [X21 + 0x4A8]
	0x03C65BFC CBNZ X8, 0x3C65C14
	0x03C65C00 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C65C04 ADD X0, X0, 0x566
	0x03C65C08 BL 0x1C16CB8
	0x03C65C0C MOV X8, X0
	0x03C65C10 STR X0, [X21 + 0x4A8]
	0x03C65C14 MOV X0, X19
	0x03C65C18 BLR X8
	0x03C65C1C ADRP X8, 0x4B7000
	0x03C65C20 LDR X8, [X8 + 0xE68]
	0x03C65C24 MOVN X9, 0x0
	0x03C65C28 STR W0, [X31 + 0x48]
	0x03C65C2C ADD X0, X31, 0x38
	0x03C65C30 LDR X8, [X8]
	0x03C65C34 MOV X1, X31
	0x03C65C38 STP X8, X9, [X31 + 0x38]
	0x03C65C3C BL 0x33B162C
	0x03C65C40 LDR W8, [X20 + 0x18]
	0x03C65C44 CMP W8, 0x1
	0x03C65C48 B.LS 0x3C6622C
	0x03C65C4C CMP W8, 0x2
	0x03C65C50 STR X0, [X20 + 0x28]
	0x03C65C54 B.EQ 0x3C6622C
	0x03C65C58 ADRP X8, 0x4FB000
	0x03C65C5C LDR X8, [X8 + 0x200]
	0x03C65C60 LDR X8, [X8]
	0x03C65C64 STR X8, [X20 + 0x30]
	0x03C65C68 LDR X8, [X22 + 0x478]
	0x03C65C6C CBNZ X8, 0x3C65C84
	0x03C65C70 ADRP X0, 0xFFFFFFFFFCE94000
	0x03C65C74 ADD X0, X0, 0x9C8
	0x03C65C78 BL 0x1C16CB8
	0x03C65C7C MOV X8, X0
	0x03C65C80 STR X0, [X22 + 0x478]
	0x03C65C84 MOV X0, X19
	0x03C65C88 BLR X8
	0x03C65C8C AND W8, W0, 0xFFFF
	0x03C65C90 ADD X0, X31, 0x5C
	0x03C65C94 MOV X1, X31
	0x03C65C98 STR W8, [X31 + 0x5C]
	0x03C65C9C BL 0x337B6E0
	0x03C65CA0 LDR W8, [X20 + 0x18]
	0x03C65CA4 CMP W8, 0x3
	0x03C65CA8 B.LS 0x3C6622C
	0x03C65CAC CMP W8, 0x4
	0x03C65CB0 STR X0, [X20 + 0x38]
	0x03C65CB4 B.EQ 0x3C6622C
	0x03C65CB8 ADRP X8, 0x4FB000
	0x03C65CBC LDR X8, [X8 + 0x218]
	0x03C65CC0 ADRP X21, 0x781000
	0x03C65CC4 LDR X8, [X8]
	0x03C65CC8 STR X8, [X20 + 0x40]
	0x03C65CCC LDR X8, [X21 + 0x448]
	0x03C65CD0 CBNZ X8, 0x3C65CE8
	0x03C65CD4 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C65CD8 ADD X0, X0, 0x530
	0x03C65CDC BL 0x1C16CB8
	0x03C65CE0 MOV X8, X0
	0x03C65CE4 STR X0, [X21 + 0x448]
	0x03C65CE8 MOV X0, X19
	0x03C65CEC BLR X8
	0x03C65CF0 ADRP X8, 0x4FB000
	0x03C65CF4 LDR X8, [X8 + 0x1F0]
	0x03C65CF8 MOVN X9, 0x0
	0x03C65CFC STR W0, [X31 + 0x30]
	0x03C65D00 ADD X0, X31, 0x20
	0x03C65D04 LDR X8, [X8]
	0x03C65D08 MOV X1, X31
	0x03C65D0C STP X8, X9, [X31 + 0x20]
	0x03C65D10 BL 0x33B162C
	0x03C65D14 LDR W8, [X20 + 0x18]
	0x03C65D18 CMP W8, 0x5
	0x03C65D1C B.LS 0x3C6622C
	0x03C65D20 CMP W8, 0x6
	0x03C65D24 STR X0, [X20 + 0x48]
	0x03C65D28 B.EQ 0x3C6622C
	0x03C65D2C ADRP X8, 0x4FB000
	0x03C65D30 LDR X8, [X8 + 0x228]
	0x03C65D34 ADRP X21, 0x781000
	0x03C65D38 LDR X8, [X8]
	0x03C65D3C STR X8, [X20 + 0x50]
	0x03C65D40 LDR X8, [X21 + 0x488]
	0x03C65D44 CBNZ X8, 0x3C65D5C
	0x03C65D48 ADRP X0, 0xFFFFFFFFFCEB8000
	0x03C65D4C ADD X0, X0, 0x5AB
	0x03C65D50 BL 0x1C16CB8
	0x03C65D54 MOV X8, X0
	0x03C65D58 STR X0, [X21 + 0x488]
	0x03C65D5C MOV X0, X19
	0x03C65D60 BLR X8
	0x03C65D64 ADRP X8, 0x4FB000
	0x03C65D68 LDR X8, [X8 + 0x118]
	0x03C65D6C MOVN X9, 0x0
	0x03C65D70 STR W0, [X31 + 0x18]
	0x03C65D74 ADD X0, X31, 0x8
	0x03C65D78 LDR X8, [X8]
	0x03C65D7C MOV X1, X31
	0x03C65D80 STP X8, X9, [X31 + 0x8]
	0x03C65D84 BL 0x33B162C
	0x03C65D88 LDR W8, [X20 + 0x18]
	0x03C65D8C CMP W8, 0x7
	0x03C65D90 B.LS 0x3C6622C
	0x03C65D94 STR X0, [X20 + 0x58]
	0x03C65D98 MOV X0, X20
	0x03C65D9C MOV X1, X31
	0x03C65DA0 BL 0x32278CC
	0x03C65DA4 B 0x3C661B8
	0x03C65DA8 MOV X0, X19
	0x03C65DAC BL 0x3C63A5C
	0x03C65DB0 TBZ X0, 0x0, 0x3C65F00
	0x03C65DB4 ADRP X8, 0x48E000
	0x03C65DB8 LDR X8, [X8 + 0x9D0]
	0x03C65DBC MOVZ W1, 0x3
	0x03C65DC0 LDR X0, [X8]
	0x03C65DC4 BL 0x1C16D6C
	0x03C65DC8 LDR X8, [X21 + 0x4A8]
	0x03C65DCC MOV X20, X0
	0x03C65DD0 CBNZ X8, 0x3C65DE8
	0x03C65DD4 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C65DD8 ADD X0, X0, 0x566
	0x03C65DDC BL 0x1C16CB8
	0x03C65DE0 MOV X8, X0
	0x03C65DE4 STR X0, [X21 + 0x4A8]
	0x03C65DE8 MOV X0, X19
	0x03C65DEC BLR X8
	0x03C65DF0 ADRP X8, 0x4B7000
	0x03C65DF4 LDR X8, [X8 + 0xE68]
	0x03C65DF8 STR W0, [X31 + 0x20]
	0x03C65DFC ADD X1, X31, 0x20
	0x03C65E00 LDR X8, [X8]
	0x03C65E04 MOV X0, X8
	0x03C65E08 BL 0x1C16E04
	0x03C65E0C CBZ X20, 0x3C6623C
	0x03C65E10 MOV X21, X0
	0x03C65E14 CBZ X0, 0x3C65E2C
	0x03C65E18 LDR X8, [X20]
	0x03C65E1C MOV X0, X21
	0x03C65E20 LDR X1, [X8 + 0x40]
	0x03C65E24 BL 0x1C16E00
	0x03C65E28 CBZ X0, 0x3C66230
	0x03C65E2C LDR W8, [X20 + 0x18]
	0x03C65E30 CBZ W8, 0x3C6622C
	0x03C65E34 MOV X0, X19
	0x03C65E38 STR X21, [X20 + 0x20]
	0x03C65E3C BL 0x3C62C40
	0x03C65E40 ADRP X8, 0x496000
	0x03C65E44 LDR X8, [X8 + 0xF08]
	0x03C65E48 ADD X1, X31, 0x38
	0x03C65E4C STP S0, S1, [X31 + 0x38]
	0x03C65E50 LDR X0, [X8]
	0x03C65E54 BL 0x1C16E04
	0x03C65E58 MOV X21, X0
	0x03C65E5C CBZ X0, 0x3C65E74
	0x03C65E60 LDR X8, [X20]
	0x03C65E64 MOV X0, X21
	0x03C65E68 LDR X1, [X8 + 0x40]
	0x03C65E6C BL 0x1C16E00
	0x03C65E70 CBZ X0, 0x3C66230
	0x03C65E74 LDR W8, [X20 + 0x18]
	0x03C65E78 CMP W8, 0x1
	0x03C65E7C B.LS 0x3C6622C
	0x03C65E80 STR X21, [X20 + 0x28]
	0x03C65E84 ADRP X21, 0x781000
	0x03C65E88 LDR X8, [X21 + 0x448]
	0x03C65E8C CBNZ X8, 0x3C65EA4
	0x03C65E90 ADRP X0, 0xFFFFFFFFFCE9C000
	0x03C65E94 ADD X0, X0, 0x530
	0x03C65E98 BL 0x1C16CB8
	0x03C65E9C MOV X8, X0
	0x03C65EA0 STR X0, [X21 + 0x448]
	0x03C65EA4 MOV X0, X19
	0x03C65EA8 BLR X8
	0x03C65EAC ADRP X8, 0x4FB000
	0x03C65EB0 LDR X8, [X8 + 0x1F0]
	0x03C65EB4 STR W0, [X31 + 0x8]
	0x03C65EB8 ADD X1, X31, 0x8
	0x03C65EBC LDR X8, [X8]
	0x03C65EC0 MOV X0, X8
	0x03C65EC4 BL 0x1C16E04
	0x03C65EC8 MOV X19, X0
	0x03C65ECC CBZ X0, 0x3C65EE4
	0x03C65ED0 LDR X8, [X20]
	0x03C65ED4 MOV X0, X19
	0x03C65ED8 LDR X1, [X8 + 0x40]
	0x03C65EDC BL 0x1C16E00
	0x03C65EE0 CBZ X0, 0x3C66230
	0x03C65EE4 LDR W8, [X20 + 0x18]
	0x03C65EE8 CMP W8, 0x2
	0x03C65EEC B.LS 0x3C6622C
	0x03C65EF0 STR X19, [X20 + 0x30]
	0x03C65EF4 ADRP X8, 0x4FB000
	0x03C65EF8 LDR X8, [X8 + 0x220]
	0x03C65EFC B 0x3C661A8
	0x03C65F00 LDR X8, [X21 + 0x4A8]
	0x03C65F04 CBNZ X8, 0x3C65F1C
	0x03C65F08 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C65F0C ADD X0, X0, 0x566
	0x03C65F10 BL 0x1C16CB8
	0x03C65F14 MOV X8, X0
	0x03C65F18 STR X0, [X21 + 0x4A8]
	0x03C65F1C MOV X0, X19
	0x03C65F20 BLR X8
	0x03C65F24 CMP W0, 0xE
	0x03C65F28 B.EQ 0x3C65F58
	0x03C65F2C LDR X8, [X21 + 0x4A8]
	0x03C65F30 CBNZ X8, 0x3C65F48
	0x03C65F34 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C65F38 ADD X0, X0, 0x566
	0x03C65F3C BL 0x1C16CB8
	0x03C65F40 MOV X8, X0
	0x03C65F44 STR X0, [X21 + 0x4A8]
	0x03C65F48 MOV X0, X19
	0x03C65F4C BLR X8
	0x03C65F50 CMP W0, 0xD
	0x03C65F54 B.NE 0x3C661CC
	0x03C65F58 ADRP X8, 0x48E000
	0x03C65F5C LDR X8, [X8 + 0x9D0]
	0x03C65F60 MOVZ W1, 0x2
	0x03C65F64 LDR X0, [X8]
	0x03C65F68 BL 0x1C16D6C
	0x03C65F6C LDR X8, [X21 + 0x4A8]
	0x03C65F70 MOV X20, X0
	0x03C65F74 CBNZ X8, 0x3C65F8C
	0x03C65F78 ADRP X0, 0xFFFFFFFFFCE8C000
	0x03C65F7C ADD X0, X0, 0x566
	0x03C65F80 BL 0x1C16CB8
	0x03C65F84 MOV X8, X0
	0x03C65F88 STR X0, [X21 + 0x4A8]
	0x03C65F8C MOV X0, X19
	0x03C65F90 BLR X8
	0x03C65F94 ADRP X8, 0x4B7000
	0x03C65F98 LDR X8, [X8 + 0xE68]
	0x03C65F9C STR W0, [X31 + 0x38]
	0x03C65FA0 ADD X1, X31, 0x38
	0x03C65FA4 LDR X8, [X8]
	0x03C65FA8 MOV X0, X8
	0x03C65FAC BL 0x1C16E04
	0x03C65FB0 CBZ X20, 0x3C6623C
	0x03C65FB4 MOV X21, X0
	0x03C65FB8 CBZ X0, 0x3C65FD0
	0x03C65FBC LDR X8, [X20]
	0x03C65FC0 MOV X0, X21
	0x03C65FC4 LDR X1, [X8 + 0x40]
	0x03C65FC8 BL 0x1C16E00
	0x03C65FCC CBZ X0, 0x3C66230
	0x03C65FD0 LDR W8, [X20 + 0x18]
	0x03C65FD4 CBZ W8, 0x3C6622C
	0x03C65FD8 STR X21, [X20 + 0x20]
	0x03C65FDC ADRP X21, 0x781000
	0x03C65FE0 LDR X8, [X21 + 0x4B8]
	0x03C65FE4 CBNZ X8, 0x3C65FFC
	0x03C65FE8 ADRP X0, 0xFFFFFFFFFCE94000
	0x03C65FEC ADD X0, X0, 0x9EB
	0x03C65FF0 BL 0x1C16CB8
	0x03C65FF4 MOV X8, X0
	0x03C65FF8 STR X0, [X21 + 0x4B8]
	0x03C65FFC MOV X0, X19
	0x03C66000 BLR X8
	0x03C66004 MOV X19, X0
	0x03C66008 CBZ X0, 0x3C66020
	0x03C6600C LDR X8, [X20]
	0x03C66010 MOV X0, X19
	0x03C66014 LDR X1, [X8 + 0x40]
	0x03C66018 BL 0x1C16E00
	0x03C6601C CBZ X0, 0x3C66230
	0x03C66020 LDR W8, [X20 + 0x18]
	0x03C66024 CMP W8, 0x1
	0x03C66028 B.LS 0x3C6622C
	0x03C6602C STR X19, [X20 + 0x28]
	0x03C66030 ADRP X8, 0x4FA000
	0x03C66034 LDR X8, [X8 + 0x1F8]
	0x03C66038 B 0x3C661A8
	0x03C6603C ADRP X8, 0x48D000
	0x03C66040 LDR X8, [X8 + 0x9D0]
	0x03C66044 MOVZ W1, 0x3
	0x03C66048 LDR X0, [X8]
	0x03C6604C BL 0x1C16D6C
	0x03C66050 LDR X8, [X21 + 0x4A8]
	0x03C66054 MOV X20, X0
	0x03C66058 CBNZ X8, 0x3C66070
	0x03C6605C ADRP X0, 0xFFFFFFFFFCE8B000
	0x03C66060 ADD X0, X0, 0x566
	0x03C66064 BL 0x1C16CB8
	0x03C66068 MOV X8, X0
	0x03C6606C STR X0, [X21 + 0x4A8]
	0x03C66070 MOV X0, X19
	0x03C66074 BLR X8
	0x03C66078 ADRP X8, 0x4B6000
	0x03C6607C LDR X8, [X8 + 0xE68]
	0x03C66080 STR W0, [X31 + 0x38]
	0x03C66084 ADD X1, X31, 0x38
	0x03C66088 LDR X8, [X8]
	0x03C6608C MOV X0, X8
	0x03C66090 BL 0x1C16E04
	0x03C66094 CBZ X20, 0x3C6623C
	0x03C66098 MOV X21, X0
	0x03C6609C CBZ X0, 0x3C660B4
	0x03C660A0 LDR X8, [X20]
	0x03C660A4 MOV X0, X21
	0x03C660A8 LDR X1, [X8 + 0x40]
	0x03C660AC BL 0x1C16E00
	0x03C660B0 CBZ X0, 0x3C66230
	0x03C660B4 LDR W8, [X20 + 0x18]
	0x03C660B8 CBZ W8, 0x3C6622C
	0x03C660BC STR X21, [X20 + 0x20]
	0x03C660C0 ADRP X21, 0x780000
	0x03C660C4 LDR X8, [X21 + 0x448]
	0x03C660C8 CBNZ X8, 0x3C660E0
	0x03C660CC ADRP X0, 0xFFFFFFFFFCE9B000
	0x03C660D0 ADD X0, X0, 0x530
	0x03C660D4 BL 0x1C16CB8
	0x03C660D8 MOV X8, X0
	0x03C660DC STR X0, [X21 + 0x448]
	0x03C660E0 MOV X0, X19
	0x03C660E4 BLR X8
	0x03C660E8 ADRP X8, 0x4FA000
	0x03C660EC LDR X8, [X8 + 0x1F0]
	0x03C660F0 STR W0, [X31 + 0x20]
	0x03C660F4 ADD X1, X31, 0x20
	0x03C660F8 LDR X8, [X8]
	0x03C660FC MOV X0, X8
	0x03C66100 BL 0x1C16E04
	0x03C66104 MOV X21, X0
	0x03C66108 CBZ X0, 0x3C66120
	0x03C6610C LDR X8, [X20]
	0x03C66110 MOV X0, X21
	0x03C66114 LDR X1, [X8 + 0x40]
	0x03C66118 BL 0x1C16E00
	0x03C6611C CBZ X0, 0x3C66230
	0x03C66120 LDR W8, [X20 + 0x18]
	0x03C66124 CMP W8, 0x1
	0x03C66128 B.LS 0x3C6622C
	0x03C6612C STR X21, [X20 + 0x28]
	0x03C66130 ADRP X21, 0x780000
	0x03C66134 LDR X8, [X21 + 0x488]
	0x03C66138 CBNZ X8, 0x3C66150
	0x03C6613C ADRP X0, 0xFFFFFFFFFCEB7000
	0x03C66140 ADD X0, X0, 0x5AB
	0x03C66144 BL 0x1C16CB8
	0x03C66148 MOV X8, X0
	0x03C6614C STR X0, [X21 + 0x488]
	0x03C66150 MOV X0, X19
	0x03C66154 BLR X8
	0x03C66158 ADRP X8, 0x4FA000
	0x03C6615C LDR X8, [X8 + 0x118]
	0x03C66160 STR W0, [X31 + 0x8]
	0x03C66164 ADD X1, X31, 0x8
	0x03C66168 LDR X8, [X8]
	0x03C6616C MOV X0, X8
	0x03C66170 BL 0x1C16E04
	0x03C66174 MOV X19, X0
	0x03C66178 CBZ X0, 0x3C66190
	0x03C6617C LDR X8, [X20]
	0x03C66180 MOV X0, X19
	0x03C66184 LDR X1, [X8 + 0x40]
	0x03C66188 BL 0x1C16E00
	0x03C6618C CBZ X0, 0x3C66230
	0x03C66190 LDR W8, [X20 + 0x18]
	0x03C66194 CMP W8, 0x2
	0x03C66198 B.LS 0x3C6622C
	0x03C6619C STR X19, [X20 + 0x30]
	0x03C661A0 ADRP X8, 0x4FA000
	0x03C661A4 LDR X8, [X8 + 0x210]
	0x03C661A8 LDR X0, [X8]
	0x03C661AC MOV X1, X20
	0x03C661B0 MOV X2, X31
	0x03C661B4 BL 0x3C96574
	0x03C661B8 LDP X20, X19, [X31 + 0x70]
	0x03C661BC LDP X22, X21, [X31 + 0x60]
	0x03C661C0 LDR X30, [X31 + 0x50]
	0x03C661C4 ADD X31, X31, 0x80
	0x03C661C8 RET
	0x03C661CC LDR X8, [X21 + 0x4A8]
	0x03C661D0 CBNZ X8, 0x3C661E8
	0x03C661D4 ADRP X0, 0xFFFFFFFFFCE8B000
	0x03C661D8 ADD X0, X0, 0x566
	0x03C661DC BL 0x1C16CB8
	0x03C661E0 MOV X8, X0
	0x03C661E4 STR X0, [X21 + 0x4A8]
	0x03C661E8 MOV X0, X19
	0x03C661EC BLR X8
	0x03C661F0 ADRP X8, 0x4B6000
	0x03C661F4 LDR X8, [X8 + 0xE68]
	0x03C661F8 MOVN X9, 0x0
	0x03C661FC STR W0, [X31 + 0x48]
	0x03C66200 ADD X0, X31, 0x38
	0x03C66204 LDR X8, [X8]
	0x03C66208 MOV X1, X31
	0x03C6620C STP X8, X9, [X31 + 0x38]
	0x03C66210 BL 0x33B162C
	0x03C66214 ADRP X8, 0x48D000
	0x03C66218 LDR X8, [X8 + 0x988]
	0x03C6621C CMP X0, 0x0
	0x03C66220 LDR X8, [X8]
	0x03C66224 CSEL X0, X8, X0, EQ
	0x03C66228 B 0x3C661B8
	0x03C6622C BL 0x1C16F28
	0x03C66230 BL 0x1C16F44
	0x03C66234 MOV X1, X31
	0x03C66238 BL 0x1C16DEC
	0x03C6623C BL 0x1C16F20
	0x03C66240 STR X30, [X31 - 0x30]!
	0x03C66244 STP X22, X21, [X31 + 0x10]
	0x03C66248 STP X20, X19, [X31 + 0x20]
	0x03C6624C ADRP X20, 0x780000
	0x03C66250 LDRB W8, [X20 + 0x515]
	0x03C66254 MOV X19, X0
	0x03C66258 TBNZ X8, 0x0, 0x3C66294
	0x03C6625C ADRP X0, 0x48D000
	0x03C66260 LDR X0, [X0 + 0xA28]
	0x03C66264 BL 0x1C16CF4
	0x03C66268 ADRP X0, 0x4B6000
	0x03C6626C LDR X0, [X0 + 0xE68]
	0x03C66270 BL 0x1C16CF4
	0x03C66274 ADRP X0, 0x48D000
	0x03C66278 LDR X0, [X0 + 0x9D0]
	0x03C6627C BL 0x1C16CF4
	0x03C66280 ADRP X0, 0x4FA000
	0x03C66284 LDR X0, [X0 + 0x230]
	0x03C66288 BL 0x1C16CF4
	0x03C6628C MOVZ W8, 0x1
	0x03C66290 STRB W8, [X20 + 0x515]
	0x03C66294 ADRP X21, 0x780000
	0x03C66298 LDR X8, [X21 + 0x4A8]
	0x03C6629C CBNZ X8, 0x3C662B4
	0x03C662A0 ADRP X0, 0xFFFFFFFFFCE8B000
	0x03C662A4 ADD X0, X0, 0x566
	0x03C662A8 BL 0x1C16CB8
	0x03C662AC MOV X8, X0
	0x03C662B0 STR X0, [X21 + 0x4A8]
	0x03C662B4 MOV X0, X19
	0x03C662B8 BLR X8
	0x03C662BC CMP W0, 0x7
	0x03C662C0 B.EQ 0x3C662F0
	0x03C662C4 LDR X8, [X21 + 0x4A8]
	0x03C662C8 CBNZ X8, 0x3C662E0
	0x03C662CC ADRP X0, 0xFFFFFFFFFCE8B000
	0x03C662D0 ADD X0, X0, 0x566
	0x03C662D4 BL 0x1C16CB8
	0x03C662D8 MOV X8, X0
	0x03C662DC STR X0, [X21 + 0x4A8]
	0x03C662E0 MOV X0, X19
	0x03C662E4 BLR X8
	0x03C662E8 CMP W0, 0x8
	0x03C662EC B.NE 0x3C663B8
	0x03C662F0 ADRP X8, 0x48D000
	0x03C662F4 LDR X8, [X8 + 0x9D0]
	0x03C662F8 ADRP X22, 0x4B6000
	0x03C662FC MOVZ W1, 0x1
	0x03C66300 LDR X0, [X8]
	0x03C66304 LDR X22, [X22 + 0xE68]
	0x03C66308 BL 0x1C16D6C
	0x03C6630C LDR X8, [X21 + 0x4A8]
	0x03C66310 MOV X20, X0
	0x03C66314 CBNZ X8, 0x3C6632C
	0x03C66318 ADRP X0, 0xFFFFFFFFFCE8B000
	0x03C6631C ADD X0, X0, 0x566
	0x03C66320 BL 0x1C16CB8
	0x03C66324 MOV X8, X0
	0x03C66328 STR X0, [X21 + 0x4A8]
	0x03C6632C MOV X0, X19
	0x03C66330 BLR X8
	0x03C66334 LDR X8, [X22]
	0x03C66338 STR W0, [X31 + 0xC]
	0x03C6633C ADD X1, X31, 0xC
	0x03C66340 MOV X0, X8
	0x03C66344 BL 0x1C16E04
	0x03C66348 CBZ X20, 0x3C663F0
	0x03C6634C MOV X21, X0
	0x03C66350 CBZ X0, 0x3C66368
	0x03C66354 LDR X8, [X20]
	0x03C66358 MOV X0, X21
	0x03C6635C LDR X1, [X8 + 0x40]
	0x03C66360 BL 0x1C16E00
	0x03C66364 CBZ X0, 0x3C663F8
	0x03C66368 LDR W8, [X20 + 0x18]
	0x03C6636C CBZ W8, 0x3C663F4
	0x03C66370 ADRP X8, 0x4FA000
	0x03C66374 LDR X8, [X8 + 0x230]
	0x03C66378 STR X21, [X20 + 0x20]
	0x03C6637C ADRP X21, 0x48D000
	0x03C66380 MOV X1, X20
	0x03C66384 LDR X0, [X8]
	0x03C66388 LDR X21, [X21 + 0xA28]
	0x03C6638C MOV X2, X31
	0x03C66390 BL 0x3C96574
	0x03C66394 LDR X8, [X21]
	0x03C66398 MOV X20, X0
	0x03C6639C LDR W9, [X8 + 0xE0]
	0x03C663A0 CBNZ W9, 0x3C663AC
	0x03C663A4 MOV X0, X8
	0x03C663A8 BL 0x1C16DFC
	0x03C663AC MOV X0, X20
	0x03C663B0 MOV X1, X31
	0x03C663B4 BL 0x3C06A04
	0x03C663B8 ADRP X20, 0x780000
	0x03C663BC LDR X8, [X20 + 0x4C8]
	0x03C663C0 CBNZ X8, 0x3C663D8
	0x03C663C4 ADRP X0, 0xFFFFFFFFFCEA3000
	0x03C663C8 ADD X0, X0, 0x909
	0x03C663CC BL 0x1C16CB8
	0x03C663D0 MOV X8, X0
	0x03C663D4 STR X0, [X20 + 0x4C8]
	0x03C663D8 MOV X0, X19
	0x03C663DC BLR X8
	0x03C663E0 LDP X20, X19, [X31 + 0x20]
	0x03C663E4 LDP X22, X21, [X31 + 0x10]
	0x03C663E8 LDR X30, [X31], #0x30
	0x03C663EC RET
	0x03C663F0 BL 0x1C16F20
	0x03C663F4 BL 0x1C16F28
	0x03C663F8 BL 0x1C16F44
	0x03C663FC MOV X1, X31
	0x03C66400 BL 0x1C16DEC
	0x03C66404 LDRB W0, [X0]
	0x03C66408 RET
	0x03C6640C AND W8, W1, 0x1
	0x03C66410 STRB W8, [X0]
	0x03C66414 RET
	0x03C66418 LDRB W0, [X0 + 0x1]
	0x03C6641C RET
	0x03C66420 AND W8, W1, 0x1
	0x03C66424 STRB W8, [X0 + 0x1]
	0x03C66428 RET
	0x03C6642C LDRB W0, [X0 + 0x2]
	0x03C66430 RET
	0x03C66434 CMP W1, 0x2
	0x03C66438 B.EQ 0x3C6644C
	0x03C6643C AND W8, W1, 0xFFFFFFFE
	0x03C66440 CMP W8, 0x14
	0x03C66444 B.NE 0x3C6645C
	0x03C66448 ADD X0, X0, 0x1
	0x03C6644C LDRB W8, [X0]
	0x03C66450 CMP W8, 0x0
	0x03C66454 CSET W0, NE
	0x03C66458 RET
	0x03C6645C MOVZ W0, 0x1
	0x03C66460 RET
	0x03C66464 STP X30, X21, [X31 - 0x20]!
	0x03C66468 STP X20, X19, [X31 + 0x10]
	0x03C6646C ADRP X21, 0x780000
	0x03C66470 LDRB W8, [X21 + 0x540]
	0x03C66474 MOV W20, W1
	0x03C66478 MOV X19, X0
	0x03C6647C TBNZ X8, 0x0, 0x3C66494
	0x03C66480 ADRP X0, 0x4B9000
	0x03C66484 LDR X0, [X0 + 0x5C8]
	0x03C66488 BL 0x1C16CF4
	0x03C6648C MOVZ W8, 0x1
	0x03C66490 STRB W8, [X21 + 0x540]
	0x03C66494 LDRB W8, [X19 + 0x2]
	0x03C66498 CBZ W8, 0x3C664CC
	0x03C6649C CMP W20, 0xE
	0x03C664A0 B.HI 0x3C6652C
	0x03C664A4 ADRP X9, 0xFFFFFFFFFCF31000
	0x03C664A8 MOV W8, W20
	0x03C664AC ADD X9, X9, 0xE23
	0x03C664B0 ADR X10, 0x14
	0x03C664B4 LDRB W11, [X9, X8, LSL]
	0x03C664B8 ADD X10, X10, X11, 0x2, LSL
	0x03C664BC MOVZ W0, 0x1
	0x03C664C0 BR X10
	0x03C664C4 MOV W0, W31
	0x03C664C8 B 0x3C664E0
	0x03C664CC MOVZ W0, 0x1
	0x03C664D0 B 0x3C664E0
	0x03C664D4 LDRB W8, [X19]
	0x03C664D8 CMP W8, 0x0
	0x03C664DC CSET W0, NE
	0x03C664E0 LDP X20, X19, [X31 + 0x10]
	0x03C664E4 LDP X30, X21, [X31], #0x20
	0x03C664E8 RET
	0x03C664EC ADRP X8, 0x4B9000
	0x03C664F0 LDR X8, [X8 + 0x5C8]
	0x03C664F4 LDR X0, [X8]
	0x03C664F8 LDR W8, [X0 + 0xE0]
	0x03C664FC CBNZ W8, 0x3C66504
	0x03C66500 BL 0x1C16DFC
	0x03C66504 ADRP X19, 0x780000
	0x03C66508 LDR X0, [X19 + 0x880]
	0x03C6650C CBNZ X0, 0x3C66520
	0x03C66510 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C66514 ADD X0, X0, 0x776
	0x03C66518 BL 0x1C16CB8
	0x03C6651C STR X0, [X19 + 0x880]
	0x03C66520 LDP X20, X19, [X31 + 0x10]
	0x03C66524 LDP X30, X21, [X31], #0x20
	0x03C66528 BR X0
	0x03C6652C AND W8, W20, 0xFFFFFFFE
	0x03C66530 CMP W8, 0x14
	0x03C66534 B.NE 0x3C664C4
	0x03C66538 LDRB W8, [X19 + 0x1]
	0x03C6653C B 0x3C664D8
	0x03C66540 STP X30, X19, [X31 - 0x10]!
	0x03C66544 ADRP X19, 0x780000
	0x03C66548 LDR X0, [X19 + 0x880]
	0x03C6654C CBNZ X0, 0x3C66560
	0x03C66550 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C66554 ADD X0, X0, 0x776
	0x03C66558 BL 0x1C16CB8
	0x03C6655C STR X0, [X19 + 0x880]
	0x03C66560 LDP X30, X19, [X31], #0x10
	0x03C66564 BR X0
	0x03C66568 SUB X31, X31, 0x30
	0x03C6656C STR X30, [X31 + 0x10]
	0x03C66570 STP X20, X19, [X31 + 0x20]
	0x03C66574 ADRP X20, 0x780000
	0x03C66578 ADRP X19, 0x4B4000
	0x03C6657C LDRB W8, [X20 + 0x541]
	0x03C66580 LDR X19, [X19 + 0x4C0]
	0x03C66584 TBNZ X8, 0x0, 0x3C6659C
	0x03C66588 ADRP X0, 0x4B4000
	0x03C6658C LDR X0, [X0 + 0x4C0]
	0x03C66590 BL 0x1C16CF4
	0x03C66594 MOVZ W8, 0x1
	0x03C66598 STRB W8, [X20 + 0x541]
	0x03C6659C LDR X0, [X19]
	0x03C665A0 STP X31, X31, [X31]
	0x03C665A4 LDR W8, [X0 + 0xE0]
	0x03C665A8 CBNZ W8, 0x3C665B0
	0x03C665AC BL 0x1C16DFC
	0x03C665B0 ADRP X19, 0x780000
	0x03C665B4 LDR X8, [X19 + 0x5E0]
	0x03C665B8 CBNZ X8, 0x3C665D0
	0x03C665BC ADRP X0, 0xFFFFFFFFFCEB5000
	0x03C665C0 ADD X0, X0, 0x2C6
	0x03C665C4 BL 0x1C16CB8
	0x03C665C8 MOV X8, X0
	0x03C665CC STR X0, [X19 + 0x5E0]
	0x03C665D0 ADD X0, X31, 0x0
	0x03C665D4 BLR X8
	0x03C665D8 LDP S0, S1, [X31]
	0x03C665DC LDP S2, S3, [X31 + 0x8]
	0x03C665E0 LDP X20, X19, [X31 + 0x20]
	0x03C665E4 LDR X30, [X31 + 0x10]
	0x03C665E8 ADD X31, X31, 0x30
	0x03C665EC RET
	0x03C665F0 STR X30, [X31 - 0x20]!
	0x03C665F4 STP X20, X19, [X31 + 0x10]
	0x03C665F8 ADRP X20, 0x780000
	0x03C665FC LDR X1, [X20 + 0x5E0]
	0x03C66600 MOV X19, X0
	0x03C66604 CBNZ X1, 0x3C6661C
	0x03C66608 ADRP X0, 0xFFFFFFFFFCEB5000
	0x03C6660C ADD X0, X0, 0x2C6
	0x03C66610 BL 0x1C16CB8
	0x03C66614 MOV X1, X0
	0x03C66618 STR X0, [X20 + 0x5E0]
	0x03C6661C MOV X0, X19
	0x03C66620 LDP X20, X19, [X31 + 0x10]
	0x03C66624 LDR X30, [X31], #0x20
	0x03C66628 BR X1
	0x03C6662C SUB X31, X31, 0x30
	0x03C66630 STR X30, [X31 + 0x10]
	0x03C66634 STP X20, X19, [X31 + 0x20]
	0x03C66638 ADRP X19, 0x780000
	0x03C6663C STP S0, S1, [X31]
	0x03C66640 STP S2, S3, [X31 + 0x8]
	0x03C66644 ADRP X20, 0x4B4000
	0x03C66648 LDRB W8, [X19 + 0x542]
	0x03C6664C LDR X20, [X20 + 0x4C0]
	0x03C66650 TBNZ X8, 0x0, 0x3C66668
	0x03C66654 ADRP X0, 0x4B4000
	0x03C66658 LDR X0, [X0 + 0x4C0]
	0x03C6665C BL 0x1C16CF4
	0x03C66660 MOVZ W8, 0x1
	0x03C66664 STRB W8, [X19 + 0x542]
	0x03C66668 LDR X0, [X20]
	0x03C6666C LDR W8, [X0 + 0xE0]
	0x03C66670 CBNZ W8, 0x3C66678
	0x03C66674 BL 0x1C16DFC
	0x03C66678 ADRP X19, 0x780000
	0x03C6667C LDR X8, [X19 + 0x5E8]
	0x03C66680 CBNZ X8, 0x3C66698
	0x03C66684 ADRP X0, 0xFFFFFFFFFCE99000
	0x03C66688 ADD X0, X0, 0x80D
	0x03C6668C BL 0x1C16CB8
	0x03C66690 MOV X8, X0
	0x03C66694 STR X0, [X19 + 0x5E8]
	0x03C66698 ADD X0, X31, 0x0
	0x03C6669C BLR X8
	0x03C666A0 LDP X20, X19, [X31 + 0x20]
	0x03C666A4 LDR X30, [X31 + 0x10]
	0x03C666A8 ADD X31, X31, 0x30
	0x03C666AC RET
	0x03C666B0 STR X30, [X31 - 0x20]!
	0x03C666B4 STP X20, X19, [X31 + 0x10]
	0x03C666B8 ADRP X20, 0x780000
	0x03C666BC LDR X1, [X20 + 0x5E8]
	0x03C666C0 MOV X19, X0
	0x03C666C4 CBNZ X1, 0x3C666DC
	0x03C666C8 ADRP X0, 0xFFFFFFFFFCE99000
	0x03C666CC ADD X0, X0, 0x80D
	0x03C666D0 BL 0x1C16CB8
	0x03C666D4 MOV X1, X0
	0x03C666D8 STR X0, [X20 + 0x5E8]
	0x03C666DC MOV X0, X19
	0x03C666E0 LDP X20, X19, [X31 + 0x10]
	0x03C666E4 LDR X30, [X31], #0x20
	0x03C666E8 BR X1
	0x03C666EC SUB X31, X31, 0x30
	0x03C666F0 STR X30, [X31 + 0x10]
	0x03C666F4 STP X20, X19, [X31 + 0x20]
	0x03C666F8 ADRP X20, 0x780000
	0x03C666FC ADRP X19, 0x4B4000
	0x03C66700 LDRB W8, [X20 + 0x543]
	0x03C66704 LDR X19, [X19 + 0x4C0]
	0x03C66708 TBNZ X8, 0x0, 0x3C66720
	0x03C6670C ADRP X0, 0x4B4000
	0x03C66710 LDR X0, [X0 + 0x4C0]
	0x03C66714 BL 0x1C16CF4
	0x03C66718 MOVZ W8, 0x1
	0x03C6671C STRB W8, [X20 + 0x543]

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0x783000
	011 Move X21, 0x4F6000
	012 Move W8, [X19+1298]
	013 Move X21, [X21+32]
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {183}
	019 Move X0, 0x490000
	020 Move X0, [X0+3576]
	021 Call 0x1C17CF4
	022 Move X0, 0x4F6000
	023 Move X0, [X0+32]
	024 Call 0x1C17CF4
	025 Move X0, 0x4FD000
	026 Move X0, [X0+272]
	027 Call 0x1C17CF4
	028 Move X0, 0x4FD000
	029 Move X0, [X0+280]
	030 Call 0x1C17CF4
	031 Move X0, 0x490000
	032 Move X0, [X0+1728]
	033 Call 0x1C17CF4
	034 Move X0, 0x4FD000
	035 Move X0, [X0+288]
	036 Call 0x1C17CF4
	037 Move X0, 0x4FD000
	038 Move X0, [X0+296]
	039 Call 0x1C17CF4
	040 Move X0, 0x4E4000
	041 Move X0, [X0+232]
	042 Call 0x1C17CF4
	043 Move X0, 0x4E4000
	044 Move X0, [X0+248]
	045 Call 0x1C17CF4
	046 Move X0, 0x4E1000
	047 Move X0, [X0+3736]
	048 Call 0x1C17CF4
	049 Move X0, 0x4FD000
	050 Move X0, [X0+304]
	051 Call 0x1C17CF4
	052 Move X0, 0x4FD000
	053 Move X0, [X0+312]
	054 Call 0x1C17CF4
	055 Move X0, 0x4E2000
	056 Move X0, [X0+4008]
	057 Call 0x1C17CF4
	058 Move X0, 0x4E4000
	059 Move X0, [X0+312]
	060 Call 0x1C17CF4
	061 Move X0, 0x4C1000
	062 Move X0, [X0+1872]
	063 Call 0x1C17CF4
	064 Move X0, 0x4FD000
	065 Move X0, [X0+320]
	066 Call 0x1C17CF4
	067 Move X0, 0x4FD000
	068 Move X0, [X0+328]
	069 Call 0x1C17CF4
	070 Move X0, 0x4FD000
	071 Move X0, [X0+336]
	072 Call 0x1C17CF4
	073 Move X0, 0x4E4000
	074 Move X0, [X0+384]
	075 Call 0x1C17CF4
	076 Move X0, 0x4FD000
	077 Move X0, [X0+344]
	078 Call 0x1C17CF4
	079 Move X0, 0x4E2000
	080 Move X0, [X0+4016]
	081 Call 0x1C17CF4
	082 Move X0, 0x4E4000
	083 Move X0, [X0+440]
	084 Call 0x1C17CF4
	085 Move X0, 0x4E4000
	086 Move X0, [X0+456]
	087 Call 0x1C17CF4
	088 Move X0, 0x4FD000
	089 Move X0, [X0+352]
	090 Call 0x1C17CF4
	091 Move X0, 0x4FD000
	092 Move X0, [X0+360]
	093 Call 0x1C17CF4
	094 Move X0, 0x4FD000
	095 Move X0, [X0+368]
	096 Call 0x1C17CF4
	097 Move X0, 0x4E4000
	098 Move X0, [X0+544]
	099 Call 0x1C17CF4
	100 Move X0, 0x4FD000
	101 Move X0, [X0+376]
	102 Call 0x1C17CF4
	103 Move X0, 0x4C9000
	104 Move X0, [X0+2872]
	105 Call 0x1C17CF4
	106 Move X0, 0x4E4000
	107 Move X0, [X0+600]
	108 Call 0x1C17CF4
	109 Move X0, 0x4FD000
	110 Move X0, [X0+384]
	111 Call 0x1C17CF4
	112 Move X0, 0x4FD000
	113 Move X0, [X0+392]
	114 Call 0x1C17CF4
	115 Move X0, 0x4E4000
	116 Move X0, [X0+640]
	117 Call 0x1C17CF4
	118 Move X0, 0x4E4000
	119 Move X0, [X0+648]
	120 Call 0x1C17CF4
	121 Move X0, 0x4E4000
	122 Move X0, [X0+656]
	123 Call 0x1C17CF4
	124 Move X0, 0x4E4000
	125 Move X0, [X0+664]
	126 Call 0x1C17CF4
	127 Move X0, 0x4FD000
	128 Move X0, [X0+400]
	129 Call 0x1C17CF4
	130 Move X0, 0x4FD000
	131 Move X0, [X0+408]
	132 Call 0x1C17CF4
	133 Move X0, 0x4FD000
	134 Move X0, [X0+416]
	135 Call 0x1C17CF4
	136 Move X0, 0x4D4000
	137 Move X0, [X0+1888]
	138 Call 0x1C17CF4
	139 Move X0, 0x4E4000
	140 Move X0, [X0+744]
	141 Call 0x1C17CF4
	142 Move X0, 0x4E4000
	143 Move X0, [X0+792]
	144 Call 0x1C17CF4
	145 Move X0, 0x4FD000
	146 Move X0, [X0+424]
	147 Call 0x1C17CF4
	148 Move X0, 0x4FD000
	149 Move X0, [X0+432]
	150 Call 0x1C17CF4
	151 Move X0, 0x4E4000
	152 Move X0, [X0+840]
	153 Call 0x1C17CF4
	154 Move X0, 0x4FD000
	155 Move X0, [X0+440]
	156 Call 0x1C17CF4
	157 Move X0, 0x4FD000
	158 Move X0, [X0+448]
	159 Call 0x1C17CF4
	160 Move X0, 0x4FD000
	161 Move X0, [X0+456]
	162 Call 0x1C17CF4
	163 Move X0, 0x4E4000
	164 Move X0, [X0+856]
	165 Call 0x1C17CF4
	166 Move X0, 0x4E4000
	167 Move X0, [X0+864]
	168 Call 0x1C17CF4
	169 Move X0, 0x4FD000
	170 Move X0, [X0+464]
	171 Call 0x1C17CF4
	172 Move X0, 0x4E4000
	173 Move X0, [X0+872]
	174 Call 0x1C17CF4
	175 Move X0, 0x4FD000
	176 Move X0, [X0+472]
	177 Call 0x1C17CF4
	178 Move X0, 0x4FD000
	179 Move X0, [X0+480]
	180 Call 0x1C17CF4
	181 Move W8, 1
	182 Move [X19+1298], W8
	183 Move X0, [X21]
	184 Call 0x1C17F10
	185 Move W1, W31
	186 Move X19, X0
	187 Call Event..ctor, X0, X1
	188 Compare X19, 0
	189 JumpIfEqual {1885}
	190 Move X21, 0x783000
	191 Move X8, [X21+1200]
	192 Compare X8, 0
	193 JumpIfNotEqual {199}
	194 Move X0, -51666944
	195 Add X0, X0, 1484
	196 Call 0x1C17CB8
	197 Move X8, X0
	198 Move [X21+1200], X0
	199 Move W1, 4
	200 Move X0, X19
	201 NotImplemented "Instruction BLR not yet implemented."
	202 Move X0, X20
	203 Move X1, X31
	204 Call String.IsNullOrEmpty, X0
	205 Move TEMP, X0
	206 And TEMP, TEMP, 1
	207 Compare TEMP, 1
	208 JumpIfEqual {1821}
	209 Compare X20, 0
	210 JumpIfEqual {1885}
	211 Move W8, [X20+16]
	212 NotImplemented "Instruction CMP not yet implemented."
	213 Move X22, -51781632
	214 Move X23, -51724288
	215 Move W21, W31
	216 Move X25, 0x783000
	217 Add X22, X22, 1328
	218 Move X26, 0x783000
	219 Add X23, X23, 2317
	220 Move X0, X20
	221 Move W1, W21
	222 Move X2, X31
	223 Call String.get_Chars, X0, X1
	224 And W8, W0, 0xFFFF
	225 NotImplemented "Instruction CMP not yet implemented."
	226 NotImplemented "Instruction CMP not yet implemented."
	227 NotImplemented "Instruction CMP not yet implemented."
	228 Move X8, [X25+1096]
	229 Compare X8, 0
	230 JumpIfNotEqual {235}
	231 Move X0, X22
	232 Call 0x1C17CB8
	233 Move X8, X0
	234 Move [X25+1096], X0
	235 Move X0, X19
	236 NotImplemented "Instruction BLR not yet implemented."
	237 Move X8, [X26+1104]
	238 Move W24, W0
	239 Compare X8, 0
	240 JumpIfNotEqual {245}
	241 Move X0, X23
	242 Call 0x1C17CB8
	243 Move X8, X0
	244 Move [X26+1104], X0
	245 Or W1, W24, 8
	246 NotImplemented "Instruction CMP not yet implemented."
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Move X8, [X25+1096]
	249 Compare X8, 0
	250 JumpIfNotEqual {255}
	251 Move X0, X22
	252 Call 0x1C17CB8
	253 Move X8, X0
	254 Move [X25+1096], X0
	255 Move X0, X19
	256 NotImplemented "Instruction BLR not yet implemented."
	257 Move X8, [X26+1104]
	258 Move W24, W0
	259 Compare X8, 0
	260 JumpIfNotEqual {265}
	261 Move X0, X23
	262 Call 0x1C17CB8
	263 Move X8, X0
	264 Move [X26+1104], X0
	265 Or W1, W24, 2
	266 Move X8, [X25+1096]
	267 Compare X8, 0
	268 JumpIfNotEqual {273}
	269 Move X0, X22
	270 Call 0x1C17CB8
	271 Move X8, X0
	272 Move [X25+1096], X0
	273 Move X0, X19
	274 NotImplemented "Instruction BLR not yet implemented."
	275 Move X8, [X26+1104]
	276 Move W24, W0
	277 Compare X8, 0
	278 JumpIfNotEqual {283}
	279 Move X0, X23
	280 Call 0x1C17CB8
	281 Move X8, X0
	282 Move [X26+1104], X0
	283 Or W1, W24, 1
	284 Move X8, [X25+1096]
	285 Compare X8, 0
	286 JumpIfNotEqual {291}
	287 Move X0, X22
	288 Call 0x1C17CB8
	289 Move X8, X0
	290 Move [X25+1096], X0
	291 Move X0, X19
	292 NotImplemented "Instruction BLR not yet implemented."
	293 Move X8, [X26+1104]
	294 Move W24, W0
	295 Compare X8, 0
	296 JumpIfNotEqual {301}
	297 Move X0, X23
	298 Call 0x1C17CB8
	299 Move X8, X0
	300 Move [X26+1104], X0
	301 Or W1, W24, 4
	302 Move X0, X19
	303 NotImplemented "Instruction BLR not yet implemented."
	304 Move W8, [X20+16]
	305 Add W21, W21, 1
	306 NotImplemented "Instruction CMP not yet implemented."
	307 Move W21, W31
	308 Move W8, [X20+16]
	309 Subtract W2, W8, W21
	310 Move X0, X20
	311 Move W1, W21
	312 Move X3, X31
	313 Call String.Substring, X0, X1, X2
	314 Compare X0, 0
	315 JumpIfEqual {1885}
	316 Move X1, X31
	317 Call String.ToLowerInvariant, X0
	318 Move X1, X31
	319 Move X20, X0
	320 Call <PrivateImplementationDetails>.ComputeStringHash, X0
	321 Move W8, 0xD23A
	322 NotImplemented "Instruction MOVK not yet implemented."
	323 NotImplemented "Instruction CMP not yet implemented."
	324 Move W8, 0xB915
	325 NotImplemented "Instruction MOVK not yet implemented."
	326 NotImplemented "Instruction CMP not yet implemented."
	327 Move W8, 0x7231
	328 NotImplemented "Instruction MOVK not yet implemented."
	329 NotImplemented "Instruction CMP not yet implemented."
	330 Move W8, 0xEC70
	331 NotImplemented "Instruction MOVK not yet implemented."
	332 NotImplemented "Instruction CMP not yet implemented."
	333 Move W8, 0x60E0
	334 NotImplemented "Instruction MOVK not yet implemented."
	335 NotImplemented "Instruction CMP not yet implemented."
	336 Move W8, 0x6273
	337 NotImplemented "Instruction MOVK not yet implemented."
	338 NotImplemented "Instruction CMP not yet implemented."
	339 Move W8, 0xEC70
	340 NotImplemented "Instruction MOVK not yet implemented."
	341 NotImplemented "Instruction CMP not yet implemented."
	342 Move X8, 0x4C8000
	343 Move X8, [X8+2872]
	344 Move X0, X20
	345 Move X2, X31
	346 Move X1, [X8]
	347 Call String.op_Equality, X0, X1
	348 Move TEMP, X0
	349 And TEMP, TEMP, 1
	350 Compare TEMP, 1
	351 JumpIfNotEqual {1699}
	352 Move X20, 0x782000
	353 Move X8, [X20+1168]
	354 Compare X8, 0
	355 JumpIfNotEqual {361}
	356 Move X0, -51695616
	357 Add X0, X0, 53
	358 Call 0x1C17CB8
	359 Move X8, X0
	360 Move [X20+1168], X0
	361 Move W1, 276
	362 Move W8, 0xEDD9
	363 NotImplemented "Instruction MOVK not yet implemented."
	364 NotImplemented "Instruction CMP not yet implemented."
	365 Move W8, 0x9E6C
	366 NotImplemented "Instruction MOVK not yet implemented."
	367 NotImplemented "Instruction CMP not yet implemented."
	368 Move W8, 0x682C
	369 NotImplemented "Instruction MOVK not yet implemented."
	370 NotImplemented "Instruction CMP not yet implemented."
	371 Move W8, 0x5F96
	372 NotImplemented "Instruction MOVK not yet implemented."
	373 NotImplemented "Instruction CMP not yet implemented."
	374 Move W8, 0x713A
	375 NotImplemented "Instruction MOVK not yet implemented."
	376 NotImplemented "Instruction CMP not yet implemented."
	377 Move X8, 0x4FC000
	378 Move X8, [X8+384]
	379 Move W8, 0xC708
	380 NotImplemented "Instruction MOVK not yet implemented."
	381 NotImplemented "Instruction CMP not yet implemented."
	382 Move W8, 0xB59F
	383 NotImplemented "Instruction MOVK not yet implemented."
	384 NotImplemented "Instruction CMP not yet implemented."
	385 Move W8, 0xD54E
	386 NotImplemented "Instruction MOVK not yet implemented."
	387 NotImplemented "Instruction CMP not yet implemented."
	388 Move W8, 2848
	389 NotImplemented "Instruction MOVK not yet implemented."
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move W8, 0xB59F
	392 NotImplemented "Instruction MOVK not yet implemented."
	393 NotImplemented "Instruction CMP not yet implemented."
	394 Move X8, 0x4FC000
	395 Move X8, [X8+432]
	396 Move W8, 2136
	397 NotImplemented "Instruction MOVK not yet implemented."
	398 NotImplemented "Instruction CMP not yet implemented."
	399 Move W8, 0xC28E
	400 NotImplemented "Instruction MOVK not yet implemented."
	401 NotImplemented "Instruction CMP not yet implemented."
	402 Move W8, 0xA99E
	403 NotImplemented "Instruction MOVK not yet implemented."
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Move W8, 0x9628
	406 NotImplemented "Instruction MOVK not yet implemented."
	407 NotImplemented "Instruction CMP not yet implemented."
	408 Move W8, 0xC28E
	409 NotImplemented "Instruction MOVK not yet implemented."
	410 NotImplemented "Instruction CMP not yet implemented."
	411 Move X8, 0x4E0000
	412 Move X8, [X8+3736]
	413 Move X0, X20
	414 Move X2, X31
	415 Move X1, [X8]
	416 Call String.op_Equality, X0, X1
	417 Move TEMP, X0
	418 And TEMP, TEMP, 1
	419 Compare TEMP, 1
	420 JumpIfNotEqual {1699}
	421 Move X20, 0x782000
	422 Move X8, [X20+1168]
	423 Compare X8, 0
	424 JumpIfNotEqual {430}
	425 Move X0, -51695616
	426 Add X0, X0, 53
	427 Call 0x1C17CB8
	428 Move X8, X0
	429 Move [X20+1168], X0
	430 Move W1, 278
	431 Move W8, 0x76EA
	432 NotImplemented "Instruction MOVK not yet implemented."
	433 NotImplemented "Instruction CMP not yet implemented."
	434 Move W8, 0x73C4
	435 NotImplemented "Instruction MOVK not yet implemented."
	436 NotImplemented "Instruction CMP not yet implemented."
	437 Move W8, 0x7557
	438 NotImplemented "Instruction MOVK not yet implemented."
	439 NotImplemented "Instruction CMP not yet implemented."
	440 Move W8, 0x76EA
	441 NotImplemented "Instruction MOVK not yet implemented."
	442 NotImplemented "Instruction CMP not yet implemented."
	443 Move X8, 0x4E3000
	444 Move X8, [X8+656]
	445 Move X0, X20
	446 Move X2, X31
	447 Move X1, [X8]
	448 Call String.op_Equality, X0, X1
	449 Move TEMP, X0
	450 And TEMP, TEMP, 1
	451 Compare TEMP, 1
	452 JumpIfNotEqual {1699}
	453 Move X20, 0x782000
	454 Move X8, [X20+1168]
	455 Compare X8, 0
	456 JumpIfNotEqual {462}
	457 Move X0, -51695616
	458 Add X0, X0, 53
	459 Call 0x1C17CB8
	460 Move X8, X0
	461 Move [X20+1168], X0
	462 Move W1, 288
	463 Move W8, 0x3B38
	464 NotImplemented "Instruction MOVK not yet implemented."
	465 NotImplemented "Instruction CMP not yet implemented."
	466 Move W8, 0x64BB
	467 NotImplemented "Instruction MOVK not yet implemented."
	468 NotImplemented "Instruction CMP not yet implemented."
	469 Move W8, 0xEC73
	470 NotImplemented "Instruction MOVK not yet implemented."
	471 NotImplemented "Instruction CMP not yet implemented."
	472 Move W8, 0x3B38
	473 NotImplemented "Instruction MOVK not yet implemented."
	474 NotImplemented "Instruction CMP not yet implemented."
	475 Move X8, 0x4FC000
	476 Move X8, [X8+312]
	477 Move X0, X20
	478 Move X2, X31
	479 Move X1, [X8]
	480 Call String.op_Equality, X0, X1
	481 Move TEMP, X0
	482 And TEMP, TEMP, 1
	483 Compare TEMP, 1
	484 JumpIfNotEqual {1699}
	485 Move X20, 0x782000
	486 Move X8, [X20+1152]
	487 Compare X8, 0
	488 JumpIfNotEqual {494}
	489 Move X0, -51843072
	490 Add X0, X0, 2209
	491 Call 0x1C17CB8
	492 Move X8, X0
	493 Move [X20+1152], X0
	494 Move W1, 45
	495 Move X0, X19
	496 NotImplemented "Instruction BLR not yet implemented."
	497 Move X20, 0x782000
	498 Move X8, [X20+1168]
	499 Compare X8, 0
	500 JumpIfNotEqual {506}
	501 Move X0, -51695616
	502 Add X0, X0, 53
	503 Call 0x1C17CB8
	504 Move X8, X0
	505 Move [X20+1168], X0
	506 Move W1, 269
	507 Move W8, 0x4EC0
	508 NotImplemented "Instruction MOVK not yet implemented."
	509 NotImplemented "Instruction CMP not yet implemented."
	510 Move W8, 1439
	511 NotImplemented "Instruction MOVK not yet implemented."
	512 NotImplemented "Instruction CMP not yet implemented."
	513 Move W8, 0xC164
	514 NotImplemented "Instruction MOVK not yet implemented."
	515 NotImplemented "Instruction CMP not yet implemented."
	516 Move W8, 0x4EC0
	517 NotImplemented "Instruction MOVK not yet implemented."
	518 NotImplemented "Instruction CMP not yet implemented."
	519 Move X8, 0x4FC000
	520 Move X8, [X8+288]
	521 Move X0, X20
	522 Move X2, X31
	523 Move X1, [X8]
	524 Call String.op_Equality, X0, X1
	525 Move TEMP, X0
	526 And TEMP, TEMP, 1
	527 Compare TEMP, 1
	528 JumpIfNotEqual {1699}
	529 Move X20, 0x782000
	530 Move X8, [X20+1152]
	531 Compare X8, 0
	532 JumpIfNotEqual {538}
	533 Move X0, -51843072
	534 Add X0, X0, 2209
	535 Call 0x1C17CB8
	536 Move X8, X0
	537 Move [X20+1152], X0
	538 Move W1, 53
	539 Move X0, X19
	540 NotImplemented "Instruction BLR not yet implemented."
	541 Move X20, 0x782000
	542 Move X8, [X20+1168]
	543 Compare X8, 0
	544 JumpIfNotEqual {550}
	545 Move X0, -51695616
	546 Add X0, X0, 53
	547 Call 0x1C17CB8
	548 Move X8, X0
	549 Move [X20+1168], X0
	550 Move W1, 261
	551 Move W8, 0xA203
	552 NotImplemented "Instruction MOVK not yet implemented."
	553 NotImplemented "Instruction CMP not yet implemented."
	554 Move W8, 0x8004
	555 NotImplemented "Instruction MOVK not yet implemented."
	556 NotImplemented "Instruction CMP not yet implemented."
	557 Move W8, 2539
	558 NotImplemented "Instruction MOVK not yet implemented."
	559 NotImplemented "Instruction CMP not yet implemented."
	560 Move W8, 0xA203
	561 NotImplemented "Instruction MOVK not yet implemented."
	562 NotImplemented "Instruction CMP not yet implemented."
	563 Move X8, 0x4FC000
	564 Move X8, [X8+328]
	565 Move X0, X20
	566 Move X2, X31
	567 Move X1, [X8]
	568 Call String.op_Equality, X0, X1
	569 Move TEMP, X0
	570 And TEMP, TEMP, 1
	571 Compare TEMP, 1
	572 JumpIfNotEqual {1699}
	573 Move X20, 0x782000
	574 Move X8, [X20+1152]
	575 Compare X8, 0
	576 JumpIfNotEqual {582}
	577 Move X0, -51843072
	578 Add X0, X0, 2209
	579 Call 0x1C17CB8
	580 Move X8, X0
	581 Move [X20+1152], X0
	582 Move W1, 10
	583 Move X0, X19
	584 NotImplemented "Instruction BLR not yet implemented."
	585 Move X20, 0x782000
	586 Move X8, [X20+1168]
	587 Compare X8, 0
	588 JumpIfNotEqual {594}
	589 Move X0, -51695616
	590 Add X0, X0, 53
	591 Call 0x1C17CB8
	592 Move X8, X0
	593 Move [X20+1168], X0
	594 Move W1, 271
	595 Move W8, 0x6D78
	596 NotImplemented "Instruction MOVK not yet implemented."
	597 NotImplemented "Instruction CMP not yet implemented."
	598 Move W8, 0x709E
	599 NotImplemented "Instruction MOVK not yet implemented."
	600 NotImplemented "Instruction CMP not yet implemented."
	601 Move W8, 0x7231
	602 NotImplemented "Instruction MOVK not yet implemented."
	603 NotImplemented "Instruction CMP not yet implemented."
	604 Move X8, 0x4E3000
	605 Move X8, [X8+384]
	606 Move X0, X20
	607 Move X2, X31
	608 Move X1, [X8]
	609 Call String.op_Equality, X0, X1
	610 Move TEMP, X0
	611 And TEMP, TEMP, 1
	612 Compare TEMP, 1
	613 JumpIfNotEqual {1699}
	614 Move X20, 0x782000
	615 Move X8, [X20+1168]
	616 Compare X8, 0
	617 JumpIfNotEqual {623}
	618 Move X0, -51695616
	619 Add X0, X0, 53
	620 Call 0x1C17CB8
	621 Move X8, X0
	622 Move [X20+1168], X0
	623 Move W1, 283
	624 Move W8, 0x37BF
	625 NotImplemented "Instruction MOVK not yet implemented."
	626 NotImplemented "Instruction CMP not yet implemented."
	627 Move W8, 0x2E4C
	628 NotImplemented "Instruction MOVK not yet implemented."
	629 NotImplemented "Instruction CMP not yet implemented."
	630 Move W8, 0x9E6C
	631 NotImplemented "Instruction MOVK not yet implemented."
	632 NotImplemented "Instruction CMP not yet implemented."
	633 Move X8, 0x4FC000
	634 Move X8, [X8+400]
	635 Move X0, X20
	636 Move X2, X31
	637 Move X1, [X8]
	638 Call String.op_Equality, X0, X1
	639 Move TEMP, X0
	640 And TEMP, TEMP, 1
	641 Compare TEMP, 1
	642 JumpIfNotEqual {1699}
	643 Move X20, 0x782000
	644 Move X8, [X20+1152]
	645 Compare X8, 0
	646 JumpIfNotEqual {652}
	647 Move X0, -51843072
	648 Add X0, X0, 2209
	649 Call 0x1C17CB8
	650 Move X8, X0
	651 Move [X20+1152], X0
	652 Move W1, 57
	653 Move X0, X19
	654 NotImplemented "Instruction BLR not yet implemented."
	655 Move X20, 0x782000
	656 Move X8, [X20+1168]
	657 Compare X8, 0
	658 JumpIfNotEqual {664}
	659 Move X0, -51695616
	660 Add X0, X0, 53
	661 Call 0x1C17CB8
	662 Move X8, X0
	663 Move [X20+1168], X0
	664 Move W1, 265
	665 Move W8, 0x444A
	666 NotImplemented "Instruction MOVK not yet implemented."
	667 NotImplemented "Instruction CMP not yet implemented."
	668 Move W8, 0x75AA
	669 NotImplemented "Instruction MOVK not yet implemented."
	670 NotImplemented "Instruction CMP not yet implemented."
	671 Move W8, 0xC708
	672 NotImplemented "Instruction MOVK not yet implemented."
	673 NotImplemented "Instruction CMP not yet implemented."
	674 Move X8, 0x4FC000
	675 Move X8, [X8+360]
	676 Move W8, 933
	677 NotImplemented "Instruction MOVK not yet implemented."
	678 NotImplemented "Instruction CMP not yet implemented."
	679 Move W8, 0x9F12
	680 NotImplemented "Instruction MOVK not yet implemented."
	681 NotImplemented "Instruction CMP not yet implemented."
	682 Move W8, 2136
	683 NotImplemented "Instruction MOVK not yet implemented."
	684 NotImplemented "Instruction CMP not yet implemented."
	685 Move X8, 0x4E3000
	686 Move X8, [X8+640]
	687 Move X0, X20
	688 Move X2, X31
	689 Move X1, [X8]
	690 Call String.op_Equality, X0, X1
	691 Move TEMP, X0
	692 And TEMP, TEMP, 1
	693 Compare TEMP, 1
	694 JumpIfNotEqual {1699}
	695 Move X20, 0x782000
	696 Move X8, [X20+1168]
	697 Compare X8, 0
	698 JumpIfNotEqual {704}
	699 Move X0, -51695616
	700 Add X0, X0, 53
	701 Call 0x1C17CB8
	702 Move X8, X0
	703 Move [X20+1168], X0
	704 Move W1, 291
	705 Move W8, 0x787D
	706 NotImplemented "Instruction MOVK not yet implemented."
	707 NotImplemented "Instruction CMP not yet implemented."
	708 Move W8, 0xE285
	709 NotImplemented "Instruction MOVK not yet implemented."
	710 NotImplemented "Instruction CMP not yet implemented."
	711 Move W8, 0xB915
	712 NotImplemented "Instruction MOVK not yet implemented."
	713 NotImplemented "Instruction CMP not yet implemented."
	714 Move X8, 0x4E1000
	715 Move X8, [X8+4016]
	716 Move X0, X20
	717 Move X2, X31
	718 Move X1, [X8]
	719 Call String.op_Equality, X0, X1
	720 Move TEMP, X0
	721 And TEMP, TEMP, 1
	722 Compare TEMP, 1
	723 JumpIfNotEqual {1699}
	724 Move X20, 0x782000
	725 Move X8, [X20+1168]
	726 Compare X8, 0
	727 JumpIfNotEqual {733}
	728 Move X0, -51695616
	729 Add X0, X0, 53
	730 Call 0x1C17CB8
	731 Move X8, X0
	732 Move [X20+1168], X0
	733 Move W1, 274
	734 Move W8, 0x6621
	735 NotImplemented "Instruction MOVK not yet implemented."
	736 NotImplemented "Instruction CMP not yet implemented."
	737 Move W8, 0xAF42
	738 NotImplemented "Instruction MOVK not yet implemented."
	739 NotImplemented "Instruction CMP not yet implemented."
	740 Move W8, 0xEDD9
	741 NotImplemented "Instruction MOVK not yet implemented."
	742 NotImplemented "Instruction CMP not yet implemented."
	743 Move X8, 0x4FC000
	744 Move X8, [X8+472]
	745 Move X0, X20
	746 Move X2, X31
	747 Move X1, [X8]
	748 Call String.op_Equality, X0, X1
	749 Move TEMP, X0
	750 And TEMP, TEMP, 1
	751 Compare TEMP, 1
	752 JumpIfNotEqual {1699}
	753 Move X20, 0x782000
	754 Move X8, [X20+1152]
	755 Compare X8, 0
	756 JumpIfNotEqual {762}
	757 Move X0, -51843072
	758 Add X0, X0, 2209
	759 Call 0x1C17CB8
	760 Move X8, X0
	761 Move [X20+1152], X0
	762 Move W1, 48
	763 Move X0, X19
	764 NotImplemented "Instruction BLR not yet implemented."
	765 Move X20, 0x782000
	766 Move X8, [X20+1168]
	767 Compare X8, 0
	768 JumpIfNotEqual {774}
	769 Move X0, -51695616
	770 Add X0, X0, 53
	771 Call 0x1C17CB8
	772 Move X8, X0
	773 Move [X20+1168], X0
	774 Move W1, 256
	775 Move W8, 0x2DE5
	776 NotImplemented "Instruction MOVK not yet implemented."
	777 NotImplemented "Instruction CMP not yet implemented."
	778 Move W8, 0x1675
	779 NotImplemented "Instruction MOVK not yet implemented."
	780 NotImplemented "Instruction CMP not yet implemented."
	781 Move W8, 0xD23A
	782 NotImplemented "Instruction MOVK not yet implemented."
	783 NotImplemented "Instruction CMP not yet implemented."
	784 Move X8, 0x4FC000
	785 Move X8, [X8+352]
	786 Move X0, X20
	787 Move X2, X31
	788 Move X1, [X8]
	789 Call String.op_Equality, X0, X1
	790 Move TEMP, X0
	791 And TEMP, TEMP, 1
	792 Compare TEMP, 1
	793 JumpIfNotEqual {1699}
	794 Move X20, 0x782000
	795 Move X8, [X20+1152]
	796 Compare X8, 0
	797 JumpIfNotEqual {803}
	798 Move X0, -51843072
	799 Add X0, X0, 2209
	800 Call 0x1C17CB8
	801 Move X8, X0
	802 Move [X20+1152], X0
	803 Move W1, 43
	804 Move X0, X19
	805 NotImplemented "Instruction BLR not yet implemented."
	806 Move X20, 0x782000
	807 Move X8, [X20+1168]
	808 Compare X8, 0
	809 JumpIfNotEqual {815}
	810 Move X0, -51695616
	811 Add X0, X0, 53
	812 Call 0x1C17CB8
	813 Move X8, X0
	814 Move [X20+1168], X0
	815 Move W1, 270
	816 Move W8, 3345
	817 NotImplemented "Instruction MOVK not yet implemented."
	818 NotImplemented "Instruction CMP not yet implemented."
	819 Move W8, 2942
	820 NotImplemented "Instruction MOVK not yet implemented."
	821 NotImplemented "Instruction CMP not yet implemented."
	822 Move W8, 3345
	823 NotImplemented "Instruction MOVK not yet implemented."
	824 NotImplemented "Instruction CMP not yet implemented."
	825 Move X8, 0x4FC000
	826 Move X8, [X8+392]
	827 Move X0, X20
	828 Move X2, X31
	829 Move X1, [X8]
	830 Call String.op_Equality, X0, X1
	831 Move TEMP, X0
	832 And TEMP, TEMP, 1
	833 Compare TEMP, 1
	834 JumpIfNotEqual {1699}
	835 Move X20, 0x782000
	836 Move X8, [X20+1168]
	837 Compare X8, 0
	838 JumpIfNotEqual {844}
	839 Move X0, -51695616
	840 Add X0, X0, 53
	841 Call 0x1C17CB8
	842 Move X8, X0
	843 Move [X20+1168], X0
	844 Move W1, 294
	845 Move W8, 3748
	846 NotImplemented "Instruction MOVK not yet implemented."
	847 NotImplemented "Instruction CMP not yet implemented."
	848 Move W8, 0x1037
	849 NotImplemented "Instruction MOVK not yet implemented."
	850 NotImplemented "Instruction CMP not yet implemented."
	851 Move X8, 0x4FC000
	852 Move X8, [X8+344]
	853 Move X0, X20
	854 Move X2, X31
	855 Move X1, [X8]
	856 Call String.op_Equality, X0, X1
	857 Move TEMP, X0
	858 And TEMP, TEMP, 1
	859 Compare TEMP, 1
	860 JumpIfNotEqual {1699}
	861 Move X20, 0x782000
	862 Move X8, [X20+1168]
	863 Compare X8, 0
	864 JumpIfNotEqual {870}
	865 Move X0, -51695616
	866 Add X0, X0, 53
	867 Call 0x1C17CB8
	868 Move X8, X0
	869 Move [X20+1168], X0
	870 Move W1, 296
	871 Move X8, 0x4E3000
	872 Move X8, [X8+872]
	873 Move X0, X20
	874 Move X2, X31
	875 Move X1, [X8]
	876 Call String.op_Equality, X0, X1
	877 Move TEMP, X0
	878 And TEMP, TEMP, 1
	879 Compare TEMP, 1
	880 JumpIfNotEqual {1699}
	881 Move X20, 0x782000
	882 Move X8, [X20+1168]
	883 Compare X8, 0
	884 JumpIfNotEqual {890}
	885 Move X0, -51695616
	886 Add X0, X0, 53
	887 Call 0x1C17CB8
	888 Move X8, X0
	889 Move [X20+1168], X0
	890 Move W1, 289
	891 Move X8, 0x4FC000
	892 Move X8, [X8+336]
	893 Move X0, X20
	894 Move X2, X31
	895 Move X1, [X8]
	896 Call String.op_Equality, X0, X1
	897 Move TEMP, X0
	898 And TEMP, TEMP, 1
	899 Compare TEMP, 1
	900 JumpIfNotEqual {1699}
	901 Move X20, 0x782000
	902 Move X8, [X20+1152]
	903 Compare X8, 0
	904 JumpIfNotEqual {910}
	905 Move X0, -51843072
	906 Add X0, X0, 2209
	907 Call 0x1C17CB8
	908 Move X8, X0
	909 Move [X20+1152], X0
	910 Move W1, 47
	911 Move X0, X19
	912 NotImplemented "Instruction BLR not yet implemented."
	913 Move X20, 0x782000
	914 Move X8, [X20+1168]
	915 Compare X8, 0
	916 JumpIfNotEqual {922}
	917 Move X0, -51695616
	918 Add X0, X0, 53
	919 Call 0x1C17CB8
	920 Move X8, X0
	921 Move [X20+1168], X0
	922 Move W1, 267
	923 Move X8, 0x4E1000
	924 Move X8, [X8+4008]
	925 Move X0, X20
	926 Move X2, X31
	927 Move X1, [X8]
	928 Call String.op_Equality, X0, X1
	929 Move TEMP, X0
	930 And TEMP, TEMP, 1
	931 Compare TEMP, 1
	932 JumpIfNotEqual {1699}
	933 Move X20, 0x782000
	934 Move X8, [X20+1168]
	935 Compare X8, 0
	936 JumpIfNotEqual {942}
	937 Move X0, -51695616
	938 Add X0, X0, 53
	939 Call 0x1C17CB8
	940 Move X8, X0
	941 Move [X20+1168], X0
	942 Move W1, 273
	943 Move X8, 0x4E3000
	944 Move X8, [X8+648]
	945 Move X0, X20
	946 Move X2, X31
	947 Move X1, [X8]
	948 Call String.op_Equality, X0, X1
	949 Move TEMP, X0
	950 And TEMP, TEMP, 1
	951 Compare TEMP, 1
	952 JumpIfNotEqual {1699}
	953 Move X20, 0x782000
	954 Move X8, [X20+1168]
	955 Compare X8, 0
	956 JumpIfNotEqual {962}
	957 Move X0, -51695616
	958 Add X0, X0, 53
	959 Call 0x1C17CB8
	960 Move X8, X0
	961 Move [X20+1168], X0
	962 Move W1, 277
	963 Move X8, 0x4E3000
	964 Move X8, [X8+856]
	965 Move X0, X20
	966 Move X2, X31
	967 Move X1, [X8]
	968 Call String.op_Equality, X0, X1
	969 Move TEMP, X0
	970 And TEMP, TEMP, 1
	971 Compare TEMP, 1
	972 JumpIfNotEqual {1699}
	973 Move X20, 0x782000
	974 Move X8, [X20+1168]
	975 Compare X8, 0
	976 JumpIfNotEqual {982}
	977 Move X0, -51695616
	978 Add X0, X0, 53
	979 Call 0x1C17CB8
	980 Move X8, X0
	981 Move [X20+1168], X0
	982 Move W1, 285
	983 Move X8, 0x4FC000
	984 Move X8, [X8+296]
	985 Move X0, X20
	986 Move X2, X31
	987 Move X1, [X8]
	988 Call String.op_Equality, X0, X1
	989 Move TEMP, X0
	990 And TEMP, TEMP, 1
	991 Compare TEMP, 1
	992 JumpIfNotEqual {1699}
	993 Move X20, 0x782000
	994 Move X8, [X20+1152]
	995 Compare X8, 0
	996 JumpIfNotEqual {1002}
	997 Move X0, -51843072
	998 Add X0, X0, 2209
	999 Call 0x1C17CB8
	1000 Move X8, X0
	1001 Move [X20+1152], X0
	1002 Move W1, 46
	1003 Move X0, X19
	1004 NotImplemented "Instruction BLR not yet implemented."
	1005 Move X20, 0x782000
	1006 Move X8, [X20+1168]
	1007 Compare X8, 0
	1008 JumpIfNotEqual {1014}
	1009 Move X0, -51695616
	1010 Add X0, X0, 53
	1011 Call 0x1C17CB8
	1012 Move X8, X0
	1013 Move [X20+1168], X0
	1014 Move W1, 266
	1015 Move X8, 0x4FC000
	1016 Move X8, [X8+368]
	1017 Move X0, X20
	1018 Move X2, X31
	1019 Move X1, [X8]
	1020 Call String.op_Equality, X0, X1
	1021 Move TEMP, X0
	1022 And TEMP, TEMP, 1
	1023 Compare TEMP, 1
	1024 JumpIfNotEqual {1699}
	1025 Move X20, 0x782000
	1026 Move X8, [X20+1152]
	1027 Compare X8, 0
	1028 JumpIfNotEqual {1034}
	1029 Move X0, -51843072
	1030 Add X0, X0, 2209
	1031 Call 0x1C17CB8
	1032 Move X8, X0
	1033 Move [X20+1152], X0
	1034 Move W1, 49
	1035 Move X0, X19
	1036 NotImplemented "Instruction BLR not yet implemented."
	1037 Move X20, 0x782000
	1038 Move X8, [X20+1168]
	1039 Compare X8, 0
	1040 JumpIfNotEqual {1046}
	1041 Move X0, -51695616
	1042 Add X0, X0, 53
	1043 Call 0x1C17CB8
	1044 Move X8, X0
	1045 Move [X20+1168], X0
	1046 Move W1, 257
	1047 Move X8, 0x4E3000
	1048 Move X8, [X8+232]
	1049 Move X0, X20
	1050 Move X2, X31
	1051 Move X1, [X8]
	1052 Call String.op_Equality, X0, X1
	1053 Move TEMP, X0
	1054 And TEMP, TEMP, 1
	1055 Compare TEMP, 1
	1056 JumpIfNotEqual {1699}
	1057 Move X20, 0x782000
	1058 Move X8, [X20+1168]
	1059 Compare X8, 0
	1060 JumpIfNotEqual {1066}
	1061 Move X0, -51695616
	1062 Add X0, X0, 53
	1063 Call 0x1C17CB8
	1064 Move X8, X0
	1065 Move [X20+1168], X0
	1066 Move W1, 292
	1067 Move X8, 0x4E3000
	1068 Move X8, [X8+792]
	1069 Move X0, X20
	1070 Move X2, X31
	1071 Move X1, [X8]
	1072 Call String.op_Equality, X0, X1
	1073 Move TEMP, X0
	1074 And TEMP, TEMP, 1
	1075 Compare TEMP, 1
	1076 JumpIfNotEqual {1699}
	1077 Move X20, 0x782000
	1078 Move X8, [X20+1168]
	1079 Compare X8, 0
	1080 JumpIfNotEqual {1086}
	1081 Move X0, -51695616
	1082 Add X0, X0, 53
	1083 Call 0x1C17CB8
	1084 Move X8, X0
	1085 Move [X20+1168], X0
	1086 Move W1, 284
	1087 Move X8, 0x4E3000
	1088 Move X8, [X8+600]
	1089 Move X0, X20
	1090 Move X2, X31
	1091 Move X1, [X8]
	1092 Call String.op_Equality, X0, X1
	1093 Move TEMP, X0
	1094 And TEMP, TEMP, 1
	1095 Compare TEMP, 1
	1096 JumpIfNotEqual {1699}
	1097 Move X20, 0x782000
	1098 Move X8, [X20+1168]
	1099 Compare X8, 0
	1100 JumpIfNotEqual {1106}
	1101 Move X0, -51695616
	1102 Add X0, X0, 53
	1103 Call 0x1C17CB8
	1104 Move X8, X0
	1105 Move [X20+1168], X0
	1106 Move W1, 9
	1107 Move X8, 0x4E3000
	1108 Move X8, [X8+664]
	1109 Move X0, X20
	1110 Move X2, X31
	1111 Move X1, [X8]
	1112 Call String.op_Equality, X0, X1
	1113 Move TEMP, X0
	1114 And TEMP, TEMP, 1
	1115 Compare TEMP, 1
	1116 JumpIfNotEqual {1699}
	1117 Move X20, 0x782000
	1118 Move X8, [X20+1168]
	1119 Compare X8, 0
	1120 JumpIfNotEqual {1126}
	1121 Move X0, -51695616
	1122 Add X0, X0, 53
	1123 Call 0x1C17CB8
	1124 Move X8, X0
	1125 Move [X20+1168], X0
	1126 Move W1, 279
	1127 Move X8, 0x4FC000
	1128 Move X8, [X8+456]
	1129 Move X0, X20
	1130 Move X2, X31
	1131 Move X1, [X8]
	1132 Call String.op_Equality, X0, X1
	1133 Move TEMP, X0
	1134 And TEMP, TEMP, 1
	1135 Compare TEMP, 1
	1136 JumpIfNotEqual {1699}
	1137 Move X20, 0x782000
	1138 Move X8, [X20+1168]
	1139 Compare X8, 0
	1140 JumpIfNotEqual {1146}
	1141 Move X0, -51695616
	1142 Add X0, X0, 53
	1143 Call 0x1C17CB8
	1144 Move X8, X0
	1145 Move [X20+1168], X0
	1146 Move W1, 27
	1147 Move X8, 0x4E3000
	1148 Move X8, [X8+840]
	1149 Move X0, X20
	1150 Move X2, X31
	1151 Move X1, [X8]
	1152 Call String.op_Equality, X0, X1
	1153 Move TEMP, X0
	1154 And TEMP, TEMP, 1
	1155 Compare TEMP, 1
	1156 JumpIfNotEqual {1699}
	1157 Move X20, 0x782000
	1158 Move X8, [X20+1168]
	1159 Compare X8, 0
	1160 JumpIfNotEqual {1166}
	1161 Move X0, -51695616
	1162 Add X0, X0, 53
	1163 Call 0x1C17CB8
	1164 Move X8, X0
	1165 Move [X20+1168], X0
	1166 Move W1, 32
	1167 Move X0, X19
	1168 NotImplemented "Instruction BLR not yet implemented."
	1169 Move X20, 0x782000
	1170 Move X8, [X20+1152]
	1171 Compare X8, 0
	1172 JumpIfNotEqual {1178}
	1173 Move X0, -51843072
	1174 Add X0, X0, 2209
	1175 Call 0x1C17CB8
	1176 Move X8, X0
	1177 Move [X20+1152], X0
	1178 Move W1, 32
	1179 Move X8, 0x4FC000
	1180 Move X8, [X8+304]
	1181 Move X0, X20
	1182 Move X2, X31
	1183 Move X1, [X8]
	1184 Call String.op_Equality, X0, X1
	1185 Move TEMP, X0
	1186 And TEMP, TEMP, 1
	1187 Compare TEMP, 1
	1188 JumpIfNotEqual {1699}
	1189 Move X20, 0x782000
	1190 Move X8, [X20+1152]
	1191 Compare X8, 0
	1192 JumpIfNotEqual {1198}
	1193 Move X0, -51843072
	1194 Add X0, X0, 2209
	1195 Call 0x1C17CB8
	1196 Move X8, X0
	1197 Move [X20+1152], X0
	1198 Move W1, 51
	1199 Move X0, X19
	1200 NotImplemented "Instruction BLR not yet implemented."
	1201 Move X20, 0x782000
	1202 Move X8, [X20+1168]
	1203 Compare X8, 0
	1204 JumpIfNotEqual {1210}
	1205 Move X0, -51695616
	1206 Add X0, X0, 53
	1207 Call 0x1C17CB8
	1208 Move X8, X0
	1209 Move [X20+1168], X0
	1210 Move W1, 259
	1211 Move X8, 0x4FC000
	1212 Move X8, [X8+376]
	1213 Move X0, X20
	1214 Move X2, X31
	1215 Move X1, [X8]
	1216 Call String.op_Equality, X0, X1
	1217 Move TEMP, X0
	1218 And TEMP, TEMP, 1
	1219 Compare TEMP, 1
	1220 JumpIfNotEqual {1699}
	1221 Move X20, 0x782000
	1222 Move X8, [X20+1152]
	1223 Compare X8, 0
	1224 JumpIfNotEqual {1230}
	1225 Move X0, -51843072
	1226 Add X0, X0, 2209
	1227 Call 0x1C17CB8
	1228 Move X8, X0
	1229 Move [X20+1152], X0
	1230 Move W1, 52
	1231 Move X0, X19
	1232 NotImplemented "Instruction BLR not yet implemented."
	1233 Move X20, 0x782000
	1234 Move X8, [X20+1168]
	1235 Compare X8, 0
	1236 JumpIfNotEqual {1242}
	1237 Move X0, -51695616
	1238 Add X0, X0, 53
	1239 Call 0x1C17CB8
	1240 Move X8, X0
	1241 Move [X20+1168], X0
	1242 Move W1, 260
	1243 Move X8, 0x4E3000
	1244 Move X8, [X8+864]
	1245 Move X0, X20
	1246 Move X2, X31
	1247 Move X1, [X8]
	1248 Call String.op_Equality, X0, X1
	1249 Move TEMP, X0
	1250 And TEMP, TEMP, 1
	1251 Compare TEMP, 1
	1252 JumpIfNotEqual {1699}
	1253 Move X20, 0x782000
	1254 Move X8, [X20+1168]
	1255 Compare X8, 0
	1256 JumpIfNotEqual {1262}
	1257 Move X0, -51695616
	1258 Add X0, X0, 53
	1259 Call 0x1C17CB8
	1260 Move X8, X0
	1261 Move [X20+1168], X0
	1262 Move W1, 290
	1263 Move X8, 0x4E3000
	1264 Move X8, [X8+544]
	1265 Move X0, X20
	1266 Move X2, X31
	1267 Move X1, [X8]
	1268 Call String.op_Equality, X0, X1
	1269 Move TEMP, X0
	1270 And TEMP, TEMP, 1
	1271 Compare TEMP, 1
	1272 JumpIfNotEqual {1699}
	1273 Move X20, 0x782000
	1274 Move X8, [X20+1168]
	1275 Compare X8, 0
	1276 JumpIfNotEqual {1282}
	1277 Move X0, -51695616
	1278 Add X0, X0, 53
	1279 Call 0x1C17CB8
	1280 Move X8, X0
	1281 Move [X20+1168], X0
	1282 Move W1, 8
	1283 Move X8, 0x4FC000
	1284 Move X8, [X8+416]
	1285 Move X1, [X8]
	1286 Move X0, X20
	1287 Move X2, X31
	1288 Call String.op_Equality, X0, X1
	1289 Move TEMP, X0
	1290 And TEMP, TEMP, 1
	1291 Compare TEMP, 1
	1292 JumpIfNotEqual {1699}
	1293 Move X20, 0x782000
	1294 Move X8, [X20+1152]
	1295 Compare X8, 0
	1296 JumpIfNotEqual {1302}
	1297 Move X0, -51843072
	1298 Add X0, X0, 2209
	1299 Call 0x1C17CB8
	1300 Move X8, X0
	1301 Move [X20+1152], X0
	1302 Move W1, 61
	1303 Move X0, X19
	1304 NotImplemented "Instruction BLR not yet implemented."
	1305 Move X20, 0x782000
	1306 Move X8, [X20+1168]
	1307 Compare X8, 0
	1308 JumpIfNotEqual {1314}
	1309 Move X0, -51695616
	1310 Add X0, X0, 53
	1311 Call 0x1C17CB8
	1312 Move X8, X0
	1313 Move [X20+1168], X0
	1314 Move W1, 272
	1315 Move X8, 0x4FC000
	1316 Move X8, [X8+424]
	1317 Move X0, X20
	1318 Move X2, X31
	1319 Move X1, [X8]
	1320 Call String.op_Equality, X0, X1
	1321 Move TEMP, X0
	1322 And TEMP, TEMP, 1
	1323 Compare TEMP, 1
	1324 JumpIfNotEqual {1699}
	1325 Move X20, 0x782000
	1326 Move X8, [X20+1152]
	1327 Compare X8, 0
	1328 JumpIfNotEqual {1334}
	1329 Move X0, -51843072
	1330 Add X0, X0, 2209
	1331 Call 0x1C17CB8
	1332 Move X8, X0
	1333 Move [X20+1152], X0
	1334 Move W1, 55
	1335 Move X0, X19
	1336 NotImplemented "Instruction BLR not yet implemented."
	1337 Move X20, 0x782000
	1338 Move X8, [X20+1168]
	1339 Compare X8, 0
	1340 JumpIfNotEqual {1346}
	1341 Move X0, -51695616
	1342 Add X0, X0, 53
	1343 Call 0x1C17CB8
	1344 Move X8, X0
	1345 Move [X20+1168], X0
	1346 Move W1, 263
	1347 Move X8, 0x4E3000
	1348 Move X8, [X8+744]
	1349 Move X0, X20
	1350 Move X2, X31
	1351 Move X1, [X8]
	1352 Call String.op_Equality, X0, X1
	1353 Move TEMP, X0
	1354 And TEMP, TEMP, 1
	1355 Compare TEMP, 1
	1356 JumpIfNotEqual {1699}
	1357 Move X20, 0x782000
	1358 Move X8, [X20+1168]
	1359 Compare X8, 0
	1360 JumpIfNotEqual {1366}
	1361 Move X0, -51695616
	1362 Add X0, X0, 53
	1363 Call 0x1C17CB8
	1364 Move X8, X0
	1365 Move [X20+1168], X0
	1366 Move W1, 286
	1367 Move X8, 0x4FC000
	1368 Move X8, [X8+440]
	1369 Move X0, X20
	1370 Move X2, X31
	1371 Move X1, [X8]
	1372 Call String.op_Equality, X0, X1
	1373 Move TEMP, X0
	1374 And TEMP, TEMP, 1
	1375 Compare TEMP, 1
	1376 JumpIfNotEqual {1699}
	1377 Move X20, 0x782000
	1378 Move X8, [X20+1152]
	1379 Compare X8, 0
	1380 JumpIfNotEqual {1386}
	1381 Move X0, -51843072
	1382 Add X0, X0, 2209
	1383 Call 0x1C17CB8
	1384 Move X8, X0
	1385 Move [X20+1152], X0
	1386 Move W1, 54
	1387 Move X0, X19
	1388 NotImplemented "Instruction BLR not yet implemented."
	1389 Move X20, 0x782000
	1390 Move X8, [X20+1168]
	1391 Compare X8, 0
	1392 JumpIfNotEqual {1398}
	1393 Move X0, -51699712
	1394 Add X0, X0, 53
	1395 Call 0x1C17CB8
	1396 Move X8, X0
	1397 Move [X20+1168], X0
	1398 Move W1, 262
	1399 Move X8, 0x4FB000
	1400 Move X8, [X8+464]
	1401 Move X0, X20
	1402 Move X2, X31
	1403 Move X1, [X8]
	1404 Call String.op_Equality, X0, X1
	1405 Move TEMP, X0
	1406 And TEMP, TEMP, 1
	1407 Compare TEMP, 1
	1408 JumpIfNotEqual {1699}
	1409 Move X20, 0x781000
	1410 Move X8, [X20+1152]
	1411 Compare X8, 0
	1412 JumpIfNotEqual {1418}
	1413 Move X0, -51847168
	1414 Add X0, X0, 2209
	1415 Call 0x1C17CB8
	1416 Move X8, X0
	1417 Move [X20+1152], X0
	1418 Move W1, 50
	1419 Move X0, X19
	1420 NotImplemented "Instruction BLR not yet implemented."
	1421 Move X20, 0x781000
	1422 Move X8, [X20+1168]
	1423 Compare X8, 0
	1424 JumpIfNotEqual {1430}
	1425 Move X0, -51699712
	1426 Add X0, X0, 53
	1427 Call 0x1C17CB8
	1428 Move X8, X0
	1429 Move [X20+1168], X0
	1430 Move W1, 258
	1431 Move X8, 0x4FB000
	1432 Move X8, [X8+408]
	1433 Move X1, [X8]
	1434 Move X0, X20
	1435 Move X2, X31
	1436 Call String.op_Equality, X0, X1
	1437 Move TEMP, X0
	1438 And TEMP, TEMP, 1
	1439 Compare TEMP, 1
	1440 JumpIfNotEqual {1699}
	1441 Move X20, 0x781000
	1442 Move X8, [X20+1168]
	1443 Compare X8, 0
	1444 JumpIfNotEqual {1450}
	1445 Move X0, -51699712
	1446 Add X0, X0, 53
	1447 Call 0x1C17CB8
	1448 Move X8, X0
	1449 Move [X20+1168], X0
	1450 Move W1, 280
	1451 Move X8, 0x4E2000
	1452 Move X8, [X8+440]
	1453 Move X0, X20
	1454 Move X2, X31
	1455 Move X1, [X8]
	1456 Call String.op_Equality, X0, X1
	1457 Move TEMP, X0
	1458 And TEMP, TEMP, 1
	1459 Compare TEMP, 1
	1460 JumpIfNotEqual {1699}
	1461 Move X20, 0x781000
	1462 Move X8, [X20+1168]
	1463 Compare X8, 0
	1464 JumpIfNotEqual {1470}
	1465 Move X0, -51699712
	1466 Add X0, X0, 53
	1467 Call 0x1C17CB8
	1468 Move X8, X0
	1469 Move [X20+1168], X0
	1470 Move W1, 282
	1471 Move X8, 0x4BF000
	1472 Move X8, [X8+1872]
	1473 Move X0, X20
	1474 Move X2, X31
	1475 Move X1, [X8]
	1476 Call String.op_Equality, X0, X1
	1477 Move TEMP, X0
	1478 And TEMP, TEMP, 1
	1479 Compare TEMP, 1
	1480 JumpIfNotEqual {1699}
	1481 Move X20, 0x781000
	1482 Move X8, [X20+1152]
	1483 Compare X8, 0
	1484 JumpIfNotEqual {1490}
	1485 Move X0, -51847168
	1486 Add X0, X0, 2209
	1487 Call 0x1C17CB8
	1488 Move X8, X0
	1489 Move [X20+1152], X0
	1490 Move W1, 10
	1491 Move X0, X19
	1492 NotImplemented "Instruction BLR not yet implemented."
	1493 Move X20, 0x781000
	1494 Move X8, [X20+1168]
	1495 Compare X8, 0
	1496 JumpIfNotEqual {1502}
	1497 Move X0, -51699712
	1498 Add X0, X0, 53
	1499 Call 0x1C17CB8
	1500 Move X8, X0
	1501 Move [X20+1168], X0
	1502 Move W1, 13
	1503 Move X0, X19
	1504 NotImplemented "Instruction BLR not yet implemented."
	1505 Move X20, 0x781000
	1506 Move X8, [X20+1096]
	1507 Compare X8, 0
	1508 JumpIfNotEqual {1514}
	1509 Move X0, -51789824
	1510 Add X0, X0, 1328
	1511 Call 0x1C17CB8
	1512 Move X8, X0
	1513 Move [X20+1096], X0
	1514 Move X0, X19
	1515 NotImplemented "Instruction BLR not yet implemented."
	1516 Move X21, 0x781000
	1517 Move X8, [X21+1104]
	1518 And W20, W0, 0xFFFFFFBF
	1519 Compare X8, 0
	1520 JumpIfNotEqual {1697}
	1521 Move X8, 0x4E2000
	1522 Move X8, [X8+248]
	1523 Move X0, X20
	1524 Move X2, X31
	1525 Move X1, [X8]
	1526 Call String.op_Equality, X0, X1
	1527 Move TEMP, X0
	1528 And TEMP, TEMP, 1
	1529 Compare TEMP, 1
	1530 JumpIfNotEqual {1699}
	1531 Move X20, 0x781000
	1532 Move X8, [X20+1168]
	1533 Compare X8, 0
	1534 JumpIfNotEqual {1540}
	1535 Move X0, -51699712
	1536 Add X0, X0, 53
	1537 Call 0x1C17CB8
	1538 Move X8, X0
	1539 Move [X20+1168], X0
	1540 Move W1, 127
	1541 Move X8, 0x4FB000
	1542 Move X8, [X8+448]
	1543 Move X1, [X8]
	1544 Move X0, X20
	1545 Move X2, X31
	1546 Call String.op_Equality, X0, X1
	1547 Move TEMP, X0
	1548 And TEMP, TEMP, 1
	1549 Compare TEMP, 1
	1550 JumpIfNotEqual {1699}
	1551 Move X20, 0x781000
	1552 Move X8, [X20+1168]
	1553 Compare X8, 0
	1554 JumpIfNotEqual {1560}
	1555 Move X0, -51699712
	1556 Add X0, X0, 53
	1557 Call 0x1C17CB8
	1558 Move X8, X0
	1559 Move [X20+1168], X0
	1560 Move W1, 281
	1561 Move X8, 0x4E2000
	1562 Move X8, [X8+456]
	1563 Move X0, X20
	1564 Move X2, X31
	1565 Move X1, [X8]
	1566 Call String.op_Equality, X0, X1
	1567 Move TEMP, X0
	1568 And TEMP, TEMP, 1
	1569 Compare TEMP, 1
	1570 JumpIfNotEqual {1699}
	1571 Move X20, 0x781000
	1572 Move X8, [X20+1168]
	1573 Compare X8, 0
	1574 JumpIfNotEqual {1580}
	1575 Move X0, -51699712
	1576 Add X0, X0, 53
	1577 Call 0x1C17CB8
	1578 Move X8, X0
	1579 Move [X20+1168], X0
	1580 Move W1, 287
	1581 Move X8, 0x4FB000
	1582 Move X8, [X8+320]
	1583 Move X0, X20
	1584 Move X2, X31
	1585 Move X1, [X8]
	1586 Call String.op_Equality, X0, X1
	1587 Move TEMP, X0
	1588 And TEMP, TEMP, 1
	1589 Compare TEMP, 1
	1590 JumpIfNotEqual {1699}
	1591 Move X20, 0x781000
	1592 Move X8, [X20+1152]
	1593 Compare X8, 0
	1594 JumpIfNotEqual {1600}
	1595 Move X0, -51847168
	1596 Add X0, X0, 2209
	1597 Call 0x1C17CB8
	1598 Move X8, X0
	1599 Move [X20+1152], X0
	1600 Move W1, 56
	1601 Move X0, X19
	1602 NotImplemented "Instruction BLR not yet implemented."
	1603 Move X20, 0x781000
	1604 Move X8, [X20+1168]
	1605 Compare X8, 0
	1606 JumpIfNotEqual {1612}
	1607 Move X0, -51699712
	1608 Add X0, X0, 53
	1609 Call 0x1C17CB8
	1610 Move X8, X0
	1611 Move [X20+1168], X0
	1612 Move W1, 264
	1613 Move X0, X19
	1614 Move X8, 0x4D2000
	1615 Move X8, [X8+1888]
	1616 Move X0, X20
	1617 Move X2, X31
	1618 Move X1, [X8]
	1619 Call String.op_Equality, X0, X1
	1620 Move TEMP, X0
	1621 And TEMP, TEMP, 1
	1622 Compare TEMP, 1
	1623 JumpIfNotEqual {1699}
	1624 Move X20, 0x781000
	1625 Move X8, [X20+1168]
	1626 Compare X8, 0
	1627 JumpIfNotEqual {1633}
	1628 Move X0, -51699712
	1629 Add X0, X0, 53
	1630 Call 0x1C17CB8
	1631 Move X8, X0
	1632 Move [X20+1168], X0
	1633 Move W1, 275
	1634 Move X8, 0x4E2000
	1635 Move X8, [X8+312]
	1636 Move X0, X20
	1637 Move X2, X31
	1638 Move X1, [X8]
	1639 Call String.op_Equality, X0, X1
	1640 Move TEMP, X0
	1641 And TEMP, TEMP, 1
	1642 Compare TEMP, 1
	1643 JumpIfNotEqual {1699}
	1644 Move X20, 0x781000
	1645 Move X8, [X20+1168]
	1646 Compare X8, 0
	1647 JumpIfNotEqual {1653}
	1648 Move X0, -51699712
	1649 Add X0, X0, 53
	1650 Call 0x1C17CB8
	1651 Move X8, X0
	1652 Move [X20+1168], X0
	1653 Move W1, 293
	1654 Move X8, 0x4FB000
	1655 Move X8, [X8+480]
	1656 Move X0, X20
	1657 Move X2, X31
	1658 Move X1, [X8]
	1659 Call String.op_Equality, X0, X1
	1660 Move TEMP, X0
	1661 And TEMP, TEMP, 1
	1662 Compare TEMP, 1
	1663 JumpIfNotEqual {1699}
	1664 Move X20, 0x781000
	1665 Move X8, [X20+1168]
	1666 Compare X8, 0
	1667 JumpIfNotEqual {1673}
	1668 Move X0, -51699712
	1669 Add X0, X0, 53
	1670 Call 0x1C17CB8
	1671 Move X8, X0
	1672 Move [X20+1168], X0
	1673 Move W1, 295
	1674 Move X0, X19
	1675 NotImplemented "Instruction BLR not yet implemented."
	1676 Move X20, 0x781000
	1677 Move X8, [X20+1096]
	1678 Compare X8, 0
	1679 JumpIfNotEqual {1685}
	1680 Move X0, -51789824
	1681 Add X0, X0, 1328
	1682 Call 0x1C17CB8
	1683 Move X8, X0
	1684 Move [X20+1096], X0
	1685 Move X0, X19
	1686 NotImplemented "Instruction BLR not yet implemented."
	1687 Move X21, 0x781000
	1688 Move X8, [X21+1104]
	1689 Or W20, W0, 64
	1690 Compare X8, 0
	1691 JumpIfNotEqual {1697}
	1692 Move X0, -51732480
	1693 Add X0, X0, 2317
	1694 Call 0x1C17CB8
	1695 Move X8, X0
	1696 Move [X21+1104], X0
	1697 Move X0, X19
	1698 Move W1, W20
	1699 Compare X20, 0
	1700 JumpIfEqual {1885}
	1701 Move W8, [X20+16]
	1702 NotImplemented "Instruction CMP not yet implemented."
	1703 Move X0, X20
	1704 Move X1, X31
	1705 Call String.ToLower, X0
	1706 Compare X0, 0
	1707 JumpIfEqual {1885}
	1708 Move W1, W31
	1709 Move X2, X31
	1710 Call String.get_Chars, X0, X1
	1711 Move X21, 0x781000
	1712 Move X8, [X21+1152]
	1713 Move W20, W0
	1714 Compare X8, 0
	1715 JumpIfNotEqual {1721}
	1716 Move X0, -51847168
	1717 Add X0, X0, 2209
	1718 Call 0x1C17CB8
	1719 Move X8, X0
	1720 Move [X21+1152], X0
	1721 Move X0, X19
	1722 Move W1, W20
	1723 NotImplemented "Instruction BLR not yet implemented."
	1724 Move X20, 0x781000
	1725 Move X8, [X20+1144]
	1726 Compare X8, 0
	1727 JumpIfNotEqual {1733}
	1728 Move X0, -51822592
	1729 Add X0, X0, 2504
	1730 Call 0x1C17CB8
	1731 Move X8, X0
	1732 Move [X20+1144], X0
	1733 Move X0, X19
	1734 NotImplemented "Instruction BLR not yet implemented."
	1735 Move X22, 0x781000
	1736 Move X8, [X22+1168]
	1737 And W20, W0, 0xFFFF
	1738 Compare X8, 0
	1739 JumpIfNotEqual {1745}
	1740 Move X0, -51699712
	1741 Add X0, X0, 53
	1742 Call 0x1C17CB8
	1743 Move X8, X0
	1744 Move [X22+1168], X0
	1745 Move X0, X19
	1746 Move W1, W20
	1747 NotImplemented "Instruction BLR not yet implemented."
	1748 Move X20, 0x781000
	1749 Move X8, [X20+1096]
	1750 Compare X8, 0
	1751 JumpIfNotEqual {1757}
	1752 Move X0, -51789824
	1753 Add X0, X0, 1328
	1754 Call 0x1C17CB8
	1755 Move X8, X0
	1756 Move [X20+1096], X0
	1757 Move X0, X19
	1758 NotImplemented "Instruction BLR not yet implemented."
	1759 Compare W0, 0
	1760 JumpIfEqual {1821}
	1761 Move X8, [X21+1152]
	1762 Compare X8, 0
	1763 JumpIfNotEqual {1769}
	1764 Move X0, -51847168
	1765 Add X0, X0, 2209
	1766 Call 0x1C17CB8
	1767 Move X8, X0
	1768 Move [X21+1152], X0
	1769 Move X0, X19
	1770 Move W1, W31
	1771 NotImplemented "Instruction BLR not yet implemented."
	1772 Move X8, 0x48E000
	1773 Move X8, [X8+1728]
	1774 Move X0, [X8]
	1775 Move X8, 0x4FB000
	1776 Move X8, [X8+272]
	1777 Move W9, [X0+224]
	1778 Move X21, [X8]
	1779 Compare W9, 0
	1780 JumpIfNotEqual {1782}
	1781 Call 0x1C17DFC
	1782 Move X0, X21
	1783 Move X1, X31
	1784 Call Type.GetTypeFromHandle, X0
	1785 Move X8, 0x48E000
	1786 Move X8, [X8+3576]
	1787 Move X21, X0
	1788 Move X0, [X8]
	1789 Move W8, [X0+224]
	1790 Compare W8, 0
	1791 JumpIfNotEqual {1793}
	1792 Call 0x1C17DFC
	1793 Move W2, 1
	1794 Move X0, X21
	1795 Move X1, X20
	1796 Move X3, X31
	1797 Call Enum.Parse, X0, X1, X2
	1798 Compare X0, 0
	1799 JumpIfEqual {1832}
	1800 Move X8, 0x4FB000
	1801 Move X8, [X8+280]
	1802 Move X9, [X0]
	1803 Move X1, [X8]
	1804 Move X8, [X9+64]
	1805 Move X9, [X1+64]
	1806 NotImplemented "Instruction CMP not yet implemented."
	1807 Call 0x1C17E08
	1808 Move X22, 0x781000
	1809 Move X8, [X22+1168]
	1810 Move W21, [X0]
	1811 Compare X8, 0
	1812 JumpIfNotEqual {1818}
	1813 Move X0, -51699712
	1814 Add X0, X0, 53
	1815 Call 0x1C17CB8
	1816 Move X8, X0
	1817 Move [X22+1168], X0
	1818 Move X0, X19
	1819 Move W1, W21
	1820 NotImplemented "Instruction BLR not yet implemented."
	1821 Move X0, X19
	1822 Move X20, [X31+64]
	1823 Move X19, [X31+72]
	1824 Move X22, [X31+48]
	1825 Move X21, [X31+56]
	1826 Move X24, [X31+32]
	1827 Move X23, [X31+40]
	1828 Move X26, [X31+16]
	1829 Move X25, [X31+24]
	1830 Move X30, [X31+80]
	1831 Return X0
	1832 Call 0x1C17F20
	1833 Call 0x1C181E0
	1834 Move X21, X0
	1835 NotImplemented "Instruction CMP not yet implemented."
	1836 Move X0, X21
	1837 Call 0x3EB2AD0
	1838 Move X21, X0
	1839 Move X0, 0x496000
	1840 Move X0, [X0+1400]
	1841 Call 0x1C17D08
	1842 Move X8, [X21]
	1843 Move X1, [X8]
	1844 Call 0x1C18270
	1845 Move TEMP, X0
	1846 And TEMP, TEMP, 1
	1847 Compare TEMP, 1
	1848 JumpIfNotEqual {1886}
	1849 Call 0x3EB2AE0
	1850 Move X0, 0x48E000
	1851 Move X0, [X0+2512]
	1852 Call 0x1C17D08
	1853 Move W1, 1
	1854 Call 0x1C17D6C
	1855 Compare X0, 0
	1856 JumpIfEqual {1885}
	1857 Move X8, [X0]
	1858 Move X21, X0
	1859 Move X0, X20
	1860 Move X1, [X8+64]
	1861 Call 0x1C17E00
	1862 Compare X0, 0
	1863 JumpIfEqual {1894}
	1864 Move W8, [X21+24]
	1865 Compare W8, 0
	1866 JumpIfEqual {1897}
	1867 Move [X21+32], X20
	1868 Move X0, 0x4FB000
	1869 Move X0, [X0+488]
	1870 Call 0x1C17D08
	1871 Move X1, X21
	1872 Move X2, X31
	1873 Call UnityString.Format, X0, X1
	1874 Move X20, X0
	1875 Move X0, 0x48E000
	1876 Move X0, [X0+2600]
	1877 Call 0x1C17D08
	1878 Move W8, [X0+224]
	1879 Compare W8, 0
	1880 JumpIfNotEqual {1882}
	1881 Call 0x1C17DFC
	1882 Move X0, X20
	1883 Move X1, X31
	1884 Call Debug.LogError, X0
	1885 Call 0x1C17F20
	1886 Move W0, 8
	1887 Call 0x3EB2AF0
	1888 Move X8, [X21]
	1889 Move [X0], X8
	1890 Move X1, 0x24F000
	1891 Add X1, X1, 3672
	1892 Move X2, X31
	1893 Call 0x3EB2B00
	1894 Call 0x1C17F44
	1895 Move X1, X31
	1896 Call 0x1C17DEC
	1897 Call 0x1C17F28
	1898 Move X21, X0
	1899 Call 0x3EB2AE0
	1900 Move X0, X21
	1901 Call 0x1D2D690
	1902 Call 0x1991590

Method: System.Int32 GetHashCode()

Disassembly:
	0x03C66720 LDR X0, [X19]
	0x03C66724 STP X31, X31, [X31]
	0x03C66728 LDR W8, [X0 + 0xE0]
	0x03C6672C CBNZ W8, 0x3C66734
	0x03C66730 BL 0x1C16DFC
	0x03C66734 ADRP X19, 0x780000
	0x03C66738 LDR X8, [X19 + 0x5F0]
	0x03C6673C CBNZ X8, 0x3C66754
	0x03C66740 ADRP X0, 0xFFFFFFFFFCEC2000
	0x03C66744 ADD X0, X0, 0xEC6
	0x03C66748 BL 0x1C16CB8
	0x03C6674C MOV X8, X0
	0x03C66750 STR X0, [X19 + 0x5F0]
	0x03C66754 ADD X0, X31, 0x0
	0x03C66758 BLR X8
	0x03C6675C LDP S0, S1, [X31]
	0x03C66760 LDP S2, S3, [X31 + 0x8]
	0x03C66764 LDP X20, X19, [X31 + 0x20]
	0x03C66768 LDR X30, [X31 + 0x10]
	0x03C6676C ADD X31, X31, 0x30
	0x03C66770 RET
	0x03C66774 STR X30, [X31 - 0x20]!
	0x03C66778 STP X20, X19, [X31 + 0x10]
	0x03C6677C ADRP X20, 0x780000
	0x03C66780 LDR X1, [X20 + 0x5F0]
	0x03C66784 MOV X19, X0
	0x03C66788 CBNZ X1, 0x3C667A0
	0x03C6678C ADRP X0, 0xFFFFFFFFFCEC2000
	0x03C66790 ADD X0, X0, 0xEC6
	0x03C66794 BL 0x1C16CB8
	0x03C66798 MOV X1, X0
	0x03C6679C STR X0, [X20 + 0x5F0]
	0x03C667A0 MOV X0, X19
	0x03C667A4 LDP X20, X19, [X31 + 0x10]
	0x03C667A8 LDR X30, [X31], #0x20
	0x03C667AC BR X1
	0x03C667B0 SUB X31, X31, 0x30
	0x03C667B4 STR X30, [X31 + 0x10]
	0x03C667B8 STP X20, X19, [X31 + 0x20]
	0x03C667BC ADRP X19, 0x780000
	0x03C667C0 STP S0, S1, [X31]
	0x03C667C4 STP S2, S3, [X31 + 0x8]
	0x03C667C8 ADRP X20, 0x4B4000
	0x03C667CC LDRB W8, [X19 + 0x544]
	0x03C667D0 LDR X20, [X20 + 0x4C0]
	0x03C667D4 TBNZ X8, 0x0, 0x3C667EC
	0x03C667D8 ADRP X0, 0x4B4000
	0x03C667DC LDR X0, [X0 + 0x4C0]
	0x03C667E0 BL 0x1C16CF4
	0x03C667E4 MOVZ W8, 0x1
	0x03C667E8 STRB W8, [X19 + 0x544]
	0x03C667EC LDR X0, [X20]
	0x03C667F0 LDR W8, [X0 + 0xE0]
	0x03C667F4 CBNZ W8, 0x3C667FC
	0x03C667F8 BL 0x1C16DFC
	0x03C667FC ADRP X19, 0x780000
	0x03C66800 LDR X8, [X19 + 0x5F8]
	0x03C66804 CBNZ X8, 0x3C6681C
	0x03C66808 ADRP X0, 0xFFFFFFFFFCEC1000
	0x03C6680C ADD X0, X0, 0x2B6
	0x03C66810 BL 0x1C16CB8
	0x03C66814 MOV X8, X0
	0x03C66818 STR X0, [X19 + 0x5F8]
	0x03C6681C ADD X0, X31, 0x0

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x781000
	007 Move X8, [X20+1192]
	008 Move X19, X0
	009 Move [X31+8], X31
	010 Compare X8, 0
	011 JumpIfNotEqual {17}
	012 Move X0, -51855360
	013 Add X0, X0, 1382
	014 Call 0x1C17CB8
	015 Move X8, X0
	016 Move [X20+1192], X0
	017 Move X0, X19
	018 NotImplemented "Instruction BLR not yet implemented."
	019 And W8, W0, 0xFFFFFFFE
	020 NotImplemented "Instruction CMP not yet implemented."
	021 Move X20, 0x781000
	022 Move X8, [X20+1160]
	023 Compare X8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, -51675136
	026 Add X0, X0, 1451
	027 Call 0x1C17CB8
	028 Move X8, X0
	029 Move [X20+1160], X0
	030 Move X0, X19
	031 NotImplemented "Instruction BLR not yet implemented."
	032 And W20, W0, 0xFFFF
	033 Move W20, 1
	034 Move X0, X19
	035 Call Event.get_isMouse, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfNotEqual {54}
	040 Move X0, X19
	041 Call Event.get_mousePosition, X0
	042 Add X8, X31, 8
	043 Add X0, X31, 8
	044 Move X1, X31
	045 Or X20, X8, 7
	046 Move [X31+8], S0
	047 Move [X31+16], S1
	048 Call Single.GetHashCode, X0
	049 Move W21, W0
	050 Move X0, X20
	051 Move X1, X31
	052 Call Single.GetHashCode, X0
	053 Xor W20, W21, W0
	054 Move X21, 0x781000
	055 Move X8, [X21+1096]
	056 Compare X8, 0
	057 JumpIfNotEqual {63}
	058 Move X0, -51789824
	059 Add X0, X0, 1328
	060 Call 0x1C17CB8
	061 Move X8, X0
	062 Move [X21+1096], X0
	063 Move X0, X19
	064 NotImplemented "Instruction BLR not yet implemented."
	065 Move W8, 37
	066 Multiply W8, W20, W8
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X30, [X31+16]
	070 Move X21, [X31+24]
	071 Or W0, W0, W8
	072 Add X31, X31, 48
	073 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03C66820 BLR X8
	0x03C66824 LDP X20, X19, [X31 + 0x20]
	0x03C66828 LDR X30, [X31 + 0x10]
	0x03C6682C ADD X31, X31, 0x30
	0x03C66830 RET
	0x03C66834 STR X30, [X31 - 0x20]!
	0x03C66838 STP X20, X19, [X31 + 0x10]
	0x03C6683C ADRP X20, 0x780000
	0x03C66840 LDR X1, [X20 + 0x5F8]
	0x03C66844 MOV X19, X0
	0x03C66848 CBNZ X1, 0x3C66860
	0x03C6684C ADRP X0, 0xFFFFFFFFFCEC1000
	0x03C66850 ADD X0, X0, 0x2B6
	0x03C66854 BL 0x1C16CB8
	0x03C66858 MOV X1, X0
	0x03C6685C STR X0, [X20 + 0x5F8]
	0x03C66860 MOV X0, X19
	0x03C66864 LDP X20, X19, [X31 + 0x10]
	0x03C66868 LDR X30, [X31], #0x20
	0x03C6686C BR X1
	0x03C66870 SUB X31, X31, 0x30
	0x03C66874 STR X30, [X31 + 0x10]
	0x03C66878 STP X20, X19, [X31 + 0x20]
	0x03C6687C ADRP X20, 0x780000
	0x03C66880 ADRP X19, 0x4B4000
	0x03C66884 LDRB W8, [X20 + 0x545]
	0x03C66888 LDR X19, [X19 + 0x4C0]
	0x03C6688C TBNZ X8, 0x0, 0x3C668A4
	0x03C66890 ADRP X0, 0x4B4000
	0x03C66894 LDR X0, [X0 + 0x4C0]
	0x03C66898 BL 0x1C16CF4
	0x03C6689C MOVZ W8, 0x1
	0x03C668A0 STRB W8, [X20 + 0x545]
	0x03C668A4 LDR X0, [X19]
	0x03C668A8 STP X31, X31, [X31]
	0x03C668AC LDR W8, [X0 + 0xE0]
	0x03C668B0 CBNZ W8, 0x3C668B8
	0x03C668B4 BL 0x1C16DFC
	0x03C668B8 ADRP X19, 0x780000
	0x03C668BC LDR X8, [X19 + 0x600]
	0x03C668C0 CBNZ X8, 0x3C668D8
	0x03C668C4 ADRP X0, 0xFFFFFFFFFCEBB000
	0x03C668C8 ADD X0, X0, 0x133
	0x03C668CC BL 0x1C16CB8
	0x03C668D0 MOV X8, X0
	0x03C668D4 STR X0, [X19 + 0x600]
	0x03C668D8 ADD X0, X31, 0x0
	0x03C668DC BLR X8
	0x03C668E0 LDP S0, S1, [X31]
	0x03C668E4 LDP S2, S3, [X31 + 0x8]
	0x03C668E8 LDP X20, X19, [X31 + 0x20]
	0x03C668EC LDR X30, [X31 + 0x10]
	0x03C668F0 ADD X31, X31, 0x30
	0x03C668F4 RET
	0x03C668F8 STR X30, [X31 - 0x20]!
	0x03C668FC STP X20, X19, [X31 + 0x10]
	0x03C66900 ADRP X20, 0x780000
	0x03C66904 LDR X1, [X20 + 0x600]
	0x03C66908 MOV X19, X0
	0x03C6690C CBNZ X1, 0x3C66924
	0x03C66910 ADRP X0, 0xFFFFFFFFFCEBB000
	0x03C66914 ADD X0, X0, 0x133
	0x03C66918 BL 0x1C16CB8
	0x03C6691C MOV X1, X0
	0x03C66920 STR X0, [X20 + 0x600]
	0x03C66924 MOV X0, X19
	0x03C66928 LDP X20, X19, [X31 + 0x10]
	0x03C6692C LDR X30, [X31], #0x20
	0x03C66930 BR X1
	0x03C66934 SUB X31, X31, 0x30
	0x03C66938 STR X30, [X31 + 0x10]
	0x03C6693C STP X20, X19, [X31 + 0x20]
	0x03C66940 ADRP X19, 0x780000
	0x03C66944 STP S0, S1, [X31]
	0x03C66948 STP S2, S3, [X31 + 0x8]
	0x03C6694C ADRP X20, 0x4B4000
	0x03C66950 LDRB W8, [X19 + 0x546]
	0x03C66954 LDR X20, [X20 + 0x4C0]
	0x03C66958 TBNZ X8, 0x0, 0x3C66970
	0x03C6695C ADRP X0, 0x4B4000
	0x03C66960 LDR X0, [X0 + 0x4C0]
	0x03C66964 BL 0x1C16CF4
	0x03C66968 MOVZ W8, 0x1
	0x03C6696C STRB W8, [X19 + 0x546]
	0x03C66970 LDR X0, [X20]
	0x03C66974 LDR W8, [X0 + 0xE0]
	0x03C66978 CBNZ W8, 0x3C66980
	0x03C6697C BL 0x1C16DFC
	0x03C66980 ADRP X19, 0x780000
	0x03C66984 LDR X8, [X19 + 0x608]
	0x03C66988 CBNZ X8, 0x3C669A0
	0x03C6698C ADRP X0, 0xFFFFFFFFFCE89000
	0x03C66990 ADD X0, X0, 0x595
	0x03C66994 BL 0x1C16CB8
	0x03C66998 MOV X8, X0
	0x03C6699C STR X0, [X19 + 0x608]
	0x03C669A0 ADD X0, X31, 0x0
	0x03C669A4 BLR X8
	0x03C669A8 LDP X20, X19, [X31 + 0x20]
	0x03C669AC LDR X30, [X31 + 0x10]
	0x03C669B0 ADD X31, X31, 0x30
	0x03C669B4 RET
	0x03C669B8 STR X30, [X31 - 0x20]!
	0x03C669BC STP X20, X19, [X31 + 0x10]
	0x03C669C0 ADRP X20, 0x780000
	0x03C669C4 LDR X1, [X20 + 0x608]
	0x03C669C8 MOV X19, X0
	0x03C669CC CBNZ X1, 0x3C669E4
	0x03C669D0 ADRP X0, 0xFFFFFFFFFCE89000
	0x03C669D4 ADD X0, X0, 0x595
	0x03C669D8 BL 0x1C16CB8
	0x03C669DC MOV X1, X0
	0x03C669E0 STR X0, [X20 + 0x608]
	0x03C669E4 MOV X0, X19
	0x03C669E8 LDP X20, X19, [X31 + 0x10]
	0x03C669EC LDR X30, [X31], #0x20
	0x03C669F0 BR X1
	0x03C669F4 STP X30, X19, [X31 - 0x10]!
	0x03C669F8 ADRP X19, 0x780000
	0x03C669FC LDR X0, [X19 + 0x548]
	0x03C66A00 CBNZ X0, 0x3C66A14
	0x03C66A04 ADRP X0, 0xFFFFFFFFFCE89000
	0x03C66A08 ADD X0, X0, 0x551
	0x03C66A0C BL 0x1C16CB8
	0x03C66A10 STR X0, [X19 + 0x548]
	0x03C66A14 LDP X30, X19, [X31], #0x10
	0x03C66A18 BR X0
	0x03C66A1C STR X30, [X31 - 0x20]!
	0x03C66A20 STP X20, X19, [X31 + 0x10]
	0x03C66A24 ADRP X20, 0x780000
	0x03C66A28 LDR X1, [X20 + 0x550]
	0x03C66A2C MOV W19, W0
	0x03C66A30 CBNZ X1, 0x3C66A48
	0x03C66A34 ADRP X0, 0xFFFFFFFFFCE8F000
	0x03C66A38 ADD X0, X0, 0x71D
	0x03C66A3C BL 0x1C16CB8
	0x03C66A40 MOV X1, X0
	0x03C66A44 STR X0, [X20 + 0x550]
	0x03C66A48 AND W0, W19, 0x1
	0x03C66A4C LDP X20, X19, [X31 + 0x10]
	0x03C66A50 LDR X30, [X31], #0x20
	0x03C66A54 BR X1
	0x03C66A58 STP X30, X19, [X31 - 0x10]!
	0x03C66A5C ADRP X19, 0x780000
	0x03C66A60 LDR X0, [X19 + 0x558]
	0x03C66A64 CBNZ X0, 0x3C66A78
	0x03C66A68 ADRP X0, 0xFFFFFFFFFCEC6000
	0x03C66A6C ADD X0, X0, 0xC0D
	0x03C66A70 BL 0x1C16CB8
	0x03C66A74 STR X0, [X19 + 0x558]
	0x03C66A78 LDP X30, X19, [X31], #0x10
	0x03C66A7C BR X0
	0x03C66A80 STR X30, [X31 - 0x20]!
	0x03C66A84 STP X20, X19, [X31 + 0x10]
	0x03C66A88 ADRP X20, 0x780000

ISIL:
	001 Move [X31-64], D9
	002 Move [X31-56], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x781000
	010 Move W8, [X21+1299]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x4F4000
	018 Move X0, [X0+32]
	019 Call 0x1C17CF4
	020 Move X0, 0x48E000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+1299], W8
	025 Compare X19, 0
	026 JumpIfEqual {104}
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X0, X19
	029 Move X1, X31
	030 Call "il2cpp_vm_object_is_inst", X0
	031 Move X21, X0
	032 Move X0, X20
	033 Move X1, X31
	034 Call "il2cpp_vm_object_is_inst", X0
	035 Move X8, 0x48E000
	036 Move X8, [X8+1728]
	037 Move X22, X0
	038 Move X8, [X8]
	039 Move W9, [X8+224]
	040 Compare W9, 0
	041 JumpIfNotEqual {44}
	042 Move X0, X8
	043 Call 0x1C17DFC
	044 Move X0, X21
	045 Move X1, X22
	046 Move X2, X31
	047 Call Type.op_Inequality, X0, X1
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfEqual {104}
	052 Move X8, 0x4F4000
	053 Move X8, [X8+32]
	054 Move X1, [X8]
	055 Move X8, [X19]
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Move X22, 0x781000
	058 Move X8, [X22+1192]
	059 Compare X8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, -51855360
	062 Add X0, X0, 1382
	063 Call 0x1C17CB8
	064 Move X8, X0
	065 Move [X22+1192], X0
	066 Move X0, X20
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X8, [X22+1192]
	069 Move W21, W0
	070 Compare X8, 0
	071 JumpIfNotEqual {77}
	072 Move X0, -51855360
	073 Add X0, X0, 1382
	074 Call 0x1C17CB8
	075 Move X8, X0
	076 Move [X22+1192], X0
	077 Move X0, X19
	078 NotImplemented "Instruction BLR not yet implemented."
	079 NotImplemented "Instruction CMP not yet implemented."
	080 Move X23, 0x781000
	081 Move X8, [X23+1096]
	082 Compare X8, 0
	083 JumpIfNotEqual {89}
	084 Move X0, -51789824
	085 Add X0, X0, 1328
	086 Call 0x1C17CB8
	087 Move X8, X0
	088 Move [X23+1096], X0
	089 Move X0, X20
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Move X8, [X23+1096]
	092 Move W21, W0
	093 Compare X8, 0
	094 JumpIfNotEqual {100}
	095 Move X0, -51789824
	096 Add X0, X0, 1328
	097 Call 0x1C17CB8
	098 Move X8, X0
	099 Move [X23+1096], X0
	100 Move X0, X19
	101 NotImplemented "Instruction BLR not yet implemented."
	102 Xor W8, W0, W21
	103 And W31, W8, 0xFFFFFFDF
	104 Move W0, W31
	105 Move W0, 1
	106 Move X20, [X31+48]
	107 Move X19, [X31+56]
	108 Move X22, [X31+32]
	109 Move X21, [X31+40]
	110 Move X30, [X31+16]
	111 Move X23, [X31+24]
	112 Move D9, [X31+64]
	113 Move D8, [X31+72]
	114 Return X0
	115 Move X8, [X22+1192]
	116 Compare X8, 0
	117 JumpIfNotEqual {123}
	118 Move X0, -51855360
	119 Add X0, X0, 1382
	120 Call 0x1C17CB8
	121 Move X8, X0
	122 Move [X22+1192], X0
	123 Move X0, X20
	124 NotImplemented "Instruction BLR not yet implemented."
	125 And W8, W0, 0xFFFFFFFE
	126 NotImplemented "Instruction CMP not yet implemented."
	127 Move X21, 0x781000
	128 Move X8, [X21+1160]
	129 Compare X8, 0
	130 JumpIfNotEqual {136}
	131 Move X0, -51675136
	132 Add X0, X0, 1451
	133 Call 0x1C17CB8
	134 Move X8, X0
	135 Move [X21+1160], X0
	136 Move X0, X20
	137 NotImplemented "Instruction BLR not yet implemented."
	138 Move X8, [X21+1160]
	139 Move W20, W0
	140 Compare X8, 0
	141 JumpIfNotEqual {147}
	142 Move X0, -51675136
	143 Add X0, X0, 1451
	144 Call 0x1C17CB8
	145 Move X8, X0
	146 Move [X21+1160], X0
	147 Move X0, X19
	148 NotImplemented "Instruction BLR not yet implemented."
	149 NotImplemented "Instruction CMP not yet implemented."
	150 NotImplemented "Instruction CSET not yet implemented."
	151 Move X0, X20
	152 Call Event.get_isMouse, X0
	153 Move TEMP, X0
	154 And TEMP, TEMP, 1
	155 Compare TEMP, 1
	156 JumpIfNotEqual {104}
	157 Move X0, X20
	158 Call Event.get_mousePosition, X0
	159 Move X0, X19
	160 Move V8, V0
	161 Move V9, V1
	162 Call Event.get_mousePosition, X0
	163 Move X8, -51888128
	164 Move V2, [X8+3872]
	165 Subtract S0, S8, S0
	166 Subtract S1, S9, S1
	167 Multiply S0, S0, S0
	168 Multiply S1, S1, S1
	169 Add S0, S0, S1
	170 NotImplemented "Instruction FCMP not yet implemented."
	171 NotImplemented "Instruction CSET not yet implemented."
	172 Move X0, X19
	173 Call 0x1C181E0

Method: System.String ToString()

Disassembly:
	0x03C66A8C LDR X1, [X20 + 0x560]
	0x03C66A90 MOV W19, W0
	0x03C66A94 CBNZ X1, 0x3C66AAC
	0x03C66A98 ADRP X0, 0xFFFFFFFFFCEAB000
	0x03C66A9C ADD X0, X0, 0x556
	0x03C66AA0 BL 0x1C16CB8
	0x03C66AA4 MOV X1, X0
	0x03C66AA8 STR X0, [X20 + 0x560]
	0x03C66AAC AND W0, W19, 0x1
	0x03C66AB0 LDP X20, X19, [X31 + 0x10]
	0x03C66AB4 LDR X30, [X31], #0x20
	0x03C66AB8 BR X1
	0x03C66ABC STP X30, X19, [X31 - 0x10]!
	0x03C66AC0 ADRP X19, 0x780000
	0x03C66AC4 LDR X0, [X19 + 0x568]
	0x03C66AC8 CBNZ X0, 0x3C66ADC
	0x03C66ACC ADRP X0, 0xFFFFFFFFFCEB9000
	0x03C66AD0 ADD X0, X0, 0x3CE
	0x03C66AD4 BL 0x1C16CB8
	0x03C66AD8 STR X0, [X19 + 0x568]
	0x03C66ADC LDP X30, X19, [X31], #0x10
	0x03C66AE0 BR X0
	0x03C66AE4 STP X30, X19, [X31 - 0x10]!
	0x03C66AE8 ADRP X19, 0x780000
	0x03C66AEC LDR X0, [X19 + 0x570]
	0x03C66AF0 CBNZ X0, 0x3C66B04
	0x03C66AF4 ADRP X0, 0xFFFFFFFFFCE89000
	0x03C66AF8 ADD X0, X0, 0x570
	0x03C66AFC BL 0x1C16CB8
	0x03C66B00 STR X0, [X19 + 0x570]
	0x03C66B04 LDP X30, X19, [X31], #0x10
	0x03C66B08 BR X0
	0x03C66B0C STP X30, X19, [X31 - 0x10]!
	0x03C66B10 ADRP X19, 0x780000
	0x03C66B14 LDR X0, [X19 + 0x578]
	0x03C66B18 CBNZ X0, 0x3C66B2C
	0x03C66B1C ADRP X0, 0xFFFFFFFFFCEC4000
	0x03C66B20 ADD X0, X0, 0xED2
	0x03C66B24 BL 0x1C16CB8
	0x03C66B28 STR X0, [X19 + 0x578]
	0x03C66B2C LDP X30, X19, [X31], #0x10
	0x03C66B30 BR X0
	0x03C66B34 STP X30, X19, [X31 - 0x10]!
	0x03C66B38 ADRP X19, 0x780000
	0x03C66B3C LDR X0, [X19 + 0x580]
	0x03C66B40 CBNZ X0, 0x3C66B54
	0x03C66B44 ADRP X0, 0xFFFFFFFFFCEA3000
	0x03C66B48 ADD X0, X0, 0x92B
	0x03C66B4C BL 0x1C16CB8
	0x03C66B50 STR X0, [X19 + 0x580]
	0x03C66B54 LDP X30, X19, [X31], #0x10
	0x03C66B58 BR X0
	0x03C66B5C STP X30, X19, [X31 - 0x10]!
	0x03C66B60 ADRP X19, 0x780000
	0x03C66B64 LDR X0, [X19 + 0x588]
	0x03C66B68 CBNZ X0, 0x3C66B7C
	0x03C66B6C ADRP X0, 0xFFFFFFFFFCEC6000
	0x03C66B70 ADD X0, X0, 0xC2C
	0x03C66B74 BL 0x1C16CB8
	0x03C66B78 STR X0, [X19 + 0x588]
	0x03C66B7C LDP X30, X19, [X31], #0x10
	0x03C66B80 BR X0
	0x03C66B84 STR X30, [X31 - 0x20]!
	0x03C66B88 STP X20, X19, [X31 + 0x10]
	0x03C66B8C ADRP X20, 0x780000
	0x03C66B90 LDR X1, [X20 + 0x590]
	0x03C66B94 MOV W19, W0
	0x03C66B98 CBNZ X1, 0x3C66BB0
	0x03C66B9C ADRP X0, 0xFFFFFFFFFCE97000
	0x03C66BA0 ADD X0, X0, 0x831
	0x03C66BA4 BL 0x1C16CB8
	0x03C66BA8 MOV X1, X0
	0x03C66BAC STR X0, [X20 + 0x590]
	0x03C66BB0 MOV W0, W19
	0x03C66BB4 LDP X20, X19, [X31 + 0x10]
	0x03C66BB8 LDR X30, [X31], #0x20
	0x03C66BBC BR X1
	0x03C66BC0 STR X30, [X31 - 0x20]!
	0x03C66BC4 STP X20, X19, [X31 + 0x10]
	0x03C66BC8 ADRP X20, 0x780000
	0x03C66BCC LDR X1, [X20 + 0x598]
	0x03C66BD0 MOV W19, W0
	0x03C66BD4 CBNZ X1, 0x3C66BEC
	0x03C66BD8 ADRP X0, 0xFFFFFFFFFCEAB000
	0x03C66BDC ADD X0, X0, 0x583
	0x03C66BE0 BL 0x1C16CB8
	0x03C66BE4 MOV X1, X0
	0x03C66BE8 STR X0, [X20 + 0x598]
	0x03C66BEC MOV W0, W19
	0x03C66BF0 LDP X20, X19, [X31 + 0x10]
	0x03C66BF4 LDR X30, [X31], #0x20
	0x03C66BF8 BR X1
	0x03C66BFC STP X30, X19, [X31 - 0x10]!
	0x03C66C00 ADRP X19, 0x780000
	0x03C66C04 LDR X0, [X19 + 0x5A0]
	0x03C66C08 CBNZ X0, 0x3C66C1C
	0x03C66C0C ADRP X0, 0xFFFFFFFFFCE8B000
	0x03C66C10 ADD X0, X0, 0x5C8
	0x03C66C14 BL 0x1C16CB8
	0x03C66C18 STR X0, [X19 + 0x5A0]
	0x03C66C1C LDP X30, X19, [X31], #0x10
	0x03C66C20 BR X0
	0x03C66C24 STP X30, X19, [X31 - 0x10]!
	0x03C66C28 ADRP X19, 0x780000
	0x03C66C2C LDR X0, [X19 + 0x5A8]
	0x03C66C30 CBNZ X0, 0x3C66C44
	0x03C66C34 ADRP X0, 0xFFFFFFFFFCEC6000
	0x03C66C38 ADD X0, X0, 0xC69
	0x03C66C3C BL 0x1C16CB8
	0x03C66C40 STR X0, [X19 + 0x5A8]
	0x03C66C44 LDP X30, X19, [X31], #0x10
	0x03C66C48 BR X0
	0x03C66C4C SUB X31, X31, 0x80
	0x03C66C50 STP X30, X27, [X31 + 0x30]
	0x03C66C54 STP X26, X25, [X31 + 0x40]
	0x03C66C58 STP X24, X23, [X31 + 0x50]
	0x03C66C5C STP X22, X21, [X31 + 0x60]
	0x03C66C60 STP X20, X19, [X31 + 0x70]
	0x03C66C64 ADRP X27, 0x780000
	0x03C66C68 STP S0, S1, [X31 + 0x20]
	0x03C66C6C STP S2, S3, [X31 + 0x28]
	0x03C66C70 ADRP X26, 0x4B4000
	0x03C66C74 LDRB W8, [X27 + 0x5B0]
	0x03C66C78 LDR X26, [X26 + 0x4C0]
	0x03C66C7C MOV W23, W6
	0x03C66C80 MOV X19, X5
	0x03C66C84 MOV X20, X4
	0x03C66C88 MOV X21, X3
	0x03C66C8C MOV X22, X2
	0x03C66C90 MOV W24, W1
	0x03C66C94 MOV W25, W0
	0x03C66C98 TBNZ X8, 0x0, 0x3C66CB0
	0x03C66C9C ADRP X0, 0x4B4000
	0x03C66CA0 LDR X0, [X0 + 0x4C0]
	0x03C66CA4 BL 0x1C16CF4
	0x03C66CA8 MOVZ W8, 0x1
	0x03C66CAC STRB W8, [X27 + 0x5B0]
	0x03C66CB0 LDR X0, [X26]
	0x03C66CB4 STP X31, X31, [X31 + 0x10]
	0x03C66CB8 LDR W8, [X0 + 0xE0]
	0x03C66CBC CBNZ W8, 0x3C66CC4
	0x03C66CC0 BL 0x1C16DFC
	0x03C66CC4 ADRP X26, 0x780000
	0x03C66CC8 LDR X8, [X26 + 0x610]
	0x03C66CCC CBNZ X8, 0x3C66CE4
	0x03C66CD0 ADRP X0, 0xFFFFFFFFFCEBB000
	0x03C66CD4 ADD X0, X0, 0x172
	0x03C66CD8 BL 0x1C16CB8
	0x03C66CDC MOV X8, X0
	0x03C66CE0 STR X0, [X26 + 0x610]
	0x03C66CE4 ADD X9, X31, 0x10
	0x03C66CE8 AND W7, W23, 0x1
	0x03C66CEC ADD X2, X31, 0x20
	0x03C66CF0 MOV W0, W25
	0x03C66CF4 MOV W1, W24
	0x03C66CF8 MOV X3, X22
	0x03C66CFC MOV X4, X21
	0x03C66D00 MOV X5, X20
	0x03C66D04 MOV X6, X19
	0x03C66D08 STR X9, [X31]
	0x03C66D0C BLR X8
	0x03C66D10 LDP S0, S1, [X31 + 0x10]
	0x03C66D14 LDP S2, S3, [X31 + 0x18]
	0x03C66D18 LDP X20, X19, [X31 + 0x70]
	0x03C66D1C LDP X22, X21, [X31 + 0x60]
	0x03C66D20 LDP X24, X23, [X31 + 0x50]
	0x03C66D24 LDP X26, X25, [X31 + 0x40]
	0x03C66D28 LDP X30, X27, [X31 + 0x30]
	0x03C66D2C ADD X31, X31, 0x80
	0x03C66D30 RET
	0x03C66D34 STR X30, [X31 - 0x60]!
	0x03C66D38 STP X28, X27, [X31 + 0x10]
	0x03C66D3C STP X26, X25, [X31 + 0x20]
	0x03C66D40 STP X24, X23, [X31 + 0x30]
	0x03C66D44 STP X22, X21, [X31 + 0x40]
	0x03C66D48 STP X20, X19, [X31 + 0x50]
	0x03C66D4C ADRP X28, 0x780000
	0x03C66D50 LDR X8, [X28 + 0x610]
	0x03C66D54 LDR X27, [X31 + 0x60]
	0x03C66D58 MOV W23, W7
	0x03C66D5C MOV X19, X6
	0x03C66D60 MOV X20, X5
	0x03C66D64 MOV X21, X4
	0x03C66D68 MOV X22, X3
	0x03C66D6C MOV X24, X2
	0x03C66D70 MOV W25, W1
	0x03C66D74 MOV W26, W0
	0x03C66D78 CBNZ X8, 0x3C66D90
	0x03C66D7C ADRP X0, 0xFFFFFFFFFCEBB000
	0x03C66D80 ADD X0, X0, 0x172
	0x03C66D84 BL 0x1C16CB8
	0x03C66D88 MOV X8, X0
	0x03C66D8C STR X0, [X28 + 0x610]
	0x03C66D90 AND W7, W23, 0x1
	0x03C66D94 STR X27, [X31 + 0x60]
	0x03C66D98 MOV W0, W26
	0x03C66D9C MOV W1, W25
	0x03C66DA0 MOV X2, X24
	0x03C66DA4 MOV X3, X22
	0x03C66DA8 MOV X4, X21
	0x03C66DAC MOV X5, X20
	0x03C66DB0 MOV X6, X19
	0x03C66DB4 LDP X20, X19, [X31 + 0x50]
	0x03C66DB8 LDP X22, X21, [X31 + 0x40]
	0x03C66DBC LDP X24, X23, [X31 + 0x30]
	0x03C66DC0 LDP X26, X25, [X31 + 0x20]
	0x03C66DC4 LDP X28, X27, [X31 + 0x10]
	0x03C66DC8 LDR X30, [X31], #0x60
	0x03C66DCC BR X8
	0x03C66DD0 SUB X31, X31, 0x30
	0x03C66DD4 STR X30, [X31 + 0x10]
	0x03C66DD8 STP X20, X19, [X31 + 0x20]
	0x03C66DDC ADRP X19, 0x780000
	0x03C66DE0 STP S0, S1, [X31]
	0x03C66DE4 STP S2, S3, [X31 + 0x8]
	0x03C66DE8 ADRP X20, 0x4B4000
	0x03C66DEC LDRB W8, [X19 + 0x5B1]
	0x03C66DF0 LDR X20, [X20 + 0x4C0]
	0x03C66DF4 TBNZ X8, 0x0, 0x3C66E0C
	0x03C66DF8 ADRP X0, 0x4B4000
	0x03C66DFC LDR X0, [X0 + 0x4C0]
	0x03C66E00 BL 0x1C16CF4
	0x03C66E04 MOVZ W8, 0x1
	0x03C66E08 STRB W8, [X19 + 0x5B1]
	0x03C66E0C LDR X0, [X20]
	0x03C66E10 LDR W8, [X0 + 0xE0]
	0x03C66E14 CBNZ W8, 0x3C66E1C
	0x03C66E18 BL 0x1C16DFC
	0x03C66E1C ADRP X19, 0x780000
	0x03C66E20 LDR X8, [X19 + 0x618]
	0x03C66E24 CBNZ X8, 0x3C66E3C
	0x03C66E28 ADRP X0, 0xFFFFFFFFFCEAD000
	0x03C66E2C ADD X0, X0, 0x2DF
	0x03C66E30 BL 0x1C16CB8
	0x03C66E34 MOV X8, X0
	0x03C66E38 STR X0, [X19 + 0x618]
	0x03C66E3C ADD X0, X31, 0x0
	0x03C66E40 BLR X8
	0x03C66E44 LDP X20, X19, [X31 + 0x20]
	0x03C66E48 LDR X30, [X31 + 0x10]
	0x03C66E4C ADD X31, X31, 0x30
	0x03C66E50 RET
	0x03C66E54 STR X30, [X31 - 0x20]!
	0x03C66E58 STP X20, X19, [X31 + 0x10]
	0x03C66E5C ADRP X20, 0x780000
	0x03C66E60 LDR X1, [X20 + 0x618]
	0x03C66E64 MOV X19, X0
	0x03C66E68 CBNZ X1, 0x3C66E80
	0x03C66E6C ADRP X0, 0xFFFFFFFFFCEAD000
	0x03C66E70 ADD X0, X0, 0x2DF
	0x03C66E74 BL 0x1C16CB8
	0x03C66E78 MOV X1, X0
	0x03C66E7C STR X0, [X20 + 0x618]
	0x03C66E80 MOV X0, X19
	0x03C66E84 LDP X20, X19, [X31 + 0x10]
	0x03C66E88 LDR X30, [X31], #0x20
	0x03C66E8C BR X1
	0x03C66E90 STP X30, X21, [X31 - 0x20]!
	0x03C66E94 STP X20, X19, [X31 + 0x10]
	0x03C66E98 ADRP X21, 0x780000
	0x03C66E9C ADRP X20, 0x4B4000
	0x03C66EA0 ADRP X19, 0x4FA000
	0x03C66EA4 LDRB W8, [X21 + 0x5B2]
	0x03C66EA8 LDR X20, [X20 + 0x4C0]
	0x03C66EAC LDR X19, [X19 + 0x238]
	0x03C66EB0 TBNZ X8, 0x0, 0x3C66F40
	0x03C66EB4 ADRP X0, 0x48E000
	0x03C66EB8 LDR X0, [X0 + 0x9F0]
	0x03C66EBC BL 0x1C16CF4
	0x03C66EC0 ADRP X0, 0x4B4000
	0x03C66EC4 LDR X0, [X0 + 0x4C0]
	0x03C66EC8 BL 0x1C16CF4
	0x03C66ECC ADRP X0, 0x4FA000
	0x03C66ED0 LDR X0, [X0 + 0x240]
	0x03C66ED4 BL 0x1C16CF4
	0x03C66ED8 ADRP X0, 0x4FA000
	0x03C66EDC LDR X0, [X0 + 0x248]
	0x03C66EE0 BL 0x1C16CF4
	0x03C66EE4 ADRP X0, 0x4FA000
	0x03C66EE8 LDR X0, [X0 + 0x250]
	0x03C66EEC BL 0x1C16CF4
	0x03C66EF0 ADRP X0, 0x4DF000
	0x03C66EF4 LDR X0, [X0 + 0x350]
	0x03C66EF8 BL 0x1C16CF4
	0x03C66EFC ADRP X0, 0x4FA000
	0x03C66F00 LDR X0, [X0 + 0x238]
	0x03C66F04 BL 0x1C16CF4
	0x03C66F08 ADRP X0, 0x4FA000
	0x03C66F0C LDR X0, [X0 + 0x258]
	0x03C66F10 BL 0x1C16CF4
	0x03C66F14 ADRP X0, 0x4FA000
	0x03C66F18 LDR X0, [X0 + 0x260]
	0x03C66F1C BL 0x1C16CF4
	0x03C66F20 ADRP X0, 0x4FA000
	0x03C66F24 LDR X0, [X0 + 0x268]
	0x03C66F28 BL 0x1C16CF4
	0x03C66F2C ADRP X0, 0x4FA000
	0x03C66F30 LDR X0, [X0 + 0x270]
	0x03C66F34 BL 0x1C16CF4
	0x03C66F38 MOVZ W8, 0x1
	0x03C66F3C STRB W8, [X21 + 0x5B2]
	0x03C66F40 LDR X8, [X20]
	0x03C66F44 MOVN W9, 0x0
	0x03C66F48 LDR X8, [X8 + 0xB8]
	0x03C66F4C STR W9, [X8]
	0x03C66F50 LDR X0, [X19]
	0x03C66F54 CBZ X0, 0x3C6711C
	0x03C66F58 LDR X8, [X0]
	0x03C66F5C ADRP X19, 0x4DF000
	0x03C66F60 LDP X9, X1, [X8 + 0x158]
	0x03C66F64 LDR X19, [X19 + 0x350]
	0x03C66F68 BLR X9
	0x03C66F6C LDR X8, [X20]
	0x03C66F70 LDR X8, [X8 + 0xB8]
	0x03C66F74 STR W0, [X8 + 0x4]
	0x03C66F78 LDR X0, [X19]
	0x03C66F7C CBZ X0, 0x3C6711C
	0x03C66F80 LDR X8, [X0]
	0x03C66F84 ADRP X19, 0x4FA000
	0x03C66F88 LDP X9, X1, [X8 + 0x158]
	0x03C66F8C LDR X19, [X19 + 0x248]
	0x03C66F90 BLR X9
	0x03C66F94 LDR X8, [X20]
	0x03C66F98 LDR X8, [X8 + 0xB8]
	0x03C66F9C STR W0, [X8 + 0x8]
	0x03C66FA0 LDR X0, [X19]
	0x03C66FA4 CBZ X0, 0x3C6711C
	0x03C66FA8 LDR X8, [X0]
	0x03C66FAC ADRP X19, 0x4FA000
	0x03C66FB0 LDP X9, X1, [X8 + 0x158]
	0x03C66FB4 LDR X19, [X19 + 0x268]
	0x03C66FB8 BLR X9
	0x03C66FBC LDR X8, [X20]
	0x03C66FC0 LDR X8, [X8 + 0xB8]
	0x03C66FC4 STR W0, [X8 + 0xC]
	0x03C66FC8 LDR X0, [X19]
	0x03C66FCC CBZ X0, 0x3C6711C
	0x03C66FD0 LDR X8, [X0]
	0x03C66FD4 ADRP X19, 0x4FA000
	0x03C66FD8 LDP X9, X1, [X8 + 0x158]
	0x03C66FDC LDR X19, [X19 + 0x270]
	0x03C66FE0 BLR X9
	0x03C66FE4 LDR X8, [X20]
	0x03C66FE8 LDR X8, [X8 + 0xB8]
	0x03C66FEC STR W0, [X8 + 0x10]
	0x03C66FF0 LDR X0, [X19]
	0x03C66FF4 CBZ X0, 0x3C6711C
	0x03C66FF8 LDR X8, [X0]
	0x03C66FFC ADRP X19, 0x4FA000
	0x03C67000 LDP X9, X1, [X8 + 0x158]
	0x03C67004 LDR X19, [X19 + 0x260]
	0x03C67008 BLR X9
	0x03C6700C LDR X8, [X20]
	0x03C67010 LDR X8, [X8 + 0xB8]
	0x03C67014 STR W0, [X8 + 0x14]
	0x03C67018 LDR X0, [X19]
	0x03C6701C CBZ X0, 0x3C6711C
	0x03C67020 LDR X8, [X0]
	0x03C67024 ADRP X19, 0x4F9000
	0x03C67028 LDP X9, X1, [X8 + 0x158]
	0x03C6702C LDR X19, [X19 + 0x258]
	0x03C67030 BLR X9
	0x03C67034 LDR X8, [X20]
	0x03C67038 LDR X8, [X8 + 0xB8]
	0x03C6703C STR W0, [X8 + 0x18]
	0x03C67040 LDR X0, [X19]
	0x03C67044 CBZ X0, 0x3C6711C
	0x03C67048 LDR X8, [X0]
	0x03C6704C ADRP X19, 0x4F9000
	0x03C67050 LDP X9, X1, [X8 + 0x158]
	0x03C67054 LDR X19, [X19 + 0x250]
	0x03C67058 BLR X9
	0x03C6705C LDR X8, [X20]
	0x03C67060 LDR X8, [X8 + 0xB8]
	0x03C67064 STR W0, [X8 + 0x1C]
	0x03C67068 LDR X0, [X19]
	0x03C6706C CBZ X0, 0x3C6711C
	0x03C67070 LDR X8, [X0]
	0x03C67074 ADRP X19, 0x4F9000
	0x03C67078 ADRP X21, 0x48D000
	0x03C6707C LDP X9, X1, [X8 + 0x158]
	0x03C67080 LDR X19, [X19 + 0x240]
	0x03C67084 LDR X21, [X21 + 0x9F0]
	0x03C67088 BLR X9
	0x03C6708C LDR X8, [X20]
	0x03C67090 LDR X8, [X8 + 0xB8]
	0x03C67094 STR W0, [X8 + 0x20]
	0x03C67098 LDR X0, [X19]
	0x03C6709C BL 0x1C16F10
	0x03C670A0 MOV X1, X31
	0x03C670A4 MOV X19, X0
	0x03C670A8 BL 0x3BFDCA4
	0x03C670AC LDR X8, [X20]
	0x03C670B0 LDR X8, [X8 + 0xB8]
	0x03C670B4 STR X19, [X8 + 0x48]
	0x03C670B8 LDR X0, [X21]
	0x03C670BC LDR W8, [X0 + 0xE0]
	0x03C670C0 CBNZ W8, 0x3C670C8
	0x03C670C4 BL 0x1C16DFC
	0x03C670C8 MOV X0, X31
	0x03C670CC BL 0x3361584
	0x03C670D0 ADRP X21, 0x77F000
	0x03C670D4 LDRB W8, [X21 + 0x982]
	0x03C670D8 MOV X19, X0
	0x03C670DC CBNZ W8, 0x3C670F4
	0x03C670E0 ADRP X0, 0x4B3000
	0x03C670E4 LDR X0, [X0 + 0x4C0]
	0x03C670E8 BL 0x1C16CF4
	0x03C670EC MOVZ W8, 0x1
	0x03C670F0 STRB W8, [X21 + 0x982]
	0x03C670F4 LDR X0, [X20]
	0x03C670F8 LDR W8, [X0 + 0xE0]
	0x03C670FC CBNZ W8, 0x3C67108
	0x03C67100 BL 0x1C16DFC
	0x03C67104 LDR X0, [X20]
	0x03C67108 LDR X8, [X0 + 0xB8]
	0x03C6710C STR X19, [X8 + 0x28]
	0x03C67110 LDP X20, X19, [X31 + 0x10]
	0x03C67114 LDP X30, X21, [X31], #0x20
	0x03C67118 RET
	0x03C6711C BL 0x1C16F20
	0x03C67120 STR X30, [X31 - 0x20]!
	0x03C67124 STP X20, X19, [X31 + 0x10]
	0x03C67128 ADRP X20, 0x77F000
	0x03C6712C ADRP X19, 0x4B3000
	0x03C67130 LDRB W8, [X20 + 0x5B3]
	0x03C67134 LDR X19, [X19 + 0x4C0]
	0x03C67138 TBNZ X8, 0x0, 0x3C67150
	0x03C6713C ADRP X0, 0x4B3000
	0x03C67140 LDR X0, [X0 + 0x4C0]
	0x03C67144 BL 0x1C16CF4
	0x03C67148 MOVZ W8, 0x1
	0x03C6714C STRB W8, [X20 + 0x5B3]
	0x03C67150 LDR X0, [X19]
	0x03C67154 LDR W8, [X0 + 0xE0]
	0x03C67158 CBNZ W8, 0x3C67164
	0x03C6715C BL 0x1C16DFC
	0x03C67160 LDR X0, [X19]
	0x03C67164 LDR X8, [X0 + 0xB8]
	0x03C67168 LDP X20, X19, [X31 + 0x10]
	0x03C6716C LDR W0, [X8 + 0x24]
	0x03C67170 LDR X30, [X31], #0x20
	0x03C67174 RET
	0x03C67178 STP X30, X21, [X31 - 0x20]!
	0x03C6717C STP X20, X19, [X31 + 0x10]
	0x03C67180 ADRP X21, 0x77F000
	0x03C67184 ADRP X20, 0x4B3000
	0x03C67188 LDRB W8, [X21 + 0x5B4]
	0x03C6718C LDR X20, [X20 + 0x4C0]
	0x03C67190 MOV W19, W0
	0x03C67194 TBNZ X8, 0x0, 0x3C671AC
	0x03C67198 ADRP X0, 0x4B3000
	0x03C6719C LDR X0, [X0 + 0x4C0]
	0x03C671A0 BL 0x1C16CF4
	0x03C671A4 MOVZ W8, 0x1
	0x03C671A8 STRB W8, [X21 + 0x5B4]
	0x03C671AC LDR X0, [X20]
	0x03C671B0 LDR W8, [X0 + 0xE0]
	0x03C671B4 CBNZ W8, 0x3C671C0
	0x03C671B8 BL 0x1C16DFC
	0x03C671BC LDR X0, [X20]
	0x03C671C0 LDR X8, [X0 + 0xB8]
	0x03C671C4 STR W19, [X8 + 0x24]
	0x03C671C8 LDP X20, X19, [X31 + 0x10]
	0x03C671CC LDP X30, X21, [X31], #0x20
	0x03C671D0 RET
	0x03C671D4 STR X30, [X31 - 0x20]!
	0x03C671D8 STP X20, X19, [X31 + 0x10]
	0x03C671DC ADRP X20, 0x77F000
	0x03C671E0 ADRP X19, 0x4B3000
	0x03C671E4 LDRB W8, [X20 + 0x5B5]
	0x03C671E8 LDR X19, [X19 + 0x4C0]
	0x03C671EC TBNZ X8, 0x0, 0x3C67204
	0x03C671F0 ADRP X0, 0x4B3000
	0x03C671F4 LDR X0, [X0 + 0x4C0]
	0x03C671F8 BL 0x1C16CF4
	0x03C671FC MOVZ W8, 0x1
	0x03C67200 STRB W8, [X20 + 0x5B5]
	0x03C67204 LDR X0, [X19]
	0x03C67208 LDR W8, [X0 + 0xE0]
	0x03C6720C CBNZ W8, 0x3C67218
	0x03C67210 BL 0x1C16DFC
	0x03C67214 LDR X0, [X19]
	0x03C67218 LDR X8, [X0 + 0xB8]
	0x03C6721C LDP X20, X19, [X31 + 0x10]
	0x03C67220 LDR X0, [X8 + 0x28]
	0x03C67224 LDR X30, [X31], #0x20
	0x03C67228 RET
	0x03C6722C STP X30, X21, [X31 - 0x20]!
	0x03C67230 STP X20, X19, [X31 + 0x10]
	0x03C67234 ADRP X21, 0x77F000
	0x03C67238 ADRP X20, 0x4B3000
	0x03C6723C LDRB W8, [X21 + 0x5B6]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+80], X30
	003 Move [X31+96], X22
	004 Move [X31+104], X21
	005 Move [X31+112], X20
	006 Move [X31+120], X19
	007 Move X20, 0x781000
	008 Move W8, [X20+1300]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {58}
	014 Move X0, 0x4FB000
	015 Move X0, [X0+496]
	016 Call 0x1C17CF4
	017 Move X0, 0x4B7000
	018 Move X0, [X0+3688]
	019 Call 0x1C17CF4
	020 Move X0, 0x4FB000
	021 Move X0, [X0+280]
	022 Call 0x1C17CF4
	023 Move X0, 0x48E000
	024 Move X0, [X0+2512]
	025 Call 0x1C17CF4
	026 Move X0, 0x48E000
	027 Move X0, [X0+2760]
	028 Call 0x1C17CF4
	029 Move X0, 0x496000
	030 Move X0, [X0+3848]
	031 Call 0x1C17CF4
	032 Move X0, 0x4FB000
	033 Move X0, [X0+504]
	034 Call 0x1C17CF4
	035 Move X0, 0x4FB000
	036 Move X0, [X0+512]
	037 Call 0x1C17CF4
	038 Move X0, 0x4FB000
	039 Move X0, [X0+520]
	040 Call 0x1C17CF4
	041 Move X0, 0x4FB000
	042 Move X0, [X0+528]
	043 Call 0x1C17CF4
	044 Move X0, 0x4FB000
	045 Move X0, [X0+536]
	046 Call 0x1C17CF4
	047 Move X0, 0x4FB000
	048 Move X0, [X0+544]
	049 Call 0x1C17CF4
	050 Move X0, 0x4FB000
	051 Move X0, [X0+552]
	052 Call 0x1C17CF4
	053 Move X0, 0x48E000
	054 Move X0, [X0+2440]
	055 Call 0x1C17CF4
	056 Move W8, 1
	057 Move [X20+1300], W8
	058 Move X21, 0x781000
	059 Move X8, [X21+1192]
	060 Move [X31+92], W31
	061 Compare X8, 0
	062 JumpIfNotEqual {68}
	063 Move X0, -51855360
	064 Add X0, X0, 1382
	065 Call 0x1C17CB8
	066 Move X8, X0
	067 Move [X21+1192], X0
	068 Move X0, X19
	069 NotImplemented "Instruction BLR not yet implemented."
	070 And W8, W0, 0xFFFFFFFE
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move X22, 0x781000
	073 Move X8, [X22+1144]
	074 Compare X8, 0
	075 JumpIfNotEqual {81}
	076 Move X0, -51822592
	077 Add X0, X0, 2504
	078 Call 0x1C17CB8
	079 Move X8, X0
	080 Move [X22+1144], X0
	081 Move X0, X19
	082 NotImplemented "Instruction BLR not yet implemented."
	083 And W31, W0, 0xFFFF
	084 Move X8, 0x48E000
	085 Move X8, [X8+2760]
	086 Move W1, 8
	087 Move X0, [X8]
	088 Call 0x1C17D6C
	089 Compare X0, 0
	090 JumpIfEqual {536}
	091 Move W8, [X0+24]
	092 Move X20, X0
	093 Compare W8, 0
	094 JumpIfEqual {532}
	095 Move X8, 0x4FB000
	096 Move X8, [X8+520]
	097 Move X8, [X8]
	098 Move [X20+32], X8
	099 Move X8, [X21+1192]
	100 Compare X8, 0
	101 JumpIfNotEqual {107}
	102 Move X0, -51855360
	103 Add X0, X0, 1382
	104 Call 0x1C17CB8
	105 Move X8, X0
	106 Move [X21+1192], X0
	107 Move X0, X19
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move X8, 0x4B7000
	110 Move X8, [X8+3688]
	111 Move TEMP, 0
	112 Not TEMP
	113 Move X9, TEMP
	114 Move [X31+72], W0
	115 Add X0, X31, 56
	116 Move X8, [X8]
	117 Move X1, X31
	118 Move [X31+56], X8
	119 Move [X31+64], X9
	120 Call Enum.ToString, X0
	121 Move W8, [X20+24]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move [X20+40], X0
	125 Move X8, 0x4FB000
	126 Move X8, [X8+512]
	127 Move X8, [X8]
	128 Move [X20+48], X8
	129 Move X8, [X22+1144]
	130 Compare X8, 0
	131 JumpIfNotEqual {137}
	132 Move X0, -51822592
	133 Add X0, X0, 2504
	134 Call 0x1C17CB8
	135 Move X8, X0
	136 Move [X22+1144], X0
	137 Move X0, X19
	138 NotImplemented "Instruction BLR not yet implemented."
	139 And W8, W0, 0xFFFF
	140 Add X0, X31, 92
	141 Move X1, X31
	142 Move [X31+92], W8
	143 Call Int32.ToString, X0
	144 Move W8, [X20+24]
	145 NotImplemented "Instruction CMP not yet implemented."
	146 NotImplemented "Instruction CMP not yet implemented."
	147 Move [X20+56], X0
	148 Move X8, 0x4FB000
	149 Move X8, [X8+536]
	150 Move X21, 0x781000
	151 Move X8, [X8]
	152 Move [X20+64], X8
	153 Move X8, [X21+1096]
	154 Compare X8, 0
	155 JumpIfNotEqual {161}
	156 Move X0, -51789824
	157 Add X0, X0, 1328
	158 Call 0x1C17CB8
	159 Move X8, X0
	160 Move [X21+1096], X0
	161 Move X0, X19
	162 NotImplemented "Instruction BLR not yet implemented."
	163 Move X8, 0x4FB000
	164 Move X8, [X8+496]
	165 Move TEMP, 0
	166 Not TEMP
	167 Move X9, TEMP
	168 Move [X31+48], W0
	169 Add X0, X31, 32
	170 Move X8, [X8]
	171 Move X1, X31
	172 Move [X31+32], X8
	173 Move [X31+40], X9
	174 Call Enum.ToString, X0
	175 Move W8, [X20+24]
	176 NotImplemented "Instruction CMP not yet implemented."
	177 NotImplemented "Instruction CMP not yet implemented."
	178 Move [X20+72], X0
	179 Move X8, 0x4FB000
	180 Move X8, [X8+552]
	181 Move X21, 0x781000
	182 Move X8, [X8]
	183 Move [X20+80], X8
	184 Move X8, [X21+1160]
	185 Compare X8, 0
	186 JumpIfNotEqual {192}
	187 Move X0, -51675136
	188 Add X0, X0, 1451
	189 Call 0x1C17CB8
	190 Move X8, X0
	191 Move [X21+1160], X0
	192 Move X0, X19
	193 NotImplemented "Instruction BLR not yet implemented."
	194 Move X8, 0x4FB000
	195 Move X8, [X8+280]
	196 Move TEMP, 0
	197 Not TEMP
	198 Move X9, TEMP
	199 Move [X31+24], W0
	200 Add X0, X31, 8
	201 Move X8, [X8]
	202 Move X1, X31
	203 Move [X31+8], X8
	204 Move [X31+16], X9
	205 Call Enum.ToString, X0
	206 Move W8, [X20+24]
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move [X20+88], X0
	209 Move X0, X20
	210 Move X1, X31
	211 Call String.Concat, X0
	212 Move X0, X19
	213 Call Event.get_isMouse, X0
	214 Move TEMP, X0
	215 And TEMP, TEMP, 1
	216 Compare TEMP, 1
	217 JumpIfNotEqual {309}
	218 Move X8, 0x48E000
	219 Move X8, [X8+2512]
	220 Move W1, 3
	221 Move X0, [X8]
	222 Call 0x1C17D6C
	223 Move X8, [X21+1192]
	224 Move X20, X0
	225 Compare X8, 0
	226 JumpIfNotEqual {232}
	227 Move X0, -51855360
	228 Add X0, X0, 1382
	229 Call 0x1C17CB8
	230 Move X8, X0
	231 Move [X21+1192], X0
	232 Move X0, X19
	233 NotImplemented "Instruction BLR not yet implemented."
	234 Move X8, 0x4B7000
	235 Move X8, [X8+3688]
	236 Move [X31+32], W0
	237 Add X1, X31, 32
	238 Move X8, [X8]
	239 Move X0, X8
	240 Call 0x1C17E04
	241 Compare X20, 0
	242 JumpIfEqual {536}
	243 Move X21, X0
	244 Compare X0, 0
	245 JumpIfEqual {252}
	246 Move X8, [X20]
	247 Move X0, X21
	248 Move X1, [X8+64]
	249 Call 0x1C17E00
	250 Compare X0, 0
	251 JumpIfEqual {533}
	252 Move W8, [X20+24]
	253 Compare W8, 0
	254 JumpIfEqual {532}
	255 Move X0, X19
	256 Move [X20+32], X21
	257 Call Event.get_mousePosition, X0
	258 Move X8, 0x496000
	259 Move X8, [X8+3848]
	260 Add X1, X31, 56
	261 Move [X31+56], S0
	262 Move [X31+64], S1
	263 Move X0, [X8]
	264 Call 0x1C17E04
	265 Move X21, X0
	266 Compare X0, 0
	267 JumpIfEqual {274}
	268 Move X8, [X20]
	269 Move X0, X21
	270 Move X1, [X8+64]
	271 Call 0x1C17E00
	272 Compare X0, 0
	273 JumpIfEqual {533}
	274 Move W8, [X20+24]
	275 NotImplemented "Instruction CMP not yet implemented."
	276 Move [X20+40], X21
	277 Move X21, 0x781000
	278 Move X8, [X21+1096]
	279 Compare X8, 0
	280 JumpIfNotEqual {286}
	281 Move X0, -51789824
	282 Add X0, X0, 1328
	283 Call 0x1C17CB8
	284 Move X8, X0
	285 Move [X21+1096], X0
	286 Move X0, X19
	287 NotImplemented "Instruction BLR not yet implemented."
	288 Move X8, 0x4FB000
	289 Move X8, [X8+496]
	290 Move [X31+8], W0
	291 Add X1, X31, 8
	292 Move X8, [X8]
	293 Move X0, X8
	294 Call 0x1C17E04
	295 Move X19, X0
	296 Compare X0, 0
	297 JumpIfEqual {304}
	298 Move X8, [X20]
	299 Move X0, X19
	300 Move X1, [X8+64]
	301 Call 0x1C17E00
	302 Compare X0, 0
	303 JumpIfEqual {533}
	304 Move W8, [X20+24]
	305 NotImplemented "Instruction CMP not yet implemented."
	306 Move [X20+48], X19
	307 Move X8, 0x4FB000
	308 Move X8, [X8+544]
	309 Move X8, [X21+1192]
	310 Compare X8, 0
	311 JumpIfNotEqual {317}
	312 Move X0, -51855360
	313 Add X0, X0, 1382
	314 Call 0x1C17CB8
	315 Move X8, X0
	316 Move [X21+1192], X0
	317 Move X0, X19
	318 NotImplemented "Instruction BLR not yet implemented."
	319 NotImplemented "Instruction CMP not yet implemented."
	320 Move X8, [X21+1192]
	321 Compare X8, 0
	322 JumpIfNotEqual {328}
	323 Move X0, -51855360
	324 Add X0, X0, 1382
	325 Call 0x1C17CB8
	326 Move X8, X0
	327 Move [X21+1192], X0
	328 Move X0, X19
	329 NotImplemented "Instruction BLR not yet implemented."
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Move X8, 0x48E000
	332 Move X8, [X8+2512]
	333 Move W1, 2
	334 Move X0, [X8]
	335 Call 0x1C17D6C
	336 Move X8, [X21+1192]
	337 Move X20, X0
	338 Compare X8, 0
	339 JumpIfNotEqual {345}
	340 Move X0, -51855360
	341 Add X0, X0, 1382
	342 Call 0x1C17CB8
	343 Move X8, X0
	344 Move [X21+1192], X0
	345 Move X0, X19
	346 NotImplemented "Instruction BLR not yet implemented."
	347 Move X8, 0x4B7000
	348 Move X8, [X8+3688]
	349 Move [X31+56], W0
	350 Add X1, X31, 56
	351 Move X8, [X8]
	352 Move X0, X8
	353 Call 0x1C17E04
	354 Compare X20, 0
	355 JumpIfEqual {536}
	356 Move X21, X0
	357 Compare X0, 0
	358 JumpIfEqual {365}
	359 Move X8, [X20]
	360 Move X0, X21
	361 Move X1, [X8+64]
	362 Call 0x1C17E00
	363 Compare X0, 0
	364 JumpIfEqual {533}
	365 Move W8, [X20+24]
	366 Compare W8, 0
	367 JumpIfEqual {532}
	368 Move [X20+32], X21
	369 Move X21, 0x781000
	370 Move X8, [X21+1208]
	371 Compare X8, 0
	372 JumpIfNotEqual {378}
	373 Move X0, -51822592
	374 Add X0, X0, 2539
	375 Call 0x1C17CB8
	376 Move X8, X0
	377 Move [X21+1208], X0
	378 Move X0, X19
	379 NotImplemented "Instruction BLR not yet implemented."
	380 Move X19, X0
	381 Compare X0, 0
	382 JumpIfEqual {389}
	383 Move X8, [X20]
	384 Move X0, X19
	385 Move X1, [X8+64]
	386 Call 0x1C17E00
	387 Compare X0, 0
	388 JumpIfEqual {533}
	389 Move W8, [X20+24]
	390 NotImplemented "Instruction CMP not yet implemented."
	391 Move [X20+40], X19
	392 Move X8, 0x4FA000
	393 Move X8, [X8+504]
	394 Move X8, 0x48D000
	395 Move X8, [X8+2512]
	396 Move W1, 3
	397 Move X0, [X8]
	398 Call 0x1C17D6C
	399 Move X8, [X21+1192]
	400 Move X20, X0
	401 Compare X8, 0
	402 JumpIfNotEqual {408}
	403 Move X0, -51859456
	404 Add X0, X0, 1382
	405 Call 0x1C17CB8
	406 Move X8, X0
	407 Move [X21+1192], X0
	408 Move X0, X19
	409 NotImplemented "Instruction BLR not yet implemented."
	410 Move X8, 0x4B6000
	411 Move X8, [X8+3688]
	412 Move [X31+56], W0
	413 Add X1, X31, 56
	414 Move X8, [X8]
	415 Move X0, X8
	416 Call 0x1C17E04
	417 Compare X20, 0
	418 JumpIfEqual {536}
	419 Move X21, X0
	420 Compare X0, 0
	421 JumpIfEqual {428}
	422 Move X8, [X20]
	423 Move X0, X21
	424 Move X1, [X8+64]
	425 Call 0x1C17E00
	426 Compare X0, 0
	427 JumpIfEqual {533}
	428 Move W8, [X20+24]
	429 Compare W8, 0
	430 JumpIfEqual {532}
	431 Move [X20+32], X21
	432 Move X21, 0x780000
	433 Move X8, [X21+1096]
	434 Compare X8, 0
	435 JumpIfNotEqual {441}
	436 Move X0, -51793920
	437 Add X0, X0, 1328
	438 Call 0x1C17CB8
	439 Move X8, X0
	440 Move [X21+1096], X0
	441 Move X0, X19
	442 NotImplemented "Instruction BLR not yet implemented."
	443 Move X8, 0x4FA000
	444 Move X8, [X8+496]
	445 Move [X31+32], W0
	446 Add X1, X31, 32
	447 Move X8, [X8]
	448 Move X0, X8
	449 Call 0x1C17E04
	450 Move X21, X0
	451 Compare X0, 0
	452 JumpIfEqual {459}
	453 Move X8, [X20]
	454 Move X0, X21
	455 Move X1, [X8+64]
	456 Call 0x1C17E00
	457 Compare X0, 0
	458 JumpIfEqual {533}
	459 Move W8, [X20+24]
	460 NotImplemented "Instruction CMP not yet implemented."
	461 Move [X20+40], X21
	462 Move X21, 0x780000
	463 Move X8, [X21+1160]
	464 Compare X8, 0
	465 JumpIfNotEqual {471}
	466 Move X0, -51679232
	467 Add X0, X0, 1451
	468 Call 0x1C17CB8
	469 Move X8, X0
	470 Move [X21+1160], X0
	471 Move X0, X19
	472 NotImplemented "Instruction BLR not yet implemented."
	473 Move X8, 0x4FA000
	474 Move X8, [X8+280]
	475 Move [X31+8], W0
	476 Add X1, X31, 8
	477 Move X8, [X8]
	478 Move X0, X8
	479 Call 0x1C17E04
	480 Move X19, X0
	481 Compare X0, 0
	482 JumpIfEqual {489}
	483 Move X8, [X20]
	484 Move X0, X19
	485 Move X1, [X8+64]
	486 Call 0x1C17E00
	487 Compare X0, 0
	488 JumpIfEqual {533}
	489 Move W8, [X20+24]
	490 NotImplemented "Instruction CMP not yet implemented."
	491 Move [X20+48], X19
	492 Move X8, 0x4FA000
	493 Move X8, [X8+528]
	494 Move X0, [X8]
	495 Move X1, X20
	496 Move X2, X31
	497 Call UnityString.Format, X0, X1
	498 Move X20, [X31+112]
	499 Move X19, [X31+120]
	500 Move X22, [X31+96]
	501 Move X21, [X31+104]
	502 Move X30, [X31+80]
	503 Add X31, X31, 128
	504 Return X0
	505 Move X8, [X21+1192]
	506 Compare X8, 0
	507 JumpIfNotEqual {513}
	508 Move X0, -51859456
	509 Add X0, X0, 1382
	510 Call 0x1C17CB8
	511 Move X8, X0
	512 Move [X21+1192], X0
	513 Move X0, X19
	514 NotImplemented "Instruction BLR not yet implemented."
	515 Move X8, 0x4B6000
	516 Move X8, [X8+3688]
	517 Move TEMP, 0
	518 Not TEMP
	519 Move X9, TEMP
	520 Move [X31+72], W0
	521 Add X0, X31, 56
	522 Move X8, [X8]
	523 Move X1, X31
	524 Move [X31+56], X8
	525 Move [X31+64], X9
	526 Call Enum.ToString, X0
	527 Move X8, 0x48D000
	528 Move X8, [X8+2440]
	529 NotImplemented "Instruction CMP not yet implemented."
	530 Move X8, [X8]
	531 NotImplemented "Instruction CSEL not yet implemented."
	532 Call 0x1C17F28
	533 Call 0x1C17F44
	534 Move X1, X31
	535 Call 0x1C17DEC
	536 Call 0x1C17F20

Method: System.Void Use()

Disassembly:
	0x03C67240 LDR X20, [X20 + 0x4C0]
	0x03C67244 MOV X19, X0
	0x03C67248 TBNZ X8, 0x0, 0x3C67260
	0x03C6724C ADRP X0, 0x4B3000
	0x03C67250 LDR X0, [X0 + 0x4C0]
	0x03C67254 BL 0x1C16CF4
	0x03C67258 MOVZ W8, 0x1
	0x03C6725C STRB W8, [X21 + 0x5B6]
	0x03C67260 LDR X0, [X20]
	0x03C67264 LDR W8, [X0 + 0xE0]
	0x03C67268 CBNZ W8, 0x3C67274
	0x03C6726C BL 0x1C16DFC
	0x03C67270 LDR X0, [X20]
	0x03C67274 LDR X8, [X0 + 0xB8]
	0x03C67278 STR X19, [X8 + 0x28]
	0x03C6727C LDP X20, X19, [X31 + 0x10]
	0x03C67280 LDP X30, X21, [X31], #0x20
	0x03C67284 RET
	0x03C67288 STP X30, X21, [X31 - 0x20]!
	0x03C6728C STP X20, X19, [X31 + 0x10]
	0x03C67290 ADRP X21, 0x77F000
	0x03C67294 ADRP X20, 0x4B8000
	0x03C67298 LDRB W8, [X21 + 0x5B7]
	0x03C6729C LDR X20, [X20 + 0x5C8]
	0x03C672A0 MOV X19, X0
	0x03C672A4 TBNZ X8, 0x0, 0x3C672C8
	0x03C672A8 ADRP X0, 0x4B8000
	0x03C672AC LDR X0, [X0 + 0x5C8]
	0x03C672B0 BL 0x1C16CF4
	0x03C672B4 ADRP X0, 0x4B3000
	0x03C672B8 LDR X0, [X0 + 0x4C0]
	0x03C672BC BL 0x1C16CF4
	0x03C672C0 MOVZ W8, 0x1
	0x03C672C4 STRB W8, [X21 + 0x5B7]
	0x03C672C8 LDR X0, [X20]
	0x03C672CC ADRP X20, 0x4B3000
	0x03C672D0 LDR W8, [X0 + 0xE0]
	0x03C672D4 LDR X20, [X20 + 0x4C0]
	0x03C672D8 CBNZ W8, 0x3C672E0
	0x03C672DC BL 0x1C16DFC
	0x03C672E0 BL 0x3C67304
	0x03C672E4 LDR X0, [X20]
	0x03C672E8 LDR W8, [X0 + 0xE0]
	0x03C672EC CBNZ W8, 0x3C672F4
	0x03C672F0 BL 0x1C16DFC
	0x03C672F4 MOV X0, X19
	0x03C672F8 LDP X20, X19, [X31 + 0x10]
	0x03C672FC LDP X30, X21, [X31], #0x20
	0x03C67300 B 0x3C673C4
	0x03C67304 STR X30, [X31 - 0x20]!
	0x03C67308 STP X20, X19, [X31 + 0x10]
	0x03C6730C ADRP X19, 0x77F000
	0x03C67310 ADRP X20, 0x4B8000
	0x03C67314 LDRB W8, [X19 + 0x94F]
	0x03C67318 LDR X20, [X20 + 0x5C8]
	0x03C6731C TBNZ X8, 0x0, 0x3C67334
	0x03C67320 ADRP X0, 0x4B8000
	0x03C67324 LDR X0, [X0 + 0x5C8]
	0x03C67328 BL 0x1C16CF4
	0x03C6732C MOVZ W8, 0x1
	0x03C67330 STRB W8, [X19 + 0x94F]
	0x03C67334 LDR X0, [X20]
	0x03C67338 LDR W8, [X0 + 0xE0]
	0x03C6733C CBNZ W8, 0x3C67344
	0x03C67340 BL 0x1C16DFC
	0x03C67344 ADRP X19, 0x77F000
	0x03C67348 LDR X8, [X19 + 0x870]
	0x03C6734C CBNZ X8, 0x3C67364
	0x03C67350 ADRP X0, 0xFFFFFFFFFCEC4000
	0x03C67354 ADD X0, X0, 0xB7
	0x03C67358 BL 0x1C16CB8
	0x03C6735C MOV X8, X0
	0x03C67360 STR X0, [X19 + 0x870]
	0x03C67364 BLR X8
	0x03C67368 CMP W0, 0x0
	0x03C6736C B.LE 0x3C6737C
	0x03C67370 LDP X20, X19, [X31 + 0x10]
	0x03C67374 LDR X30, [X31], #0x20
	0x03C67378 RET
	0x03C6737C ADRP X0, 0x494000
	0x03C67380 LDR X0, [X0 + 0x578]
	0x03C67384 BL 0x1C16D08
	0x03C67388 BL 0x1C16F10
	0x03C6738C MOV X19, X0
	0x03C67390 ADRP X0, 0x4F9000
	0x03C67394 LDR X0, [X0 + 0x278]
	0x03C67398 BL 0x1C16D08
	0x03C6739C MOV X1, X0
	0x03C673A0 MOV X0, X19
	0x03C673A4 MOV X2, X31
	0x03C673A8 BL 0x3314A68
	0x03C673AC ADRP X0, 0x4F9000
	0x03C673B0 LDR X0, [X0 + 0x280]
	0x03C673B4 BL 0x1C16D08
	0x03C673B8 MOV X1, X0
	0x03C673BC MOV X0, X19
	0x03C673C0 BL 0x1C16DEC
	0x03C673C4 STP X30, X21, [X31 - 0x20]!
	0x03C673C8 STP X20, X19, [X31 + 0x10]
	0x03C673CC ADRP X20, 0x77F000
	0x03C673D0 ADRP X21, 0x48C000
	0x03C673D4 LDRB W8, [X20 + 0x5B9]
	0x03C673D8 LDR X21, [X21 + 0x598]
	0x03C673DC MOV X19, X0
	0x03C673E0 TBNZ X8, 0x0, 0x3C67410
	0x03C673E4 ADRP X0, 0x4B8000
	0x03C673E8 LDR X0, [X0 + 0x5C8]
	0x03C673EC BL 0x1C16CF4
	0x03C673F0 ADRP X0, 0x4B3000
	0x03C673F4 LDR X0, [X0 + 0x4C0]
	0x03C673F8 BL 0x1C16CF4
	0x03C673FC ADRP X0, 0x48C000
	0x03C67400 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x780000
	007 Move W8, [X20+1301]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x48D000
	014 Move X0, [X0+2600]
	015 Call 0x1C17CF4
	016 Move X0, 0x4B6000
	017 Move X0, [X0+3688]
	018 Call 0x1C17CF4
	019 Move X0, 0x48D000
	020 Move X0, [X0+2512]
	021 Call 0x1C17CF4
	022 Move X0, 0x4FA000
	023 Move X0, [X0+560]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+1301], W8
	027 Move X21, 0x780000
	028 Move X8, [X21+1192]
	029 Compare X8, 0
	030 JumpIfNotEqual {36}
	031 Move X0, -51859456
	032 Add X0, X0, 1382
	033 Call 0x1C17CB8
	034 Move X8, X0
	035 Move [X21+1192], X0
	036 Move X0, X19
	037 NotImplemented "Instruction BLR not yet implemented."
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X8, [X21+1192]
	040 Compare X8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, -51859456
	043 Add X0, X0, 1382
	044 Call 0x1C17CB8
	045 Move X8, X0
	046 Move [X21+1192], X0
	047 Move X0, X19
	048 NotImplemented "Instruction BLR not yet implemented."
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X8, 0x48D000
	051 Move X8, [X8+2512]
	052 Move X22, 0x4B6000
	053 Move W1, 1
	054 Move X0, [X8]
	055 Move X22, [X22+3688]
	056 Call 0x1C17D6C
	057 Move X8, [X21+1192]
	058 Move X20, X0
	059 Compare X8, 0
	060 JumpIfNotEqual {66}
	061 Move X0, -51859456
	062 Add X0, X0, 1382
	063 Call 0x1C17CB8
	064 Move X8, X0
	065 Move [X21+1192], X0
	066 Move X0, X19
	067 NotImplemented "Instruction BLR not yet implemented."
	068 Move X8, [X22]
	069 Move [X31+12], W0
	070 Add X1, X31, 12
	071 Move X0, X8
	072 Call 0x1C17E04
	073 Compare X20, 0
	074 JumpIfEqual {123}
	075 Move X21, X0
	076 Compare X0, 0
	077 JumpIfEqual {84}
	078 Move X8, [X20]
	079 Move X0, X21
	080 Move X1, [X8+64]
	081 Call 0x1C17E00
	082 Compare X0, 0
	083 JumpIfEqual {125}
	084 Move W8, [X20+24]
	085 Compare W8, 0
	086 JumpIfEqual {124}
	087 Move X8, 0x4FA000
	088 Move X8, [X8+560]
	089 Move [X20+32], X21
	090 Move X21, 0x48D000
	091 Move X1, X20
	092 Move X0, [X8]
	093 Move X21, [X21+2600]
	094 Move X2, X31
	095 Call UnityString.Format, X0, X1
	096 Move X8, [X21]
	097 Move X20, X0
	098 Move W9, [X8+224]
	099 Compare W9, 0
	100 JumpIfNotEqual {103}
	101 Move X0, X8
	102 Call 0x1C17DFC
	103 Move X0, X20
	104 Move X1, X31
	105 Call Debug.LogWarning, X0
	106 Move X20, 0x780000
	107 Move X8, [X20+1224]
	108 Compare X8, 0
	109 JumpIfNotEqual {115}
	110 Move X0, -51761152
	111 Add X0, X0, 2313
	112 Call 0x1C17CB8
	113 Move X8, X0
	114 Move [X20+1224], X0
	115 Move X0, X19
	116 NotImplemented "Instruction BLR not yet implemented."
	117 Move X20, [X31+32]
	118 Move X19, [X31+40]
	119 Move X22, [X31+16]
	120 Move X21, [X31+24]
	121 Move X30, [X31+48]
	122 Return 
	123 Call 0x1C17F20
	124 Call 0x1C17F28
	125 Call 0x1C17F44
	126 Move X1, X31
	127 Call 0x1C17DEC

Method: System.Void get_mousePosition_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C63C8C LDR X0, [X0 + 0x168]
	0x03C63C90 BL 0x1C16CF4
	0x03C63C94 ADRP X0, 0x4FD000
	0x03C63C98 LDR X0, [X0 + 0x170]
	0x03C63C9C BL 0x1C16CF4
	0x03C63CA0 ADRP X0, 0x4E4000
	0x03C63CA4 LDR X0, [X0 + 0x220]
	0x03C63CA8 BL 0x1C16CF4
	0x03C63CAC ADRP X0, 0x4FD000
	0x03C63CB0 LDR X0, [X0 + 0x178]
	0x03C63CB4 BL 0x1C16CF4
	0x03C63CB8 ADRP X0, 0x4C9000
	0x03C63CBC LDR X0, [X0 + 0xB38]
	0x03C63CC0 BL 0x1C16CF4
	0x03C63CC4 ADRP X0, 0x4E4000
	0x03C63CC8 LDR X0, [X0 + 0x258]
	0x03C63CCC BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x784000
	006 Move X2, [X21+1304]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51654656
	012 Add X0, X0, 846
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1304], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_mousePosition_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C63D18 ADRP X0, 0x4FD000
	0x03C63D1C LDR X0, [X0 + 0x190]
	0x03C63D20 BL 0x1C16CF4
	0x03C63D24 ADRP X0, 0x4FD000
	0x03C63D28 LDR X0, [X0 + 0x198]
	0x03C63D2C BL 0x1C16CF4
	0x03C63D30 ADRP X0, 0x4FD000
	0x03C63D34 LDR X0, [X0 + 0x1A0]
	0x03C63D38 BL 0x1C16CF4
	0x03C63D3C ADRP X0, 0x4D4000
	0x03C63D40 LDR X0, [X0 + 0x760]
	0x03C63D44 BL 0x1C16CF4
	0x03C63D48 ADRP X0, 0x4E4000
	0x03C63D4C LDR X0, [X0 + 0x2E8]
	0x03C63D50 BL 0x1C16CF4
	0x03C63D54 ADRP X0, 0x4E4000
	0x03C63D58 LDR X0, [X0 + 0x318]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x784000
	006 Move X2, [X21+1312]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51843072
	012 Add X0, X0, 1412
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1312], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_delta_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C63DA8 ADRP X0, 0x4E4000
	0x03C63DAC LDR X0, [X0 + 0x358]
	0x03C63DB0 BL 0x1C16CF4
	0x03C63DB4 ADRP X0, 0x4E4000
	0x03C63DB8 LDR X0, [X0 + 0x360]
	0x03C63DBC BL 0x1C16CF4
	0x03C63DC0 ADRP X0, 0x4FD000
	0x03C63DC4 LDR X0, [X0 + 0x1D0]
	0x03C63DC8 BL 0x1C16CF4
	0x03C63DCC ADRP X0, 0x4E4000
	0x03C63DD0 LDR X0, [X0 + 0x368]
	0x03C63DD4 BL 0x1C16CF4
	0x03C63DD8 ADRP X0, 0x4FD000
	0x03C63DDC LDR X0, [X0 + 0x1D8]
	0x03C63DE0 BL 0x1C16CF4
	0x03C63DE4 ADRP X0, 0x4FD000
	0x03C63DE8 LDR X0, [X0 + 0x1E0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x784000
	006 Move X2, [X21+1320]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51654656
	012 Add X0, X0, 914
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1320], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void set_delta_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C63E34 MOV X0, X19
	0x03C63E38 BLR X8
	0x03C63E3C MOV X0, X20
	0x03C63E40 MOV X1, X31
	0x03C63E44 BL 0x32277A8
	0x03C63E48 TBNZ X0, 0x0, 0x3C655F0
	0x03C63E4C CBZ X20, 0x3C656D8
	0x03C63E50 LDR W8, [X20 + 0x10]
	0x03C63E54 CMP W8, 0x1
	0x03C63E58 B.LT 0x3C63FDC
	0x03C63E5C ADRP X22, 0xFFFFFFFFFCE9E000
	0x03C63E60 ADRP X23, 0xFFFFFFFFFCEAC000
	0x03C63E64 MOV W21, W31
	0x03C63E68 ADRP X25, 0x783000
	0x03C63E6C ADD X22, X22, 0x530
	0x03C63E70 ADRP X26, 0x783000
	0x03C63E74 ADD X23, X23, 0x90D

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x784000
	006 Move X2, [X21+1328]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51728384
	012 Add X0, X0, 1289
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1328], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

Method: System.Void get_tilt_Injected(out UnityEngine.Vector2 ret)

Disassembly:
	0x03C64034 MOVZ W8, 0x7231
	0x03C64038 MOVK W8, 0x17220000
	0x03C6403C CMP W0, W8
	0x03C64040 B.HI 0x3C64218
	0x03C64044 MOVZ W8, 0xEC70
	0x03C64048 MOVK W8, 0x124A0000
	0x03C6404C CMP W0, W8
	0x03C64050 B.HI 0x3C644AC
	0x03C64054 MOVZ W8, 0x60E0
	0x03C64058 MOVK W8, 0xC220000
	0x03C6405C CMP W0, W8
	0x03C64060 B.EQ 0x3C64E00
	0x03C64064 MOVZ W8, 0x6273
	0x03C64068 MOVK W8, 0xD220000
	0x03C6406C CMP W0, W8
	0x03C64070 B.EQ 0x3C648FC
	0x03C64074 MOVZ W8, 0xEC70

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x783000
	006 Move X2, [X21+1336]
	007 Move X19, X1
	008 Move X20, X0
	009 Compare X2, 0
	010 JumpIfNotEqual {16}
	011 Move X0, -51703808
	012 Add X0, X0, 3882
	013 Call 0x1C17CB8
	014 Move X2, X0
	015 Move [X21+1336], X0
	016 Move X0, X20
	017 Move X1, X19
	018 Move X20, [X31+16]
	019 Move X19, [X31+24]
	020 Move X30, [X31+32]
	021 Move X21, [X31+40]
	022 CallNoReturn X2

