Type: UnityEngine.GUIUtility

Method: System.Single get_pixelsPerPoint()

Disassembly:
	0x03C70DD0 BL 0x1C171E0
	0x03C70DD4 STR X30, [X31 - 0x20]!
	0x03C70DD8 STP X20, X19, [X31 + 0x10]
	0x03C70DDC ADRP X20, 0x776000
	0x03C70DE0 LDR X8, [X20 + 0x750]
	0x03C70DE4 MOV X19, X0
	0x03C70DE8 CBNZ X8, 0x3C70E00
	0x03C70DEC ADRP X0, 0xFFFFFFFFFCE97000
	0x03C70DF0 ADD X0, X0, 0x9A3
	0x03C70DF4 BL 0x1C16CB8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x777000
	004 Move X0, [X19+2152]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51658752
	008 Add X0, X0, 138
	009 Call 0x1C17CB8
	010 Move [X19+2152], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 get_guiDepth()

Disassembly:
	0x03C76378 ADRP X20, 0x770000
	0x03C7637C ADRP X21, 0x4A9000
	0x03C76380 LDRB W8, [X20 + 0x94E]
	0x03C76384 LDR X21, [X21 + 0x5C8]
	0x03C76388 MOV X19, X0
	0x03C7638C TBNZ X8, 0x0, 0x3C763A4
	0x03C76390 ADRP X0, 0x4A9000
	0x03C76394 LDR X0, [X0 + 0x5C8]
	0x03C76398 BL 0x1C16CF4
	0x03C7639C MOVZ W8, 0x1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2160]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51683328
	008 Add X0, X0, 183
	009 Call 0x1C17CB8
	010 Move [X19+2160], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void set_mouseUsed(System.Boolean value)

Disassembly:
	0x03C6CBA0 ADD X0, X0, 0x8CF
	0x03C6CBA4 BL 0x1C16CB8
	0x03C6CBA8 MOV X2, X0
	0x03C6CBAC STR X0, [X21 + 0x650]
	0x03C6CBB0 MOV X0, X20
	0x03C6CBB4 MOV X1, X19
	0x03C6CBB8 LDP X20, X19, [X31 + 0x10]
	0x03C6CBBC LDP X30, X21, [X31], #0x20
	0x03C6CBC0 BR X2
	0x03C6CBC4 STR X30, [X31 - 0x20]!
	0x03C6CBC8 STP X20, X19, [X31 + 0x10]
	0x03C6CBCC ADRP X20, 0x77A000
	0x03C6CBD0 LDR X1, [X20 + 0x658]
	0x03C6CBD4 MOV X19, X0
	0x03C6CBD8 CBNZ X1, 0x3C6CBF0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77B000
	005 Move X1, [X20+2168]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51707904
	010 Add X0, X0, 819
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2168], X0
	014 And W0, W19, 1
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Boolean get_textFieldInput()

Disassembly:
	0x03C67540 MOVZ W8, 0x1
	0x03C67544 STRB W8, [X20 + 0x944]
	0x03C67548 LDR X0, [X19]
	0x03C6754C LDR W8, [X0 + 0xE0]
	0x03C67550 CBNZ W8, 0x3C6755C
	0x03C67554 BL 0x1C16DFC
	0x03C67558 LDR X0, [X19]
	0x03C6755C LDR X9, [X0 + 0xB8]
	0x03C67560 ADRP X20, 0x77F000
	0x03C67564 LDR X8, [X20 + 0x928]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x780000
	004 Move X0, [X19+2176]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51843072
	008 Add X0, X0, 1910
	009 Call 0x1C17CB8
	010 Move [X19+2176], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void set_textFieldInput(System.Boolean value)

Disassembly:
	0x03C6BC5C CBNZ X0, 0x3C6BC70
	0x03C6BC60 ADRP X0, 0xFFFFFFFFFCE94000
	0x03C6BC64 ADD X0, X0, 0x845
	0x03C6BC68 BL 0x1C16CB8
	0x03C6BC6C STR X0, [X19 + 0x620]
	0x03C6BC70 LDP X30, X19, [X31], #0x10
	0x03C6BC74 BR X0
	0x03C6BC78 STR X30, [X31 - 0x20]!
	0x03C6BC7C STP X20, X19, [X31 + 0x10]
	0x03C6BC80 ADRP X20, 0x77B000
	0x03C6BC84 ADRP X19, 0x4AF000
	0x03C6BC88 LDRB W8, [X20 + 0x5DA]
	0x03C6BC8C LDR X19, [X19 + 0x4C0]
	0x03C6BC90 TBNZ X8, 0x0, 0x3C6BCA8
	0x03C6BC94 ADRP X0, 0x4AF000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77C000
	005 Move X1, [X20+2184]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51662848
	010 Add X0, X0, 1332
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2184], X0
	014 And W0, W19, 1
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.String get_systemCopyBuffer()

Disassembly:
	0x03C763A0 STRB W8, [X20 + 0x94E]
	0x03C763A4 LDR X0, [X21]
	0x03C763A8 LDR W8, [X0 + 0xE0]
	0x03C763AC CBNZ W8, 0x3C763B4
	0x03C763B0 BL 0x1C16DFC
	0x03C763B4 MOV X0, X19
	0x03C763B8 LDP X20, X19, [X31 + 0x10]
	0x03C763BC LDP X30, X21, [X31], #0x20
	0x03C763C0 B 0x3C76464
	0x03C763C4 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2192]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51773440
	008 Add X0, X0, 132
	009 Call 0x1C17CB8
	010 Move [X19+2192], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void set_systemCopyBuffer(System.String value)

Disassembly:
	0x03C763C8 STP X20, X19, [X31 + 0x10]
	0x03C763CC ADRP X21, 0x770000
	0x03C763D0 ADRP X20, 0x4A9000
	0x03C763D4 LDRB W8, [X21 + 0x94B]
	0x03C763D8 LDR X20, [X20 + 0x5C8]
	0x03C763DC MOV X19, X0
	0x03C763E0 TBNZ X8, 0x0, 0x3C763F8
	0x03C763E4 ADRP X0, 0x4A9000
	0x03C763E8 LDR X0, [X0 + 0x5C8]
	0x03C763EC BL 0x1C16CF4
	0x03C763F0 MOVZ W8, 0x1
	0x03C763F4 STRB W8, [X21 + 0x94B]
	0x03C763F8 LDR X0, [X20]
	0x03C763FC LDR W8, [X0 + 0xE0]
	0x03C76400 CBNZ W8, 0x3C7640C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2200]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51765248
	010 Add X0, X0, 273
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2200], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Int32 Internal_GetControlID(System.Int32 hint, UnityEngine.FocusType focusType, UnityEngine.Rect rect)

Disassembly:
	0x03C76404 BL 0x1C16DFC
	0x03C76408 LDR X0, [X20]
	0x03C7640C LDR X8, [X0 + 0xB8]
	0x03C76410 LDR X9, [X8 + 0x30]
	0x03C76414 CBZ X9, 0x3C76450
	0x03C76418 LDR W9, [X0 + 0xE0]
	0x03C7641C CBNZ W9, 0x3C7642C
	0x03C76420 BL 0x1C16DFC
	0x03C76424 LDR X8, [X20]
	0x03C76428 LDR X8, [X8 + 0xB8]
	0x03C7642C LDR X8, [X8 + 0x30]
	0x03C76430 CBZ X8, 0x3C76460
	0x03C76434 LDR X3, [X8 + 0x18]
	0x03C76438 LDR X0, [X8 + 0x40]
	0x03C7643C LDR X2, [X8 + 0x28]
	0x03C76440 MOV X1, X19
	0x03C76444 LDP X20, X19, [X31 + 0x10]
	0x03C76448 LDP X30, X21, [X31], #0x20
	0x03C7644C BR X3
	0x03C76450 LDP X20, X19, [X31 + 0x10]
	0x03C76454 MOV W0, W31
	0x03C76458 LDP X30, X21, [X31], #0x20
	0x03C7645C RET
	0x03C76460 BL 0x1C16F20
	0x03C76464 STR X30, [X31 - 0x20]!
	0x03C76468 STP X20, X19, [X31 + 0x10]
	0x03C7646C ADRP X20, 0x770000
	0x03C76470 LDRB W8, [X20 + 0x94D]
	0x03C76474 MOV X19, X0
	0x03C76478 TBNZ X8, 0x0, 0x3C7649C
	0x03C7647C ADRP X0, 0x4EA000
	0x03C76480 LDR X0, [X0 + 0x2F0]
	0x03C76484 BL 0x1C16CF4
	0x03C76488 ADRP X0, 0x4AD000
	0x03C7648C LDR X0, [X0 + 0xF60]
	0x03C76490 BL 0x1C16CF4
	0x03C76494 MOVZ W8, 0x1
	0x03C76498 STRB W8, [X20 + 0x94D]
	0x03C7649C CBZ X19, 0x3C764D8

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+32], X22
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X21, 0x771000
	008 Move [X31], S0
	009 Move [X31+8], S1
	010 Move [X31+8], S2
	011 Move [X31+16], S3
	012 Move X22, 0x4AA000
	013 Move W8, [X21+2208]
	014 Move X22, [X22+1480]
	015 Move W19, W1
	016 Move W20, W0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x4AA000
	022 Move X0, [X0+1480]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2208], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X21, 0x771000
	032 Move X8, [X21+2392]
	033 Compare X8, 0
	034 JumpIfNotEqual {40}
	035 Move X0, -51716096
	036 Add X0, X0, 1866
	037 Call 0x1C17CB8
	038 Move X8, X0
	039 Move [X21+2392], X0
	040 Add X2, X31, 0
	041 Move W0, W20
	042 Move W1, W19
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X20, [X31+48]
	045 Move X19, [X31+56]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X30, [X31+16]
	049 Add X31, X31, 64
	050 Return X0

Method: System.Int32 GetControlID(System.Int32 hint, UnityEngine.FocusType focusType, UnityEngine.Rect rect)

Disassembly:
	0x03C6A0A4 LDR X0, [X22 + 0x10]
	0x03C6A0A8 CBZ X0, 0x3C6A154
	0x03C6A0AC MOV X1, X31
	0x03C6A0B0 BL 0x3C3CF1C
	0x03C6A0B4 CBZ X19, 0x3C6A1F0
	0x03C6A0B8 MOV X1, X0
	0x03C6A0BC MOV X0, X19
	0x03C6A0C0 BL 0x3C69948
	0x03C6A0C4 TBNZ X27, 0x1F, 0x3C6A0F8
	0x03C6A0C8 LDR X0, [X19 + 0x10]
	0x03C6A0CC CBZ X0, 0x3C6A1F0
	0x03C6A0D0 LDR W8, [X0 + 0x10]
	0x03C6A0D4 CMP W8, W27
	0x03C6A0D8 B.LE 0x3C6A0F8
	0x03C6A0DC MOV W1, W31
	0x03C6A0E0 MOV W2, W27
	0x03C6A0E4 MOV X3, X31
	0x03C6A0E8 BL 0x3228DE4
	0x03C6A0EC MOV X1, X0
	0x03C6A0F0 MOV X0, X19
	0x03C6A0F4 BL 0x3C69948
	0x03C6A0F8 LDR X0, [X22 + 0x10]
	0x03C6A0FC CBZ X0, 0x3C6A1F0
	0x03C6A100 MOV X1, X31
	0x03C6A104 BL 0x3C3D058
	0x03C6A108 CBZ W0, 0x3C6A158
	0x03C6A10C STR X31, [X22 + 0x10]
	0x03C6A110 ADRP X8, 0x4B0000
	0x03C6A114 LDR X8, [X8 + 0x4C0]
	0x03C6A118 LDR X0, [X8]
	0x03C6A11C LDR W8, [X0 + 0xE0]
	0x03C6A120 CBNZ W8, 0x3C6A128
	0x03C6A124 BL 0x1C16DFC
	0x03C6A128 ADRP X22, 0x77C000
	0x03C6A12C LDR X8, [X22 + 0x550]
	0x03C6A130 CBNZ X8, 0x3C6A148
	0x03C6A134 ADRP X0, 0xFFFFFFFFFCE8B000
	0x03C6A138 ADD X0, X0, 0x71D
	0x03C6A13C BL 0x1C16CB8
	0x03C6A140 MOV X8, X0
	0x03C6A144 STR X0, [X22 + 0x550]
	0x03C6A148 MOVZ W0, 0x1

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x77D000
	011 Move X21, 0x4B6000
	012 Move W8, [X22+2209]
	013 Move X21, [X21+1480]
	014 Move V8, V3
	015 Move V9, V2
	016 Move V10, V1
	017 Move V11, V0
	018 Move W19, W1
	019 Move W20, W0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x4B6000
	025 Move X0, [X0+1480]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X22+2209], W8
	029 Move X0, [X21]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {35}
	033 Call 0x1C17DFC
	034 Move X0, [X21]
	035 Move X8, [X0+184]
	036 Move W0, W20
	037 Move W1, W19
	038 Move V2, V9
	039 Move W9, [X8]
	040 Move V3, V8
	041 Move X20, [X31+64]
	042 Move X19, [X31+72]
	043 Move X22, [X31+48]
	044 Move X21, [X31+56]
	045 Move X30, [X31+32]
	046 Move D9, [X31+16]
	047 Move D8, [X31+24]
	048 Add W9, W9, 1
	049 Move [X8], W9
	050 Move V0, V11
	051 Move V1, V10
	052 Move D11, [X31+80]
	053 Move D10, [X31+88]
	054 Call GUIUtility.Internal_GetControlID, X0, X1, X2
	055 Return X0

Method: System.Void BeginContainerFromOwner(UnityEngine.ScriptableObject owner)

Disassembly:
	0x03C764F4 ADRP X19, 0x770000
	0x03C764F8 ADRP X20, 0x4A9000
	0x03C764FC LDRB W8, [X19 + 0x950]
	0x03C76500 LDR X20, [X20 + 0x5C8]
	0x03C76504 MOV V8.16B, V0.16B
	0x03C76508 TBNZ X8, 0x0, 0x3C76520
	0x03C7650C ADRP X0, 0x4A9000
	0x03C76510 LDR X0, [X0 + 0x5C8]
	0x03C76514 BL 0x1C16CF4
	0x03C76518 MOVZ W8, 0x1
	0x03C7651C STRB W8, [X19 + 0x950]
	0x03C76520 LDR X0, [X20]
	0x03C76524 LDR W8, [X0 + 0xE0]
	0x03C76528 CBNZ W8, 0x3C76530
	0x03C7652C BL 0x1C16DFC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2216]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51929088
	010 Add X0, X0, 1562
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2216], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void BeginContainer(UnityEngine.ObjectGUIState objectGUIState)

Disassembly:
	0x03C76530 ADRP X19, 0x770000
	0x03C76534 LDR X0, [X19 + 0x868]
	0x03C76538 CBNZ X0, 0x3C7654C
	0x03C7653C ADRP X0, 0xFFFFFFFFFCEB5000
	0x03C76540 ADD X0, X0, 0x8A
	0x03C76544 BL 0x1C16CB8
	0x03C76548 STR X0, [X19 + 0x868]
	0x03C7654C BLR X0
	0x03C76550 LDR X0, [X19 + 0x868]
	0x03C76554 MOV V9.16B, V0.16B
	0x03C76558 CBNZ X0, 0x3C7656C
	0x03C7655C ADRP X0, 0xFFFFFFFFFCEB5000
	0x03C76560 ADD X0, X0, 0x8A
	0x03C76564 BL 0x1C16CB8
	0x03C76568 STR X0, [X19 + 0x868]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2224]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51904512
	010 Add X0, X0, 1955
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2224], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_EndContainer()

Disassembly:
	0x03C7656C ADRP X8, 0xFFFFFFFFFCE74000
	0x03C76570 LDR V0, [X8 + 0x368]
	0x03C76574 FMUL S1, S9, S8
	0x03C76578 FADD S8, S1, S0
	0x03C7657C BLR X0
	0x03C76580 LDP X20, X19, [X31 + 0x20]
	0x03C76584 LDR X30, [X31 + 0x10]
	0x03C76588 FRINTM S1, S8
	0x03C7658C FDIV S0, S1, S0
	0x03C76590 LDP D9, D8, [X31], #0x30

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2232]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51838976
	008 Add X0, X0, 1603
	009 Call 0x1C17CB8
	010 Move [X19+2232], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 CheckForTabEvent(UnityEngine.Event evt)

Disassembly:
	0x03C76594 RET
	0x03C76598 STP D13, D12, [X31 - 0x60]!
	0x03C7659C STP D11, D10, [X31 + 0x10]
	0x03C765A0 STP D9, D8, [X31 + 0x20]
	0x03C765A4 STP X29, X30, [X31 + 0x30]
	0x03C765A8 STP X22, X21, [X31 + 0x40]
	0x03C765AC STP X20, X19, [X31 + 0x50]
	0x03C765B0 SUB X31, X31, 0x250
	0x03C765B4 ADRP X20, 0x770000
	0x03C765B8 ADRP X19, 0x4A4000
	0x03C765BC LDRB W8, [X20 + 0x951]
	0x03C765C0 LDR X19, [X19 + 0x4C0]
	0x03C765C4 MOV V9.16B, V2.16B
	0x03C765C8 MOV V10.16B, V1.16B
	0x03C765CC MOV V8.16B, V0.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2240]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51683328
	010 Add X0, X0, 222
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2240], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void SetKeyboardControlToFirstControlId()

Disassembly:
	0x03C765D0 TBNZ X8, 0x0, 0x3C765E8
	0x03C765D4 ADRP X0, 0x4A4000
	0x03C765D8 LDR X0, [X0 + 0x4C0]
	0x03C765DC BL 0x1C16CF4
	0x03C765E0 MOVZ W8, 0x1
	0x03C765E4 STRB W8, [X20 + 0x951]
	0x03C765E8 LDR X0, [X19]
	0x03C765EC MOVI V0.2D, 0x0
	0x03C765F0 STP V0, V0, [X31 + 0x1F0]
	0x03C765F4 STP V0, V0, [X31 + 0x1D0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2248]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51838976
	008 Add X0, X0, 1651
	009 Call 0x1C17CB8
	010 Move [X19+2248], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void SetKeyboardControlToLastControlId()

Disassembly:
	0x03C765F8 STP V0, V0, [X31 + 0x1B0]
	0x03C765FC STP V0, V0, [X31 + 0x190]
	0x03C76600 LDR W8, [X0 + 0xE0]
	0x03C76604 CBNZ W8, 0x3C7660C
	0x03C76608 BL 0x1C16DFC
	0x03C7660C ADD X8, X31, 0x1D0
	0x03C76610 BL 0x3C67684
	0x03C76614 ADRP X19, 0x762000
	0x03C76618 LDRB W8, [X19 + 0xAC0]
	0x03C7661C CBNZ W8, 0x3C76634

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2256]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51855360
	008 Add X0, X0, 1479
	009 Call 0x1C17CB8
	010 Move [X19+2256], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean HasFocusableControls()

Disassembly:
	0x03C76620 ADRP X0, 0x481000
	0x03C76624 LDR X0, [X0 + 0x270]
	0x03C76628 BL 0x1C16CF4
	0x03C7662C MOVZ W8, 0x1
	0x03C76630 STRB W8, [X19 + 0xAC0]
	0x03C76634 ADRP X8, 0x481000
	0x03C76638 LDR X8, [X8 + 0x270]
	0x03C7663C ADRP X19, 0x770000
	0x03C76640 LDR X8, [X8]
	0x03C76644 LDR X8, [X8 + 0xB8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2264]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51757056
	008 Add X0, X0, 329
	009 Call 0x1C17CB8
	010 Move [X19+2264], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Boolean OwnsId(System.Int32 id)

Disassembly:
	0x03C76648 LDP V0, V1, [X8 + 0x60]
	0x03C7664C LDP V2, V3, [X8 + 0x40]
	0x03C76650 LDR X8, [X19 + 0x660]
	0x03C76654 STP V0, V1, [X31 + 0x230]
	0x03C76658 STP V2, V3, [X31 + 0x210]
	0x03C7665C CBNZ X8, 0x3C76674
	0x03C76660 ADRP X0, 0xFFFFFFFFFCE8D000
	0x03C76664 ADD X0, X0, 0x79A
	0x03C76668 BL 0x1C16CB8
	0x03C7666C MOV X8, X0
	0x03C76670 STR X0, [X19 + 0x660]
	0x03C76674 ADD X0, X31, 0x210
	0x03C76678 BLR X8
	0x03C7667C MOV V0.16B, V10.16B
	0x03C76680 MOV V1.16B, V9.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2272]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51855360
	010 Add X0, X0, 1539
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2272], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: UnityEngine.Rect AlignRectToDevice(UnityEngine.Rect rect, out System.Int32 widthInPixels, out System.Int32 heightInPixels)

Disassembly:
	0x03C76684 BL 0x3C6CAA4
	0x03C76688 ADRP X8, 0xFFFFFFFFFCE74000
	0x03C7668C MOV V9.16B, V0.16B
	0x03C76690 LDR V0, [X8 + 0x104]
	0x03C76694 MOV V10.16B, V1.16B
	0x03C76698 FMOV S1, W31
	0x03C7669C MOV X0, X31
	0x03C766A0 FMUL S2, S8, S0
	0x03C766A4 FMOV S0, W31
	0x03C766A8 BL 0x3C2A574
	0x03C766AC ADRP X20, 0x762000
	0x03C766B0 LDRB W8, [X20 + 0x85B]
	0x03C766B4 MOV V8.16B, V0.16B
	0x03C766B8 MOV V11.16B, V1.16B
	0x03C766BC MOV V12.16B, V2.16B
	0x03C766C0 MOV V13.16B, V3.16B
	0x03C766C4 CBNZ W8, 0x3C766DC
	0x03C766C8 ADRP X0, 0x47D000
	0x03C766CC LDR X0, [X0 + 0x5A0]
	0x03C766D0 BL 0x1C16CF4
	0x03C766D4 MOVZ W8, 0x1
	0x03C766D8 STRB W8, [X20 + 0x85B]
	0x03C766DC ADRP X21, 0x47D000
	0x03C766E0 LDR X21, [X21 + 0x5A0]
	0x03C766E4 FMOV S2, W31
	0x03C766E8 MOV V1.16B, V10.16B
	0x03C766EC MOV V3.16B, V8.16B
	0x03C766F0 LDR X8, [X21]
	0x03C766F4 MOV V4.16B, V11.16B
	0x03C766F8 MOV V5.16B, V12.16B
	0x03C766FC MOV V6.16B, V13.16B
	0x03C76700 LDR X8, [X8 + 0xB8]
	0x03C76704 MOV X0, X31
	0x03C76708 LDR V0, [X8 + 0x14]
	0x03C7670C LDUR X9, [X8 + 0xC]
	0x03C76710 ADD X8, X31, 0x210
	0x03C76714 STR S0, [X31 + 0x8]
	0x03C76718 MOV V0.16B, V9.16B
	0x03C7671C STR X9, [X31]
	0x03C76720 BL 0x3C26FA8
	0x03C76724 ADRP X22, 0x762000
	0x03C76728 LDP V0, V1, [X31 + 0x210]
	0x03C7672C LDP V2, V3, [X31 + 0x230]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X22, 0x771000
	008 Move [X31+16], S0
	009 Move [X31+24], S1
	010 Move [X31+24], S2
	011 Move [X31+32], S3
	012 Move X21, 0x4AA000
	013 Move W8, [X22+2280]
	014 Move X21, [X21+1480]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x4AA000
	022 Move X0, [X0+1480]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2280], W8
	026 Move X0, [X21]
	027 Move [X31], X31
	028 Move [X31+8], X31
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X21, 0x771000
	034 Move X8, [X21+2400]
	035 Compare X8, 0
	036 JumpIfNotEqual {42}
	037 Move X0, -51838976
	038 Add X0, X0, 1712
	039 Call 0x1C17CB8
	040 Move X8, X0
	041 Move [X21+2400], X0
	042 Add X0, X31, 16
	043 Add X3, X31, 0
	044 Move X1, X20
	045 Move X2, X19
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move S0, [X31]
	048 Move S1, [X31+4]
	049 Move S2, [X31+8]
	050 Move S3, [X31+12]
	051 Move X20, [X31+64]
	052 Move X19, [X31+72]
	053 Move X22, [X31+48]
	054 Move X21, [X31+56]
	055 Move X30, [X31+32]
	056 Add X31, X31, 80
	057 Return X0

Method: System.String get_compositionString()

Disassembly:
	0x03C6BC34 ADRP X0, 0xFFFFFFFFFCE94000
	0x03C6BC38 ADD X0, X0, 0x845
	0x03C6BC3C BL 0x1C16CB8
	0x03C6BC40 STR X0, [X19 + 0x620]
	0x03C6BC44 LDP X20, X19, [X31 + 0x10]
	0x03C6BC48 LDR X30, [X31], #0x20
	0x03C6BC4C BR X0
	0x03C6BC50 STP X30, X19, [X31 - 0x10]!
	0x03C6BC54 ADRP X19, 0x77B000
	0x03C6BC58 LDR X0, [X19 + 0x620]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x77C000
	004 Move X0, [X19+2288]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51720192
	008 Add X0, X0, 333
	009 Call 0x1C17CB8
	010 Move [X19+2288], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void set_imeCompositionMode(UnityEngine.IMECompositionMode value)

Disassembly:
	0x03C7678C STRB W8, [X20 + 0x85B]
	0x03C76790 LDR X8, [X21]
	0x03C76794 FMOV S2, W31
	0x03C76798 MOV V1.16B, V10.16B
	0x03C7679C MOV V3.16B, V13.16B
	0x03C767A0 LDR X8, [X8 + 0xB8]
	0x03C767A4 MOV V4.16B, V11.16B
	0x03C767A8 MOV V5.16B, V12.16B
	0x03C767AC MOV V6.16B, V8.16B
	0x03C767B0 LDR V0, [X8 + 0x14]
	0x03C767B4 LDUR X9, [X8 + 0xC]
	0x03C767B8 ADD X8, X31, 0x210
	0x03C767BC MOV X0, X31
	0x03C767C0 STR S0, [X31 + 0x8]
	0x03C767C4 MOV V0.16B, V9.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2296]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51814400
	010 Add X0, X0, 2268
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2296], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void set_compositionCursorPos(UnityEngine.Vector2 value)

Disassembly:
	0x03C767C8 STR X9, [X31]
	0x03C767CC BL 0x3C26FA8
	0x03C767D0 LDP V0, V1, [X31 + 0x210]
	0x03C767D4 LDP V2, V3, [X31 + 0x230]
	0x03C767D8 ADD X8, X31, 0x210
	0x03C767DC ADD X0, X31, 0x110
	0x03C767E0 STP V0, V1, [X31 + 0xD0]
	0x03C767E4 LDP V0, V1, [X31 + 0x150]
	0x03C767E8 STP V2, V3, [X31 + 0xF0]
	0x03C767EC LDP V2, V3, [X31 + 0x170]
	0x03C767F0 ADD X1, X31, 0xD0
	0x03C767F4 MOV X2, X31
	0x03C767F8 STP V0, V1, [X31 + 0x110]
	0x03C767FC STP V2, V3, [X31 + 0x130]
	0x03C76800 BL 0x3C27F74
	0x03C76804 LDP V3, V2, [X31 + 0x210]
	0x03C76808 LDP V1, V0, [X31 + 0x230]
	0x03C7680C LDP V4, V5, [X31 + 0x1D0]
	0x03C76810 ADD X8, X31, 0x210
	0x03C76814 STP V3, V2, [X31 + 0x190]
	0x03C76818 STP V3, V2, [X31 + 0x90]
	0x03C7681C LDP V2, V3, [X31 + 0x1F0]
	0x03C76820 ADD X0, X31, 0x90
	0x03C76824 ADD X1, X31, 0x50
	0x03C76828 MOV X2, X31
	0x03C7682C STP V1, V0, [X31 + 0x1B0]
	0x03C76830 STP V1, V0, [X31 + 0xB0]
	0x03C76834 STP V2, V3, [X31 + 0x70]
	0x03C76838 STP V4, V5, [X31 + 0x50]
	0x03C7683C BL 0x3C27F74

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x771000
	005 Move [X31+8], S0
	006 Move [X31+16], S1
	007 Move X20, 0x4AA000
	008 Move W8, [X19+2304]
	009 Move X20, [X20+1480]
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4AA000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X19+2304], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X19, 0x771000
	025 Move X8, [X19+2408]
	026 Compare X8, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -51904512
	029 Add X0, X0, 2022
	030 Call 0x1C17CB8
	031 Move X8, X0
	032 Move [X19+2408], X0
	033 Add X0, X31, 8
	034 NotImplemented "Instruction BLR not yet implemented."
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return 

Method: System.Int32 Internal_GetHotControl()

Disassembly:
	0x03C7687C ADD X31, X31, 0x250
	0x03C76880 LDP X20, X19, [X31 + 0x50]
	0x03C76884 LDP X22, X21, [X31 + 0x40]
	0x03C76888 LDP X29, X30, [X31 + 0x30]
	0x03C7688C LDP D9, D8, [X31 + 0x20]
	0x03C76890 LDP D11, D10, [X31 + 0x10]
	0x03C76894 LDP D13, D12, [X31], #0x60
	0x03C76898 RET
	0x03C7689C STP D11, D10, [X31 - 0x40]!
	0x03C768A0 STP D9, D8, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2312]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51695616
	008 Add X0, X0, 3848
	009 Call 0x1C17CB8
	010 Move [X19+2312], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Int32 Internal_GetKeyboardControl()

Disassembly:
	0x03C768A4 STR X30, [X31 + 0x20]
	0x03C768A8 STP X20, X19, [X31 + 0x30]
	0x03C768AC ADRP X20, 0x770000
	0x03C768B0 ADRP X19, 0x4A9000
	0x03C768B4 LDRB W8, [X20 + 0x952]
	0x03C768B8 LDR X19, [X19 + 0x5C8]
	0x03C768BC MOV V8.16B, V3.16B
	0x03C768C0 MOV V9.16B, V2.16B
	0x03C768C4 MOV V10.16B, V1.16B
	0x03C768C8 MOV V11.16B, V0.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2320]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51748864
	008 Add X0, X0, 873
	009 Call 0x1C17CB8
	010 Move [X19+2320], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void Internal_SetHotControl(System.Int32 value)

Disassembly:
	0x03C768CC TBNZ X8, 0x0, 0x3C768E4
	0x03C768D0 ADRP X0, 0x4A9000
	0x03C768D4 LDR X0, [X0 + 0x5C8]
	0x03C768D8 BL 0x1C16CF4
	0x03C768DC MOVZ W8, 0x1
	0x03C768E0 STRB W8, [X20 + 0x952]
	0x03C768E4 LDR X0, [X19]
	0x03C768E8 STR X31, [X31 + 0x28]
	0x03C768EC LDR W8, [X0 + 0xE0]
	0x03C768F0 CBNZ W8, 0x3C768F8
	0x03C768F4 BL 0x1C16DFC
	0x03C768F8 ADD X0, X31, 0x2C
	0x03C768FC ADD X1, X31, 0x28
	0x03C76900 MOV V0.16B, V11.16B
	0x03C76904 MOV V1.16B, V10.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2328]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51683328
	010 Add X0, X0, 282
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2328], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_SetKeyboardControl(System.Int32 value)

Disassembly:
	0x03C76908 MOV V2.16B, V9.16B
	0x03C7690C MOV V3.16B, V8.16B
	0x03C76910 BL 0x3C75684
	0x03C76914 LDP X20, X19, [X31 + 0x30]
	0x03C76918 LDR X30, [X31 + 0x20]
	0x03C7691C LDP D9, D8, [X31 + 0x10]
	0x03C76920 LDP D11, D10, [X31], #0x40
	0x03C76924 RET
	0x03C76928 SCVTF S6, W0
	0x03C7692C FSUB S7, S0, S6
	0x03C76930 FCMP S4, S7
	0x03C76934 B.GE 0x3C76940
	0x03C76938 MOV W0, W31
	0x03C7693C RET
	0x03C76940 FADD S0, S2, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2336]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51871744
	010 Add X0, X0, 2247
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2336], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Object Internal_GetDefaultSkin(System.Int32 skinMode)

Disassembly:
	0x03C76944 FADD S0, S0, S6
	0x03C76948 FCMP S4, S0
	0x03C7694C MOV W0, W31
	0x03C76950 B.PL 0x3C76970
	0x03C76954 FSUB S0, S1, S6
	0x03C76958 FCMP S5, S0
	0x03C7695C B.LT 0x3C76970
	0x03C76960 FADD S0, S3, S1
	0x03C76964 FADD S0, S0, S6
	0x03C76968 FCMP S5, S0
	0x03C7696C CSET W0, MI
	0x03C76970 RET
	0x03C76974 STP D13, D12, [X31 - 0x50]!
	0x03C76978 STP D11, D10, [X31 + 0x10]
	0x03C7697C STP D9, D8, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2344]
	006 Move W19, W0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51798016
	010 Add X0, X0, 2479
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2344], X0
	014 Move W0, W19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

Method: System.Void Internal_ExitGUI()

Disassembly:
	0x03C76980 STR X30, [X31 + 0x30]
	0x03C76984 STP X20, X19, [X31 + 0x40]
	0x03C76988 ADRP X19, 0x770000
	0x03C7698C ADRP X20, 0x4A9000
	0x03C76990 LDRB W8, [X19 + 0x953]
	0x03C76994 LDR X20, [X20 + 0x5C8]
	0x03C76998 MOV V8.16B, V5.16B
	0x03C7699C MOV V11.16B, V4.16B
	0x03C769A0 MOV V9.16B, V3.16B
	0x03C769A4 MOV V12.16B, V2.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, 0x771000
	004 Move X0, [X19+2352]
	005 Compare X0, 0
	006 JumpIfNotEqual {11}
	007 Move X0, -51888128
	008 Add X0, X0, 2705
	009 Call 0x1C17CB8
	010 Move [X19+2352], X0
	011 Move X30, [X31+16]
	012 Move X19, [X31+24]
	013 CallNoReturn X0

Method: System.Void MarkGUIChanged()

Disassembly:
	0x03C769A8 MOV V10.16B, V1.16B
	0x03C769AC MOV V13.16B, V0.16B
	0x03C769B0 TBNZ X8, 0x0, 0x3C769C8
	0x03C769B4 ADRP X0, 0x4A9000
	0x03C769B8 LDR X0, [X0 + 0x5C8]
	0x03C769BC BL 0x1C16CF4
	0x03C769C0 MOVZ W8, 0x1
	0x03C769C4 STRB W8, [X19 + 0x953]
	0x03C769C8 LDR X0, [X20]
	0x03C769CC LDR W8, [X0 + 0xE0]
	0x03C769D0 CBNZ W8, 0x3C769D8
	0x03C769D4 BL 0x1C16DFC
	0x03C769D8 FCMP S11, S13
	0x03C769DC B.GE 0x3C769E8
	0x03C769E0 MOV W0, W31
	0x03C769E4 B 0x3C76A1C
	0x03C769E8 FCMP S8, S10
	0x03C769EC MOV W0, W31
	0x03C769F0 B.LT 0x3C76A1C
	0x03C769F4 FADD S0, S12, S13
	0x03C769F8 FMOV S1, W31
	0x03C769FC FADD S0, S0, S1
	0x03C76A00 FCMP S11, S0
	0x03C76A04 B.PL 0x3C76A1C
	0x03C76A08 FADD S0, S9, S10
	0x03C76A0C FMOV S1, W31
	0x03C76A10 FADD S0, S0, S1
	0x03C76A14 FCMP S8, S0
	0x03C76A18 CSET W0, MI

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X19, 0x4AA000
	006 Move W8, [X20+2360]
	007 Move X19, [X19+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4AA000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2360], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8+56]
	025 Compare X8, 0
	026 JumpIfEqual {34}
	027 Move X2, [X8+24]
	028 Move X0, [X8+64]
	029 Move X1, [X8+40]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 CallNoReturn X2
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 

Method: System.Int32 GetControlID(UnityEngine.FocusType focus)

Disassembly:
	0x03C6E954 MOV X1, X31
	0x03C6E958 BL 0x338C698
	0x03C6E95C LDR X8, [X22]
	0x03C6E960 MOV X21, X0
	0x03C6E964 LDR W9, [X8 + 0xE0]
	0x03C6E968 CBNZ W9, 0x3C6E974
	0x03C6E96C MOV X0, X8
	0x03C6E970 BL 0x1C16DFC
	0x03C6E974 MOV X0, X19
	0x03C6E978 MOV X1, X21
	0x03C6E97C BL 0x3C6EA80
	0x03C6E980 ADRP X22, 0x778000
	0x03C6E984 ADRP X23, 0x4EB000
	0x03C6E988 LDRB W8, [X22 + 0x510]
	0x03C6E98C LDR X23, [X23 + 0x20]
	0x03C6E990 MOV X21, X0
	0x03C6E994 TBNZ X8, 0x0, 0x3C6E9AC
	0x03C6E998 ADRP X0, 0x4EB000
	0x03C6E99C LDR X0, [X0 + 0x20]
	0x03C6E9A0 BL 0x1C16CF4
	0x03C6E9A4 MOVZ W8, 0x1
	0x03C6E9A8 STRB W8, [X22 + 0x510]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x779000
	006 Move X21, 0x4B2000
	007 Move W8, [X20+2361]
	008 Move X21, [X21+1480]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4B2000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2361], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W1, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W0, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call GUIUtility.GetControlID, X0, X1
	031 Return X0

Method: System.Int32 GetControlID(System.Int32 hint, UnityEngine.FocusType focus)

Disassembly:
	0x03C69E54 ADRP X28, 0x77D000
	0x03C69E58 LDR X8, [X28 + 0x4A8]
	0x03C69E5C CBNZ X8, 0x3C69E74
	0x03C69E60 ADRP X0, 0xFFFFFFFFFCE88000
	0x03C69E64 ADD X0, X0, 0x566
	0x03C69E68 BL 0x1C16CB8
	0x03C69E6C MOV X8, X0
	0x03C69E70 STR X0, [X28 + 0x4A8]
	0x03C69E74 MOV X0, X24
	0x03C69E78 BLR X8
	0x03C69E7C CMP W0, 0x7
	0x03C69E80 B.EQ 0x3C6A0A0
	0x03C69E84 CBNZ W0, 0x3C6A07C
	0x03C69E88 MOV X0, X24
	0x03C69E8C BL 0x3C62C40
	0x03C69E90 FADD S2, S10, S11
	0x03C69E94 FCMP S1, S2
	0x03C69E98 B.PL 0x3C6A07C
	0x03C69E9C FCMP S1, S10
	0x03C69EA0 B.LT 0x3C6A07C
	0x03C69EA4 FCMP S0, S9
	0x03C69EA8 B.LT 0x3C6A07C
	0x03C69EAC FADD S1, S9, S8
	0x03C69EB0 FCMP S0, S1
	0x03C69EB4 B.PL 0x3C6A07C
	0x03C69EB8 ADRP X27, 0x4B6000
	0x03C69EBC LDR X27, [X27 + 0x5C8]
	0x03C69EC0 LDR X0, [X27]
	0x03C69EC4 LDR W8, [X0 + 0xE0]
	0x03C69EC8 CBNZ W8, 0x3C69ED0
	0x03C69ECC BL 0x1C16DFC
	0x03C69ED0 MOV W0, W20
	0x03C69ED4 BL 0x3C6AA0C
	0x03C69ED8 ADRP X28, 0x4B1000
	0x03C69EDC LDR X28, [X28 + 0x4C0]
	0x03C69EE0 LDR X0, [X28]
	0x03C69EE4 LDR W8, [X0 + 0xE0]
	0x03C69EE8 CBNZ W8, 0x3C69EF4
	0x03C69EEC BL 0x1C16DFC

ISIL:
	001 Move [X31-80], D11
	002 Move [X31-72], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x77E000
	011 Move X21, 0x4B7000
	012 Move W8, [X22+2362]
	013 Move X21, [X21+1480]
	014 Move W19, W1
	015 Move W20, W0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x4B7000
	021 Move X0, [X0+1480]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X22+2362], W8
	025 Move X0, X31
	026 Call Rect.get_zero
	027 Move X0, [X21]
	028 Move V8, V0
	029 Move V9, V1
	030 Move V10, V2
	031 Move W8, [X0+224]
	032 Move V11, V3
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move W0, W20
	037 Move W1, W19
	038 Move V0, V8
	039 Move V1, V9
	040 Move X20, [X31+64]
	041 Move X19, [X31+72]
	042 Move X22, [X31+48]
	043 Move X21, [X31+56]
	044 Move X30, [X31+32]
	045 Move D9, [X31+16]
	046 Move D8, [X31+24]
	047 Move V2, V10
	048 Move V3, V11
	049 Move D11, [X31+80]
	050 Move D10, [X31+88]
	051 Call GUIUtility.GetControlID, X0, X1, X2
	052 Return X0

Method: System.Object GetStateObject(System.Type t, System.Int32 controlID)

Disassembly:
	0x03C6A9A0 ADRP X0, 0xFFFFFFFFFCEAD000
	0x03C6A9A4 ADD X0, X0, 0x14D
	0x03C6A9A8 BL 0x1C16CB8
	0x03C6A9AC MOV X8, X0
	0x03C6A9B0 STR X0, [X24 + 0x8F0]
	0x03C6A9B4 BLR X8
	0x03C6A9B8 CBZ X0, 0x3C6AA08
	0x03C6A9BC LDR W8, [X0 + 0x10]
	0x03C6A9C0 CMP W8, 0x0
	0x03C6A9C4 CSET W29, GT
	0x03C6A9C8 CMP W8, 0x1
	0x03C6A9CC B.LT 0x3C6A9E8
	0x03C6A9D0 ADRP X8, 0x489000
	0x03C6A9D4 LDR X8, [X8 + 0x988]
	0x03C6A9D8 MOV X0, X21
	0x03C6A9DC MOV X2, X31
	0x03C6A9E0 LDR X1, [X8]
	0x03C6A9E4 BL 0x3C802E4
	0x03C6A9E8 MOV X0, X22
	0x03C6A9EC BL 0x3C66240
	0x03C6A9F0 B 0x3C6A6D8
	0x03C6A9F4 MOV X0, X21
	0x03C6A9F8 MOV W1, W26
	0x03C6A9FC MOV X2, X31
	0x03C6AA00 BL 0x3C80374

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x77D000
	007 Move X22, 0x4F7000
	008 Move W8, [X21+2363]
	009 Move X22, [X22+680]
	010 Move W19, W1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x4F7000
	017 Move X0, [X0+680]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2363], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move W1, W19
	028 Move X20, [X31+32]
	029 Move X19, [X31+40]
	030 Move X22, [X31+16]
	031 Move X21, [X31+24]
	032 Move X30, [X31+48]
	033 Call GUIStateObjects.GetStateObject, X0, X1
	034 Return X0

Method: System.Void set_guiIsExiting(System.Boolean value)

Disassembly:
	0x03C76A1C LDP X20, X19, [X31 + 0x40]
	0x03C76A20 LDR X30, [X31 + 0x30]
	0x03C76A24 LDP D9, D8, [X31 + 0x20]
	0x03C76A28 LDP D11, D10, [X31 + 0x10]
	0x03C76A2C LDP D13, D12, [X31], #0x50
	0x03C76A30 RET
	0x03C76A34 STP X30, X21, [X31 - 0x20]!
	0x03C76A38 STP X20, X19, [X31 + 0x10]
	0x03C76A3C ADRP X21, 0x770000
	0x03C76A40 ADRP X20, 0x4A9000
	0x03C76A44 ADRP X19, 0x4E3000
	0x03C76A48 LDRB W8, [X21 + 0x955]
	0x03C76A4C LDR X20, [X20 + 0x5C8]
	0x03C76A50 LDR X19, [X19 + 0x20]
	0x03C76A54 TBNZ X8, 0x0, 0x3C76A78
	0x03C76A58 ADRP X0, 0x4E3000
	0x03C76A5C LDR X0, [X0 + 0x20]
	0x03C76A60 BL 0x1C16CF4
	0x03C76A64 ADRP X0, 0x4A9000
	0x03C76A68 LDR X0, [X0 + 0x5C8]
	0x03C76A6C BL 0x1C16CF4
	0x03C76A70 MOVZ W8, 0x1
	0x03C76A74 STRB W8, [X21 + 0x955]
	0x03C76A78 LDR X8, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x771000
	006 Move X20, 0x4AA000
	007 Move W8, [X21+2364]
	008 Move X20, [X20+1480]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4AA000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2364], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 And W9, W19, 1
	027 Move X20, [X31+16]
	028 Move X19, [X31+24]
	029 Move [X8+80], W9
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Return 

Method: System.Int32 get_hotControl()

Disassembly:
	0x03C6BB88 RET
	0x03C6BB8C MOV W3, W31
	0x03C6BB90 MOV W4, W31
	0x03C6BB94 MOV W5, W31
	0x03C6BB98 MOV W6, W31
	0x03C6BB9C B 0x3C7493C
	0x03C6BBA0 STR X30, [X31 - 0x20]!
	0x03C6BBA4 STP X20, X19, [X31 + 0x10]
	0x03C6BBA8 ADRP X20, 0x77B000
	0x03C6BBAC LDR X1, [X20 + 0x878]
	0x03C6BBB0 MOV W19, W0
	0x03C6BBB4 CBNZ X1, 0x3C6BBCC
	0x03C6BBB8 ADRP X0, 0xFFFFFFFFFCEB0000
	0x03C6BBBC ADD X0, X0, 0x333
	0x03C6BBC0 BL 0x1C16CB8
	0x03C6BBC4 MOV X1, X0
	0x03C6BBC8 STR X0, [X20 + 0x878]
	0x03C6BBCC AND W0, W19, 0x1
	0x03C6BBD0 LDP X20, X19, [X31 + 0x10]
	0x03C6BBD4 LDR X30, [X31], #0x20
	0x03C6BBD8 BR X1
	0x03C6BBDC AND W0, W0, 0x1
	0x03C6BBE0 B 0x3C6C9BC
	0x03C6BBE4 STR X30, [X31 - 0x20]!
	0x03C6BBE8 STP X20, X19, [X31 + 0x10]
	0x03C6BBEC ADRP X19, 0x77B000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x77C000
	005 Move X20, 0x4B5000
	006 Move W8, [X19+2365]
	007 Move X20, [X20+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4B5000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2365], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X19, 0x77C000
	023 Move X0, [X19+2312]
	024 Compare X0, 0
	025 JumpIfNotEqual {30}
	026 Move X0, -51650560
	027 Add X0, X0, 3848
	028 Call 0x1C17CB8
	029 Move [X19+2312], X0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 CallNoReturn X0

Method: System.Void set_hotControl(System.Int32 value)

Disassembly:
	0x03C6BA0C BL 0x1C16CF4
	0x03C6BA10 MOVZ W8, 0x1
	0x03C6BA14 STRB W8, [X24 + 0x510]
	0x03C6BA18 LDR X8, [X25]
	0x03C6BA1C LDR X8, [X8 + 0xB8]
	0x03C6BA20 LDR X0, [X8]
	0x03C6BA24 CBZ X0, 0x3C6BB00
	0x03C6BA28 BL 0x3C62C40
	0x03C6BA2C FADD S2, S12, S10
	0x03C6BA30 FCMP S1, S2
	0x03C6BA34 B.PL 0x3C6BA8C
	0x03C6BA38 FCMP S1, S12
	0x03C6BA3C B.LT 0x3C6BA8C
	0x03C6BA40 FCMP S0, S13
	0x03C6BA44 B.LT 0x3C6BA8C
	0x03C6BA48 FADD S1, S13, S11
	0x03C6BA4C FCMP S0, S1
	0x03C6BA50 B.PL 0x3C6BA8C
	0x03C6BA54 LDR X0, [X23]
	0x03C6BA58 LDR W8, [X0 + 0xE0]
	0x03C6BA5C CBNZ W8, 0x3C6BA64
	0x03C6BA60 BL 0x1C16DFC
	0x03C6BA64 ADRP X19, 0x77B000
	0x03C6BA68 LDR X8, [X19 + 0x878]
	0x03C6BA6C CBNZ X8, 0x3C6BA84
	0x03C6BA70 ADRP X0, 0xFFFFFFFFFCEB0000
	0x03C6BA74 ADD X0, X0, 0x333
	0x03C6BA78 BL 0x1C16CB8
	0x03C6BA7C MOV X8, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x77C000
	006 Move X21, 0x4B5000
	007 Move W8, [X20+2366]
	008 Move X21, [X21+1480]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4B5000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2366], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, 0x77C000
	025 Move X1, [X20+2328]
	026 Compare X1, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -51638272
	029 Add X0, X0, 282
	030 Call 0x1C17CB8
	031 Move X1, X0
	032 Move [X20+2328], X0
	033 Move W0, W19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X1

Method: System.Void TakeCapture()

Disassembly:
	0x03C76A7C LDR X8, [X8 + 0xB8]
	0x03C76A80 STR W31, [X8]
	0x03C76A84 LDR X0, [X19]
	0x03C76A88 BL 0x1C16F10
	0x03C76A8C MOV X19, X0
	0x03C76A90 BL 0x3C63690
	0x03C76A94 LDR X8, [X20]
	0x03C76A98 LDR X8, [X8 + 0xB8]
	0x03C76A9C STR X19, [X8 + 0x48]
	0x03C76AA0 LDP X20, X19, [X31 + 0x10]
	0x03C76AA4 LDP X30, X21, [X31], #0x20
	0x03C76AA8 RET
	0x03C76AAC LDR X0, [X0 + 0x40]
	0x03C76AB0 RET
	0x03C76AB4 STR X30, [X31 - 0x10]!
	0x03C76AB8 LDR X0, [X0 + 0x40]
	0x03C76ABC CBZ X0, 0x3C76AD4
	0x03C76AC0 BL 0x3C74660
	0x03C76AC4 CBZ X0, 0x3C76AD4
	0x03C76AC8 MOV X1, X31
	0x03C76ACC LDR X30, [X31], #0x10
	0x03C76AD0 B 0x3C0C8A8
	0x03C76AD4 BL 0x1C16F20
	0x03C76AD8 STR X30, [X31 - 0x10]!
	0x03C76ADC LDR X0, [X0 + 0x40]
	0x03C76AE0 CBZ X0, 0x3C76AF8
	0x03C76AE4 BL 0x3C74660
	0x03C76AE8 CBZ X0, 0x3C76AF8
	0x03C76AEC MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X19, 0x4AA000
	006 Move W8, [X20+2367]
	007 Move X19, [X19+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4AA000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2367], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8+16]
	025 Compare X8, 0
	026 JumpIfEqual {34}
	027 Move X2, [X8+24]
	028 Move X0, [X8+64]
	029 Move X1, [X8+40]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 CallNoReturn X2
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 

Method: System.Void RemoveCapture()

Disassembly:
	0x03C76AF0 LDR X30, [X31], #0x10
	0x03C76AF4 B 0x3C0C8E4
	0x03C76AF8 BL 0x1C16F20
	0x03C76AFC STR X30, [X31 - 0x10]!
	0x03C76B00 LDR X0, [X0 + 0x40]
	0x03C76B04 CBZ X0, 0x3C76B1C
	0x03C76B08 BL 0x3C74660
	0x03C76B0C CBZ X0, 0x3C76B1C
	0x03C76B10 MOV X1, X31
	0x03C76B14 LDR X30, [X31], #0x10
	0x03C76B18 B 0x3C0C920
	0x03C76B1C BL 0x1C16F20
	0x03C76B20 STR X30, [X31 - 0x10]!
	0x03C76B24 LDR X0, [X0 + 0x40]
	0x03C76B28 CBZ X0, 0x3C76B40
	0x03C76B2C BL 0x3C74660
	0x03C76B30 CBZ X0, 0x3C76B40
	0x03C76B34 MOV X1, X31
	0x03C76B38 LDR X30, [X31], #0x10
	0x03C76B3C B 0x3C0C95C
	0x03C76B40 BL 0x1C16F20
	0x03C76B44 STR X30, [X31 - 0x20]!
	0x03C76B48 STP X20, X19, [X31 + 0x10]
	0x03C76B4C LDR X8, [X0]
	0x03C76B50 MOV X19, X0
	0x03C76B54 LDP X9, X1, [X8 + 0x178]
	0x03C76B58 BLR X9
	0x03C76B5C LDR X8, [X19]
	0x03C76B60 MOV W20, W0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X19, 0x4AA000
	006 Move W8, [X20+2368]
	007 Move X19, [X19+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4AA000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+2368], W8
	017 Move X0, [X19]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {23}
	021 Call 0x1C17DFC
	022 Move X0, [X19]
	023 Move X8, [X0+184]
	024 Move X8, [X8+24]
	025 Compare X8, 0
	026 JumpIfEqual {34}
	027 Move X2, [X8+24]
	028 Move X0, [X8+64]
	029 Move X1, [X8+40]
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 CallNoReturn X2
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Return 

Method: System.Int32 get_keyboardControl()

Disassembly:
	0x03C6BA80 STR X0, [X19 + 0x878]
	0x03C6BA84 MOVZ W0, 0x1
	0x03C6BA88 BLR X8
	0x03C6BA8C ADRP X19, 0x76E000
	0x03C6BA90 LDRB W8, [X19 + 0x78F]
	0x03C6BA94 CBNZ W8, 0x3C6BAAC
	0x03C6BA98 ADRP X0, 0x490000
	0x03C6BA9C LDR X0, [X0 + 0xF08]
	0x03C6BAA0 BL 0x1C16CF4
	0x03C6BAA4 MOVZ W8, 0x1
	0x03C6BAA8 STRB W8, [X19 + 0x78F]
	0x03C6BAAC ADRP X8, 0x490000
	0x03C6BAB0 LDR X8, [X8 + 0xF08]
	0x03C6BAB4 MOV V2.16B, V11.16B
	0x03C6BAB8 MOV V3.16B, V10.16B
	0x03C6BABC MOV V4.16B, V9.16B
	0x03C6BAC0 LDR X8, [X8]
	0x03C6BAC4 MOV V5.16B, V8.16B
	0x03C6BAC8 LDP X20, X19, [X31 + 0x70]
	0x03C6BACC LDP X22, X21, [X31 + 0x60]
	0x03C6BAD0 LDR X8, [X8 + 0xB8]
	0x03C6BAD4 LDP X24, X23, [X31 + 0x50]
	0x03C6BAD8 LDP X26, X25, [X31 + 0x40]
	0x03C6BADC LDR X30, [X31 + 0x30]
	0x03C6BAE0 LDP S6, S7, [X8]
	0x03C6BAE4 LDP D9, D8, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x77C000
	005 Move X20, 0x4B5000
	006 Move W8, [X19+2369]
	007 Move X20, [X20+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4B5000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2369], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X19, 0x77C000
	023 Move X0, [X19+2320]
	024 Compare X0, 0
	025 JumpIfNotEqual {30}
	026 Move X0, -51703808
	027 Add X0, X0, 873
	028 Call 0x1C17CB8
	029 Move [X19+2320], X0
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 CallNoReturn X0

Method: System.Void set_keyboardControl(System.Int32 value)

Disassembly:
	0x03C6BAE8 LDP D11, D10, [X31 + 0x10]
	0x03C6BAEC MOV V0.16B, V13.16B
	0x03C6BAF0 MOV V1.16B, V12.16B
	0x03C6BAF4 MOV W0, W31
	0x03C6BAF8 LDP D13, D12, [X31], #0x80
	0x03C6BAFC B 0x3C6C9BC
	0x03C6BB00 BL 0x1C16F20
	0x03C6BB04 STR X30, [X31 - 0x20]!
	0x03C6BB08 STP X20, X19, [X31 + 0x10]
	0x03C6BB0C ADRP X19, 0x77B000
	0x03C6BB10 ADRP X20, 0x4AF000
	0x03C6BB14 LDRB W8, [X19 + 0x7EA]
	0x03C6BB18 LDR X20, [X20 + 0x890]
	0x03C6BB1C TBNZ X8, 0x0, 0x3C6BB34
	0x03C6BB20 ADRP X0, 0x4AF000
	0x03C6BB24 LDR X0, [X0 + 0x890]
	0x03C6BB28 BL 0x1C16CF4
	0x03C6BB2C MOVZ W8, 0x1
	0x03C6BB30 STRB W8, [X19 + 0x7EA]
	0x03C6BB34 LDR X0, [X20]
	0x03C6BB38 LDR W8, [X0 + 0xE0]
	0x03C6BB3C CBNZ W8, 0x3C6BB48
	0x03C6BB40 BL 0x1C16DFC
	0x03C6BB44 LDR X0, [X20]
	0x03C6BB48 LDR X8, [X0 + 0xB8]
	0x03C6BB4C LDR X19, [X8 + 0x8]
	0x03C6BB50 CBNZ X19, 0x3C6BB7C
	0x03C6BB54 BL 0x1C16F10
	0x03C6BB58 MOV X19, X0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x77C000
	006 Move X21, 0x4B5000
	007 Move W8, [X20+2370]
	008 Move X21, [X21+1480]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4B5000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2370], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, 0x77C000
	025 Move X1, [X20+2336]
	026 Compare X1, 0
	027 JumpIfNotEqual {33}
	028 Move X0, -51826688
	029 Add X0, X0, 2247
	030 Call 0x1C17CB8
	031 Move X1, X0
	032 Move [X20+2336], X0
	033 Move W0, W19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 CallNoReturn X1

Method: System.Boolean HasKeyFocus(System.Int32 controlID)

Disassembly:
	0x03C75960 ADD X0, X0, 0x9AF
	0x03C75964 BL 0x1C16CB8
	0x03C75968 MOV X1, X0
	0x03C7596C STR X0, [X20 + 0x928]
	0x03C75970 MOV W0, W19
	0x03C75974 LDP X20, X19, [X31 + 0x10]
	0x03C75978 LDR X30, [X31], #0x20
	0x03C7597C BR X1
	0x03C75980 STP X30, X19, [X31 - 0x10]!
	0x03C75984 ADRP X19, 0x771000
	0x03C75988 LDR X0, [X19 + 0x930]
	0x03C7598C CBNZ X0, 0x3C759A0
	0x03C75990 ADRP X0, 0xFFFFFFFFFCE84000
	0x03C75994 ADD X0, X0, 0xA91
	0x03C75998 BL 0x1C16CB8
	0x03C7599C STR X0, [X19 + 0x930]
	0x03C759A0 LDP X30, X19, [X31], #0x10
	0x03C759A4 BR X0
	0x03C759A8 STR X30, [X31 - 0x20]!
	0x03C759AC STP X20, X19, [X31 + 0x10]
	0x03C759B0 ADRP X20, 0x771000
	0x03C759B4 ADRP X19, 0x4AA000
	0x03C759B8 LDRB W8, [X20 + 0x938]
	0x03C759BC LDR X19, [X19 + 0x5C8]
	0x03C759C0 TBNZ X8, 0x0, 0x3C759D8
	0x03C759C4 ADRP X0, 0x4AA000
	0x03C759C8 LDR X0, [X0 + 0x5C8]
	0x03C759CC BL 0x1C16CF4
	0x03C759D0 MOVZ W8, 0x1
	0x03C759D4 STRB W8, [X20 + 0x938]
	0x03C759D8 LDR X0, [X19]
	0x03C759DC LDR W8, [X0 + 0xE0]
	0x03C759E0 CBNZ W8, 0x3C759EC
	0x03C759E4 BL 0x1C16DFC
	0x03C759E8 LDR X0, [X19]
	0x03C759EC LDR X8, [X0 + 0xB8]
	0x03C759F0 LDR X8, [X8 + 0x38]
	0x03C759F4 CBZ X8, 0x3C75A10
	0x03C759F8 LDR X2, [X8 + 0x18]
	0x03C759FC LDR X0, [X8 + 0x40]
	0x03C75A00 LDR X1, [X8 + 0x28]
	0x03C75A04 LDP X20, X19, [X31 + 0x10]
	0x03C75A08 LDR X30, [X31], #0x20
	0x03C75A0C BR X2
	0x03C75A10 LDP X20, X19, [X31 + 0x10]
	0x03C75A14 LDR X30, [X31], #0x20
	0x03C75A18 RET
	0x03C75A1C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x772000
	006 Move X20, 0x4AB000
	007 Move W8, [X21+2371]
	008 Move X20, [X20+1480]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4AB000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2371], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Call GUIUtility.get_keyboardControl
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, [X20]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X20]
	032 Move X8, [X0+184]
	033 Move X8, [X8+88]
	034 Compare X8, 0
	035 JumpIfEqual {54}
	036 Move W9, [X0+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {45}
	039 Call 0x1C17DFC
	040 Move X8, [X20]
	041 Move X8, [X8+184]
	042 Move X8, [X8+88]
	043 Compare X8, 0
	044 JumpIfEqual {60}
	045 Move X2, [X8+24]
	046 Move X0, [X8+64]
	047 Move X1, [X8+40]
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 CallNoReturn X2
	053 Move W0, W31
	054 Move W0, 1
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Return X0
	060 Call 0x1C17F20

Method: System.Void ExitGUI()

Disassembly:
	0x03C76B64 MOV X0, X19
	0x03C76B68 LDP X9, X1, [X8 + 0x188]
	0x03C76B6C BLR X9
	0x03C76B70 ADD W0, W0, W20
	0x03C76B74 LDP X20, X19, [X31 + 0x10]
	0x03C76B78 LDR X30, [X31], #0x20
	0x03C76B7C RET
	0x03C76B80 STR X30, [X31 - 0x20]!
	0x03C76B84 STP X20, X19, [X31 + 0x10]
	0x03C76B88 LDR X8, [X0]
	0x03C76B8C MOV X19, X0
	0x03C76B90 LDP X9, X1, [X8 + 0x1A8]
	0x03C76B94 BLR X9

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X0, 0x4EB000
	004 Move X0, [X0+752]
	005 Call 0x1C17D08
	006 Call 0x1C17F10
	007 Move X19, X0
	008 Call ExitGUIException..ctor, X0
	009 Move X0, 0x4EB000
	010 Move X0, [X0+1376]
	011 Call 0x1C17D08
	012 Move X1, X0
	013 Move X0, X19
	014 Call 0x1C17DEC

Method: UnityEngine.GUISkin GetDefaultSkin()

Disassembly:
	0x03C6850C MOVZ W2, 0xB8
	0x03C68510 MOV W1, W31
	0x03C68514 BL 0x3EB1B10
	0x03C68518 LDR X0, [X23]
	0x03C6851C LDR W8, [X0 + 0xE0]
	0x03C68520 CBNZ W8, 0x3C68528
	0x03C68524 BL 0x1C16DFC
	0x03C68528 BL 0x3C67304
	0x03C6852C ADRP X23, 0x77E000
	0x03C68530 ADRP X24, 0x4F1000
	0x03C68534 LDRB W8, [X23 + 0x510]
	0x03C68538 LDR X24, [X24 + 0x20]
	0x03C6853C TBNZ X8, 0x0, 0x3C68554
	0x03C68540 ADRP X0, 0x4F1000
	0x03C68544 LDR X0, [X0 + 0x20]
	0x03C68548 BL 0x1C16CF4
	0x03C6854C MOVZ W8, 0x1
	0x03C68550 STRB W8, [X23 + 0x510]
	0x03C68554 LDR X8, [X24]
	0x03C68558 LDR X8, [X8 + 0xB8]
	0x03C6855C LDR X23, [X8]
	0x03C68560 CBZ X23, 0x3C68AA8
	0x03C68564 ADRP X24, 0x77E000
	0x03C68568 LDR X8, [X24 + 0x4A8]
	0x03C6856C CBNZ X8, 0x3C68584
	0x03C68570 ADRP X0, 0xFFFFFFFFFCE89000
	0x03C68574 ADD X0, X0, 0x566
	0x03C68578 BL 0x1C16CB8
	0x03C6857C MOV X8, X0
	0x03C68580 STR X0, [X24 + 0x4A8]
	0x03C68584 MOV X0, X23
	0x03C68588 BLR X8
	0x03C6858C CMP W0, 0x7
	0x03C68590 B.NE 0x3C68A80
	0x03C68594 ADRP X8, 0x48B000
	0x03C68598 LDR X8, [X8 + 0x598]
	0x03C6859C LDR X0, [X8]
	0x03C685A0 LDR W8, [X0 + 0xE0]
	0x03C685A4 CBNZ W8, 0x3C685AC
	0x03C685A8 BL 0x1C16DFC
	0x03C685AC MOV X0, X20
	0x03C685B0 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x77F000
	005 Move X19, 0x4B8000
	006 Move W8, [X20+2372]
	007 Move X19, [X19+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x4F9000
	013 Move X0, [X0+648]
	014 Call 0x1C17CF4
	015 Move X0, 0x4B8000
	016 Move X0, [X0+1480]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2372], W8
	020 Move X0, [X19]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {26}
	024 Call 0x1C17DFC
	025 Move X0, [X19]
	026 Move X9, [X0+184]
	027 Move X20, 0x77F000
	028 Move X8, [X20+2344]
	029 Move W19, [X9+4]
	030 Compare X8, 0
	031 JumpIfNotEqual {37}
	032 Move X0, -51740672
	033 Add X0, X0, 2479
	034 Call 0x1C17CB8
	035 Move X8, X0
	036 Move [X20+2344], X0
	037 Move W0, W19
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Compare X0, 0
	040 JumpIfEqual {47}
	041 Move X8, 0x4F9000
	042 Move X8, [X8+648]
	043 Move X9, [X0]
	044 Move X8, [X8]
	045 NotImplemented "Instruction CMP not yet implemented."
	046 NotImplemented "Instruction CSEL not yet implemented."
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return X0

Method: System.Void ProcessEvent(System.Int32 instanceID, System.IntPtr nativeEventPtr, out System.Boolean result)

Disassembly:
	0x03C76C58 BL 0x1C16DFC
	0x03C76C5C BL 0x3C6BB04
	0x03C76C60 MOV X20, X0
	0x03C76C64 LDR X8, [X19]
	0x03C76C68 STR X20, [X19 + 0x40]
	0x03C76C6C MOV X0, X19
	0x03C76C70 MOV X1, X20
	0x03C76C74 LDP X3, X2, [X8 + 0x1F8]
	0x03C76C78 LDP X20, X19, [X31 + 0x40]
	0x03C76C7C LDP X22, X21, [X31 + 0x30]
	0x03C76C80 LDR X30, [X31 + 0x20]
	0x03C76C84 LDP D9, D8, [X31 + 0x10]
	0x03C76C88 LDP D11, D10, [X31], #0x50
	0x03C76C8C BR X3
	0x03C76C90 RET
	0x03C76C94 RET
	0x03C76C98 STR S0, [X0 + 0x20]
	0x03C76C9C STR S1, [X0 + 0x28]
	0x03C76CA0 RET
	0x03C76CA4 STR S0, [X0 + 0x24]
	0x03C76CA8 STR S1, [X0 + 0x2C]
	0x03C76CAC RET
	0x03C76CB0 STP X30, X21, [X31 - 0x20]!
	0x03C76CB4 STP X20, X19, [X31 + 0x10]
	0x03C76CB8 CBZ X1, 0x3C76D90
	0x03C76CBC ADRP X21, 0x770000
	0x03C76CC0 LDR X8, [X21 + 0x748]
	0x03C76CC4 MOV X19, X1
	0x03C76CC8 MOV X20, X0
	0x03C76CCC CBNZ X8, 0x3C76CE4
	0x03C76CD0 ADRP X0, 0xFFFFFFFFFCEA7000
	0x03C76CD4 ADD X0, X0, 0x5FF
	0x03C76CD8 BL 0x1C16CB8
	0x03C76CDC MOV X8, X0
	0x03C76CE0 STR X0, [X21 + 0x748]
	0x03C76CE4 MOV X0, X19
	0x03C76CE8 BLR X8
	0x03C76CEC FCMP S0, 0x0
	0x03C76CF0 B.NE 0x3C76D88
	0x03C76CF4 ADRP X21, 0x770000
	0x03C76CF8 LDR X8, [X21 + 0x758]
	0x03C76CFC CBNZ X8, 0x3C76D14
	0x03C76D00 ADRP X0, 0xFFFFFFFFFCE9E000
	0x03C76D04 ADD X0, X0, 0xFA6
	0x03C76D08 BL 0x1C16CB8
	0x03C76D0C MOV X8, X0
	0x03C76D10 STR X0, [X21 + 0x758]
	0x03C76D14 MOV X0, X19
	0x03C76D18 BLR X8
	0x03C76D1C AND W8, W0, 0x1
	0x03C76D20 CBZ X20, 0x3C76D90
	0x03C76D24 STR W8, [X20 + 0x30]
	0x03C76D28 ADRP X21, 0x770000
	0x03C76D2C LDR X8, [X21 + 0x750]
	0x03C76D30 CBNZ X8, 0x3C76D48
	0x03C76D34 ADRP X0, 0xFFFFFFFFFCE91000
	0x03C76D38 ADD X0, X0, 0x9A3
	0x03C76D3C BL 0x1C16CB8
	0x03C76D40 MOV X8, X0
	0x03C76D44 STR X0, [X21 + 0x750]
	0x03C76D48 MOV X0, X19
	0x03C76D4C BLR X8
	0x03C76D50 FCMP S0, 0x0
	0x03C76D54 B.NE 0x3C76D94
	0x03C76D58 ADRP X21, 0x770000
	0x03C76D5C LDR X8, [X21 + 0x760]
	0x03C76D60 CBNZ X8, 0x3C76D78
	0x03C76D64 ADRP X0, 0xFFFFFFFFFCE9E000
	0x03C76D68 ADD X0, X0, 0xFCF
	0x03C76D6C BL 0x1C16CB8
	0x03C76D70 MOV X8, X0
	0x03C76D74 STR X0, [X21 + 0x760]
	0x03C76D78 MOV X0, X19
	0x03C76D7C BLR X8
	0x03C76D80 AND W8, W0, 0x1
	0x03C76D84 B 0x3C76D98
	0x03C76D88 MOV W8, W31
	0x03C76D8C CBNZ X20, 0x3C76D24
	0x03C76D90 BL 0x1C16F20
	0x03C76D94 MOV W8, W31
	0x03C76D98 STR W8, [X20 + 0x34]
	0x03C76D9C STR X19, [X20 + 0x40]
	0x03C76DA0 LDP X20, X19, [X31 + 0x10]
	0x03C76DA4 LDP X30, X21, [X31], #0x20
	0x03C76DA8 RET
	0x03C76DAC STP X30, X25, [X31 - 0x40]!
	0x03C76DB0 STP X24, X23, [X31 + 0x10]
	0x03C76DB4 STP X22, X21, [X31 + 0x20]
	0x03C76DB8 STP X20, X19, [X31 + 0x30]
	0x03C76DBC ADRP X21, 0x770000
	0x03C76DC0 LDRB W8, [X21 + 0x974]
	0x03C76DC4 MOV X20, X1
	0x03C76DC8 MOV X19, X0
	0x03C76DCC TBNZ X8, 0x0, 0x3C76DF0
	0x03C76DD0 ADRP X0, 0x47D000
	0x03C76DD4 LDR X0, [X0 + 0x758]
	0x03C76DD8 BL 0x1C16CF4
	0x03C76DDC ADRP X0, 0x47D000
	0x03C76DE0 LDR X0, [X0 + 0xA90]
	0x03C76DE4 BL 0x1C16CF4
	0x03C76DE8 MOVZ W8, 0x1
	0x03C76DEC STRB W8, [X21 + 0x974]
	0x03C76DF0 CBZ X20, 0x3C77060
	0x03C76DF4 LDR W8, [X20 + 0x18]
	0x03C76DF8 CMP W8, 0x1
	0x03C76DFC B.LT 0x3C77028
	0x03C76E00 ADRP X24, 0x47D000
	0x03C76E04 ADRP X25, 0x47D000
	0x03C76E08 LDR X24, [X24 + 0xA90]
	0x03C76E0C LDR X25, [X25 + 0x758]
	0x03C76E10 ADRP X23, 0xFFFFFFFFFCF21000
	0x03C76E14 MOV X21, X31

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X22, 0x771000
	011 Move X24, 0x4AA000
	012 Move W8, [X22+2373]
	013 Move X24, [X24+1480]
	014 Move X19, X2
	015 Move X20, X1
	016 Move W21, W0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x4AA000
	022 Move X0, [X0+1480]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X22+2373], W8
	026 Move X0, [X24]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X24]
	032 Move X8, [X0+184]
	033 Move X9, [X8+64]
	034 Compare X9, 0
	035 JumpIfEqual {99}
	036 Move W9, [X0+224]
	037 Compare W9, 0
	038 JumpIfNotEqual {42}
	039 Call 0x1C17DFC
	040 Move X8, [X24]
	041 Move X8, [X8+184]
	042 Move X22, [X8+72]
	043 Compare X22, 0
	044 JumpIfEqual {137}
	045 Move X23, 0x771000
	046 Move X8, [X23+1256]
	047 Compare X8, 0
	048 JumpIfNotEqual {54}
	049 Move X0, -51707904
	050 Add X0, X0, 1077
	051 Call 0x1C17CB8
	052 Move X8, X0
	053 Move [X23+1256], X0
	054 Move X0, X22
	055 Move X1, X20
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X8, [X24]
	058 Move X9, [X8+184]
	059 Move X22, [X9+72]
	060 Compare X22, 0
	061 JumpIfEqual {137}
	062 Move X23, 0x771000
	063 Move X8, [X23+1192]
	064 Move X25, [X9+64]
	065 Compare X8, 0
	066 JumpIfNotEqual {72}
	067 Move X0, -51920896
	068 Add X0, X0, 1382
	069 Call 0x1C17CB8
	070 Move X8, X0
	071 Move [X23+1192], X0
	072 Move X0, X22
	073 NotImplemented "Instruction BLR not yet implemented."
	074 Move X8, [X24]
	075 Move X8, [X8+184]
	076 Move X23, [X8+72]
	077 Compare X23, 0
	078 JumpIfEqual {137}
	079 Move X26, 0x771000
	080 Move X8, [X26+1160]
	081 Move W22, W0
	082 Compare X8, 0
	083 JumpIfNotEqual {89}
	084 Move X0, -51740672
	085 Add X0, X0, 1451
	086 Call 0x1C17CB8
	087 Move X8, X0
	088 Move [X26+1160], X0
	089 Move X0, X23
	090 NotImplemented "Instruction BLR not yet implemented."
	091 Compare X25, 0
	092 JumpIfEqual {137}
	093 Move W2, W0
	094 Move X8, [X25+24]
	095 Move X0, [X25+64]
	096 Move X3, [X25+40]
	097 Move W1, W22
	098 NotImplemented "Instruction BLR not yet implemented."
	099 Move [X19], W31
	100 Move X0, [X24]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {106}
	104 Call 0x1C17DFC
	105 Move X0, [X24]
	106 Move X8, [X0+184]
	107 Move X9, [X8+32]
	108 Compare X9, 0
	109 JumpIfEqual {127}
	110 Move W9, [X0+224]
	111 Compare W9, 0
	112 JumpIfNotEqual {116}
	113 Call 0x1C17DFC
	114 Move X8, [X24]
	115 Move X8, [X8+184]
	116 Move X8, [X8+32]
	117 Compare X8, 0
	118 JumpIfEqual {137}
	119 Move X9, [X8+24]
	120 Move X0, [X8+64]
	121 Move X3, [X8+40]
	122 Move W1, W21
	123 Move X2, X20
	124 NotImplemented "Instruction BLR not yet implemented."
	125 And W8, W0, 1
	126 Move [X19], W8
	127 Move X20, [X31+64]
	128 Move X19, [X31+72]
	129 Move X22, [X31+48]
	130 Move X21, [X31+56]
	131 Move X24, [X31+32]
	132 Move X23, [X31+40]
	133 Move X26, [X31+16]
	134 Move X25, [X31+24]
	135 Move X30, [X31+80]
	136 Return 
	137 Call 0x1C17F20

Method: System.Void EndContainer()

Disassembly:
	0x03C76E18 ADD X22, X20, 0x20
	0x03C76E1C ADD X23, X23, 0xE42
	0x03C76E20 CMP W21, W8
	0x03C76E24 B.CS 0x3C77078
	0x03C76E28 LDR X8, [X22, X21, LSL #3]
	0x03C76E2C CBZ X8, 0x3C77074
	0x03C76E30 LDR W9, [X8 + 0x10]
	0x03C76E34 CMP W9, 0x7
	0x03C76E38 B.HI 0x3C77018
	0x03C76E3C ADR X10, 0x10
	0x03C76E40 LDRB W11, [X23, X9, LSL]
	0x03C76E44 ADD X10, X10, X11, 0x2, LSL
	0x03C76E48 BR X10
	0x03C76E4C LDR X0, [X8 + 0x18]
	0x03C76E50 CBZ X0, 0x3C77074
	0x03C76E54 LDR X8, [X0]
	0x03C76E58 LDR X1, [X24]
	0x03C76E5C LDR X8, [X8 + 0x40]
	0x03C76E60 LDR X9, [X1 + 0x40]
	0x03C76E64 CMP X8, X9
	0x03C76E68 B.NE 0x3C7707C
	0x03C76E6C BL 0x1C16E08
	0x03C76E70 LDR V0, [X0]
	0x03C76E74 STR W31, [X19 + 0x30]
	0x03C76E78 STP S0, S0, [X19 + 0x10]
	0x03C76E7C B 0x3C77018
	0x03C76E80 LDR X0, [X8 + 0x18]
	0x03C76E84 CBZ X0, 0x3C77074
	0x03C76E88 LDR X8, [X0]
	0x03C76E8C LDR X1, [X24]
	0x03C76E90 LDR X8, [X8 + 0x40]
	0x03C76E94 LDR X9, [X1 + 0x40]
	0x03C76E98 CMP X8, X9
	0x03C76E9C B.NE 0x3C7707C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x771000
	005 Move X20, 0x4AA000
	006 Move W8, [X19+2374]
	007 Move X20, [X20+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4AA000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2374], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X19, 0x771000
	023 Move X0, [X19+2232]
	024 Compare X0, 0
	025 JumpIfNotEqual {30}
	026 Move X0, -51838976
	027 Add X0, X0, 1603
	028 Call 0x1C17CB8
	029 Move [X19+2232], X0
	030 NotImplemented "Instruction BLR not yet implemented."
	031 Move X19, 0x771000
	032 Move X0, [X19+2352]
	033 Compare X0, 0
	034 JumpIfNotEqual {39}
	035 Move X0, -51888128
	036 Add X0, X0, 2705
	037 Call 0x1C17CB8
	038 Move [X19+2352], X0
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 CallNoReturn X0

Method: System.Void BeginGUI(System.Int32 skinMode, System.Int32 instanceID, System.Int32 useGUILayout)

Disassembly:
	0x03C76EA0 BL 0x1C16E08
	0x03C76EA4 LDR V0, [X0]
	0x03C76EA8 STR W31, [X19 + 0x34]
	0x03C76EAC STP S0, S0, [X19 + 0x18]
	0x03C76EB0 B 0x3C77018
	0x03C76EB4 LDR X0, [X8 + 0x18]
	0x03C76EB8 CBZ X0, 0x3C77074
	0x03C76EBC LDR X8, [X0]
	0x03C76EC0 LDR X1, [X24]
	0x03C76EC4 LDR X8, [X8 + 0x40]
	0x03C76EC8 LDR X9, [X1 + 0x40]
	0x03C76ECC CMP X8, X9
	0x03C76ED0 B.NE 0x3C7707C
	0x03C76ED4 BL 0x1C16E08
	0x03C76ED8 LDR V0, [X0]
	0x03C76EDC LDR V1, [X19 + 0x14]
	0x03C76EE0 STR S0, [X19 + 0x10]
	0x03C76EE4 FCMP S1, S0
	0x03C76EE8 B.PL 0x3C77018
	0x03C76EEC STR S0, [X19 + 0x14]
	0x03C76EF0 B 0x3C77018
	0x03C76EF4 LDR X0, [X8 + 0x18]
	0x03C76EF8 CBZ X0, 0x3C77074
	0x03C76EFC LDR X8, [X0]
	0x03C76F00 LDR X1, [X24]
	0x03C76F04 LDR X8, [X8 + 0x40]
	0x03C76F08 LDR X9, [X1 + 0x40]
	0x03C76F0C CMP X8, X9
	0x03C76F10 B.NE 0x3C7707C
	0x03C76F14 BL 0x1C16E08
	0x03C76F18 LDR V0, [X0]
	0x03C76F1C LDR V1, [X19 + 0x10]
	0x03C76F20 STR S0, [X19 + 0x14]
	0x03C76F24 FCMP S1, S0
	0x03C76F28 B.LE 0x3C76F30
	0x03C76F2C STR S0, [X19 + 0x10]
	0x03C76F30 STR W31, [X19 + 0x30]
	0x03C76F34 B 0x3C77018
	0x03C76F38 LDR X0, [X8 + 0x18]
	0x03C76F3C CBZ X0, 0x3C77074
	0x03C76F40 LDR X8, [X0]
	0x03C76F44 LDR X1, [X24]
	0x03C76F48 LDR X8, [X8 + 0x40]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x771000
	008 Move X22, 0x4AA000
	009 Move W8, [X23+2375]
	010 Move X22, [X22+1480]
	011 Move W20, W2
	012 Move W19, W1
	013 Move W21, W0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {26}
	018 Move X0, 0x4EB000
	019 Move X0, [X0+688]
	020 Call 0x1C17CF4
	021 Move X0, 0x4AA000
	022 Move X0, [X0+1480]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X23+2375], W8
	026 Move X0, [X22]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {32}
	030 Call 0x1C17DFC
	031 Move X0, [X22]
	032 Move X8, [X0+184]
	033 Move [X8+4], W21
	034 Move [X8+8], W19
	035 Call GUIUtility.ResetGlobalState
	036 Compare W20, 0
	037 JumpIfEqual {54}
	038 Move X8, 0x4EB000
	039 Move X8, [X8+688]
	040 Move X0, [X8]
	041 Move W8, [X0+224]
	042 Compare W8, 0
	043 JumpIfNotEqual {45}
	044 Call 0x1C17DFC
	045 Move W0, W19
	046 Move X20, [X31+32]
	047 Move X19, [X31+40]
	048 Move X22, [X31+16]
	049 Move X21, [X31+24]
	050 Move X30, [X31+48]
	051 Move X23, [X31+56]
	052 Call GUILayoutUtility.Begin, X0
	053 Return 
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Move X23, [X31+56]
	060 Return 

Method: System.Void DestroyGUI(System.Int32 instanceID)

Disassembly:
	0x03C77078 BL 0x1C16F28
	0x03C7707C BL 0x1C171E0
	0x03C77080 SUB X31, X31, 0x70
	0x03C77084 STP X29, X30, [X31 + 0x10]
	0x03C77088 STP X28, X27, [X31 + 0x20]
	0x03C7708C STP X26, X25, [X31 + 0x30]
	0x03C77090 STP X24, X23, [X31 + 0x40]
	0x03C77094 STP X22, X21, [X31 + 0x50]
	0x03C77098 STP X20, X19, [X31 + 0x60]
	0x03C7709C ADRP X20, 0x76F000
	0x03C770A0 ADRP X25, 0x47C000
	0x03C770A4 LDRB W8, [X20 + 0x975]
	0x03C770A8 LDR X25, [X25 + 0x988]
	0x03C770AC MOV X19, X0
	0x03C770B0 TBNZ X8, 0x0, 0x3C7714C
	0x03C770B4 ADRP X0, 0x4E9000
	0x03C770B8 LDR X0, [X0 + 0x348]
	0x03C770BC BL 0x1C16CF4
	0x03C770C0 ADRP X0, 0x47C000
	0x03C770C4 LDR X0, [X0 + 0x9D0]
	0x03C770C8 BL 0x1C16CF4
	0x03C770CC ADRP X0, 0x47C000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x770000
	006 Move X21, 0x4EA000
	007 Move W8, [X20+2376]
	008 Move X21, [X21+688]
	009 Move W19, W0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4EA000
	015 Move X0, [X0+688]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2376], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move W0, W19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move W1, W31
	028 Move X30, [X31+32]
	029 Move X21, [X31+40]
	030 Call GUILayoutUtility.RemoveSelectedIdList, X0, X1
	031 Return 

Method: System.Void EndGUI(System.Int32 layoutType)

Disassembly:
	0x03C770D0 LDR X0, [X0 + 0xA90]
	0x03C770D4 BL 0x1C16CF4
	0x03C770D8 ADRP X0, 0x47C000
	0x03C770DC LDR X0, [X0 + 0xAC8]
	0x03C770E0 BL 0x1C16CF4
	0x03C770E4 ADRP X0, 0x4E9000
	0x03C770E8 LDR X0, [X0 + 0x568]
	0x03C770EC BL 0x1C16CF4
	0x03C770F0 ADRP X0, 0x4E9000
	0x03C770F4 LDR X0, [X0 + 0x570]
	0x03C770F8 BL 0x1C16CF4
	0x03C770FC ADRP X0, 0x481000
	0x03C77100 LDR X0, [X0 + 0x3F8]
	0x03C77104 BL 0x1C16CF4
	0x03C77108 ADRP X0, 0x47C000
	0x03C7710C LDR X0, [X0 + 0xDD8]
	0x03C77110 BL 0x1C16CF4
	0x03C77114 ADRP X0, 0x47D000
	0x03C77118 LDR X0, [X0 + 0x2A8]
	0x03C7711C BL 0x1C16CF4
	0x03C77120 ADRP X0, 0x4E9000
	0x03C77124 LDR X0, [X0 + 0x578]
	0x03C77128 BL 0x1C16CF4
	0x03C7712C ADRP X0, 0x485000
	0x03C77130 LDR X0, [X0 + 0xD20]
	0x03C77134 BL 0x1C16CF4
	0x03C77138 ADRP X0, 0x47C000
	0x03C7713C LDR X0, [X0 + 0x988]
	0x03C77140 BL 0x1C16CF4
	0x03C77144 MOVZ W8, 0x1
	0x03C77148 STRB W8, [X20 + 0x975]
	0x03C7714C ADRP X24, 0x4E9000
	0x03C77150 ADRP X26, 0x47C000
	0x03C77154 ADRP X29, 0x47C000
	0x03C77158 ADRP X23, 0x47C000
	0x03C7715C ADRP X22, 0x4E9000
	0x03C77160 ADRP X28, 0x47C000
	0x03C77164 ADRP X27, 0x47D000
	0x03C77168 LDR X24, [X24 + 0x348]
	0x03C7716C LDR X26, [X26 + 0xDD8]
	0x03C77170 LDR X29, [X29 + 0xAC8]
	0x03C77174 LDR X23, [X23 + 0x9D0]
	0x03C77178 LDR X22, [X22 + 0x578]
	0x03C7717C LDR X28, [X28 + 0xA90]
	0x03C77180 LDR X21, [X25]
	0x03C77184 LDR X27, [X27 + 0x2A8]
	0x03C77188 MOV W20, W31
	0x03C7718C LDR X0, [X24]
	0x03C77190 LDR W8, [X0 + 0xE0]
	0x03C77194 CBNZ W8, 0x3C771A0
	0x03C77198 BL 0x1C16DFC
	0x03C7719C LDR X0, [X24]
	0x03C771A0 LDR X8, [X0 + 0xB8]
	0x03C771A4 LDR W8, [X8 + 0x10]
	0x03C771A8 CMP W20, W8
	0x03C771AC B.GE 0x3C771CC
	0x03C771B0 LDR X1, [X26]
	0x03C771B4 MOV X0, X21
	0x03C771B8 MOV X2, X31
	0x03C771BC BL 0x321B938
	0x03C771C0 MOV X21, X0
	0x03C771C4 ADD W20, W20, 0x1
	0x03C771C8 B 0x3C7718C
	0x03C771CC LDR X0, [X29]
	0x03C771D0 MOVZ W1, 0xC
	0x03C771D4 BL 0x1C16D6C
	0x03C771D8 CBZ X0, 0x3C7751C
	0x03C771DC LDR W8, [X0 + 0x18]
	0x03C771E0 MOV X20, X0
	0x03C771E4 CBZ W8, 0x3C7750C
	0x03C771E8 STR X21, [X20 + 0x20]
	0x03C771EC LDR X0, [X23]
	0x03C771F0 MOVZ W1, 0x6
	0x03C771F4 BL 0x1C16D6C
	0x03C771F8 LDR X23, [X19 + 0x40]
	0x03C771FC LDR X22, [X22]
	0x03C77200 MOV X21, X0
	0x03C77204 CBZ X23, 0x3C77244
	0x03C77208 LDR X24, [X23 + 0x78]
	0x03C7720C CBNZ X24, 0x3C77250
	0x03C77210 ADRP X24, 0x76F000
	0x03C77214 LDR X8, [X24 + 0x718]
	0x03C77218 CBNZ X8, 0x3C77230
	0x03C7721C ADRP X0, 0xFFFFFFFFFCE88000
	0x03C77220 ADD X0, X0, 0x869
	0x03C77224 BL 0x1C16CB8
	0x03C77228 MOV X8, X0
	0x03C7722C STR X0, [X24 + 0x718]
	0x03C77230 MOV X0, X23
	0x03C77234 BLR X8
	0x03C77238 MOV X24, X0
	0x03C7723C STR X0, [X23 + 0x78]
	0x03C77240 B 0x3C77250
	0x03C77244 ADRP X8, 0x485000
	0x03C77248 LDR X8, [X8 + 0xD20]
	0x03C7724C LDR X24, [X8]
	0x03C77250 CBZ X21, 0x3C7751C
	0x03C77254 CBZ X24, 0x3C7726C
	0x03C77258 LDR X8, [X21]
	0x03C7725C MOV X0, X24
	0x03C77260 LDR X1, [X8 + 0x40]
	0x03C77264 BL 0x1C16E00
	0x03C77268 CBZ X0, 0x3C77510
	0x03C7726C LDR W8, [X21 + 0x18]
	0x03C77270 CBZ W8, 0x3C7750C
	0x03C77274 MOV X0, X19
	0x03C77278 MOV X1, X31
	0x03C7727C STR X24, [X21 + 0x20]
	0x03C77280 BL 0x33BE520
	0x03C77284 MOV X23, X0
	0x03C77288 CBZ X0, 0x3C772A0
	0x03C7728C LDR X8, [X21]
	0x03C77290 MOV X0, X23
	0x03C77294 LDR X1, [X8 + 0x40]
	0x03C77298 BL 0x1C16E00
	0x03C7729C CBZ X0, 0x3C77510
	0x03C772A0 LDR W8, [X21 + 0x18]
	0x03C772A4 CMP W8, 0x1
	0x03C772A8 B.LS 0x3C7750C
	0x03C772AC STR X23, [X21 + 0x28]
	0x03C772B0 LDR V0, [X19 + 0x20]
	0x03C772B4 LDR X0, [X28]
	0x03C772B8 ADD X1, X31, 0xC
	0x03C772BC STR S0, [X31 + 0xC]
	0x03C772C0 BL 0x1C16E04
	0x03C772C4 MOV X23, X0
	0x03C772C8 CBZ X0, 0x3C772E0
	0x03C772CC LDR X8, [X21]
	0x03C772D0 MOV X0, X23
	0x03C772D4 LDR X1, [X8 + 0x40]
	0x03C772D8 BL 0x1C16E00
	0x03C772DC CBZ X0, 0x3C77510
	0x03C772E0 LDR W8, [X21 + 0x18]
	0x03C772E4 CMP W8, 0x2
	0x03C772E8 B.LS 0x3C7750C
	0x03C772EC STR X23, [X21 + 0x30]
	0x03C772F0 LDR V0, [X19 + 0x28]
	0x03C772F4 LDR V1, [X19 + 0x20]
	0x03C772F8 LDR X0, [X28]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x770000
	007 Move W8, [X20+2377]
	008 Move W19, W0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {24}
	013 Move X0, 0x4A8000
	014 Move X0, [X0+3024]
	015 Call 0x1C17CF4
	016 Move X0, 0x4EA000
	017 Move X0, [X0+688]
	018 Call 0x1C17CF4
	019 Move X0, 0x4A9000
	020 Move X0, [X0+1480]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X20+2377], W8
	024 Move X20, 0x770000
	025 Move X21, 0x4A9000
	026 Move W8, [X20+1296]
	027 Move X21, [X21+1480]
	028 Move TEMP, X8
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfEqual {37}
	032 Move X0, 0x4E3000
	033 Move X0, [X0+32]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+1296], W8
	037 Move X8, 0x4E3000
	038 Move X8, [X8+32]
	039 Move X8, [X8]
	040 Move X8, [X8+184]
	041 Move X20, [X8]
	042 Compare X20, 0
	043 JumpIfEqual {122}
	044 Move X22, 0x770000
	045 Move X8, [X22+1192]
	046 Compare X8, 0
	047 JumpIfNotEqual {53}
	048 Move X0, -51924992
	049 Add X0, X0, 1382
	050 Call 0x1C17CB8
	051 Move X8, X0
	052 Move [X22+1192], X0
	053 Move X0, X20
	054 NotImplemented "Instruction BLR not yet implemented."
	055 Move X20, 0x4EA000
	056 Move X20, [X20+688]
	057 NotImplemented "Instruction CMP not yet implemented."
	058 NotImplemented "Instruction CMP not yet implemented."
	059 NotImplemented "Instruction CMP not yet implemented."
	060 Move X0, [X20]
	061 Move W8, [X0+224]
	062 Compare W8, 0
	063 JumpIfNotEqual {65}
	064 Call 0x1C17DFC
	065 Call GUILayoutUtility.Layout
	066 Move X0, [X20]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Call GUILayoutUtility.LayoutFromEditorWindow
	072 Move X0, [X21]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {78}
	076 Call 0x1C17DFC
	077 Move X0, [X21]
	078 Move X8, [X20]
	079 Move X9, [X0+184]
	080 Move W10, [X8+224]
	081 Move W19, [X9+8]
	082 Compare W10, 0
	083 JumpIfNotEqual {86}
	084 Move X0, X8
	085 Call 0x1C17DFC
	086 Move W0, W19
	087 Move W1, W31
	088 Call GUILayoutUtility.SelectIDList, X0, X1
	089 Move X8, 0x4A8000
	090 Move X8, [X8+3024]
	091 Move X0, [X8]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Call GUIContent.ClearStaticCache
	097 Move X19, X31
	098 Move X0, [X21]
	099 Move W8, [X0+224]
	100 Compare W8, 0
	101 JumpIfNotEqual {103}
	102 Call 0x1C17DFC
	103 Move X20, 0x770000
	104 Move X0, [X20+2352]
	105 Compare X0, 0
	106 JumpIfNotEqual {111}
	107 Move X0, -51892224
	108 Add X0, X0, 2705
	109 Call 0x1C17CB8
	110 Move [X20+2352], X0
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Compare X19, 0
	113 JumpIfNotEqual {120}
	114 Move X20, [X31+32]
	115 Move X19, [X31+40]
	116 Move X22, [X31+16]
	117 Move X21, [X31+24]
	118 Move X30, [X31+48]
	119 Return 
	120 Move X0, X19
	121 Call 0x1C17F18
	122 Call 0x1C17F20
	123 Move X20, X0
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move X0, X20
	126 Call 0x3EB2AD0
	127 Move X19, [X0]
	128 Call 0x3EB2AE0
	129 Move X19, X31
	130 Move X20, X0
	131 Move X0, [X21]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Move X21, 0x770000
	137 Move X0, [X21+2352]
	138 Compare X0, 0
	139 JumpIfNotEqual {144}
	140 Move X0, -51892224
	141 Add X0, X0, 2705
	142 Call 0x1C17CB8
	143 Move [X21+2352], X0
	144 NotImplemented "Instruction BLR not yet implemented."
	145 Compare X19, 0
	146 JumpIfNotEqual {149}
	147 Move X0, X20
	148 Call 0x1D2D690
	149 Move X0, X19
	150 Call 0x1C17F18
	151 Call 0x1991590

Method: System.Boolean EndGUIFromException(System.Exception exception)

Disassembly:
	0x03C772FC ADD X1, X31, 0x8
	0x03C77300 FADD S0, S0, S1
	0x03C77304 STR S0, [X31 + 0x8]
	0x03C77308 BL 0x1C16E04
	0x03C7730C MOV X23, X0
	0x03C77310 CBZ X0, 0x3C77328
	0x03C77314 LDR X8, [X21]
	0x03C77318 MOV X0, X23
	0x03C7731C LDR X1, [X8 + 0x40]
	0x03C77320 BL 0x1C16E00
	0x03C77324 CBZ X0, 0x3C77510
	0x03C77328 LDR W8, [X21 + 0x18]
	0x03C7732C CMP W8, 0x3
	0x03C77330 B.LS 0x3C7750C
	0x03C77334 STR X23, [X21 + 0x38]
	0x03C77338 LDR V0, [X19 + 0x24]
	0x03C7733C LDR X0, [X28]
	0x03C77340 ADD X1, X31, 0x4
	0x03C77344 STR S0, [X31 + 0x4]
	0x03C77348 BL 0x1C16E04
	0x03C7734C MOV X23, X0
	0x03C77350 CBZ X0, 0x3C77368
	0x03C77354 LDR X8, [X21]
	0x03C77358 MOV X0, X23
	0x03C7735C LDR X1, [X8 + 0x40]
	0x03C77360 BL 0x1C16E00
	0x03C77364 CBZ X0, 0x3C77510
	0x03C77368 LDR W8, [X21 + 0x18]
	0x03C7736C CMP W8, 0x4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x770000
	006 Move X21, 0x4A9000
	007 Move W8, [X20+2378]
	008 Move X21, [X21+1480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4A9000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2378], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X20, 0x770000
	025 Move X0, [X20+2352]
	026 Compare X0, 0
	027 JumpIfNotEqual {32}
	028 Move X0, -51892224
	029 Add X0, X0, 2705
	030 Call 0x1C17CB8
	031 Move [X20+2352], X0
	032 NotImplemented "Instruction BLR not yet implemented."
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]

Method: System.Boolean EndContainerGUIFromException(System.Exception exception)

Disassembly:
	0x03C773C4 MOV X2, X31
	0x03C773C8 STR X23, [X21 + 0x48]
	0x03C773CC BL 0x3C96574
	0x03C773D0 LDR W8, [X20 + 0x18]
	0x03C773D4 CMP W8, 0x1
	0x03C773D8 B.LS 0x3C7750C
	0x03C773DC STR X0, [X20 + 0x28]
	0x03C773E0 ADRP X21, 0x481000
	0x03C773E4 LDR X21, [X21 + 0x3F8]
	0x03C773E8 CMP W8, 0x2
	0x03C773EC B.EQ 0x3C7750C
	0x03C773F0 ADRP X8, 0x4E9000
	0x03C773F4 LDR X8, [X8 + 0x568]
	0x03C773F8 ADD X0, X19, 0x10
	0x03C773FC MOV X1, X31
	0x03C77400 LDR X8, [X8]
	0x03C77404 STR X8, [X20 + 0x30]
	0x03C77408 BL 0x338FE24
	0x03C7740C LDR W8, [X20 + 0x18]
	0x03C77410 CMP W8, 0x3
	0x03C77414 B.LS 0x3C7750C
	0x03C77418 CMP W8, 0x4
	0x03C7741C STR X0, [X20 + 0x38]
	0x03C77420 B.EQ 0x3C7750C
	0x03C77424 LDR X8, [X27]
	0x03C77428 ADD X0, X19, 0x14
	0x03C7742C MOV X1, X31
	0x03C77430 STR X8, [X20 + 0x40]
	0x03C77434 BL 0x338FE24
	0x03C77438 LDR W8, [X20 + 0x18]
	0x03C7743C CMP W8, 0x5
	0x03C77440 B.LS 0x3C7750C
	0x03C77444 CMP W8, 0x6
	0x03C77448 STR X0, [X20 + 0x48]
	0x03C7744C B.EQ 0x3C7750C
	0x03C77450 LDR W9, [X19 + 0x30]
	0x03C77454 CMP W9, 0x0
	0x03C77458 CSEL X9, X25, X21, EQ
	0x03C7745C LDR X9, [X9]
	0x03C77460 CMP W8, 0x7

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x770000
	006 Move X20, 0x4A9000
	007 Move W8, [X21+2379]
	008 Move X20, [X20+1480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4A9000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2379], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {25}
	023 Call 0x1C17DFC
	024 Move X0, [X20]
	025 Move X8, [X0+184]
	026 Move X9, [X8+48]
	027 Compare X9, 0
	028 JumpIfEqual {47}
	029 Move W9, [X0+224]
	030 Compare W9, 0
	031 JumpIfNotEqual {35}
	032 Call 0x1C17DFC
	033 Move X8, [X20]
	034 Move X8, [X8+184]
	035 Move X8, [X8+48]
	036 Compare X8, 0
	037 JumpIfEqual {53}
	038 Move X3, [X8+24]
	039 Move X0, [X8+64]
	040 Move X2, [X8+40]
	041 Move X1, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move X30, [X31+32]
	045 Move X21, [X31+40]
	046 CallNoReturn X3
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W0, W31
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Return X0
	053 Call 0x1C17F20

Method: System.Void ResetGlobalState()

Disassembly:
	0x03C76F4C LDR X9, [X1 + 0x40]
	0x03C76F50 CMP X8, X9
	0x03C76F54 B.NE 0x3C7707C
	0x03C76F58 BL 0x1C16E08
	0x03C76F5C LDR V0, [X0]
	0x03C76F60 LDR V1, [X19 + 0x1C]
	0x03C76F64 STR S0, [X19 + 0x18]
	0x03C76F68 FCMP S1, S0
	0x03C76F6C B.PL 0x3C77018
	0x03C76F70 STR S0, [X19 + 0x1C]
	0x03C76F74 B 0x3C77018
	0x03C76F78 LDR X0, [X8 + 0x18]
	0x03C76F7C CBZ X0, 0x3C77074
	0x03C76F80 LDR X8, [X0]
	0x03C76F84 LDR X1, [X24]
	0x03C76F88 LDR X8, [X8 + 0x40]
	0x03C76F8C LDR X9, [X1 + 0x40]
	0x03C76F90 CMP X8, X9
	0x03C76F94 B.NE 0x3C7707C
	0x03C76F98 BL 0x1C16E08
	0x03C76F9C LDR V0, [X0]
	0x03C76FA0 LDR V1, [X19 + 0x18]
	0x03C76FA4 STR S0, [X19 + 0x1C]
	0x03C76FA8 FCMP S1, S0
	0x03C76FAC B.LE 0x3C76FB4
	0x03C76FB0 STR S0, [X19 + 0x18]
	0x03C76FB4 STR W31, [X19 + 0x34]
	0x03C76FB8 B 0x3C77018
	0x03C76FBC LDR X0, [X8 + 0x18]
	0x03C76FC0 CBZ X0, 0x3C77074
	0x03C76FC4 LDR X8, [X0]
	0x03C76FC8 LDR X1, [X25]
	0x03C76FCC LDR X8, [X8 + 0x40]
	0x03C76FD0 LDR X9, [X1 + 0x40]
	0x03C76FD4 CMP X8, X9
	0x03C76FD8 B.NE 0x3C7707C
	0x03C76FDC BL 0x1C16E08
	0x03C76FE0 LDR W8, [X0]
	0x03C76FE4 STR W8, [X19 + 0x30]
	0x03C76FE8 B 0x3C77018
	0x03C76FEC LDR X0, [X8 + 0x18]
	0x03C76FF0 CBZ X0, 0x3C77074
	0x03C76FF4 LDR X8, [X0]
	0x03C76FF8 LDR X1, [X25]
	0x03C76FFC LDR X8, [X8 + 0x40]
	0x03C77000 LDR X9, [X1 + 0x40]
	0x03C77004 CMP X8, X9
	0x03C77008 B.NE 0x3C7707C
	0x03C7700C BL 0x1C16E08
	0x03C77010 LDR W8, [X0]
	0x03C77014 STR W8, [X19 + 0x34]
	0x03C77018 LDR W8, [X20 + 0x18]
	0x03C7701C ADD X21, X21, 0x1
	0x03C77020 CMP W21, W8
	0x03C77024 B.LT 0x3C76E20
	0x03C77028 LDR V0, [X19 + 0x14]
	0x03C7702C FCMP S0, 0x0
	0x03C77030 B.EQ 0x3C77044
	0x03C77034 LDR V1, [X19 + 0x10]
	0x03C77038 FCMP S0, S1
	0x03C7703C B.PL 0x3C77044
	0x03C77040 STR S1, [X19 + 0x14]
	0x03C77044 LDR V0, [X19 + 0x1C]
	0x03C77048 FCMP S0, 0x0
	0x03C7704C B.EQ 0x3C77060
	0x03C77050 LDR V1, [X19 + 0x18]
	0x03C77054 FCMP S0, S1
	0x03C77058 B.PL 0x3C77060
	0x03C7705C STR S1, [X19 + 0x1C]
	0x03C77060 LDP X20, X19, [X31 + 0x30]
	0x03C77064 LDP X22, X21, [X31 + 0x20]
	0x03C77068 LDP X24, X23, [X31 + 0x10]
	0x03C7706C LDP X30, X25, [X31], #0x40
	0x03C77070 RET
	0x03C77074 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x771000
	006 Move X19, 0x4A5000
	007 Move W8, [X20+2380]
	008 Move X19, [X19+1216]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x4AA000
	014 Move X0, [X0+1480]
	015 Call 0x1C17CF4
	016 Move X0, 0x4A5000
	017 Move X0, [X0+1216]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X20+2380], W8
	021 Move X0, [X19]
	022 Move X20, 0x4AA000
	023 Move W8, [X0+224]
	024 Move X20, [X20+1480]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X31
	029 Call GUI.set_skin, X0
	030 Move X0, [X20]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X21, 0x771000
	036 Move W8, [X21+2437]
	037 Compare W8, 0
	038 JumpIfNotEqual {44}
	039 Move X0, 0x4AA000
	040 Move X0, [X0+1480]
	041 Call 0x1C17CF4
	042 Move W8, 1
	043 Move [X21+2437], W8
	044 Move X0, [X20]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {50}
	048 Call 0x1C17DFC
	049 Move X0, [X20]
	050 Move X8, [X0+184]
	051 Move X20, 0x771000
	052 Move [X8+80], W31
	053 Move X8, [X20+1360]
	054 Compare X8, 0
	055 JumpIfNotEqual {61}
	056 Move X0, -51908608
	057 Add X0, X0, 1821
	058 Call 0x1C17CB8
	059 Move X8, X0
	060 Move [X20+1360], X0
	061 Move W0, W31
	062 NotImplemented "Instruction BLR not yet implemented."
	063 Move X20, 0x770000
	064 Move W8, [X20+2438]
	065 Compare W8, 0
	066 JumpIfNotEqual {72}
	067 Move X0, 0x4A4000
	068 Move X0, [X0+1216]
	069 Call 0x1C17CF4
	070 Move W8, 1
	071 Move [X20+2438], W8
	072 Move X0, [X19]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {78}
	076 Call 0x1C17DFC
	077 Move X0, [X19]
	078 Move X8, [X0+184]
	079 Move X0, [X8+72]
	080 Compare X0, 0
	081 JumpIfEqual {90}
	082 Move X8, [X0]
	083 Move X20, [X31+16]
	084 Move X19, [X31+24]
	085 Move X2, [X8+520]
	086 Move X1, [X8+528]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 CallNoReturn X2
	090 Call 0x1C17F20

Method: System.Boolean IsExitGUIException(System.Exception exception)

Disassembly:
	0x03C77464 STR X9, [X20 + 0x50]
	0x03C77468 B.EQ 0x3C7750C
	0x03C7746C ADRP X8, 0x4E9000
	0x03C77470 LDR X8, [X8 + 0x570]
	0x03C77474 ADD X0, X19, 0x18
	0x03C77478 MOV X1, X31
	0x03C7747C LDR X8, [X8]
	0x03C77480 STR X8, [X20 + 0x58]
	0x03C77484 BL 0x338FE24
	0x03C77488 LDR W8, [X20 + 0x18]
	0x03C7748C CMP W8, 0x8
	0x03C77490 B.LS 0x3C7750C
	0x03C77494 CMP W8, 0x9
	0x03C77498 STR X0, [X20 + 0x60]
	0x03C7749C B.EQ 0x3C7750C
	0x03C774A0 LDR X8, [X27]
	0x03C774A4 ADD X0, X19, 0x1C
	0x03C774A8 MOV X1, X31
	0x03C774AC STR X8, [X20 + 0x68]
	0x03C774B0 BL 0x338FE24
	0x03C774B4 LDR W8, [X20 + 0x18]
	0x03C774B8 CMP W8, 0xA
	0x03C774BC B.LS 0x3C7750C
	0x03C774C0 CMP W8, 0xB
	0x03C774C4 STR X0, [X20 + 0x70]
	0x03C774C8 B.EQ 0x3C7750C
	0x03C774CC LDR W8, [X19 + 0x34]
	0x03C774D0 MOV X0, X20
	0x03C774D4 MOV X1, X31
	0x03C774D8 CMP W8, 0x0
	0x03C774DC CSEL X8, X25, X21, EQ
	0x03C774E0 LDR X8, [X8]
	0x03C774E4 STR X8, [X20 + 0x78]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x770000
	005 Move W8, [X20+2381]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x4EA000
	012 Move X0, [X0+752]
	013 Call 0x1C17CF4
	014 Move X0, 0x4AD000
	015 Move X0, [X0+3936]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2381], W8
	019 Compare X19, 0
	020 JumpIfEqual {34}
	021 Move X8, 0x4AD000
	022 Move X8, [X8+3936]
	023 Move X9, [X8]
	024 Move X8, 0x4EA000
	025 Move X8, [X8+752]
	026 Move X10, [X19]
	027 NotImplemented "Instruction CMP not yet implemented."
	028 Move X19, [X19+40]
	029 Compare X19, 0
	030 JumpIfNotEqual {26}
	031 Move X8, [X8]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 NotImplemented "Instruction CSET not yet implemented."
	034 Move W0, W31
	035 Move X20, [X31+16]
	036 Move X19, [X31+24]
	037 Move X30, [X31+32]
	038 Return X0

Method: System.Boolean ShouldRethrowException(System.Exception exception)

Disassembly:
	0x03C77370 B.LS 0x3C7750C
	0x03C77374 STR X23, [X21 + 0x40]
	0x03C77378 LDR V0, [X19 + 0x2C]
	0x03C7737C LDR V1, [X19 + 0x24]
	0x03C77380 LDR X0, [X28]
	0x03C77384 ADD X1, X31, 0x0
	0x03C77388 FADD S0, S0, S1
	0x03C7738C STR S0, [X31]
	0x03C77390 BL 0x1C16E04
	0x03C77394 MOV X23, X0
	0x03C77398 CBZ X0, 0x3C773B0
	0x03C7739C LDR X8, [X21]
	0x03C773A0 MOV X0, X23
	0x03C773A4 LDR X1, [X8 + 0x40]
	0x03C773A8 BL 0x1C16E00
	0x03C773AC CBZ X0, 0x3C77510
	0x03C773B0 LDR W8, [X21 + 0x18]
	0x03C773B4 CMP W8, 0x5
	0x03C773B8 B.LS 0x3C7750C
	0x03C773BC MOV X0, X22
	0x03C773C0 MOV X1, X21

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x770000
	006 Move X21, 0x4A9000
	007 Move W8, [X20+2382]
	008 Move X21, [X21+1480]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x4A9000
	015 Move X0, [X0+1480]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2382], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Move X21, [X31+40]
	029 Call GUIUtility.IsExitGUIException, X0
	030 Return X0

Method: System.Void CheckOnGUI()

Disassembly:
	0x03C68304 SUB X31, X31, 0x110
	0x03C68308 STP D15, D14, [X31 + 0x90]
	0x03C6830C STP D13, D12, [X31 + 0xA0]
	0x03C68310 STP D11, D10, [X31 + 0xB0]
	0x03C68314 STP D9, D8, [X31 + 0xC0]
	0x03C68318 STP X29, X30, [X31 + 0xD0]
	0x03C6831C STP X24, X23, [X31 + 0xE0]
	0x03C68320 STP X22, X21, [X31 + 0xF0]
	0x03C68324 STP X20, X19, [X31 + 0x100]
	0x03C68328 ADRP X24, 0x77E000
	0x03C6832C ADRP X23, 0x4B2000
	0x03C68330 LDRB W8, [X24 + 0x5C3]
	0x03C68334 LDR X23, [X23 + 0x4C0]
	0x03C68338 MOV W21, W3
	0x03C6833C MOV W22, W2
	0x03C68340 MOV W19, W1
	0x03C68344 MOV X20, X0
	0x03C68348 TBNZ X8, 0x0, 0x3C68388
	0x03C6834C ADRP X0, 0x4B2000
	0x03C68350 LDR X0, [X0 + 0x4C0]
	0x03C68354 MOV V8.16B, V4.16B
	0x03C68358 MOV V9.16B, V3.16B
	0x03C6835C MOV V10.16B, V2.16B
	0x03C68360 MOV V11.16B, V1.16B
	0x03C68364 MOV V12.16B, V0.16B
	0x03C68368 BL 0x1C16CF4
	0x03C6836C MOV V0.16B, V12.16B
	0x03C68370 MOV V1.16B, V11.16B
	0x03C68374 MOV V2.16B, V10.16B
	0x03C68378 MOV V3.16B, V9.16B
	0x03C6837C MOV V4.16B, V8.16B
	0x03C68380 MOVZ W8, 0x1
	0x03C68384 STRB W8, [X24 + 0x5C3]
	0x03C68388 LDR X0, [X23]
	0x03C6838C LDR V5, [X31 + 0x13C]
	0x03C68390 LDR V16, [X31 + 0x138]
	0x03C68394 LDR V12, [X31 + 0x134]
	0x03C68398 LDR V11, [X31 + 0x130]
	0x03C6839C LDR V6, [X31 + 0x12C]
	0x03C683A0 LDR V7, [X31 + 0x128]
	0x03C683A4 LDR V8, [X31 + 0x124]
	0x03C683A8 LDR V15, [X31 + 0x120]
	0x03C683AC LDR V9, [X31 + 0x11C]
	0x03C683B0 LDR V10, [X31 + 0x118]
	0x03C683B4 LDR W8, [X0 + 0xE0]
	0x03C683B8 LDR V14, [X31 + 0x114]
	0x03C683BC LDR V13, [X31 + 0x110]
	0x03C683C0 CBNZ W8, 0x3C683F0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, 0x77F000
	005 Move X20, 0x4B8000
	006 Move W8, [X19+2383]
	007 Move X20, [X20+1480]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x4B8000
	013 Move X0, [X0+1480]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X19+2383], W8
	017 Move X0, [X20]
	018 Move W8, [X0+224]
	019 Compare W8, 0
	020 JumpIfNotEqual {22}
	021 Call 0x1C17DFC
	022 Move X19, 0x77F000
	023 Move X8, [X19+2160]
	024 Compare X8, 0
	025 JumpIfNotEqual {31}
	026 Move X0, -51625984
	027 Add X0, X0, 183
	028 Call 0x1C17CB8
	029 Move X8, X0
	030 Move [X19+2160], X0
	031 NotImplemented "Instruction BLR not yet implemented."
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Return 
	037 Move X0, 0x494000
	038 Move X0, [X0+1400]
	039 Call 0x1C17D08
	040 Call 0x1C17F10
	041 Move X19, X0
	042 Move X0, 0x4F9000
	043 Move X0, [X0+632]
	044 Call 0x1C17D08
	045 Move X1, X0
	046 Move X0, X19
	047 Move X2, X31
	048 Call ArgumentException..ctor, X0, X1
	049 Move X0, 0x4F9000
	050 Move X0, [X0+640]
	051 Call 0x1C17D08
	052 Move X1, X0
	053 Move X0, X19
	054 Call 0x1C17DEC

Method: System.Single RoundToPixelGrid(System.Single v)

Disassembly:
	0x03C774E8 BL 0x32278CC
	0x03C774EC LDP X20, X19, [X31 + 0x60]
	0x03C774F0 LDP X22, X21, [X31 + 0x50]
	0x03C774F4 LDP X24, X23, [X31 + 0x40]
	0x03C774F8 LDP X26, X25, [X31 + 0x30]
	0x03C774FC LDP X28, X27, [X31 + 0x20]
	0x03C77500 LDP X29, X30, [X31 + 0x10]
	0x03C77504 ADD X31, X31, 0x70
	0x03C77508 RET
	0x03C7750C BL 0x1C16F28
	0x03C77510 BL 0x1C16F44
	0x03C77514 MOV X1, X31
	0x03C77518 BL 0x1C16DEC
	0x03C7751C BL 0x1C16F20
	0x03C77520 STR X30, [X31 - 0x20]!
	0x03C77524 STP X20, X19, [X31 + 0x10]
	0x03C77528 ADRP X20, 0x76F000
	0x03C7752C ADRP X19, 0x4E9000
	0x03C77530 LDRB W8, [X20 + 0x976]
	0x03C77534 LDR X19, [X19 + 0x348]
	0x03C77538 TBNZ X8, 0x0, 0x3C77550
	0x03C7753C ADRP X0, 0x4E9000
	0x03C77540 LDR X0, [X0 + 0x348]
	0x03C77544 BL 0x1C16CF4
	0x03C77548 MOVZ W8, 0x1
	0x03C7754C STRB W8, [X20 + 0x976]
	0x03C77550 LDR X8, [X19]
	0x03C77554 ADRP X9, 0xFFFFFFFFFCE73000
	0x03C77558 LDR V0, [X9 + 0xBC]
	0x03C7755C LDR X8, [X8 + 0xB8]
	0x03C77560 STR V0, [X8]
	0x03C77564 LDR X8, [X19]
	0x03C77568 LDP X20, X19, [X31 + 0x10]
	0x03C7756C LDR X8, [X8 + 0xB8]
	0x03C77570 STR W31, [X8 + 0x10]
	0x03C77574 LDR X30, [X31], #0x20
	0x03C77578 RET
	0x03C7757C STP X30, X19, [X31 - 0x10]!
	0x03C77580 LDR V0, [X0 + 0x10]
	0x03C77584 MOV X19, X0
	0x03C77588 FCMP S0, 0x0
	0x03C7758C B.NE 0x3C775CC
	0x03C77590 LDR X0, [X19 + 0x40]
	0x03C77594 CBZ X0, 0x3C775E0

ISIL:
	001 Move [X31-48], D9
	002 Move [X31-40], D8
	003 Move [X31+16], X30
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x770000
	007 Move X20, 0x4A9000
	008 Move W8, [X19+2384]
	009 Move X20, [X20+1480]
	010 Move V8, V0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x4A9000
	016 Move X0, [X0+1480]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X19+2384], W8
	020 Move X0, [X20]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X19, 0x770000
	026 Move X0, [X19+2152]
	027 Compare X0, 0
	028 JumpIfNotEqual {33}
	029 Move X0, -51687424
	030 Add X0, X0, 138
	031 Call 0x1C17CB8
	032 Move [X19+2152], X0
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X0, [X19+2152]
	035 Move V9, V0
	036 Compare X0, 0
	037 JumpIfNotEqual {42}
	038 Move X0, -51687424
	039 Add X0, X0, 138
	040 Call 0x1C17CB8
	041 Move [X19+2152], X0
	042 Move X8, -51953664
	043 Move V0, [X8+872]
	044 Multiply S1, S9, S8
	045 Add S8, S1, S0
	046 NotImplemented "Instruction BLR not yet implemented."
	047 Move X20, [X31+32]
	048 Move X19, [X31+40]
	049 Move X30, [X31+16]
	050 NotImplemented "Instruction FRINTM not yet implemented."
	051 NotImplemented "Instruction FDIV not yet implemented."
	052 Move D9, [X31+48]
	053 Move D8, [X31+56]
	054 Return V0

Method: System.Void RotateAroundPivot(System.Single angle, UnityEngine.Vector2 pivotPoint)

Disassembly:
	0x03C77598 LDR X1, [X19 + 0x48]
	0x03C7759C BL 0x3C7424C
	0x03C775A0 LDR V2, [X19 + 0x10]
	0x03C775A4 FCMP S2, 0x0
	0x03C775A8 B.NE 0x3C775B4
	0x03C775AC FRINTP S0, S0
	0x03C775B0 STR S0, [X19 + 0x10]
	0x03C775B4 LDR V0, [X19 + 0x14]
	0x03C775B8 FCMP S0, 0x0
	0x03C775BC B.NE 0x3C775D8
	0x03C775C0 FRINTP S0, S1
	0x03C775C4 STR S0, [X19 + 0x14]
	0x03C775C8 B 0x3C775D8
	0x03C775CC LDR V0, [X19 + 0x14]
	0x03C775D0 FCMP S0, 0x0
	0x03C775D4 B.EQ 0x3C77590
	0x03C775D8 LDP X30, X19, [X31], #0x10
	0x03C775DC RET
	0x03C775E0 BL 0x1C16F20
	0x03C775E4 STR D8, [X31 - 0x30]!
	0x03C775E8 STR X30, [X31 + 0x8]
	0x03C775EC STP X22, X21, [X31 + 0x10]
	0x03C775F0 STP X20, X19, [X31 + 0x20]
	0x03C775F4 LDR V0, [X0 + 0x50]
	0x03C775F8 MOV X19, X0
	0x03C775FC FCMP S0, 0x0
	0x03C77600 B.NE 0x3C77660
	0x03C77604 LDR X20, [X19 + 0x40]
	0x03C77608 CBZ X20, 0x3C77680
	0x03C7760C ADRP X22, 0x76F000
	0x03C77610 LDR X21, [X19 + 0x48]
	0x03C77614 LDR X8, [X22 + 0x7B8]
	0x03C77618 LDR V8, [X19 + 0x28]
	0x03C7761C CBNZ X8, 0x3C77634
	0x03C77620 ADRP X0, 0xFFFFFFFFFCE84000
	0x03C77624 ADD X0, X0, 0x8E1
	0x03C77628 BL 0x1C16CB8
	0x03C7762C MOV X8, X0
	0x03C77630 STR X0, [X22 + 0x7B8]
	0x03C77634 MOV X0, X20
	0x03C77638 MOV X1, X21
	0x03C7763C MOV V0.16B, V8.16B
	0x03C77640 BLR X8
	0x03C77644 LDP S1, S2, [X19 + 0x50]
	0x03C77648 FCMP S1, 0x0
	0x03C7764C FCSEL S1, S0, S1, EQ
	0x03C77650 FCMP S2, 0x0
	0x03C77654 FCSEL S0, S0, S2, EQ
	0x03C77658 STP S1, S0, [X19 + 0x18]
	0x03C7765C B 0x3C7766C
	0x03C77660 LDR V0, [X19 + 0x54]
	0x03C77664 FCMP S0, 0x0
	0x03C77668 B.EQ 0x3C77604
	0x03C7766C LDP X20, X19, [X31 + 0x20]
	0x03C77670 LDP X22, X21, [X31 + 0x10]
	0x03C77674 LDR X30, [X31 + 0x8]
	0x03C77678 LDR V8, [X31], #0x30
	0x03C7767C RET
	0x03C77680 BL 0x1C16F20
	0x03C77684 LDR W0, [X0 + 0x80]
	0x03C77688 RET
	0x03C7768C LDR W0, [X0 + 0x84]
	0x03C77690 RET
	0x03C77694 LDR W0, [X0 + 0x88]
	0x03C77698 RET
	0x03C7769C LDR W0, [X0 + 0x8C]
	0x03C776A0 RET
	0x03C776A4 STR X30, [X31 - 0x50]!
	0x03C776A8 STP X26, X25, [X31 + 0x10]
	0x03C776AC STP X24, X23, [X31 + 0x20]
	0x03C776B0 STP X22, X21, [X31 + 0x30]
	0x03C776B4 STP X20, X19, [X31 + 0x40]
	0x03C776B8 ADRP X21, 0x76F000
	0x03C776BC LDRB W8, [X21 + 0x979]
	0x03C776C0 MOV X19, X1
	0x03C776C4 MOV X20, X0
	0x03C776C8 TBNZ X8, 0x0, 0x3C776E0
	0x03C776CC ADRP X0, 0x47C000
	0x03C776D0 LDR X0, [X0 + 0x758]
	0x03C776D4 BL 0x1C16CF4
	0x03C776D8 MOVZ W8, 0x1
	0x03C776DC STRB W8, [X21 + 0x979]
	0x03C776E0 CBZ X19, 0x3C777A0
	0x03C776E4 MOV X0, X20
	0x03C776E8 MOV X1, X19
	0x03C776EC BL 0x3C76DAC
	0x03C776F0 LDR X8, [X19 + 0x18]
	0x03C776F4 CMP W8, 0x1
	0x03C776F8 B.LT 0x3C777A0
	0x03C776FC ADRP X26, 0x47C000
	0x03C77700 LDR X26, [X26 + 0x758]
	0x03C77704 MOV X21, X31
	0x03C77708 ADD X22, X19, 0x20
	0x03C7770C MOVZ W23, 0x1
	0x03C77710 MOVZ W24, 0xD
	0x03C77714 MOVZ W25, 0x32
	0x03C77718 CMP W21, W8
	0x03C7771C B.CS 0x3C777BC
	0x03C77720 LDR X9, [X22, X21, LSL #3]
	0x03C77724 CBZ X9, 0x3C777B8
	0x03C77728 LDR W10, [X9 + 0x10]
	0x03C7772C CMP W10, 0xD
	0x03C77730 B.HI 0x3C77794
	0x03C77734 LSLV W11, W23, W10
	0x03C77738 ANDS W31, W11, W24, 0x0
	0x03C7773C B.NE 0x3C77750
	0x03C77740 ANDS W31, W11, W25, 0x0
	0x03C77744 B.EQ 0x3C77758
	0x03C77748 STRB W23, [X20 + 0x6C]
	0x03C7774C B 0x3C77794
	0x03C77750 STRB W23, [X20 + 0x6D]
	0x03C77754 B 0x3C77794
	0x03C77758 CMP W10, 0xD
	0x03C7775C B.NE 0x3C77794
	0x03C77760 LDR X0, [X9 + 0x18]
	0x03C77764 CBZ X0, 0x3C777B8
	0x03C77768 LDR X8, [X0]
	0x03C7776C LDR X1, [X26]
	0x03C77770 LDR X8, [X8 + 0x40]
	0x03C77774 LDR X9, [X1 + 0x40]
	0x03C77778 CMP X8, X9
	0x03C7777C B.NE 0x3C777C0
	0x03C77780 BL 0x1C16E08
	0x03C77784 LDR V0, [X0]
	0x03C77788 SCVTF S0, S0
	0x03C7778C STR S0, [X20 + 0x54]
	0x03C77790 LDR X8, [X19 + 0x18]
	0x03C77794 ADD X21, X21, 0x1
	0x03C77798 CMP W21, W8
	0x03C7779C B.LT 0x3C77718
	0x03C777A0 LDP X20, X19, [X31 + 0x40]
	0x03C777A4 LDP X22, X21, [X31 + 0x30]
	0x03C777A8 LDP X24, X23, [X31 + 0x20]
	0x03C777AC LDP X26, X25, [X31 + 0x10]
	0x03C777B0 LDR X30, [X31], #0x50
	0x03C777B4 RET
	0x03C777B8 BL 0x1C16F20
	0x03C777BC BL 0x1C16F28
	0x03C777C0 BL 0x1C171E0
	0x03C777C4 STR X30, [X31 - 0x20]!
	0x03C777C8 STP X20, X19, [X31 + 0x10]
	0x03C777CC MOV X20, X1
	0x03C777D0 MOV X19, X0
	0x03C777D4 BL 0x3C76CB0
	0x03C777D8 CBZ X20, 0x3C77834
	0x03C777DC MOV X0, X20
	0x03C777E0 BL 0x3C74660
	0x03C777E4 CBZ X0, 0x3C77834
	0x03C777E8 MOV X1, X31
	0x03C777EC MOV X20, X0
	0x03C777F0 BL 0x3C0C8A8
	0x03C777F4 STR W0, [X19 + 0x80]
	0x03C777F8 MOV X0, X20
	0x03C777FC MOV X1, X31
	0x03C77800 BL 0x3C0C8E4
	0x03C77804 STR W0, [X19 + 0x84]
	0x03C77808 MOV X0, X20
	0x03C7780C MOV X1, X31
	0x03C77810 BL 0x3C0C920
	0x03C77814 STR W0, [X19 + 0x88]
	0x03C77818 MOV X0, X20
	0x03C7781C MOV X1, X31
	0x03C77820 BL 0x3C0C95C
	0x03C77824 STR W0, [X19 + 0x8C]
	0x03C77828 LDP X20, X19, [X31 + 0x10]
	0x03C7782C LDR X30, [X31], #0x20
	0x03C77830 RET
	0x03C77834 BL 0x1C16F20
	0x03C77838 SUB X31, X31, 0xB0
	0x03C7783C STP D9, D8, [X31 + 0x60]
	0x03C77840 STP X30, X25, [X31 + 0x70]
	0x03C77844 STP X24, X23, [X31 + 0x80]
	0x03C77848 STP X22, X21, [X31 + 0x90]
	0x03C7784C STP X20, X19, [X31 + 0xA0]
	0x03C77850 ADRP X20, 0x76F000
	0x03C77854 LDRB W8, [X20 + 0x97C]
	0x03C77858 MOV X19, X0
	0x03C7785C TBNZ X8, 0x0, 0x3C778BC
	0x03C77860 ADRP X0, 0x4E9000
	0x03C77864 LDR X0, [X0 + 0x350]
	0x03C77868 BL 0x1C16CF4
	0x03C7786C ADRP X0, 0x4E9000
	0x03C77870 LDR X0, [X0 + 0x358]
	0x03C77874 BL 0x1C16CF4
	0x03C77878 ADRP X0, 0x4E9000
	0x03C7787C LDR X0, [X0 + 0x360]
	0x03C77880 BL 0x1C16CF4
	0x03C77884 ADRP X0, 0x4A3000
	0x03C77888 LDR X0, [X0 + 0x890]
	0x03C7788C BL 0x1C16CF4
	0x03C77890 ADRP X0, 0x4E9000
	0x03C77894 LDR X0, [X0 + 0x368]
	0x03C77898 BL 0x1C16CF4

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X29
	008 Move [X31+56], X30
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Subtract X31, X31, 592
	014 Move X20, 0x770000
	015 Move X19, 0x4A4000
	016 Move W8, [X20+2385]
	017 Move X19, [X19+1216]
	018 Move V9, V2
	019 Move V10, V1
	020 Move V8, V0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x4A4000
	026 Move X0, [X0+1216]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2385], W8
	030 Move X0, [X19]
	031 NotImplemented "Instruction MOVI not yet implemented."
	032 Move [X31+496], V0
	033 Move [X31+504], V0
	034 Move [X31+464], V0
	035 Move [X31+472], V0
	036 Move [X31+432], V0
	037 Move [X31+440], V0
	038 Move [X31+400], V0
	039 Move [X31+408], V0
	040 Move W8, [X0+224]
	041 Compare W8, 0
	042 JumpIfNotEqual {44}
	043 Call 0x1C17DFC
	044 Add X8, X31, 464
	045 Call GUI.get_matrix
	046 Move X19, 0x762000
	047 Move W8, [X19+2752]
	048 Compare W8, 0
	049 JumpIfNotEqual {55}
	050 Move X0, 0x481000
	051 Move X0, [X0+624]
	052 Call 0x1C17CF4
	053 Move W8, 1
	054 Move [X19+2752], W8
	055 Move X8, 0x481000
	056 Move X8, [X8+624]
	057 Move X19, 0x770000
	058 Move X8, [X8]
	059 Move X8, [X8+184]
	060 Move V0, [X8+96]
	061 Move V1, [X8+112]
	062 Move V2, [X8+64]
	063 Move V3, [X8+80]
	064 Move X8, [X19+1632]
	065 Move [X31+560], V0
	066 Move [X31+568], V1
	067 Move [X31+528], V2
	068 Move [X31+536], V3
	069 Compare X8, 0
	070 JumpIfNotEqual {76}
	071 Move X0, -51851264
	072 Add X0, X0, 1946
	073 Call 0x1C17CB8
	074 Move X8, X0
	075 Move [X19+1632], X0
	076 Add X0, X31, 528
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move V0, V10
	079 Move V1, V9
	080 Call GUIClip.Unclip_Vector2, X0
	081 Move X8, -51953664
	082 Move V9, V0
	083 Move V0, [X8+260]
	084 Move V10, V1
	085 Move S1, W31
	086 Move X0, X31
	087 Multiply S2, S8, S0
	088 Move S0, W31
	089 Call Quaternion.Internal_FromEulerRad, X0
	090 Move X20, 0x762000
	091 Move W8, [X20+2139]
	092 Move V8, V0
	093 Move V11, V1
	094 Move V12, V2
	095 Move V13, V3
	096 Compare W8, 0
	097 JumpIfNotEqual {103}
	098 Move X0, 0x47D000
	099 Move X0, [X0+1440]
	100 Call 0x1C17CF4
	101 Move W8, 1
	102 Move [X20+2139], W8
	103 Move X21, 0x47D000
	104 Move X21, [X21+1440]
	105 Move S2, W31
	106 Move V1, V10
	107 Move V3, V8
	108 Move X8, [X21]
	109 Move V4, V11
	110 Move V5, V12
	111 Move V6, V13
	112 Move X8, [X8+184]
	113 Move X0, X31
	114 Move V0, [X8+20]
	115 NotImplemented "Instruction LDUR not yet implemented."
	116 Add X8, X31, 528
	117 Move [X31+8], S0
	118 Move V0, V9
	119 Move [X31], X9
	120 Call Matrix4x4.TRS, X0, X1, X2
	121 Move X22, 0x762000
	122 Move V0, [X31+528]
	123 Move V1, [X31+544]
	124 Move V2, [X31+560]
	125 Move V3, [X31+576]
	126 Move W8, [X22+1939]
	127 Move [X31+336], V0
	128 Move [X31+344], V1
	129 Move [X31+368], V2
	130 Move [X31+376], V3
	131 Compare W8, 0
	132 JumpIfNotEqual {138}
	133 Move X0, 0x47E000
	134 Move X0, [X0+1448]
	135 Call 0x1C17CF4
	136 Move W8, 1
	137 Move [X22+1939], W8
	138 Move X8, 0x47E000
	139 Move X8, [X8+1448]
	140 Move W9, [X20+2139]
	141 NotImplemented "Instruction FNEG not yet implemented."
	142 NotImplemented "Instruction FNEG not yet implemented."
	143 Move X8, [X8]
	144 Move X8, [X8+184]
	145 Move S13, [X8]
	146 Move S11, [X8+4]
	147 Move S12, [X8+8]
	148 Move S8, [X8+12]
	149 Compare W9, 0
	150 JumpIfNotEqual {156}
	151 Move X0, 0x47D000
	152 Move X0, [X0+1440]
	153 Call 0x1C17CF4
	154 Move W8, 1
	155 Move [X20+2139], W8
	156 Move X8, [X21]
	157 Move S2, W31
	158 Move V1, V10
	159 Move V3, V13
	160 Move X8, [X8+184]
	161 Move V4, V11
	162 Move V5, V12
	163 Move V6, V8
	164 Move V0, [X8+20]
	165 NotImplemented "Instruction LDUR not yet implemented."
	166 Add X8, X31, 528
	167 Move X0, X31
	168 Move [X31+8], S0
	169 Move V0, V9
	170 Move [X31], X9
	171 Call Matrix4x4.TRS, X0, X1, X2
	172 Move V0, [X31+528]
	173 Move V1, [X31+544]
	174 Move V2, [X31+560]
	175 Move V3, [X31+576]
	176 Add X8, X31, 528
	177 Add X0, X31, 272
	178 Move [X31+208], V0
	179 Move [X31+216], V1
	180 Move V0, [X31+336]
	181 Move V1, [X31+352]
	182 Move [X31+240], V2
	183 Move [X31+248], V3
	184 Move V2, [X31+368]
	185 Move V3, [X31+384]
	186 Add X1, X31, 208
	187 Move X2, X31
	188 Move [X31+272], V0
	189 Move [X31+280], V1
	190 Move [X31+304], V2
	191 Move [X31+312], V3
	192 Call Matrix4x4.op_Multiply, X0, X1
	193 Move V3, [X31+528]
	194 Move V2, [X31+544]
	195 Move V1, [X31+560]
	196 Move V0, [X31+576]
	197 Move V4, [X31+464]
	198 Move V5, [X31+480]
	199 Add X8, X31, 528
	200 Move [X31+400], V3
	201 Move [X31+408], V2
	202 Move [X31+144], V3
	203 Move [X31+152], V2
	204 Move V2, [X31+496]
	205 Move V3, [X31+512]
	206 Add X0, X31, 144
	207 Add X1, X31, 80
	208 Move X2, X31
	209 Move [X31+432], V1
	210 Move [X31+440], V0
	211 Move [X31+176], V1
	212 Move [X31+184], V0
	213 Move [X31+112], V2
	214 Move [X31+120], V3
	215 Move [X31+80], V4
	216 Move [X31+88], V5
	217 Call Matrix4x4.op_Multiply, X0, X1
	218 Move V1, [X31+560]
	219 Move V0, [X31+576]
	220 Move V3, [X31+528]
	221 Move V2, [X31+544]
	222 Move X8, [X19+1632]
	223 Move [X31+48], V1
	224 Move [X31+56], V0
	225 Move [X31+16], V3
	226 Move [X31+24], V2
	227 Move [X31+528], V3
	228 Move [X31+536], V2
	229 Move [X31+560], V1
	230 Move [X31+568], V0
	231 Compare X8, 0
	232 JumpIfNotEqual {238}
	233 Move X0, -51851264
	234 Add X0, X0, 1946
	235 Call 0x1C17CB8
	236 Move X8, X0
	237 Move [X19+1632], X0
	238 Add X0, X31, 528
	239 NotImplemented "Instruction BLR not yet implemented."
	240 Add X31, X31, 592
	241 Move X20, [X31+80]
	242 Move X19, [X31+88]
	243 Move X22, [X31+64]
	244 Move X21, [X31+72]
	245 Move X29, [X31+48]
	246 Move X30, [X31+56]
	247 Move D9, [X31+32]
	248 Move D8, [X31+40]
	249 Move D11, [X31+16]
	250 Move D10, [X31+24]
	251 Move D13, [X31+96]
	252 Move D12, [X31+104]
	253 Return 

Method: UnityEngine.Rect AlignRectToDevice(UnityEngine.Rect rect)

Disassembly:
	0x03C7789C ADRP X0, 0x4E9000
	0x03C778A0 LDR X0, [X0 + 0x398]
	0x03C778A4 BL 0x1C16CF4
	0x03C778A8 ADRP X0, 0x4E9000
	0x03C778AC LDR X0, [X0 + 0x3A0]
	0x03C778B0 BL 0x1C16CF4
	0x03C778B4 MOVZ W8, 0x1
	0x03C778B8 STRB W8, [X20 + 0x97C]
	0x03C778BC STP X31, X31, [X31 + 0x40]
	0x03C778C0 STR X31, [X31 + 0x50]
	0x03C778C4 STP X31, X31, [X31 + 0x20]
	0x03C778C8 STR X31, [X31 + 0x30]
	0x03C778CC LDR X0, [X19 + 0x48]
	0x03C778D0 CBZ X0, 0x3C77DC8
	0x03C778D4 LDR W8, [X0 + 0x18]
	0x03C778D8 CBZ W8, 0x3C77A84
	0x03C778DC LDRB W8, [X19 + 0x50]
	0x03C778E0 STR X31, [X19 + 0x70]
	0x03C778E4 STR W31, [X19 + 0x64]
	0x03C778E8 CBZ W8, 0x3C77AA8
	0x03C778EC ADRP X8, 0x4E9000
	0x03C778F0 LDR X8, [X8 + 0x368]
	0x03C778F4 LDR X1, [X8]
	0x03C778F8 ADD X8, X31, 0x8
	0x03C778FC BL 0x301CB58
	0x03C77900 LDUR V0, [X31 + 0x8]
	0x03C77904 LDR X8, [X31 + 0x18]
	0x03C77908 ADRP X24, 0x4E9000
	0x03C7790C MOV W23, W31
	0x03C77910 STR V0, [X31 + 0x4]
	0x03C77914 STR X8, [X31 + 0x50]
	0x03C77918 LDR X24, [X24 + 0x358]
	0x03C7791C MOV W22, W31
	0x03C77920 MOVZ W25, 0x1
	0x03C77924 LDR X1, [X24]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x770000
	009 Move X19, 0x4A9000
	010 Move W8, [X20+2386]
	011 Move X19, [X19+1480]
	012 Move V8, V3
	013 Move V9, V2
	014 Move V10, V1
	015 Move V11, V0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x4A9000
	021 Move X0, [X0+1480]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2386], W8
	025 Move X0, [X19]
	026 Move [X31+40], X31
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Add X0, X31, 44
	032 Add X1, X31, 40
	033 Move V0, V11
	034 Move V1, V10
	035 Move V2, V9
	036 Move V3, V8
	037 Call GUIUtility.AlignRectToDevice, X0, X1, X2
	038 Move X20, [X31+48]
	039 Move X19, [X31+56]
	040 Move X30, [X31+32]
	041 Move D9, [X31+16]
	042 Move D8, [X31+24]
	043 Move D11, [X31+64]
	044 Move D10, [X31+72]
	045 Return X0

Method: System.Boolean HitTest(UnityEngine.Rect rect, UnityEngine.Vector2 point, System.Int32 offset)

Disassembly:
	0x03C77928 ADD X0, X31, 0x40
	0x03C7792C BL 0x2BC4350
	0x03C77930 TBZ X0, 0x0, 0x3C77A50
	0x03C77934 LDR X21, [X31 + 0x50]
	0x03C77938 CBZ X21, 0x3C77DC0
	0x03C7793C LDR X8, [X21]
	0x03C77940 LDP X9, X1, [X8 + 0x1B8]
	0x03C77944 MOV X0, X21
	0x03C77948 BLR X9
	0x03C7794C LDRB W8, [X21 + 0x38]
	0x03C77950 CBZ W8, 0x3C77A3C
	0x03C77954 LDR X9, [X21]
	0x03C77958 LDP X8, X1, [X9 + 0x178]
	0x03C7795C TBZ X25, 0x0, 0x3C77984
	0x03C77960 MOV X0, X21
	0x03C77964 BLR X8
	0x03C77968 LDR X8, [X21]
	0x03C7796C MOV W20, W0
	0x03C77970 LDP X9, X1, [X8 + 0x188]

ISIL:
	001 NotImplemented "Instruction SCVTF not yet implemented."
	002 Subtract S7, S0, S6
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 Move W0, W31
	005 Return X0
	006 Add S0, S2, S0
	007 Add S0, S0, S6
	008 NotImplemented "Instruction FCMP not yet implemented."
	009 Move W0, W31
	010 Subtract S0, S1, S6
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Add S0, S3, S1
	013 Add S0, S0, S6
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 NotImplemented "Instruction CSET not yet implemented."
	016 Return X0

Method: System.Boolean HitTest(UnityEngine.Rect rect, UnityEngine.Vector2 point, System.Boolean isDirectManipulationDevice)

Disassembly:
	0x03C77974 MOV X0, X21
	0x03C77978 BLR X9
	0x03C7797C MOV W23, W0
	0x03C77980 B 0x3C779AC
	0x03C77984 MOV X0, X21
	0x03C77988 BLR X8
	0x03C7798C LDR X8, [X21]
	0x03C77990 CMP W0, W22
	0x03C77994 CSEL W20, W0, W22, LT
	0x03C77998 LDP X9, X1, [X8 + 0x188]
	0x03C7799C MOV X0, X21
	0x03C779A0 BLR X9
	0x03C779A4 CMP W0, W23
	0x03C779A8 CSEL W23, W0, W23, LT
	0x03C779AC LDR X8, [X21]
	0x03C779B0 LDR V8, [X21 + 0x10]
	0x03C779B4 LDP X9, X1, [X8 + 0x178]
	0x03C779B8 MOV X0, X21
	0x03C779BC BLR X9
	0x03C779C0 LDR X8, [X21]
	0x03C779C4 MOV W22, W0
	0x03C779C8 LDP X9, X1, [X8 + 0x188]
	0x03C779CC MOV X0, X21
	0x03C779D0 BLR X9
	0x03C779D4 LDR V0, [X19 + 0x70]
	0x03C779D8 ADD W8, W0, W22
	0x03C779DC SCVTF S1, W8
	0x03C779E0 FADD S1, S8, S1
	0x03C779E4 FCMP S1, S0
	0x03C779E8 FCSEL S0, S1, S0, GT
	0x03C779EC STR S0, [X19 + 0x70]
	0x03C779F0 LDR X8, [X21]
	0x03C779F4 LDR V8, [X21 + 0x14]
	0x03C779F8 LDP X9, X1, [X8 + 0x178]
	0x03C779FC MOV X0, X21
	0x03C77A00 BLR X9
	0x03C77A04 LDR X8, [X21]
	0x03C77A08 MOV W22, W0
	0x03C77A0C LDP X9, X1, [X8 + 0x188]
	0x03C77A10 MOV X0, X21
	0x03C77A14 BLR X9
	0x03C77A18 LDR V0, [X19 + 0x74]
	0x03C77A1C ADD W8, W0, W22
	0x03C77A20 SCVTF S1, W8
	0x03C77A24 FADD S1, S8, S1
	0x03C77A28 FCMP S1, S0
	0x03C77A2C MOV W25, W31
	0x03C77A30 FCSEL S0, S1, S0, GT

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X19, 0x770000
	011 Move X20, 0x4A9000
	012 Move W8, [X19+2387]
	013 Move X20, [X20+1480]
	014 Move V8, V5
	015 Move V11, V4
	016 Move V9, V3
	017 Move V12, V2
	018 Move V10, V1
	019 Move V13, V0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x4A9000
	025 Move X0, [X0+1480]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X19+2387], W8
	029 Move X0, [X20]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move W0, W31
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move W0, W31
	038 Add S0, S12, S13
	039 Move S1, W31
	040 Add S0, S0, S1
	041 NotImplemented "Instruction FCMP not yet implemented."
	042 Add S0, S9, S10
	043 Move S1, W31
	044 Add S0, S0, S1
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 NotImplemented "Instruction CSET not yet implemented."
	047 Move X20, [X31+64]
	048 Move X19, [X31+72]
	049 Move X30, [X31+48]
	050 Move D9, [X31+32]
	051 Move D8, [X31+40]
	052 Move D11, [X31+16]
	053 Move D10, [X31+24]
	054 Move D13, [X31+80]
	055 Move D12, [X31+88]
	056 Return X0

Method: System.Boolean HitTest(UnityEngine.Rect rect, UnityEngine.Event evt)

Disassembly:
	0x03C6C314 STR S8, [X31 + 0xC]
	0x03C6C318 BL 0x1C16E04
	0x03C6C31C LDR X8, [X19]
	0x03C6C320 MOV X19, X0
	0x03C6C324 MOV X0, X8
	0x03C6C328 BL 0x1C16F10
	0x03C6C32C MOV X1, X31
	0x03C6C330 MOV X20, X0
	0x03C6C334 BL 0x33BDD8C
	0x03C6C338 STR W31, [X20 + 0x10]
	0x03C6C33C STR X19, [X20 + 0x18]
	0x03C6C340 MOV X0, X20
	0x03C6C344 LDP X20, X19, [X31 + 0x20]
	0x03C6C348 LDP X30, X21, [X31 + 0x10]
	0x03C6C34C LDR V8, [X31], #0x30
	0x03C6C350 RET
	0x03C6C354 STR D8, [X31 - 0x30]!
	0x03C6C358 STP X30, X21, [X31 + 0x10]
	0x03C6C35C STP X20, X19, [X31 + 0x20]
	0x03C6C360 ADRP X21, 0x77A000
	0x03C6C364 ADRP X20, 0x487000
	0x03C6C368 ADRP X19, 0x4F4000
	0x03C6C36C LDRB W8, [X21 + 0x690]
	0x03C6C370 LDR X20, [X20 + 0xA90]
	0x03C6C374 LDR X19, [X19 + 0x2C8]
	0x03C6C378 MOV V8.16B, V0.16B
	0x03C6C37C TBNZ X8, 0x0, 0x3C6C3A0
	0x03C6C380 ADRP X0, 0x4F4000
	0x03C6C384 LDR X0, [X0 + 0x2C8]
	0x03C6C388 BL 0x1C16CF4
	0x03C6C38C ADRP X0, 0x487000
	0x03C6C390 LDR X0, [X0 + 0xA90]
	0x03C6C394 BL 0x1C16CF4
	0x03C6C398 MOVZ W8, 0x1
	0x03C6C39C STRB W8, [X21 + 0x690]
	0x03C6C3A0 LDR X0, [X20]
	0x03C6C3A4 ADD X1, X31, 0xC
	0x03C6C3A8 STR S8, [X31 + 0xC]
	0x03C6C3AC BL 0x1C16E04
	0x03C6C3B0 LDR X8, [X19]
	0x03C6C3B4 MOV X19, X0
	0x03C6C3B8 MOV X0, X8
	0x03C6C3BC BL 0x1C16F10
	0x03C6C3C0 MOV X1, X31
	0x03C6C3C4 MOV X20, X0

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x77B000
	011 Move W8, [X20+2388]
	012 Move X19, X0
	013 Move V8, V3
	014 Move V9, V2
	015 Move V10, V1
	016 Move V11, V0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {26}
	021 Move X0, 0x4B4000
	022 Move X0, [X0+1480]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2388], W8
	026 Compare X19, 0
	027 JumpIfEqual {59}
	028 Move X20, 0x4B4000
	029 Move X20, [X20+1480]
	030 Move X0, X19
	031 Call Event.get_mousePosition, X0
	032 Move X0, X19
	033 Move V12, V0
	034 Move V13, V1
	035 Call Event.get_isDirectManipulationDevice, X0
	036 Move X0, [X20]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move V0, V11
	042 Move V1, V10
	043 Move V2, V9
	044 Move V3, V8
	045 Move X20, [X31+64]
	046 Move X19, [X31+72]
	047 Move X30, [X31+48]
	048 Move D9, [X31+32]
	049 Move D8, [X31+40]
	050 Move D11, [X31+16]
	051 Move D10, [X31+24]
	052 Move V4, V12
	053 Move V5, V13
	054 Move W0, W31
	055 Move D13, [X31+80]
	056 Move D12, [X31+88]
	057 Call GUIUtility.HitTest, X0, X1, X2
	058 Return X0
	059 Call 0x1C17F20

Method: System.Void .cctor()

Disassembly:
	0x03C77A34 MOV W22, W20
	0x03C77A38 STR S0, [X19 + 0x74]
	0x03C77A3C LDR W8, [X19 + 0x64]
	0x03C77A40 LDR W9, [X21 + 0x30]
	0x03C77A44 ADD W8, W9, W8
	0x03C77A48 STR W8, [X19 + 0x64]
	0x03C77A4C B 0x3C77924
	0x03C77A50 ADRP X8, 0x4E9000
	0x03C77A54 LDR X8, [X8 + 0x350]
	0x03C77A58 ADD X0, X31, 0x40
	0x03C77A5C LDR X1, [X8]
	0x03C77A60 BL 0x2BC434C
	0x03C77A64 MOV W20, W22
	0x03C77A68 LDR V0, [X19 + 0x70]
	0x03C77A6C ADD W8, W23, W20
	0x03C77A70 SCVTF S1, W8
	0x03C77A74 UNIMPLEMENTED
	0x03C77A78 FSUB V0.2S, V0.2S, V1.2S
	0x03C77A7C STR D0, [X19 + 0x70]
	0x03C77A80 B 0x3C77C18
	0x03C77A84 LDR X0, [X19 + 0x40]
	0x03C77A88 CBZ X0, 0x3C77DC8
	0x03C77A8C BL 0x3C74750
	0x03C77A90 CBZ X0, 0x3C77DC8
	0x03C77A94 MOV X1, X31
	0x03C77A98 BL 0x3C0C9D4
	0x03C77A9C SCVTF S0, W0
	0x03C77AA0 STP S0, S0, [X19 + 0x10]
	0x03C77AA4 B 0x3C77D94
	0x03C77AA8 ADRP X8, 0x4E9000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x770000
	006 Move X20, 0x4A9000
	007 Move X19, 0x4E3000
	008 Move W8, [X21+2389]
	009 Move X20, [X20+1480]
	010 Move X19, [X19+32]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x4E3000
	016 Move X0, [X0+32]
	017 Call 0x1C17CF4
	018 Move X0, 0x4A9000
	019 Move X0, [X0+1480]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X21+2389], W8
	023 Move X8, [X20]
	024 Move X8, [X8+184]
	025 Move [X8], W31
	026 Move X0, [X19]
	027 Call 0x1C17F10
	028 Move X19, X0
	029 Call Event..ctor, X0
	030 Move X8, [X20]
	031 Move X8, [X8+184]
	032 Move [X8+72], X19
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 

Method: System.Int32 Internal_GetControlID_Injected(System.Int32 hint, UnityEngine.FocusType focusType, ref UnityEngine.Rect rect)

Disassembly:
	0x03C764A0 ADRP X8, 0x4AD000
	0x03C764A4 LDR X8, [X8 + 0xF60]
	0x03C764A8 LDR X9, [X8]
	0x03C764AC ADRP X8, 0x4EA000
	0x03C764B0 LDR X8, [X8 + 0x2F0]
	0x03C764B4 LDR X10, [X19]
	0x03C764B8 CMP X10, X9
	0x03C764BC B.NE 0x3C764C8
	0x03C764C0 LDR X19, [X19 + 0x28]
	0x03C764C4 CBNZ X19, 0x3C764B4
	0x03C764C8 LDR X8, [X8]
	0x03C764CC CMP X10, X8
	0x03C764D0 CSET W0, EQ
	0x03C764D4 B 0x3C764DC
	0x03C764D8 MOV W0, W31
	0x03C764DC LDP X20, X19, [X31 + 0x10]
	0x03C764E0 LDR X30, [X31], #0x20
	0x03C764E4 RET
	0x03C764E8 STP D9, D8, [X31 - 0x30]!
	0x03C764EC STR X30, [X31 + 0x10]
	0x03C764F0 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x771000
	007 Move X3, [X22+2392]
	008 Move X19, X2
	009 Move W20, W1
	010 Move W21, W0
	011 Compare X3, 0
	012 JumpIfNotEqual {18}
	013 Move X0, -51716096
	014 Add X0, X0, 1866
	015 Call 0x1C17CB8
	016 Move X3, X0
	017 Move [X22+2392], X0
	018 Move W0, W21
	019 Move W1, W20
	020 Move X2, X19
	021 Move X20, [X31+32]
	022 Move X19, [X31+40]
	023 Move X22, [X31+16]
	024 Move X21, [X31+24]
	025 Move X30, [X31+48]
	026 CallNoReturn X3

Method: System.Void AlignRectToDevice_Injected(ref UnityEngine.Rect rect, out System.Int32 widthInPixels, out System.Int32 heightInPixels, out UnityEngine.Rect ret)

Disassembly:
	0x03C76730 LDRB W8, [X22 + 0x793]
	0x03C76734 STP V0, V1, [X31 + 0x150]
	0x03C76738 STP V2, V3, [X31 + 0x170]
	0x03C7673C CBNZ W8, 0x3C76754
	0x03C76740 ADRP X0, 0x47E000
	0x03C76744 LDR X0, [X0 + 0x5A8]
	0x03C76748 BL 0x1C16CF4
	0x03C7674C MOVZ W8, 0x1
	0x03C76750 STRB W8, [X22 + 0x793]
	0x03C76754 ADRP X8, 0x47E000
	0x03C76758 LDR X8, [X8 + 0x5A8]
	0x03C7675C LDRB W9, [X20 + 0x85B]
	0x03C76760 FNEG S9, S9
	0x03C76764 FNEG S10, S10
	0x03C76768 LDR X8, [X8]
	0x03C7676C LDR X8, [X8 + 0xB8]
	0x03C76770 LDP S13, S11, [X8]
	0x03C76774 LDP S12, S8, [X8 + 0x8]
	0x03C76778 CBNZ W9, 0x3C76790
	0x03C7677C ADRP X0, 0x47D000
	0x03C76780 LDR X0, [X0 + 0x5A0]
	0x03C76784 BL 0x1C16CF4
	0x03C76788 MOVZ W8, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x771000
	008 Move X4, [X23+2400]
	009 Move X19, X3
	010 Move X20, X2
	011 Move X21, X1
	012 Move X22, X0
	013 Compare X4, 0
	014 JumpIfNotEqual {20}
	015 Move X0, -51838976
	016 Add X0, X0, 1712
	017 Call 0x1C17CB8
	018 Move X4, X0
	019 Move [X23+2400], X0
	020 Move X0, X22
	021 Move X1, X21
	022 Move X2, X20
	023 Move X3, X19
	024 Move X20, [X31+32]
	025 Move X19, [X31+40]
	026 Move X22, [X31+16]
	027 Move X21, [X31+24]
	028 Move X30, [X31+48]
	029 Move X23, [X31+56]
	030 CallNoReturn X4

Method: System.Void set_compositionCursorPos_Injected(ref UnityEngine.Vector2 value)

Disassembly:
	0x03C76840 LDP V1, V0, [X31 + 0x230]
	0x03C76844 LDP V3, V2, [X31 + 0x210]
	0x03C76848 LDR X8, [X19 + 0x660]
	0x03C7684C STP V1, V0, [X31 + 0x30]
	0x03C76850 STP V3, V2, [X31 + 0x10]
	0x03C76854 STP V3, V2, [X31 + 0x210]
	0x03C76858 STP V1, V0, [X31 + 0x230]
	0x03C7685C CBNZ X8, 0x3C76874
	0x03C76860 ADRP X0, 0xFFFFFFFFFCE8D000
	0x03C76864 ADD X0, X0, 0x79A
	0x03C76868 BL 0x1C16CB8
	0x03C7686C MOV X8, X0
	0x03C76870 STR X0, [X19 + 0x660]
	0x03C76874 ADD X0, X31, 0x210
	0x03C76878 BLR X8

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x771000
	005 Move X1, [X20+2408]
	006 Move X19, X0
	007 Compare X1, 0
	008 JumpIfNotEqual {14}
	009 Move X0, -51904512
	010 Add X0, X0, 2022
	011 Call 0x1C17CB8
	012 Move X1, X0
	013 Move [X20+2408], X0
	014 Move X0, X19
	015 Move X20, [X31+16]
	016 Move X19, [X31+24]
	017 Move X30, [X31+32]
	018 CallNoReturn X1

