Type: UnityEngine.XR.Interaction.Toolkit.XRBaseController

Method: UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType get_updateTrackingType()

Disassembly:
	0x03B3507C BL 0x1C16CF4
	0x03B35080 MOVZ W8, 0x1

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_updateTrackingType(UnityEngine.XR.Interaction.Toolkit.XRBaseController/UpdateType value)

Disassembly:
	0x03B35084 STRB W8, [X21 + 0x7F8]
	0x03B35088 MOV X0, X20

ISIL:
	001 Move [X0+32], W1
	002 Return 

Method: System.Boolean get_enableInputTracking()

Disassembly:
	0x03B3508C STRB W31, [X31 + 0xC]
	0x03B35090 BL 0x3B34C50

ISIL:
	001 Move W0, [X0+36]
	002 Return X0

Method: System.Void set_enableInputTracking(System.Boolean value)

Disassembly:
	0x03B35094 MOV X21, X0
	0x03B35098 LDR X0, [X22]
	0x03B3509C LDR V8, [X20 + 0xB8]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+36], W8
	003 Return 

Method: System.Boolean get_enableInputActions()

Disassembly:
	0x03B350A0 MOV X20, X1
	0x03B350A4 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0+37]
	002 Return X0

Method: System.Void set_enableInputActions(System.Boolean value)

Disassembly:
	0x03B350A8 CBNZ W8, 0x3B350B0
	0x03B350AC BL 0x1C16DFC
	0x03B350B0 ADD X3, X31, 0xC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+37], W8
	003 Return 

Method: UnityEngine.Transform get_modelPrefab()

Disassembly:
	0x03B350B4 MOV X0, X21
	0x03B350B8 MOV X1, X20

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_modelPrefab(UnityEngine.Transform value)

Disassembly:
	0x03B350BC MOV W2, W19
	0x03B350C0 MOV V0.16B, V8.16B

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: UnityEngine.Transform get_modelParent()

Disassembly:
	0x03B350C4 MOV X4, X31
	0x03B350C8 BL 0x3B851AC

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_modelParent(UnityEngine.Transform value)

Disassembly:
	0x03B350CC LDRB W0, [X31 + 0xC]
	0x03B350D0 LDP X20, X19, [X31 + 0x30]
	0x03B350D4 LDP X22, X21, [X31 + 0x20]
	0x03B350D8 LDR X30, [X31 + 0x18]
	0x03B350DC LDR V8, [X31 + 0x10]
	0x03B350E0 ADD X31, X31, 0x40
	0x03B350E4 RET
	0x03B350E8 STR X30, [X31 - 0x30]!
	0x03B350EC STP X22, X21, [X31 + 0x10]
	0x03B350F0 STP X20, X19, [X31 + 0x20]
	0x03B350F4 ADRP X22, 0x8AD000
	0x03B350F8 ADRP X21, 0x5C4000
	0x03B350FC LDRB W8, [X22 + 0x7F9]
	0x03B35100 LDR X21, [X21 + 0x8C8]
	0x03B35104 MOV W19, W1
	0x03B35108 MOV X20, X0
	0x03B3510C TBNZ X8, 0x0, 0x3B35124
	0x03B35110 ADRP X0, 0x5C4000
	0x03B35114 LDR X0, [X0 + 0x8C8]
	0x03B35118 BL 0x1C16CF4
	0x03B3511C MOVZ W8, 0x1
	0x03B35120 STRB W8, [X22 + 0x7F9]
	0x03B35124 MOV X0, X20
	0x03B35128 STR W31, [X31 + 0xC]
	0x03B3512C BL 0x3B34C50
	0x03B35130 MOV X20, X0
	0x03B35134 LDR X0, [X21]
	0x03B35138 MOV X21, X1
	0x03B3513C LDR W8, [X0 + 0xE0]
	0x03B35140 CBNZ W8, 0x3B35148
	0x03B35144 BL 0x1C16DFC
	0x03B35148 ADD X3, X31, 0xC
	0x03B3514C MOV X0, X20
	0x03B35150 MOV X1, X21
	0x03B35154 MOV W2, W19
	0x03B35158 MOV X4, X31
	0x03B3515C BL 0x3B854E4
	0x03B35160 LDR V0, [X31 + 0xC]
	0x03B35164 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8AE000
	007 Move X21, 0x5BF000
	008 Move W8, [X22+2030]
	009 Move X21, [X21+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5BF000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2030], W8
	021 Move [X19+48], X20
	022 Move X0, [X21]
	023 Move X20, [X19+56]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {48}
	036 Move X0, [X19+56]
	037 Compare X0, 0
	038 JumpIfEqual {54}
	039 Move X1, [X19+48]
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X2, X31
	045 Move X30, [X31+48]
	046 Call Transform.set_parent, X0, X1
	047 Return 
	048 Move X20, [X31+32]
	049 Move X19, [X31+40]
	050 Move X22, [X31+16]
	051 Move X21, [X31+24]
	052 Move X30, [X31+48]
	053 Return 
	054 Call 0x1C17F20

Method: UnityEngine.Transform get_model()

Disassembly:
	0x03B35168 LDP X22, X21, [X31 + 0x10]
	0x03B3516C LDR X30, [X31], #0x30

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void set_model(UnityEngine.Transform value)

Disassembly:
	0x03B35170 RET
	0x03B35174 SUB X31, X31, 0x50

ISIL:
	001 Move [X0+56], X1
	002 Return 

Method: System.Boolean get_animateModel()

Disassembly:
	0x03B35178 STP D9, D8, [X31 + 0x30]
	0x03B3517C STP X30, X19, [X31 + 0x40]

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_animateModel(System.Boolean value)

Disassembly:
	0x03B35180 MOV V8.16B, V1.16B
	0x03B35184 MOV V9.16B, V0.16B
	0x03B35188 MOV X19, X0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+64], W8
	003 Return 

Method: System.String get_modelSelectTransition()

Disassembly:
	0x03B3518C STP X31, X31, [X31 + 0x18]
	0x03B35190 STR W31, [X31 + 0x28]

ISIL:
	001 Move X0, [X0+72]
	002 Return X0

Method: System.Void set_modelSelectTransition(System.String value)

Disassembly:
	0x03B35194 BL 0x3B34C50
	0x03B35198 STP X0, X1, [X31 + 0x8]

ISIL:
	001 Move [X0+72], X1
	002 Return 

Method: System.String get_modelDeSelectTransition()

Disassembly:
	0x03B3519C ADD X0, X31, 0x8
	0x03B351A0 ADD X1, X31, 0x18

ISIL:
	001 Move X0, [X0+80]
	002 Return X0

Method: System.Void set_modelDeSelectTransition(System.String value)

Disassembly:
	0x03B351A4 MOV X2, X31
	0x03B351A8 BL 0x3E640EC

ISIL:
	001 Move [X0+80], X1
	002 Return 

Method: System.Boolean get_hideControllerModel()

Disassembly:
	0x03B351AC MOV W8, W0
	0x03B351B0 MOV W0, W31

ISIL:
	001 Move W0, [X0+88]
	002 Return X0

Method: System.Void set_hideControllerModel(System.Boolean value)

Disassembly:
	0x03B351B4 TBZ X8, 0x0, 0x3B351F4
	0x03B351B8 ADD X0, X31, 0x18
	0x03B351BC MOV X1, X31
	0x03B351C0 BL 0x3E62BF8
	0x03B351C4 TBZ X0, 0x0, 0x3B351F0
	0x03B351C8 MOV X0, X19
	0x03B351CC BL 0x3B34C50
	0x03B351D0 STP X0, X1, [X31 + 0x8]
	0x03B351D4 ADD X0, X31, 0x8
	0x03B351D8 MOV W1, W31
	0x03B351DC MOV V0.16B, V9.16B
	0x03B351E0 MOV V1.16B, V8.16B
	0x03B351E4 MOV X2, X31
	0x03B351E8 BL 0x3E63ECC
	0x03B351EC B 0x3B351F4
	0x03B351F0 MOV W0, W31
	0x03B351F4 LDP X30, X19, [X31 + 0x40]
	0x03B351F8 LDP D9, D8, [X31 + 0x30]
	0x03B351FC AND W0, W0, 0x1
	0x03B35200 ADD X31, X31, 0x50
	0x03B35204 RET
	0x03B35208 ADRP X9, 0xFFFFFFFFFCFB8000
	0x03B3520C LDR V0, [X9 + 0xB18]
	0x03B35210 MOVZ W8, 0x5
	0x03B35214 ADRP X9, 0xFFFFFFFFFCFB5000
	0x03B35218 STR W8, [X0 + 0xA4]
	0x03B3521C MOVZ X8, 0x2
	0x03B35220 STUR D0, [X0 + 0xAC]
	0x03B35224 LDR V0, [X9 + 0xE8]
	0x03B35228 MOVK X8, 0xCCCD
	0x03B3522C MOVK X8, 0x3DCC0000
	0x03B35230 STUR X8, [X0 + 0xB4]
	0x03B35234 MOVZ W8, 0x1
	0x03B35238 MOVZ W9, 0x101
	0x03B3523C MOV X1, X31
	0x03B35240 STR W8, [X0 + 0xCC]
	0x03B35244 STRH W9, [X0 + 0x24]
	0x03B35248 STRB W8, [X0 + 0x88]
	0x03B3524C STUR V0, [X0 + 0xBC]
	0x03B35250 STRB W8, [X0 + 0x99]
	0x03B35254 B 0x3C36C30
	0x03B35258 LDRB W0, [X0 + 0x20]
	0x03B3525C RET
	0x03B35260 AND W8, W1, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8AE000
	007 Move X20, 0x5BF000
	008 Move W8, [X22+2031]
	009 Move X20, [X20+1432]
	010 Move X19, X0
	011 And W21, W1, 1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5BF000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2031], W8
	021 Move [X19+88], W21
	022 Move X0, [X20]
	023 Move X20, [X19+56]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {54}
	036 Move X0, [X19+56]
	037 Compare X0, 0
	038 JumpIfEqual {60}
	039 Move X1, X31
	040 Call Component.get_gameObject, X0
	041 Compare X0, 0
	042 JumpIfEqual {60}
	043 Move W8, [X19+88]
	044 Move X20, [X31+32]
	045 Move X19, [X31+40]
	046 Move X22, [X31+16]
	047 Move X21, [X31+24]
	048 Move X2, X31
	049 NotImplemented "Instruction CMP not yet implemented."
	050 NotImplemented "Instruction CSET not yet implemented."
	051 Move X30, [X31+48]
	052 Call GameObject.SetActive, X0, X1
	053 Return 
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return 
	060 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.InteractionState get_selectInteractionState()

Disassembly:
	0x03B35264 STRB W8, [X0 + 0x20]
	0x03B35268 RET

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 Return X0

Method: UnityEngine.XR.Interaction.Toolkit.InteractionState get_activateInteractionState()

Disassembly:
	0x03B3526C LDR X0, [X0 + 0x28]
	0x03B35270 RET

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 Return X0

Method: UnityEngine.XR.Interaction.Toolkit.InteractionState get_uiPressInteractionState()

Disassembly:
	0x03B35274 STR X1, [X0 + 0x28]
	0x03B35278 RET

ISIL:
	001 NotImplemented "Instruction LDUR not yet implemented."
	002 Return X0

Method: UnityEngine.Vector2 get_uiScrollValue()

Disassembly:
	0x03B3527C LDR X0, [X0 + 0x30]
	0x03B35280 RET

ISIL:
	001 Move S0, [X0+116]
	002 Move S1, [X0+120]
	003 Return X0

Method: UnityEngine.XR.Interaction.Toolkit.XRControllerState get_currentControllerState()

Disassembly:
	0x03B35284 STR X1, [X0 + 0x30]
	0x03B35288 RET
	0x03B3528C LDRB W0, [X0 + 0x38]
	0x03B35290 RET
	0x03B35294 AND W8, W1, 0x1
	0x03B35298 STRB W8, [X0 + 0x38]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRBaseController.SetupControllerState, X0
	005 Move X0, [X19+128]
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Return X0

Method: System.Void set_currentControllerState(UnityEngine.XR.Interaction.Toolkit.XRControllerState value)

Disassembly:
	0x03B35300 MOV W1, W31
	0x03B35304 STR S0, [X19 + 0x48]
	0x03B35308 BL 0x3B35368

ISIL:
	001 Move [X0+128], X1
	002 Move [X0+136], W31
	003 Return 

Method: System.Void Awake()

Disassembly:
	0x03B3530C STR X31, [X19 + 0x40]
	0x03B35310 LDR X0, [X21]
	0x03B35314 LDR X21, [X19 + 0x28]
	0x03B35318 LDR W8, [X0 + 0xE0]
	0x03B3531C CBNZ W8, 0x3B35324
	0x03B35320 BL 0x1C16DFC
	0x03B35324 MOV X0, X21
	0x03B35328 MOV X1, X31
	0x03B3532C BL 0x3C38948
	0x03B35330 TBZ X0, 0x0, 0x3B35350
	0x03B35334 TBZ X20, 0x0, 0x3B35348
	0x03B35338 LDR X0, [X19 + 0x28]
	0x03B3533C CBZ X0, 0x3B35364
	0x03B35340 BL 0x3B35494
	0x03B35344 B 0x3B35350
	0x03B35348 LDR X8, [X19 + 0x28]
	0x03B3534C CBZ X8, 0x3B35364
	0x03B35350 STRB W22, [X19 + 0x4C]
	0x03B35354 LDP X20, X19, [X31 + 0x20]
	0x03B35358 LDP X22, X21, [X31 + 0x10]
	0x03B3535C LDR X30, [X31], #0x30
	0x03B35360 RET
	0x03B35364 BL 0x1C16F20
	0x03B35368 STP X30, X23, [X31 - 0x30]!
	0x03B3536C STP X22, X21, [X31 + 0x10]
	0x03B35370 STP X20, X19, [X31 + 0x20]
	0x03B35374 ADRP X21, 0x8AD000
	0x03B35378 LDRB W8, [X21 + 0x7FB]
	0x03B3537C MOV W20, W1
	0x03B35380 MOV X19, X0
	0x03B35384 AND W23, W1, 0x1
	0x03B35388 TBNZ X8, 0x0, 0x3B353A0
	0x03B3538C ADRP X0, 0x5BE000
	0x03B35390 LDR X0, [X0 + 0x598]
	0x03B35394 BL 0x1C16CF4
	0x03B35398 MOVZ W8, 0x1
	0x03B3539C STRB W8, [X21 + 0x7FB]
	0x03B353A0 LDRB W8, [X19 + 0x4D]
	0x03B353A4 CMP W8, W23
	0x03B353A8 B.EQ 0x3B35480
	0x03B353AC MOV X0, X19
	0x03B353B0 MOV W1, W31
	0x03B353B4 BL 0x3B352A8
	0x03B353B8 ADRP X22, 0x5BE000
	0x03B353BC LDR X22, [X22 + 0x598]
	0x03B353C0 LDR X21, [X19 + 0x28]
	0x03B353C4 LDR X0, [X22]
	0x03B353C8 LDR W8, [X0 + 0xE0]
	0x03B353CC CBNZ W8, 0x3B353D4
	0x03B353D0 BL 0x1C16DFC
	0x03B353D4 MOV X0, X21
	0x03B353D8 MOV X1, X31
	0x03B353DC BL 0x3C38948
	0x03B353E0 TBZ X0, 0x0, 0x3B353EC
	0x03B353E4 STR X31, [X19 + 0x50]
	0x03B353E8 STR W31, [X19 + 0x58]
	0x03B353EC STR X31, [X19 + 0x40]
	0x03B353F0 STRB W23, [X19 + 0x4D]
	0x03B353F4 TBZ X20, 0x0, 0x3B35440
	0x03B353F8 LDR X0, [X22]
	0x03B353FC LDR X20, [X19 + 0x30]
	0x03B35400 LDR W8, [X0 + 0xE0]
	0x03B35404 CBNZ W8, 0x3B3540C
	0x03B35408 BL 0x1C16DFC
	0x03B3540C MOV X0, X20
	0x03B35410 MOV X1, X31
	0x03B35414 MOV X2, X31
	0x03B35418 BL 0x3C354F8
	0x03B3541C TBZ X0, 0x0, 0x3B35440
	0x03B35420 LDR X8, [X19 + 0x30]
	0x03B35424 CBZ X8, 0x3B35490
	0x03B35428 LDRB W9, [X8 + 0x25]
	0x03B3542C STRB W9, [X19 + 0x5C]
	0x03B35430 LDRB W9, [X8 + 0x24]
	0x03B35434 STRB W9, [X19 + 0x5D]
	0x03B35438 STRH W31, [X8 + 0x24]
	0x03B3543C B 0x3B35480
	0x03B35440 LDR X0, [X22]
	0x03B35444 LDR X20, [X19 + 0x30]
	0x03B35448 LDR W8, [X0 + 0xE0]
	0x03B3544C CBNZ W8, 0x3B35454
	0x03B35450 BL 0x1C16DFC
	0x03B35454 MOV X0, X20
	0x03B35458 MOV X1, X31
	0x03B3545C MOV X2, X31
	0x03B35460 BL 0x3C354F8
	0x03B35464 TBZ X0, 0x0, 0x3B35480
	0x03B35468 LDR X8, [X19 + 0x30]
	0x03B3546C CBZ X8, 0x3B35490
	0x03B35470 LDRB W9, [X19 + 0x5C]
	0x03B35474 STRB W9, [X8 + 0x25]
	0x03B35478 LDRB W9, [X19 + 0x5D]
	0x03B3547C STRB W9, [X8 + 0x24]
	0x03B35480 LDP X20, X19, [X31 + 0x20]
	0x03B35484 LDP X22, X21, [X31 + 0x10]
	0x03B35488 LDP X30, X23, [X31], #0x30
	0x03B3548C RET
	0x03B35490 BL 0x1C16F20
	0x03B35494 STR X30, [X31 - 0x20]!
	0x03B35498 STP X20, X19, [X31 + 0x10]
	0x03B3549C ADRP X20, 0x8AD000
	0x03B354A0 LDRB W8, [X20 + 0x806]
	0x03B354A4 MOV X19, X0
	0x03B354A8 TBNZ X8, 0x0, 0x3B354C0
	0x03B354AC ADRP X0, 0x625000
	0x03B354B0 LDR X0, [X0 + 0x80]
	0x03B354B4 BL 0x1C16CF4
	0x03B354B8 MOVZ W8, 0x1
	0x03B354BC STRB W8, [X20 + 0x806]
	0x03B354C0 LDR X8, [X19 + 0x20]
	0x03B354C4 STRH W31, [X19 + 0x18]
	0x03B354C8 STRB W31, [X19 + 0x1A]
	0x03B354CC CBZ X8, 0x3B35508
	0x03B354D0 LDP W2, W9, [X8 + 0x18]
	0x03B354D4 ADD W9, W9, 0x1
	0x03B354D8 CMP W2, 0x1
	0x03B354DC STP W31, W9, [X8 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8AE000
	006 Move X20, 0x5BF000
	007 Move W8, [X21+2032]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x5BF000
	015 Move X0, [X0+2648]
	016 Call 0x1C17CF4
	017 Move X0, 0x5BF000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x626000
	021 Move X0, [X0+104]
	022 Call 0x1C17CF4
	023 Move X0, 0x5BF000
	024 Move X0, [X0+3784]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+2032], W8
	028 Move X0, [X20]
	029 Move X20, [X19+48]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {136}
	042 Move X0, X19
	043 Move X1, X31
	044 Call Component.get_gameObject, X0
	045 Compare X0, 0
	046 JumpIfEqual {141}
	047 Move X1, X31
	048 Call Object.get_name, X0
	049 Move X8, 0x5BF000
	050 Move X8, [X8+3784]
	051 Move X9, 0x626000
	052 Move X9, [X9+104]
	053 Move X1, X0
	054 Move X8, [X8]
	055 Move X3, X31
	056 Move X2, [X9]
	057 Move X0, X8
	058 Call String.Concat, X0, X1, X2
	059 Move X8, 0x5BF000
	060 Move X8, [X8+2648]
	061 Move X21, X0
	062 Move X8, [X8]
	063 Move X0, X8
	064 Call 0x1C17F10
	065 Move X1, X21
	066 Move X2, X31
	067 Move X20, X0
	068 Call GameObject..ctor, X0, X1
	069 Compare X20, 0
	070 JumpIfEqual {141}
	071 Move X0, X20
	072 Move X1, X31
	073 Call GameObject.get_transform, X0
	074 Move X20, X0
	075 Move [X19+48], X0
	076 Move X0, X19
	077 Move X1, X31
	078 Call Component.get_transform, X0
	079 Compare X20, 0
	080 JumpIfEqual {141}
	081 Move X1, X0
	082 Move X0, X20
	083 Move W2, W31
	084 Move X3, X31
	085 Call Transform.SetParent, X0, X1, X2
	086 Move X21, 0x8A4000
	087 Move W8, [X21+1923]
	088 Move X20, [X19+48]
	089 Compare W8, 0
	090 JumpIfNotEqual {96}
	091 Move X0, 0x5BF000
	092 Move X0, [X0+1440]
	093 Call 0x1C17CF4
	094 Move W8, 1
	095 Move [X21+1923], W8
	096 Compare X20, 0
	097 JumpIfEqual {141}
	098 Move X8, 0x5BF000
	099 Move X8, [X8+1440]
	100 Move X0, X20
	101 Move X1, X31
	102 Move X8, [X8]
	103 Move X8, [X8+184]
	104 Move S1, [X8+4]
	105 Move S2, [X8+8]
	106 Move V0, [X8]
	107 Call Transform.set_localPosition, X0, X1
	108 Move X20, 0x8A4000
	109 Move W8, [X20+1939]
	110 Move X19, [X19+48]
	111 Compare W8, 0
	112 JumpIfNotEqual {118}
	113 Move X0, 0x5C0000
	114 Move X0, [X0+1448]
	115 Call 0x1C17CF4
	116 Move W8, 1
	117 Move [X20+1939], W8
	118 Compare X19, 0
	119 JumpIfEqual {141}
	120 Move X8, 0x5C0000
	121 Move X8, [X8+1448]
	122 Move X0, X19
	123 Move X20, [X31+16]
	124 Move X19, [X31+24]
	125 Move X1, X31
	126 Move X8, [X8]
	127 Move X8, [X8+184]
	128 Move S2, [X8+8]
	129 Move S3, [X8+12]
	130 Move S0, [X8]
	131 Move S1, [X8+4]
	132 Move X30, [X31+32]
	133 Move X21, [X31+40]
	134 Call Transform.set_localRotation, X0, X1
	135 Return 
	136 Move X20, [X31+16]
	137 Move X19, [X31+24]
	138 Move X30, [X31+32]
	139 Move X21, [X31+40]
	140 Return 
	141 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03B33660 CMP X9, X8
	0x03B33664 B.EQ 0x3B336EC
	0x03B33668 MOV X0, X19
	0x03B3366C MOV X1, X31
	0x03B33670 BL 0x3734B58
	0x03B33674 CBZ X0, 0x3B336AC
	0x03B33678 ADRP X8, 0x614000
	0x03B3367C LDR X8, [X8 + 0x810]
	0x03B33680 LDR X9, [X0]
	0x03B33684 LDR X8, [X8]
	0x03B33688 LDRB W11, [X9 + 0x130]
	0x03B3368C LDRB W10, [X8 + 0x130]
	0x03B33690 CMP W11, W10
	0x03B33694 B.CC 0x3B336AC
	0x03B33698 LDR X9, [X9 + 0xC8]
	0x03B3369C ADD X9, X9, X10, 0x3, LSL
	0x03B336A0 LDUR X9, [X9 - 0x8]
	0x03B336A4 CMP X9, X8
	0x03B336A8 B.EQ 0x3B3370C
	0x03B336AC LDR X8, [X20]
	0x03B336B0 MOV X0, X20
	0x03B336B4 MOV X1, X19
	0x03B336B8 LDR X9, [X8 + 0x258]
	0x03B336BC LDR X2, [X8 + 0x260]
	0x03B336C0 BLR X9
	0x03B336C4 ANDS W31, W0, 0x1
	0x03B336C8 FMOV S0, W31
	0x03B336CC FMOV S1, 1
	0x03B336D0 FCSEL S0, S1, S0, NE
	0x03B336D4 B 0x3B336DC
	0x03B336D8 FMOV S0, W31
	0x03B336DC LDP X20, X19, [X31 + 0x20]
	0x03B336E0 LDP X30, X21, [X31 + 0x10]
	0x03B336E4 LDP D9, D8, [X31], #0x30
	0x03B336E8 RET
	0x03B336EC ADRP X8, 0x5C6000
	0x03B336F0 LDR X8, [X8 + 0x8C0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8B0000
	006 Move X21, 0x5E8000
	007 Move W8, [X20+2033]
	008 Move X21, [X21+3632]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5C1000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move X0, 0x5E8000
	018 Move X0, [X0+3632]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2033], W8
	022 Move X0, [X21]
	023 Call 0x1C17F10
	024 Compare X19, 0
	025 JumpIfEqual {47}
	026 Move X8, [X19]
	027 Move X21, 0x5C1000
	028 Move X1, X19
	029 Move X3, X31
	030 Move X2, [X8+464]
	031 Move X21, [X21+2416]
	032 Move X20, X0
	033 Call UnityAction..ctor, X0, X1, X2
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X1, X31
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call Application.add_onBeforeRender, X0
	046 Return 
	047 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03B33924 ADRP X0, 0x5CC000
	0x03B33928 LDR X0, [X0 + 0xB8]
	0x03B3392C BL 0x1C16CF4
	0x03B33930 ADRP X0, 0x627000
	0x03B33934 LDR X0, [X0 + 0x30]
	0x03B33938 BL 0x1C16CF4
	0x03B3393C ADRP X0, 0x615000
	0x03B33940 LDR X0, [X0 + 0x688]
	0x03B33944 BL 0x1C16CF4
	0x03B33948 ADRP X0, 0x627000
	0x03B3394C LDR X0, [X0 + 0x38]
	0x03B33950 BL 0x1C16CF4
	0x03B33954 ADRP X0, 0x627000
	0x03B33958 LDR X0, [X0 + 0x40]
	0x03B3395C BL 0x1C16CF4
	0x03B33960 ADRP X0, 0x614000
	0x03B33964 LDR X0, [X0 + 0x800]
	0x03B33968 BL 0x1C16CF4
	0x03B3396C ADRP X0, 0x614000
	0x03B33970 LDR X0, [X0 + 0x808]
	0x03B33974 BL 0x1C16CF4
	0x03B33978 ADRP X0, 0x627000
	0x03B3397C LDR X0, [X0 + 0x48]
	0x03B33980 BL 0x1C16CF4
	0x03B33984 ADRP X0, 0x5E8000
	0x03B33988 LDR X0, [X0 + 0x518]
	0x03B3398C BL 0x1C16CF4
	0x03B33990 ADRP X0, 0x627000
	0x03B33994 LDR X0, [X0 + 0x50]
	0x03B33998 BL 0x1C16CF4
	0x03B3399C ADRP X0, 0x626000
	0x03B339A0 LDR X0, [X0 + 0xFF0]
	0x03B339A4 BL 0x1C16CF4
	0x03B339A8 ADRP X0, 0x627000
	0x03B339AC LDR X0, [X0 + 0x58]
	0x03B339B0 BL 0x1C16CF4
	0x03B339B4 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8B0000
	006 Move X21, 0x5E8000
	007 Move W8, [X20+2034]
	008 Move X21, [X21+3632]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5C1000
	015 Move X0, [X0+2416]
	016 Call 0x1C17CF4
	017 Move X0, 0x5E8000
	018 Move X0, [X0+3632]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2034], W8
	022 Move X0, [X21]
	023 Call 0x1C17F10
	024 Compare X19, 0
	025 JumpIfEqual {47}
	026 Move X8, [X19]
	027 Move X21, 0x5C1000
	028 Move X1, X19
	029 Move X3, X31
	030 Move X2, [X8+464]
	031 Move X21, [X21+2416]
	032 Move X20, X0
	033 Call UnityAction..ctor, X0, X1, X2
	034 Move X0, [X21]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X1, X31
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call Application.remove_onBeforeRender, X0
	046 Return 
	047 Call 0x1C17F20

Method: System.Void Update()

Disassembly:
	0x03B354E0 B.LT 0x3B354FC
	0x03B354E4 LDR X0, [X8 + 0x10]
	0x03B354E8 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+440]
	003 Move X1, [X8+448]
	004 CallNoReturn X2

Method: System.Void SetupModel()

Disassembly:
	0x03B354EC MOV W1, W31
	0x03B354F0 MOV X3, X31
	0x03B354F4 LDR X30, [X31], #0x20
	0x03B354F8 B 0x339FA34
	0x03B354FC LDP X20, X19, [X31 + 0x10]
	0x03B35500 LDR X30, [X31], #0x20
	0x03B35504 RET
	0x03B35508 BL 0x1C16F20
	0x03B3550C RET
	0x03B35510 LDRB W0, [X0 + 0x4D]
	0x03B35514 RET
	0x03B35518 STR X31, [X0 + 0x50]
	0x03B3551C STR W31, [X0 + 0x58]
	0x03B35520 RET
	0x03B35524 LDR V0, [X0 + 0x40]
	0x03B35528 RET
	0x03B3552C STP X30, X21, [X31 - 0x20]!
	0x03B35530 STP X20, X19, [X31 + 0x10]
	0x03B35534 ADRP X21, 0x8AD000
	0x03B35538 ADRP X20, 0x5BE000
	0x03B3553C LDRB W8, [X21 + 0x7FC]
	0x03B35540 LDR X20, [X20 + 0x598]
	0x03B35544 MOV X19, X0
	0x03B35548 TBNZ X8, 0x0, 0x3B35560
	0x03B3554C ADRP X0, 0x5BE000
	0x03B35550 LDR X0, [X0 + 0x598]
	0x03B35554 BL 0x1C16CF4
	0x03B35558 MOVZ W8, 0x1
	0x03B3555C STRB W8, [X21 + 0x7FC]
	0x03B35560 LDR X0, [X20]
	0x03B35564 LDR X20, [X19 + 0x28]
	0x03B35568 LDR W8, [X0 + 0xE0]
	0x03B3556C CBNZ W8, 0x3B35574
	0x03B35570 BL 0x1C16DFC
	0x03B35574 MOV X0, X20
	0x03B35578 MOV X1, X31
	0x03B3557C MOV X2, X31
	0x03B35580 BL 0x3C354F8
	0x03B35584 TBZ X0, 0x0, 0x3B3559C
	0x03B35588 LDR X0, [X19 + 0x28]
	0x03B3558C CBZ X0, 0x3B355AC
	0x03B35590 LDP X20, X19, [X31 + 0x10]
	0x03B35594 LDP X30, X21, [X31], #0x20
	0x03B35598 B 0x3B355B0
	0x03B3559C LDP X20, X19, [X31 + 0x10]
	0x03B355A0 FMOV D0, X31
	0x03B355A4 LDP X30, X21, [X31], #0x20
	0x03B355A8 RET
	0x03B355AC BL 0x1C16F20
	0x03B355B0 STR X30, [X31 - 0x20]!
	0x03B355B4 STP X20, X19, [X31 + 0x10]
	0x03B355B8 ADRP X20, 0x8AD000
	0x03B355BC LDRB W8, [X20 + 0x801]
	0x03B355C0 MOV X19, X0
	0x03B355C4 TBNZ X8, 0x0, 0x3B355E8
	0x03B355C8 ADRP X0, 0x625000
	0x03B355CC LDR X0, [X0 + 0x88]
	0x03B355D0 BL 0x1C16CF4
	0x03B355D4 ADRP X0, 0x625000
	0x03B355D8 LDR X0, [X0 + 0x90]
	0x03B355DC BL 0x1C16CF4
	0x03B355E0 MOVZ W8, 0x1
	0x03B355E4 STRB W8, [X20 + 0x801]
	0x03B355E8 LDR X0, [X19 + 0x20]
	0x03B355EC CBZ X0, 0x3B35628
	0x03B355F0 LDR W8, [X0 + 0x18]
	0x03B355F4 CBZ W8, 0x3B35618
	0x03B355F8 ADRP X9, 0x625000
	0x03B355FC LDR X9, [X9 + 0x90]
	0x03B35600 SUB W1, W8, 0x1
	0x03B35604 LDR X2, [X9]
	0x03B35608 BL 0x301BCCC
	0x03B3560C CBZ X0, 0x3B35628
	0x03B35610 LDR V0, [X0 + 0x10]
	0x03B35614 B 0x3B3561C
	0x03B35618 FMOV D0, X31
	0x03B3561C LDP X20, X19, [X31 + 0x10]
	0x03B35620 LDR X30, [X31], #0x20
	0x03B35624 RET
	0x03B35628 BL 0x1C16F20
	0x03B3562C LDR V0, [X0 + 0x48]
	0x03B35630 RET
	0x03B35634 STR S0, [X0 + 0x48]
	0x03B35638 RET
	0x03B3563C STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8AE000
	007 Move X22, 0x5BF000
	008 Move W8, [X20+2035]
	009 Move X22, [X22+1432]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {23}
	015 Move X0, 0x5C3000
	016 Move X0, [X0+464]
	017 Call 0x1C17CF4
	018 Move X0, 0x5BF000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2035], W8
	023 Move X0, [X22]
	024 Move X20, [X19+56]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {74}
	037 Move X8, [X19]
	038 Move X0, X19
	039 Move X9, [X8+424]
	040 Move X1, [X8+432]
	041 NotImplemented "Instruction BLR not yet implemented."
	042 Move X8, [X22]
	043 Move X20, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {74}
	057 Move X0, [X22]
	058 Move X21, [X19+48]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X8, 0x5C3000
	064 Move X8, [X8+464]
	065 Move X0, X20
	066 Move X1, X21
	067 Move X2, [X8]
	068 Call 0x222E488, X0, X1
	069 Compare X0, 0
	070 JumpIfEqual {112}
	071 Move X1, X31
	072 Call GameObject.get_transform, X0
	073 Move [X19+56], X0
	074 Move X0, [X22]
	075 Move X20, [X19+56]
	076 Move W8, [X0+224]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, X20
	081 Move X1, X31
	082 Move X2, X31
	083 Call Object.op_Inequality, X0, X1
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {106}
	088 Move X0, [X19+56]
	089 Compare X0, 0
	090 JumpIfEqual {112}
	091 Move X1, X31
	092 Call Component.get_gameObject, X0
	093 Compare X0, 0
	094 JumpIfEqual {112}
	095 Move W8, [X19+88]
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X2, X31
	101 NotImplemented "Instruction CMP not yet implemented."
	102 NotImplemented "Instruction CSET not yet implemented."
	103 Move X30, [X31+48]
	104 Call GameObject.SetActive, X0, X1
	105 Return 
	106 Move X20, [X31+32]
	107 Move X19, [X31+40]
	108 Move X22, [X31+16]
	109 Move X21, [X31+24]
	110 Move X30, [X31+48]
	111 Return 
	112 Call 0x1C17F20

Method: System.Void SetupControllerState()

Disassembly:
	0x03B3529C RET
	0x03B352A0 LDRB W0, [X0 + 0x4C]
	0x03B352A4 RET
	0x03B352A8 STR X30, [X31 - 0x30]!
	0x03B352AC STP X22, X21, [X31 + 0x10]
	0x03B352B0 STP X20, X19, [X31 + 0x20]
	0x03B352B4 ADRP X21, 0x8AD000
	0x03B352B8 LDRB W8, [X21 + 0x7FA]
	0x03B352BC MOV W20, W1
	0x03B352C0 MOV X19, X0
	0x03B352C4 AND W22, W1, 0x1
	0x03B352C8 TBNZ X8, 0x0, 0x3B352E0
	0x03B352CC ADRP X0, 0x5BE000
	0x03B352D0 LDR X0, [X0 + 0x598]
	0x03B352D4 BL 0x1C16CF4
	0x03B352D8 MOVZ W8, 0x1
	0x03B352DC STRB W8, [X21 + 0x7FA]
	0x03B352E0 LDRB W8, [X19 + 0x4C]
	0x03B352E4 CMP W8, W22
	0x03B352E8 B.EQ 0x3B35354
	0x03B352EC ADRP X21, 0x5BE000
	0x03B352F0 LDR X21, [X21 + 0x598]
	0x03B352F4 MOV X0, X31
	0x03B352F8 BL 0x3C3C6C4
	0x03B352FC MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8AE000
	005 Move W8, [X20+2036]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x626000
	012 Move X0, [X0+96]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2036], W8
	016 Move X8, [X19+128]
	017 Compare X8, 0
	018 JumpIfNotEqual {29}
	019 Move W8, [X19+136]
	020 Compare W8, 0
	021 JumpIfEqual {29}
	022 Move X8, 0x626000
	023 Move X8, [X8+96]
	024 Move X0, [X8]
	025 Call 0x1C17F10
	026 Move X20, X0
	027 Call XRControllerState..ctor, X0
	028 Move [X19+128], X20
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Return 

Method: UnityEngine.GameObject GetModelPrefab()

Disassembly:
	0x03B35700 TBNZ X8, 0x0, 0x3B35724
	0x03B35704 ADRP X0, 0x625000
	0x03B35708 LDR X0, [X0 + 0x88]
	0x03B3570C BL 0x1C16CF4
	0x03B35710 ADRP X0, 0x5BE000
	0x03B35714 LDR X0, [X0 + 0x598]
	0x03B35718 BL 0x1C16CF4
	0x03B3571C MOVZ W8, 0x1
	0x03B35720 STRB W8, [X20 + 0x7FE]
	0x03B35724 LDRB W8, [X19 + 0x4C]
	0x03B35728 CBZ W8, 0x3B357A0
	0x03B3572C ADRP X8, 0x5BE000
	0x03B35730 LDR X8, [X8 + 0x598]
	0x03B35734 LDR X20, [X19 + 0x30]
	0x03B35738 LDR X0, [X8]
	0x03B3573C LDR W8, [X0 + 0xE0]
	0x03B35740 CBNZ W8, 0x3B35748
	0x03B35744 BL 0x1C16DFC
	0x03B35748 MOV X0, X20
	0x03B3574C MOV X1, X31
	0x03B35750 MOV X2, X31
	0x03B35754 BL 0x3C354F8
	0x03B35758 TBZ X0, 0x0, 0x3B357A0
	0x03B3575C LDR X20, [X19 + 0x30]
	0x03B35760 CBZ X20, 0x3B35850
	0x03B35764 MOV X0, X20
	0x03B35768 BL 0x3B3429C
	0x03B3576C LDR X20, [X20 + 0x80]
	0x03B35770 MOV X0, X31
	0x03B35774 BL 0x3C3C6C4
	0x03B35778 CBZ X20, 0x3B35850
	0x03B3577C LDR V1, [X19 + 0x48]
	0x03B35780 FSUB S0, S0, S1
	0x03B35784 FCVT S0, S0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8AE000
	006 Move X20, 0x5BF000
	007 Move W8, [X21+2037]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5BF000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2037], W8
	019 Move X0, [X20]
	020 Move X20, [X19+40]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {43}
	033 Move X0, [X19+40]
	034 Compare X0, 0
	035 JumpIfEqual {49}
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X1, X31
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Call Component.get_gameObject, X0
	042 Return X0
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Move X0, X31
	046 Move X30, [X31+32]
	047 Move X21, [X31+40]
	048 Return X0
	049 Call 0x1C17F20

Method: System.Void UpdateController()

Disassembly:
	0x03B35788 STR D0, [X20 + 0x10]
	0x03B3578C LDR X0, [X19 + 0x28]
	0x03B35790 CBZ X0, 0x3B35850
	0x03B35794 MOV X1, X20
	0x03B35798 BL 0x3B35854
	0x03B3579C B 0x3B357B4
	0x03B357A0 LDRB W8, [X19 + 0x4D]
	0x03B357A4 CBZ W8, 0x3B357B4
	0x03B357A8 LDR V0, [X19 + 0x40]
	0x03B357AC MOV X0, X19
	0x03B357B0 BL 0x3B35930
	0x03B357B4 LDRB W8, [X19 + 0x4C]
	0x03B357B8 CBNZ W8, 0x3B357C4
	0x03B357BC LDRB W8, [X19 + 0x4D]
	0x03B357C0 CBZ W8, 0x3B35828
	0x03B357C4 LDR V8, [X19 + 0x40]
	0x03B357C8 MOV X0, X31
	0x03B357CC BL 0x3C3C714
	0x03B357D0 LDRB W8, [X19 + 0x4D]
	0x03B357D4 FCVT S0, S0
	0x03B357D8 FADD D0, D8, D0
	0x03B357DC STR D0, [X19 + 0x40]
	0x03B357E0 CBZ W8, 0x3B35828
	0x03B357E4 LDR X0, [X19 + 0x28]
	0x03B357E8 CBZ X0, 0x3B35850
	0x03B357EC LDR V8, [X19 + 0x40]
	0x03B357F0 BL 0x3B355B0
	0x03B357F4 FCMP D8, D0
	0x03B357F8 B.LE 0x3B35828
	0x03B357FC LDRB W8, [X19 + 0x38]
	0x03B35800 CBZ W8, 0x3B35838
	0x03B35804 LDR X8, [X19 + 0x28]
	0x03B35808 CBZ X8, 0x3B35850
	0x03B3580C LDR X8, [X8 + 0x20]
	0x03B35810 CBZ X8, 0x3B35850
	0x03B35814 LDR W8, [X8 + 0x18]
	0x03B35818 LDR W9, [X19 + 0x58]
	0x03B3581C SUB W8, W8, 0x1
	0x03B35820 CMP W9, W8

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+153]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {12}
	007 Move X0, X19
	008 Call XRBaseController.SetupModel, X0
	009 Move X0, X19
	010 Call XRBaseController.SetupControllerState, X0
	011 Move [X19+153], W31
	012 Move W8, [X19+36]
	013 Compare W8, 0
	014 JumpIfEqual {23}
	015 Move W8, [X19+32]
	016 NotImplemented "Instruction CMP not yet implemented."
	017 Move X8, [X19]
	018 Move X1, [X19+128]
	019 Move X0, X19
	020 Move X9, [X8+504]
	021 Move X2, [X8+512]
	022 NotImplemented "Instruction BLR not yet implemented."
	023 Move W8, [X19+37]
	024 Compare W8, 0
	025 JumpIfEqual {37}
	026 Move X8, [X19]
	027 Move X1, [X19+128]
	028 Move X0, X19
	029 Move X9, [X8+520]
	030 Move X2, [X8+528]
	031 NotImplemented "Instruction BLR not yet implemented."
	032 Move X8, [X19]
	033 Move X0, X19
	034 Move X9, [X8+536]
	035 Move X1, [X8+544]
	036 NotImplemented "Instruction BLR not yet implemented."
	037 Move X8, [X19]
	038 Move X2, [X19+128]
	039 Move W1, 1
	040 Move X0, X19
	041 Move X4, [X8+488]
	042 Move X3, [X8+496]
	043 Move X30, [X31+16]
	044 Move X19, [X31+24]
	045 CallNoReturn X4

Method: System.Void OnBeforeRender()

Disassembly:
	0x03B35824 B.GE 0x3B35838
	0x03B35828 LDP X20, X19, [X31 + 0x10]
	0x03B3582C LDR X30, [X31 + 0x8]
	0x03B35830 LDR V8, [X31], #0x20
	0x03B35834 RET
	0x03B35838 MOV X0, X19
	0x03B3583C LDP X20, X19, [X31 + 0x10]
	0x03B35840 LDR X30, [X31 + 0x8]
	0x03B35844 MOV W1, W31
	0x03B35848 LDR V8, [X31], #0x20
	0x03B3584C B 0x3B35368
	0x03B35850 BL 0x1C16F20
	0x03B35854 STR X30, [X31 - 0x30]!
	0x03B35858 STP X22, X21, [X31 + 0x10]
	0x03B3585C STP X20, X19, [X31 + 0x20]
	0x03B35860 ADRP X22, 0x8AD000
	0x03B35864 ADRP X20, 0x625000
	0x03B35868 LDRB W8, [X22 + 0x804]
	0x03B3586C LDR X20, [X20 + 0x60]
	0x03B35870 MOV X21, X1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+36]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {16}
	007 Move W8, [X19+32]
	008 Or W8, W8, 2
	009 NotImplemented "Instruction CMP not yet implemented."
	010 Move X8, [X19]
	011 Move X1, [X19+128]
	012 Move X0, X19
	013 Move X9, [X8+504]
	014 Move X2, [X8+512]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X8, [X19]
	017 Move X2, [X19+128]
	018 Move W1, 3
	019 Move X0, X19
	020 Move X4, [X8+488]
	021 Move X3, [X8+496]
	022 Move X30, [X31+16]
	023 Move X19, [X31+24]
	024 CallNoReturn X4

Method: System.Void FixedUpdate()

Disassembly:
	0x03B35874 MOV X19, X0
	0x03B35878 TBNZ X8, 0x0, 0x3B3589C
	0x03B3587C ADRP X0, 0x625000
	0x03B35880 LDR X0, [X0 + 0xA0]
	0x03B35884 BL 0x1C16CF4
	0x03B35888 ADRP X0, 0x625000
	0x03B3588C LDR X0, [X0 + 0x60]
	0x03B35890 BL 0x1C16CF4
	0x03B35894 MOVZ W8, 0x1
	0x03B35898 STRB W8, [X22 + 0x804]
	0x03B3589C LDR X0, [X20]
	0x03B358A0 LDR X19, [X19 + 0x20]
	0x03B358A4 BL 0x1C16F10
	0x03B358A8 MOV X1, X21
	0x03B358AC MOV X20, X0
	0x03B358B0 BL 0x3B35F00
	0x03B358B4 CBZ X19, 0x3B3592C
	0x03B358B8 ADRP X9, 0x625000
	0x03B358BC LDR X9, [X9 + 0xA0]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+36]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {15}
	007 Move W8, [X19+32]
	008 NotImplemented "Instruction CMP not yet implemented."
	009 Move X8, [X19]
	010 Move X1, [X19+128]
	011 Move X0, X19
	012 Move X9, [X8+504]
	013 Move X2, [X8+512]
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move X8, [X19]
	016 Move X2, [X19+128]
	017 Move X0, X19
	018 Move W1, W31
	019 Move X4, [X8+488]
	020 Move X3, [X8+496]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X4

Method: System.Void ApplyControllerState(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)

Disassembly:
	0x03B358C0 LDR W10, [X19 + 0x1C]
	0x03B358C4 LDR X8, [X19 + 0x10]
	0x03B358C8 LDR X9, [X9]
	0x03B358CC ADD W10, W10, 0x1
	0x03B358D0 STR W10, [X19 + 0x1C]
	0x03B358D4 CBZ X8, 0x3B3592C
	0x03B358D8 LDRSW X10, [X19 + 0x18]
	0x03B358DC LDR W11, [X8 + 0x18]
	0x03B358E0 CMP W10, W11
	0x03B358E4 B.CS 0x3B35908
	0x03B358E8 ADD W9, W10, 0x1
	0x03B358EC ADD X8, X8, X10, 0x3, LSL
	0x03B358F0 STR W9, [X19 + 0x18]
	0x03B358F4 STR X20, [X8 + 0x20]
	0x03B358F8 LDP X20, X19, [X31 + 0x20]
	0x03B358FC LDP X22, X21, [X31 + 0x10]
	0x03B35900 LDR X30, [X31], #0x30
	0x03B35904 RET
	0x03B35908 LDR X8, [X9 + 0x20]
	0x03B3590C MOV X0, X19
	0x03B35910 MOV X1, X20
	0x03B35914 LDP X20, X19, [X31 + 0x20]
	0x03B35918 LDR X8, [X8 + 0xC0]
	0x03B3591C LDP X22, X21, [X31 + 0x10]
	0x03B35920 LDR X2, [X8 + 0x70]
	0x03B35924 LDR X30, [X31], #0x30
	0x03B35928 B 0x301BF90
	0x03B3592C BL 0x1C16F20
	0x03B35930 STR D8, [X31 - 0x30]!
	0x03B35934 STR X30, [X31 + 0x8]
	0x03B35938 STP X22, X21, [X31 + 0x10]
	0x03B3593C STP X20, X19, [X31 + 0x20]
	0x03B35940 ADRP X20, 0x8AD000
	0x03B35944 ADRP X21, 0x5BE000
	0x03B35948 LDRB W8, [X20 + 0x7FF]
	0x03B3594C LDR X21, [X21 + 0x598]
	0x03B35950 MOV V8.16B, V0.16B
	0x03B35954 MOV X19, X0
	0x03B35958 TBNZ X8, 0x0, 0x3B35988
	0x03B3595C ADRP X0, 0x625000
	0x03B35960 LDR X0, [X0 + 0x88]
	0x03B35964 BL 0x1C16CF4
	0x03B35968 ADRP X0, 0x625000
	0x03B3596C LDR X0, [X0 + 0x90]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X2, 0
	005 JumpIfEqual {40}
	006 Move X19, X2
	007 Move X20, X0
	008 Compare W1, 0
	009 JumpIfEqual {20}
	010 NotImplemented "Instruction CMP not yet implemented."
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction LDUR not yet implemented."
	013 Move [X20+92], X8
	014 NotImplemented "Instruction LDUR not yet implemented."
	015 Move [X20+100], X8
	016 NotImplemented "Instruction LDUR not yet implemented."
	017 Move [X20+108], X8
	018 NotImplemented "Instruction LDUR not yet implemented."
	019 Move [X20+116], X8
	020 Move W8, [X19+24]
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {36}
	025 Move X0, X20
	026 Move X1, X31
	027 Call Component.get_transform, X0
	028 Compare X0, 0
	029 JumpIfEqual {59}
	030 Move S1, [X19+36]
	031 Move S2, [X19+40]
	032 Move V0, [X19+32]
	033 Move X1, X31
	034 Call Transform.set_localPosition, X0, X1
	035 Move W8, [X19+24]
	036 Move TEMP, X8
	037 And TEMP, TEMP, 2
	038 Compare TEMP, 2
	039 JumpIfEqual {44}
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Return 
	044 Move X0, X20
	045 Move X1, X31
	046 Call Component.get_transform, X0
	047 Compare X0, 0
	048 JumpIfEqual {59}
	049 Move S2, [X19+52]
	050 Move S3, [X19+56]
	051 Move S0, [X19+44]
	052 Move S1, [X19+48]
	053 Move X20, [X31+16]
	054 Move X19, [X31+24]
	055 Move X1, X31
	056 Move X30, [X31+32]
	057 Call Transform.set_localRotation, X0, X1
	058 Return 
	059 Call 0x1C17F20

Method: System.Void UpdateTrackingInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)

Disassembly:
	0x03B34118 CBNZ W8, 0x3B34120

ISIL:
	001 Return 

Method: System.Void UpdateInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)

Disassembly:
	0x03B34554 TBZ X0, 0x0, 0x3B345D0

ISIL:
	001 Return 

Method: System.Void UpdateControllerModelAnimation()

Disassembly:
	0x03B35970 BL 0x1C16CF4
	0x03B35974 ADRP X0, 0x5BE000
	0x03B35978 LDR X0, [X0 + 0x598]
	0x03B3597C BL 0x1C16CF4
	0x03B35980 MOVZ W8, 0x1
	0x03B35984 STRB W8, [X20 + 0x7FF]
	0x03B35988 LDR X0, [X21]
	0x03B3598C LDR X20, [X19 + 0x28]
	0x03B35990 LDR W8, [X0 + 0xE0]
	0x03B35994 CBNZ W8, 0x3B3599C
	0x03B35998 BL 0x1C16DFC
	0x03B3599C MOV X0, X20
	0x03B359A0 MOV X1, X31
	0x03B359A4 BL 0x3C38948
	0x03B359A8 TBZ X0, 0x0, 0x3B35B38
	0x03B359AC LDR X0, [X21]
	0x03B359B0 LDR X20, [X19 + 0x28]
	0x03B359B4 LDR W8, [X0 + 0xE0]
	0x03B359B8 CBNZ W8, 0x3B359C0
	0x03B359BC BL 0x1C16DFC
	0x03B359C0 MOV X0, X20
	0x03B359C4 MOV X1, X31
	0x03B359C8 MOV X2, X31
	0x03B359CC BL 0x3C3883C
	0x03B359D0 TBNZ X0, 0x0, 0x3B35B38
	0x03B359D4 LDR X8, [X19 + 0x28]
	0x03B359D8 CBZ X8, 0x3B35B4C
	0x03B359DC LDR X0, [X8 + 0x20]
	0x03B359E0 CBZ X0, 0x3B35B4C
	0x03B359E4 LDR W8, [X0 + 0x18]
	0x03B359E8 CBZ W8, 0x3B35B38
	0x03B359EC LDR W1, [X19 + 0x58]
	0x03B359F0 CMP W1, W8
	0x03B359F4 B.GE 0x3B35B38
	0x03B359F8 ADRP X22, 0x625000
	0x03B359FC LDR X22, [X22 + 0x90]
	0x03B35A00 LDR X2, [X22]
	0x03B35A04 BL 0x301BCCC
	0x03B35A08 CBZ X0, 0x3B35B4C
	0x03B35A0C LDR V0, [X0 + 0x10]
	0x03B35A10 LDR W20, [X19 + 0x58]
	0x03B35A14 FCMP D0, D8
	0x03B35A18 B.PL 0x3B35AC0
	0x03B35A1C LDR X8, [X19 + 0x28]
	0x03B35A20 CBZ X8, 0x3B35B4C
	0x03B35A24 LDR X0, [X8 + 0x20]
	0x03B35A28 CBZ X0, 0x3B35B4C
	0x03B35A2C LDR W8, [X0 + 0x18]
	0x03B35A30 CMP W20, W8
	0x03B35A34 B.GE 0x3B35AC0
	0x03B35A38 LDR X2, [X22]
	0x03B35A3C MOV W1, W20
	0x03B35A40 BL 0x301BCCC
	0x03B35A44 CBZ X0, 0x3B35B4C
	0x03B35A48 LDR V0, [X0 + 0x10]
	0x03B35A4C LDR V1, [X19 + 0x50]
	0x03B35A50 FCMP D0, D1
	0x03B35A54 B.LT 0x3B35AC0
	0x03B35A58 LDR X8, [X19 + 0x28]
	0x03B35A5C CBZ X8, 0x3B35B4C
	0x03B35A60 LDR X0, [X8 + 0x20]
	0x03B35A64 CBZ X0, 0x3B35B4C
	0x03B35A68 LDR X2, [X22]
	0x03B35A6C MOV W1, W20
	0x03B35A70 BL 0x301BCCC
	0x03B35A74 CBZ X0, 0x3B35B4C
	0x03B35A78 LDR V0, [X0 + 0x10]
	0x03B35A7C FCMP D0, D8
	0x03B35A80 B.HI 0x3B35AC0
	0x03B35A84 LDRB W8, [X19 + 0x38]
	0x03B35A88 ADD W20, W20, 0x1
	0x03B35A8C CBZ W8, 0x3B35A1C
	0x03B35A90 LDR X8, [X19 + 0x28]
	0x03B35A94 CBZ X8, 0x3B35B4C
	0x03B35A98 LDR X0, [X8 + 0x20]
	0x03B35A9C CBZ X0, 0x3B35B4C
	0x03B35AA0 LDR W8, [X0 + 0x18]
	0x03B35AA4 CMP W20, W8
	0x03B35AA8 B.GE 0x3B35AC0
	0x03B35AAC LDR X2, [X22]
	0x03B35AB0 MOV W1, W20
	0x03B35AB4 BL 0x301BCCC
	0x03B35AB8 CBZ X0, 0x3B35B4C
	0x03B35ABC LDR V8, [X0 + 0x10]
	0x03B35AC0 LDR X8, [X19 + 0x28]
	0x03B35AC4 CBZ X8, 0x3B35B4C
	0x03B35AC8 LDR X8, [X8 + 0x20]
	0x03B35ACC CBZ X8, 0x3B35B4C
	0x03B35AD0 LDR W8, [X8 + 0x18]
	0x03B35AD4 CMP W20, W8
	0x03B35AD8 B.GE 0x3B35B38
	0x03B35ADC LDR X0, [X21]
	0x03B35AE0 LDR X21, [X19 + 0x30]
	0x03B35AE4 LDR W8, [X0 + 0xE0]
	0x03B35AE8 CBNZ W8, 0x3B35AF0
	0x03B35AEC BL 0x1C16DFC
	0x03B35AF0 MOV X0, X21
	0x03B35AF4 MOV X1, X31
	0x03B35AF8 MOV X2, X31
	0x03B35AFC BL 0x3C354F8
	0x03B35B00 TBZ X0, 0x0, 0x3B35B30
	0x03B35B04 LDR X8, [X19 + 0x28]
	0x03B35B08 CBZ X8, 0x3B35B4C
	0x03B35B0C LDR X0, [X8 + 0x20]
	0x03B35B10 CBZ X0, 0x3B35B4C
	0x03B35B14 LDR X2, [X22]
	0x03B35B18 MOV W1, W20
	0x03B35B1C BL 0x301BCCC
	0x03B35B20 LDR X8, [X19 + 0x30]
	0x03B35B24 CBZ X8, 0x3B35B4C
	0x03B35B28 STR X0, [X8 + 0x80]
	0x03B35B2C STRB W31, [X8 + 0x88]
	0x03B35B30 STR W20, [X19 + 0x58]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X20, 0x8AE000
	007 Move W8, [X20+2038]
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x626000
	014 Move X0, [X0+112]
	015 Call 0x1C17CF4
	016 Move X0, 0x5BF000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x5BF000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x626000
	023 Move X0, [X0+120]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X20+2038], W8
	027 Move W8, [X19+64]
	028 Compare W8, 0
	029 JumpIfEqual {141}
	030 Move X22, 0x5BF000
	031 Move X22, [X22+1432]
	032 Move X20, [X19+56]
	033 Move X0, [X22]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Inequality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfNotEqual {141}
	046 Move X20, X19
	047 Add X20, X20, 144
	048 Move X21, [X20]
	049 Move X0, [X22]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {89}
	062 Move X0, [X20]
	063 Compare X0, 0
	064 JumpIfEqual {147}
	065 Move X1, X31
	066 Call Component.get_gameObject, X0
	067 Move X8, [X19+56]
	068 Compare X8, 0
	069 JumpIfEqual {147}
	070 Move X21, X0
	071 Move X0, X8
	072 Move X1, X31
	073 Call Component.get_gameObject, X0
	074 Move X8, [X22]
	075 Move X22, X0
	076 Move W9, [X8+224]
	077 Compare W9, 0
	078 JumpIfNotEqual {81}
	079 Move X0, X8
	080 Call 0x1C17DFC
	081 Move X0, X21
	082 Move X1, X22
	083 Move X2, X31
	084 Call Object.op_Inequality, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {101}
	089 Move X0, [X19+56]
	090 Compare X0, 0
	091 JumpIfEqual {147}
	092 Move X8, 0x626000
	093 Move X8, [X8+112]
	094 Move X1, X20
	095 Move X2, [X8]
	096 Call 0x21A5990, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {108}
	101 Move W8, [X19+97]
	102 Compare W8, 0
	103 JumpIfEqual {126}
	104 Move X0, [X20]
	105 Compare X0, 0
	106 JumpIfEqual {147}
	107 Move X1, [X19+72]
	108 Move W8, [X19+152]
	109 Compare W8, 0
	110 JumpIfNotEqual {141}
	111 Move X8, 0x5BF000
	112 Move X8, [X8+2600]
	113 Move X0, [X8]
	114 Move W8, [X0+224]
	115 Compare W8, 0
	116 JumpIfNotEqual {118}
	117 Call 0x1C17DFC
	118 Move X8, 0x626000
	119 Move X8, [X8+120]
	120 Move X1, X19
	121 Move X2, X31
	122 Move X0, [X8]
	123 Call Debug.LogWarning, X0, X1
	124 Move W8, 1
	125 Move [X19+152], W8
	126 Move W8, [X19+98]
	127 Compare W8, 0
	128 JumpIfEqual {141}
	129 Move X0, [X20]
	130 Compare X0, 0
	131 JumpIfEqual {147}
	132 Move X1, [X19+80]
	133 Move X20, [X31+32]
	134 Move X19, [X31+40]
	135 Move X22, [X31+16]
	136 Move X21, [X31+24]
	137 Move X2, X31
	138 Move X30, [X31+48]
	139 Call Animator.SetTrigger, X0, X1
	140 Return 
	141 Move X20, [X31+32]
	142 Move X19, [X31+40]
	143 Move X22, [X31+16]
	144 Move X21, [X31+24]
	145 Move X30, [X31+48]
	146 Return 
	147 Call 0x1C17F20

Method: System.Boolean SendHapticImpulse(System.Single amplitude, System.Single duration)

Disassembly:
	0x03B35B34 STR D8, [X19 + 0x50]
	0x03B35B38 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W0, W31
	002 Return X0

Method: System.Boolean GetControllerState(out UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)

Disassembly:
	0x03B35B3C LDP X22, X21, [X31 + 0x10]
	0x03B35B40 LDR X30, [X31 + 0x8]
	0x03B35B44 LDR V8, [X31], #0x30
	0x03B35B48 RET
	0x03B35B4C BL 0x1C16F20
	0x03B35B50 STP X30, X19, [X31 - 0x10]!
	0x03B35B54 MOV W1, W31
	0x03B35B58 MOV X19, X0
	0x03B35B5C BL 0x3B352A8
	0x03B35B60 MOV X0, X19
	0x03B35B64 MOV W1, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X19, X1
	005 Move X20, X0
	006 Call XRBaseController.SetupControllerState, X0
	007 Move X8, [X20+128]
	008 Move W0, W31
	009 Move [X19], X8
	010 Move X20, [X31+16]
	011 Move X19, [X31+24]
	012 Move X30, [X31+32]
	013 Return X0

Method: System.Void SetControllerState(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)

Disassembly:
	0x03B35B68 LDP X30, X19, [X31], #0x10
	0x03B35B6C B 0x3B35368
	0x03B35B70 STP X30, X21, [X31 - 0x20]!

ISIL:
	001 Move [X0+128], X1
	002 Move [X0+136], W31
	003 Return 

Method: UnityEngine.Transform get_modelTransform()

Disassembly:
	0x03B35B74 STP X20, X19, [X31 + 0x10]
	0x03B35B78 ADRP X21, 0x8AD000

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_modelTransform(UnityEngine.Transform value)

Disassembly:
	0x03B35B7C LDRB W8, [X21 + 0x800]

ISIL:
	001 Call XRBaseController.set_modelParent, X0, X1
	002 Return 

Method: System.Single get_anchorControlDeadzone()

Disassembly:
	0x03B35B80 MOV X19, X1
	0x03B35B84 MOV X20, X0

ISIL:
	001 Move V0, [X0+156]
	002 Return V0

Method: System.Void set_anchorControlDeadzone(System.Single value)

Disassembly:
	0x03B35B88 TBNZ X8, 0x0, 0x3B35BC4
	0x03B35B8C ADRP X0, 0x625000

ISIL:
	001 Move [X0+156], S0
	002 Return 

Method: System.Single get_anchorControlOffAxisDeadzone()

Disassembly:
	0x03B35B90 LDR X0, [X0 + 0x88]
	0x03B35B94 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+160]
	002 Return V0

Method: System.Void set_anchorControlOffAxisDeadzone(System.Single value)

Disassembly:
	0x03B35B98 ADRP X0, 0x625000
	0x03B35B9C LDR X0, [X0 + 0x90]

ISIL:
	001 Move [X0+160], S0
	002 Return 

Method: System.Void .ctor()

Disassembly:
	0x03B35060 LDRB W8, [X21 + 0x7F8]
	0x03B35064 LDR X22, [X22 + 0x8C8]
	0x03B35068 MOV W19, W1
	0x03B3506C MOV X20, X0
	0x03B35070 TBNZ X8, 0x0, 0x3B35088
	0x03B35074 ADRP X0, 0x5C4000
	0x03B35078 LDR X0, [X0 + 0x8C8]

ISIL:
	001 Move W8, 257
	002 Move W9, 1
	003 Move X1, X31
	004 NotImplemented "Instruction STRH not yet implemented."
	005 Move [X0+136], W9
	006 Move [X0+153], W9
	007 Call MonoBehaviour..ctor, X0
	008 Return 

