Type: UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable

Method: UnityEngine.Transform get_attachTransform()

Disassembly:
	0x03B3F3E8 LDRB W8, [X19 + 0x278]
	0x03B3F3EC CBZ W8, 0x3B3F53C

ISIL:
	001 Move X0, [X0+464]
	002 Return X0

Method: System.Void set_attachTransform(UnityEngine.Transform value)

Disassembly:
	0x03B3F3F0 LDR W8, [X19 + 0x288]
	0x03B3F3F4 CMP W8, 0x1

ISIL:
	001 Move [X0+464], X1
	002 Return 

Method: UnityEngine.Transform get_secondaryAttachTransform()

Disassembly:
	0x03B3F3F8 B.LT 0x3B3F53C
	0x03B3F3FC MOV X0, X31

ISIL:
	001 Move X0, [X0+472]
	002 Return X0

Method: System.Void set_secondaryAttachTransform(UnityEngine.Transform value)

Disassembly:
	0x03B3F400 BL 0x3C3C714
	0x03B3F404 MOV X0, X19

ISIL:
	001 Move [X0+472], X1
	002 Return 

Method: System.Boolean get_useDynamicAttach()

Disassembly:
	0x03B3F408 MOV W1, W20
	0x03B3F40C BL 0x3B3FD6C

ISIL:
	001 Move W0, [X0+480]
	002 Return X0

Method: System.Void set_useDynamicAttach(System.Boolean value)

Disassembly:
	0x03B3F410 LDR W8, [X19 + 0x2BC]
	0x03B3F414 CMP W8, 0x2
	0x03B3F418 B.NE 0x3B3F53C

ISIL:
	001 And W8, W1, 1
	002 Move [X0+480], W8
	003 Return 

Method: System.Boolean get_matchAttachPosition()

Disassembly:
	0x03B3F41C MOV X0, X19
	0x03B3F420 MOV W1, W20

ISIL:
	001 Move W0, [X0+481]
	002 Return X0

Method: System.Void set_matchAttachPosition(System.Boolean value)

Disassembly:
	0x03B3F424 LDP X20, X19, [X31 + 0x10]
	0x03B3F428 LDP X30, X21, [X31], #0x20
	0x03B3F42C B 0x3B3FCB4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+481], W8
	003 Return 

Method: System.Boolean get_matchAttachRotation()

Disassembly:
	0x03B3F430 LDRB W8, [X19 + 0x2C0]
	0x03B3F434 CBZ W8, 0x3B3F45C

ISIL:
	001 Move W0, [X0+482]
	002 Return X0

Method: System.Void set_matchAttachRotation(System.Boolean value)

Disassembly:
	0x03B3F438 MOV X0, X19
	0x03B3F43C BL 0x3B3A824
	0x03B3F440 TBNZ X0, 0x0, 0x3B3F458

ISIL:
	001 And W8, W1, 1
	002 Move [X0+482], W8
	003 Return 

Method: System.Boolean get_snapToColliderVolume()

Disassembly:
	0x03B3F444 LDR X8, [X19]
	0x03B3F448 MOV X0, X19

ISIL:
	001 Move W0, [X0+483]
	002 Return X0

Method: System.Void set_snapToColliderVolume(System.Boolean value)

Disassembly:
	0x03B3F44C LDR X9, [X8 + 0x8D8]
	0x03B3F450 LDR X1, [X8 + 0x8E0]
	0x03B3F454 BLR X9

ISIL:
	001 And W8, W1, 1
	002 Move [X0+483], W8
	003 Return 

Method: System.Boolean get_reinitializeDynamicAttachEverySingleGrab()

Disassembly:
	0x03B3F458 STRB W31, [X19 + 0x2C0]
	0x03B3F45C LDRB W8, [X19 + 0x335]

ISIL:
	001 Move W0, [X0+484]
	002 Return X0

Method: System.Void set_reinitializeDynamicAttachEverySingleGrab(System.Boolean value)

Disassembly:
	0x03B3F460 CBZ W8, 0x3B3F53C
	0x03B3F464 LDRB W8, [X19 + 0x334]
	0x03B3F468 CBZ W8, 0x3B3F4AC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+484], W8
	003 Return 

Method: System.Single get_attachEaseInTime()

Disassembly:
	0x03B3F46C ADRP X8, 0x5B4000
	0x03B3F470 LDR X8, [X8 + 0x598]

ISIL:
	001 Move V0, [X0+488]
	002 Return V0

Method: System.Void set_attachEaseInTime(System.Single value)

Disassembly:
	0x03B3F474 LDR X20, [X19 + 0x338]
	0x03B3F478 LDR X0, [X8]

ISIL:
	001 Move [X0+488], S0
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType get_movementType()

Disassembly:
	0x03B3F47C LDR W8, [X0 + 0xE0]
	0x03B3F480 CBNZ W8, 0x3B3F488

ISIL:
	001 Move W0, [X0+492]
	002 Return X0

Method: System.Void set_movementType(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/MovementType value)

Disassembly:
	0x03B3F484 BL 0x1C16DFC
	0x03B3F488 MOV X0, X20
	0x03B3F48C MOV X1, X31
	0x03B3F490 MOV X2, X31
	0x03B3F494 BL 0x3C354F8
	0x03B3F498 TBZ X0, 0x0, 0x3B3F4AC
	0x03B3F49C LDR X1, [X19 + 0x338]
	0x03B3F4A0 MOV X0, X19
	0x03B3F4A4 BL 0x3B3FF98
	0x03B3F4A8 STR X31, [X19 + 0x338]
	0x03B3F4AC STRB W31, [X19 + 0x335]
	0x03B3F4B0 B 0x3B3F53C
	0x03B3F4B4 MOV X0, X31
	0x03B3F4B8 BL 0x3C3C714
	0x03B3F4BC MOV X0, X19
	0x03B3F4C0 MOV W1, W31
	0x03B3F4C4 BL 0x3B3F730
	0x03B3F4C8 B 0x3B3F4D4
	0x03B3F4CC MOV X0, X19
	0x03B3F4D0 BL 0x3B3F620
	0x03B3F4D4 LDRB W8, [X19 + 0x334]
	0x03B3F4D8 CBZ W8, 0x3B3F53C

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move [X0+492], W1
	005 Call XRBaseInteractable.get_isSelected, X0
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {26}
	010 Move X8, [X19]
	011 Move X1, [X19+800]
	012 Move X0, X19
	013 Move X9, [X8+2296]
	014 Move X2, [X8+2304]
	015 NotImplemented "Instruction BLR not yet implemented."
	016 Move X0, X19
	017 Call XRGrabInteractable.UpdateCurrentMovementType, X0
	018 Move X8, [X19]
	019 Move X1, [X19+800]
	020 Move X0, X19
	021 Move X3, [X8+2280]
	022 Move X2, [X8+2288]
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 CallNoReturn X3
	026 Move X30, [X31+16]
	027 Move X19, [X31+24]
	028 Return 

Method: System.Single get_velocityDamping()

Disassembly:
	0x03B3F7C8 FMUL S1, S1, S3
	0x03B3F7CC FMUL S2, S2, S3

ISIL:
	001 Move V0, [X0+496]
	002 Return V0

Method: System.Void set_velocityDamping(System.Single value)

Disassembly:
	0x03B3F7D0 BL 0x3C8E908
	0x03B3F7D4 LDR W8, [X19 + 0x244]

ISIL:
	001 Move [X0+496], S0
	002 Return 

Method: System.Single get_velocityScale()

Disassembly:
	0x03B3F7D8 LDR V9, [X19 + 0x28C]
	0x03B3F7DC LDR V10, [X19 + 0x290]

ISIL:
	001 Move V0, [X0+500]
	002 Return V0

Method: System.Void set_velocityScale(System.Single value)

Disassembly:
	0x03B3F7E0 LDR V11, [X19 + 0x294]
	0x03B3F7E4 CBZ W8, 0x3B3F7FC

ISIL:
	001 Move [X0+500], S0
	002 Return 

Method: System.Single get_angularVelocityDamping()

Disassembly:
	0x03B3F7E8 LDR X0, [X19 + 0x320]
	0x03B3F7EC CBZ X0, 0x3B3FA38

ISIL:
	001 Move V0, [X0+504]
	002 Return V0

Method: System.Void set_angularVelocityDamping(System.Single value)

Disassembly:
	0x03B3F7F0 MOV X1, X31
	0x03B3F7F4 BL 0x3C8EDF0

ISIL:
	001 Move [X0+504], S0
	002 Return 

Method: System.Single get_angularVelocityScale()

Disassembly:
	0x03B3F7F8 B 0x3B3F814
	0x03B3F7FC MOV X0, X19

ISIL:
	001 Move V0, [X0+508]
	002 Return V0

Method: System.Void set_angularVelocityScale(System.Single value)

Disassembly:
	0x03B3F800 MOV X1, X31
	0x03B3F804 BL 0x3C32E90

ISIL:
	001 Move [X0+508], S0
	002 Return 

Method: System.Boolean get_trackPosition()

Disassembly:
	0x03B3F808 CBZ X0, 0x3B3FA38
	0x03B3F80C MOV X1, X31

ISIL:
	001 Move W0, [X0+512]
	002 Return X0

Method: System.Void set_trackPosition(System.Boolean value)

Disassembly:
	0x03B3F810 BL 0x3C3F58C
	0x03B3F814 LDR X20, [X19 + 0x320]
	0x03B3F818 CBZ X20, 0x3B3FA38

ISIL:
	001 And W8, W1, 1
	002 Move [X0+512], W8
	003 Return 

Method: System.Boolean get_smoothPosition()

Disassembly:
	0x03B3F81C FSUB S2, S11, S2
	0x03B3F820 FSUB S1, S10, S1

ISIL:
	001 Move W0, [X0+513]
	002 Return X0

Method: System.Void set_smoothPosition(System.Boolean value)

Disassembly:
	0x03B3F824 FSUB S0, S9, S0
	0x03B3F828 MOV X0, X20
	0x03B3F82C MOV X1, X31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+513], W8
	003 Return 

Method: System.Single get_smoothPositionAmount()

Disassembly:
	0x03B3F830 FDIV S9, S2, S8
	0x03B3F834 FDIV S10, S1, S8

ISIL:
	001 Move V0, [X0+516]
	002 Return V0

Method: System.Void set_smoothPositionAmount(System.Single value)

Disassembly:
	0x03B3F838 FDIV S11, S0, S8
	0x03B3F83C BL 0x3C8E868

ISIL:
	001 Move [X0+516], S0
	002 Return 

Method: System.Single get_tightenPosition()

Disassembly:
	0x03B3F840 LDR V3, [X19 + 0x1F4]
	0x03B3F844 MOV X0, X20

ISIL:
	001 Move V0, [X0+520]
	002 Return V0

Method: System.Void set_tightenPosition(System.Single value)

Disassembly:
	0x03B3F848 MOV X1, X31
	0x03B3F84C FMUL S4, S11, S3

ISIL:
	001 Move [X0+520], S0
	002 Return 

Method: System.Boolean get_trackRotation()

Disassembly:
	0x03B3F850 FMUL S5, S10, S3
	0x03B3F854 FMUL S3, S9, S3

ISIL:
	001 Move W0, [X0+524]
	002 Return X0

Method: System.Void set_trackRotation(System.Boolean value)

Disassembly:
	0x03B3F858 FADD S0, S0, S4
	0x03B3F85C FADD S1, S1, S5
	0x03B3F860 FADD S2, S2, S3

ISIL:
	001 And W8, W1, 1
	002 Move [X0+524], W8
	003 Return 

Method: System.Boolean get_smoothRotation()

Disassembly:
	0x03B3F864 BL 0x3C8E908
	0x03B3F868 LDRB W8, [X19 + 0x20C]

ISIL:
	001 Move W0, [X0+525]
	002 Return X0

Method: System.Void set_smoothRotation(System.Boolean value)

Disassembly:
	0x03B3F86C CBZ W8, 0x3B3FA10
	0x03B3F870 LDR X20, [X19 + 0x320]
	0x03B3F874 CBZ X20, 0x3B3FA38

ISIL:
	001 And W8, W1, 1
	002 Move [X0+525], W8
	003 Return 

Method: System.Single get_smoothRotationAmount()

Disassembly:
	0x03B3F878 MOV X0, X20
	0x03B3F87C MOV X1, X31

ISIL:
	001 Move V0, [X0+528]
	002 Return V0

Method: System.Void set_smoothRotationAmount(System.Single value)

Disassembly:
	0x03B3F880 BL 0x3C8E9A0
	0x03B3F884 LDR V3, [X19 + 0x1F8]

ISIL:
	001 Move [X0+528], S0
	002 Return 

Method: System.Single get_tightenRotation()

Disassembly:
	0x03B3F888 FMOV S4, 1
	0x03B3F88C MOV X0, X20

ISIL:
	001 Move V0, [X0+532]
	002 Return V0

Method: System.Void set_tightenRotation(System.Single value)

Disassembly:
	0x03B3F890 MOV X1, X31
	0x03B3F894 FSUB S3, S4, S3

ISIL:
	001 Move [X0+532], S0
	002 Return 

Method: System.Boolean get_trackScale()

Disassembly:
	0x03B3F898 FMUL S0, S0, S3
	0x03B3F89C FMUL S1, S1, S3

ISIL:
	001 Move W0, [X0+536]
	002 Return X0

Method: System.Void set_trackScale(System.Boolean value)

Disassembly:
	0x03B3F8A0 FMUL S2, S2, S3
	0x03B3F8A4 BL 0x3C8EA40
	0x03B3F8A8 LDR V11, [X19 + 0x298]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+536], W8
	003 Return 

Method: System.Boolean get_smoothScale()

Disassembly:
	0x03B3F8AC LDR V10, [X19 + 0x29C]
	0x03B3F8B0 LDR V9, [X19 + 0x2A0]

ISIL:
	001 Move W0, [X0+537]
	002 Return X0

Method: System.Void set_smoothScale(System.Boolean value)

Disassembly:
	0x03B3F8B4 LDR V12, [X19 + 0x2A4]
	0x03B3F8B8 MOV X0, X19
	0x03B3F8BC MOV X1, X31

ISIL:
	001 And W8, W1, 1
	002 Move [X0+537], W8
	003 Return 

Method: System.Single get_smoothScaleAmount()

Disassembly:
	0x03B3F8C0 BL 0x3C32E90
	0x03B3F8C4 CBZ X0, 0x3B3FA38

ISIL:
	001 Move V0, [X0+540]
	002 Return V0

Method: System.Void set_smoothScaleAmount(System.Single value)

Disassembly:
	0x03B3F8C8 MOV X1, X31
	0x03B3F8CC BL 0x3C3DEB4

ISIL:
	001 Move [X0+540], S0
	002 Return 

Method: System.Single get_tightenScale()

Disassembly:
	0x03B3F8D0 MOV X0, X31
	0x03B3F8D4 BL 0x3C2A260

ISIL:
	001 Move V0, [X0+544]
	002 Return V0

Method: System.Void set_tightenScale(System.Single value)

Disassembly:
	0x03B3F8D8 FMUL S4, S12, S0
	0x03B3F8DC FMUL S5, S11, S3

ISIL:
	001 Move [X0+544], S0
	002 Return 

Method: System.Boolean get_throwOnDetach()

Disassembly:
	0x03B3F8E0 FMUL S7, S9, S1
	0x03B3F8E4 FMUL S16, S12, S1

ISIL:
	001 Move W0, [X0+548]
	002 Return X0

Method: System.Void set_throwOnDetach(System.Boolean value)

Disassembly:
	0x03B3F8E8 FMUL S17, S10, S3
	0x03B3F8EC FMUL S18, S9, S0
	0x03B3F8F0 FMUL S20, S11, S1

ISIL:
	001 And W8, W1, 1
	002 Move [X0+548], W8
	003 Return 

Method: System.Single get_throwSmoothingDuration()

Disassembly:
	0x03B3F8F4 FMUL S21, S11, S0
	0x03B3F8F8 FMUL S22, S10, S0

ISIL:
	001 Move V0, [X0+552]
	002 Return V0

Method: System.Void set_throwSmoothingDuration(System.Single value)

Disassembly:
	0x03B3F8FC FMUL S0, S10, S1
	0x03B3F900 FMUL S1, S12, S2

ISIL:
	001 Move [X0+552], S0
	002 Return 

Method: UnityEngine.AnimationCurve get_throwSmoothingCurve()

Disassembly:
	0x03B3F904 FMUL S23, S12, S3
	0x03B3F908 FMUL S3, S9, S3

ISIL:
	001 Move X0, [X0+560]
	002 Return X0

Method: System.Void set_throwSmoothingCurve(UnityEngine.AnimationCurve value)

Disassembly:
	0x03B3F90C FMUL S6, S10, S2
	0x03B3F910 FMUL S19, S11, S2

ISIL:
	001 Move [X0+560], X1
	002 Return 

Method: System.Single get_throwVelocityScale()

Disassembly:
	0x03B3F914 FMUL S24, S9, S2
	0x03B3F918 FADD S2, S4, S5

ISIL:
	001 Move V0, [X0+568]
	002 Return V0

Method: System.Void set_throwVelocityScale(System.Single value)

Disassembly:
	0x03B3F91C FADD S4, S16, S17
	0x03B3F920 FADD S1, S1, S3

ISIL:
	001 Move [X0+568], S0
	002 Return 

Method: System.Single get_throwAngularVelocityScale()

Disassembly:
	0x03B3F924 FSUB S3, S23, S21
	0x03B3F928 FADD S2, S6, S2

ISIL:
	001 Move V0, [X0+572]
	002 Return V0

Method: System.Void set_throwAngularVelocityScale(System.Single value)

Disassembly:
	0x03B3F92C FADD S4, S18, S4
	0x03B3F930 FADD S5, S20, S1

ISIL:
	001 Move [X0+572], S0
	002 Return 

Method: System.Boolean get_forceGravityOnDetach()

Disassembly:
	0x03B3F934 FSUB S3, S3, S0
	0x03B3F938 FSUB S0, S2, S7

ISIL:
	001 Move W0, [X0+576]
	002 Return X0

Method: System.Void set_forceGravityOnDetach(System.Boolean value)

Disassembly:
	0x03B3F93C FSUB S1, S4, S19
	0x03B3F940 FSUB S2, S5, S22
	0x03B3F944 FSUB S3, S3, S24

ISIL:
	001 And W8, W1, 1
	002 Move [X0+576], W8
	003 Return 

Method: System.Boolean get_retainTransformParent()

Disassembly:
	0x03B3F948 ADD X0, X31, 0x0
	0x03B3F94C ADD X1, X31, 0x1C

ISIL:
	001 Move W0, [X0+577]
	002 Return X0

Method: System.Void set_retainTransformParent(System.Boolean value)

Disassembly:
	0x03B3F950 MOV X2, X31
	0x03B3F954 BL 0x3C2A6A8
	0x03B3F958 ADRP X8, 0xFFFFFFFFFCFAB000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+577], W8
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode get_attachPointCompatibilityMode()

Disassembly:
	0x03B3F95C LDR V0, [X31 + 0x1C]
	0x03B3F960 LDR V1, [X8 + 0x448]

ISIL:
	001 Move W0, [X0+580]
	002 Return X0

Method: System.Void set_attachPointCompatibilityMode(UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable/AttachPointCompatibilityMode value)

Disassembly:
	0x03B3F964 MOVZ W8, 0xC3B40000
	0x03B3F968 FMOV S2, W8

ISIL:
	001 Move [X0+580], W1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> get_startingSingleGrabTransformers()

Disassembly:
	0x03B3F96C MOVZ W8, 0x43340000
	0x03B3F970 FMUL S0, S0, S1

ISIL:
	001 Move X0, [X0+584]
	002 Return X0

Method: System.Void set_startingSingleGrabTransformers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> value)

Disassembly:
	0x03B3F974 FMOV S1, W8
	0x03B3F978 ADRP X8, 0x5BB000

ISIL:
	001 Move [X0+584], X1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> get_startingMultipleGrabTransformers()

Disassembly:
	0x03B3F97C LDR X8, [X8 + 0x4B8]
	0x03B3F980 FADD S2, S0, S2

ISIL:
	001 Move X0, [X0+592]
	002 Return X0

Method: System.Void set_startingMultipleGrabTransformers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.XRBaseGrabTransformer> value)

Disassembly:
	0x03B3F984 FCMP S0, S1
	0x03B3F988 FCSEL S0, S2, S0, GT

ISIL:
	001 Move [X0+592], X1
	002 Return 

Method: System.Boolean get_addDefaultGrabTransformers()

Disassembly:
	0x03B3F98C LDR X8, [X8]
	0x03B3F990 STR S0, [X31 + 0x1C]

ISIL:
	001 Move W0, [X0+600]
	002 Return X0

Method: System.Void set_addDefaultGrabTransformers(System.Boolean value)

Disassembly:
	0x03B3F994 FABS S2, S0
	0x03B3F998 LDR X8, [X8 + 0xB8]
	0x03B3F99C LDR V1, [X8]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+600], W8
	003 Return 

Method: System.Int32 get_singleGrabTransformersCount()

Disassembly:
	0x03B3F9A0 FCMP S2, S1
	0x03B3F9A4 B.LE 0x3B3FA10
	0x03B3F9A8 LDR X20, [X19 + 0x320]
	0x03B3F9AC CBZ X20, 0x3B3FA38
	0x03B3F9B0 ADRP X8, 0xFFFFFFFFFCFAB000
	0x03B3F9B4 LDR V1, [X8 + 0x104]
	0x03B3F9B8 LDP S3, S2, [X31 + 0x4]
	0x03B3F9BC LDR V4, [X31]
	0x03B3F9C0 MOV X0, X20
	0x03B3F9C4 FMUL S0, S0, S1
	0x03B3F9C8 FMUL S1, S0, S2
	0x03B3F9CC FMUL S2, S0, S3
	0x03B3F9D0 FMUL S0, S0, S4
	0x03B3F9D4 MOV X1, X31
	0x03B3F9D8 FDIV S9, S1, S8
	0x03B3F9DC FDIV S10, S2, S8
	0x03B3F9E0 FDIV S8, S0, S8
	0x03B3F9E4 BL 0x3C8E9A0
	0x03B3F9E8 LDR V3, [X19 + 0x1FC]
	0x03B3F9EC MOV X0, X20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8A4000
	005 Move W8, [X20+2138]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x61C000
	012 Move X0, [X0+1528]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2138], W8
	016 Move X0, [X19+608]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x61C000
	020 Move X8, [X8+1528]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call 0x28BA738, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Int32 get_multipleGrabTransformersCount()

Disassembly:
	0x03B3F9F0 MOV X1, X31
	0x03B3F9F4 FMUL S4, S8, S3
	0x03B3F9F8 FMUL S5, S10, S3
	0x03B3F9FC FMUL S3, S9, S3
	0x03B3FA00 FADD S0, S0, S4
	0x03B3FA04 FADD S1, S1, S5
	0x03B3FA08 FADD S2, S2, S3
	0x03B3FA0C BL 0x3C8EA40
	0x03B3FA10 MOV X0, X19
	0x03B3FA14 BL 0x3B3F620
	0x03B3FA18 STRH W31, [X19 + 0x2B4]
	0x03B3FA1C LDP X20, X19, [X31 + 0x50]
	0x03B3FA20 LDP X30, X21, [X31 + 0x40]
	0x03B3FA24 LDP D9, D8, [X31 + 0x30]
	0x03B3FA28 LDP D11, D10, [X31 + 0x20]
	0x03B3FA2C LDR V12, [X31 + 0x10]
	0x03B3FA30 ADD X31, X31, 0x60
	0x03B3FA34 RET
	0x03B3FA38 BL 0x1C16F20
	0x03B3FA3C SUB X31, X31, 0xB0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8A4000
	005 Move W8, [X20+2139]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x61C000
	012 Move X0, [X0+1528]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2139], W8
	016 Move X0, [X19+616]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x61C000
	020 Move X8, [X8+1528]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call 0x28BA738, X0
	026 Return X0
	027 Call 0x1C17F20

Method: System.Boolean get_isTransformDirty()

Disassembly:
	0x03B3FA40 STP D15, D14, [X31 + 0x40]
	0x03B3FA44 STP D13, D12, [X31 + 0x50]
	0x03B3FA48 STP D11, D10, [X31 + 0x60]
	0x03B3FA4C STP D9, D8, [X31 + 0x70]
	0x03B3FA50 STR X30, [X31 + 0x80]
	0x03B3FA54 STP X22, X21, [X31 + 0x90]
	0x03B3FA58 STP X20, X19, [X31 + 0xA0]
	0x03B3FA5C ADRP X21, 0x8A3000

ISIL:
	001 Move W8, [X0+692]
	002 Compare W8, 0
	003 JumpIfEqual {6}
	004 Move W0, 1
	005 Return X0
	006 Move W8, [X0+693]
	007 NotImplemented "Instruction CMP not yet implemented."
	008 NotImplemented "Instruction CSET not yet implemented."
	009 Return X0

Method: System.Void set_isTransformDirty(System.Boolean value)

Disassembly:
	0x03B3FA60 LDRB W8, [X21 + 0x881]
	0x03B3FA64 MOV X20, X1
	0x03B3FA68 MOV X19, X0
	0x03B3FA6C TBNZ X8, 0x0, 0x3B3FAB4

ISIL:
	001 And W8, W1, 1
	002 Move [X0+692], W8
	003 Move [X0+693], W8
	004 Return 

Method: System.Void Awake()

Disassembly:
	0x03B3FA70 ADRP X0, 0x61B000
	0x03B3FA74 LDR X0, [X0 + 0x660]
	0x03B3FA78 BL 0x1C16CF4
	0x03B3FA7C ADRP X0, 0x61B000
	0x03B3FA80 LDR X0, [X0 + 0x668]
	0x03B3FA84 BL 0x1C16CF4
	0x03B3FA88 ADRP X0, 0x61B000
	0x03B3FA8C LDR X0, [X0 + 0x670]
	0x03B3FA90 BL 0x1C16CF4
	0x03B3FA94 ADRP X0, 0x61B000
	0x03B3FA98 LDR X0, [X0 + 0x678]
	0x03B3FA9C BL 0x1C16CF4
	0x03B3FAA0 ADRP X0, 0x5B4000
	0x03B3FAA4 LDR X0, [X0 + 0x598]
	0x03B3FAA8 BL 0x1C16CF4
	0x03B3FAAC MOVZ W8, 0x1
	0x03B3FAB0 STRB W8, [X21 + 0x881]
	0x03B3FAB4 STP X31, X31, [X31 + 0x20]
	0x03B3FAB8 STR X31, [X31 + 0x30]
	0x03B3FABC CBZ X20, 0x3B3FC30
	0x03B3FAC0 ADD X8, X31, 0x8
	0x03B3FAC4 MOV X0, X20
	0x03B3FAC8 MOV X1, X31
	0x03B3FACC BL 0x3C8F8C8
	0x03B3FAD0 LDR X0, [X19 + 0x350]
	0x03B3FAD4 CBZ X0, 0x3B3FC30
	0x03B3FAD8 ADRP X8, 0x61B000
	0x03B3FADC LDR X8, [X8 + 0x678]
	0x03B3FAE0 ADRP X21, 0x61B000
	0x03B3FAE4 ADRP X22, 0x5B4000
	0x03B3FAE8 ADRP X20, 0x61B000
	0x03B3FAEC LDR X1, [X8]
	0x03B3FAF0 LDP S10, S11, [X31 + 0x8]
	0x03B3FAF4 LDP S13, S12, [X31 + 0x10]
	0x03B3FAF8 LDP S14, S15, [X31 + 0x18]
	0x03B3FAFC LDR X21, [X21 + 0x668]
	0x03B3FB00 LDR X22, [X22 + 0x598]
	0x03B3FB04 LDR X20, [X20 + 0x660]
	0x03B3FB08 ADD X8, X31, 0x8
	0x03B3FB0C BL 0x2DBE924
	0x03B3FB10 LDUR V0, [X31 + 0x8]
	0x03B3FB14 LDR X8, [X31 + 0x18]
	0x03B3FB18 FADD S8, S10, S12
	0x03B3FB1C FADD S9, S11, S14
	0x03B3FB20 FSUB S10, S10, S12
	0x03B3FB24 FSUB S11, S11, S14
	0x03B3FB28 FSUB S12, S13, S15
	0x03B3FB2C FADD S13, S13, S15
	0x03B3FB30 STR V0, [X31 + 0x2]
	0x03B3FB34 STR X8, [X31 + 0x30]
	0x03B3FB38 LDR X1, [X21]
	0x03B3FB3C ADD X0, X31, 0x20
	0x03B3FB40 BL 0x2BC3C64
	0x03B3FB44 TBZ X0, 0x0, 0x3B3FBEC
	0x03B3FB48 LDR X0, [X22]
	0x03B3FB4C LDR X19, [X31 + 0x30]
	0x03B3FB50 LDR W8, [X0 + 0xE0]
	0x03B3FB54 CBNZ W8, 0x3B3FB5C
	0x03B3FB58 BL 0x1C16DFC
	0x03B3FB5C MOV X0, X19
	0x03B3FB60 MOV X1, X31
	0x03B3FB64 MOV X2, X31
	0x03B3FB68 BL 0x3C3883C
	0x03B3FB6C TBNZ X0, 0x0, 0x3B3FB38
	0x03B3FB70 CBZ X19, 0x3B3FC28
	0x03B3FB74 ADD X8, X31, 0x8
	0x03B3FB78 MOV X0, X19
	0x03B3FB7C MOV X1, X31
	0x03B3FB80 BL 0x3C8F8C8
	0x03B3FB84 LDR V0, [X31 + 0x8]
	0x03B3FB88 LDR V1, [X31 + 0x14]
	0x03B3FB8C FSUB S2, S0, S1
	0x03B3FB90 FCMP S2, S8
	0x03B3FB94 B.HI 0x3B3FB38
	0x03B3FB98 LDR V2, [X31 + 0xC]
	0x03B3FB9C LDR V3, [X31 + 0x18]
	0x03B3FBA0 FADD S4, S2, S3
	0x03B3FBA4 FCMP S4, S11
	0x03B3FBA8 B.LT 0x3B3FB38
	0x03B3FBAC FADD S0, S0, S1
	0x03B3FBB0 FCMP S0, S10
	0x03B3FBB4 B.LT 0x3B3FB38
	0x03B3FBB8 FSUB S0, S2, S3
	0x03B3FBBC FCMP S0, S9
	0x03B3FBC0 B.HI 0x3B3FB38
	0x03B3FBC4 LDR V0, [X31 + 0x10]
	0x03B3FBC8 LDR V1, [X31 + 0x1C]
	0x03B3FBCC FSUB S2, S0, S1
	0x03B3FBD0 FCMP S2, S13
	0x03B3FBD4 B.HI 0x3B3FB38
	0x03B3FBD8 FADD S0, S0, S1
	0x03B3FBDC FCMP S0, S12
	0x03B3FBE0 B.LT 0x3B3FB38
	0x03B3FBE4 MOVZ W19, 0x4
	0x03B3FBE8 B 0x3B3FBF0
	0x03B3FBEC MOVZ W19, 0x5
	0x03B3FBF0 LDR X1, [X20]
	0x03B3FBF4 ADD X0, X31, 0x20
	0x03B3FBF8 BL 0x2BC3C60
	0x03B3FBFC CMP W19, 0x4
	0x03B3FC00 LDP X20, X19, [X31 + 0xA0]
	0x03B3FC04 LDP X22, X21, [X31 + 0x90]
	0x03B3FC08 LDR X30, [X31 + 0x80]
	0x03B3FC0C LDP D9, D8, [X31 + 0x70]
	0x03B3FC10 LDP D11, D10, [X31 + 0x60]
	0x03B3FC14 LDP D13, D12, [X31 + 0x50]
	0x03B3FC18 LDP D15, D14, [X31 + 0x40]
	0x03B3FC1C CSET W0, NE
	0x03B3FC20 ADD X31, X31, 0xB0
	0x03B3FC24 RET
	0x03B3FC28 MOV X21, X20
	0x03B3FC2C BL 0x1C16F20
	0x03B3FC30 BL 0x1C16F20
	0x03B3FC34 B 0x3B3FC44
	0x03B3FC38 B 0x3B3FC44
	0x03B3FC3C B 0x3B3FC48
	0x03B3FC40 B 0x3B3FC44
	0x03B3FC44 MOV X21, X20
	0x03B3FC48 MOV X19, X0
	0x03B3FC4C CMP W1, 0x1
	0x03B3FC50 B.NE 0x3B3FC7C
	0x03B3FC54 MOV X0, X19
	0x03B3FC58 BL 0x3EB1AD0
	0x03B3FC5C LDR X20, [X0]
	0x03B3FC60 BL 0x3EB1AE0
	0x03B3FC64 LDR X1, [X21]
	0x03B3FC68 ADD X0, X31, 0x20
	0x03B3FC6C BL 0x2BC3C60
	0x03B3FC70 CBNZ X20, 0x3B3FC84
	0x03B3FC74 MOV W19, W31
	0x03B3FC78 B 0x3B3FBFC
	0x03B3FC7C MOV X20, X31
	0x03B3FC80 B 0x3B3FC90
	0x03B3FC84 MOV X0, X20
	0x03B3FC88 BL 0x1C16F18
	0x03B3FC8C MOV X19, X0
	0x03B3FC90 LDR X1, [X21]
	0x03B3FC94 ADD X0, X31, 0x20
	0x03B3FC98 BL 0x2BC3C60
	0x03B3FC9C CBNZ X20, 0x3B3FCA8
	0x03B3FCA0 MOV X0, X19
	0x03B3FCA4 BL 0x1D2C690
	0x03B3FCA8 MOV X0, X20
	0x03B3FCAC BL 0x1C16F18
	0x03B3FCB0 BL 0x1990590
	0x03B3FCB4 STR X30, [X31 - 0x20]!
	0x03B3FCB8 STP X20, X19, [X31 + 0x10]
	0x03B3FCBC ORR W8, W1, 0x2
	0x03B3FCC0 CMP W8, 0x3
	0x03B3FCC4 B.NE 0x3B3FD5C
	0x03B3FCC8 LDRB W8, [X0 + 0x200]
	0x03B3FCCC LDRB W20, [X0 + 0x20C]
	0x03B3FCD0 MOV X19, X0
	0x03B3FCD4 CBZ W8, 0x3B3FD14
	0x03B3FCD8 MOV X0, X19
	0x03B3FCDC MOV X1, X31
	0x03B3FCE0 BL 0x3C32E90
	0x03B3FCE4 LDR V0, [X19 + 0x28C]
	0x03B3FCE8 LDR V1, [X19 + 0x290]
	0x03B3FCEC LDR V2, [X19 + 0x294]
	0x03B3FCF0 CBZ W20, 0x3B3FD44
	0x03B3FCF4 CBZ X0, 0x3B3FD68
	0x03B3FCF8 LDR V6, [X19 + 0x2A4]
	0x03B3FCFC LDR V5, [X19 + 0x2A0]
	0x03B3FD00 LDR V4, [X19 + 0x29C]
	0x03B3FD04 LDR V3, [X19 + 0x298]
	0x03B3FD08 MOV X1, X31
	0x03B3FD0C BL 0x3C40000
	0x03B3FD10 B 0x3B3FD50
	0x03B3FD14 CBZ W20, 0x3B3FD50
	0x03B3FD18 MOV X0, X19
	0x03B3FD1C MOV X1, X31
	0x03B3FD20 BL 0x3C32E90
	0x03B3FD24 CBZ X0, 0x3B3FD68
	0x03B3FD28 LDR V3, [X19 + 0x2A4]
	0x03B3FD2C LDR V2, [X19 + 0x2A0]
	0x03B3FD30 LDR V1, [X19 + 0x29C]
	0x03B3FD34 LDR V0, [X19 + 0x298]
	0x03B3FD38 MOV X1, X31
	0x03B3FD3C BL 0x3C3F7AC
	0x03B3FD40 B 0x3B3FD50
	0x03B3FD44 CBZ X0, 0x3B3FD68
	0x03B3FD48 MOV X1, X31
	0x03B3FD4C BL 0x3C3F62C
	0x03B3FD50 MOV X0, X19
	0x03B3FD54 BL 0x3B3F620
	0x03B3FD58 STRH W31, [X19 + 0x2B4]
	0x03B3FD5C LDP X20, X19, [X31 + 0x10]
	0x03B3FD60 LDR X30, [X31], #0x20
	0x03B3FD64 RET
	0x03B3FD68 BL 0x1C16F20
	0x03B3FD6C SUB X31, X31, 0x90
	0x03B3FD70 STR D8, [X31 + 0x60]
	0x03B3FD74 STR X30, [X31 + 0x68]
	0x03B3FD78 STP X22, X21, [X31 + 0x70]
	0x03B3FD7C STP X20, X19, [X31 + 0x80]
	0x03B3FD80 ADRP X21, 0x8A3000
	0x03B3FD84 LDRB W8, [X21 + 0x870]
	0x03B3FD88 MOV V8.16B, V0.16B
	0x03B3FD8C MOV W20, W1
	0x03B3FD90 MOV X19, X0
	0x03B3FD94 TBNZ X8, 0x0, 0x3B3FDD0
	0x03B3FD98 ADRP X0, 0x61B000
	0x03B3FD9C LDR X0, [X0 + 0x680]
	0x03B3FDA0 BL 0x1C16CF4
	0x03B3FDA4 ADRP X0, 0x61B000
	0x03B3FDA8 LDR X0, [X0 + 0x688]
	0x03B3FDAC BL 0x1C16CF4
	0x03B3FDB0 ADRP X0, 0x61B000
	0x03B3FDB4 LDR X0, [X0 + 0x168]
	0x03B3FDB8 BL 0x1C16CF4
	0x03B3FDBC ADRP X0, 0x61B000
	0x03B3FDC0 LDR X0, [X0 + 0x170]
	0x03B3FDC4 BL 0x1C16CF4
	0x03B3FDC8 MOVZ W8, 0x1
	0x03B3FDCC STRB W8, [X21 + 0x870]
	0x03B3FDD0 STR X31, [X31 + 0x58]
	0x03B3FDD4 STP X31, X31, [X31 + 0x30]
	0x03B3FDD8 STR W31, [X31 + 0x48]
	0x03B3FDDC STR X31, [X31 + 0x40]
	0x03B3FDE0 STR W31, [X31 + 0x28]
	0x03B3FDE4 STR X31, [X31 + 0x20]
	0x03B3FDE8 LDRB W8, [X19 + 0x1E4]
	0x03B3FDEC CBZ W8, 0x3B3FED4
	0x03B3FDF0 LDRB W8, [X19 + 0x278]
	0x03B3FDF4 CBZ W8, 0x3B3FED4
	0x03B3FDF8 LDR W8, [X19 + 0x280]
	0x03B3FDFC LDR W9, [X19 + 0x27C]
	0x03B3FE00 CMP W8, W9
	0x03B3FE04 B.GE 0x3B3FED4
	0x03B3FE08 MOV X0, X19
	0x03B3FE0C BL 0x3B3A784
	0x03B3FE10 CBZ X0, 0x3B3FF94
	0x03B3FE14 LDR W8, [X0 + 0x18]
	0x03B3FE18 CMP W8, 0x1
	0x03B3FE1C B.NE 0x3B3FED4
	0x03B3FE20 LDR X0, [X19 + 0x368]
	0x03B3FE24 CBZ X0, 0x3B3FF94
	0x03B3FE28 ADRP X8, 0x61B000
	0x03B3FE2C LDR X8, [X8 + 0x688]
	0x03B3FE30 LDR X1, [X8]
	0x03B3FE34 BL 0x2AA4E88
	0x03B3FE38 CMP W0, 0x1
	0x03B3FE3C B.LT 0x3B3FED4
	0x03B3FE40 LDR X21, [X19 + 0x368]
	0x03B3FE44 MOV X0, X19
	0x03B3FE48 BL 0x3B3A784
	0x03B3FE4C CBZ X0, 0x3B3FF94
	0x03B3FE50 ADRP X22, 0x61B000
	0x03B3FE54 LDR X22, [X22 + 0x170]
	0x03B3FE58 MOV W1, W31
	0x03B3FE5C LDR X2, [X22]
	0x03B3FE60 BL 0x301BCCC
	0x03B3FE64 CBZ X21, 0x3B3FF94
	0x03B3FE68 ADRP X8, 0x61B000
	0x03B3FE6C LDR X8, [X8 + 0x680]
	0x03B3FE70 MOV X1, X0
	0x03B3FE74 ADD X2, X31, 0x58
	0x03B3FE78 MOV X0, X21
	0x03B3FE7C LDR X3, [X8]
	0x03B3FE80 BL 0x2AA6B2C
	0x03B3FE84 TBZ X0, 0x0, 0x3B3FED4
	0x03B3FE88 MOV X0, X19
	0x03B3FE8C BL 0x3B3A784
	0x03B3FE90 CBZ X0, 0x3B3FF94
	0x03B3FE94 LDR X2, [X22]
	0x03B3FE98 MOV W1, W31
	0x03B3FE9C BL 0x301BCCC
	0x03B3FEA0 LDR X21, [X31 + 0x58]
	0x03B3FEA4 MOV X22, X0
	0x03B3FEA8 MOV X0, X19
	0x03B3FEAC MOV X1, X22
	0x03B3FEB0 MOV X2, X21
	0x03B3FEB4 BL 0x3B43E58
	0x03B3FEB8 LDR X8, [X19]
	0x03B3FEBC MOV X0, X19
	0x03B3FEC0 MOV X1, X22
	0x03B3FEC4 MOV X2, X21
	0x03B3FEC8 LDR X9, [X8 + 0x8A8]
	0x03B3FECC LDR X3, [X8 + 0x8B0]
	0x03B3FED0 BLR X9
	0x03B3FED4 ADD X21, X19, 0x28C
	0x03B3FED8 LDUR V0, [X21 + 0xC]
	0x03B3FEDC LDR V1, [X21]
	0x03B3FEE0 ADD X2, X31, 0x30
	0x03B3FEE4 ADD X3, X31, 0x20
	0x03B3FEE8 STUR V0, [X31 + 0x3C]
	0x03B3FEEC STR V1, [X31 + 0x3]
	0x03B3FEF0 LDR W8, [X19 + 0x2B0]
	0x03B3FEF4 LDR X9, [X19 + 0x2A8]
	0x03B3FEF8 MOV X0, X19
	0x03B3FEFC MOV W1, W20
	0x03B3FF00 STR W8, [X31 + 0x28]
	0x03B3FF04 STR X9, [X31 + 0x20]
	0x03B3FF08 BL 0x3B41448
	0x03B3FF0C MOV X0, X19
	0x03B3FF10 BL 0x3B3A824
	0x03B3FF14 TBZ X0, 0x0, 0x3B3FF58
	0x03B3FF18 CMP W20, 0x1
	0x03B3FF1C B.NE 0x3B3FF40
	0x03B3FF20 LDR V0, [X31 + 0x3]
	0x03B3FF24 LDUR V1, [X31 + 0x3C]
	0x03B3FF28 ADD X1, X31, 0x0
	0x03B3FF2C MOV X0, X19
	0x03B3FF30 STR V0, [X31]
	0x03B3FF34 MOV V0.16B, V8.16B
	0x03B3FF38 STUR V1, [X31 + 0xC]
	0x03B3FF3C BL 0x3B42A48
	0x03B3FF40 ADD X1, X31, 0x30
	0x03B3FF44 ADD X2, X31, 0x20
	0x03B3FF48 MOV X0, X19
	0x03B3FF4C MOV V0.16B, V8.16B
	0x03B3FF50 BL 0x3B42CF8
	0x03B3FF54 B 0x3B3FF7C
	0x03B3FF58 LDUR V0, [X31 + 0x3C]
	0x03B3FF5C LDR V1, [X31 + 0x3]
	0x03B3FF60 ADD X10, X19, 0x2A8
	0x03B3FF64 STUR V0, [X21 + 0xC]
	0x03B3FF68 STR V1, [X21]
	0x03B3FF6C LDR W8, [X31 + 0x28]
	0x03B3FF70 LDR X9, [X31 + 0x20]
	0x03B3FF74 STR W8, [X10 + 0x8]
	0x03B3FF78 STR X9, [X10]
	0x03B3FF7C LDP X20, X19, [X31 + 0x80]
	0x03B3FF80 LDP X22, X21, [X31 + 0x70]
	0x03B3FF84 LDR X30, [X31 + 0x68]
	0x03B3FF88 LDR V8, [X31 + 0x60]
	0x03B3FF8C ADD X31, X31, 0x90
	0x03B3FF90 RET
	0x03B3FF94 BL 0x1C16F20
	0x03B3FF98 SUB X31, X31, 0x60
	0x03B3FF9C STR X30, [X31 + 0x20]
	0x03B3FFA0 STP X24, X23, [X31 + 0x30]
	0x03B3FFA4 STP X22, X21, [X31 + 0x40]
	0x03B3FFA8 STP X20, X19, [X31 + 0x50]
	0x03B3FFAC ADRP X21, 0x8A3000
	0x03B3FFB0 LDRB W8, [X21 + 0x882]
	0x03B3FFB4 MOV X19, X1
	0x03B3FFB8 MOV X20, X0
	0x03B3FFBC TBNZ X8, 0x0, 0x3B40010
	0x03B3FFC0 ADRP X0, 0x61B000
	0x03B3FFC4 LDR X0, [X0 + 0x660]
	0x03B3FFC8 BL 0x1C16CF4
	0x03B3FFCC ADRP X0, 0x61B000
	0x03B3FFD0 LDR X0, [X0 + 0x668]
	0x03B3FFD4 BL 0x1C16CF4
	0x03B3FFD8 ADRP X0, 0x61B000
	0x03B3FFDC LDR X0, [X0 + 0x670]
	0x03B3FFE0 BL 0x1C16CF4
	0x03B3FFE4 ADRP X0, 0x61B000
	0x03B3FFE8 LDR X0, [X0 + 0x678]
	0x03B3FFEC BL 0x1C16CF4
	0x03B3FFF0 ADRP X0, 0x5B4000
	0x03B3FFF4 LDR X0, [X0 + 0x598]
	0x03B3FFF8 BL 0x1C16CF4
	0x03B3FFFC ADRP X0, 0x5B4000
	0x03B40000 LDR X0, [X0 + 0x5F8]
	0x03B40004 BL 0x1C16CF4
	0x03B40008 MOVZ W8, 0x1
	0x03B4000C STRB W8, [X21 + 0x882]
	0x03B40010 STP X31, X31, [X31 + 0x8]
	0x03B40014 STR X31, [X31 + 0x18]
	0x03B40018 LDR X0, [X20 + 0x350]
	0x03B4001C STRB W31, [X20 + 0x334]
	0x03B40020 CBZ X0, 0x3B400DC
	0x03B40024 ADRP X8, 0x61A000
	0x03B40028 LDR X8, [X8 + 0x678]
	0x03B4002C ADRP X22, 0x61A000
	0x03B40030 LDR X22, [X22 + 0x668]
	0x03B40034 ADRP X23, 0x5B3000
	0x03B40038 LDR X1, [X8]
	0x03B4003C ADRP X24, 0x5B3000
	0x03B40040 ADRP X21, 0x61A000
	0x03B40044 LDR X23, [X23 + 0x598]
	0x03B40048 LDR X24, [X24 + 0x5F8]
	0x03B4004C LDR X21, [X21 + 0x660]
	0x03B40050 ADD X8, X31, 0x8
	0x03B40054 BL 0x2DBE924
	0x03B40058 LDR X1, [X22]
	0x03B4005C ADD X0, X31, 0x8
	0x03B40060 BL 0x2BC3C64
	0x03B40064 TBZ X0, 0x0, 0x3B400B8
	0x03B40068 LDR X0, [X23]
	0x03B4006C LDR X20, [X31 + 0x18]
	0x03B40070 LDR W8, [X0 + 0xE0]
	0x03B40074 CBNZ W8, 0x3B4007C
	0x03B40078 BL 0x1C16DFC
	0x03B4007C MOV X0, X20
	0x03B40080 MOV X1, X31
	0x03B40084 MOV X2, X31
	0x03B40088 BL 0x3C354F8
	0x03B4008C TBZ X0, 0x0, 0x3B40058
	0x03B40090 LDR X0, [X24]
	0x03B40094 LDR W8, [X0 + 0xE0]
	0x03B40098 CBNZ W8, 0x3B400A0
	0x03B4009C BL 0x1C16DFC
	0x03B400A0 MOV X0, X20
	0x03B400A4 MOV X1, X19
	0x03B400A8 MOV W2, W31
	0x03B400AC MOV X3, X31
	0x03B400B0 BL 0x3C8A8BC
	0x03B400B4 B 0x3B40058
	0x03B400B8 LDR X1, [X21]
	0x03B400BC ADD X0, X31, 0x8
	0x03B400C0 BL 0x2BC3C60
	0x03B400C4 LDP X20, X19, [X31 + 0x50]
	0x03B400C8 LDP X22, X21, [X31 + 0x40]
	0x03B400CC LDP X24, X23, [X31 + 0x30]
	0x03B400D0 LDR X30, [X31 + 0x20]
	0x03B400D4 ADD X31, X31, 0x60
	0x03B400D8 RET
	0x03B400DC BL 0x1C16F20
	0x03B400E0 B 0x3B400EC
	0x03B400E4 B 0x3B400EC
	0x03B400E8 B 0x3B400EC
	0x03B400EC MOV X19, X0
	0x03B400F0 CMP W1, 0x1
	0x03B400F4 B.NE 0x3B40120
	0x03B400F8 MOV X0, X19
	0x03B400FC BL 0x3EB1AD0
	0x03B40100 LDR X20, [X0]
	0x03B40104 BL 0x3EB1AE0
	0x03B40108 LDR X1, [X21]
	0x03B4010C ADD X0, X31, 0x8
	0x03B40110 BL 0x2BC3C60
	0x03B40114 CBZ X20, 0x3B400C4
	0x03B40118 MOV X0, X20
	0x03B4011C BL 0x1C16F18
	0x03B40120 MOV X20, X31
	0x03B40124 B 0x3B4012C
	0x03B40128 MOV X19, X0
	0x03B4012C LDR X1, [X21]
	0x03B40130 ADD X0, X31, 0x8
	0x03B40134 BL 0x2BC3C60
	0x03B40138 CBNZ X20, 0x3B40144
	0x03B4013C MOV X0, X19
	0x03B40140 BL 0x1D2C690
	0x03B40144 MOV X0, X20
	0x03B40148 BL 0x1C16F18
	0x03B4014C BL 0x1990590
	0x03B40150 SUB X31, X31, 0x40
	0x03B40154 STP X30, X23, [X31 + 0x10]
	0x03B40158 STP X22, X21, [X31 + 0x20]
	0x03B4015C STP X20, X19, [X31 + 0x30]
	0x03B40160 ADRP X21, 0x8A2000
	0x03B40164 LDRB W8, [X21 + 0x85E]
	0x03B40168 MOV X20, X1
	0x03B4016C MOV X19, X0
	0x03B40170 TBNZ X8, 0x0, 0x3B401E8
	0x03B40174 ADRP X0, 0x5B3000
	0x03B40178 LDR X0, [X0 + 0xA28]
	0x03B4017C BL 0x1C16CF4
	0x03B40180 ADRP X0, 0x61A000
	0x03B40184 LDR X0, [X0 + 0x690]
	0x03B40188 BL 0x1C16CF4
	0x03B4018C ADRP X0, 0x61A000
	0x03B40190 LDR X0, [X0 + 0x680]
	0x03B40194 BL 0x1C16CF4
	0x03B40198 ADRP X0, 0x61A000
	0x03B4019C LDR X0, [X0 + 0x328]
	0x03B401A0 BL 0x1C16CF4
	0x03B401A4 ADRP X0, 0x61A000
	0x03B401A8 LDR X0, [X0 + 0x168]
	0x03B401AC BL 0x1C16CF4
	0x03B401B0 ADRP X0, 0x61A000
	0x03B401B4 LDR X0, [X0 + 0x170]
	0x03B401B8 BL 0x1C16CF4
	0x03B401BC ADRP X0, 0x5B3000
	0x03B401C0 LDR X0, [X0 + 0x598]
	0x03B401C4 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], X30
	003 Move [X31+80], X26
	004 Move [X31+88], X25
	005 Move [X31+96], X24
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X23, 0x8A4000
	012 Move X20, 0x61C000
	013 Move X22, 0x61C000
	014 Move X21, 0x61C000
	015 Move W8, [X23+2140]
	016 Move X20, [X20+1536]
	017 Move X22, [X22+1544]
	018 Move X21, [X21+1552]
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {77}
	024 Move X0, 0x61C000
	025 Move X0, [X0+1544]
	026 Call 0x1C17CF4
	027 Move X0, 0x61C000
	028 Move X0, [X0+1528]
	029 Call 0x1C17CF4
	030 Move X0, 0x61C000
	031 Move X0, [X0+1560]
	032 Call 0x1C17CF4
	033 Move X0, 0x5B9000
	034 Move X0, [X0+304]
	035 Call 0x1C17CF4
	036 Move X0, 0x5B5000
	037 Move X0, [X0+2600]
	038 Call 0x1C17CF4
	039 Move X0, 0x61C000
	040 Move X0, [X0+1568]
	041 Call 0x1C17CF4
	042 Move X0, 0x61C000
	043 Move X0, [X0+1576]
	044 Call 0x1C17CF4
	045 Move X0, 0x61C000
	046 Move X0, [X0+1584]
	047 Call 0x1C17CF4
	048 Move X0, 0x61C000
	049 Move X0, [X0+1592]
	050 Call 0x1C17CF4
	051 Move X0, 0x61C000
	052 Move X0, [X0+1600]
	053 Call 0x1C17CF4
	054 Move X0, 0x615000
	055 Move X0, [X0+2200]
	056 Call 0x1C17CF4
	057 Move X0, 0x615000
	058 Move X0, [X0+2208]
	059 Call 0x1C17CF4
	060 Move X0, 0x5B5000
	061 Move X0, [X0+1432]
	062 Call 0x1C17CF4
	063 Move X0, 0x61C000
	064 Move X0, [X0+1536]
	065 Call 0x1C17CF4
	066 Move X0, 0x61C000
	067 Move X0, [X0+1608]
	068 Call 0x1C17CF4
	069 Move X0, 0x61C000
	070 Move X0, [X0+1552]
	071 Call 0x1C17CF4
	072 Move X0, 0x61C000
	073 Move X0, [X0+1616]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X23+2140], W8
	077 Move X0, X19
	078 Move [X31+32], X31
	079 Move [X31+40], X31
	080 Move [X31+48], X31
	081 Call XRBaseInteractable.Awake, X0
	082 Move X0, [X20]
	083 Call 0x1C17F10
	084 Move X1, X31
	085 Move X20, X0
	086 Call TeleportationMonitor..ctor, X0
	087 Move [X19+864], X20
	088 Move X0, [X22]
	089 Call 0x1C17F10
	090 Move X2, [X21]
	091 Move X1, X19
	092 Move X3, X31
	093 Move X21, X0
	094 Call Action`1<Pose>..ctor, X0, X1, X2
	095 Compare X20, 0
	096 JumpIfEqual {180}
	097 Move X22, 0x5B9000
	098 Move X22, [X22+304]
	099 Move X0, X20
	100 Move X1, X21
	101 Move X2, X31
	102 Call TeleportationMonitor.add_teleported, X0, X1
	103 Move W8, [X19+492]
	104 Add X20, X19, 800
	105 Move X0, X19
	106 Move X1, X20
	107 Move [X19+700], W8
	108 Move X2, [X22]
	109 Call 0x21A5990, X0, X1
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfEqual {127}
	114 Move X8, 0x5B5000
	115 Move X8, [X8+2600]
	116 Move X0, [X8]
	117 Move W8, [X0+224]
	118 Compare W8, 0
	119 JumpIfNotEqual {121}
	120 Call 0x1C17DFC
	121 Move X8, 0x61C000
	122 Move X8, [X8+1616]
	123 Move X1, X19
	124 Move X2, X31
	125 Move X0, [X8]
	126 Call Debug.LogError, X0, X1
	127 Move X0, [X19+800]
	128 Compare X0, 0
	129 JumpIfEqual {180}
	130 Move X8, 0x61C000
	131 Move X8, [X8+1560]
	132 Move X2, [X19+840]
	133 Move W1, 1
	134 Move X3, [X8]
	135 Call 0x21A56E8, X0, X1, X2
	136 Move X0, [X19+840]
	137 Compare X0, 0
	138 JumpIfEqual {180}
	139 Move W8, [X0+24]
	140 Subtract W21, W8, 1
	141 Move X24, 0x615000
	142 Move X25, 0x5B5000
	143 Move X26, 0x61C000
	144 Move X24, [X24+2208]
	145 Move X25, [X25+1432]
	146 Move X26, [X26+1600]
	147 Move X2, [X24]
	148 Move W1, W21
	149 Call List`1<Object>.get_Item, X0, X1
	150 Compare X0, 0
	151 JumpIfEqual {180}
	152 Move X1, X31
	153 Call Collider.get_attachedRigidbody, X0
	154 Move X8, [X25]
	155 Move X22, [X20]
	156 Move X23, X0
	157 Move W9, [X8+224]
	158 Compare W9, 0
	159 JumpIfNotEqual {162}
	160 Move X0, X8
	161 Call 0x1C17DFC
	162 Move X0, X23
	163 Move X1, X22
	164 Move X2, X31
	165 Call Object.op_Inequality, X0, X1
	166 Move TEMP, X0
	167 And TEMP, TEMP, 1
	168 Compare TEMP, 1
	169 JumpIfNotEqual {176}
	170 Move X0, [X19+840]
	171 Compare X0, 0
	172 JumpIfEqual {180}
	173 Move X2, [X26]
	174 Move W1, W21
	175 Call List`1<Object>.RemoveAt, X0, X1
	176 Subtract W21, W21, 1
	177 Move X0, [X19+840]
	178 Compare X0, 0
	179 JumpIfNotEqual {147}
	180 Call 0x1C17F20
	181 Move X0, X19
	182 Move X1, X31
	183 Call Component.get_transform, X0
	184 Move X1, X0
	185 Move X0, X19
	186 Call XRGrabInteractable.InitializeTargetPoseAndScale, X0, X1
	187 Move W8, [X19+580]
	188 NotImplemented "Instruction CMP not yet implemented."
	189 Move X8, 0x61C000
	190 Move X8, [X8+1608]
	191 Move X0, X19
	192 Move X1, [X8]
	193 Call 0x22AE2B4, X0
	194 Compare X0, 0
	195 JumpIfEqual {180}
	196 Move W1, 1
	197 Move X2, X31
	198 Call Behaviour.set_enabled, X0, X1
	199 Move X0, [X19+608]
	200 Compare X0, 0
	201 JumpIfEqual {180}
	202 Move X22, 0x61C000
	203 Move X22, [X22+1528]
	204 Move X1, [X22]
	205 Call 0x28BA738, X0
	206 NotImplemented "Instruction CMP not yet implemented."
	207 Move X0, [X19+584]
	208 Compare X0, 0
	209 JumpIfEqual {180}
	210 Move X8, 0x61C000
	211 Move X8, [X8+1592]
	212 Move X1, [X8]
	213 Add X8, X31, 8
	214 Call List`1<Object>.GetEnumerator, X0
	215 NotImplemented "Instruction LDUR not yet implemented."
	216 Move X8, [X31+24]
	217 Move X23, 0x61C000
	218 Move X23, [X23+1576]
	219 Move [X31+2], V0
	220 Move [X31+48], X8
	221 Move X24, 0x5B5000
	222 Move X24, [X24+1432]
	223 Move W20, W31
	224 Move X1, [X23]
	225 Add X0, X31, 32
	226 Call Enumerator<Object>.MoveNext, X0
	227 Move TEMP, X0
	228 And TEMP, TEMP, 1
	229 Compare TEMP, 1
	230 JumpIfNotEqual {306}
	231 Move X0, [X24]
	232 Move X21, [X31+48]
	233 Move W8, [X0+224]
	234 Compare W8, 0
	235 JumpIfNotEqual {237}
	236 Call 0x1C17DFC
	237 Move X0, X21
	238 Move X1, X31
	239 Move X2, X31
	240 Call Object.op_Inequality, X0, X1
	241 Move TEMP, X0
	242 And TEMP, TEMP, 1
	243 Compare TEMP, 1
	244 JumpIfNotEqual {224}
	245 Move X3, [X19+608]
	246 Add W25, W20, 1
	247 Move X0, X19
	248 Move X1, X21
	249 Move W2, W20
	250 Call XRGrabInteractable.MoveGrabTransformerTo, X0, X1, X2, X3
	251 Move W20, W25
	252 Move X20, X0
	253 NotImplemented "Instruction CMP not yet implemented."
	254 Move X0, X20
	255 Call 0x3EB2AD0
	256 Move X21, [X0]
	257 Call 0x3EB2AE0
	258 Move X8, 0x61C000
	259 Move X8, [X8+1568]
	260 Add X0, X31, 32
	261 Move X1, [X8]
	262 Call Enumerator<Object>.Dispose, X0
	263 Compare X21, 0
	264 JumpIfNotEqual {493}
	265 Move X0, [X19+584]
	266 Compare X0, 0
	267 JumpIfEqual {180}
	268 Move X8, 0x61C000
	269 Move X8, [X8+1592]
	270 Move X1, [X8]
	271 Add X8, X31, 8
	272 Call List`1<Object>.GetEnumerator, X0
	273 NotImplemented "Instruction LDUR not yet implemented."
	274 Move X8, [X31+24]
	275 Move X21, 0x61C000
	276 Move X21, [X21+1576]
	277 Move [X31+2], V0
	278 Move [X31+48], X8
	279 Move X23, 0x5B5000
	280 Move X23, [X23+1432]
	281 Move X1, [X21]
	282 Add X0, X31, 32
	283 Call Enumerator<Object>.MoveNext, X0
	284 Move TEMP, X0
	285 And TEMP, TEMP, 1
	286 Compare TEMP, 1
	287 JumpIfNotEqual {306}
	288 Move X0, [X23]
	289 Move X20, [X31+48]
	290 Move W8, [X0+224]
	291 Compare W8, 0
	292 JumpIfNotEqual {294}
	293 Call 0x1C17DFC
	294 Move X0, X20
	295 Move X1, X31
	296 Move X2, X31
	297 Call Object.op_Inequality, X0, X1
	298 Move TEMP, X0
	299 And TEMP, TEMP, 1
	300 Compare TEMP, 1
	301 JumpIfNotEqual {281}
	302 Move X2, [X19+608]
	303 Move X0, X19
	304 Move X1, X20
	305 Call XRGrabInteractable.AddGrabTransformer, X0, X1, X2
	306 Move X8, 0x61C000
	307 Move X8, [X8+1568]
	308 Add X0, X31, 32
	309 Move X1, [X8]
	310 Call Enumerator<Object>.Dispose, X0
	311 Move X0, [X19+616]
	312 Compare X0, 0
	313 JumpIfEqual {180}
	314 Move X1, [X22]
	315 Call 0x28BA738, X0
	316 NotImplemented "Instruction CMP not yet implemented."
	317 Move X0, [X19+592]
	318 Compare X0, 0
	319 JumpIfEqual {180}
	320 Move X8, 0x61C000
	321 Move X8, [X8+1592]
	322 Move X1, [X8]
	323 Add X8, X31, 8
	324 Call List`1<Object>.GetEnumerator, X0
	325 NotImplemented "Instruction LDUR not yet implemented."
	326 Move X8, [X31+24]
	327 Move X22, 0x61C000
	328 Move X22, [X22+1576]
	329 Move [X31+2], V0
	330 Move [X31+48], X8
	331 Move X23, 0x5B5000
	332 Move X23, [X23+1432]
	333 Move W20, W31
	334 Move X1, [X22]
	335 Add X0, X31, 32
	336 Call Enumerator<Object>.MoveNext, X0
	337 Move TEMP, X0
	338 And TEMP, TEMP, 1
	339 Compare TEMP, 1
	340 JumpIfNotEqual {451}
	341 Move X0, [X23]
	342 Move X21, [X31+48]
	343 Move W8, [X0+224]
	344 Compare W8, 0
	345 JumpIfNotEqual {347}
	346 Call 0x1C17DFC
	347 Move X0, X21
	348 Move X1, X31
	349 Move X2, X31
	350 Call Object.op_Inequality, X0, X1
	351 Move TEMP, X0
	352 And TEMP, TEMP, 1
	353 Compare TEMP, 1
	354 JumpIfNotEqual {334}
	355 Move X3, [X19+616]
	356 Add W24, W20, 1
	357 Move X0, X19
	358 Move X1, X21
	359 Move W2, W20
	360 Call XRGrabInteractable.MoveGrabTransformerTo, X0, X1, X2, X3
	361 Move W20, W24
	362 Move X21, X31
	363 Move X20, X0
	364 Move X8, 0x61C000
	365 Move X8, [X8+1568]
	366 Move X1, [X8]
	367 Add X0, X31, 32
	368 Call Enumerator<Object>.Dispose, X0
	369 Compare X21, 0
	370 JumpIfEqual {504}
	371 Move X0, X21
	372 Call 0x1C17F18
	373 Move X20, X0
	374 NotImplemented "Instruction CMP not yet implemented."
	375 Move X0, X20
	376 Call 0x3EB2AD0
	377 Move X21, [X0]
	378 Call 0x3EB2AE0
	379 Move X8, 0x61C000
	380 Move X8, [X8+1568]
	381 Add X0, X31, 32
	382 Move X1, [X8]
	383 Call Enumerator<Object>.Dispose, X0
	384 Compare X21, 0
	385 JumpIfEqual {311}
	386 Move X21, X31
	387 Move X20, X0
	388 Move X8, 0x61B000
	389 Move X8, [X8+1568]
	390 Move X1, [X8]
	391 Add X0, X31, 32
	392 Call Enumerator<Object>.Dispose, X0
	393 Compare X21, 0
	394 JumpIfEqual {504}
	395 Move X0, X21
	396 Call 0x1C17F18
	397 Move X20, X0
	398 NotImplemented "Instruction CMP not yet implemented."
	399 Move X0, X20
	400 Call 0x3EB2AD0
	401 Move X21, [X0]
	402 Call 0x3EB2AE0
	403 Move X8, 0x61B000
	404 Move X8, [X8+1568]
	405 Add X0, X31, 32
	406 Move X1, [X8]
	407 Call Enumerator<Object>.Dispose, X0
	408 Compare X21, 0
	409 JumpIfNotEqual {493}
	410 Move X0, [X19+592]
	411 Compare X0, 0
	412 JumpIfEqual {180}
	413 Move X8, 0x61B000
	414 Move X8, [X8+1592]
	415 Move X1, [X8]
	416 Add X8, X31, 8
	417 Call List`1<Object>.GetEnumerator, X0
	418 NotImplemented "Instruction LDUR not yet implemented."
	419 Move X8, [X31+24]
	420 Move X21, 0x61B000
	421 Move X21, [X21+1576]
	422 Move [X31+2], V0
	423 Move [X31+48], X8
	424 Move X22, 0x5B4000
	425 Move X22, [X22+1432]
	426 Move X1, [X21]
	427 Add X0, X31, 32
	428 Call Enumerator<Object>.MoveNext, X0
	429 Move TEMP, X0
	430 And TEMP, TEMP, 1
	431 Compare TEMP, 1
	432 JumpIfNotEqual {451}
	433 Move X0, [X22]
	434 Move X20, [X31+48]
	435 Move W8, [X0+224]
	436 Compare W8, 0
	437 JumpIfNotEqual {439}
	438 Call 0x1C17DFC
	439 Move X0, X20
	440 Move X1, X31
	441 Move X2, X31
	442 Call Object.op_Inequality, X0, X1
	443 Move TEMP, X0
	444 And TEMP, TEMP, 1
	445 Compare TEMP, 1
	446 JumpIfNotEqual {426}
	447 Move X2, [X19+616]
	448 Move X0, X19
	449 Move X1, X20
	450 Call XRGrabInteractable.AddGrabTransformer, X0, X1, X2
	451 Move X8, 0x61B000
	452 Move X8, [X8+1568]
	453 Add X0, X31, 32
	454 Move X1, [X8]
	455 Call Enumerator<Object>.Dispose, X0
	456 Move X0, X19
	457 Call XRGrabInteractable.FlushRegistration, X0
	458 Move X20, [X31+128]
	459 Move X19, [X31+136]
	460 Move X22, [X31+112]
	461 Move X21, [X31+120]
	462 Move X24, [X31+96]
	463 Move X23, [X31+104]
	464 Move X26, [X31+80]
	465 Move X25, [X31+88]
	466 Move X30, [X31+64]
	467 Add X31, X31, 144
	468 Return 
	469 Move X21, X31
	470 Move X20, X0
	471 Move X8, 0x61B000
	472 Move X8, [X8+1568]
	473 Move X1, [X8]
	474 Add X0, X31, 32
	475 Call Enumerator<Object>.Dispose, X0
	476 Compare X21, 0
	477 JumpIfEqual {504}
	478 Move X0, X21
	479 Call 0x1C17F18
	480 Move X20, X0
	481 NotImplemented "Instruction CMP not yet implemented."
	482 Move X0, X20
	483 Call 0x3EB2AD0
	484 Move X21, [X0]
	485 Call 0x3EB2AE0
	486 Move X8, 0x61B000
	487 Move X8, [X8+1568]
	488 Add X0, X31, 32
	489 Move X1, [X8]
	490 Call Enumerator<Object>.Dispose, X0
	491 Compare X21, 0
	492 JumpIfEqual {456}
	493 Move X0, X21
	494 Call 0x1C17F18
	495 Move X21, X31
	496 Move X20, X0
	497 Move X8, 0x61B000
	498 Move X8, [X8+1568]
	499 Move X1, [X8]
	500 Add X0, X31, 32
	501 Call Enumerator<Object>.Dispose, X0
	502 Compare X21, 0
	503 JumpIfNotEqual {506}
	504 Move X0, X20
	505 Call 0x1D2D690
	506 Move X0, X21
	507 Call 0x1C17F18
	508 Call 0x1991590

Method: System.Void OnDestroy()

Disassembly:
	0x03B402B0 BL 0x2AA6B2C
	0x03B402B4 TBZ X0, 0x0, 0x3B40374
	0x03B402B8 LDR X0, [X23]
	0x03B402BC LDR X22, [X31 + 0x8]
	0x03B402C0 LDR W8, [X0 + 0xE0]
	0x03B402C4 CBNZ W8, 0x3B402CC
	0x03B402C8 BL 0x1C16DFC
	0x03B402CC MOV X0, X22

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, [X0+608]
	004 Move X19, X0
	005 Call XRGrabInteractable.ClearGrabTransformers, X0, X1
	006 Move X1, [X19+616]
	007 Move X0, X19
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call XRGrabInteractable.ClearGrabTransformers, X0, X1
	011 Return 

Method: System.Void ProcessInteractable(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B402E0 LDR X0, [X31 + 0x8]
	0x03B402E4 B 0x3B403B0
	0x03B402E8 CMP X21, X20
	0x03B402EC B.EQ 0x3B40374
	0x03B402F0 LDR X0, [X19 + 0x1D8]
	0x03B402F4 B 0x3B403B0
	0x03B402F8 LDR X0, [X19 + 0x368]
	0x03B402FC CBZ X0, 0x3B403C4
	0x03B40300 ADRP X8, 0x61A000
	0x03B40304 LDR X8, [X8 + 0x690]
	0x03B40308 MOV X1, X21
	0x03B4030C LDR X2, [X8]
	0x03B40310 BL 0x2AA64F8
	0x03B40314 ADRP X8, 0x61A000
	0x03B40318 LDR X8, [X8 + 0x6A0]
	0x03B4031C MOV X1, X19
	0x03B40320 MOV X2, X20
	0x03B40324 MOV X3, X31
	0x03B40328 LDR X0, [X8]
	0x03B4032C BL 0x3227BD4
	0x03B40330 ADRP X8, 0x61A000
	0x03B40334 LDR X8, [X8 + 0x698]
	0x03B40338 MOV X2, X31
	0x03B4033C LDR X1, [X8]
	0x03B40340 BL 0x321B938
	0x03B40344 ADRP X8, 0x5B3000
	0x03B40348 LDR X8, [X8 + 0xA28]
	0x03B4034C MOV X20, X0
	0x03B40350 LDR X8, [X8]
	0x03B40354 LDR W9, [X8 + 0xE0]
	0x03B40358 CBNZ W9, 0x3B40364
	0x03B4035C MOV X0, X8
	0x03B40360 BL 0x1C16DFC
	0x03B40364 MOV X0, X20
	0x03B40368 MOV X1, X19
	0x03B4036C MOV X2, X31
	0x03B40370 BL 0x3C06B0C
	0x03B40374 LDR X0, [X23]
	0x03B40378 LDR X20, [X19 + 0x1D0]
	0x03B4037C LDR W8, [X0 + 0xE0]
	0x03B40380 CBNZ W8, 0x3B40388
	0x03B40384 BL 0x1C16DFC
	0x03B40388 MOV X0, X20
	0x03B4038C MOV X1, X31
	0x03B40390 MOV X2, X31
	0x03B40394 BL 0x3C354F8
	0x03B40398 TBZ X0, 0x0, 0x3B403A4
	0x03B4039C LDR X0, [X19 + 0x1D0]
	0x03B403A0 B 0x3B403B0
	0x03B403A4 MOV X0, X19
	0x03B403A8 MOV X1, X31
	0x03B403AC BL 0x3C32E90
	0x03B403B0 LDP X20, X19, [X31 + 0x30]
	0x03B403B4 LDP X22, X21, [X31 + 0x20]
	0x03B403B8 LDP X30, X23, [X31 + 0x10]
	0x03B403BC ADD X31, X31, 0x40
	0x03B403C0 RET
	0x03B403C4 BL 0x1C16F20
	0x03B403C8 STP X30, X23, [X31 - 0x30]!
	0x03B403CC STP X22, X21, [X31 + 0x10]
	0x03B403D0 STP X20, X19, [X31 + 0x20]
	0x03B403D4 ADRP X22, 0x8A2000
	0x03B403D8 LDRB W8, [X22 + 0x863]
	0x03B403DC MOV X21, X2
	0x03B403E0 MOV X19, X1
	0x03B403E4 MOV X20, X0
	0x03B403E8 TBNZ X8, 0x0, 0x3B4040C
	0x03B403EC ADRP X0, 0x5B3000
	0x03B403F0 LDR X0, [X0 + 0xA28]
	0x03B403F4 BL 0x1C16CF4
	0x03B403F8 ADRP X0, 0x61A000
	0x03B403FC LDR X0, [X0 + 0x6A8]
	0x03B40400 BL 0x1C16CF4
	0x03B40404 MOVZ W8, 0x1
	0x03B40408 STRB W8, [X22 + 0x863]
	0x03B4040C CBZ X19, 0x3B404B8
	0x03B40410 LDRB W8, [X20 + 0x284]
	0x03B40414 CBZ W8, 0x3B40474
	0x03B40418 ADRP X22, 0x61A000
	0x03B4041C ADRP X23, 0x5B3000
	0x03B40420 LDR X22, [X22 + 0x6A8]
	0x03B40424 LDR X23, [X23 + 0xA28]
	0x03B40428 MOV X0, X20
	0x03B4042C MOV X1, X31
	0x03B40430 BL 0x3C389D4
	0x03B40434 LDR X8, [X22]
	0x03B40438 MOV X2, X0
	0x03B4043C MOV X1, X19
	0x03B40440 MOV X3, X31
	0x03B40444 MOV X0, X8
	0x03B40448 BL 0x3227BD4
	0x03B4044C LDR X8, [X23]
	0x03B40450 MOV X22, X0
	0x03B40454 LDR W9, [X8 + 0xE0]
	0x03B40458 CBNZ W9, 0x3B40464
	0x03B4045C MOV X0, X8
	0x03B40460 BL 0x1C16DFC
	0x03B40464 MOV X0, X22
	0x03B40468 MOV X1, X20
	0x03B4046C MOV X2, X31
	0x03B40470 BL 0x3C06B0C
	0x03B40474 CBZ X21, 0x3B40500
	0x03B40478 LDR X8, [X21]
	0x03B4047C MOV X0, X21
	0x03B40480 MOV X1, X19
	0x03B40484 LDP X9, X2, [X8 + 0x198]
	0x03B40488 BLR X9
	0x03B4048C TBZ X0, 0x0, 0x3B404A8
	0x03B40490 MOV X0, X20
	0x03B40494 MOV X1, X19
	0x03B40498 LDP X20, X19, [X31 + 0x20]
	0x03B4049C LDP X22, X21, [X31 + 0x10]
	0x03B404A0 LDP X30, X23, [X31], #0x30
	0x03B404A4 B 0x3B40A00
	0x03B404A8 LDP X20, X19, [X31 + 0x20]
	0x03B404AC LDP X22, X21, [X31 + 0x10]
	0x03B404B0 LDP X30, X23, [X31], #0x30
	0x03B404B4 RET
	0x03B404B8 ADRP X0, 0x5B8000
	0x03B404BC LDR X0, [X0 + 0x528]
	0x03B404C0 BL 0x1C16D08
	0x03B404C4 BL 0x1C16F10
	0x03B404C8 MOV X19, X0
	0x03B404CC ADRP X0, 0x61A000
	0x03B404D0 LDR X0, [X0 + 0x6B0]
	0x03B404D4 BL 0x1C16D08
	0x03B404D8 MOV X1, X0
	0x03B404DC MOV X0, X19
	0x03B404E0 MOV X2, X31
	0x03B404E4 BL 0x330E100
	0x03B404E8 ADRP X0, 0x61A000
	0x03B404EC LDR X0, [X0 + 0x6B8]
	0x03B404F0 BL 0x1C16D08
	0x03B404F4 MOV X1, X0
	0x03B404F8 MOV X0, X19
	0x03B404FC BL 0x1C16DEC
	0x03B40500 BL 0x1C16F20
	0x03B40504 LDR X2, [X0 + 0x260]
	0x03B40508 B 0x3B4050C
	0x03B4050C STP X30, X21, [X31 - 0x20]!
	0x03B40510 STP X20, X19, [X31 + 0x10]
	0x03B40514 CBZ X2, 0x3B40558
	0x03B40518 LDR X8, [X2]
	0x03B4051C MOV X20, X0
	0x03B40520 MOV X0, X2
	0x03B40524 MOV X19, X1
	0x03B40528 LDP X9, X8, [X8 + 0x1A8]
	0x03B4052C MOV X2, X8
	0x03B40530 BLR X9
	0x03B40534 MOV W21, W0
	0x03B40538 TBZ X0, 0x0, 0x3B40548
	0x03B4053C MOV X0, X20
	0x03B40540 MOV X1, X19
	0x03B40544 BL 0x3B40C20
	0x03B40548 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8A3000
	006 Move W8, [X21+2141]
	007 Move W20, W1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x61B000
	014 Move X0, [X0+1624]
	015 Call 0x1C17CF4
	016 Move X0, 0x5B4000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2141], W8
	021 Move X0, X19
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Call XRGrabInteractable.AddDefaultGrabTransformers, X0
	024 Move X0, X19
	025 Call XRGrabInteractable.FlushRegistration, X0
	026 Call XRGrabInteractable.FlushRegistration, X0
	027 NotImplemented "Instruction CMP not yet implemented."
	028 NotImplemented "Instruction CMP not yet implemented."
	029 Compare W20, 0
	030 JumpIfNotEqual {187}
	031 Move X0, X19
	032 Call XRBaseInteractable.get_isSelected, X0
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {43}
	037 Move W8, [X19+692]
	038 Compare W8, 0
	039 JumpIfNotEqual {43}
	040 Move W8, [X19+693]
	041 Compare W8, 0
	042 JumpIfEqual {150}
	043 Move W8, [X19+700]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move W9, [X19+693]
	046 Compare W9, 0
	047 JumpIfEqual {58}
	048 Move W9, [X19+692]
	049 Compare W9, 0
	050 JumpIfNotEqual {58}
	051 Move X0, X19
	052 Call XRBaseInteractable.get_isSelected, X0
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {148}
	057 Move W8, [X19+700]
	058 Compare W8, 0
	059 JumpIfEqual {143}
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X0, X19
	062 Move W1, W31
	063 Call XRGrabInteractable.PerformKinematicUpdate, X0, X1
	064 Move W8, [X19+692]
	065 Compare W8, 0
	066 JumpIfEqual {70}
	067 Move X0, X19
	068 Move W1, W20
	069 Call XRGrabInteractable.PerformInstantaneousUpdate, X0, X1
	070 Move W8, [X19+693]
	071 Compare W8, 0
	072 JumpIfEqual {75}
	073 Move X0, X19
	074 Call XRGrabInteractable.ApplyTargetScale, X0
	075 Move X0, X19
	076 Call XRBaseInteractable.get_isSelected, X0
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfEqual {86}
	081 Move W8, [X19+632]
	082 Compare W8, 0
	083 JumpIfEqual {187}
	084 Move W8, [X19+648]
	085 NotImplemented "Instruction CMP not yet implemented."
	086 Move X0, X31
	087 Call Time.get_deltaTime
	088 Move X0, X19
	089 Move W1, W20
	090 Call XRGrabInteractable.UpdateTarget, X0, X1, V0
	091 Move W8, [X19+700]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X0, X19
	094 Move W1, W20
	095 Move X20, [X31+16]
	096 Move X19, [X31+24]
	097 Move X30, [X31+32]
	098 Move X21, [X31+40]
	099 Call XRGrabInteractable.PerformInstantaneousUpdate, X0, X1
	100 Return 
	101 Move W8, [X19+704]
	102 Compare W8, 0
	103 JumpIfEqual {116}
	104 Move X0, X19
	105 Call XRBaseInteractable.get_isSelected, X0
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfEqual {115}
	110 Move X8, [X19]
	111 Move X0, X19
	112 Move X9, [X8+2264]
	113 Move X1, [X8+2272]
	114 NotImplemented "Instruction BLR not yet implemented."
	115 Move [X19+704], W31
	116 Move W8, [X19+821]
	117 Compare W8, 0
	118 JumpIfEqual {187}
	119 Move W8, [X19+820]
	120 Compare W8, 0
	121 JumpIfEqual {142}
	122 Move X8, 0x5B4000
	123 Move X8, [X8+1432]
	124 Move X20, [X19+824]
	125 Move X0, [X8]
	126 Move W8, [X0+224]
	127 Compare W8, 0
	128 JumpIfNotEqual {130}
	129 Call 0x1C17DFC
	130 Move X0, X20
	131 Move X1, X31
	132 Move X2, X31
	133 Call Object.op_Inequality, X0, X1
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {142}
	138 Move X1, [X19+824]
	139 Move X0, X19
	140 Call XRGrabInteractable.StopIgnoringCharacterCollision, X0, X1
	141 Move [X19+824], X31
	142 Move [X19+821], W31
	143 Move X0, X31
	144 Call Time.get_deltaTime
	145 Move X0, X19
	146 Move W1, W31
	147 Call XRGrabInteractable.PerformVelocityTrackingUpdate, X0, X1, V0
	148 Move X0, X19
	149 Call XRGrabInteractable.ApplyTargetScale, X0
	150 Move W8, [X19+820]
	151 Compare W8, 0
	152 JumpIfEqual {187}
	153 Move W8, [X19+821]
	154 Compare W8, 0
	155 JumpIfNotEqual {187}
	156 Move X8, [X19+832]
	157 Compare X8, 0
	158 JumpIfEqual {192}
	159 Move W8, [X8+32]
	160 Compare W8, 0
	161 JumpIfNotEqual {187}
	162 Move X8, 0x5B4000
	163 Move X8, [X8+1432]
	164 Move X20, [X19+824]
	165 Move X0, [X8]
	166 Move W8, [X0+224]
	167 Compare W8, 0
	168 JumpIfNotEqual {170}
	169 Call 0x1C17DFC
	170 Move X0, X20
	171 Move X1, X31
	172 Move X2, X31
	173 Call Object.op_Inequality, X0, X1
	174 Move TEMP, X0
	175 And TEMP, TEMP, 1
	176 Compare TEMP, 1
	177 JumpIfNotEqual {187}
	178 Move X1, [X19+824]
	179 Move X0, X19
	180 Call XRGrabInteractable.IsOutsideCharacterCollider, X0, X1
	181 Move TEMP, X0
	182 And TEMP, TEMP, 1
	183 Compare TEMP, 1
	184 JumpIfNotEqual {187}
	185 Move W8, 1
	186 Move [X19+821], W8
	187 Move X20, [X31+16]
	188 Move X19, [X31+24]
	189 Move X30, [X31+32]
	190 Move X21, [X31+40]
	191 Return 
	192 Call 0x1C17F20

Method: UnityEngine.Transform GetAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)

Disassembly:
	0x03B41150 LDR W8, [X0 + 0x18]
	0x03B41154 ADRP X26, 0x619000
	0x03B41158 ADRP X24, 0x619000
	0x03B4115C ADRP X25, 0x619000
	0x03B41160 ADRP X23, 0x619000
	0x03B41164 LDR X26, [X26 + 0x738]
	0x03B41168 LDR X24, [X24 + 0x728]
	0x03B4116C LDR X25, [X25 + 0x6E8]
	0x03B41170 LDR X23, [X23 + 0x720]
	0x03B41174 CMP W8, 0x1
	0x03B41178 B.LT 0x3B41250
	0x03B4117C LDR X1, [X26]
	0x03B41180 ADD X8, X31, 0x8
	0x03B41184 BL 0x301CB58
	0x03B41188 LDUR V0, [X31 + 0x8]
	0x03B4118C LDR X8, [X31 + 0x18]
	0x03B41190 STR V0, [X31 + 0x2]
	0x03B41194 STR X8, [X31 + 0x30]
	0x03B41198 LDR X1, [X24]
	0x03B4119C ADD X0, X31, 0x20
	0x03B411A0 BL 0x2BC4350
	0x03B411A4 TBZ X0, 0x0, 0x3B41244
	0x03B411A8 LDR X22, [X31 + 0x30]
	0x03B411AC LDR X1, [X25]
	0x03B411B0 MOV X0, X22
	0x03B411B4 BL 0x1C16E00
	0x03B411B8 MOV X21, X0
	0x03B411BC CBZ X0, 0x3B41198
	0x03B411C0 LDR X0, [X19 + 0x260]
	0x03B411C4 CBZ X0, 0x3B41360
	0x03B411C8 LDR X8, [X0]
	0x03B411CC LDP X9, X2, [X8 + 0x188]
	0x03B411D0 MOV X1, X22
	0x03B411D4 BLR X9
	0x03B411D8 TBZ X0, 0x0, 0x3B41198
	0x03B411DC LDR X8, [X21]
	0x03B411E0 LDR X1, [X25]
	0x03B411E4 LDRH W9, [X8 + 0x12E]
	0x03B411E8 CBZ X9, 0x3B4120C
	0x03B411EC LDR X10, [X8 + 0xB0]
	0x03B411F0 ADD X10, X10, 0x8
	0x03B411F4 LDUR X11, [X10 - 0x8]
	0x03B411F8 CMP X11, X1
	0x03B411FC B.EQ 0x3B4121C
	0x03B41200 SUBS X9, X9, 0x1
	0x03B41204 ADD X10, X10, 0x10
	0x03B41208 B.NE 0x3B411F4
	0x03B4120C MOVZ W2, 0x1
	0x03B41210 MOV X0, X21
	0x03B41214 BL 0x1C5C788
	0x03B41218 B 0x3B4122C
	0x03B4121C LDR W9, [X10]
	0x03B41220 ADD W9, W9, 0x1
	0x03B41224 ADD X8, X8, W9, 0x4, SXTW
	0x03B41228 ADD X0, X8, 0x138
	0x03B4122C LDP X8, X3, [X0]
	0x03B41230 MOV X0, X21
	0x03B41234 MOV X1, X19
	0x03B41238 MOV X2, X20
	0x03B4123C BLR X8
	0x03B41240 B 0x3B41198
	0x03B41244 LDR X1, [X23]
	0x03B41248 ADD X0, X31, 0x20
	0x03B4124C BL 0x2BC434C
	0x03B41250 LDR X8, [X19 + 0x268]
	0x03B41254 CBZ X8, 0x3B41368
	0x03B41258 LDR X0, [X8 + 0x10]
	0x03B4125C CBZ X0, 0x3B41368
	0x03B41260 LDR W8, [X0 + 0x18]
	0x03B41264 CMP W8, 0x1
	0x03B41268 B.LT 0x3B41340
	0x03B4126C LDR X1, [X26]
	0x03B41270 ADD X8, X31, 0x8
	0x03B41274 BL 0x301CB58
	0x03B41278 LDUR V0, [X31 + 0x8]
	0x03B4127C LDR X8, [X31 + 0x18]
	0x03B41280 STR V0, [X31 + 0x2]
	0x03B41284 STR X8, [X31 + 0x30]
	0x03B41288 LDR X1, [X24]
	0x03B4128C ADD X0, X31, 0x20
	0x03B41290 BL 0x2BC4350
	0x03B41294 TBZ X0, 0x0, 0x3B41334
	0x03B41298 LDR X22, [X31 + 0x30]
	0x03B4129C LDR X1, [X25]
	0x03B412A0 MOV X0, X22
	0x03B412A4 BL 0x1C16E00
	0x03B412A8 MOV X21, X0
	0x03B412AC CBZ X0, 0x3B41288
	0x03B412B0 LDR X0, [X19 + 0x268]
	0x03B412B4 CBZ X0, 0x3B41364
	0x03B412B8 LDR X8, [X0]
	0x03B412BC LDP X9, X2, [X8 + 0x188]
	0x03B412C0 MOV X1, X22
	0x03B412C4 BLR X9
	0x03B412C8 TBZ X0, 0x0, 0x3B41288
	0x03B412CC LDR X8, [X21]
	0x03B412D0 LDR X1, [X25]
	0x03B412D4 LDRH W9, [X8 + 0x12E]
	0x03B412D8 CBZ X9, 0x3B412FC
	0x03B412DC LDR X10, [X8 + 0xB0]
	0x03B412E0 ADD X10, X10, 0x8
	0x03B412E4 LDUR X11, [X10 - 0x8]
	0x03B412E8 CMP X11, X1
	0x03B412EC B.EQ 0x3B4130C
	0x03B412F0 SUBS X9, X9, 0x1
	0x03B412F4 ADD X10, X10, 0x10
	0x03B412F8 B.NE 0x3B412E4
	0x03B412FC MOVZ W2, 0x1
	0x03B41300 MOV X0, X21
	0x03B41304 BL 0x1C5C788
	0x03B41308 B 0x3B4131C
	0x03B4130C LDR W9, [X10]
	0x03B41310 ADD W9, W9, 0x1
	0x03B41314 ADD X8, X8, W9, 0x4, SXTW
	0x03B41318 ADD X0, X8, 0x138
	0x03B4131C LDP X8, X3, [X0]
	0x03B41320 MOV X0, X21
	0x03B41324 MOV X1, X19
	0x03B41328 MOV X2, X20
	0x03B4132C BLR X8
	0x03B41330 B 0x3B41288
	0x03B41334 LDR X1, [X23]
	0x03B41338 ADD X0, X31, 0x20
	0x03B4133C BL 0x2BC434C
	0x03B41340 STRB W31, [X19 + 0x284]
	0x03B41344 LDP X20, X19, [X31 + 0x80]
	0x03B41348 LDP X22, X21, [X31 + 0x70]
	0x03B4134C LDP X24, X23, [X31 + 0x60]
	0x03B41350 LDP X26, X25, [X31 + 0x50]
	0x03B41354 LDR X30, [X31 + 0x40]
	0x03B41358 ADD X31, X31, 0x90
	0x03B4135C RET
	0x03B41360 BL 0x1C16F20
	0x03B41364 BL 0x1C16F20
	0x03B41368 BL 0x1C16F20
	0x03B4136C B 0x3B4138C
	0x03B41370 B 0x3B413E4
	0x03B41374 B 0x3B4138C
	0x03B41378 B 0x3B4138C
	0x03B4137C B 0x3B413E4
	0x03B41380 B 0x3B413E4
	0x03B41384 B 0x3B4138C
	0x03B41388 B 0x3B413E4
	0x03B4138C MOV X21, X0
	0x03B41390 CMP W1, 0x1
	0x03B41394 B.NE 0x3B413C0
	0x03B41398 MOV X0, X21
	0x03B4139C BL 0x3EB1AD0
	0x03B413A0 LDR X20, [X0]
	0x03B413A4 BL 0x3EB1AE0
	0x03B413A8 LDR X1, [X23]
	0x03B413AC ADD X0, X31, 0x20
	0x03B413B0 BL 0x2BC434C
	0x03B413B4 CBZ X20, 0x3B41340
	0x03B413B8 MOV X0, X20
	0x03B413BC BL 0x1C16F18
	0x03B413C0 MOV X20, X31
	0x03B413C4 B 0x3B413CC

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X21, 0x8A2000
	009 Move W8, [X21+2142]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {45}
	016 Move X0, 0x5B3000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x61A000
	020 Move X0, [X0+1680]
	021 Call 0x1C17CF4
	022 Move X0, 0x61A000
	023 Move X0, [X0+1664]
	024 Call 0x1C17CF4
	025 Move X0, 0x61A000
	026 Move X0, [X0+808]
	027 Call 0x1C17CF4
	028 Move X0, 0x61A000
	029 Move X0, [X0+360]
	030 Call 0x1C17CF4
	031 Move X0, 0x61A000
	032 Move X0, [X0+368]
	033 Call 0x1C17CF4
	034 Move X0, 0x5B3000
	035 Move X0, [X0+1432]
	036 Call 0x1C17CF4
	037 Move X0, 0x61A000
	038 Move X0, [X0+1688]
	039 Call 0x1C17CF4
	040 Move X0, 0x61A000
	041 Move X0, [X0+1696]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X21+2142], W8
	045 Move X0, X19
	046 Move [X31+8], X31
	047 Call XRBaseInteractable.get_interactorsSelecting, X0
	048 Compare X0, 0
	049 JumpIfEqual {181}
	050 Move W8, [X0+24]
	051 Move X23, 0x5B3000
	052 Move X23, [X23+1432]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move W8, [X19+480]
	055 Compare W8, 0
	056 JumpIfNotEqual {84}
	057 Move X0, X19
	058 Call XRBaseInteractable.get_interactorsSelecting, X0
	059 Compare X0, 0
	060 JumpIfEqual {181}
	061 Move X8, 0x61A000
	062 Move X8, [X8+368]
	063 Move W1, W31
	064 Move X2, [X8]
	065 Call List`1<Object>.get_Item, X0, X1
	066 Move W8, [X19+480]
	067 Move X21, X0
	068 NotImplemented "Instruction CMP not yet implemented."
	069 Compare W8, 0
	070 JumpIfNotEqual {82}
	071 Move X0, [X23]
	072 Move X22, [X19+472]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X22
	078 Move X1, X31
	079 Move X2, X31
	080 Call Object.op_Equality, X0, X1
	081 And W8, W0, 1
	082 Compare W8, 0
	083 JumpIfEqual {120}
	084 Move X8, 0x61A000
	085 Move X8, [X8+808]
	086 Move X0, X20
	087 Move X1, [X8]
	088 Call 0x1C17E00
	089 Compare X0, 0
	090 JumpIfEqual {155}
	091 Move X21, X0
	092 Move X0, [X19+872]
	093 Compare X0, 0
	094 JumpIfEqual {181}
	095 Move X8, 0x61A000
	096 Move X8, [X8+1664]
	097 Add X2, X31, 8
	098 Move X1, X21
	099 Move X3, [X8]
	100 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfNotEqual {155}
	105 Move X0, [X23]
	106 Move X22, [X31+8]
	107 Move W8, [X0+224]
	108 Compare W8, 0
	109 JumpIfNotEqual {111}
	110 Call 0x1C17DFC
	111 Move X0, X22
	112 Move X1, X31
	113 Move X2, X31
	114 Call Object.op_Inequality, X0, X1
	115 Move TEMP, X0
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {122}
	119 Move X0, [X31+8]
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Move X0, [X19+472]
	122 Move X0, [X19+872]
	123 Compare X0, 0
	124 JumpIfEqual {181}
	125 Move X8, 0x61A000
	126 Move X8, [X8+1680]
	127 Move X1, X21
	128 Move X2, [X8]
	129 Call Dictionary`2<Object, Object>.Remove, X0, X1
	130 Move X8, 0x61A000
	131 Move X8, [X8+1696]
	132 Move X1, X19
	133 Move X2, X20
	134 Move X3, X31
	135 Move X0, [X8]
	136 Call String.Format, X0, X1, X2
	137 Move X8, 0x61A000
	138 Move X8, [X8+1688]
	139 Move X2, X31
	140 Move X1, [X8]
	141 Call String.Concat, X0, X1
	142 Move X8, 0x5B3000
	143 Move X8, [X8+2600]
	144 Move X20, X0
	145 Move X8, [X8]
	146 Move W9, [X8+224]
	147 Compare W9, 0
	148 JumpIfNotEqual {151}
	149 Move X0, X8
	150 Call 0x1C17DFC
	151 Move X0, X20
	152 Move X1, X19
	153 Move X2, X31
	154 Call Debug.LogWarning, X0, X1
	155 Move X0, [X23]
	156 Move X20, [X19+464]
	157 Move W8, [X0+224]
	158 Compare W8, 0
	159 JumpIfNotEqual {161}
	160 Call 0x1C17DFC
	161 Move X0, X20
	162 Move X1, X31
	163 Move X2, X31
	164 Call Object.op_Inequality, X0, X1
	165 Move TEMP, X0
	166 And TEMP, TEMP, 1
	167 Compare TEMP, 1
	168 JumpIfNotEqual {170}
	169 Move X0, [X19+464]
	170 Move X0, X19
	171 Move X1, X31
	172 Call Component.get_transform, X0
	173 Move X20, [X31+48]
	174 Move X19, [X31+56]
	175 Move X22, [X31+32]
	176 Move X21, [X31+40]
	177 Move X30, [X31+16]
	178 Move X23, [X31+24]
	179 Add X31, X31, 64
	180 Return X0
	181 Call 0x1C17F20

Method: System.Void AddSingleGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)

Disassembly:
	0x03B40260 MOV X0, X22
	0x03B40264 MOV X1, X31

ISIL:
	001 Move X2, [X0+608]
	002 Call XRGrabInteractable.AddGrabTransformer, X0, X1, X2
	003 Return 

Method: System.Void AddMultipleGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)

Disassembly:
	0x03B40270 AND W8, W0, 0x1
	0x03B40274 CBZ W8, 0x3B402E8

ISIL:
	001 Move X2, [X0+616]
	002 Call XRGrabInteractable.AddGrabTransformer, X0, X1, X2
	003 Return 

Method: System.Boolean RemoveSingleGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)

Disassembly:
	0x03B41504 BL 0x1C16CF4
	0x03B41508 ADRP X0, 0x619000

ISIL:
	001 Move X2, [X0+608]

Method: System.Boolean RemoveMultipleGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)

Disassembly:
	0x03B4155C MOV X0, X20
	0x03B41560 MOV X1, X31

ISIL:
	001 Move X2, [X0+616]
	002 Call XRGrabInteractable.RemoveGrabTransformer, X0, X1, X2
	003 Return X0

Method: System.Void ClearSingleGrabTransformers()

Disassembly:
	0x03B402D0 MOV X1, X31
	0x03B402D4 MOV X2, X31

ISIL:
	001 Move X1, [X0+608]
	002 Call XRGrabInteractable.ClearGrabTransformers, X0, X1
	003 Return 

Method: System.Void ClearMultipleGrabTransformers()

Disassembly:
	0x03B402D8 BL 0x3C354F8
	0x03B402DC TBZ X0, 0x0, 0x3B402F8

ISIL:
	001 Move X1, [X0+616]
	002 Call XRGrabInteractable.ClearGrabTransformers, X0, X1
	003 Return 

Method: System.Void GetSingleGrabTransformers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> results)

Disassembly:
	0x03B415F8 ADD X0, X31, 0x90
	0x03B415FC BL 0x2BC4350
	0x03B41600 TBZ X0, 0x0, 0x3B417F4
	0x03B41604 LDR X0, [X19 + 0x260]
	0x03B41608 CBZ X0, 0x3B421A4
	0x03B4160C LDR X8, [X0]
	0x03B41610 LDR X25, [X31 + 0xA0]
	0x03B41614 LDP X9, X2, [X8 + 0x188]
	0x03B41618 MOV X1, X25
	0x03B4161C BLR X9
	0x03B41620 TBZ X0, 0x0, 0x3B415F4
	0x03B41624 LDUR V0, [X22 + 0xC]
	0x03B41628 LDR V1, [X22]
	0x03B4162C STUR V0, [X27 + 0x2C]
	0x03B41630 STR V1, [X31 + 0xD]
	0x03B41634 CBZ X25, 0x3B421C0
	0x03B41638 LDR V0, [X31 + 0xD]
	0x03B4163C LDUR V1, [X27 + 0x2C]
	0x03B41640 LDP S9, S8, [X21 + 0x4]
	0x03B41644 LDR V10, [X21]
	0x03B41648 STR V0, [X31 + 0x7]
	0x03B4164C STUR V1, [X31 + 0x7C]
	0x03B41650 LDR X8, [X25]
	0x03B41654 LDR X1, [X28]
	0x03B41658 LDRH W9, [X8 + 0x12E]
	0x03B4165C CBZ X9, 0x3B41680

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8A2000
	007 Move X21, 0x61A000
	008 Move W8, [X22+2143]
	009 Move X21, [X21+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x61A000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2143], W8
	021 Move X0, [X21]
	022 Move X20, [X20+608]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]

Method: System.Void GetMultipleGrabTransformers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> results)

Disassembly:
	0x03B416C8 MOV V1.16B, V9.16B
	0x03B416CC MOV V2.16B, V8.16B
	0x03B416D0 BLR X8
	0x03B416D4 B 0x3B415F4
	0x03B416D8 LDR X0, [X19 + 0x270]
	0x03B416DC CBZ X0, 0x3B41A14
	0x03B416E0 LDR W8, [X0 + 0x18]
	0x03B416E4 CMP W8, 0x1
	0x03B416E8 B.LT 0x3B41A14
	0x03B416EC TBZ X24, 0x0, 0x3B419E8
	0x03B416F0 STR X20, [X31 + 0xF8]
	0x03B416F4 ADRP X8, 0x619000
	0x03B416F8 LDR X8, [X8 + 0x738]
	0x03B416FC MOV W20, W28
	0x03B41700 LDR X1, [X8]
	0x03B41704 ADD X8, X31, 0xD0
	0x03B41708 BL 0x301CB58
	0x03B4170C LDR V0, [X31 + 0xD]
	0x03B41710 LDR X8, [X31 + 0xE0]
	0x03B41714 ADRP X26, 0x619000
	0x03B41718 LDR X26, [X26 + 0x728]
	0x03B4171C STR V0, [X31 + 0x9]
	0x03B41720 STR X8, [X31 + 0xA0]
	0x03B41724 ADRP X28, 0x619000
	0x03B41728 LDR X28, [X28 + 0x6F0]
	0x03B4172C LDR X1, [X26]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x8A2000
	007 Move X21, 0x61A000
	008 Move W8, [X22+2144]
	009 Move X21, [X21+1728]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x61A000
	017 Move X0, [X0+1728]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2144], W8
	021 Move X0, [X21]
	022 Move X20, [X20+616]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X20
	028 Move X1, X19
	029 Move X20, [X31+32]
	030 Move X19, [X31+40]
	031 Move X22, [X31+16]
	032 Move X21, [X31+24]
	033 Move X30, [X31+48]
	034 Call XRGrabInteractable.GetGrabTransformers, X0, X1
	035 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer GetSingleGrabTransformerAt(System.Int32 index)

Disassembly:
	0x03B41730 ADD X0, X31, 0x90
	0x03B41734 BL 0x2BC4350
	0x03B41738 TBZ X0, 0x0, 0x3B419B4
	0x03B4173C LDR X25, [X31 + 0xA0]
	0x03B41740 LDUR V0, [X22 + 0xC]
	0x03B41744 LDR V1, [X22]
	0x03B41748 STUR V0, [X27 + 0xC]
	0x03B4174C STR V1, [X31 + 0xB]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+608]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+472]
	007 Move X2, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer GetMultipleGrabTransformerAt(System.Int32 index)

Disassembly:
	0x03B41750 CBZ X25, 0x3B421D0
	0x03B41754 LDR V0, [X31 + 0xB]
	0x03B41758 LDUR V1, [X27 + 0xC]
	0x03B4175C LDP S9, S8, [X21 + 0x4]
	0x03B41760 LDR V10, [X21]
	0x03B41764 STR V0, [X31 + 0x1]
	0x03B41768 STUR V1, [X31 + 0x1C]
	0x03B4176C LDR X8, [X25]

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+616]
	003 Compare X0, 0
	004 JumpIfEqual {10}
	005 Move X8, [X0]
	006 Move X3, [X8+472]
	007 Move X2, [X8+480]
	008 Move X30, [X31+16]
	009 CallNoReturn X3
	010 Call 0x1C17F20

Method: System.Void MoveSingleGrabTransformerTo(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, System.Int32 newIndex)

Disassembly:
	0x03B40258 CBNZ W8, 0x3B40260
	0x03B4025C BL 0x1C16DFC

ISIL:
	001 Move X3, [X0+608]
	002 Call XRGrabInteractable.MoveGrabTransformerTo, X0, X1, X2, X3
	003 Return 

Method: System.Void MoveMultipleGrabTransformerTo(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, System.Int32 newIndex)

Disassembly:
	0x03B40268 MOV X2, X31
	0x03B4026C BL 0x3C3883C

ISIL:
	001 Move X3, [X0+616]
	002 Call XRGrabInteractable.MoveGrabTransformerTo, X0, X1, X2, X3
	003 Return 

Method: UnityEngine.Pose GetTargetPose()

Disassembly:
	0x03B418E0 CMP X11, X1
	0x03B418E4 B.EQ 0x3B41904
	0x03B418E8 SUBS X9, X9, 0x1
	0x03B418EC ADD X10, X10, 0x10
	0x03B418F0 B.NE 0x3B418DC
	0x03B418F4 MOVZ W2, 0x3

ISIL:
	001 Add X9, X0, 652
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move V1, [X9]
	004 Move [X8+12], V0
	005 Move [X8], V1
	006 Return X0

Method: System.Void SetTargetPose(UnityEngine.Pose pose)

Disassembly:
	0x03B418F8 MOV X0, X25
	0x03B418FC BL 0x1C5C788
	0x03B41900 B 0x3B41914
	0x03B41904 LDR W9, [X10]
	0x03B41908 ADD W9, W9, 0x3
	0x03B4190C ADD X8, X8, W9, 0x4, SXTW
	0x03B41910 ADD X0, X8, 0x138
	0x03B41914 LDR V0, [X31 + 0x3]
	0x03B41918 LDUR V1, [X31 + 0x3C]
	0x03B4191C LDR X8, [X0]
	0x03B41920 STR V0, [X31 + 0xD]
	0x03B41924 STUR V1, [X27 + 0x2C]
	0x03B41928 LDR X3, [X0 + 0x8]
	0x03B4192C ADD X2, X31, 0xD0
	0x03B41930 MOV X0, X25
	0x03B41934 MOV X1, X19
	0x03B41938 MOV V0.16B, V10.16B
	0x03B4193C MOV V1.16B, V9.16B
	0x03B41940 MOV V2.16B, V8.16B
	0x03B41944 BLR X8
	0x03B41948 B 0x3B41868
	0x03B4194C MOV X26, X31
	0x03B41950 MOVZ W25, 0x3
	0x03B41954 ADRP X8, 0x619000
	0x03B41958 LDR X8, [X8 + 0x720]
	0x03B4195C LDR X1, [X8]
	0x03B41960 ADD X0, X31, 0x90
	0x03B41964 BL 0x2BC434C
	0x03B41968 CBNZ X26, 0x3B42260
	0x03B4196C MOV W28, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8A2000
	006 Move W8, [X21+2145]
	007 Move X20, X1
	008 Move X19, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x61A000
	014 Move X0, [X0+360]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2145], W8
	018 Move W8, [X20+24]
	019 Move X9, [X20+16]
	020 Move V0, [X20]
	021 Add X10, X19, 652
	022 Move X0, X19
	023 Move [X10+24], W8
	024 Move [X10+16], X9
	025 Move [X10], V0
	026 Call XRBaseInteractable.get_interactorsSelecting, X0
	027 Compare X0, 0
	028 JumpIfEqual {38}
	029 Move W8, [X0+24]
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Move [X19+692], W8
	033 Move X20, [X31+16]
	034 Move X19, [X31+24]
	035 Move X30, [X31+32]
	036 Move X21, [X31+40]
	037 Return 
	038 Call 0x1C17F20

Method: UnityEngine.Vector3 GetTargetLocalScale()

Disassembly:
	0x03B41970 LDR X20, [X31 + 0xF8]
	0x03B41974 CMP W25, 0x3
	0x03B41978 B.EQ 0x3B41980
	0x03B4197C CBNZ W25, 0x3B42138

ISIL:
	001 Move V0, [X0+680]
	002 Move V1, [X0+684]
	003 Move V2, [X0+688]
	004 Return X0

Method: System.Void SetTargetLocalScale(UnityEngine.Vector3 localScale)

Disassembly:
	0x03B41980 LDR X8, [X19 + 0x270]
	0x03B41984 STRB W31, [X19 + 0x278]
	0x03B41988 CBZ X8, 0x3B41A14
	0x03B4198C LDP W2, W9, [X8 + 0x18]
	0x03B41990 ADD W9, W9, 0x1
	0x03B41994 CMP W2, 0x1
	0x03B41998 STP W31, W9, [X8 + 0x18]
	0x03B4199C B.LT 0x3B41A14
	0x03B419A0 LDR X0, [X8 + 0x10]
	0x03B419A4 MOV W1, W31
	0x03B419A8 MOV X3, X31
	0x03B419AC BL 0x339FA34
	0x03B419B0 B 0x3B41A14
	0x03B419B4 MOV X26, X31
	0x03B419B8 MOVZ W25, 0xD
	0x03B419BC ADRP X8, 0x619000
	0x03B419C0 LDR X8, [X8 + 0x720]
	0x03B419C4 LDR X1, [X8]
	0x03B419C8 ADD X0, X31, 0x90
	0x03B419CC BL 0x2BC434C
	0x03B419D0 CBNZ X26, 0x3B42284
	0x03B419D4 MOV W28, W20
	0x03B419D8 LDR X20, [X31 + 0xF8]
	0x03B419DC CMP W25, 0xD
	0x03B419E0 B.EQ 0x3B419E8
	0x03B419E4 CBNZ W25, 0x3B42138
	0x03B419E8 LDR X8, [X19 + 0x270]
	0x03B419EC CBZ X8, 0x3B42280
	0x03B419F0 LDP W2, W9, [X8 + 0x18]
	0x03B419F4 ADD W9, W9, 0x1
	0x03B419F8 CMP W2, 0x1
	0x03B419FC STP W31, W9, [X8 + 0x18]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8A2000
	008 Move W8, [X20+2146]
	009 Move V8, V2
	010 Move V9, V1
	011 Move V10, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x61A000
	018 Move X0, [X0+360]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2146], W8
	022 Move X0, X19
	023 Move [X19+680], S10
	024 Move [X19+684], S9
	025 Move [X19+688], S8
	026 Call XRBaseInteractable.get_interactorsSelecting, X0
	027 Compare X0, 0
	028 JumpIfEqual {40}
	029 Move W8, [X0+24]
	030 Move X30, [X31+24]
	031 Move D9, [X31+8]
	032 Move D8, [X31+16]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 NotImplemented "Instruction CSET not yet implemented."
	035 Move [X19+693], W8
	036 Move X20, [X31+32]
	037 Move X19, [X31+40]
	038 Move V10, [X31+48]
	039 Return 
	040 Call 0x1C17F20

Method: System.Void InitializeTargetPoseAndScale(UnityEngine.Transform thisTransform)

Disassembly:
	0x03B401C8 ADRP X0, 0x61A000
	0x03B401CC LDR X0, [X0 + 0x698]
	0x03B401D0 BL 0x1C16CF4
	0x03B401D4 ADRP X0, 0x61A000
	0x03B401D8 LDR X0, [X0 + 0x6A0]
	0x03B401DC BL 0x1C16CF4
	0x03B401E0 MOVZ W8, 0x1
	0x03B401E4 STRB W8, [X21 + 0x85E]
	0x03B401E8 MOV X0, X19
	0x03B401EC STR X31, [X31 + 0x8]
	0x03B401F0 BL 0x3B3A784
	0x03B401F4 CBZ X0, 0x3B403C4
	0x03B401F8 LDR W8, [X0 + 0x18]
	0x03B401FC ADRP X23, 0x5B3000
	0x03B40200 LDR X23, [X23 + 0x598]
	0x03B40204 CMP W8, 0x2
	0x03B40208 B.GE 0x3B40218
	0x03B4020C LDRB W8, [X19 + 0x1E0]
	0x03B40210 CBNZ W8, 0x3B40278
	0x03B40214 B 0x3B40374
	0x03B40218 MOV X0, X19
	0x03B4021C BL 0x3B3A784
	0x03B40220 CBZ X0, 0x3B403C4
	0x03B40224 ADRP X8, 0x61A000
	0x03B40228 LDR X8, [X8 + 0x170]
	0x03B4022C MOV W1, W31
	0x03B40230 LDR X2, [X8]
	0x03B40234 BL 0x301BCCC
	0x03B40238 LDRB W8, [X19 + 0x1E0]
	0x03B4023C MOV X21, X0
	0x03B40240 CMP X0, X20
	0x03B40244 B.EQ 0x3B40274
	0x03B40248 CBNZ W8, 0x3B40274
	0x03B4024C LDR X0, [X23]
	0x03B40250 LDR X22, [X19 + 0x1D8]
	0x03B40254 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W8, [X0+580]
	005 Move X19, X0
	006 Move X20, X1
	007 Compare W8, 0
	008 JumpIfEqual {14}
	009 Move X0, [X19+800]
	010 Compare X0, 0
	011 JumpIfEqual {41}
	012 Move X1, X31
	013 Call Rigidbody.get_worldCenterOfMass, X0
	014 Compare X20, 0
	015 JumpIfEqual {41}
	016 Move X0, X20
	017 Move X1, X31
	018 Call Transform.get_position, X0
	019 Move [X19+652], S0
	020 Move [X19+656], S1
	021 Move [X19+660], S2
	022 Compare X20, 0
	023 JumpIfEqual {41}
	024 Move X0, X20
	025 Move X1, X31
	026 Call Transform.get_rotation, X0
	027 Move X0, X20
	028 Move X1, X31
	029 Move [X19+664], S0
	030 Move [X19+668], S1
	031 Move [X19+672], S2
	032 Move [X19+676], S3
	033 Call Transform.get_localScale, X0
	034 Move [X19+680], S0
	035 Move [X19+684], S1
	036 Move [X19+688], S2
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Return 
	041 Call 0x1C17F20

Method: System.Void AddGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers)

Disassembly:
	0x03B413C8 MOV X21, X0
	0x03B413CC LDR X1, [X23]
	0x03B413D0 ADD X0, X31, 0x20
	0x03B413D4 BL 0x2BC434C
	0x03B413D8 CBZ X20, 0x3B41434
	0x03B413DC MOV X0, X20
	0x03B413E0 BL 0x1C16F18
	0x03B413E4 MOV X21, X0
	0x03B413E8 CMP W1, 0x1
	0x03B413EC B.NE 0x3B41418
	0x03B413F0 MOV X0, X21
	0x03B413F4 BL 0x3EB1AD0
	0x03B413F8 LDR X22, [X0]
	0x03B413FC BL 0x3EB1AE0
	0x03B41400 LDR X1, [X23]
	0x03B41404 ADD X0, X31, 0x20
	0x03B41408 BL 0x2BC434C
	0x03B4140C CBZ X22, 0x3B41250
	0x03B41410 MOV X0, X22
	0x03B41414 BL 0x1C16F18
	0x03B41418 MOV X22, X31
	0x03B4141C B 0x3B41424
	0x03B41420 MOV X21, X0
	0x03B41424 LDR X1, [X23]
	0x03B41428 ADD X0, X31, 0x20
	0x03B4142C BL 0x2BC434C
	0x03B41430 CBNZ X22, 0x3B4143C
	0x03B41434 MOV X0, X21
	0x03B41438 BL 0x1D2C690
	0x03B4143C MOV X0, X22
	0x03B41440 BL 0x1C16F18
	0x03B41444 BL 0x1990590
	0x03B41448 SUB X31, X31, 0x170
	0x03B4144C STR D10, [X31 + 0xF0]
	0x03B41450 STP D9, D8, [X31 + 0x100]
	0x03B41454 STP X29, X30, [X31 + 0x110]
	0x03B41458 STP X28, X27, [X31 + 0x120]
	0x03B4145C STP X26, X25, [X31 + 0x130]
	0x03B41460 STP X24, X23, [X31 + 0x140]
	0x03B41464 STP X22, X21, [X31 + 0x150]
	0x03B41468 STP X20, X19, [X31 + 0x160]
	0x03B4146C ADRP X24, 0x8A1000
	0x03B41470 ADRP X20, 0x619000
	0x03B41474 LDRB W8, [X24 + 0x868]
	0x03B41478 LDR X20, [X20 + 0x6C0]
	0x03B4147C MOV X21, X3
	0x03B41480 MOV X22, X2
	0x03B41484 MOV W23, W1
	0x03B41488 MOV X19, X0
	0x03B4148C TBNZ X8, 0x0, 0x3B4151C
	0x03B41490 ADRP X0, 0x619000
	0x03B41494 LDR X0, [X0 + 0x718]
	0x03B41498 BL 0x1C16CF4
	0x03B4149C ADRP X0, 0x619000
	0x03B414A0 LDR X0, [X0 + 0x720]
	0x03B414A4 BL 0x1C16CF4
	0x03B414A8 ADRP X0, 0x619000
	0x03B414AC LDR X0, [X0 + 0x728]
	0x03B414B0 BL 0x1C16CF4
	0x03B414B4 ADRP X0, 0x619000
	0x03B414B8 LDR X0, [X0 + 0x730]
	0x03B414BC BL 0x1C16CF4
	0x03B414C0 ADRP X0, 0x619000
	0x03B414C4 LDR X0, [X0 + 0x6E8]
	0x03B414C8 BL 0x1C16CF4
	0x03B414CC ADRP X0, 0x619000
	0x03B414D0 LDR X0, [X0 + 0x6F0]
	0x03B414D4 BL 0x1C16CF4
	0x03B414D8 ADRP X0, 0x619000
	0x03B414DC LDR X0, [X0 + 0x748]
	0x03B414E0 BL 0x1C16CF4
	0x03B414E4 ADRP X0, 0x619000
	0x03B414E8 LDR X0, [X0 + 0x738]
	0x03B414EC BL 0x1C16CF4
	0x03B414F0 ADRP X0, 0x619000
	0x03B414F4 LDR X0, [X0 + 0x740]
	0x03B414F8 BL 0x1C16CF4
	0x03B414FC ADRP X0, 0x619000
	0x03B41500 LDR X0, [X0 + 0x168]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X22, 0x8A2000
	008 Move W8, [X22+2147]
	009 Move X21, X2
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x5B3000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x61A000
	020 Move X0, [X0+1704]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X22+2147], W8
	024 Compare X19, 0
	025 JumpIfEqual {82}
	026 Move W8, [X20+644]
	027 Compare W8, 0
	028 JumpIfEqual {53}
	029 Move X22, 0x61A000
	030 Move X23, 0x5B3000
	031 Move X22, [X22+1704]
	032 Move X23, [X23+2600]
	033 Move X0, X20
	034 Move X1, X31
	035 Call Object.get_name, X0
	036 Move X8, [X22]
	037 Move X2, X0
	038 Move X1, X19
	039 Move X3, X31
	040 Move X0, X8
	041 Call String.Format, X0, X1, X2
	042 Move X8, [X23]
	043 Move X22, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X22
	050 Move X1, X20
	051 Move X2, X31
	052 Call Debug.LogWarning, X0, X1
	053 Compare X21, 0
	054 JumpIfEqual {100}
	055 Move X8, [X21]
	056 Move X0, X21
	057 Move X1, X19
	058 Move X9, [X8+408]
	059 Move X2, [X8+416]
	060 NotImplemented "Instruction BLR not yet implemented."
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {75}
	065 Move X0, X20
	066 Move X1, X19
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Move X23, [X31+56]
	073 Call XRGrabInteractable.OnAddedGrabTransformer, X0, X1
	074 Return 
	075 Move X20, [X31+32]
	076 Move X19, [X31+40]
	077 Move X22, [X31+16]
	078 Move X21, [X31+24]
	079 Move X30, [X31+48]
	080 Move X23, [X31+56]
	081 Return 
	082 Move X0, 0x5B8000
	083 Move X0, [X0+1320]
	084 Call 0x1C17D08
	085 Call 0x1C17F10
	086 Move X19, X0
	087 Move X0, 0x61A000
	088 Move X0, [X0+1712]
	089 Call 0x1C17D08
	090 Move X1, X0
	091 Move X0, X19
	092 Move X2, X31
	093 Call ArgumentNullException..ctor, X0, X1
	094 Move X0, 0x61A000
	095 Move X0, [X0+1720]
	096 Call 0x1C17D08
	097 Move X1, X0
	098 Move X0, X19
	099 Call 0x1C17DEC
	100 Call 0x1C17F20

Method: System.Boolean RemoveGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers)

Disassembly:
	0x03B4150C LDR X0, [X0 + 0x6C0]
	0x03B41510 BL 0x1C16CF4
	0x03B41514 MOVZ W8, 0x1
	0x03B41518 STRB W8, [X24 + 0x868]
	0x03B4151C MOVZ W8, 0x1
	0x03B41520 STP X31, X31, [X31 + 0x90]
	0x03B41524 STR X31, [X31 + 0xA0]
	0x03B41528 STRB W8, [X19 + 0x284]
	0x03B4152C LDR X0, [X20]
	0x03B41530 LDR W8, [X0 + 0xE0]
	0x03B41534 CBNZ W8, 0x3B41540
	0x03B41538 BL 0x1C16DFC
	0x03B4153C LDR X0, [X20]
	0x03B41540 LDR X8, [X0 + 0xB8]
	0x03B41544 MOV X1, X31
	0x03B41548 MOV X2, X31
	0x03B4154C LDR X20, [X8 + 0x10]
	0x03B41550 MOV X0, X20
	0x03B41554 BL 0x33C5D2C
	0x03B41558 TBZ X0, 0x0, 0x3B41568

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Compare X2, 0
	006 JumpIfEqual {29}
	007 Move X8, [X2]
	008 Move X20, X0
	009 Move X0, X2
	010 Move X19, X1
	011 Move X9, [X8+424]
	012 Move X8, [X8+432]
	013 Move X2, X8
	014 NotImplemented "Instruction BLR not yet implemented."
	015 Move W21, W0
	016 Move TEMP, X0
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfNotEqual {23}
	020 Move X0, X20
	021 Move X1, X19
	022 Call XRGrabInteractable.OnRemovedGrabTransformer, X0, X1
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 And W0, W21, 1
	026 Move X30, [X31+32]
	027 Move X21, [X31+40]
	028 Return X0
	029 Call 0x1C17F20

Method: System.Void ClearGrabTransformers(UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers)

Disassembly:
	0x03B41564 BL 0x3BFE970
	0x03B41568 MOV X0, X19
	0x03B4156C BL 0x3B3A824
	0x03B41570 LDR X8, [X19 + 0x260]
	0x03B41574 CBZ X8, 0x3B421EC
	0x03B41578 LDR X9, [X8 + 0x10]
	0x03B4157C CBZ X9, 0x3B421F4
	0x03B41580 LDR X8, [X19 + 0x268]
	0x03B41584 CBZ X8, 0x3B421FC
	0x03B41588 LDR X8, [X8 + 0x10]
	0x03B4158C CBZ X8, 0x3B42204
	0x03B41590 LDR W28, [X9 + 0x18]
	0x03B41594 LDRB W10, [X19 + 0x278]
	0x03B41598 LDR W29, [X8 + 0x18]
	0x03B4159C MOV W24, W0
	0x03B415A0 ADD X27, X31, 0xB0
	0x03B415A4 CBZ W10, 0x3B416D8
	0x03B415A8 TBZ X24, 0x0, 0x3B41980
	0x03B415AC CMP W28, 0x1
	0x03B415B0 STR X20, [X31 + 0xF8]
	0x03B415B4 B.LT 0x3B41818
	0x03B415B8 ADRP X8, 0x619000
	0x03B415BC LDR X8, [X8 + 0x738]
	0x03B415C0 MOV W20, W28
	0x03B415C4 LDR X1, [X8]
	0x03B415C8 ADD X8, X31, 0xD0
	0x03B415CC MOV X0, X9
	0x03B415D0 BL 0x301CB58
	0x03B415D4 LDR V0, [X31 + 0xD]
	0x03B415D8 LDR X8, [X31 + 0xE0]
	0x03B415DC ADRP X26, 0x619000
	0x03B415E0 LDR X26, [X26 + 0x728]
	0x03B415E4 STR V0, [X31 + 0x9]
	0x03B415E8 STR X8, [X31 + 0xA0]
	0x03B415EC ADRP X28, 0x619000
	0x03B415F0 LDR X28, [X28 + 0x6F0]
	0x03B415F4 LDR X1, [X26]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8A2000
	006 Move W8, [X21+2148]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x61A000
	014 Move X0, [X0+1528]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2148], W8
	018 Compare X19, 0
	019 JumpIfEqual {44}
	020 Move X8, 0x61A000
	021 Move X8, [X8+1528]
	022 Move X0, X19
	023 Move X1, [X8]
	024 Call 0x28BA738, X0
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W21, W0
	027 Move X8, [X19]
	028 Subtract W21, W21, 1
	029 Move X0, X19
	030 Move W1, W21
	031 Move X9, [X8+472]
	032 Move X2, [X8+480]
	033 NotImplemented "Instruction BLR not yet implemented."
	034 Move X1, X0
	035 Move X0, X20
	036 Move X2, X19
	037 Call XRGrabInteractable.RemoveGrabTransformer, X0, X1, X2
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X30, [X31+32]
	042 Move X21, [X31+40]
	043 Return 
	044 Call 0x1C17F20

Method: System.Void GetGrabTransformers(UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers, System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> results)

Disassembly:
	0x03B41660 LDR X10, [X8 + 0xB0]
	0x03B41664 ADD X10, X10, 0x8
	0x03B41668 LDUR X11, [X10 - 0x8]
	0x03B4166C CMP X11, X1
	0x03B41670 B.EQ 0x3B41690
	0x03B41674 SUBS X9, X9, 0x1
	0x03B41678 ADD X10, X10, 0x10
	0x03B4167C B.NE 0x3B41668
	0x03B41680 MOVZ W2, 0x3
	0x03B41684 MOV X0, X25
	0x03B41688 BL 0x1C5C788
	0x03B4168C B 0x3B416A0
	0x03B41690 LDR W9, [X10]
	0x03B41694 ADD W9, W9, 0x3
	0x03B41698 ADD X8, X8, W9, 0x4, SXTW
	0x03B4169C ADD X0, X8, 0x138
	0x03B416A0 LDR V0, [X31 + 0x7]
	0x03B416A4 LDUR V1, [X31 + 0x7C]
	0x03B416A8 LDR X8, [X0]
	0x03B416AC STR V0, [X31 + 0xB]
	0x03B416B0 STUR V1, [X27 + 0xC]
	0x03B416B4 LDR X3, [X0 + 0x8]
	0x03B416B8 ADD X2, X31, 0xB0
	0x03B416BC MOV X0, X25
	0x03B416C0 MOV X1, X19
	0x03B416C4 MOV V0.16B, V10.16B

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Compare X1, 0
	004 JumpIfEqual {13}
	005 Compare X0, 0
	006 JumpIfEqual {31}
	007 Move X8, [X0]
	008 Move X3, [X8+456]
	009 Move X2, [X8+464]
	010 Move X30, [X31+16]
	011 Move X19, [X31+24]
	012 CallNoReturn X3
	013 Move X0, 0x5B8000
	014 Move X0, [X0+1320]
	015 Call 0x1C17D08
	016 Call 0x1C17F10
	017 Move X19, X0
	018 Move X0, 0x5DB000
	019 Move X0, [X0+2648]
	020 Call 0x1C17D08
	021 Move X1, X0
	022 Move X0, X19
	023 Move X2, X31
	024 Call ArgumentNullException..ctor, X0, X1
	025 Move X0, 0x61A000
	026 Move X0, [X0+1736]
	027 Call 0x1C17D08
	028 Move X1, X0
	029 Move X0, X19
	030 Call 0x1C17DEC
	031 Call 0x1C17F20

Method: System.Void MoveGrabTransformerTo(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer, System.Int32 newIndex, UnityEngine.XR.Interaction.Toolkit.Utilities.BaseRegistrationList`1<UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer> grabTransformers)

Disassembly:
	0x03B41770 LDR X1, [X28]
	0x03B41774 LDRH W9, [X8 + 0x12E]
	0x03B41778 CBZ X9, 0x3B4179C
	0x03B4177C LDR X10, [X8 + 0xB0]
	0x03B41780 ADD X10, X10, 0x8
	0x03B41784 LDUR X11, [X10 - 0x8]
	0x03B41788 CMP X11, X1
	0x03B4178C B.EQ 0x3B417AC
	0x03B41790 SUBS X9, X9, 0x1
	0x03B41794 ADD X10, X10, 0x10
	0x03B41798 B.NE 0x3B41784
	0x03B4179C MOVZ W2, 0x3
	0x03B417A0 MOV X0, X25
	0x03B417A4 BL 0x1C5C788
	0x03B417A8 B 0x3B417BC
	0x03B417AC LDR W9, [X10]
	0x03B417B0 ADD W9, W9, 0x3
	0x03B417B4 ADD X8, X8, W9, 0x4, SXTW
	0x03B417B8 ADD X0, X8, 0x138
	0x03B417BC LDR V0, [X31 + 0x1]
	0x03B417C0 LDUR V1, [X31 + 0x1C]
	0x03B417C4 LDR X8, [X0]
	0x03B417C8 STR V0, [X31 + 0xD]
	0x03B417CC STUR V1, [X27 + 0x2C]
	0x03B417D0 LDR X3, [X0 + 0x8]
	0x03B417D4 ADD X2, X31, 0xD0
	0x03B417D8 MOV X0, X25
	0x03B417DC MOV X1, X19
	0x03B417E0 MOV V0.16B, V10.16B
	0x03B417E4 MOV V1.16B, V9.16B
	0x03B417E8 MOV V2.16B, V8.16B
	0x03B417EC BLR X8
	0x03B417F0 B 0x3B4172C
	0x03B417F4 MOV X26, X31
	0x03B417F8 ADRP X8, 0x619000
	0x03B417FC LDR X8, [X8 + 0x720]
	0x03B41800 LDR X1, [X8]
	0x03B41804 ADD X0, X31, 0x90
	0x03B41808 BL 0x2BC434C
	0x03B4180C MOV W28, W20
	0x03B41810 LDR X20, [X31 + 0xF8]
	0x03B41814 CBNZ X26, 0x3B42258
	0x03B41818 CMP W29, 0x0
	0x03B4181C B.LE 0x3B41980
	0x03B41820 LDR X8, [X19 + 0x268]
	0x03B41824 CBZ X8, 0x3B42250
	0x03B41828 LDR X0, [X8 + 0x10]
	0x03B4182C CBZ X0, 0x3B42254
	0x03B41830 ADRP X8, 0x619000
	0x03B41834 LDR X8, [X8 + 0x738]
	0x03B41838 MOV W20, W28
	0x03B4183C LDR X1, [X8]
	0x03B41840 ADD X8, X31, 0xD0
	0x03B41844 BL 0x301CB58
	0x03B41848 LDR V0, [X31 + 0xD]
	0x03B4184C LDR X8, [X31 + 0xE0]
	0x03B41850 ADRP X26, 0x619000
	0x03B41854 LDR X26, [X26 + 0x728]
	0x03B41858 STR V0, [X31 + 0x9]
	0x03B4185C STR X8, [X31 + 0xA0]
	0x03B41860 ADRP X28, 0x619000
	0x03B41864 LDR X28, [X28 + 0x6F0]
	0x03B41868 LDR X1, [X26]
	0x03B4186C ADD X0, X31, 0x90
	0x03B41870 BL 0x2BC4350
	0x03B41874 TBZ X0, 0x0, 0x3B4194C
	0x03B41878 LDR X0, [X19 + 0x268]
	0x03B4187C CBZ X0, 0x3B421A8
	0x03B41880 LDR X8, [X0]
	0x03B41884 LDR X25, [X31 + 0xA0]
	0x03B41888 LDP X9, X2, [X8 + 0x188]
	0x03B4188C MOV X1, X25
	0x03B41890 BLR X9
	0x03B41894 TBZ X0, 0x0, 0x3B41868
	0x03B41898 LDUR V0, [X22 + 0xC]
	0x03B4189C LDR V1, [X22]
	0x03B418A0 STUR V0, [X31 + 0x5C]
	0x03B418A4 STR V1, [X31 + 0x5]
	0x03B418A8 CBZ X25, 0x3B421C4
	0x03B418AC LDR V0, [X31 + 0x5]
	0x03B418B0 LDUR V1, [X31 + 0x5C]
	0x03B418B4 LDP S9, S8, [X21 + 0x4]
	0x03B418B8 LDR V10, [X21]
	0x03B418BC STR V0, [X31 + 0x3]
	0x03B418C0 STUR V1, [X31 + 0x3C]
	0x03B418C4 LDR X8, [X25]
	0x03B418C8 LDR X1, [X28]
	0x03B418CC LDRH W9, [X8 + 0x12E]
	0x03B418D0 CBZ X9, 0x3B418F4
	0x03B418D4 LDR X10, [X8 + 0xB0]
	0x03B418D8 ADD X10, X10, 0x8
	0x03B418DC LDUR X11, [X10 - 0x8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x8A2000
	008 Move W8, [X23+2149]
	009 Move X22, X3
	010 Move W21, W2
	011 Move X20, X1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x61A000
	018 Move X0, [X0+1744]
	019 Call 0x1C17CF4
	020 Move X0, 0x5B3000
	021 Move X0, [X0+2600]
	022 Call 0x1C17CF4
	023 Move X0, 0x61A000
	024 Move X0, [X0+1752]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X23+2149], W8
	028 Compare X20, 0
	029 JumpIfEqual {99}
	030 Move W8, [X19+644]
	031 Compare W8, 0
	032 JumpIfEqual {64}
	033 Move X21, 0x61A000
	034 Move X22, 0x5B3000
	035 Move X21, [X21+1752]
	036 Move X22, [X22+2600]
	037 Move X0, X19
	038 Move X1, X31
	039 Call Object.get_name, X0
	040 Move X8, [X21]
	041 Move X2, X0
	042 Move X1, X20
	043 Move X3, X31
	044 Move X0, X8
	045 Call String.Format, X0, X1, X2
	046 Move X8, [X22]
	047 Move X20, X0
	048 Move W9, [X8+224]
	049 Compare W9, 0
	050 JumpIfNotEqual {53}
	051 Move X0, X8
	052 Call 0x1C17DFC
	053 Move X0, X20
	054 Move X1, X19
	055 Move X20, [X31+32]
	056 Move X19, [X31+40]
	057 Move X22, [X31+16]
	058 Move X21, [X31+24]
	059 Move X2, X31
	060 Move X30, [X31+48]
	061 Move X23, [X31+56]
	062 Call Debug.LogError, X0, X1
	063 Return 
	064 Compare X22, 0
	065 JumpIfEqual {117}
	066 Move X8, [X22]
	067 Move X0, X22
	068 Move X9, [X8+440]
	069 Move X1, [X8+448]
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move X8, 0x61A000
	072 Move X8, [X8+1744]
	073 Move X0, X22
	074 Move X1, X20
	075 Move W2, W21
	076 Move X3, [X8]
	077 Call 0x28BAABC, X0, X1, X2
	078 Move TEMP, X0
	079 And TEMP, TEMP, 1
	080 Compare TEMP, 1
	081 JumpIfNotEqual {92}
	082 Move X0, X19
	083 Move X1, X20
	084 Move X20, [X31+32]
	085 Move X19, [X31+40]
	086 Move X22, [X31+16]
	087 Move X21, [X31+24]
	088 Move X30, [X31+48]
	089 Move X23, [X31+56]
	090 Call XRGrabInteractable.OnAddedGrabTransformer, X0, X1
	091 Return 
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 Move X30, [X31+48]
	097 Move X23, [X31+56]
	098 Return 
	099 Move X0, 0x5B8000
	100 Move X0, [X0+1320]
	101 Call 0x1C17D08
	102 Call 0x1C17F10
	103 Move X19, X0
	104 Move X0, 0x61A000
	105 Move X0, [X0+1712]
	106 Call 0x1C17D08
	107 Move X1, X0
	108 Move X0, X19
	109 Move X2, X31
	110 Call ArgumentNullException..ctor, X0, X1
	111 Move X0, 0x61A000
	112 Move X0, [X0+1760]
	113 Call 0x1C17D08
	114 Move X1, X0
	115 Move X0, X19
	116 Call 0x1C17DEC
	117 Call 0x1C17F20

Method: System.Void FlushRegistration()

Disassembly:
	0x03B40278 ADRP X8, 0x61A000
	0x03B4027C LDR X8, [X8 + 0x328]
	0x03B40280 MOV X0, X20
	0x03B40284 LDR X1, [X8]
	0x03B40288 BL 0x1C16E00
	0x03B4028C CBZ X0, 0x3B40374
	0x03B40290 MOV X21, X0
	0x03B40294 LDR X0, [X19 + 0x368]
	0x03B40298 CBZ X0, 0x3B403C4
	0x03B4029C ADRP X8, 0x61A000
	0x03B402A0 LDR X8, [X8 + 0x680]
	0x03B402A4 ADD X2, X31, 0x8
	0x03B402A8 MOV X1, X21
	0x03B402AC LDR X3, [X8]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+608]
	005 Compare X0, 0
	006 JumpIfEqual {20}
	007 Move X8, [X0]
	008 Move X9, [X8+440]
	009 Move X1, [X8+448]
	010 NotImplemented "Instruction BLR not yet implemented."
	011 Move X0, [X19+616]
	012 Compare X0, 0
	013 JumpIfEqual {20}
	014 Move X8, [X0]
	015 Move X2, [X8+440]
	016 Move X1, [X8+448]
	017 Move X30, [X31+16]
	018 Move X19, [X31+24]
	019 CallNoReturn X2
	020 Call 0x1C17F20

Method: System.Void InvokeGrabTransformersOnGrab()

Disassembly:
	0x03B41D38 LDR X8, [X8 + 0x720]
	0x03B41D3C LDR X1, [X8]
	0x03B41D40 ADD X0, X31, 0x90
	0x03B41D44 BL 0x2BC434C
	0x03B41D48 CBNZ X24, 0x3B42278
	0x03B41D4C CBZ W26, 0x3B42138
	0x03B41D50 CMP W29, 0x0
	0x03B41D54 B.LE 0x3B41F40
	0x03B41D58 LDR X8, [X19 + 0x268]
	0x03B41D5C CBZ X8, 0x3B4220C
	0x03B41D60 LDR X0, [X8 + 0x10]
	0x03B41D64 CBZ X0, 0x3B42214
	0x03B41D68 ADRP X8, 0x619000
	0x03B41D6C LDR X8, [X8 + 0x738]
	0x03B41D70 LDR X1, [X8]
	0x03B41D74 ADD X8, X31, 0x50
	0x03B41D78 BL 0x301CB58
	0x03B41D7C LDR V0, [X31 + 0x5]
	0x03B41D80 LDR X8, [X31 + 0x60]
	0x03B41D84 ADRP X26, 0x619000
	0x03B41D88 ADRP X27, 0x619000
	0x03B41D8C LDR X26, [X26 + 0x728]
	0x03B41D90 LDR X27, [X27 + 0x6E8]
	0x03B41D94 STR V0, [X31 + 0x9]
	0x03B41D98 STR X8, [X31 + 0xA0]
	0x03B41D9C ADRP X29, 0x619000
	0x03B41DA0 LDR X29, [X29 + 0x6F0]
	0x03B41DA4 LDR X1, [X26]
	0x03B41DA8 ADD X0, X31, 0x90
	0x03B41DAC BL 0x2BC4350
	0x03B41DB0 TBZ X0, 0x0, 0x3B41F14
	0x03B41DB4 LDR X24, [X31 + 0xA0]
	0x03B41DB8 LDR X1, [X27]
	0x03B41DBC MOV X0, X24
	0x03B41DC0 BL 0x1C16E00
	0x03B41DC4 MOV X25, X0
	0x03B41DC8 CBZ X0, 0x3B41DA4
	0x03B41DCC LDR X0, [X19 + 0x268]
	0x03B41DD0 CBZ X0, 0x3B42198
	0x03B41DD4 LDR X8, [X0]
	0x03B41DD8 LDP X9, X2, [X8 + 0x188]
	0x03B41DDC MOV X1, X24
	0x03B41DE0 BLR X9
	0x03B41DE4 TBZ X0, 0x0, 0x3B41DA4
	0x03B41DE8 LDR X8, [X25]
	0x03B41DEC LDR X1, [X27]
	0x03B41DF0 LDRH W9, [X8 + 0x12E]
	0x03B41DF4 CBZ X9, 0x3B41E18
	0x03B41DF8 LDR X10, [X8 + 0xB0]
	0x03B41DFC ADD X10, X10, 0x8
	0x03B41E00 LDUR X11, [X10 - 0x8]
	0x03B41E04 CMP X11, X1
	0x03B41E08 B.EQ 0x3B41E28
	0x03B41E0C SUBS X9, X9, 0x1
	0x03B41E10 ADD X10, X10, 0x10
	0x03B41E14 B.NE 0x3B41E00
	0x03B41E18 MOV X0, X25
	0x03B41E1C MOV W2, W31
	0x03B41E20 BL 0x1C5C788
	0x03B41E24 B 0x3B41E34
	0x03B41E28 LDRSW X9, [X10]
	0x03B41E2C ADD X8, X8, X9, 0x4, LSL
	0x03B41E30 ADD X0, X8, 0x138
	0x03B41E34 LDP X8, X1, [X0]
	0x03B41E38 MOV X0, X25
	0x03B41E3C BLR X8
	0x03B41E40 TBZ X0, 0x0, 0x3B41DA4
	0x03B41E44 CBZ X24, 0x3B421D4
	0x03B41E48 LDR X8, [X24]
	0x03B41E4C LDR X1, [X29]
	0x03B41E50 LDRH W9, [X8 + 0x12E]
	0x03B41E54 CBZ X9, 0x3B41E78
	0x03B41E58 LDR X10, [X8 + 0xB0]
	0x03B41E5C ADD X10, X10, 0x8
	0x03B41E60 LDUR X11, [X10 - 0x8]
	0x03B41E64 CMP X11, X1
	0x03B41E68 B.EQ 0x3B41E88
	0x03B41E6C SUBS X9, X9, 0x1
	0x03B41E70 ADD X10, X10, 0x10
	0x03B41E74 B.NE 0x3B41E60
	0x03B41E78 MOV X0, X24
	0x03B41E7C MOV W2, W31
	0x03B41E80 BL 0x1C5C788
	0x03B41E84 B 0x3B41E94
	0x03B41E88 LDRSW X9, [X10]
	0x03B41E8C ADD X8, X8, X9, 0x4, LSL
	0x03B41E90 ADD X0, X8, 0x138
	0x03B41E94 LDP X8, X1, [X0]
	0x03B41E98 MOV X0, X24
	0x03B41E9C BLR X8
	0x03B41EA0 TBZ X0, 0x0, 0x3B41DA4
	0x03B41EA4 LDR X8, [X24]
	0x03B41EA8 LDR X1, [X29]
	0x03B41EAC LDRH W9, [X8 + 0x12E]
	0x03B41EB0 CBZ X9, 0x3B41ED4
	0x03B41EB4 LDR X10, [X8 + 0xB0]
	0x03B41EB8 ADD X10, X10, 0x8
	0x03B41EBC LDUR X11, [X10 - 0x8]
	0x03B41EC0 CMP X11, X1
	0x03B41EC4 B.EQ 0x3B41EE4
	0x03B41EC8 SUBS X9, X9, 0x1
	0x03B41ECC ADD X10, X10, 0x10
	0x03B41ED0 B.NE 0x3B41EBC
	0x03B41ED4 MOVZ W2, 0x4
	0x03B41ED8 MOV X0, X24
	0x03B41EDC BL 0x1C5C788
	0x03B41EE0 B 0x3B41EF4
	0x03B41EE4 LDR W9, [X10]
	0x03B41EE8 ADD W9, W9, 0x4
	0x03B41EEC ADD X8, X8, W9, 0x4, SXTW
	0x03B41EF0 ADD X0, X8, 0x138
	0x03B41EF4 LDP X8, X5, [X0]
	0x03B41EF8 MOV X0, X24
	0x03B41EFC MOV X1, X19
	0x03B41F00 MOV W2, W23
	0x03B41F04 MOV X3, X22
	0x03B41F08 MOV X4, X21
	0x03B41F0C BLR X8
	0x03B41F10 B 0x3B41DA4
	0x03B41F14 MOV X24, X31
	0x03B41F18 MOVZ W25, 0x19
	0x03B41F1C ADRP X8, 0x619000
	0x03B41F20 LDR X8, [X8 + 0x720]
	0x03B41F24 LDR X1, [X8]
	0x03B41F28 ADD X0, X31, 0x90
	0x03B41F2C BL 0x2BC434C
	0x03B41F30 CBNZ X24, 0x3B4221C
	0x03B41F34 CMP W25, 0x19
	0x03B41F38 B.EQ 0x3B41F40
	0x03B41F3C CBNZ W25, 0x3B42138
	0x03B41F40 CMP W28, 0x0
	0x03B41F44 B.LE 0x3B4212C
	0x03B41F48 LDR X8, [X19 + 0x260]
	0x03B41F4C CBZ X8, 0x3B42228
	0x03B41F50 LDR X0, [X8 + 0x10]
	0x03B41F54 CBZ X0, 0x3B42230
	0x03B41F58 ADRP X8, 0x619000
	0x03B41F5C LDR X8, [X8 + 0x738]
	0x03B41F60 LDR X1, [X8]
	0x03B41F64 ADD X8, X31, 0x50
	0x03B41F68 BL 0x301CB58
	0x03B41F6C LDR V0, [X31 + 0x5]
	0x03B41F70 LDR X8, [X31 + 0x60]
	0x03B41F74 ADRP X26, 0x619000
	0x03B41F78 ADRP X27, 0x619000
	0x03B41F7C LDR X26, [X26 + 0x728]
	0x03B41F80 LDR X27, [X27 + 0x6E8]
	0x03B41F84 STR V0, [X31 + 0x9]
	0x03B41F88 STR X8, [X31 + 0xA0]
	0x03B41F8C ADRP X28, 0x619000
	0x03B41F90 LDR X28, [X28 + 0x6F0]
	0x03B41F94 LDR X1, [X26]
	0x03B41F98 ADD X0, X31, 0x90
	0x03B41F9C BL 0x2BC4350
	0x03B41FA0 TBZ X0, 0x0, 0x3B42104
	0x03B41FA4 LDR X24, [X31 + 0xA0]
	0x03B41FA8 LDR X1, [X27]
	0x03B41FAC MOV X0, X24
	0x03B41FB0 BL 0x1C16E00
	0x03B41FB4 MOV X25, X0
	0x03B41FB8 CBZ X0, 0x3B41F94
	0x03B41FBC LDR X0, [X19 + 0x260]
	0x03B41FC0 CBZ X0, 0x3B421B4
	0x03B41FC4 LDR X8, [X0]
	0x03B41FC8 LDP X9, X2, [X8 + 0x188]
	0x03B41FCC MOV X1, X24
	0x03B41FD0 BLR X9
	0x03B41FD4 TBZ X0, 0x0, 0x3B41F94
	0x03B41FD8 LDR X8, [X25]
	0x03B41FDC LDR X1, [X27]
	0x03B41FE0 LDRH W9, [X8 + 0x12E]
	0x03B41FE4 CBZ X9, 0x3B42008
	0x03B41FE8 LDR X10, [X8 + 0xB0]
	0x03B41FEC ADD X10, X10, 0x8
	0x03B41FF0 LDUR X11, [X10 - 0x8]
	0x03B41FF4 CMP X11, X1
	0x03B41FF8 B.EQ 0x3B42018
	0x03B41FFC SUBS X9, X9, 0x1
	0x03B42000 ADD X10, X10, 0x10
	0x03B42004 B.NE 0x3B41FF0
	0x03B42008 MOV X0, X25
	0x03B4200C MOV W2, W31
	0x03B42010 BL 0x1C5C788
	0x03B42014 B 0x3B42024
	0x03B42018 LDRSW X9, [X10]
	0x03B4201C ADD X8, X8, X9, 0x4, LSL
	0x03B42020 ADD X0, X8, 0x138
	0x03B42024 LDP X8, X1, [X0]
	0x03B42028 MOV X0, X25
	0x03B4202C BLR X8
	0x03B42030 TBZ X0, 0x0, 0x3B41F94
	0x03B42034 CBZ X24, 0x3B421DC
	0x03B42038 LDR X8, [X24]
	0x03B4203C LDR X1, [X28]
	0x03B42040 LDRH W9, [X8 + 0x12E]
	0x03B42044 CBZ X9, 0x3B42068
	0x03B42048 LDR X10, [X8 + 0xB0]
	0x03B4204C ADD X10, X10, 0x8
	0x03B42050 LDUR X11, [X10 - 0x8]
	0x03B42054 CMP X11, X1
	0x03B42058 B.EQ 0x3B42078
	0x03B4205C SUBS X9, X9, 0x1
	0x03B42060 ADD X10, X10, 0x10
	0x03B42064 B.NE 0x3B42050
	0x03B42068 MOV X0, X24
	0x03B4206C MOV W2, W31
	0x03B42070 BL 0x1C5C788
	0x03B42074 B 0x3B42084
	0x03B42078 LDRSW X9, [X10]
	0x03B4207C ADD X8, X8, X9, 0x4, LSL
	0x03B42080 ADD X0, X8, 0x138
	0x03B42084 LDP X8, X1, [X0]
	0x03B42088 MOV X0, X24
	0x03B4208C BLR X8
	0x03B42090 TBZ X0, 0x0, 0x3B41F94
	0x03B42094 LDR X8, [X24]
	0x03B42098 LDR X1, [X28]
	0x03B4209C LDRH W9, [X8 + 0x12E]
	0x03B420A0 CBZ X9, 0x3B420C4
	0x03B420A4 LDR X10, [X8 + 0xB0]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+72], X25
	004 Move [X31+80], X24
	005 Move [X31+88], X23
	006 Move [X31+96], X22
	007 Move [X31+104], X21
	008 Move [X31+112], X20
	009 Move [X31+120], X19
	010 Move X20, 0x8A2000
	011 Move W8, [X20+2150]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {40}
	017 Move X0, 0x61A000
	018 Move X0, [X0+1816]
	019 Call 0x1C17CF4
	020 Move X0, 0x61A000
	021 Move X0, [X0+1824]
	022 Call 0x1C17CF4
	023 Move X0, 0x61A000
	024 Move X0, [X0+1832]
	025 Call 0x1C17CF4
	026 Move X0, 0x61A000
	027 Move X0, [X0+1840]
	028 Call 0x1C17CF4
	029 Move X0, 0x61A000
	030 Move X0, [X0+1776]
	031 Call 0x1C17CF4
	032 Move X0, 0x61A000
	033 Move X0, [X0+1848]
	034 Call 0x1C17CF4
	035 Move X0, 0x61A000
	036 Move X0, [X0+1856]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X20+2150], W8
	040 Move [X31+32], X31
	041 Move [X31+40], X31
	042 Move [X31+48], X31
	043 Move X8, [X19+608]
	044 Move W9, 1
	045 Move [X19+644], W9
	046 Compare X8, 0
	047 JumpIfEqual {194}
	048 Move X0, [X8+16]
	049 Compare X0, 0
	050 JumpIfEqual {194}
	051 Move W8, [X0+24]
	052 Move X25, 0x61A000
	053 Move X23, 0x61A000
	054 Move X24, 0x61A000
	055 Move X22, 0x61A000
	056 Move X25, [X25+1848]
	057 Move X23, [X23+1832]
	058 Move X24, [X24+1776]
	059 Move X22, [X22+1824]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X1, [X25]
	062 Add X8, X31, 8
	063 Call List`1<Object>.GetEnumerator, X0
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 Move X8, [X31+24]
	066 Move [X31+2], V0
	067 Move [X31+48], X8
	068 Move X1, [X23]
	069 Add X0, X31, 32
	070 Call Enumerator<Object>.MoveNext, X0
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {113}
	075 Move X0, [X19+608]
	076 Compare X0, 0
	077 JumpIfEqual {190}
	078 Move X8, [X0]
	079 Move X20, [X31+48]
	080 Move X9, [X8+392]
	081 Move X2, [X8+400]
	082 Move X1, X20
	083 NotImplemented "Instruction BLR not yet implemented."
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfNotEqual {68}
	088 Compare X20, 0
	089 JumpIfEqual {192}
	090 Move X8, [X20]
	091 Move X1, [X24]
	092 NotImplemented "Instruction LDRH not yet implemented."
	093 Compare X9, 0
	094 JumpIfEqual {101}
	095 Move X10, [X8+176]
	096 Add X10, X10, 8
	097 NotImplemented "Instruction LDUR not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Subtract X9, X9, 1
	100 Add X10, X10, 16
	101 Move W2, 2
	102 Move X0, X20
	103 Call 0x1C5D788
	104 Move W9, [X10]
	105 Add W9, W9, 2
	106 Add X8, X8, W9
	107 Add X0, X8, 312
	108 Move X8, [X0]
	109 Move X2, [X0+8]
	110 Move X0, X20
	111 Move X1, X19
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Move X1, [X22]
	114 Add X0, X31, 32
	115 Call Enumerator<Object>.Dispose, X0
	116 Move X8, [X19+616]
	117 Compare X8, 0
	118 JumpIfEqual {194}
	119 Move X0, [X8+16]
	120 Compare X0, 0
	121 JumpIfEqual {194}
	122 Move W8, [X0+24]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X1, [X25]
	125 Add X8, X31, 8
	126 Call List`1<Object>.GetEnumerator, X0
	127 NotImplemented "Instruction LDUR not yet implemented."
	128 Move X8, [X31+24]
	129 Move [X31+2], V0
	130 Move [X31+48], X8
	131 Move X1, [X23]
	132 Add X0, X31, 32
	133 Call Enumerator<Object>.MoveNext, X0
	134 Move TEMP, X0
	135 And TEMP, TEMP, 1
	136 Compare TEMP, 1
	137 JumpIfNotEqual {176}
	138 Move X0, [X19+616]
	139 Compare X0, 0
	140 JumpIfEqual {191}
	141 Move X8, [X0]
	142 Move X20, [X31+48]
	143 Move X9, [X8+392]
	144 Move X2, [X8+400]
	145 Move X1, X20
	146 NotImplemented "Instruction BLR not yet implemented."
	147 Move TEMP, X0
	148 And TEMP, TEMP, 1
	149 Compare TEMP, 1
	150 JumpIfNotEqual {131}
	151 Compare X20, 0
	152 JumpIfEqual {193}
	153 Move X8, [X20]
	154 Move X1, [X24]
	155 NotImplemented "Instruction LDRH not yet implemented."
	156 Compare X9, 0
	157 JumpIfEqual {164}
	158 Move X10, [X8+176]
	159 Add X10, X10, 8
	160 NotImplemented "Instruction LDUR not yet implemented."
	161 NotImplemented "Instruction CMP not yet implemented."
	162 Subtract X9, X9, 1
	163 Add X10, X10, 16
	164 Move W2, 2
	165 Move X0, X20
	166 Call 0x1C5D788
	167 Move W9, [X10]
	168 Add W9, W9, 2
	169 Add X8, X8, W9
	170 Add X0, X8, 312
	171 Move X8, [X0]
	172 Move X2, [X0+8]
	173 Move X0, X20
	174 Move X1, X19
	175 NotImplemented "Instruction BLR not yet implemented."
	176 Move X1, [X22]
	177 Add X0, X31, 32
	178 Call Enumerator<Object>.Dispose, X0
	179 Move [X19+644], W31
	180 Move X20, [X31+112]
	181 Move X19, [X31+120]
	182 Move X22, [X31+96]
	183 Move X21, [X31+104]
	184 Move X24, [X31+80]
	185 Move X23, [X31+88]
	186 Move X30, [X31+64]
	187 Move X25, [X31+72]
	188 Add X31, X31, 128
	189 Return 
	190 Call 0x1C17F20
	191 Call 0x1C17F20
	192 Call 0x1C17F20
	193 Call 0x1C17F20
	194 Call 0x1C17F20
	195 Move X20, X0
	196 NotImplemented "Instruction CMP not yet implemented."
	197 Move X0, X20
	198 Call 0x3EB2AD0
	199 Move X21, [X0]
	200 Call 0x3EB2AE0
	201 Move X1, [X22]
	202 Add X0, X31, 32
	203 Call Enumerator<Object>.Dispose, X0
	204 Compare X21, 0
	205 JumpIfEqual {179}
	206 Move X21, X31
	207 Move X20, X0
	208 Move X1, [X22]
	209 Add X0, X31, 32
	210 Call Enumerator<Object>.Dispose, X0
	211 Compare X21, 0
	212 JumpIfEqual {235}
	213 Move X0, X21
	214 Call 0x1C17F18
	215 Move X20, X0
	216 NotImplemented "Instruction CMP not yet implemented."
	217 Move X0, X20
	218 Call 0x3EB2AD0
	219 Move X21, [X0]
	220 Call 0x3EB2AE0
	221 Move X1, [X22]
	222 Add X0, X31, 32
	223 Call Enumerator<Object>.Dispose, X0
	224 Compare X21, 0
	225 JumpIfEqual {116}
	226 Move X0, X21
	227 Call 0x1C17F18
	228 Move X21, X31
	229 Move X20, X0
	230 Move X1, [X22]
	231 Add X0, X31, 32
	232 Call Enumerator<Object>.Dispose, X0
	233 Compare X21, 0
	234 JumpIfNotEqual {237}
	235 Move X0, X20
	236 Call 0x1D2D690
	237 Move X0, X21
	238 Call 0x1C17F18
	239 Call 0x1991590

Method: System.Void InvokeGrabTransformersOnDrop(UnityEngine.XR.Interaction.Toolkit.Transformers.DropEventArgs args)

Disassembly:
	0x03B420A8 ADD X10, X10, 0x8
	0x03B420AC LDUR X11, [X10 - 0x8]
	0x03B420B0 CMP X11, X1
	0x03B420B4 B.EQ 0x3B420D4
	0x03B420B8 SUBS X9, X9, 0x1
	0x03B420BC ADD X10, X10, 0x10
	0x03B420C0 B.NE 0x3B420AC
	0x03B420C4 MOVZ W2, 0x4
	0x03B420C8 MOV X0, X24
	0x03B420CC BL 0x1C5C788
	0x03B420D0 B 0x3B420E4
	0x03B420D4 LDR W9, [X10]
	0x03B420D8 ADD W9, W9, 0x4
	0x03B420DC ADD X8, X8, W9, 0x4, SXTW
	0x03B420E0 ADD X0, X8, 0x138
	0x03B420E4 LDP X8, X5, [X0]
	0x03B420E8 MOV X0, X24
	0x03B420EC MOV X1, X19
	0x03B420F0 MOV W2, W23
	0x03B420F4 MOV X3, X22
	0x03B420F8 MOV X4, X21
	0x03B420FC BLR X8
	0x03B42100 B 0x3B41F94
	0x03B42104 MOV X21, X31
	0x03B42108 MOV W22, W31
	0x03B4210C MOVZ W25, 0x18
	0x03B42110 ADRP X8, 0x618000
	0x03B42114 LDR X8, [X8 + 0x720]
	0x03B42118 LDR X1, [X8]
	0x03B4211C ADD X0, X31, 0x90
	0x03B42120 BL 0x2BC434C
	0x03B42124 CBNZ X21, 0x3B42238
	0x03B42128 CBZ W22, 0x3B42138
	0x03B4212C MOV X21, X31
	0x03B42130 MOVZ W25, 0x18
	0x03B42134 B 0x3B4213C
	0x03B42138 MOV X21, X31
	0x03B4213C MOV X0, X20
	0x03B42140 MOV X1, X31
	0x03B42144 MOV X2, X31
	0x03B42148 BL 0x33C5D2C
	0x03B4214C TBZ X0, 0x0, 0x3B4215C
	0x03B42150 MOV X0, X20
	0x03B42154 MOV X1, X31
	0x03B42158 BL 0x3BFEA0C
	0x03B4215C CBNZ X21, 0x3B421E4
	0x03B42160 CMP W25, 0x18
	0x03B42164 B.EQ 0x3B4216C
	0x03B42168 CBNZ W25, 0x3B42170
	0x03B4216C STRB W31, [X19 + 0x284]
	0x03B42170 LDP X20, X19, [X31 + 0x160]
	0x03B42174 LDP X22, X21, [X31 + 0x150]
	0x03B42178 LDP X24, X23, [X31 + 0x140]
	0x03B4217C LDP X26, X25, [X31 + 0x130]
	0x03B42180 LDP X28, X27, [X31 + 0x120]
	0x03B42184 LDP X29, X30, [X31 + 0x110]
	0x03B42188 LDP D9, D8, [X31 + 0x100]
	0x03B4218C LDR V10, [X31 + 0xF0]
	0x03B42190 ADD X31, X31, 0x170
	0x03B42194 RET
	0x03B42198 STR X20, [X31 + 0xF8]
	0x03B4219C BL 0x1C16F20
	0x03B421A0 BL 0x1C16F20
	0x03B421A4 BL 0x1C16F20
	0x03B421A8 BL 0x1C16F20
	0x03B421AC STR X20, [X31 + 0xF8]
	0x03B421B0 BL 0x1C16F20
	0x03B421B4 STR X20, [X31 + 0xF8]
	0x03B421B8 BL 0x1C16F20
	0x03B421BC BL 0x1C16F20
	0x03B421C0 BL 0x1C16F20
	0x03B421C4 BL 0x1C16F20
	0x03B421C8 STR X20, [X31 + 0xF8]
	0x03B421CC BL 0x1C16F20
	0x03B421D0 BL 0x1C16F20
	0x03B421D4 STR X20, [X31 + 0xF8]
	0x03B421D8 BL 0x1C16F20
	0x03B421DC STR X20, [X31 + 0xF8]
	0x03B421E0 BL 0x1C16F20
	0x03B421E4 MOV X0, X21
	0x03B421E8 BL 0x1C16F18
	0x03B421EC STR X20, [X31 + 0xF8]
	0x03B421F0 BL 0x1C16F20
	0x03B421F4 STR X20, [X31 + 0xF8]
	0x03B421F8 BL 0x1C16F20
	0x03B421FC STR X20, [X31 + 0xF8]
	0x03B42200 BL 0x1C16F20
	0x03B42204 STR X20, [X31 + 0xF8]
	0x03B42208 BL 0x1C16F20
	0x03B4220C STR X20, [X31 + 0xF8]
	0x03B42210 BL 0x1C16F20
	0x03B42214 STR X20, [X31 + 0xF8]
	0x03B42218 BL 0x1C16F20
	0x03B4221C MOV X0, X24
	0x03B42220 BL 0x1C16F18
	0x03B42224 BL 0x1C16F20
	0x03B42228 STR X20, [X31 + 0xF8]
	0x03B4222C BL 0x1C16F20
	0x03B42230 STR X20, [X31 + 0xF8]
	0x03B42234 BL 0x1C16F20
	0x03B42238 MOV X0, X21
	0x03B4223C BL 0x1C16F18
	0x03B42240 BL 0x1C16F20
	0x03B42244 BL 0x1C16F20
	0x03B42248 MOV X0, X24
	0x03B4224C BL 0x1C16F18
	0x03B42250 BL 0x1C16F20
	0x03B42254 BL 0x1C16F20
	0x03B42258 MOV X0, X26
	0x03B4225C BL 0x1C16F18
	0x03B42260 MOV X0, X26
	0x03B42264 BL 0x1C16F18
	0x03B42268 STR X20, [X31 + 0xF8]
	0x03B4226C BL 0x1C16F20
	0x03B42270 STR X20, [X31 + 0xF8]
	0x03B42274 BL 0x1C16F20
	0x03B42278 MOV X0, X24
	0x03B4227C BL 0x1C16F18
	0x03B42280 BL 0x1C16F20
	0x03B42284 MOV X0, X26
	0x03B42288 BL 0x1C16F18
	0x03B4228C B 0x3B42314
	0x03B42290 B 0x3B42310
	0x03B42294 B 0x3B42314
	0x03B42298 B 0x3B42504
	0x03B4229C B 0x3B42310
	0x03B422A0 B 0x3B42314
	0x03B422A4 B 0x3B42314
	0x03B422A8 B 0x3B42314
	0x03B422AC B 0x3B42314
	0x03B422B0 B 0x3B42314
	0x03B422B4 B 0x3B42314
	0x03B422B8 B 0x3B42310
	0x03B422BC B 0x3B42314
	0x03B422C0 B 0x3B42314
	0x03B422C4 B 0x3B42314
	0x03B422C8 B 0x3B42310
	0x03B422CC B 0x3B42310
	0x03B422D0 B 0x3B42314
	0x03B422D4 B 0x3B42314
	0x03B422D8 B 0x3B42310
	0x03B422DC B 0x3B42314
	0x03B422E0 B 0x3B42314
	0x03B422E4 B 0x3B42310
	0x03B422E8 B 0x3B42314
	0x03B422EC B 0x3B42314
	0x03B422F0 B 0x3B42314
	0x03B422F4 B 0x3B42310
	0x03B422F8 B 0x3B42310
	0x03B422FC B 0x3B42310
	0x03B42300 B 0x3B42314
	0x03B42304 B 0x3B42314
	0x03B42308 B 0x3B42314
	0x03B4230C B 0x3B42314
	0x03B42310 STR X20, [X31 + 0xF8]
	0x03B42314 MOV X25, X1
	0x03B42318 STR X0, [X31 + 0x8]
	0x03B4231C B 0x3B42618
	0x03B42320 B 0x3B42564
	0x03B42324 B 0x3B42568
	0x03B42328 B 0x3B425CC
	0x03B4232C B 0x3B425D0
	0x03B42330 B 0x3B42564
	0x03B42334 B 0x3B42354
	0x03B42338 B 0x3B42354
	0x03B4233C B 0x3B423E4
	0x03B42340 B 0x3B425CC
	0x03B42344 B 0x3B423E8
	0x03B42348 B 0x3B42448
	0x03B4234C B 0x3B424A0
	0x03B42350 B 0x3B42504
	0x03B42354 MOV X25, X1
	0x03B42358 CMP W25, 0x1
	0x03B4235C STR X0, [X31 + 0x8]
	0x03B42360 B.NE 0x3B4237C
	0x03B42364 LDR X0, [X31 + 0x8]
	0x03B42368 BL 0x3EB1AD0
	0x03B4236C LDR X26, [X0]
	0x03B42370 BL 0x3EB1AE0
	0x03B42374 MOV W25, W31
	0x03B42378 B 0x3B419BC
	0x03B4237C MOV X26, X31
	0x03B42380 ADRP X8, 0x618000
	0x03B42384 LDR X8, [X8 + 0x720]
	0x03B42388 LDR X1, [X8]
	0x03B4238C ADD X0, X31, 0x90
	0x03B42390 BL 0x2BC434C
	0x03B42394 CBZ X26, 0x3B42618
	0x03B42398 MOV X0, X26
	0x03B4239C BL 0x1C16F18
	0x03B423A0 MOV X25, X1
	0x03B423A4 STR X0, [X31 + 0x8]
	0x03B423A8 B 0x3B42380
	0x03B423AC B 0x3B42564
	0x03B423B0 B 0x3B423E4
	0x03B423B4 B 0x3B42448
	0x03B423B8 B 0x3B424A0
	0x03B423BC B 0x3B42564
	0x03B423C0 B 0x3B42568
	0x03B423C4 B 0x3B42504
	0x03B423C8 B 0x3B425CC
	0x03B423CC B 0x3B423E4
	0x03B423D0 B 0x3B423E8
	0x03B423D4 B 0x3B42448
	0x03B423D8 B 0x3B42448
	0x03B423DC B 0x3B424A0
	0x03B423E0 B 0x3B424A0
	0x03B423E4 STR X20, [X31 + 0xF8]
	0x03B423E8 MOV X25, X1
	0x03B423EC CMP W25, 0x1
	0x03B423F0 STR X0, [X31 + 0x8]
	0x03B423F4 B.NE 0x3B42418
	0x03B423F8 LDR X0, [X31 + 0x8]
	0x03B423FC BL 0x3EB1AD0
	0x03B42400 LDR X24, [X0]
	0x03B42404 BL 0x3EB1AE0
	0x03B42408 LDR X20, [X31 + 0xF8]
	0x03B4240C MOV W25, W31
	0x03B42410 MOVZ W26, 0x1
	0x03B42414 B 0x3B41D34
	0x03B42418 MOV X24, X31
	0x03B4241C ADRP X8, 0x618000
	0x03B42420 LDR X8, [X8 + 0x720]
	0x03B42424 LDR X1, [X8]
	0x03B42428 ADD X0, X31, 0x90
	0x03B4242C BL 0x2BC434C
	0x03B42430 CBZ X24, 0x3B42618
	0x03B42434 MOV X0, X24
	0x03B42438 BL 0x1C16F18
	0x03B4243C MOV X25, X1
	0x03B42440 STR X0, [X31 + 0x8]
	0x03B42444 B 0x3B4241C

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+64], X30
	003 Move [X31+80], X26
	004 Move [X31+88], X25
	005 Move [X31+96], X24
	006 Move [X31+104], X23
	007 Move [X31+112], X22
	008 Move [X31+120], X21
	009 Move [X31+128], X20
	010 Move [X31+136], X19
	011 Move X21, 0x8A1000
	012 Move W8, [X21+2151]
	013 Move X20, X1
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {42}
	019 Move X0, 0x619000
	020 Move X0, [X0+1816]
	021 Call 0x1C17CF4
	022 Move X0, 0x619000
	023 Move X0, [X0+1824]
	024 Call 0x1C17CF4
	025 Move X0, 0x619000
	026 Move X0, [X0+1832]
	027 Call 0x1C17CF4
	028 Move X0, 0x619000
	029 Move X0, [X0+1840]
	030 Call 0x1C17CF4
	031 Move X0, 0x619000
	032 Move X0, [X0+1768]
	033 Call 0x1C17CF4
	034 Move X0, 0x619000
	035 Move X0, [X0+1848]
	036 Call 0x1C17CF4
	037 Move X0, 0x619000
	038 Move X0, [X0+1856]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+2151], W8
	042 Move [X31+32], X31
	043 Move [X31+40], X31
	044 Move [X31+48], X31
	045 Move X8, [X19+608]
	046 Move W9, 1
	047 Move [X19+644], W9
	048 Compare X8, 0
	049 JumpIfEqual {205}
	050 Move X0, [X8+16]
	051 Compare X0, 0
	052 JumpIfEqual {205}
	053 Move W8, [X0+24]
	054 Move X26, 0x619000
	055 Move X24, 0x619000
	056 Move X25, 0x619000
	057 Move X23, 0x619000
	058 Move X26, [X26+1848]
	059 Move X24, [X24+1832]
	060 Move X25, [X25+1768]
	061 Move X23, [X23+1824]
	062 NotImplemented "Instruction CMP not yet implemented."
	063 Move X1, [X26]
	064 Add X8, X31, 8
	065 Call List`1<Object>.GetEnumerator, X0
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 Move X8, [X31+24]
	068 Move [X31+2], V0
	069 Move [X31+48], X8
	070 Move X1, [X24]
	071 Add X0, X31, 32
	072 Call Enumerator<Object>.MoveNext, X0
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {120}
	077 Move X22, [X31+48]
	078 Move X1, [X25]
	079 Move X0, X22
	080 Call 0x1C17E00
	081 Move X21, X0
	082 Compare X0, 0
	083 JumpIfEqual {70}
	084 Move X0, [X19+608]
	085 Compare X0, 0
	086 JumpIfEqual {203}
	087 Move X8, [X0]
	088 Move X9, [X8+392]
	089 Move X2, [X8+400]
	090 Move X1, X22
	091 NotImplemented "Instruction BLR not yet implemented."
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {70}
	096 Move X8, [X21]
	097 Move X1, [X25]
	098 NotImplemented "Instruction LDRH not yet implemented."
	099 Compare X9, 0
	100 JumpIfEqual {107}
	101 Move X10, [X8+176]
	102 Add X10, X10, 8
	103 NotImplemented "Instruction LDUR not yet implemented."
	104 NotImplemented "Instruction CMP not yet implemented."
	105 Subtract X9, X9, 1
	106 Add X10, X10, 16
	107 Move W2, 1
	108 Move X0, X21
	109 Call 0x1C5D788
	110 Move W9, [X10]
	111 Add W9, W9, 1
	112 Add X8, X8, W9
	113 Add X0, X8, 312
	114 Move X8, [X0]
	115 Move X3, [X0+8]
	116 Move X0, X21
	117 Move X1, X19
	118 Move X2, X20
	119 NotImplemented "Instruction BLR not yet implemented."
	120 Move X1, [X23]
	121 Add X0, X31, 32
	122 Call Enumerator<Object>.Dispose, X0
	123 Move X8, [X19+616]
	124 Compare X8, 0
	125 JumpIfEqual {205}
	126 Move X0, [X8+16]
	127 Compare X0, 0
	128 JumpIfEqual {205}
	129 Move W8, [X0+24]
	130 NotImplemented "Instruction CMP not yet implemented."
	131 Move X1, [X26]
	132 Add X8, X31, 8
	133 Call List`1<Object>.GetEnumerator, X0
	134 NotImplemented "Instruction LDUR not yet implemented."
	135 Move X8, [X31+24]
	136 Move [X31+2], V0
	137 Move [X31+48], X8
	138 Move X1, [X24]
	139 Add X0, X31, 32
	140 Call Enumerator<Object>.MoveNext, X0
	141 Move TEMP, X0
	142 And TEMP, TEMP, 1
	143 Compare TEMP, 1
	144 JumpIfNotEqual {188}
	145 Move X22, [X31+48]
	146 Move X1, [X25]
	147 Move X0, X22
	148 Call 0x1C17E00
	149 Move X21, X0
	150 Compare X0, 0
	151 JumpIfEqual {138}
	152 Move X0, [X19+616]
	153 Compare X0, 0
	154 JumpIfEqual {204}
	155 Move X8, [X0]
	156 Move X9, [X8+392]
	157 Move X2, [X8+400]
	158 Move X1, X22
	159 NotImplemented "Instruction BLR not yet implemented."
	160 Move TEMP, X0
	161 And TEMP, TEMP, 1
	162 Compare TEMP, 1
	163 JumpIfNotEqual {138}
	164 Move X8, [X21]
	165 Move X1, [X25]
	166 NotImplemented "Instruction LDRH not yet implemented."
	167 Compare X9, 0
	168 JumpIfEqual {175}
	169 Move X10, [X8+176]
	170 Add X10, X10, 8
	171 NotImplemented "Instruction LDUR not yet implemented."
	172 NotImplemented "Instruction CMP not yet implemented."
	173 Subtract X9, X9, 1
	174 Add X10, X10, 16
	175 Move W2, 1
	176 Move X0, X21
	177 Call 0x1C5D788
	178 Move W9, [X10]
	179 Add W9, W9, 1
	180 Add X8, X8, W9
	181 Add X0, X8, 312
	182 Move X8, [X0]
	183 Move X3, [X0+8]
	184 Move X0, X21
	185 Move X1, X19
	186 Move X2, X20
	187 NotImplemented "Instruction BLR not yet implemented."
	188 Move X1, [X23]
	189 Add X0, X31, 32
	190 Call Enumerator<Object>.Dispose, X0
	191 Move [X19+644], W31
	192 Move X20, [X31+128]
	193 Move X19, [X31+136]
	194 Move X22, [X31+112]
	195 Move X21, [X31+120]
	196 Move X24, [X31+96]
	197 Move X23, [X31+104]
	198 Move X26, [X31+80]
	199 Move X25, [X31+88]
	200 Move X30, [X31+64]
	201 Add X31, X31, 144
	202 Return 
	203 Call 0x1C17F20
	204 Call 0x1C17F20
	205 Call 0x1C17F20
	206 Move X21, X0
	207 NotImplemented "Instruction CMP not yet implemented."
	208 Move X0, X21
	209 Call 0x3EB2AD0
	210 Move X20, [X0]
	211 Call 0x3EB2AE0
	212 Move X1, [X23]
	213 Add X0, X31, 32
	214 Call Enumerator<Object>.Dispose, X0
	215 Compare X20, 0
	216 JumpIfEqual {191}
	217 Move X0, X20
	218 Call 0x1C17F18
	219 Move X20, X31
	220 Move X21, X0
	221 Move X1, [X23]
	222 Add X0, X31, 32
	223 Call Enumerator<Object>.Dispose, X0
	224 Compare X20, 0
	225 JumpIfEqual {248}
	226 Move X0, X20
	227 Call 0x1C17F18
	228 Move X21, X0
	229 NotImplemented "Instruction CMP not yet implemented."
	230 Move X0, X21
	231 Call 0x3EB2AD0
	232 Move X22, [X0]
	233 Call 0x3EB2AE0
	234 Move X1, [X23]
	235 Add X0, X31, 32
	236 Call Enumerator<Object>.Dispose, X0
	237 Compare X22, 0
	238 JumpIfEqual {123}
	239 Move X0, X22
	240 Call 0x1C17F18
	241 Move X22, X31
	242 Move X21, X0
	243 Move X1, [X23]
	244 Add X0, X31, 32
	245 Call Enumerator<Object>.Dispose, X0
	246 Compare X22, 0
	247 JumpIfNotEqual {250}
	248 Move X0, X21
	249 Call 0x1D2D690
	250 Move X0, X22
	251 Call 0x1C17F18
	252 Call 0x1991590

Method: System.Void InvokeGrabTransformersProcess(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 localScale)

Disassembly:
	0x03B42448 MOV X25, X1
	0x03B4244C CMP W25, 0x1
	0x03B42450 STR X0, [X31 + 0x8]
	0x03B42454 B.NE 0x3B42470
	0x03B42458 LDR X0, [X31 + 0x8]
	0x03B4245C BL 0x3EB1AD0
	0x03B42460 LDR X26, [X0]
	0x03B42464 BL 0x3EB1AE0
	0x03B42468 MOV W25, W31
	0x03B4246C B 0x3B41954
	0x03B42470 MOV X26, X31
	0x03B42474 ADRP X8, 0x618000
	0x03B42478 LDR X8, [X8 + 0x720]
	0x03B4247C LDR X1, [X8]
	0x03B42480 ADD X0, X31, 0x90
	0x03B42484 BL 0x2BC434C
	0x03B42488 CBZ X26, 0x3B42618
	0x03B4248C MOV X0, X26
	0x03B42490 BL 0x1C16F18
	0x03B42494 MOV X25, X1
	0x03B42498 STR X0, [X31 + 0x8]
	0x03B4249C B 0x3B42474
	0x03B424A0 MOV X25, X1
	0x03B424A4 CMP W25, 0x1
	0x03B424A8 STR X0, [X31 + 0x8]
	0x03B424AC B.NE 0x3B424C4
	0x03B424B0 LDR X0, [X31 + 0x8]
	0x03B424B4 BL 0x3EB1AD0
	0x03B424B8 LDR X26, [X0]
	0x03B424BC BL 0x3EB1AE0
	0x03B424C0 B 0x3B417F8
	0x03B424C4 MOV X26, X31
	0x03B424C8 ADRP X8, 0x618000
	0x03B424CC LDR X8, [X8 + 0x720]
	0x03B424D0 LDR X1, [X8]
	0x03B424D4 ADD X0, X31, 0x90
	0x03B424D8 BL 0x2BC434C
	0x03B424DC CBZ X26, 0x3B42618
	0x03B424E0 MOV X0, X26
	0x03B424E4 BL 0x1C16F18
	0x03B424E8 MOV X25, X1
	0x03B424EC STR X0, [X31 + 0x8]
	0x03B424F0 B 0x3B424C8
	0x03B424F4 B 0x3B42504
	0x03B424F8 B 0x3B42504
	0x03B424FC B 0x3B425CC
	0x03B42500 B 0x3B425D0
	0x03B42504 MOV X25, X1
	0x03B42508 CMP W25, 0x1
	0x03B4250C STR X0, [X31 + 0x8]
	0x03B42510 B.NE 0x3B42530
	0x03B42514 LDR X0, [X31 + 0x8]
	0x03B42518 BL 0x3EB1AD0
	0x03B4251C LDR X24, [X0]
	0x03B42520 BL 0x3EB1AE0
	0x03B42524 MOV W25, W31
	0x03B42528 MOV W28, W20
	0x03B4252C B 0x3B41BB0
	0x03B42530 MOV X24, X31
	0x03B42534 ADRP X8, 0x618000
	0x03B42538 LDR X8, [X8 + 0x720]
	0x03B4253C LDR X1, [X8]
	0x03B42540 ADD X0, X31, 0x90
	0x03B42544 BL 0x2BC434C
	0x03B42548 CBZ X24, 0x3B42618
	0x03B4254C MOV X0, X24
	0x03B42550 BL 0x1C16F18
	0x03B42554 MOV X25, X1
	0x03B42558 STR X0, [X31 + 0x8]
	0x03B4255C B 0x3B42534
	0x03B42560 B 0x3B42564
	0x03B42564 STR X20, [X31 + 0xF8]
	0x03B42568 MOV X25, X1
	0x03B4256C CMP W25, 0x1
	0x03B42570 STR X0, [X31 + 0x8]
	0x03B42574 B.NE 0x3B42598
	0x03B42578 LDR X0, [X31 + 0x8]
	0x03B4257C BL 0x3EB1AD0
	0x03B42580 LDR X21, [X0]
	0x03B42584 BL 0x3EB1AE0
	0x03B42588 LDR X20, [X31 + 0xF8]
	0x03B4258C MOV W25, W31
	0x03B42590 MOVZ W22, 0x1
	0x03B42594 B 0x3B42110
	0x03B42598 MOV X21, X31
	0x03B4259C ADRP X8, 0x618000
	0x03B425A0 LDR X8, [X8 + 0x720]
	0x03B425A4 LDR X1, [X8]
	0x03B425A8 ADD X0, X31, 0x90
	0x03B425AC BL 0x2BC434C
	0x03B425B0 CBZ X21, 0x3B42618
	0x03B425B4 MOV X0, X21
	0x03B425B8 BL 0x1C16F18
	0x03B425BC MOV X25, X1
	0x03B425C0 STR X0, [X31 + 0x8]
	0x03B425C4 B 0x3B4259C
	0x03B425C8 B 0x3B425CC
	0x03B425CC STR X20, [X31 + 0xF8]
	0x03B425D0 MOV X25, X1
	0x03B425D4 CMP W25, 0x1
	0x03B425D8 STR X0, [X31 + 0x8]
	0x03B425DC B.NE 0x3B425FC
	0x03B425E0 LDR X0, [X31 + 0x8]
	0x03B425E4 BL 0x3EB1AD0
	0x03B425E8 LDR X24, [X0]
	0x03B425EC BL 0x3EB1AE0
	0x03B425F0 LDR X20, [X31 + 0xF8]
	0x03B425F4 MOV W25, W31
	0x03B425F8 B 0x3B41F1C
	0x03B425FC MOV X24, X31
	0x03B42600 ADRP X8, 0x618000
	0x03B42604 LDR X8, [X8 + 0x720]
	0x03B42608 LDR X1, [X8]
	0x03B4260C ADD X0, X31, 0x90
	0x03B42610 BL 0x2BC434C
	0x03B42614 CBNZ X24, 0x3B42644
	0x03B42618 CMP W25, 0x1
	0x03B4261C B.NE 0x3B4263C
	0x03B42620 LDR X0, [X31 + 0x8]
	0x03B42624 BL 0x3EB1AD0
	0x03B42628 LDR X21, [X0]
	0x03B4262C BL 0x3EB1AE0
	0x03B42630 LDR X20, [X31 + 0xF8]
	0x03B42634 MOV W25, W31
	0x03B42638 B 0x3B4213C
	0x03B4263C MOV X21, X31
	0x03B42640 B 0x3B4265C
	0x03B42644 MOV X0, X24
	0x03B42648 BL 0x1C16F18
	0x03B4264C MOV X25, X1
	0x03B42650 STR X0, [X31 + 0x8]
	0x03B42654 B 0x3B42600
	0x03B42658 STR X0, [X31 + 0x8]
	0x03B4265C LDR X0, [X31 + 0xF8]
	0x03B42660 MOV X1, X31
	0x03B42664 MOV X2, X31
	0x03B42668 BL 0x33C5D2C
	0x03B4266C TBZ X0, 0x0, 0x3B4267C
	0x03B42670 LDR X0, [X31 + 0xF8]
	0x03B42674 MOV X1, X31
	0x03B42678 BL 0x3BFEA0C
	0x03B4267C CBNZ X21, 0x3B42688
	0x03B42680 LDR X0, [X31 + 0x8]
	0x03B42684 BL 0x1D2C690
	0x03B42688 MOV X0, X21
	0x03B4268C BL 0x1C16F18
	0x03B42690 BL 0x1990590
	0x03B42694 SUB X31, X31, 0x80
	0x03B42698 STR X30, [X31 + 0x40]
	0x03B4269C STP X24, X23, [X31 + 0x50]
	0x03B426A0 STP X22, X21, [X31 + 0x60]
	0x03B426A4 STP X20, X19, [X31 + 0x70]
	0x03B426A8 ADRP X20, 0x8A0000
	0x03B426AC LDRB W8, [X20 + 0x869]
	0x03B426B0 MOV X19, X0
	0x03B426B4 TBNZ X8, 0x0, 0x3B42714
	0x03B426B8 ADRP X0, 0x618000
	0x03B426BC LDR X0, [X0 + 0x718]
	0x03B426C0 BL 0x1C16CF4
	0x03B426C4 ADRP X0, 0x618000
	0x03B426C8 LDR X0, [X0 + 0x720]
	0x03B426CC BL 0x1C16CF4
	0x03B426D0 ADRP X0, 0x618000
	0x03B426D4 LDR X0, [X0 + 0x728]
	0x03B426D8 BL 0x1C16CF4
	0x03B426DC ADRP X0, 0x618000
	0x03B426E0 LDR X0, [X0 + 0x730]
	0x03B426E4 BL 0x1C16CF4
	0x03B426E8 ADRP X0, 0x618000
	0x03B426EC LDR X0, [X0 + 0x6F0]
	0x03B426F0 BL 0x1C16CF4
	0x03B426F4 ADRP X0, 0x618000
	0x03B426F8 LDR X0, [X0 + 0x738]
	0x03B426FC BL 0x1C16CF4
	0x03B42700 ADRP X0, 0x618000
	0x03B42704 LDR X0, [X0 + 0x740]
	0x03B42708 BL 0x1C16CF4
	0x03B4270C MOVZ W8, 0x1
	0x03B42710 STRB W8, [X20 + 0x869]
	0x03B42714 STP X31, X31, [X31 + 0x20]
	0x03B42718 STR X31, [X31 + 0x30]
	0x03B4271C LDR X8, [X19 + 0x260]
	0x03B42720 CBZ X8, 0x3B42854
	0x03B42724 LDR X0, [X8 + 0x10]
	0x03B42728 CBZ X0, 0x3B42854
	0x03B4272C LDR W8, [X0 + 0x18]
	0x03B42730 CMP W8, 0x1
	0x03B42734 B.LT 0x3B42830
	0x03B42738 ADRP X8, 0x618000
	0x03B4273C LDR X8, [X8 + 0x738]
	0x03B42740 ADRP X23, 0x618000
	0x03B42744 ADRP X24, 0x618000
	0x03B42748 ADRP X22, 0x618000
	0x03B4274C LDR X1, [X8]
	0x03B42750 LDR X23, [X23 + 0x728]
	0x03B42754 LDR X24, [X24 + 0x6F0]
	0x03B42758 LDR X22, [X22 + 0x720]
	0x03B4275C ADD X8, X31, 0x8
	0x03B42760 BL 0x301CB58
	0x03B42764 LDUR V0, [X31 + 0x8]
	0x03B42768 LDR X8, [X31 + 0x18]
	0x03B4276C STR V0, [X31 + 0x2]
	0x03B42770 STR X8, [X31 + 0x30]
	0x03B42774 LDR X1, [X23]
	0x03B42778 ADD X0, X31, 0x20
	0x03B4277C BL 0x2BC4350
	0x03B42780 MOV W20, W0
	0x03B42784 TBZ X0, 0x0, 0x3B42810
	0x03B42788 LDR X0, [X19 + 0x260]
	0x03B4278C CBZ X0, 0x3B4284C
	0x03B42790 LDR X8, [X0]
	0x03B42794 LDR X21, [X31 + 0x30]
	0x03B42798 LDP X9, X2, [X8 + 0x188]
	0x03B4279C MOV X1, X21
	0x03B427A0 BLR X9
	0x03B427A4 TBZ X0, 0x0, 0x3B42774
	0x03B427A8 CBZ X21, 0x3B42850
	0x03B427AC LDR X8, [X21]
	0x03B427B0 LDR X1, [X24]
	0x03B427B4 LDRH W9, [X8 + 0x12E]
	0x03B427B8 CBZ X9, 0x3B427DC
	0x03B427BC LDR X10, [X8 + 0xB0]
	0x03B427C0 ADD X10, X10, 0x8
	0x03B427C4 LDUR X11, [X10 - 0x8]
	0x03B427C8 CMP X11, X1
	0x03B427CC B.EQ 0x3B427EC
	0x03B427D0 SUBS X9, X9, 0x1
	0x03B427D4 ADD X10, X10, 0x10
	0x03B427D8 B.NE 0x3B427C4
	0x03B427DC MOV X0, X21
	0x03B427E0 MOV W2, W31
	0x03B427E4 BL 0x1C5C788
	0x03B427E8 B 0x3B427F8
	0x03B427EC LDRSW X9, [X10]
	0x03B427F0 ADD X8, X8, X9, 0x4, LSL
	0x03B427F4 ADD X0, X8, 0x138
	0x03B427F8 LDP X8, X1, [X0]
	0x03B427FC MOV X0, X21
	0x03B42800 BLR X8
	0x03B42804 TBZ X0, 0x0, 0x3B42774
	0x03B42808 MOVZ W19, 0x5
	0x03B4280C B 0x3B42814
	0x03B42810 MOVZ W19, 0x2
	0x03B42814 LDR X1, [X22]
	0x03B42818 ADD X0, X31, 0x20
	0x03B4281C BL 0x2BC434C
	0x03B42820 CMP W19, 0x5
	0x03B42824 CSET W8, EQ
	0x03B42828 AND W0, W20, W8, 0x0
	0x03B4282C B 0x3B42834
	0x03B42830 MOV W0, W31
	0x03B42834 LDP X20, X19, [X31 + 0x70]
	0x03B42838 LDP X22, X21, [X31 + 0x60]
	0x03B4283C LDP X24, X23, [X31 + 0x50]
	0x03B42840 LDR X30, [X31 + 0x40]
	0x03B42844 ADD X31, X31, 0x80
	0x03B42848 RET
	0x03B4284C BL 0x1C16F20
	0x03B42850 BL 0x1C16F20
	0x03B42854 BL 0x1C16F20
	0x03B42858 B 0x3B42868
	0x03B4285C B 0x3B42868
	0x03B42860 B 0x3B42868
	0x03B42864 B 0x3B42868
	0x03B42868 MOV X19, X0
	0x03B4286C CMP W1, 0x1
	0x03B42870 B.NE 0x3B4289C
	0x03B42874 MOV X0, X19
	0x03B42878 BL 0x3EB1AD0
	0x03B4287C LDR X20, [X0]
	0x03B42880 BL 0x3EB1AE0
	0x03B42884 LDR X1, [X22]
	0x03B42888 ADD X0, X31, 0x20
	0x03B4288C BL 0x2BC434C
	0x03B42890 CBNZ X20, 0x3B428A4
	0x03B42894 MOV W19, W31
	0x03B42898 B 0x3B42820
	0x03B4289C MOV X20, X31
	0x03B428A0 B 0x3B428B0
	0x03B428A4 MOV X0, X20
	0x03B428A8 BL 0x1C16F18
	0x03B428AC MOV X19, X0
	0x03B428B0 LDR X1, [X22]
	0x03B428B4 ADD X0, X31, 0x20
	0x03B428B8 BL 0x2BC434C
	0x03B428BC CBNZ X20, 0x3B428C8
	0x03B428C0 MOV X0, X19
	0x03B428C4 BL 0x1D2C690
	0x03B428C8 MOV X0, X20
	0x03B428CC BL 0x1C16F18
	0x03B428D0 BL 0x1990590
	0x03B428D4 STR X30, [X31 - 0x20]!
	0x03B428D8 STP X20, X19, [X31 + 0x10]
	0x03B428DC ADRP X20, 0x8A0000
	0x03B428E0 LDRB W8, [X20 + 0x86D]
	0x03B428E4 MOV X19, X0
	0x03B428E8 TBNZ X8, 0x0, 0x3B42900
	0x03B428EC ADRP X0, 0x618000
	0x03B428F0 LDR X0, [X0 + 0x5F8]
	0x03B428F4 BL 0x1C16CF4
	0x03B428F8 MOVZ W8, 0x1
	0x03B428FC STRB W8, [X20 + 0x86D]
	0x03B42900 LDR X0, [X19 + 0x260]
	0x03B42904 CBZ X0, 0x3B42948
	0x03B42908 ADRP X8, 0x618000
	0x03B4290C LDR X8, [X8 + 0x5F8]
	0x03B42910 LDR X1, [X8]
	0x03B42914 BL 0x28B9738
	0x03B42918 CBZ W0, 0x3B42928
	0x03B4291C LDP X20, X19, [X31 + 0x10]
	0x03B42920 LDR X30, [X31], #0x20
	0x03B42924 RET
	0x03B42928 MOV X0, X19
	0x03B4292C BL 0x3B4294C
	0x03B42930 LDR X2, [X19 + 0x260]
	0x03B42934 MOV X1, X0
	0x03B42938 MOV X0, X19
	0x03B4293C LDP X20, X19, [X31 + 0x10]
	0x03B42940 LDR X30, [X31], #0x20
	0x03B42944 B 0x3B403C8
	0x03B42948 BL 0x1C16F20
	0x03B4294C STP X30, X21, [X31 - 0x20]!
	0x03B42950 STP X20, X19, [X31 + 0x10]
	0x03B42954 ADRP X20, 0x8A0000
	0x03B42958 ADRP X21, 0x618000
	0x03B4295C LDRB W8, [X20 + 0x86F]
	0x03B42960 LDR X21, [X21 + 0x750]
	0x03B42964 MOV X19, X0
	0x03B42968 TBNZ X8, 0x0, 0x3B42980
	0x03B4296C ADRP X0, 0x618000
	0x03B42970 LDR X0, [X0 + 0x750]
	0x03B42974 BL 0x1C16CF4
	0x03B42978 MOVZ W8, 0x1
	0x03B4297C STRB W8, [X20 + 0x86F]
	0x03B42980 LDR X1, [X21]
	0x03B42984 MOV X0, X19
	0x03B42988 LDP X20, X19, [X31 + 0x10]
	0x03B4298C LDP X30, X21, [X31], #0x20
	0x03B42990 B 0x22AD2B4
	0x03B42994 STR X30, [X31 - 0x20]!
	0x03B42998 STP X20, X19, [X31 + 0x10]
	0x03B4299C ADRP X20, 0x8A0000
	0x03B429A0 LDRB W8, [X20 + 0x86E]
	0x03B429A4 MOV X19, X0
	0x03B429A8 TBNZ X8, 0x0, 0x3B429C0
	0x03B429AC ADRP X0, 0x618000
	0x03B429B0 LDR X0, [X0 + 0x5F8]
	0x03B429B4 BL 0x1C16CF4
	0x03B429B8 MOVZ W8, 0x1
	0x03B429BC STRB W8, [X20 + 0x86E]
	0x03B429C0 LDR X0, [X19 + 0x268]
	0x03B429C4 CBZ X0, 0x3B42A08
	0x03B429C8 ADRP X8, 0x618000
	0x03B429CC LDR X8, [X8 + 0x5F8]
	0x03B429D0 LDR X1, [X8]
	0x03B429D4 BL 0x28B9738
	0x03B429D8 CBZ W0, 0x3B429E8
	0x03B429DC LDP X20, X19, [X31 + 0x10]
	0x03B429E0 LDR X30, [X31], #0x20
	0x03B429E4 RET
	0x03B429E8 MOV X0, X19
	0x03B429EC BL 0x3B4294C
	0x03B429F0 LDR X2, [X19 + 0x268]
	0x03B429F4 MOV X1, X0
	0x03B429F8 MOV X0, X19
	0x03B429FC LDP X20, X19, [X31 + 0x10]
	0x03B42A00 LDR X30, [X31], #0x20
	0x03B42A04 B 0x3B403C8
	0x03B42A08 BL 0x1C16F20
	0x03B42A0C STP X30, X21, [X31 - 0x20]!
	0x03B42A10 STP X20, X19, [X31 + 0x10]
	0x03B42A14 MOV X19, X2
	0x03B42A18 MOV X20, X1
	0x03B42A1C MOV X21, X0
	0x03B42A20 BL 0x3B43E58
	0x03B42A24 LDR X8, [X21]
	0x03B42A28 MOV X1, X20
	0x03B42A2C MOV X2, X19
	0x03B42A30 LDP X20, X19, [X31 + 0x10]
	0x03B42A34 LDR X4, [X8 + 0x8A8]
	0x03B42A38 LDR X3, [X8 + 0x8B0]
	0x03B42A3C MOV X0, X21
	0x03B42A40 LDP X30, X21, [X31], #0x20
	0x03B42A44 BR X4
	0x03B42A48 SUB X31, X31, 0x60
	0x03B42A4C STR D12, [X31 + 0x10]
	0x03B42A50 STP D11, D10, [X31 + 0x18]
	0x03B42A54 STP D9, D8, [X31 + 0x28]
	0x03B42A58 STR X30, [X31 + 0x38]
	0x03B42A5C STP X22, X21, [X31 + 0x40]
	0x03B42A60 STP X20, X19, [X31 + 0x50]
	0x03B42A64 ADRP X8, 0xFFFFFFFFFCFA8000
	0x03B42A68 LDR V1, [X8 + 0x410]
	0x03B42A6C FCMP S0, S1
	0x03B42A70 B.MI 0x3B42CD0
	0x03B42A74 LDRB W8, [X0 + 0x2F8]
	0x03B42A78 MOV X19, X1
	0x03B42A7C MOV X20, X0
	0x03B42A80 CBZ W8, 0x3B42A8C
	0x03B42A84 STRB W31, [X20 + 0x2F8]
	0x03B42A88 B 0x3B42C60
	0x03B42A8C LDR X8, [X20 + 0x2E8]
	0x03B42A90 CBZ X8, 0x3B42CF0
	0x03B42A94 LDRSW X9, [X20 + 0x2DC]
	0x03B42A98 LDR W10, [X8 + 0x18]
	0x03B42A9C CMP W9, W10
	0x03B42AA0 B.CS 0x3B42CF4
	0x03B42AA4 ADD X10, X20, 0x2FC
	0x03B42AA8 LDR V4, [X19]
	0x03B42AAC LDR V1, [X19 + 0x8]
	0x03B42AB0 LDR V2, [X10]
	0x03B42AB4 LDR V3, [X10 + 0x8]
	0x03B42AB8 UNIMPLEMENTED
	0x03B42ABC MOVZ W10, 0xC
	0x03B42AC0 FSUB V2.2S, V4.2S, V2.2S
	0x03B42AC4 FSUB S1, S1, S3
	0x03B42AC8 MADD X8, X9, X10, X8
	0x00000000 INVALID
	0x03B42AD0 FDIV S1, S1, S0
	0x03B42AD4 STR D2, [X8 + 0x20]
	0x03B42AD8 STR S1, [X8 + 0x28]
	0x03B42ADC STR V0, [X31]
	0x03B42AE0 LDR V0, [X20 + 0x308]
	0x03B42AE4 LDR V1, [X20 + 0x30C]
	0x03B42AE8 LDR V2, [X20 + 0x310]
	0x03B42AEC LDR V3, [X20 + 0x314]
	0x03B42AF0 LDP S9, S10, [X19 + 0xC]
	0x03B42AF4 LDP S11, S12, [X19 + 0x14]
	0x03B42AF8 MOV X0, X31
	0x03B42AFC BL 0x3C2A260
	0x03B42B00 FMUL S4, S12, S0
	0x03B42B04 FMUL S5, S9, S3
	0x03B42B08 FMUL S7, S11, S1
	0x03B42B0C FMUL S16, S12, S1
	0x03B42B10 FMUL S17, S10, S3
	0x03B42B14 FMUL S18, S11, S0
	0x03B42B18 FMUL S20, S9, S1
	0x03B42B1C FMUL S21, S9, S0
	0x03B42B20 FMUL S22, S10, S0
	0x03B42B24 FMUL S0, S10, S1
	0x03B42B28 FMUL S1, S12, S2
	0x03B42B2C FMUL S23, S12, S3
	0x03B42B30 FMUL S3, S11, S3
	0x03B42B34 FMUL S6, S10, S2
	0x03B42B38 FMUL S19, S9, S2
	0x03B42B3C FMUL S24, S11, S2
	0x03B42B40 FADD S2, S4, S5
	0x03B42B44 FADD S4, S16, S17
	0x03B42B48 FADD S1, S1, S3
	0x03B42B4C FSUB S3, S23, S21
	0x03B42B50 FADD S2, S6, S2
	0x03B42B54 FADD S4, S18, S4
	0x03B42B58 FADD S5, S20, S1
	0x03B42B5C FSUB S3, S3, S0
	0x03B42B60 FSUB S0, S2, S7
	0x03B42B64 FSUB S1, S4, S19
	0x03B42B68 FSUB S2, S5, S22
	0x03B42B6C FSUB S3, S3, S24
	0x03B42B70 MOV X0, X31
	0x03B42B74 BL 0x3C2A60C
	0x03B42B78 ADRP X8, 0xFFFFFFFFFCFA8000
	0x03B42B7C LDR V3, [X8 + 0x448]
	0x03B42B80 MOV X0, X31
	0x03B42B84 FMUL S0, S0, S3
	0x03B42B88 FMUL S1, S1, S3
	0x03B42B8C FMUL S2, S2, S3
	0x03B42B90 BL 0x3C2AB94
	0x03B42B94 MOVZ W12, 0x43B40000
	0x03B42B98 FMOV S3, W12
	0x03B42B9C MOVZ W9, 0xC3B40000
	0x03B42BA0 FDIV S4, S2, S3
	0x03B42BA4 FMOV S5, W9
	0x03B42BA8 FRINTM S4, S4
	0x03B42BAC FMUL S4, S4, S5
	0x03B42BB0 FADD S2, S2, S4
	0x03B42BB4 MOVZ W8, 0x43340000
	0x03B42BB8 FMOV S4, W31
	0x03B42BBC LDR X10, [X20 + 0x2F0]
	0x03B42BC0 FMIN S3, S2, S3
	0x03B42BC4 FCMP S2, 0x0
	0x03B42BC8 FMOV S2, W8
	0x03B42BCC FCSEL S3, S3, S4, PL
	0x03B42BD0 FADD S4, S3, S5
	0x03B42BD4 FCMP S3, S2
	0x03B42BD8 FCSEL S2, S4, S3, GT
	0x03B42BDC CBZ X10, 0x3B42CF0
	0x03B42BE0 LDRSW X11, [X20 + 0x2DC]
	0x03B42BE4 LDR W13, [X10 + 0x18]
	0x03B42BE8 CMP W11, W13
	0x03B42BEC B.CS 0x3B42CF4
	0x03B42BF0 LDR V3, [X31]
	0x03B42BF4 MOV V0.S[1], V1.S[0]
	0x03B42BF8 UNIMPLEMENTED
	0x03B42BFC ADRP X12, 0xFFFFFFFFFCFA8000
	0x03B42C00 FDIV S2, S2, S3
	0x00000000 INVALID
	0x03B42C08 LDR V4, [X12 + 0x104]
	0x03B42C0C UNIMPLEMENTED
	0x00000000 INVALID
	0x03B42C14 FSUB V0.2S, V0.2S, V3.2S
	0x03B42C18 FMIN V1.2S, V0.2S, V1.2S
	0x03B42C1C UNIMPLEMENTED
	0x03B42C20 UNIMPLEMENTED
	0x03B42C24 FMUL S2, S2, S4
	0x03B42C28 UNIMPLEMENTED
	0x03B42C2C BIC V0.8B, V1.8B, V0.8B
	0x03B42C30 MOVZ W8, 0xFA35
	0x00000000 INVALID
	0x03B42C38 FADD V4.2S, V0.2S, V4.2S
	0x03B42C3C MOVK W8, 0x3C8E0000
	0x00000000 INVALID
	0x03B42C44 MOVZ W9, 0xC
	0x03B42C48 UNIMPLEMENTED
	0x00000000 INVALID
	0x03B42C50 MADD X8, X11, X9, X10
	0x00000000 INVALID
	0x03B42C58 STR D0, [X8 + 0x20]
	0x03B42C5C STR S2, [X8 + 0x28]
	0x03B42C60 LDR X21, [X20 + 0x2E0]
	0x03B42C64 LDRSW X22, [X20 + 0x2DC]
	0x03B42C68 MOV X0, X31
	0x03B42C6C BL 0x3C3C6C4
	0x03B42C70 CBZ X21, 0x3B42CF0
	0x03B42C74 LDR W8, [X21 + 0x18]
	0x03B42C78 CMP W22, W8
	0x03B42C7C B.CS 0x3B42CF4
	0x03B42C80 ADD X8, X21, X22, 0x2, LSL
	0x03B42C84 STR S0, [X8 + 0x20]
	0x03B42C88 LDR W8, [X20 + 0x2DC]
	0x03B42C8C MOVZ W9, 0x6667
	0x03B42C90 MOVK W9, 0x66660000
	0x03B42C94 ADD W8, W8, 0x1
	0x03B42C98 SMADDL X9, X8, X9, X31
	0x03B42C9C UBFM X10, X9, 0x20, 0x3F
	0x03B42CA0 UBFM X9, X9, 0x3F, 0x3F
	0x03B42CA4 ADD W9, W9, W10, 0x3, ASR
	0x03B42CA8 MOVZ W10, 0x14
	0x03B42CAC MSUB W8, W9, W10, W8
	0x03B42CB0 STR W8, [X20 + 0x2DC]
	0x03B42CB4 LDR W8, [X19 + 0x18]
	0x03B42CB8 LDR X9, [X19 + 0x10]
	0x03B42CBC LDR V0, [X19]
	0x03B42CC0 ADD X10, X20, 0x2FC
	0x03B42CC4 STR W8, [X10 + 0x18]
	0x03B42CC8 STR X9, [X10 + 0x10]
	0x03B42CCC STR V0, [X10]
	0x03B42CD0 LDP X20, X19, [X31 + 0x50]
	0x03B42CD4 LDP X22, X21, [X31 + 0x40]
	0x03B42CD8 LDR X30, [X31 + 0x38]
	0x03B42CDC LDP D9, D8, [X31 + 0x28]
	0x03B42CE0 LDP D11, D10, [X31 + 0x18]
	0x03B42CE4 LDR V12, [X31 + 0x10]
	0x03B42CE8 ADD X31, X31, 0x60
	0x03B42CEC RET
	0x03B42CF0 BL 0x1C16F20
	0x03B42CF4 BL 0x1C16F28
	0x03B42CF8 STR D14, [X31 - 0x80]!
	0x03B42CFC STP D13, D12, [X31 + 0x10]
	0x03B42D00 STP D11, D10, [X31 + 0x20]
	0x03B42D04 STP D9, D8, [X31 + 0x30]
	0x03B42D08 STP X30, X25, [X31 + 0x40]
	0x03B42D0C STP X24, X23, [X31 + 0x50]
	0x03B42D10 STP X22, X21, [X31 + 0x60]
	0x03B42D14 STP X20, X19, [X31 + 0x70]
	0x03B42D18 ADRP X22, 0x8A0000
	0x03B42D1C LDRB W8, [X22 + 0x871]
	0x03B42D20 MOV V8.16B, V0.16B
	0x03B42D24 MOV X19, X2
	0x03B42D28 MOV X20, X1
	0x03B42D2C MOV X21, X0
	0x03B42D30 TBNZ X8, 0x0, 0x3B42D48
	0x03B42D34 ADRP X0, 0x618000
	0x03B42D38 LDR X0, [X0 + 0x6C0]
	0x03B42D3C BL 0x1C16CF4
	0x03B42D40 MOVZ W8, 0x1
	0x03B42D44 STRB W8, [X22 + 0x871]
	0x03B42D48 LDR V9, [X21 + 0x1E8]
	0x03B42D4C ADRP X8, 0x618000
	0x03B42D50 LDR X8, [X8 + 0x6C0]
	0x03B42D54 FCMP S9, 0x0
	0x03B42D58 B.LE 0x3B42D68
	0x03B42D5C LDR V0, [X21 + 0x2B8]
	0x03B42D60 FCMP S0, S9
	0x03B42D64 B.LS 0x3B42E0C
	0x03B42D68 LDR X0, [X8]
	0x03B42D6C LDRB W23, [X21 + 0x201]
	0x03B42D70 LDR V9, [X21 + 0x204]
	0x03B42D74 LDR V10, [X21 + 0x208]
	0x03B42D78 LDRB W24, [X21 + 0x20D]
	0x03B42D7C LDR V11, [X21 + 0x210]
	0x03B42D80 LDR V14, [X21 + 0x214]
	0x03B42D84 LDRB W25, [X21 + 0x219]
	0x03B42D88 LDR V12, [X21 + 0x21C]
	0x03B42D8C LDR W8, [X0 + 0xE0]
	0x03B42D90 LDR V13, [X21 + 0x220]
	0x03B42D94 ADD X22, X21, 0x28C
	0x03B42D98 ADD X21, X21, 0x2A8
	0x03B42D9C CBNZ W8, 0x3B42DA4
	0x03B42DA0 BL 0x1C16DFC
	0x03B42DA4 CMP W25, 0x0
	0x03B42DA8 CSET W6, NE
	0x03B42DAC CMP W24, 0x0
	0x03B42DB0 CSET W5, NE
	0x03B42DB4 CMP W23, 0x0
	0x03B42DB8 MOV V0.16B, V8.16B
	0x03B42DBC MOV V1.16B, V9.16B
	0x03B42DC0 MOV V2.16B, V10.16B
	0x03B42DC4 MOV V3.16B, V11.16B
	0x03B42DC8 MOV V5.16B, V12.16B
	0x03B42DCC MOV V6.16B, V13.16B
	0x03B42DD0 MOV X0, X22
	0x03B42DD4 MOV X1, X21
	0x03B42DD8 MOV X2, X20
	0x03B42DDC MOV X3, X19
	0x03B42DE0 LDP X20, X19, [X31 + 0x70]
	0x03B42DE4 LDP X22, X21, [X31 + 0x60]
	0x03B42DE8 LDP X24, X23, [X31 + 0x50]
	0x03B42DEC LDP X30, X25, [X31 + 0x40]
	0x03B42DF0 LDP D9, D8, [X31 + 0x30]
	0x03B42DF4 LDP D11, D10, [X31 + 0x20]
	0x03B42DF8 LDP D13, D12, [X31 + 0x10]
	0x03B42DFC CSET W4, NE
	0x03B42E00 MOV V4.16B, V14.16B
	0x03B42E04 LDR V14, [X31], #0x80
	0x03B42E08 B 0x3B42F04
	0x03B42E0C LDR X0, [X8]
	0x03B42E10 ADD X22, X21, 0x2B8
	0x03B42E14 ADD X23, X21, 0x28C
	0x03B42E18 ADD X21, X21, 0x2A8
	0x03B42E1C LDR W8, [X0 + 0xE0]
	0x03B42E20 CBNZ W8, 0x3B42E28
	0x03B42E24 BL 0x1C16DFC
	0x03B42E28 MOV X0, X23
	0x03B42E2C MOV X1, X21
	0x03B42E30 MOV X2, X20
	0x03B42E34 MOV X3, X19
	0x03B42E38 MOV V0.16B, V8.16B
	0x03B42E3C MOV V1.16B, V9.16B
	0x03B42E40 MOV X4, X22
	0x03B42E44 LDP X20, X19, [X31 + 0x70]
	0x03B42E48 LDP X22, X21, [X31 + 0x60]
	0x03B42E4C LDP X24, X23, [X31 + 0x50]
	0x03B42E50 LDP X30, X25, [X31 + 0x40]
	0x03B42E54 LDP D9, D8, [X31 + 0x30]
	0x03B42E58 LDP D11, D10, [X31 + 0x20]
	0x03B42E5C LDP D13, D12, [X31 + 0x10]
	0x03B42E60 LDR V14, [X31], #0x80
	0x03B42E64 B 0x3B42E68
	0x03B42E68 STP D9, D8, [X31 - 0x50]!
	0x03B42E6C STP X30, X25, [X31 + 0x10]
	0x03B42E70 STP X24, X23, [X31 + 0x20]
	0x03B42E74 STP X22, X21, [X31 + 0x30]
	0x03B42E78 STP X20, X19, [X31 + 0x40]
	0x03B42E7C ADRP X24, 0x8A0000
	0x03B42E80 ADRP X25, 0x618000
	0x03B42E84 LDRB W8, [X24 + 0x872]
	0x03B42E88 LDR X25, [X25 + 0x758]
	0x03B42E8C MOV X19, X4
	0x03B42E90 MOV V8.16B, V1.16B
	0x03B42E94 MOV V9.16B, V0.16B
	0x03B42E98 MOV X20, X3
	0x03B42E9C MOV X21, X2
	0x03B42EA0 MOV X22, X1
	0x03B42EA4 MOV X23, X0
	0x03B42EA8 TBNZ X8, 0x0, 0x3B42EC0
	0x03B42EAC ADRP X0, 0x618000
	0x03B42EB0 LDR X0, [X0 + 0x758]
	0x03B42EB4 BL 0x1C16CF4
	0x03B42EB8 MOVZ W8, 0x1
	0x03B42EBC STRB W8, [X24 + 0x872]
	0x03B42EC0 LDR X0, [X25]
	0x03B42EC4 LDR W8, [X0 + 0xE0]
	0x03B42EC8 CBNZ W8, 0x3B42ED0
	0x03B42ECC BL 0x1C16DFC
	0x03B42ED0 MOV X0, X23
	0x03B42ED4 MOV X1, X22
	0x03B42ED8 MOV X2, X21
	0x03B42EDC MOV X3, X20
	0x03B42EE0 MOV X4, X19
	0x03B42EE4 LDP X20, X19, [X31 + 0x40]
	0x03B42EE8 LDP X22, X21, [X31 + 0x30]
	0x03B42EEC LDP X24, X23, [X31 + 0x20]
	0x03B42EF0 LDP X30, X25, [X31 + 0x10]
	0x03B42EF4 MOV V0.16B, V9.16B
	0x03B42EF8 MOV V1.16B, V8.16B
	0x03B42EFC LDP D9, D8, [X31], #0x50
	0x03B42F00 B 0x3B42FF8
	0x03B42F04 STR D14, [X31 - 0x90]!
	0x03B42F08 STP D13, D12, [X31 + 0x10]
	0x03B42F0C STP D11, D10, [X31 + 0x20]
	0x03B42F10 STP D9, D8, [X31 + 0x30]
	0x03B42F14 STP X30, X27, [X31 + 0x40]
	0x03B42F18 STP X26, X25, [X31 + 0x50]
	0x03B42F1C STP X24, X23, [X31 + 0x60]
	0x03B42F20 STP X22, X21, [X31 + 0x70]
	0x03B42F24 STP X20, X19, [X31 + 0x80]
	0x03B42F28 ADRP X26, 0x8A0000
	0x03B42F2C ADRP X27, 0x618000
	0x03B42F30 LDRB W8, [X26 + 0x873]
	0x03B42F34 LDR X27, [X27 + 0x760]
	0x03B42F38 MOV V8.16B, V6.16B
	0x03B42F3C MOV V9.16B, V5.16B
	0x03B42F40 MOV W23, W6
	0x03B42F44 MOV V10.16B, V4.16B
	0x03B42F48 MOV V11.16B, V3.16B
	0x03B42F4C MOV W24, W5
	0x03B42F50 MOV V12.16B, V2.16B
	0x03B42F54 MOV V13.16B, V1.16B
	0x03B42F58 MOV W25, W4
	0x03B42F5C MOV V14.16B, V0.16B
	0x03B42F60 MOV X19, X3
	0x03B42F64 MOV X20, X2
	0x03B42F68 MOV X21, X1
	0x03B42F6C MOV X22, X0
	0x03B42F70 TBNZ X8, 0x0, 0x3B42F88
	0x03B42F74 ADRP X0, 0x618000
	0x03B42F78 LDR X0, [X0 + 0x760]
	0x03B42F7C BL 0x1C16CF4
	0x03B42F80 MOVZ W8, 0x1
	0x03B42F84 STRB W8, [X26 + 0x873]
	0x03B42F88 LDR X0, [X27]
	0x03B42F8C LDR W8, [X0 + 0xE0]
	0x03B42F90 CBNZ W8, 0x3B42F98
	0x03B42F94 BL 0x1C16DFC
	0x03B42F98 AND W4, W25, 0x1
	0x03B42F9C AND W5, W24, 0x1
	0x03B42FA0 AND W6, W23, 0x1
	0x03B42FA4 MOV V1.16B, V13.16B
	0x03B42FA8 MOV V2.16B, V12.16B
	0x03B42FAC MOV V3.16B, V11.16B
	0x03B42FB0 MOV V4.16B, V10.16B
	0x03B42FB4 MOV V5.16B, V9.16B
	0x03B42FB8 MOV V6.16B, V8.16B
	0x03B42FBC MOV X0, X22
	0x03B42FC0 MOV X1, X21
	0x03B42FC4 MOV X2, X20
	0x03B42FC8 MOV X3, X19
	0x03B42FCC LDP X20, X19, [X31 + 0x80]
	0x03B42FD0 LDP X22, X21, [X31 + 0x70]
	0x03B42FD4 LDP X24, X23, [X31 + 0x60]
	0x03B42FD8 LDP X26, X25, [X31 + 0x50]
	0x03B42FDC LDP X30, X27, [X31 + 0x40]
	0x03B42FE0 LDP D9, D8, [X31 + 0x30]
	0x03B42FE4 LDP D11, D10, [X31 + 0x20]
	0x03B42FE8 LDP D13, D12, [X31 + 0x10]
	0x03B42FEC MOV V0.16B, V14.16B
	0x03B42FF0 LDR V14, [X31], #0x90
	0x03B42FF4 B 0x3B4312C
	0x03B42FF8 STP D9, D8, [X31 - 0x50]!
	0x03B42FFC STP X30, X25, [X31 + 0x10]
	0x03B43000 STP X24, X23, [X31 + 0x20]
	0x03B43004 STP X22, X21, [X31 + 0x30]
	0x03B43008 STP X20, X19, [X31 + 0x40]
	0x03B4300C ADRP X24, 0x89F000
	0x03B43010 ADRP X25, 0x5D8000
	0x03B43014 LDRB W8, [X24 + 0x88F]
	0x03B43018 LDR X25, [X25 + 0x848]
	0x03B4301C MOV X19, X4
	0x03B43020 MOV V8.16B, V1.16B
	0x03B43024 MOV V9.16B, V0.16B
	0x03B43028 MOV X20, X3
	0x03B4302C MOV X21, X2
	0x03B43030 MOV X22, X1
	0x03B43034 MOV X23, X0
	0x03B43038 TBNZ X8, 0x0, 0x3B43068
	0x03B4303C ADRP X0, 0x5D8000
	0x03B43040 LDR X0, [X0 + 0x848]
	0x03B43044 BL 0x1C16CF4
	0x03B43048 ADRP X0, 0x617000
	0x03B4304C LDR X0, [X0 + 0x758]
	0x03B43050 BL 0x1C16CF4
	0x03B43054 ADRP X0, 0x617000
	0x03B43058 LDR X0, [X0 + 0x6C0]
	0x03B4305C BL 0x1C16CF4
	0x03B43060 MOVZ W8, 0x1
	0x03B43064 STRB W8, [X24 + 0x88F]
	0x03B43068 LDR X0, [X25]
	0x03B4306C LDR W8, [X0 + 0xE0]
	0x03B43070 CBNZ W8, 0x3B43078
	0x03B43074 BL 0x1C16DFC
	0x03B43078 MOV X0, X31
	0x03B4307C BL 0x36FA670
	0x03B43080 TBZ X0, 0x0, 0x3B430DC
	0x03B43084 ADRP X8, 0x617000
	0x03B43088 LDR X8, [X8 + 0x758]
	0x03B4308C LDR X0, [X8]
	0x03B43090 LDR W8, [X0 + 0xE0]
	0x03B43094 CBNZ W8, 0x3B4309C
	0x03B43098 BL 0x1C16DFC
	0x03B4309C BL 0x3B45F80
	0x03B430A0 CBZ X0, 0x3B430DC
	0x03B430A4 MOV X5, X0
	0x03B430A8 MOV X0, X23
	0x03B430AC MOV X1, X22
	0x03B430B0 MOV X2, X21
	0x03B430B4 MOV X3, X20
	0x03B430B8 MOV X4, X19
	0x03B430BC LDP X20, X19, [X31 + 0x40]
	0x03B430C0 LDP X22, X21, [X31 + 0x30]
	0x03B430C4 LDP X24, X23, [X31 + 0x20]
	0x03B430C8 LDP X30, X25, [X31 + 0x10]
	0x03B430CC MOV V0.16B, V9.16B
	0x03B430D0 MOV V1.16B, V8.16B
	0x03B430D4 LDP D9, D8, [X31], #0x50
	0x03B430D8 BR X5
	0x03B430DC ADRP X8, 0x617000
	0x03B430E0 LDR X8, [X8 + 0x6C0]
	0x03B430E4 LDR X0, [X8]
	0x03B430E8 LDR W8, [X0 + 0xE0]
	0x03B430EC CBNZ W8, 0x3B430F4
	0x03B430F0 BL 0x1C16DFC
	0x03B430F4 MOV X0, X23
	0x03B430F8 MOV X1, X22
	0x03B430FC MOV X2, X21
	0x03B43100 MOV X3, X20
	0x03B43104 MOV X4, X19
	0x03B43108 LDP X20, X19, [X31 + 0x40]
	0x03B4310C LDP X22, X21, [X31 + 0x30]
	0x03B43110 LDP X24, X23, [X31 + 0x20]
	0x03B43114 LDP X30, X25, [X31 + 0x10]
	0x03B43118 MOV V0.16B, V9.16B
	0x03B4311C MOV V1.16B, V8.16B
	0x03B43120 MOV X5, X31
	0x03B43124 LDP D9, D8, [X31], #0x50
	0x03B43128 B 0x3B47C48
	0x03B4312C STR D14, [X31 - 0x90]!
	0x03B43130 STP D13, D12, [X31 + 0x10]
	0x03B43134 STP D11, D10, [X31 + 0x20]
	0x03B43138 STP D9, D8, [X31 + 0x30]
	0x03B4313C STP X30, X27, [X31 + 0x40]
	0x03B43140 STP X26, X25, [X31 + 0x50]
	0x03B43144 STP X24, X23, [X31 + 0x60]
	0x03B43148 STP X22, X21, [X31 + 0x70]
	0x03B4314C STP X20, X19, [X31 + 0x80]
	0x03B43150 ADRP X26, 0x89F000
	0x03B43154 ADRP X27, 0x5D8000
	0x03B43158 LDRB W8, [X26 + 0x894]
	0x03B4315C LDR X27, [X27 + 0x848]
	0x03B43160 MOV V8.16B, V6.16B
	0x03B43164 MOV V9.16B, V5.16B
	0x03B43168 MOV W23, W6
	0x03B4316C MOV V10.16B, V4.16B
	0x03B43170 MOV V11.16B, V3.16B
	0x03B43174 MOV W24, W5
	0x03B43178 MOV V12.16B, V2.16B
	0x03B4317C MOV V13.16B, V1.16B
	0x03B43180 MOV W25, W4
	0x03B43184 MOV V14.16B, V0.16B
	0x03B43188 MOV X19, X3
	0x03B4318C MOV X20, X2
	0x03B43190 MOV X21, X1
	0x03B43194 MOV X22, X0
	0x03B43198 TBNZ X8, 0x0, 0x3B431C8
	0x03B4319C ADRP X0, 0x5D8000
	0x03B431A0 LDR X0, [X0 + 0x848]
	0x03B431A4 BL 0x1C16CF4
	0x03B431A8 ADRP X0, 0x617000
	0x03B431AC LDR X0, [X0 + 0x760]
	0x03B431B0 BL 0x1C16CF4
	0x03B431B4 ADRP X0, 0x617000
	0x03B431B8 LDR X0, [X0 + 0x6C0]
	0x03B431BC BL 0x1C16CF4
	0x03B431C0 MOVZ W8, 0x1
	0x03B431C4 STRB W8, [X26 + 0x894]
	0x03B431C8 LDR X0, [X27]
	0x03B431CC LDR W8, [X0 + 0xE0]
	0x03B431D0 CBNZ W8, 0x3B431D8
	0x03B431D4 BL 0x1C16DFC
	0x03B431D8 MOV X0, X31
	0x03B431DC BL 0x36FA670
	0x03B431E0 TBZ X0, 0x0, 0x3B43268
	0x03B431E4 ADRP X8, 0x617000
	0x03B431E8 LDR X8, [X8 + 0x760]
	0x03B431EC LDR X0, [X8]
	0x03B431F0 LDR W8, [X0 + 0xE0]
	0x03B431F4 CBNZ W8, 0x3B431FC
	0x03B431F8 BL 0x1C16DFC
	0x03B431FC BL 0x3B46498
	0x03B43200 CBZ X0, 0x3B43268
	0x03B43204 MOV X7, X0
	0x03B43208 AND W4, W25, 0x1
	0x03B4320C AND W5, W24, 0x1
	0x03B43210 AND W6, W23, 0x1
	0x03B43214 MOV V1.16B, V13.16B
	0x03B43218 MOV V2.16B, V12.16B
	0x03B4321C MOV V3.16B, V11.16B
	0x03B43220 MOV V4.16B, V10.16B
	0x03B43224 MOV V5.16B, V9.16B
	0x03B43228 MOV V6.16B, V8.16B
	0x03B4322C MOV X0, X22
	0x03B43230 MOV X1, X21
	0x03B43234 MOV X2, X20
	0x03B43238 MOV X3, X19
	0x03B4323C LDP X20, X19, [X31 + 0x80]
	0x03B43240 LDP X22, X21, [X31 + 0x70]
	0x03B43244 LDP X24, X23, [X31 + 0x60]
	0x03B43248 LDP X26, X25, [X31 + 0x50]
	0x03B4324C LDP X30, X27, [X31 + 0x40]
	0x03B43250 LDP D9, D8, [X31 + 0x30]
	0x03B43254 LDP D11, D10, [X31 + 0x20]
	0x03B43258 LDP D13, D12, [X31 + 0x10]
	0x03B4325C MOV V0.16B, V14.16B
	0x03B43260 LDR V14, [X31], #0x90
	0x03B43264 BR X7
	0x03B43268 ADRP X8, 0x617000
	0x03B4326C LDR X8, [X8 + 0x6C0]
	0x03B43270 LDR X0, [X8]
	0x03B43274 LDR W8, [X0 + 0xE0]
	0x03B43278 CBNZ W8, 0x3B43280
	0x03B4327C BL 0x1C16DFC
	0x03B43280 AND W4, W25, 0x1
	0x03B43284 AND W5, W24, 0x1
	0x03B43288 AND W6, W23, 0x1
	0x03B4328C MOV V1.16B, V13.16B
	0x03B43290 MOV V2.16B, V12.16B
	0x03B43294 MOV V3.16B, V11.16B
	0x03B43298 MOV V4.16B, V10.16B
	0x03B4329C MOV V5.16B, V9.16B
	0x03B432A0 MOV V6.16B, V8.16B
	0x03B432A4 MOV X0, X22
	0x03B432A8 MOV X1, X21
	0x03B432AC MOV X2, X20
	0x03B432B0 MOV X3, X19
	0x03B432B4 LDP X20, X19, [X31 + 0x80]
	0x03B432B8 LDP X22, X21, [X31 + 0x70]
	0x03B432BC LDP X24, X23, [X31 + 0x60]
	0x03B432C0 LDP X26, X25, [X31 + 0x50]
	0x03B432C4 LDP X30, X27, [X31 + 0x40]
	0x03B432C8 LDP D9, D8, [X31 + 0x30]
	0x03B432CC LDP D11, D10, [X31 + 0x20]
	0x03B432D0 LDP D13, D12, [X31 + 0x10]
	0x03B432D4 MOV V0.16B, V14.16B
	0x03B432D8 MOV X7, X31
	0x03B432DC LDR V14, [X31], #0x90
	0x03B432E0 B 0x3B47DF8
	0x03B432E4 STR X30, [X31 - 0x30]!
	0x03B432E8 STP X22, X21, [X31 + 0x10]
	0x03B432EC STP X20, X19, [X31 + 0x20]
	0x03B432F0 ADRP X21, 0x89F000
	0x03B432F4 LDRB W8, [X21 + 0x876]
	0x03B432F8 MOV X20, X1
	0x03B432FC MOV X19, X0
	0x03B43300 TBNZ X8, 0x0, 0x3B43354
	0x03B43304 ADRP X0, 0x617000
	0x03B43308 LDR X0, [X0 + 0x768]
	0x03B4330C BL 0x1C16CF4
	0x03B43310 ADRP X0, 0x617000
	0x03B43314 LDR X0, [X0 + 0x770]
	0x03B43318 BL 0x1C16CF4
	0x03B4331C ADRP X0, 0x617000
	0x03B43320 LDR X0, [X0 + 0x2F8]
	0x03B43324 BL 0x1C16CF4
	0x03B43328 ADRP X0, 0x617000
	0x03B4332C LDR X0, [X0 + 0x168]
	0x03B43330 BL 0x1C16CF4
	0x03B43334 ADRP X0, 0x5B0000
	0x03B43338 LDR X0, [X0 + 0x598]
	0x03B4333C BL 0x1C16CF4
	0x03B43340 ADRP X0, 0x5B7000
	0x03B43344 LDR X0, [X0 + 0xD48]
	0x03B43348 BL 0x1C16CF4
	0x03B4334C MOVZ W8, 0x1
	0x03B43350 STRB W8, [X21 + 0x876]
	0x03B43354 CBZ X20, 0x3B4367C
	0x03B43358 MOV X0, X20
	0x03B4335C MOV X1, X31
	0x03B43360 BL 0x3B6B904
	0x03B43364 MOV X0, X19
	0x03B43368 BL 0x3B43680
	0x03B4336C MOV X21, X0
	0x03B43370 MOV X0, X20
	0x03B43374 MOV X1, X31
	0x03B43378 BL 0x3B6B904
	0x03B4337C MOV X22, X0
	0x03B43380 MOV X0, X19
	0x03B43384 MOV X1, X22
	0x03B43388 MOV X2, X21
	0x03B4338C BL 0x3B43E58
	0x03B43390 LDR X8, [X19]
	0x03B43394 MOV X0, X19
	0x03B43398 MOV X1, X22
	0x03B4339C MOV X2, X21
	0x03B433A0 LDR X9, [X8 + 0x8A8]
	0x03B433A4 LDR X3, [X8 + 0x8B0]
	0x03B433A8 BLR X9
	0x03B433AC MOV X0, X19
	0x03B433B0 BL 0x3B3A784
	0x03B433B4 CBZ X0, 0x3B4367C
	0x03B433B8 LDR W21, [X0 + 0x18]
	0x03B433BC MOV X0, X19
	0x03B433C0 MOV X1, X20
	0x03B433C4 BL 0x3B3C7E4
	0x03B433C8 MOV X0, X19
	0x03B433CC BL 0x3B3A784
	0x03B433D0 CBZ X0, 0x3B4367C
	0x03B433D4 ADRP X8, 0x5B7000
	0x03B433D8 LDR X8, [X8 + 0xD48]
	0x03B433DC MOVZ W9, 0x1
	0x03B433E0 LDR W2, [X0 + 0x18]
	0x03B433E4 STRB W9, [X19 + 0x278]
	0x03B433E8 LDR X3, [X8]
	0x03B433EC ADRP X22, 0x5B0000
	0x03B433F0 LDR X22, [X22 + 0x598]
	0x03B433F4 ADD X0, X31, 0x8
	0x03B433F8 MOV W1, W21
	0x03B433FC STR X31, [X31 + 0x8]
	0x03B43400 BL 0x279FA30
	0x03B43404 LDR X8, [X31 + 0x8]
	0x03B43408 ADD X9, X19, 0x27C
	0x03B4340C MOV X0, X19
	0x03B43410 STR X8, [X9]
	0x03B43414 STR W31, [X19 + 0x2B8]
	0x03B43418 BL 0x3B43770
	0x03B4341C LDRB W8, [X19 + 0x334]
	0x03B43420 CBZ W8, 0x3B434A8
	0x03B43424 LDR X0, [X22]
	0x03B43428 LDR X21, [X19 + 0x338]
	0x03B4342C LDR W8, [X0 + 0xE0]
	0x03B43430 CBNZ W8, 0x3B43438
	0x03B43434 BL 0x1C16DFC
	0x03B43438 MOV X0, X21
	0x03B4343C MOV X1, X31
	0x03B43440 MOV X2, X31
	0x03B43444 BL 0x3C354F8
	0x03B43448 TBZ X0, 0x0, 0x3B43614
	0x03B4344C MOV X0, X20
	0x03B43450 MOV X1, X31
	0x03B43454 BL 0x3B6B904
	0x03B43458 CBZ X0, 0x3B4367C
	0x03B4345C ADRP X10, 0x617000
	0x03B43460 LDR X8, [X0]
	0x03B43464 LDR X10, [X10 + 0x2F8]
	0x03B43468 MOV X21, X0
	0x03B4346C LDRH W9, [X8 + 0x12E]
	0x03B43470 LDR X1, [X10]
	0x03B43474 CBZ X9, 0x3B43498
	0x03B43478 LDR X10, [X8 + 0xB0]
	0x03B4347C ADD X10, X10, 0x8
	0x03B43480 LDUR X11, [X10 - 0x8]
	0x03B43484 CMP X11, X1
	0x03B43488 B.EQ 0x3B4359C
	0x03B4348C SUBS X9, X9, 0x1
	0x03B43490 ADD X10, X10, 0x10
	0x03B43494 B.NE 0x3B43480
	0x03B43498 MOVZ W2, 0x5
	0x03B4349C MOV X0, X21
	0x03B434A0 BL 0x1C5C788
	0x03B434A4 B 0x3B435AC
	0x03B434A8 MOV X0, X20
	0x03B434AC MOV X1, X31
	0x03B434B0 BL 0x3B6B904
	0x03B434B4 CBZ X0, 0x3B4367C
	0x03B434B8 ADRP X10, 0x617000
	0x03B434BC LDR X8, [X0]
	0x03B434C0 LDR X10, [X10 + 0x2F8]
	0x03B434C4 MOV X21, X0
	0x03B434C8 LDRH W9, [X8 + 0x12E]
	0x03B434CC LDR X1, [X10]
	0x03B434D0 CBZ X9, 0x3B434F4
	0x03B434D4 LDR X10, [X8 + 0xB0]
	0x03B434D8 ADD X10, X10, 0x8
	0x03B434DC LDUR X11, [X10 - 0x8]
	0x03B434E0 CMP X11, X1
	0x03B434E4 B.EQ 0x3B43504
	0x03B434E8 SUBS X9, X9, 0x1
	0x03B434EC ADD X10, X10, 0x10
	0x03B434F0 B.NE 0x3B434DC
	0x03B434F4 MOVZ W2, 0x5
	0x03B434F8 MOV X0, X21
	0x03B434FC BL 0x1C5C788
	0x03B43500 B 0x3B43514
	0x03B43504 LDR W9, [X10]
	0x03B43508 ADD W9, W9, 0x5
	0x03B4350C ADD X8, X8, W9, 0x4, SXTW
	0x03B43510 ADD X0, X8, 0x138
	0x03B43514 LDP X8, X1, [X0]
	0x03B43518 MOV X0, X21
	0x03B4351C BLR X8
	0x03B43520 CBZ X0, 0x3B4367C
	0x03B43524 ADRP X8, 0x617000
	0x03B43528 LDR X8, [X8 + 0x768]
	0x03B4352C LDR X1, [X8]
	0x03B43530 BL 0x21A3F50
	0x03B43534 STR X0, [X19 + 0x338]
	0x03B43538 MOV X21, X0
	0x03B4353C LDR X0, [X22]
	0x03B43540 LDR W8, [X0 + 0xE0]
	0x03B43544 CBNZ W8, 0x3B4354C
	0x03B43548 BL 0x1C16DFC
	0x03B4354C MOV X0, X21
	0x03B43550 MOV X1, X31
	0x03B43554 MOV X2, X31
	0x03B43558 BL 0x3C354F8
	0x03B4355C TBZ X0, 0x0, 0x3B43614
	0x03B43560 LDR X21, [X19 + 0x340]
	0x03B43564 MOV X0, X20
	0x03B43568 MOV X1, X31
	0x03B4356C BL 0x3B6B904
	0x03B43570 CBZ X21, 0x3B4367C
	0x03B43574 ADRP X8, 0x617000
	0x03B43578 LDR X8, [X8 + 0x770]
	0x03B4357C MOV X1, X0
	0x03B43580 MOV X0, X21
	0x03B43584 LDR X2, [X8]
	0x03B43588 BL 0x2DBEF30
	0x03B4358C LDR X1, [X19 + 0x338]
	0x03B43590 MOV X0, X19
	0x03B43594 BL 0x3B437D8
	0x03B43598 B 0x3B43614
	0x03B4359C LDR W9, [X10]
	0x03B435A0 ADD W9, W9, 0x5
	0x03B435A4 ADD X8, X8, W9, 0x4, SXTW
	0x03B435A8 ADD X0, X8, 0x138
	0x03B435AC LDP X8, X1, [X0]
	0x03B435B0 MOV X0, X21
	0x03B435B4 BLR X8
	0x03B435B8 LDR X8, [X19 + 0x338]
	0x03B435BC CBZ X8, 0x3B4367C
	0x03B435C0 MOV X21, X0
	0x03B435C4 MOV X0, X8
	0x03B435C8 MOV X1, X31
	0x03B435CC BL 0x3C32E90
	0x03B435D0 CBZ X21, 0x3B4367C
	0x03B435D4 MOV X1, X0
	0x03B435D8 MOV X0, X21
	0x03B435DC MOV X2, X31
	0x03B435E0 BL 0x3C40F48
	0x03B435E4 TBZ X0, 0x0, 0x3B43614
	0x03B435E8 LDR X21, [X19 + 0x340]
	0x03B435EC MOV X0, X20
	0x03B435F0 MOV X1, X31
	0x03B435F4 BL 0x3B6B904
	0x03B435F8 CBZ X21, 0x3B4367C
	0x03B435FC ADRP X8, 0x617000
	0x03B43600 LDR X8, [X8 + 0x770]
	0x03B43604 MOV X1, X0
	0x03B43608 MOV X0, X21
	0x03B4360C LDR X2, [X8]
	0x03B43610 BL 0x2DBEF30
	0x03B43614 MOV X0, X19
	0x03B43618 BL 0x3B3A784
	0x03B4361C CBZ X0, 0x3B4367C
	0x03B43620 LDR W8, [X0 + 0x18]
	0x03B43624 CMP W8, 0x1
	0x03B43628 B.NE 0x3B43648
	0x03B4362C LDR X8, [X19]
	0x03B43630 MOV X0, X19
	0x03B43634 LDR X9, [X8 + 0x8B8]
	0x03B43638 LDR X1, [X8 + 0x8C0]
	0x03B4363C BLR X9
	0x03B43640 MOV X0, X19
	0x03B43644 BL 0x3B40D38
	0x03B43648 MOV X0, X20
	0x03B4364C MOV X1, X31
	0x03B43650 BL 0x3B6B904
	0x03B43654 LDR X8, [X19 + 0x360]
	0x03B43658 CBZ X8, 0x3B4367C
	0x03B4365C MOV X1, X0
	0x03B43660 MOV X0, X8
	0x03B43664 MOV X2, X31
	0x03B43668 BL 0x3B8F018
	0x03B4366C LDP X20, X19, [X31 + 0x20]
	0x03B43670 LDP X22, X21, [X31 + 0x10]
	0x03B43674 LDR X30, [X31], #0x30
	0x03B43678 RET
	0x03B4367C BL 0x1C16F20
	0x03B43680 STP X30, X23, [X31 - 0x30]!
	0x03B43684 STP X22, X21, [X31 + 0x10]
	0x03B43688 STP X20, X19, [X31 + 0x20]
	0x03B4368C ADRP X20, 0x89F000
	0x03B43690 LDRB W8, [X20 + 0x878]

ISIL:
	001 Subtract X31, X31, 368
	002 Move [X31+240], D10
	003 Move [X31+256], D9
	004 Move [X31+264], D8
	005 Move [X31+272], X29
	006 Move [X31+280], X30
	007 Move [X31+288], X28
	008 Move [X31+296], X27
	009 Move [X31+304], X26
	010 Move [X31+312], X25
	011 Move [X31+320], X24
	012 Move [X31+328], X23
	013 Move [X31+336], X22
	014 Move [X31+344], X21
	015 Move [X31+352], X20
	016 Move [X31+360], X19
	017 Move X24, 0x8A1000
	018 Move X20, 0x619000
	019 Move W8, [X24+2152]
	020 Move X20, [X20+1728]
	021 Move X21, X3
	022 Move X22, X2
	023 Move W23, W1
	024 Move X19, X0
	025 Move TEMP, X8
	026 And TEMP, TEMP, 1
	027 Compare TEMP, 1
	028 JumpIfEqual {64}
	029 Move X0, 0x619000
	030 Move X0, [X0+1816]
	031 Call 0x1C17CF4
	032 Move X0, 0x619000
	033 Move X0, [X0+1824]
	034 Call 0x1C17CF4
	035 Move X0, 0x619000
	036 Move X0, [X0+1832]
	037 Call 0x1C17CF4
	038 Move X0, 0x619000
	039 Move X0, [X0+1840]
	040 Call 0x1C17CF4
	041 Move X0, 0x619000
	042 Move X0, [X0+1768]
	043 Call 0x1C17CF4
	044 Move X0, 0x619000
	045 Move X0, [X0+1776]
	046 Call 0x1C17CF4
	047 Move X0, 0x619000
	048 Move X0, [X0+1864]
	049 Call 0x1C17CF4
	050 Move X0, 0x619000
	051 Move X0, [X0+1848]
	052 Call 0x1C17CF4
	053 Move X0, 0x619000
	054 Move X0, [X0+1856]
	055 Call 0x1C17CF4
	056 Move X0, 0x619000
	057 Move X0, [X0+360]
	058 Call 0x1C17CF4
	059 Move X0, 0x619000
	060 Move X0, [X0+1728]
	061 Call 0x1C17CF4
	062 Move W8, 1
	063 Move [X24+2152], W8
	064 Move W8, 1
	065 Move [X31+144], X31
	066 Move [X31+152], X31
	067 Move [X31+160], X31
	068 Move [X19+644], W8
	069 Move X0, [X20]
	070 Move W8, [X0+224]
	071 Compare W8, 0
	072 JumpIfNotEqual {75}
	073 Call 0x1C17DFC
	074 Move X0, [X20]
	075 Move X8, [X0+184]
	076 Move X1, X31
	077 Move X2, X31
	078 Move X20, [X8+16]
	079 Move X0, X20
	080 Call IntPtr.op_Inequality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {88}
	085 Move X0, X20
	086 Move X1, X31
	087 Call ProfilerUnsafeUtility.BeginSample, X0
	088 Move X0, X19
	089 Call XRBaseInteractable.get_isSelected, X0
	090 Move X8, [X19+608]
	091 Compare X8, 0
	092 JumpIfEqual {992}
	093 Move X9, [X8+16]
	094 Compare X9, 0
	095 JumpIfEqual {994}
	096 Move X8, [X19+616]
	097 Compare X8, 0
	098 JumpIfEqual {996}
	099 Move X8, [X8+16]
	100 Compare X8, 0
	101 JumpIfEqual {998}
	102 Move W28, [X9+24]
	103 Move W10, [X19+632]
	104 Move W29, [X8+24]
	105 Move W24, W0
	106 Add X27, X31, 176
	107 Compare W10, 0
	108 JumpIfEqual {194}
	109 Move TEMP, X24
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {379}
	113 NotImplemented "Instruction CMP not yet implemented."
	114 Move [X31+248], X20
	115 Move X8, 0x619000
	116 Move X8, [X8+1848]
	117 Move W20, W28
	118 Move X1, [X8]
	119 Add X8, X31, 208
	120 Move X0, X9
	121 Call List`1<Object>.GetEnumerator, X0
	122 Move V0, [X31+13]
	123 Move X8, [X31+224]
	124 Move X26, 0x619000
	125 Move X26, [X26+1832]
	126 Move [X31+9], V0
	127 Move [X31+160], X8
	128 Move X28, 0x619000
	129 Move X28, [X28+1776]
	130 Move X1, [X26]
	131 Add X0, X31, 144
	132 Call Enumerator<Object>.MoveNext, X0
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {270}
	137 Move X0, [X19+608]
	138 Compare X0, 0
	139 JumpIfEqual {974}
	140 Move X8, [X0]
	141 Move X25, [X31+160]
	142 Move X9, [X8+392]
	143 Move X2, [X8+400]
	144 Move X1, X25
	145 NotImplemented "Instruction BLR not yet implemented."
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfNotEqual {130}
	150 NotImplemented "Instruction LDUR not yet implemented."
	151 Move V1, [X22]
	152 Move [X27+44], V0
	153 Move [X31+13], V1
	154 Compare X25, 0
	155 JumpIfEqual {981}
	156 Move V0, [X31+13]
	157 NotImplemented "Instruction LDUR not yet implemented."
	158 Move S9, [X21+4]
	159 Move S8, [X21+8]
	160 Move V10, [X21]
	161 Move [X31+7], V0
	162 Move [X31+124], V1
	163 Move X8, [X25]
	164 Move X1, [X28]
	165 NotImplemented "Instruction LDRH not yet implemented."
	166 Compare X9, 0
	167 JumpIfEqual {174}
	168 Move X10, [X8+176]
	169 Add X10, X10, 8
	170 NotImplemented "Instruction LDUR not yet implemented."
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Subtract X9, X9, 1
	173 Add X10, X10, 16
	174 Move W2, 3
	175 Move X0, X25
	176 Call 0x1C5D788
	177 Move W9, [X10]
	178 Add W9, W9, 3
	179 Add X8, X8, W9
	180 Add X0, X8, 312
	181 Move V0, [X31+7]
	182 NotImplemented "Instruction LDUR not yet implemented."
	183 Move X8, [X0]
	184 Move [X31+11], V0
	185 Move [X27+12], V1
	186 Move X3, [X0+8]
	187 Add X2, X31, 176
	188 Move X0, X25
	189 Move X1, X19
	190 Move V0, V10
	191 Move V1, V9
	192 Move V2, V8
	193 NotImplemented "Instruction BLR not yet implemented."
	194 Move X0, [X19+624]
	195 Compare X0, 0
	196 JumpIfEqual {420}
	197 Move W8, [X0+24]
	198 NotImplemented "Instruction CMP not yet implemented."
	199 Move TEMP, X24
	200 And TEMP, TEMP, 1
	201 Compare TEMP, 1
	202 JumpIfNotEqual {407}
	203 Move [X31+248], X20
	204 Move X8, 0x619000
	205 Move X8, [X8+1848]
	206 Move W20, W28
	207 Move X1, [X8]
	208 Add X8, X31, 208
	209 Call List`1<Object>.GetEnumerator, X0
	210 Move V0, [X31+13]
	211 Move X8, [X31+224]
	212 Move X26, 0x619000
	213 Move X26, [X26+1832]
	214 Move [X31+9], V0
	215 Move [X31+160], X8
	216 Move X28, 0x619000
	217 Move X28, [X28+1776]
	218 Move X1, [X26]
	219 Add X0, X31, 144
	220 Call Enumerator<Object>.MoveNext, X0
	221 Move TEMP, X0
	222 And TEMP, TEMP, 1
	223 Compare TEMP, 1
	224 JumpIfNotEqual {393}
	225 Move X25, [X31+160]
	226 NotImplemented "Instruction LDUR not yet implemented."
	227 Move V1, [X22]
	228 Move [X27+12], V0
	229 Move [X31+11], V1
	230 Compare X25, 0
	231 JumpIfEqual {985}
	232 Move V0, [X31+11]
	233 NotImplemented "Instruction LDUR not yet implemented."
	234 Move S9, [X21+4]
	235 Move S8, [X21+8]
	236 Move V10, [X21]
	237 Move [X31+1], V0
	238 Move [X31+28], V1
	239 Move X8, [X25]
	240 Move X1, [X28]
	241 NotImplemented "Instruction LDRH not yet implemented."
	242 Compare X9, 0
	243 JumpIfEqual {250}
	244 Move X10, [X8+176]
	245 Add X10, X10, 8
	246 NotImplemented "Instruction LDUR not yet implemented."
	247 NotImplemented "Instruction CMP not yet implemented."
	248 Subtract X9, X9, 1
	249 Add X10, X10, 16
	250 Move W2, 3
	251 Move X0, X25
	252 Call 0x1C5D788
	253 Move W9, [X10]
	254 Add W9, W9, 3
	255 Add X8, X8, W9
	256 Add X0, X8, 312
	257 Move V0, [X31+1]
	258 NotImplemented "Instruction LDUR not yet implemented."
	259 Move X8, [X0]
	260 Move [X31+13], V0
	261 Move [X27+44], V1
	262 Move X3, [X0+8]
	263 Add X2, X31, 208
	264 Move X0, X25
	265 Move X1, X19
	266 Move V0, V10
	267 Move V1, V9
	268 Move V2, V8
	269 NotImplemented "Instruction BLR not yet implemented."
	270 Move X26, X31
	271 Move X8, 0x619000
	272 Move X8, [X8+1824]
	273 Move X1, [X8]
	274 Add X0, X31, 144
	275 Call Enumerator<Object>.Dispose, X0
	276 Move W28, W20
	277 Move X20, [X31+248]
	278 Compare X26, 0
	279 JumpIfNotEqual {1019}
	280 NotImplemented "Instruction CMP not yet implemented."
	281 Move X8, [X19+616]
	282 Compare X8, 0
	283 JumpIfEqual {1017}
	284 Move X0, [X8+16]
	285 Compare X0, 0
	286 JumpIfEqual {1018}
	287 Move X8, 0x619000
	288 Move X8, [X8+1848]
	289 Move W20, W28
	290 Move X1, [X8]
	291 Add X8, X31, 208
	292 Call List`1<Object>.GetEnumerator, X0
	293 Move V0, [X31+13]
	294 Move X8, [X31+224]
	295 Move X26, 0x619000
	296 Move X26, [X26+1832]
	297 Move [X31+9], V0
	298 Move [X31+160], X8
	299 Move X28, 0x619000
	300 Move X28, [X28+1776]
	301 Move X1, [X26]
	302 Add X0, X31, 144
	303 Call Enumerator<Object>.MoveNext, X0
	304 Move TEMP, X0
	305 And TEMP, TEMP, 1
	306 Compare TEMP, 1
	307 JumpIfNotEqual {365}
	308 Move X0, [X19+616]
	309 Compare X0, 0
	310 JumpIfEqual {975}
	311 Move X8, [X0]
	312 Move X25, [X31+160]
	313 Move X9, [X8+392]
	314 Move X2, [X8+400]
	315 Move X1, X25
	316 NotImplemented "Instruction BLR not yet implemented."
	317 Move TEMP, X0
	318 And TEMP, TEMP, 1
	319 Compare TEMP, 1
	320 JumpIfNotEqual {301}
	321 NotImplemented "Instruction LDUR not yet implemented."
	322 Move V1, [X22]
	323 Move [X31+92], V0
	324 Move [X31+5], V1
	325 Compare X25, 0
	326 JumpIfEqual {982}
	327 Move V0, [X31+5]
	328 NotImplemented "Instruction LDUR not yet implemented."
	329 Move S9, [X21+4]
	330 Move S8, [X21+8]
	331 Move V10, [X21]
	332 Move [X31+3], V0
	333 Move [X31+60], V1
	334 Move X8, [X25]
	335 Move X1, [X28]
	336 NotImplemented "Instruction LDRH not yet implemented."
	337 Compare X9, 0
	338 JumpIfEqual {345}
	339 Move X10, [X8+176]
	340 Add X10, X10, 8
	341 NotImplemented "Instruction LDUR not yet implemented."
	342 NotImplemented "Instruction CMP not yet implemented."
	343 Subtract X9, X9, 1
	344 Add X10, X10, 16
	345 Move W2, 3
	346 Move X0, X25
	347 Call 0x1C5D788
	348 Move W9, [X10]
	349 Add W9, W9, 3
	350 Add X8, X8, W9
	351 Add X0, X8, 312
	352 Move V0, [X31+3]
	353 NotImplemented "Instruction LDUR not yet implemented."
	354 Move X8, [X0]
	355 Move [X31+13], V0
	356 Move [X27+44], V1
	357 Move X3, [X0+8]
	358 Add X2, X31, 208
	359 Move X0, X25
	360 Move X1, X19
	361 Move V0, V10
	362 Move V1, V9
	363 Move V2, V8
	364 NotImplemented "Instruction BLR not yet implemented."
	365 Move X26, X31
	366 Move W25, 3
	367 Move X8, 0x619000
	368 Move X8, [X8+1824]
	369 Move X1, [X8]
	370 Add X0, X31, 144
	371 Call Enumerator<Object>.Dispose, X0
	372 Compare X26, 0
	373 JumpIfNotEqual {1021}
	374 Move W28, W20
	375 Move X20, [X31+248]
	376 NotImplemented "Instruction CMP not yet implemented."
	377 Compare W25, 0
	378 JumpIfNotEqual {936}
	379 Move X8, [X19+624]
	380 Move [X19+632], W31
	381 Compare X8, 0
	382 JumpIfEqual {420}
	383 Move W2, [X8+24]
	384 Move W9, [X8+28]
	385 Add W9, W9, 1
	386 NotImplemented "Instruction CMP not yet implemented."
	387 Move [X8+24], W31
	388 Move [X8+28], W9
	389 Move X0, [X8+16]
	390 Move W1, W31
	391 Move X3, X31
	392 Call Array.Clear, X0, X1, X2
	393 Move X26, X31
	394 Move W25, 13
	395 Move X8, 0x619000
	396 Move X8, [X8+1824]
	397 Move X1, [X8]
	398 Add X0, X31, 144
	399 Call Enumerator<Object>.Dispose, X0
	400 Compare X26, 0
	401 JumpIfNotEqual {1030}
	402 Move W28, W20
	403 Move X20, [X31+248]
	404 NotImplemented "Instruction CMP not yet implemented."
	405 Compare W25, 0
	406 JumpIfNotEqual {936}
	407 Move X8, [X19+624]
	408 Compare X8, 0
	409 JumpIfEqual {1029}
	410 Move W2, [X8+24]
	411 Move W9, [X8+28]
	412 Add W9, W9, 1
	413 NotImplemented "Instruction CMP not yet implemented."
	414 Move [X8+24], W31
	415 Move [X8+28], W9
	416 Move X0, [X8+16]
	417 Move W1, W31
	418 Move X3, X31
	419 Call Array.Clear, X0, X1, X2
	420 Move TEMP, X24
	421 And TEMP, TEMP, 1
	422 Compare TEMP, 1
	423 JumpIfNotEqual {658}
	424 NotImplemented "Instruction CMP not yet implemented."
	425 Move X0, X19
	426 Call XRBaseInteractable.get_interactorsSelecting, X0
	427 Compare X0, 0
	428 JumpIfEqual {1006}
	429 Move W8, [X0+24]
	430 NotImplemented "Instruction CMP not yet implemented."
	431 Move X0, X19
	432 Call XRGrabInteractable.CanProcessAnySingleGrabTransformer, X0
	433 Move TEMP, X0
	434 And TEMP, TEMP, 1
	435 Compare TEMP, 1
	436 JumpIfNotEqual {438}
	437 Move W26, W31
	438 Move X8, [X19+616]
	439 Move [X31+248], X20
	440 Compare X8, 0
	441 JumpIfEqual {1013}
	442 Move X0, [X8+16]
	443 Compare X0, 0
	444 JumpIfEqual {1014}
	445 Move X8, 0x619000
	446 Move X8, [X8+1848]
	447 Move W20, W28
	448 Move X1, [X8]
	449 Add X8, X31, 80
	450 Call List`1<Object>.GetEnumerator, X0
	451 Move V0, [X31+5]
	452 Move X8, [X31+96]
	453 Move X25, 0x619000
	454 Move X25, [X25+1832]
	455 Move [X31+9], V0
	456 Move [X31+160], X8
	457 Move X27, 0x619000
	458 Move X27, [X27+1776]
	459 Move W28, W31
	460 Move W26, W28
	461 Move W28, W20
	462 Move X1, [X25]
	463 Add X0, X31, 144
	464 Call Enumerator<Object>.MoveNext, X0
	465 Move TEMP, X0
	466 And TEMP, TEMP, 1
	467 Compare TEMP, 1
	468 JumpIfNotEqual {536}
	469 Move X0, [X19+616]
	470 Compare X0, 0
	471 JumpIfEqual {973}
	472 Move X8, [X0]
	473 Move X24, [X31+160]
	474 Move X9, [X8+392]
	475 Move X2, [X8+400]
	476 Move X1, X24
	477 NotImplemented "Instruction BLR not yet implemented."
	478 Move TEMP, X0
	479 And TEMP, TEMP, 1
	480 Compare TEMP, 1
	481 JumpIfNotEqual {462}
	482 Compare X24, 0
	483 JumpIfEqual {980}
	484 Move X8, [X24]
	485 Move X1, [X27]
	486 NotImplemented "Instruction LDRH not yet implemented."
	487 Compare X9, 0
	488 JumpIfEqual {495}
	489 Move X10, [X8+176]
	490 Add X10, X10, 8
	491 NotImplemented "Instruction LDUR not yet implemented."
	492 NotImplemented "Instruction CMP not yet implemented."
	493 Subtract X9, X9, 1
	494 Add X10, X10, 16
	495 Move X0, X24
	496 Move W2, W31
	497 Call 0x1C5D788
	498 NotImplemented "Instruction LDRSW not yet implemented."
	499 Add X8, X8, X9
	500 Add X0, X8, 312
	501 Move X8, [X0]
	502 Move X1, [X0+8]
	503 Move X0, X24
	504 NotImplemented "Instruction BLR not yet implemented."
	505 Move TEMP, X0
	506 And TEMP, TEMP, 1
	507 Compare TEMP, 1
	508 JumpIfNotEqual {462}
	509 Move X8, [X24]
	510 Move X1, [X27]
	511 NotImplemented "Instruction LDRH not yet implemented."
	512 Compare X9, 0
	513 JumpIfEqual {520}
	514 Move X10, [X8+176]
	515 Add X10, X10, 8
	516 NotImplemented "Instruction LDUR not yet implemented."
	517 NotImplemented "Instruction CMP not yet implemented."
	518 Subtract X9, X9, 1
	519 Add X10, X10, 16
	520 Move W2, 4
	521 Move X0, X24
	522 Call 0x1C5D788
	523 Move W9, [X10]
	524 Add W9, W9, 4
	525 Add X8, X8, W9
	526 Add X0, X8, 312
	527 Move X8, [X0]
	528 Move X5, [X0+8]
	529 Move W28, 1
	530 Move X0, X24
	531 Move X1, X19
	532 Move W2, W23
	533 Move X3, X22
	534 Move X4, X21
	535 NotImplemented "Instruction BLR not yet implemented."
	536 Move X24, X31
	537 Move W25, 17
	538 Move X8, 0x619000
	539 Move X8, [X8+1824]
	540 Move X1, [X8]
	541 Move X20, [X31+248]
	542 Add X0, X31, 144
	543 Call Enumerator<Object>.Dispose, X0
	544 Compare X24, 0
	545 JumpIfNotEqual {1015}
	546 NotImplemented "Instruction CMP not yet implemented."
	547 Compare W25, 0
	548 JumpIfNotEqual {936}
	549 NotImplemented "Instruction CMP not yet implemented."
	550 Move TEMP, X26
	551 And TEMP, TEMP, 1
	552 Compare TEMP, 1
	553 JumpIfEqual {934}
	554 Move X8, [X19+608]
	555 Compare X8, 0
	556 JumpIfEqual {1023}
	557 Move X0, [X8+16]
	558 Compare X0, 0
	559 JumpIfEqual {1025}
	560 Move X8, 0x619000
	561 Move X8, [X8+1848]
	562 Move X1, [X8]
	563 Add X8, X31, 80
	564 Call List`1<Object>.GetEnumerator, X0
	565 Move V0, [X31+5]
	566 Move X8, [X31+96]
	567 Move X25, 0x619000
	568 Move X25, [X25+1832]
	569 Move [X31+9], V0
	570 Move [X31+160], X8
	571 Move X26, 0x619000
	572 Move X26, [X26+1776]
	573 Move X1, [X25]
	574 Add X0, X31, 144
	575 Call Enumerator<Object>.MoveNext, X0
	576 Move TEMP, X0
	577 And TEMP, TEMP, 1
	578 Compare TEMP, 1
	579 JumpIfNotEqual {646}
	580 Move X0, [X19+608]
	581 Compare X0, 0
	582 JumpIfEqual {976}
	583 Move X8, [X0]
	584 Move X24, [X31+160]
	585 Move X9, [X8+392]
	586 Move X2, [X8+400]
	587 Move X1, X24
	588 NotImplemented "Instruction BLR not yet implemented."
	589 Move TEMP, X0
	590 And TEMP, TEMP, 1
	591 Compare TEMP, 1
	592 JumpIfNotEqual {573}
	593 Compare X24, 0
	594 JumpIfEqual {983}
	595 Move X8, [X24]
	596 Move X1, [X26]
	597 NotImplemented "Instruction LDRH not yet implemented."
	598 Compare X9, 0
	599 JumpIfEqual {606}
	600 Move X10, [X8+176]
	601 Add X10, X10, 8
	602 NotImplemented "Instruction LDUR not yet implemented."
	603 NotImplemented "Instruction CMP not yet implemented."
	604 Subtract X9, X9, 1
	605 Add X10, X10, 16
	606 Move X0, X24
	607 Move W2, W31
	608 Call 0x1C5D788
	609 NotImplemented "Instruction LDRSW not yet implemented."
	610 Add X8, X8, X9
	611 Add X0, X8, 312
	612 Move X8, [X0]
	613 Move X1, [X0+8]
	614 Move X0, X24
	615 NotImplemented "Instruction BLR not yet implemented."
	616 Move TEMP, X0
	617 And TEMP, TEMP, 1
	618 Compare TEMP, 1
	619 JumpIfNotEqual {573}
	620 Move X8, [X24]
	621 Move X1, [X26]
	622 NotImplemented "Instruction LDRH not yet implemented."
	623 Compare X9, 0
	624 JumpIfEqual {631}
	625 Move X10, [X8+176]
	626 Add X10, X10, 8
	627 NotImplemented "Instruction LDUR not yet implemented."
	628 NotImplemented "Instruction CMP not yet implemented."
	629 Subtract X9, X9, 1
	630 Add X10, X10, 16
	631 Move W2, 4
	632 Move X0, X24
	633 Call 0x1C5D788
	634 Move W9, [X10]
	635 Add W9, W9, 4
	636 Add X8, X8, W9
	637 Add X0, X8, 312
	638 Move X8, [X0]
	639 Move X5, [X0+8]
	640 Move X0, X24
	641 Move X1, X19
	642 Move W2, W23
	643 Move X3, X22
	644 Move X4, X21
	645 NotImplemented "Instruction BLR not yet implemented."
	646 Move X24, X31
	647 Move W26, W31
	648 Move W25, 24
	649 Move X8, 0x619000
	650 Move X8, [X8+1824]
	651 Move X1, [X8]
	652 Add X0, X31, 144
	653 Call Enumerator<Object>.Dispose, X0
	654 Compare X24, 0
	655 JumpIfNotEqual {1027}
	656 Compare W26, 0
	657 JumpIfEqual {936}
	658 NotImplemented "Instruction CMP not yet implemented."
	659 Move X8, [X19+616]
	660 Compare X8, 0
	661 JumpIfEqual {1000}
	662 Move X0, [X8+16]
	663 Compare X0, 0
	664 JumpIfEqual {1002}
	665 Move X8, 0x619000
	666 Move X8, [X8+1848]
	667 Move X1, [X8]
	668 Add X8, X31, 80
	669 Call List`1<Object>.GetEnumerator, X0
	670 Move V0, [X31+5]
	671 Move X8, [X31+96]
	672 Move X26, 0x619000
	673 Move X27, 0x619000
	674 Move X26, [X26+1832]
	675 Move X27, [X27+1768]
	676 Move [X31+9], V0
	677 Move [X31+160], X8
	678 Move X29, 0x619000
	679 Move X29, [X29+1776]
	680 Move X1, [X26]
	681 Add X0, X31, 144
	682 Call Enumerator<Object>.MoveNext, X0
	683 Move TEMP, X0
	684 And TEMP, TEMP, 1
	685 Compare TEMP, 1
	686 JumpIfNotEqual {784}
	687 Move X24, [X31+160]
	688 Move X1, [X27]
	689 Move X0, X24
	690 Call 0x1C17E00
	691 Move X25, X0
	692 Compare X0, 0
	693 JumpIfEqual {680}
	694 Move X0, [X19+616]
	695 Compare X0, 0
	696 JumpIfEqual {971}
	697 Move X8, [X0]
	698 Move X9, [X8+392]
	699 Move X2, [X8+400]
	700 Move X1, X24
	701 NotImplemented "Instruction BLR not yet implemented."
	702 Move TEMP, X0
	703 And TEMP, TEMP, 1
	704 Compare TEMP, 1
	705 JumpIfNotEqual {680}
	706 Move X8, [X25]
	707 Move X1, [X27]
	708 NotImplemented "Instruction LDRH not yet implemented."
	709 Compare X9, 0
	710 JumpIfEqual {717}
	711 Move X10, [X8+176]
	712 Add X10, X10, 8
	713 NotImplemented "Instruction LDUR not yet implemented."
	714 NotImplemented "Instruction CMP not yet implemented."
	715 Subtract X9, X9, 1
	716 Add X10, X10, 16
	717 Move X0, X25
	718 Move W2, W31
	719 Call 0x1C5D788
	720 NotImplemented "Instruction LDRSW not yet implemented."
	721 Add X8, X8, X9
	722 Add X0, X8, 312
	723 Move X8, [X0]
	724 Move X1, [X0+8]
	725 Move X0, X25
	726 NotImplemented "Instruction BLR not yet implemented."
	727 Move TEMP, X0
	728 And TEMP, TEMP, 1
	729 Compare TEMP, 1
	730 JumpIfNotEqual {680}
	731 Compare X24, 0
	732 JumpIfEqual {986}
	733 Move X8, [X24]
	734 Move X1, [X29]
	735 NotImplemented "Instruction LDRH not yet implemented."
	736 Compare X9, 0
	737 JumpIfEqual {744}
	738 Move X10, [X8+176]
	739 Add X10, X10, 8
	740 NotImplemented "Instruction LDUR not yet implemented."
	741 NotImplemented "Instruction CMP not yet implemented."
	742 Subtract X9, X9, 1
	743 Add X10, X10, 16
	744 Move X0, X24
	745 Move W2, W31
	746 Call 0x1C5D788
	747 NotImplemented "Instruction LDRSW not yet implemented."
	748 Add X8, X8, X9
	749 Add X0, X8, 312
	750 Move X8, [X0]
	751 Move X1, [X0+8]
	752 Move X0, X24
	753 NotImplemented "Instruction BLR not yet implemented."
	754 Move TEMP, X0
	755 And TEMP, TEMP, 1
	756 Compare TEMP, 1
	757 JumpIfNotEqual {680}
	758 Move X8, [X24]
	759 Move X1, [X29]
	760 NotImplemented "Instruction LDRH not yet implemented."
	761 Compare X9, 0
	762 JumpIfEqual {769}
	763 Move X10, [X8+176]
	764 Add X10, X10, 8
	765 NotImplemented "Instruction LDUR not yet implemented."
	766 NotImplemented "Instruction CMP not yet implemented."
	767 Subtract X9, X9, 1
	768 Add X10, X10, 16
	769 Move W2, 4
	770 Move X0, X24
	771 Call 0x1C5D788
	772 Move W9, [X10]
	773 Add W9, W9, 4
	774 Add X8, X8, W9
	775 Add X0, X8, 312
	776 Move X8, [X0]
	777 Move X5, [X0+8]
	778 Move X0, X24
	779 Move X1, X19
	780 Move W2, W23
	781 Move X3, X22
	782 Move X4, X21
	783 NotImplemented "Instruction BLR not yet implemented."
	784 Move X24, X31
	785 Move W25, 25
	786 Move X8, 0x619000
	787 Move X8, [X8+1824]
	788 Move X1, [X8]
	789 Add X0, X31, 144
	790 Call Enumerator<Object>.Dispose, X0
	791 Compare X24, 0
	792 JumpIfNotEqual {1004}
	793 NotImplemented "Instruction CMP not yet implemented."
	794 Compare W25, 0
	795 JumpIfNotEqual {936}
	796 NotImplemented "Instruction CMP not yet implemented."
	797 Move X8, [X19+608]
	798 Compare X8, 0
	799 JumpIfEqual {1007}
	800 Move X0, [X8+16]
	801 Compare X0, 0
	802 JumpIfEqual {1009}
	803 Move X8, 0x619000
	804 Move X8, [X8+1848]
	805 Move X1, [X8]
	806 Add X8, X31, 80
	807 Call List`1<Object>.GetEnumerator, X0
	808 Move V0, [X31+5]
	809 Move X8, [X31+96]
	810 Move X26, 0x619000
	811 Move X27, 0x619000
	812 Move X26, [X26+1832]
	813 Move X27, [X27+1768]
	814 Move [X31+9], V0
	815 Move [X31+160], X8
	816 Move X28, 0x619000
	817 Move X28, [X28+1776]
	818 Move X1, [X26]
	819 Add X0, X31, 144
	820 Call Enumerator<Object>.MoveNext, X0
	821 Move TEMP, X0
	822 And TEMP, TEMP, 1
	823 Compare TEMP, 1
	824 JumpIfNotEqual {922}
	825 Move X24, [X31+160]
	826 Move X1, [X27]
	827 Move X0, X24
	828 Call 0x1C17E00
	829 Move X25, X0
	830 Compare X0, 0
	831 JumpIfEqual {818}
	832 Move X0, [X19+608]
	833 Compare X0, 0
	834 JumpIfEqual {978}
	835 Move X8, [X0]
	836 Move X9, [X8+392]
	837 Move X2, [X8+400]
	838 Move X1, X24
	839 NotImplemented "Instruction BLR not yet implemented."
	840 Move TEMP, X0
	841 And TEMP, TEMP, 1
	842 Compare TEMP, 1
	843 JumpIfNotEqual {818}
	844 Move X8, [X25]
	845 Move X1, [X27]
	846 NotImplemented "Instruction LDRH not yet implemented."
	847 Compare X9, 0
	848 JumpIfEqual {855}
	849 Move X10, [X8+176]
	850 Add X10, X10, 8
	851 NotImplemented "Instruction LDUR not yet implemented."
	852 NotImplemented "Instruction CMP not yet implemented."
	853 Subtract X9, X9, 1
	854 Add X10, X10, 16
	855 Move X0, X25
	856 Move W2, W31
	857 Call 0x1C5D788
	858 NotImplemented "Instruction LDRSW not yet implemented."
	859 Add X8, X8, X9
	860 Add X0, X8, 312
	861 Move X8, [X0]
	862 Move X1, [X0+8]
	863 Move X0, X25
	864 NotImplemented "Instruction BLR not yet implemented."
	865 Move TEMP, X0
	866 And TEMP, TEMP, 1
	867 Compare TEMP, 1
	868 JumpIfNotEqual {818}
	869 Compare X24, 0
	870 JumpIfEqual {988}
	871 Move X8, [X24]
	872 Move X1, [X28]
	873 NotImplemented "Instruction LDRH not yet implemented."
	874 Compare X9, 0
	875 JumpIfEqual {882}
	876 Move X10, [X8+176]
	877 Add X10, X10, 8
	878 NotImplemented "Instruction LDUR not yet implemented."
	879 NotImplemented "Instruction CMP not yet implemented."
	880 Subtract X9, X9, 1
	881 Add X10, X10, 16
	882 Move X0, X24
	883 Move W2, W31
	884 Call 0x1C5D788
	885 NotImplemented "Instruction LDRSW not yet implemented."
	886 Add X8, X8, X9
	887 Add X0, X8, 312
	888 Move X8, [X0]
	889 Move X1, [X0+8]
	890 Move X0, X24
	891 NotImplemented "Instruction BLR not yet implemented."
	892 Move TEMP, X0
	893 And TEMP, TEMP, 1
	894 Compare TEMP, 1
	895 JumpIfNotEqual {818}
	896 Move X8, [X24]
	897 Move X1, [X28]
	898 NotImplemented "Instruction LDRH not yet implemented."
	899 Compare X9, 0
	900 JumpIfEqual {907}
	901 Move X10, [X8+176]
	902 Add X10, X10, 8
	903 NotImplemented "Instruction LDUR not yet implemented."
	904 NotImplemented "Instruction CMP not yet implemented."
	905 Subtract X9, X9, 1
	906 Add X10, X10, 16
	907 Move W2, 4
	908 Move X0, X24
	909 Call 0x1C5D788
	910 Move W9, [X10]
	911 Add W9, W9, 4
	912 Add X8, X8, W9
	913 Add X0, X8, 312
	914 Move X8, [X0]
	915 Move X5, [X0+8]
	916 Move X0, X24
	917 Move X1, X19
	918 Move W2, W23
	919 Move X3, X22
	920 Move X4, X21
	921 NotImplemented "Instruction BLR not yet implemented."
	922 Move X21, X31
	923 Move W22, W31
	924 Move W25, 24
	925 Move X8, 0x618000
	926 Move X8, [X8+1824]
	927 Move X1, [X8]
	928 Add X0, X31, 144
	929 Call Enumerator<Object>.Dispose, X0
	930 Compare X21, 0
	931 JumpIfNotEqual {1011}
	932 Compare W22, 0
	933 JumpIfEqual {936}
	934 Move X21, X31
	935 Move W25, 24
	936 Move X21, X31
	937 Move X0, X20
	938 Move X1, X31
	939 Move X2, X31
	940 Call IntPtr.op_Inequality, X0, X1
	941 Move TEMP, X0
	942 And TEMP, TEMP, 1
	943 Compare TEMP, 1
	944 JumpIfNotEqual {948}
	945 Move X0, X20
	946 Move X1, X31
	947 Call ProfilerUnsafeUtility.EndSample, X0
	948 Compare X21, 0
	949 JumpIfNotEqual {990}
	950 NotImplemented "Instruction CMP not yet implemented."
	951 Compare W25, 0
	952 JumpIfNotEqual {954}
	953 Move [X19+644], W31
	954 Move X20, [X31+352]
	955 Move X19, [X31+360]
	956 Move X22, [X31+336]
	957 Move X21, [X31+344]
	958 Move X24, [X31+320]
	959 Move X23, [X31+328]
	960 Move X26, [X31+304]
	961 Move X25, [X31+312]
	962 Move X28, [X31+288]
	963 Move X27, [X31+296]
	964 Move X29, [X31+272]
	965 Move X30, [X31+280]
	966 Move D9, [X31+256]
	967 Move D8, [X31+264]
	968 Move V10, [X31+240]
	969 Add X31, X31, 368
	970 Return 
	971 Move [X31+248], X20
	972 Call 0x1C17F20
	973 Call 0x1C17F20
	974 Call 0x1C17F20
	975 Call 0x1C17F20
	976 Move [X31+248], X20
	977 Call 0x1C17F20
	978 Move [X31+248], X20
	979 Call 0x1C17F20
	980 Call 0x1C17F20
	981 Call 0x1C17F20
	982 Call 0x1C17F20
	983 Move [X31+248], X20
	984 Call 0x1C17F20
	985 Call 0x1C17F20
	986 Move [X31+248], X20
	987 Call 0x1C17F20
	988 Move [X31+248], X20
	989 Call 0x1C17F20
	990 Move X0, X21
	991 Call 0x1C17F18
	992 Move [X31+248], X20
	993 Call 0x1C17F20
	994 Move [X31+248], X20
	995 Call 0x1C17F20
	996 Move [X31+248], X20
	997 Call 0x1C17F20
	998 Move [X31+248], X20
	999 Call 0x1C17F20
	1000 Move [X31+248], X20
	1001 Call 0x1C17F20
	1002 Move [X31+248], X20
	1003 Call 0x1C17F20
	1004 Move X0, X24
	1005 Call 0x1C17F18
	1006 Call 0x1C17F20
	1007 Move [X31+248], X20
	1008 Call 0x1C17F20
	1009 Move [X31+248], X20
	1010 Call 0x1C17F20
	1011 Move X0, X21
	1012 Call 0x1C17F18
	1013 Call 0x1C17F20
	1014 Call 0x1C17F20
	1015 Move X0, X24
	1016 Call 0x1C17F18
	1017 Call 0x1C17F20
	1018 Call 0x1C17F20
	1019 Move X0, X26
	1020 Call 0x1C17F18
	1021 Move X0, X26
	1022 Call 0x1C17F18
	1023 Move [X31+248], X20
	1024 Call 0x1C17F20
	1025 Move [X31+248], X20
	1026 Call 0x1C17F20
	1027 Move X0, X24
	1028 Call 0x1C17F18
	1029 Call 0x1C17F20
	1030 Move X0, X26
	1031 Call 0x1C17F18
	1032 Move [X31+248], X20
	1033 Move X25, X1
	1034 Move [X31+8], X0
	1035 Move X25, X1
	1036 NotImplemented "Instruction CMP not yet implemented."
	1037 Move [X31+8], X0
	1038 Move X0, [X31+8]
	1039 Call 0x3EB2AD0
	1040 Move X26, [X0]
	1041 Call 0x3EB2AE0
	1042 Move W25, W31
	1043 Move X26, X31
	1044 Move X8, 0x618000
	1045 Move X8, [X8+1824]
	1046 Move X1, [X8]
	1047 Add X0, X31, 144
	1048 Call Enumerator<Object>.Dispose, X0
	1049 Compare X26, 0
	1050 JumpIfEqual {1179}
	1051 Move X0, X26
	1052 Call 0x1C17F18
	1053 Move X25, X1
	1054 Move [X31+8], X0
	1055 Move [X31+248], X20
	1056 Move X25, X1
	1057 NotImplemented "Instruction CMP not yet implemented."
	1058 Move [X31+8], X0
	1059 Move X0, [X31+8]
	1060 Call 0x3EB2AD0
	1061 Move X24, [X0]
	1062 Call 0x3EB2AE0
	1063 Move X20, [X31+248]
	1064 Move W25, W31
	1065 Move W26, 1
	1066 Move X24, X31
	1067 Move X8, 0x618000
	1068 Move X8, [X8+1824]
	1069 Move X1, [X8]
	1070 Add X0, X31, 144
	1071 Call Enumerator<Object>.Dispose, X0
	1072 Compare X24, 0
	1073 JumpIfEqual {1179}
	1074 Move X0, X24
	1075 Call 0x1C17F18
	1076 Move X25, X1
	1077 Move [X31+8], X0
	1078 Move X25, X1
	1079 NotImplemented "Instruction CMP not yet implemented."
	1080 Move [X31+8], X0
	1081 Move X0, [X31+8]
	1082 Call 0x3EB2AD0
	1083 Move X26, [X0]
	1084 Call 0x3EB2AE0
	1085 Move W25, W31
	1086 Move X26, X31
	1087 Move X8, 0x618000
	1088 Move X8, [X8+1824]
	1089 Move X1, [X8]
	1090 Add X0, X31, 144
	1091 Call Enumerator<Object>.Dispose, X0
	1092 Compare X26, 0
	1093 JumpIfEqual {1179}
	1094 Move X0, X26
	1095 Call 0x1C17F18
	1096 Move X25, X1
	1097 Move [X31+8], X0
	1098 Move X25, X1
	1099 NotImplemented "Instruction CMP not yet implemented."
	1100 Move [X31+8], X0
	1101 Move X0, [X31+8]
	1102 Call 0x3EB2AD0
	1103 Move X26, [X0]
	1104 Call 0x3EB2AE0
	1105 Move X26, X31
	1106 Move X8, 0x618000
	1107 Move X8, [X8+1824]
	1108 Move X1, [X8]
	1109 Add X0, X31, 144
	1110 Call Enumerator<Object>.Dispose, X0
	1111 Compare X26, 0
	1112 JumpIfEqual {1179}
	1113 Move X0, X26
	1114 Call 0x1C17F18
	1115 Move X25, X1
	1116 Move [X31+8], X0
	1117 Move X25, X1
	1118 NotImplemented "Instruction CMP not yet implemented."
	1119 Move [X31+8], X0
	1120 Move X0, [X31+8]
	1121 Call 0x3EB2AD0
	1122 Move X24, [X0]
	1123 Call 0x3EB2AE0
	1124 Move W25, W31
	1125 Move W28, W20
	1126 Move X24, X31
	1127 Move X8, 0x618000
	1128 Move X8, [X8+1824]
	1129 Move X1, [X8]
	1130 Add X0, X31, 144
	1131 Call Enumerator<Object>.Dispose, X0
	1132 Compare X24, 0
	1133 JumpIfEqual {1179}
	1134 Move X0, X24
	1135 Call 0x1C17F18
	1136 Move X25, X1
	1137 Move [X31+8], X0
	1138 Move [X31+248], X20
	1139 Move X25, X1
	1140 NotImplemented "Instruction CMP not yet implemented."
	1141 Move [X31+8], X0
	1142 Move X0, [X31+8]
	1143 Call 0x3EB2AD0
	1144 Move X21, [X0]
	1145 Call 0x3EB2AE0
	1146 Move X20, [X31+248]
	1147 Move W25, W31
	1148 Move W22, 1
	1149 Move X21, X31
	1150 Move X8, 0x618000
	1151 Move X8, [X8+1824]
	1152 Move X1, [X8]
	1153 Add X0, X31, 144
	1154 Call Enumerator<Object>.Dispose, X0
	1155 Compare X21, 0
	1156 JumpIfEqual {1179}
	1157 Move X0, X21
	1158 Call 0x1C17F18
	1159 Move X25, X1
	1160 Move [X31+8], X0
	1161 Move [X31+248], X20
	1162 Move X25, X1
	1163 NotImplemented "Instruction CMP not yet implemented."
	1164 Move [X31+8], X0
	1165 Move X0, [X31+8]
	1166 Call 0x3EB2AD0
	1167 Move X24, [X0]
	1168 Call 0x3EB2AE0
	1169 Move X20, [X31+248]
	1170 Move W25, W31
	1171 Move X24, X31
	1172 Move X8, 0x618000
	1173 Move X8, [X8+1824]
	1174 Move X1, [X8]
	1175 Add X0, X31, 144
	1176 Call Enumerator<Object>.Dispose, X0
	1177 Compare X24, 0
	1178 JumpIfNotEqual {1187}
	1179 NotImplemented "Instruction CMP not yet implemented."
	1180 Move X0, [X31+8]
	1181 Call 0x3EB2AD0
	1182 Move X21, [X0]
	1183 Call 0x3EB2AE0
	1184 Move X20, [X31+248]
	1185 Move W25, W31
	1186 Move X21, X31
	1187 Move X0, X24
	1188 Call 0x1C17F18
	1189 Move X25, X1
	1190 Move [X31+8], X0
	1191 Move [X31+8], X0
	1192 Move X0, [X31+248]
	1193 Move X1, X31
	1194 Move X2, X31
	1195 Call IntPtr.op_Inequality, X0, X1
	1196 Move TEMP, X0
	1197 And TEMP, TEMP, 1
	1198 Compare TEMP, 1
	1199 JumpIfNotEqual {1203}
	1200 Move X0, [X31+248]
	1201 Move X1, X31
	1202 Call ProfilerUnsafeUtility.EndSample, X0
	1203 Compare X21, 0
	1204 JumpIfNotEqual {1207}
	1205 Move X0, [X31+8]
	1206 Call 0x1D2D690
	1207 Move X0, X21
	1208 Call 0x1C17F18
	1209 Call 0x1991590

Method: System.Boolean CanProcessAnySingleGrabTransformer()

Disassembly:
	0x03B43694 MOV X19, X0
	0x03B43698 TBNZ X8, 0x0, 0x3B436C8
	0x03B4369C ADRP X0, 0x617000
	0x03B436A0 LDR X0, [X0 + 0x778]
	0x03B436A4 BL 0x1C16CF4
	0x03B436A8 ADRP X0, 0x5B0000
	0x03B436AC LDR X0, [X0 + 0x598]
	0x03B436B0 BL 0x1C16CF4
	0x03B436B4 ADRP X0, 0x617000
	0x03B436B8 LDR X0, [X0 + 0x6C0]
	0x03B436BC BL 0x1C16CF4
	0x03B436C0 MOVZ W8, 0x1
	0x03B436C4 STRB W8, [X20 + 0x878]
	0x03B436C8 ADRP X21, 0x617000
	0x03B436CC ADRP X22, 0x617000
	0x03B436D0 ADRP X23, 0x5B0000
	0x03B436D4 LDR X21, [X21 + 0x6C0]
	0x03B436D8 LDR X22, [X22 + 0x778]
	0x03B436DC LDR X23, [X23 + 0x598]
	0x03B436E0 LDR X0, [X21]
	0x03B436E4 LDR W8, [X0 + 0xE0]
	0x03B436E8 CBNZ W8, 0x3B436F4
	0x03B436EC BL 0x1C16DFC
	0x03B436F0 LDR X0, [X21]
	0x03B436F4 LDR X8, [X0 + 0xB8]
	0x03B436F8 LDR X0, [X8 + 0x8]
	0x03B436FC CBZ X0, 0x3B4376C
	0x03B43700 LDR X1, [X22]
	0x03B43704 BL 0x2EF0FD0
	0x03B43708 LDR X8, [X23]
	0x03B4370C MOV X20, X0
	0x03B43710 LDR W9, [X8 + 0xE0]
	0x03B43714 CBNZ W9, 0x3B43720
	0x03B43718 MOV X0, X8
	0x03B4371C BL 0x1C16DFC
	0x03B43720 MOV X0, X20
	0x03B43724 MOV X1, X31
	0x03B43728 MOV X2, X31
	0x03B4372C BL 0x3C3883C
	0x03B43730 TBNZ X0, 0x0, 0x3B436E0
	0x03B43734 MOV X0, X19
	0x03B43738 MOV X1, X31
	0x03B4373C BL 0x3C32E90
	0x03B43740 CBZ X20, 0x3B4376C
	0x03B43744 MOV X1, X0
	0x03B43748 MOV X0, X20
	0x03B4374C MOV W2, W31
	0x03B43750 MOV X3, X31
	0x03B43754 BL 0x3C3FEB8
	0x03B43758 MOV X0, X20
	0x03B4375C LDP X20, X19, [X31 + 0x20]
	0x03B43760 LDP X22, X21, [X31 + 0x10]
	0x03B43764 LDP X30, X23, [X31], #0x30
	0x03B43768 RET
	0x03B4376C BL 0x1C16F20
	0x03B43770 STP X30, X19, [X31 - 0x10]!
	0x03B43774 MOV X19, X0
	0x03B43778 LDR X0, [X0 + 0x2E0]
	0x03B4377C CBZ X0, 0x3B437D4
	0x03B43780 LDR W2, [X0 + 0x18]
	0x03B43784 MOV W1, W31
	0x03B43788 MOV X3, X31
	0x03B4378C BL 0x339FA34
	0x03B43790 LDR X0, [X19 + 0x2E8]
	0x03B43794 CBZ X0, 0x3B437D4
	0x03B43798 LDR W2, [X0 + 0x18]
	0x03B4379C MOV W1, W31
	0x03B437A0 MOV X3, X31
	0x03B437A4 BL 0x339FA34
	0x03B437A8 LDR X0, [X19 + 0x2F0]
	0x03B437AC CBZ X0, 0x3B437D4
	0x03B437B0 LDR W2, [X0 + 0x18]
	0x03B437B4 MOV W1, W31
	0x03B437B8 MOV X3, X31
	0x03B437BC BL 0x339FA34
	0x03B437C0 MOVZ W8, 0x1
	0x03B437C4 STR W31, [X19 + 0x2DC]
	0x03B437C8 STRB W8, [X19 + 0x2F8]
	0x03B437CC LDP X30, X19, [X31], #0x10
	0x03B437D0 RET
	0x03B437D4 BL 0x1C16F20
	0x03B437D8 STR X30, [X31 - 0x50]!
	0x03B437DC STP X26, X25, [X31 + 0x10]
	0x03B437E0 STP X24, X23, [X31 + 0x20]
	0x03B437E4 STP X22, X21, [X31 + 0x30]
	0x03B437E8 STP X20, X19, [X31 + 0x40]
	0x03B437EC ADRP X21, 0x89F000
	0x03B437F0 LDRB W8, [X21 + 0x880]
	0x03B437F4 MOV X19, X1
	0x03B437F8 MOV X20, X0
	0x03B437FC TBNZ X8, 0x0, 0x3B43850
	0x03B43800 ADRP X0, 0x617000
	0x03B43804 LDR X0, [X0 + 0x780]
	0x03B43808 BL 0x1C16CF4
	0x03B4380C ADRP X0, 0x617000
	0x03B43810 LDR X0, [X0 + 0x788]
	0x03B43814 BL 0x1C16CF4
	0x03B43818 ADRP X0, 0x610000
	0x03B4381C LDR X0, [X0 + 0x898]
	0x03B43820 BL 0x1C16CF4
	0x03B43824 ADRP X0, 0x610000
	0x03B43828 LDR X0, [X0 + 0x8A0]
	0x03B4382C BL 0x1C16CF4
	0x03B43830 ADRP X0, 0x5B0000
	0x03B43834 LDR X0, [X0 + 0x598]
	0x03B43838 BL 0x1C16CF4
	0x03B4383C ADRP X0, 0x5B0000
	0x03B43840 LDR X0, [X0 + 0x5F8]
	0x03B43844 BL 0x1C16CF4
	0x03B43848 MOVZ W8, 0x1
	0x03B4384C STRB W8, [X21 + 0x880]
	0x03B43850 LDR X0, [X20 + 0x350]
	0x03B43854 MOVZ W8, 0x1
	0x03B43858 STRB W8, [X20 + 0x334]
	0x03B4385C CBZ X0, 0x3B4395C
	0x03B43860 ADRP X8, 0x617000
	0x03B43864 LDR X8, [X8 + 0x788]
	0x03B43868 LDR X1, [X8]
	0x03B4386C BL 0x2DBE450
	0x03B43870 LDR X0, [X20 + 0x348]
	0x03B43874 CBZ X0, 0x3B4395C
	0x03B43878 ADRP X23, 0x610000
	0x03B4387C ADRP X24, 0x5B0000
	0x03B43880 ADRP X25, 0x5B0000
	0x03B43884 ADRP X26, 0x617000
	0x03B43888 LDR X23, [X23 + 0x8A0]
	0x03B4388C LDR X24, [X24 + 0x598]
	0x03B43890 LDR X25, [X25 + 0x5F8]
	0x03B43894 LDR X26, [X26 + 0x780]
	0x03B43898 MOV W21, W31
	0x03B4389C LDR W8, [X0 + 0x18]
	0x03B438A0 CMP W21, W8
	0x03B438A4 B.GE 0x3B43960
	0x03B438A8 LDR X2, [X23]
	0x03B438AC MOV W1, W21
	0x03B438B0 BL 0x301BCCC
	0x03B438B4 LDR X8, [X24]
	0x03B438B8 MOV X22, X0
	0x03B438BC LDR W9, [X8 + 0xE0]
	0x03B438C0 CBNZ W9, 0x3B438CC
	0x03B438C4 MOV X0, X8
	0x03B438C8 BL 0x1C16DFC
	0x03B438CC MOV X0, X22
	0x03B438D0 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+64], X30
	003 Move [X31+80], X24
	004 Move [X31+88], X23
	005 Move [X31+96], X22
	006 Move [X31+104], X21
	007 Move [X31+112], X20
	008 Move [X31+120], X19
	009 Move X20, 0x8A0000
	010 Move W8, [X20+2153]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {39}
	016 Move X0, 0x618000
	017 Move X0, [X0+1816]
	018 Call 0x1C17CF4
	019 Move X0, 0x618000
	020 Move X0, [X0+1824]
	021 Call 0x1C17CF4
	022 Move X0, 0x618000
	023 Move X0, [X0+1832]
	024 Call 0x1C17CF4
	025 Move X0, 0x618000
	026 Move X0, [X0+1840]
	027 Call 0x1C17CF4
	028 Move X0, 0x618000
	029 Move X0, [X0+1776]
	030 Call 0x1C17CF4
	031 Move X0, 0x618000
	032 Move X0, [X0+1848]
	033 Call 0x1C17CF4
	034 Move X0, 0x618000
	035 Move X0, [X0+1856]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+2153], W8
	039 Move [X31+32], X31
	040 Move [X31+40], X31
	041 Move [X31+48], X31
	042 Move X8, [X19+608]
	043 Compare X8, 0
	044 JumpIfEqual {133}
	045 Move X0, [X8+16]
	046 Compare X0, 0
	047 JumpIfEqual {133}
	048 Move W8, [X0+24]
	049 NotImplemented "Instruction CMP not yet implemented."
	050 Move X8, 0x618000
	051 Move X8, [X8+1848]
	052 Move X23, 0x618000
	053 Move X24, 0x618000
	054 Move X22, 0x618000
	055 Move X1, [X8]
	056 Move X23, [X23+1832]
	057 Move X24, [X24+1776]
	058 Move X22, [X22+1824]
	059 Add X8, X31, 8
	060 Call List`1<Object>.GetEnumerator, X0
	061 NotImplemented "Instruction LDUR not yet implemented."
	062 Move X8, [X31+24]
	063 Move [X31+2], V0
	064 Move [X31+48], X8
	065 Move X1, [X23]
	066 Add X0, X31, 32
	067 Call Enumerator<Object>.MoveNext, X0
	068 Move W20, W0
	069 Move TEMP, X0
	070 And TEMP, TEMP, 1
	071 Compare TEMP, 1
	072 JumpIfNotEqual {114}
	073 Move X0, [X19+608]
	074 Compare X0, 0
	075 JumpIfEqual {131}
	076 Move X8, [X0]
	077 Move X21, [X31+48]
	078 Move X9, [X8+392]
	079 Move X2, [X8+400]
	080 Move X1, X21
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {65}
	086 Compare X21, 0
	087 JumpIfEqual {132}
	088 Move X8, [X21]
	089 Move X1, [X24]
	090 NotImplemented "Instruction LDRH not yet implemented."
	091 Compare X9, 0
	092 JumpIfEqual {99}
	093 Move X10, [X8+176]
	094 Add X10, X10, 8
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Subtract X9, X9, 1
	098 Add X10, X10, 16
	099 Move X0, X21
	100 Move W2, W31
	101 Call 0x1C5D788
	102 NotImplemented "Instruction LDRSW not yet implemented."
	103 Add X8, X8, X9
	104 Add X0, X8, 312
	105 Move X8, [X0]
	106 Move X1, [X0+8]
	107 Move X0, X21
	108 NotImplemented "Instruction BLR not yet implemented."
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {65}
	113 Move W19, 5
	114 Move W19, 2
	115 Move X1, [X22]
	116 Add X0, X31, 32
	117 Call Enumerator<Object>.Dispose, X0
	118 NotImplemented "Instruction CMP not yet implemented."
	119 NotImplemented "Instruction CSET not yet implemented."
	120 And W0, W20, W8
	121 Move W0, W31
	122 Move X20, [X31+112]
	123 Move X19, [X31+120]
	124 Move X22, [X31+96]
	125 Move X21, [X31+104]
	126 Move X24, [X31+80]
	127 Move X23, [X31+88]
	128 Move X30, [X31+64]
	129 Add X31, X31, 128
	130 Return X0
	131 Call 0x1C17F20
	132 Call 0x1C17F20
	133 Call 0x1C17F20
	134 Move X19, X0
	135 NotImplemented "Instruction CMP not yet implemented."
	136 Move X0, X19
	137 Call 0x3EB2AD0
	138 Move X20, [X0]
	139 Call 0x3EB2AE0
	140 Move X1, [X22]
	141 Add X0, X31, 32
	142 Call Enumerator<Object>.Dispose, X0
	143 Compare X20, 0
	144 JumpIfNotEqual {147}
	145 Move W19, W31
	146 Move X20, X31
	147 Move X0, X20
	148 Call 0x1C17F18
	149 Move X19, X0
	150 Move X1, [X22]
	151 Add X0, X31, 32
	152 Call Enumerator<Object>.Dispose, X0
	153 Compare X20, 0
	154 JumpIfNotEqual {157}
	155 Move X0, X19
	156 Call 0x1D2D690
	157 Move X0, X20
	158 Call 0x1C17F18
	159 Call 0x1991590

Method: System.Void OnAddedGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)

Disassembly:
	0x03B41A00 B.LT 0x3B41A14
	0x03B41A04 LDR X0, [X8 + 0x10]
	0x03B41A08 MOV W1, W31
	0x03B41A0C MOV X3, X31
	0x03B41A10 BL 0x339FA34
	0x03B41A14 TBZ X24, 0x0, 0x3B41D50
	0x03B41A18 CMP W29, 0x1
	0x03B41A1C B.LT 0x3B41A44
	0x03B41A20 MOV X0, X19
	0x03B41A24 BL 0x3B3A784
	0x03B41A28 CBZ X0, 0x3B42224
	0x03B41A2C LDR W8, [X0 + 0x18]
	0x03B41A30 CMP W8, 0x1
	0x03B41A34 B.GT 0x3B41A4C
	0x03B41A38 MOV X0, X19
	0x03B41A3C BL 0x3B42694
	0x03B41A40 TBZ X0, 0x0, 0x3B41A4C
	0x03B41A44 MOV W26, W31
	0x03B41A48 B 0x3B41BD8
	0x03B41A4C LDR X8, [X19 + 0x268]
	0x03B41A50 STR X20, [X31 + 0xF8]
	0x03B41A54 CBZ X8, 0x3B42240
	0x03B41A58 LDR X0, [X8 + 0x10]
	0x03B41A5C CBZ X0, 0x3B42244
	0x03B41A60 ADRP X8, 0x619000
	0x03B41A64 LDR X8, [X8 + 0x738]
	0x03B41A68 MOV W20, W28
	0x03B41A6C LDR X1, [X8]
	0x03B41A70 ADD X8, X31, 0x50
	0x03B41A74 BL 0x301CB58
	0x03B41A78 LDR V0, [X31 + 0x5]
	0x03B41A7C LDR X8, [X31 + 0x60]
	0x03B41A80 ADRP X25, 0x619000
	0x03B41A84 LDR X25, [X25 + 0x728]
	0x03B41A88 STR V0, [X31 + 0x9]
	0x03B41A8C STR X8, [X31 + 0xA0]
	0x03B41A90 ADRP X27, 0x619000
	0x03B41A94 LDR X27, [X27 + 0x6F0]
	0x03B41A98 MOV W28, W31
	0x03B41A9C MOV W26, W28
	0x03B41AA0 MOV W28, W20
	0x03B41AA4 LDR X1, [X25]
	0x03B41AA8 ADD X0, X31, 0x90
	0x03B41AAC BL 0x2BC4350
	0x03B41AB0 TBZ X0, 0x0, 0x3B41BA8
	0x03B41AB4 LDR X0, [X19 + 0x268]
	0x03B41AB8 CBZ X0, 0x3B421A0
	0x03B41ABC LDR X8, [X0]
	0x03B41AC0 LDR X24, [X31 + 0xA0]
	0x03B41AC4 LDP X9, X2, [X8 + 0x188]
	0x03B41AC8 MOV X1, X24
	0x03B41ACC BLR X9
	0x03B41AD0 TBZ X0, 0x0, 0x3B41AA4
	0x03B41AD4 CBZ X24, 0x3B421BC
	0x03B41AD8 LDR X8, [X24]
	0x03B41ADC LDR X1, [X27]
	0x03B41AE0 LDRH W9, [X8 + 0x12E]
	0x03B41AE4 CBZ X9, 0x3B41B08
	0x03B41AE8 LDR X10, [X8 + 0xB0]
	0x03B41AEC ADD X10, X10, 0x8
	0x03B41AF0 LDUR X11, [X10 - 0x8]
	0x03B41AF4 CMP X11, X1
	0x03B41AF8 B.EQ 0x3B41B18
	0x03B41AFC SUBS X9, X9, 0x1
	0x03B41B00 ADD X10, X10, 0x10
	0x03B41B04 B.NE 0x3B41AF0
	0x03B41B08 MOV X0, X24
	0x03B41B0C MOV W2, W31
	0x03B41B10 BL 0x1C5C788
	0x03B41B14 B 0x3B41B24
	0x03B41B18 LDRSW X9, [X10]
	0x03B41B1C ADD X8, X8, X9, 0x4, LSL
	0x03B41B20 ADD X0, X8, 0x138
	0x03B41B24 LDP X8, X1, [X0]
	0x03B41B28 MOV X0, X24
	0x03B41B2C BLR X8
	0x03B41B30 TBZ X0, 0x0, 0x3B41AA4
	0x03B41B34 LDR X8, [X24]
	0x03B41B38 LDR X1, [X27]
	0x03B41B3C LDRH W9, [X8 + 0x12E]
	0x03B41B40 CBZ X9, 0x3B41B64
	0x03B41B44 LDR X10, [X8 + 0xB0]
	0x03B41B48 ADD X10, X10, 0x8
	0x03B41B4C LDUR X11, [X10 - 0x8]
	0x03B41B50 CMP X11, X1
	0x03B41B54 B.EQ 0x3B41B74
	0x03B41B58 SUBS X9, X9, 0x1
	0x03B41B5C ADD X10, X10, 0x10
	0x03B41B60 B.NE 0x3B41B4C
	0x03B41B64 MOVZ W2, 0x4
	0x03B41B68 MOV X0, X24
	0x03B41B6C BL 0x1C5C788
	0x03B41B70 B 0x3B41B84
	0x03B41B74 LDR W9, [X10]
	0x03B41B78 ADD W9, W9, 0x4
	0x03B41B7C ADD X8, X8, W9, 0x4, SXTW
	0x03B41B80 ADD X0, X8, 0x138
	0x03B41B84 LDP X8, X5, [X0]
	0x03B41B88 MOVZ W28, 0x1
	0x03B41B8C MOV X0, X24
	0x03B41B90 MOV X1, X19
	0x03B41B94 MOV W2, W23
	0x03B41B98 MOV X3, X22
	0x03B41B9C MOV X4, X21
	0x03B41BA0 BLR X8
	0x03B41BA4 B 0x3B41A9C
	0x03B41BA8 MOV X24, X31
	0x03B41BAC MOVZ W25, 0x11
	0x03B41BB0 ADRP X8, 0x619000
	0x03B41BB4 LDR X8, [X8 + 0x720]
	0x03B41BB8 LDR X1, [X8]
	0x03B41BBC LDR X20, [X31 + 0xF8]
	0x03B41BC0 ADD X0, X31, 0x90
	0x03B41BC4 BL 0x2BC434C
	0x03B41BC8 CBNZ X24, 0x3B42248
	0x03B41BCC CMP W25, 0x11
	0x03B41BD0 B.EQ 0x3B41BD8
	0x03B41BD4 CBNZ W25, 0x3B42138
	0x03B41BD8 CMP W28, 0x1
	0x03B41BDC B.LT 0x3B4212C
	0x03B41BE0 TBNZ X26, 0x0, 0x3B4212C
	0x03B41BE4 LDR X8, [X19 + 0x260]
	0x03B41BE8 CBZ X8, 0x3B42268
	0x03B41BEC LDR X0, [X8 + 0x10]
	0x03B41BF0 CBZ X0, 0x3B42270
	0x03B41BF4 ADRP X8, 0x619000
	0x03B41BF8 LDR X8, [X8 + 0x738]
	0x03B41BFC LDR X1, [X8]
	0x03B41C00 ADD X8, X31, 0x50
	0x03B41C04 BL 0x301CB58
	0x03B41C08 LDR V0, [X31 + 0x5]
	0x03B41C0C LDR X8, [X31 + 0x60]
	0x03B41C10 ADRP X25, 0x619000
	0x03B41C14 LDR X25, [X25 + 0x728]
	0x03B41C18 STR V0, [X31 + 0x9]
	0x03B41C1C STR X8, [X31 + 0xA0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8A2000
	007 Move X22, 0x61A000
	008 Move W8, [X21+2154]
	009 Move X22, [X22+1768]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {36}
	016 Move X0, 0x61A000
	017 Move X0, [X0+1768]
	018 Call 0x1C17CF4
	019 Move X0, 0x61A000
	020 Move X0, [X0+1776]
	021 Call 0x1C17CF4
	022 Move X0, 0x61A000
	023 Move X0, [X0+1784]
	024 Call 0x1C17CF4
	025 Move X0, 0x61A000
	026 Move X0, [X0+1792]
	027 Call 0x1C17CF4
	028 Move X0, 0x61A000
	029 Move X0, [X0+360]
	030 Call 0x1C17CF4
	031 Move X0, 0x61A000
	032 Move X0, [X0+1800]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X21+2154], W8
	036 Move X1, [X22]
	037 Move X0, X19
	038 Call 0x1C17E00
	039 Compare X0, 0
	040 JumpIfEqual {44}
	041 Move W8, [X20+648]
	042 Add W8, W8, 1
	043 Move [X20+648], W8
	044 Compare X19, 0
	045 JumpIfEqual {150}
	046 Move X21, 0x61A000
	047 Move X8, [X19]
	048 Move X21, [X21+1776]
	049 NotImplemented "Instruction LDRH not yet implemented."
	050 Move X1, [X21]
	051 Compare X9, 0
	052 JumpIfEqual {59}
	053 Move X10, [X8+176]
	054 Add X10, X10, 8
	055 NotImplemented "Instruction LDUR not yet implemented."
	056 NotImplemented "Instruction CMP not yet implemented."
	057 Subtract X9, X9, 1
	058 Add X10, X10, 16
	059 Move W2, 1
	060 Move X0, X19
	061 Call 0x1C5D788
	062 Move W9, [X10]
	063 Add W9, W9, 1
	064 Add X8, X8, W9
	065 Add X0, X8, 312
	066 Move X8, [X0]
	067 Move X2, [X0+8]
	068 Move X0, X19
	069 Move X1, X20
	070 NotImplemented "Instruction BLR not yet implemented."
	071 Move X0, X20
	072 Call XRBaseInteractable.get_interactorsSelecting, X0
	073 Compare X0, 0
	074 JumpIfEqual {150}
	075 Move W8, [X0+24]
	076 Compare W8, 0
	077 JumpIfEqual {132}
	078 Move X8, [X19]
	079 Move X1, [X21]
	080 NotImplemented "Instruction LDRH not yet implemented."
	081 Compare X9, 0
	082 JumpIfEqual {89}
	083 Move X10, [X8+176]
	084 Add X10, X10, 8
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Subtract X9, X9, 1
	088 Add X10, X10, 16
	089 Move W2, 2
	090 Move X0, X19
	091 Call 0x1C5D788
	092 Move W9, [X10]
	093 Add W9, W9, 2
	094 Add X8, X8, W9
	095 Add X0, X8, 312
	096 Move X8, [X0]
	097 Move X2, [X0+8]
	098 Move X0, X19
	099 Move X1, X20
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X21, [X20+624]
	102 Compare X21, 0
	103 JumpIfNotEqual {116}
	104 Move X8, 0x61A000
	105 Move X8, [X8+1800]
	106 Move X0, [X8]
	107 Call 0x1C17F10
	108 Move X8, 0x61A000
	109 Move X8, [X8+1792]
	110 Move X21, X0
	111 Move X1, [X8]
	112 Call List`1<Object>..ctor, X0
	113 Move [X20+624], X21
	114 Compare X21, 0
	115 JumpIfEqual {150}
	116 Move X9, 0x61A000
	117 Move X9, [X9+1784]
	118 Move W10, [X21+28]
	119 Move X8, [X21+16]
	120 Move X9, [X9]
	121 Add W10, W10, 1
	122 Move [X21+28], W10
	123 Compare X8, 0
	124 JumpIfEqual {150}
	125 NotImplemented "Instruction LDRSW not yet implemented."
	126 Move W11, [X8+24]
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Add W9, W10, 1
	129 Add X8, X8, X10
	130 Move [X21+24], W9
	131 Move [X8+32], X19
	132 Move X20, [X31+32]
	133 Move X19, [X31+40]
	134 Move X22, [X31+16]
	135 Move X21, [X31+24]
	136 Move X30, [X31+48]
	137 Return 
	138 Move X8, [X9+32]
	139 Move X0, X21
	140 Move X1, X19
	141 Move X20, [X31+32]
	142 Move X19, [X31+40]
	143 Move X8, [X8+192]
	144 Move X22, [X31+16]
	145 Move X21, [X31+24]
	146 Move X2, [X8+112]
	147 Move X30, [X31+48]
	148 Call List`1<Object>.AddWithResize, X0, X1
	149 Return 
	150 Call 0x1C17F20

Method: System.Void OnRemovedGrabTransformer(UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer transformer)

Disassembly:
	0x03B41C20 ADRP X26, 0x619000
	0x03B41C24 LDR X26, [X26 + 0x6F0]
	0x03B41C28 LDR X1, [X25]
	0x03B41C2C ADD X0, X31, 0x90
	0x03B41C30 BL 0x2BC4350
	0x03B41C34 TBZ X0, 0x0, 0x3B41D28
	0x03B41C38 LDR X0, [X19 + 0x260]
	0x03B41C3C CBZ X0, 0x3B421AC
	0x03B41C40 LDR X8, [X0]
	0x03B41C44 LDR X24, [X31 + 0xA0]
	0x03B41C48 LDP X9, X2, [X8 + 0x188]
	0x03B41C4C MOV X1, X24
	0x03B41C50 BLR X9
	0x03B41C54 TBZ X0, 0x0, 0x3B41C28
	0x03B41C58 CBZ X24, 0x3B421C8
	0x03B41C5C LDR X8, [X24]
	0x03B41C60 LDR X1, [X26]
	0x03B41C64 LDRH W9, [X8 + 0x12E]
	0x03B41C68 CBZ X9, 0x3B41C8C
	0x03B41C6C LDR X10, [X8 + 0xB0]
	0x03B41C70 ADD X10, X10, 0x8
	0x03B41C74 LDUR X11, [X10 - 0x8]
	0x03B41C78 CMP X11, X1
	0x03B41C7C B.EQ 0x3B41C9C
	0x03B41C80 SUBS X9, X9, 0x1
	0x03B41C84 ADD X10, X10, 0x10
	0x03B41C88 B.NE 0x3B41C74
	0x03B41C8C MOV X0, X24
	0x03B41C90 MOV W2, W31
	0x03B41C94 BL 0x1C5C788
	0x03B41C98 B 0x3B41CA8
	0x03B41C9C LDRSW X9, [X10]
	0x03B41CA0 ADD X8, X8, X9, 0x4, LSL
	0x03B41CA4 ADD X0, X8, 0x138
	0x03B41CA8 LDP X8, X1, [X0]
	0x03B41CAC MOV X0, X24
	0x03B41CB0 BLR X8
	0x03B41CB4 TBZ X0, 0x0, 0x3B41C28
	0x03B41CB8 LDR X8, [X24]
	0x03B41CBC LDR X1, [X26]
	0x03B41CC0 LDRH W9, [X8 + 0x12E]
	0x03B41CC4 CBZ X9, 0x3B41CE8
	0x03B41CC8 LDR X10, [X8 + 0xB0]
	0x03B41CCC ADD X10, X10, 0x8
	0x03B41CD0 LDUR X11, [X10 - 0x8]
	0x03B41CD4 CMP X11, X1
	0x03B41CD8 B.EQ 0x3B41CF8
	0x03B41CDC SUBS X9, X9, 0x1
	0x03B41CE0 ADD X10, X10, 0x10
	0x03B41CE4 B.NE 0x3B41CD0
	0x03B41CE8 MOVZ W2, 0x4
	0x03B41CEC MOV X0, X24
	0x03B41CF0 BL 0x1C5C788
	0x03B41CF4 B 0x3B41D08
	0x03B41CF8 LDR W9, [X10]
	0x03B41CFC ADD W9, W9, 0x4
	0x03B41D00 ADD X8, X8, W9, 0x4, SXTW
	0x03B41D04 ADD X0, X8, 0x138
	0x03B41D08 LDP X8, X5, [X0]
	0x03B41D0C MOV X0, X24
	0x03B41D10 MOV X1, X19
	0x03B41D14 MOV W2, W23
	0x03B41D18 MOV X3, X22
	0x03B41D1C MOV X4, X21
	0x03B41D20 BLR X8
	0x03B41D24 B 0x3B41C28
	0x03B41D28 MOV X24, X31
	0x03B41D2C MOV W26, W31
	0x03B41D30 MOVZ W25, 0x18
	0x03B41D34 ADRP X8, 0x619000

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8A2000
	007 Move X22, 0x61A000
	008 Move W8, [X21+2155]
	009 Move X22, [X22+1768]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {27}
	016 Move X0, 0x61A000
	017 Move X0, [X0+1768]
	018 Call 0x1C17CF4
	019 Move X0, 0x61A000
	020 Move X0, [X0+1776]
	021 Call 0x1C17CF4
	022 Move X0, 0x61A000
	023 Move X0, [X0+1808]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2155], W8
	027 Move X1, [X22]
	028 Move X0, X19
	029 Call 0x1C17E00
	030 Compare X0, 0
	031 JumpIfEqual {35}
	032 Move W8, [X20+648]
	033 Subtract W8, W8, 1
	034 Move [X20+648], W8
	035 Compare X19, 0
	036 JumpIfEqual {82}
	037 Move X10, 0x61A000
	038 Move X8, [X19]
	039 Move X10, [X10+1776]
	040 NotImplemented "Instruction LDRH not yet implemented."
	041 Move X1, [X10]
	042 Compare X9, 0
	043 JumpIfEqual {50}
	044 Move X10, [X8+176]
	045 Add X10, X10, 8
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 Subtract X9, X9, 1
	049 Add X10, X10, 16
	050 Move W2, 5
	051 Move X0, X19
	052 Call 0x1C5D788
	053 Move W9, [X10]
	054 Add W9, W9, 5
	055 Add X8, X8, W9
	056 Add X0, X8, 312
	057 Move X8, [X0]
	058 Move X2, [X0+8]
	059 Move X0, X19
	060 Move X1, X20
	061 NotImplemented "Instruction BLR not yet implemented."
	062 Move X0, [X20+624]
	063 Compare X0, 0
	064 JumpIfEqual {76}
	065 Move X8, 0x61A000
	066 Move X8, [X8+1808]
	067 Move X1, X19
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X2, [X8]
	073 Move X30, [X31+48]
	074 Call List`1<Object>.Remove, X0, X1
	075 Return 
	076 Move X20, [X31+32]
	077 Move X19, [X31+40]
	078 Move X22, [X31+16]
	079 Move X21, [X31+24]
	080 Move X30, [X31+48]
	081 Return 
	082 Call 0x1C17F20

Method: System.Void AddDefaultGrabTransformers()

Disassembly:
	0x03B4054C AND W0, W21, 0x1
	0x03B40550 LDP X30, X21, [X31], #0x20
	0x03B40554 RET
	0x03B40558 BL 0x1C16F20
	0x03B4055C LDR X2, [X0 + 0x268]
	0x03B40560 B 0x3B4050C
	0x03B40564 STP X30, X21, [X31 - 0x20]!
	0x03B40568 STP X20, X19, [X31 + 0x10]
	0x03B4056C ADRP X21, 0x8A2000
	0x03B40570 LDRB W8, [X21 + 0x864]
	0x03B40574 MOV X19, X1
	0x03B40578 MOV X20, X0
	0x03B4057C TBNZ X8, 0x0, 0x3B40594
	0x03B40580 ADRP X0, 0x61A000
	0x03B40584 LDR X0, [X0 + 0x5F8]
	0x03B40588 BL 0x1C16CF4
	0x03B4058C MOVZ W8, 0x1
	0x03B40590 STRB W8, [X21 + 0x864]
	0x03B40594 CBZ X19, 0x3B405F4
	0x03B40598 ADRP X8, 0x61A000
	0x03B4059C LDR X8, [X8 + 0x5F8]
	0x03B405A0 MOV X0, X19
	0x03B405A4 LDR X1, [X8]
	0x03B405A8 BL 0x28B9738
	0x03B405AC CMP W0, 0x1
	0x03B405B0 B.MI 0x3B405E8
	0x03B405B4 MOV W21, W0
	0x03B405B8 LDR X8, [X19]
	0x03B405BC SUB W21, W21, 0x1
	0x03B405C0 MOV X0, X19
	0x03B405C4 MOV W1, W21
	0x03B405C8 LDP X9, X2, [X8 + 0x1D8]
	0x03B405CC BLR X9
	0x03B405D0 MOV X1, X0
	0x03B405D4 MOV X0, X20
	0x03B405D8 MOV X2, X19
	0x03B405DC BL 0x3B4050C
	0x03B405E0 CMP W21, 0x0
	0x03B405E4 B.GT 0x3B405B8
	0x03B405E8 LDP X20, X19, [X31 + 0x10]
	0x03B405EC LDP X30, X21, [X31], #0x20
	0x03B405F0 RET
	0x03B405F4 BL 0x1C16F20
	0x03B405F8 STR X30, [X31 - 0x30]!
	0x03B405FC STP X22, X21, [X31 + 0x10]
	0x03B40600 STP X20, X19, [X31 + 0x20]
	0x03B40604 ADRP X22, 0x8A2000
	0x03B40608 ADRP X21, 0x61A000
	0x03B4060C LDRB W8, [X22 + 0x85F]
	0x03B40610 LDR X21, [X21 + 0x6C0]
	0x03B40614 MOV X19, X1
	0x03B40618 MOV X20, X0
	0x03B4061C TBNZ X8, 0x0, 0x3B40634

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8A3000
	005 Move W8, [X20+2156]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {19}
	011 Move X0, 0x61B000
	012 Move X0, [X0+1528]
	013 Call 0x1C17CF4
	014 Move X0, 0x61B000
	015 Move X0, [X0+360]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2156], W8
	019 Move W8, [X19+600]
	020 Compare W8, 0
	021 JumpIfEqual {51}
	022 Move X0, [X19+608]
	023 Compare X0, 0
	024 JumpIfEqual {63}
	025 Move X20, 0x61B000
	026 Move X20, [X20+1528]
	027 Move X1, [X20]
	028 Call 0x28BA738, X0
	029 Compare W0, 0
	030 JumpIfNotEqual {36}
	031 Move X8, [X19]
	032 Move X0, X19
	033 Move X9, [X8+2136]
	034 Move X1, [X8+2144]
	035 NotImplemented "Instruction BLR not yet implemented."
	036 Move X0, [X19+616]
	037 Compare X0, 0
	038 JumpIfEqual {63}
	039 Move X1, [X20]
	040 Call 0x28BA738, X0
	041 Compare W0, 0
	042 JumpIfNotEqual {51}
	043 Move W8, [X19+88]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X0, X19
	046 Call XRBaseInteractable.get_interactorsSelecting, X0
	047 Compare X0, 0
	048 JumpIfEqual {63}
	049 Move W8, [X0+24]
	050 NotImplemented "Instruction CMP not yet implemented."
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Return 
	055 Move X8, [X19]
	056 Move X0, X19
	057 Move X20, [X31+16]
	058 Move X19, [X31+24]
	059 Move X2, [X8+2152]
	060 Move X1, [X8+2160]
	061 Move X30, [X31+32]
	062 CallNoReturn X2
	063 Call 0x1C17F20

Method: System.Void AddDefaultSingleGrabTransformer()

Disassembly:
	0x03B438D4 MOV X2, X31
	0x03B438D8 BL 0x3C3883C
	0x03B438DC TBNZ X0, 0x0, 0x3B43950
	0x03B438E0 CBZ X22, 0x3B4395C
	0x03B438E4 MOV X0, X22
	0x03B438E8 MOV X1, X31
	0x03B438EC BL 0x3C8F78C
	0x03B438F0 TBNZ X0, 0x0, 0x3B43950
	0x03B438F4 LDR X0, [X25]
	0x03B438F8 LDR W8, [X0 + 0xE0]
	0x03B438FC CBNZ W8, 0x3B43904
	0x03B43900 BL 0x1C16DFC
	0x03B43904 MOV X0, X22
	0x03B43908 MOV X1, X19
	0x03B4390C MOV X2, X31
	0x03B43910 BL 0x3C8A998
	0x03B43914 TBNZ X0, 0x0, 0x3B43950
	0x03B43918 LDR X0, [X20 + 0x350]
	0x03B4391C CBZ X0, 0x3B4395C
	0x03B43920 LDR X2, [X26]
	0x03B43924 MOV X1, X22
	0x03B43928 BL 0x2DBEF30
	0x03B4392C LDR X0, [X25]
	0x03B43930 LDR W8, [X0 + 0xE0]
	0x03B43934 CBNZ W8, 0x3B4393C
	0x03B43938 BL 0x1C16DFC
	0x03B4393C MOVZ W2, 0x1
	0x03B43940 MOV X0, X22
	0x03B43944 MOV X1, X19
	0x03B43948 MOV X3, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8A0000
	005 Move W8, [X20+2157]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x618000
	012 Move X0, [X0+1528]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2157], W8
	016 Move X0, [X19+608]
	017 Compare X0, 0
	018 JumpIfEqual {39}
	019 Move X8, 0x618000
	020 Move X8, [X8+1528]
	021 Move X1, [X8]
	022 Call 0x28BA738, X0
	023 Compare W0, 0
	024 JumpIfEqual {29}
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Move X0, X19
	030 Call XRGrabInteractable.GetOrAddDefaultGrabTransformer, X0
	031 Move X2, [X19+608]
	032 Move X1, X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Call XRGrabInteractable.AddGrabTransformer, X0, X1, X2
	038 Return 
	039 Call 0x1C17F20

Method: System.Void AddDefaultMultipleGrabTransformer()

Disassembly:
	0x03B43994 SUB X31, X31, 0x50
	0x03B43998 STR X30, [X31 + 0x20]
	0x03B4399C STP X22, X21, [X31 + 0x30]
	0x03B439A0 STP X20, X19, [X31 + 0x40]
	0x03B439A4 ADRP X21, 0x89F000
	0x03B439A8 LDRB W8, [X21 + 0x877]
	0x03B439AC MOV X20, X1
	0x03B439B0 MOV X19, X0
	0x03B439B4 TBNZ X8, 0x0, 0x3B43A20
	0x03B439B8 ADRP X0, 0x617000
	0x03B439BC LDR X0, [X0 + 0x790]
	0x03B439C0 BL 0x1C16CF4
	0x03B439C4 ADRP X0, 0x617000
	0x03B439C8 LDR X0, [X0 + 0x798]
	0x03B439CC BL 0x1C16CF4
	0x03B439D0 ADRP X0, 0x617000
	0x03B439D4 LDR X0, [X0 + 0x2F8]
	0x03B439D8 BL 0x1C16CF4
	0x03B439DC ADRP X0, 0x617000
	0x03B439E0 LDR X0, [X0 + 0x7A0]
	0x03B439E4 BL 0x1C16CF4
	0x03B439E8 ADRP X0, 0x617000
	0x03B439EC LDR X0, [X0 + 0x168]
	0x03B439F0 BL 0x1C16CF4
	0x03B439F4 ADRP X0, 0x617000
	0x03B439F8 LDR X0, [X0 + 0x7A8]
	0x03B439FC BL 0x1C16CF4
	0x03B43A00 ADRP X0, 0x5B7000
	0x03B43A04 LDR X0, [X0 + 0xD48]
	0x03B43A08 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x8A0000
	005 Move W8, [X20+2158]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x618000
	012 Move X0, [X0+1528]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2158], W8
	016 Move X0, [X19+616]
	017 Compare X0, 0
	018 JumpIfEqual {39}
	019 Move X8, 0x618000
	020 Move X8, [X8+1528]
	021 Move X1, [X8]
	022 Call 0x28BA738, X0
	023 Compare W0, 0
	024 JumpIfEqual {29}
	025 Move X20, [X31+16]
	026 Move X19, [X31+24]
	027 Move X30, [X31+32]
	028 Return 
	029 Move X0, X19
	030 Call XRGrabInteractable.GetOrAddDefaultGrabTransformer, X0
	031 Move X2, [X19+616]
	032 Move X1, X0
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Call XRGrabInteractable.AddGrabTransformer, X0, X1, X2
	038 Return 
	039 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.Transformers.IXRGrabTransformer GetOrAddDefaultGrabTransformer()

Disassembly:
	0x03B4394C BL 0x3C8A8BC
	0x03B43950 LDR X0, [X20 + 0x348]
	0x03B43954 ADD W21, W21, 0x1
	0x03B43958 CBNZ X0, 0x3B4389C
	0x03B4395C BL 0x1C16F20
	0x03B43960 LDP X20, X19, [X31 + 0x40]
	0x03B43964 LDP X22, X21, [X31 + 0x30]
	0x03B43968 LDP X24, X23, [X31 + 0x20]
	0x03B4396C LDP X26, X25, [X31 + 0x10]
	0x03B43970 LDR X30, [X31], #0x50
	0x03B43974 RET
	0x03B43978 STR X30, [X31 - 0x10]!
	0x03B4397C LDR X0, [X0 + 0x360]
	0x03B43980 CBZ X0, 0x3B43990
	0x03B43984 MOV X2, X31
	0x03B43988 LDR X30, [X31], #0x10
	0x03B4398C B 0x3B8F018
	0x03B43990 BL 0x1C16F20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8A0000
	006 Move X21, 0x618000
	007 Move W8, [X20+2159]
	008 Move X21, [X21+1872]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x618000
	015 Move X0, [X0+1872]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2159], W8
	019 Move X1, [X21]
	020 Move X0, X19
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X30, [X31+32]
	024 Move X21, [X31+40]
	025 Call 0x22AE2B4, X0
	026 Return X0

Method: T GetOrAddComponent()

Disassembly:
	0x022AE2B4 BL 0x2AA64F8
	0x022AE2B8 ADRP X10, 0x1E6E000
	0x022AE2BC LDR X8, [X19]
	0x022AE2C0 LDR X10, [X10 + 0x9F8]
	0x022AE2C4 LDRH W9, [X8 + 0x12E]
	0x022AE2C8 LDR X1, [X10]
	0x022AE2CC CBZ X9, 0x22AE2F0
	0x022AE2D0 LDR X10, [X8 + 0xB0]
	0x022AE2D4 ADD X10, X10, 0x8
	0x022AE2D8 LDUR X11, [X10 - 0x8]
	0x022AE2DC CMP X11, X1
	0x022AE2E0 B.EQ 0x22AE30C
	0x022AE2E4 SUBS X9, X9, 0x1
	0x022AE2E8 ADD X10, X10, 0x10
	0x022AE2EC B.NE 0x22AE2D8
	0x022AE2F0 MOVZ W2, 0x2
	0x022AE2F4 MOV X0, X19
	0x022AE2F8 BL 0x1C5C788
	0x022AE2FC B 0x22AE31C
	0x022AE300 LDP X20, X19, [X31 + 0x10]
	0x022AE304 LDP X30, X21, [X31], #0x20
	0x022AE308 RET
	0x022AE30C LDR W9, [X10]
	0x022AE310 ADD W9, W9, 0x2
	0x022AE314 ADD X8, X8, W9, 0x4, SXTW
	0x022AE318 ADD X0, X8, 0x138
	0x022AE31C LDP X2, X1, [X0]
	0x022AE320 MOV X0, X19
	0x022AE324 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X1+56]
	005 Move X19, X1
	006 Move X20, X0
	007 Compare X8, 0
	008 JumpIfNotEqual {11}
	009 Move X0, X19
	010 Call 0x1C5D6E0
	011 Move [X31+8], X31
	012 Compare X20, 0
	013 JumpIfEqual {36}
	014 Move X8, [X19+56]
	015 Add X1, X31, 8
	016 Move X0, X20
	017 Move X2, [X8]
	018 Call 0x21A5990, X0, X1
	019 Move TEMP, X0
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfNotEqual {24}
	023 Move X0, [X31+8]
	024 Move X0, X20
	025 Move X1, X31
	026 Call Component.get_gameObject, X0
	027 Compare X0, 0
	028 JumpIfEqual {36}
	029 Move X8, [X19+56]
	030 Move X1, [X8+16]
	031 Call 0x21E61FC, X0
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0
	036 Call 0x1C17F20

Method: System.Void UpdateTarget(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, System.Single deltaTime)

Disassembly:
	0x03B40D6C LDR X0, [X0 + 0x720]
	0x03B40D70 BL 0x1C16CF4
	0x03B40D74 ADRP X0, 0x61A000
	0x03B40D78 LDR X0, [X0 + 0x728]
	0x03B40D7C BL 0x1C16CF4
	0x03B40D80 ADRP X0, 0x61A000
	0x03B40D84 LDR X0, [X0 + 0x730]
	0x03B40D88 BL 0x1C16CF4
	0x03B40D8C ADRP X0, 0x61A000
	0x03B40D90 LDR X0, [X0 + 0x6F0]
	0x03B40D94 BL 0x1C16CF4
	0x03B40D98 ADRP X0, 0x61A000
	0x03B40D9C LDR X0, [X0 + 0x738]
	0x03B40DA0 BL 0x1C16CF4
	0x03B40DA4 ADRP X0, 0x61A000
	0x03B40DA8 LDR X0, [X0 + 0x740]
	0x03B40DAC BL 0x1C16CF4
	0x03B40DB0 MOVZ W8, 0x1
	0x03B40DB4 STRB W8, [X20 + 0x866]
	0x03B40DB8 STP X31, X31, [X31 + 0x20]
	0x03B40DBC STR X31, [X31 + 0x30]
	0x03B40DC0 LDR X8, [X19 + 0x260]
	0x03B40DC4 MOVZ W9, 0x1
	0x03B40DC8 STRB W9, [X19 + 0x284]
	0x03B40DCC CBZ X8, 0x3B40FCC
	0x03B40DD0 LDR X0, [X8 + 0x10]
	0x03B40DD4 CBZ X0, 0x3B40FCC
	0x03B40DD8 LDR W8, [X0 + 0x18]
	0x03B40DDC ADRP X25, 0x61A000
	0x03B40DE0 ADRP X23, 0x61A000
	0x03B40DE4 ADRP X24, 0x61A000
	0x03B40DE8 ADRP X22, 0x61A000
	0x03B40DEC LDR X25, [X25 + 0x738]
	0x03B40DF0 LDR X23, [X23 + 0x728]
	0x03B40DF4 LDR X24, [X24 + 0x6F0]
	0x03B40DF8 LDR X22, [X22 + 0x720]
	0x03B40DFC CMP W8, 0x1
	0x03B40E00 B.LT 0x3B40EC4
	0x03B40E04 LDR X1, [X25]
	0x03B40E08 ADD X8, X31, 0x8
	0x03B40E0C BL 0x301CB58
	0x03B40E10 LDUR V0, [X31 + 0x8]
	0x03B40E14 LDR X8, [X31 + 0x18]
	0x03B40E18 STR V0, [X31 + 0x2]
	0x03B40E1C STR X8, [X31 + 0x30]
	0x03B40E20 LDR X1, [X23]
	0x03B40E24 ADD X0, X31, 0x20
	0x03B40E28 BL 0x2BC4350
	0x03B40E2C TBZ X0, 0x0, 0x3B40EB8
	0x03B40E30 LDR X0, [X19 + 0x260]
	0x03B40E34 CBZ X0, 0x3B40FBC
	0x03B40E38 LDR X8, [X0]
	0x03B40E3C LDR X20, [X31 + 0x30]
	0x03B40E40 LDP X9, X2, [X8 + 0x188]
	0x03B40E44 MOV X1, X20
	0x03B40E48 BLR X9
	0x03B40E4C TBZ X0, 0x0, 0x3B40E20
	0x03B40E50 CBZ X20, 0x3B40FC4
	0x03B40E54 LDR X8, [X20]
	0x03B40E58 LDR X1, [X24]
	0x03B40E5C LDRH W9, [X8 + 0x12E]
	0x03B40E60 CBZ X9, 0x3B40E84
	0x03B40E64 LDR X10, [X8 + 0xB0]
	0x03B40E68 ADD X10, X10, 0x8
	0x03B40E6C LDUR X11, [X10 - 0x8]
	0x03B40E70 CMP X11, X1
	0x03B40E74 B.EQ 0x3B40E94
	0x03B40E78 SUBS X9, X9, 0x1
	0x03B40E7C ADD X10, X10, 0x10
	0x03B40E80 B.NE 0x3B40E6C
	0x03B40E84 MOVZ W2, 0x2
	0x03B40E88 MOV X0, X20
	0x03B40E8C BL 0x1C5C788
	0x03B40E90 B 0x3B40EA4
	0x03B40E94 LDR W9, [X10]
	0x03B40E98 ADD W9, W9, 0x2
	0x03B40E9C ADD X8, X8, W9, 0x4, SXTW
	0x03B40EA0 ADD X0, X8, 0x138
	0x03B40EA4 LDP X8, X2, [X0]
	0x03B40EA8 MOV X0, X20
	0x03B40EAC MOV X1, X19
	0x03B40EB0 BLR X8
	0x03B40EB4 B 0x3B40E20
	0x03B40EB8 LDR X1, [X22]
	0x03B40EBC ADD X0, X31, 0x20
	0x03B40EC0 BL 0x2BC434C
	0x03B40EC4 LDR X8, [X19 + 0x268]
	0x03B40EC8 CBZ X8, 0x3B40FCC
	0x03B40ECC LDR X0, [X8 + 0x10]
	0x03B40ED0 CBZ X0, 0x3B40FCC
	0x03B40ED4 LDR W8, [X0 + 0x18]
	0x03B40ED8 CMP W8, 0x1
	0x03B40EDC B.LT 0x3B40FA0
	0x03B40EE0 LDR X1, [X25]
	0x03B40EE4 ADD X8, X31, 0x8
	0x03B40EE8 BL 0x301CB58
	0x03B40EEC LDUR V0, [X31 + 0x8]
	0x03B40EF0 LDR X8, [X31 + 0x18]
	0x03B40EF4 STR V0, [X31 + 0x2]
	0x03B40EF8 STR X8, [X31 + 0x30]
	0x03B40EFC LDR X1, [X23]
	0x03B40F00 ADD X0, X31, 0x20
	0x03B40F04 BL 0x2BC4350
	0x03B40F08 TBZ X0, 0x0, 0x3B40F94
	0x03B40F0C LDR X0, [X19 + 0x268]
	0x03B40F10 CBZ X0, 0x3B40FC0
	0x03B40F14 LDR X8, [X0]
	0x03B40F18 LDR X20, [X31 + 0x30]
	0x03B40F1C LDP X9, X2, [X8 + 0x188]
	0x03B40F20 MOV X1, X20
	0x03B40F24 BLR X9
	0x03B40F28 TBZ X0, 0x0, 0x3B40EFC
	0x03B40F2C CBZ X20, 0x3B40FC8
	0x03B40F30 LDR X8, [X20]
	0x03B40F34 LDR X1, [X24]
	0x03B40F38 LDRH W9, [X8 + 0x12E]
	0x03B40F3C CBZ X9, 0x3B40F60
	0x03B40F40 LDR X10, [X8 + 0xB0]
	0x03B40F44 ADD X10, X10, 0x8
	0x03B40F48 LDUR X11, [X10 - 0x8]
	0x03B40F4C CMP X11, X1
	0x03B40F50 B.EQ 0x3B40F70
	0x03B40F54 SUBS X9, X9, 0x1
	0x03B40F58 ADD X10, X10, 0x10
	0x03B40F5C B.NE 0x3B40F48
	0x03B40F60 MOVZ W2, 0x2
	0x03B40F64 MOV X0, X20
	0x03B40F68 BL 0x1C5C788
	0x03B40F6C B 0x3B40F80
	0x03B40F70 LDR W9, [X10]
	0x03B40F74 ADD W9, W9, 0x2
	0x03B40F78 ADD X8, X8, W9, 0x4, SXTW
	0x03B40F7C ADD X0, X8, 0x138
	0x03B40F80 LDP X8, X2, [X0]
	0x03B40F84 MOV X0, X20
	0x03B40F88 MOV X1, X19
	0x03B40F8C BLR X8
	0x03B40F90 B 0x3B40EFC
	0x03B40F94 LDR X1, [X22]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], D8
	003 Move [X31+104], X30
	004 Move [X31+112], X22
	005 Move [X31+120], X21
	006 Move [X31+128], X20
	007 Move [X31+136], X19
	008 Move X21, 0x8A3000
	009 Move W8, [X21+2160]
	010 Move V8, V0
	011 Move W20, W1
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {31}
	017 Move X0, 0x61B000
	018 Move X0, [X0+1664]
	019 Call 0x1C17CF4
	020 Move X0, 0x61B000
	021 Move X0, [X0+1672]
	022 Call 0x1C17CF4
	023 Move X0, 0x61B000
	024 Move X0, [X0+360]
	025 Call 0x1C17CF4
	026 Move X0, 0x61B000
	027 Move X0, [X0+368]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X21+2160], W8
	031 Move [X31+88], X31
	032 Move [X31+48], X31
	033 Move [X31+56], X31
	034 Move [X31+72], W31
	035 Move [X31+64], X31
	036 Move [X31+40], W31
	037 Move [X31+32], X31
	038 Move W8, [X19+484]
	039 Compare W8, 0
	040 JumpIfEqual {104}
	041 Move W8, [X19+632]
	042 Compare W8, 0
	043 JumpIfEqual {104}
	044 Move W8, [X19+640]
	045 Move W9, [X19+636]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Move X0, X19
	048 Call XRBaseInteractable.get_interactorsSelecting, X0
	049 Compare X0, 0
	050 JumpIfEqual {155}
	051 Move W8, [X0+24]
	052 NotImplemented "Instruction CMP not yet implemented."
	053 Move X0, [X19+872]
	054 Compare X0, 0
	055 JumpIfEqual {155}
	056 Move X8, 0x61B000
	057 Move X8, [X8+1672]
	058 Move X1, [X8]
	059 Call Dictionary`2<Object, Object>.get_Count, X0
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X21, [X19+872]
	062 Move X0, X19
	063 Call XRBaseInteractable.get_interactorsSelecting, X0
	064 Compare X0, 0
	065 JumpIfEqual {155}
	066 Move X22, 0x61B000
	067 Move X22, [X22+368]
	068 Move W1, W31
	069 Move X2, [X22]
	070 Call List`1<Object>.get_Item, X0, X1
	071 Compare X21, 0
	072 JumpIfEqual {155}
	073 Move X8, 0x61B000
	074 Move X8, [X8+1664]
	075 Move X1, X0
	076 Add X2, X31, 88
	077 Move X0, X21
	078 Move X3, [X8]
	079 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {104}
	084 Move X0, X19
	085 Call XRBaseInteractable.get_interactorsSelecting, X0
	086 Compare X0, 0
	087 JumpIfEqual {155}
	088 Move X2, [X22]
	089 Move W1, W31
	090 Call List`1<Object>.get_Item, X0, X1
	091 Move X21, [X31+88]
	092 Move X22, X0
	093 Move X0, X19
	094 Move X1, X22
	095 Move X2, X21
	096 Call XRGrabInteractable.InitializeDynamicAttachPoseWithStatic, X0, X1, X2
	097 Move X8, [X19]
	098 Move X0, X19
	099 Move X1, X22
	100 Move X2, X21
	101 Move X9, [X8+2216]
	102 Move X3, [X8+2224]
	103 NotImplemented "Instruction BLR not yet implemented."
	104 Add X21, X19, 652
	105 NotImplemented "Instruction LDUR not yet implemented."
	106 Move V1, [X21]
	107 Add X2, X31, 48
	108 Add X3, X31, 32
	109 Move [X31+60], V0
	110 Move [X31+3], V1
	111 Move W8, [X19+688]
	112 Move X9, [X19+680]
	113 Move X0, X19
	114 Move W1, W20
	115 Move [X31+40], W8
	116 Move [X31+32], X9
	117 Call XRGrabInteractable.InvokeGrabTransformersProcess, X0, X1, X2, X3
	118 Move X0, X19
	119 Call XRBaseInteractable.get_isSelected, X0
	120 Move TEMP, X0
	121 And TEMP, TEMP, 1
	122 Compare TEMP, 1
	123 JumpIfNotEqual {138}
	124 NotImplemented "Instruction CMP not yet implemented."
	125 Move V0, [X31+3]
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 Add X1, X31, 0
	128 Move X0, X19
	129 Move [X31], V0
	130 Move V0, V8
	131 Move [X31+12], V1
	132 Call XRGrabInteractable.StepThrowSmoothing, X0, X1, V0
	133 Add X1, X31, 48
	134 Add X2, X31, 32
	135 Move X0, X19
	136 Move V0, V8
	137 Call XRGrabInteractable.StepSmoothing, X0, X1, X2, V0
	138 NotImplemented "Instruction LDUR not yet implemented."
	139 Move V1, [X31+3]
	140 Add X10, X19, 680
	141 Move [X21+12], V0
	142 Move [X21], V1
	143 Move W8, [X31+40]
	144 Move X9, [X31+32]
	145 Move [X10+8], W8
	146 Move [X10], X9
	147 Move X20, [X31+128]
	148 Move X19, [X31+136]
	149 Move X22, [X31+112]
	150 Move X21, [X31+120]
	151 Move X30, [X31+104]
	152 Move V8, [X31+96]
	153 Add X31, X31, 144
	154 Return 
	155 Call 0x1C17F20

Method: System.Void StepSmoothing(in UnityEngine.Pose rawTargetPose, in UnityEngine.Vector3 rawTargetLocalScale, System.Single deltaTime)

Disassembly:
	0x03B43CF8 LDR X30, [X31], #0x20
	0x03B43CFC B 0x3B43D04
	0x03B43D00 BL 0x1C16F20
	0x03B43D04 SUB X31, X31, 0x30
	0x03B43D08 STP X30, X21, [X31 + 0x10]
	0x03B43D0C STP X20, X19, [X31 + 0x20]
	0x03B43D10 ADRP X21, 0x89F000
	0x03B43D14 LDRB W8, [X21 + 0x87A]
	0x03B43D18 MOV X19, X1
	0x03B43D1C MOV X20, X0
	0x03B43D20 TBNZ X8, 0x0, 0x3B43D74
	0x03B43D24 ADRP X0, 0x617000
	0x03B43D28 LDR X0, [X0 + 0x690]
	0x03B43D2C BL 0x1C16CF4
	0x03B43D30 ADRP X0, 0x617000
	0x03B43D34 LDR X0, [X0 + 0x680]
	0x03B43D38 BL 0x1C16CF4
	0x03B43D3C ADRP X0, 0x617000
	0x03B43D40 LDR X0, [X0 + 0x688]
	0x03B43D44 BL 0x1C16CF4
	0x03B43D48 ADRP X0, 0x617000
	0x03B43D4C LDR X0, [X0 + 0x7B0]
	0x03B43D50 BL 0x1C16CF4
	0x03B43D54 ADRP X0, 0x5B0000
	0x03B43D58 LDR X0, [X0 + 0x598]
	0x03B43D5C BL 0x1C16CF4
	0x03B43D60 ADRP X0, 0x617000
	0x03B43D64 LDR X0, [X0 + 0x6C0]
	0x03B43D68 BL 0x1C16CF4
	0x03B43D6C MOVZ W8, 0x1
	0x03B43D70 STRB W8, [X21 + 0x87A]
	0x03B43D74 STR X31, [X31 + 0x8]
	0x03B43D78 LDR X0, [X20 + 0x368]
	0x03B43D7C CBZ X0, 0x3B43E54
	0x03B43D80 ADRP X8, 0x617000
	0x03B43D84 LDR X8, [X8 + 0x688]
	0x03B43D88 LDR X1, [X8]
	0x03B43D8C BL 0x2AA4E88
	0x03B43D90 CMP W0, 0x1
	0x03B43D94 B.LT 0x3B43E44
	0x03B43D98 LDR X0, [X20 + 0x368]
	0x03B43D9C CBZ X0, 0x3B43E54
	0x03B43DA0 ADRP X8, 0x617000
	0x03B43DA4 LDR X8, [X8 + 0x680]
	0x03B43DA8 ADD X2, X31, 0x8
	0x03B43DAC MOV X1, X19
	0x03B43DB0 LDR X3, [X8]
	0x03B43DB4 BL 0x2AA6B2C
	0x03B43DB8 TBZ X0, 0x0, 0x3B43E44
	0x03B43DBC ADRP X8, 0x5B0000
	0x03B43DC0 LDR X8, [X8 + 0x598]
	0x03B43DC4 LDR X21, [X31 + 0x8]
	0x03B43DC8 LDR X0, [X8]
	0x03B43DCC LDR W8, [X0 + 0xE0]
	0x03B43DD0 CBNZ W8, 0x3B43DD8
	0x03B43DD4 BL 0x1C16DFC
	0x03B43DD8 MOV X0, X21
	0x03B43DDC MOV X1, X31
	0x03B43DE0 MOV X2, X31
	0x03B43DE4 BL 0x3C354F8
	0x03B43DE8 TBZ X0, 0x0, 0x3B43E28
	0x03B43DEC ADRP X21, 0x617000
	0x03B43DF0 LDR X21, [X21 + 0x6C0]
	0x03B43DF4 LDR X0, [X21]
	0x03B43DF8 LDR W8, [X0 + 0xE0]
	0x03B43DFC CBNZ W8, 0x3B43E08
	0x03B43E00 BL 0x1C16DFC
	0x03B43E04 LDR X0, [X21]
	0x03B43E08 LDR X8, [X0 + 0xB8]
	0x03B43E0C LDR X0, [X8 + 0x8]
	0x03B43E10 CBZ X0, 0x3B43E54
	0x03B43E14 ADRP X8, 0x617000
	0x03B43E18 LDR X1, [X31 + 0x8]
	0x03B43E1C LDR X8, [X8 + 0x7B0]
	0x03B43E20 LDR X2, [X8]
	0x03B43E24 BL 0x2EF10B8
	0x03B43E28 LDR X0, [X20 + 0x368]
	0x03B43E2C CBZ X0, 0x3B43E54
	0x03B43E30 ADRP X8, 0x617000
	0x03B43E34 LDR X8, [X8 + 0x690]
	0x03B43E38 MOV X1, X19
	0x03B43E3C LDR X2, [X8]
	0x03B43E40 BL 0x2AA64F8
	0x03B43E44 LDP X20, X19, [X31 + 0x20]
	0x03B43E48 LDP X30, X21, [X31 + 0x10]
	0x03B43E4C ADD X31, X31, 0x30
	0x03B43E50 RET
	0x03B43E54 BL 0x1C16F20
	0x03B43E58 STR D10, [X31 - 0x50]!
	0x03B43E5C STP D9, D8, [X31 + 0x10]
	0x03B43E60 STP X30, X23, [X31 + 0x20]
	0x03B43E64 STP X22, X21, [X31 + 0x30]

ISIL:
	001 Move [X31-128], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X25
	010 Move [X31+80], X24
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X22, 0x8A0000
	017 Move W8, [X22+2161]
	018 Move V8, V0
	019 Move X19, X2
	020 Move X20, X1
	021 Move X21, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x618000
	027 Move X0, [X0+1728]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X22+2161], W8
	031 Move V9, [X21+488]
	032 Move X8, 0x618000
	033 Move X8, [X8+1728]
	034 NotImplemented "Instruction FCMP not yet implemented."
	035 Move V0, [X21+696]
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move X0, [X8]
	038 Move W23, [X21+513]
	039 Move V9, [X21+516]
	040 Move V10, [X21+520]
	041 Move W24, [X21+525]
	042 Move V11, [X21+528]
	043 Move V14, [X21+532]
	044 Move W25, [X21+537]
	045 Move V12, [X21+540]
	046 Move W8, [X0+224]
	047 Move V13, [X21+544]
	048 Add X22, X21, 652
	049 Add X21, X21, 680
	050 Compare W8, 0
	051 JumpIfNotEqual {53}
	052 Call 0x1C17DFC
	053 NotImplemented "Instruction CMP not yet implemented."
	054 NotImplemented "Instruction CSET not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 NotImplemented "Instruction CSET not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move V0, V8
	059 Move V1, V9
	060 Move V2, V10
	061 Move V3, V11
	062 Move V5, V12
	063 Move V6, V13
	064 Move X0, X22
	065 Move X1, X21
	066 Move X2, X20
	067 Move X3, X19
	068 Move X20, [X31+112]
	069 Move X19, [X31+120]
	070 Move X22, [X31+96]
	071 Move X21, [X31+104]
	072 Move X24, [X31+80]
	073 Move X23, [X31+88]
	074 Move X30, [X31+64]
	075 Move X25, [X31+72]
	076 Move D9, [X31+48]
	077 Move D8, [X31+56]
	078 Move D11, [X31+32]
	079 Move D10, [X31+40]
	080 Move D13, [X31+16]
	081 Move D12, [X31+24]
	082 NotImplemented "Instruction CSET not yet implemented."
	083 Move V4, V14
	084 Move V14, [X31+128]
	085 Call XRGrabInteractable.StepSmoothingBurst, X0, X1, X2, X3, V0, X4, V1, V2, X5, V3, V4, X6, V5, V6
	086 Return 
	087 Move X0, [X8]
	088 Add X22, X21, 696
	089 Add X23, X21, 652
	090 Add X21, X21, 680
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X23
	096 Move X1, X21
	097 Move X2, X20
	098 Move X3, X19
	099 Move V0, V8
	100 Move V1, V9
	101 Move X4, X22
	102 Move X20, [X31+112]
	103 Move X19, [X31+120]
	104 Move X22, [X31+96]
	105 Move X21, [X31+104]
	106 Move X24, [X31+80]
	107 Move X23, [X31+88]
	108 Move X30, [X31+64]
	109 Move X25, [X31+72]
	110 Move D9, [X31+48]
	111 Move D8, [X31+56]
	112 Move D11, [X31+32]
	113 Move D10, [X31+40]
	114 Move D13, [X31+16]
	115 Move D12, [X31+24]
	116 Move V14, [X31+128]

Method: System.Void EaseAttachBurst(ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 targetLocalScale, in UnityEngine.Pose rawTargetPose, in UnityEngine.Vector3 rawTargetLocalScale, System.Single deltaTime, System.Single attachEaseInTime, ref System.Single currentAttachEaseTime)

Disassembly:
	0x03B43E68 STP X20, X19, [X31 + 0x40]
	0x03B43E6C ADRP X20, 0x89F000
	0x03B43E70 LDRB W8, [X20 + 0x879]
	0x03B43E74 MOV X19, X2
	0x03B43E78 MOV X22, X1
	0x03B43E7C MOV X21, X0
	0x03B43E80 TBNZ X8, 0x0, 0x3B43EB0
	0x03B43E84 ADRP X0, 0x617000
	0x03B43E88 LDR X0, [X0 + 0x690]
	0x03B43E8C BL 0x1C16CF4
	0x03B43E90 ADRP X0, 0x617000
	0x03B43E94 LDR X0, [X0 + 0x7B8]
	0x03B43E98 BL 0x1C16CF4
	0x03B43E9C ADRP X0, 0x5B0000
	0x03B43EA0 LDR X0, [X0 + 0x598]
	0x03B43EA4 BL 0x1C16CF4
	0x03B43EA8 MOVZ W8, 0x1
	0x03B43EAC STRB W8, [X20 + 0x879]
	0x03B43EB0 LDR X0, [X21 + 0x368]
	0x03B43EB4 CBZ X0, 0x3B440D8
	0x03B43EB8 ADRP X8, 0x617000
	0x03B43EBC LDR X8, [X8 + 0x690]
	0x03B43EC0 MOV X1, X22
	0x03B43EC4 LDR X2, [X8]
	0x03B43EC8 BL 0x2AA64F8
	0x03B43ECC LDR X8, [X21]
	0x03B43ED0 MOV X0, X21
	0x03B43ED4 MOV X1, X22
	0x03B43ED8 LDR X9, [X8 + 0x5A8]
	0x03B43EDC LDR X2, [X8 + 0x5B0]
	0x03B43EE0 BLR X9
	0x03B43EE4 LDR X8, [X21 + 0x368]
	0x03B43EE8 CBZ X8, 0x3B440D8
	0x03B43EEC ADRP X9, 0x617000
	0x03B43EF0 LDR X9, [X9 + 0x7B8]
	0x03B43EF4 ADRP X23, 0x5B0000
	0x03B43EF8 MOV X20, X0
	0x03B43EFC MOV X0, X8
	0x03B43F00 LDR X3, [X9]

ISIL:
	001 Move [X31-80], D9
	002 Move [X31-72], D8
	003 Move [X31+16], X30
	004 Move [X31+24], X25
	005 Move [X31+32], X24
	006 Move [X31+40], X23
	007 Move [X31+48], X22
	008 Move [X31+56], X21
	009 Move [X31+64], X20
	010 Move [X31+72], X19
	011 Move X24, 0x8A0000
	012 Move X25, 0x618000
	013 Move W8, [X24+2162]
	014 Move X25, [X25+1880]
	015 Move X19, X4
	016 Move V8, V1
	017 Move V9, V0
	018 Move X20, X3
	019 Move X21, X2
	020 Move X22, X1
	021 Move X23, X0
	022 Move TEMP, X8
	023 And TEMP, TEMP, 1
	024 Compare TEMP, 1
	025 JumpIfEqual {31}
	026 Move X0, 0x618000
	027 Move X0, [X0+1880]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X24+2162], W8
	031 Move X0, [X25]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X23
	037 Move X1, X22
	038 Move X2, X21
	039 Move X3, X20
	040 Move X4, X19
	041 Move X20, [X31+64]
	042 Move X19, [X31+72]
	043 Move X22, [X31+48]
	044 Move X21, [X31+56]
	045 Move X24, [X31+32]
	046 Move X23, [X31+40]
	047 Move X30, [X31+16]
	048 Move X25, [X31+24]
	049 Move V0, V9
	050 Move V1, V8
	051 Move D9, [X31+80]
	052 Move D8, [X31+88]
	053 Call EaseAttachBurst_00000291$BurstDirectCall.Invoke, X0, X1, X2, X3, V0, V1, X4
	054 Return 

Method: System.Void StepSmoothingBurst(ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 targetLocalScale, in UnityEngine.Pose rawTargetPose, in UnityEngine.Vector3 rawTargetLocalScale, System.Single deltaTime, System.Boolean smoothPos, System.Single smoothPosAmount, System.Single tightenPos, System.Boolean smoothRot, System.Single smoothRotAmount, System.Single tightenRot, System.Boolean smoothScale, System.Single smoothScaleAmount, System.Single tightenScale)

Disassembly:
	0x03B43F04 LDR X23, [X23 + 0x598]
	0x03B43F08 MOV X1, X22
	0x03B43F0C MOV X2, X19
	0x03B43F10 BL 0x2AA5084
	0x03B43F14 MOV X0, X21
	0x03B43F18 MOV X1, X31
	0x03B43F1C BL 0x3C32E90
	0x03B43F20 LDR X8, [X23]
	0x03B43F24 MOV X22, X0
	0x03B43F28 LDR W9, [X8 + 0xE0]
	0x03B43F2C CBNZ W9, 0x3B43F38
	0x03B43F30 MOV X0, X8
	0x03B43F34 BL 0x1C16DFC
	0x03B43F38 MOV X0, X20
	0x03B43F3C MOV X1, X22
	0x03B43F40 MOV X2, X31
	0x03B43F44 BL 0x3C3883C
	0x03B43F48 TBZ X0, 0x0, 0x3B43FD0
	0x03B43F4C ADRP X20, 0x895000
	0x03B43F50 LDRB W8, [X20 + 0x783]
	0x03B43F54 CBNZ W8, 0x3B43F6C
	0x03B43F58 ADRP X0, 0x5B0000
	0x03B43F5C LDR X0, [X0 + 0x5A0]
	0x03B43F60 BL 0x1C16CF4
	0x03B43F64 MOVZ W8, 0x1
	0x03B43F68 STRB W8, [X20 + 0x783]
	0x03B43F6C CBZ X19, 0x3B440D8
	0x03B43F70 ADRP X8, 0x5B0000
	0x03B43F74 LDR X8, [X8 + 0x5A0]
	0x03B43F78 MOV X0, X19
	0x03B43F7C MOV X1, X31
	0x03B43F80 LDR X8, [X8]
	0x03B43F84 LDR X8, [X8 + 0xB8]
	0x03B43F88 LDP S1, S2, [X8 + 0x4]
	0x03B43F8C LDR V0, [X8]
	0x03B43F90 BL 0x3C3EC04
	0x03B43F94 ADRP X20, 0x895000
	0x03B43F98 LDRB W8, [X20 + 0x793]
	0x03B43F9C CBNZ W8, 0x3B43FB4
	0x03B43FA0 ADRP X0, 0x5B1000
	0x03B43FA4 LDR X0, [X0 + 0x5A8]
	0x03B43FA8 BL 0x1C16CF4
	0x03B43FAC MOVZ W8, 0x1
	0x03B43FB0 STRB W8, [X20 + 0x793]
	0x03B43FB4 ADRP X8, 0x5B1000
	0x03B43FB8 LDR X8, [X8 + 0x5A8]
	0x03B43FBC LDR X8, [X8]
	0x03B43FC0 LDR X8, [X8 + 0xB8]
	0x03B43FC4 LDP S0, S1, [X8]
	0x03B43FC8 LDP S2, S3, [X8 + 0x8]
	0x03B43FCC B 0x3B44044
	0x03B43FD0 CBZ X20, 0x3B440D8
	0x03B43FD4 MOV X0, X20
	0x03B43FD8 MOV X1, X31
	0x03B43FDC BL 0x3C3F49C
	0x03B43FE0 MOV X22, X0
	0x03B43FE4 MOV X0, X21
	0x03B43FE8 MOV X1, X31
	0x03B43FEC BL 0x3C32E90
	0x03B43FF0 LDR X8, [X23]
	0x03B43FF4 MOV X21, X0

ISIL:
	001 Move [X31-144], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X27
	010 Move [X31+80], X26
	011 Move [X31+88], X25
	012 Move [X31+96], X24
	013 Move [X31+104], X23
	014 Move [X31+112], X22
	015 Move [X31+120], X21
	016 Move [X31+128], X20
	017 Move [X31+136], X19
	018 Move X26, 0x8A0000
	019 Move X27, 0x618000
	020 Move W8, [X26+2163]
	021 Move X27, [X27+1888]
	022 Move V8, V6
	023 Move V9, V5
	024 Move W23, W6
	025 Move V10, V4
	026 Move V11, V3
	027 Move W24, W5
	028 Move V12, V2
	029 Move V13, V1
	030 Move W25, W4
	031 Move V14, V0
	032 Move X19, X3
	033 Move X20, X2
	034 Move X21, X1
	035 Move X22, X0
	036 Move TEMP, X8
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {45}
	040 Move X0, 0x618000
	041 Move X0, [X0+1888]
	042 Call 0x1C17CF4
	043 Move W8, 1
	044 Move [X26+2163], W8
	045 Move X0, [X27]
	046 Move W8, [X0+224]
	047 Compare W8, 0
	048 JumpIfNotEqual {50}
	049 Call 0x1C17DFC
	050 And W4, W25, 1
	051 And W5, W24, 1
	052 And W6, W23, 1
	053 Move V1, V13
	054 Move V2, V12
	055 Move V3, V11
	056 Move V4, V10
	057 Move V5, V9
	058 Move V6, V8
	059 Move X0, X22
	060 Move X1, X21
	061 Move X2, X20
	062 Move X3, X19
	063 Move X20, [X31+128]
	064 Move X19, [X31+136]
	065 Move X22, [X31+112]
	066 Move X21, [X31+120]
	067 Move X24, [X31+96]
	068 Move X23, [X31+104]
	069 Move X26, [X31+80]
	070 Move X25, [X31+88]
	071 Move X30, [X31+64]
	072 Move X27, [X31+72]
	073 Move D9, [X31+48]
	074 Move D8, [X31+56]
	075 Move D11, [X31+32]
	076 Move D10, [X31+40]
	077 Move D13, [X31+16]
	078 Move D12, [X31+24]
	079 Move V0, V14
	080 Move V14, [X31+144]
	081 Call StepSmoothingBurst_00000292$BurstDirectCall.Invoke, X0, X1, X2, X3, V0, X4, V1, V2, X5, V3, V4, X6, V5, V6
	082 Return 

Method: System.Void PerformInstantaneousUpdate(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B40CB4 LDUR X11, [X10 - 0x8]
	0x03B40CB8 CMP X11, X1
	0x03B40CBC B.EQ 0x3B40CDC
	0x03B40CC0 SUBS X9, X9, 0x1
	0x03B40CC4 ADD X10, X10, 0x10
	0x03B40CC8 B.NE 0x3B40CB4
	0x03B40CCC MOVZ W2, 0x5
	0x03B40CD0 MOV X0, X19
	0x03B40CD4 BL 0x1C5C788
	0x03B40CD8 B 0x3B40CEC
	0x03B40CDC LDR W9, [X10]
	0x03B40CE0 ADD W9, W9, 0x5
	0x03B40CE4 ADD X8, X8, W9, 0x4, SXTW
	0x03B40CE8 ADD X0, X8, 0x138
	0x03B40CEC LDP X8, X2, [X0]
	0x03B40CF0 MOV X0, X19
	0x03B40CF4 MOV X1, X20
	0x03B40CF8 BLR X8
	0x03B40CFC LDR X0, [X20 + 0x270]
	0x03B40D00 CBZ X0, 0x3B40D24
	0x03B40D04 ADRP X8, 0x61A000
	0x03B40D08 LDR X8, [X8 + 0x710]
	0x03B40D0C MOV X1, X19
	0x03B40D10 LDP X20, X19, [X31 + 0x20]
	0x03B40D14 LDP X22, X21, [X31 + 0x10]
	0x03B40D18 LDR X2, [X8]
	0x03B40D1C LDR X30, [X31], #0x30
	0x03B40D20 B 0x301D7A8
	0x03B40D24 LDP X20, X19, [X31 + 0x20]
	0x03B40D28 LDP X22, X21, [X31 + 0x10]
	0x03B40D2C LDR X30, [X31], #0x30
	0x03B40D30 RET
	0x03B40D34 BL 0x1C16F20
	0x03B40D38 SUB X31, X31, 0x80
	0x03B40D3C STP X30, X25, [X31 + 0x40]
	0x03B40D40 STP X24, X23, [X31 + 0x50]
	0x03B40D44 STP X22, X21, [X31 + 0x60]
	0x03B40D48 STP X20, X19, [X31 + 0x70]
	0x03B40D4C ADRP X20, 0x8A2000
	0x03B40D50 LDRB W8, [X20 + 0x866]
	0x03B40D54 MOV X19, X0
	0x03B40D58 TBNZ X8, 0x0, 0x3B40DB8
	0x03B40D5C ADRP X0, 0x61A000
	0x03B40D60 LDR X0, [X0 + 0x718]
	0x03B40D64 BL 0x1C16CF4
	0x03B40D68 ADRP X0, 0x61A000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Or W8, W1, 2
	005 NotImplemented "Instruction CMP not yet implemented."
	006 Move W8, [X0+512]
	007 Move W20, [X0+524]
	008 Move X19, X0
	009 Compare W8, 0
	010 JumpIfEqual {27}
	011 Move X0, X19
	012 Move X1, X31
	013 Call Component.get_transform, X0
	014 Move V0, [X19+652]
	015 Move V1, [X19+656]
	016 Move V2, [X19+660]
	017 Compare W20, 0
	018 JumpIfEqual {40}
	019 Compare X0, 0
	020 JumpIfEqual {51}
	021 Move V6, [X19+676]
	022 Move V5, [X19+672]
	023 Move V4, [X19+668]
	024 Move V3, [X19+664]
	025 Move X1, X31
	026 Call Transform.SetPositionAndRotation, X0, X1, X2
	027 Compare W20, 0
	028 JumpIfEqual {44}
	029 Move X0, X19
	030 Move X1, X31
	031 Call Component.get_transform, X0
	032 Compare X0, 0
	033 JumpIfEqual {51}
	034 Move V3, [X19+676]
	035 Move V2, [X19+672]
	036 Move V1, [X19+668]
	037 Move V0, [X19+664]
	038 Move X1, X31
	039 Call Transform.set_rotation, X0, X1
	040 Compare X0, 0
	041 JumpIfEqual {51}
	042 Move X1, X31
	043 Call Transform.set_position, X0, X1
	044 Move X0, X19
	045 Call XRGrabInteractable.ApplyTargetScale, X0
	046 NotImplemented "Instruction STRH not yet implemented."
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Return 
	051 Call 0x1C17F20

Method: System.Void PerformKinematicUpdate(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B40664 CBZ X1, 0x3B4067C
	0x03B40668 CBZ X0, 0x3B406C4
	0x03B4066C LDR X8, [X0]
	0x03B40670 LDP X3, X2, [X8 + 0x1C8]
	0x03B40674 LDP X30, X19, [X31], #0x10
	0x03B40678 BR X3
	0x03B4067C ADRP X0, 0x5B8000
	0x03B40680 LDR X0, [X0 + 0x528]
	0x03B40684 BL 0x1C16D08
	0x03B40688 BL 0x1C16F10
	0x03B4068C MOV X19, X0
	0x03B40690 ADRP X0, 0x5DB000
	0x03B40694 LDR X0, [X0 + 0xA58]
	0x03B40698 BL 0x1C16D08
	0x03B4069C MOV X1, X0
	0x03B406A0 MOV X0, X19
	0x03B406A4 MOV X2, X31
	0x03B406A8 BL 0x330E100
	0x03B406AC ADRP X0, 0x61A000
	0x03B406B0 LDR X0, [X0 + 0x6C8]
	0x03B406B4 BL 0x1C16D08
	0x03B406B8 MOV X1, X0
	0x03B406BC MOV X0, X19
	0x03B406C0 BL 0x1C16DEC
	0x03B406C4 BL 0x1C16F20
	0x03B406C8 STR X30, [X31 - 0x30]!
	0x03B406CC STP X22, X21, [X31 + 0x10]
	0x03B406D0 STP X20, X19, [X31 + 0x20]
	0x03B406D4 ADRP X22, 0x8A2000
	0x03B406D8 ADRP X21, 0x61A000
	0x03B406DC LDRB W8, [X22 + 0x860]
	0x03B406E0 LDR X21, [X21 + 0x6C0]
	0x03B406E4 MOV X19, X1
	0x03B406E8 MOV X20, X0
	0x03B406EC TBNZ X8, 0x0, 0x3B40704
	0x03B406F0 ADRP X0, 0x61A000
	0x03B406F4 LDR X0, [X0 + 0x6C0]
	0x03B406F8 BL 0x1C16CF4
	0x03B406FC MOVZ W8, 0x1
	0x03B40700 STRB W8, [X22 + 0x860]
	0x03B40704 LDR X0, [X21]
	0x03B40708 LDR X20, [X20 + 0x268]
	0x03B4070C LDR W8, [X0 + 0xE0]
	0x03B40710 CBNZ W8, 0x3B40718
	0x03B40714 BL 0x1C16DFC
	0x03B40718 MOV X0, X20
	0x03B4071C MOV X1, X19
	0x03B40720 LDP X20, X19, [X31 + 0x20]
	0x03B40724 LDP X22, X21, [X31 + 0x10]
	0x03B40728 LDR X30, [X31], #0x30
	0x03B4072C B 0x3B40660

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Compare W1, 0
	007 JumpIfNotEqual {57}
	008 Move W8, [X0+512]
	009 Move X19, X0
	010 Compare W8, 0
	011 JumpIfEqual {42}
	012 Move W8, [X19+580]
	013 Move V8, [X19+652]
	014 Move V9, [X19+656]
	015 Move V10, [X19+660]
	016 Compare W8, 0
	017 JumpIfEqual {34}
	018 Move X0, [X19+800]
	019 Compare X0, 0
	020 JumpIfEqual {63}
	021 Move X1, X31
	022 Call Rigidbody.get_worldCenterOfMass, X0
	023 Move X0, [X19+800]
	024 Compare X0, 0
	025 JumpIfEqual {63}
	026 Move X1, X31
	027 Subtract S10, S10, S2
	028 Subtract S9, S9, S1
	029 Subtract S8, S8, S0
	030 Call Rigidbody.get_position, X0
	031 Add S8, S8, S0
	032 Add S9, S9, S1
	033 Add S10, S10, S2
	034 Move X0, [X19+800]
	035 Compare X0, 0
	036 JumpIfEqual {63}
	037 Move V0, V8
	038 Move V1, V9
	039 Move V2, V10
	040 Move X1, X31
	041 Call Rigidbody.MovePosition, X0, X1
	042 Move W8, [X19+524]
	043 Compare W8, 0
	044 JumpIfEqual {54}
	045 Move X0, [X19+800]
	046 Compare X0, 0
	047 JumpIfEqual {63}
	048 Move V3, [X19+676]
	049 Move V2, [X19+672]
	050 Move V1, [X19+668]
	051 Move V0, [X19+664]
	052 Move X1, X31
	053 Call Rigidbody.MoveRotation, X0, X1
	054 Move X0, X19
	055 Call XRGrabInteractable.ApplyTargetScale, X0
	056 NotImplemented "Instruction STRH not yet implemented."
	057 Move X30, [X31+32]
	058 Move X19, [X31+40]
	059 Move D9, [X31+16]
	060 Move D8, [X31+24]
	061 Move V10, [X31+48]
	062 Return 
	063 Call 0x1C17F20

Method: System.Void PerformVelocityTrackingUpdate(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase, System.Single deltaTime)

Disassembly:
	0x03B40730 STR X30, [X31 - 0x10]!
	0x03B40734 LDR X0, [X0 + 0x260]
	0x03B40738 CBZ X0, 0x3B4074C
	0x03B4073C LDR X8, [X0]
	0x03B40740 LDP X3, X2, [X8 + 0x1D8]
	0x03B40744 LDR X30, [X31], #0x10
	0x03B40748 BR X3
	0x03B4074C BL 0x1C16F20
	0x03B40750 STR X30, [X31 - 0x10]!
	0x03B40754 LDR X0, [X0 + 0x268]
	0x03B40758 CBZ X0, 0x3B4076C
	0x03B4075C LDR X8, [X0]
	0x03B40760 LDP X3, X2, [X8 + 0x1D8]
	0x03B40764 LDR X30, [X31], #0x10
	0x03B40768 BR X3
	0x03B4076C BL 0x1C16F20
	0x03B40770 STP X30, X23, [X31 - 0x30]!
	0x03B40774 STP X22, X21, [X31 + 0x10]
	0x03B40778 STP X20, X19, [X31 + 0x20]
	0x03B4077C ADRP X23, 0x8A2000
	0x03B40780 LDRB W8, [X23 + 0x865]
	0x03B40784 MOV X22, X3
	0x03B40788 MOV W21, W2
	0x03B4078C MOV X20, X1
	0x03B40790 MOV X19, X0
	0x03B40794 TBNZ X8, 0x0, 0x3B407C4
	0x03B40798 ADRP X0, 0x61A000
	0x03B4079C LDR X0, [X0 + 0x6D0]
	0x03B407A0 BL 0x1C16CF4
	0x03B407A4 ADRP X0, 0x5B3000
	0x03B407A8 LDR X0, [X0 + 0xA28]
	0x03B407AC BL 0x1C16CF4
	0x03B407B0 ADRP X0, 0x61A000
	0x03B407B4 LDR X0, [X0 + 0x6D8]
	0x03B407B8 BL 0x1C16CF4
	0x03B407BC MOVZ W8, 0x1
	0x03B407C0 STRB W8, [X23 + 0x865]
	0x03B407C4 CBZ X20, 0x3B40894
	0x03B407C8 LDRB W8, [X19 + 0x284]
	0x03B407CC CBZ W8, 0x3B40838
	0x03B407D0 ADRP X21, 0x61A000
	0x03B407D4 ADRP X22, 0x5B3000
	0x03B407D8 LDR X21, [X21 + 0x6D8]
	0x03B407DC LDR X22, [X22 + 0xA28]
	0x03B407E0 MOV X0, X19
	0x03B407E4 MOV X1, X31
	0x03B407E8 BL 0x3C389D4
	0x03B407EC LDR X8, [X21]
	0x03B407F0 MOV X2, X0
	0x03B407F4 MOV X1, X20
	0x03B407F8 MOV X3, X31
	0x03B407FC MOV X0, X8
	0x03B40800 BL 0x3227BD4
	0x03B40804 LDR X8, [X22]
	0x03B40808 MOV X20, X0
	0x03B4080C LDR W9, [X8 + 0xE0]
	0x03B40810 CBNZ W9, 0x3B4081C
	0x03B40814 MOV X0, X8
	0x03B40818 BL 0x1C16DFC
	0x03B4081C MOV X0, X20
	0x03B40820 MOV X1, X19
	0x03B40824 LDP X20, X19, [X31 + 0x20]
	0x03B40828 LDP X22, X21, [X31 + 0x10]
	0x03B4082C MOV X2, X31
	0x03B40830 LDP X30, X23, [X31], #0x30
	0x03B40834 B 0x3C065A4
	0x03B40838 CBZ X22, 0x3B408DC
	0x03B4083C LDR X8, [X22]
	0x03B40840 MOV X0, X22
	0x03B40844 LDP X9, X1, [X8 + 0x1B8]
	0x03B40848 BLR X9
	0x03B4084C ADRP X8, 0x61A000
	0x03B40850 LDR X8, [X8 + 0x6D0]
	0x03B40854 MOV X0, X22
	0x03B40858 MOV X1, X20
	0x03B4085C MOV W2, W21
	0x03B40860 LDR X3, [X8]
	0x03B40864 BL 0x28B9ABC
	0x03B40868 TBZ X0, 0x0, 0x3B40884
	0x03B4086C MOV X0, X19
	0x03B40870 MOV X1, X20
	0x03B40874 LDP X20, X19, [X31 + 0x20]
	0x03B40878 LDP X22, X21, [X31 + 0x10]
	0x03B4087C LDP X30, X23, [X31], #0x30
	0x03B40880 B 0x3B40A00
	0x03B40884 LDP X20, X19, [X31 + 0x20]
	0x03B40888 LDP X22, X21, [X31 + 0x10]
	0x03B4088C LDP X30, X23, [X31], #0x30
	0x03B40890 RET
	0x03B40894 ADRP X0, 0x5B8000
	0x03B40898 LDR X0, [X0 + 0x528]
	0x03B4089C BL 0x1C16D08
	0x03B408A0 BL 0x1C16F10
	0x03B408A4 MOV X19, X0
	0x03B408A8 ADRP X0, 0x61A000
	0x03B408AC LDR X0, [X0 + 0x6B0]
	0x03B408B0 BL 0x1C16D08
	0x03B408B4 MOV X1, X0
	0x03B408B8 MOV X0, X19
	0x03B408BC MOV X2, X31
	0x03B408C0 BL 0x330E100
	0x03B408C4 ADRP X0, 0x61A000
	0x03B408C8 LDR X0, [X0 + 0x6E0]
	0x03B408CC BL 0x1C16D08
	0x03B408D0 MOV X1, X0
	0x03B408D4 MOV X0, X19
	0x03B408D8 BL 0x1C16DEC
	0x03B408DC BL 0x1C16F20
	0x03B408E0 ADD X9, X0, 0x28C
	0x03B408E4 LDUR V0, [X9 + 0xC]
	0x03B408E8 LDR V1, [X9]
	0x03B408EC STUR V0, [X8 + 0xC]
	0x03B408F0 STR V1, [X8]
	0x03B408F4 RET
	0x03B408F8 STP X30, X21, [X31 - 0x20]!
	0x03B408FC STP X20, X19, [X31 + 0x10]
	0x03B40900 ADRP X21, 0x8A2000
	0x03B40904 LDRB W8, [X21 + 0x861]
	0x03B40908 MOV X20, X1
	0x03B4090C MOV X19, X0
	0x03B40910 TBNZ X8, 0x0, 0x3B40928
	0x03B40914 ADRP X0, 0x61A000
	0x03B40918 LDR X0, [X0 + 0x168]
	0x03B4091C BL 0x1C16CF4
	0x03B40920 MOVZ W8, 0x1
	0x03B40924 STRB W8, [X21 + 0x861]
	0x03B40928 LDR W8, [X20 + 0x18]
	0x03B4092C LDR X9, [X20 + 0x10]
	0x03B40930 LDR V0, [X20]
	0x03B40934 ADD X10, X19, 0x28C
	0x03B40938 MOV X0, X19
	0x03B4093C STR W8, [X10 + 0x18]
	0x03B40940 STR X9, [X10 + 0x10]
	0x03B40944 STR V0, [X10]
	0x03B40948 BL 0x3B3A784
	0x03B4094C CBZ X0, 0x3B4096C
	0x03B40950 LDR W8, [X0 + 0x18]
	0x03B40954 CMP W8, 0x0
	0x03B40958 CSET W8, EQ
	0x03B4095C STRB W8, [X19 + 0x2B4]
	0x03B40960 LDP X20, X19, [X31 + 0x10]
	0x03B40964 LDP X30, X21, [X31], #0x20
	0x03B40968 RET
	0x03B4096C BL 0x1C16F20
	0x03B40970 LDR V0, [X0 + 0x2A8]
	0x03B40974 LDR V1, [X0 + 0x2AC]
	0x03B40978 LDR V2, [X0 + 0x2B0]
	0x03B4097C RET
	0x03B40980 STR D10, [X31 - 0x30]!
	0x03B40984 STP D9, D8, [X31 + 0x8]
	0x03B40988 STR X30, [X31 + 0x18]
	0x03B4098C STP X20, X19, [X31 + 0x20]
	0x03B40990 ADRP X20, 0x8A2000
	0x03B40994 LDRB W8, [X20 + 0x862]
	0x03B40998 MOV V8.16B, V2.16B
	0x03B4099C MOV V9.16B, V1.16B
	0x03B409A0 MOV V10.16B, V0.16B
	0x03B409A4 MOV X19, X0
	0x03B409A8 TBNZ X8, 0x0, 0x3B409C0
	0x03B409AC ADRP X0, 0x61A000
	0x03B409B0 LDR X0, [X0 + 0x168]
	0x03B409B4 BL 0x1C16CF4
	0x03B409B8 MOVZ W8, 0x1
	0x03B409BC STRB W8, [X20 + 0x862]
	0x03B409C0 MOV X0, X19
	0x03B409C4 STR S10, [X19 + 0x2A8]
	0x03B409C8 STR S9, [X19 + 0x2AC]
	0x03B409CC STR S8, [X19 + 0x2B0]
	0x03B409D0 BL 0x3B3A784
	0x03B409D4 CBZ X0, 0x3B409FC
	0x03B409D8 LDR W8, [X0 + 0x18]
	0x03B409DC LDR X30, [X31 + 0x18]
	0x03B409E0 LDP D9, D8, [X31 + 0x8]
	0x03B409E4 CMP W8, 0x0
	0x03B409E8 CSET W8, EQ
	0x03B409EC STRB W8, [X19 + 0x2B5]
	0x03B409F0 LDP X20, X19, [X31 + 0x20]
	0x03B409F4 LDR V10, [X31], #0x30
	0x03B409F8 RET
	0x03B409FC BL 0x1C16F20
	0x03B40A00 STR X30, [X31 - 0x30]!
	0x03B40A04 STP X22, X21, [X31 + 0x10]
	0x03B40A08 STP X20, X19, [X31 + 0x20]
	0x03B40A0C ADRP X21, 0x8A2000
	0x03B40A10 ADRP X22, 0x61A000
	0x03B40A14 LDRB W8, [X21 + 0x86A]
	0x03B40A18 LDR X22, [X22 + 0x6E8]
	0x03B40A1C MOV X19, X1
	0x03B40A20 MOV X20, X0
	0x03B40A24 TBNZ X8, 0x0, 0x3B40A78
	0x03B40A28 ADRP X0, 0x61A000
	0x03B40A2C LDR X0, [X0 + 0x6E8]
	0x03B40A30 BL 0x1C16CF4
	0x03B40A34 ADRP X0, 0x61A000
	0x03B40A38 LDR X0, [X0 + 0x6F0]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D12
	003 Move [X31+32], D11
	004 Move [X31+40], D10
	005 Move [X31+48], D9
	006 Move [X31+56], D8
	007 Move [X31+64], X30
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X21, 0x8A3000
	012 Move W8, [X21+2164]
	013 Move V8, V0
	014 Move W20, W1
	015 Move X19, X0
	016 Move TEMP, X8
	017 And TEMP, TEMP, 1
	018 Compare TEMP, 1
	019 JumpIfEqual {25}
	020 Move X0, 0x5BB000
	021 Move X0, [X0+1208]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2164], W8
	025 Move [X31+28], W31
	026 Move [X31+8], W31
	027 Move [X31], X31
	028 Compare W20, 0
	029 JumpIfNotEqual {204}
	030 Move X8, -50679808
	031 Move V0, [X8+1040]
	032 NotImplemented "Instruction FCMP not yet implemented."
	033 Move W8, [X19+512]
	034 Compare W8, 0
	035 JumpIfEqual {91}
	036 Move X20, [X19+800]
	037 Compare X20, 0
	038 JumpIfEqual {215}
	039 Move X0, X20
	040 Move X1, X31
	041 Call Rigidbody.get_velocity, X0
	042 Move V3, [X19+496]
	043 Move S4, 1
	044 Move X0, X20
	045 Move X1, X31
	046 Subtract S3, S4, S3
	047 Multiply S0, S0, S3
	048 Multiply S1, S1, S3
	049 Multiply S2, S2, S3
	050 Call Rigidbody.set_velocity, X0, X1
	051 Move W8, [X19+580]
	052 Move V9, [X19+652]
	053 Move V10, [X19+656]
	054 Move V11, [X19+660]
	055 Compare W8, 0
	056 JumpIfEqual {62}
	057 Move X0, [X19+800]
	058 Compare X0, 0
	059 JumpIfEqual {215}
	060 Move X1, X31
	061 Call Rigidbody.get_worldCenterOfMass, X0
	062 Move X0, X19
	063 Move X1, X31
	064 Call Component.get_transform, X0
	065 Compare X0, 0
	066 JumpIfEqual {215}
	067 Move X1, X31
	068 Call Transform.get_position, X0
	069 Move X20, [X19+800]
	070 Compare X20, 0
	071 JumpIfEqual {215}
	072 Subtract S2, S11, S2
	073 Subtract S1, S10, S1
	074 Subtract S0, S9, S0
	075 Move X0, X20
	076 Move X1, X31
	077 NotImplemented "Instruction FDIV not yet implemented."
	078 NotImplemented "Instruction FDIV not yet implemented."
	079 NotImplemented "Instruction FDIV not yet implemented."
	080 Call Rigidbody.get_velocity, X0
	081 Move V3, [X19+500]
	082 Move X0, X20
	083 Move X1, X31
	084 Multiply S4, S11, S3
	085 Multiply S5, S10, S3
	086 Multiply S3, S9, S3
	087 Add S0, S0, S4
	088 Add S1, S1, S5
	089 Add S2, S2, S3
	090 Call Rigidbody.set_velocity, X0, X1
	091 Move W8, [X19+524]
	092 Compare W8, 0
	093 JumpIfEqual {201}
	094 Move X20, [X19+800]
	095 Compare X20, 0
	096 JumpIfEqual {215}
	097 Move X0, X20
	098 Move X1, X31
	099 Call Rigidbody.get_angularVelocity, X0
	100 Move V3, [X19+504]
	101 Move S4, 1
	102 Move X0, X20
	103 Move X1, X31
	104 Subtract S3, S4, S3
	105 Multiply S0, S0, S3
	106 Multiply S1, S1, S3
	107 Multiply S2, S2, S3
	108 Call Rigidbody.set_angularVelocity, X0, X1
	109 Move V11, [X19+664]
	110 Move V10, [X19+668]
	111 Move V9, [X19+672]
	112 Move V12, [X19+676]
	113 Move X0, X19
	114 Move X1, X31
	115 Call Component.get_transform, X0
	116 Compare X0, 0
	117 JumpIfEqual {215}
	118 Move X1, X31
	119 Call Transform.get_rotation, X0
	120 Move X0, X31
	121 Call Quaternion.Inverse, X0
	122 Multiply S4, S12, S0
	123 Multiply S5, S11, S3
	124 Multiply S7, S9, S1
	125 Multiply S16, S12, S1
	126 Multiply S17, S10, S3
	127 Multiply S18, S9, S0
	128 Multiply S20, S11, S1
	129 Multiply S21, S11, S0
	130 Multiply S22, S10, S0
	131 Multiply S0, S10, S1
	132 Multiply S1, S12, S2
	133 Multiply S23, S12, S3
	134 Multiply S3, S9, S3
	135 Multiply S6, S10, S2
	136 Multiply S19, S11, S2
	137 Multiply S24, S9, S2
	138 Add S2, S4, S5
	139 Add S4, S16, S17
	140 Add S1, S1, S3
	141 Subtract S3, S23, S21
	142 Add S2, S6, S2
	143 Add S4, S18, S4
	144 Add S5, S20, S1
	145 Subtract S3, S3, S0
	146 Subtract S0, S2, S7
	147 Subtract S1, S4, S19
	148 Subtract S2, S5, S22
	149 Subtract S3, S3, S24
	150 Add X0, X31, 0
	151 Add X1, X31, 28
	152 Move X2, X31
	153 Call Quaternion.Internal_ToAxisAngleRad, X0, X1, X2
	154 Move X8, -50679808
	155 Move V0, [X31+28]
	156 Move V1, [X8+1096]
	157 Move W8, 0xC3B40000
	158 Move S2, W8
	159 Move W8, 0x43340000
	160 Multiply S0, S0, S1
	161 Move S1, W8
	162 Move X8, 0x5BB000
	163 Move X8, [X8+1208]
	164 Add S2, S0, S2
	165 NotImplemented "Instruction FCMP not yet implemented."
	166 NotImplemented "Instruction FCSEL not yet implemented."
	167 Move X8, [X8]
	168 Move [X31+28], S0
	169 NotImplemented "Instruction FABS not yet implemented."
	170 Move X8, [X8+184]
	171 Move V1, [X8]
	172 NotImplemented "Instruction FCMP not yet implemented."
	173 Move X20, [X19+800]
	174 Compare X20, 0
	175 JumpIfEqual {215}
	176 Move X8, -50679808
	177 Move V1, [X8+260]
	178 Move S3, [X31+4]
	179 Move S2, [X31+8]
	180 Move V4, [X31]
	181 Move X0, X20
	182 Multiply S0, S0, S1
	183 Multiply S1, S0, S2
	184 Multiply S2, S0, S3
	185 Multiply S0, S0, S4
	186 Move X1, X31
	187 NotImplemented "Instruction FDIV not yet implemented."
	188 NotImplemented "Instruction FDIV not yet implemented."
	189 NotImplemented "Instruction FDIV not yet implemented."
	190 Call Rigidbody.get_angularVelocity, X0
	191 Move V3, [X19+508]
	192 Move X0, X20
	193 Move X1, X31
	194 Multiply S4, S8, S3
	195 Multiply S5, S10, S3
	196 Multiply S3, S9, S3
	197 Add S0, S0, S4
	198 Add S1, S1, S5
	199 Add S2, S2, S3
	200 Call Rigidbody.set_angularVelocity, X0, X1
	201 Move X0, X19
	202 Call XRGrabInteractable.ApplyTargetScale, X0
	203 NotImplemented "Instruction STRH not yet implemented."
	204 Move X20, [X31+80]
	205 Move X19, [X31+88]
	206 Move X30, [X31+64]
	207 Move X21, [X31+72]
	208 Move D9, [X31+48]
	209 Move D8, [X31+56]
	210 Move D11, [X31+32]
	211 Move D10, [X31+40]
	212 Move V12, [X31+16]
	213 Add X31, X31, 96
	214 Return 
	215 Call 0x1C17F20

Method: System.Void ApplyTargetScale()

Disassembly:
	0x03B40620 ADRP X0, 0x61A000
	0x03B40624 LDR X0, [X0 + 0x6C0]
	0x03B40628 BL 0x1C16CF4
	0x03B4062C MOVZ W8, 0x1
	0x03B40630 STRB W8, [X22 + 0x85F]
	0x03B40634 LDR X0, [X21]
	0x03B40638 LDR X20, [X20 + 0x260]
	0x03B4063C LDR W8, [X0 + 0xE0]
	0x03B40640 CBNZ W8, 0x3B40648
	0x03B40644 BL 0x1C16DFC
	0x03B40648 MOV X0, X20
	0x03B4064C MOV X1, X19
	0x03B40650 LDP X20, X19, [X31 + 0x20]
	0x03B40654 LDP X22, X21, [X31 + 0x10]
	0x03B40658 LDR X30, [X31], #0x30
	0x03B4065C B 0x3B40660
	0x03B40660 STP X30, X19, [X31 - 0x10]!

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+536]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {17}
	007 Move X0, X19
	008 Move X1, X31
	009 Call Component.get_transform, X0
	010 Compare X0, 0
	011 JumpIfEqual {21}
	012 Move V2, [X19+688]
	013 Move V1, [X19+684]
	014 Move V0, [X19+680]
	015 Move X1, X31
	016 Call Transform.set_localScale, X0, X1
	017 Move [X19+693], W31
	018 Move X30, [X31+16]
	019 Move X19, [X31+24]
	020 Return 
	021 Call 0x1C17F20

Method: System.Void UpdateCurrentMovementType()

Disassembly:
	0x03B3F4DC LDRB W8, [X19 + 0x335]
	0x03B3F4E0 CBNZ W8, 0x3B3F53C
	0x03B3F4E4 LDR X8, [X19 + 0x340]
	0x03B3F4E8 CBZ X8, 0x3B3F548
	0x03B3F4EC LDR W8, [X8 + 0x20]
	0x03B3F4F0 CBNZ W8, 0x3B3F53C
	0x03B3F4F4 ADRP X8, 0x5B4000
	0x03B3F4F8 LDR X8, [X8 + 0x598]
	0x03B3F4FC LDR X20, [X19 + 0x338]
	0x03B3F500 LDR X0, [X8]
	0x03B3F504 LDR W8, [X0 + 0xE0]
	0x03B3F508 CBNZ W8, 0x3B3F510
	0x03B3F50C BL 0x1C16DFC
	0x03B3F510 MOV X0, X20
	0x03B3F514 MOV X1, X31
	0x03B3F518 MOV X2, X31
	0x03B3F51C BL 0x3C354F8
	0x03B3F520 TBZ X0, 0x0, 0x3B3F53C
	0x03B3F524 LDR X1, [X19 + 0x338]
	0x03B3F528 MOV X0, X19
	0x03B3F52C BL 0x3B3FA3C
	0x03B3F530 TBZ X0, 0x0, 0x3B3F53C
	0x03B3F534 MOVZ W8, 0x1
	0x03B3F538 STRB W8, [X19 + 0x335]
	0x03B3F53C LDP X20, X19, [X31 + 0x10]
	0x03B3F540 LDP X30, X21, [X31], #0x20
	0x03B3F544 RET
	0x03B3F548 BL 0x1C16F20
	0x03B3F54C STR X30, [X31 - 0x20]!
	0x03B3F550 STP X20, X19, [X31 + 0x10]
	0x03B3F554 ADRP X20, 0x8A3000
	0x03B3F558 LDRB W8, [X20 + 0x86C]
	0x03B3F55C MOV X19, X0
	0x03B3F560 TBNZ X8, 0x0, 0x3B3F584
	0x03B3F564 ADRP X0, 0x61B000
	0x03B3F568 LDR X0, [X0 + 0x5F8]
	0x03B3F56C BL 0x1C16CF4
	0x03B3F570 ADRP X0, 0x61B000
	0x03B3F574 LDR X0, [X0 + 0x168]
	0x03B3F578 BL 0x1C16CF4
	0x03B3F57C MOVZ W8, 0x1
	0x03B3F580 STRB W8, [X20 + 0x86C]
	0x03B3F584 LDRB W8, [X19 + 0x258]
	0x03B3F588 CBZ W8, 0x3B3F5F4
	0x03B3F58C LDR X0, [X19 + 0x260]
	0x03B3F590 CBZ X0, 0x3B3F61C
	0x03B3F594 ADRP X20, 0x61B000
	0x03B3F598 LDR X20, [X20 + 0x5F8]
	0x03B3F59C LDR X1, [X20]
	0x03B3F5A0 BL 0x28B9738
	0x03B3F5A4 CBNZ W0, 0x3B3F5BC
	0x03B3F5A8 LDR X8, [X19]
	0x03B3F5AC MOV X0, X19
	0x03B3F5B0 LDR X9, [X8 + 0x858]
	0x03B3F5B4 LDR X1, [X8 + 0x860]
	0x03B3F5B8 BLR X9
	0x03B3F5BC LDR X0, [X19 + 0x268]
	0x03B3F5C0 CBZ X0, 0x3B3F61C
	0x03B3F5C4 LDR X1, [X20]
	0x03B3F5C8 BL 0x28B9738
	0x03B3F5CC CBNZ W0, 0x3B3F5F4
	0x03B3F5D0 LDR W8, [X19 + 0x58]
	0x03B3F5D4 CMP W8, 0x1
	0x03B3F5D8 B.NE 0x3B3F5F4
	0x03B3F5DC MOV X0, X19
	0x03B3F5E0 BL 0x3B3A784
	0x03B3F5E4 CBZ X0, 0x3B3F61C
	0x03B3F5E8 LDR W8, [X0 + 0x18]
	0x03B3F5EC CMP W8, 0x2
	0x03B3F5F0 B.GE 0x3B3F600
	0x03B3F5F4 LDP X20, X19, [X31 + 0x10]
	0x03B3F5F8 LDR X30, [X31], #0x20
	0x03B3F5FC RET
	0x03B3F600 LDR X8, [X19]
	0x03B3F604 MOV X0, X19
	0x03B3F608 LDP X20, X19, [X31 + 0x10]
	0x03B3F60C LDR X2, [X8 + 0x868]
	0x03B3F610 LDR X1, [X8 + 0x870]
	0x03B3F614 LDR X30, [X31], #0x20
	0x03B3F618 BR X2
	0x03B3F61C BL 0x1C16F20
	0x03B3F620 STP X30, X19, [X31 - 0x10]!
	0x03B3F624 LDRB W8, [X0 + 0x218]
	0x03B3F628 MOV X19, X0
	0x03B3F62C CBZ W8, 0x3B3F654
	0x03B3F630 MOV X0, X19
	0x03B3F634 MOV X1, X31
	0x03B3F638 BL 0x3C32E90
	0x03B3F63C CBZ X0, 0x3B3F660
	0x03B3F640 LDR V2, [X19 + 0x2B0]
	0x03B3F644 LDR V1, [X19 + 0x2AC]
	0x03B3F648 LDR V0, [X19 + 0x2A8]
	0x03B3F64C MOV X1, X31
	0x03B3F650 BL 0x3C3FC4C
	0x03B3F654 STRB W31, [X19 + 0x2B5]
	0x03B3F658 LDP X30, X19, [X31], #0x10
	0x03B3F65C RET
	0x03B3F660 BL 0x1C16F20
	0x03B3F664 STR D10, [X31 - 0x30]!
	0x03B3F668 STP D9, D8, [X31 + 0x10]
	0x03B3F66C STP X30, X19, [X31 + 0x20]
	0x03B3F670 CBNZ W1, 0x3B3F71C
	0x03B3F674 LDRB W8, [X0 + 0x200]
	0x03B3F678 MOV X19, X0
	0x03B3F67C CBZ W8, 0x3B3F6E8
	0x03B3F680 LDR W8, [X19 + 0x244]
	0x03B3F684 LDR V8, [X19 + 0x28C]
	0x03B3F688 LDR V9, [X19 + 0x290]
	0x03B3F68C LDR V10, [X19 + 0x294]
	0x03B3F690 CBZ W8, 0x3B3F6CC
	0x03B3F694 LDR X0, [X19 + 0x320]
	0x03B3F698 CBZ X0, 0x3B3F72C
	0x03B3F69C MOV X1, X31
	0x03B3F6A0 BL 0x3C8EDF0
	0x03B3F6A4 LDR X0, [X19 + 0x320]
	0x03B3F6A8 CBZ X0, 0x3B3F72C
	0x03B3F6AC MOV X1, X31
	0x03B3F6B0 FSUB S10, S10, S2
	0x03B3F6B4 FSUB S9, S9, S1
	0x03B3F6B8 FSUB S8, S8, S0
	0x03B3F6BC BL 0x3C8EF74
	0x03B3F6C0 FADD S8, S8, S0
	0x03B3F6C4 FADD S9, S9, S1
	0x03B3F6C8 FADD S10, S10, S2
	0x03B3F6CC LDR X0, [X19 + 0x320]
	0x03B3F6D0 CBZ X0, 0x3B3F72C
	0x03B3F6D4 MOV V0.16B, V8.16B
	0x03B3F6D8 MOV V1.16B, V9.16B
	0x03B3F6DC MOV V2.16B, V10.16B
	0x03B3F6E0 MOV X1, X31
	0x03B3F6E4 BL 0x3C8F1E0
	0x03B3F6E8 LDRB W8, [X19 + 0x20C]
	0x03B3F6EC CBZ W8, 0x3B3F710
	0x03B3F6F0 LDR X0, [X19 + 0x320]
	0x03B3F6F4 CBZ X0, 0x3B3F72C
	0x03B3F6F8 LDR V3, [X19 + 0x2A4]
	0x03B3F6FC LDR V2, [X19 + 0x2A0]
	0x03B3F700 LDR V1, [X19 + 0x29C]
	0x03B3F704 LDR V0, [X19 + 0x298]
	0x03B3F708 MOV X1, X31
	0x03B3F70C BL 0x3C8F278
	0x03B3F710 MOV X0, X19
	0x03B3F714 BL 0x3B3F620
	0x03B3F718 STRH W31, [X19 + 0x2B4]
	0x03B3F71C LDP X30, X19, [X31 + 0x20]
	0x03B3F720 LDP D9, D8, [X31 + 0x10]
	0x03B3F724 LDR V10, [X31], #0x30
	0x03B3F728 RET
	0x03B3F72C BL 0x1C16F20
	0x03B3F730 SUB X31, X31, 0x60
	0x03B3F734 STR D12, [X31 + 0x10]
	0x03B3F738 STP D11, D10, [X31 + 0x20]
	0x03B3F73C STP D9, D8, [X31 + 0x30]
	0x03B3F740 STP X30, X21, [X31 + 0x40]
	0x03B3F744 STP X20, X19, [X31 + 0x50]
	0x03B3F748 ADRP X21, 0x8A3000
	0x03B3F74C LDRB W8, [X21 + 0x874]
	0x03B3F750 MOV V8.16B, V0.16B
	0x03B3F754 MOV W20, W1
	0x03B3F758 MOV X19, X0
	0x03B3F75C TBNZ X8, 0x0, 0x3B3F774
	0x03B3F760 ADRP X0, 0x5BB000
	0x03B3F764 LDR X0, [X0 + 0x4B8]
	0x03B3F768 BL 0x1C16CF4
	0x03B3F76C MOVZ W8, 0x1
	0x03B3F770 STRB W8, [X21 + 0x874]
	0x03B3F774 STR W31, [X31 + 0x1C]
	0x03B3F778 STR W31, [X31 + 0x8]
	0x03B3F77C STR X31, [X31]
	0x03B3F780 CBNZ W20, 0x3B3FA1C
	0x03B3F784 ADRP X8, 0xFFFFFFFFFCFAB000
	0x03B3F788 LDR V0, [X8 + 0x410]
	0x03B3F78C FCMP S8, S0
	0x03B3F790 B.MI 0x3B3FA1C
	0x03B3F794 LDRB W8, [X19 + 0x200]
	0x03B3F798 CBZ W8, 0x3B3F868
	0x03B3F79C LDR X20, [X19 + 0x320]
	0x03B3F7A0 CBZ X20, 0x3B3FA38
	0x03B3F7A4 MOV X0, X20
	0x03B3F7A8 MOV X1, X31
	0x03B3F7AC BL 0x3C8E868
	0x03B3F7B0 LDR V3, [X19 + 0x1F0]
	0x03B3F7B4 FMOV S4, 1
	0x03B3F7B8 MOV X0, X20
	0x03B3F7BC MOV X1, X31
	0x03B3F7C0 FSUB S3, S4, S3
	0x03B3F7C4 FMUL S0, S0, S3

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], X30
	003 Move [X31+32], X26
	004 Move [X31+40], X25
	005 Move [X31+48], X24
	006 Move [X31+56], X23
	007 Move [X31+64], X22
	008 Move [X31+72], X21
	009 Move [X31+80], X20
	010 Move [X31+88], X19
	011 Move X20, 0x8A4000
	012 Move W8, [X20+2165]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {59}
	018 Move X0, 0x5B5000
	019 Move X0, [X0+2600]
	020 Call 0x1C17CF4
	021 Move X0, 0x61C000
	022 Move X0, [X0+360]
	023 Call 0x1C17CF4
	024 Move X0, 0x61C000
	025 Move X0, [X0+368]
	026 Call 0x1C17CF4
	027 Move X0, 0x61C000
	028 Move X0, [X0+1464]
	029 Call 0x1C17CF4
	030 Move X0, 0x61C000
	031 Move X0, [X0+1472]
	032 Call 0x1C17CF4
	033 Move X0, 0x61C000
	034 Move X0, [X0+1480]
	035 Call 0x1C17CF4
	036 Move X0, 0x61C000
	037 Move X0, [X0+1488]
	038 Call 0x1C17CF4
	039 Move X0, 0x61C000
	040 Move X0, [X0+1496]
	041 Call 0x1C17CF4
	042 Move X0, 0x5B5000
	043 Move X0, [X0+1432]
	044 Call 0x1C17CF4
	045 Move X0, 0x61C000
	046 Move X0, [X0+872]
	047 Call 0x1C17CF4
	048 Move X0, 0x61C000
	049 Move X0, [X0+1504]
	050 Call 0x1C17CF4
	051 Move X0, 0x61C000
	052 Move X0, [X0+1512]
	053 Call 0x1C17CF4
	054 Move X0, 0x61C000
	055 Move X0, [X0+1520]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X20+2165], W8
	059 Move X0, X19
	060 Move [X31+8], X31
	061 Move [X31+24], X31
	062 Call XRBaseInteractable.get_interactorsSelecting, X0
	063 Compare X0, 0
	064 JumpIfEqual {203}
	065 Move W8, [X0+24]
	066 Subtract W20, W8, 1
	067 Move X23, 0x61C000
	068 Move X24, 0x61C000
	069 Move X25, 0x5B5000
	070 Move X22, 0x61C000
	071 Move X26, 0x61C000
	072 Move X23, [X23+368]
	073 Move X24, [X24+872]
	074 Move X25, [X25+1432]
	075 Move X22, [X22+1496]
	076 Move X26, [X26+1480]
	077 Move X0, X19
	078 Call XRBaseInteractable.get_interactorsSelecting, X0
	079 Compare X0, 0
	080 JumpIfEqual {203}
	081 Move X2, [X23]
	082 Move W1, W20
	083 Call List`1<Object>.get_Item, X0, X1
	084 Compare X0, 0
	085 JumpIfEqual {91}
	086 Move X9, [X0]
	087 Move X8, [X24]
	088 Move W11, [X9+304]
	089 Move W10, [X8+304]
	090 NotImplemented "Instruction CMP not yet implemented."
	091 Move X21, X31
	092 Move X9, [X9+200]
	093 Add X9, X9, X10
	094 NotImplemented "Instruction LDUR not yet implemented."
	095 NotImplemented "Instruction CMP not yet implemented."
	096 NotImplemented "Instruction CSEL not yet implemented."
	097 Move X0, [X25]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X21
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Inequality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {135}
	110 Compare X21, 0
	111 JumpIfEqual {203}
	112 Move X8, [X21]
	113 Move X0, X21
	114 Move X9, [X8+1368]
	115 Move X1, [X8+1376]
	116 NotImplemented "Instruction BLR not yet implemented."
	117 And W31, W0, 255
	118 Move [X31+8], X0
	119 Move W8, [X31+24]
	120 Compare W8, 0
	121 JumpIfNotEqual {136}
	122 Move X8, [X21]
	123 Move X0, X21
	124 Move X9, [X8+1368]
	125 Move X1, [X8+1376]
	126 NotImplemented "Instruction BLR not yet implemented."
	127 Move X1, [X22]
	128 Move [X31+8], X0
	129 Add X0, X31, 8
	130 Call Nullable`1<Int32Enum>.get_Value, X0
	131 Move X2, [X26]
	132 Move W1, W0
	133 Add X0, X31, 24
	134 Call Nullable`1<Int32Enum>..ctor, X0, X1
	135 Subtract W20, W20, 1
	136 Move X0, X19
	137 Move X1, X31
	138 Call Object.get_name, X0
	139 Move X1, [X22]
	140 Move X20, X0
	141 Add X0, X31, 24
	142 Call Nullable`1<Int32Enum>.get_Value, X0
	143 Move X8, 0x61C000
	144 Move X8, [X8+1464]
	145 Move [X31+4], W0
	146 Add X1, X31, 4
	147 Move X8, [X8]
	148 Move X0, X8
	149 Call 0x1C17E04
	150 Move X8, 0x61C000
	151 Move X8, [X8+1512]
	152 Move X1, X0
	153 Move X2, X31
	154 Move X8, [X8]
	155 Move X0, X8
	156 Call String.Format, X0, X1
	157 Move X8, 0x61C000
	158 Move X8, [X8+1504]
	159 Move X9, 0x61C000
	160 Move X9, [X9+1520]
	161 Move X3, X0
	162 Move X8, [X8]
	163 Move X1, X20
	164 Move X2, [X9]
	165 Move X4, X31
	166 Move X0, X8
	167 Call String.Concat, X0, X1, X2, X3
	168 Move X8, 0x5B5000
	169 Move X8, [X8+2600]
	170 Move X20, X0
	171 Move X8, [X8]
	172 Move W9, [X8+224]
	173 Compare W9, 0
	174 JumpIfNotEqual {177}
	175 Move X0, X8
	176 Call 0x1C17DFC
	177 Move X0, X20
	178 Move X1, X19
	179 Move X2, X31
	180 Call Debug.LogWarning, X0, X1
	181 Move X8, [X31+24]
	182 Move [X31+8], X8
	183 Compare X19, 0
	184 JumpIfEqual {203}
	185 Add X10, X31, 8
	186 Add X9, X19, 492
	187 Or X10, X10, 7
	188 And W31, W8, 255
	189 NotImplemented "Instruction CSEL not yet implemented."
	190 Move W8, [X8]
	191 Move X22, [X31+64]
	192 Move X21, [X31+72]
	193 Move X24, [X31+48]
	194 Move X23, [X31+56]
	195 Move X26, [X31+32]
	196 Move X25, [X31+40]
	197 Move [X19+700], W8
	198 Move X20, [X31+80]
	199 Move X19, [X31+88]
	200 Move X30, [X31+16]
	201 Add X31, X31, 96
	202 Return 
	203 Call 0x1C17F20

Method: System.Void OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)

Disassembly:
	0x03B442E4 LDR X1, [X10]
	0x03B442E8 CBZ X9, 0x3B4430C
	0x03B442EC LDR X10, [X8 + 0xB0]
	0x03B442F0 ADD X10, X10, 0x8
	0x03B442F4 LDUR X11, [X10 - 0x8]
	0x03B442F8 CMP X11, X1
	0x03B442FC B.EQ 0x3B4431C
	0x03B44300 SUBS X9, X9, 0x1
	0x03B44304 ADD X10, X10, 0x10
	0x03B44308 B.NE 0x3B442F4
	0x03B4430C MOVZ W2, 0x6
	0x03B44310 MOV X0, X23
	0x03B44314 BL 0x1C5C788
	0x03B44318 B 0x3B4432C
	0x03B4431C LDR W9, [X10]
	0x03B44320 ADD W9, W9, 0x6
	0x03B44324 ADD X8, X8, W9, 0x4, SXTW
	0x03B44328 ADD X0, X8, 0x138
	0x03B4432C LDP X8, X2, [X0]
	0x03B44330 MOV X0, X23
	0x03B44334 MOV X1, X22
	0x03B44338 BLR X8
	0x03B4433C CBZ X0, 0x3B44450
	0x03B44340 MOV X1, X31
	0x03B44344 MOV X24, X0
	0x03B44348 BL 0x3C3F58C
	0x03B4434C MOV X0, X24
	0x03B44350 MOV X1, X31
	0x03B44354 MOV V10.16B, V0.16B
	0x03B44358 MOV V9.16B, V1.16B
	0x03B4435C MOV V8.16B, V2.16B
	0x03B44360 BL 0x3C3DEB4
	0x03B44364 MOV V14.16B, V0.16B
	0x03B44368 MOV V13.16B, V1.16B
	0x03B4436C MOV V12.16B, V2.16B
	0x03B44370 MOV V11.16B, V3.16B
	0x03B44374 TBZ X20, 0x0, 0x3B443BC
	0x03B44378 LDR X8, [X22]
	0x03B4437C MOV X0, X22
	0x03B44380 MOV X1, X23
	0x03B44384 LDR X9, [X8 + 0x898]
	0x03B44388 LDR X2, [X8 + 0x8A0]
	0x03B4438C BLR X9
	0x03B44390 TBZ X0, 0x0, 0x3B443BC
	0x03B44394 ADD X1, X31, 0x8
	0x03B44398 MOV X0, X22
	0x03B4439C MOV V0.16B, V10.16B
	0x03B443A0 MOV V1.16B, V9.16B
	0x03B443A4 MOV V2.16B, V8.16B
	0x03B443A8 MOV X2, X31
	0x03B443AC BL 0x3B8EA88
	0x03B443B0 TBZ X0, 0x0, 0x3B443BC
	0x03B443B4 LDP S10, S9, [X31 + 0x8]
	0x03B443B8 LDR V8, [X31 + 0x10]
	0x03B443BC CBZ X19, 0x3B44450
	0x03B443C0 MOV X0, X19
	0x03B443C4 AND W8, W20, W21, 0x0
	0x03B443C8 TBZ X8, 0x0, 0x3B443F4
	0x03B443CC MOV V0.16B, V10.16B
	0x03B443D0 MOV V1.16B, V9.16B
	0x03B443D4 MOV V2.16B, V8.16B
	0x03B443D8 MOV V3.16B, V14.16B
	0x03B443DC MOV V4.16B, V13.16B
	0x03B443E0 MOV V5.16B, V12.16B
	0x03B443E4 MOV V6.16B, V11.16B
	0x03B443E8 MOV X1, X31
	0x03B443EC BL 0x3C40000
	0x03B443F0 B 0x3B44428
	0x03B443F4 TBZ X20, 0x0, 0x3B44410
	0x03B443F8 MOV V0.16B, V10.16B
	0x03B443FC MOV V1.16B, V9.16B
	0x03B44400 MOV V2.16B, V8.16B
	0x03B44404 MOV X1, X31
	0x03B44408 BL 0x3C3F62C
	0x03B4440C B 0x3B44428
	0x03B44410 MOV V0.16B, V14.16B
	0x03B44414 MOV V1.16B, V13.16B
	0x03B44418 MOV V2.16B, V12.16B
	0x03B4441C MOV V3.16B, V11.16B
	0x03B44420 MOV X1, X31
	0x03B44424 BL 0x3C3F7AC
	0x03B44428 LDP X20, X19, [X31 + 0x80]
	0x03B4442C LDP X22, X21, [X31 + 0x70]
	0x03B44430 LDP X24, X23, [X31 + 0x60]
	0x03B44434 LDR X30, [X31 + 0x58]
	0x03B44438 LDP D9, D8, [X31 + 0x48]
	0x03B4443C LDP D11, D10, [X31 + 0x38]
	0x03B44440 LDP D13, D12, [X31 + 0x28]
	0x03B44444 LDR V14, [X31 + 0x20]
	0x03B44448 ADD X31, X31, 0x90
	0x03B4444C RET
	0x03B44450 BL 0x1C16F20
	0x03B44454 STP X30, X21, [X31 - 0x20]!
	0x03B44458 STP X20, X19, [X31 + 0x10]
	0x03B4445C MOV X1, X31
	0x03B44460 MOV X19, X0
	0x03B44464 BL 0x3C32E90
	0x03B44468 CBZ X0, 0x3B44518
	0x03B4446C MOV X1, X31
	0x03B44470 MOV X20, X0
	0x03B44474 BL 0x3C3F49C
	0x03B44478 STR X0, [X19 + 0x358]
	0x03B4447C MOV X0, X20
	0x03B44480 MOV X1, X31
	0x03B44484 MOV X2, X31
	0x03B44488 BL 0x3C3FE70
	0x03B4448C MOV X0, X19
	0x03B44490 BL 0x3B3E4DC
	0x03B44494 LDR X8, [X19]
	0x03B44498 LDR X1, [X19 + 0x320]
	0x03B4449C MOV X0, X19
	0x03B444A0 LDR X9, [X8 + 0x8E8]
	0x03B444A4 LDR X2, [X8 + 0x8F0]
	0x03B444A8 BLR X9
	0x03B444AC ADRP X21, 0x894000
	0x03B444B0 LDRB W8, [X21 + 0x783]
	0x03B444B4 CBNZ W8, 0x3B444CC
	0x03B444B8 ADRP X0, 0x5AF000
	0x03B444BC LDR X0, [X0 + 0x5A0]
	0x03B444C0 BL 0x1C16CF4
	0x03B444C4 MOVZ W8, 0x1
	0x03B444C8 STRB W8, [X21 + 0x783]
	0x03B444CC ADRP X8, 0x5AF000
	0x03B444D0 LDR X8, [X8 + 0x5A0]
	0x03B444D4 MOV X0, X19
	0x03B444D8 MOV X1, X20
	0x03B444DC LDR X8, [X8]
	0x03B444E0 LDR X9, [X8 + 0xB8]
	0x03B444E4 LDR V0, [X9]
	0x03B444E8 LDR V1, [X9 + 0x8]
	0x03B444EC ADD X9, X19, 0x2C4
	0x03B444F0 STR D0, [X9]
	0x03B444F4 STR S1, [X9 + 0x8]
	0x03B444F8 LDR X8, [X8 + 0xB8]
	0x03B444FC LDR V0, [X8]
	0x03B44500 LDR V1, [X8 + 0x8]
	0x03B44504 STR D0, [X19 + 0x2D0]
	0x03B44508 STR S1, [X19 + 0x2D8]
	0x03B4450C LDP X20, X19, [X31 + 0x10]
	0x03B44510 LDP X30, X21, [X31], #0x20
	0x03B44514 B 0x3B3F1C8
	0x03B44518 BL 0x1C16F20
	0x03B4451C STR X30, [X31 - 0x20]!
	0x03B44520 STP X20, X19, [X31 + 0x10]
	0x03B44524 ADRP X20, 0x89E000
	0x03B44528 LDRB W8, [X20 + 0x87E]
	0x03B4452C MOV X19, X0
	0x03B44530 TBNZ X8, 0x0, 0x3B44560
	0x03B44534 ADRP X0, 0x5AF000
	0x03B44538 LDR X0, [X0 + 0xA28]
	0x03B4453C BL 0x1C16CF4
	0x03B44540 ADRP X0, 0x5AF000
	0x03B44544 LDR X0, [X0 + 0x598]
	0x03B44548 BL 0x1C16CF4
	0x03B4454C ADRP X0, 0x616000
	0x03B44550 LDR X0, [X0 + 0x7D0]
	0x03B44554 BL 0x1C16CF4
	0x03B44558 MOVZ W8, 0x1
	0x03B4455C STRB W8, [X20 + 0x87E]
	0x03B44560 LDRB W8, [X19 + 0x241]
	0x03B44564 CBZ W8, 0x3B4462C
	0x03B44568 ADRP X8, 0x5AF000
	0x03B4456C LDR X8, [X8 + 0x598]
	0x03B44570 LDR X20, [X19 + 0x358]
	0x03B44574 LDR X0, [X8]
	0x03B44578 LDR W8, [X0 + 0xE0]
	0x03B4457C CBNZ W8, 0x3B44584
	0x03B44580 BL 0x1C16DFC
	0x03B44584 MOV X0, X20
	0x03B44588 MOV X1, X31
	0x03B4458C MOV X2, X31
	0x03B44590 BL 0x3C354F8
	0x03B44594 TBZ X0, 0x0, 0x3B445B8
	0x03B44598 LDR X0, [X19 + 0x358]
	0x03B4459C CBZ X0, 0x3B44664
	0x03B445A0 MOV X1, X31
	0x03B445A4 BL 0x3C32ECC
	0x03B445A8 CBZ X0, 0x3B44664
	0x03B445AC MOV X1, X31
	0x03B445B0 BL 0x3C35834
	0x03B445B4 TBZ X0, 0x0, 0x3B445FC
	0x03B445B8 LDRB W8, [X19 + 0x241]
	0x03B445BC CBZ W8, 0x3B4462C
	0x03B445C0 MOV X0, X19
	0x03B445C4 MOV X1, X31
	0x03B445C8 BL 0x3C32ECC
	0x03B445CC CBZ X0, 0x3B44664
	0x03B445D0 MOV X1, X31
	0x03B445D4 BL 0x3C35834
	0x03B445D8 TBZ X0, 0x0, 0x3B4462C
	0x03B445DC MOV X0, X19
	0x03B445E0 MOV X1, X31
	0x03B445E4 BL 0x3C32E90
	0x03B445E8 CBZ X0, 0x3B44664
	0x03B445EC LDR X1, [X19 + 0x358]
	0x03B445F0 MOV X2, X31
	0x03B445F4 BL 0x3C3FE70
	0x03B445F8 B 0x3B4462C
	0x03B445FC ADRP X8, 0x5AF000
	0x03B44600 LDR X8, [X8 + 0xA28]
	0x03B44604 LDR X0, [X8]
	0x03B44608 LDR W8, [X0 + 0xE0]
	0x03B4460C CBNZ W8, 0x3B44614
	0x03B44610 BL 0x1C16DFC
	0x03B44614 ADRP X8, 0x616000
	0x03B44618 LDR X8, [X8 + 0x7D0]
	0x03B4461C MOV X1, X19
	0x03B44620 MOV X2, X31
	0x03B44624 LDR X0, [X8]
	0x03B44628 BL 0x3C06B0C
	0x03B4462C LDR X8, [X19]
	0x03B44630 LDR X1, [X19 + 0x320]
	0x03B44634 MOV X0, X19
	0x03B44638 LDR X9, [X8 + 0x8F8]
	0x03B4463C LDR X2, [X8 + 0x900]
	0x03B44640 BLR X9
	0x03B44644 LDR W8, [X19 + 0x1EC]
	0x03B44648 MOVZ W9, 0x1
	0x03B4464C STRB W9, [X19 + 0x2C0]
	0x03B44650 MOV X0, X19
	0x03B44654 STR W8, [X19 + 0x2BC]
	0x03B44658 LDP X20, X19, [X31 + 0x10]
	0x03B4465C LDR X30, [X31], #0x20
	0x03B44660 B 0x3B44668
	0x03B44664 BL 0x1C16F20
	0x03B44668 SUB X31, X31, 0x30
	0x03B4466C STP D9, D8, [X31 + 0x10]
	0x03B44670 STP X30, X19, [X31 + 0x20]
	0x03B44674 LDRB W8, [X0 + 0x224]
	0x03B44678 CBZ W8, 0x3B446D8
	0x03B4467C LDR X1, [X0 + 0x2E8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x89F000
	007 Move W8, [X21+2166]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x617000
	015 Move X0, [X0+1896]
	016 Call 0x1C17CF4
	017 Move X0, 0x617000
	018 Move X0, [X0+1904]
	019 Call 0x1C17CF4
	020 Move X0, 0x617000
	021 Move X0, [X0+760]
	022 Call 0x1C17CF4
	023 Move X0, 0x617000
	024 Move X0, [X0+360]
	025 Call 0x1C17CF4
	026 Move X0, 0x5B0000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move X0, 0x5B7000
	030 Move X0, [X0+3400]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+2166], W8
	034 Compare X20, 0
	035 JumpIfEqual {258}
	036 Move X0, X20
	037 Move X1, X31
	038 Call SelectEnterEventArgs.get_interactorObject, X0
	039 Move X0, X19
	040 Call XRGrabInteractable.CreateDynamicAttachTransform, X0, X1
	041 Move X21, X0
	042 Move X0, X20
	043 Move X1, X31
	044 Call SelectEnterEventArgs.get_interactorObject, X0
	045 Move X22, X0
	046 Move X0, X19
	047 Move X1, X22
	048 Move X2, X21
	049 Call XRGrabInteractable.InitializeDynamicAttachPoseWithStatic, X0, X1, X2
	050 Move X8, [X19]
	051 Move X0, X19
	052 Move X1, X22
	053 Move X2, X21
	054 Move X9, [X8+2216]
	055 Move X3, [X8+2224]
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X0, X19
	058 Call XRBaseInteractable.get_interactorsSelecting, X0
	059 Compare X0, 0
	060 JumpIfEqual {258}
	061 Move W21, [X0+24]
	062 Move X0, X19
	063 Move X1, X20
	064 Call XRBaseInteractable.OnSelectEntering, X0, X1
	065 Move X0, X19
	066 Call XRBaseInteractable.get_interactorsSelecting, X0
	067 Compare X0, 0
	068 JumpIfEqual {258}
	069 Move X8, 0x5B7000
	070 Move X8, [X8+3400]
	071 Move W9, 1
	072 Move W2, [X0+24]
	073 Move [X19+632], W9
	074 Move X3, [X8]
	075 Move X22, 0x5B0000
	076 Move X22, [X22+1432]
	077 Add X0, X31, 8
	078 Move W1, W21
	079 Move [X31+8], X31
	080 Call ValueTuple`2<Int32, Int32>..ctor, X0, X1, X2
	081 Move X8, [X31+8]
	082 Add X9, X19, 636
	083 Move X0, X19
	084 Move [X9], X8
	085 Move [X19+696], W31
	086 Call XRGrabInteractable.ResetThrowSmoothing, X0
	087 Move W8, [X19+820]
	088 Compare W8, 0
	089 JumpIfEqual {126}
	090 Move X0, [X22]
	091 Move X21, [X19+824]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X0, X21
	097 Move X1, X31
	098 Move X2, X31
	099 Call Object.op_Inequality, X0, X1
	100 Move TEMP, X0
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {229}
	104 Move X0, X20
	105 Move X1, X31
	106 Call SelectEnterEventArgs.get_interactorObject, X0
	107 Compare X0, 0
	108 JumpIfEqual {258}
	109 Move X10, 0x617000
	110 Move X8, [X0]
	111 Move X10, [X10+760]
	112 Move X21, X0
	113 NotImplemented "Instruction LDRH not yet implemented."
	114 Move X1, [X10]
	115 Compare X9, 0
	116 JumpIfEqual {123}
	117 Move X10, [X8+176]
	118 Add X10, X10, 8
	119 NotImplemented "Instruction LDUR not yet implemented."
	120 NotImplemented "Instruction CMP not yet implemented."
	121 Subtract X9, X9, 1
	122 Add X10, X10, 16
	123 Move W2, 5
	124 Move X0, X21
	125 Call 0x1C5D788
	126 Move X0, X20
	127 Move X1, X31
	128 Call SelectEnterEventArgs.get_interactorObject, X0
	129 Compare X0, 0
	130 JumpIfEqual {258}
	131 Move X10, 0x617000
	132 Move X8, [X0]
	133 Move X10, [X10+760]
	134 Move X21, X0
	135 NotImplemented "Instruction LDRH not yet implemented."
	136 Move X1, [X10]
	137 Compare X9, 0
	138 JumpIfEqual {145}
	139 Move X10, [X8+176]
	140 Add X10, X10, 8
	141 NotImplemented "Instruction LDUR not yet implemented."
	142 NotImplemented "Instruction CMP not yet implemented."
	143 Subtract X9, X9, 1
	144 Add X10, X10, 16
	145 Move W2, 5
	146 Move X0, X21
	147 Call 0x1C5D788
	148 Move W9, [X10]
	149 Add W9, W9, 5
	150 Add X8, X8, W9
	151 Add X0, X8, 312
	152 Move X8, [X0]
	153 Move X1, [X0+8]
	154 Move X0, X21
	155 NotImplemented "Instruction BLR not yet implemented."
	156 Compare X0, 0
	157 JumpIfEqual {258}
	158 Move X8, 0x617000
	159 Move X8, [X8+1896]
	160 Move X1, [X8]
	161 Call 0x21A4F50, X0
	162 Move [X19+824], X0
	163 Move X21, X0
	164 Move X0, [X22]
	165 Move W8, [X0+224]
	166 Compare W8, 0
	167 JumpIfNotEqual {169}
	168 Call 0x1C17DFC
	169 Move X0, X21
	170 Move X1, X31
	171 Move X2, X31
	172 Call Object.op_Inequality, X0, X1
	173 Move TEMP, X0
	174 And TEMP, TEMP, 1
	175 Compare TEMP, 1
	176 JumpIfNotEqual {229}
	177 Move X21, [X19+832]
	178 Move X0, X20
	179 Move X1, X31
	180 Call SelectEnterEventArgs.get_interactorObject, X0
	181 Compare X21, 0
	182 JumpIfEqual {258}
	183 Move X8, 0x617000
	184 Move X8, [X8+1904]
	185 Move X1, X0
	186 Move X0, X21
	187 Move X2, [X8]
	188 Call HashSet`1<Object>.Add, X0, X1
	189 Move X1, [X19+824]
	190 Move X0, X19
	191 Call XRGrabInteractable.StartIgnoringCharacterCollision, X0, X1
	192 Move W9, [X10]
	193 Add W9, W9, 5
	194 Add X8, X8, W9
	195 Add X0, X8, 312
	196 Move X8, [X0]
	197 Move X1, [X0+8]
	198 Move X0, X21
	199 NotImplemented "Instruction BLR not yet implemented."
	200 Move X8, [X19+824]
	201 Compare X8, 0
	202 JumpIfEqual {258}
	203 Move X21, X0
	204 Move X0, X8
	205 Move X1, X31
	206 Call Component.get_transform, X0
	207 Compare X21, 0
	208 JumpIfEqual {258}
	209 Move X1, X0
	210 Move X0, X21
	211 Move X2, X31
	212 Call Transform.IsChildOf, X0, X1
	213 Move TEMP, X0
	214 And TEMP, TEMP, 1
	215 Compare TEMP, 1
	216 JumpIfNotEqual {229}
	217 Move X21, [X19+832]
	218 Move X0, X20
	219 Move X1, X31
	220 Call SelectEnterEventArgs.get_interactorObject, X0
	221 Compare X21, 0
	222 JumpIfEqual {258}
	223 Move X8, 0x617000
	224 Move X8, [X8+1904]
	225 Move X1, X0
	226 Move X0, X21
	227 Move X2, [X8]
	228 Call HashSet`1<Object>.Add, X0, X1
	229 Move X0, X19
	230 Call XRBaseInteractable.get_interactorsSelecting, X0
	231 Compare X0, 0
	232 JumpIfEqual {258}
	233 Move W8, [X0+24]
	234 NotImplemented "Instruction CMP not yet implemented."
	235 Move X8, [X19]
	236 Move X0, X19
	237 Move X9, [X8+2232]
	238 Move X1, [X8+2240]
	239 NotImplemented "Instruction BLR not yet implemented."
	240 Move X0, X19
	241 Call XRGrabInteractable.InvokeGrabTransformersOnGrab, X0
	242 Move X0, X20
	243 Move X1, X31
	244 Call SelectEnterEventArgs.get_interactorObject, X0
	245 Move X8, [X19+864]
	246 Compare X8, 0
	247 JumpIfEqual {258}
	248 Move X1, X0
	249 Move X0, X8
	250 Move X2, X31
	251 Call TeleportationMonitor.AddInteractor, X0, X1
	252 Move X20, [X31+32]
	253 Move X19, [X31+40]
	254 Move X22, [X31+16]
	255 Move X21, [X31+24]
	256 Move X30, [X31+48]
	257 Return 
	258 Call 0x1C17F20

Method: System.Void OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)

Disassembly:
	0x03B44994 MOV X0, X20
	0x03B44998 MOV X2, X31
	0x03B4499C BL 0x3C8ED2C
	0x03B449A0 LDRB W1, [X19 + 0x329]
	0x03B449A4 MOV X0, X20
	0x03B449A8 MOV X2, X31
	0x03B449AC BL 0x3C8ECAC
	0x03B449B0 LDR V0, [X19 + 0x32C]
	0x03B449B4 MOV X0, X20
	0x03B449B8 MOV X1, X31
	0x03B449BC BL 0x3C8EB14
	0x03B449C0 LDR V0, [X19 + 0x330]
	0x03B449C4 MOV X0, X20
	0x03B449C8 MOV X1, X31
	0x03B449CC BL 0x3C8EB9C
	0x03B449D0 MOV X0, X19
	0x03B449D4 BL 0x3B3A824
	0x03B449D8 TBZ X0, 0x0, 0x3B449E8
	0x03B449DC LDP X20, X19, [X31 + 0x10]
	0x03B449E0 LDR X30, [X31], #0x20
	0x03B449E4 RET
	0x03B449E8 LDR X20, [X19 + 0x320]
	0x03B449EC CBZ X20, 0x3B44A1C
	0x03B449F0 MOV X0, X20
	0x03B449F4 MOV X1, X31
	0x03B449F8 BL 0x3C8EC70
	0x03B449FC LDRB W8, [X19 + 0x240]
	0x03B44A00 AND W9, W0, 0x1
	0x03B44A04 MOV X0, X20
	0x03B44A08 LDP X20, X19, [X31 + 0x10]
	0x03B44A0C ORR W1, W8, W9, 0x0
	0x03B44A10 MOV X2, X31
	0x03B44A14 LDR X30, [X31], #0x20
	0x03B44A18 B 0x3C8ECAC
	0x03B44A1C BL 0x1C16F20
	0x03B44A20 SUB X31, X31, 0xB0
	0x03B44A24 STP D13, D12, [X31 + 0x20]
	0x03B44A28 STP D11, D10, [X31 + 0x30]
	0x03B44A2C STP D9, D8, [X31 + 0x40]
	0x03B44A30 STR X30, [X31 + 0x50]
	0x03B44A34 STP X28, X27, [X31 + 0x60]
	0x03B44A38 STP X26, X25, [X31 + 0x70]
	0x03B44A3C STP X24, X23, [X31 + 0x80]
	0x03B44A40 STP X22, X21, [X31 + 0x90]
	0x03B44A44 STP X20, X19, [X31 + 0xA0]
	0x03B44A48 ADRP X21, 0x894000
	0x03B44A4C LDRB W8, [X21 + 0x783]
	0x03B44A50 MOV X19, X1
	0x03B44A54 MOV X20, X0
	0x03B44A58 CBNZ W8, 0x3B44A70
	0x03B44A5C ADRP X0, 0x5AF000
	0x03B44A60 LDR X0, [X0 + 0x5A0]
	0x03B44A64 BL 0x1C16CF4
	0x03B44A68 MOVZ W8, 0x1
	0x03B44A6C STRB W8, [X21 + 0x783]
	0x03B44A70 ADRP X22, 0x5AF000
	0x03B44A74 LDR X22, [X22 + 0x5A0]
	0x03B44A78 LDR X8, [X20 + 0x2E0]
	0x03B44A7C MOVZ W24, 0x6667
	0x03B44A80 FMOV S10, W31
	0x03B44A84 LDR X9, [X22]
	0x03B44A88 MOVN W23, 0x0
	0x03B44A8C MOVK W24, 0x66660000
	0x03B44A90 MOVZ W25, 0x14
	0x03B44A94 LDR X9, [X9 + 0xB8]
	0x03B44A98 FMOV S11, 1
	0x03B44A9C MOVZ W26, 0xC
	0x03B44AA0 FMOV S1, W31
	0x03B44AA4 LDR V9, [X9]
	0x03B44AA8 LDR V8, [X9 + 0x8]
	0x03B44AAC CBZ X8, 0x3B44C50
	0x03B44AB0 LDR W9, [X20 + 0x2DC]
	0x03B44AB4 LDR W12, [X8 + 0x18]
	0x03B44AB8 ADD W9, W23, W9
	0x03B44ABC SMADDL X10, X9, X24, X31
	0x03B44AC0 UBFM X11, X10, 0x3F, 0x3F
	0x03B44AC4 SBFM X10, X10, 0x23, 0x3F
	0x03B44AC8 ADD W10, W10, W11
	0x03B44ACC MSUB W9, W10, W25, W9
	0x03B44AD0 ADD W9, W9, 0x14
	0x03B44AD4 SXTB W10, W9
	0x03B44AD8 SMADDL X10, X10, X24, X31
	0x03B44ADC UBFM X11, X10, 0x3F, 0x3F
	0x03B44AE0 UBFM X10, X10, 0x23, 0x3F
	0x03B44AE4 ADD W10, W10, W11
	0x03B44AE8 MSUB W9, W10, W25, W9
	0x03B44AEC AND W28, W9, 0xFF
	0x03B44AF0 CMP W28, W12
	0x03B44AF4 B.CS 0x3B44C54
	0x03B44AF8 MOV W27, W28
	0x03B44AFC ADD X8, X8, X27, 0x2, LSL
	0x03B44B00 LDR V0, [X8 + 0x20]
	0x03B44B04 FCMP S0, 0x0
	0x03B44B08 B.EQ 0x3B44BDC
	0x03B44B0C MOV X0, X31
	0x03B44B10 STR V1, [X31 + 0x1]
	0x03B44B14 BL 0x3C3C6C4
	0x03B44B18 LDR X8, [X20 + 0x2E0]
	0x03B44B1C CBZ X8, 0x3B44C50
	0x03B44B20 LDR W9, [X8 + 0x18]
	0x03B44B24 CMP W28, W9
	0x03B44B28 B.CS 0x3B44C54
	0x03B44B2C LDR X0, [X20 + 0x230]
	0x03B44B30 CBZ X0, 0x3B44C50
	0x03B44B34 ADD X8, X8, X27, 0x2, LSL
	0x03B44B38 LDR V1, [X8 + 0x20]
	0x03B44B3C LDR V2, [X20 + 0x228]
	0x03B44B40 MOV X1, X31
	0x03B44B44 FSUB S0, S0, S1
	0x03B44B48 FDIV S0, S0, S2
	0x03B44B4C FSUB S0, S11, S0
	0x03B44B50 FMIN S1, S0, S11
	0x03B44B54 FCMP S0, 0x0
	0x03B44B58 FCSEL S0, S1, S10, PL
	0x03B44B5C BL 0x3C00CC4
	0x03B44B60 CBZ X19, 0x3B44C50
	0x03B44B64 LDR W8, [X19 + 0x18]
	0x03B44B68 STR V0, [X31]
	0x03B44B6C CMP W28, W8
	0x03B44B70 B.CS 0x3B44C54
	0x03B44B74 MADD X8, X27, X26, X19
	0x03B44B78 LDR V12, [X8 + 0x20]
	0x03B44B7C LDR V13, [X8 + 0x28]
	0x03B44B80 MOV X0, X31
	0x03B44B84 BL 0x3C3C6C4
	0x03B44B88 LDR X8, [X20 + 0x2E0]
	0x03B44B8C CBZ X8, 0x3B44C50
	0x03B44B90 LDR W9, [X8 + 0x18]
	0x03B44B94 CMP W28, W9
	0x03B44B98 B.CS 0x3B44C54
	0x03B44B9C LDR V5, [X31]
	0x03B44BA0 ADD X9, X8, X27, 0x2, LSL
	0x03B44BA4 LDR V3, [X9 + 0x20]
	0x03B44BA8 LDR V4, [X20 + 0x228]
	0x00000000 INVALID
	0x03B44BB0 FADD V9.2S, V9.2S, V1.2S
	0x03B44BB4 LDR V1, [X31 + 0x1]
	0x03B44BB8 FMUL S2, S5, S13
	0x03B44BBC FSUB S0, S0, S3
	0x03B44BC0 FADD S8, S8, S2
	0x03B44BC4 FCMP S0, S4
	0x03B44BC8 FADD S1, S1, S5
	0x03B44BCC B.GT 0x3B44BDC
	0x03B44BD0 ADDS W31, W23, 0x14
	0x03B44BD4 SUB W23, W23, 0x1
	0x03B44BD8 B.NE 0x3B44AAC
	0x03B44BDC FCMP S1, 0x0
	0x03B44BE0 B.LE 0x3B44BF4
	0x03B44BE4 UNIMPLEMENTED
	0x00000000 INVALID
	0x03B44BEC FDIV S2, S8, S1
	0x03B44BF0 B 0x3B44C20
	0x03B44BF4 LDRB W8, [X21 + 0x783]
	0x03B44BF8 CBNZ W8, 0x3B44C10
	0x03B44BFC ADRP X0, 0x5AF000
	0x03B44C00 LDR X0, [X0 + 0x5A0]
	0x03B44C04 BL 0x1C16CF4
	0x03B44C08 MOVZ W8, 0x1
	0x03B44C0C STRB W8, [X21 + 0x783]
	0x03B44C10 LDR X8, [X22]
	0x03B44C14 LDR X8, [X8 + 0xB8]
	0x03B44C18 LDR V0, [X8]
	0x03B44C1C LDR V2, [X8 + 0x8]
	0x03B44C20 LDP X20, X19, [X31 + 0xA0]
	0x03B44C24 LDP X22, X21, [X31 + 0x90]
	0x03B44C28 LDP X24, X23, [X31 + 0x80]
	0x03B44C2C LDP X26, X25, [X31 + 0x70]
	0x03B44C30 LDP X28, X27, [X31 + 0x60]
	0x03B44C34 LDR X30, [X31 + 0x50]
	0x03B44C38 LDP D9, D8, [X31 + 0x40]
	0x03B44C3C LDP D11, D10, [X31 + 0x30]
	0x03B44C40 LDP D13, D12, [X31 + 0x20]
	0x03B44C44 MOV S1, V0.S[1]
	0x03B44C48 ADD X31, X31, 0xB0
	0x03B44C4C RET
	0x03B44C50 BL 0x1C16F20
	0x03B44C54 BL 0x1C16F28
	0x03B44C58 STP D13, D12, [X31 - 0x60]!
	0x03B44C5C STP D11, D10, [X31 + 0x10]
	0x03B44C60 STP D9, D8, [X31 + 0x20]
	0x03B44C64 STP X30, X23, [X31 + 0x30]
	0x03B44C68 STP X22, X21, [X31 + 0x40]
	0x03B44C6C STP X20, X19, [X31 + 0x50]
	0x03B44C70 LDR V12, [X1]
	0x03B44C74 LDP S13, S8, [X1 + 0x8]
	0x03B44C78 LDP S10, S9, [X1 + 0x10]
	0x03B44C7C LDR V11, [X1 + 0x18]
	0x03B44C80 MOV X19, X0
	0x03B44C84 MOV X20, X31
	0x03B44C88 MOV X21, X31
	0x03B44C8C LDR X8, [X19 + 0x2E0]
	0x03B44C90 CBZ X8, 0x3B44DD8
	0x03B44C94 LDR W9, [X8 + 0x18]
	0x03B44C98 CMP X21, X9
	0x03B44C9C B.CS 0x3B44DD4
	0x03B44CA0 ADD X8, X8, X21, 0x2, LSL
	0x03B44CA4 LDR V0, [X8 + 0x20]
	0x03B44CA8 FCMP S0, 0x0

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+48], X22
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X21, 0x89F000
	008 Move W8, [X21+2167]
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {41}
	015 Move X0, 0x617000
	016 Move X0, [X0+1936]
	017 Call 0x1C17CF4
	018 Move X0, 0x617000
	019 Move X0, [X0+1944]
	020 Call 0x1C17CF4
	021 Move X0, 0x617000
	022 Move X0, [X0+760]
	023 Call 0x1C17CF4
	024 Move X0, 0x617000
	025 Move X0, [X0+1952]
	026 Call 0x1C17CF4
	027 Move X0, 0x617000
	028 Move X0, [X0+360]
	029 Call 0x1C17CF4
	030 Move X0, 0x617000
	031 Move X0, [X0+1960]
	032 Call 0x1C17CF4
	033 Move X0, 0x5B7000
	034 Move X0, [X0+3400]
	035 Call 0x1C17CF4
	036 Move X0, 0x617000
	037 Move X0, [X0+1728]
	038 Call 0x1C17CF4
	039 Move W8, 1
	040 Move [X21+2167], W8
	041 Move X0, X19
	042 Move [X31+40], X31
	043 Move [X31+16], X31
	044 Move [X31+24], X31
	045 Call XRBaseInteractable.get_interactorsSelecting, X0
	046 Compare X0, 0
	047 JumpIfEqual {188}
	048 Move W21, [X0+24]
	049 Move X0, X19
	050 Move X1, X20
	051 Call XRBaseInteractable.OnSelectExiting, X0, X1
	052 Move X0, X19
	053 Call XRBaseInteractable.get_interactorsSelecting, X0
	054 Compare X0, 0
	055 JumpIfEqual {188}
	056 Move X8, 0x5B7000
	057 Move X8, [X8+3400]
	058 Move W9, 1
	059 Move W2, [X0+24]
	060 Move [X19+632], W9
	061 Move X3, [X8]
	062 Add X0, X31, 8
	063 Move W1, W21
	064 Move [X31+8], X31
	065 Call ValueTuple`2<Int32, Int32>..ctor, X0, X1, X2
	066 Move X8, [X31+8]
	067 Add X9, X19, 636
	068 Move X0, X19
	069 Move [X9], X8
	070 Move [X19+696], W31
	071 Call XRBaseInteractable.get_interactorsSelecting, X0
	072 Compare X0, 0
	073 JumpIfEqual {188}
	074 Move W8, [X0+24]
	075 Compare W8, 0
	076 JumpIfNotEqual {157}
	077 Move W8, [X19+548]
	078 Compare W8, 0
	079 JumpIfEqual {119}
	080 Compare X20, 0
	081 JumpIfEqual {188}
	082 Move X0, X20
	083 Move X1, X31
	084 Call SelectExitEventArgs.get_interactorObject, X0
	085 Compare X0, 0
	086 JumpIfEqual {188}
	087 Move X10, 0x617000
	088 Move X8, [X0]
	089 Move X10, [X10+760]
	090 Move X21, X0
	091 NotImplemented "Instruction LDRH not yet implemented."
	092 Move X1, [X10]
	093 Compare X9, 0
	094 JumpIfEqual {101}
	095 Move X10, [X8+176]
	096 Add X10, X10, 8
	097 NotImplemented "Instruction LDUR not yet implemented."
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Subtract X9, X9, 1
	100 Add X10, X10, 16
	101 Move W2, 5
	102 Move X0, X21
	103 Call 0x1C5D788
	104 Move W9, [X10]
	105 Add W9, W9, 5
	106 Add X8, X8, W9
	107 Add X0, X8, 312
	108 Move X8, [X0]
	109 Move X1, [X0+8]
	110 Move X0, X21
	111 NotImplemented "Instruction BLR not yet implemented."
	112 Compare X0, 0
	113 JumpIfEqual {188}
	114 Move X8, 0x617000
	115 Move X8, [X8+1936]
	116 Move X1, [X8]
	117 Call 0x21A4F50, X0
	118 Move [X19+792], X0
	119 Move X8, [X19]
	120 Move X0, X19
	121 Move X9, [X8+2248]
	122 Move X1, [X8+2256]
	123 NotImplemented "Instruction BLR not yet implemented."
	124 Move W8, [X19+648]
	125 NotImplemented "Instruction CMP not yet implemented."
	126 Move X21, 0x617000
	127 Move X21, [X21+1728]
	128 Move X0, [X21]
	129 Move W8, [X0+224]
	130 Compare W8, 0
	131 JumpIfNotEqual {134}
	132 Call 0x1C17DFC
	133 Move X0, [X21]
	134 Move X8, [X0+184]
	135 Move X0, [X8]
	136 Compare X0, 0
	137 JumpIfEqual {188}
	138 Move X8, 0x617000
	139 Move X8, [X8+1952]
	140 Add X1, X31, 40
	141 Move X2, [X8]
	142 Call 0x2EF2058, X0, X1
	143 Move X8, X1
	144 Move X1, [X31+40]
	145 Move [X31+16], X0
	146 Move [X31+24], X8
	147 Compare X1, 0
	148 JumpIfEqual {189}
	149 Move [X1+16], X20
	150 Move X0, X19
	151 Call XRGrabInteractable.InvokeGrabTransformersOnDrop, X0, X1
	152 Move X8, 0x617000
	153 Move X8, [X8+1960]
	154 Add X0, X31, 16
	155 Move X1, [X8]
	156 Call 0x24A7DD0, X0
	157 Compare X20, 0
	158 JumpIfEqual {188}
	159 Move X21, [X19+832]
	160 Move X0, X20
	161 Move X1, X31
	162 Call SelectExitEventArgs.get_interactorObject, X0
	163 Compare X21, 0
	164 JumpIfEqual {188}
	165 Move X8, 0x617000
	166 Move X8, [X8+1944]
	167 Move X1, X0
	168 Move X0, X21
	169 Move X2, [X8]
	170 Call HashSet`1<Object>.Remove, X0, X1
	171 Move X0, X20
	172 Move X1, X31
	173 Call SelectExitEventArgs.get_interactorObject, X0
	174 Move X8, [X19+864]
	175 Compare X8, 0
	176 JumpIfEqual {188}
	177 Move X1, X0
	178 Move X0, X8
	179 Move X2, X31
	180 Call TeleportationMonitor.RemoveInteractor, X0, X1
	181 Move X20, [X31+64]
	182 Move X19, [X31+72]
	183 Move X22, [X31+48]
	184 Move X21, [X31+56]
	185 Move X30, [X31+32]
	186 Add X31, X31, 80
	187 Return 
	188 Call 0x1C17F20
	189 Call 0x1C17F20
	190 Move X22, X0
	191 NotImplemented "Instruction CMP not yet implemented."
	192 Move X0, X22
	193 Call 0x3EB2AD0
	194 Move X21, [X0]
	195 Call 0x3EB2AE0
	196 Move X8, 0x617000
	197 Move X8, [X8+1960]
	198 Add X0, X31, 16
	199 Move X1, [X8]
	200 Call 0x24A7DD0, X0
	201 Compare X21, 0
	202 JumpIfEqual {157}
	203 Move X0, X21
	204 Call 0x1C17F18
	205 Move X21, X31
	206 Move X22, X0
	207 Move X8, 0x617000
	208 Move X8, [X8+1960]
	209 Move X1, [X8]
	210 Add X0, X31, 16
	211 Call 0x24A7DD0, X0
	212 Compare X21, 0
	213 JumpIfNotEqual {216}
	214 Move X0, X22
	215 Call 0x1D2D690
	216 Move X0, X21
	217 Call 0x1C17F18
	218 Call 0x1991590

Method: System.Void OnSelectExited(UnityEngine.XR.Interaction.Toolkit.SelectExitEventArgs args)

Disassembly:
	0x03B44CC8 LDP S4, S5, [X22 + 0x20]
	0x03B44CCC LDR V6, [X22 + 0x28]
	0x03B44CD0 MOV V0.16B, V8.16B
	0x03B44CD4 MOV V1.16B, V10.16B
	0x03B44CD8 MOV V2.16B, V9.16B
	0x03B44CDC MOV V3.16B, V11.16B
	0x03B44CE0 MOV X0, X31
	0x03B44CE4 BL 0x3C2A9FC
	0x03B44CE8 LDR W8, [X23 + 0x18]
	0x03B44CEC CMP X21, X8
	0x03B44CF0 B.CS 0x3B44DD4
	0x03B44CF4 ADD X21, X21, 0x1
	0x03B44CF8 CMP X21, 0x14
	0x03B44CFC ADD X20, X20, 0xC
	0x03B44D00 STP S0, S1, [X22 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, X1
	005 Move X19, X0
	006 Call XRBaseInteractable.OnSelectExited, X0, X1
	007 Compare X20, 0
	008 JumpIfEqual {17}
	009 Move X0, X20
	010 Move X1, X31
	011 Call SelectExitEventArgs.get_interactorObject, X0
	012 Move X1, X0
	013 Move X0, X19
	014 Move X20, [X31+16]
	015 Move X19, [X31+24]
	016 Move X30, [X31+32]
	017 Call 0x1C17F20

Method: UnityEngine.Transform CreateDynamicAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)

Disassembly:
	0x03B44680 MOV X19, X0
	0x03B44684 BL 0x3B44A20
	0x03B44688 LDR X1, [X19 + 0x2F0]
	0x03B4468C MOV X0, X19
	0x03B44690 MOV V8.16B, V0.16B
	0x03B44694 MOV V9.16B, V1.16B
	0x03B44698 STR D2, [X31]
	0x03B4469C BL 0x3B44A20
	0x03B446A0 LDR V3, [X19 + 0x238]
	0x03B446A4 ADD X8, X19, 0x2CC
	0x03B446A8 FMUL S4, S8, V3.S[0]
	0x03B446AC STR S4, [X19 + 0x2C4]
	0x03B446B0 LDR V4, [X31]
	0x03B446B4 FMUL S5, S9, V3.S[0]
	0x03B446B8 STR S5, [X19 + 0x2C8]
	0x03B446BC MOV V4.S[1], V0.S[0]
	0x03B446C0 MOV V4.S[2], V1.S[0]
	0x03B446C4 UNIMPLEMENTED
	0x03B446C8 UNIMPLEMENTED
	0x03B446CC MOV V4.S[3], V2.S[0]
	0x00000000 INVALID
	0x03B446D4 STR V0, [X8]
	0x03B446D8 LDP X30, X19, [X31 + 0x20]
	0x03B446DC LDP D9, D8, [X31 + 0x10]
	0x03B446E0 ADD X31, X31, 0x30
	0x03B446E4 RET
	0x03B446E8 SUB X31, X31, 0x40
	0x03B446EC STR D8, [X31 + 0x10]
	0x03B446F0 STP X30, X21, [X31 + 0x20]
	0x03B446F4 STP X20, X19, [X31 + 0x30]
	0x03B446F8 ADRP X20, 0x89E000
	0x03B446FC LDRB W8, [X20 + 0x87F]
	0x03B44700 MOV X19, X0
	0x03B44704 TBNZ X8, 0x0, 0x3B44740
	0x03B44708 ADRP X0, 0x5AF000
	0x03B4470C LDR X0, [X0 + 0xA28]
	0x03B44710 BL 0x1C16CF4
	0x03B44714 ADRP X0, 0x616000
	0x03B44718 LDR X0, [X0 + 0x7D8]
	0x03B4471C BL 0x1C16CF4
	0x03B44720 ADRP X0, 0x5AF000
	0x03B44724 LDR X0, [X0 + 0x5F8]
	0x03B44728 BL 0x1C16CF4
	0x03B4472C ADRP X0, 0x616000
	0x03B44730 LDR X0, [X0 + 0x7E0]
	0x03B44734 BL 0x1C16CF4
	0x03B44738 MOVZ W8, 0x1
	0x03B4473C STRB W8, [X20 + 0x87F]
	0x03B44740 STR W31, [X31 + 0x8]
	0x03B44744 STR X31, [X31]
	0x03B44748 LDRB W8, [X19 + 0x224]
	0x03B4474C CBZ W8, 0x3B448B0
	0x03B44750 LDR X0, [X19 + 0x320]
	0x03B44754 CBZ X0, 0x3B448C4
	0x03B44758 MOV X1, X31
	0x03B4475C BL 0x3C8ECF0
	0x03B44760 TBZ X0, 0x0, 0x3B44798
	0x03B44764 ADRP X8, 0x5AF000
	0x03B44768 LDR X8, [X8 + 0xA28]
	0x03B4476C LDR X0, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x89F000
	008 Move W8, [X20+2168]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x617000
	015 Move X0, [X0+1912]
	016 Call 0x1C17CF4
	017 Move X0, 0x5B0000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x617000
	021 Move X0, [X0+1728]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2168], W8
	025 Move X21, 0x617000
	026 Move X22, 0x617000
	027 Move X23, 0x5B0000
	028 Move X21, [X21+1728]
	029 Move X22, [X22+1912]
	030 Move X23, [X23+1432]
	031 Move X0, [X21]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {37}
	035 Call 0x1C17DFC
	036 Move X0, [X21]
	037 Move X8, [X0+184]
	038 Move X0, [X8+8]
	039 Compare X0, 0
	040 JumpIfEqual {76}
	041 Move X1, [X22]
	042 Call 0x2EF1FD0, X0
	043 Move X8, [X23]
	044 Move X20, X0
	045 Move W9, [X8+224]
	046 Compare W9, 0
	047 JumpIfNotEqual {50}
	048 Move X0, X8
	049 Call 0x1C17DFC
	050 Move X0, X20
	051 Move X1, X31
	052 Move X2, X31
	053 Call Object.op_Equality, X0, X1
	054 Move TEMP, X0
	055 And TEMP, TEMP, 1
	056 Compare TEMP, 1
	057 JumpIfEqual {31}
	058 Move X0, X19
	059 Move X1, X31
	060 Call Component.get_transform, X0
	061 Compare X20, 0
	062 JumpIfEqual {76}
	063 Move X1, X0
	064 Move X0, X20
	065 Move W2, W31
	066 Move X3, X31
	067 Call Transform.SetParent, X0, X1, X2
	068 Move X0, X20
	069 Move X20, [X31+32]
	070 Move X19, [X31+40]
	071 Move X22, [X31+16]
	072 Move X21, [X31+24]
	073 Move X30, [X31+48]
	074 Move X23, [X31+56]
	075 Return X0
	076 Call 0x1C17F20

Method: System.Void InitializeDynamicAttachPoseInternal(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor, UnityEngine.Transform dynamicAttachTransform)

Disassembly:
	0x03B43A0C ADRP X0, 0x617000
	0x03B43A10 LDR X0, [X0 + 0x6C0]
	0x03B43A14 BL 0x1C16CF4
	0x03B43A18 MOVZ W8, 0x1
	0x03B43A1C STRB W8, [X21 + 0x877]
	0x03B43A20 MOV X0, X19
	0x03B43A24 STR X31, [X31 + 0x28]
	0x03B43A28 STP X31, X31, [X31 + 0x10]
	0x03B43A2C BL 0x3B3A784
	0x03B43A30 CBZ X0, 0x3B43C2C
	0x03B43A34 LDR W21, [X0 + 0x18]
	0x03B43A38 MOV X0, X19
	0x03B43A3C MOV X1, X20
	0x03B43A40 BL 0x3B3CA00
	0x03B43A44 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X2
	006 Move X20, X1
	007 Move X21, X0
	008 Call XRGrabInteractable.InitializeDynamicAttachPoseWithStatic, X0, X1, X2
	009 Move X8, [X21]
	010 Move X1, X20
	011 Move X2, X19
	012 Move X20, [X31+16]
	013 Move X19, [X31+24]
	014 Move X4, [X8+2216]
	015 Move X3, [X8+2224]
	016 Move X0, X21
	017 Move X30, [X31+32]
	018 Move X21, [X31+40]
	019 CallNoReturn X4

Method: System.Void InitializeDynamicAttachPoseWithStatic(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor, UnityEngine.Transform dynamicAttachTransform)

Disassembly:
	0x03B44E58 ADRP X20, 0x5AF000
	0x03B44E5C LDR X20, [X20 + 0x5A0]
	0x03B44E60 MOV X0, X19
	0x03B44E64 MOV X1, X31
	0x03B44E68 LDR X8, [X20]
	0x03B44E6C LDR X8, [X8 + 0xB8]
	0x03B44E70 LDP S1, S2, [X8 + 0x4]
	0x03B44E74 LDR V0, [X8]
	0x03B44E78 BL 0x3C3EC04
	0x03B44E7C ADRP X21, 0x894000
	0x03B44E80 LDRB W8, [X21 + 0x793]
	0x03B44E84 CBNZ W8, 0x3B44E9C
	0x03B44E88 ADRP X0, 0x5B0000
	0x03B44E8C LDR X0, [X0 + 0x5A8]
	0x03B44E90 BL 0x1C16CF4
	0x03B44E94 MOVZ W8, 0x1
	0x03B44E98 STRB W8, [X21 + 0x793]
	0x03B44E9C ADRP X8, 0x5B0000
	0x03B44EA0 LDR X8, [X8 + 0x5A8]
	0x03B44EA4 MOV X0, X19
	0x03B44EA8 MOV X1, X31
	0x03B44EAC LDR X8, [X8]
	0x03B44EB0 LDR X8, [X8 + 0xB8]
	0x03B44EB4 LDP S0, S1, [X8]
	0x03B44EB8 LDP S2, S3, [X8 + 0x8]
	0x03B44EBC BL 0x3C3F8B8
	0x03B44EC0 ADRP X21, 0x894000
	0x03B44EC4 LDRB W8, [X21 + 0x85B]
	0x03B44EC8 CBNZ W8, 0x3B44EE0
	0x03B44ECC ADRP X0, 0x5AF000
	0x03B44ED0 LDR X0, [X0 + 0x5A0]
	0x03B44ED4 BL 0x1C16CF4
	0x03B44ED8 MOVZ W8, 0x1
	0x03B44EDC STRB W8, [X21 + 0x85B]
	0x03B44EE0 LDR X8, [X20]
	0x03B44EE4 MOV X0, X19
	0x03B44EE8 MOV X1, X31
	0x03B44EEC LDR X8, [X8 + 0xB8]
	0x03B44EF0 LDP S0, S1, [X8 + 0xC]
	0x03B44EF4 LDR V2, [X8 + 0x14]
	0x03B44EF8 BL 0x3C3FC4C
	0x03B44EFC MOV X0, X19
	0x03B44F00 LDP X20, X19, [X31 + 0x10]
	0x03B44F04 LDP X30, X21, [X31], #0x20
	0x03B44F08 RET
	0x03B44F0C BL 0x1C16F20
	0x03B44F10 STP X30, X21, [X31 - 0x20]!
	0x03B44F14 STP X20, X19, [X31 + 0x10]
	0x03B44F18 ADRP X20, 0x89E000
	0x03B44F1C ADRP X21, 0x5AF000
	0x03B44F20 LDRB W8, [X20 + 0x884]
	0x03B44F24 LDR X21, [X21 + 0x598]
	0x03B44F28 MOV X19, X0
	0x03B44F2C TBNZ X8, 0x0, 0x3B44F44
	0x03B44F30 ADRP X0, 0x5AF000
	0x03B44F34 LDR X0, [X0 + 0x598]
	0x03B44F38 BL 0x1C16CF4
	0x03B44F3C MOVZ W8, 0x1
	0x03B44F40 STRB W8, [X20 + 0x884]
	0x03B44F44 LDR X0, [X21]
	0x03B44F48 LDR W8, [X0 + 0xE0]
	0x03B44F4C CBNZ W8, 0x3B44F54
	0x03B44F50 BL 0x1C16DFC
	0x03B44F54 MOV X0, X19
	0x03B44F58 MOV X1, X31
	0x03B44F5C MOV X2, X31
	0x03B44F60 BL 0x3C3883C
	0x03B44F64 TBZ X0, 0x0, 0x3B44F74
	0x03B44F68 LDP X20, X19, [X31 + 0x10]
	0x03B44F6C LDP X30, X21, [X31], #0x20
	0x03B44F70 RET
	0x03B44F74 CBZ X19, 0x3B44F9C
	0x03B44F78 MOV X0, X19
	0x03B44F7C MOV X1, X31
	0x03B44F80 BL 0x3C396B0
	0x03B44F84 AND W1, W0, 0xFFFFFFFE
	0x03B44F88 MOV X0, X19
	0x03B44F8C LDP X20, X19, [X31 + 0x10]
	0x03B44F90 MOV X2, X31
	0x03B44F94 LDP X30, X21, [X31], #0x20
	0x03B44F98 B 0x3C396EC
	0x03B44F9C BL 0x1C16F20
	0x03B44FA0 STP X30, X21, [X31 - 0x20]!
	0x03B44FA4 STP X20, X19, [X31 + 0x10]
	0x03B44FA8 ADRP X20, 0x89E000
	0x03B44FAC ADRP X21, 0x5AF000
	0x03B44FB0 LDRB W8, [X20 + 0x885]
	0x03B44FB4 LDR X21, [X21 + 0x598]
	0x03B44FB8 MOV X19, X0
	0x03B44FBC TBNZ X8, 0x0, 0x3B44FD4
	0x03B44FC0 ADRP X0, 0x5AF000
	0x03B44FC4 LDR X0, [X0 + 0x598]
	0x03B44FC8 BL 0x1C16CF4
	0x03B44FCC MOVZ W8, 0x1
	0x03B44FD0 STRB W8, [X20 + 0x885]
	0x03B44FD4 LDR X0, [X21]
	0x03B44FD8 LDR W8, [X0 + 0xE0]
	0x03B44FDC CBNZ W8, 0x3B44FE4
	0x03B44FE0 BL 0x1C16DFC
	0x03B44FE4 MOV X0, X19
	0x03B44FE8 MOV X1, X31
	0x03B44FEC MOV X2, X31
	0x03B44FF0 BL 0x3C3883C
	0x03B44FF4 TBZ X0, 0x0, 0x3B45004
	0x03B44FF8 LDP X20, X19, [X31 + 0x10]
	0x03B44FFC LDP X30, X21, [X31], #0x20
	0x03B45000 RET
	0x03B45004 CBZ X19, 0x3B4502C
	0x03B45008 MOV X0, X19
	0x03B4500C MOV X1, X31
	0x03B45010 BL 0x3C396B0
	0x03B45014 ORR W1, W0, 0x1
	0x03B45018 MOV X0, X19
	0x03B4501C LDP X20, X19, [X31 + 0x10]
	0x03B45020 MOV X2, X31
	0x03B45024 LDP X30, X21, [X31], #0x20
	0x03B45028 B 0x3C396EC
	0x03B4502C BL 0x1C16F20
	0x03B45030 STP X30, X21, [X31 - 0x20]!
	0x03B45034 STP X20, X19, [X31 + 0x10]
	0x03B45038 ADRP X21, 0x89D000
	0x03B4503C ADRP X20, 0x5AE000
	0x03B45040 LDRB W8, [X21 + 0x886]
	0x03B45044 LDR X20, [X20 + 0x598]
	0x03B45048 MOV X19, X0
	0x03B4504C TBNZ X8, 0x0, 0x3B45064
	0x03B45050 ADRP X0, 0x5AE000
	0x03B45054 LDR X0, [X0 + 0x598]
	0x03B45058 BL 0x1C16CF4
	0x03B4505C MOVZ W8, 0x1
	0x03B45060 STRB W8, [X21 + 0x886]
	0x03B45064 LDR X0, [X20]
	0x03B45068 LDR W8, [X0 + 0xE0]
	0x03B4506C CBNZ W8, 0x3B45074
	0x03B45070 BL 0x1C16DFC
	0x03B45074 MOV X0, X19
	0x03B45078 MOV X1, X31
	0x03B4507C MOV X2, X31
	0x03B45080 BL 0x3C3883C
	0x03B45084 TBZ X0, 0x0, 0x3B45094
	0x03B45088 LDP X20, X19, [X31 + 0x10]
	0x03B4508C LDP X30, X21, [X31], #0x20
	0x03B45090 RET
	0x03B45094 CBZ X19, 0x3B450D0
	0x03B45098 MOV X0, X19
	0x03B4509C MOV X1, X31
	0x03B450A0 BL 0x3C32ECC
	0x03B450A4 LDR X8, [X20]
	0x03B450A8 MOV X19, X0
	0x03B450AC LDR W9, [X8 + 0xE0]
	0x03B450B0 CBNZ W9, 0x3B450BC
	0x03B450B4 MOV X0, X8
	0x03B450B8 BL 0x1C16DFC
	0x03B450BC MOV X0, X19
	0x03B450C0 LDP X20, X19, [X31 + 0x10]
	0x03B450C4 MOV X1, X31
	0x03B450C8 LDP X30, X21, [X31], #0x20
	0x03B450CC B 0x3C394A8
	0x03B450D0 BL 0x1C16F20
	0x03B450D4 LDRB W0, [X0 + 0x240]
	0x03B450D8 RET

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x89F000
	011 Move W8, [X20+2169]
	012 Move X19, X2
	013 Move X22, X1
	014 Move X21, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x617000
	020 Move X0, [X0+1680]
	021 Call 0x1C17CF4
	022 Move X0, 0x617000
	023 Move X0, [X0+1976]
	024 Call 0x1C17CF4
	025 Move X0, 0x5B0000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2169], W8
	030 Move X0, [X21+872]
	031 Compare X0, 0
	032 JumpIfEqual {196}
	033 Move X8, 0x617000
	034 Move X8, [X8+1680]
	035 Move X1, X22
	036 Move X2, [X8]
	037 Call Dictionary`2<Object, Object>.Remove, X0, X1
	038 Move X8, [X21]
	039 Move X0, X21
	040 Move X1, X22
	041 Move X9, [X8+1448]
	042 Move X2, [X8+1456]
	043 NotImplemented "Instruction BLR not yet implemented."
	044 Move X8, [X21+872]
	045 Compare X8, 0
	046 JumpIfEqual {196}
	047 Move X9, 0x617000
	048 Move X9, [X9+1976]
	049 Move X23, 0x5B0000
	050 Move X20, X0
	051 Move X0, X8
	052 Move X3, [X9]
	053 Move X23, [X23+1432]
	054 Move X1, X22
	055 Move X2, X19
	056 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	057 Move X0, X21
	058 Move X1, X31
	059 Call Component.get_transform, X0
	060 Move X8, [X23]
	061 Move X22, X0
	062 Move W9, [X8+224]
	063 Compare W9, 0
	064 JumpIfNotEqual {67}
	065 Move X0, X8
	066 Call 0x1C17DFC
	067 Move X0, X20
	068 Move X1, X22
	069 Move X2, X31
	070 Call Object.op_Equality, X0, X1
	071 Move TEMP, X0
	072 And TEMP, TEMP, 1
	073 Compare TEMP, 1
	074 JumpIfNotEqual {113}
	075 Move X20, 0x895000
	076 Move W8, [X20+1923]
	077 Compare W8, 0
	078 JumpIfNotEqual {84}
	079 Move X0, 0x5B0000
	080 Move X0, [X0+1440]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X20+1923], W8
	084 Compare X19, 0
	085 JumpIfEqual {196}
	086 Move X8, 0x5B0000
	087 Move X8, [X8+1440]
	088 Move X0, X19
	089 Move X1, X31
	090 Move X8, [X8]
	091 Move X8, [X8+184]
	092 Move S1, [X8+4]
	093 Move S2, [X8+8]
	094 Move V0, [X8]
	095 Call Transform.set_localPosition, X0, X1
	096 Move X20, 0x895000
	097 Move W8, [X20+1939]
	098 Compare W8, 0
	099 JumpIfNotEqual {105}
	100 Move X0, 0x5B1000
	101 Move X0, [X0+1448]
	102 Call 0x1C17CF4
	103 Move W8, 1
	104 Move [X20+1939], W8
	105 Move X8, 0x5B1000
	106 Move X8, [X8+1448]
	107 Move X8, [X8]
	108 Move X8, [X8+184]
	109 Move S0, [X8]
	110 Move S1, [X8+4]
	111 Move S2, [X8+8]
	112 Move S3, [X8+12]
	113 Compare X20, 0
	114 JumpIfEqual {196}
	115 Move X0, X20
	116 Move X1, X31
	117 Call Transform.get_parent, X0
	118 Move X22, X0
	119 Move X0, X21
	120 Move X1, X31
	121 Call Component.get_transform, X0
	122 Move X8, [X23]
	123 Move X21, X0
	124 Move W9, [X8+224]
	125 Compare W9, 0
	126 JumpIfNotEqual {129}
	127 Move X0, X8
	128 Call 0x1C17DFC
	129 Move X0, X22
	130 Move X1, X21
	131 Move X2, X31
	132 Call Object.op_Equality, X0, X1
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {161}
	137 Move X0, X20
	138 Move X1, X31
	139 Call Transform.get_localPosition, X0
	140 Compare X19, 0
	141 JumpIfEqual {196}
	142 Move X0, X19
	143 Move X1, X31
	144 Call Transform.set_localPosition, X0, X1
	145 Move X0, X20
	146 Move X1, X31
	147 Call Transform.get_localRotation, X0
	148 Move X0, X19
	149 Move X20, [X31+64]
	150 Move X19, [X31+72]
	151 Move X22, [X31+48]
	152 Move X21, [X31+56]
	153 Move X30, [X31+32]
	154 Move X23, [X31+40]
	155 Move D9, [X31+16]
	156 Move D8, [X31+24]
	157 Move X1, X31
	158 Move V10, [X31+80]
	159 Call Transform.set_localRotation, X0, X1
	160 Return 
	161 Move X0, X20
	162 Move X1, X31
	163 Call Transform.get_position, X0
	164 Move X0, X20
	165 Move X1, X31
	166 Move V8, V0
	167 Move V9, V1
	168 Move V10, V2
	169 Call Transform.get_rotation, X0
	170 Compare X19, 0
	171 JumpIfEqual {196}
	172 Move V4, V0
	173 Move V5, V1
	174 Move X0, X19
	175 Move V0, V8
	176 Move V1, V9
	177 Move X20, [X31+64]
	178 Move X19, [X31+72]
	179 Move X22, [X31+48]
	180 Move X21, [X31+56]
	181 Move X30, [X31+32]
	182 Move X23, [X31+40]
	183 Move D9, [X31+16]
	184 Move D8, [X31+24]
	185 Move V6, V2
	186 Move V7, V3
	187 Move V2, V10
	188 Move V3, V4
	189 Move V4, V5
	190 Move V5, V6
	191 Move V6, V7
	192 Move X1, X31
	193 Move V10, [X31+80]
	194 Call Transform.SetPositionAndRotation, X0, X1, X2
	195 Return 
	196 Call 0x1C17F20

Method: System.Void ReleaseDynamicAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)

Disassembly:
	0x03B44D04 STR S2, [X22 + 0x28]
	0x03B44D08 B.NE 0x3B44C8C
	0x03B44D0C ADD X8, X19, 0x2FC
	0x03B44D10 LDR V0, [X8]
	0x03B44D14 LDR V1, [X8 + 0x8]
	0x03B44D18 LDR V2, [X8 + 0x18]
	0x03B44D1C LDR V3, [X8 + 0x10]
	0x03B44D20 FADD V0.2S, V12.2S, V0.2S
	0x03B44D24 FADD S1, S13, S1
	0x03B44D28 STR D0, [X8]
	0x03B44D2C STR S1, [X8 + 0x8]
	0x03B44D30 LDR V0, [X19 + 0x308]
	0x03B44D34 LDR V1, [X19 + 0x310]
	0x03B44D38 FMUL S6, S11, S3
	0x03B44D3C FMUL S7, S10, S2
	0x03B44D40 FMUL S4, S8, S2
	0x03B44D44 FMUL S16, S9, S2
	0x03B44D48 FADD S6, S6, S7
	0x03B44D4C FMUL S7, S11, S0
	0x03B44D50 FMUL S19, S9, S0
	0x03B44D54 FMUL S22, S11, S1
	0x03B44D58 FMUL S17, S8, S3
	0x03B44D5C FMUL S2, S11, S2
	0x03B44D60 FMUL S18, S10, S1
	0x03B44D64 FMUL S20, S10, S0
	0x03B44D68 FMUL S0, S8, S0
	0x03B44D6C FMUL S21, S8, S1
	0x03B44D70 FADD S4, S7, S4
	0x03B44D74 FADD S6, S19, S6
	0x03B44D78 FADD S7, S22, S16
	0x03B44D7C FMUL S5, S9, S3
	0x03B44D80 FMUL S3, S10, S3
	0x03B44D84 FSUB S0, S2, S0
	0x03B44D88 FADD S2, S18, S4
	0x03B44D8C FSUB S4, S6, S21
	0x03B44D90 FADD S6, S17, S7
	0x03B44D94 FSUB S0, S0, S3
	0x03B44D98 FSUB S2, S2, S5
	0x03B44D9C FSUB S3, S6, S20
	0x03B44DA0 FMUL S1, S9, S1
	0x03B44DA4 STR S2, [X19 + 0x308]
	0x03B44DA8 STR S4, [X8 + 0x10]
	0x03B44DAC STR S3, [X19 + 0x310]
	0x03B44DB0 LDP X20, X19, [X31 + 0x50]
	0x03B44DB4 LDP X22, X21, [X31 + 0x40]
	0x03B44DB8 LDP X30, X23, [X31 + 0x30]
	0x03B44DBC LDP D9, D8, [X31 + 0x20]
	0x03B44DC0 LDP D11, D10, [X31 + 0x10]
	0x03B44DC4 FSUB S0, S0, S1
	0x03B44DC8 STR S0, [X8 + 0x18]
	0x03B44DCC LDP D13, D12, [X31], #0x60
	0x03B44DD0 RET
	0x03B44DD4 BL 0x1C16F28
	0x03B44DD8 BL 0x1C16F20
	0x03B44DDC STP X30, X21, [X31 - 0x20]!
	0x03B44DE0 STP X20, X19, [X31 + 0x10]
	0x03B44DE4 ADRP X19, 0x89E000
	0x03B44DE8 ADRP X20, 0x5AF000
	0x03B44DEC LDRB W8, [X19 + 0x883]
	0x03B44DF0 LDR X20, [X20 + 0xA58]
	0x03B44DF4 TBNZ X8, 0x0, 0x3B44E0C
	0x03B44DF8 ADRP X0, 0x5AF000
	0x03B44DFC LDR X0, [X0 + 0xA58]
	0x03B44E00 BL 0x1C16CF4
	0x03B44E04 MOVZ W8, 0x1
	0x03B44E08 STRB W8, [X19 + 0x883]
	0x03B44E0C LDR X0, [X20]
	0x03B44E10 BL 0x1C16F10
	0x03B44E14 MOV X1, X31
	0x03B44E18 MOV X19, X0
	0x03B44E1C BL 0x3C35A08
	0x03B44E20 CBZ X19, 0x3B44F0C
	0x03B44E24 MOV X0, X19
	0x03B44E28 MOV X1, X31
	0x03B44E2C BL 0x3C356F8
	0x03B44E30 ADRP X20, 0x894000
	0x03B44E34 LDRB W8, [X20 + 0x783]
	0x03B44E38 MOV X19, X0
	0x03B44E3C CBNZ W8, 0x3B44E54
	0x03B44E40 ADRP X0, 0x5AF000
	0x03B44E44 LDR X0, [X0 + 0x5A0]
	0x03B44E48 BL 0x1C16CF4
	0x03B44E4C MOVZ W8, 0x1
	0x03B44E50 STRB W8, [X20 + 0x783]
	0x03B44E54 CBZ X19, 0x3B44F0C

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x89F000
	007 Move W8, [X21+2170]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x617000
	015 Move X0, [X0+1680]
	016 Call 0x1C17CF4
	017 Move X0, 0x617000
	018 Move X0, [X0+1664]
	019 Call 0x1C17CF4
	020 Move X0, 0x617000
	021 Move X0, [X0+1672]
	022 Call 0x1C17CF4
	023 Move X0, 0x617000
	024 Move X0, [X0+1968]
	025 Call 0x1C17CF4
	026 Move X0, 0x5B0000
	027 Move X0, [X0+1432]
	028 Call 0x1C17CF4
	029 Move X0, 0x617000
	030 Move X0, [X0+1728]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X21+2170], W8
	034 Move [X31+8], X31
	035 Move X0, [X20+872]
	036 Compare X0, 0
	037 JumpIfEqual {103}
	038 Move X8, 0x617000
	039 Move X8, [X8+1672]
	040 Move X1, [X8]
	041 Call Dictionary`2<Object, Object>.get_Count, X0
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Move X0, [X20+872]
	044 Compare X0, 0
	045 JumpIfEqual {103}
	046 Move X8, 0x617000
	047 Move X8, [X8+1664]
	048 Add X2, X31, 8
	049 Move X1, X19
	050 Move X3, [X8]
	051 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {97}
	056 Move X8, 0x5B0000
	057 Move X8, [X8+1432]
	058 Move X21, [X31+8]
	059 Move X0, [X8]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X21
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Inequality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {89}
	072 Move X21, 0x617000
	073 Move X21, [X21+1728]
	074 Move X0, [X21]
	075 Move W8, [X0+224]
	076 Compare W8, 0
	077 JumpIfNotEqual {80}
	078 Call 0x1C17DFC
	079 Move X0, [X21]
	080 Move X8, [X0+184]
	081 Move X0, [X8+8]
	082 Compare X0, 0
	083 JumpIfEqual {103}
	084 Move X8, 0x617000
	085 Move X1, [X31+8]
	086 Move X8, [X8+1968]
	087 Move X2, [X8]
	088 Call 0x2EF20B8, X0, X1
	089 Move X0, [X20+872]
	090 Compare X0, 0
	091 JumpIfEqual {103}
	092 Move X8, 0x617000
	093 Move X8, [X8+1680]
	094 Move X1, X19
	095 Move X2, [X8]
	096 Call Dictionary`2<Object, Object>.Remove, X0, X1
	097 Move X20, [X31+32]
	098 Move X19, [X31+40]
	099 Move X30, [X31+16]
	100 Move X21, [X31+24]
	101 Add X31, X31, 48
	102 Return 
	103 Call 0x1C17F20

Method: System.Boolean ShouldMatchAttachPosition(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)

Disassembly:
	0x03B450DC AND W8, W1, 0x1
	0x03B450E0 STRB W8, [X0 + 0x240]
	0x03B450E4 RET
	0x03B450E8 STP X29, X30, [X31 - 0x60]!
	0x03B450EC STP X28, X27, [X31 + 0x10]
	0x03B450F0 STP X26, X25, [X31 + 0x20]
	0x03B450F4 STP X24, X23, [X31 + 0x30]
	0x03B450F8 STP X22, X21, [X31 + 0x40]
	0x03B450FC STP X20, X19, [X31 + 0x50]
	0x03B45100 ADRP X27, 0x89D000
	0x03B45104 ADRP X26, 0x615000
	0x03B45108 ADRP X25, 0x615000
	0x03B4510C ADRP X24, 0x615000
	0x03B45110 ADRP X23, 0x615000
	0x03B45114 ADRP X22, 0x5AE000
	0x03B45118 ADRP X21, 0x5B0000
	0x03B4511C ADRP X29, 0x615000
	0x03B45120 ADRP X28, 0x615000
	0x03B45124 LDR X26, [X26 + 0x7E8]
	0x03B45128 LDR X25, [X25 + 0x7F0]
	0x03B4512C LDR X24, [X24 + 0x7F8]
	0x03B45130 LDR X23, [X23 + 0x800]
	0x03B45134 LDR X22, [X22 + 0x638]
	0x03B45138 LDR X21, [X21 + 0x9B0]
	0x03B4513C LDR X29, [X29 + 0x808]
	0x03B45140 LDR X28, [X28 + 0x810]
	0x03B45144 LDRB W8, [X27 + 0x887]
	0x03B45148 MOV X19, X0
	0x03B4514C ADD X20, X0, 0x1E1
	0x03B45150 TBNZ X8, 0x0, 0x3B45210
	0x03B45154 ADRP X0, 0x615000
	0x03B45158 LDR X0, [X0 + 0x818]
	0x03B4515C BL 0x1C16CF4
	0x03B45160 ADRP X0, 0x615000
	0x03B45164 LDR X0, [X0 + 0x820]
	0x03B45168 BL 0x1C16CF4
	0x03B4516C ADRP X0, 0x615000
	0x03B45170 LDR X0, [X0 + 0x828]
	0x03B45174 BL 0x1C16CF4
	0x03B45178 ADRP X0, 0x615000
	0x03B4517C LDR X0, [X0 + 0x810]
	0x03B45180 BL 0x1C16CF4
	0x03B45184 ADRP X0, 0x615000
	0x03B45188 LDR X0, [X0 + 0x830]
	0x03B4518C BL 0x1C16CF4
	0x03B45190 ADRP X0, 0x615000
	0x03B45194 LDR X0, [X0 + 0x808]
	0x03B45198 BL 0x1C16CF4
	0x03B4519C ADRP X0, 0x5DA000
	0x03B451A0 LDR X0, [X0 + 0xC50]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89E000
	006 Move W8, [X21+2171]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {21}
	013 Move X0, 0x616000
	014 Move X0, [X0+1984]
	015 Call 0x1C17CF4
	016 Move X0, 0x616000
	017 Move X0, [X0+1992]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2171], W8
	021 Move W8, [X20+481]
	022 Compare W8, 0
	023 JumpIfEqual {50}
	024 Compare X19, 0
	025 JumpIfEqual {46}
	026 Move X9, 0x616000
	027 Move X9, [X9+1992]
	028 Move X8, [X19]
	029 Move X10, [X9]
	030 Move W9, [X8+304]
	031 Move W11, [X10+304]
	032 NotImplemented "Instruction CMP not yet implemented."
	033 Move X12, [X8+200]
	034 Add X11, X12, X11
	035 NotImplemented "Instruction LDUR not yet implemented."
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X10, 0x616000
	038 Move X10, [X10+1984]
	039 Move X10, [X10]
	040 Move W11, [X10+304]
	041 NotImplemented "Instruction CMP not yet implemented."
	042 Move X8, [X8+200]
	043 Add X8, X8, X11
	044 NotImplemented "Instruction LDUR not yet implemented."
	045 NotImplemented "Instruction CMP not yet implemented."
	046 Move W0, 1
	047 Move W8, [X19+767]
	048 Compare W8, 0
	049 JumpIfEqual {46}
	050 Move W0, W31
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return X0

Method: System.Boolean ShouldMatchAttachRotation(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)

Disassembly:
	0x03B451A4 BL 0x1C16CF4
	0x03B451A8 ADRP X0, 0x615000
	0x03B451AC LDR X0, [X0 + 0x7F0]
	0x03B451B0 BL 0x1C16CF4
	0x03B451B4 ADRP X0, 0x5DA000
	0x03B451B8 LDR X0, [X0 + 0xC48]
	0x03B451BC BL 0x1C16CF4
	0x03B451C0 ADRP X0, 0x615000
	0x03B451C4 LDR X0, [X0 + 0x7E8]
	0x03B451C8 BL 0x1C16CF4
	0x03B451CC ADRP X0, 0x5AE000
	0x03B451D0 LDR X0, [X0 + 0x638]
	0x03B451D4 BL 0x1C16CF4
	0x03B451D8 ADRP X0, 0x615000
	0x03B451DC LDR X0, [X0 + 0x800]
	0x03B451E0 BL 0x1C16CF4
	0x03B451E4 ADRP X0, 0x615000
	0x03B451E8 LDR X0, [X0 + 0x7F8]
	0x03B451EC BL 0x1C16CF4
	0x03B451F0 ADRP X0, 0x5B0000
	0x03B451F4 LDR X0, [X0 + 0x9B0]
	0x03B451F8 BL 0x1C16CF4
	0x03B451FC ADRP X0, 0x615000
	0x03B45200 LDR X0, [X0 + 0x438]
	0x03B45204 BL 0x1C16CF4
	0x03B45208 MOVZ W8, 0x1
	0x03B4520C STRB W8, [X27 + 0x887]
	0x03B45210 ORR W8, W31, 0x1010101
	0x03B45214 FMOV V0.4S, 0x0
	0x03B45218 STR W8, [X20]
	0x03B4521C ADRP X8, 0xFFFFFFFFFCFA8000
	0x03B45220 STR V0, [X19 + 0x1F]
	0x03B45224 LDR V0, [X8 + 0xBF8]
	0x03B45228 MOVZ X9, 0x999A
	0x03B4522C MOVK X9, 0x3E190000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89E000
	006 Move W8, [X21+2172]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x616000
	014 Move X0, [X0+1992]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+2172], W8
	018 Move W8, [X20+482]
	019 Compare W8, 0
	020 JumpIfEqual {31}
	021 Compare X19, 0
	022 JumpIfEqual {30}
	023 Move X8, 0x616000
	024 Move X8, [X8+1992]
	025 Move X9, [X19]
	026 Move X8, [X8]
	027 Move W11, [X9+304]
	028 Move W10, [X8+304]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move W0, 1
	031 Move W0, W31
	032 Move X9, [X9+200]
	033 Add X9, X9, X10
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 NotImplemented "Instruction CSET not yet implemented."
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0

Method: System.Boolean ShouldSnapToColliderVolume(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor)

Disassembly:
	0x03B45230 MOVK X9, 0x2
	0x03B45234 MOVZ W27, 0x1

ISIL:
	001 Move W0, [X0+483]
	002 Return X0

Method: System.Void InitializeDynamicAttachPose(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor, UnityEngine.Transform dynamicAttachTransform)

Disassembly:
	0x03B45238 STR X9, [X19 + 0x1E8]
	0x03B4523C MOVZ W8, 0x3E800000
	0x03B45240 STRB W27, [X19 + 0x200]
	0x03B45244 STUR D0, [X20 + 0x23]
	0x03B45248 STRB W27, [X19 + 0x20C]
	0x03B4524C STR D0, [X19 + 0x210]
	0x03B45250 STRB W27, [X19 + 0x218]
	0x03B45254 STUR D0, [X20 + 0x3B]
	0x03B45258 FMOV S0, 1
	0x03B4525C FMOV S1, 1
	0x03B45260 FMOV S2, 1
	0x03B45264 FMOV S3, W31
	0x03B45268 MOV X0, X31
	0x03B4526C STRB W27, [X19 + 0x224]
	0x03B45270 STR W8, [X19 + 0x228]
	0x03B45274 BL 0x3C01298
	0x03B45278 ADRP X8, 0xFFFFFFFFFCFA8000
	0x03B4527C LDR V0, [X8 + 0x3C0]
	0x03B45280 STR X0, [X19 + 0x230]
	0x03B45284 STRB W27, [X19 + 0x241]
	0x03B45288 STR D0, [X19 + 0x238]
	0x03B4528C LDR X0, [X26]
	0x03B45290 BL 0x1C16F10
	0x03B45294 LDR X1, [X25]
	0x03B45298 MOV X20, X0
	0x03B4529C BL 0x301B7C4
	0x03B452A0 STR X20, [X19 + 0x248]
	0x03B452A4 LDR X0, [X26]
	0x03B452A8 BL 0x1C16F10
	0x03B452AC LDR X1, [X25]
	0x03B452B0 MOV X20, X0
	0x03B452B4 BL 0x301B7C4
	0x03B452B8 STR X20, [X19 + 0x250]
	0x03B452BC STRB W27, [X19 + 0x258]
	0x03B452C0 LDR X0, [X24]
	0x03B452C4 BL 0x1C16F10
	0x03B452C8 LDR X1, [X23]
	0x03B452CC MOV X20, X0
	0x03B452D0 BL 0x25E9604
	0x03B452D4 STR X20, [X19 + 0x260]
	0x03B452D8 LDR X0, [X24]
	0x03B452DC BL 0x1C16F10
	0x03B452E0 LDR X1, [X23]
	0x03B452E4 MOV X20, X0
	0x03B452E8 BL 0x25E9604
	0x03B452EC STR X20, [X19 + 0x268]
	0x03B452F0 LDR X0, [X22]
	0x03B452F4 MOVZ W1, 0x14
	0x03B452F8 BL 0x1C16D6C
	0x03B452FC STR X0, [X19 + 0x2E0]
	0x03B45300 LDR X0, [X21]
	0x03B45304 MOVZ W1, 0x14
	0x03B45308 BL 0x1C16D6C
	0x03B4530C STR X0, [X19 + 0x2E8]
	0x03B45310 LDR X0, [X21]
	0x03B45314 MOVZ W1, 0x14
	0x03B45318 BL 0x1C16D6C
	0x03B4531C STR X0, [X19 + 0x2F0]
	0x03B45320 LDR X0, [X29]
	0x03B45324 BL 0x1C16F10
	0x03B45328 LDR X1, [X28]
	0x03B4532C MOV X20, X0
	0x03B45330 BL 0x2DBDE08
	0x03B45334 STR X20, [X19 + 0x340]
	0x03B45338 ADRP X8, 0x5DA000
	0x03B4533C LDR X8, [X8 + 0xC48]
	0x03B45340 LDR X0, [X8]
	0x03B45344 BL 0x1C16F10
	0x03B45348 ADRP X8, 0x5DA000
	0x03B4534C LDR X8, [X8 + 0xC50]
	0x03B45350 MOV X20, X0
	0x03B45354 LDR X1, [X8]
	0x03B45358 BL 0x301B7C4
	0x03B4535C STR X20, [X19 + 0x348]
	0x03B45360 ADRP X8, 0x615000
	0x03B45364 LDR X8, [X8 + 0x830]
	0x03B45368 LDR X0, [X8]
	0x03B4536C BL 0x1C16F10
	0x03B45370 ADRP X8, 0x615000
	0x03B45374 LDR X8, [X8 + 0x828]
	0x03B45378 MOV X20, X0
	0x03B4537C LDR X1, [X8]
	0x03B45380 BL 0x2DBDE08
	0x03B45384 STR X20, [X19 + 0x350]
	0x03B45388 ADRP X8, 0x615000
	0x03B4538C LDR X8, [X8 + 0x820]
	0x03B45390 LDR X0, [X8]
	0x03B45394 BL 0x1C16F10
	0x03B45398 ADRP X8, 0x615000
	0x03B4539C LDR X8, [X8 + 0x818]
	0x03B453A0 MOV X20, X0
	0x03B453A4 LDR X1, [X8]
	0x03B453A8 BL 0x2AA4804
	0x03B453AC STR X20, [X19 + 0x368]
	0x03B453B0 ADRP X8, 0x615000
	0x03B453B4 LDR X8, [X8 + 0x438]
	0x03B453B8 LDR X0, [X8]
	0x03B453BC LDR W8, [X0 + 0xE0]
	0x03B453C0 CBNZ W8, 0x3B453C8
	0x03B453C4 BL 0x1C16DFC
	0x03B453C8 MOV X0, X19
	0x03B453CC LDP X20, X19, [X31 + 0x50]
	0x03B453D0 LDP X22, X21, [X31 + 0x40]
	0x03B453D4 LDP X24, X23, [X31 + 0x30]
	0x03B453D8 LDP X26, X25, [X31 + 0x20]
	0x03B453DC LDP X28, X27, [X31 + 0x10]
	0x03B453E0 LDP X29, X30, [X31], #0x60
	0x03B453E4 B 0x3B3DB20
	0x03B453E8 STP X29, X30, [X31 - 0x60]!
	0x03B453EC STP X28, X27, [X31 + 0x10]
	0x03B453F0 STP X26, X25, [X31 + 0x20]
	0x03B453F4 STP X24, X23, [X31 + 0x30]
	0x03B453F8 STP X22, X21, [X31 + 0x40]
	0x03B453FC STP X20, X19, [X31 + 0x50]
	0x03B45400 ADRP X20, 0x89D000
	0x03B45404 ADRP X19, 0x615000
	0x03B45408 LDRB W8, [X20 + 0x888]
	0x03B4540C LDR X19, [X19 + 0x838]
	0x03B45410 TBNZ X8, 0x0, 0x3B454D0
	0x03B45414 ADRP X0, 0x5B2000
	0x03B45418 LDR X0, [X0 + 0x258]
	0x03B4541C BL 0x1C16CF4
	0x03B45420 ADRP X0, 0x615000
	0x03B45424 LDR X0, [X0 + 0x840]
	0x03B45428 BL 0x1C16CF4
	0x03B4542C ADRP X0, 0x615000
	0x03B45430 LDR X0, [X0 + 0x848]
	0x03B45434 BL 0x1C16CF4
	0x03B45438 ADRP X0, 0x615000
	0x03B4543C LDR X0, [X0 + 0x850]
	0x03B45440 BL 0x1C16CF4
	0x03B45444 ADRP X0, 0x615000
	0x03B45448 LDR X0, [X0 + 0x858]
	0x03B4544C BL 0x1C16CF4
	0x03B45450 ADRP X0, 0x615000

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D14
	003 Move [X31+40], D13
	004 Move [X31+48], D12
	005 Move [X31+56], D11
	006 Move [X31+64], D10
	007 Move [X31+72], D9
	008 Move [X31+80], D8
	009 Move [X31+88], X30
	010 Move [X31+96], X24
	011 Move [X31+104], X23
	012 Move [X31+112], X22
	013 Move [X31+120], X21
	014 Move [X31+128], X20
	015 Move [X31+136], X19
	016 Move X20, 0x89E000
	017 Move W8, [X20+2173]
	018 Move X19, X2
	019 Move X23, X1
	020 Move X22, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x616000
	026 Move X0, [X0+760]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2173], W8
	030 Move [X31+8], X31
	031 Move [X31+16], X31
	032 Move [X31+24], X31
	033 Move X8, [X22]
	034 Move X0, X22
	035 Move X1, X23
	036 Move X9, [X8+2168]
	037 Move X2, [X8+2176]
	038 NotImplemented "Instruction BLR not yet implemented."
	039 Move X8, [X22]
	040 Move W20, W0
	041 Move X0, X22
	042 Move X1, X23
	043 Move X9, [X8+2184]
	044 Move X2, [X8+2192]
	045 NotImplemented "Instruction BLR not yet implemented."
	046 Move W21, W0
	047 Move TEMP, X20
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {55}
	051 Move TEMP, X21
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfNotEqual {157}
	055 Compare X23, 0
	056 JumpIfEqual {173}
	057 Move X10, 0x616000
	058 Move X8, [X23]
	059 Move X10, [X10+760]
	060 NotImplemented "Instruction LDRH not yet implemented."
	061 Move X1, [X10]
	062 Compare X9, 0
	063 JumpIfEqual {70}
	064 Move X10, [X8+176]
	065 Add X10, X10, 8
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Subtract X9, X9, 1
	069 Add X10, X10, 16
	070 Move W2, 6
	071 Move X0, X23
	072 Call 0x1C5D788
	073 Move W9, [X10]
	074 Add W9, W9, 6
	075 Add X8, X8, W9
	076 Add X0, X8, 312
	077 Move X8, [X0]
	078 Move X2, [X0+8]
	079 Move X0, X23
	080 Move X1, X22
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Compare X0, 0
	083 JumpIfEqual {173}
	084 Move X1, X31
	085 Move X24, X0
	086 Call Transform.get_position, X0
	087 Move X0, X24
	088 Move X1, X31
	089 Move V10, V0
	090 Move V9, V1
	091 Move V8, V2
	092 Call Transform.get_rotation, X0
	093 Move V14, V0
	094 Move V13, V1
	095 Move V12, V2
	096 Move V11, V3
	097 Move TEMP, X20
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfNotEqual {125}
	101 Move X8, [X22]
	102 Move X0, X22
	103 Move X1, X23
	104 Move X9, [X8+2200]
	105 Move X2, [X8+2208]
	106 NotImplemented "Instruction BLR not yet implemented."
	107 Move TEMP, X0
	108 And TEMP, TEMP, 1
	109 Compare TEMP, 1
	110 JumpIfNotEqual {125}
	111 Add X1, X31, 8
	112 Move X0, X22
	113 Move V0, V10
	114 Move V1, V9
	115 Move V2, V8
	116 Move X2, X31
	117 Call XRInteractableUtility.TryGetClosestPointOnCollider, X0, X1, X2
	118 Move TEMP, X0
	119 And TEMP, TEMP, 1
	120 Compare TEMP, 1
	121 JumpIfNotEqual {125}
	122 Move S10, [X31+8]
	123 Move S9, [X31+12]
	124 Move V8, [X31+16]
	125 Compare X19, 0
	126 JumpIfEqual {173}
	127 Move X0, X19
	128 And W8, W20, W21
	129 Move TEMP, X8
	130 And TEMP, TEMP, 1
	131 Compare TEMP, 1
	132 JumpIfNotEqual {142}
	133 Move V0, V10
	134 Move V1, V9
	135 Move V2, V8
	136 Move V3, V14
	137 Move V4, V13
	138 Move V5, V12
	139 Move V6, V11
	140 Move X1, X31
	141 Call Transform.SetPositionAndRotation, X0, X1, X2
	142 Move TEMP, X20
	143 And TEMP, TEMP, 1
	144 Compare TEMP, 1
	145 JumpIfNotEqual {151}
	146 Move V0, V10
	147 Move V1, V9
	148 Move V2, V8
	149 Move X1, X31
	150 Call Transform.set_position, X0, X1
	151 Move V0, V14
	152 Move V1, V13
	153 Move V2, V12
	154 Move V3, V11
	155 Move X1, X31
	156 Call Transform.set_rotation, X0, X1
	157 Move X20, [X31+128]
	158 Move X19, [X31+136]
	159 Move X22, [X31+112]
	160 Move X21, [X31+120]
	161 Move X24, [X31+96]
	162 Move X23, [X31+104]
	163 Move X30, [X31+88]
	164 Move D9, [X31+72]
	165 Move D8, [X31+80]
	166 Move D11, [X31+56]
	167 Move D10, [X31+64]
	168 Move D13, [X31+40]
	169 Move D12, [X31+48]
	170 Move V14, [X31+32]
	171 Add X31, X31, 144
	172 Return 
	173 Call 0x1C17F20

Method: System.Void Grab()

Disassembly:
	0x03B45454 LDR X0, [X0 + 0x860]
	0x03B45458 BL 0x1C16CF4
	0x03B4545C ADRP X0, 0x615000
	0x03B45460 LDR X0, [X0 + 0x868]
	0x03B45464 BL 0x1C16CF4
	0x03B45468 ADRP X0, 0x615000
	0x03B4546C LDR X0, [X0 + 0x870]
	0x03B45470 BL 0x1C16CF4
	0x03B45474 ADRP X0, 0x615000
	0x03B45478 LDR X0, [X0 + 0x838]
	0x03B4547C BL 0x1C16CF4
	0x03B45480 ADRP X0, 0x615000
	0x03B45484 LDR X0, [X0 + 0x878]
	0x03B45488 BL 0x1C16CF4
	0x03B4548C ADRP X0, 0x615000
	0x03B45490 LDR X0, [X0 + 0x880]
	0x03B45494 BL 0x1C16CF4
	0x03B45498 ADRP X0, 0x615000
	0x03B4549C LDR X0, [X0 + 0x888]
	0x03B454A0 BL 0x1C16CF4
	0x03B454A4 ADRP X0, 0x615000
	0x03B454A8 LDR X0, [X0 + 0x890]
	0x03B454AC BL 0x1C16CF4
	0x03B454B0 ADRP X0, 0x615000
	0x03B454B4 LDR X0, [X0 + 0x6C0]
	0x03B454B8 BL 0x1C16CF4
	0x03B454BC ADRP X0, 0x615000
	0x03B454C0 LDR X0, [X0 + 0x898]
	0x03B454C4 BL 0x1C16CF4
	0x03B454C8 MOVZ W8, 0x1
	0x03B454CC STRB W8, [X20 + 0x888]
	0x03B454D0 ADRP X22, 0x615000
	0x03B454D4 ADRP X20, 0x615000
	0x03B454D8 ADRP X26, 0x615000
	0x03B454DC ADRP X23, 0x615000
	0x03B454E0 ADRP X24, 0x615000
	0x03B454E4 ADRP X25, 0x615000
	0x03B454E8 ADRP X29, 0x615000
	0x03B454EC LDR X22, [X22 + 0x840]
	0x03B454F0 LDR X20, [X20 + 0x870]
	0x03B454F4 LDR X26, [X26 + 0x860]
	0x03B454F8 LDR X23, [X23 + 0x850]
	0x03B454FC LDR X24, [X24 + 0x6C0]
	0x03B45500 LDR X25, [X25 + 0x848]
	0x03B45504 LDR X29, [X29 + 0x878]
	0x03B45508 LDR X0, [X19]
	0x03B4550C ADRP X27, 0x5B2000
	0x03B45510 ADRP X28, 0x615000
	0x03B45514 ADRP X21, 0x615000
	0x03B45518 LDR X27, [X27 + 0x258]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X1, X31
	006 Move X19, X0
	007 Call Component.get_transform, X0
	008 Compare X0, 0
	009 JumpIfEqual {57}
	010 Move X1, X31
	011 Move X20, X0
	012 Call Transform.get_parent, X0
	013 Move [X19+856], X0
	014 Move X0, X20
	015 Move X1, X31
	016 Move X2, X31
	017 Call Transform.SetParent, X0, X1
	018 Move X0, X19
	019 Call XRGrabInteractable.UpdateCurrentMovementType, X0
	020 Move X8, [X19]
	021 Move X1, [X19+800]
	022 Move X0, X19
	023 Move X9, [X8+2280]
	024 Move X2, [X8+2288]
	025 NotImplemented "Instruction BLR not yet implemented."
	026 Move X21, 0x894000
	027 Move W8, [X21+1923]
	028 Compare W8, 0
	029 JumpIfNotEqual {35}
	030 Move X0, 0x5AF000
	031 Move X0, [X0+1440]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X21+1923], W8
	035 Move X8, 0x5AF000
	036 Move X8, [X8+1440]
	037 Move X0, X19
	038 Move X1, X20
	039 Move X8, [X8]
	040 Move X9, [X8+184]
	041 Move V0, [X9]
	042 Move V1, [X9+8]
	043 Add X9, X19, 708
	044 Move [X9], D0
	045 Move [X9+8], S1
	046 Move X8, [X8+184]
	047 Move V0, [X8]
	048 Move V1, [X8+8]
	049 Move [X19+720], D0
	050 Move [X19+728], S1
	051 Move X20, [X31+16]
	052 Move X19, [X31+24]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call XRGrabInteractable.InitializeTargetPoseAndScale, X0, X1
	056 Return 
	057 Call 0x1C17F20

Method: System.Void Drop()

Disassembly:
	0x03B4551C LDR X28, [X28 + 0x888]
	0x03B45520 LDR X21, [X21 + 0x890]
	0x03B45524 LDR W8, [X0 + 0xE0]
	0x03B45528 CBNZ W8, 0x3B45534
	0x03B4552C BL 0x1C16DFC
	0x03B45530 LDR X0, [X19]
	0x03B45534 LDR X8, [X0 + 0xB8]
	0x03B45538 LDR X0, [X22]
	0x03B4553C LDR X19, [X8]
	0x03B45540 BL 0x1C16F10
	0x03B45544 LDR X2, [X20]
	0x03B45548 MOV X1, X19
	0x03B4554C MOV X3, X31
	0x03B45550 MOV X20, X0
	0x03B45554 BL 0x2D27AA8
	0x03B45558 LDR X0, [X26]
	0x03B4555C BL 0x1C16F10
	0x03B45560 LDR X7, [X23]
	0x03B45564 MOVZ W6, 0x2710
	0x03B45568 MOV X1, X20
	0x03B4556C MOV X2, X31
	0x03B45570 MOV X3, X31
	0x03B45574 MOV X4, X31
	0x03B45578 MOV W5, W31
	0x03B4557C MOV X19, X0
	0x03B45580 BL 0x2EF0EC8
	0x03B45584 LDR X8, [X24]
	0x03B45588 LDR X8, [X8 + 0xB8]
	0x03B4558C STR X19, [X8]
	0x03B45590 LDR X0, [X25]
	0x03B45594 BL 0x1C16F10
	0x03B45598 LDR X2, [X29]
	0x03B4559C MOV X1, X31
	0x03B455A0 MOV X3, X31
	0x03B455A4 MOV X19, X0
	0x03B455A8 BL 0x2D27AA8
	0x03B455AC LDR X0, [X27]
	0x03B455B0 BL 0x1C16F10
	0x03B455B4 LDR X2, [X28]
	0x03B455B8 MOV X1, X31
	0x03B455BC MOV X3, X31
	0x03B455C0 MOV X20, X0
	0x03B455C4 BL 0x2A6B948
	0x03B455C8 LDR X0, [X27]
	0x03B455CC BL 0x1C16F10
	0x03B455D0 LDR X2, [X21]
	0x03B455D4 MOV X1, X31
	0x03B455D8 MOV X3, X31
	0x03B455DC MOV X21, X0
	0x03B455E0 BL 0x2A6B948
	0x03B455E4 LDR X0, [X27]
	0x03B455E8 BL 0x1C16F10
	0x03B455EC ADRP X8, 0x615000
	0x03B455F0 LDR X8, [X8 + 0x880]
	0x03B455F4 MOV X1, X31
	0x03B455F8 MOV X3, X31
	0x03B455FC MOV X22, X0
	0x03B45600 LDR X2, [X8]
	0x03B45604 BL 0x2A6B948
	0x03B45608 ADRP X8, 0x615000
	0x03B4560C LDR X8, [X8 + 0x868]
	0x03B45610 LDR X0, [X8]
	0x03B45614 BL 0x1C16F10
	0x03B45618 ADRP X8, 0x615000
	0x03B4561C LDR X8, [X8 + 0x858]
	0x03B45620 MOVZ W5, 0x1
	0x03B45624 MOVZ W6, 0x2710
	0x03B45628 MOV X1, X19
	0x03B4562C LDR X7, [X8]
	0x03B45630 MOV X2, X20
	0x03B45634 MOV X3, X21
	0x03B45638 MOV X4, X22
	0x03B4563C MOV X23, X0
	0x03B45640 BL 0x2EF0EC8
	0x03B45644 LDR X8, [X24]
	0x03B45648 MOVZ W1, 0x1
	0x03B4564C MOV W2, W31
	0x03B45650 MOV W3, W31
	0x03B45654 LDR X8, [X8 + 0xB8]
	0x03B45658 MOV X4, X31
	0x03B4565C STR X23, [X8 + 0x8]
	0x03B45660 ADRP X8, 0x615000
	0x03B45664 LDR X8, [X8 + 0x898]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x89E000
	005 Move W8, [X20+2174]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {22}
	011 Move X0, 0x5AF000
	012 Move X0, [X0+2600]
	013 Call 0x1C17CF4
	014 Move X0, 0x5AF000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x616000
	018 Move X0, [X0+2000]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2174], W8
	022 Move W8, [X19+577]
	023 Compare W8, 0
	024 JumpIfEqual {89}
	025 Move X8, 0x5AF000
	026 Move X8, [X8+1432]
	027 Move X20, [X19+856]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {54}
	041 Move X0, [X19+856]
	042 Compare X0, 0
	043 JumpIfEqual {103}
	044 Move X1, X31
	045 Call Component.get_gameObject, X0
	046 Compare X0, 0
	047 JumpIfEqual {103}
	048 Move X1, X31
	049 Call GameObject.get_activeInHierarchy, X0
	050 Move TEMP, X0
	051 And TEMP, TEMP, 1
	052 Compare TEMP, 1
	053 JumpIfNotEqual {76}
	054 Move W8, [X19+577]
	055 Compare W8, 0
	056 JumpIfEqual {89}
	057 Move X0, X19
	058 Move X1, X31
	059 Call Component.get_gameObject, X0
	060 Compare X0, 0
	061 JumpIfEqual {103}
	062 Move X1, X31
	063 Call GameObject.get_activeInHierarchy, X0
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {89}
	068 Move X0, X19
	069 Move X1, X31
	070 Call Component.get_transform, X0
	071 Compare X0, 0
	072 JumpIfEqual {103}
	073 Move X1, [X19+856]
	074 Move X2, X31
	075 Call Transform.SetParent, X0, X1
	076 Move X8, 0x5AF000
	077 Move X8, [X8+2600]
	078 Move X0, [X8]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move X8, 0x616000
	084 Move X8, [X8+2000]
	085 Move X1, X19
	086 Move X2, X31
	087 Move X0, [X8]
	088 Call Debug.LogWarning, X0, X1
	089 Move X8, [X19]
	090 Move X1, [X19+800]
	091 Move X0, X19
	092 Move X9, [X8+2296]
	093 Move X2, [X8+2304]
	094 NotImplemented "Instruction BLR not yet implemented."
	095 Move W8, [X19+492]
	096 Move W9, 1
	097 Move [X19+704], W9
	098 Move X0, X19
	099 Move [X19+700], W8
	100 Move X20, [X31+16]
	101 Move X19, [X31+24]
	102 Move X30, [X31+32]
	103 Call 0x1C17F20

Method: System.Void Detach()

Disassembly:
	0x03B456E8 LDR V3, [X23 + 0x8]
	0x03B456EC MOV V9.16B, V0.16B
	0x03B456F0 MOV V10.16B, V1.16B
	0x03B456F4 LDP S0, S1, [X23]
	0x03B456F8 MOV V11.16B, V2.16B
	0x03B456FC MOV V2.16B, V3.16B
	0x03B45700 MOV X0, X31
	0x03B45704 BL 0x3887BE4
	0x03B45708 FSUB S0, S0, S9
	0x03B4570C FSUB S1, S1, S10
	0x03B45710 FSUB S2, S2, S11
	0x03B45714 FMUL S0, S13, S0
	0x03B45718 FMUL S1, S13, S1
	0x03B4571C FMUL S2, S13, S2
	0x03B45720 FADD S0, S9, S0
	0x03B45724 FADD S1, S10, S1
	0x03B45728 FADD S2, S11, S2
	0x03B4572C MOV X0, X31
	0x03B45730 BL 0x3887BE0
	0x03B45734 LDP S6, S4, [X22 + 0xC]
	0x03B45738 LDP S5, S3, [X22 + 0x14]
	0x03B4573C STP S0, S1, [X22]
	0x03B45740 STR S2, [X22 + 0x8]
	0x03B45744 MOV V0.16B, V6.16B
	0x03B45748 MOV V1.16B, V4.16B
	0x03B4574C MOV V2.16B, V5.16B
	0x03B45750 MOV X0, X31
	0x03B45754 BL 0x38BD218
	0x03B45758 MOV V11.16B, V2.16B
	0x03B4575C LDP S2, S4, [X23 + 0x14]
	0x03B45760 MOV V9.16B, V0.16B
	0x03B45764 MOV V10.16B, V1.16B
	0x03B45768 LDP S0, S1, [X23 + 0xC]
	0x03B4576C MOV V12.16B, V3.16B
	0x03B45770 MOV V3.16B, V4.16B
	0x03B45774 MOV X0, X31
	0x03B45778 BL 0x38BD218
	0x03B4577C MOV V4.16B, V0.16B
	0x03B45780 MOV V5.16B, V1.16B
	0x03B45784 MOV V6.16B, V2.16B
	0x03B45788 MOV V7.16B, V3.16B
	0x03B4578C MOV V0.16B, V9.16B
	0x03B45790 MOV V1.16B, V10.16B
	0x03B45794 MOV V2.16B, V11.16B
	0x03B45798 MOV V3.16B, V12.16B
	0x03B4579C MOV X0, X31
	0x03B457A0 STR S13, [X31]
	0x03B457A4 BL 0x3B47948
	0x03B457A8 MOV X0, X31
	0x03B457AC BL 0x38BD214
	0x03B457B0 STP S0, S1, [X22 + 0xC]
	0x03B457B4 STP S2, S3, [X22 + 0x14]
	0x03B457B8 LDP S0, S1, [X20]
	0x03B457BC LDR V2, [X20 + 0x8]
	0x03B457C0 MOV X0, X31
	0x03B457C4 BL 0x3887BE4
	0x03B457C8 LDR V3, [X21 + 0x8]
	0x03B457CC MOV V9.16B, V0.16B
	0x03B457D0 MOV V10.16B, V1.16B
	0x03B457D4 LDP S0, S1, [X21]
	0x03B457D8 MOV V11.16B, V2.16B
	0x03B457DC MOV V2.16B, V3.16B
	0x03B457E0 MOV X0, X31
	0x03B457E4 BL 0x3887BE4
	0x03B457E8 FSUB S0, S0, S9
	0x03B457EC FSUB S1, S1, S10
	0x03B457F0 FSUB S2, S2, S11
	0x03B457F4 FMUL S0, S13, S0
	0x03B457F8 FMUL S1, S13, S1
	0x03B457FC FMUL S2, S13, S2
	0x03B45800 FADD S0, S9, S0
	0x03B45804 FADD S1, S10, S1
	0x03B45808 FADD S2, S11, S2
	0x03B4580C MOV X0, X31
	0x03B45810 BL 0x3887BE0
	0x03B45814 STP S0, S1, [X20]
	0x03B45818 STR S2, [X20 + 0x8]
	0x03B4581C LDR V0, [X19]
	0x03B45820 LDP X22, X21, [X31 + 0x50]
	0x03B45824 LDP X30, X23, [X31 + 0x40]
	0x03B45828 LDP D11, D10, [X31 + 0x20]
	0x03B4582C FADD S0, S0, S8
	0x03B45830 STR S0, [X19]
	0x03B45834 LDP X20, X19, [X31 + 0x60]
	0x03B45838 LDP D9, D8, [X31 + 0x30]
	0x03B4583C LDP D13, D12, [X31 + 0x10]
	0x03B45840 ADD X31, X31, 0x70
	0x03B45844 RET
	0x03B45848 SUB X31, X31, 0x90
	0x03B4584C STP D15, D14, [X31 + 0x10]
	0x03B45850 STP D13, D12, [X31 + 0x20]
	0x03B45854 STP D11, D10, [X31 + 0x30]
	0x03B45858 STP D9, D8, [X31 + 0x40]
	0x03B4585C STR X30, [X31 + 0x50]
	0x03B45860 STP X24, X23, [X31 + 0x60]
	0x03B45864 STP X22, X21, [X31 + 0x70]
	0x03B45868 STP X20, X19, [X31 + 0x80]
	0x03B4586C MOV V15.16B, V5.16B
	0x03B45870 MOV W21, W6
	0x03B45874 MOV V8.16B, V4.16B
	0x03B45878 MOV V12.16B, V3.16B
	0x03B4587C MOV W24, W5
	0x03B45880 MOV X20, X3
	0x03B45884 MOV X23, X2
	0x03B45888 MOV X19, X1
	0x03B4588C MOV X22, X0
	0x03B45890 STP S6, S0, [X31 + 0x58]
	0x03B45894 TBZ X4, 0x0, 0x3B459AC
	0x03B45898 MOV V13.16B, V2.16B
	0x03B4589C MOV V14.16B, V1.16B
	0x03B458A0 MOV V9.16B, V0.16B
	0x03B458A4 LDP S0, S1, [X22]
	0x03B458A8 LDR V2, [X22 + 0x8]
	0x03B458AC MOV X0, X31
	0x03B458B0 BL 0x3887BE4
	0x03B458B4 LDR V3, [X23 + 0x8]
	0x03B458B8 MOV V10.16B, V12.16B
	0x03B458BC MOV V12.16B, V9.16B
	0x03B458C0 STR S8, [X31 + 0xC]
	0x03B458C4 MOV V8.16B, V15.16B

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], D8
	003 Move [X31+32], X30
	004 Move [X31+40], X21
	005 Move [X31+48], X20
	006 Move [X31+56], X19
	007 Move X20, 0x89E000
	008 Move W8, [X20+2175]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {28}
	014 Move X0, 0x5AF000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x616000
	018 Move X0, [X0+2008]
	019 Call 0x1C17CF4
	020 Move X0, 0x5AF000
	021 Move X0, [X0+1528]
	022 Call 0x1C17CF4
	023 Move X0, 0x616000
	024 Move X0, [X0+2016]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2175], W8
	028 Move [X31+8], W31
	029 Move [X31], X31
	030 Move W8, [X19+548]
	031 Compare W8, 0
	032 JumpIfEqual {135}
	033 Move X0, [X19+800]
	034 Compare X0, 0
	035 JumpIfEqual {142}
	036 Move X1, X31
	037 Call Rigidbody.get_isKinematic, X0
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {55}
	042 Move X8, 0x5AF000
	043 Move X8, [X8+2600]
	044 Move X0, [X8]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X8, 0x616000
	050 Move X8, [X8+2016]
	051 Move X1, X19
	052 Move X2, X31
	053 Move X0, [X8]
	054 Call Debug.LogWarning, X0, X1
	055 Move X20, [X19+792]
	056 Compare X20, 0
	057 JumpIfEqual {119}
	058 Move X0, [X19+800]
	059 Compare X0, 0
	060 JumpIfEqual {142}
	061 Move X1, X31
	062 Call Rigidbody.get_position, X0
	063 Move [X31], S0
	064 Move [X31+8], S1
	065 Move [X31+8], S2
	066 Move X0, [X19+800]
	067 Compare X0, 0
	068 JumpIfEqual {142}
	069 Move X1, X31
	070 Add X21, X19, 708
	071 Call Rigidbody.get_useGravity, X0
	072 Move S8, W31
	073 Move TEMP, X0
	074 And TEMP, TEMP, 1
	075 Compare TEMP, 1
	076 JumpIfNotEqual {87}
	077 Move X8, 0x5AF000
	078 Move X8, [X8+1528]
	079 Move X0, [X8]
	080 Move W8, [X0+224]
	081 Compare W8, 0
	082 JumpIfNotEqual {84}
	083 Call 0x1C17DFC
	084 Move X0, X31
	085 Call Physics.get_gravity
	086 NotImplemented "Instruction FNEG not yet implemented."
	087 Move X10, 0x616000
	088 Move X8, [X20]
	089 Move X10, [X10+2008]
	090 NotImplemented "Instruction LDRH not yet implemented."
	091 Move X1, [X10]
	092 Compare X9, 0
	093 JumpIfEqual {100}
	094 Move X10, [X8+176]
	095 Add X10, X10, 8
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Subtract X9, X9, 1
	099 Add X10, X10, 16
	100 Move X0, X20
	101 Move W2, W31
	102 Call 0x1C5D788
	103 NotImplemented "Instruction LDRSW not yet implemented."
	104 Add X8, X8, X9
	105 Add X0, X8, 312
	106 Move X8, [X0]
	107 Move X3, [X0+8]
	108 Add X1, X31, 0
	109 Move X0, X20
	110 Move X2, X21
	111 Move V0, V8
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Compare X19, 0
	114 JumpIfEqual {142}
	115 Move [X19+708], S0
	116 Move [X19+712], S1
	117 Move [X19+716], S2
	118 Move [X19+792], X31
	119 Move X0, [X19+800]
	120 Compare X0, 0
	121 JumpIfEqual {142}
	122 Move V2, [X19+716]
	123 Move V1, [X19+712]
	124 Move V0, [X19+708]
	125 Move X1, X31
	126 Call Rigidbody.set_velocity, X0, X1
	127 Move X0, [X19+800]
	128 Compare X0, 0
	129 JumpIfEqual {142}
	130 Move V2, [X19+728]
	131 Move V1, [X19+724]
	132 Move V0, [X19+720]
	133 Move X1, X31
	134 Call Rigidbody.set_angularVelocity, X0, X1
	135 Move X20, [X31+48]
	136 Move X19, [X31+56]
	137 Move X30, [X31+32]
	138 Move X21, [X31+40]
	139 Move V8, [X31+16]
	140 Add X31, X31, 64
	141 Return 
	142 Call 0x1C17F20

Method: System.Void SetupRigidbodyGrab(UnityEngine.Rigidbody rigidbody)

Disassembly:
	0x03B458C8 MOV V15.16B, V0.16B
	0x03B458CC MOV V9.16B, V1.16B
	0x03B458D0 LDP S0, S1, [X23]
	0x03B458D4 MOV V11.16B, V2.16B
	0x03B458D8 MOV V2.16B, V3.16B
	0x03B458DC MOV X0, X31
	0x03B458E0 BL 0x3887BE4
	0x03B458E4 FMUL S3, S12, S14
	0x03B458E8 FSUB S0, S0, S15
	0x03B458EC FMUL S0, S3, S0
	0x03B458F0 FSUB S1, S1, S9
	0x03B458F4 FSUB S2, S2, S11
	0x03B458F8 FADD S0, S15, S0
	0x03B458FC MOV V15.16B, V8.16B
	0x03B45900 LDR V8, [X31 + 0xC]
	0x03B45904 FMUL S1, S3, S1
	0x03B45908 FMUL S2, S3, S2
	0x03B4590C FADD S1, S9, S1
	0x03B45910 FADD S2, S11, S2
	0x03B45914 MOV X0, X31
	0x03B45918 MOV V12.16B, V10.16B
	0x03B4591C BL 0x3887BE0
	0x03B45920 MOV X0, X31
	0x03B45924 STP S0, S1, [X22]
	0x03B45928 STR S2, [X22 + 0x8]
	0x03B4592C BL 0x3887BE4
	0x03B45930 LDR V3, [X23 + 0x8]
	0x03B45934 MOV V9.16B, V0.16B
	0x03B45938 MOV V11.16B, V1.16B
	0x03B4593C LDP S0, S1, [X23]
	0x03B45940 MOV V14.16B, V2.16B
	0x03B45944 MOV V2.16B, V3.16B
	0x03B45948 MOV X0, X31
	0x03B4594C BL 0x3887BE4
	0x03B45950 FSUB S0, S0, S9
	0x03B45954 FSUB S1, S1, S11
	0x03B45958 FSUB S2, S2, S14
	0x03B4595C FMUL S0, S0, S13
	0x03B45960 FMUL S1, S1, S13
	0x03B45964 FMUL S2, S2, S13
	0x03B45968 FADD S0, S9, S0
	0x03B4596C FADD S1, S11, S1
	0x03B45970 FADD S2, S14, S2
	0x03B45974 MOV X0, X31
	0x03B45978 BL 0x3887BE0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {49}
	006 Move X19, X1
	007 Move X20, X0
	008 Move X0, X1
	009 Move X1, X31
	010 Call Rigidbody.get_isKinematic, X0
	011 And W8, W0, 1
	012 Move X0, X19
	013 Move X1, X31
	014 Move [X20+808], W8
	015 Call Rigidbody.get_useGravity, X0
	016 And W8, W0, 1
	017 Move X0, X19
	018 Move X1, X31
	019 Move [X20+809], W8
	020 Call Rigidbody.get_drag, X0
	021 Move X0, X19
	022 Move X1, X31
	023 Move [X20+812], S0
	024 Call Rigidbody.get_angularDrag, X0
	025 Move W8, [X20+700]
	026 Move X0, X19
	027 Move X2, X31
	028 Move [X20+816], S0
	029 Subtract W8, W8, 1
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSET not yet implemented."
	032 Call Rigidbody.set_isKinematic, X0, X1
	033 Move X0, X19
	034 Move W1, W31
	035 Move X2, X31
	036 Call Rigidbody.set_useGravity, X0, X1
	037 Move S0, W31
	038 Move X0, X19
	039 Move X1, X31
	040 Call Rigidbody.set_drag, X0, V0
	041 Move X0, X19
	042 Move X20, [X31+16]
	043 Move X19, [X31+24]
	044 Move S0, W31
	045 Move X1, X31
	046 Move X30, [X31+32]
	047 Call Rigidbody.set_angularDrag, X0, V0
	048 Return 
	049 Call 0x1C17F20

Method: System.Void SetupRigidbodyDrop(UnityEngine.Rigidbody rigidbody)

Disassembly:
	0x03B4597C STP S0, S1, [X22]
	0x03B45980 STR S2, [X22 + 0x8]
	0x03B45984 TBNZ X24, 0x0, 0x3B459C0
	0x03B45988 LDUR V0, [X23 + 0xC]
	0x03B4598C LDR V10, [X31 + 0x5C]
	0x03B45990 STUR V0, [X22 + 0xC]
	0x03B45994 TBNZ X21, 0x0, 0x3B45AA4
	0x03B45998 LDR W8, [X20 + 0x8]
	0x03B4599C LDR X9, [X20]
	0x03B459A0 STR W8, [X19 + 0x8]
	0x03B459A4 STR X9, [X19]
	0x03B459A8 B 0x3B45B6C
	0x03B459AC LDR W8, [X23 + 0x8]
	0x03B459B0 LDR X9, [X23]
	0x03B459B4 STR W8, [X22 + 0x8]
	0x03B459B8 STR X9, [X22]
	0x03B459BC TBZ X24, 0x0, 0x3B45988
	0x03B459C0 LDP S0, S1, [X22 + 0xC]
	0x03B459C4 LDP S2, S3, [X22 + 0x14]
	0x03B459C8 MOV X0, X31
	0x03B459CC BL 0x38BD218
	0x03B459D0 MOV V13.16B, V2.16B
	0x03B459D4 LDP S2, S4, [X23 + 0x14]
	0x03B459D8 MOV V9.16B, V0.16B
	0x03B459DC MOV V11.16B, V1.16B
	0x03B459E0 LDP S0, S1, [X23 + 0xC]
	0x03B459E4 MOV V14.16B, V3.16B
	0x03B459E8 MOV V3.16B, V4.16B
	0x03B459EC MOV X0, X31
	0x03B459F0 BL 0x38BD218
	0x03B459F4 LDR V10, [X31 + 0x5C]
	0x03B459F8 MOV V4.16B, V0.16B
	0x03B459FC MOV V5.16B, V1.16B
	0x03B45A00 MOV V6.16B, V2.16B
	0x03B45A04 FMUL S0, S10, S12
	0x03B45A08 MOV V7.16B, V3.16B
	0x03B45A0C STR S0, [X31]
	0x03B45A10 MOV V0.16B, V9.16B
	0x03B45A14 MOV V1.16B, V11.16B
	0x03B45A18 MOV V2.16B, V13.16B
	0x03B45A1C MOV V3.16B, V14.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Compare X1, 0
	005 JumpIfEqual {50}
	006 Move X20, X1
	007 Move W1, [X0+808]
	008 Move X19, X0
	009 Move X0, X20
	010 Move X2, X31
	011 Call Rigidbody.set_isKinematic, X0, X1
	012 Move W1, [X19+809]
	013 Move X0, X20
	014 Move X2, X31
	015 Call Rigidbody.set_useGravity, X0, X1
	016 Move V0, [X19+812]
	017 Move X0, X20
	018 Move X1, X31
	019 Call Rigidbody.set_drag, X0, V0
	020 Move V0, [X19+816]
	021 Move X0, X20
	022 Move X1, X31
	023 Call Rigidbody.set_angularDrag, X0, V0
	024 Move X0, X19
	025 Call XRBaseInteractable.get_isSelected, X0
	026 Move TEMP, X0
	027 And TEMP, TEMP, 1
	028 Compare TEMP, 1
	029 JumpIfNotEqual {34}
	030 Move X20, [X31+16]
	031 Move X19, [X31+24]
	032 Move X30, [X31+32]
	033 Return 
	034 Move X20, [X19+800]
	035 Compare X20, 0
	036 JumpIfEqual {50}
	037 Move X0, X20
	038 Move X1, X31
	039 Call Rigidbody.get_useGravity, X0
	040 Move W8, [X19+576]
	041 And W9, W0, 1
	042 Move X0, X20
	043 Move X20, [X31+16]
	044 Move X19, [X31+24]
	045 Or W1, W8, W9
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Call Rigidbody.set_useGravity, X0, X1
	049 Return 
	050 Call 0x1C17F20

Method: System.Void ResetThrowSmoothing()

Disassembly:
	0x03B44770 LDR W8, [X0 + 0xE0]
	0x03B44774 CBNZ W8, 0x3B4477C
	0x03B44778 BL 0x1C16DFC
	0x03B4477C ADRP X8, 0x616000
	0x03B44780 LDR X8, [X8 + 0x7E0]
	0x03B44784 MOV X1, X19
	0x03B44788 MOV X2, X31
	0x03B4478C LDR X0, [X8]
	0x03B44790 BL 0x3C06B0C
	0x03B44794 B 0x3B448B0
	0x03B44798 LDR X20, [X19 + 0x318]
	0x03B4479C CBZ X20, 0x3B44878
	0x03B447A0 LDR X0, [X19 + 0x320]
	0x03B447A4 CBZ X0, 0x3B448C4
	0x03B447A8 MOV X1, X31
	0x03B447AC BL 0x3C8EF74
	0x03B447B0 STP S0, S1, [X31]
	0x03B447B4 STR S2, [X31 + 0x8]
	0x03B447B8 LDR X0, [X19 + 0x320]
	0x03B447BC CBZ X0, 0x3B448C4
	0x03B447C0 MOV X1, X31
	0x03B447C4 ADD X21, X19, 0x2C4
	0x03B447C8 BL 0x3C8EC70
	0x03B447CC FMOV S8, W31
	0x03B447D0 TBZ X0, 0x0, 0x3B447F8
	0x03B447D4 ADRP X8, 0x5AF000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Move X0, [X0+736]
	005 Compare X0, 0
	006 JumpIfEqual {31}
	007 Move W2, [X0+24]
	008 Move W1, W31
	009 Move X3, X31
	010 Call Array.Clear, X0, X1, X2
	011 Move X0, [X19+744]
	012 Compare X0, 0
	013 JumpIfEqual {31}
	014 Move W2, [X0+24]
	015 Move W1, W31
	016 Move X3, X31
	017 Call Array.Clear, X0, X1, X2
	018 Move X0, [X19+752]
	019 Compare X0, 0
	020 JumpIfEqual {31}
	021 Move W2, [X0+24]
	022 Move W1, W31
	023 Move X3, X31
	024 Call Array.Clear, X0, X1, X2
	025 Move W8, 1
	026 Move [X19+732], W31
	027 Move [X19+760], W8
	028 Move X30, [X31+16]
	029 Move X19, [X31+24]
	030 Return 
	031 Call 0x1C17F20

Method: System.Void EndThrowSmoothing()

Disassembly:
	0x03B45668 LDR X0, [X8]
	0x03B4566C BL 0x3BFE7FC
	0x03B45670 LDR X8, [X24]
	0x03B45674 LDP X20, X19, [X31 + 0x50]
	0x03B45678 LDP X22, X21, [X31 + 0x40]
	0x03B4567C LDP X24, X23, [X31 + 0x30]
	0x03B45680 LDR X8, [X8 + 0xB8]
	0x03B45684 LDP X26, X25, [X31 + 0x20]
	0x03B45688 LDP X28, X27, [X31 + 0x10]
	0x03B4568C STR X0, [X8 + 0x10]
	0x03B45690 LDP X29, X30, [X31], #0x60
	0x03B45694 RET
	0x03B45698 SUB X31, X31, 0x70
	0x03B4569C STP D13, D12, [X31 + 0x10]
	0x03B456A0 STP D11, D10, [X31 + 0x20]
	0x03B456A4 STP D9, D8, [X31 + 0x30]
	0x03B456A8 STP X30, X23, [X31 + 0x40]
	0x03B456AC STP X22, X21, [X31 + 0x50]
	0x03B456B0 STP X20, X19, [X31 + 0x60]
	0x03B456B4 MOV V8.16B, V0.16B
	0x03B456B8 LDR V4, [X4]
	0x03B456BC LDP S0, S3, [X0]
	0x03B456C0 LDR V2, [X0 + 0x8]
	0x03B456C4 MOV X22, X0
	0x03B456C8 FDIV S13, S4, S1
	0x03B456CC MOV V1.16B, V3.16B
	0x03B456D0 MOV X0, X31
	0x03B456D4 MOV X19, X4
	0x03B456D8 MOV X21, X3
	0x03B456DC MOV X23, X2
	0x03B456E0 MOV X20, X1
	0x03B456E4 BL 0x3887BE4

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X19
	006 Move W8, [X0+548]
	007 Compare W8, 0
	008 JumpIfEqual {32}
	009 Move X1, [X0+744]
	010 Move X19, X0
	011 Call XRGrabInteractable.GetSmoothedVelocityValue, X0, X1
	012 Move X1, [X19+752]
	013 Move X0, X19
	014 Move V8, V0
	015 Move V9, V1
	016 Move [X31], D2
	017 Call XRGrabInteractable.GetSmoothedVelocityValue, X0, X1
	018 Move V3, [X19+568]
	019 Add X8, X19, 716
	020 Multiply S4, S8, V3.S[0]
	021 Move [X19+708], S4
	022 Move V4, [X31]
	023 Multiply S5, S9, V3.S[0]
	024 Move [X19+712], S5
	025 Move V4.S[1], V0.S[0]
	026 Move V4.S[2], V1.S[0]
	027 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	028 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	029 Move V4.S[3], V2.S[0]
	030 NotImplemented "Instruction INVALID not yet implemented."
	031 Move [X8], V0
	032 Move X30, [X31+32]
	033 Move X19, [X31+40]
	034 Move D9, [X31+16]
	035 Move D8, [X31+24]
	036 Add X31, X31, 48
	037 Return 

Method: System.Void StepThrowSmoothing(UnityEngine.Pose targetPose, System.Single deltaTime)

Disassembly:
	0x03B43A48 BL 0x3B3A784
	0x03B43A4C CBZ X0, 0x3B43C2C
	0x03B43A50 ADRP X8, 0x5B7000
	0x03B43A54 LDR X8, [X8 + 0xD48]
	0x03B43A58 MOVZ W9, 0x1
	0x03B43A5C LDR W2, [X0 + 0x18]
	0x03B43A60 STRB W9, [X19 + 0x278]
	0x03B43A64 LDR X3, [X8]
	0x03B43A68 ADD X0, X31, 0x8
	0x03B43A6C MOV W1, W21
	0x03B43A70 STR X31, [X31 + 0x8]
	0x03B43A74 BL 0x279FA30
	0x03B43A78 LDR X8, [X31 + 0x8]
	0x03B43A7C ADD X9, X19, 0x27C
	0x03B43A80 MOV X0, X19
	0x03B43A84 STR X8, [X9]
	0x03B43A88 STR W31, [X19 + 0x2B8]
	0x03B43A8C BL 0x3B3A784
	0x03B43A90 CBZ X0, 0x3B43C2C
	0x03B43A94 LDR W8, [X0 + 0x18]
	0x03B43A98 CBNZ W8, 0x3B43BC4
	0x03B43A9C LDRB W8, [X19 + 0x224]
	0x03B43AA0 CBZ W8, 0x3B43B38
	0x03B43AA4 CBZ X20, 0x3B43C2C
	0x03B43AA8 MOV X0, X20
	0x03B43AAC MOV X1, X31
	0x03B43AB0 BL 0x3B6B9E0
	0x03B43AB4 CBZ X0, 0x3B43C2C
	0x03B43AB8 ADRP X10, 0x617000
	0x03B43ABC LDR X8, [X0]
	0x03B43AC0 LDR X10, [X10 + 0x2F8]
	0x03B43AC4 MOV X21, X0
	0x03B43AC8 LDRH W9, [X8 + 0x12E]
	0x03B43ACC LDR X1, [X10]
	0x03B43AD0 CBZ X9, 0x3B43AF4
	0x03B43AD4 LDR X10, [X8 + 0xB0]
	0x03B43AD8 ADD X10, X10, 0x8
	0x03B43ADC LDUR X11, [X10 - 0x8]
	0x03B43AE0 CMP X11, X1
	0x03B43AE4 B.EQ 0x3B43B04
	0x03B43AE8 SUBS X9, X9, 0x1
	0x03B43AEC ADD X10, X10, 0x10
	0x03B43AF0 B.NE 0x3B43ADC
	0x03B43AF4 MOVZ W2, 0x5
	0x03B43AF8 MOV X0, X21
	0x03B43AFC BL 0x1C5C788
	0x03B43B00 B 0x3B43B14
	0x03B43B04 LDR W9, [X10]
	0x03B43B08 ADD W9, W9, 0x5
	0x03B43B0C ADD X8, X8, W9, 0x4, SXTW
	0x03B43B10 ADD X0, X8, 0x138
	0x03B43B14 LDP X8, X1, [X0]
	0x03B43B18 MOV X0, X21
	0x03B43B1C BLR X8
	0x03B43B20 CBZ X0, 0x3B43C2C
	0x03B43B24 ADRP X8, 0x617000
	0x03B43B28 LDR X8, [X8 + 0x790]
	0x03B43B2C LDR X1, [X8]
	0x03B43B30 BL 0x21A3F50
	0x03B43B34 STR X0, [X19 + 0x318]
	0x03B43B38 LDR X8, [X19]
	0x03B43B3C MOV X0, X19
	0x03B43B40 LDR X9, [X8 + 0x8C8]
	0x03B43B44 LDR X1, [X8 + 0x8D0]
	0x03B43B48 BLR X9
	0x03B43B4C LDR W8, [X19 + 0x288]
	0x03B43B50 CMP W8, 0x1
	0x03B43B54 B.LT 0x3B43BC4
	0x03B43B58 ADRP X21, 0x617000
	0x03B43B5C LDR X21, [X21 + 0x6C0]
	0x03B43B60 LDR X0, [X21]
	0x03B43B64 LDR W8, [X0 + 0xE0]
	0x03B43B68 CBNZ W8, 0x3B43B74
	0x03B43B6C BL 0x1C16DFC
	0x03B43B70 LDR X0, [X21]
	0x03B43B74 LDR X8, [X0 + 0xB8]
	0x03B43B78 LDR X0, [X8]
	0x03B43B7C CBZ X0, 0x3B43C2C
	0x03B43B80 ADRP X8, 0x617000
	0x03B43B84 LDR X8, [X8 + 0x7A0]
	0x03B43B88 ADD X1, X31, 0x28
	0x03B43B8C LDR X2, [X8]
	0x03B43B90 BL 0x2EF1058
	0x03B43B94 MOV X8, X1
	0x03B43B98 LDR X1, [X31 + 0x28]
	0x03B43B9C STP X0, X8, [X31 + 0x10]
	0x03B43BA0 CBZ X1, 0x3B43C30
	0x03B43BA4 STR X20, [X1 + 0x10]
	0x03B43BA8 MOV X0, X19
	0x03B43BAC BL 0x3B410A8
	0x03B43BB0 ADRP X8, 0x617000
	0x03B43BB4 LDR X8, [X8 + 0x7A8]
	0x03B43BB8 ADD X0, X31, 0x10
	0x03B43BBC LDR X1, [X8]
	0x03B43BC0 BL 0x24A6DD0
	0x03B43BC4 CBZ X20, 0x3B43C2C
	0x03B43BC8 LDR X21, [X19 + 0x340]
	0x03B43BCC MOV X0, X20
	0x03B43BD0 MOV X1, X31
	0x03B43BD4 BL 0x3B6B9E0
	0x03B43BD8 CBZ X21, 0x3B43C2C
	0x03B43BDC ADRP X8, 0x617000
	0x03B43BE0 LDR X8, [X8 + 0x798]
	0x03B43BE4 MOV X1, X0
	0x03B43BE8 MOV X0, X21
	0x03B43BEC LDR X2, [X8]
	0x03B43BF0 BL 0x2DBE67C
	0x03B43BF4 MOV X0, X20
	0x03B43BF8 MOV X1, X31
	0x03B43BFC BL 0x3B6B9E0
	0x03B43C00 LDR X8, [X19 + 0x360]
	0x03B43C04 CBZ X8, 0x3B43C2C
	0x03B43C08 MOV X1, X0
	0x03B43C0C MOV X0, X8
	0x03B43C10 MOV X2, X31
	0x03B43C14 BL 0x3B8F5E8
	0x03B43C18 LDP X20, X19, [X31 + 0x40]
	0x03B43C1C LDP X22, X21, [X31 + 0x30]
	0x03B43C20 LDR X30, [X31 + 0x20]
	0x03B43C24 ADD X31, X31, 0x50
	0x03B43C28 RET
	0x03B43C2C BL 0x1C16F20
	0x03B43C30 BL 0x1C16F20
	0x03B43C34 B 0x3B43C38
	0x03B43C38 MOV X22, X0
	0x03B43C3C CMP W1, 0x1
	0x03B43C40 B.NE 0x3B43C74
	0x03B43C44 MOV X0, X22
	0x03B43C48 BL 0x3EB1AD0
	0x03B43C4C LDR X21, [X0]
	0x03B43C50 BL 0x3EB1AE0
	0x03B43C54 ADRP X8, 0x617000
	0x03B43C58 LDR X8, [X8 + 0x7A8]
	0x03B43C5C ADD X0, X31, 0x10
	0x03B43C60 LDR X1, [X8]
	0x03B43C64 BL 0x24A6DD0
	0x03B43C68 CBZ X21, 0x3B43BC4
	0x03B43C6C MOV X0, X21
	0x03B43C70 BL 0x1C16F18
	0x03B43C74 MOV X21, X31
	0x03B43C78 B 0x3B43C80
	0x03B43C7C MOV X22, X0
	0x03B43C80 ADRP X8, 0x617000
	0x03B43C84 LDR X8, [X8 + 0x7A8]
	0x03B43C88 LDR X1, [X8]
	0x03B43C8C ADD X0, X31, 0x10
	0x03B43C90 BL 0x24A6DD0
	0x03B43C94 CBNZ X21, 0x3B43CA0
	0x03B43C98 MOV X0, X22
	0x03B43C9C BL 0x1D2C690
	0x03B43CA0 MOV X0, X21
	0x03B43CA4 BL 0x1C16F18
	0x03B43CA8 BL 0x1990590
	0x03B43CAC STR X30, [X31 - 0x10]!
	0x03B43CB0 LDR X0, [X0 + 0x360]
	0x03B43CB4 CBZ X0, 0x3B43CC4
	0x03B43CB8 MOV X2, X31
	0x03B43CBC LDR X30, [X31], #0x10
	0x03B43CC0 B 0x3B8F5E8
	0x03B43CC4 BL 0x1C16F20
	0x03B43CC8 STR X30, [X31 - 0x20]!
	0x03B43CCC STP X20, X19, [X31 + 0x10]
	0x03B43CD0 MOV X20, X1
	0x03B43CD4 MOV X19, X0
	0x03B43CD8 BL 0x3B3CB5C
	0x03B43CDC CBZ X20, 0x3B43D00
	0x03B43CE0 MOV X0, X20
	0x03B43CE4 MOV X1, X31
	0x03B43CE8 BL 0x3B6B9E0
	0x03B43CEC MOV X1, X0
	0x03B43CF0 MOV X0, X19
	0x03B43CF4 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+16], D12
	003 Move [X31+24], D11
	004 Move [X31+32], D10
	005 Move [X31+40], D9
	006 Move [X31+48], D8
	007 Move [X31+56], X30
	008 Move [X31+64], X22
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X8, -50692096
	013 Move V1, [X8+1040]
	014 NotImplemented "Instruction FCMP not yet implemented."
	015 Move W8, [X0+760]
	016 Move X19, X1
	017 Move X20, X0
	018 Compare W8, 0
	019 JumpIfEqual {21}
	020 Move [X20+760], W31
	021 Move X8, [X20+744]
	022 Compare X8, 0
	023 JumpIfEqual {184}
	024 NotImplemented "Instruction LDRSW not yet implemented."
	025 Move W10, [X8+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add X10, X20, 764
	028 Move V4, [X19]
	029 Move V1, [X19+8]
	030 Move V2, [X10]
	031 Move V3, [X10+8]
	032 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	033 Move W10, 12
	034 Subtract V2, V4, V2
	035 Subtract S1, S1, S3
	036 NotImplemented "Instruction MADD not yet implemented."
	037 NotImplemented "Instruction INVALID not yet implemented."
	038 NotImplemented "Instruction FDIV not yet implemented."
	039 Move [X8+32], D2
	040 Move [X8+40], S1
	041 Move [X31], V0
	042 Move V0, [X20+776]
	043 Move V1, [X20+780]
	044 Move V2, [X20+784]
	045 Move V3, [X20+788]
	046 Move S9, [X19+12]
	047 Move S10, [X19+16]
	048 Move S11, [X19+20]
	049 Move S12, [X19+24]
	050 Move X0, X31
	051 Call Quaternion.Inverse, X0
	052 Multiply S4, S12, S0
	053 Multiply S5, S9, S3
	054 Multiply S7, S11, S1
	055 Multiply S16, S12, S1
	056 Multiply S17, S10, S3
	057 Multiply S18, S11, S0
	058 Multiply S20, S9, S1
	059 Multiply S21, S9, S0
	060 Multiply S22, S10, S0
	061 Multiply S0, S10, S1
	062 Multiply S1, S12, S2
	063 Multiply S23, S12, S3
	064 Multiply S3, S11, S3
	065 Multiply S6, S10, S2
	066 Multiply S19, S9, S2
	067 Multiply S24, S11, S2
	068 Add S2, S4, S5
	069 Add S4, S16, S17
	070 Add S1, S1, S3
	071 Subtract S3, S23, S21
	072 Add S2, S6, S2
	073 Add S4, S18, S4
	074 Add S5, S20, S1
	075 Subtract S3, S3, S0
	076 Subtract S0, S2, S7
	077 Subtract S1, S4, S19
	078 Subtract S2, S5, S22
	079 Subtract S3, S3, S24
	080 Move X0, X31
	081 Call Quaternion.Internal_ToEulerRad, X0
	082 Move X8, -50692096
	083 Move V3, [X8+1096]
	084 Move X0, X31
	085 Multiply S0, S0, S3
	086 Multiply S1, S1, S3
	087 Multiply S2, S2, S3
	088 Call Quaternion.Internal_MakePositive, X0
	089 Move W12, 0x43B40000
	090 Move S3, W12
	091 Move W9, 0xC3B40000
	092 NotImplemented "Instruction FDIV not yet implemented."
	093 Move S5, W9
	094 NotImplemented "Instruction FRINTM not yet implemented."
	095 Multiply S4, S4, S5
	096 Add S2, S2, S4
	097 Move W8, 0x43340000
	098 Move S4, W31
	099 Move X10, [X20+752]
	100 NotImplemented "Instruction FMIN not yet implemented."
	101 NotImplemented "Instruction FCMP not yet implemented."
	102 Move S2, W8
	103 NotImplemented "Instruction FCSEL not yet implemented."
	104 Add S4, S3, S5
	105 NotImplemented "Instruction FCMP not yet implemented."
	106 NotImplemented "Instruction FCSEL not yet implemented."
	107 Compare X10, 0
	108 JumpIfEqual {184}
	109 NotImplemented "Instruction LDRSW not yet implemented."
	110 Move W13, [X10+24]
	111 NotImplemented "Instruction CMP not yet implemented."
	112 Move V3, [X31]
	113 Move V0.S[1], V1.S[0]
	114 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	115 Move X12, -50692096
	116 NotImplemented "Instruction FDIV not yet implemented."
	117 NotImplemented "Instruction INVALID not yet implemented."
	118 Move V4, [X12+260]
	119 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	120 NotImplemented "Instruction INVALID not yet implemented."
	121 Subtract V0, V0, V3
	122 NotImplemented "Instruction FMIN not yet implemented."
	123 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	124 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	125 Multiply S2, S2, S4
	126 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	127 NotImplemented "Instruction BIC not yet implemented."
	128 Move W8, 0xFA35
	129 NotImplemented "Instruction INVALID not yet implemented."
	130 Add V4, V0, V4
	131 NotImplemented "Instruction MOVK not yet implemented."
	132 NotImplemented "Instruction INVALID not yet implemented."
	133 Move W9, 12
	134 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	135 NotImplemented "Instruction INVALID not yet implemented."
	136 NotImplemented "Instruction MADD not yet implemented."
	137 NotImplemented "Instruction INVALID not yet implemented."
	138 Move [X8+32], D0
	139 Move [X8+40], S2
	140 Move X21, [X20+736]
	141 NotImplemented "Instruction LDRSW not yet implemented."
	142 Move X0, X31
	143 Call Time.get_time
	144 Compare X21, 0
	145 JumpIfEqual {184}
	146 Move W8, [X21+24]
	147 NotImplemented "Instruction CMP not yet implemented."
	148 Add X8, X21, X22
	149 Move [X8+32], S0
	150 Move W8, [X20+732]
	151 Move W9, 0x6667
	152 NotImplemented "Instruction MOVK not yet implemented."
	153 Add W8, W8, 1
	154 NotImplemented "Instruction SMADDL not yet implemented."
	155 Move X10, X9
	156 ShiftRight X10, 32
	157 And X10, X10, 0x7FFFFFFF
	158 Move X9, X9
	159 ShiftRight X9, 63
	160 And X9, X9, 0x7FFFFFFF
	161 Add W9, W9, W10
	162 Move W10, 20
	163 NotImplemented "Instruction MSUB not yet implemented."
	164 Move [X20+732], W8
	165 Move W8, [X19+24]
	166 Move X9, [X19+16]
	167 Move V0, [X19]
	168 Add X10, X20, 764
	169 Move [X10+24], W8
	170 Move [X10+16], X9
	171 Move [X10], V0
	172 Move X20, [X31+80]
	173 Move X19, [X31+88]
	174 Move X22, [X31+64]
	175 Move X21, [X31+72]
	176 Move X30, [X31+56]
	177 Move D9, [X31+40]
	178 Move D8, [X31+48]
	179 Move D11, [X31+24]
	180 Move D10, [X31+32]
	181 Move V12, [X31+16]
	182 Add X31, X31, 96
	183 Return 
	184 Call 0x1C17F20
	185 Call 0x1C17F28

Method: UnityEngine.Vector3 GetSmoothedVelocityValue(UnityEngine.Vector3[] velocityFrames)

Disassembly:
	0x03B45A20 MOV X0, X31
	0x03B45A24 BL 0x3B47948
	0x03B45A28 MOV X0, X31
	0x03B45A2C BL 0x38BD214
	0x03B45A30 MOV X0, X31
	0x03B45A34 STP S0, S1, [X22 + 0xC]
	0x03B45A38 STP S2, S3, [X22 + 0x14]
	0x03B45A3C BL 0x38BD218
	0x03B45A40 MOV V12.16B, V2.16B
	0x03B45A44 LDP S2, S4, [X23 + 0x14]
	0x03B45A48 MOV V9.16B, V0.16B
	0x03B45A4C MOV V11.16B, V1.16B
	0x03B45A50 LDP S0, S1, [X23 + 0xC]
	0x03B45A54 MOV V13.16B, V3.16B
	0x03B45A58 MOV V3.16B, V4.16B
	0x03B45A5C MOV X0, X31
	0x03B45A60 BL 0x38BD218
	0x03B45A64 MOV V4.16B, V0.16B
	0x03B45A68 MOV V5.16B, V1.16B
	0x03B45A6C MOV V6.16B, V2.16B
	0x03B45A70 MOV V7.16B, V3.16B
	0x03B45A74 MOV V0.16B, V9.16B
	0x03B45A78 MOV V1.16B, V11.16B
	0x03B45A7C MOV V2.16B, V12.16B
	0x03B45A80 MOV V3.16B, V13.16B
	0x03B45A84 MOV X0, X31
	0x03B45A88 STR S8, [X31]
	0x03B45A8C BL 0x3B47948
	0x03B45A90 MOV X0, X31
	0x03B45A94 BL 0x38BD214
	0x03B45A98 STP S0, S1, [X22 + 0xC]
	0x03B45A9C STP S2, S3, [X22 + 0x14]
	0x03B45AA0 TBZ X21, 0x0, 0x3B45998
	0x03B45AA4 LDP S0, S1, [X19]
	0x03B45AA8 LDR V2, [X19 + 0x8]
	0x03B45AAC MOV X0, X31
	0x03B45AB0 BL 0x3887BE4
	0x03B45AB4 LDR V3, [X20 + 0x8]
	0x03B45AB8 MOV V9.16B, V0.16B
	0x03B45ABC MOV V11.16B, V1.16B
	0x03B45AC0 LDP S0, S1, [X20]
	0x03B45AC4 MOV V12.16B, V2.16B
	0x03B45AC8 MOV V2.16B, V3.16B
	0x03B45ACC MOV X0, X31
	0x03B45AD0 BL 0x3887BE4
	0x03B45AD4 FMUL S3, S10, S15
	0x03B45AD8 FSUB S0, S0, S9
	0x03B45ADC FSUB S1, S1, S11
	0x03B45AE0 FSUB S2, S2, S12
	0x03B45AE4 FMUL S0, S3, S0
	0x03B45AE8 FMUL S1, S3, S1
	0x03B45AEC FMUL S2, S3, S2
	0x03B45AF0 FADD S0, S9, S0
	0x03B45AF4 FADD S1, S11, S1
	0x03B45AF8 FADD S2, S12, S2
	0x03B45AFC MOV X0, X31
	0x03B45B00 BL 0x3887BE0
	0x03B45B04 MOV X0, X31
	0x03B45B08 STP S0, S1, [X19]
	0x03B45B0C STR S2, [X19 + 0x8]
	0x03B45B10 BL 0x3887BE4
	0x03B45B14 LDR V3, [X20 + 0x8]
	0x03B45B18 MOV V9.16B, V0.16B
	0x03B45B1C MOV V10.16B, V1.16B
	0x03B45B20 LDP S0, S1, [X20]
	0x03B45B24 MOV V11.16B, V2.16B
	0x03B45B28 MOV V2.16B, V3.16B
	0x03B45B2C MOV X0, X31
	0x03B45B30 BL 0x3887BE4
	0x03B45B34 LDR V3, [X31 + 0x58]
	0x03B45B38 FSUB S0, S0, S9
	0x03B45B3C FSUB S1, S1, S10
	0x03B45B40 FSUB S2, S2, S11
	0x03B45B44 FMUL S0, S0, S3
	0x03B45B48 FMUL S1, S1, S3
	0x03B45B4C FMUL S2, S2, S3
	0x03B45B50 FADD S0, S9, S0
	0x03B45B54 FADD S1, S10, S1
	0x03B45B58 FADD S2, S11, S2
	0x03B45B5C MOV X0, X31
	0x03B45B60 BL 0x3887BE0
	0x03B45B64 STP S0, S1, [X19]
	0x03B45B68 STR S2, [X19 + 0x8]
	0x03B45B6C LDP X20, X19, [X31 + 0x80]
	0x03B45B70 LDP X22, X21, [X31 + 0x70]
	0x03B45B74 LDP X24, X23, [X31 + 0x60]
	0x03B45B78 LDR X30, [X31 + 0x50]
	0x03B45B7C LDP D9, D8, [X31 + 0x40]
	0x03B45B80 LDP D11, D10, [X31 + 0x30]
	0x03B45B84 LDP D13, D12, [X31 + 0x20]
	0x03B45B88 LDP D15, D14, [X31 + 0x10]
	0x03B45B8C ADD X31, X31, 0x90
	0x03B45B90 RET
	0x03B45B94 STR X30, [X31 - 0x20]!
	0x03B45B98 STP X20, X19, [X31 + 0x10]
	0x03B45B9C ADRP X19, 0x89D000
	0x03B45BA0 ADRP X20, 0x615000
	0x03B45BA4 LDRB W8, [X19 + 0x889]
	0x03B45BA8 LDR X20, [X20 + 0x838]
	0x03B45BAC TBNZ X8, 0x0, 0x3B45BC4
	0x03B45BB0 ADRP X0, 0x615000
	0x03B45BB4 LDR X0, [X0 + 0x838]
	0x03B45BB8 BL 0x1C16CF4
	0x03B45BBC MOVZ W8, 0x1
	0x03B45BC0 STRB W8, [X19 + 0x889]
	0x03B45BC4 LDR X0, [X20]
	0x03B45BC8 BL 0x1C16F10
	0x03B45BCC MOV X1, X31
	0x03B45BD0 MOV X19, X0
	0x03B45BD4 BL 0x33BDD8C
	0x03B45BD8 LDR X8, [X20]
	0x03B45BDC LDR X8, [X8 + 0xB8]
	0x03B45BE0 STR X19, [X8]
	0x03B45BE4 LDP X20, X19, [X31 + 0x10]
	0x03B45BE8 LDR X30, [X31], #0x20
	0x03B45BEC RET
	0x03B45BF0 MOV X1, X31
	0x03B45BF4 B 0x33BDD8C
	0x03B45BF8 STR X30, [X31 - 0x20]!
	0x03B45BFC STP X20, X19, [X31 + 0x10]
	0x03B45C00 ADRP X19, 0x89D000
	0x03B45C04 ADRP X20, 0x615000
	0x03B45C08 LDRB W8, [X19 + 0x88A]
	0x03B45C0C LDR X20, [X20 + 0x8A0]
	0x03B45C10 TBNZ X8, 0x0, 0x3B45C28
	0x03B45C14 ADRP X0, 0x615000
	0x03B45C18 LDR X0, [X0 + 0x8A0]
	0x03B45C1C BL 0x1C16CF4
	0x03B45C20 MOVZ W8, 0x1
	0x03B45C24 STRB W8, [X19 + 0x88A]
	0x03B45C28 LDR X0, [X20]
	0x03B45C2C BL 0x1C16F10
	0x03B45C30 MOV X1, X31
	0x03B45C34 MOV X19, X0
	0x03B45C38 BL 0x3BA8F74
	0x03B45C3C MOV X0, X19
	0x03B45C40 LDP X20, X19, [X31 + 0x10]
	0x03B45C44 LDR X30, [X31], #0x20
	0x03B45C48 RET
	0x03B45C4C STP X30, X21, [X31 - 0x20]!
	0x03B45C50 STP X20, X19, [X31 + 0x10]
	0x03B45C54 LDR X8, [X2 + 0x8]

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+32], D13
	003 Move [X31+40], D12
	004 Move [X31+48], D11
	005 Move [X31+56], D10
	006 Move [X31+64], D9
	007 Move [X31+72], D8
	008 Move [X31+80], X30
	009 Move [X31+96], X28
	010 Move [X31+104], X27
	011 Move [X31+112], X26
	012 Move [X31+120], X25
	013 Move [X31+128], X24
	014 Move [X31+136], X23
	015 Move [X31+144], X22
	016 Move [X31+152], X21
	017 Move [X31+160], X20
	018 Move [X31+168], X19
	019 Move X21, 0x894000
	020 Move W8, [X21+1923]
	021 Move X19, X1
	022 Move X20, X0
	023 Compare W8, 0
	024 JumpIfNotEqual {30}
	025 Move X0, 0x5AF000
	026 Move X0, [X0+1440]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+1923], W8
	030 Move X22, 0x5AF000
	031 Move X22, [X22+1440]
	032 Move X8, [X20+736]
	033 Move W24, 0x6667
	034 Move S10, W31
	035 Move X9, [X22]
	036 Move TEMP, 0
	037 Not TEMP
	038 Move W23, TEMP
	039 NotImplemented "Instruction MOVK not yet implemented."
	040 Move W25, 20
	041 Move X9, [X9+184]
	042 Move S11, 1
	043 Move W26, 12
	044 Move S1, W31
	045 Move V9, [X9]
	046 Move V8, [X9+8]
	047 Compare X8, 0
	048 JumpIfEqual {163}
	049 Move W9, [X20+732]
	050 Move W12, [X8+24]
	051 Add W9, W23, W9
	052 NotImplemented "Instruction SMADDL not yet implemented."
	053 Move X11, X10
	054 ShiftRight X11, 63
	055 And X11, X11, 0x7FFFFFFF
	056 NotImplemented "Instruction SBFM not yet implemented."
	057 Add W10, W10, W11
	058 NotImplemented "Instruction MSUB not yet implemented."
	059 Add W9, W9, 20
	060 NotImplemented "Instruction SXTB not yet implemented."
	061 NotImplemented "Instruction SMADDL not yet implemented."
	062 Move X11, X10
	063 ShiftRight X11, 63
	064 And X11, X11, 0x7FFFFFFF
	065 Move X10, X10
	066 ShiftRight X10, 35
	067 And X10, X10, 0x7FFFFFFF
	068 Add W10, W10, W11
	069 NotImplemented "Instruction MSUB not yet implemented."
	070 And W28, W9, 255
	071 NotImplemented "Instruction CMP not yet implemented."
	072 Move W27, W28
	073 Add X8, X8, X27
	074 Move V0, [X8+32]
	075 NotImplemented "Instruction FCMP not yet implemented."
	076 Move X0, X31
	077 Move [X31+1], V1
	078 Call Time.get_time
	079 Move X8, [X20+736]
	080 Compare X8, 0
	081 JumpIfEqual {163}
	082 Move W9, [X8+24]
	083 NotImplemented "Instruction CMP not yet implemented."
	084 Move X0, [X20+560]
	085 Compare X0, 0
	086 JumpIfEqual {163}
	087 Add X8, X8, X27
	088 Move V1, [X8+32]
	089 Move V2, [X20+552]
	090 Move X1, X31
	091 Subtract S0, S0, S1
	092 NotImplemented "Instruction FDIV not yet implemented."
	093 Subtract S0, S11, S0
	094 NotImplemented "Instruction FMIN not yet implemented."
	095 NotImplemented "Instruction FCMP not yet implemented."
	096 NotImplemented "Instruction FCSEL not yet implemented."
	097 Call AnimationCurve.Evaluate, X0, V0
	098 Compare X19, 0
	099 JumpIfEqual {163}
	100 Move W8, [X19+24]
	101 Move [X31], V0
	102 NotImplemented "Instruction CMP not yet implemented."
	103 NotImplemented "Instruction MADD not yet implemented."
	104 Move V12, [X8+32]
	105 Move V13, [X8+40]
	106 Move X0, X31
	107 Call Time.get_time
	108 Move X8, [X20+736]
	109 Compare X8, 0
	110 JumpIfEqual {163}
	111 Move W9, [X8+24]
	112 NotImplemented "Instruction CMP not yet implemented."
	113 Move V5, [X31]
	114 Add X9, X8, X27
	115 Move V3, [X9+32]
	116 Move V4, [X20+552]
	117 NotImplemented "Instruction INVALID not yet implemented."
	118 Add V9, V9, V1
	119 Move V1, [X31+1]
	120 Multiply S2, S5, S13
	121 Subtract S0, S0, S3
	122 Add S8, S8, S2
	123 NotImplemented "Instruction FCMP not yet implemented."
	124 Add S1, S1, S5
	125 Add W31, W23, 20
	126 Subtract W23, W23, 1
	127 NotImplemented "Instruction FCMP not yet implemented."
	128 NotImplemented "Instruction UNIMPLEMENTED not yet implemented."
	129 NotImplemented "Instruction INVALID not yet implemented."
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 Move W8, [X21+1923]
	132 Compare W8, 0
	133 JumpIfNotEqual {139}
	134 Move X0, 0x5AF000
	135 Move X0, [X0+1440]
	136 Call 0x1C17CF4
	137 Move W8, 1
	138 Move [X21+1923], W8
	139 Move X8, [X22]
	140 Move X8, [X8+184]
	141 Move V0, [X8]
	142 Move V2, [X8+8]
	143 Move X20, [X31+160]
	144 Move X19, [X31+168]
	145 Move X22, [X31+144]
	146 Move X21, [X31+152]
	147 Move X24, [X31+128]
	148 Move X23, [X31+136]
	149 Move X26, [X31+112]
	150 Move X25, [X31+120]
	151 Move X28, [X31+96]
	152 Move X27, [X31+104]
	153 Move X30, [X31+80]
	154 Move D9, [X31+64]
	155 Move D8, [X31+72]
	156 Move D11, [X31+48]
	157 Move D10, [X31+56]
	158 Move D13, [X31+32]
	159 Move D12, [X31+40]
	160 Move S1, V0.S[1]
	161 Add X31, X31, 176
	162 Return X0
	163 Call 0x1C17F20
	164 Call 0x1C17F28

Method: System.Void SubscribeTeleportationProvider(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)

Disassembly:
	0x03B44978 BL 0x1C16F20
	0x03B4497C STR X30, [X31 - 0x20]!
	0x03B44980 STP X20, X19, [X31 + 0x10]
	0x03B44984 CBZ X1, 0x3B44A1C
	0x03B44988 MOV X20, X1
	0x03B4498C LDRB W1, [X0 + 0x328]
	0x03B44990 MOV X19, X0

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+864]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call TeleportationMonitor.AddInteractor, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void UnsubscribeTeleportationProvider(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)

Disassembly:
	0x03B44CAC B.EQ 0x3B44D0C
	0x03B44CB0 LDR X23, [X19 + 0x2E8]
	0x03B44CB4 CBZ X23, 0x3B44DD8
	0x03B44CB8 LDR W8, [X23 + 0x18]
	0x03B44CBC CMP X21, X8
	0x03B44CC0 B.CS 0x3B44DD4
	0x03B44CC4 ADD X22, X23, X20

ISIL:
	001 Move [X31-16], X30
	002 Move X0, [X0+864]
	003 Compare X0, 0
	004 JumpIfEqual {9}
	005 Move X2, X31
	006 Move X30, [X31+16]
	007 Call TeleportationMonitor.RemoveInteractor, X0, X1
	008 Return 
	009 Call 0x1C17F20

Method: System.Void OnTeleported(UnityEngine.Pose offset)

Disassembly:
	0x03B45C58 STP X1, X2, [X0 + 0x20]
	0x03B45C5C MOV X19, X0
	0x03B45C60 MOV X20, X1
	0x03B45C64 STR X8, [X0 + 0x10]
	0x03B45C68 LDRB W21, [X2 + 0x52]
	0x03B45C6C STR X0, [X0 + 0x40]
	0x03B45C70 MOV X0, X2
	0x03B45C74 BL 0x1C16D84
	0x03B45C78 TBZ X0, 0x0, 0x3B45C90
	0x03B45C7C CMP W21, 0x7
	0x03B45C80 B.NE 0x3B45CAC
	0x03B45C84 ADRP X8, 0xFFFFFFFFFE0B8000
	0x03B45C88 ADD X8, X8, 0x7A4
	0x03B45C8C B 0x3B45CA0
	0x03B45C90 CMP W21, 0x6
	0x03B45C94 B.NE 0x3B45CA8
	0x03B45C98 ADRP X8, 0xFFFFFFFFFE0B8000
	0x03B45C9C ADD X8, X8, 0x784
	0x03B45CA0 STR X8, [X19 + 0x18]
	0x03B45CA4 B 0x3B45CBC
	0x03B45CA8 CBZ X20, 0x3B45CD4
	0x03B45CAC LDR X8, [X19 + 0x10]
	0x03B45CB0 LDR X9, [X19 + 0x20]
	0x03B45CB4 STR X8, [X19 + 0x18]
	0x03B45CB8 STR X9, [X19 + 0x40]
	0x03B45CBC ADRP X8, 0xFFFFFFFFFE0B8000
	0x03B45CC0 ADD X8, X8, 0x6F4
	0x03B45CC4 STR X8, [X19 + 0x38]
	0x03B45CC8 LDP X20, X19, [X31 + 0x10]
	0x03B45CCC LDP X30, X21, [X31], #0x20
	0x03B45CD0 RET
	0x03B45CD4 ADRP X1, 0xFFFFFFFFFCFD6000
	0x03B45CD8 ADD X1, X1, 0xEE3
	0x03B45CDC MOV X0, X31
	0x03B45CE0 BL 0x1C16F3C
	0x03B45CE4 MOV X1, X31
	0x03B45CE8 BL 0x1C16DEC
	0x03B45CEC LDR X8, [X0 + 0x40]
	0x03B45CF0 LDR X7, [X0 + 0x18]
	0x03B45CF4 LDR X6, [X0 + 0x28]
	0x03B45CF8 MOV X0, X8
	0x03B45CFC BR X7
	0x03B45D00 SUB X31, X31, 0xB0
	0x03B45D04 STP X29, X30, [X31 + 0x50]
	0x03B45D08 STP X28, X27, [X31 + 0x60]
	0x03B45D0C STP X26, X25, [X31 + 0x70]
	0x03B45D10 STP X24, X23, [X31 + 0x80]
	0x03B45D14 STP X22, X21, [X31 + 0x90]
	0x03B45D18 STP X20, X19, [X31 + 0xA0]
	0x03B45D1C STR X7, [X31]
	0x03B45D20 STP S1, S0, [X31 + 0x48]
	0x03B45D24 ADRP X19, 0x89D000
	0x03B45D28 ADRP X29, 0x5D6000
	0x03B45D2C ADRP X28, 0x5AE000
	0x03B45D30 ADRP X27, 0x5AE000
	0x03B45D34 LDRB W8, [X19 + 0x88B]
	0x03B45D38 LDR X29, [X29 + 0x610]
	0x03B45D3C LDR X28, [X28 + 0x5A0]
	0x03B45D40 LDR X27, [X27 + 0xA90]
	0x03B45D44 MOV X20, X6
	0x03B45D48 MOV X22, X5
	0x03B45D4C MOV X23, X4
	0x03B45D50 MOV X24, X3
	0x03B45D54 MOV X25, X2
	0x03B45D58 MOV X26, X1
	0x03B45D5C MOV X21, X0
	0x03B45D60 TBNZ X8, 0x0, 0x3B45D90
	0x03B45D64 ADRP X0, 0x5D6000
	0x03B45D68 LDR X0, [X0 + 0x610]
	0x03B45D6C BL 0x1C16CF4
	0x03B45D70 ADRP X0, 0x5AE000
	0x03B45D74 LDR X0, [X0 + 0xA90]
	0x03B45D78 BL 0x1C16CF4
	0x03B45D7C ADRP X0, 0x5AE000
	0x03B45D80 LDR X0, [X0 + 0x5A0]
	0x03B45D84 BL 0x1C16CF4
	0x03B45D88 MOVZ W8, 0x1
	0x03B45D8C STRB W8, [X19 + 0x88B]
	0x03B45D90 LDR X0, [X29]
	0x03B45D94 MOVI V0.2D, 0x0
	0x03B45D98 MOV X1, X26
	0x03B45D9C STUR V0, [X31 + 0x38]
	0x03B45DA0 STUR V0, [X31 + 0x28]
	0x03B45DA4 BL 0x1C16E04
	0x03B45DA8 LDR X8, [X28]
	0x03B45DAC STR X0, [X31 + 0x8]
	0x03B45DB0 MOV X1, X25
	0x03B45DB4 MOV X0, X8
	0x03B45DB8 BL 0x1C16E04
	0x03B45DBC LDR X8, [X29]
	0x03B45DC0 STR X0, [X31 + 0x10]
	0x03B45DC4 MOV X1, X24
	0x03B45DC8 MOV X0, X8
	0x03B45DCC BL 0x1C16E04
	0x03B45DD0 LDR X8, [X28]
	0x03B45DD4 STR X0, [X31 + 0x18]
	0x03B45DD8 MOV X1, X23

ISIL:
	001 Move [X31-96], D13
	002 Move [X31-88], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move V12, [X1]
	014 Move S13, [X1+8]
	015 Move S8, [X1+12]
	016 Move S10, [X1+16]
	017 Move S9, [X1+20]
	018 Move V11, [X1+24]
	019 Move X19, X0
	020 Move X20, X31
	021 Move X21, X31
	022 Move X8, [X19+736]
	023 Compare X8, 0
	024 JumpIfEqual {110}
	025 Move W9, [X8+24]
	026 NotImplemented "Instruction CMP not yet implemented."
	027 Add X8, X8, X21
	028 Move V0, [X8+32]
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move X23, [X19+744]
	031 Compare X23, 0
	032 JumpIfEqual {110}
	033 Move W8, [X23+24]
	034 NotImplemented "Instruction CMP not yet implemented."
	035 Add X22, X23, X20
	036 Move S4, [X22+32]
	037 Move S5, [X22+36]
	038 Move V6, [X22+40]
	039 Move V0, V8
	040 Move V1, V10
	041 Move V2, V9
	042 Move V3, V11
	043 Move X0, X31
	044 Call Quaternion.op_Multiply, X0, X1
	045 Move W8, [X23+24]
	046 NotImplemented "Instruction CMP not yet implemented."
	047 Add X21, X21, 1
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Add X20, X20, 12
	050 Move [X22+32], S0
	051 Move [X22+40], S1
	052 Move [X22+40], S2
	053 Add X8, X19, 764
	054 Move V0, [X8]
	055 Move V1, [X8+8]
	056 Move V2, [X8+24]
	057 Move V3, [X8+16]
	058 Add V0, V12, V0
	059 Add S1, S13, S1
	060 Move [X8], D0
	061 Move [X8+8], S1
	062 Move V0, [X19+776]
	063 Move V1, [X19+784]
	064 Multiply S6, S11, S3
	065 Multiply S7, S10, S2
	066 Multiply S4, S8, S2
	067 Multiply S16, S9, S2
	068 Add S6, S6, S7
	069 Multiply S7, S11, S0
	070 Multiply S19, S9, S0
	071 Multiply S22, S11, S1
	072 Multiply S17, S8, S3
	073 Multiply S2, S11, S2
	074 Multiply S18, S10, S1
	075 Multiply S20, S10, S0
	076 Multiply S0, S8, S0
	077 Multiply S21, S8, S1
	078 Add S4, S7, S4
	079 Add S6, S19, S6
	080 Add S7, S22, S16
	081 Multiply S5, S9, S3
	082 Multiply S3, S10, S3
	083 Subtract S0, S2, S0
	084 Add S2, S18, S4
	085 Subtract S4, S6, S21
	086 Add S6, S17, S7
	087 Subtract S0, S0, S3
	088 Subtract S2, S2, S5
	089 Subtract S3, S6, S20
	090 Multiply S1, S9, S1
	091 Move [X19+776], S2
	092 Move [X8+16], S4
	093 Move [X19+784], S3
	094 Move X20, [X31+80]
	095 Move X19, [X31+88]
	096 Move X22, [X31+64]
	097 Move X21, [X31+72]
	098 Move X30, [X31+48]
	099 Move X23, [X31+56]
	100 Move D9, [X31+32]
	101 Move D8, [X31+40]
	102 Move D11, [X31+16]
	103 Move D10, [X31+24]
	104 Subtract S0, S0, S1
	105 Move [X8+24], S0
	106 Move D13, [X31+96]
	107 Move D12, [X31+104]
	108 Return 
	109 Call 0x1C17F28
	110 Call 0x1C17F20

Method: System.Void StartIgnoringCharacterCollision(UnityEngine.Collider characterCollider)

Disassembly:
	0x03B447D8 LDR X8, [X8 + 0x5F8]
	0x03B447DC LDR X0, [X8]
	0x03B447E0 LDR W8, [X0 + 0xE0]
	0x03B447E4 CBNZ W8, 0x3B447EC
	0x03B447E8 BL 0x1C16DFC
	0x03B447EC MOV X0, X31
	0x03B447F0 BL 0x3C8A660
	0x03B447F4 FNEG S8, S1
	0x03B447F8 ADRP X10, 0x616000
	0x03B447FC LDR X8, [X20]
	0x03B44800 LDR X10, [X10 + 0x7D8]
	0x03B44804 LDRH W9, [X8 + 0x12E]
	0x03B44808 LDR X1, [X10]
	0x03B4480C CBZ X9, 0x3B44830
	0x03B44810 LDR X10, [X8 + 0xB0]
	0x03B44814 ADD X10, X10, 0x8
	0x03B44818 LDUR X11, [X10 - 0x8]
	0x03B4481C CMP X11, X1
	0x03B44820 B.EQ 0x3B44840
	0x03B44824 SUBS X9, X9, 0x1
	0x03B44828 ADD X10, X10, 0x10
	0x03B4482C B.NE 0x3B44818
	0x03B44830 MOV X0, X20
	0x03B44834 MOV W2, W31
	0x03B44838 BL 0x1C5C788
	0x03B4483C B 0x3B4484C
	0x03B44840 LDRSW X9, [X10]
	0x03B44844 ADD X8, X8, X9, 0x4, LSL
	0x03B44848 ADD X0, X8, 0x138
	0x03B4484C LDP X8, X3, [X0]
	0x03B44850 ADD X1, X31, 0x0
	0x03B44854 MOV X0, X20
	0x03B44858 MOV X2, X21
	0x03B4485C MOV V0.16B, V8.16B
	0x03B44860 BLR X8
	0x03B44864 CBZ X19, 0x3B448C4
	0x03B44868 STR S0, [X19 + 0x2C4]
	0x03B4486C STR S1, [X19 + 0x2C8]
	0x03B44870 STR S2, [X19 + 0x2CC]
	0x03B44874 STR X31, [X19 + 0x318]
	0x03B44878 LDR X0, [X19 + 0x320]
	0x03B4487C CBZ X0, 0x3B448C4
	0x03B44880 LDR V2, [X19 + 0x2CC]
	0x03B44884 LDR V1, [X19 + 0x2C8]
	0x03B44888 LDR V0, [X19 + 0x2C4]
	0x03B4488C MOV X1, X31
	0x03B44890 BL 0x3C8E908
	0x03B44894 LDR X0, [X19 + 0x320]
	0x03B44898 CBZ X0, 0x3B448C4
	0x03B4489C LDR V2, [X19 + 0x2D8]
	0x03B448A0 LDR V1, [X19 + 0x2D4]
	0x03B448A4 LDR V0, [X19 + 0x2D0]
	0x03B448A8 MOV X1, X31
	0x03B448AC BL 0x3C8EA40
	0x03B448B0 LDP X20, X19, [X31 + 0x30]
	0x03B448B4 LDP X30, X21, [X31 + 0x20]
	0x03B448B8 LDR V8, [X31 + 0x10]
	0x03B448BC ADD X31, X31, 0x40
	0x03B448C0 RET
	0x03B448C4 BL 0x1C16F20
	0x03B448C8 STR X30, [X31 - 0x20]!
	0x03B448CC STP X20, X19, [X31 + 0x10]
	0x03B448D0 CBZ X1, 0x3B44978
	0x03B448D4 MOV X19, X1
	0x03B448D8 MOV X20, X0
	0x03B448DC MOV X0, X1
	0x03B448E0 MOV X1, X31
	0x03B448E4 BL 0x3C8ECF0
	0x03B448E8 AND W8, W0, 0x1
	0x03B448EC MOV X0, X19
	0x03B448F0 MOV X1, X31
	0x03B448F4 STRB W8, [X20 + 0x328]
	0x03B448F8 BL 0x3C8EC70
	0x03B448FC AND W8, W0, 0x1
	0x03B44900 MOV X0, X19
	0x03B44904 MOV X1, X31
	0x03B44908 STRB W8, [X20 + 0x329]
	0x03B4490C BL 0x3C8EAD8
	0x03B44910 MOV X0, X19
	0x03B44914 MOV X1, X31
	0x03B44918 STR S0, [X20 + 0x32C]
	0x03B4491C BL 0x3C8EB60
	0x03B44920 LDR W8, [X20 + 0x2BC]
	0x03B44924 MOV X0, X19
	0x03B44928 MOV X2, X31
	0x03B4492C STR S0, [X20 + 0x330]
	0x03B44930 SUB W8, W8, 0x1
	0x03B44934 CMP W8, 0x2
	0x03B44938 CSET W1, CC
	0x03B4493C BL 0x3C8ED2C
	0x03B44940 MOV X0, X19
	0x03B44944 MOV W1, W31
	0x03B44948 MOV X2, X31
	0x03B4494C BL 0x3C8ECAC
	0x03B44950 FMOV S0, W31
	0x03B44954 MOV X0, X19
	0x03B44958 MOV X1, X31
	0x03B4495C BL 0x3C8EB14
	0x03B44960 MOV X0, X19
	0x03B44964 LDP X20, X19, [X31 + 0x10]
	0x03B44968 FMOV S0, W31
	0x03B4496C MOV X1, X31
	0x03B44970 LDR X30, [X31], #0x20
	0x03B44974 B 0x3C8EB9C

ISIL:
	001 Move [X31-80], X30
	002 Move [X31+16], X26
	003 Move [X31+24], X25
	004 Move [X31+32], X24
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x89F000
	011 Move W8, [X21+2176]
	012 Move X19, X1
	013 Move X20, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {38}
	018 Move X0, 0x617000
	019 Move X0, [X0+1920]
	020 Call 0x1C17CF4
	021 Move X0, 0x617000
	022 Move X0, [X0+1928]
	023 Call 0x1C17CF4
	024 Move X0, 0x610000
	025 Move X0, [X0+2200]
	026 Call 0x1C17CF4
	027 Move X0, 0x610000
	028 Move X0, [X0+2208]
	029 Call 0x1C17CF4
	030 Move X0, 0x5B0000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move X0, 0x5B0000
	034 Move X0, [X0+1528]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+2176], W8
	038 Move X0, [X20+848]
	039 Move W8, 1
	040 Move [X20+820], W8
	041 Compare X0, 0
	042 JumpIfEqual {121}
	043 Move X8, 0x617000
	044 Move X8, [X8+1928]
	045 Move X1, [X8]
	046 Call HashSet`1<Object>.Clear, X0
	047 Move X0, [X20+840]
	048 Compare X0, 0
	049 JumpIfEqual {121}
	050 Move X23, 0x610000
	051 Move X24, 0x5B0000
	052 Move X25, 0x5B0000
	053 Move X26, 0x617000
	054 Move X23, [X23+2208]
	055 Move X24, [X24+1432]
	056 Move X25, [X25+1528]
	057 Move X26, [X26+1920]
	058 Move W21, W31
	059 Move W8, [X0+24]
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Move X2, [X23]
	062 Move W1, W21
	063 Call List`1<Object>.get_Item, X0, X1
	064 Move X8, [X24]
	065 Move X22, X0
	066 Move W9, [X8+224]
	067 Compare W9, 0
	068 JumpIfNotEqual {71}
	069 Move X0, X8
	070 Call 0x1C17DFC
	071 Move X0, X22
	072 Move X1, X31
	073 Move X2, X31
	074 Call Object.op_Equality, X0, X1
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {117}
	079 Compare X22, 0
	080 JumpIfEqual {121}
	081 Move X0, X22
	082 Move X1, X31
	083 Call Collider.get_isTrigger, X0
	084 Move TEMP, X0
	085 And TEMP, TEMP, 1
	086 Compare TEMP, 1
	087 JumpIfEqual {117}
	088 Move X0, [X25]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {93}
	092 Call 0x1C17DFC
	093 Move X0, X22
	094 Move X1, X19
	095 Move X2, X31
	096 Call Physics.GetIgnoreCollision, X0, X1
	097 Move TEMP, X0
	098 And TEMP, TEMP, 1
	099 Compare TEMP, 1
	100 JumpIfEqual {117}
	101 Move X0, [X20+848]
	102 Compare X0, 0
	103 JumpIfEqual {121}
	104 Move X2, [X26]
	105 Move X1, X22
	106 Call HashSet`1<Object>.Add, X0, X1
	107 Move X0, [X25]
	108 Move W8, [X0+224]
	109 Compare W8, 0
	110 JumpIfNotEqual {112}
	111 Call 0x1C17DFC
	112 Move W2, 1
	113 Move X0, X22
	114 Move X1, X19
	115 Move X3, X31
	116 Call Physics.IgnoreCollision, X0, X1, X2
	117 Move X0, [X20+840]
	118 Add W21, W21, 1
	119 Compare X0, 0
	120 JumpIfNotEqual {59}
	121 Call 0x1C17F20
	122 Move X20, [X31+64]
	123 Move X19, [X31+72]
	124 Move X22, [X31+48]
	125 Move X21, [X31+56]
	126 Move X24, [X31+32]
	127 Move X23, [X31+40]
	128 Move X26, [X31+16]
	129 Move X25, [X31+24]
	130 Move X30, [X31+80]
	131 Return 

Method: System.Boolean IsOutsideCharacterCollider(UnityEngine.Collider characterCollider)

Disassembly:
	0x03B40A3C BL 0x1C16CF4
	0x03B40A40 ADRP X0, 0x61A000
	0x03B40A44 LDR X0, [X0 + 0x6F8]
	0x03B40A48 BL 0x1C16CF4
	0x03B40A4C ADRP X0, 0x61A000
	0x03B40A50 LDR X0, [X0 + 0x700]
	0x03B40A54 BL 0x1C16CF4
	0x03B40A58 ADRP X0, 0x61A000
	0x03B40A5C LDR X0, [X0 + 0x168]
	0x03B40A60 BL 0x1C16CF4
	0x03B40A64 ADRP X0, 0x61A000
	0x03B40A68 LDR X0, [X0 + 0x708]
	0x03B40A6C BL 0x1C16CF4
	0x03B40A70 MOVZ W8, 0x1
	0x03B40A74 STRB W8, [X21 + 0x86A]
	0x03B40A78 LDR X1, [X22]
	0x03B40A7C MOV X0, X19
	0x03B40A80 BL 0x1C16E00
	0x03B40A84 CBZ X0, 0x3B40A94
	0x03B40A88 LDR W8, [X20 + 0x288]
	0x03B40A8C ADD W8, W8, 0x1
	0x03B40A90 STR W8, [X20 + 0x288]
	0x03B40A94 CBZ X19, 0x3B40C1C
	0x03B40A98 ADRP X21, 0x61A000
	0x03B40A9C LDR X8, [X19]
	0x03B40AA0 LDR X21, [X21 + 0x6F0]
	0x03B40AA4 LDRH W9, [X8 + 0x12E]
	0x03B40AA8 LDR X1, [X21]
	0x03B40AAC CBZ X9, 0x3B40AD0
	0x03B40AB0 LDR X10, [X8 + 0xB0]
	0x03B40AB4 ADD X10, X10, 0x8
	0x03B40AB8 LDUR X11, [X10 - 0x8]
	0x03B40ABC CMP X11, X1
	0x03B40AC0 B.EQ 0x3B40AE0
	0x03B40AC4 SUBS X9, X9, 0x1
	0x03B40AC8 ADD X10, X10, 0x10
	0x03B40ACC B.NE 0x3B40AB8
	0x03B40AD0 MOVZ W2, 0x1
	0x03B40AD4 MOV X0, X19
	0x03B40AD8 BL 0x1C5C788
	0x03B40ADC B 0x3B40AF0
	0x03B40AE0 LDR W9, [X10]
	0x03B40AE4 ADD W9, W9, 0x1
	0x03B40AE8 ADD X8, X8, W9, 0x4, SXTW
	0x03B40AEC ADD X0, X8, 0x138
	0x03B40AF0 LDP X8, X2, [X0]
	0x03B40AF4 MOV X0, X19
	0x03B40AF8 MOV X1, X20
	0x03B40AFC BLR X8
	0x03B40B00 MOV X0, X20
	0x03B40B04 BL 0x3B3A784
	0x03B40B08 CBZ X0, 0x3B40C1C
	0x03B40B0C LDR W8, [X0 + 0x18]
	0x03B40B10 CBZ W8, 0x3B40BE8
	0x03B40B14 LDR X8, [X19]
	0x03B40B18 LDR X1, [X21]
	0x03B40B1C LDRH W9, [X8 + 0x12E]
	0x03B40B20 CBZ X9, 0x3B40B44
	0x03B40B24 LDR X10, [X8 + 0xB0]
	0x03B40B28 ADD X10, X10, 0x8
	0x03B40B2C LDUR X11, [X10 - 0x8]
	0x03B40B30 CMP X11, X1
	0x03B40B34 B.EQ 0x3B40B54
	0x03B40B38 SUBS X9, X9, 0x1
	0x03B40B3C ADD X10, X10, 0x10
	0x03B40B40 B.NE 0x3B40B2C
	0x03B40B44 MOVZ W2, 0x2
	0x03B40B48 MOV X0, X19
	0x03B40B4C BL 0x1C5C788
	0x03B40B50 B 0x3B40B64
	0x03B40B54 LDR W9, [X10]
	0x03B40B58 ADD W9, W9, 0x2
	0x03B40B5C ADD X8, X8, W9, 0x4, SXTW
	0x03B40B60 ADD X0, X8, 0x138
	0x03B40B64 LDP X8, X2, [X0]
	0x03B40B68 MOV X0, X19
	0x03B40B6C MOV X1, X20
	0x03B40B70 BLR X8
	0x03B40B74 LDR X21, [X20 + 0x270]
	0x03B40B78 CBNZ X21, 0x3B40BA8
	0x03B40B7C ADRP X8, 0x61A000
	0x03B40B80 LDR X8, [X8 + 0x708]
	0x03B40B84 LDR X0, [X8]
	0x03B40B88 BL 0x1C16F10
	0x03B40B8C ADRP X8, 0x61A000
	0x03B40B90 LDR X8, [X8 + 0x700]
	0x03B40B94 MOV X21, X0
	0x03B40B98 LDR X1, [X8]
	0x03B40B9C BL 0x301B7C4
	0x03B40BA0 STR X21, [X20 + 0x270]
	0x03B40BA4 CBZ X21, 0x3B40C1C
	0x03B40BA8 ADRP X9, 0x61A000
	0x03B40BAC LDR X9, [X9 + 0x6F8]
	0x03B40BB0 LDR W10, [X21 + 0x1C]
	0x03B40BB4 LDR X8, [X21 + 0x10]
	0x03B40BB8 LDR X9, [X9]
	0x03B40BBC ADD W10, W10, 0x1
	0x03B40BC0 STR W10, [X21 + 0x1C]
	0x03B40BC4 CBZ X8, 0x3B40C1C
	0x03B40BC8 LDRSW X10, [X21 + 0x18]
	0x03B40BCC LDR W11, [X8 + 0x18]
	0x03B40BD0 CMP W10, W11
	0x03B40BD4 B.CS 0x3B40BF8
	0x03B40BD8 ADD W9, W10, 0x1
	0x03B40BDC ADD X8, X8, X10, 0x3, LSL
	0x03B40BE0 STR W9, [X21 + 0x18]
	0x03B40BE4 STR X19, [X8 + 0x20]
	0x03B40BE8 LDP X20, X19, [X31 + 0x20]
	0x03B40BEC LDP X22, X21, [X31 + 0x10]
	0x03B40BF0 LDR X30, [X31], #0x30
	0x03B40BF4 RET
	0x03B40BF8 LDR X8, [X9 + 0x20]
	0x03B40BFC MOV X0, X21
	0x03B40C00 MOV X1, X19
	0x03B40C04 LDP X20, X19, [X31 + 0x20]
	0x03B40C08 LDR X8, [X8 + 0xC0]
	0x03B40C0C LDP X22, X21, [X31 + 0x10]
	0x03B40C10 LDR X2, [X8 + 0x70]
	0x03B40C14 LDR X30, [X31], #0x30
	0x03B40C18 B 0x301BF90
	0x03B40C1C BL 0x1C16F20
	0x03B40C20 STR X30, [X31 - 0x30]!
	0x03B40C24 STP X22, X21, [X31 + 0x10]
	0x03B40C28 STP X20, X19, [X31 + 0x20]
	0x03B40C2C ADRP X21, 0x8A2000
	0x03B40C30 ADRP X22, 0x61A000
	0x03B40C34 LDRB W8, [X21 + 0x86B]
	0x03B40C38 LDR X22, [X22 + 0x6E8]
	0x03B40C3C MOV X19, X1
	0x03B40C40 MOV X20, X0
	0x03B40C44 TBNZ X8, 0x0, 0x3B40C74
	0x03B40C48 ADRP X0, 0x61A000
	0x03B40C4C LDR X0, [X0 + 0x6E8]
	0x03B40C50 BL 0x1C16CF4
	0x03B40C54 ADRP X0, 0x61A000
	0x03B40C58 LDR X0, [X0 + 0x6F0]
	0x03B40C5C BL 0x1C16CF4
	0x03B40C60 ADRP X0, 0x61A000
	0x03B40C64 LDR X0, [X0 + 0x710]
	0x03B40C68 BL 0x1C16CF4
	0x03B40C6C MOVZ W8, 0x1
	0x03B40C70 STRB W8, [X21 + 0x86B]
	0x03B40C74 LDR X1, [X22]
	0x03B40C78 MOV X0, X19
	0x03B40C7C BL 0x1C16E00
	0x03B40C80 CBZ X0, 0x3B40C90
	0x03B40C84 LDR W8, [X20 + 0x288]
	0x03B40C88 SUB W8, W8, 0x1
	0x03B40C8C STR W8, [X20 + 0x288]
	0x03B40C90 CBZ X19, 0x3B40D34
	0x03B40C94 ADRP X10, 0x61A000
	0x03B40C98 LDR X8, [X19]
	0x03B40C9C LDR X10, [X10 + 0x6F0]
	0x03B40CA0 LDRH W9, [X8 + 0x12E]
	0x03B40CA4 LDR X1, [X10]
	0x03B40CA8 CBZ X9, 0x3B40CCC
	0x03B40CAC LDR X10, [X8 + 0xB0]
	0x03B40CB0 ADD X10, X10, 0x8

ISIL:
	001 Subtract X31, X31, 176
	002 Move [X31+64], D15
	003 Move [X31+72], D14
	004 Move [X31+80], D13
	005 Move [X31+88], D12
	006 Move [X31+96], D11
	007 Move [X31+104], D10
	008 Move [X31+112], D9
	009 Move [X31+120], D8
	010 Move [X31+128], X30
	011 Move [X31+144], X22
	012 Move [X31+152], X21
	013 Move [X31+160], X20
	014 Move [X31+168], X19
	015 Move X21, 0x8A3000
	016 Move W8, [X21+2177]
	017 Move X20, X1
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {40}
	023 Move X0, 0x61B000
	024 Move X0, [X0+1632]
	025 Call 0x1C17CF4
	026 Move X0, 0x61B000
	027 Move X0, [X0+1640]
	028 Call 0x1C17CF4
	029 Move X0, 0x61B000
	030 Move X0, [X0+1648]
	031 Call 0x1C17CF4
	032 Move X0, 0x61B000
	033 Move X0, [X0+1656]
	034 Call 0x1C17CF4
	035 Move X0, 0x5B4000
	036 Move X0, [X0+1432]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+2177], W8
	040 Move [X31+32], X31
	041 Move [X31+40], X31
	042 Move [X31+48], X31
	043 Compare X20, 0
	044 JumpIfEqual {148}
	045 Add X8, X31, 8
	046 Move X0, X20
	047 Move X1, X31
	048 Call Collider.get_bounds, X0
	049 Move X0, [X19+848]
	050 Compare X0, 0
	051 JumpIfEqual {148}
	052 Move X8, 0x61B000
	053 Move X8, [X8+1656]
	054 Move X21, 0x61B000
	055 Move X22, 0x5B4000
	056 Move X20, 0x61B000
	057 Move X1, [X8]
	058 Move S10, [X31+8]
	059 Move S11, [X31+12]
	060 Move S13, [X31+16]
	061 Move S12, [X31+20]
	062 Move S14, [X31+24]
	063 Move S15, [X31+28]
	064 Move X21, [X21+1640]
	065 Move X22, [X22+1432]
	066 Move X20, [X20+1632]
	067 Add X8, X31, 8
	068 Call HashSet`1<Object>.GetEnumerator, X0
	069 NotImplemented "Instruction LDUR not yet implemented."
	070 Move X8, [X31+24]
	071 Add S8, S10, S12
	072 Add S9, S11, S14
	073 Subtract S10, S10, S12
	074 Subtract S11, S11, S14
	075 Subtract S12, S13, S15
	076 Add S13, S13, S15
	077 Move [X31+2], V0
	078 Move [X31+48], X8
	079 Move X1, [X21]
	080 Add X0, X31, 32
	081 Call Enumerator<Object>.MoveNext, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfNotEqual {125}
	086 Move X0, [X22]
	087 Move X19, [X31+48]
	088 Move W8, [X0+224]
	089 Compare W8, 0
	090 JumpIfNotEqual {92}
	091 Call 0x1C17DFC
	092 Move X0, X19
	093 Move X1, X31
	094 Move X2, X31
	095 Call Object.op_Equality, X0, X1
	096 Move TEMP, X0
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {79}
	100 Compare X19, 0
	101 JumpIfEqual {146}
	102 Add X8, X31, 8
	103 Move X0, X19
	104 Move X1, X31
	105 Call Collider.get_bounds, X0
	106 Move V0, [X31+8]
	107 Move V1, [X31+20]
	108 Subtract S2, S0, S1
	109 NotImplemented "Instruction FCMP not yet implemented."
	110 Move V2, [X31+12]
	111 Move V3, [X31+24]
	112 Add S4, S2, S3
	113 NotImplemented "Instruction FCMP not yet implemented."
	114 Add S0, S0, S1
	115 NotImplemented "Instruction FCMP not yet implemented."
	116 Subtract S0, S2, S3
	117 NotImplemented "Instruction FCMP not yet implemented."
	118 Move V0, [X31+16]
	119 Move V1, [X31+28]
	120 Subtract S2, S0, S1
	121 NotImplemented "Instruction FCMP not yet implemented."
	122 Add S0, S0, S1
	123 NotImplemented "Instruction FCMP not yet implemented."
	124 Move W19, 4
	125 Move W19, 5
	126 Move X1, [X20]
	127 Add X0, X31, 32
	128 Call Enumerator<Object>.Dispose, X0
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X20, [X31+160]
	131 Move X19, [X31+168]
	132 Move X22, [X31+144]
	133 Move X21, [X31+152]
	134 Move X30, [X31+128]
	135 Move D9, [X31+112]
	136 Move D8, [X31+120]
	137 Move D11, [X31+96]
	138 Move D10, [X31+104]
	139 Move D13, [X31+80]
	140 Move D12, [X31+88]
	141 Move D15, [X31+64]
	142 Move D14, [X31+72]
	143 NotImplemented "Instruction CSET not yet implemented."
	144 Add X31, X31, 176
	145 Return X0
	146 Move X21, X20
	147 Call 0x1C17F20
	148 Call 0x1C17F20
	149 Move X21, X20
	150 Move X19, X0
	151 NotImplemented "Instruction CMP not yet implemented."
	152 Move X0, X19
	153 Call 0x3EB2AD0
	154 Move X20, [X0]
	155 Call 0x3EB2AE0
	156 Move X1, [X21]
	157 Add X0, X31, 32
	158 Call Enumerator<Object>.Dispose, X0
	159 Compare X20, 0
	160 JumpIfNotEqual {163}
	161 Move W19, W31
	162 Move X20, X31
	163 Move X0, X20
	164 Call 0x1C17F18
	165 Move X19, X0
	166 Move X1, [X21]
	167 Add X0, X31, 32
	168 Call Enumerator<Object>.Dispose, X0
	169 Compare X20, 0
	170 JumpIfNotEqual {173}
	171 Move X0, X19
	172 Call 0x1D2D690
	173 Move X0, X20
	174 Call 0x1C17F18
	175 Call 0x1991590

Method: System.Void StopIgnoringCharacterCollision(UnityEngine.Collider characterCollider)

Disassembly:
	0x03B40F98 ADD X0, X31, 0x20
	0x03B40F9C BL 0x2BC434C
	0x03B40FA0 STRB W31, [X19 + 0x284]
	0x03B40FA4 LDP X20, X19, [X31 + 0x70]
	0x03B40FA8 LDP X22, X21, [X31 + 0x60]
	0x03B40FAC LDP X24, X23, [X31 + 0x50]
	0x03B40FB0 LDP X30, X25, [X31 + 0x40]
	0x03B40FB4 ADD X31, X31, 0x80
	0x03B40FB8 RET
	0x03B40FBC BL 0x1C16F20
	0x03B40FC0 BL 0x1C16F20
	0x03B40FC4 BL 0x1C16F20
	0x03B40FC8 BL 0x1C16F20
	0x03B40FCC BL 0x1C16F20
	0x03B40FD0 B 0x3B40FF0
	0x03B40FD4 B 0x3B41044
	0x03B40FD8 B 0x3B40FF0
	0x03B40FDC B 0x3B41044
	0x03B40FE0 B 0x3B40FF0
	0x03B40FE4 B 0x3B40FF0
	0x03B40FE8 B 0x3B41044
	0x03B40FEC B 0x3B41044
	0x03B40FF0 MOV X20, X0
	0x03B40FF4 CMP W1, 0x1
	0x03B40FF8 B.NE 0x3B41020
	0x03B40FFC MOV X0, X20
	0x03B41000 BL 0x3EB1AD0
	0x03B41004 LDR X21, [X0]
	0x03B41008 BL 0x3EB1AE0
	0x03B4100C LDR X1, [X22]
	0x03B41010 ADD X0, X31, 0x20
	0x03B41014 BL 0x2BC434C
	0x03B41018 CBZ X21, 0x3B40FA0
	0x03B4101C B 0x3B41070
	0x03B41020 MOV X21, X31
	0x03B41024 B 0x3B4102C
	0x03B41028 MOV X20, X0
	0x03B4102C LDR X1, [X22]
	0x03B41030 ADD X0, X31, 0x20
	0x03B41034 BL 0x2BC434C
	0x03B41038 CBZ X21, 0x3B41094
	0x03B4103C MOV X0, X21
	0x03B41040 BL 0x1C16F18
	0x03B41044 MOV X20, X0
	0x03B41048 CMP W1, 0x1
	0x03B4104C B.NE 0x3B41078
	0x03B41050 MOV X0, X20
	0x03B41054 BL 0x3EB1AD0
	0x03B41058 LDR X21, [X0]
	0x03B4105C BL 0x3EB1AE0
	0x03B41060 LDR X1, [X22]
	0x03B41064 ADD X0, X31, 0x20
	0x03B41068 BL 0x2BC434C
	0x03B4106C CBZ X21, 0x3B40EC4
	0x03B41070 MOV X0, X21
	0x03B41074 BL 0x1C16F18
	0x03B41078 MOV X21, X31
	0x03B4107C B 0x3B41084
	0x03B41080 MOV X20, X0
	0x03B41084 LDR X1, [X22]
	0x03B41088 ADD X0, X31, 0x20
	0x03B4108C BL 0x2BC434C
	0x03B41090 CBNZ X21, 0x3B4109C
	0x03B41094 MOV X0, X20
	0x03B41098 BL 0x1D2C690
	0x03B4109C MOV X0, X21
	0x03B410A0 BL 0x1C16F18
	0x03B410A4 BL 0x1990590
	0x03B410A8 SUB X31, X31, 0x90
	0x03B410AC STR X30, [X31 + 0x40]
	0x03B410B0 STP X26, X25, [X31 + 0x50]
	0x03B410B4 STP X24, X23, [X31 + 0x60]
	0x03B410B8 STP X22, X21, [X31 + 0x70]
	0x03B410BC STP X20, X19, [X31 + 0x80]
	0x03B410C0 ADRP X21, 0x8A1000
	0x03B410C4 LDRB W8, [X21 + 0x867]
	0x03B410C8 MOV X20, X1
	0x03B410CC MOV X19, X0
	0x03B410D0 TBNZ X8, 0x0, 0x3B41130
	0x03B410D4 ADRP X0, 0x619000
	0x03B410D8 LDR X0, [X0 + 0x718]
	0x03B410DC BL 0x1C16CF4
	0x03B410E0 ADRP X0, 0x619000
	0x03B410E4 LDR X0, [X0 + 0x720]
	0x03B410E8 BL 0x1C16CF4
	0x03B410EC ADRP X0, 0x619000
	0x03B410F0 LDR X0, [X0 + 0x728]
	0x03B410F4 BL 0x1C16CF4
	0x03B410F8 ADRP X0, 0x619000
	0x03B410FC LDR X0, [X0 + 0x730]
	0x03B41100 BL 0x1C16CF4
	0x03B41104 ADRP X0, 0x619000
	0x03B41108 LDR X0, [X0 + 0x6E8]
	0x03B4110C BL 0x1C16CF4
	0x03B41110 ADRP X0, 0x619000
	0x03B41114 LDR X0, [X0 + 0x738]
	0x03B41118 BL 0x1C16CF4
	0x03B4111C ADRP X0, 0x619000
	0x03B41120 LDR X0, [X0 + 0x740]
	0x03B41124 BL 0x1C16CF4
	0x03B41128 MOVZ W8, 0x1
	0x03B4112C STRB W8, [X21 + 0x867]
	0x03B41130 STP X31, X31, [X31 + 0x20]
	0x03B41134 STR X31, [X31 + 0x30]
	0x03B41138 LDR X8, [X19 + 0x260]
	0x03B4113C MOVZ W9, 0x1
	0x03B41140 STRB W9, [X19 + 0x284]
	0x03B41144 CBZ X8, 0x3B41368
	0x03B41148 LDR X0, [X8 + 0x10]
	0x03B4114C CBZ X0, 0x3B41368

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+32], X30
	003 Move [X31+48], X24
	004 Move [X31+56], X23
	005 Move [X31+64], X22
	006 Move [X31+72], X21
	007 Move [X31+80], X20
	008 Move [X31+88], X19
	009 Move X21, 0x8A3000
	010 Move W8, [X21+2178]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {37}
	017 Move X0, 0x61B000
	018 Move X0, [X0+1632]
	019 Call 0x1C17CF4
	020 Move X0, 0x61B000
	021 Move X0, [X0+1640]
	022 Call 0x1C17CF4
	023 Move X0, 0x61B000
	024 Move X0, [X0+1648]
	025 Call 0x1C17CF4
	026 Move X0, 0x61B000
	027 Move X0, [X0+1656]
	028 Call 0x1C17CF4
	029 Move X0, 0x5B4000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move X0, 0x5B4000
	033 Move X0, [X0+1528]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+2178], W8
	037 Move [X31+8], X31
	038 Move [X31+16], X31
	039 Move [X31+24], X31
	040 Move X0, [X20+848]
	041 Move [X20+820], W31
	042 Compare X0, 0
	043 JumpIfEqual {100}
	044 Move X8, 0x61A000
	045 Move X8, [X8+1656]
	046 Move X22, 0x61A000
	047 Move X22, [X22+1640]
	048 Move X23, 0x5B3000
	049 Move X1, [X8]
	050 Move X24, 0x5B3000
	051 Move X21, 0x61A000
	052 Move X23, [X23+1432]
	053 Move X24, [X24+1528]
	054 Move X21, [X21+1632]
	055 Add X8, X31, 8
	056 Call HashSet`1<Object>.GetEnumerator, X0
	057 Move X1, [X22]
	058 Add X0, X31, 8
	059 Call Enumerator<Object>.MoveNext, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {88}
	064 Move X0, [X23]
	065 Move X20, [X31+24]
	066 Move W8, [X0+224]
	067 Compare W8, 0
	068 JumpIfNotEqual {70}
	069 Call 0x1C17DFC
	070 Move X0, X20
	071 Move X1, X31
	072 Move X2, X31
	073 Call Object.op_Inequality, X0, X1
	074 Move TEMP, X0
	075 And TEMP, TEMP, 1
	076 Compare TEMP, 1
	077 JumpIfNotEqual {57}
	078 Move X0, [X24]
	079 Move W8, [X0+224]
	080 Compare W8, 0
	081 JumpIfNotEqual {83}
	082 Call 0x1C17DFC
	083 Move X0, X20
	084 Move X1, X19
	085 Move W2, W31
	086 Move X3, X31
	087 Call Physics.IgnoreCollision, X0, X1, X2
	088 Move X1, [X21]
	089 Add X0, X31, 8
	090 Call Enumerator<Object>.Dispose, X0
	091 Move X20, [X31+80]
	092 Move X19, [X31+88]
	093 Move X22, [X31+64]
	094 Move X21, [X31+72]
	095 Move X24, [X31+48]
	096 Move X23, [X31+56]
	097 Move X30, [X31+32]
	098 Add X31, X31, 96
	099 Return 
	100 Call 0x1C17F20
	101 Move X19, X0
	102 NotImplemented "Instruction CMP not yet implemented."
	103 Move X0, X19
	104 Call 0x3EB2AD0
	105 Move X20, [X0]
	106 Call 0x3EB2AE0
	107 Move X1, [X21]
	108 Add X0, X31, 8
	109 Call Enumerator<Object>.Dispose, X0
	110 Compare X20, 0
	111 JumpIfEqual {91}
	112 Move X0, X20
	113 Call 0x1C17F18
	114 Move X20, X31
	115 Move X19, X0
	116 Move X1, [X21]
	117 Add X0, X31, 8
	118 Call Enumerator<Object>.Dispose, X0
	119 Compare X20, 0
	120 JumpIfNotEqual {123}
	121 Move X0, X19
	122 Call 0x1D2D690
	123 Move X0, X20
	124 Call 0x1C17F18
	125 Call 0x1991590

Method: UnityEngine.Transform OnCreatePooledItem()

Disassembly:
	0x03B45DDC MOV X0, X8
	0x03B45DE0 BL 0x1C16E04
	0x03B45DE4 LDR X8, [X27]
	0x03B45DE8 STR X0, [X31 + 0x20]
	0x03B45DEC ADD X1, X31, 0x4C
	0x03B45DF0 MOV X0, X8
	0x03B45DF4 BL 0x1C16E04
	0x03B45DF8 LDR X8, [X27]
	0x03B45DFC STR X0, [X31 + 0x28]
	0x03B45E00 ADD X1, X31, 0x48
	0x03B45E04 MOV X0, X8
	0x03B45E08 BL 0x1C16E04
	0x03B45E0C LDR X8, [X27]
	0x03B45E10 STR X0, [X31 + 0x30]
	0x03B45E14 MOV X1, X22
	0x03B45E18 MOV X0, X8
	0x03B45E1C BL 0x1C16E04
	0x03B45E20 LDR X3, [X31]
	0x03B45E24 STR X0, [X31 + 0x38]
	0x03B45E28 ADD X1, X31, 0x8
	0x03B45E2C MOV X0, X21
	0x03B45E30 MOV X2, X20
	0x03B45E34 BL 0x1C16CB0
	0x03B45E38 LDP X20, X19, [X31 + 0xA0]
	0x03B45E3C LDP X22, X21, [X31 + 0x90]
	0x03B45E40 LDP X24, X23, [X31 + 0x80]
	0x03B45E44 LDP X26, X25, [X31 + 0x70]
	0x03B45E48 LDP X28, X27, [X31 + 0x60]
	0x03B45E4C LDP X29, X30, [X31 + 0x50]
	0x03B45E50 ADD X31, X31, 0xB0
	0x03B45E54 RET
	0x03B45E58 MOV X0, X1
	0x03B45E5C MOV X1, X31
	0x03B45E60 B 0x1C16CB4
	0x03B45E64 STP X30, X23, [X31 - 0x30]!
	0x03B45E68 STP X22, X21, [X31 + 0x10]
	0x03B45E6C STP X20, X19, [X31 + 0x20]
	0x03B45E70 ADRP X20, 0x89D000
	0x03B45E74 ADRP X23, 0x615000
	0x03B45E78 LDRB W8, [X20 + 0x88C]
	0x03B45E7C LDR X23, [X23 + 0x758]
	0x03B45E80 MOV X19, X0
	0x03B45E84 TBNZ X8, 0x0, 0x3B45EC0
	0x03B45E88 ADRP X0, 0x5D6000
	0x03B45E8C LDR X0, [X0 + 0x848]
	0x03B45E90 BL 0x1C16CF4
	0x03B45E94 ADRP X0, 0x615000
	0x03B45E98 LDR X0, [X0 + 0x758]
	0x03B45E9C BL 0x1C16CF4
	0x03B45EA0 ADRP X0, 0x615000
	0x03B45EA4 LDR X0, [X0 + 0x8A8]
	0x03B45EA8 BL 0x1C16CF4
	0x03B45EAC ADRP X0, 0x615000
	0x03B45EB0 LDR X0, [X0 + 0x8B0]
	0x03B45EB4 BL 0x1C16CF4
	0x03B45EB8 MOVZ W8, 0x1
	0x03B45EBC STRB W8, [X20 + 0x88C]
	0x03B45EC0 LDR X8, [X23]
	0x03B45EC4 LDR W9, [X8 + 0xE0]
	0x03B45EC8 CBNZ W9, 0x3B45ED8
	0x03B45ECC MOV X0, X8
	0x03B45ED0 BL 0x1C16DFC
	0x03B45ED4 LDR X8, [X23]
	0x03B45ED8 LDR X9, [X8 + 0xB8]
	0x03B45EDC LDR X10, [X9]
	0x03B45EE0 CBNZ X10, 0x3B45F50
	0x03B45EE4 LDR W10, [X8 + 0xE0]
	0x03B45EE8 CBNZ W10, 0x3B45EFC
	0x03B45EEC MOV X0, X8
	0x03B45EF0 BL 0x1C16DFC
	0x03B45EF4 LDR X8, [X23]
	0x03B45EF8 LDR X9, [X8 + 0xB8]
	0x03B45EFC ADRP X8, 0x5D6000
	0x03B45F00 LDR X20, [X9 + 0x8]
	0x03B45F04 LDR X8, [X8 + 0x848]
	0x03B45F08 LDR X0, [X8]
	0x03B45F0C ADRP X8, 0x615000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x89E000
	006 Move X20, 0x5AF000
	007 Move W8, [X19+2179]
	008 Move X20, [X20+2648]
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5AF000
	014 Move X0, [X0+2648]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X19+2179], W8
	018 Move X0, [X20]
	019 Call 0x1C17F10
	020 Move X1, X31
	021 Move X19, X0
	022 Call GameObject..ctor, X0
	023 Compare X19, 0
	024 JumpIfEqual {93}
	025 Move X0, X19
	026 Move X1, X31
	027 Call GameObject.get_transform, X0
	028 Move X20, 0x894000
	029 Move W8, [X20+1923]
	030 Move X19, X0
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x5AF000
	034 Move X0, [X0+1440]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+1923], W8
	038 Compare X19, 0
	039 JumpIfEqual {93}
	040 Move X20, 0x5AF000
	041 Move X20, [X20+1440]
	042 Move X0, X19
	043 Move X1, X31
	044 Move X8, [X20]
	045 Move X8, [X8+184]
	046 Move S1, [X8+4]
	047 Move S2, [X8+8]
	048 Move V0, [X8]
	049 Call Transform.set_localPosition, X0, X1
	050 Move X21, 0x894000
	051 Move W8, [X21+1939]
	052 Compare W8, 0
	053 JumpIfNotEqual {59}
	054 Move X0, 0x5B0000
	055 Move X0, [X0+1448]
	056 Call 0x1C17CF4
	057 Move W8, 1
	058 Move [X21+1939], W8
	059 Move X8, 0x5B0000
	060 Move X8, [X8+1448]
	061 Move X0, X19
	062 Move X1, X31
	063 Move X8, [X8]
	064 Move X8, [X8+184]
	065 Move S0, [X8]
	066 Move S1, [X8+4]
	067 Move S2, [X8+8]
	068 Move S3, [X8+12]
	069 Call Transform.set_localRotation, X0, X1
	070 Move X21, 0x894000
	071 Move W8, [X21+2139]
	072 Compare W8, 0
	073 JumpIfNotEqual {79}
	074 Move X0, 0x5AF000
	075 Move X0, [X0+1440]
	076 Call 0x1C17CF4
	077 Move W8, 1
	078 Move [X21+2139], W8
	079 Move X8, [X20]
	080 Move X0, X19
	081 Move X1, X31
	082 Move X8, [X8+184]
	083 Move S0, [X8+12]
	084 Move S1, [X8+16]
	085 Move V2, [X8+20]
	086 Call Transform.set_localScale, X0, X1
	087 Move X0, X19
	088 Move X20, [X31+16]
	089 Move X19, [X31+24]
	090 Move X30, [X31+32]
	091 Move X21, [X31+40]
	092 Return X0
	093 Call 0x1C17F20

Method: System.Void OnGetPooledItem(UnityEngine.Transform item)

Disassembly:
	0x03B45F10 LDR X8, [X8 + 0x8B0]
	0x03B45F14 LDR X21, [X8]
	0x03B45F18 ADRP X8, 0x615000
	0x03B45F1C LDR X8, [X8 + 0x8A8]
	0x03B45F20 LDR W9, [X0 + 0xE0]
	0x03B45F24 LDR X22, [X8]
	0x03B45F28 CBNZ W9, 0x3B45F30
	0x03B45F2C BL 0x1C16DFC
	0x03B45F30 MOV X0, X20
	0x03B45F34 MOV X1, X21
	0x03B45F38 MOV X2, X22
	0x03B45F3C MOV X3, X31
	0x03B45F40 BL 0x36FAD70
	0x03B45F44 LDR X8, [X23]
	0x03B45F48 LDR X9, [X8 + 0xB8]
	0x03B45F4C STR X0, [X9]
	0x03B45F50 LDR W9, [X8 + 0xE0]
	0x03B45F54 CBNZ W9, 0x3B45F64
	0x03B45F58 MOV X0, X8
	0x03B45F5C BL 0x1C16DFC
	0x03B45F60 LDR X8, [X23]
	0x03B45F64 LDR X8, [X8 + 0xB8]
	0x03B45F68 LDP X22, X21, [X31 + 0x10]
	0x03B45F6C LDR X8, [X8]
	0x03B45F70 STR X8, [X19]
	0x03B45F74 LDP X20, X19, [X31 + 0x20]
	0x03B45F78 LDP X30, X23, [X31], #0x30
	0x03B45F7C RET
	0x03B45F80 STR X30, [X31 - 0x20]!
	0x03B45F84 STP X20, X19, [X31 + 0x10]
	0x03B45F88 ADRP X20, 0x89D000
	0x03B45F8C ADRP X19, 0x615000
	0x03B45F90 LDRB W8, [X20 + 0x88D]
	0x03B45F94 LDR X19, [X19 + 0x758]
	0x03B45F98 TBNZ X8, 0x0, 0x3B45FB0
	0x03B45F9C ADRP X0, 0x615000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x89E000
	006 Move X21, 0x5AF000
	007 Move W8, [X20+2180]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5AF000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2180], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {37}
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 
	037 Compare X19, 0
	038 JumpIfEqual {51}
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.get_hideFlags, X0
	042 And W1, W0, 0xFFFFFFFE
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Object.set_hideFlags, X0, X1
	050 Return 
	051 Call 0x1C17F20

Method: System.Void OnReleasePooledItem(UnityEngine.Transform item)

Disassembly:
	0x03B45FA0 LDR X0, [X0 + 0x758]
	0x03B45FA4 BL 0x1C16CF4
	0x03B45FA8 MOVZ W8, 0x1
	0x03B45FAC STRB W8, [X20 + 0x88D]
	0x03B45FB0 LDR X0, [X19]
	0x03B45FB4 STR X31, [X31 + 0x8]
	0x03B45FB8 LDR W8, [X0 + 0xE0]
	0x03B45FBC CBNZ W8, 0x3B45FC4
	0x03B45FC0 BL 0x1C16DFC
	0x03B45FC4 ADD X0, X31, 0x8
	0x03B45FC8 BL 0x3B45E64
	0x03B45FCC LDR X0, [X31 + 0x8]
	0x03B45FD0 LDP X20, X19, [X31 + 0x10]
	0x03B45FD4 LDR X30, [X31], #0x20
	0x03B45FD8 RET
	0x03B45FDC STP X30, X21, [X31 - 0x20]!
	0x03B45FE0 STP X20, X19, [X31 + 0x10]
	0x03B45FE4 ADRP X21, 0x89D000
	0x03B45FE8 ADRP X19, 0x615000
	0x03B45FEC ADRP X20, 0x5D6000
	0x03B45FF0 LDRB W8, [X21 + 0x88E]
	0x03B45FF4 LDR X19, [X19 + 0x8B8]
	0x03B45FF8 LDR X20, [X20 + 0x848]
	0x03B45FFC TBNZ X8, 0x0, 0x3B4602C
	0x03B46000 ADRP X0, 0x5D5000
	0x03B46004 LDR X0, [X0 + 0x848]
	0x03B46008 BL 0x1C16CF4
	0x03B4600C ADRP X0, 0x614000
	0x03B46010 LDR X0, [X0 + 0x758]
	0x03B46014 BL 0x1C16CF4
	0x03B46018 ADRP X0, 0x614000
	0x03B4601C LDR X0, [X0 + 0x8B8]
	0x03B46020 BL 0x1C16CF4
	0x03B46024 MOVZ W8, 0x1
	0x03B46028 STRB W8, [X21 + 0x88E]
	0x03B4602C LDR X0, [X20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x89E000
	006 Move X21, 0x5AF000
	007 Move W8, [X20+2181]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5AF000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2181], W8
	019 Move X0, [X21]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {37}
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 
	037 Compare X19, 0
	038 JumpIfEqual {51}
	039 Move X0, X19
	040 Move X1, X31
	041 Call Object.get_hideFlags, X0
	042 Or W1, W0, 1
	043 Move X0, X19
	044 Move X20, [X31+16]
	045 Move X19, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+32]
	048 Move X21, [X31+40]
	049 Call Object.set_hideFlags, X0, X1
	050 Return 
	051 Call 0x1C17F20

Method: System.Void OnDestroyPooledItem(UnityEngine.Transform item)

Disassembly:
	0x03B46030 ADRP X20, 0x614000
	0x03B46034 LDR X19, [X19]
	0x03B46038 LDR W8, [X0 + 0xE0]
	0x03B4603C LDR X20, [X20 + 0x758]
	0x03B46040 CBNZ W8, 0x3B46048
	0x03B46044 BL 0x1C16DFC
	0x03B46048 MOV X0, X19
	0x03B4604C MOV X1, X31
	0x03B46050 BL 0x36FA754
	0x03B46054 LDR X8, [X20]
	0x03B46058 MOV X19, X0
	0x03B4605C LDR W9, [X8 + 0xE0]
	0x03B46060 CBNZ W9, 0x3B46070
	0x03B46064 MOV X0, X8
	0x03B46068 BL 0x1C16DFC
	0x03B4606C LDR X8, [X20]
	0x03B46070 LDR X8, [X8 + 0xB8]
	0x03B46074 STR X19, [X8 + 0x8]
	0x03B46078 LDP X20, X19, [X31 + 0x10]
	0x03B4607C LDP X30, X21, [X31], #0x20
	0x03B46080 RET
	0x03B46084 RET
	0x03B46088 B 0x3B45FDC
	0x03B4608C STP X30, X21, [X31 - 0x20]!
	0x03B46090 STP X20, X19, [X31 + 0x10]
	0x03B46094 LDR X8, [X2 + 0x8]
	0x03B46098 STP X1, X2, [X0 + 0x20]
	0x03B4609C MOV X19, X0
	0x03B460A0 MOV X20, X1
	0x03B460A4 STR X8, [X0 + 0x10]
	0x03B460A8 LDRB W21, [X2 + 0x52]
	0x03B460AC STR X0, [X0 + 0x40]
	0x03B460B0 MOV X0, X2
	0x03B460B4 BL 0x1C16D84
	0x03B460B8 TBZ X0, 0x0, 0x3B460D0
	0x03B460BC CMP W21, 0xE
	0x03B460C0 B.NE 0x3B460EC
	0x03B460C4 ADRP X8, 0xFFFFFFFFFE0B7000
	0x03B460C8 ADD X8, X8, 0x904
	0x03B460CC B 0x3B460E0
	0x03B460D0 CMP W21, 0xD

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x89D000
	006 Move X20, 0x5AE000
	007 Move W8, [X21+2182]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5AE000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2182], W8
	019 Move X0, [X20]
	020 Move W8, [X0+224]
	021 Compare W8, 0
	022 JumpIfNotEqual {24}
	023 Call 0x1C17DFC
	024 Move X0, X19
	025 Move X1, X31
	026 Move X2, X31
	027 Call Object.op_Equality, X0, X1
	028 Move TEMP, X0
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {37}
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Move X21, [X31+40]
	036 Return 
	037 Compare X19, 0
	038 JumpIfEqual {57}
	039 Move X0, X19
	040 Move X1, X31
	041 Call Component.get_gameObject, X0
	042 Move X8, [X20]
	043 Move X19, X0
	044 Move W9, [X8+224]
	045 Compare W9, 0
	046 JumpIfNotEqual {49}
	047 Move X0, X8
	048 Call 0x1C17DFC
	049 Move X0, X19
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move X1, X31
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Call Object.Destroy, X0
	056 Return 
	057 Call 0x1C17F20

Method: System.Boolean get_gravityOnDetach()

Disassembly:
	0x03B460D4 B.NE 0x3B460E8
	0x03B460D8 ADRP X8, 0xFFFFFFFFFE0B7000

ISIL:
	001 Move W0, [X0+576]
	002 Return X0

Method: System.Void set_gravityOnDetach(System.Boolean value)

Disassembly:
	0x03B460DC ADD X8, X8, 0x8D4
	0x03B460E0 STR X8, [X19 + 0x18]
	0x03B460E4 B 0x3B460FC

ISIL:
	001 And W8, W1, 1
	002 Move [X0+576], W8
	003 Return 

Method: System.Void .ctor()

Disassembly:
	0x03B460E8 CBZ X20, 0x3B46114
	0x03B460EC LDR X8, [X19 + 0x10]
	0x03B460F0 LDR X9, [X19 + 0x20]
	0x03B460F4 STR X8, [X19 + 0x18]
	0x03B460F8 STR X9, [X19 + 0x40]
	0x03B460FC ADRP X8, 0xFFFFFFFFFE0B7000
	0x03B46100 ADD X8, X8, 0x7E0
	0x03B46104 STR X8, [X19 + 0x38]
	0x03B46108 LDP X20, X19, [X31 + 0x10]
	0x03B4610C LDP X30, X21, [X31], #0x20
	0x03B46110 RET
	0x03B46114 ADRP X1, 0xFFFFFFFFFCFD5000
	0x03B46118 ADD X1, X1, 0xEE3
	0x03B4611C MOV X0, X31
	0x03B46120 BL 0x1C16F3C
	0x03B46124 MOV X1, X31
	0x03B46128 BL 0x1C16DEC
	0x03B4612C LDR X8, [X0 + 0x40]
	0x03B46130 LDR X9, [X0 + 0x18]
	0x03B46134 LDR X10, [X0 + 0x28]
	0x03B46138 AND W5, W5, 0x1
	0x03B4613C AND W6, W6, 0x1
	0x03B46140 AND W7, W7, 0x1
	0x03B46144 MOV X0, X8
	0x03B46148 STR X10, [X31]
	0x03B4614C BR X9
	0x03B46150 SUB X31, X31, 0x110
	0x03B46154 STP X29, X30, [X31 + 0xB0]
	0x03B46158 STP X28, X27, [X31 + 0xC0]
	0x03B4615C STP X26, X25, [X31 + 0xD0]
	0x03B46160 STP X24, X23, [X31 + 0xE0]
	0x03B46164 STP X22, X21, [X31 + 0xF0]
	0x03B46168 STP X20, X19, [X31 + 0x100]
	0x03B4616C LDP X21, X8, [X31 + 0x110]
	0x03B46170 AND W9, W6, 0x1
	0x03B46174 AND W10, W7, 0x1
	0x03B46178 STR S0, [X31 + 0xAC]
	0x03B4617C STR X8, [X31 + 0x8]
	0x03B46180 AND W8, W5, 0x1
	0x03B46184 STP S2, S1, [X31 + 0xA0]
	0x03B46188 STP S4, S3, [X31 + 0x94]
	0x03B4618C STP S6, S5, [X31 + 0x88]
	0x03B46190 ADRP X19, 0x89C000
	0x03B46194 STRB W8, [X31 + 0xA8]
	0x03B46198 STRB W9, [X31 + 0x9C]
	0x03B4619C STRB W10, [X31 + 0x90]
	0x03B461A0 ADRP X29, 0x5D5000
	0x03B461A4 ADRP X28, 0x5AD000
	0x03B461A8 ADRP X26, 0x5AD000
	0x03B461AC ADRP X27, 0x5AD000
	0x03B461B0 LDRB W8, [X19 + 0x890]
	0x03B461B4 LDR X29, [X29 + 0x610]
	0x03B461B8 LDR X28, [X28 + 0x5A0]
	0x03B461BC LDR X26, [X26 + 0xA90]
	0x03B461C0 LDR X27, [X27 + 0xB58]
	0x03B461C4 MOV X22, X4
	0x03B461C8 MOV X23, X3
	0x03B461CC MOV X24, X2
	0x03B461D0 MOV X25, X1
	0x03B461D4 MOV X20, X0
	0x03B461D8 TBNZ X8, 0x0, 0x3B46214
	0x03B461DC ADRP X0, 0x5AD000
	0x03B461E0 LDR X0, [X0 + 0xB58]
	0x03B461E4 BL 0x1C16CF4
	0x03B461E8 ADRP X0, 0x5D5000
	0x03B461EC LDR X0, [X0 + 0x610]
	0x03B461F0 BL 0x1C16CF4
	0x03B461F4 ADRP X0, 0x5AD000
	0x03B461F8 LDR X0, [X0 + 0xA90]
	0x03B461FC BL 0x1C16CF4
	0x03B46200 ADRP X0, 0x5AD000
	0x03B46204 LDR X0, [X0 + 0x5A0]
	0x03B46208 BL 0x1C16CF4
	0x03B4620C MOVZ W8, 0x1
	0x03B46210 STRB W8, [X19 + 0x890]
	0x03B46214 LDR X0, [X29]
	0x03B46218 MOVI V0.2D, 0x0
	0x03B4621C MOV X1, X25
	0x03B46220 STR X31, [X31 + 0x80]
	0x03B46224 STP V0, V0, [X31 + 0x60]
	0x03B46228 STP V0, V0, [X31 + 0x40]
	0x03B4622C STR V0, [X31 + 0x3]
	0x03B46230 BL 0x1C16E04
	0x03B46234 LDR X8, [X28]
	0x03B46238 STR X0, [X31 + 0x10]
	0x03B4623C MOV X1, X24
	0x03B46240 MOV X0, X8
	0x03B46244 BL 0x1C16E04
	0x03B46248 LDR X8, [X29]
	0x03B4624C STR X0, [X31 + 0x18]
	0x03B46250 MOV X1, X23
	0x03B46254 MOV X0, X8
	0x03B46258 BL 0x1C16E04
	0x03B4625C LDR X8, [X28]
	0x03B46260 STR X0, [X31 + 0x20]
	0x03B46264 MOV X1, X22
	0x03B46268 MOV X0, X8
	0x03B4626C BL 0x1C16E04
	0x03B46270 LDR X8, [X26]
	0x03B46274 STR X0, [X31 + 0x28]
	0x03B46278 ADD X1, X31, 0xAC
	0x03B4627C MOV X0, X8
	0x03B46280 BL 0x1C16E04
	0x03B46284 LDR X8, [X27]
	0x03B46288 STR X0, [X31 + 0x30]
	0x03B4628C ADD X1, X31, 0xA8
	0x03B46290 MOV X0, X8
	0x03B46294 BL 0x1C16E04
	0x03B46298 LDR X8, [X26]
	0x03B4629C STR X0, [X31 + 0x38]
	0x03B462A0 ADD X1, X31, 0xA4
	0x03B462A4 MOV X0, X8
	0x03B462A8 BL 0x1C16E04
	0x03B462AC LDR X8, [X26]
	0x03B462B0 STR X0, [X31 + 0x40]
	0x03B462B4 ADD X1, X31, 0xA0
	0x03B462B8 MOV X0, X8
	0x03B462BC BL 0x1C16E04
	0x03B462C0 LDR X8, [X27]
	0x03B462C4 STR X0, [X31 + 0x48]
	0x03B462C8 ADD X1, X31, 0x9C
	0x03B462CC MOV X0, X8
	0x03B462D0 BL 0x1C16E04
	0x03B462D4 LDR X8, [X26]
	0x03B462D8 STR X0, [X31 + 0x50]
	0x03B462DC ADD X1, X31, 0x98
	0x03B462E0 MOV X0, X8
	0x03B462E4 BL 0x1C16E04
	0x03B462E8 LDR X8, [X26]
	0x03B462EC STR X0, [X31 + 0x58]
	0x03B462F0 ADD X1, X31, 0x94
	0x03B462F4 MOV X0, X8
	0x03B462F8 BL 0x1C16E04
	0x03B462FC LDR X8, [X27]
	0x03B46300 STR X0, [X31 + 0x60]
	0x03B46304 ADD X1, X31, 0x90
	0x03B46308 MOV X0, X8
	0x03B4630C BL 0x1C16E04
	0x03B46310 LDR X8, [X26]
	0x03B46314 STR X0, [X31 + 0x68]
	0x03B46318 ADD X1, X31, 0x8C
	0x03B4631C MOV X0, X8
	0x03B46320 BL 0x1C16E04
	0x03B46324 LDR X8, [X26]
	0x03B46328 STR X0, [X31 + 0x70]
	0x03B4632C ADD X1, X31, 0x88
	0x03B46330 MOV X0, X8
	0x03B46334 BL 0x1C16E04
	0x03B46338 LDR X3, [X31 + 0x8]
	0x03B4633C STR X0, [X31 + 0x78]
	0x03B46340 ADD X1, X31, 0x10
	0x03B46344 MOV X0, X20
	0x03B46348 MOV X2, X21
	0x03B4634C BL 0x1C16CB0
	0x03B46350 LDP X20, X19, [X31 + 0x100]
	0x03B46354 LDP X22, X21, [X31 + 0xF0]
	0x03B46358 LDP X24, X23, [X31 + 0xE0]
	0x03B4635C LDP X26, X25, [X31 + 0xD0]
	0x03B46360 LDP X28, X27, [X31 + 0xC0]
	0x03B46364 LDP X29, X30, [X31 + 0xB0]
	0x03B46368 ADD X31, X31, 0x110
	0x03B4636C RET
	0x03B46370 MOV X0, X1
	0x03B46374 MOV X1, X31
	0x03B46378 B 0x1C16CB4
	0x03B4637C STP X30, X23, [X31 - 0x30]!
	0x03B46380 STP X22, X21, [X31 + 0x10]
	0x03B46384 STP X20, X19, [X31 + 0x20]
	0x03B46388 ADRP X20, 0x89C000
	0x03B4638C ADRP X23, 0x614000
	0x03B46390 LDRB W8, [X20 + 0x891]
	0x03B46394 LDR X23, [X23 + 0x760]
	0x03B46398 MOV X19, X0
	0x03B4639C TBNZ X8, 0x0, 0x3B463D8
	0x03B463A0 ADRP X0, 0x5D5000
	0x03B463A4 LDR X0, [X0 + 0x848]
	0x03B463A8 BL 0x1C16CF4
	0x03B463AC ADRP X0, 0x614000
	0x03B463B0 LDR X0, [X0 + 0x760]
	0x03B463B4 BL 0x1C16CF4
	0x03B463B8 ADRP X0, 0x614000
	0x03B463BC LDR X0, [X0 + 0x8C0]
	0x03B463C0 BL 0x1C16CF4
	0x03B463C4 ADRP X0, 0x614000
	0x03B463C8 LDR X0, [X0 + 0x8C8]
	0x03B463CC BL 0x1C16CF4
	0x03B463D0 MOVZ W8, 0x1
	0x03B463D4 STRB W8, [X20 + 0x891]
	0x03B463D8 LDR X8, [X23]
	0x03B463DC LDR W9, [X8 + 0xE0]
	0x03B463E0 CBNZ W9, 0x3B463F0
	0x03B463E4 MOV X0, X8

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X27, 0x89D000
	014 Move X26, 0x615000
	015 Move X25, 0x615000
	016 Move X24, 0x615000
	017 Move X23, 0x615000
	018 Move X22, 0x5AE000
	019 Move X21, 0x5B0000
	020 Move X29, 0x615000
	021 Move X28, 0x615000
	022 Move X26, [X26+2024]
	023 Move X25, [X25+2032]
	024 Move X24, [X24+2040]
	025 Move X23, [X23+2048]
	026 Move X22, [X22+1592]
	027 Move X21, [X21+2480]
	028 Move X29, [X29+2056]
	029 Move X28, [X28+2064]
	030 Move W8, [X27+2183]
	031 Move X19, X0
	032 Add X20, X0, 481
	033 Move TEMP, X8
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {84}
	037 Move X0, 0x615000
	038 Move X0, [X0+2072]
	039 Call 0x1C17CF4
	040 Move X0, 0x615000
	041 Move X0, [X0+2080]
	042 Call 0x1C17CF4
	043 Move X0, 0x615000
	044 Move X0, [X0+2088]
	045 Call 0x1C17CF4
	046 Move X0, 0x615000
	047 Move X0, [X0+2064]
	048 Call 0x1C17CF4
	049 Move X0, 0x615000
	050 Move X0, [X0+2096]
	051 Call 0x1C17CF4
	052 Move X0, 0x615000
	053 Move X0, [X0+2056]
	054 Call 0x1C17CF4
	055 Move X0, 0x5DA000
	056 Move X0, [X0+3152]
	057 Call 0x1C17CF4
	058 Move X0, 0x615000
	059 Move X0, [X0+2032]
	060 Call 0x1C17CF4
	061 Move X0, 0x5DA000
	062 Move X0, [X0+3144]
	063 Call 0x1C17CF4
	064 Move X0, 0x615000
	065 Move X0, [X0+2024]
	066 Call 0x1C17CF4
	067 Move X0, 0x5AE000
	068 Move X0, [X0+1592]
	069 Call 0x1C17CF4
	070 Move X0, 0x615000
	071 Move X0, [X0+2048]
	072 Call 0x1C17CF4
	073 Move X0, 0x615000
	074 Move X0, [X0+2040]
	075 Call 0x1C17CF4
	076 Move X0, 0x5B0000
	077 Move X0, [X0+2480]
	078 Call 0x1C17CF4
	079 Move X0, 0x615000
	080 Move X0, [X0+1080]
	081 Call 0x1C17CF4
	082 Move W8, 1
	083 Move [X27+2183], W8
	084 Or W8, W31, 0x1010101
	085 Move V0, 0
	086 Move [X20], W8
	087 Move X8, -50692096
	088 Move [X19+31], V0
	089 Move V0, [X8+3064]
	090 Move X9, 0x999A
	091 NotImplemented "Instruction MOVK not yet implemented."
	092 NotImplemented "Instruction MOVK not yet implemented."
	093 Move W27, 1
	094 Move [X19+488], X9
	095 Move W8, 0x3E800000
	096 Move [X19+512], W27
	097 Move [X20+35], D0
	098 Move [X19+524], W27
	099 Move [X19+528], D0
	100 Move [X19+536], W27
	101 Move [X20+59], D0
	102 Move S0, 1
	103 Move S1, 1
	104 Move S2, 1
	105 Move S3, W31
	106 Move X0, X31
	107 Move [X19+548], W27
	108 Move [X19+552], W8
	109 Call AnimationCurve.Linear, V0, V1, V2, V3
	110 Move X8, -50692096
	111 Move V0, [X8+960]
	112 Move [X19+560], X0
	113 Move [X19+577], W27
	114 Move [X19+568], D0
	115 Move X0, [X26]
	116 Call 0x1C17F10
	117 Move X1, [X25]
	118 Move X20, X0
	119 Call List`1<Object>..ctor, X0
	120 Move [X19+584], X20
	121 Move X0, [X26]
	122 Call 0x1C17F10
	123 Move X1, [X25]
	124 Move X20, X0
	125 Call List`1<Object>..ctor, X0
	126 Move [X19+592], X20
	127 Move [X19+600], W27
	128 Move X0, [X24]
	129 Call 0x1C17F10
	130 Move X1, [X23]
	131 Move X20, X0
	132 Call 0x25EA604, X0
	133 Move [X19+608], X20
	134 Move X0, [X24]
	135 Call 0x1C17F10
	136 Move X1, [X23]
	137 Move X20, X0
	138 Call 0x25EA604, X0
	139 Move [X19+616], X20
	140 Move X0, [X22]
	141 Move W1, 20
	142 Call 0x1C17D6C
	143 Move [X19+736], X0
	144 Move X0, [X21]
	145 Move W1, 20
	146 Call 0x1C17D6C
	147 Move [X19+744], X0
	148 Move X0, [X21]
	149 Move W1, 20
	150 Call 0x1C17D6C
	151 Move [X19+752], X0
	152 Move X0, [X29]
	153 Call 0x1C17F10
	154 Move X1, [X28]
	155 Move X20, X0
	156 Call HashSet`1<Object>..ctor, X0
	157 Move [X19+832], X20
	158 Move X8, 0x5DA000
	159 Move X8, [X8+3144]
	160 Move X0, [X8]
	161 Call 0x1C17F10
	162 Move X8, 0x5DA000
	163 Move X8, [X8+3152]
	164 Move X20, X0
	165 Move X1, [X8]
	166 Call List`1<Object>..ctor, X0
	167 Move [X19+840], X20
	168 Move X8, 0x615000
	169 Move X8, [X8+2096]
	170 Move X0, [X8]
	171 Call 0x1C17F10
	172 Move X8, 0x615000
	173 Move X8, [X8+2088]
	174 Move X20, X0
	175 Move X1, [X8]
	176 Call HashSet`1<Object>..ctor, X0
	177 Move [X19+848], X20
	178 Move X8, 0x615000
	179 Move X8, [X8+2080]
	180 Move X0, [X8]
	181 Call 0x1C17F10
	182 Move X8, 0x615000
	183 Move X8, [X8+2072]
	184 Move X20, X0
	185 Move X1, [X8]
	186 Call Dictionary`2<Object, Object>..ctor, X0
	187 Move [X19+872], X20
	188 Move X8, 0x615000
	189 Move X8, [X8+1080]
	190 Move X0, [X8]
	191 Move W8, [X0+224]
	192 Compare W8, 0
	193 JumpIfNotEqual {195}
	194 Call 0x1C17DFC
	195 Move X0, X19
	196 Move X20, [X31+80]
	197 Move X19, [X31+88]
	198 Move X22, [X31+64]
	199 Move X21, [X31+72]
	200 Move X24, [X31+48]
	201 Move X23, [X31+56]
	202 Move X26, [X31+32]
	203 Move X25, [X31+40]
	204 Move X28, [X31+16]
	205 Move X27, [X31+24]
	206 Move X29, [X31+96]
	207 Move X30, [X31+104]
	208 Call XRBaseInteractable..ctor, X0
	209 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B463E8 BL 0x1C16DFC
	0x03B463EC LDR X8, [X23]
	0x03B463F0 LDR X9, [X8 + 0xB8]
	0x03B463F4 LDR X10, [X9]
	0x03B463F8 CBNZ X10, 0x3B46468
	0x03B463FC LDR W10, [X8 + 0xE0]
	0x03B46400 CBNZ W10, 0x3B46414
	0x03B46404 MOV X0, X8
	0x03B46408 BL 0x1C16DFC
	0x03B4640C LDR X8, [X23]
	0x03B46410 LDR X9, [X8 + 0xB8]
	0x03B46414 ADRP X8, 0x5D5000
	0x03B46418 LDR X20, [X9 + 0x8]
	0x03B4641C LDR X8, [X8 + 0x848]
	0x03B46420 LDR X0, [X8]
	0x03B46424 ADRP X8, 0x614000
	0x03B46428 LDR X8, [X8 + 0x8C8]
	0x03B4642C LDR X21, [X8]
	0x03B46430 ADRP X8, 0x614000
	0x03B46434 LDR X8, [X8 + 0x8C0]
	0x03B46438 LDR W9, [X0 + 0xE0]
	0x03B4643C LDR X22, [X8]
	0x03B46440 CBNZ W9, 0x3B46448
	0x03B46444 BL 0x1C16DFC
	0x03B46448 MOV X0, X20
	0x03B4644C MOV X1, X21
	0x03B46450 MOV X2, X22
	0x03B46454 MOV X3, X31
	0x03B46458 BL 0x36FAD70
	0x03B4645C LDR X8, [X23]
	0x03B46460 LDR X9, [X8 + 0xB8]
	0x03B46464 STR X0, [X9]
	0x03B46468 LDR W9, [X8 + 0xE0]
	0x03B4646C CBNZ W9, 0x3B4647C
	0x03B46470 MOV X0, X8
	0x03B46474 BL 0x1C16DFC
	0x03B46478 LDR X8, [X23]
	0x03B4647C LDR X8, [X8 + 0xB8]
	0x03B46480 LDP X22, X21, [X31 + 0x10]
	0x03B46484 LDR X8, [X8]
	0x03B46488 STR X8, [X19]
	0x03B4648C LDP X20, X19, [X31 + 0x20]
	0x03B46490 LDP X30, X23, [X31], #0x30
	0x03B46494 RET
	0x03B46498 STR X30, [X31 - 0x20]!
	0x03B4649C STP X20, X19, [X31 + 0x10]
	0x03B464A0 ADRP X20, 0x89C000
	0x03B464A4 ADRP X19, 0x614000
	0x03B464A8 LDRB W8, [X20 + 0x892]
	0x03B464AC LDR X19, [X19 + 0x760]
	0x03B464B0 TBNZ X8, 0x0, 0x3B464C8
	0x03B464B4 ADRP X0, 0x614000
	0x03B464B8 LDR X0, [X0 + 0x760]
	0x03B464BC BL 0x1C16CF4
	0x03B464C0 MOVZ W8, 0x1
	0x03B464C4 STRB W8, [X20 + 0x892]
	0x03B464C8 LDR X0, [X19]
	0x03B464CC STR X31, [X31 + 0x8]
	0x03B464D0 LDR W8, [X0 + 0xE0]
	0x03B464D4 CBNZ W8, 0x3B464DC
	0x03B464D8 BL 0x1C16DFC
	0x03B464DC ADD X0, X31, 0x8
	0x03B464E0 BL 0x3B4637C
	0x03B464E4 LDR X0, [X31 + 0x8]
	0x03B464E8 LDP X20, X19, [X31 + 0x10]
	0x03B464EC LDR X30, [X31], #0x20
	0x03B464F0 RET
	0x03B464F4 STP X30, X21, [X31 - 0x20]!
	0x03B464F8 STP X20, X19, [X31 + 0x10]
	0x03B464FC ADRP X21, 0x89C000
	0x03B46500 ADRP X19, 0x614000
	0x03B46504 ADRP X20, 0x5D5000
	0x03B46508 LDRB W8, [X21 + 0x893]
	0x03B4650C LDR X19, [X19 + 0x8D0]
	0x03B46510 LDR X20, [X20 + 0x848]
	0x03B46514 TBNZ X8, 0x0, 0x3B46544
	0x03B46518 ADRP X0, 0x5D5000
	0x03B4651C LDR X0, [X0 + 0x848]
	0x03B46520 BL 0x1C16CF4
	0x03B46524 ADRP X0, 0x614000
	0x03B46528 LDR X0, [X0 + 0x760]
	0x03B4652C BL 0x1C16CF4
	0x03B46530 ADRP X0, 0x614000
	0x03B46534 LDR X0, [X0 + 0x8D0]
	0x03B46538 BL 0x1C16CF4
	0x03B4653C MOVZ W8, 0x1
	0x03B46540 STRB W8, [X21 + 0x893]
	0x03B46544 LDR X0, [X20]
	0x03B46548 ADRP X20, 0x614000
	0x03B4654C LDR X19, [X19]
	0x03B46550 LDR W8, [X0 + 0xE0]
	0x03B46554 LDR X20, [X20 + 0x760]
	0x03B46558 CBNZ W8, 0x3B46560
	0x03B4655C BL 0x1C16DFC
	0x03B46560 MOV X0, X19
	0x03B46564 MOV X1, X31
	0x03B46568 BL 0x36FA754
	0x03B4656C LDR X8, [X20]
	0x03B46570 MOV X19, X0
	0x03B46574 LDR W9, [X8 + 0xE0]
	0x03B46578 CBNZ W9, 0x3B46588
	0x03B4657C MOV X0, X8
	0x03B46580 BL 0x1C16DFC
	0x03B46584 LDR X8, [X20]
	0x03B46588 LDR X8, [X8 + 0xB8]
	0x03B4658C STR X19, [X8 + 0x8]
	0x03B46590 LDP X20, X19, [X31 + 0x10]
	0x03B46594 LDP X30, X21, [X31], #0x20
	0x03B46598 RET
	0x03B4659C RET
	0x03B465A0 B 0x3B464F4
	0x03B465A4 LDR X0, [X0 + 0x20]
	0x03B465A8 RET
	0x03B465AC STR X30, [X31 - 0x30]!
	0x03B465B0 STP X22, X21, [X31 + 0x10]
	0x03B465B4 STP X20, X19, [X31 + 0x20]
	0x03B465B8 ADRP X22, 0x89C000
	0x03B465BC ADRP X21, 0x5AD000
	0x03B465C0 LDRB W8, [X22 + 0x895]
	0x03B465C4 LDR X21, [X21 + 0x970]
	0x03B465C8 MOV X20, X1
	0x03B465CC MOV X19, X0
	0x03B465D0 TBNZ X8, 0x0, 0x3B465E8
	0x03B465D4 ADRP X0, 0x5AD000
	0x03B465D8 LDR X0, [X0 + 0x970]
	0x03B465DC BL 0x1C16CF4
	0x03B465E0 MOVZ W8, 0x1
	0x03B465E4 STRB W8, [X22 + 0x895]
	0x03B465E8 STR X20, [X19 + 0x20]
	0x03B465EC LDR X0, [X21]
	0x03B465F0 LDR W8, [X0 + 0xE0]
	0x03B465F4 CBNZ W8, 0x3B465FC
	0x03B465F8 BL 0x1C16DFC
	0x03B465FC MOV X0, X31
	0x03B46600 BL 0x3C018E4
	0x03B46604 TBZ X0, 0x0, 0x3B4662C
	0x03B46608 MOV X0, X19
	0x03B4660C MOV X1, X31
	0x03B46610 BL 0x3C32454
	0x03B46614 TBZ X0, 0x0, 0x3B4662C
	0x03B46618 MOV X0, X19
	0x03B4661C LDP X20, X19, [X31 + 0x20]
	0x03B46620 LDP X22, X21, [X31 + 0x10]
	0x03B46624 LDR X30, [X31], #0x30
	0x03B46628 B 0x3B4663C
	0x03B4662C LDP X20, X19, [X31 + 0x20]
	0x03B46630 LDP X22, X21, [X31 + 0x10]
	0x03B46634 LDR X30, [X31], #0x30
	0x03B46638 RET
	0x03B4663C STR X30, [X31 - 0x30]!
	0x03B46640 STP X22, X21, [X31 + 0x10]
	0x03B46644 STP X20, X19, [X31 + 0x20]
	0x03B46648 ADRP X20, 0x89C000
	0x03B4664C ADRP X22, 0x5AD000
	0x03B46650 LDRB W8, [X20 + 0x89D]
	0x03B46654 LDR X22, [X22 + 0x598]
	0x03B46658 MOV X19, X0
	0x03B4665C TBNZ X8, 0x0, 0x3B46674
	0x03B46660 ADRP X0, 0x5AD000
	0x03B46664 LDR X0, [X0 + 0x598]
	0x03B46668 BL 0x1C16CF4
	0x03B4666C MOVZ W8, 0x1
	0x03B46670 STRB W8, [X20 + 0x89D]
	0x03B46674 LDR X0, [X22]
	0x03B46678 LDR X20, [X19 + 0x60]
	0x03B4667C LDR X21, [X19 + 0x20]
	0x03B46680 LDR W8, [X0 + 0xE0]
	0x03B46684 CBNZ W8, 0x3B4668C
	0x03B46688 BL 0x1C16DFC
	0x03B4668C MOV X0, X20
	0x03B46690 MOV X1, X21
	0x03B46694 MOV X2, X31

ISIL:
	001 Move [X31-96], X29
	002 Move [X31-88], X30
	003 Move [X31+16], X28
	004 Move [X31+24], X27
	005 Move [X31+32], X26
	006 Move [X31+40], X25
	007 Move [X31+48], X24
	008 Move [X31+56], X23
	009 Move [X31+64], X22
	010 Move [X31+72], X21
	011 Move [X31+80], X20
	012 Move [X31+88], X19
	013 Move X20, 0x89D000
	014 Move X19, 0x615000
	015 Move W8, [X20+2184]
	016 Move X19, [X19+2104]
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {68}
	021 Move X0, 0x5B2000
	022 Move X0, [X0+600]
	023 Call 0x1C17CF4
	024 Move X0, 0x615000
	025 Move X0, [X0+2112]
	026 Call 0x1C17CF4
	027 Move X0, 0x615000
	028 Move X0, [X0+2120]
	029 Call 0x1C17CF4
	030 Move X0, 0x615000
	031 Move X0, [X0+2128]
	032 Call 0x1C17CF4
	033 Move X0, 0x615000
	034 Move X0, [X0+2136]
	035 Call 0x1C17CF4
	036 Move X0, 0x615000
	037 Move X0, [X0+2144]
	038 Call 0x1C17CF4
	039 Move X0, 0x615000
	040 Move X0, [X0+2152]
	041 Call 0x1C17CF4
	042 Move X0, 0x615000
	043 Move X0, [X0+2160]
	044 Call 0x1C17CF4
	045 Move X0, 0x615000
	046 Move X0, [X0+2104]
	047 Call 0x1C17CF4
	048 Move X0, 0x615000
	049 Move X0, [X0+2168]
	050 Call 0x1C17CF4
	051 Move X0, 0x615000
	052 Move X0, [X0+2176]
	053 Call 0x1C17CF4
	054 Move X0, 0x615000
	055 Move X0, [X0+2184]
	056 Call 0x1C17CF4
	057 Move X0, 0x615000
	058 Move X0, [X0+2192]
	059 Call 0x1C17CF4
	060 Move X0, 0x615000
	061 Move X0, [X0+1728]
	062 Call 0x1C17CF4
	063 Move X0, 0x615000
	064 Move X0, [X0+2200]
	065 Call 0x1C17CF4
	066 Move W8, 1
	067 Move [X20+2184], W8
	068 Move X22, 0x615000
	069 Move X20, 0x615000
	070 Move X26, 0x615000
	071 Move X23, 0x615000
	072 Move X24, 0x615000
	073 Move X25, 0x615000
	074 Move X29, 0x615000
	075 Move X22, [X22+2112]
	076 Move X20, [X20+2160]
	077 Move X26, [X26+2144]
	078 Move X23, [X23+2128]
	079 Move X24, [X24+1728]
	080 Move X25, [X25+2120]
	081 Move X29, [X29+2168]
	082 Move X0, [X19]
	083 Move X27, 0x5B2000
	084 Move X28, 0x615000
	085 Move X21, 0x615000
	086 Move X27, [X27+600]
	087 Move X28, [X28+2184]
	088 Move X21, [X21+2192]
	089 Move W8, [X0+224]
	090 Compare W8, 0
	091 JumpIfNotEqual {94}
	092 Call 0x1C17DFC
	093 Move X0, [X19]
	094 Move X8, [X0+184]
	095 Move X0, [X22]
	096 Move X19, [X8]
	097 Call 0x1C17F10
	098 Move X2, [X20]
	099 Move X1, X19
	100 Move X3, X31
	101 Move X20, X0
	102 Call Func`1<Object>..ctor, X0, X1, X2
	103 Move X0, [X26]
	104 Call 0x1C17F10
	105 Move X7, [X23]
	106 Move W6, 0x2710
	107 Move X1, X20
	108 Move X2, X31
	109 Move X3, X31
	110 Move X4, X31
	111 Move W5, W31
	112 Move X19, X0
	113 Call 0x2EF1EC8, X0, X1, X2, X3, X4, X5, X6
	114 Move X8, [X24]
	115 Move X8, [X8+184]
	116 Move [X8], X19
	117 Move X0, [X25]
	118 Call 0x1C17F10
	119 Move X2, [X29]
	120 Move X1, X31
	121 Move X3, X31
	122 Move X19, X0
	123 Call Func`1<Object>..ctor, X0, X1, X2
	124 Move X0, [X27]
	125 Call 0x1C17F10
	126 Move X2, [X28]
	127 Move X1, X31
	128 Move X3, X31
	129 Move X20, X0
	130 Call Action`1<Object>..ctor, X0, X1, X2
	131 Move X0, [X27]
	132 Call 0x1C17F10
	133 Move X2, [X21]
	134 Move X1, X31
	135 Move X3, X31
	136 Move X21, X0
	137 Call Action`1<Object>..ctor, X0, X1, X2
	138 Move X0, [X27]
	139 Call 0x1C17F10
	140 Move X8, 0x615000
	141 Move X8, [X8+2176]
	142 Move X1, X31
	143 Move X3, X31
	144 Move X22, X0
	145 Move X2, [X8]
	146 Call Action`1<Object>..ctor, X0, X1, X2
	147 Move X8, 0x615000
	148 Move X8, [X8+2152]
	149 Move X0, [X8]
	150 Call 0x1C17F10
	151 Move X8, 0x615000
	152 Move X8, [X8+2136]
	153 Move W5, 1
	154 Move W6, 0x2710
	155 Move X1, X19
	156 Move X7, [X8]
	157 Move X2, X20
	158 Move X3, X21
	159 Move X4, X22
	160 Move X23, X0
	161 Call 0x2EF1EC8, X0, X1, X2, X3, X4, X5, X6
	162 Move X8, [X24]
	163 Move W1, 1
	164 Move W2, W31
	165 Move W3, W31
	166 Move X8, [X8+184]
	167 Move X4, X31
	168 Move [X8+8], X23
	169 Move X8, 0x615000
	170 Move X8, [X8+2200]
	171 Move X0, [X8]
	172 Call ProfilerUnsafeUtility.CreateMarker, X0, X1, X2, X3
	173 Move X8, [X24]
	174 Move X20, [X31+80]
	175 Move X19, [X31+88]
	176 Move X22, [X31+64]
	177 Move X21, [X31+72]
	178 Move X24, [X31+48]
	179 Move X23, [X31+56]
	180 Move X8, [X8+184]
	181 Move X26, [X31+32]
	182 Move X25, [X31+40]
	183 Move X28, [X31+16]
	184 Move X27, [X31+24]
	185 Move [X8+16], X0
	186 Move X29, [X31+96]
	187 Move X30, [X31+104]
	188 Return 

Method: System.Void EaseAttachBurst$BurstManaged(ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 targetLocalScale, in UnityEngine.Pose rawTargetPose, in UnityEngine.Vector3 rawTargetLocalScale, System.Single deltaTime, System.Single attachEaseInTime, ref System.Single currentAttachEaseTime)

Disassembly:
	0x03B46698 BL 0x3C3883C
	0x03B4669C TBNZ X0, 0x0, 0x3B466EC
	0x03B466A0 MOV X0, X19
	0x03B466A4 BL 0x3B46934
	0x03B466A8 LDR X0, [X22]
	0x03B466AC LDR X20, [X19 + 0x20]
	0x03B466B0 LDR W8, [X0 + 0xE0]
	0x03B466B4 CBNZ W8, 0x3B466BC
	0x03B466B8 BL 0x1C16DFC
	0x03B466BC MOV X0, X20
	0x03B466C0 MOV X1, X31
	0x03B466C4 MOV X2, X31
	0x03B466C8 BL 0x3C354F8
	0x03B466CC TBZ X0, 0x0, 0x3B466EC
	0x03B466D0 LDR X0, [X19 + 0x20]
	0x03B466D4 CBZ X0, 0x3B466FC
	0x03B466D8 MOV X1, X19
	0x03B466DC MOV X2, X31
	0x03B466E0 BL 0x3B72808
	0x03B466E4 LDR X8, [X19 + 0x20]
	0x03B466E8 STR X8, [X19 + 0x60]
	0x03B466EC LDP X20, X19, [X31 + 0x20]
	0x03B466F0 LDP X22, X21, [X31 + 0x10]
	0x03B466F4 LDR X30, [X31], #0x30
	0x03B466F8 RET
	0x03B466FC BL 0x1C16F20
	0x03B46700 LDR X0, [X0 + 0x28]
	0x03B46704 RET
	0x03B46708 STR X30, [X31 - 0x30]!
	0x03B4670C STP X22, X21, [X31 + 0x10]
	0x03B46710 STP X20, X19, [X31 + 0x20]
	0x03B46714 ADRP X22, 0x89C000
	0x03B46718 ADRP X21, 0x614000
	0x03B4671C LDRB W8, [X22 + 0x896]
	0x03B46720 LDR X21, [X21 + 0x8D8]
	0x03B46724 MOV X20, X1
	0x03B46728 MOV X19, X0
	0x03B4672C TBNZ X8, 0x0, 0x3B46744
	0x03B46730 ADRP X0, 0x614000
	0x03B46734 LDR X0, [X0 + 0x8D8]
	0x03B46738 BL 0x1C16CF4
	0x03B4673C MOVZ W8, 0x1
	0x03B46740 STRB W8, [X22 + 0x896]
	0x03B46744 STR X20, [X19 + 0x28]
	0x03B46748 LDR X1, [X21]
	0x03B4674C MOV X0, X20
	0x03B46750 BL 0x1C16E00
	0x03B46754 MOV X1, X0
	0x03B46758 MOV X0, X19
	0x03B4675C LDP X20, X19, [X31 + 0x20]
	0x03B46760 LDP X22, X21, [X31 + 0x10]
	0x03B46764 LDR X30, [X31], #0x30
	0x03B46768 B 0x3B4676C
	0x03B4676C STP X30, X21, [X31 - 0x20]!
	0x03B46770 STP X20, X19, [X31 + 0x10]
	0x03B46774 ADRP X21, 0x89C000
	0x03B46778 LDRB W8, [X21 + 0x899]
	0x03B4677C MOV X19, X1
	0x03B46780 MOV X20, X0
	0x03B46784 TBNZ X8, 0x0, 0x3B467A8
	0x03B46788 ADRP X0, 0x5AD000
	0x03B4678C LDR X0, [X0 + 0x970]
	0x03B46790 BL 0x1C16CF4
	0x03B46794 ADRP X0, 0x5AD000
	0x03B46798 LDR X0, [X0 + 0x598]
	0x03B4679C BL 0x1C16CF4
	0x03B467A0 MOVZ W8, 0x1
	0x03B467A4 STRB W8, [X21 + 0x899]
	0x03B467A8 ADRP X8, 0x5AD000
	0x03B467AC LDR X8, [X8 + 0x970]
	0x03B467B0 STR X19, [X20 + 0x48]
	0x03B467B4 CBZ X19, 0x3B467D8
	0x03B467B8 ADRP X9, 0x5AD000
	0x03B467BC LDR X9, [X9 + 0x598]
	0x03B467C0 LDR X10, [X19]
	0x03B467C4 LDR X9, [X9]
	0x03B467C8 LDRB W12, [X10 + 0x130]
	0x03B467CC LDRB W11, [X9 + 0x130]
	0x03B467D0 CMP W12, W11
	0x03B467D4 B.CS 0x3B467E0
	0x03B467D8 MOV X9, X31
	0x03B467DC B 0x3B467F4
	0x03B467E0 LDR X10, [X10 + 0xC8]
	0x03B467E4 ADD X10, X10, X11, 0x3, LSL
	0x03B467E8 LDUR X10, [X10 - 0x8]
	0x03B467EC CMP X10, X9
	0x03B467F0 CSEL X9, X19, X31, EQ
	0x03B467F4 STR X9, [X20 + 0x28]
	0x03B467F8 LDR X0, [X8]
	0x03B467FC LDR W8, [X0 + 0xE0]
	0x03B46800 CBNZ W8, 0x3B46808
	0x03B46804 BL 0x1C16DFC
	0x03B46808 MOV X0, X31
	0x03B4680C BL 0x3C018E4
	0x03B46810 TBZ X0, 0x0, 0x3B46838
	0x03B46814 MOV X0, X20
	0x03B46818 MOV X1, X31
	0x03B4681C BL 0x3C32454
	0x03B46820 TBZ X0, 0x0, 0x3B46838
	0x03B46824 MOV X0, X20
	0x03B46828 MOV X1, X19
	0x03B4682C LDP X20, X19, [X31 + 0x10]
	0x03B46830 LDP X30, X21, [X31], #0x20
	0x03B46834 B 0x3B46CB0
	0x03B46838 LDP X20, X19, [X31 + 0x10]
	0x03B4683C LDP X30, X21, [X31], #0x20
	0x03B46840 RET
	0x03B46844 LDR X0, [X0 + 0x30]

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X23
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move V8, V0
	015 Move V4, [X4]
	016 Move S0, [X0]
	017 Move S3, [X0+4]
	018 Move V2, [X0+8]
	019 Move X22, X0
	020 NotImplemented "Instruction FDIV not yet implemented."
	021 Move V1, V3
	022 Move X0, X31
	023 Move X19, X4
	024 Move X21, X3
	025 Move X23, X2
	026 Move X20, X1
	027 Call float3.op_Implicit, X0
	028 Move V3, [X23+8]
	029 Move V9, V0
	030 Move V10, V1
	031 Move S0, [X23]
	032 Move S1, [X23+4]
	033 Move V11, V2
	034 Move V2, V3
	035 Move X0, X31
	036 Call float3.op_Implicit, X0
	037 Subtract S0, S0, S9
	038 Subtract S1, S1, S10
	039 Subtract S2, S2, S11
	040 Multiply S0, S13, S0
	041 Multiply S1, S13, S1
	042 Multiply S2, S13, S2
	043 Add S0, S9, S0
	044 Add S1, S10, S1
	045 Add S2, S11, S2
	046 Move X0, X31
	047 Call float3.op_Implicit, X0
	048 Move S6, [X22+12]
	049 Move S4, [X22+16]
	050 Move S5, [X22+20]
	051 Move S3, [X22+24]
	052 Move [X22], S0
	053 Move [X22+8], S1
	054 Move [X22+8], S2
	055 Move V0, V6
	056 Move V1, V4
	057 Move V2, V5
	058 Move X0, X31
	059 Call quaternion.op_Implicit, X0
	060 Move V11, V2
	061 Move S2, [X23+20]
	062 Move S4, [X23+24]
	063 Move V9, V0
	064 Move V10, V1
	065 Move S0, [X23+12]
	066 Move S1, [X23+16]
	067 Move V12, V3
	068 Move V3, V4
	069 Move X0, X31
	070 Call quaternion.op_Implicit, X0
	071 Move V4, V0
	072 Move V5, V1
	073 Move V6, V2
	074 Move V7, V3
	075 Move V0, V9
	076 Move V1, V10
	077 Move V2, V11
	078 Move V3, V12
	079 Move X0, X31
	080 Move [X31], S13
	081 Call 0x3B48948
	082 Move X0, X31
	083 Call quaternion.op_Implicit, X0
	084 Move [X22+12], S0
	085 Move [X22+20], S1
	086 Move [X22+20], S2
	087 Move [X22+28], S3
	088 Move S0, [X20]
	089 Move S1, [X20+4]
	090 Move V2, [X20+8]
	091 Move X0, X31
	092 Call float3.op_Implicit, X0
	093 Move V3, [X21+8]
	094 Move V9, V0
	095 Move V10, V1
	096 Move S0, [X21]
	097 Move S1, [X21+4]
	098 Move V11, V2
	099 Move V2, V3
	100 Move X0, X31
	101 Call float3.op_Implicit, X0
	102 Subtract S0, S0, S9
	103 Subtract S1, S1, S10
	104 Subtract S2, S2, S11
	105 Multiply S0, S13, S0
	106 Multiply S1, S13, S1
	107 Multiply S2, S13, S2
	108 Add S0, S9, S0
	109 Add S1, S10, S1
	110 Add S2, S11, S2
	111 Move X0, X31
	112 Call float3.op_Implicit, X0
	113 Move [X20], S0
	114 Move [X20+8], S1
	115 Move [X20+8], S2
	116 Move V0, [X19]
	117 Move X22, [X31+80]
	118 Move X21, [X31+88]
	119 Move X30, [X31+64]
	120 Move X23, [X31+72]
	121 Move D11, [X31+32]
	122 Move D10, [X31+40]
	123 Add S0, S0, S8
	124 Move [X19], S0
	125 Move X20, [X31+96]
	126 Move X19, [X31+104]
	127 Move D9, [X31+48]
	128 Move D8, [X31+56]
	129 Move D13, [X31+16]
	130 Move D12, [X31+24]
	131 Add X31, X31, 112
	132 Return 

Method: System.Void StepSmoothingBurst$BurstManaged(ref UnityEngine.Pose targetPose, ref UnityEngine.Vector3 targetLocalScale, in UnityEngine.Pose rawTargetPose, in UnityEngine.Vector3 rawTargetLocalScale, System.Single deltaTime, System.Boolean smoothPos, System.Single smoothPosAmount, System.Single tightenPos, System.Boolean smoothRot, System.Single smoothRotAmount, System.Single tightenRot, System.Boolean smoothScale, System.Single smoothScaleAmount, System.Single tightenScale)

Disassembly:
	0x03B46848 RET
	0x03B4684C STR X30, [X31 - 0x30]!
	0x03B46850 STP X22, X21, [X31 + 0x10]
	0x03B46854 STP X20, X19, [X31 + 0x20]
	0x03B46858 ADRP X22, 0x89C000
	0x03B4685C ADRP X21, 0x5AD000
	0x03B46860 LDRB W8, [X22 + 0x897]
	0x03B46864 LDR X21, [X21 + 0x598]
	0x03B46868 MOV X20, X1
	0x03B4686C MOV X19, X0
	0x03B46870 TBNZ X8, 0x0, 0x3B46894
	0x03B46874 ADRP X0, 0x5AD000
	0x03B46878 LDR X0, [X0 + 0x970]
	0x03B4687C BL 0x1C16CF4
	0x03B46880 ADRP X0, 0x5AD000
	0x03B46884 LDR X0, [X0 + 0x598]
	0x03B46888 BL 0x1C16CF4
	0x03B4688C MOVZ W8, 0x1
	0x03B46890 STRB W8, [X22 + 0x897]
	0x03B46894 LDR X0, [X21]
	0x03B46898 LDR X21, [X19 + 0x30]
	0x03B4689C LDR W8, [X0 + 0xE0]
	0x03B468A0 CBNZ W8, 0x3B468A8
	0x03B468A4 BL 0x1C16DFC
	0x03B468A8 MOV X0, X21
	0x03B468AC MOV X1, X20
	0x03B468B0 MOV X2, X31
	0x03B468B4 BL 0x3C3883C
	0x03B468B8 TBNZ X0, 0x0, 0x3B46924
	0x03B468BC ADRP X8, 0x5AD000
	0x03B468C0 LDR X8, [X8 + 0x970]
	0x03B468C4 LDR X0, [X8]
	0x03B468C8 LDR W8, [X0 + 0xE0]
	0x03B468CC CBNZ W8, 0x3B468D4
	0x03B468D0 BL 0x1C16DFC
	0x03B468D4 MOV X0, X31
	0x03B468D8 BL 0x3C018E4
	0x03B468DC TBZ X0, 0x0, 0x3B46920
	0x03B468E0 MOV X0, X19
	0x03B468E4 MOV X1, X31
	0x03B468E8 BL 0x3C32454
	0x03B468EC TBZ X0, 0x0, 0x3B46920
	0x03B468F0 MOV X0, X19
	0x03B468F4 BL 0x3B46934
	0x03B468F8 MOV X0, X19
	0x03B468FC STR X20, [X19 + 0x30]
	0x03B46900 BL 0x3B469B8
	0x03B46904 MOV X0, X19
	0x03B46908 BL 0x3B46B38
	0x03B4690C MOV X0, X19
	0x03B46910 LDP X20, X19, [X31 + 0x20]
	0x03B46914 LDP X22, X21, [X31 + 0x10]
	0x03B46918 LDR X30, [X31], #0x30
	0x03B4691C B 0x3B4663C
	0x03B46920 STR X20, [X19 + 0x30]
	0x03B46924 LDP X20, X19, [X31 + 0x20]
	0x03B46928 LDP X22, X21, [X31 + 0x10]
	0x03B4692C LDR X30, [X31], #0x30
	0x03B46930 RET
	0x03B46934 STP X30, X21, [X31 - 0x20]!
	0x03B46938 STP X20, X19, [X31 + 0x10]
	0x03B4693C ADRP X21, 0x89C000
	0x03B46940 ADRP X20, 0x5AD000
	0x03B46944 LDRB W8, [X21 + 0x89E]
	0x03B46948 LDR X20, [X20 + 0x598]
	0x03B4694C MOV X19, X0
	0x03B46950 TBNZ X8, 0x0, 0x3B46968
	0x03B46954 ADRP X0, 0x5AD000
	0x03B46958 LDR X0, [X0 + 0x598]
	0x03B4695C BL 0x1C16CF4
	0x03B46960 MOVZ W8, 0x1
	0x03B46964 STRB W8, [X21 + 0x89E]
	0x03B46968 LDR X0, [X20]
	0x03B4696C LDR X20, [X19 + 0x60]
	0x03B46970 LDR W8, [X0 + 0xE0]
	0x03B46974 CBNZ W8, 0x3B4697C
	0x03B46978 BL 0x1C16DFC
	0x03B4697C MOV X0, X20
	0x03B46980 MOV X1, X31
	0x03B46984 MOV X2, X31
	0x03B46988 BL 0x3C3883C
	0x03B4698C TBNZ X0, 0x0, 0x3B469A8
	0x03B46990 LDR X0, [X19 + 0x60]
	0x03B46994 CBZ X0, 0x3B469B4
	0x03B46998 MOV X1, X19
	0x03B4699C MOV X2, X31
	0x03B469A0 BL 0x3B729B4
	0x03B469A4 STR X31, [X19 + 0x60]
	0x03B469A8 LDP X20, X19, [X31 + 0x10]
	0x03B469AC LDP X30, X21, [X31], #0x20
	0x03B469B0 RET
	0x03B469B4 BL 0x1C16F20
	0x03B469B8 STP X30, X21, [X31 - 0x20]!
	0x03B469BC STP X20, X19, [X31 + 0x10]
	0x03B469C0 ADRP X21, 0x89C000
	0x03B469C4 ADRP X20, 0x5AD000
	0x03B469C8 LDRB W8, [X21 + 0x8A1]
	0x03B469CC LDR X20, [X20 + 0x598]
	0x03B469D0 MOV X19, X0
	0x03B469D4 TBNZ X8, 0x0, 0x3B46A1C
	0x03B469D8 ADRP X0, 0x5AD000
	0x03B469DC LDR X0, [X0 + 0xA28]
	0x03B469E0 BL 0x1C16CF4
	0x03B469E4 ADRP X0, 0x5AD000
	0x03B469E8 LDR X0, [X0 + 0x598]
	0x03B469EC BL 0x1C16CF4
	0x03B469F0 ADRP X0, 0x614000
	0x03B469F4 LDR X0, [X0 + 0x8E0]
	0x03B469F8 BL 0x1C16CF4
	0x03B469FC ADRP X0, 0x614000
	0x03B46A00 LDR X0, [X0 + 0x8E8]
	0x03B46A04 BL 0x1C16CF4
	0x03B46A08 ADRP X0, 0x614000
	0x03B46A0C LDR X0, [X0 + 0x8F0]
	0x03B46A10 BL 0x1C16CF4
	0x03B46A14 MOVZ W8, 0x1
	0x03B46A18 STRB W8, [X21 + 0x8A1]
	0x03B46A1C LDR X0, [X20]
	0x03B46A20 LDR X20, [X19 + 0x30]
	0x03B46A24 LDR W8, [X0 + 0xE0]
	0x03B46A28 CBNZ W8, 0x3B46A30
	0x03B46A2C BL 0x1C16DFC
	0x03B46A30 ADRP X21, 0x5AD000
	0x03B46A34 LDR X21, [X21 + 0xA28]
	0x03B46A38 MOV X0, X20
	0x03B46A3C MOV X1, X31
	0x03B46A40 MOV X2, X31
	0x03B46A44 BL 0x3C3883C
	0x03B46A48 TBZ X0, 0x0, 0x3B46A7C
	0x03B46A4C LDR X0, [X21]
	0x03B46A50 ADRP X20, 0x614000
	0x03B46A54 LDR W8, [X0 + 0xE0]
	0x03B46A58 LDR X20, [X20 + 0x8F0]
	0x03B46A5C CBNZ W8, 0x3B46A64
	0x03B46A60 BL 0x1C16DFC
	0x03B46A64 LDR X0, [X20]
	0x03B46A68 MOV X1, X19
	0x03B46A6C LDP X20, X19, [X31 + 0x10]
	0x03B46A70 MOV X2, X31
	0x03B46A74 LDP X30, X21, [X31], #0x20
	0x03B46A78 B 0x3C06B0C
	0x03B46A7C LDR X0, [X19 + 0x30]
	0x03B46A80 BL 0x3B47420
	0x03B46A84 TBZ X0, 0x0, 0x3B46AA8
	0x03B46A88 LDR X0, [X19 + 0x30]
	0x03B46A8C CBZ X0, 0x3B46B34
	0x03B46A90 MOV X1, X31
	0x03B46A94 BL 0x3C8F78C
	0x03B46A98 TBZ X0, 0x0, 0x3B46AD8
	0x03B46A9C LDP X20, X19, [X31 + 0x10]
	0x03B46AA0 LDP X30, X21, [X31], #0x20
	0x03B46AA4 RET
	0x03B46AA8 LDR X0, [X21]
	0x03B46AAC LDR W8, [X0 + 0xE0]
	0x03B46AB0 CBNZ W8, 0x3B46AB8
	0x03B46AB4 BL 0x1C16DFC
	0x03B46AB8 ADRP X8, 0x614000
	0x03B46ABC LDR X8, [X8 + 0x8E0]
	0x03B46AC0 MOV X1, X19
	0x03B46AC4 LDP X20, X19, [X31 + 0x10]
	0x03B46AC8 MOV X2, X31
	0x03B46ACC LDR X0, [X8]
	0x03B46AD0 LDP X30, X21, [X31], #0x20
	0x03B46AD4 B 0x3C065A4
	0x03B46AD8 ADRP X8, 0x614000
	0x03B46ADC LDR X1, [X19 + 0x30]
	0x03B46AE0 LDR X8, [X8 + 0x8E8]
	0x03B46AE4 MOV X2, X31
	0x03B46AE8 LDR X0, [X8]
	0x03B46AEC BL 0x321EFD0
	0x03B46AF0 LDR X8, [X21]
	0x03B46AF4 MOV X20, X0
	0x03B46AF8 LDR W9, [X8 + 0xE0]
	0x03B46AFC CBNZ W9, 0x3B46B08
	0x03B46B00 MOV X0, X8
	0x03B46B04 BL 0x1C16DFC
	0x03B46B08 MOV X0, X20
	0x03B46B0C MOV X1, X19
	0x03B46B10 MOV X2, X31
	0x03B46B14 BL 0x3C06B0C
	0x03B46B18 LDR X0, [X19 + 0x30]
	0x03B46B1C CBZ X0, 0x3B46B34
	0x03B46B20 LDP X20, X19, [X31 + 0x10]
	0x03B46B24 MOVZ W1, 0x1
	0x03B46B28 MOV X2, X31
	0x03B46B2C LDP X30, X21, [X31], #0x20
	0x03B46B30 B 0x3C8F7C8
	0x03B46B34 BL 0x1C16F20
	0x03B46B38 STR X30, [X31 - 0x20]!
	0x03B46B3C STP X20, X19, [X31 + 0x10]
	0x03B46B40 ADRP X20, 0x89C000
	0x03B46B44 LDRB W8, [X20 + 0x8A6]
	0x03B46B48 MOV X19, X0
	0x03B46B4C TBNZ X8, 0x0, 0x3B46B64
	0x03B46B50 ADRP X0, 0x614000
	0x03B46B54 LDR X0, [X0 + 0x160]
	0x03B46B58 BL 0x1C16CF4
	0x03B46B5C MOVZ W8, 0x1
	0x03B46B60 STRB W8, [X20 + 0x8A6]
	0x03B46B64 LDR X20, [X19 + 0x58]
	0x03B46B68 CBZ X20, 0x3B46BB4
	0x03B46B6C ADRP X10, 0x614000
	0x03B46B70 LDR X8, [X20]
	0x03B46B74 LDR X10, [X10 + 0x160]
	0x03B46B78 LDRH W9, [X8 + 0x12E]
	0x03B46B7C LDR X1, [X10]
	0x03B46B80 CBZ X9, 0x3B46BA4
	0x03B46B84 LDR X10, [X8 + 0xB0]
	0x03B46B88 ADD X10, X10, 0x8
	0x03B46B8C LDUR X11, [X10 - 0x8]
	0x03B46B90 CMP X11, X1

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X24
	012 Move [X31+104], X23
	013 Move [X31+112], X22
	014 Move [X31+120], X21
	015 Move [X31+128], X20
	016 Move [X31+136], X19
	017 Move V15, V5
	018 Move W21, W6
	019 Move V8, V4
	020 Move V12, V3
	021 Move W24, W5
	022 Move X20, X3
	023 Move X23, X2
	024 Move X19, X1
	025 Move X22, X0
	026 Move [X31+88], S6
	027 Move [X31+96], S0
	028 Move TEMP, X4
	029 And TEMP, TEMP, 1
	030 Compare TEMP, 1
	031 JumpIfNotEqual {111}
	032 Move V13, V2
	033 Move V14, V1
	034 Move V9, V0
	035 Move S0, [X22]
	036 Move S1, [X22+4]
	037 Move V2, [X22+8]
	038 Move X0, X31
	039 Call float3.op_Implicit, X0
	040 Move V3, [X23+8]
	041 Move V10, V12
	042 Move V12, V9
	043 Move [X31+12], S8
	044 Move V8, V15
	045 Move V15, V0
	046 Move V9, V1
	047 Move S0, [X23]
	048 Move S1, [X23+4]
	049 Move V11, V2
	050 Move V2, V3
	051 Move X0, X31
	052 Call float3.op_Implicit, X0
	053 Multiply S3, S12, S14
	054 Subtract S0, S0, S15
	055 Multiply S0, S3, S0
	056 Subtract S1, S1, S9
	057 Subtract S2, S2, S11
	058 Add S0, S15, S0
	059 Move V15, V8
	060 Move V8, [X31+12]
	061 Multiply S1, S3, S1
	062 Multiply S2, S3, S2
	063 Add S1, S9, S1
	064 Add S2, S11, S2
	065 Move X0, X31
	066 Move V12, V10
	067 Call float3.op_Implicit, X0
	068 Move X0, X31
	069 Move [X22], S0
	070 Move [X22+8], S1
	071 Move [X22+8], S2
	072 Call float3.op_Implicit, X0
	073 Move V3, [X23+8]
	074 Move V9, V0
	075 Move V11, V1
	076 Move S0, [X23]
	077 Move S1, [X23+4]
	078 Move V14, V2
	079 Move V2, V3
	080 Move X0, X31
	081 Call float3.op_Implicit, X0
	082 Subtract S0, S0, S9
	083 Subtract S1, S1, S11
	084 Subtract S2, S2, S14
	085 Multiply S0, S0, S13
	086 Multiply S1, S1, S13
	087 Multiply S2, S2, S13
	088 Add S0, S9, S0
	089 Add S1, S11, S1
	090 Add S2, S14, S2
	091 Move X0, X31
	092 Call float3.op_Implicit, X0
	093 Move [X22], S0
	094 Move [X22+8], S1
	095 Move [X22+8], S2
	096 Move TEMP, X24
	097 And TEMP, TEMP, 1
	098 Compare TEMP, 1
	099 JumpIfEqual {119}
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 Move V10, [X31+92]
	102 Move [X22+12], V0
	103 Move TEMP, X21
	104 And TEMP, TEMP, 1
	105 Compare TEMP, 1
	106 JumpIfEqual {189}
	107 Move W8, [X20+8]
	108 Move X9, [X20]
	109 Move [X19+8], W8
	110 Move [X19], X9
	111 Move W8, [X23+8]
	112 Move X9, [X23]
	113 Move [X22+8], W8
	114 Move [X22], X9
	115 Move TEMP, X24
	116 And TEMP, TEMP, 1
	117 Compare TEMP, 1
	118 JumpIfNotEqual {100}
	119 Move S0, [X22+12]
	120 Move S1, [X22+16]
	121 Move S2, [X22+20]
	122 Move S3, [X22+24]
	123 Move X0, X31
	124 Call quaternion.op_Implicit, X0
	125 Move V13, V2
	126 Move S2, [X23+20]
	127 Move S4, [X23+24]
	128 Move V9, V0
	129 Move V11, V1
	130 Move S0, [X23+12]
	131 Move S1, [X23+16]
	132 Move V14, V3
	133 Move V3, V4
	134 Move X0, X31
	135 Call quaternion.op_Implicit, X0
	136 Move V10, [X31+92]
	137 Move V4, V0
	138 Move V5, V1
	139 Move V6, V2
	140 Multiply S0, S10, S12
	141 Move V7, V3
	142 Move [X31], S0
	143 Move V0, V9
	144 Move V1, V11
	145 Move V2, V13
	146 Move V3, V14
	147 Move X0, X31
	148 Call 0x3B48948
	149 Move X0, X31
	150 Call quaternion.op_Implicit, X0
	151 Move X0, X31
	152 Move [X22+12], S0
	153 Move [X22+20], S1
	154 Move [X22+20], S2
	155 Move [X22+28], S3
	156 Call quaternion.op_Implicit, X0
	157 Move V12, V2
	158 Move S2, [X23+20]
	159 Move S4, [X23+24]
	160 Move V9, V0
	161 Move V11, V1
	162 Move S0, [X23+12]
	163 Move S1, [X23+16]
	164 Move V13, V3
	165 Move V3, V4
	166 Move X0, X31
	167 Call quaternion.op_Implicit, X0
	168 Move V4, V0
	169 Move V5, V1
	170 Move V6, V2
	171 Move V7, V3
	172 Move V0, V9
	173 Move V1, V11
	174 Move V2, V12
	175 Move V3, V13
	176 Move X0, X31
	177 Move [X31], S8
	178 Call 0x3B48948
	179 Move X0, X31
	180 Call quaternion.op_Implicit, X0
	181 Move [X22+12], S0
	182 Move [X22+20], S1
	183 Move [X22+20], S2
	184 Move [X22+28], S3
	185 Move TEMP, X21
	186 And TEMP, TEMP, 1
	187 Compare TEMP, 1
	188 JumpIfNotEqual {107}
	189 Move S0, [X19]
	190 Move S1, [X19+4]
	191 Move V2, [X19+8]
	192 Move X0, X31
	193 Call float3.op_Implicit, X0
	194 Move V3, [X20+8]
	195 Move V9, V0
	196 Move V11, V1
	197 Move S0, [X20]
	198 Move S1, [X20+4]
	199 Move V12, V2
	200 Move V2, V3
	201 Move X0, X31
	202 Call float3.op_Implicit, X0
	203 Multiply S3, S10, S15
	204 Subtract S0, S0, S9
	205 Subtract S1, S1, S11
	206 Subtract S2, S2, S12
	207 Multiply S0, S3, S0
	208 Multiply S1, S3, S1
	209 Multiply S2, S3, S2
	210 Add S0, S9, S0
	211 Add S1, S11, S1
	212 Add S2, S12, S2
	213 Move X0, X31
	214 Call float3.op_Implicit, X0
	215 Move X0, X31
	216 Move [X19], S0
	217 Move [X19+8], S1
	218 Move [X19+8], S2
	219 Call float3.op_Implicit, X0
	220 Move V3, [X20+8]
	221 Move V9, V0
	222 Move V10, V1
	223 Move S0, [X20]
	224 Move S1, [X20+4]
	225 Move V11, V2
	226 Move V2, V3
	227 Move X0, X31
	228 Call float3.op_Implicit, X0
	229 Move V3, [X31+88]
	230 Subtract S0, S0, S9
	231 Subtract S1, S1, S10
	232 Subtract S2, S2, S11
	233 Multiply S0, S0, S3
	234 Multiply S1, S1, S3
	235 Multiply S2, S2, S3
	236 Add S0, S9, S0
	237 Add S1, S10, S1
	238 Add S2, S11, S2
	239 Move X0, X31
	240 Call float3.op_Implicit, X0
	241 Move [X19], S0
	242 Move [X19+8], S1
	243 Move [X19+8], S2
	244 Move X20, [X31+128]
	245 Move X19, [X31+136]
	246 Move X22, [X31+112]
	247 Move X21, [X31+120]
	248 Move X24, [X31+96]
	249 Move X23, [X31+104]
	250 Move X30, [X31+80]
	251 Move D9, [X31+64]
	252 Move D8, [X31+72]
	253 Move D11, [X31+48]
	254 Move D10, [X31+56]
	255 Move D13, [X31+32]
	256 Move D12, [X31+40]
	257 Move D15, [X31+16]
	258 Move D14, [X31+24]
	259 Add X31, X31, 144
	260 Return 

