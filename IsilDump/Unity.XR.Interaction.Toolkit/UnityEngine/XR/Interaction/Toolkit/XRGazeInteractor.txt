Type: UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor

Method: UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation get_gazeAssistanceCalculation()

Disassembly:
	0x03B56D30 MOV X0, X19
	0x03B56D34 BL 0x1C16E00

ISIL:
	001 Move W0, [X0+1156]
	002 Return X0

Method: System.Void set_gazeAssistanceCalculation(UnityEngine.XR.Interaction.Toolkit.XRGazeInteractor/GazeAssistanceCalculation value)

Disassembly:
	0x03B56D38 CBZ X0, 0x3B56DE0
	0x03B56D3C LDR X8, [X0]

ISIL:
	001 Move [X0+1156], W1
	002 Return 

Method: System.Single get_gazeAssistanceColliderFixedSize()

Disassembly:
	0x03B56D40 LDR X1, [X21]
	0x03B56D44 MOV X19, X0

ISIL:
	001 Move V0, [X0+1160]
	002 Return V0

Method: System.Void set_gazeAssistanceColliderFixedSize(System.Single value)

Disassembly:
	0x03B56D48 LDRH W9, [X8 + 0x12E]
	0x03B56D4C CBZ X9, 0x3B56D70

ISIL:
	001 Move [X0+1160], S0
	002 Return 

Method: System.Single get_gazeAssistanceColliderScale()

Disassembly:
	0x03B56D50 LDR X10, [X8 + 0xB0]
	0x03B56D54 ADD X10, X10, 0x8

ISIL:
	001 Move V0, [X0+1164]
	002 Return V0

Method: System.Void set_gazeAssistanceColliderScale(System.Single value)

Disassembly:
	0x03B56D58 LDUR X11, [X10 - 0x8]
	0x03B56D5C CMP X11, X1

ISIL:
	001 Move [X0+1164], S0
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume get_gazeAssistanceSnapVolume()

Disassembly:
	0x03B56D60 B.EQ 0x3B56D80
	0x03B56D64 SUBS X9, X9, 0x1

ISIL:
	001 Move X0, [X0+1168]
	002 Return X0

Method: System.Void set_gazeAssistanceSnapVolume(UnityEngine.XR.Interaction.Toolkit.XRInteractableSnapVolume value)

Disassembly:
	0x03B56D68 ADD X10, X10, 0x10
	0x03B56D6C B.NE 0x3B56D58

ISIL:
	001 Move [X0+1168], X1
	002 Return 

Method: System.Boolean get_gazeAssistanceDistanceScaling()

Disassembly:
	0x03B56D70 MOVZ W2, 0x2
	0x03B56D74 MOV X0, X19

ISIL:
	001 Move W0, [X0+1176]
	002 Return X0

Method: System.Void set_gazeAssistanceDistanceScaling(System.Boolean value)

Disassembly:
	0x03B56D78 BL 0x1C5C788
	0x03B56D7C B 0x3B56D90
	0x03B56D80 LDR W9, [X10]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+1176], W8
	003 Return 

Method: System.Boolean get_clampGazeAssistanceDistanceScaling()

Disassembly:
	0x03B56D84 ADD W9, W9, 0x2
	0x03B56D88 ADD X8, X8, W9, 0x4, SXTW

ISIL:
	001 Move W0, [X0+1177]
	002 Return X0

Method: System.Void set_clampGazeAssistanceDistanceScaling(System.Boolean value)

Disassembly:
	0x03B56D8C ADD X0, X8, 0x138
	0x03B56D90 LDP X8, X1, [X0]
	0x03B56D94 MOV X0, X19

ISIL:
	001 And W8, W1, 1
	002 Move [X0+1177], W8
	003 Return 

Method: System.Single get_gazeAssistanceDistanceScalingClampValue()

Disassembly:
	0x03B56D98 BLR X8
	0x03B56D9C TBZ X0, 0x0, 0x3B56DE0

ISIL:
	001 Move V0, [X0+1180]
	002 Return V0

Method: System.Void set_gazeAssistanceDistanceScalingClampValue(System.Single value)

Disassembly:
	0x03B56DA0 LDR X8, [X19]
	0x03B56DA4 LDR X1, [X21]

ISIL:
	001 Move [X0+1180], S0
	002 Return 

Method: System.Void Awake()

Disassembly:
	0x03B56DA8 LDRH W9, [X8 + 0x12E]
	0x03B56DAC CBZ X9, 0x3B56DD0
	0x03B56DB0 LDR X10, [X8 + 0xB0]
	0x03B56DB4 ADD X10, X10, 0x8
	0x03B56DB8 LDUR X11, [X10 - 0x8]
	0x03B56DBC CMP X11, X1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRRayInteractor.Awake, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]
	008 Call XRGazeInteractor.CreateGazeAssistanceSnapVolume, X0
	009 Return 

Method: System.Void CreateGazeAssistanceSnapVolume()

Disassembly:
	0x03B56E64 LDR W8, [X0 + 0xE0]
	0x03B56E68 CBNZ W8, 0x3B56E70
	0x03B56E6C BL 0x1C16DFC
	0x03B56E70 MOV X0, X19
	0x03B56E74 LDP X20, X19, [X31 + 0x10]
	0x03B56E78 LDP X30, X21, [X31], #0x20
	0x03B56E7C B 0x3B56E80
	0x03B56E80 STR X30, [X31 - 0x60]!
	0x03B56E84 STP X28, X27, [X31 + 0x10]
	0x03B56E88 STP X26, X25, [X31 + 0x20]
	0x03B56E8C STP X24, X23, [X31 + 0x30]
	0x03B56E90 STP X22, X21, [X31 + 0x40]
	0x03B56E94 STP X20, X19, [X31 + 0x50]
	0x03B56E98 ADRP X28, 0x88C000
	0x03B56E9C ADRP X20, 0x604000
	0x03B56EA0 ADRP X27, 0x604000
	0x03B56EA4 ADRP X26, 0x604000
	0x03B56EA8 ADRP X25, 0x604000
	0x03B56EAC ADRP X24, 0x5A3000
	0x03B56EB0 ADRP X23, 0x604000
	0x03B56EB4 ADRP X22, 0x601000
	0x03B56EB8 ADRP X21, 0x604000
	0x03B56EBC LDR X20, [X20 + 0xEB8]
	0x03B56EC0 LDR X27, [X27 + 0xEC0]
	0x03B56EC4 LDR X26, [X26 + 0xE40]
	0x03B56EC8 LDRB W8, [X28 + 0x9AA]
	0x03B56ECC LDR X25, [X25 + 0xE48]
	0x03B56ED0 LDR X24, [X24 + 0x488]
	0x03B56ED4 LDR X23, [X23 + 0xEC8]
	0x03B56ED8 LDR X22, [X22 + 0x30]
	0x03B56EDC LDR X21, [X21 + 0x3A8]
	0x03B56EE0 MOV X19, X0
	0x03B56EE4 TBNZ X8, 0x0, 0x3B56F50
	0x03B56EE8 ADRP X0, 0x604000
	0x03B56EEC LDR X0, [X0 + 0xE48]
	0x03B56EF0 BL 0x1C16CF4
	0x03B56EF4 ADRP X0, 0x604000
	0x03B56EF8 LDR X0, [X0 + 0xE40]
	0x03B56EFC BL 0x1C16CF4
	0x03B56F00 ADRP X0, 0x604000
	0x03B56F04 LDR X0, [X0 + 0xEC8]
	0x03B56F08 BL 0x1C16CF4
	0x03B56F0C ADRP X0, 0x5A3000
	0x03B56F10 LDR X0, [X0 + 0x488]
	0x03B56F14 BL 0x1C16CF4
	0x03B56F18 ADRP X0, 0x604000
	0x03B56F1C LDR X0, [X0 + 0xEB8]
	0x03B56F20 BL 0x1C16CF4
	0x03B56F24 ADRP X0, 0x604000
	0x03B56F28 LDR X0, [X0 + 0xEC0]
	0x03B56F2C BL 0x1C16CF4
	0x03B56F30 ADRP X0, 0x604000
	0x03B56F34 LDR X0, [X0 + 0x3A8]
	0x03B56F38 BL 0x1C16CF4
	0x03B56F3C ADRP X0, 0x601000
	0x03B56F40 LDR X0, [X0 + 0x30]
	0x03B56F44 BL 0x1C16CF4
	0x03B56F48 MOVZ W8, 0x1
	0x03B56F4C STRB W8, [X28 + 0x9AA]
	0x03B56F50 ADRP X10, 0xFFFFFFFFFCF94000
	0x03B56F54 ADRP X11, 0xFFFFFFFFFCF94000
	0x03B56F58 ADRP X13, 0xFFFFFFFFFCF97000
	0x03B56F5C LDR V0, [X10 + 0xF9]
	0x03B56F60 LDR V1, [X11 + 0xA3]
	0x03B56F64 LDR V2, [X13 + 0x558]
	0x03B56F68 MOVZ W8, 0x1
	0x03B56F6C MOVZ W9, 0x41F00000
	0x03B56F70 MOVZ W12, 0x14
	0x03B56F74 MOVN W0, 0x0
	0x03B56F78 MOV X1, X31
	0x03B56F7C STRB W8, [X19 + 0x294]
	0x03B56F80 STR W9, [X19 + 0x298]
	0x03B56F84 STR W12, [X19 + 0x2D0]
	0x03B56F88 STP V0, V1, [X19 + 0x2B0]
	0x03B56F8C STR D2, [X19 + 0x2D8]
	0x03B56F90 MOVN W28, 0x0
	0x03B56F94 BL 0x3C35CBC
	0x03B56F98 ADD X8, X19, 0x2E4
	0x03B56F9C MOVI V0.2S, 0x1
	0x03B56FA0 ADRP X10, 0xFFFFFFFFFCF97000
	0x03B56FA4 STR W0, [X19 + 0x2E0]
	0x03B56FA8 STR D0, [X8]
	0x03B56FAC LDR V0, [X10 + 0xD80]
	0x03B56FB0 MOVZ X8, 0x40400000
	0x03B56FB4 MOVK X8, 0x101
	0x03B56FB8 MOVZ W9, 0x3F000000
	0x03B56FBC MOVK X8, 0x1010000
	0x03B56FC0 STR W9, [X19 + 0x2F0]
	0x03B56FC4 STR X8, [X19 + 0x2F8]
	0x03B56FC8 STR D0, [X19 + 0x300]
	0x03B56FCC LDR X0, [X20]
	0x03B56FD0 BL 0x1C16F10
	0x03B56FD4 MOV X1, X31
	0x03B56FD8 MOV X20, X0
	0x03B56FDC BL 0x3BA4EF0
	0x03B56FE0 STR X20, [X19 + 0x318]
	0x03B56FE4 LDR X0, [X27]
	0x03B56FE8 BL 0x1C16F10
	0x03B56FEC MOV X1, X31
	0x03B56FF0 MOV X20, X0
	0x03B56FF4 BL 0x3BA4F38
	0x03B56FF8 STR X20, [X19 + 0x320]
	0x03B56FFC LDR X0, [X26]
	0x03B57000 BL 0x1C16F10
	0x03B57004 LDR X1, [X25]
	0x03B57008 MOV X20, X0
	0x03B5700C BL 0x301B7C4
	0x03B57010 STR X20, [X19 + 0x360]
	0x03B57014 LDR X0, [X24]
	0x03B57018 MOVZ W1, 0xA
	0x03B5701C BL 0x1C16D6C
	0x03B57020 STR X0, [X19 + 0x388]
	0x03B57024 LDR X0, [X23]
	0x03B57028 BL 0x1C16F10
	0x03B5702C MOV X1, X31
	0x03B57030 MOV X20, X0
	0x03B57034 BL 0x3B6519C
	0x03B57038 STR X20, [X19 + 0x398]
	0x03B5703C STR W28, [X19 + 0x3A8]
	0x03B57040 LDR X0, [X22]
	0x03B57044 MOVZ W1, 0x3
	0x03B57048 BL 0x1C16D6C
	0x03B5704C STR X0, [X19 + 0x3B8]
	0x03B57050 LDR X0, [X22]
	0x03B57054 MOVZ W1, 0x3
	0x03B57058 BL 0x1C16D6C
	0x03B5705C STR X0, [X19 + 0x3C0]
	0x03B57060 LDR X0, [X21]
	0x03B57064 LDR W8, [X0 + 0xE0]
	0x03B57068 CBNZ W8, 0x3B57070
	0x03B5706C BL 0x1C16DFC
	0x03B57070 MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x88D000
	006 Move X21, 0x59E000
	007 Move W8, [X20+2365]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {43}
	014 Move X0, 0x605000
	015 Move X0, [X0+2328]
	016 Call 0x1C17CF4
	017 Move X0, 0x59E000
	018 Move X0, [X0+2600]
	019 Call 0x1C17CF4
	020 Move X0, 0x605000
	021 Move X0, [X0+3704]
	022 Call 0x1C17CF4
	023 Move X0, 0x605000
	024 Move X0, [X0+3712]
	025 Call 0x1C17CF4
	026 Move X0, 0x59E000
	027 Move X0, [X0+2648]
	028 Call 0x1C17CF4
	029 Move X0, 0x59E000
	030 Move X0, [X0+1432]
	031 Call 0x1C17CF4
	032 Move X0, 0x5A4000
	033 Move X0, [X0+200]
	034 Call 0x1C17CF4
	035 Move X0, 0x605000
	036 Move X0, [X0+3720]
	037 Call 0x1C17CF4
	038 Move X0, 0x605000
	039 Move X0, [X0+3728]
	040 Call 0x1C17CF4
	041 Move W8, 1
	042 Move [X20+2365], W8
	043 Move X0, [X21]
	044 Move X20, [X19+1168]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Equality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {85}
	057 Move X8, 0x59E000
	058 Move X8, [X8+2648]
	059 Move X20, 0x605000
	060 Move X0, [X8]
	061 Move X20, [X20+3720]
	062 Call 0x1C17F10
	063 Move X1, [X20]
	064 Move X2, X31
	065 Move X20, X0
	066 Call GameObject..ctor, X0, X1
	067 Compare X20, 0
	068 JumpIfEqual {151}
	069 Move X8, 0x605000
	070 Move X8, [X8+3704]
	071 Move X0, X20
	072 Move X1, [X8]
	073 Call 0x21E61FC, X0
	074 Compare X0, 0
	075 JumpIfEqual {151}
	076 Move W1, 1
	077 Move X2, X31
	078 Call Collider.set_isTrigger, X0, X1
	079 Move X8, 0x605000
	080 Move X8, [X8+3712]
	081 Move X0, X20
	082 Move X1, [X8]
	083 Call 0x21E61FC, X0
	084 Move [X19+1168], X0
	085 Move X8, [X19+1168]
	086 Compare X8, 0
	087 JumpIfEqual {151}
	088 Move X0, [X21]
	089 Move X20, [X8+48]
	090 Move W9, [X0+224]
	091 Compare W9, 0
	092 JumpIfNotEqual {94}
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X31
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {146}
	102 Move X8, [X19+1168]
	103 Compare X8, 0
	104 JumpIfEqual {151}
	105 Move X8, [X8+48]
	106 Compare X8, 0
	107 JumpIfEqual {128}
	108 Move X9, 0x5A4000
	109 Move X9, [X9+200]
	110 Move X8, [X8]
	111 Move X10, [X9]
	112 Move W9, [X8+304]
	113 Move W11, [X10+304]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X12, [X8+200]
	116 Add X11, X12, X11
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Move X10, 0x604000
	120 Move X10, [X10+2328]
	121 Move X10, [X10]
	122 Move W11, [X10+304]
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move X8, [X8+200]
	125 Add X8, X8, X11
	126 NotImplemented "Instruction LDUR not yet implemented."
	127 NotImplemented "Instruction CMP not yet implemented."
	128 Move X8, 0x59D000
	129 Move X8, [X8+2600]
	130 Move X0, [X8]
	131 Move W8, [X0+224]
	132 Compare W8, 0
	133 JumpIfNotEqual {135}
	134 Call 0x1C17DFC
	135 Move X8, 0x604000
	136 Move X8, [X8+3728]
	137 Move X1, X19
	138 Move X20, [X31+16]
	139 Move X19, [X31+24]
	140 Move X2, X31
	141 Move X0, [X8]
	142 Move X30, [X31+32]
	143 Move X21, [X31+40]
	144 Call Debug.LogWarning, X0, X1
	145 Return 
	146 Move X20, [X31+16]
	147 Move X19, [X31+24]
	148 Move X30, [X31+32]
	149 Move X21, [X31+40]
	150 Return 
	151 Call 0x1C17F20

Method: System.Void PreprocessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UpdatePhase updatePhase)

Disassembly:
	0x03B57074 LDP X20, X19, [X31 + 0x50]
	0x03B57078 LDP X22, X21, [X31 + 0x40]
	0x03B5707C LDP X24, X23, [X31 + 0x30]
	0x03B57080 LDP X26, X25, [X31 + 0x20]
	0x03B57084 LDP X28, X27, [X31 + 0x10]
	0x03B57088 LDR X30, [X31], #0x60
	0x03B5708C B 0x3B51214
	0x03B57090 STR X30, [X31 - 0x40]!
	0x03B57094 STP X24, X23, [X31 + 0x10]
	0x03B57098 STP X22, X21, [X31 + 0x20]
	0x03B5709C STP X20, X19, [X31 + 0x30]
	0x03B570A0 ADRP X21, 0x88B000
	0x03B570A4 LDRB W8, [X21 + 0x944]
	0x03B570A8 MOV X19, X1
	0x03B570AC MOV X20, X0
	0x03B570B0 TBNZ X8, 0x0, 0x3B570C8
	0x03B570B4 ADRP X0, 0x603000
	0x03B570B8 LDR X0, [X0 + 0xED0]
	0x03B570BC BL 0x1C16CF4
	0x03B570C0 MOVZ W8, 0x1
	0x03B570C4 STRB W8, [X21 + 0x944]
	0x03B570C8 ADRP X24, 0x603000
	0x03B570CC LDR X21, [X20 + 0x20]!
	0x03B570D0 LDR X24, [X24 + 0xED0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move W20, W1
	005 Move X19, X0
	006 Call XRRayInteractor.PreprocessInteractor, X0, X1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X1, [X19+816]
	009 Move X0, X19
	010 Call XRGazeInteractor.CanInteract, X0, X1
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfNotEqual {20}
	015 Move X1, [X19+816]
	016 Move X20, [X31+16]
	017 Move X19, [X31+24]
	018 Move X30, [X31+32]
	019 Return 
	020 Move X1, X31
	021 Move X8, [X19]
	022 Move X0, X19
	023 Move X20, [X31+16]
	024 Move X19, [X31+24]
	025 Move X3, [X8+2440]
	026 Move X2, [X8+2448]
	027 Move X30, [X31+32]
	028 CallNoReturn X3

Method: System.Void UpdateSnapVolumeInteractable(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B573F4 STP X22, X21, [X31 + 0x10]
	0x03B573F8 STP X20, X19, [X31 + 0x20]
	0x03B573FC ADRP X20, 0x88B000
	0x03B57400 ADRP X22, 0x59C000
	0x03B57404 LDRB W8, [X20 + 0x960]
	0x03B57408 LDR X22, [X22 + 0x598]
	0x03B5740C MOV X19, X0
	0x03B57410 TBNZ X8, 0x0, 0x3B57428
	0x03B57414 ADRP X0, 0x59C000
	0x03B57418 LDR X0, [X0 + 0x598]
	0x03B5741C BL 0x1C16CF4
	0x03B57420 MOVZ W8, 0x1
	0x03B57424 STRB W8, [X20 + 0x960]
	0x03B57428 LDR X0, [X22]
	0x03B5742C LDP X20, X21, [X19 + 0x38]
	0x03B57430 LDR W8, [X0 + 0xE0]
	0x03B57434 CBNZ W8, 0x3B5743C
	0x03B57438 BL 0x1C16DFC
	0x03B5743C MOV X0, X21
	0x03B57440 MOV X1, X20
	0x03B57444 MOV X2, X31
	0x03B57448 BL 0x3C3883C
	0x03B5744C TBNZ X0, 0x0, 0x3B574A8
	0x03B57450 MOV X0, X19
	0x03B57454 BL 0x3B583D4
	0x03B57458 LDR X0, [X22]
	0x03B5745C LDR X20, [X19 + 0x38]
	0x03B57460 LDR W8, [X0 + 0xE0]
	0x03B57464 CBNZ W8, 0x3B5746C
	0x03B57468 BL 0x1C16DFC
	0x03B5746C MOV X0, X20
	0x03B57470 MOV X1, X31
	0x03B57474 MOV X2, X31
	0x03B57478 BL 0x3C354F8
	0x03B5747C TBZ X0, 0x0, 0x3B574A8
	0x03B57480 LDR X0, [X19 + 0x38]
	0x03B57484 CBZ X0, 0x3B574B8
	0x03B57488 LDR X8, [X0]
	0x03B5748C MOV X1, X19
	0x03B57490 LDP X20, X19, [X31 + 0x20]
	0x03B57494 LDP X22, X21, [X31 + 0x10]
	0x03B57498 LDR X3, [X8 + 0x258]
	0x03B5749C LDR X2, [X8 + 0x260]
	0x03B574A0 LDR X30, [X31], #0x30
	0x03B574A4 BR X3
	0x03B574A8 LDP X20, X19, [X31 + 0x20]
	0x03B574AC LDP X22, X21, [X31 + 0x10]
	0x03B574B0 LDR X30, [X31], #0x30
	0x03B574B4 RET
	0x03B574B8 BL 0x1C16F20
	0x03B574BC LDR X0, [X0 + 0x48]
	0x03B574C0 RET
	0x03B574C4 STR X1, [X0 + 0x48]
	0x03B574C8 RET
	0x03B574CC LDR X0, [X0 + 0x50]
	0x03B574D0 RET
	0x03B574D4 STR X1, [X0 + 0x50]
	0x03B574D8 B 0x3B574DC
	0x03B574DC STR X30, [X31 - 0x60]!
	0x03B574E0 STP X28, X27, [X31 + 0x10]
	0x03B574E4 STP X26, X25, [X31 + 0x20]
	0x03B574E8 STP X24, X23, [X31 + 0x30]
	0x03B574EC STP X22, X21, [X31 + 0x40]
	0x03B574F0 STP X20, X19, [X31 + 0x50]
	0x03B574F4 ADRP X20, 0x88B000
	0x03B574F8 LDRB W8, [X20 + 0x94B]
	0x03B574FC MOV X19, X0
	0x03B57500 TBNZ X8, 0x0, 0x3B57560
	0x03B57504 ADRP X0, 0x603000
	0x03B57508 LDR X0, [X0 + 0xEE0]
	0x03B5750C BL 0x1C16CF4
	0x03B57510 ADRP X0, 0x603000
	0x03B57514 LDR X0, [X0 + 0xEE8]
	0x03B57518 BL 0x1C16CF4
	0x03B5751C ADRP X0, 0x603000
	0x03B57520 LDR X0, [X0 + 0xEF0]
	0x03B57524 BL 0x1C16CF4
	0x03B57528 ADRP X0, 0x603000
	0x03B5752C LDR X0, [X0 + 0xEF8]
	0x03B57530 BL 0x1C16CF4
	0x03B57534 ADRP X0, 0x603000
	0x03B57538 LDR X0, [X0 + 0xF00]
	0x03B5753C BL 0x1C16CF4
	0x03B57540 ADRP X0, 0x603000
	0x03B57544 LDR X0, [X0 + 0xF08]
	0x03B57548 BL 0x1C16CF4
	0x03B5754C ADRP X0, 0x603000
	0x03B57550 LDR X0, [X0 + 0xF10]
	0x03B57554 BL 0x1C16CF4
	0x03B57558 MOVZ W8, 0x1
	0x03B5755C STRB W8, [X20 + 0x94B]
	0x03B57560 LDR X0, [X19 + 0x58]
	0x03B57564 CBZ X0, 0x3B57648
	0x03B57568 LDR W8, [X0 + 0x18]
	0x03B5756C SUBS W20, W8, 0x1
	0x03B57570 B.MI 0x3B5764C
	0x03B57574 ADRP X24, 0x603000
	0x03B57578 ADRP X25, 0x603000
	0x03B5757C ADRP X26, 0x603000
	0x03B57580 ADRP X27, 0x603000
	0x03B57584 ADRP X28, 0x603000
	0x03B57588 LDR X24, [X24 + 0xF10]
	0x03B5758C LDR X25, [X25 + 0xEE0]
	0x03B57590 LDR X26, [X26 + 0xF08]
	0x03B57594 LDR X27, [X27 + 0xEF0]
	0x03B57598 LDR X28, [X28 + 0xEE8]
	0x03B5759C LDR X2, [X24]
	0x03B575A0 MOV W1, W20
	0x03B575A4 BL 0x301BCCC
	0x03B575A8 CBZ X0, 0x3B57648
	0x03B575AC MOV X21, X0
	0x03B575B0 LDR X0, [X19 + 0x50]
	0x03B575B4 CBZ X0, 0x3B57648
	0x03B575B8 LDR X1, [X21 + 0x10]
	0x03B575BC LDR X2, [X25]
	0x03B575C0 BL 0x301C318
	0x03B575C4 TBZ X0, 0x0, 0x3B57624
	0x03B575C8 LDR X21, [X21 + 0x18]
	0x03B575CC CBZ X21, 0x3B57648
	0x03B575D0 LDR W8, [X21 + 0x18]
	0x03B575D4 SUBS W22, W8, 0x1
	0x03B575D8 B.MI 0x3B57638
	0x03B575DC LDR X2, [X26]
	0x03B575E0 LDR X23, [X19 + 0x50]
	0x03B575E4 MOV X0, X21
	0x03B575E8 MOV W1, W22
	0x03B575EC BL 0x301BCCC
	0x03B575F0 CBZ X23, 0x3B57648
	0x03B575F4 LDR X2, [X25]
	0x03B575F8 MOV X1, X0
	0x03B575FC MOV X0, X23
	0x03B57600 BL 0x301C318
	0x03B57604 TBNZ X0, 0x0, 0x3B57618
	0x03B57608 LDR X2, [X27]
	0x03B5760C MOV X0, X21
	0x03B57610 MOV W1, W22
	0x03B57614 BL 0x301DA48
	0x03B57618 SUBS W22, W22, 0x1
	0x03B5761C B.PL 0x3B575DC
	0x03B57620 B 0x3B57638
	0x03B57624 LDR X0, [X19 + 0x58]
	0x03B57628 CBZ X0, 0x3B57648
	0x03B5762C LDR X2, [X28]
	0x03B57630 MOV W1, W20
	0x03B57634 BL 0x301DA48
	0x03B57638 SUBS W20, W20, 0x1
	0x03B5763C B.MI 0x3B5764C
	0x03B57640 LDR X0, [X19 + 0x58]
	0x03B57644 CBNZ X0, 0x3B5759C
	0x03B57648 BL 0x1C16F20
	0x03B5764C LDP X20, X19, [X31 + 0x50]
	0x03B57650 LDP X22, X21, [X31 + 0x40]
	0x03B57654 LDP X24, X23, [X31 + 0x30]
	0x03B57658 LDP X26, X25, [X31 + 0x20]
	0x03B5765C LDP X28, X27, [X31 + 0x10]
	0x03B57660 LDR X30, [X31], #0x60
	0x03B57664 RET
	0x03B57668 LDR X0, [X0 + 0x60]
	0x03B5766C RET
	0x03B57670 STR X1, [X0 + 0x60]
	0x03B57674 RET
	0x03B57678 LDR X0, [X0 + 0x68]
	0x03B5767C RET
	0x03B57680 STR X1, [X0 + 0x68]
	0x03B57684 RET
	0x03B57688 LDR X0, [X0 + 0x70]
	0x03B5768C RET
	0x03B57690 STR X1, [X0 + 0x70]
	0x03B57694 RET
	0x03B57698 STP X30, X21, [X31 - 0x20]!
	0x03B5769C STP X20, X19, [X31 + 0x10]
	0x03B576A0 ADRP X21, 0x88B000
	0x03B576A4 ADRP X20, 0x59C000
	0x03B576A8 LDRB W8, [X21 + 0x949]
	0x03B576AC LDR X20, [X20 + 0x598]
	0x03B576B0 MOV X19, X0
	0x03B576B4 TBNZ X8, 0x0, 0x3B576CC
	0x03B576B8 ADRP X0, 0x59C000
	0x03B576BC LDR X0, [X0 + 0x598]
	0x03B576C0 BL 0x1C16CF4
	0x03B576C4 MOVZ W8, 0x1
	0x03B576C8 STRB W8, [X21 + 0x949]
	0x03B576CC LDR X0, [X20]
	0x03B576D0 LDR X19, [X19 + 0x40]
	0x03B576D4 LDR W8, [X0 + 0xE0]
	0x03B576D8 CBNZ W8, 0x3B576E0
	0x03B576DC BL 0x1C16DFC
	0x03B576E0 MOV X0, X19
	0x03B576E4 LDP X20, X19, [X31 + 0x10]
	0x03B576E8 MOV X1, X31
	0x03B576EC MOV X2, X31
	0x03B576F0 LDP X30, X21, [X31], #0x20
	0x03B576F4 B 0x3C354F8
	0x03B576F8 LDRB W0, [X0 + 0x78]
	0x03B576FC RET
	0x03B57700 AND W8, W1, 0x1
	0x03B57704 STRB W8, [X0 + 0x78]
	0x03B57708 RET
	0x03B5770C RET
	0x03B57710 SUB X31, X31, 0xC0
	0x03B57714 STR X30, [X31 + 0x60]
	0x03B57718 STP X28, X27, [X31 + 0x70]
	0x03B5771C STP X26, X25, [X31 + 0x80]
	0x03B57720 STP X24, X23, [X31 + 0x90]
	0x03B57724 STP X22, X21, [X31 + 0xA0]
	0x03B57728 STP X20, X19, [X31 + 0xB0]
	0x03B5772C ADRP X20, 0x88B000
	0x03B57730 LDRB W8, [X20 + 0x94A]
	0x03B57734 MOV X19, X0
	0x03B57738 TBNZ X8, 0x0, 0x3B577C8
	0x03B5773C ADRP X0, 0x603000
	0x03B57740 LDR X0, [X0 + 0xF18]
	0x03B57744 BL 0x1C16CF4
	0x03B57748 ADRP X0, 0x603000
	0x03B5774C LDR X0, [X0 + 0xF20]
	0x03B57750 BL 0x1C16CF4
	0x03B57754 ADRP X0, 0x5A3000
	0x03B57758 LDR X0, [X0 + 0x800]
	0x03B5775C BL 0x1C16CF4
	0x03B57760 ADRP X0, 0x603000
	0x03B57764 LDR X0, [X0 + 0xF28]
	0x03B57768 BL 0x1C16CF4
	0x03B5776C ADRP X0, 0x5A3000
	0x03B57770 LDR X0, [X0 + 0x808]
	0x03B57774 BL 0x1C16CF4
	0x03B57778 ADRP X0, 0x5A3000
	0x03B5777C LDR X0, [X0 + 0x810]
	0x03B57780 BL 0x1C16CF4
	0x03B57784 ADRP X0, 0x603000
	0x03B57788 LDR X0, [X0 + 0xF30]
	0x03B5778C BL 0x1C16CF4
	0x03B57790 ADRP X0, 0x603000
	0x03B57794 LDR X0, [X0 + 0x920]
	0x03B57798 BL 0x1C16CF4
	0x03B5779C ADRP X0, 0x603000
	0x03B577A0 LDR X0, [X0 + 0xF38]
	0x03B577A4 BL 0x1C16CF4
	0x03B577A8 ADRP X0, 0x5A3000
	0x03B577AC LDR X0, [X0 + 0x820]
	0x03B577B0 BL 0x1C16CF4
	0x03B577B4 ADRP X0, 0x59C000
	0x03B577B8 LDR X0, [X0 + 0x598]
	0x03B577BC BL 0x1C16CF4
	0x03B577C0 MOVZ W8, 0x1
	0x03B577C4 STRB W8, [X20 + 0x94A]
	0x03B577C8 MOV X0, X19
	0x03B577CC STP X31, X31, [X31 + 0x40]
	0x03B577D0 STR X31, [X31 + 0x50]
	0x03B577D4 STP X31, X31, [X31 + 0x20]
	0x03B577D8 STR X31, [X31 + 0x30]
	0x03B577DC BL 0x3B57CB0
	0x03B577E0 MOV X0, X19
	0x03B577E4 BL 0x3B573F0
	0x03B577E8 LDR X0, [X19 + 0x80]
	0x03B577EC CBZ X0, 0x3B57B98
	0x03B577F0 ADRP X8, 0x603000
	0x03B577F4 LDR X8, [X8 + 0xF18]
	0x03B577F8 ADRP X23, 0x5A3000
	0x03B577FC ADRP X24, 0x5A3000
	0x03B57800 LDR X23, [X23 + 0x820]
	0x03B57804 LDR X24, [X24 + 0x808]
	0x03B57808 LDR X1, [X8]
	0x03B5780C ADRP X25, 0x59C000
	0x03B57810 ADRP X26, 0x603000
	0x03B57814 ADRP X22, 0x5A3000
	0x03B57818 LDR X25, [X25 + 0x598]
	0x03B5781C LDR X26, [X26 + 0x920]
	0x03B57820 LDR X22, [X22 + 0x800]
	0x03B57824 BL 0x28B9738
	0x03B57828 CMP W0, 0x1
	0x03B5782C B.LT 0x3B578F8
	0x03B57830 LDR X0, [X19 + 0x50]
	0x03B57834 CBZ X0, 0x3B57B98

ISIL:
	001 Subtract X31, X31, 208
	002 Move [X31+96], D15
	003 Move [X31+104], D14
	004 Move [X31+112], D13
	005 Move [X31+120], D12
	006 Move [X31+128], D11
	007 Move [X31+136], D10
	008 Move [X31+144], D9
	009 Move [X31+152], D8
	010 Move [X31+160], X30
	011 Move [X31+176], X22
	012 Move [X31+184], X21
	013 Move [X31+192], X20
	014 Move [X31+200], X19
	015 Move X21, 0x88C000
	016 Move X22, 0x59D000
	017 Move W8, [X21+2366]
	018 Move X22, [X22+1432]
	019 Move X20, X1
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {42}
	025 Move X0, 0x604000
	026 Move X0, [X0+2328]
	027 Call 0x1C17CF4
	028 Move X0, 0x604000
	029 Move X0, [X0+2264]
	030 Call 0x1C17CF4
	031 Move X0, 0x59D000
	032 Move X0, [X0+1432]
	033 Call 0x1C17CF4
	034 Move X0, 0x5A3000
	035 Move X0, [X0+200]
	036 Call 0x1C17CF4
	037 Move X0, 0x604000
	038 Move X0, [X0+1080]
	039 Call 0x1C17CF4
	040 Move W8, 1
	041 Move [X21+2366], W8
	042 Move X0, [X22]
	043 Move [X31+88], W31
	044 Move [X31+72], X31
	045 Move [X31+80], X31
	046 Move [X31+56], X31
	047 Move [X31+64], X31
	048 Move [X31+48], W31
	049 Move [X31+40], X31
	050 Move [X31+172], W31
	051 Move [X31+168], W31
	052 Move W8, [X0+224]
	053 Move X21, [X19+1168]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X21
	058 Move X1, X31
	059 Move X2, X31
	060 Call Object.op_Equality, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfEqual {243}
	065 Move X21, 0x882000
	066 Move W8, [X21+1923]
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x59D000
	070 Move X0, [X0+1440]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X21+1923], W8
	074 Move X8, 0x59D000
	075 Move X8, [X8+1440]
	076 Move V8, [X19+1164]
	077 Move S0, W31
	078 Move [X31+12], S0
	079 Move X8, [X8]
	080 Move X8, [X8+184]
	081 Move S9, [X8]
	082 Move S10, [X8+4]
	083 Move V12, [X8+8]
	084 Compare X20, 0
	085 JumpIfEqual {131}
	086 Move X8, 0x604000
	087 Move X8, [X8+1080]
	088 Move X9, [X20]
	089 Move X8, [X8]
	090 Move W11, [X9+304]
	091 Move W10, [X8+304]
	092 NotImplemented "Instruction CMP not yet implemented."
	093 Move X9, [X9+200]
	094 Add X9, X9, X10
	095 NotImplemented "Instruction LDUR not yet implemented."
	096 NotImplemented "Instruction CMP not yet implemented."
	097 Move X0, [X22]
	098 Move W8, [X0+224]
	099 Compare W8, 0
	100 JumpIfNotEqual {102}
	101 Call 0x1C17DFC
	102 Move X0, X20
	103 Move X1, X31
	104 Move X2, X31
	105 Call Object.op_Inequality, X0, X1
	106 Move TEMP, X0
	107 And TEMP, TEMP, 1
	108 Compare TEMP, 1
	109 JumpIfNotEqual {129}
	110 Move W8, [X20+120]
	111 Compare W8, 0
	112 JumpIfEqual {129}
	113 Move X10, 0x604000
	114 Move X8, [X20]
	115 Move X10, [X10+2264]
	116 NotImplemented "Instruction LDRH not yet implemented."
	117 Move X1, [X10]
	118 Compare X9, 0
	119 JumpIfEqual {126}
	120 Move X10, [X8+176]
	121 Add X10, X10, 8
	122 NotImplemented "Instruction LDUR not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Subtract X9, X9, 1
	125 Add X10, X10, 16
	126 Move W2, 6
	127 Move X0, X20
	128 Call 0x1C5D788
	129 Move X21, X31
	130 Move X20, X31
	131 Move X21, X31
	132 Move W8, [X19+1176]
	133 Compare W8, 0
	134 JumpIfEqual {180}
	135 Move X0, X19
	136 Move X1, X31
	137 Call Component.get_transform, X0
	138 Compare X0, 0
	139 JumpIfEqual {310}
	140 Move X1, X31
	141 Call Transform.get_position, X0
	142 Move X22, 0x882000
	143 Move W8, [X22+2140]
	144 Move V13, V0
	145 Move V14, V1
	146 Move V15, V2
	147 Compare W8, 0
	148 JumpIfNotEqual {154}
	149 Move X0, 0x59D000
	150 Move X0, [X0+1448]
	151 Call 0x1C17CF4
	152 Move W8, 1
	153 Move [X22+2140], W8
	154 Move X8, 0x59D000
	155 Move X8, [X8+1448]
	156 Subtract S11, S13, S9
	157 Subtract S14, S14, S10
	158 Subtract S13, S15, S12
	159 Move X0, [X8]
	160 Move W8, [X0+224]
	161 Compare W8, 0
	162 JumpIfNotEqual {164}
	163 Call 0x1C17DFC
	164 Multiply S0, S11, S11
	165 Multiply S1, S14, S14
	166 Move W8, [X19+1177]
	167 Add S0, S0, S1
	168 Multiply S1, S13, S13
	169 Add S0, S1, S0
	170 NotImplemented "Instruction FSQRT not yet implemented."
	171 Multiply S0, S8, S0
	172 Compare W8, 0
	173 JumpIfEqual {179}
	174 NotImplemented "Instruction FCMP not yet implemented."
	175 Move S8, W31
	176 Move V1, [X19+1180]
	177 NotImplemented "Instruction FCMP not yet implemented."
	178 NotImplemented "Instruction FCSEL not yet implemented."
	179 Move V8, V0
	180 Move X0, [X19+1168]
	181 Compare X0, 0
	182 JumpIfEqual {310}
	183 Move X1, X31
	184 Call Component.get_transform, X0
	185 Compare X0, 0
	186 JumpIfEqual {310}
	187 Move V0, V9
	188 Move V1, V10
	189 Move V2, V12
	190 Move X1, X31
	191 Move X22, X0
	192 Call Transform.set_position, X0, X1
	193 Move X0, X22
	194 Move V0, V8
	195 Move V1, V8
	196 Move V2, V8
	197 Move X1, X31
	198 Call Transform.set_localScale, X0, X1
	199 Move X8, [X19+1168]
	200 Compare X8, 0
	201 JumpIfEqual {310}
	202 Move X0, [X8+48]
	203 Compare X0, 0
	204 JumpIfEqual {233}
	205 Move X9, 0x5A3000
	206 Move X9, [X9+200]
	207 Move X8, [X0]
	208 Move X10, [X9]
	209 Move W9, [X8+304]
	210 Move W11, [X10+304]
	211 NotImplemented "Instruction CMP not yet implemented."
	212 Move X12, [X8+200]
	213 Add X11, X12, X11
	214 NotImplemented "Instruction LDUR not yet implemented."
	215 NotImplemented "Instruction CMP not yet implemented."
	216 Move X10, 0x604000
	217 Move X10, [X10+2328]
	218 Move X10, [X10]
	219 Move W11, [X10+304]
	220 NotImplemented "Instruction CMP not yet implemented."
	221 Move X8, [X8+200]
	222 Add X8, X8, X11
	223 NotImplemented "Instruction LDUR not yet implemented."
	224 NotImplemented "Instruction CMP not yet implemented."
	225 Move V0, [X31+12]
	226 Move X1, X31
	227 Move V1, V0
	228 Move V2, V0
	229 Call BoxCollider.set_size, X0, X1
	230 Move V0, [X31+12]
	231 Move X1, X31
	232 Call SphereCollider.set_radius, X0, V0
	233 Move X0, [X19+1168]
	234 Compare X0, 0
	235 JumpIfEqual {310}
	236 Move X1, X20
	237 Move X2, X31
	238 Call XRInteractableSnapVolume.set_interactable, X0, X1
	239 Move X8, [X19+1168]
	240 Compare X8, 0
	241 JumpIfEqual {310}
	242 Move [X8+64], X21
	243 Move X20, [X31+192]
	244 Move X19, [X31+200]
	245 Move X22, [X31+176]
	246 Move X21, [X31+184]
	247 Move X30, [X31+160]
	248 Move D9, [X31+144]
	249 Move D8, [X31+152]
	250 Move D11, [X31+128]
	251 Move D10, [X31+136]
	252 Move D13, [X31+112]
	253 Move D12, [X31+120]
	254 Move D15, [X31+96]
	255 Move D14, [X31+104]
	256 Add X31, X31, 208
	257 Return 
	258 Move W9, [X10]
	259 Add W9, W9, 6
	260 Add X8, X8, W9
	261 Add X0, X8, 312
	262 Move X8, [X0]
	263 Move X1, [X0+8]
	264 Move X0, X20
	265 NotImplemented "Instruction BLR not yet implemented."
	266 Compare X0, 0
	267 JumpIfEqual {310}
	268 Move X1, X31
	269 Call Transform.get_position, X0
	270 Add X1, X31, 80
	271 Add X2, X31, 40
	272 Add X3, X31, 172
	273 Add X4, X31, 168
	274 Move X0, X19
	275 Move V9, V0
	276 Move V10, V1
	277 Move V12, V2
	278 Call XRRayInteractor.TryGetHitInfo, X0, X1, X2, X3, X4
	279 Move TEMP, X0
	280 And TEMP, TEMP, 1
	281 Compare TEMP, 1
	282 JumpIfNotEqual {305}
	283 Move S0, [X31+80]
	284 Move S1, [X31+84]
	285 Move V2, [X31+88]
	286 Add X1, X31, 56
	287 Move X0, X20
	288 Move X2, X31
	289 Call XRInteractableUtility.TryGetClosestCollider, X0, X1, X2
	290 Move X21, X31
	291 Move TEMP, X0
	292 And TEMP, TEMP, 1
	293 Compare TEMP, 1
	294 JumpIfNotEqual {306}
	295 Move X21, [X31+72]
	296 Compare X21, 0
	297 JumpIfEqual {310}
	298 Add X8, X31, 16
	299 Move X0, X21
	300 Move X1, X31
	301 Call Collider.get_bounds, X0
	302 Move S9, [X31+16]
	303 Move S10, [X31+20]
	304 Move V12, [X31+24]
	305 Move X21, X31
	306 Move X0, X19
	307 Move X1, X21
	308 Call XRGazeInteractor.CalculateSnapColliderSize, X0, X1
	309 Move [X31+12], S0
	310 Call 0x1C17F20

Method: System.Single CalculateSnapColliderSize(UnityEngine.Collider interactableCollider)

Disassembly:
	0x03B57AF8 B 0x3B57AFC
	0x03B57AFC CMP W1, 0x1
	0x03B57B00 B.NE 0x3B57B60
	0x03B57B04 BL 0x3EB1AD0
	0x03B57B08 LDR X20, [X0]
	0x03B57B0C BL 0x3EB1AE0
	0x03B57B10 MOV W21, W31
	0x03B57B14 B 0x3B57ACC
	0x03B57B18 LDR X1, [X27]
	0x03B57B1C ADD X0, X31, 0x20
	0x03B57B20 BL 0x2BC434C
	0x03B57B24 MOVZ W8, 0x1
	0x03B57B28 STRB W8, [X19 + 0x78]
	0x03B57B2C LDP X20, X19, [X31 + 0xB0]
	0x03B57B30 LDP X22, X21, [X31 + 0xA0]
	0x03B57B34 LDP X24, X23, [X31 + 0x90]
	0x03B57B38 LDP X26, X25, [X31 + 0x80]
	0x03B57B3C LDP X28, X27, [X31 + 0x70]
	0x03B57B40 LDR X30, [X31 + 0x60]
	0x03B57B44 ADD X31, X31, 0xC0
	0x03B57B48 RET
	0x03B57B4C LDR X1, [X27]
	0x03B57B50 ADD X0, X31, 0x20
	0x03B57B54 BL 0x2BC434C
	0x03B57B58 B 0x3B57B2C
	0x03B57B5C BL 0x1C16F20
	0x03B57B60 STR X1, [X31 + 0x68]
	0x03B57B64 MOV X21, X0
	0x03B57B68 MOV X20, X31
	0x03B57B6C LDR X1, [X22]
	0x03B57B70 ADD X0, X31, 0x40
	0x03B57B74 BL 0x2BC434C
	0x03B57B78 LDR X1, [X31 + 0x68]
	0x03B57B7C MOV X0, X21
	0x03B57B80 CBZ X20, 0x3B57C50
	0x03B57B84 MOV X0, X20
	0x03B57B88 BL 0x1C16F18
	0x03B57B8C BL 0x1C16F20
	0x03B57B90 MOV X0, X20
	0x03B57B94 BL 0x1C16F18
	0x03B57B98 BL 0x1C16F20
	0x03B57B9C MOV X20, X31
	0x03B57BA0 B 0x3B57BA8
	0x03B57BA4 STR X0, [X31 + 0x68]
	0x03B57BA8 LDR X1, [X22]
	0x03B57BAC ADD X0, X31, 0x40
	0x03B57BB0 BL 0x2BC434C
	0x03B57BB4 CBZ X20, 0x3B57C9C
	0x03B57BB8 MOV X0, X20
	0x03B57BBC BL 0x1C16F18
	0x03B57BC0 MOV X21, X0
	0x03B57BC4 STR X1, [X31 + 0x68]

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], D8
	003 Move [X31+48], X30
	004 Move [X31+56], X21
	005 Move [X31+64], X20
	006 Move [X31+72], X19
	007 Move X21, 0x88C000
	008 Move W8, [X21+2367]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x59D000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2367], W8
	020 Move W8, [X20+1156]
	021 Move S8, W31
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Compare W8, 0
	024 JumpIfNotEqual {56}
	025 Move V8, [X20+1160]
	026 Move X8, 0x59D000
	027 Move X8, [X8+1432]
	028 Move X0, [X8]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X19
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {56}
	041 Compare X19, 0
	042 JumpIfEqual {64}
	043 Add X8, X31, 8
	044 Move X0, X19
	045 Move X1, X31
	046 Call Collider.get_bounds, X0
	047 Move S0, [X31+20]
	048 Move S1, [X31+24]
	049 Move V2, [X31+28]
	050 Move X0, X31
	051 Add S0, S0, S0
	052 Add S1, S1, S1
	053 Add S2, S2, S2
	054 Call Vector3Extensions.MaxComponent, X0
	055 Move V8, V0
	056 Move V0, V8
	057 Move X20, [X31+64]
	058 Move X19, [X31+72]
	059 Move X30, [X31+48]
	060 Move X21, [X31+56]
	061 Move V8, [X31+32]
	062 Add X31, X31, 80
	063 Return V0
	064 Call 0x1C17F20

Method: System.Boolean CanInteract(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B57318 MOV X0, X20
	0x03B5731C MOV X2, X21
	0x03B57320 BL 0x1C24138
	0x03B57324 CMP X21, X0
	0x03B57328 MOV X21, X0
	0x03B5732C B.NE 0x3B572E4
	0x03B57330 LDP X20, X19, [X31 + 0x30]
	0x03B57334 LDP X22, X21, [X31 + 0x20]
	0x03B57338 LDP X24, X23, [X31 + 0x10]
	0x03B5733C LDR X30, [X31], #0x40
	0x03B57340 RET
	0x03B57344 MOV X0, X22
	0x03B57348 MOV X1, X23
	0x03B5734C BL 0x1C171E0
	0x03B57350 LDR X0, [X0 + 0x30]
	0x03B57354 RET
	0x03B57358 LDR X0, [X0 + 0x38]
	0x03B5735C RET
	0x03B57360 STR X30, [X31 - 0x30]!
	0x03B57364 STP X22, X21, [X31 + 0x10]
	0x03B57368 STP X20, X19, [X31 + 0x20]
	0x03B5736C ADRP X22, 0x88B000
	0x03B57370 ADRP X21, 0x59C000
	0x03B57374 LDRB W8, [X22 + 0x948]
	0x03B57378 LDR X21, [X21 + 0x970]
	0x03B5737C MOV X20, X1
	0x03B57380 MOV X19, X0
	0x03B57384 TBNZ X8, 0x0, 0x3B5739C
	0x03B57388 ADRP X0, 0x59C000
	0x03B5738C LDR X0, [X0 + 0x970]
	0x03B57390 BL 0x1C16CF4
	0x03B57394 MOVZ W8, 0x1
	0x03B57398 STRB W8, [X22 + 0x948]
	0x03B5739C STR X20, [X19 + 0x38]
	0x03B573A0 LDR X0, [X21]
	0x03B573A4 LDR W8, [X0 + 0xE0]
	0x03B573A8 CBNZ W8, 0x3B573B0
	0x03B573AC BL 0x1C16DFC
	0x03B573B0 MOV X0, X31
	0x03B573B4 BL 0x3C018E4
	0x03B573B8 TBZ X0, 0x0, 0x3B573E0
	0x03B573BC MOV X0, X19
	0x03B573C0 MOV X1, X31
	0x03B573C4 BL 0x3C32454
	0x03B573C8 TBZ X0, 0x0, 0x3B573E0
	0x03B573CC MOV X0, X19
	0x03B573D0 LDP X20, X19, [X31 + 0x20]
	0x03B573D4 LDP X22, X21, [X31 + 0x10]
	0x03B573D8 LDR X30, [X31], #0x30
	0x03B573DC B 0x3B573F0
	0x03B573E0 LDP X20, X19, [X31 + 0x20]
	0x03B573E4 LDP X22, X21, [X31 + 0x10]
	0x03B573E8 LDR X30, [X31], #0x30
	0x03B573EC RET
	0x03B573F0 STR X30, [X31 - 0x30]!

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x88C000
	007 Move X22, 0x604000
	008 Move W8, [X21+2368]
	009 Move X22, [X22+328]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x604000
	017 Move X0, [X0+328]
	018 Call 0x1C17CF4
	019 Move X0, 0x604000
	020 Move X0, [X0+352]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+2368], W8
	024 Move X1, [X22]
	025 Move X0, X20
	026 Call 0x1C17E00
	027 Compare X0, 0
	028 JumpIfEqual {43}
	029 Move X2, X0
	030 Move X0, [X19+48]
	031 Compare X0, 0
	032 JumpIfEqual {70}
	033 Move X8, [X0]
	034 Move X1, X19
	035 Move X9, [X8+552]
	036 Move X3, [X8+560]
	037 NotImplemented "Instruction BLR not yet implemented."
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {43}
	042 Move W0, 1
	043 Move X8, 0x604000
	044 Move X8, [X8+352]
	045 Move X0, X20
	046 Move X1, [X8]
	047 Call 0x1C17E00
	048 Compare X0, 0
	049 JumpIfEqual {64}
	050 Move X2, X0
	051 Move X0, [X19+48]
	052 Compare X0, 0
	053 JumpIfEqual {70}
	054 Move X8, [X0]
	055 Move X1, X19
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X4, [X8+568]
	061 Move X3, [X8+576]
	062 Move X30, [X31+48]
	063 CallNoReturn X4
	064 Move X20, [X31+32]
	065 Move X19, [X31+40]
	066 Move X22, [X31+16]
	067 Move X21, [X31+24]
	068 Move X30, [X31+48]
	069 Return X0
	070 Call 0x1C17F20

Method: System.Single GetHoverTimeToSelect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B57BC8 B 0x3B57B6C
	0x03B57BCC B 0x3B57BF0
	0x03B57BD0 B 0x3B57BF0
	0x03B57BD4 B 0x3B57BF0
	0x03B57BD8 B 0x3B57C50
	0x03B57BDC B 0x3B57C50
	0x03B57BE0 B 0x3B57C50
	0x03B57BE4 B 0x3B57C50
	0x03B57BE8 B 0x3B57C50
	0x03B57BEC B 0x3B57BF0
	0x03B57BF0 CMP W1, 0x1
	0x03B57BF4 STR X0, [X31 + 0x68]
	0x03B57BF8 B.NE 0x3B57C20
	0x03B57BFC LDR X0, [X31 + 0x68]
	0x03B57C00 BL 0x3EB1AD0
	0x03B57C04 LDR X20, [X0]
	0x03B57C08 BL 0x3EB1AE0
	0x03B57C0C LDR X1, [X22]
	0x03B57C10 ADD X0, X31, 0x40
	0x03B57C14 BL 0x2BC434C
	0x03B57C18 CBZ X20, 0x3B57980
	0x03B57C1C B 0x3B57C74
	0x03B57C20 MOV X20, X31
	0x03B57C24 B 0x3B57C2C
	0x03B57C28 STR X0, [X31 + 0x68]
	0x03B57C2C LDR X1, [X22]
	0x03B57C30 ADD X0, X31, 0x40
	0x03B57C34 BL 0x2BC434C
	0x03B57C38 CBZ X20, 0x3B57C9C
	0x03B57C3C MOV X0, X20
	0x03B57C40 BL 0x1C16F18
	0x03B57C44 B 0x3B57C50
	0x03B57C48 B 0x3B57C50
	0x03B57C4C B 0x3B57C50
	0x03B57C50 CMP W1, 0x1
	0x03B57C54 B.NE 0x3B57C7C
	0x03B57C58 BL 0x3EB1AD0
	0x03B57C5C LDR X20, [X0]
	0x03B57C60 BL 0x3EB1AE0
	0x03B57C64 LDR X1, [X27]
	0x03B57C68 ADD X0, X31, 0x20
	0x03B57C6C BL 0x2BC434C
	0x03B57C70 CBZ X20, 0x3B57B24
	0x03B57C74 MOV X0, X20
	0x03B57C78 BL 0x1C16F18
	0x03B57C7C STR X0, [X31 + 0x68]
	0x03B57C80 MOV X20, X31
	0x03B57C84 B 0x3B57C8C
	0x03B57C88 STR X0, [X31 + 0x68]
	0x03B57C8C LDR X1, [X27]
	0x03B57C90 ADD X0, X31, 0x20
	0x03B57C94 BL 0x2BC434C
	0x03B57C98 CBNZ X20, 0x3B57CA4
	0x03B57C9C LDR X0, [X31 + 0x68]
	0x03B57CA0 BL 0x1D2C690
	0x03B57CA4 MOV X0, X20
	0x03B57CA8 BL 0x1C16F18
	0x03B57CAC BL 0x1990590
	0x03B57CB0 STP X30, X21, [X31 - 0x20]!
	0x03B57CB4 STP X20, X19, [X31 + 0x10]
	0x03B57CB8 ADRP X21, 0x88B000
	0x03B57CBC ADRP X20, 0x59C000
	0x03B57CC0 LDRB W8, [X21 + 0x95F]
	0x03B57CC4 LDR X20, [X20 + 0x598]
	0x03B57CC8 MOV X19, X0
	0x03B57CCC TBNZ X8, 0x0, 0x3B57CF0
	0x03B57CD0 ADRP X0, 0x603000
	0x03B57CD4 LDR X0, [X0 + 0x2E8]
	0x03B57CD8 BL 0x1C16CF4
	0x03B57CDC ADRP X0, 0x59C000
	0x03B57CE0 LDR X0, [X0 + 0x598]
	0x03B57CE4 BL 0x1C16CF4
	0x03B57CE8 MOVZ W8, 0x1
	0x03B57CEC STRB W8, [X21 + 0x95F]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x88C000
	007 Move X21, 0x604000
	008 Move W8, [X22+2369]
	009 Move X21, [X21+3760]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x604000
	017 Move X0, [X0+3760]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2369], W8
	021 Move X1, [X21]
	022 Move X0, X19
	023 Call 0x1C17E00
	024 Compare X0, 0
	025 JumpIfEqual {66}
	026 Move X8, [X0]
	027 Move X1, [X21]
	028 Move X19, X0
	029 NotImplemented "Instruction LDRH not yet implemented."
	030 Compare X9, 0
	031 JumpIfEqual {38}
	032 Move X10, [X8+176]
	033 Add X10, X10, 8
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Subtract X9, X9, 1
	037 Add X10, X10, 16
	038 Move X0, X19
	039 Move W2, W31
	040 Call 0x1C5D788
	041 NotImplemented "Instruction LDRSW not yet implemented."
	042 Add X8, X8, X9
	043 Add X0, X8, 312
	044 Move X8, [X0]
	045 Move X1, [X0+8]
	046 Move X0, X19
	047 NotImplemented "Instruction BLR not yet implemented."
	048 Move TEMP, X0
	049 And TEMP, TEMP, 1
	050 Compare TEMP, 1
	051 JumpIfNotEqual {66}
	052 Move X8, [X19]
	053 Move X1, [X21]
	054 NotImplemented "Instruction LDRH not yet implemented."
	055 Compare X9, 0
	056 JumpIfEqual {63}
	057 Move X10, [X8+176]
	058 Add X10, X10, 8
	059 NotImplemented "Instruction LDUR not yet implemented."
	060 NotImplemented "Instruction CMP not yet implemented."
	061 Subtract X9, X9, 1
	062 Add X10, X10, 16
	063 Move W2, 1
	064 Move X0, X19
	065 Call 0x1C5D788
	066 Move V0, [X20+752]
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return V0
	073 Move W9, [X10]
	074 Add W9, W9, 1
	075 Add X8, X8, W9
	076 Add X0, X8, 312
	077 Move X2, [X0]
	078 Move X1, [X0+8]
	079 Move X0, X19
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X22, [X31+16]
	083 Move X21, [X31+24]
	084 Move X30, [X31+48]
	085 CallNoReturn X2

Method: System.Single GetTimeToAutoDeselect(UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable)

Disassembly:
	0x03B57CF0 LDR X0, [X20]
	0x03B57CF4 LDR X20, [X19 + 0x38]
	0x03B57CF8 LDR W8, [X0 + 0xE0]
	0x03B57CFC CBNZ W8, 0x3B57D04
	0x03B57D00 BL 0x1C16DFC
	0x03B57D04 MOV X0, X20
	0x03B57D08 MOV X1, X31
	0x03B57D0C MOV X2, X31
	0x03B57D10 BL 0x3C354F8
	0x03B57D14 TBNZ X0, 0x0, 0x3B57D2C
	0x03B57D18 ADRP X8, 0x603000
	0x03B57D1C LDR X8, [X8 + 0x2E8]
	0x03B57D20 LDR X0, [X8]
	0x03B57D24 BL 0x295F6C8
	0x03B57D28 STR X0, [X19 + 0x38]
	0x03B57D2C LDP X20, X19, [X31 + 0x10]
	0x03B57D30 LDP X30, X21, [X31], #0x20
	0x03B57D34 RET
	0x03B57D38 STR X30, [X31 - 0x30]!
	0x03B57D3C STP X22, X21, [X31 + 0x10]
	0x03B57D40 STP X20, X19, [X31 + 0x20]
	0x03B57D44 ADRP X22, 0x88B000
	0x03B57D48 LDRB W8, [X22 + 0x954]
	0x03B57D4C MOV W21, W2
	0x03B57D50 MOV X20, X1
	0x03B57D54 MOV X19, X0
	0x03B57D58 TBNZ X8, 0x0, 0x3B57D94
	0x03B57D5C ADRP X0, 0x603000
	0x03B57D60 LDR X0, [X0 + 0xF40]
	0x03B57D64 BL 0x1C16CF4
	0x03B57D68 ADRP X0, 0x59C000
	0x03B57D6C LDR X0, [X0 + 0xA28]
	0x03B57D70 BL 0x1C16CF4
	0x03B57D74 ADRP X0, 0x603000
	0x03B57D78 LDR X0, [X0 + 0x920]
	0x03B57D7C BL 0x1C16CF4
	0x03B57D80 ADRP X0, 0x603000
	0x03B57D84 LDR X0, [X0 + 0xF48]
	0x03B57D88 BL 0x1C16CF4
	0x03B57D8C MOVZ W8, 0x1
	0x03B57D90 STRB W8, [X22 + 0x954]
	0x03B57D94 CBZ X20, 0x3B57EDC
	0x03B57D98 MOV X0, X19
	0x03B57D9C MOV X1, X20
	0x03B57DA0 BL 0x3B594E8
	0x03B57DA4 TBZ X0, 0x0, 0x3B57EB4
	0x03B57DA8 LDRB W8, [X19 + 0x90]
	0x03B57DAC CBZ W8, 0x3B57E18
	0x03B57DB0 MOV X0, X19
	0x03B57DB4 MOV X1, X31
	0x03B57DB8 BL 0x3C389D4
	0x03B57DBC ADRP X8, 0x603000
	0x03B57DC0 LDR X8, [X8 + 0xF48]
	0x03B57DC4 MOV X2, X0
	0x03B57DC8 MOV X1, X20
	0x03B57DCC MOV X3, X31
	0x03B57DD0 LDR X8, [X8]
	0x03B57DD4 MOV X0, X8
	0x03B57DD8 BL 0x3227BD4
	0x03B57DDC ADRP X8, 0x59C000
	0x03B57DE0 LDR X8, [X8 + 0xA28]
	0x03B57DE4 MOV X20, X0
	0x03B57DE8 LDR X8, [X8]
	0x03B57DEC LDR W9, [X8 + 0xE0]
	0x03B57DF0 CBNZ W9, 0x3B57DFC
	0x03B57DF4 MOV X0, X8
	0x03B57DF8 BL 0x1C16DFC
	0x03B57DFC MOV X0, X20
	0x03B57E00 MOV X1, X19
	0x03B57E04 LDP X20, X19, [X31 + 0x20]
	0x03B57E08 LDP X22, X21, [X31 + 0x10]
	0x03B57E0C MOV X2, X31
	0x03B57E10 LDR X30, [X31], #0x30
	0x03B57E14 B 0x3C065A4
	0x03B57E18 LDR X0, [X19 + 0x80]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x88C000
	007 Move X21, 0x604000
	008 Move W8, [X22+2370]
	009 Move X21, [X21+3760]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x604000
	017 Move X0, [X0+3760]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2370], W8
	021 Move X1, [X21]
	022 Move X0, X19
	023 Call 0x1C17E00
	024 Compare X0, 0
	025 JumpIfEqual {67}
	026 Move X8, [X0]
	027 Move X1, [X21]
	028 Move X19, X0
	029 NotImplemented "Instruction LDRH not yet implemented."
	030 Compare X9, 0
	031 JumpIfEqual {38}
	032 Move X10, [X8+176]
	033 Add X10, X10, 8
	034 NotImplemented "Instruction LDUR not yet implemented."
	035 NotImplemented "Instruction CMP not yet implemented."
	036 Subtract X9, X9, 1
	037 Add X10, X10, 16
	038 Move W2, 2
	039 Move X0, X19
	040 Call 0x1C5D788
	041 Move W9, [X10]
	042 Add W9, W9, 2
	043 Add X8, X8, W9
	044 Add X0, X8, 312
	045 Move X8, [X0]
	046 Move X1, [X0+8]
	047 Move X0, X19
	048 NotImplemented "Instruction BLR not yet implemented."
	049 Move TEMP, X0
	050 And TEMP, TEMP, 1
	051 Compare TEMP, 1
	052 JumpIfNotEqual {67}
	053 Move X8, [X19]
	054 Move X1, [X21]
	055 NotImplemented "Instruction LDRH not yet implemented."
	056 Compare X9, 0
	057 JumpIfEqual {64}
	058 Move X10, [X8+176]
	059 Add X10, X10, 8
	060 NotImplemented "Instruction LDUR not yet implemented."
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Subtract X9, X9, 1
	063 Add X10, X10, 16
	064 Move W2, 3
	065 Move X0, X19
	066 Call 0x1C5D788
	067 Move V0, [X20+760]
	068 Move X20, [X31+32]
	069 Move X19, [X31+40]
	070 Move X22, [X31+16]
	071 Move X21, [X31+24]
	072 Move X30, [X31+48]
	073 Return V0
	074 Move W9, [X10]
	075 Add W9, W9, 3
	076 Add X8, X8, W9
	077 Add X0, X8, 312
	078 Move X2, [X0]
	079 Move X1, [X0+8]
	080 Move X0, X19
	081 Move X20, [X31+32]
	082 Move X19, [X31+40]
	083 Move X22, [X31+16]
	084 Move X21, [X31+24]
	085 Move X30, [X31+48]
	086 CallNoReturn X2

Method: System.Void .ctor()

Disassembly:
	0x03B57E1C CBZ X0, 0x3B57F24
	0x03B57E20 LDR X8, [X0]
	0x03B57E24 LDP X9, X1, [X8 + 0x1B8]
	0x03B57E28 BLR X9
	0x03B57E2C LDR X0, [X19 + 0x80]
	0x03B57E30 CBZ X0, 0x3B57F24
	0x03B57E34 ADRP X8, 0x603000
	0x03B57E38 LDR X8, [X8 + 0xF40]
	0x03B57E3C MOV X1, X20
	0x03B57E40 MOV W2, W21
	0x03B57E44 LDR X3, [X8]
	0x03B57E48 BL 0x28B9ABC
	0x03B57E4C TBZ X0, 0x0, 0x3B57EB4
	0x03B57E50 ADRP X10, 0x603000
	0x03B57E54 LDR X8, [X20]
	0x03B57E58 LDR X10, [X10 + 0x920]
	0x03B57E5C LDRH W9, [X8 + 0x12E]
	0x03B57E60 LDR X1, [X10]
	0x03B57E64 CBZ X9, 0x3B57E88
	0x03B57E68 LDR X10, [X8 + 0xB0]
	0x03B57E6C ADD X10, X10, 0x8
	0x03B57E70 LDUR X11, [X10 - 0x8]
	0x03B57E74 CMP X11, X1
	0x03B57E78 B.EQ 0x3B57E98
	0x03B57E7C SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x88C000
	006 Move X20, 0x604000
	007 Move W8, [X21+2371]
	008 Move X20, [X20+1984]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x604000
	015 Move X0, [X0+1984]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2371], W8
	019 Move V0, 0
	020 Move W8, 0x3F800000
	021 Move [X19+1160], D0
	022 Move [X19+1180], W8
	023 Move X0, [X20]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X19
	029 Move X20, [X31+16]
	030 Move X19, [X31+24]
	031 Move X30, [X31+32]
	032 Move X21, [X31+40]

