Type: UnityEngine.XR.Interaction.Toolkit.CharacterControllerDriver

Method: UnityEngine.XR.Interaction.Toolkit.LocomotionProvider get_locomotionProvider()

Disassembly:
	0x03B7A960 B.EQ 0x3B7A96C
	0x03B7A964 MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_locomotionProvider(UnityEngine.XR.Interaction.Toolkit.LocomotionProvider value)

Disassembly:
	0x03B7A968 STR W8, [X19 + 0x38]
	0x03B7A96C LDP X20, X19, [X31 + 0x20]
	0x03B7A970 LDP X22, X21, [X31 + 0x10]
	0x03B7A974 LDR X30, [X31], #0x30
	0x03B7A978 RET
	0x03B7A97C BL 0x1C16F20
	0x03B7A980 STR X30, [X31 - 0x30]!
	0x03B7A984 STP X22, X21, [X31 + 0x10]
	0x03B7A988 STP X20, X19, [X31 + 0x20]
	0x03B7A98C ADRP X22, 0x868000
	0x03B7A990 ADRP X21, 0x579000
	0x03B7A994 LDRB W8, [X22 + 0xA8E]
	0x03B7A998 LDR X21, [X21 + 0x598]
	0x03B7A99C MOV X19, X1
	0x03B7A9A0 MOV X20, X0
	0x03B7A9A4 TBNZ X8, 0x0, 0x3B7A9BC
	0x03B7A9A8 ADRP X0, 0x579000
	0x03B7A9AC LDR X0, [X0 + 0x598]
	0x03B7A9B0 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X8, [X0+32]
	005 Move X20, X1
	006 Move X19, X0
	007 Move X1, X8
	008 Call CharacterControllerDriver.Unsubscribe, X0, X1
	009 Move X0, X19
	010 Move X1, X20
	011 Move [X19+32], X20
	012 Call CharacterControllerDriver.Subscribe, X0, X1
	013 Move X0, X19
	014 Call CharacterControllerDriver.SetupCharacterController, X0
	015 Move X8, [X19]
	016 Move X0, X19
	017 Move X20, [X31+16]
	018 Move X19, [X31+24]
	019 Move X2, [X8+376]
	020 Move X1, [X8+384]
	021 Move X30, [X31+32]
	022 CallNoReturn X2

Method: System.Single get_minHeight()

Disassembly:
	0x03B7ADDC ADRP X21, 0x868000
	0x03B7ADE0 ADRP X22, 0x5E1000

ISIL:
	001 Move V0, [X0+40]
	002 Return V0

Method: System.Void set_minHeight(System.Single value)

Disassembly:
	0x03B7ADE4 LDRB W8, [X21 + 0xA9A]
	0x03B7ADE8 LDR X22, [X22 + 0xD20]

ISIL:
	001 Move [X0+40], S0
	002 Return 

Method: System.Single get_maxHeight()

Disassembly:
	0x03B7ADEC MOV X19, X1
	0x03B7ADF0 MOV X20, X0

ISIL:
	001 Move V0, [X0+44]
	002 Return V0

Method: System.Void set_maxHeight(System.Single value)

Disassembly:
	0x03B7ADF4 TBNZ X8, 0x0, 0x3B7AE0C
	0x03B7ADF8 ADRP X0, 0x5E1000

ISIL:
	001 Move [X0+44], S0
	002 Return 

Method: Unity.XR.CoreUtils.XROrigin get_xrOrigin()

Disassembly:
	0x03B7ADFC LDR X0, [X0 + 0xD20]
	0x03B7AE00 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: UnityEngine.CharacterController get_characterController()

Disassembly:
	0x03B7AE04 MOVZ W8, 0x1
	0x03B7AE08 STRB W8, [X21 + 0xA9A]

ISIL:
	001 Move X0, [X0+56]
	002 Return X0

Method: System.Void Awake()

Disassembly:
	0x03B7AE0C LDR X2, [X22]
	0x03B7AE10 MOV X0, X20
	0x03B7AE14 MOV X1, X19
	0x03B7AE18 LDP X20, X19, [X31 + 0x20]
	0x03B7AE1C LDP X22, X21, [X31 + 0x10]
	0x03B7AE20 LDR X30, [X31], #0x30
	0x03B7AE24 B 0x29AD964
	0x03B7AE28 STR X30, [X31 - 0x30]!
	0x03B7AE2C STP X22, X21, [X31 + 0x10]
	0x03B7AE30 STP X20, X19, [X31 + 0x20]
	0x03B7AE34 ADRP X22, 0x868000
	0x03B7AE38 LDRB W8, [X22 + 0xA93]
	0x03B7AE3C MOV X21, X2
	0x03B7AE40 MOV X20, X1
	0x03B7AE44 MOV X19, X0
	0x03B7AE48 TBNZ X8, 0x0, 0x3B7AE60
	0x03B7AE4C ADRP X0, 0x5E0000
	0x03B7AE50 LDR X0, [X0 + 0x2F8]
	0x03B7AE54 BL 0x1C16CF4
	0x03B7AE58 MOVZ W8, 0x1
	0x03B7AE5C STRB W8, [X22 + 0xA93]
	0x03B7AE60 CBZ X20, 0x3B7AF14
	0x03B7AE64 MOV X0, X20
	0x03B7AE68 BL 0x3B7A438
	0x03B7AE6C CBZ X21, 0x3B7AF14
	0x03B7AE70 ADRP X10, 0x5E0000
	0x03B7AE74 LDR X8, [X21]
	0x03B7AE78 LDR X10, [X10 + 0x2F8]
	0x03B7AE7C MOV X20, X0
	0x03B7AE80 LDRH W9, [X8 + 0x12E]
	0x03B7AE84 LDR X1, [X10]
	0x03B7AE88 CBZ X9, 0x3B7AEAC
	0x03B7AE8C LDR X10, [X8 + 0xB0]
	0x03B7AE90 ADD X10, X10, 0x8
	0x03B7AE94 LDUR X11, [X10 - 0x8]
	0x03B7AE98 CMP X11, X1
	0x03B7AE9C B.EQ 0x3B7AEBC
	0x03B7AEA0 SUBS X9, X9, 0x1
	0x03B7AEA4 ADD X10, X10, 0x10
	0x03B7AEA8 B.NE 0x3B7AE94
	0x03B7AEAC MOVZ W2, 0x5
	0x03B7AEB0 MOV X0, X21
	0x03B7AEB4 BL 0x1C5C788
	0x03B7AEB8 B 0x3B7AECC
	0x03B7AEBC LDR W9, [X10]
	0x03B7AEC0 ADD W9, W9, 0x5
	0x03B7AEC4 ADD X8, X8, W9, 0x4, SXTW
	0x03B7AEC8 ADD X0, X8, 0x138
	0x03B7AECC LDP X8, X1, [X0]
	0x03B7AED0 MOV X0, X21
	0x03B7AED4 BLR X8
	0x03B7AED8 CBZ X0, 0x3B7AF14
	0x03B7AEDC MOV X1, X31
	0x03B7AEE0 BL 0x3C3F58C
	0x03B7AEE4 STP S0, S1, [X19 + 0x58]
	0x03B7AEE8 STR S2, [X19 + 0x60]
	0x03B7AEEC CBZ X20, 0x3B7AF14
	0x03B7AEF0 MOV X0, X20
	0x03B7AEF4 MOV X1, X31
	0x03B7AEF8 BL 0x3C40B58
	0x03B7AEFC STP S0, S1, [X19 + 0x64]
	0x03B7AF00 STR S2, [X19 + 0x6C]
	0x03B7AF04 LDP X20, X19, [X31 + 0x20]
	0x03B7AF08 LDP X22, X21, [X31 + 0x10]
	0x03B7AF0C LDR X30, [X31], #0x30
	0x03B7AF10 RET
	0x03B7AF14 BL 0x1C16F20
	0x03B7AF18 STP X30, X21, [X31 - 0x20]!
	0x03B7AF1C STP X20, X19, [X31 + 0x10]
	0x03B7AF20 ADRP X20, 0x868000
	0x03B7AF24 LDRB W8, [X20 + 0xA94]
	0x03B7AF28 MOV X19, X0
	0x03B7AF2C TBNZ X8, 0x0, 0x3B7AF68
	0x03B7AF30 ADRP X0, 0x5E0000
	0x03B7AF34 LDR X0, [X0 + 0x168]
	0x03B7AF38 BL 0x1C16CF4
	0x03B7AF3C ADRP X0, 0x5E1000
	0x03B7AF40 LDR X0, [X0 + 0xCF0]
	0x03B7AF44 BL 0x1C16CF4
	0x03B7AF48 ADRP X0, 0x5E0000
	0x03B7AF4C LDR X0, [X0 + 0x170]
	0x03B7AF50 BL 0x1C16CF4
	0x03B7AF54 ADRP X0, 0x579000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x869000
	006 Move X21, 0x57A000
	007 Move W8, [X20+2692]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x5E2000
	015 Move X0, [X0+3240]
	016 Call 0x1C17CF4
	017 Move X0, 0x5E2000
	018 Move X0, [X0+3248]
	019 Call 0x1C17CF4
	020 Move X0, 0x57A000
	021 Move X0, [X0+2600]
	022 Call 0x1C17CF4
	023 Move X0, 0x57A000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move X0, 0x5E2000
	027 Move X0, [X0+3256]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2692], W8
	031 Move X0, [X21]
	032 Move X20, [X19+32]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X20
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {102}
	045 Move X8, 0x5E2000
	046 Move X8, [X8+3248]
	047 Move X0, X19
	048 Move X1, [X8]
	049 Call 0x21A4894, X0
	050 Move [X19+32], X0
	051 Move X20, X0
	052 Move X0, [X21]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X31
	059 Move X2, X31
	060 Call Object.op_Equality, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {102}
	065 Move X8, 0x5E2000
	066 Move X8, [X8+3240]
	067 Move X0, [X8]
	068 Call 0x29609FC
	069 Move [X19+32], X0
	070 Move X20, X0
	071 Move X0, [X21]
	072 Move W8, [X0+224]
	073 Compare W8, 0
	074 JumpIfNotEqual {76}
	075 Call 0x1C17DFC
	076 Move X0, X20
	077 Move X1, X31
	078 Move X2, X31
	079 Call Object.op_Equality, X0, X1
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {102}
	084 Move X8, 0x57A000
	085 Move X8, [X8+2600]
	086 Move X0, [X8]
	087 Move W8, [X0+224]
	088 Compare W8, 0
	089 JumpIfNotEqual {91}
	090 Call 0x1C17DFC
	091 Move X8, 0x5E2000
	092 Move X8, [X8+3256]
	093 Move X1, X19
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X2, X31
	097 Move X0, [X8]
	098 Move X30, [X31+32]
	099 Move X21, [X31+40]
	100 Call Debug.LogWarning, X0, X1
	101 Return 
	102 Move X20, [X31+16]
	103 Move X19, [X31+24]
	104 Move X30, [X31+32]
	105 Move X21, [X31+40]
	106 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03B7AF58 LDR X0, [X0 + 0x598]
	0x03B7AF5C BL 0x1C16CF4

ISIL:
	001 Move X1, [X0+32]
	002 Call CharacterControllerDriver.Subscribe, X0, X1
	003 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03B7AF60 MOVZ W8, 0x1
	0x03B7AF64 STRB W8, [X20 + 0xA94]

ISIL:
	001 Move X1, [X0+32]
	002 Call CharacterControllerDriver.Unsubscribe, X0, X1
	003 Return 

Method: System.Void Start()

Disassembly:
	0x03B7AF68 LDR W8, [X19 + 0x38]
	0x03B7AF6C CMP W8, 0x3
	0x03B7AF70 B.NE 0x3B7AF84
	0x03B7AF74 STR W31, [X19 + 0x38]
	0x03B7AF78 LDP X20, X19, [X31 + 0x10]
	0x03B7AF7C LDP X30, X21, [X31], #0x20
	0x03B7AF80 RET
	0x03B7AF84 LDR X0, [X19 + 0x48]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call CharacterControllerDriver.SetupCharacterController, X0
	005 Move X8, [X19]
	006 Move X0, X19
	007 Move X2, [X8+376]
	008 Move X1, [X8+384]
	009 Move X30, [X31+16]
	010 Move X19, [X31+24]
	011 CallNoReturn X2

Method: System.Void UpdateCharacterController()

Disassembly:
	0x03B7AF88 CBZ X0, 0x3B7B05C
	0x03B7AF8C LDR W9, [X0 + 0x18]
	0x03B7AF90 CMP W9, 0x1
	0x03B7AF94 B.LT 0x3B7B048
	0x03B7AF98 CMP W8, 0x2
	0x03B7AF9C B.EQ 0x3B7AFBC
	0x03B7AFA0 MOV X0, X19
	0x03B7AFA4 BL 0x3B7B060
	0x03B7AFA8 TBZ X0, 0x0, 0x3B7AF78
	0x03B7AFAC LDR X0, [X19 + 0x48]
	0x03B7AFB0 MOVZ W8, 0x2
	0x03B7AFB4 STR W8, [X19 + 0x38]
	0x03B7AFB8 CBZ X0, 0x3B7B05C
	0x03B7AFBC ADRP X9, 0x5E0000
	0x03B7AFC0 LDR W8, [X0 + 0x18]
	0x03B7AFC4 LDR X9, [X9 + 0x170]
	0x03B7AFC8 SUB W21, W8, 0x1
	0x03B7AFCC LDR X2, [X9]
	0x03B7AFD0 MOV W1, W21
	0x03B7AFD4 BL 0x301BCCC
	0x03B7AFD8 LDR X8, [X19 + 0x50]
	0x03B7AFDC CBZ X8, 0x3B7B05C
	0x03B7AFE0 ADRP X9, 0x5E1000
	0x03B7AFE4 LDR X9, [X9 + 0xCF0]
	0x03B7AFE8 MOV X20, X0
	0x03B7AFEC MOV X0, X8
	0x03B7AFF0 MOV W1, W21
	0x03B7AFF4 LDR X2, [X9]
	0x03B7AFF8 BL 0x301BCCC
	0x03B7AFFC CBZ X20, 0x3B7B04C
	0x03B7B000 ADRP X8, 0x578000
	0x03B7B004 LDR X8, [X8 + 0x598]
	0x03B7B008 MOV X21, X0
	0x03B7B00C LDR X0, [X8]
	0x03B7B010 LDR W8, [X0 + 0xE0]
	0x03B7B014 CBNZ W8, 0x3B7B01C
	0x03B7B018 BL 0x1C16DFC
	0x03B7B01C MOV X0, X21
	0x03B7B020 MOV X1, X31
	0x03B7B024 MOV X2, X31
	0x03B7B028 BL 0x3C3883C
	0x03B7B02C TBNZ X0, 0x0, 0x3B7B04C
	0x03B7B030 MOV X0, X19
	0x03B7B034 MOV X2, X20
	0x03B7B038 LDP X20, X19, [X31 + 0x10]
	0x03B7B03C MOV X1, X21
	0x03B7B040 LDP X30, X21, [X31], #0x20
	0x03B7B044 B 0x3B7B1C0
	0x03B7B048 CBZ W8, 0x3B7AF78
	0x03B7B04C MOV X0, X19
	0x03B7B050 LDP X20, X19, [X31 + 0x10]
	0x03B7B054 LDP X30, X21, [X31], #0x20
	0x03B7B058 B 0x3B7B108
	0x03B7B05C BL 0x1C16F20
	0x03B7B060 STP X30, X21, [X31 - 0x20]!
	0x03B7B064 STP X20, X19, [X31 + 0x10]
	0x03B7B068 ADRP X21, 0x867000
	0x03B7B06C ADRP X20, 0x578000
	0x03B7B070 LDRB W8, [X21 + 0xAC0]
	0x03B7B074 LDR X20, [X20 + 0x598]
	0x03B7B078 MOV X19, X0
	0x03B7B07C TBNZ X8, 0x0, 0x3B7B094
	0x03B7B080 ADRP X0, 0x578000
	0x03B7B084 LDR X0, [X0 + 0x598]
	0x03B7B088 BL 0x1C16CF4
	0x03B7B08C MOVZ W8, 0x1
	0x03B7B090 STRB W8, [X21 + 0xAC0]
	0x03B7B094 LDR X0, [X20]
	0x03B7B098 LDR X20, [X19 + 0x30]
	0x03B7B09C LDR W8, [X0 + 0xE0]
	0x03B7B0A0 CBNZ W8, 0x3B7B0A8
	0x03B7B0A4 BL 0x1C16DFC
	0x03B7B0A8 MOV X0, X20
	0x03B7B0AC MOV X1, X31
	0x03B7B0B0 MOV X2, X31
	0x03B7B0B4 BL 0x3C3883C
	0x03B7B0B8 TBNZ X0, 0x0, 0x3B7B0D0
	0x03B7B0BC LDR X0, [X19 + 0x30]
	0x03B7B0C0 CBZ X0, 0x3B7B104

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x869000
	010 Move X21, 0x57A000
	011 Move W8, [X20+2693]
	012 Move X21, [X21+1432]
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x57A000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X20+2693], W8
	023 Move X0, [X21]
	024 Move X20, [X19+48]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfEqual {51}
	037 Move X0, [X21]
	038 Move X20, [X19+56]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Equality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {60}
	051 Move X20, [X31+48]
	052 Move X19, [X31+56]
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Move D9, [X31+16]
	056 Move D8, [X31+24]
	057 Move D11, [X31+64]
	058 Move D10, [X31+72]
	059 Return 
	060 Move X0, [X19+48]
	061 Compare X0, 0
	062 JumpIfEqual {109}
	063 Move X1, X31
	064 Call XROrigin.get_CameraInOriginSpaceHeight, X0
	065 Move S2, [X19+40]
	066 Move S1, [X19+44]
	067 Move X0, [X19+48]
	068 NotImplemented "Instruction FCMP not yet implemented."
	069 NotImplemented "Instruction FCSEL not yet implemented."
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 NotImplemented "Instruction FCSEL not yet implemented."
	072 Compare X0, 0
	073 JumpIfEqual {109}
	074 Move X1, X31
	075 Call XROrigin.get_CameraInOriginSpacePos, X0
	076 Move X0, [X19+56]
	077 Compare X0, 0
	078 JumpIfEqual {109}
	079 Move X1, X31
	080 Move V9, V0
	081 Move V10, V2
	082 Call CharacterController.get_skinWidth, X0
	083 Move X0, [X19+56]
	084 Compare X0, 0
	085 JumpIfEqual {109}
	086 Move V11, V0
	087 Move V0, V8
	088 Move X1, X31
	089 Call CharacterController.set_height, X0, V0
	090 Move X0, [X19+56]
	091 Compare X0, 0
	092 JumpIfEqual {109}
	093 Move S0, 0.5
	094 Multiply S0, S8, S0
	095 Add S1, S0, S11
	096 Move V0, V9
	097 Move X20, [X31+48]
	098 Move X19, [X31+56]
	099 Move X30, [X31+32]
	100 Move X21, [X31+40]
	101 Move D9, [X31+16]
	102 Move D8, [X31+24]
	103 Move V2, V10
	104 Move X1, X31
	105 Move D11, [X31+64]
	106 Move D10, [X31+72]
	107 Call CharacterController.set_center, X0, X1
	108 Return 
	109 Call 0x1C17F20

Method: System.Void Subscribe(UnityEngine.XR.Interaction.Toolkit.LocomotionProvider provider)

Disassembly:
	0x03B7AAC4 MOV W20, W0
	0x03B7AAC8 CBZ W0, 0x3B7AB38
	0x03B7AACC LDR X8, [X19 + 0x48]
	0x03B7AAD0 CBZ X8, 0x3B7AB8C
	0x03B7AAD4 LDR W8, [X8 + 0x18]
	0x03B7AAD8 SUB W8, W8, 0x1
	0x03B7AADC CMP W20, W8
	0x03B7AAE0 B.NE 0x3B7AB38
	0x03B7AAE4 LDR X0, [X19 + 0x50]
	0x03B7AAE8 CBZ X0, 0x3B7AB8C
	0x03B7AAEC ADRP X8, 0x5E1000
	0x03B7AAF0 LDR X8, [X8 + 0xCF0]
	0x03B7AAF4 SUB W21, W20, 0x1
	0x03B7AAF8 MOV W1, W21
	0x03B7AAFC LDR X2, [X8]
	0x03B7AB00 BL 0x301BCCC
	0x03B7AB04 LDR X8, [X19 + 0x48]
	0x03B7AB08 CBZ X8, 0x3B7AB8C
	0x03B7AB0C ADRP X9, 0x5E0000
	0x03B7AB10 LDR X9, [X9 + 0x170]
	0x03B7AB14 MOV X22, X0
	0x03B7AB18 MOV X0, X8
	0x03B7AB1C MOV W1, W21
	0x03B7AB20 LDR X2, [X9]
	0x03B7AB24 BL 0x301BCCC
	0x03B7AB28 MOV X2, X0
	0x03B7AB2C MOV X0, X19
	0x03B7AB30 MOV X1, X22
	0x03B7AB34 BL 0x3B7AE28
	0x03B7AB38 LDR X0, [X19 + 0x48]
	0x03B7AB3C CBZ X0, 0x3B7AB8C
	0x03B7AB40 ADRP X8, 0x5E1000
	0x03B7AB44 LDR X8, [X8 + 0xCE8]
	0x03B7AB48 MOV W1, W20
	0x03B7AB4C LDR X2, [X8]
	0x03B7AB50 BL 0x301DA48
	0x03B7AB54 LDR X0, [X19 + 0x50]
	0x03B7AB58 CBZ X0, 0x3B7AB8C
	0x03B7AB5C ADRP X8, 0x5E1000
	0x03B7AB60 LDR X8, [X8 + 0xCE0]
	0x03B7AB64 MOV W1, W20
	0x03B7AB68 LDP X20, X19, [X31 + 0x20]
	0x03B7AB6C LDP X22, X21, [X31 + 0x10]
	0x03B7AB70 LDR X2, [X8]
	0x03B7AB74 LDR X30, [X31], #0x30
	0x03B7AB78 B 0x301DA48
	0x03B7AB7C LDP X20, X19, [X31 + 0x20]
	0x03B7AB80 LDP X22, X21, [X31 + 0x10]
	0x03B7AB84 LDR X30, [X31], #0x30
	0x03B7AB88 RET
	0x03B7AB8C BL 0x1C16F20
	0x03B7AB90 STP X30, X21, [X31 - 0x20]!
	0x03B7AB94 STP X20, X19, [X31 + 0x10]
	0x03B7AB98 ADRP X21, 0x868000
	0x03B7AB9C ADRP X20, 0x5E0000
	0x03B7ABA0 LDRB W8, [X21 + 0xA8F]
	0x03B7ABA4 LDR X20, [X20 + 0x438]
	0x03B7ABA8 MOV X19, X0
	0x03B7ABAC TBNZ X8, 0x0, 0x3B7ABC4
	0x03B7ABB0 ADRP X0, 0x5E0000
	0x03B7ABB4 LDR X0, [X0 + 0x438]
	0x03B7ABB8 BL 0x1C16CF4
	0x03B7ABBC MOVZ W8, 0x1
	0x03B7ABC0 STRB W8, [X21 + 0xA8F]
	0x03B7ABC4 MOVZ W9, 0xCCCD
	0x03B7ABC8 MOVZ W8, 0x1
	0x03B7ABCC MOVK W9, 0x3DCC0000
	0x03B7ABD0 STRB W8, [X19 + 0x1E0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x869000
	007 Move X22, 0x57A000
	008 Move W8, [X21+2694]
	009 Move X22, [X22+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x5E2000
	017 Move X0, [X0+3192]
	018 Call 0x1C17CF4
	019 Move X0, 0x5E2000
	020 Move X0, [X0+3200]
	021 Call 0x1C17CF4
	022 Move X0, 0x5E2000
	023 Move X0, [X0+3208]
	024 Call 0x1C17CF4
	025 Move X0, 0x57A000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2694], W8
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {77}
	043 Move X22, 0x5E2000
	044 Move X22, [X22+3192]
	045 Move X0, [X22]
	046 Call 0x1C17F10
	047 Move X8, 0x5E2000
	048 Move X8, [X8+3200]
	049 Move X1, X20
	050 Move X3, X31
	051 Move X21, X0
	052 Move X2, [X8]
	053 Call Action`1<Object>..ctor, X0, X1, X2
	054 Compare X19, 0
	055 JumpIfEqual {83}
	056 Move X0, X19
	057 Move X1, X21
	058 Call LocomotionProvider.add_beginLocomotion, X0, X1
	059 Move X0, [X22]
	060 Call 0x1C17F10
	061 Move X8, 0x5E2000
	062 Move X8, [X8+3208]
	063 Move X1, X20
	064 Move X3, X31
	065 Move X21, X0
	066 Move X2, [X8]
	067 Call Action`1<Object>..ctor, X0, X1, X2
	068 Move X0, X19
	069 Move X1, X21
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call LocomotionProvider.add_endLocomotion, X0, X1
	076 Return 
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move X30, [X31+48]
	082 Return 
	083 Call 0x1C17F20

Method: System.Void Unsubscribe(UnityEngine.XR.Interaction.Toolkit.LocomotionProvider provider)

Disassembly:
	0x03B7A9B4 MOVZ W8, 0x1
	0x03B7A9B8 STRB W8, [X22 + 0xA8E]
	0x03B7A9BC MOV X0, X20
	0x03B7A9C0 MOV X1, X19
	0x03B7A9C4 MOV X2, X31
	0x03B7A9C8 BL 0x3B3CB5C
	0x03B7A9CC LDR X0, [X21]
	0x03B7A9D0 LDR X21, [X20 + 0x1D0]
	0x03B7A9D4 LDR W8, [X0 + 0xE0]
	0x03B7A9D8 CBNZ W8, 0x3B7A9E0
	0x03B7A9DC BL 0x1C16DFC
	0x03B7A9E0 MOV X0, X21
	0x03B7A9E4 MOV X1, X31
	0x03B7A9E8 MOV X2, X31
	0x03B7A9EC BL 0x3C354F8
	0x03B7A9F0 TBZ X0, 0x0, 0x3B7AA20
	0x03B7A9F4 CBZ X19, 0x3B7AA30
	0x03B7A9F8 LDR X20, [X20 + 0x1D0]
	0x03B7A9FC MOV X0, X19
	0x03B7AA00 BL 0x3B6B9E0
	0x03B7AA04 CBZ X20, 0x3B7AA30
	0x03B7AA08 MOV X1, X0
	0x03B7AA0C MOV X0, X20
	0x03B7AA10 LDP X20, X19, [X31 + 0x20]
	0x03B7AA14 LDP X22, X21, [X31 + 0x10]
	0x03B7AA18 LDR X30, [X31], #0x30
	0x03B7AA1C B 0x3B7AA34
	0x03B7AA20 LDP X20, X19, [X31 + 0x20]
	0x03B7AA24 LDP X22, X21, [X31 + 0x10]
	0x03B7AA28 LDR X30, [X31], #0x30
	0x03B7AA2C RET
	0x03B7AA30 BL 0x1C16F20
	0x03B7AA34 STR X30, [X31 - 0x30]!
	0x03B7AA38 STP X22, X21, [X31 + 0x10]
	0x03B7AA3C STP X20, X19, [X31 + 0x20]
	0x03B7AA40 ADRP X21, 0x868000
	0x03B7AA44 LDRB W8, [X21 + 0xA92]
	0x03B7AA48 MOV X20, X1
	0x03B7AA4C MOV X19, X0
	0x03B7AA50 TBNZ X8, 0x0, 0x3B7AAA4
	0x03B7AA54 ADRP X0, 0x5E1000
	0x03B7AA58 LDR X0, [X0 + 0xCD8]
	0x03B7AA5C BL 0x1C16CF4
	0x03B7AA60 ADRP X0, 0x5E1000
	0x03B7AA64 LDR X0, [X0 + 0xCE0]
	0x03B7AA68 BL 0x1C16CF4
	0x03B7AA6C ADRP X0, 0x5E1000
	0x03B7AA70 LDR X0, [X0 + 0xCE8]
	0x03B7AA74 BL 0x1C16CF4
	0x03B7AA78 ADRP X0, 0x5E0000
	0x03B7AA7C LDR X0, [X0 + 0x168]
	0x03B7AA80 BL 0x1C16CF4
	0x03B7AA84 ADRP X0, 0x5E1000
	0x03B7AA88 LDR X0, [X0 + 0xCF0]
	0x03B7AA8C BL 0x1C16CF4
	0x03B7AA90 ADRP X0, 0x5E0000
	0x03B7AA94 LDR X0, [X0 + 0x170]
	0x03B7AA98 BL 0x1C16CF4
	0x03B7AA9C MOVZ W8, 0x1
	0x03B7AAA0 STRB W8, [X21 + 0xA92]
	0x03B7AAA4 LDR X0, [X19 + 0x48]
	0x03B7AAA8 CBZ X0, 0x3B7AB8C
	0x03B7AAAC ADRP X8, 0x5E1000
	0x03B7AAB0 LDR X8, [X8 + 0xCD8]
	0x03B7AAB4 MOV X1, X20
	0x03B7AAB8 LDR X2, [X8]
	0x03B7AABC BL 0x301CD00
	0x03B7AAC0 TBNZ X0, 0x1F, 0x3B7AB7C

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x869000
	007 Move X22, 0x57A000
	008 Move W8, [X21+2695]
	009 Move X22, [X22+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x5E2000
	017 Move X0, [X0+3192]
	018 Call 0x1C17CF4
	019 Move X0, 0x5E2000
	020 Move X0, [X0+3200]
	021 Call 0x1C17CF4
	022 Move X0, 0x5E2000
	023 Move X0, [X0+3208]
	024 Call 0x1C17CF4
	025 Move X0, 0x57A000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2695], W8
	030 Move X0, [X22]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X19
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Inequality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {77}
	043 Move X22, 0x5E2000
	044 Move X22, [X22+3192]
	045 Move X0, [X22]
	046 Call 0x1C17F10
	047 Move X8, 0x5E2000
	048 Move X8, [X8+3200]
	049 Move X1, X20
	050 Move X3, X31
	051 Move X21, X0
	052 Move X2, [X8]
	053 Call Action`1<Object>..ctor, X0, X1, X2
	054 Compare X19, 0
	055 JumpIfEqual {83}
	056 Move X0, X19
	057 Move X1, X21
	058 Call LocomotionProvider.remove_beginLocomotion, X0, X1
	059 Move X0, [X22]
	060 Call 0x1C17F10
	061 Move X8, 0x5E2000
	062 Move X8, [X8+3208]
	063 Move X1, X20
	064 Move X3, X31
	065 Move X21, X0
	066 Move X2, [X8]
	067 Call Action`1<Object>..ctor, X0, X1, X2
	068 Move X0, X19
	069 Move X1, X21
	070 Move X20, [X31+32]
	071 Move X19, [X31+40]
	072 Move X22, [X31+16]
	073 Move X21, [X31+24]
	074 Move X30, [X31+48]
	075 Call LocomotionProvider.remove_endLocomotion, X0, X1
	076 Return 
	077 Move X20, [X31+32]
	078 Move X19, [X31+40]
	079 Move X22, [X31+16]
	080 Move X21, [X31+24]
	081 Move X30, [X31+48]
	082 Return 
	083 Call 0x1C17F20

Method: System.Void SetupCharacterController()

Disassembly:
	0x03B7ABD4 STR W9, [X19 + 0x1E4]
	0x03B7ABD8 LDR X0, [X20]
	0x03B7ABDC LDR W8, [X0 + 0xE0]
	0x03B7ABE0 CBNZ W8, 0x3B7ABE8
	0x03B7ABE4 BL 0x1C16DFC
	0x03B7ABE8 MOV X0, X19
	0x03B7ABEC LDP X20, X19, [X31 + 0x10]
	0x03B7ABF0 MOV X1, X31
	0x03B7ABF4 LDP X30, X21, [X31], #0x20
	0x03B7ABF8 B 0x3B3DB20
	0x03B7ABFC LDR X0, [X0 + 0x70]
	0x03B7AC00 RET
	0x03B7AC04 STR X1, [X0 + 0x70]
	0x03B7AC08 RET
	0x03B7AC0C STP X30, X21, [X31 - 0x20]!
	0x03B7AC10 STP X20, X19, [X31 + 0x10]
	0x03B7AC14 ADRP X20, 0x868000
	0x03B7AC18 LDRB W8, [X20 + 0xA90]
	0x03B7AC1C MOV X19, X0
	0x03B7AC20 TBNZ X8, 0x0, 0x3B7AC50
	0x03B7AC24 ADRP X0, 0x5E1000
	0x03B7AC28 LDR X0, [X0 + 0xCF8]
	0x03B7AC2C BL 0x1C16CF4
	0x03B7AC30 ADRP X0, 0x5E1000
	0x03B7AC34 LDR X0, [X0 + 0xD00]
	0x03B7AC38 BL 0x1C16CF4
	0x03B7AC3C ADRP X0, 0x5E1000
	0x03B7AC40 LDR X0, [X0 + 0xD08]
	0x03B7AC44 BL 0x1C16CF4
	0x03B7AC48 MOVZ W8, 0x1
	0x03B7AC4C STRB W8, [X20 + 0xA90]
	0x03B7AC50 MOV X0, X19
	0x03B7AC54 BL 0x3B7ACCC
	0x03B7AC58 LDR X0, [X19 + 0x70]
	0x03B7AC5C CBZ X0, 0x3B7AC74
	0x03B7AC60 ADRP X8, 0x5E1000
	0x03B7AC64 LDR X8, [X8 + 0xD08]
	0x03B7AC68 LDR X1, [X8]
	0x03B7AC6C BL 0x29AD9C0
	0x03B7AC70 CBNZ X0, 0x3B7ACC0
	0x03B7AC74 ADRP X8, 0x5E1000
	0x03B7AC78 LDR X8, [X8 + 0xD00]
	0x03B7AC7C ADRP X21, 0x5E1000
	0x03B7AC80 LDR X0, [X8]
	0x03B7AC84 LDR X21, [X21 + 0xCF8]
	0x03B7AC88 BL 0x1C16F10
	0x03B7AC8C MOVZ W8, 0x101
	0x03B7AC90 MOVZ W9, 0x1
	0x03B7AC94 MOV X1, X31
	0x03B7AC98 MOV X20, X0
	0x03B7AC9C STRH W8, [X0 + 0x10]
	0x03B7ACA0 STRB W9, [X0 + 0x12]
	0x03B7ACA4 BL 0x33BDD8C
	0x03B7ACA8 LDR X0, [X21]
	0x03B7ACAC BL 0x1C16F10
	0x03B7ACB0 MOV X1, X20
	0x03B7ACB4 MOV X21, X0
	0x03B7ACB8 BL 0x3B7ADD0
	0x03B7ACBC STR X21, [X19 + 0x70]
	0x03B7ACC0 LDP X20, X19, [X31 + 0x10]
	0x03B7ACC4 LDP X30, X21, [X31], #0x20
	0x03B7ACC8 RET
	0x03B7ACCC STR X30, [X31 - 0x30]!
	0x03B7ACD0 STP X22, X21, [X31 + 0x10]
	0x03B7ACD4 STP X20, X19, [X31 + 0x20]
	0x03B7ACD8 ADRP X19, 0x868000
	0x03B7ACDC ADRP X22, 0x579000
	0x03B7ACE0 LDRB W8, [X19 + 0xABE]
	0x03B7ACE4 LDR X22, [X22 + 0x598]
	0x03B7ACE8 MOV X20, X0
	0x03B7ACEC TBNZ X8, 0x0, 0x3B7AD1C
	0x03B7ACF0 ADRP X0, 0x5E1000
	0x03B7ACF4 LDR X0, [X0 + 0xD10]
	0x03B7ACF8 BL 0x1C16CF4
	0x03B7ACFC ADRP X0, 0x5E1000
	0x03B7AD00 LDR X0, [X0 + 0xD18]
	0x03B7AD04 BL 0x1C16CF4
	0x03B7AD08 ADRP X0, 0x579000
	0x03B7AD0C LDR X0, [X0 + 0x598]
	0x03B7AD10 BL 0x1C16CF4
	0x03B7AD14 MOVZ W8, 0x1
	0x03B7AD18 STRB W8, [X19 + 0xABE]
	0x03B7AD1C MOV X19, X20
	0x03B7AD20 LDR X21, [X19 + 0x30]!
	0x03B7AD24 LDR X0, [X22]
	0x03B7AD28 LDR W8, [X0 + 0xE0]
	0x03B7AD2C CBNZ W8, 0x3B7AD34
	0x03B7AD30 BL 0x1C16DFC
	0x03B7AD34 MOV X0, X21
	0x03B7AD38 MOV X1, X31
	0x03B7AD3C MOV X2, X31
	0x03B7AD40 BL 0x3C3883C
	0x03B7AD44 TBZ X0, 0x0, 0x3B7ADA8
	0x03B7AD48 ADRP X8, 0x5E1000
	0x03B7AD4C LDR X8, [X8 + 0xD18]
	0x03B7AD50 MOV X0, X20
	0x03B7AD54 LDR X1, [X8]
	0x03B7AD58 BL 0x21A3F50
	0x03B7AD5C STR X0, [X20 + 0x30]
	0x03B7AD60 MOV X21, X0
	0x03B7AD64 LDR X0, [X22]
	0x03B7AD68 LDR W8, [X0 + 0xE0]
	0x03B7AD6C CBNZ W8, 0x3B7AD74
	0x03B7AD70 BL 0x1C16DFC
	0x03B7AD74 MOV X0, X21
	0x03B7AD78 MOV X1, X31
	0x03B7AD7C MOV X2, X31
	0x03B7AD80 BL 0x3C3883C
	0x03B7AD84 TBZ X0, 0x0, 0x3B7ADA8
	0x03B7AD88 ADRP X8, 0x5E1000
	0x03B7AD8C LDR X8, [X8 + 0xD10]
	0x03B7AD90 MOV X0, X19
	0x03B7AD94 LDP X20, X19, [X31 + 0x20]
	0x03B7AD98 LDP X22, X21, [X31 + 0x10]
	0x03B7AD9C LDR X1, [X8]
	0x03B7ADA0 LDR X30, [X31], #0x30
	0x03B7ADA4 B 0x295FA30
	0x03B7ADA8 LDP X20, X19, [X31 + 0x20]
	0x03B7ADAC LDP X22, X21, [X31 + 0x10]
	0x03B7ADB0 LDR X30, [X31], #0x30
	0x03B7ADB4 RET
	0x03B7ADB8 MOVZ W8, 0x101
	0x03B7ADBC MOVZ W9, 0x1
	0x03B7ADC0 MOV X1, X31
	0x03B7ADC4 STRH W8, [X0 + 0x10]
	0x03B7ADC8 STRB W9, [X0 + 0x12]
	0x03B7ADCC B 0x33BDD8C
	0x03B7ADD0 STR X30, [X31 - 0x30]!
	0x03B7ADD4 STP X22, X21, [X31 + 0x10]
	0x03B7ADD8 STP X20, X19, [X31 + 0x20]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x869000
	006 Move X21, 0x57A000
	007 Move W8, [X20+2696]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {31}
	014 Move X0, 0x57A000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x5E2000
	018 Move X0, [X0+3216]
	019 Call 0x1C17CF4
	020 Move X0, 0x57A000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x5E2000
	024 Move X0, [X0+3224]
	025 Call 0x1C17CF4
	026 Move X0, 0x5E2000
	027 Move X0, [X0+3232]
	028 Call 0x1C17CF4
	029 Move W8, 1
	030 Move [X20+2696], W8
	031 Move X0, [X21]
	032 Move X20, [X19+32]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X20
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {162}
	045 Move X8, [X19+32]
	046 Compare X8, 0
	047 JumpIfEqual {167}
	048 Move X0, [X21]
	049 Move X20, [X8+48]
	050 Move W9, [X0+224]
	051 Compare W9, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X20
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfEqual {162}
	062 Move X8, [X19+32]
	063 Compare X8, 0
	064 JumpIfEqual {167}
	065 Move X8, [X8+48]
	066 Compare X8, 0
	067 JumpIfEqual {167}
	068 Move X20, [X8+48]
	069 Move [X19+48], X20
	070 Move X0, [X21]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Move X1, X31
	077 Move X2, X31
	078 Call Object.op_Inequality, X0, X1
	079 Move X20, X31
	080 Move TEMP, X0
	081 And TEMP, TEMP, 1
	082 Compare TEMP, 1
	083 JumpIfNotEqual {95}
	084 Move X8, [X19+48]
	085 Compare X8, 0
	086 JumpIfEqual {167}
	087 Move X0, [X8+56]
	088 Compare X0, 0
	089 JumpIfEqual {167}
	090 Move X8, 0x5E2000
	091 Move X8, [X8+3216]
	092 Move X1, [X8]
	093 Call 0x21E62E4, X0
	094 Move X20, X0
	095 Move [X19+56], X20
	096 Move X0, [X21]
	097 Move W8, [X0+224]
	098 Compare W8, 0
	099 JumpIfNotEqual {101}
	100 Call 0x1C17DFC
	101 Move X0, X20
	102 Move X1, X31
	103 Move X2, X31
	104 Call Object.op_Equality, X0, X1
	105 Move TEMP, X0
	106 And TEMP, TEMP, 1
	107 Compare TEMP, 1
	108 JumpIfNotEqual {162}
	109 Move X0, [X21]
	110 Move X20, [X19+48]
	111 Move W8, [X0+224]
	112 Compare W8, 0
	113 JumpIfNotEqual {115}
	114 Call 0x1C17DFC
	115 Move X0, X20
	116 Move X1, X31
	117 Move X2, X31
	118 Call Object.op_Inequality, X0, X1
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {162}
	123 Move X8, [X19+48]
	124 Compare X8, 0
	125 JumpIfEqual {167}
	126 Move X1, [X8+56]
	127 Move X8, 0x5E2000
	128 Move X8, [X8+3232]
	129 Move X2, X31
	130 Move X0, [X8]
	131 Call String.Format, X0, X1
	132 Move X8, 0x5E2000
	133 Move X1, [X19+48]
	134 Move X8, [X8+3224]
	135 Move X20, X0
	136 Move X2, X31
	137 Move X8, [X8]
	138 Move X0, X8
	139 Call String.Format, X0, X1
	140 Move X1, X0
	141 Move X0, X20
	142 Move X2, X31
	143 Call String.Concat, X0, X1
	144 Move X8, 0x57A000
	145 Move X8, [X8+2600]
	146 Move X20, X0
	147 Move X8, [X8]
	148 Move W9, [X8+224]
	149 Compare W9, 0
	150 JumpIfNotEqual {153}
	151 Move X0, X8
	152 Call 0x1C17DFC
	153 Move X0, X20
	154 Move X1, X19
	155 Move X20, [X31+16]
	156 Move X19, [X31+24]
	157 Move X2, X31
	158 Move X30, [X31+32]
	159 Move X21, [X31+40]
	160 Call Debug.LogError, X0, X1
	161 Return 
	162 Move X20, [X31+16]
	163 Move X19, [X31+24]
	164 Move X30, [X31+32]
	165 Move X21, [X31+40]
	166 Return 
	167 Call 0x1C17F20

Method: System.Void OnBeginLocomotion(UnityEngine.XR.Interaction.Toolkit.LocomotionSystem system)

Disassembly:
	0x03B7B384 LDR V3, [X19 + 0x64]
	0x03B7B388 FSUB S1, S4, S1
	0x03B7B38C FMOV S4, W31

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+376]
	003 Move X1, [X8+384]
	004 CallNoReturn X2

Method: System.Void OnEndLocomotion(UnityEngine.XR.Interaction.Toolkit.LocomotionSystem system)

Disassembly:
	0x03B7B390 FCSEL S2, S2, S4, NE
	0x03B7B394 CMP W24, 0x0
	0x03B7B398 FSUB S0, S3, S0

ISIL:
	001 Move X8, [X0]
	002 Move X2, [X8+376]
	003 Move X1, [X8+384]
	004 CallNoReturn X2

Method: UnityEngine.XR.Interaction.Toolkit.XRRig get_xrRig()

Disassembly:
	0x03B7B39C FCSEL S1, S1, S4, NE
	0x03B7B3A0 CMP W23, 0x0
	0x03B7B3A4 FCSEL S0, S0, S4, NE
	0x03B7B3A8 BL 0x3C40988
	0x03B7B3AC MOV V10.16B, V0.16B
	0x03B7B3B0 MOV V9.16B, V1.16B
	0x03B7B3B4 MOV V8.16B, V2.16B
	0x03B7B3B8 CBZ X21, 0x3B7B3F8
	0x03B7B3BC MOV X0, X21
	0x03B7B3C0 MOV X1, X31
	0x03B7B3C4 BL 0x3C3F58C
	0x03B7B3C8 FADD S1, S9, S1
	0x03B7B3CC FADD S2, S8, S2
	0x03B7B3D0 MOV X0, X21
	0x03B7B3D4 LDP X20, X19, [X31 + 0x50]
	0x03B7B3D8 LDP X22, X21, [X31 + 0x40]
	0x03B7B3DC LDP X24, X23, [X31 + 0x30]
	0x03B7B3E0 LDP X30, X25, [X31 + 0x20]
	0x03B7B3E4 LDP D9, D8, [X31 + 0x10]
	0x03B7B3E8 FADD S0, S10, S0
	0x03B7B3EC MOV X1, X31
	0x03B7B3F0 LDR V10, [X31], #0x60
	0x03B7B3F4 B 0x3C3F62C
	0x03B7B3F8 BL 0x1C16F20
	0x03B7B3FC STP X30, X21, [X31 - 0x20]!
	0x03B7B400 STP X20, X19, [X31 + 0x10]
	0x03B7B404 ADRP X21, 0x867000
	0x03B7B408 LDRB W8, [X21 + 0xA97]
	0x03B7B40C MOV X20, X1
	0x03B7B410 MOV X19, X0
	0x03B7B414 TBNZ X8, 0x0, 0x3B7B438

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x868000
	005 Move W8, [X20+2697]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x5E1000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2697], W8
	016 Move X8, [X19+48]
	017 Compare X8, 0
	018 JumpIfEqual {26}
	019 Move X9, 0x5E1000
	020 Move X9, [X9+3264]
	021 Move X10, [X8]
	022 Move X9, [X9]
	023 Move W12, [X10+304]
	024 Move W11, [X9+304]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, X31
	027 Move X10, [X10+200]
	028 Add X10, X10, X11
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03B7B418 ADRP X0, 0x5E0000
	0x03B7B41C LDR X0, [X0 + 0xD08]
	0x03B7B420 BL 0x1C16CF4
	0x03B7B424 ADRP X0, 0x5E0000

ISIL:
	001 Move W8, 0x7F800000
	002 Move X1, X31
	003 Move [X0+44], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 

