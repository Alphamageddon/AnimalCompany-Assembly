Type: UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase

Method: System.Single get_moveSpeed()

Disassembly:
	0x03B7D73C MOV V8.16B, V1.16B
	0x03B7D740 MOV V9.16B, V0.16B

ISIL:
	001 Move V0, [X0+72]
	002 Return V0

Method: System.Void set_moveSpeed(System.Single value)

Disassembly:
	0x03B7D744 MOV X19, X0
	0x03B7D748 CBNZ W8, 0x3B7D760

ISIL:
	001 Move [X0+72], S0
	002 Return 

Method: System.Boolean get_enableStrafe()

Disassembly:
	0x03B7D74C ADRP X0, 0x576000
	0x03B7D750 LDR X0, [X0 + 0x5A8]

ISIL:
	001 Move W0, [X0+76]
	002 Return X0

Method: System.Void set_enableStrafe(System.Boolean value)

Disassembly:
	0x03B7D754 BL 0x1C16CF4
	0x03B7D758 MOVZ W8, 0x1
	0x03B7D75C STRB W8, [X20 + 0x818]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+76], W8
	003 Return 

Method: System.Boolean get_enableFly()

Disassembly:
	0x03B7D760 ADRP X8, 0x576000
	0x03B7D764 LDR X8, [X8 + 0x5A8]

ISIL:
	001 Move W0, [X0+77]
	002 Return X0

Method: System.Void set_enableFly(System.Boolean value)

Disassembly:
	0x03B7D768 LDR X0, [X8]
	0x03B7D76C LDR W8, [X0 + 0xE0]
	0x03B7D770 CBNZ W8, 0x3B7D778

ISIL:
	001 And W8, W1, 1
	002 Move [X0+77], W8
	003 Return 

Method: System.Boolean get_useGravity()

Disassembly:
	0x03B7D774 BL 0x1C16DFC
	0x03B7D778 FMUL S1, S9, S9

ISIL:
	001 Move W0, [X0+78]
	002 Return X0

Method: System.Void set_useGravity(System.Boolean value)

Disassembly:
	0x03B7D77C FMUL S2, S8, S8
	0x03B7D780 LDR V0, [X19 + 0x88]
	0x03B7D784 FADD S1, S1, S2

ISIL:
	001 And W8, W1, 1
	002 Move [X0+78], W8
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/GravityApplicationMode get_gravityApplicationMode()

Disassembly:
	0x03B7D788 FSQRT S10, S1
	0x03B7D78C FABS S1, S10

ISIL:
	001 Move W0, [X0+80]
	002 Return X0

Method: System.Void set_gravityApplicationMode(UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/GravityApplicationMode value)

Disassembly:
	0x03B7D790 FCMP S1, S0
	0x03B7D794 FMOV S11, W31

ISIL:
	001 Move [X0+80], W1
	002 Return 

Method: UnityEngine.Transform get_forwardSource()

Disassembly:
	0x03B7D798 B.MI 0x3B7D7C8
	0x03B7D79C LDR V2, [X19 + 0x8C]

ISIL:
	001 Move X0, [X0+88]
	002 Return X0

Method: System.Void set_forwardSource(UnityEngine.Transform value)

Disassembly:
	0x03B7D7A0 FCMP S10, 0x0
	0x03B7D7A4 FMOV S3, -1

ISIL:
	001 Move [X0+88], X1
	002 Return 

Method: System.Void Update()

Disassembly:
	0x03B7D7A8 FMOV S4, 1
	0x03B7D7AC FCSEL S11, S4, S3, GE
	0x03B7D7B0 FCMP S1, S2
	0x03B7D7B4 B.GT 0x3B7D7C8
	0x03B7D7B8 FSUB S1, S1, S0
	0x03B7D7BC FSUB S0, S2, S0
	0x03B7D7C0 FDIV S0, S1, S0
	0x03B7D7C4 FMUL S11, S11, S0
	0x03B7D7C8 ADRP X19, 0x85C000
	0x03B7D7CC LDRB W8, [X19 + 0x5AA]
	0x03B7D7D0 CBNZ W8, 0x3B7D7E8
	0x03B7D7D4 ADRP X0, 0x57D000
	0x03B7D7D8 LDR X0, [X0 + 0x4B8]
	0x03B7D7DC BL 0x1C16CF4
	0x03B7D7E0 MOVZ W8, 0x1
	0x03B7D7E4 STRB W8, [X19 + 0x5AA]
	0x03B7D7E8 ADRP X8, 0x57D000
	0x03B7D7EC LDR X8, [X8 + 0x4B8]
	0x03B7D7F0 ADRP X9, 0xFFFFFFFFFCF6D000
	0x03B7D7F4 LDR V0, [X9 + 0x240]
	0x03B7D7F8 FABS S1, S11
	0x03B7D7FC LDR X8, [X8]
	0x03B7D800 FMOV S2, W31
	0x03B7D804 FMAXNM S1, S1, S2
	0x03B7D808 FMUL S0, S1, S0
	0x03B7D80C LDR X8, [X8 + 0xB8]
	0x03B7D810 FMOV S1, 8
	0x03B7D814 LDR V3, [X8]
	0x03B7D818 FMUL S1, S3, S1
	0x03B7D81C FCMP S0, S1
	0x03B7D820 FCSEL S0, S0, S1, GT
	0x03B7D824 FABD S1, S2, S2
	0x03B7D828 FCMP S1, S0
	0x03B7D82C B.PL 0x3B7D868
	0x03B7D830 ADRP X19, 0x85C000
	0x03B7D834 LDRB W8, [X19 + 0x78F]
	0x03B7D838 CBNZ W8, 0x3B7D850
	0x03B7D83C ADRP X0, 0x57E000
	0x03B7D840 LDR X0, [X0 + 0xF08]
	0x03B7D844 BL 0x1C16CF4
	0x03B7D848 MOVZ W8, 0x1
	0x03B7D84C STRB W8, [X19 + 0x78F]
	0x03B7D850 ADRP X8, 0x57E000
	0x03B7D854 LDR X8, [X8 + 0xF08]
	0x03B7D858 LDR X8, [X8]
	0x03B7D85C LDR X8, [X8 + 0xB8]
	0x03B7D860 LDP S0, S1, [X8]
	0x03B7D864 B 0x3B7D874
	0x03B7D868 FDIV S1, S11, S10
	0x03B7D86C FMUL S0, S9, S1
	0x03B7D870 FMUL S1, S8, S1
	0x03B7D874 LDP X20, X19, [X31 + 0x30]
	0x03B7D878 LDR X30, [X31 + 0x20]
	0x03B7D87C LDP D9, D8, [X31 + 0x10]
	0x03B7D880 LDP D11, D10, [X31], #0x40
	0x03B7D884 RET
	0x03B7D888 LDR V2, [X0 + 0x88]
	0x03B7D88C FABS S3, S0
	0x03B7D890 MOV V1.16B, V0.16B
	0x03B7D894 FMOV S0, W31
	0x03B7D898 FCMP S3, S2
	0x03B7D89C B.MI 0x3B7D8CC
	0x03B7D8A0 LDR V4, [X0 + 0x8C]
	0x03B7D8A4 FCMP S1, 0x0
	0x03B7D8A8 FMOV S0, -1
	0x03B7D8AC FMOV S1, 1
	0x03B7D8B0 FCSEL S0, S1, S0, GE
	0x03B7D8B4 FCMP S3, S4
	0x03B7D8B8 B.GT 0x3B7D8CC
	0x03B7D8BC FSUB S1, S3, S2
	0x03B7D8C0 FSUB S2, S4, S2
	0x03B7D8C4 FDIV S1, S1, S2
	0x03B7D8C8 FMUL S0, S0, S1
	0x03B7D8CC RET
	0x03B7D8D0 STR X30, [X31 - 0x30]!
	0x03B7D8D4 STP X22, X21, [X31 + 0x10]
	0x03B7D8D8 STP X20, X19, [X31 + 0x20]
	0x03B7D8DC ADRP X21, 0x865000
	0x03B7D8E0 ADRP X22, 0x5DE000
	0x03B7D8E4 ADRP X20, 0x5DE000
	0x03B7D8E8 LDRB W8, [X21 + 0xAAB]
	0x03B7D8EC LDR X22, [X22 + 0xDA8]
	0x03B7D8F0 LDR X20, [X20 + 0xDB0]
	0x03B7D8F4 MOV X19, X0
	0x03B7D8F8 TBNZ X8, 0x0, 0x3B7D91C
	0x03B7D8FC ADRP X0, 0x5DE000
	0x03B7D900 LDR X0, [X0 + 0xDB0]
	0x03B7D904 BL 0x1C16CF4
	0x03B7D908 ADRP X0, 0x5DE000
	0x03B7D90C LDR X0, [X0 + 0xDA8]
	0x03B7D910 BL 0x1C16CF4
	0x03B7D914 MOVZ W8, 0x1
	0x03B7D918 STRB W8, [X21 + 0xAAB]
	0x03B7D91C LDR X0, [X22]
	0x03B7D920 BL 0x1C16F10
	0x03B7D924 LDR X1, [X20]
	0x03B7D928 MOV X20, X0
	0x03B7D92C BL 0x301B7C4
	0x03B7D930 ADRP X8, 0xFFFFFFFFFCF70000
	0x03B7D934 LDR V0, [X8 + 0xC00]
	0x03B7D938 MOVZ W9, 0x3F800000
	0x03B7D93C MOVZ W8, 0x1
	0x03B7D940 STR X20, [X19 + 0x80]
	0x03B7D944 STR W9, [X19 + 0x48]
	0x03B7D948 STRB W8, [X19 + 0x4C]
	0x03B7D94C STR D0, [X19 + 0x88]
	0x03B7D950 STRB W8, [X19 + 0x4E]
	0x03B7D954 MOV X0, X19
	0x03B7D958 LDP X20, X19, [X31 + 0x20]
	0x03B7D95C LDP X22, X21, [X31 + 0x10]
	0x03B7D960 MOV X1, X31
	0x03B7D964 LDR X30, [X31], #0x30
	0x03B7D968 B 0x3C36C30
	0x03B7D96C STP X30, X21, [X31 - 0x20]!
	0x03B7D970 STP X20, X19, [X31 + 0x10]
	0x03B7D974 ADRP X19, 0x865000
	0x03B7D978 ADRP X21, 0x5DE000
	0x03B7D97C ADRP X20, 0x57B000
	0x03B7D980 LDRB W8, [X19 + 0xAAC]
	0x03B7D984 LDR X21, [X21 + 0xDB8]
	0x03B7D988 LDR X20, [X20 + 0x158]
	0x03B7D98C TBNZ X8, 0x0, 0x3B7D9BC
	0x03B7D990 ADRP X0, 0x57B000
	0x03B7D994 LDR X0, [X0 + 0x158]
	0x03B7D998 BL 0x1C16CF4
	0x03B7D99C ADRP X0, 0x5DE000
	0x03B7D9A0 LDR X0, [X0 + 0xD90]
	0x03B7D9A4 BL 0x1C16CF4
	0x03B7D9A8 ADRP X0, 0x5DE000

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x866000
	011 Move W8, [X20+2725]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x577000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2725], W8
	022 Move X8, [X19+48]
	023 Move [X19+105], W31
	024 Compare X8, 0
	025 JumpIfEqual {147}
	026 Move X9, [X8+48]
	027 Move X8, 0x577000
	028 Move X8, [X8+1432]
	029 Compare X9, 0
	030 JumpIfEqual {32}
	031 Move X20, [X9+56]
	032 Move X20, X31
	033 Move X0, [X8]
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Move X0, X20
	039 Move X1, X31
	040 Move X2, X31
	041 Call Object.op_Equality, X0, X1
	042 Move TEMP, X0
	043 And TEMP, TEMP, 1
	044 Compare TEMP, 1
	045 JumpIfEqual {137}
	046 Move X8, [X19]
	047 Move X0, X19
	048 Move X9, [X8+392]
	049 Move X1, [X8+400]
	050 NotImplemented "Instruction BLR not yet implemented."
	051 Move X8, [X19]
	052 Move X0, X19
	053 Move V11, V0
	054 Move V12, V1
	055 Move X9, [X8+408]
	056 Move X1, [X8+416]
	057 NotImplemented "Instruction BLR not yet implemented."
	058 Move W8, [X19+80]
	059 Move V9, V0
	060 Move V8, V1
	061 Move V10, V2
	062 Compare W8, 0
	063 JumpIfEqual {65}
	064 NotImplemented "Instruction CMP not yet implemented."
	065 Move X20, 0x85D000
	066 Move W8, [X20+1935]
	067 Compare W8, 0
	068 JumpIfNotEqual {74}
	069 Move X0, 0x57F000
	070 Move X0, [X0+3848]
	071 Call 0x1C17CF4
	072 Move W8, 1
	073 Move [X20+1935], W8
	074 Move X8, 0x57F000
	075 Move X8, [X8+3848]
	076 Move X8, [X8]
	077 Move X8, [X8+184]
	078 Move S0, [X8]
	079 Move S1, [X8+4]
	080 Move X8, -50933760
	081 Move V13, [X8+3872]
	082 Subtract S0, S11, S0
	083 Subtract S1, S12, S1
	084 Multiply S0, S0, S0
	085 Multiply S1, S1, S1
	086 Add S0, S0, S1
	087 NotImplemented "Instruction FCMP not yet implemented."
	088 Move X20, 0x85C000
	089 Move V11, [X19+108]
	090 Move W8, [X20+1923]
	091 Move V12, [X19+112]
	092 Compare W8, 0
	093 JumpIfNotEqual {99}
	094 Move X0, 0x577000
	095 Move X0, [X0+1440]
	096 Call 0x1C17CF4
	097 Move W8, 1
	098 Move [X20+1923], W8
	099 Move X8, 0x577000
	100 Move X8, [X8+1440]
	101 Move X8, [X8]
	102 Move X8, [X8+184]
	103 Move V0, [X8]
	104 NotImplemented "Instruction LDUR not yet implemented."
	105 Subtract S0, S11, S0
	106 Subtract V1, V12, V1
	107 Multiply S0, S0, S0
	108 NotImplemented "Instruction INVALID not yet implemented."
	109 Add S0, S0, S1
	110 Move S1, V1.S[1]
	111 Add S0, S1, S0
	112 NotImplemented "Instruction FCMP not yet implemented."
	113 Move X8, [X19]
	114 Move X0, X19
	115 Move V0, V9
	116 Move V1, V8
	117 Move X9, [X8+424]
	118 Move X1, [X8+432]
	119 Move V2, V10
	120 NotImplemented "Instruction BLR not yet implemented."
	121 Move W8, [X19+56]
	122 NotImplemented "Instruction CMP not yet implemented."
	123 NotImplemented "Instruction CMP not yet implemented."
	124 Move W8, [X19+105]
	125 Move W8, W8
	126 ShiftRight W8, 31
	127 And W8, W8, 0x3FFFFFFF
	128 Move W8, [X19+105]
	129 Compare W8, 0
	130 JumpIfEqual {137}
	131 Move W8, 2
	132 Move W8, [X19+105]
	133 Compare W8, 0
	134 JumpIfNotEqual {137}
	135 Move W8, 3
	136 Move [X19+56], W8
	137 Move X20, [X31+64]
	138 Move X19, [X31+72]
	139 Move X30, [X31+48]
	140 Move D9, [X31+32]
	141 Move D8, [X31+40]
	142 Move D11, [X31+16]
	143 Move D10, [X31+24]
	144 Move D13, [X31+80]
	145 Move D12, [X31+88]
	146 Return 
	147 Call 0x1C17F20

Method: UnityEngine.Vector2 ReadInput()

Disassembly:
	

ISIL:
No ISIL was generated
Method: UnityEngine.Vector3 ComputeDesiredMove(UnityEngine.Vector2 input)

Disassembly:
	0x03B7D9AC LDR X0, [X0 + 0xDB8]
	0x03B7D9B0 BL 0x1C16CF4
	0x03B7D9B4 MOVZ W8, 0x1
	0x03B7D9B8 STRB W8, [X19 + 0xAAC]
	0x03B7D9BC LDR X0, [X21]
	0x03B7D9C0 MOVZ W1, 0x2
	0x03B7D9C4 BL 0x1C16D6C
	0x03B7D9C8 LDR X8, [X20]
	0x03B7D9CC MOV X19, X0
	0x03B7D9D0 LDR W9, [X8 + 0xE0]
	0x03B7D9D4 CBNZ W9, 0x3B7D9E4
	0x03B7D9D8 MOV X0, X8
	0x03B7D9DC BL 0x1C16DFC
	0x03B7D9E0 LDR X8, [X20]
	0x03B7D9E4 CBZ X19, 0x3B7DA38
	0x03B7D9E8 LDR W9, [X19 + 0x18]
	0x03B7D9EC CBZ W9, 0x3B7DA34
	0x03B7D9F0 LDR X8, [X8 + 0xB8]
	0x03B7D9F4 CMP W9, 0x1
	0x03B7D9F8 LDR X8, [X8 + 0x88]
	0x03B7D9FC STR X8, [X19 + 0x20]
	0x03B7DA00 B.EQ 0x3B7DA34
	0x03B7DA04 LDR X8, [X20]
	0x03B7DA08 ADRP X9, 0x5DE000
	0x03B7DA0C LDR X8, [X8 + 0xB8]
	0x03B7DA10 LDR X8, [X8 + 0x90]
	0x03B7DA14 LDR X9, [X9 + 0xD90]
	0x03B7DA18 STR X8, [X19 + 0x28]
	0x03B7DA1C LDR X8, [X9]
	0x03B7DA20 LDR X8, [X8 + 0xB8]
	0x03B7DA24 STR X19, [X8]
	0x03B7DA28 LDP X20, X19, [X31 + 0x10]
	0x03B7DA2C LDP X30, X21, [X31], #0x20
	0x03B7DA30 RET
	0x03B7DA34 BL 0x1C16F28
	0x03B7DA38 BL 0x1C16F20
	0x03B7DA3C LDR W0, [X0 + 0x50]
	0x03B7DA40 RET
	0x03B7DA44 STR W1, [X0 + 0x50]
	0x03B7DA48 RET
	0x03B7DA4C LDR X0, [X0 + 0x58]
	0x03B7DA50 RET
	0x03B7DA54 STR X1, [X0 + 0x58]
	0x03B7DA58 RET
	0x03B7DA5C LDR V0, [X0 + 0x60]
	0x03B7DA60 RET
	0x03B7DA64 STR S0, [X0 + 0x60]
	0x03B7DA68 RET
	0x03B7DA6C LDR V0, [X0 + 0x64]
	0x03B7DA70 RET
	0x03B7DA74 STR S0, [X0 + 0x64]
	0x03B7DA78 RET
	0x03B7DA7C SUB X31, X31, 0x70
	0x03B7DA80 STP D9, D8, [X31 + 0x20]
	0x03B7DA84 STP X30, X25, [X31 + 0x30]
	0x03B7DA88 STP X24, X23, [X31 + 0x40]
	0x03B7DA8C STP X22, X21, [X31 + 0x50]
	0x03B7DA90 STP X20, X19, [X31 + 0x60]
	0x03B7DA94 ADRP X20, 0x865000
	0x03B7DA98 LDRB W8, [X20 + 0xAAD]
	0x03B7DA9C MOV X19, X0
	0x03B7DAA0 TBNZ X8, 0x0, 0x3B7DAE8
	0x03B7DAA4 ADRP X0, 0x5DE000
	0x03B7DAA8 LDR X0, [X0 + 0xDC0]
	0x03B7DAAC BL 0x1C16CF4
	0x03B7DAB0 ADRP X0, 0x5DE000
	0x03B7DAB4 LDR X0, [X0 + 0xD98]
	0x03B7DAB8 BL 0x1C16CF4
	0x03B7DABC ADRP X0, 0x5DE000
	0x03B7DAC0 LDR X0, [X0 + 0xDA0]
	0x03B7DAC4 BL 0x1C16CF4
	0x03B7DAC8 ADRP X0, 0x576000
	0x03B7DACC LDR X0, [X0 + 0x598]
	0x03B7DAD0 BL 0x1C16CF4
	0x03B7DAD4 ADRP X0, 0x5DE000
	0x03B7DAD8 LDR X0, [X0 + 0x2B0]
	0x03B7DADC BL 0x1C16CF4
	0x03B7DAE0 MOVZ W8, 0x1
	0x03B7DAE4 STRB W8, [X20 + 0xAAD]
	0x03B7DAE8 STP X31, X31, [X31 + 0x10]
	0x03B7DAEC STR X31, [X31 + 0x8]
	0x03B7DAF0 LDR X8, [X19 + 0x58]
	0x03B7DAF4 CBZ X8, 0x3B7DC60
	0x03B7DAF8 ADRP X21, 0x85C000
	0x03B7DAFC LDRB W9, [X21 + 0x78F]
	0x03B7DB00 LDR W20, [X8 + 0x18]
	0x03B7DB04 CBNZ W9, 0x3B7DB1C
	0x03B7DB08 ADRP X0, 0x57E000
	0x03B7DB0C LDR X0, [X0 + 0xF08]
	0x03B7DB10 BL 0x1C16CF4
	0x03B7DB14 MOVZ W8, 0x1
	0x03B7DB18 STRB W8, [X21 + 0x78F]
	0x03B7DB1C ADRP X8, 0x57E000
	0x03B7DB20 LDR X8, [X8 + 0xF08]
	0x03B7DB24 LDR X8, [X8]
	0x03B7DB28 LDR X8, [X8 + 0xB8]
	0x03B7DB2C LDP S8, S9, [X8]
	0x03B7DB30 CBZ W20, 0x3B7DC64
	0x03B7DB34 ADRP X20, 0x5DE000
	0x03B7DB38 LDR X20, [X20 + 0xDC0]
	0x03B7DB3C LDR X0, [X20]
	0x03B7DB40 LDR W8, [X0 + 0xE0]
	0x03B7DB44 CBNZ W8, 0x3B7DB50
	0x03B7DB48 BL 0x1C16DFC
	0x03B7DB4C LDR X0, [X20]
	0x03B7DB50 LDR X8, [X0 + 0xB8]
	0x03B7DB54 LDR X8, [X8]
	0x03B7DB58 CBZ X8, 0x3B7DC60
	0x03B7DB5C LDRSW X9, [X19 + 0x50]
	0x03B7DB60 LDR W10, [X8 + 0x18]
	0x03B7DB64 CMP W9, W10
	0x03B7DB68 B.CS 0x3B7DC88
	0x03B7DB6C LDR X0, [X19 + 0x58]
	0x03B7DB70 CBZ X0, 0x3B7DC60
	0x03B7DB74 ADD X8, X8, X9, 0x3, LSL
	0x03B7DB78 ADRP X23, 0x5DE000
	0x03B7DB7C ADRP X24, 0x5DE000
	0x03B7DB80 ADRP X25, 0x576000
	0x03B7DB84 LDR X21, [X8 + 0x20]
	0x03B7DB88 LDR X23, [X23 + 0xDA0]
	0x03B7DB8C LDR X24, [X24 + 0x2B0]
	0x03B7DB90 LDR X25, [X25 + 0x598]
	0x03B7DB94 MOV W20, W31
	0x03B7DB98 LDR W8, [X0 + 0x18]
	0x03B7DB9C CMP W20, W8
	0x03B7DBA0 B.GE 0x3B7DC64
	0x03B7DBA4 LDR X2, [X23]
	0x03B7DBA8 MOV W1, W20
	0x03B7DBAC BL 0x301BCCC
	0x03B7DBB0 CBZ X0, 0x3B7DBCC
	0x03B7DBB4 LDR X9, [X0]
	0x03B7DBB8 LDR X8, [X24]
	0x03B7DBBC LDRB W11, [X9 + 0x130]
	0x03B7DBC0 LDRB W10, [X8 + 0x130]
	0x03B7DBC4 CMP W11, W10
	0x03B7DBC8 B.CS 0x3B7DBD4
	0x03B7DBCC MOV X22, X31
	0x03B7DBD0 B 0x3B7DBE8
	0x03B7DBD4 LDR X9, [X9 + 0xC8]
	0x03B7DBD8 ADD X9, X9, X10, 0x3, LSL
	0x03B7DBDC LDUR X9, [X9 - 0x8]
	0x03B7DBE0 CMP X9, X8
	0x03B7DBE4 CSEL X22, X0, X31, EQ
	0x03B7DBE8 LDR X0, [X25]
	0x03B7DBEC LDR W8, [X0 + 0xE0]
	0x03B7DBF0 CBNZ W8, 0x3B7DBF8
	0x03B7DBF4 BL 0x1C16DFC
	0x03B7DBF8 MOV X0, X22
	0x03B7DBFC MOV X1, X31
	0x03B7DC00 MOV X2, X31
	0x03B7DC04 BL 0x3C354F8
	0x03B7DC08 TBZ X0, 0x0, 0x3B7DC54
	0x03B7DC0C CBZ X22, 0x3B7DC60
	0x03B7DC10 LDRB W8, [X22 + 0x25]
	0x03B7DC14 CBZ W8, 0x3B7DC54
	0x03B7DC18 MOV X0, X22
	0x03B7DC1C MOV X1, X31
	0x03B7DC20 BL 0x3B34C50
	0x03B7DC24 STP X0, X1, [X31 + 0x8]
	0x03B7DC28 ADD X0, X31, 0x8
	0x03B7DC2C ADD X2, X31, 0x18
	0x03B7DC30 MOV X1, X21
	0x03B7DC34 MOV X3, X31
	0x03B7DC38 BL 0x3E643E0
	0x03B7DC3C TBZ X0, 0x0, 0x3B7DC54
	0x03B7DC40 LDP S0, S1, [X31 + 0x18]
	0x03B7DC44 MOV X0, X19
	0x03B7DC48 BL 0x3B7DC8C
	0x03B7DC4C FADD S8, S8, S0
	0x03B7DC50 FADD S9, S9, S1
	0x03B7DC54 LDR X0, [X19 + 0x58]
	0x03B7DC58 ADD W20, W20, 0x1
	0x03B7DC5C CBNZ X0, 0x3B7DB98
	0x03B7DC60 BL 0x1C16F20
	0x03B7DC64 MOV V0.16B, V8.16B
	0x03B7DC68 MOV V1.16B, V9.16B
	0x03B7DC6C LDP X20, X19, [X31 + 0x60]
	0x03B7DC70 LDP X22, X21, [X31 + 0x50]
	0x03B7DC74 LDP X24, X23, [X31 + 0x40]
	0x03B7DC78 LDP X30, X25, [X31 + 0x30]
	0x03B7DC7C LDP D9, D8, [X31 + 0x20]
	0x03B7DC80 ADD X31, X31, 0x70
	0x03B7DC84 RET
	0x03B7DC88 BL 0x1C16F28
	0x03B7DC8C STP D11, D10, [X31 - 0x40]!
	0x03B7DC90 STP D9, D8, [X31 + 0x10]
	0x03B7DC94 STR X30, [X31 + 0x20]
	0x03B7DC98 STP X20, X19, [X31 + 0x30]
	0x03B7DC9C ADRP X20, 0x85C000
	0x03B7DCA0 LDRB W8, [X20 + 0x818]
	0x03B7DCA4 MOV V8.16B, V1.16B
	0x03B7DCA8 MOV V9.16B, V0.16B
	0x03B7DCAC MOV X19, X0
	0x03B7DCB0 CBNZ W8, 0x3B7DCC8
	0x03B7DCB4 ADRP X0, 0x576000
	0x03B7DCB8 LDR X0, [X0 + 0x5A8]
	0x03B7DCBC BL 0x1C16CF4
	0x03B7DCC0 MOVZ W8, 0x1
	0x03B7DCC4 STRB W8, [X20 + 0x818]
	0x03B7DCC8 ADRP X8, 0x576000
	0x03B7DCCC LDR X8, [X8 + 0x5A8]
	0x03B7DCD0 LDR X0, [X8]
	0x03B7DCD4 LDR W8, [X0 + 0xE0]
	0x03B7DCD8 CBNZ W8, 0x3B7DCE0
	0x03B7DCDC BL 0x1C16DFC
	0x03B7DCE0 FMUL S1, S9, S9
	0x03B7DCE4 FMUL S2, S8, S8
	0x03B7DCE8 LDR V0, [X19 + 0x60]
	0x03B7DCEC FADD S1, S1, S2
	0x03B7DCF0 FSQRT S10, S1
	0x03B7DCF4 FABS S1, S10
	0x03B7DCF8 FCMP S1, S0
	0x03B7DCFC FMOV S11, W31
	0x03B7DD00 B.MI 0x3B7DD30
	0x03B7DD04 LDR V2, [X19 + 0x64]
	0x03B7DD08 FCMP S10, 0x0
	0x03B7DD0C FMOV S3, -1
	0x03B7DD10 FMOV S4, 1
	0x03B7DD14 FCSEL S11, S4, S3, GE
	0x03B7DD18 FCMP S1, S2
	0x03B7DD1C B.GT 0x3B7DD30
	0x03B7DD20 FSUB S1, S1, S0
	0x03B7DD24 FSUB S0, S2, S0
	0x03B7DD28 FDIV S0, S1, S0
	0x03B7DD2C FMUL S11, S11, S0
	0x03B7DD30 ADRP X19, 0x85C000
	0x03B7DD34 LDRB W8, [X19 + 0x5AA]
	0x03B7DD38 CBNZ W8, 0x3B7DD50
	0x03B7DD3C ADRP X0, 0x57D000
	0x03B7DD40 LDR X0, [X0 + 0x4B8]
	0x03B7DD44 BL 0x1C16CF4
	0x03B7DD48 MOVZ W8, 0x1
	0x03B7DD4C STRB W8, [X19 + 0x5AA]
	0x03B7DD50 ADRP X8, 0x57D000
	0x03B7DD54 LDR X8, [X8 + 0x4B8]
	0x03B7DD58 ADRP X9, 0xFFFFFFFFFCF6D000
	0x03B7DD5C LDR V0, [X9 + 0x240]
	0x03B7DD60 FABS S1, S11
	0x03B7DD64 LDR X8, [X8]
	0x03B7DD68 FMOV S2, W31
	0x03B7DD6C FMAXNM S1, S1, S2
	0x03B7DD70 FMUL S0, S1, S0
	0x03B7DD74 LDR X8, [X8 + 0xB8]
	0x03B7DD78 FMOV S1, 8
	0x03B7DD7C LDR V3, [X8]
	0x03B7DD80 FMUL S1, S3, S1
	0x03B7DD84 FCMP S0, S1
	0x03B7DD88 FCSEL S0, S0, S1, GT
	0x03B7DD8C FABD S1, S2, S2
	0x03B7DD90 FCMP S1, S0
	0x03B7DD94 B.PL 0x3B7DDD0
	0x03B7DD98 ADRP X19, 0x85C000
	0x03B7DD9C LDRB W8, [X19 + 0x78F]
	0x03B7DDA0 CBNZ W8, 0x3B7DDB8
	0x03B7DDA4 ADRP X0, 0x57E000
	0x03B7DDA8 LDR X0, [X0 + 0xF08]
	0x03B7DDAC BL 0x1C16CF4
	0x03B7DDB0 MOVZ W8, 0x1
	0x03B7DDB4 STRB W8, [X19 + 0x78F]
	0x03B7DDB8 ADRP X8, 0x57E000
	0x03B7DDBC LDR X8, [X8 + 0xF08]
	0x03B7DDC0 LDR X8, [X8]
	0x03B7DDC4 LDR X8, [X8 + 0xB8]
	0x03B7DDC8 LDP S0, S1, [X8]
	0x03B7DDCC B 0x3B7DDDC
	0x03B7DDD0 FDIV S1, S11, S10
	0x03B7DDD4 FMUL S0, S9, S1
	0x03B7DDD8 FMUL S1, S8, S1
	0x03B7DDDC LDP X20, X19, [X31 + 0x30]
	0x03B7DDE0 LDR X30, [X31 + 0x20]
	0x03B7DDE4 LDP D9, D8, [X31 + 0x10]
	0x03B7DDE8 LDP D11, D10, [X31], #0x40
	0x03B7DDEC RET
	0x03B7DDF0 LDR V2, [X0 + 0x60]
	0x03B7DDF4 FABS S3, S0
	0x03B7DDF8 MOV V1.16B, V0.16B

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+96], X22
	012 Move [X31+104], X21
	013 Move [X31+112], X20
	014 Move [X31+120], X19
	015 Move X20, 0x866000
	016 Move W8, [X20+2726]
	017 Move V8, V1
	018 Move V9, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {29}
	024 Move X0, 0x577000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X20+2726], W8
	029 Move X20, 0x85D000
	030 Move W8, [X20+1935]
	031 Compare W8, 0
	032 JumpIfNotEqual {38}
	033 Move X0, 0x57F000
	034 Move X0, [X0+3848]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X20+1935], W8
	038 Move X8, 0x57F000
	039 Move X8, [X8+3848]
	040 Move X8, [X8]
	041 Move X8, [X8+184]
	042 Move S0, [X8]
	043 Move S1, [X8+4]
	044 Move X8, -50933760
	045 Move V2, [X8+3872]
	046 Subtract S0, S9, S0
	047 Subtract S1, S8, S1
	048 Multiply S0, S0, S0
	049 Multiply S1, S1, S1
	050 Add S0, S0, S1
	051 NotImplemented "Instruction FCMP not yet implemented."
	052 Move X8, [X19+48]
	053 Compare X8, 0
	054 JumpIfEqual {308}
	055 Move X21, 0x577000
	056 Move X21, [X21+1432]
	057 Move X20, [X8+48]
	058 Move X0, [X21]
	059 Move W9, [X0+224]
	060 Compare W9, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X20
	064 Move X1, X31
	065 Move X2, X31
	066 Call Object.op_Equality, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {102}
	071 Move X19, 0x85C000
	072 Move W8, [X19+1923]
	073 Compare W8, 0
	074 JumpIfNotEqual {80}
	075 Move X0, 0x577000
	076 Move X0, [X0+1440]
	077 Call 0x1C17CF4
	078 Move W8, 1
	079 Move [X19+1923], W8
	080 Move X8, 0x577000
	081 Move X8, [X8+1440]
	082 Move X8, [X8]
	083 Move X8, [X8+184]
	084 Move S0, [X8]
	085 Move S1, [X8+4]
	086 Move V2, [X8+8]
	087 Move X20, [X31+112]
	088 Move X19, [X31+120]
	089 Move X22, [X31+96]
	090 Move X21, [X31+104]
	091 Move X30, [X31+80]
	092 Move D9, [X31+64]
	093 Move D8, [X31+72]
	094 Move D11, [X31+48]
	095 Move D10, [X31+56]
	096 Move D13, [X31+32]
	097 Move D12, [X31+40]
	098 Move D15, [X31+16]
	099 Move D14, [X31+24]
	100 Add X31, X31, 128
	101 Return X0
	102 Move W8, [X19+76]
	103 Move X22, 0x85D000
	104 Move W9, [X22+1891]
	105 Move S10, W31
	106 NotImplemented "Instruction CMP not yet implemented."
	107 NotImplemented "Instruction FCSEL not yet implemented."
	108 Compare W9, 0
	109 JumpIfNotEqual {115}
	110 Move X0, 0x577000
	111 Move X0, [X0+1448]
	112 Call 0x1C17CF4
	113 Move W8, 1
	114 Move [X22+1891], W8
	115 Multiply S0, S9, S9
	116 Multiply S1, S8, S8
	117 Add S0, S0, S10
	118 Add S11, S1, S0
	119 Move S0, 1
	120 NotImplemented "Instruction FCMP not yet implemented."
	121 Move X8, 0x577000
	122 Move X8, [X8+1448]
	123 Move X0, [X8]
	124 Move W8, [X0+224]
	125 Compare W8, 0
	126 JumpIfNotEqual {128}
	127 Call 0x1C17DFC
	128 NotImplemented "Instruction FSQRT not yet implemented."
	129 Move S1, W31
	130 NotImplemented "Instruction FDIV not yet implemented."
	131 NotImplemented "Instruction FDIV not yet implemented."
	132 NotImplemented "Instruction FDIV not yet implemented."
	133 Move X0, [X21]
	134 Move X21, [X19+88]
	135 Move W8, [X0+224]
	136 Compare W8, 0
	137 JumpIfNotEqual {139}
	138 Call 0x1C17DFC
	139 Move X0, X21
	140 Move X1, X31
	141 Move X2, X31
	142 Call Object.op_Equality, X0, X1
	143 Move TEMP, X0
	144 And TEMP, TEMP, 1
	145 Compare TEMP, 1
	146 JumpIfNotEqual {155}
	147 Compare X20, 0
	148 JumpIfEqual {308}
	149 Move X0, [X20+32]
	150 Compare X0, 0
	151 JumpIfEqual {308}
	152 Move X1, X31
	153 Call Component.get_transform, X0
	154 Move X21, X0
	155 Move X21, [X19+88]
	156 Compare X21, 0
	157 JumpIfEqual {308}
	158 Move X0, X21
	159 Move X1, X31
	160 Call Transform.get_forward, X0
	161 Compare X20, 0
	162 JumpIfEqual {308}
	163 Move X0, [X20+56]
	164 Compare X0, 0
	165 JumpIfEqual {308}
	166 Move X1, X31
	167 Move V13, V0
	168 Move V12, V1
	169 Move V11, V2
	170 Call GameObject.get_transform, X0
	171 Move V15, [X19+72]
	172 Move X20, X0
	173 Move X0, X31
	174 Call Time.get_deltaTime
	175 Compare X20, 0
	176 JumpIfEqual {308}
	177 Move X0, X20
	178 Move X1, X31
	179 Move V14, V0
	180 Call Transform.get_localScale, X0
	181 Move W8, [X19+77]
	182 Multiply S1, S15, S14
	183 Multiply S15, S1, S0
	184 Compare W8, 0
	185 JumpIfEqual {201}
	186 Move X0, X21
	187 Move X1, X31
	188 Call Transform.get_right, X0
	189 Multiply S0, S9, S0
	190 Multiply S1, S9, S1
	191 Multiply S2, S9, S2
	192 Multiply S3, S8, S13
	193 Multiply S4, S8, S12
	194 Multiply S5, S8, S11
	195 Add S0, S3, S0
	196 Add S1, S4, S1
	197 Add S2, S5, S2
	198 Multiply S0, S15, S0
	199 Multiply S1, S15, S1
	200 Multiply S2, S15, S2
	201 Move X0, X20
	202 Move X1, X31
	203 Call Transform.get_up, X0
	204 Move X19, 0x85D000
	205 Move V6, V0
	206 Move V5, V1
	207 Multiply S0, S13, S0
	208 Multiply S1, S12, S1
	209 Move W8, [X19+1450]
	210 Add S0, S0, S1
	211 Multiply S1, S11, S2
	212 Add S0, S1, S0
	213 NotImplemented "Instruction FABS not yet implemented."
	214 Move [X31+92], S2
	215 Compare W8, 0
	216 JumpIfNotEqual {226}
	217 Move X0, 0x57E000
	218 Move X0, [X0+1208]
	219 Move [X31+88], S5
	220 Move [X31+12], S6
	221 Call 0x1C17CF4
	222 Move V6, [X31+12]
	223 Move V5, [X31+88]
	224 Move W8, 1
	225 Move [X19+1450], W8
	226 Move X19, 0x57E000
	227 Move X19, [X19+1208]
	228 Move X9, -50929664
	229 Move V1, [X9+576]
	230 Move S0, 1
	231 Move X8, [X19]
	232 Move S3, 8
	233 NotImplemented "Instruction FMAXNM not yet implemented."
	234 Multiply S1, S4, S1
	235 Move X8, [X8+184]
	236 NotImplemented "Instruction FABD not yet implemented."
	237 Move V2, [X8]
	238 Multiply S2, S2, S3
	239 NotImplemented "Instruction FCMP not yet implemented."
	240 NotImplemented "Instruction FCSEL not yet implemented."
	241 NotImplemented "Instruction FCMP not yet implemented."
	242 Move X0, X21
	243 Move X1, X31
	244 Move V11, V5
	245 Move V12, V6
	246 Call Transform.get_up, X0
	247 Move V6, V12
	248 Move V5, V11
	249 NotImplemented "Instruction FNEG not yet implemented."
	250 NotImplemented "Instruction FNEG not yet implemented."
	251 NotImplemented "Instruction FNEG not yet implemented."
	252 Move X21, 0x85C000
	253 Move V14, [X31+92]
	254 Move W8, [X21+3641]
	255 Compare W8, 0
	256 JumpIfNotEqual {266}
	257 Move X0, 0x57E000
	258 Move X0, [X0+1208]
	259 Move [X31+88], S5
	260 Move [X31+12], S6
	261 Call 0x1C17CF4
	262 Move V6, [X31+12]
	263 Move V5, [X31+88]
	264 Move W8, 1
	265 Move [X21+3641], W8
	266 Move X8, [X19]
	267 Multiply S0, S6, S6
	268 Multiply S1, S5, S5
	269 Add S0, S0, S1
	270 Move X8, [X8+184]
	271 Multiply S1, S14, S14
	272 Add S0, S1, S0
	273 Move V2, [X8]
	274 NotImplemented "Instruction FCMP not yet implemented."
	275 Multiply S1, S6, S13
	276 Multiply S2, S5, S12
	277 Multiply S3, S14, S11
	278 Add S1, S2, S1
	279 Add S1, S3, S1
	280 Multiply S2, S6, S1
	281 Multiply S3, S5, S1
	282 Multiply S1, S14, S1
	283 NotImplemented "Instruction FDIV not yet implemented."
	284 NotImplemented "Instruction FDIV not yet implemented."
	285 NotImplemented "Instruction FDIV not yet implemented."
	286 Subtract S13, S13, S2
	287 Subtract S12, S12, S3
	288 Subtract S11, S11, S0
	289 Move X0, X20
	290 Move X1, X31
	291 Call Transform.get_forward, X0
	292 Move V3, V13
	293 Move V4, V12
	294 Move V5, V11
	295 Move X0, X31
	296 Call Quaternion.FromToRotation, X0, X1
	297 Move V4, V9
	298 Move V5, V10
	299 Move V6, V8
	300 Move X0, X31
	301 Call Quaternion.op_Multiply, X0, X1
	302 Multiply S0, S15, S0
	303 Multiply S1, S15, S1
	304 Multiply S2, S15, S2
	305 Move X0, X20
	306 Move X1, X31
	307 Call Transform.TransformDirection, X0, X1
	308 Call 0x1C17F20

Method: System.Void MoveRig(UnityEngine.Vector3 translationInWorldSpace)

Disassembly:
	0x03B7DDFC FMOV S0, W31
	0x03B7DE00 FCMP S3, S2
	0x03B7DE04 B.MI 0x3B7DE34
	0x03B7DE08 LDR V4, [X0 + 0x64]
	0x03B7DE0C FCMP S1, 0x0
	0x03B7DE10 FMOV S0, -1
	0x03B7DE14 FMOV S1, 1
	0x03B7DE18 FCSEL S0, S1, S0, GE
	0x03B7DE1C FCMP S3, S4
	0x03B7DE20 B.GT 0x3B7DE34
	0x03B7DE24 FSUB S1, S3, S2
	0x03B7DE28 FSUB S2, S4, S2
	0x03B7DE2C FDIV S1, S1, S2
	0x03B7DE30 FMUL S0, S0, S1
	0x03B7DE34 RET
	0x03B7DE38 STR X30, [X31 - 0x30]!
	0x03B7DE3C STP X22, X21, [X31 + 0x10]
	0x03B7DE40 STP X20, X19, [X31 + 0x20]
	0x03B7DE44 ADRP X21, 0x865000
	0x03B7DE48 ADRP X22, 0x5DE000
	0x03B7DE4C ADRP X20, 0x5DE000
	0x03B7DE50 LDRB W8, [X21 + 0xAAE]
	0x03B7DE54 LDR X22, [X22 + 0xDA8]
	0x03B7DE58 LDR X20, [X20 + 0xDB0]
	0x03B7DE5C MOV X19, X0
	0x03B7DE60 TBNZ X8, 0x0, 0x3B7DE84
	0x03B7DE64 ADRP X0, 0x5DE000
	0x03B7DE68 LDR X0, [X0 + 0xDB0]
	0x03B7DE6C BL 0x1C16CF4
	0x03B7DE70 ADRP X0, 0x5DE000
	0x03B7DE74 LDR X0, [X0 + 0xDA8]
	0x03B7DE78 BL 0x1C16CF4
	0x03B7DE7C MOVZ W8, 0x1
	0x03B7DE80 STRB W8, [X21 + 0xAAE]
	0x03B7DE84 LDR X0, [X22]
	0x03B7DE88 BL 0x1C16F10
	0x03B7DE8C LDR X1, [X20]
	0x03B7DE90 MOV X20, X0
	0x03B7DE94 BL 0x301B7C4
	0x03B7DE98 ADRP X8, 0xFFFFFFFFFCF70000
	0x03B7DE9C LDR V0, [X8 + 0xC00]
	0x03B7DEA0 MOVZ W8, 0x42700000
	0x03B7DEA4 STR X20, [X19 + 0x58]
	0x03B7DEA8 STR W8, [X19 + 0x48]
	0x03B7DEAC STR D0, [X19 + 0x60]
	0x03B7DEB0 MOV X0, X19
	0x03B7DEB4 LDP X20, X19, [X31 + 0x20]
	0x03B7DEB8 LDP X22, X21, [X31 + 0x10]
	0x03B7DEBC MOV X1, X31
	0x03B7DEC0 LDR X30, [X31], #0x30
	0x03B7DEC4 B 0x3C36C30
	0x03B7DEC8 STP X30, X21, [X31 - 0x20]!
	0x03B7DECC STP X20, X19, [X31 + 0x10]
	0x03B7DED0 ADRP X19, 0x865000
	0x03B7DED4 ADRP X21, 0x5DE000
	0x03B7DED8 ADRP X20, 0x57B000
	0x03B7DEDC LDRB W8, [X19 + 0xAAF]
	0x03B7DEE0 LDR X21, [X21 + 0xDB8]
	0x03B7DEE4 LDR X20, [X20 + 0x158]
	0x03B7DEE8 TBNZ X8, 0x0, 0x3B7DF18
	0x03B7DEEC ADRP X0, 0x57B000
	0x03B7DEF0 LDR X0, [X0 + 0x158]
	0x03B7DEF4 BL 0x1C16CF4
	0x03B7DEF8 ADRP X0, 0x5DE000
	0x03B7DEFC LDR X0, [X0 + 0xDC0]
	0x03B7DF00 BL 0x1C16CF4
	0x03B7DF04 ADRP X0, 0x5DE000
	0x03B7DF08 LDR X0, [X0 + 0xDB8]
	0x03B7DF0C BL 0x1C16CF4
	0x03B7DF10 MOVZ W8, 0x1
	0x03B7DF14 STRB W8, [X19 + 0xAAF]
	0x03B7DF18 LDR X0, [X21]
	0x03B7DF1C MOVZ W1, 0x2
	0x03B7DF20 BL 0x1C16D6C
	0x03B7DF24 LDR X8, [X20]
	0x03B7DF28 MOV X19, X0
	0x03B7DF2C LDR W9, [X8 + 0xE0]
	0x03B7DF30 CBNZ W9, 0x3B7DF40
	0x03B7DF34 MOV X0, X8
	0x03B7DF38 BL 0x1C16DFC
	0x03B7DF3C LDR X8, [X20]
	0x03B7DF40 CBZ X19, 0x3B7DF94
	0x03B7DF44 LDR W9, [X19 + 0x18]
	0x03B7DF48 CBZ W9, 0x3B7DF90
	0x03B7DF4C LDR X8, [X8 + 0xB8]
	0x03B7DF50 CMP W9, 0x1
	0x03B7DF54 LDR X8, [X8 + 0x88]
	0x03B7DF58 STR X8, [X19 + 0x20]
	0x03B7DF5C B.EQ 0x3B7DF90
	0x03B7DF60 LDR X8, [X20]
	0x03B7DF64 ADRP X9, 0x5DE000
	0x03B7DF68 LDR X8, [X8 + 0xB8]
	0x03B7DF6C LDR X8, [X8 + 0x90]
	0x03B7DF70 LDR X9, [X9 + 0xDC0]
	0x03B7DF74 STR X8, [X19 + 0x28]
	0x03B7DF78 LDR X8, [X9]
	0x03B7DF7C LDR X8, [X8 + 0xB8]
	0x03B7DF80 STR X19, [X8]
	0x03B7DF84 LDP X20, X19, [X31 + 0x10]
	0x03B7DF88 LDP X30, X21, [X31], #0x20
	0x03B7DF8C RET
	0x03B7DF90 BL 0x1C16F28
	0x03B7DF94 BL 0x1C16F20
	0x03B7DF98 LDR X0, [X0 + 0x68]
	0x03B7DF9C RET
	0x03B7DFA0 STR X1, [X0 + 0x68]
	0x03B7DFA4 B 0x3B7DFA8
	0x03B7DFA8 STR X30, [X31 - 0x20]!
	0x03B7DFAC STP X20, X19, [X31 + 0x10]
	0x03B7DFB0 ADRP X20, 0x865000
	0x03B7DFB4 LDRB W8, [X20 + 0xAB2]
	0x03B7DFB8 MOV X19, X0
	0x03B7DFBC TBNZ X8, 0x0, 0x3B7DFEC
	0x03B7DFC0 ADRP X0, 0x5DE000
	0x03B7DFC4 LDR X0, [X0 + 0xDC8]
	0x03B7DFC8 BL 0x1C16CF4
	0x03B7DFCC ADRP X0, 0x5DE000
	0x03B7DFD0 LDR X0, [X0 + 0xD30]
	0x03B7DFD4 BL 0x1C16CF4
	0x03B7DFD8 ADRP X0, 0x576000
	0x03B7DFDC LDR X0, [X0 + 0x598]
	0x03B7DFE0 BL 0x1C16CF4
	0x03B7DFE4 MOVZ W8, 0x1
	0x03B7DFE8 STRB W8, [X20 + 0xAB2]
	0x03B7DFEC LDR X8, [X19 + 0xA0]
	0x03B7DFF0 CBZ X8, 0x3B7E084
	0x03B7DFF4 LDP W2, W9, [X8 + 0x18]
	0x03B7DFF8 ADRP X20, 0x576000
	0x03B7DFFC LDR X20, [X20 + 0x598]
	0x03B7E000 ADD W9, W9, 0x1
	0x03B7E004 CMP W2, 0x1
	0x03B7E008 STP W31, W9, [X8 + 0x18]
	0x03B7E00C B.LT 0x3B7E020
	0x03B7E010 LDR X0, [X8 + 0x10]
	0x03B7E014 MOV W1, W31
	0x03B7E018 MOV X3, X31
	0x03B7E01C BL 0x339FA34
	0x03B7E020 LDR X0, [X20]
	0x03B7E024 LDR X20, [X19 + 0x68]
	0x03B7E028 LDR W8, [X0 + 0xE0]
	0x03B7E02C CBNZ W8, 0x3B7E034
	0x03B7E030 BL 0x1C16DFC
	0x03B7E034 MOV X0, X20
	0x03B7E038 MOV X1, X31
	0x03B7E03C MOV X2, X31
	0x03B7E040 BL 0x3C354F8
	0x03B7E044 TBZ X0, 0x0, 0x3B7E078
	0x03B7E048 LDR X0, [X19 + 0x68]
	0x03B7E04C CBZ X0, 0x3B7E084
	0x03B7E050 MOV X1, X31
	0x03B7E054 BL 0x3C32E90
	0x03B7E058 CBZ X0, 0x3B7E084
	0x03B7E05C ADRP X8, 0x5DD000
	0x03B7E060 LDR X1, [X19 + 0xA0]
	0x03B7E064 LDR X8, [X8 + 0xDC8]
	0x03B7E068 LDP X20, X19, [X31 + 0x10]
	0x03B7E06C LDR X2, [X8]
	0x03B7E070 LDR X30, [X31], #0x20
	0x03B7E074 B 0x21A4608
	0x03B7E078 LDP X20, X19, [X31 + 0x10]
	0x03B7E07C LDR X30, [X31], #0x20
	0x03B7E080 RET
	0x03B7E084 BL 0x1C16F20
	0x03B7E088 LDRB W0, [X0 + 0x70]
	0x03B7E08C RET
	0x03B7E090 AND W8, W1, 0x1
	0x03B7E094 STRB W8, [X0 + 0x70]
	0x03B7E098 RET

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Move X20, 0x866000
	015 Move W8, [X20+2727]
	016 Move V8, V2
	017 Move V9, V1
	018 Move V10, V0
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x577000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move X0, 0x577000
	028 Move X0, [X0+1528]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2727], W8
	032 Move X8, [X19+48]
	033 Compare X8, 0
	034 JumpIfEqual {227}
	035 Move X21, 0x577000
	036 Move X8, [X8+48]
	037 Move X21, [X21+1432]
	038 Compare X8, 0
	039 JumpIfEqual {41}
	040 Move X20, [X8+56]
	041 Move X20, X31
	042 Move X0, [X21]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {188}
	055 Move X0, X19
	056 Call ContinuousMoveProviderBase.FindCharacterController, X0
	057 Move X0, [X21]
	058 Move X21, [X19+96]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X0, X21
	064 Move X1, X31
	065 Move X2, X31
	066 Call Object.op_Inequality, X0, X1
	067 Move TEMP, X0
	068 And TEMP, TEMP, 1
	069 Compare TEMP, 1
	070 JumpIfNotEqual {142}
	071 Move X0, [X19+96]
	072 Compare X0, 0
	073 JumpIfEqual {227}
	074 Move X1, X31
	075 Call Collider.get_enabled, X0
	076 Move TEMP, X0
	077 And TEMP, TEMP, 1
	078 Compare TEMP, 1
	079 JumpIfNotEqual {142}
	080 Move X0, [X19+96]
	081 Compare X0, 0
	082 JumpIfEqual {227}
	083 Move X1, X31
	084 Call CharacterController.get_isGrounded, X0
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfEqual {95}
	089 Move W8, [X19+78]
	090 Compare W8, 0
	091 JumpIfEqual {95}
	092 Move W8, [X19+77]
	093 Compare W8, 0
	094 JumpIfEqual {202}
	095 Move X20, 0x85C000
	096 Move W8, [X20+1923]
	097 Compare W8, 0
	098 JumpIfNotEqual {104}
	099 Move X0, 0x577000
	100 Move X0, [X0+1440]
	101 Call 0x1C17CF4
	102 Move W8, 1
	103 Move [X20+1923], W8
	104 Move X8, 0x577000
	105 Move X8, [X8+1440]
	106 Move X8, [X8]
	107 Move X8, [X8+184]
	108 Move S12, [X8]
	109 Move S13, [X8+4]
	110 Move V14, [X8+8]
	111 Move X0, X31
	112 Move [X19+108], S12
	113 Move [X19+116], S13
	114 Move [X19+116], S14
	115 Call Time.get_deltaTime
	116 Move X0, X19
	117 Move V11, V0
	118 Call LocomotionProvider.CanBeginLocomotion, X0
	119 Move TEMP, X0
	120 And TEMP, TEMP, 1
	121 Compare TEMP, 1
	122 JumpIfNotEqual {188}
	123 Move X0, X19
	124 Call LocomotionProvider.BeginLocomotion, X0
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfNotEqual {188}
	129 Move X0, [X19+96]
	130 Move W8, 1
	131 Move [X19+105], W8
	132 Compare X0, 0
	133 JumpIfEqual {227}
	134 Multiply S0, S12, S11
	135 Multiply S1, S13, S11
	136 Multiply S2, S14, S11
	137 Add S0, S10, S0
	138 Add S1, S9, S1
	139 Add S2, S8, S2
	140 Move X1, X31
	141 Call CharacterController.Move, X0, X1
	142 Move X0, X19
	143 Call LocomotionProvider.CanBeginLocomotion, X0
	144 Move TEMP, X0
	145 And TEMP, TEMP, 1
	146 Compare TEMP, 1
	147 JumpIfNotEqual {188}
	148 Move X0, X19
	149 Call LocomotionProvider.BeginLocomotion, X0
	150 Move TEMP, X0
	151 And TEMP, TEMP, 1
	152 Compare TEMP, 1
	153 JumpIfNotEqual {188}
	154 Move W8, 1
	155 Move [X19+105], W8
	156 Compare X20, 0
	157 JumpIfEqual {227}
	158 Move X0, X20
	159 Move X1, X31
	160 Call GameObject.get_transform, X0
	161 Compare X0, 0
	162 JumpIfEqual {227}
	163 Move X1, X31
	164 Move X20, X0
	165 Call Transform.get_position, X0
	166 Add S0, S10, S0
	167 Add S1, S9, S1
	168 Add S2, S8, S2
	169 Move X0, X20
	170 Move X1, X31
	171 Call Transform.set_position, X0, X1
	172 Move X0, X19
	173 Move X20, [X31+96]
	174 Move X19, [X31+104]
	175 Move X30, [X31+80]
	176 Move X21, [X31+88]
	177 Move D9, [X31+64]
	178 Move D8, [X31+72]
	179 Move D11, [X31+48]
	180 Move D10, [X31+56]
	181 Move D13, [X31+32]
	182 Move D12, [X31+40]
	183 Move D15, [X31+16]
	184 Move D14, [X31+24]
	185 Add X31, X31, 112
	186 Call LocomotionProvider.EndLocomotion, X0
	187 Return 
	188 Move X20, [X31+96]
	189 Move X19, [X31+104]
	190 Move X30, [X31+80]
	191 Move X21, [X31+88]
	192 Move D9, [X31+64]
	193 Move D8, [X31+72]
	194 Move D11, [X31+48]
	195 Move D10, [X31+56]
	196 Move D13, [X31+32]
	197 Move D12, [X31+40]
	198 Move D15, [X31+16]
	199 Move D14, [X31+24]
	200 Add X31, X31, 112
	201 Return 
	202 Move X8, 0x576000
	203 Move X8, [X8+1528]
	204 Move S14, [X19+108]
	205 Move S0, [X19+112]
	206 Move V15, [X19+116]
	207 Move X0, [X8]
	208 Move [X31+12], S0
	209 Move W8, [X0+224]
	210 Compare W8, 0
	211 JumpIfNotEqual {213}
	212 Call 0x1C17DFC
	213 Move X0, X31
	214 Call Physics.get_gravity
	215 Move X0, X31
	216 Move V11, V0
	217 Move V12, V1
	218 Move V13, V2
	219 Call Time.get_deltaTime
	220 Multiply S1, S11, S0
	221 Multiply S2, S12, S0
	222 Add S12, S14, S1
	223 Move V1, [X31+12]
	224 Multiply S0, S13, S0
	225 Add S14, S15, S0
	226 Add S13, S1, S2
	227 Call 0x1C17F20

Method: System.Void FindCharacterController()

Disassembly:
	0x03B7E09C LDR V0, [X0 + 0x74]
	0x03B7E0A0 RET
	0x03B7E0A4 STR S0, [X0 + 0x74]
	0x03B7E0A8 RET
	0x03B7E0AC LDR X9, [X0 + 0x88]
	0x03B7E0B0 LDUR V0, [X0 + 0x78]
	0x03B7E0B4 STR X9, [X8 + 0x10]
	0x03B7E0B8 STR V0, [X8]
	0x03B7E0BC RET
	0x03B7E0C0 SUB X31, X31, 0x30
	0x03B7E0C4 STR X30, [X31 + 0x20]
	0x03B7E0C8 LDR X8, [X1 + 0x10]
	0x03B7E0CC LDR V0, [X1]
	0x03B7E0D0 ADD X1, X0, 0x78
	0x03B7E0D4 ADD X2, X31, 0x0
	0x03B7E0D8 STR X8, [X31 + 0x10]
	0x03B7E0DC STR V0, [X31]
	0x03B7E0E0 BL 0x3B7E0F0
	0x03B7E0E4 LDR X30, [X31 + 0x20]
	0x03B7E0E8 ADD X31, X31, 0x30
	0x03B7E0EC RET
	0x03B7E0F0 SUB X31, X31, 0x70
	0x03B7E0F4 STP X30, X23, [X31 + 0x40]
	0x03B7E0F8 STP X22, X21, [X31 + 0x50]
	0x03B7E0FC STP X20, X19, [X31 + 0x60]
	0x03B7E100 ADRP X23, 0x864000
	0x03B7E104 ADRP X22, 0x575000
	0x03B7E108 LDRB W8, [X23 + 0xAB4]
	0x03B7E10C LDR X22, [X22 + 0x970]
	0x03B7E110 MOV X21, X2
	0x03B7E114 MOV X19, X1
	0x03B7E118 MOV X20, X0
	0x03B7E11C TBNZ X8, 0x0, 0x3B7E134
	0x03B7E120 ADRP X0, 0x575000
	0x03B7E124 LDR X0, [X0 + 0x970]
	0x03B7E128 BL 0x1C16CF4
	0x03B7E12C MOVZ W8, 0x1
	0x03B7E130 STRB W8, [X23 + 0xAB4]
	0x03B7E134 LDR X0, [X22]
	0x03B7E138 LDR W8, [X0 + 0xE0]
	0x03B7E13C CBNZ W8, 0x3B7E144
	0x03B7E140 BL 0x1C16DFC
	0x03B7E144 MOV X0, X31
	0x03B7E148 BL 0x3C018E4
	0x03B7E14C TBZ X0, 0x0, 0x3B7E16C
	0x03B7E150 LDR X8, [X19 + 0x10]
	0x03B7E154 LDR V0, [X19]
	0x03B7E158 ADD X0, X31, 0x20
	0x03B7E15C MOV X1, X31
	0x03B7E160 STR X8, [X31 + 0x30]
	0x03B7E164 STR V0, [X31 + 0x2]
	0x03B7E168 BL 0x3BB99F0
	0x03B7E16C LDR X8, [X21 + 0x10]
	0x03B7E170 LDR V0, [X21]
	0x03B7E174 STR X8, [X19 + 0x10]
	0x03B7E178 STR V0, [X19]
	0x03B7E17C LDR X0, [X22]
	0x03B7E180 LDR W8, [X0 + 0xE0]
	0x03B7E184 CBNZ W8, 0x3B7E18C
	0x03B7E188 BL 0x1C16DFC
	0x03B7E18C MOV X0, X31
	0x03B7E190 BL 0x3C018E4
	0x03B7E194 TBZ X0, 0x0, 0x3B7E1C4
	0x03B7E198 MOV X0, X20
	0x03B7E19C MOV X1, X31
	0x03B7E1A0 BL 0x3C32454
	0x03B7E1A4 TBZ X0, 0x0, 0x3B7E1C4
	0x03B7E1A8 LDR X8, [X19 + 0x10]
	0x03B7E1AC LDR V0, [X19]
	0x03B7E1B0 ADD X0, X31, 0x0
	0x03B7E1B4 MOV X1, X31
	0x03B7E1B8 STR X8, [X31 + 0x10]
	0x03B7E1BC STR V0, [X31]
	0x03B7E1C0 BL 0x3BB9958
	0x03B7E1C4 LDP X20, X19, [X31 + 0x60]
	0x03B7E1C8 LDP X22, X21, [X31 + 0x50]
	0x03B7E1CC LDP X30, X23, [X31 + 0x40]
	0x03B7E1D0 ADD X31, X31, 0x70
	0x03B7E1D4 RET
	0x03B7E1D8 LDRB W0, [X0 + 0x90]
	0x03B7E1DC RET
	0x03B7E1E0 AND W8, W1, 0x1
	0x03B7E1E4 STRB W8, [X0 + 0x90]
	0x03B7E1E8 RET
	0x03B7E1EC STP X30, X21, [X31 - 0x20]!
	0x03B7E1F0 STP X20, X19, [X31 + 0x10]
	0x03B7E1F4 ADRP X21, 0x864000
	0x03B7E1F8 ADRP X20, 0x575000
	0x03B7E1FC LDRB W8, [X21 + 0xAB0]
	0x03B7E200 LDR X20, [X20 + 0x598]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x865000
	008 Move W8, [X20+2728]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x59D000
	015 Move X0, [X0+2352]
	016 Call 0x1C17CF4
	017 Move X0, 0x5DE000
	018 Move X0, [X0+3432]
	019 Call 0x1C17CF4
	020 Move X0, 0x576000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2728], W8
	025 Move X8, [X19+48]
	026 Compare X8, 0
	027 JumpIfEqual {122}
	028 Move X23, 0x576000
	029 Move X8, [X8+48]
	030 Move X23, [X23+1432]
	031 Compare X8, 0
	032 JumpIfEqual {34}
	033 Move X20, [X8+56]
	034 Move X20, X31
	035 Move X0, [X23]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {115}
	048 Move X21, X19
	049 Add X21, X21, 96
	050 Move X22, [X21]
	051 Move X0, [X23]
	052 Move W8, [X0+224]
	053 Compare W8, 0
	054 JumpIfNotEqual {56}
	055 Call 0x1C17DFC
	056 Move X0, X22
	057 Move X1, X31
	058 Move X2, X31
	059 Call Object.op_Equality, X0, X1
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {115}
	064 Move W8, [X19+104]
	065 Compare W8, 0
	066 JumpIfNotEqual {115}
	067 Compare X20, 0
	068 JumpIfEqual {122}
	069 Move X8, 0x5DE000
	070 Move X8, [X8+3432]
	071 Move X0, X20
	072 Move X1, X21
	073 Move X2, [X8]
	074 Call 0x21E7600, X0, X1
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {113}
	079 Move X8, [X19+48]
	080 Compare X8, 0
	081 JumpIfEqual {122}
	082 Move X0, [X8+48]
	083 Compare X0, 0
	084 JumpIfEqual {122}
	085 Move X1, X31
	086 Call Component.get_gameObject, X0
	087 Move X8, [X23]
	088 Move X22, X0
	089 Move W9, [X8+224]
	090 Compare W9, 0
	091 JumpIfNotEqual {94}
	092 Move X0, X8
	093 Call 0x1C17DFC
	094 Move X0, X20
	095 Move X1, X22
	096 Move X2, X31
	097 Call Object.op_Inequality, X0, X1
	098 Move TEMP, X0
	099 And TEMP, TEMP, 1
	100 Compare TEMP, 1
	101 JumpIfNotEqual {113}
	102 Move X8, [X19+48]
	103 Compare X8, 0
	104 JumpIfEqual {122}
	105 Move X0, [X8+48]
	106 Compare X0, 0
	107 JumpIfEqual {122}
	108 Move X8, 0x59D000
	109 Move X8, [X8+2352]
	110 Move X1, X21
	111 Move X2, [X8]
	112 Call 0x21A5990, X0, X1
	113 Move W8, 1
	114 Move [X19+104], W8
	115 Move X20, [X31+32]
	116 Move X19, [X31+40]
	117 Move X22, [X31+16]
	118 Move X21, [X31+24]
	119 Move X30, [X31+48]
	120 Move X23, [X31+56]
	121 Return 
	122 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B7D2B8 BL 0x1C16CF4
	0x03B7D2BC MOVZ W8, 0x1
	0x03B7D2C0 STRB W8, [X20 + 0xAA9]
	0x03B7D2C4 ADRP X20, 0x85C000
	0x03B7D2C8 LDRB W8, [X20 + 0x5AA]
	0x03B7D2CC CBNZ W8, 0x3B7D2E4
	0x03B7D2D0 ADRP X0, 0x57D000

ISIL:
	001 Move W8, 0x3F800000
	002 Move W9, 1
	003 Move X1, X31
	004 Move [X0+72], W8
	005 Move [X0+76], W9
	006 Move [X0+78], W9
	007 Call MonoBehaviour..ctor, X0
	008 Return 

