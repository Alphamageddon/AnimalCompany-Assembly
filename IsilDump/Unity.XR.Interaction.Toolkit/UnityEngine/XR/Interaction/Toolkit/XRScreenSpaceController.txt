Type: UnityEngine.XR.Interaction.Toolkit.XRScreenSpaceController

Method: System.Boolean get_enableTouchscreenGestureInputController()

Disassembly:
	0x03B37B88 MOV X19, X1
	0x03B37B8C MOV X20, X0

ISIL:
	001 Move W0, [X0+164]
	002 Return X0

Method: System.Void set_enableTouchscreenGestureInputController(System.Boolean value)

Disassembly:
	0x03B37B90 MOV X0, X21
	0x03B37B94 MOV X1, X31
	0x03B37B98 BL 0x3745120

ISIL:
	001 And W8, W1, 1
	002 Move [X0+164], W8
	003 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_tapStartPositionAction()

Disassembly:
	0x03B37B9C CBZ X0, 0x3B37BBC
	0x03B37BA0 MOV X0, X21
	0x03B37BA4 MOV X1, X31
	0x03B37BA8 BL 0x3745120
	0x03B37BAC CBZ X0, 0x3B37C54

ISIL:
	001 Move X9, [X0+184]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_tapStartPositionAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37BB0 MOV X1, X31
	0x03B37BB4 BL 0x3735430
	0x03B37BB8 TBNZ X0, 0x0, 0x3B37BEC
	0x03B37BBC ADD X21, X20, 0x120
	0x03B37BC0 MOV X0, X21
	0x03B37BC4 MOV X1, X31
	0x03B37BC8 BL 0x3745120
	0x03B37BCC CBZ X0, 0x3B37BF4
	0x03B37BD0 MOV X0, X21
	0x03B37BD4 MOV X1, X31
	0x03B37BD8 BL 0x3745120
	0x03B37BDC CBZ X0, 0x3B37C54

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 168
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_dragCurrentPositionAction()

Disassembly:
	0x03B37CC8 MOV X0, X20
	0x03B37CCC MOV X1, X31
	0x03B37CD0 BL 0x3745120
	0x03B37CD4 MOVZ W8, 0x1
	0x03B37CD8 B 0x3B37CE4

ISIL:
	001 Move X9, [X0+208]
	002 Move V0, [X0+12]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_dragCurrentPositionAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37CDC MOV X0, X31
	0x03B37CE0 MOV W8, W31
	0x03B37CE4 STR X0, [X19]
	0x03B37CE8 LDP X20, X19, [X31 + 0x10]
	0x03B37CEC MOV W0, W8
	0x03B37CF0 LDP X30, X21, [X31], #0x20
	0x03B37CF4 RET
	0x03B37CF8 BL 0x1C16F20
	0x03B37CFC STR X30, [X31 - 0x30]!
	0x03B37D00 STP X22, X21, [X31 + 0x10]
	0x03B37D04 STP X20, X19, [X31 + 0x20]
	0x03B37D08 ADRP X21, 0x8AB000

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 192
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_dragDeltaAction()

Disassembly:
	0x03B37D0C ADRP X20, 0x5E3000
	0x03B37D10 LDRB W8, [X21 + 0x80D]
	0x03B37D14 LDR X20, [X20 + 0xDF8]
	0x03B37D18 MOV X19, X0
	0x03B37D1C TBNZ X8, 0x0, 0x3B37D4C

ISIL:
	001 Move X9, [X0+232]
	002 NotImplemented "Instruction LDUR not yet implemented."
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_dragDeltaAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37D20 ADRP X0, 0x5E3000
	0x03B37D24 LDR X0, [X0 + 0xDF8]
	0x03B37D28 BL 0x1C16CF4
	0x03B37D2C ADRP X0, 0x5BC000
	0x03B37D30 LDR X0, [X0 + 0x598]
	0x03B37D34 BL 0x1C16CF4
	0x03B37D38 ADRP X0, 0x623000
	0x03B37D3C LDR X0, [X0 + 0xE8]
	0x03B37D40 BL 0x1C16CF4
	0x03B37D44 MOVZ W8, 0x1
	0x03B37D48 STRB W8, [X21 + 0x80D]
	0x03B37D4C LDR X0, [X20]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 216
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_pinchStartPositionAction()

Disassembly:
	0x03B37D50 ADRP X22, 0x5BC000
	0x03B37D54 LDR W8, [X0 + 0xE0]
	0x03B37D58 LDR X22, [X22 + 0x598]
	0x03B37D5C CBNZ W8, 0x3B37D64
	0x03B37D60 BL 0x1C16DFC

ISIL:
	001 Move X9, [X0+256]
	002 Move V0, [X0+15]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_pinchStartPositionAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37D64 MOV X0, X31
	0x03B37D68 BL 0x3E4FF90
	0x03B37D6C LDR X8, [X22]
	0x03B37D70 MOV X20, X0
	0x03B37D74 LDR W9, [X8 + 0xE0]
	0x03B37D78 CBNZ W9, 0x3B37D84
	0x03B37D7C MOV X0, X8
	0x03B37D80 BL 0x1C16DFC
	0x03B37D84 MOV X0, X20
	0x03B37D88 MOV X1, X31
	0x03B37D8C MOV X2, X31
	0x03B37D90 BL 0x3C354F8

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 240
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_pinchGapAction()

Disassembly:
	0x03B37D94 TBZ X0, 0x0, 0x3B37E14
	0x03B37D98 CBZ X20, 0x3B37E44
	0x03B37D9C LDR X0, [X22]
	0x03B37DA0 LDR X21, [X20 + 0x28]
	0x03B37DA4 LDR W8, [X0 + 0xE0]
	0x03B37DA8 CBNZ W8, 0x3B37DB0

ISIL:
	001 Add X9, X0, 264
	002 Move X10, [X9+16]
	003 Move V0, [X9]
	004 Move [X8+16], X10
	005 Move [X8], V0
	006 Return X0

Method: System.Void set_pinchGapAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37DAC BL 0x1C16DFC
	0x03B37DB0 MOV X0, X21
	0x03B37DB4 MOV X1, X31
	0x03B37DB8 MOV X2, X31
	0x03B37DBC BL 0x3C354F8
	0x03B37DC0 TBZ X0, 0x0, 0x3B37E14
	0x03B37DC4 LDR X8, [X20 + 0x28]
	0x03B37DC8 CBZ X8, 0x3B37DF4
	0x03B37DCC ADRP X9, 0x623000
	0x03B37DD0 LDR X9, [X9 + 0xE8]
	0x03B37DD4 LDR X10, [X8]
	0x03B37DD8 LDR X9, [X9]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 264
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_pinchGapDeltaAction()

Disassembly:
	0x03B37DDC LDRB W12, [X10 + 0x130]
	0x03B37DE0 LDRB W11, [X9 + 0x130]
	0x03B37DE4 CMP W12, W11
	0x03B37DE8 B.CS 0x3B37DFC
	0x03B37DEC MOV X8, X31

ISIL:
	001 Move X9, [X0+304]
	002 Move V0, [X0+18]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_pinchGapDeltaAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37DF0 B 0x3B37E10
	0x03B37DF4 STR X31, [X19 + 0x198]
	0x03B37DF8 B 0x3B37E14
	0x03B37DFC LDR X10, [X10 + 0xC8]
	0x03B37E00 ADD X10, X10, X11, 0x3, LSL
	0x03B37E04 LDUR X10, [X10 - 0x8]
	0x03B37E08 CMP X10, X9
	0x03B37E0C CSEL X8, X8, X31, EQ
	0x03B37E10 STR X8, [X19 + 0x198]
	0x03B37E14 LDR X0, [X22]
	0x03B37E18 LDR X19, [X19 + 0x198]
	0x03B37E1C LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 288
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_twistStartPositionAction()

Disassembly:
	0x03B37E20 CBNZ W8, 0x3B37E28
	0x03B37E24 BL 0x1C16DFC
	0x03B37E28 MOV X0, X19
	0x03B37E2C LDP X20, X19, [X31 + 0x20]
	0x03B37E30 LDP X22, X21, [X31 + 0x10]
	0x03B37E34 MOV X1, X31

ISIL:
	001 Add X9, X0, 312
	002 Move X10, [X9+16]
	003 Move V0, [X9]
	004 Move [X8+16], X10
	005 Move [X8], V0
	006 Return X0

Method: System.Void set_twistStartPositionAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37E38 MOV X2, X31
	0x03B37E3C LDR X30, [X31], #0x30
	0x03B37E40 B 0x3C354F8
	0x03B37E44 BL 0x1C16F20
	0x03B37E48 LDR X9, [X0 + 0x100]
	0x03B37E4C LDR V0, [X0 + 0xF]
	0x03B37E50 STR X9, [X8 + 0x10]
	0x03B37E54 STR V0, [X8]
	0x03B37E58 RET
	0x03B37E5C SUB X31, X31, 0x30
	0x03B37E60 STR X30, [X31 + 0x20]
	0x03B37E64 LDR X8, [X1 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 312
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_twistDeltaRotationAction()

Disassembly:
	0x03B37E68 LDR V0, [X1]
	0x03B37E6C ADD X1, X0, 0xF0
	0x03B37E70 ADD X2, X31, 0x0
	0x03B37E74 STR X8, [X31 + 0x10]
	0x03B37E78 STR V0, [X31]

ISIL:
	001 Move X9, [X0+352]
	002 Move V0, [X0+21]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_twistDeltaRotationAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37E7C BL 0x3B36BE0
	0x03B37E80 LDR X30, [X31 + 0x20]
	0x03B37E84 ADD X31, X31, 0x30
	0x03B37E88 RET
	0x03B37E8C LDR X9, [X0 + 0x130]
	0x03B37E90 LDR V0, [X0 + 0x12]
	0x03B37E94 STR X9, [X8 + 0x10]
	0x03B37E98 STR V0, [X8]
	0x03B37E9C RET
	0x03B37EA0 SUB X31, X31, 0x30
	0x03B37EA4 STR X30, [X31 + 0x20]
	0x03B37EA8 LDR X8, [X1 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 336
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_screenTouchCountAction()

Disassembly:
	0x03B37EAC LDR V0, [X1]
	0x03B37EB0 ADD X1, X0, 0x120
	0x03B37EB4 ADD X2, X31, 0x0
	0x03B37EB8 STR X8, [X31 + 0x10]
	0x03B37EBC STR V0, [X31]
	0x03B37EC0 BL 0x3B36BE0

ISIL:
	001 Add X9, X0, 360
	002 Move X10, [X9+16]
	003 Move V0, [X9]
	004 Move [X8+16], X10
	005 Move [X8], V0
	006 Return X0

Method: System.Void set_screenTouchCountAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37EC4 LDR X30, [X31 + 0x20]
	0x03B37EC8 ADD X31, X31, 0x30
	0x03B37ECC RET
	0x03B37ED0 ADD X9, X0, 0x138
	0x03B37ED4 LDR X10, [X9 + 0x10]
	0x03B37ED8 LDR V0, [X9]
	0x03B37EDC STR X10, [X8 + 0x10]
	0x03B37EE0 STR V0, [X8]
	0x03B37EE4 RET
	0x03B37EE8 SUB X31, X31, 0x30
	0x03B37EEC STR X30, [X31 + 0x20]
	0x03B37EF0 LDR X8, [X1 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 360
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.Camera get_controllerCamera()

Disassembly:
	0x03B37EF4 LDR V0, [X1]
	0x03B37EF8 ADD X1, X0, 0x138

ISIL:
	001 Move X0, [X0+384]
	002 Return X0

Method: System.Void set_controllerCamera(UnityEngine.Camera value)

Disassembly:
	0x03B37EFC ADD X2, X31, 0x0
	0x03B37F00 STR X8, [X31 + 0x10]

ISIL:
	001 Move [X0+384], X1
	002 Return 

Method: System.Boolean get_blockInteractionsWithScreenSpaceUI()

Disassembly:
	0x03B37F04 STR V0, [X31]
	0x03B37F08 BL 0x3B36BE0

ISIL:
	001 Move W0, [X0+392]
	002 Return X0

Method: System.Void set_blockInteractionsWithScreenSpaceUI(System.Boolean value)

Disassembly:
	0x03B37F0C LDR X30, [X31 + 0x20]
	0x03B37F10 ADD X31, X31, 0x30
	0x03B37F14 RET

ISIL:
	001 And W8, W1, 1
	002 Move [X0+392], W8
	003 Return 

Method: System.Single get_scaleDelta()

Disassembly:
	0x03B37F18 LDR X9, [X0 + 0x160]
	0x03B37F1C LDR V0, [X0 + 0x15]

ISIL:
	001 Move V0, [X0+396]
	002 Return V0

Method: System.Void set_scaleDelta(System.Single value)

Disassembly:
	0x03B37F20 STR X9, [X8 + 0x10]
	0x03B37F24 STR V0, [X8]

ISIL:
	001 Move [X0+396], S0
	002 Return 

Method: System.Void Start()

Disassembly:
	0x03B37F28 RET
	0x03B37F2C SUB X31, X31, 0x30
	0x03B37F30 STR X30, [X31 + 0x20]
	0x03B37F34 LDR X8, [X1 + 0x10]
	0x03B37F38 LDR V0, [X1]
	0x03B37F3C ADD X1, X0, 0x150
	0x03B37F40 ADD X2, X31, 0x0
	0x03B37F44 STR X8, [X31 + 0x10]
	0x03B37F48 STR V0, [X31]
	0x03B37F4C BL 0x3B36BE0
	0x03B37F50 LDR X30, [X31 + 0x20]
	0x03B37F54 ADD X31, X31, 0x30
	0x03B37F58 RET
	0x03B37F5C ADD X9, X0, 0x168
	0x03B37F60 LDR X10, [X9 + 0x10]
	0x03B37F64 LDR V0, [X9]
	0x03B37F68 STR X10, [X8 + 0x10]
	0x03B37F6C STR V0, [X8]
	0x03B37F70 RET
	0x03B37F74 SUB X31, X31, 0x30
	0x03B37F78 STR X30, [X31 + 0x20]
	0x03B37F7C LDR X8, [X1 + 0x10]
	0x03B37F80 LDR V0, [X1]
	0x03B37F84 ADD X1, X0, 0x168
	0x03B37F88 ADD X2, X31, 0x0
	0x03B37F8C STR X8, [X31 + 0x10]
	0x03B37F90 STR V0, [X31]
	0x03B37F94 BL 0x3B36BE0
	0x03B37F98 LDR X30, [X31 + 0x20]
	0x03B37F9C ADD X31, X31, 0x30
	0x03B37FA0 RET
	0x03B37FA4 SUB X31, X31, 0x140
	0x03B37FA8 STP X29, X30, [X31 + 0xE0]
	0x03B37FAC STP X28, X27, [X31 + 0xF0]
	0x03B37FB0 STP X26, X25, [X31 + 0x100]
	0x03B37FB4 STP X24, X23, [X31 + 0x110]
	0x03B37FB8 STP X22, X21, [X31 + 0x120]
	0x03B37FBC STP X20, X19, [X31 + 0x130]
	0x03B37FC0 ADRP X26, 0x8AB000
	0x03B37FC4 ADRP X21, 0x5C0000
	0x03B37FC8 ADRP X20, 0x623000
	0x03B37FCC ADRP X27, 0x610000
	0x03B37FD0 ADRP X25, 0x623000
	0x03B37FD4 ADRP X23, 0x623000
	0x03B37FD8 ADRP X22, 0x623000
	0x03B37FDC ADRP X24, 0x5E4000
	0x03B37FE0 ADRP X29, 0x623000
	0x03B37FE4 ADRP X28, 0x623000
	0x03B37FE8 LDR X21, [X21 + 0x3E0]
	0x03B37FEC LDR X20, [X20 + 0xF0]
	0x03B37FF0 LDR X27, [X27 + 0x800]
	0x03B37FF4 LDR X25, [X25 + 0xF8]
	0x03B37FF8 LDR X23, [X23 + 0x100]
	0x03B37FFC LDR X22, [X22 + 0x108]
	0x03B38000 LDR X24, [X24 + 0x518]
	0x03B38004 LDRB W8, [X26 + 0x811]
	0x03B38008 LDR X29, [X29 + 0x110]
	0x03B3800C LDR X28, [X28 + 0x118]
	0x03B38010 MOV X19, X0
	0x03B38014 TBNZ X8, 0x0, 0x3B380B0
	0x03B38018 ADRP X0, 0x5BF000
	0x03B3801C LDR X0, [X0 + 0x3E0]
	0x03B38020 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8AC000
	006 Move X21, 0x5BD000
	007 Move W8, [X20+2058]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5BD000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x5BD000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x624000
	021 Move X0, [X0+200]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+2058], W8
	025 Move X0, [X21]
	026 Move X20, [X19+384]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Equality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {78}
	039 Move X0, X31
	040 Call Camera.get_main
	041 Move [X19+384], X0
	042 Move X20, X0
	043 Move X0, [X21]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Equality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {78}
	056 Move X8, 0x5BD000
	057 Move X8, [X8+2600]
	058 Move X0, [X8]
	059 Move W8, [X0+224]
	060 Compare W8, 0
	061 JumpIfNotEqual {63}
	062 Call 0x1C17DFC
	063 Move X8, 0x624000
	064 Move X8, [X8+200]
	065 Move X1, X19
	066 Move X2, X31
	067 Move X0, [X8]
	068 Call Debug.LogWarning, X0, X1
	069 Move X0, X19
	070 Move X20, [X31+16]
	071 Move X19, [X31+24]
	072 Move W1, W31
	073 Move X2, X31
	074 Move X30, [X31+32]
	075 Move X21, [X31+40]
	076 Call Behaviour.set_enabled, X0, X1
	077 Return 
	078 Move X20, [X31+16]
	079 Move X19, [X31+24]
	080 Move X30, [X31+32]
	081 Move X21, [X31+40]
	082 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03B38024 ADRP X0, 0x622000
	0x03B38028 LDR X0, [X0 + 0xF8]
	0x03B3802C BL 0x1C16CF4
	0x03B38030 ADRP X0, 0x622000
	0x03B38034 LDR X0, [X0 + 0x118]
	0x03B38038 BL 0x1C16CF4

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRBaseController.OnEnable, X0
	005 Move X0, X19
	006 Move X30, [X31+16]
	007 Move X19, [X31+24]

Method: System.Void OnDisable()

Disassembly:
	0x03B38168 LDR X1, [X23]
	0x03B3816C LDR X6, [X27]
	0x03B38170 MOV W2, W31
	0x03B38174 MOV X3, X31
	0x03B38178 MOV X4, X31
	0x03B3817C MOV X5, X31
	0x03B38180 MOV X7, X31
	0x03B38184 MOV X20, X0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, X0
	004 Call XRBaseController.OnDisable, X0
	005 Move X0, X19
	006 Call XRScreenSpaceController.DisableAllDirectActions, X0
	007 Move [X19+408], X31
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Return 

Method: System.Void UpdateTrackingInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)

Disassembly:
	0x03B382B4 LDR X0, [X21]
	0x03B382B8 BL 0x1C16F10
	0x03B382BC LDR X1, [X28]
	0x03B382C0 LDR X6, [X27]
	0x03B382C4 MOV W2, W31
	0x03B382C8 MOV X3, X31
	0x03B382CC MOV X4, X31
	0x03B382D0 MOV X5, X31
	0x03B382D4 MOV X7, X31
	0x03B382D8 MOV X20, X0
	0x03B382DC BL 0x3734C54
	0x03B382E0 ADD X0, X31, 0x38
	0x03B382E4 MOV X1, X20
	0x03B382E8 MOV X2, X31
	0x03B382EC STP X31, X31, [X31 + 0x38]
	0x03B382F0 STR X31, [X31 + 0x48]
	0x03B382F4 BL 0x3745288
	0x03B382F8 LDR X8, [X31 + 0x48]
	0x03B382FC LDUR V0, [X31 + 0x38]
	0x03B38300 ADD X9, X19, 0x138
	0x03B38304 STR X8, [X9 + 0x10]
	0x03B38308 STR V0, [X9]
	0x03B3830C LDR X0, [X21]
	0x03B38310 BL 0x1C16F10
	0x03B38314 ADRP X8, 0x622000
	0x03B38318 LDR X8, [X8 + 0x128]
	0x03B3831C LDR X6, [X24]
	0x03B38320 MOV W2, W31
	0x03B38324 MOV X3, X31
	0x03B38328 LDR X1, [X8]
	0x03B3832C MOV X4, X31
	0x03B38330 MOV X5, X31
	0x03B38334 MOV X7, X31
	0x03B38338 MOV X20, X0
	0x03B3833C BL 0x3734C54
	0x03B38340 ADD X0, X31, 0x20
	0x03B38344 MOV X1, X20
	0x03B38348 MOV X2, X31
	0x03B3834C STP X31, X31, [X31 + 0x20]
	0x03B38350 STR X31, [X31 + 0x30]
	0x03B38354 BL 0x3745288
	0x03B38358 LDR X8, [X31 + 0x30]
	0x03B3835C LDR V0, [X31 + 0x2]
	0x03B38360 STR X8, [X19 + 0x160]
	0x03B38364 STR V0, [X19 + 0x15]
	0x03B38368 LDR X0, [X21]
	0x03B3836C BL 0x1C16F10
	0x03B38370 ADRP X8, 0x622000
	0x03B38374 LDR X8, [X8 + 0x120]
	0x03B38378 MOV W2, W31
	0x03B3837C MOV X3, X31
	0x03B38380 MOV X4, X31
	0x03B38384 LDR X1, [X8]
	0x03B38388 ADRP X8, 0x60F000
	0x03B3838C LDR X8, [X8 + 0x808]
	0x03B38390 MOV X5, X31
	0x03B38394 MOV X7, X31
	0x03B38398 MOV X20, X0
	0x03B3839C LDR X6, [X8]
	0x03B383A0 BL 0x3734C54
	0x03B383A4 ADD X0, X31, 0x8
	0x03B383A8 MOV X1, X20
	0x03B383AC MOV X2, X31
	0x03B383B0 STP X31, X31, [X31 + 0x8]
	0x03B383B4 STR X31, [X31 + 0x18]
	0x03B383B8 BL 0x3745288
	0x03B383BC LDR X8, [X31 + 0x18]
	0x03B383C0 LDUR V0, [X31 + 0x8]
	0x03B383C4 ADD X9, X19, 0x168
	0x03B383C8 MOVZ W10, 0x101
	0x03B383CC MOV X0, X19
	0x03B383D0 MOV X1, X31
	0x03B383D4 STR X8, [X9 + 0x10]
	0x03B383D8 STR V0, [X9]
	0x03B383DC STRB W26, [X19 + 0x188]
	0x03B383E0 STRH W10, [X19 + 0x24]
	0x03B383E4 STRB W26, [X19 + 0x88]
	0x03B383E8 STRB W26, [X19 + 0x99]
	0x03B383EC BL 0x3C36C30
	0x03B383F0 LDP X20, X19, [X31 + 0x130]
	0x03B383F4 LDP X22, X21, [X31 + 0x120]
	0x03B383F8 LDP X24, X23, [X31 + 0x110]
	0x03B383FC LDP X26, X25, [X31 + 0x100]
	0x03B38400 LDP X28, X27, [X31 + 0xF0]
	0x03B38404 LDP X29, X30, [X31 + 0xE0]
	0x03B38408 ADD X31, X31, 0x140
	0x03B3840C RET
	0x03B38410 LDP S0, S1, [X0]
	0x03B38414 LDR V2, [X0 + 0x8]
	0x03B38418 RET
	0x03B3841C STP S0, S1, [X0]
	0x03B38420 STR S2, [X0 + 0x8]
	0x03B38424 RET
	0x03B38428 LDR V0, [X0 + 0xC]
	0x03B3842C RET
	0x03B38430 STR S0, [X0 + 0xC]
	0x03B38434 RET
	0x03B38438 LDR X0, [X0 + 0x10]
	0x03B3843C RET
	0x03B38440 STR X1, [X0 + 0x10]
	0x03B38444 RET
	0x03B38448 STR X30, [X31 - 0x20]!
	0x03B3844C STP X20, X19, [X31 + 0x10]
	0x03B38450 ADRP X20, 0x8AA000
	0x03B38454 LDRB W8, [X20 + 0x812]
	0x03B38458 MOV X19, X0
	0x03B3845C TBNZ X8, 0x0, 0x3B3848C
	0x03B38460 ADRP X0, 0x622000
	0x03B38464 LDR X0, [X0 + 0x130]
	0x03B38468 BL 0x1C16CF4
	0x03B3846C ADRP X0, 0x622000
	0x03B38470 LDR X0, [X0 + 0x138]
	0x03B38474 BL 0x1C16CF4
	0x03B38478 ADRP X0, 0x622000
	0x03B3847C LDR X0, [X0 + 0x140]
	0x03B38480 BL 0x1C16CF4
	0x03B38484 MOVZ W8, 0x1
	0x03B38488 STRB W8, [X20 + 0x812]
	0x03B3848C CBZ X19, 0x3B38544
	0x03B38490 ADRP X20, 0x622000
	0x03B38494 LDR X8, [X19]
	0x03B38498 LDR X20, [X20 + 0x130]
	0x03B3849C LDRH W9, [X8 + 0x12E]
	0x03B384A0 LDR X1, [X20]
	0x03B384A4 CBZ X9, 0x3B384C8
	0x03B384A8 LDR X10, [X8 + 0xB0]
	0x03B384AC ADD X10, X10, 0x8
	0x03B384B0 LDUR X11, [X10 - 0x8]
	0x03B384B4 CMP X11, X1
	0x03B384B8 B.EQ 0x3B384D8
	0x03B384BC SUBS X9, X9, 0x1
	0x03B384C0 ADD X10, X10, 0x10
	0x03B384C4 B.NE 0x3B384B0
	0x03B384C8 MOVZ W2, 0x4
	0x03B384CC MOV X0, X19
	0x03B384D0 BL 0x1C5C788
	0x03B384D4 B 0x3B384E8
	0x03B384D8 LDR W9, [X10]
	0x03B384DC ADD W9, W9, 0x4
	0x03B384E0 ADD X8, X8, W9, 0x4, SXTW
	0x03B384E4 ADD X0, X8, 0x138
	0x03B384E8 LDP X8, X1, [X0]
	0x03B384EC MOV X0, X19
	0x03B384F0 BLR X8
	0x03B384F4 CBZ X0, 0x3B38590
	0x03B384F8 LDR W8, [X0 + 0x18]
	0x03B384FC CMP W8, 0x1
	0x03B38500 B.LT 0x3B38544
	0x03B38504 LDR X8, [X19]
	0x03B38508 LDR X1, [X20]
	0x03B3850C LDRH W9, [X8 + 0x12E]
	0x03B38510 CBZ X9, 0x3B38534
	0x03B38514 LDR X10, [X8 + 0xB0]
	0x03B38518 ADD X10, X10, 0x8
	0x03B3851C LDUR X11, [X10 - 0x8]
	0x03B38520 CMP X11, X1
	0x03B38524 B.EQ 0x3B38554
	0x03B38528 SUBS X9, X9, 0x1
	0x03B3852C ADD X10, X10, 0x10
	0x03B38530 B.NE 0x3B3851C
	0x03B38534 MOVZ W2, 0x4
	0x03B38538 MOV X0, X19
	0x03B3853C BL 0x1C5C788
	0x03B38540 B 0x3B38564
	0x03B38544 LDP X20, X19, [X31 + 0x10]
	0x03B38548 MOV X0, X31
	0x03B3854C LDR X30, [X31], #0x20
	0x03B38550 RET
	0x03B38554 LDR W9, [X10]
	0x03B38558 ADD W9, W9, 0x4
	0x03B3855C ADD X8, X8, W9, 0x4, SXTW
	0x03B38560 ADD X0, X8, 0x138
	0x03B38564 LDP X8, X1, [X0]
	0x03B38568 MOV X0, X19
	0x03B3856C BLR X8
	0x03B38570 CBZ X0, 0x3B38590
	0x03B38574 ADRP X8, 0x622000
	0x03B38578 LDR X8, [X8 + 0x140]
	0x03B3857C LDP X20, X19, [X31 + 0x10]
	0x03B38580 MOV W1, W31
	0x03B38584 LDR X2, [X8]
	0x03B38588 LDR X30, [X31], #0x20
	0x03B3858C B 0x301BCCC
	0x03B38590 BL 0x1C16F20
	0x03B38594 STR X30, [X31 - 0x20]!
	0x03B38598 STP X20, X19, [X31 + 0x10]
	0x03B3859C ADRP X20, 0x8AA000
	0x03B385A0 LDRB W8, [X20 + 0x813]
	0x03B385A4 MOV X19, X0
	0x03B385A8 TBNZ X8, 0x0, 0x3B385D8
	0x03B385AC ADRP X0, 0x622000
	0x03B385B0 LDR X0, [X0 + 0x148]
	0x03B385B4 BL 0x1C16CF4
	0x03B385B8 ADRP X0, 0x622000
	0x03B385BC LDR X0, [X0 + 0x150]
	0x03B385C0 BL 0x1C16CF4
	0x03B385C4 ADRP X0, 0x622000
	0x03B385C8 LDR X0, [X0 + 0x158]
	0x03B385CC BL 0x1C16CF4
	0x03B385D0 MOVZ W8, 0x1
	0x03B385D4 STRB W8, [X20 + 0x813]
	0x03B385D8 CBZ X19, 0x3B38690
	0x03B385DC ADRP X20, 0x622000
	0x03B385E0 LDR X8, [X19]
	0x03B385E4 LDR X20, [X20 + 0x148]
	0x03B385E8 LDRH W9, [X8 + 0x12E]
	0x03B385EC LDR X1, [X20]
	0x03B385F0 CBZ X9, 0x3B38614
	0x03B385F4 LDR X10, [X8 + 0xB0]
	0x03B385F8 ADD X10, X10, 0x8
	0x03B385FC LDUR X11, [X10 - 0x8]
	0x03B38600 CMP X11, X1
	0x03B38604 B.EQ 0x3B38624
	0x03B38608 SUBS X9, X9, 0x1
	0x03B3860C ADD X10, X10, 0x10
	0x03B38610 B.NE 0x3B385FC
	0x03B38614 MOVZ W2, 0x4
	0x03B38618 MOV X0, X19
	0x03B3861C BL 0x1C5C788
	0x03B38620 B 0x3B38634
	0x03B38624 LDR W9, [X10]
	0x03B38628 ADD W9, W9, 0x4
	0x03B3862C ADD X8, X8, W9, 0x4, SXTW
	0x03B38630 ADD X0, X8, 0x138
	0x03B38634 LDP X8, X1, [X0]
	0x03B38638 MOV X0, X19
	0x03B3863C BLR X8
	0x03B38640 CBZ X0, 0x3B386DC
	0x03B38644 LDR W8, [X0 + 0x18]
	0x03B38648 CMP W8, 0x1
	0x03B3864C B.LT 0x3B38690
	0x03B38650 LDR X8, [X19]
	0x03B38654 LDR X1, [X20]
	0x03B38658 LDRH W9, [X8 + 0x12E]
	0x03B3865C CBZ X9, 0x3B38680
	0x03B38660 LDR X10, [X8 + 0xB0]
	0x03B38664 ADD X10, X10, 0x8
	0x03B38668 LDUR X11, [X10 - 0x8]

ISIL:
	001 Subtract X31, X31, 192
	002 Move [X31+96], D13
	003 Move [X31+104], D12
	004 Move [X31+112], D11
	005 Move [X31+120], D10
	006 Move [X31+128], D9
	007 Move [X31+136], D8
	008 Move [X31+144], X30
	009 Move [X31+160], X22
	010 Move [X31+168], X21
	011 Move [X31+176], X20
	012 Move [X31+184], X19
	013 Move X21, 0x8AB000
	014 Move W8, [X21+2059]
	015 Move X19, X1
	016 Move X20, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {38}
	021 Move X0, 0x5BC000
	022 Move X0, [X0+2600]
	023 Call 0x1C17CF4
	024 Move X0, 0x5E4000
	025 Move X0, [X0+112]
	026 Call 0x1C17CF4
	027 Move X0, 0x5E4000
	028 Move X0, [X0+960]
	029 Call 0x1C17CF4
	030 Move X0, 0x5BC000
	031 Move X0, [X0+1432]
	032 Call 0x1C17CF4
	033 Move X0, 0x623000
	034 Move X0, [X0+208]
	035 Call 0x1C17CF4
	036 Move W8, 1
	037 Move [X21+2059], W8
	038 Move [X31+152], X31
	039 Compare X19, 0
	040 JumpIfEqual {274}
	041 Move X0, X20
	042 Call XRScreenSpaceController.IsPointerOverScreenSpaceCanvas, X0
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfEqual {274}
	047 Move W8, [X20+400]
	048 Compare W8, 0
	049 JumpIfNotEqual {112}
	050 Add X21, X20, 192
	051 Move X0, X21
	052 Move X1, X31
	053 Call InputActionProperty.get_action, X0
	054 Compare X0, 0
	055 JumpIfNotEqual {66}
	056 Add X0, X20, 168
	057 Move X1, X31
	058 Call InputActionProperty.get_action, X0
	059 Compare X0, 0
	060 JumpIfNotEqual {66}
	061 Add X0, X20, 312
	062 Move X1, X31
	063 Call InputActionProperty.get_action, X0
	064 Compare X0, 0
	065 JumpIfEqual {112}
	066 Move X8, [X21+16]
	067 Move V0, [X21]
	068 Add X0, X31, 64
	069 Move [X31+80], X8
	070 Move [X31+4], V0
	071 Call XRScreenSpaceController.IsDisabledReferenceAction, X0
	072 Move TEMP, X0
	073 And TEMP, TEMP, 1
	074 Compare TEMP, 1
	075 JumpIfEqual {97}
	076 Move X8, [X20+184]
	077 NotImplemented "Instruction LDUR not yet implemented."
	078 Add X0, X31, 32
	079 Move [X31+48], X8
	080 Move [X31+2], V0
	081 Call XRScreenSpaceController.IsDisabledReferenceAction, X0
	082 Move TEMP, X0
	083 And TEMP, TEMP, 1
	084 Compare TEMP, 1
	085 JumpIfEqual {97}
	086 Add X8, X20, 312
	087 Move X9, [X8+16]
	088 Move V0, [X8]
	089 Add X0, X31, 0
	090 Move [X31+16], X9
	091 Move [X31], V0
	092 Call XRScreenSpaceController.IsDisabledReferenceAction, X0
	093 Move TEMP, X0
	094 And TEMP, TEMP, 1
	095 Compare TEMP, 1
	096 JumpIfNotEqual {110}
	097 Move X8, 0x5BC000
	098 Move X8, [X8+2600]
	099 Move X0, [X8]
	100 Move W8, [X0+224]
	101 Compare W8, 0
	102 JumpIfNotEqual {104}
	103 Call 0x1C17DFC
	104 Move X8, 0x623000
	105 Move X8, [X8+208]
	106 Move X1, X20
	107 Move X2, X31
	108 Move X0, [X8]
	109 Call Debug.LogWarning, X0, X1
	110 Move W8, 1
	111 Move [X20+400], W8
	112 Add X0, X20, 360
	113 Move X1, X31
	114 Call InputActionProperty.get_action, X0
	115 Compare X0, 0
	116 JumpIfEqual {122}
	117 Move X8, 0x5E4000
	118 Move X8, [X8+112]
	119 Move X1, [X8]
	120 Call 0x21F6BCC, X0
	121 Move W21, W0
	122 Move W21, W31
	123 Add X2, X31, 152
	124 Move X0, X20
	125 Move W1, W21
	126 Call XRScreenSpaceController.TryGetCurrentPositionAction, X0, X1, X2
	127 Move TEMP, X0
	128 And TEMP, TEMP, 1
	129 Compare TEMP, 1
	130 JumpIfNotEqual {198}
	131 Move X0, [X31+152]
	132 Compare X0, 0
	133 JumpIfEqual {287}
	134 Move X8, 0x5E4000
	135 Move X8, [X8+960]
	136 Move X1, [X8]
	137 Call InputAction.ReadValue, X0
	138 Move X22, [X20+384]
	139 Compare X22, 0
	140 JumpIfEqual {287}
	141 Move X0, X22
	142 Move X1, X31
	143 Move V8, V0
	144 Move V9, V1
	145 Call Camera.get_nearClipPlane, X0
	146 Move V2, V0
	147 Move X0, X22
	148 Move V0, V8
	149 Move V1, V9
	150 Move X1, X31
	151 Call Camera.ScreenToWorldPoint, X0, X1
	152 Move X0, [X20+384]
	153 Compare X0, 0
	154 JumpIfEqual {287}
	155 Move X1, X31
	156 Move V8, V0
	157 Move V9, V1
	158 Move V10, V2
	159 Call Component.get_transform, X0
	160 Compare X0, 0
	161 JumpIfEqual {287}
	162 Move X1, X31
	163 Call Transform.get_position, X0
	164 Move X22, 0x8A1000
	165 Move W8, [X22+1925]
	166 Move V11, V0
	167 Move V12, V1
	168 Move V13, V2
	169 Compare W8, 0
	170 JumpIfNotEqual {176}
	171 Move X0, 0x5BC000
	172 Move X0, [X0+1448]
	173 Call 0x1C17CF4
	174 Move W8, 1
	175 Move [X22+1925], W8
	176 Move X8, 0x5BC000
	177 Move X8, [X8+1448]
	178 Subtract S11, S8, S11
	179 Subtract S12, S9, S12
	180 Subtract S13, S10, S13
	181 Move X0, [X8]
	182 Move W8, [X0+224]
	183 Compare W8, 0
	184 JumpIfNotEqual {186}
	185 Call 0x1C17DFC
	186 Multiply S0, S11, S11
	187 Multiply S1, S12, S12
	188 Move X8, -50647040
	189 Add S0, S0, S1
	190 Move V1, [X8+380]
	191 Multiply S2, S13, S13
	192 Add S0, S2, S0
	193 NotImplemented "Instruction FSQRT not yet implemented."
	194 NotImplemented "Instruction FCMP not yet implemented."
	195 NotImplemented "Instruction FDIV not yet implemented."
	196 NotImplemented "Instruction FDIV not yet implemented."
	197 NotImplemented "Instruction FDIV not yet implemented."
	198 Move [X19+24], W31
	199 Move [X19+28], W31
	200 Move X22, 0x8A1000
	201 Move W8, [X22+1923]
	202 Compare W8, 0
	203 JumpIfNotEqual {209}
	204 Move X0, 0x5BC000
	205 Move X0, [X0+1440]
	206 Call 0x1C17CF4
	207 Move W8, 1
	208 Move [X22+1923], W8
	209 Move X8, 0x5BC000
	210 Move X8, [X8+1440]
	211 Move X8, [X8]
	212 Move X8, [X8+184]
	213 Move S11, [X8]
	214 Move S12, [X8+4]
	215 Move V13, [X8+8]
	216 Move X0, X20
	217 Move X1, X31
	218 Call Component.get_transform, X0
	219 Compare X0, 0
	220 JumpIfEqual {287}
	221 Move X1, X31
	222 Call Transform.get_parent, X0
	223 Move X8, 0x5BC000
	224 Move X8, [X8+1432]
	225 Move X22, X0
	226 Move X8, [X8]
	227 Move W9, [X8+224]
	228 Compare W9, 0
	229 JumpIfNotEqual {232}
	230 Move X0, X8
	231 Call 0x1C17DFC
	232 Move X0, X22
	233 Move X1, X31
	234 Move X2, X31
	235 Call Object.op_Inequality, X0, X1
	236 Move TEMP, X0
	237 And TEMP, TEMP, 1
	238 Compare TEMP, 1
	239 JumpIfNotEqual {257}
	240 Move X0, X20
	241 Move X1, X31
	242 Call Component.get_transform, X0
	243 Compare X0, 0
	244 JumpIfEqual {287}
	245 Move X1, X31
	246 Call Transform.get_parent, X0
	247 Compare X0, 0
	248 JumpIfEqual {287}
	249 Move V0, V8
	250 Move V1, V9
	251 Move V2, V10
	252 Move X1, X31
	253 Call Transform.InverseTransformPoint, X0, X1
	254 Move V8, V0
	255 Move V9, V1
	256 Move V10, V2
	257 Move V0, V11
	258 Move V1, V12
	259 Move V2, V13
	260 Move X0, X31
	261 Move [X19+32], S8
	262 Move [X19+40], S9
	263 Move [X19+40], S10
	264 Call Quaternion.LookRotation, X0
	265 Move W8, 3
	266 NotImplemented "Instruction CMP not yet implemented."
	267 Move [X19+24], W8
	268 NotImplemented "Instruction CSET not yet implemented."
	269 Move [X19+44], S0
	270 Move [X19+52], S1
	271 Move [X19+52], S2
	272 Move [X19+60], S3
	273 Move [X19+28], W8
	274 Move X20, [X31+176]
	275 Move X19, [X31+184]
	276 Move X22, [X31+160]
	277 Move X21, [X31+168]
	278 Move X30, [X31+144]
	279 Move D9, [X31+128]
	280 Move D8, [X31+136]
	281 Move D11, [X31+112]
	282 Move D10, [X31+120]
	283 Move D13, [X31+96]
	284 Move D12, [X31+104]
	285 Add X31, X31, 192
	286 Return 
	287 Call 0x1C17F20

Method: System.Void UpdateInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)

Disassembly:
	0x03B388EC ADRP X0, 0x618000
	0x03B388F0 LDR X0, [X0 + 0x590]
	0x03B388F4 BL 0x1C16CF4
	0x03B388F8 ADRP X0, 0x5BB000
	0x03B388FC LDR X0, [X0 + 0x598]
	0x03B38900 BL 0x1C16CF4
	0x03B38904 ADRP X0, 0x622000
	0x03B38908 LDR X0, [X0 + 0x188]
	0x03B3890C BL 0x1C16CF4
	0x03B38910 ADRP X0, 0x622000
	0x03B38914 LDR X0, [X0 + 0x190]
	0x03B38918 BL 0x1C16CF4
	0x03B3891C ADRP X0, 0x5BE000
	0x03B38920 LDR X0, [X0 + 0x408]
	0x03B38924 BL 0x1C16CF4
	0x03B38928 ADRP X0, 0x622000
	0x03B3892C LDR X0, [X0 + 0x198]
	0x03B38930 BL 0x1C16CF4
	0x03B38934 ADRP X0, 0x622000
	0x03B38938 LDR X0, [X0 + 0x1A0]
	0x03B3893C BL 0x1C16CF4
	0x03B38940 ADRP X0, 0x622000
	0x03B38944 LDR X0, [X0 + 0x1A8]
	0x03B38948 BL 0x1C16CF4
	0x03B3894C ADRP X0, 0x622000
	0x03B38950 LDR X0, [X0 + 0x1B0]
	0x03B38954 BL 0x1C16CF4
	0x03B38958 ADRP X0, 0x5BE000
	0x03B3895C LDR X0, [X0 + 0x410]
	0x03B38960 BL 0x1C16CF4
	0x03B38964 ADRP X0, 0x622000
	0x03B38968 LDR X0, [X0 + 0x1B8]
	0x03B3896C BL 0x1C16CF4
	0x03B38970 ADRP X0, 0x622000
	0x03B38974 LDR X0, [X0 + 0x1C0]
	0x03B38978 BL 0x1C16CF4
	0x03B3897C ADRP X0, 0x622000
	0x03B38980 LDR X0, [X0 + 0x1C8]
	0x03B38984 BL 0x1C16CF4
	0x03B38988 ADRP X0, 0x622000
	0x03B3898C LDR X0, [X0 + 0x1D0]
	0x03B38990 BL 0x1C16CF4
	0x03B38994 ADRP X0, 0x622000
	0x03B38998 LDR X0, [X0 + 0x1D8]
	0x03B3899C BL 0x1C16CF4
	0x03B389A0 ADRP X0, 0x622000
	0x03B389A4 LDR X0, [X0 + 0x1E0]
	0x03B389A8 BL 0x1C16CF4
	0x03B389AC ADRP X0, 0x622000
	0x03B389B0 LDR X0, [X0 + 0x1E8]
	0x03B389B4 BL 0x1C16CF4
	0x03B389B8 MOVZ W8, 0x1
	0x03B389BC STRB W8, [X21 + 0x815]
	0x03B389C0 LDR X1, [X20]
	0x03B389C4 ADRP X22, 0x5BB000
	0x03B389C8 LDR X22, [X22 + 0xA28]
	0x03B389CC MOV X0, X19
	0x03B389D0 BL 0x21A3894
	0x03B389D4 STR X0, [X19 + 0x40]
	0x03B389D8 CBZ X0, 0x3B38ACC
	0x03B389DC ADRP X9, 0x5BB000
	0x03B389E0 LDR X9, [X9 + 0x598]
	0x03B389E4 MOV X20, X0
	0x03B389E8 LDR X8, [X0]
	0x03B389EC LDR X0, [X9]
	0x03B389F0 LDRB W10, [X8 + 0x130]
	0x03B389F4 LDRB W9, [X0 + 0x130]
	0x03B389F8 CMP W10, W9
	0x03B389FC B.CC 0x3B38ACC
	0x03B38A00 LDR X8, [X8 + 0xC8]
	0x03B38A04 ADD X8, X8, X9, 0x3, LSL
	0x03B38A08 LDUR X8, [X8 - 0x8]
	0x03B38A0C CMP X8, X0
	0x03B38A10 B.NE 0x3B38ACC
	0x03B38A14 LDR W8, [X0 + 0xE0]
	0x03B38A18 CBNZ W8, 0x3B38A20
	0x03B38A1C BL 0x1C16DFC
	0x03B38A20 MOV X0, X20
	0x03B38A24 MOV X1, X31
	0x03B38A28 MOV X2, X31
	0x03B38A2C BL 0x3C354F8
	0x03B38A30 TBZ X0, 0x0, 0x3B38ACC
	0x03B38A34 ADRP X24, 0x622000
	0x03B38A38 LDR X20, [X19 + 0x40]
	0x03B38A3C LDR X24, [X24 + 0x148]
	0x03B38A40 MOV X0, X20
	0x03B38A44 LDR X1, [X24]
	0x03B38A48 BL 0x1C16E00
	0x03B38A4C STR X0, [X19 + 0x48]
	0x03B38A50 LDR X1, [X24]
	0x03B38A54 MOV X0, X20
	0x03B38A58 BL 0x1C16E00
	0x03B38A5C ADRP X23, 0x622000
	0x03B38A60 LDR X20, [X19 + 0x40]
	0x03B38A64 LDR X23, [X23 + 0x160]
	0x03B38A68 MOV X0, X20
	0x03B38A6C LDR X1, [X23]
	0x03B38A70 BL 0x1C16E00
	0x03B38A74 STR X0, [X19 + 0x50]
	0x03B38A78 LDR X1, [X23]
	0x03B38A7C MOV X0, X20
	0x03B38A80 BL 0x1C16E00
	0x03B38A84 LDR X20, [X19 + 0x48]
	0x03B38A88 CBZ X20, 0x3B38E30
	0x03B38A8C LDR X8, [X20]
	0x03B38A90 LDR X1, [X24]
	0x03B38A94 LDRH W9, [X8 + 0x12E]
	0x03B38A98 CBZ X9, 0x3B38ABC
	0x03B38A9C LDR X10, [X8 + 0xB0]
	0x03B38AA0 ADD X10, X10, 0x8
	0x03B38AA4 LDUR X11, [X10 - 0x8]
	0x03B38AA8 CMP X11, X1
	0x03B38AAC B.EQ 0x3B38D14
	0x03B38AB0 SUBS X9, X9, 0x1
	0x03B38AB4 ADD X10, X10, 0x10
	0x03B38AB8 B.NE 0x3B38AA4
	0x03B38ABC MOV X0, X20
	0x03B38AC0 MOV W2, W31
	0x03B38AC4 BL 0x1C5C788
	0x03B38AC8 B 0x3B38D20
	0x03B38ACC ADRP X20, 0x622000
	0x03B38AD0 ADRP X21, 0x622000
	0x03B38AD4 LDR X20, [X20 + 0x1D8]
	0x03B38AD8 LDR X21, [X21 + 0x1E8]
	0x03B38ADC MOV X0, X19
	0x03B38AE0 MOV X1, X31
	0x03B38AE4 BL 0x3C32ECC
	0x03B38AE8 LDR X8, [X20]
	0x03B38AEC MOV X1, X0
	0x03B38AF0 MOV X2, X31
	0x03B38AF4 MOV X0, X8
	0x03B38AF8 BL 0x321EFD0
	0x03B38AFC LDR X1, [X21]
	0x03B38B00 MOV X2, X31
	0x03B38B04 BL 0x321B938
	0x03B38B08 LDR X8, [X22]
	0x03B38B0C MOV X20, X0
	0x03B38B10 LDR W9, [X8 + 0xE0]
	0x03B38B14 CBNZ W9, 0x3B38B20
	0x03B38B18 MOV X0, X8
	0x03B38B1C BL 0x1C16DFC
	0x03B38B20 MOV X0, X20
	0x03B38B24 MOV X1, X19
	0x03B38B28 MOV X2, X31
	0x03B38B2C BL 0x3C06B0C
	0x03B38B30 LDR X1, [X19 + 0x38]
	0x03B38B34 CBZ X1, 0x3B38F98
	0x03B38B38 LDR W8, [X1 + 0x18]
	0x03B38B3C CBNZ W8, 0x3B38BB4
	0x03B38B40 ADRP X8, 0x622000
	0x03B38B44 LDR X8, [X8 + 0x180]
	0x03B38B48 MOV X0, X19
	0x03B38B4C LDR X2, [X8]
	0x03B38B50 BL 0x21A443C
	0x03B38B54 LDR X8, [X19 + 0x38]
	0x03B38B58 CBZ X8, 0x3B38F98
	0x03B38B5C LDR W8, [X8 + 0x18]
	0x03B38B60 CBNZ W8, 0x3B38BB4
	0x03B38B64 MOV X0, X19
	0x03B38B68 MOV X1, X31
	0x03B38B6C BL 0x3C32ECC
	0x03B38B70 ADRP X8, 0x622000
	0x03B38B74 LDR X8, [X8 + 0x1E0]
	0x03B38B78 MOV X1, X0

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+112], D9
	003 Move [X31+120], D8
	004 Move [X31+128], X30
	005 Move [X31+136], X21
	006 Move [X31+144], X20
	007 Move [X31+152], X19
	008 Move X21, 0x8AB000
	009 Move W8, [X21+2060]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {30}
	016 Move X0, 0x5BC000
	017 Move X0, [X0+2600]
	018 Call 0x1C17CF4
	019 Move X0, 0x5C2000
	020 Move X0, [X0+2240]
	021 Call 0x1C17CF4
	022 Move X0, 0x5E4000
	023 Move X0, [X0+960]
	024 Call 0x1C17CF4
	025 Move X0, 0x623000
	026 Move X0, [X0+224]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+2060], W8
	030 Move [X31+96], X31
	031 Move [X31+104], X31
	032 Compare X20, 0
	033 JumpIfEqual {193}
	034 Move X0, X19
	035 Call XRScreenSpaceController.IsPointerOverScreenSpaceCanvas, X0
	036 Move TEMP, X0
	037 And TEMP, TEMP, 1
	038 Compare TEMP, 1
	039 JumpIfEqual {193}
	040 Move W8, [X19+401]
	041 Compare W8, 0
	042 JumpIfNotEqual {104}
	043 Add X21, X19, 336
	044 Move X0, X21
	045 Move X1, X31
	046 Call InputActionProperty.get_action, X0
	047 Compare X0, 0
	048 JumpIfNotEqual {59}
	049 Add X0, X19, 192
	050 Move X1, X31
	051 Call InputActionProperty.get_action, X0
	052 Compare X0, 0
	053 JumpIfNotEqual {59}
	054 Add X0, X19, 168
	055 Move X1, X31
	056 Call InputActionProperty.get_action, X0
	057 Compare X0, 0
	058 JumpIfEqual {104}
	059 Move X8, [X21+16]
	060 Move V0, [X21]
	061 Add X0, X31, 64
	062 Move [X31+80], X8
	063 Move [X31+4], V0
	064 Call XRScreenSpaceController.IsDisabledReferenceAction, X0
	065 Move TEMP, X0
	066 And TEMP, TEMP, 1
	067 Compare TEMP, 1
	068 JumpIfEqual {89}
	069 Move X8, [X19+208]
	070 Move V0, [X19+12]
	071 Add X0, X31, 32
	072 Move [X31+48], X8
	073 Move [X31+2], V0
	074 Call XRScreenSpaceController.IsDisabledReferenceAction, X0
	075 Move TEMP, X0
	076 And TEMP, TEMP, 1
	077 Compare TEMP, 1
	078 JumpIfEqual {89}
	079 Move X8, [X19+184]
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 Add X0, X31, 0
	082 Move [X31+16], X8
	083 Move [X31], V0
	084 Call XRScreenSpaceController.IsDisabledReferenceAction, X0
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {102}
	089 Move X8, 0x5BC000
	090 Move X8, [X8+2600]
	091 Move X0, [X8]
	092 Move W8, [X0+224]
	093 Compare W8, 0
	094 JumpIfNotEqual {96}
	095 Call 0x1C17DFC
	096 Move X8, 0x623000
	097 Move X8, [X8+224]
	098 Move X1, X19
	099 Move X2, X31
	100 Move X0, [X8]
	101 Call Debug.LogWarning, X0, X1
	102 Move W8, 1
	103 Move [X19+401], W8
	104 Add X1, X31, 104
	105 Move X0, X19
	106 NotImplemented "Instruction STURH not yet implemented."
	107 NotImplemented "Instruction STURH not yet implemented."
	108 NotImplemented "Instruction STURH not yet implemented."
	109 Call XRScreenSpaceController.TryGetCurrentTwoInputSelectAction, X0, X1
	110 Move TEMP, X0
	111 And TEMP, TEMP, 1
	112 Compare TEMP, 1
	113 JumpIfNotEqual {125}
	114 Move X0, [X31+104]
	115 Compare X0, 0
	116 JumpIfEqual {201}
	117 Move X8, 0x5C2000
	118 Move X8, [X8+2240]
	119 Move X1, [X8]
	120 Call InputAction.ReadValue, X0
	121 Move W8, [X20+64]
	122 Move [X20+60], S0
	123 Move [X20+66], W31
	124 Move W9, 1
	125 Add X1, X31, 96
	126 Move X0, X19
	127 Call XRScreenSpaceController.TryGetCurrentOneInputSelectAction, X0, X1
	128 Move TEMP, X0
	129 And TEMP, TEMP, 1
	130 Compare TEMP, 1
	131 JumpIfNotEqual {168}
	132 Move X0, [X31+96]
	133 Compare X0, 0
	134 JumpIfEqual {201}
	135 Move X8, 0x5E4000
	136 Move X8, [X8+960]
	137 Move X1, [X8]
	138 Call InputAction.ReadValue, X0
	139 Move X21, 0x8A2000
	140 Move W8, [X21+2072]
	141 Move V8, V0
	142 Move V9, V1
	143 Compare W8, 0
	144 JumpIfNotEqual {150}
	145 Move X0, 0x5BC000
	146 Move X0, [X0+1448]
	147 Call 0x1C17CF4
	148 Move W8, 1
	149 Move [X21+2072], W8
	150 Move X8, 0x5BC000
	151 Move X8, [X8+1448]
	152 Move X0, [X8]
	153 Move W8, [X0+224]
	154 Compare W8, 0
	155 JumpIfNotEqual {157}
	156 Call 0x1C17DFC
	157 Move W8, [X20+64]
	158 Multiply S0, S8, S8
	159 Multiply S1, S9, S9
	160 Add S0, S0, S1
	161 Move W9, 1
	162 NotImplemented "Instruction FSQRT not yet implemented."
	163 Move [X20+66], W31
	164 Move [X20+60], S0
	165 Xor W8, W8, 1
	166 Move [X20+65], W8
	167 Move [X20+64], W9
	168 Move W8, [X20+64]
	169 Move [X20+60], W31
	170 NotImplemented "Instruction STRH not yet implemented."
	171 Move [X20+66], W8
	172 Add X20, X19, 288
	173 Move X0, X20
	174 Move X1, X31
	175 Call InputActionProperty.get_action, X0
	176 Compare X0, 0
	177 JumpIfEqual {191}
	178 Move X0, X20
	179 Move X1, X31
	180 Call InputActionProperty.get_action, X0
	181 Compare X0, 0
	182 JumpIfEqual {201}
	183 Move X8, 0x5C2000
	184 Move X8, [X8+2240]
	185 Move X1, [X8]
	186 Call InputAction.ReadValue, X0
	187 Move X0, X31
	188 Move V8, V0
	189 Call Screen.get_dpi
	190 NotImplemented "Instruction FDIV not yet implemented."
	191 Move S0, W31
	192 Move [X19+396], S0
	193 Move X20, [X31+144]
	194 Move X19, [X31+152]
	195 Move X30, [X31+128]
	196 Move X21, [X31+136]
	197 Move D9, [X31+112]
	198 Move D8, [X31+120]
	199 Add X31, X31, 160
	200 Return 
	201 Call 0x1C17F20

Method: System.Boolean TryGetCurrentPositionAction(System.Int32 touchCount, out UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x03B38838 STP S0, S1, [X0 + 0x20]
	0x03B3883C STP S2, S3, [X0 + 0x28]
	0x03B38840 RET
	0x03B38844 LDRB W0, [X0 + 0x30]
	0x03B38848 RET
	0x03B3884C AND W8, W1, 0x1
	0x03B38850 STRB W8, [X0 + 0x30]
	0x03B38854 RET
	0x03B38858 LDRB W0, [X0 + 0x31]
	0x03B3885C RET
	0x03B38860 AND W8, W1, 0x1
	0x03B38864 STRB W8, [X0 + 0x31]
	0x03B38868 RET
	0x03B3886C LDR X0, [X0 + 0x38]
	0x03B38870 RET
	0x03B38874 STR X1, [X0 + 0x38]
	0x03B38878 RET
	0x03B3887C STR X30, [X31 - 0x40]!
	0x03B38880 STP X24, X23, [X31 + 0x10]
	0x03B38884 STP X22, X21, [X31 + 0x20]
	0x03B38888 STP X20, X19, [X31 + 0x30]
	0x03B3888C ADRP X21, 0x8AA000
	0x03B38890 ADRP X20, 0x622000
	0x03B38894 LDRB W8, [X21 + 0x815]
	0x03B38898 LDR X20, [X20 + 0x178]
	0x03B3889C MOV X19, X0
	0x03B388A0 TBNZ X8, 0x0, 0x3B389C0
	0x03B388A4 ADRP X0, 0x622000
	0x03B388A8 LDR X0, [X0 + 0x178]
	0x03B388AC BL 0x1C16CF4
	0x03B388B0 ADRP X0, 0x622000
	0x03B388B4 LDR X0, [X0 + 0x180]
	0x03B388B8 BL 0x1C16CF4
	0x03B388BC ADRP X0, 0x5BB000
	0x03B388C0 LDR X0, [X0 + 0xA28]
	0x03B388C4 BL 0x1C16CF4
	0x03B388C8 ADRP X0, 0x622000
	0x03B388CC LDR X0, [X0 + 0x148]
	0x03B388D0 BL 0x1C16CF4
	0x03B388D4 ADRP X0, 0x622000
	0x03B388D8 LDR X0, [X0 + 0x160]
	0x03B388DC BL 0x1C16CF4
	0x03B388E0 ADRP X0, 0x5BE000
	0x03B388E4 LDR X0, [X0 + 0xFD8]
	0x03B388E8 BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, X2
	006 NotImplemented "Instruction CMP not yet implemented."
	007 Move X0, X31
	008 Move W8, W31
	009 Add X21, X0, 192
	010 Move X20, X0
	011 Move X0, X21
	012 Move X1, X31
	013 Call InputActionProperty.get_action, X0
	014 Compare X0, 0
	015 JumpIfEqual {28}
	016 Move X0, X21
	017 Move X1, X31
	018 Call InputActionProperty.get_action, X0
	019 Compare X0, 0
	020 JumpIfEqual {56}
	021 Move X1, X31
	022 Call InputAction.IsInProgress, X0
	023 Move TEMP, X0
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {28}
	027 Move X0, X21
	028 Add X20, X20, 168
	029 Move X0, X20
	030 Move X1, X31
	031 Call InputActionProperty.get_action, X0
	032 Compare X0, 0
	033 JumpIfEqual {8}
	034 Move X0, X20
	035 Move X1, X31
	036 Call InputActionProperty.get_action, X0
	037 Compare X0, 0
	038 JumpIfEqual {56}
	039 Move X1, X31
	040 Call InputAction.WasPerformedThisFrame, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {7}
	045 Move X0, X20
	046 Move X1, X31
	047 Call InputActionProperty.get_action, X0
	048 Move W8, 1
	049 Move [X19], X0
	050 Move X20, [X31+16]
	051 Move X19, [X31+24]
	052 Move W0, W8
	053 Move X30, [X31+32]
	054 Move X21, [X31+40]
	055 Return X0
	056 Call 0x1C17F20

Method: System.Boolean TryGetCurrentOneInputSelectAction(out UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x03B38C58 MOV X0, X20
	0x03B38C5C BLR X8
	0x03B38C60 TBNZ X0, 0x0, 0x3B38CDC
	0x03B38C64 LDRB W8, [X19 + 0x31]
	0x03B38C68 CBZ W8, 0x3B38D00
	0x03B38C6C LDR X20, [X19 + 0x50]
	0x03B38C70 CBZ X20, 0x3B38D00
	0x03B38C74 ADRP X10, 0x622000
	0x03B38C78 LDR X8, [X20]
	0x03B38C7C LDR X10, [X10 + 0x160]
	0x03B38C80 LDRH W9, [X8 + 0x12E]
	0x03B38C84 LDR X1, [X10]
	0x03B38C88 CBZ X9, 0x3B38CAC
	0x03B38C8C LDR X10, [X8 + 0xB0]
	0x03B38C90 ADD X10, X10, 0x8
	0x03B38C94 LDUR X11, [X10 - 0x8]
	0x03B38C98 CMP X11, X1
	0x03B38C9C B.EQ 0x3B38CBC
	0x03B38CA0 SUBS X9, X9, 0x1
	0x03B38CA4 ADD X10, X10, 0x10
	0x03B38CA8 B.NE 0x3B38C94
	0x03B38CAC MOVZ W2, 0x6
	0x03B38CB0 MOV X0, X20
	0x03B38CB4 BL 0x1C5C788
	0x03B38CB8 B 0x3B38CCC
	0x03B38CBC LDR W9, [X10]
	0x03B38CC0 ADD W9, W9, 0x6
	0x03B38CC4 ADD X8, X8, W9, 0x4, SXTW
	0x03B38CC8 ADD X0, X8, 0x138
	0x03B38CCC LDP X8, X1, [X0]
	0x03B38CD0 MOV X0, X20
	0x03B38CD4 BLR X8
	0x03B38CD8 TBZ X0, 0x0, 0x3B38D00
	0x03B38CDC LDR X8, [X19]
	0x03B38CE0 MOV X0, X19
	0x03B38CE4 LDP X20, X19, [X31 + 0x30]
	0x03B38CE8 LDP X22, X21, [X31 + 0x20]
	0x03B38CEC LDP X3, X2, [X8 + 0x178]
	0x03B38CF0 LDP X24, X23, [X31 + 0x10]
	0x03B38CF4 MOVZ W1, 0x1
	0x03B38CF8 LDR X30, [X31], #0x40

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Add X20, X0, 192
	006 Move X19, X1
	007 Move X21, X0
	008 Move X0, X20
	009 Move X1, X31
	010 Call InputActionProperty.get_action, X0
	011 Compare X0, 0
	012 JumpIfEqual {24}
	013 Move X0, X20
	014 Move X1, X31
	015 Call InputActionProperty.get_action, X0
	016 Compare X0, 0
	017 JumpIfEqual {54}
	018 Move X1, X31
	019 Call InputAction.IsInProgress, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Add X20, X21, 168
	025 Move X0, X20
	026 Move X1, X31
	027 Call InputActionProperty.get_action, X0
	028 Compare X0, 0
	029 JumpIfEqual {46}
	030 Move X0, X20
	031 Move X1, X31
	032 Call InputActionProperty.get_action, X0
	033 Compare X0, 0
	034 JumpIfEqual {54}
	035 Move X1, X31
	036 Call InputAction.WasPerformedThisFrame, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {45}
	041 Move X0, X20
	042 Move X1, X31
	043 Call InputActionProperty.get_action, X0
	044 Move W8, 1
	045 Move X0, X31
	046 Move W8, W31
	047 Move [X19], X0
	048 Move X20, [X31+16]
	049 Move X19, [X31+24]
	050 Move W0, W8
	051 Move X30, [X31+32]
	052 Move X21, [X31+40]
	053 Return X0
	054 Call 0x1C17F20

Method: System.Boolean TryGetCurrentTwoInputSelectAction(out UnityEngine.InputSystem.InputAction action)

Disassembly:
	0x03B38B7C MOV X2, X31
	0x03B38B80 LDR X8, [X8]
	0x03B38B84 MOV X0, X8
	0x03B38B88 BL 0x321EFD0
	0x03B38B8C LDR X8, [X22]
	0x03B38B90 MOV X20, X0
	0x03B38B94 LDR W9, [X8 + 0xE0]
	0x03B38B98 CBNZ W9, 0x3B38BA4
	0x03B38B9C MOV X0, X8
	0x03B38BA0 BL 0x1C16DFC
	0x03B38BA4 MOV X0, X20
	0x03B38BA8 MOV X1, X19
	0x03B38BAC MOV X2, X31
	0x03B38BB0 BL 0x3C06B0C
	0x03B38BB4 LDR X8, [X19]
	0x03B38BB8 ADRP X20, 0x618000
	0x03B38BBC MOV X0, X19
	0x03B38BC0 LDP X9, X1, [X8 + 0x188]
	0x03B38BC4 LDR X20, [X20 + 0x590]
	0x03B38BC8 BLR X9
	0x03B38BCC AND W8, W0, 0x1
	0x03B38BD0 STRB W8, [X19 + 0x60]
	0x03B38BD4 LDR X0, [X20]
	0x03B38BD8 BL 0x1C16F10
	0x03B38BDC MOV X1, X31
	0x03B38BE0 MOV X20, X0
	0x03B38BE4 BL 0x3C122EC
	0x03B38BE8 LDRB W8, [X19 + 0x30]
	0x03B38BEC STR X20, [X19 + 0x58]
	0x03B38BF0 CBZ W8, 0x3B38C64
	0x03B38BF4 LDR X20, [X19 + 0x48]
	0x03B38BF8 CBZ X20, 0x3B38C64
	0x03B38BFC ADRP X10, 0x622000
	0x03B38C00 LDR X8, [X20]
	0x03B38C04 LDR X10, [X10 + 0x148]
	0x03B38C08 LDRH W9, [X8 + 0x12E]
	0x03B38C0C LDR X1, [X10]
	0x03B38C10 CBZ X9, 0x3B38C34
	0x03B38C14 LDR X10, [X8 + 0xB0]
	0x03B38C18 ADD X10, X10, 0x8
	0x03B38C1C LDUR X11, [X10 - 0x8]
	0x03B38C20 CMP X11, X1
	0x03B38C24 B.EQ 0x3B38C44
	0x03B38C28 SUBS X9, X9, 0x1
	0x03B38C2C ADD X10, X10, 0x10
	0x03B38C30 B.NE 0x3B38C1C
	0x03B38C34 MOVZ W2, 0x5
	0x03B38C38 MOV X0, X20
	0x03B38C3C BL 0x1C5C788
	0x03B38C40 B 0x3B38C54
	0x03B38C44 LDR W9, [X10]
	0x03B38C48 ADD W9, W9, 0x5
	0x03B38C4C ADD X8, X8, W9, 0x4, SXTW
	0x03B38C50 ADD X0, X8, 0x138
	0x03B38C54 LDP X8, X1, [X0]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Add X21, X0, 264
	006 Move X19, X1
	007 Move X20, X0
	008 Move X0, X21
	009 Move X1, X31
	010 Call InputActionProperty.get_action, X0
	011 Compare X0, 0
	012 JumpIfEqual {24}
	013 Move X0, X21
	014 Move X1, X31
	015 Call InputActionProperty.get_action, X0
	016 Compare X0, 0
	017 JumpIfEqual {72}
	018 Move X1, X31
	019 Call InputAction.IsInProgress, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {41}
	024 Add X21, X20, 288
	025 Move X0, X21
	026 Move X1, X31
	027 Call InputActionProperty.get_action, X0
	028 Compare X0, 0
	029 JumpIfEqual {42}
	030 Move X0, X21
	031 Move X1, X31
	032 Call InputActionProperty.get_action, X0
	033 Compare X0, 0
	034 JumpIfEqual {72}
	035 Move X1, X31
	036 Call InputAction.IsInProgress, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {42}
	041 Move X0, X21
	042 Add X20, X20, 336
	043 Move X0, X20
	044 Move X1, X31
	045 Call InputActionProperty.get_action, X0
	046 Compare X0, 0
	047 JumpIfEqual {64}
	048 Move X0, X20
	049 Move X1, X31
	050 Call InputActionProperty.get_action, X0
	051 Compare X0, 0
	052 JumpIfEqual {72}
	053 Move X1, X31
	054 Call InputAction.IsInProgress, X0
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {63}
	059 Move X0, X20
	060 Move X1, X31
	061 Call InputActionProperty.get_action, X0
	062 Move W8, 1
	063 Move X0, X31
	064 Move W8, W31
	065 Move [X19], X0
	066 Move X20, [X31+16]
	067 Move X19, [X31+24]
	068 Move W0, W8
	069 Move X30, [X31+32]
	070 Move X21, [X31+40]
	071 Return X0
	072 Call 0x1C17F20

Method: System.Boolean FindUIInputModule()

Disassembly:
	0x03B38CFC BR X3
	0x03B38D00 LDP X20, X19, [X31 + 0x30]
	0x03B38D04 LDP X22, X21, [X31 + 0x20]
	0x03B38D08 LDP X24, X23, [X31 + 0x10]
	0x03B38D0C LDR X30, [X31], #0x40
	0x03B38D10 RET
	0x03B38D14 LDRSW X9, [X10]
	0x03B38D18 ADD X8, X8, X9, 0x4, LSL
	0x03B38D1C ADD X0, X8, 0x138
	0x03B38D20 LDP X8, X1, [X0]
	0x03B38D24 MOV X0, X20
	0x03B38D28 BLR X8
	0x03B38D2C ADRP X8, 0x622000
	0x03B38D30 LDR X8, [X8 + 0x190]
	0x03B38D34 MOV X20, X0
	0x03B38D38 LDR X8, [X8]
	0x03B38D3C MOV X0, X8
	0x03B38D40 BL 0x1C16F10
	0x03B38D44 ADRP X8, 0x622000
	0x03B38D48 LDR X8, [X8 + 0x1B8]
	0x03B38D4C MOV X1, X19
	0x03B38D50 MOV X3, X31
	0x03B38D54 MOV X21, X0
	0x03B38D58 LDR X2, [X8]
	0x03B38D5C BL 0x2725C6C
	0x03B38D60 CBZ X20, 0x3B38F98
	0x03B38D64 ADRP X8, 0x622000
	0x03B38D68 LDR X8, [X8 + 0x1A8]
	0x03B38D6C MOV X0, X20
	0x03B38D70 MOV X1, X21
	0x03B38D74 LDR X2, [X8]
	0x03B38D78 BL 0x2729B68
	0x03B38D7C LDR X20, [X19 + 0x48]
	0x03B38D80 CBZ X20, 0x3B38F98
	0x03B38D84 LDR X8, [X20]
	0x03B38D88 LDR X1, [X24]
	0x03B38D8C LDRH W9, [X8 + 0x12E]
	0x03B38D90 CBZ X9, 0x3B38DB4
	0x03B38D94 LDR X10, [X8 + 0xB0]
	0x03B38D98 ADD X10, X10, 0x8
	0x03B38D9C LDUR X11, [X10 - 0x8]
	0x03B38DA0 CMP X11, X1
	0x03B38DA4 B.EQ 0x3B38DC4
	0x03B38DA8 SUBS X9, X9, 0x1
	0x03B38DAC ADD X10, X10, 0x10
	0x03B38DB0 B.NE 0x3B38D9C
	0x03B38DB4 MOVZ W2, 0x1
	0x03B38DB8 MOV X0, X20
	0x03B38DBC BL 0x1C5C788
	0x03B38DC0 B 0x3B38DD4
	0x03B38DC4 LDR W9, [X10]
	0x03B38DC8 ADD W9, W9, 0x1
	0x03B38DCC ADD X8, X8, W9, 0x4, SXTW
	0x03B38DD0 ADD X0, X8, 0x138
	0x03B38DD4 LDP X8, X1, [X0]
	0x03B38DD8 MOV X0, X20
	0x03B38DDC BLR X8
	0x03B38DE0 ADRP X8, 0x622000
	0x03B38DE4 LDR X8, [X8 + 0x198]
	0x03B38DE8 MOV X20, X0
	0x03B38DEC LDR X8, [X8]
	0x03B38DF0 MOV X0, X8
	0x03B38DF4 BL 0x1C16F10
	0x03B38DF8 ADRP X8, 0x622000
	0x03B38DFC LDR X8, [X8 + 0x1C8]
	0x03B38E00 MOV X1, X19
	0x03B38E04 MOV X3, X31
	0x03B38E08 MOV X21, X0
	0x03B38E0C LDR X2, [X8]
	0x03B38E10 BL 0x2725C6C
	0x03B38E14 CBZ X20, 0x3B38F98
	0x03B38E18 ADRP X8, 0x622000
	0x03B38E1C LDR X8, [X8 + 0x1A0]
	0x03B38E20 MOV X0, X20
	0x03B38E24 MOV X1, X21
	0x03B38E28 LDR X2, [X8]
	0x03B38E2C BL 0x2729B68
	0x03B38E30 LDR X20, [X19 + 0x50]
	0x03B38E34 CBZ X20, 0x3B38B30
	0x03B38E38 LDR X8, [X20]
	0x03B38E3C LDR X1, [X23]
	0x03B38E40 LDRH W9, [X8 + 0x12E]
	0x03B38E44 CBZ X9, 0x3B38E68

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8AB000
	007 Move X20, 0x5E3000
	008 Move W8, [X21+2061]
	009 Move X20, [X20+3576]
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x5E3000
	016 Move X0, [X0+3576]
	017 Call 0x1C17CF4
	018 Move X0, 0x5BC000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x623000
	022 Move X0, [X0+232]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X21+2061], W8
	026 Move X0, [X20]
	027 Move X22, 0x5BC000
	028 Move W8, [X0+224]
	029 Move X22, [X22+1432]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X31
	034 Call EventSystem.get_current
	035 Move X8, [X22]
	036 Move X20, X0
	037 Move W9, [X8+224]
	038 Compare W9, 0
	039 JumpIfNotEqual {42}
	040 Move X0, X8
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Inequality, X0, X1
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {84}
	050 Compare X20, 0
	051 JumpIfEqual {100}
	052 Move X0, [X22]
	053 Move X21, [X20+40]
	054 Move W8, [X0+224]
	055 Compare W8, 0
	056 JumpIfNotEqual {58}
	057 Call 0x1C17DFC
	058 Move X0, X21
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {84}
	066 Move X8, [X20+40]
	067 Compare X8, 0
	068 JumpIfEqual {77}
	069 Move X9, 0x623000
	070 Move X9, [X9+232]
	071 Move X10, [X8]
	072 Move X9, [X9]
	073 Move W12, [X10+304]
	074 Move W11, [X9+304]
	075 NotImplemented "Instruction CMP not yet implemented."
	076 Move X8, X31
	077 Move [X19+408], X31
	078 Move X10, [X10+200]
	079 Add X10, X10, X11
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 NotImplemented "Instruction CMP not yet implemented."
	082 NotImplemented "Instruction CSEL not yet implemented."
	083 Move [X19+408], X8
	084 Move X0, [X22]
	085 Move X19, [X19+408]
	086 Move W8, [X0+224]
	087 Compare W8, 0
	088 JumpIfNotEqual {90}
	089 Call 0x1C17DFC
	090 Move X0, X19
	091 Move X20, [X31+32]
	092 Move X19, [X31+40]
	093 Move X22, [X31+16]
	094 Move X21, [X31+24]
	095 Move X1, X31
	096 Move X2, X31
	097 Move X30, [X31+48]
	098 Call Object.op_Inequality, X0, X1
	099 Return X0
	100 Call 0x1C17F20

Method: System.Boolean IsPointerOverScreenSpaceCanvas()

Disassembly:
	0x03B3866C CMP X11, X1
	0x03B38670 B.EQ 0x3B386A0
	0x03B38674 SUBS X9, X9, 0x1
	0x03B38678 ADD X10, X10, 0x10
	0x03B3867C B.NE 0x3B38668
	0x03B38680 MOVZ W2, 0x4
	0x03B38684 MOV X0, X19
	0x03B38688 BL 0x1C5C788
	0x03B3868C B 0x3B386B0
	0x03B38690 LDP X20, X19, [X31 + 0x10]
	0x03B38694 MOV X0, X31
	0x03B38698 LDR X30, [X31], #0x20
	0x03B3869C RET
	0x03B386A0 LDR W9, [X10]
	0x03B386A4 ADD W9, W9, 0x4
	0x03B386A8 ADD X8, X8, W9, 0x4, SXTW
	0x03B386AC ADD X0, X8, 0x138
	0x03B386B0 LDP X8, X1, [X0]
	0x03B386B4 MOV X0, X19
	0x03B386B8 BLR X8
	0x03B386BC CBZ X0, 0x3B386DC
	0x03B386C0 ADRP X8, 0x622000
	0x03B386C4 LDR X8, [X8 + 0x158]
	0x03B386C8 LDP X20, X19, [X31 + 0x10]
	0x03B386CC MOV W1, W31
	0x03B386D0 LDR X2, [X8]
	0x03B386D4 LDR X30, [X31], #0x20
	0x03B386D8 B 0x301BCCC
	0x03B386DC BL 0x1C16F20
	0x03B386E0 STR X30, [X31 - 0x20]!
	0x03B386E4 STP X20, X19, [X31 + 0x10]
	0x03B386E8 ADRP X20, 0x8AA000
	0x03B386EC LDRB W8, [X20 + 0x814]
	0x03B386F0 MOV X19, X0
	0x03B386F4 TBNZ X8, 0x0, 0x3B38724
	0x03B386F8 ADRP X0, 0x622000
	0x03B386FC LDR X0, [X0 + 0x160]
	0x03B38700 BL 0x1C16CF4
	0x03B38704 ADRP X0, 0x622000
	0x03B38708 LDR X0, [X0 + 0x168]
	0x03B3870C BL 0x1C16CF4
	0x03B38710 ADRP X0, 0x622000
	0x03B38714 LDR X0, [X0 + 0x170]
	0x03B38718 BL 0x1C16CF4
	0x03B3871C MOVZ W8, 0x1
	0x03B38720 STRB W8, [X20 + 0x814]
	0x03B38724 CBZ X19, 0x3B387DC
	0x03B38728 ADRP X20, 0x622000
	0x03B3872C LDR X8, [X19]
	0x03B38730 LDR X20, [X20 + 0x160]
	0x03B38734 LDRH W9, [X8 + 0x12E]
	0x03B38738 LDR X1, [X20]
	0x03B3873C CBZ X9, 0x3B38760
	0x03B38740 LDR X10, [X8 + 0xB0]
	0x03B38744 ADD X10, X10, 0x8
	0x03B38748 LDUR X11, [X10 - 0x8]
	0x03B3874C CMP X11, X1
	0x03B38750 B.EQ 0x3B38770
	0x03B38754 SUBS X9, X9, 0x1
	0x03B38758 ADD X10, X10, 0x10
	0x03B3875C B.NE 0x3B38748
	0x03B38760 MOVZ W2, 0x4
	0x03B38764 MOV X0, X19
	0x03B38768 BL 0x1C5C788

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8AB000
	006 Move W8, [X20+2062]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x623000
	013 Move X0, [X0+216]
	014 Call 0x1C17CF4
	015 Move X0, 0x5BC000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2062], W8
	020 Move W8, [X19+392]
	021 Compare W8, 0
	022 JumpIfEqual {68}
	023 Move X21, 0x5BC000
	024 Move X21, [X21+1432]
	025 Move X20, [X19+408]
	026 Move X0, [X21]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {45}
	039 Move X0, X19
	040 Call XRScreenSpaceController.FindUIInputModule, X0
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {68}
	045 Move X0, [X19+408]
	046 Compare X0, 0
	047 JumpIfEqual {87}
	048 Move TEMP, 0
	049 Not TEMP
	050 Move W1, TEMP
	051 Move X2, X31
	052 Call UIInputModule.GetCurrentGameObject, X0, X1
	053 Move X8, [X21]
	054 Move X19, X0
	055 Move W9, [X8+224]
	056 Compare W9, 0
	057 JumpIfNotEqual {60}
	058 Move X0, X8
	059 Call 0x1C17DFC
	060 Move X0, X19
	061 Move X1, X31
	062 Move X2, X31
	063 Call Object.op_Equality, X0, X1
	064 Move TEMP, X0
	065 And TEMP, TEMP, 1
	066 Compare TEMP, 1
	067 JumpIfNotEqual {69}
	068 Move W0, W31
	069 Compare X19, 0
	070 JumpIfEqual {87}
	071 Move X8, 0x623000
	072 Move X8, [X8+216]
	073 Move X0, X19
	074 Move X1, [X8]
	075 Call 0x21E68C4, X0
	076 Compare X0, 0
	077 JumpIfEqual {87}
	078 Move X1, X31
	079 Call Canvas.get_renderMode, X0
	080 NotImplemented "Instruction CMP not yet implemented."
	081 NotImplemented "Instruction CSET not yet implemented."
	082 Move X20, [X31+16]
	083 Move X19, [X31+24]
	084 Move X30, [X31+32]
	085 Move X21, [X31+40]
	086 Return X0
	087 Call 0x1C17F20

Method: System.Void InitializeTouchscreenGestureController()

Disassembly:
	0x03B38164 BL 0x1C16F10

ISIL:
	001 Return 

Method: System.Void DestroyTouchscreenGestureController()

Disassembly:
	0x03B382B0 STR V0, [X19 + 0x12]

ISIL:
	001 Return 

Method: System.Void EnableAllDirectActions()

Disassembly:
	0x03B3803C ADRP X0, 0x622000
	0x03B38040 LDR X0, [X0 + 0x108]
	0x03B38044 BL 0x1C16CF4
	0x03B38048 ADRP X0, 0x622000
	0x03B3804C LDR X0, [X0 + 0x110]
	0x03B38050 BL 0x1C16CF4
	0x03B38054 ADRP X0, 0x622000
	0x03B38058 LDR X0, [X0 + 0x120]
	0x03B3805C BL 0x1C16CF4
	0x03B38060 ADRP X0, 0x622000
	0x03B38064 LDR X0, [X0 + 0xF0]
	0x03B38068 BL 0x1C16CF4
	0x03B3806C ADRP X0, 0x60F000
	0x03B38070 LDR X0, [X0 + 0x800]
	0x03B38074 BL 0x1C16CF4
	0x03B38078 ADRP X0, 0x622000
	0x03B3807C LDR X0, [X0 + 0x128]
	0x03B38080 BL 0x1C16CF4
	0x03B38084 ADRP X0, 0x622000
	0x03B38088 LDR X0, [X0 + 0x100]
	0x03B3808C BL 0x1C16CF4
	0x03B38090 ADRP X0, 0x60F000
	0x03B38094 LDR X0, [X0 + 0x808]
	0x03B38098 BL 0x1C16CF4
	0x03B3809C ADRP X0, 0x5E3000
	0x03B380A0 LDR X0, [X0 + 0x518]
	0x03B380A4 BL 0x1C16CF4
	0x03B380A8 MOVZ W8, 0x1
	0x03B380AC STRB W8, [X26 + 0x811]
	0x03B380B0 MOVZ W26, 0x1
	0x03B380B4 STRB W26, [X19 + 0xA4]
	0x03B380B8 LDR X0, [X21]
	0x03B380BC BL 0x1C16F10
	0x03B380C0 LDR X1, [X20]
	0x03B380C4 LDR X6, [X27]
	0x03B380C8 MOV W2, W31
	0x03B380CC MOV X3, X31
	0x03B380D0 MOV X4, X31
	0x03B380D4 MOV X5, X31
	0x03B380D8 MOV X7, X31
	0x03B380DC MOV X20, X0
	0x03B380E0 BL 0x3734C54
	0x03B380E4 ADD X0, X31, 0xC8
	0x03B380E8 MOV X1, X20
	0x03B380EC MOV X2, X31
	0x03B380F0 STP X31, X31, [X31 + 0xC8]
	0x03B380F4 STR X31, [X31 + 0xD8]
	0x03B380F8 BL 0x3745288
	0x03B380FC LDR X8, [X31 + 0xD8]
	0x03B38100 LDUR V0, [X31 + 0xC8]
	0x03B38104 STR X8, [X19 + 0xB8]
	0x03B38108 STUR V0, [X19 + 0xA8]
	0x03B3810C LDR X0, [X21]
	0x03B38110 BL 0x1C16F10
	0x03B38114 LDR X1, [X25]
	0x03B38118 LDR X6, [X27]
	0x03B3811C MOV W2, W31
	0x03B38120 MOV X3, X31
	0x03B38124 MOV X4, X31
	0x03B38128 MOV X5, X31
	0x03B3812C MOV X7, X31
	0x03B38130 MOV X20, X0
	0x03B38134 BL 0x3734C54
	0x03B38138 ADD X0, X31, 0xB0
	0x03B3813C MOV X1, X20
	0x03B38140 MOV X2, X31
	0x03B38144 STP X31, X31, [X31 + 0xB0]
	0x03B38148 STR X31, [X31 + 0xC0]
	0x03B3814C BL 0x3745288
	0x03B38150 LDR X8, [X31 + 0xC0]
	0x03B38154 LDR V0, [X31 + 0xB]
	0x03B38158 STR X8, [X19 + 0xD0]
	0x03B3815C STR V0, [X19 + 0xC]
	0x03B38160 LDR X0, [X21]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+288], X29
	003 Move [X31+304], X30
	004 Move [X31+312], X19
	005 Move X8, [X0+184]
	006 NotImplemented "Instruction LDUR not yet implemented."
	007 Move X19, X0
	008 Add X0, X31, 256
	009 Move X1, X31
	010 Move [X31+272], X8
	011 Move [X31+16], V0
	012 Call InputActionPropertyExtensions.EnableDirectAction, X0
	013 Move X8, [X19+208]
	014 Move V0, [X19+12]
	015 Add X0, X31, 224
	016 Move X1, X31
	017 Move [X31+240], X8
	018 Move [X31+14], V0
	019 Call InputActionPropertyExtensions.EnableDirectAction, X0
	020 Move X8, [X19+232]
	021 NotImplemented "Instruction LDUR not yet implemented."
	022 Add X0, X31, 192
	023 Move X1, X31
	024 Move [X31+208], X8
	025 Move [X31+12], V0
	026 Call InputActionPropertyExtensions.EnableDirectAction, X0
	027 Move X8, [X19+256]
	028 Move V0, [X19+15]
	029 Add X0, X31, 160
	030 Move X1, X31
	031 Move [X31+176], X8
	032 Move [X31+10], V0
	033 Call InputActionPropertyExtensions.EnableDirectAction, X0
	034 Add X8, X19, 264
	035 Move X9, [X8+16]
	036 Move V0, [X8]
	037 Add X0, X31, 128
	038 Move X1, X31
	039 Move [X31+144], X9
	040 Move [X31+8], V0
	041 Call InputActionPropertyExtensions.EnableDirectAction, X0
	042 Move X8, [X19+304]
	043 Move V0, [X19+18]
	044 Add X0, X31, 96
	045 Move X1, X31
	046 Move [X31+112], X8
	047 Move [X31+6], V0
	048 Call InputActionPropertyExtensions.EnableDirectAction, X0
	049 Add X8, X19, 312
	050 Move X9, [X8+16]
	051 Move V0, [X8]
	052 Add X0, X31, 64
	053 Move X1, X31
	054 Move [X31+80], X9
	055 Move [X31+4], V0
	056 Call InputActionPropertyExtensions.EnableDirectAction, X0
	057 Move X8, [X19+352]
	058 Move V0, [X19+21]
	059 Add X0, X31, 32
	060 Move X1, X31
	061 Move [X31+48], X8
	062 Move [X31+2], V0
	063 Call InputActionPropertyExtensions.EnableDirectAction, X0
	064 Add X8, X19, 360
	065 Move X9, [X8+16]
	066 Move V0, [X8]
	067 Add X0, X31, 0
	068 Move X1, X31
	069 Move [X31+16], X9
	070 Move [X31], V0
	071 Call InputActionPropertyExtensions.EnableDirectAction, X0
	072 Move X30, [X31+304]
	073 Move X19, [X31+312]
	074 Move X29, [X31+288]
	075 Add X31, X31, 320
	076 Return 

Method: System.Void DisableAllDirectActions()

Disassembly:
	0x03B38188 BL 0x3734C54
	0x03B3818C ADD X0, X31, 0x98
	0x03B38190 MOV X1, X20
	0x03B38194 MOV X2, X31
	0x03B38198 STP X31, X31, [X31 + 0x98]
	0x03B3819C STR X31, [X31 + 0xA8]
	0x03B381A0 BL 0x3745288
	0x03B381A4 LDR X8, [X31 + 0xA8]
	0x03B381A8 LDUR V0, [X31 + 0x98]
	0x03B381AC STR X8, [X19 + 0xE8]
	0x03B381B0 STUR V0, [X19 + 0xD8]
	0x03B381B4 LDR X0, [X21]
	0x03B381B8 BL 0x1C16F10
	0x03B381BC LDR X1, [X22]
	0x03B381C0 LDR X6, [X27]
	0x03B381C4 MOV W2, W31
	0x03B381C8 MOV X3, X31
	0x03B381CC MOV X4, X31
	0x03B381D0 MOV X5, X31
	0x03B381D4 MOV X7, X31
	0x03B381D8 MOV X20, X0
	0x03B381DC BL 0x3734C54
	0x03B381E0 ADD X0, X31, 0x80
	0x03B381E4 MOV X1, X20
	0x03B381E8 MOV X2, X31
	0x03B381EC STP X31, X31, [X31 + 0x80]
	0x03B381F0 STR X31, [X31 + 0x90]
	0x03B381F4 BL 0x3745288
	0x03B381F8 LDR X8, [X31 + 0x90]
	0x03B381FC LDR V0, [X31 + 0x8]
	0x03B38200 STR X8, [X19 + 0x100]
	0x03B38204 STR V0, [X19 + 0xF]
	0x03B38208 LDR X0, [X21]
	0x03B3820C BL 0x1C16F10
	0x03B38210 LDR X6, [X24]
	0x03B38214 MOV X1, X31
	0x03B38218 MOV W2, W31
	0x03B3821C MOV X3, X31
	0x03B38220 MOV X4, X31
	0x03B38224 MOV X5, X31
	0x03B38228 MOV X7, X31
	0x03B3822C MOV X20, X0
	0x03B38230 BL 0x3734C54
	0x03B38234 ADD X0, X31, 0x68
	0x03B38238 MOV X1, X20
	0x03B3823C MOV X2, X31
	0x03B38240 STP X31, X31, [X31 + 0x68]
	0x03B38244 STR X31, [X31 + 0x78]
	0x03B38248 BL 0x3745288
	0x03B3824C LDR X8, [X31 + 0x78]
	0x03B38250 LDUR V0, [X31 + 0x68]
	0x03B38254 ADD X9, X19, 0x108
	0x03B38258 STR X8, [X9 + 0x10]
	0x03B3825C STR V0, [X9]
	0x03B38260 LDR X0, [X21]
	0x03B38264 BL 0x1C16F10
	0x03B38268 LDR X1, [X29]
	0x03B3826C LDR X6, [X24]
	0x03B38270 MOV W2, W31
	0x03B38274 MOV X3, X31
	0x03B38278 MOV X4, X31
	0x03B3827C MOV X5, X31
	0x03B38280 MOV X7, X31
	0x03B38284 MOV X20, X0
	0x03B38288 BL 0x3734C54
	0x03B3828C ADD X0, X31, 0x50
	0x03B38290 MOV X1, X20
	0x03B38294 MOV X2, X31
	0x03B38298 STP X31, X31, [X31 + 0x50]
	0x03B3829C STR X31, [X31 + 0x60]
	0x03B382A0 BL 0x3745288
	0x03B382A4 LDR X8, [X31 + 0x60]
	0x03B382A8 LDR V0, [X31 + 0x5]
	0x03B382AC STR X8, [X19 + 0x130]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+288], X29
	003 Move [X31+304], X30
	004 Move [X31+312], X19
	005 Move X8, [X0+184]
	006 NotImplemented "Instruction LDUR not yet implemented."
	007 Move X19, X0
	008 Add X0, X31, 256
	009 Move X1, X31
	010 Move [X31+272], X8
	011 Move [X31+16], V0
	012 Call InputActionPropertyExtensions.DisableDirectAction, X0
	013 Move X8, [X19+208]
	014 Move V0, [X19+12]
	015 Add X0, X31, 224
	016 Move X1, X31
	017 Move [X31+240], X8
	018 Move [X31+14], V0
	019 Call InputActionPropertyExtensions.DisableDirectAction, X0
	020 Move X8, [X19+232]
	021 NotImplemented "Instruction LDUR not yet implemented."
	022 Add X0, X31, 192
	023 Move X1, X31
	024 Move [X31+208], X8
	025 Move [X31+12], V0
	026 Call InputActionPropertyExtensions.DisableDirectAction, X0
	027 Move X8, [X19+256]
	028 Move V0, [X19+15]
	029 Add X0, X31, 160
	030 Move X1, X31
	031 Move [X31+176], X8
	032 Move [X31+10], V0
	033 Call InputActionPropertyExtensions.DisableDirectAction, X0
	034 Add X8, X19, 264
	035 Move X9, [X8+16]
	036 Move V0, [X8]
	037 Add X0, X31, 128
	038 Move X1, X31
	039 Move [X31+144], X9
	040 Move [X31+8], V0
	041 Call InputActionPropertyExtensions.DisableDirectAction, X0
	042 Move X8, [X19+304]
	043 Move V0, [X19+18]
	044 Add X0, X31, 96
	045 Move X1, X31
	046 Move [X31+112], X8
	047 Move [X31+6], V0
	048 Call InputActionPropertyExtensions.DisableDirectAction, X0
	049 Add X8, X19, 312
	050 Move X9, [X8+16]
	051 Move V0, [X8]
	052 Add X0, X31, 64
	053 Move X1, X31
	054 Move [X31+80], X9
	055 Move [X31+4], V0
	056 Call InputActionPropertyExtensions.DisableDirectAction, X0
	057 Move X8, [X19+352]
	058 Move V0, [X19+21]
	059 Add X0, X31, 32
	060 Move X1, X31
	061 Move [X31+48], X8
	062 Move [X31+2], V0
	063 Call InputActionPropertyExtensions.DisableDirectAction, X0
	064 Add X8, X19, 360
	065 Move X9, [X8+16]
	066 Move V0, [X8]
	067 Add X0, X31, 0
	068 Move X1, X31
	069 Move [X31+16], X9
	070 Move [X31], V0
	071 Call InputActionPropertyExtensions.DisableDirectAction, X0
	072 Move X30, [X31+304]
	073 Move X19, [X31+312]
	074 Move X29, [X31+288]
	075 Add X31, X31, 320
	076 Return 

Method: System.Void SetInputActionProperty(ref UnityEngine.InputSystem.InputActionProperty property, UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B37BE0 MOV X1, X31
	0x03B37BE4 BL 0x3735430
	0x03B37BE8 TBZ X0, 0x0, 0x3B37BF4
	0x03B37BEC MOV X0, X21
	0x03B37BF0 B 0x3B37C28
	0x03B37BF4 ADD X20, X20, 0x150
	0x03B37BF8 MOV X0, X20
	0x03B37BFC MOV X1, X31
	0x03B37C00 BL 0x3745120
	0x03B37C04 CBZ X0, 0x3B37C3C
	0x03B37C08 MOV X0, X20
	0x03B37C0C MOV X1, X31
	0x03B37C10 BL 0x3745120
	0x03B37C14 CBZ X0, 0x3B37C54
	0x03B37C18 MOV X1, X31
	0x03B37C1C BL 0x3735430
	0x03B37C20 TBZ X0, 0x0, 0x3B37C38
	0x03B37C24 MOV X0, X20
	0x03B37C28 MOV X1, X31
	0x03B37C2C BL 0x3745120
	0x03B37C30 MOVZ W8, 0x1
	0x03B37C34 B 0x3B37C40
	0x03B37C38 MOV X0, X31
	0x03B37C3C MOV W8, W31
	0x03B37C40 STR X0, [X19]
	0x03B37C44 LDP X20, X19, [X31 + 0x10]
	0x03B37C48 MOV W0, W8
	0x03B37C4C LDP X30, X21, [X31], #0x20
	0x03B37C50 RET
	0x03B37C54 BL 0x1C16F20
	0x03B37C58 STP X30, X21, [X31 - 0x20]!
	0x03B37C5C STP X20, X19, [X31 + 0x10]
	0x03B37C60 ADD X20, X0, 0xC0
	0x03B37C64 MOV X19, X1
	0x03B37C68 MOV X21, X0
	0x03B37C6C MOV X0, X20
	0x03B37C70 MOV X1, X31
	0x03B37C74 BL 0x3745120
	0x03B37C78 CBZ X0, 0x3B37C98
	0x03B37C7C MOV X0, X20
	0x03B37C80 MOV X1, X31
	0x03B37C84 BL 0x3745120
	0x03B37C88 CBZ X0, 0x3B37CF8
	0x03B37C8C MOV X1, X31
	0x03B37C90 BL 0x3735430
	0x03B37C94 TBNZ X0, 0x0, 0x3B37CC8
	0x03B37C98 ADD X20, X21, 0xA8
	0x03B37C9C MOV X0, X20
	0x03B37CA0 MOV X1, X31
	0x03B37CA4 BL 0x3745120
	0x03B37CA8 CBZ X0, 0x3B37CE0
	0x03B37CAC MOV X0, X20
	0x03B37CB0 MOV X1, X31
	0x03B37CB4 BL 0x3745120
	0x03B37CB8 CBZ X0, 0x3B37CF8
	0x03B37CBC MOV X1, X31
	0x03B37CC0 BL 0x3734AB8
	0x03B37CC4 TBZ X0, 0x0, 0x3B37CDC

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], X30
	003 Move [X31+72], X23
	004 Move [X31+80], X22
	005 Move [X31+88], X21
	006 Move [X31+96], X20
	007 Move [X31+104], X19
	008 Move X23, 0x8AC000
	009 Move X22, 0x5BD000
	010 Move W8, [X23+2063]
	011 Move X22, [X22+2416]
	012 Move X21, X2
	013 Move X19, X1
	014 Move X20, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {24}
	019 Move X0, 0x5BD000
	020 Move X0, [X0+2416]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X23+2063], W8
	024 Move X0, [X22]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X31
	030 Call Application.get_isPlaying
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {42}
	035 Move X8, [X19+16]
	036 Move V0, [X19]
	037 Add X0, X31, 32
	038 Move X1, X31
	039 Move [X31+48], X8
	040 Move [X31+2], V0
	041 Call InputActionPropertyExtensions.DisableDirectAction, X0
	042 Move X8, [X21+16]
	043 Move V0, [X21]
	044 Move [X19+16], X8
	045 Move [X19], V0
	046 Move X0, [X22]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X31
	052 Call Application.get_isPlaying
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {71}
	057 Move X0, X20
	058 Move X1, X31
	059 Call Behaviour.get_isActiveAndEnabled, X0
	060 Move TEMP, X0
	061 And TEMP, TEMP, 1
	062 Compare TEMP, 1
	063 JumpIfNotEqual {71}
	064 Move X8, [X19+16]
	065 Move V0, [X19]
	066 Add X0, X31, 0
	067 Move X1, X31
	068 Move [X31+16], X8
	069 Move [X31], V0
	070 Call InputActionPropertyExtensions.EnableDirectAction, X0
	071 Move X20, [X31+96]
	072 Move X19, [X31+104]
	073 Move X22, [X31+80]
	074 Move X21, [X31+88]
	075 Move X30, [X31+64]
	076 Move X23, [X31+72]
	077 Add X31, X31, 112
	078 Return 

Method: System.Boolean IsDisabledReferenceAction(UnityEngine.InputSystem.InputActionProperty property)

Disassembly:
	0x03B3876C B 0x3B38780
	0x03B38770 LDR W9, [X10]
	0x03B38774 ADD W9, W9, 0x4
	0x03B38778 ADD X8, X8, W9, 0x4, SXTW
	0x03B3877C ADD X0, X8, 0x138
	0x03B38780 LDP X8, X1, [X0]
	0x03B38784 MOV X0, X19
	0x03B38788 BLR X8
	0x03B3878C CBZ X0, 0x3B38828
	0x03B38790 LDR W8, [X0 + 0x18]
	0x03B38794 CMP W8, 0x1
	0x03B38798 B.LT 0x3B387DC
	0x03B3879C LDR X8, [X19]
	0x03B387A0 LDR X1, [X20]
	0x03B387A4 LDRH W9, [X8 + 0x12E]
	0x03B387A8 CBZ X9, 0x3B387CC
	0x03B387AC LDR X10, [X8 + 0xB0]
	0x03B387B0 ADD X10, X10, 0x8
	0x03B387B4 LDUR X11, [X10 - 0x8]
	0x03B387B8 CMP X11, X1
	0x03B387BC B.EQ 0x3B387EC
	0x03B387C0 SUBS X9, X9, 0x1
	0x03B387C4 ADD X10, X10, 0x10
	0x03B387C8 B.NE 0x3B387B4
	0x03B387CC MOVZ W2, 0x4
	0x03B387D0 MOV X0, X19
	0x03B387D4 BL 0x1C5C788
	0x03B387D8 B 0x3B387FC
	0x03B387DC LDP X20, X19, [X31 + 0x10]
	0x03B387E0 MOV X0, X31
	0x03B387E4 LDR X30, [X31], #0x20
	0x03B387E8 RET
	0x03B387EC LDR W9, [X10]
	0x03B387F0 ADD W9, W9, 0x4
	0x03B387F4 ADD X8, X8, W9, 0x4, SXTW
	0x03B387F8 ADD X0, X8, 0x138
	0x03B387FC LDP X8, X1, [X0]
	0x03B38800 MOV X0, X19
	0x03B38804 BLR X8
	0x03B38808 CBZ X0, 0x3B38828
	0x03B3880C ADRP X8, 0x622000
	0x03B38810 LDR X8, [X8 + 0x170]
	0x03B38814 LDP X20, X19, [X31 + 0x10]
	0x03B38818 MOV W1, W31
	0x03B3881C LDR X2, [X8]
	0x03B38820 LDR X30, [X31], #0x20
	0x03B38824 B 0x301BCCC
	0x03B38828 BL 0x1C16F20
	0x03B3882C LDP S0, S1, [X0 + 0x20]
	0x03B38830 LDP S2, S3, [X0 + 0x28]
	0x03B38834 RET

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8AB000
	006 Move X20, 0x5BC000
	007 Move W8, [X21+2064]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5BC000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2064], W8
	019 Move X0, X19
	020 Move X1, X31
	021 Call InputActionProperty.get_reference, X0
	022 Move X8, [X20]
	023 Move X20, X0
	024 Move W9, [X8+224]
	025 Compare W9, 0
	026 JumpIfNotEqual {29}
	027 Move X0, X8
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Inequality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {58}
	037 Move X0, X19
	038 Move X1, X31
	039 Call InputActionProperty.get_reference, X0
	040 Compare X0, 0
	041 JumpIfEqual {65}
	042 Move X1, X31
	043 Call InputActionReference.get_action, X0
	044 Compare X0, 0
	045 JumpIfEqual {58}
	046 Move X0, X19
	047 Move X1, X31
	048 Call InputActionProperty.get_reference, X0
	049 Compare X0, 0
	050 JumpIfEqual {65}
	051 Move X1, X31
	052 Call InputActionReference.get_action, X0
	053 Compare X0, 0
	054 JumpIfEqual {65}
	055 Move X1, X31
	056 Call InputAction.get_enabled, X0
	057 Xor W8, W0, 1
	058 Move W8, W31
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 And W0, W8, 1
	062 Move X30, [X31+32]
	063 Move X21, [X31+40]
	064 Return X0
	065 Call 0x1C17F20

Method: UnityEngine.InputSystem.InputActionProperty get_pinchStartPosition()

Disassembly:
	0x03B38E48 LDR X10, [X8 + 0xB0]
	0x03B38E4C ADD X10, X10, 0x8
	0x03B38E50 LDUR X11, [X10 - 0x8]
	0x03B38E54 CMP X11, X1
	0x03B38E58 B.EQ 0x3B38E78

ISIL:
	001 Move X9, [X0+256]
	002 Move V0, [X0+15]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_pinchStartPosition(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B38E5C SUBS X9, X9, 0x1
	0x03B38E60 ADD X10, X10, 0x10
	0x03B38E64 B.NE 0x3B38E50
	0x03B38E68 MOV X0, X20
	0x03B38E6C MOV W2, W31
	0x03B38E70 BL 0x1C5C788
	0x03B38E74 B 0x3B38E84
	0x03B38E78 LDRSW X9, [X10]
	0x03B38E7C ADD X8, X8, X9, 0x4, LSL
	0x03B38E80 ADD X0, X8, 0x138
	0x03B38E84 LDP X8, X1, [X0]
	0x03B38E88 MOV X0, X20

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 240
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_pinchGapDelta()

Disassembly:
	0x03B38E8C BLR X8
	0x03B38E90 ADRP X8, 0x622000
	0x03B38E94 LDR X8, [X8 + 0x188]
	0x03B38E98 MOV X20, X0
	0x03B38E9C LDR X8, [X8]

ISIL:
	001 Move X9, [X0+304]
	002 Move V0, [X0+18]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_pinchGapDelta(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B38EA0 MOV X0, X8
	0x03B38EA4 BL 0x1C16F10
	0x03B38EA8 ADRP X8, 0x622000
	0x03B38EAC LDR X8, [X8 + 0x1C0]
	0x03B38EB0 MOV X1, X19
	0x03B38EB4 MOV X3, X31
	0x03B38EB8 MOV X21, X0
	0x03B38EBC LDR X2, [X8]
	0x03B38EC0 BL 0x2725C6C
	0x03B38EC4 CBZ X20, 0x3B38F98
	0x03B38EC8 ADRP X8, 0x622000
	0x03B38ECC LDR X8, [X8 + 0x1B0]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 288
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_twistStartPosition()

Disassembly:
	0x03B38ED0 MOV X0, X20
	0x03B38ED4 MOV X1, X21
	0x03B38ED8 LDR X2, [X8]
	0x03B38EDC BL 0x2729B68
	0x03B38EE0 LDR X20, [X19 + 0x50]
	0x03B38EE4 CBZ X20, 0x3B38F98

ISIL:
	001 Add X9, X0, 312
	002 Move X10, [X9+16]
	003 Move V0, [X9]
	004 Move [X8+16], X10
	005 Move [X8], V0
	006 Return X0

Method: System.Void set_twistStartPosition(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B38EE8 LDR X8, [X20]
	0x03B38EEC LDR X1, [X23]
	0x03B38EF0 LDRH W9, [X8 + 0x12E]
	0x03B38EF4 CBZ X9, 0x3B38F18
	0x03B38EF8 LDR X10, [X8 + 0xB0]
	0x03B38EFC ADD X10, X10, 0x8
	0x03B38F00 LDUR X11, [X10 - 0x8]
	0x03B38F04 CMP X11, X1
	0x03B38F08 B.EQ 0x3B38F28
	0x03B38F0C SUBS X9, X9, 0x1
	0x03B38F10 ADD X10, X10, 0x10
	0x03B38F14 B.NE 0x3B38F00

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 312
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_twistRotationDeltaAction()

Disassembly:
	0x03B38F18 MOVZ W2, 0x1
	0x03B38F1C MOV X0, X20
	0x03B38F20 BL 0x1C5C788
	0x03B38F24 B 0x3B38F38
	0x03B38F28 LDR W9, [X10]

ISIL:
	001 Move X9, [X0+352]
	002 Move V0, [X0+21]
	003 Move [X8+16], X9
	004 Move [X8], V0
	005 Return X0

Method: System.Void set_twistRotationDeltaAction(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B38F2C ADD W9, W9, 0x1
	0x03B38F30 ADD X8, X8, W9, 0x4, SXTW
	0x03B38F34 ADD X0, X8, 0x138
	0x03B38F38 LDP X8, X1, [X0]
	0x03B38F3C MOV X0, X20
	0x03B38F40 BLR X8
	0x03B38F44 ADRP X8, 0x5BE000
	0x03B38F48 LDR X8, [X8 + 0x408]
	0x03B38F4C MOV X20, X0
	0x03B38F50 LDR X8, [X8]
	0x03B38F54 MOV X0, X8
	0x03B38F58 BL 0x1C16F10

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 336
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: UnityEngine.InputSystem.InputActionProperty get_screenTouchCount()

Disassembly:
	0x03B38F5C ADRP X8, 0x622000
	0x03B38F60 LDR X8, [X8 + 0x1D0]
	0x03B38F64 MOV X1, X19
	0x03B38F68 MOV X3, X31
	0x03B38F6C MOV X21, X0
	0x03B38F70 LDR X2, [X8]

ISIL:
	001 Add X9, X0, 360
	002 Move X10, [X9+16]
	003 Move V0, [X9]
	004 Move [X8+16], X10
	005 Move [X8], V0
	006 Return X0

Method: System.Void set_screenTouchCount(UnityEngine.InputSystem.InputActionProperty value)

Disassembly:
	0x03B38F74 BL 0x2725C6C
	0x03B38F78 CBZ X20, 0x3B38F98
	0x03B38F7C ADRP X8, 0x5BE000
	0x03B38F80 LDR X8, [X8 + 0x410]
	0x03B38F84 MOV X0, X20
	0x03B38F88 MOV X1, X21
	0x03B38F8C LDR X2, [X8]
	0x03B38F90 BL 0x2729B68
	0x03B38F94 B 0x3B38B30
	0x03B38F98 BL 0x1C16F20
	0x03B38F9C STR X30, [X31 - 0x30]!
	0x03B38FA0 STP X22, X21, [X31 + 0x10]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+32], X30
	003 Move X8, [X1+16]
	004 Move V0, [X1]
	005 Add X1, X0, 360
	006 Add X2, X31, 0
	007 Move [X31+16], X8
	008 Move [X31], V0
	009 Call XRScreenSpaceController.SetInputActionProperty, X0, X1, X2
	010 Move X30, [X31+32]
	011 Add X31, X31, 48
	012 Return 

Method: System.Void .ctor()

Disassembly:
	0x03B38FA4 STP X20, X19, [X31 + 0x20]
	0x03B38FA8 ADRP X20, 0x8AA000
	0x03B38FAC LDRB W8, [X20 + 0x816]
	0x03B38FB0 MOV X19, X0
	0x03B38FB4 TBNZ X8, 0x0, 0x3B39074
	0x03B38FB8 ADRP X0, 0x622000
	0x03B38FBC LDR X0, [X0 + 0x148]
	0x03B38FC0 BL 0x1C16CF4
	0x03B38FC4 ADRP X0, 0x622000
	0x03B38FC8 LDR X0, [X0 + 0x160]
	0x03B38FCC BL 0x1C16CF4
	0x03B38FD0 ADRP X0, 0x5BB000
	0x03B38FD4 LDR X0, [X0 + 0x598]
	0x03B38FD8 BL 0x1C16CF4
	0x03B38FDC ADRP X0, 0x622000
	0x03B38FE0 LDR X0, [X0 + 0x188]
	0x03B38FE4 BL 0x1C16CF4
	0x03B38FE8 ADRP X0, 0x622000
	0x03B38FEC LDR X0, [X0 + 0x190]
	0x03B38FF0 BL 0x1C16CF4
	0x03B38FF4 ADRP X0, 0x5BE000
	0x03B38FF8 LDR X0, [X0 + 0x408]
	0x03B38FFC BL 0x1C16CF4
	0x03B39000 ADRP X0, 0x621000
	0x03B39004 LDR X0, [X0 + 0x198]
	0x03B39008 BL 0x1C16CF4
	0x03B3900C ADRP X0, 0x621000
	0x03B39010 LDR X0, [X0 + 0x1F0]
	0x03B39014 BL 0x1C16CF4
	0x03B39018 ADRP X0, 0x621000
	0x03B3901C LDR X0, [X0 + 0x1F8]
	0x03B39020 BL 0x1C16CF4
	0x03B39024 ADRP X0, 0x621000
	0x03B39028 LDR X0, [X0 + 0x200]
	0x03B3902C BL 0x1C16CF4
	0x03B39030 ADRP X0, 0x621000
	0x03B39034 LDR X0, [X0 + 0x208]
	0x03B39038 BL 0x1C16CF4
	0x03B3903C ADRP X0, 0x621000
	0x03B39040 LDR X0, [X0 + 0x1B8]
	0x03B39044 BL 0x1C16CF4
	0x03B39048 ADRP X0, 0x621000
	0x03B3904C LDR X0, [X0 + 0x1C0]
	0x03B39050 BL 0x1C16CF4
	0x03B39054 ADRP X0, 0x621000
	0x03B39058 LDR X0, [X0 + 0x1C8]
	0x03B3905C BL 0x1C16CF4
	0x03B39060 ADRP X0, 0x621000
	0x03B39064 LDR X0, [X0 + 0x1D0]
	0x03B39068 BL 0x1C16CF4
	0x03B3906C MOVZ W8, 0x1
	0x03B39070 STRB W8, [X20 + 0x816]
	0x03B39074 LDR X8, [X19 + 0x40]
	0x03B39078 CBZ X8, 0x3B39290
	0x03B3907C ADRP X10, 0x5BA000
	0x03B39080 LDR X10, [X10 + 0x598]
	0x03B39084 LDR X9, [X8]
	0x03B39088 LDR X0, [X10]
	0x03B3908C LDRB W11, [X9 + 0x130]
	0x03B39090 LDRB W10, [X0 + 0x130]
	0x03B39094 CMP W11, W10
	0x03B39098 B.CC 0x3B39290
	0x03B3909C LDR X9, [X9 + 0xC8]
	0x03B390A0 ADD X9, X9, X10, 0x3, LSL
	0x03B390A4 LDUR X9, [X9 - 0x8]
	0x03B390A8 CMP X9, X0
	0x03B390AC CSEL X20, X8, X31, EQ
	0x03B390B0 B.NE 0x3B39290
	0x03B390B4 LDR W8, [X0 + 0xE0]
	0x03B390B8 CBNZ W8, 0x3B390C0
	0x03B390BC BL 0x1C16DFC
	0x03B390C0 MOV X0, X20
	0x03B390C4 MOV X1, X31
	0x03B390C8 MOV X2, X31
	0x03B390CC BL 0x3C354F8
	0x03B390D0 TBZ X0, 0x0, 0x3B39290
	0x03B390D4 LDR X20, [X19 + 0x48]
	0x03B390D8 CBZ X20, 0x3B39240
	0x03B390DC ADRP X22, 0x621000
	0x03B390E0 LDR X8, [X20]
	0x03B390E4 LDR X22, [X22 + 0x148]
	0x03B390E8 LDRH W9, [X8 + 0x12E]
	0x03B390EC LDR X1, [X22]
	0x03B390F0 CBZ X9, 0x3B39114
	0x03B390F4 LDR X10, [X8 + 0xB0]
	0x03B390F8 ADD X10, X10, 0x8
	0x03B390FC LDUR X11, [X10 - 0x8]
	0x03B39100 CMP X11, X1
	0x03B39104 B.EQ 0x3B39124
	0x03B39108 SUBS X9, X9, 0x1
	0x03B3910C ADD X10, X10, 0x10
	0x03B39110 B.NE 0x3B390FC
	0x03B39114 MOV X0, X20
	0x03B39118 MOV W2, W31
	0x03B3911C BL 0x1C5C788
	0x03B39120 B 0x3B39130
	0x03B39124 LDRSW X9, [X10]
	0x03B39128 ADD X8, X8, X9, 0x4, LSL
	0x03B3912C ADD X0, X8, 0x138
	0x03B39130 LDP X8, X1, [X0]
	0x03B39134 MOV X0, X20
	0x03B39138 BLR X8
	0x03B3913C ADRP X8, 0x621000
	0x03B39140 LDR X8, [X8 + 0x190]
	0x03B39144 MOV X20, X0
	0x03B39148 LDR X8, [X8]
	0x03B3914C MOV X0, X8
	0x03B39150 BL 0x1C16F10
	0x03B39154 ADRP X8, 0x621000
	0x03B39158 LDR X8, [X8 + 0x1B8]
	0x03B3915C MOV X1, X19
	0x03B39160 MOV X3, X31
	0x03B39164 MOV X21, X0
	0x03B39168 LDR X2, [X8]
	0x03B3916C BL 0x2725C6C
	0x03B39170 CBZ X20, 0x3B393C8
	0x03B39174 ADRP X8, 0x621000
	0x03B39178 LDR X8, [X8 + 0x1F8]
	0x03B3917C MOV X0, X20
	0x03B39180 MOV X1, X21
	0x03B39184 LDR X2, [X8]
	0x03B39188 BL 0x2729BA4
	0x03B3918C LDR X20, [X19 + 0x48]
	0x03B39190 CBZ X20, 0x3B393C8
	0x03B39194 LDR X8, [X20]
	0x03B39198 LDR X1, [X22]
	0x03B3919C LDRH W9, [X8 + 0x12E]
	0x03B391A0 CBZ X9, 0x3B391C4
	0x03B391A4 LDR X10, [X8 + 0xB0]
	0x03B391A8 ADD X10, X10, 0x8
	0x03B391AC LDUR X11, [X10 - 0x8]
	0x03B391B0 CMP X11, X1
	0x03B391B4 B.EQ 0x3B391D4
	0x03B391B8 SUBS X9, X9, 0x1
	0x03B391BC ADD X10, X10, 0x10
	0x03B391C0 B.NE 0x3B391AC
	0x03B391C4 MOVZ W2, 0x1
	0x03B391C8 MOV X0, X20
	0x03B391CC BL 0x1C5C788
	0x03B391D0 B 0x3B391E4
	0x03B391D4 LDR W9, [X10]
	0x03B391D8 ADD W9, W9, 0x1
	0x03B391DC ADD X8, X8, W9, 0x4, SXTW
	0x03B391E0 ADD X0, X8, 0x138
	0x03B391E4 LDP X8, X1, [X0]
	0x03B391E8 MOV X0, X20
	0x03B391EC BLR X8
	0x03B391F0 ADRP X8, 0x621000
	0x03B391F4 LDR X8, [X8 + 0x198]
	0x03B391F8 MOV X20, X0
	0x03B391FC LDR X8, [X8]
	0x03B39200 MOV X0, X8
	0x03B39204 BL 0x1C16F10
	0x03B39208 ADRP X8, 0x621000
	0x03B3920C LDR X8, [X8 + 0x1C8]
	0x03B39210 MOV X1, X19
	0x03B39214 MOV X3, X31
	0x03B39218 MOV X21, X0
	0x03B3921C LDR X2, [X8]
	0x03B39220 BL 0x2725C6C
	0x03B39224 CBZ X20, 0x3B393C8
	0x03B39228 ADRP X8, 0x621000
	0x03B3922C LDR X8, [X8 + 0x208]
	0x03B39230 MOV X0, X20
	0x03B39234 MOV X1, X21
	0x03B39238 LDR X2, [X8]
	0x03B3923C BL 0x2729BA4
	0x03B39240 LDR X20, [X19 + 0x50]
	0x03B39244 CBZ X20, 0x3B39290
	0x03B39248 ADRP X22, 0x621000
	0x03B3924C LDR X8, [X20]
	0x03B39250 LDR X22, [X22 + 0x160]
	0x03B39254 LDRH W9, [X8 + 0x12E]
	0x03B39258 LDR X1, [X22]
	0x03B3925C CBZ X9, 0x3B39280
	0x03B39260 LDR X10, [X8 + 0xB0]
	0x03B39264 ADD X10, X10, 0x8
	0x03B39268 LDUR X11, [X10 - 0x8]
	0x03B3926C CMP X11, X1
	0x03B39270 B.EQ 0x3B392A0
	0x03B39274 SUBS X9, X9, 0x1
	0x03B39278 ADD X10, X10, 0x10
	0x03B3927C B.NE 0x3B39268
	0x03B39280 MOV X0, X20
	0x03B39284 MOV W2, W31
	0x03B39288 BL 0x1C5C788
	0x03B3928C B 0x3B392AC
	0x03B39290 LDP X20, X19, [X31 + 0x20]
	0x03B39294 LDP X22, X21, [X31 + 0x10]
	0x03B39298 LDR X30, [X31], #0x30
	0x03B3929C RET
	0x03B392A0 LDRSW X9, [X10]
	0x03B392A4 ADD X8, X8, X9, 0x4, LSL
	0x03B392A8 ADD X0, X8, 0x138
	0x03B392AC LDP X8, X1, [X0]
	0x03B392B0 MOV X0, X20
	0x03B392B4 BLR X8
	0x03B392B8 ADRP X8, 0x621000
	0x03B392BC LDR X8, [X8 + 0x188]
	0x03B392C0 MOV X20, X0
	0x03B392C4 LDR X8, [X8]
	0x03B392C8 MOV X0, X8
	0x03B392CC BL 0x1C16F10
	0x03B392D0 ADRP X8, 0x621000
	0x03B392D4 LDR X8, [X8 + 0x1C0]
	0x03B392D8 MOV X1, X19
	0x03B392DC MOV X3, X31
	0x03B392E0 MOV X21, X0
	0x03B392E4 LDR X2, [X8]
	0x03B392E8 BL 0x2725C6C
	0x03B392EC CBZ X20, 0x3B393C8
	0x03B392F0 ADRP X8, 0x621000
	0x03B392F4 LDR X8, [X8 + 0x1F0]
	0x03B392F8 MOV X0, X20
	0x03B392FC MOV X1, X21
	0x03B39300 LDR X2, [X8]
	0x03B39304 BL 0x2729BA4
	0x03B39308 LDR X20, [X19 + 0x50]
	0x03B3930C CBZ X20, 0x3B393C8
	0x03B39310 LDR X8, [X20]
	0x03B39314 LDR X1, [X22]
	0x03B39318 LDRH W9, [X8 + 0x12E]
	0x03B3931C CBZ X9, 0x3B39340
	0x03B39320 LDR X10, [X8 + 0xB0]
	0x03B39324 ADD X10, X10, 0x8
	0x03B39328 LDUR X11, [X10 - 0x8]
	0x03B3932C CMP X11, X1
	0x03B39330 B.EQ 0x3B39350
	0x03B39334 SUBS X9, X9, 0x1
	0x03B39338 ADD X10, X10, 0x10
	0x03B3933C B.NE 0x3B39328
	0x03B39340 MOVZ W2, 0x1
	0x03B39344 MOV X0, X20
	0x03B39348 BL 0x1C5C788
	0x03B3934C B 0x3B39360
	0x03B39350 LDR W9, [X10]
	0x03B39354 ADD W9, W9, 0x1
	0x03B39358 ADD X8, X8, W9, 0x4, SXTW
	0x03B3935C ADD X0, X8, 0x138
	0x03B39360 LDP X8, X1, [X0]
	0x03B39364 MOV X0, X20
	0x03B39368 BLR X8
	0x03B3936C ADRP X8, 0x5BD000
	0x03B39370 LDR X8, [X8 + 0x408]
	0x03B39374 MOV X20, X0
	0x03B39378 LDR X8, [X8]
	0x03B3937C MOV X0, X8
	0x03B39380 BL 0x1C16F10
	0x03B39384 ADRP X8, 0x621000
	0x03B39388 LDR X8, [X8 + 0x1D0]
	0x03B3938C MOV X1, X19
	0x03B39390 MOV X3, X31
	0x03B39394 MOV X21, X0
	0x03B39398 LDR X2, [X8]
	0x03B3939C BL 0x2725C6C
	0x03B393A0 CBZ X20, 0x3B393C8
	0x03B393A4 ADRP X8, 0x621000
	0x03B393A8 LDR X8, [X8 + 0x200]
	0x03B393AC MOV X0, X20
	0x03B393B0 MOV X1, X21
	0x03B393B4 LDP X20, X19, [X31 + 0x20]
	0x03B393B8 LDR X2, [X8]
	0x03B393BC LDP X22, X21, [X31 + 0x10]
	0x03B393C0 LDR X30, [X31], #0x30
	0x03B393C4 B 0x2729BA4
	0x03B393C8 BL 0x1C16F20
	0x03B393CC SUB X31, X31, 0xF0
	0x03B393D0 STR D12, [X31 + 0x60]
	0x03B393D4 STP D11, D10, [X31 + 0x70]
	0x03B393D8 STP D9, D8, [X31 + 0x80]
	0x03B393DC STP X29, X30, [X31 + 0x90]
	0x03B393E0 STP X28, X27, [X31 + 0xA0]
	0x03B393E4 STP X26, X25, [X31 + 0xB0]
	0x03B393E8 STP X24, X23, [X31 + 0xC0]
	0x03B393EC STP X22, X21, [X31 + 0xD0]
	0x03B393F0 STP X20, X19, [X31 + 0xE0]
	0x03B393F4 ADRP X21, 0x8A9000
	0x03B393F8 LDRB W8, [X21 + 0x817]
	0x03B393FC MOV W19, W1
	0x03B39400 MOV X20, X0
	0x03B39404 TBNZ X8, 0x0, 0x3B394C4
	0x03B39408 ADRP X0, 0x5BA000
	0x03B3940C LDR X0, [X0 + 0xA28]

ISIL:
	001 Subtract X31, X31, 320
	002 Move [X31+224], X29
	003 Move [X31+232], X30
	004 Move [X31+240], X28
	005 Move [X31+248], X27
	006 Move [X31+256], X26
	007 Move [X31+264], X25
	008 Move [X31+272], X24
	009 Move [X31+280], X23
	010 Move [X31+288], X22
	011 Move [X31+296], X21
	012 Move [X31+304], X20
	013 Move [X31+312], X19
	014 Move X26, 0x8AB000
	015 Move X21, 0x5C0000
	016 Move X20, 0x623000
	017 Move X27, 0x610000
	018 Move X25, 0x623000
	019 Move X23, 0x623000
	020 Move X22, 0x623000
	021 Move X24, 0x5E4000
	022 Move X29, 0x623000
	023 Move X28, 0x623000
	024 Move X21, [X21+992]
	025 Move X20, [X20+240]
	026 Move X27, [X27+2048]
	027 Move X25, [X25+248]
	028 Move X23, [X23+256]
	029 Move X22, [X22+264]
	030 Move X24, [X24+1304]
	031 Move W8, [X26+2065]
	032 Move X29, [X29+272]
	033 Move X28, [X28+280]
	034 Move X19, X0
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {77}
	039 Move X0, 0x5BF000
	040 Move X0, [X0+992]
	041 Call 0x1C17CF4
	042 Move X0, 0x622000
	043 Move X0, [X0+248]
	044 Call 0x1C17CF4
	045 Move X0, 0x622000
	046 Move X0, [X0+280]
	047 Call 0x1C17CF4
	048 Move X0, 0x622000
	049 Move X0, [X0+264]
	050 Call 0x1C17CF4
	051 Move X0, 0x622000
	052 Move X0, [X0+272]
	053 Call 0x1C17CF4
	054 Move X0, 0x622000
	055 Move X0, [X0+288]
	056 Call 0x1C17CF4
	057 Move X0, 0x622000
	058 Move X0, [X0+240]
	059 Call 0x1C17CF4
	060 Move X0, 0x60F000
	061 Move X0, [X0+2048]
	062 Call 0x1C17CF4
	063 Move X0, 0x622000
	064 Move X0, [X0+296]
	065 Call 0x1C17CF4
	066 Move X0, 0x622000
	067 Move X0, [X0+256]
	068 Call 0x1C17CF4
	069 Move X0, 0x60F000
	070 Move X0, [X0+2056]
	071 Call 0x1C17CF4
	072 Move X0, 0x5E3000
	073 Move X0, [X0+1304]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X26+2065], W8
	077 Move W26, 1
	078 Move [X19+164], W26
	079 Move X0, [X21]
	080 Call 0x1C17F10
	081 Move X1, [X20]
	082 Move X6, [X27]
	083 Move W2, W31
	084 Move X3, X31
	085 Move X4, X31
	086 Move X5, X31
	087 Move X7, X31
	088 Move X20, X0
	089 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	090 Add X0, X31, 200
	091 Move X1, X20
	092 Move X2, X31
	093 Move [X31+200], X31
	094 Move [X31+208], X31
	095 Move [X31+216], X31
	096 Call InputActionProperty..ctor, X0, X1
	097 Move X8, [X31+216]
	098 NotImplemented "Instruction LDUR not yet implemented."
	099 Move [X19+184], X8
	100 Move [X19+168], V0
	101 Move X0, [X21]
	102 Call 0x1C17F10
	103 Move X1, [X25]
	104 Move X6, [X27]
	105 Move W2, W31
	106 Move X3, X31
	107 Move X4, X31
	108 Move X5, X31
	109 Move X7, X31
	110 Move X20, X0
	111 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	112 Add X0, X31, 176
	113 Move X1, X20
	114 Move X2, X31
	115 Move [X31+176], X31
	116 Move [X31+184], X31
	117 Move [X31+192], X31
	118 Call InputActionProperty..ctor, X0, X1
	119 Move X8, [X31+192]
	120 Move V0, [X31+11]
	121 Move [X19+208], X8
	122 Move [X19+12], V0
	123 Move X0, [X21]
	124 Call 0x1C17F10
	125 Move X1, [X23]
	126 Move X6, [X27]
	127 Move W2, W31
	128 Move X3, X31
	129 Move X4, X31
	130 Move X5, X31
	131 Move X7, X31
	132 Move X20, X0
	133 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	134 Add X0, X31, 152
	135 Move X1, X20
	136 Move X2, X31
	137 Move [X31+152], X31
	138 Move [X31+160], X31
	139 Move [X31+168], X31
	140 Call InputActionProperty..ctor, X0, X1
	141 Move X8, [X31+168]
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 Move [X19+232], X8
	144 Move [X19+216], V0
	145 Move X0, [X21]
	146 Call 0x1C17F10
	147 Move X1, [X22]
	148 Move X6, [X27]
	149 Move W2, W31
	150 Move X3, X31
	151 Move X4, X31
	152 Move X5, X31
	153 Move X7, X31
	154 Move X20, X0
	155 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	156 Add X0, X31, 128
	157 Move X1, X20
	158 Move X2, X31
	159 Move [X31+128], X31
	160 Move [X31+136], X31
	161 Move [X31+144], X31
	162 Call InputActionProperty..ctor, X0, X1
	163 Move X8, [X31+144]
	164 Move V0, [X31+8]
	165 Move [X19+256], X8
	166 Move [X19+15], V0
	167 Move X0, [X21]
	168 Call 0x1C17F10
	169 Move X6, [X24]
	170 Move X1, X31
	171 Move W2, W31
	172 Move X3, X31
	173 Move X4, X31
	174 Move X5, X31
	175 Move X7, X31
	176 Move X20, X0
	177 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	178 Add X0, X31, 104
	179 Move X1, X20
	180 Move X2, X31
	181 Move [X31+104], X31
	182 Move [X31+112], X31
	183 Move [X31+120], X31
	184 Call InputActionProperty..ctor, X0, X1
	185 Move X8, [X31+120]
	186 NotImplemented "Instruction LDUR not yet implemented."
	187 Add X9, X19, 264
	188 Move [X9+16], X8
	189 Move [X9], V0
	190 Move X0, [X21]
	191 Call 0x1C17F10
	192 Move X1, [X29]
	193 Move X6, [X24]
	194 Move W2, W31
	195 Move X3, X31
	196 Move X4, X31
	197 Move X5, X31
	198 Move X7, X31
	199 Move X20, X0
	200 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	201 Add X0, X31, 80
	202 Move X1, X20
	203 Move X2, X31
	204 Move [X31+80], X31
	205 Move [X31+88], X31
	206 Move [X31+96], X31
	207 Call InputActionProperty..ctor, X0, X1
	208 Move X8, [X31+96]
	209 Move V0, [X31+5]
	210 Move [X19+304], X8
	211 Move [X19+18], V0
	212 Move X0, [X21]
	213 Call 0x1C17F10
	214 Move X1, [X28]
	215 Move X6, [X27]
	216 Move W2, W31
	217 Move X3, X31
	218 Move X4, X31
	219 Move X5, X31
	220 Move X7, X31
	221 Move X20, X0
	222 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	223 Add X0, X31, 56
	224 Move X1, X20
	225 Move X2, X31
	226 Move [X31+56], X31
	227 Move [X31+64], X31
	228 Move [X31+72], X31
	229 Call InputActionProperty..ctor, X0, X1
	230 Move X8, [X31+72]
	231 NotImplemented "Instruction LDUR not yet implemented."
	232 Add X9, X19, 312
	233 Move [X9+16], X8
	234 Move [X9], V0
	235 Move X0, [X21]
	236 Call 0x1C17F10
	237 Move X8, 0x622000
	238 Move X8, [X8+296]
	239 Move X6, [X24]
	240 Move W2, W31
	241 Move X3, X31
	242 Move X1, [X8]
	243 Move X4, X31
	244 Move X5, X31
	245 Move X7, X31
	246 Move X20, X0
	247 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	248 Add X0, X31, 32
	249 Move X1, X20
	250 Move X2, X31
	251 Move [X31+32], X31
	252 Move [X31+40], X31
	253 Move [X31+48], X31
	254 Call InputActionProperty..ctor, X0, X1
	255 Move X8, [X31+48]
	256 Move V0, [X31+2]
	257 Move [X19+352], X8
	258 Move [X19+21], V0
	259 Move X0, [X21]
	260 Call 0x1C17F10
	261 Move X8, 0x622000
	262 Move X8, [X8+288]
	263 Move W2, W31
	264 Move X3, X31
	265 Move X4, X31
	266 Move X1, [X8]
	267 Move X8, 0x60F000
	268 Move X8, [X8+2056]
	269 Move X5, X31
	270 Move X7, X31
	271 Move X20, X0
	272 Move X6, [X8]
	273 Call InputAction..ctor, X0, X1, X2, X3, X4, X5, X6
	274 Add X0, X31, 8
	275 Move X1, X20
	276 Move X2, X31
	277 Move [X31+8], X31
	278 Move [X31+16], X31
	279 Move [X31+24], X31
	280 Call InputActionProperty..ctor, X0, X1
	281 Move X8, [X31+24]
	282 NotImplemented "Instruction LDUR not yet implemented."
	283 Add X9, X19, 360
	284 Move W10, 257
	285 Move X0, X19
	286 Move X1, X31
	287 Move [X9+16], X8
	288 Move [X9], V0
	289 Move [X19+392], W26
	290 NotImplemented "Instruction STRH not yet implemented."
	291 Move [X19+136], W26
	292 Move [X19+153], W26
	293 Call MonoBehaviour..ctor, X0
	294 Move X20, [X31+304]
	295 Move X19, [X31+312]
	296 Move X22, [X31+288]
	297 Move X21, [X31+296]
	298 Move X24, [X31+272]
	299 Move X23, [X31+280]
	300 Move X26, [X31+256]
	301 Move X25, [X31+264]
	302 Move X28, [X31+240]
	303 Move X27, [X31+248]
	304 Move X29, [X31+224]
	305 Move X30, [X31+232]
	306 Add X31, X31, 320
	307 Return 

