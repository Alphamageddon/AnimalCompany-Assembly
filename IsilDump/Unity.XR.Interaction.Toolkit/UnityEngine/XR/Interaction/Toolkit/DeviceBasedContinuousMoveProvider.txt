Type: UnityEngine.XR.Interaction.Toolkit.DeviceBasedContinuousMoveProvider

Method: UnityEngine.XR.Interaction.Toolkit.DeviceBasedContinuousMoveProvider/InputAxes get_inputBinding()

Disassembly:
	0x03B7E4D4 LDR X0, [X0 + 0xDD0]
	0x03B7E4D8 BL 0x1C16CF4

ISIL:
	001 Move W0, [X0+120]
	002 Return X0

Method: System.Void set_inputBinding(UnityEngine.XR.Interaction.Toolkit.DeviceBasedContinuousMoveProvider/InputAxes value)

Disassembly:
	0x03B7E4DC ADRP X0, 0x5DD000
	0x03B7E4E0 LDR X0, [X0 + 0xDD8]

ISIL:
	001 Move [X0+120], W1
	002 Return 

Method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseController> get_controllers()

Disassembly:
	0x03B7E4E4 BL 0x1C16CF4
	0x03B7E4E8 ADRP X0, 0x5DD000

ISIL:
	001 Move X0, [X0+128]
	002 Return X0

Method: System.Void set_controllers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseController> value)

Disassembly:
	0x03B7E4EC LDR X0, [X0 + 0xDE0]
	0x03B7E4F0 BL 0x1C16CF4

ISIL:
	001 Move [X0+128], X1
	002 Return 

Method: System.Single get_deadzoneMin()

Disassembly:
	0x03B7E4F4 ADRP X0, 0x5DC000
	0x03B7E4F8 LDR X0, [X0 + 0x328]

ISIL:
	001 Move V0, [X0+136]
	002 Return V0

Method: System.Void set_deadzoneMin(System.Single value)

Disassembly:
	0x03B7E4FC BL 0x1C16CF4
	0x03B7E500 ADRP X0, 0x5DD000

ISIL:
	001 Move [X0+136], S0
	002 Return 

Method: System.Single get_deadzoneMax()

Disassembly:
	0x03B7E504 LDR X0, [X0 + 0xDE8]
	0x03B7E508 BL 0x1C16CF4

ISIL:
	001 Move V0, [X0+140]
	002 Return V0

Method: System.Void set_deadzoneMax(System.Single value)

Disassembly:
	0x03B7E50C MOVZ W8, 0x1
	0x03B7E510 STRB W8, [X20 + 0xAB3]

ISIL:
	001 Move [X0+140], S0
	002 Return 

Method: UnityEngine.Vector2 ReadInput()

Disassembly:
	0x03B7E514 STP X31, X31, [X31 + 0x8]
	0x03B7E518 STR X31, [X31 + 0x18]
	0x03B7E51C LDR X0, [X19 + 0xA0]
	0x03B7E520 CBZ X0, 0x3B7E608
	0x03B7E524 ADRP X8, 0x5DD000
	0x03B7E528 LDR X8, [X8 + 0xDE8]
	0x03B7E52C ADRP X22, 0x5DD000
	0x03B7E530 ADRP X23, 0x5DC000
	0x03B7E534 ADRP X21, 0x5DD000
	0x03B7E538 LDR X1, [X8]
	0x03B7E53C LDR X22, [X22 + 0xDD8]
	0x03B7E540 LDR X23, [X23 + 0x328]
	0x03B7E544 LDR X21, [X21 + 0xDD0]
	0x03B7E548 ADD X8, X31, 0x8
	0x03B7E54C BL 0x301CB58
	0x03B7E550 LDR X1, [X22]
	0x03B7E554 ADD X0, X31, 0x8
	0x03B7E558 BL 0x2BC4350
	0x03B7E55C MOV W19, W0
	0x03B7E560 TBZ X0, 0x0, 0x3B7E5D4
	0x03B7E564 LDR X20, [X31 + 0x18]
	0x03B7E568 CBZ X20, 0x3B7E604
	0x03B7E56C LDR X8, [X20]
	0x03B7E570 LDR X1, [X23]
	0x03B7E574 LDRH W9, [X8 + 0x12E]
	0x03B7E578 CBZ X9, 0x3B7E59C
	0x03B7E57C LDR X10, [X8 + 0xB0]
	0x03B7E580 ADD X10, X10, 0x8
	0x03B7E584 LDUR X11, [X10 - 0x8]
	0x03B7E588 CMP X11, X1
	0x03B7E58C B.EQ 0x3B7E5AC
	0x03B7E590 SUBS X9, X9, 0x1
	0x03B7E594 ADD X10, X10, 0x10
	0x03B7E598 B.NE 0x3B7E584
	0x03B7E59C MOVZ W2, 0x4
	0x03B7E5A0 MOV X0, X20
	0x03B7E5A4 BL 0x1C5C788
	0x03B7E5A8 B 0x3B7E5BC
	0x03B7E5AC LDR W9, [X10]
	0x03B7E5B0 ADD W9, W9, 0x4
	0x03B7E5B4 ADD X8, X8, W9, 0x4, SXTW
	0x03B7E5B8 ADD X0, X8, 0x138
	0x03B7E5BC LDP X8, X1, [X0]
	0x03B7E5C0 MOV X0, X20
	0x03B7E5C4 BLR X8
	0x03B7E5C8 TBZ X0, 0x0, 0x3B7E550
	0x03B7E5CC MOVZ W20, 0x4
	0x03B7E5D0 B 0x3B7E5D8
	0x03B7E5D4 MOVZ W20, 0x5
	0x03B7E5D8 LDR X1, [X21]
	0x03B7E5DC ADD X0, X31, 0x8
	0x03B7E5E0 BL 0x2BC434C
	0x03B7E5E4 CMP W20, 0x4
	0x03B7E5E8 CSET W8, EQ
	0x03B7E5EC AND W0, W19, W8, 0x0
	0x03B7E5F0 LDP X20, X19, [X31 + 0x40]
	0x03B7E5F4 LDP X22, X21, [X31 + 0x30]
	0x03B7E5F8 LDP X30, X23, [X31 + 0x20]
	0x03B7E5FC ADD X31, X31, 0x50
	0x03B7E600 RET
	0x03B7E604 BL 0x1C16F20
	0x03B7E608 BL 0x1C16F20
	0x03B7E60C B 0x3B7E614
	0x03B7E610 B 0x3B7E614
	0x03B7E614 MOV X19, X0
	0x03B7E618 CMP W1, 0x1
	0x03B7E61C B.NE 0x3B7E648
	0x03B7E620 MOV X0, X19
	0x03B7E624 BL 0x3EB1AD0
	0x03B7E628 LDR X20, [X0]
	0x03B7E62C BL 0x3EB1AE0
	0x03B7E630 LDR X1, [X21]
	0x03B7E634 ADD X0, X31, 0x8
	0x03B7E638 BL 0x2BC434C
	0x03B7E63C CBNZ X20, 0x3B7E650
	0x03B7E640 MOV W19, W31
	0x03B7E644 B 0x3B7E5E4
	0x03B7E648 MOV X20, X31
	0x03B7E64C B 0x3B7E65C
	0x03B7E650 MOV X0, X20
	0x03B7E654 BL 0x1C16F18
	0x03B7E658 MOV X19, X0
	0x03B7E65C LDR X1, [X21]
	0x03B7E660 ADD X0, X31, 0x8
	0x03B7E664 BL 0x2BC434C
	0x03B7E668 CBNZ X20, 0x3B7E674
	0x03B7E66C MOV X0, X19
	0x03B7E670 BL 0x1D2C690
	0x03B7E674 MOV X0, X20
	0x03B7E678 BL 0x1C16F18
	0x03B7E67C BL 0x1990590
	0x03B7E680 SUB X31, X31, 0x60
	0x03B7E684 STR X30, [X31 + 0x20]
	0x03B7E688 STP X24, X23, [X31 + 0x30]
	0x03B7E68C STP X22, X21, [X31 + 0x40]
	0x03B7E690 STP X20, X19, [X31 + 0x50]
	0x03B7E694 ADRP X24, 0x864000
	0x03B7E698 ADRP X23, 0x579000
	0x03B7E69C ADRP X20, 0x5DD000
	0x03B7E6A0 ADRP X22, 0x5DC000
	0x03B7E6A4 ADRP X21, 0x5DD000
	0x03B7E6A8 LDRB W8, [X24 + 0xAB5]
	0x03B7E6AC LDR X23, [X23 + 0x3E0]
	0x03B7E6B0 LDR X20, [X20 + 0xDF0]
	0x03B7E6B4 LDR X22, [X22 + 0x278]
	0x03B7E6B8 LDR X21, [X21 + 0xD40]
	0x03B7E6BC MOV X19, X0
	0x03B7E6C0 TBNZ X8, 0x0, 0x3B7E6FC
	0x03B7E6C4 ADRP X0, 0x579000
	0x03B7E6C8 LDR X0, [X0 + 0x3E0]
	0x03B7E6CC BL 0x1C16CF4
	0x03B7E6D0 ADRP X0, 0x5DD000
	0x03B7E6D4 LDR X0, [X0 + 0xD40]
	0x03B7E6D8 BL 0x1C16CF4
	0x03B7E6DC ADRP X0, 0x5DC000
	0x03B7E6E0 LDR X0, [X0 + 0x278]
	0x03B7E6E4 BL 0x1C16CF4
	0x03B7E6E8 ADRP X0, 0x5DD000
	0x03B7E6EC LDR X0, [X0 + 0xDF0]
	0x03B7E6F0 BL 0x1C16CF4
	0x03B7E6F4 MOVZ W8, 0x1
	0x03B7E6F8 STRB W8, [X24 + 0xAB5]
	0x03B7E6FC MOVZ W8, 0x3F800000
	0x03B7E700 STR W8, [X19 + 0x74]
	0x03B7E704 LDR X0, [X23]
	0x03B7E708 BL 0x1C16F10
	0x03B7E70C LDR X1, [X20]
	0x03B7E710 MOVZ W2, 0x1
	0x03B7E714 MOV X3, X31
	0x03B7E718 MOV X4, X31
	0x03B7E71C MOV X5, X31
	0x03B7E720 MOV X6, X31

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+32], D9
	003 Move [X31+40], D8
	004 Move [X31+48], X30
	005 Move [X31+56], X25
	006 Move [X31+64], X24
	007 Move [X31+72], X23
	008 Move [X31+80], X22
	009 Move [X31+88], X21
	010 Move [X31+96], X20
	011 Move [X31+104], X19
	012 Move X20, 0x865000
	013 Move W8, [X20+2730]
	014 Move X19, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {36}
	019 Move X0, 0x5DE000
	020 Move X0, [X0+3472]
	021 Call 0x1C17CF4
	022 Move X0, 0x5DE000
	023 Move X0, [X0+3480]
	024 Call 0x1C17CF4
	025 Move X0, 0x5DE000
	026 Move X0, [X0+3488]
	027 Call 0x1C17CF4
	028 Move X0, 0x576000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move X0, 0x5DE000
	032 Move X0, [X0+688]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+2730], W8
	036 Move [X31+16], X31
	037 Move [X31+24], X31
	038 Move [X31+8], X31
	039 Move X8, [X19+128]
	040 Compare X8, 0
	041 JumpIfEqual {147}
	042 Move X21, 0x85C000
	043 Move W9, [X21+1935]
	044 Move W20, [X8+24]
	045 Compare W9, 0
	046 JumpIfNotEqual {52}
	047 Move X0, 0x57E000
	048 Move X0, [X0+3848]
	049 Call 0x1C17CF4
	050 Move W8, 1
	051 Move [X21+1935], W8
	052 Move X8, 0x57E000
	053 Move X8, [X8+3848]
	054 Move X8, [X8]
	055 Move X8, [X8+184]
	056 Move S8, [X8]
	057 Move S9, [X8+4]
	058 Compare W20, 0
	059 JumpIfEqual {148}
	060 Move X20, 0x5DE000
	061 Move X20, [X20+3472]
	062 Move X0, [X20]
	063 Move W8, [X0+224]
	064 Compare W8, 0
	065 JumpIfNotEqual {68}
	066 Call 0x1C17DFC
	067 Move X0, [X20]
	068 Move X8, [X0+184]
	069 Move X8, [X8]
	070 Compare X8, 0
	071 JumpIfEqual {147}
	072 NotImplemented "Instruction LDRSW not yet implemented."
	073 Move W10, [X8+24]
	074 NotImplemented "Instruction CMP not yet implemented."
	075 Move X0, [X19+128]
	076 Compare X0, 0
	077 JumpIfEqual {147}
	078 Add X8, X8, X9
	079 Move X23, 0x5DE000
	080 Move X24, 0x5DE000
	081 Move X25, 0x576000
	082 Move X21, [X8+32]
	083 Move X23, [X23+3488]
	084 Move X24, [X24+688]
	085 Move X25, [X25+1432]
	086 Move W20, W31
	087 Move W8, [X0+24]
	088 NotImplemented "Instruction CMP not yet implemented."
	089 Move X2, [X23]
	090 Move W1, W20
	091 Call List`1<Object>.get_Item, X0, X1
	092 Compare X0, 0
	093 JumpIfEqual {99}
	094 Move X9, [X0]
	095 Move X8, [X24]
	096 Move W11, [X9+304]
	097 Move W10, [X8+304]
	098 NotImplemented "Instruction CMP not yet implemented."
	099 Move X22, X31
	100 Move X9, [X9+200]
	101 Add X9, X9, X10
	102 NotImplemented "Instruction LDUR not yet implemented."
	103 NotImplemented "Instruction CMP not yet implemented."
	104 NotImplemented "Instruction CSEL not yet implemented."
	105 Move X0, [X25]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {110}
	109 Call 0x1C17DFC
	110 Move X0, X22
	111 Move X1, X31
	112 Move X2, X31
	113 Call Object.op_Inequality, X0, X1
	114 Move TEMP, X0
	115 And TEMP, TEMP, 1
	116 Compare TEMP, 1
	117 JumpIfNotEqual {143}
	118 Compare X22, 0
	119 JumpIfEqual {147}
	120 Move W8, [X22+37]
	121 Compare W8, 0
	122 JumpIfEqual {143}
	123 Move X0, X22
	124 Move X1, X31
	125 Call XRController.get_inputDevice, X0
	126 Move [X31+8], X0
	127 Move [X31+16], X1
	128 Add X0, X31, 8
	129 Add X2, X31, 24
	130 Move X1, X21
	131 Move X3, X31
	132 Call InputDevice.TryGetFeatureValue, X0, X1, X2
	133 Move TEMP, X0
	134 And TEMP, TEMP, 1
	135 Compare TEMP, 1
	136 JumpIfNotEqual {143}
	137 Move S0, [X31+24]
	138 Move S1, [X31+28]
	139 Move X0, X19
	140 Call DeviceBasedContinuousMoveProvider.GetDeadzoneAdjustedValue, X0, X1
	141 Add S8, S8, S0
	142 Add S9, S9, S1
	143 Move X0, [X19+128]
	144 Add W20, W20, 1
	145 Compare X0, 0
	146 JumpIfNotEqual {87}
	147 Call 0x1C17F20
	148 Move V0, V8
	149 Move V1, V9
	150 Move X20, [X31+96]
	151 Move X19, [X31+104]
	152 Move X22, [X31+80]
	153 Move X21, [X31+88]
	154 Move X24, [X31+64]
	155 Move X23, [X31+72]
	156 Move X30, [X31+48]
	157 Move X25, [X31+56]
	158 Move D9, [X31+32]
	159 Move D8, [X31+40]
	160 Add X31, X31, 112
	161 Return X0
	162 Call 0x1C17F28

Method: UnityEngine.Vector2 GetDeadzoneAdjustedValue(UnityEngine.Vector2 value)

Disassembly:
	0x03B7E724 MOV X7, X31
	0x03B7E728 MOV X20, X0
	0x03B7E72C MOVZ W23, 0x1
	0x03B7E730 BL 0x3734C54
	0x03B7E734 ADD X0, X31, 0x8
	0x03B7E738 MOV X1, X20
	0x03B7E73C MOV X2, X31
	0x03B7E740 STP X31, X31, [X31 + 0x8]
	0x03B7E744 STR X31, [X31 + 0x18]
	0x03B7E748 BL 0x3745288
	0x03B7E74C LDR X8, [X31 + 0x18]
	0x03B7E750 LDUR V0, [X31 + 0x8]
	0x03B7E754 STRB W23, [X19 + 0x90]
	0x03B7E758 STR X8, [X19 + 0x88]
	0x03B7E75C STUR V0, [X19 + 0x78]
	0x03B7E760 LDR X0, [X22]
	0x03B7E764 BL 0x1C16F10
	0x03B7E768 LDR X1, [X21]
	0x03B7E76C MOV X20, X0
	0x03B7E770 BL 0x301B7C4
	0x03B7E774 MOVZ W8, 0x101
	0x03B7E778 MOV X0, X19
	0x03B7E77C MOV X1, X31
	0x03B7E780 STR X20, [X19 + 0xA0]
	0x03B7E784 STRB W23, [X19 + 0x48]
	0x03B7E788 STRH W8, [X19 + 0x4A]
	0x03B7E78C BL 0x3C36C30
	0x03B7E790 LDP X20, X19, [X31 + 0x50]
	0x03B7E794 LDP X22, X21, [X31 + 0x40]
	0x03B7E798 LDP X24, X23, [X31 + 0x30]
	0x03B7E79C LDR X30, [X31 + 0x20]
	0x03B7E7A0 ADD X31, X31, 0x60
	0x03B7E7A4 RET
	0x03B7E7A8 LDR X0, [X0 + 0x68]
	0x03B7E7AC RET
	0x03B7E7B0 STR X1, [X0 + 0x68]
	0x03B7E7B4 RET
	0x03B7E7B8 LDR X0, [X0 + 0x70]
	0x03B7E7BC RET
	0x03B7E7C0 STR X1, [X0 + 0x70]
	0x03B7E7C4 RET
	0x03B7E7C8 LDRB W0, [X0 + 0x78]
	0x03B7E7CC RET
	0x03B7E7D0 AND W8, W1, 0x1
	0x03B7E7D4 STRB W8, [X0 + 0x78]
	0x03B7E7D8 RET
	0x03B7E7DC LDR V0, [X0 + 0x7C]
	0x03B7E7E0 RET
	0x03B7E7E4 STR S0, [X0 + 0x7C]
	0x03B7E7E8 RET
	0x03B7E7EC LDRB W0, [X0 + 0x80]
	0x03B7E7F0 RET
	0x03B7E7F4 AND W8, W1, 0x1
	0x03B7E7F8 STRB W8, [X0 + 0x80]
	0x03B7E7FC RET
	0x03B7E800 LDRB W0, [X0 + 0x81]
	0x03B7E804 RET
	0x03B7E808 AND W8, W1, 0x1
	0x03B7E80C STRB W8, [X0 + 0x81]
	0x03B7E810 RET
	0x03B7E814 LDRB W0, [X0 + 0x82]
	0x03B7E818 RET
	0x03B7E81C AND W8, W1, 0x1
	0x03B7E820 STRB W8, [X0 + 0x82]
	0x03B7E824 RET
	0x03B7E828 LDR V0, [X0 + 0x84]
	0x03B7E82C RET
	0x03B7E830 STR S0, [X0 + 0x84]
	0x03B7E834 RET
	0x03B7E838 LDR V0, [X0 + 0x88]
	0x03B7E83C RET
	0x03B7E840 STR S0, [X0 + 0x88]
	0x03B7E844 RET
	0x03B7E848 STP X30, X21, [X31 - 0x20]!
	0x03B7E84C STP X20, X19, [X31 + 0x10]
	0x03B7E850 ADRP X20, 0x864000
	0x03B7E854 ADRP X21, 0x575000
	0x03B7E858 LDRB W8, [X20 + 0xAB6]
	0x03B7E85C LDR X21, [X21 + 0x598]
	0x03B7E860 MOV X19, X0
	0x03B7E864 TBNZ X8, 0x0, 0x3B7E8AC
	0x03B7E868 ADRP X0, 0x5DD000
	0x03B7E86C LDR X0, [X0 + 0xC78]
	0x03B7E870 BL 0x1C16CF4
	0x03B7E874 ADRP X0, 0x575000
	0x03B7E878 LDR X0, [X0 + 0xA28]
	0x03B7E87C BL 0x1C16CF4
	0x03B7E880 ADRP X0, 0x575000
	0x03B7E884 LDR X0, [X0 + 0x598]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x85C000
	009 Move W8, [X20+2072]
	010 Move V8, V1
	011 Move V9, V0
	012 Move X19, X0
	013 Compare W8, 0
	014 JumpIfNotEqual {20}
	015 Move X0, 0x576000
	016 Move X0, [X0+1448]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2072], W8
	020 Move X8, 0x576000
	021 Move X8, [X8+1448]
	022 Move X0, [X8]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Multiply S1, S9, S9
	028 Multiply S2, S8, S8
	029 Move V0, [X19+136]
	030 Add S1, S1, S2
	031 NotImplemented "Instruction FSQRT not yet implemented."
	032 NotImplemented "Instruction FABS not yet implemented."
	033 NotImplemented "Instruction FCMP not yet implemented."
	034 Move S11, W31
	035 Move V2, [X19+140]
	036 NotImplemented "Instruction FCMP not yet implemented."
	037 Move S3, -1
	038 Move S4, 1
	039 NotImplemented "Instruction FCSEL not yet implemented."
	040 NotImplemented "Instruction FCMP not yet implemented."
	041 Subtract S1, S1, S0
	042 Subtract S0, S2, S0
	043 NotImplemented "Instruction FDIV not yet implemented."
	044 Multiply S11, S11, S0
	045 Move X19, 0x85C000
	046 Move W8, [X19+1450]
	047 Compare W8, 0
	048 JumpIfNotEqual {54}
	049 Move X0, 0x57D000
	050 Move X0, [X0+1208]
	051 Call 0x1C17CF4
	052 Move W8, 1
	053 Move [X19+1450], W8
	054 Move X8, 0x57D000
	055 Move X8, [X8+1208]
	056 Move X9, -50933760
	057 Move V0, [X9+576]
	058 NotImplemented "Instruction FABS not yet implemented."
	059 Move X8, [X8]
	060 Move S2, W31
	061 NotImplemented "Instruction FMAXNM not yet implemented."
	062 Multiply S0, S1, S0
	063 Move X8, [X8+184]
	064 Move S1, 8
	065 Move V3, [X8]
	066 Multiply S1, S3, S1
	067 NotImplemented "Instruction FCMP not yet implemented."
	068 NotImplemented "Instruction FCSEL not yet implemented."
	069 NotImplemented "Instruction FABD not yet implemented."
	070 NotImplemented "Instruction FCMP not yet implemented."
	071 Move X19, 0x85C000
	072 Move W8, [X19+1935]
	073 Compare W8, 0
	074 JumpIfNotEqual {80}
	075 Move X0, 0x57E000
	076 Move X0, [X0+3848]
	077 Call 0x1C17CF4
	078 Move W8, 1
	079 Move [X19+1935], W8
	080 Move X8, 0x57E000
	081 Move X8, [X8+3848]
	082 Move X8, [X8]
	083 Move X8, [X8+184]
	084 Move S0, [X8]
	085 Move S1, [X8+4]
	086 NotImplemented "Instruction FDIV not yet implemented."
	087 Multiply S0, S9, S1
	088 Multiply S1, S8, S1
	089 Move X20, [X31+48]
	090 Move X19, [X31+56]
	091 Move X30, [X31+32]
	092 Move D9, [X31+16]
	093 Move D8, [X31+24]
	094 Move D11, [X31+64]
	095 Move D10, [X31+72]
	096 Return X0

Method: System.Single GetDeadzoneAdjustedValue(System.Single value)

Disassembly:
	0x03B7E888 BL 0x1C16CF4
	0x03B7E88C ADRP X0, 0x5DD000
	0x03B7E890 LDR X0, [X0 + 0xDF8]
	0x03B7E894 BL 0x1C16CF4
	0x03B7E898 ADRP X0, 0x5DD000
	0x03B7E89C LDR X0, [X0 + 0xE00]
	0x03B7E8A0 BL 0x1C16CF4
	0x03B7E8A4 MOVZ W8, 0x1
	0x03B7E8A8 STRB W8, [X20 + 0xAB6]
	0x03B7E8AC LDR X0, [X21]
	0x03B7E8B0 LDR X20, [X19 + 0x68]
	0x03B7E8B4 LDR W8, [X0 + 0xE0]
	0x03B7E8B8 CBNZ W8, 0x3B7E8C0
	0x03B7E8BC BL 0x1C16DFC
	0x03B7E8C0 MOV X0, X20
	0x03B7E8C4 MOV X1, X31
	0x03B7E8C8 MOV X2, X31
	0x03B7E8CC BL 0x3C3883C

ISIL:
	001 Move V2, [X0+136]
	002 NotImplemented "Instruction FABS not yet implemented."
	003 Move V1, V0
	004 Move S0, W31
	005 NotImplemented "Instruction FCMP not yet implemented."
	006 Move V4, [X0+140]
	007 NotImplemented "Instruction FCMP not yet implemented."
	008 Move S0, -1
	009 Move S1, 1
	010 NotImplemented "Instruction FCSEL not yet implemented."
	011 NotImplemented "Instruction FCMP not yet implemented."
	012 Subtract S1, S3, S2
	013 Subtract S2, S4, S2
	014 NotImplemented "Instruction FDIV not yet implemented."
	015 Multiply S0, S0, S1
	016 Return V0

Method: System.Void .ctor()

Disassembly:
	0x03B7E8D0 TBNZ X0, 0x0, 0x3B7E8FC
	0x03B7E8D4 LDR X0, [X21]
	0x03B7E8D8 LDR X20, [X19 + 0x70]
	0x03B7E8DC LDR W8, [X0 + 0xE0]
	0x03B7E8E0 CBNZ W8, 0x3B7E8E8
	0x03B7E8E4 BL 0x1C16DFC
	0x03B7E8E8 MOV X0, X20
	0x03B7E8EC MOV X1, X31
	0x03B7E8F0 MOV X2, X31
	0x03B7E8F4 BL 0x3C3883C
	0x03B7E8F8 TBZ X0, 0x0, 0x3B7E944
	0x03B7E8FC ADRP X8, 0x575000
	0x03B7E900 LDR X8, [X8 + 0xA28]
	0x03B7E904 ADRP X20, 0x5DD000
	0x03B7E908 LDR X0, [X8]
	0x03B7E90C LDR W8, [X0 + 0xE0]
	0x03B7E910 LDR X20, [X20 + 0xE00]
	0x03B7E914 CBNZ W8, 0x3B7E91C
	0x03B7E918 BL 0x1C16DFC
	0x03B7E91C LDR X0, [X20]
	0x03B7E920 MOV X1, X19
	0x03B7E924 MOV X2, X31
	0x03B7E928 BL 0x3C065A4
	0x03B7E92C MOV X0, X19
	0x03B7E930 LDP X20, X19, [X31 + 0x10]
	0x03B7E934 MOV W1, W31
	0x03B7E938 MOV X2, X31
	0x03B7E93C LDP X30, X21, [X31], #0x20
	0x03B7E940 B 0x3C32410
	0x03B7E944 LDRB W8, [X19 + 0x80]
	0x03B7E948 CBZ W8, 0x3B7E964
	0x03B7E94C LDR X8, [X19 + 0x68]
	0x03B7E950 CBZ X8, 0x3B7EA28
	0x03B7E954 STRB W31, [X8 + 0x90]
	0x03B7E958 LDR X8, [X19 + 0x70]
	0x03B7E95C CBZ X8, 0x3B7EA28
	0x03B7E960 STRB W31, [X8 + 0x90]
	0x03B7E964 LDRB W8, [X19 + 0x78]
	0x03B7E968 CBZ W8, 0x3B7E9E8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x865000
	007 Move X22, 0x5DE000
	008 Move X20, 0x5DE000
	009 Move W8, [X21+2731]
	010 Move X22, [X22+3496]
	011 Move X20, [X20+3504]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5DE000
	018 Move X0, [X0+3504]
	019 Call 0x1C17CF4
	020 Move X0, 0x5DE000
	021 Move X0, [X0+3496]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+2731], W8
	025 Move X0, [X22]
	026 Call 0x1C17F10
	027 Move X1, [X20]
	028 Move X20, X0
	029 Call List`1<Object>..ctor, X0
	030 Move X8, -50921472
	031 Move V0, [X8+3072]
	032 Move W9, 0x3F800000
	033 Move W8, 1
	034 Move [X19+128], X20
	035 Move [X19+72], W9
	036 Move [X19+76], W8
	037 Move [X19+136], D0
	038 Move [X19+78], W8
	039 Move X0, X19
	040 Move X20, [X31+32]
	041 Move X19, [X31+40]
	042 Move X22, [X31+16]
	043 Move X21, [X31+24]
	044 Move X1, X31
	045 Move X30, [X31+48]
	046 Call MonoBehaviour..ctor, X0
	047 Return 

Method: System.Void .cctor()

Disassembly:
	0x03B7E96C LDR X8, [X19 + 0x68]
	0x03B7E970 CBZ X8, 0x3B7EA28
	0x03B7E974 LDR X9, [X19 + 0x30]
	0x03B7E978 STR X9, [X8 + 0x30]
	0x03B7E97C LDRB W9, [X19 + 0x48]
	0x03B7E980 STRB W9, [X8 + 0x48]
	0x03B7E984 LDRB W9, [X19 + 0x49]
	0x03B7E988 STRB W9, [X8 + 0x49]
	0x03B7E98C LDRB W9, [X19 + 0x4A]
	0x03B7E990 STRB W9, [X8 + 0x4A]
	0x03B7E994 LDRB W9, [X19 + 0x4B]
	0x03B7E998 STRB W9, [X8 + 0x4B]
	0x03B7E99C LDR W9, [X19 + 0x4C]
	0x03B7E9A0 STR W9, [X8 + 0x4C]
	0x03B7E9A4 LDR V0, [X19 + 0x7C]
	0x03B7E9A8 STR S0, [X8 + 0x74]
	0x03B7E9AC LDR X8, [X19 + 0x70]
	0x03B7E9B0 CBZ X8, 0x3B7EA28
	0x03B7E9B4 LDR X9, [X19 + 0x30]
	0x03B7E9B8 STR X9, [X8 + 0x30]
	0x03B7E9BC LDRB W9, [X19 + 0x48]
	0x03B7E9C0 STRB W9, [X8 + 0x48]
	0x03B7E9C4 LDRB W9, [X19 + 0x49]
	0x03B7E9C8 STRB W9, [X8 + 0x49]
	0x03B7E9CC LDRB W9, [X19 + 0x4A]
	0x03B7E9D0 STRB W9, [X8 + 0x4A]
	0x03B7E9D4 LDRB W9, [X19 + 0x4B]
	0x03B7E9D8 STRB W9, [X8 + 0x4B]
	0x03B7E9DC LDR W9, [X19 + 0x4C]
	0x03B7E9E0 STR S0, [X8 + 0x74]
	0x03B7E9E4 STR W9, [X8 + 0x4C]
	0x03B7E9E8 ADRP X8, 0x5DD000
	0x03B7E9EC LDR X8, [X8 + 0xC78]
	0x03B7E9F0 LDR X0, [X8]
	0x03B7E9F4 BL 0x1C16F10
	0x03B7E9F8 ADRP X8, 0x5DD000
	0x03B7E9FC LDR X8, [X8 + 0xDF8]
	0x03B7EA00 MOV X1, X19
	0x03B7EA04 MOV X3, X31
	0x03B7EA08 MOV X20, X0
	0x03B7EA0C LDR X2, [X8]
	0x03B7EA10 BL 0x2A6B948
	0x03B7EA14 MOV X0, X19
	0x03B7EA18 MOV X1, X20
	0x03B7EA1C LDP X20, X19, [X31 + 0x10]
	0x03B7EA20 LDP X30, X21, [X31], #0x20
	0x03B7EA24 B 0x3B7A0C4
	0x03B7EA28 BL 0x1C16F20
	0x03B7EA2C STP X30, X21, [X31 - 0x20]!
	0x03B7EA30 STP X20, X19, [X31 + 0x10]
	0x03B7EA34 ADRP X20, 0x864000
	0x03B7EA38 ADRP X21, 0x575000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X19, 0x865000
	006 Move X21, 0x5DE000
	007 Move X20, 0x57B000
	008 Move W8, [X19+2732]
	009 Move X21, [X21+3512]
	010 Move X20, [X20+344]
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x57B000
	016 Move X0, [X0+344]
	017 Call 0x1C17CF4
	018 Move X0, 0x5DE000
	019 Move X0, [X0+3472]
	020 Call 0x1C17CF4
	021 Move X0, 0x5DE000
	022 Move X0, [X0+3512]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+2732], W8
	026 Move X0, [X21]
	027 Move W1, 2
	028 Call 0x1C17D6C
	029 Move X8, [X20]
	030 Move X19, X0
	031 Move W9, [X8+224]
	032 Compare W9, 0
	033 JumpIfNotEqual {37}
	034 Move X0, X8
	035 Call 0x1C17DFC
	036 Move X8, [X20]
	037 Compare X19, 0
	038 JumpIfEqual {61}
	039 Move W9, [X19+24]
	040 Compare W9, 0
	041 JumpIfEqual {60}
	042 Move X8, [X8+184]
	043 NotImplemented "Instruction CMP not yet implemented."
	044 Move X8, [X8+136]
	045 Move [X19+32], X8
	046 Move X8, [X20]
	047 Move X9, 0x5DE000
	048 Move X8, [X8+184]
	049 Move X8, [X8+144]
	050 Move X9, [X9+3472]
	051 Move [X19+40], X8
	052 Move X8, [X9]
	053 Move X8, [X8+184]
	054 Move [X8], X19
	055 Move X20, [X31+16]
	056 Move X19, [X31+24]
	057 Move X30, [X31+32]
	058 Move X21, [X31+40]
	059 Return 
	060 Call 0x1C17F28
	061 Call 0x1C17F20

