Type: UnityEngine.XR.Interaction.Toolkit.TeleportationAnchor

Method: UnityEngine.Transform get_teleportAnchorTransform()

Disassembly:
	0x03B83390 LDR X0, [X0 + 0x5A0]
	0x03B83394 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+520]
	002 Return X0

Method: System.Void set_teleportAnchorTransform(UnityEngine.Transform value)

Disassembly:
	0x03B83398 MOVZ W8, 0x1
	0x03B8339C STRB W8, [X21 + 0x786]

ISIL:
	001 Move [X0+520], X1
	002 Return 

Method: System.Void OnValidate()

Disassembly:
	0x03B833A0 ADRP X8, 0x570000
	0x03B833A4 LDR X8, [X8 + 0x5A0]
	0x03B833A8 MOV V0.16B, V8.16B
	0x03B833AC MOV V1.16B, V9.16B
	0x03B833B0 MOV V2.16B, V11.16B
	0x03B833B4 LDR X8, [X8]
	0x03B833B8 MOV V3.16B, V10.16B
	0x03B833BC MOV X0, X31
	0x03B833C0 LDR X8, [X8 + 0xB8]
	0x03B833C4 LDP S4, S5, [X8 + 0x18]
	0x03B833C8 LDR V6, [X8 + 0x20]
	0x03B833CC BL 0x3C2A9FC
	0x03B833D0 CBZ X20, 0x3B83484
	0x03B833D4 MOV X0, X20
	0x03B833D8 MOV X1, X31
	0x03B833DC BL 0x3B2FBBC
	0x03B833E0 B 0x3B833E8
	0x03B833E4 CBZ X20, 0x3B83484
	0x03B833E8 LDR X0, [X20 + 0x38]
	0x03B833EC CBZ X0, 0x3B83484
	0x03B833F0 MOV X1, X31
	0x03B833F4 BL 0x3C356F8
	0x03B833F8 CBZ X0, 0x3B83484
	0x03B833FC MOV X1, X31
	0x03B83400 BL 0x3C3F988
	0x03B83404 MOV X0, X20
	0x03B83408 MOV X1, X31
	0x03B8340C MOV V8.16B, V0.16B
	0x03B83410 MOV V9.16B, V1.16B
	0x03B83414 MOV V10.16B, V2.16B

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x860000
	006 Move X20, 0x571000
	007 Move W8, [X21+2782]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x571000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2782], W8
	019 Move X0, [X20]
	020 Move X20, [X19+520]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {37}
	033 Move X0, X19
	034 Move X1, X31
	035 Call Component.get_transform, X0
	036 Move [X19+520], X0
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return 

Method: System.Void Reset()

Disassembly:
	0x03B83418 BL 0x3B2F430
	0x03B8341C LDP S3, S4, [X19 + 0x48]
	0x03B83420 LDR V5, [X19 + 0x50]
	0x03B83424 FMUL S1, S8, S0
	0x03B83428 FMUL S2, S9, S0
	0x03B8342C FMUL S6, S10, S0
	0x03B83430 FADD S0, S3, S1

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Component.get_transform, X0
	006 Move [X19+520], X0
	007 Move X30, [X31+16]
	008 Move X19, [X31+24]
	009 Return 

Method: System.Void OnDrawGizmos()

Disassembly:
	0x03B83434 FADD S1, S2, S4
	0x03B83438 FADD S2, S6, S5
	0x03B8343C MOV X0, X20
	0x03B83440 MOV X1, X31
	0x03B83444 BL 0x3B30100
	0x03B83448 MOV X0, X19
	0x03B8344C MOV X1, X31
	0x03B83450 BL 0x3B7B484
	0x03B83454 MOVZ W8, 0x3
	0x03B83458 STRB W31, [X19 + 0x74]
	0x03B8345C STRB W31, [X19 + 0x6C]
	0x03B83460 STR W8, [X19 + 0x38]
	0x03B83464 LDP X20, X19, [X31 + 0x50]
	0x03B83468 LDP X22, X21, [X31 + 0x40]
	0x03B8346C LDR X30, [X31 + 0x38]
	0x03B83470 LDP D9, D8, [X31 + 0x28]
	0x03B83474 LDP D11, D10, [X31 + 0x18]
	0x03B83478 LDP D13, D12, [X31 + 0x8]
	0x03B8347C LDR V14, [X31], #0x60
	0x03B83480 RET
	0x03B83484 BL 0x1C16F20
	0x03B83488 MOVZ W8, 0xBF800000
	0x03B8348C MOV X1, X31
	0x03B83490 STR W8, [X0 + 0x78]
	0x03B83494 B 0x3B7B65C
	0x03B83498 LDR V0, [X0 + 0x10]
	0x03B8349C RET
	0x03B834A0 STR S0, [X0 + 0x10]
	0x03B834A4 RET
	0x03B834A8 LDR V0, [X0 + 0x14]
	0x03B834AC RET
	0x03B834B0 STR S0, [X0 + 0x14]
	0x03B834B4 RET
	0x03B834B8 LDR V0, [X0 + 0x18]
	0x03B834BC RET
	0x03B834C0 STR S0, [X0 + 0x18]
	0x03B834C4 RET
	0x03B834C8 LDR V0, [X0 + 0x1C]
	0x03B834CC RET
	0x03B834D0 STR S0, [X0 + 0x1C]
	0x03B834D4 RET
	0x03B834D8 LDRB W0, [X0 + 0x20]
	0x03B834DC RET
	0x03B834E0 AND W8, W1, 0x1
	0x03B834E4 STRB W8, [X0 + 0x20]
	0x03B834E8 RET
	0x03B834EC LDR V0, [X0 + 0x24]
	0x03B834F0 RET
	0x03B834F4 STR S0, [X0 + 0x24]
	0x03B834F8 RET
	0x03B834FC LDP S0, S1, [X0 + 0x28]
	0x03B83500 LDP S2, S3, [X0 + 0x30]
	0x03B83504 RET
	0x03B83508 STP S0, S1, [X0 + 0x28]
	0x03B8350C STP S2, S3, [X0 + 0x30]
	0x03B83510 RET
	0x03B83514 LDP S0, S1, [X0 + 0x38]
	0x03B83518 LDP S2, S3, [X0 + 0x40]
	0x03B8351C RET
	0x03B83520 STP S0, S1, [X0 + 0x38]
	0x03B83524 STP S2, S3, [X0 + 0x40]
	0x03B83528 RET
	0x03B8352C LDR V0, [X0 + 0x48]
	0x03B83530 RET
	0x03B83534 STR S0, [X0 + 0x48]
	0x03B83538 RET
	0x03B8353C STP X30, X19, [X31 - 0x10]!
	0x03B83540 CBZ X1, 0x3B8357C
	0x03B83544 LDR V0, [X1 + 0x1]
	0x03B83548 STR V0, [X0 + 0x1]
	0x03B8354C LDRB W8, [X1 + 0x20]
	0x03B83550 STRB W8, [X0 + 0x20]
	0x03B83554 LDR V0, [X1 + 0x24]
	0x03B83558 STR S0, [X0 + 0x24]
	0x03B8355C LDUR V0, [X1 + 0x28]
	0x03B83560 STUR V0, [X0 + 0x28]
	0x03B83564 LDUR V0, [X1 + 0x38]
	0x03B83568 STUR V0, [X0 + 0x38]
	0x03B8356C LDR V0, [X1 + 0x48]
	0x03B83570 STR S0, [X0 + 0x48]
	0x03B83574 LDP X30, X19, [X31], #0x10
	0x03B83578 RET
	0x03B8357C ADRP X0, 0x575000

ISIL:
	001 Move [X31-96], D14
	002 Move [X31+16], D13
	003 Move [X31+24], D12
	004 Move [X31+32], D11
	005 Move [X31+40], D10
	006 Move [X31+48], D9
	007 Move [X31+56], D8
	008 Move [X31+64], X30
	009 Move [X31+72], X21
	010 Move [X31+80], X20
	011 Move [X31+88], X19
	012 Move X21, 0x860000
	013 Move X20, 0x571000
	014 Move W8, [X21+2783]
	015 Move X20, [X20+1432]
	016 Move X19, X0
	017 Move TEMP, X8
	018 And TEMP, TEMP, 1
	019 Compare TEMP, 1
	020 JumpIfEqual {29}
	021 Move X0, 0x5D9000
	022 Move X0, [X0+3744]
	023 Call 0x1C17CF4
	024 Move X0, 0x571000
	025 Move X0, [X0+1432]
	026 Call 0x1C17CF4
	027 Move W8, 1
	028 Move [X21+2783], W8
	029 Move X0, [X20]
	030 Move X20, [X19+520]
	031 Move W8, [X0+224]
	032 Compare W8, 0
	033 JumpIfNotEqual {35}
	034 Call 0x1C17DFC
	035 Move X0, X20
	036 Move X1, X31
	037 Move X2, X31
	038 Call Object.op_Equality, X0, X1
	039 Move TEMP, X0
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {55}
	043 Move X20, [X31+80]
	044 Move X19, [X31+88]
	045 Move X30, [X31+64]
	046 Move X21, [X31+72]
	047 Move D9, [X31+48]
	048 Move D8, [X31+56]
	049 Move D11, [X31+32]
	050 Move D10, [X31+40]
	051 Move D13, [X31+16]
	052 Move D12, [X31+24]
	053 Move V14, [X31+96]
	054 Return 
	055 Move S0, W31
	056 Move S1, W31
	057 Move S2, 1
	058 Move S3, 1
	059 Move X0, X31
	060 Call Gizmos.set_color, X0
	061 Move X0, [X19+520]
	062 Compare X0, 0
	063 JumpIfEqual {109}
	064 Move X1, X31
	065 Call Transform.get_position, X0
	066 Move X0, [X19+520]
	067 Compare X0, 0
	068 JumpIfEqual {109}
	069 Move X1, X31
	070 Move V8, V0
	071 Move V9, V1
	072 Move V10, V2
	073 Call Transform.get_rotation, X0
	074 Move X8, 0x5D9000
	075 Move X8, [X8+3744]
	076 Move V11, V0
	077 Move V12, V1
	078 Move V13, V2
	079 Move X0, [X8]
	080 Move V14, V3
	081 Move W8, [X0+224]
	082 Compare W8, 0
	083 JumpIfNotEqual {85}
	084 Call 0x1C17DFC
	085 Move S7, 1
	086 Move V0, V8
	087 Move V1, V9
	088 Move V2, V10
	089 Move V3, V11
	090 Move V4, V12
	091 Move V5, V13
	092 Move V6, V14
	093 Call GizmoHelpers.DrawWireCubeOriented, X0, X1, V0
	094 Move X0, [X19+520]
	095 Move X20, [X31+80]
	096 Move X19, [X31+88]
	097 Move X30, [X31+64]
	098 Move X21, [X31+72]
	099 Move D9, [X31+48]
	100 Move D8, [X31+56]
	101 Move D11, [X31+32]
	102 Move D10, [X31+40]
	103 Move D13, [X31+16]
	104 Move D12, [X31+24]
	105 Move S0, 1
	106 Move V14, [X31+96]
	107 Call GizmoHelpers.DrawAxisArrows, X0, V0
	108 Return 
	109 Call 0x1C17F20

Method: UnityEngine.Transform GetAttachTransform(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor)

Disassembly:
	0x03B83E00 MOV X1, X31
	0x03B83E04 BL 0x3C32ECC

ISIL:
	001 Move X0, [X0+520]
	002 Return X0

Method: System.Boolean GenerateTeleportRequest(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.RaycastHit raycastHit, ref UnityEngine.XR.Interaction.Toolkit.TeleportRequest teleportRequest)

Disassembly:
	0x03B83E08 CBZ X0, 0x3B83E40
	0x03B83E0C MOV X1, X31
	0x03B83E10 BL 0x3C35834
	0x03B83E14 TBZ X0, 0x0, 0x3B83E30
	0x03B83E18 MOV X0, X20
	0x03B83E1C MOV X1, X19
	0x03B83E20 LDP X20, X19, [X31 + 0x20]
	0x03B83E24 LDP X22, X21, [X31 + 0x10]
	0x03B83E28 LDR X30, [X31], #0x30
	0x03B83E2C B 0x3B83E44
	0x03B83E30 LDP X20, X19, [X31 + 0x20]
	0x03B83E34 LDP X22, X21, [X31 + 0x10]
	0x03B83E38 LDR X30, [X31], #0x30
	0x03B83E3C RET
	0x03B83E40 BL 0x1C16F20
	0x03B83E44 STP D11, D10, [X31 - 0x50]!
	0x03B83E48 STP D9, D8, [X31 + 0x10]
	0x03B83E4C STR X30, [X31 + 0x20]
	0x03B83E50 STP X22, X21, [X31 + 0x30]
	0x03B83E54 STP X20, X19, [X31 + 0x40]
	0x03B83E58 ADRP X21, 0x85F000
	0x03B83E5C LDRB W8, [X21 + 0xAED]
	0x03B83E60 MOV X19, X1
	0x03B83E64 MOV X20, X0
	0x03B83E68 TBNZ X8, 0x0, 0x3B83E80
	0x03B83E6C ADRP X0, 0x5D8000
	0x03B83E70 LDR X0, [X0 + 0xEF8]
	0x03B83E74 BL 0x1C16CF4
	0x03B83E78 MOVZ W8, 0x1
	0x03B83E7C STRB W8, [X21 + 0xAED]
	0x03B83E80 CBNZ X19, 0x3B83E88
	0x03B83E84 LDR X19, [X20 + 0x20]
	0x03B83E88 MOV X0, X20
	0x03B83E8C BL 0x3B84898
	0x03B83E90 TBZ X0, 0x0, 0x3B83F64
	0x03B83E94 LDR X0, [X20 + 0x40]
	0x03B83E98 CBZ X0, 0x3B84044
	0x03B83E9C LDR X1, [X20 + 0x58]
	0x03B83EA0 MOV X2, X31
	0x03B83EA4 BL 0x3C12F60
	0x03B83EA8 ADRP X22, 0x5D8000
	0x03B83EAC LDR X22, [X22 + 0xEF8]
	0x03B83EB0 LDR X21, [X20 + 0x58]
	0x03B83EB4 LDR X0, [X22]
	0x03B83EB8 LDR W8, [X0 + 0xE0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x860000
	007 Move X21, 0x571000
	008 Move W8, [X22+2784]
	009 Move X21, [X21+1432]
	010 Move X19, X3
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x571000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X22+2784], W8
	021 Move X0, [X21]
	022 Move X21, [X20+520]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X21
	028 Move X1, X31
	029 Move X2, X31
	030 Call Object.op_Equality, X0, X1
	031 Move W21, W0
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfEqual {53}
	036 Move X0, [X20+520]
	037 Compare X0, 0
	038 JumpIfEqual {61}
	039 Move X1, X31
	040 Call Transform.get_position, X0
	041 Move [X19], S0
	042 Move [X19+8], S1
	043 Move [X19+8], S2
	044 Move X0, [X20+520]
	045 Compare X0, 0
	046 JumpIfEqual {61}
	047 Move X1, X31
	048 Call Transform.get_rotation, X0
	049 Move [X19+12], S0
	050 Move [X19+20], S1
	051 Move [X19+20], S2
	052 Move [X19+28], S3
	053 NotImplemented "Instruction ORN not yet implemented."
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 And W0, W8, 1
	059 Move X30, [X31+48]
	060 Return X0
	061 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B83EBC CBNZ W8, 0x3B83EC8

ISIL:
	001 Call BaseTeleportationInteractable..ctor, X0
	002 Return 

