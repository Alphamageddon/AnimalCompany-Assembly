Type: UnityEngine.XR.Interaction.Toolkit.XRGazeAssistance/InteractorData

Method: UnityEngine.Object get_interactor()

Disassembly:
	0x03B6C09C ADRP X0, 0x5EE000
	0x03B6C0A0 LDR X0, [X0 + 0x368]

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Void set_interactor(UnityEngine.Object value)

Disassembly:
	0x03B6C0A4 BL 0x1C16CF4
	0x03B6C0A8 MOVZ W8, 0x1

ISIL:
	001 Move [X0+16], X1
	002 Return 

Method: System.Boolean get_teleportRay()

Disassembly:
	0x03B6C0AC STRB W8, [X20 + 0xA03]
	0x03B6C0B0 LDR X8, [X19 + 0x18]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_teleportRay(System.Boolean value)

Disassembly:
	0x03B6C0B4 CBZ X8, 0x3B6C0D8
	0x03B6C0B8 ADRP X9, 0x5EE000
	0x03B6C0BC LDR X9, [X9 + 0x368]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+24], W8
	003 Return 

Method: System.Boolean get_fallback()

Disassembly:
	0x03B6C0C0 LDR X10, [X8]
	0x03B6C0C4 LDR X9, [X9]

ISIL:
	001 Move W0, [X0+25]
	002 Return X0

Method: System.Void set_fallback(System.Boolean value)

Disassembly:
	0x03B6C0C8 LDRB W12, [X10 + 0x130]
	0x03B6C0CC LDRB W11, [X9 + 0x130]
	0x03B6C0D0 CMP W12, W11

ISIL:
	001 And W8, W1, 1
	002 Move [X0+25], W8
	003 Return 

Method: System.Void Initialize()

Disassembly:
	0x03B6A3B0 CBZ X0, 0x3B6A3C4
	0x03B6A3B4 BL 0x3B6A3D4
	0x03B6A3B8 LDR X0, [X19 + 0x30]
	0x03B6A3BC ADD W20, W20, 0x1
	0x03B6A3C0 CBNZ X0, 0x3B6A398
	0x03B6A3C4 BL 0x1C16F20
	0x03B6A3C8 LDP X20, X19, [X31 + 0x10]
	0x03B6A3CC LDP X30, X21, [X31], #0x20
	0x03B6A3D0 RET
	0x03B6A3D4 STR D10, [X31 - 0x30]!
	0x03B6A3D8 STP D9, D8, [X31 + 0x8]
	0x03B6A3DC STR X30, [X31 + 0x18]
	0x03B6A3E0 STP X20, X19, [X31 + 0x20]
	0x03B6A3E4 ADRP X20, 0x878000
	0x03B6A3E8 LDRB W8, [X20 + 0x9E1]
	0x03B6A3EC MOV X19, X0
	0x03B6A3F0 TBNZ X8, 0x0, 0x3B6A408
	0x03B6A3F4 ADRP X0, 0x589000
	0x03B6A3F8 LDR X0, [X0 + 0x598]
	0x03B6A3FC BL 0x1C16CF4
	0x03B6A400 MOVZ W8, 0x1
	0x03B6A404 STRB W8, [X20 + 0x9E1]
	0x03B6A408 LDRB W8, [X19 + 0x1A]
	0x03B6A40C CBZ W8, 0x3B6A488
	0x03B6A410 LDRB W8, [X19 + 0x40]
	0x03B6A414 CBZ W8, 0x3B6A488
	0x03B6A418 LDRB W8, [X19 + 0x19]
	0x03B6A41C CBZ W8, 0x3B6A488
	0x03B6A420 LDRB W8, [X19 + 0x60]
	0x03B6A424 CBZ W8, 0x3B6A49C
	0x03B6A428 ADRP X8, 0x589000
	0x03B6A42C LDR X8, [X8 + 0x598]
	0x03B6A430 LDR X20, [X19 + 0x58]
	0x03B6A434 LDR X0, [X8]
	0x03B6A438 LDR W8, [X0 + 0xE0]
	0x03B6A43C CBNZ W8, 0x3B6A444
	0x03B6A440 BL 0x1C16DFC
	0x03B6A444 MOV X0, X20
	0x03B6A448 MOV X1, X31
	0x03B6A44C MOV X2, X31
	0x03B6A450 BL 0x3C354F8
	0x03B6A454 TBZ X0, 0x0, 0x3B6A49C
	0x03B6A458 LDR X0, [X19 + 0x58]
	0x03B6A45C CBZ X0, 0x3B6A528
	0x03B6A460 MOV X1, X31
	0x03B6A464 BL 0x3C3F58C
	0x03B6A468 LDRB W8, [X19 + 0x18]
	0x03B6A46C MOV V8.16B, V0.16B
	0x03B6A470 MOV V9.16B, V1.16B
	0x03B6A474 MOV V10.16B, V2.16B
	0x03B6A478 CBNZ W8, 0x3B6A4C0
	0x03B6A47C LDR X0, [X19 + 0x58]
	0x03B6A480 CBNZ X0, 0x3B6A4D4
	0x03B6A484 B 0x3B6A528
	0x03B6A488 LDP X20, X19, [X31 + 0x20]
	0x03B6A48C LDR X30, [X31 + 0x18]
	0x03B6A490 LDP D9, D8, [X31 + 0x8]
	0x03B6A494 LDR V10, [X31], #0x30
	0x03B6A498 RET
	0x03B6A49C LDR X0, [X19 + 0x48]
	0x03B6A4A0 CBZ X0, 0x3B6A528
	0x03B6A4A4 MOV X1, X31
	0x03B6A4A8 BL 0x3C3F58C
	0x03B6A4AC LDRB W8, [X19 + 0x18]
	0x03B6A4B0 MOV V8.16B, V0.16B
	0x03B6A4B4 MOV V9.16B, V1.16B
	0x03B6A4B8 MOV V10.16B, V2.16B
	0x03B6A4BC CBZ W8, 0x3B6A4CC
	0x03B6A4C0 LDR X0, [X19 + 0x68]
	0x03B6A4C4 CBNZ X0, 0x3B6A4D4
	0x03B6A4C8 B 0x3B6A528
	0x03B6A4CC LDR X0, [X19 + 0x48]
	0x03B6A4D0 CBZ X0, 0x3B6A528
	0x03B6A4D4 MOV X1, X31
	0x03B6A4D8 BL 0x3C3DEB4
	0x03B6A4DC LDR X0, [X19 + 0x78]
	0x03B6A4E0 CBZ X0, 0x3B6A528
	0x03B6A4E4 MOV V4.16B, V0.16B
	0x03B6A4E8 MOV V5.16B, V1.16B
	0x03B6A4EC MOV V0.16B, V8.16B
	0x03B6A4F0 MOV V1.16B, V9.16B
	0x03B6A4F4 LDP X20, X19, [X31 + 0x20]
	0x03B6A4F8 LDR X30, [X31 + 0x18]
	0x03B6A4FC LDP D9, D8, [X31 + 0x8]
	0x03B6A500 MOV V6.16B, V2.16B
	0x03B6A504 MOV V7.16B, V3.16B
	0x03B6A508 MOV V2.16B, V10.16B
	0x03B6A50C MOV V3.16B, V4.16B
	0x03B6A510 MOV V4.16B, V5.16B
	0x03B6A514 MOV V5.16B, V6.16B
	0x03B6A518 MOV V6.16B, V7.16B
	0x03B6A51C MOV X1, X31
	0x03B6A520 LDR V10, [X31], #0x30
	0x03B6A524 B 0x3C40000
	0x03B6A528 BL 0x1C16F20
	0x03B6A52C SUB X31, X31, 0x50
	0x03B6A530 STR D8, [X31 + 0x20]
	0x03B6A534 STR X30, [X31 + 0x28]
	0x03B6A538 STP X22, X21, [X31 + 0x30]
	0x03B6A53C STP X20, X19, [X31 + 0x40]
	0x03B6A540 ADRP X22, 0x878000
	0x03B6A544 LDRB W8, [X22 + 0x9DC]
	0x03B6A548 MOV V8.16B, V0.16B
	0x03B6A54C MOV X19, X2
	0x03B6A550 MOV X20, X1
	0x03B6A554 MOV X21, X0
	0x03B6A558 TBNZ X8, 0x0, 0x3B6A570
	0x03B6A55C ADRP X0, 0x590000
	0x03B6A560 LDR X0, [X0 + 0x4B8]
	0x03B6A564 BL 0x1C16CF4
	0x03B6A568 MOVZ W8, 0x1
	0x03B6A56C STRB W8, [X22 + 0x9DC]
	0x03B6A570 STR W31, [X31 + 0x18]
	0x03B6A574 STR X31, [X31 + 0x10]
	0x03B6A578 LDR X8, [X21 + 0x20]
	0x03B6A57C CBZ X8, 0x3B6A5E4
	0x03B6A580 ADRP X9, 0x590000
	0x03B6A584 LDR X9, [X9 + 0x4B8]
	0x03B6A588 LDR V0, [X8 + 0x338]
	0x03B6A58C LDR V1, [X8 + 0x340]
	0x03B6A590 ADD X1, X31, 0x0
	0x03B6A594 LDR X8, [X9]
	0x03B6A598 STR D0, [X31]
	0x03B6A59C STR S1, [X31 + 0x8]
	0x03B6A5A0 LDP S1, S2, [X21 + 0x38]
	0x03B6A5A4 LDR X8, [X8 + 0xB8]
	0x03B6A5A8 LDP S4, S3, [X21 + 0x40]
	0x03B6A5AC ADD X3, X31, 0x10
	0x03B6A5B0 MOV X0, X20
	0x03B6A5B4 LDR V5, [X8]
	0x03B6A5B8 MOV X2, X19
	0x03B6A5BC MOV V0.16B, V8.16B
	0x03B6A5C0 BL 0x3B6A5E8
	0x03B6A5C4 LDP S0, S1, [X31 + 0x10]
	0x03B6A5C8 LDR V2, [X31 + 0x18]
	0x03B6A5CC LDP X20, X19, [X31 + 0x40]
	0x03B6A5D0 LDP X22, X21, [X31 + 0x30]
	0x03B6A5D4 LDR X30, [X31 + 0x28]
	0x03B6A5D8 LDR V8, [X31 + 0x20]
	0x03B6A5DC ADD X31, X31, 0x50
	0x03B6A5E0 RET
	0x03B6A5E4 BL 0x1C16F20
	0x03B6A5E8 STP D13, D12, [X31 - 0x70]!
	0x03B6A5EC STP D11, D10, [X31 + 0x10]
	0x03B6A5F0 STP D9, D8, [X31 + 0x20]
	0x03B6A5F4 STR X30, [X31 + 0x30]
	0x03B6A5F8 STP X24, X23, [X31 + 0x40]
	0x03B6A5FC STP X22, X21, [X31 + 0x50]
	0x03B6A600 STP X20, X19, [X31 + 0x60]
	0x03B6A604 ADRP X23, 0x878000
	0x03B6A608 ADRP X24, 0x5F1000
	0x03B6A60C LDRB W8, [X23 + 0x9DE]
	0x03B6A610 LDR X24, [X24 + 0x530]
	0x03B6A614 MOV X19, X3
	0x03B6A618 MOV V8.16B, V5.16B
	0x03B6A61C MOV V9.16B, V4.16B
	0x03B6A620 MOV V10.16B, V3.16B
	0x03B6A624 MOV V11.16B, V2.16B
	0x03B6A628 MOV V12.16B, V1.16B
	0x03B6A62C MOV V13.16B, V0.16B
	0x03B6A630 MOV X20, X2
	0x03B6A634 MOV X21, X1
	0x03B6A638 MOV X22, X0
	0x03B6A63C TBNZ X8, 0x0, 0x3B6A654
	0x03B6A640 ADRP X0, 0x5F1000
	0x03B6A644 LDR X0, [X0 + 0x530]
	0x03B6A648 BL 0x1C16CF4
	0x03B6A64C MOVZ W8, 0x1
	0x03B6A650 STRB W8, [X23 + 0x9DE]
	0x03B6A654 LDR X0, [X24]
	0x03B6A658 LDR W8, [X0 + 0xE0]
	0x03B6A65C CBNZ W8, 0x3B6A664
	0x03B6A660 BL 0x1C16DFC
	0x03B6A664 MOV X0, X22
	0x03B6A668 MOV X1, X21
	0x03B6A66C MOV X2, X20
	0x03B6A670 MOV V2.16B, V11.16B
	0x03B6A674 MOV V3.16B, V10.16B
	0x03B6A678 MOV V4.16B, V9.16B
	0x03B6A67C MOV V5.16B, V8.16B
	0x03B6A680 MOV X3, X19
	0x03B6A684 LDP X20, X19, [X31 + 0x60]
	0x03B6A688 LDP X22, X21, [X31 + 0x50]
	0x03B6A68C LDP X24, X23, [X31 + 0x40]
	0x03B6A690 LDR X30, [X31 + 0x30]
	0x03B6A694 LDP D9, D8, [X31 + 0x20]
	0x03B6A698 LDP D11, D10, [X31 + 0x10]
	0x03B6A69C MOV V0.16B, V13.16B
	0x03B6A6A0 MOV V1.16B, V12.16B
	0x03B6A6A4 LDP D13, D12, [X31], #0x70
	0x03B6A6A8 B 0x3B6A770
	0x03B6A6AC SUB X31, X31, 0x60
	0x03B6A6B0 STP D9, D8, [X31 + 0x20]
	0x03B6A6B4 STR X30, [X31 + 0x30]
	0x03B6A6B8 STP X22, X21, [X31 + 0x40]
	0x03B6A6BC STP X20, X19, [X31 + 0x50]
	0x03B6A6C0 ADRP X22, 0x878000
	0x03B6A6C4 LDRB W8, [X22 + 0x9DD]
	0x03B6A6C8 MOV V8.16B, V1.16B
	0x03B6A6CC MOV V9.16B, V0.16B
	0x03B6A6D0 MOV X19, X2
	0x03B6A6D4 MOV X20, X1
	0x03B6A6D8 MOV X21, X0
	0x03B6A6DC TBNZ X8, 0x0, 0x3B6A6F4
	0x03B6A6E0 ADRP X0, 0x590000
	0x03B6A6E4 LDR X0, [X0 + 0x4B8]
	0x03B6A6E8 BL 0x1C16CF4
	0x03B6A6EC MOVZ W8, 0x1
	0x03B6A6F0 STRB W8, [X22 + 0x9DD]
	0x03B6A6F4 STR W31, [X31 + 0x18]
	0x03B6A6F8 STR X31, [X31 + 0x10]
	0x03B6A6FC LDR X8, [X21 + 0x20]
	0x03B6A700 CBZ X8, 0x3B6A76C
	0x03B6A704 ADRP X9, 0x590000
	0x03B6A708 LDR X9, [X9 + 0x4B8]
	0x03B6A70C LDR V0, [X8 + 0x338]
	0x03B6A710 LDR V1, [X8 + 0x340]
	0x03B6A714 ADD X1, X31, 0x0
	0x03B6A718 LDR X8, [X9]
	0x03B6A71C STR D0, [X31]
	0x03B6A720 STR S1, [X31 + 0x8]
	0x03B6A724 LDP S4, S3, [X21 + 0x40]
	0x03B6A728 LDR X8, [X8 + 0xB8]
	0x03B6A72C LDR V2, [X21 + 0x3C]
	0x03B6A730 ADD X3, X31, 0x10
	0x03B6A734 MOV X0, X20
	0x03B6A738 LDR V5, [X8]
	0x03B6A73C MOV X2, X19
	0x03B6A740 MOV V0.16B, V9.16B
	0x03B6A744 MOV V1.16B, V8.16B
	0x03B6A748 BL 0x3B6A5E8
	0x03B6A74C LDP S0, S1, [X31 + 0x10]
	0x03B6A750 LDR V2, [X31 + 0x18]
	0x03B6A754 LDP X20, X19, [X31 + 0x50]
	0x03B6A758 LDP X22, X21, [X31 + 0x40]
	0x03B6A75C LDR X30, [X31 + 0x30]
	0x03B6A760 LDP D9, D8, [X31 + 0x20]
	0x03B6A764 ADD X31, X31, 0x60
	0x03B6A768 RET
	0x03B6A76C BL 0x1C16F20
	0x03B6A770 STP D13, D12, [X31 - 0x70]!
	0x03B6A774 STP D11, D10, [X31 + 0x10]
	0x03B6A778 STP D9, D8, [X31 + 0x20]
	0x03B6A77C STR X30, [X31 + 0x30]
	0x03B6A780 STP X24, X23, [X31 + 0x40]
	0x03B6A784 STP X22, X21, [X31 + 0x50]
	0x03B6A788 STP X20, X19, [X31 + 0x60]
	0x03B6A78C ADRP X23, 0x878000
	0x03B6A790 ADRP X24, 0x5B1000
	0x03B6A794 LDRB W8, [X23 + 0x9E7]
	0x03B6A798 LDR X24, [X24 + 0x848]
	0x03B6A79C MOV X19, X3
	0x03B6A7A0 MOV V8.16B, V5.16B
	0x03B6A7A4 MOV V9.16B, V4.16B
	0x03B6A7A8 MOV V10.16B, V3.16B
	0x03B6A7AC MOV V11.16B, V2.16B
	0x03B6A7B0 MOV V12.16B, V1.16B
	0x03B6A7B4 MOV V13.16B, V0.16B
	0x03B6A7B8 MOV X20, X2
	0x03B6A7BC MOV X21, X1
	0x03B6A7C0 MOV X22, X0
	0x03B6A7C4 TBNZ X8, 0x0, 0x3B6A7E8
	0x03B6A7C8 ADRP X0, 0x5B1000
	0x03B6A7CC LDR X0, [X0 + 0x848]
	0x03B6A7D0 BL 0x1C16CF4
	0x03B6A7D4 ADRP X0, 0x5F1000
	0x03B6A7D8 LDR X0, [X0 + 0x530]
	0x03B6A7DC BL 0x1C16CF4
	0x03B6A7E0 MOVZ W8, 0x1
	0x03B6A7E4 STRB W8, [X23 + 0x9E7]
	0x03B6A7E8 LDR X0, [X24]
	0x03B6A7EC LDR W8, [X0 + 0xE0]
	0x03B6A7F0 CBNZ W8, 0x3B6A7F8
	0x03B6A7F4 BL 0x1C16DFC
	0x03B6A7F8 MOV X0, X31
	0x03B6A7FC BL 0x36FA670
	0x03B6A800 TBZ X0, 0x0, 0x3B6A870
	0x03B6A804 ADRP X8, 0x5F1000

ISIL:
	001 Move [X31-64], X30
	002 Move [X31-56], X25
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X20, 0x879000
	010 Move W8, [X20+2528]
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {51}
	016 Move X0, 0x5F2000
	017 Move X0, [X0+1280]
	018 Call 0x1C17CF4
	019 Move X0, 0x58A000
	020 Move X0, [X0+2600]
	021 Call 0x1C17CF4
	022 Move X0, 0x58A000
	023 Move X0, [X0+2648]
	024 Call 0x1C17CF4
	025 Move X0, 0x5F1000
	026 Move X0, [X0+760]
	027 Call 0x1C17CF4
	028 Move X0, 0x5F2000
	029 Move X0, [X0+1288]
	030 Call 0x1C17CF4
	031 Move X0, 0x5F1000
	032 Move X0, [X0+808]
	033 Call 0x1C17CF4
	034 Move X0, 0x5F2000
	035 Move X0, [X0+1296]
	036 Call 0x1C17CF4
	037 Move X0, 0x5F2000
	038 Move X0, [X0+1304]
	039 Call 0x1C17CF4
	040 Move X0, 0x5F2000
	041 Move X0, [X0+1312]
	042 Call 0x1C17CF4
	043 Move X0, 0x5F1000
	044 Move X0, [X0+3336]
	045 Call 0x1C17CF4
	046 Move X0, 0x5F2000
	047 Move X0, [X0+744]
	048 Call 0x1C17CF4
	049 Move W8, 1
	050 Move [X20+2528], W8
	051 Move W8, [X19+26]
	052 Compare W8, 0
	053 JumpIfEqual {63}
	054 Move X20, [X31+48]
	055 Move X19, [X31+56]
	056 Move X22, [X31+32]
	057 Move X21, [X31+40]
	058 Move X24, [X31+16]
	059 Move X23, [X31+24]
	060 Move X30, [X31+64]
	061 Move X25, [X31+72]
	062 Return 
	063 Move X21, 0x5F2000
	064 Move X20, [X19+16]
	065 Move X21, [X21+1288]
	066 Move X0, X20
	067 Move X1, [X21]
	068 Call 0x1C17E00
	069 Move [X19+32], X0
	070 Move X1, [X21]
	071 Move X0, X20
	072 Call 0x1C17E00
	073 Move X22, 0x5F1000
	074 Move X20, [X19+16]
	075 Move X22, [X22+808]
	076 Move X0, X20
	077 Move X1, [X22]
	078 Call 0x1C17E00
	079 Move [X19+40], X0
	080 Move X1, [X22]
	081 Move X0, X20
	082 Call 0x1C17E00
	083 Move X20, [X19+32]
	084 Compare X20, 0
	085 JumpIfEqual {103}
	086 Move X8, [X19+40]
	087 Compare X8, 0
	088 JumpIfEqual {103}
	089 Move X8, [X20]
	090 Move X1, [X21]
	091 NotImplemented "Instruction LDRH not yet implemented."
	092 Compare X9, 0
	093 JumpIfEqual {100}
	094 Move X10, [X8+176]
	095 Add X10, X10, 8
	096 NotImplemented "Instruction LDUR not yet implemented."
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Subtract X9, X9, 1
	099 Add X10, X10, 16
	100 Move X0, X20
	101 Move W2, W31
	102 Call 0x1C5D788
	103 Move X8, 0x58A000
	104 Move X8, [X8+2600]
	105 Move X0, [X8]
	106 Move W8, [X0+224]
	107 Compare W8, 0
	108 JumpIfNotEqual {110}
	109 Call 0x1C17DFC
	110 Move X8, 0x5F2000
	111 Move X8, [X8+1296]
	112 Move X20, [X31+48]
	113 Move X19, [X31+56]
	114 Move X22, [X31+32]
	115 Move X21, [X31+40]
	116 Move X24, [X31+16]
	117 Move X23, [X31+24]
	118 Move X0, [X8]
	119 Move X1, X31
	120 Move X30, [X31+64]
	121 Move X25, [X31+72]
	122 Call Debug.LogWarning, X0
	123 Return 
	124 NotImplemented "Instruction LDRSW not yet implemented."
	125 Add X8, X8, X9
	126 Add X0, X8, 312
	127 Move X8, [X0]
	128 Move X1, [X0+8]
	129 Move X0, X20
	130 NotImplemented "Instruction BLR not yet implemented."
	131 Move X20, [X19+32]
	132 Move [X19+72], X0
	133 Compare X20, 0
	134 JumpIfEqual {309}
	135 Move X8, [X20]
	136 Move X1, [X21]
	137 NotImplemented "Instruction LDRH not yet implemented."
	138 Compare X9, 0
	139 JumpIfEqual {146}
	140 Move X10, [X8+176]
	141 Add X10, X10, 8
	142 NotImplemented "Instruction LDUR not yet implemented."
	143 NotImplemented "Instruction CMP not yet implemented."
	144 Subtract X9, X9, 1
	145 Add X10, X10, 16
	146 Move W2, 1
	147 Move X0, X20
	148 Call 0x1C5D788
	149 Move W9, [X10]
	150 Add W9, W9, 1
	151 Add X8, X8, W9
	152 Add X0, X8, 312
	153 Move X8, [X0]
	154 Move X1, [X0+8]
	155 Move X0, X20
	156 NotImplemented "Instruction BLR not yet implemented."
	157 Move X20, [X19+40]
	158 Move [X19+80], X0
	159 Compare X20, 0
	160 JumpIfEqual {309}
	161 Move X10, 0x5F1000
	162 Move X8, [X20]
	163 Move X10, [X10+760]
	164 NotImplemented "Instruction LDRH not yet implemented."
	165 Move X1, [X10]
	166 Compare X9, 0
	167 JumpIfEqual {174}
	168 Move X10, [X8+176]
	169 Add X10, X10, 8
	170 NotImplemented "Instruction LDUR not yet implemented."
	171 NotImplemented "Instruction CMP not yet implemented."
	172 Subtract X9, X9, 1
	173 Add X10, X10, 16
	174 Move W2, 5
	175 Move X0, X20
	176 Call 0x1C5D788
	177 Move W9, [X10]
	178 Add W9, W9, 5
	179 Add X8, X8, W9
	180 Add X0, X8, 312
	181 Move X8, [X0]
	182 Move X1, [X0+8]
	183 Move X0, X20
	184 NotImplemented "Instruction BLR not yet implemented."
	185 Compare X0, 0
	186 JumpIfEqual {309}
	187 Move X1, X31
	188 Move X20, X0
	189 Call Component.get_gameObject, X0
	190 Compare X0, 0
	191 JumpIfEqual {309}
	192 Move X1, X31
	193 Call Object.get_name, X0
	194 Move X24, 0x5F2000
	195 Move X24, [X24+1312]
	196 Move X9, 0x5F2000
	197 Move X9, [X9+744]
	198 Move X21, X0
	199 Move X8, [X24]
	200 Move X1, X21
	201 Move X2, [X9]
	202 Move X3, X31
	203 Move X0, X8
	204 Call String.Concat, X0, X1, X2
	205 Move X25, 0x58A000
	206 Move X25, [X25+2648]
	207 Move X23, X0
	208 Move X8, [X25]
	209 Move X0, X8
	210 Call 0x1C17F10
	211 Move X1, X23
	212 Move X2, X31
	213 Move X22, X0
	214 Call GameObject..ctor, X0, X1
	215 Compare X22, 0
	216 JumpIfEqual {309}
	217 Move X0, X22
	218 Move X1, X31
	219 Call GameObject.get_transform, X0
	220 Move [X19+104], X0
	221 Move X8, 0x5F1000
	222 Move X8, [X8+3336]
	223 Move X0, [X24]
	224 Move X1, X21
	225 Move X3, X31
	226 Move X2, [X8]
	227 Call String.Concat, X0, X1, X2
	228 Move X8, [X25]
	229 Move X23, X0
	230 Move X0, X8
	231 Call 0x1C17F10
	232 Move X1, X23
	233 Move X2, X31
	234 Move X22, X0
	235 Call GameObject..ctor, X0, X1
	236 Compare X22, 0
	237 JumpIfEqual {309}
	238 Move X0, X22
	239 Move X1, X31
	240 Call GameObject.get_transform, X0
	241 Move X8, [X19+72]
	242 Move [X19+112], X0
	243 Compare X8, 0
	244 JumpIfEqual {309}
	245 Move X22, [X19+104]
	246 Move X0, X8
	247 Move X1, X31
	248 Call Transform.get_parent, X0
	249 Compare X22, 0
	250 JumpIfEqual {309}
	251 Move X1, X0
	252 Move X0, X22
	253 Move X2, X31
	254 Call Transform.set_parent, X0, X1
	255 Move X0, [X19+112]
	256 Compare X0, 0
	257 JumpIfEqual {309}
	258 Move X1, [X19+104]
	259 Move X2, X31
	260 Call Transform.set_parent, X0, X1
	261 Move X8, 0x5F2000
	262 Move X8, [X8+1280]
	263 Add X1, X19, 56
	264 Move X0, X20
	265 Move X2, [X8]
	266 Call 0x21A5990, X0, X1
	267 And W8, W0, 1
	268 Move [X19+64], W8
	269 Move TEMP, X0
	270 And TEMP, TEMP, 1
	271 Compare TEMP, 1
	272 JumpIfNotEqual {307}
	273 Move X8, 0x5F2000
	274 Move X0, [X24]
	275 Move X8, [X8+1304]
	276 Move X1, X21
	277 Move X3, X31
	278 Move X2, [X8]
	279 Call String.Concat, X0, X1, X2
	280 Move X8, [X25]
	281 Move X21, X0
	282 Move X0, X8
	283 Call 0x1C17F10
	284 Move X1, X21
	285 Move X2, X31
	286 Move X20, X0
	287 Call GameObject..ctor, X0, X1
	288 Compare X20, 0
	289 JumpIfEqual {309}
	290 Move X0, X20
	291 Move X1, X31
	292 Call GameObject.get_transform, X0
	293 Move X8, [X19+104]
	294 Move [X19+120], X0
	295 Compare X8, 0
	296 JumpIfEqual {309}
	297 Move X20, X0
	298 Move X0, X8
	299 Move X1, X31
	300 Call Transform.get_parent, X0
	301 Compare X20, 0
	302 JumpIfEqual {309}
	303 Move X1, X0
	304 Move X0, X20
	305 Move X2, X31
	306 Call Transform.set_parent, X0, X1
	307 Move W8, 1
	308 Move [X19+26], W8
	309 Call 0x1C17F20

Method: System.Void UpdateFallbackRayOrigin(UnityEngine.Transform gazeTransform)

Disassembly:
	0x03B6AA44 STR V0, [X31 + 0x3]
	0x03B6AA48 LDR W8, [X0 + 0xE0]
	0x03B6AA4C CBNZ W8, 0x3B6AA58
	0x03B6AA50 BL 0x1C16DFC
	0x03B6AA54 LDR V0, [X31 + 0x3]
	0x03B6AA58 FMUL S1, S10, S10
	0x03B6AA5C FMUL S2, S13, S13
	0x03B6AA60 FMUL S4, S15, S15
	0x03B6AA64 FADD S1, S1, S2
	0x03B6AA68 FADD S1, S4, S1
	0x03B6AA6C FMOV S3, 1
	0x03B6AA70 FSQRT S1, S1
	0x03B6AA74 FDIV S12, S3, S1
	0x03B6AA78 MOV S1, V0.S[1]
	0x03B6AA7C MOV V2.16B, V8.16B
	0x03B6AA80 MOV X0, X31
	0x03B6AA84 STP S8, S1, [X31 + 0x18]
	0x03B6AA88 BL 0x3887BE4
	0x03B6AA8C LDRB W8, [X21 + 0x585]
	0x03B6AA90 MOV V8.16B, V0.16B
	0x03B6AA94 MOV V9.16B, V1.16B
	0x03B6AA98 MOV V11.16B, V2.16B
	0x03B6AA9C CBNZ W8, 0x3B6AAB4
	0x03B6AAA0 ADRP X0, 0x589000
	0x03B6AAA4 LDR X0, [X0 + 0x5A8]
	0x03B6AAA8 BL 0x1C16CF4
	0x03B6AAAC MOVZ W8, 0x1
	0x03B6AAB0 STRB W8, [X21 + 0x585]
	0x03B6AAB4 LDR X0, [X22]
	0x03B6AAB8 FMUL S14, S10, S12
	0x03B6AABC FMUL S13, S13, S12
	0x03B6AAC0 FMUL S10, S15, S12
	0x03B6AAC4 LDR W8, [X0 + 0xE0]
	0x03B6AAC8 CBNZ W8, 0x3B6AAD0
	0x03B6AACC BL 0x1C16DFC
	0x03B6AAD0 FMUL S1, S8, S8
	0x03B6AAD4 FMUL S2, S9, S9
	0x03B6AAD8 FMUL S0, S11, S11
	0x03B6AADC FADD S1, S1, S2
	0x03B6AAE0 FADD S0, S0, S1
	0x03B6AAE4 FMOV S3, 1
	0x03B6AAE8 FSQRT S0, S0
	0x03B6AAEC FDIV S0, S3, S0
	0x03B6AAF0 FMUL S12, S8, S0
	0x03B6AAF4 FMUL S8, S9, S0

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move W8, [X0+26]
	008 Compare W8, 0
	009 JumpIfEqual {49}
	010 Move W8, [X0+25]
	011 Move X19, X0
	012 Compare W8, 0
	013 JumpIfEqual {49}
	014 Move X20, X1
	015 Compare X1, 0
	016 JumpIfEqual {56}
	017 Move X0, X20
	018 Move X1, X31
	019 Call Transform.get_position, X0
	020 Move X0, X20
	021 Move X1, X31
	022 Move V8, V0
	023 Move V9, V1
	024 Move V10, V2
	025 Call Transform.get_rotation, X0
	026 Move X0, [X19+104]
	027 Compare X0, 0
	028 JumpIfEqual {56}
	029 Move V4, V0
	030 Move V5, V1
	031 Move V0, V8
	032 Move V1, V9
	033 Move X20, [X31+32]
	034 Move X19, [X31+40]
	035 Move X30, [X31+24]
	036 Move D9, [X31+8]
	037 Move D8, [X31+16]
	038 Move V6, V2
	039 Move V7, V3
	040 Move V2, V10
	041 Move V3, V4
	042 Move V4, V5
	043 Move V5, V6
	044 Move V6, V7
	045 Move X1, X31
	046 Move V10, [X31+48]
	047 Call Transform.SetPositionAndRotation, X0, X1, X2
	048 Return 
	049 Move X20, [X31+32]
	050 Move X19, [X31+40]
	051 Move X30, [X31+24]
	052 Move D9, [X31+8]
	053 Move D8, [X31+16]
	054 Move V10, [X31+48]
	055 Return 
	056 Call 0x1C17F20

Method: System.Void UpdateLineVisualOrigin()

Disassembly:
	0x03B6B3D4 ADRP X8, 0x5F0000
	0x03B6B3D8 LDR X8, [X8 + 0x548]
	0x03B6B3DC LDR W9, [X0 + 0xE0]
	0x03B6B3E0 LDR X22, [X8]
	0x03B6B3E4 CBNZ W9, 0x3B6B3EC
	0x03B6B3E8 BL 0x1C16DFC
	0x03B6B3EC MOV X0, X20
	0x03B6B3F0 MOV X1, X21
	0x03B6B3F4 MOV X2, X22
	0x03B6B3F8 MOV X3, X31
	0x03B6B3FC BL 0x36FAD70
	0x03B6B400 LDR X8, [X23]
	0x03B6B404 LDR X9, [X8 + 0xB8]
	0x03B6B408 STR X0, [X9]
	0x03B6B40C LDR W9, [X8 + 0xE0]
	0x03B6B410 CBNZ W9, 0x3B6B420
	0x03B6B414 MOV X0, X8
	0x03B6B418 BL 0x1C16DFC
	0x03B6B41C LDR X8, [X23]
	0x03B6B420 LDR X8, [X8 + 0xB8]
	0x03B6B424 LDP X22, X21, [X31 + 0x10]
	0x03B6B428 LDR X8, [X8]
	0x03B6B42C STR X8, [X19]
	0x03B6B430 LDP X20, X19, [X31 + 0x20]
	0x03B6B434 LDP X30, X23, [X31], #0x30
	0x03B6B438 RET
	0x03B6B43C STR X30, [X31 - 0x20]!
	0x03B6B440 STP X20, X19, [X31 + 0x10]
	0x03B6B444 ADRP X20, 0x877000
	0x03B6B448 ADRP X19, 0x5F0000
	0x03B6B44C LDRB W8, [X20 + 0x9E5]
	0x03B6B450 LDR X19, [X19 + 0x530]
	0x03B6B454 TBNZ X8, 0x0, 0x3B6B46C
	0x03B6B458 ADRP X0, 0x5F0000
	0x03B6B45C LDR X0, [X0 + 0x530]
	0x03B6B460 BL 0x1C16CF4
	0x03B6B464 MOVZ W8, 0x1
	0x03B6B468 STRB W8, [X20 + 0x9E5]
	0x03B6B46C LDR X0, [X19]
	0x03B6B470 STR X31, [X31 + 0x8]
	0x03B6B474 LDR W8, [X0 + 0xE0]
	0x03B6B478 CBNZ W8, 0x3B6B480
	0x03B6B47C BL 0x1C16DFC
	0x03B6B480 ADD X0, X31, 0x8
	0x03B6B484 BL 0x3B6B320
	0x03B6B488 LDR X0, [X31 + 0x8]
	0x03B6B48C LDP X20, X19, [X31 + 0x10]
	0x03B6B490 LDR X30, [X31], #0x20
	0x03B6B494 RET
	0x03B6B498 STP X30, X21, [X31 - 0x20]!
	0x03B6B49C STP X20, X19, [X31 + 0x10]
	0x03B6B4A0 ADRP X21, 0x877000
	0x03B6B4A4 ADRP X19, 0x5F0000
	0x03B6B4A8 ADRP X20, 0x5B0000
	0x03B6B4AC LDRB W8, [X21 + 0x9E6]
	0x03B6B4B0 LDR X19, [X19 + 0x558]
	0x03B6B4B4 LDR X20, [X20 + 0x848]
	0x03B6B4B8 TBNZ X8, 0x0, 0x3B6B4E8
	0x03B6B4BC ADRP X0, 0x5B0000
	0x03B6B4C0 LDR X0, [X0 + 0x848]
	0x03B6B4C4 BL 0x1C16CF4
	0x03B6B4C8 ADRP X0, 0x5F0000
	0x03B6B4CC LDR X0, [X0 + 0x530]
	0x03B6B4D0 BL 0x1C16CF4
	0x03B6B4D4 ADRP X0, 0x5F0000
	0x03B6B4D8 LDR X0, [X0 + 0x558]
	0x03B6B4DC BL 0x1C16CF4
	0x03B6B4E0 MOVZ W8, 0x1
	0x03B6B4E4 STRB W8, [X21 + 0x9E6]
	0x03B6B4E8 LDR X0, [X20]
	0x03B6B4EC ADRP X20, 0x5F0000
	0x03B6B4F0 LDR X19, [X19]
	0x03B6B4F4 LDR W8, [X0 + 0xE0]
	0x03B6B4F8 LDR X20, [X20 + 0x530]
	0x03B6B4FC CBNZ W8, 0x3B6B504
	0x03B6B500 BL 0x1C16DFC
	0x03B6B504 MOV X0, X19
	0x03B6B508 MOV X1, X31
	0x03B6B50C BL 0x36FA754
	0x03B6B510 LDR X8, [X20]
	0x03B6B514 MOV X19, X0
	0x03B6B518 LDR W9, [X8 + 0xE0]
	0x03B6B51C CBNZ W9, 0x3B6B52C
	0x03B6B520 MOV X0, X8
	0x03B6B524 BL 0x1C16DFC
	0x03B6B528 LDR X8, [X20]

ISIL:
	001 Move [X31-48], D10
	002 Move [X31+8], D9
	003 Move [X31+16], D8
	004 Move [X31+24], X30
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x878000
	008 Move W8, [X20+2529]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x589000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X20+2529], W8
	019 Move W8, [X19+26]
	020 Compare W8, 0
	021 JumpIfEqual {61}
	022 Move W8, [X19+64]
	023 Compare W8, 0
	024 JumpIfEqual {61}
	025 Move W8, [X19+25]
	026 Compare W8, 0
	027 JumpIfEqual {61}
	028 Move W8, [X19+96]
	029 Compare W8, 0
	030 JumpIfEqual {68}
	031 Move X8, 0x589000
	032 Move X8, [X8+1432]
	033 Move X20, [X19+88]
	034 Move X0, [X8]
	035 Move W8, [X0+224]
	036 Compare W8, 0
	037 JumpIfNotEqual {39}
	038 Call 0x1C17DFC
	039 Move X0, X20
	040 Move X1, X31
	041 Move X2, X31
	042 Call Object.op_Inequality, X0, X1
	043 Move TEMP, X0
	044 And TEMP, TEMP, 1
	045 Compare TEMP, 1
	046 JumpIfNotEqual {68}
	047 Move X0, [X19+88]
	048 Compare X0, 0
	049 JumpIfEqual {110}
	050 Move X1, X31
	051 Call Transform.get_position, X0
	052 Move W8, [X19+24]
	053 Move V8, V0
	054 Move V9, V1
	055 Move V10, V2
	056 Compare W8, 0
	057 JumpIfNotEqual {79}
	058 Move X0, [X19+88]
	059 Compare X0, 0
	060 JumpIfNotEqual {85}
	061 Move X20, [X31+32]
	062 Move X19, [X31+40]
	063 Move X30, [X31+24]
	064 Move D9, [X31+8]
	065 Move D8, [X31+16]
	066 Move V10, [X31+48]
	067 Return 
	068 Move X0, [X19+72]
	069 Compare X0, 0
	070 JumpIfEqual {110}
	071 Move X1, X31
	072 Call Transform.get_position, X0
	073 Move W8, [X19+24]
	074 Move V8, V0
	075 Move V9, V1
	076 Move V10, V2
	077 Compare W8, 0
	078 JumpIfEqual {82}
	079 Move X0, [X19+104]
	080 Compare X0, 0
	081 JumpIfNotEqual {85}
	082 Move X0, [X19+72]
	083 Compare X0, 0
	084 JumpIfEqual {110}
	085 Move X1, X31
	086 Call Transform.get_rotation, X0
	087 Move X0, [X19+120]
	088 Compare X0, 0
	089 JumpIfEqual {110}
	090 Move V4, V0
	091 Move V5, V1
	092 Move V0, V8
	093 Move V1, V9
	094 Move X20, [X31+32]
	095 Move X19, [X31+40]
	096 Move X30, [X31+24]
	097 Move D9, [X31+8]
	098 Move D8, [X31+16]
	099 Move V6, V2
	100 Move V7, V3
	101 Move V2, V10
	102 Move V3, V4
	103 Move V4, V5
	104 Move V5, V6
	105 Move V6, V7
	106 Move X1, X31
	107 Move V10, [X31+48]
	108 Call Transform.SetPositionAndRotation, X0, X1, X2
	109 Return 
	110 Call 0x1C17F20

Method: System.Boolean UpdateFallbackState(UnityEngine.Transform gazeTransform, System.Single fallbackDivergence, System.Boolean selectionLocked)

Disassembly:
	0x03B6AC54 FADD S0, S2, S0
	0x03B6AC58 FCMP S10, S9
	0x03B6AC5C FSQRT S11, S0
	0x03B6AC60 B.PL 0x3B6ACAC
	0x03B6AC64 LDP S0, S2, [X31 + 0x20]
	0x03B6AC68 LDR V1, [X31 + 0x28]
	0x03B6AC6C MOV X0, X31
	0x03B6AC70 FMUL S0, S11, S0
	0x03B6AC74 FMUL S1, S11, S1
	0x03B6AC78 FMUL S2, S11, S2
	0x03B6AC7C BL 0x3887BE0
	0x03B6AC80 STP S0, S1, [X19]
	0x03B6AC84 STR S2, [X19 + 0x8]
	0x03B6AC88 LDP X20, X19, [X31 + 0xC0]
	0x03B6AC8C LDP X22, X21, [X31 + 0xB0]
	0x03B6AC90 LDP X30, X23, [X31 + 0xA0]
	0x03B6AC94 LDP D9, D8, [X31 + 0x90]
	0x03B6AC98 LDP D11, D10, [X31 + 0x80]
	0x03B6AC9C LDP D13, D12, [X31 + 0x70]
	0x03B6ACA0 LDP D15, D14, [X31 + 0x60]
	0x03B6ACA4 ADD X31, X31, 0xD0
	0x03B6ACA8 RET
	0x03B6ACAC LDR V0, [X31 + 0x2C]
	0x03B6ACB0 FCMP S11, S0
	0x03B6ACB4 B.MI 0x3B6AC24
	0x03B6ACB8 LDP S2, S13, [X31 + 0x18]
	0x03B6ACBC LDR V0, [X31 + 0x3]
	0x03B6ACC0 MOV X0, X31
	0x03B6ACC4 MOV V1.16B, V13.16B
	0x03B6ACC8 BL 0x3887BE4
	0x03B6ACCC LDRB W8, [X21 + 0x585]
	0x03B6ACD0 MOV V14.16B, V0.16B
	0x03B6ACD4 MOV V12.16B, V2.16B
	0x03B6ACD8 CBNZ W8, 0x3B6ACF0
	0x03B6ACDC ADRP X0, 0x589000
	0x03B6ACE0 LDR X0, [X0 + 0x5A8]
	0x03B6ACE4 BL 0x1C16CF4
	0x03B6ACE8 MOVZ W8, 0x1
	0x03B6ACEC STRB W8, [X21 + 0x585]
	0x03B6ACF0 LDR X0, [X22]
	0x03B6ACF4 LDR W8, [X0 + 0xE0]
	0x03B6ACF8 CBNZ W8, 0x3B6AD00
	0x03B6ACFC BL 0x1C16DFC
	0x03B6AD00 FMUL S1, S14, S14
	0x03B6AD04 FMOV S2, W31
	0x03B6AD08 FMUL S0, S12, S12
	0x03B6AD0C FADD S1, S1, S2
	0x03B6AD10 FADD S0, S0, S1
	0x03B6AD14 FSQRT S8, S0
	0x03B6AD18 FCMP S8, S9
	0x03B6AD1C B.MI 0x3B6AC24
	0x03B6AD20 LDRB W8, [X21 + 0x585]
	0x03B6AD24 FMOV S0, 0.5
	0x03B6AD28 STR S12, [X31 + 0x5C]
	0x03B6AD2C FMUL S12, S10, S0
	0x03B6AD30 FMUL S0, S8, S8
	0x03B6AD34 FMUL S9, S12, S0
	0x03B6AD38 FSUB S10, S8, S13
	0x03B6AD3C CBNZ W8, 0x3B6AD54
	0x03B6AD40 ADRP X0, 0x589000
	0x03B6AD44 LDR X0, [X0 + 0x5A8]
	0x03B6AD48 BL 0x1C16CF4
	0x03B6AD4C MOVZ W8, 0x1
	0x03B6AD50 STRB W8, [X21 + 0x585]
	0x03B6AD54 LDR X0, [X22]
	0x03B6AD58 FDIV S9, S9, S10
	0x03B6AD5C LDR W8, [X0 + 0xE0]
	0x03B6AD60 CBNZ W8, 0x3B6AD68
	0x03B6AD64 BL 0x1C16DFC
	0x03B6AD68 FCMP S13, 0x0
	0x03B6AD6C FSQRT S9, S9
	0x03B6AD70 B.PL 0x3B6ADBC
	0x03B6AD74 LDRB W8, [X21 + 0x585]
	0x03B6AD78 FMUL S0, S12, S8
	0x03B6AD7C FMUL S10, S8, S0
	0x03B6AD80 FNEG S12, S13
	0x03B6AD84 CBNZ W8, 0x3B6AD9C
	0x03B6AD88 ADRP X0, 0x589000
	0x03B6AD8C LDR X0, [X0 + 0x5A8]
	0x03B6AD90 BL 0x1C16CF4
	0x03B6AD94 MOVZ W8, 0x1
	0x03B6AD98 STRB W8, [X21 + 0x585]
	0x03B6AD9C LDR X0, [X22]
	0x03B6ADA0 FDIV S10, S10, S12
	0x03B6ADA4 LDR W8, [X0 + 0xE0]
	0x03B6ADA8 CBNZ W8, 0x3B6ADB0
	0x03B6ADAC BL 0x1C16DFC
	0x03B6ADB0 FSQRT S10, S10
	0x03B6ADB4 FMOV S12, W31
	0x03B6ADB8 B 0x3B6ADD8
	0x03B6ADBC FADD S10, S9, S9
	0x03B6ADC0 FDIV S0, S8, S10
	0x03B6ADC4 FMUL S1, S12, S0
	0x03B6ADC8 FMUL S0, S0, S1
	0x03B6ADCC FADD S0, S13, S0
	0x03B6ADD0 FMUL S0, S10, S0
	0x03B6ADD4 FDIV S12, S0, S8
	0x03B6ADD8 LDRB W8, [X21 + 0x585]
	0x03B6ADDC CBNZ W8, 0x3B6ADF4
	0x03B6ADE0 ADRP X0, 0x589000
	0x03B6ADE4 LDR X0, [X0 + 0x5A8]
	0x03B6ADE8 BL 0x1C16CF4
	0x03B6ADEC MOVZ W8, 0x1
	0x03B6ADF0 STRB W8, [X21 + 0x585]
	0x03B6ADF4 LDR X0, [X22]
	0x03B6ADF8 LDR W8, [X0 + 0xE0]
	0x03B6ADFC CBZ W8, 0x3B6AE10
	0x03B6AE00 FMUL S0, S9, S9
	0x03B6AE04 FADD S0, S0, S0
	0x03B6AE08 FSQRT S13, S0
	0x03B6AE0C B 0x3B6AE3C
	0x03B6AE10 BL 0x1C16DFC
	0x03B6AE14 LDRB W8, [X21 + 0x585]
	0x03B6AE18 FMUL S0, S9, S9
	0x03B6AE1C FADD S0, S0, S0
	0x03B6AE20 FSQRT S13, S0
	0x03B6AE24 CBNZ W8, 0x3B6AE3C
	0x03B6AE28 ADRP X0, 0x589000
	0x03B6AE2C LDR X0, [X0 + 0x5A8]
	0x03B6AE30 BL 0x1C16CF4
	0x03B6AE34 MOVZ W8, 0x1
	0x03B6AE38 STRB W8, [X21 + 0x585]
	0x03B6AE3C LDR X0, [X22]
	0x03B6AE40 LDR W8, [X0 + 0xE0]
	0x03B6AE44 CBZ W8, 0x3B6AE50
	0x03B6AE48 MOV W8, W31
	0x03B6AE4C B 0x3B6AE60
	0x03B6AE50 BL 0x1C16DFC
	0x03B6AE54 LDRB W8, [X21 + 0x585]
	0x03B6AE58 CMP W8, 0x0
	0x03B6AE5C CSET W8, EQ
	0x03B6AE60 FMUL S0, S10, S10
	0x03B6AE64 FMUL S1, S12, S12
	0x03B6AE68 LDR V3, [X20 + 0x4]
	0x03B6AE6C FADD S0, S0, S1
	0x03B6AE70 FSQRT S0, S0
	0x03B6AE74 FMOV S4, 0.25
	0x03B6AE78 FABD S0, S0, S0
	0x03B6AE7C FMUL S1, S0, S4
	0x03B6AE80 FCMP S3, 0x0
	0x03B6AE84 FABD S2, S13, S13
	0x03B6AE88 FCSEL S0, S0, S1, HI
	0x03B6AE8C FCMP S0, S2
	0x03B6AE90 FCSEL S10, S9, S10, GT
	0x03B6AE94 FCSEL S9, S9, S12, GT
	0x03B6AE98 CBZ W8, 0x3B6AEB0
	0x03B6AE9C ADRP X0, 0x589000
	0x03B6AEA0 LDR X0, [X0 + 0x5A8]
	0x03B6AEA4 BL 0x1C16CF4
	0x03B6AEA8 MOVZ W8, 0x1
	0x03B6AEAC STRB W8, [X21 + 0x585]
	0x03B6AEB0 LDR X0, [X22]
	0x03B6AEB4 LDR W8, [X0 + 0xE0]
	0x03B6AEB8 CBZ W8, 0x3B6AEC4
	0x03B6AEBC MOV W8, W31
	0x03B6AEC0 B 0x3B6AED4
	0x03B6AEC4 BL 0x1C16DFC
	0x03B6AEC8 LDRB W8, [X21 + 0x585]
	0x03B6AECC CMP W8, 0x0
	0x03B6AED0 CSET W8, EQ
	0x03B6AED4 FMUL S0, S10, S10
	0x03B6AED8 FMUL S1, S9, S9
	0x03B6AEDC FADD S12, S0, S1
	0x03B6AEE0 CBZ W8, 0x3B6AEF8
	0x03B6AEE4 ADRP X0, 0x589000
	0x03B6AEE8 LDR X0, [X0 + 0x5A8]
	0x03B6AEEC BL 0x1C16CF4
	0x03B6AEF0 MOVZ W8, 0x1
	0x03B6AEF4 STRB W8, [X21 + 0x585]
	0x03B6AEF8 LDR X0, [X22]
	0x03B6AEFC FSQRT S12, S12
	0x03B6AF00 FMOV S13, 1
	0x03B6AF04 LDR W8, [X0 + 0xE0]
	0x03B6AF08 CBZ W8, 0x3B6AF14
	0x03B6AF0C MOV W8, W31
	0x03B6AF10 B 0x3B6AF24
	0x03B6AF14 BL 0x1C16DFC
	0x03B6AF18 LDRB W8, [X21 + 0x585]
	0x03B6AF1C CMP W8, 0x0
	0x03B6AF20 CSET W8, EQ
	0x03B6AF24 LDR V0, [X31 + 0x10]
	0x03B6AF28 MOVZ W10, 0x7F800000
	0x03B6AF2C FDIV S13, S13, S12
	0x03B6AF30 FMUL S0, S11, S0
	0x03B6AF34 FMOV W9, S0
	0x03B6AF38 AND W9, W9, 0x7FFFFFFF
	0x03B6AF3C FCMP S12, S0
	0x03B6AF40 CCMP W9, W10, 0x2, PL
	0x03B6AF44 FCSEL S12, S12, S0, HI
	0x03B6AF48 CBZ W8, 0x3B6AF60
	0x03B6AF4C ADRP X0, 0x589000
	0x03B6AF50 LDR X0, [X0 + 0x5A8]
	0x03B6AF54 BL 0x1C16CF4
	0x03B6AF58 MOVZ W8, 0x1
	0x03B6AF5C STRB W8, [X21 + 0x585]
	0x03B6AF60 LDR X0, [X22]
	0x03B6AF64 FMUL S10, S10, S13
	0x03B6AF68 LDR W8, [X0 + 0xE0]
	0x03B6AF6C CBNZ W8, 0x3B6AF74
	0x03B6AF70 BL 0x1C16DFC
	0x03B6AF74 LDR V1, [X31 + 0x5C]
	0x03B6AF78 FMOV S0, 1
	0x03B6AF7C FDIV S0, S0, S8
	0x03B6AF80 FMUL S14, S14, S0
	0x03B6AF84 FMUL S8, S1, S0
	0x03B6AF88 LDP S0, S1, [X31 + 0x4]
	0x03B6AF8C LDR V2, [X31 + 0xC]
	0x03B6AF90 MOV X0, X31
	0x03B6AF94 FMUL S13, S9, S13
	0x03B6AF98 FMUL S15, S10, S12
	0x03B6AF9C BL 0x3887BE0
	0x03B6AFA0 LDRB W8, [X21 + 0x585]
	0x03B6AFA4 MOV V9.16B, V1.16B
	0x03B6AFA8 MOV V10.16B, V2.16B
	0x03B6AFAC STR S0, [X31 + 0x5C]
	0x03B6AFB0 CBNZ W8, 0x3B6AFC8
	0x03B6AFB4 ADRP X0, 0x589000
	0x03B6AFB8 LDR X0, [X0 + 0x5A8]
	0x03B6AFBC BL 0x1C16CF4
	0x03B6AFC0 MOVZ W8, 0x1
	0x03B6AFC4 STRB W8, [X21 + 0x585]
	0x03B6AFC8 LDR X0, [X22]
	0x03B6AFCC FMUL S13, S13, S12
	0x03B6AFD0 FMUL S14, S14, S15
	0x03B6AFD4 FMUL S8, S8, S15
	0x03B6AFD8 LDR W8, [X0 + 0xE0]
	0x03B6AFDC CBNZ W8, 0x3B6AFE4
	0x03B6AFE0 BL 0x1C16DFC
	0x03B6AFE4 FMUL S1, S14, S14
	0x03B6AFE8 FMUL S2, S13, S13
	0x03B6AFEC FMUL S0, S8, S8
	0x03B6AFF0 FADD S1, S2, S1
	0x03B6AFF4 FADD S0, S0, S1
	0x03B6AFF8 FMOV S3, 1
	0x03B6AFFC FSQRT S12, S0
	0x03B6B000 FDIV S2, S3, S12
	0x03B6B004 FMUL S0, S14, S2
	0x03B6B008 FMUL S1, S13, S2
	0x03B6B00C FMUL S2, S8, S2
	0x03B6B010 MOV X0, X31
	0x03B6B014 BL 0x3887BE0
	0x03B6B018 LDR V13, [X31 + 0x14]
	0x03B6B01C MOV V3.16B, V0.16B
	0x03B6B020 LDR V0, [X31 + 0x5C]
	0x03B6B024 MOV V4.16B, V1.16B
	0x03B6B028 MOV V5.16B, V2.16B
	0x03B6B02C MOV V1.16B, V9.16B
	0x03B6B030 MOV V2.16B, V10.16B
	0x03B6B034 MOV V6.16B, V13.16B
	0x03B6B038 MOV X0, X31
	0x03B6B03C BL 0x3C28A58
	0x03B6B040 LDRB W8, [X21 + 0x585]
	0x03B6B044 MOV V8.16B, V0.16B
	0x03B6B048 MOV V9.16B, V1.16B
	0x03B6B04C MOV V10.16B, V2.16B
	0x03B6B050 CBNZ W8, 0x3B6B068
	0x03B6B054 ADRP X0, 0x588000
	0x03B6B058 LDR X0, [X0 + 0x5A8]
	0x03B6B05C BL 0x1C16CF4
	0x03B6B060 MOVZ W8, 0x1
	0x03B6B064 STRB W8, [X21 + 0x585]
	0x03B6B068 LDR X0, [X22]
	0x03B6B06C LDR W8, [X0 + 0xE0]
	0x03B6B070 CBNZ W8, 0x3B6B078
	0x03B6B074 BL 0x1C16DFC
	0x03B6B078 FSUB S0, S12, S11
	0x03B6B07C FMUL S0, S0, S13
	0x03B6B080 FADD S0, S11, S0
	0x03B6B084 FMUL S1, S0, S8
	0x03B6B088 FMUL S2, S0, S9
	0x03B6B08C FMUL S0, S0, S10
	0x03B6B090 STP S1, S2, [X19]
	0x03B6B094 STR S0, [X19 + 0x8]
	0x03B6B098 B 0x3B6AC88
	0x03B6B09C LDR X0, [X0 + 0x10]
	0x03B6B0A0 RET
	0x03B6B0A4 STR X1, [X0 + 0x10]
	0x03B6B0A8 RET
	0x03B6B0AC LDRB W0, [X0 + 0x18]
	0x03B6B0B0 RET
	0x03B6B0B4 AND W8, W1, 0x1
	0x03B6B0B8 STRB W8, [X0 + 0x18]
	0x03B6B0BC RET
	0x03B6B0C0 LDRB W0, [X0 + 0x19]
	0x03B6B0C4 RET
	0x03B6B0C8 AND W8, W1, 0x1
	0x03B6B0CC STRB W8, [X0 + 0x19]
	0x03B6B0D0 RET
	0x03B6B0D4 MOV X1, X31
	0x03B6B0D8 B 0x33BDD8C
	0x03B6B0DC STP X30, X21, [X31 - 0x20]!
	0x03B6B0E0 STP X20, X19, [X31 + 0x10]
	0x03B6B0E4 LDR X8, [X2 + 0x8]
	0x03B6B0E8 STP X1, X2, [X0 + 0x20]
	0x03B6B0EC MOV X19, X0
	0x03B6B0F0 MOV X20, X1
	0x03B6B0F4 STR X8, [X0 + 0x10]
	0x03B6B0F8 LDRB W21, [X2 + 0x52]
	0x03B6B0FC STR X0, [X0 + 0x40]
	0x03B6B100 MOV X0, X2
	0x03B6B104 BL 0x1C16D84
	0x03B6B108 TBZ X0, 0x0, 0x3B6B120
	0x03B6B10C CMP W21, 0xA
	0x03B6B110 B.NE 0x3B6B13C
	0x03B6B114 ADRP X8, 0xFFFFFFFFFE092000
	0x03B6B118 ADD X8, X8, 0xD70
	0x03B6B11C B 0x3B6B130
	0x03B6B120 CMP W21, 0x9
	0x03B6B124 B.NE 0x3B6B138
	0x03B6B128 ADRP X8, 0xFFFFFFFFFE092000
	0x03B6B12C ADD X8, X8, 0xD54
	0x03B6B130 STR X8, [X19 + 0x18]
	0x03B6B134 B 0x3B6B14C
	0x03B6B138 CBZ X20, 0x3B6B164
	0x03B6B13C LDR X8, [X19 + 0x10]
	0x03B6B140 LDR X9, [X19 + 0x20]
	0x03B6B144 STR X8, [X19 + 0x18]
	0x03B6B148 STR X9, [X19 + 0x40]
	0x03B6B14C ADRP X8, 0xFFFFFFFFFE092000
	0x03B6B150 ADD X8, X8, 0xC9C
	0x03B6B154 STR X8, [X19 + 0x38]
	0x03B6B158 LDP X20, X19, [X31 + 0x10]
	0x03B6B15C LDP X30, X21, [X31], #0x20
	0x03B6B160 RET
	0x03B6B164 ADRP X1, 0xFFFFFFFFFCFB0000
	0x03B6B168 ADD X1, X1, 0xEE3
	0x03B6B16C MOV X0, X31
	0x03B6B170 BL 0x1C16F3C
	0x03B6B174 MOV X1, X31
	0x03B6B178 BL 0x1C16DEC
	0x03B6B17C LDR X8, [X0 + 0x40]
	0x03B6B180 LDR X6, [X0 + 0x18]
	0x03B6B184 LDR X5, [X0 + 0x28]
	0x03B6B188 MOV X0, X8
	0x03B6B18C BR X6
	0x03B6B190 SUB X31, X31, 0xD0
	0x03B6B194 STR X30, [X31 + 0x70]
	0x03B6B198 STP X28, X27, [X31 + 0x80]
	0x03B6B19C STP X26, X25, [X31 + 0x90]
	0x03B6B1A0 STP X24, X23, [X31 + 0xA0]
	0x03B6B1A4 STP X22, X21, [X31 + 0xB0]
	0x03B6B1A8 STP X20, X19, [X31 + 0xC0]
	0x03B6B1AC STP S1, S0, [X31 + 0x78]
	0x03B6B1B0 STP S3, S2, [X31 + 0x68]
	0x03B6B1B4 ADRP X28, 0x877000
	0x03B6B1B8 STP S5, S4, [X31 + 0x60]
	0x03B6B1BC ADRP X26, 0x588000
	0x03B6B1C0 ADRP X27, 0x588000
	0x03B6B1C4 LDRB W8, [X28 + 0x9E3]
	0x03B6B1C8 LDR X26, [X26 + 0x5A0]
	0x03B6B1CC LDR X27, [X27 + 0xA90]
	0x03B6B1D0 MOV X19, X6
	0x03B6B1D4 MOV X20, X5
	0x03B6B1D8 MOV X21, X4
	0x03B6B1DC MOV X23, X3
	0x03B6B1E0 MOV X24, X2
	0x03B6B1E4 MOV X25, X1
	0x03B6B1E8 MOV X22, X0
	0x03B6B1EC TBNZ X8, 0x0, 0x3B6B210
	0x03B6B1F0 ADRP X0, 0x588000
	0x03B6B1F4 LDR X0, [X0 + 0xA90]
	0x03B6B1F8 BL 0x1C16CF4
	0x03B6B1FC ADRP X0, 0x588000
	0x03B6B200 LDR X0, [X0 + 0x5A0]
	0x03B6B204 BL 0x1C16CF4
	0x03B6B208 MOVZ W8, 0x1
	0x03B6B20C STRB W8, [X28 + 0x9E3]
	0x03B6B210 LDR X0, [X26]
	0x03B6B214 MOVI V0.2D, 0x0
	0x03B6B218 MOV X1, X25
	0x03B6B21C STP V0, V0, [X31 + 0x40]
	0x03B6B220 STP V0, V0, [X31 + 0x20]
	0x03B6B224 BL 0x1C16E04
	0x03B6B228 LDR X8, [X26]
	0x03B6B22C STR X0, [X31 + 0x8]
	0x03B6B230 MOV X1, X24
	0x03B6B234 MOV X0, X8
	0x03B6B238 BL 0x1C16E04
	0x03B6B23C LDR X8, [X26]
	0x03B6B240 STR X0, [X31 + 0x10]
	0x03B6B244 MOV X1, X23
	0x03B6B248 MOV X0, X8
	0x03B6B24C BL 0x1C16E04
	0x03B6B250 LDR X8, [X27]
	0x03B6B254 STR X0, [X31 + 0x18]
	0x03B6B258 ADD X1, X31, 0x7C
	0x03B6B25C MOV X0, X8
	0x03B6B260 BL 0x1C16E04
	0x03B6B264 LDR X8, [X27]
	0x03B6B268 STR X0, [X31 + 0x20]
	0x03B6B26C ADD X1, X31, 0x78
	0x03B6B270 MOV X0, X8
	0x03B6B274 BL 0x1C16E04
	0x03B6B278 LDR X8, [X27]
	0x03B6B27C STR X0, [X31 + 0x28]
	0x03B6B280 ADD X1, X31, 0x6C
	0x03B6B284 MOV X0, X8
	0x03B6B288 BL 0x1C16E04
	0x03B6B28C LDR X8, [X27]
	0x03B6B290 STR X0, [X31 + 0x30]
	0x03B6B294 ADD X1, X31, 0x68
	0x03B6B298 MOV X0, X8
	0x03B6B29C BL 0x1C16E04
	0x03B6B2A0 LDR X8, [X27]
	0x03B6B2A4 STR X0, [X31 + 0x38]
	0x03B6B2A8 ADD X1, X31, 0x64
	0x03B6B2AC MOV X0, X8
	0x03B6B2B0 BL 0x1C16E04
	0x03B6B2B4 LDR X8, [X27]
	0x03B6B2B8 STR X0, [X31 + 0x40]
	0x03B6B2BC ADD X1, X31, 0x60
	0x03B6B2C0 MOV X0, X8
	0x03B6B2C4 BL 0x1C16E04
	0x03B6B2C8 LDR X8, [X26]
	0x03B6B2CC STR X0, [X31 + 0x48]
	0x03B6B2D0 MOV X1, X21
	0x03B6B2D4 MOV X0, X8
	0x03B6B2D8 BL 0x1C16E04
	0x03B6B2DC STR X0, [X31 + 0x50]
	0x03B6B2E0 ADD X1, X31, 0x8
	0x03B6B2E4 MOV X0, X22
	0x03B6B2E8 MOV X2, X20
	0x03B6B2EC MOV X3, X19
	0x03B6B2F0 BL 0x1C16CB0
	0x03B6B2F4 LDP X20, X19, [X31 + 0xC0]
	0x03B6B2F8 LDP X22, X21, [X31 + 0xB0]
	0x03B6B2FC LDP X24, X23, [X31 + 0xA0]
	0x03B6B300 LDP X26, X25, [X31 + 0x90]
	0x03B6B304 LDP X28, X27, [X31 + 0x80]
	0x03B6B308 LDR X30, [X31 + 0x70]
	0x03B6B30C ADD X31, X31, 0xD0
	0x03B6B310 RET
	0x03B6B314 MOV X0, X1
	0x03B6B318 MOV X1, X31
	0x03B6B31C B 0x1C16CB4
	0x03B6B320 STP X30, X23, [X31 - 0x30]!
	0x03B6B324 STP X22, X21, [X31 + 0x10]
	0x03B6B328 STP X20, X19, [X31 + 0x20]
	0x03B6B32C ADRP X20, 0x877000
	0x03B6B330 ADRP X23, 0x5F0000
	0x03B6B334 LDRB W8, [X20 + 0x9E4]
	0x03B6B338 LDR X23, [X23 + 0x530]
	0x03B6B33C MOV X19, X0
	0x03B6B340 TBNZ X8, 0x0, 0x3B6B37C
	0x03B6B344 ADRP X0, 0x5B0000
	0x03B6B348 LDR X0, [X0 + 0x848]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+104], X25
	012 Move [X31+112], X24
	013 Move [X31+120], X23
	014 Move [X31+128], X22
	015 Move [X31+136], X21
	016 Move [X31+144], X20
	017 Move [X31+152], X19
	018 Move X22, 0x879000
	019 Move W8, [X22+2530]
	020 Move W21, W2
	021 Move V8, V0
	022 Move X20, X1
	023 Move X19, X0
	024 Move TEMP, X8
	025 And TEMP, TEMP, 1
	026 Compare TEMP, 1
	027 JumpIfEqual {36}
	028 Move X0, 0x5F2000
	029 Move X0, [X0+1288]
	030 Call 0x1C17CF4
	031 Move X0, 0x5F1000
	032 Move X0, [X0+808]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X22+2530], W8
	036 Move W8, [X19+26]
	037 Compare W8, 0
	038 JumpIfEqual {483}
	039 Move TEMP, X21
	040 And TEMP, TEMP, 1
	041 Compare TEMP, 1
	042 JumpIfNotEqual {44}
	043 Move W24, W31
	044 Compare X20, 0
	045 JumpIfEqual {504}
	046 Move X0, X20
	047 Move X1, X31
	048 Call Transform.get_forward, X0
	049 Move X0, [X19+72]
	050 Compare X0, 0
	051 JumpIfEqual {504}
	052 Move X1, X31
	053 Move V9, V0
	054 Move V10, V1
	055 Move V11, V2
	056 Move [X31+28], S8
	057 Call Transform.get_forward, X0
	058 Move X21, 0x86F000
	059 Move W8, [X21+2596]
	060 Move V12, V0
	061 Move V13, V1
	062 Move V14, V2
	063 Compare W8, 0
	064 JumpIfNotEqual {70}
	065 Move X0, 0x58A000
	066 Move X0, [X0+1448]
	067 Call 0x1C17CF4
	068 Move W8, 1
	069 Move [X21+2596], W8
	070 Move X21, 0x58A000
	071 Move X21, [X21+1448]
	072 Multiply S0, S9, S9
	073 Multiply S1, S10, S10
	074 Add S0, S0, S1
	075 Move X0, [X21]
	076 Multiply S1, S11, S11
	077 Add S15, S1, S0
	078 Multiply S0, S12, S12
	079 Move W8, [X0+224]
	080 Multiply S1, S13, S13
	081 Add S0, S0, S1
	082 Multiply S1, S14, S14
	083 Add S8, S1, S0
	084 Compare W8, 0
	085 JumpIfNotEqual {87}
	086 Call 0x1C17DFC
	087 Move X8, -50855936
	088 Move V1, [X8+4072]
	089 Multiply S0, S15, S8
	090 NotImplemented "Instruction FSQRT not yet implemented."
	091 NotImplemented "Instruction FCMP not yet implemented."
	092 Move S1, W31
	093 Move X0, [X21]
	094 Multiply S1, S9, S12
	095 Multiply S2, S10, S13
	096 Multiply S3, S11, S14
	097 Add S1, S1, S2
	098 Add S1, S3, S1
	099 Move W8, [X0+224]
	100 NotImplemented "Instruction FDIV not yet implemented."
	101 Move S1, 1
	102 Move S2, -1
	103 NotImplemented "Instruction FMIN not yet implemented."
	104 NotImplemented "Instruction FCMP not yet implemented."
	105 NotImplemented "Instruction FCSEL not yet implemented."
	106 Compare W8, 0
	107 JumpIfNotEqual {109}
	108 Call 0x1C17DFC
	109 NotImplemented "Instruction FCVT not yet implemented."
	110 Call 0x3EB2B80
	111 Move X8, -50851840
	112 Move V1, [X8+1096]
	113 NotImplemented "Instruction INVALID not yet implemented."
	114 Multiply S1, S0, S1
	115 Move V0, [X31+28]
	116 NotImplemented "Instruction FCMP not yet implemented."
	117 NotImplemented "Instruction CSET not yet implemented."
	118 Move X21, [X19+40]
	119 Compare X21, 0
	120 JumpIfEqual {504}
	121 Move X23, 0x5F1000
	122 Move X8, [X21]
	123 Move X23, [X23+808]
	124 NotImplemented "Instruction LDRH not yet implemented."
	125 Move X1, [X23]
	126 Compare X9, 0
	127 JumpIfEqual {134}
	128 Move X10, [X8+176]
	129 Add X10, X10, 8
	130 NotImplemented "Instruction LDUR not yet implemented."
	131 NotImplemented "Instruction CMP not yet implemented."
	132 Subtract X9, X9, 1
	133 Add X10, X10, 16
	134 Move W2, 5
	135 Move X0, X21
	136 Call 0x1C5D788
	137 Move W9, [X10]
	138 Add W9, W9, 5
	139 Add X8, X8, W9
	140 Add X0, X8, 312
	141 Move X8, [X0]
	142 Move X1, [X0+8]
	143 Move X0, X21
	144 NotImplemented "Instruction BLR not yet implemented."
	145 Move W8, [X19+25]
	146 Move TEMP, X0
	147 And TEMP, TEMP, 1
	148 Compare TEMP, 1
	149 JumpIfEqual {299}
	150 Compare W24, 0
	151 JumpIfEqual {188}
	152 Compare W8, 0
	153 JumpIfNotEqual {297}
	154 Move W8, [X19+64]
	155 Compare W8, 0
	156 JumpIfEqual {168}
	157 Move X8, [X19+56]
	158 Compare X8, 0
	159 JumpIfEqual {504}
	160 Move W9, [X8+144]
	161 Move W10, 1
	162 Move [X19+96], W9
	163 Move X9, [X8+152]
	164 Move [X19+88], X9
	165 Move [X8+144], W10
	166 Move X9, [X19+120]
	167 Move [X8+152], X9
	168 Move X21, [X19+32]
	169 Compare X21, 0
	170 JumpIfEqual {504}
	171 Move X25, 0x5F2000
	172 Move X8, [X21]
	173 Move X22, [X19+104]
	174 Move X25, [X25+1288]
	175 NotImplemented "Instruction LDRH not yet implemented."
	176 Move X1, [X25]
	177 Compare X9, 0
	178 JumpIfEqual {185}
	179 Move X10, [X8+176]
	180 Add X10, X10, 8
	181 NotImplemented "Instruction LDUR not yet implemented."
	182 NotImplemented "Instruction CMP not yet implemented."
	183 Subtract X9, X9, 1
	184 Add X10, X10, 16
	185 Move W2, 2
	186 Move X0, X21
	187 Call 0x1C5D788
	188 Compare W8, 0
	189 JumpIfEqual {297}
	190 Move W8, [X19+64]
	191 Compare W8, 0
	192 JumpIfEqual {200}
	193 Move X8, [X19+56]
	194 Compare X8, 0
	195 JumpIfEqual {504}
	196 Move W9, [X19+96]
	197 Move [X8+144], W9
	198 Move X9, [X19+88]
	199 Move [X8+152], X9
	200 Move X21, [X19+32]
	201 Compare X21, 0
	202 JumpIfEqual {504}
	203 Move X25, 0x5F2000
	204 Move X8, [X21]
	205 Move X22, [X19+72]
	206 Move X25, [X25+1288]
	207 NotImplemented "Instruction LDRH not yet implemented."
	208 Move X1, [X25]
	209 Compare X9, 0
	210 JumpIfEqual {217}
	211 Move X10, [X8+176]
	212 Add X10, X10, 8
	213 NotImplemented "Instruction LDUR not yet implemented."
	214 NotImplemented "Instruction CMP not yet implemented."
	215 Subtract X9, X9, 1
	216 Add X10, X10, 16
	217 Move W2, 2
	218 Move X0, X21
	219 Call 0x1C5D788
	220 Move W9, [X10]
	221 Add W9, W9, 2
	222 Add X8, X8, W9
	223 Add X0, X8, 312
	224 Move X8, [X0]
	225 Move X2, [X0+8]
	226 Move X0, X21
	227 Move X1, X22
	228 NotImplemented "Instruction BLR not yet implemented."
	229 Move X21, [X19+32]
	230 Compare X21, 0
	231 JumpIfEqual {504}
	232 Move X8, [X21]
	233 Move X22, [X19+112]
	234 Move X1, [X25]
	235 NotImplemented "Instruction LDRH not yet implemented."
	236 Compare X9, 0
	237 JumpIfEqual {244}
	238 Move X10, [X8+176]
	239 Add X10, X10, 8
	240 NotImplemented "Instruction LDUR not yet implemented."
	241 NotImplemented "Instruction CMP not yet implemented."
	242 Subtract X9, X9, 1
	243 Add X10, X10, 16
	244 Move W2, 3
	245 Move X0, X21
	246 Call 0x1C5D788
	247 Move W9, [X10]
	248 Add W9, W9, 2
	249 Add X8, X8, W9
	250 Add X0, X8, 312
	251 Move X8, [X0]
	252 Move X2, [X0+8]
	253 Move X0, X21
	254 Move X1, X22
	255 NotImplemented "Instruction BLR not yet implemented."
	256 Move X21, [X19+32]
	257 Compare X21, 0
	258 JumpIfEqual {504}
	259 Move X8, [X21]
	260 Move X22, [X19+80]
	261 Move X1, [X25]
	262 NotImplemented "Instruction LDRH not yet implemented."
	263 Compare X9, 0
	264 JumpIfEqual {271}
	265 Move X10, [X8+176]
	266 Add X10, X10, 8
	267 NotImplemented "Instruction LDUR not yet implemented."
	268 NotImplemented "Instruction CMP not yet implemented."
	269 Subtract X9, X9, 1
	270 Add X10, X10, 16
	271 Move W2, 3
	272 Move X0, X21
	273 Call 0x1C5D788
	274 Move W9, [X10]
	275 Add W9, W9, 3
	276 Add X8, X8, W9
	277 Add X0, X8, 312
	278 Move X8, [X0]
	279 Move X2, [X0+8]
	280 Move X0, X21
	281 Move X1, X22
	282 NotImplemented "Instruction BLR not yet implemented."
	283 Move W9, [X10]
	284 Add W9, W9, 3
	285 Add X8, X8, W9
	286 Add X0, X8, 312
	287 Move X8, [X0]
	288 Move X2, [X0+8]
	289 Move X0, X21
	290 Move X1, X22
	291 NotImplemented "Instruction BLR not yet implemented."
	292 Move W8, [X19+24]
	293 Compare W8, 0
	294 JumpIfNotEqual {297}
	295 Move W8, 1
	296 Move [X19+48], W8
	297 Move W8, W24
	298 Move [X19+25], W24
	299 Compare W8, 0
	300 JumpIfEqual {483}
	301 Compare X20, 0
	302 JumpIfEqual {504}
	303 Move X0, X20
	304 Move X1, X31
	305 Call Transform.get_position, X0
	306 Move X0, X20
	307 Move X1, X31
	308 Move V10, V0
	309 Move V9, V1
	310 Move V8, V2
	311 Call Transform.get_rotation, X0
	312 Move W8, [X19+24]
	313 Compare W8, 0
	314 JumpIfNotEqual {471}
	315 Move X20, [X19+40]
	316 Compare X20, 0
	317 JumpIfEqual {504}
	318 Move X8, [X20]
	319 Move X1, [X23]
	320 Move V11, V0
	321 Move V12, V1
	322 NotImplemented "Instruction LDRH not yet implemented."
	323 Move V13, V2
	324 Move V14, V3
	325 Compare X9, 0
	326 JumpIfEqual {333}
	327 Move X10, [X8+176]
	328 Add X10, X10, 8
	329 NotImplemented "Instruction LDUR not yet implemented."
	330 NotImplemented "Instruction CMP not yet implemented."
	331 Subtract X9, X9, 1
	332 Add X10, X10, 16
	333 Move W2, 5
	334 Move X0, X20
	335 Call 0x1C5D788
	336 Move W9, [X10]
	337 Add W9, W9, 5
	338 Add X8, X8, W9
	339 Add X0, X8, 312
	340 Move X8, [X0]
	341 Move X1, [X0+8]
	342 Move X0, X20
	343 NotImplemented "Instruction BLR not yet implemented."
	344 Move TEMP, X0
	345 And TEMP, TEMP, 1
	346 Compare TEMP, 1
	347 JumpIfNotEqual {471}
	348 Move X20, [X19+40]
	349 Compare X20, 0
	350 JumpIfEqual {504}
	351 Move X8, [X20]
	352 Move X1, [X23]
	353 NotImplemented "Instruction LDRH not yet implemented."
	354 Compare X9, 0
	355 JumpIfEqual {362}
	356 Move X10, [X8+176]
	357 Add X10, X10, 8
	358 NotImplemented "Instruction LDUR not yet implemented."
	359 NotImplemented "Instruction CMP not yet implemented."
	360 Subtract X9, X9, 1
	361 Add X10, X10, 16
	362 Move W2, 4
	363 Move X0, X20
	364 Call 0x1C5D788
	365 Move W9, [X10]
	366 Add W9, W9, 4
	367 Add X8, X8, W9
	368 Add X0, X8, 312
	369 Move X8, [X0]
	370 Move X1, [X0+8]
	371 Move X0, X20
	372 NotImplemented "Instruction BLR not yet implemented."
	373 Move TEMP, X0
	374 And TEMP, TEMP, 1
	375 Compare TEMP, 1
	376 JumpIfNotEqual {471}
	377 Move X0, [X19+112]
	378 Compare X0, 0
	379 JumpIfEqual {504}
	380 Move X1, X31
	381 Call Transform.get_position, X0
	382 Move X20, 0x86E000
	383 Move W8, [X20+1924]
	384 Move V15, V0
	385 Move [X31+24], S2
	386 Move [X31+32], S1
	387 Compare W8, 0
	388 JumpIfNotEqual {394}
	389 Move X0, 0x589000
	390 Move X0, [X0+1448]
	391 Call 0x1C17CF4
	392 Move W8, 1
	393 Move [X20+1924], W8
	394 Move X8, 0x589000
	395 Move X8, [X8+1448]
	396 Move X0, [X8]
	397 Move W8, [X0+224]
	398 Compare W8, 0
	399 JumpIfNotEqual {401}
	400 Call 0x1C17DFC
	401 Move X0, [X19+72]
	402 Compare X0, 0
	403 JumpIfEqual {504}
	404 Move X20, [X19+104]
	405 Move X1, X31
	406 Call Transform.get_position, X0
	407 Move X0, [X19+72]
	408 Move [X31+16], S1
	409 Move [X31+24], S0
	410 Move [X31+12], S2
	411 Compare X0, 0
	412 JumpIfEqual {504}
	413 Move S2, [X31+24]
	414 Move S1, [X31+28]
	415 Subtract S0, S15, S10
	416 Multiply S0, S0, S0
	417 Move X1, X31
	418 Subtract S1, S1, S9
	419 Subtract S2, S2, S8
	420 Multiply S1, S1, S1
	421 Multiply S2, S2, S2
	422 Add S0, S0, S1
	423 Add S0, S2, S0
	424 NotImplemented "Instruction FSQRT not yet implemented."
	425 Add S0, S0, S0
	426 Move S1, 1
	427 NotImplemented "Instruction FMIN not yet implemented."
	428 Call Transform.get_rotation, X0
	429 Move V4, V11
	430 Move V5, V12
	431 Move V6, V13
	432 Move V7, V14
	433 Move X0, X31
	434 Move [X31], S15
	435 Call Quaternion.Lerp, X0, X1, V0
	436 Compare X20, 0
	437 JumpIfEqual {504}
	438 Move V7, V3
	439 Move S16, [X31+16]
	440 Move S3, [X31+20]
	441 Move V17, [X31+12]
	442 Move V4, V0
	443 Move V5, V1
	444 Move V6, V2
	445 Subtract S0, S10, S3
	446 Subtract S1, S9, S16
	447 Subtract S2, S8, S17
	448 Multiply S0, S15, S0
	449 Multiply S1, S15, S1
	450 Multiply S2, S15, S2
	451 Add S0, S3, S0
	452 Add S1, S16, S1
	453 Add S2, S17, S2
	454 Move X0, X20
	455 Move V3, V4
	456 Move V4, V5
	457 Move V5, V6
	458 Move V6, V7
	459 Move X1, X31
	460 Call Transform.SetPositionAndRotation, X0, X1, X2
	461 Move W8, [X19+64]
	462 Compare W8, 0
	463 JumpIfEqual {503}
	464 Move X0, [X19+56]
	465 Compare X0, 0
	466 JumpIfEqual {504}
	467 Move W1, 1
	468 Move X2, X31
	469 Move W19, 1
	470 Call Behaviour.set_enabled, X0, X1
	471 Move W8, [X19+64]
	472 Compare W8, 0
	473 JumpIfEqual {483}
	474 Move W8, [X19+24]
	475 Compare W8, 0
	476 JumpIfNotEqual {483}
	477 Move X0, [X19+56]
	478 Compare X0, 0
	479 JumpIfEqual {504}
	480 Move W1, W31
	481 Move X2, X31
	482 Call Behaviour.set_enabled, X0, X1
	483 Move W19, W31
	484 Move W0, W19
	485 Move X20, [X31+144]
	486 Move X19, [X31+152]
	487 Move X22, [X31+128]
	488 Move X21, [X31+136]
	489 Move X24, [X31+112]
	490 Move X23, [X31+120]
	491 Move X30, [X31+96]
	492 Move X25, [X31+104]
	493 Move D9, [X31+80]
	494 Move D8, [X31+88]
	495 Move D11, [X31+64]
	496 Move D10, [X31+72]
	497 Move D13, [X31+48]
	498 Move D12, [X31+56]
	499 Move D15, [X31+32]
	500 Move D14, [X31+40]
	501 Add X31, X31, 160
	502 Return X0
	503 Move W19, 1
	504 Call 0x1C17F20

Method: System.Void RestoreVisuals()

Disassembly:
	0x03B6AA00 LDP S0, S1, [X20]
	0x03B6AA04 LDR V2, [X20 + 0x8]
	0x03B6AA08 MOV X0, X31
	0x03B6AA0C BL 0x3887BE4
	0x03B6AA10 LDRB W8, [X21 + 0x585]
	0x03B6AA14 MOV V10.16B, V0.16B
	0x03B6AA18 MOV V13.16B, V1.16B
	0x03B6AA1C MOV V15.16B, V2.16B
	0x03B6AA20 CBNZ W8, 0x3B6AA38
	0x03B6AA24 ADRP X0, 0x589000
	0x03B6AA28 LDR X0, [X0 + 0x5A8]
	0x03B6AA2C BL 0x1C16CF4
	0x03B6AA30 MOVZ W8, 0x1
	0x03B6AA34 STRB W8, [X21 + 0x585]
	0x03B6AA38 LDR X0, [X22]
	0x03B6AA3C FSUB V0.2S, V8.2S, V11.2S
	0x03B6AA40 FSUB S8, S9, S12

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+48]
	004 Move X19, X0
	005 Compare W8, 0
	006 JumpIfEqual {19}
	007 Move W8, [X19+64]
	008 Compare W8, 0
	009 JumpIfEqual {19}
	010 Move W8, [X19+25]
	011 Compare W8, 0
	012 JumpIfNotEqual {19}
	013 Move X0, [X19+56]
	014 Compare X0, 0
	015 JumpIfEqual {23}
	016 Move W1, 1
	017 Move X2, X31
	018 Call Behaviour.set_enabled, X0, X1
	019 Move [X19+48], W31
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Return 
	023 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B6C0D4 B.CS 0x3B6C0E0
	0x03B6C0D8 MOV X0, X31

ISIL:
	001 Move X1, X31
	002 Call Object..ctor, X0
	003 Return 

