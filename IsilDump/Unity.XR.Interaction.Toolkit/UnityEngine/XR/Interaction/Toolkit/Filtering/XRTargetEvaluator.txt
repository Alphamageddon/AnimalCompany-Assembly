Type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator

Method: System.Boolean IsInstanceType(System.Type evaluatorType)

Disassembly:
	0x03BB7424 STR X30, [X31 - 0x40]!
	0x03BB7428 STP X24, X23, [X31 + 0x10]
	0x03BB742C STP X22, X21, [X31 + 0x20]
	0x03BB7430 STP X20, X19, [X31 + 0x30]
	0x03BB7434 ADRP X21, 0x82B000
	0x03BB7438 LDRB W8, [X21 + 0xD0A]
	0x03BB743C MOV X19, X1
	0x03BB7440 MOV X20, X0
	0x03BB7444 TBNZ X8, 0x0, 0x3BB745C
	0x03BB7448 ADRP X0, 0x5A6000
	0x03BB744C LDR X0, [X0 + 0x118]
	0x03BB7450 BL 0x1C16CF4
	0x03BB7454 MOVZ W8, 0x1
	0x03BB7458 STRB W8, [X21 + 0xD0A]
	0x03BB745C ADRP X24, 0x5A6000
	0x03BB7460 LDR X21, [X20 + 0x40]!
	0x03BB7464 LDR X24, [X24 + 0x118]
	0x03BB7468 MOV X0, X21
	0x03BB746C MOV X1, X19
	0x03BB7470 MOV X2, X31
	0x03BB7474 BL 0x33C0FDC
	0x03BB7478 CBZ X0, 0x3BB7498
	0x03BB747C LDR X23, [X24]
	0x03BB7480 MOV X22, X0
	0x03BB7484 MOV X1, X23
	0x03BB7488 BL 0x1C16E00
	0x03BB748C MOV X1, X0
	0x03BB7490 CBNZ X0, 0x3BB749C
	0x03BB7494 B 0x3BB74C8
	0x03BB7498 MOV X1, X31
	0x03BB749C MOV X0, X20
	0x03BB74A0 MOV X2, X21
	0x03BB74A4 BL 0x1C24138
	0x03BB74A8 CMP X21, X0
	0x03BB74AC MOV X21, X0
	0x03BB74B0 B.NE 0x3BB7468
	0x03BB74B4 LDP X20, X19, [X31 + 0x30]
	0x03BB74B8 LDP X22, X21, [X31 + 0x20]
	0x03BB74BC LDP X24, X23, [X31 + 0x10]
	0x03BB74C0 LDR X30, [X31], #0x40
	0x03BB74C4 RET
	0x03BB74C8 MOV X0, X22
	0x03BB74CC MOV X1, X23
	0x03BB74D0 BL 0x1C171E0
	0x03BB74D4 LDRB W8, [X0 + 0x31]
	0x03BB74D8 CBZ W8, 0x3BB74E4
	0x03BB74DC MOV W0, W31
	0x03BB74E0 RET
	0x03BB74E4 MOV X1, X31
	0x03BB74E8 B 0x3C32454
	0x03BB74EC SUB X31, X31, 0x40
	0x03BB74F0 STR X30, [X31 + 0x10]
	0x03BB74F4 STP X22, X21, [X31 + 0x20]
	0x03BB74F8 STP X20, X19, [X31 + 0x30]
	0x03BB74FC ADRP X21, 0x82B000
	0x03BB7500 ADRP X20, 0x5A6000
	0x03BB7504 LDRB W8, [X21 + 0xD0B]
	0x03BB7508 LDR X20, [X20 + 0x138]
	0x03BB750C MOV X19, X0
	0x03BB7510 TBNZ X8, 0x0, 0x3BB7558
	0x03BB7514 ADRP X0, 0x5A6000
	0x03BB7518 LDR X0, [X0 + 0x148]
	0x03BB751C BL 0x1C16CF4

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x82C000
	006 Move X20, 0x53D000
	007 Move W8, [X21+3329]
	008 Move X20, [X20+1728]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x53D000
	015 Move X0, [X0+1728]
	016 Call 0x1C17CF4
	017 Move X0, 0x5A7000
	018 Move X0, [X0+224]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3329], W8
	022 Move X0, [X20]
	023 Move W8, [X0+224]
	024 Compare W8, 0
	025 JumpIfNotEqual {27}
	026 Call 0x1C17DFC
	027 Move X0, X19
	028 Move X1, X31
	029 Move X2, X31
	030 Call Type.op_Inequality, X0, X1
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {60}
	035 Compare X19, 0
	036 JumpIfEqual {88}
	037 Move X0, X19
	038 Move X1, X31
	039 Call Type.get_IsInterface, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {60}
	044 Move X0, X19
	045 Move X1, X31
	046 Call Type.get_IsAbstract, X0
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {60}
	051 Move X8, [X19]
	052 Move X0, X19
	053 Move X9, [X8+968]
	054 Move X1, [X8+976]
	055 NotImplemented "Instruction BLR not yet implemented."
	056 Move TEMP, X0
	057 And TEMP, TEMP, 1
	058 Compare TEMP, 1
	059 JumpIfNotEqual {66}
	060 Move X20, [X31+16]
	061 Move X19, [X31+24]
	062 Move W0, W31
	063 Move X30, [X31+32]
	064 Move X21, [X31+40]
	065 Return X0
	066 Move X8, 0x5A7000
	067 Move X0, [X20]
	068 Move X8, [X8+224]
	069 Move W9, [X0+224]
	070 Move X20, [X8]
	071 Compare W9, 0
	072 JumpIfNotEqual {74}
	073 Call 0x1C17DFC
	074 Move X0, X20
	075 Move X1, X31
	076 Call Type.GetTypeFromHandle, X0
	077 Compare X0, 0
	078 JumpIfEqual {88}
	079 Move X8, [X0]
	080 Move X1, X19
	081 Move X20, [X31+16]
	082 Move X19, [X31+24]
	083 Move X3, [X8+680]
	084 Move X2, [X8+688]
	085 Move X30, [X31+32]
	086 Move X21, [X31+40]
	087 CallNoReturn X3
	088 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetEvaluator CreateInstance(System.Type evaluatorType, UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetFilter filter)

Disassembly:
	0x03BB7520 ADRP X0, 0x5A6000
	0x03BB7524 LDR X0, [X0 + 0x140]
	0x03BB7528 BL 0x1C16CF4
	0x03BB752C ADRP X0, 0x5A6000
	0x03BB7530 LDR X0, [X0 + 0x150]
	0x03BB7534 BL 0x1C16CF4
	0x03BB7538 ADRP X0, 0x5A6000
	0x03BB753C LDR X0, [X0 + 0x158]
	0x03BB7540 BL 0x1C16CF4
	0x03BB7544 ADRP X0, 0x5A6000
	0x03BB7548 LDR X0, [X0 + 0x138]
	0x03BB754C BL 0x1C16CF4
	0x03BB7550 MOVZ W8, 0x1
	0x03BB7554 STRB W8, [X21 + 0xD0B]
	0x03BB7558 MOVZ W8, 0x1
	0x03BB755C STR X31, [X31 + 0x18]
	0x03BB7560 STP X31, X31, [X31]
	0x03BB7564 STRB W8, [X19 + 0x30]
	0x03BB7568 LDR X0, [X20]
	0x03BB756C LDR W8, [X0 + 0xE0]
	0x03BB7570 CBNZ W8, 0x3BB757C
	0x03BB7574 BL 0x1C16DFC
	0x03BB7578 LDR X0, [X20]
	0x03BB757C LDR X8, [X0 + 0xB8]
	0x03BB7580 LDR X0, [X8]
	0x03BB7584 CBZ X0, 0x3BB762C
	0x03BB7588 ADRP X8, 0x5A6000
	0x03BB758C LDR X8, [X8 + 0x148]
	0x03BB7590 ADRP X21, 0x5A6000
	0x03BB7594 ADD X1, X31, 0x18
	0x03BB7598 LDR X2, [X8]
	0x03BB759C LDR X21, [X21 + 0x158]
	0x03BB75A0 BL 0x2EF1058
	0x03BB75A4 LDR X8, [X31 + 0x18]
	0x03BB75A8 STP X0, X1, [X31]
	0x03BB75AC MOV X0, X19
	0x03BB75B0 MOV X1, X8
	0x03BB75B4 BL 0x3BB76A0
	0x03BB75B8 LDR X8, [X31 + 0x18]
	0x03BB75BC CBZ X8, 0x3BB7604
	0x03BB75C0 ADRP X22, 0x5A6000
	0x03BB75C4 LDR X22, [X22 + 0x150]
	0x03BB75C8 MOV W20, W31
	0x03BB75CC LDR W9, [X8 + 0x18]
	0x03BB75D0 CMP W20, W9
	0x03BB75D4 B.GE 0x3BB7608
	0x03BB75D8 LDRB W9, [X19 + 0x30]
	0x03BB75DC CBZ W9, 0x3BB7608
	0x03BB75E0 LDR X2, [X22]
	0x03BB75E4 MOV X0, X8
	0x03BB75E8 MOV W1, W20

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x82C000
	006 Move W8, [X21+3330]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {18}
	013 Move X0, 0x5A7000
	014 Move X0, [X0+232]
	015 Call 0x1C17CF4
	016 Move W8, 1
	017 Move [X21+3330], W8
	018 Move X0, X20
	019 Call XRTargetEvaluator.IsInstanceType, X0
	020 Move TEMP, X0
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfNotEqual {37}
	024 Move X0, X20
	025 Move X1, X31
	026 Call Activator.CreateInstance, X0
	027 Compare X0, 0
	028 JumpIfEqual {38}
	029 Move X9, 0x5A7000
	030 Move X9, [X9+232]
	031 Move X10, [X0]
	032 Move X8, X0
	033 Move X9, [X9]
	034 Move W12, [X10+304]
	035 Move W11, [X9+304]
	036 NotImplemented "Instruction CMP not yet implemented."
	037 Move X0, X31
	038 Move X20, [X31+16]
	039 Move X19, [X31+24]
	040 Move X30, [X31+32]
	041 Move X21, [X31+40]
	042 Return X0
	043 Move X10, [X10+200]
	044 Move X0, X31
	045 Add X10, X10, X11
	046 NotImplemented "Instruction LDUR not yet implemented."
	047 NotImplemented "Instruction CMP not yet implemented."
	048 NotImplemented "Instruction CSEL not yet implemented."
	049 Compare X20, 0
	050 JumpIfEqual {60}
	051 Move S0, W31
	052 Move S1, W31
	053 Move S2, 1
	054 Move S3, 1
	055 Move X0, X31
	056 Move [X20+16], X19
	057 Call AnimationCurve.Linear, V0, V1, V2, V3
	058 Move [X20+32], X0
	059 Move X0, X20
	060 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.Filtering.XRTargetFilter get_filter()

Disassembly:
	0x03BB75EC BL 0x301BCCC
	0x03BB75F0 CBZ X0, 0x3BB7628

ISIL:
	001 Move X0, [X0+16]
	002 Return X0

Method: System.Boolean get_enabled()

Disassembly:
	0x03BB75F4 BL 0x3BB6E9C
	0x03BB75F8 LDR X8, [X31 + 0x18]

ISIL:
	001 Move W0, [X0+24]
	002 Return X0

Method: System.Void set_enabled(System.Boolean value)

Disassembly:
	0x03BB75FC ADD W20, W20, 0x1
	0x03BB7600 CBNZ X8, 0x3BB75CC
	0x03BB7604 BL 0x1C16F20
	0x03BB7608 LDR X1, [X21]
	0x03BB760C ADD X0, X31, 0x0
	0x03BB7610 BL 0x24A6DD0
	0x03BB7614 LDP X20, X19, [X31 + 0x30]
	0x03BB7618 LDP X22, X21, [X31 + 0x20]
	0x03BB761C LDR X30, [X31 + 0x10]
	0x03BB7620 ADD X31, X31, 0x40
	0x03BB7624 RET
	0x03BB7628 BL 0x1C16F20
	0x03BB762C BL 0x1C16F20
	0x03BB7630 B 0x3BB763C
	0x03BB7634 B 0x3BB763C
	0x03BB7638 B 0x3BB763C
	0x03BB763C MOV X19, X0
	0x03BB7640 CMP W1, 0x1
	0x03BB7644 B.NE 0x3BB7670
	0x03BB7648 MOV X0, X19
	0x03BB764C BL 0x3EB1AD0
	0x03BB7650 LDR X20, [X0]
	0x03BB7654 BL 0x3EB1AE0
	0x03BB7658 LDR X1, [X21]
	0x03BB765C ADD X0, X31, 0x0
	0x03BB7660 BL 0x24A6DD0
	0x03BB7664 CBZ X20, 0x3BB7614
	0x03BB7668 MOV X0, X20
	0x03BB766C BL 0x1C16F18
	0x03BB7670 MOV X20, X31
	0x03BB7674 B 0x3BB767C
	0x03BB7678 MOV X19, X0
	0x03BB767C LDR X1, [X21]
	0x03BB7680 ADD X0, X31, 0x0
	0x03BB7684 BL 0x24A6DD0
	0x03BB7688 CBNZ X20, 0x3BB7694
	0x03BB768C MOV X0, X19
	0x03BB7690 BL 0x1D2C690
	0x03BB7694 MOV X0, X20
	0x03BB7698 BL 0x1C16F18
	0x03BB769C BL 0x1990590
	0x03BB76A0 STP X30, X21, [X31 - 0x20]!
	0x03BB76A4 STP X20, X19, [X31 + 0x10]
	0x03BB76A8 ADRP X21, 0x82B000
	0x03BB76AC LDRB W8, [X21 + 0xD13]
	0x03BB76B0 MOV X19, X1
	0x03BB76B4 MOV X20, X0
	0x03BB76B8 TBNZ X8, 0x0, 0x3BB76DC
	0x03BB76BC ADRP X0, 0x5A6000
	0x03BB76C0 LDR X0, [X0 + 0x160]
	0x03BB76C4 BL 0x1C16CF4
	0x03BB76C8 ADRP X0, 0x5A6000
	0x03BB76CC LDR X0, [X0 + 0x168]
	0x03BB76D0 BL 0x1C16CF4
	0x03BB76D4 MOVZ W8, 0x1
	0x03BB76D8 STRB W8, [X21 + 0xD13]
	0x03BB76DC CBZ X19, 0x3BB7724
	0x03BB76E0 LDP W2, W8, [X19 + 0x18]
	0x03BB76E4 ADRP X21, 0x5A6000
	0x03BB76E8 LDR X21, [X21 + 0x160]
	0x03BB76EC ADD W8, W8, 0x1
	0x03BB76F0 CMP W2, 0x1
	0x03BB76F4 STP W31, W8, [X19 + 0x18]
	0x03BB76F8 B.LT 0x3BB770C
	0x03BB76FC LDR X0, [X19 + 0x10]
	0x03BB7700 MOV W1, W31
	0x03BB7704 MOV X3, X31
	0x03BB7708 BL 0x339FA34
	0x03BB770C LDR X1, [X20 + 0x28]
	0x03BB7710 LDR X2, [X21]
	0x03BB7714 MOV X0, X19
	0x03BB7718 LDP X20, X19, [X31 + 0x10]
	0x03BB771C LDP X30, X21, [X31], #0x20
	0x03BB7720 B 0x301C194
	0x03BB7724 ADRP X0, 0x541000
	0x03BB7728 LDR X0, [X0 + 0x528]
	0x03BB772C BL 0x1C16D08
	0x03BB7730 BL 0x1C16F10
	0x03BB7734 MOV X19, X0
	0x03BB7738 ADRP X0, 0x564000
	0x03BB773C LDR X0, [X0 + 0xA58]
	0x03BB7740 BL 0x1C16D08
	0x03BB7744 MOV X1, X0
	0x03BB7748 MOV X0, X19
	0x03BB774C MOV X2, X31
	0x03BB7750 BL 0x330E100
	0x03BB7754 ADRP X0, 0x5A6000
	0x03BB7758 LDR X0, [X0 + 0x170]
	0x03BB775C BL 0x1C16D08
	0x03BB7760 MOV X1, X0
	0x03BB7764 MOV X0, X19
	0x03BB7768 BL 0x1C16DEC
	0x03BB776C SUB X31, X31, 0x40
	0x03BB7770 STR X30, [X31 + 0x10]
	0x03BB7774 STP X22, X21, [X31 + 0x20]
	0x03BB7778 STP X20, X19, [X31 + 0x30]
	0x03BB777C ADRP X21, 0x82B000
	0x03BB7780 ADRP X20, 0x5A6000
	0x03BB7784 LDRB W8, [X21 + 0xD0C]
	0x03BB7788 LDR X20, [X20 + 0x138]
	0x03BB778C MOV X19, X0
	0x03BB7790 TBNZ X8, 0x0, 0x3BB77D8
	0x03BB7794 ADRP X0, 0x5A6000
	0x03BB7798 LDR X0, [X0 + 0x148]
	0x03BB779C BL 0x1C16CF4
	0x03BB77A0 ADRP X0, 0x5A6000
	0x03BB77A4 LDR X0, [X0 + 0x140]
	0x03BB77A8 BL 0x1C16CF4
	0x03BB77AC ADRP X0, 0x5A6000
	0x03BB77B0 LDR X0, [X0 + 0x150]
	0x03BB77B4 BL 0x1C16CF4
	0x03BB77B8 ADRP X0, 0x5A6000
	0x03BB77BC LDR X0, [X0 + 0x158]
	0x03BB77C0 BL 0x1C16CF4
	0x03BB77C4 ADRP X0, 0x5A6000
	0x03BB77C8 LDR X0, [X0 + 0x138]
	0x03BB77CC BL 0x1C16CF4
	0x03BB77D0 MOVZ W8, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move W8, [X0+24]
	006 And W21, W1, 1
	007 NotImplemented "Instruction CMP not yet implemented."
	008 Move X19, X0
	009 Move W20, W1
	010 Call XRTargetEvaluator.get_disposed, X0
	011 Move TEMP, X0
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {59}
	015 Move X0, [X19+16]
	016 Compare X0, 0
	017 JumpIfEqual {64}
	018 Move W8, [X0+49]
	019 Compare W8, 0
	020 JumpIfEqual {25}
	021 Move TEMP, X20
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfNotEqual {65}
	025 Move W8, [X19+40]
	026 Move [X19+24], W21
	027 Compare W8, 0
	028 JumpIfEqual {59}
	029 Move X1, X31
	030 Call Behaviour.get_isActiveAndEnabled, X0
	031 Move TEMP, X0
	032 And TEMP, TEMP, 1
	033 Compare TEMP, 1
	034 JumpIfNotEqual {59}
	035 Move TEMP, X20
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {46}
	039 Move X0, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Call XRTargetEvaluator.EnableInternal, X0
	045 Return 
	046 Move W8, [X19+41]
	047 Compare W8, 0
	048 JumpIfEqual {59}
	049 Move X8, [X19]
	050 Move [X19+41], W31
	051 Move X0, X19
	052 Move X20, [X31+16]
	053 Move X19, [X31+24]
	054 Move X2, [X8+440]
	055 Move X1, [X8+448]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 CallNoReturn X2
	059 Move X20, [X31+16]
	060 Move X19, [X31+24]
	061 Move X30, [X31+32]
	062 Move X21, [X31+40]
	063 Return 
	064 Call 0x1C17F20
	065 Move X0, 0x53D000
	066 Move X0, [X0+2760]
	067 Call 0x1C17D08
	068 Move W1, 5
	069 Call 0x1C17D6C
	070 Move X20, X0
	071 Call 0x19913C0
	072 Move X0, 0x5A7000
	073 Move X0, [X0+240]
	074 Call 0x1C17D08
	075 Move X2, X0
	076 Move X0, X20
	077 Move X1, X31
	078 Call 0x1994444
	079 Move X0, X19
	080 Move X1, X31
	081 Call "il2cpp_vm_object_is_inst", X0
	082 Move X21, X0
	083 Call 0x19913C0
	084 Move X8, [X21]
	085 Move X0, X21
	086 Move X9, [X8+424]
	087 Move X1, [X8+432]
	088 NotImplemented "Instruction BLR not yet implemented."
	089 Move X21, X0
	090 Move X0, X20
	091 Call 0x19913C0
	092 Move W1, 1
	093 Move X0, X20
	094 Move X2, X21
	095 Call 0x1994444
	096 Move X0, X20
	097 Call 0x19913C0
	098 Move X0, 0x5A7000
	099 Move X0, [X0+248]
	100 Call 0x1C17D08
	101 Move X2, X0
	102 Move W1, 2
	103 Move X0, X20
	104 Call 0x1994444
	105 Move X19, [X19+16]
	106 Move X0, X19
	107 Call 0x19913C0
	108 Move X0, X19
	109 Move X1, X31
	110 Call Object.get_name, X0
	111 Move X19, X0
	112 Move X0, X20
	113 Call 0x19913C0
	114 Move W1, 3
	115 Move X0, X20
	116 Move X2, X19
	117 Call 0x1994444
	118 Move X0, X20
	119 Call 0x19913C0
	120 Move X0, 0x5A7000
	121 Move X0, [X0+256]
	122 Call 0x1C17D08
	123 Move X2, X0
	124 Move W1, 4
	125 Move X0, X20
	126 Call 0x1994444
	127 Move X0, X20
	128 Move X1, X31
	129 Call String.Concat, X0
	130 Move X19, X0
	131 Move X0, 0x53D000
	132 Move X0, [X0+1456]
	133 Call 0x1C17D08
	134 Call 0x1C17F10
	135 Move X1, X19
	136 Move X2, X31
	137 Move X20, X0
	138 Call InvalidOperationException..ctor, X0, X1
	139 Move X0, 0x5A7000
	140 Move X0, [X0+264]
	141 Call 0x1C17D08
	142 Move X1, X0
	143 Move X0, X20
	144 Call 0x1C17DEC

Method: UnityEngine.AnimationCurve get_weight()

Disassembly:
	0x03BB788C LDR X8, [X31 + 0x18]
	0x03BB7890 ADD W20, W20, 0x1

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_weight(UnityEngine.AnimationCurve value)

Disassembly:
	0x03BB7894 CBNZ X8, 0x3BB7844
	0x03BB7898 BL 0x1C16F20

ISIL:
	001 Move [X0+32], X1
	002 Return 

Method: System.Boolean get_disposed()

Disassembly:
	0x03BB77D4 STRB W8, [X21 + 0xD0C]
	0x03BB77D8 LDR X0, [X20]
	0x03BB77DC STR X31, [X31 + 0x18]
	0x03BB77E0 STP X31, X31, [X31]
	0x03BB77E4 LDR W8, [X0 + 0xE0]
	0x03BB77E8 CBNZ W8, 0x3BB77F4
	0x03BB77EC BL 0x1C16DFC
	0x03BB77F0 LDR X0, [X20]
	0x03BB77F4 LDR X8, [X0 + 0xB8]
	0x03BB77F8 LDR X0, [X8]
	0x03BB77FC CBZ X0, 0x3BB78C4
	0x03BB7800 ADRP X8, 0x5A6000
	0x03BB7804 LDR X8, [X8 + 0x148]
	0x03BB7808 ADRP X21, 0x5A6000
	0x03BB780C ADD X1, X31, 0x18
	0x03BB7810 LDR X2, [X8]
	0x03BB7814 LDR X21, [X21 + 0x158]
	0x03BB7818 BL 0x2EF1058
	0x03BB781C LDR X8, [X31 + 0x18]
	0x03BB7820 STP X0, X1, [X31]
	0x03BB7824 MOV X0, X19
	0x03BB7828 MOV X1, X8
	0x03BB782C BL 0x3BB76A0
	0x03BB7830 LDR X8, [X31 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x82C000
	006 Move X20, 0x53D000
	007 Move W8, [X21+3331]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x53D000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3331], W8
	019 Move X0, [X20]
	020 Move X19, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X2, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Object.op_Equality, X0, X1
	033 Return X0

Method: System.Void RegisterHandlers()

Disassembly:
	0x03BB789C LDR X1, [X21]
	0x03BB78A0 ADD X0, X31, 0x0
	0x03BB78A4 BL 0x24A6DD0
	0x03BB78A8 LDP X20, X19, [X31 + 0x30]
	0x03BB78AC LDP X22, X21, [X31 + 0x20]
	0x03BB78B0 LDR X30, [X31 + 0x10]
	0x03BB78B4 ADD X31, X31, 0x40
	0x03BB78B8 RET
	0x03BB78BC BL 0x1C16F20
	0x03BB78C0 BL 0x1C16F20
	0x03BB78C4 BL 0x1C16F20
	0x03BB78C8 B 0x3BB78E0
	0x03BB78CC B 0x3BB78E0
	0x03BB78D0 B 0x3BB78E0
	0x03BB78D4 B 0x3BB78E0
	0x03BB78D8 B 0x3BB78E0

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+42]
	004 Compare W8, 0
	005 JumpIfNotEqual {12}
	006 Move X19, X0
	007 Call XRTargetEvaluator.get_disposed, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {15}
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Move X0, [X19+16]
	016 Move W8, 1
	017 Move [X19+42], W8
	018 Compare X0, 0
	019 JumpIfEqual {23}
	020 Move X1, X19
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 Call 0x1C17F20

Method: System.Void UnregisterHandlers()

Disassembly:
	0x03BB7B9C LDP W2, W8, [X19 + 0x18]
	0x03BB7BA0 ADD W8, W8, 0x1
	0x03BB7BA4 CMP W2, 0x1
	0x03BB7BA8 STP W31, W8, [X19 + 0x18]
	0x03BB7BAC B.LT 0x3BB7BC0
	0x03BB7BB0 LDR X0, [X19 + 0x10]
	0x03BB7BB4 MOV W1, W31
	0x03BB7BB8 MOV X3, X31
	0x03BB7BBC BL 0x339FA34
	0x03BB7BC0 LDR X0, [X20 + 0x28]
	0x03BB7BC4 CBZ X0, 0x3BB7CDC
	0x03BB7BC8 ADRP X8, 0x5A6000
	0x03BB7BCC LDR X8, [X8 + 0x198]
	0x03BB7BD0 ADRP X21, 0x5A6000
	0x03BB7BD4 ADRP X22, 0x5A6000

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+42]
	004 Compare W8, 0
	005 JumpIfEqual {12}
	006 Move X19, X0
	007 Call XRTargetEvaluator.get_disposed, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {15}
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Move X0, [X19+16]
	016 Move [X19+42], W31
	017 Compare X0, 0
	018 JumpIfEqual {22}
	019 Move X1, X19
	020 Move X30, [X31+16]
	021 Move X19, [X31+24]
	022 Call 0x1C17F20

Method: System.Void AwakeInternal()

Disassembly:
	0x03BB7E9C B 0x3BB7E80
	0x03BB7EA0 MOV X20, X31
	0x03BB7EA4 LDR X1, [X21]
	0x03BB7EA8 ADD X0, X31, 0x20
	0x03BB7EAC BL 0x2BC434C
	0x03BB7EB0 CBNZ X20, 0x3BB7EE0
	0x03BB7EB4 LDR X1, [X22]
	0x03BB7EB8 ADD X0, X31, 0x38
	0x03BB7EBC BL 0x24A6DD0
	0x03BB7EC0 LDP X20, X19, [X31 + 0x70]
	0x03BB7EC4 LDP X22, X21, [X31 + 0x60]
	0x03BB7EC8 LDP X30, X23, [X31 + 0x50]
	0x03BB7ECC ADD X31, X31, 0x80
	0x03BB7ED0 RET
	0x03BB7ED4 BL 0x1C16F20
	0x03BB7ED8 BL 0x1C16F20
	0x03BB7EDC BL 0x1C16F20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+40]
	004 Compare W8, 0
	005 JumpIfNotEqual {12}
	006 Move X19, X0
	007 Call XRTargetEvaluator.get_disposed, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {15}
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Move X8, [X19]
	016 Move W9, 1
	017 Move [X19+40], W9
	018 Move X0, X19
	019 Move X9, [X8+392]
	020 Move X1, [X8+400]
	021 NotImplemented "Instruction BLR not yet implemented."
	022 Move X0, X19
	023 Move X30, [X31+16]
	024 Move X19, [X31+24]
	025 Call XRTargetEvaluator.RegisterHandlers, X0
	026 Return 

Method: System.Void DisposeInternal()

Disassembly:
	0x03BB7EE0 MOV X0, X20
	0x03BB7EE4 BL 0x1C16F18
	0x03BB7EE8 B 0x3BB7EF4
	0x03BB7EEC B 0x3BB7EF4
	0x03BB7EF0 B 0x3BB7EF4
	0x03BB7EF4 MOV X19, X1
	0x03BB7EF8 MOV X23, X0
	0x03BB7EFC B 0x3BB7F40
	0x03BB7F00 B 0x3BB7F08
	0x03BB7F04 B 0x3BB7F08
	0x03BB7F08 MOV X23, X0
	0x03BB7F0C CMP W1, 0x1
	0x03BB7F10 B.NE 0x3BB7F28

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+40]
	004 Compare W8, 0
	005 JumpIfEqual {15}
	006 Move X19, X0
	007 Move [X0+40], W31
	008 Call XRTargetEvaluator.UnregisterHandlers, X0
	009 Move X8, [X19]
	010 Move X0, X19
	011 Move X9, [X8+408]
	012 Move X1, [X8+416]
	013 NotImplemented "Instruction BLR not yet implemented."
	014 Move [X19+16], X31
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 

Method: System.Void EnableInternal()

Disassembly:
	0x03BB7834 CBZ X8, 0x3BB7898
	0x03BB7838 ADRP X22, 0x5A6000
	0x03BB783C LDR X22, [X22 + 0x150]
	0x03BB7840 MOV W20, W31
	0x03BB7844 LDR W8, [X8 + 0x18]
	0x03BB7848 CMP W20, W8
	0x03BB784C B.GE 0x3BB789C
	0x03BB7850 MOV X0, X19
	0x03BB7854 MOV X1, X31
	0x03BB7858 BL 0x3C32454
	0x03BB785C TBZ X0, 0x0, 0x3BB789C
	0x03BB7860 LDR X0, [X31 + 0x18]
	0x03BB7864 CBZ X0, 0x3BB78C0
	0x03BB7868 LDR X2, [X22]
	0x03BB786C MOV W1, W20

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W8, [X0+41]
	004 Compare W8, 0
	005 JumpIfNotEqual {12}
	006 Move X19, X0
	007 Call XRTargetEvaluator.get_disposed, X0
	008 Move TEMP, X0
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfNotEqual {15}
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Return 
	015 Move X8, [X19]
	016 Move W9, 1
	017 Move [X19+41], W9
	018 Move X0, X19
	019 Move X2, [X8+424]
	020 Move X1, [X8+432]
	021 Move X30, [X31+16]
	022 Move X19, [X31+24]
	023 CallNoReturn X2

Method: System.Void DisableInternal()

Disassembly:
	0x03BB7870 BL 0x301BCCC
	0x03BB7874 MOV X8, X0
	0x03BB7878 CBZ X0, 0x3BB78BC
	0x03BB787C LDRB W9, [X8 + 0x18]
	0x03BB7880 CBZ W9, 0x3BB788C
	0x03BB7884 MOV X0, X8
	0x03BB7888 BL 0x3BB6834

ISIL:
	001 Move W8, [X0+41]
	002 Compare W8, 0
	003 JumpIfEqual {9}
	004 Move X8, [X0]
	005 Move [X0+41], W31
	006 Move X2, [X8+440]
	007 Move X1, [X8+448]
	008 CallNoReturn X2
	009 Return 

Method: System.Void Awake()

Disassembly:
	0x03BB7F14 MOV X0, X23

ISIL:
	001 Return 

Method: System.Void OnDispose()

Disassembly:
	0x03BB7F18 BL 0x3EB1AD0

ISIL:
	001 Return 

Method: System.Void OnEnable()

Disassembly:
	0x03BB6820 LDP X20, X19, [X31 + 0x10]

ISIL:
	001 Return 

Method: System.Void OnDisable()

Disassembly:
	0x03BB72DC MOV X19, X1

ISIL:
	001 Return 

Method: System.Void Reset()

Disassembly:
	0x03BB6828 MOV X2, X31

ISIL:
	001 Return 

Method: System.Single GetWeightedScore(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable target)

Disassembly:
	0x03BB7F1C LDR X20, [X0]
	0x03BB7F20 BL 0x3EB1AE0
	0x03BB7F24 B 0x3BB7EA4
	0x03BB7F28 MOV X19, X1
	0x03BB7F2C MOV X20, X31
	0x03BB7F30 LDR X1, [X21]
	0x03BB7F34 ADD X0, X31, 0x20
	0x03BB7F38 BL 0x2BC434C
	0x03BB7F3C CBNZ X20, 0x3BB7F78
	0x03BB7F40 CMP W19, 0x1
	0x03BB7F44 B.NE 0x3BB7F70

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X8, [X0]
	004 Move X19, [X0+32]
	005 Move X9, [X8+472]
	006 Move X3, [X8+480]
	007 NotImplemented "Instruction BLR not yet implemented."
	008 Compare X19, 0
	009 JumpIfEqual {16}
	010 Move X0, X19
	011 Move X1, X31
	012 Move X30, [X31+16]
	013 Move X19, [X31+24]
	014 Call AnimationCurve.Evaluate, X0, V0
	015 Return V0
	016 Call 0x1C17F20

Method: System.Single CalculateNormalizedScore(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable target)

Disassembly:
	

ISIL:
No ISIL was generated
Method: System.Void Dispose()

Disassembly:
	0x03BB7F48 MOV X0, X23
	0x03BB7F4C BL 0x3EB1AD0
	0x03BB7F50 LDR X19, [X0]
	0x03BB7F54 BL 0x3EB1AE0
	0x03BB7F58 LDR X1, [X22]
	0x03BB7F5C ADD X0, X31, 0x38
	0x03BB7F60 BL 0x24A6DD0
	0x03BB7F64 CBZ X19, 0x3BB7EC0
	0x03BB7F68 MOV X0, X19
	0x03BB7F6C BL 0x1C16F18
	0x03BB7F70 MOV X19, X31
	0x03BB7F74 B 0x3BB7F90
	0x03BB7F78 MOV X0, X20
	0x03BB7F7C BL 0x1C16F18
	0x03BB7F80 MOV X19, X1
	0x03BB7F84 MOV X23, X0
	0x03BB7F88 B 0x3BB7F30
	0x03BB7F8C MOV X23, X0
	0x03BB7F90 LDR X1, [X22]
	0x03BB7F94 ADD X0, X31, 0x38
	0x03BB7F98 BL 0x24A6DD0
	0x03BB7F9C CBNZ X19, 0x3BB7FA8
	0x03BB7FA0 MOV X0, X23
	0x03BB7FA4 BL 0x1D2C690
	0x03BB7FA8 MOV X0, X19
	0x03BB7FAC BL 0x1C16F18
	0x03BB7FB0 BL 0x1990590
	0x03BB7FB4 STP X30, X21, [X31 - 0x20]!
	0x03BB7FB8 STP X20, X19, [X31 + 0x10]
	0x03BB7FBC ADRP X20, 0x82B000
	0x03BB7FC0 ADRP X21, 0x5A6000
	0x03BB7FC4 LDRB W8, [X20 + 0xD0F]
	0x03BB7FC8 LDR X21, [X21 + 0x1A8]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x82C000
	006 Move X20, 0x53D000
	007 Move W8, [X21+3332]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x53D000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3332], W8
	019 Move X0, [X20]
	020 Move X20, [X19+16]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {41}
	033 Move X0, [X19+16]
	034 Compare X0, 0
	035 JumpIfEqual {46}
	036 Move X1, X19
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return 
	046 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BB6B40 B.NE 0x3BB6B6C
	0x03BB6B44 MOV X0, X20
	0x03BB6B48 BL 0x3EB1AD0
	0x03BB6B4C LDR X19, [X0]

ISIL:
	001 Move W8, 1
	002 Move X1, X31
	003 Move [X0+24], W8
	004 Call Object..ctor, X0
	005 Return 

