Type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeLogic

Method: System.Single get_interactionAxisLength()

Disassembly:
	0x03BB5990 TBNZ X0, 0x0, 0x3BB5AFC
	0x03BB5994 CBZ X21, 0x3BB5B24

ISIL:
	001 Move V0, [X0+16]
	002 Return V0

Method: System.Void set_interactionAxisLength(System.Single value)

Disassembly:
	0x03BB5998 MOV X0, X21
	0x03BB599C MOV X1, X31

ISIL:
	001 Move [X0+16], S0
	002 Return 

Method: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData> get_pokeStateData()

Disassembly:
	0x03BB59A0 BL 0x3C3F58C
	0x03BB59A4 CBZ X20, 0x3BB5B24

ISIL:
	001 Move X0, [X0+24]
	002 Return X0

Method: System.Void Initialize(UnityEngine.Transform associatedTransform, UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdData pokeThresholdData, UnityEngine.Collider collider)

Disassembly:
	0x03BB57BC LDR X20, [X20 + 0x598]
	0x03BB57C0 MOV X19, X0
	0x03BB57C4 TBNZ X8, 0x0, 0x3BB57DC
	0x03BB57C8 ADRP X0, 0x53E000
	0x03BB57CC LDR X0, [X0 + 0x598]
	0x03BB57D0 BL 0x1C16CF4
	0x03BB57D4 MOVZ W8, 0x1
	0x03BB57D8 STRB W8, [X21 + 0xCF7]
	0x03BB57DC LDR X0, [X20]
	0x03BB57E0 LDR X20, [X19 + 0x30]
	0x03BB57E4 LDR W8, [X0 + 0xE0]
	0x03BB57E8 CBNZ W8, 0x3BB57F0
	0x03BB57EC BL 0x1C16DFC
	0x03BB57F0 MOV X0, X20
	0x03BB57F4 MOV X1, X31
	0x03BB57F8 MOV X2, X31
	0x03BB57FC BL 0x3C3883C
	0x03BB5800 TBZ X0, 0x0, 0x3BB5814
	0x03BB5804 MOV X0, X19
	0x03BB5808 LDP X20, X19, [X31 + 0x10]
	0x03BB580C LDP X30, X21, [X31], #0x20
	0x03BB5810 B 0x3BB56A0
	0x03BB5814 LDP X20, X19, [X31 + 0x10]
	0x03BB5818 LDP X30, X21, [X31], #0x20
	0x03BB581C RET
	0x03BB5820 RET
	0x03BB5824 B 0x3BB56A0
	0x03BB5828 RET
	0x03BB582C SUB X31, X31, 0x90
	0x03BB5830 STP D15, D14, [X31 + 0x20]
	0x03BB5834 STP D13, D12, [X31 + 0x30]
	0x03BB5838 STP D11, D10, [X31 + 0x40]
	0x03BB583C STP D9, D8, [X31 + 0x50]
	0x03BB5840 STR X30, [X31 + 0x60]
	0x03BB5844 STP X22, X21, [X31 + 0x70]
	0x03BB5848 STP X20, X19, [X31 + 0x80]
	0x03BB584C ADRP X20, 0x82D000
	0x03BB5850 ADRP X22, 0x53E000
	0x03BB5854 LDRB W8, [X20 + 0xCF8]
	0x03BB5858 LDR X22, [X22 + 0x598]
	0x03BB585C MOV X21, X2
	0x03BB5860 MOV X19, X0
	0x03BB5864 TBNZ X8, 0x0, 0x3BB5894
	0x03BB5868 ADRP X0, 0x5A5000
	0x03BB586C LDR X0, [X0 + 0x8D8]
	0x03BB5870 BL 0x1C16CF4
	0x03BB5874 ADRP X0, 0x53E000
	0x03BB5878 LDR X0, [X0 + 0x598]
	0x03BB587C BL 0x1C16CF4
	0x03BB5880 ADRP X0, 0x5A5000
	0x03BB5884 LDR X0, [X0 + 0x438]
	0x03BB5888 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 80
	002 Move [X31+32], X30
	003 Move [X31+40], X23
	004 Move [X31+48], X22
	005 Move [X31+56], X21
	006 Move [X31+64], X20
	007 Move [X31+72], X19
	008 Move X23, 0x82E000
	009 Move W8, [X23+3306]
	010 Move X20, X3
	011 Move X21, X2
	012 Move X22, X1
	013 Move X19, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x53F000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+3306], W8
	023 Move [X19+32], X22
	024 Move [X19+40], X21
	025 Compare X21, 0
	026 JumpIfEqual {68}
	027 Move X8, -51159040
	028 Move V0, [X21+28]
	029 Move V1, [X8+260]
	030 Move X21, 0x53F000
	031 Move X21, [X21+1432]
	032 Multiply S0, S0, S1
	033 Call 0x3EB2BD0
	034 Move [X19+48], S0
	035 Move X0, [X21]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Inequality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {57}
	048 Add X8, X31, 8
	049 Move X0, X20
	050 Move W1, W31
	051 Move W2, W31
	052 Call XRPokeLogic.ComputeBounds, X0, X1, X2
	053 Add X1, X31, 8
	054 Move X0, X19
	055 Call XRPokeLogic.ComputeInteractionAxisLength, X0, X1
	056 Move [X19+16], S0
	057 Move X1, [X19+32]
	058 Move X0, X19
	059 Move X20, [X31+64]
	060 Move X19, [X31+72]
	061 Move X22, [X31+48]
	062 Move X21, [X31+56]
	063 Move X30, [X31+32]
	064 Move X23, [X31+40]
	065 Add X31, X31, 80
	066 Call XRPokeLogic.ResetPokeStateData, X0, X1
	067 Return 
	068 Call 0x1C17F20

Method: System.Void SetPokeDepth(System.Single pokeDepth)

Disassembly:
	0x03BB5FC8 BL 0x3B66614
	0x03BB5FCC CBZ X0, 0x3BB6004

ISIL:
	001 Move [X0+16], S0
	002 Return 

Method: System.Void Dispose()

Disassembly:
	0x03BB442C BL 0x1C16CF4
	0x03BB4430 ADRP X0, 0x5A9000
	0x03BB4434 LDR X0, [X0 + 0x48]
	0x03BB4438 BL 0x1C16CF4
	0x03BB443C ADRP X0, 0x5A9000
	0x03BB4440 LDR X0, [X0 + 0x50]
	0x03BB4444 BL 0x1C16CF4
	0x03BB4448 ADRP X0, 0x5A8000
	0x03BB444C LDR X0, [X0 + 0xFC8]
	0x03BB4450 BL 0x1C16CF4
	0x03BB4454 ADRP X0, 0x5A9000
	0x03BB4458 LDR X0, [X0 + 0x58]
	0x03BB445C BL 0x1C16CF4
	0x03BB4460 ADRP X0, 0x5A8000
	0x03BB4464 LDR X0, [X0 + 0xFE8]
	0x03BB4468 BL 0x1C16CF4
	0x03BB446C ADRP X0, 0x5A8000
	0x03BB4470 LDR X0, [X0 + 0xFF0]
	0x03BB4474 BL 0x1C16CF4
	0x03BB4478 ADRP X0, 0x5A9000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x82F000
	005 Move W8, [X20+3307]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x5A9000
	012 Move X0, [X0+4016]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+3307], W8
	016 Move X0, [X19+56]
	017 Compare X0, 0
	018 JumpIfEqual {27}
	019 Move X8, 0x5A9000
	020 Move X8, [X8+4016]
	021 Move X20, [X31+16]
	022 Move X19, [X31+24]
	023 Move X1, [X8]
	024 Move X30, [X31+32]
	025 Call Dictionary`2<Object, Vector3>.Clear, X0
	026 Return 
	027 Call 0x1C17F20

Method: System.Boolean MeetsRequirementsForSelectAction(System.Object interactor, UnityEngine.Vector3 pokableAttachPosition, UnityEngine.Vector3 pokerAttachPosition, System.Single pokeInteractionOffset, UnityEngine.Transform pokedTransform)

Disassembly:
	0x03BB467C ADRP X0, 0x5A9000
	0x03BB4680 LDR X0, [X0 + 0x68]
	0x03BB4684 BL 0x1C16CF4
	0x03BB4688 ADRP X0, 0x5A9000
	0x03BB468C LDR X0, [X0 + 0xB0]
	0x03BB4690 BL 0x1C16CF4
	0x03BB4694 ADRP X0, 0x5A9000
	0x03BB4698 LDR X0, [X0 + 0x98]
	0x03BB469C BL 0x1C16CF4
	0x03BB46A0 ADRP X0, 0x5A9000
	0x03BB46A4 LDR X0, [X0 + 0x78]
	0x03BB46A8 BL 0x1C16CF4
	0x03BB46AC ADRP X0, 0x5A9000
	0x03BB46B0 LDR X0, [X0 + 0x88]
	0x03BB46B4 BL 0x1C16CF4
	0x03BB46B8 MOVZ W8, 0x1
	0x03BB46BC STRB W8, [X23 + 0xCF4]
	0x03BB46C0 MOVZ W8, 0x3F800000
	0x03BB46C4 STR W8, [X19 + 0x10]
	0x03BB46C8 LDR X0, [X20]
	0x03BB46CC BL 0x1C16F10
	0x03BB46D0 LDR X5, [X22]
	0x03BB46D4 MOVI V0.2D, 0x0
	0x03BB46D8 ADD X1, X31, 0x0
	0x03BB46DC MOVZ W2, 0x1
	0x03BB46E0 MOV X3, X31
	0x03BB46E4 MOV W4, W31
	0x03BB46E8 MOV X20, X0
	0x03BB46EC STR X31, [X31 + 0x30]
	0x03BB46F0 STP V0, V0, [X31 + 0x10]
	0x03BB46F4 STR V0, [X31]
	0x03BB46F8 BL 0x28E2908
	0x03BB46FC STR X20, [X19 + 0x18]
	0x03BB4700 LDR X0, [X21]
	0x03BB4704 BL 0x1C16F10
	0x03BB4708 LDR X1, [X29]
	0x03BB470C MOV X20, X0
	0x03BB4710 BL 0x2AC0630
	0x03BB4714 STR X20, [X19 + 0x38]
	0x03BB4718 LDR X0, [X28]
	0x03BB471C BL 0x1C16F10
	0x03BB4720 LDR X1, [X27]
	0x03BB4724 MOV X20, X0
	0x03BB4728 BL 0x2AA4804
	0x03BB472C STR X20, [X19 + 0x40]
	0x03BB4730 LDR X0, [X26]
	0x03BB4734 BL 0x1C16F10
	0x03BB4738 LDR X1, [X25]
	0x03BB473C MOV X20, X0
	0x03BB4740 BL 0x2A88E9C
	0x03BB4744 STR X20, [X19 + 0x48]
	0x03BB4748 LDR X0, [X24]
	0x03BB474C BL 0x1C16F10
	0x03BB4750 ADRP X8, 0x5A9000
	0x03BB4754 LDR X8, [X8 + 0xA8]
	0x03BB4758 MOV X20, X0
	0x03BB475C LDR X1, [X8]
	0x03BB4760 BL 0x2AA4804
	0x03BB4764 STR X20, [X19 + 0x50]
	0x03BB4768 ADRP X8, 0x5A9000
	0x03BB476C LDR X8, [X8 + 0xB0]
	0x03BB4770 LDR X0, [X8]
	0x03BB4774 BL 0x1C16F10
	0x03BB4778 ADRP X8, 0x5A9000
	0x03BB477C LDR X8, [X8 + 0xA0]
	0x03BB4780 MOV X20, X0
	0x03BB4784 LDR X1, [X8]
	0x03BB4788 BL 0x2AB41F4
	0x03BB478C MOV X0, X19
	0x03BB4790 MOV X1, X31
	0x03BB4794 STR X20, [X19 + 0x58]
	0x03BB4798 BL 0x33BDD8C
	0x03BB479C LDP X20, X19, [X31 + 0x90]
	0x03BB47A0 LDP X22, X21, [X31 + 0x80]
	0x03BB47A4 LDP X24, X23, [X31 + 0x70]
	0x03BB47A8 LDP X26, X25, [X31 + 0x60]
	0x03BB47AC LDP X28, X27, [X31 + 0x50]
	0x03BB47B0 LDP X29, X30, [X31 + 0x40]
	0x03BB47B4 ADD X31, X31, 0xA0
	0x03BB47B8 RET
	0x03BB47BC SUB X31, X31, 0x50
	0x03BB47C0 STP X30, X23, [X31 + 0x20]
	0x03BB47C4 STP X22, X21, [X31 + 0x30]
	0x03BB47C8 STP X20, X19, [X31 + 0x40]
	0x03BB47CC ADRP X23, 0x82E000
	0x03BB47D0 LDRB W8, [X23 + 0xCEA]
	0x03BB47D4 MOV X20, X3
	0x03BB47D8 MOV X21, X2
	0x03BB47DC MOV X22, X1
	0x03BB47E0 MOV X19, X0
	0x03BB47E4 TBNZ X8, 0x0, 0x3BB47FC
	0x03BB47E8 ADRP X0, 0x53F000
	0x03BB47EC LDR X0, [X0 + 0x598]
	0x03BB47F0 BL 0x1C16CF4
	0x03BB47F4 MOVZ W8, 0x1
	0x03BB47F8 STRB W8, [X23 + 0xCEA]
	0x03BB47FC STP X22, X21, [X19 + 0x20]
	0x03BB4800 CBZ X21, 0x3BB4888
	0x03BB4804 ADRP X8, 0xFFFFFFFFFCF36000
	0x03BB4808 LDR V0, [X21 + 0x1C]
	0x03BB480C LDR V1, [X8 + 0x104]
	0x03BB4810 ADRP X21, 0x53F000
	0x03BB4814 LDR X21, [X21 + 0x598]
	0x03BB4818 FMUL S0, S0, S1
	0x03BB481C BL 0x3EB1BD0
	0x03BB4820 STR S0, [X19 + 0x30]
	0x03BB4824 LDR X0, [X21]
	0x03BB4828 LDR W8, [X0 + 0xE0]
	0x03BB482C CBNZ W8, 0x3BB4834
	0x03BB4830 BL 0x1C16DFC
	0x03BB4834 MOV X0, X20
	0x03BB4838 MOV X1, X31
	0x03BB483C MOV X2, X31
	0x03BB4840 BL 0x3C354F8
	0x03BB4844 TBZ X0, 0x0, 0x3BB486C
	0x03BB4848 ADD X8, X31, 0x8
	0x03BB484C MOV X0, X20
	0x03BB4850 MOV W1, W31
	0x03BB4854 MOV W2, W31
	0x03BB4858 BL 0x3BB49A8
	0x03BB485C ADD X1, X31, 0x8
	0x03BB4860 MOV X0, X19
	0x03BB4864 BL 0x3BB4CF4
	0x03BB4868 STR S0, [X19 + 0x10]
	0x03BB486C LDR X1, [X19 + 0x20]
	0x03BB4870 MOV X0, X19
	0x03BB4874 LDP X20, X19, [X31 + 0x40]
	0x03BB4878 LDP X22, X21, [X31 + 0x30]
	0x03BB487C LDP X30, X23, [X31 + 0x20]
	0x03BB4880 ADD X31, X31, 0x50
	0x03BB4884 B 0x3BB4E28
	0x03BB4888 BL 0x1C16F20
	0x03BB488C STR X30, [X31 - 0x40]!
	0x03BB4890 STP X24, X23, [X31 + 0x10]
	0x03BB4894 STP X22, X21, [X31 + 0x20]
	0x03BB4898 STP X20, X19, [X31 + 0x30]
	0x03BB489C ADRP X20, 0x82E000
	0x03BB48A0 ADRP X24, 0x5A8000
	0x03BB48A4 ADRP X21, 0x5A9000
	0x03BB48A8 ADRP X23, 0x5A8000
	0x03BB48AC ADRP X22, 0x5A6000
	0x03BB48B0 LDRB W8, [X20 + 0xCE9]
	0x03BB48B4 LDR X24, [X24 + 0x9E8]
	0x03BB48B8 LDR X21, [X21 + 0xB8]
	0x03BB48BC LDR X23, [X23 + 0x9F8]
	0x03BB48C0 LDR X22, [X22 + 0xA88]
	0x03BB48C4 MOV X19, X0
	0x03BB48C8 TBNZ X8, 0x0, 0x3BB4904
	0x03BB48CC ADRP X0, 0x5A6000
	0x03BB48D0 LDR X0, [X0 + 0xA88]
	0x03BB48D4 BL 0x1C16CF4
	0x03BB48D8 ADRP X0, 0x5A8000
	0x03BB48DC LDR X0, [X0 + 0x9E8]
	0x03BB48E0 BL 0x1C16CF4
	0x03BB48E4 ADRP X0, 0x5A9000
	0x03BB48E8 LDR X0, [X0 + 0xB8]
	0x03BB48EC BL 0x1C16CF4
	0x03BB48F0 ADRP X0, 0x5A8000
	0x03BB48F4 LDR X0, [X0 + 0x9F8]
	0x03BB48F8 BL 0x1C16CF4
	0x03BB48FC MOVZ W8, 0x1
	0x03BB4900 STRB W8, [X20 + 0xCE9]
	0x03BB4904 LDR X0, [X24]
	0x03BB4908 BL 0x1C16F10
	0x03BB490C MOVZ W8, 0x3
	0x03BB4910 MOVZ W9, 0x1
	0x03BB4914 MOVZ W10, 0x42340000
	0x03BB4918 MOV X1, X31
	0x03BB491C MOV X20, X0
	0x03BB4920 STR W8, [X0 + 0x10]
	0x03BB4924 STRB W9, [X0 + 0x18]
	0x03BB4928 STR W10, [X0 + 0x1C]
	0x03BB492C BL 0x33BDD8C
	0x03BB4930 LDR X0, [X21]
	0x03BB4934 BL 0x1C16F10
	0x03BB4938 MOV X1, X20
	0x03BB493C MOV X21, X0
	0x03BB4940 BL 0x3BB2870
	0x03BB4944 STR X21, [X19 + 0x30]
	0x03BB4948 LDR X0, [X23]
	0x03BB494C BL 0x1C16F10
	0x03BB4950 MOV X20, X0
	0x03BB4954 BL 0x3BB45B4
	0x03BB4958 STR X20, [X19 + 0x38]
	0x03BB495C LDR X0, [X22]
	0x03BB4960 BL 0x1C16F10
	0x03BB4964 MOV X1, X31
	0x03BB4968 MOV X20, X0
	0x03BB496C BL 0x3B31C38
	0x03BB4970 STR X20, [X19 + 0x40]
	0x03BB4974 MOV X0, X19
	0x03BB4978 LDP X20, X19, [X31 + 0x30]
	0x03BB497C LDP X22, X21, [X31 + 0x20]
	0x03BB4980 LDP X24, X23, [X31 + 0x10]
	0x03BB4984 MOV X1, X31
	0x03BB4988 LDR X30, [X31], #0x40
	0x03BB498C B 0x3C36C30
	0x03BB4990 LDR V0, [X0 + 0x10]
	0x03BB4994 RET
	0x03BB4998 STR S0, [X0 + 0x10]
	0x03BB499C RET
	0x03BB49A0 LDR X0, [X0 + 0x18]
	0x03BB49A4 RET
	0x03BB49A8 SUB X31, X31, 0xA0
	0x03BB49AC STR D14, [X31 + 0x30]
	0x03BB49B0 STP D13, D12, [X31 + 0x40]
	0x03BB49B4 STP D11, D10, [X31 + 0x50]
	0x03BB49B8 STP D9, D8, [X31 + 0x60]
	0x03BB49BC STP X30, X23, [X31 + 0x70]
	0x03BB49C0 STP X22, X21, [X31 + 0x80]
	0x03BB49C4 STP X20, X19, [X31 + 0x90]
	0x03BB49C8 ADRP X23, 0x82E000
	0x03BB49CC LDRB W9, [X23 + 0xCF2]
	0x03BB49D0 MOV W22, W2
	0x03BB49D4 MOV W20, W1
	0x03BB49D8 MOV X21, X0
	0x03BB49DC MOV X19, X8
	0x03BB49E0 TBNZ X9, 0x0, 0x3BB4A10
	0x03BB49E4 ADRP X0, 0x5A6000
	0x03BB49E8 LDR X0, [X0 + 0x918]
	0x03BB49EC BL 0x1C16CF4
	0x03BB49F0 ADRP X0, 0x545000
	0x03BB49F4 LDR X0, [X0 + 0xC0]
	0x03BB49F8 BL 0x1C16CF4
	0x03BB49FC ADRP X0, 0x545000
	0x03BB4A00 LDR X0, [X0 + 0xC8]
	0x03BB4A04 BL 0x1C16CF4
	0x03BB4A08 MOVZ W8, 0x1
	0x03BB4A0C STRB W8, [X23 + 0xCF2]
	0x03BB4A10 CBZ X21, 0x3BB4AA8
	0x03BB4A14 ADRP X9, 0x5A6000
	0x03BB4A18 LDR X9, [X9 + 0x918]
	0x03BB4A1C LDR X8, [X21]
	0x03BB4A20 LDR X10, [X9]
	0x03BB4A24 LDRB W9, [X8 + 0x130]
	0x03BB4A28 LDRB W11, [X10 + 0x130]
	0x03BB4A2C CMP W9, W11
	0x03BB4A30 B.CC 0x3BB4A48
	0x03BB4A34 LDR X12, [X8 + 0xC8]
	0x03BB4A38 ADD X11, X12, X11, 0x3, LSL
	0x03BB4A3C LDUR X11, [X11 - 0x8]
	0x03BB4A40 CMP X11, X10
	0x03BB4A44 B.EQ 0x3BB4B7C
	0x03BB4A48 ADRP X10, 0x545000
	0x03BB4A4C LDR X10, [X10 + 0xC8]
	0x03BB4A50 LDR X10, [X10]
	0x03BB4A54 LDRB W11, [X10 + 0x130]
	0x03BB4A58 CMP W9, W11
	0x03BB4A5C B.CC 0x3BB4A74
	0x03BB4A60 LDR X12, [X8 + 0xC8]
	0x03BB4A64 ADD X11, X12, X11, 0x3, LSL
	0x03BB4A68 LDUR X11, [X11 - 0x8]
	0x03BB4A6C CMP X11, X10
	0x03BB4A70 B.EQ 0x3BB4BB4
	0x03BB4A74 ADRP X10, 0x545000
	0x03BB4A78 LDR X10, [X10 + 0xC0]
	0x03BB4A7C FMOV S8, W31
	0x03BB4A80 LDR X10, [X10]
	0x03BB4A84 LDRB W11, [X10 + 0x130]
	0x03BB4A88 CMP W9, W11
	0x03BB4A8C B.CS 0x3BB4ACC
	0x03BB4A90 FMOV S9, W31
	0x03BB4A94 FMOV S10, W31
	0x03BB4A98 FMOV S11, W31
	0x03BB4A9C FMOV S13, W31
	0x03BB4AA0 FMOV S12, W31
	0x03BB4AA4 B 0x3BB4C74
	0x03BB4AA8 FMOV S12, W31
	0x03BB4AAC CMP W22, 0x1
	0x03BB4AB0 FMOV S13, W31
	0x03BB4AB4 FMOV S11, W31
	0x03BB4AB8 FMOV S10, W31
	0x03BB4ABC FMOV S9, W31
	0x03BB4AC0 FMOV S8, W31
	0x03BB4AC4 B.EQ 0x3BB4C7C
	0x03BB4AC8 B 0x3BB4CF0
	0x03BB4ACC LDR X8, [X8 + 0xC8]
	0x03BB4AD0 FMOV S9, W31
	0x03BB4AD4 FMOV S10, W31
	0x03BB4AD8 FMOV S11, W31
	0x03BB4ADC ADD X8, X8, X11, 0x3, LSL
	0x03BB4AE0 LDUR X8, [X8 - 0x8]
	0x03BB4AE4 FMOV S13, W31
	0x03BB4AE8 FMOV S12, W31
	0x03BB4AEC CMP X8, X10
	0x03BB4AF0 B.NE 0x3BB4C74
	0x03BB4AF4 ADRP X23, 0x824000
	0x03BB4AF8 LDRB W8, [X23 + 0x783]
	0x03BB4AFC CBNZ W8, 0x3BB4B14
	0x03BB4B00 ADRP X0, 0x53F000
	0x03BB4B04 LDR X0, [X0 + 0x5A0]
	0x03BB4B08 BL 0x1C16CF4
	0x03BB4B0C MOVZ W8, 0x1
	0x03BB4B10 STRB W8, [X23 + 0x783]
	0x03BB4B14 ADRP X8, 0x53F000
	0x03BB4B18 LDR X8, [X8 + 0x5A0]
	0x03BB4B1C MOV X0, X21
	0x03BB4B20 MOV X1, X31
	0x03BB4B24 LDR X8, [X8]
	0x03BB4B28 LDR X8, [X8 + 0xB8]
	0x03BB4B2C LDP S11, S12, [X8]
	0x03BB4B30 LDR V14, [X8 + 0x8]
	0x03BB4B34 BL 0x3C8FD60
	0x03BB4B38 MOV X0, X21
	0x03BB4B3C MOV X1, X31
	0x03BB4B40 FADD S9, S0, S0
	0x03BB4B44 BL 0x3C8FD9C
	0x03BB4B48 MOV X0, X21
	0x03BB4B4C MOV X1, X31
	0x03BB4B50 MOV V8.16B, V0.16B
	0x03BB4B54 BL 0x3C8FDD8
	0x03BB4B58 CBZ W0, 0x3BB4C34
	0x03BB4B5C CMP W0, 0x1
	0x03BB4B60 B.EQ 0x3BB4C40
	0x03BB4B64 CMP W0, 0x2
	0x03BB4B68 B.NE 0x3BB4C4C
	0x03BB4B6C MOV V11.16B, V9.16B
	0x03BB4B70 MOV V12.16B, V9.16B
	0x03BB4B74 MOV V14.16B, V8.16B
	0x03BB4B78 B 0x3BB4C4C
	0x03BB4B7C MOV X0, X21
	0x03BB4B80 MOV X1, X31
	0x03BB4B84 BL 0x3C8FE14
	0x03BB4B88 MOV X0, X21
	0x03BB4B8C MOV X1, X31
	0x03BB4B90 MOV V8.16B, V0.16B
	0x03BB4B94 MOV V9.16B, V1.16B
	0x03BB4B98 MOV V10.16B, V2.16B
	0x03BB4B9C BL 0x3C8FF4C
	0x03BB4BA0 FMOV S3, 0.5
	0x03BB4BA4 FMUL S11, S0, S3
	0x03BB4BA8 FMUL S13, S1, S3
	0x03BB4BAC FMUL S12, S2, S3
	0x03BB4BB0 B 0x3BB4C74
	0x03BB4BB4 MOV X0, X21
	0x03BB4BB8 MOV X1, X31
	0x03BB4BBC BL 0x3C90084
	0x03BB4BC0 ADRP X23, 0x824000
	0x03BB4BC4 LDRB W8, [X23 + 0x85B]
	0x03BB4BC8 MOV V8.16B, V0.16B
	0x03BB4BCC MOV V9.16B, V1.16B
	0x03BB4BD0 MOV V10.16B, V2.16B
	0x03BB4BD4 CBNZ W8, 0x3BB4BEC
	0x03BB4BD8 ADRP X0, 0x53F000
	0x03BB4BDC LDR X0, [X0 + 0x5A0]
	0x03BB4BE0 BL 0x1C16CF4
	0x03BB4BE4 MOVZ W8, 0x1
	0x03BB4BE8 STRB W8, [X23 + 0x85B]
	0x03BB4BEC ADRP X8, 0x53F000
	0x03BB4BF0 LDR X8, [X8 + 0x5A0]
	0x03BB4BF4 MOV X0, X21
	0x03BB4BF8 MOV X1, X31
	0x03BB4BFC LDR X8, [X8]
	0x03BB4C00 LDR X8, [X8 + 0xB8]
	0x03BB4C04 LDP S11, S12, [X8 + 0xC]
	0x03BB4C08 LDR V13, [X8 + 0x14]
	0x03BB4C0C BL 0x3C90124
	0x03BB4C10 FADD S0, S0, S0
	0x03BB4C14 FMOV S1, 0.5
	0x03BB4C18 FMUL S2, S11, S0
	0x03BB4C1C FMUL S3, S12, S0
	0x03BB4C20 FMUL S0, S13, S0
	0x03BB4C24 FMUL S11, S2, S1
	0x03BB4C28 FMUL S13, S3, S1
	0x03BB4C2C FMUL S12, S0, S1
	0x03BB4C30 B 0x3BB4C74
	0x03BB4C34 MOV V11.16B, V8.16B
	0x03BB4C38 MOV V12.16B, V9.16B
	0x03BB4C3C B 0x3BB4C48
	0x03BB4C40 MOV V11.16B, V9.16B
	0x03BB4C44 MOV V12.16B, V8.16B
	0x03BB4C48 MOV V14.16B, V9.16B
	0x03BB4C4C MOV X0, X21
	0x03BB4C50 MOV X1, X31
	0x03BB4C54 BL 0x3C8FCC0
	0x03BB4C58 MOV V8.16B, V0.16B
	0x03BB4C5C FMOV S0, 0.5
	0x03BB4C60 MOV V9.16B, V1.16B
	0x03BB4C64 MOV V10.16B, V2.16B
	0x03BB4C68 FMUL S11, S11, S0
	0x03BB4C6C FMUL S13, S12, S0
	0x03BB4C70 FMUL S12, S14, S0
	0x03BB4C74 CMP W22, 0x1
	0x03BB4C78 B.NE 0x3BB4C8C
	0x03BB4C7C STP S8, S9, [X19]
	0x03BB4C80 STP S10, S11, [X19 + 0x8]
	0x03BB4C84 STP S13, S12, [X19 + 0x10]
	0x03BB4C88 B 0x3BB4CCC
	0x03BB4C8C CBZ X21, 0x3BB4CF0
	0x03BB4C90 MOV X0, X21
	0x03BB4C94 MOV X1, X31
	0x03BB4C98 BL 0x3C32E90
	0x03BB4C9C MOV X1, X0
	0x03BB4CA0 AND W2, W20, 0x1
	0x03BB4CA4 ADD X8, X31, 0x18
	0x03BB4CA8 ADD X0, X31, 0x0
	0x03BB4CAC STP S8, S9, [X31]
	0x03BB4CB0 STP S10, S11, [X31 + 0x8]
	0x03BB4CB4 STP S13, S12, [X31 + 0x10]
	0x03BB4CB8 BL 0x3BB5204
	0x03BB4CBC LDR X8, [X31 + 0x28]
	0x03BB4CC0 LDUR V0, [X31 + 0x18]
	0x03BB4CC4 STR X8, [X19 + 0x10]
	0x03BB4CC8 STR V0, [X19]
	0x03BB4CCC LDP X20, X19, [X31 + 0x90]
	0x03BB4CD0 LDP X22, X21, [X31 + 0x80]
	0x03BB4CD4 LDP X30, X23, [X31 + 0x70]
	0x03BB4CD8 LDP D9, D8, [X31 + 0x60]
	0x03BB4CDC LDP D11, D10, [X31 + 0x50]
	0x03BB4CE0 LDP D13, D12, [X31 + 0x40]
	0x03BB4CE4 LDR V14, [X31 + 0x30]
	0x03BB4CE8 ADD X31, X31, 0xA0
	0x03BB4CEC RET
	0x03BB4CF0 BL 0x1C16F20
	0x03BB4CF4 STP D11, D10, [X31 - 0x40]!
	0x03BB4CF8 STP D9, D8, [X31 + 0x10]
	0x03BB4CFC STP X30, X21, [X31 + 0x20]
	0x03BB4D00 STP X20, X19, [X31 + 0x30]
	0x03BB4D04 ADRP X21, 0x82E000
	0x03BB4D08 LDRB W8, [X21 + 0xCEE]
	0x03BB4D0C MOV X19, X1
	0x03BB4D10 MOV X20, X0
	0x03BB4D14 TBNZ X8, 0x0, 0x3BB4D2C
	0x03BB4D18 ADRP X0, 0x53F000
	0x03BB4D1C LDR X0, [X0 + 0x598]
	0x03BB4D20 BL 0x1C16CF4
	0x03BB4D24 MOVZ W8, 0x1
	0x03BB4D28 STRB W8, [X21 + 0xCEE]
	0x03BB4D2C LDR X8, [X20 + 0x28]
	0x03BB4D30 FMOV S8, W31
	0x03BB4D34 CBZ X8, 0x3BB4E0C
	0x03BB4D38 ADRP X8, 0x53F000
	0x03BB4D3C LDR X8, [X8 + 0x598]
	0x03BB4D40 LDR X21, [X20 + 0x20]
	0x03BB4D44 LDR X0, [X8]
	0x03BB4D48 LDR W8, [X0 + 0xE0]
	0x03BB4D4C CBNZ W8, 0x3BB4D54
	0x03BB4D50 BL 0x1C16DFC
	0x03BB4D54 MOV X0, X21
	0x03BB4D58 MOV X1, X31
	0x03BB4D5C MOV X2, X31
	0x03BB4D60 BL 0x3C3883C
	0x03BB4D64 TBNZ X0, 0x0, 0x3BB4E0C
	0x03BB4D68 LDR X0, [X20 + 0x20]
	0x03BB4D6C CBZ X0, 0x3BB4E24
	0x03BB4D70 LDP S11, S10, [X19 + 0xC]
	0x03BB4D74 LDR V9, [X19 + 0x14]
	0x03BB4D78 MOV X1, X31
	0x03BB4D7C BL 0x3C3F58C
	0x03BB4D80 LDR X8, [X20 + 0x28]
	0x03BB4D84 CBZ X8, 0x3BB4E24
	0x03BB4D88 LDR W8, [X8 + 0x10]
	0x03BB4D8C CMP W8, 0x6
	0x03BB4D90 B.HI 0x3BB4E0C
	0x03BB4D94 MOVZ W9, 0x1
	0x03BB4D98 LSLV W9, W9, W8
	0x03BB4D9C MOVZ W10, 0x12
	0x03BB4DA0 ANDS W31, W9, W10, 0x0
	0x03BB4DA4 B.NE 0x3BB4DE0
	0x03BB4DA8 MOVZ W10, 0x24
	0x03BB4DAC ANDS W31, W9, W10, 0x0
	0x03BB4DB0 B.NE 0x3BB4DF4
	0x03BB4DB4 MOVZ W9, 0x1
	0x03BB4DB8 LSLV W8, W9, W8
	0x03BB4DBC MOVZ W9, 0x48
	0x03BB4DC0 ANDS W31, W8, W9, 0x0
	0x03BB4DC4 B.EQ 0x3BB4E0C
	0x03BB4DC8 LDR V0, [X19 + 0x8]
	0x03BB4DCC FADD S1, S9, S9
	0x03BB4DD0 FMOV S3, 0.5
	0x03BB4DD4 FMUL S1, S1, S3
	0x03BB4DD8 FSUB S0, S0, S2
	0x03BB4DDC B 0x3BB4E08
	0x03BB4DE0 LDR V1, [X19]
	0x03BB4DE4 FADD S2, S11, S11
	0x03BB4DE8 FMOV S3, 0.5
	0x03BB4DEC FSUB S0, S1, S0
	0x03BB4DF0 B 0x3BB4E04
	0x03BB4DF4 LDR V0, [X19 + 0x4]
	0x03BB4DF8 FADD S2, S10, S10
	0x03BB4DFC FMOV S3, 0.5
	0x03BB4E00 FSUB S0, S0, S1
	0x03BB4E04 FMUL S1, S2, S3
	0x03BB4E08 FADD S8, S1, S0
	0x03BB4E0C MOV V0.16B, V8.16B
	0x03BB4E10 LDP X20, X19, [X31 + 0x30]
	0x03BB4E14 LDP X30, X21, [X31 + 0x20]
	0x03BB4E18 LDP D9, D8, [X31 + 0x10]
	0x03BB4E1C LDP D11, D10, [X31], #0x40
	0x03BB4E20 RET
	0x03BB4E24 BL 0x1C16F20
	0x03BB4E28 SUB X31, X31, 0xA0
	0x03BB4E2C STR D14, [X31 + 0x40]
	0x03BB4E30 STP D13, D12, [X31 + 0x48]
	0x03BB4E34 STP D11, D10, [X31 + 0x58]
	0x03BB4E38 STP D9, D8, [X31 + 0x68]
	0x03BB4E3C STR X30, [X31 + 0x78]
	0x03BB4E40 STP X22, X21, [X31 + 0x80]
	0x03BB4E44 STP X20, X19, [X31 + 0x90]
	0x03BB4E48 ADRP X21, 0x82E000
	0x03BB4E4C ADRP X22, 0x53F000
	0x03BB4E50 LDRB W8, [X21 + 0xCF1]
	0x03BB4E54 LDR X22, [X22 + 0x598]
	0x03BB4E58 MOV X20, X1
	0x03BB4E5C MOV X19, X0
	0x03BB4E60 TBNZ X8, 0x0, 0x3BB4E84
	0x03BB4E64 ADRP X0, 0x5A7000
	0x03BB4E68 LDR X0, [X0 + 0x1F8]
	0x03BB4E6C BL 0x1C16CF4
	0x03BB4E70 ADRP X0, 0x53F000
	0x03BB4E74 LDR X0, [X0 + 0x598]
	0x03BB4E78 BL 0x1C16CF4
	0x03BB4E7C MOVZ W8, 0x1
	0x03BB4E80 STRB W8, [X21 + 0xCF1]
	0x03BB4E84 LDR X0, [X22]
	0x03BB4E88 LDR W8, [X0 + 0xE0]
	0x03BB4E8C CBNZ W8, 0x3BB4E94
	0x03BB4E90 BL 0x1C16DFC
	0x03BB4E94 MOV X0, X20
	0x03BB4E98 MOV X1, X31
	0x03BB4E9C MOV X2, X31
	0x03BB4EA0 BL 0x3C3883C
	0x03BB4EA4 TBNZ X0, 0x0, 0x3BB4FA0
	0x03BB4EA8 CBZ X20, 0x3BB4FC4
	0x03BB4EAC MOV X0, X20
	0x03BB4EB0 MOV X1, X31
	0x03BB4EB4 BL 0x3C3F58C
	0x03BB4EB8 MOVZ W2, 0x1
	0x03BB4EBC MOV X0, X19
	0x03BB4EC0 MOV X1, X20
	0x03BB4EC4 MOV V8.16B, V0.16B
	0x03BB4EC8 MOV V9.16B, V1.16B
	0x03BB4ECC MOV V10.16B, V2.16B
	0x03BB4ED0 MOVZ W21, 0x1
	0x03BB4ED4 BL 0x3BB4FD0
	0x03BB4ED8 ADRP X20, 0x824000
	0x03BB4EDC LDR V14, [X19 + 0x10]
	0x03BB4EE0 LDRB W8, [X20 + 0x783]
	0x03BB4EE4 LDR X19, [X19 + 0x18]
	0x03BB4EE8 MOV V12.16B, V0.16B
	0x03BB4EEC MOV V13.16B, V1.16B
	0x03BB4EF0 MOV V11.16B, V2.16B
	0x03BB4EF4 STRB W31, [X31 + 0x6]
	0x03BB4EF8 STRH W31, [X31 + 0x4]
	0x03BB4EFC CBNZ W8, 0x3BB4F10
	0x03BB4F00 ADRP X0, 0x53F000
	0x03BB4F04 LDR X0, [X0 + 0x5A0]
	0x03BB4F08 BL 0x1C16CF4
	0x03BB4F0C STRB W21, [X20 + 0x783]
	0x03BB4F10 ADRP X8, 0x53F000
	0x03BB4F14 LDR X8, [X8 + 0x5A0]
	0x03BB4F18 LDRH W9, [X31 + 0x4]
	0x03BB4F1C LDRB W10, [X31 + 0x6]
	0x03BB4F20 LDR X8, [X8]
	0x03BB4F24 LDR X8, [X8 + 0xB8]
	0x03BB4F28 LDR V1, [X8]
	0x03BB4F2C LDR V0, [X8 + 0x8]
	0x03BB4F30 STRH W9, [X31]
	0x03BB4F34 STRB W10, [X31 + 0x2]
	0x03BB4F38 CBZ X19, 0x3BB4FC4
	0x03BB4F3C ADRP X9, 0x5A7000
	0x03BB4F40 LDRH W8, [X31]
	0x03BB4F44 LDR X9, [X9 + 0x1F8]
	0x03BB4F48 FMUL S2, S12, S14
	0x03BB4F4C FMUL S3, S13, S14
	0x03BB4F50 STURH W8, [X31 + 0x9]
	0x03BB4F54 LDRB W8, [X31 + 0x2]
	0x03BB4F58 LDR X2, [X9]
	0x03BB4F5C FMUL S4, S11, S14
	0x03BB4F60 STR D1, [X31 + 0x28]
	0x03BB4F64 STR S0, [X31 + 0x30]
	0x03BB4F68 FADD S0, S8, S2
	0x03BB4F6C FADD S1, S9, S3
	0x03BB4F70 FADD S2, S10, S4
	0x03BB4F74 ADD X1, X31, 0x8
	0x03BB4F78 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 288
	002 Move [X31+128], D15
	003 Move [X31+136], D14
	004 Move [X31+144], D13
	005 Move [X31+152], D12
	006 Move [X31+160], D11
	007 Move [X31+168], D10
	008 Move [X31+176], D9
	009 Move [X31+184], D8
	010 Move [X31+192], X29
	011 Move [X31+200], X30
	012 Move [X31+208], X28
	013 Move [X31+216], X27
	014 Move [X31+224], X26
	015 Move [X31+232], X25
	016 Move [X31+240], X24
	017 Move [X31+248], X23
	018 Move [X31+256], X22
	019 Move [X31+264], X21
	020 Move [X31+272], X20
	021 Move [X31+280], X19
	022 Move X22, 0x82F000
	023 Move W8, [X22+3308]
	024 Move X19, X2
	025 Move V12, V6
	026 Move V10, V5
	027 Move V11, V4
	028 Move V9, V3
	029 Move V13, V2
	030 Move V14, V1
	031 Move V8, V0
	032 Move X21, X1
	033 Move X20, X0
	034 Move TEMP, X8
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfEqual {82}
	038 Move X0, 0x5A8000
	039 Move X0, [X0+504]
	040 Call 0x1C17CF4
	041 Move X0, 0x5A9000
	042 Move X0, [X0+4024]
	043 Call 0x1C17CF4
	044 Move X0, 0x5A9000
	045 Move X0, [X0+4032]
	046 Call 0x1C17CF4
	047 Move X0, 0x5A9000
	048 Move X0, [X0+4040]
	049 Call 0x1C17CF4
	050 Move X0, 0x5A9000
	051 Move X0, [X0+4048]
	052 Call 0x1C17CF4
	053 Move X0, 0x5A9000
	054 Move X0, [X0+4056]
	055 Call 0x1C17CF4
	056 Move X0, 0x5A9000
	057 Move X0, [X0+4064]
	058 Call 0x1C17CF4
	059 Move X0, 0x5A9000
	060 Move X0, [X0+4072]
	061 Call 0x1C17CF4
	062 Move X0, 0x5A9000
	063 Move X0, [X0+4080]
	064 Call 0x1C17CF4
	065 Move X0, 0x5A9000
	066 Move X0, [X0+4088]
	067 Call 0x1C17CF4
	068 Move X0, 0x5AA000
	069 Move X0, [X0]
	070 Call 0x1C17CF4
	071 Move X0, 0x5AA000
	072 Move X0, [X0+8]
	073 Call 0x1C17CF4
	074 Move X0, 0x540000
	075 Move X0, [X0+1432]
	076 Call 0x1C17CF4
	077 Move X0, 0x5A7000
	078 Move X0, [X0+872]
	079 Call 0x1C17CF4
	080 Move W8, 1
	081 Move [X22+3308], W8
	082 Move [X31+64], X31
	083 Move [X31+56], W31
	084 Move [X31+48], X31
	085 Move X8, [X20+40]
	086 Compare X8, 0
	087 JumpIfEqual {103}
	088 Move X8, 0x540000
	089 Move X8, [X8+1432]
	090 Move X0, [X8]
	091 Move W8, [X0+224]
	092 Compare W8, 0
	093 JumpIfNotEqual {95}
	094 Call 0x1C17DFC
	095 Move X0, X19
	096 Move X1, X31
	097 Move X2, X31
	098 Call Object.op_Equality, X0, X1
	099 Move TEMP, X0
	100 And TEMP, TEMP, 1
	101 Compare TEMP, 1
	102 JumpIfNotEqual {104}
	103 Move W22, W31
	104 Move W2, 1
	105 Move X0, X20
	106 Move X1, X19
	107 Move [X31+20], S14
	108 Move [X31+28], S13
	109 Call XRPokeLogic.ComputeRotatedDepthEvaluationAxis, X0, X1, X2
	110 Move X8, [X20+40]
	111 Compare X8, 0
	112 JumpIfEqual {652}
	113 Move V15, V0
	114 Move V0, [X8+20]
	115 Move X22, 0x82E000
	116 Move W8, [X22+2247]
	117 Move V14, V2
	118 Add S2, S0, S12
	119 Multiply S0, S15, S2
	120 Move V13, V1
	121 Multiply S1, S1, S2
	122 Move [X31+4], S2
	123 Move [X31+12], S9
	124 Multiply S2, S14, S2
	125 Subtract S9, S9, S0
	126 Move [X31+12], S11
	127 Move [X31+20], S10
	128 Subtract S12, S11, S1
	129 Subtract S10, S10, S2
	130 Compare W8, 0
	131 JumpIfNotEqual {137}
	132 Move X0, 0x547000
	133 Move X0, [X0+1208]
	134 Call 0x1C17CF4
	135 Move W8, 1
	136 Move [X22+2247], W8
	137 Move X8, 0x547000
	138 Move X8, [X8+1208]
	139 Move [X31+28], S8
	140 Subtract S11, S9, S8
	141 Move S8, [X31+20]
	142 Move S5, [X31+24]
	143 Move X8, [X8]
	144 Move X22, 0x540000
	145 Multiply S0, S15, S15
	146 Multiply S1, S13, S13
	147 Move X8, [X8+184]
	148 Multiply S3, S14, S14
	149 Add S0, S0, S1
	150 Add S0, S3, S0
	151 Move V2, [X8]
	152 Move X22, [X22+1440]
	153 Subtract S9, S12, S8
	154 Subtract S10, S10, S5
	155 NotImplemented "Instruction FCMP not yet implemented."
	156 Move X23, 0x825000
	157 Move [X31+36], S15
	158 Move [X31+44], S13
	159 Move [X31+32], S14
	160 Move W8, [X23+1923]
	161 Move V15, V5
	162 Compare W8, 0
	163 JumpIfNotEqual {169}
	164 Move X0, 0x540000
	165 Move X0, [X0+1440]
	166 Call 0x1C17CF4
	167 Move W8, 1
	168 Move [X23+1923], W8
	169 Move X8, [X22]
	170 Move X8, [X8+184]
	171 Move S12, [X8]
	172 Move S13, [X8+4]
	173 Move V14, [X8+8]
	174 Move V4, V15
	175 Multiply S1, S4, S11
	176 Multiply S2, S13, S9
	177 Multiply S3, S14, S10
	178 Add S1, S1, S2
	179 Add S1, S3, S1
	180 Multiply S2, S4, S1
	181 Multiply S3, S13, S1
	182 Multiply S1, S14, S1
	183 Move V15, V5
	184 NotImplemented "Instruction FDIV not yet implemented."
	185 NotImplemented "Instruction FDIV not yet implemented."
	186 NotImplemented "Instruction FDIV not yet implemented."
	187 Move X24, 0x825000
	188 Move W8, [X24+1924]
	189 Compare W8, 0
	190 JumpIfNotEqual {196}
	191 Move X0, 0x540000
	192 Move X0, [X0+1448]
	193 Call 0x1C17CF4
	194 Move W8, 1
	195 Move [X24+1924], W8
	196 Move X24, 0x540000
	197 Move X24, [X24+1448]
	198 Move X0, [X24]
	199 Move W8, [X0+224]
	200 Compare W8, 0
	201 JumpIfNotEqual {203}
	202 Call 0x1C17DFC
	203 Move X25, 0x825000
	204 Move W8, [X25+1925]
	205 Multiply S0, S12, S12
	206 Multiply S1, S13, S13
	207 Add S12, S0, S1
	208 Multiply S13, S14, S14
	209 Compare W8, 0
	210 JumpIfNotEqual {216}
	211 Move X0, 0x540000
	212 Move X0, [X0+1448]
	213 Call 0x1C17CF4
	214 Move W8, 1
	215 Move [X25+1925], W8
	216 Move X0, [X24]
	217 Add S12, S12, S13
	218 Move V13, V15
	219 Move V14, V8
	220 Move W8, [X0+224]
	221 Compare W8, 0
	222 JumpIfNotEqual {224}
	223 Call 0x1C17DFC
	224 Move X8, -51154944
	225 Multiply S0, S11, S11
	226 Multiply S1, S9, S9
	227 Move V15, [X8+380]
	228 Add S0, S0, S1
	229 Multiply S1, S10, S10
	230 Move V8, [X31+36]
	231 Add S0, S1, S0
	232 NotImplemented "Instruction FSQRT not yet implemented."
	233 NotImplemented "Instruction FCMP not yet implemented."
	234 NotImplemented "Instruction FSQRT not yet implemented."
	235 NotImplemented "Instruction FDIV not yet implemented."
	236 NotImplemented "Instruction FDIV not yet implemented."
	237 NotImplemented "Instruction FDIV not yet implemented."
	238 Move W8, [X23+1923]
	239 Compare W8, 0
	240 JumpIfNotEqual {246}
	241 Move X0, 0x540000
	242 Move X0, [X0+1440]
	243 Call 0x1C17CF4
	244 Move W8, 1
	245 Move [X23+1923], W8
	246 Move X8, [X22]
	247 Move X8, [X8+184]
	248 Move S0, [X8]
	249 Move S1, [X8+4]
	250 Move V2, [X8+8]
	251 Move V3, [X31+40]
	252 Move V10, [X31+32]
	253 Multiply S0, S8, S0
	254 Move X8, [X20+40]
	255 Multiply S1, S3, S1
	256 Multiply S2, S10, S2
	257 Add S0, S0, S1
	258 Move V1, [X20+16]
	259 Add S9, S2, S0
	260 NotImplemented "Instruction FNEG not yet implemented."
	261 NotImplemented "Instruction FCMP not yet implemented."
	262 NotImplemented "Instruction FCSEL not yet implemented."
	263 Move S2, 1
	264 NotImplemented "Instruction FDIV not yet implemented."
	265 NotImplemented "Instruction FMIN not yet implemented."
	266 NotImplemented "Instruction FCMP not yet implemented."
	267 Move S1, W31
	268 NotImplemented "Instruction FCSEL not yet implemented."
	269 Compare X8, 0
	270 JumpIfEqual {652}
	271 Move W8, [X8+24]
	272 Compare W8, 0
	273 JumpIfEqual {412}
	274 Move X0, [X20+72]
	275 Compare X0, 0
	276 JumpIfEqual {652}
	277 Move X8, 0x5A9000
	278 Move X8, [X8+4024]
	279 Move X1, X21
	280 Move X2, [X8]
	281 Call Dictionary`2<Object, Boolean>.ContainsKey, X0, X1
	282 Move TEMP, X0
	283 And TEMP, TEMP, 1
	284 Compare TEMP, 1
	285 JumpIfEqual {295}
	286 Move X0, [X20+72]
	287 Compare X0, 0
	288 JumpIfEqual {652}
	289 Move X8, 0x5A9000
	290 Move X8, [X8+4080]
	291 Move X1, X21
	292 Move W2, W31
	293 Move X3, [X8]
	294 Call Dictionary`2<Object, Boolean>.set_Item, X0, X1, X2
	295 Move X0, [X20+72]
	296 Compare X0, 0
	297 JumpIfEqual {652}
	298 Move X8, 0x5A9000
	299 Move X8, [X8+4064]
	300 Move X1, X21
	301 Move X2, [X8]
	302 Call Dictionary`2<Object, Boolean>.get_Item, X0, X1
	303 NotImplemented "Instruction FCMP not yet implemented."
	304 Move TEMP, X0
	305 And TEMP, TEMP, 1
	306 Compare TEMP, 1
	307 JumpIfEqual {371}
	308 Move X0, [X20+56]
	309 Compare X0, 0
	310 JumpIfEqual {652}
	311 Move X8, 0x5A9000
	312 Move X8, [X8+4032]
	313 Add X2, X31, 48
	314 Move X1, X21
	315 Move X3, [X8]
	316 Call Dictionary`2<Object, Vector3>.TryGetValue, X0, X1, X2
	317 Move TEMP, X0
	318 And TEMP, TEMP, 1
	319 Compare TEMP, 1
	320 JumpIfNotEqual {399}
	321 Move X0, [X20+64]
	322 Compare X0, 0
	323 JumpIfEqual {652}
	324 Move [X31+24], S15
	325 Move X8, 0x5A9000
	326 Move X8, [X8+4056]
	327 Move X1, X21
	328 Move X2, [X8]
	329 Call Dictionary`2<Object, Object>.get_Item, X0, X1
	330 Compare X0, 0
	331 JumpIfEqual {652}
	332 Move S1, [X31+52]
	333 Move S2, [X31+56]
	334 Move V0, [X31+48]
	335 Move X1, X31
	336 Move V8, V14
	337 Move V15, V13
	338 Call Transform.TransformPoint, X0, X1
	339 Move W8, [X25+1925]
	340 Move V13, V0
	341 Move V9, V1
	342 Move V10, V2
	343 Compare W8, 0
	344 JumpIfNotEqual {350}
	345 Move X0, 0x540000
	346 Move X0, [X0+1448]
	347 Call 0x1C17CF4
	348 Move W8, 1
	349 Move [X25+1925], W8
	350 Move X0, [X24]
	351 Move V0, [X31+28]
	352 Move W8, [X0+224]
	353 Subtract S14, S13, S0
	354 Subtract S13, S9, S8
	355 Subtract S9, S10, S15
	356 Compare W8, 0
	357 JumpIfNotEqual {359}
	358 Call 0x1C17DFC
	359 Multiply S0, S14, S14
	360 Multiply S1, S13, S13
	361 Add S0, S0, S1
	362 Multiply S1, S9, S9
	363 Add S0, S1, S0
	364 NotImplemented "Instruction FSQRT not yet implemented."
	365 Move V0, [X31+24]
	366 Move V10, [X31+32]
	367 NotImplemented "Instruction FCMP not yet implemented."
	368 NotImplemented "Instruction FDIV not yet implemented."
	369 NotImplemented "Instruction FDIV not yet implemented."
	370 NotImplemented "Instruction FDIV not yet implemented."
	371 Move TEMP, X0
	372 And TEMP, TEMP, 1
	373 Compare TEMP, 1
	374 JumpIfEqual {412}
	375 Move W8, [X23+1923]
	376 Compare W8, 0
	377 JumpIfNotEqual {383}
	378 Move X0, 0x540000
	379 Move X0, [X0+1440]
	380 Call 0x1C17CF4
	381 Move W8, 1
	382 Move [X23+1923], W8
	383 Move X8, [X22]
	384 Move X8, [X8+184]
	385 Move S0, [X8]
	386 Move S1, [X8+4]
	387 Move V2, [X8+8]
	388 Move V14, V8
	389 Move S8, [X31+36]
	390 Move S3, [X31+40]
	391 Move V13, V15
	392 Move V15, [X31+24]
	393 Multiply S0, S8, S0
	394 Multiply S1, S3, S1
	395 Add S0, S0, S1
	396 Multiply S1, S10, S2
	397 Add S0, S1, S0
	398 NotImplemented "Instruction FCMP not yet implemented."
	399 Compare X21, 0
	400 JumpIfEqual {412}
	401 Move X8, 0x5A7000
	402 Move X8, [X8+872]
	403 Move X9, [X21]
	404 Move X8, [X8]
	405 Move W11, [X9+304]
	406 Move W10, [X8+304]
	407 NotImplemented "Instruction CMP not yet implemented."
	408 Move X9, [X9+200]
	409 Add X9, X9, X10
	410 NotImplemented "Instruction LDUR not yet implemented."
	411 NotImplemented "Instruction CMP not yet implemented."
	412 Move X8, -51159040
	413 Move V0, [X8+3924]
	414 Move W23, 1
	415 NotImplemented "Instruction FCMP not yet implemented."
	416 NotImplemented "Instruction CSET not yet implemented."
	417 Move W8, [X21+280]
	418 Compare W8, 0
	419 JumpIfEqual {412}
	420 Move X0, X21
	421 Move X1, X31
	422 Call XRBaseInteractor.GetAttachPointVelocity, X0
	423 Move X8, -51159040
	424 Move V5, [X8+3880]
	425 Multiply S3, S0, S0
	426 Multiply S4, S1, S1
	427 Add S3, S3, S4
	428 Multiply S4, S2, S2
	429 Add S9, S4, S3
	430 NotImplemented "Instruction FCMP not yet implemented."
	431 Move W8, [X25+1925]
	432 Compare W8, 0
	433 JumpIfNotEqual {445}
	434 Move X0, 0x540000
	435 Move X0, [X0+1448]
	436 Move [X31+20], S1
	437 Move [X31+28], S0
	438 Move [X31], S2
	439 Call 0x1C17CF4
	440 Move V2, [X31]
	441 Move S1, [X31+20]
	442 Move S0, [X31+24]
	443 Move W8, 1
	444 Move [X25+1925], W8
	445 Move X0, [X24]
	446 Move W8, [X0+224]
	447 Compare W8, 0
	448 JumpIfNotEqual {456}
	449 Move [X31+20], S1
	450 Move [X31+28], S0
	451 Move [X31], S2
	452 Call 0x1C17DFC
	453 Move V2, [X31]
	454 Move S1, [X31+20]
	455 Move S0, [X31+24]
	456 NotImplemented "Instruction FSQRT not yet implemented."
	457 NotImplemented "Instruction FCMP not yet implemented."
	458 NotImplemented "Instruction FDIV not yet implemented."
	459 NotImplemented "Instruction FDIV not yet implemented."
	460 NotImplemented "Instruction FDIV not yet implemented."
	461 Move W8, [X23+1923]
	462 Compare W8, 0
	463 JumpIfNotEqual {469}
	464 Move X0, 0x540000
	465 Move X0, [X0+1440]
	466 Call 0x1C17CF4
	467 Move W8, 1
	468 Move [X23+1923], W8
	469 Move X8, [X22]
	470 Move X8, [X8+184]
	471 Move S4, [X8]
	472 Move S1, [X8+4]
	473 Move V0, [X8+8]
	474 NotImplemented "Instruction FNEG not yet implemented."
	475 Multiply S1, S8, S4
	476 Move V4, [X31+40]
	477 Move V3, [X20+48]
	478 Multiply S0, S10, S0
	479 Multiply S2, S4, S2
	480 Subtract S1, S2, S1
	481 Subtract S0, S1, S0
	482 NotImplemented "Instruction FCMP not yet implemented."
	483 Move W23, W31
	484 Move W22, W31
	485 Move S12, 1
	486 Move X0, [X20+72]
	487 Compare X0, 0
	488 JumpIfEqual {652}
	489 Move X8, 0x5A9000
	490 Move X8, [X8+4080]
	491 Move X1, X21
	492 Move W2, W23
	493 Move X3, [X8]
	494 Call Dictionary`2<Object, Boolean>.set_Item, X0, X1, X2
	495 Move X0, [X20+88]
	496 Compare X0, 0
	497 JumpIfEqual {652}
	498 Move X8, 0x5A9000
	499 Move X8, [X8+4072]
	500 Move X1, X21
	501 Move V0, V12
	502 Move X2, [X8]
	503 Call Dictionary`2<Object, Single>.set_Item, X0, X1, V0
	504 Move S9, W31
	505 Move S1, W31
	506 Move TEMP, X22
	507 And TEMP, TEMP, 1
	508 Compare TEMP, 1
	509 JumpIfEqual {576}
	510 Move X0, [X20+80]
	511 Compare X0, 0
	512 JumpIfEqual {652}
	513 Move X8, 0x5A9000
	514 Move X8, [X8+4040]
	515 Add X2, X31, 64
	516 Move X1, X19
	517 Move X3, [X8]
	518 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	519 Move TEMP, X0
	520 And TEMP, TEMP, 1
	521 Compare TEMP, 1
	522 JumpIfNotEqual {575}
	523 Move X0, [X31+64]
	524 Compare X0, 0
	525 JumpIfEqual {652}
	526 Move X8, 0x5AA000
	527 Move X8, [X8]
	528 Move X1, [X8]
	529 Call 0x2D58B54, X0
	530 NotImplemented "Instruction CMP not yet implemented."
	531 Move X8, [X31+64]
	532 Compare X8, 0
	533 JumpIfEqual {652}
	534 Move X25, [X8+16]
	535 Compare X25, 0
	536 JumpIfEqual {652}
	537 Move X27, 0x5AA000
	538 Move X28, 0x5A9000
	539 Move X27, [X27+8]
	540 Move X28, [X28+4048]
	541 Move W24, W0
	542 Move W26, W31
	543 Move X8, [X25]
	544 Move X1, [X27]
	545 NotImplemented "Instruction LDRH not yet implemented."
	546 Compare X9, 0
	547 JumpIfEqual {554}
	548 Move X10, [X8+176]
	549 Add X10, X10, 8
	550 NotImplemented "Instruction LDUR not yet implemented."
	551 NotImplemented "Instruction CMP not yet implemented."
	552 Subtract X9, X9, 1
	553 Add X10, X10, 16
	554 Move X0, X25
	555 Move W2, W31
	556 Call 0x1C5D788
	557 NotImplemented "Instruction LDRSW not yet implemented."
	558 Add X8, X8, X9
	559 Add X0, X8, 312
	560 Move X8, [X0]
	561 Move X2, [X0+8]
	562 Move X0, X25
	563 Move W1, W26
	564 NotImplemented "Instruction BLR not yet implemented."
	565 NotImplemented "Instruction CMP not yet implemented."
	566 Move X1, X0
	567 Move X0, [X20+88]
	568 Compare X0, 0
	569 JumpIfEqual {652}
	570 Move X2, [X28]
	571 Call Dictionary`2<Object, Single>.get_Item, X0, X1
	572 NotImplemented "Instruction FCMP not yet implemented."
	573 Add W26, W26, 1
	574 NotImplemented "Instruction CMP not yet implemented."
	575 Move V1, [X31+4]
	576 Move S0, 1
	577 Move V2, [X20+16]
	578 NotImplemented "Instruction FCMP not yet implemented."
	579 NotImplemented "Instruction FCSEL not yet implemented."
	580 NotImplemented "Instruction CMP not yet implemented."
	581 NotImplemented "Instruction FCSEL not yet implemented."
	582 NotImplemented "Instruction CMP not yet implemented."
	583 NotImplemented "Instruction FCSEL not yet implemented."
	584 Multiply S3, S3, S2
	585 Move X0, [X20+24]
	586 Add S1, S1, S3
	587 NotImplemented "Instruction FCMP not yet implemented."
	588 NotImplemented "Instruction FCSEL not yet implemented."
	589 NotImplemented "Instruction FCMP not yet implemented."
	590 NotImplemented "Instruction FCSEL not yet implemented."
	591 Move [X31+46], W31
	592 NotImplemented "Instruction STRH not yet implemented."
	593 Compare X0, 0
	594 JumpIfEqual {652}
	595 Move X9, 0x5A8000
	596 Move V5, [X31+40]
	597 NotImplemented "Instruction LDRH not yet implemented."
	598 Move X9, [X9+504]
	599 Move V6, [X31+8]
	600 Move V4, [X31+12]
	601 Subtract S0, S0, S12
	602 NotImplemented "Instruction STURH not yet implemented."
	603 Move W8, [X31+46]
	604 Move [X31+76], S6
	605 Move [X31+84], S4
	606 Move V4, [X31+28]
	607 Move X2, [X9]
	608 Move [X31+100], S0
	609 Move [X31+108], S8
	610 Move V0, [X31+16]
	611 Multiply S2, S10, S1
	612 Multiply S3, S5, S1
	613 Multiply S1, S8, S1
	614 Add S2, S13, S2
	615 Add S3, S14, S3
	616 Add S1, S4, S1
	617 Add X1, X31, 72
	618 Move [X31+72], W22
	619 Move [X31+108], S5
	620 Move [X31+116], S10
	621 Move [X31+116], W31
	622 Move [X31+84], S0
	623 Move [X31+92], S1
	624 Move [X31+92], S3
	625 Move [X31+100], S2
	626 Move [X31+75], W8
	627 Move [X31+120], X19
	628 Call BindableVariableBase`1<PokeStateData>.set_Value, X0, X1
	629 Move W0, W22
	630 Move X20, [X31+272]
	631 Move X19, [X31+280]
	632 Move X22, [X31+256]
	633 Move X21, [X31+264]
	634 Move X24, [X31+240]
	635 Move X23, [X31+248]
	636 Move X26, [X31+224]
	637 Move X25, [X31+232]
	638 Move X28, [X31+208]
	639 Move X27, [X31+216]
	640 Move X29, [X31+192]
	641 Move X30, [X31+200]
	642 Move D9, [X31+176]
	643 Move D8, [X31+184]
	644 Move D11, [X31+160]
	645 Move D10, [X31+168]
	646 Move D13, [X31+144]
	647 Move D12, [X31+152]
	648 Move D15, [X31+128]
	649 Move D14, [X31+136]
	650 Add X31, X31, 288
	651 Return X0
	652 Call 0x1C17F20

Method: UnityEngine.Vector3 ComputeRotatedDepthEvaluationAxis(UnityEngine.Transform associatedTransform, System.Boolean isWorldSpace = True)

Disassembly:
	0x03BB5FD0 LDR X19, [X19 + 0x30]
	0x03BB5FD4 MOV X20, X0
	0x03BB5FD8 MOV X0, X31
	0x03BB5FDC BL 0x3C3C6C4
	0x03BB5FE0 CBZ X19, 0x3BB6010
	0x03BB5FE4 ADRP X8, 0x5A5000
	0x03BB5FE8 LDR X8, [X8 + 0xD60]
	0x03BB5FEC MOV X0, X19
	0x03BB5FF0 MOV X1, X20
	0x03BB5FF4 LDP X20, X19, [X31 + 0x10]
	0x03BB5FF8 LDR X2, [X8]
	0x03BB5FFC LDP X30, X21, [X31], #0x20
	0x03BB6000 B 0x2AB4A74
	0x03BB6004 LDP X20, X19, [X31 + 0x10]
	0x03BB6008 LDP X30, X21, [X31], #0x20
	0x03BB600C RET
	0x03BB6010 BL 0x1C16F20
	0x03BB6014 STR X30, [X31 - 0x30]!
	0x03BB6018 STP X22, X21, [X31 + 0x10]
	0x03BB601C STP X20, X19, [X31 + 0x20]
	0x03BB6020 ADRP X22, 0x82C000
	0x03BB6024 ADRP X21, 0x5A4000
	0x03BB6028 LDRB W8, [X22 + 0xCFC]
	0x03BB602C LDR X21, [X21 + 0x328]
	0x03BB6030 MOV X20, X1
	0x03BB6034 MOV X19, X0
	0x03BB6038 TBNZ X8, 0x0, 0x3BB6074
	0x03BB603C ADRP X0, 0x5A4000
	0x03BB6040 LDR X0, [X0 + 0x328]
	0x03BB6044 BL 0x1C16CF4
	0x03BB6048 ADRP X0, 0x5A4000
	0x03BB604C LDR X0, [X0 + 0x188]
	0x03BB6050 BL 0x1C16CF4
	0x03BB6054 ADRP X0, 0x5A4000
	0x03BB6058 LDR X0, [X0 + 0x1B0]
	0x03BB605C BL 0x1C16CF4
	0x03BB6060 ADRP X0, 0x5A7000
	0x03BB6064 LDR X0, [X0 + 0xD8]
	0x03BB6068 BL 0x1C16CF4
	0x03BB606C MOVZ W8, 0x1
	0x03BB6070 STRB W8, [X22 + 0xCFC]
	0x03BB6074 LDR X1, [X21]
	0x03BB6078 MOV X0, X20
	0x03BB607C BL 0x1C16E00
	0x03BB6080 CBZ X0, 0x3BB60D8
	0x03BB6084 LDR X8, [X0]
	0x03BB6088 LDR X1, [X21]
	0x03BB608C ADRP X22, 0x5A4000
	0x03BB6090 ADRP X21, 0x5A7000
	0x03BB6094 LDRH W9, [X8 + 0x12E]
	0x03BB6098 LDR X22, [X22 + 0x188]
	0x03BB609C LDR X21, [X21 + 0xD8]
	0x03BB60A0 MOV X20, X0
	0x03BB60A4 CBZ X9, 0x3BB60C8
	0x03BB60A8 LDR X10, [X8 + 0xB0]
	0x03BB60AC ADD X10, X10, 0x8
	0x03BB60B0 LDUR X11, [X10 - 0x8]
	0x03BB60B4 CMP X11, X1
	0x03BB60B8 B.EQ 0x3BB60E8
	0x03BB60BC SUBS X9, X9, 0x1
	0x03BB60C0 ADD X10, X10, 0x10
	0x03BB60C4 B.NE 0x3BB60B0
	0x03BB60C8 MOV X0, X20
	0x03BB60CC MOV W2, W31
	0x03BB60D0 BL 0x1C5C788
	0x03BB60D4 B 0x3BB60F4
	0x03BB60D8 LDP X20, X19, [X31 + 0x20]
	0x03BB60DC LDP X22, X21, [X31 + 0x10]
	0x03BB60E0 LDR X30, [X31], #0x30
	0x03BB60E4 RET
	0x03BB60E8 LDRSW X9, [X10]
	0x03BB60EC ADD X8, X8, X9, 0x4, LSL
	0x03BB60F0 ADD X0, X8, 0x138
	0x03BB60F4 LDP X8, X1, [X0]
	0x03BB60F8 MOV X0, X20
	0x03BB60FC BLR X8
	0x03BB6100 LDR X8, [X22]
	0x03BB6104 MOV X20, X0
	0x03BB6108 MOV X0, X8
	0x03BB610C BL 0x1C16F10
	0x03BB6110 LDR X2, [X21]
	0x03BB6114 MOV X1, X19
	0x03BB6118 MOV X3, X31
	0x03BB611C MOV X21, X0
	0x03BB6120 BL 0x2725C6C
	0x03BB6124 CBZ X20, 0x3BB614C
	0x03BB6128 ADRP X8, 0x5A4000
	0x03BB612C LDR X8, [X8 + 0x1B0]
	0x03BB6130 MOV X0, X20
	0x03BB6134 MOV X1, X21
	0x03BB6138 LDP X20, X19, [X31 + 0x20]
	0x03BB613C LDR X2, [X8]
	0x03BB6140 LDP X22, X21, [X31 + 0x10]
	0x03BB6144 LDR X30, [X31], #0x30
	0x03BB6148 B 0x2729B68
	0x03BB614C BL 0x1C16F20
	0x03BB6150 STR X30, [X31 - 0x30]!
	0x03BB6154 STP X22, X21, [X31 + 0x10]
	0x03BB6158 STP X20, X19, [X31 + 0x20]
	0x03BB615C ADRP X22, 0x82C000
	0x03BB6160 ADRP X21, 0x5A4000
	0x03BB6164 LDRB W8, [X22 + 0xCFD]
	0x03BB6168 LDR X21, [X21 + 0x328]
	0x03BB616C MOV X20, X1
	0x03BB6170 MOV X19, X0
	0x03BB6174 TBNZ X8, 0x0, 0x3BB61B0
	0x03BB6178 ADRP X0, 0x5A4000
	0x03BB617C LDR X0, [X0 + 0x328]
	0x03BB6180 BL 0x1C16CF4
	0x03BB6184 ADRP X0, 0x5A4000
	0x03BB6188 LDR X0, [X0 + 0x188]
	0x03BB618C BL 0x1C16CF4
	0x03BB6190 ADRP X0, 0x5A4000
	0x03BB6194 LDR X0, [X0 + 0x1F0]
	0x03BB6198 BL 0x1C16CF4
	0x03BB619C ADRP X0, 0x5A7000
	0x03BB61A0 LDR X0, [X0 + 0xD8]
	0x03BB61A4 BL 0x1C16CF4
	0x03BB61A8 MOVZ W8, 0x1
	0x03BB61AC STRB W8, [X22 + 0xCFD]
	0x03BB61B0 LDR X1, [X21]
	0x03BB61B4 MOV X0, X20
	0x03BB61B8 BL 0x1C16E00
	0x03BB61BC CBZ X0, 0x3BB6214
	0x03BB61C0 LDR X8, [X0]
	0x03BB61C4 LDR X1, [X21]
	0x03BB61C8 ADRP X22, 0x5A4000
	0x03BB61CC ADRP X21, 0x5A7000
	0x03BB61D0 LDRH W9, [X8 + 0x12E]
	0x03BB61D4 LDR X22, [X22 + 0x188]
	0x03BB61D8 LDR X21, [X21 + 0xD8]
	0x03BB61DC MOV X20, X0
	0x03BB61E0 CBZ X9, 0x3BB6204
	0x03BB61E4 LDR X10, [X8 + 0xB0]
	0x03BB61E8 ADD X10, X10, 0x8
	0x03BB61EC LDUR X11, [X10 - 0x8]
	0x03BB61F0 CMP X11, X1
	0x03BB61F4 B.EQ 0x3BB6224
	0x03BB61F8 SUBS X9, X9, 0x1
	0x03BB61FC ADD X10, X10, 0x10
	0x03BB6200 B.NE 0x3BB61EC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X22, 0x82E000
	007 Move W8, [X22+3309]
	008 Move W21, W2
	009 Move X20, X1
	010 Move X19, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x53F000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X22+3309], W8
	020 Move X8, [X19+40]
	021 Compare X8, 0
	022 JumpIfEqual {38}
	023 Move X8, 0x53E000
	024 Move X8, [X8+1432]
	025 Move X0, [X8]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X20
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Equality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {60}
	038 Move X19, 0x823000
	039 Move W8, [X19+1923]
	040 Compare W8, 0
	041 JumpIfNotEqual {47}
	042 Move X0, 0x53E000
	043 Move X0, [X0+1440]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X19+1923], W8
	047 Move X8, 0x53E000
	048 Move X8, [X8+1440]
	049 Move X8, [X8]
	050 Move X8, [X8+184]
	051 Move S0, [X8]
	052 Move S1, [X8+4]
	053 Move V2, [X8+8]
	054 Move X20, [X31+32]
	055 Move X19, [X31+40]
	056 Move X22, [X31+16]
	057 Move X21, [X31+24]
	058 Move X30, [X31+48]
	059 Return X0
	060 Move X22, 0x823000
	061 Move W8, [X22+1923]
	062 Compare W8, 0
	063 JumpIfNotEqual {69}
	064 Move X0, 0x53E000
	065 Move X0, [X0+1440]
	066 Call 0x1C17CF4
	067 Move W8, 1
	068 Move [X22+1923], W8
	069 Move X9, [X19+40]
	070 Compare X9, 0
	071 JumpIfEqual {166}
	072 Move X22, 0x53E000
	073 Move X22, [X22+1440]
	074 Move W9, [X9+16]
	075 Move X8, [X22]
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Move X8, [X8+184]
	078 Move S0, [X8]
	079 Move S1, [X8+4]
	080 Move V2, [X8+8]
	081 Move W10, 1
	082 NotImplemented "Instruction LSLV not yet implemented."
	083 Move W11, 18
	084 And W31, W10, W11
	085 Move W11, 36
	086 And W31, W10, W11
	087 Move W10, 1
	088 NotImplemented "Instruction LSLV not yet implemented."
	089 Move W10, 72
	090 And W31, W9, W10
	091 Move TEMP, X21
	092 And TEMP, TEMP, 1
	093 Compare TEMP, 1
	094 JumpIfNotEqual {118}
	095 Compare X20, 0
	096 JumpIfEqual {166}
	097 Move X0, X20
	098 Move X1, X31
	099 Call Transform.get_forward, X0
	100 Move TEMP, X21
	101 And TEMP, TEMP, 1
	102 Compare TEMP, 1
	103 JumpIfNotEqual {131}
	104 Compare X20, 0
	105 JumpIfEqual {166}
	106 Move X0, X20
	107 Move X1, X31
	108 Call Transform.get_right, X0
	109 Move TEMP, X21
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {144}
	113 Compare X20, 0
	114 JumpIfEqual {166}
	115 Move X0, X20
	116 Move X1, X31
	117 Call Transform.get_up, X0
	118 Move X20, 0x823000
	119 Move W9, [X20+2591]
	120 Compare W9, 0
	121 JumpIfNotEqual {128}
	122 Move X0, X22
	123 Call 0x1C17CF4
	124 Move X8, [X22]
	125 Move W9, 1
	126 Move [X20+2591], W9
	127 Move X8, [X8+184]
	128 Move S0, [X8+72]
	129 Move S1, [X8+76]
	130 Move V2, [X8+80]
	131 Move X20, 0x823000
	132 Move W9, [X20+2928]
	133 Compare W9, 0
	134 JumpIfNotEqual {141}
	135 Move X0, X22
	136 Call 0x1C17CF4
	137 Move X8, [X22]
	138 Move W9, 1
	139 Move [X20+2928], W9
	140 Move X8, [X8+184]
	141 Move S0, [X8+60]
	142 Move S1, [X8+64]
	143 Move V2, [X8+68]
	144 Move X20, 0x823000
	145 Move W9, [X20+1926]
	146 Compare W9, 0
	147 JumpIfNotEqual {154}
	148 Move X0, X22
	149 Call 0x1C17CF4
	150 Move X8, [X22]
	151 Move W9, 1
	152 Move [X20+1926], W9
	153 Move X8, [X8+184]
	154 Move S0, [X8+24]
	155 Move S1, [X8+28]
	156 Move V2, [X8+32]
	157 Move X8, [X19+40]
	158 Compare X8, 0
	159 JumpIfEqual {166}
	160 Move W8, [X8+16]
	161 Subtract W8, W8, 1
	162 NotImplemented "Instruction CMP not yet implemented."
	163 NotImplemented "Instruction FNEG not yet implemented."
	164 NotImplemented "Instruction FNEG not yet implemented."
	165 NotImplemented "Instruction FNEG not yet implemented."
	166 Call 0x1C17F20

Method: System.Single ComputeInteractionAxisLength(UnityEngine.Bounds bounds)

Disassembly:
	0x03BB5CF4 STRB W8, [X22 + 0xCFA]
	0x03BB5CF8 STRH W31, [X31 + 0x1C]
	0x03BB5CFC ADRP X22, 0x824000
	0x03BB5D00 LDRB W8, [X22 + 0x5AA]
	0x03BB5D04 LDR V9, [X19 + 0x2C]
	0x03BB5D08 CBNZ W8, 0x3BB5D20
	0x03BB5D0C ADRP X0, 0x545000
	0x03BB5D10 LDR X0, [X0 + 0x4B8]
	0x03BB5D14 BL 0x1C16CF4
	0x03BB5D18 MOVZ W8, 0x1
	0x03BB5D1C STRB W8, [X22 + 0x5AA]
	0x03BB5D20 ADRP X8, 0x545000
	0x03BB5D24 LDR X8, [X8 + 0x4B8]
	0x03BB5D28 ADRP X9, 0xFFFFFFFFFCF35000
	0x03BB5D2C LDR V0, [X9 + 0x240]
	0x03BB5D30 FABS S1, S9
	0x03BB5D34 LDR X8, [X8]
	0x03BB5D38 FMOV S8, W31
	0x03BB5D3C FMAXNM S1, S1, S8
	0x03BB5D40 FMUL S0, S1, S0
	0x03BB5D44 LDR X8, [X8 + 0xB8]
	0x03BB5D48 FMOV S1, 8
	0x03BB5D4C LDR V2, [X8]
	0x03BB5D50 FMUL S1, S2, S1
	0x03BB5D54 FCMP S0, S1
	0x03BB5D58 FCSEL S0, S0, S1, GT
	0x03BB5D5C FABD S1, S8, S8
	0x03BB5D60 FCMP S1, S0
	0x03BB5D64 B.MI 0x3BB5ED0
	0x03BB5D68 ADD X0, X31, 0x1C
	0x03BB5D6C MOVZ W1, 0x1
	0x03BB5D70 MOV X2, X31
	0x03BB5D74 BL 0x3B8EDDC
	0x03BB5D78 CBZ X21, 0x3BB5D9C
	0x03BB5D7C ADRP X8, 0x5A5000
	0x03BB5D80 LDR X8, [X8 + 0x368]
	0x03BB5D84 LDR X9, [X21]
	0x03BB5D88 LDR X8, [X8]
	0x03BB5D8C LDRB W11, [X9 + 0x130]
	0x03BB5D90 LDRB W10, [X8 + 0x130]
	0x03BB5D94 CMP W11, W10
	0x03BB5D98 B.CS 0x3BB5E68
	0x03BB5D9C MOV X22, X31
	0x03BB5DA0 CBZ X20, 0x3BB5E80
	0x03BB5DA4 ADRP X8, 0x5A5000
	0x03BB5DA8 LDR X8, [X8 + 0x438]
	0x03BB5DAC LDR X9, [X20]
	0x03BB5DB0 LDR X8, [X8]
	0x03BB5DB4 LDRB W11, [X9 + 0x130]
	0x03BB5DB8 LDRB W10, [X8 + 0x130]
	0x03BB5DBC CMP W11, W10
	0x03BB5DC0 B.CC 0x3BB5E20
	0x03BB5DC4 LDR X9, [X9 + 0xC8]
	0x03BB5DC8 ADD X9, X9, X10, 0x3, LSL
	0x03BB5DCC LDUR X9, [X9 - 0x8]
	0x03BB5DD0 CMP X9, X8
	0x03BB5DD4 B.NE 0x3BB5E20
	0x03BB5DD8 ADRP X8, 0x53E000
	0x03BB5DDC LDR X8, [X8 + 0x598]
	0x03BB5DE0 LDR X0, [X8]
	0x03BB5DE4 LDR W8, [X0 + 0xE0]
	0x03BB5DE8 CBNZ W8, 0x3BB5DF0
	0x03BB5DEC BL 0x1C16DFC
	0x03BB5DF0 MOV X0, X22
	0x03BB5DF4 MOV X1, X31
	0x03BB5DF8 MOV X2, X31
	0x03BB5DFC BL 0x3C354F8
	0x03BB5E00 TBZ X0, 0x0, 0x3BB5E20
	0x03BB5E04 LDR X8, [X20]
	0x03BB5E08 LDR X9, [X8 + 0x808]
	0x03BB5E0C LDR X2, [X8 + 0x810]
	0x03BB5E10 MOV X0, X20
	0x03BB5E14 MOV X1, X22
	0x03BB5E18 BLR X9
	0x03BB5E1C B 0x3BB5EA4
	0x03BB5E20 ADRP X10, 0x5A5000
	0x03BB5E24 LDR X8, [X20]

ISIL:
	001 Move [X31-64], D11
	002 Move [X31-56], D10
	003 Move [X31+16], D9
	004 Move [X31+24], D8
	005 Move [X31+32], X30
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Move X21, 0x82E000
	010 Move W8, [X21+3310]
	011 Move X19, X1
	012 Move X20, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {22}
	017 Move X0, 0x53F000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3310], W8
	022 Move X8, [X20+40]
	023 Move S8, W31
	024 Compare X8, 0
	025 JumpIfEqual {80}
	026 Move X8, 0x53F000
	027 Move X8, [X8+1432]
	028 Move X21, [X20+32]
	029 Move X0, [X8]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfEqual {80}
	042 Move X0, [X20+32]
	043 Compare X0, 0
	044 JumpIfEqual {90}
	045 Move S11, [X19+12]
	046 Move S10, [X19+16]
	047 Move V9, [X19+20]
	048 Move X1, X31
	049 Call Transform.get_position, X0
	050 Move X8, [X20+40]
	051 Compare X8, 0
	052 JumpIfEqual {90}
	053 Move W8, [X8+16]
	054 NotImplemented "Instruction CMP not yet implemented."
	055 Move W9, 1
	056 NotImplemented "Instruction LSLV not yet implemented."
	057 Move W10, 18
	058 And W31, W9, W10
	059 Move W10, 36
	060 And W31, W9, W10
	061 Move W9, 1
	062 NotImplemented "Instruction LSLV not yet implemented."
	063 Move W9, 72
	064 And W31, W8, W9
	065 Move V0, [X19+8]
	066 Add S1, S9, S9
	067 Move S3, 0.5
	068 Multiply S1, S1, S3
	069 Subtract S0, S0, S2
	070 Move V1, [X19]
	071 Add S2, S11, S11
	072 Move S3, 0.5
	073 Subtract S0, S1, S0
	074 Move V0, [X19+4]
	075 Add S2, S10, S10
	076 Move S3, 0.5
	077 Subtract S0, S0, S1
	078 Multiply S1, S2, S3
	079 Add S8, S1, S0
	080 Move V0, V8
	081 Move X20, [X31+48]
	082 Move X19, [X31+56]
	083 Move X30, [X31+32]
	084 Move X21, [X31+40]
	085 Move D9, [X31+16]
	086 Move D8, [X31+24]
	087 Move D11, [X31+64]
	088 Move D10, [X31+72]
	089 Return V0
	090 Call 0x1C17F20

Method: System.Void OnHoverEntered(System.Object interactor, UnityEngine.Pose updatedPose, UnityEngine.Transform pokedTransform)

Disassembly:
	0x03BB51EC B.HI 0x3BB5074
	0x03BB51F0 FNEG S0, S0
	0x03BB51F4 FNEG S1, S1
	0x03BB51F8 FNEG S2, S2
	0x03BB51FC B 0x3BB5074
	0x03BB5200 BL 0x1C16F20
	0x03BB5204 STP D15, D14, [X31 - 0x70]!
	0x03BB5208 STP D13, D12, [X31 + 0x10]
	0x03BB520C STP D11, D10, [X31 + 0x20]
	0x03BB5210 STP D9, D8, [X31 + 0x30]
	0x03BB5214 STR X30, [X31 + 0x40]
	0x03BB5218 STP X22, X21, [X31 + 0x50]
	0x03BB521C STP X20, X19, [X31 + 0x60]
	0x03BB5220 CBZ X1, 0x3BB5330
	0x03BB5224 MOV X21, X1
	0x03BB5228 MOV X20, X0
	0x03BB522C MOV X0, X1
	0x03BB5230 MOV X1, X31
	0x03BB5234 MOV W22, W2
	0x03BB5238 MOV X19, X8
	0x03BB523C BL 0x3C3FBAC
	0x03BB5240 MOV V8.16B, V0.16B
	0x03BB5244 MOV V9.16B, V1.16B
	0x03BB5248 MOV V10.16B, V2.16B
	0x03BB524C LDP S0, S1, [X20 + 0xC]
	0x03BB5250 LDR V2, [X20 + 0x14]
	0x03BB5254 MOV X0, X31
	0x03BB5258 FADD S3, S0, S0
	0x03BB525C FADD S4, S1, S1
	0x03BB5260 FADD S5, S2, S2
	0x03BB5264 MOV V0.16B, V8.16B
	0x03BB5268 MOV V1.16B, V9.16B
	0x03BB526C MOV V2.16B, V10.16B
	0x03BB5270 BL 0x3B26D68
	0x03BB5274 MOV V13.16B, V0.16B
	0x03BB5278 MOV V12.16B, V1.16B
	0x03BB527C MOV V11.16B, V2.16B
	0x03BB5280 STR S8, [X31 + 0x4C]
	0x03BB5284 TBZ X22, 0x0, 0x3BB52B4
	0x03BB5288 MOV X0, X21
	0x03BB528C MOV X1, X31
	0x03BB5290 BL 0x3C3DEB4
	0x03BB5294 MOV V4.16B, V13.16B
	0x03BB5298 MOV V5.16B, V12.16B
	0x03BB529C MOV V6.16B, V11.16B
	0x03BB52A0 MOV X0, X31
	0x03BB52A4 BL 0x3C2A9FC
	0x03BB52A8 MOV V13.16B, V0.16B
	0x03BB52AC MOV V12.16B, V1.16B
	0x03BB52B0 MOV V11.16B, V2.16B
	0x03BB52B4 MOV X0, X21
	0x03BB52B8 MOV X1, X31
	0x03BB52BC BL 0x3C3F58C
	0x03BB52C0 MOV V14.16B, V0.16B
	0x03BB52C4 LDP S3, S4, [X20]
	0x03BB52C8 LDR V5, [X20 + 0x8]
	0x03BB52CC LDR V0, [X31 + 0x4C]
	0x03BB52D0 MOV V15.16B, V1.16B
	0x03BB52D4 MOV V8.16B, V2.16B
	0x03BB52D8 MOV V1.16B, V9.16B
	0x03BB52DC MOV V2.16B, V10.16B
	0x03BB52E0 MOV X0, X31
	0x03BB52E4 BL 0x3B26D68
	0x03BB52E8 FADD S0, S14, S0
	0x03BB52EC FADD S1, S15, S1
	0x03BB52F0 FMOV S3, 0.5
	0x03BB52F4 FADD S2, S8, S2
	0x03BB52F8 STP S0, S1, [X19]
	0x03BB52FC FMUL S0, S13, S3
	0x03BB5300 FMUL S1, S12, S3
	0x03BB5304 FMUL S3, S11, S3
	0x03BB5308 STP S2, S0, [X19 + 0x8]
	0x03BB530C STP S1, S3, [X19 + 0x10]
	0x03BB5310 LDP X20, X19, [X31 + 0x60]
	0x03BB5314 LDP X22, X21, [X31 + 0x50]
	0x03BB5318 LDR X30, [X31 + 0x40]
	0x03BB531C LDP D9, D8, [X31 + 0x30]
	0x03BB5320 LDP D11, D10, [X31 + 0x20]
	0x03BB5324 LDP D13, D12, [X31 + 0x10]
	0x03BB5328 LDP D15, D14, [X31], #0x70
	0x03BB532C RET
	0x03BB5330 BL 0x1C16F20
	0x03BB5334 STP D13, D12, [X31 - 0x50]!
	0x03BB5338 STP D11, D10, [X31 + 0x10]
	0x03BB533C STP D9, D8, [X31 + 0x20]
	0x03BB5340 STR X30, [X31 + 0x30]
	0x03BB5344 STP X20, X19, [X31 + 0x40]
	0x03BB5348 ADRP X20, 0x82D000
	0x03BB534C LDRB W8, [X20 + 0xCF3]
	0x03BB5350 MOV X19, X0
	0x03BB5354 TBNZ X8, 0x0, 0x3BB5378
	0x03BB5358 ADRP X0, 0x5A8000
	0x03BB535C LDR X0, [X0 + 0xC0]
	0x03BB5360 BL 0x1C16CF4
	0x03BB5364 ADRP X0, 0x53E000
	0x03BB5368 LDR X0, [X0 + 0x598]
	0x03BB536C BL 0x1C16CF4
	0x03BB5370 MOVZ W8, 0x1
	0x03BB5374 STRB W8, [X20 + 0xCF3]
	0x03BB5378 LDR X8, [X19 + 0x28]
	0x03BB537C CBZ X8, 0x3BB5520
	0x03BB5380 ADRP X8, 0x53E000
	0x03BB5384 LDR X8, [X8 + 0x598]
	0x03BB5388 LDR X20, [X19 + 0x20]
	0x03BB538C LDR X0, [X8]
	0x03BB5390 LDR W8, [X0 + 0xE0]
	0x03BB5394 CBNZ W8, 0x3BB539C
	0x03BB5398 BL 0x1C16DFC
	0x03BB539C MOV X0, X20
	0x03BB53A0 MOV X1, X31
	0x03BB53A4 MOV X2, X31
	0x03BB53A8 BL 0x3C3883C
	0x03BB53AC TBNZ X0, 0x0, 0x3BB5520
	0x03BB53B0 LDR X0, [X19 + 0x20]
	0x03BB53B4 CBZ X0, 0x3BB5538
	0x03BB53B8 MOV X1, X31
	0x03BB53BC BL 0x3C3F58C
	0x03BB53C0 LDR X1, [X19 + 0x20]
	0x03BB53C4 MOVZ W2, 0x1
	0x03BB53C8 MOV X0, X19

ISIL:
	001 Subtract X31, X31, 64
	002 Move [X31+16], X30
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X23, 0x82E000
	009 Move W8, [X23+3311]
	010 Move X20, X3
	011 Move X22, X2
	012 Move X19, X1
	013 Move X21, X0
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {47}
	018 Move X0, 0x5A8000
	019 Move X0, [X0+4040]
	020 Call 0x1C17CF4
	021 Move X0, 0x5A9000
	022 Move X0, [X0+16]
	023 Call 0x1C17CF4
	024 Move X0, 0x5A9000
	025 Move X0, [X0+24]
	026 Call 0x1C17CF4
	027 Move X0, 0x5A8000
	028 Move X0, [X0+4072]
	029 Call 0x1C17CF4
	030 Move X0, 0x5A9000
	031 Move X0, [X0+32]
	032 Call 0x1C17CF4
	033 Move X0, 0x5A8000
	034 Move X0, [X0+4080]
	035 Call 0x1C17CF4
	036 Move X0, 0x5A9000
	037 Move X0, [X0+40]
	038 Call 0x1C17CF4
	039 Move X0, 0x5A9000
	040 Move X0, [X0+48]
	041 Call 0x1C17CF4
	042 Move X0, 0x5A9000
	043 Move X0, [X0+56]
	044 Call 0x1C17CF4
	045 Move W8, 1
	046 Move [X23+3311], W8
	047 Move [X31+8], X31
	048 Move X0, [X21+64]
	049 Compare X0, 0
	050 JumpIfEqual {141}
	051 Move X8, 0x5A9000
	052 Move X8, [X8+32]
	053 Move X1, X19
	054 Move X2, X20
	055 Move X3, [X8]
	056 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	057 Compare X20, 0
	058 JumpIfEqual {141}
	059 Move S1, [X22+4]
	060 Move S2, [X22+8]
	061 Move V0, [X22]
	062 Move X23, [X21+56]
	063 Move X0, X20
	064 Move X1, X31
	065 Call Transform.InverseTransformPoint, X0, X1
	066 Compare X23, 0
	067 JumpIfEqual {141}
	068 Move X8, 0x5A9000
	069 Move X8, [X8+16]
	070 Move X0, X23
	071 Move X1, X19
	072 Move X2, [X8]
	073 Call Dictionary`2<Object, Vector3>.set_Item, X0, X1, X2
	074 Move X0, [X21+88]
	075 Compare X0, 0
	076 JumpIfEqual {141}
	077 Move X8, 0x5A8000
	078 Move X8, [X8+4072]
	079 Move S0, 1
	080 Move X1, X19
	081 Move X2, [X8]
	082 Call Dictionary`2<Object, Single>.set_Item, X0, X1, V0
	083 Move X0, [X21+72]
	084 Compare X0, 0
	085 JumpIfEqual {141}
	086 Move X8, 0x5A8000
	087 Move X8, [X8+4080]
	088 Move X1, X19
	089 Move W2, W31
	090 Move X3, [X8]
	091 Call Dictionary`2<Object, Boolean>.set_Item, X0, X1, X2
	092 Move X0, [X21+80]
	093 Compare X0, 0
	094 JumpIfEqual {141}
	095 Move X8, 0x5A8000
	096 Move X8, [X8+4040]
	097 Add X2, X31, 8
	098 Move X1, X20
	099 Move X3, [X8]
	100 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {125}
	105 Move X8, 0x5A9000
	106 Move X8, [X8+56]
	107 Move X0, [X8]
	108 Call 0x1C17F10
	109 Move X8, 0x5A9000
	110 Move X8, [X8+48]
	111 Move W1, W31
	112 Move X22, X0
	113 Move X2, [X8]
	114 Call 0x2D58B9C, X0, X1
	115 Move [X31+8], X22
	116 Move X0, [X21+80]
	117 Compare X0, 0
	118 JumpIfEqual {141}
	119 Move X8, 0x5A9000
	120 Move X8, [X8+24]
	121 Move X1, X20
	122 Move X2, X22
	123 Move X3, [X8]
	124 Call Dictionary`2<Object, Object>.set_Item, X0, X1, X2
	125 Move X0, [X31+8]
	126 Compare X0, 0
	127 JumpIfEqual {141}
	128 Move X8, 0x5A9000
	129 Move X8, [X8+40]
	130 Move X1, X19
	131 Move X2, [X8]
	132 Call 0x2D58DD8, X0, X1
	133 Move X20, [X31+48]
	134 Move X19, [X31+56]
	135 Move X22, [X31+32]
	136 Move X21, [X31+40]
	137 Move X30, [X31+16]
	138 Move X23, [X31+24]
	139 Add X31, X31, 64
	140 Return 
	141 Call 0x1C17F20

Method: System.Void OnHoverExited(System.Object interactor)

Disassembly:
	0x03BB5404 MOV X0, X31
	0x03BB5408 FMUL S1, S11, S0
	0x03BB540C FMUL S2, S12, S0
	0x03BB5410 FMUL S0, S13, S0
	0x03BB5414 FADD S3, S8, S1
	0x03BB5418 FADD S4, S9, S2
	0x03BB541C FADD S5, S10, S0
	0x03BB5420 MOV V0.16B, V8.16B
	0x03BB5424 MOV V1.16B, V9.16B
	0x03BB5428 MOV V2.16B, V10.16B
	0x03BB542C BL 0x3C0CB04
	0x03BB5430 FMOV S0, W31
	0x03BB5434 FMOV S1, 1
	0x03BB5438 FMOV S2, 1
	0x03BB543C FMOV S3, 1
	0x03BB5440 MOV X0, X31
	0x03BB5444 BL 0x3C0D030
	0x03BB5448 LDR X8, [X19 + 0x28]
	0x03BB544C CBZ X8, 0x3BB5538
	0x03BB5450 LDR V0, [X8 + 0x14]
	0x03BB5454 MOV X0, X31
	0x03BB5458 FMUL S1, S11, S0
	0x03BB545C FMUL S2, S12, S0
	0x03BB5460 FMUL S0, S13, S0
	0x03BB5464 FADD S3, S8, S1
	0x03BB5468 FADD S4, S9, S2
	0x03BB546C FADD S5, S10, S0
	0x03BB5470 MOV V0.16B, V8.16B
	0x03BB5474 MOV V1.16B, V9.16B
	0x03BB5478 MOV V2.16B, V10.16B
	0x03BB547C BL 0x3C0CB04
	0x03BB5480 LDR X8, [X19 + 0x18]
	0x03BB5484 CBZ X8, 0x3BB5520
	0x03BB5488 LDR V0, [X8 + 0x34]
	0x03BB548C FCMP S0, 0x0
	0x03BB5490 B.LE 0x3BB5520
	0x03BB5494 LDRB W8, [X8 + 0x18]
	0x03BB5498 ADRP X9, 0xFFFFFFFFFCF34000
	0x03BB549C ADRP X10, 0xFFFFFFFFFCF35000
	0x03BB54A0 LDR V3, [X9 + 0xF90]
	0x03BB54A4 LDR V4, [X10 + 0x30]
	0x03BB54A8 FMOV S2, W31
	0x03BB54AC FMOV S1, 1
	0x03BB54B0 CMP W8, 0x0
	0x03BB54B4 FCSEL S0, S1, S2, EQ
	0x03BB54B8 FCSEL S1, S3, S1, EQ
	0x03BB54BC FCSEL S2, S4, S2, EQ
	0x03BB54C0 FMOV S3, 1
	0x03BB54C4 MOV X0, X31
	0x03BB54C8 BL 0x3C0D030
	0x03BB54CC LDR X8, [X19 + 0x18]
	0x03BB54D0 CBZ X8, 0x3BB5538
	0x03BB54D4 LDP S0, S1, [X8 + 0x1C]
	0x03BB54D8 LDR V2, [X8 + 0x24]
	0x03BB54DC ADRP X8, 0xFFFFFFFFFCF35000
	0x03BB54E0 LDR V8, [X8 + 0x330]
	0x03BB54E4 MOV X0, X31
	0x03BB54E8 MOV V3.16B, V8.16B
	0x03BB54EC BL 0x3C0CB98
	0x03BB54F0 LDR X8, [X19 + 0x18]
	0x03BB54F4 CBZ X8, 0x3BB5538
	0x03BB54F8 LDP S0, S1, [X8 + 0x28]
	0x03BB54FC LDR V2, [X8 + 0x30]
	0x03BB5500 MOV V3.16B, V8.16B
	0x03BB5504 LDP X20, X19, [X31 + 0x40]
	0x03BB5508 LDR X30, [X31 + 0x30]
	0x03BB550C LDP D9, D8, [X31 + 0x20]
	0x03BB5510 LDP D11, D10, [X31 + 0x10]
	0x03BB5514 MOV X0, X31
	0x03BB5518 LDP D13, D12, [X31], #0x50
	0x03BB551C B 0x3C0CB98
	0x03BB5520 LDP X20, X19, [X31 + 0x40]
	0x03BB5524 LDR X30, [X31 + 0x30]
	0x03BB5528 LDP D9, D8, [X31 + 0x20]
	0x03BB552C LDP D11, D10, [X31 + 0x10]
	0x03BB5530 LDP D13, D12, [X31], #0x50
	0x03BB5534 RET
	0x03BB5538 BL 0x1C16F20
	0x03BB553C LDR X0, [X0 + 0x10]
	0x03BB5540 RET
	0x03BB5544 STR X1, [X0 + 0x10]
	0x03BB5548 RET
	0x03BB554C LDRB W0, [X0 + 0x18]
	0x03BB5550 RET
	0x03BB5554 AND W8, W1, 0x1
	0x03BB5558 STRB W8, [X0 + 0x18]
	0x03BB555C RET
	0x03BB5560 STR X30, [X31 - 0x20]!
	0x03BB5564 STP X20, X19, [X31 + 0x10]
	0x03BB5568 MOV X19, X1
	0x03BB556C MOVZ W8, 0x1
	0x03BB5570 MOV X1, X31
	0x03BB5574 MOV X20, X0
	0x03BB5578 STRB W8, [X0 + 0x18]
	0x03BB557C BL 0x33BDD8C
	0x03BB5580 CBZ X19, 0x3BB5594
	0x03BB5584 STR X19, [X20 + 0x10]
	0x03BB5588 LDP X20, X19, [X31 + 0x10]
	0x03BB558C LDR X30, [X31], #0x20
	0x03BB5590 RET
	0x03BB5594 ADRP X0, 0x546000
	0x03BB5598 LDR X0, [X0 + 0x578]
	0x03BB559C BL 0x1C16D08
	0x03BB55A0 BL 0x1C16F10
	0x03BB55A4 MOV X19, X0
	0x03BB55A8 ADRP X0, 0x5A7000
	0x03BB55AC LDR X0, [X0 + 0xF38]
	0x03BB55B0 BL 0x1C16D08

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x82E000
	007 Move W8, [X21+3312]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {40}
	014 Move X0, 0x5A9000
	015 Move X0, [X0+64]
	016 Call 0x1C17CF4
	017 Move X0, 0x5A9000
	018 Move X0, [X0+72]
	019 Call 0x1C17CF4
	020 Move X0, 0x5A9000
	021 Move X0, [X0+80]
	022 Call 0x1C17CF4
	023 Move X0, 0x5A8000
	024 Move X0, [X0+4040]
	025 Call 0x1C17CF4
	026 Move X0, 0x5A9000
	027 Move X0, [X0+88]
	028 Call 0x1C17CF4
	029 Move X0, 0x5A8000
	030 Move X0, [X0+4072]
	031 Call 0x1C17CF4
	032 Move X0, 0x5A8000
	033 Move X0, [X0+4080]
	034 Call 0x1C17CF4
	035 Move X0, 0x5A9000
	036 Move X0, [X0+96]
	037 Call 0x1C17CF4
	038 Move W8, 1
	039 Move [X21+3312], W8
	040 Move [X31], X31
	041 Move [X31+8], X31
	042 Move X0, [X19+56]
	043 Compare X0, 0
	044 JumpIfEqual {131}
	045 Move X8, 0x5A9000
	046 Move X8, [X8+72]
	047 Move X1, X20
	048 Move X2, [X8]
	049 Call Dictionary`2<Object, Vector3>.Remove, X0, X1
	050 Move X0, [X19+72]
	051 Compare X0, 0
	052 JumpIfEqual {131}
	053 Move X8, 0x5A8000
	054 Move X8, [X8+4080]
	055 Move X1, X20
	056 Move W2, W31
	057 Move X3, [X8]
	058 Call Dictionary`2<Object, Boolean>.set_Item, X0, X1, X2
	059 Move X0, [X19+88]
	060 Compare X0, 0
	061 JumpIfEqual {131}
	062 Move X8, 0x5A8000
	063 Move X8, [X8+4072]
	064 Move S0, 1
	065 Move X1, X20
	066 Move X2, [X8]
	067 Call Dictionary`2<Object, Single>.set_Item, X0, X1, V0
	068 Move X0, [X19+64]
	069 Compare X0, 0
	070 JumpIfEqual {131}
	071 Move X8, 0x5A9000
	072 Move X8, [X8+80]
	073 Add X2, X31, 8
	074 Move X1, X20
	075 Move X3, [X8]
	076 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {113}
	081 Move X0, [X19+80]
	082 Compare X0, 0
	083 JumpIfEqual {131}
	084 Move X8, 0x5A8000
	085 Move X1, [X31+8]
	086 Move X8, [X8+4040]
	087 Add X2, X31, 0
	088 Move X3, [X8]
	089 Call Dictionary`2<Object, Object>.TryGetValue, X0, X1, X2
	090 Move TEMP, X0
	091 And TEMP, TEMP, 1
	092 Compare TEMP, 1
	093 JumpIfNotEqual {102}
	094 Move X0, [X31]
	095 Compare X0, 0
	096 JumpIfEqual {131}
	097 Move X8, 0x5A9000
	098 Move X8, [X8+96]
	099 Move X1, X20
	100 Move X2, [X8]
	101 Call 0x2D58E88, X0, X1
	102 Move X1, [X31+8]
	103 Move X0, X19
	104 Call XRPokeLogic.ResetPokeStateData, X0, X1
	105 Move X0, [X19+64]
	106 Compare X0, 0
	107 JumpIfEqual {131}
	108 Move X8, 0x5A9000
	109 Move X8, [X8+64]
	110 Move X1, X20
	111 Move X2, [X8]
	112 Call Dictionary`2<Object, Object>.Remove, X0, X1
	113 Move X0, [X19+56]
	114 Compare X0, 0
	115 JumpIfEqual {131}
	116 Move X8, 0x5A9000
	117 Move X8, [X8+88]
	118 Move X1, [X8]
	119 Call Dictionary`2<Object, Vector3>.get_Count, X0
	120 Compare W0, 0
	121 JumpIfNotEqual {125}
	122 Move X1, [X19+32]
	123 Move X0, X19
	124 Call XRPokeLogic.ResetPokeStateData, X0, X1
	125 Move X20, [X31+32]
	126 Move X19, [X31+40]
	127 Move X30, [X31+16]
	128 Move X21, [X31+24]
	129 Add X31, X31, 48
	130 Return 
	131 Call 0x1C17F20

Method: System.Void ResetPokeStateData(UnityEngine.Transform transform)

Disassembly:
	0x03BB5E28 LDR X10, [X10 + 0x8D8]
	0x03BB5E2C LDRH W9, [X8 + 0x12E]
	0x03BB5E30 LDR X1, [X10]
	0x03BB5E34 CBZ X9, 0x3BB5E58
	0x03BB5E38 LDR X10, [X8 + 0xB0]
	0x03BB5E3C ADD X10, X10, 0x8
	0x03BB5E40 LDUR X11, [X10 - 0x8]
	0x03BB5E44 CMP X11, X1
	0x03BB5E48 B.EQ 0x3BB5E84
	0x03BB5E4C SUBS X9, X9, 0x1
	0x03BB5E50 ADD X10, X10, 0x10
	0x03BB5E54 B.NE 0x3BB5E40
	0x03BB5E58 MOVZ W2, 0xB
	0x03BB5E5C MOV X0, X20
	0x03BB5E60 BL 0x1C5C788
	0x03BB5E64 B 0x3BB5E94
	0x03BB5E68 LDR X9, [X9 + 0xC8]
	0x03BB5E6C ADD X9, X9, X10, 0x3, LSL
	0x03BB5E70 LDUR X9, [X9 - 0x8]
	0x03BB5E74 CMP X9, X8
	0x03BB5E78 CSEL X22, X21, X31, EQ
	0x03BB5E7C CBNZ X20, 0x3BB5DA4
	0x03BB5E80 BL 0x1C16F20
	0x03BB5E84 LDR W9, [X10]
	0x03BB5E88 ADD W9, W9, 0xB
	0x03BB5E8C ADD X8, X8, W9, 0x4, SXTW
	0x03BB5E90 ADD X0, X8, 0x138
	0x03BB5E94 LDP X8, X2, [X0]
	0x03BB5E98 MOV X0, X20
	0x03BB5E9C MOV X1, X21
	0x03BB5EA0 BLR X8
	0x03BB5EA4 LDR V1, [X19 + 0x2C]
	0x03BB5EA8 FMOV S2, 1
	0x03BB5EAC ADD X0, X31, 0x1C
	0x03BB5EB0 MOV X1, X31
	0x03BB5EB4 FMUL S1, S1, S1
	0x03BB5EB8 FDIV S0, S0, S1
	0x03BB5EBC FMIN S1, S0, S2
	0x03BB5EC0 FSUB S1, S2, S1
	0x03BB5EC4 FCMP S0, 0x0
	0x03BB5EC8 FCSEL S8, S1, S2, PL
	0x03BB5ECC BL 0x3B8EE60
	0x03BB5ED0 LDP X20, X19, [X31 + 0x30]
	0x03BB5ED4 LDP X22, X21, [X31 + 0x20]
	0x03BB5ED8 LDR X30, [X31 + 0x10]
	0x03BB5EDC MOV V0.16B, V8.16B
	0x03BB5EE0 LDP D9, D8, [X31], #0x40
	0x03BB5EE4 RET
	0x03BB5EE8 B 0x3BB5EF8
	0x03BB5EEC B 0x3BB5EF8
	0x03BB5EF0 B 0x3BB5EF8
	0x03BB5EF4 B 0x3BB5EF8
	0x03BB5EF8 MOV X19, X0
	0x03BB5EFC CMP W1, 0x1
	0x03BB5F00 B.NE 0x3BB5F2C
	0x03BB5F04 MOV X0, X19
	0x03BB5F08 BL 0x3EB1AD0
	0x03BB5F0C LDR X20, [X0]
	0x03BB5F10 BL 0x3EB1AE0
	0x03BB5F14 ADD X0, X31, 0x1C
	0x03BB5F18 MOV X1, X31
	0x03BB5F1C BL 0x3B8EE60
	0x03BB5F20 CBZ X20, 0x3BB5ED0
	0x03BB5F24 MOV X0, X20
	0x03BB5F28 BL 0x1C16F18
	0x03BB5F2C MOV X20, X31
	0x03BB5F30 B 0x3BB5F38
	0x03BB5F34 MOV X19, X0
	0x03BB5F38 ADD X0, X31, 0x1C
	0x03BB5F3C MOV X1, X31
	0x03BB5F40 BL 0x3B8EE60
	0x03BB5F44 CBNZ X20, 0x3BB5F50
	0x03BB5F48 MOV X0, X19
	0x03BB5F4C BL 0x1D2C690
	0x03BB5F50 MOV X0, X20
	0x03BB5F54 BL 0x1C16F18
	0x03BB5F58 BL 0x1990590
	0x03BB5F5C MOVZ W8, 0x3F800000
	0x03BB5F60 MOVZ W9, 0x1
	0x03BB5F64 MOV X1, X31
	0x03BB5F68 STR W8, [X0 + 0x2C]
	0x03BB5F6C STRB W9, [X0 + 0x18]
	0x03BB5F70 B 0x33BDD8C
	0x03BB5F74 LDR V0, [X0 + 0x38]
	0x03BB5F78 RET
	0x03BB5F7C STR S0, [X0 + 0x38]
	0x03BB5F80 RET
	0x03BB5F84 STP X30, X21, [X31 - 0x20]!
	0x03BB5F88 STP X20, X19, [X31 + 0x10]
	0x03BB5F8C ADRP X21, 0x82D000
	0x03BB5F90 LDRB W8, [X21 + 0xCFB]
	0x03BB5F94 MOV X20, X1
	0x03BB5F98 MOV X19, X0
	0x03BB5F9C TBNZ X8, 0x0, 0x3BB5FB4
	0x03BB5FA0 ADRP X0, 0x5A5000
	0x03BB5FA4 LDR X0, [X0 + 0xD60]
	0x03BB5FA8 BL 0x1C16CF4
	0x03BB5FAC MOVZ W8, 0x1
	0x03BB5FB0 STRB W8, [X21 + 0xCFB]
	0x03BB5FB4 LDRB W8, [X19 + 0x18]
	0x03BB5FB8 CBZ W8, 0x3BB6004
	0x03BB5FBC CBZ X20, 0x3BB6010
	0x03BB5FC0 MOV X0, X20
	0x03BB5FC4 MOV X1, X31

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], D14
	003 Move [X31+72], D13
	004 Move [X31+80], D12
	005 Move [X31+88], D11
	006 Move [X31+96], D10
	007 Move [X31+104], D9
	008 Move [X31+112], D8
	009 Move [X31+120], X30
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X21, 0x82E000
	015 Move X22, 0x53F000
	016 Move W8, [X21+3313]
	017 Move X22, [X22+1432]
	018 Move X20, X1
	019 Move X19, X0
	020 Move TEMP, X8
	021 And TEMP, TEMP, 1
	022 Compare TEMP, 1
	023 JumpIfEqual {32}
	024 Move X0, 0x5A7000
	025 Move X0, [X0+504]
	026 Call 0x1C17CF4
	027 Move X0, 0x53F000
	028 Move X0, [X0+1432]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X21+3313], W8
	032 Move X0, [X22]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X20
	038 Move X1, X31
	039 Move X2, X31
	040 Call Object.op_Equality, X0, X1
	041 Move TEMP, X0
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfEqual {113}
	045 Compare X20, 0
	046 JumpIfEqual {127}
	047 Move X0, X20
	048 Move X1, X31
	049 Call Transform.get_position, X0
	050 Move W2, 1
	051 Move X0, X19
	052 Move X1, X20
	053 Move V8, V0
	054 Move V9, V1
	055 Move V10, V2
	056 Move W21, 1
	057 Call XRPokeLogic.ComputeRotatedDepthEvaluationAxis, X0, X1, X2
	058 Move X20, 0x824000
	059 Move V14, [X19+16]
	060 Move W8, [X20+1923]
	061 Move X19, [X19+24]
	062 Move V12, V0
	063 Move V13, V1
	064 Move V11, V2
	065 Move [X31+6], W31
	066 NotImplemented "Instruction STRH not yet implemented."
	067 Compare W8, 0
	068 JumpIfNotEqual {73}
	069 Move X0, 0x53F000
	070 Move X0, [X0+1440]
	071 Call 0x1C17CF4
	072 Move [X20+1923], W21
	073 Move X8, 0x53F000
	074 Move X8, [X8+1440]
	075 NotImplemented "Instruction LDRH not yet implemented."
	076 Move W10, [X31+6]
	077 Move X8, [X8]
	078 Move X8, [X8+184]
	079 Move V1, [X8]
	080 Move V0, [X8+8]
	081 NotImplemented "Instruction STRH not yet implemented."
	082 Move [X31+2], W10
	083 Compare X19, 0
	084 JumpIfEqual {127}
	085 Move X9, 0x5A7000
	086 NotImplemented "Instruction LDRH not yet implemented."
	087 Move X9, [X9+504]
	088 Multiply S2, S12, S14
	089 Multiply S3, S13, S14
	090 NotImplemented "Instruction STURH not yet implemented."
	091 Move W8, [X31+2]
	092 Move X2, [X9]
	093 Multiply S4, S11, S14
	094 Move [X31+40], D1
	095 Move [X31+48], S0
	096 Add S0, S8, S2
	097 Add S1, S9, S3
	098 Add S2, S10, S4
	099 Add X1, X31, 8
	100 Move X0, X19
	101 Move [X31+8], W31
	102 Move [X31+36], W31
	103 Move [X31+52], W31
	104 Move [X31+12], S0
	105 Move [X31+20], S1
	106 Move [X31+20], S2
	107 Move [X31+28], S0
	108 Move [X31+28], S1
	109 Move [X31+36], S2
	110 Move [X31+11], W8
	111 Move [X31+56], X31
	112 Call BindableVariableBase`1<PokeStateData>.set_Value, X0, X1
	113 Move X20, [X31+144]
	114 Move X19, [X31+152]
	115 Move X22, [X31+128]
	116 Move X21, [X31+136]
	117 Move X30, [X31+120]
	118 Move D9, [X31+104]
	119 Move D8, [X31+112]
	120 Move D11, [X31+88]
	121 Move D10, [X31+96]
	122 Move D13, [X31+72]
	123 Move D12, [X31+80]
	124 Move V14, [X31+64]
	125 Add X31, X31, 160
	126 Return 
	127 Call 0x1C17F20

Method: UnityEngine.Bounds ComputeBounds(UnityEngine.Collider targetCollider, System.Boolean rotateBoundsScale = False, UnityEngine.Space targetSpace = 0)

Disassembly:
	0x03BB59A8 MOV V8.16B, V0.16B
	0x03BB59AC MOV V9.16B, V1.16B
	0x03BB59B0 MOV V10.16B, V2.16B
	0x03BB59B4 B 0x3BB59E8
	0x03BB59B8 CBZ X20, 0x3BB5B24
	0x03BB59BC MOV X0, X20
	0x03BB59C0 MOV X1, X31
	0x03BB59C4 BL 0x3C3F58C
	0x03BB59C8 LDR X8, [X21]
	0x03BB59CC MOV X0, X21
	0x03BB59D0 LDR X9, [X8 + 0x5C8]
	0x03BB59D4 LDR X1, [X8 + 0x5D0]
	0x03BB59D8 ADD X8, X31, 0x8
	0x03BB59DC BLR X9
	0x03BB59E0 LDP S8, S9, [X31 + 0x8]
	0x03BB59E4 LDR V10, [X31 + 0x10]
	0x03BB59E8 MOV X0, X20
	0x03BB59EC MOV X1, X31
	0x03BB59F0 BL 0x3C3F58C
	0x03BB59F4 MOV X0, X20
	0x03BB59F8 MOV X1, X31
	0x03BB59FC FSUB S12, S8, S0
	0x03BB5A00 FSUB S13, S9, S1
	0x03BB5A04 FSUB S11, S10, S2
	0x03BB5A08 BL 0x3C3FA04
	0x03BB5A0C ADRP X20, 0x823000
	0x03BB5A10 LDRB W8, [X20 + 0xA24]
	0x03BB5A14 MOV V8.16B, V0.16B
	0x03BB5A18 MOV V9.16B, V1.16B
	0x03BB5A1C MOV V10.16B, V2.16B
	0x03BB5A20 CBNZ W8, 0x3BB5A38
	0x03BB5A24 ADRP X0, 0x53E000
	0x03BB5A28 LDR X0, [X0 + 0x5A8]
	0x03BB5A2C BL 0x1C16CF4
	0x03BB5A30 MOVZ W8, 0x1
	0x03BB5A34 STRB W8, [X20 + 0xA24]
	0x03BB5A38 ADRP X20, 0x53E000
	0x03BB5A3C LDR X20, [X20 + 0x5A8]
	0x03BB5A40 FMUL S0, S12, S12
	0x03BB5A44 FMUL S1, S13, S13
	0x03BB5A48 FADD S0, S0, S1
	0x03BB5A4C LDR X0, [X20]
	0x03BB5A50 FMUL S1, S11, S11
	0x03BB5A54 FADD S14, S1, S0
	0x03BB5A58 FMUL S0, S8, S8
	0x03BB5A5C LDR W8, [X0 + 0xE0]
	0x03BB5A60 FMUL S1, S9, S9
	0x03BB5A64 FADD S0, S0, S1
	0x03BB5A68 FMUL S1, S10, S10
	0x03BB5A6C FADD S15, S1, S0
	0x03BB5A70 CBNZ W8, 0x3BB5A78
	0x03BB5A74 BL 0x1C16DFC
	0x03BB5A78 ADRP X8, 0xFFFFFFFFFCF34000
	0x03BB5A7C LDR V1, [X8 + 0xFE8]
	0x03BB5A80 FMUL S0, S14, S15
	0x03BB5A84 FSQRT S0, S0
	0x03BB5A88 FCMP S0, S1
	0x03BB5A8C FMOV S1, W31
	0x03BB5A90 B.MI 0x3BB5AEC
	0x03BB5A94 LDR X0, [X20]
	0x03BB5A98 FMUL S1, S12, S8
	0x03BB5A9C FMUL S2, S13, S9
	0x03BB5AA0 FMUL S3, S11, S10
	0x03BB5AA4 FADD S1, S1, S2
	0x03BB5AA8 FADD S1, S3, S1
	0x03BB5AAC LDR W8, [X0 + 0xE0]
	0x03BB5AB0 FDIV S0, S1, S0
	0x03BB5AB4 FMOV S1, 1
	0x03BB5AB8 FMOV S2, -1
	0x03BB5ABC FMIN S1, S0, S1
	0x03BB5AC0 FCMP S0, S2
	0x03BB5AC4 FCSEL S8, S1, S2, PL
	0x03BB5AC8 CBNZ W8, 0x3BB5AD0
	0x03BB5ACC BL 0x1C16DFC
	0x03BB5AD0 FCVT S0, S8
	0x03BB5AD4 BL 0x3EB1B80
	0x03BB5AD8 ADRP X8, 0xFFFFFFFFFCF35000
	0x03BB5ADC LDR V1, [X8 + 0x448]
	0x00000000 INVALID
	0x03BB5AE4 FMUL S0, S0, S1
	0x03BB5AE8 FADD S1, S0, S0
	0x03BB5AEC LDR V0, [X19 + 0x38]
	0x03BB5AF0 FDIV S0, S1, S0
	0x03BB5AF4 FMOV S1, 1
	0x03BB5AF8 FSUB S8, S1, S0
	0x03BB5AFC MOV V0.16B, V8.16B
	0x03BB5B00 LDP X20, X19, [X31 + 0x80]
	0x03BB5B04 LDP X22, X21, [X31 + 0x70]
	0x03BB5B08 LDR X30, [X31 + 0x60]
	0x03BB5B0C LDP D9, D8, [X31 + 0x50]
	0x03BB5B10 LDP D11, D10, [X31 + 0x40]
	0x03BB5B14 LDP D13, D12, [X31 + 0x30]
	0x03BB5B18 LDP D15, D14, [X31 + 0x20]
	0x03BB5B1C ADD X31, X31, 0x90
	0x03BB5B20 RET
	0x03BB5B24 BL 0x1C16F20
	0x03BB5B28 MOVZ W8, 0x42700000
	0x03BB5B2C MOVZ W9, 0x1
	0x03BB5B30 MOV X1, X31
	0x03BB5B34 STR W8, [X0 + 0x38]
	0x03BB5B38 STRB W9, [X0 + 0x18]
	0x03BB5B3C B 0x33BDD8C
	0x03BB5B40 MOVZ W8, 0x1
	0x03BB5B44 MOV X1, X31
	0x03BB5B48 STRB W8, [X0 + 0x18]
	0x03BB5B4C B 0x33BDD8C
	0x03BB5B50 LDR V0, [X0 + 0x2C]
	0x03BB5B54 RET
	0x03BB5B58 STR S0, [X0 + 0x2C]
	0x03BB5B5C RET
	0x03BB5B60 SUB X31, X31, 0xA0
	0x03BB5B64 STP X30, X21, [X31 + 0x80]
	0x03BB5B68 STP X20, X19, [X31 + 0x90]
	0x03BB5B6C ADRP X20, 0x82D000
	0x03BB5B70 ADRP X21, 0x545000
	0x03BB5B74 LDRB W8, [X20 + 0xCF9]
	0x03BB5B78 LDR X21, [X21 + 0x790]
	0x03BB5B7C MOV X19, X0
	0x03BB5B80 TBNZ X8, 0x0, 0x3BB5BA4
	0x03BB5B84 ADRP X0, 0x545000
	0x03BB5B88 LDR X0, [X0 + 0x730]
	0x03BB5B8C BL 0x1C16CF4
	0x03BB5B90 ADRP X0, 0x545000
	0x03BB5B94 LDR X0, [X0 + 0x790]
	0x03BB5B98 BL 0x1C16CF4
	0x03BB5B9C MOVZ W8, 0x1
	0x03BB5BA0 STRB W8, [X20 + 0xCF9]
	0x03BB5BA4 LDR X0, [X21]
	0x03BB5BA8 MOVZ W1, 0x2
	0x03BB5BAC BL 0x1C16D6C
	0x03BB5BB0 MOV X20, X0
	0x03BB5BB4 ADD X0, X31, 0x60
	0x03BB5BB8 FMOV S0, W31
	0x03BB5BBC FMOV S1, W31
	0x03BB5BC0 FMOV S2, W31
	0x03BB5BC4 FMOV S3, 0.5
	0x03BB5BC8 MOV X1, X31
	0x03BB5BCC STP X31, X31, [X31 + 0x60]
	0x03BB5BD0 STR W31, [X31 + 0x78]
	0x03BB5BD4 STR X31, [X31 + 0x70]
	0x03BB5BD8 BL 0x3C00A84
	0x03BB5BDC CBZ X20, 0x3BB5C94
	0x03BB5BE0 LDR V0, [X31 + 0x6]
	0x03BB5BE4 LDUR V1, [X31 + 0x6C]
	0x03BB5BE8 STR V0, [X31 + 0x4]
	0x03BB5BEC STUR V1, [X31 + 0x4C]
	0x03BB5BF0 LDR W8, [X20 + 0x18]
	0x03BB5BF4 CBZ W8, 0x3BB5C90
	0x03BB5BF8 LDUR V0, [X31 + 0x4C]
	0x03BB5BFC LDR V1, [X31 + 0x4]
	0x03BB5C00 ADD X0, X31, 0x20
	0x03BB5C04 FMOV S2, 2
	0x03BB5C08 STUR V0, [X20 + 0x2C]
	0x03BB5C0C STR V1, [X20 + 0x2]
	0x03BB5C10 FMOV S0, 1
	0x03BB5C14 FMOV S1, 1
	0x03BB5C18 FMOV S3, 2
	0x03BB5C1C MOV X1, X31
	0x03BB5C20 STP X31, X31, [X31 + 0x20]
	0x03BB5C24 STR W31, [X31 + 0x38]
	0x03BB5C28 STR X31, [X31 + 0x30]
	0x03BB5C2C BL 0x3C00A84
	0x03BB5C30 LDUR V0, [X31 + 0x2C]
	0x03BB5C34 LDR V1, [X31 + 0x2]
	0x03BB5C38 STUR V0, [X31 + 0xC]
	0x03BB5C3C STR V1, [X31]
	0x03BB5C40 LDR W8, [X20 + 0x18]
	0x03BB5C44 CMP W8, 0x1
	0x03BB5C48 B.LS 0x3BB5C90
	0x03BB5C4C LDUR V0, [X31 + 0xC]
	0x03BB5C50 LDR V1, [X31]
	0x03BB5C54 ADRP X8, 0x545000
	0x03BB5C58 LDR X8, [X8 + 0x730]
	0x03BB5C5C STUR V0, [X20 + 0x48]
	0x03BB5C60 STUR V1, [X20 + 0x3C]
	0x03BB5C64 LDR X0, [X8]
	0x03BB5C68 BL 0x1C16F10
	0x03BB5C6C MOV X1, X20
	0x03BB5C70 MOV X2, X31
	0x03BB5C74 MOV X21, X0
	0x03BB5C78 BL 0x3C013D4
	0x03BB5C7C STR X21, [X19 + 0x20]
	0x03BB5C80 LDP X20, X19, [X31 + 0x90]
	0x03BB5C84 LDP X30, X21, [X31 + 0x80]
	0x03BB5C88 ADD X31, X31, 0xA0
	0x03BB5C8C RET
	0x03BB5C90 BL 0x1C16F28
	0x03BB5C94 BL 0x1C16F20
	0x03BB5C98 STP D9, D8, [X31 - 0x40]!
	0x03BB5C9C STR X30, [X31 + 0x10]
	0x03BB5CA0 STP X22, X21, [X31 + 0x20]
	0x03BB5CA4 STP X20, X19, [X31 + 0x30]
	0x03BB5CA8 ADRP X22, 0x82D000
	0x03BB5CAC LDRB W8, [X22 + 0xCFA]
	0x03BB5CB0 MOV X20, X2
	0x03BB5CB4 MOV X21, X1
	0x03BB5CB8 MOV X19, X0
	0x03BB5CBC TBNZ X8, 0x0, 0x3BB5CF8
	0x03BB5CC0 ADRP X0, 0x5A5000
	0x03BB5CC4 LDR X0, [X0 + 0x8D8]
	0x03BB5CC8 BL 0x1C16CF4
	0x03BB5CCC ADRP X0, 0x53E000
	0x03BB5CD0 LDR X0, [X0 + 0x598]
	0x03BB5CD4 BL 0x1C16CF4
	0x03BB5CD8 ADRP X0, 0x5A5000
	0x03BB5CDC LDR X0, [X0 + 0x438]
	0x03BB5CE0 BL 0x1C16CF4
	0x03BB5CE4 ADRP X0, 0x5A5000
	0x03BB5CE8 LDR X0, [X0 + 0x368]
	0x03BB5CEC BL 0x1C16CF4
	0x03BB5CF0 MOVZ W8, 0x1

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+48], D14
	003 Move [X31+64], D13
	004 Move [X31+72], D12
	005 Move [X31+80], D11
	006 Move [X31+88], D10
	007 Move [X31+96], D9
	008 Move [X31+104], D8
	009 Move [X31+112], X30
	010 Move [X31+120], X23
	011 Move [X31+128], X22
	012 Move [X31+136], X21
	013 Move [X31+144], X20
	014 Move [X31+152], X19
	015 Move X23, 0x82E000
	016 Move W9, [X23+3314]
	017 Move W22, W2
	018 Move W20, W1
	019 Move X21, X0
	020 Move X19, X8
	021 Move TEMP, X9
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0x5A6000
	026 Move X0, [X0+2328]
	027 Call 0x1C17CF4
	028 Move X0, 0x545000
	029 Move X0, [X0+192]
	030 Call 0x1C17CF4
	031 Move X0, 0x545000
	032 Move X0, [X0+200]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X23+3314], W8
	036 Compare X21, 0
	037 JumpIfEqual {69}
	038 Move X9, 0x5A6000
	039 Move X9, [X9+2328]
	040 Move X8, [X21]
	041 Move X10, [X9]
	042 Move W9, [X8+304]
	043 Move W11, [X10+304]
	044 NotImplemented "Instruction CMP not yet implemented."
	045 Move X12, [X8+200]
	046 Add X11, X12, X11
	047 NotImplemented "Instruction LDUR not yet implemented."
	048 NotImplemented "Instruction CMP not yet implemented."
	049 Move X10, 0x545000
	050 Move X10, [X10+200]
	051 Move X10, [X10]
	052 Move W11, [X10+304]
	053 NotImplemented "Instruction CMP not yet implemented."
	054 Move X12, [X8+200]
	055 Add X11, X12, X11
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Move X10, 0x545000
	059 Move X10, [X10+192]
	060 Move S8, W31
	061 Move X10, [X10]
	062 Move W11, [X10+304]
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Move S9, W31
	065 Move S10, W31
	066 Move S11, W31
	067 Move S13, W31
	068 Move S12, W31
	069 Move S12, W31
	070 NotImplemented "Instruction CMP not yet implemented."
	071 Move S13, W31
	072 Move S11, W31
	073 Move S10, W31
	074 Move S9, W31
	075 Move S8, W31
	076 Move X8, [X8+200]
	077 Move S9, W31
	078 Move S10, W31
	079 Move S11, W31
	080 Add X8, X8, X11
	081 NotImplemented "Instruction LDUR not yet implemented."
	082 Move S13, W31
	083 Move S12, W31
	084 NotImplemented "Instruction CMP not yet implemented."
	085 Move X23, 0x824000
	086 Move W8, [X23+1923]
	087 Compare W8, 0
	088 JumpIfNotEqual {94}
	089 Move X0, 0x53F000
	090 Move X0, [X0+1440]
	091 Call 0x1C17CF4
	092 Move W8, 1
	093 Move [X23+1923], W8
	094 Move X8, 0x53F000
	095 Move X8, [X8+1440]
	096 Move X0, X21
	097 Move X1, X31
	098 Move X8, [X8]
	099 Move X8, [X8+184]
	100 Move S11, [X8]
	101 Move S12, [X8+4]
	102 Move V14, [X8+8]
	103 Call CapsuleCollider.get_radius, X0
	104 Move X0, X21
	105 Move X1, X31
	106 Add S9, S0, S0
	107 Call CapsuleCollider.get_height, X0
	108 Move X0, X21
	109 Move X1, X31
	110 Move V8, V0
	111 Call CapsuleCollider.get_direction, X0
	112 Compare W0, 0
	113 JumpIfEqual {165}
	114 NotImplemented "Instruction CMP not yet implemented."
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move V11, V9
	117 Move V12, V9
	118 Move V14, V8
	119 Move X0, X21
	120 Move X1, X31
	121 Call BoxCollider.get_center, X0
	122 Move X0, X21
	123 Move X1, X31
	124 Move V8, V0
	125 Move V9, V1
	126 Move V10, V2
	127 Call BoxCollider.get_size, X0
	128 Move S3, 0.5
	129 Multiply S11, S0, S3
	130 Multiply S13, S1, S3
	131 Multiply S12, S2, S3
	132 Move X0, X21
	133 Move X1, X31
	134 Call SphereCollider.get_center, X0
	135 Move X23, 0x824000
	136 Move W8, [X23+2139]
	137 Move V8, V0
	138 Move V9, V1
	139 Move V10, V2
	140 Compare W8, 0
	141 JumpIfNotEqual {147}
	142 Move X0, 0x53F000
	143 Move X0, [X0+1440]
	144 Call 0x1C17CF4
	145 Move W8, 1
	146 Move [X23+2139], W8
	147 Move X8, 0x53F000
	148 Move X8, [X8+1440]
	149 Move X0, X21
	150 Move X1, X31
	151 Move X8, [X8]
	152 Move X8, [X8+184]
	153 Move S11, [X8+12]
	154 Move S12, [X8+16]
	155 Move V13, [X8+20]
	156 Call SphereCollider.get_radius, X0
	157 Add S0, S0, S0
	158 Move S1, 0.5
	159 Multiply S2, S11, S0
	160 Multiply S3, S12, S0
	161 Multiply S0, S13, S0
	162 Multiply S11, S2, S1
	163 Multiply S13, S3, S1
	164 Multiply S12, S0, S1
	165 Move V11, V8
	166 Move V12, V9
	167 Move V11, V9
	168 Move V12, V8
	169 Move V14, V9
	170 Move X0, X21
	171 Move X1, X31
	172 Call CapsuleCollider.get_center, X0
	173 Move V8, V0
	174 Move S0, 0.5
	175 Move V9, V1
	176 Move V10, V2
	177 Multiply S11, S11, S0
	178 Multiply S13, S12, S0
	179 Multiply S12, S14, S0
	180 NotImplemented "Instruction CMP not yet implemented."
	181 Move [X19], S8
	182 Move [X19+8], S9
	183 Move [X19+8], S10
	184 Move [X19+16], S11
	185 Move [X19+16], S13
	186 Move [X19+24], S12
	187 Compare X21, 0
	188 JumpIfEqual {222}
	189 Move X0, X21
	190 Move X1, X31
	191 Call Component.get_transform, X0
	192 Move X1, X0
	193 And W2, W20, 1
	194 Add X8, X31, 24
	195 Add X0, X31, 0
	196 Move [X31], S8
	197 Move [X31+8], S9
	198 Move [X31+8], S10
	199 Move [X31+16], S11
	200 Move [X31+16], S13
	201 Move [X31+24], S12
	202 Call XRPokeLogic.BoundsLocalToWorld, X0, X1, X2
	203 Move X8, [X31+40]
	204 NotImplemented "Instruction LDUR not yet implemented."
	205 Move [X19+16], X8
	206 Move [X19], V0
	207 Move X20, [X31+144]
	208 Move X19, [X31+152]
	209 Move X22, [X31+128]
	210 Move X21, [X31+136]
	211 Move X30, [X31+112]
	212 Move X23, [X31+120]
	213 Move D9, [X31+96]
	214 Move D8, [X31+104]
	215 Move D11, [X31+80]
	216 Move D10, [X31+88]
	217 Move D13, [X31+64]
	218 Move D12, [X31+72]
	219 Move V14, [X31+48]
	220 Add X31, X31, 160
	221 Return X0
	222 Call 0x1C17F20

Method: UnityEngine.Bounds BoundsLocalToWorld(UnityEngine.Bounds targetBounds, UnityEngine.Transform targetTransform, System.Boolean rotateBoundsScale = False)

Disassembly:
	0x03BB6204 MOV X0, X20
	0x03BB6208 MOV W2, W31
	0x03BB620C BL 0x1C5C788
	0x03BB6210 B 0x3BB6230
	0x03BB6214 LDP X20, X19, [X31 + 0x20]
	0x03BB6218 LDP X22, X21, [X31 + 0x10]
	0x03BB621C LDR X30, [X31], #0x30
	0x03BB6220 RET
	0x03BB6224 LDRSW X9, [X10]
	0x03BB6228 ADD X8, X8, X9, 0x4, LSL
	0x03BB622C ADD X0, X8, 0x138
	0x03BB6230 LDP X8, X1, [X0]
	0x03BB6234 MOV X0, X20
	0x03BB6238 BLR X8
	0x03BB623C LDR X8, [X22]
	0x03BB6240 MOV X20, X0
	0x03BB6244 MOV X0, X8
	0x03BB6248 BL 0x1C16F10
	0x03BB624C LDR X2, [X21]
	0x03BB6250 MOV X1, X19
	0x03BB6254 MOV X3, X31
	0x03BB6258 MOV X21, X0
	0x03BB625C BL 0x2725C6C
	0x03BB6260 CBZ X20, 0x3BB6288
	0x03BB6264 ADRP X8, 0x5A4000
	0x03BB6268 LDR X8, [X8 + 0x1F0]
	0x03BB626C MOV X0, X20
	0x03BB6270 MOV X1, X21
	0x03BB6274 LDP X20, X19, [X31 + 0x20]
	0x03BB6278 LDR X2, [X8]
	0x03BB627C LDP X22, X21, [X31 + 0x10]
	0x03BB6280 LDR X30, [X31], #0x30
	0x03BB6284 B 0x2729BA4
	0x03BB6288 BL 0x1C16F20
	0x03BB628C STR X30, [X31 - 0x20]!
	0x03BB6290 STP X20, X19, [X31 + 0x10]
	0x03BB6294 ADRP X20, 0x82C000
	0x03BB6298 LDRB W8, [X20 + 0xCFE]
	0x03BB629C MOV X19, X0
	0x03BB62A0 TBNZ X8, 0x0, 0x3BB62B8
	0x03BB62A4 ADRP X0, 0x5A4000
	0x03BB62A8 LDR X0, [X0 + 0xD58]
	0x03BB62AC BL 0x1C16CF4
	0x03BB62B0 MOVZ W8, 0x1
	0x03BB62B4 STRB W8, [X20 + 0xCFE]
	0x03BB62B8 LDR X0, [X19 + 0x30]
	0x03BB62BC CBZ X0, 0x3BB62D8
	0x03BB62C0 ADRP X8, 0x5A4000
	0x03BB62C4 LDR X8, [X8 + 0xD58]
	0x03BB62C8 LDP X20, X19, [X31 + 0x10]
	0x03BB62CC LDR X1, [X8]
	0x03BB62D0 LDR X30, [X31], #0x20
	0x03BB62D4 B 0x2AB4C18
	0x03BB62D8 BL 0x1C16F20
	0x03BB62DC RET
	0x03BB62E0 SUB X31, X31, 0x30
	0x03BB62E4 STP X30, X21, [X31 + 0x10]
	0x03BB62E8 STP X20, X19, [X31 + 0x20]
	0x03BB62EC ADRP X21, 0x82C000
	0x03BB62F0 LDRB W8, [X21 + 0xCFF]
	0x03BB62F4 MOV X20, X2
	0x03BB62F8 MOV X19, X0
	0x03BB62FC TBNZ X8, 0x0, 0x3BB6314
	0x03BB6300 ADRP X0, 0x5A4000
	0x03BB6304 LDR X0, [X0 + 0xD38]
	0x03BB6308 BL 0x1C16CF4
	0x03BB630C MOVZ W8, 0x1
	0x03BB6310 STRB W8, [X21 + 0xCFF]
	0x03BB6314 STR W31, [X31 + 0xC]
	0x03BB6318 LDR X0, [X19 + 0x30]
	0x03BB631C CBZ X0, 0x3BB6394
	0x03BB6320 ADRP X8, 0x5A4000
	0x03BB6324 LDR X8, [X8 + 0xD38]
	0x03BB6328 ADD X2, X31, 0xC
	0x03BB632C MOV X1, X20
	0x03BB6330 LDR X3, [X8]

ISIL:
	001 Move [X31-112], D15
	002 Move [X31-104], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X30
	010 Move [X31+80], X22
	011 Move [X31+88], X21
	012 Move [X31+96], X20
	013 Move [X31+104], X19
	014 Compare X1, 0
	015 JumpIfEqual {97}
	016 Move X21, X1
	017 Move X20, X0
	018 Move X0, X1
	019 Move X1, X31
	020 Move W22, W2
	021 Move X19, X8
	022 Call Transform.get_localScale, X0
	023 Move V8, V0
	024 Move V9, V1
	025 Move V10, V2
	026 Move S0, [X20+12]
	027 Move S1, [X20+16]
	028 Move V2, [X20+20]
	029 Move X0, X31
	030 Add S3, S0, S0
	031 Add S4, S1, S1
	032 Add S5, S2, S2
	033 Move V0, V8
	034 Move V1, V9
	035 Move V2, V10
	036 Call Vector3Extensions.Multiply, X0, X1
	037 Move V13, V0
	038 Move V12, V1
	039 Move V11, V2
	040 Move [X31+76], S8
	041 Move TEMP, X22
	042 And TEMP, TEMP, 1
	043 Compare TEMP, 1
	044 JumpIfNotEqual {56}
	045 Move X0, X21
	046 Move X1, X31
	047 Call Transform.get_rotation, X0
	048 Move V4, V13
	049 Move V5, V12
	050 Move V6, V11
	051 Move X0, X31
	052 Call Quaternion.op_Multiply, X0, X1
	053 Move V13, V0
	054 Move V12, V1
	055 Move V11, V2
	056 Move X0, X21
	057 Move X1, X31
	058 Call Transform.get_position, X0
	059 Move V14, V0
	060 Move S3, [X20]
	061 Move S4, [X20+4]
	062 Move V5, [X20+8]
	063 Move V0, [X31+76]
	064 Move V15, V1
	065 Move V8, V2
	066 Move V1, V9
	067 Move V2, V10
	068 Move X0, X31
	069 Call Vector3Extensions.Multiply, X0, X1
	070 Add S0, S14, S0
	071 Add S1, S15, S1
	072 Move S3, 0.5
	073 Add S2, S8, S2
	074 Move [X19], S0
	075 Move [X19+8], S1
	076 Multiply S0, S13, S3
	077 Multiply S1, S12, S3
	078 Multiply S3, S11, S3
	079 Move [X19+8], S2
	080 Move [X19+16], S0
	081 Move [X19+16], S1
	082 Move [X19+24], S3
	083 Move X20, [X31+96]
	084 Move X19, [X31+104]
	085 Move X22, [X31+80]
	086 Move X21, [X31+88]
	087 Move X30, [X31+64]
	088 Move D9, [X31+48]
	089 Move D8, [X31+56]
	090 Move D11, [X31+32]
	091 Move D10, [X31+40]
	092 Move D13, [X31+16]
	093 Move D12, [X31+24]
	094 Move D15, [X31+112]
	095 Move D14, [X31+120]
	096 Return X0
	097 Call 0x1C17F20

Method: System.Void DrawGizmos()

Disassembly:
	0x03BB6334 BL 0x2AB64B4
	0x03BB6338 FMOV S0, 0.5
	0x03BB633C TBZ X0, 0x0, 0x3BB6384
	0x03BB6340 LDR V1, [X19 + 0x38]
	0x03BB6344 FCMP S1, 0x0
	0x03BB6348 B.LS 0x3BB6384
	0x03BB634C MOV X0, X31
	0x03BB6350 BL 0x3C3C6C4
	0x03BB6354 LDR V1, [X31 + 0xC]
	0x03BB6358 LDR V2, [X19 + 0x38]
	0x03BB635C FMOV S3, 1
	0x03BB6360 FMOV S4, 0.5
	0x03BB6364 FSUB S0, S0, S1
	0x03BB6368 FDIV S0, S0, S2
	0x03BB636C FMIN S1, S0, S3
	0x03BB6370 FSUB S1, S3, S1
	0x03BB6374 FMUL S1, S1, S4
	0x03BB6378 FADD S1, S1, S4
	0x03BB637C FCMP S0, 0x0
	0x03BB6380 FCSEL S0, S1, S3, PL
	0x03BB6384 LDP X20, X19, [X31 + 0x20]
	0x03BB6388 LDP X30, X21, [X31 + 0x10]
	0x03BB638C ADD X31, X31, 0x30
	0x03BB6390 RET
	0x03BB6394 BL 0x1C16F20
	0x03BB6398 STR X30, [X31 - 0x30]!
	0x03BB639C STP X22, X21, [X31 + 0x10]
	0x03BB63A0 STP X20, X19, [X31 + 0x20]
	0x03BB63A4 ADRP X21, 0x82C000
	0x03BB63A8 ADRP X22, 0x5A4000
	0x03BB63AC ADRP X20, 0x5A4000
	0x03BB63B0 LDRB W8, [X21 + 0xD00]
	0x03BB63B4 LDR X22, [X22 + 0xCA0]
	0x03BB63B8 LDR X20, [X20 + 0xC88]
	0x03BB63BC MOV X19, X0
	0x03BB63C0 TBNZ X8, 0x0, 0x3BB63E4
	0x03BB63C4 ADRP X0, 0x5A4000
	0x03BB63C8 LDR X0, [X0 + 0xC88]
	0x03BB63CC BL 0x1C16CF4
	0x03BB63D0 ADRP X0, 0x5A4000
	0x03BB63D4 LDR X0, [X0 + 0xCA0]
	0x03BB63D8 BL 0x1C16CF4
	0x03BB63DC MOVZ W8, 0x1
	0x03BB63E0 STRB W8, [X21 + 0xD00]
	0x03BB63E4 LDR X0, [X22]
	0x03BB63E8 BL 0x1C16F10
	0x03BB63EC LDR X1, [X20]
	0x03BB63F0 MOV X20, X0
	0x03BB63F4 BL 0x2AB41F4
	0x03BB63F8 MOVZ W8, 0x41200000
	0x03BB63FC MOVZ W9, 0x1
	0x03BB6400 STR X20, [X19 + 0x30]
	0x03BB6404 STR W8, [X19 + 0x38]
	0x03BB6408 STRB W9, [X19 + 0x18]
	0x03BB640C MOV X0, X19
	0x03BB6410 LDP X20, X19, [X31 + 0x20]
	0x03BB6414 LDP X22, X21, [X31 + 0x10]
	0x03BB6418 MOV X1, X31
	0x03BB641C LDR X30, [X31], #0x30
	0x03BB6420 B 0x33BDD8C
	0x03BB6424 STP X30, X21, [X31 - 0x20]!
	0x03BB6428 STP X20, X19, [X31 + 0x10]
	0x03BB642C ADRP X21, 0x82C000
	0x03BB6430 ADRP X20, 0x53D000
	0x03BB6434 LDRB W8, [X21 + 0xD01]
	0x03BB6438 LDR X20, [X20 + 0x6C0]
	0x03BB643C MOV X19, X0
	0x03BB6440 TBNZ X8, 0x0, 0x3BB6464
	0x03BB6444 ADRP X0, 0x53D000
	0x03BB6448 LDR X0, [X0 + 0x6C0]
	0x03BB644C BL 0x1C16CF4
	0x03BB6450 ADRP X0, 0x5A7000
	0x03BB6454 LDR X0, [X0 + 0xE0]
	0x03BB6458 BL 0x1C16CF4
	0x03BB645C MOVZ W8, 0x1
	0x03BB6460 STRB W8, [X21 + 0xD01]
	0x03BB6464 LDR X0, [X20]
	0x03BB6468 LDR W8, [X0 + 0xE0]
	0x03BB646C CBNZ W8, 0x3BB6474
	0x03BB6470 BL 0x1C16DFC
	0x03BB6474 MOV X0, X19
	0x03BB6478 MOV X1, X31
	0x03BB647C MOV X2, X31
	0x03BB6480 BL 0x3395F0C
	0x03BB6484 TBZ X0, 0x0, 0x3BB64C4
	0x03BB6488 CBZ X19, 0x3BB651C
	0x03BB648C MOV X0, X19
	0x03BB6490 MOV X1, X31
	0x03BB6494 BL 0x33962E8
	0x03BB6498 TBNZ X0, 0x0, 0x3BB64C4
	0x03BB649C MOV X0, X19
	0x03BB64A0 MOV X1, X31
	0x03BB64A4 BL 0x339703C
	0x03BB64A8 TBNZ X0, 0x0, 0x3BB64C4
	0x03BB64AC LDR X8, [X19]
	0x03BB64B0 MOV X0, X19
	0x03BB64B4 LDR X9, [X8 + 0x3C8]
	0x03BB64B8 LDR X1, [X8 + 0x3D0]
	0x03BB64BC BLR X9
	0x03BB64C0 TBZ X0, 0x0, 0x3BB64D4
	0x03BB64C4 LDP X20, X19, [X31 + 0x10]
	0x03BB64C8 MOV W0, W31
	0x03BB64CC LDP X30, X21, [X31], #0x20
	0x03BB64D0 RET
	0x03BB64D4 ADRP X8, 0x5A7000
	0x03BB64D8 LDR X0, [X20]
	0x03BB64DC LDR X8, [X8 + 0xE0]
	0x03BB64E0 LDR W9, [X0 + 0xE0]
	0x03BB64E4 LDR X20, [X8]
	0x03BB64E8 CBNZ W9, 0x3BB64F0
	0x03BB64EC BL 0x1C16DFC
	0x03BB64F0 MOV X0, X20
	0x03BB64F4 MOV X1, X31
	0x03BB64F8 BL 0x338C698
	0x03BB64FC CBZ X0, 0x3BB651C
	0x03BB6500 LDR X8, [X0]
	0x03BB6504 MOV X1, X19
	0x03BB6508 LDP X20, X19, [X31 + 0x10]
	0x03BB650C LDR X3, [X8 + 0x2A8]
	0x03BB6510 LDR X2, [X8 + 0x2B0]
	0x03BB6514 LDP X30, X21, [X31], #0x20
	0x03BB6518 BR X3
	0x03BB651C BL 0x1C16F20
	0x03BB6520 STP X30, X21, [X31 - 0x20]!
	0x03BB6524 STP X20, X19, [X31 + 0x10]
	0x03BB6528 ADRP X21, 0x82C000
	0x03BB652C LDRB W8, [X21 + 0xD02]
	0x03BB6530 MOV X19, X1
	0x03BB6534 MOV X20, X0
	0x03BB6538 TBNZ X8, 0x0, 0x3BB6550

ISIL:
	001 Move [X31-80], D13
	002 Move [X31-72], D12
	003 Move [X31+16], D11
	004 Move [X31+24], D10
	005 Move [X31+32], D9
	006 Move [X31+40], D8
	007 Move [X31+48], X30
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X20, 0x82D000
	011 Move W8, [X20+3315]
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {25}
	017 Move X0, 0x5A8000
	018 Move X0, [X0+192]
	019 Call 0x1C17CF4
	020 Move X0, 0x53E000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3315], W8
	025 Move X8, [X19+40]
	026 Compare X8, 0
	027 JumpIfEqual {147}
	028 Move X8, 0x53E000
	029 Move X8, [X8+1432]
	030 Move X20, [X19+32]
	031 Move X0, [X8]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Equality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfEqual {147}
	044 Move X0, [X19+32]
	045 Compare X0, 0
	046 JumpIfEqual {157}
	047 Move X1, X31
	048 Call Transform.get_position, X0
	049 Move X1, [X19+32]
	050 Move W2, 1
	051 Move X0, X19
	052 Move V8, V0
	053 Move V9, V1
	054 Move V10, V2
	055 Call XRPokeLogic.ComputeRotatedDepthEvaluationAxis, X0, X1, X2
	056 Move V11, V0
	057 Move V12, V1
	058 Move V13, V2
	059 Move S0, 1
	060 Move S1, W31
	061 Move S2, W31
	062 Move S3, 1
	063 Move X0, X31
	064 Call Gizmos.set_color, X0
	065 Move V0, [X19+16]
	066 Move X0, X31
	067 Multiply S1, S11, S0
	068 Multiply S2, S12, S0
	069 Multiply S0, S13, S0
	070 Add S3, S8, S1
	071 Add S4, S9, S2
	072 Add S5, S10, S0
	073 Move V0, V8
	074 Move V1, V9
	075 Move V2, V10
	076 Call Gizmos.DrawLine, X0, X1
	077 Move S0, W31
	078 Move S1, 1
	079 Move S2, 1
	080 Move S3, 1
	081 Move X0, X31
	082 Call Gizmos.set_color, X0
	083 Move X8, [X19+40]
	084 Compare X8, 0
	085 JumpIfEqual {157}
	086 Move V0, [X8+20]
	087 Move X0, X31
	088 Multiply S1, S11, S0
	089 Multiply S2, S12, S0
	090 Multiply S0, S13, S0
	091 Add S3, S8, S1
	092 Add S4, S9, S2
	093 Add S5, S10, S0
	094 Move V0, V8
	095 Move V1, V9
	096 Move V2, V10
	097 Call Gizmos.DrawLine, X0, X1
	098 Move X8, [X19+24]
	099 Compare X8, 0
	100 JumpIfEqual {147}
	101 Move V0, [X8+52]
	102 NotImplemented "Instruction FCMP not yet implemented."
	103 Move W8, [X8+24]
	104 Move X9, -51167232
	105 Move X10, -51163136
	106 Move V3, [X9+3984]
	107 Move V4, [X10+48]
	108 Move S2, W31
	109 Move S1, 1
	110 NotImplemented "Instruction CMP not yet implemented."
	111 NotImplemented "Instruction FCSEL not yet implemented."
	112 NotImplemented "Instruction FCSEL not yet implemented."
	113 NotImplemented "Instruction FCSEL not yet implemented."
	114 Move S3, 1
	115 Move X0, X31
	116 Call Gizmos.set_color, X0
	117 Move X8, [X19+24]
	118 Compare X8, 0
	119 JumpIfEqual {157}
	120 Move S0, [X8+28]
	121 Move S1, [X8+32]
	122 Move V2, [X8+36]
	123 Move X8, -51163136
	124 Move V8, [X8+816]
	125 Move X0, X31
	126 Move V3, V8
	127 Call Gizmos.DrawWireSphere, X0, V0
	128 Move X8, [X19+24]
	129 Compare X8, 0
	130 JumpIfEqual {157}
	131 Move S0, [X8+40]
	132 Move S1, [X8+44]
	133 Move V2, [X8+48]
	134 Move V3, V8
	135 Move X20, [X31+64]
	136 Move X19, [X31+72]
	137 Move X30, [X31+48]
	138 Move D9, [X31+32]
	139 Move D8, [X31+40]
	140 Move D11, [X31+16]
	141 Move D10, [X31+24]
	142 Move X0, X31
	143 Move D13, [X31+80]
	144 Move D12, [X31+88]
	145 Call Gizmos.DrawWireSphere, X0, V0
	146 Return 
	147 Move X20, [X31+64]
	148 Move X19, [X31+72]
	149 Move X30, [X31+48]
	150 Move D9, [X31+32]
	151 Move D8, [X31+40]
	152 Move D11, [X31+16]
	153 Move D10, [X31+24]
	154 Move D13, [X31+80]
	155 Move D12, [X31+88]
	156 Return 
	157 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BB55B4 MOV X1, X0
	0x03BB55B8 MOV X0, X19
	0x03BB55BC MOV X2, X31
	0x03BB55C0 BL 0x3314A68
	0x03BB55C4 ADRP X0, 0x5A8000
	0x03BB55C8 LDR X0, [X0 + 0xC8]
	0x03BB55CC BL 0x1C16D08
	0x03BB55D0 MOV X1, X0
	0x03BB55D4 MOV X0, X19
	0x03BB55D8 BL 0x1C16DEC
	0x03BB55DC STR X30, [X31 - 0x10]!
	0x03BB55E0 LDR X8, [X0 + 0x10]
	0x03BB55E4 CBZ X8, 0x3BB55FC
	0x03BB55E8 LDR X4, [X8 + 0x18]
	0x03BB55EC LDR X0, [X8 + 0x40]
	0x03BB55F0 LDR X3, [X8 + 0x28]
	0x03BB55F4 LDR X30, [X31], #0x10
	0x03BB55F8 BR X4
	0x03BB55FC BL 0x1C16F20
	0x03BB5600 STR X30, [X31 - 0x20]!
	0x03BB5604 STP X20, X19, [X31 + 0x10]
	0x03BB5608 ADRP X20, 0x82D000
	0x03BB560C ADRP X19, 0x5A5000
	0x03BB5610 LDRB W8, [X20 + 0xCF5]
	0x03BB5614 LDR X19, [X19 + 0x978]
	0x03BB5618 TBNZ X8, 0x0, 0x3BB5630
	0x03BB561C ADRP X0, 0x5A5000
	0x03BB5620 LDR X0, [X0 + 0x978]
	0x03BB5624 BL 0x1C16CF4
	0x03BB5628 MOVZ W8, 0x1
	0x03BB562C STRB W8, [X20 + 0xCF5]
	0x03BB5630 LDR X1, [X19]
	0x03BB5634 ADD X0, X31, 0x8
	0x03BB5638 STR X31, [X31 + 0x8]
	0x03BB563C BL 0x295FA30
	0x03BB5640 MOV W8, W0
	0x03BB5644 MOV X0, X31
	0x03BB5648 TBZ X8, 0x0, 0x3BB5658
	0x03BB564C LDR X8, [X31 + 0x8]
	0x03BB5650 CBZ X8, 0x3BB5664
	0x03BB5654 LDR X0, [X8 + 0x20]
	0x03BB5658 LDP X20, X19, [X31 + 0x10]
	0x03BB565C LDR X30, [X31], #0x20
	0x03BB5660 RET
	0x03BB5664 BL 0x1C16F20
	0x03BB5668 LDR X0, [X0 + 0x30]
	0x03BB566C RET
	0x03BB5670 STR X1, [X0 + 0x30]
	0x03BB5674 RET
	0x03BB5678 LDR V0, [X0 + 0x38]
	0x03BB567C RET
	0x03BB5680 MOVZ W8, 0x43340000
	0x03BB5684 FMOV S1, W8
	0x03BB5688 FCMP S0, 0x0
	0x03BB568C FMIN S0, S0, S1
	0x03BB5690 FMOV S1, W31
	0x03BB5694 FCSEL S0, S0, S1, PL
	0x03BB5698 STR S0, [X0 + 0x38]
	0x03BB569C RET
	0x03BB56A0 STP X30, X21, [X31 - 0x20]!
	0x03BB56A4 STP X20, X19, [X31 + 0x10]
	0x03BB56A8 ADRP X21, 0x82D000
	0x03BB56AC ADRP X20, 0x53E000
	0x03BB56B0 LDRB W8, [X21 + 0xCF6]
	0x03BB56B4 LDR X20, [X20 + 0x598]
	0x03BB56B8 MOV X19, X0
	0x03BB56BC TBNZ X8, 0x0, 0x3BB56EC
	0x03BB56C0 ADRP X0, 0x53E000
	0x03BB56C4 LDR X0, [X0 + 0xA28]
	0x03BB56C8 BL 0x1C16CF4
	0x03BB56CC ADRP X0, 0x53E000
	0x03BB56D0 LDR X0, [X0 + 0x598]
	0x03BB56D4 BL 0x1C16CF4
	0x03BB56D8 ADRP X0, 0x5A8000
	0x03BB56DC LDR X0, [X0 + 0xD0]
	0x03BB56E0 BL 0x1C16CF4
	0x03BB56E4 MOVZ W8, 0x1
	0x03BB56E8 STRB W8, [X21 + 0xCF6]
	0x03BB56EC BL 0x3BB5600
	0x03BB56F0 LDR X8, [X20]
	0x03BB56F4 MOV X20, X0
	0x03BB56F8 LDR W9, [X8 + 0xE0]
	0x03BB56FC CBNZ W9, 0x3BB5708
	0x03BB5700 MOV X0, X8
	0x03BB5704 BL 0x1C16DFC
	0x03BB5708 MOV X0, X20
	0x03BB570C MOV X1, X31
	0x03BB5710 MOV X2, X31
	0x03BB5714 BL 0x3C354F8
	0x03BB5718 TBZ X0, 0x0, 0x3BB5768
	0x03BB571C CBZ X20, 0x3BB57A4
	0x03BB5720 MOV X0, X20
	0x03BB5724 MOV X1, X31
	0x03BB5728 BL 0x3C323D4
	0x03BB572C TBZ X0, 0x0, 0x3BB5768
	0x03BB5730 MOV X0, X20
	0x03BB5734 MOV X1, X31
	0x03BB5738 BL 0x3C32ECC
	0x03BB573C CBZ X0, 0x3BB57A4
	0x03BB5740 MOV X1, X31
	0x03BB5744 BL 0x3C35834
	0x03BB5748 TBZ X0, 0x0, 0x3BB5768
	0x03BB574C MOV X0, X20
	0x03BB5750 MOV X1, X31
	0x03BB5754 BL 0x3C32E90
	0x03BB5758 STR X0, [X19 + 0x30]
	0x03BB575C LDP X20, X19, [X31 + 0x10]
	0x03BB5760 LDP X30, X21, [X31], #0x20
	0x03BB5764 RET
	0x03BB5768 ADRP X8, 0x53E000
	0x03BB576C LDR X8, [X8 + 0xA28]
	0x03BB5770 ADRP X20, 0x5A8000
	0x03BB5774 LDR X19, [X19 + 0x10]
	0x03BB5778 LDR X0, [X8]
	0x03BB577C LDR W8, [X0 + 0xE0]
	0x03BB5780 LDR X20, [X20 + 0xD0]
	0x03BB5784 CBNZ W8, 0x3BB578C
	0x03BB5788 BL 0x1C16DFC
	0x03BB578C LDR X0, [X20]
	0x03BB5790 MOV X1, X19
	0x03BB5794 LDP X20, X19, [X31 + 0x10]
	0x03BB5798 MOV X2, X31
	0x03BB579C LDP X30, X21, [X31], #0x20
	0x03BB57A0 B 0x3C06B0C
	0x03BB57A4 BL 0x1C16F20
	0x03BB57A8 STP X30, X21, [X31 - 0x20]!
	0x03BB57AC STP X20, X19, [X31 + 0x10]
	0x03BB57B0 ADRP X21, 0x82D000
	0x03BB57B4 ADRP X20, 0x53E000
	0x03BB57B8 LDRB W8, [X21 + 0xCF7]

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+64], X29
	003 Move [X31+72], X30
	004 Move [X31+80], X28
	005 Move [X31+88], X27
	006 Move [X31+96], X26
	007 Move [X31+104], X25
	008 Move [X31+112], X24
	009 Move [X31+120], X23
	010 Move [X31+128], X22
	011 Move [X31+136], X21
	012 Move [X31+144], X20
	013 Move [X31+152], X19
	014 Move X23, 0x82E000
	015 Move X20, 0x5A7000
	016 Move X22, 0x5A7000
	017 Move X21, 0x5A9000
	018 Move X29, 0x5A9000
	019 Move X28, 0x5A9000
	020 Move X27, 0x5A9000
	021 Move X26, 0x5A9000
	022 Move X25, 0x5A9000
	023 Move X24, 0x5A9000
	024 Move X20, [X20+616]
	025 Move X22, [X22+624]
	026 Move X21, [X21+104]
	027 Move X29, [X29+112]
	028 Move X28, [X28+120]
	029 Move X27, [X27+128]
	030 Move X26, [X26+136]
	031 Move W8, [X23+3316]
	032 Move X25, [X25+144]
	033 Move X24, [X24+152]
	034 Move X19, X0
	035 Move TEMP, X8
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfEqual {77}
	039 Move X0, 0x5A7000
	040 Move X0, [X0+624]
	041 Call 0x1C17CF4
	042 Move X0, 0x5A7000
	043 Move X0, [X0+616]
	044 Call 0x1C17CF4
	045 Move X0, 0x5A9000
	046 Move X0, [X0+144]
	047 Call 0x1C17CF4
	048 Move X0, 0x5A9000
	049 Move X0, [X0+128]
	050 Call 0x1C17CF4
	051 Move X0, 0x5A9000
	052 Move X0, [X0+160]
	053 Call 0x1C17CF4
	054 Move X0, 0x5A9000
	055 Move X0, [X0+112]
	056 Call 0x1C17CF4
	057 Move X0, 0x5A9000
	058 Move X0, [X0+168]
	059 Call 0x1C17CF4
	060 Move X0, 0x5A9000
	061 Move X0, [X0+104]
	062 Call 0x1C17CF4
	063 Move X0, 0x5A9000
	064 Move X0, [X0+176]
	065 Call 0x1C17CF4
	066 Move X0, 0x5A9000
	067 Move X0, [X0+152]
	068 Call 0x1C17CF4
	069 Move X0, 0x5A9000
	070 Move X0, [X0+120]
	071 Call 0x1C17CF4
	072 Move X0, 0x5A9000
	073 Move X0, [X0+136]
	074 Call 0x1C17CF4
	075 Move W8, 1
	076 Move [X23+3316], W8
	077 Move W8, 0x3F800000
	078 Move [X19+16], W8
	079 Move X0, [X20]
	080 Call 0x1C17F10
	081 Move X5, [X22]
	082 NotImplemented "Instruction MOVI not yet implemented."
	083 Add X1, X31, 0
	084 Move W2, 1
	085 Move X3, X31
	086 Move W4, W31
	087 Move X20, X0
	088 Move [X31+48], X31
	089 Move [X31+16], V0
	090 Move [X31+24], V0
	091 Move [X31], V0
	092 Call BindableVariable`1<PokeStateData>..ctor, X0, X1, X2, X3, X4
	093 Move [X19+24], X20
	094 Move X0, [X21]
	095 Call 0x1C17F10
	096 Move X1, [X29]
	097 Move X20, X0
	098 Call Dictionary`2<Object, Vector3>..ctor, X0
	099 Move [X19+56], X20
	100 Move X0, [X28]
	101 Call 0x1C17F10
	102 Move X1, [X27]
	103 Move X20, X0
	104 Call Dictionary`2<Object, Object>..ctor, X0
	105 Move [X19+64], X20
	106 Move X0, [X26]
	107 Call 0x1C17F10
	108 Move X1, [X25]
	109 Move X20, X0
	110 Call Dictionary`2<Object, Boolean>..ctor, X0
	111 Move [X19+72], X20
	112 Move X0, [X24]
	113 Call 0x1C17F10
	114 Move X8, 0x5A9000
	115 Move X8, [X8+168]
	116 Move X20, X0
	117 Move X1, [X8]
	118 Call Dictionary`2<Object, Object>..ctor, X0
	119 Move [X19+80], X20
	120 Move X8, 0x5A9000
	121 Move X8, [X8+176]
	122 Move X0, [X8]
	123 Call 0x1C17F10
	124 Move X8, 0x5A9000
	125 Move X8, [X8+160]
	126 Move X20, X0
	127 Move X1, [X8]
	128 Call Dictionary`2<Object, Single>..ctor, X0
	129 Move X0, X19
	130 Move X1, X31
	131 Move [X19+88], X20
	132 Call Object..ctor, X0
	133 Move X20, [X31+144]
	134 Move X19, [X31+152]
	135 Move X22, [X31+128]
	136 Move X21, [X31+136]
	137 Move X24, [X31+112]
	138 Move X23, [X31+120]
	139 Move X26, [X31+96]
	140 Move X25, [X31+104]
	141 Move X28, [X31+80]
	142 Move X27, [X31+88]
	143 Move X29, [X31+64]
	144 Move X30, [X31+72]
	145 Add X31, X31, 160
	146 Return 

