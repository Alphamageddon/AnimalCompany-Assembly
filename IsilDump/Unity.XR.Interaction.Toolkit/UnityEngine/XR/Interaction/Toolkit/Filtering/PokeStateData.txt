Type: UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData

Method: System.Boolean get_meetsRequirements()

Disassembly:
	0x03BB3348 LDR X20, [X19 + 0x20]
	0x03BB334C LDR W8, [X0 + 0xE0]

ISIL:
	001 Move W0, [X0]
	002 Return X0

Method: System.Void set_meetsRequirements(System.Boolean value)

Disassembly:
	0x03BB3350 CBNZ W8, 0x3BB3358
	0x03BB3354 BL 0x1C16DFC
	0x03BB3358 MOV X0, X20

ISIL:
	001 And W8, W1, 1
	002 Move [X0], W8
	003 Return 

Method: UnityEngine.Vector3 get_pokeInteractionPoint()

Disassembly:
	0x03BB335C MOV X1, X31
	0x03BB3360 MOV X2, X31
	0x03BB3364 BL 0x3C354F8

ISIL:
	001 Move S0, [X0+4]
	002 Move S1, [X0+8]
	003 Move V2, [X0+12]
	004 Return X0

Method: System.Void set_pokeInteractionPoint(UnityEngine.Vector3 value)

Disassembly:
	0x03BB3368 TBZ X0, 0x0, 0x3BB341C
	0x03BB336C LDR X8, [X19 + 0x20]
	0x03BB3370 CBZ X8, 0x3BB3428

ISIL:
	001 Move [X0+4], S0
	002 Move [X0+12], S1
	003 Move [X0+12], S2
	004 Return 

Method: UnityEngine.Vector3 get_axisAlignedPokeInteractionPoint()

Disassembly:
	0x03BB3374 LDR X20, [X8 + 0x90]
	0x03BB3378 ADRP X8, 0x5A7000
	0x03BB337C LDR X8, [X8 + 0x190]

ISIL:
	001 Move S0, [X0+16]
	002 Move S1, [X0+20]
	003 Move V2, [X0+24]
	004 Return X0

Method: System.Void set_axisAlignedPokeInteractionPoint(UnityEngine.Vector3 value)

Disassembly:
	0x03BB3380 LDR X0, [X8]
	0x03BB3384 BL 0x1C16F10
	0x03BB3388 ADRP X8, 0x5A9000

ISIL:
	001 Move [X0+16], S0
	002 Move [X0+24], S1
	003 Move [X0+24], S2
	004 Return 

Method: System.Single get_interactionStrength()

Disassembly:
	0x03BB338C LDR X8, [X8 + 0xFA0]
	0x03BB3390 MOV X1, X19

ISIL:
	001 Move V0, [X0+28]
	002 Return V0

Method: System.Void set_interactionStrength(System.Single value)

Disassembly:
	0x03BB3394 MOV X3, X31
	0x03BB3398 MOV X21, X0

ISIL:
	001 Move [X0+28], S0
	002 Return 

Method: UnityEngine.Vector3 get_axisNormal()

Disassembly:
	0x03BB339C LDR X2, [X8]
	0x03BB33A0 BL 0x2725C6C
	0x03BB33A4 CBZ X20, 0x3BB3428

ISIL:
	001 Move S0, [X0+32]
	002 Move S1, [X0+36]
	003 Move V2, [X0+40]
	004 Return X0

Method: System.Void set_axisNormal(UnityEngine.Vector3 value)

Disassembly:
	0x03BB33A8 ADRP X8, 0x5A7000
	0x03BB33AC LDR X8, [X8 + 0x1F8]
	0x03BB33B0 MOV X0, X20

ISIL:
	001 Move [X0+32], S0
	002 Move [X0+40], S1
	003 Move [X0+40], S2
	004 Return 

Method: UnityEngine.Transform get_target()

Disassembly:
	0x03BB33B4 MOV X1, X21
	0x03BB33B8 LDR X2, [X8]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_target(UnityEngine.Transform value)

Disassembly:
	0x03BB33BC BL 0x2729BA4
	0x03BB33C0 LDR X8, [X19 + 0x20]

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Boolean Equals(UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData other)

Disassembly:
	0x03BB33C4 CBZ X8, 0x3BB3428
	0x03BB33C8 LDR X20, [X8 + 0x98]
	0x03BB33CC ADRP X8, 0x5A7000
	0x03BB33D0 LDR X8, [X8 + 0x198]
	0x03BB33D4 LDR X0, [X8]
	0x03BB33D8 BL 0x1C16F10
	0x03BB33DC ADRP X8, 0x5A9000
	0x03BB33E0 LDR X8, [X8 + 0xFA8]
	0x03BB33E4 MOV X1, X19
	0x03BB33E8 MOV X3, X31
	0x03BB33EC MOV X21, X0
	0x03BB33F0 LDR X2, [X8]
	0x03BB33F4 BL 0x2725C6C
	0x03BB33F8 CBZ X20, 0x3BB3428
	0x03BB33FC ADRP X8, 0x5A7000
	0x03BB3400 LDR X8, [X8 + 0x208]
	0x03BB3404 MOV X0, X20
	0x03BB3408 LDP X20, X19, [X31 + 0x10]
	0x03BB340C MOV X1, X21
	0x03BB3410 LDR X2, [X8]
	0x03BB3414 LDP X30, X21, [X31], #0x20
	0x03BB3418 B 0x2729BA4
	0x03BB341C LDP X20, X19, [X31 + 0x10]
	0x03BB3420 LDP X30, X21, [X31], #0x20
	0x03BB3424 RET
	0x03BB3428 BL 0x1C16F20
	0x03BB342C STR X30, [X31 - 0x20]!
	0x03BB3430 STP X20, X19, [X31 + 0x10]
	0x03BB3434 ADRP X20, 0x82F000
	0x03BB3438 LDRB W8, [X20 + 0xCEB]
	0x03BB343C MOV X19, X0
	0x03BB3440 TBNZ X8, 0x0, 0x3BB3458
	0x03BB3444 ADRP X0, 0x5A9000
	0x03BB3448 LDR X0, [X0 + 0xFB0]
	0x03BB344C BL 0x1C16CF4
	0x03BB3450 MOVZ W8, 0x1
	0x03BB3454 STRB W8, [X20 + 0xCEB]
	0x03BB3458 LDR X0, [X19 + 0x38]
	0x03BB345C CBZ X0, 0x3BB3478
	0x03BB3460 ADRP X8, 0x5A9000
	0x03BB3464 LDR X8, [X8 + 0xFB0]
	0x03BB3468 LDP X20, X19, [X31 + 0x10]
	0x03BB346C LDR X1, [X8]
	0x03BB3470 LDR X30, [X31], #0x20
	0x03BB3474 B 0x2AC108C
	0x03BB3478 BL 0x1C16F20
	0x03BB347C RET
	0x03BB3480 STR D10, [X31 - 0x50]!
	0x03BB3484 STP D9, D8, [X31 + 0x10]
	0x03BB3488 STP X30, X23, [X31 + 0x20]
	0x03BB348C STP X22, X21, [X31 + 0x30]
	0x03BB3490 STP X20, X19, [X31 + 0x40]
	0x03BB3494 ADRP X21, 0x82F000
	0x03BB3498 LDRB W8, [X21 + 0xCE3]
	0x03BB349C MOV X19, X2
	0x03BB34A0 MOV X20, X1
	0x03BB34A4 MOV X22, X0
	0x03BB34A8 TBNZ X8, 0x0, 0x3BB34D8
	0x03BB34AC ADRP X0, 0x5A7000
	0x03BB34B0 LDR X0, [X0 + 0x8D8]
	0x03BB34B4 BL 0x1C16CF4
	0x03BB34B8 ADRP X0, 0x5A7000
	0x03BB34BC LDR X0, [X0 + 0x2F8]
	0x03BB34C0 BL 0x1C16CF4
	0x03BB34C4 ADRP X0, 0x5A8000
	0x03BB34C8 LDR X0, [X0 + 0x1B8]
	0x03BB34CC BL 0x1C16CF4
	0x03BB34D0 MOVZ W8, 0x1
	0x03BB34D4 STRB W8, [X21 + 0xCE3]
	0x03BB34D8 CBZ X20, 0x3BB3514
	0x03BB34DC ADRP X8, 0x5A8000
	0x03BB34E0 LDR X8, [X8 + 0x1B8]
	0x03BB34E4 LDR X9, [X20]
	0x03BB34E8 LDR X8, [X8]
	0x03BB34EC LDRB W11, [X9 + 0x130]
	0x03BB34F0 LDRB W10, [X8 + 0x130]
	0x03BB34F4 CMP W11, W10
	0x03BB34F8 B.CC 0x3BB3514
	0x03BB34FC LDR X9, [X9 + 0xC8]
	0x03BB3500 ADD X9, X9, X10, 0x3, LSL
	0x03BB3504 LDUR X9, [X9 - 0x8]
	0x03BB3508 CMP X9, X8
	0x03BB350C CSEL X21, X20, X31, EQ
	0x03BB3510 B.EQ 0x3BB3530
	0x03BB3514 LDP X20, X19, [X31 + 0x40]
	0x03BB3518 LDP X22, X21, [X31 + 0x30]

ISIL:
	001 Subtract X31, X31, 48
	002 Move [X31+16], X30
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x830000
	007 Move W8, [X21+3288]
	008 Move X19, X1
	009 Move X20, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x541000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3288], W8
	019 Move W8, [X20]
	020 Move W9, [X19]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 NotImplemented "Instruction CSET not yet implemented."
	023 NotImplemented "Instruction CMP not yet implemented."
	024 NotImplemented "Instruction CSET not yet implemented."
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move V0, [X20+4]
	027 Move V1, [X19+4]
	028 Move W0, W31
	029 NotImplemented "Instruction FCMP not yet implemented."
	030 Move V0, [X20+8]
	031 Move V1, [X19+8]
	032 NotImplemented "Instruction FCMP not yet implemented."
	033 Move V0, [X20+12]
	034 Move V1, [X19+12]
	035 NotImplemented "Instruction FCMP not yet implemented."
	036 Move V0, [X20+16]
	037 Move V1, [X19+16]
	038 Move W0, W31
	039 NotImplemented "Instruction FCMP not yet implemented."
	040 Move V0, [X20+20]
	041 Move V1, [X19+20]
	042 NotImplemented "Instruction FCMP not yet implemented."
	043 Move V0, [X20+24]
	044 Move V1, [X19+24]
	045 NotImplemented "Instruction FCMP not yet implemented."
	046 Move V0, [X20+28]
	047 Add X0, X31, 12
	048 Move X1, X31
	049 Move [X31+12], S0
	050 Move V0, [X19+28]
	051 Call Single.Equals, X0, V0
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {79}
	056 Move V0, [X20+32]
	057 Move V1, [X19+32]
	058 Move W0, W31
	059 NotImplemented "Instruction FCMP not yet implemented."
	060 Move V0, [X20+36]
	061 Move V1, [X19+36]
	062 NotImplemented "Instruction FCMP not yet implemented."
	063 Move V0, [X20+40]
	064 Move V1, [X19+40]
	065 NotImplemented "Instruction FCMP not yet implemented."
	066 Move X8, 0x541000
	067 Move X8, [X8+1432]
	068 Move X20, [X20+48]
	069 Move X19, [X19+48]
	070 Move X0, [X8]
	071 Move W8, [X0+224]
	072 Compare W8, 0
	073 JumpIfNotEqual {75}
	074 Call 0x1C17DFC
	075 Move X0, X20
	076 Move X1, X19
	077 Move X2, X31
	078 Call Object.op_Equality, X0, X1
	079 Move W0, W31
	080 Move X20, [X31+32]
	081 Move X19, [X31+40]
	082 Move X30, [X31+16]
	083 Move X21, [X31+24]
	084 And W0, W0, 1
	085 Add X31, X31, 48
	086 Return X0

Method: System.Boolean Equals(System.Object obj)

Disassembly:
	0x03BB351C LDP X30, X23, [X31 + 0x20]
	0x03BB3520 LDP D9, D8, [X31 + 0x10]
	0x03BB3524 MOVZ W0, 0x1
	0x03BB3528 LDR V10, [X31], #0x50
	0x03BB352C RET
	0x03BB3530 CBZ X19, 0x3BB3678
	0x03BB3534 ADRP X10, 0x5A7000
	0x03BB3538 LDR X8, [X19]
	0x03BB353C LDR X10, [X10 + 0x8D8]
	0x03BB3540 LDRH W9, [X8 + 0x12E]
	0x03BB3544 LDR X1, [X10]
	0x03BB3548 CBZ X9, 0x3BB356C
	0x03BB354C LDR X10, [X8 + 0xB0]
	0x03BB3550 ADD X10, X10, 0x8
	0x03BB3554 LDUR X11, [X10 - 0x8]
	0x03BB3558 CMP X11, X1
	0x03BB355C B.EQ 0x3BB357C
	0x03BB3560 SUBS X9, X9, 0x1
	0x03BB3564 ADD X10, X10, 0x10
	0x03BB3568 B.NE 0x3BB3554
	0x03BB356C MOVZ W2, 0x7
	0x03BB3570 MOV X0, X19
	0x03BB3574 BL 0x1C5C788
	0x03BB3578 B 0x3BB358C
	0x03BB357C LDR W9, [X10]
	0x03BB3580 ADD W9, W9, 0x7
	0x03BB3584 ADD X8, X8, W9, 0x4, SXTW
	0x03BB3588 ADD X0, X8, 0x138
	0x03BB358C LDP X8, X2, [X0]
	0x03BB3590 MOV X0, X19
	0x03BB3594 MOV X1, X20
	0x03BB3598 BLR X8
	0x03BB359C CBZ X0, 0x3BB3678
	0x03BB35A0 LDR X22, [X22 + 0x38]
	0x03BB35A4 MOV X1, X31
	0x03BB35A8 MOV X23, X0
	0x03BB35AC BL 0x3C3F58C
	0x03BB35B0 ADRP X10, 0x5A7000

ISIL:
	001 Subtract X31, X31, 96
	002 Move [X31+64], X30
	003 Move [X31+72], X21
	004 Move [X31+80], X20
	005 Move [X31+88], X19
	006 Move X21, 0x830000
	007 Move W8, [X21+3289]
	008 Move X20, X1
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x56C000
	015 Move X0, [X0+1752]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3289], W8
	019 Compare X20, 0
	020 JumpIfEqual {26}
	021 Move X8, 0x56C000
	022 Move X8, [X8+1752]
	023 Move X9, [X20]
	024 Move X8, [X8]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move W0, W31
	027 Move X0, X20
	028 Call 0x1C17E08
	029 Move X8, [X0+48]
	030 Move V2, [X0+16]
	031 Move V0, [X0+32]
	032 Move V1, [X0]
	033 Add X1, X31, 0
	034 Move X0, X19
	035 Move [X31+48], X8
	036 Move [X31+16], V2
	037 Move [X31+24], V0
	038 Move [X31], V1
	039 Call PokeStateData.Equals, X0, X1
	040 Move X20, [X31+80]
	041 Move X19, [X31+88]
	042 Move X30, [X31+64]
	043 Move X21, [X31+72]
	044 And W0, W0, 1
	045 Add X31, X31, 96
	046 Return X0

Method: System.Int32 GetHashCode()

Disassembly:
	0x03BB35B4 LDR X8, [X20]
	0x03BB35B8 LDR X10, [X10 + 0x2F8]
	0x03BB35BC MOV V8.16B, V0.16B
	0x03BB35C0 MOV V9.16B, V1.16B
	0x03BB35C4 LDRH W9, [X8 + 0x12E]
	0x03BB35C8 LDR X1, [X10]
	0x03BB35CC MOV V10.16B, V2.16B
	0x03BB35D0 CBZ X9, 0x3BB35F4
	0x03BB35D4 LDR X10, [X8 + 0xB0]
	0x03BB35D8 ADD X10, X10, 0x8
	0x03BB35DC LDUR X11, [X10 - 0x8]
	0x03BB35E0 CMP X11, X1
	0x03BB35E4 B.EQ 0x3BB3604
	0x03BB35E8 SUBS X9, X9, 0x1
	0x03BB35EC ADD X10, X10, 0x10
	0x03BB35F0 B.NE 0x3BB35DC
	0x03BB35F4 MOVZ W2, 0x6
	0x03BB35F8 MOV X0, X20
	0x03BB35FC BL 0x1C5C788
	0x03BB3600 B 0x3BB3614
	0x03BB3604 LDR W9, [X10]
	0x03BB3608 ADD W9, W9, 0x6
	0x03BB360C ADD X8, X8, W9, 0x4, SXTW
	0x03BB3610 ADD X0, X8, 0x138
	0x03BB3614 LDP X8, X2, [X0]
	0x03BB3618 MOV X0, X20
	0x03BB361C MOV X1, X19
	0x03BB3620 BLR X8
	0x03BB3624 CBZ X0, 0x3BB3678
	0x03BB3628 MOV X1, X31
	0x03BB362C BL 0x3C3F58C
	0x03BB3630 CBZ X21, 0x3BB3678
	0x03BB3634 CBZ X22, 0x3BB3678
	0x03BB3638 MOV V3.16B, V0.16B
	0x03BB363C MOV V4.16B, V1.16B
	0x03BB3640 LDR V6, [X21 + 0x1B8]
	0x03BB3644 MOV X0, X22
	0x03BB3648 MOV X1, X21
	0x03BB364C MOV V0.16B, V8.16B
	0x03BB3650 MOV V1.16B, V9.16B
	0x03BB3654 MOV X2, X23
	0x03BB3658 LDP X20, X19, [X31 + 0x40]
	0x03BB365C LDP X22, X21, [X31 + 0x30]
	0x03BB3660 LDP X30, X23, [X31 + 0x20]
	0x03BB3664 LDP D9, D8, [X31 + 0x10]
	0x03BB3668 MOV V5.16B, V2.16B
	0x03BB366C MOV V2.16B, V10.16B
	0x03BB3670 LDR V10, [X31], #0x50
	0x03BB3674 B 0x3BB367C
	0x03BB3678 BL 0x1C16F20
	0x03BB367C SUB X31, X31, 0x120
	0x03BB3680 STP D15, D14, [X31 + 0x80]
	0x03BB3684 STP D13, D12, [X31 + 0x90]
	0x03BB3688 STP D11, D10, [X31 + 0xA0]
	0x03BB368C STP D9, D8, [X31 + 0xB0]
	0x03BB3690 STP X29, X30, [X31 + 0xC0]
	0x03BB3694 STP X28, X27, [X31 + 0xD0]
	0x03BB3698 STP X26, X25, [X31 + 0xE0]
	0x03BB369C STP X24, X23, [X31 + 0xF0]
	0x03BB36A0 STP X22, X21, [X31 + 0x100]
	0x03BB36A4 STP X20, X19, [X31 + 0x110]
	0x03BB36A8 ADRP X22, 0x82F000
	0x03BB36AC LDRB W8, [X22 + 0xCEC]
	0x03BB36B0 MOV X19, X2
	0x03BB36B4 MOV V12.16B, V6.16B
	0x03BB36B8 MOV V10.16B, V5.16B
	0x03BB36BC MOV V11.16B, V4.16B
	0x03BB36C0 MOV V9.16B, V3.16B
	0x03BB36C4 MOV V13.16B, V2.16B
	0x03BB36C8 MOV V14.16B, V1.16B
	0x03BB36CC MOV V8.16B, V0.16B
	0x03BB36D0 MOV X21, X1
	0x03BB36D4 MOV X20, X0
	0x03BB36D8 TBNZ X8, 0x0, 0x3BB378C
	0x03BB36DC ADRP X0, 0x5A8000
	0x03BB36E0 LDR X0, [X0 + 0x1F8]
	0x03BB36E4 BL 0x1C16CF4
	0x03BB36E8 ADRP X0, 0x5A9000
	0x03BB36EC LDR X0, [X0 + 0xFB8]
	0x03BB36F0 BL 0x1C16CF4
	0x03BB36F4 ADRP X0, 0x5A9000
	0x03BB36F8 LDR X0, [X0 + 0xFC0]
	0x03BB36FC BL 0x1C16CF4
	0x03BB3700 ADRP X0, 0x5A9000
	0x03BB3704 LDR X0, [X0 + 0xFC8]
	0x03BB3708 BL 0x1C16CF4
	0x03BB370C ADRP X0, 0x5A9000
	0x03BB3710 LDR X0, [X0 + 0xFD0]
	0x03BB3714 BL 0x1C16CF4
	0x03BB3718 ADRP X0, 0x5A9000
	0x03BB371C LDR X0, [X0 + 0xFD8]
	0x03BB3720 BL 0x1C16CF4
	0x03BB3724 ADRP X0, 0x5A9000
	0x03BB3728 LDR X0, [X0 + 0xFE0]
	0x03BB372C BL 0x1C16CF4
	0x03BB3730 ADRP X0, 0x5A9000
	0x03BB3734 LDR X0, [X0 + 0xFE8]
	0x03BB3738 BL 0x1C16CF4
	0x03BB373C ADRP X0, 0x5A9000
	0x03BB3740 LDR X0, [X0 + 0xFF0]
	0x03BB3744 BL 0x1C16CF4
	0x03BB3748 ADRP X0, 0x5A9000
	0x03BB374C LDR X0, [X0 + 0xFF8]
	0x03BB3750 BL 0x1C16CF4
	0x03BB3754 ADRP X0, 0x5AA000
	0x03BB3758 LDR X0, [X0]
	0x03BB375C BL 0x1C16CF4
	0x03BB3760 ADRP X0, 0x5AA000
	0x03BB3764 LDR X0, [X0 + 0x8]
	0x03BB3768 BL 0x1C16CF4
	0x03BB376C ADRP X0, 0x540000
	0x03BB3770 LDR X0, [X0 + 0x598]
	0x03BB3774 BL 0x1C16CF4
	0x03BB3778 ADRP X0, 0x5A7000
	0x03BB377C LDR X0, [X0 + 0x368]
	0x03BB3780 BL 0x1C16CF4
	0x03BB3784 MOVZ W8, 0x1
	0x03BB3788 STRB W8, [X22 + 0xCEC]
	0x03BB378C STR X31, [X31 + 0x40]
	0x03BB3790 STR W31, [X31 + 0x38]
	0x03BB3794 STR X31, [X31 + 0x30]
	0x03BB3798 LDR X8, [X20 + 0x28]
	0x03BB379C CBZ X8, 0x3BB37CC
	0x03BB37A0 ADRP X8, 0x540000
	0x03BB37A4 LDR X8, [X8 + 0x598]
	0x03BB37A8 LDR X0, [X8]
	0x03BB37AC LDR W8, [X0 + 0xE0]

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+32], X29
	003 Move [X31+40], X30
	004 Move [X31+48], X28
	005 Move [X31+56], X27
	006 Move [X31+64], X26
	007 Move [X31+72], X25
	008 Move [X31+80], X24
	009 Move [X31+88], X23
	010 Move [X31+96], X22
	011 Move [X31+104], X21
	012 Move [X31+112], X20
	013 Move [X31+120], X19
	014 Move X21, 0x830000
	015 Move X20, 0x541000
	016 Move W8, [X21+3290]
	017 Move X20, [X20+2904]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {28}
	023 Move X0, 0x541000
	024 Move X0, [X0+2904]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X21+3290], W8
	028 Move [X31+24], W31
	029 Move [X31+16], X31
	030 Move [X31+12], W31
	031 Move W8, [X19]
	032 Move X0, [X20]
	033 Move [X31+28], W8
	034 Move W8, [X0+224]
	035 Compare W8, 0
	036 JumpIfNotEqual {38}
	037 Call 0x1C17DFC
	038 Add X0, X31, 28
	039 Move X1, X31
	040 Call Boolean.GetHashCode, X0
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 Move V1, [X19+12]
	043 Move W20, W0
	044 Add X8, X31, 16
	045 Add X0, X31, 16
	046 Move X1, X31
	047 Or X21, X8, 7
	048 Add X24, X8, 8
	049 Move [X31+16], D0
	050 Move [X31+24], S1
	051 Call Single.GetHashCode, X0
	052 Move [X31+8], W0
	053 Move X0, X21
	054 Move X1, X31
	055 Call Single.GetHashCode, X0
	056 Move W22, W0
	057 Move X0, X24
	058 Move X1, X31
	059 Call Single.GetHashCode, X0
	060 Move V0, [X19+16]
	061 Move V1, [X19+24]
	062 Move W23, W0
	063 Add X0, X31, 16
	064 Move X1, X31
	065 Move [X31+16], D0
	066 Move [X31+24], S1
	067 Call Single.GetHashCode, X0
	068 Move W25, W0
	069 Move X0, X21
	070 Move X1, X31
	071 Call Single.GetHashCode, X0
	072 Move W27, W0
	073 Move X0, X24
	074 Move X1, X31
	075 Call Single.GetHashCode, X0
	076 Move V0, [X19+28]
	077 Move W28, W0
	078 Add X0, X31, 12
	079 Move X1, X31
	080 Move [X31+12], S0
	081 Call Single.GetHashCode, X0
	082 Move V0, [X19+32]
	083 Move V1, [X19+40]
	084 Move W26, W0
	085 Add X0, X31, 16
	086 Move X1, X31
	087 Move [X31+16], D0
	088 Move [X31+24], S1
	089 Call Single.GetHashCode, X0
	090 Move W29, W0
	091 Move X0, X21
	092 Move X1, X31
	093 Call Single.GetHashCode, X0
	094 Move W21, W0
	095 Move X0, X24
	096 Move X1, X31
	097 Call Single.GetHashCode, X0
	098 Move X8, [X19+48]
	099 Compare X8, 0
	100 JumpIfEqual {155}
	101 Move X9, [X8]
	102 Xor W10, W29, W21
	103 Xor W19, W10, W0
	104 Xor W11, W25, W27
	105 Move X10, [X9+344]
	106 Move X1, [X9+352]
	107 Move W9, [X31+8]
	108 Move X0, X8
	109 Xor W21, W11, W28
	110 Xor W9, W9, W22
	111 Xor W22, W9, W23
	112 NotImplemented "Instruction BLR not yet implemented."
	113 Move W8, W20
	114 ShiftRight W8, 27
	115 And W8, W8, 0x3FFFFFF
	116 Subtract W8, W8, W20
	117 Add W8, W8, W22
	118 Move W9, W8
	119 ShiftRight W9, 27
	120 And W9, W9, 0x3FFFFFF
	121 Subtract W8, W9, W8
	122 Add W8, W8, W21
	123 Move W9, W8
	124 ShiftRight W9, 27
	125 And W9, W9, 0x3FFFFFF
	126 Subtract W8, W9, W8
	127 Add W8, W8, W26
	128 Move W9, W8
	129 ShiftRight W9, 27
	130 And W9, W9, 0x3FFFFFF
	131 Subtract W8, W9, W8
	132 Add W8, W8, W19
	133 Move W9, W8
	134 ShiftRight W9, 27
	135 And W9, W9, 0x3FFFFFF
	136 Move X20, [X31+112]
	137 Move X19, [X31+120]
	138 Move X22, [X31+96]
	139 Move X21, [X31+104]
	140 Move X24, [X31+80]
	141 Move X23, [X31+88]
	142 Move X26, [X31+64]
	143 Move X25, [X31+72]
	144 Move X28, [X31+48]
	145 Move X27, [X31+56]
	146 Move X29, [X31+32]
	147 Move X30, [X31+40]
	148 Subtract W8, W9, W8
	149 Move W9, 0xEF51
	150 Add W8, W8, W0
	151 NotImplemented "Instruction MOVK not yet implemented."
	152 Add W0, W8, W9
	153 Add X31, X31, 128
	154 Return X0
	155 Call 0x1C17F20

