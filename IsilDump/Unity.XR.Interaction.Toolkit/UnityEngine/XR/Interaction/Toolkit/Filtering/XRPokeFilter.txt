Type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRPokeFilter

Method: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable get_pokeInteractable()

Disassembly:
	0x03BB3920 STRB W8, [X24 + 0x784]
	0x03BB3924 ADRP X24, 0x540000

ISIL:
	001 Move X0, [X0+32]
	002 Return X0

Method: System.Void set_pokeInteractable(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable value)

Disassembly:
	0x03BB3928 LDR X24, [X24 + 0x5A8]
	0x03BB392C LDR X0, [X24]

ISIL:
	001 Move [X0+32], X1

Method: UnityEngine.Collider get_pokeCollider()

Disassembly:
	0x03BB3A84 BL 0x2A89728
	0x03BB3A88 LDR X0, [X20 + 0x48]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_pokeCollider(UnityEngine.Collider value)

Disassembly:
	0x03BB3A8C CBZ X0, 0x3BB3F78
	0x03BB3A90 ADRP X8, 0x5A9000

ISIL:
	001 Move [X0+40], X1
	002 Call XRPokeFilter.Setup, X0
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdDatumProperty get_pokeConfiguration()

Disassembly:
	0x03BB3A94 LDR X8, [X8 + 0xFE0]
	0x03BB3A98 MOV X1, X21

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_pokeConfiguration(UnityEngine.XR.Interaction.Toolkit.Filtering.PokeThresholdDatumProperty value)

Disassembly:
	0x03BB3A9C LDR X2, [X8]
	0x03BB3AA0 BL 0x2A896B4

ISIL:
	001 Move [X0+48], X1
	002 Call XRPokeFilter.Setup, X0
	003 Return 

Method: Unity.XR.CoreUtils.Bindings.Variables.IReadOnlyBindableVariable`1<UnityEngine.XR.Interaction.Toolkit.Filtering.PokeStateData> get_pokeStateData()

Disassembly:
	0x03BB3AA4 FCMP S9, 0x0
	0x03BB3AA8 B.LE 0x3BB3B90
	0x03BB3AAC TBNZ X0, 0x0, 0x3BB3B90
	0x03BB3AB0 LDR X0, [X20 + 0x38]
	0x03BB3AB4 CBZ X0, 0x3BB3F78
	0x03BB3AB8 ADRP X8, 0x5A9000

ISIL:
	001 Move X8, [X0+56]
	002 Compare X8, 0
	003 JumpIfEqual {6}
	004 Move X0, [X8+24]
	005 Return X0
	006 Move X0, X31
	007 Return X0

Method: System.Boolean get_canProcess()

Disassembly:
	0x03BB3ABC LDR X8, [X8 + 0xFC0]
	0x03BB3AC0 ADD X2, X31, 0x30
	0x03BB3AC4 MOV X1, X21
	0x03BB3AC8 LDR X3, [X8]
	0x03BB3ACC BL 0x2AC2940
	0x03BB3AD0 TBZ X0, 0x0, 0x3BB3BF0
	0x03BB3AD4 LDR X0, [X20 + 0x40]
	0x03BB3AD8 CBZ X0, 0x3BB3F78
	0x03BB3ADC STR S15, [X31 + 0x18]
	0x03BB3AE0 ADRP X8, 0x5A9000
	0x03BB3AE4 LDR X8, [X8 + 0xFD8]
	0x03BB3AE8 MOV X1, X21

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X1, X31
	004 Move X19, X0
	005 Call Behaviour.get_isActiveAndEnabled, X0
	006 Move TEMP, X0
	007 And TEMP, TEMP, 1
	008 Compare TEMP, 1
	009 JumpIfNotEqual {13}
	010 Move X8, [X19+56]
	011 NotImplemented "Instruction CMP not yet implemented."
	012 NotImplemented "Instruction CSET not yet implemented."
	013 Move W0, W31
	014 Move X30, [X31+16]
	015 Move X19, [X31+24]
	016 Return X0

Method: System.Void Reset()

Disassembly:
	0x03BB3AEC LDR X2, [X8]

ISIL:
	001 Return 

Method: System.Void OnValidate()

Disassembly:
	0x03BB3AF0 BL 0x2AA5018

ISIL:
	001 Return 

Method: System.Void Awake()

Disassembly:
	0x03BB3AF4 CBZ X0, 0x3BB3F78
	0x03BB3AF8 LDP S1, S2, [X31 + 0x34]
	0x03BB3AFC LDR V0, [X31 + 0x30]
	0x03BB3B00 MOV X1, X31
	0x03BB3B04 MOV V8.16B, V14.16B
	0x03BB3B08 MOV V15.16B, V13.16B
	0x03BB3B0C BL 0x3C3DE4C
	0x03BB3B10 LDRB W8, [X25 + 0x785]
	0x03BB3B14 MOV V13.16B, V0.16B
	0x03BB3B18 MOV V9.16B, V1.16B
	0x03BB3B1C MOV V10.16B, V2.16B
	0x03BB3B20 CBNZ W8, 0x3BB3B38
	0x03BB3B24 ADRP X0, 0x540000
	0x03BB3B28 LDR X0, [X0 + 0x5A8]
	0x03BB3B2C BL 0x1C16CF4
	0x03BB3B30 MOVZ W8, 0x1
	0x03BB3B34 STRB W8, [X25 + 0x785]
	0x03BB3B38 LDR X0, [X24]
	0x03BB3B3C LDR V0, [X31 + 0x1C]
	0x03BB3B40 LDR W8, [X0 + 0xE0]
	0x03BB3B44 FSUB S14, S13, S0
	0x03BB3B48 FSUB S13, S9, S8
	0x03BB3B4C FSUB S9, S10, S15
	0x03BB3B50 CBNZ W8, 0x3BB3B58
	0x03BB3B54 BL 0x1C16DFC
	0x03BB3B58 FMUL S0, S14, S14
	0x03BB3B5C FMUL S1, S13, S13
	0x03BB3B60 FADD S0, S0, S1
	0x03BB3B64 FMUL S1, S9, S9
	0x03BB3B68 FADD S0, S1, S0
	0x03BB3B6C FSQRT S2, S0
	0x03BB3B70 LDR V0, [X31 + 0x18]
	0x03BB3B74 LDR V10, [X31 + 0x20]
	0x03BB3B78 FCMP S2, S0
	0x03BB3B7C B.LE 0x3BB3B98
	0x03BB3B80 FDIV S0, S14, S2
	0x03BB3B84 FDIV S1, S13, S2
	0x03BB3B88 FDIV S2, S9, S2
	0x03BB3B8C B 0x3BB3BC4
	0x03BB3B90 TBNZ X0, 0x0, 0x3BB3C28
	0x03BB3B94 B 0x3BB3D34
	0x03BB3B98 LDRB W8, [X23 + 0x783]
	0x03BB3B9C CBNZ W8, 0x3BB3BB4
	0x03BB3BA0 ADRP X0, 0x540000
	0x03BB3BA4 LDR X0, [X0 + 0x5A0]
	0x03BB3BA8 BL 0x1C16CF4
	0x03BB3BAC MOVZ W8, 0x1
	0x03BB3BB0 STRB W8, [X23 + 0x783]
	0x03BB3BB4 LDR X8, [X22]
	0x03BB3BB8 LDR X8, [X8 + 0xB8]
	0x03BB3BBC LDP S0, S1, [X8]
	0x03BB3BC0 LDR V2, [X8 + 0x8]
	0x03BB3BC4 MOV V14.16B, V8.16B
	0x03BB3BC8 LDP S8, S3, [X31 + 0x24]
	0x03BB3BCC MOV V13.16B, V15.16B
	0x03BB3BD0 LDR V15, [X31 + 0x18]
	0x03BB3BD4 FMUL S0, S8, S0
	0x03BB3BD8 FMUL S1, S3, S1
	0x03BB3BDC FADD S0, S0, S1
	0x03BB3BE0 FMUL S1, S10, S2
	0x03BB3BE4 FADD S0, S1, S0
	0x03BB3BE8 FCMP S0, 0x0
	0x03BB3BEC B.LE 0x3BB3D34
	0x03BB3BF0 CBZ X21, 0x3BB3C28
	0x03BB3BF4 ADRP X8, 0x5A7000
	0x03BB3BF8 LDR X8, [X8 + 0x368]
	0x03BB3BFC LDR X9, [X21]
	0x03BB3C00 LDR X8, [X8]
	0x03BB3C04 LDRB W11, [X9 + 0x130]
	0x03BB3C08 LDRB W10, [X8 + 0x130]
	0x03BB3C0C CMP W11, W10
	0x03BB3C10 B.CC 0x3BB3C28
	0x03BB3C14 LDR X9, [X9 + 0xC8]
	0x03BB3C18 ADD X9, X9, X10, 0x3, LSL
	0x03BB3C1C LDUR X9, [X9 - 0x8]
	0x03BB3C20 CMP X9, X8
	0x03BB3C24 B.EQ 0x3BB3C40
	0x03BB3C28 ADRP X8, 0xFFFFFFFFFCF36000
	0x03BB3C2C LDR V0, [X8 + 0xF54]
	0x03BB3C30 MOVZ W23, 0x1
	0x03BB3C34 FCMP S12, S0
	0x03BB3C38 CSET W22, MI
	0x03BB3C3C B 0x3BB3D40
	0x03BB3C40 LDRB W8, [X21 + 0x118]
	0x03BB3C44 CBZ W8, 0x3BB3C28
	0x03BB3C48 MOV X0, X21
	0x03BB3C4C MOV X1, X31
	0x03BB3C50 BL 0x3B522D8
	0x03BB3C54 ADRP X8, 0xFFFFFFFFFCF36000
	0x03BB3C58 LDR V5, [X8 + 0xF28]
	0x03BB3C5C FMUL S3, S0, S0
	0x03BB3C60 FMUL S4, S1, S1
	0x03BB3C64 FADD S3, S3, S4
	0x03BB3C68 FMUL S4, S2, S2
	0x03BB3C6C FADD S9, S4, S3
	0x03BB3C70 FCMP S9, S5
	0x03BB3C74 B.LE 0x3BB3D34
	0x03BB3C78 LDRB W8, [X25 + 0x785]
	0x03BB3C7C CBNZ W8, 0x3BB3CA4
	0x03BB3C80 ADRP X0, 0x540000
	0x03BB3C84 LDR X0, [X0 + 0x5A8]
	0x03BB3C88 STP S1, S0, [X31 + 0x14]
	0x03BB3C8C STR S2, [X31]
	0x03BB3C90 BL 0x1C16CF4
	0x03BB3C94 LDR V2, [X31]
	0x03BB3C98 LDP S1, S0, [X31 + 0x14]
	0x03BB3C9C MOVZ W8, 0x1
	0x03BB3CA0 STRB W8, [X25 + 0x785]
	0x03BB3CA4 LDR X0, [X24]
	0x03BB3CA8 LDR W8, [X0 + 0xE0]
	0x03BB3CAC CBNZ W8, 0x3BB3CC4
	0x03BB3CB0 STP S1, S0, [X31 + 0x14]
	0x03BB3CB4 STR S2, [X31]
	0x03BB3CB8 BL 0x1C16DFC
	0x03BB3CBC LDR V2, [X31]
	0x03BB3CC0 LDP S1, S0, [X31 + 0x14]
	0x03BB3CC4 FSQRT S3, S9
	0x03BB3CC8 FCMP S3, S15
	0x03BB3CCC B.LE 0x3BB3CE0
	0x03BB3CD0 FDIV S4, S0, S3
	0x03BB3CD4 FDIV S1, S1, S3
	0x03BB3CD8 FDIV S0, S2, S3
	0x03BB3CDC B 0x3BB3D0C
	0x03BB3CE0 LDRB W8, [X23 + 0x783]
	0x03BB3CE4 CBNZ W8, 0x3BB3CFC
	0x03BB3CE8 ADRP X0, 0x540000
	0x03BB3CEC LDR X0, [X0 + 0x5A0]
	0x03BB3CF0 BL 0x1C16CF4
	0x03BB3CF4 MOVZ W8, 0x1
	0x03BB3CF8 STRB W8, [X23 + 0x783]
	0x03BB3CFC LDR X8, [X22]
	0x03BB3D00 LDR X8, [X8 + 0xB8]
	0x03BB3D04 LDP S4, S1, [X8]
	0x03BB3D08 LDR V0, [X8 + 0x8]
	0x03BB3D0C FNEG S2, S1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x830000
	006 Move X21, 0x541000
	007 Move W8, [X20+3294]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {34}
	014 Move X0, 0x5AA000
	015 Move X0, [X0+3944]
	016 Call 0x1C17CF4
	017 Move X0, 0x541000
	018 Move X0, [X0+2600]
	019 Call 0x1C17CF4
	020 Move X0, 0x541000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move X0, 0x5AA000
	024 Move X0, [X0+3952]
	025 Call 0x1C17CF4
	026 Move X0, 0x5AA000
	027 Move X0, [X0+3960]
	028 Call 0x1C17CF4
	029 Move X0, 0x5AA000
	030 Move X0, [X0+3968]
	031 Call 0x1C17CF4
	032 Move W8, 1
	033 Move [X20+3294], W8
	034 Move X0, [X21]
	035 Move X20, [X19+32]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X20
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {82}
	048 Move X0, X19
	049 Call XRPokeFilter.FindPokeInteractable, X0
	050 Move [X19+32], X0
	051 Move X20, X0
	052 Move X0, [X21]
	053 Move W8, [X0+224]
	054 Compare W8, 0
	055 JumpIfNotEqual {57}
	056 Call 0x1C17DFC
	057 Move X0, X20
	058 Move X1, X31
	059 Move X2, X31
	060 Call Object.op_Equality, X0, X1
	061 Move TEMP, X0
	062 And TEMP, TEMP, 1
	063 Compare TEMP, 1
	064 JumpIfNotEqual {82}
	065 Move X8, 0x541000
	066 Move X8, [X8+2600]
	067 Move X0, [X8]
	068 Move W8, [X0+224]
	069 Compare W8, 0
	070 JumpIfNotEqual {72}
	071 Call 0x1C17DFC
	072 Move X8, 0x5AA000
	073 Move X8, [X8+3960]
	074 Move X1, X19
	075 Move X2, X31
	076 Move X0, [X8]
	077 Call Debug.LogWarning, X0, X1
	078 Move X0, X19
	079 Move W1, W31
	080 Move X2, X31
	081 Call Behaviour.set_enabled, X0, X1
	082 Move X0, [X21]
	083 Move X20, [X19+40]
	084 Move W8, [X0+224]
	085 Compare W8, 0
	086 JumpIfNotEqual {88}
	087 Call 0x1C17DFC
	088 Move X0, X20
	089 Move X1, X31
	090 Move X2, X31
	091 Call Object.op_Equality, X0, X1
	092 Move TEMP, X0
	093 And TEMP, TEMP, 1
	094 Compare TEMP, 1
	095 JumpIfNotEqual {130}
	096 Move X0, X19
	097 Call XRPokeFilter.FindPokeCollider, X0
	098 Move [X19+40], X0
	099 Move X20, X0
	100 Move X0, [X21]
	101 Move W8, [X0+224]
	102 Compare W8, 0
	103 JumpIfNotEqual {105}
	104 Call 0x1C17DFC
	105 Move X0, X20
	106 Move X1, X31
	107 Move X2, X31
	108 Call Object.op_Equality, X0, X1
	109 Move TEMP, X0
	110 And TEMP, TEMP, 1
	111 Compare TEMP, 1
	112 JumpIfNotEqual {130}
	113 Move X8, 0x541000
	114 Move X8, [X8+2600]
	115 Move X0, [X8]
	116 Move W8, [X0+224]
	117 Compare W8, 0
	118 JumpIfNotEqual {120}
	119 Call 0x1C17DFC
	120 Move X8, 0x5AA000
	121 Move X8, [X8+3968]
	122 Move X1, X19
	123 Move X2, X31
	124 Move X0, [X8]
	125 Call Debug.LogWarning, X0, X1
	126 Move X0, X19
	127 Move W1, W31
	128 Move X2, X31
	129 Call Behaviour.set_enabled, X0, X1
	130 Move X0, [X19+48]
	131 Compare X0, 0
	132 JumpIfEqual {166}
	133 Move X8, 0x5AA000
	134 Move X8, [X8+3944]
	135 Move X1, [X8]
	136 Call DatumProperty`2<Object, Object>.get_Value, X0
	137 Compare X0, 0
	138 JumpIfEqual {144}
	139 Move X20, [X31+16]
	140 Move X19, [X31+24]
	141 Move X30, [X31+32]
	142 Move X21, [X31+40]
	143 Return 
	144 Move X8, 0x541000
	145 Move X8, [X8+2600]
	146 Move X0, [X8]
	147 Move W8, [X0+224]
	148 Compare W8, 0
	149 JumpIfNotEqual {151}
	150 Call 0x1C17DFC
	151 Move X8, 0x5AA000
	152 Move X8, [X8+3952]
	153 Move X1, X19
	154 Move X2, X31
	155 Move X0, [X8]
	156 Call Debug.LogWarning, X0, X1
	157 Move X0, X19
	158 Move X20, [X31+16]
	159 Move X19, [X31+24]
	160 Move W1, W31
	161 Move X2, X31
	162 Move X30, [X31+32]
	163 Move X21, [X31+40]
	164 Call Behaviour.set_enabled, X0, X1
	165 Return 
	166 Call 0x1C17F20

Method: System.Void Start()

Disassembly:
	0x03BB3E38 LDRSW X9, [X10]
	0x03BB3E3C ADD X8, X8, X9, 0x4, LSL
	0x03BB3E40 ADD X0, X8, 0x138
	0x03BB3E44 LDP X8, X2, [X0]
	0x03BB3E48 MOV X0, X25
	0x03BB3E4C MOV W1, W26
	0x03BB3E50 BLR X8
	0x03BB3E54 CMP X0, X21
	0x03BB3E58 B.EQ 0x3BB3E78
	0x03BB3E5C MOV X1, X0
	0x03BB3E60 LDR X0, [X20 + 0x58]
	0x03BB3E64 CBZ X0, 0x3BB3F78
	0x03BB3E68 LDR X2, [X28]
	0x03BB3E6C BL 0x2AB4A08
	0x03BB3E70 FCMP S0, S12
	0x03BB3E74 B.MI 0x3BB37CC
	0x03BB3E78 ADD W26, W26, 0x1
	0x03BB3E7C CMP W26, W24
	0x03BB3E80 B.NE 0x3BB3DF8
	0x03BB3E84 LDR V1, [X31 + 0x4]
	0x03BB3E88 FMOV S0, 1
	0x03BB3E8C LDR V2, [X20 + 0x10]
	0x03BB3E90 FCMP S11, S0
	0x03BB3E94 FCSEL S1, S1, S9, MI
	0x03BB3E98 CMP W23, 0x0
	0x03BB3E9C FCSEL S3, S12, S0, NE
	0x03BB3EA0 CMP W22, 0x0
	0x03BB3EA4 FCSEL S3, S9, S3, NE
	0x03BB3EA8 FMUL S3, S3, S2
	0x03BB3EAC LDR X0, [X20 + 0x18]
	0x03BB3EB0 FADD S1, S1, S3
	0x03BB3EB4 FCMP S1, S2
	0x03BB3EB8 FCSEL S2, S2, S1, GT
	0x03BB3EBC FCMP S1, 0x0
	0x03BB3EC0 FCSEL S1, S2, S9, PL
	0x03BB3EC4 STRB W31, [X31 + 0x2E]
	0x03BB3EC8 STRH W31, [X31 + 0x2C]
	0x03BB3ECC CBZ X0, 0x3BB3F78
	0x03BB3ED0 ADRP X9, 0x5A8000
	0x03BB3ED4 LDR V5, [X31 + 0x28]
	0x03BB3ED8 LDRH W8, [X31 + 0x2C]
	0x03BB3EDC LDR X9, [X9 + 0x1F8]
	0x03BB3EE0 LDR V6, [X31 + 0x8]
	0x03BB3EE4 LDR V4, [X31 + 0xC]
	0x03BB3EE8 FSUB S0, S0, S12
	0x03BB3EEC STURH W8, [X31 + 0x49]
	0x03BB3EF0 LDRB W8, [X31 + 0x2E]
	0x03BB3EF4 STP S6, S4, [X31 + 0x4C]
	0x03BB3EF8 LDR V4, [X31 + 0x1C]
	0x03BB3EFC LDR X2, [X9]
	0x03BB3F00 STP S0, S8, [X31 + 0x64]
	0x03BB3F04 LDR V0, [X31 + 0x10]
	0x03BB3F08 FMUL S2, S10, S1
	0x03BB3F0C FMUL S3, S5, S1
	0x03BB3F10 FMUL S1, S8, S1
	0x03BB3F14 FADD S2, S13, S2
	0x03BB3F18 FADD S3, S14, S3
	0x03BB3F1C FADD S1, S4, S1
	0x03BB3F20 ADD X1, X31, 0x48
	0x03BB3F24 STRB W22, [X31 + 0x48]
	0x03BB3F28 STP S5, S10, [X31 + 0x6C]
	0x03BB3F2C STR W31, [X31 + 0x74]
	0x03BB3F30 STP S0, S1, [X31 + 0x54]
	0x03BB3F34 STP S3, S2, [X31 + 0x5C]
	0x03BB3F38 STRB W8, [X31 + 0x4B]
	0x03BB3F3C STR X19, [X31 + 0x78]
	0x03BB3F40 BL 0x28CDE4C
	0x03BB3F44 MOV W0, W22
	0x03BB3F48 LDP X20, X19, [X31 + 0x110]
	0x03BB3F4C LDP X22, X21, [X31 + 0x100]
	0x03BB3F50 LDP X24, X23, [X31 + 0xF0]
	0x03BB3F54 LDP X26, X25, [X31 + 0xE0]
	0x03BB3F58 LDP X28, X27, [X31 + 0xD0]
	0x03BB3F5C LDP X29, X30, [X31 + 0xC0]
	0x03BB3F60 LDP D9, D8, [X31 + 0xB0]
	0x03BB3F64 LDP D11, D10, [X31 + 0xA0]
	0x03BB3F68 LDP D13, D12, [X31 + 0x90]
	0x03BB3F6C LDP D15, D14, [X31 + 0x80]
	0x03BB3F70 ADD X31, X31, 0x120
	0x03BB3F74 RET
	0x03BB3F78 BL 0x1C16F20
	0x03BB3F7C SUB X31, X31, 0x70
	0x03BB3F80 STR D8, [X31 + 0x40]
	0x03BB3F84 STP X30, X21, [X31 + 0x50]
	0x03BB3F88 STP X20, X19, [X31 + 0x60]
	0x03BB3F8C ADRP X21, 0x82F000
	0x03BB3F90 LDRB W8, [X21 + 0xCE4]
	0x03BB3F94 MOV V8.16B, V0.16B
	0x03BB3F98 MOV X20, X1
	0x03BB3F9C MOV X19, X0
	0x03BB3FA0 TBNZ X8, 0x0, 0x3BB3FC4
	0x03BB3FA4 ADRP X0, 0x5A8000
	0x03BB3FA8 LDR X0, [X0 + 0x208]
	0x03BB3FAC BL 0x1C16CF4
	0x03BB3FB0 ADRP X0, 0x5A8000
	0x03BB3FB4 LDR X0, [X0 + 0x1B8]
	0x03BB3FB8 BL 0x1C16CF4
	0x03BB3FBC MOVZ W8, 0x1
	0x03BB3FC0 STRB W8, [X21 + 0xCE4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x830000
	006 Move X20, 0x541000
	007 Move W8, [X21+3295]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5A9000
	015 Move X0, [X0+568]
	016 Call 0x1C17CF4
	017 Move X0, 0x5AA000
	018 Move X0, [X0+3992]
	019 Call 0x1C17CF4
	020 Move X0, 0x541000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3295], W8
	025 Move X0, X19
	026 Call XRPokeFilter.Setup, X0
	027 Move X0, [X20]
	028 Move X20, [X19+32]
	029 Move W8, [X0+224]
	030 Compare W8, 0
	031 JumpIfNotEqual {33}
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {63}
	041 Move X8, [X19+32]
	042 Compare X8, 0
	043 JumpIfEqual {113}
	044 Move X20, [X8+304]
	045 Compare X20, 0
	046 JumpIfEqual {113}
	047 Move X10, 0x5A9000
	048 Move X8, [X20]
	049 Move X10, [X10+568]
	050 NotImplemented "Instruction LDRH not yet implemented."
	051 Move X1, [X10]
	052 Compare X9, 0
	053 JumpIfEqual {60}
	054 Move X10, [X8+176]
	055 Add X10, X10, 8
	056 NotImplemented "Instruction LDUR not yet implemented."
	057 NotImplemented "Instruction CMP not yet implemented."
	058 Subtract X9, X9, 1
	059 Add X10, X10, 16
	060 Move W2, 1
	061 Move X0, X20
	062 Call 0x1C5D788
	063 Move X20, [X31+16]
	064 Move X19, [X31+24]
	065 Move X30, [X31+32]
	066 Move X21, [X31+40]
	067 Return 
	068 Move W9, [X10]
	069 Add W9, W9, 1
	070 Add X8, X8, W9
	071 Add X0, X8, 312
	072 Move X8, [X0]
	073 Move X2, [X0+8]
	074 Move X0, X20
	075 Move X1, X19
	076 NotImplemented "Instruction BLR not yet implemented."
	077 Move X8, [X19+32]
	078 Compare X8, 0
	079 JumpIfEqual {113}
	080 Move X20, [X8+320]
	081 Compare X20, 0
	082 JumpIfEqual {113}
	083 Move X10, 0x5AA000
	084 Move X8, [X20]
	085 Move X10, [X10+3992]
	086 NotImplemented "Instruction LDRH not yet implemented."
	087 Move X1, [X10]
	088 Compare X9, 0
	089 JumpIfEqual {96}
	090 Move X10, [X8+176]
	091 Add X10, X10, 8
	092 NotImplemented "Instruction LDUR not yet implemented."
	093 NotImplemented "Instruction CMP not yet implemented."
	094 Subtract X9, X9, 1
	095 Add X10, X10, 16
	096 Move W2, 1
	097 Move X0, X20
	098 Call 0x1C5D788
	099 Move W9, [X10]
	100 Add W9, W9, 1
	101 Add X8, X8, W9
	102 Add X0, X8, 312
	103 Move X8, [X0]
	104 Move X2, [X0+8]
	105 Move X0, X20
	106 Move X1, X19
	107 NotImplemented "Instruction BLR not yet implemented."
	108 Move X0, X19
	109 Move X20, [X31+16]
	110 Move X19, [X31+24]
	111 Move X30, [X31+32]
	112 Move X21, [X31+40]
	113 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03BB4128 ADD X10, X10, 0x10
	0x03BB412C B.NE 0x3BB4118
	0x03BB4130 MOVZ W2, 0x6
	0x03BB4134 MOV X0, X19
	0x03BB4138 BL 0x1C5C788
	0x03BB413C B 0x3BB4150
	0x03BB4140 LDR W9, [X10]
	0x03BB4144 ADD W9, W9, 0x6
	0x03BB4148 ADD X8, X8, W9, 0x4, SXTW
	0x03BB414C ADD X0, X8, 0x138
	0x03BB4150 LDP X8, X2, [X0]
	0x03BB4154 MOV X0, X19
	0x03BB4158 MOV X1, X21
	0x03BB415C BLR X8
	0x03BB4160 LDR X8, [X20 + 0x20]
	0x03BB4164 CBZ X8, 0x3BB41E8
	0x03BB4168 LDR X9, [X8]
	0x03BB416C MOV X22, X0
	0x03BB4170 MOV X0, X8
	0x03BB4174 MOV X1, X19
	0x03BB4178 LDR X10, [X9 + 0x5A8]
	0x03BB417C LDR X2, [X9 + 0x5B0]
	0x03BB4180 BLR X10
	0x03BB4184 LDR X21, [X20 + 0x38]
	0x03BB4188 MOV X20, X0
	0x03BB418C ADD X8, X31, 0x20
	0x03BB4190 MOV X0, X22
	0x03BB4194 MOV X1, X31
	0x03BB4198 BL 0x3B24724
	0x03BB419C LDR V0, [X31 + 0x2]
	0x03BB41A0 LDUR V1, [X31 + 0x2C]
	0x03BB41A4 STR V0, [X31 + 0x4]
	0x03BB41A8 STUR V1, [X31 + 0x4C]
	0x03BB41AC CBZ X21, 0x3BB41E8
	0x03BB41B0 LDR V0, [X31 + 0x4]
	0x03BB41B4 LDUR V1, [X31 + 0x4C]
	0x03BB41B8 ADD X2, X31, 0x0
	0x03BB41BC MOV X0, X21
	0x03BB41C0 MOV X1, X19
	0x03BB41C4 MOV X3, X20
	0x03BB41C8 STR V0, [X31]
	0x03BB41CC STUR V1, [X31 + 0xC]
	0x03BB41D0 BL 0x3BB41EC
	0x03BB41D4 LDP X20, X19, [X31 + 0x80]
	0x03BB41D8 LDP X22, X21, [X31 + 0x70]
	0x03BB41DC LDR X30, [X31 + 0x60]
	0x03BB41E0 ADD X31, X31, 0x90
	0x03BB41E4 RET
	0x03BB41E8 BL 0x1C16F20
	0x03BB41EC SUB X31, X31, 0x40
	0x03BB41F0 STP X30, X23, [X31 + 0x10]
	0x03BB41F4 STP X22, X21, [X31 + 0x20]
	0x03BB41F8 STP X20, X19, [X31 + 0x30]
	0x03BB41FC ADRP X23, 0x82E000
	0x03BB4200 LDRB W8, [X23 + 0xCEF]
	0x03BB4204 MOV X20, X3
	0x03BB4208 MOV X22, X2
	0x03BB420C MOV X19, X1
	0x03BB4210 MOV X21, X0
	0x03BB4214 TBNZ X8, 0x0, 0x3BB428C
	0x03BB4218 ADRP X0, 0x5A8000
	0x03BB421C LDR X0, [X0 + 0xFC8]
	0x03BB4220 BL 0x1C16CF4
	0x03BB4224 ADRP X0, 0x5A9000
	0x03BB4228 LDR X0, [X0 + 0x10]
	0x03BB422C BL 0x1C16CF4
	0x03BB4230 ADRP X0, 0x5A9000
	0x03BB4234 LDR X0, [X0 + 0x18]
	0x03BB4238 BL 0x1C16CF4
	0x03BB423C ADRP X0, 0x5A8000
	0x03BB4240 LDR X0, [X0 + 0xFE8]
	0x03BB4244 BL 0x1C16CF4
	0x03BB4248 ADRP X0, 0x5A9000
	0x03BB424C LDR X0, [X0 + 0x20]
	0x03BB4250 BL 0x1C16CF4
	0x03BB4254 ADRP X0, 0x5A8000
	0x03BB4258 LDR X0, [X0 + 0xFF0]
	0x03BB425C BL 0x1C16CF4
	0x03BB4260 ADRP X0, 0x5A9000
	0x03BB4264 LDR X0, [X0 + 0x28]
	0x03BB4268 BL 0x1C16CF4
	0x03BB426C ADRP X0, 0x5A9000
	0x03BB4270 LDR X0, [X0 + 0x30]
	0x03BB4274 BL 0x1C16CF4
	0x03BB4278 ADRP X0, 0x5A9000
	0x03BB427C LDR X0, [X0 + 0x38]
	0x03BB4280 BL 0x1C16CF4
	0x03BB4284 MOVZ W8, 0x1
	0x03BB4288 STRB W8, [X23 + 0xCEF]
	0x03BB428C STR X31, [X31 + 0x8]
	0x03BB4290 LDR X0, [X21 + 0x40]
	0x03BB4294 CBZ X0, 0x3BB43C8
	0x03BB4298 ADRP X8, 0x5A9000
	0x03BB429C LDR X8, [X8 + 0x20]
	0x03BB42A0 MOV X1, X19
	0x03BB42A4 MOV X2, X20
	0x03BB42A8 LDR X3, [X8]
	0x03BB42AC BL 0x2AA5084
	0x03BB42B0 CBZ X20, 0x3BB43C8
	0x03BB42B4 LDP S1, S2, [X22 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x82F000
	006 Move X20, 0x540000
	007 Move W8, [X21+3296]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5A8000
	015 Move X0, [X0+568]
	016 Call 0x1C17CF4
	017 Move X0, 0x5A9000
	018 Move X0, [X0+3992]
	019 Call 0x1C17CF4
	020 Move X0, 0x540000
	021 Move X0, [X0+1432]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3296], W8
	025 Move X0, [X20]
	026 Move X20, [X19+32]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {101}
	039 Move X8, [X19+32]
	040 Compare X8, 0
	041 JumpIfEqual {117}
	042 Move X20, [X8+304]
	043 Compare X20, 0
	044 JumpIfEqual {117}
	045 Move X10, 0x5A8000
	046 Move X8, [X20]
	047 Move X10, [X10+568]
	048 NotImplemented "Instruction LDRH not yet implemented."
	049 Move X1, [X10]
	050 Compare X9, 0
	051 JumpIfEqual {58}
	052 Move X10, [X8+176]
	053 Add X10, X10, 8
	054 NotImplemented "Instruction LDUR not yet implemented."
	055 NotImplemented "Instruction CMP not yet implemented."
	056 Subtract X9, X9, 1
	057 Add X10, X10, 16
	058 Move W2, 2
	059 Move X0, X20
	060 Call 0x1C5D788
	061 Move W9, [X10]
	062 Add W9, W9, 2
	063 Add X8, X8, W9
	064 Add X0, X8, 312
	065 Move X8, [X0]
	066 Move X2, [X0+8]
	067 Move X0, X20
	068 Move X1, X19
	069 NotImplemented "Instruction BLR not yet implemented."
	070 Move X8, [X19+32]
	071 Compare X8, 0
	072 JumpIfEqual {117}
	073 Move X20, [X8+320]
	074 Compare X20, 0
	075 JumpIfEqual {117}
	076 Move X10, 0x5A9000
	077 Move X8, [X20]
	078 Move X10, [X10+3992]
	079 NotImplemented "Instruction LDRH not yet implemented."
	080 Move X1, [X10]
	081 Compare X9, 0
	082 JumpIfEqual {89}
	083 Move X10, [X8+176]
	084 Add X10, X10, 8
	085 NotImplemented "Instruction LDUR not yet implemented."
	086 NotImplemented "Instruction CMP not yet implemented."
	087 Subtract X9, X9, 1
	088 Add X10, X10, 16
	089 Move W2, 2
	090 Move X0, X20
	091 Call 0x1C5D788
	092 Move W9, [X10]
	093 Add W9, W9, 2
	094 Add X8, X8, W9
	095 Add X0, X8, 312
	096 Move X8, [X0]
	097 Move X2, [X0+8]
	098 Move X0, X20
	099 Move X1, X19
	100 NotImplemented "Instruction BLR not yet implemented."
	101 Move X0, X19
	102 Call XRPokeFilter.ClearBindings, X0
	103 Move X0, [X19+56]
	104 Compare X0, 0
	105 JumpIfEqual {112}
	106 Move X20, [X31+16]
	107 Move X19, [X31+24]
	108 Move X30, [X31+32]
	109 Move X21, [X31+40]
	110 Call XRPokeLogic.Dispose, X0
	111 Return 
	112 Move X20, [X31+16]
	113 Move X19, [X31+24]
	114 Move X30, [X31+32]
	115 Move X21, [X31+40]
	116 Return 
	117 Call 0x1C17F20

Method: System.Void OnDrawGizmosSelected()

Disassembly:
	0x03BB447C LDR X0, [X0 + 0x60]

ISIL:
	001 Return 

Method: System.Void SetupBindings()

Disassembly:
	0x03BB3FC4 FMOV S0, W31
	0x03BB3FC8 CBZ X20, 0x3BB4000
	0x03BB3FCC ADRP X8, 0x5A8000
	0x03BB3FD0 LDR X8, [X8 + 0x1B8]
	0x03BB3FD4 LDR X9, [X20]
	0x03BB3FD8 LDR X8, [X8]
	0x03BB3FDC LDRB W11, [X9 + 0x130]
	0x03BB3FE0 LDRB W10, [X8 + 0x130]
	0x03BB3FE4 CMP W11, W10
	0x03BB3FE8 B.CC 0x3BB4000
	0x03BB3FEC LDR X9, [X9 + 0xC8]
	0x03BB3FF0 ADD X9, X9, X10, 0x3, LSL
	0x03BB3FF4 LDUR X9, [X9 - 0x8]
	0x03BB3FF8 CMP X9, X8
	0x03BB3FFC B.EQ 0x3BB401C
	0x03BB4000 FCMP S0, S8
	0x03BB4004 FCSEL S0, S8, S0, MI
	0x03BB4008 LDP X20, X19, [X31 + 0x60]
	0x03BB400C LDP X30, X21, [X31 + 0x50]
	0x03BB4010 LDR V8, [X31 + 0x40]
	0x03BB4014 ADD X31, X31, 0x70
	0x03BB4018 RET
	0x03BB401C LDR X8, [X19 + 0x38]
	0x03BB4020 CBZ X8, 0x3BB4000
	0x03BB4024 LDR X19, [X8 + 0x18]
	0x03BB4028 CBZ X19, 0x3BB4000
	0x03BB402C ADRP X10, 0x5A7000
	0x03BB4030 LDR X8, [X19]
	0x03BB4034 LDR X10, [X10 + 0x208]
	0x03BB4038 LDRH W9, [X8 + 0x12E]
	0x03BB403C LDR X1, [X10]
	0x03BB4040 CBZ X9, 0x3BB4064
	0x03BB4044 LDR X10, [X8 + 0xB0]
	0x03BB4048 ADD X10, X10, 0x8
	0x03BB404C LDUR X11, [X10 - 0x8]
	0x03BB4050 CMP X11, X1
	0x03BB4054 B.EQ 0x3BB4074
	0x03BB4058 SUBS X9, X9, 0x1
	0x03BB405C ADD X10, X10, 0x10
	0x03BB4060 B.NE 0x3BB404C
	0x03BB4064 MOVZ W2, 0x3
	0x03BB4068 MOV X0, X19
	0x03BB406C BL 0x1C5C788
	0x03BB4070 B 0x3BB4084
	0x03BB4074 LDR W9, [X10]
	0x03BB4078 ADD W9, W9, 0x3
	0x03BB407C ADD X8, X8, W9, 0x4, SXTW
	0x03BB4080 ADD X0, X8, 0x138
	0x03BB4084 LDP X9, X1, [X0]
	0x03BB4088 ADD X8, X31, 0x8
	0x03BB408C MOV X0, X19
	0x03BB4090 BLR X9
	0x03BB4094 LDR V0, [X31 + 0x24]
	0x03BB4098 B 0x3BB4000
	0x03BB409C SUB X31, X31, 0x90
	0x03BB40A0 STR X30, [X31 + 0x60]
	0x03BB40A4 STP X22, X21, [X31 + 0x70]
	0x03BB40A8 STP X20, X19, [X31 + 0x80]
	0x03BB40AC ADRP X21, 0x82E000
	0x03BB40B0 LDRB W8, [X21 + 0xCE5]
	0x03BB40B4 MOV X19, X1
	0x03BB40B8 MOV X20, X0
	0x03BB40BC TBNZ X8, 0x0, 0x3BB40D4
	0x03BB40C0 ADRP X0, 0x5A6000
	0x03BB40C4 LDR X0, [X0 + 0x2F8]
	0x03BB40C8 BL 0x1C16CF4
	0x03BB40CC MOVZ W8, 0x1
	0x03BB40D0 STRB W8, [X21 + 0xCE5]
	0x03BB40D4 LDR X8, [X20 + 0x38]
	0x03BB40D8 CBZ X8, 0x3BB41D4
	0x03BB40DC CBZ X19, 0x3BB41E8
	0x03BB40E0 MOV X0, X19
	0x03BB40E4 MOV X1, X31
	0x03BB40E8 BL 0x3B6B738
	0x03BB40EC CBZ X0, 0x3BB41E8
	0x03BB40F0 ADRP X10, 0x5A6000
	0x03BB40F4 LDR X8, [X0]
	0x03BB40F8 LDR X10, [X10 + 0x2F8]
	0x03BB40FC LDR X21, [X20 + 0x20]
	0x03BB4100 MOV X19, X0
	0x03BB4104 LDRH W9, [X8 + 0x12E]
	0x03BB4108 LDR X1, [X10]
	0x03BB410C CBZ X9, 0x3BB4130
	0x03BB4110 LDR X10, [X8 + 0xB0]
	0x03BB4114 ADD X10, X10, 0x8
	0x03BB4118 LDUR X11, [X10 - 0x8]
	0x03BB411C CMP X11, X1
	0x03BB4120 B.EQ 0x3BB4140
	0x03BB4124 SUBS X9, X9, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x830000
	006 Move X20, 0x541000
	007 Move W8, [X21+3297]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {37}
	014 Move X0, 0x541000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move X0, 0x5A8000
	018 Move X0, [X0+400]
	019 Call 0x1C17CF4
	020 Move X0, 0x5A8000
	021 Move X0, [X0+408]
	022 Call 0x1C17CF4
	023 Move X0, 0x5A7000
	024 Move X0, [X0+416]
	025 Call 0x1C17CF4
	026 Move X0, 0x5A7000
	027 Move X0, [X0+424]
	028 Call 0x1C17CF4
	029 Move X0, 0x5A9000
	030 Move X0, [X0+4000]
	031 Call 0x1C17CF4
	032 Move X0, 0x5A9000
	033 Move X0, [X0+4008]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X21+3297], W8
	037 Move X0, [X20]
	038 Move X20, [X19+32]
	039 Move W8, [X0+224]
	040 Compare W8, 0
	041 JumpIfNotEqual {43}
	042 Call 0x1C17DFC
	043 Move X0, X20
	044 Move X1, X31
	045 Move X2, X31
	046 Call Object.op_Inequality, X0, X1
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfNotEqual {102}
	051 Move X8, [X19+32]
	052 Compare X8, 0
	053 JumpIfEqual {107}
	054 Move X20, [X8+144]
	055 Move X8, 0x5A7000
	056 Move X8, [X8+400]
	057 Move X0, [X8]
	058 Call 0x1C17F10
	059 Move X8, 0x5A9000
	060 Move X8, [X8+4000]
	061 Move X1, X19
	062 Move X3, X31
	063 Move X21, X0
	064 Move X2, [X8]
	065 Call UnityAction`1<Object>..ctor, X0, X1, X2
	066 Compare X20, 0
	067 JumpIfEqual {107}
	068 Move X8, 0x5A7000
	069 Move X8, [X8+424]
	070 Move X0, X20
	071 Move X1, X21
	072 Move X2, [X8]
	073 Call UnityEvent`1<Object>.AddListener, X0, X1
	074 Move X8, [X19+32]
	075 Compare X8, 0
	076 JumpIfEqual {107}
	077 Move X20, [X8+152]
	078 Move X8, 0x5A7000
	079 Move X8, [X8+408]
	080 Move X0, [X8]
	081 Call 0x1C17F10
	082 Move X8, 0x5A9000
	083 Move X8, [X8+4008]
	084 Move X1, X19
	085 Move X3, X31
	086 Move X21, X0
	087 Move X2, [X8]
	088 Call UnityAction`1<Object>..ctor, X0, X1, X2
	089 Compare X20, 0
	090 JumpIfEqual {107}
	091 Move X8, 0x5A7000
	092 Move X8, [X8+416]
	093 Move X0, X20
	094 Move X20, [X31+16]
	095 Move X19, [X31+24]
	096 Move X1, X21
	097 Move X2, [X8]
	098 Move X30, [X31+32]
	099 Move X21, [X31+40]
	100 Call UnityEvent`1<Object>.AddListener, X0, X1
	101 Return 
	102 Move X20, [X31+16]
	103 Move X19, [X31+24]
	104 Move X30, [X31+32]
	105 Move X21, [X31+40]
	106 Return 
	107 Call 0x1C17F20

Method: System.Void ClearBindings()

Disassembly:
	0x03BB42B8 LDR V0, [X22]
	0x03BB42BC LDR X23, [X21 + 0x38]
	0x03BB42C0 MOV X0, X20
	0x03BB42C4 MOV X1, X31
	0x03BB42C8 BL 0x3C40B58
	0x03BB42CC CBZ X23, 0x3BB43C8
	0x03BB42D0 ADRP X8, 0x5A9000
	0x03BB42D4 LDR X8, [X8 + 0x10]
	0x03BB42D8 MOV X0, X23
	0x03BB42DC MOV X1, X19
	0x03BB42E0 LDR X2, [X8]
	0x03BB42E4 BL 0x2AC0ECC
	0x03BB42E8 LDR X0, [X21 + 0x58]
	0x03BB42EC CBZ X0, 0x3BB43C8
	0x03BB42F0 ADRP X8, 0x5A8000
	0x03BB42F4 LDR X8, [X8 + 0xFE8]
	0x03BB42F8 FMOV S0, 1
	0x03BB42FC MOV X1, X19
	0x03BB4300 LDR X2, [X8]
	0x03BB4304 BL 0x2AB4A74
	0x03BB4308 LDR X0, [X21 + 0x48]
	0x03BB430C CBZ X0, 0x3BB43C8
	0x03BB4310 ADRP X8, 0x5A8000
	0x03BB4314 LDR X8, [X8 + 0xFF0]
	0x03BB4318 MOV X1, X19
	0x03BB431C MOV W2, W31
	0x03BB4320 LDR X3, [X8]
	0x03BB4324 BL 0x2A89728
	0x03BB4328 LDR X0, [X21 + 0x50]
	0x03BB432C CBZ X0, 0x3BB43C8
	0x03BB4330 ADRP X8, 0x5A8000
	0x03BB4334 LDR X8, [X8 + 0xFC8]
	0x03BB4338 ADD X2, X31, 0x8
	0x03BB433C MOV X1, X20
	0x03BB4340 LDR X3, [X8]
	0x03BB4344 BL 0x2AA6B2C
	0x03BB4348 TBNZ X0, 0x0, 0x3BB4398
	0x03BB434C ADRP X8, 0x5A9000
	0x03BB4350 LDR X8, [X8 + 0x38]
	0x03BB4354 LDR X0, [X8]
	0x03BB4358 BL 0x1C16F10
	0x03BB435C ADRP X8, 0x5A9000
	0x03BB4360 LDR X8, [X8 + 0x30]
	0x03BB4364 MOV W1, W31
	0x03BB4368 MOV X22, X0
	0x03BB436C LDR X2, [X8]
	0x03BB4370 BL 0x2D57B9C
	0x03BB4374 STR X22, [X31 + 0x8]
	0x03BB4378 LDR X0, [X21 + 0x50]
	0x03BB437C CBZ X0, 0x3BB43C8
	0x03BB4380 ADRP X8, 0x5A9000
	0x03BB4384 LDR X8, [X8 + 0x18]
	0x03BB4388 MOV X1, X20
	0x03BB438C MOV X2, X22
	0x03BB4390 LDR X3, [X8]
	0x03BB4394 BL 0x2AA5084
	0x03BB4398 LDR X0, [X31 + 0x8]
	0x03BB439C CBZ X0, 0x3BB43C8
	0x03BB43A0 ADRP X8, 0x5A9000
	0x03BB43A4 LDR X8, [X8 + 0x28]
	0x03BB43A8 MOV X1, X19
	0x03BB43AC LDR X2, [X8]
	0x03BB43B0 BL 0x2D57DD8
	0x03BB43B4 LDP X20, X19, [X31 + 0x30]
	0x03BB43B8 LDP X22, X21, [X31 + 0x20]
	0x03BB43BC LDP X30, X23, [X31 + 0x10]
	0x03BB43C0 ADD X31, X31, 0x40
	0x03BB43C4 RET
	0x03BB43C8 BL 0x1C16F20
	0x03BB43CC STP X30, X19, [X31 - 0x10]!
	0x03BB43D0 LDR X19, [X0 + 0x38]
	0x03BB43D4 CBZ X19, 0x3BB43F8
	0x03BB43D8 CBZ X1, 0x3BB4400
	0x03BB43DC MOV X0, X1
	0x03BB43E0 MOV X1, X31
	0x03BB43E4 BL 0x3B6B814
	0x03BB43E8 MOV X1, X0
	0x03BB43EC MOV X0, X19
	0x03BB43F0 LDP X30, X19, [X31], #0x10
	0x03BB43F4 B 0x3BB4404
	0x03BB43F8 LDP X30, X19, [X31], #0x10
	0x03BB43FC RET
	0x03BB4400 BL 0x1C16F20
	0x03BB4404 SUB X31, X31, 0x30
	0x03BB4408 STP X30, X21, [X31 + 0x10]
	0x03BB440C STP X20, X19, [X31 + 0x20]
	0x03BB4410 ADRP X21, 0x82E000
	0x03BB4414 LDRB W8, [X21 + 0xCF0]
	0x03BB4418 MOV X20, X1
	0x03BB441C MOV X19, X0
	0x03BB4420 TBNZ X8, 0x0, 0x3BB448C
	0x03BB4424 ADRP X0, 0x5A9000
	0x03BB4428 LDR X0, [X0 + 0x40]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x82F000
	006 Move W8, [X20+3298]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {35}
	012 Move X0, 0x540000
	013 Move X0, [X0+1432]
	014 Call 0x1C17CF4
	015 Move X0, 0x5A7000
	016 Move X0, [X0+400]
	017 Call 0x1C17CF4
	018 Move X0, 0x5A7000
	019 Move X0, [X0+408]
	020 Call 0x1C17CF4
	021 Move X0, 0x5A7000
	022 Move X0, [X0+504]
	023 Call 0x1C17CF4
	024 Move X0, 0x5A7000
	025 Move X0, [X0+520]
	026 Call 0x1C17CF4
	027 Move X0, 0x5A9000
	028 Move X0, [X0+4000]
	029 Call 0x1C17CF4
	030 Move X0, 0x5A9000
	031 Move X0, [X0+4008]
	032 Call 0x1C17CF4
	033 Move W8, 1
	034 Move [X20+3298], W8
	035 Move X0, [X19+64]
	036 Compare X0, 0
	037 JumpIfEqual {112}
	038 Move X20, 0x540000
	039 Move X20, [X20+1432]
	040 Move X1, X31
	041 Call BindingsGroup.Clear, X0
	042 Move X0, [X20]
	043 Move X20, [X19+32]
	044 Move W8, [X0+224]
	045 Compare W8, 0
	046 JumpIfNotEqual {48}
	047 Call 0x1C17DFC
	048 Move X0, X20
	049 Move X1, X31
	050 Move X2, X31
	051 Call Object.op_Inequality, X0, X1
	052 Move TEMP, X0
	053 And TEMP, TEMP, 1
	054 Compare TEMP, 1
	055 JumpIfNotEqual {107}
	056 Move X8, [X19+32]
	057 Compare X8, 0
	058 JumpIfEqual {112}
	059 Move X20, [X8+144]
	060 Move X8, 0x5A7000
	061 Move X8, [X8+400]
	062 Move X0, [X8]
	063 Call 0x1C17F10
	064 Move X8, 0x5A9000
	065 Move X8, [X8+4000]
	066 Move X1, X19
	067 Move X3, X31
	068 Move X21, X0
	069 Move X2, [X8]
	070 Call UnityAction`1<Object>..ctor, X0, X1, X2
	071 Compare X20, 0
	072 JumpIfEqual {112}
	073 Move X8, 0x5A7000
	074 Move X8, [X8+504]
	075 Move X0, X20
	076 Move X1, X21
	077 Move X2, [X8]
	078 Call UnityEvent`1<Object>.RemoveListener, X0, X1
	079 Move X8, [X19+32]
	080 Compare X8, 0
	081 JumpIfEqual {112}
	082 Move X20, [X8+152]
	083 Move X8, 0x5A7000
	084 Move X8, [X8+408]
	085 Move X0, [X8]
	086 Call 0x1C17F10
	087 Move X8, 0x5A9000
	088 Move X8, [X8+4008]
	089 Move X1, X19
	090 Move X3, X31
	091 Move X21, X0
	092 Move X2, [X8]
	093 Call UnityAction`1<Object>..ctor, X0, X1, X2
	094 Compare X20, 0
	095 JumpIfEqual {112}
	096 Move X8, 0x5A7000
	097 Move X8, [X8+520]
	098 Move X0, X20
	099 Move X20, [X31+16]
	100 Move X19, [X31+24]
	101 Move X1, X21
	102 Move X2, [X8]
	103 Move X30, [X31+32]
	104 Move X21, [X31+40]
	105 Call UnityEvent`1<Object>.RemoveListener, X0, X1
	106 Return 
	107 Move X20, [X31+16]
	108 Move X19, [X31+24]
	109 Move X30, [X31+32]
	110 Move X21, [X31+40]
	111 Return 
	112 Call 0x1C17F20

Method: System.Boolean Process(UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRSelectInteractable interactable)

Disassembly:
	0x03BB4480 BL 0x1C16CF4
	0x03BB4484 MOVZ W8, 0x1
	0x03BB4488 STRB W8, [X21 + 0xCF0]
	0x03BB448C STP X31, X31, [X31]
	0x03BB4490 LDR X0, [X19 + 0x38]
	0x03BB4494 CBZ X0, 0x3BB45B0
	0x03BB4498 ADRP X8, 0x5A9000
	0x03BB449C LDR X8, [X8 + 0x48]
	0x03BB44A0 MOV X1, X20
	0x03BB44A4 LDR X2, [X8]
	0x03BB44A8 BL 0x2AC2330
	0x03BB44AC LDR X0, [X19 + 0x48]
	0x03BB44B0 CBZ X0, 0x3BB45B0
	0x03BB44B4 ADRP X8, 0x5A8000
	0x03BB44B8 LDR X8, [X8 + 0xFF0]
	0x03BB44BC MOV X1, X20
	0x03BB44C0 MOV W2, W31
	0x03BB44C4 LDR X3, [X8]
	0x03BB44C8 BL 0x2A89728
	0x03BB44CC LDR X0, [X19 + 0x58]
	0x03BB44D0 CBZ X0, 0x3BB45B0
	0x03BB44D4 ADRP X8, 0x5A8000
	0x03BB44D8 LDR X8, [X8 + 0xFE8]
	0x03BB44DC FMOV S0, 1
	0x03BB44E0 MOV X1, X20
	0x03BB44E4 LDR X2, [X8]
	0x03BB44E8 BL 0x2AB4A74
	0x03BB44EC LDR X0, [X19 + 0x40]
	0x03BB44F0 CBZ X0, 0x3BB45B0
	0x03BB44F4 ADRP X8, 0x5A9000
	0x03BB44F8 LDR X8, [X8 + 0x50]
	0x03BB44FC ADD X2, X31, 0x8
	0x03BB4500 MOV X1, X20
	0x03BB4504 LDR X3, [X8]
	0x03BB4508 BL 0x2AA6B2C
	0x03BB450C TBZ X0, 0x0, 0x3BB4578
	0x03BB4510 LDR X0, [X19 + 0x50]
	0x03BB4514 CBZ X0, 0x3BB45B0
	0x03BB4518 ADRP X8, 0x5A8000
	0x03BB451C LDR X1, [X31 + 0x8]
	0x03BB4520 LDR X8, [X8 + 0xFC8]
	0x03BB4524 ADD X2, X31, 0x0
	0x03BB4528 LDR X3, [X8]
	0x03BB452C BL 0x2AA6B2C
	0x03BB4530 TBZ X0, 0x0, 0x3BB4550
	0x03BB4534 LDR X0, [X31]
	0x03BB4538 CBZ X0, 0x3BB45B0
	0x03BB453C ADRP X8, 0x5A9000
	0x03BB4540 LDR X8, [X8 + 0x60]
	0x03BB4544 MOV X1, X20
	0x03BB4548 LDR X2, [X8]
	0x03BB454C BL 0x2D57E88
	0x03BB4550 LDR X1, [X31 + 0x8]
	0x03BB4554 MOV X0, X19
	0x03BB4558 BL 0x3BB4E28
	0x03BB455C LDR X0, [X19 + 0x40]
	0x03BB4560 CBZ X0, 0x3BB45B0
	0x03BB4564 ADRP X8, 0x5A9000
	0x03BB4568 LDR X8, [X8 + 0x40]
	0x03BB456C MOV X1, X20
	0x03BB4570 LDR X2, [X8]
	0x03BB4574 BL 0x2AA64F8
	0x03BB4578 LDR X0, [X19 + 0x38]
	0x03BB457C CBZ X0, 0x3BB45B0
	0x03BB4580 ADRP X8, 0x5A9000
	0x03BB4584 LDR X8, [X8 + 0x58]
	0x03BB4588 LDR X1, [X8]
	0x03BB458C BL 0x2AC0CC4
	0x03BB4590 CBNZ W0, 0x3BB45A0
	0x03BB4594 LDR X1, [X19 + 0x20]
	0x03BB4598 MOV X0, X19
	0x03BB459C BL 0x3BB4E28
	0x03BB45A0 LDP X20, X19, [X31 + 0x20]
	0x03BB45A4 LDP X30, X21, [X31 + 0x10]
	0x03BB45A8 ADD X31, X31, 0x30
	0x03BB45AC RET
	0x03BB45B0 BL 0x1C16F20
	0x03BB45B4 SUB X31, X31, 0xA0
	0x03BB45B8 STP X29, X30, [X31 + 0x40]
	0x03BB45BC STP X28, X27, [X31 + 0x50]
	0x03BB45C0 STP X26, X25, [X31 + 0x60]
	0x03BB45C4 STP X24, X23, [X31 + 0x70]
	0x03BB45C8 STP X22, X21, [X31 + 0x80]
	0x03BB45CC STP X20, X19, [X31 + 0x90]
	0x03BB45D0 ADRP X23, 0x82E000
	0x03BB45D4 ADRP X20, 0x5A7000
	0x03BB45D8 ADRP X22, 0x5A7000
	0x03BB45DC ADRP X21, 0x5A9000
	0x03BB45E0 ADRP X29, 0x5A9000
	0x03BB45E4 ADRP X28, 0x5A9000
	0x03BB45E8 ADRP X27, 0x5A9000
	0x03BB45EC ADRP X26, 0x5A9000
	0x03BB45F0 ADRP X25, 0x5A9000
	0x03BB45F4 ADRP X24, 0x5A9000
	0x03BB45F8 LDR X20, [X20 + 0x268]
	0x03BB45FC LDR X22, [X22 + 0x270]
	0x03BB4600 LDR X21, [X21 + 0x68]
	0x03BB4604 LDR X29, [X29 + 0x70]
	0x03BB4608 LDR X28, [X28 + 0x78]
	0x03BB460C LDR X27, [X27 + 0x80]
	0x03BB4610 LDR X26, [X26 + 0x88]
	0x03BB4614 LDRB W8, [X23 + 0xCF4]
	0x03BB4618 LDR X25, [X25 + 0x90]
	0x03BB461C LDR X24, [X24 + 0x98]
	0x03BB4620 MOV X19, X0
	0x03BB4624 TBNZ X8, 0x0, 0x3BB46C0
	0x03BB4628 ADRP X0, 0x5A7000
	0x03BB462C LDR X0, [X0 + 0x270]
	0x03BB4630 BL 0x1C16CF4
	0x03BB4634 ADRP X0, 0x5A7000
	0x03BB4638 LDR X0, [X0 + 0x268]
	0x03BB463C BL 0x1C16CF4
	0x03BB4640 ADRP X0, 0x5A9000
	0x03BB4644 LDR X0, [X0 + 0x90]
	0x03BB4648 BL 0x1C16CF4
	0x03BB464C ADRP X0, 0x5A9000
	0x03BB4650 LDR X0, [X0 + 0x80]
	0x03BB4654 BL 0x1C16CF4
	0x03BB4658 ADRP X0, 0x5A9000
	0x03BB465C LDR X0, [X0 + 0xA0]
	0x03BB4660 BL 0x1C16CF4
	0x03BB4664 ADRP X0, 0x5A9000
	0x03BB4668 LDR X0, [X0 + 0x70]
	0x03BB466C BL 0x1C16CF4
	0x03BB4670 ADRP X0, 0x5A9000
	0x03BB4674 LDR X0, [X0 + 0xA8]
	0x03BB4678 BL 0x1C16CF4

ISIL:
	001 Move [X31-80], D10
	002 Move [X31+16], D9
	003 Move [X31+24], D8
	004 Move [X31+32], X30
	005 Move [X31+40], X23
	006 Move [X31+48], X22
	007 Move [X31+56], X21
	008 Move [X31+64], X20
	009 Move [X31+72], X19
	010 Move X21, 0x82F000
	011 Move W8, [X21+3299]
	012 Move X19, X2
	013 Move X20, X1
	014 Move X22, X0
	015 Move TEMP, X8
	016 And TEMP, TEMP, 1
	017 Compare TEMP, 1
	018 JumpIfEqual {30}
	019 Move X0, 0x5A7000
	020 Move X0, [X0+2264]
	021 Call 0x1C17CF4
	022 Move X0, 0x5A7000
	023 Move X0, [X0+760]
	024 Call 0x1C17CF4
	025 Move X0, 0x5A8000
	026 Move X0, [X0+440]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X21+3299], W8
	030 Compare X20, 0
	031 JumpIfEqual {44}
	032 Move X8, 0x5A8000
	033 Move X8, [X8+440]
	034 Move X9, [X20]
	035 Move X8, [X8]
	036 Move W11, [X9+304]
	037 Move W10, [X8+304]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move X9, [X9+200]
	040 Add X9, X9, X10
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 NotImplemented "Instruction CSEL not yet implemented."
	044 Move X20, [X31+64]
	045 Move X19, [X31+72]
	046 Move X22, [X31+48]
	047 Move X21, [X31+56]
	048 Move X30, [X31+32]
	049 Move X23, [X31+40]
	050 Move D9, [X31+16]
	051 Move D8, [X31+24]
	052 Move W0, 1
	053 Move V10, [X31+80]
	054 Return X0
	055 Compare X19, 0
	056 JumpIfEqual {143}
	057 Move X10, 0x5A7000
	058 Move X8, [X19]
	059 Move X10, [X10+2264]
	060 NotImplemented "Instruction LDRH not yet implemented."
	061 Move X1, [X10]
	062 Compare X9, 0
	063 JumpIfEqual {70}
	064 Move X10, [X8+176]
	065 Add X10, X10, 8
	066 NotImplemented "Instruction LDUR not yet implemented."
	067 NotImplemented "Instruction CMP not yet implemented."
	068 Subtract X9, X9, 1
	069 Add X10, X10, 16
	070 Move W2, 7
	071 Move X0, X19
	072 Call 0x1C5D788
	073 Move W9, [X10]
	074 Add W9, W9, 7
	075 Add X8, X8, W9
	076 Add X0, X8, 312
	077 Move X8, [X0]
	078 Move X2, [X0+8]
	079 Move X0, X19
	080 Move X1, X20
	081 NotImplemented "Instruction BLR not yet implemented."
	082 Compare X0, 0
	083 JumpIfEqual {143}
	084 Move X22, [X22+56]
	085 Move X1, X31
	086 Move X23, X0
	087 Call Transform.get_position, X0
	088 Move X10, 0x5A7000
	089 Move X8, [X20]
	090 Move X10, [X10+760]
	091 Move V8, V0
	092 Move V9, V1
	093 NotImplemented "Instruction LDRH not yet implemented."
	094 Move X1, [X10]
	095 Move V10, V2
	096 Compare X9, 0
	097 JumpIfEqual {104}
	098 Move X10, [X8+176]
	099 Add X10, X10, 8
	100 NotImplemented "Instruction LDUR not yet implemented."
	101 NotImplemented "Instruction CMP not yet implemented."
	102 Subtract X9, X9, 1
	103 Add X10, X10, 16
	104 Move W2, 6
	105 Move X0, X20
	106 Call 0x1C5D788
	107 Move W9, [X10]
	108 Add W9, W9, 6
	109 Add X8, X8, W9
	110 Add X0, X8, 312
	111 Move X8, [X0]
	112 Move X2, [X0+8]
	113 Move X0, X20
	114 Move X1, X19
	115 NotImplemented "Instruction BLR not yet implemented."
	116 Compare X0, 0
	117 JumpIfEqual {143}
	118 Move X1, X31
	119 Call Transform.get_position, X0
	120 Compare X21, 0
	121 JumpIfEqual {143}
	122 Compare X22, 0
	123 JumpIfEqual {143}
	124 Move V3, V0
	125 Move V4, V1
	126 Move V6, [X21+440]
	127 Move X0, X22
	128 Move X1, X21
	129 Move V0, V8
	130 Move V1, V9
	131 Move X2, X23
	132 Move X20, [X31+64]
	133 Move X19, [X31+72]
	134 Move X22, [X31+48]
	135 Move X21, [X31+56]
	136 Move X30, [X31+32]
	137 Move X23, [X31+40]
	138 Move D9, [X31+16]
	139 Move D8, [X31+24]
	140 Move V5, V2
	141 Move V2, V10
	142 Move V10, [X31+80]
	143 Call 0x1C17F20

Method: System.Single Process(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable interactable, System.Single interactionStrength)

Disassembly:
	0x03BB4F7C STRB W31, [X31 + 0x8]
	0x03BB4F80 STR W31, [X31 + 0x24]
	0x03BB4F84 STR W31, [X31 + 0x34]
	0x03BB4F88 STP S0, S1, [X31 + 0xC]
	0x03BB4F8C STP S2, S0, [X31 + 0x14]
	0x03BB4F90 STP S1, S2, [X31 + 0x1C]
	0x03BB4F94 STRB W8, [X31 + 0xB]
	0x03BB4F98 STR X31, [X31 + 0x38]
	0x03BB4F9C BL 0x28CDE4C
	0x03BB4FA0 LDP X20, X19, [X31 + 0x90]
	0x03BB4FA4 LDP X22, X21, [X31 + 0x80]
	0x03BB4FA8 LDR X30, [X31 + 0x78]
	0x03BB4FAC LDP D9, D8, [X31 + 0x68]
	0x03BB4FB0 LDP D11, D10, [X31 + 0x58]
	0x03BB4FB4 LDP D13, D12, [X31 + 0x48]
	0x03BB4FB8 LDR V14, [X31 + 0x40]
	0x03BB4FBC ADD X31, X31, 0xA0
	0x03BB4FC0 RET
	0x03BB4FC4 BL 0x1C16F20
	0x03BB4FC8 STR S0, [X0 + 0x10]
	0x03BB4FCC RET
	0x03BB4FD0 STR X30, [X31 - 0x30]!
	0x03BB4FD4 STP X22, X21, [X31 + 0x10]
	0x03BB4FD8 STP X20, X19, [X31 + 0x20]
	0x03BB4FDC ADRP X22, 0x82E000
	0x03BB4FE0 LDRB W8, [X22 + 0xCED]
	0x03BB4FE4 MOV W21, W2
	0x03BB4FE8 MOV X20, X1
	0x03BB4FEC MOV X19, X0
	0x03BB4FF0 TBNZ X8, 0x0, 0x3BB5008
	0x03BB4FF4 ADRP X0, 0x53F000
	0x03BB4FF8 LDR X0, [X0 + 0x598]
	0x03BB4FFC BL 0x1C16CF4
	0x03BB5000 MOVZ W8, 0x1
	0x03BB5004 STRB W8, [X22 + 0xCED]
	0x03BB5008 LDR X8, [X19 + 0x28]
	0x03BB500C CBZ X8, 0x3BB503C
	0x03BB5010 ADRP X8, 0x53E000
	0x03BB5014 LDR X8, [X8 + 0x598]
	0x03BB5018 LDR X0, [X8]
	0x03BB501C LDR W8, [X0 + 0xE0]
	0x03BB5020 CBNZ W8, 0x3BB5028
	0x03BB5024 BL 0x1C16DFC
	0x03BB5028 MOV X0, X20
	0x03BB502C MOV X1, X31
	0x03BB5030 MOV X2, X31
	0x03BB5034 BL 0x3C3883C
	0x03BB5038 TBZ X0, 0x0, 0x3BB5084
	0x03BB503C ADRP X19, 0x823000
	0x03BB5040 LDRB W8, [X19 + 0x783]
	0x03BB5044 CBNZ W8, 0x3BB505C
	0x03BB5048 ADRP X0, 0x53E000
	0x03BB504C LDR X0, [X0 + 0x5A0]
	0x03BB5050 BL 0x1C16CF4
	0x03BB5054 MOVZ W8, 0x1
	0x03BB5058 STRB W8, [X19 + 0x783]
	0x03BB505C ADRP X8, 0x53E000
	0x03BB5060 LDR X8, [X8 + 0x5A0]
	0x03BB5064 LDR X8, [X8]
	0x03BB5068 LDR X8, [X8 + 0xB8]
	0x03BB506C LDP S0, S1, [X8]
	0x03BB5070 LDR V2, [X8 + 0x8]
	0x03BB5074 LDP X20, X19, [X31 + 0x20]
	0x03BB5078 LDP X22, X21, [X31 + 0x10]
	0x03BB507C LDR X30, [X31], #0x30
	0x03BB5080 RET
	0x03BB5084 ADRP X22, 0x823000
	0x03BB5088 LDRB W8, [X22 + 0x783]
	0x03BB508C CBNZ W8, 0x3BB50A4
	0x03BB5090 ADRP X0, 0x53E000
	0x03BB5094 LDR X0, [X0 + 0x5A0]
	0x03BB5098 BL 0x1C16CF4

ISIL:
	001 Subtract X31, X31, 112
	002 Move [X31+64], D8
	003 Move [X31+80], X30
	004 Move [X31+88], X21
	005 Move [X31+96], X20
	006 Move [X31+104], X19
	007 Move X21, 0x82F000
	008 Move W8, [X21+3300]
	009 Move V8, V0
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {24}
	016 Move X0, 0x5A8000
	017 Move X0, [X0+520]
	018 Call 0x1C17CF4
	019 Move X0, 0x5A8000
	020 Move X0, [X0+440]
	021 Call 0x1C17CF4
	022 Move W8, 1
	023 Move [X21+3300], W8
	024 Move S0, W31
	025 Compare X20, 0
	026 JumpIfEqual {38}
	027 Move X8, 0x5A8000
	028 Move X8, [X8+440]
	029 Move X9, [X20]
	030 Move X8, [X8]
	031 Move W11, [X9+304]
	032 Move W10, [X8+304]
	033 NotImplemented "Instruction CMP not yet implemented."
	034 Move X9, [X9+200]
	035 Add X9, X9, X10
	036 NotImplemented "Instruction LDUR not yet implemented."
	037 NotImplemented "Instruction CMP not yet implemented."
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 NotImplemented "Instruction FCSEL not yet implemented."
	040 Move X20, [X31+96]
	041 Move X19, [X31+104]
	042 Move X30, [X31+80]
	043 Move X21, [X31+88]
	044 Move V8, [X31+64]
	045 Add X31, X31, 112
	046 Return V0
	047 Move X8, [X19+56]
	048 Compare X8, 0
	049 JumpIfEqual {38}
	050 Move X19, [X8+24]
	051 Compare X19, 0
	052 JumpIfEqual {38}
	053 Move X10, 0x5A7000
	054 Move X8, [X19]
	055 Move X10, [X10+520]
	056 NotImplemented "Instruction LDRH not yet implemented."
	057 Move X1, [X10]
	058 Compare X9, 0
	059 JumpIfEqual {66}
	060 Move X10, [X8+176]
	061 Add X10, X10, 8
	062 NotImplemented "Instruction LDUR not yet implemented."
	063 NotImplemented "Instruction CMP not yet implemented."
	064 Subtract X9, X9, 1
	065 Add X10, X10, 16
	066 Move W2, 3
	067 Move X0, X19
	068 Call 0x1C5D788
	069 Move W9, [X10]
	070 Add W9, W9, 3
	071 Add X8, X8, W9
	072 Add X0, X8, 312
	073 Move X9, [X0]
	074 Move X1, [X0+8]
	075 Add X8, X31, 8
	076 Move X0, X19
	077 NotImplemented "Instruction BLR not yet implemented."
	078 Move V0, [X31+36]

Method: System.Void OnHoverEntered(UnityEngine.XR.Interaction.Toolkit.HoverEnterEventArgs args)

Disassembly:
	0x03BB509C MOVZ W8, 0x1
	0x03BB50A0 STRB W8, [X22 + 0x783]
	0x03BB50A4 LDR X9, [X19 + 0x28]
	0x03BB50A8 CBZ X9, 0x3BB5200
	0x03BB50AC ADRP X22, 0x53E000
	0x03BB50B0 LDR X22, [X22 + 0x5A0]
	0x03BB50B4 LDR W9, [X9 + 0x10]
	0x03BB50B8 LDR X8, [X22]
	0x03BB50BC CMP W9, 0x6
	0x03BB50C0 LDR X8, [X8 + 0xB8]
	0x03BB50C4 LDP S0, S1, [X8]
	0x03BB50C8 LDR V2, [X8 + 0x8]
	0x03BB50CC B.HI 0x3BB51D8
	0x03BB50D0 MOVZ W10, 0x1
	0x03BB50D4 LSLV W10, W10, W9
	0x03BB50D8 MOVZ W11, 0x12
	0x03BB50DC ANDS W31, W10, W11, 0x0
	0x03BB50E0 B.NE 0x3BB511C
	0x03BB50E4 MOVZ W11, 0x24
	0x03BB50E8 ANDS W31, W10, W11, 0x0
	0x03BB50EC B.NE 0x3BB5134
	0x03BB50F0 MOVZ W10, 0x1
	0x03BB50F4 LSLV W9, W10, W9
	0x03BB50F8 MOVZ W10, 0x48
	0x03BB50FC ANDS W31, W9, W10, 0x0
	0x03BB5100 B.EQ 0x3BB51D8
	0x03BB5104 TBZ X21, 0x0, 0x3BB514C
	0x03BB5108 CBZ X20, 0x3BB5200
	0x03BB510C MOV X0, X20
	0x03BB5110 MOV X1, X31
	0x03BB5114 BL 0x3C3FA04
	0x03BB5118 B 0x3BB51D8
	0x03BB511C TBZ X21, 0x0, 0x3BB517C
	0x03BB5120 CBZ X20, 0x3BB5200
	0x03BB5124 MOV X0, X20
	0x03BB5128 MOV X1, X31
	0x03BB512C BL 0x3C3F90C
	0x03BB5130 B 0x3BB51D8
	0x03BB5134 TBZ X21, 0x0, 0x3BB51AC
	0x03BB5138 CBZ X20, 0x3BB5200
	0x03BB513C MOV X0, X20
	0x03BB5140 MOV X1, X31
	0x03BB5144 BL 0x3C3F988
	0x03BB5148 B 0x3BB51D8
	0x03BB514C ADRP X20, 0x823000
	0x03BB5150 LDRB W9, [X20 + 0xA1F]
	0x03BB5154 CBNZ W9, 0x3BB5170
	0x03BB5158 MOV X0, X22
	0x03BB515C BL 0x1C16CF4
	0x03BB5160 LDR X8, [X22]
	0x03BB5164 MOVZ W9, 0x1
	0x03BB5168 STRB W9, [X20 + 0xA1F]
	0x03BB516C LDR X8, [X8 + 0xB8]
	0x03BB5170 LDP S0, S1, [X8 + 0x48]
	0x03BB5174 LDR V2, [X8 + 0x50]
	0x03BB5178 B 0x3BB51D8
	0x03BB517C ADRP X20, 0x823000
	0x03BB5180 LDRB W9, [X20 + 0xB70]
	0x03BB5184 CBNZ W9, 0x3BB51A0
	0x03BB5188 MOV X0, X22
	0x03BB518C BL 0x1C16CF4
	0x03BB5190 LDR X8, [X22]
	0x03BB5194 MOVZ W9, 0x1
	0x03BB5198 STRB W9, [X20 + 0xB70]
	0x03BB519C LDR X8, [X8 + 0xB8]
	0x03BB51A0 LDP S0, S1, [X8 + 0x3C]
	0x03BB51A4 LDR V2, [X8 + 0x44]
	0x03BB51A8 B 0x3BB51D8
	0x03BB51AC ADRP X20, 0x823000
	0x03BB51B0 LDRB W9, [X20 + 0x786]
	0x03BB51B4 CBNZ W9, 0x3BB51D0
	0x03BB51B8 MOV X0, X22
	0x03BB51BC BL 0x1C16CF4
	0x03BB51C0 LDR X8, [X22]
	0x03BB51C4 MOVZ W9, 0x1
	0x03BB51C8 STRB W9, [X20 + 0x786]
	0x03BB51CC LDR X8, [X8 + 0xB8]
	0x03BB51D0 LDP S0, S1, [X8 + 0x18]
	0x03BB51D4 LDR V2, [X8 + 0x20]
	0x03BB51D8 LDR X8, [X19 + 0x28]
	0x03BB51DC CBZ X8, 0x3BB5200
	0x03BB51E0 LDR W8, [X8 + 0x10]
	0x03BB51E4 SUB W8, W8, 0x1
	0x03BB51E8 CMP W8, 0x2

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+96], X30
	003 Move [X31+112], X22
	004 Move [X31+120], X21
	005 Move [X31+128], X20
	006 Move [X31+136], X19
	007 Move X21, 0x82E000
	008 Move W8, [X21+3301]
	009 Move X19, X1
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x5A6000
	016 Move X0, [X0+760]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+3301], W8
	020 Move X8, [X20+56]
	021 Compare X8, 0
	022 JumpIfEqual {88}
	023 Compare X19, 0
	024 JumpIfEqual {95}
	025 Move X0, X19
	026 Move X1, X31
	027 Call HoverEnterEventArgs.get_interactorObject, X0
	028 Compare X0, 0
	029 JumpIfEqual {95}
	030 Move X10, 0x5A6000
	031 Move X8, [X0]
	032 Move X10, [X10+760]
	033 Move X21, [X20+32]
	034 Move X19, X0
	035 NotImplemented "Instruction LDRH not yet implemented."
	036 Move X1, [X10]
	037 Compare X9, 0
	038 JumpIfEqual {45}
	039 Move X10, [X8+176]
	040 Add X10, X10, 8
	041 NotImplemented "Instruction LDUR not yet implemented."
	042 NotImplemented "Instruction CMP not yet implemented."
	043 Subtract X9, X9, 1
	044 Add X10, X10, 16
	045 Move W2, 6
	046 Move X0, X19
	047 Call 0x1C5D788
	048 Move W9, [X10]
	049 Add W9, W9, 6
	050 Add X8, X8, W9
	051 Add X0, X8, 312
	052 Move X8, [X0]
	053 Move X2, [X0+8]
	054 Move X0, X19
	055 Move X1, X21
	056 NotImplemented "Instruction BLR not yet implemented."
	057 Move X8, [X20+32]
	058 Compare X8, 0
	059 JumpIfEqual {95}
	060 Move X9, [X8]
	061 Move X22, X0
	062 Move X0, X8
	063 Move X1, X19
	064 Move X10, [X9+1448]
	065 Move X2, [X9+1456]
	066 NotImplemented "Instruction BLR not yet implemented."
	067 Move X21, [X20+56]
	068 Move X20, X0
	069 Add X8, X31, 32
	070 Move X0, X22
	071 Move X1, X31
	072 Call TransformExtensions.GetWorldPose, X0
	073 Move V0, [X31+2]
	074 NotImplemented "Instruction LDUR not yet implemented."
	075 Move [X31+4], V0
	076 Move [X31+76], V1
	077 Compare X21, 0
	078 JumpIfEqual {95}
	079 Move V0, [X31+4]
	080 NotImplemented "Instruction LDUR not yet implemented."
	081 Add X2, X31, 0
	082 Move X0, X21
	083 Move X1, X19
	084 Move X3, X20
	085 Move [X31], V0
	086 Move [X31+12], V1
	087 Call XRPokeLogic.OnHoverEntered, X0, X1, X2, X3
	088 Move X20, [X31+128]
	089 Move X19, [X31+136]
	090 Move X22, [X31+112]
	091 Move X21, [X31+120]
	092 Move X30, [X31+96]
	093 Add X31, X31, 144
	094 Return 
	095 Call 0x1C17F20

Method: System.Void OnHoverExited(UnityEngine.XR.Interaction.Toolkit.HoverExitEventArgs args)

Disassembly:
	0x03BB53CC MOV V8.16B, V0.16B
	0x03BB53D0 MOV V9.16B, V1.16B
	0x03BB53D4 MOV V10.16B, V2.16B
	0x03BB53D8 BL 0x3BB4FD0
	0x03BB53DC MOV V11.16B, V0.16B
	0x03BB53E0 MOV V12.16B, V1.16B
	0x03BB53E4 MOV V13.16B, V2.16B
	0x03BB53E8 FMOV S0, 1
	0x03BB53EC FMOV S1, W31
	0x03BB53F0 FMOV S2, W31
	0x03BB53F4 FMOV S3, 1
	0x03BB53F8 MOV X0, X31
	0x03BB53FC BL 0x3C0D030
	0x03BB5400 LDR V0, [X19 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move X19, [X0+56]
	004 Compare X19, 0
	005 JumpIfEqual {15}
	006 Compare X1, 0
	007 JumpIfEqual {18}
	008 Move X0, X1
	009 Move X1, X31
	010 Call HoverExitEventArgs.get_interactorObject, X0
	011 Move X1, X0
	012 Move X0, X19
	013 Move X30, [X31+16]
	014 Move X19, [X31+24]
	015 Move X30, [X31+16]
	016 Move X19, [X31+24]
	017 Return 
	018 Call 0x1C17F20

Method: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable FindPokeInteractable()

Disassembly:
	0x03BB3D10 FMUL S1, S8, S4
	0x03BB3D14 LDR V4, [X31 + 0x28]
	0x03BB3D18 LDR V3, [X20 + 0x30]
	0x03BB3D1C FMUL S0, S10, S0
	0x03BB3D20 FMUL S2, S4, S2
	0x03BB3D24 FSUB S1, S2, S1
	0x03BB3D28 FSUB S0, S1, S0
	0x03BB3D2C FCMP S0, S3
	0x03BB3D30 B.GT 0x3BB3C28
	0x03BB3D34 MOV W23, W31
	0x03BB3D38 MOV W22, W31
	0x03BB3D3C FMOV S12, 1
	0x03BB3D40 LDR X0, [X20 + 0x48]
	0x03BB3D44 CBZ X0, 0x3BB3F78
	0x03BB3D48 ADRP X8, 0x5A9000
	0x03BB3D4C LDR X8, [X8 + 0xFF0]
	0x03BB3D50 MOV X1, X21
	0x03BB3D54 MOV W2, W23
	0x03BB3D58 LDR X3, [X8]
	0x03BB3D5C BL 0x2A89728
	0x03BB3D60 LDR X0, [X20 + 0x58]
	0x03BB3D64 CBZ X0, 0x3BB3F78
	0x03BB3D68 ADRP X8, 0x5A9000
	0x03BB3D6C LDR X8, [X8 + 0xFE8]
	0x03BB3D70 MOV X1, X21
	0x03BB3D74 MOV V0.16B, V12.16B
	0x03BB3D78 LDR X2, [X8]
	0x03BB3D7C BL 0x2AB4A74
	0x03BB3D80 FMOV S9, W31
	0x03BB3D84 FMOV S1, W31
	0x03BB3D88 TBNZ X22, 0x0, 0x3BB3E88
	0x03BB3D8C LDR X0, [X20 + 0x50]
	0x03BB3D90 CBZ X0, 0x3BB3F78
	0x03BB3D94 ADRP X8, 0x5A9000
	0x03BB3D98 LDR X8, [X8 + 0xFC8]
	0x03BB3D9C ADD X2, X31, 0x40
	0x03BB3DA0 MOV X1, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x830000
	006 Move X20, 0x541000
	007 Move W8, [X21+3302]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5AA000
	015 Move X0, [X0+3976]
	016 Call 0x1C17CF4
	017 Move X0, 0x541000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3302], W8
	022 Move X0, [X20]
	023 Move X20, [X19+32]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X0, [X19+32]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Move X8, 0x5AA000
	043 Move X8, [X8+3976]
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, [X8]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call 0x21A4F50, X0
	051 Return X0

Method: UnityEngine.Collider FindPokeCollider()

Disassembly:
	0x03BB3DA4 LDR X3, [X8]
	0x03BB3DA8 BL 0x2AA6B2C
	0x03BB3DAC TBZ X0, 0x0, 0x3BB3E84
	0x03BB3DB0 LDR X0, [X31 + 0x40]
	0x03BB3DB4 CBZ X0, 0x3BB3F78
	0x03BB3DB8 ADRP X8, 0x5AA000
	0x03BB3DBC LDR X8, [X8]
	0x03BB3DC0 LDR X1, [X8]
	0x03BB3DC4 BL 0x2D57B54
	0x03BB3DC8 CMP W0, 0x2
	0x03BB3DCC B.LT 0x3BB3E84
	0x03BB3DD0 LDR X8, [X31 + 0x40]
	0x03BB3DD4 CBZ X8, 0x3BB3F78
	0x03BB3DD8 LDR X25, [X8 + 0x10]
	0x03BB3DDC CBZ X25, 0x3BB3F78
	0x03BB3DE0 ADRP X27, 0x5AA000
	0x03BB3DE4 ADRP X28, 0x5A9000
	0x03BB3DE8 LDR X27, [X27 + 0x8]
	0x03BB3DEC LDR X28, [X28 + 0xFD0]
	0x03BB3DF0 MOV W24, W0
	0x03BB3DF4 MOV W26, W31
	0x03BB3DF8 LDR X8, [X25]
	0x03BB3DFC LDR X1, [X27]
	0x03BB3E00 LDRH W9, [X8 + 0x12E]
	0x03BB3E04 CBZ X9, 0x3BB3E28
	0x03BB3E08 LDR X10, [X8 + 0xB0]
	0x03BB3E0C ADD X10, X10, 0x8
	0x03BB3E10 LDUR X11, [X10 - 0x8]
	0x03BB3E14 CMP X11, X1
	0x03BB3E18 B.EQ 0x3BB3E38
	0x03BB3E1C SUBS X9, X9, 0x1
	0x03BB3E20 ADD X10, X10, 0x10
	0x03BB3E24 B.NE 0x3BB3E10
	0x03BB3E28 MOV X0, X25
	0x03BB3E2C MOV W2, W31
	0x03BB3E30 BL 0x1C5C788
	0x03BB3E34 B 0x3BB3E44

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x830000
	006 Move X20, 0x541000
	007 Move W8, [X21+3303]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5AA000
	015 Move X0, [X0+3984]
	016 Call 0x1C17CF4
	017 Move X0, 0x541000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+3303], W8
	022 Move X0, [X20]
	023 Move X20, [X19+40]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X0, [X19+40]
	037 Move X20, [X31+16]
	038 Move X19, [X31+24]
	039 Move X30, [X31+32]
	040 Move X21, [X31+40]
	041 Return X0
	042 Move X8, 0x5AA000
	043 Move X8, [X8+3984]
	044 Move X0, X19
	045 Move X20, [X31+16]
	046 Move X19, [X31+24]
	047 Move X1, [X8]
	048 Move X30, [X31+32]
	049 Move X21, [X31+40]
	050 Call 0x21A4AF8, X0
	051 Return X0

Method: System.Void Setup()

Disassembly:
	0x03BB3930 LDR W8, [X0 + 0xE0]
	0x03BB3934 CBNZ W8, 0x3BB393C
	0x03BB3938 BL 0x1C16DFC
	0x03BB393C ADRP X25, 0x825000
	0x03BB3940 LDRB W8, [X25 + 0x785]
	0x03BB3944 FMUL S0, S12, S12
	0x03BB3948 FMUL S1, S13, S13
	0x03BB394C FADD S12, S0, S1
	0x03BB3950 FMUL S13, S14, S14
	0x03BB3954 CBNZ W8, 0x3BB396C
	0x03BB3958 ADRP X0, 0x540000
	0x03BB395C LDR X0, [X0 + 0x5A8]
	0x03BB3960 BL 0x1C16CF4
	0x03BB3964 MOVZ W8, 0x1
	0x03BB3968 STRB W8, [X25 + 0x785]
	0x03BB396C LDR X0, [X24]
	0x03BB3970 FADD S12, S12, S13
	0x03BB3974 MOV V13.16B, V15.16B
	0x03BB3978 MOV V14.16B, V8.16B
	0x03BB397C LDR W8, [X0 + 0xE0]
	0x03BB3980 CBNZ W8, 0x3BB3988
	0x03BB3984 BL 0x1C16DFC
	0x03BB3988 ADRP X8, 0xFFFFFFFFFCF37000
	0x03BB398C FMUL S0, S11, S11
	0x03BB3990 FMUL S1, S9, S9
	0x03BB3994 LDR V15, [X8 + 0x17C]
	0x03BB3998 FADD S0, S0, S1
	0x03BB399C FMUL S1, S10, S10
	0x03BB39A0 LDR V8, [X31 + 0x24]
	0x03BB39A4 FADD S0, S1, S0
	0x03BB39A8 FSQRT S2, S0
	0x03BB39AC FCMP S2, S15
	0x03BB39B0 FSQRT S12, S12
	0x03BB39B4 B.LE 0x3BB39C8
	0x03BB39B8 FDIV S0, S11, S2
	0x03BB39BC FDIV S1, S9, S2
	0x03BB39C0 FDIV S2, S10, S2
	0x03BB39C4 B 0x3BB39F4
	0x03BB39C8 LDRB W8, [X23 + 0x783]
	0x03BB39CC CBNZ W8, 0x3BB39E4
	0x03BB39D0 ADRP X0, 0x540000
	0x03BB39D4 LDR X0, [X0 + 0x5A0]
	0x03BB39D8 BL 0x1C16CF4
	0x03BB39DC MOVZ W8, 0x1
	0x03BB39E0 STRB W8, [X23 + 0x783]
	0x03BB39E4 LDR X8, [X22]
	0x03BB39E8 LDR X8, [X8 + 0xB8]
	0x03BB39EC LDP S0, S1, [X8]
	0x03BB39F0 LDR V2, [X8 + 0x8]
	0x03BB39F4 LDR V3, [X31 + 0x28]
	0x03BB39F8 LDR V10, [X31 + 0x20]
	0x03BB39FC FMUL S0, S8, S0
	0x03BB3A00 LDR X8, [X20 + 0x28]
	0x03BB3A04 FMUL S1, S3, S1
	0x03BB3A08 FMUL S2, S10, S2
	0x03BB3A0C FADD S0, S0, S1
	0x03BB3A10 LDR V1, [X20 + 0x10]
	0x03BB3A14 FADD S9, S2, S0
	0x03BB3A18 FNEG S0, S12
	0x03BB3A1C FCMP S9, 0x0
	0x03BB3A20 FCSEL S0, S12, S0, GE
	0x03BB3A24 FMOV S2, 1
	0x03BB3A28 FDIV S11, S0, S1
	0x03BB3A2C FMIN S0, S11, S2
	0x03BB3A30 FCMP S11, 0x0
	0x03BB3A34 FMOV S1, W31
	0x03BB3A38 FCSEL S12, S0, S1, PL
	0x03BB3A3C CBZ X8, 0x3BB3F78
	0x03BB3A40 LDRB W8, [X8 + 0x18]
	0x03BB3A44 CBZ W8, 0x3BB3C28
	0x03BB3A48 LDR X0, [X20 + 0x48]
	0x03BB3A4C CBZ X0, 0x3BB3F78
	0x03BB3A50 ADRP X8, 0x5A9000
	0x03BB3A54 LDR X8, [X8 + 0xFB8]
	0x03BB3A58 MOV X1, X21
	0x03BB3A5C LDR X2, [X8]
	0x03BB3A60 BL 0x2A89948
	0x03BB3A64 TBNZ X0, 0x0, 0x3BB3A88
	0x03BB3A68 LDR X0, [X20 + 0x48]
	0x03BB3A6C CBZ X0, 0x3BB3F78
	0x03BB3A70 ADRP X8, 0x5A9000
	0x03BB3A74 LDR X8, [X8 + 0xFF0]
	0x03BB3A78 MOV X1, X21
	0x03BB3A7C MOV W2, W31
	0x03BB3A80 LDR X3, [X8]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x830000
	008 Move W8, [X20+3304]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x5AA000
	015 Move X0, [X0+3944]
	016 Call 0x1C17CF4
	017 Move X0, 0x541000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x5AA000
	021 Move X0, [X0+2552]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X20+3304], W8
	025 Move X8, [X19+56]
	026 Compare X8, 0
	027 JumpIfNotEqual {35}
	028 Move X8, 0x5AA000
	029 Move X8, [X8+2552]
	030 Move X0, [X8]
	031 Call 0x1C17F10
	032 Move X20, X0
	033 Call XRPokeLogic..ctor, X0
	034 Move [X19+56], X20
	035 Move X0, X19
	036 Call XRPokeFilter.FindPokeInteractable, X0
	037 Move X21, X0
	038 Move X0, X19
	039 Call XRPokeFilter.FindPokeCollider, X0
	040 Move X8, [X19+48]
	041 Compare X8, 0
	042 JumpIfEqual {111}
	043 Move X9, 0x5AA000
	044 Move X9, [X9+3944]
	045 Move X23, 0x541000
	046 Move X20, X0
	047 Move X0, X8
	048 Move X1, [X9]
	049 Move X23, [X23+1432]
	050 Call DatumProperty`2<Object, Object>.get_Value, X0
	051 Move X8, [X23]
	052 Move X22, X0
	053 Move W9, [X8+224]
	054 Compare W9, 0
	055 JumpIfNotEqual {58}
	056 Move X0, X8
	057 Call 0x1C17DFC
	058 Move X0, X21
	059 Move X1, X31
	060 Move X2, X31
	061 Call Object.op_Inequality, X0, X1
	062 Move TEMP, X0
	063 And TEMP, TEMP, 1
	064 Compare TEMP, 1
	065 JumpIfNotEqual {104}
	066 Move X0, [X23]
	067 Move W8, [X0+224]
	068 Compare W8, 0
	069 JumpIfNotEqual {71}
	070 Call 0x1C17DFC
	071 Move X0, X20
	072 Move X1, X31
	073 Move X2, X31
	074 Call Object.op_Inequality, X0, X1
	075 Compare X22, 0
	076 JumpIfEqual {104}
	077 Move TEMP, X0
	078 And TEMP, TEMP, 1
	079 Compare TEMP, 1
	080 JumpIfNotEqual {104}
	081 Compare X21, 0
	082 JumpIfEqual {111}
	083 Move X8, [X21]
	084 Move X19, [X19+56]
	085 Move X0, X21
	086 Move X1, X31
	087 Move X9, [X8+1448]
	088 Move X2, [X8+1456]
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Compare X19, 0
	091 JumpIfEqual {111}
	092 Move X1, X0
	093 Move X0, X19
	094 Move X2, X22
	095 Move X3, X20
	096 Move X20, [X31+32]
	097 Move X19, [X31+40]
	098 Move X22, [X31+16]
	099 Move X21, [X31+24]
	100 Move X30, [X31+48]
	101 Move X23, [X31+56]
	102 Call XRPokeLogic.Initialize, X0, X1, X2, X3
	103 Return 
	104 Move X20, [X31+32]
	105 Move X19, [X31+40]
	106 Move X22, [X31+16]
	107 Move X21, [X31+24]
	108 Move X30, [X31+48]
	109 Move X23, [X31+56]
	110 Return 
	111 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BB588C MOVZ W8, 0x1
	0x03BB5890 STRB W8, [X20 + 0xCF8]
	0x03BB5894 LDR X0, [X22]
	0x03BB5898 LDR X20, [X19 + 0x30]
	0x03BB589C LDR W8, [X0 + 0xE0]
	0x03BB58A0 CBNZ W8, 0x3BB58A8
	0x03BB58A4 BL 0x1C16DFC
	0x03BB58A8 MOV X0, X20
	0x03BB58AC MOV X1, X31
	0x03BB58B0 MOV X2, X31
	0x03BB58B4 BL 0x3C3883C
	0x03BB58B8 FMOV S8, W31
	0x03BB58BC TBNZ X0, 0x0, 0x3BB5AFC
	0x03BB58C0 LDR V0, [X19 + 0x38]
	0x03BB58C4 FCMP S0, 0x0
	0x03BB58C8 B.LS 0x3BB5AFC
	0x03BB58CC CBZ X21, 0x3BB5B24
	0x03BB58D0 ADRP X8, 0x5A5000
	0x03BB58D4 LDR X8, [X8 + 0x438]
	0x03BB58D8 LDR X9, [X21]
	0x03BB58DC LDR X8, [X8]
	0x03BB58E0 LDRB W11, [X9 + 0x130]
	0x03BB58E4 LDRB W10, [X8 + 0x130]
	0x03BB58E8 CMP W11, W10
	0x03BB58EC B.CC 0x3BB5904
	0x03BB58F0 LDR X9, [X9 + 0xC8]
	0x03BB58F4 ADD X9, X9, X10, 0x3, LSL
	0x03BB58F8 LDUR X9, [X9 - 0x8]
	0x03BB58FC CMP X9, X8
	0x03BB5900 B.EQ 0x3BB59B8
	0x03BB5904 ADRP X10, 0x5A5000
	0x03BB5908 LDR X8, [X21]
	0x03BB590C LDR X10, [X10 + 0x8D8]
	0x03BB5910 LDRH W9, [X8 + 0x12E]
	0x03BB5914 LDR X1, [X10]
	0x03BB5918 CBZ X9, 0x3BB593C
	0x03BB591C LDR X10, [X8 + 0xB0]
	0x03BB5920 ADD X10, X10, 0x8
	0x03BB5924 LDUR X11, [X10 - 0x8]
	0x03BB5928 CMP X11, X1
	0x03BB592C B.EQ 0x3BB594C
	0x03BB5930 SUBS X9, X9, 0x1
	0x03BB5934 ADD X10, X10, 0x10
	0x03BB5938 B.NE 0x3BB5924
	0x03BB593C MOVZ W2, 0x6
	0x03BB5940 MOV X0, X21
	0x03BB5944 BL 0x1C5C788
	0x03BB5948 B 0x3BB595C
	0x03BB594C LDR W9, [X10]
	0x03BB5950 ADD W9, W9, 0x6
	0x03BB5954 ADD X8, X8, W9, 0x4, SXTW
	0x03BB5958 ADD X0, X8, 0x138
	0x03BB595C LDP X8, X1, [X0]
	0x03BB5960 MOV X0, X21
	0x03BB5964 BLR X8
	0x03BB5968 LDR X8, [X22]
	0x03BB596C MOV X21, X0
	0x03BB5970 LDR W9, [X8 + 0xE0]
	0x03BB5974 CBNZ W9, 0x3BB5980
	0x03BB5978 MOV X0, X8
	0x03BB597C BL 0x1C16DFC
	0x03BB5980 MOV X0, X21
	0x03BB5984 MOV X1, X31
	0x03BB5988 MOV X2, X31
	0x03BB598C BL 0x3C3883C

ISIL:
	001 Move [X31-64], X30
	002 Move [X31+16], X24
	003 Move [X31+24], X23
	004 Move [X31+32], X22
	005 Move [X31+40], X21
	006 Move [X31+48], X20
	007 Move [X31+56], X19
	008 Move X20, 0x82E000
	009 Move X24, 0x5A8000
	010 Move X21, 0x5A9000
	011 Move X23, 0x5A8000
	012 Move X22, 0x5A6000
	013 Move W8, [X20+3305]
	014 Move X24, [X24+2536]
	015 Move X21, [X21+184]
	016 Move X23, [X23+2552]
	017 Move X22, [X22+2696]
	018 Move X19, X0
	019 Move TEMP, X8
	020 And TEMP, TEMP, 1
	021 Compare TEMP, 1
	022 JumpIfEqual {37}
	023 Move X0, 0x5A6000
	024 Move X0, [X0+2696]
	025 Call 0x1C17CF4
	026 Move X0, 0x5A8000
	027 Move X0, [X0+2536]
	028 Call 0x1C17CF4
	029 Move X0, 0x5A9000
	030 Move X0, [X0+184]
	031 Call 0x1C17CF4
	032 Move X0, 0x5A8000
	033 Move X0, [X0+2552]
	034 Call 0x1C17CF4
	035 Move W8, 1
	036 Move [X20+3305], W8
	037 Move X0, [X24]
	038 Call 0x1C17F10
	039 Move W8, 3
	040 Move W9, 1
	041 Move W10, 0x42340000
	042 Move X1, X31
	043 Move X20, X0
	044 Move [X0+16], W8
	045 Move [X0+24], W9
	046 Move [X0+28], W10
	047 Call Object..ctor, X0
	048 Move X0, [X21]
	049 Call 0x1C17F10
	050 Move X1, X20
	051 Move X21, X0
	052 Call PokeThresholdDatumProperty..ctor, X0, X1
	053 Move [X19+48], X21
	054 Move X0, [X23]
	055 Call 0x1C17F10
	056 Move X20, X0
	057 Call XRPokeLogic..ctor, X0
	058 Move [X19+56], X20
	059 Move X0, [X22]
	060 Call 0x1C17F10
	061 Move X1, X31
	062 Move X20, X0
	063 Call BindingsGroup..ctor, X0
	064 Move [X19+64], X20
	065 Move X0, X19
	066 Move X20, [X31+48]
	067 Move X19, [X31+56]
	068 Move X22, [X31+32]
	069 Move X21, [X31+40]
	070 Move X24, [X31+16]
	071 Move X23, [X31+24]
	072 Move X1, X31
	073 Move X30, [X31+64]
	074 Call MonoBehaviour..ctor, X0
	075 Return 

