Type: UnityEngine.XR.Interaction.Toolkit.Filtering.XRAngleGazeEvaluator

Method: UnityEngine.Camera GetXROriginCamera()

Disassembly:
	0x03BB6600 STP X20, X19, [X31 + 0x10]
	0x03BB6604 LDRB W8, [X0 + 0x18]
	0x03BB6608 AND W21, W1, 0x1
	0x03BB660C CMP W8, W21
	0x03BB6610 B.EQ 0x3BB6688
	0x03BB6614 MOV X19, X0
	0x03BB6618 MOV W20, W1
	0x03BB661C BL 0x3BB67D4
	0x03BB6620 TBNZ X0, 0x0, 0x3BB6688
	0x03BB6624 LDR X0, [X19 + 0x10]
	0x03BB6628 CBZ X0, 0x3BB6694
	0x03BB662C LDRB W8, [X0 + 0x31]
	0x03BB6630 CBZ W8, 0x3BB6638
	0x03BB6634 TBZ X20, 0x0, 0x3BB6698
	0x03BB6638 LDRB W8, [X19 + 0x28]
	0x03BB663C STRB W21, [X19 + 0x18]
	0x03BB6640 CBZ W8, 0x3BB6688
	0x03BB6644 MOV X1, X31
	0x03BB6648 BL 0x3C32454
	0x03BB664C TBZ X0, 0x0, 0x3BB6688
	0x03BB6650 TBZ X20, 0x0, 0x3BB6664
	0x03BB6654 MOV X0, X19
	0x03BB6658 LDP X20, X19, [X31 + 0x10]
	0x03BB665C LDP X30, X21, [X31], #0x20
	0x03BB6660 B 0x3BB6834
	0x03BB6664 LDRB W8, [X19 + 0x29]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x82D000
	005 Move X19, 0x5A5000
	006 Move W8, [X20+3317]
	007 Move X19, [X19+2424]
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {17}
	012 Move X0, 0x5A5000
	013 Move X0, [X0+2424]
	014 Call 0x1C17CF4
	015 Move W8, 1
	016 Move [X20+3317], W8
	017 Move X1, [X19]
	018 Add X0, X31, 8
	019 Move [X31+8], X31
	020 Call 0x2960A30, X0
	021 Move W8, W0
	022 Move X0, X31
	023 Move TEMP, X8
	024 And TEMP, TEMP, 1
	025 Compare TEMP, 1
	026 JumpIfNotEqual {31}
	027 Move X8, [X31+8]
	028 Compare X8, 0
	029 JumpIfEqual {35}
	030 Move X0, [X8+32]
	031 Move X20, [X31+16]
	032 Move X19, [X31+24]
	033 Move X30, [X31+32]
	034 Return X0
	035 Call 0x1C17F20

Method: UnityEngine.Transform get_gazeTransform()

Disassembly:
	0x03BB6668 CBZ W8, 0x3BB6688
	0x03BB666C LDR X8, [X19]

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_gazeTransform(UnityEngine.Transform value)

Disassembly:
	0x03BB6670 STRB W31, [X19 + 0x29]
	0x03BB6674 MOV X0, X19

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Single get_maxAngle()

Disassembly:
	0x03BB6678 LDP X20, X19, [X31 + 0x10]
	0x03BB667C LDP X2, X1, [X8 + 0x1B8]

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_maxAngle(System.Single value)

Disassembly:
	0x03BB6680 LDP X30, X21, [X31], #0x20
	0x03BB6684 BR X2
	0x03BB6688 LDP X20, X19, [X31 + 0x10]
	0x03BB668C LDP X30, X21, [X31], #0x20
	0x03BB6690 RET
	0x03BB6694 BL 0x1C16F20
	0x03BB6698 ADRP X0, 0x53D000
	0x03BB669C LDR X0, [X0 + 0xAC8]

ISIL:
	001 Move W8, 0x43340000
	002 Move S1, W8
	003 NotImplemented "Instruction FCMP not yet implemented."
	004 NotImplemented "Instruction FMIN not yet implemented."
	005 Move S1, W31
	006 NotImplemented "Instruction FCSEL not yet implemented."
	007 Move [X0+56], S0
	008 Return 

Method: System.Void InitializeGazeTransform()

Disassembly:
	0x03BB66A0 BL 0x1C16D08
	0x03BB66A4 MOVZ W1, 0x5
	0x03BB66A8 BL 0x1C16D6C
	0x03BB66AC MOV X20, X0
	0x03BB66B0 BL 0x19903C0
	0x03BB66B4 ADRP X0, 0x5A7000
	0x03BB66B8 LDR X0, [X0 + 0xF0]
	0x03BB66BC BL 0x1C16D08
	0x03BB66C0 MOV X2, X0
	0x03BB66C4 MOV X0, X20
	0x03BB66C8 MOV X1, X31
	0x03BB66CC BL 0x1993444
	0x03BB66D0 MOV X0, X19
	0x03BB66D4 MOV X1, X31
	0x03BB66D8 BL 0x33BE520
	0x03BB66DC MOV X21, X0
	0x03BB66E0 BL 0x19903C0
	0x03BB66E4 LDR X8, [X21]
	0x03BB66E8 MOV X0, X21
	0x03BB66EC LDP X9, X1, [X8 + 0x1A8]
	0x03BB66F0 BLR X9
	0x03BB66F4 MOV X21, X0
	0x03BB66F8 MOV X0, X20
	0x03BB66FC BL 0x19903C0
	0x03BB6700 MOVZ W1, 0x1
	0x03BB6704 MOV X0, X20
	0x03BB6708 MOV X2, X21
	0x03BB670C BL 0x1993444
	0x03BB6710 MOV X0, X20
	0x03BB6714 BL 0x19903C0
	0x03BB6718 ADRP X0, 0x5A7000
	0x03BB671C LDR X0, [X0 + 0xF8]
	0x03BB6720 BL 0x1C16D08
	0x03BB6724 MOV X2, X0
	0x03BB6728 MOVZ W1, 0x2
	0x03BB672C MOV X0, X20
	0x03BB6730 BL 0x1993444
	0x03BB6734 LDR X19, [X19 + 0x10]
	0x03BB6738 MOV X0, X19
	0x03BB673C BL 0x19903C0
	0x03BB6740 MOV X0, X19
	0x03BB6744 MOV X1, X31
	0x03BB6748 BL 0x3C389D4
	0x03BB674C MOV X19, X0
	0x03BB6750 MOV X0, X20
	0x03BB6754 BL 0x19903C0
	0x03BB6758 MOVZ W1, 0x3
	0x03BB675C MOV X0, X20
	0x03BB6760 MOV X2, X19
	0x03BB6764 BL 0x1993444
	0x03BB6768 MOV X0, X20
	0x03BB676C BL 0x19903C0
	0x03BB6770 ADRP X0, 0x5A7000
	0x03BB6774 LDR X0, [X0 + 0x100]
	0x03BB6778 BL 0x1C16D08
	0x03BB677C MOV X2, X0
	0x03BB6780 MOVZ W1, 0x4
	0x03BB6784 MOV X0, X20
	0x03BB6788 BL 0x1993444
	0x03BB678C MOV X0, X20
	0x03BB6790 MOV X1, X31
	0x03BB6794 BL 0x32278CC
	0x03BB6798 MOV X19, X0
	0x03BB679C ADRP X0, 0x53D000
	0x03BB67A0 LDR X0, [X0 + 0x5B0]
	0x03BB67A4 BL 0x1C16D08

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x82D000
	006 Move X20, 0x53E000
	007 Move W8, [X21+3318]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {25}
	014 Move X0, 0x53E000
	015 Move X0, [X0+2600]
	016 Call 0x1C17CF4
	017 Move X0, 0x53E000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move X0, 0x5A8000
	021 Move X0, [X0+208]
	022 Call 0x1C17CF4
	023 Move W8, 1
	024 Move [X21+3318], W8
	025 Call XRAngleGazeEvaluator.GetXROriginCamera
	026 Move X8, [X20]
	027 Move X20, X0
	028 Move W9, [X8+224]
	029 Compare W9, 0
	030 JumpIfNotEqual {33}
	031 Move X0, X8
	032 Call 0x1C17DFC
	033 Move X0, X20
	034 Move X1, X31
	035 Move X2, X31
	036 Call Object.op_Inequality, X0, X1
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {70}
	041 Compare X20, 0
	042 JumpIfEqual {89}
	043 Move X0, X20
	044 Move X1, X31
	045 Call Behaviour.get_enabled, X0
	046 Move TEMP, X0
	047 And TEMP, TEMP, 1
	048 Compare TEMP, 1
	049 JumpIfNotEqual {70}
	050 Move X0, X20
	051 Move X1, X31
	052 Call Component.get_gameObject, X0
	053 Compare X0, 0
	054 JumpIfEqual {89}
	055 Move X1, X31
	056 Call GameObject.get_activeInHierarchy, X0
	057 Move TEMP, X0
	058 And TEMP, TEMP, 1
	059 Compare TEMP, 1
	060 JumpIfNotEqual {70}
	061 Move X0, X20
	062 Move X1, X31
	063 Call Component.get_transform, X0
	064 Move [X19+48], X0
	065 Move X20, [X31+16]
	066 Move X19, [X31+24]
	067 Move X30, [X31+32]
	068 Move X21, [X31+40]
	069 Return 
	070 Move X8, 0x53E000
	071 Move X8, [X8+2600]
	072 Move X20, 0x5A8000
	073 Move X19, [X19+16]
	074 Move X0, [X8]
	075 Move W8, [X0+224]
	076 Move X20, [X20+208]
	077 Compare W8, 0
	078 JumpIfNotEqual {80}
	079 Call 0x1C17DFC
	080 Move X0, [X20]
	081 Move X1, X19
	082 Move X20, [X31+16]
	083 Move X19, [X31+24]
	084 Move X2, X31
	085 Move X30, [X31+32]
	086 Move X21, [X31+40]
	087 Call Debug.LogWarning, X0, X1
	088 Return 
	089 Call 0x1C17F20

Method: System.Void OnEnable()

Disassembly:
	0x03BB67A8 BL 0x1C16F10
	0x03BB67AC MOV X1, X19
	0x03BB67B0 MOV X2, X31
	0x03BB67B4 MOV X20, X0
	0x03BB67B8 BL 0x337DF1C
	0x03BB67BC ADRP X0, 0x5A7000
	0x03BB67C0 LDR X0, [X0 + 0x108]
	0x03BB67C4 BL 0x1C16D08
	0x03BB67C8 MOV X1, X0
	0x03BB67CC MOV X0, X20
	0x03BB67D0 BL 0x1C16DEC
	0x03BB67D4 STP X30, X21, [X31 - 0x20]!
	0x03BB67D8 STP X20, X19, [X31 + 0x10]
	0x03BB67DC ADRP X21, 0x82C000
	0x03BB67E0 ADRP X20, 0x53D000
	0x03BB67E4 LDRB W8, [X21 + 0xD03]
	0x03BB67E8 LDR X20, [X20 + 0x598]
	0x03BB67EC MOV X19, X0
	0x03BB67F0 TBNZ X8, 0x0, 0x3BB6808
	0x03BB67F4 ADRP X0, 0x53D000
	0x03BB67F8 LDR X0, [X0 + 0x598]
	0x03BB67FC BL 0x1C16CF4
	0x03BB6800 MOVZ W8, 0x1
	0x03BB6804 STRB W8, [X21 + 0xD03]
	0x03BB6808 LDR X0, [X20]
	0x03BB680C LDR X19, [X19 + 0x10]
	0x03BB6810 LDR W8, [X0 + 0xE0]
	0x03BB6814 CBNZ W8, 0x3BB681C
	0x03BB6818 BL 0x1C16DFC
	0x03BB681C MOV X0, X19

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x82D000
	006 Move X20, 0x53E000
	007 Move W8, [X21+3319]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x53E000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+3319], W8
	019 Move X0, [X20]
	020 Move X20, [X19+48]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Equality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {40}
	033 Move X0, X19
	034 Move X20, [X31+16]
	035 Move X19, [X31+24]
	036 Move X30, [X31+32]
	037 Move X21, [X31+40]
	038 Call XRAngleGazeEvaluator.InitializeGazeTransform, X0
	039 Return 
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Return 

Method: System.Void Reset()

Disassembly:
	0x03BB6824 MOV X1, X31

ISIL:
	001 Call XRAngleGazeEvaluator.InitializeGazeTransform, X0
	002 Return 

Method: System.Single CalculateNormalizedScore(UnityEngine.XR.Interaction.Toolkit.IXRInteractor interactor, UnityEngine.XR.Interaction.Toolkit.IXRInteractable target)

Disassembly:
	0x03BB682C LDP X30, X21, [X31], #0x20
	0x03BB6830 B 0x3C3883C
	0x03BB6834 STP X30, X19, [X31 - 0x10]!
	0x03BB6838 LDRB W8, [X0 + 0x29]
	0x03BB683C CBNZ W8, 0x3BB684C
	0x03BB6840 MOV X19, X0
	0x03BB6844 BL 0x3BB67D4
	0x03BB6848 TBZ X0, 0x0, 0x3BB6854
	0x03BB684C LDP X30, X19, [X31], #0x10
	0x03BB6850 RET
	0x03BB6854 LDR X8, [X19]
	0x03BB6858 MOVZ W9, 0x1
	0x03BB685C STRB W9, [X19 + 0x29]
	0x03BB6860 MOV X0, X19
	0x03BB6864 LDP X2, X1, [X8 + 0x1A8]
	0x03BB6868 LDP X30, X19, [X31], #0x10
	0x03BB686C BR X2
	0x03BB6870 LDRB W8, [X0 + 0x29]
	0x03BB6874 CBZ W8, 0x3BB6888
	0x03BB6878 LDR X8, [X0]
	0x03BB687C STRB W31, [X0 + 0x29]
	0x03BB6880 LDP X2, X1, [X8 + 0x1B8]
	0x03BB6884 BR X2
	0x03BB6888 RET
	0x03BB688C LDR X0, [X0 + 0x20]
	0x03BB6890 RET
	0x03BB6894 STR X1, [X0 + 0x20]
	0x03BB6898 RET
	0x03BB689C STP X30, X19, [X31 - 0x10]!
	0x03BB68A0 LDRB W8, [X0 + 0x2A]
	0x03BB68A4 CBNZ W8, 0x3BB68B4
	0x03BB68A8 MOV X19, X0
	0x03BB68AC BL 0x3BB67D4
	0x03BB68B0 TBZ X0, 0x0, 0x3BB68BC
	0x03BB68B4 LDP X30, X19, [X31], #0x10
	0x03BB68B8 RET
	0x03BB68BC LDR X0, [X19 + 0x10]
	0x03BB68C0 MOVZ W8, 0x1
	0x03BB68C4 STRB W8, [X19 + 0x2A]
	0x03BB68C8 CBZ X0, 0x3BB68D8
	0x03BB68CC MOV X1, X19
	0x03BB68D0 LDP X30, X19, [X31], #0x10
	0x03BB68D4 B 0x3BB68DC
	0x03BB68D8 BL 0x1C16F20
	0x03BB68DC SUB X31, X31, 0x50
	0x03BB68E0 STP X30, X23, [X31 + 0x20]
	0x03BB68E4 STP X22, X21, [X31 + 0x30]
	0x03BB68E8 STP X20, X19, [X31 + 0x40]
	0x03BB68EC ADRP X21, 0x82C000
	0x03BB68F0 ADRP X22, 0x5A7000
	0x03BB68F4 LDRB W8, [X21 + 0xD10]
	0x03BB68F8 LDR X22, [X22 + 0x110]
	0x03BB68FC MOV X19, X1
	0x03BB6900 MOV X20, X0
	0x03BB6904 TBNZ X8, 0x0, 0x3BB6958
	0x03BB6908 ADRP X0, 0x5A7000
	0x03BB690C LDR X0, [X0 + 0x118]
	0x03BB6910 BL 0x1C16CF4
	0x03BB6914 ADRP X0, 0x5A5000
	0x03BB6918 LDR X0, [X0 + 0x670]
	0x03BB691C BL 0x1C16CF4
	0x03BB6920 ADRP X0, 0x5A5000
	0x03BB6924 LDR X0, [X0 + 0x680]
	0x03BB6928 BL 0x1C16CF4
	0x03BB692C ADRP X0, 0x5A5000
	0x03BB6930 LDR X0, [X0 + 0x690]
	0x03BB6934 BL 0x1C16CF4
	0x03BB6938 ADRP X0, 0x5A7000
	0x03BB693C LDR X0, [X0 + 0x110]
	0x03BB6940 BL 0x1C16CF4
	0x03BB6944 ADRP X0, 0x5A5000
	0x03BB6948 LDR X0, [X0 + 0x6A8]
	0x03BB694C BL 0x1C16CF4
	0x03BB6950 MOVZ W8, 0x1
	0x03BB6954 STRB W8, [X21 + 0xD10]
	0x03BB6958 LDR X1, [X22]
	0x03BB695C MOV X0, X19
	0x03BB6960 STP X31, X31, [X31 + 0x8]
	0x03BB6964 STR X31, [X31 + 0x18]
	0x03BB6968 BL 0x1C16E00
	0x03BB696C CBZ X0, 0x3BB6B1C
	0x03BB6970 ADRP X23, 0x5A7000
	0x03BB6974 LDR X23, [X23 + 0x118]
	0x03BB6978 MOV X19, X0
	0x03BB697C LDR X0, [X23]
	0x03BB6980 BL 0x1C16F10
	0x03BB6984 LDR X8, [X19]
	0x03BB6988 LDR X1, [X22]
	0x03BB698C MOV X21, X0
	0x03BB6990 LDRH W9, [X8 + 0x12E]
	0x03BB6994 CBZ X9, 0x3BB69B8
	0x03BB6998 LDR X10, [X8 + 0xB0]
	0x03BB699C ADD X10, X10, 0x8
	0x03BB69A0 LDUR X11, [X10 - 0x8]
	0x03BB69A4 CMP X11, X1
	0x03BB69A8 B.EQ 0x3BB69C8
	0x03BB69AC SUBS X9, X9, 0x1
	0x03BB69B0 ADD X10, X10, 0x10
	0x03BB69B4 B.NE 0x3BB69A0
	0x03BB69B8 MOV X0, X19
	0x03BB69BC MOV W2, W31
	0x03BB69C0 BL 0x1C5C788
	0x03BB69C4 B 0x3BB69D4
	0x03BB69C8 LDRSW X9, [X10]
	0x03BB69CC ADD X8, X8, X9, 0x4, LSL
	0x03BB69D0 ADD X0, X8, 0x138
	0x03BB69D4 LDR X2, [X0 + 0x8]
	0x03BB69D8 MOV X0, X21
	0x03BB69DC MOV X1, X19
	0x03BB69E0 MOV X3, X31
	0x03BB69E4 BL 0x2A6B948
	0x03BB69E8 MOV X0, X20
	0x03BB69EC MOV X1, X21
	0x03BB69F0 BL 0x3BB7214
	0x03BB69F4 LDR X0, [X23]
	0x03BB69F8 BL 0x1C16F10
	0x03BB69FC LDR X8, [X19]
	0x03BB6A00 LDR X1, [X22]
	0x03BB6A04 MOV X21, X0
	0x03BB6A08 LDRH W9, [X8 + 0x12E]
	0x03BB6A0C CBZ X9, 0x3BB6A30
	0x03BB6A10 LDR X10, [X8 + 0xB0]
	0x03BB6A14 ADD X10, X10, 0x8
	0x03BB6A18 LDUR X11, [X10 - 0x8]
	0x03BB6A1C CMP X11, X1
	0x03BB6A20 B.EQ 0x3BB6A40
	0x03BB6A24 SUBS X9, X9, 0x1
	0x03BB6A28 ADD X10, X10, 0x10
	0x03BB6A2C B.NE 0x3BB6A18
	0x03BB6A30 MOVZ W2, 0x1
	0x03BB6A34 MOV X0, X19
	0x03BB6A38 BL 0x1C5C788
	0x03BB6A3C B 0x3BB6A50
	0x03BB6A40 LDR W9, [X10]
	0x03BB6A44 ADD W9, W9, 0x1
	0x03BB6A48 ADD X8, X8, W9, 0x4, SXTW
	0x03BB6A4C ADD X0, X8, 0x138
	0x03BB6A50 LDR X2, [X0 + 0x8]
	0x03BB6A54 MOV X0, X21
	0x03BB6A58 MOV X1, X19
	0x03BB6A5C MOV X3, X31
	0x03BB6A60 BL 0x2A6B948
	0x03BB6A64 MOV X0, X20
	0x03BB6A68 MOV X1, X21
	0x03BB6A6C BL 0x3BB7374
	0x03BB6A70 LDR X0, [X20 + 0x20]
	0x03BB6A74 CBZ X0, 0x3BB6B30
	0x03BB6A78 ADRP X8, 0x5A5000
	0x03BB6A7C LDR X8, [X8 + 0x6A8]
	0x03BB6A80 ADRP X23, 0x5A5000
	0x03BB6A84 ADRP X21, 0x5A5000
	0x03BB6A88 LDR X1, [X8]
	0x03BB6A8C LDR X23, [X23 + 0x680]
	0x03BB6A90 LDR X21, [X21 + 0x670]
	0x03BB6A94 ADD X8, X31, 0x8
	0x03BB6A98 BL 0x301CB58
	0x03BB6A9C LDR X1, [X23]
	0x03BB6AA0 ADD X0, X31, 0x8
	0x03BB6AA4 BL 0x2BC4350
	0x03BB6AA8 TBZ X0, 0x0, 0x3BB6B10
	0x03BB6AAC LDR X8, [X19]
	0x03BB6AB0 LDR X20, [X31 + 0x18]
	0x03BB6AB4 LDR X1, [X22]
	0x03BB6AB8 LDRH W9, [X8 + 0x12E]
	0x03BB6ABC CBZ X9, 0x3BB6AE0
	0x03BB6AC0 LDR X10, [X8 + 0xB0]
	0x03BB6AC4 ADD X10, X10, 0x8
	0x03BB6AC8 LDUR X11, [X10 - 0x8]
	0x03BB6ACC CMP X11, X1
	0x03BB6AD0 B.EQ 0x3BB6AF0
	0x03BB6AD4 SUBS X9, X9, 0x1
	0x03BB6AD8 ADD X10, X10, 0x10
	0x03BB6ADC B.NE 0x3BB6AC8
	0x03BB6AE0 MOV X0, X19
	0x03BB6AE4 MOV W2, W31
	0x03BB6AE8 BL 0x1C5C788
	0x03BB6AEC B 0x3BB6AFC
	0x03BB6AF0 LDRSW X9, [X10]
	0x03BB6AF4 ADD X8, X8, X9, 0x4, LSL
	0x03BB6AF8 ADD X0, X8, 0x138
	0x03BB6AFC LDP X8, X2, [X0]
	0x03BB6B00 MOV X0, X19
	0x03BB6B04 MOV X1, X20
	0x03BB6B08 BLR X8
	0x03BB6B0C B 0x3BB6A9C
	0x03BB6B10 LDR X1, [X21]
	0x03BB6B14 ADD X0, X31, 0x8
	0x03BB6B18 BL 0x2BC434C
	0x03BB6B1C LDP X20, X19, [X31 + 0x40]
	0x03BB6B20 LDP X22, X21, [X31 + 0x30]
	0x03BB6B24 LDP X30, X23, [X31 + 0x20]

ISIL:
	001 Subtract X31, X31, 144
	002 Move [X31+32], D15
	003 Move [X31+40], D14
	004 Move [X31+48], D13
	005 Move [X31+56], D12
	006 Move [X31+64], D11
	007 Move [X31+72], D10
	008 Move [X31+80], D9
	009 Move [X31+88], D8
	010 Move [X31+96], X30
	011 Move [X31+112], X22
	012 Move [X31+120], X21
	013 Move [X31+128], X20
	014 Move [X31+136], X19
	015 Move X20, 0x82D000
	016 Move X22, 0x53E000
	017 Move W8, [X20+3320]
	018 Move X22, [X22+1432]
	019 Move X21, X2
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {36}
	025 Move X0, 0x5A5000
	026 Move X0, [X0+2264]
	027 Call 0x1C17CF4
	028 Move X0, 0x53E000
	029 Move X0, [X0+1432]
	030 Call 0x1C17CF4
	031 Move X0, 0x5A5000
	032 Move X0, [X0+1080]
	033 Call 0x1C17CF4
	034 Move W8, 1
	035 Move [X20+3320], W8
	036 Move X0, [X22]
	037 Move X20, [X19+48]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Move X2, X31
	045 Call Object.op_Equality, X0, X1
	046 Move S8, W31
	047 Move TEMP, X0
	048 And TEMP, TEMP, 1
	049 Compare TEMP, 1
	050 JumpIfEqual {200}
	051 Move V0, [X19+56]
	052 NotImplemented "Instruction FCMP not yet implemented."
	053 Compare X21, 0
	054 JumpIfEqual {216}
	055 Move X8, 0x5A5000
	056 Move X8, [X8+1080]
	057 Move X9, [X21]
	058 Move X8, [X8]
	059 Move W11, [X9+304]
	060 Move W10, [X8+304]
	061 NotImplemented "Instruction CMP not yet implemented."
	062 Move X9, [X9+200]
	063 Add X9, X9, X10
	064 NotImplemented "Instruction LDUR not yet implemented."
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X10, 0x5A5000
	067 Move X8, [X21]
	068 Move X10, [X10+2264]
	069 NotImplemented "Instruction LDRH not yet implemented."
	070 Move X1, [X10]
	071 Compare X9, 0
	072 JumpIfEqual {79}
	073 Move X10, [X8+176]
	074 Add X10, X10, 8
	075 NotImplemented "Instruction LDUR not yet implemented."
	076 NotImplemented "Instruction CMP not yet implemented."
	077 Subtract X9, X9, 1
	078 Add X10, X10, 16
	079 Move W2, 6
	080 Move X0, X21
	081 Call 0x1C5D788
	082 Move W9, [X10]
	083 Add W9, W9, 6
	084 Add X8, X8, W9
	085 Add X0, X8, 312
	086 Move X8, [X0]
	087 Move X1, [X0+8]
	088 Move X0, X21
	089 NotImplemented "Instruction BLR not yet implemented."
	090 Move X8, [X22]
	091 Move X21, X0
	092 Move W9, [X8+224]
	093 Compare W9, 0
	094 JumpIfNotEqual {97}
	095 Move X0, X8
	096 Call 0x1C17DFC
	097 Move X0, X21
	098 Move X1, X31
	099 Move X2, X31
	100 Call Object.op_Equality, X0, X1
	101 Move TEMP, X0
	102 And TEMP, TEMP, 1
	103 Compare TEMP, 1
	104 JumpIfEqual {200}
	105 Compare X21, 0
	106 JumpIfEqual {216}
	107 Move X0, X21
	108 Move X1, X31
	109 Call Transform.get_position, X0
	110 Compare X20, 0
	111 JumpIfEqual {216}
	112 Move V8, V0
	113 Move V9, V1
	114 Move V10, V2
	115 Compare X20, 0
	116 JumpIfEqual {216}
	117 Move X0, X20
	118 Move X1, X31
	119 Call Transform.get_position, X0
	120 Move X8, [X21]
	121 Move X0, X21
	122 Move X9, [X8+1480]
	123 Move X1, [X8+1488]
	124 Add X8, X31, 8
	125 NotImplemented "Instruction BLR not yet implemented."
	126 Move S8, [X31+8]
	127 Move S9, [X31+12]
	128 Move V10, [X31+16]
	129 Move X0, X20
	130 Move X1, X31
	131 Call Transform.get_position, X0
	132 Move X0, X20
	133 Move X1, X31
	134 Subtract S12, S8, S0
	135 Subtract S13, S9, S1
	136 Subtract S11, S10, S2
	137 Call Transform.get_forward, X0
	138 Move X20, 0x823000
	139 Move W8, [X20+2596]
	140 Move V8, V0
	141 Move V9, V1
	142 Move V10, V2
	143 Compare W8, 0
	144 JumpIfNotEqual {150}
	145 Move X0, 0x53E000
	146 Move X0, [X0+1448]
	147 Call 0x1C17CF4
	148 Move W8, 1
	149 Move [X20+2596], W8
	150 Move X20, 0x53E000
	151 Move X20, [X20+1448]
	152 Multiply S0, S12, S12
	153 Multiply S1, S13, S13
	154 Add S0, S0, S1
	155 Move X0, [X20]
	156 Multiply S1, S11, S11
	157 Add S14, S1, S0
	158 Multiply S0, S8, S8
	159 Move W8, [X0+224]
	160 Multiply S1, S9, S9
	161 Add S0, S0, S1
	162 Multiply S1, S10, S10
	163 Add S15, S1, S0
	164 Compare W8, 0
	165 JumpIfNotEqual {167}
	166 Call 0x1C17DFC
	167 Move X8, -51167232
	168 Move V1, [X8+4072]
	169 Multiply S0, S14, S15
	170 NotImplemented "Instruction FSQRT not yet implemented."
	171 NotImplemented "Instruction FCMP not yet implemented."
	172 Move S1, W31
	173 Move X0, [X20]
	174 Multiply S1, S12, S8
	175 Multiply S2, S13, S9
	176 Multiply S3, S11, S10
	177 Add S1, S1, S2
	178 Add S1, S3, S1
	179 Move W8, [X0+224]
	180 NotImplemented "Instruction FDIV not yet implemented."
	181 Move S1, 1
	182 Move S2, -1
	183 NotImplemented "Instruction FMIN not yet implemented."
	184 NotImplemented "Instruction FCMP not yet implemented."
	185 NotImplemented "Instruction FCSEL not yet implemented."
	186 Compare W8, 0
	187 JumpIfNotEqual {189}
	188 Call 0x1C17DFC
	189 NotImplemented "Instruction FCVT not yet implemented."
	190 Call 0x3EB2B80
	191 Move X8, -51163136
	192 Move V1, [X8+1096]
	193 NotImplemented "Instruction INVALID not yet implemented."
	194 Multiply S0, S0, S1
	195 Add S1, S0, S0
	196 Move V0, [X19+56]
	197 NotImplemented "Instruction FDIV not yet implemented."
	198 Move S1, 1
	199 Subtract S8, S1, S0
	200 Move V0, V8
	201 Move X20, [X31+128]
	202 Move X19, [X31+136]
	203 Move X22, [X31+112]
	204 Move X21, [X31+120]
	205 Move X30, [X31+96]
	206 Move D9, [X31+80]
	207 Move D8, [X31+88]
	208 Move D11, [X31+64]
	209 Move D10, [X31+72]
	210 Move D13, [X31+48]
	211 Move D12, [X31+56]
	212 Move D15, [X31+32]
	213 Move D14, [X31+40]
	214 Add X31, X31, 144
	215 Return V0
	216 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03BB6B28 ADD X31, X31, 0x50
	0x03BB6B2C RET
	0x03BB6B30 BL 0x1C16F20
	0x03BB6B34 B 0x3BB6B38
	0x03BB6B38 MOV X20, X0
	0x03BB6B3C CMP W1, 0x1

ISIL:
	001 Move W8, 0x42700000
	002 Move W9, 1
	003 Move X1, X31
	004 Move [X0+56], W8
	005 Move [X0+24], W9
	006 Call Object..ctor, X0
	007 Return 

