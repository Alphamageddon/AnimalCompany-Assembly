Type: UnityEngine.XR.Interaction.Toolkit.XRInteractorReticleVisual

Method: System.Single get_maxRaycastDistance()

Disassembly:
	0x03B4E548 MOV W24, W31
	0x03B4E54C CMP W24, W8

ISIL:
	001 Move V0, [X0+32]
	002 Return V0

Method: System.Void set_maxRaycastDistance(System.Single value)

Disassembly:
	0x03B4E550 B.CS 0x3B4E584
	0x03B4E554 MOVZ W8, 0x2C

ISIL:
	001 Move [X0+32], S0
	002 Return 

Method: UnityEngine.GameObject get_reticlePrefab()

Disassembly:
	0x03B4E558 SMADDL X8, X24, X8, X20
	0x03B4E55C LDUR V0, [X8 + 0x3C]

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_reticlePrefab(UnityEngine.GameObject value)

Disassembly:
	0x03B4E560 LDP V2, V1, [X8 + 0x20]
	0x03B4E564 LDP X22, X21, [X31 + 0x20]

ISIL:
	001 Move [X0+40], X1

Method: System.Single get_prefabScalingFactor()

Disassembly:
	0x03B4E650 MOV X4, X31
	0x03B4E654 BL 0x3C8C4DC

ISIL:
	001 Move V0, [X0+48]
	002 Return V0

Method: System.Void set_prefabScalingFactor(System.Single value)

Disassembly:
	0x03B4E658 MOV W22, W0
	0x03B4E65C CBZ W0, 0x3B4E698

ISIL:
	001 Move [X0+48], S0
	002 Return 

Method: System.Boolean get_undoDistanceScaling()

Disassembly:
	0x03B4E660 LDR X0, [X21 + 0x90]
	0x03B4E664 ADD X8, X31, 0x0

ISIL:
	001 Move W0, [X0+52]
	002 Return X0

Method: System.Void set_undoDistanceScaling(System.Boolean value)

Disassembly:
	0x03B4E668 MOV W1, W22
	0x03B4E66C BL 0x3B4E4B0
	0x03B4E670 ADD X0, X31, 0x0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+52], W8
	003 Return 

Method: System.Boolean get_alignPrefabWithSurfaceNormal()

Disassembly:
	0x03B4E674 MOV X1, X31
	0x03B4E678 BL 0x3C8E66C

ISIL:
	001 Move W0, [X0+53]
	002 Return X0

Method: System.Void set_alignPrefabWithSurfaceNormal(System.Boolean value)

Disassembly:
	0x03B4E67C ADD X0, X31, 0x0
	0x03B4E680 MOV X1, X31
	0x03B4E684 STP S0, S1, [X20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+53], W8
	003 Return 

Method: System.Single get_endpointSmoothingTime()

Disassembly:
	0x03B4E688 STR S2, [X20 + 0x8]
	0x03B4E68C BL 0x3C8E678

ISIL:
	001 Move V0, [X0+56]
	002 Return V0

Method: System.Void set_endpointSmoothingTime(System.Single value)

Disassembly:
	0x03B4E690 STP S0, S1, [X19]
	0x03B4E694 STR S2, [X19 + 0x8]

ISIL:
	001 Move [X0+56], S0
	002 Return 

Method: System.Boolean get_drawWhileSelecting()

Disassembly:
	0x03B4E698 CMP W22, 0x0
	0x03B4E69C LDP X20, X19, [X31 + 0x90]

ISIL:
	001 Move W0, [X0+60]
	002 Return X0

Method: System.Void set_drawWhileSelecting(System.Boolean value)

Disassembly:
	0x03B4E6A0 LDP X22, X21, [X31 + 0x80]
	0x03B4E6A4 LDP X30, X23, [X31 + 0x70]
	0x03B4E6A8 LDP D9, D8, [X31 + 0x60]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+60], W8
	003 Return 

Method: System.Boolean get_drawOnNoHit()

Disassembly:
	0x03B4E6AC LDP D11, D10, [X31 + 0x50]
	0x03B4E6B0 LDP D13, D12, [X31 + 0x40]

ISIL:
	001 Move W0, [X0+61]
	002 Return X0

Method: System.Void set_drawOnNoHit(System.Boolean value)

Disassembly:
	0x03B4E6B4 LDR V14, [X31 + 0x30]
	0x03B4E6B8 CSET W0, NE
	0x03B4E6BC ADD X31, X31, 0xA0

ISIL:
	001 And W8, W1, 1
	002 Move [X0+61], W8
	003 Return 

Method: UnityEngine.LayerMask get_raycastMask()

Disassembly:
	0x03B4E6C0 RET
	0x03B4E6C4 BL 0x1C16F20

ISIL:
	001 Move W0, [X0+64]
	002 Return X0

Method: System.Void set_raycastMask(UnityEngine.LayerMask value)

Disassembly:
	0x03B4E6C8 SUB X31, X31, 0x110
	0x03B4E6CC STR D8, [X31 + 0xC0]

ISIL:
	001 Move [X0+64], W1
	002 Return 

Method: System.Boolean get_reticleActive()

Disassembly:
	0x03B4E6D0 STP X29, X30, [X31 + 0xD0]
	0x03B4E6D4 STP X24, X23, [X31 + 0xE0]

ISIL:
	001 Move W0, [X0+68]
	002 Return X0

Method: System.Void set_reticleActive(System.Boolean value)

Disassembly:
	0x03B4E6D8 STP X22, X21, [X31 + 0xF0]
	0x03B4E6DC STP X20, X19, [X31 + 0x100]
	0x03B4E6E0 ADRP X22, 0x894000
	0x03B4E6E4 LDRB W8, [X22 + 0x98F]
	0x03B4E6E8 MOV X23, X3
	0x03B4E6EC MOV X21, X2
	0x03B4E6F0 MOV X20, X1
	0x03B4E6F4 MOV X19, X0
	0x03B4E6F8 TBNZ X8, 0x0, 0x3B4E734
	0x03B4E6FC ADRP X0, 0x60C000
	0x03B4E700 LDR X0, [X0 + 0xB08]
	0x03B4E704 BL 0x1C16CF4
	0x03B4E708 ADRP X0, 0x60C000
	0x03B4E70C LDR X0, [X0 + 0xB10]
	0x03B4E710 BL 0x1C16CF4
	0x03B4E714 ADRP X0, 0x60C000
	0x03B4E718 LDR X0, [X0 + 0x9E8]
	0x03B4E71C BL 0x1C16CF4
	0x03B4E720 ADRP X0, 0x60C000
	0x03B4E724 LDR X0, [X0 + 0x7C0]
	0x03B4E728 BL 0x1C16CF4
	0x03B4E72C MOVZ W8, 0x1
	0x03B4E730 STRB W8, [X22 + 0x98F]
	0x03B4E734 STR W31, [X31 + 0xB8]
	0x03B4E738 STR X31, [X31 + 0xB0]
	0x03B4E73C STR W31, [X31 + 0xA8]
	0x03B4E740 STR X31, [X31 + 0xA0]
	0x03B4E744 STR W31, [X31 + 0x98]
	0x03B4E748 STR X31, [X31 + 0x90]
	0x03B4E74C STR W31, [X31 + 0x88]
	0x03B4E750 STR X31, [X31 + 0x80]
	0x03B4E754 STR W31, [X31 + 0x78]
	0x03B4E758 STR X31, [X31 + 0x70]
	0x03B4E75C STR W31, [X31 + 0x68]
	0x03B4E760 STR X31, [X31 + 0x60]
	0x03B4E764 STR W31, [X31 + 0x58]
	0x03B4E768 STR X31, [X31 + 0x50]
	0x03B4E76C STR W31, [X31 + 0x48]
	0x03B4E770 STR X31, [X31 + 0x40]
	0x03B4E774 LDR X8, [X19 + 0x3A0]

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X23, 0x895000
	008 Move X21, 0x5A6000
	009 Move W8, [X23+2263]
	010 Move X21, [X21+1432]
	011 Move W19, W1
	012 Move X20, X0
	013 And W22, W1, 1
	014 Move TEMP, X8
	015 And TEMP, TEMP, 1
	016 Compare TEMP, 1
	017 JumpIfEqual {23}
	018 Move X0, 0x5A6000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move W8, 1
	022 Move [X23+2263], W8
	023 Move [X20+68], W22
	024 Move X0, [X21]
	025 Move X21, [X20+96]
	026 Move W8, [X0+224]
	027 Compare W8, 0
	028 JumpIfNotEqual {30}
	029 Call 0x1C17DFC
	030 Move X0, X21
	031 Move X1, X31
	032 Move X2, X31
	033 Call Object.op_Inequality, X0, X1
	034 Move TEMP, X0
	035 And TEMP, TEMP, 1
	036 Compare TEMP, 1
	037 JumpIfNotEqual {51}
	038 Move X0, [X20+96]
	039 Compare X0, 0
	040 JumpIfEqual {58}
	041 And W1, W19, 1
	042 Move X20, [X31+32]
	043 Move X19, [X31+40]
	044 Move X22, [X31+16]
	045 Move X21, [X31+24]
	046 Move X2, X31
	047 Move X30, [X31+48]
	048 Move X23, [X31+56]
	049 Call GameObject.SetActive, X0, X1
	050 Return 
	051 Move X20, [X31+32]
	052 Move X19, [X31+40]
	053 Move X22, [X31+16]
	054 Move X21, [X31+24]
	055 Move X30, [X31+48]
	056 Move X23, [X31+56]
	057 Return 
	058 Call 0x1C17F20

Method: System.Void Awake()

Disassembly:
	0x03B4E778 CBZ X8, 0x3B4E814
	0x03B4E77C LDR W22, [X8 + 0x18]
	0x03B4E780 CMP W22, 0x1
	0x03B4E784 B.LE 0x3B4E814
	0x03B4E788 LDRB W8, [X19 + 0x294]
	0x03B4E78C CBZ W8, 0x3B4E820
	0x03B4E790 MOV X0, X19
	0x03B4E794 BL 0x3B5F8B8
	0x03B4E798 LDR X8, [X19 + 0x3A0]
	0x03B4E79C CBZ X8, 0x3B4EB28
	0x03B4E7A0 ADRP X24, 0x60C000
	0x03B4E7A4 LDR X24, [X24 + 0x7C0]
	0x03B4E7A8 LDR W22, [X8 + 0x18]
	0x03B4E7AC LDR X0, [X24]
	0x03B4E7B0 LDR W9, [X0 + 0xE0]
	0x03B4E7B4 CBNZ W9, 0x3B4E7C0
	0x03B4E7B8 BL 0x1C16DFC
	0x03B4E7BC LDR X0, [X24]
	0x03B4E7C0 LDR X8, [X0 + 0xB8]
	0x03B4E7C4 LDUR V0, [X23 + 0xC]
	0x03B4E7C8 LDR V1, [X23]
	0x03B4E7CC ADD X3, X31, 0x20
	0x03B4E7D0 LDR X2, [X8 + 0x18]
	0x03B4E7D4 MOV X0, X19
	0x03B4E7D8 MOV W1, W22
	0x03B4E7DC STUR V0, [X31 + 0x2C]
	0x03B4E7E0 STR V1, [X31 + 0x2]
	0x03B4E7E4 BL 0x3B60C54
	0x03B4E7E8 LDR W8, [X19 + 0x290]
	0x03B4E7EC CBZ W8, 0x3B4E8A8
	0x03B4E7F0 LDR W8, [X19 + 0x3AC]
	0x03B4E7F4 LDR W22, [X19 + 0x3B0]
	0x03B4E7F8 CMP W8, 0x1
	0x03B4E7FC B.LT 0x3B4E93C
	0x03B4E800 CMP W22, 0x1
	0x03B4E804 B.LT 0x3B4E938
	0x03B4E808 CMP W8, W22
	0x03B4E80C CSEL W22, W8, W22, LT
	0x03B4E810 B 0x3B4E93C
	0x03B4E814 MOV W0, W31
	0x03B4E818 STR W31, [X21]
	0x03B4E81C B 0x3B4EBE0
	0x03B4E820 STR W22, [X21]
	0x03B4E824 ADRP X8, 0x60C000
	0x03B4E828 LDR X8, [X8 + 0x7C0]
	0x03B4E82C LDR X0, [X8]
	0x03B4E830 LDR W8, [X0 + 0xE0]
	0x03B4E834 CBNZ W8, 0x3B4E83C
	0x03B4E838 BL 0x1C16DFC
	0x03B4E83C MOV X0, X20
	0x03B4E840 MOV W1, W22
	0x03B4E844 BL 0x3B60BA4
	0x03B4E848 ADRP X8, 0x60C000
	0x03B4E84C LDR X8, [X8 + 0x9E8]
	0x03B4E850 MOV X0, X20
	0x03B4E854 LDR X1, [X8]
	0x03B4E858 BL 0x2133578
	0x03B4E85C LDR W8, [X21]
	0x03B4E860 CMP W8, 0x1
	0x03B4E864 B.LT 0x3B4EBDC
	0x03B4E868 ADRP X23, 0x60C000
	0x03B4E86C LDR X23, [X23 + 0xB10]
	0x03B4E870 MOV X20, X31
	0x03B4E874 ADD X22, X0, 0x8
	0x03B4E878 LDR X0, [X19 + 0x3A0]
	0x03B4E87C CBZ X0, 0x3B4EB28
	0x03B4E880 LDR X2, [X23]
	0x03B4E884 MOV W1, W20
	0x03B4E888 BL 0x317B51C

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x895000
	006 Move W8, [X20+2264]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {26}
	012 Move X0, 0x60D000
	013 Move X0, [X0+2800]
	014 Call 0x1C17CF4
	015 Move X0, 0x60D000
	016 Move X0, [X0+392]
	017 Call 0x1C17CF4
	018 Move X0, 0x60D000
	019 Move X0, [X0+432]
	020 Call 0x1C17CF4
	021 Move X0, 0x60D000
	022 Move X0, [X0+2808]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X20+2264], W8
	026 Move X0, X19
	027 Move X1, X31
	028 Call Component.get_gameObject, X0
	029 Compare X0, 0
	030 JumpIfEqual {83}
	031 Move X20, 0x60D000
	032 Move X20, [X20+2800]
	033 Move X1, X31
	034 Call GameObject.get_scene, X0
	035 And X0, X0, 0
	036 Move X1, X31
	037 Call PhysicsSceneExtensions.GetPhysicsScene, X0
	038 Move [X19+136], W0
	039 Move X2, [X20]
	040 Add X20, X19, 104
	041 Move X0, X19
	042 Move X1, X20
	043 Call 0x21A5990, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {71}
	048 Move X8, [X20]
	049 Compare X8, 0
	050 JumpIfEqual {83}
	051 Move X20, [X8+128]
	052 Move X8, 0x60D000
	053 Move X8, [X8+392]
	054 Move X0, [X8]
	055 Call 0x1C17F10
	056 Move X8, 0x60D000
	057 Move X8, [X8+2808]
	058 Move X1, X19
	059 Move X3, X31
	060 Move X21, X0
	061 Move X2, [X8]
	062 Call UnityAction`1<Object>..ctor, X0, X1, X2
	063 Compare X20, 0
	064 JumpIfEqual {83}
	065 Move X8, 0x60D000
	066 Move X8, [X8+432]
	067 Move X0, X20
	068 Move X1, X21
	069 Move X2, [X8]
	070 Call UnityEvent`1<Object>.AddListener, X0, X1
	071 Move X0, X19
	072 Call XRInteractorReticleVisual.FindXROrigin, X0
	073 Move X0, X19
	074 Call XRInteractorReticleVisual.SetupReticlePrefab, X0
	075 Move X0, X19
	076 Move X20, [X31+16]
	077 Move X19, [X31+24]
	078 Move W1, W31
	079 Move X30, [X31+32]
	080 Move X21, [X31+40]
	081 Call XRInteractorReticleVisual.set_reticleActive, X0, X1
	082 Return 
	083 Call 0x1C17F20

Method: System.Void OnDisable()

Disassembly:
	0x03B4E91C LDR W8, [X0 + 0x18]
	0x03B4E920 LDR X2, [X21]

ISIL:
	001 Move W1, W31
	002 Call XRInteractorReticleVisual.set_reticleActive, X0, X1
	003 Return 

Method: System.Void Update()

Disassembly:
	0x03B4E924 SUB W1, W8, 0x1
	0x03B4E928 BL 0x317B51C
	0x03B4E92C STP S0, S1, [X20 + 0xC]
	0x03B4E930 STR S2, [X20 + 0x14]
	0x03B4E934 B 0x3B4EBDC
	0x03B4E938 MOV W22, W8
	0x03B4E93C LDR X0, [X24]
	0x03B4E940 LDR W8, [X0 + 0xE0]
	0x03B4E944 CBNZ W8, 0x3B4E950
	0x03B4E948 BL 0x1C16DFC
	0x03B4E94C LDR X0, [X24]
	0x03B4E950 LDR X8, [X0 + 0xB8]
	0x03B4E954 LDR V0, [X23]
	0x03B4E958 LDUR V1, [X23 + 0xC]
	0x03B4E95C ADD X4, X31, 0x0
	0x03B4E960 LDP X1, X3, [X8 + 0x18]
	0x03B4E964 MOV X0, X19
	0x03B4E968 MOV W2, W22
	0x03B4E96C STUR V1, [X31 + 0xC]
	0x03B4E970 STR V0, [X31]
	0x03B4E974 BL 0x3B61138
	0x03B4E978 LDR X8, [X24]
	0x03B4E97C LDR X8, [X8 + 0xB8]
	0x03B4E980 LDR X8, [X8 + 0x20]
	0x03B4E984 CBZ X8, 0x3B4EB28
	0x03B4E988 LDR W9, [X8 + 0x18]
	0x03B4E98C CBZ W9, 0x3B4EBFC
	0x03B4E990 CMP W9, 0x1
	0x03B4E994 B.EQ 0x3B4EBFC
	0x03B4E998 CMP W9, 0x2
	0x03B4E99C B.LS 0x3B4EBFC
	0x03B4E9A0 ADD X0, X8, 0x20
	0x03B4E9A4 ADD X1, X8, 0x2C
	0x03B4E9A8 ADD X2, X8, 0x38
	0x03B4E9AC ADD X3, X31, 0xB0

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x895000
	006 Move X20, 0x5A6000
	007 Move W8, [X21+2265]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5A6000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2265], W8
	019 Move X0, [X20]
	020 Move X20, [X19+104]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {46}
	033 Move X0, X19
	034 Call XRInteractorReticleVisual.UpdateReticleTarget, X0
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {46}
	039 Move X0, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Call XRInteractorReticleVisual.ActivateReticleAtTarget, X0
	045 Return 
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W1, W31
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Call XRInteractorReticleVisual.set_reticleActive, X0, X1
	053 Return 

Method: System.Void OnDestroy()

Disassembly:
	0x03B4F390 ADRP X8, 0x5A4000
	0x03B4F394 LDR X8, [X8 + 0xA28]
	0x03B4F398 ADRP X20, 0x60B000
	0x03B4F39C LDR X0, [X8]
	0x03B4F3A0 LDR W8, [X0 + 0xE0]
	0x03B4F3A4 LDR X20, [X20 + 0xB38]
	0x03B4F3A8 CBNZ W8, 0x3B4F3B0
	0x03B4F3AC BL 0x1C16DFC
	0x03B4F3B0 LDR X0, [X20]
	0x03B4F3B4 MOV X1, X19
	0x03B4F3B8 LDP X20, X19, [X31 + 0x10]
	0x03B4F3BC MOV X2, X31
	0x03B4F3C0 LDP X30, X21, [X31], #0x20
	0x03B4F3C4 B 0x3C06B0C
	0x03B4F3C8 LDP X20, X19, [X31 + 0x10]
	0x03B4F3CC LDP X30, X21, [X31], #0x20
	0x03B4F3D0 RET
	0x03B4F3D4 BL 0x1C16F20
	0x03B4F3D8 STR X30, [X31 - 0x20]!
	0x03B4F3DC STP X20, X19, [X31 + 0x10]
	0x03B4F3E0 ADRP X20, 0x893000
	0x03B4F3E4 LDRB W8, [X20 + 0x8E3]
	0x03B4F3E8 MOV X19, X0
	0x03B4F3EC TBNZ X8, 0x0, 0x3B4F404
	0x03B4F3F0 ADRP X0, 0x60B000
	0x03B4F3F4 LDR X0, [X0 + 0xB40]
	0x03B4F3F8 BL 0x1C16CF4
	0x03B4F3FC MOVZ W8, 0x1
	0x03B4F400 STRB W8, [X20 + 0x8E3]
	0x03B4F404 MOV X0, X19
	0x03B4F408 MOV X1, X31
	0x03B4F40C BL 0x3C32ECC
	0x03B4F410 CBZ X0, 0x3B4F430
	0x03B4F414 ADRP X8, 0x60B000
	0x03B4F418 LDR X8, [X8 + 0xB40]
	0x03B4F41C LDP X20, X19, [X31 + 0x10]
	0x03B4F420 MOVZ W1, 0x1
	0x03B4F424 LDR X2, [X8]
	0x03B4F428 LDR X30, [X31], #0x20
	0x03B4F42C B 0x21E5A08
	0x03B4F430 BL 0x1C16F20
	0x03B4F434 STR X30, [X31 - 0x20]!
	0x03B4F438 STP X20, X19, [X31 + 0x10]
	0x03B4F43C ADRP X20, 0x893000
	0x03B4F440 LDRB W8, [X20 + 0x8F0]
	0x03B4F444 MOV X19, X0
	0x03B4F448 TBNZ X8, 0x0, 0x3B4F460
	0x03B4F44C ADRP X0, 0x5A9000
	0x03B4F450 LDR X0, [X0 + 0x640]
	0x03B4F454 BL 0x1C16CF4
	0x03B4F458 MOVZ W8, 0x1
	0x03B4F45C STRB W8, [X20 + 0x8F0]
	0x03B4F460 MOV X0, X19
	0x03B4F464 MOV X1, X31
	0x03B4F468 BL 0x3C32ECC
	0x03B4F46C CBZ X0, 0x3B4F4B0
	0x03B4F470 ADRP X8, 0x5A9000
	0x03B4F474 LDR X8, [X8 + 0x640]
	0x03B4F478 LDR X1, [X8]
	0x03B4F47C BL 0x21E51FC
	0x03B4F480 STR X0, [X19 + 0x280]
	0x03B4F484 CBZ X0, 0x3B4F4B0
	0x03B4F488 MOV W1, W31
	0x03B4F48C MOV X2, X31
	0x03B4F490 BL 0x3BFCF88
	0x03B4F494 LDR X0, [X19 + 0x280]
	0x03B4F498 CBZ X0, 0x3B4F4B0
	0x03B4F49C LDP X20, X19, [X31 + 0x10]
	0x03B4F4A0 MOV W1, W31
	0x03B4F4A4 MOV X2, X31
	0x03B4F4A8 LDR X30, [X31], #0x20
	0x03B4F4AC B 0x3BFCFCC

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x894000
	006 Move W8, [X20+2266]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {32}
	012 Move X0, 0x5D0000
	013 Move X0, [X0+504]
	014 Call 0x1C17CF4
	015 Move X0, 0x60C000
	016 Move X0, [X0+2480]
	017 Call 0x1C17CF4
	018 Move X0, 0x5A5000
	019 Move X0, [X0+1432]
	020 Call 0x1C17CF4
	021 Move X0, 0x60C000
	022 Move X0, [X0+392]
	023 Call 0x1C17CF4
	024 Move X0, 0x60C000
	025 Move X0, [X0+496]
	026 Call 0x1C17CF4
	027 Move X0, 0x60C000
	028 Move X0, [X0+2808]
	029 Call 0x1C17CF4
	030 Move W8, 1
	031 Move [X20+2266], W8
	032 Move X0, X19
	033 Move X20, 0x5A5000
	034 Add X0, X0, 72
	035 Move X8, [X0]
	036 Move X20, [X20+1432]
	037 Compare X8, 0
	038 JumpIfEqual {43}
	039 Move X8, 0x5D0000
	040 Move X8, [X8+504]
	041 Move X1, [X8]
	042 Call NativeArray`1<Vector3>.Dispose, X0
	043 Move X0, [X20]
	044 Move X20, [X19+104]
	045 Move W8, [X0+224]
	046 Compare W8, 0
	047 JumpIfNotEqual {49}
	048 Call 0x1C17DFC
	049 Move X0, X20
	050 Move X1, X31
	051 Move X2, X31
	052 Call Object.op_Inequality, X0, X1
	053 Move TEMP, X0
	054 And TEMP, TEMP, 1
	055 Compare TEMP, 1
	056 JumpIfNotEqual {85}
	057 Move X8, [X19+104]
	058 Compare X8, 0
	059 JumpIfEqual {90}
	060 Move X20, [X8+128]
	061 Move X8, 0x60C000
	062 Move X8, [X8+392]
	063 Move X0, [X8]
	064 Call 0x1C17F10
	065 Move X8, 0x60C000
	066 Move X8, [X8+2808]
	067 Move X1, X19
	068 Move X3, X31
	069 Move X21, X0
	070 Move X2, [X8]
	071 Call UnityAction`1<Object>..ctor, X0, X1, X2
	072 Compare X20, 0
	073 JumpIfEqual {90}
	074 Move X8, 0x60C000
	075 Move X8, [X8+496]
	076 Move X0, X20
	077 Move X20, [X31+16]
	078 Move X19, [X31+24]
	079 Move X1, X21
	080 Move X2, [X8]
	081 Move X30, [X31+32]
	082 Move X21, [X31+40]
	083 Call UnityEvent`1<Object>.RemoveListener, X0, X1
	084 Return 
	085 Move X20, [X31+16]
	086 Move X19, [X31+24]
	087 Move X30, [X31+32]
	088 Move X21, [X31+40]
	089 Return 
	090 Call 0x1C17F20

Method: System.Void FindXROrigin()

Disassembly:
	0x03B4E88C STP S0, S1, [X22 - 0x8]
	0x03B4E890 STR S2, [X22], #0xC
	0x03B4E894 LDRSW X8, [X21]
	0x03B4E898 ADD X20, X20, 0x1
	0x03B4E89C CMP X20, X8
	0x03B4E8A0 B.LT 0x3B4E878
	0x03B4E8A4 B 0x3B4EBDC
	0x03B4E8A8 MOVZ W8, 0x2
	0x03B4E8AC STR W8, [X21]
	0x03B4E8B0 LDR X0, [X24]
	0x03B4E8B4 LDR W8, [X0 + 0xE0]
	0x03B4E8B8 CBNZ W8, 0x3B4E8C0
	0x03B4E8BC BL 0x1C16DFC
	0x03B4E8C0 MOVZ W1, 0x2
	0x03B4E8C4 MOV X0, X20
	0x03B4E8C8 BL 0x3B60BA4
	0x03B4E8CC ADRP X8, 0x60C000
	0x03B4E8D0 LDR X8, [X8 + 0x9E8]
	0x03B4E8D4 MOV X0, X20
	0x03B4E8D8 LDR X1, [X8]
	0x03B4E8DC BL 0x2133578
	0x03B4E8E0 LDR X8, [X24]
	0x03B4E8E4 LDR X8, [X8 + 0xB8]
	0x03B4E8E8 LDR X8, [X8 + 0x18]
	0x03B4E8EC CBZ X8, 0x3B4EB28
	0x03B4E8F0 ADRP X21, 0x60C000
	0x03B4E8F4 LDR X21, [X21 + 0xB10]
	0x03B4E8F8 MOV X20, X0
	0x03B4E8FC MOV X0, X8
	0x03B4E900 MOV W1, W31
	0x03B4E904 LDR X2, [X21]
	0x03B4E908 BL 0x317B51C
	0x03B4E90C STP S0, S1, [X20]
	0x03B4E910 STR S2, [X20 + 0x8]
	0x03B4E914 LDR X0, [X19 + 0x3A0]
	0x03B4E918 CBZ X0, 0x3B4EB28

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x895000
	006 Move X21, 0x5A6000
	007 Move W8, [X20+2267]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x60D000
	015 Move X0, [X0+2424]
	016 Call 0x1C17CF4
	017 Move X0, 0x5A6000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2267], W8
	022 Add X19, X19, 88
	023 Move X20, [X19]
	024 Move X0, [X21]
	025 Move W8, [X0+224]
	026 Compare W8, 0
	027 JumpIfNotEqual {29}
	028 Call 0x1C17DFC
	029 Move X0, X20
	030 Move X1, X31
	031 Move X2, X31
	032 Call Object.op_Equality, X0, X1
	033 Move TEMP, X0
	034 And TEMP, TEMP, 1
	035 Compare TEMP, 1
	036 JumpIfNotEqual {47}
	037 Move X8, 0x60D000
	038 Move X8, [X8+2424]
	039 Move X0, X19
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move X1, [X8]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Call 0x2960A30, X0
	046 Return 
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move X30, [X31+32]
	050 Move X21, [X31+40]
	051 Return 

Method: System.Void SetupReticlePrefab()

Disassembly:
	0x03B4E568 LDP X24, X23, [X31 + 0x10]
	0x03B4E56C STUR V0, [X19 + 0x1C]
	0x03B4E570 STP V2, V1, [X19]
	0x03B4E574 LDP X20, X19, [X31 + 0x30]
	0x03B4E578 LDR X30, [X31 + 0x8]
	0x03B4E57C LDR V8, [X31], #0x40
	0x03B4E580 RET
	0x03B4E584 BL 0x1C16F28
	0x03B4E588 BL 0x1C16F20
	0x03B4E58C SUB X31, X31, 0xA0
	0x03B4E590 STR D14, [X31 + 0x30]
	0x03B4E594 STP D13, D12, [X31 + 0x40]
	0x03B4E598 STP D11, D10, [X31 + 0x50]
	0x03B4E59C STP D9, D8, [X31 + 0x60]
	0x03B4E5A0 STP X30, X23, [X31 + 0x70]
	0x03B4E5A4 STP X22, X21, [X31 + 0x80]
	0x03B4E5A8 STP X20, X19, [X31 + 0x90]
	0x03B4E5AC MOVI V0.2D, 0x0
	0x03B4E5B0 STUR V0, [X31 + 0x1C]
	0x03B4E5B4 STP V0, V0, [X31]
	0x03B4E5B8 LDR X8, [X0 + 0x68]
	0x03B4E5BC CBZ X8, 0x3B4E6C4
	0x03B4E5C0 MOV X21, X0
	0x03B4E5C4 LDR X0, [X8 + 0x50]
	0x03B4E5C8 CBZ X0, 0x3B4E6C4
	0x03B4E5CC MOV X20, X1
	0x03B4E5D0 MOV X1, X31
	0x03B4E5D4 MOV X19, X2
	0x03B4E5D8 BL 0x3C3F58C
	0x03B4E5DC LDR X8, [X21 + 0x68]
	0x03B4E5E0 CBZ X8, 0x3B4E6C4
	0x03B4E5E4 LDR X0, [X8 + 0x50]
	0x03B4E5E8 CBZ X0, 0x3B4E6C4
	0x03B4E5EC MOV X1, X31
	0x03B4E5F0 MOV V8.16B, V0.16B
	0x03B4E5F4 MOV V9.16B, V1.16B
	0x03B4E5F8 MOV V10.16B, V2.16B
	0x03B4E5FC ADD X22, X21, 0x88
	0x03B4E600 BL 0x3C3FA04
	0x03B4E604 LDR W0, [X21 + 0x40]
	0x03B4E608 LDR X23, [X21 + 0x90]
	0x03B4E60C LDR V13, [X21 + 0x20]
	0x03B4E610 MOV X1, X31
	0x03B4E614 MOV V11.16B, V0.16B
	0x03B4E618 MOV V12.16B, V1.16B
	0x03B4E61C MOV V14.16B, V2.16B
	0x03B4E620 BL 0x3C35CB8
	0x03B4E624 MOV W2, W0
	0x03B4E628 MOV X0, X22
	0x03B4E62C MOV V0.16B, V8.16B
	0x03B4E630 MOV V1.16B, V9.16B
	0x03B4E634 MOV V2.16B, V10.16B
	0x03B4E638 MOV V3.16B, V11.16B
	0x03B4E63C MOV V4.16B, V12.16B
	0x03B4E640 MOV V5.16B, V14.16B
	0x03B4E644 MOV X1, X23
	0x03B4E648 MOV V6.16B, V13.16B
	0x03B4E64C MOV W3, W31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x895000
	006 Move X21, 0x5A6000
	007 Move W8, [X20+2268]
	008 Move X21, [X21+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x5A6000
	015 Move X0, [X0+3448]
	016 Call 0x1C17CF4
	017 Move X0, 0x5A6000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X20+2268], W8
	022 Move X0, [X21]
	023 Move X20, [X19+96]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Inequality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {45}
	036 Move X0, [X21]
	037 Move X20, [X19+96]
	038 Move W8, [X0+224]
	039 Compare W8, 0
	040 JumpIfNotEqual {42}
	041 Call 0x1C17DFC
	042 Move X0, X20
	043 Move X1, X31
	044 Call Object.Destroy, X0
	045 Move X0, [X21]
	046 Move X20, [X19+40]
	047 Move W8, [X0+224]
	048 Compare W8, 0
	049 JumpIfNotEqual {51}
	050 Call 0x1C17DFC
	051 Move X0, X20
	052 Move X1, X31
	053 Move X2, X31
	054 Call Object.op_Inequality, X0, X1
	055 Move TEMP, X0
	056 And TEMP, TEMP, 1
	057 Compare TEMP, 1
	058 JumpIfNotEqual {71}
	059 Move X0, [X21]
	060 Move X21, 0x5A6000
	061 Move X20, [X19+40]
	062 Move W8, [X0+224]
	063 Move X21, [X21+3448]
	064 Compare W8, 0
	065 JumpIfNotEqual {67}
	066 Call 0x1C17DFC
	067 Move X1, [X21]
	068 Move X0, X20
	069 Call 0x222E35C, X0
	070 Move [X19+96], X0
	071 Move X20, [X31+16]
	072 Move X19, [X31+24]
	073 Move X30, [X31+32]
	074 Move X21, [X31+40]
	075 Return 

Method: UnityEngine.RaycastHit FindClosestHit(UnityEngine.RaycastHit[] hits, System.Int32 hitCount)

Disassembly:
	0x03B4F4B0 BL 0x1C16F20
	0x03B4F4B4 RET
	0x03B4F4B8 STP X30, X21, [X31 - 0x20]!
	0x03B4F4BC STP X20, X19, [X31 + 0x10]
	0x03B4F4C0 ADRP X21, 0x893000
	0x03B4F4C4 LDRB W8, [X21 + 0x8E4]
	0x03B4F4C8 MOV W20, W1
	0x03B4F4CC MOV X19, X0
	0x03B4F4D0 TBNZ X8, 0x0, 0x3B4F4E8
	0x03B4F4D4 ADRP X0, 0x5A4000
	0x03B4F4D8 LDR X0, [X0 + 0x598]
	0x03B4F4DC BL 0x1C16CF4
	0x03B4F4E0 MOVZ W8, 0x1
	0x03B4F4E4 STRB W8, [X21 + 0x8E4]
	0x03B4F4E8 LDRB W8, [X19 + 0x118]
	0x03B4F4EC CBZ W8, 0x3B4F4F8
	0x03B4F4F0 MOV X0, X19
	0x03B4F4F4 BL 0x3B52FE4
	0x03B4F4F8 CMP W20, 0x1
	0x03B4F4FC B.NE 0x3B4F580
	0x03B4F500 LDR W8, [X19 + 0x1A8]
	0x03B4F504 STRB W31, [X19 + 0x279]
	0x03B4F508 AND W8, W8, 0xFFFFFFFE
	0x03B4F50C CMP W8, 0x2
	0x03B4F510 B.NE 0x3B4F580
	0x03B4F514 ADRP X8, 0x5A4000
	0x03B4F518 LDR X8, [X8 + 0x598]
	0x03B4F51C LDR X20, [X19 + 0x260]
	0x03B4F520 LDR X0, [X8]
	0x03B4F524 LDR W8, [X0 + 0xE0]
	0x03B4F528 CBNZ W8, 0x3B4F530
	0x03B4F52C BL 0x1C16DFC
	0x03B4F530 MOV X0, X20
	0x03B4F534 MOV X1, X31
	0x03B4F538 MOV X2, X31
	0x03B4F53C BL 0x3C3883C
	0x03B4F540 TBNZ X0, 0x0, 0x3B4F580
	0x03B4F544 LDRB W9, [X19 + 0x278]
	0x03B4F548 LDR X8, [X19 + 0x260]
	0x03B4F54C CBZ W9, 0x3B4F570
	0x03B4F550 CBZ X8, 0x3B4F58C
	0x03B4F554 LDRB W9, [X8 + 0x61]
	0x03B4F558 CBZ W9, 0x3B4F574
	0x03B4F55C MOVZ W9, 0x100
	0x03B4F560 MOVZ W10, 0x1
	0x03B4F564 STRH W9, [X19 + 0x278]
	0x03B4F568 STRB W10, [X19 + 0x27A]
	0x03B4F56C B 0x3B4F574
	0x03B4F570 CBZ X8, 0x3B4F58C
	0x03B4F574 LDRB W8, [X8 + 0x62]
	0x03B4F578 CBZ W8, 0x3B4F580
	0x03B4F57C STRB W31, [X19 + 0x27A]
	0x03B4F580 LDP X20, X19, [X31 + 0x10]
	0x03B4F584 LDP X30, X21, [X31], #0x20
	0x03B4F588 RET

ISIL:
	001 Move [X31-64], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X24
	004 Move [X31+24], X23
	005 Move [X31+32], X22
	006 Move [X31+40], X21
	007 Move [X31+48], X20
	008 Move [X31+56], X19
	009 Compare X0, 0
	010 JumpIfEqual {59}
	011 Move X19, X8
	012 Move W8, [X0+24]
	013 Move X20, X0
	014 NotImplemented "Instruction CMP not yet implemented."
	015 Move TEMP, 0x80800000
	016 Not TEMP
	017 Move W9, TEMP
	018 Move W24, W31
	019 Move X22, X31
	020 NotImplemented "Instruction BIC not yet implemented."
	021 Add X21, X20, 32
	022 Move S8, W9
	023 NotImplemented "Instruction CMP not yet implemented."
	024 Move X0, X21
	025 Move X1, X31
	026 Call RaycastHit.get_distance, X0
	027 NotImplemented "Instruction FCMP not yet implemented."
	028 Move W8, [X20+24]
	029 NotImplemented "Instruction CMP not yet implemented."
	030 Move X0, X21
	031 Move X1, X31
	032 Call RaycastHit.get_distance, X0
	033 Move V8, V0
	034 Move W24, W22
	035 Move W8, [X20+24]
	036 Add X22, X22, 1
	037 NotImplemented "Instruction CMP not yet implemented."
	038 Add X21, X21, 44
	039 Move W24, W31
	040 NotImplemented "Instruction CMP not yet implemented."
	041 Move W8, 44
	042 NotImplemented "Instruction SMADDL not yet implemented."
	043 NotImplemented "Instruction LDUR not yet implemented."
	044 Move V2, [X8+32]
	045 Move V1, [X8+48]
	046 Move X22, [X31+32]
	047 Move X21, [X31+40]
	048 Move X24, [X31+16]
	049 Move X23, [X31+24]
	050 Move [X19+28], V0
	051 Move [X19], V2
	052 Move [X19+8], V1
	053 Move X20, [X31+48]
	054 Move X19, [X31+56]
	055 Move X30, [X31+8]
	056 Move V8, [X31+64]
	057 Return X0
	058 Call 0x1C17F28
	059 Call 0x1C17F20

Method: System.Boolean TryGetRaycastPoint(ref UnityEngine.Vector3 raycastPos, ref UnityEngine.Vector3 raycastNormal)

Disassembly:
	0x03B4F58C BL 0x1C16F20
	0x03B4F590 LDRB W8, [X0 + 0x118]
	0x03B4F594 CBZ W8, 0x3B4F59C
	0x03B4F598 B 0x3B52FE4
	0x03B4F59C RET
	0x03B4F5A0 STR X30, [X31 - 0x30]!
	0x03B4F5A4 STP X22, X21, [X31 + 0x10]
	0x03B4F5A8 STP X20, X19, [X31 + 0x20]
	0x03B4F5AC ADRP X21, 0x893000
	0x03B4F5B0 LDRB W8, [X21 + 0x8E5]
	0x03B4F5B4 MOV W20, W1
	0x03B4F5B8 MOV X19, X0
	0x03B4F5BC TBNZ X8, 0x0, 0x3B4F5D4
	0x03B4F5C0 ADRP X0, 0x60B000
	0x03B4F5C4 LDR X0, [X0 + 0x3A8]
	0x03B4F5C8 BL 0x1C16CF4
	0x03B4F5CC MOVZ W8, 0x1
	0x03B4F5D0 STRB W8, [X21 + 0x8E5]
	0x03B4F5D4 CMP W20, 0x1
	0x03B4F5D8 B.NE 0x3B4F6B0
	0x03B4F5DC LDRB W8, [X19 + 0x259]
	0x03B4F5E0 CBZ W8, 0x3B4F6B0
	0x03B4F5E4 LDR X8, [X19]
	0x03B4F5E8 MOV X0, X19
	0x03B4F5EC LDR X9, [X8 + 0x778]
	0x03B4F5F0 LDR X1, [X8 + 0x780]
	0x03B4F5F4 BLR X9
	0x03B4F5F8 LDR X8, [X19]
	0x03B4F5FC MOV W21, W0
	0x03B4F600 MOV X0, X19
	0x03B4F604 LDR X9, [X8 + 0x788]
	0x03B4F608 LDR X1, [X8 + 0x790]
	0x03B4F60C BLR X9
	0x03B4F610 MOV W20, W0
	0x03B4F614 TBNZ X21, 0x0, 0x3B4F61C
	0x03B4F618 TBZ X20, 0x0, 0x3B4F6B0
	0x03B4F61C ADRP X22, 0x60B000
	0x03B4F620 LDR X22, [X22 + 0x3A8]
	0x03B4F624 LDR X0, [X22]
	0x03B4F628 LDR W8, [X0 + 0xE0]
	0x03B4F62C CBNZ W8, 0x3B4F638
	0x03B4F630 BL 0x1C16DFC
	0x03B4F634 LDR X0, [X22]
	0x03B4F638 LDR X8, [X0 + 0xB8]
	0x03B4F63C LDR X9, [X19]
	0x03B4F640 MOV X0, X19
	0x03B4F644 LDR X1, [X8]
	0x03B4F648 LDR X8, [X9 + 0x798]
	0x03B4F64C LDR X2, [X9 + 0x7A0]
	0x03B4F650 BLR X8
	0x03B4F654 TBZ X21, 0x0, 0x3B4F67C
	0x03B4F658 LDR X0, [X22]
	0x03B4F65C LDR W8, [X0 + 0xE0]
	0x03B4F660 CBNZ W8, 0x3B4F66C
	0x03B4F664 BL 0x1C16DFC
	0x03B4F668 LDR X0, [X22]
	0x03B4F66C LDR X8, [X0 + 0xB8]
	0x03B4F670 MOV X0, X19
	0x03B4F674 LDR X1, [X8]
	0x03B4F678 BL 0x3B4F6C4
	0x03B4F67C TBZ X20, 0x0, 0x3B4F6B0
	0x03B4F680 LDR X0, [X22]
	0x03B4F684 LDR W8, [X0 + 0xE0]
	0x03B4F688 CBNZ W8, 0x3B4F694
	0x03B4F68C BL 0x1C16DFC
	0x03B4F690 LDR X0, [X22]
	0x03B4F694 LDR X8, [X0 + 0xB8]
	0x03B4F698 MOV X0, X19
	0x03B4F69C LDP X20, X19, [X31 + 0x20]
	0x03B4F6A0 LDP X22, X21, [X31 + 0x10]
	0x03B4F6A4 LDR X1, [X8]
	0x03B4F6A8 LDR X30, [X31], #0x30
	0x03B4F6AC B 0x3B4FA10
	0x03B4F6B0 LDP X20, X19, [X31 + 0x20]
	0x03B4F6B4 LDP X22, X21, [X31 + 0x10]
	0x03B4F6B8 LDR X30, [X31], #0x30
	0x03B4F6BC RET
	0x03B4F6C0 RET
	0x03B4F6C4 SUB X31, X31, 0xB0

ISIL:
	001 Subtract X31, X31, 160
	002 Move [X31+48], D14
	003 Move [X31+64], D13
	004 Move [X31+72], D12
	005 Move [X31+80], D11
	006 Move [X31+88], D10
	007 Move [X31+96], D9
	008 Move [X31+104], D8
	009 Move [X31+112], X30
	010 Move [X31+120], X23
	011 Move [X31+128], X22
	012 Move [X31+136], X21
	013 Move [X31+144], X20
	014 Move [X31+152], X19
	015 NotImplemented "Instruction MOVI not yet implemented."
	016 Move [X31+28], V0
	017 Move [X31], V0
	018 Move [X31+8], V0
	019 Move X8, [X0+104]
	020 Compare X8, 0
	021 JumpIfEqual {99}
	022 Move X21, X0
	023 Move X0, [X8+80]
	024 Compare X0, 0
	025 JumpIfEqual {99}
	026 Move X20, X1
	027 Move X1, X31
	028 Move X19, X2
	029 Call Transform.get_position, X0
	030 Move X8, [X21+104]
	031 Compare X8, 0
	032 JumpIfEqual {99}
	033 Move X0, [X8+80]
	034 Compare X0, 0
	035 JumpIfEqual {99}
	036 Move X1, X31
	037 Move V8, V0
	038 Move V9, V1
	039 Move V10, V2
	040 Add X22, X21, 136
	041 Call Transform.get_forward, X0
	042 Move W0, [X21+64]
	043 Move X23, [X21+144]
	044 Move V13, [X21+32]
	045 Move X1, X31
	046 Move V11, V0
	047 Move V12, V1
	048 Move V14, V2
	049 Call LayerMask.op_Implicit, X0
	050 Move W2, W0
	051 Move X0, X22
	052 Move V0, V8
	053 Move V1, V9
	054 Move V2, V10
	055 Move V3, V11
	056 Move V4, V12
	057 Move V5, V14
	058 Move X1, X23
	059 Move V6, V13
	060 Move W3, W31
	061 Move X4, X31
	062 Call PhysicsScene.Raycast, X0, X1, X2, X3, V0, X4, X5
	063 Move W22, W0
	064 Compare W0, 0
	065 JumpIfEqual {82}
	066 Move X0, [X21+144]
	067 Add X8, X31, 0
	068 Move W1, W22
	069 Call XRInteractorReticleVisual.FindClosestHit, X0, X1
	070 Add X0, X31, 0
	071 Move X1, X31
	072 Call RaycastHit.get_point, X0
	073 Add X0, X31, 0
	074 Move X1, X31
	075 Move [X20], S0
	076 Move [X20+8], S1
	077 Move [X20+8], S2
	078 Call RaycastHit.get_normal, X0
	079 Move [X19], S0
	080 Move [X19+8], S1
	081 Move [X19+8], S2
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X20, [X31+144]
	084 Move X19, [X31+152]
	085 Move X22, [X31+128]
	086 Move X21, [X31+136]
	087 Move X30, [X31+112]
	088 Move X23, [X31+120]
	089 Move D9, [X31+96]
	090 Move D8, [X31+104]
	091 Move D11, [X31+80]
	092 Move D10, [X31+88]
	093 Move D13, [X31+64]
	094 Move D12, [X31+72]
	095 Move V14, [X31+48]
	096 NotImplemented "Instruction CSET not yet implemented."
	097 Add X31, X31, 160
	098 Return X0
	099 Call 0x1C17F20

Method: System.Boolean UpdateReticleTarget()

Disassembly:
	0x03B4E9B0 ADD X4, X31, 0xA0
	0x03B4E9B4 ADD X5, X31, 0x70
	0x03B4E9B8 ADD X6, X31, 0x60
	0x03B4E9BC MOV X7, X31
	0x03B4E9C0 BL 0x3B93B30
	0x03B4E9C4 LDR X8, [X19 + 0x3C0]
	0x03B4E9C8 CBZ X8, 0x3B4EB28
	0x03B4E9CC LDR W9, [X8 + 0x18]
	0x03B4E9D0 CBZ W9, 0x3B4EBFC
	0x03B4E9D4 CMP W9, 0x1
	0x03B4E9D8 B.EQ 0x3B4EBFC
	0x03B4E9DC CMP W9, 0x2
	0x03B4E9E0 B.LS 0x3B4EBFC
	0x03B4E9E4 ADD X0, X8, 0x20
	0x03B4E9E8 ADD X1, X8, 0x2C
	0x03B4E9EC ADD X2, X8, 0x38
	0x03B4E9F0 ADD X3, X31, 0x60
	0x03B4E9F4 ADD X4, X31, 0x70
	0x03B4E9F8 ADD X5, X31, 0x90
	0x03B4E9FC ADD X6, X31, 0x80
	0x03B4EA00 MOV X7, X31
	0x03B4EA04 BL 0x3B93B30
	0x03B4EA08 CMP W22, 0x1
	0x03B4EA0C B.LT 0x3B4EB2C
	0x03B4EA10 LDR X8, [X19 + 0x3A0]
	0x03B4EA14 CBZ X8, 0x3B4EB28
	0x03B4EA18 LDR W23, [X8 + 0x18]
	0x03B4EA1C SUB W8, W23, 0x1
	0x03B4EA20 CMP W22, W8
	0x03B4EA24 B.EQ 0x3B4EB2C
	0x03B4EA28 LDR W8, [X19 + 0x290]
	0x03B4EA2C CMP W8, 0x1
	0x03B4EA30 B.NE 0x3B4EB2C
	0x03B4EA34 STR W23, [X21]
	0x03B4EA38 LDR X0, [X24]
	0x03B4EA3C LDR W8, [X0 + 0xE0]
	0x03B4EA40 CBNZ W8, 0x3B4EA48
	0x03B4EA44 BL 0x1C16DFC
	0x03B4EA48 MOV X0, X20
	0x03B4EA4C MOV W1, W23
	0x03B4EA50 BL 0x3B60BA4
	0x03B4EA54 ADRP X8, 0x60C000
	0x03B4EA58 LDR X8, [X8 + 0x9E8]
	0x03B4EA5C MOV X0, X20
	0x03B4EA60 LDR X1, [X8]
	0x03B4EA64 BL 0x2133578
	0x03B4EA68 LDR W8, [X31 + 0xB8]
	0x03B4EA6C LDR X9, [X31 + 0xB0]
	0x03B4EA70 SCVTF S0, W22
	0x03B4EA74 FMOV S1, 1
	0x03B4EA78 MOV X20, X0
	0x03B4EA7C MOVZ W21, 0x1
	0x03B4EA80 FDIV S8, S1, S0
	0x03B4EA84 MOVZ W23, 0xC
	0x03B4EA88 STR X9, [X0]
	0x03B4EA8C STR W8, [X0 + 0x8]
	0x03B4EA90 SCVTF S0, W21
	0x03B4EA94 FMUL S0, S8, S0
	0x03B4EA98 ADD X0, X31, 0xB0
	0x03B4EA9C ADD X1, X31, 0xA0
	0x03B4EAA0 ADD X2, X31, 0x90
	0x03B4EAA4 ADD X3, X31, 0x80
	0x03B4EAA8 ADD X4, X31, 0x50
	0x03B4EAAC MOV X5, X31
	0x03B4EAB0 BL 0x3B93928
	0x03B4EAB4 LDR W9, [X31 + 0x58]
	0x03B4EAB8 LDR X10, [X31 + 0x50]
	0x03B4EABC NOP
	0x03B4EAC0 SMADDL X8, X21, X23, X20
	0x03B4EAC4 ADD W21, W21, 0x1
	0x03B4EAC8 CMP W21, W22
	0x03B4EACC STR W9, [X8 + 0x8]
	0x03B4EAD0 STR X10, [X8]
	0x03B4EAD4 B.LE 0x3B4EA90
	0x03B4EAD8 LDR X0, [X19 + 0x3A0]
	0x03B4EADC CBZ X0, 0x3B4EB28
	0x03B4EAE0 SXTW X8, W22
	0x03B4EAE4 ADRP X22, 0x60C000
	0x03B4EAE8 LDR X22, [X22 + 0xB10]
	0x03B4EAEC MOVZ W9, 0xC
	0x03B4EAF0 ADD X21, X8, 0x1
	0x03B4EAF4 MADD X8, X21, X9, X20
	0x03B4EAF8 ADD X20, X8, 0x8
	0x03B4EAFC LDRSW X8, [X0 + 0x18]
	0x03B4EB00 CMP X21, X8
	0x03B4EB04 B.GE 0x3B4EBDC
	0x03B4EB08 LDR X2, [X22]
	0x03B4EB0C MOV W1, W21
	0x03B4EB10 BL 0x317B51C
	0x03B4EB14 STP S0, S1, [X20 - 0x8]
	0x03B4EB18 STR S2, [X20], #0xC
	0x03B4EB1C LDR X0, [X19 + 0x3A0]
	0x03B4EB20 ADD X21, X21, 0x1
	0x03B4EB24 CBNZ X0, 0x3B4EAFC
	0x03B4EB28 BL 0x1C16F20
	0x03B4EB2C LDR W22, [X19 + 0x2D0]
	0x03B4EB30 STR W22, [X21]
	0x03B4EB34 LDR X0, [X24]
	0x03B4EB38 LDR W8, [X0 + 0xE0]
	0x03B4EB3C CBNZ W8, 0x3B4EB44
	0x03B4EB40 BL 0x1C16DFC
	0x03B4EB44 MOV X0, X20
	0x03B4EB48 MOV W1, W22
	0x03B4EB4C BL 0x3B60BA4
	0x03B4EB50 ADRP X8, 0x60C000
	0x03B4EB54 LDR X8, [X8 + 0x9E8]
	0x03B4EB58 MOV X0, X20
	0x03B4EB5C LDR X1, [X8]
	0x03B4EB60 BL 0x2133578
	0x03B4EB64 LDR X8, [X31 + 0xB0]
	0x03B4EB68 LDR W9, [X31 + 0xB8]
	0x03B4EB6C STR X8, [X0]
	0x03B4EB70 STR W9, [X0 + 0x8]
	0x03B4EB74 LDR W8, [X19 + 0x2D0]
	0x03B4EB78 CMP W8, 0x2
	0x03B4EB7C B.LT 0x3B4EBDC
	0x03B4EB80 SUB W8, W8, 0x1
	0x03B4EB84 FMOV S0, 1
	0x03B4EB88 SCVTF S1, W8
	0x03B4EB8C ADD X20, X0, 0xC
	0x03B4EB90 FDIV S8, S0, S1
	0x03B4EB94 MOVZ W21, 0x1
	0x03B4EB98 SCVTF S0, W21
	0x03B4EB9C FMUL S0, S8, S0
	0x03B4EBA0 ADD X0, X31, 0xB0
	0x03B4EBA4 ADD X1, X31, 0xA0
	0x03B4EBA8 ADD X2, X31, 0x90
	0x03B4EBAC ADD X3, X31, 0x80
	0x03B4EBB0 ADD X4, X31, 0x40
	0x03B4EBB4 MOV X5, X31
	0x03B4EBB8 BL 0x3B93928
	0x03B4EBBC LDR W8, [X31 + 0x48]
	0x03B4EBC0 LDR X9, [X31 + 0x40]
	0x03B4EBC4 ADD X21, X21, 0x1
	0x03B4EBC8 STR W8, [X20 + 0x8]
	0x03B4EBCC STR X9, [X20], #0xC
	0x03B4EBD0 LDRSW X8, [X19 + 0x2D0]
	0x03B4EBD4 CMP X21, X8
	0x03B4EBD8 B.LT 0x3B4EB98
	0x03B4EBDC MOVZ W0, 0x1
	0x03B4EBE0 LDP X20, X19, [X31 + 0x100]
	0x03B4EBE4 LDP X22, X21, [X31 + 0xF0]
	0x03B4EBE8 LDP X24, X23, [X31 + 0xE0]
	0x03B4EBEC LDP X29, X30, [X31 + 0xD0]
	0x03B4EBF0 LDR V8, [X31 + 0xC0]
	0x03B4EBF4 ADD X31, X31, 0x110
	0x03B4EBF8 RET
	0x03B4EBFC BL 0x1C16F28
	0x03B4EC00 MOV W1, W31
	0x03B4EC04 B 0x3B4D6D8
	0x03B4EC08 STP X30, X21, [X31 - 0x20]!
	0x03B4EC0C STP X20, X19, [X31 + 0x10]
	0x03B4EC10 ADRP X21, 0x894000
	0x03B4EC14 ADRP X20, 0x5AB000
	0x03B4EC18 LDRB W8, [X21 + 0x8DF]
	0x03B4EC1C LDR X20, [X20 + 0x488]
	0x03B4EC20 MOV X19, X0
	0x03B4EC24 TBNZ X8, 0x0, 0x3B4EC3C
	0x03B4EC28 ADRP X0, 0x5AB000
	0x03B4EC2C LDR X0, [X0 + 0x488]
	0x03B4EC30 BL 0x1C16CF4
	0x03B4EC34 MOVZ W8, 0x1
	0x03B4EC38 STRB W8, [X21 + 0x8DF]
	0x03B4EC3C MOVZ W11, 0xD70A
	0x03B4EC40 MOVZ W8, 0x41200000
	0x03B4EC44 MOVZ W9, 0x3F800000
	0x03B4EC48 MOVZ W10, 0x101
	0x03B4EC4C MOVK W11, 0x3CA30000
	0x03B4EC50 MOVN W0, 0x0
	0x03B4EC54 MOV X1, X31
	0x03B4EC58 STR W8, [X19 + 0x20]
	0x03B4EC5C STR W9, [X19 + 0x30]
	0x03B4EC60 STRH W10, [X19 + 0x34]
	0x03B4EC64 STR W11, [X19 + 0x38]
	0x03B4EC68 BL 0x3C35CBC
	0x03B4EC6C STR W0, [X19 + 0x40]
	0x03B4EC70 LDR X0, [X20]
	0x03B4EC74 MOVZ W1, 0xA
	0x03B4EC78 BL 0x1C16D6C
	0x03B4EC7C STR X0, [X19 + 0x90]
	0x03B4EC80 MOV X0, X19
	0x03B4EC84 LDP X20, X19, [X31 + 0x10]
	0x03B4EC88 MOV X1, X31
	0x03B4EC8C LDP X30, X21, [X31], #0x20
	0x03B4EC90 B 0x3C36C30
	0x03B4EC94 LDR W0, [X0 + 0x1A8]
	0x03B4EC98 RET
	0x03B4EC9C STR W1, [X0 + 0x1A8]
	0x03B4ECA0 RET
	0x03B4ECA4 LDRB W0, [X0 + 0x1AC]
	0x03B4ECA8 RET
	0x03B4ECAC STR X30, [X31 - 0x30]!
	0x03B4ECB0 STP X22, X21, [X31 + 0x10]
	0x03B4ECB4 STP X20, X19, [X31 + 0x20]
	0x03B4ECB8 ADRP X22, 0x894000
	0x03B4ECBC LDRB W8, [X22 + 0x8E0]
	0x03B4ECC0 MOV W20, W1
	0x03B4ECC4 MOV X19, X0
	0x03B4ECC8 AND W21, W1, 0x1
	0x03B4ECCC TBNZ X8, 0x0, 0x3B4ECE4
	0x03B4ECD0 ADRP X0, 0x5A5000
	0x03B4ECD4 LDR X0, [X0 + 0x598]
	0x03B4ECD8 BL 0x1C16CF4
	0x03B4ECDC MOVZ W8, 0x1
	0x03B4ECE0 STRB W8, [X22 + 0x8E0]
	0x03B4ECE4 STRB W21, [X19 + 0x1AC]
	0x03B4ECE8 TBNZ X20, 0x0, 0x3B4ED3C
	0x03B4ECEC ADRP X8, 0x5A5000
	0x03B4ECF0 LDR X8, [X8 + 0x598]
	0x03B4ECF4 LDR X20, [X19 + 0x260]
	0x03B4ECF8 LDR X0, [X8]
	0x03B4ECFC LDR W8, [X0 + 0xE0]
	0x03B4ED00 CBNZ W8, 0x3B4ED08
	0x03B4ED04 BL 0x1C16DFC
	0x03B4ED08 MOV X0, X20
	0x03B4ED0C MOV X1, X31
	0x03B4ED10 MOV X2, X31
	0x03B4ED14 BL 0x3C354F8
	0x03B4ED18 TBZ X0, 0x0, 0x3B4ED3C
	0x03B4ED1C LDR X0, [X19 + 0x260]
	0x03B4ED20 CBZ X0, 0x3B4ED4C
	0x03B4ED24 LDP X20, X19, [X31 + 0x20]
	0x03B4ED28 LDP X22, X21, [X31 + 0x10]
	0x03B4ED2C MOV W1, W31
	0x03B4ED30 MOV X2, X31
	0x03B4ED34 LDR X30, [X31], #0x30
	0x03B4ED38 B 0x3B341B4
	0x03B4ED3C LDP X20, X19, [X31 + 0x20]
	0x03B4ED40 LDP X22, X21, [X31 + 0x10]
	0x03B4ED44 LDR X30, [X31], #0x30
	0x03B4ED48 RET
	0x03B4ED4C BL 0x1C16F20
	0x03B4ED50 LDRB W0, [X0 + 0x1AD]
	0x03B4ED54 RET
	0x03B4ED58 AND W8, W1, 0x1
	0x03B4ED5C STRB W8, [X0 + 0x1AD]
	0x03B4ED60 RET
	0x03B4ED64 LDR W0, [X0 + 0x1B0]
	0x03B4ED68 RET
	0x03B4ED6C STR W1, [X0 + 0x1B0]
	0x03B4ED70 RET
	0x03B4ED74 LDRB W0, [X0 + 0x1B4]
	0x03B4ED78 RET
	0x03B4ED7C AND W8, W1, 0x1
	0x03B4ED80 STRB W8, [X0 + 0x1B4]
	0x03B4ED84 RET
	0x03B4ED88 LDR X0, [X0 + 0x1B8]
	0x03B4ED8C RET
	0x03B4ED90 STR X1, [X0 + 0x1B8]
	0x03B4ED94 RET
	0x03B4ED98 LDRB W0, [X0 + 0x1C0]
	0x03B4ED9C RET
	0x03B4EDA0 AND W8, W1, 0x1
	0x03B4EDA4 STRB W8, [X0 + 0x1C0]
	0x03B4EDA8 RET
	0x03B4EDAC LDR X0, [X0 + 0x1C8]
	0x03B4EDB0 RET
	0x03B4EDB4 STR X1, [X0 + 0x1C8]
	0x03B4EDB8 RET
	0x03B4EDBC LDRB W0, [X0 + 0x1D0]
	0x03B4EDC0 RET
	0x03B4EDC4 AND W8, W1, 0x1
	0x03B4EDC8 STRB W8, [X0 + 0x1D0]
	0x03B4EDCC RET
	0x03B4EDD0 LDR X0, [X0 + 0x1D8]
	0x03B4EDD4 RET
	0x03B4EDD8 STR X1, [X0 + 0x1D8]
	0x03B4EDDC RET
	0x03B4EDE0 LDRB W0, [X0 + 0x1E0]
	0x03B4EDE4 RET
	0x03B4EDE8 AND W8, W1, 0x1
	0x03B4EDEC STRB W8, [X0 + 0x1E0]
	0x03B4EDF0 RET
	0x03B4EDF4 LDR X0, [X0 + 0x1E8]
	0x03B4EDF8 RET
	0x03B4EDFC STR X1, [X0 + 0x1E8]
	0x03B4EE00 RET
	0x03B4EE04 LDRB W0, [X0 + 0x1F0]
	0x03B4EE08 RET
	0x03B4EE0C AND W8, W1, 0x1
	0x03B4EE10 STRB W8, [X0 + 0x1F0]
	0x03B4EE14 RET
	0x03B4EE18 LDR X0, [X0 + 0x1F8]
	0x03B4EE1C RET
	0x03B4EE20 STR X1, [X0 + 0x1F8]
	0x03B4EE24 RET
	0x03B4EE28 LDRB W0, [X0 + 0x200]
	0x03B4EE2C RET
	0x03B4EE30 AND W8, W1, 0x1
	0x03B4EE34 STRB W8, [X0 + 0x200]
	0x03B4EE38 RET

ISIL:
	001 Move [X31-128], D15
	002 Move [X31-120], D14
	003 Move [X31+16], D13
	004 Move [X31+24], D12
	005 Move [X31+32], D11
	006 Move [X31+40], D10
	007 Move [X31+48], D9
	008 Move [X31+56], D8
	009 Move [X31+64], X29
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Subtract X31, X31, 464
	017 Move X20, 0x895000
	018 Move W8, [X20+2269]
	019 Move X19, X0
	020 Add X21, X31, 128
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {39}
	025 Move X0, 0x60D000
	026 Move X0, [X0+2568]
	027 Call 0x1C17CF4
	028 Move X0, 0x60D000
	029 Move X0, [X0+2816]
	030 Call 0x1C17CF4
	031 Move X0, 0x60D000
	032 Move X0, [X0+2576]
	033 Call 0x1C17CF4
	034 Move X0, 0x60D000
	035 Move X0, [X0+1984]
	036 Call 0x1C17CF4
	037 Move W8, 1
	038 Move [X20+2269], W8
	039 NotImplemented "Instruction MOVI not yet implemented."
	040 Move [X31+456], W31
	041 Move [X31+448], X31
	042 Move [X31+440], W31
	043 Move [X31+432], X31
	044 Move [X31+368], X31
	045 Move [X31+284], W31
	046 Move [X31+280], W31
	047 Move [X31+276], W31
	048 Move [X31+216], W31
	049 Move [X31+400], V0
	050 Move [X31+408], V0
	051 Move [X31+24], V0
	052 Move [X31+336], V0
	053 Move [X31+344], V0
	054 Move [X31+304], V0
	055 Move [X31+312], V0
	056 Move [X31+18], V0
	057 Move [X21+124], V0
	058 Move [X31+224], V0
	059 Move [X31+232], V0
	060 Move [X31+208], X31
	061 Move W8, [X19+60]
	062 Compare W8, 0
	063 JumpIfNotEqual {72}
	064 Move X0, [X19+104]
	065 Compare X0, 0
	066 JumpIfEqual {339}
	067 Call XRBaseInteractor.get_hasSelection, X0
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfEqual {197}
	072 Move X0, [X19+104]
	073 Compare X0, 0
	074 JumpIfEqual {339}
	075 Move W8, [X0+89]
	076 Compare W8, 0
	077 JumpIfEqual {83}
	078 Call XRInteractorExtensions.IsBlockedByInteractionWithinGroup, X0
	079 Move TEMP, X0
	080 And TEMP, TEMP, 1
	081 Compare TEMP, 1
	082 JumpIfEqual {197}
	083 Move X22, 0x88B000
	084 Move W8, [X22+1923]
	085 Compare W8, 0
	086 JumpIfNotEqual {92}
	087 Move X0, 0x5A6000
	088 Move X0, [X0+1440]
	089 Call 0x1C17CF4
	090 Move W8, 1
	091 Move [X22+1923], W8
	092 Move X23, 0x5A6000
	093 Move X23, [X23+1440]
	094 Move X8, [X23]
	095 Move X8, [X8+184]
	096 Move S0, [X8]
	097 Move S1, [X8+4]
	098 Move V2, [X8+8]
	099 Move [X31+448], S0
	100 Move [X31+452], S1
	101 Move [X31+456], S2
	102 Move [X31+432], S0
	103 Move [X31+436], S1
	104 Move [X31+440], S2
	105 Move X20, [X19+104]
	106 Compare X20, 0
	107 JumpIfEqual {119}
	108 Move X8, 0x60D000
	109 Move X8, [X8+1984]
	110 Move X9, [X20]
	111 Move X8, [X8]
	112 Move W11, [X9+304]
	113 Move W10, [X8+304]
	114 NotImplemented "Instruction CMP not yet implemented."
	115 Move X9, [X9+200]
	116 Add X9, X9, X10
	117 NotImplemented "Instruction LDUR not yet implemented."
	118 NotImplemented "Instruction CMP not yet implemented."
	119 Add X1, X31, 448
	120 Add X2, X31, 432
	121 Move X0, X19
	122 Call XRInteractorReticleVisual.TryGetRaycastPoint, X0, X1, X2
	123 And W8, W0, 1
	124 Move [X19+140], W8
	125 Move TEMP, X0
	126 And TEMP, TEMP, 1
	127 Compare TEMP, 1
	128 JumpIfEqual {132}
	129 Move W8, [X19+61]
	130 Compare W8, 0
	131 JumpIfEqual {197}
	132 Move W8, [X22+1923]
	133 Compare W8, 0
	134 JumpIfNotEqual {140}
	135 Move X0, 0x5A6000
	136 Move X0, [X0+1440]
	137 Call 0x1C17CF4
	138 Move W8, 1
	139 Move [X22+1923], W8
	140 Move X8, [X23]
	141 Move V8, [X31+448]
	142 Move V9, [X31+452]
	143 Move V10, [X31+456]
	144 Move X8, [X8+184]
	145 Move X0, X31
	146 Move V0, [X8]
	147 Move V1, [X8+8]
	148 Move [X31+208], D0
	149 Move [X31+216], S1
	150 Move S11, [X19+112]
	151 Move S12, [X19+116]
	152 Move V13, [X19+120]
	153 Move V14, [X19+56]
	154 Call Time.get_deltaTime
	155 Move W8, 0x7F800000
	156 Move S15, W8
	157 Add X0, X31, 208
	158 Move [X31], S0
	159 Move V0, V11
	160 Move V1, V12
	161 Move V2, V13
	162 Move V3, V8
	163 Move V4, V9
	164 Move V5, V10
	165 Move V6, V14
	166 Move V7, V15
	167 Move X1, X31
	168 Call Vector3.SmoothDamp, X0, X1, X2, V0, V1, V2
	169 Move [X19+112], S0
	170 Move [X19+120], S1
	171 Move [X19+120], S2
	172 Move S8, [X19+124]
	173 Move S9, [X19+128]
	174 Move V10, [X19+132]
	175 Move V11, [X31+432]
	176 Move V12, [X31+436]
	177 Move V13, [X31+440]
	178 Move V14, [X19+56]
	179 Move X0, X31
	180 Call Time.get_deltaTime
	181 Add X0, X31, 208
	182 Move [X31], S0
	183 Move V0, V8
	184 Move V1, V9
	185 Move V2, V10
	186 Move V3, V11
	187 Move V4, V12
	188 Move V5, V13
	189 Move V6, V14
	190 Move V7, V15
	191 Move X1, X31
	192 Call Vector3.SmoothDamp, X0, X1, X2, V0, V1, V2
	193 Move W0, 1
	194 Move [X19+124], S0
	195 Move [X19+132], S1
	196 Move [X19+132], S2
	197 Move W0, W31
	198 Add X31, X31, 464
	199 Move X20, [X31+112]
	200 Move X19, [X31+120]
	201 Move X22, [X31+96]
	202 Move X21, [X31+104]
	203 Move X30, [X31+80]
	204 Move X23, [X31+88]
	205 Move X29, [X31+64]
	206 Move D9, [X31+48]
	207 Move D8, [X31+56]
	208 Move D11, [X31+32]
	209 Move D10, [X31+40]
	210 Move D13, [X31+16]
	211 Move D12, [X31+24]
	212 Move D15, [X31+128]
	213 Move D14, [X31+136]
	214 Return X0
	215 Add X1, X31, 384
	216 Add X2, X31, 280
	217 Add X3, X31, 288
	218 Add X4, X31, 276
	219 Add X5, X31, 284
	220 Move X0, X20
	221 Call XRRayInteractor.TryGetCurrentRaycast, X0, X1, X2, X3, X4, X5
	222 Move TEMP, X0
	223 And TEMP, TEMP, 1
	224 Compare TEMP, 1
	225 JumpIfNotEqual {268}
	226 Move W8, [X31+284]
	227 Compare W8, 0
	228 JumpIfEqual {291}
	229 Move X8, 0x60D000
	230 Move X8, [X8+2816]
	231 Add X0, X31, 288
	232 Move X1, [X8]
	233 Add X8, X31, 48
	234 Call Nullable`1<RaycastResult>.get_Value, X0
	235 Add X0, X31, 128
	236 Add X1, X31, 48
	237 Move W2, 80
	238 Call 0x3EB2AC0
	239 Add X0, X31, 48
	240 Add X1, X31, 128
	241 Move W2, 80
	242 Call 0x3EB2AC0
	243 Move W8, [X31+100]
	244 NotImplemented "Instruction LDUR not yet implemented."
	245 Move X10, [X31+104]
	246 Move W11, [X31+112]
	247 Move [X31+456], W8
	248 Move [X31+448], X9
	249 Move [X31+432], X10
	250 Move [X31+440], W11
	251 Move X0, [X20+672]
	252 Compare X0, 0
	253 JumpIfEqual {339}
	254 Move X1, X31
	255 Call Transform.get_forward, X0
	256 Move V3, [X31+432]
	257 Move V4, [X31+436]
	258 Move V5, [X31+440]
	259 Multiply S0, S0, S3
	260 Multiply S1, S1, S4
	261 Add S0, S0, S1
	262 Multiply S1, S2, S5
	263 Add S0, S1, S0
	264 NotImplemented "Instruction FCMP not yet implemented."
	265 NotImplemented "Instruction FNEG not yet implemented."
	266 NotImplemented "Instruction FNEG not yet implemented."
	267 NotImplemented "Instruction FNEG not yet implemented."
	268 Move W8, [X19+61]
	269 Compare W8, 0
	270 JumpIfEqual {338}
	271 Add X21, X19, 72
	272 Add X2, X31, 276
	273 Add X3, X31, 16
	274 Move X0, X20
	275 Move X1, X21
	276 Move [X31+16], X31
	277 Move [X31+24], X31
	278 Move [X31+40], W31
	279 Move [X31+32], X31
	280 Call XRRayInteractor.GetLinePoints, X0, X1, X2, X3
	281 Move TEMP, X0
	282 And TEMP, TEMP, 1
	283 Compare TEMP, 1
	284 JumpIfNotEqual {338}
	285 Move W8, [X19+80]
	286 NotImplemented "Instruction CMP not yet implemented."
	287 Move X9, [X21]
	288 Subtract W8, W8, 1
	289 Move W10, 12
	290 NotImplemented "Instruction SMADDL not yet implemented."
	291 Move W8, [X31+384]
	292 Compare W8, 0
	293 JumpIfEqual {338}
	294 Move X8, 0x60D000
	295 Move X8, [X8+2576]
	296 Add X0, X31, 384
	297 Move X1, [X8]
	298 Add X8, X31, 128
	299 Call Nullable`1<RaycastHit>.get_Value, X0
	300 Move V0, [X31+128]
	301 Move V1, [X31+144]
	302 NotImplemented "Instruction LDUR not yet implemented."
	303 Add X0, X31, 224
	304 Move X1, X31
	305 Move [X31+224], V0
	306 Move [X31+232], V1
	307 Move [X21+124], V2
	308 Call RaycastHit.get_point, X0
	309 Add X0, X31, 224
	310 Move X1, X31
	311 Move [X31+448], S0
	312 Move [X31+452], S1
	313 Move [X31+456], S2
	314 Call RaycastHit.get_normal, X0
	315 Move [X31+432], S0
	316 Move [X31+436], S1
	317 Move [X31+440], S2
	318 Move W8, 1
	319 Move [X19+140], W8
	320 Move W8, [X22+1923]
	321 Compare W8, 0
	322 JumpIfNotEqual {328}
	323 Move X0, 0x5A6000
	324 Move X0, [X0+1440]
	325 Call 0x1C17CF4
	326 Move W8, 1
	327 Move [X22+1923], W8
	328 Move X8, [X23]
	329 Move X8, [X8+184]
	330 Add X9, X8, 4
	331 Add X10, X8, 8
	332 Move V0, [X8]
	333 Move V1, [X9]
	334 Move V2, [X10]
	335 Move [X31+448], S0
	336 Move [X31+452], S1
	337 Move [X31+456], S2
	338 Move [X19+140], W31
	339 Call 0x1C17F20

Method: System.Void ActivateReticleAtTarget()

Disassembly:
	0x03B4EE3C LDR X0, [X0 + 0x208]
	0x03B4EE40 RET
	0x03B4EE44 STR X1, [X0 + 0x208]
	0x03B4EE48 RET
	0x03B4EE4C LDRB W0, [X0 + 0x210]
	0x03B4EE50 RET
	0x03B4EE54 AND W8, W1, 0x1
	0x03B4EE58 STRB W8, [X0 + 0x210]
	0x03B4EE5C RET
	0x03B4EE60 LDRB W0, [X0 + 0x211]
	0x03B4EE64 RET
	0x03B4EE68 AND W8, W1, 0x1
	0x03B4EE6C STRB W8, [X0 + 0x211]
	0x03B4EE70 RET
	0x03B4EE74 LDR V0, [X0 + 0x214]
	0x03B4EE78 RET
	0x03B4EE7C STR S0, [X0 + 0x214]
	0x03B4EE80 RET
	0x03B4EE84 LDR V0, [X0 + 0x218]
	0x03B4EE88 RET
	0x03B4EE8C STR S0, [X0 + 0x218]
	0x03B4EE90 RET
	0x03B4EE94 LDRB W0, [X0 + 0x21C]
	0x03B4EE98 RET
	0x03B4EE9C AND W8, W1, 0x1
	0x03B4EEA0 STRB W8, [X0 + 0x21C]
	0x03B4EEA4 RET
	0x03B4EEA8 LDR V0, [X0 + 0x220]
	0x03B4EEAC RET
	0x03B4EEB0 STR S0, [X0 + 0x220]
	0x03B4EEB4 RET
	0x03B4EEB8 LDR V0, [X0 + 0x224]
	0x03B4EEBC RET
	0x03B4EEC0 STR S0, [X0 + 0x224]
	0x03B4EEC4 RET
	0x03B4EEC8 LDRB W0, [X0 + 0x228]
	0x03B4EECC RET
	0x03B4EED0 AND W8, W1, 0x1
	0x03B4EED4 STRB W8, [X0 + 0x228]
	0x03B4EED8 RET
	0x03B4EEDC LDR V0, [X0 + 0x22C]
	0x03B4EEE0 RET
	0x03B4EEE4 STR S0, [X0 + 0x22C]
	0x03B4EEE8 RET
	0x03B4EEEC LDR V0, [X0 + 0x230]
	0x03B4EEF0 RET
	0x03B4EEF4 STR S0, [X0 + 0x230]
	0x03B4EEF8 RET
	0x03B4EEFC LDRB W0, [X0 + 0x234]
	0x03B4EF00 RET
	0x03B4EF04 AND W8, W1, 0x1
	0x03B4EF08 STRB W8, [X0 + 0x234]
	0x03B4EF0C RET
	0x03B4EF10 LDR V0, [X0 + 0x238]
	0x03B4EF14 RET
	0x03B4EF18 STR S0, [X0 + 0x238]
	0x03B4EF1C RET
	0x03B4EF20 LDR V0, [X0 + 0x23C]
	0x03B4EF24 RET
	0x03B4EF28 STR S0, [X0 + 0x23C]
	0x03B4EF2C RET
	0x03B4EF30 LDRB W0, [X0 + 0x240]
	0x03B4EF34 RET
	0x03B4EF38 AND W8, W1, 0x1
	0x03B4EF3C STRB W8, [X0 + 0x240]
	0x03B4EF40 RET
	0x03B4EF44 LDR V0, [X0 + 0x244]
	0x03B4EF48 RET
	0x03B4EF4C STR S0, [X0 + 0x244]
	0x03B4EF50 RET
	0x03B4EF54 LDR V0, [X0 + 0x248]
	0x03B4EF58 RET
	0x03B4EF5C STR S0, [X0 + 0x248]
	0x03B4EF60 RET
	0x03B4EF64 LDRB W0, [X0 + 0x24C]
	0x03B4EF68 RET
	0x03B4EF6C AND W8, W1, 0x1
	0x03B4EF70 STRB W8, [X0 + 0x24C]
	0x03B4EF74 RET
	0x03B4EF78 LDR V0, [X0 + 0x250]
	0x03B4EF7C RET
	0x03B4EF80 STR S0, [X0 + 0x250]
	0x03B4EF84 RET
	0x03B4EF88 LDR V0, [X0 + 0x254]
	0x03B4EF8C RET
	0x03B4EF90 STR S0, [X0 + 0x254]
	0x03B4EF94 RET
	0x03B4EF98 LDRB W0, [X0 + 0x258]
	0x03B4EF9C RET
	0x03B4EFA0 AND W8, W1, 0x1
	0x03B4EFA4 STRB W8, [X0 + 0x258]
	0x03B4EFA8 RET
	0x03B4EFAC LDRB W0, [X0 + 0x259]
	0x03B4EFB0 RET
	0x03B4EFB4 AND W8, W1, 0x1
	0x03B4EFB8 STRB W8, [X0 + 0x259]
	0x03B4EFBC RET
	0x03B4EFC0 LDR X0, [X0 + 0x260]
	0x03B4EFC4 RET
	0x03B4EFC8 STR X30, [X31 - 0x30]!
	0x03B4EFCC STP X22, X21, [X31 + 0x10]
	0x03B4EFD0 STP X20, X19, [X31 + 0x20]
	0x03B4EFD4 ADRP X22, 0x894000
	0x03B4EFD8 ADRP X21, 0x5A5000
	0x03B4EFDC LDRB W8, [X22 + 0x8E1]
	0x03B4EFE0 LDR X21, [X21 + 0x598]
	0x03B4EFE4 MOV X20, X1
	0x03B4EFE8 MOV X19, X0
	0x03B4EFEC TBNZ X8, 0x0, 0x3B4F004
	0x03B4EFF0 ADRP X0, 0x5A5000
	0x03B4EFF4 LDR X0, [X0 + 0x598]
	0x03B4EFF8 BL 0x1C16CF4
	0x03B4EFFC MOVZ W8, 0x1
	0x03B4F000 STRB W8, [X22 + 0x8E1]
	0x03B4F004 LDR X0, [X21]
	0x03B4F008 LDR X21, [X19 + 0x260]
	0x03B4F00C LDR W8, [X0 + 0xE0]
	0x03B4F010 CBNZ W8, 0x3B4F018
	0x03B4F014 BL 0x1C16DFC
	0x03B4F018 MOV X0, X21
	0x03B4F01C MOV X1, X20
	0x03B4F020 MOV X2, X31
	0x03B4F024 BL 0x3C354F8
	0x03B4F028 TBZ X0, 0x0, 0x3B4F050
	0x03B4F02C LDR X8, [X19]
	0x03B4F030 STR X20, [X19 + 0x260]
	0x03B4F034 MOV X0, X19
	0x03B4F038 LDP X20, X19, [X31 + 0x20]
	0x03B4F03C LDR X2, [X8 + 0x758]
	0x03B4F040 LDR X1, [X8 + 0x760]
	0x03B4F044 LDP X22, X21, [X31 + 0x10]
	0x03B4F048 LDR X30, [X31], #0x30
	0x03B4F04C BR X2
	0x03B4F050 LDP X20, X19, [X31 + 0x20]
	0x03B4F054 LDP X22, X21, [X31 + 0x10]
	0x03B4F058 LDR X30, [X31], #0x30
	0x03B4F05C RET
	0x03B4F060 STP X30, X23, [X31 - 0x30]!
	0x03B4F064 STP X22, X21, [X31 + 0x10]
	0x03B4F068 STP X20, X19, [X31 + 0x20]
	0x03B4F06C ADRP X22, 0x893000
	0x03B4F070 ADRP X23, 0x60B000
	0x03B4F074 ADRP X20, 0x60B000
	0x03B4F078 ADRP X21, 0x5A4000
	0x03B4F07C LDRB W8, [X22 + 0x8E2]
	0x03B4F080 LDR X23, [X23 + 0xB18]
	0x03B4F084 LDR X20, [X20 + 0xB20]
	0x03B4F088 LDR X21, [X21 + 0x598]
	0x03B4F08C MOV X19, X0
	0x03B4F090 TBNZ X8, 0x0, 0x3B4F0E4
	0x03B4F094 ADRP X0, 0x5A4000
	0x03B4F098 LDR X0, [X0 + 0xA28]
	0x03B4F09C BL 0x1C16CF4
	0x03B4F0A0 ADRP X0, 0x60B000
	0x03B4F0A4 LDR X0, [X0 + 0xB20]
	0x03B4F0A8 BL 0x1C16CF4
	0x03B4F0AC ADRP X0, 0x60B000
	0x03B4F0B0 LDR X0, [X0 + 0xB18]
	0x03B4F0B4 BL 0x1C16CF4
	0x03B4F0B8 ADRP X0, 0x5A4000
	0x03B4F0BC LDR X0, [X0 + 0x598]
	0x03B4F0C0 BL 0x1C16CF4
	0x03B4F0C4 ADRP X0, 0x60B000
	0x03B4F0C8 LDR X0, [X0 + 0xB28]
	0x03B4F0CC BL 0x1C16CF4
	0x03B4F0D0 ADRP X0, 0x60B000
	0x03B4F0D4 LDR X0, [X0 + 0xB30]
	0x03B4F0D8 BL 0x1C16CF4
	0x03B4F0DC MOVZ W8, 0x1
	0x03B4F0E0 STRB W8, [X22 + 0x8E2]
	0x03B4F0E4 LDR X0, [X23]
	0x03B4F0E8 BL 0x1C16F10
	0x03B4F0EC LDR X1, [X20]
	0x03B4F0F0 MOV X20, X0
	0x03B4F0F4 BL 0x301B7C4
	0x03B4F0F8 LDR X8, [X19]
	0x03B4F0FC MOV X0, X19
	0x03B4F100 MOV X1, X20
	0x03B4F104 LDR X9, [X8 + 0x528]
	0x03B4F108 LDR X2, [X8 + 0x530]
	0x03B4F10C BLR X9
	0x03B4F110 MOV X0, X19
	0x03B4F114 BL 0x3B4F248
	0x03B4F118 MOV X0, X19
	0x03B4F11C BL 0x3B4F3D8
	0x03B4F120 MOV X1, X0
	0x03B4F124 MOV X0, X19
	0x03B4F128 BL 0x3B4EFC8
	0x03B4F12C LDR X0, [X21]
	0x03B4F130 LDR X20, [X19 + 0x260]
	0x03B4F134 LDR W8, [X0 + 0xE0]
	0x03B4F138 CBNZ W8, 0x3B4F140
	0x03B4F13C BL 0x1C16DFC
	0x03B4F140 MOV X0, X20
	0x03B4F144 MOV X1, X31
	0x03B4F148 MOV X2, X31
	0x03B4F14C BL 0x3C3883C
	0x03B4F150 TBZ X0, 0x0, 0x3B4F1B8
	0x03B4F154 ADRP X20, 0x60B000
	0x03B4F158 ADRP X22, 0x60B000
	0x03B4F15C ADRP X23, 0x5A4000
	0x03B4F160 LDR X20, [X20 + 0xB30]
	0x03B4F164 LDR X22, [X22 + 0xB28]
	0x03B4F168 LDR X23, [X23 + 0xA28]
	0x03B4F16C MOV X0, X19
	0x03B4F170 MOV X1, X31
	0x03B4F174 BL 0x3C32ECC
	0x03B4F178 LDR X8, [X20]
	0x03B4F17C LDR X1, [X22]
	0x03B4F180 MOV X2, X0
	0x03B4F184 MOV X3, X31
	0x03B4F188 MOV X0, X8
	0x03B4F18C BL 0x3227BD4
	0x03B4F190 LDR X8, [X23]
	0x03B4F194 MOV X20, X0
	0x03B4F198 LDR W9, [X8 + 0xE0]
	0x03B4F19C CBNZ W9, 0x3B4F1A8
	0x03B4F1A0 MOV X0, X8
	0x03B4F1A4 BL 0x1C16DFC
	0x03B4F1A8 MOV X0, X20
	0x03B4F1AC MOV X1, X19
	0x03B4F1B0 MOV X2, X31
	0x03B4F1B4 BL 0x3C06B0C
	0x03B4F1B8 LDR W8, [X19 + 0x1A8]
	0x03B4F1BC CMP W8, 0x2
	0x03B4F1C0 B.NE 0x3B4F1F4
	0x03B4F1C4 LDR X0, [X21]
	0x03B4F1C8 LDR X20, [X19 + 0x60]
	0x03B4F1CC LDR W8, [X0 + 0xE0]
	0x03B4F1D0 CBNZ W8, 0x3B4F1D8
	0x03B4F1D4 BL 0x1C16DFC
	0x03B4F1D8 MOV X0, X20
	0x03B4F1DC MOV X1, X31
	0x03B4F1E0 MOV X2, X31
	0x03B4F1E4 BL 0x3C354F8
	0x03B4F1E8 TBZ X0, 0x0, 0x3B4F1F4
	0x03B4F1EC MOVZ W8, 0x1
	0x03B4F1F0 STRB W8, [X19 + 0x278]
	0x03B4F1F4 LDRB W8, [X19 + 0x1B4]
	0x03B4F1F8 CBNZ W8, 0x3B4F224
	0x03B4F1FC LDRB W8, [X19 + 0x1C0]
	0x03B4F200 CBNZ W8, 0x3B4F224
	0x03B4F204 LDRB W8, [X19 + 0x1D0]
	0x03B4F208 CBNZ W8, 0x3B4F224
	0x03B4F20C LDRB W8, [X19 + 0x1E0]
	0x03B4F210 CBNZ W8, 0x3B4F224
	0x03B4F214 LDRB W8, [X19 + 0x1F0]
	0x03B4F218 CBNZ W8, 0x3B4F224
	0x03B4F21C LDRB W8, [X19 + 0x200]
	0x03B4F220 CBZ W8, 0x3B4F238
	0x03B4F224 MOV X0, X19
	0x03B4F228 LDP X20, X19, [X31 + 0x20]
	0x03B4F22C LDP X22, X21, [X31 + 0x10]
	0x03B4F230 LDP X30, X23, [X31], #0x30
	0x03B4F234 B 0x3B4F434
	0x03B4F238 LDP X20, X19, [X31 + 0x20]
	0x03B4F23C LDP X22, X21, [X31 + 0x10]
	0x03B4F240 LDP X30, X23, [X31], #0x30
	0x03B4F244 RET
	0x03B4F248 STP X30, X21, [X31 - 0x20]!
	0x03B4F24C STP X20, X19, [X31 + 0x10]
	0x03B4F250 ADRP X21, 0x893000
	0x03B4F254 ADRP X20, 0x5A4000
	0x03B4F258 LDRB W8, [X21 + 0x904]
	0x03B4F25C LDR X20, [X20 + 0x598]
	0x03B4F260 MOV X19, X0
	0x03B4F264 TBNZ X8, 0x0, 0x3B4F2AC
	0x03B4F268 ADRP X0, 0x5A4000
	0x03B4F26C LDR X0, [X0 + 0xA28]
	0x03B4F270 BL 0x1C16CF4
	0x03B4F274 ADRP X0, 0x60B000
	0x03B4F278 LDR X0, [X0 + 0x2B0]
	0x03B4F27C BL 0x1C16CF4
	0x03B4F280 ADRP X0, 0x60B000
	0x03B4F284 LDR X0, [X0 + 0x2B8]
	0x03B4F288 BL 0x1C16CF4
	0x03B4F28C ADRP X0, 0x5A4000
	0x03B4F290 LDR X0, [X0 + 0x598]
	0x03B4F294 BL 0x1C16CF4
	0x03B4F298 ADRP X0, 0x60B000
	0x03B4F29C LDR X0, [X0 + 0xB38]
	0x03B4F2A0 BL 0x1C16CF4
	0x03B4F2A4 MOVZ W8, 0x1
	0x03B4F2A8 STRB W8, [X21 + 0x904]
	0x03B4F2AC MOV X0, X19
	0x03B4F2B0 BL 0x3B524B4
	0x03B4F2B4 LDR X0, [X20]
	0x03B4F2B8 LDR X20, [X19 + 0x68]
	0x03B4F2BC LDR W8, [X0 + 0xE0]
	0x03B4F2C0 CBNZ W8, 0x3B4F2C8
	0x03B4F2C4 BL 0x1C16DFC
	0x03B4F2C8 MOV X0, X20
	0x03B4F2CC MOV X1, X31
	0x03B4F2D0 MOV X2, X31
	0x03B4F2D4 BL 0x3C354F8
	0x03B4F2D8 TBZ X0, 0x0, 0x3B4F2E8
	0x03B4F2DC LDR X1, [X19 + 0x68]
	0x03B4F2E0 MOV X0, X19
	0x03B4F2E4 BL 0x3B520BC
	0x03B4F2E8 LDR X0, [X19 + 0xC8]
	0x03B4F2EC CBZ X0, 0x3B4F3D4
	0x03B4F2F0 ADRP X8, 0x60B000
	0x03B4F2F4 LDR X8, [X8 + 0x2B0]
	0x03B4F2F8 LDR X1, [X19 + 0xC0]
	0x03B4F2FC MOV X2, X19
	0x03B4F300 LDR X3, [X8]
	0x03B4F304 BL 0x212EF58
	0x03B4F308 LDR X0, [X19 + 0xD8]
	0x03B4F30C CBZ X0, 0x3B4F3D4
	0x03B4F310 ADRP X8, 0x60B000
	0x03B4F314 LDR X8, [X8 + 0x2B8]
	0x03B4F318 LDR X1, [X19 + 0xD0]
	0x03B4F31C MOV X2, X19
	0x03B4F320 LDR X3, [X8]
	0x03B4F324 BL 0x212EF58
	0x03B4F328 MOV X0, X19
	0x03B4F32C BL 0x3B52688
	0x03B4F330 LDR X0, [X19 + 0x180]
	0x03B4F334 CBZ X0, 0x3B4F3D4
	0x03B4F338 MOV X1, X31
	0x03B4F33C BL 0x3C45AB0
	0x03B4F340 CMP W0, 0x0
	0x03B4F344 B.GT 0x3B4F390
	0x03B4F348 LDR X0, [X19 + 0x188]
	0x03B4F34C CBZ X0, 0x3B4F3D4
	0x03B4F350 MOV X1, X31
	0x03B4F354 BL 0x3C45AB0
	0x03B4F358 CMP W0, 0x0
	0x03B4F35C B.GT 0x3B4F390
	0x03B4F360 LDR X0, [X19 + 0x190]
	0x03B4F364 CBZ X0, 0x3B4F3D4
	0x03B4F368 MOV X1, X31
	0x03B4F36C BL 0x3C45AB0
	0x03B4F370 CMP W0, 0x0
	0x03B4F374 B.GT 0x3B4F390
	0x03B4F378 LDR X0, [X19 + 0x198]
	0x03B4F37C CBZ X0, 0x3B4F3D4
	0x03B4F380 MOV X1, X31
	0x03B4F384 BL 0x3C45AB0
	0x03B4F388 CMP W0, 0x1
	0x03B4F38C B.LT 0x3B4F3C8

ISIL:
	001 Subtract X31, X31, 128
	002 Move [X31+16], D15
	003 Move [X31+24], D14
	004 Move [X31+32], D13
	005 Move [X31+40], D12
	006 Move [X31+48], D11
	007 Move [X31+56], D10
	008 Move [X31+64], D9
	009 Move [X31+72], D8
	010 Move [X31+80], X30
	011 Move [X31+88], X23
	012 Move [X31+96], X22
	013 Move [X31+104], X21
	014 Move [X31+112], X20
	015 Move [X31+120], X19
	016 Move X20, 0x895000
	017 Move X21, 0x5A6000
	018 Move W8, [X20+2270]
	019 Move X21, [X21+1432]
	020 Move X19, X0
	021 Move TEMP, X8
	022 And TEMP, TEMP, 1
	023 Compare TEMP, 1
	024 JumpIfEqual {30}
	025 Move X0, 0x5A6000
	026 Move X0, [X0+1432]
	027 Call 0x1C17CF4
	028 Move W8, 1
	029 Move [X20+2270], W8
	030 Move X0, [X21]
	031 Move X20, [X19+96]
	032 Move W8, [X0+224]
	033 Compare W8, 0
	034 JumpIfNotEqual {36}
	035 Call 0x1C17DFC
	036 Move X0, X20
	037 Move X1, X31
	038 Move X2, X31
	039 Call Object.op_Inequality, X0, X1
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {104}
	044 Move X0, [X19+96]
	045 Compare X0, 0
	046 JumpIfEqual {409}
	047 Move X1, X31
	048 Call GameObject.get_transform, X0
	049 Compare X0, 0
	050 JumpIfEqual {409}
	051 Move S1, [X19+116]
	052 Move S2, [X19+120]
	053 Move V0, [X19+112]
	054 Move X1, X31
	055 Call Transform.set_position, X0, X1
	056 Move X0, [X21]
	057 Move X20, [X19+88]
	058 Move W8, [X0+224]
	059 Compare W8, 0
	060 JumpIfNotEqual {62}
	061 Call 0x1C17DFC
	062 Move X0, X20
	063 Move X1, X31
	064 Move X2, X31
	065 Call Object.op_Inequality, X0, X1
	066 Move X22, 0x5A6000
	067 Move X22, [X22+1440]
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {120}
	072 Move X8, [X19+88]
	073 Compare X8, 0
	074 JumpIfEqual {409}
	075 Move X0, [X21]
	076 Move X20, [X8+56]
	077 Move W9, [X0+224]
	078 Compare W9, 0
	079 JumpIfNotEqual {81}
	080 Call 0x1C17DFC
	081 Move X0, X20
	082 Move X1, X31
	083 Move X2, X31
	084 Call Object.op_Inequality, X0, X1
	085 Move TEMP, X0
	086 And TEMP, TEMP, 1
	087 Compare TEMP, 1
	088 JumpIfNotEqual {120}
	089 Move X8, [X19+88]
	090 Compare X8, 0
	091 JumpIfEqual {409}
	092 Move X0, [X8+56]
	093 Compare X0, 0
	094 JumpIfEqual {409}
	095 Move X1, X31
	096 Call GameObject.get_transform, X0
	097 Compare X0, 0
	098 JumpIfEqual {409}
	099 Move X1, X31
	100 Call Transform.get_up, X0
	101 Move V8, V0
	102 Move V9, V1
	103 Move V10, V2
	104 Move X20, [X31+112]
	105 Move X19, [X31+120]
	106 Move X22, [X31+96]
	107 Move X21, [X31+104]
	108 Move X30, [X31+80]
	109 Move X23, [X31+88]
	110 Move D9, [X31+64]
	111 Move D8, [X31+72]
	112 Move D11, [X31+48]
	113 Move D10, [X31+56]
	114 Move D13, [X31+32]
	115 Move D12, [X31+40]
	116 Move D15, [X31+16]
	117 Move D14, [X31+24]
	118 Add X31, X31, 128
	119 Return 
	120 Move X20, 0x88B000
	121 Move W8, [X20+1926]
	122 Compare W8, 0
	123 JumpIfNotEqual {129}
	124 Move X0, 0x5A6000
	125 Move X0, [X0+1440]
	126 Call 0x1C17CF4
	127 Move W8, 1
	128 Move [X20+1926], W8
	129 Move X8, [X22]
	130 Move X8, [X8+184]
	131 Move S8, [X8+24]
	132 Move S9, [X8+28]
	133 Move V10, [X8+32]
	134 Move X21, 0x5A6000
	135 Move W8, [X19+53]
	136 Move X21, [X21+1448]
	137 Compare W8, 0
	138 JumpIfEqual {260}
	139 Move W8, [X19+140]
	140 Compare W8, 0
	141 JumpIfEqual {260}
	142 Move S0, [X19+124]
	143 Move S1, [X19+128]
	144 Move V2, [X19+132]
	145 Move X20, 0x88C000
	146 Move W8, [X20+1450]
	147 Multiply S0, S8, S0
	148 Multiply S1, S9, S1
	149 Add S0, S0, S1
	150 Multiply S1, S10, S2
	151 Add S11, S1, S0
	152 NotImplemented "Instruction FABS not yet implemented."
	153 Compare W8, 0
	154 JumpIfNotEqual {160}
	155 Move X0, 0x5AC000
	156 Move X0, [X0+1208]
	157 Call 0x1C17CF4
	158 Move W8, 1
	159 Move [X20+1450], W8
	160 Move X20, 0x5AC000
	161 Move X20, [X20+1208]
	162 Move X9, -50741248
	163 Move V1, [X9+576]
	164 Move S0, 1
	165 Move X8, [X20]
	166 Move S3, 8
	167 NotImplemented "Instruction FMAXNM not yet implemented."
	168 Multiply S1, S4, S1
	169 Move X8, [X8+184]
	170 NotImplemented "Instruction FABD not yet implemented."
	171 Move V2, [X8]
	172 Multiply S2, S2, S3
	173 NotImplemented "Instruction FCMP not yet implemented."
	174 NotImplemented "Instruction FCSEL not yet implemented."
	175 NotImplemented "Instruction FCMP not yet implemented."
	176 Move X0, [X19+104]
	177 Compare X0, 0
	178 JumpIfEqual {409}
	179 Move X1, X31
	180 Call Component.get_transform, X0
	181 Compare X0, 0
	182 JumpIfEqual {409}
	183 Move X1, X31
	184 Call Transform.get_forward, X0
	185 Multiply S8, S11, S0
	186 Multiply S9, S11, S1
	187 Multiply S10, S11, S2
	188 Move X23, 0x88A000
	189 Move S13, [X19+124]
	190 Move S11, [X19+128]
	191 Move W8, [X23+3641]
	192 Move V12, [X19+132]
	193 Compare W8, 0
	194 JumpIfNotEqual {200}
	195 Move X0, 0x5AC000
	196 Move X0, [X0+1208]
	197 Call 0x1C17CF4
	198 Move W8, 1
	199 Move [X23+3641], W8
	200 Move X8, [X20]
	201 Multiply S0, S13, S13
	202 Multiply S1, S11, S11
	203 Add S0, S0, S1
	204 Move X8, [X8+184]
	205 Multiply S1, S12, S12
	206 Add S0, S1, S0
	207 Move V2, [X8]
	208 NotImplemented "Instruction FCMP not yet implemented."
	209 Multiply S1, S8, S13
	210 Multiply S2, S9, S11
	211 Multiply S3, S10, S12
	212 Add S1, S1, S2
	213 Add S1, S3, S1
	214 Multiply S2, S13, S1
	215 Multiply S3, S11, S1
	216 Multiply S1, S12, S1
	217 NotImplemented "Instruction FDIV not yet implemented."
	218 NotImplemented "Instruction FDIV not yet implemented."
	219 NotImplemented "Instruction FDIV not yet implemented."
	220 Subtract S8, S8, S2
	221 Subtract S9, S9, S3
	222 Subtract S10, S10, S0
	223 Move X20, 0x88A000
	224 Move W8, [X20+1923]
	225 Compare W8, 0
	226 JumpIfNotEqual {232}
	227 Move X0, 0x5A5000
	228 Move X0, [X0+1440]
	229 Call 0x1C17CF4
	230 Move W8, 1
	231 Move [X20+1923], W8
	232 Move X8, [X22]
	233 Move X8, [X8+184]
	234 Move S0, [X8]
	235 Move S1, [X8+4]
	236 Move V2, [X8+8]
	237 Move X8, -50745344
	238 Subtract S0, S8, S0
	239 Subtract S1, S9, S1
	240 Multiply S0, S0, S0
	241 Multiply S1, S1, S1
	242 Add S0, S0, S1
	243 Move V1, [X8+3872]
	244 Subtract S2, S10, S2
	245 Multiply S2, S2, S2
	246 Add S0, S2, S0
	247 NotImplemented "Instruction FCMP not yet implemented."
	248 Move X0, [X19+96]
	249 Compare X0, 0
	250 JumpIfEqual {409}
	251 Move X1, X31
	252 Call GameObject.get_transform, X0
	253 Move S3, [X19+124]
	254 Move S4, [X19+128]
	255 Move V5, [X19+132]
	256 Move X20, X0
	257 Move V0, V8
	258 Move V1, V9
	259 Move V2, V10
	260 Move X0, [X19+96]
	261 Compare X0, 0
	262 JumpIfEqual {409}
	263 Move X1, X31
	264 Call GameObject.get_transform, X0
	265 Move X8, [X19+104]
	266 Compare X8, 0
	267 JumpIfEqual {409}
	268 Move X20, X0
	269 Move X0, [X8+80]
	270 Move [X31+12], S10
	271 Compare X0, 0
	272 JumpIfEqual {409}
	273 Move X1, X31
	274 Move V10, V9
	275 Move V9, V8
	276 Call Transform.get_position, X0
	277 Move X23, 0x88A000
	278 Move S14, [X19+112]
	279 Move S15, [X19+116]
	280 Move W8, [X23+1925]
	281 Move V8, [X19+120]
	282 Move V11, V0
	283 Move V12, V1
	284 Move V13, V2
	285 Compare W8, 0
	286 JumpIfNotEqual {292}
	287 Move X0, 0x5A5000
	288 Move X0, [X0+1448]
	289 Call 0x1C17CF4
	290 Move W8, 1
	291 Move [X23+1925], W8
	292 Move X0, [X21]
	293 Subtract S14, S11, S14
	294 Subtract S12, S12, S15
	295 Subtract S11, S13, S8
	296 Move W8, [X0+224]
	297 Compare W8, 0
	298 JumpIfNotEqual {300}
	299 Call 0x1C17DFC
	300 Multiply S0, S14, S14
	301 Multiply S1, S12, S12
	302 Move X8, -50741248
	303 Add S0, S0, S1
	304 Move V1, [X8+380]
	305 Multiply S2, S11, S11
	306 Add S0, S2, S0
	307 NotImplemented "Instruction FSQRT not yet implemented."
	308 NotImplemented "Instruction FCMP not yet implemented."
	309 NotImplemented "Instruction FDIV not yet implemented."
	310 NotImplemented "Instruction FDIV not yet implemented."
	311 NotImplemented "Instruction FDIV not yet implemented."
	312 Move X23, 0x88A000
	313 Move W8, [X23+1923]
	314 Compare W8, 0
	315 JumpIfNotEqual {321}
	316 Move X0, 0x5A5000
	317 Move X0, [X0+1440]
	318 Call 0x1C17CF4
	319 Move W8, 1
	320 Move [X23+1923], W8
	321 Move X8, [X22]
	322 Move X8, [X8+184]
	323 Move S3, [X8]
	324 Move S4, [X8+4]
	325 Move V5, [X8+8]
	326 Move V2, [X31+12]
	327 Move V0, V9
	328 Move V1, V10
	329 Move X0, X31
	330 Call Quaternion.LookRotation, X0, X1
	331 Compare X20, 0
	332 JumpIfEqual {409}
	333 Move X0, X20
	334 Move X1, X31
	335 Call Transform.set_rotation, X0, X1
	336 Move W8, [X19+52]
	337 Move V8, [X19+48]
	338 Compare W8, 0
	339 JumpIfEqual {378}
	340 Move X8, [X19+104]
	341 Compare X8, 0
	342 JumpIfEqual {409}
	343 Move X0, [X8+80]
	344 Compare X0, 0
	345 JumpIfEqual {409}
	346 Move X1, X31
	347 Call Transform.get_position, X0
	348 Move X20, 0x88A000
	349 Move S12, [X19+112]
	350 Move S13, [X19+116]
	351 Move W8, [X20+2140]
	352 Move V14, [X19+120]
	353 Move V9, V0
	354 Move V10, V1
	355 Move V11, V2
	356 Compare W8, 0
	357 JumpIfNotEqual {363}
	358 Move X0, 0x5A5000
	359 Move X0, [X0+1448]
	360 Call 0x1C17CF4
	361 Move W8, 1
	362 Move [X20+2140], W8
	363 Move X0, [X21]
	364 Subtract S12, S9, S12
	365 Subtract S10, S10, S13
	366 Subtract S9, S11, S14
	367 Move W8, [X0+224]
	368 Compare W8, 0
	369 JumpIfNotEqual {371}
	370 Call 0x1C17DFC
	371 Multiply S0, S12, S12
	372 Multiply S1, S10, S10
	373 Add S0, S0, S1
	374 Multiply S1, S9, S9
	375 Add S0, S1, S0
	376 NotImplemented "Instruction FSQRT not yet implemented."
	377 Multiply S8, S8, S0
	378 Move X0, [X19+96]
	379 Compare X0, 0
	380 JumpIfEqual {409}
	381 Move X1, X31
	382 Call GameObject.get_transform, X0
	383 Compare X0, 0
	384 JumpIfEqual {409}
	385 Move V0, V8
	386 Move V1, V8
	387 Move V2, V8
	388 Move X1, X31
	389 Call Transform.set_localScale, X0, X1
	390 Move X0, X19
	391 Move X20, [X31+112]
	392 Move X19, [X31+120]
	393 Move X22, [X31+96]
	394 Move X21, [X31+104]
	395 Move X30, [X31+80]
	396 Move X23, [X31+88]
	397 Move D9, [X31+64]
	398 Move D8, [X31+72]
	399 Move D11, [X31+48]
	400 Move D10, [X31+56]
	401 Move D13, [X31+32]
	402 Move D12, [X31+40]
	403 Move D15, [X31+16]
	404 Move D14, [X31+24]
	405 Move W1, 1
	406 Add X31, X31, 128
	407 Call XRInteractorReticleVisual.set_reticleActive, X0, X1
	408 Return 
	409 Call 0x1C17F20

Method: System.Void OnSelectEntered(UnityEngine.XR.Interaction.Toolkit.SelectEnterEventArgs args)

Disassembly:
	0x03B4FC00 B 0x3B4FC14
	0x03B4FC04 LDR W9, [X10]

ISIL:
	001 Move W1, W31
	002 Call XRInteractorReticleVisual.set_reticleActive, X0, X1
	003 Return 

Method: System.Void .ctor()

Disassembly:
	0x03B4FC08 ADD W9, W9, 0x3
	0x03B4FC0C ADD X8, X8, W9, 0x4, SXTW
	0x03B4FC10 ADD X0, X8, 0x138
	0x03B4FC14 LDP X8, X2, [X0]
	0x03B4FC18 MOV X0, X20
	0x03B4FC1C MOV X1, X21
	0x03B4FC20 BLR X8
	0x03B4FC24 MOV X21, X31
	0x03B4FC28 LDR X1, [X23]
	0x03B4FC2C ADD X0, X31, 0x28
	0x03B4FC30 BL 0x24A6DD0
	0x03B4FC34 CBZ X21, 0x3B4FB10
	0x03B4FC38 B 0x3B4FCA4
	0x03B4FC3C BL 0x1C16F20
	0x03B4FC40 B 0x3B4FCD4
	0x03B4FC44 BL 0x1C16F20
	0x03B4FC48 B 0x3B4FCD4
	0x03B4FC4C B 0x3B4FC54
	0x03B4FC50 B 0x3B4FC54
	0x03B4FC54 MOV X8, X1
	0x03B4FC58 MOV X20, X0
	0x03B4FC5C CMP W8, 0x1
	0x03B4FC60 STR X1, [X31 + 0x8]
	0x03B4FC64 B.NE 0x3B4FCB0
	0x03B4FC68 MOV X0, X20
	0x03B4FC6C BL 0x3EB1AD0
	0x03B4FC70 LDR X21, [X0]
	0x03B4FC74 BL 0x3EB1AE0
	0x03B4FC78 B 0x3B4FC28
	0x03B4FC7C LDR X1, [X22]
	0x03B4FC80 ADD X0, X31, 0x40
	0x03B4FC84 BL 0x2BC434C
	0x03B4FC88 LDP X20, X19, [X31 + 0xA0]
	0x03B4FC8C LDP X22, X21, [X31 + 0x90]
	0x03B4FC90 LDP X24, X23, [X31 + 0x80]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x894000
	006 Move X20, 0x5AB000
	007 Move W8, [X21+2271]
	008 Move X20, [X20+1160]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5AB000
	015 Move X0, [X0+1160]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2271], W8
	019 Move W11, 0xD70A
	020 Move W8, 0x41200000
	021 Move W9, 0x3F800000
	022 Move W10, 257
	023 NotImplemented "Instruction MOVK not yet implemented."
	024 Move TEMP, 0
	025 Not TEMP
	026 Move W0, TEMP
	027 Move X1, X31
	028 Move [X19+32], W8
	029 Move [X19+48], W9
	030 NotImplemented "Instruction STRH not yet implemented."
	031 Move [X19+56], W11
	032 Call LayerMask.op_Implicit, X0
	033 Move [X19+64], W0
	034 Move X0, [X20]
	035 Move W1, 10
	036 Call 0x1C17D6C
	037 Move [X19+144], X0
	038 Move X0, X19
	039 Move X20, [X31+16]
	040 Move X19, [X31+24]
	041 Move X1, X31
	042 Move X30, [X31+32]
	043 Move X21, [X31+40]
	044 Call MonoBehaviour..ctor, X0
	045 Return 

