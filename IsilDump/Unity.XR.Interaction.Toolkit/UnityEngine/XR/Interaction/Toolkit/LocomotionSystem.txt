Type: UnityEngine.XR.Interaction.Toolkit.LocomotionSystem

Method: System.Single get_timeout()

Disassembly:
	0x03B80604 CBZ W8, 0x3B80634
	0x03B80608 MOVZ W8, 0x43340000

ISIL:
	001 Move V0, [X0+44]
	002 Return V0

Method: System.Void set_timeout(System.Single value)

Disassembly:
	0x03B8060C FMOV S8, W8
	0x03B80610 B 0x3B80634

ISIL:
	001 Move [X0+44], S0
	002 Return 

Method: Unity.XR.CoreUtils.XROrigin get_xrOrigin()

Disassembly:
	0x03B80614 LDRB W8, [X19 + 0x50]
	0x03B80618 CBZ W8, 0x3B80634

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_xrOrigin(Unity.XR.CoreUtils.XROrigin value)

Disassembly:
	0x03B8061C LDR V0, [X19 + 0x48]
	0x03B80620 FNEG S8, S0

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Boolean get_busy()

Disassembly:
	0x03B80288 LDR W8, [X19 + 0x38]
	0x03B8028C CMP W8, 0x3
	0x03B80290 B.NE 0x3B80298
	0x03B80294 STR W31, [X19 + 0x38]
	0x03B80298 LDR X8, [X19]
	0x03B8029C MOV X0, X19
	0x03B802A0 LDP X9, X1, [X8 + 0x188]
	0x03B802A4 BLR X9
	0x03B802A8 LDR X8, [X19]
	0x03B802AC MOV X0, X19
	0x03B802B0 LDP X9, X1, [X8 + 0x198]
	0x03B802B4 BLR X9
	0x03B802B8 MOV V8.16B, V0.16B
	0x03B802BC FCMP S0, 0x0
	0x03B802C0 B.MI 0x3B802D4
	0x03B802C4 B.GT 0x3B802D4
	0x03B802C8 LDR W8, [X19 + 0x38]
	0x03B802CC CMP W8, 0x1
	0x03B802D0 B.NE 0x3B80370
	0x03B802D4 MOV X0, X19
	0x03B802D8 MOV V0.16B, V8.16B
	0x03B802DC BL 0x3B80484
	0x03B802E0 LDR W8, [X19 + 0x38]
	0x03B802E4 CMP W8, 0x2

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x863000
	006 Move X20, 0x574000
	007 Move W8, [X21+2756]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x574000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2756], W8
	019 Move X0, [X20]
	020 Move X19, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X19
	026 Move X20, [X31+16]
	027 Move X19, [X31+24]
	028 Move X1, X31
	029 Move X2, X31
	030 Move X30, [X31+32]
	031 Move X21, [X31+40]
	032 Call Object.op_Inequality, X0, X1
	033 Return X0

Method: System.Void Awake()

Disassembly:
	0x03B80624 B 0x3B80634
	0x03B80628 LDRB W8, [X19 + 0x50]
	0x03B8062C CBZ W8, 0x3B80634
	0x03B80630 LDR V8, [X19 + 0x48]
	0x03B80634 MOV V0.16B, V8.16B
	0x03B80638 LDP X20, X19, [X31 + 0x20]
	0x03B8063C LDR X30, [X31 + 0x18]
	0x03B80640 LDP D9, D8, [X31 + 0x8]
	0x03B80644 LDR V10, [X31], #0x30
	0x03B80648 RET
	0x03B8064C LDR V0, [X0 + 0x48]
	0x03B80650 ANDS W31, W1, 0x1
	0x03B80654 FNEG S1, S0
	0x03B80658 FCSEL S0, S1, S0, NE
	0x03B8065C B 0x3B80484
	0x03B80660 MOVZ W8, 0x43340000
	0x03B80664 FMOV S0, W8
	0x03B80668 B 0x3B80484
	0x03B8066C SUB X31, X31, 0xD0
	0x03B80670 STP D15, D14, [X31 + 0x60]
	0x03B80674 STP D13, D12, [X31 + 0x70]
	0x03B80678 STP D11, D10, [X31 + 0x80]
	0x03B8067C STP D9, D8, [X31 + 0x90]
	0x03B80680 STP X30, X23, [X31 + 0xA0]
	0x03B80684 STP X22, X21, [X31 + 0xB0]
	0x03B80688 STP X20, X19, [X31 + 0xC0]
	0x03B8068C STP S5, S1, [X31 + 0x58]
	0x03B80690 STR S3, [X31 + 0x10]
	0x03B80694 LDP S3, S1, [X2]
	0x03B80698 STR S2, [X31 + 0x2C]
	0x03B8069C LDR V2, [X2 + 0x8]
	0x03B806A0 LDR V8, [X1]
	0x03B806A4 LDR V9, [X1 + 0x8]
	0x03B806A8 LDR V11, [X0]
	0x03B806AC LDR V12, [X0 + 0x8]
	0x03B806B0 STR S0, [X31 + 0x54]
	0x03B806B4 MOV V0.16B, V3.16B
	0x03B806B8 MOV X0, X31
	0x03B806BC MOV X19, X3
	0x03B806C0 MOV V10.16B, V4.16B
	0x03B806C4 MOV X20, X2
	0x03B806C8 BL 0x3887BE4
	0x03B806CC ADRP X21, 0x861000
	0x03B806D0 LDRB W8, [X21 + 0x585]
	0x03B806D4 STP S1, S0, [X31 + 0x4C]
	0x03B806D8 STR S2, [X31 + 0x48]
	0x03B806DC CBNZ W8, 0x3B806F4
	0x03B806E0 ADRP X0, 0x573000
	0x03B806E4 LDR X0, [X0 + 0x5A8]
	0x03B806E8 BL 0x1C16CF4
	0x03B806EC MOVZ W8, 0x1
	0x03B806F0 STRB W8, [X21 + 0x585]
	0x03B806F4 STR S10, [X31 + 0x14]
	0x03B806F8 ADRP X22, 0x573000
	0x03B806FC LDR X22, [X22 + 0x5A8]
	0x03B80700 LDR X0, [X22]
	0x03B80704 LDR W8, [X0 + 0xE0]
	0x03B80708 CBNZ W8, 0x3B80710
	0x03B8070C BL 0x1C16DFC

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X19, 0x863000
	007 Move X22, 0x574000
	008 Move W8, [X19+2757]
	009 Move X22, [X22+1432]
	010 Move X20, X0
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {26}
	015 Move X0, 0x5DB000
	016 Move X0, [X0+2424]
	017 Call 0x1C17CF4
	018 Move X0, 0x5DB000
	019 Move X0, [X0+3328]
	020 Call 0x1C17CF4
	021 Move X0, 0x574000
	022 Move X0, [X0+1432]
	023 Call 0x1C17CF4
	024 Move W8, 1
	025 Move [X19+2757], W8
	026 Move X19, X20
	027 Add X19, X19, 48
	028 Move X21, [X19]
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Move X1, X31
	036 Move X2, X31
	037 Call Object.op_Equality, X0, X1
	038 Move TEMP, X0
	039 And TEMP, TEMP, 1
	040 Compare TEMP, 1
	041 JumpIfNotEqual {73}
	042 Move X8, 0x5DB000
	043 Move X8, [X8+3328]
	044 Move X0, X20
	045 Move X1, [X8]
	046 Call 0x21A4F50, X0
	047 Move [X20+48], X0
	048 Move X21, X0
	049 Move X0, [X22]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move X1, X31
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {73}
	062 Move X8, 0x5DB000
	063 Move X8, [X8+2424]
	064 Move X0, X19
	065 Move X20, [X31+32]
	066 Move X19, [X31+40]
	067 Move X22, [X31+16]
	068 Move X21, [X31+24]
	069 Move X1, [X8]
	070 Move X30, [X31+48]
	071 Call 0x2960A30, X0
	072 Return 
	073 Move X20, [X31+32]
	074 Move X19, [X31+40]
	075 Move X22, [X31+16]
	076 Move X21, [X31+24]
	077 Move X30, [X31+48]
	078 Return 

Method: System.Void Update()

Disassembly:
	0x03B80710 LDP S0, S1, [X20]
	0x03B80714 LDR V2, [X20 + 0x8]
	0x03B80718 MOV X0, X31
	0x03B8071C BL 0x3887BE4
	0x03B80720 LDRB W8, [X21 + 0x585]
	0x03B80724 MOV V10.16B, V0.16B
	0x03B80728 MOV V13.16B, V1.16B
	0x03B8072C MOV V15.16B, V2.16B
	0x03B80730 CBNZ W8, 0x3B80748
	0x03B80734 ADRP X0, 0x573000
	0x03B80738 LDR X0, [X0 + 0x5A8]
	0x03B8073C BL 0x1C16CF4
	0x03B80740 MOVZ W8, 0x1
	0x03B80744 STRB W8, [X21 + 0x585]
	0x03B80748 LDR X0, [X22]
	0x03B8074C FSUB V0.2S, V8.2S, V11.2S
	0x03B80750 FSUB S8, S9, S12
	0x03B80754 STR V0, [X31 + 0x3]
	0x03B80758 LDR W8, [X0 + 0xE0]
	0x03B8075C CBNZ W8, 0x3B80768
	0x03B80760 BL 0x1C16DFC
	0x03B80764 LDR V0, [X31 + 0x3]
	0x03B80768 FMUL S1, S10, S10
	0x03B8076C FMUL S2, S13, S13
	0x03B80770 FMUL S4, S15, S15
	0x03B80774 FADD S1, S1, S2
	0x03B80778 FADD S1, S4, S1
	0x03B8077C FMOV S3, 1
	0x03B80780 FSQRT S1, S1
	0x03B80784 FDIV S12, S3, S1
	0x03B80788 MOV S1, V0.S[1]
	0x03B8078C MOV V2.16B, V8.16B
	0x03B80790 MOV X0, X31
	0x03B80794 STP S8, S1, [X31 + 0x18]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x863000
	006 Move X20, 0x574000
	007 Move W8, [X21+2758]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x574000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2758], W8
	019 Move X0, [X20]
	020 Move X20, [X19+32]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {41}
	033 Move X0, X31
	034 Call Time.get_time
	035 Move S1, [X19+40]
	036 Move S2, [X19+44]
	037 Add S1, S1, S2
	038 NotImplemented "Instruction FCMP not yet implemented."
	039 Move [X19+32], X31
	040 Move [X19+40], W31
	041 Move X20, [X31+16]
	042 Move X19, [X31+24]
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return 

Method: UnityEngine.XR.Interaction.Toolkit.RequestResult RequestExclusiveOperation(UnityEngine.XR.Interaction.Toolkit.LocomotionProvider provider)

Disassembly:
	0x03B802E8 B.NE 0x3B80470
	0x03B802EC ADRP X8, 0x573000
	0x03B802F0 LDR X8, [X8 + 0x5A8]
	0x03B802F4 LDR V9, [X19 + 0x58]
	0x03B802F8 LDR X0, [X8]
	0x03B802FC LDR W8, [X0 + 0xE0]
	0x03B80300 CBNZ W8, 0x3B80308
	0x03B80304 BL 0x1C16DFC
	0x03B80308 FCMP S9, 0x0
	0x03B8030C B.EQ 0x3B80470
	0x03B80310 B.VS 0x3B80470
	0x03B80314 MOV X0, X19
	0x03B80318 BL 0x3B7B060
	0x03B8031C TBZ X0, 0x0, 0x3B80470
	0x03B80320 LDR X8, [X19 + 0x30]
	0x03B80324 CBZ X8, 0x3B80480
	0x03B80328 ADRP X9, 0x573000
	0x03B8032C LDR X9, [X9 + 0x598]
	0x03B80330 LDR X20, [X8 + 0x30]
	0x03B80334 LDR X0, [X9]
	0x03B80338 LDR W9, [X0 + 0xE0]
	0x03B8033C CBNZ W9, 0x3B80344
	0x03B80340 BL 0x1C16DFC
	0x03B80344 MOV X0, X20
	0x03B80348 MOV X1, X31
	0x03B8034C MOV X2, X31
	0x03B80350 BL 0x3C354F8
	0x03B80354 TBZ X0, 0x0, 0x3B803EC
	0x03B80358 CBZ X20, 0x3B80480
	0x03B8035C LDR V0, [X19 + 0x58]
	0x03B80360 MOV X0, X20
	0x03B80364 MOV X1, X31
	0x03B80368 BL 0x3B2FA64
	0x03B8036C B 0x3B803F4
	0x03B80370 ADRP X20, 0x859000
	0x03B80374 LDRB W8, [X20 + 0x5AA]
	0x03B80378 LDR V9, [X19 + 0x58]
	0x03B8037C CBNZ W8, 0x3B80394
	0x03B80380 ADRP X0, 0x57A000
	0x03B80384 LDR X0, [X0 + 0x4B8]
	0x03B80388 BL 0x1C16CF4
	0x03B8038C MOVZ W8, 0x1
	0x03B80390 STRB W8, [X20 + 0x5AA]
	0x03B80394 ADRP X8, 0x57A000
	0x03B80398 LDR X8, [X8 + 0x4B8]
	0x03B8039C ADRP X9, 0xFFFFFFFFFCF6A000
	0x03B803A0 LDR V0, [X9 + 0x240]
	0x03B803A4 FABS S1, S9
	0x03B803A8 LDR X8, [X8]
	0x03B803AC FMOV S2, W31
	0x03B803B0 FMAXNM S1, S1, S2
	0x03B803B4 FMUL S0, S1, S0
	0x03B803B8 LDR X8, [X8 + 0xB8]
	0x03B803BC FMOV S1, 8
	0x03B803C0 LDR V3, [X8]
	0x03B803C4 FMUL S1, S3, S1
	0x03B803C8 FCMP S0, S1
	0x03B803CC FCSEL S0, S0, S1, GT

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x863000
	007 Move X22, 0x574000
	008 Move W8, [X21+2759]
	009 Move X22, [X22+1432]
	010 Move X19, X1
	011 Move X20, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x574000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2759], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X19
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfNotEqual {35}
	034 Move W0, 2
	035 Move X0, [X22]
	036 Move X21, [X20+32]
	037 Move W8, [X0+224]
	038 Compare W8, 0
	039 JumpIfNotEqual {41}
	040 Call 0x1C17DFC
	041 Move X0, X21
	042 Move X1, X31
	043 Move X2, X31
	044 Call Object.op_Equality, X0, X1
	045 Move TEMP, X0
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {54}
	049 Move X0, X31
	050 Move [X20+32], X19
	051 Call Time.get_time
	052 Move W0, W31
	053 Move [X20+40], S0
	054 Move X0, [X22]
	055 Move X20, [X20+32]
	056 Move W8, [X0+224]
	057 Compare W8, 0
	058 JumpIfNotEqual {60}
	059 Call 0x1C17DFC
	060 Move X0, X20
	061 Move X1, X19
	062 Move X2, X31
	063 Call Object.op_Inequality, X0, X1
	064 And W31, W0, 1
	065 Move W8, 1
	066 NotImplemented "Instruction CINC not yet implemented."
	067 Move X20, [X31+32]
	068 Move X19, [X31+40]
	069 Move X22, [X31+16]
	070 Move X21, [X31+24]
	071 Move X30, [X31+48]
	072 Return X0

Method: System.Void ResetExclusivity()

Disassembly:
	0x03B80798 BL 0x3887BE4
	0x03B8079C LDRB W8, [X21 + 0x585]
	0x03B807A0 MOV V8.16B, V0.16B

ISIL:
	001 Move [X0+32], X31
	002 Move [X0+40], W31
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.RequestResult FinishExclusiveOperation(UnityEngine.XR.Interaction.Toolkit.LocomotionProvider provider)

Disassembly:
	0x03B803D0 FABD S1, S2, S2
	0x03B803D4 FCMP S1, S0
	0x03B803D8 B.PL 0x3B802E0
	0x03B803DC LDR W8, [X19 + 0x38]
	0x03B803E0 CMP W8, 0x2
	0x03B803E4 B.EQ 0x3B80468
	0x03B803E8 B 0x3B80470
	0x03B803EC MOVZ W8, 0x3
	0x03B803F0 STR W8, [X19 + 0x38]
	0x03B803F4 MOV X0, X19
	0x03B803F8 STR W31, [X19 + 0x58]
	0x03B803FC BL 0x3B7B484
	0x03B80400 ADRP X20, 0x859000
	0x03B80404 LDRB W8, [X20 + 0x5AA]
	0x03B80408 CBNZ W8, 0x3B80420
	0x03B8040C ADRP X0, 0x57A000
	0x03B80410 LDR X0, [X0 + 0x4B8]
	0x03B80414 BL 0x1C16CF4
	0x03B80418 MOVZ W8, 0x1
	0x03B8041C STRB W8, [X20 + 0x5AA]
	0x03B80420 ADRP X8, 0x57A000
	0x03B80424 LDR X8, [X8 + 0x4B8]
	0x03B80428 ADRP X9, 0xFFFFFFFFFCF6A000
	0x03B8042C LDR V0, [X9 + 0x240]
	0x03B80430 FABS S1, S8
	0x03B80434 LDR X8, [X8]
	0x03B80438 FMOV S2, W31
	0x03B8043C FMAXNM S1, S1, S2
	0x03B80440 FMUL S0, S1, S0
	0x03B80444 LDR X8, [X8 + 0xB8]
	0x03B80448 FMOV S1, 8
	0x03B8044C LDR V3, [X8]
	0x03B80450 FMUL S1, S3, S1
	0x03B80454 FCMP S0, S1
	0x03B80458 FCSEL S0, S0, S1, GT
	0x03B8045C FABD S1, S2, S2
	0x03B80460 FCMP S1, S0
	0x03B80464 B.PL 0x3B80470
	0x03B80468 MOVZ W8, 0x3
	0x03B8046C STR W8, [X19 + 0x38]
	0x03B80470 LDP X20, X19, [X31 + 0x20]
	0x03B80474 LDR X30, [X31 + 0x10]
	0x03B80478 LDP D9, D8, [X31], #0x30
	0x03B8047C RET
	0x03B80480 BL 0x1C16F20
	0x03B80484 STR D8, [X31 - 0x20]!
	0x03B80488 STR X30, [X31 + 0x8]
	0x03B8048C STP X20, X19, [X31 + 0x10]
	0x03B80490 ADRP X20, 0x862000
	0x03B80494 LDRB W8, [X20 + 0xAD2]
	0x03B80498 MOV V8.16B, V0.16B
	0x03B8049C MOV X19, X0
	0x03B804A0 TBNZ X8, 0x0, 0x3B804B8

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x863000
	007 Move X22, 0x574000
	008 Move W8, [X21+2760]
	009 Move X22, [X22+1432]
	010 Move X20, X1
	011 Move X19, X0
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x574000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2760], W8
	021 Move X0, [X22]
	022 Move W8, [X0+224]
	023 Compare W8, 0
	024 JumpIfNotEqual {26}
	025 Call 0x1C17DFC
	026 Move X0, X20
	027 Move X1, X31
	028 Move X2, X31
	029 Call Object.op_Equality, X0, X1
	030 Move TEMP, X0
	031 And TEMP, TEMP, 1
	032 Compare TEMP, 1
	033 JumpIfEqual {65}
	034 Move X0, [X22]
	035 Move X21, [X19+32]
	036 Move W8, [X0+224]
	037 Compare W8, 0
	038 JumpIfNotEqual {40}
	039 Call 0x1C17DFC
	040 Move X0, X21
	041 Move X1, X31
	042 Move X2, X31
	043 Call Object.op_Equality, X0, X1
	044 Move TEMP, X0
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfEqual {65}
	048 Move X0, [X22]
	049 Move X21, [X19+32]
	050 Move W8, [X0+224]
	051 Compare W8, 0
	052 JumpIfNotEqual {54}
	053 Call 0x1C17DFC
	054 Move X0, X21
	055 Move X1, X20
	056 Move X2, X31
	057 Call Object.op_Equality, X0, X1
	058 Move TEMP, X0
	059 And TEMP, TEMP, 1
	060 Compare TEMP, 1
	061 JumpIfNotEqual {65}
	062 Move W0, W31
	063 Move [X19+32], X31
	064 Move [X19+40], W31
	065 Move W0, 2
	066 Move X20, [X31+32]
	067 Move X19, [X31+40]
	068 Move X22, [X31+16]
	069 Move X21, [X31+24]
	070 Move X30, [X31+48]
	071 Return X0

Method: UnityEngine.XR.Interaction.Toolkit.XRRig get_xrRig()

Disassembly:
	0x03B807A4 MOV V9.16B, V1.16B
	0x03B807A8 MOV V11.16B, V2.16B
	0x03B807AC CBNZ W8, 0x3B807C4
	0x03B807B0 ADRP X0, 0x573000
	0x03B807B4 LDR X0, [X0 + 0x5A8]
	0x03B807B8 BL 0x1C16CF4
	0x03B807BC MOVZ W8, 0x1
	0x03B807C0 STRB W8, [X21 + 0x585]
	0x03B807C4 LDR X0, [X22]
	0x03B807C8 FMUL S14, S10, S12
	0x03B807CC FMUL S13, S13, S12
	0x03B807D0 FMUL S10, S15, S12
	0x03B807D4 LDR W8, [X0 + 0xE0]
	0x03B807D8 CBNZ W8, 0x3B807E0
	0x03B807DC BL 0x1C16DFC
	0x03B807E0 FMUL S1, S8, S8
	0x03B807E4 FMUL S2, S9, S9
	0x03B807E8 FMUL S0, S11, S11
	0x03B807EC FADD S1, S1, S2
	0x03B807F0 FADD S0, S0, S1
	0x03B807F4 FMOV S3, 1
	0x03B807F8 FSQRT S0, S0
	0x03B807FC FDIV S0, S3, S0
	0x03B80800 FMUL S12, S8, S0
	0x03B80804 FMUL S8, S9, S0
	0x03B80808 FMUL S15, S11, S0
	0x03B8080C MOV V0.16B, V14.16B
	0x03B80810 MOV V1.16B, V13.16B
	0x03B80814 MOV V2.16B, V10.16B
	0x03B80818 MOV X0, X31
	0x03B8081C STP S14, S13, [X31 + 0x4]

ISIL:
	001 Move [X31-32], X30
	002 Move [X31+16], X20
	003 Move [X31+24], X19
	004 Move X20, 0x863000
	005 Move W8, [X20+2761]
	006 Move X19, X0
	007 Move TEMP, X8
	008 And TEMP, TEMP, 1
	009 Compare TEMP, 1
	010 JumpIfEqual {16}
	011 Move X0, 0x5DC000
	012 Move X0, [X0+3264]
	013 Call 0x1C17CF4
	014 Move W8, 1
	015 Move [X20+2761], W8
	016 Move X8, [X19+48]
	017 Compare X8, 0
	018 JumpIfEqual {26}
	019 Move X9, 0x5DC000
	020 Move X9, [X9+3264]
	021 Move X10, [X8]
	022 Move X9, [X9]
	023 Move W12, [X10+304]
	024 Move W11, [X9+304]
	025 NotImplemented "Instruction CMP not yet implemented."
	026 Move X0, X31
	027 Move X10, [X10+200]
	028 Add X10, X10, X11
	029 NotImplemented "Instruction LDUR not yet implemented."
	030 NotImplemented "Instruction CMP not yet implemented."
	031 NotImplemented "Instruction CSEL not yet implemented."
	032 Move X20, [X31+16]
	033 Move X19, [X31+24]
	034 Move X30, [X31+32]
	035 Return X0

Method: System.Void set_xrRig(UnityEngine.XR.Interaction.Toolkit.XRRig value)

Disassembly:
	0x03B80820 STR S10, [X31 + 0xC]
	0x03B80824 BL 0x3887BE0

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Boolean get_Busy()

Disassembly:
	0x03B80828 MOV V11.16B, V0.16B

ISIL:
	001 Call LocomotionSystem.get_busy, X0
	002 Return X0

Method: System.Void .ctor()

Disassembly:
	0x03B8082C MOV V9.16B, V1.16B
	0x03B80830 MOV V10.16B, V2.16B
	0x03B80834 MOV V0.16B, V12.16B
	0x03B80838 MOV V1.16B, V8.16B

ISIL:
	001 Move W8, 0x41200000
	002 Move X1, X31
	003 Move [X0+44], W8
	004 Call MonoBehaviour..ctor, X0
	005 Return 

