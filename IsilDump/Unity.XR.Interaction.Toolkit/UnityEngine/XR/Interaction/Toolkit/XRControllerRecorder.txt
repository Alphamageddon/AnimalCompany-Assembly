Type: UnityEngine.XR.Interaction.Toolkit.XRControllerRecorder

Method: System.Boolean get_playOnStart()

Disassembly:
	0x03B36258 LDR X22, [X22 + 0xA8]
	0x03B3625C LDR X20, [X20 + 0xB0]

ISIL:
	001 Move W0, [X0+32]
	002 Return X0

Method: System.Void set_playOnStart(System.Boolean value)

Disassembly:
	0x03B36260 MOV X19, X0
	0x03B36264 TBNZ X8, 0x0, 0x3B36288
	0x03B36268 ADRP X0, 0x624000

ISIL:
	001 And W8, W1, 1
	002 Move [X0+32], W8
	003 Return 

Method: UnityEngine.XR.Interaction.Toolkit.XRControllerRecording get_recording()

Disassembly:
	0x03B3626C LDR X0, [X0 + 0xB0]
	0x03B36270 BL 0x1C16CF4

ISIL:
	001 Move X0, [X0+40]
	002 Return X0

Method: System.Void set_recording(UnityEngine.XR.Interaction.Toolkit.XRControllerRecording value)

Disassembly:
	0x03B36274 ADRP X0, 0x624000
	0x03B36278 LDR X0, [X0 + 0xA8]

ISIL:
	001 Move [X0+40], X1
	002 Return 

Method: UnityEngine.XR.Interaction.Toolkit.XRBaseController get_xrController()

Disassembly:
	0x03B3627C BL 0x1C16CF4
	0x03B36280 MOVZ W8, 0x1

ISIL:
	001 Move X0, [X0+48]
	002 Return X0

Method: System.Void set_xrController(UnityEngine.XR.Interaction.Toolkit.XRBaseController value)

Disassembly:
	0x03B36284 STRB W8, [X21 + 0x808]
	0x03B36288 LDR X0, [X22]

ISIL:
	001 Move [X0+48], X1
	002 Return 

Method: System.Boolean get_visitEachFrame()

Disassembly:
	0x03B3628C BL 0x1C16F10
	0x03B36290 LDR X1, [X20]

ISIL:
	001 Move W0, [X0+56]
	002 Return X0

Method: System.Void set_visitEachFrame(System.Boolean value)

Disassembly:
	0x03B36294 MOV X20, X0
	0x03B36298 BL 0x301B7C4
	0x03B3629C STR X20, [X19 + 0x20]

ISIL:
	001 And W8, W1, 1
	002 Move [X0+56], W8
	003 Return 

Method: System.Boolean get_isRecording()

Disassembly:
	0x03B362A0 MOV X0, X19
	0x03B362A4 LDP X20, X19, [X31 + 0x20]

ISIL:
	001 Move W0, [X0+76]
	002 Return X0

Method: System.Void set_isRecording(System.Boolean value)

Disassembly:
	0x03B362A8 LDP X22, X21, [X31 + 0x10]
	0x03B362AC MOV X1, X31
	0x03B362B0 LDR X30, [X31], #0x30
	0x03B362B4 B 0x3C36D2C
	0x03B362B8 LDR V0, [X0]
	0x03B362BC RET
	0x03B362C0 STR S0, [X0]
	0x03B362C4 RET
	0x03B362C8 LDRB W0, [X0 + 0x4]
	0x03B362CC RET
	0x03B362D0 AND W8, W1, 0x1
	0x03B362D4 STRB W8, [X0 + 0x4]
	0x03B362D8 RET
	0x03B362DC LDRB W0, [X0 + 0x5]
	0x03B362E0 RET
	0x03B362E4 AND W8, W1, 0x1
	0x03B362E8 STRB W8, [X0 + 0x5]
	0x03B362EC RET
	0x03B362F0 LDRB W0, [X0 + 0x6]
	0x03B362F4 RET
	0x03B362F8 AND W8, W1, 0x1
	0x03B362FC STRB W8, [X0 + 0x6]
	0x03B36300 RET
	0x03B36304 LDRB W9, [X0 + 0x4]
	0x03B36308 ANDS W8, W1, 0x1
	0x03B3630C FMOV S0, W31
	0x03B36310 FMOV S1, 1
	0x03B36314 FCSEL S0, S1, S0, NE
	0x03B36318 CMP W9, 0x0
	0x03B3631C EOR W10, W1, 0x1
	0x03B36320 CSET W9, EQ
	0x03B36324 CSET W11, NE
	0x03B36328 AND W9, W9, W1, 0x0
	0x03B3632C AND W10, W11, W10, 0x0
	0x03B36330 STR S0, [X0]
	0x03B36334 STRB W9, [X0 + 0x5]
	0x03B36338 STRB W10, [X0 + 0x6]
	0x03B3633C STRB W8, [X0 + 0x4]
	0x03B36340 RET
	0x03B36344 STURH W31, [X0 + 0x5]
	0x03B36348 RET
	0x03B3634C LDRB W0, [X0 + 0x6]
	0x03B36350 RET
	0x03B36354 AND W8, W1, 0x1
	0x03B36358 STRB W8, [X0 + 0x6]
	0x03B3635C RET
	0x03B36360 STURH W31, [X0 + 0x5]
	0x03B36364 RET

ISIL:
	001 Move [X31-48], X30
	002 Move [X31+16], X22
	003 Move [X31+24], X21
	004 Move [X31+32], X20
	005 Move [X31+40], X19
	006 Move X21, 0x8AD000
	007 Move W8, [X21+2042]
	008 Move W20, W1
	009 Move X19, X0
	010 And W22, W1, 1
	011 Move TEMP, X8
	012 And TEMP, TEMP, 1
	013 Compare TEMP, 1
	014 JumpIfEqual {20}
	015 Move X0, 0x5BE000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X21+2042], W8
	020 Move W8, [X19+76]
	021 NotImplemented "Instruction CMP not yet implemented."
	022 Move X21, 0x5BE000
	023 Move X21, [X21+1432]
	024 Move X0, X31
	025 Call Time.get_time
	026 Move X0, X19
	027 Move W1, W31
	028 Move [X19+72], S0
	029 Call XRControllerRecorder.set_isPlaying, X0, X1
	030 Move [X19+64], X31
	031 Move X0, [X21]
	032 Move X21, [X19+40]
	033 Move W8, [X0+224]
	034 Compare W8, 0
	035 JumpIfNotEqual {37}
	036 Call 0x1C17DFC
	037 Move X0, X21
	038 Move X1, X31
	039 Call Object.op_Implicit, X0
	040 Move TEMP, X0
	041 And TEMP, TEMP, 1
	042 Compare TEMP, 1
	043 JumpIfNotEqual {55}
	044 Move TEMP, X20
	045 And TEMP, TEMP, 1
	046 Compare TEMP, 1
	047 JumpIfNotEqual {52}
	048 Move X0, [X19+40]
	049 Compare X0, 0
	050 JumpIfEqual {62}
	051 Call XRControllerRecording.InitRecording, X0
	052 Move X8, [X19+40]
	053 Compare X8, 0
	054 JumpIfEqual {62}
	055 Move [X19+76], W22
	056 Move X20, [X31+32]
	057 Move X19, [X31+40]
	058 Move X22, [X31+16]
	059 Move X21, [X31+24]
	060 Move X30, [X31+48]
	061 Return 
	062 Call 0x1C17F20

Method: System.Boolean get_isPlaying()

Disassembly:
	0x03B36510 LDP X24, X23, [X31 + 0x50]
	0x03B36514 LDR X30, [X31 + 0x40]

ISIL:
	001 Move W0, [X0+77]
	002 Return X0

Method: System.Void set_isPlaying(System.Boolean value)

Disassembly:
	0x03B36368 STP D15, D14, [X31 - 0x60]!
	0x03B3636C STP D13, D12, [X31 + 0x10]
	0x03B36370 STP D11, D10, [X31 + 0x20]
	0x03B36374 STP D9, D8, [X31 + 0x30]
	0x03B36378 STP X30, X21, [X31 + 0x40]
	0x03B3637C STP X20, X19, [X31 + 0x50]
	0x03B36380 MOV W19, W1
	0x03B36384 MOV X1, X31
	0x03B36388 MOV V8.16B, V7.16B
	0x03B3638C MOV V9.16B, V6.16B
	0x03B36390 MOV V10.16B, V5.16B
	0x03B36394 MOV V11.16B, V4.16B
	0x03B36398 MOV V12.16B, V3.16B
	0x03B3639C MOV V13.16B, V2.16B
	0x03B363A0 MOV V14.16B, V1.16B
	0x03B363A4 MOV V15.16B, V0.16B
	0x03B363A8 MOV X20, X0
	0x03B363AC AND W21, W2, 0x1
	0x03B363B0 BL 0x33BDD8C
	0x03B363B4 STR D15, [X20 + 0x10]
	0x03B363B8 STP S14, S13, [X20 + 0x20]
	0x03B363BC STP S12, S11, [X20 + 0x28]
	0x03B363C0 STP S10, S9, [X20 + 0x30]
	0x03B363C4 STR S8, [X20 + 0x38]
	0x03B363C8 STR W19, [X20 + 0x18]
	0x03B363CC STRB W21, [X20 + 0x1C]
	0x03B363D0 LDP X20, X19, [X31 + 0x50]
	0x03B363D4 LDP X30, X21, [X31 + 0x40]
	0x03B363D8 LDP D9, D8, [X31 + 0x30]
	0x03B363DC LDP D11, D10, [X31 + 0x20]
	0x03B363E0 LDP D13, D12, [X31 + 0x10]
	0x03B363E4 LDP D15, D14, [X31], #0x60
	0x03B363E8 RET
	0x03B363EC STP D15, D14, [X31 - 0x80]!
	0x03B363F0 STP D13, D12, [X31 + 0x10]
	0x03B363F4 STP D11, D10, [X31 + 0x20]
	0x03B363F8 STP D9, D8, [X31 + 0x30]
	0x03B363FC STR X30, [X31 + 0x40]
	0x03B36400 STP X24, X23, [X31 + 0x50]
	0x03B36404 STP X22, X21, [X31 + 0x60]
	0x03B36408 STP X20, X19, [X31 + 0x70]
	0x03B3640C MOV W23, W1
	0x03B36410 MOV X1, X31
	0x03B36414 MOV W19, W5
	0x03B36418 MOV W20, W4
	0x03B3641C MOV W22, W3
	0x03B36420 MOV V8.16B, V7.16B
	0x03B36424 MOV V9.16B, V6.16B
	0x03B36428 MOV V10.16B, V5.16B
	0x03B3642C MOV V11.16B, V4.16B
	0x03B36430 MOV V12.16B, V3.16B
	0x03B36434 MOV V13.16B, V2.16B
	0x03B36438 MOV V14.16B, V1.16B
	0x03B3643C MOV V15.16B, V0.16B
	0x03B36440 MOV X21, X0
	0x03B36444 AND W24, W2, 0x1
	0x03B36448 BL 0x33BDD8C
	0x03B3644C LDRB W9, [X21 + 0x40]
	0x03B36450 ANDS W8, W22, 0x1
	0x03B36454 FMOV S0, W31
	0x03B36458 FMOV S1, 1
	0x03B3645C STRB W8, [X21 + 0x40]
	0x03B36460 LDRB W8, [X21 + 0x48]
	0x03B36464 FCSEL S2, S1, S0, NE
	0x03B36468 CMP W9, 0x0
	0x03B3646C EOR W10, W22, 0x1
	0x03B36470 CSET W11, NE
	0x03B36474 CSET W9, EQ
	0x03B36478 AND W10, W11, W10, 0x0
	0x03B3647C ANDS W11, W20, 0x1
	0x03B36480 STRB W11, [X21 + 0x48]
	0x03B36484 LDRB W11, [X21 + 0x50]
	0x03B36488 FCSEL S3, S1, S0, NE
	0x03B3648C CMP W8, 0x0
	0x03B36490 EOR W8, W20, 0x1

ISIL:
	001 Move [X31-48], X30
	002 Move [X31-40], X23
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X21, 0x8AD000
	008 Move W8, [X21+2043]
	009 Move W20, W1
	010 Move X19, X0
	011 And W23, W1, 1
	012 Move TEMP, X8
	013 And TEMP, TEMP, 1
	014 Compare TEMP, 1
	015 JumpIfEqual {21}
	016 Move X0, 0x5BE000
	017 Move X0, [X0+1432]
	018 Call 0x1C17CF4
	019 Move W8, 1
	020 Move [X21+2043], W8
	021 Move W8, [X19+77]
	022 NotImplemented "Instruction CMP not yet implemented."
	023 Move X0, X19
	024 Move W1, W31
	025 Call XRControllerRecorder.set_isRecording, X0, X1
	026 Move X22, 0x5BE000
	027 Move X22, [X22+1432]
	028 Move X21, [X19+40]
	029 Move X0, [X22]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X21
	035 Move X1, X31
	036 Call Object.op_Implicit, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {43}
	041 Move [X19+80], X31
	042 Move [X19+88], W31
	043 Move [X19+64], X31
	044 Move [X19+77], W23
	045 Move TEMP, X20
	046 And TEMP, TEMP, 1
	047 Compare TEMP, 1
	048 JumpIfNotEqual {71}
	049 Move X0, [X22]
	050 Move X20, [X19+48]
	051 Move W8, [X0+224]
	052 Compare W8, 0
	053 JumpIfNotEqual {55}
	054 Call 0x1C17DFC
	055 Move X0, X20
	056 Move X1, X31
	057 Move X2, X31
	058 Call Object.op_Inequality, X0, X1
	059 Move TEMP, X0
	060 And TEMP, TEMP, 1
	061 Compare TEMP, 1
	062 JumpIfNotEqual {71}
	063 Move X8, [X19+48]
	064 Compare X8, 0
	065 JumpIfEqual {99}
	066 Move W9, [X8+37]
	067 Move [X19+92], W9
	068 Move W9, [X8+36]
	069 Move [X19+93], W9
	070 NotImplemented "Instruction STRH not yet implemented."
	071 Move X0, [X22]
	072 Move X20, [X19+48]
	073 Move W8, [X0+224]
	074 Compare W8, 0
	075 JumpIfNotEqual {77}
	076 Call 0x1C17DFC
	077 Move X0, X20
	078 Move X1, X31
	079 Move X2, X31
	080 Call Object.op_Inequality, X0, X1
	081 Move TEMP, X0
	082 And TEMP, TEMP, 1
	083 Compare TEMP, 1
	084 JumpIfNotEqual {92}
	085 Move X8, [X19+48]
	086 Compare X8, 0
	087 JumpIfEqual {99}
	088 Move W9, [X19+92]
	089 Move [X8+37], W9
	090 Move W9, [X19+93]
	091 Move [X8+36], W9
	092 Move X20, [X31+32]
	093 Move X19, [X31+40]
	094 Move X22, [X31+16]
	095 Move X21, [X31+24]
	096 Move X30, [X31+48]
	097 Move X23, [X31+56]
	098 Return 
	099 Call 0x1C17F20

Method: System.Double get_currentTime()

Disassembly:
	0x03B36524 LDP D15, D14, [X31], #0x80
	0x03B36528 RET

ISIL:
	001 Move V0, [X0+64]
	002 Return V0

Method: System.Double get_duration()

Disassembly:
	0x03B3652C SUB X31, X31, 0x90
	0x03B36530 STP D15, D14, [X31 + 0x10]
	0x03B36534 STP D13, D12, [X31 + 0x20]
	0x03B36538 STP D11, D10, [X31 + 0x30]
	0x03B3653C STP D9, D8, [X31 + 0x40]
	0x03B36540 STR X30, [X31 + 0x50]
	0x03B36544 STP X24, X23, [X31 + 0x60]
	0x03B36548 STP X22, X21, [X31 + 0x70]
	0x03B3654C STP X20, X19, [X31 + 0x80]
	0x03B36550 LDR V8, [X31 + 0xA0]
	0x03B36554 LDR V9, [X31 + 0x98]
	0x03B36558 LDR V10, [X31 + 0x90]
	0x03B3655C MOV W23, W1
	0x03B36560 MOV X1, X31
	0x03B36564 MOV W19, W5
	0x03B36568 MOV W20, W4
	0x03B3656C MOV W22, W3
	0x03B36570 STP S6, S7, [X31 + 0x58]
	0x03B36574 STR S5, [X31 + 0xC]
	0x03B36578 MOV V11.16B, V4.16B
	0x03B3657C MOV V12.16B, V3.16B
	0x03B36580 MOV V13.16B, V2.16B
	0x03B36584 MOV V14.16B, V1.16B
	0x03B36588 MOV V15.16B, V0.16B
	0x03B3658C MOV X21, X0
	0x03B36590 AND W24, W2, 0x1
	0x03B36594 BL 0x33BDD8C
	0x03B36598 LDRB W8, [X21 + 0x40]
	0x03B3659C LDR V0, [X31 + 0xC]
	0x03B365A0 LDRB W11, [X21 + 0x48]
	0x03B365A4 AND W10, W22, 0x1
	0x03B365A8 STRB W10, [X21 + 0x40]
	0x03B365AC AND W10, W20, 0x1

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8AD000
	006 Move X20, 0x5BE000
	007 Move W8, [X21+2044]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {19}
	014 Move X0, 0x5BE000
	015 Move X0, [X0+1432]
	016 Call 0x1C17CF4
	017 Move W8, 1
	018 Move [X21+2044], W8
	019 Move X0, [X20]
	020 Move X20, [X19+40]
	021 Move W8, [X0+224]
	022 Compare W8, 0
	023 JumpIfNotEqual {25}
	024 Call 0x1C17DFC
	025 Move X0, X20
	026 Move X1, X31
	027 Move X2, X31
	028 Call Object.op_Inequality, X0, X1
	029 Move TEMP, X0
	030 And TEMP, TEMP, 1
	031 Compare TEMP, 1
	032 JumpIfNotEqual {40}
	033 Move X0, [X19+40]
	034 Compare X0, 0
	035 JumpIfEqual {46}
	036 Move X20, [X31+16]
	037 Move X19, [X31+24]
	038 Move X30, [X31+32]
	039 Move X21, [X31+40]
	040 Move X20, [X31+16]
	041 Move X19, [X31+24]
	042 Move D0, X31
	043 Move X30, [X31+32]
	044 Move X21, [X31+40]
	045 Return V0
	046 Call 0x1C17F20

Method: System.Single get_recordingStartTime()

Disassembly:
	0x03B3662C STR D15, [X21 + 0x10]
	0x03B36630 STP S14, S13, [X21 + 0x20]

ISIL:
	001 Move V0, [X0+72]
	002 Return V0

Method: System.Void set_recordingStartTime(System.Single value)

Disassembly:
	0x03B36634 STP S12, S11, [X21 + 0x28]
	0x03B36638 STP S0, S10, [X21 + 0x38]

ISIL:
	001 Move [X0+72], S0
	002 Return 

Method: System.Void Awake()

Disassembly:
	0x03B3663C STR S9, [X21 + 0x44]
	0x03B36640 STR S8, [X21 + 0x4C]
	0x03B36644 STRB W8, [X21 + 0x51]
	0x03B36648 STRB W10, [X21 + 0x52]
	0x03B3664C STRB W9, [X21 + 0x50]
	0x03B36650 LDP X20, X19, [X31 + 0x80]
	0x03B36654 LDP X22, X21, [X31 + 0x70]
	0x03B36658 LDP X24, X23, [X31 + 0x60]
	0x03B3665C LDR X30, [X31 + 0x50]
	0x03B36660 LDP D9, D8, [X31 + 0x40]
	0x03B36664 LDP D11, D10, [X31 + 0x30]
	0x03B36668 LDP D13, D12, [X31 + 0x20]
	0x03B3666C LDP D15, D14, [X31 + 0x10]
	0x03B36670 ADD X31, X31, 0x90
	0x03B36674 RET
	0x03B36678 SUB X31, X31, 0x70
	0x03B3667C STR X30, [X31 + 0x40]
	0x03B36680 STP X22, X21, [X31 + 0x50]
	0x03B36684 STP X20, X19, [X31 + 0x60]
	0x03B36688 ADRP X20, 0x8AC000
	0x03B3668C ADRP X22, 0x5BD000
	0x03B36690 ADRP X21, 0x5C0000
	0x03B36694 LDRB W8, [X20 + 0x809]
	0x03B36698 LDR X22, [X22 + 0x9D0]
	0x03B3669C LDR X21, [X21 + 0x978]
	0x03B366A0 MOV X19, X0
	0x03B366A4 TBNZ X8, 0x0, 0x3B36704
	0x03B366A8 ADRP X0, 0x5BD000
	0x03B366AC LDR X0, [X0 + 0xB58]
	0x03B366B0 BL 0x1C16CF4
	0x03B366B4 ADRP X0, 0x5C0000
	0x03B366B8 LDR X0, [X0 + 0x978]
	0x03B366BC BL 0x1C16CF4
	0x03B366C0 ADRP X0, 0x624000
	0x03B366C4 LDR X0, [X0 + 0xB8]
	0x03B366C8 BL 0x1C16CF4
	0x03B366CC ADRP X0, 0x5BD000
	0x03B366D0 LDR X0, [X0 + 0x9D0]
	0x03B366D4 BL 0x1C16CF4
	0x03B366D8 ADRP X0, 0x5BE000
	0x03B366DC LDR X0, [X0 + 0x5A8]
	0x03B366E0 BL 0x1C16CF4
	0x03B366E4 ADRP X0, 0x5BD000

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8AD000
	006 Move X20, 0x5BE000
	007 Move W8, [X21+2045]
	008 Move X20, [X20+1432]
	009 Move X19, X0
	010 Move TEMP, X8
	011 And TEMP, TEMP, 1
	012 Compare TEMP, 1
	013 JumpIfEqual {22}
	014 Move X0, 0x625000
	015 Move X0, [X0+152]
	016 Call 0x1C17CF4
	017 Move X0, 0x5BE000
	018 Move X0, [X0+1432]
	019 Call 0x1C17CF4
	020 Move W8, 1
	021 Move [X21+2045], W8
	022 Move X0, [X20]
	023 Move X20, [X19+48]
	024 Move W8, [X0+224]
	025 Compare W8, 0
	026 JumpIfNotEqual {28}
	027 Call 0x1C17DFC
	028 Move X0, X20
	029 Move X1, X31
	030 Move X2, X31
	031 Call Object.op_Equality, X0, X1
	032 Move TEMP, X0
	033 And TEMP, TEMP, 1
	034 Compare TEMP, 1
	035 JumpIfNotEqual {42}
	036 Move X8, 0x625000
	037 Move X8, [X8+152]
	038 Move X0, X19
	039 Move X1, [X8]
	040 Call 0x21A4894, X0
	041 Move [X19+48], X0
	042 Move W8, [X19+32]
	043 Move [X19+64], X31
	044 Compare W8, 0
	045 JumpIfEqual {54}
	046 Move X0, X19
	047 Move X20, [X31+16]
	048 Move X19, [X31+24]
	049 Move W1, 1
	050 Move X30, [X31+32]
	051 Move X21, [X31+40]
	052 Call XRControllerRecorder.set_isPlaying, X0, X1
	053 Return 
	054 Move X20, [X31+16]
	055 Move X19, [X31+24]
	056 Move X30, [X31+32]
	057 Move X21, [X31+40]
	058 Return 

Method: System.Void Update()

Disassembly:
	0x03B366E8 LDR X0, [X0 + 0x5A0]
	0x03B366EC BL 0x1C16CF4
	0x03B366F0 ADRP X0, 0x624000
	0x03B366F4 LDR X0, [X0 + 0xC0]
	0x03B366F8 BL 0x1C16CF4
	0x03B366FC MOVZ W8, 0x1
	0x03B36700 STRB W8, [X20 + 0x809]
	0x03B36704 LDR X0, [X22]
	0x03B36708 MOVZ W1, 0x8
	0x03B3670C BL 0x1C16D6C
	0x03B36710 MOV X20, X0
	0x03B36714 LDR V0, [X19 + 0x10]
	0x03B36718 LDR X0, [X21]
	0x03B3671C ADD X1, X31, 0x48
	0x03B36720 STR D0, [X31 + 0x48]
	0x03B36724 BL 0x1C16E04
	0x03B36728 CBZ X20, 0x3B36978
	0x03B3672C MOV X21, X0
	0x03B36730 CBZ X0, 0x3B36748
	0x03B36734 LDR X8, [X20]
	0x03B36738 MOV X0, X21
	0x03B3673C LDR X1, [X8 + 0x40]
	0x03B36740 BL 0x1C16E00
	0x03B36744 CBZ X0, 0x3B3696C
	0x03B36748 LDR W8, [X20 + 0x18]
	0x03B3674C CBZ W8, 0x3B36968
	0x03B36750 ADRP X8, 0x5BD000
	0x03B36754 LDR X8, [X8 + 0x5A0]
	0x03B36758 STR X21, [X20 + 0x20]
	0x03B3675C LDR W9, [X19 + 0x28]
	0x03B36760 LDR X10, [X19 + 0x20]
	0x03B36764 LDR X0, [X8]
	0x03B36768 ADD X1, X31, 0x30
	0x03B3676C STR W9, [X31 + 0x38]
	0x03B36770 STR X10, [X31 + 0x30]
	0x03B36774 BL 0x1C16E04
	0x03B36778 MOV X21, X0
	0x03B3677C CBZ X0, 0x3B36794
	0x03B36780 LDR X8, [X20]
	0x03B36784 MOV X0, X21
	0x03B36788 LDR X1, [X8 + 0x40]
	0x03B3678C BL 0x1C16E00
	0x03B36790 CBZ X0, 0x3B3696C
	0x03B36794 LDR W8, [X20 + 0x18]
	0x03B36798 CMP W8, 0x1
	0x03B3679C B.LS 0x3B36968
	0x03B367A0 ADRP X8, 0x5BE000
	0x03B367A4 LDR X8, [X8 + 0x5A8]
	0x03B367A8 STR X21, [X20 + 0x28]
	0x03B367AC LDUR V0, [X19 + 0x2C]
	0x03B367B0 ADD X1, X31, 0x20
	0x03B367B4 LDR X0, [X8]
	0x03B367B8 STR V0, [X31 + 0x2]
	0x03B367BC BL 0x1C16E04
	0x03B367C0 MOV X21, X0
	0x03B367C4 CBZ X0, 0x3B367DC
	0x03B367C8 LDR X8, [X20]
	0x03B367CC MOV X0, X21
	0x03B367D0 LDR X1, [X8 + 0x40]
	0x03B367D4 BL 0x1C16E00
	0x03B367D8 CBZ X0, 0x3B3696C
	0x03B367DC LDR W8, [X20 + 0x18]
	0x03B367E0 CMP W8, 0x2
	0x03B367E4 B.LS 0x3B36968
	0x03B367E8 ADRP X22, 0x5BD000
	0x03B367EC LDR X22, [X22 + 0xB58]
	0x03B367F0 STR X21, [X20 + 0x30]
	0x03B367F4 LDRB W8, [X19 + 0x40]
	0x03B367F8 ADD X1, X31, 0x1C
	0x03B367FC LDR X0, [X22]
	0x03B36800 STRB W8, [X31 + 0x1C]
	0x03B36804 BL 0x1C16E04
	0x03B36808 MOV X21, X0
	0x03B3680C CBZ X0, 0x3B36824
	0x03B36810 LDR X8, [X20]
	0x03B36814 MOV X0, X21
	0x03B36818 LDR X1, [X8 + 0x40]
	0x03B3681C BL 0x1C16E00
	0x03B36820 CBZ X0, 0x3B3696C
	0x03B36824 LDR W8, [X20 + 0x18]
	0x03B36828 CMP W8, 0x3
	0x03B3682C B.LS 0x3B36968
	0x03B36830 STR X21, [X20 + 0x38]
	0x03B36834 LDRB W8, [X19 + 0x48]
	0x03B36838 LDR X0, [X22]
	0x03B3683C ADD X1, X31, 0x18
	0x03B36840 STRB W8, [X31 + 0x18]
	0x03B36844 BL 0x1C16E04
	0x03B36848 MOV X21, X0
	0x03B3684C CBZ X0, 0x3B36864
	0x03B36850 LDR X8, [X20]

ISIL:
	001 Move [X31-32], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X20, 0x8AD000
	006 Move W8, [X20+2046]
	007 Move X19, X0
	008 Move TEMP, X8
	009 And TEMP, TEMP, 1
	010 Compare TEMP, 1
	011 JumpIfEqual {20}
	012 Move X0, 0x625000
	013 Move X0, [X0+136]
	014 Call 0x1C17CF4
	015 Move X0, 0x5BE000
	016 Move X0, [X0+1432]
	017 Call 0x1C17CF4
	018 Move W8, 1
	019 Move [X20+2046], W8
	020 Move W8, [X19+76]
	021 Compare W8, 0
	022 JumpIfEqual {58}
	023 Move X8, 0x5BE000
	024 Move X8, [X8+1432]
	025 Move X20, [X19+48]
	026 Move X0, [X8]
	027 Move W8, [X0+224]
	028 Compare W8, 0
	029 JumpIfNotEqual {31}
	030 Call 0x1C17DFC
	031 Move X0, X20
	032 Move X1, X31
	033 Move X2, X31
	034 Call Object.op_Inequality, X0, X1
	035 Move TEMP, X0
	036 And TEMP, TEMP, 1
	037 Compare TEMP, 1
	038 JumpIfNotEqual {58}
	039 Move X20, [X19+48]
	040 Compare X20, 0
	041 JumpIfEqual {111}
	042 Move X0, X20
	043 Call XRBaseController.SetupControllerState, X0
	044 Move X20, [X20+128]
	045 Move X0, X31
	046 Call Time.get_time
	047 Compare X20, 0
	048 JumpIfEqual {111}
	049 Move V1, [X19+72]
	050 Subtract S0, S0, S1
	051 NotImplemented "Instruction FCVT not yet implemented."
	052 Move [X20+16], D0
	053 Move X0, [X19+40]
	054 Compare X0, 0
	055 JumpIfEqual {111}
	056 Move X1, X20
	057 Call XRControllerRecording.AddRecordingFrame, X0, X1
	058 Move W8, [X19+77]
	059 Compare W8, 0
	060 JumpIfEqual {64}
	061 Move V0, [X19+64]
	062 Move X0, X19
	063 Call XRControllerRecorder.UpdatePlaybackTime, X0, V0
	064 Move W8, [X19+76]
	065 Compare W8, 0
	066 JumpIfNotEqual {70}
	067 Move W8, [X19+77]
	068 Compare W8, 0
	069 JumpIfEqual {98}
	070 Move V8, [X19+64]
	071 Move X0, X31
	072 Call Time.get_deltaTime
	073 Move W8, [X19+77]
	074 NotImplemented "Instruction FCVT not yet implemented."
	075 Add D0, D8, D0
	076 Move [X19+64], D0
	077 Compare W8, 0
	078 JumpIfEqual {98}
	079 Move X0, [X19+40]
	080 Compare X0, 0
	081 JumpIfEqual {111}
	082 Move V8, [X19+64]
	083 Call XRControllerRecording.get_duration, X0
	084 NotImplemented "Instruction FCMP not yet implemented."
	085 Move W8, [X19+56]
	086 Compare W8, 0
	087 JumpIfEqual {103}
	088 Move X8, [X19+40]
	089 Compare X8, 0
	090 JumpIfEqual {111}
	091 Move X8, [X8+32]
	092 Compare X8, 0
	093 JumpIfEqual {111}
	094 Move W8, [X8+24]
	095 Move W9, [X19+88]
	096 Subtract W8, W8, 1
	097 NotImplemented "Instruction CMP not yet implemented."
	098 Move X20, [X31+16]
	099 Move X19, [X31+24]
	100 Move X30, [X31+8]
	101 Move V8, [X31+32]
	102 Return 
	103 Move X0, X19
	104 Move X20, [X31+16]
	105 Move X19, [X31+24]
	106 Move X30, [X31+8]
	107 Move W1, W31
	108 Move V8, [X31+32]
	109 Call XRControllerRecorder.set_isPlaying, X0, X1
	110 Return 
	111 Call 0x1C17F20

Method: System.Void OnDestroy()

Disassembly:
	0x03B36B50 STRB W10, [X23 + 0x50]
	0x03B36B54 LDP X20, X19, [X31 + 0x70]
	0x03B36B58 LDP X22, X21, [X31 + 0x60]
	0x03B36B5C LDP X30, X23, [X31 + 0x50]
	0x03B36B60 LDP D9, D8, [X31 + 0x40]
	0x03B36B64 LDP D11, D10, [X31 + 0x30]
	0x03B36B68 LDP D13, D12, [X31 + 0x20]
	0x03B36B6C LDP D15, D14, [X31 + 0x10]

ISIL:
	001 Move [X31-16], X30
	002 Move [X31-8], X19
	003 Move W1, W31
	004 Move X19, X0
	005 Call XRControllerRecorder.set_isRecording, X0, X1
	006 Move X0, X19
	007 Move W1, W31
	008 Move X30, [X31+16]
	009 Move X19, [X31+24]
	010 Call XRControllerRecorder.set_isPlaying, X0, X1
	011 Return 

Method: System.Void ResetPlayback()

Disassembly:
	0x03B36518 LDP D9, D8, [X31 + 0x30]
	0x03B3651C LDP D11, D10, [X31 + 0x20]
	0x03B36520 LDP D13, D12, [X31 + 0x10]

ISIL:
	001 Move [X0+80], X31
	002 Move [X0+88], W31
	003 Return 

Method: System.Void UpdatePlaybackTime(System.Double playbackTime)

Disassembly:
	0x03B36930 CMP W8, 0x7
	0x03B36934 B.LS 0x3B36968
	0x03B36938 ADRP X8, 0x624000
	0x03B3693C LDR X8, [X8 + 0xC0]
	0x03B36940 STR X19, [X20 + 0x58]
	0x03B36944 MOV X1, X20
	0x03B36948 MOV X2, X31
	0x03B3694C LDR X0, [X8]
	0x03B36950 BL 0x3227C5C
	0x03B36954 LDP X20, X19, [X31 + 0x60]
	0x03B36958 LDP X22, X21, [X31 + 0x50]
	0x03B3695C LDR X30, [X31 + 0x40]
	0x03B36960 ADD X31, X31, 0x70
	0x03B36964 RET
	0x03B36968 BL 0x1C16F28
	0x03B3696C BL 0x1C16F44
	0x03B36970 MOV X1, X31
	0x03B36974 BL 0x1C16DEC
	0x03B36978 BL 0x1C16F20
	0x03B3697C LDR W8, [X0 + 0x18]
	0x03B36980 AND W0, W8, 0x3
	0x03B36984 RET
	0x03B36988 AND W8, W1, 0x3
	0x03B3698C STR W8, [X0 + 0x18]
	0x03B36990 RET
	0x03B36994 AND W8, W1, 0x1
	0x03B36998 AND W9, W2, 0x1
	0x03B3699C AND W4, W3, 0x1
	0x03B369A0 MOVZ W1, 0x3
	0x03B369A4 MOV W2, W8
	0x03B369A8 MOV W3, W9
	0x03B369AC B 0x3B36104
	0x03B369B0 STP D15, D14, [X31 - 0x60]!
	0x03B369B4 STP D13, D12, [X31 + 0x10]
	0x03B369B8 STP D11, D10, [X31 + 0x20]
	0x03B369BC STP D9, D8, [X31 + 0x30]
	0x03B369C0 STR X30, [X31 + 0x40]
	0x03B369C4 STP X20, X19, [X31 + 0x50]
	0x03B369C8 MOV W19, W1
	0x03B369CC MOV X1, X31
	0x03B369D0 MOV V8.16B, V7.16B
	0x03B369D4 MOV V9.16B, V6.16B
	0x03B369D8 MOV V10.16B, V5.16B
	0x03B369DC MOV V11.16B, V4.16B
	0x03B369E0 MOV V12.16B, V3.16B
	0x03B369E4 MOV V13.16B, V2.16B
	0x03B369E8 MOV V14.16B, V1.16B
	0x03B369EC MOV V15.16B, V0.16B
	0x03B369F0 MOV X20, X0
	0x03B369F4 BL 0x33BDD8C
	0x03B369F8 MOVZ W8, 0x1
	0x03B369FC STR D15, [X20 + 0x10]
	0x03B36A00 STP S14, S13, [X20 + 0x20]
	0x03B36A04 STP S12, S11, [X20 + 0x28]
	0x03B36A08 STP S10, S9, [X20 + 0x30]
	0x03B36A0C STR S8, [X20 + 0x38]
	0x03B36A10 STR W19, [X20 + 0x18]
	0x03B36A14 STRB W8, [X20 + 0x1C]
	0x03B36A18 LDP X20, X19, [X31 + 0x50]
	0x03B36A1C LDR X30, [X31 + 0x40]
	0x03B36A20 LDP D9, D8, [X31 + 0x30]
	0x03B36A24 LDP D11, D10, [X31 + 0x20]
	0x03B36A28 LDP D13, D12, [X31 + 0x10]
	0x03B36A2C LDP D15, D14, [X31], #0x60
	0x03B36A30 RET
	0x03B36A34 SUB X31, X31, 0x80
	0x03B36A38 STP D15, D14, [X31 + 0x10]
	0x03B36A3C STP D13, D12, [X31 + 0x20]
	0x03B36A40 STP D11, D10, [X31 + 0x30]
	0x03B36A44 STP D9, D8, [X31 + 0x40]
	0x03B36A48 STP X30, X23, [X31 + 0x50]
	0x03B36A4C STP X22, X21, [X31 + 0x60]
	0x03B36A50 STP X20, X19, [X31 + 0x70]
	0x03B36A54 LDR V8, [X31 + 0x90]
	0x03B36A58 LDR V9, [X31 + 0x88]
	0x03B36A5C LDR V10, [X31 + 0x80]
	0x03B36A60 MOV W22, W1
	0x03B36A64 MOV X1, X31
	0x03B36A68 MOV W19, W4
	0x03B36A6C MOV W20, W3
	0x03B36A70 MOV W21, W2
	0x03B36A74 STP S6, S7, [X31 + 0x8]
	0x03B36A78 STR S5, [X31 + 0x4]
	0x03B36A7C MOV V11.16B, V4.16B
	0x03B36A80 MOV V12.16B, V3.16B
	0x03B36A84 MOV V13.16B, V2.16B
	0x03B36A88 MOV V14.16B, V1.16B
	0x03B36A8C MOV V15.16B, V0.16B
	0x03B36A90 MOV X23, X0
	0x03B36A94 BL 0x33BDD8C
	0x03B36A98 MOVZ W8, 0x1
	0x03B36A9C LDRB W9, [X23 + 0x40]
	0x03B36AA0 STRB W8, [X23 + 0x1C]
	0x03B36AA4 LDRB W8, [X23 + 0x48]
	0x03B36AA8 LDR V0, [X31 + 0x4]
	0x03B36AAC AND W11, W21, 0x1
	0x03B36AB0 STRB W11, [X23 + 0x40]
	0x03B36AB4 AND W11, W20, 0x1
	0x03B36AB8 CMP W9, 0x0
	0x03B36ABC STRB W11, [X23 + 0x48]
	0x03B36AC0 CSET W9, NE
	0x03B36AC4 CSET W11, EQ
	0x03B36AC8 CMP W8, 0x0
	0x03B36ACC LDRB W8, [X23 + 0x50]
	0x03B36AD0 STR S0, [X23 + 0x30]
	0x03B36AD4 LDR V0, [X31 + 0x8]
	0x03B36AD8 EOR W10, W21, 0x1
	0x03B36ADC AND W9, W9, W10, 0x0
	0x03B36AE0 CSET W10, NE
	0x03B36AE4 CSET W12, EQ
	0x03B36AE8 CMP W8, 0x0
	0x03B36AEC STR S0, [X23 + 0x34]
	0x03B36AF0 LDR V0, [X31 + 0xC]
	0x03B36AF4 EOR W8, W20, 0x1
	0x03B36AF8 AND W11, W11, W21, 0x0
	0x03B36AFC STRB W9, [X23 + 0x42]
	0x03B36B00 AND W9, W12, W20, 0x0
	0x03B36B04 AND W8, W10, W8, 0x0
	0x03B36B08 STRB W11, [X23 + 0x41]
	0x03B36B0C EOR W11, W19, 0x1
	0x03B36B10 STRB W9, [X23 + 0x49]
	0x03B36B14 CSET W9, NE
	0x03B36B18 STRB W8, [X23 + 0x4A]
	0x03B36B1C CSET W8, EQ
	0x03B36B20 AND W10, W19, 0x1
	0x03B36B24 AND W8, W8, W19, 0x0
	0x03B36B28 AND W9, W9, W11, 0x0
	0x03B36B2C STR W22, [X23 + 0x18]
	0x03B36B30 STR D15, [X23 + 0x10]
	0x03B36B34 STP S14, S13, [X23 + 0x20]
	0x03B36B38 STP S12, S11, [X23 + 0x28]
	0x03B36B3C STP S0, S10, [X23 + 0x38]
	0x03B36B40 STR S9, [X23 + 0x44]
	0x03B36B44 STR S8, [X23 + 0x4C]
	0x03B36B48 STRB W8, [X23 + 0x51]
	0x03B36B4C STRB W9, [X23 + 0x52]

ISIL:
	001 Move [X31-48], D8
	002 Move [X31+8], X30
	003 Move [X31+16], X22
	004 Move [X31+24], X21
	005 Move [X31+32], X20
	006 Move [X31+40], X19
	007 Move X20, 0x8AD000
	008 Move X21, 0x5BE000
	009 Move W8, [X20+2047]
	010 Move X21, [X21+1432]
	011 Move V8, V0
	012 Move X19, X0
	013 Move TEMP, X8
	014 And TEMP, TEMP, 1
	015 Compare TEMP, 1
	016 JumpIfEqual {28}
	017 Move X0, 0x625000
	018 Move X0, [X0+136]
	019 Call 0x1C17CF4
	020 Move X0, 0x625000
	021 Move X0, [X0+144]
	022 Call 0x1C17CF4
	023 Move X0, 0x5BE000
	024 Move X0, [X0+1432]
	025 Call 0x1C17CF4
	026 Move W8, 1
	027 Move [X20+2047], W8
	028 Move X0, [X21]
	029 Move X20, [X19+40]
	030 Move W8, [X0+224]
	031 Compare W8, 0
	032 JumpIfNotEqual {34}
	033 Call 0x1C17DFC
	034 Move X0, X20
	035 Move X1, X31
	036 Call Object.op_Implicit, X0
	037 Move TEMP, X0
	038 And TEMP, TEMP, 1
	039 Compare TEMP, 1
	040 JumpIfNotEqual {160}
	041 Move X0, [X21]
	042 Move X20, [X19+40]
	043 Move W8, [X0+224]
	044 Compare W8, 0
	045 JumpIfNotEqual {47}
	046 Call 0x1C17DFC
	047 Move X0, X20
	048 Move X1, X31
	049 Move X2, X31
	050 Call Object.op_Equality, X0, X1
	051 Move TEMP, X0
	052 And TEMP, TEMP, 1
	053 Compare TEMP, 1
	054 JumpIfEqual {160}
	055 Move X8, [X19+40]
	056 Compare X8, 0
	057 JumpIfEqual {167}
	058 Move X0, [X8+32]
	059 Compare X0, 0
	060 JumpIfEqual {167}
	061 Move W8, [X0+24]
	062 Compare W8, 0
	063 JumpIfEqual {160}
	064 Move W1, [X19+88]
	065 NotImplemented "Instruction CMP not yet implemented."
	066 Move X22, 0x625000
	067 Move X22, [X22+144]
	068 Move X2, [X22]
	069 Call List`1<Object>.get_Item, X0, X1
	070 Compare X0, 0
	071 JumpIfEqual {167}
	072 Move V0, [X0+16]
	073 Move W20, [X19+88]
	074 NotImplemented "Instruction FCMP not yet implemented."
	075 Move X8, [X19+40]
	076 Compare X8, 0
	077 JumpIfEqual {167}
	078 Move X0, [X8+32]
	079 Compare X0, 0
	080 JumpIfEqual {167}
	081 Move W8, [X0+24]
	082 NotImplemented "Instruction CMP not yet implemented."
	083 Move X2, [X22]
	084 Move W1, W20
	085 Call List`1<Object>.get_Item, X0, X1
	086 Compare X0, 0
	087 JumpIfEqual {167}
	088 Move V0, [X0+16]
	089 Move V1, [X19+80]
	090 NotImplemented "Instruction FCMP not yet implemented."
	091 Move X8, [X19+40]
	092 Compare X8, 0
	093 JumpIfEqual {167}
	094 Move X0, [X8+32]
	095 Compare X0, 0
	096 JumpIfEqual {167}
	097 Move X2, [X22]
	098 Move W1, W20
	099 Call List`1<Object>.get_Item, X0, X1
	100 Compare X0, 0
	101 JumpIfEqual {167}
	102 Move V0, [X0+16]
	103 NotImplemented "Instruction FCMP not yet implemented."
	104 Move W8, [X19+56]
	105 Add W20, W20, 1
	106 Compare W8, 0
	107 JumpIfEqual {75}
	108 Move X8, [X19+40]
	109 Compare X8, 0
	110 JumpIfEqual {167}
	111 Move X0, [X8+32]
	112 Compare X0, 0
	113 JumpIfEqual {167}
	114 Move W8, [X0+24]
	115 NotImplemented "Instruction CMP not yet implemented."
	116 Move X2, [X22]
	117 Move W1, W20
	118 Call List`1<Object>.get_Item, X0, X1
	119 Compare X0, 0
	120 JumpIfEqual {167}
	121 Move V8, [X0+16]
	122 Move X8, [X19+40]
	123 Compare X8, 0
	124 JumpIfEqual {167}
	125 Move X8, [X8+32]
	126 Compare X8, 0
	127 JumpIfEqual {167}
	128 Move W8, [X8+24]
	129 NotImplemented "Instruction CMP not yet implemented."
	130 Move X0, [X21]
	131 Move X21, [X19+48]
	132 Move W8, [X0+224]
	133 Compare W8, 0
	134 JumpIfNotEqual {136}
	135 Call 0x1C17DFC
	136 Move X0, X21
	137 Move X1, X31
	138 Move X2, X31
	139 Call Object.op_Inequality, X0, X1
	140 Move TEMP, X0
	141 And TEMP, TEMP, 1
	142 Compare TEMP, 1
	143 JumpIfNotEqual {158}
	144 Move X8, [X19+40]
	145 Compare X8, 0
	146 JumpIfEqual {167}
	147 Move X0, [X8+32]
	148 Compare X0, 0
	149 JumpIfEqual {167}
	150 Move X2, [X22]
	151 Move W1, W20
	152 Call List`1<Object>.get_Item, X0, X1
	153 Move X8, [X19+48]
	154 Compare X8, 0
	155 JumpIfEqual {167}
	156 Move [X8+128], X0
	157 Move [X8+136], W31
	158 Move [X19+88], W20
	159 Move [X19+80], D8
	160 Move X20, [X31+32]
	161 Move X19, [X31+40]
	162 Move X22, [X31+16]
	163 Move X21, [X31+24]
	164 Move X30, [X31+8]
	165 Move V8, [X31+48]
	166 Return 
	167 Call 0x1C17F20

Method: System.Boolean GetControllerState(out UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)

Disassembly:
	0x03B36B70 ADD X31, X31, 0x80
	0x03B36B74 RET
	0x03B36B78 STURH W31, [X0 + 0x41]
	0x03B36B7C STURH W31, [X0 + 0x49]
	0x03B36B80 STURH W31, [X0 + 0x51]
	0x03B36B84 RET
	0x03B36B88 LDRB W0, [X0 + 0xA4]
	0x03B36B8C RET
	0x03B36B90 AND W8, W1, 0x1
	0x03B36B94 STRB W8, [X0 + 0xA4]
	0x03B36B98 RET
	0x03B36B9C LDR X9, [X0 + 0xB8]
	0x03B36BA0 LDUR V0, [X0 + 0xA8]
	0x03B36BA4 STR X9, [X8 + 0x10]
	0x03B36BA8 STR V0, [X8]
	0x03B36BAC RET
	0x03B36BB0 SUB X31, X31, 0x30
	0x03B36BB4 STR X30, [X31 + 0x20]
	0x03B36BB8 LDR X8, [X1 + 0x10]
	0x03B36BBC LDR V0, [X1]
	0x03B36BC0 ADD X1, X0, 0xA8
	0x03B36BC4 ADD X2, X31, 0x0
	0x03B36BC8 STR X8, [X31 + 0x10]
	0x03B36BCC STR V0, [X31]
	0x03B36BD0 BL 0x3B36BE0
	0x03B36BD4 LDR X30, [X31 + 0x20]
	0x03B36BD8 ADD X31, X31, 0x30
	0x03B36BDC RET
	0x03B36BE0 SUB X31, X31, 0x70
	0x03B36BE4 STP X30, X23, [X31 + 0x40]
	0x03B36BE8 STP X22, X21, [X31 + 0x50]
	0x03B36BEC STP X20, X19, [X31 + 0x60]
	0x03B36BF0 ADRP X23, 0x8AC000
	0x03B36BF4 ADRP X22, 0x5BD000
	0x03B36BF8 LDRB W8, [X23 + 0x80F]
	0x03B36BFC LDR X22, [X22 + 0x970]
	0x03B36C00 MOV X21, X2
	0x03B36C04 MOV X19, X1
	0x03B36C08 MOV X20, X0
	0x03B36C0C TBNZ X8, 0x0, 0x3B36C24
	0x03B36C10 ADRP X0, 0x5BD000
	0x03B36C14 LDR X0, [X0 + 0x970]
	0x03B36C18 BL 0x1C16CF4
	0x03B36C1C MOVZ W8, 0x1
	0x03B36C20 STRB W8, [X23 + 0x80F]
	0x03B36C24 LDR X0, [X22]
	0x03B36C28 LDR W8, [X0 + 0xE0]
	0x03B36C2C CBNZ W8, 0x3B36C34
	0x03B36C30 BL 0x1C16DFC
	0x03B36C34 MOV X0, X31
	0x03B36C38 BL 0x3C018E4
	0x03B36C3C TBZ X0, 0x0, 0x3B36C5C
	0x03B36C40 LDR X8, [X19 + 0x10]
	0x03B36C44 LDR V0, [X19]
	0x03B36C48 ADD X0, X31, 0x20
	0x03B36C4C MOV X1, X31
	0x03B36C50 STR X8, [X31 + 0x30]
	0x03B36C54 STR V0, [X31 + 0x2]
	0x03B36C58 BL 0x3BB99F0
	0x03B36C5C LDR X8, [X21 + 0x10]
	0x03B36C60 LDR V0, [X21]
	0x03B36C64 STR X8, [X19 + 0x10]
	0x03B36C68 STR V0, [X19]
	0x03B36C6C LDR X0, [X22]
	0x03B36C70 LDR W8, [X0 + 0xE0]
	0x03B36C74 CBNZ W8, 0x3B36C7C
	0x03B36C78 BL 0x1C16DFC
	0x03B36C7C MOV X0, X31
	0x03B36C80 BL 0x3C018E4
	0x03B36C84 TBZ X0, 0x0, 0x3B36CB4
	0x03B36C88 MOV X0, X20
	0x03B36C8C MOV X1, X31
	0x03B36C90 BL 0x3C32454
	0x03B36C94 TBZ X0, 0x0, 0x3B36CB4
	0x03B36C98 LDR X8, [X19 + 0x10]
	0x03B36C9C LDR V0, [X19]
	0x03B36CA0 ADD X0, X31, 0x0
	0x03B36CA4 MOV X1, X31

ISIL:
	001 Move [X31-32], X30
	002 Move [X31-24], X21
	003 Move [X31+16], X20
	004 Move [X31+24], X19
	005 Move X21, 0x8AD000
	006 Move W8, [X21+2048]
	007 Move X19, X1
	008 Move X20, X0
	009 Move TEMP, X8
	010 And TEMP, TEMP, 1
	011 Compare TEMP, 1
	012 JumpIfEqual {27}
	013 Move X0, 0x625000
	014 Move X0, [X0+136]
	015 Call 0x1C17CF4
	016 Move X0, 0x625000
	017 Move X0, [X0+144]
	018 Call 0x1C17CF4
	019 Move X0, 0x5BE000
	020 Move X0, [X0+1432]
	021 Call 0x1C17CF4
	022 Move X0, 0x625000
	023 Move X0, [X0+96]
	024 Call 0x1C17CF4
	025 Move W8, 1
	026 Move [X21+2048], W8
	027 Move W8, [X20+77]
	028 Compare W8, 0
	029 JumpIfEqual {39}
	030 Move X8, [X20+40]
	031 Compare X8, 0
	032 JumpIfEqual {91}
	033 Move X0, [X8+32]
	034 Compare X0, 0
	035 JumpIfEqual {91}
	036 Move W8, [X0+24]
	037 Move W1, [X20+88]
	038 NotImplemented "Instruction CMP not yet implemented."
	039 Move W8, [X20+76]
	040 Compare W8, 0
	041 JumpIfEqual {56}
	042 Move X8, [X20+40]
	043 Compare X8, 0
	044 JumpIfEqual {91}
	045 Move X0, [X8+32]
	046 Compare X0, 0
	047 JumpIfEqual {91}
	048 Move W8, [X0+24]
	049 Subtract W1, W8, 1
	050 Move X8, 0x625000
	051 Move X8, [X8+144]
	052 Move X2, [X8]
	053 Call List`1<Object>.get_Item, X0, X1
	054 Move X20, X0
	055 Move W0, 1
	056 Move X8, 0x5BE000
	057 Move X8, [X8+1432]
	058 Move X21, [X20+48]
	059 Move X0, [X8]
	060 Move W8, [X0+224]
	061 Compare W8, 0
	062 JumpIfNotEqual {64}
	063 Call 0x1C17DFC
	064 Move X0, X21
	065 Move X1, X31
	066 Move X2, X31
	067 Call Object.op_Inequality, X0, X1
	068 Move TEMP, X0
	069 And TEMP, TEMP, 1
	070 Compare TEMP, 1
	071 JumpIfNotEqual {78}
	072 Move X20, [X20+48]
	073 Compare X20, 0
	074 JumpIfEqual {91}
	075 Move X0, X20
	076 Call XRBaseController.SetupControllerState, X0
	077 Move X20, [X20+128]
	078 Move X8, 0x625000
	079 Move X8, [X8+96]
	080 Move X0, [X8]
	081 Call 0x1C17F10
	082 Move X20, X0
	083 Call XRControllerState..ctor, X0
	084 Move W0, W31
	085 Move [X19], X20
	086 Move X20, [X31+16]
	087 Move X19, [X31+24]
	088 Move X30, [X31+32]
	089 Move X21, [X31+40]
	090 Return X0
	091 Call 0x1C17F20

Method: System.Void .ctor()

Disassembly:
	0x03B36CA8 STR X8, [X31 + 0x10]
	0x03B36CAC STR V0, [X31]

ISIL:
	001 Move X1, X31
	002 Call MonoBehaviour..ctor, X0
	003 Return 

